WEBVTT
Kind: captions
Language: en

00:00:01.980 --> 00:00:03.540
MALE SPEAKER: Shanghai
GDG is a very

00:00:03.540 --> 00:00:05.610
interesting developer community.

00:00:05.610 --> 00:00:06.450
FEMALE SPEAKER: I'm
glad somebody

00:00:06.450 --> 00:00:07.830
has asked this question.

00:00:07.830 --> 00:00:09.610
MALE SPEAKER: This is where
the magic happens.

00:00:09.610 --> 00:00:10.440
MALE SPEAKER: Shanghai
GDG a very

00:00:10.440 --> 00:00:12.510
interesting developer community.

00:00:12.510 --> 00:00:13.350
FEMALE SPEAKER: I'm
glad somebody

00:00:13.350 --> 00:00:14.610
has asked this question.

00:00:14.610 --> 00:00:15.715
MALE SPEAKER: This is where
the magic happens.

00:00:15.715 --> 00:00:17.030
FEMALE SPEAKER: This is
primarily a question and

00:00:17.030 --> 00:00:18.910
answer show so if any
of you out there

00:00:18.910 --> 00:00:20.160
would like to ask questions.

00:00:28.820 --> 00:00:30.420
IKAI LAN: Afternoon,
developers.

00:00:30.420 --> 00:00:32.940
We are here to welcome you
today to September 20th

00:00:32.940 --> 00:00:36.040
edition of Google Developers
Live for Google Apps Script.

00:00:36.040 --> 00:00:37.270
My name is Ikai Lan.

00:00:37.270 --> 00:00:38.500
ERIC KOLEDA: And I'm
Eric Koleda.

00:00:38.500 --> 00:00:40.270
IKAI LAN: And we've got a good
show for you guys today.

00:00:40.270 --> 00:00:44.170
So we're going to recap the
Austin Hackathon, which

00:00:44.170 --> 00:00:46.400
happened last week.

00:00:46.400 --> 00:00:48.440
Eric's going to show us a really
cool app he's been

00:00:48.440 --> 00:00:48.960
working on.

00:00:48.960 --> 00:00:51.280
It integrates Google+ and
Google Apps Script.

00:00:51.280 --> 00:00:53.790
And after that, we're going to
go ahead and answer some live

00:00:53.790 --> 00:00:56.610
questions, as well some of the
questions on Google Moderator.

00:00:56.610 --> 00:00:59.100
So first off, let's
talk about Austin.

00:00:59.100 --> 00:01:00.512
ERIC KOLEDA: Oh, that
was a blast.

00:01:00.512 --> 00:01:04.340
IKAI LAN: Yeah, Eric and I
were in Austin last week

00:01:04.340 --> 00:01:06.120
hosting Hackathon.

00:01:06.120 --> 00:01:08.100
At the Hackathon, we had a lot
of really great participants.

00:01:08.100 --> 00:01:10.610
So if any of you guys are
watching right now, you guys

00:01:10.610 --> 00:01:11.870
were awesome.

00:01:11.870 --> 00:01:13.200
We had a great time
[? in a U-Haul. ?]

00:01:13.200 --> 00:01:13.550
Right?

00:01:13.550 --> 00:01:14.630
ERIC KOLEDA: Yeah, no,
it was a blast.

00:01:14.630 --> 00:01:15.880
We had a lot of excitement
out there.

00:01:15.880 --> 00:01:19.210
People who really ranged the
spectrum too of existing Apps

00:01:19.210 --> 00:01:21.500
Script developers, to people who
are brand new to it, some

00:01:21.500 --> 00:01:23.255
students, some people
from enterprises.

00:01:23.255 --> 00:01:25.010
It was great.

00:01:25.010 --> 00:01:27.490
IKAI LAN: We saw pretty good
apps that got built.

00:01:27.490 --> 00:01:30.020
There's one guy, he uses Google
Drive to store all of

00:01:30.020 --> 00:01:30.700
his invoices.

00:01:30.700 --> 00:01:32.370
His name is Will.

00:01:32.370 --> 00:01:36.330
And what he does is he put
together an app script that

00:01:36.330 --> 00:01:38.380
goes through entire Google Drive
and pulls out all the

00:01:38.380 --> 00:01:41.030
spreadsheets and it builds a
dashboard that tells him how

00:01:41.030 --> 00:01:42.060
much money he's been making.

00:01:42.060 --> 00:01:44.580
And it was kind of funny
because he demoed this

00:01:44.580 --> 00:01:47.770
application to a live audience
with his live data.

00:01:47.770 --> 00:01:49.650
And he's like, this is how
much cash flow I have.

00:01:49.650 --> 00:01:51.640
I was like, oh that's
good, that's good.

00:01:51.640 --> 00:01:52.600
But he was a really cool guy.

00:01:52.600 --> 00:01:53.890
I really had a good time
talking to him.

00:01:53.890 --> 00:01:55.490
ERIC KOLEDA: We embrace openness
here at Google, so

00:01:55.490 --> 00:01:57.420
you know, I think it
fit with the event.

00:01:57.420 --> 00:01:59.570
IKAI LAN: Here's my pin
number, by the way.

00:01:59.570 --> 00:02:02.950
We had this other guy who,
he worked for the

00:02:02.950 --> 00:02:03.960
government, I believe.

00:02:03.960 --> 00:02:05.720
And I was super impressed
by the app.

00:02:05.720 --> 00:02:08.830
Now, he was probably the only
guy who had Apps Script

00:02:08.830 --> 00:02:09.630
experience.

00:02:09.630 --> 00:02:11.740
And what he built was an
application, it was a

00:02:11.740 --> 00:02:15.320
combination of Apps Script and
Fusion Tables, that everybody

00:02:15.320 --> 00:02:17.770
riding in a squad car, or a
fire engine, would have a

00:02:17.770 --> 00:02:20.520
laptop with a 3G connection.

00:02:20.520 --> 00:02:23.350
And what happened was, you could
look at it at any given

00:02:23.350 --> 00:02:25.750
time, you could look on a map
and see where are all the

00:02:25.750 --> 00:02:28.080
other squad cars, where
are the fire engines.

00:02:28.080 --> 00:02:31.610
And he was doing was doing
some really cool stuff.

00:02:31.610 --> 00:02:32.850
ERIC KOLEDA: I love seeing that
integration with Fusion

00:02:32.850 --> 00:02:34.190
Tables too.

00:02:34.190 --> 00:02:36.330
With ScriptDb we've got this new
way of storing data, but

00:02:36.330 --> 00:02:38.140
Fusion Tables is great,
especially if he has a lot of

00:02:38.140 --> 00:02:39.390
relational things.

00:02:39.390 --> 00:02:41.160
So I think it really worked
well for him.

00:02:41.160 --> 00:02:43.780
It was all the Geo stuff, and
the ScriptDb-- he showed me

00:02:43.780 --> 00:02:45.120
all the stuff, I was like oh
my god, you built all that?

00:02:45.120 --> 00:02:47.820
He goes, oh actually,
I uh, ScriptDb, I

00:02:47.820 --> 00:02:49.830
used the Fusion Tables.

00:02:49.830 --> 00:02:52.060
Oh, that reminds me, there was
another really cool app that

00:02:52.060 --> 00:02:52.740
we saw that was demoed.

00:02:52.740 --> 00:02:57.615
Who was the one guy who, it was
a Google map and-- do you

00:02:57.615 --> 00:02:57.910
remember this?

00:02:57.910 --> 00:03:00.120
It was a document where if
I sent you five points of

00:03:00.120 --> 00:03:04.020
interest, it would find the
shortest path to all these

00:03:04.020 --> 00:03:05.570
things and it will email
you directions.

00:03:05.570 --> 00:03:07.400
ERIC KOLEDA: Yeah, I think he
was imagining a delivery

00:03:07.400 --> 00:03:10.420
person having to make five
different deliveries, what's

00:03:10.420 --> 00:03:11.260
the best route?

00:03:11.260 --> 00:03:13.000
IKAI LAN: Right, that was a
really good application.

00:03:13.000 --> 00:03:15.470
And I remember, there were some
comments, they were from

00:03:15.470 --> 00:03:21.070
me about, holy moly so you have
these points, find me the

00:03:21.070 --> 00:03:22.560
shortest path to all
of these points.

00:03:22.560 --> 00:03:26.250
And he goes, actually I just
called it the Optimize Route.

00:03:26.250 --> 00:03:28.340
We have that, that's awesome.

00:03:28.340 --> 00:03:30.970
ERIC KOLEDA: Google Maps, in
Apps Script, the direction

00:03:30.970 --> 00:03:33.760
finder has this great
feature, Optimize.

00:03:33.760 --> 00:03:35.080
One flag, you're done.

00:03:35.080 --> 00:03:35.950
IKAI LAN: Right.

00:03:35.950 --> 00:03:38.900
For everyone that's studied
computer science before,

00:03:38.900 --> 00:03:40.725
mathematics, you know that this
is something called the

00:03:40.725 --> 00:03:42.160
traveling salesman problem.

00:03:42.160 --> 00:03:43.270
ERIC KOLEDA: It's not
easily solved.

00:03:43.270 --> 00:03:46.290
Not easy, but somebody did it.

00:03:46.290 --> 00:03:48.680
And you can take advantage
of it.

00:03:48.680 --> 00:03:50.480
Overall, I had a great
time in Austin.

00:03:50.480 --> 00:03:51.090
What did you think?

00:03:51.090 --> 00:03:52.810
ERIC KOLEDA: Yeah, I had a
blast out there, as well.

00:03:52.810 --> 00:03:54.900
I mean, a really good
environment in the room.

00:03:54.900 --> 00:03:56.320
People were excited.

00:03:56.320 --> 00:03:57.190
They had a lot of fun, too.

00:03:57.190 --> 00:03:58.660
I think people were really
impressed at how much they

00:03:58.660 --> 00:04:00.150
could get done during
the short amount

00:04:00.150 --> 00:04:01.830
of time of a Hackathon.

00:04:01.830 --> 00:04:03.756
Because there wasn't a need to
set up an environment, we

00:04:03.756 --> 00:04:06.320
didn't have to guide people
through getting Eclipse

00:04:06.320 --> 00:04:08.430
configured correctly, they just
opened their browser, and

00:04:08.430 --> 00:04:09.770
they were going straight away.

00:04:09.770 --> 00:04:13.310
IKAI LAN: Eric, I mean Eric was
like that, he was on top

00:04:13.310 --> 00:04:15.100
of everything.

00:04:15.100 --> 00:04:18.399
Like this, this is my
on top of stuff.

00:04:18.399 --> 00:04:20.500
One thing I had tried to do when
I was in Austin was, I

00:04:20.500 --> 00:04:22.670
tried to go visit this barbecue
place, and I tried to

00:04:22.670 --> 00:04:24.610
get Eric to come with me, but
he just wouldn't do it.

00:04:24.610 --> 00:04:25.920
ERIC KOLEDA: Well, I had
barbecue at the airport.

00:04:25.920 --> 00:04:27.500
I know that doesn't sound right,
but it was actually

00:04:27.500 --> 00:04:29.440
like a legitimate joint that
had an outpost there.

00:04:29.440 --> 00:04:30.240
IKAI LAN: Legitimate?

00:04:30.240 --> 00:04:31.850
Franklin Barbecue
is legitimate.

00:04:31.850 --> 00:04:33.410
ERIC KOLEDA: No, no,
I would have gone.

00:04:33.410 --> 00:04:36.550
This wasn't like Joe's Wild West
Barbecue in the airport,

00:04:36.550 --> 00:04:37.900
this was a real Austin place.

00:04:37.900 --> 00:04:39.220
IKAI LAN: Oh, it was the place
that Mike recommended.

00:04:39.220 --> 00:04:39.730
ERIC KOLEDA: Exactly.

00:04:39.730 --> 00:04:40.000
IKAI LAN: Salt Lick.

00:04:40.000 --> 00:04:40.910
ERIC KOLEDA: Salt Lick.

00:04:40.910 --> 00:04:44.053
IKAI LAN: So I will say, Austin
barbecue is legit and

00:04:44.053 --> 00:04:45.010
so are Austin developers.

00:04:45.010 --> 00:04:46.960
So, thank you guys
for having us.

00:04:46.960 --> 00:04:48.500
ERIC KOLEDA: And I think we're
looking to do some more

00:04:48.500 --> 00:04:49.550
Hackathons in the future.

00:04:49.550 --> 00:04:50.515
IKAI LAN: Look forward
to announcements.

00:04:50.515 --> 00:04:51.660
ERIC KOLEDA: Coming soon.

00:04:51.660 --> 00:04:53.670
IKAI LAN: They're coming soon.

00:04:53.670 --> 00:04:55.610
So I think that's enough of
us just talking about how

00:04:55.610 --> 00:04:57.030
awesome Austin is.

00:04:57.030 --> 00:04:58.590
I think so.

00:04:58.590 --> 00:05:01.550
Eric has an application he's
been working on that

00:05:01.550 --> 00:05:02.100
he'd like to demo.

00:05:02.100 --> 00:05:03.250
So Eric, why don't
you take it away.

00:05:03.250 --> 00:05:05.130
ERIC KOLEDA: Yeah, sure.

00:05:05.130 --> 00:05:07.940
With Google I/O this year, we
launched the ability to create

00:05:07.940 --> 00:05:09.520
web apps in Apps Script.

00:05:09.520 --> 00:05:12.860
You can publish as a web app,
use the user's credentials in

00:05:12.860 --> 00:05:16.450
order to make calls to Google
services, publish straight to

00:05:16.450 --> 00:05:18.300
the Chrome Web Store from within
Google Apps Script.

00:05:18.300 --> 00:05:20.860
So we've been working here, on
the Developer Relations Team,

00:05:20.860 --> 00:05:23.550
to build some sample apps to
kind of demonstrate what's

00:05:23.550 --> 00:05:25.380
possible, and get people excited
about building apps in

00:05:25.380 --> 00:05:26.820
Apps Script.

00:05:26.820 --> 00:05:30.503
So the app I've built is
lovingly called Feed Plus.

00:05:30.503 --> 00:05:33.250
And the concept is
pretty similar.

00:05:33.250 --> 00:05:36.010
I don't know, I'm a Google+
power user.

00:05:36.010 --> 00:05:37.590
IKAI LAN: Power user?

00:05:37.590 --> 00:05:38.480
What does that mean?

00:05:38.480 --> 00:05:42.790
ERIC KOLEDA: It means I'm on
there multiple times a day.

00:05:42.790 --> 00:05:44.240
So I use it a lot.

00:05:44.240 --> 00:05:46.170
And I also use it to keep track
of what other people are

00:05:46.170 --> 00:05:47.360
doing with Apps Script.

00:05:47.360 --> 00:05:50.500
So what I really wanted was a
way to kind of track new posts

00:05:50.500 --> 00:05:53.210
about Google+ activity
that was going on.

00:05:53.210 --> 00:05:55.720
And for me, the natural
interface was Google Reader.

00:05:55.720 --> 00:05:57.880
That's where I spent a lot of
my time, also monitoring

00:05:57.880 --> 00:05:58.800
different things.

00:05:58.800 --> 00:06:02.230
So I created an app that allows
you to take Google+

00:06:02.230 --> 00:06:04.615
activities, and turn it
into an RSS feed that

00:06:04.615 --> 00:06:06.170
you can add to Reader.

00:06:06.170 --> 00:06:09.260
So this is great, because it
demonstrates and utilizes a

00:06:09.260 --> 00:06:14.560
few different things in the
Google Apps Script set of APIs

00:06:14.560 --> 00:06:16.210
that we have, that
are pretty cool.

00:06:16.210 --> 00:06:19.990
Let's start by demoing what it
looks like and how you use it.

00:06:19.990 --> 00:06:22.200
So I'm zoomed in super far here,
so all you're seeing is

00:06:22.200 --> 00:06:23.270
a giant white screen.

00:06:23.270 --> 00:06:25.890
But there's not much outside
that anyway.

00:06:25.890 --> 00:06:28.230
So it gives you the option to
create a feed out of either a

00:06:28.230 --> 00:06:31.650
users public profile, it's all
the things that the post

00:06:31.650 --> 00:06:33.690
publicly, not any private or
things shared just with

00:06:33.690 --> 00:06:36.590
circles, or search results,
which is what I like to use.

00:06:36.590 --> 00:06:41.160
So for instance, if I search
for Apps Script, and hit

00:06:41.160 --> 00:06:46.660
Preview, we get to see a preview
of some recent posts

00:06:46.660 --> 00:06:48.340
about Google Apps Script.

00:06:48.340 --> 00:06:49.770
So this is just kind of rendered
here to make sure

00:06:49.770 --> 00:06:51.280
that your search terms are
correct, and you're getting

00:06:51.280 --> 00:06:52.810
the right kind of content.

00:06:52.810 --> 00:06:55.790
And then from there, you can
just add that feed to your

00:06:55.790 --> 00:06:57.940
feed library.

00:06:57.940 --> 00:07:01.370
And then once it's in the
library, you have an RSS link

00:07:01.370 --> 00:07:03.520
and a link straight to Google
Reader that will preloaded

00:07:03.520 --> 00:07:05.140
that feed in Google
Reader for you.

00:07:05.140 --> 00:07:07.370
And then just some additional
management to delete your

00:07:07.370 --> 00:07:09.180
feeds if you no longer
want them.

00:07:09.180 --> 00:07:11.330
IKAI LAN: So Eric, tell us about
some of the APIs you're

00:07:11.330 --> 00:07:12.350
using to make this happen.

00:07:12.350 --> 00:07:14.620
ERIC KOLEDA: Yeah, so to render
this front end here

00:07:14.620 --> 00:07:17.550
that we're taking a look at,
that's the HTML service which

00:07:17.550 --> 00:07:19.220
we launched in Google
I/O this year.

00:07:19.220 --> 00:07:22.380
So I'm using my own custom
HTML, CSS, JavaScript,

00:07:22.380 --> 00:07:24.500
including a whole
lot of jQuery.

00:07:24.500 --> 00:07:27.420
And I even integrated some
other JavaScript library

00:07:27.420 --> 00:07:28.970
underscore, if people have
used that before.

00:07:28.970 --> 00:07:30.400
I'm going to post more
about how that

00:07:30.400 --> 00:07:31.445
integration works later on.

00:07:31.445 --> 00:07:34.730
IKAI LAN: This is Eric's endless
Underscore evangelism.

00:07:34.730 --> 00:07:35.490
You're going to hear
this about 10

00:07:35.490 --> 00:07:37.160
times more in the future.

00:07:37.160 --> 00:07:38.656
ERIC KOLEDA: I love
Underscore.

00:07:38.656 --> 00:07:39.676
IKAI LAN: I'm not saying
it's bad, it's

00:07:39.676 --> 00:07:41.050
just that, you know--

00:07:41.050 --> 00:07:43.330
ERIC KOLEDA: I mean, jQuery is
great, but Underscore has some

00:07:43.330 --> 00:07:44.230
cool power features too.

00:07:44.230 --> 00:07:46.540
So that's what I used to render
this front end here.

00:07:46.540 --> 00:07:49.550
And it's great, because with
the UI app in the past, you

00:07:49.550 --> 00:07:50.070
were limited.

00:07:50.070 --> 00:07:52.540
It was easy to set things up,
but you couldn't just do

00:07:52.540 --> 00:07:53.210
whatever you wanted.

00:07:53.210 --> 00:07:56.490
Here I have complete control
over the styles, the

00:07:56.490 --> 00:07:58.640
JavaScript, the callbacks,
the flow, and feel of the

00:07:58.640 --> 00:08:00.820
application.

00:08:00.820 --> 00:08:02.835
And then, in addition, all this
information about the

00:08:02.835 --> 00:08:05.440
feed library is stored
in ScriptDb, which

00:08:05.440 --> 00:08:06.645
we mentioned earlier.

00:08:06.645 --> 00:08:09.900
And it allows me to query on
just the feeds that I've

00:08:09.900 --> 00:08:14.250
created, my own user, and it
also allows me to save and

00:08:14.250 --> 00:08:16.540
retrieve the metadata associated
with these feeds.

00:08:16.540 --> 00:08:19.120
So that was a really easy way
to store this data after I

00:08:19.120 --> 00:08:20.360
created a feed.

00:08:20.360 --> 00:08:22.610
And then the third major thing
I used was the Content

00:08:22.610 --> 00:08:24.110
Service, which we just recently

00:08:24.110 --> 00:08:26.080
published a new guide for.

00:08:26.080 --> 00:08:28.610
The Content Service is what
allows me to serve an RSS feed

00:08:28.610 --> 00:08:29.920
from Google Apps Script.

00:08:29.920 --> 00:08:34.049
I can construct the XML inside
of the script, and then

00:08:34.049 --> 00:08:36.630
publish it out, and then it's
consumable by Google Reader,

00:08:36.630 --> 00:08:38.320
or theoretically other
feed readers.

00:08:38.320 --> 00:08:39.200
IKAI LAN: Right.

00:08:39.200 --> 00:08:42.870
One thing that we're asking, is
what do you do to get the

00:08:42.870 --> 00:08:46.620
Google+ data, like what's the
API you're using, and what

00:08:46.620 --> 00:08:47.630
complications do you run into.

00:08:47.630 --> 00:08:48.440
ERIC KOLEDA: That's
a good point.

00:08:48.440 --> 00:08:51.340
So Google+ provides an API,
and I'm using the

00:08:51.340 --> 00:08:52.880
unauthenticated version.

00:08:52.880 --> 00:08:54.760
I actually just want to
have the public data.

00:08:54.760 --> 00:08:58.300
Because the RSS feeds I'm
creating, in order to be

00:08:58.300 --> 00:09:01.865
accessible by Google Reader,
they need to be

00:09:01.865 --> 00:09:02.780
in the public domain.

00:09:02.780 --> 00:09:04.680
Google Reader doesn't have your
credentials at the time

00:09:04.680 --> 00:09:05.960
of the making of the request.

00:09:05.960 --> 00:09:07.200
So because of that, I
wanted to limit this

00:09:07.200 --> 00:09:08.010
to just public data.

00:09:08.010 --> 00:09:11.310
I don't want anybody's private
data leaking out.

00:09:11.310 --> 00:09:14.140
And so using the
unauthenticated, public

00:09:14.140 --> 00:09:18.730
Google+ API, I use the URL fetch
app to build the URL,

00:09:18.730 --> 00:09:22.210
and then got back the jSign
data which I parsed via

00:09:22.210 --> 00:09:23.360
[? JSON.parse ?]

00:09:23.360 --> 00:09:24.280
in my script.

00:09:24.280 --> 00:09:25.910
So using those techniques,
I was able to

00:09:25.910 --> 00:09:27.500
fetch data from Google+.

00:09:27.500 --> 00:09:28.570
I'm using some caching too.

00:09:28.570 --> 00:09:31.100
We have the Cache Service in
Apps Script that allows you

00:09:31.100 --> 00:09:34.100
set a time on how long some
information should be cached.

00:09:34.100 --> 00:09:36.600
So I made it so that if you keep
hitting Preview over and

00:09:36.600 --> 00:09:38.720
over again, you're just going
to get the most recent data

00:09:38.720 --> 00:09:40.050
for five minutes.

00:09:40.050 --> 00:09:42.530
It's going to cache that data,
that way we're not overloading

00:09:42.530 --> 00:09:45.000
the Google+ API, or running
out of quota there.

00:09:45.000 --> 00:09:45.480
IKAI LAN: Cool.

00:09:45.480 --> 00:09:46.470
Very, very cool.

00:09:46.470 --> 00:09:48.660
ERIC KOLEDA: So this is in
the Chrome Web Store now.

00:09:48.660 --> 00:09:50.780
You can kind of take a look
at it and try it out.

00:09:50.780 --> 00:09:53.940
And I'm going to be publishing
a series of walkthroughs.

00:09:53.940 --> 00:09:56.350
I haven't decided the format
yet, maybe textual, maybe

00:09:56.350 --> 00:09:58.960
video, showing how the
technology behind this works,

00:09:58.960 --> 00:10:02.060
and hopefully give you guys some
pieces that you can reuse

00:10:02.060 --> 00:10:03.510
in your own scripts.

00:10:03.510 --> 00:10:04.340
IKAI LAN: OK, very cool.

00:10:04.340 --> 00:10:06.640
Thank you, Eric.

00:10:06.640 --> 00:10:11.030
So why don't we move on to
some live questions?

00:10:11.030 --> 00:10:13.550
So for those of you on the
Hangout, if you have any

00:10:13.550 --> 00:10:15.970
questions about Eric's
application, or any of the

00:10:15.970 --> 00:10:20.756
tools that he used, do feel free
to jump on and ask us.

00:10:20.756 --> 00:10:21.577
ERIC KOLEDA: All right,
so do we have

00:10:21.577 --> 00:10:22.840
anybody on the Hangout.

00:10:22.840 --> 00:10:24.090
IKAI LAN: We've got--

00:10:26.340 --> 00:10:28.642
looks like we've got one guy.

00:10:28.642 --> 00:10:30.450
Hey there.

00:10:30.450 --> 00:10:34.950
Hold on for a second, we're
going to get on

00:10:34.950 --> 00:10:36.200
the moderator page.

00:10:38.830 --> 00:10:39.490
ERIC KOLEDA: All right,
so if you have any

00:10:39.490 --> 00:10:40.620
questions, come in later.

00:10:40.620 --> 00:10:44.220
I'm going to pop up in the
moderator here, and re-share

00:10:44.220 --> 00:10:45.960
so it can get a view of that.

00:10:48.900 --> 00:10:50.150
Picture-in-picture here.

00:10:50.150 --> 00:10:51.930
All right, here's the
Google Moderator.

00:10:51.930 --> 00:10:54.140
So we've got some questions
here, but feel free to jump in

00:10:54.140 --> 00:10:56.100
later if there are any
live questions.

00:10:56.100 --> 00:11:01.440
So this one, top of the list
here, what is the best way to

00:11:01.440 --> 00:11:02.910
store pictures with Google
Apps Script?

00:11:02.910 --> 00:11:05.030
He needs to store about
3,000 jpeg photos and

00:11:05.030 --> 00:11:06.710
1,000 PDFs every day.

00:11:06.710 --> 00:11:08.550
And they must be protected from
the general public, but

00:11:08.550 --> 00:11:10.610
accessible by his own
domain, and by

00:11:10.610 --> 00:11:11.570
outside business partners.

00:11:11.570 --> 00:11:16.660
IKAI LAN: Well the first thing,
Rudy, we're curious, do

00:11:16.660 --> 00:11:18.820
you have 3,000 period?

00:11:18.820 --> 00:11:21.910
Or do you need to add
3,000 photos a day?

00:11:21.910 --> 00:11:23.570
That's quite a lot of photos.

00:11:23.570 --> 00:11:26.820
And even though we try to make
our quotas pretty high, I feel

00:11:26.820 --> 00:11:28.770
like you're going to trip some
kind of quota there.

00:11:28.770 --> 00:11:29.530
ERIC KOLEDA: You've
been running--

00:11:29.530 --> 00:11:32.130
you've been developing an app
that actually writes a lot to

00:11:32.130 --> 00:11:32.490
Google Drive.

00:11:32.490 --> 00:11:33.370
IKAI LAN: Right, right.

00:11:33.370 --> 00:11:34.800
And we're trying to get Google
Drive [? right ?]

00:11:34.800 --> 00:11:35.500
quota raised.

00:11:35.500 --> 00:11:39.240
But 3,000 a day is going
to be pushing it.

00:11:39.240 --> 00:11:40.280
That's a good question.

00:11:40.280 --> 00:11:41.190
What do you think?

00:11:41.190 --> 00:11:42.290
ERIC KOLEDA: I mean, I think
that Google Drive is

00:11:42.290 --> 00:11:44.370
definitely the right place
to store these.

00:11:44.370 --> 00:11:47.480
One way you may be able to get
around, or deal with the

00:11:47.480 --> 00:11:50.540
quotas in Google Drive, if you
don't need each photo to be

00:11:50.540 --> 00:11:52.610
individually in Drive, but
maybe zip them up.

00:11:52.610 --> 00:11:55.040
And upload the whole zip to
Google Drive, that may count

00:11:55.040 --> 00:11:56.570
as only one upload.

00:11:56.570 --> 00:11:59.050
But then again, 3,000 photos
zipped may still be too large

00:11:59.050 --> 00:12:01.230
for a single upload.

00:12:01.230 --> 00:12:02.556
IKAI LAN: One thing that you
might be able to do is you

00:12:02.556 --> 00:12:03.660
might be able to use ScriptDb.

00:12:03.660 --> 00:12:06.780
And I believe you can pass a
[? blob ?] with ScriptDb.

00:12:06.780 --> 00:12:08.440
I'm not exactly sure
how that works out.

00:12:08.440 --> 00:12:09.740
But even if you can't,
I'm sure you've

00:12:09.740 --> 00:12:11.040
can encode the blob.

00:12:11.040 --> 00:12:14.160
But you're going to trip size
limits on the jpegs

00:12:14.160 --> 00:12:14.445
themselves.

00:12:14.445 --> 00:12:16.400
So I guess the big question
is, are you adding

00:12:16.400 --> 00:12:19.530
3,000 jpegs a day?

00:12:19.530 --> 00:12:22.550
Or is it just persistent roughly
3,000 with a few every

00:12:22.550 --> 00:12:23.240
day coming in.

00:12:23.240 --> 00:12:25.860
Because if you have a few coming
every day, probably

00:12:25.860 --> 00:12:27.360
Google Drive is the
best way to go.

00:12:27.360 --> 00:12:28.060
ERIC KOLEDA: Yeah.

00:12:28.060 --> 00:12:31.390
I would say, it definitely
doesn't sound like a use case

00:12:31.390 --> 00:12:32.730
that is so far out of bounds.

00:12:32.730 --> 00:12:34.390
I know you were talking to the
team about getting the

00:12:34.390 --> 00:12:34.830
[? driveway ?]

00:12:34.830 --> 00:12:35.340
[? codas ?] up.

00:12:35.340 --> 00:12:37.510
So this is something that if
you can get us some more

00:12:37.510 --> 00:12:39.960
background, we can make a
compelling case for why this

00:12:39.960 --> 00:12:41.030
should be allowed
in Google Drive.

00:12:41.030 --> 00:12:43.664
And we can talk to the
teams about that.

00:12:43.664 --> 00:12:45.040
Great.

00:12:45.040 --> 00:12:47.010
The next one we have here,
what steps are taken to

00:12:47.010 --> 00:12:49.620
improve Google Apps Script
performance in terms of speed,

00:12:49.620 --> 00:12:52.430
both pure JavaScript speed, as
well as key services like

00:12:52.430 --> 00:12:53.790
spreadsheet service?

00:12:53.790 --> 00:12:56.890
There is an issue in the issue
tracker he references here.

00:12:56.890 --> 00:12:58.850
Can the engineering team focus
on that rather than new

00:12:58.850 --> 00:13:00.360
features and services?

00:13:00.360 --> 00:13:03.910
I know that performance has been
on the radar recently.

00:13:03.910 --> 00:13:04.810
I've been working--

00:13:04.810 --> 00:13:07.570
one of our engineers who,
they've been definitely taking

00:13:07.570 --> 00:13:08.650
a look at the performance,
doing more

00:13:08.650 --> 00:13:10.220
benchmarking, more testing.

00:13:10.220 --> 00:13:11.540
And I think they have
some things that

00:13:11.540 --> 00:13:13.530
they're looking into.

00:13:13.530 --> 00:13:15.660
Obviously, we have
to balance both.

00:13:15.660 --> 00:13:17.560
People wanted to keep doing more
and more with Google Apps

00:13:17.560 --> 00:13:20.240
Script, and we want to make
sure that new compelling

00:13:20.240 --> 00:13:21.220
things are possible.

00:13:21.220 --> 00:13:22.660
But at the same time,
obviously, sometimes

00:13:22.660 --> 00:13:27.260
performance can affect the
viability of an idea.

00:13:27.260 --> 00:13:30.180
IKAI LAN: I think that
performance is really

00:13:30.180 --> 00:13:34.920
important, but at least from a
priority standpoint, from my

00:13:34.920 --> 00:13:38.300
perspective, in terms of pure
JavaScript performance, I'd

00:13:38.300 --> 00:13:40.675
like to see a dashboard and some
login information before

00:13:40.675 --> 00:13:41.950
I see pure JavaScript
performance.

00:13:41.950 --> 00:13:46.020
So as many of you may know, the
JavaScript is interpreted

00:13:46.020 --> 00:13:46.560
via [? Rhino. ?]

00:13:46.560 --> 00:13:47.290
And a [? Rhino ?]

00:13:47.290 --> 00:13:50.160
engine is fairly performant--
it runs on top of the JVM.

00:13:50.160 --> 00:13:53.610
So if you're doing pure
computation, like, let's say

00:13:53.610 --> 00:13:57.400
you're trying to calculate,
you're trying to factor the

00:13:57.400 --> 00:13:59.490
product of large prime numbers,
that's going to be

00:13:59.490 --> 00:14:01.080
hard on any kind of platform.

00:14:01.080 --> 00:14:03.120
But we really need to understand
what part of

00:14:03.120 --> 00:14:04.900
JavaScript performance
is killing you?

00:14:04.900 --> 00:14:07.100
Are you creating lots and lots
of objects, really quickly,

00:14:07.100 --> 00:14:07.940
and you need to get
rid of them?

00:14:07.940 --> 00:14:10.690
And that should be fine
in JVM as well.

00:14:10.690 --> 00:14:13.370
But we want to know what it is
in terms-- because there are

00:14:13.370 --> 00:14:14.210
two parts here, right?

00:14:14.210 --> 00:14:15.680
One is the pure JavaScript
and the

00:14:15.680 --> 00:14:17.400
second part is the service.

00:14:17.400 --> 00:14:19.250
The service, we definitely
need to improve the

00:14:19.250 --> 00:14:20.220
performance on the service.

00:14:20.220 --> 00:14:22.340
The pure JavaScript, we
like to know what

00:14:22.340 --> 00:14:23.010
bottlenecks you run into.

00:14:23.010 --> 00:14:23.560
Now--

00:14:23.560 --> 00:14:25.700
ERIC KOLEDA: That's a key point,
because we want to make

00:14:25.700 --> 00:14:28.620
everything faster, but only if
that fastness actually gives

00:14:28.620 --> 00:14:30.080
real life benefit, right?

00:14:30.080 --> 00:14:32.370
We want to make sure that all
the work we do produces

00:14:32.370 --> 00:14:33.690
tangible results and
makes people's

00:14:33.690 --> 00:14:34.450
lives actually better.

00:14:34.450 --> 00:14:38.110
So if we cannot compute prime
numbers as fast as some other

00:14:38.110 --> 00:14:40.460
platform, does that actually
affect whether or not you can

00:14:40.460 --> 00:14:42.600
send an email in a workflow?

00:14:42.600 --> 00:14:43.850
We want to make sure that
what we're doing

00:14:43.850 --> 00:14:44.580
actually has impact.

00:14:44.580 --> 00:14:46.740
But if there is a real impact
that you have, like an app

00:14:46.740 --> 00:14:48.740
that's not working well because
of raw JavaScript

00:14:48.740 --> 00:14:51.190
performance, leave that feedback
in the Issue Tracker.

00:14:51.190 --> 00:14:54.120
IKAI LAN: There is one type of
issue where I think the raw

00:14:54.120 --> 00:14:56.760
performance may be hindering
some people.

00:14:56.760 --> 00:14:59.740
And I've heard about this from
some people, from you guys and

00:14:59.740 --> 00:15:01.930
some folks on the core
engineering team, which is

00:15:01.930 --> 00:15:06.530
regular expression parsing.

00:15:06.530 --> 00:15:09.810
So if you have these types of
issues, do let us know because

00:15:09.810 --> 00:15:11.530
we have seen this.

00:15:11.530 --> 00:15:14.860
And it tends to be with very,
very long, large, complicated,

00:15:14.860 --> 00:15:18.710
regular expressions, but these
problems do exist.

00:15:18.710 --> 00:15:19.200
ERIC KOLEDA: I agree.

00:15:19.200 --> 00:15:22.020
So the next one we have here is,
there's was a major outage

00:15:22.020 --> 00:15:23.890
of HTML service this week
with continuing

00:15:23.890 --> 00:15:25.110
issues coming from it.

00:15:25.110 --> 00:15:27.200
Can you talk about the cause,
and the reliability of HTML

00:15:27.200 --> 00:15:29.800
service, and any future steps
you're taken to improve it.

00:15:29.800 --> 00:15:31.400
Some concerned customers.

00:15:31.400 --> 00:15:34.790
So it is true that HTML service
was down a little bit,

00:15:34.790 --> 00:15:35.950
was it yesterday, right?

00:15:35.950 --> 00:15:38.440
It was down for about
half of a day.

00:15:38.440 --> 00:15:39.960
ERIC KOLEDA: Half a day.

00:15:39.960 --> 00:15:42.740
And it's certainly something
that everybody regretted and

00:15:42.740 --> 00:15:43.390
felt bad about.

00:15:43.390 --> 00:15:47.690
We're trying to keep all of
these services very stable.

00:15:47.690 --> 00:15:49.760
And so one of the things we
especially looked at was,

00:15:49.760 --> 00:15:51.740
getting the information out
there in a better way.

00:15:51.740 --> 00:15:56.620
We do have a dashboard at
script.google.com/dashboard

00:15:56.620 --> 00:15:59.985
that tells you about certain
services having problems and

00:15:59.985 --> 00:16:01.840
their uptime more or less.

00:16:01.840 --> 00:16:04.170
And unfortunately, HTML service
wasn't already baked

00:16:04.170 --> 00:16:05.270
into that dashboard.

00:16:05.270 --> 00:16:07.340
So we're looking at definitely
making sure that it's on there

00:16:07.340 --> 00:16:10.340
as well as the other key
services, as well as maybe

00:16:10.340 --> 00:16:12.340
adding additional information
to that dashboard.

00:16:12.340 --> 00:16:13.870
So that's one thing that we're
definitely looking into.

00:16:17.330 --> 00:16:19.220
IKAI LAN: We're also talking
about different ways of doing

00:16:19.220 --> 00:16:19.800
notification.

00:16:19.800 --> 00:16:21.660
There's one way is to put
it on the dashboard.

00:16:21.660 --> 00:16:26.700
But some of the other things we
can do is actively notify

00:16:26.700 --> 00:16:27.350
developers.

00:16:27.350 --> 00:16:31.700
Because the thing about HTML
service is that we knew it was

00:16:31.700 --> 00:16:34.160
happening, so we could have
notify developers.

00:16:34.160 --> 00:16:36.760
But the best we could do at
this point was to post

00:16:36.760 --> 00:16:38.870
something into Issues Tracker
and try to answer questions as

00:16:38.870 --> 00:16:40.290
quickly as we could see them.

00:16:40.290 --> 00:16:40.400
ERIC KOLEDA: That's
a good point.

00:16:40.400 --> 00:16:41.830
We did post on the Issue
Tracker as well.

00:16:41.830 --> 00:16:43.540
Which is a good way to
get the follow up

00:16:43.540 --> 00:16:45.690
on when it was resolved.

00:16:45.690 --> 00:16:48.320
If there are other ways that
you prefer to be contacted,

00:16:48.320 --> 00:16:50.300
give us that feedback.

00:16:50.300 --> 00:16:53.220
If you are on Google+ let us
know if there's another medium

00:16:53.220 --> 00:16:56.330
that works better for you.

00:16:56.330 --> 00:17:00.940
All right, we have two
more questions here.

00:17:00.940 --> 00:17:02.680
Any news on a West
Coast Hackathon?

00:17:02.680 --> 00:17:05.960
IKAI LAN: Rudy, possibly,
just stay tuned.

00:17:05.960 --> 00:17:08.060
I see that you're
from Phoenix.

00:17:08.060 --> 00:17:13.380
So I don't want to let too many
cats out of the bag right

00:17:13.380 --> 00:17:15.918
now, but how close are
you to Los Angeles?

00:17:15.918 --> 00:17:16.794
What?

00:17:16.794 --> 00:17:18.109
What?

00:17:18.109 --> 00:17:20.030
Am I-- too much information?

00:17:20.030 --> 00:17:20.460
What?

00:17:20.460 --> 00:17:21.430
ERIC KOLEDA: Purely
hypothetical.

00:17:21.430 --> 00:17:22.839
IKAI LAN: Purely hypothetical.

00:17:22.839 --> 00:17:24.329
Just stay tuned, pay attention
to our blog

00:17:24.329 --> 00:17:26.030
and our Google+ posts.

00:17:26.030 --> 00:17:28.990
There's one coming, and we'd
really like to invite you out

00:17:28.990 --> 00:17:30.262
to see what you're doing.

00:17:30.262 --> 00:17:31.300
ERIC KOLEDA: 3,000
photos per day.

00:17:31.300 --> 00:17:33.570
Yeah, Rudy followed up here,
3,000 photos per day.

00:17:33.570 --> 00:17:35.640
IKAI LAN: Well I've got
one, and I've got

00:17:35.640 --> 00:17:37.450
one which might work.

00:17:37.450 --> 00:17:39.250
But I have to talk
to some folks,

00:17:39.250 --> 00:17:41.000
which is Google Storage.

00:17:41.000 --> 00:17:44.010
Google Storage is meant
primarily as cloud storage for

00:17:44.010 --> 00:17:45.860
developers.

00:17:45.860 --> 00:17:47.460
And the quota there
is completely

00:17:47.460 --> 00:17:48.610
based on what you pay.

00:17:48.610 --> 00:17:52.270
So with Apps Script right now,
we do we don't have different

00:17:52.270 --> 00:17:55.970
quota tiers that you can pay
because you don't pay for

00:17:55.970 --> 00:17:56.680
Google Apps Script.

00:17:56.680 --> 00:17:59.750
So we don't really have a good
way of giving you additional

00:17:59.750 --> 00:18:00.880
storage scalability.

00:18:00.880 --> 00:18:02.490
However, Google Storage
already has billing.

00:18:02.490 --> 00:18:05.240
This is [? something ?]
enabled API console.

00:18:05.240 --> 00:18:07.665
We need to figure out how to
make that work nicely with

00:18:07.665 --> 00:18:07.980
Google Apps Script.

00:18:07.980 --> 00:18:10.830
It should work using
URL fetch.

00:18:10.830 --> 00:18:12.950
But some of the stuff
is doing--

00:18:12.950 --> 00:18:14.910
you've got to go through
[INAUDIBLE] flow and push

00:18:14.910 --> 00:18:15.460
things out.

00:18:15.460 --> 00:18:17.525
And I don't think anyone has
written any sample code

00:18:17.525 --> 00:18:18.820
showing how to do that yet.

00:18:18.820 --> 00:18:20.255
ERIC KOLEDA: The other nice
thing about Drive is the other

00:18:20.255 --> 00:18:22.150
half of the question there was
like, how do you get it so

00:18:22.150 --> 00:18:24.330
that it's hidden from the
public, but accessible within

00:18:24.330 --> 00:18:26.140
a domain and outside
business partners.

00:18:26.140 --> 00:18:27.890
Our Drive is great at
doing permissions.

00:18:27.890 --> 00:18:30.250
It's very easy to invite people
and have things exposed

00:18:30.250 --> 00:18:30.840
to your domain.

00:18:30.840 --> 00:18:34.360
So we'll have to see what's the
best fit between handling

00:18:34.360 --> 00:18:36.123
a lot of data, because
Google Storage is

00:18:36.123 --> 00:18:36.800
meant for tons of data.

00:18:36.800 --> 00:18:37.930
IKAI LAN: Right, that's true.

00:18:37.930 --> 00:18:39.520
ERIC KOLEDA: You're kind of
right at that threshold where

00:18:39.520 --> 00:18:41.620
you're going from a little bit
of data to a lot of data.

00:18:41.620 --> 00:18:42.010
IKAI LAN: Right.

00:18:42.010 --> 00:18:45.640
Google Storage, also, I don't
believe you can have-- you

00:18:45.640 --> 00:18:47.390
have either public
or private ACLs.

00:18:47.390 --> 00:18:49.760
And I don't think it gets any
more complex than that, which

00:18:49.760 --> 00:18:51.730
could be a problem.

00:18:51.730 --> 00:18:54.870
But the thing about the ACLs is
that a lot of people just

00:18:54.870 --> 00:18:57.900
go by security by obscurity,
which is that it's very hard

00:18:57.900 --> 00:18:59.420
for people to guess that URL.

00:18:59.420 --> 00:19:01.520
Right?

00:19:01.520 --> 00:19:04.640
A lot of people do do this.

00:19:04.640 --> 00:19:09.740
It depends on the sensitivity
of the images, I suppose.

00:19:09.740 --> 00:19:12.140
ERIC KOLEDA: That could
influence a decision for sure.

00:19:12.140 --> 00:19:12.680
All right, great.

00:19:12.680 --> 00:19:15.030
That seems to be all the
things we have on the

00:19:15.030 --> 00:19:15.720
moderator page.

00:19:15.720 --> 00:19:16.880
Do we have anybody
else in the live

00:19:16.880 --> 00:19:17.950
Hangout that has questions?

00:19:17.950 --> 00:19:19.220
IKAI LAN: We probably should
have bounced back and forth

00:19:19.220 --> 00:19:21.400
between the moderator and
the live Hang Out.

00:19:21.400 --> 00:19:24.990
ERIC KOLEDA: Let me quit my
screen sharing, a little

00:19:24.990 --> 00:19:26.950
picture and picture here.

00:19:26.950 --> 00:19:28.860
All right.

00:19:28.860 --> 00:19:30.750
Let's see, checking the chat,
there is something in the chat

00:19:30.750 --> 00:19:32.880
we have here too.

00:19:32.880 --> 00:19:36.245
John Coffman asks, sample app
is too small to be seen.

00:19:36.245 --> 00:19:37.165
Oh, sorry about that.

00:19:37.165 --> 00:19:39.920
Yeah, we were trying to make it
so that the resolution was

00:19:39.920 --> 00:19:40.560
a little better here.

00:19:40.560 --> 00:19:42.790
But like I said, it is in the
Chrome Web Store, search for

00:19:42.790 --> 00:19:45.760
Feed Plus and you can also
take a look at it there.

00:19:45.760 --> 00:19:48.710
And then he also had a question
about time stamping

00:19:48.710 --> 00:19:51.180
to look at the logger at
millisecond resolution so I

00:19:51.180 --> 00:19:53.550
can test various architectures
of my code.

00:19:53.550 --> 00:19:55.540
IKAI LAN: So there are a couple
different ways you can

00:19:55.540 --> 00:19:56.180
do this, right.

00:19:56.180 --> 00:19:57.730
And they're all a little
bit flawed.

00:19:57.730 --> 00:20:01.690
So the question is, how can I
test which parts of my code

00:20:01.690 --> 00:20:03.890
tend to be slower than others.

00:20:03.890 --> 00:20:06.600
And this is going to be a little
bit tricky because the

00:20:06.600 --> 00:20:08.950
logger right now it's
not persistent.

00:20:08.950 --> 00:20:12.080
And what you can do
is, you can--

00:20:12.080 --> 00:20:15.290
it's easy enough to collect
the time in terms of

00:20:15.290 --> 00:20:18.480
milliseconds at the beginning of
when you start an API call

00:20:18.480 --> 00:20:19.120
and at the end.

00:20:19.120 --> 00:20:20.630
Now the question is, how do
you collect this data?

00:20:20.630 --> 00:20:24.820
And honestly, this is only
useful if you run it over and

00:20:24.820 --> 00:20:26.920
over and over, like a large
amount of time.

00:20:26.920 --> 00:20:28.510
And one thing you can
do is, you could

00:20:28.510 --> 00:20:30.220
store it into ScriptDb.

00:20:30.220 --> 00:20:33.220
But the problem with the
ScriptDb solution is that now

00:20:33.220 --> 00:20:35.580
you have-- well no, the ScriptDb
solution works just

00:20:35.580 --> 00:20:36.970
fine, because you're doing
it right after

00:20:36.970 --> 00:20:37.870
you collect the time.

00:20:37.870 --> 00:20:38.660
ERIC KOLEDA: After you
collect the time--

00:20:38.660 --> 00:20:40.830
IKAI LAN: I was going to say,
well by observing it, you're

00:20:40.830 --> 00:20:41.590
influencing how long it takes.

00:20:41.590 --> 00:20:42.790
But if you write it--

00:20:42.790 --> 00:20:43.590
ERIC KOLEDA: We're getting
into quantum physics

00:20:43.590 --> 00:20:44.030
there, aren't we?

00:20:44.030 --> 00:20:47.495
IKAI LAN: Yeah, we're getting
into Heisenberg uncertainty

00:20:47.495 --> 00:20:48.830
principle and all that.

00:20:48.830 --> 00:20:51.820
And that's all I know
about physics.

00:20:51.820 --> 00:20:54.090
I just know that phrase.

00:20:54.090 --> 00:20:56.426
Yeah that's one thing that a
lot of people do, that one

00:20:56.426 --> 00:20:57.160
thing that we do.

00:20:57.160 --> 00:20:58.720
We don't have a benchmarking
tool built in yet.

00:20:58.720 --> 00:21:01.650
We haven't seen a lot of
requests for this, because

00:21:01.650 --> 00:21:03.380
typically what we--

00:21:03.380 --> 00:21:06.020
a lot of our developers, what
they look for are things on

00:21:06.020 --> 00:21:08.670
how can we reduce the runtime
of this from the order of 10

00:21:08.670 --> 00:21:10.840
seconds to an order of three
or four seconds.

00:21:10.840 --> 00:21:13.230
As opposed to this thing runs in
20 milliseconds, I want it

00:21:13.230 --> 00:21:14.630
to run in 10 milliseconds.

00:21:14.630 --> 00:21:16.870
That's going to be a little
bit trickier.

00:21:16.870 --> 00:21:20.140
What do you think?

00:21:20.140 --> 00:21:23.540
ERIC KOLEDA: I mean, definitely
I think that

00:21:23.540 --> 00:21:24.140
[? there's ?] definitively
a lot of interest

00:21:24.140 --> 00:21:25.000
in performance today.

00:21:25.000 --> 00:21:25.955
We've got a lot of questions
about performance.

00:21:25.955 --> 00:21:28.950
So I think, obviously, the more
we could do to provide

00:21:28.950 --> 00:21:30.250
tools to benchmark
that the better.

00:21:30.250 --> 00:21:32.280
And obviously you had some good
suggestions there for

00:21:32.280 --> 00:21:33.350
making your own.

00:21:33.350 --> 00:21:35.280
But I think that it could be
worthwhile that if people are

00:21:35.280 --> 00:21:37.720
really looking at like max
performance, maybe we look at

00:21:37.720 --> 00:21:38.850
providing some more
of those tools.

00:21:38.850 --> 00:21:39.970
We can talk to the
team about that.

00:21:39.970 --> 00:21:41.010
IKAI LAN: Right, right.

00:21:41.010 --> 00:21:44.570
And, yeah, I mean I definitely
have seen, for instance, HTML

00:21:44.570 --> 00:21:48.720
service performance has been
improving very quickly.

00:21:48.720 --> 00:21:50.650
I've seen that the core
engineering team has been

00:21:50.650 --> 00:21:52.160
rolling out a lot of
updates for that.

00:21:52.160 --> 00:21:53.800
ERIC KOLEDA: For sure.

00:21:53.800 --> 00:21:56.110
We have another question here
in the chat from one of our

00:21:56.110 --> 00:21:58.130
participants, asks is there any
documentation on client

00:21:58.130 --> 00:22:00.040
side use of JavaScript
and HTML service?

00:22:00.040 --> 00:22:02.800
Like the limitations that
the [? Kaha engine ?]

00:22:02.800 --> 00:22:05.020
has for JavaScript.

00:22:05.020 --> 00:22:08.840
So I know we do have a page that
kind of lists some of the

00:22:08.840 --> 00:22:09.870
basic restrictions.

00:22:09.870 --> 00:22:11.850
It's our tutorial--

00:22:11.850 --> 00:22:15.130
not [? tutorial ?] but our guide
on the HTML service.

00:22:15.130 --> 00:22:16.650
I think it's under User
Interfaces in

00:22:16.650 --> 00:22:17.860
our Navigation Structure.

00:22:17.860 --> 00:22:19.740
And in there, we talk
about some of them.

00:22:19.740 --> 00:22:22.830
But we are realizing that there
are some things you'd be

00:22:22.830 --> 00:22:24.140
used to doing in a regular HTML

00:22:24.140 --> 00:22:25.880
web app that in [? Kaha ?]

00:22:25.880 --> 00:22:26.770
get a bit challenging.

00:22:26.770 --> 00:22:29.080
I know today one of our
colleagues just ran into a

00:22:29.080 --> 00:22:30.550
problem with onClick.

00:22:30.550 --> 00:22:33.290
Setting that on an element
had some strange behavior

00:22:33.290 --> 00:22:34.370
depending upon what
you're doing.

00:22:34.370 --> 00:22:37.310
So we're looking at figuring
out more of what those

00:22:37.310 --> 00:22:39.880
challenges are and coming
up with solutions.

00:22:39.880 --> 00:22:42.790
I think the onClick one did have
one solution buried into

00:22:42.790 --> 00:22:44.480
the documentation already.

00:22:44.480 --> 00:22:46.940
So I think if you give that
another read, maybe do some

00:22:46.940 --> 00:22:50.000
Control F, find the word
you're looking for.

00:22:50.000 --> 00:22:52.280
There may be something
already in there.

00:22:52.280 --> 00:22:54.060
IKAI LAN: There's a tool too
that Corey mention that was

00:22:54.060 --> 00:22:56.200
useful, which is [? Kaha ?]

00:22:56.200 --> 00:22:56.470
what was it?

00:22:56.470 --> 00:22:57.090
[? Kaha ?]

00:22:57.090 --> 00:22:58.840
Code runner, Script
runner, sandbox?

00:22:58.840 --> 00:22:59.610
Sandbox.

00:22:59.610 --> 00:23:03.220
Where what you can do is, if you
just want to run one piece

00:23:03.220 --> 00:23:05.720
of code and see if it works, you
can run it in a [? Kaha ?]

00:23:05.720 --> 00:23:06.710
Sandbox.

00:23:06.710 --> 00:23:07.770
But [? Kaha ?]

00:23:07.770 --> 00:23:12.140
is known for being a little bit
overly restrictive, erring

00:23:12.140 --> 00:23:12.980
on the side of caution.

00:23:12.980 --> 00:23:15.830
So things that are malformed are
going to cause problems.

00:23:15.830 --> 00:23:17.330
You were talking about
this last week.

00:23:17.330 --> 00:23:19.650
ERIC KOLEDA: Yeah,
that bit me once.

00:23:19.650 --> 00:23:20.770
IKAI LAN: What was the
specific thing?

00:23:20.770 --> 00:23:20.980
Yeah,

00:23:20.980 --> 00:23:22.680
ERIC KOLEDA: The specific one
was you create an object

00:23:22.680 --> 00:23:26.630
literal in JavaScript, like open
squiggly, close squiggly,

00:23:26.630 --> 00:23:29.280
and key value pairs.

00:23:29.280 --> 00:23:31.680
After every key value pair you
had a comma to separate them,

00:23:31.680 --> 00:23:33.190
but you're not supposed
to have a comma on

00:23:33.190 --> 00:23:34.630
the very last one.

00:23:34.630 --> 00:23:37.090
It's only to separate them
at the end of every one.

00:23:37.090 --> 00:23:39.820
And if you had that comma, web
browsers usually don't care

00:23:39.820 --> 00:23:42.020
but [? Kaha ?] cared and
it caused a problem.

00:23:42.020 --> 00:23:43.490
IKAI LAN: Web browsers
don't care.

00:23:43.490 --> 00:23:46.930
I think [? Kaha ?] is also
specific about named keywords,

00:23:46.930 --> 00:23:48.650
but I could be wrong
about that.

00:23:48.650 --> 00:23:49.285
ERIC KOLEDA: Yeah,
there may be some

00:23:49.285 --> 00:23:49.960
limitations there as well.

00:23:49.960 --> 00:23:51.880
The main idea is that [? Kaha ?]
is trying to keep

00:23:51.880 --> 00:23:52.990
things safe, right?

00:23:52.990 --> 00:23:56.010
They're going on more
of a whitelist

00:23:56.010 --> 00:23:56.930
style approach, right?

00:23:56.930 --> 00:23:58.920
They know what's good
JavaScript, and they're making

00:23:58.920 --> 00:23:59.640
you stick to that.

00:23:59.640 --> 00:24:02.005
And if you try to go outside
those rounds, you might be

00:24:02.005 --> 00:24:03.390
doing something fishy, you might
trying to break out of

00:24:03.390 --> 00:24:06.160
the Sandbox, they
don't want that.

00:24:06.160 --> 00:24:08.330
IKAI LAN: So we've been kind
of neglecting the live

00:24:08.330 --> 00:24:10.350
audience who's been
patiently waiting.

00:24:10.350 --> 00:24:13.970
Why don't we jump to some live
audience members and see

00:24:13.970 --> 00:24:15.946
what's going on.

00:24:15.946 --> 00:24:19.470
Are you guys just kind of
just watching the show?

00:24:19.470 --> 00:24:21.055
ERIC KOLEDA: Rudy, John,
any live questions.

00:24:21.055 --> 00:24:22.750
IKAI LAN: Oh it that Rudy?

00:24:22.750 --> 00:24:23.590
RUDY: Yes.

00:24:23.590 --> 00:24:25.210
IKAI LAN: Hi, Rudy.

00:24:25.210 --> 00:24:27.720
Sorry I don't mean to help
you jump the line.

00:24:27.720 --> 00:24:30.420
John, you've been patiently
waiting since the beginning of

00:24:30.420 --> 00:24:31.660
the Hangout.

00:24:31.660 --> 00:24:34.940
How are you doing?

00:24:34.940 --> 00:24:38.440
It looks like he's going
to type, no microphone.

00:24:38.440 --> 00:24:40.830
That's probably where
he's going to go.

00:24:40.830 --> 00:24:43.150
Rudy, back to you.

00:24:43.150 --> 00:24:45.020
Rudy: I don't know.

00:24:45.020 --> 00:24:49.860
I'm trying to use Twitter
Bootstrap with HTML service,

00:24:49.860 --> 00:24:52.030
and I'm running into a little
bit of a problem with

00:24:52.030 --> 00:24:53.930
[? Kaha. ?]

00:24:53.930 --> 00:24:58.930
Any plans of allowing
a bit of Bootstrap?

00:24:58.930 --> 00:25:00.780
ERIC KOLEDA: Yeah, Joe actually
just did a Plus post

00:25:00.780 --> 00:25:01.710
about this today.

00:25:01.710 --> 00:25:02.370
I think it--

00:25:02.370 --> 00:25:04.660
was it you, the one
who created it?

00:25:04.660 --> 00:25:05.410
RUDY: No, I wasn't.

00:25:05.410 --> 00:25:05.715
ERIC KOLEDA: OK.

00:25:05.715 --> 00:25:07.770
So there was someone actually
already out there.

00:25:07.770 --> 00:25:08.690
I actually wasn't that familiar

00:25:08.690 --> 00:25:09.580
with a Twitter Bootstrap.

00:25:09.580 --> 00:25:11.670
But it seems like it's basically
a framework, a

00:25:11.670 --> 00:25:13.030
pre-built framework.

00:25:13.030 --> 00:25:13.610
IKAI LAN: It's very cool.

00:25:13.610 --> 00:25:16.550
And before you go on, how did
you find out about this post?

00:25:16.550 --> 00:25:19.414
ERIC KOLEDA: Via Google+ in
my RSS feed, you mean?

00:25:19.414 --> 00:25:22.520
IKAI LAN: All right, continue.

00:25:22.520 --> 00:25:22.880
ERIC KOLEDA: But, yeah.

00:25:22.880 --> 00:25:26.380
So someone had already actually
created kind of like

00:25:26.380 --> 00:25:30.120
a working example version of
it in Apps Script, but said

00:25:30.120 --> 00:25:31.220
they didn't have time
to develop it.

00:25:31.220 --> 00:25:33.260
So check my Plus feed, then you
can take a look at what

00:25:33.260 --> 00:25:34.550
they've done so far.

00:25:34.550 --> 00:25:36.750
But I would imagine there
would be challenges.

00:25:36.750 --> 00:25:39.690
When you're taking JavaScript,
and I've run into this myself,

00:25:39.690 --> 00:25:41.950
that's been developed like a
library, even a very popular

00:25:41.950 --> 00:25:43.760
library, there's usually
a lot of hands in it.

00:25:43.760 --> 00:25:47.430
And it's usually not 100%
accurate to the specification.

00:25:47.430 --> 00:25:49.540
And so in those cases,
[? Kaha ?]

00:25:49.540 --> 00:25:51.355
is going to cause
some problems.

00:25:51.355 --> 00:25:53.490
RUDY: Yeah, actually the
challenge is the CSS.

00:25:53.490 --> 00:25:55.620
IKAI LAN: Yeah, you
can't [? import ?]

00:25:55.620 --> 00:25:56.320
CSS.

00:25:56.320 --> 00:26:00.620
And there is a JavaScript
performance tip, a while ago,

00:26:00.620 --> 00:26:02.940
I know [? Kaha ?] will
definitely not allow this,

00:26:02.940 --> 00:26:05.900
where if use document dot
[? write ?] to write a script

00:26:05.900 --> 00:26:08.200
tag into your increase
your performance.

00:26:08.200 --> 00:26:09.030
I know, I know.

00:26:09.030 --> 00:26:11.670
I know we're going into really
bare metal stuff.

00:26:11.670 --> 00:26:14.560
But there are a lot of really
crazy things that people do to

00:26:14.560 --> 00:26:16.590
make their libraries
really zip along.

00:26:16.590 --> 00:26:20.010
And [? Kaha ?] is not
going to like that.

00:26:20.010 --> 00:26:21.600
The CSS, that's a
good question.

00:26:21.600 --> 00:26:26.310
We don't allow imports
of external CSS yet.

00:26:26.310 --> 00:26:28.090
And I don't know
if we will be.

00:26:28.090 --> 00:26:29.410
ERIC KOLEDA: You can definitely
bake it into your

00:26:29.410 --> 00:26:30.560
Apps Script.

00:26:30.560 --> 00:26:33.060
But even then, I know there are
some issues today that we

00:26:33.060 --> 00:26:35.450
were still investigating around
styling the body tag,

00:26:35.450 --> 00:26:38.560
for instance, that's one we've
had problems with.

00:26:38.560 --> 00:26:41.340
And I think there was someone I
talked to recently too, that

00:26:41.340 --> 00:26:47.620
there's a CSS positioning which
is not relative not

00:26:47.620 --> 00:26:51.500
fixed, fixed positioning, and
that is not allowed by

00:26:51.500 --> 00:26:51.910
[? Kaha. ?]

00:26:51.910 --> 00:26:53.960
Because I think, once again,
[? Kaha is ?] about embedding

00:26:53.960 --> 00:26:54.650
within another app.

00:26:54.650 --> 00:26:57.130
And you don't want your
ideas flying around.

00:26:57.130 --> 00:26:57.610
IKAI LAN: That makes sense.

00:26:57.610 --> 00:26:59.650
So let's say you're embedding
your application in someone

00:26:59.650 --> 00:27:00.730
else's sites page.

00:27:00.730 --> 00:27:03.710
If you use fixed position, you
could theoretically position

00:27:03.710 --> 00:27:07.890
over a Google my account, or
log out, which really just

00:27:07.890 --> 00:27:11.110
sends you to some crazy phishing
site or whatever.

00:27:11.110 --> 00:27:12.810
ERIC KOLEDA: In the context of
a web app, where you have the

00:27:12.810 --> 00:27:15.010
whole screen to yourself, some
of these don't make quite as

00:27:15.010 --> 00:27:15.750
much sense.

00:27:15.750 --> 00:27:17.310
But it is part of the
[? Kaha ?] engine.

00:27:17.310 --> 00:27:19.362
And we can talk to the team
about if there's ways to

00:27:19.362 --> 00:27:20.780
disable bits here and there.

00:27:20.780 --> 00:27:24.280
But for the most part, the
things that [? Kaha ?] does,

00:27:24.280 --> 00:27:25.450
it has a reason for.

00:27:25.450 --> 00:27:27.060
But it does create some problems
when you just want to

00:27:27.060 --> 00:27:29.180
dump a whole bunch of code
in and run with it.

00:27:29.180 --> 00:27:31.050
When you are head building it,
you can kind of handle these

00:27:31.050 --> 00:27:32.440
one at a time and take
them into account.

00:27:32.440 --> 00:27:34.805
But when you are bringing in an
extra library or framework,

00:27:34.805 --> 00:27:36.055
it can be challenging.

00:27:39.390 --> 00:27:41.440
IKAI LAN: It seems like that's
something that comes up a lot,

00:27:41.440 --> 00:27:43.210
which is the look
and feel thing.

00:27:43.210 --> 00:27:46.130
Twitter Bootstrap, I've
used it before,

00:27:46.130 --> 00:27:47.250
it's pretty neat stuff.

00:27:47.250 --> 00:27:48.800
I've used it for some
of my demos before.

00:27:48.800 --> 00:27:50.470
It's pretty cool.

00:27:50.470 --> 00:27:53.650
It's too bad, well, your sites
all look like Twitter.

00:27:53.650 --> 00:27:57.525
But it solves a lot
of problems.

00:27:57.525 --> 00:28:00.630
And in fact, that new JavaScript
library, Yeoman,

00:28:00.630 --> 00:28:04.800
y-e-o-m-a-n, it does, there's
a Twitter Bootstrap.

00:28:04.800 --> 00:28:05.650
ERIC KOLEDA: Plug-in for it?

00:28:05.650 --> 00:28:06.470
IKAI LAN: I want to
say bootstrap.

00:28:06.470 --> 00:28:09.420
There's a Twitter Bootstrap
bootstrap.

00:28:09.420 --> 00:28:10.530
It's very cool stuff.

00:28:10.530 --> 00:28:13.030
So if you are building web
apps outside Apps Script,

00:28:13.030 --> 00:28:14.150
definitely check out Yeoman.

00:28:14.150 --> 00:28:16.060
I think it's y-e-o-m-an,
I don't

00:28:16.060 --> 00:28:19.070
remember, it's yeoman.io.

00:28:19.070 --> 00:28:19.970
It's very cool.

00:28:19.970 --> 00:28:22.000
They've got this demo where
you're editing code in an

00:28:22.000 --> 00:28:24.180
editor and when you hit Save,
it updates the browser.

00:28:24.180 --> 00:28:26.030
I guess it's using browser
channel, it's

00:28:26.030 --> 00:28:29.100
using it to push updates.

00:28:29.100 --> 00:28:30.160
ERIC KOLEDA: It'd be cool to see
if maybe we could talk to

00:28:30.160 --> 00:28:31.706
them about maybe integrating
with Apps Script someday.

00:28:31.706 --> 00:28:33.660
IKAI LAN: Yeah, I'd love
to get those guys to do

00:28:33.660 --> 00:28:36.460
free work for us.

00:28:36.460 --> 00:28:38.725
So I think we're running
out of time.

00:28:38.725 --> 00:28:40.080
ERIC KOLEDA: Yeah, just
about out of time.

00:28:40.080 --> 00:28:43.310
IKAI LAN: You guys don't know
this but our producer today is

00:28:43.310 --> 00:28:44.930
Jan, and she's hiding
in the back.

00:28:44.930 --> 00:28:47.170
So she's actually just giggling
at us and just making

00:28:47.170 --> 00:28:48.000
fun of us the whole time.

00:28:48.000 --> 00:28:49.620
Trying to make us
laugh on camera.

00:28:49.620 --> 00:28:51.740
But she's doing a great
job producing, and

00:28:51.740 --> 00:28:53.460
she's warning us that--

00:28:53.460 --> 00:28:54.340
ERIC KOLEDA: Time is
just about up.

00:28:54.340 --> 00:28:56.550
So we had some great questions
and answers today.

00:28:56.550 --> 00:28:58.850
Thanks everybody who came in
for joining us, and for the

00:28:58.850 --> 00:29:00.420
moderator questions
ahead of time.

00:29:00.420 --> 00:29:02.430
If you have anything else that
you have questions about,

00:29:02.430 --> 00:29:04.810
stack overflow, the Issue
Tracker for bugs, or reach out

00:29:04.810 --> 00:29:06.360
to us on Google+.

00:29:06.360 --> 00:29:06.940
IKAI LAN: That's about it.

00:29:06.940 --> 00:29:08.050
All right, take everyone.

00:29:08.050 --> 00:29:08.820
It was good to see you.

00:29:08.820 --> 00:29:09.080
ERIC KOLEDA: Thank you.

00:29:09.080 --> 00:29:11.880
IKAI LAN: Or for
you to see us.

00:29:11.880 --> 00:29:13.130
ERIC KOLEDA: Bye bye.

