WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.300
 

00:00:00.300 --> 00:00:01.425
Alexis Moussine-Pouchkine: Hi, everyone.

00:00:01.425 --> 00:00:05.670
We're back here at Devoxx
2014, and I'm here with Felipe.

00:00:05.670 --> 00:00:06.400
Hello.

00:00:06.400 --> 00:00:07.961
FELIPE HOFFA:
Hello, [INAUDIBLE].

00:00:07.961 --> 00:00:09.960
MALE SPEAKER: We're here
to talk about big data.

00:00:09.960 --> 00:00:12.380
You're our big data
guy, and maybe more

00:00:12.380 --> 00:00:14.540
specifically,
BigQuery, and that is

00:00:14.540 --> 00:00:16.329
one of the things
you were talking

00:00:16.329 --> 00:00:18.690
about yesterday
at the conference.

00:00:18.690 --> 00:00:19.920
FELIPE HOFFA: Yes, exactly.

00:00:19.920 --> 00:00:22.740
We did a presentation
with Thomas Park

00:00:22.740 --> 00:00:23.940
from the BigQuery team.

00:00:23.940 --> 00:00:25.300
He's our software engineer.

00:00:25.300 --> 00:00:28.640
And we've presented one of
the new features of BigQuery,

00:00:28.640 --> 00:00:30.340
the user defined functions.

00:00:30.340 --> 00:00:31.840
MALE SPEAKER: Before
we get to that,

00:00:31.840 --> 00:00:34.080
I think that is absolutely
a very nice feature that

00:00:34.080 --> 00:00:36.090
is coming along really well.

00:00:36.090 --> 00:00:37.580
What is BigQuery?

00:00:37.580 --> 00:00:39.525
FELIPE HOFFA: BigQuery
is a Google product

00:00:39.525 --> 00:00:45.630
on the cloud that's useful
to analyze data really,

00:00:45.630 --> 00:00:46.350
really fast.

00:00:46.350 --> 00:00:47.370
It's zero configuration.

00:00:47.370 --> 00:00:50.220
You just need to load
your data to be queried,

00:00:50.220 --> 00:00:53.585
and then you can query it
in seconds using just SQL.

00:00:53.585 --> 00:00:54.960
MALE SPEAKER: So
interactive time

00:00:54.960 --> 00:00:58.000
is what we call it, so
don't wait for a batch

00:00:58.000 --> 00:01:00.099
to run all night
and get a result.

00:01:00.099 --> 00:01:00.890
So you can iterate.

00:01:00.890 --> 00:01:04.670
That's the addictive part of
BigQuery is you can tweak it.

00:01:04.670 --> 00:01:05.805
How do you query it?

00:01:05.805 --> 00:01:08.120
FELIPE HOFFA: It's
just using SQL,

00:01:08.120 --> 00:01:10.380
and the great
feature of BigQuery

00:01:10.380 --> 00:01:16.010
is that you don't need to care
about indexing your tables.

00:01:16.010 --> 00:01:16.960
It just runs fast.

00:01:16.960 --> 00:01:19.350
Whatever arbitrary
query you write,

00:01:19.350 --> 00:01:21.957
it will do full table
scans in seconds.

00:01:21.957 --> 00:01:22.790
MALE SPEAKER: Right.

00:01:22.790 --> 00:01:25.200
So this is big data.

00:01:25.200 --> 00:01:28.620
I don't do big data, so why
should I care about this?

00:01:28.620 --> 00:01:31.170
I don't have big enough
data sets, right?

00:01:31.170 --> 00:01:34.400
FELIPE HOFFA: If you have been
using tables and databases,

00:01:34.400 --> 00:01:38.560
if you have been
writing SQL queries,

00:01:38.560 --> 00:01:41.440
you've had
frustrations, probably.

00:01:41.440 --> 00:01:42.190
MALE SPEAKER: Yes.

00:01:42.190 --> 00:01:43.569
I think that is fair to say.

00:01:43.569 --> 00:01:44.360
FELIPE HOFFA: Yeah?

00:01:44.360 --> 00:01:49.120
So if you have ever seen a query
taking minutes or hours to run,

00:01:49.120 --> 00:01:52.096
with BigQuery, you can take
the same time to seconds.

00:01:52.096 --> 00:01:54.470
MALE SPEAKER: So you're saying
if I have long running SQL

00:01:54.470 --> 00:01:56.560
queries, I'm doing big data.

00:01:56.560 --> 00:01:57.435
I just don't know it.

00:01:57.435 --> 00:01:58.351
FELIPE HOFFA: Exactly.

00:01:58.351 --> 00:01:58.905
Exactly.

00:01:58.905 --> 00:01:59.905
MALE SPEAKER: OK, great.

00:01:59.905 --> 00:02:01.530
FELIPE HOFFA: Also,
BigQuery is awesome

00:02:01.530 --> 00:02:03.020
if you want to share data.

00:02:03.020 --> 00:02:06.400
If you have data that you want
to share with more people,

00:02:06.400 --> 00:02:08.610
BigQuery has strong
access controls

00:02:08.610 --> 00:02:12.610
that let you share the data
immediately with other people

00:02:12.610 --> 00:02:14.729
without them needing
to set it up.

00:02:14.729 --> 00:02:16.020
MALE SPEAKER: That's very good.

00:02:16.020 --> 00:02:18.350
So everybody knows SQL.

00:02:18.350 --> 00:02:21.030
Upload your data,
start querying results

00:02:21.030 --> 00:02:22.610
in a matter of a few seconds.

00:02:22.610 --> 00:02:25.880
That's great.

00:02:25.880 --> 00:02:28.900
To introduce that user defined
function feature that you

00:02:28.900 --> 00:02:31.290
mentioned to start
with, that means

00:02:31.290 --> 00:02:32.900
there is some
limitation, probably

00:02:32.900 --> 00:02:34.910
in SQL as a querying language.

00:02:34.910 --> 00:02:36.380
What are those limitations?

00:02:36.380 --> 00:02:37.980
FELIPE HOFFA: I love SQL.

00:02:37.980 --> 00:02:43.370
It allows me to write
90%, 95% of my questions.

00:02:43.370 --> 00:02:44.630
But sometimes it's not enough.

00:02:44.630 --> 00:02:47.410
Sometimes you want something
more of a procedural language

00:02:47.410 --> 00:02:51.880
to transform the
data, to analyze it,

00:02:51.880 --> 00:02:54.430
but at the same time, you
want the power of BigQuery

00:02:54.430 --> 00:02:57.180
to go over the full
table in seconds.

00:02:57.180 --> 00:03:01.390
So the question is, how do
we get a procedural language

00:03:01.390 --> 00:03:05.250
to work in the same
massive cluster

00:03:05.250 --> 00:03:08.606
that BigQuery has
to analyze data?

00:03:08.606 --> 00:03:10.800
That's why the
BigQuery team, Thomas,

00:03:10.800 --> 00:03:15.340
is adding this new
feature, the user

00:03:15.340 --> 00:03:18.140
defined functions, where
you can write in JavaScript

00:03:18.140 --> 00:03:21.110
any arbitrary function
you would like

00:03:21.110 --> 00:03:23.554
that runs inside the cluster
within your SQL query.

00:03:23.554 --> 00:03:24.970
MALE SPEAKER: So
one of the things

00:03:24.970 --> 00:03:26.650
you were able to
do with BigQuery

00:03:26.650 --> 00:03:29.270
is run regular expressions,
I mean embed regular.

00:03:29.270 --> 00:03:31.420
So now I could, instead
of a regular expression,

00:03:31.420 --> 00:03:34.260
have a full JavaScript
function that's

00:03:34.260 --> 00:03:36.660
actually computing stuff?

00:03:36.660 --> 00:03:38.150
FELIPE HOFFA: Exactly.

00:03:38.150 --> 00:03:41.880
One of the examples we ran
yesterday, we were processing

00:03:41.880 --> 00:03:43.280
logs.

00:03:43.280 --> 00:03:46.580
Sometimes logs have
URL encoded information

00:03:46.580 --> 00:03:49.610
or sometimes they have
[INAUDIBLE] information.

00:03:49.610 --> 00:03:51.599
MALE SPEAKER: Data is
never clean, right?

00:03:51.599 --> 00:03:53.140
FELIPE HOFFA: And
regular expressions

00:03:53.140 --> 00:03:57.730
are limited in what
they can do, but if you

00:03:57.730 --> 00:04:00.720
can have that JavaScript
filtering inside your SQL query

00:04:00.720 --> 00:04:04.350
that cleans up your data
however you may want to do it,

00:04:04.350 --> 00:04:05.180
it's there now.

00:04:05.180 --> 00:04:08.320
MALE SPEAKER: So how
is this implemented?

00:04:08.320 --> 00:04:11.430
Do you get a performance hit?

00:04:11.430 --> 00:04:14.140
Are you still in
interactive time?

00:04:14.140 --> 00:04:15.240
Where is this executed?

00:04:15.240 --> 00:04:17.370
Tell us a little bit about
how this is implemented.

00:04:17.370 --> 00:04:18.911
FELIPE HOFFA: So
one of the questions

00:04:18.911 --> 00:04:20.720
that people ask us
is, why JavaScript?

00:04:20.720 --> 00:04:22.679
Why did we choose that language?

00:04:22.679 --> 00:04:24.720
MALE SPEAKER: Yeah, that's
also a valid question.

00:04:24.720 --> 00:04:26.511
FELIPE HOFFA: Well, it
turns out at Google,

00:04:26.511 --> 00:04:29.507
we also developed a very
fast JavaScript environment.

00:04:29.507 --> 00:04:31.840
MALE SPEAKER: I think I've
heard of something called V8.

00:04:31.840 --> 00:04:33.250
FELIPE HOFFA: V8, exactly.

00:04:33.250 --> 00:04:36.250
So we took the
exact V8 from Chrome

00:04:36.250 --> 00:04:38.780
and we put it inside
the BigQuery cluster,

00:04:38.780 --> 00:04:43.570
so its node is running V8
and your JavaScript functions

00:04:43.570 --> 00:04:45.360
run inside its node.

00:04:45.360 --> 00:04:48.017
 

00:04:48.017 --> 00:04:49.600
MALE SPEAKER: And
probably, it's worth

00:04:49.600 --> 00:04:53.430
mentioning here that the
reason BigQuery is maybe

00:04:53.430 --> 00:04:54.805
more than a product
but a service

00:04:54.805 --> 00:04:58.310
is that Google does
all the heavy lifting.

00:04:58.310 --> 00:05:00.220
We run the cluster,
we set everything up.

00:05:00.220 --> 00:05:01.386
Obviously, it's distributed.

00:05:01.386 --> 00:05:04.040
This is the only
way you can get.

00:05:04.040 --> 00:05:06.300
Give us maybe an idea
of the amounts of data

00:05:06.300 --> 00:05:08.790
that can be processed in
a matter of a few seconds,

00:05:08.790 --> 00:05:11.102
the data you used
yesterday, for example.

00:05:11.102 --> 00:05:12.810
FELIPE HOFFA: One of
my favorite examples

00:05:12.810 --> 00:05:14.600
are the Wikipedia logs.

00:05:14.600 --> 00:05:18.720
They have billions
of rows each month,

00:05:18.720 --> 00:05:24.510
but I am able to query it during
the presentation several times

00:05:24.510 --> 00:05:27.640
in seconds, and just keep
changing the queries to try

00:05:27.640 --> 00:05:29.579
different stuff and
learn different.

00:05:29.579 --> 00:05:31.870
MALE SPEAKER: And so when
you do add those user defined

00:05:31.870 --> 00:05:36.330
functions, is the performance
getting a whole lot worse?

00:05:36.330 --> 00:05:38.494
Are we back to--

00:05:38.494 --> 00:05:40.660
FELIPE HOFFA: There is a
performance hit, of course.

00:05:40.660 --> 00:05:42.368
There is communication
between processes,

00:05:42.368 --> 00:05:47.090
but only inside one node
instead of going outside,

00:05:47.090 --> 00:05:49.750
so it's much faster,
but we could still

00:05:49.750 --> 00:05:51.574
run all our queries--

00:05:51.574 --> 00:05:53.240
MALE SPEAKER: In
interactive time still.

00:05:53.240 --> 00:05:54.430
FELIPE HOFFA:
Interactive time, yeah.

00:05:54.430 --> 00:05:56.060
MALE SPEAKER: That's
very exciting.

00:05:56.060 --> 00:05:58.730
When can we get
our hands on this?

00:05:58.730 --> 00:06:02.267
Is this coming?

00:06:02.267 --> 00:06:03.350
It's not just a prototype.

00:06:03.350 --> 00:06:05.530
It's actually--

00:06:05.530 --> 00:06:08.584
FELIPE HOFFA: Right now, it's
not available publicly yet,

00:06:08.584 --> 00:06:11.535
but several people
are testing it.

00:06:11.535 --> 00:06:14.240
If you have any
use case that would

00:06:14.240 --> 00:06:17.615
be very nice to test
with us, just call us

00:06:17.615 --> 00:06:20.630
and we will enable the user
defined function for you.

00:06:20.630 --> 00:06:22.300
MALE SPEAKER: Your
name is Felipe Hoffa,

00:06:22.300 --> 00:06:24.970
and this is the guy
you want to ping

00:06:24.970 --> 00:06:27.280
if you want to have
early access to this.

00:06:27.280 --> 00:06:31.150
Certainly keep an eye on
this new feature in the cloud

00:06:31.150 --> 00:06:34.020
platform from Google
specifically in BigQuery,

00:06:34.020 --> 00:06:35.260
user defined functions.

00:06:35.260 --> 00:06:36.240
Thanks for your time,

00:06:36.240 --> 00:06:37.540
[INTERPOSING VOICES]

00:06:37.540 --> 00:06:39.165
MALE SPEAKER: And
we'll see you online.

00:06:39.165 --> 00:06:39.920
Cheers.

00:06:39.920 --> 00:06:57.308
 

