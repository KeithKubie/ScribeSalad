WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.929 align:start position:0%
 
welcome<00:00:00.989><c> back</c><00:00:01.140><c> vectorization</c><00:00:01.890><c> is</c><00:00:02.520><c> basically</c>

00:00:02.929 --> 00:00:02.939 align:start position:0%
welcome back vectorization is basically
 

00:00:02.939 --> 00:00:05.900 align:start position:0%
welcome back vectorization is basically
the<00:00:03.389><c> odds</c><00:00:03.629><c> of</c><00:00:03.929><c> getting</c><00:00:04.410><c> rid</c><00:00:04.799><c> of</c><00:00:04.830><c> explicit</c><00:00:05.640><c> for</c>

00:00:05.900 --> 00:00:05.910 align:start position:0%
the odds of getting rid of explicit for
 

00:00:05.910 --> 00:00:08.509 align:start position:0%
the odds of getting rid of explicit for
loops<00:00:06.180><c> in</c><00:00:06.420><c> your</c><00:00:06.629><c> code</c><00:00:06.899><c> in</c><00:00:07.740><c> the</c><00:00:08.099><c> deep</c><00:00:08.340><c> learning</c>

00:00:08.509 --> 00:00:08.519 align:start position:0%
loops in your code in the deep learning
 

00:00:08.519 --> 00:00:10.970 align:start position:0%
loops in your code in the deep learning
error<00:00:08.910><c> surfing</c><00:00:09.750><c> in</c><00:00:09.960><c> deep</c><00:00:10.290><c> learning</c><00:00:10.530><c> in</c>

00:00:10.970 --> 00:00:10.980 align:start position:0%
error surfing in deep learning in
 

00:00:10.980 --> 00:00:12.650 align:start position:0%
error surfing in deep learning in
practice<00:00:11.550><c> you</c><00:00:12.059><c> often</c><00:00:12.360><c> find</c><00:00:12.509><c> yourself</c>

00:00:12.650 --> 00:00:12.660 align:start position:0%
practice you often find yourself
 

00:00:12.660 --> 00:00:14.749 align:start position:0%
practice you often find yourself
training<00:00:13.380><c> on</c><00:00:13.559><c> gods</c><00:00:13.830><c> of</c><00:00:14.070><c> these</c><00:00:14.190><c> large</c><00:00:14.429><c> data</c>

00:00:14.749 --> 00:00:14.759 align:start position:0%
training on gods of these large data
 

00:00:14.759 --> 00:00:16.580 align:start position:0%
training on gods of these large data
sets<00:00:15.089><c> because</c><00:00:15.299><c> that's</c><00:00:15.660><c> when</c><00:00:15.870><c> deep</c><00:00:16.379><c> learning</c>

00:00:16.580 --> 00:00:16.590 align:start position:0%
sets because that's when deep learning
 

00:00:16.590 --> 00:00:19.580 align:start position:0%
sets because that's when deep learning
algorithms<00:00:17.220><c> tend</c><00:00:17.580><c> to</c><00:00:17.670><c> shine</c><00:00:17.880><c> and</c><00:00:18.180><c> so</c><00:00:18.990><c> it's</c>

00:00:19.580 --> 00:00:19.590 align:start position:0%
algorithms tend to shine and so it's
 

00:00:19.590 --> 00:00:21.349 align:start position:0%
algorithms tend to shine and so it's
important<00:00:20.130><c> that</c><00:00:20.340><c> your</c><00:00:20.460><c> code</c><00:00:20.730><c> run</c><00:00:21.000><c> quickly</c>

00:00:21.349 --> 00:00:21.359 align:start position:0%
important that your code run quickly
 

00:00:21.359 --> 00:00:23.540 align:start position:0%
important that your code run quickly
because<00:00:21.840><c> otherwise</c><00:00:21.990><c> if</c><00:00:22.980><c> you're</c><00:00:23.189><c> training</c><00:00:23.369><c> on</c>

00:00:23.540 --> 00:00:23.550 align:start position:0%
because otherwise if you're training on
 

00:00:23.550 --> 00:00:25.700 align:start position:0%
because otherwise if you're training on
a<00:00:23.580><c> big</c><00:00:23.760><c> data</c><00:00:23.970><c> set</c><00:00:24.060><c> your</c><00:00:24.810><c> code</c><00:00:25.109><c> may</c><00:00:25.260><c> take</c><00:00:25.439><c> a</c><00:00:25.470><c> long</c>

00:00:25.700 --> 00:00:25.710 align:start position:0%
a big data set your code may take a long
 

00:00:25.710 --> 00:00:27.080 align:start position:0%
a big data set your code may take a long
time<00:00:25.740><c> to</c><00:00:26.160><c> run</c><00:00:26.369><c> you</c><00:00:26.609><c> just</c><00:00:26.760><c> find</c><00:00:26.970><c> yourself</c>

00:00:27.080 --> 00:00:27.090 align:start position:0%
time to run you just find yourself
 

00:00:27.090 --> 00:00:29.720 align:start position:0%
time to run you just find yourself
waiting<00:00:27.720><c> a</c><00:00:27.779><c> very</c><00:00:27.810><c> long</c><00:00:28.140><c> time</c><00:00:28.560><c> to</c><00:00:29.099><c> get</c><00:00:29.250><c> a</c><00:00:29.310><c> result</c>

00:00:29.720 --> 00:00:29.730 align:start position:0%
waiting a very long time to get a result
 

00:00:29.730 --> 00:00:32.420 align:start position:0%
waiting a very long time to get a result
so<00:00:30.420><c> in</c><00:00:30.779><c> the</c><00:00:30.990><c> deep</c><00:00:31.260><c> learning</c><00:00:31.410><c> error</c><00:00:31.800><c> I</c><00:00:32.099><c> think</c>

00:00:32.420 --> 00:00:32.430 align:start position:0%
so in the deep learning error I think
 

00:00:32.430 --> 00:00:35.840 align:start position:0%
so in the deep learning error I think
the<00:00:32.910><c> ability</c><00:00:33.120><c> to</c><00:00:33.750><c> perform</c><00:00:34.469><c> vectorization</c><00:00:35.100><c> has</c>

00:00:35.840 --> 00:00:35.850 align:start position:0%
the ability to perform vectorization has
 

00:00:35.850 --> 00:00:38.180 align:start position:0%
the ability to perform vectorization has
become<00:00:36.239><c> a</c><00:00:36.270><c> key</c><00:00:36.570><c> skill</c><00:00:36.680><c> let's</c><00:00:37.680><c> start</c><00:00:37.920><c> with</c><00:00:38.100><c> an</c>

00:00:38.180 --> 00:00:38.190 align:start position:0%
become a key skill let's start with an
 

00:00:38.190 --> 00:00:42.369 align:start position:0%
become a key skill let's start with an
example<00:00:38.250><c> so</c><00:00:39.559><c> what</c><00:00:40.559><c> is</c><00:00:40.710><c> vectorization</c><00:00:41.219><c> in</c>

00:00:42.369 --> 00:00:42.379 align:start position:0%
example so what is vectorization in
 

00:00:42.379 --> 00:00:45.020 align:start position:0%
example so what is vectorization in
logistic<00:00:43.379><c> regression</c><00:00:43.890><c> you</c><00:00:44.190><c> need</c><00:00:44.340><c> to</c><00:00:44.489><c> compute</c>

00:00:45.020 --> 00:00:45.030 align:start position:0%
logistic regression you need to compute
 

00:00:45.030 --> 00:00:49.580 align:start position:0%
logistic regression you need to compute
Z<00:00:45.510><c> equals</c><00:00:45.989><c> W</c><00:00:46.440><c> transpose</c><00:00:46.980><c> X</c><00:00:47.219><c> plus</c><00:00:47.550><c> B</c><00:00:48.090><c> where</c><00:00:49.079><c> W</c>

00:00:49.580 --> 00:00:49.590 align:start position:0%
Z equals W transpose X plus B where W
 

00:00:49.590 --> 00:00:53.330 align:start position:0%
Z equals W transpose X plus B where W
was<00:00:49.890><c> this</c><00:00:50.100><c> you</c><00:00:50.640><c> know</c><00:00:50.780><c> column</c><00:00:51.780><c> vector</c><00:00:52.170><c> and</c><00:00:52.469><c> X</c><00:00:53.129><c> is</c>

00:00:53.330 --> 00:00:53.340 align:start position:0%
was this you know column vector and X is
 

00:00:53.340 --> 00:00:56.209 align:start position:0%
was this you know column vector and X is
also<00:00:53.460><c> this</c><00:00:54.140><c> vector</c><00:00:55.140><c> maybe</c><00:00:55.710><c> they're</c><00:00:55.949><c> very</c>

00:00:56.209 --> 00:00:56.219 align:start position:0%
also this vector maybe they're very
 

00:00:56.219 --> 00:00:57.560 align:start position:0%
also this vector maybe they're very
large<00:00:56.460><c> vectors</c><00:00:56.940><c> if</c><00:00:57.090><c> you</c><00:00:57.120><c> have</c><00:00:57.239><c> a</c><00:00:57.300><c> lot</c><00:00:57.420><c> of</c>

00:00:57.560 --> 00:00:57.570 align:start position:0%
large vectors if you have a lot of
 

00:00:57.570 --> 00:01:01.430 align:start position:0%
large vectors if you have a lot of
features<00:00:57.719><c> so</c><00:00:58.260><c> W</c><00:00:59.160><c> and</c><00:00:59.309><c> X</c><00:00:59.489><c> will</c><00:00:59.820><c> go</c><00:01:00.000><c> from</c><00:01:00.440><c> these</c>

00:01:01.430 --> 00:01:01.440 align:start position:0%
features so W and X will go from these
 

00:01:01.440 --> 00:01:07.550 align:start position:0%
features so W and X will go from these
are<00:01:01.800><c> n</c><00:01:02.129><c> or</c><00:01:02.699><c> R</c><00:01:02.879><c> and</c><00:01:03.149><c> X</c><00:01:05.210><c> dimensional</c><00:01:06.210><c> vectors</c><00:01:06.600><c> so</c>

00:01:07.550 --> 00:01:07.560 align:start position:0%
are n or R and X dimensional vectors so
 

00:01:07.560 --> 00:01:11.530 align:start position:0%
are n or R and X dimensional vectors so
to<00:01:07.619><c> compute</c><00:01:08.130><c> W</c><00:01:08.820><c> transpose</c><00:01:09.390><c> X</c><00:01:09.630><c> if</c><00:01:10.229><c> you</c><00:01:10.650><c> had</c><00:01:10.979><c> a</c>

00:01:11.530 --> 00:01:11.540 align:start position:0%
to compute W transpose X if you had a
 

00:01:11.540 --> 00:01:16.160 align:start position:0%
to compute W transpose X if you had a
non<00:01:12.540><c> vectorized</c><00:01:14.240><c> implementation</c><00:01:15.240><c> you</c><00:01:15.990><c> would</c>

00:01:16.160 --> 00:01:16.170 align:start position:0%
non vectorized implementation you would
 

00:01:16.170 --> 00:01:19.130 align:start position:0%
non vectorized implementation you would
do<00:01:16.350><c> something</c><00:01:16.740><c> like</c><00:01:16.770><c> z</c><00:01:17.250><c> equals</c><00:01:17.790><c> 0</c><00:01:18.210><c> and</c><00:01:18.479><c> then</c>

00:01:19.130 --> 00:01:19.140 align:start position:0%
do something like z equals 0 and then
 

00:01:19.140 --> 00:01:25.700 align:start position:0%
do something like z equals 0 and then
for<00:01:19.560><c> I</c><00:01:20.600><c> in</c><00:01:21.600><c> range</c><00:01:22.130><c> of</c><00:01:23.150><c> and</c><00:01:24.150><c> X</c><00:01:24.659><c> so</c><00:01:25.049><c> for</c><00:01:25.259><c> I</c><00:01:25.290><c> equals</c>

00:01:25.700 --> 00:01:25.710 align:start position:0%
for I in range of and X so for I equals
 

00:01:25.710 --> 00:01:32.120 align:start position:0%
for I in range of and X so for I equals
1<00:01:25.979><c> to</c><00:01:26.280><c> n</c><00:01:26.520><c> X</c><00:01:26.820><c> Z</c><00:01:27.750><c> plus</c><00:01:28.140><c> equals</c><00:01:29.630><c> W</c><00:01:30.630><c> I</c><00:01:31.009><c> you</c><00:01:32.009><c> know</c>

00:01:32.120 --> 00:01:32.130 align:start position:0%
1 to n X Z plus equals W I you know
 

00:01:32.130 --> 00:01:35.929 align:start position:0%
1 to n X Z plus equals W I you know
times<00:01:32.579><c> X</c><00:01:32.970><c> I</c><00:01:33.439><c> and</c><00:01:34.439><c> then</c><00:01:34.829><c> maybe</c><00:01:35.009><c> you</c><00:01:35.159><c> do</c><00:01:35.369><c> Z</c><00:01:35.640><c> plus</c>

00:01:35.929 --> 00:01:35.939 align:start position:0%
times X I and then maybe you do Z plus
 

00:01:35.939 --> 00:01:37.670 align:start position:0%
times X I and then maybe you do Z plus
equals<00:01:36.360><c> B</c><00:01:36.540><c> at</c><00:01:36.689><c> the</c><00:01:36.810><c> N</c><00:01:36.960><c> so</c><00:01:37.229><c> that's</c><00:01:37.409><c> a</c><00:01:37.500><c> non</c>

00:01:37.670 --> 00:01:37.680 align:start position:0%
equals B at the N so that's a non
 

00:01:37.680 --> 00:01:40.310 align:start position:0%
equals B at the N so that's a non
vectorized<00:01:38.689><c> implementation</c><00:01:39.689><c> and</c><00:01:39.960><c> you</c><00:01:40.049><c> find</c>

00:01:40.310 --> 00:01:40.320 align:start position:0%
vectorized implementation and you find
 

00:01:40.320 --> 00:01:43.100 align:start position:0%
vectorized implementation and you find
that<00:01:40.470><c> that's</c><00:01:40.680><c> going</c><00:01:40.860><c> to</c><00:01:40.950><c> be</c><00:01:41.070><c> really</c><00:01:41.939><c> slow</c><00:01:42.299><c> in</c>

00:01:43.100 --> 00:01:43.110 align:start position:0%
that that's going to be really slow in
 

00:01:43.110 --> 00:01:45.560 align:start position:0%
that that's going to be really slow in
contrasted<00:01:44.009><c> vectorized</c><00:01:44.490><c> implementation</c><00:01:45.270><c> we</c>

00:01:45.560 --> 00:01:45.570 align:start position:0%
contrasted vectorized implementation we
 

00:01:45.570 --> 00:01:49.810 align:start position:0%
contrasted vectorized implementation we
just<00:01:46.170><c> compute</c><00:01:46.619><c> W</c><00:01:46.979><c> transpose</c><00:01:47.549><c> X</c><00:01:47.759><c> directly</c><00:01:48.439><c> in</c>

00:01:49.810 --> 00:01:49.820 align:start position:0%
just compute W transpose X directly in
 

00:01:49.820 --> 00:01:53.030 align:start position:0%
just compute W transpose X directly in
Python<00:01:50.820><c> or</c><00:01:50.970><c> a</c><00:01:51.030><c> numpy</c><00:01:51.479><c> the</c><00:01:52.200><c> command</c><00:01:52.649><c> is</c><00:01:52.829><c> used</c>

00:01:53.030 --> 00:01:53.040 align:start position:0%
Python or a numpy the command is used
 

00:01:53.040 --> 00:02:02.480 align:start position:0%
Python or a numpy the command is used
for<00:01:53.189><c> that</c><00:01:53.460><c> is</c><00:01:53.850><c> Z</c><00:01:54.360><c> equals</c><00:01:55.049><c> NP</c><00:01:57.140><c> m</c><00:01:58.790><c> dot</c><00:02:00.020><c> W</c><00:02:01.189><c> comma</c><00:02:02.189><c> X</c>

00:02:02.480 --> 00:02:02.490 align:start position:0%
for that is Z equals NP m dot W comma X
 

00:02:02.490 --> 00:02:04.960 align:start position:0%
for that is Z equals NP m dot W comma X
so<00:02:02.969><c> this</c><00:02:03.240><c> computes</c><00:02:03.750><c> W</c>

00:02:04.960 --> 00:02:04.970 align:start position:0%
so this computes W
 

00:02:04.970 --> 00:02:08.170 align:start position:0%
so this computes W
stalls<00:02:05.180><c> X</c><00:02:05.860><c> and</c><00:02:06.860><c> you</c><00:02:06.950><c> can</c><00:02:07.070><c> also</c><00:02:07.220><c> just</c><00:02:07.610><c> add</c><00:02:07.790><c> B</c><00:02:08.000><c> to</c>

00:02:08.170 --> 00:02:08.180 align:start position:0%
stalls X and you can also just add B to
 

00:02:08.180 --> 00:02:10.300 align:start position:0%
stalls X and you can also just add B to
that<00:02:08.300><c> directly</c><00:02:08.720><c> and</c><00:02:09.320><c> you</c><00:02:09.440><c> find</c><00:02:09.710><c> that</c><00:02:09.890><c> this</c><00:02:10.040><c> is</c>

00:02:10.300 --> 00:02:10.310 align:start position:0%
that directly and you find that this is
 

00:02:10.310 --> 00:02:14.170 align:start position:0%
that directly and you find that this is
much<00:02:10.940><c> faster</c><00:02:12.220><c> that's</c><00:02:13.220><c> actually</c><00:02:13.610><c> illustrate</c>

00:02:14.170 --> 00:02:14.180 align:start position:0%
much faster that's actually illustrate
 

00:02:14.180 --> 00:02:17.350 align:start position:0%
much faster that's actually illustrate
this<00:02:14.390><c> with</c><00:02:15.200><c> a</c><00:02:15.260><c> little</c><00:02:15.650><c> demo</c><00:02:15.890><c> alright</c><00:02:16.880><c> so</c>

00:02:17.350 --> 00:02:17.360 align:start position:0%
this with a little demo alright so
 

00:02:17.360 --> 00:02:20.200 align:start position:0%
this with a little demo alright so
here's<00:02:17.720><c> my</c><00:02:17.930><c> Jupiter</c><00:02:18.800><c> notebook</c><00:02:19.460><c> in</c><00:02:19.790><c> which</c><00:02:19.820><c> I'm</c>

00:02:20.200 --> 00:02:20.210 align:start position:0%
here's my Jupiter notebook in which I'm
 

00:02:20.210 --> 00:02:22.360 align:start position:0%
here's my Jupiter notebook in which I'm
going<00:02:20.420><c> to</c><00:02:20.510><c> write</c><00:02:20.750><c> some</c><00:02:21.080><c> Python</c><00:02:21.350><c> code</c><00:02:21.620><c> so</c><00:02:22.130><c> first</c>

00:02:22.360 --> 00:02:22.370 align:start position:0%
going to write some Python code so first
 

00:02:22.370 --> 00:02:26.620 align:start position:0%
going to write some Python code so first
let<00:02:22.610><c> me</c><00:02:22.640><c> import</c><00:02:23.800><c> the</c><00:02:24.800><c> numpy</c><00:02:25.610><c> library</c><00:02:26.210><c> so</c>

00:02:26.620 --> 00:02:26.630 align:start position:0%
let me import the numpy library so
 

00:02:26.630 --> 00:02:30.280 align:start position:0%
let me import the numpy library so
import<00:02:27.190><c> 17</c><00:02:28.190><c> and</c><00:02:28.490><c> so</c><00:02:28.700><c> for</c><00:02:29.540><c> example</c><00:02:29.630><c> I</c><00:02:30.050><c> can</c>

00:02:30.280 --> 00:02:30.290 align:start position:0%
import 17 and so for example I can
 

00:02:30.290 --> 00:02:36.900 align:start position:0%
import 17 and so for example I can
create<00:02:30.620><c> a</c><00:02:30.950><c> as</c><00:02:31.220><c> in</c><00:02:31.970><c> array</c><00:02:32.680><c> as</c><00:02:33.680><c> follows</c><00:02:35.230><c> or</c><00:02:36.230><c> on</c>

00:02:36.900 --> 00:02:36.910 align:start position:0%
create a as in array as follows or on
 

00:02:36.910 --> 00:02:40.150 align:start position:0%
create a as in array as follows or on
let's<00:02:37.910><c> say</c><00:02:38.090><c> print</c><00:02:38.450><c> a</c><00:02:38.690><c> now</c><00:02:39.650><c> having</c><00:02:40.010><c> written</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
let's say print a now having written
 

00:02:40.160 --> 00:02:42.540 align:start position:0%
let's say print a now having written
this<00:02:40.400><c> chunk</c><00:02:40.670><c> of</c><00:02:40.760><c> code</c><00:02:40.820><c> if</c><00:02:41.240><c> I</c><00:02:41.360><c> hit</c><00:02:41.600><c> shift</c><00:02:42.110><c> enter</c>

00:02:42.540 --> 00:02:42.550 align:start position:0%
this chunk of code if I hit shift enter
 

00:02:42.550 --> 00:02:45.460 align:start position:0%
this chunk of code if I hit shift enter
then<00:02:43.550><c> it</c><00:02:43.820><c> executes</c><00:02:44.150><c> the</c><00:02:44.450><c> code</c><00:02:44.630><c> so</c><00:02:44.959><c> it</c><00:02:45.050><c> created</c>

00:02:45.460 --> 00:02:45.470 align:start position:0%
then it executes the code so it created
 

00:02:45.470 --> 00:02:48.070 align:start position:0%
then it executes the code so it created
the<00:02:45.620><c> array</c><00:02:45.890><c> a</c><00:02:45.920><c> and</c><00:02:46.100><c> it</c><00:02:46.430><c> prints</c><00:02:46.760><c> it</c><00:02:46.790><c> out</c><00:02:47.180><c> now</c>

00:02:48.070 --> 00:02:48.080 align:start position:0%
the array a and it prints it out now
 

00:02:48.080 --> 00:02:50.830 align:start position:0%
the array a and it prints it out now
unless<00:02:48.770><c> do</c><00:02:49.370><c> the</c><00:02:49.490><c> vectorization</c><00:02:50.000><c> demo</c><00:02:50.510><c> then</c>

00:02:50.830 --> 00:02:50.840 align:start position:0%
unless do the vectorization demo then
 

00:02:50.840 --> 00:02:52.720 align:start position:0%
unless do the vectorization demo then
import<00:02:51.260><c> the</c><00:02:51.350><c> time</c><00:02:51.620><c> libraries</c><00:02:52.130><c> I'm</c><00:02:52.400><c> going</c><00:02:52.670><c> to</c>

00:02:52.720 --> 00:02:52.730 align:start position:0%
import the time libraries I'm going to
 

00:02:52.730 --> 00:02:55.090 align:start position:0%
import the time libraries I'm going to
use<00:02:52.850><c> that</c><00:02:53.060><c> in</c><00:02:53.930><c> order</c><00:02:54.110><c> to</c><00:02:54.500><c> time</c><00:02:54.830><c> how</c><00:02:55.070><c> long</c>

00:02:55.090 --> 00:02:55.100 align:start position:0%
use that in order to time how long
 

00:02:55.100 --> 00:02:57.130 align:start position:0%
use that in order to time how long
different<00:02:55.430><c> operations</c><00:02:56.030><c> take</c><00:02:56.240><c> I'm</c><00:02:56.870><c> going</c><00:02:57.050><c> to</c>

00:02:57.130 --> 00:02:57.140 align:start position:0%
different operations take I'm going to
 

00:02:57.140 --> 00:03:01.750 align:start position:0%
different operations take I'm going to
create<00:02:57.410><c> an</c><00:02:57.800><c> array</c><00:02:58.370><c> a</c><00:02:59.260><c> this</c><00:03:00.260><c> was</c><00:03:00.410><c> random</c><00:03:00.650><c> not</c><00:03:01.459><c> R</c>

00:03:01.750 --> 00:03:01.760 align:start position:0%
create an array a this was random not R
 

00:03:01.760 --> 00:03:06.699 align:start position:0%
create an array a this was random not R
and<00:03:02.390><c> this</c><00:03:03.290><c> create</c><00:03:03.830><c> a</c><00:03:05.260><c> million</c><00:03:06.260><c> dimensional</c>

00:03:06.699 --> 00:03:06.709 align:start position:0%
and this create a million dimensional
 

00:03:06.709 --> 00:03:09.880 align:start position:0%
and this create a million dimensional
array<00:03:07.420><c> it</c><00:03:08.420><c> was</c><00:03:08.630><c> random</c><00:03:08.989><c> there</c><00:03:09.200><c> the</c><00:03:09.410><c> values</c>

00:03:09.880 --> 00:03:09.890 align:start position:0%
array it was random there the values
 

00:03:09.890 --> 00:03:13.110 align:start position:0%
array it was random there the values
vehicles<00:03:10.519><c> and</c><00:03:10.790><c> pins</c><00:03:11.030><c> are</c><00:03:11.180><c> random</c><00:03:11.690><c> dot</c><00:03:11.930><c> R</c><00:03:11.959><c> and</c>

00:03:13.110 --> 00:03:13.120 align:start position:0%
vehicles and pins are random dot R and
 

00:03:13.120 --> 00:03:15.759 align:start position:0%
vehicles and pins are random dot R and
another<00:03:14.120><c> million</c><00:03:14.780><c> dimensional</c><00:03:15.350><c> array</c><00:03:15.500><c> and</c>

00:03:15.759 --> 00:03:15.769 align:start position:0%
another million dimensional array and
 

00:03:15.769 --> 00:03:19.300 align:start position:0%
another million dimensional array and
now<00:03:16.400><c> ticking</c><00:03:17.330><c> equals</c><00:03:17.870><c> x</c><00:03:18.200><c> or</c><00:03:18.410><c> x</c><00:03:18.470><c> so</c><00:03:19.100><c> let's</c>

00:03:19.300 --> 00:03:19.310 align:start position:0%
now ticking equals x or x so let's
 

00:03:19.310 --> 00:03:23.820 align:start position:0%
now ticking equals x or x so let's
measure<00:03:19.459><c> the</c><00:03:19.640><c> current</c><00:03:19.880><c> time</c><00:03:20.200><c> c</c><00:03:21.200><c> equals</c><00:03:21.739><c> NP</c><00:03:22.450><c> dot</c>

00:03:23.820 --> 00:03:23.830 align:start position:0%
measure the current time c equals NP dot
 

00:03:23.830 --> 00:03:29.340 align:start position:0%
measure the current time c equals NP dot
ad<00:03:24.880><c> let's</c><00:03:25.880><c> see</c><00:03:26.090><c> talk</c><00:03:26.480><c> equals</c><00:03:26.930><c> x</c><00:03:27.260><c> our</c><00:03:27.440><c> time</c><00:03:27.709><c> and</c>

00:03:29.340 --> 00:03:29.350 align:start position:0%
ad let's see talk equals x our time and
 

00:03:29.350 --> 00:03:33.820 align:start position:0%
ad let's see talk equals x our time and
let's<00:03:30.350><c> print</c><00:03:32.080><c> this</c><00:03:33.080><c> is</c><00:03:33.200><c> the</c><00:03:33.290><c> vectorized</c>

00:03:33.820 --> 00:03:33.830 align:start position:0%
let's print this is the vectorized
 

00:03:33.830 --> 00:03:37.620 align:start position:0%
let's print this is the vectorized
version<00:03:34.310><c> right</c><00:03:35.090><c> so</c><00:03:35.330><c> vectorize</c><00:03:35.900><c> version</c><00:03:36.799><c> and</c>

00:03:37.620 --> 00:03:37.630 align:start position:0%
version right so vectorize version and
 

00:03:37.630 --> 00:03:44.170 align:start position:0%
version right so vectorize version and
so<00:03:38.630><c> let's</c><00:03:39.200><c> print</c><00:03:39.530><c> out</c><00:03:39.950><c> armed</c><00:03:42.160><c> let's</c><00:03:43.160><c> see</c><00:03:43.430><c> the</c>

00:03:44.170 --> 00:03:44.180 align:start position:0%
so let's print out armed let's see the
 

00:03:44.180 --> 00:03:48.490 align:start position:0%
so let's print out armed let's see the
last<00:03:44.420><c> time</c><00:03:44.840><c> so</c><00:03:45.200><c> let's</c><00:03:45.410><c> talk</c><00:03:45.680><c> -</c><00:03:45.980><c> tick</c><00:03:46.400><c> x</c><00:03:47.239><c> 1000</c><00:03:48.230><c> so</c>

00:03:48.490 --> 00:03:48.500 align:start position:0%
last time so let's talk - tick x 1000 so
 

00:03:48.500 --> 00:03:52.000 align:start position:0%
last time so let's talk - tick x 1000 so
that<00:03:48.530><c> we</c><00:03:49.519><c> can</c><00:03:49.700><c> express</c><00:03:50.150><c> this</c><00:03:50.420><c> in</c><00:03:51.010><c> milliseconds</c>

00:03:52.000 --> 00:03:52.010 align:start position:0%
that we can express this in milliseconds
 

00:03:52.010 --> 00:03:54.580 align:start position:0%
that we can express this in milliseconds
so<00:03:52.340><c> unless</c><00:03:52.940><c> there's</c><00:03:53.239><c> more</c><00:03:53.390><c> seconds</c><00:03:53.989><c> okay</c><00:03:54.290><c> so</c>

00:03:54.580 --> 00:03:54.590 align:start position:0%
so unless there's more seconds okay so
 

00:03:54.590 --> 00:03:56.890 align:start position:0%
so unless there's more seconds okay so
I'm<00:03:54.650><c> going</c><00:03:54.769><c> to</c><00:03:54.830><c> hit</c><00:03:54.980><c> shift</c><00:03:55.430><c> enter</c><00:03:55.810><c> okay</c><00:03:56.810><c> so</c>

00:03:56.890 --> 00:03:56.900 align:start position:0%
I'm going to hit shift enter okay so
 

00:03:56.900 --> 00:04:00.729 align:start position:0%
I'm going to hit shift enter okay so
that<00:03:57.260><c> code</c><00:03:57.590><c> took</c><00:03:57.890><c> about</c><00:03:58.989><c> 3</c><00:03:59.989><c> milliseconds</c><00:04:00.560><c> or</c>

00:04:00.729 --> 00:04:00.739 align:start position:0%
that code took about 3 milliseconds or
 

00:04:00.739 --> 00:04:03.460 align:start position:0%
that code took about 3 milliseconds or
this<00:04:00.860><c> time</c><00:04:01.040><c> 1.5</c><00:04:01.670><c> okay</c><00:04:02.390><c> it</c><00:04:02.510><c> may</c><00:04:02.600><c> be</c><00:04:02.660><c> about</c><00:04:02.870><c> 1.5</c>

00:04:03.460 --> 00:04:03.470 align:start position:0%
this time 1.5 okay it may be about 1.5
 

00:04:03.470 --> 00:04:05.740 align:start position:0%
this time 1.5 okay it may be about 1.5
or<00:04:03.799><c> 3.5</c><00:04:04.400><c> over</c><00:04:04.700><c> seconds</c><00:04:05.030><c> at</c><00:04:05.150><c> time</c>

00:04:05.740 --> 00:04:05.750 align:start position:0%
or 3.5 over seconds at time
 

00:04:05.750 --> 00:04:07.810 align:start position:0%
or 3.5 over seconds at time
so<00:04:06.350><c> you</c><00:04:06.410><c> know</c><00:04:06.620><c> it</c><00:04:06.860><c> varies</c><00:04:07.190><c> a</c><00:04:07.220><c> little</c><00:04:07.430><c> bit</c><00:04:07.670><c> as</c><00:04:07.790><c> I</c>

00:04:07.810 --> 00:04:07.820 align:start position:0%
so you know it varies a little bit as I
 

00:04:07.820 --> 00:04:09.460 align:start position:0%
so you know it varies a little bit as I
run<00:04:08.120><c> it</c><00:04:08.270><c> looks</c><00:04:08.750><c> like</c><00:04:08.930><c> maybe</c><00:04:09.200><c> on</c><00:04:09.320><c> average</c>

00:04:09.460 --> 00:04:09.470 align:start position:0%
run it looks like maybe on average
 

00:04:09.470 --> 00:04:12.730 align:start position:0%
run it looks like maybe on average
taking<00:04:10.070><c> like</c><00:04:10.250><c> 1.5</c><00:04:11.210><c> milliseconds</c><00:04:12.020><c> maybe</c><00:04:12.200><c> 2</c>

00:04:12.730 --> 00:04:12.740 align:start position:0%
taking like 1.5 milliseconds maybe 2
 

00:04:12.740 --> 00:04:16.000 align:start position:0%
taking like 1.5 milliseconds maybe 2
milliseconds<00:04:13.370><c> as</c><00:04:13.490><c> I</c><00:04:13.610><c> as</c><00:04:13.880><c> I</c><00:04:14.090><c> run</c><00:04:14.300><c> this</c><00:04:14.950><c> alright</c>

00:04:16.000 --> 00:04:16.010 align:start position:0%
milliseconds as I as I run this alright
 

00:04:16.010 --> 00:04:18.550 align:start position:0%
milliseconds as I as I run this alright
um<00:04:16.450><c> let's</c><00:04:17.450><c> keep</c><00:04:17.570><c> adding</c><00:04:17.900><c> to</c><00:04:18.019><c> this</c><00:04:18.140><c> block</c><00:04:18.380><c> of</c>

00:04:18.550 --> 00:04:18.560 align:start position:0%
um let's keep adding to this block of
 

00:04:18.560 --> 00:04:20.920 align:start position:0%
um let's keep adding to this block of
code<00:04:18.590><c> so</c><00:04:19.190><c> let's</c><00:04:19.910><c> now</c><00:04:20.030><c> implement</c><00:04:20.510><c> a</c><00:04:20.630><c> non</c>

00:04:20.920 --> 00:04:20.930 align:start position:0%
code so let's now implement a non
 

00:04:20.930 --> 00:04:23.200 align:start position:0%
code so let's now implement a non
vectorized<00:04:21.530><c> version</c><00:04:22.010><c> let's</c><00:04:22.340><c> say</c><00:04:22.490><c> C</c><00:04:22.760><c> equals</c>

00:04:23.200 --> 00:04:23.210 align:start position:0%
vectorized version let's say C equals
 

00:04:23.210 --> 00:04:28.120 align:start position:0%
vectorized version let's say C equals
zero<00:04:23.720><c> then</c><00:04:24.620><c> x</c><00:04:25.010><c> equals</c><00:04:25.460><c> x</c><00:04:25.670><c> on</c><00:04:25.940><c> time</c><00:04:26.800><c> and</c><00:04:27.800><c> now</c>

00:04:28.120 --> 00:04:28.130 align:start position:0%
zero then x equals x on time and now
 

00:04:28.130 --> 00:04:30.790 align:start position:0%
zero then x equals x on time and now
let's<00:04:28.610><c> implement</c><00:04:28.970><c> a</c><00:04:29.270><c> formula</c><00:04:29.780><c> Phi</c><00:04:30.020><c> is</c><00:04:30.440><c> range</c>

00:04:30.790 --> 00:04:30.800 align:start position:0%
let's implement a formula Phi is range
 

00:04:30.800 --> 00:04:36.130 align:start position:0%
let's implement a formula Phi is range
of<00:04:31.300><c> 1</c><00:04:32.770><c> million</c><00:04:34.240><c> right</c><00:04:35.240><c> I've</c><00:04:35.510><c> got</c><00:04:35.810><c> the</c><00:04:35.900><c> number</c>

00:04:36.130 --> 00:04:36.140 align:start position:0%
of 1 million right I've got the number
 

00:04:36.140 --> 00:04:42.850 align:start position:0%
of 1 million right I've got the number
of<00:04:36.200><c> zeros</c><00:04:36.560><c> right</c><00:04:37.750><c> C</c><00:04:38.750><c> plus</c><00:04:39.380><c> equals</c><00:04:40.040><c> a</c><00:04:40.340><c> I</c><00:04:41.650><c> times</c><00:04:42.650><c> B</c>

00:04:42.850 --> 00:04:42.860 align:start position:0%
of zeros right C plus equals a I times B
 

00:04:42.860 --> 00:04:49.110 align:start position:0%
of zeros right C plus equals a I times B
I<00:04:43.870><c> and</c><00:04:45.100><c> then</c><00:04:46.100><c> on</c><00:04:46.370><c> talking</c><00:04:47.150><c> 12</c><00:04:47.390><c> times</c><00:04:47.660><c> our</c><00:04:47.870><c> time</c>

00:04:49.110 --> 00:04:49.120 align:start position:0%
I and then on talking 12 times our time
 

00:04:49.120 --> 00:04:55.300 align:start position:0%
I and then on talking 12 times our time
and<00:04:51.640><c> finally</c><00:04:52.640><c> print</c><00:04:53.290><c> you</c><00:04:54.290><c> know</c><00:04:54.320><c> with</c><00:04:55.190><c> an</c>

00:04:55.300 --> 00:04:55.310 align:start position:0%
and finally print you know with an
 

00:04:55.310 --> 00:04:59.920 align:start position:0%
and finally print you know with an
explicit<00:04:55.610><c> for</c><00:04:56.030><c> loop</c><00:04:56.860><c> um</c><00:04:58.270><c> the</c><00:04:59.270><c> time</c><00:04:59.540><c> it</c><00:04:59.750><c> takes</c>

00:04:59.920 --> 00:04:59.930 align:start position:0%
explicit for loop um the time it takes
 

00:04:59.930 --> 00:05:10.180 align:start position:0%
explicit for loop um the time it takes
is<00:05:00.730><c> this</c><00:05:02.110><c> 1000</c><00:05:03.110><c> times</c><00:05:04.240><c> talk</c><00:05:05.240><c> -</c><00:05:05.750><c> tick</c><00:05:08.590><c> plus</c><00:05:09.590><c> 1</c>

00:05:10.180 --> 00:05:10.190 align:start position:0%
is this 1000 times talk - tick plus 1
 

00:05:10.190 --> 00:05:12.990 align:start position:0%
is this 1000 times talk - tick plus 1
oops

00:05:12.990 --> 00:05:13.000 align:start position:0%
oops
 

00:05:13.000 --> 00:05:16.510 align:start position:0%
oops
m/s<00:05:14.169><c> just</c><00:05:15.169><c> to</c><00:05:15.320><c> denote</c><00:05:15.620><c> that</c><00:05:15.680><c> by</c><00:05:15.860><c> doing</c><00:05:16.130><c> this</c><00:05:16.340><c> in</c>

00:05:16.510 --> 00:05:16.520 align:start position:0%
m/s just to denote that by doing this in
 

00:05:16.520 --> 00:05:18.940 align:start position:0%
m/s just to denote that by doing this in
milliseconds<00:05:17.120><c> okay</c><00:05:17.720><c> oh</c><00:05:17.870><c> and</c><00:05:18.590><c> actually</c><00:05:18.800><c> let's</c>

00:05:18.940 --> 00:05:18.950 align:start position:0%
milliseconds okay oh and actually let's
 

00:05:18.950 --> 00:05:20.830 align:start position:0%
milliseconds okay oh and actually let's
do<00:05:19.070><c> one</c><00:05:19.250><c> more</c><00:05:19.280><c> thing</c><00:05:19.610><c> let's</c><00:05:19.910><c> just</c><00:05:20.000><c> you</c><00:05:20.780><c> know</c>

00:05:20.830 --> 00:05:20.840 align:start position:0%
do one more thing let's just you know
 

00:05:20.840 --> 00:05:23.530 align:start position:0%
do one more thing let's just you know
print<00:05:21.200><c> out</c><00:05:21.350><c> the</c><00:05:21.530><c> value</c><00:05:21.860><c> of</c><00:05:21.950><c> C</c><00:05:22.280><c> we</c><00:05:22.760><c> computer</c><00:05:23.330><c> to</c>

00:05:23.530 --> 00:05:23.540 align:start position:0%
print out the value of C we computer to
 

00:05:23.540 --> 00:05:26.260 align:start position:0%
print out the value of C we computer to
make<00:05:23.690><c> sure</c><00:05:23.870><c> that</c><00:05:24.080><c> is</c><00:05:24.590><c> the</c><00:05:24.770><c> same</c><00:05:24.979><c> value</c><00:05:25.460><c> in</c><00:05:25.970><c> both</c>

00:05:26.260 --> 00:05:26.270 align:start position:0%
make sure that is the same value in both
 

00:05:26.270 --> 00:05:31.270 align:start position:0%
make sure that is the same value in both
cases<00:05:27.190><c> okay</c><00:05:28.360><c> so</c><00:05:29.360><c> I'm</c><00:05:30.140><c> going</c><00:05:30.320><c> to</c><00:05:30.440><c> hit</c><00:05:30.620><c> shift</c>

00:05:31.270 --> 00:05:31.280 align:start position:0%
cases okay so I'm going to hit shift
 

00:05:31.280 --> 00:05:35.980 align:start position:0%
cases okay so I'm going to hit shift
enter<00:05:31.690><c> to</c><00:05:32.690><c> run</c><00:05:32.720><c> des</c><00:05:33.140><c> and</c><00:05:34.330><c> check</c><00:05:35.330><c> that</c><00:05:35.450><c> out</c><00:05:35.510><c> so</c>

00:05:35.980 --> 00:05:35.990 align:start position:0%
enter to run des and check that out so
 

00:05:35.990 --> 00:05:38.440 align:start position:0%
enter to run des and check that out so
in<00:05:36.380><c> both</c><00:05:36.680><c> cases</c><00:05:36.740><c> the</c><00:05:37.400><c> vectorized</c><00:05:37.850><c> version</c><00:05:38.270><c> and</c>

00:05:38.440 --> 00:05:38.450 align:start position:0%
in both cases the vectorized version and
 

00:05:38.450 --> 00:05:40.240 align:start position:0%
in both cases the vectorized version and
a<00:05:38.570><c> non</c><00:05:38.780><c> vectorized</c><00:05:39.229><c> version</c><00:05:39.590><c> computed</c><00:05:40.160><c> the</c>

00:05:40.240 --> 00:05:40.250 align:start position:0%
a non vectorized version computed the
 

00:05:40.250 --> 00:05:43.360 align:start position:0%
a non vectorized version computed the
same<00:05:40.460><c> values</c><00:05:40.940><c> as</c><00:05:41.210><c> you</c><00:05:41.330><c> know</c><00:05:41.419><c> to</c><00:05:41.650><c> 503</c><00:05:42.650><c> six</c><00:05:43.070><c> point</c>

00:05:43.360 --> 00:05:43.370 align:start position:0%
same values as you know to 503 six point
 

00:05:43.370 --> 00:05:47.260 align:start position:0%
same values as you know to 503 six point
99<00:05:44.360><c> to</c><00:05:44.810><c> 1</c><00:05:44.990><c> the</c><00:05:45.770><c> vectors</c><00:05:46.190><c> version</c><00:05:46.610><c> took</c><00:05:46.850><c> 1</c><00:05:47.060><c> point</c>

00:05:47.260 --> 00:05:47.270 align:start position:0%
99 to 1 the vectors version took 1 point
 

00:05:47.270 --> 00:05:50.380 align:start position:0%
99 to 1 the vectors version took 1 point
5<00:05:47.510><c> milliseconds</c><00:05:48.320><c> the</c><00:05:48.950><c> explicit</c><00:05:49.580><c> for</c><00:05:50.000><c> loot</c><00:05:50.180><c> and</c>

00:05:50.380 --> 00:05:50.390 align:start position:0%
5 milliseconds the explicit for loot and
 

00:05:50.390 --> 00:05:54.730 align:start position:0%
5 milliseconds the explicit for loot and
non-veterans<00:05:51.050><c> version</c><00:05:51.500><c> took</c><00:05:52.540><c> about</c><00:05:53.540><c> 400</c><00:05:54.290><c> over</c>

00:05:54.730 --> 00:05:54.740 align:start position:0%
non-veterans version took about 400 over
 

00:05:54.740 --> 00:05:58.900 align:start position:0%
non-veterans version took about 400 over
almost<00:05:55.100><c> 500</c><00:05:55.820><c> milliseconds</c><00:05:57.370><c> so</c><00:05:58.370><c> the</c><00:05:58.580><c> non</c>

00:05:58.900 --> 00:05:58.910 align:start position:0%
almost 500 milliseconds so the non
 

00:05:58.910 --> 00:06:00.490 align:start position:0%
almost 500 milliseconds so the non
vectorized<00:05:59.390><c> version</c><00:05:59.870><c> took</c><00:06:00.169><c> you</c><00:06:00.380><c> know</c>

00:06:00.490 --> 00:06:00.500 align:start position:0%
vectorized version took you know
 

00:06:00.500 --> 00:06:03.310 align:start position:0%
vectorized version took you know
something<00:06:00.890><c> like</c><00:06:01.040><c> 300</c><00:06:01.580><c> times</c><00:06:01.760><c> longer</c><00:06:02.169><c> then</c><00:06:03.169><c> the</c>

00:06:03.310 --> 00:06:03.320 align:start position:0%
something like 300 times longer then the
 

00:06:03.320 --> 00:06:07.180 align:start position:0%
something like 300 times longer then the
vectorized<00:06:03.919><c> version</c><00:06:04.510><c> right</c><00:06:05.510><c> and</c><00:06:05.720><c> so</c><00:06:06.190><c> what</c>

00:06:07.180 --> 00:06:07.190 align:start position:0%
vectorized version right and so what
 

00:06:07.190 --> 00:06:09.190 align:start position:0%
vectorized version right and so what
this<00:06:07.310><c> example</c><00:06:07.669><c> you</c><00:06:07.880><c> see</c><00:06:07.910><c> that</c><00:06:08.150><c> if</c><00:06:08.570><c> only</c><00:06:08.810><c> you</c>

00:06:09.190 --> 00:06:09.200 align:start position:0%
this example you see that if only you
 

00:06:09.200 --> 00:06:11.350 align:start position:0%
this example you see that if only you
remember<00:06:10.040><c> to</c><00:06:10.220><c> vectorize</c><00:06:10.669><c> your</c><00:06:10.880><c> code</c><00:06:11.090><c> your</c>

00:06:11.350 --> 00:06:11.360 align:start position:0%
remember to vectorize your code your
 

00:06:11.360 --> 00:06:14.060 align:start position:0%
remember to vectorize your code your
code<00:06:11.390><c> actually</c><00:06:11.810><c> runs</c><00:06:12.200><c> 0</c><00:06:12.620><c> over</c><00:06:12.979><c> 300</c><00:06:13.520><c> times</c>

00:06:14.060 --> 00:06:14.070 align:start position:0%
code actually runs 0 over 300 times
 

00:06:14.070 --> 00:06:16.160 align:start position:0%
code actually runs 0 over 300 times
there<00:06:14.250><c> yeah</c><00:06:15.030><c> well</c><00:06:15.450><c> let's</c><00:06:15.660><c> just</c><00:06:15.810><c> run</c><00:06:15.960><c> of</c><00:06:16.080><c> the</c>

00:06:16.160 --> 00:06:16.170 align:start position:0%
there yeah well let's just run of the
 

00:06:16.170 --> 00:06:19.730 align:start position:0%
there yeah well let's just run of the
game<00:06:16.200><c> right</c><00:06:16.620><c> is</c><00:06:16.850><c> run</c><00:06:17.850><c> again</c><00:06:18.270><c> yeah</c><00:06:19.260><c> vectorized</c>

00:06:19.730 --> 00:06:19.740 align:start position:0%
game right is run again yeah vectorized
 

00:06:19.740 --> 00:06:21.650 align:start position:0%
game right is run again yeah vectorized
version<00:06:20.100><c> 1.5</c><00:06:20.670><c> milliseconds</c><00:06:21.330><c> and</c><00:06:21.510><c> the</c>

00:06:21.650 --> 00:06:21.660 align:start position:0%
version 1.5 milliseconds and the
 

00:06:21.660 --> 00:06:25.820 align:start position:0%
version 1.5 milliseconds and the
for-loop<00:06:21.990><c> so</c><00:06:22.490><c> 481</c><00:06:23.930><c> milliseconds</c><00:06:24.930><c> so</c><00:06:25.410><c> again</c>

00:06:25.820 --> 00:06:25.830 align:start position:0%
for-loop so 481 milliseconds so again
 

00:06:25.830 --> 00:06:28.220 align:start position:0%
for-loop so 481 milliseconds so again
about<00:06:26.010><c> 300</c><00:06:26.670><c> times</c><00:06:26.790><c> slower</c><00:06:27.180><c> to</c><00:06:27.930><c> do</c><00:06:28.080><c> the</c>

00:06:28.220 --> 00:06:28.230 align:start position:0%
about 300 times slower to do the
 

00:06:28.230 --> 00:06:31.190 align:start position:0%
about 300 times slower to do the
explicit<00:06:28.500><c> volume</c><00:06:29.100><c> so</c><00:06:29.820><c> 3x</c><00:06:30.270><c> slowdown</c><00:06:30.840><c> is</c><00:06:31.080><c> the</c>

00:06:31.190 --> 00:06:31.200 align:start position:0%
explicit volume so 3x slowdown is the
 

00:06:31.200 --> 00:06:32.720 align:start position:0%
explicit volume so 3x slowdown is the
difference<00:06:31.530><c> between</c><00:06:31.650><c> your</c><00:06:32.070><c> code</c><00:06:32.310><c> ticking</c>

00:06:32.720 --> 00:06:32.730 align:start position:0%
difference between your code ticking
 

00:06:32.730 --> 00:06:34.670 align:start position:0%
difference between your code ticking
maybe<00:06:33.030><c> one</c><00:06:33.420><c> minute</c><00:06:33.720><c> to</c><00:06:33.840><c> run</c><00:06:34.050><c> versus</c><00:06:34.530><c> it</c>

00:06:34.670 --> 00:06:34.680 align:start position:0%
maybe one minute to run versus it
 

00:06:34.680 --> 00:06:38.960 align:start position:0%
maybe one minute to run versus it
ticking<00:06:35.070><c> say</c><00:06:35.760><c> five</c><00:06:36.180><c> hours</c><00:06:36.630><c> to</c><00:06:36.840><c> run</c><00:06:37.050><c> and</c><00:06:37.970><c> when</c>

00:06:38.960 --> 00:06:38.970 align:start position:0%
ticking say five hours to run and when
 

00:06:38.970 --> 00:06:40.610 align:start position:0%
ticking say five hours to run and when
you<00:06:39.270><c> are</c><00:06:39.540><c> implementing</c><00:06:40.140><c> deep</c><00:06:40.470><c> learning</c>

00:06:40.610 --> 00:06:40.620 align:start position:0%
you are implementing deep learning
 

00:06:40.620 --> 00:06:42.470 align:start position:0%
you are implementing deep learning
algorithms<00:06:41.250><c> you</c><00:06:41.460><c> can</c><00:06:41.490><c> really</c><00:06:41.880><c> get</c><00:06:42.060><c> a</c><00:06:42.120><c> result</c>

00:06:42.470 --> 00:06:42.480 align:start position:0%
algorithms you can really get a result
 

00:06:42.480 --> 00:06:43.880 align:start position:0%
algorithms you can really get a result
back<00:06:42.690><c> faster</c><00:06:43.230><c> and</c><00:06:43.380><c> then</c><00:06:43.470><c> being</c><00:06:43.650><c> much</c><00:06:43.860><c> faster</c>

00:06:43.880 --> 00:06:43.890 align:start position:0%
back faster and then being much faster
 

00:06:43.890 --> 00:06:47.570 align:start position:0%
back faster and then being much faster
if<00:06:44.550><c> you</c><00:06:45.000><c> vectorize</c><00:06:45.510><c> your</c><00:06:45.720><c> code</c><00:06:46.160><c> so</c><00:06:47.160><c> some</c><00:06:47.460><c> of</c>

00:06:47.570 --> 00:06:47.580 align:start position:0%
if you vectorize your code so some of
 

00:06:47.580 --> 00:06:49.010 align:start position:0%
if you vectorize your code so some of
you<00:06:47.670><c> might</c><00:06:47.880><c> have</c><00:06:47.910><c> heard</c><00:06:48.330><c> that</c><00:06:48.360><c> a</c><00:06:48.600><c> lot</c><00:06:48.840><c> of</c>

00:06:49.010 --> 00:06:49.020 align:start position:0%
you might have heard that a lot of
 

00:06:49.020 --> 00:06:51.800 align:start position:0%
you might have heard that a lot of
scalable<00:06:50.010><c> people</c><00:06:50.490><c> implementations</c><00:06:51.390><c> are</c><00:06:51.630><c> done</c>

00:06:51.800 --> 00:06:51.810 align:start position:0%
scalable people implementations are done
 

00:06:51.810 --> 00:06:54.050 align:start position:0%
scalable people implementations are done
on<00:06:51.960><c> a</c><00:06:51.990><c> GPU</c><00:06:52.440><c> and</c><00:06:52.770><c> a</c><00:06:52.830><c> graphics</c><00:06:53.220><c> processor</c><00:06:53.700><c> unit</c>

00:06:54.050 --> 00:06:54.060 align:start position:0%
on a GPU and a graphics processor unit
 

00:06:54.060 --> 00:06:56.540 align:start position:0%
on a GPU and a graphics processor unit
but<00:06:54.540><c> all</c><00:06:54.660><c> the</c><00:06:54.810><c> demos</c><00:06:55.110><c> I</c><00:06:55.230><c> did</c><00:06:55.410><c> just</c><00:06:55.560><c> now</c><00:06:55.650><c> in</c><00:06:56.100><c> the</c>

00:06:56.540 --> 00:06:56.550 align:start position:0%
but all the demos I did just now in the
 

00:06:56.550 --> 00:06:59.120 align:start position:0%
but all the demos I did just now in the
Jupiter<00:06:57.150><c> notebook</c><00:06:57.540><c> were</c><00:06:58.020><c> actually</c><00:06:58.350><c> on</c><00:06:58.530><c> a</c><00:06:58.560><c> CPU</c>

00:06:59.120 --> 00:06:59.130 align:start position:0%
Jupiter notebook were actually on a CPU
 

00:06:59.130 --> 00:07:01.970 align:start position:0%
Jupiter notebook were actually on a CPU
and<00:06:59.490><c> it</c><00:06:59.700><c> turns</c><00:06:59.910><c> out</c><00:07:00.090><c> that</c><00:07:00.150><c> both</c><00:07:00.570><c> GPU</c><00:07:01.110><c> and</c><00:07:01.350><c> CPUs</c>

00:07:01.970 --> 00:07:01.980 align:start position:0%
and it turns out that both GPU and CPUs
 

00:07:01.980 --> 00:07:04.610 align:start position:0%
and it turns out that both GPU and CPUs
have<00:07:02.360><c> kernelization</c><00:07:03.360><c> instructions</c><00:07:04.290><c> they're</c>

00:07:04.610 --> 00:07:04.620 align:start position:0%
have kernelization instructions they're
 

00:07:04.620 --> 00:07:07.160 align:start position:0%
have kernelization instructions they're
sometimes<00:07:04.860><c> called</c><00:07:05.100><c> sim</c><00:07:05.640><c> D</c><00:07:06.050><c> instructions</c>

00:07:07.160 --> 00:07:07.170 align:start position:0%
sometimes called sim D instructions
 

00:07:07.170 --> 00:07:08.810 align:start position:0%
sometimes called sim D instructions
this<00:07:07.710><c> stands</c><00:07:08.010><c> for</c><00:07:08.040><c> a</c><00:07:08.190><c> single</c><00:07:08.580><c> instruction</c>

00:07:08.810 --> 00:07:08.820 align:start position:0%
this stands for a single instruction
 

00:07:08.820 --> 00:07:12.020 align:start position:0%
this stands for a single instruction
multiple<00:07:09.380><c> data</c><00:07:10.460><c> but</c><00:07:11.460><c> what</c><00:07:11.700><c> this</c><00:07:11.850><c> basically</c>

00:07:12.020 --> 00:07:12.030 align:start position:0%
multiple data but what this basically
 

00:07:12.030 --> 00:07:14.810 align:start position:0%
multiple data but what this basically
means<00:07:12.330><c> is</c><00:07:12.600><c> that</c><00:07:12.630><c> if</c><00:07:13.080><c> you</c><00:07:13.530><c> use</c><00:07:13.830><c> built-in</c>

00:07:14.810 --> 00:07:14.820 align:start position:0%
means is that if you use built-in
 

00:07:14.820 --> 00:07:17.810 align:start position:0%
means is that if you use built-in
functions<00:07:15.360><c> such</c><00:07:15.870><c> as</c><00:07:16.110><c> this</c><00:07:16.410><c> NT</c><00:07:17.010><c> dot</c><00:07:17.250><c> function</c>

00:07:17.810 --> 00:07:17.820 align:start position:0%
functions such as this NT dot function
 

00:07:17.820 --> 00:07:20.480 align:start position:0%
functions such as this NT dot function
or<00:07:18.420><c> other</c><00:07:18.560><c> per</c><00:07:19.560><c> functions</c><00:07:20.010><c> that</c><00:07:20.250><c> don't</c>

00:07:20.480 --> 00:07:20.490 align:start position:0%
or other per functions that don't
 

00:07:20.490 --> 00:07:22.580 align:start position:0%
or other per functions that don't
require<00:07:20.700><c> you're</c><00:07:21.270><c> explicitly</c><00:07:21.600><c> implementing</c><00:07:22.530><c> a</c>

00:07:22.580 --> 00:07:22.590 align:start position:0%
require you're explicitly implementing a
 

00:07:22.590 --> 00:07:26.600 align:start position:0%
require you're explicitly implementing a
for<00:07:22.860><c> loop</c><00:07:23.010><c> it</c><00:07:23.430><c> enables</c><00:07:24.300><c> it</c><00:07:25.260><c> enables</c><00:07:26.130><c> Python</c>

00:07:26.600 --> 00:07:26.610 align:start position:0%
for loop it enables it enables Python
 

00:07:26.610 --> 00:07:29.510 align:start position:0%
for loop it enables it enables Python
numpy<00:07:27.030><c> to</c><00:07:27.750><c> take</c><00:07:28.050><c> much</c><00:07:28.350><c> better</c><00:07:28.620><c> advantage</c><00:07:28.980><c> of</c>

00:07:29.510 --> 00:07:29.520 align:start position:0%
numpy to take much better advantage of
 

00:07:29.520 --> 00:07:32.600 align:start position:0%
numpy to take much better advantage of
parallelism<00:07:30.330><c> to</c><00:07:30.870><c> do</c><00:07:31.320><c> your</c><00:07:31.470><c> computations</c><00:07:32.190><c> much</c>

00:07:32.600 --> 00:07:32.610 align:start position:0%
parallelism to do your computations much
 

00:07:32.610 --> 00:07:34.820 align:start position:0%
parallelism to do your computations much
faster<00:07:33.180><c> and</c><00:07:33.360><c> this</c><00:07:34.080><c> is</c><00:07:34.260><c> true</c><00:07:34.500><c> both</c><00:07:34.800><c> for</c>

00:07:34.820 --> 00:07:34.830 align:start position:0%
faster and this is true both for
 

00:07:34.830 --> 00:07:37.820 align:start position:0%
faster and this is true both for
computations<00:07:35.760><c> on</c><00:07:36.000><c> CPUs</c><00:07:36.570><c> and</c><00:07:36.870><c> computations</c><00:07:37.620><c> on</c>

00:07:37.820 --> 00:07:37.830 align:start position:0%
computations on CPUs and computations on
 

00:07:37.830 --> 00:07:40.850 align:start position:0%
computations on CPUs and computations on
GPUs<00:07:38.310><c> it's</c><00:07:38.610><c> just</c><00:07:38.760><c> GPUs</c><00:07:39.690><c> are</c><00:07:39.900><c> remarkably</c><00:07:40.530><c> good</c>

00:07:40.850 --> 00:07:40.860 align:start position:0%
GPUs it's just GPUs are remarkably good
 

00:07:40.860 --> 00:07:43.250 align:start position:0%
GPUs it's just GPUs are remarkably good
at<00:07:41.040><c> these</c><00:07:41.190><c> Sindhi</c><00:07:41.580><c> calculations</c><00:07:42.210><c> but</c><00:07:42.720><c> CPU</c><00:07:43.140><c> is</c>

00:07:43.250 --> 00:07:43.260 align:start position:0%
at these Sindhi calculations but CPU is
 

00:07:43.260 --> 00:07:45.320 align:start position:0%
at these Sindhi calculations but CPU is
actually<00:07:43.590><c> also</c><00:07:43.710><c> not</c><00:07:44.190><c> too</c><00:07:44.370><c> bad</c><00:07:44.520><c> at</c><00:07:44.730><c> them</c><00:07:44.910><c> maybe</c>

00:07:45.320 --> 00:07:45.330 align:start position:0%
actually also not too bad at them maybe
 

00:07:45.330 --> 00:07:48.140 align:start position:0%
actually also not too bad at them maybe
just<00:07:45.600><c> not</c><00:07:45.810><c> as</c><00:07:45.960><c> good</c><00:07:46.200><c> as</c><00:07:46.320><c> GPUs</c><00:07:46.890><c> so</c><00:07:47.760><c> you</c><00:07:47.910><c> see</c><00:07:48.090><c> in</c>

00:07:48.140 --> 00:07:48.150 align:start position:0%
just not as good as GPUs so you see in
 

00:07:48.150 --> 00:07:50.210 align:start position:0%
just not as good as GPUs so you see in
how<00:07:48.390><c> vectorization</c><00:07:48.900><c> can</c><00:07:49.560><c> significantly</c>

00:07:50.210 --> 00:07:50.220 align:start position:0%
how vectorization can significantly
 

00:07:50.220 --> 00:07:52.280 align:start position:0%
how vectorization can significantly
speed<00:07:50.460><c> up</c><00:07:50.730><c> your</c><00:07:50.850><c> code</c><00:07:51.120><c> the</c><00:07:51.720><c> rule</c><00:07:51.960><c> of</c><00:07:52.050><c> thumb</c><00:07:52.230><c> to</c>

00:07:52.280 --> 00:07:52.290 align:start position:0%
speed up your code the rule of thumb to
 

00:07:52.290 --> 00:07:54.640 align:start position:0%
speed up your code the rule of thumb to
remember<00:07:52.860><c> is</c><00:07:53.070><c> whenever</c><00:07:53.820><c> possible</c><00:07:54.060><c> avoid</c>

00:07:54.640 --> 00:07:54.650 align:start position:0%
remember is whenever possible avoid
 

00:07:54.650 --> 00:07:57.830 align:start position:0%
remember is whenever possible avoid
using<00:07:55.650><c> explicit</c><00:07:56.040><c> for</c><00:07:56.520><c> loops</c><00:07:56.760><c> let's</c><00:07:57.540><c> go</c><00:07:57.750><c> onto</c>

00:07:57.830 --> 00:07:57.840 align:start position:0%
using explicit for loops let's go onto
 

00:07:57.840 --> 00:07:59.450 align:start position:0%
using explicit for loops let's go onto
the<00:07:58.020><c> next</c><00:07:58.050><c> video</c><00:07:58.380><c> to</c><00:07:58.590><c> see</c><00:07:58.740><c> some</c><00:07:59.160><c> more</c><00:07:59.310><c> examples</c>

00:07:59.450 --> 00:07:59.460 align:start position:0%
the next video to see some more examples
 

00:07:59.460 --> 00:08:01.880 align:start position:0%
the next video to see some more examples
of<00:07:59.970><c> vectorization</c><00:08:00.270><c> and</c><00:08:00.780><c> also</c><00:08:01.350><c> start</c><00:08:01.680><c> to</c>

00:08:01.880 --> 00:08:01.890 align:start position:0%
of vectorization and also start to
 

00:08:01.890 --> 00:08:05.690 align:start position:0%
of vectorization and also start to
vectorize<00:08:02.250><c> logistic</c><00:08:03.180><c> regression</c>

