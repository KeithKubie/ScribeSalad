WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:19.390
&gt;&gt; THOMAS: Okay. Hi, my name is Grant Thomas.
And I work at Oracle and I feel I'm like taking

00:00:19.390 --> 00:00:27.210
you into the dark side; Windows, Oracle, PowerPoint.
So, if anybody cares about those things, I

00:00:27.210 --> 00:00:37.980
probably would apologize for it but anyway.
I--so, one of the things we've been looking

00:00:37.980 --> 00:00:44.690
at Wave for inter-network and a group that
looks at innovations, basically innovations

00:00:44.690 --> 00:00:51.080
group within Oracle and we look at technology
that Oracle acquires and technology that appears

00:00:51.080 --> 00:00:56.300
outside of Oracle, and see specifically how
that can be turned to advantage of our applications

00:00:56.300 --> 00:01:02.280
groups. And one of the things that we--more
or less when--the day Wave came out, we were

00:01:02.280 --> 00:01:07.150
interested in Wave and we built some integrations
between Wave and some of our CRM Apps and

00:01:07.150 --> 00:01:12.440
we demoed those at those of Google I/O were
all very excited and, you know, then the bubble

00:01:12.440 --> 00:01:18.590
was burst. But we have kept track with that,
and one of the things that we did on the original

00:01:18.590 --> 00:01:25.480
FedOne was build a persistence layer around
a product called Oracle Coherence. And I'm

00:01:25.480 --> 00:01:29.990
going to do probably, like, you know, four
slides in about one a minute on that, and

00:01:29.990 --> 00:01:35.400
then look at some code. For people that don't
know Coherence, they may know a product called

00:01:35.400 --> 00:01:41.210
Tangosol which is what it was called before
Oracle bought it. But it's basically a big

00:01:41.210 --> 00:01:47.380
map. It's a distributed map. So, you send
it abstraction of the map cost; it can run

00:01:47.380 --> 00:01:52.159
on one node, it can run on a thousand nodes.
And it's distributed petitions. You've got

00:01:52.159 --> 00:02:01.159
a ton of ways of deploying it. It's got querying,
it's got asset properties. We use it internally

00:02:01.159 --> 00:02:06.250
and also productize it for numbers of different
purposes. We use it as a read-through and

00:02:06.250 --> 00:02:12.730
a write-behind cache for JPA. We use it for
session-balancing and a sessions layer across

00:02:12.730 --> 00:02:20.560
some WebLogic clusters. Also, some things,
there's even a SQL-like query language for

00:02:20.560 --> 00:02:28.280
the maps. So, just to give you a quick sort
of sense of that, so one of the ways you can

00:02:28.280 --> 00:02:37.700
do is basically--essentially, every JVM and,
potentially, your application runs a piece

00:02:37.700 --> 00:02:42.730
of the map and then it's petitioned to cross
and the Map technology takes care of all the

00:02:42.730 --> 00:02:49.290
replication. It uses a proprietary sort of
broadcast protocol for doing that and that's

00:02:49.290 --> 00:02:54.390
one way of doing it. Essentially, you can
do that way. Typically, what happens then

00:02:54.390 --> 00:02:59.190
is if an application updates some entry in
the map, the map knows where all the other

00:02:59.190 --> 00:03:03.780
bits of that versions of that thing is and
then broadcasts it and it gets sort of sent

00:03:03.780 --> 00:03:11.099
around the different JVMs. And so, if you
lose a JVM, you haven't lost your data. So,

00:03:11.099 --> 00:03:17.200
it's a pretty fairly sophisticated way of
doing it. The technology is used a lot by

00:03:17.200 --> 00:03:23.410
people who've got very high throughput transaction
rates, so retailers, financial services, exchanges,

00:03:23.410 --> 00:03:27.250
where they're running hundreds of millions
of transactions a day. And they essentially

00:03:27.250 --> 00:03:32.150
run them through these things and then offload
them at the end of the day into more persistence

00:03:32.150 --> 00:03:38.459
storage. Just to give you a sort of an idea,
typically, it's a couple of sort of network

00:03:38.459 --> 00:03:42.489
operations to do accesses and updates because
you have to find out where the data might

00:03:42.489 --> 00:03:50.060
be, move it from a distributed node to a local
node, that type of thing. This is a sort of

00:03:50.060 --> 00:03:58.220
model I'm actually using for this which is--so
you can think of this essentially as the Wave

00:03:58.220 --> 00:04:04.849
server essentially running with no local storage
for the map, and then there's a cluster that

00:04:04.849 --> 00:04:09.080
you can either set up as, you know, cluster
one node or a cluster of many nodes that actually

00:04:09.080 --> 00:04:14.390
runs a map, and so, when the app starts update,
it sort of pulls the data including the map,

00:04:14.390 --> 00:04:21.599
the nodes that are out there. You can do--there
are all sorts of sophisticated deployment

00:04:21.599 --> 00:04:28.089
topologies with sort of near caching, right-through
caching, right behind caching; all sorts of

00:04:28.089 --> 00:04:35.139
things. You can persist it to the database.
The databases can be Oracle RAC, it can be

00:04:35.139 --> 00:04:41.259
Berkeley DB. There can be all sorts of, you
know, different database top technology that

00:04:41.259 --> 00:04:47.919
sort of sits there and you can also run that
stuff over WAN. There's a protocol called

00:04:47.919 --> 00:04:56.509
TCMP which I think originally stands for Tangosol,
but it is actually the sort of broadcast protocol

00:04:56.509 --> 00:05:01.129
that's used. So that was basically that. So
you just basically think of the storage as

00:05:01.129 --> 00:05:13.759
being a big map. It's out there. So, let me
just see. They're juggling things up. So this

00:05:13.759 --> 00:05:20.020
is just--I'm sorry I'm running on a Amazon
server with Openfire XMPP and doing federation

00:05:20.020 --> 00:05:30.360
with Wave in a Box and using Coherence as
storage up here. So stop--to basically stop

00:05:30.360 --> 00:05:34.229
the node outside is pretty straightforward.
You basically just have to essentially have

00:05:34.229 --> 00:05:42.089
the Coherence.jar and run the .jar and you
end up with--let me see if I can find the

00:05:42.089 --> 00:05:45.980
thing. Here. So, you know, it's basically
just the JVM process, so this is how you can

00:05:45.980 --> 00:05:50.740
start one, you can start many. If you want
something more sophisticated, you can actually

00:05:50.740 --> 00:05:55.460
run these under WebLogic, and so you have
full management of the sort of distributed

00:05:55.460 --> 00:06:01.669
cluster node on that or you can, as I say,
run it in the process or run it just as a

00:06:01.669 --> 00:06:08.099
straightforward process on here. I'm trying
to run through this fairly quickly. I'm sure

00:06:08.099 --> 00:06:20.619
people are hungry. So, from--I believe Putty
was mentioned the other day, so this is Putty

00:06:20.619 --> 00:06:26.730
picking up a file off of Amazon. So to just
give you a sort of sense, pretty much all

00:06:26.730 --> 00:06:41.129
you have to do this is tell Wave, essentially,
what your sort of cluster address is, what

00:06:41.129 --> 00:06:45.139
port you are using, the cluster names you
want. The other starts to just log-in, that's

00:06:45.139 --> 00:06:51.550
on there. And as I said, I'm using local storage
equals false. Then there are a couple of conflict

00:06:51.550 --> 00:06:57.650
files and the conflict files do two things.
One of them tells you--tells Coherence what

00:06:57.650 --> 00:07:03.550
the caches are that you want to use and I
just sat four up; one for search, one for

00:07:03.550 --> 00:07:08.129
accounts, one for Waves and I think one for
files--though I'm not into using the one for

00:07:08.129 --> 00:07:14.713
files at the moment--that's on there. And
then, you know, you run--you run your Wave

00:07:14.713 --> 00:07:24.279
server and basically, it works and I can go
to--let's see if I can find the right file

00:07:24.279 --> 00:07:30.330
here. So there's a bunch of command line tools
or other tools to do this but I have a map

00:07:30.330 --> 00:07:38.439
called rehab accounts on here. So, you know,
to use that map, you just say--or to be able

00:07:38.439 --> 00:07:44.569
to look at it, you can do that and obviously,
I've been--just got one account butâ€”yes...

00:07:44.569 --> 00:08:03.009
I'm not sure why that is. It must have gone
away. Anyway, we won't worry about that for

00:08:03.009 --> 00:08:10.009
now. And I'm looking at the wrong thing. From
a persistence point of view, there are interfaces

00:08:10.009 --> 00:08:18.139
and basically, I've just modeled on stuff
that was in here. So just to quickly show

00:08:18.139 --> 00:08:27.929
some code here. There's a thing called persistence
module which gets caught from the--from the

00:08:27.929 --> 00:08:33.899
start up and it passes in these types. So
you end up with a type in there and then you

00:08:33.899 --> 00:08:40.600
bind the type to whatever you want and I've
heard of some new ones for, you know, Coherence.

00:08:40.600 --> 00:08:46.660
Coherence set store and Coherence account
store and when there was the Delta store,

00:08:46.660 --> 00:08:56.720
well, we'll have one of those as well. But
a quick look at that. I'll do the simplest

00:08:56.720 --> 00:09:08.510
one which is account store. So this is about
as quick and short and as dirty as it gets

00:09:08.510 --> 00:09:17.120
to use something like Coherence. So there's
an account store interface. Simple because

00:09:17.120 --> 00:09:21.960
it's going to be a single turn, there's a
little static initializer that says "Cache

00:09:21.960 --> 00:09:28.640
back to get cache. Could we have accounts,"
that's basically it. Sets it's, you know,

00:09:28.640 --> 00:09:38.920
static account cache. And then in the implementation
at the methods down here, there's a--you get

00:09:38.920 --> 00:09:45.590
a--let me put it down here. So you get past
in this account data object and then when

00:09:45.590 --> 00:09:50.860
I--one of the things that Coherence can do,
if you got something that seems currently

00:09:50.860 --> 00:09:56.240
serializable, you can just put it and it will
just use job serialization and write the stuff

00:09:56.240 --> 00:10:04.300
out. Problem with that is job serialization
is generally crap. So one of the things that

00:10:04.300 --> 00:10:09.960
Coherence did is they built this thing they
called PUFF which I can never remember what

00:10:09.960 --> 00:10:21.120
it actually stands for. But it's an optimized
serialization format. And so I actually translate

00:10:21.120 --> 00:10:25.010
an account data object in this thing called
a stored account. And there's a couple of

00:10:25.010 --> 00:10:29.750
different ways you can do it but the simplest
one is just to implement this interface called

00:10:29.750 --> 00:10:42.380
quotable object. And so here's where my account
data gets passed in and there's a read external

00:10:42.380 --> 00:10:49.050
version of it and there's a write external
version of it. And as you could imagine, basically

00:10:49.050 --> 00:10:56.970
what it's doing is it just essentially serializes
using its serialization routines. And it's

00:10:56.970 --> 00:11:01.020
got serializations for a whole bunch of different
sort of standard types but you can also write

00:11:01.020 --> 00:11:05.510
your own serialization--serializers if you
actually want--let say if you got some very,

00:11:05.510 --> 00:11:10.250
very specific serialization that you need
to do and you, you know, you basically just

00:11:10.250 --> 00:11:19.120
write that stuff out. And then when you need
it to come back from the map basically, the

00:11:19.120 --> 00:11:24.120
map infrastructure causes things behind the
scenes, cause these serialization routines

00:11:24.120 --> 00:11:34.680
and you get your account data that way. Search
store is pretty much the same. Delta records,

00:11:34.680 --> 00:11:41.900
which is the sort of beginnings of the persistent
store, is basically the same patent but now

00:11:41.900 --> 00:11:50.400
you're persisting a wavelet delta record.
And one of the things that's quite nice about

00:11:50.400 --> 00:11:56.350
Wave is that there's already serializers to
put them into sort of standard types all over,

00:11:56.350 --> 00:12:01.060
you know, the protobuf stuff is all over Wave.
So basically, you can get to a byte array

00:12:01.060 --> 00:12:06.130
of pretty much everything and then you just
going to read and write the byte arrays out

00:12:06.130 --> 00:12:17.750
into--out in the--out into the content to
get those things back. And in theory, that

00:12:17.750 --> 00:12:26.160
means that--let me go here. That's pretty
much--coming from a code point of view, that's

00:12:26.160 --> 00:12:32.660
pretty much it. It's pretty straightforward.
From a storage point of view, this really

00:12:32.660 --> 00:12:39.060
has nothing to do with how you store it. So,
if you want a simple dirty [INDISTINCT] store,

00:12:39.060 --> 00:12:45.040
you just download Coherence off of OTN, Oracle
Technology Network. All of Oracle's technology

00:12:45.040 --> 00:12:50.560
is free for use for sort of evaluation stroke
developer playing around. It's not free for

00:12:50.560 --> 00:12:55.380
use for production and neither is this, so
it doesn't help you there. But if anybody's

00:12:55.380 --> 00:13:00.510
got a view to saying, "I actually want to
build something that's got an enterprise quality

00:13:00.510 --> 00:13:05.380
store standing behind it with--that can be
operated using tools that people are familiar

00:13:05.380 --> 00:13:16.000
with," then Coherence is a potential for that.
There is an Apache project called Cassandra

00:13:16.000 --> 00:13:22.310
that is somewhat similar. I know nothing about
it, but it is a distributed multidimensional

00:13:22.310 --> 00:13:32.940
map that was built by Facebook and contributed
to Apache. So, that might be an alternative

00:13:32.940 --> 00:13:37.840
to Coherence as an approach that gives you
all the same sort of benefits of basically

00:13:37.840 --> 00:13:49.779
just using the map obstruction as your store
that's out there. And this is all working.

00:13:49.779 --> 00:13:56.401
So here's my--this is my Amazon on a thing
called Oracle CRM Wave is the domain that's

00:13:56.401 --> 00:14:12.260
up there. So, in theory, 22--I can add--I
have a Wave Sandbox log-in as well, so if

00:14:12.260 --> 00:14:23.890
I can spell it right...and if that's all still
working. Then, yeah, now I have my, you know,

00:14:23.890 --> 00:14:34.050
persisted Wave and that's actually using,
as I said, the--let me see if I can just find

00:14:34.050 --> 00:14:43.590
that store element I was looking for. Let
me just try it for the--so to make it up.

00:14:43.590 --> 00:14:53.560
Yeah, so there's--so it's basically the sets
stored in there. It's got--I don't know what

00:14:53.560 --> 00:14:55.930
that is. Some hash name that was--that's used
to--as the identification key. And then that's

00:14:55.930 --> 00:15:08.260
the object that's stored in there. And as
I said, unless--let me just try this one more

00:15:08.260 --> 00:15:25.010
time. I have no idea why that--maybe it's
account. No. I don't know. Disappeared for

00:15:25.010 --> 00:15:29.000
some reason but it should show you the account
object that's in there. But basically, that's

00:15:29.000 --> 00:15:35.970
it. So, hopefully that gives you some flavor
of relatively simple to do. The--it shouldn't

00:15:35.970 --> 00:15:42.120
be--you shouldn't really feel afraid of the
persistent interfaces to date. They're pretty

00:15:42.120 --> 00:15:46.800
simple. I'm keeping track more or less with
the data track--check-ins that [INDISTINCT]

00:15:46.800 --> 00:15:54.339
is doing for the file assistance mechanism,
and then just re-factoring it into its Coherence

00:15:54.339 --> 00:16:08.110
mechanism that's up there. That's it. Lunch
time. Any questions? If anybody--if there's

00:16:08.110 --> 00:16:12.160
any reason to put this somewhere, then I'm
happy to put it somewhere at some point.

00:16:12.160 --> 00:16:15.509
&gt;&gt; Can we--would you[INDISTINCT]the map into
the, you know.

00:16:15.509 --> 00:16:19.500
&gt;&gt; THOMAS: It just needs two. There's two
Java files in the Oracle Coherence.jar and

00:16:19.500 --> 00:16:23.870
then there's a JE which is actually a language
file but other than that...

00:16:23.870 --> 00:16:30.600
&gt;&gt; So to give you [INDISTINCT] that site?
&gt;&gt; THOMAS: Yeah. You could say, yeah.

00:16:30.600 --> 00:16:31.600
&gt;&gt; Cool.
&gt;&gt; THOMAS: Yeah?

00:16:31.600 --> 00:16:36.120
&gt;&gt; [INDISTINCT] strategy in the government,
you were saying [INDISTINCT] there's a lot

00:16:36.120 --> 00:16:49.353
of issues that--with the [INDISTINCT].
&gt;&gt; THOMAS: Right.

00:16:49.353 --> 00:16:50.470
&gt;&gt; [INDISTINCT].
&gt;&gt; THOMAS: Okay. Yes, I mean Coherence is--it's,

00:16:50.470 --> 00:16:57.870
you know, it's a live top tier Oracle product
that goes through full security government

00:16:57.870 --> 00:16:59.180
reviews.
&gt;&gt; [INDISTINCT].

00:16:59.180 --> 00:17:05.610
&gt;&gt; THOMAS: And everything else that we do.
Okay. All right. And if there's any other

00:17:05.610 --> 00:17:09.029
questions--no? Come see me afterwards if you
have any.

00:17:09.029 --> 00:17:10.029
.
&gt;&gt; Cool.

00:17:10.029 --> 00:17:11.029
&gt;&gt; THOMAS: Yeah?
&gt;&gt; [INDISTINCT] strategy in the government,

00:17:11.029 --> 00:17:12.029
you were saying [INDISTINCT] there's a lot
of issues that--with the [INDISTINCT].

00:17:12.029 --> 00:17:13.029
&gt;&gt; THOMAS: Right.
&gt;&gt; [INDISTINCT].

00:17:13.029 --> 00:17:14.029
&gt;&gt; THOMAS: Okay. Yes, I mean Coherence is--it's,
you know, it's a live top tier Oracle product

00:17:14.029 --> 00:17:15.029
that goes through full security government
reviews.

00:17:15.029 --> 00:17:15.030
&gt;&gt; [INDISTINCT].
&gt;&gt;

