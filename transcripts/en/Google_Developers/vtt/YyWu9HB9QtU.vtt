WEBVTT
Kind: captions
Language: en

00:00:02.465 --> 00:00:03.715
CHARLES L. CHEN: Hi, everyone.

00:00:06.010 --> 00:00:09.130
So we're here to talk about
advancing web accessibility

00:00:09.130 --> 00:00:10.610
with ChromeVox.

00:00:10.610 --> 00:00:11.530
I'm Charles Chen.

00:00:11.530 --> 00:00:13.070
I have two of my colleagues
here with

00:00:13.070 --> 00:00:18.230
me, Volker and David.

00:00:18.230 --> 00:00:20.070
You guys want to say
hi to everyone?

00:00:20.070 --> 00:00:20.730
VOLKER SORGE: Hello.

00:00:20.730 --> 00:00:22.170
DAVID TSENG: Hi, everyone.

00:00:22.170 --> 00:00:23.290
CHARLES L. CHEN: OK.

00:00:23.290 --> 00:00:24.540
So let's get started.

00:00:27.480 --> 00:00:29.450
Here's a brief overview
of what we'll be

00:00:29.450 --> 00:00:30.780
talking about today.

00:00:30.780 --> 00:00:34.240
Stat off with an introduction
about what is ChromeVox.

00:00:34.240 --> 00:00:38.280
David will take you on a
walk through the DOM.

00:00:38.280 --> 00:00:40.870
Volker will discuss
reading math.

00:00:40.870 --> 00:00:43.970
I will talk about how to use
ChromeVox APIs in your own

00:00:43.970 --> 00:00:46.120
applications and web apps.

00:00:46.120 --> 00:00:48.470
And then we'll have a conclusion
to sum up what

00:00:48.470 --> 00:00:49.720
we've talked about.

00:00:49.720 --> 00:00:53.700
So with that, what
is ChromeVox?

00:00:53.700 --> 00:00:56.960
Well, ChromeVox is a screen
reader for Chrome which brings

00:00:56.960 --> 00:01:01.600
the speed, versatility, and
security of Chrome to

00:01:01.600 --> 00:01:04.170
visually-impaired users.

00:01:04.170 --> 00:01:06.860
What's special about ChromeVox
is that we built all of this

00:01:06.860 --> 00:01:11.320
with web technologies, such
as HTML5 and JavaScript.

00:01:11.320 --> 00:01:14.250
So there's no impedance
mismatch between what

00:01:14.250 --> 00:01:18.610
ChromeVox does and the rest of
the web and your web apps.

00:01:18.610 --> 00:01:22.040
This allows us to advance
accessibility at the same rate

00:01:22.040 --> 00:01:26.190
as all of you innovate and
create new exciting web

00:01:26.190 --> 00:01:29.160
applications and really push
the boundaries of what is

00:01:29.160 --> 00:01:31.810
possible to do inside
the browser.

00:01:31.810 --> 00:01:34.790
There are huge benefits for end
users and web developers.

00:01:34.790 --> 00:01:37.420
For end users, you get a screen
reader that's built

00:01:37.420 --> 00:01:38.950
into your system.

00:01:38.950 --> 00:01:41.770
On any Chrome OS machine, you
just press Control-C, and it

00:01:41.770 --> 00:01:42.560
will start talking.

00:01:42.560 --> 00:01:44.060
So it's right there.

00:01:44.060 --> 00:01:46.160
It's also available
on desktops.

00:01:46.160 --> 00:01:49.810
And for web developers, you get
something really unique.

00:01:49.810 --> 00:01:53.110
You have a screen reader that
works inside your browser that

00:01:53.110 --> 00:01:55.430
fits with your development
workflow.

00:01:55.430 --> 00:01:59.120
You can do some work, run
ChromeVox on it, and then

00:01:59.120 --> 00:02:01.550
listen to it and see what
it sounds like.

00:02:01.550 --> 00:02:04.220
Because it is built with web
technologies, there isn't any

00:02:04.220 --> 00:02:07.620
sort of mismatch between what
you would expect, in terms of

00:02:07.620 --> 00:02:11.390
you can do with JavaScript and
the underlying platform.

00:02:11.390 --> 00:02:14.020
The underlying platform
is JavaScript and web.

00:02:14.020 --> 00:02:17.590
So any time you want to do
something that's custom, there

00:02:17.590 --> 00:02:18.630
is a way for you to do it.

00:02:18.630 --> 00:02:23.420
And we've opened up several APIs
to help you create better

00:02:23.420 --> 00:02:25.940
auditory experiences
on the web.

00:02:28.550 --> 00:02:32.320
And with that, I will now hand
it over to David, who will

00:02:32.320 --> 00:02:37.538
give us an overview of how
you walk through the DOM.

00:02:37.538 --> 00:02:39.740
Probably just a little bit
to your right, OK?

00:02:39.740 --> 00:02:40.125
OK.

00:02:40.125 --> 00:02:41.330
Perfect.

00:02:41.330 --> 00:02:42.940
DAVID TSENG: Thanks, Charles.

00:02:42.940 --> 00:02:44.390
Good evening, everyone.

00:02:44.390 --> 00:02:45.900
My name is David Tseng.

00:02:45.900 --> 00:02:49.490
I'm a software engineer on
the Accessibility Team.

00:02:49.490 --> 00:02:53.700
I work on ChromeVox
and Chrome OS.

00:02:53.700 --> 00:02:58.010
So tonight I'm going to give
you a behind the scenes

00:02:58.010 --> 00:03:03.200
insider look at how ChromeVox
works under the hood.

00:03:03.200 --> 00:03:08.150
So as you can see above on the
slide, to the left you have a

00:03:08.150 --> 00:03:10.330
pretty innocent looking
piece of markup.

00:03:10.330 --> 00:03:12.080
It's pretty simple.

00:03:12.080 --> 00:03:17.210
And unordered list of links and
an editable text, input

00:03:17.210 --> 00:03:20.510
type equals text,
and a button.

00:03:20.510 --> 00:03:24.780
So if you ask yourself, well,
how does a screen reading

00:03:24.780 --> 00:03:28.150
actually take something like
this and generate a

00:03:28.150 --> 00:03:32.350
description and make it possible
for a keyboard-only

00:03:32.350 --> 00:03:35.960
user, or someone who doesn't
see the screen, to explore

00:03:35.960 --> 00:03:37.610
this content?

00:03:37.610 --> 00:03:41.530
How does someone do that?

00:03:41.530 --> 00:03:44.810
I can take you through some
alternatives and how ChromeVox

00:03:44.810 --> 00:03:46.470
actually does it.

00:03:46.470 --> 00:03:49.650
So you can imagine, I could
just take all of the text

00:03:49.650 --> 00:03:54.620
content inside of the
unordered list

00:03:54.620 --> 00:03:56.620
and just speak it.

00:03:56.620 --> 00:03:59.940
So the problem with that is we
don't get any of the semantics

00:03:59.940 --> 00:04:04.850
such as this is a list and
these are some links.

00:04:04.850 --> 00:04:08.100
So that's probably
not a good idea.

00:04:08.100 --> 00:04:12.830
How about, say, let's let the
user move from the structure

00:04:12.830 --> 00:04:18.149
of this markup, so we can
imagine a system where we let

00:04:18.149 --> 00:04:22.760
the user land on the unordered
list, let them move down into

00:04:22.760 --> 00:04:27.280
the links and move about in the
links and move out, then

00:04:27.280 --> 00:04:30.760
go to, say, the editable
text field.

00:04:30.760 --> 00:04:33.620
That's a little closer to
what ChromeVox does.

00:04:33.620 --> 00:04:36.500
So what it actually
does ChromeVox do?

00:04:36.500 --> 00:04:42.230
Well, we centered around and
we converged on the idea of

00:04:42.230 --> 00:04:44.180
granularity.

00:04:44.180 --> 00:04:47.540
Let me define what
a granularity is.

00:04:47.540 --> 00:04:54.090
A granularity consists of two
things, some notion of what a

00:04:54.090 --> 00:04:58.380
leaf node is, so how deep did we
go in this tree structure,

00:04:58.380 --> 00:05:05.070
and what it means to go to
a next or previous item.

00:05:05.070 --> 00:05:09.750
I'll go ahead and show you what
our base granularity is,

00:05:09.750 --> 00:05:11.540
which we call Object.

00:05:11.540 --> 00:05:16.960
Now for this, we actually define
a leaf node as any sort

00:05:16.960 --> 00:05:21.560
of interesting element, such
as a link or a button or an

00:05:21.560 --> 00:05:23.200
editable text field.

00:05:23.200 --> 00:05:27.470
and the next or previous item
just as one of these

00:05:27.470 --> 00:05:28.650
interesting items.

00:05:28.650 --> 00:05:33.340
So with that, I'm going to go
ahead and enable ChromeVox and

00:05:33.340 --> 00:05:36.910
show you what it's like to
navigate in this very

00:05:36.910 --> 00:05:39.340
sequential fashion.

00:05:39.340 --> 00:05:42.702
CHROMEVOX VOICE: Enabling
spoken feedback.

00:05:42.702 --> 00:05:44.360
Article list with four items.

00:05:44.360 --> 00:05:46.270
Web, link list item.

00:05:46.270 --> 00:05:48.790
DAVID TSENG: So this is the
first interesting item.

00:05:48.790 --> 00:05:53.620
And you'll notice that ChromeVox
said article and the

00:05:53.620 --> 00:05:59.420
text of the link and the role,
link, and played an earcon,

00:05:59.420 --> 00:06:02.830
which is analogous to an
icon, just a sound

00:06:02.830 --> 00:06:05.300
representing some concept.

00:06:05.300 --> 00:06:09.650
So the article, which you heard,
is the context, which

00:06:09.650 --> 00:06:14.790
means that this markup was
surrounded by something that

00:06:14.790 --> 00:06:17.345
was an article, an audio role.

00:06:17.345 --> 00:06:18.220
All right.

00:06:18.220 --> 00:06:22.335
So if I continue navigating,
I'll end up on another link

00:06:22.335 --> 00:06:24.330
CHROMEVOX VOICE: Maps,
link list item.

00:06:24.330 --> 00:06:25.890
DAVID TSENG: And another link.

00:06:25.890 --> 00:06:28.300
CHROMEVOX VOICE: Images,
link list item.

00:06:28.300 --> 00:06:30.020
Gmail, link list item.

00:06:30.020 --> 00:06:31.100
Google.

00:06:31.100 --> 00:06:34.050
DAVID TSENG: And that's
actually a paragraph.

00:06:34.050 --> 00:06:39.860
So that's a basic introduction
to one of our first

00:06:39.860 --> 00:06:41.800
granularities, object.

00:06:41.800 --> 00:06:45.010
So what are some other
interesting granularities?

00:06:45.010 --> 00:06:49.610
Well, we also have defined
a character granularity.

00:06:49.610 --> 00:06:52.920
And using that definition
I just gave you,

00:06:52.920 --> 00:06:53.720
what does it mean?

00:06:53.720 --> 00:06:58.680
Well, it just means that the
leaf node is now a text node,

00:06:58.680 --> 00:07:02.140
and the next and previous items
are just the next and

00:07:02.140 --> 00:07:06.010
previous characters within
that text node.

00:07:06.010 --> 00:07:09.450
So I have a command in ChromeVox
that says Change

00:07:09.450 --> 00:07:10.570
Granularities.

00:07:10.570 --> 00:07:11.110
CHROMEVOX VOICE: [INAUDIBLE]

00:07:11.110 --> 00:07:18.070
character, G, O, O,
G, L, E. Echo.

00:07:18.070 --> 00:07:20.930
DAVID TSENG: I was able to scan
that text node just by

00:07:20.930 --> 00:07:23.020
walking through the
characters.

00:07:23.020 --> 00:07:26.800
And you also heard a nice
feature of ChromeVox that does

00:07:26.800 --> 00:07:29.220
a phonetic map for
the letters.

00:07:29.220 --> 00:07:34.310
So if there's any ambiguity in
the text-to-speech, such as an

00:07:34.310 --> 00:07:37.740
engine that doesn't have the
clearest announcement of

00:07:37.740 --> 00:07:42.670
characters, we can give users
another hint after a little

00:07:42.670 --> 00:07:48.290
bit of a pause and speak the
word that phonetically can

00:07:48.290 --> 00:07:50.430
describe that character.

00:07:50.430 --> 00:07:54.540
So we have some other
granularities, the usual ones

00:07:54.540 --> 00:07:57.280
that you would expect,
word and line.

00:07:57.280 --> 00:08:01.270
So those are interesting
because they break on

00:08:01.270 --> 00:08:02.520
different delimiters.

00:08:02.520 --> 00:08:06.450
And so the next and previous
definition of the granularity

00:08:06.450 --> 00:08:11.000
is the only thing that we
need to change there.

00:08:11.000 --> 00:08:13.810
Beyond these basic
granularities, ChromeVox

00:08:13.810 --> 00:08:16.570
supports tables.

00:08:16.570 --> 00:08:21.220
And we're able to get the
tables to fit into this

00:08:21.220 --> 00:08:26.520
definition by saying, OK, next
and previous are rows, and

00:08:26.520 --> 00:08:32.730
leaf nodes are just the
rows' items elements.

00:08:32.730 --> 00:08:37.330
And finally, we have some
interesting developments that

00:08:37.330 --> 00:08:42.450
just got released with ChromeVox
27, which was just

00:08:42.450 --> 00:08:44.830
put up on the web store,
that knows how to

00:08:44.830 --> 00:08:46.650
deal with math content.

00:08:46.650 --> 00:08:52.252
And with that, I will invite
Volker Sorge to talk more on

00:08:52.252 --> 00:08:52.950
that subject.

00:08:52.950 --> 00:08:54.200
VOLKER SORGE: Thank you
very much, David.

00:08:58.800 --> 00:09:01.810
CHROMEVOX VOICE: Disabling
spoken feedback.

00:09:01.810 --> 00:09:03.465
VOLKER SORGE: So my name
is Volker Sorge.

00:09:03.465 --> 00:09:06.010
I'm actually a Senior Lecturer
at the University of

00:09:06.010 --> 00:09:07.910
Birmingham in the UK.

00:09:07.910 --> 00:09:11.240
But I'm spending a year working
with the ChromeVox

00:09:11.240 --> 00:09:17.740
team here in California in
order to work on getting

00:09:17.740 --> 00:09:22.450
mathematics spoken with
the ChromeVox engine.

00:09:22.450 --> 00:09:28.460
And it is a sad fact that what
is still the biggest obstacle

00:09:28.460 --> 00:09:30.850
for a fully inclusive
education for

00:09:30.850 --> 00:09:33.860
visually-impaired students is
that much of the scientific

00:09:33.860 --> 00:09:36.610
content that's available out
there is practically

00:09:36.610 --> 00:09:37.750
inaccessible.

00:09:37.750 --> 00:09:42.040
So at the ChromeVox team, we've
realized this, and we're

00:09:42.040 --> 00:09:45.290
trying to make some way towards
making some of this

00:09:45.290 --> 00:09:49.120
content accessible by at least
making the mathematics that

00:09:49.120 --> 00:09:53.895
can be found on the web out
there accessible via a screen

00:09:53.895 --> 00:09:54.640
reader

00:09:54.640 --> 00:09:58.130
And as a consequence, we
implemented aural rendering

00:09:58.130 --> 00:10:01.090
for mathematical content
in ChromeVox.

00:10:01.090 --> 00:10:04.260
And if you're not familiar how
math really works on the web,

00:10:04.260 --> 00:10:08.640
math is generally given in
MathML format, or it's being

00:10:08.640 --> 00:10:12.800
rendered from either MathML or
other formats using MathJax.

00:10:12.800 --> 00:10:16.790
And with ChromeVox, we can now
deal with both types of

00:10:16.790 --> 00:10:19.010
mathematical content
that's on the web.

00:10:19.010 --> 00:10:24.170
As a consequence, spoken math
is now supported on all

00:10:24.170 --> 00:10:26.330
platforms that support Chrome.

00:10:26.330 --> 00:10:29.670
So if you were within a Chrome
browser, you can use ChromeVox

00:10:29.670 --> 00:10:31.430
in order to have math spoken.

00:10:31.430 --> 00:10:33.740
And what might be particularly
interesting for developers, of

00:10:33.740 --> 00:10:37.910
course, is that if you're, for
instance, developing the Epub3

00:10:37.910 --> 00:10:41.460
reader, you can leverage all the
work we put into ChromeVox

00:10:41.460 --> 00:10:43.540
using the WebViews interface.

00:10:43.540 --> 00:10:46.050
And thereby, for instance, have
spoken math on Android

00:10:46.050 --> 00:10:49.440
tablets or smartphones.

00:10:49.440 --> 00:10:50.310
Right.

00:10:50.310 --> 00:10:53.990
So let me dive into the details
a bit, how math is

00:10:53.990 --> 00:10:55.120
actually being rendered.

00:10:55.120 --> 00:10:57.950
Usually, it's rendered more
beautiful than this.

00:10:57.950 --> 00:11:02.170
And I'll just tell you
why this is the case.

00:11:02.170 --> 00:11:02.620
Here.

00:11:02.620 --> 00:11:04.550
This is how math is
being rendered.

00:11:04.550 --> 00:11:07.370
And you might recall
this equation.

00:11:07.370 --> 00:11:09.350
This is the solution to the
quadratic equation.

00:11:09.350 --> 00:11:12.150
Actually, it's two solutions.

00:11:12.150 --> 00:11:17.050
And the way it's being given
generally on the web is by

00:11:17.050 --> 00:11:19.210
using a MathML markup
language.

00:11:19.210 --> 00:11:23.420
MathML, as you can see on the
left of this slide, is a

00:11:23.420 --> 00:11:26.290
fairly straightforward XML
representation of what you

00:11:26.290 --> 00:11:29.190
have up there as the
mathematical formula.

00:11:29.190 --> 00:11:32.550
So you can fairly easily map
those, the x to the x and the

00:11:32.550 --> 00:11:33.550
equals to the equals.

00:11:33.550 --> 00:11:37.030
And then you have kind of a
structured tree representation

00:11:37.030 --> 00:11:40.030
of what the math formula
is there.

00:11:40.030 --> 00:11:43.810
Unfortunately, not every
browser renders MathML

00:11:43.810 --> 00:11:44.700
straight away.

00:11:44.700 --> 00:11:48.190
And as a consequence, there's
a tool out there, which is

00:11:48.190 --> 00:11:51.810
called MathJax, which
can render math in

00:11:51.810 --> 00:11:54.780
all browsers similarly.

00:11:54.780 --> 00:11:57.920
And as a matter of fact, on this
slide actually we used

00:11:57.920 --> 00:11:59.520
MathJax to render the slide.

00:11:59.520 --> 00:12:02.560
And notice the little hiccup
we had in the beginning

00:12:02.560 --> 00:12:04.510
because the rendering sometimes
breaks a bit and you

00:12:04.510 --> 00:12:07.440
have to do a little reload.

00:12:07.440 --> 00:12:09.430
So on the right-hand side of
the slide you see how,

00:12:09.430 --> 00:12:11.990
actually the MathJax
looks like.

00:12:11.990 --> 00:12:14.330
So if you have, for instance,
the MathML in your DOM

00:12:14.330 --> 00:12:18.050
originally, then MathJax will
replace it in the live DOM in

00:12:18.050 --> 00:12:21.310
your browser with the
right-hand side.

00:12:21.310 --> 00:12:25.390
And then you see immediately
this is a lot less obvious

00:12:25.390 --> 00:12:28.110
what the mapping between the
actual elements of the

00:12:28.110 --> 00:12:33.180
mathematical formula is, as a
lot of it is obscured by some

00:12:33.180 --> 00:12:37.060
of the markup that is necessary
for the rendering.

00:12:37.060 --> 00:12:38.310
All right?

00:12:38.310 --> 00:12:42.270
Nevertheless, within ChromeVox,
we can speak both

00:12:42.270 --> 00:12:45.880
MathML and MathJax similarly.

00:12:45.880 --> 00:12:49.350
So the aural rendering is then
done normally doing the text

00:12:49.350 --> 00:12:50.730
navigation.

00:12:50.730 --> 00:12:53.670
And I'll show you how
this then sounds.

00:12:53.670 --> 00:12:56.820
Let me switch on the ChromeVox
engine again.

00:12:56.820 --> 00:12:58.890
CHROMEVOX VOICE: Enabling
spoken feedback.

00:12:58.890 --> 00:13:01.640
VOLKER SORGE: And now we go to
the next math expression.

00:13:01.640 --> 00:13:05.170
CHROMEVOX VOICE: x equals minus
b plus/minus square root

00:13:05.170 --> 00:13:08.880
of b squared minus 4ac
divided by 2a.

00:13:08.880 --> 00:13:10.130
Math.

00:13:12.150 --> 00:13:12.490
VOLKER SORGE: Right.

00:13:12.490 --> 00:13:15.440
And so this is how it's being
pronounced while it's in

00:13:15.440 --> 00:13:16.830
regular text.

00:13:16.830 --> 00:13:19.780
So you can hear we are playing
a bit here with certain

00:13:19.780 --> 00:13:22.630
changes of the speech.

00:13:22.630 --> 00:13:26.790
For instance, we're changing the
rate and the pitch when we

00:13:26.790 --> 00:13:31.020
go into the nesting of, say,
the square root or of the

00:13:31.020 --> 00:13:32.590
numerator of the division.

00:13:32.590 --> 00:13:35.310
Also, we change the pitch
when we go into sub and

00:13:35.310 --> 00:13:35.770
superscript.

00:13:35.770 --> 00:13:39.080
As a consequence, you can hear
where the square root actually

00:13:39.080 --> 00:13:42.640
ends and where then the
division starts again.

00:13:46.810 --> 00:13:52.150
Nevertheless, in many cases this
might be too fast for you

00:13:52.150 --> 00:13:54.950
when you actually listen to this
expression, particularly

00:13:54.950 --> 00:13:58.540
if it's a very large
expression.

00:13:58.540 --> 00:14:02.730
What you then would like to
do and what we provide--

00:14:02.730 --> 00:14:05.550
CHROMEVOX VOICE: Disabling
spoken feedback.

00:14:05.550 --> 00:14:07.430
VOLKER SORGE: Let me switch
off feedback first.

00:14:07.430 --> 00:14:10.850
What you then would like to do
is actually start exploring

00:14:10.850 --> 00:14:13.230
the mathematical expression
a bit further.

00:14:13.230 --> 00:14:16.990
And indeed, in ChromeVox we now
provide some functionality

00:14:16.990 --> 00:14:19.150
in order to do this.

00:14:19.150 --> 00:14:21.870
So what you could hear
originally when you listened

00:14:21.870 --> 00:14:26.000
to the formula is that it's
being announced as a math

00:14:26.000 --> 00:14:27.180
expression.

00:14:27.180 --> 00:14:28.430
CHROMEVOX VOICE: Enabling
spoken feedback.

00:14:33.780 --> 00:14:45.770
x equals minus b plus/minus
square root of b squared minus

00:14:45.770 --> 00:14:48.250
4ac divided by 2a.

00:14:48.250 --> 00:14:49.000
Math.

00:14:49.000 --> 00:14:49.360
VOLKER SORGE: Right.

00:14:49.360 --> 00:14:50.740
Now it announced math.

00:14:50.740 --> 00:14:52.800
Now we know we have a math
expression under our cursor,

00:14:52.800 --> 00:14:53.360
effectively.

00:14:53.360 --> 00:14:56.350
And now we can actually explore
it, if we want to.

00:14:56.350 --> 00:15:00.490
So let's start exploring it.

00:15:00.490 --> 00:15:02.210
That's ChromeVox backslash.

00:15:02.210 --> 00:15:03.082
CHROMEVOX VOICE: Entered math.

00:15:03.082 --> 00:15:03.520
[EARCON SOUND]

00:15:03.520 --> 00:15:05.910
x equals minus b plus/minus--

00:15:05.910 --> 00:15:07.600
VOLKER SORGE: I'll stop
that speaking here.

00:15:07.600 --> 00:15:09.730
But you could hear a little
earcon that tells you now

00:15:09.730 --> 00:15:10.980
we've ended the math
expression.

00:15:10.980 --> 00:15:12.940
Now we can start exploring it.

00:15:12.940 --> 00:15:15.010
And you can now start exploring
it just regularly

00:15:15.010 --> 00:15:16.180
with your cursor keys.

00:15:16.180 --> 00:15:17.030
CHROMEVOX VOICE: x equals-- x.

00:15:17.030 --> 00:15:17.380
VOLKER SORGE: All right?

00:15:17.380 --> 00:15:19.340
So we can start the first
thing and then--

00:15:19.340 --> 00:15:19.880
CHROMEVOX VOICE: Sticky--

00:15:19.880 --> 00:15:20.820
Customizing Math.

00:15:20.820 --> 00:15:21.195
VOLKER SORGE: Oops.

00:15:21.195 --> 00:15:22.320
Now I've made a mistake here.

00:15:22.320 --> 00:15:23.450
Sorry about that.

00:15:23.450 --> 00:15:25.926
CHROMEVOX VOICE: Disabling
spoken feedback.

00:15:25.926 --> 00:15:28.120
VOLKER SORGE: Let's go back.

00:15:28.120 --> 00:15:29.370
CHROMEVOX VOICE: Enabling
spoken feedback.

00:15:32.790 --> 00:15:32.860
[EARCON SOUND]

00:15:32.860 --> 00:15:36.580
Wrap to top. x equals.

00:15:36.580 --> 00:15:37.530
VOLKER SORGE: Let's enter
the expression again.

00:15:37.530 --> 00:15:38.250
CHROMEVOX VOICE: Entered math.

00:15:38.250 --> 00:15:38.430
[EARCON SOUND]

00:15:38.430 --> 00:15:40.130
x equals minus--

00:15:53.660 --> 00:15:57.290
x equals minus b plus/minus
square root

00:15:57.290 --> 00:15:58.080
of b squared minus--

00:15:58.080 --> 00:15:58.185
VOLKER SORGE: OK.

00:15:58.185 --> 00:15:59.430
I'll try this one time.

00:15:59.430 --> 00:16:02.845
I hope this time it's
going to work.

00:16:02.845 --> 00:16:03.690
We enter the expression.

00:16:03.690 --> 00:16:06.760
CHROMEVOX VOICE: x equals minus
b plus/minus square root

00:16:06.760 --> 00:16:10.450
of b squared minus 4ac
divided by 2a.

00:16:14.690 --> 00:16:14.760
[EARCON SOUND]

00:16:14.760 --> 00:16:20.134
Wrap to top. x equals
minus b plus/minus--

00:16:20.134 --> 00:16:20.610
[EARCON SOUND]

00:16:20.610 --> 00:16:21.990
Entered math.

00:16:21.990 --> 00:16:23.190
VOLKER SORGE: Now we're in
the math expression.

00:16:23.190 --> 00:16:24.660
CHROMEVOX VOICE: --minus b
plus/minus square root of--

00:16:24.660 --> 00:16:24.970
VOLKER SORGE: Let's
try this again.

00:16:24.970 --> 00:16:26.220
CHROMEVOX VOICE: --b square.

00:16:28.350 --> 00:16:29.740
VOLKER SORGE: Nope.

00:16:29.740 --> 00:16:30.120
I'm sorry.

00:16:30.120 --> 00:16:32.680
This is the effect.

00:16:32.680 --> 00:16:32.950
Sorry.

00:16:32.950 --> 00:16:34.090
That's the demonstration
effect.

00:16:34.090 --> 00:16:36.045
If you come to our Sandbox,
I'll demonstrate

00:16:36.045 --> 00:16:37.450
this to you in detail.

00:16:37.450 --> 00:16:39.830
I'm not quite sure why this
currently doesn't work.

00:16:44.050 --> 00:16:48.560
So the idea is, if I had been
able to show that to you now,

00:16:48.560 --> 00:16:51.580
that you can actually enter the
math expression and then

00:16:51.580 --> 00:16:53.950
start walking the
math expression.

00:16:53.950 --> 00:16:55.650
Currently, this traversal
follows fairly

00:16:55.650 --> 00:16:57.130
the syntactic structure.

00:16:57.130 --> 00:17:02.230
So you can listen to it, x
equals and then the expression

00:17:02.230 --> 00:17:05.920
on the right-hand side
of the equality.

00:17:05.920 --> 00:17:07.810
In the future, what we're
currently working on and what

00:17:07.810 --> 00:17:10.920
will be released soon is that we
have a more systematic way

00:17:10.920 --> 00:17:13.990
of actually exploring the
mathematical expression in a

00:17:13.990 --> 00:17:19.329
particular way to customize
this exploration.

00:17:19.329 --> 00:17:22.119
CHROMEVOX VOICE: x equals
minus b plus/minus.

00:17:22.119 --> 00:17:25.160
x equals minus b plus--

00:17:25.160 --> 00:17:28.710
x equals minus b-- x equals--

00:17:28.710 --> 00:17:29.610
x equals--

00:17:29.610 --> 00:17:30.680
x--

00:17:30.680 --> 00:17:31.015
VOLKER SORGE: Ah.

00:17:31.015 --> 00:17:32.010
There you go.

00:17:32.010 --> 00:17:32.620
Sorry.

00:17:32.620 --> 00:17:34.060
Now we're actually on
the expression.

00:17:34.060 --> 00:17:35.290
Now it actually works.

00:17:35.290 --> 00:17:37.590
CHROMEVOX VOICE: Equals.

00:17:37.590 --> 00:17:39.100
VOLKER SORGE: So now we're
actually exploring the

00:17:39.100 --> 00:17:39.610
expression.

00:17:39.610 --> 00:17:42.240
If you can look, we're exploring
the left-hand side.

00:17:42.240 --> 00:17:42.750
If I go back--

00:17:42.750 --> 00:17:43.020
CHROMEVOX VOICE: x--

00:17:43.020 --> 00:17:43.920
VOLKER SORGE: --x--

00:17:43.920 --> 00:17:44.310
CHROMEVOX VOICE: --equals--

00:17:44.310 --> 00:17:46.070
VOLKER SORGE: --equals--

00:17:46.070 --> 00:17:46.850
CHROMEVOX VOICE: --minus b--

00:17:46.850 --> 00:17:48.180
VOLKER SORGE: Now we get the
right-hand side of the

00:17:48.180 --> 00:17:48.520
expression.

00:17:48.520 --> 00:17:52.440
CHROMEVOX VOICE: --b squared
minus 4ac divided by 2a.

00:17:52.440 --> 00:17:54.350
VOLKER SORGE: And now we can
start exploring further.

00:17:54.350 --> 00:17:55.300
So we get a bit further.

00:17:55.300 --> 00:17:58.360
CHROMEVOX VOICE: Minus b
plus/minus square root of b

00:17:58.360 --> 00:18:00.720
squared minus 4ac.

00:18:00.720 --> 00:18:01.870
VOLKER SORGE: So if you still
haven't fully understood

00:18:01.870 --> 00:18:03.710
what's in the expression,
you can go further.

00:18:03.710 --> 00:18:08.860
CHROMEVOX VOICE: Minus b
plus/minus square root of b

00:18:08.860 --> 00:18:11.000
squared minus 4ac.

00:18:11.000 --> 00:18:12.020
VOLKER SORGE: And now
you can start

00:18:12.020 --> 00:18:13.500
entering the square root.

00:18:13.500 --> 00:18:16.200
CHROMEVOX VOICE: b squared
minus 4ac.

00:18:16.200 --> 00:18:17.850
VOLKER SORGE: And so
on, and so forth.

00:18:17.850 --> 00:18:20.400
So this is the basic idea
of how to explore the

00:18:20.400 --> 00:18:21.320
mathematical expression.

00:18:21.320 --> 00:18:23.220
And as you can see, we followed
pretty much the

00:18:23.220 --> 00:18:24.960
syntactic structure as it is.

00:18:24.960 --> 00:18:28.500
My apologies that I fat fingered
this and it didn't

00:18:28.500 --> 00:18:31.000
work from the beginning.

00:18:31.000 --> 00:18:32.660
Obviously, now we're
in the expression.

00:18:32.660 --> 00:18:34.530
Now we can also leave the
expression again.

00:18:34.530 --> 00:18:35.810
CHROMEVOX VOICE: Cut.

00:18:35.810 --> 00:18:37.540
VOLKER SORGE: And then once
we're outside the expression--

00:18:37.540 --> 00:18:38.700
CHROMEVOX VOICE: Disabling
spoken feedback.

00:18:38.700 --> 00:18:40.810
VOLKER SORGE: --we can then
actually continue working with

00:18:40.810 --> 00:18:42.060
ChromeVox as normal.

00:18:45.950 --> 00:18:48.420
Right.

00:18:48.420 --> 00:18:50.790
Now one of the major things
about mathematics and speaking

00:18:50.790 --> 00:18:56.620
mathematics is, of course, that
it can be very different,

00:18:56.620 --> 00:18:58.690
four depending on the
mathematical domain you're

00:18:58.690 --> 00:19:03.380
working with and also depending
on the particular

00:19:03.380 --> 00:19:06.600
style of mathematics
you're doing.

00:19:06.600 --> 00:19:09.980
As a consequence, we've built
everything in ChromeVox in a

00:19:09.980 --> 00:19:15.670
very customizable fashion,
which means that one can

00:19:15.670 --> 00:19:20.240
contribute to the way
mathematics is spoken.

00:19:20.240 --> 00:19:23.170
Say if you want to work on your
favorite mathematical

00:19:23.170 --> 00:19:26.880
topic and you want ChromeVox to
be able to speak all things

00:19:26.880 --> 00:19:30.140
correctly, then you can
contribute speaking rules for

00:19:30.140 --> 00:19:34.930
the speech engine or for the
ChromeVox engine as well as

00:19:34.930 --> 00:19:36.900
just mappings for separate
characters.

00:19:36.900 --> 00:19:41.040
For instance, here I've put down
a couple of equations on

00:19:41.040 --> 00:19:41.550
the screen.

00:19:41.550 --> 00:19:47.080
One is just a division followed
by a multiplication,

00:19:47.080 --> 00:19:48.870
a divided by b times c.

00:19:48.870 --> 00:19:51.120
And on the right-hand side, if
you're familiar with natural

00:19:51.120 --> 00:19:52.220
deduction calculations--

00:19:52.220 --> 00:19:55.120
some with you might be from
your logic class--

00:19:55.120 --> 00:19:56.940
then this is a natural
deduction.

00:19:56.940 --> 00:19:59.510
And either way, you want it
pronounced differently.

00:19:59.510 --> 00:20:02.630
On the one hand side, you want
it to be pronounced as divided

00:20:02.630 --> 00:20:06.100
by, and the other side you
want it to be pronounced,

00:20:06.100 --> 00:20:11.880
let's say, the second part of
the rules follows from the

00:20:11.880 --> 00:20:13.380
first part of the rule.

00:20:13.380 --> 00:20:17.000
And I've put down the simple
JavaScript functions that

00:20:17.000 --> 00:20:22.770
allow a user or a contributor to
customize our speech rules

00:20:22.770 --> 00:20:28.990
accordingly for the different
expressions that you have.

00:20:28.990 --> 00:20:32.460
In addition to just customizing
them by entering

00:20:32.460 --> 00:20:37.750
effectively different orders
in which things are being

00:20:37.750 --> 00:20:41.120
spoken and entering different
types of strings that are

00:20:41.120 --> 00:20:42.210
being spoken.

00:20:42.210 --> 00:20:45.570
You can also make optional
changes to, say, things like

00:20:45.570 --> 00:20:50.050
pitch, rate, volume, as well as
pausing for effect, as we

00:20:50.050 --> 00:20:52.160
had earlier in the quadratic
rule formula.

00:20:55.690 --> 00:20:55.950
Right.

00:20:55.950 --> 00:20:58.120
This is one way of
customizing it.

00:20:58.120 --> 00:21:02.970
And then how can this actually
be used by people that want to

00:21:02.970 --> 00:21:05.410
develop, say, an Epub3
reader with it?

00:21:05.410 --> 00:21:08.700
Well, we have a fairly easy
way to interface to the

00:21:08.700 --> 00:21:11.480
mathematics as to everything
in ChromeVox.

00:21:11.480 --> 00:21:14.955
And if you just pass a math node
that you come across in

00:21:14.955 --> 00:21:19.270
the DOM at the right level to
ChromeVox, either as MathML or

00:21:19.270 --> 00:21:23.370
as the rendered MathJax in the
DOM, then we have a fairly

00:21:23.370 --> 00:21:26.635
simple API function with which
the note gets spoken.

00:21:26.635 --> 00:21:30.390
And you can leverage all the
machinery that we put into

00:21:30.390 --> 00:21:36.660
ChromeVox in order to speak
mathematics with your own app.

00:21:36.660 --> 00:21:41.660
And the particular API function
here is just syncing

00:21:41.660 --> 00:21:43.700
to the particular math node.

00:21:43.700 --> 00:21:47.190
And there are some other API
functions, which I'll now ask

00:21:47.190 --> 00:21:50.010
Charles to explain to
you in more detail.

00:21:50.010 --> 00:21:52.750
Thank you.

00:21:52.750 --> 00:21:54.090
CHARLES L. CHEN:
Thanks, Volker.

00:21:54.090 --> 00:21:59.590
So we've talked about how
ChromeVox works as well as

00:21:59.590 --> 00:22:02.500
some of the cool new math
features that are coming out.

00:22:02.500 --> 00:22:05.050
Let's see how you can use
ChromeVox in your own web

00:22:05.050 --> 00:22:06.300
application.

00:22:08.190 --> 00:22:09.790
Let me just refresh
this page here.

00:22:14.290 --> 00:22:15.540
OK.

00:22:19.290 --> 00:22:19.940
OK.

00:22:19.940 --> 00:22:22.360
So why would you want to
use ChromeVox APIs?

00:22:22.360 --> 00:22:23.830
Well, these APIs give
you, as the

00:22:23.830 --> 00:22:26.350
developer, a lot of control.

00:22:26.350 --> 00:22:30.310
It helps you to help give
ChromeVox hints about how it

00:22:30.310 --> 00:22:32.710
should be speaking content.

00:22:32.710 --> 00:22:35.430
It lets you give ChromeVox hints
about where the user is

00:22:35.430 --> 00:22:37.140
in your application.

00:22:37.140 --> 00:22:40.180
And the most recent feature that
we added with our last

00:22:40.180 --> 00:22:44.150
release of ChromeVox has been
the ability to get at what the

00:22:44.150 --> 00:22:46.700
user is trying to do on
your web application.

00:22:46.700 --> 00:22:51.770
So for example, on ChromeVox, as
David was showing earlier,

00:22:51.770 --> 00:22:54.240
when you navigate, you can
navigate structurally.

00:22:54.240 --> 00:22:57.750
So you can say, jump to the next
list item, or go to the

00:22:57.750 --> 00:23:00.390
next link, so on and so forth.

00:23:00.390 --> 00:23:06.330
But what if you, as a web
developer, had a web

00:23:06.330 --> 00:23:10.200
application where it had
semantic structure to it but

00:23:10.200 --> 00:23:12.170
that wasn't necessarily
exposed to the user?

00:23:12.170 --> 00:23:15.090
If the user wants to go to the
next heading, your web app may

00:23:15.090 --> 00:23:17.980
be much better equipped to
do that than ChromeVox.

00:23:17.980 --> 00:23:20.980
And so, in ChromeVox, wherever
the user tries to do an

00:23:20.980 --> 00:23:24.440
action, we actually send it to
the underlying web app so that

00:23:24.440 --> 00:23:27.380
the web app gets first
dibs on handling it.

00:23:27.380 --> 00:23:29.830
And so if it can handle it
better, it can do it instead

00:23:29.830 --> 00:23:33.490
of ChromeVox and just pass
the result back.

00:23:33.490 --> 00:23:36.370
There's full documentation
available on this link, and

00:23:36.370 --> 00:23:40.690
these slides will be made
available after I/O. But let's

00:23:40.690 --> 00:23:43.430
go through some code samples of
how you can apply this in

00:23:43.430 --> 00:23:45.560
your applications.

00:23:45.560 --> 00:23:49.980
So one thing that could be
really useful to you as a web

00:23:49.980 --> 00:23:53.870
developer is to be able to
speak custom messages.

00:23:53.870 --> 00:23:55.120
So let's see how this
would sound.

00:23:57.790 --> 00:23:59.910
CHROMEVOX VOICE: Enabling
spoken feedback.

00:23:59.910 --> 00:24:00.810
CHARLES L. CHEN: OK.

00:24:00.810 --> 00:24:04.440
So sometimes you may be doing
something in your web

00:24:04.440 --> 00:24:07.910
application where visually it's
obvious what's happened.

00:24:07.910 --> 00:24:10.830
But it would be useful to give
someone who's using a screen

00:24:10.830 --> 00:24:14.070
reader, such a ChromeVox, an
idea of what you actually did.

00:24:14.070 --> 00:24:18.890
So right now, the code there
is how I am going to make

00:24:18.890 --> 00:24:22.380
ChromeVox speak this
next message.

00:24:22.380 --> 00:24:24.330
CHROMEVOX VOICE: Code
highlighting off.

00:24:24.330 --> 00:24:26.240
Code highlighting enabled.

00:24:26.240 --> 00:24:26.540
CHARLES L. CHEN: OK.

00:24:26.540 --> 00:24:28.300
Code highlighting enabled.

00:24:28.300 --> 00:24:29.630
And when I turn it off--

00:24:29.630 --> 00:24:31.500
CHROMEVOX VOICE: Code
highlighting off.

00:24:31.500 --> 00:24:31.830
CHARLES L. CHEN: OK.

00:24:31.830 --> 00:24:37.010
So as you can see, visually it
was obvious, because the code

00:24:37.010 --> 00:24:39.020
that I had bolded was
immediately highlighted.

00:24:39.020 --> 00:24:40.800
Everything else faded out.

00:24:40.800 --> 00:24:43.170
But it's nice to be able to
auditorial convey that

00:24:43.170 --> 00:24:44.380
information.

00:24:44.380 --> 00:24:47.670
And so all it took was this
one line of code here.

00:24:47.670 --> 00:24:49.790
CHROMEVOX VOICE: Code
highlighting enabled.

00:24:49.790 --> 00:24:52.810
CHARLES L. CHEN: You just call
ChromeVox Api.speak, give it

00:24:52.810 --> 00:24:55.210
this string of text, and
it just speaks it.

00:24:55.210 --> 00:24:56.790
Pretty simple.

00:24:56.790 --> 00:24:58.500
CHROMEVOX VOICE: Speaking
custom messages.

00:24:58.500 --> 00:25:01.530
Heading 3.

00:25:01.530 --> 00:25:03.140
Sticky mode disabled.

00:25:03.140 --> 00:25:04.450
CHARLES L. CHEN: OK.

00:25:04.450 --> 00:25:05.540
CHROMEVOX VOICE:
ChromeVox APIs.

00:25:05.540 --> 00:25:07.270
Speaking custom messages.

00:25:07.270 --> 00:25:09.420
Function speak current slide.

00:25:09.420 --> 00:25:10.970
CHARLES L. CHEN: Now what
you notice there is

00:25:10.970 --> 00:25:12.300
I flipped the slide.

00:25:12.300 --> 00:25:14.940
And it actually started reading
the slide to me.

00:25:14.940 --> 00:25:19.990
So when it did that, this is
another example of using a

00:25:19.990 --> 00:25:23.060
ChromeVox speech APIs
is that you can

00:25:23.060 --> 00:25:24.510
make it speak something.

00:25:24.510 --> 00:25:29.320
And I'm actually beginning to
lose my train of thought here.

00:25:29.320 --> 00:25:30.680
I probably should have
practiced more.

00:25:30.680 --> 00:25:32.940
But this is actually why
it's really cool to

00:25:32.940 --> 00:25:34.010
have speaker notes.

00:25:34.010 --> 00:25:35.890
So let's try that.

00:25:35.890 --> 00:25:38.550
CHROMEVOX VOICE: Show how easy
it was to add these AP is to

00:25:38.550 --> 00:25:41.090
the I/O slide template.

00:25:41.090 --> 00:25:41.480
CHARLES L. CHEN: Oh, yeah.

00:25:41.480 --> 00:25:41.710
OK.

00:25:41.710 --> 00:25:44.330
That's what I'm supposed
to be talking about.

00:25:44.330 --> 00:25:47.480
So as you can see here, when I
press the key command to bring

00:25:47.480 --> 00:25:49.360
up the speaker notes,
it actually spoke

00:25:49.360 --> 00:25:50.790
those notes to me.

00:25:50.790 --> 00:25:52.045
And now if I dismiss them--

00:25:52.045 --> 00:25:52.655
CHROMEVOX VOICE: Notes hidden.

00:25:52.655 --> 00:25:54.270
CHARLES L. CHEN: --it tells
me notes hidden, and it

00:25:54.270 --> 00:25:57.190
synchronizes me back to
the top of my slides.

00:25:57.190 --> 00:25:59.630
On the other hand, if I try this
on a slide where I don't

00:25:59.630 --> 00:26:00.660
have speaker notes--

00:26:00.660 --> 00:26:02.460
CHROMEVOX VOICE:
ChromeVox APIs.

00:26:02.460 --> 00:26:03.720
No notes available.

00:26:03.720 --> 00:26:05.250
CHARLES L. CHEN: --it tells
me no notes available.

00:26:05.250 --> 00:26:09.470
So I was actually pretty lucky
there that I forgot my content

00:26:09.470 --> 00:26:11.520
on the side that has
speaker notes.

00:26:11.520 --> 00:26:12.880
CHROMEVOX VOICE:
ChromeVox APIs.

00:26:12.880 --> 00:26:14.620
Speaking custom messages.

00:26:14.620 --> 00:26:16.420
Func code highlighting
enabled.

00:26:16.420 --> 00:26:16.960
CHARLES L. CHEN: OK.

00:26:16.960 --> 00:26:20.870
And as you to see, again, it's
really simple to do this.

00:26:20.870 --> 00:26:23.370
Again, it's just a simple
ChromeVox API speak.

00:26:23.370 --> 00:26:26.020
By the way, you'll notice that,
in this case, I have a

00:26:26.020 --> 00:26:27.980
couple more arguments
in there.

00:26:27.980 --> 00:26:30.230
And these arguments allow
me to control the voice.

00:26:30.230 --> 00:26:31.810
So if you listen carefully--

00:26:31.810 --> 00:26:34.460
CHROMEVOX VOICE: Show how easy
it was to add these APIs to

00:26:34.460 --> 00:26:36.860
the I/O slide template.

00:26:36.860 --> 00:26:38.320
CHARLES L. CHEN: Notice
how that voice

00:26:38.320 --> 00:26:39.850
was at a lower pitch.

00:26:39.850 --> 00:26:42.750
So that's a way to give the user
a little bit more flavor.

00:26:42.750 --> 00:26:45.210
In this case, it's to indicate
that this in a slide.

00:26:45.210 --> 00:26:48.910
It's speaker note and
not main content.

00:26:48.910 --> 00:26:49.630
CHROMEVOX VOICE: Notes hidden.

00:26:49.630 --> 00:26:51.520
ChromeVox APIs.

00:26:51.520 --> 00:26:54.410
CHARLES L. CHEN: Now another
thing that's useful is if

00:26:54.410 --> 00:26:57.805
you're navigating for your
application and a user wants

00:26:57.805 --> 00:27:01.180
to suddenly investigate more
or try navigating from a

00:27:01.180 --> 00:27:04.030
certain point, it's useful
to synchronize the user's

00:27:04.030 --> 00:27:07.500
position with where
they actually are.

00:27:07.500 --> 00:27:09.560
And ChromeVox makes this
really simple.

00:27:09.560 --> 00:27:15.260
All you have to do is just call
API sync to node, and

00:27:15.260 --> 00:27:17.255
you'll basically tell ChromeVox
that, hey, the user

00:27:17.255 --> 00:27:18.610
is over here right now.

00:27:18.610 --> 00:27:21.060
And it will position them
at the correct spot.

00:27:21.060 --> 00:27:24.580
As I showed earlier in the notes
slide, this is actually

00:27:24.580 --> 00:27:27.310
what allowed me to put myself
back on the heading after the

00:27:27.310 --> 00:27:29.230
user dismissed the
speaker notes.

00:27:29.230 --> 00:27:31.160
So it's great for focused
management.

00:27:31.160 --> 00:27:31.980
And again--

00:27:31.980 --> 00:27:33.740
CHROMEVOX VOICE: Code
highlighting enabled.

00:27:33.740 --> 00:27:34.990
CHARLES L. CHEN: --really
simple there.

00:27:34.990 --> 00:27:37.080
The second parameter just
controls whether or not to

00:27:37.080 --> 00:27:38.600
automatically speak
or if you want to

00:27:38.600 --> 00:27:41.620
speak a custom message.

00:27:41.620 --> 00:27:43.150
CHROMEVOX VOICE:
ChromeVox APIs.

00:27:43.150 --> 00:27:44.850
Handling user navigation.

00:27:44.850 --> 00:27:46.080
Functions--

00:27:46.080 --> 00:27:49.990
CHARLES L. CHEN: Now as I
mentioned earlier, sometimes

00:27:49.990 --> 00:27:52.260
your web application can do
a much better job with

00:27:52.260 --> 00:27:56.480
navigation than ChromeVox,
because it knows its own

00:27:56.480 --> 00:27:57.100
semantic structure.

00:27:57.100 --> 00:28:00.330
In the case of the slides, when
I'm not on a slide, all

00:28:00.330 --> 00:28:02.370
the other content is actually
hidden, so it's

00:28:02.370 --> 00:28:04.200
invisible to ChromeVox.

00:28:04.200 --> 00:28:07.520
So if I were to search for a
next heading without any help

00:28:07.520 --> 00:28:09.380
from the web app, I would
actually fail.

00:28:09.380 --> 00:28:11.380
Because there's only
one heading here.

00:28:11.380 --> 00:28:14.730
But since I give the web app the
ability to respond first,

00:28:14.730 --> 00:28:17.660
you as the web developer
can actually say, wait.

00:28:17.660 --> 00:28:19.650
I know how to deal with this
next heading thing.

00:28:19.650 --> 00:28:21.060
I'm just going to do it.

00:28:21.060 --> 00:28:22.640
It's pretty simple.

00:28:22.640 --> 00:28:26.040
All you have to do is listen
for these ChromeVox events.

00:28:26.040 --> 00:28:28.280
CHROMEVOX VOICE: Code
highlighting enabled.

00:28:28.280 --> 00:28:29.100
CHARLES L. CHEN: So you're
just looking

00:28:29.100 --> 00:28:31.200
for a cvox user event.

00:28:31.200 --> 00:28:34.950
And then it has a detail
object underneath it.

00:28:34.950 --> 00:28:37.270
And if you look at its command,
it tells you exactly

00:28:37.270 --> 00:28:39.660
what the ChromeVox user is
trying to do, and you can

00:28:39.660 --> 00:28:40.750
respond to that.

00:28:40.750 --> 00:28:42.710
And so I'm actually going to
use that to navigate to my

00:28:42.710 --> 00:28:45.496
next slide by going to
the next heading.

00:28:45.496 --> 00:28:47.830
Next heading.

00:28:47.830 --> 00:28:49.490
CHROMEVOX VOICE: Handling
user navigation.

00:28:49.490 --> 00:28:50.010
Heading--

00:28:50.010 --> 00:28:50.330
CHARLES L. CHEN: OK.

00:28:50.330 --> 00:28:53.540
So as you saw there, it jumped
me through that slide and took

00:28:53.540 --> 00:28:56.600
me to the next slide.

00:28:56.600 --> 00:29:00.020
In conclusion, what we covered
in this talk was how you can

00:29:00.020 --> 00:29:03.270
navigate through the DOM with
different granularities and

00:29:03.270 --> 00:29:06.320
how we're using the concept of
granularities to support

00:29:06.320 --> 00:29:08.590
special content, such
as mathematics.

00:29:08.590 --> 00:29:11.900
And we gave you an overview
of how to do this with the

00:29:11.900 --> 00:29:14.030
ChromeVox APIs.

00:29:14.030 --> 00:29:18.700
One thing to note is this
all works on Chrome.

00:29:18.700 --> 00:29:21.370
And as I mentioned before, this
works on web technology.

00:29:21.370 --> 00:29:23.590
So this works on Chrome
in any form.

00:29:23.590 --> 00:29:25.330
This is also available
on Android.

00:29:25.330 --> 00:29:28.300
And it's actually a huge boost
for developers, because now

00:29:28.300 --> 00:29:31.150
you can develop on the desktop,
test it out, and then

00:29:31.150 --> 00:29:33.890
when you run it on Android
you'll get the same effect.

00:29:33.890 --> 00:29:37.690
And these APIs are also
available everywhere.

00:29:37.690 --> 00:29:39.110
In the audience, I actually
see someone

00:29:39.110 --> 00:29:40.480
from IDEAL Group there.

00:29:40.480 --> 00:29:42.030
You can go ahead and wave.

00:29:42.030 --> 00:29:44.820
So they're in our Sandbox,
and they're demoing their

00:29:44.820 --> 00:29:48.750
integration of their Epub reader
with ChromeVox Android.

00:29:48.750 --> 00:29:51.330
And they're taking advantage
of ChromeVox's ability to

00:29:51.330 --> 00:29:55.750
speak math to make their Epub
reader even better.

00:29:55.750 --> 00:29:59.010
We didn't cover in this talk
is that we actually have

00:29:59.010 --> 00:30:00.960
Braille support on Android.

00:30:00.960 --> 00:30:04.130
And we're also working
on it for Chrome.

00:30:04.130 --> 00:30:08.010
There's a lot more complex and
advanced navigation features,

00:30:08.010 --> 00:30:11.170
such as working with tables
sufficiently.

00:30:11.170 --> 00:30:16.060
And then we also have HTML UI
controls, such as date/time

00:30:16.060 --> 00:30:17.310
and media widgets.

00:30:19.580 --> 00:30:20.820
CHROMEVOX VOICE: Less
than thank you.

00:30:20.820 --> 00:30:23.270
CHARLES L. CHEN: The best way
to catch all that extra

00:30:23.270 --> 00:30:25.760
content is to visit
our Sandbox.

00:30:25.760 --> 00:30:28.310
And so please drop by
our Sandbox and come

00:30:28.310 --> 00:30:30.110
to our office hours.

00:30:30.110 --> 00:30:32.470
You can find all of this
information on chromevox.com.

00:30:32.470 --> 00:30:35.260
And all of this code
is open source.

00:30:35.260 --> 00:30:38.440
And these slides will be
available after I/O.

00:30:38.440 --> 00:30:40.580
So with that, I see that
we have about a

00:30:40.580 --> 00:30:41.780
minute left for questions.

00:30:41.780 --> 00:30:43.470
So any questions?

00:30:43.470 --> 00:30:44.720
Please come to the mic.

00:30:51.530 --> 00:30:52.110
Sure.

00:30:52.110 --> 00:30:54.155
AUDIENCE: I have one maybe
silly question.

00:30:54.155 --> 00:30:58.000
But is it possible to
set up a phonetic

00:30:58.000 --> 00:31:00.980
dictionary that you could--

00:31:00.980 --> 00:31:06.040
As we were watching this, the
I/O or the "AP's" instead of

00:31:06.040 --> 00:31:10.080
API, could I just contextually
say, for this period, I want

00:31:10.080 --> 00:31:12.750
you to, when you meet the
word API, use the

00:31:12.750 --> 00:31:15.960
sound API and not AP?

00:31:15.960 --> 00:31:16.230
CHARLES L. CHEN: Yes.

00:31:16.230 --> 00:31:18.780
So that is something that we
definitely want to make it

00:31:18.780 --> 00:31:20.920
easier and have it
work better.

00:31:20.920 --> 00:31:23.530
In general, that's usually an
issue with the text-to-speech

00:31:23.530 --> 00:31:26.880
engine, so you probably don't
want to overcorrect for it.

00:31:26.880 --> 00:31:29.780
That having been said, we do
have the notion of being able

00:31:29.780 --> 00:31:33.740
to tag HTML elements and
nodes with hints.

00:31:33.740 --> 00:31:35.810
It's in the API documentation.

00:31:35.810 --> 00:31:39.380
But you can basically tell
ChromeVox exactly how a node

00:31:39.380 --> 00:31:40.440
should be spoken.

00:31:40.440 --> 00:31:42.460
And this allows you to pull
in additional semantic

00:31:42.460 --> 00:31:45.270
information and speak it
more intelligibly.

00:31:45.270 --> 00:31:49.100
AUDIENCE: Would you be able
to modify a dictionary.

00:31:49.100 --> 00:31:52.810
The problem I've run into in
this situation is you end up

00:31:52.810 --> 00:31:55.210
annotate every single instance,
when it would be

00:31:55.210 --> 00:31:57.400
nice to just be able to have
a dictionary of sounds,

00:31:57.400 --> 00:31:59.820
especially if you're doing
science content.

00:31:59.820 --> 00:32:00.040
CHARLES L. CHEN: Yes.

00:32:00.040 --> 00:32:02.440
So that's why we have the
reading rules from Volker.

00:32:02.440 --> 00:32:03.870
Volker, do you want to
speak more to that?

00:32:03.870 --> 00:32:04.580
VOLKER SORGE: OK.

00:32:04.580 --> 00:32:05.930
Well, for the reading
rules, you can

00:32:05.930 --> 00:32:07.800
effectively annotate things.

00:32:07.800 --> 00:32:10.870
You can effectively annotate
single characters the way you

00:32:10.870 --> 00:32:11.810
want them to be spoken.

00:32:11.810 --> 00:32:13.630
Particularly for certain
mathematical

00:32:13.630 --> 00:32:17.100
symbols, that's important.

00:32:17.100 --> 00:32:20.180
Obviously, in many ways,
it is like a dictionary

00:32:20.180 --> 00:32:23.140
that you can modify.

00:32:23.140 --> 00:32:26.090
It would be ideal if then some
of these things that you

00:32:26.090 --> 00:32:29.710
modify on our end also would be
spoken by the TDS engine,

00:32:29.710 --> 00:32:33.520
which is obviously also a
particular problem with

00:32:33.520 --> 00:32:37.225
English TDS, which is not
necessarily phonetic.

00:32:37.225 --> 00:32:37.720
Yeah.

00:32:37.720 --> 00:32:39.020
But you can do it.

00:32:39.020 --> 00:32:39.060
AUDIENCE: OK.

00:32:39.060 --> 00:32:40.150
Thank you.

00:32:40.150 --> 00:32:41.610
CHARLES L. CHEN: And ma'am,
you had a question?

00:32:41.610 --> 00:32:43.390
AUDIENCE: [INAUDIBLE].

00:32:43.390 --> 00:32:43.800
CHARLES L. CHEN: Similar.

00:32:43.800 --> 00:32:44.960
OK.

00:32:44.960 --> 00:32:46.730
I think we're actually
running out of time.

00:32:46.730 --> 00:32:48.960
So anyone else?

00:32:48.960 --> 00:32:49.830
OK.

00:32:49.830 --> 00:32:51.140
Well, thank you.

00:32:51.140 --> 00:32:52.580
I hope you all enjoyed
this talk.

00:32:52.580 --> 00:32:53.830
Please catch us in a Sandbox.

