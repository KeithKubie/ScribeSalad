WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.310
In this "Android
Tool Time" pro tip,

00:00:02.310 --> 00:00:04.670
I'm going to show you
some Android Studio expert

00:00:04.670 --> 00:00:07.740
tips to keep you in the zone
and increase your productivity.

00:00:07.740 --> 00:00:09.660
[MUSIC PLAYING]

00:00:09.660 --> 00:00:12.180
You're probably already
familiar with some

00:00:12.180 --> 00:00:14.000
of the most common
shortcuts-- turning

00:00:14.000 --> 00:00:16.560
on automatic importing of
unambiguous class names,

00:00:16.560 --> 00:00:18.330
pressing Shift twice
to search everywhere,

00:00:18.330 --> 00:00:22.127
or using Shift-F6 to rename
a variable, method, or class.

00:00:22.127 --> 00:00:24.460
So we'll skip past those and
try something a little more

00:00:24.460 --> 00:00:26.177
nuanced than that.

00:00:26.177 --> 00:00:28.010
Here, I need to change
the duplicated method

00:00:28.010 --> 00:00:29.110
to set latitude.

00:00:29.110 --> 00:00:31.120
I can bring up Auto
Complete to make life easy

00:00:31.120 --> 00:00:32.180
with Control-Space.

00:00:32.180 --> 00:00:34.000
But when I select
the right method,

00:00:34.000 --> 00:00:37.170
it annoyingly inserts a new
method in front of the old one.

00:00:37.170 --> 00:00:40.030
Unless I hit Tab
instead, in which case,

00:00:40.030 --> 00:00:42.780
it'll replace the old
method with the new one.

00:00:42.780 --> 00:00:45.020
Similarly, if I hit
Control-Shift-Space,

00:00:45.020 --> 00:00:47.980
I get only suggestions
of the expected type.

00:00:47.980 --> 00:00:49.820
And after I make the
selection, hitting Tab

00:00:49.820 --> 00:00:51.992
will replace the old value.

00:00:51.992 --> 00:00:53.950
For both Control-Space
and Control-Shift-Space,

00:00:53.950 --> 00:00:55.810
hitting the shortcut
a second time

00:00:55.810 --> 00:00:57.460
will suggest auto
completion options

00:00:57.460 --> 00:01:01.600
based on chained expressions,
collections, lists, and arrays.

00:01:01.600 --> 00:01:04.450
You already know how to navigate
your code using the cursor keys

00:01:04.450 --> 00:01:07.040
and using Alt-Left and
Right to skip across words

00:01:07.040 --> 00:01:09.100
and holding Shift
to select them.

00:01:09.100 --> 00:01:11.000
But did you know
you can use Alt-Up

00:01:11.000 --> 00:01:13.040
to extend your selection
to the next containing

00:01:13.040 --> 00:01:15.720
node and Alt-Down to
correspondingly shrink

00:01:15.720 --> 00:01:16.510
your selection?

00:01:16.510 --> 00:01:20.290
Once selected, use Alt-Shift
Up or Down to move the code.

00:01:20.290 --> 00:01:23.250
Use postfix code completion
to transform an already typed

00:01:23.250 --> 00:01:25.440
expression into another
one, such as creating

00:01:25.440 --> 00:01:27.530
a full loop over a list
or turning an expression

00:01:27.530 --> 00:01:28.630
into an if statement.

00:01:28.630 --> 00:01:31.860
You can use Command-J to see all
the valid postfixes for a given

00:01:31.860 --> 00:01:33.090
context.

00:01:33.090 --> 00:01:34.770
For more complex
patterns, use live

00:01:34.770 --> 00:01:37.060
templates to insert
templated code snippets.

00:01:37.060 --> 00:01:38.780
For example, using
a toast shortcut

00:01:38.780 --> 00:01:40.870
makes it easy to add an
new toast where only need

00:01:40.870 --> 00:01:43.086
to specify the text to display.

00:01:43.086 --> 00:01:44.710
There are dozens of
generic and Android

00:01:44.710 --> 00:01:46.210
specific live
templates, including

00:01:46.210 --> 00:01:48.090
a selection of
logging shortcuts,

00:01:48.090 --> 00:01:50.310
including log M that
inserts the current method

00:01:50.310 --> 00:01:53.880
name and the name and value of
each parameter passed into it.

00:01:53.880 --> 00:01:55.910
Easier log statements
are great for debugging,

00:01:55.910 --> 00:01:57.410
but did you know
you can also set

00:01:57.410 --> 00:02:00.100
conditional breakpoints that can
log the output of expressions?

00:02:04.060 --> 00:02:05.910
It's also possible
to define a custom

00:02:05.910 --> 00:02:10.479
rendering for objects while
you're evaluating expressions

00:02:10.479 --> 00:02:13.777
rather than relying on
their two-string values.

00:02:13.777 --> 00:02:15.860
There are so many handy
features in Android Studio

00:02:15.860 --> 00:02:18.094
that it's easy to forget
all those shortcuts.

00:02:18.094 --> 00:02:19.510
Luckily, you just
need to remember

00:02:19.510 --> 00:02:22.000
one-- Command-Shift-A--
and start typing

00:02:22.000 --> 00:02:23.600
keywords to find them.

00:02:23.600 --> 00:02:25.620
For example, the
Structural Search feature

00:02:25.620 --> 00:02:27.020
lets you search
for code patterns

00:02:27.020 --> 00:02:29.910
without resorting to
regular expressions.

00:02:29.910 --> 00:02:33.280
If you enable Structural Search
Inspection and borrow a mouse,

00:02:33.280 --> 00:02:35.910
you can even provide warnings
around methods and syntax

00:02:35.910 --> 00:02:37.900
that you wish to discourage
within your code.

00:02:42.810 --> 00:02:45.640
Similarly, you can use the
Structural Replace feature

00:02:45.640 --> 00:02:49.200
to find and replace deprecated
code or common anti-patterns.

00:02:49.200 --> 00:02:51.030
And use Structural
Search Inspection here

00:02:51.030 --> 00:02:53.880
to offer a replacement
snippet as a quick fix option.

00:03:01.919 --> 00:03:03.460
There are hundreds
of tips and tricks

00:03:03.460 --> 00:03:06.030
to make your Android
Studio experience faster,

00:03:06.030 --> 00:03:09.130
more productive, and
mostly mouse-free.

00:03:09.130 --> 00:03:11.060
Subscribe to Android
Developers on YouTube

00:03:11.060 --> 00:03:13.780
and tune into "Android Tool
Time" for more Android tool

00:03:13.780 --> 00:03:15.740
time pro tips.

