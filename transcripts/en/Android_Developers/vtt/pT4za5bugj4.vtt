WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.880
[MUSIC PLAYING]

00:00:08.880 --> 00:00:10.990
TODD KERPELMAN: Hello and
welcome to Game On!

00:00:10.990 --> 00:00:12.350
Episode 4.

00:00:12.350 --> 00:00:13.720
I am Todd Kerpelman.

00:00:13.720 --> 00:00:16.650
I'm a developer advocate
here on Play Games.

00:00:16.650 --> 00:00:17.570
HAKURO MATSUDA: Hello.

00:00:17.570 --> 00:00:21.230
My name is Hakuro Matsuda,
Android developer advocate for

00:00:21.230 --> 00:00:22.640
Game Technology.

00:00:22.640 --> 00:00:24.240
TODD KERPELMAN: And today we're
going to be talking

00:00:24.240 --> 00:00:27.510
about OpenGL ES 3.0.

00:00:27.510 --> 00:00:29.420
Before we get into that,
let's jump into

00:00:29.420 --> 00:00:30.520
some news and updates.

00:00:30.520 --> 00:00:33.890
Not a whole lot, this time, in
terms of news and updates.

00:00:33.890 --> 00:00:36.940
Except that we've got more
info on Cloud Save.

00:00:36.940 --> 00:00:40.400
This guy, Tom Fitzgerald, who
happens to be a googler,

00:00:40.400 --> 00:00:44.260
emailed me earlier today and
said, hey, I saw your show--

00:00:44.260 --> 00:00:45.270
so we have at least
one viewer.

00:00:45.270 --> 00:00:47.110
Thanks, Tom.

00:00:47.110 --> 00:00:48.170
--about Cloud Save.

00:00:48.170 --> 00:00:51.600
And I went and added it into
my own HTML5 game.

00:00:51.600 --> 00:00:54.480
And he put up a YouTube video
where he talks about the

00:00:54.480 --> 00:00:56.100
process, shows you his code.

00:00:56.100 --> 00:00:56.860
It's pretty quick.

00:00:56.860 --> 00:00:58.940
It's all of about three
and a half minutes.

00:00:58.940 --> 00:01:01.360
But if you're at all interested
in doing more with

00:01:01.360 --> 00:01:04.150
Cloud Save, particularly in a
web-based game, I encourage

00:01:04.150 --> 00:01:05.390
you to check it out.

00:01:05.390 --> 00:01:07.840
And I suppose this is something
that's important to

00:01:07.840 --> 00:01:10.720
point out, is Cloud Save, it's
not just for mobile games.

00:01:10.720 --> 00:01:14.060
It's also very useful in
a browser-based game.

00:01:14.060 --> 00:01:18.250
Local storage is very
cool for HTML5.

00:01:18.250 --> 00:01:21.730
But it does have the
disadvantage that you,

00:01:21.730 --> 00:01:25.710
basically, can't keep your
storage between browsers or,

00:01:25.710 --> 00:01:28.090
obviously, across different
computers.

00:01:28.090 --> 00:01:29.950
That's why it's called
local storage.

00:01:29.950 --> 00:01:32.680
And so, if you have to deal with
a player that is either

00:01:32.680 --> 00:01:35.430
playing on different browsers,
or on different computers, or

00:01:35.430 --> 00:01:39.500
on a tablet and a computer,
again, look into Cloud Save.

00:01:39.500 --> 00:01:42.440
And you can look into what this
guy, Tom, has done in his

00:01:42.440 --> 00:01:43.730
YouTube video.

00:01:43.730 --> 00:01:47.000
So with that, let's get into
the main subject of today's

00:01:47.000 --> 00:01:49.830
talk and that is OpenGL ES 3.

00:01:49.830 --> 00:01:51.390
Hakuro, you're an expert.

00:01:51.390 --> 00:01:53.010
So I'll let you take it away.

00:01:53.010 --> 00:01:53.880
HAKURO MATSUDA: OK.

00:01:53.880 --> 00:01:59.050
So for today, I'd like to
introduce you to new API

00:01:59.050 --> 00:02:02.950
Android 4.3, OpenGL ES 3.

00:02:02.950 --> 00:02:09.139
OpenGL ES 3 is a superset of
existing OpenGL ES 2, so that

00:02:09.139 --> 00:02:13.440
you can use your existing game
code for OpenGL ES 2 without

00:02:13.440 --> 00:02:15.190
any changes.

00:02:15.190 --> 00:02:19.140
You can adopt some of the
advanced features of OpenGL 3

00:02:19.140 --> 00:02:23.430
and get benefit of
them quite easy.

00:02:23.430 --> 00:02:28.220
In ES 3, it supports multiple
new features, which can be

00:02:28.220 --> 00:02:30.610
categorized into three areas--

00:02:30.610 --> 00:02:35.690
performance, quality,
and flexibility.

00:02:35.690 --> 00:02:40.910
For performance, ES 3 supports
several advanced features such

00:02:40.910 --> 00:02:44.590
as the transform feedback,
geometric instancing,

00:02:44.590 --> 00:02:48.840
occlusion query, and multiple
rendering target.

00:02:48.840 --> 00:02:52.950
The transform feedback is quite
useful feature to the

00:02:52.950 --> 00:02:56.810
math in GPU side rather
than CPU side.

00:02:56.810 --> 00:02:59.320
You can update your vertex
[? performed ?] project

00:02:59.320 --> 00:03:04.180
entries directory based on the
math done at GPU without

00:03:04.180 --> 00:03:07.010
involving any CPU.

00:03:07.010 --> 00:03:12.280
This is good for using the
particle engine, or such as

00:03:12.280 --> 00:03:15.490
the skinning done in GPU
with multiple rendering

00:03:15.490 --> 00:03:17.682
[? targets. ?]

00:03:17.682 --> 00:03:23.070
Also, geometry instancing is
a feature that can render

00:03:23.070 --> 00:03:28.180
multiple instances of geometry
with just one API call with

00:03:28.180 --> 00:03:29.970
different parameters.

00:03:29.970 --> 00:03:33.470
The feature is good for both
CPU and GPU performance,

00:03:33.470 --> 00:03:37.690
because you don't have to
call API multiple times.

00:03:37.690 --> 00:03:42.750
And also, GPU has hardware
support to handle the same

00:03:42.750 --> 00:03:45.240
efficiently.

00:03:45.240 --> 00:03:48.870
For games that render the same
object multiple times, you

00:03:48.870 --> 00:03:50.530
should use that feature.

00:03:53.430 --> 00:03:57.720
Other features, such as MRT,
which can render to multiple

00:03:57.720 --> 00:04:01.770
renderable files at the same
time, and occlusion query,

00:04:01.770 --> 00:04:07.090
which can check GPU if geometry
is visible or not.

00:04:07.090 --> 00:04:13.630
GL also great to reduce both CPU
and GPU load dramatically.

00:04:13.630 --> 00:04:15.450
Let's talk about quality side.

00:04:15.450 --> 00:04:20.250
In ES 3 it supports ETC 2
as the standard texture

00:04:20.250 --> 00:04:22.230
compression format.

00:04:22.230 --> 00:04:26.050
ETC 2 supports the alpha channel
and produces better

00:04:26.050 --> 00:04:30.320
quality for bit part channel,
which is quite smaller than

00:04:30.320 --> 00:04:32.490
regular texture format.

00:04:32.490 --> 00:04:37.310
It replaces ETC 1 and various
other GPU dependent

00:04:37.310 --> 00:04:41.280
formats, like DXT.

00:04:41.280 --> 00:04:44.650
So that you can finally use one
single texture compression

00:04:44.650 --> 00:04:48.616
format in your games
with GL ES 3.

00:04:48.616 --> 00:04:54.190
Also, as an optional feature,
you can have ASTC, Adaptive

00:04:54.190 --> 00:04:57.870
Scalable Texture Compression
format, texture format, that

00:04:57.870 --> 00:05:02.320
is much more advanced and better
quality texture format.

00:05:02.320 --> 00:05:06.360
ASTC is supported in some
GPUs such as Mali GPU.

00:05:09.450 --> 00:05:14.120
ES 3 also supports floating
point textures so that you can

00:05:14.120 --> 00:05:18.425
do real High Dynamic Range
rendering video games,

00:05:18.425 --> 00:05:20.340
not the fake HDR.

00:05:22.940 --> 00:05:27.890
For flexibility side, it
supports features like

00:05:27.890 --> 00:05:32.015
non-power-of-two textures so
that you can have [INAUDIBLE]

00:05:32.015 --> 00:05:37.300
dimension of the textures,
not limited to the

00:05:37.300 --> 00:05:39.380
power-of-two size.

00:05:39.380 --> 00:05:43.890
And it's supports more than
the target format and the

00:05:43.890 --> 00:05:45.976
texture format, as well.

00:05:45.976 --> 00:05:48.600
Also, you can attach depth
for the texture.

00:05:51.500 --> 00:05:58.870
In ES 3, shading language is
also updated to GLSL ES 3.0,

00:05:58.870 --> 00:06:02.700
which support integer and has
new language features.

00:06:05.330 --> 00:06:09.680
So in general, ES 3 supports
comparable features of the

00:06:09.680 --> 00:06:16.230
desktop version of OpenGL 3.1 or
DirectX 10, except support

00:06:16.230 --> 00:06:20.700
of geometry shader which can
produce more triangles after

00:06:20.700 --> 00:06:23.950
vertex shader stage.

00:06:23.950 --> 00:06:29.000
So that with GL ES 3 you can
port your games quite easy to

00:06:29.000 --> 00:06:30.890
mobile port form.

00:06:30.890 --> 00:06:36.890
In performance wise, mobile GPUs
with GL ES 3 support has

00:06:36.890 --> 00:06:41.190
comparable performance range of
low or middle range desktop

00:06:41.190 --> 00:06:46.250
GPU, which is quite surprising
for me, because mobile GPU

00:06:46.250 --> 00:06:49.183
works on 1/10 low-energy
usage.

00:06:52.080 --> 00:06:59.080
Currently, SDK 18 and NDK R9,
both supports GL ES 3.

00:06:59.080 --> 00:07:05.110
And all of Nexus 4, 7,
10 supports GL ES 3.

00:07:05.110 --> 00:07:10.570
Please try new feature set of
GL ES 3, and enjoy them.

00:07:10.570 --> 00:07:11.610
TODD KERPELMAN: Well, cool.

00:07:11.610 --> 00:07:13.920
That all sounds very
exciting to--

00:07:13.920 --> 00:07:14.410
HAKURO MATSUDA: Yes.

00:07:14.410 --> 00:07:16.290
TODD KERPELMAN: --somebody
that likes good

00:07:16.290 --> 00:07:17.760
graphics in my games.

00:07:17.760 --> 00:07:21.970
I wanted to ask about when you
talked about some of the

00:07:21.970 --> 00:07:23.500
performance improvement.

00:07:23.500 --> 00:07:25.850
So geometry instancing,
I think I understand.

00:07:25.850 --> 00:07:30.180
Like if I had 15 cars in my game
that all were essentially

00:07:30.180 --> 00:07:33.105
the same, I would essentially
only define one car model--

00:07:33.105 --> 00:07:33.420
HAKURO MATSUDA: Yes.

00:07:33.420 --> 00:07:35.950
TODD KERPELMAN: --and kind
of save on a whole lot of

00:07:35.950 --> 00:07:39.460
geometry passing by saying, just
reuse this car model in

00:07:39.460 --> 00:07:39.800
multiple places.

00:07:39.800 --> 00:07:44.000
HAKURO MATSUDA: In GL ES 2,
you had to code the API 15

00:07:44.000 --> 00:07:50.190
times in this example, but with
GL ES 3, you can render

00:07:50.190 --> 00:07:53.425
15 cars at one single
API code.

00:07:53.425 --> 00:07:53.920
TODD KERPELMAN: That's cool.

00:07:53.920 --> 00:07:56.930
HAKURO MATSUDA: Yeah, in
Android, basically, API code,

00:07:56.930 --> 00:08:01.520
it's not quite cheap, so that
it's a great performance

00:08:01.520 --> 00:08:02.340
[INAUDIBLE].

00:08:02.340 --> 00:08:02.900
TODD KERPELMAN: Gotcha.

00:08:02.900 --> 00:08:07.630
Now, could I have different
textures or different colors

00:08:07.630 --> 00:08:09.970
on top of these cars and
still take advantage?

00:08:09.970 --> 00:08:10.900
HAKURO MATSUDA: Yes, exactly.

00:08:10.900 --> 00:08:14.470
So you can have different
parameters, like transform

00:08:14.470 --> 00:08:19.270
texture UVs, and any other
parameter can be different by

00:08:19.270 --> 00:08:20.730
model instance.

00:08:20.730 --> 00:08:21.080
TODD KERPELMAN: Gotcha.

00:08:21.080 --> 00:08:24.940
So I feel like at one point
there was a lot of games that

00:08:24.940 --> 00:08:26.800
featured crowd scenes where,
all of a sudden, they were

00:08:26.800 --> 00:08:27.980
drawing a lot of people.

00:08:27.980 --> 00:08:29.770
They're basically taking
advantage of this technique,

00:08:29.770 --> 00:08:32.820
and putting different skins on
the same model so that you get

00:08:32.820 --> 00:08:34.733
the impression of
a lot of people.

00:08:34.733 --> 00:08:35.196
HAKURO MATSUDA: Exactly.

00:08:35.196 --> 00:08:35.830
TODD KERPELMAN: OK.

00:08:35.830 --> 00:08:37.985
Well, that's very clever.

00:08:37.985 --> 00:08:43.059
I still don't quite understand
what transform feedbacks are.

00:08:43.059 --> 00:08:44.800
Is that something you can
explain further, or is that

00:08:44.800 --> 00:08:46.030
really just like--

00:08:46.030 --> 00:08:46.780
HAKURO MATSUDA: Yes.

00:08:46.780 --> 00:08:52.820
So in general, in ES 2, the
transform or GPU method is

00:08:52.820 --> 00:08:54.140
just one way.

00:08:54.140 --> 00:08:57.070
So CPU issues a render
command.

00:08:57.070 --> 00:09:00.150
And the GPU does some
work and render it.

00:09:00.150 --> 00:09:01.300
That was it.

00:09:01.300 --> 00:09:04.890
But in OpenGL ES 3, you
can [? feed back ?]

00:09:04.890 --> 00:09:10.550
the output math of the GPU into
the buffer again, so that

00:09:10.550 --> 00:09:15.200
you can update the geometry
skin or you can update

00:09:15.200 --> 00:09:20.080
particle position inside GPU and
right back to the buffer.

00:09:20.080 --> 00:09:23.920
So that in each way you
can do the math

00:09:23.920 --> 00:09:25.930
completely in the GPU side.

00:09:25.930 --> 00:09:27.080
TODD KERPELMAN: Oh, OK.

00:09:27.080 --> 00:09:29.040
That's starting to make
more sense to me.

00:09:29.040 --> 00:09:33.380
So would that work if I had to,
say, perform the same kind

00:09:33.380 --> 00:09:37.180
of transform in-scale
to multiple objects?

00:09:37.180 --> 00:09:39.700
Could I take advantage of
that feature there?

00:09:39.700 --> 00:09:40.440
HAKURO MATSUDA: Exactly.

00:09:40.440 --> 00:09:42.210
TODD KERPELMAN: OK.

00:09:42.210 --> 00:09:47.340
And MRT, Multiple Render
Targets, is that like the

00:09:47.340 --> 00:09:49.010
feature where I can--

00:09:49.010 --> 00:09:51.160
sometimes in the background
you might see a TV that's

00:09:51.160 --> 00:09:53.180
showing what's going
on in my game?

00:09:53.180 --> 00:09:53.945
Is that that technique or--

00:09:53.945 --> 00:09:58.130
HAKURO MATSUDA: Oh, well, it's
mainly for the multiple paths.

00:09:58.130 --> 00:10:06.480
In GL ES 2, to do the multiple
path rendering effect, you had

00:10:06.480 --> 00:10:11.210
to render the normal at
this path, and the

00:10:11.210 --> 00:10:12.400
color at this path.

00:10:12.400 --> 00:10:15.810
And that's the final gathering
path you need to fetch these,

00:10:15.810 --> 00:10:18.720
then the result, that's the
final gathering path.

00:10:18.720 --> 00:10:24.280
But in the MRT you can output
two different values in two

00:10:24.280 --> 00:10:26.720
different target.

00:10:26.720 --> 00:10:29.890
So that you don't have
to draw same thing

00:10:29.890 --> 00:10:32.600
twice, but just once.

00:10:32.600 --> 00:10:35.970
And at the final gathering
path before the rendering

00:10:35.970 --> 00:10:39.770
path, you can get two result
at the same time.

00:10:39.770 --> 00:10:40.310
TODD KERPELMAN: Gotcha.

00:10:40.310 --> 00:10:46.880
So what techniques would you
see making use of MRT?

00:10:46.880 --> 00:10:50.500
HAKURO MATSUDA: Well, we said,
before the rendering

00:10:50.500 --> 00:10:51.980
technique--

00:10:51.980 --> 00:10:55.560
several parameters of objects
into several buffers, and to

00:10:55.560 --> 00:10:59.200
get that final path, you can
get a great benefit through

00:10:59.200 --> 00:11:02.760
MRT in terms of the
performance.

00:11:02.760 --> 00:11:03.440
TODD KERPELMAN: OK.

00:11:03.440 --> 00:11:04.160
HAKURO MATSUDA: Yes.

00:11:04.160 --> 00:11:04.920
TODD KERPELMAN: OK.

00:11:04.920 --> 00:11:05.710
Well, let's see.

00:11:05.710 --> 00:11:06.690
I think we have--

00:11:06.690 --> 00:11:07.840
let's move on to a demo.

00:11:07.840 --> 00:11:11.230
We've got a cool demo that was
put together by the good folks

00:11:11.230 --> 00:11:12.470
at Silicon Studio.

00:11:12.470 --> 00:11:14.170
I guess this is--

00:11:14.170 --> 00:11:16.820
I don't know if it has a name,
except maybe "Rings and

00:11:16.820 --> 00:11:22.770
Jewels," that we showed off at
the Nexus 7 watch event, just

00:11:22.770 --> 00:11:28.200
last month, that makes use of
some fairly cool ES 3.0

00:11:28.200 --> 00:11:29.220
techniques.

00:11:29.220 --> 00:11:31.770
Let's bring this up.

00:11:31.770 --> 00:11:35.040
This is recorded on a new Nexus
7 device that I think

00:11:35.040 --> 00:11:38.800
Dan said I could keep after
this session is done.

00:11:38.800 --> 00:11:42.440
He's laughing, which
I think means yes.

00:11:42.440 --> 00:11:46.990
So we've got these very
cool shiny rings.

00:11:46.990 --> 00:11:50.900
And I can click this Add button,
and add in a few

00:11:50.900 --> 00:11:53.350
jewels, and they fall down
and knock over the rings.

00:11:53.350 --> 00:11:54.350
And it looks very cool.

00:11:54.350 --> 00:11:57.500
HAKURO MATSUDA: Yeah, physics
simulation in the CPU side.

00:11:57.500 --> 00:11:58.800
It's really cool physics.

00:11:58.800 --> 00:12:01.430
TODD KERPELMAN: Yeah,
it's nice physics.

00:12:01.430 --> 00:12:07.170
So what are we seeing here
that's being done by GL ES 3?

00:12:07.170 --> 00:12:10.700
HAKURO MATSUDA: Well, in GL ES
3 mode, they are using a

00:12:10.700 --> 00:12:14.750
floating texture so that
everything is rendered in the

00:12:14.750 --> 00:12:16.070
high dynamic range.

00:12:16.070 --> 00:12:18.500
TODD KERPELMAN: OK I've noticed
there, there's a

00:12:18.500 --> 00:12:19.000
switch here.

00:12:19.000 --> 00:12:22.570
I can switch ES 3 on and off.

00:12:22.570 --> 00:12:24.460
And I notice, when I turn
it off, there's a

00:12:24.460 --> 00:12:25.390
few things that happen.

00:12:25.390 --> 00:12:28.450
One, you don't get the
nice shine on the

00:12:28.450 --> 00:12:29.720
rings like you do before.

00:12:29.720 --> 00:12:32.040
You get a little bit of lens
flare off the ring

00:12:32.040 --> 00:12:34.070
reflections, and
that goes away.

00:12:34.070 --> 00:12:38.940
I've also noticed the table
texture looks much blurrier.

00:12:38.940 --> 00:12:40.260
What's happening there?

00:12:40.260 --> 00:12:44.255
HAKURO MATSUDA: Right, so in
the fake HDR mode, which is

00:12:44.255 --> 00:12:49.220
with OpenGL ES 2, everything had
to be in the range of the

00:12:49.220 --> 00:12:54.360
0 to 255, which is
1 byte range.

00:12:54.360 --> 00:12:58.840
But in OpenGL ES 3, it can have
the float dynamic range

00:12:58.840 --> 00:13:04.850
so that it can show more
details on everything.

00:13:04.850 --> 00:13:05.250
TODD KERPELMAN: Gotcha.

00:13:05.250 --> 00:13:11.690
And so that's why, when I
turn on the GL ES 3.0--

00:13:11.690 --> 00:13:13.600
we need a cooler code
name for that--

00:13:13.600 --> 00:13:17.030
that's why the table suddenly
looks so much more detailed,

00:13:17.030 --> 00:13:20.290
is we're able to suddenly
spend more--

00:13:20.290 --> 00:13:22.040
basically more data
per pixel on--

00:13:22.040 --> 00:13:23.130
HAKURO MATSUDA: Right,
precisely.

00:13:23.130 --> 00:13:24.810
TODD KERPELMAN: OK.

00:13:24.810 --> 00:13:28.130
I notice something also seems to
be happening with the gems.

00:13:28.130 --> 00:13:28.850
I'm not quite sure.

00:13:28.850 --> 00:13:32.590
Is it somehow doing different
type of refraction?

00:13:32.590 --> 00:13:34.040
HAKURO MATSUDA: Mm-hmm.

00:13:34.040 --> 00:13:38.500
TODD KERPELMAN: When I switch
on and off ES 3.0, I notice

00:13:38.500 --> 00:13:41.170
that there's something that I
can't quite articulate with

00:13:41.170 --> 00:13:43.930
the gems where they look
much better with it on.

00:13:43.930 --> 00:13:46.095
And I don't quite know what's
going on there.

00:13:46.095 --> 00:13:48.540
HAKURO MATSUDA: Basically, it's
also thanks to the high

00:13:48.540 --> 00:13:49.320
dynamic range.

00:13:49.320 --> 00:13:54.510
So the edge of the jewels can
be sharper and the friction

00:13:54.510 --> 00:13:57.030
can be clearer in the GL ES 3.

00:13:57.030 --> 00:13:57.760
TODD KERPELMAN: Gotcha.

00:13:57.760 --> 00:14:00.460
All right, well cool.

00:14:00.460 --> 00:14:03.180
I could play with this for a
long time, but I won't because

00:14:03.180 --> 00:14:05.890
we have other stuff
to do in our show.

00:14:05.890 --> 00:14:07.930
But excellent.

00:14:07.930 --> 00:14:13.230
So let's see-- other Q&amp;A. So
in terms of what devices

00:14:13.230 --> 00:14:18.370
support OpenGL ES 3, you had
mentioned the Nexus 4,

00:14:18.370 --> 00:14:19.470
the new Nexus 7.

00:14:19.470 --> 00:14:20.620
HAKURO MATSUDA: Nexus 7, yes.

00:14:20.620 --> 00:14:22.678
TODD KERPELMAN: And
the Nexus 10.

00:14:22.678 --> 00:14:24.280
Are there other devices
out there?

00:14:24.280 --> 00:14:26.490
How would I know if a
device supports--

00:14:26.490 --> 00:14:30.430
HAKURO MATSUDA: Well, in
general, as of today, GPU from

00:14:30.430 --> 00:14:35.020
Qualcomm, like Adreno
320 and 330 should

00:14:35.020 --> 00:14:36.525
support the GL ES 3.

00:14:36.525 --> 00:14:42.680
Also, GPU from ARM, Mali-T600,
should support the GL ES 3.

00:14:42.680 --> 00:14:46.040
TODD KERPELMAN: OK, well
maybe that brings us

00:14:46.040 --> 00:14:47.020
to our third question.

00:14:47.020 --> 00:14:50.590
So if I'm a developer, and maybe
I want to add in some of

00:14:50.590 --> 00:14:54.440
this OpenGL ES 3 techniques
to my game.

00:14:54.440 --> 00:14:57.800
But at the same time, you
actually want to support a

00:14:57.800 --> 00:15:01.730
large range of devices, what
do you do with your code to

00:15:01.730 --> 00:15:04.650
make sure that you can still--

00:15:04.650 --> 00:15:07.900
basically, to make sure that I
can kind of have an engine

00:15:07.900 --> 00:15:11.060
that looks really nice on the
machines that support it, but

00:15:11.060 --> 00:15:13.843
doesn't crash or something
on the [INAUDIBLE].

00:15:13.843 --> 00:15:15.500
HAKURO MATSUDA: Yeah, that's
a great question.

00:15:15.500 --> 00:15:16.860
TODD KERPELMAN: Thanks.

00:15:16.860 --> 00:15:24.190
HAKURO MATSUDA: Yeah, so as of
today, almost all of the

00:15:24.190 --> 00:15:27.680
Android devices, like 99% of
the devices, supports the

00:15:27.680 --> 00:15:29.340
OpenGL ES 2.

00:15:29.340 --> 00:15:33.510
But just a fraction of a percent
supports the GL ES 3.

00:15:33.510 --> 00:15:35.830
TODD KERPELMAN: That number will
probably grow now that

00:15:35.830 --> 00:15:36.505
we've announced it.

00:15:36.505 --> 00:15:37.470
HAKURO MATSUDA: Yeah, in
the future inevitably.

00:15:37.470 --> 00:15:38.370
That's my hope.

00:15:38.370 --> 00:15:42.680
But as of today, you need to
have the two code per line for

00:15:42.680 --> 00:15:45.910
GL ES 3, and another
one for GL ES 2.

00:15:45.910 --> 00:15:51.980
Also, you can check the
existence of some OpenGL GPU

00:15:51.980 --> 00:15:57.030
extension, so that you can,
even with GL ES 2, you can

00:15:57.030 --> 00:16:01.130
still utilize some of the
advanced feature set available

00:16:01.130 --> 00:16:03.180
for GL ES 3.

00:16:03.180 --> 00:16:05.640
TODD KERPELMAN: So I might,
for instance--

00:16:05.640 --> 00:16:08.100
some hardware manufacturer
might have a chipset that

00:16:08.100 --> 00:16:11.010
officially supports GS 2, but
might support one or two

00:16:11.010 --> 00:16:13.760
features from the OpenGL ES 3?

00:16:13.760 --> 00:16:14.470
HAKURO MATSUDA: Right.

00:16:14.470 --> 00:16:16.560
TODD KERPELMAN: And so that's
something that a developer

00:16:16.560 --> 00:16:18.580
could check on a feature
by feature basis?

00:16:18.580 --> 00:16:19.520
HAKURO MATSUDA: Yeah, exactly.

00:16:19.520 --> 00:16:21.440
So it sounds very complicated.

00:16:21.440 --> 00:16:26.810
But it's kind of like
PC gaming models.

00:16:26.810 --> 00:16:30.430
So in the PC, you need to check
all of the features

00:16:30.430 --> 00:16:35.860
existing to utilize most out of
GPU hardware, so that you

00:16:35.860 --> 00:16:38.600
need to do the same thing
in Android device.

00:16:38.600 --> 00:16:40.210
TODD KERPELMAN: So yeah, it's
really not much different than

00:16:40.210 --> 00:16:43.360
what a lot of PC developers
are already doing today.

00:16:43.360 --> 00:16:44.240
HAKURO MATSUDA: Right.

00:16:44.240 --> 00:16:45.880
TODD KERPELMAN: And maybe that
brings us to our second

00:16:45.880 --> 00:16:48.970
question, which is, I might
decide, as a game developer,

00:16:48.970 --> 00:16:50.150
this sounds like
a lot of work.

00:16:50.150 --> 00:16:52.730
Maybe I'll find an engine
to do this for me.

00:16:52.730 --> 00:16:54.290
Are there other engines
out there that

00:16:54.290 --> 00:16:55.650
support this already?

00:16:55.650 --> 00:16:59.930
HAKURO MATSUDA: Yes, so many
game engines, like Unity and

00:16:59.930 --> 00:17:05.390
the Unreal engine already
support GL ES 3 so that, for

00:17:05.390 --> 00:17:08.349
me, GL ES 3 is really
easy to use.

00:17:08.349 --> 00:17:12.480
But for somebody, it might not,
so that you can still use

00:17:12.480 --> 00:17:17.983
a game engine to support the GL
ES 3 advanced feature set.

00:17:17.983 --> 00:17:19.310
TODD KERPELMAN: OK.

00:17:19.310 --> 00:17:21.790
And I guess, actually,
that might bring up--

00:17:21.790 --> 00:17:23.079
good segue.

00:17:23.079 --> 00:17:27.324
We do have one other demo, which
is the Unity engine.

00:17:27.324 --> 00:17:30.850
And I suppose maybe some of
this really isn't so much

00:17:30.850 --> 00:17:35.400
showing OpenGL ES 3 features so
much as kind of showing how

00:17:35.400 --> 00:17:37.050
nice things look
on the Nexus 7.

00:17:37.050 --> 00:17:40.850
But it sounds like they are
probably doing a fair amount

00:17:40.850 --> 00:17:45.020
of OpenGL ES 3 performance
improvements.

00:17:45.020 --> 00:17:46.510
HAKURO MATSUDA: Yeah, exactly.

00:17:46.510 --> 00:17:47.250
TODD KERPELMAN: We're
going to run this.

00:17:47.250 --> 00:17:51.940
This is called "The Chase." And
I noticed they are showing

00:17:51.940 --> 00:17:54.700
a fair number of features going
on here in terms of

00:17:54.700 --> 00:18:00.400
atmospheric scattering, a four
kilometer draw distance.

00:18:00.400 --> 00:18:01.890
I think they talk about sub--

00:18:01.890 --> 00:18:02.450
yeah.

00:18:02.450 --> 00:18:04.250
HAKURO MATSUDA: Yes.

00:18:04.250 --> 00:18:07.110
They are using a really
high-polygon model.

00:18:07.110 --> 00:18:16.950
And the entire scene, it's
rendering more than 250,000

00:18:16.950 --> 00:18:21.270
polygons in that scene, which
is an incredibly high number

00:18:21.270 --> 00:18:23.740
in terms of mobile gaming.

00:18:23.740 --> 00:18:24.540
TODD KERPELMAN: Yeah,
I mean, this looks

00:18:24.540 --> 00:18:27.500
like a console game.

00:18:27.500 --> 00:18:28.860
HAKURO MATSUDA: Yeah, exactly.

00:18:28.860 --> 00:18:32.330
And also, they are using some
advanced features [INAUDIBLE]

00:18:32.330 --> 00:18:35.520
OpenGL ES 3 for performance
improvement, mainly.

00:18:35.520 --> 00:18:40.140
So that with ES 2 devices,
the demo still works.

00:18:40.140 --> 00:18:46.750
But with ES 3, it can utilize
features like occlusion

00:18:46.750 --> 00:18:51.590
coloring to check if a sign
is visible in the scene.

00:18:51.590 --> 00:18:57.090
And also, it's using geometry
instanced rendering so that it

00:18:57.090 --> 00:19:02.790
can benefit the performance of
the GL ES 3 feature set.

00:19:02.790 --> 00:19:04.040
TODD KERPELMAN: All right,
well that's very cool.

00:19:08.460 --> 00:19:10.590
My biggest complaint with this
demo is, I can't figure out

00:19:10.590 --> 00:19:12.240
who the good guy and
who the bad guy is.

00:19:12.240 --> 00:19:15.970
They both sort of look
kind of sinister.

00:19:15.970 --> 00:19:19.420
They are both shooting in
amongst all the civilian

00:19:19.420 --> 00:19:21.070
traffic, which really
isn't all that safe.

00:19:21.070 --> 00:19:23.290
Maybe neither one is actually
the good guy.

00:19:23.290 --> 00:19:24.490
HAKURO MATSUDA: Maybe.

00:19:24.490 --> 00:19:26.970
TODD KERPELMAN: But I suppose
that's a little off topic.

00:19:26.970 --> 00:19:29.250
So awesome.

00:19:29.250 --> 00:19:30.655
This looks great.

00:19:30.655 --> 00:19:34.265
I can't wait to try out more
games on this device that Dan

00:19:34.265 --> 00:19:34.990
is letting me take home.

00:19:34.990 --> 00:19:36.650
So thanks again, Dan.

00:19:36.650 --> 00:19:41.430
And we'll bring up our final
slide, which is, if you want

00:19:41.430 --> 00:19:47.640
more information about OpenGL
ES 3, this is basically our

00:19:47.640 --> 00:19:50.500
OpenGL page on
developer.android.com.

00:19:50.500 --> 00:19:53.430
HAKURO MATSUDA: Yes, also we are
releasing some more sample

00:19:53.430 --> 00:19:56.450
code for [INAUDIBLE]

00:19:56.450 --> 00:19:57.950
for OpenGL ES 3.

00:19:57.950 --> 00:19:58.970
TODD KERPELMAN: That
would be fantastic.

00:19:58.970 --> 00:19:59.550
HAKURO MATSUDA: Yes.

00:19:59.550 --> 00:20:00.320
TODD KERPELMAN: Awesome.

00:20:00.320 --> 00:20:03.270
All right, well thank you very
much for joining us.

00:20:03.270 --> 00:20:03.640
HAKURO MATSUDA: Thank you.

00:20:03.640 --> 00:20:05.310
TODD KERPELMAN: Thank you out
there for joining us.

00:20:05.310 --> 00:20:08.310
And we will see you in a couple
weeks with our next

00:20:08.310 --> 00:20:09.190
"Game On" session--

00:20:09.190 --> 00:20:10.440
if we don't get cancelled.

