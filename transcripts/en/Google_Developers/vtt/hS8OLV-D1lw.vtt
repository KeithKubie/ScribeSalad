WEBVTT
Kind: captions
Language: en

00:00:00.670 --> 00:00:02.520
LISA WRAY: Hi, I'm Lisa Wray.

00:00:02.520 --> 00:00:05.125
Welcome back to the Google
Fit APIs for Android.

00:00:06.550 --> 00:00:08.370
So in my last
DevByte, I promised

00:00:08.370 --> 00:00:10.165
to show you how to
write a fitness app that

00:00:10.165 --> 00:00:13.150
saves and retrieves user
data without a database

00:00:13.150 --> 00:00:15.000
and without our own back end.

00:00:15.000 --> 00:00:17.430
So in that video, I
showed how to set up

00:00:17.430 --> 00:00:19.360
an app to use the
Fit APIs and how

00:00:19.360 --> 00:00:22.764
to receive sensor data to
play a real time step count.

00:00:22.764 --> 00:00:24.180
If you haven't
watched it already,

00:00:24.180 --> 00:00:26.638
you should probably go see it
now before watching this one.

00:00:28.580 --> 00:00:31.840
The next step for our app is
to save the user's step data

00:00:31.840 --> 00:00:33.630
so they can look at
their records later,

00:00:33.630 --> 00:00:36.990
and this is where the
recording API comes in.

00:00:36.990 --> 00:00:39.660
The recording API
provides automated storage

00:00:39.660 --> 00:00:42.150
of fitness data
using subscriptions.

00:00:42.150 --> 00:00:43.660
Google Fit stores
the fitness data

00:00:43.660 --> 00:00:45.724
that you choose
in the background

00:00:45.724 --> 00:00:47.140
and it persists
app subscriptions.

00:00:48.380 --> 00:00:50.257
Just like for the
sensor API, we need

00:00:50.257 --> 00:00:52.590
to go through all the steps
of connecting to Google Play

00:00:52.590 --> 00:00:55.770
services and requesting
the fitness API in scopes.

00:00:55.770 --> 00:00:57.650
So we get onconnected,
we're good to go.

00:00:58.870 --> 00:01:01.660
The call to subscribe should
look fairly familiar by now.

00:01:01.660 --> 00:01:03.480
The difference is which
API we're calling.

00:01:04.500 --> 00:01:06.450
Subscribing to the
recording API doesn't

00:01:06.450 --> 00:01:09.716
mean we will get call backs to
a listener like the sensor API.

00:01:09.716 --> 00:01:12.090
In fact, you may notice there's
no listener involved here

00:01:12.090 --> 00:01:13.040
at all.

00:01:13.040 --> 00:01:14.970
Instead it means
that Google Fit will

00:01:14.970 --> 00:01:17.080
start recording data
in the background

00:01:17.080 --> 00:01:19.260
and syncing it with the
Cloud Datastore, all

00:01:19.260 --> 00:01:21.400
without any extra work from us.

00:01:21.400 --> 00:01:23.600
When we want it later,
we'll go retrieve it.

00:01:24.920 --> 00:01:26.970
At the end of the
day, the user probably

00:01:26.970 --> 00:01:29.910
wants to see how her day stacked
up against previous ones,

00:01:29.910 --> 00:01:33.620
so we'll use the history API
to retrieve the data that Fit

00:01:33.620 --> 00:01:35.560
has been storing for us.

00:01:35.560 --> 00:01:39.020
The history API provides
access to the fitness history

00:01:39.020 --> 00:01:43.110
and lets apps insert, delete,
and read fitness data.

00:01:43.110 --> 00:01:45.790
Apps can also import batch
data into Google Fit.

00:01:47.340 --> 00:01:50.480
First you need a start and
end for the range of time

00:01:50.480 --> 00:01:52.030
where you want to retrieve data.

00:01:52.030 --> 00:01:54.370
So let's say we're looking
at data from the last week.

00:01:55.420 --> 00:01:59.030
We're asking for the user's
step count bucketed by day.

00:01:59.030 --> 00:02:01.370
We want to know how much
they walked each day

00:02:01.370 --> 00:02:03.530
and within the last week.

00:02:03.530 --> 00:02:05.600
Finally, we'll invoke
the history API

00:02:05.600 --> 00:02:07.480
using read data and our request.

00:02:08.830 --> 00:02:11.190
In a lot of cases, like
subscribing to a sensor

00:02:11.190 --> 00:02:13.640
or adding a listener, the
result comes back instantly,

00:02:13.640 --> 00:02:15.940
so we can wait for the
results synchronously.

00:02:15.940 --> 00:02:17.640
But it's not the case here.

00:02:17.640 --> 00:02:19.240
Fit might need
network communication

00:02:19.240 --> 00:02:21.620
to grab results from
the Cloud Datastore.

00:02:21.620 --> 00:02:24.354
So we set a result callback,
and we wait for the results

00:02:24.354 --> 00:02:25.645
to be delivered asynchronously.

00:02:26.770 --> 00:02:28.880
Because we asked to
aggregate by days,

00:02:28.880 --> 00:02:30.840
our data result will
contain buckets.

00:02:30.840 --> 00:02:33.680
In this case, each bucket
corresponds to one day.

00:02:35.190 --> 00:02:38.630
Each bucket has a data set
containing data points.

00:02:38.630 --> 00:02:40.877
Here's an example of
iterating through data points

00:02:40.877 --> 00:02:42.960
and printing out their
information, like the start

00:02:42.960 --> 00:02:45.740
and end times and the
field value pairs.

00:02:45.740 --> 00:02:47.800
In our case, each
bucket will have

00:02:47.800 --> 00:02:51.480
one data set with one data
point showing the aggregate step

00:02:51.480 --> 00:02:53.020
count for that day.

00:02:53.020 --> 00:02:55.220
So our app could
graph these to show

00:02:55.220 --> 00:02:58.690
how the user's daily step
count changes over time.

00:02:58.690 --> 00:03:00.670
So now we're done.

00:03:00.670 --> 00:03:04.480
Our app shows step count,
records steps, and can retrieve

00:03:04.480 --> 00:03:06.990
fitness data, all
done in our app

00:03:06.990 --> 00:03:08.840
using the Fit APIs for Android.

00:03:10.030 --> 00:03:13.530
This has been just an example
of what the Fit APIs can do.

00:03:13.530 --> 00:03:16.470
Workout sessions, custom
activities, and using

00:03:16.470 --> 00:03:18.230
intends to launch
other apps to show

00:03:18.230 --> 00:03:20.196
fitness data are just
a few possibilities.

00:03:21.830 --> 00:03:24.370
The full API details
are on our website,

00:03:24.370 --> 00:03:25.842
but I'd start with
the Fit samples

00:03:25.842 --> 00:03:27.550
so you can get up and
running right away.

00:03:28.690 --> 00:03:30.770
Thanks for watching,
and I can't wait

00:03:30.770 --> 00:03:33.890
to see what you build
with Google Fit.

