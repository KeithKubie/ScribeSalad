WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.050
So let's say you have
a website, and you also

00:00:03.050 --> 00:00:06.310
built an app for a more
seamless experience on mobile.

00:00:06.310 --> 00:00:08.680
As people share and follow
web links to your content

00:00:08.680 --> 00:00:11.220
on Android, they will
normally see this speed bump

00:00:11.220 --> 00:00:13.780
that we call a
disambiguation dialogue.

00:00:13.780 --> 00:00:16.400
It's shown when the user has
many apps on their device

00:00:16.400 --> 00:00:18.460
which can handle the
same type of link,

00:00:18.460 --> 00:00:21.790
in this case, one containing
your domain and the URL.

00:00:21.790 --> 00:00:23.680
But wouldn't it
be great if users

00:00:23.680 --> 00:00:25.990
who follow a link to a
website that you own get

00:00:25.990 --> 00:00:27.830
sent directly to your app?

00:00:27.830 --> 00:00:29.800
My name is Wojtek
Kalicinski, and I'll

00:00:29.800 --> 00:00:32.970
show you how app links, a new
feature in Android Marshmallow,

00:00:32.970 --> 00:00:35.000
lets you do just that.

00:00:35.000 --> 00:00:36.890
Now, there are two
conditions an app needs

00:00:36.890 --> 00:00:39.630
to meet in order to get rid
of the disambiguation dialogue

00:00:39.630 --> 00:00:40.580
for good.

00:00:40.580 --> 00:00:42.500
One, it has to be
configured to handle

00:00:42.500 --> 00:00:44.660
URLs pointing to your website.

00:00:44.660 --> 00:00:46.820
And two, you must
be able to prove

00:00:46.820 --> 00:00:49.160
that you control the domain
under which your site is

00:00:49.160 --> 00:00:50.280
hosted.

00:00:50.280 --> 00:00:51.960
Let me show you how to do it.

00:00:51.960 --> 00:00:54.430
First, look at your
Android manifest file

00:00:54.430 --> 00:00:56.690
and make sure that you
have at least one activity

00:00:56.690 --> 00:00:59.010
with an intent filter that
matches the following.

00:00:59.010 --> 00:01:03.300
For the data element, it
uses an HTTP or HTTPS scheme

00:01:03.300 --> 00:01:05.349
with your domain as the host.

00:01:05.349 --> 00:01:07.090
It also needs to
have a view action

00:01:07.090 --> 00:01:09.120
and the browsable category.

00:01:09.120 --> 00:01:11.850
If you've implemented deep
linking in your app before,

00:01:11.850 --> 00:01:15.330
you might notice that you have
that part configured already.

00:01:15.330 --> 00:01:18.180
There's one more detail you need
for enabling app links, though,

00:01:18.180 --> 00:01:20.520
and that's the new
autoVerify attribute.

00:01:20.520 --> 00:01:22.740
So make sure you
add this as well.

00:01:22.740 --> 00:01:25.440
This will tell the system to
kick off domain verification

00:01:25.440 --> 00:01:27.230
when your app is installed.

00:01:27.230 --> 00:01:30.300
Let me walk you through
that last step now.

00:01:30.300 --> 00:01:32.850
In order to associate
your site with your app,

00:01:32.850 --> 00:01:35.260
you will need to put a
digital asset links JSON

00:01:35.260 --> 00:01:39.550
file on this exact path under
your website's root directory.

00:01:39.550 --> 00:01:42.200
The format of the file is
pretty straightforward.

00:01:42.200 --> 00:01:44.530
You can just copy the sample
from our documentation

00:01:44.530 --> 00:01:47.500
and replace the two highlighted
values with your apps package

00:01:47.500 --> 00:01:50.620
name and the fingerprint of
your signing certificate.

00:01:50.620 --> 00:01:53.890
You should leave the other
fields exactly as shown here.

00:01:53.890 --> 00:01:56.070
Be careful if you're using
a different certificate

00:01:56.070 --> 00:01:57.870
or package name for
your debug build,

00:01:57.870 --> 00:02:00.360
or you will run
into problems later.

00:02:00.360 --> 00:02:04.680
Also, make sure the file you
create is accessible over HTTPS

00:02:04.680 --> 00:02:07.450
as that's the only way Android
will be able to successfully

00:02:07.450 --> 00:02:09.570
verify the connection.

00:02:09.570 --> 00:02:12.850
Now, how do you test if
everything is working properly?

00:02:12.850 --> 00:02:14.420
Just install your
app on the device

00:02:14.420 --> 00:02:17.100
like you normally would
using adb, Android

00:02:17.100 --> 00:02:19.180
Studio, or any other method.

00:02:19.180 --> 00:02:22.290
Then tap on the link to
your website from any app.

00:02:22.290 --> 00:02:24.980
Or you can issue a command
through adb that will

00:02:24.980 --> 00:02:27.360
start the appropriate intent.

00:02:27.360 --> 00:02:28.850
Observe what happens next.

00:02:28.850 --> 00:02:31.780
If you set up both parts-- the
intent filters and the JSON

00:02:31.780 --> 00:02:35.140
file-- correctly, your app
should launch immediately.

00:02:35.140 --> 00:02:37.580
If you do see a
disambiguation dialogue,

00:02:37.580 --> 00:02:39.410
that means the package
installer wasn't

00:02:39.410 --> 00:02:41.610
able to verify your domain.

00:02:41.610 --> 00:02:43.440
You can use the
digital asset links

00:02:43.440 --> 00:02:47.620
tool to see if your JSON file is
reachable and parsed correctly.

00:02:47.620 --> 00:02:49.950
With these simple steps,
you can make life easier

00:02:49.950 --> 00:02:51.150
for your users.

00:02:51.150 --> 00:02:53.680
So go and implement
app links now,

00:02:53.680 --> 00:02:55.240
or check out the
other great features

00:02:55.240 --> 00:02:57.610
that we're introducing
in Android Marshmallow.

00:02:57.610 --> 00:02:58.610
Thanks for watching.

00:02:58.610 --> 00:03:03.160
[MUSIC PLAYING]

