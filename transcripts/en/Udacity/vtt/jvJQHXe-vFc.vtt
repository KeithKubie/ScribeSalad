WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:03.750
Android libraries are essentially
fully featured Android apps

00:00:03.750 --> 00:00:06.230
with the one restriction that they
can't be installed by themselves.

00:00:06.230 --> 00:00:08.930
They have to be packaged into another
app to be installed on a device.

00:00:10.310 --> 00:00:13.770
Android apps tend to consist of a whole
lot of files, so while you can totally

00:00:13.770 --> 00:00:17.860
create an Android library by hand,
it's a lot easier to use the wizard.

00:00:17.860 --> 00:00:18.758
Let's check out how to do that.

00:00:18.758 --> 00:00:22.359
If you right-click on
the root of your project and

00:00:22.359 --> 00:00:27.592
select New Module &gt; Phone and
Tablet Applications &gt; Android Library,

00:00:27.592 --> 00:00:32.991
you can give your library a name and
an sdk, and then just like a normal app,

00:00:32.991 --> 00:00:36.971
you can choose what kinds of
activities you want to add.

00:00:36.971 --> 00:00:39.213
Let's add a blank
activity with a fragment.

00:00:39.213 --> 00:00:40.550
We'll give it a name.

00:00:42.328 --> 00:00:45.690
Now, a myLibrary folder has been
added to the root of your project

00:00:45.690 --> 00:00:48.860
with all the familiar source and res and

00:00:48.860 --> 00:00:51.600
even a manifest that you'd associate
with a normal Android app.

00:00:52.670 --> 00:00:57.137
Also, the wizard is nice enough to add
your new library as a sub-project in

00:00:57.137 --> 00:00:58.760
the multi-project build.

00:00:58.760 --> 00:01:02.120
So, the last thing you need to do to be
able to use your new activity in your

00:01:02.120 --> 00:01:06.150
base app is to head over to the
build.gradle file in the app directory.

00:01:07.410 --> 00:01:10.150
And then we'll need to add
a compile time dependency

00:01:10.150 --> 00:01:12.590
on the project myLibrary.

00:01:12.590 --> 00:01:13.940
That's all there is to it.

00:01:13.940 --> 00:01:15.370
Let's check out a working example.

00:01:16.460 --> 00:01:20.190
So here's the demo from the course code,
which I strong suggest you go check out.

00:01:20.190 --> 00:01:24.390
We've added this imageactivity
Android library to our project.

00:01:24.390 --> 00:01:28.470
This library defines an activity with
its own layouts and with its own values,

00:01:28.470 --> 00:01:29.820
like strings.

00:01:29.820 --> 00:01:33.060
So here's the message that
the activity's going to display.

00:01:33.060 --> 00:01:36.210
And this drawable of the Gradle logo
is also wrapped up inside our Android

00:01:36.210 --> 00:01:36.750
library.

00:01:36.750 --> 00:01:42.510
In settings.gradle,
imageactivity is added as a subproject,

00:01:42.510 --> 00:01:45.240
and in the build.gradle
file of the app directory,

00:01:45.240 --> 00:01:49.420
we have a compile time dependency
on the image activity project.

00:01:49.420 --> 00:01:53.840
So that means in the main activity
of our main Android project,

00:01:53.840 --> 00:01:58.030
we can import image activity and
set up an Intent to go launch it.

00:01:59.240 --> 00:01:59.900
If we go ahead and

00:01:59.900 --> 00:02:04.040
deploy that to our test device, here's
the activity from our app module and

00:02:04.040 --> 00:02:09.470
our button which then launches
the activity from our Android library.

00:02:09.470 --> 00:02:10.270
There we go.

00:02:10.270 --> 00:02:13.490
We've made an activity that's easy
to reuse between applications.

