WEBVTT
Kind: captions
Language: en

00:00:00.680 --> 00:00:03.180
ROB DODSON: The web is in the
spotlight at Microsoft's build

00:00:03.180 --> 00:00:06.385
conference and how is TCP a
lot like the seventh grade?

00:00:06.385 --> 00:00:07.650
I'm Rob Dodson.

00:00:07.650 --> 00:00:08.910
This is "Lazy Web."

00:00:08.910 --> 00:00:10.830
[MUSIC PLAYING]

00:00:12.747 --> 00:00:15.330
MALE SPEAKER 1: Would you like
to hear the name of the new web

00:00:15.330 --> 00:00:16.590
browser in Windows 10?

00:00:16.590 --> 00:00:19.090
ROB DODSON: The web is a serious
player at Microsoft's build

00:00:19.090 --> 00:00:19.740
conference.

00:00:19.740 --> 00:00:22.210
The team reveals Microsoft
Edge, their new browser,

00:00:22.210 --> 00:00:25.050
formerly called Project
Spartan; Visual Studio Code,

00:00:25.050 --> 00:00:27.260
which splits the gap
between Editor and IDE

00:00:27.260 --> 00:00:29.700
and runs on all
platforms; Project Vorlon

00:00:29.700 --> 00:00:31.982
for remote debugging and
testing your JavaScript;

00:00:31.982 --> 00:00:34.850
and ManifoldJS for hosted apps.

00:00:34.850 --> 00:00:36.725
You can find more info
over at dev.modern.ie.

00:00:39.474 --> 00:00:40.890
MALE SPEAKER 2:
The right response

00:00:40.890 --> 00:00:44.600
to what's up is-- what's up.

00:00:44.600 --> 00:00:47.120
ROB DODSON: Network latency
kills fast page experiences.

00:00:47.120 --> 00:00:48.910
In this talk from
SmashingConf, Paul Irish

00:00:48.910 --> 00:00:50.960
explains speed
index and how TCP is

00:00:50.960 --> 00:00:52.640
a lot like his former
seventh-grade self

00:00:52.640 --> 00:00:54.545
saying hi to the
coolest kid in school.

00:00:54.545 --> 00:00:56.670
Live performance audits
demonstrate common pitfalls

00:00:56.670 --> 00:00:58.930
from actual sites, and
there's even a few bonus

00:00:58.930 --> 00:01:01.899
dev tools goodies at the end.

00:01:01.899 --> 00:01:03.440
Keep track of your
site's performance

00:01:03.440 --> 00:01:05.710
with this helpful dashboard,
an open source project,

00:01:05.710 --> 00:01:08.236
combining Graphite,
Grafana, and SightSpeed.io

00:01:08.236 --> 00:01:09.610
The tool lets you
measure metrics

00:01:09.610 --> 00:01:12.010
like speed index for your
most important pages,

00:01:12.010 --> 00:01:13.520
configure world
performance budgets,

00:01:13.520 --> 00:01:15.240
and even use web page tests.

00:01:15.240 --> 00:01:17.020
You can add your own
metrics to measure,

00:01:17.020 --> 00:01:19.850
and best of all, the project
is deployable as a set

00:01:19.850 --> 00:01:22.760
of docker containers.

00:01:22.760 --> 00:01:25.480
What if you could write
mobile apps with Dart?

00:01:25.480 --> 00:01:26.980
Eric Seidel from
Google demonstrates

00:01:26.980 --> 00:01:28.710
Sky, an experimental,
open source

00:01:28.710 --> 00:01:31.060
framework for writing mobile
apps at this year's Dart

00:01:31.060 --> 00:01:31.660
Summit.

00:01:31.660 --> 00:01:34.020
Designed to produce
120 Hertz experiences,

00:01:34.020 --> 00:01:36.410
Sky aims to take the best
parts of the Chrome and Dart

00:01:36.410 --> 00:01:39.290
ecosystem and combine them
with an easy-to-deploy package

00:01:39.290 --> 00:01:41.700
for native apps.

00:01:41.700 --> 00:01:43.990
Page weight doesn't
equal user wait.

00:01:43.990 --> 00:01:45.796
Scott Jehl from
Filament Group explains

00:01:45.796 --> 00:01:47.670
that just because the
site is resource heavy,

00:01:47.670 --> 00:01:50.720
it doesn't mean the initial
experience should be slow.

00:01:50.720 --> 00:01:53.670
By focusing on network latency
and render blocking assets,

00:01:53.670 --> 00:01:56.370
and leveraging tools, like
WebPagetest and PageSpeed

00:01:56.370 --> 00:01:58.390
Insights, Jehl
demonstrates how he

00:01:58.390 --> 00:02:02.020
was able to knock 8.5 seconds
off a site's initial render

00:02:02.020 --> 00:02:04.660
time without changing
the actual page weight.

00:02:07.196 --> 00:02:09.070
Priority tasks move to
the front of the line.

00:02:09.070 --> 00:02:10.740
Recently discussed
on the Chromium blog,

00:02:10.740 --> 00:02:12.640
Chrome's new scheduler
allows the browser

00:02:12.640 --> 00:02:14.980
to rearrange the
order it runs tasks,

00:02:14.980 --> 00:02:17.800
such as responding to
clicks, and paning to screen.

00:02:17.800 --> 00:02:19.490
Previously, the
scheduler handled tasks

00:02:19.490 --> 00:02:22.030
the same way that a bank
handles a queue of customers.

00:02:22.030 --> 00:02:24.440
But in Chrome 41, urgent
and priority tasks

00:02:24.440 --> 00:02:26.440
can now skip to the
front of the line.

00:02:26.440 --> 00:02:28.440
This can dramatically
improve scroll performance

00:02:28.440 --> 00:02:31.900
as demonstrated in this demo.

00:02:31.900 --> 00:02:33.260
That's it for this week, folks.

00:02:33.260 --> 00:02:35.210
Take a deep breath,
enjoy the visuals,

00:02:35.210 --> 00:02:37.970
and to all you LazyWebbers out
there, thanks for watching.

00:02:37.970 --> 00:02:40.720
[MUSIC PLAYING]

