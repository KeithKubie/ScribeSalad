WEBVTT
Kind: captions
Language: en

00:00:09.300 --> 00:00:10.300
[Hangout dings]

00:00:10.300 --> 00:00:13.730
&gt;&gt;Ankur Kotwal: Hello and welcome everyone
to another Android Developer Lab+.

00:00:13.730 --> 00:00:16.400
We will be getting started in just a minute.

00:00:16.400 --> 00:00:20.340
I'm just setting up the Google Developer's
live link so just bear with us and we'll be

00:00:20.340 --> 00:00:25.450
right back.

00:00:25.450 --> 00:00:48.590
&gt;&gt;Tony Chen: Yeah, hi everyone.

00:00:48.590 --> 00:00:56.239
[Typing on keyboard]

00:00:56.239 --> 00:01:12.090
&gt;&gt;Ankur Kotwal: Okay and we're good to go.

00:01:12.090 --> 00:01:20.610
So if you're tuning in online live right now,
then you should be able to go to developers.google.com/live

00:01:20.610 --> 00:01:22.630
and go to ADL+.

00:01:22.630 --> 00:01:26.470
So, let's start off with the usual introductions.

00:01:26.470 --> 00:01:29.760
I am Ankur Kotwal and I'm joining you from
Sydney, Australia.

00:01:29.760 --> 00:01:32.160
I'm also joined by my colleague and friend.

00:01:32.160 --> 00:01:35.170
&gt;&gt;Tony Chen: Hi, I'm Tony Chen from China.

00:01:35.170 --> 00:01:39.650
&gt;&gt;Ankur Kotwal: Tony is muted right now so
we can't hear him but he'll fix that up in

00:01:39.650 --> 00:01:40.650
a second.

00:01:40.650 --> 00:01:41.650
[Laughs]

00:01:41.650 --> 00:01:44.480
&gt;&gt;Tony Chen: Okay, can you, can you hear me
now?

00:01:44.480 --> 00:01:46.111
&gt;&gt;Ankur Kotwal: We still can't hear him.

00:01:46.111 --> 00:01:53.180
So let me introduce Tony in the meanwhile
it's Tony Chen from Hong Kong and one of our

00:01:53.180 --> 00:01:55.030
regular viewers, Andrew, has just joined us
as well.

00:01:55.030 --> 00:01:56.030
Hi, Andrew.

00:01:56.030 --> 00:01:57.030
&gt;&gt;Andrew Kelly: Hi.

00:01:57.030 --> 00:01:58.030
&gt;&gt;Ankur Kotwal: Okay.

00:01:58.030 --> 00:01:59.030
Alright, Tony.

00:01:59.030 --> 00:02:00.690
I cannot, Andrew are you able to hear Tony?

00:02:00.690 --> 00:02:04.850
&gt;&gt;Tony Chen: Can you hear me?

00:02:04.850 --> 00:02:08.320
&gt;&gt;Ankur Kotwal: Now we can.

00:02:08.320 --> 00:02:11.780
&gt;&gt;Andrew Kelly: I can, yep.

00:02:11.780 --> 00:02:19.940
&gt;&gt;Tony Chen: Okay, yeah, so I'm Tony Chen
joining the hangout from Hong Kong and today

00:02:19.940 --> 00:02:25.470
we have the special topic for today is density
independent pixel.

00:02:25.470 --> 00:02:29.330
Before that let's talk, uh, let me share my
screen.

00:02:29.330 --> 00:02:32.450
Hopefully this time we're doing it right.

00:02:32.450 --> 00:02:36.870
Just give me a second.

00:02:36.870 --> 00:02:52.200
[Pause]
&gt;&gt;Tony Chen: So, can everyone see the slide

00:02:52.200 --> 00:02:53.200
alright?

00:02:53.200 --> 00:02:55.090
&gt;&gt;Ankur Kotwal: Yep, looks good here, Tony.

00:02:55.090 --> 00:02:57.470
&gt;&gt;Tony Chen: Okay, great.

00:02:57.470 --> 00:03:05.760
So, let's talk about, um, before we get to
the DP subject today, let's talk about news.

00:03:05.760 --> 00:03:13.140
So, for this week we have ADT 21 Preview 3.

00:03:13.140 --> 00:03:21.080
It's mostly bufixes and no new feature but
if you want to check it out, as always, like,

00:03:21.080 --> 00:03:23.220
just go to tools.android.com.

00:03:23.220 --> 00:03:34.140
In other news this week is our colleague,
Roman Nurik has made a G+ post about chips

00:03:34.140 --> 00:03:37.040
and recipient text field.

00:03:37.040 --> 00:03:47.910
So this is what you guys usually see on the
Google Plus client and Roman has some details,

00:03:47.910 --> 00:03:54.850
information about how, where you can get the
code from the AOSP website.

00:03:54.850 --> 00:03:56.459
So check that out.

00:03:56.459 --> 00:04:02.181
I have a Google short link here, so, check
it out.

00:04:02.181 --> 00:04:04.880
&gt;&gt;Ankur Kotwal: just to give you a background
on that, we call it 'chips' but it's basically

00:04:04.880 --> 00:04:11.050
when you, when you complete some contact information,
rather than have the email address or the

00:04:11.050 --> 00:04:16.150
phone number show up, you get a nice little
rectangular box with an image of the avatar

00:04:16.150 --> 00:04:18.870
of that person in that box and their name.

00:04:18.870 --> 00:04:25.100
So instead of just having an ascetic email
address, it's a much more pleasant piece of

00:04:25.100 --> 00:04:31.060
UI and you can, you know, select that whole
chip, if you wanna clear it or if you wanna

00:04:31.060 --> 00:04:34.270
add a few more people and drag it around,
that sort of thing.

00:04:34.270 --> 00:04:39.510
So it's just, uh, just a nice bit of polish
to add to your apps and those are the little

00:04:39.510 --> 00:04:44.349
subtle differences that really make your app
stand out compared to others.

00:04:44.349 --> 00:04:52.699
So Roman has basically, in his post, shown
you where you can find it in the Android Open

00:04:52.699 --> 00:04:57.999
Source projects so the source code is already
there he's just showing you exactly where

00:04:57.999 --> 00:04:59.129
to look.

00:04:59.129 --> 00:05:00.819
&gt;&gt;Tony Chen: Cool.

00:05:00.819 --> 00:05:08.680
Alright, so, let's get to the topic of today,
density independent pixel.

00:05:08.680 --> 00:05:16.089
So before we get to the details about what
that is and what DP is let's start with an

00:05:16.089 --> 00:05:21.870
overview, um, to just get everyone on the
same page with some definitions.

00:05:21.870 --> 00:05:31.699
So, screen size is actually the physical size
of any devices, any Android devices.

00:05:31.699 --> 00:05:37.169
So we have four categories, small, normal,
large and extra large.

00:05:37.169 --> 00:05:43.249
And then when we talk about screen density
it's really the, it's the quantity of pixel

00:05:43.249 --> 00:05:46.229
within a physical area of the screen.

00:05:46.229 --> 00:05:54.120
So, a lot of people use dot per inch, this
is the common terminology.

00:05:54.120 --> 00:06:02.129
And for resolution, it's closely related to
screen density but it's really talking about

00:06:02.129 --> 00:06:06.229
the total number of physical pixel on the
screen.

00:06:06.229 --> 00:06:12.339
So when we talk about screen density and resolution
is really the, in proportional, the higher

00:06:12.339 --> 00:06:18.979
the screen density, the higher the resolution.

00:06:18.979 --> 00:06:22.319
So what is the problem with pixel?

00:06:22.319 --> 00:06:28.629
Because, as like you guys already know, we
introduced something called deep density independent

00:06:28.629 --> 00:06:36.589
pixel in Android and we highly recommend everyone
when you design layout using DP style pixel

00:06:36.589 --> 00:06:39.800
but was this really the problem with pixel?

00:06:39.800 --> 00:06:44.120
Well, turn out pixel has many meanings.

00:06:44.120 --> 00:06:49.309
And what I'm really mean by that is like,
let's go to the pixel, like the definition

00:06:49.309 --> 00:06:50.309
of pixel.

00:06:50.309 --> 00:06:55.999
It's really based on the contraction of pix,
which is coming from picture, and the E-L

00:06:55.999 --> 00:06:57.910
is coming from element.

00:06:57.910 --> 00:07:05.249
So it's really an element of the smallest
addressable element for display.

00:07:05.249 --> 00:07:13.319
But then when we talk about printer, pixel
can be an ink droplet or even a unit of carbon

00:07:13.319 --> 00:07:14.319
particles.

00:07:14.319 --> 00:07:17.759
So, as you can see, there are many different
meanings based on the context.

00:07:17.759 --> 00:07:23.439
And in camera, pixel is really represent an
image sensor element.

00:07:23.439 --> 00:07:31.199
So it's really different meaning depends on
the terminology or context.

00:07:31.199 --> 00:07:39.930
Pixel can also have different size and representation
because a pixel in CRT monitor is different

00:07:39.930 --> 00:07:42.619
from a pixel from a LCD screen.

00:07:42.619 --> 00:07:49.780
So, if you want to know more about the detail
of pixel, you can go to wikipedia to find

00:07:49.780 --> 00:07:52.360
out even more detail.

00:07:52.360 --> 00:07:56.539
So, now we have density independent pixel.

00:07:56.539 --> 00:08:06.800
So, the key here is DP is really a physical
length unit, so, just like centimeter or meter.

00:08:06.800 --> 00:08:11.789
So you have a physical length in the real
world.

00:08:11.789 --> 00:08:22.429
And, of course, like one thing we, in the
very beginning we use, actually, dip as shorthand

00:08:22.429 --> 00:08:30.419
but now it's dp and dip is,are interchangeable
and you can still identify things in your

00:08:30.419 --> 00:08:34.020
layout with both shorthand.

00:08:34.020 --> 00:08:40.940
Pixel is also a physical point but then it
doesn't have a fixed dimension.

00:08:40.940 --> 00:08:54.420
So it varies, depends on technology and how
a particular device has, it may have many

00:08:54.420 --> 00:08:57.550
pixel in the same length.

00:08:57.550 --> 00:09:10.311
So, we have a definition or a formula to trans-,
um, to translate between pixel and dp and

00:09:10.311 --> 00:09:19.270
the formula is here is a pixel is equal to
dp star times the dpi over 160.

00:09:19.270 --> 00:09:29.620
And 160 is really kinda like the magic number
because that is the density for mdpi.

00:09:29.620 --> 00:09:43.610
So in Android, we have different screen densities
listed here below here, its ldpi, mdpi, hdpi,

00:09:43.610 --> 00:09:44.920
etcetera.

00:09:44.920 --> 00:09:51.160
And the one I highlight in red, the tvdpi,
is particularly interesting at the moment

00:09:51.160 --> 00:10:00.029
because it's the, well first of all it's the
tvdpi for Google TV and also as well as like

00:10:00.029 --> 00:10:06.759
the latest Android tablet, Nexus 7, density
as well.

00:10:06.759 --> 00:10:15.060
So, now after we learn all these, like, concept,
let's get to some exercise.

00:10:15.060 --> 00:10:22.560
So, how many pixels are there in 1dp for our
first Android phone, the G1 phone?

00:10:22.560 --> 00:10:25.430
Can someone make a guess?

00:10:25.430 --> 00:10:37.529
It turns out the answer is 1 pixel and the
reason is we used the G1 as the baseline for

00:10:37.529 --> 00:10:48.399
everything basically the G1 phone is the normal,
is a normal screen size and also have the

00:10:48.399 --> 00:10:51.190
mdpi resolution, sorry about the typo there.

00:10:51.190 --> 00:10:55.519
Let's get to another exercise.

00:10:55.519 --> 00:11:01.269
How many pixels are there in 1dp for an xhdpi
device?

00:11:01.269 --> 00:11:02.269
Guess what?

00:11:02.269 --> 00:11:08.880
The answer is, it depends.

00:11:08.880 --> 00:11:22.800
[chuckles] Because for xhdpi is, actually,
it's a range and in most cases xhdpi is 320

00:11:22.800 --> 00:11:30.860
but it depends on what device, could be, some
device could have like 325 or things like

00:11:30.860 --> 00:11:34.029
that so that's why it depends.

00:11:34.029 --> 00:11:41.800
And that actually makes this coming exercise
easy because now I specified the density of

00:11:41.800 --> 00:11:50.720
this xhdpi device to 320 and, of course, the
answer here is 2 pixel.

00:11:50.720 --> 00:12:01.410
Um, okay, so another exercise, so, what are
the dimensions in dp for the following rectangles?

00:12:01.410 --> 00:12:11.220
So if you look at these rectangles and if
you remember our definition of a dp which

00:12:11.220 --> 00:12:21.500
is, I actually put the formula up there for
convenience and if you remember the mdpi is

00:12:21.500 --> 00:12:32.290
the baseline, which is 160, the answer is,
will be obvious and the answer is 4dp.

00:12:32.290 --> 00:12:44.889
And because we are, for the rectangle of an
mdpi we have 4 pixels on each side and because

00:12:44.889 --> 00:12:51.639
that's the baseline and we have 4 pixels and
the answer, and that makes the answer 4dp.

00:12:51.639 --> 00:13:01.579
Okay, so, another thing I want to talk about
is the dpi ratio because as you can see from

00:13:01.579 --> 00:13:10.839
the formula, it's really the current density
of your device divided by 160 and because

00:13:10.839 --> 00:13:21.769
of the, there are actually ratio between these
different density and just a convenient thing

00:13:21.769 --> 00:13:30.569
to remember is like 3 to 4 to 6 to 8 so you
can use these ratio easily to do the proper

00:13:30.569 --> 00:13:40.940
conversion to get pixel or dps based on these,
like, ratios.

00:13:40.940 --> 00:13:50.019
Okay, so, let's talk about the problem of
using pixel, px, in your, in your layout.

00:13:50.019 --> 00:13:59.040
So here is an example of the effect of defining
a 2x2 box in pixel in your layout.

00:13:59.040 --> 00:14:09.399
So, as you can see, if you do it, if you define
something with pixel, in the ldpi device,

00:14:09.399 --> 00:14:19.449
it occupies the entire rectangle but as you
move to different devices you see the graph,

00:14:19.449 --> 00:14:27.709
the box actually is shrinking because you
define things in pixel and in the higher density

00:14:27.709 --> 00:14:36.490
device, the pixel is actually smaller and
that's the reason why things are not scaled

00:14:36.490 --> 00:14:43.940
properly in, in, when you define things in
pixel.

00:14:43.940 --> 00:14:49.560
So now let's take a look at the effect when
you define things in dp.

00:14:49.560 --> 00:14:59.790
So, in this case, because you defined things
in dp, and as I mentioned before and hopefully

00:14:59.790 --> 00:15:11.009
you'll already remember dp is a physical length
unit, so if you define something with two

00:15:11.009 --> 00:15:20.430
dp, the representation across different resolution
is the same, it's going to be the same.

00:15:20.430 --> 00:15:26.360
And that's what we meant by resolution independent.

00:15:26.360 --> 00:15:32.459
Okay, so, what about bitmap assets?

00:15:32.459 --> 00:15:39.879
So the Android framework actually is quite
intelligent and it will scale bitmap drawables

00:15:39.879 --> 00:15:42.709
appropriately when using dp.

00:15:42.709 --> 00:15:47.680
But there is a big caveat here.

00:15:47.680 --> 00:15:57.130
The graphics here, as you can see, it doesn't
matter whether you're scaling up or scaling

00:15:57.130 --> 00:16:05.499
down because there's no algorithm, actually,
perfect algorithm that would produce to scaling

00:16:05.499 --> 00:16:06.499
images.

00:16:06.499 --> 00:16:13.319
So if you scale up you will, because you don't
have enough information, you have to do interpolation

00:16:13.319 --> 00:16:18.100
and that will create an image that is not
sharp.

00:16:18.100 --> 00:16:25.910
But, at the same time, if you're scaling down
your image there's a potential running into

00:16:25.910 --> 00:16:35.129
something called aliasing which also can make
your image not sharp at all also.

00:16:35.129 --> 00:16:43.420
So, the conclusion here is you should create
bitmap resources for each dens-, uh, density

00:16:43.420 --> 00:16:48.110
of device you're targeting.

00:16:48.110 --> 00:16:51.889
So, what is sp?

00:16:51.889 --> 00:16:57.259
Because besides dp there is also sp in Android.

00:16:57.259 --> 00:17:02.499
So sp is something we designed specifically
for text.

00:17:02.499 --> 00:17:10.640
In the Android framework there is accessibility
option to allow user to enlarge fonts even

00:17:10.640 --> 00:17:12.880
they are specified in dp.

00:17:12.880 --> 00:17:23.280
So, in that case, the formula is really, sp
is really dp times some scaling factor determined

00:17:23.280 --> 00:17:32.860
by the user, what kind of font, uh, scale
they want to scale their fonts to, to larger

00:17:32.860 --> 00:17:34.580
fonts or smaller fonts.

00:17:34.580 --> 00:17:42.650
So it's still somehow [indistinct] the dp,
make the text a kind of independent of resolution

00:17:42.650 --> 00:17:51.600
but at the same time if the user decides to
scale it up for accessibility reasons there

00:17:51.600 --> 00:18:01.620
is an [indistinct] scaling factor for user
to specify.

00:18:01.620 --> 00:18:10.370
And after all these, so I hope by now you
have a, kind of a good grasp of what dp is

00:18:10.370 --> 00:18:17.350
and because of all these, like, problem that
pixel and that's why we kind of introduced

00:18:17.350 --> 00:18:25.700
a new size qualifier to do, to do resource
classification.

00:18:25.700 --> 00:18:35.450
And this new qualifier allows more control
over different specific, like, screen sizes

00:18:35.450 --> 00:18:37.530
to support your application.

00:18:37.530 --> 00:18:48.250
So, the old size qualifier which is small,
normal, medium, large, extra large, and turns

00:18:48.250 --> 00:18:59.460
out because of the resolution issue it's no
longer good enough to classify things like

00:18:59.460 --> 00:19:00.460
tablets.

00:19:00.460 --> 00:19:10.240
So, for example, a seven inch tablet has a
size large but so, that makes actually tablet

00:19:10.240 --> 00:19:18.670
not necessarily equals extra large which is,
breaks a lot of things and by introducing

00:19:18.670 --> 00:19:26.000
these new qualifiers, so there are three of
them, so one of them we call it smallest width

00:19:26.000 --> 00:19:34.200
so the syntax is right, is like sw and then
the number and then the dp.

00:19:34.200 --> 00:19:41.300
So the nice things about this smallest width
is you don't need to care about the orientation

00:19:41.300 --> 00:19:50.870
of your device so all, all you are specifying
here is for a particular device, for the smallest

00:19:50.870 --> 00:19:59.240
width size of the tablet or the device, it
has to be at least 600dp in this case.

00:19:59.240 --> 00:20:09.180
So, in that case, the resource under this
resource folder will be selected for creating

00:20:09.180 --> 00:20:13.470
your lay-, um, rendering the layout.

00:20:13.470 --> 00:20:20.670
There are two other qualifiers, one is specifically
for width and another one for height but it's

00:20:20.670 --> 00:20:27.850
tricky because, it really ups to the [indistinct]
like to find which size is the width and which

00:20:27.850 --> 00:20:36.100
size is the height and we usually see and
recommend people using the smallest width

00:20:36.100 --> 00:20:42.950
and that should take care of a lot of the
cases.

00:20:42.950 --> 00:20:52.610
Um, so, one thing about compatibility, so,
before we introduce, uh, before Honeycomb

00:20:52.610 --> 00:20:58.430
3.2, these qualifiers doesn't exist, right?

00:20:58.430 --> 00:21:08.650
So, in that case, we still recommend developer,
especially if you are targeting pre Honeycomb

00:21:08.650 --> 00:21:20.340
devices, you still need to specify a bucket
to take care of selecting tablets using extra

00:21:20.340 --> 00:21:22.490
large, for example.

00:21:22.490 --> 00:21:31.850
But in this case there's one problem, you
can, as you can see, there are two files,

00:21:31.850 --> 00:21:39.790
actually having the same tablet layout, the
main activity xml is actually duplicate.

00:21:39.790 --> 00:21:50.790
So, how to solve this problem, so, one thing
you can do is you can abstract out the tablet

00:21:50.790 --> 00:21:57.040
layout into a different user, uh, using a
different name, uh, in this case I call it

00:21:57.040 --> 00:22:00.260
main activity tablet.xml.

00:22:00.260 --> 00:22:09.330
And for, in your, in your resource folder
under, using values, you can specify layout

00:22:09.330 --> 00:22:15.090
pointing to that particular xml.

00:22:15.090 --> 00:22:25.660
So I understand, like, the layout xml is still
duplicates but your content, your true layout

00:22:25.660 --> 00:22:29.650
is only defined once, so, which is the key
here.

00:22:29.650 --> 00:22:36.840
Finally, let's talk a little bit about screen
support.

00:22:36.840 --> 00:22:47.730
So in, we have a tool tags in the Android
framework to allow multiple screen support

00:22:47.730 --> 00:22:56.410
so one of them is support of screen and in
this case here I want to filter out small

00:22:56.410 --> 00:22:57.970
and normal screen size.

00:22:57.970 --> 00:23:07.520
So, this is the, kind of the, the specification
I need to do to set small screen and normal

00:23:07.520 --> 00:23:09.290
screen to force.

00:23:09.290 --> 00:23:11.920
So, how bout this one?

00:23:11.920 --> 00:23:21.950
So, is this the configuration to filter out
small, only make the, your application available

00:23:21.950 --> 00:23:24.170
for small or normal size screen?

00:23:24.170 --> 00:23:34.350
Well, it turns out the answer is wrong because
the support screen doesn't mean that your

00:23:34.350 --> 00:23:38.580
application will not be available but for
large and extra large device.

00:23:38.580 --> 00:23:46.140
It just mean that they're running in something
we call compatibility mode for these two form

00:23:46.140 --> 00:23:47.140
factors.

00:23:47.140 --> 00:23:55.660
So, how to filter out large or extra large
screen devices?

00:23:55.660 --> 00:24:03.670
We have another tag that actually can really
do this, so, in this case here you are using

00:24:03.670 --> 00:24:11.790
something called compatible screen tag and
you have to specify all the screen you would

00:24:11.790 --> 00:24:13.230
like to support.

00:24:13.230 --> 00:24:20.260
So that's the one big caveat and that's kind
of the reason why we are not recommending

00:24:20.260 --> 00:24:27.790
developer to use this because you, if you
don't specify all the different combination

00:24:27.790 --> 00:24:36.510
you'll, your application will not be available
for those you didn't specify.

00:24:36.510 --> 00:24:44.830
And another thing is after all, in Android
we always looking for application that support

00:24:44.830 --> 00:24:50.020
all devices and that should be your ultimate
goal.

00:24:50.020 --> 00:24:58.940
So that's pretty much for density independent
pixel and so we can switch to Q and A or Ankur

00:24:58.940 --> 00:25:02.990
if you have anything to add to this feel free
to chime in.

00:25:02.990 --> 00:25:05.930
&gt;&gt;Ankur Kotwal: No, that was quite comprehensive.

00:25:05.930 --> 00:25:06.930
[chuckles]

00:25:06.930 --> 00:25:08.490
&gt;&gt;Tony Chen: Cool.

00:25:08.490 --> 00:25:14.160
&gt;&gt;Ankur Kotwal: So at this stage I guess we
can, given that we've just had a topic that

00:25:14.160 --> 00:25:21.410
we, that Tony presented are there any questions
on the presentation from any of the live audience

00:25:21.410 --> 00:25:24.200
or anyone tuning into the stream even?

00:25:24.200 --> 00:25:25.760
&gt;&gt;Tony Chen: Yeah?

00:25:25.760 --> 00:25:34.650
&gt;&gt;male #1: Hi, I would like to ask you about
pictures and images loading from the internet,

00:25:34.650 --> 00:25:36.440
for example, Facebook.

00:25:36.440 --> 00:25:46.490
So if Facebook has a large image, say, 180
pixels, on large devices with hdpi they will

00:25:46.490 --> 00:25:51.800
be displayed as twice, so it will be like
90dpi?

00:25:51.800 --> 00:25:56.970
Any way to, any strategies to like scale them?

00:25:56.970 --> 00:26:06.910
&gt;&gt;Tony Chen: Oh, so, I think in that case,
back to the presentation, is if you define

00:26:06.910 --> 00:26:14.900
your image dimension using dp, the Android
framework will automatically actually scale

00:26:14.900 --> 00:26:17.150
the image up for you.

00:26:17.150 --> 00:26:25.540
But then, again, you run into the issue of
interpolation, you may, you will not have

00:26:25.540 --> 00:26:31.620
a perfect image and that's why we suggest
developer to create different accents in the

00:26:31.620 --> 00:26:36.190
right resolution for that particular density.

00:26:36.190 --> 00:26:42.020
&gt;&gt;Ankur Kotwal: As a just general strategy,
though, if you're pulling, and in your situation

00:26:42.020 --> 00:26:46.750
you said you were pulling down assets from
the net and you might not have, you know,

00:26:46.750 --> 00:26:52.720
a different, um, resolutions of those images,
consider whether you think stretch, stretching

00:26:52.720 --> 00:26:58.220
that image is really the right thing to do
and certainly consider whether you wanna stretch

00:26:58.220 --> 00:26:59.850
it to as big as you can get.

00:26:59.850 --> 00:27:05.790
There might be a middle ground that makes
more sense like, you know, 1.5 times in every

00:27:05.790 --> 00:27:11.820
dimension where it doesn't look too blurry
but, you know, it is what it is.

00:27:11.820 --> 00:27:15.230
So if your source image is low resolution
there's only so much that you're gonna be

00:27:15.230 --> 00:27:16.470
able to do with it.

00:27:16.470 --> 00:27:20.170
&gt;&gt;male #1: Okay, thank you.

00:27:20.170 --> 00:27:25.410
&gt;&gt;Ankur Kotwal: There was a question, there
was a couple of questions on the moderator

00:27:25.410 --> 00:27:33.090
that have been added, Tony, on this topic
so let's deal with those ones first then today.

00:27:33.090 --> 00:27:39.680
"Is it possible and how to provide different
graphics, except 9 patches for two different

00:27:39.680 --> 00:27:48.330
devices running, for example, 800 by 480 and
540 by 960 on Android two and 2.3 without

00:27:48.330 --> 00:27:53.180
checking the resolution via Java source and
setting the proper graphics."

00:27:53.180 --> 00:28:00.860
So, my understanding of this question is the
person is asking how do I make it scale without

00:28:00.860 --> 00:28:03.540
having to manually do it myself.

00:28:03.540 --> 00:28:05.770
Is that your understanding, Tony?

00:28:05.770 --> 00:28:10.180
&gt;&gt;Tony Chen: Uh, yeah, based on what the question
is.

00:28:10.180 --> 00:28:16.400
&gt;&gt;Ankur Kotwal: Yeah, so what I would suggest
is actually just if you're just going to render

00:28:16.400 --> 00:28:20.650
it in a view just use, like, an image view,
just use the properties that we provide there

00:28:20.650 --> 00:28:27.820
that allow but you can specify whether you
want it to stretch to fit or you want it to

00:28:27.820 --> 00:28:29.400
scale or you want it to crop.

00:28:29.400 --> 00:28:34.560
There's a couple of options there that you
should really have a look at and see what

00:28:34.560 --> 00:28:35.560
makes sense.

00:28:35.560 --> 00:28:40.950
So, in that case, the Android framework is
doing the work for you.

00:28:40.950 --> 00:28:49.920
So, just keep in mind, however, though as
I, as we just said to Constantine that it

00:28:49.920 --> 00:28:58.720
may not make sense to always stretch to low
res image to a bigger [inaudible].

00:28:58.720 --> 00:29:03.490
In terms of providing the best user experience
cause that's the goal at the end of the day,

00:29:03.490 --> 00:29:07.830
you might have to have some logic in there
that says hey if I'm pulling down some image

00:29:07.830 --> 00:29:13.880
from an online source and I don't know what
resolution it will be do I wanna make it bigger

00:29:13.880 --> 00:29:17.770
than it is or do I wanna shrink it so on and
so forth.

00:29:17.770 --> 00:29:25.810
If you're providing your own assets, um, as
long as you're kind of reasonably in the ball

00:29:25.810 --> 00:29:30.540
park I would probably try and render the image
slightly higher than it needs to be and then

00:29:30.540 --> 00:29:38.390
put it in the, in the relevant resolution
bucket and then just size my UI based on dp's

00:29:38.390 --> 00:29:40.960
just like Tony described today.

00:29:40.960 --> 00:29:43.690
&gt;&gt;Tony Chen: Yeah.

00:29:43.690 --> 00:29:50.120
I think the second question we have on moderator
is, "Whenever we read the dimension of device

00:29:50.120 --> 00:29:58.240
screen, example, 480 times 800, 1024 times
600, in the device specification is that valid

00:29:58.240 --> 00:30:00.680
in pixel, dp or dip?"

00:30:00.680 --> 00:30:09.261
So, uh, wow, my understanding those number
are in pixel and also the other thing is dp

00:30:09.261 --> 00:30:10.880
and dip is the same thing.

00:30:10.880 --> 00:30:12.420
Yeah, so, um.

00:30:12.420 --> 00:30:16.060
&gt;&gt;Ankur Kotwal: I think that was a trick question
to try and catch us out, Tony.

00:30:16.060 --> 00:30:17.610
So we picked it up.

00:30:17.610 --> 00:30:18.850
&gt;&gt;Tony Chen: Exactly.

00:30:18.850 --> 00:30:21.901
[Laughter]
&gt;&gt;Tony Chen: Yeah and one thing I want to,

00:30:21.901 --> 00:30:28.100
I want to comment is when we've talked about,
like, designing layout in dp, it's really,

00:30:28.100 --> 00:30:39.710
what we are talking about is we want the experience
on a particular physical size consistent regardless

00:30:39.710 --> 00:30:40.710
of resolution.

00:30:40.710 --> 00:30:52.620
So, we are not saying, like, using dp in your
layout will scale properly in different size

00:30:52.620 --> 00:30:53.620
device.

00:30:53.620 --> 00:30:56.160
That actually is a misconception.

00:30:56.160 --> 00:31:04.070
So what we are talking about here is if you
design a 7 inch layout for a 7 inch device

00:31:04.070 --> 00:31:11.470
and if you are specifying all these dimension
in dp, it will guarantee to work on all the

00:31:11.470 --> 00:31:20.680
7 inches devices regardless of resolution
and that's the power of dp.

00:31:20.680 --> 00:31:26.550
It's not, we're not saying if you define a
7 inch layout using dp it will work in the

00:31:26.550 --> 00:31:32.920
10 inch device, that's not true and you have,
uh, what you should do is you should define

00:31:32.920 --> 00:31:42.220
a layout for a 10 inch in form factor and
you may choose to use, like, using more [unclear]

00:31:42.220 --> 00:31:48.850
or using different design and things should
still be done in dp so that your layout will

00:31:48.850 --> 00:31:54.240
work on 10 inch device with a different resolution.

00:31:54.240 --> 00:31:56.500
So that's the, that's the key concept here.

00:31:56.500 --> 00:32:02.310
&gt;&gt;Ankur Kotwal: Yeah, I might just add to
that, Tony, I think in general-, my experience

00:32:02.310 --> 00:32:08.180
has been that 7 inch devices and 10 inch devices
you can actually reuse the same layout, in

00:32:08.180 --> 00:32:10.510
general, and it works really well and it scales
nicely.

00:32:10.510 --> 00:32:14.410
I mean, assuming you're building nice scalable
user interfaces.

00:32:14.410 --> 00:32:19.380
One big differentiating factor that I find
between 7 inch tablets and 10 inch tablets,

00:32:19.380 --> 00:32:24.010
however, is that the default orientation of
a 10 inch tablet is landscape mode whereas

00:32:24.010 --> 00:32:28.390
the default orientation for most of the, just
about all the 7 inch tablets I've seen is

00:32:28.390 --> 00:32:29.880
portrait mode.

00:32:29.880 --> 00:32:36.901
So that's something you should consider as
to how, what your layout, how your layout

00:32:36.901 --> 00:32:40.330
might change between portrait mode and landscape
mode.

00:32:40.330 --> 00:32:46.270
To me, the big differentiating factor is actually
the orientation as opposed to the physical

00:32:46.270 --> 00:32:47.860
size of the screen.

00:32:47.860 --> 00:32:49.570
&gt;&gt;Tony Chen: Right.

00:32:49.570 --> 00:33:01.210
I mean, like, if you do things like write
using fill_parent or wrap con-, for, for the

00:33:01.210 --> 00:33:09.740
container so things will flow properly when
you go from a 7 inch to a 10 inch device.

00:33:09.740 --> 00:33:16.750
But one thing to remember is if you specify
things in dp those assets or controls will

00:33:16.750 --> 00:33:24.250
stay the same size regardless of the, the
7inch or 10 inch.

00:33:24.250 --> 00:33:31.670
So, but if you do the container or the layout
container properly then they will, they will,

00:33:31.670 --> 00:33:37.000
or doing, using percentage and things will
work fine.

00:33:37.000 --> 00:33:44.550
&gt;&gt;Ankur Kotwal: So I think that's all the
questions that we had on this week's topic

00:33:44.550 --> 00:33:47.070
so Tony thanks for covering dps.

00:33:47.070 --> 00:33:52.020
The one thing we talked about was sort of
the advantages of dp but the big take away

00:33:52.020 --> 00:33:57.920
I think developers should really go back with
is don't use pixels in your layout.

00:33:57.920 --> 00:34:03.040
Don't specify user interfaces with pixels
because that's not going to scale across the

00:34:03.040 --> 00:34:05.880
wide ecosystem of devices that we have.

00:34:05.880 --> 00:34:13.190
You know, build scalable user interfaces and
dps are certainly one way to do that.

00:34:13.190 --> 00:34:18.000
The other way of building sort of flexible
user interfaces is using things like wrap

00:34:18.000 --> 00:34:23.710
content or fill_parent on your layouts as
well.

00:34:23.710 --> 00:34:25.350
&gt;&gt;Tony Chen: Right.

00:34:25.350 --> 00:34:30.110
&gt;&gt;Ankur Kotwal: Alright, so we've got three
other questions on here, Tony.

00:34:30.110 --> 00:34:32.050
I'll just take them from the top.

00:34:32.050 --> 00:34:33.520
&gt;&gt;Tony Chen: Sure.

00:34:33.520 --> 00:34:38.870
&gt;&gt;Ankur Kotwal: "I'm implementing in app billing
but when I try to buy some item in the sample

00:34:38.870 --> 00:34:43.800
app, I don't get a response from my app and
after a few minutes I get an error of reason

00:34:43.800 --> 00:34:46.000
took too long to deliver.

00:34:46.000 --> 00:34:50.900
This bug was in the known issues for almost
a year, is there an update?"

00:34:50.900 --> 00:34:56.370
I didn't know it was a known issue and certainly
I've played with in app billing and I haven't

00:34:56.370 --> 00:34:58.220
had this particular issue.

00:34:58.220 --> 00:35:04.390
So, I don't know if you've got more to add
Tony but it'd be great if this person, "BRNO",

00:35:04.390 --> 00:35:11.110
would contact us separately and just let us
know what the issue, if she or he has got

00:35:11.110 --> 00:35:12.110
a bug raised.

00:35:12.110 --> 00:35:19.370
&gt;&gt;Tony Chen: I'm not aware that there is a
bug but one thing that may cause that reason,

00:35:19.370 --> 00:35:28.640
took too long to deliver, is some of the transaction
orders is actually maybe flagged as fraud

00:35:28.640 --> 00:35:34.710
or, you know, from a risk engine.

00:35:34.710 --> 00:35:40.770
So I think one thing developers should have
expectation is there are a certain percentage

00:35:40.770 --> 00:35:49.900
of orders that will be flagged as potential
risk fraud.

00:35:49.900 --> 00:35:56.810
And for those orders it will not process go
through and that's a result, could be a result

00:35:56.810 --> 00:35:58.880
of that took too long and-

00:35:58.880 --> 00:36:03.780
&gt;&gt;Ankur Kotwal: It shouldn't happen in the
test app, though, cause if he's using, he

00:36:03.780 --> 00:36:09.990
or she are using that sample app it should
be using the package names that are using

00:36:09.990 --> 00:36:11.240
the test nomenclature.

00:36:11.240 --> 00:36:12.500
&gt;&gt;Tony Chen: Okay.

00:36:12.500 --> 00:36:16.513
&gt;&gt;Ankur Kotwal: So, the risk engine site shouldn't
come into play but I'd love to hear from-

00:36:16.513 --> 00:36:23.570
&gt;&gt;Tony Chen: But there are, there are developers,
like, telling some transactions have failing

00:36:23.570 --> 00:36:30.820
so, may not be this case here but that could
be a potential problem.

00:36:30.820 --> 00:36:37.120
Sometimes if you see these transactions didn't
go through and I hate to say it, it's normal

00:36:37.120 --> 00:36:44.520
but it does happen, like, some transactions
does, won't go through for risk reason.

00:36:44.520 --> 00:36:46.290
&gt;&gt;Ankur Kotwal: Yeah.

00:36:46.290 --> 00:36:55.070
Cool, so please do contact Tony or myself
and we can have a deeper dive in it.

00:36:55.070 --> 00:36:59.140
I guess we'd need to see a little bit more
as to exactly what you're doing and we can

00:36:59.140 --> 00:37:01.890
try and take it from there.

00:37:01.890 --> 00:37:07.340
Okay, "According to the Google Cloud Messaging
tutorial, awake lock is required in order

00:37:07.340 --> 00:37:09.330
to handle the registration action.

00:37:09.330 --> 00:37:15.250
How can the device handle registration response
but in sleep mode when sending a request to

00:37:15.250 --> 00:37:17.070
a third party server?

00:37:17.070 --> 00:37:20.600
Any other examples of services requiring awake
lock?"

00:37:20.600 --> 00:37:26.890
&gt;&gt;Tony Chen: Um, I know of an example.

00:37:26.890 --> 00:37:35.060
So, we have an Open Source project called
Prone to Phone and there should be implementation

00:37:35.060 --> 00:37:39.780
on the things you described.

00:37:39.780 --> 00:37:46.210
In terms of getting, handle registration responding
in sleep mode, Ankur, I don't know the andswer.

00:37:46.210 --> 00:37:50.250
Do you have any insight on this, this part?

00:37:50.250 --> 00:37:57.000
&gt;&gt;Ankur Kotwal: No, I mean, I think in general
it's good practice to acquire the awake lock

00:37:57.000 --> 00:38:03.380
if you're waiting for a response because these
things, your request responses are asynchronous

00:38:03.380 --> 00:38:04.380
in nature.

00:38:04.380 --> 00:38:10.730
So if you actually wanted to make sure that
you are, you know, awake so to speak, for

00:38:10.730 --> 00:38:13.170
that duration then you should do so.

00:38:13.170 --> 00:38:16.610
Just be careful in terms of acquiring that
awake lock because you wanna try and minimize

00:38:16.610 --> 00:38:21.600
how long you've got it for because, of course,
the device is not able to sleep at that point

00:38:21.600 --> 00:38:24.380
in time so it's a drain on the battery.

00:38:24.380 --> 00:38:26.030
&gt;&gt;Tony Chen: Yeah, I agree.

00:38:26.030 --> 00:38:30.210
So the third question, the last question,
oh, you have a question?

00:38:30.210 --> 00:38:36.370
&gt;&gt;male #1: Yeah, yeah, I'd like to add more
about this question.

00:38:36.370 --> 00:38:42.530
For example, I have foreground service which
uses a website that's a connection to the

00:38:42.530 --> 00:38:51.090
server and definitely the user can push the
power button to, for the device to go into

00:38:51.090 --> 00:38:52.090
sleep mode.

00:38:52.090 --> 00:39:00.540
Does it mean that I still need to acquire
awake lock so the connection won't be broken?

00:39:00.540 --> 00:39:08.060
&gt;&gt;Ankur Kotwal: If you want to maintain the
persistence of your connection then I would

00:39:08.060 --> 00:39:16.480
recommend, yes, but I would also ask you to
really think about whether that connection

00:39:16.480 --> 00:39:22.400
needs to be persistent, persisted throughout
and that's one of the benefits of Google Cloud

00:39:22.400 --> 00:39:28.250
Messaging aright, so you don't have to have
awake lock the whole time or a connection

00:39:28.250 --> 00:39:33.460
to your server you can have a notification
come through or a message come through and

00:39:33.460 --> 00:39:35.780
then you can spring to action then.

00:39:35.780 --> 00:39:40.450
It's event based rather than you having to
maintain this persistent connection.

00:39:40.450 --> 00:39:42.820
&gt;&gt;male #1: Okay, thank you.

00:39:42.820 --> 00:39:48.290
&gt;&gt;Tony Chen: Okay, so the last question we
have here is, "Can you recommend the best

00:39:48.290 --> 00:39:54.200
way to implement themes in Android since you
point to cover dpi and other related topics

00:39:54.200 --> 00:39:58.310
maybe you can consider having an info about
themes, too."

00:39:58.310 --> 00:40:05.390
So, first of all, that's a great suggestion
and I think, like, theme itself could be another

00:40:05.390 --> 00:40:15.990
ADL+ presentation so definitely we'll look
into that and hopefully we'll have another

00:40:15.990 --> 00:40:19.640
session about themes, specifically, in the
future.

00:40:19.640 --> 00:40:29.070
&gt;&gt;Ankur Kotwal: Yeah, in the meantime, though,
we've actually got a fairly extensive section

00:40:29.070 --> 00:40:35.130
on developer.android.com in the guide section
on styles and themes and it walks you through,

00:40:35.130 --> 00:40:39.030
sort of, how to style, do some basic styling.

00:40:39.030 --> 00:40:42.610
I think that's a great place to get started.

00:40:42.610 --> 00:40:47.830
There are more, sort of, community based examples
that I've seen that go to a larger extent

00:40:47.830 --> 00:40:54.420
so I'd seen a community effort for building
the hollow theme for older Android versions,

00:40:54.420 --> 00:40:55.420
for example.

00:40:55.420 --> 00:40:59.040
So, what I suggest is to start with this guide
and then go have a look at some of these community

00:40:59.040 --> 00:41:05.040
efforts and see how people are building, you
know, building advanced themes so to speak.

00:41:05.040 --> 00:41:07.010
But yes, thanks for the suggestion.

00:41:07.010 --> 00:41:09.720
I think that's a good idea for a future topic
as well.

00:41:09.720 --> 00:41:11.010
&gt;&gt;Tony Chen: Yep.

00:41:11.010 --> 00:41:14.010
&gt;&gt;Ankur Kotwal: Okay, well, anyone else have
any questions?

00:41:14.010 --> 00:41:16.660
&gt;&gt;Andrew Kelly: I had one.

00:41:16.660 --> 00:41:19.310
&gt;&gt;Ankur Kotwal: Yeah, go ahead.

00:41:19.310 --> 00:41:20.310
[Pause]

00:41:20.310 --> 00:41:21.970
&gt;&gt;Tony Chen: Go ahead.

00:41:21.970 --> 00:41:23.560
&gt;&gt;Andrew Kelly: [inaudible]

00:41:23.560 --> 00:41:26.210
&gt;&gt;Ankur Kotwal: There you go.

00:41:26.210 --> 00:41:28.870
Now we can hear you.

00:41:28.870 --> 00:41:36.470
&gt;&gt;Andrew Kelly: I just have one from the chat
window there, when I'm using 9-patches, do

00:41:36.470 --> 00:41:41.400
I need to specify a PNG file for each of the
different DPI buckets or do I just need to

00:41:41.400 --> 00:41:45.580
have one in my drawable folder that will cover
me for everything?

00:41:45.580 --> 00:41:51.250
&gt;&gt;Ankur Kotwal: I think you could get away
with just having the one.

00:41:51.250 --> 00:41:56.740
I wouldn't put it the drawable folder, we
actually have one called the drawable-nodpi

00:41:56.740 --> 00:42:02.140
which is kind of like the explicit one to
say that this applies to every bucket.

00:42:02.140 --> 00:42:07.590
I mean, it will work but just from a best
practices point of view we recommend using

00:42:07.590 --> 00:42:09.630
the no dpi nomenclature.

00:42:09.630 --> 00:42:11.390
&gt;&gt;Andrew Kelly: Cool.

00:42:11.390 --> 00:42:13.160
&gt;&gt;Tony Chen: Yeah.

00:42:13.160 --> 00:42:18.850
I think using 9 patches would, it can be another
topic so in the future we can talk about it.

00:42:18.850 --> 00:42:19.850
[Laughter]

00:42:19.850 --> 00:42:24.420
&gt;&gt;Andrew Kelly: I just wanted to make sure
that I didn't need to have, sort of, a high

00:42:24.420 --> 00:42:28.380
res 9 patch for high res devices in a sort
of low res-

00:42:28.380 --> 00:42:31.590
&gt;&gt;Ankur Kotwal: Potentially you can.

00:42:31.590 --> 00:42:33.150
Depends on how big the image is, right?

00:42:33.150 --> 00:42:34.380
&gt;&gt;Andrew Kelly: Yeah.

00:42:34.380 --> 00:42:39.920
&gt;&gt;Ankur Kotwal: So if you're doing it for
styling, you know, UI then maybe you can get

00:42:39.920 --> 00:42:45.400
away without it but if you're doing, you know,
high res images that you're expecting to stretch

00:42:45.400 --> 00:42:48.130
like a background

00:42:48.130 --> 00:42:51.530
&gt;&gt;Andrew Kelly: Just things like buttons and
things like that so at the moment I've been

00:42:51.530 --> 00:42:57.980
using, defining them in xml using gradients
and stuff and strokes so I don't have to have

00:42:57.980 --> 00:43:01.820
a 9 patch instead and that seems to work quite
well . So I was just thinking I needed a more

00:43:01.820 --> 00:43:09.110
fancy button that couldn't be defined using
a gradient then I might have to use 9 patches.

00:43:09.110 --> 00:43:14.200
&gt;&gt;Ankur Kotwal: Yeah, you'd probab-, I mean,
ideally you should have, you should be building

00:43:14.200 --> 00:43:19.110
assets for each of those res-, each of those
buckets, but if it's something really small,

00:43:19.110 --> 00:43:23.860
like your 9-patch is really tiny then it might
be overkill.

00:43:23.860 --> 00:43:29.390
There is no, I don't think it's an exact science
so you kind of have to use your judgment as

00:43:29.390 --> 00:43:34.970
to what, at what point you should sort of
break the cord and say no I do need to build

00:43:34.970 --> 00:43:37.970
specific nine patches for each of those buckets.

00:43:37.970 --> 00:43:39.930
&gt;&gt;Andrew Kelly: Cool.

00:43:39.930 --> 00:43:40.930
Cheers.

00:43:40.930 --> 00:43:42.550
&gt;&gt;Ankur Kotwal: Alright.

00:43:42.550 --> 00:43:44.660
We've just had one other person join.

00:43:44.660 --> 00:43:49.880
&gt;&gt;male #1: Can I ask one more question about
the layouts?

00:43:49.880 --> 00:43:51.420
&gt;&gt;Ankur Kotwal: Yeah, absolutely.

00:43:51.420 --> 00:43:57.270
&gt;&gt;male #1: So going back to my question, it
was a question about images from net.

00:43:57.270 --> 00:44:09.540
For example, if I have an image 160 pixels,
so is it the best option to set the maximum

00:44:09.540 --> 00:44:13.860
width like G1 devices or 400 dpi?

00:44:13.860 --> 00:44:20.130
Otherwise it will be like more than a half
screen width, and leave it as is for hdpi

00:44:20.130 --> 00:44:23.610
devices in the image view.

00:44:23.610 --> 00:44:28.910
&gt;&gt;Ankur Kotwal: So just so I make sure that
I've understood your question, do you mean

00:44:28.910 --> 00:44:33.350
whether you should scale the image down or
shrink it so that it's not occupying too much

00:44:33.350 --> 00:44:34.880
physical space on the device?

00:44:34.880 --> 00:44:36.630
&gt;&gt;male #1: Yeah.

00:44:36.630 --> 00:44:40.910
&gt;&gt;Ankur Kotwal: Yeah, I would, I would definitely
do that.

00:44:40.910 --> 00:44:42.400
I would shrink it where possible.

00:44:42.400 --> 00:44:44.680
I mean, where it makes sense.

00:44:44.680 --> 00:44:49.240
So there is some work that you need to do
if you're pulling assets from some remote

00:44:49.240 --> 00:44:55.030
server that, whose resolution you don't have
any control over.

00:44:55.030 --> 00:45:00.260
As to what makes sense for your UI, so if
it only makes sense for your, you know, whatever

00:45:00.260 --> 00:45:05.520
it is to be only 30 percent of the width of
the screen then that's going to, you know,

00:45:05.520 --> 00:45:11.720
that 30 percent, the actual number of, the
size of it is going to differ depending on

00:45:11.720 --> 00:45:13.320
which you're running on.

00:45:13.320 --> 00:45:16.400
So, yeah, absolutely you'd wanna scale that.

00:45:16.400 --> 00:45:20.990
Things like linear layouts can help there
because you can set weights and so on and

00:45:20.990 --> 00:45:26.140
have it done for you but it really depends
how custom built your UI is and how much control

00:45:26.140 --> 00:45:27.410
you're exerting over it.

00:45:27.410 --> 00:45:31.990
&gt;&gt;Andrew Kelly: Is that what the scale type
is for on the image view to say send to fit

00:45:31.990 --> 00:45:33.260
or send to crop?

00:45:33.260 --> 00:45:34.260
That kind of stuff?

00:45:34.260 --> 00:45:35.260
&gt;&gt;Ankur Kotwal: Yeah.

00:45:35.260 --> 00:45:37.030
That's exactly right, yeah.

00:45:37.030 --> 00:45:42.110
But on top of that if you, so if you're doing
it based on weights then you need the linear

00:45:42.110 --> 00:45:45.890
layout weights to come through as well over
and above that, right?

00:45:45.890 --> 00:45:51.110
But the scale type will definitely say, you
know, hey if my view is bigger than the image

00:45:51.110 --> 00:45:52.940
then what should I do with it?

00:45:52.940 --> 00:45:54.590
So, yeah.

00:45:54.590 --> 00:45:57.070
&gt;&gt;male #1: Thanks.

00:45:57.070 --> 00:46:03.310
&gt;&gt;Ankur Kotwal: Alright, well, if there is
nothing else thank you for joining us this

00:46:03.310 --> 00:46:04.310
week.

00:46:04.310 --> 00:46:12.690
I suspect that we are going to, we're not
going to run the ADL+ next week because of

00:46:12.690 --> 00:46:19.890
a scheduling conflict but we will be back
soon and, yeah, again keep the feedback coming.

00:46:19.890 --> 00:46:26.440
We've had quite a few suggestions for topics
that we should cover in the future and we

00:46:26.440 --> 00:46:29.460
are definitely taking that on board and prioritizing
accordingly.

00:46:29.460 --> 00:46:30.460
&gt;&gt;male #2: Hello?

00:46:30.460 --> 00:46:32.070
&gt;&gt;Ankur Kotwal: Oh, hi there.

00:46:32.070 --> 00:46:36.310
&gt;&gt;male #2: Hi, can I have one question, one
more question?

00:46:36.310 --> 00:46:38.100
&gt;&gt;Ankur Kotwal: Yeah, absolutely.

00:46:38.100 --> 00:46:42.330
&gt;&gt;male #2: I'm the guy with the in app billing
problem.

00:46:42.330 --> 00:46:50.200
You responded before and I have one question.

00:46:50.200 --> 00:46:58.770
My first payment was from a credit card where
I don't have enough money and that can be

00:46:58.770 --> 00:47:10.390
a problem and when I run a different card
and after some more payments I've got cancellation

00:47:10.390 --> 00:47:13.180
of this payment.

00:47:13.180 --> 00:47:17.880
Can it be DOS problem?

00:47:17.880 --> 00:47:19.380
If you understand?

00:47:19.380 --> 00:47:22.480
&gt;&gt;Ankur Kotwal: Yeah, so, Tony do you wanna
grab this one?

00:47:22.480 --> 00:47:29.220
&gt;&gt;male #2: I can show you some screen share.

00:47:29.220 --> 00:47:33.930
&gt;&gt;Ankur Kotwal: Yeah, just be careful of not
showing any of your credit card details cause

00:47:33.930 --> 00:47:35.530
that won't be a good thing.

00:47:35.530 --> 00:47:36.530
[Laughter]

00:47:36.530 --> 00:47:40.680
&gt;&gt;Tony Chen: Maybe we can do this off line
you can-

00:47:40.680 --> 00:47:44.291
&gt;&gt;male #2: I can show, it's no problem.

00:47:44.291 --> 00:47:45.750
&gt;&gt;Ankur Kotwal: No, I don't think we should,
actually.

00:47:45.750 --> 00:47:48.070
I think we, I think it's better that we don't.

00:47:48.070 --> 00:47:49.870
&gt;&gt;Tony Chen: Let's do that offline.

00:47:49.870 --> 00:47:50.870
&gt;&gt;male #2: Okay.

00:47:50.870 --> 00:47:54.460
&gt;&gt;Ankur Kotwal: When it comes to payment that
sort of stuff can be quite sensitive so what

00:47:54.460 --> 00:48:01.590
I'd suggest is, look, we'll wrap up the ADL+
here and let's solve, Tony and I will contact

00:48:01.590 --> 00:48:05.660
you straight afterwards and we'll continue
our discussion through that.

00:48:05.660 --> 00:48:07.360
&gt;&gt;male #2: Okay, thank you.

00:48:07.360 --> 00:48:09.060
&gt;&gt;Ankur Kotwal: Thank you everyone.

00:48:09.060 --> 00:48:10.420
&gt;&gt;Tony Chen: Thank you.

