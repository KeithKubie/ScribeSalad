WEBVTT
Kind: captions
Language: en

00:00:01.369 --> 00:00:03.160
AVNISH MIDUTHURI: Good
afternoon, everyone.

00:00:03.160 --> 00:00:05.260
Welcome, and thank you
for joining this session

00:00:05.260 --> 00:00:08.310
on Turbocharging App
Conversions with Android Pay.

00:00:08.310 --> 00:00:11.157
I'm Avnish Miduthuri, a
product manager on Android Pay.

00:00:11.157 --> 00:00:13.490
I'm joined here today by
Walter Cacau, software engineer

00:00:13.490 --> 00:00:15.092
on the Android Pay team.

00:00:15.092 --> 00:00:17.050
We're here to talk to
you today about the state

00:00:17.050 --> 00:00:18.924
of in-app commerce and
some of the challenges

00:00:18.924 --> 00:00:21.930
we see with in-app commerce
and how Android Pay can

00:00:21.930 --> 00:00:23.990
help address some
of these challenges

00:00:23.990 --> 00:00:27.687
for sales of physical goods
and services in your apps.

00:00:27.687 --> 00:00:29.520
You'll hear from one
of our launch partners,

00:00:29.520 --> 00:00:32.189
OpenTable, and how Android
Pay has enabled richer,

00:00:32.189 --> 00:00:35.300
streamlined experiences
for their users outside

00:00:35.300 --> 00:00:37.622
of a traditional checkout.

00:00:37.622 --> 00:00:40.080
And finally, Walter's going to
walk you through the Android

00:00:40.080 --> 00:00:42.430
Pay API's to show
you how easy it

00:00:42.430 --> 00:00:45.350
is to add fast, streamlined
payments to your app

00:00:45.350 --> 00:00:46.728
with just a few lines of code.

00:00:49.514 --> 00:00:51.930
So to get started, I want to
talk about where we are today

00:00:51.930 --> 00:00:52.805
with mobile commerce.

00:00:52.805 --> 00:00:55.450
We've all heard about the
potential for mobile commerce

00:00:55.450 --> 00:00:57.366
through the last few years.

00:00:57.366 --> 00:00:59.740
But it's exciting that we're
now at this inflection point

00:00:59.740 --> 00:01:02.560
where commerce is going
mobile first and leaving

00:01:02.560 --> 00:01:04.830
online commerce in the dust.

00:01:04.830 --> 00:01:07.130
That's not to say that
e-commerce isn't growing.

00:01:07.130 --> 00:01:10.790
In fact, in the last year alone,
e-commerce grew at about 10%,

00:01:10.790 --> 00:01:12.770
but m-commerce grew
at about 3x that rate.

00:01:16.550 --> 00:01:20.460
And all that commerce
is happening in apps.

00:01:20.460 --> 00:01:24.290
Over 64% of global
smartphone users

00:01:24.290 --> 00:01:26.050
reported making a
purchase in apps.

00:01:28.770 --> 00:01:31.120
The in-app commerce
is happening in a lot

00:01:31.120 --> 00:01:33.200
of the traditional
shopping and retail apps

00:01:33.200 --> 00:01:36.600
that you're familiar with on
the web, and a lot of that

00:01:36.600 --> 00:01:38.330
is now moving to apps.

00:01:38.330 --> 00:01:40.840
But increasingly, a
lot of in-app commerce

00:01:40.840 --> 00:01:45.640
is being powered by innovative
platforms, on-demand services,

00:01:45.640 --> 00:01:47.635
and marketplaces.

00:01:47.635 --> 00:01:49.510
And you've all seen apps
in these categories.

00:01:49.510 --> 00:01:52.390
They're disrupting
high-frequency, high-spend

00:01:52.390 --> 00:01:55.140
categories like transportation,
food and grocery

00:01:55.140 --> 00:01:59.530
delivery, hotel reservations,
hospitality, parking,

00:01:59.530 --> 00:02:01.940
household services, and a
bunch of other categories

00:02:01.940 --> 00:02:04.607
that I haven't listed here.

00:02:04.607 --> 00:02:06.440
And you recognize some
of the top innovators

00:02:06.440 --> 00:02:08.810
in each of these categories.

00:02:08.810 --> 00:02:10.650
And all of these
apps, as it turns out,

00:02:10.650 --> 00:02:11.760
have added Android Pay.

00:02:14.257 --> 00:02:16.340
So that's the good news,
is that a lot of commerce

00:02:16.340 --> 00:02:18.180
is now happening in apps.

00:02:18.180 --> 00:02:20.590
But the not so great news
is that conversion is still

00:02:20.590 --> 00:02:22.900
a huge, huge challenge.

00:02:22.900 --> 00:02:25.220
And if you attended the
session today on mobile web

00:02:25.220 --> 00:02:27.660
and how payment request
is solving that,

00:02:27.660 --> 00:02:30.080
I think the problem is still
the same in apps as well.

00:02:30.080 --> 00:02:31.530
It's the long
registration forms,

00:02:31.530 --> 00:02:34.410
the long checkout forms
with over 15 steps

00:02:34.410 --> 00:02:37.560
to add your full credit
card number, your CVC,

00:02:37.560 --> 00:02:40.500
your expiration date,
your full billing address,

00:02:40.500 --> 00:02:42.400
and if you're shipping
somewhere else,

00:02:42.400 --> 00:02:44.106
your shipping address as well.

00:02:47.830 --> 00:02:51.040
So it's not surprising
that over 55% of users

00:02:51.040 --> 00:02:53.910
drop out of a mobile
checkout flow.

00:02:53.910 --> 00:02:56.310
If you look at overall
card conversion,

00:02:56.310 --> 00:03:00.310
it's even lower, lower
than 15% on mobile.

00:03:00.310 --> 00:03:01.860
And a lot of apps
today are starting

00:03:01.860 --> 00:03:03.912
to solve this problem
by creating sign ups,

00:03:03.912 --> 00:03:05.620
getting people to sign
up for an account,

00:03:05.620 --> 00:03:08.370
saving some of that information
so users don't have to enter it

00:03:08.370 --> 00:03:09.652
again the next time.

00:03:09.652 --> 00:03:12.330
But what's the
problem with that?

00:03:12.330 --> 00:03:14.090
Remembering passwords.

00:03:14.090 --> 00:03:16.670
Over 76% of users report
forgetting their passwords

00:03:16.670 --> 00:03:20.060
and having to reset them
repeatedly by the way.

00:03:20.060 --> 00:03:21.831
So how can we
solve this problem?

00:03:21.831 --> 00:03:23.080
We think Android Pay can help.

00:03:25.650 --> 00:03:28.270
You can let users check out your
app and check out as a guest

00:03:28.270 --> 00:03:31.801
without having to sign up for
an account or use any password.

00:03:31.801 --> 00:03:33.300
And that's because
users are already

00:03:33.300 --> 00:03:35.676
signed into their Google
account on their Android device.

00:03:35.676 --> 00:03:38.133
And with the Android Pay, when
they click a purchase button

00:03:38.133 --> 00:03:40.570
in your app, they can
easily share their payment

00:03:40.570 --> 00:03:42.940
and shipping
information with the app

00:03:42.940 --> 00:03:45.390
with just a single click.

00:03:45.390 --> 00:03:47.120
I'm going to demonstrate here.

00:03:47.120 --> 00:03:49.760
Actually, this is Fancy, one
of my favorite shopping apps.

00:03:49.760 --> 00:03:54.150
And one of the early developers
that added Android Pay.

00:03:54.150 --> 00:03:57.690
Can you switch to
[INAUDIBLE] please?

00:03:57.690 --> 00:03:59.149
I'm going to go to Fancy.

00:03:59.149 --> 00:04:00.690
And there's this
nice Moscow mule mug

00:04:00.690 --> 00:04:03.120
that I've been eyeing there
since I created that slide.

00:04:03.120 --> 00:04:07.150
So I'm going to actually
try to buy it now.

00:04:07.150 --> 00:04:07.650
There.

00:04:07.650 --> 00:04:08.483
Just a single click.

00:04:08.483 --> 00:04:10.570
And you'll notice how
quickly that UI surfaced up.

00:04:10.570 --> 00:04:11.470
That's a native UI.

00:04:11.470 --> 00:04:12.530
It's a new [? biflow. ?]
If you've actually

00:04:12.530 --> 00:04:14.370
checked out Android
Pay in apps today,

00:04:14.370 --> 00:04:15.120
it's a slightly
different [? biflow. ?]

00:04:15.120 --> 00:04:16.680
But this is a new flow
we're going to be coming out

00:04:16.680 --> 00:04:18.000
within a few weeks.

00:04:18.000 --> 00:04:19.600
And again, as
developers, when we

00:04:19.600 --> 00:04:22.019
make these product improvements,
you get them for free.

00:04:22.019 --> 00:04:23.719
There's no
re-integration required.

00:04:23.719 --> 00:04:25.260
So we'll be innovating
on the product

00:04:25.260 --> 00:04:27.280
and improving
conversion over time.

00:04:27.280 --> 00:04:29.910
And as developers, you'll
just get these benefits.

00:04:29.910 --> 00:04:33.265
So I can actually authenticate
with my fingerprint here.

00:04:33.265 --> 00:04:35.140
You'll see that the
information's passed back

00:04:35.140 --> 00:04:35.847
to the app.

00:04:35.847 --> 00:04:36.930
They've used the shipping.

00:04:36.930 --> 00:04:38.130
Fancy's used the
shipping address

00:04:38.130 --> 00:04:39.790
to calculate the
shipping amount here.

00:04:39.790 --> 00:04:42.160
And if it looks good, I'm
going to go ahead and submit

00:04:42.160 --> 00:04:43.560
the order.

00:04:43.560 --> 00:04:48.955
And if my card actually gets
successfully approved here--

00:04:48.955 --> 00:04:50.440
there we go.

00:04:50.440 --> 00:04:53.840
So Fancy confirmed the order.

00:04:53.840 --> 00:04:55.090
That's amazing.

00:04:55.090 --> 00:04:58.370
And what you'll notice is
right as they charge my card,

00:04:58.370 --> 00:05:02.829
there's also a notification from
Android Pay with the app logo.

00:05:02.829 --> 00:05:05.370
And so your users will be taken
to an Android Pay [INAUDIBLE]

00:05:05.370 --> 00:05:05.960
receipt here.

00:05:05.960 --> 00:05:08.760
They can see that your app logo,
and they can open up your app

00:05:08.760 --> 00:05:11.800
if you want to surface more
information about their order,

00:05:11.800 --> 00:05:13.167
shipping times, et cetera.

00:05:25.190 --> 00:05:27.975
So you see now Android Pay's
actually fast for users.

00:05:27.975 --> 00:05:29.850
What that means for you
as developers is it's

00:05:29.850 --> 00:05:32.210
going to really increase
conversion in your app.

00:05:32.210 --> 00:05:35.610
And we've seen these
different results from Fancy,

00:05:35.610 --> 00:05:38.120
for example, that reported
over 20% of their orders

00:05:38.120 --> 00:05:41.037
coming in from Android
Pay and 2x the conversion

00:05:41.037 --> 00:05:43.120
with Android Pay relative
to other payment methods

00:05:43.120 --> 00:05:45.770
in their app.

00:05:45.770 --> 00:05:48.899
Android Pay is also super easy
for developers to integrate.

00:05:48.899 --> 00:05:51.190
Walter's going to walk you
through the API's in detail.

00:05:51.190 --> 00:05:53.546
But just as a data point,
we hosted hackathons

00:05:53.546 --> 00:05:54.920
for some of our
early developers,

00:05:54.920 --> 00:05:57.670
and almost all developers were
able to integrate Android Pay

00:05:57.670 --> 00:05:59.620
and add it, do an
end-to-end integration

00:05:59.620 --> 00:06:02.020
with Android Pay in
just a few hours.

00:06:02.020 --> 00:06:04.230
And finally, Android Pay
is more secure for everyone

00:06:04.230 --> 00:06:05.682
in the ecosystem.

00:06:05.682 --> 00:06:07.140
Secure for users
because they don't

00:06:07.140 --> 00:06:08.765
have to hand out
their full credit card

00:06:08.765 --> 00:06:12.250
numbers to merchants and
worry about merchants getting

00:06:12.250 --> 00:06:13.000
breached.

00:06:13.000 --> 00:06:14.500
The way we achieve
this is something

00:06:14.500 --> 00:06:16.200
called payment tokenization.

00:06:16.200 --> 00:06:19.040
So instead of returning the
user's actual credit card

00:06:19.040 --> 00:06:21.210
number, we're generating
a virtual account number

00:06:21.210 --> 00:06:23.870
when a user sets up Android Pay,
and that's the number that's

00:06:23.870 --> 00:06:26.420
shared with merchant apps.

00:06:26.420 --> 00:06:29.150
Along with that, you'll
also get a dynamic security

00:06:29.150 --> 00:06:34.032
code that ensures that that
token can be used only once.

00:06:34.032 --> 00:06:35.740
Merchants benefit from
the authentication

00:06:35.740 --> 00:06:36.620
that we do on users.

00:06:36.620 --> 00:06:38.870
Users authenticate and
set up a device analog,

00:06:38.870 --> 00:06:40.680
including fingerprint
on supportive devices

00:06:40.680 --> 00:06:43.610
like you saw there.

00:06:43.610 --> 00:06:46.220
So you've heard from me about
the benefits of Android Pay,

00:06:46.220 --> 00:06:48.511
but I wanted you to hear from
one of our close partners

00:06:48.511 --> 00:06:50.187
and early launch
merchants, OpenTable.

00:06:50.187 --> 00:06:51.770
And you may be
familiar with OpenTable

00:06:51.770 --> 00:06:53.435
as a reservations
app, but I wanted

00:06:53.435 --> 00:06:55.310
you to hear how they've
enabled rich commerce

00:06:55.310 --> 00:06:57.250
experiences with Android Pay.

00:06:57.250 --> 00:07:00.344
So I'd like to invite Mike
[INAUDIBLE] from OpenTable.

00:07:00.344 --> 00:07:03.683
[APPLAUSE]

00:07:05.600 --> 00:07:06.900
MIKE: Thanks, Avnish.

00:07:06.900 --> 00:07:08.400
On behalf of
OpenTable, we're really

00:07:08.400 --> 00:07:11.700
excited to be part of Google
I/O. So for those of you

00:07:11.700 --> 00:07:14.980
who don't know, OpenTable is
the world's leading provider

00:07:14.980 --> 00:07:17.150
of online restaurant
reservations.

00:07:17.150 --> 00:07:19.920
We seat roughly 19
million diners a month

00:07:19.920 --> 00:07:24.970
across 37,000 restaurants
all over the world.

00:07:24.970 --> 00:07:27.400
Since our date of
inception in 1998,

00:07:27.400 --> 00:07:29.480
we've seated over a
billion diners globally.

00:07:32.980 --> 00:07:35.920
What we enabled users to do
is search and find restaurants

00:07:35.920 --> 00:07:38.430
based on their availability
and provide information

00:07:38.430 --> 00:07:41.150
such as verified
user reviews, menus,

00:07:41.150 --> 00:07:43.940
and other relevant restaurant
information up front

00:07:43.940 --> 00:07:47.100
and allow them to easily book
through mobile apps and sites.

00:07:47.100 --> 00:07:49.940
And as Avnish mentioned
before, alluded to,

00:07:49.940 --> 00:07:53.820
we also support allowing
users to pay their check

00:07:53.820 --> 00:07:55.120
through the mobile app.

00:07:55.120 --> 00:07:57.500
And the goal of
payments was really

00:07:57.500 --> 00:08:00.500
to improve that end
of meal experience.

00:08:00.500 --> 00:08:02.580
Well, a typical
experience usually

00:08:02.580 --> 00:08:05.560
starts with the end of the
meal, and you request a check

00:08:05.560 --> 00:08:06.957
from your waiter.

00:08:06.957 --> 00:08:08.790
Your waiter then goes
to the point of sales,

00:08:08.790 --> 00:08:11.124
prints it out, and then
hands you the check.

00:08:11.124 --> 00:08:12.790
And then you hand
your credit card over,

00:08:12.790 --> 00:08:16.289
the credit card gets run,
brings the check back.

00:08:16.289 --> 00:08:18.830
You have to do some mental math
quickly to calculate the tip,

00:08:18.830 --> 00:08:21.140
and then you finally
sign the check.

00:08:21.140 --> 00:08:22.880
And so with payments
on OpenTable,

00:08:22.880 --> 00:08:26.270
we're really trying to
eliminate all those steps,

00:08:26.270 --> 00:08:27.550
except for the last one.

00:08:27.550 --> 00:08:30.128
So all you have to do
now is simply tap to pay.

00:08:32.492 --> 00:08:33.950
So I think a lot
of you can kind of

00:08:33.950 --> 00:08:35.010
relate with the
pain points we're

00:08:35.010 --> 00:08:36.530
trying to solve with payments.

00:08:36.530 --> 00:08:39.690
Particularly, for instance, if
you were planning a night out,

00:08:39.690 --> 00:08:42.570
you have dinner and a
show or movie or meeting

00:08:42.570 --> 00:08:44.324
up with friends.

00:08:44.324 --> 00:08:45.990
And you've come to
the part of the night

00:08:45.990 --> 00:08:47.870
where you've ended your
meal, and now you're

00:08:47.870 --> 00:08:51.170
doing the dance trying to
get the waiter's attention.

00:08:51.170 --> 00:08:52.130
You make eye contact.

00:08:52.130 --> 00:08:54.590
You do the whole
signing thing in the air

00:08:54.590 --> 00:08:57.990
just so you can
close out your bill.

00:08:57.990 --> 00:09:00.540
So my team at OpenTable,
we kind of encountered

00:09:00.540 --> 00:09:04.760
that similar situation where
we went out for a team lunch.

00:09:04.760 --> 00:09:07.710
And you hear a lot of these
kind of situations where--

00:09:07.710 --> 00:09:10.830
we went out for a team
lunch, and we kind of sort of

00:09:10.830 --> 00:09:12.809
forgot our meeting at 1 o'clock.

00:09:12.809 --> 00:09:13.850
And we were running late.

00:09:13.850 --> 00:09:15.520
So we were able to
tell our waiter, hey.

00:09:15.520 --> 00:09:17.330
We're going to pay
with OpenTable.

00:09:17.330 --> 00:09:20.210
So you see all five of us
get up and walk out the door,

00:09:20.210 --> 00:09:21.590
and we just simply
tapped to pay.

00:09:21.590 --> 00:09:23.800
And that really makes that
seamless and streamlined

00:09:23.800 --> 00:09:27.780
experience really relevant.

00:09:27.780 --> 00:09:31.970
But as Avnish mentioned
before, getting set up

00:09:31.970 --> 00:09:36.490
with Pay there are some
necessary evils like getting

00:09:36.490 --> 00:09:37.891
our user set up
for payments, you

00:09:37.891 --> 00:09:39.140
need to have a payment method.

00:09:39.140 --> 00:09:42.140
So it typically involves
adding a credit card

00:09:42.140 --> 00:09:45.204
number, expiry
date, CVC, zip code,

00:09:45.204 --> 00:09:46.620
and we also ask
for a phone number

00:09:46.620 --> 00:09:49.436
to verify your identification.

00:09:49.436 --> 00:09:50.810
Which then we'll
send you a code.

00:09:50.810 --> 00:09:52.351
And then once you're
verified, you're

00:09:52.351 --> 00:09:54.080
finally set up for payments.

00:09:54.080 --> 00:09:57.820
And as you can see, it involves
a pretty complicated process,

00:09:57.820 --> 00:10:00.500
a lot of friction involved.

00:10:00.500 --> 00:10:03.210
But with Android Pay,
you really eliminate

00:10:03.210 --> 00:10:08.570
all of these kind of hiccups,
and the steps get set up.

00:10:08.570 --> 00:10:12.940
So all you really have to do
is have your device set up

00:10:12.940 --> 00:10:14.440
for Android Pay,
and we'll recognize

00:10:14.440 --> 00:10:16.980
that you are properly set up.

00:10:16.980 --> 00:10:19.430
And we'll automatically
set you up for payments.

00:10:19.430 --> 00:10:21.250
So all you have to do
is make a reservation

00:10:21.250 --> 00:10:24.100
and pretty much enjoy your meal.

00:10:24.100 --> 00:10:28.640
At the end of your meal, you'll
get your check on your phone.

00:10:28.640 --> 00:10:30.490
You'll be able to
choose a tip amount.

00:10:30.490 --> 00:10:31.310
And don't worry.

00:10:31.310 --> 00:10:32.730
We'll help you calculate it.

00:10:32.730 --> 00:10:36.890
And all you have to do
is tap on Android Pay.

00:10:36.890 --> 00:10:38.550
And as Avnish was
mentioning before,

00:10:38.550 --> 00:10:41.150
you'll get a push notification
confirming that your card has

00:10:41.150 --> 00:10:42.260
been charged.

00:10:42.260 --> 00:10:44.484
And with the added bonus
of being in Android Pay,

00:10:44.484 --> 00:10:46.900
you get to see this charge
along with all your Android Pay

00:10:46.900 --> 00:10:49.450
transactions in the
Android Pay app.

00:10:49.450 --> 00:10:51.440
So at OpenTable, we
really truly believe

00:10:51.440 --> 00:10:55.920
that with payments when no
cash or cards exchange hands,

00:10:55.920 --> 00:10:57.975
you're really free
to enjoy the moment.

00:10:57.975 --> 00:10:59.600
And with that, I'd
like to hand it over

00:10:59.600 --> 00:11:01.240
to Walter who will
walk you through how

00:11:01.240 --> 00:11:02.900
to get your app set up.

00:11:02.900 --> 00:11:04.841
[APPLAUSE]

00:11:06.461 --> 00:11:07.710
WALTER CACAU: Thank you, Mike.

00:11:07.710 --> 00:11:10.043
So now let's see how you can
add Android Pay to your app

00:11:10.043 --> 00:11:11.110
in less than 20 minutes.

00:11:13.770 --> 00:11:14.270
OK.

00:11:14.270 --> 00:11:16.560
So first, let's go to our
overview of the Android Pay

00:11:16.560 --> 00:11:19.910
API's that it will
need to call in order

00:11:19.910 --> 00:11:21.690
to add Android Pay to your app.

00:11:21.690 --> 00:11:24.770
Usually when the user goes
through checkout experience

00:11:24.770 --> 00:11:30.200
using Android Pay, they will
go through three major steps.

00:11:30.200 --> 00:11:33.530
The first one is they
will see the Android Pay

00:11:33.530 --> 00:11:37.880
button or some option
to select Android Pay.

00:11:37.880 --> 00:11:41.380
Then they will click that
option and be prompted by us

00:11:41.380 --> 00:11:46.620
for a credit card and shipping
address if you request one.

00:11:46.620 --> 00:11:49.530
And finally, when they are
ready to finish the purchase,

00:11:49.530 --> 00:11:52.460
you can request a payment
credential from us

00:11:52.460 --> 00:11:54.361
to charge the user.

00:11:54.361 --> 00:11:54.860
OK.

00:11:54.860 --> 00:11:56.910
So all these three
steps, they actually

00:11:56.910 --> 00:11:59.530
map one-to-one to the
API that we show here.

00:11:59.530 --> 00:12:01.530
The first API is
called isReadyToPay,

00:12:01.530 --> 00:12:04.920
and it will return you a Boolean
indicating if the user has set

00:12:04.920 --> 00:12:07.560
up Android Pay in that device.

00:12:07.560 --> 00:12:10.630
And we highly recommend you to
optimize the user experience

00:12:10.630 --> 00:12:12.730
in case we return
true in this API

00:12:12.730 --> 00:12:16.270
because it will lead to a faster
checkout and overall better

00:12:16.270 --> 00:12:16.770
experience.

00:12:16.770 --> 00:12:18.570
Example of the
optimizations could

00:12:18.570 --> 00:12:20.650
be you could make
the Android Pay

00:12:20.650 --> 00:12:22.710
option be the default
one, especially

00:12:22.710 --> 00:12:25.400
on guest checkout [INAUDIBLE].

00:12:25.400 --> 00:12:29.660
Now, once you have shown the
Android Pay option and the user

00:12:29.660 --> 00:12:31.750
has clicked, the next
step is to actually call

00:12:31.750 --> 00:12:34.650
the loadMaskedWallet
API which will prompt

00:12:34.650 --> 00:12:37.700
the user for their card
and the shipping address

00:12:37.700 --> 00:12:38.420
they want to use.

00:12:38.420 --> 00:12:41.880
And at the end, we'll return
you some masked information.

00:12:41.880 --> 00:12:44.770
Now, the reason why we call
this masked information

00:12:44.770 --> 00:12:47.411
is actually that it doesn't
contain the full payment

00:12:47.411 --> 00:12:47.910
credential.

00:12:47.910 --> 00:12:50.780
So you can't really charge the
user at that point in time,

00:12:50.780 --> 00:12:54.190
but you have enough information
to render a review order

00:12:54.190 --> 00:12:55.330
screen.

00:12:55.330 --> 00:12:57.290
So you have something
for the card.

00:12:57.290 --> 00:13:01.117
You'll see Visa 1234,
and you would also

00:13:01.117 --> 00:13:02.200
have the shipping address.

00:13:02.200 --> 00:13:05.130
So you can adjust the
card with sales tax

00:13:05.130 --> 00:13:07.870
or provide the user with
different shipping option

00:13:07.870 --> 00:13:11.110
depending on where
they live and so forth.

00:13:11.110 --> 00:13:14.020
And finally, when they are
ready to finalize the purchase

00:13:14.020 --> 00:13:15.700
and they have
confirmed their UI,

00:13:15.700 --> 00:13:18.949
you can call the loadFullWallet
API here, the third one,

00:13:18.949 --> 00:13:20.490
and get a payment
credential that you

00:13:20.490 --> 00:13:23.610
can hand over to your
processor and charge the user.

00:13:23.610 --> 00:13:24.110
OK.

00:13:24.110 --> 00:13:26.870
Now let's get to some code.

00:13:26.870 --> 00:13:29.050
So just want to note that
all the API's that we're

00:13:29.050 --> 00:13:30.550
going to talk here,
they are already

00:13:30.550 --> 00:13:32.790
part of the Google Play
services client library.

00:13:32.790 --> 00:13:36.730
So you can start integrating
today if you want to.

00:13:36.730 --> 00:13:38.230
Now let's talk
about the first API

00:13:38.230 --> 00:13:40.600
that we mentioned, isReadyToPay.

00:13:40.600 --> 00:13:42.970
So this API returns
a Boolean indicating

00:13:42.970 --> 00:13:46.550
if the user has Android
Pay set up on that phone.

00:13:46.550 --> 00:13:48.560
And it's just a simple API call.

00:13:48.560 --> 00:13:51.900
You receive the result in
an asynchronous callback.

00:13:51.900 --> 00:13:55.050
And once that result
comes through,

00:13:55.050 --> 00:13:58.010
we highly recommend you to
optimize your experience just

00:13:58.010 --> 00:14:00.600
like OpenTable and Fancy did.

00:14:00.600 --> 00:14:04.730
Now, you know that you need to
show the Android Pay option.

00:14:04.730 --> 00:14:05.870
So how can you show it?

00:14:05.870 --> 00:14:07.370
We actually have
made it really easy

00:14:07.370 --> 00:14:10.760
for you to add an Android
Pay buy button with something

00:14:10.760 --> 00:14:12.720
that we call the WalletFragment.

00:14:12.720 --> 00:14:15.329
So the WalletFragment is just
a regular Android fragment

00:14:15.329 --> 00:14:17.870
that renders this nice looking
button that you see over here,

00:14:17.870 --> 00:14:20.430
and there are some nice
advantage to using it.

00:14:20.430 --> 00:14:24.410
So the first one is there's
actual Android Pay logo asset.

00:14:24.410 --> 00:14:26.410
It ships with Google
Play services APK.

00:14:26.410 --> 00:14:28.690
So it doesn't occupy
any space on your app,

00:14:28.690 --> 00:14:31.119
and they are fairly
high resolution assets.

00:14:31.119 --> 00:14:32.660
Also the button is
highly structural.

00:14:32.660 --> 00:14:35.020
So it can fit a
variety of layouts.

00:14:35.020 --> 00:14:37.300
And the Buy with text
there is translatable.

00:14:37.300 --> 00:14:39.240
So if you have a user
in a Spanish locale,

00:14:39.240 --> 00:14:41.940
they will actually see
this text translated.

00:14:41.940 --> 00:14:44.730
And also, it contains
default click listeners.

00:14:44.730 --> 00:14:47.090
So when the user
clicks on this button,

00:14:47.090 --> 00:14:48.900
it will do the load
masked quality API

00:14:48.900 --> 00:14:50.610
that we talked about for you.

00:14:50.610 --> 00:14:53.900
So overall, it would just
make your integration simpler,

00:14:53.900 --> 00:14:56.690
and we highly
recommend you to use it

00:14:56.690 --> 00:14:59.610
if your flow has a
checkout button like this.

00:14:59.610 --> 00:15:03.060
Now, we know there are several
kinds of purchase experiences

00:15:03.060 --> 00:15:03.940
over there.

00:15:03.940 --> 00:15:09.980
So if your checkout doesn't have
a checkout button like this,

00:15:09.980 --> 00:15:12.800
you are free to call the
loadMaskedWallet API yourself.

00:15:12.800 --> 00:15:14.870
But if you're using
a button like this,

00:15:14.870 --> 00:15:17.350
we highly recommend you
to use the WalletFragment.

00:15:17.350 --> 00:15:17.850
OK.

00:15:17.850 --> 00:15:20.410
So now how you use
the WalletFragment?

00:15:20.410 --> 00:15:21.972
It's basically
three simple steps.

00:15:21.972 --> 00:15:23.430
The first one, as
you can see here,

00:15:23.430 --> 00:15:25.680
is to create the WalletFragment.

00:15:25.680 --> 00:15:27.510
The second one is
to initialize it

00:15:27.510 --> 00:15:28.950
with the masked caller request.

00:15:28.950 --> 00:15:31.480
So it can call the load masked
quality API on your behalf

00:15:31.480 --> 00:15:35.180
and prompt the user for the
card and shipping information.

00:15:35.180 --> 00:15:38.060
And the last step is to
add it to your layout

00:15:38.060 --> 00:15:40.430
as you would add any other
fragment through fragment

00:15:40.430 --> 00:15:43.580
manager and a
fragment transaction.

00:15:43.580 --> 00:15:44.080
OK.

00:15:44.080 --> 00:15:48.880
So let's dive a little deeper
on the masked caller request.

00:15:48.880 --> 00:15:51.450
So the masked caller request
contains several parameters

00:15:51.450 --> 00:15:53.300
that can be used to
customize our flow

00:15:53.300 --> 00:15:54.702
to the needs of your app.

00:15:54.702 --> 00:15:56.410
The only three required
ones are the ones

00:15:56.410 --> 00:15:57.720
shown here in the screen.

00:15:57.720 --> 00:15:59.487
The first one is
the currency code.

00:15:59.487 --> 00:16:01.320
The second one is the
estimated total price.

00:16:01.320 --> 00:16:04.610
And the third one is the
tokenization parameters.

00:16:04.610 --> 00:16:07.910
Now, tokenization parameters
are an interesting kind

00:16:07.910 --> 00:16:09.450
of parameter.

00:16:09.450 --> 00:16:13.640
So they actually specify how we
receive the payment credential

00:16:13.640 --> 00:16:14.749
at the end of your flow.

00:16:14.749 --> 00:16:16.790
There are two ways that
you can receive a payment

00:16:16.790 --> 00:16:18.240
credential with Android Pay.

00:16:18.240 --> 00:16:21.420
The first one, if you are
already using vaulting services

00:16:21.420 --> 00:16:24.890
from Stripe, Braintree,
or [? Venta, ?]

00:16:24.890 --> 00:16:28.850
you can actually have us vault
the payment credential for you

00:16:28.850 --> 00:16:32.340
and return you a
vaulted token that you

00:16:32.340 --> 00:16:36.210
would charge any other vaultage
credential with these services.

00:16:36.210 --> 00:16:39.140
But there is a second way that
is the one actually showed here

00:16:39.140 --> 00:16:41.270
in the slides where you
can receive the payment

00:16:41.270 --> 00:16:44.200
credential directly in an
encrypted form with a key

00:16:44.200 --> 00:16:48.190
that you specify in the
tokenization parameters.

00:16:48.190 --> 00:16:51.460
Later on, you will
need to decrypt or send

00:16:51.460 --> 00:16:52.960
to one of our
supported processors

00:16:52.960 --> 00:16:55.850
for doing the decryption
for you and charge the user.

00:16:55.850 --> 00:16:58.020
But we'll get to that later on.

00:16:58.020 --> 00:17:00.480
Now, besides these three
required parameters,

00:17:00.480 --> 00:17:03.080
there are also some
optional parameters

00:17:03.080 --> 00:17:05.339
that you can use to
customize our flow

00:17:05.339 --> 00:17:06.640
to meet the needs of your app.

00:17:06.640 --> 00:17:08.420
So you can request shipping.

00:17:08.420 --> 00:17:12.030
You can say if you
need a phone number.

00:17:12.030 --> 00:17:14.319
You can have us actually
filter out the cards

00:17:14.319 --> 00:17:15.609
that you don't support.

00:17:15.609 --> 00:17:17.960
For example, if you don't
support prepaid cards,

00:17:17.960 --> 00:17:20.359
you can specify in the request.

00:17:20.359 --> 00:17:24.660
And this provides a highly
customizable UI for your flow.

00:17:24.660 --> 00:17:25.160
OK.

00:17:25.160 --> 00:17:27.339
Now let's just recap.

00:17:27.339 --> 00:17:29.760
The user has saw the
Android Pay button.

00:17:29.760 --> 00:17:30.760
They have clicked on it.

00:17:30.760 --> 00:17:33.150
They have selected a card
and a shipping address.

00:17:33.150 --> 00:17:36.510
And they are finally ready to
commit and finish the purchase.

00:17:36.510 --> 00:17:37.970
So what's the next step?

00:17:37.970 --> 00:17:39.630
It's actually to
charge the user.

00:17:39.630 --> 00:17:42.610
And to do that, you need
to request a payment

00:17:42.610 --> 00:17:43.940
credential from us.

00:17:43.940 --> 00:17:48.600
And to do that, you call our
last API called Full Wallet,

00:17:48.600 --> 00:17:50.600
and to call that
API, you need what

00:17:50.600 --> 00:17:51.950
we call the FullWalletRequest.

00:17:51.950 --> 00:17:54.530
The FullWalletRequest is
this nice little object here

00:17:54.530 --> 00:17:56.895
that receives only two
parameters basically.

00:17:56.895 --> 00:17:58.520
The first one is the
Google transaction

00:17:58.520 --> 00:18:00.650
ID, which is just
an identifier that

00:18:00.650 --> 00:18:02.350
is generated by
the previous call,

00:18:02.350 --> 00:18:05.050
and you just need to forward
it to the second call

00:18:05.050 --> 00:18:06.436
to be able to complete it.

00:18:06.436 --> 00:18:08.810
And the second one is the card
containing the total price

00:18:08.810 --> 00:18:10.721
in the currency code.

00:18:10.721 --> 00:18:15.990
Now, once you called Full
Wallet in the last line here,

00:18:15.990 --> 00:18:18.090
when the result
is ready for you,

00:18:18.090 --> 00:18:20.650
it will be delivered through
the onActivityResult callback

00:18:20.650 --> 00:18:22.520
in your activity,
and you can just

00:18:22.520 --> 00:18:25.510
check the request code
that you passed in the call

00:18:25.510 --> 00:18:28.770
and extract the Full Wallet
out of the [INAUDIBLE].

00:18:28.770 --> 00:18:30.270
And finally, out
of the Full Wallet,

00:18:30.270 --> 00:18:32.270
you can get the payment
token that you can later

00:18:32.270 --> 00:18:36.170
send to your processor
for charging the user.

00:18:36.170 --> 00:18:38.670
Now, let's just
dive a little deeper

00:18:38.670 --> 00:18:41.950
on what the payment token
actually looks like.

00:18:41.950 --> 00:18:43.671
So the payment
token, in the case

00:18:43.671 --> 00:18:46.170
where you receive the payment
credential directly encrypted,

00:18:46.170 --> 00:18:49.650
is just this nice
little JSON blob

00:18:49.650 --> 00:18:52.444
containing a bunch of keys
related to our encryption

00:18:52.444 --> 00:18:53.440
scheme.

00:18:53.440 --> 00:18:55.360
Not all that interesting.

00:18:55.360 --> 00:18:57.070
But there are some
interesting things

00:18:57.070 --> 00:18:59.310
to be said actually about
the decryptive response

00:18:59.310 --> 00:19:01.789
that you can see
in the next slide.

00:19:01.789 --> 00:19:04.080
So there are actually two
fields here that I would like

00:19:04.080 --> 00:19:06.150
you guys to pay attention to.

00:19:06.150 --> 00:19:07.350
The first one is the dpan.

00:19:07.350 --> 00:19:09.590
The second one is
the 3dsCryptogram.

00:19:09.590 --> 00:19:14.070
So dpan, it actually stands for
device personal account number.

00:19:14.070 --> 00:19:16.730
And as you can see, it
looks like a credit card,

00:19:16.730 --> 00:19:18.300
but it's not really
a credit card.

00:19:18.300 --> 00:19:21.920
It even passes the
[INAUDIBLE] as a curiosity.

00:19:21.920 --> 00:19:26.850
Now, when a user adds a card
to Android Pay, the payment

00:19:26.850 --> 00:19:28.600
networks and the
insurers, they generate

00:19:28.600 --> 00:19:31.540
this number called the
dpan, and that gets

00:19:31.540 --> 00:19:32.800
associated with your phone.

00:19:32.800 --> 00:19:35.530
And that's actually
what gets charged.

00:19:35.530 --> 00:19:37.630
And this number has
pretty much no relation

00:19:37.630 --> 00:19:39.950
with the real user's
credit card number,

00:19:39.950 --> 00:19:41.480
which provides
some nice security

00:19:41.480 --> 00:19:42.670
properties of Android Pay.

00:19:42.670 --> 00:19:45.980
For example, if you
lose your phone,

00:19:45.980 --> 00:19:49.470
there is no need for
you to reissue your card

00:19:49.470 --> 00:19:52.890
and cancel your previous card
because your credit card number

00:19:52.890 --> 00:19:55.440
was not compromised at all.

00:19:55.440 --> 00:19:58.190
Now, the other interesting
field is the 3dsCryptogram,

00:19:58.190 --> 00:20:01.970
which is basically a replacement
for the traditional CV

00:20:01.970 --> 00:20:03.970
that you see in the
back of your card.

00:20:03.970 --> 00:20:06.610
It's a dynamically
generated security code,

00:20:06.610 --> 00:20:09.904
and we use it to provide
this nice second property

00:20:09.904 --> 00:20:13.510
about the Android Pay security
model, which is-- this payment

00:20:13.510 --> 00:20:16.480
credential that you see here
can only be charged once.

00:20:16.480 --> 00:20:19.380
And this is a huge advantage
compared to a normal credit

00:20:19.380 --> 00:20:21.600
card because if you lose
your credit card number,

00:20:21.600 --> 00:20:25.020
it can just be charged
multiple times.

00:20:25.020 --> 00:20:25.570
OK.

00:20:25.570 --> 00:20:28.190
Now, we have talked
about how you

00:20:28.190 --> 00:20:31.580
can call the API's and how you
receive this encrypted token.

00:20:31.580 --> 00:20:35.590
Now, you can decrypt
the token yourself,

00:20:35.590 --> 00:20:37.010
but we highly
recommend you to use

00:20:37.010 --> 00:20:39.722
the service of all our
supported processors.

00:20:39.722 --> 00:20:42.070
They will take care of
generating the keys,

00:20:42.070 --> 00:20:44.440
managing the keys, and doing
the decryption for you.

00:20:44.440 --> 00:20:48.000
So I highly recommend you
to check their documentation

00:20:48.000 --> 00:20:50.149
because they will just
make your life easier.

00:20:50.149 --> 00:20:51.940
Now I'm going to hand
over and turn it over

00:20:51.940 --> 00:20:54.500
to Avnish for him to complete.

00:20:54.500 --> 00:20:55.800
Thank you, everybody.

00:20:55.800 --> 00:20:57.300
AVNISH MIDUTHURI:
Thank you, Walter.

00:20:57.300 --> 00:20:58.590
[APPLAUSE]

00:21:01.185 --> 00:21:03.810
As Walter said, you can actually
work with any of these payment

00:21:03.810 --> 00:21:04.440
providers.

00:21:04.440 --> 00:21:06.400
Come see us if you don't see
your payment provider listed

00:21:06.400 --> 00:21:09.066
here, and we can tell you how to
actually get Android Pay set up

00:21:09.066 --> 00:21:11.830
on your app and going.

00:21:11.830 --> 00:21:14.780
So the last few months, we've
worked with several merchants

00:21:14.780 --> 00:21:17.300
to onboard Android
Pay in their apps

00:21:17.300 --> 00:21:19.930
and see how the
evaluation looks.

00:21:19.930 --> 00:21:21.390
And we're now
excited to announce

00:21:21.390 --> 00:21:23.740
that Android Pay's
available to all developers

00:21:23.740 --> 00:21:25.990
selling physical goods and
services in all the markets

00:21:25.990 --> 00:21:27.132
that Android Pay supported.

00:21:27.132 --> 00:21:28.840
We've launched in the
US, and we recently

00:21:28.840 --> 00:21:30.840
announced that we've
launched in the UK as well.

00:21:30.840 --> 00:21:33.510
We're coming soon to
Australia and Singapore.

00:21:33.510 --> 00:21:35.700
So again, we're excited
to have developers

00:21:35.700 --> 00:21:37.770
add Android Pay to their app.

00:21:37.770 --> 00:21:40.310
You can check out Android Pay
and any of these select apps

00:21:40.310 --> 00:21:43.440
that have added Android
Pay to see how they've

00:21:43.440 --> 00:21:46.070
created better experiences,
better checkouts,

00:21:46.070 --> 00:21:46.856
for their users.

00:21:49.696 --> 00:21:51.320
In terms of what's
next, if you haven't

00:21:51.320 --> 00:21:53.444
had a chance to actually
go see the live code labs,

00:21:53.444 --> 00:21:56.880
you can actually go to
the online code labs here.

00:21:56.880 --> 00:22:00.900
We also have fully documented
developers on Google.com.

00:22:00.900 --> 00:22:02.529
So check out our documentation.

00:22:02.529 --> 00:22:04.070
Comes see us right
after this session

00:22:04.070 --> 00:22:06.217
as well if you
have any questions.

00:22:06.217 --> 00:22:07.050
Thank you, everyone.

00:22:07.050 --> 00:22:08.550
[APPLAUSE]

00:22:08.550 --> 00:22:11.600
[MUSIC PLAYING]

