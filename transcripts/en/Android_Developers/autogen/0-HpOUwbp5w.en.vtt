WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.460
[Music]

00:00:06.460 --> 00:00:06.470
 

00:00:06.470 --> 00:00:10.040
hi everyone my name is Wojtek and i

00:00:10.040 --> 00:00:10.050
hi everyone my name is Wojtek and i
 

00:00:10.050 --> 00:00:11.450
hi everyone my name is Wojtek and i
wanted to share with you a short story

00:00:11.450 --> 00:00:11.460
wanted to share with you a short story
 

00:00:11.460 --> 00:00:13.100
wanted to share with you a short story
about my experience with the new cullen

00:00:13.100 --> 00:00:13.110
about my experience with the new cullen
 

00:00:13.110 --> 00:00:15.079
about my experience with the new cullen
multi-platform projects in Kotlin one

00:00:15.079 --> 00:00:15.089
multi-platform projects in Kotlin one
 

00:00:15.089 --> 00:00:17.150
multi-platform projects in Kotlin one
three so when we come to these

00:00:17.150 --> 00:00:17.160
three so when we come to these
 

00:00:17.160 --> 00:00:18.769
three so when we come to these
conferences talk about Android talk

00:00:18.769 --> 00:00:18.779
conferences talk about Android talk
 

00:00:18.779 --> 00:00:20.240
conferences talk about Android talk
about running Kotlin on Android for

00:00:20.240 --> 00:00:20.250
about running Kotlin on Android for
 

00:00:20.250 --> 00:00:21.830
about running Kotlin on Android for
making Android that's what we really

00:00:21.830 --> 00:00:21.840
making Android that's what we really
 

00:00:21.840 --> 00:00:24.679
making Android that's what we really
mean is : JVM

00:00:24.679 --> 00:00:24.689
mean is : JVM
 

00:00:24.689 --> 00:00:26.839
mean is : JVM
that's the Kotlin that we know that gets

00:00:26.839 --> 00:00:26.849
that's the Kotlin that we know that gets
 

00:00:26.849 --> 00:00:28.009
that's the Kotlin that we know that gets
compiled to Java

00:00:28.009 --> 00:00:28.019
compiled to Java
 

00:00:28.019 --> 00:00:30.290
compiled to Java
and then you know we can transform it

00:00:30.290 --> 00:00:30.300
and then you know we can transform it
 

00:00:30.300 --> 00:00:32.840
and then you know we can transform it
into Dex files run it on Android but it

00:00:32.840 --> 00:00:32.850
into Dex files run it on Android but it
 

00:00:32.850 --> 00:00:34.819
into Dex files run it on Android but it
can also run on Cloud Servers on our

00:00:34.819 --> 00:00:34.829
can also run on Cloud Servers on our
 

00:00:34.829 --> 00:00:37.370
can also run on Cloud Servers on our
desktops and so on now there are two

00:00:37.370 --> 00:00:37.380
desktops and so on now there are two
 

00:00:37.380 --> 00:00:38.869
desktops and so on now there are two
more flavors of Kotlin actually or

00:00:38.869 --> 00:00:38.879
more flavors of Kotlin actually or
 

00:00:38.879 --> 00:00:41.540
more flavors of Kotlin actually or
compilation targets first one called nsj

00:00:41.540 --> 00:00:41.550
compilation targets first one called nsj
 

00:00:41.550 --> 00:00:44.209
compilation targets first one called nsj
for running javascript in a web browser

00:00:44.209 --> 00:00:44.219
for running javascript in a web browser
 

00:00:44.219 --> 00:00:46.639
for running javascript in a web browser
environment or even something like cloud

00:00:46.639 --> 00:00:46.649
environment or even something like cloud
 

00:00:46.649 --> 00:00:49.760
environment or even something like cloud
functions or nodejs and then there's :

00:00:49.760 --> 00:00:49.770
functions or nodejs and then there's :
 

00:00:49.770 --> 00:00:51.799
functions or nodejs and then there's :
native which compiles down to machine

00:00:51.799 --> 00:00:51.809
native which compiles down to machine
 

00:00:51.809 --> 00:00:54.350
native which compiles down to machine
code in you know native libraries that

00:00:54.350 --> 00:00:54.360
code in you know native libraries that
 

00:00:54.360 --> 00:00:57.350
code in you know native libraries that
can run or target various platforms such

00:00:57.350 --> 00:00:57.360
can run or target various platforms such
 

00:00:57.360 --> 00:00:59.840
can run or target various platforms such
as iOS desktop apps even web assembly

00:00:59.840 --> 00:00:59.850
as iOS desktop apps even web assembly
 

00:00:59.850 --> 00:01:02.869
as iOS desktop apps even web assembly
and even Android so how do we actually

00:01:02.869 --> 00:01:02.879
and even Android so how do we actually
 

00:01:02.879 --> 00:01:04.969
and even Android so how do we actually
get started with this so count them 1 3

00:01:04.969 --> 00:01:04.979
get started with this so count them 1 3
 

00:01:04.979 --> 00:01:06.890
get started with this so count them 1 3
introduces a new project structure and a

00:01:06.890 --> 00:01:06.900
introduces a new project structure and a
 

00:01:06.900 --> 00:01:08.570
introduces a new project structure and a
new plug-in that's called called a

00:01:08.570 --> 00:01:08.580
new plug-in that's called called a
 

00:01:08.580 --> 00:01:10.460
new plug-in that's called called a
multi-platform and if you apply that to

00:01:10.460 --> 00:01:10.470
multi-platform and if you apply that to
 

00:01:10.470 --> 00:01:13.820
multi-platform and if you apply that to
any of your modules you can then select

00:01:13.820 --> 00:01:13.830
any of your modules you can then select
 

00:01:13.830 --> 00:01:17.060
any of your modules you can then select
from a preset from a set of presets to

00:01:17.060 --> 00:01:17.070
from a preset from a set of presets to
 

00:01:17.070 --> 00:01:18.740
from a preset from a set of presets to
target any of these platforms so here

00:01:18.740 --> 00:01:18.750
target any of these platforms so here
 

00:01:18.750 --> 00:01:20.810
target any of these platforms so here
for example I'm targeting a Android

00:01:20.810 --> 00:01:20.820
for example I'm targeting a Android
 

00:01:20.820 --> 00:01:24.770
for example I'm targeting a Android
library and ajs target now when you add

00:01:24.770 --> 00:01:24.780
library and ajs target now when you add
 

00:01:24.780 --> 00:01:26.719
library and ajs target now when you add
these to your module it automatically

00:01:26.719 --> 00:01:26.729
these to your module it automatically
 

00:01:26.729 --> 00:01:28.760
these to your module it automatically
creates source sets for each of these

00:01:28.760 --> 00:01:28.770
creates source sets for each of these
 

00:01:28.770 --> 00:01:30.950
creates source sets for each of these
platform specific cutland files so if

00:01:30.950 --> 00:01:30.960
platform specific cutland files so if
 

00:01:30.960 --> 00:01:32.510
platform specific cutland files so if
you put your column files in the J's

00:01:32.510 --> 00:01:32.520
you put your column files in the J's
 

00:01:32.520 --> 00:01:34.940
you put your column files in the J's
main folder they will get compiled or

00:01:34.940 --> 00:01:34.950
main folder they will get compiled or
 

00:01:34.950 --> 00:01:38.210
main folder they will get compiled or
transpiled to JavaScript files now what

00:01:38.210 --> 00:01:38.220
transpiled to JavaScript files now what
 

00:01:38.220 --> 00:01:41.359
transpiled to JavaScript files now what
do I mean by calling specific sorry

00:01:41.359 --> 00:01:41.369
do I mean by calling specific sorry
 

00:01:41.369 --> 00:01:43.580
do I mean by calling specific sorry
platform specific Kotlin now if you go

00:01:43.580 --> 00:01:43.590
platform specific Kotlin now if you go
 

00:01:43.590 --> 00:01:44.870
platform specific Kotlin now if you go
and browse the documentation the

00:01:44.870 --> 00:01:44.880
and browse the documentation the
 

00:01:44.880 --> 00:01:46.429
and browse the documentation the
reference pages for each of the column

00:01:46.429 --> 00:01:46.439
reference pages for each of the column
 

00:01:46.439 --> 00:01:49.340
reference pages for each of the column
packages and you mouse over any of them

00:01:49.340 --> 00:01:49.350
packages and you mouse over any of them
 

00:01:49.350 --> 00:01:51.200
packages and you mouse over any of them
in the top right you will see these

00:01:51.200 --> 00:01:51.210
in the top right you will see these
 

00:01:51.210 --> 00:01:53.510
in the top right you will see these
multicolored chips that tell you which

00:01:53.510 --> 00:01:53.520
multicolored chips that tell you which
 

00:01:53.520 --> 00:01:55.490
multicolored chips that tell you which
compilation target this library is

00:01:55.490 --> 00:01:55.500
compilation target this library is
 

00:01:55.500 --> 00:01:57.859
compilation target this library is
available on so here for example the

00:01:57.859 --> 00:01:57.869
available on so here for example the
 

00:01:57.869 --> 00:02:00.440
available on so here for example the
Kotlin browser package that lets you

00:02:00.440 --> 00:02:00.450
Kotlin browser package that lets you
 

00:02:00.450 --> 00:02:02.240
Kotlin browser package that lets you
access interfaces for document and

00:02:02.240 --> 00:02:02.250
access interfaces for document and
 

00:02:02.250 --> 00:02:03.740
access interfaces for document and
window from the web browser environment

00:02:03.740 --> 00:02:03.750
window from the web browser environment
 

00:02:03.750 --> 00:02:05.600
window from the web browser environment
probably only makes sense on a gest

00:02:05.600 --> 00:02:05.610
probably only makes sense on a gest
 

00:02:05.610 --> 00:02:08.320
probably only makes sense on a gest
target and that's that's how it is now

00:02:08.320 --> 00:02:08.330
target and that's that's how it is now
 

00:02:08.330 --> 00:02:10.790
target and that's that's how it is now
fortunately many many of the core

00:02:10.790 --> 00:02:10.800
fortunately many many of the core
 

00:02:10.800 --> 00:02:12.410
fortunately many many of the core
libraries and functions are available

00:02:12.410 --> 00:02:12.420
libraries and functions are available
 

00:02:12.420 --> 00:02:13.400
libraries and functions are available
across

00:02:13.400 --> 00:02:13.410
across
 

00:02:13.410 --> 00:02:15.590
across
all the compilation targets in fact you

00:02:15.590 --> 00:02:15.600
all the compilation targets in fact you
 

00:02:15.600 --> 00:02:17.900
all the compilation targets in fact you
can see a fourth one cutland common

00:02:17.900 --> 00:02:17.910
can see a fourth one cutland common
 

00:02:17.910 --> 00:02:19.610
can see a fourth one cutland common
which means this is a pure Kotlin

00:02:19.610 --> 00:02:19.620
which means this is a pure Kotlin
 

00:02:19.620 --> 00:02:21.770
which means this is a pure Kotlin
library that can run independent of any

00:02:21.770 --> 00:02:21.780
library that can run independent of any
 

00:02:21.780 --> 00:02:25.820
library that can run independent of any
platform that's targeting and in fact if

00:02:25.820 --> 00:02:25.830
platform that's targeting and in fact if
 

00:02:25.830 --> 00:02:27.590
platform that's targeting and in fact if
you add a multi-platform plug-in to your

00:02:27.590 --> 00:02:27.600
you add a multi-platform plug-in to your
 

00:02:27.600 --> 00:02:29.840
you add a multi-platform plug-in to your
project along with the platform specific

00:02:29.840 --> 00:02:29.850
project along with the platform specific
 

00:02:29.850 --> 00:02:32.210
project along with the platform specific
source set you also get a common source

00:02:32.210 --> 00:02:32.220
source set you also get a common source
 

00:02:32.220 --> 00:02:33.770
source set you also get a common source
set where you can put platform

00:02:33.770 --> 00:02:33.780
set where you can put platform
 

00:02:33.780 --> 00:02:35.810
set where you can put platform
independent code now the thing about

00:02:35.810 --> 00:02:35.820
independent code now the thing about
 

00:02:35.820 --> 00:02:37.970
independent code now the thing about
platform independent code is it cannot

00:02:37.970 --> 00:02:37.980
platform independent code is it cannot
 

00:02:37.980 --> 00:02:40.520
platform independent code is it cannot
call any of the platform api's it cannot

00:02:40.520 --> 00:02:40.530
call any of the platform api's it cannot
 

00:02:40.530 --> 00:02:42.590
call any of the platform api's it cannot
call any of the J's specific or Android

00:02:42.590 --> 00:02:42.600
call any of the J's specific or Android
 

00:02:42.600 --> 00:02:45.770
call any of the J's specific or Android
specific ap is the other way of course

00:02:45.770 --> 00:02:45.780
specific ap is the other way of course
 

00:02:45.780 --> 00:02:47.060
specific ap is the other way of course
works you can have your platform

00:02:47.060 --> 00:02:47.070
works you can have your platform
 

00:02:47.070 --> 00:02:48.860
works you can have your platform
specific code from any of the flavors

00:02:48.860 --> 00:02:48.870
specific code from any of the flavors
 

00:02:48.870 --> 00:02:51.710
specific code from any of the flavors
depend on a shared common library or

00:02:51.710 --> 00:02:51.720
depend on a shared common library or
 

00:02:51.720 --> 00:02:55.160
depend on a shared common library or
source set so knowing all that I set out

00:02:55.160 --> 00:02:55.170
source set so knowing all that I set out
 

00:02:55.170 --> 00:02:56.870
source set so knowing all that I set out
to write an example app just to learn

00:02:56.870 --> 00:02:56.880
to write an example app just to learn
 

00:02:56.880 --> 00:02:58.790
to write an example app just to learn
about called a multi platform and I

00:02:58.790 --> 00:02:58.800
about called a multi platform and I
 

00:02:58.800 --> 00:03:01.640
about called a multi platform and I
decided to make a small Sudoku game now

00:03:01.640 --> 00:03:01.650
decided to make a small Sudoku game now
 

00:03:01.650 --> 00:03:03.080
decided to make a small Sudoku game now
one thing I have to say about Kotlin

00:03:03.080 --> 00:03:03.090
one thing I have to say about Kotlin
 

00:03:03.090 --> 00:03:05.240
one thing I have to say about Kotlin
multi platform is it's not a toolkit

00:03:05.240 --> 00:03:05.250
multi platform is it's not a toolkit
 

00:03:05.250 --> 00:03:07.250
multi platform is it's not a toolkit
that lets you write an app once and run

00:03:07.250 --> 00:03:07.260
that lets you write an app once and run
 

00:03:07.260 --> 00:03:09.290
that lets you write an app once and run
it everywhere I still need to create an

00:03:09.290 --> 00:03:09.300
it everywhere I still need to create an
 

00:03:09.300 --> 00:03:11.630
it everywhere I still need to create an
Android app with Android specific code

00:03:11.630 --> 00:03:11.640
Android app with Android specific code
 

00:03:11.640 --> 00:03:13.730
Android app with Android specific code
just like I normally would and then a

00:03:13.730 --> 00:03:13.740
just like I normally would and then a
 

00:03:13.740 --> 00:03:15.890
just like I normally would and then a
web page with some JavaScript code just

00:03:15.890 --> 00:03:15.900
web page with some JavaScript code just
 

00:03:15.900 --> 00:03:17.780
web page with some JavaScript code just
like initialize things like entry points

00:03:17.780 --> 00:03:17.790
like initialize things like entry points
 

00:03:17.790 --> 00:03:20.270
like initialize things like entry points
to my app lifecycle UI and so on but

00:03:20.270 --> 00:03:20.280
to my app lifecycle UI and so on but
 

00:03:20.280 --> 00:03:22.400
to my app lifecycle UI and so on but
then what I do is all my shared business

00:03:22.400 --> 00:03:22.410
then what I do is all my shared business
 

00:03:22.410 --> 00:03:24.590
then what I do is all my shared business
logic so in my case it's the pseudocode

00:03:24.590 --> 00:03:24.600
logic so in my case it's the pseudocode
 

00:03:24.600 --> 00:03:26.450
logic so in my case it's the pseudocode
engine that solves and generates two

00:03:26.450 --> 00:03:26.460
engine that solves and generates two
 

00:03:26.460 --> 00:03:29.210
engine that solves and generates two
Doku boards for me I take it out and put

00:03:29.210 --> 00:03:29.220
Doku boards for me I take it out and put
 

00:03:29.220 --> 00:03:31.400
Doku boards for me I take it out and put
it in a shared library using caudill in

00:03:31.400 --> 00:03:31.410
it in a shared library using caudill in
 

00:03:31.410 --> 00:03:34.880
it in a shared library using caudill in
common and in fact the only source set I

00:03:34.880 --> 00:03:34.890
common and in fact the only source set I
 

00:03:34.890 --> 00:03:37.610
common and in fact the only source set I
have in this library is common main so I

00:03:37.610 --> 00:03:37.620
have in this library is common main so I
 

00:03:37.620 --> 00:03:39.710
have in this library is common main so I
put all my code there and that means

00:03:39.710 --> 00:03:39.720
put all my code there and that means
 

00:03:39.720 --> 00:03:41.330
put all my code there and that means
it's available across all the platforms

00:03:41.330 --> 00:03:41.340
it's available across all the platforms
 

00:03:41.340 --> 00:03:44.480
it's available across all the platforms
that I choose to target ok but then I

00:03:44.480 --> 00:03:44.490
that I choose to target ok but then I
 

00:03:44.490 --> 00:03:47.150
that I choose to target ok but then I
thought ok I have this core engine for

00:03:47.150 --> 00:03:47.160
thought ok I have this core engine for
 

00:03:47.160 --> 00:03:49.100
thought ok I have this core engine for
solving my Sudoku code but I would also

00:03:49.100 --> 00:03:49.110
solving my Sudoku code but I would also
 

00:03:49.110 --> 00:03:51.100
solving my Sudoku code but I would also
like to draw the board on the screen and

00:03:51.100 --> 00:03:51.110
like to draw the board on the screen and
 

00:03:51.110 --> 00:03:54.110
like to draw the board on the screen and
why code it for each platform separately

00:03:54.110 --> 00:03:54.120
why code it for each platform separately
 

00:03:54.120 --> 00:03:56.720
why code it for each platform separately
if it should look the same on each of

00:03:56.720 --> 00:03:56.730
if it should look the same on each of
 

00:03:56.730 --> 00:03:58.670
if it should look the same on each of
them so I thought wouldn't it be nice if

00:03:58.670 --> 00:03:58.680
them so I thought wouldn't it be nice if
 

00:03:58.680 --> 00:04:00.860
them so I thought wouldn't it be nice if
I had an API for drawing on the screen

00:04:00.860 --> 00:04:00.870
I had an API for drawing on the screen
 

00:04:00.870 --> 00:04:02.480
I had an API for drawing on the screen
that's completely platform independent

00:04:02.480 --> 00:04:02.490
that's completely platform independent
 

00:04:02.490 --> 00:04:04.600
that's completely platform independent
something I can multi platform canvas

00:04:04.600 --> 00:04:04.610
something I can multi platform canvas
 

00:04:04.610 --> 00:04:07.400
something I can multi platform canvas
but then what I want to do is I want to

00:04:07.400 --> 00:04:07.410
but then what I want to do is I want to
 

00:04:07.410 --> 00:04:10.280
but then what I want to do is I want to
actually have it delegate to each of the

00:04:10.280 --> 00:04:10.290
actually have it delegate to each of the
 

00:04:10.290 --> 00:04:12.170
actually have it delegate to each of the
platform simple implementations so I

00:04:12.170 --> 00:04:12.180
platform simple implementations so I
 

00:04:12.180 --> 00:04:13.850
platform simple implementations so I
want to use the Android canvas to draw

00:04:13.850 --> 00:04:13.860
want to use the Android canvas to draw
 

00:04:13.860 --> 00:04:16.580
want to use the Android canvas to draw
an Android while I use the HTML canvas

00:04:16.580 --> 00:04:16.590
an Android while I use the HTML canvas
 

00:04:16.590 --> 00:04:19.520
an Android while I use the HTML canvas
to draw on a website the thing is I just

00:04:19.520 --> 00:04:19.530
to draw on a website the thing is I just
 

00:04:19.530 --> 00:04:21.950
to draw on a website the thing is I just
told you that Kotlin common code cannot

00:04:21.950 --> 00:04:21.960
told you that Kotlin common code cannot
 

00:04:21.960 --> 00:04:24.440
told you that Kotlin common code cannot
call any platform interfaces so I

00:04:24.440 --> 00:04:24.450
call any platform interfaces so I
 

00:04:24.450 --> 00:04:26.210
call any platform interfaces so I
currently depend on these and export

00:04:26.210 --> 00:04:26.220
currently depend on these and export
 

00:04:26.220 --> 00:04:26.930
currently depend on these and export
them from from this

00:04:26.930 --> 00:04:26.940
them from from this
 

00:04:26.940 --> 00:04:29.090
them from from this
module so how does it does it work in

00:04:29.090 --> 00:04:29.100
module so how does it does it work in
 

00:04:29.100 --> 00:04:31.820
module so how does it does it work in
Kotlin well there's this this expect an

00:04:31.820 --> 00:04:31.830
Kotlin well there's this this expect an
 

00:04:31.830 --> 00:04:34.370
Kotlin well there's this this expect an
actual mechanism lets you declare

00:04:34.370 --> 00:04:34.380
actual mechanism lets you declare
 

00:04:34.380 --> 00:04:36.740
actual mechanism lets you declare
expected classes in your common code

00:04:36.740 --> 00:04:36.750
expected classes in your common code
 

00:04:36.750 --> 00:04:38.690
expected classes in your common code
which is something like almost like

00:04:38.690 --> 00:04:38.700
which is something like almost like
 

00:04:38.700 --> 00:04:41.390
which is something like almost like
defining an interface in Java and then

00:04:41.390 --> 00:04:41.400
defining an interface in Java and then
 

00:04:41.400 --> 00:04:44.360
defining an interface in Java and then
in each of my platform specific source

00:04:44.360 --> 00:04:44.370
in each of my platform specific source
 

00:04:44.370 --> 00:04:46.520
in each of my platform specific source
set I provide the actual implementation

00:04:46.520 --> 00:04:46.530
set I provide the actual implementation
 

00:04:46.530 --> 00:04:49.580
set I provide the actual implementation
that can depend and use platform API

00:04:49.580 --> 00:04:49.590
that can depend and use platform API
 

00:04:49.590 --> 00:04:53.150
that can depend and use platform API
such as the Android canvas now when I

00:04:53.150 --> 00:04:53.160
such as the Android canvas now when I
 

00:04:53.160 --> 00:04:55.040
such as the Android canvas now when I
add that dependency from my common

00:04:55.040 --> 00:04:55.050
add that dependency from my common
 

00:04:55.050 --> 00:04:57.560
add that dependency from my common
source set to the other one and looks

00:04:57.560 --> 00:04:57.570
source set to the other one and looks
 

00:04:57.570 --> 00:05:00.680
source set to the other one and looks
something like this but actually when

00:05:00.680 --> 00:05:00.690
something like this but actually when
 

00:05:00.690 --> 00:05:02.600
something like this but actually when
compiling for a specific platform such

00:05:02.600 --> 00:05:02.610
compiling for a specific platform such
 

00:05:02.610 --> 00:05:05.360
compiling for a specific platform such
as Jas this depends on dependency will

00:05:05.360 --> 00:05:05.370
as Jas this depends on dependency will
 

00:05:05.370 --> 00:05:08.710
as Jas this depends on dependency will
actually use the correct html5 canvas

00:05:08.710 --> 00:05:08.720
actually use the correct html5 canvas
 

00:05:08.720 --> 00:05:10.270
actually use the correct html5 canvas
[Laughter]

00:05:10.270 --> 00:05:10.280
[Laughter]
 

00:05:10.280 --> 00:05:12.620
[Laughter]
okay if I could just show the link to

00:05:12.620 --> 00:05:12.630
okay if I could just show the link to
 

00:05:12.630 --> 00:05:15.440
okay if I could just show the link to
the project so that everyone can look at

00:05:15.440 --> 00:05:15.450
the project so that everyone can look at
 

00:05:15.450 --> 00:05:16.460
the project so that everyone can look at
it that would be great

00:05:16.460 --> 00:05:16.470
it that would be great
 

00:05:16.470 --> 00:05:27.250
it that would be great
[Laughter]

00:05:27.250 --> 00:05:27.260
 

00:05:27.260 --> 00:05:35.620
[Music]

00:05:35.620 --> 00:05:35.630
 

00:05:35.630 --> 00:05:42.069
[Music]

