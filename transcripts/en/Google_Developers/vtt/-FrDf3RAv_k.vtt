WEBVTT
Kind: captions
Language: en

00:00:00.089 --> 00:00:04.360
&gt;&gt;Josh: My name is Josh Livni. This is mapping
in 3D Tips and Tricks for the Google Earth

00:00:04.360 --> 00:00:09.890
API and KML. I'm co-presenting with Mano Marks
and I'll just ge-, go ahead and get started

00:00:09.890 --> 00:00:14.340
because we're a couple minutes late; talk
about a really, really easy agenda today.

00:00:14.340 --> 00:00:18.910
I'm gonna be talking about the Earth API,
hand it over to Mano, he's gonna give us some

00:00:18.910 --> 00:00:23.560
good, exciting news on KML, time for Q&amp;A at
the end.

00:00:23.560 --> 00:00:27.430
So, as with all the other sessions, we have
a Wave. I've gone ahead and put that Wave

00:00:27.430 --> 00:00:31.510
URL at the bottom-left of most the slides,
so no worries if you didn't get it in time;

00:00:31.510 --> 00:00:35.329
it's still down there for you to hop on and
we'll go to those questions at the end and

00:00:35.329 --> 00:00:36.329
discuss amongst yourselves.

00:00:36.329 --> 00:00:42.570
So, Earth API. First of all, a little bit
jargon and nomenclature. When I say that,

00:00:42.570 --> 00:00:48.170
Earth API, what I'm referring to is the Google
Earth plugin that goes into your browser and

00:00:48.170 --> 00:00:54.100
its associated JavaScript API. If I say the
Google Earth client or downloadable client,

00:00:54.100 --> 00:00:58.719
I'm referring to the full-fledged application
that people might be downloading and installing

00:00:58.719 --> 00:01:03.579
on their computers. Got that left nav bar,
turn layers on and off. But today, we'll just

00:01:03.579 --> 00:01:08.990
be using that kind of as a reference; the
focus of, the discussions, the Earth API.

00:01:08.990 --> 00:01:12.810
And I just wanna talk about a few things that
have happened since last year. Last year,

00:01:12.810 --> 00:01:17.779
my colleague, Roman, gave a really exciting
talk on the Earth API lots of new features.

00:01:17.779 --> 00:01:21.499
And since then, the team has been hard at
work at lots of stuff including, kind of first

00:01:21.499 --> 00:01:25.729
and foremost, making sure that this plugin
is ubiquitous; that it's everywhere, and that

00:01:25.729 --> 00:01:29.299
lots of people are using it. So, as it was
mentioned yesterday, we have over a hundred

00:01:29.299 --> 00:01:35.380
million installs of the plugin, which is significant,
in my opinion. There's a couple reasons for

00:01:35.380 --> 00:01:38.780
that. First of all, you guys have built great
apps, people go to your websites, they install

00:01:38.780 --> 00:01:44.079
the plugin, and that's awesome. On our end,
we've done a couple of things. We are bundling

00:01:44.079 --> 00:01:48.950
the API with the downloadable clients so folks
download Google Earth, they install the application

00:01:48.950 --> 00:01:54.130
if they have a compatible operating system
and browser combination, and on that note,

00:01:54.130 --> 00:02:00.309
we are compatible with IE7 and 8 and Chrome
and Mac and lots of browser support. Then

00:02:00.309 --> 00:02:06.840
they'll automatically get that plugin installed
and now they don't have to see that please

00:02:06.840 --> 00:02:09.530
install the plugin screen when they go to
your website.

00:02:09.530 --> 00:02:14.159
In addition, you may have noticed about a
month ago or so, maps.google.com, I'm just

00:02:14.159 --> 00:02:20.760
gonna show this really, really fast, has this
Earth view link at the top right. I apologize

00:02:20.760 --> 00:02:25.140
for these extra buttons I have here. And it'll
pop right in to a 3D version of Earth using

00:02:25.140 --> 00:02:31.019
the API, using the same API. This is the kind
of application that you guys can build. And

00:02:31.019 --> 00:02:34.599
I think that says a lot of things. First of
all, it shows our commitment to this product

00:02:34.599 --> 00:02:39.849
and we're putting it on one of our core pages:
maps.google.com. It shows the kind of stuff

00:02:39.849 --> 00:02:44.650
that you can do with the API, integrating
into your sites, you know all the search functionality,

00:02:44.650 --> 00:02:48.879
everything shows up just as you would expect
with a regular 2D maps application that people

00:02:48.879 --> 00:02:52.969
are used to. And it also shows that, Hey,
we got a lot of people go to this website.

00:02:52.969 --> 00:02:56.579
They're seeing the plugin and they're familiar
now with the controls; all of those folks,

00:02:56.579 --> 00:03:00.430
and they already have it installed. Again,
so lots of folks have it installed.

00:03:00.430 --> 00:03:06.030
Also, in the last year, we have a more stable
release. It was stable before, but it, it's

00:03:06.030 --> 00:03:10.939
a bit more robust now and really it's a nice
solid plugin and fast. It's got a faster load

00:03:10.939 --> 00:03:15.489
time and generally, we keep working on those
things, of course, all the time. But, those

00:03:15.489 --> 00:03:20.011
are some significant changes since last year.
It's not why you're here, though. You're here

00:03:20.011 --> 00:03:25.060
about the new features. So, that's what I'm
gonna be talking about the next little bit.

00:03:25.060 --> 00:03:31.180
And the first big feature is a developer channel.
This is obviously aimed at you guys. And the

00:03:31.180 --> 00:03:36.620
hope here is that we can give you an advanced
look at, at a pre-release version before we

00:03:36.620 --> 00:03:42.290
put it out to the public so that you can get
an idea, one, of all of the up-coming features,

00:03:42.290 --> 00:03:47.590
start coding some cool applications that take
advantage of them so when the big launch does

00:03:47.590 --> 00:03:51.439
happen and everyone has the updated version
and your site's ready to go with cool, new

00:03:51.439 --> 00:03:54.900
stuff. And also so you can test your sites
for backwards compatibility, make sure we

00:03:54.900 --> 00:04:00.129
didn't accidently miss something in our testing's;
some little quirk. And also, give us feedback

00:04:00.129 --> 00:04:04.779
what you think of what we're up to here with
our new version and, and just discuss amongst

00:04:04.779 --> 00:04:08.989
yourselves wh-, what we've added, so that
we have a good back and forth with you guys.

00:04:08.989 --> 00:04:12.310
To that end, you'll notice that if you go
this link, which is live right now and has

00:04:12.310 --> 00:04:15.909
some documentation on the up-coming features
that I'll be going into, there's a link to

00:04:15.909 --> 00:04:21.410
a forum and you can go to that forum. It's
just at Google Groups and that's for you guys

00:04:21.410 --> 00:04:22.860
to discuss this pre-release version.

00:04:22.860 --> 00:04:26.590
So, right now, on that channel you'll notice
the download link isn't up yet. We're hoping

00:04:26.590 --> 00:04:31.419
to put that up really, really soon. The plugin
that I'll be demoing today is, is really the

00:04:31.419 --> 00:04:38.280
same functionality as the one you'll be downloading
shortly. So, it's ready to go, just hasn't

00:04:38.280 --> 00:04:45.220
quite been pushed out yet. Next, is this sandbox
that I've put together, itâ€™s very similar

00:04:45.220 --> 00:04:50.430
to the code playground that has a lot of our
APIs on it, but it's just customized specifically

00:04:50.430 --> 00:04:55.259
for examples of the latest functionality in
Earth to give you some, just simple context

00:04:55.259 --> 00:05:00.449
of how to put these features in use. And I'll
be keeping that up-to-date as we put out new

00:05:00.449 --> 00:05:05.509
pre-releases so you've got a place to go that's
more than just a basic reference that hasn't

00:05:05.509 --> 00:05:11.550
been fully integrated into the Docs and see
how to take advantage of the new stuff.

00:05:11.550 --> 00:05:12.550
[pause]

00:05:12.550 --> 00:05:19.139
So, with that in mind, the first kind of exciting
new edition is programmatic app instance time,

00:05:19.139 --> 00:05:23.599
which is an often requested feature and just
a really cool one. It lets you do a lot of

00:05:23.599 --> 00:05:29.889
stuff that was impossible before. So, as you
guys know, in the, the plugin you can do everything

00:05:29.889 --> 00:05:34.849
you can with, with a full Google Earth, with
a couple of edge cases, including loadup,

00:05:34.849 --> 00:05:40.850
time KML, get your time slider, play tours
that have time. But, once that happens, there's

00:05:40.850 --> 00:05:45.550
really not much more you can do from there,
programmatically. So, we're now allowing access

00:05:45.550 --> 00:05:50.570
to the time primitive using JavaScript API.
I have some simple code up here. You get the

00:05:50.570 --> 00:05:56.270
idea. Basically, the time primitives work
on any feature, such as your placemarks, abstract

00:05:56.270 --> 00:06:02.699
view, your cameras, your lookats, and also
this time container object: ge.getTime, you'll

00:06:02.699 --> 00:06:07.919
notice down near the bottom. And there's a
container object for all of our time related

00:06:07.919 --> 00:06:13.110
functions where ge is your Earth instance
that you've initialized and we'll be, we'll

00:06:13.110 --> 00:06:14.170
be going into that in more detail.

00:06:14.170 --> 00:06:18.002
So, in this simple case, I create a TimeStamp,
the TimeStamp is a getWhen. If it was a TimeSpan,

00:06:18.002 --> 00:06:22.699
it would have a getBegin and a getEnd. I set
it to a string. I'll talk more about this

00:06:22.699 --> 00:06:28.080
string format in a second. And I can set that
on a placemark or a lookat or again, the Earth

00:06:28.080 --> 00:06:32.389
instance itself and, and set the time right
there. So, already you have a ton of functionality

00:06:32.389 --> 00:06:37.539
that you just didn't have access to before
in terms of setting the virtual time of your

00:06:37.539 --> 00:06:42.099
Earth instance to whenever you want so that
if you've loaded up the GPX track or something

00:06:42.099 --> 00:06:47.510
like that, or some KML time and you want to
move to a certain location, you can do that

00:06:47.510 --> 00:06:53.250
programmatically. So, one just short note
on the string that I mentioned, we use XML

00:06:53.250 --> 00:07:00.020
standard for time notation and that's not
quite the same as the JavaScript date object,

00:07:00.020 --> 00:07:05.710
and so, we have this little, quick helper
function, getSystemTime ;, which will return

00:07:05.710 --> 00:07:10.789
a timestamp of the systems time. So, for example,
if you're building an application and people

00:07:10.789 --> 00:07:14.889
are clicking and adding markers, you can associate
each of those with the current time. This

00:07:14.889 --> 00:07:20.020
is a quick, little shortcut. And, we may be
adding some more useful shortcuts down the

00:07:20.020 --> 00:07:23.220
line, depending on feedback in the forum.

00:07:23.220 --> 00:07:27.710
So, the next piece I want to show with time,
and I'll get into a demo in one second here,

00:07:27.710 --> 00:07:31.750
is just the fact that we can turn historical
imagery on and off. Really, really powerful

00:07:31.750 --> 00:07:35.939
with some simple syntax. You don't need to
memorize it; I'll show it in the demo. And

00:07:35.939 --> 00:07:39.090
we have some control over the UI, which is
an interesting concept that we didn't really

00:07:39.090 --> 00:07:43.039
have previously in the API in terms of making
the UI come and go if you wanna make your

00:07:43.039 --> 00:07:44.039
own controls.

00:07:44.039 --> 00:07:49.751
So, let's take a look at some demo and actually
see, see what I'm talking about. So, first

00:07:49.751 --> 00:07:55.069
of all, this is the, the sandbox that I've
put together. You guys can play around with

00:07:55.069 --> 00:07:58.860
it right now. It's live. It'll be live after
this talk, so if you're watching this later

00:07:58.860 --> 00:08:04.699
you can hop in here and check out all of this
stuff. You'll notice in this end, I'm not

00:08:04.699 --> 00:08:08.610
gonna go through all the demos in here; they're
just to help you out using different pieces.

00:08:08.610 --> 00:08:12.289
We don't have time to go over all the new,
all the new stuff that's added. But, in this

00:08:12.289 --> 00:08:17.030
demo right here is all the stuff I talked
about so far. So, first of all, I add a few

00:08:17.030 --> 00:08:23.840
placemarks and let's take a look at the function
that I used to add these placemarks. So, addPlacemark

00:08:23.840 --> 00:08:29.430
here, I pass it at latLon, it's using the
awesome extension library that Roman and Eric

00:08:29.430 --> 00:08:34.690
put together and this just lets us add a point
in one line. And that saves all kinds of time

00:08:34.690 --> 00:08:39.320
and if you're not using the extension library,
you're typing more than you need to. So, keep

00:08:39.320 --> 00:08:45.210
in mind, there's no time related stuff in
here, using extension library to, to get places

00:08:45.210 --> 00:08:46.880
faster with the API.

00:08:46.880 --> 00:08:51.280
But, here's, here's the basic code that we
looked at on that first code slide. We create

00:08:51.280 --> 00:08:57.810
a timestamp, set it to a certain time, which
was the string we passed in 1988, 2012; the

00:08:57.810 --> 00:09:01.860
various strings I made. And then just set
the TimePrimitive for that placemark and now

00:09:01.860 --> 00:09:05.960
what we have, because we've done that, is
immediately that time slider will show up

00:09:05.960 --> 00:09:12.050
and we have these placemarks with just a specific
loca-, timestamp. So, if I move out of the,

00:09:12.050 --> 00:09:16.900
excuse me, range of that timestamp, it'll
go away. And all the functionality is there

00:09:16.900 --> 00:09:21.170
that you would expect. You can play through
it and so forth and, and expand it out.

00:09:21.170 --> 00:09:26.330
The other things that are on here, a simple
method to log the time. So, if I go ahead

00:09:26.330 --> 00:09:32.340
and hit logTime, I should get 2012. If I set
it to the current system time, I should get

00:09:32.340 --> 00:09:38.340
a timestamp that's slightly more convoluted.
If I go ahead and set a time span here, I

00:09:38.340 --> 00:09:44.660
can log it and notice that it's got a start
and an end. So, that's the concept of stamps

00:09:44.660 --> 00:09:48.820
and spans for time. Also, we can enable time
machines. This is really cool, I'm gonna go

00:09:48.820 --> 00:09:57.790
ahead and go to, say, 1988, enable the time
machine, the historical imagery pops up and

00:09:57.790 --> 00:10:04.420
now we can really have some power with telling
amazing stories, whether it's glaciers retreating,

00:10:04.420 --> 00:10:08.290
or your re-enactment of something over ten
years and you wanna get this historical imagery

00:10:08.290 --> 00:10:13.051
in place, programmatically. I think this is
just really, really cool. So, we can hop in

00:10:13.051 --> 00:10:18.170
here, in San Francisco, and see some old imagery
before the Loma Prieta earthquake, and then

00:10:18.170 --> 00:10:25.970
move ourselves to, say, 1995, and now we have
a bunch of parking lots here. And if we move

00:10:25.970 --> 00:10:33.180
it to the current time, you can see them in
more vivid detail; exciting parking lots.

00:10:33.180 --> 00:10:35.760
So, you can really see the change in time.
We have tons of imagery. If you wanna see

00:10:35.760 --> 00:10:39.641
Haiti the day before the earthquake, the day
after, the day after that, it's really a lot

00:10:39.641 --> 00:10:44.950
of fascinating things you can do here with
these new features. And again, if you're not

00:10:44.950 --> 00:10:48.970
happy with this control here, we can go ahead
and just make it go away, but we still have

00:10:48.970 --> 00:10:53.220
access to all that functionality. You can
build your own buttons and so, I think this

00:10:53.220 --> 00:10:58.520
is extremely powerful and robust access, access
to time.

00:10:58.520 --> 00:11:04.420
But, of course, we're not quite done with
time. The last piece is setting the rate that

00:11:04.420 --> 00:11:10.450
the virtual internal clock of your Earth instance
moves at. And it is important to thing about

00:11:10.450 --> 00:11:16.180
differently from just playing and pausing
cause we can set this rate to be 1, which

00:11:16.180 --> 00:11:21.240
means for every second of real time that passes
in our lives, one second passes in this Earth

00:11:21.240 --> 00:11:27.250
instance. Or, we can set it to 60, and every
second that passes in our real time, one minute

00:11:27.250 --> 00:11:31.860
will pass. And so, this is, is really powerful
in terms of being able to play through things

00:11:31.860 --> 00:11:35.610
at different rates and I'll just go through
some of these ideas here.

00:11:35.610 --> 00:11:39.370
So, second line there, you can see we can
play a year in one second. That might be nice

00:11:39.370 --> 00:11:45.070
if you have a ten year story to tell, you
wanna play it in ten seconds. We have the

00:11:45.070 --> 00:11:49.950
ability to interact with UI a little bit.
So, what if, for example, someone, you've

00:11:49.950 --> 00:11:54.880
loaded up a network link, it's got some arbitrary
KML, you don't know all the time spans; you

00:11:54.880 --> 00:11:59.260
wanna be able to do the same thing as if that
person had hit play. We can get the calculated

00:11:59.260 --> 00:12:03.751
rate from the UI and I'll show you an example
in a second. And you can also, if you wanna

00:12:03.751 --> 00:12:08.980
get really fancy, get the beginning and end,
get the, basically a time span here that UI

00:12:08.980 --> 00:12:14.640
extent so, so you know what you're dealing
with there. And then finally, just a pretty

00:12:14.640 --> 00:12:20.700
simple API call there to set it. So, let's
take a look at that.

00:12:20.700 --> 00:12:24.180
Demo three.

00:12:24.180 --> 00:12:25.920
[pause]

00:12:25.920 --> 00:12:34.001
Same simple placemarks that we had before.
I can go ahead and set the rate to 600. It

00:12:34.001 --> 00:12:38.420
should move very, very slowly, you almost
can't even see it. I'll just start adding

00:12:38.420 --> 00:12:43.490
some zeros to get it to speed up.

00:12:43.490 --> 00:12:44.910
[pause]

00:12:44.910 --> 00:12:49.640
And if you wanted to know how fast it would
play, had I hit the play button, that's, that's

00:12:49.640 --> 00:12:53.670
fast. And we can also check what rate its
playing at at any given time, which is really

00:12:53.670 --> 00:12:56.710
useful in case people are fiddling around
with UIs in ways you weren't expecting, or,

00:12:56.710 --> 00:13:00.870
or maybe had done various interactions you're
weren't quite sure where they're at. So, I

00:13:00.870 --> 00:13:05.040
think this, this basically gives us all the
things that you could wish and hope and dream

00:13:05.040 --> 00:13:09.470
for, maybe we missed some, with time. So,
hopefully, you guys have, take good advantage

00:13:09.470 --> 00:13:13.150
of that and build some cool stuff.

00:13:13.150 --> 00:13:14.150
[pause]

00:13:14.150 --> 00:13:20.130
The next topic I'm gonna get into in detail
is balloons. The main difference, really,

00:13:20.130 --> 00:13:26.620
with balloons in the, the API versus the downloadable
client is the client ships with WebKit and

00:13:26.620 --> 00:13:31.170
those balloons are rendered in the WebKit,
whereas the plugin renders the balloons using

00:13:31.170 --> 00:13:34.380
the browser that people are using. So, it's
just really important when you're creating

00:13:34.380 --> 00:13:39.480
your KML to think about cross-browser compatibility
and how that's gonna get rendered. But, the

00:13:39.480 --> 00:13:44.370
other big difference is now we're running
in the browser with the security of the user

00:13:44.370 --> 00:13:50.641
in the browser, and there can be all kinds
of stuff in this KML; JavaScript, other things

00:13:50.641 --> 00:13:54.700
that could have security implications. And
so, our solution there is we just strip out

00:13:54.700 --> 00:13:59.380
all of the stuff, which I'm gonna call active
content, for this talk. We strip out the active

00:13:59.380 --> 00:14:03.300
content, and that means your code doesn't
work anymore; it's a little disappointing.

00:14:03.300 --> 00:14:08.140
So, there's a few ways to work around this
and the common pattern is what we'll do is

00:14:08.140 --> 00:14:11.160
we'll listen for a click event and if someone
clicked on a placemark and create the balloon

00:14:11.160 --> 00:14:14.261
would pop up with say, Hey, don't pop up that
balloon actually, preventDefault is that,

00:14:14.261 --> 00:14:20.930
the syntax there. Instead, let's get the description
of that placemark, create our own custom balloon,

00:14:20.930 --> 00:14:25.990
a, an HTML string balloon, HTML div balloon,
and then pop that open. And because we've

00:14:25.990 --> 00:14:30.070
done it programmatically, we can put the JavaScript
in thatâ€™s enabled and working and I'll,

00:14:30.070 --> 00:14:33.070
I'll show you a demo in a second. And that
works great, so now we can have JavaScript

00:14:33.070 --> 00:14:37.780
in there. But, there are some problems with
this pattern.

00:14:37.780 --> 00:14:43.580
The first pattern is what if you have extended
data? getDescription gets the actual description.

00:14:43.580 --> 00:14:47.290
You can get the name to sort of get what would
be by default the title of the balloon, but

00:14:47.290 --> 00:14:52.330
more and more folks are using templates and
for other reasons using extended data and

00:14:52.330 --> 00:14:56.280
that's not gonna work with this pattern. So,
you'll, you'll just get the description every

00:14:56.280 --> 00:15:00.390
time instead of the actual values and the
nice rendered content that you would expect

00:15:00.390 --> 00:15:06.280
to show up the same way, maybe in your plugin
as, as you would in Earth. And so, the solution

00:15:06.280 --> 00:15:14.300
that we have here is a couple of new methods.
So, one is getBalloonHtml; and this will get

00:15:14.300 --> 00:15:21.130
the content of the placemark rendered with
all the extended data in its appropriate styles

00:15:21.130 --> 00:15:26.950
template, but that active content will still
be stripped out, which is great, because actually,

00:15:26.950 --> 00:15:33.660
it's not a bad idea to not allow users to
run arbitrary, potentially unsafe JavaScript

00:15:33.660 --> 00:15:36.620
and other things. Unle-, unless you're feeling
really confident you know where that KML came

00:15:36.620 --> 00:15:41.260
from. On the other hand, you often are. It's
your KML, it's your data, and you might have

00:15:41.260 --> 00:15:45.550
a YouTube video you wanna pop up and just
play and that would be great. And so, we have

00:15:45.550 --> 00:15:49.780
getBalloonHtmlUnsafe;, which is a warning
to you guys, just keep in mind. That stuff's

00:15:49.780 --> 00:15:57.060
not stripped out and so it will get rendered
with all of the active content in there, and

00:15:57.060 --> 00:16:00.900
YouTube videos will play and the JavaScript
will make things flash and, and so forth.

00:16:00.900 --> 00:16:02.500
That's what people do with JavaScript, I think.

00:16:02.500 --> 00:16:04.121
So, let's look at a demo of that.

00:16:04.121 --> 00:16:07.710
[pause]

00:16:07.710 --> 00:16:09.110
So, balloons.

00:16:09.110 --> 00:16:10.110
[pause]

00:16:10.110 --> 00:16:18.660
Iâ€™m gonna go ahead and just look at this
extended data example. What I'm doing is parsing

00:16:18.660 --> 00:16:23.740
this, this KML string that I have. And what
you'll notice in this KML is I have a style

00:16:23.740 --> 00:16:28.100
from the balloon. It's got a template in here.
You can guess it's maybe some kind of animal.

00:16:28.100 --> 00:16:34.130
We're expecting it to say species is something
and age is something else. And when we hop

00:16:34.130 --> 00:16:38.660
down here to the extended data of our placemark,
here's our placemark, we have some extended

00:16:38.660 --> 00:16:44.620
data, you'll notice that we have a badger.
And the badger's age has actually got some

00:16:44.620 --> 00:16:47.180
JavaScript. We don't want to just display
it; make people click to see the badger's

00:16:47.180 --> 00:16:50.110
age. It should alert three for us though,
right?

00:16:50.110 --> 00:16:57.970
So, I think I, I'm gonna reload this since
I cut and pasted there. We should have a placemark

00:16:57.970 --> 00:17:06.319
and when we click it, we do not see the extended
data and the reason for that is down here,

00:17:06.319 --> 00:17:14.100
it's a tricky demo, I have getDescription.
Let's go ahead and change this to getBalloonHtmlUnsafe;

00:17:14.100 --> 00:17:19.679
and run that code.

00:17:19.679 --> 00:17:21.529
[pause]

00:17:21.529 --> 00:17:27.629
What we should get is a placemark with our
extended data rendered appropriately, and

00:17:27.629 --> 00:17:33.309
if we click to see the age Appspot says three.
So, had we chose just getHtml, that alert

00:17:33.309 --> 00:17:36.000
would, it would still render like this, it
would look like this, but you click on it

00:17:36.000 --> 00:17:38.720
and nothing would happen. So, this is just
a really common thing folks run into. They

00:17:38.720 --> 00:17:42.910
click on some JavaScript, they have some other
stuff, and then it just doesn't work. Why

00:17:42.910 --> 00:17:46.690
doesn't this YouTube video show up? And so
this, this is a great solution for those kind

00:17:46.690 --> 00:17:50.899
of more robust placemarks. It, it was pretty
much impossible before. You could get the

00:17:50.899 --> 00:17:56.320
KML and parse it yourself, but then the styles
wouldn't apply. So, this is, this is a huge

00:17:56.320 --> 00:18:01.649
step forward. Doesn't actually solve everything,
though. Sometimes you're popping open balloons

00:18:01.649 --> 00:18:05.399
and nobody clicked on them, so listening for
a click event won't work. For example, there's

00:18:05.399 --> 00:18:08.480
a tour, and you're playing through the tour,
and then you have some animation update and

00:18:08.480 --> 00:18:14.400
the balloon pops open and there's no way to
do it. So, new balloon opening event, this,

00:18:14.400 --> 00:18:17.860
I think's gonna be really useful for another
almost impossible situation. You can just

00:18:17.860 --> 00:18:22.149
listen to this event. A similar pattern, except
we're listening on ge instance here. And as

00:18:22.149 --> 00:18:26.710
soon as we hear a balloon opening, we can
go ahead and do this basically same pattern

00:18:26.710 --> 00:18:30.850
as before, instead of listening for a placemark
click. So, it's really just a mix and match

00:18:30.850 --> 00:18:35.070
of these which is best for your particular
use case. You don't always just want to use

00:18:35.070 --> 00:18:39.100
this because you might have some placemarks
you don't wanna override the default thing

00:18:39.100 --> 00:18:43.769
that happens when a balloon pops open. Maybe
you only want to do it on your particular

00:18:43.769 --> 00:18:49.840
content. So, keep in mind, you don't just
wanna go for this, you use whatever is best

00:18:49.840 --> 00:18:55.220
for your situation. And speaking of getting
your own content versus some arbitrary KML,

00:18:55.220 --> 00:18:58.460
I don't have time to go into these, so I'm
just mentioning them cause I know some folks

00:18:58.460 --> 00:19:03.490
have j-, just been begging for this because
again, it makes life so much easier. We have

00:19:03.490 --> 00:19:08.049
a bunch of new methods. They're in the documentation.
I'm not going to go into them in detail here,

00:19:08.049 --> 00:19:12.110
except to say if these look like things that
you've been wanting, you're really excited

00:19:12.110 --> 00:19:13.289
right now.

00:19:13.289 --> 00:19:14.289
[applause]

00:19:14.289 --> 00:19:19.740
I will just wanna mention that we have some
amazing, amazing demos out there in the sandbox.

00:19:19.740 --> 00:19:23.480
We have some partners who've built some great
stuff that you know, aren't in the sandbox

00:19:23.480 --> 00:19:27.529
as well. Make sure you go out and check the
stuff out there. If you were around last night,

00:19:27.529 --> 00:19:31.990
how many of you saw the VituSphere demo at
the party last night? The huge hamsterball.

00:19:31.990 --> 00:19:36.600
And that actually can run not only their game
they were playing, their shoot 'em up, but

00:19:36.600 --> 00:19:41.519
a shoot 'em up that Vermont, on the team who,
who not only did a lot of these cool things

00:19:41.519 --> 00:19:47.230
that are out today, put together that uses
arbitrary controls, in this case, Virtusphere,

00:19:47.230 --> 00:19:51.640
to have the Earth API embedded in that. So,
as you're looking around with the VR goggles

00:19:51.640 --> 00:19:57.720
and the controller, the gun, that actually
interacts with API. So, that example, the

00:19:57.720 --> 00:20:05.669
sandbox examples, stuff you can see in our
gallery, hopefully will give you guys some

00:20:05.669 --> 00:20:08.379
good impetus to build some demos that we can
get you in the sandbox next year and, and

00:20:08.379 --> 00:20:15.409
see what you do. So with that, I want to hand
it over to Mano, who's gonna talk about KML.

00:20:15.409 --> 00:20:17.269
[applause]

00:20:17.269 --> 00:20:20.999
&gt;&gt;Mano: Ok.

00:20:20.999 --> 00:20:22.870
[applause]

00:20:22.870 --> 00:20:23.950
Look, no hands!

00:20:23.950 --> 00:20:24.950
[laughter]

00:20:24.950 --> 00:20:31.100
Wait, I'm not sure what that means. Ok, hi
everybody. My name is Mano Marks, thanks Josh

00:20:31.100 --> 00:20:36.960
for the introduction and, and the great new
things. I'm real excited about what's going

00:20:36.960 --> 00:20:42.529
on with Earth, with Earth and KML and I'm
here now to talk to you specifically about,

00:20:42.529 --> 00:20:48.669
about KML. I've got, in particular, I've got
one technique that Iâ€™ve kind of run into

00:20:48.669 --> 00:20:53.029
and seen if, if a couple of people develop
over the last year that I wanna share with

00:20:53.029 --> 00:21:00.370
you. I'm gonna share that with you first because
it's old KML, and then I'm gonna share a new,

00:21:00.370 --> 00:21:04.600
a new feature of KML cause a new, as soon
as I start trying the new feature with KML,

00:21:04.600 --> 00:21:08.789
you're gonna wanna try it out and you're gonna
start playing with it and you're gonna ignore

00:21:08.789 --> 00:21:11.860
the other piece. So, that's a, that's, that's
the reason for the ordering there.

00:21:11.860 --> 00:21:14.290
[pause]

00:21:14.290 --> 00:21:21.350
How many of you are KML developers? Nice,
nice, I like seeing that. You know there are

00:21:21.350 --> 00:21:30.299
over half a billion KML files on the Web right
now. It's the largest; the most used geographic

00:21:30.299 --> 00:21:36.600
data language out there. So, very, very happy
to talk to you about some things. One, one

00:21:36.600 --> 00:21:41.230
thing I wanna talk to you about, th-, th-,
both of the things that I'm talking to you

00:21:41.230 --> 00:21:49.460
about today are really about efficiency. So,
KML provides you, it's an XML Markup Language,

00:21:49.460 --> 00:21:55.120
so it can be, it can be a little verbose compared
to some sort of very compact JSON strings

00:21:55.120 --> 00:22:00.889
or something like that, that, that people
are passing around. But, but, Google Earth

00:22:00.889 --> 00:22:06.169
has such tremendous capacity to be able to
show, you know, tens of thousands of vertices

00:22:06.169 --> 00:22:11.549
and points on things that people tend to,
to load up their KML with lots of, lots of

00:22:11.549 --> 00:22:17.350
stuff. Cause they really wanna show a lot.
And one of the problems that you, you run

00:22:17.350 --> 00:22:24.980
into is, well one of the problems is bandwidth.
File sizes just get really large. And so the

00:22:24.980 --> 00:22:31.450
first technique I wanna, I wanna talk to you
about involves using network links that incrementally

00:22:31.450 --> 00:22:40.820
update, that get you, get you the data in
chunks so that you have a better user experience.

00:22:40.820 --> 00:22:46.570
One, you're using less; you're using less
bandwidth, right? So, the server has to serve

00:22:46.570 --> 00:22:54.289
less. There's less load on, on, on the server.
Two, things show up earlier for the user.

00:22:54.289 --> 00:23:01.269
This incremen-, incrementally u-, updating
your KML shows, shows something to the user.

00:23:01.269 --> 00:23:08.640
If you're, if you're downloading a 2MB or
5MB file all at once, then somehow the user

00:23:08.640 --> 00:23:13.629
has to sit there and know, Oh, this isn't
broken, it's just waiting for a download.

00:23:13.629 --> 00:23:19.389
So, I'm gonna, the technique is actually to
use update. Now, of those KML developers out

00:23:19.389 --> 00:23:30.230
there, how many of you have used Update in
KML? Wow, ok. That, the, that is not very

00:23:30.230 --> 00:23:39.340
many of you, but it's also, you're probably
the top 20 update users in, in the world right

00:23:39.340 --> 00:23:44.510
now because there's, there's very few people
who actually use, use Update for, for their

00:23:44.510 --> 00:23:51.809
KML. So, update is a mechanism that was introduced
back in, I'm not sure if it was KML 2.0, it

00:23:51.809 --> 00:23:57.399
might have been 2.0, 2.1, but the, the objective
is to allow for changes to KML that's already

00:23:57.399 --> 00:24:08.299
been downloaded using a network link. So,
lemme, let me do a quick overview of what

00:24:08.299 --> 00:24:12.549
the, what the technique looks like. Now, one
reason that update isn't used very often is

00:24:12.549 --> 00:24:19.940
this is actually fairly complex. One of the
themes that you heard from Josh, when he was

00:24:19.940 --> 00:24:23.840
talking about balloons is, is security. And
one of the things that we, we wanted to do

00:24:23.840 --> 00:24:31.289
was to be very careful about allowing different
sites to, or rather, not allowing different

00:24:31.289 --> 00:24:39.110
sites to update and change KML that's already
loaded by somebody else. So, what, we had,

00:24:39.110 --> 00:24:44.899
we had to put in a mechanism that made that
difficult to do. So, the first thing you do

00:24:44.899 --> 00:24:51.720
to, to accomplish this, is you, you load a
network link. Alright, so the network link

00:24:51.720 --> 00:24:59.049
goes off to a server and downloads, downloads
some KML. The second thing you do is load

00:24:59.049 --> 00:25:03.879
a second network link. This is usually the
point where people get a little stuck because

00:25:03.879 --> 00:25:08.929
that's, that requires that the developer,
they think, that requires that the user then

00:25:08.929 --> 00:25:13.960
download yet another network link. The idea
is the, the first network link downloads some

00:25:13.960 --> 00:25:19.009
KML and then the second network link goes
off and downloads a network link control,

00:25:19.009 --> 00:25:25.619
which is what you see on the right. Well,
the technique that you'd do to get around

00:25:25.619 --> 00:25:30.480
the, the user actually having to download
a second one, is you put the second network

00:25:30.480 --> 00:25:37.440
link in the first file that's downloaded.
So, the first network link downloads, downloads

00:25:37.440 --> 00:25:44.240
a file that has within it the network link
to the network link control. It goes off,

00:25:44.240 --> 00:25:48.869
gets the network link control, and in that
network link control, what it does, is it

00:25:48.869 --> 00:25:54.700
has an update element with a create element
that creates a whole bunch of placemarks,

00:25:54.700 --> 00:26:00.429
or whatever it is that you're, you're downloading.
The other thing it does is it iterates a cookie.

00:26:00.429 --> 00:26:05.019
So, this cookie then gets attached to this
network link control. It's the only place

00:26:05.019 --> 00:26:08.240
in Google Earth that you have a cookie that
is persistent.

00:26:08.240 --> 00:26:11.149
[audience member coughs]

00:26:11.149 --> 00:26:16.950
So, this cookie gets attached to this net-,
network link and the network link control

00:26:16.950 --> 00:26:22.570
basically successively iterates the cookie.
So, you, this cookie doesn't actually have

00:26:22.570 --> 00:26:29.950
to be, it doesn't have to be something that
the, that personally identifies the user.

00:26:29.950 --> 00:26:33.779
You could use it that way. It's a lot more
complicated and if you wanna figure out how

00:26:33.779 --> 00:26:38.639
to do it, I'm sure you can, it's just lots
of additional steps. But basically, it's,

00:26:38.639 --> 00:26:43.759
it's a counter that tells how many times you've
hit the server and then the server just makes

00:26:43.759 --> 00:26:50.001
a decision then. Ok, I'm gonna, I'm going
to go back and, and get the second or the

00:26:50.001 --> 00:26:56.110
third or the fourth either KML file, or batch
of KML; however you wanna, you want to generate

00:26:56.110 --> 00:27:04.019
it. So, that's, that's what this, this diagram
is showing and let me show you what this actually

00:27:04.019 --> 00:27:05.970
ends up looking like.

00:27:05.970 --> 00:27:07.280
[pause]

00:27:07.280 --> 00:27:18.950
Both Josh and I basically have recently shifted
to using, using Macs, so we're a little slow

00:27:18.950 --> 00:27:27.299
on the Mac. That's what, that's what you're
seeing here. Ok, so, we've got a little server

00:27:27.299 --> 00:27:35.160
running a local host here. And you see here,
it downloads, I, I've got it set to update

00:27:35.160 --> 00:27:41.749
every four, four seconds. Basically what I
did is I just wanted to up-, do something

00:27:41.749 --> 00:27:47.860
fairly simple to illustrate the, the concept.
But the first, the first batch of data is

00:27:47.860 --> 00:27:58.629
a, it's a KML that puts a placemark every
point of longitude at one latitude, and just

00:27:58.629 --> 00:28:09.149
does that from zero to 180 longitude. So,
so you see there. And then each successive,

00:28:09.149 --> 00:28:13.519
every four seconds when it goes and hits the
server again, it loads the next one, which

00:28:13.519 --> 00:28:19.779
just does the same thing but shifts it up
by one, by one point of latitude. So, you

00:28:19.779 --> 00:28:25.369
can see here, the user, and you can speed
this up, you don't have to do this in one

00:28:25.369 --> 00:28:29.129
second. You can do this in, or four seconds,
you can do this in one second. You could also

00:28:29.129 --> 00:28:34.149
load larger amounts than I'm showing you here.
But the idea here is, is basically just to

00:28:34.149 --> 00:28:40.390
show you this, this sort of gradual increase
of data in the, in the client. So, to the

00:28:40.390 --> 00:28:46.289
user, it, it, it appears to happen very fast,
but gradually more data gets in there so the,

00:28:46.289 --> 00:28:51.190
the user can then start, the user then knows
that something's going on and can start interacting

00:28:51.190 --> 00:28:58.299
with it while the network link is still going.

00:28:58.299 --> 00:29:00.159
[pause]

00:29:00.159 --> 00:29:12.309
And, there, ok. So, that's the tip. So, now
we're gonna get back to time.

00:29:12.309 --> 00:29:14.259
[pause]

00:29:14.259 --> 00:29:24.600
How many of you have tried to animate a model
in KML before? Ok. How, or point, you could

00:29:24.600 --> 00:29:34.029
use a geometry, use time, time animation?
Ok. So, a few, a few years ago when we introduced

00:29:34.029 --> 00:29:40.090
time to KML, back, back when we owned KML,
before we gave it away to the Open Geo-spatial

00:29:40.090 --> 00:29:45.980
Consortium, we, we did it in order to add
a fourth dimension to data. And the idea was

00:29:45.980 --> 00:29:55.009
that people could display time-related things.
A point changes, moves, say you have a path

00:29:55.009 --> 00:29:59.230
that you're describing. You could, you could
show it only during the time periods in which

00:29:59.230 --> 00:30:08.039
it's, which it was, it was active. But people
immediately latched on to it as a way to do

00:30:08.039 --> 00:30:14.910
model animation. So, they put in time whether
or not it was related to actual time. They

00:30:14.910 --> 00:30:22.289
put in time that, you know, you could put
in time codes of, you know, one-two-three-four-five.

00:30:22.289 --> 00:30:26.049
Basically, they wanted to use it for, for
time animation. They wanted to use it for

00:30:26.049 --> 00:30:34.409
large data sets. And the problem with time
is that for every placemark, for every geometry,

00:30:34.409 --> 00:30:39.590
for everything you did, for every piece of
time, you had to recreate that. You had to

00:30:39.590 --> 00:30:47.340
create a whole new one with a new timestamp
or a new time spent. And lemme show you what,

00:30:47.340 --> 00:30:54.499
what that might actually look like. So, Frank
Taylor was kind enough to give me a GPS, a

00:30:54.499 --> 00:31:03.690
GPX track that he, of his trip. So, Frank
Taylor runs the Google Earth blog and he's

00:31:03.690 --> 00:31:11.519
now taking a trip around the world; he's sailing
in a boat. It's very cool. And I converted

00:31:11.519 --> 00:31:21.869
that GPX track to a KMZ using this, using
this method. And you'll see there that there's

00:31:21.869 --> 00:31:31.149
a line and it's got a, it's got a path and,
and, and this is what it, it will physically

00:31:31.149 --> 00:31:41.230
look like, like if I play it, lemme zoom out
a little bit. Press play. Gonna set the rate

00:31:41.230 --> 00:31:46.679
down to one hundred so that you can actually
see what's, what's going on.

00:31:46.679 --> 00:31:47.679
&gt;&gt;Josh: Set rate to 100 and then hit tab

00:31:47.679 --> 00:31:48.679
&gt;&gt;Mano: I did hit tab

00:31:48.679 --> 00:31:51.669
&gt;&gt;Josh: I think you hit the play button

00:31:51.669 --> 00:31:53.619
&gt;&gt;Mano: Ah

00:31:53.619 --> 00:32:09.230
&gt;&gt;Josh: [inaudible] put it back to the beginning.
[pause] Donâ€™t, donâ€™t use the UI to play,

00:32:09.230 --> 00:32:17.039
just change it to 12,000 and hit tab

00:32:17.039 --> 00:32:21.909
[audience member coughs]
[long pause]

00:32:21.909 --> 00:32:31.600
&gt;&gt;Mano: Ok. So, you'll see, first of all,
you may notice that it's really slowing down

00:32:31.600 --> 00:32:40.549
my interface to move, to move through it as
it's, as these, as this time is playing. Lemme,

00:32:40.549 --> 00:32:50.690
lemme tell you what this; show you what the
code actually looks like. This is what the,

00:32:50.690 --> 00:32:57.429
the KML for this actually looks like. Placemark
with a timestamp, you might put in multi-geometry

00:32:57.429 --> 00:33:04.379
or a single geometry. You could get away with
putting the timestamp maybe on a folder that's

00:33:04.379 --> 00:33:10.749
got a whole set of geometries, but regardless,
you're, you're creating many, many placemarks

00:33:10.749 --> 00:33:17.450
and not only that, you're, for something like
this, you're gonna have to create many, many

00:33:17.450 --> 00:33:27.789
styles because the point, at the end of this,
if I can find it here, is, is actually an

00:33:27.789 --> 00:33:34.450
arrow. And that arrow changes directions.
And so every placemark that changes the direction

00:33:34.450 --> 00:33:40.909
of the line has to then have a separate style
with a separately configured direction on

00:33:40.909 --> 00:33:45.940
it. And, and it gets to be kind of a mess.
You see how this is actually look-, moving,

00:33:45.940 --> 00:33:50.330
I don't know if you can tell, but it's moving
very slowly as I, as I pan through it. That's

00:33:50.330 --> 00:33:58.779
because this file, it has 24 thousand points
along the GPX track. And it, and it created

00:33:58.779 --> 00:34:07.440
a file that was 21MB in size. So, you think
there, there must be a solution to that and

00:34:07.440 --> 00:34:13.510
people often said to us, Well, why don't you,
instead of creating a new point for every

00:34:13.510 --> 00:34:23.130
point in time, you allow us to move the point?
So we did. So, we're gonna announce today

00:34:23.130 --> 00:34:33.700
a new extension to, to KML, which is Track.
Now, Track is a way of, of, of moving a single

00:34:33.700 --> 00:34:42.270
point through space. Now, that point can actually
be a point or it could be a model. So, you

00:34:42.270 --> 00:34:48.800
can use this for both animating a, a specific
point, or you can use it for animating a 3D

00:34:48.800 --> 00:34:55.010
model along, along a particular route. Now,
there are the basic, Track is a geometry,

00:34:55.010 --> 00:34:59.860
so it lives inside of a placemark. And one
of the reasons this is, this is important

00:34:59.860 --> 00:35:06.871
is that, you'll notice before, we were creating
a placemark for every single, for every single

00:35:06.871 --> 00:35:12.650
new timestamp, for, to, you know, we'd have
to repeat that. Well, placemark is one within

00:35:12.650 --> 00:35:17.840
your own KML code, its heavyweight. It takes,
you know, there's a lot of code to, to create

00:35:17.840 --> 00:35:25.240
a placemark. The, two, it's actually fairly
heavyweight within, within Google Earth itself.

00:35:25.240 --> 00:35:31.820
It, you know, there's a lot that's associated
with the object code for that. So, Track is

00:35:31.820 --> 00:35:36.930
a, is a geometry, which is a much slimmer,
much smaller thing within our own application.

00:35:36.930 --> 00:35:44.240
And for your KML, it's going to be a lot,
a lot slimmer as well. So this, this uses

00:35:44.240 --> 00:35:49.320
a technique of parallel arrays. So, you see
here, I just took a, a very small sample,

00:35:49.320 --> 00:35:54.150
obviously, of the 24 thousand points along
the way. There are three when elements and

00:35:54.150 --> 00:36:02.600
there are three gx coord. The gx prefix identifying
it as being in our extension namespace. These

00:36:02.600 --> 00:36:08.860
are parallel arrays. So, the first when element
corresponds to the first coord element, the

00:36:08.860 --> 00:36:19.440
second to the second, the third to the third.
Still, still a lot of writing for the individual,

00:36:19.440 --> 00:36:30.640
the individual points, but the file, the same
file that produced the 21MB file, when using

00:36:30.640 --> 00:36:42.550
a traditional methods, one, I'm sorry, 2MB,
2.2MB, and dropped that down to a KMZ, so,

00:36:42.550 --> 00:36:49.620
compressed version; 640MB, including the 3D
model inside of it. I'm sorry, kilobytes.

00:36:49.620 --> 00:36:51.730
[Mano laughs]

00:36:51.730 --> 00:36:59.160
For you on YouTube, let me repeat that: 640KB,
including the model and the textures that

00:36:59.160 --> 00:37:01.930
were used on the model. So, let me show you
what that looks like.

00:37:01.930 --> 00:37:07.090
[pause]

00:37:07.090 --> 00:37:31.410
I'm gonna zoom in. What I did, was I took
a model that, that Frank had done for his,

00:37:31.410 --> 00:37:50.230
for his boat. And I'm getting a little slowdown
on my--

00:37:50.230 --> 00:38:01.920
&gt;&gt;Josh: Change the rating to about 1200

00:38:01.920 --> 00:38:05.270
&gt;&gt;Mano: Ok.

00:38:05.270 --> 00:38:06.940
[pause]

00:38:06.940 --> 00:38:13.560
So, you see here that the model is moving
along there and it's moving along there and

00:38:13.560 --> 00:38:22.870
it's got a point, a point associated with
it as well.

00:38:22.870 --> 00:38:28.500
And it continues to move in, and I'm gonna
zoom in along that track. This is actually

00:38:28.500 --> 00:38:39.131
made up of, of four different tracks, but
the effect is essentially the same. I didn't

00:38:39.131 --> 00:38:44.550
do any, any optimization on this. I didn't,
you know, reduce the file size by getting

00:38:44.550 --> 00:38:50.870
rid of all the spaces or anything like that.
Take ano-, another look at, you see how the

00:38:50.870 --> 00:38:58.660
model is actually changing its orientation.
I did nothing to accomplish that. I did not

00:38:58.660 --> 00:39:05.110
add in a single line of KML to do that. I
could have, actually in Track we also support

00:39:05.110 --> 00:39:10.320
gx angles, which is a separate parallel array
that gives you the different angles that,

00:39:10.320 --> 00:39:14.510
that the model would be facing at. But, no-,
nothing to accomplish that. It automatically

00:39:14.510 --> 00:39:21.280
detects where, you know, where the next point
is and reorients the model, accordingly. So,

00:39:21.280 --> 00:39:30.180
that's a, that's a pretty tremendous, a pretty
tremendous benefit.

00:39:30.180 --> 00:39:34.860
[pause]

00:39:34.860 --> 00:39:40.320
So, I'm, I'm really excited to see this as,
as I said. Both these, both these techniques

00:39:40.320 --> 00:39:46.580
that I've demonstrated today are gonna really
help you in creating much more efficient KML

00:39:46.580 --> 00:39:59.370
and also creating really interesting animations
using, using Track. And the one last, the

00:39:59.370 --> 00:40:05.350
one last point that I wanna make at this point
is that we're, in the, in the conversion from

00:40:05.350 --> 00:40:10.900
a GPX, we're also gonna be putting in a mechanism
for you to retain the metadata that might

00:40:10.900 --> 00:40:19.250
be coming along with your, with that, with
that track. So, in that G, in some GPX files,

00:40:19.250 --> 00:40:23.590
you have things like heart rates, if it's
a heart rate monitor. Or, you might have on

00:40:23.590 --> 00:40:29.540
your mobile device things like the position
of the phone itself, what, you know, what

00:40:29.540 --> 00:40:36.160
your orientation is, that sort of thing which
could then be used, very easily, within our,

00:40:36.160 --> 00:40:45.930
within Track to reposition a model of yourself
or something like that. Ok, so that concludes

00:40:45.930 --> 00:40:51.840
sort of the technical portion of the presentation.
I wanna give a little shout-out to, for Google

00:40:51.840 --> 00:40:58.000
Developer Qualification. Those of you who
have been to other Geo Talks know that we

00:40:58.000 --> 00:41:05.680
started Google Developer Qualification program,
which includes all of the, the APIs you see

00:41:05.680 --> 00:41:11.710
there, and we're announcing, right now, the
inclusion of KML. So, those of you who want

00:41:11.710 --> 00:41:17.021
to become qualified developers, which would,
basically means that we recognize that you

00:41:17.021 --> 00:41:22.410
pass a test and you contribute to community,
and you keep your skills up, then you get

00:41:22.410 --> 00:41:29.450
listed in the Qualified Developer Program
and that's, that gives you, gives other people

00:41:29.450 --> 00:41:34.090
access to you. I mean, basically what happened
was for years people have been saying to us,

00:41:34.090 --> 00:41:37.720
Hey, do you know a great KML developer? And
we'd just all be like, well, off the top of

00:41:37.720 --> 00:41:42.970
my head, Josh Livni or, you know, something.
And then we'd hire them and then we'd have

00:41:42.970 --> 00:41:48.000
one less person we could recommend you to
get outside. So, you could be those people

00:41:48.000 --> 00:41:51.870
and now we can, we can point them to a site
so we don't all have these separate spreadsheets

00:41:51.870 --> 00:41:57.960
and, and everything. In, and it's a more objective
evaluation. So, this is a, this is a great

00:41:57.960 --> 00:42:01.780
program so please get involved.

00:42:01.780 --> 00:42:06.180
Now, Josh, you wanna come up on stage and
we'll go ahead and--

00:42:06.180 --> 00:42:07.560
&gt;&gt;Josh: Yeah, let's do that

00:42:07.560 --> 00:42:09.471
&gt;&gt;Mano: Do you have the Wave already up?

00:42:09.471 --> 00:42:10.471
&gt;&gt;Josh: I got it here.

00:42:10.471 --> 00:42:12.830
&gt;&gt;Mano: You got it there? Ok.

00:42:12.830 --> 00:42:15.980
&gt;&gt;Josh: Let's ah, click it in

00:42:15.980 --> 00:42:21.520
&gt;&gt;Mano: Oh. You probably need this, too.

00:42:21.520 --> 00:42:22.520
&gt;&gt;Josh: Yeah, probably. We'll prop this up
here. While we're getting this up, do you

00:42:22.520 --> 00:42:27.470
guys wanna head up to the mic with any questions
you have?

00:42:27.470 --> 00:42:29.420
[pause]

00:42:29.420 --> 00:42:38.860
&gt;&gt;audience1: Yeah, hi. With the Track that
you just showed, it's not focusing on, on

00:42:38.860 --> 00:42:42.130
the point. It's not following it, is there,
would it do it automatically, or would you

00:42:42.130 --> 00:42:53.110
have to add like a code for focus or follow
or something like this? And does Track work

00:42:53.110 --> 00:42:55.300
in Google Earth, KML? --

00:42:55.300 --> 00:42:59.560
&gt;&gt;Mano: So, that's a, that's a good point.
So, everything that you've seen right now

00:42:59.560 --> 00:43:03.730
will not work in the current, except for the
update tip that I gave you, will not work

00:43:03.730 --> 00:43:09.340
in the current release version of either Earth
or the plugin. They, it will work in the developer

00:43:09.340 --> 00:43:16.220
channel release and both of, in; they're targeted
to work in both the release versions of Earth

00:43:16.220 --> 00:43:22.380
and the plugin when they're finalized. It,
feedback like that, that's great feedback,

00:43:22.380 --> 00:43:28.930
we haven't finalized how the user interface
is gonna work, so contribute that to the developer

00:43:28.930 --> 00:43:34.890
channel and we really, we'll be really interested
to hear about that.

00:43:34.890 --> 00:43:40.930
&gt;&gt;audience2: So, two quick questions. You
may have already said it, but what was the,

00:43:40.930 --> 00:43:44.010
what's the reduction in memory, or, or, how
do you quantify this performance increase

00:43:44.010 --> 00:43:47.910
when you're doing Track versus trying to use
points to do animation?

00:43:47.910 --> 00:43:52.690
&gt;&gt;Mano: How do we quantify it? I, I did the
conversion and tested it.

00:43:52.690 --> 00:43:54.490
&gt;&gt;audience2: I mean, what was it?

00:43:54.490 --> 00:44:05.930
&gt;&gt;Mano: So, is, same Track produced a 2MB
track file and a 21MB traditional placemark

00:44:05.930 --> 00:44:06.930
animation file.

00:44:06.930 --> 00:44:07.930
&gt;&gt;audience2: Gotcha.

00:44:07.930 --> 00:44:11.460
&gt;&gt;Mano: And the larger the file, and the more
points, the more likely it is that that's

00:44:11.460 --> 00:44:16.400
gonna be a larger and larger file because
the more twists and turns you have, the more

00:44:16.400 --> 00:44:20.200
styles that you need, etc. So, that's gonna--

00:44:20.200 --> 00:44:24.760
&gt;&gt;audience2: The second question is we're
actually using Google Earth on a, on a production

00:44:24.760 --> 00:44:30.400
implementation now and, and we have two viewport
windows so we show one sort of 3D view and

00:44:30.400 --> 00:44:35.400
another top-down view. We have a lot of problems
with, with, in the launching of those two

00:44:35.400 --> 00:44:40.540
Google Earth instances. It actually starts
up two processes on the machine. Is there

00:44:40.540 --> 00:44:44.070
sort of a best practice to stagger the launch,
or is that a known bug, or, or are you aware

00:44:44.070 --> 00:44:45.290
of that kind of an issue?

00:44:45.290 --> 00:44:46.720
&gt;&gt;Mano: Josh, do you wanna take it?

00:44:46.720 --> 00:44:50.870
&gt;&gt;Josh: Is this regarding the API and loading
up two in the browser at the same time?

00:44:50.870 --> 00:44:51.870
&gt;&gt;audience2: Correct, yes.

00:44:51.870 --> 00:44:57.150
&gt;&gt;Josh: Yeah, I don't think we have a best
practice, but I have found that if you maybe

00:44:57.150 --> 00:45:02.450
just do a set timeout of like, 200 milliseconds
or something like that, the, the way that

00:45:02.450 --> 00:45:09.143
the API uses memory is we don't share the
cached, the cache, the memory cache there,

00:45:09.143 --> 00:45:13.600
and so they kind of initialize a chunk of
space for each and, yeah. I mean it's an interesting

00:45:13.600 --> 00:45:16.880
question, I haven't really tested, tested
that, but I have found that if, if you just

00:45:16.880 --> 00:45:21.410
set like, a small set timeout, a quarter of
a second or something, that can stop some

00:45:21.410 --> 00:45:26.000
of the jerkiness that might pop up.

00:45:26.000 --> 00:45:27.280
&gt;&gt;audience2: Ok, thank you.

00:45:27.280 --> 00:45:31.490
&gt;&gt;Mano: Ok, so lemme go to the Wave for some
questions. The most popular question here

00:45:31.490 --> 00:45:34.900
is, How do you keep the plugin from leaking
too much memory when setting--

00:45:34.900 --> 00:45:35.900
[phone ringing]

00:45:35.900 --> 00:45:39.760
custom HTML balloons ? When you create an
event listener it is quite difficult to remove

00:45:39.760 --> 00:45:42.541
the event listener and it sits in memory of
the plugin.

00:45:42.541 --> 00:45:48.240
&gt;&gt;Josh: Good question, so it seems like two
separate questions. You don't need to set

00:45:48.240 --> 00:45:54.460
an event listener when you create the, a custom
HTML balloon. You can create those and when

00:45:54.460 --> 00:46:00.280
you close down those should be, at least to
memory, as far as I know, I, I've definitely

00:46:00.280 --> 00:46:06.310
set up a couple things which had many thousands
of maybe custom balloons open and close and

00:46:06.310 --> 00:46:09.670
I, I didn't notice the increase in memory,
but I haven't really looked at that. As for

00:46:09.670 --> 00:46:13.120
the event listener, yeah, I don't think we
have a good way to remove event listeners

00:46:13.120 --> 00:46:17.400
so that's a really great request for the public
issue tracker, bring it up in the forum and

00:46:17.400 --> 00:46:22.140
when we get that kind of feedback. Oh, we
do? We have a remove event listener? I hear.

00:46:22.140 --> 00:46:26.150
I take it back. We do have one, and I'm unfamiliar
with it. That's probably in the reference,

00:46:26.150 --> 00:46:30.730
the API reference. So, I'm glad that the experts,
and that's a good point. The experts in the

00:46:30.730 --> 00:46:35.050
team right here correct me. Yeah, so you should
use the remove event listener and, and get

00:46:35.050 --> 00:46:37.000
that out of your memory there.

00:46:37.000 --> 00:46:38.000
[phone ringing]

00:46:38.000 --> 00:46:43.340
&gt;&gt;Mano: Ok, so, then the next question is,
Is this available on mobile devices and browsers?

00:46:43.340 --> 00:46:48.740
The answer is at this point not, not yet.
It's something that we're evaluating. It's,

00:46:48.740 --> 00:46:56.880
you know, every, every additional implementation
makes it a, you know, more engineering work

00:46:56.880 --> 00:47:00.480
on our part. So we're, we are looking at that
and we're aware that there's actually quite

00:47:00.480 --> 00:47:03.310
a bit of interest in doing that.

00:47:03.310 --> 00:47:06.711
So, then the next question is, Is there a
Linux version of the plugin?

00:47:06.711 --> 00:47:11.790
&gt;&gt;Josh: There's not a Linux version of the
plugin as, as the popular discussion on the

00:47:11.790 --> 00:47:16.590
IssueTracker right now is well aware. But,
I am happy to say that we have the intention

00:47:16.590 --> 00:47:21.380
of, of building ah, some Linux compatibility
in the future. We just don't have a timeline

00:47:21.380 --> 00:47:26.230
to announce right now on that. But we definitely
pay attention to your guy's feedback and we

00:47:26.230 --> 00:47:30.310
know that's a popular request.

00:47:30.310 --> 00:47:32.200
[pause]

00:47:32.200 --> 00:47:34.580
Ah, some questions up here.

00:47:34.580 --> 00:47:40.690
&gt;&gt;audience3: Yeah, if I construct multiple
parallel arrays would I be able to dev multiple

00:47:40.690 --> 00:47:43.010
tracks running at the same time?

00:47:43.010 --> 00:47:48.370
&gt;&gt;Mano: You mean, within the, yeah so we actually,
there's one element I didn't show which is

00:47:48.370 --> 00:47:53.830
called a MultiTrack so you can, you can create
a multitrack, which is a container for tracks.

00:47:53.830 --> 00:47:58.260
And so you can certainly have multiple ones.
You can also have different placemarks, which

00:47:58.260 --> 00:48:04.190
have different tracks in them; however you
want to separate that out. And they can have

00:48:04.190 --> 00:48:09.270
timelines that overlap and they will play
successfully. That was actually one of the

00:48:09.270 --> 00:48:14.520
design goals was to allow you to have that
kind of implementation where multiple tracks

00:48:14.520 --> 00:48:22.240
were playing at the same time. Imagine a boat
race instead of a single boat, for instance.

00:48:22.240 --> 00:48:24.930
&gt;&gt;audience3: Thank you.

00:48:24.930 --> 00:48:25.930
&gt;&gt;Mano: Sure. Yes.

00:48:25.930 --> 00:48:28.422
&gt;&gt;audience4: Have you thought about an HTML5
WebGL version of the plugin?

00:48:28.422 --> 00:48:34.690
&gt;&gt;Mano: We're always looking at, at new technologies
that when we set out to do the, the plugin

00:48:34.690 --> 00:48:42.680
originally, we didn't, HTML5 was nowhere near
what we needed and so. So, we're always evaluating

00:48:42.680 --> 00:48:46.540
where we're gonna go with that in the future.
The truth was we were able to repurpose a

00:48:46.540 --> 00:48:52.750
lot of the Google Earth code directly, so,
yeah. I mean it's something that we're looking

00:48:52.750 --> 00:48:57.140
at and the Product Manager for Google Earth
is sitting in the audience right here, Peter

00:48:57.140 --> 00:49:03.520
Birch, he's very tall. So, you can, you can
single him out and ask him about that.

00:49:03.520 --> 00:49:04.840
&gt;&gt;audience4: Ok. Thank you.

00:49:04.840 --> 00:49:09.240
&gt;&gt;audience5: [middle eastern accent] Hi. Is
there any way to unload the Google Earth plugin

00:49:09.240 --> 00:49:13.770
like you have GUnload for Google Maps API?

00:49:13.770 --> 00:49:19.530
&gt;&gt;Josh: An un-, an unload event so that when
someone, say, moves to another page it, it

00:49:19.530 --> 00:49:20.780
releases its whole memory stack?

00:49:20.780 --> 00:49:23.233
&gt;&gt;audience5: Right. Because sometimes, when
I close the browser, the GEPlugin is still,

00:49:23.233 --> 00:49:27.040
you know, running in the background, so.

00:49:27.040 --> 00:49:32.770
&gt;&gt;Josh: So, not that I'm aware of. I may get
corrected again in a moment, I do not believe

00:49:32.770 --> 00:49:42.580
that we have an unload. Yeah, if, if you do
close that, that window it will clean itself

00:49:42.580 --> 00:49:49.210
up, or if the instance goes away I think it
sounds like it might hang around for 5 seconds

00:49:49.210 --> 00:49:52.440
or something? 30 seconds, so yeah, we have
that.

00:49:52.440 --> 00:49:53.440
&gt;&gt;[answer from audience] 30.

00:49:53.440 --> 00:49:54.440
&gt;&gt;audience5: A few times I have, like dozens
of GEPlugin instances in my Task Manager,

00:49:54.440 --> 00:49:57.290
so, that's why, you know, I why I was looking
forâ€¦

00:49:57.290 --> 00:50:00.280
&gt;&gt;Mano: I'm sorry, I can't understand.

00:50:00.280 --> 00:50:03.640
&gt;&gt;Josh: Yeah, I missed that. You said you
have a lot of different Earth plugin instances?

00:50:03.640 --> 00:50:07.750
&gt;&gt;audience5: Yeah, like I, I keep, you know,
running the Google Earth instance in different,

00:50:07.750 --> 00:50:15.940
I mean, in the browser and then I close them
and then suddenly it doesn't load--

00:50:15.940 --> 00:50:19.230
&gt;&gt;Josh: It doesn't free up the memory right
away. Yeah, it sounds like there's about a

00:50:19.230 --> 00:50:24.420
30 second delay. If you have lots of different
instances it's good to note, I, I believe

00:50:24.420 --> 00:50:28.470
the way that the memory works is they get
successively less memory for each one, so

00:50:28.470 --> 00:50:32.780
just keep that in mind if you're gonna be
loading up ten, not to expect your tenth one

00:50:32.780 --> 00:50:39.520
to have the same cache available to it as
the first one. But yeah, it sounds like there's

00:50:39.520 --> 00:50:42.070
a little bit of a delay there, to, to keep
in mind.

00:50:42.070 --> 00:50:43.070
&gt;&gt;Mano: Actually, I believe, don't they share
this, the caches? No? No, sorry.

00:50:43.070 --> 00:50:44.070
&gt;&gt;googleperson: Itâ€™s actually that they
get the same size

00:50:44.070 --> 00:50:45.070
&gt;&gt;Josh: They get the same size?

00:50:45.070 --> 00:50:51.760
&gt;&gt;googleperson: They get the same memory but
with smaller disk cache

00:50:51.760 --> 00:50:55.620
&gt;&gt;Josh: Oh, smaller disk cache for tiles and
so forth, that's a good point. Yeah. Nonetheless,

00:50:55.620 --> 00:51:00.100
I mean, it is a good point, we don't have
an API method to say unload. And, and so it

00:51:00.100 --> 00:51:02.560
just kind of automates itself after--

00:51:02.560 --> 00:51:04.600
&gt;&gt;googleperson: That sounds like [inaudible]

00:51:04.600 --> 00:51:05.830
&gt;&gt;audience5: Sure. Thanks.

00:51:05.830 --> 00:51:06.830
&gt;&gt;Mano: Yes?

00:51:06.830 --> 00:51:13.200
&gt;&gt;audience6: Will the JavaScript API get an
update with tracks in it on the next plugin

00:51:13.200 --> 00:51:16.060
release, or is that just a KML feature?

00:51:16.060 --> 00:51:22.640
&gt;&gt;Mano: So, we, we don't have a timeline for
when it will get into the, into the API itself.

00:51:22.640 --> 00:51:31.250
We do intend to allow you to do anything that
you can do in KML, in the, in the API as well.

00:51:31.250 --> 00:51:35.940
So, I, I can't tell you when it-, it'll happen,
but that's, that's definitely on the road.

00:51:35.940 --> 00:51:44.750
&gt;&gt;audience6: [Indian accent] There seems to
be some interest of using Street Maps on Google

00:51:44.750 --> 00:51:51.300
Earth plugin. Have you all thought about providing
the kind of data instead of the terrain?

00:51:51.300 --> 00:51:56.000
&gt;&gt;Mano: Street Maps though like using our
map tiles from maps.google.com?

00:51:56.000 --> 00:51:57.000
&gt;&gt;audience6: Yes.

00:51:57.000 --> 00:52:01.620
&gt;&gt;Mano: Yeah, this, this is something that
periodically people do request of us. There

00:52:01.620 --> 00:52:08.370
are some, there's not a lot of actual technical
problems from our end, although it is a, they

00:52:08.370 --> 00:52:14.820
are different sources of, of data. There are
some licensing issues that make it less than,

00:52:14.820 --> 00:52:22.630
less than ideal for us to go and do it, and
it hasn't been requested enough that we, we

00:52:22.630 --> 00:52:29.130
have felt compelled to move towards it. It's
actually, so if you put it into the Issue

00:52:29.130 --> 00:52:33.120
Tracker and lots of people star it, then it
is something we might take a little bit more

00:52:33.120 --> 00:52:38.680
interest in. We do, of course, have a Roads
layer in the, in the API, so you can see the

00:52:38.680 --> 00:52:42.880
actual roads overlaid on top of the satellite
imagery.

00:52:42.880 --> 00:52:50.580
&gt;&gt;audience7: This is more of a comment than
it is a question. I work for a public agency

00:52:50.580 --> 00:52:56.740
and we're behind three layers of firewalls.
I'm having a very difficult time rolling out

00:52:56.740 --> 00:53:04.380
Google Earth as the standard product. The
Google Updater interferes, all the security

00:53:04.380 --> 00:53:10.790
things get thrown, so I went with the Google
Earth API for the browser and then I found

00:53:10.790 --> 00:53:15.530
I can't render the KML because it's behind
the firewall. So I have to obfusticate the

00:53:15.530 --> 00:53:21.690
KML, make like measle dot kind of stuff and
stuff that out on the Internet so that I can

00:53:21.690 --> 00:53:32.080
view it through the Google Earth API browser
based ways because I can't view KML on a intranet

00:53:32.080 --> 00:53:33.080
site

00:53:33.080 --> 00:53:34.080
&gt;&gt;Josh: So--

00:53:34.080 --> 00:53:37.320
&gt;&gt;audience7: so I'm like, trapped, in-between
kind of a purgatory

00:53:37.320 --> 00:53:47.350
&gt;&gt;Josh: So a work around for that, which we
showed here, is you do need to have a Web-,

00:53:47.350 --> 00:53:52.270
a Web server serving up your KML content.
You can't load it off a local file, your local

00:53:52.270 --> 00:53:55.990
disk, again, for those security reasons we
mentioned. But, on the other handâ€¦

00:53:55.990 --> 00:54:01.710
&gt;&gt;audience7: If I have regular Google Earth
application I can, but I can't have my end

00:54:01.710 --> 00:54:03.290
users install it for security issues--

00:54:03.290 --> 00:54:06.910
&gt;&gt;Josh: Yeah, so we don't want, for example,
if you load up a network link, and it says,

00:54:06.910 --> 00:54:10.960
Hey, let's go ahead and open up everything
in c temp whatever, on some user's machines.

00:54:10.960 --> 00:54:14.970
So we don't allow the browser to access those
files, but a workaround that we showed here

00:54:14.970 --> 00:54:19.590
is running just a really simple local host
server, you know a trivial one. That was just

00:54:19.590 --> 00:54:25.410
Pythons HTTP simple server up at, but there's
many simple servers you could maybe run internally

00:54:25.410 --> 00:54:32.220
just to serve up KMLs and that would solve
the problem of internal serving of those.

00:54:32.220 --> 00:54:44.290
&gt;&gt;audience8: Hi. I was wondering if it's possible
to update the map with something like a live

00:54:44.290 --> 00:54:45.290
stream of a KML input?

00:54:45.290 --> 00:54:46.290
&gt;&gt;Josh: Sure.

00:54:46.290 --> 00:54:52.120
&gt;&gt;Mano: Sure. Which, which map are you, or
you just wanna put KML on your, are you talking

00:54:52.120 --> 00:54:56.320
about rbase map, or are you talking about
being able to display KML on your site?

00:54:56.320 --> 00:55:01.410
&gt;&gt;audience8: I'm talking about KML stream
that is continuously updating.

00:55:01.410 --> 00:55:08.750
&gt;&gt;Mano: Right. So, if you use a network link,
the network link can be constantly pinging

00:55:08.750 --> 00:55:14.900
your server. You could set it to times as
short as once a second. In fact, the update

00:55:14.900 --> 00:55:20.290
mechanism that I showed you is precisely that.
I, it doesn't, we ran everything off a local

00:55:20.290 --> 00:55:25.760
host here just because, you know, conferences
you have to be really worried about Internet

00:55:25.760 --> 00:55:30.950
access, but in general you would have your
own server that serves it out.

00:55:30.950 --> 00:55:37.080
&gt;&gt;audience9: I just have a quick question.
Are you guys gonna do any other projections

00:55:37.080 --> 00:55:38.080
for the globe?

00:55:38.080 --> 00:55:39.440
&gt;&gt;Josh: I'm sorry, what was the question?

00:55:39.440 --> 00:55:45.240
&gt;&gt;audience9: Projections? Like, map projections,
like at the polar regions, it all gets distorted

00:55:45.240 --> 00:55:49.890
and like, equal area, like equidistant projection?
There's a whole bunch of different map projections.

00:55:49.890 --> 00:55:56.560
&gt;&gt;Josh: Yeah, so you were hoping we would
support arbitrary projections on the globes?

00:55:56.560 --> 00:55:58.490
&gt;&gt;audience9: Correct.

00:55:58.490 --> 00:56:03.620
&gt;&gt;Mano: Well, I, I mean, the, the globe is
a globe. I mean, it's a little different--

00:56:03.620 --> 00:56:08.140
&gt;&gt;Josh: There is a good point in that the
Plate carrÃ©e projection that sort of defaults,

00:56:08.140 --> 00:56:13.480
what some people call WSG 84 for projection
although itâ€™s a Datum is, it has some warping

00:56:13.480 --> 00:56:18.800
near the poles and it is possible if you were,
for example, a Google Earth Enterprise customer,

00:56:18.800 --> 00:56:25.680
to build your own globe and then you could
set the, it would still have to be a similar

00:56:25.680 --> 00:56:30.160
projection, but not have the globe distorted,
have somewhere else distorted. But, somewhere's,

00:56:30.160 --> 00:56:34.880
somewhere its gonna bound off into infinity
on the globe. I don't know if that answers

00:56:34.880 --> 00:56:35.880
your question.

00:56:35.880 --> 00:56:37.400
&gt;&gt;Peter: Yeah, just, I'm Peter, the Product
Manager, just a couple more details on that.

00:56:37.400 --> 00:56:43.750
I mean, part of the issue too is that all
the need of infrastructure is in Plate carrÃ©e

00:56:43.750 --> 00:56:49.570
projection, so it's not something that is
easy for us to change. We, I mean, obviously

00:56:49.570 --> 00:56:54.840
the pole issue is an ongoing issue with that
projection and we've looked at some different

00:56:54.840 --> 00:56:59.100
solutions. Hopefully, at some point, we'll
be able to, to do something that will address

00:56:59.100 --> 00:57:10.900
the pole issue. But, we don't have any plans
for kind of an arbitrary projection because

00:57:10.900 --> 00:57:11.900
a lot of our data is natively stored in [inaudible].

00:57:11.900 --> 00:57:12.900
[audience member coughs]

00:57:12.900 --> 00:57:16.510
&gt;&gt;Mano: So, the last question that's on Moderator
here is, Is there an offline version of the

00:57:16.510 --> 00:57:21.670
GE plugin available to download? And the answer
is no at this point.

00:57:21.670 --> 00:57:27.170
&gt;&gt;Josh: Yeah, I mean it does work offline.
You don't have to have it in online and again,

00:57:27.170 --> 00:57:31.280
if you're an Enterprise customer with your
own globe then you don't have to connect to

00:57:31.280 --> 00:57:37.040
our servers. But, it's not gonna do much offline
if, if it can't get any of our data unless,

00:57:37.040 --> 00:57:38.180
unless you're only loading your own data set.

00:57:38.180 --> 00:57:44.440
&gt;&gt;Mano: Well, and also, it needs to be online
for the, when you start, when you start the

00:57:44.440 --> 00:57:45.440
plugin.

00:57:45.440 --> 00:57:49.830
&gt;&gt;Josh: Yeah, the initial JavaScript, I think,
you could, I'm not sure, is it against the

00:57:49.830 --> 00:57:54.240
terms of service to grab the JS loader and
put it locally? Probably.

00:57:54.240 --> 00:57:55.240
&gt;&gt;Mano: Probably.

00:57:55.240 --> 00:57:56.240
&gt;&gt;Josh: Probably, yeah.

00:57:56.240 --> 00:57:58.760
&gt;&gt;googleguy: In IE the browser will cache
it for a second.

00:57:58.760 --> 00:57:59.760
&gt;&gt;Josh: That's true.

00:57:59.760 --> 00:58:00.760
&gt;&gt;Mano: Yeah.

00:58:00.760 --> 00:58:01.840
&gt;&gt;Josh: I'm not sure what the terms of service
say--

00:58:01.840 --> 00:58:07.170
&gt;&gt;Mano: But, but I, I think this is probably
more, more, they're probably more interested

00:58:07.170 --> 00:58:12.290
in what's, is the person who asked this in
the audience? I'm gonna guess that you're

00:58:12.290 --> 00:58:17.810
more interested in having an offline version
for installation purposes, right? Is that

00:58:17.810 --> 00:58:18.810
right?

00:58:18.810 --> 00:58:20.670
&gt;&gt;audience10: [Indian Accent] Yeah, for the
installation. For most of the times, you know,

00:58:20.670 --> 00:58:23.550
because the end user are behind the firewall
and cannot connect to, they cannot go to Google

00:58:23.550 --> 00:58:25.030
Earth and when they--

00:58:25.030 --> 00:58:26.350
&gt;&gt;Mano: Yeah.

00:58:26.350 --> 00:58:29.450
&gt;&gt;audience10: come and download the software.

00:58:29.450 --> 00:58:34.870
&gt;&gt;Josh: Yes. An offline installer. We don't
offer a link to a here's the latest offline

00:58:34.870 --> 00:58:40.530
installer for you guys to put throughout your
organization. But that is, that is a future

00:58:40.530 --> 00:58:41.530
request that we have in mind.

00:58:41.530 --> 00:58:45.650
&gt;&gt;Mano: It's something that's frequently requested
and we're definitely looking at that to allow

00:58:45.650 --> 00:58:46.650
for enterprise installations.

00:58:46.650 --> 00:58:51.250
&gt;&gt;audience11: I was out on the forums griping
about this very issue and somehow or another,

00:58:51.250 --> 00:58:58.020
I found my way to the exe for Google Earth
5.1, I forget what build, what version, and

00:58:58.020 --> 00:59:07.310
I downloaded that and I put it out on my local
shared drives, that like five thousand people

00:59:07.310 --> 00:59:09.516
have access to and I told them to go get that.

00:59:09.516 --> 00:59:12.730
&gt;&gt;Josh: I, I mean, that is a good point which
I mentioned earlier, is we bundle the plugin

00:59:12.730 --> 00:59:18.290
and the API with a downloadable client, so
if, if you have that installer locally, it

00:59:18.290 --> 00:59:22.950
would have installed the plugin. We don't
have a separate plugin-only option.

00:59:22.950 --> 00:59:28.960
&gt;&gt;audience10: [Indian accent] Is there any
way we get to choose which version to download

00:59:28.960 --> 00:59:32.930
or which version to install, because right
now updates automatically when there are any

00:59:32.930 --> 00:59:33.930
updates.

00:59:33.930 --> 00:59:37.320
&gt;&gt;Josh: So, that's kind of one of the, the
big advantages of the Developer Channel, is

00:59:37.320 --> 00:59:41.430
it no longer has to come as a big surprise,
Wow. Everything got updated and now I'm at

00:59:41.430 --> 00:59:46.910
a new version. By joining the Developer Channel,
you'll get access to that kind of prerelease,

00:59:46.910 --> 00:59:51.940
as long as, as well as, you know our release
nodes that we'll post when we update that

00:59:51.940 --> 00:59:55.671
to the forum, and you'll know it's coming
in general a couple weeks ahead of time and

00:59:55.671 --> 01:00:00.690
before the public launch. So, that hopefully
will help solve some of that.

01:00:00.690 --> 01:00:01.690
&gt;&gt;audience10: Thanks.

01:00:01.690 --> 01:00:02.990
&gt;&gt;Mano: Peter has some qualifications on that

01:00:02.990 --> 01:00:08.660
&gt;&gt;Peter: Jumping in a couple questions. So,
one issue is we don't allow arbitrary download

01:00:08.660 --> 01:00:15.410
of any version and part of that is because
it's sort of like if you can't go to a certain

01:00:15.410 --> 01:00:18.764
version of website, its, you know, every time
you go to the website you get all new JavaScript,

01:00:18.764 --> 01:00:21.740
all new code. You know, this is a combination
of a JavaScript API and a plugin necessary

01:00:21.740 --> 01:00:27.880
for it to work, and they work in harmony,
so it's not always an option for us to say,

01:00:27.880 --> 01:00:30.880
Oh, yeah, I get five versions back. and run
it because it probably won't work anymore.

01:00:30.880 --> 01:00:34.580
There will be other compatibility issues.
So, for enterprise customers we do bundle

01:00:34.580 --> 01:00:39.830
a sort of offline package so they can be run
and supported for a certain window of time,

01:00:39.830 --> 01:00:45.240
but in terms of open consumer, where people
are pulling out and going to a bunch of new

01:00:45.240 --> 01:00:48.510
websites, you want to be able to have a very
robust, well-tested single version that's

01:00:48.510 --> 01:00:52.570
updated that everybody is using so you don't
have to worry about, you know, five or whatever

01:00:52.570 --> 01:00:53.600
different versions out there.

01:00:53.600 --> 01:00:56.810
&gt;&gt;Josh: So, that's, I think we're out of time
there.

01:00:56.810 --> 01:00:57.810
&gt;&gt;Mano: Yeah, unfortunately.

01:00:57.810 --> 01:01:01.610
&gt;&gt;Josh: But, we'll be around up here to answer
questions or maybe outside, actually to answer

01:01:01.610 --> 01:01:02.610
questions--

01:01:02.610 --> 01:01:08.200
&gt;&gt;Mano: And also, I believe there are Geo
APIs, office hours going on upstairs and probably

01:01:08.200 --> 01:01:11.450
one of us will be up there for that at one
point. So thank you very much for coming.

01:01:11.450 --> 01:01:12.450
&gt;&gt;Josh: Thanks, guys.

01:01:12.450 --> 01:01:12.451
[applause]

