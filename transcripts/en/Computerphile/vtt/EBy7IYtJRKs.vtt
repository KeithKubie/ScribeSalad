WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.589
What we're searching for today is very
simple. So, it's the answer to how do we

00:00:04.589 --> 00:00:11.880
decode the wonderful code that we
created just about what a week ago now.

00:00:11.880 --> 00:00:16.020
Something like that.
Let's just remind ourselves where we

00:00:16.020 --> 00:00:22.769
were with this code. It was a 5-bit code.
Coding theorists will talk about this

00:00:22.769 --> 00:00:30.720
code, which i'm going to write out, as being
a [5, 2, 3] code. I'll fill in the details and

00:00:30.720 --> 00:00:34.820
then I'll refer what I've written down to this.

00:00:34.820 --> 00:00:42.200
Remember also that these are the exact
powers of 2. That's 2 squared, the number

00:00:42.200 --> 00:00:46.760
two position is 2 to the power 1, the number
one position - well that's two to the power 0

00:00:46.760 --> 00:00:54.739
But that leaves bit three and bit five for
the actual message bits. Two bits - 

00:00:54.739 --> 00:00:59.570
bit 3; bit 5. Two bits: four combinations
possible. And those are the four San

00:00:59.570 --> 00:01:05.210
Francisco weather states. So I'll sometimes refer 
to these as "info bits", "message bits", it

00:01:05.210 --> 00:01:08.720
comes to the same thing. That's the
message you're trying to get across.

00:01:08.720 --> 00:01:12.560
That's the message that these parity
bits are there to check out and make sure

00:01:12.560 --> 00:01:20.869
it's ok. And we ended up with one codeword -
if you remember that's the "in" phrase

00:01:20.869 --> 00:01:27.170
for these things.
The 00 state in message terms, I think, we

00:01:27.170 --> 00:01:32.420
said was "foggy" this time around. And
here's the protection of the parity bits

00:01:32.420 --> 00:01:39.619
There we are, all written out again now. Coding
theorists would call this a [5, 2, 3] code.

00:01:39.619 --> 00:01:45.380
How does that work? Well, it's a 5-bit
code. That's what the first number means.

00:01:45.380 --> 00:01:52.310
It means total number of bits. The 2
means the number of message or

00:01:52.310 --> 00:01:56.899
information bits. And this, if you
remember, is this business called the

00:01:56.899 --> 00:02:03.890
"distance". How many bits differ between
these rows? So the "distance" in this

00:02:03.890 --> 00:02:08.929
technical usage of the term, here, the
number of bits that differ between that

00:02:08.929 --> 00:02:16.250
line and that line is 3. And to get one
of these codes working you need a

00:02:16.250 --> 00:02:21.709
minimum distance of 3. And what do we
mean by "working"? What we mean is that a

00:02:21.709 --> 00:02:29.330
distance-3 code can correct a 1-bit error.
And for those of you just yelling at me:

00:02:29.330 --> 00:02:34.819
"But what's the general formula then?" 
- for what you can correct, for a given

00:02:34.819 --> 00:02:38.590
distance in that?  Watch carefully.

00:02:38.590 --> 00:02:47.200
It's a one-liner more or less. Floor of 
(d -1) / 2 where 'the floor of'

00:02:47.200 --> 00:02:57.490
means 'round down'. So let's do it for distance 
three.  3 - 1? Two.  2/ 2? One. Round down 1?.

00:02:57.490 --> 00:03:04.570
It's already rounded down. So that's telling you.
Using the "floor of" function it's saying:

00:03:04.570 --> 00:03:09.850
"For distance three you can detect and
correct one error". So bearing that in

00:03:09.850 --> 00:03:14.620
mind if we see things in future with
different distance properties at the end,

00:03:14.620 --> 00:03:18.640
we can always apply this to find out how
many things they could correct. The

00:03:18.640 --> 00:03:25.270
powers of two and the parity check bits.
What sequence of numbers were they using

00:03:25.270 --> 00:03:32.260
[or] checking up on? This first block the "1".
This checks itself and 3 and 5.

00:03:32.260 --> 00:03:40.690
The 2 bit checks itself and 3. And the
4-bit checks 4 and 5. Where do those

00:03:40.690 --> 00:03:46.450
come from?  How do you get those lists?  And
I think, last time, I perhaps didn't make

00:03:46.450 --> 00:03:52.330
this quite crystal clear.
So, let me explain that those come from

00:03:52.330 --> 00:03:57.820
effectively saying - for all of the things
that aren't powers of two -

00:03:57.820 --> 00:04:04.450
how could you build them up from adding
together powers of 2?

00:04:04.450 --> 00:04:09.610
1: you don't have to build it up, that's
itself. 1 is 1. Similarly 2 is a power of two

00:04:09.610 --> 00:04:16.209
and it's just itself. Where you really
have to start doing this powers of two

00:04:16.209 --> 00:04:21.850
"add them together to build them up" thing
is with 3. The most compact way to

00:04:21.850 --> 00:04:30.130
represent three as sums of powers of 2 is
1 + 2. What about 4? No problem. Four

00:04:30.130 --> 00:04:35.979
is itself, it's a power of two.
When you get to 5, you say "Ah! The most compact

00:04:35.979 --> 00:04:46.170
way to do this is 1 +4". Powers of 2.
Six? 2 + 4. Seven? Quite

00:04:46.170 --> 00:04:50.940
complicated now. But if you think about it,
sum of powers of two that add up to seven, in the

00:04:50.940 --> 00:04:56.340
most compact way you can do it? 1 + 2 +4.
So really, these lists that

00:04:56.340 --> 00:05:02.730
we had previously - about what checks for
what - is as a result of writing these out

00:05:02.730 --> 00:05:06.600
first and then saying: but if we were going
backwards

00:05:06.600 --> 00:05:12.450
where does the digit 1 appear? It appears
in itself. It appears in the

00:05:12.450 --> 00:05:16.890
formula for 3; it appears in the formula
for 5; it appears in the formula for 7.

00:05:16.890 --> 00:05:23.820
So that's where that first list
came out here: that 1 checks up on 1,

00:05:23.820 --> 00:05:29.640
3, 5, 7, 9, 11 - all the odd
numbers.  Because 1 would appear in the

00:05:29.640 --> 00:05:35.940
sums of powers of two that build those up.
Two? Yes, 2 appears obviously in its own list

00:05:35.940 --> 00:05:41.670
but it appears first of all, next door, in
3 as being 1 + 2. Does it appear in 4 ?

00:05:41.670 --> 00:05:46.290
No. 4 is all on its own - it's a
power of 2. What about 5?  Would 2 appear

00:05:46.290 --> 00:05:50.850
in 5? No! It's 1 + 4. So, the next place that

00:05:50.850 --> 00:05:57.180
2 would appear is 6 - which 
is 2 + 4. So I hope if you ....

00:05:57.180 --> 00:06:02.430
&gt;&gt; Sean: So, if you had a 6-bit code, would 
2 have to check on ....
&gt;&gt; DFB: On one extra bit?

00:06:02.430 --> 00:06:08.940
Yes it would! Similarly 4. It checks on 4;
it checks on 5; it also checks on 6. Because 6 is

00:06:08.940 --> 00:06:14.910
2 + 4. So, if you're building up these
lists and making them longer - to do more complex

00:06:14.910 --> 00:06:21.420
codes - then if you're encoding and decoding
in this by-hand method, you need to keep

00:06:21.420 --> 00:06:27.420
up-to-date your sums of powers of 2, for
all the new positions - unless they're exact

00:06:27.420 --> 00:06:31.770
powers of 2 - and then go backwards and say
"Ah! but these are my checklists that I

00:06:31.770 --> 00:06:38.520
have built up from that". So, just to remind you
then, of what happened, was that on this one

00:06:38.520 --> 00:06:43.410
here, let's take this second one. The
information, or message, bits are 0 and 1.

00:06:43.410 --> 00:06:49.560
But what it tells us here - that's bit 3 and bit 5 -
but it says here that bits 1, 3 and 5, taken

00:06:49.560 --> 00:06:52.620
together must be even.  Well [bits] 3 and 5 - 
0 and 1- 

00:06:52.620 --> 00:06:57.539
add them together, that's 1. So
therefore bit 1, which we'll be filling in

00:06:57.539 --> 00:07:01.949
has to be 1, to make it even. We're going 
to say -- because you all want to know

00:07:01.949 --> 00:07:07.889
how to decode it and detect errors and
correct them! This one here is going to

00:07:07.889 --> 00:07:22.319
be badly transmitted. Instead of 10011
it is received as 10111. 
&gt;&gt; Sean: So straight away whoever

00:07:22.319 --> 00:07:25.830
gets that is going to say 'That isn't right!
&gt;&gt; DFB: They're going to say 'That isn't right' because

00:07:25.830 --> 00:07:30.990
there's so few of these - there's only
four of them. You get to know them like old

00:07:30.990 --> 00:07:35.580
friends. But you imagine if you've got 64
of the so-and-so's can you guarantee

00:07:35.580 --> 00:07:38.580
that you'll be able to memorize every single one?

00:07:38.580 --> 00:07:44.699
Er, no! You need an algorithm. And what we do
here is a reverse of what we did when we

00:07:44.699 --> 00:07:55.289
encoded. we say let's look at the list
that follows on, and is checked from 1. 

00:07:55.289 --> 00:08:01.259
1,3, 5 and so on.
That's what we received: bit one is 1;

00:08:01.259 --> 00:08:11.699
bit 3 is 1;  1+1 is 0; bit 5 is 1; 0+1 is 1.
Aaaagh!!  It's supposed to be even parity. Wrong!

00:08:11.699 --> 00:08:18.240
It came out as odd parity.  Bit 2 checks
out on itself and on bit 3.

00:08:18.240 --> 00:08:24.270
It doesn't occur in bit 5 because 5 is 1 + 4,
not 2 + 4. So you look at bit 2

00:08:24.270 --> 00:08:31.800
and bit 3. 0 XOR-ed (or added if
you like) to 1. Its a 1 !  It's odd

00:08:31.800 --> 00:08:38.699
parity! It's wrong!
OK, now you look at the 4-bit and you say

00:08:38.699 --> 00:08:46.800
Bit 4 checks out 4 and 5.  4 and 5: 1 + 1.
It's zero. Hooray!

00:08:46.800 --> 00:08:51.510
It passed the test.
&gt;&gt; Sean: Yeah,we failed two tests. We can work 
out from that now what went wrong ?

00:08:51.510 --> 00:08:56.459
&gt;&gt; DFB: Yes you can. very simply, because
the headers of these lists - are the powers of 

00:08:56.459 --> 00:08:59.230
two that they check up on in all of those

00:08:59.230 --> 00:09:06.640
lists. And if the [bit] 2 "1" has gone wrong and
the [bit] 1 "1" has gone wrong, then the wrong bit

00:09:06.640 --> 00:09:13.630
was 1 + 2 - ordinary addition this time,
not binary addition. 1 + 2 makes 3.

00:09:13.630 --> 00:09:22.960
Bit 3 is wrong! 
&gt;&gt; Sean: So then we flip bit 3 and we've
got the right column?
&gt;&gt; DFB: You flip bit 3. 10111 that's the bad bit.
It's received as a 1.

00:09:22.960 --> 00:09:30.580
It's wrong, so it must have been a 0.
10011, magic! Does that look familiar?

00:09:30.580 --> 00:09:35.740
That's what you correct it back to.
And it's entirely done by getting these

00:09:35.740 --> 00:09:41.890
lists of powers of two - doing another
check on them - almost like ... It's exactly

00:09:41.890 --> 00:09:48.610
the same as when you were encoding. It's just
you're doing it again. That's wrong - it doesn't add up!

00:09:48.610 --> 00:09:54.850
&gt;&gt; Sean: So you simply reverse the process?
    I mean, does that always work then? 
&gt;&gt; DFB: Yes! 
&gt;&gt; Sean: For any of those bits - the parity bits .... ?

00:09:54.850 --> 00:09:59.140
&gt;&gt; DFB: Ah! now that's a good thing. If you're
thinking: "Oh! but that's a message bit" Oh no! - 

00:09:59.140 --> 00:10:03.670
come on - something really went wrong
there because what was transmitted as 0 1

00:10:03.670 --> 00:10:12.130
- that's 'Sunny' wasn't it? - has turned out as
.... 'Rainy', 11, wasn't it? You turned [it] into 'Rainy'.

00:10:12.130 --> 00:10:15.520
Oh yeah! That's fine, but what if you hit
the parity bit? Surely that messes

00:10:15.520 --> 00:10:18.220
everything up? No it doesn't.
It's actually dead easy. And I

00:10:18.220 --> 00:10:22.840
want to leave as an exercise for you 
[the viewers] to do is, this time

00:10:22.840 --> 00:10:32.260
10011, don't hit a message bit. Hit that
parity bit at position 4. Change it to 0.

00:10:32.260 --> 00:10:37.030
Do the checks and you'll find out that the "1"
list passes with flying colours,

00:10:37.030 --> 00:10:40.870
nothing wrong with it. The "2" list passes
with flying colours.

00:10:40.870 --> 00:10:46.480
The only one that fails is the "4" list. 
So, if it's only one fails that's it: 4. It's 4,

00:10:46.480 --> 00:10:52.780
Nothing to add to it!
&gt;&gt; Sean: You've done the homework for them!
&gt;&gt; DFB: I've done the homework. Again! So do it for

00:10:52.780 --> 00:10:56.260
yourself, on any bit you like, and convince
yourself that it doesn't matter if it's

00:10:56.260 --> 00:11:01.360
message bit or parity bit - this method
will come in on it. I have built this up

00:11:01.360 --> 00:11:06.130
and I have explained to you now. You can
go into a pub, full of coding

00:11:06.130 --> 00:11:11.260
theorists and say: "Hey! Like I've got this
[5,2,3]-code" and they will say: "Well, you

00:11:11.260 --> 00:11:17.680
realize that you derived it using
Richard Hamming's algorithm but it's not a

00:11:17.680 --> 00:11:24.730
true, proper, Hamming code because it's
not perfect. And you say: "Perfect ?!"

00:11:24.730 --> 00:11:29.380
"What's Perfect?!". I think we have to go to
another video, Sean, I know they hate cliff-hangers

00:11:29.380 --> 00:11:39.340
but, yes, real Hamming codes are "perfect".
They really are.
[trailer for follow-up  EXTRA BITS video]
Now the only sort of, if you

00:11:39.340 --> 00:11:44.530
like, flight health-warning to say about
this - just to round this off now - is by all

00:11:44.530 --> 00:11:48.550
means do it by hand. If you want to code
it up as a program, great, you'll learn a lot

00:11:48.550 --> 00:11:56.640
but don't run away with the idea that
this is the most efficient way to do it.

