WEBVTT
Kind: captions
Language: en

00:00:04.680 --> 00:00:04.770
&gt;&gt; All right, we're here today with Matt Mastracci
from DotSpots. And can you please introduce

00:00:04.770 --> 00:00:11.280
yourself, your company and give a little overview
of your application and your innovations when

00:00:11.280 --> 00:00:18.689
you were creating it?
&gt;&gt; MASTRACCI: Sure, so, my name is Matt Mastracci.

00:00:18.689 --> 00:00:26.590
I'm the CTO of DotSpots. We founded DotSpots
a couple years ago as a way for people basically

00:00:26.590 --> 00:00:33.079
to annotate the news. Give people a way to
attach relevant material to articles that

00:00:33.079 --> 00:00:42.260
they might find on major new sites and major
blogs. The ideas is that we allow somebody

00:00:42.260 --> 00:00:48.600
to attach something and then we use our engine
to distribute what they attach on one story

00:00:48.600 --> 00:00:57.320
to semantically relevant areas on other new
stories that would be appropriate for whatever

00:00:57.320 --> 00:01:01.760
they attach whether it will be media or their
own comments, etcetera.

00:01:01.760 --> 00:01:13.950
&gt;&gt; So you chose to use that GWT to your grade
this up. Can you tell us a little bit how

00:01:13.950 --> 00:01:13.970
you came to that techno decision?
&gt;&gt; MASTRACCI: Originally, before I worked

00:01:13.970 --> 00:01:20.960
on DotSpots, I was working on some prototypes
of various applications and I came across

00:01:20.960 --> 00:01:25.450
some information regarding GWT app. I decided
to give it a shot with one of my previous

00:01:25.450 --> 00:01:33.590
projects. And that previous project, actually,
it didn't take me very long to develop. I

00:01:33.590 --> 00:01:38.200
basically managed to go from a prototype to
implementation of that previous product very

00:01:38.200 --> 00:01:46.869
quickly. So, when we started DotSpots, I decided
that I'd give GWT another try. We started

00:01:46.869 --> 00:01:57.840
from the beginning from a fresh code base.
The--when we originally started DotSpots,

00:01:57.840 --> 00:02:03.420
we wanted the experience for the user to be
very, very seamless. So, when the user visits

00:02:03.420 --> 00:02:07.579
our website and they click around between
the various sections, we didn't want to have

00:02:07.579 --> 00:02:13.379
to wait for page loads all the time. We wanted
to be able to click around very quickly and

00:02:13.379 --> 00:02:17.999
get the information they want as quickly as
possible without having too worry about page

00:02:17.999 --> 00:02:25.760
load time, etcetera. Additionally, at DotSpots
we actually provide the users a Firefox extension.

00:02:25.760 --> 00:02:31.919
And, because we use GWT, we can use the same
code on our website that we do on our Firefox

00:02:31.919 --> 00:02:36.359
extension and all we need to do is just a
simple recompile.

00:02:36.359 --> 00:02:43.430
&gt;&gt; Can you tell us a little bit about the
scalability of your code?

00:02:43.430 --> 00:02:48.480
&gt;&gt; MASTRACCI: Our code is scaled very well
from the beginning. Right now, we have at

00:02:48.480 --> 00:02:56.430
least 40,000 or 50,000 thousand lines of client
source. And we found that our development

00:02:56.430 --> 00:03:04.040
ability hasn't really changed that much. We--we're
using eclipse to develop our GWT Code. And

00:03:04.040 --> 00:03:10.430
we still use the same remanufacturing tools,
the same--same code navigation tools that

00:03:10.430 --> 00:03:15.409
we did when our source code was tens of thousands
and even less than 10,000 lines of codes.

00:03:15.409 --> 00:03:22.230
So, we found that as our code scales, we don't
find that we'd run into the traditional problems

00:03:22.230 --> 00:03:28.489
that a normal Web 2.0 company might where
you end up with such large amount of JavaScript

00:03:28.489 --> 00:03:34.150
that when you try to make a change there's
just so much code that you have to spend so

00:03:34.150 --> 00:03:40.260
much time changing that it's just becomes
an unmatchable match. So, we did--we tend

00:03:40.260 --> 00:03:44.290
to do a lot of refactoring stone that. Being
able to do that with such a large and mature

00:03:44.290 --> 00:03:47.120
code base has definitely have been a big advantage
for us.

00:03:47.120 --> 00:03:54.169
&gt;&gt; What new features would you like to see
and are you most excited about?

00:03:54.169 --> 00:04:00.049
&gt;&gt; MASTRACCI: Some of the 2.0 features that
we've seen in GWT that we're really excited

00:04:00.049 --> 00:04:05.659
about, the outer process hosted mode is going
to be very important for us. We, right now

00:04:05.659 --> 00:04:13.260
because we have a non-traditional GWT app
with Firefox extension we tend to have to

00:04:13.260 --> 00:04:18.660
have to wait for about three to four minutes
while our compile finishes and the code is

00:04:18.660 --> 00:04:24.830
linked and before we can restart a Firefox
browser to see our code in action. But now

00:04:24.830 --> 00:04:30.560
that we have access to other process hosted
mode, we should be able to simplify that by

00:04:30.560 --> 00:04:35.830
allowing our developers to start up the browser
with the other process hosted mode plug-in

00:04:35.830 --> 00:04:39.759
and immediately see their changes reflected
instead of having to go through the cycle

00:04:39.759 --> 00:04:46.530
again and again. As well the story of your
compile code that we've seen coming up seems

00:04:46.530 --> 00:04:54.120
really interesting for us. Basically, we spend
a lot of time trying to figure out exactly

00:04:54.120 --> 00:04:58.240
how we can make our Firefox extension as small
as possible. And we've been doing a lot of

00:04:58.240 --> 00:05:03.990
that by hand, but now that we have--we should
have access to a more detailed description

00:05:03.990 --> 00:05:09.400
of how our code is compiled. We can then shrink
the sites of our extension with significantly

00:05:09.400 --> 00:05:14.770
less effort.
&gt;&gt; So, it sounds like you're pretty excited

00:05:14.770 --> 00:05:20.629
about GWT. What would you say--still needs
to be improved?

00:05:20.629 --> 00:05:27.020
&gt;&gt; MASTRACCI: Some of the issues we've been
having with GWT, again because we run as a

00:05:27.020 --> 00:05:34.020
Firefox extension when a user doesn't update
their extension but we update our server code.

00:05:34.020 --> 00:05:40.800
We tend to run into incompatible remote service
exceptions. So, we have some workarounds for

00:05:40.800 --> 00:05:45.750
that, and we tend to--we have to force the
user to update their extension more often,

00:05:45.750 --> 00:05:54.349
but in cases where the client and server code
may not necessarily be 100% in synch. We can

00:05:54.349 --> 00:05:58.919
certainly--there could be some changes made
to some of the RPC code to make it easier

00:05:58.919 --> 00:06:05.530
for us to deploy these things at different
times and have an up and down level compatibility

00:06:05.530 --> 00:06:15.590
story. As well some of the work that we've
been doing in the extension requires us to

00:06:15.590 --> 00:06:20.749
add in our own multiple document support for
widgets currently the quick code of course

00:06:20.749 --> 00:06:27.889
assumes that you have a single document. We--it's
actually a testament to the architecture of

00:06:27.889 --> 00:06:32.999
GWT, it didn't take us that much time, what
we've done is we've actually added our own

00:06:32.999 --> 00:06:38.499
versions of the widgets which are just subclasses.
We support creation in a set, in another document

00:06:38.499 --> 00:06:44.259
and that basically allowed us to use more
than one document on our GWT app.

00:06:44.259 --> 00:06:50.030
&gt;&gt; So, to wrap this up how could you compare
your experience with GWT to your experience

00:06:50.030 --> 00:06:55.990
of using other AJAX Tools?
&gt;&gt; MASTRACCI: I've used a number of AJAX Toolkits

00:06:55.990 --> 00:07:02.900
over the years and GWT is actually a different
piece. When you work with the other AJAX Toolkits

00:07:02.900 --> 00:07:09.870
you have to think separately about your server
code which is generating stat to get the HTML

00:07:09.870 --> 00:07:15.889
and your client code which is augmenting it.
With GWT what you do is you build, you build

00:07:15.889 --> 00:07:20.360
the product. You don't really have to think
about these arbitrary split between server

00:07:20.360 --> 00:07:24.490
rendering and client rendering. You're just
always building; you're building one unified

00:07:24.490 --> 00:07:32.509
product. And, because we can do, because we
just build a single product, we never, we

00:07:32.509 --> 00:07:40.249
just kind of; we just go ahead and build it.
We don't have to worry about whether code,

00:07:40.249 --> 00:07:42.749
something is going to be rendered on the server,
or something is going to be rendered on the

00:07:42.749 --> 00:07:47.080
client. We don't have to worry about keeping
stuff in synch between the two because both

00:07:47.080 --> 00:07:53.490
the client and the server are sharing the
same code and we basically just run our compile

00:07:53.490 --> 00:07:59.499
process and it just works. So, it saves us
a lot of effort.

00:07:59.499 --> 00:08:03.530
&gt;&gt; All right Matt. Thank you very much.
&gt;&gt; MASTRACCI: Great. Thanks a lot.

