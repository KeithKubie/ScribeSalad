WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.060
We have taken our 3D objects,

00:00:04.060 --> 00:00:09.360
specified its vertices relative to an origin in a coordinate reference frame.

00:00:09.580 --> 00:00:11.560
What happens to a triangle?

00:00:12.000 --> 00:00:14.360
To turn it from this representation that we've got,

00:00:14.580 --> 00:00:17.580
the vertices, the faces, into pixels on the screen.

00:00:20.120 --> 00:00:21.779
We've got faces,

00:00:21.779 --> 00:00:27.960
we can now transform them, by
applying a transformation at every

00:00:27.960 --> 00:00:32.700
vertex so we can turn them and scale
them and move them around.

00:00:34.360 --> 00:00:37.820
But how does that now fit into the bigger picture?

00:00:38.560 --> 00:00:44.360
How do we go from the local space of our 3D object in which its vertices are defined,

00:00:45.760 --> 00:00:49.460
into a 2D representation on a
screen.

00:00:50.540 --> 00:00:54.840
Well there are several stages and they're
all different transformations that we apply

00:00:55.040 --> 00:01:02.460
The first one is from the
local object space of our representation,

00:01:02.460 --> 00:01:09.270
into world space. So we pick an origin
for the world which I suppose we'll say

00:01:09.270 --> 00:01:12.550
is the middle of the table, and we then
apply a transformation

00:01:12.550 --> 00:01:18.910
which re-specifies all of the vertices of our 3D object in local space,

00:01:19.080 --> 00:01:22.400
in terms of the world origin.

00:01:22.409 --> 00:01:27.420
So what we're basically doing is saying,
"Well we want our pyramid to be at

00:01:29.280 --> 00:01:35.760
+1 in x or -1 in x, -1 in z, 2 in y".

00:01:36.000 --> 00:01:40.619
We can also then rotate it and scale it if we like. And we can do that

00:01:40.619 --> 00:01:45.659
with several objects and move them all to different places and each will have a

00:01:45.660 --> 00:01:51.450
different transformation which places it in the world, it moves it from its

00:01:51.450 --> 00:01:57.010
local space to world space and that is
called a world space transformation.

00:01:57.030 --> 00:02:01.990
What we can also do, because we can combine transformations together,

00:02:01.990 --> 00:02:09.720
is specify one object in terms of another. So that we can nest these different

00:02:09.720 --> 00:02:11.580
transformations so that..

00:02:11.580 --> 00:02:17.540
We might want to stick this pyramid to
that one and so it has a--.

00:02:17.540 --> 00:02:22.440
First, it has a transformation that moves it from its own local space, to the space of this

00:02:22.440 --> 00:02:27.990
pyramid, which then moves to the world space wherever we want to place

00:02:27.990 --> 00:02:30.750
it in the world and so we can nest things that way.

00:02:30.750 --> 00:02:34.860
All we need to know, really, is where each vertex is in the world.

00:02:34.860 --> 00:02:41.580
We need to know its world space position. All of the vertices then need to be re-specified

00:02:41.580 --> 00:02:47.120
from world space, in terms of the space of the viewpoint.

00:02:47.120 --> 00:02:54.940
If the viewpoint is here, say - This is our little camera and it's looking out on the world.

00:02:54.940 --> 00:03:00.320
As we turn the camera this way,

00:03:00.420 --> 00:03:03.980
what we actually do, is apply a
transformation to everything in the

00:03:03.990 --> 00:03:07.380
world which swings it over this way.

00:03:07.380 --> 00:03:11.520
So the camera really never moves. All we're doing is applying a transformation

00:03:11.520 --> 00:03:16.290
that appears to move everything relative to the camera. We're re-specifying all

00:03:16.290 --> 00:03:21.239
of our objects in terms of the local
space of the camera. And this is

00:03:21.239 --> 00:03:24.390
view space or eye space, if you like. So
it's really just another

00:03:24.390 --> 00:03:29.370
transformation. All we're doing is moving from world space into view space.

00:03:29.370 --> 00:03:35.220
We're re-specifying one coordinate frame of
reference in terms of another.

00:03:35.220 --> 00:03:41.520
So just like we moved from object space: the local space of the pyramid

00:03:41.520 --> 00:03:45.000
to world space where it was positioned in our world.

00:03:45.600 --> 00:03:50.910
We're now moving from world space into view space, which is again just another

00:03:50.910 --> 00:03:54.480
transformation and we can actually just combine those transformations and have a

00:03:54.480 --> 00:03:58.800
world view transformation which
combines both of them into one.

00:03:58.800 --> 00:04:02.880
And so, all we need to do is apply that
operation - every vertex on every single shape.

00:04:03.080 --> 00:04:09.680
We then need to project down from 3D
space into 2D space

00:04:10.720 --> 00:04:15.700
which again, is just another transformation. Everything is just another transformation.

00:04:15.700 --> 00:04:18.910
A projective transformation is a little bit different to the others because

00:04:18.910 --> 00:04:24.970
whereas before we were just applying
translations and scales and rotations to

00:04:24.970 --> 00:04:29.050
move objects from one space to the next, to the next.

00:04:30.340 --> 00:04:37.330
Now what we have to do is have a special transformation which removes all the

00:04:37.330 --> 00:04:42.220
depth information from the scene, squashes of all these vertices down onto a

00:04:42.220 --> 00:04:47.160
2D plane and also because we might want
to have the perspective effect

00:04:47.160 --> 00:04:51.940
whereby objects in the distance seem smaller,

00:04:51.940 --> 00:04:58.040
we need to collapse, and scale them down based on their distance and so on and so forth.

00:04:58.100 --> 00:05:01.380
And now all of that is encoded in
the projective transformation

00:05:01.389 --> 00:05:07.750
So yes, so what we've done? We've taken our local representation, moved it

00:05:07.750 --> 00:05:13.240
into world space, constructed the scene out of our pyramids and then

00:05:13.240 --> 00:05:15.639
moved all of those relative to the eye.

00:05:15.640 --> 00:05:19.280
So we know exactly what's in front of us, what's going to be seen.

00:05:19.280 --> 00:05:23.440
And then we collapse all of those down in two dimensions.

00:05:23.770 --> 00:05:30.130
So what happens to a triangle, to turn it from this representation that we've got:

00:05:30.130 --> 00:05:33.130
the vertices, the faces, into pixels on
the screen?

00:05:33.669 --> 00:05:37.829
Well let's just draw some pixels out, not very many pixels - the resolution a bit low.

00:05:37.840 --> 00:05:40.860
So let's just take a random triangle and draw it on there.

00:05:40.860 --> 00:05:41.960
Let's draw it in purple.

00:05:41.960 --> 00:05:44.460
So here's our representation, now it's been squashed

00:05:44.470 --> 00:05:50.450
down into two dimensions and what we now
have to do to turn it into pixels,

00:05:50.450 --> 00:05:56.500
is go through every pixel here, and decide whether or not it's inside the triangle.

00:05:56.500 --> 00:06:01.150
Now I've not drawn very many pixels up here, so it's not going to look very good.

00:06:01.150 --> 00:06:06.460
But we can say that this one is pretty
much inside the triangle.

00:06:07.040 --> 00:06:11.320
This one is pretty much inside the
triangle, and for argument's sake I'll go

00:06:11.320 --> 00:06:16.870
with this one and this one, and these two as well. And so now what we've done is

00:06:16.870 --> 00:06:21.830
taken that simple geometric
representation and discretized it.

00:06:21.830 --> 00:06:24.890
We've turned it into a representation that

00:06:24.890 --> 00:06:28.860
no longer has any information about said vertices and faces.

00:06:28.870 --> 00:06:31.960
It just says, "This pixel is inside of
this triangle."

00:06:31.960 --> 00:06:36.220
When we collapse down from 3D to 2D,

00:06:36.460 --> 00:06:40.800
some of the vertices are going to lie outside our field of view.

00:06:40.800 --> 00:06:43.340
And in that case, we need to clip them.

00:06:43.340 --> 00:06:48.900
What we have to actually do is generate another two
vertices here

00:06:48.900 --> 00:06:52.419
Because we don't know what's happening to this; because it's not part of our representation anymore.

00:06:52.419 --> 00:06:56.839
Because we have clipped it to the
viewports as it's called.

00:06:56.840 --> 00:06:59.400
The problem is, now as you can see:
We no longer got a triangle

00:06:59.400 --> 00:07:04.440
So, well we just use our old trick of turning an odd polygon

00:07:04.440 --> 00:07:08.680
into a triangle representation, into two triangles.

00:07:08.740 --> 00:07:13.400
And then the process of deciding which pixels and triangle proceeds.

00:07:13.479 --> 00:07:18.490
But for these two new triangles, that now fit perfectly inside our viewpoint.

00:07:18.490 --> 00:07:20.230
And that's called clipping.

00:07:20.230 --> 00:07:22.230
And then the next step beyond that

00:07:22.230 --> 00:07:28.150
is just coloring in the pixels, and deciding exactly how to shade them and light them.

00:07:32.900 --> 00:07:36.840
We'd like to thank audible.com for their support of this Computerphile video.

00:07:36.840 --> 00:07:42.020
And if you'd like to download one of their huge range of books, go to audible.com/Computerphile.

00:07:42.240 --> 00:07:43.900
And you can download one for free.

00:07:43.919 --> 00:07:45.399
I'd like to recommend one today:

00:07:45.940 --> 00:07:49.080
My favorite computer-related book and one of the first books

00:07:49.080 --> 00:07:51.100
that made me think, "Hang on, computers could be cool."

00:07:51.100 --> 00:07:53.500
And that's Neuromancer by William Gibson.

00:07:53.520 --> 00:07:57.930
So get on to audible.com/Computerphile, download your free book, and thanks again

00:07:57.930 --> 00:08:00.930
to audible.com for supporting this Computerphile video.

