WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:02.530
PRESENTER: Welcome to
this episode of UXD.

00:00:02.530 --> 00:00:04.530
This is the last episode
of a three part series

00:00:04.530 --> 00:00:06.530
where I share best practices
for designing and building

00:00:06.530 --> 00:00:08.655
location-based mobile apps
that are sure to delight

00:00:08.655 --> 00:00:11.390
smartphone users
who are on the go.

00:00:11.390 --> 00:00:14.100
In this episode, we'll focus on
the design implications driven

00:00:14.100 --> 00:00:17.270
by the constraints placed on
users and their smartphones

00:00:17.270 --> 00:00:19.214
due to environmental conditions.

00:00:19.214 --> 00:00:20.880
I'm your host, Nazmul
Idris, a developer

00:00:20.880 --> 00:00:23.440
advocate passionate
about design and mobile.

00:00:23.440 --> 00:00:26.210
In part one, I talked about
the importance of understanding

00:00:26.210 --> 00:00:28.360
user context for
location based apps.

00:00:28.360 --> 00:00:30.150
Typically research
and planning tasks

00:00:30.150 --> 00:00:32.189
are done on tablets and
laptops, and smartphones

00:00:32.189 --> 00:00:35.300
tend to be used on the
go for execution tasks.

00:00:35.300 --> 00:00:38.880
Now, users on the go tend to be
quite busy doing other things

00:00:38.880 --> 00:00:40.970
and can be really distracted.

00:00:40.970 --> 00:00:43.600
So not only do we have to take
the human hand into account,

00:00:43.600 --> 00:00:46.760
and optimize the interaction
design for single handed use,

00:00:46.760 --> 00:00:49.460
but we also have to be
human brain into account.

00:00:49.460 --> 00:00:51.370
So in part two, I
talked about how

00:00:51.370 --> 00:00:54.070
you can make location
information on maps

00:00:54.070 --> 00:00:57.920
graceful and easy to
consume for users on the go.

00:00:57.920 --> 00:01:00.120
Now I'll talk about
environmental factors that

00:01:00.120 --> 00:01:02.340
are outside the user and
their smartphone, which

00:01:02.340 --> 00:01:04.496
have a huge impact on
the type of experience

00:01:04.496 --> 00:01:06.870
that they're going to get from
their location-based apps.

00:01:06.870 --> 00:01:07.770
In other words,
we're going to talk

00:01:07.770 --> 00:01:09.478
about building and
designing applications

00:01:09.478 --> 00:01:11.790
for the real world.

00:01:11.790 --> 00:01:13.820
So when users are on
the go, chances are,

00:01:13.820 --> 00:01:14.874
they might be outside.

00:01:14.874 --> 00:01:16.790
And if they need to
glance at some information

00:01:16.790 --> 00:01:18.410
on their phones,
then outside lighting

00:01:18.410 --> 00:01:20.400
becomes a huge factor
on whether they'll

00:01:20.400 --> 00:01:22.800
be able to read this
information in the first Place.

00:01:22.800 --> 00:01:26.400
In fact, I mean you have to read
it in order process it, right?

00:01:26.400 --> 00:01:28.570
So if it's really bright
and sunny outside,

00:01:28.570 --> 00:01:30.930
and the UI uses very
subtle gradients

00:01:30.930 --> 00:01:33.520
with similar colors and low
contrast between foreground

00:01:33.520 --> 00:01:36.080
and background that
allow the user to discern

00:01:36.080 --> 00:01:38.630
the boundaries between
objects and layers,

00:01:38.630 --> 00:01:41.039
then all this will be lost.

00:01:41.039 --> 00:01:43.580
In fact, all the subtlety which
probably took a lot of effort

00:01:43.580 --> 00:01:46.200
to create and tune, will
just be pulling washed away,

00:01:46.200 --> 00:01:48.550
and the user will not
be able to see much,

00:01:48.550 --> 00:01:51.442
because of the lack of contrast,
which would be a shame.

00:01:51.442 --> 00:01:53.150
So keep this in mind
when you're thinking

00:01:53.150 --> 00:01:55.790
about glanceable information
for users on the go.

00:01:55.790 --> 00:01:58.120
UX design is all about
industrial design

00:01:58.120 --> 00:02:01.500
utility and not the fine arts.

00:02:01.500 --> 00:02:04.890
You must also make sure that
font size and images are large.

00:02:04.890 --> 00:02:08.160
Most countries where
smartphone users prevalent

00:02:08.160 --> 00:02:10.660
have an increasingly
aging population.

00:02:10.660 --> 00:02:13.440
This means that you have to
be mindful of whether the UI

00:02:13.440 --> 00:02:15.680
that your handcrafting
to perfection

00:02:15.680 --> 00:02:19.680
is just too small for someone
with even less ideal vision

00:02:19.680 --> 00:02:21.540
to even see.

00:02:21.540 --> 00:02:23.350
And finally, brevity
is key in delivering

00:02:23.350 --> 00:02:25.440
content to users
who are on the go.

00:02:25.440 --> 00:02:26.660
People are distracted.

00:02:26.660 --> 00:02:28.560
They're doing other
things in the real world.

00:02:28.560 --> 00:02:30.120
So keep it short.

00:02:30.120 --> 00:02:33.020
It's much more difficult to
make something short and useful

00:02:33.020 --> 00:02:34.230
than to ramble on.

00:02:34.230 --> 00:02:36.590
So put in the work
to make this happen.

00:02:36.590 --> 00:02:39.030
Keep in mind when you're
thinking about information

00:02:39.030 --> 00:02:40.360
to display to the user.

00:02:40.360 --> 00:02:42.009
Prioritize on their behalf.

00:02:42.009 --> 00:02:43.550
When you know that
they're on the go,

00:02:43.550 --> 00:02:45.200
and they'll thank you for this.

00:02:45.200 --> 00:02:49.189
But also give a way to get more
information if they wanted.

00:02:49.189 --> 00:02:50.980
So one of the biggest
environmental factors

00:02:50.980 --> 00:02:52.420
that can affect
the user experience

00:02:52.420 --> 00:02:54.753
is the type of connectivity
that's available to the user

00:02:54.753 --> 00:02:55.600
right now.

00:02:55.600 --> 00:02:57.640
And we've all
experienced cellular

00:02:57.640 --> 00:03:00.200
that cellular and Wi-Fi
connectivity can vary greatly

00:03:00.200 --> 00:03:01.830
from one location to the next.

00:03:01.830 --> 00:03:03.450
And again, this
is especially true

00:03:03.450 --> 00:03:05.710
for users are out and about.

00:03:05.710 --> 00:03:07.865
One minute you have a
great network coverage,

00:03:07.865 --> 00:03:10.240
and the next minute you might
have little to no coverage,

00:03:10.240 --> 00:03:12.050
and then back to
great coverage again.

00:03:12.050 --> 00:03:14.606
So depending on when
the user interacts

00:03:14.606 --> 00:03:15.980
with your application,
they might

00:03:15.980 --> 00:03:18.510
be delighted or
utterly disappointed.

00:03:18.510 --> 00:03:20.740
Now there's a right of
reasons why cover changes.

00:03:20.740 --> 00:03:22.940
There might be a lack
of cell towers thereby.

00:03:22.940 --> 00:03:25.560
There might be a lack of
Wi-Fi access points nearby.

00:03:25.560 --> 00:03:27.960
And there might be
wireless signal congestion.

00:03:27.960 --> 00:03:30.280
For example, in a
packed conference.

00:03:30.280 --> 00:03:34.260
Or it could be occlusion, which
is when you go through a tunnel

00:03:34.260 --> 00:03:36.120
or you're in an elevator.

00:03:36.120 --> 00:03:38.000
And there's like a
variety of other reasons

00:03:38.000 --> 00:03:41.210
why connectivity
could be spotty.

00:03:41.210 --> 00:03:42.940
Now, a great way
to manage this is

00:03:42.940 --> 00:03:45.290
to ensure that your
location-based app has

00:03:45.290 --> 00:03:46.610
offline mode.

00:03:46.610 --> 00:03:49.610
Gmail for Android is a
shining example of this.

00:03:49.610 --> 00:03:52.260
It hides whether you're online
or offline from the user

00:03:52.260 --> 00:03:53.280
entirely.

00:03:53.280 --> 00:03:55.680
In fact, you can compose
emails without connectivity.

00:03:55.680 --> 00:03:57.330
And these are just
queued for delivery,

00:03:57.330 --> 00:04:01.430
but are actually sent when
Gmail has connectivity.

00:04:01.430 --> 00:04:03.267
So now you can view
emails and attachments

00:04:03.267 --> 00:04:05.100
that you've already
downloaded to the device

00:04:05.100 --> 00:04:07.090
without any network as well.

00:04:07.090 --> 00:04:09.780
You just have to figure out,
for your application, which

00:04:09.780 --> 00:04:12.770
we use cases are
critical, and ensure

00:04:12.770 --> 00:04:14.830
that there's an offline
mode and in online

00:04:14.830 --> 00:04:19.940
mode design and implementation
for those use cases

00:04:19.940 --> 00:04:22.940
Now, these use cases should
execute without any network

00:04:22.940 --> 00:04:25.940
coverage, using only local
resources on the device,

00:04:25.940 --> 00:04:27.474
and when connectivity
is restored,

00:04:27.474 --> 00:04:29.390
this content should be
synced to whatever back

00:04:29.390 --> 00:04:30.690
end services you need.

00:04:30.690 --> 00:04:33.600
All this happening without
the knowledge of the user.

00:04:33.600 --> 00:04:36.900
It's important to note that
offline mode isn't important,

00:04:36.900 --> 00:04:39.610
just because wireless
connectivity can be unreliable.

00:04:42.230 --> 00:04:45.630
It might also be the user's
choice to be in offline mode

00:04:45.630 --> 00:04:46.954
to preserve their data plane.

00:04:46.954 --> 00:04:49.370
It's irresponsible restaurant
for developers and designers

00:04:49.370 --> 00:04:52.420
to assume that all users
have unlimited data plans.

00:04:52.420 --> 00:04:55.050
Cellphones and data plans
as cost a lot of money,

00:04:55.050 --> 00:04:57.600
and there's a lot of
different constituents

00:04:57.600 --> 00:05:00.692
if you look at the demographics
for smartphone users.

00:05:00.692 --> 00:05:03.150
So there's another reason why
it's really important for you

00:05:03.150 --> 00:05:05.750
to truly understand the user
if your application or product.

00:05:05.750 --> 00:05:07.660
You should do the
UX research that's

00:05:07.660 --> 00:05:09.540
needed to understand
your user, so you

00:05:09.540 --> 00:05:11.160
can get an idea of
how important it

00:05:11.160 --> 00:05:14.572
is they could not
wreck their data plan.

00:05:14.572 --> 00:05:16.530
Now, this could be one
of the key features that

00:05:16.530 --> 00:05:18.821
makes your application more
attractive to a certain set

00:05:18.821 --> 00:05:19.770
of users.

00:05:19.770 --> 00:05:23.810
So again, do your user research,
and make informed decisions.

00:05:23.810 --> 00:05:25.560
When you start talking
about offline mode,

00:05:25.560 --> 00:05:28.650
prefetching and caching
can't be far behind.

00:05:28.650 --> 00:05:31.332
Caching is something that you
should do as often as you can.

00:05:31.332 --> 00:05:32.790
And it's something
that can be done

00:05:32.790 --> 00:05:35.590
with very little development
cost in most cases.

00:05:35.590 --> 00:05:37.859
So there's little
excuse not to do this.

00:05:37.859 --> 00:05:39.900
Once you've downloaded
any data over the network,

00:05:39.900 --> 00:05:41.816
you should try and save
this to local storage,

00:05:41.816 --> 00:05:43.669
in case your user
might need it again.

00:05:43.669 --> 00:05:45.210
So as they go back
through the floor,

00:05:45.210 --> 00:05:48.230
fill out your application, the
information is already there.

00:05:48.230 --> 00:05:51.270
Cache also ensures that the
user see some data, which

00:05:51.270 --> 00:05:54.180
is better than no data, even
if that information stale.

00:05:54.180 --> 00:05:57.350
So on that note, make sure
to invalidate and refresh

00:05:57.350 --> 00:05:59.690
your cache, as it makes
sense in the context

00:05:59.690 --> 00:06:02.390
of your location-based
application.

00:06:02.390 --> 00:06:04.280
The Google Play
Music app on Android

00:06:04.280 --> 00:06:05.390
does a great job of this.

00:06:05.390 --> 00:06:08.000
It catches any played music
on the devices local storage,

00:06:08.000 --> 00:06:09.730
so that when you go back
to play that music again,

00:06:09.730 --> 00:06:10.910
it's already on the device.

00:06:10.910 --> 00:06:12.600
And it does not have
to be downloaded

00:06:12.600 --> 00:06:16.460
and streamed over the network,
costing precious bandwidth.

00:06:16.460 --> 00:06:19.310
Prefetching is a slightly
more difficult thing

00:06:19.310 --> 00:06:20.442
to implement than caching.

00:06:20.442 --> 00:06:21.900
But there are many
situations where

00:06:21.900 --> 00:06:24.130
it can deliver tremendous
value to the user,

00:06:24.130 --> 00:06:26.490
especially for
location-based apps.

00:06:26.490 --> 00:06:30.620
It makes it so that as the user
flows through your application,

00:06:30.620 --> 00:06:32.299
as they move
forward, prefetching

00:06:32.299 --> 00:06:34.590
takes care of making sure
that information is available

00:06:34.590 --> 00:06:35.690
before they need it.

00:06:35.690 --> 00:06:37.622
Now, caching helps the
user go back smoothly

00:06:37.622 --> 00:06:39.330
through your application,
and prefetching

00:06:39.330 --> 00:06:42.350
helps them move
forwards more smoothly.

00:06:42.350 --> 00:06:43.660
What am I talking about?

00:06:43.660 --> 00:06:47.450
So let's say you have
a have an application,

00:06:47.450 --> 00:06:49.240
and you've geofenced
the location.

00:06:49.240 --> 00:06:52.210
Now let's say that your
user enters this fence.

00:06:52.210 --> 00:06:54.880
This might sugar application
to prefetch some information

00:06:54.880 --> 00:06:57.040
that they're likely
to need very soon.

00:06:57.040 --> 00:06:58.790
And when the user
actually tries to access

00:06:58.790 --> 00:07:00.697
this information
in the near future,

00:07:00.697 --> 00:07:03.280
they'll be delighted when this
information shows up instantly.

00:07:03.280 --> 00:07:05.410
Because from their perspective,
there was no lag or delay.

00:07:05.410 --> 00:07:06.750
There were no loading screens.

00:07:06.750 --> 00:07:08.458
Magic happen in the
information was there

00:07:08.458 --> 00:07:09.410
before they needed it.

00:07:09.410 --> 00:07:11.190
How awesome is that?

00:07:11.190 --> 00:07:15.070
So from the user's perspective,
again, load times are bad.

00:07:15.070 --> 00:07:17.340
And you want the information
to show up instantly.

00:07:17.340 --> 00:07:19.060
And it's all about
managing perception.

00:07:19.060 --> 00:07:22.050
So the actual performance isn't
so important from a user's

00:07:22.050 --> 00:07:24.880
perspective, as the
perception of that performance

00:07:24.880 --> 00:07:27.410
or perceived performance.

00:07:27.410 --> 00:07:30.480
Now, the Google Maps Navigation
is great at doing this.

00:07:30.480 --> 00:07:32.340
Before you start
navigating to a route,

00:07:32.340 --> 00:07:34.150
it downloads a fair
amount of routing data,

00:07:34.150 --> 00:07:36.025
so that if there are
glitches in connectivity

00:07:36.025 --> 00:07:38.440
while you're moving, it
won't impact the directions

00:07:38.440 --> 00:07:40.655
that the app provides
with, which is awesome.

00:07:40.655 --> 00:07:43.690
It could even reroute you
without network connectivity

00:07:43.690 --> 00:07:45.900
on the journey, which
is even awesomer.

00:07:45.900 --> 00:07:47.650
This is a really,
really important thing,

00:07:47.650 --> 00:07:50.320
because when users are
actually on the go,

00:07:50.320 --> 00:07:53.170
they have no patience for
connectivity issues bubbling

00:07:53.170 --> 00:07:56.000
into the user experience.

00:07:56.000 --> 00:07:58.770
So that's all the time we
have this for this episode.

00:07:58.770 --> 00:08:00.870
Keep these three things in mind.

00:08:00.870 --> 00:08:03.436
The user's hand, the
user's attention,

00:08:03.436 --> 00:08:04.810
the environmental
conditions that

00:08:04.810 --> 00:08:07.120
affect the user of the
device, and this well

00:08:07.120 --> 00:08:09.700
I need to build great
location-based experiences

00:08:09.700 --> 00:08:10.920
on mobile.

00:08:10.920 --> 00:08:13.350
And also remember, that
these constraints are not

00:08:13.350 --> 00:08:14.300
compromises.

00:08:14.300 --> 00:08:18.690
Without constraints, this would
go from UX industrial design

00:08:18.690 --> 00:08:20.396
to the fine arts.

00:08:20.396 --> 00:08:22.270
However, creating a
design and implementation

00:08:22.270 --> 00:08:24.610
that violates these
constraints will certainly

00:08:24.610 --> 00:08:28.550
compromise the experience of
your product for your user.

00:08:28.550 --> 00:08:31.130
If you haven't already,
please be sure to join our UX

00:08:31.130 --> 00:08:32.234
community on Google+.

00:08:32.234 --> 00:08:34.970
It's a place where we can
continue this discussion

00:08:34.970 --> 00:08:37.490
and meet other people who are
just as passionate about user

00:08:37.490 --> 00:08:39.309
experience as you are.

00:08:39.309 --> 00:08:41.600
Thanks for watching and goodbye.

