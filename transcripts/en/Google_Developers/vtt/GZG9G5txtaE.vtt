WEBVTT
Kind: captions
Language: en

00:00:01.230 --> 00:00:03.695
GREG SCHECHTER: I hope you guys
enjoyed watching those OK

00:00:03.695 --> 00:00:05.240
Go videos instead of
just staring at

00:00:05.240 --> 00:00:06.630
this for like 10 minutes.

00:00:06.630 --> 00:00:09.190
I thought that was a little
bit more pleasant.

00:00:09.190 --> 00:00:12.960
But anyway, so this is HTML5 at
YouTube, Stories from the

00:00:12.960 --> 00:00:13.530
Mobile Front.

00:00:13.530 --> 00:00:15.130
We should have changed the title
a little bit, but it's

00:00:15.130 --> 00:00:18.640
still a lot of the same
sort of thing.

00:00:18.640 --> 00:00:21.595
It's a little bit about
just who we are.

00:00:21.595 --> 00:00:24.480
We sort of look a little
bit like that.

00:00:24.480 --> 00:00:29.710
That's me, there, and I always
wear the shirt I have.

00:00:29.710 --> 00:00:32.350
And I got my Player t-shirt
on under here as well.

00:00:36.970 --> 00:00:37.850
Anyway.

00:00:37.850 --> 00:00:39.370
So I'm Greg Schechter.

00:00:39.370 --> 00:00:41.100
I'm the web warrior
at YouTube.

00:00:41.100 --> 00:00:45.880
And I deal with all the HTML5
features at YouTube, and I

00:00:45.880 --> 00:00:48.450
focus on the HTML5
video player.

00:00:48.450 --> 00:00:49.210
And this is Zoltan.

00:00:49.210 --> 00:00:51.200
I'll let him talk
about himself.

00:00:51.200 --> 00:00:51.845
ZOLTAN SZEGO: Thanks.

00:00:51.845 --> 00:00:52.330
Hi, everyone.

00:00:52.330 --> 00:00:53.730
Thanks for coming.

00:00:53.730 --> 00:00:54.420
I'm Zoltan.

00:00:54.420 --> 00:00:58.860
I work on the YouTube mobile
website, m.youtube.com.

00:00:58.860 --> 00:01:00.850
You guys are probably more
familiar with the app.

00:01:00.850 --> 00:01:03.910
The website gets a little less
traffic, but on the flipside,

00:01:03.910 --> 00:01:06.070
it has to work on pretty
much every device.

00:01:06.070 --> 00:01:08.650
If it has a browser and it can
play video, we would like

00:01:08.650 --> 00:01:09.710
YouTube to work on it.

00:01:09.710 --> 00:01:12.070
So our team deals with a lot
of different devices every

00:01:12.070 --> 00:01:15.880
day-- feature phones,
smartphones, and tablets.

00:01:15.880 --> 00:01:16.690
GREG SCHECHTER: Cool.

00:01:16.690 --> 00:01:18.580
Thanks, Zoltan.

00:01:18.580 --> 00:01:22.390
So when I was thinking about
this talk, I thought about,

00:01:22.390 --> 00:01:24.910
what is Google I/O about?

00:01:24.910 --> 00:01:28.360
And here's a picture of me from
a couple years ago when I

00:01:28.360 --> 00:01:29.850
came to my first I/O.

00:01:29.850 --> 00:01:32.710
And it was really, for us-- like
I was an intern at the

00:01:32.710 --> 00:01:35.510
time, and it was about
seeing cool stuff.

00:01:35.510 --> 00:01:37.670
We were super excited to see
the newest and the coolest

00:01:37.670 --> 00:01:38.990
things that were happening.

00:01:38.990 --> 00:01:42.230
And I definitely think that we
did a pretty good job this

00:01:42.230 --> 00:01:43.980
morning, and people
were cheering.

00:01:43.980 --> 00:01:48.040
It's a pretty cool conference.

00:01:48.040 --> 00:01:50.380
So last year, we showed
off this thing

00:01:50.380 --> 00:01:51.710
called the Rome Project.

00:01:51.710 --> 00:01:54.450
And if you guys don't remember,
I'll just play this

00:01:54.450 --> 00:01:55.700
little sample video.

00:01:59.400 --> 00:02:04.260
It was basically just this
interactive music video.

00:02:04.260 --> 00:02:06.620
It used a lot of cool
technologies and WebGL, and

00:02:06.620 --> 00:02:12.470
this is all interactive in the
browser, and just showed the

00:02:12.470 --> 00:02:14.750
power of what you do.

00:02:14.750 --> 00:02:16.680
And this was really cool, and
everybody thought it was

00:02:16.680 --> 00:02:17.820
really neat.

00:02:17.820 --> 00:02:21.060
And then I tried to look
at it on my phone.

00:02:21.060 --> 00:02:25.440
And so I took this year's
awesome hardware.

00:02:25.440 --> 00:02:28.740
This isn't a picture of the
Nexus 7, but whatever.

00:02:28.740 --> 00:02:30.390
And this is what happens.

00:02:30.390 --> 00:02:31.850
I get this little
error screen.

00:02:31.850 --> 00:02:33.690
And that was really
disappointing.

00:02:33.690 --> 00:02:36.130
And then I was like, well,
maybe Chrome doesn't have

00:02:36.130 --> 00:02:39.100
WebGL support on
mobile devices.

00:02:39.100 --> 00:02:40.880
So, OK, there are other
browsers that

00:02:40.880 --> 00:02:42.180
I have on my phone.

00:02:42.180 --> 00:02:44.610
Let me try, let me see
what happens there.

00:02:44.610 --> 00:02:47.360
And well, it didn't give me
the error screen, but it

00:02:47.360 --> 00:02:49.310
certainly didn't work either.

00:02:49.310 --> 00:02:50.810
So this was disappointing.

00:02:50.810 --> 00:02:53.320
And then I was wondering, OK,
is all this coolness, is it

00:02:53.320 --> 00:02:54.950
ready to use?

00:02:54.950 --> 00:02:58.920
As developers, can we
use it at YouTube?

00:02:58.920 --> 00:03:01.040
Can you guys use it when you're
building your sites?

00:03:01.040 --> 00:03:03.920
Because that's what we hoped for
when we talked about all

00:03:03.920 --> 00:03:05.290
these neat things.

00:03:05.290 --> 00:03:08.170
So this is the story
that we're going

00:03:08.170 --> 00:03:08.910
to be talking about.

00:03:08.910 --> 00:03:11.760
It's kind of a battle on the
different features and stuff.

00:03:11.760 --> 00:03:15.290
And we should have plenty of
cat references throughout,

00:03:15.290 --> 00:03:17.540
because it is a YouTube talk.

00:03:17.540 --> 00:03:18.820
So let's talk about HTML5.

00:03:18.820 --> 00:03:20.320
What does HTML bring
to the table?

00:03:20.320 --> 00:03:23.790
What are the cool technologies
that we're going to talk about

00:03:23.790 --> 00:03:26.400
here, and that other people are
talking about at the other

00:03:26.400 --> 00:03:28.980
talks throughout the day and
throughout the conference?

00:03:28.980 --> 00:03:31.260
So this is just a quick
list of the different

00:03:31.260 --> 00:03:32.950
things that they have.

00:03:32.950 --> 00:03:35.120
And at YouTube, well, obviously,
we're a video

00:03:35.120 --> 00:03:37.570
website, so the one that we
care about the most is the

00:03:37.570 --> 00:03:40.060
multimedia one.

00:03:40.060 --> 00:03:43.050
But oddly enough, we actually
use quite a few of these on

00:03:43.050 --> 00:03:44.020
the website.

00:03:44.020 --> 00:03:49.690
And so we'll go and look into
all these things separately

00:03:49.690 --> 00:03:51.320
about the different things that
they provide and what we

00:03:51.320 --> 00:03:55.620
use, and how they make YouTube
kind of awesome.

00:03:55.620 --> 00:03:57.430
But like I said, why do--

00:03:57.430 --> 00:03:59.300
who can use this stuff?

00:03:59.300 --> 00:04:01.680
Because clearly, the WebGL stuff
wasn't going to work on

00:04:01.680 --> 00:04:04.670
my phone today.

00:04:04.670 --> 00:04:07.040
And it's for you guys as
developers, it's going to

00:04:07.040 --> 00:04:08.800
depend on your users.

00:04:08.800 --> 00:04:10.020
Who are your audiences?

00:04:10.020 --> 00:04:11.480
Who are you trying to target?

00:04:11.480 --> 00:04:13.150
And just an idea--

00:04:13.150 --> 00:04:17.380
when I was in school, my
audience looked like this.

00:04:17.380 --> 00:04:19.453
I didn't care about
IE as much.

00:04:19.453 --> 00:04:22.800
Not to say that they don't have
wonderful browsers today,

00:04:22.800 --> 00:04:28.760
but at the time, I wasn't using
IE, and I wasn't going

00:04:28.760 --> 00:04:30.810
to focus on it for
my development.

00:04:30.810 --> 00:04:33.130
But the last company that I
worked for, we actually cared

00:04:33.130 --> 00:04:34.400
about IE a lot.

00:04:34.400 --> 00:04:37.120
And we cared about if a user had
JavaScript, if they didn't

00:04:37.120 --> 00:04:38.350
have JavaScript.

00:04:38.350 --> 00:04:42.110
And at YouTube, it's
kind of like this.

00:04:42.110 --> 00:04:46.240
We support as many browsers as
we can, but early browsers of

00:04:46.240 --> 00:04:47.730
IE, we don't give them
full support.

00:04:47.730 --> 00:04:49.540
So when you think about the
stuff that we talk about,

00:04:49.540 --> 00:04:53.140
remember who your users are, who
you want to support, and

00:04:53.140 --> 00:04:55.600
who your target's going to be.

00:04:55.600 --> 00:04:59.660
So then, why are we going
to use this HTML5 stuff?

00:04:59.660 --> 00:05:03.410
Hasn't things been working
fine for a while?

00:05:03.410 --> 00:05:05.780
Well, let's start to answer
that question.

00:05:05.780 --> 00:05:09.180
So the first thing we're going
to look at is CSS3 styling.

00:05:09.180 --> 00:05:11.840
And this one I don't actually
think of as as exciting as

00:05:11.840 --> 00:05:12.890
some of the other topics.

00:05:12.890 --> 00:05:14.570
One of the first things
that people talk

00:05:14.570 --> 00:05:16.070
about is rounded corners.

00:05:16.070 --> 00:05:18.320
In the early days, it used to
require us to use a lot of

00:05:18.320 --> 00:05:22.320
images to get this
nice prettiness.

00:05:22.320 --> 00:05:26.880
But today, we can just drop in
a little snippet of code, and

00:05:26.880 --> 00:05:31.780
we get this roundedness on our
divs and things like that.

00:05:31.780 --> 00:05:34.000
And the nice thing about a
feature like this is if the

00:05:34.000 --> 00:05:35.860
browser doesn't support it,
it's just square corners.

00:05:35.860 --> 00:05:36.450
It still works.

00:05:36.450 --> 00:05:38.750
It still looks fine,
for the most part.

00:05:38.750 --> 00:05:41.190
Transitions are a little bit
more interesting, a little bit

00:05:41.190 --> 00:05:42.120
more newer.

00:05:42.120 --> 00:05:44.900
They don't have as much support,
and so we have to

00:05:44.900 --> 00:05:48.200
make sure that everything's
[INAUDIBLE]

00:05:48.200 --> 00:05:49.930
with our vendor prefixes here.

00:05:49.930 --> 00:05:54.040
But the same thing, just one
line of code and we can get a

00:05:54.040 --> 00:05:56.860
nice, smooth transition
to make things

00:05:56.860 --> 00:05:58.360
look a little prettier.

00:05:58.360 --> 00:06:02.260
So what advantages do
we get from this?

00:06:02.260 --> 00:06:04.560
Well, it's going to enhance
the user experience.

00:06:04.560 --> 00:06:06.420
Certainly, the transitions will
make things smooth or

00:06:06.420 --> 00:06:09.730
make it more interesting to look
at, make it more pretty.

00:06:09.730 --> 00:06:13.420
And it's a lot less code than
having to worry about all

00:06:13.420 --> 00:06:14.940
these different situations
where you're bringing in

00:06:14.940 --> 00:06:16.910
images and doing these hacks.

00:06:16.910 --> 00:06:19.090
And because of that, you're
going to get faster

00:06:19.090 --> 00:06:19.500
performance.

00:06:19.500 --> 00:06:20.890
You're not going to load
images anymore.

00:06:20.890 --> 00:06:23.100
The browser's going to take
care of it for you.

00:06:23.100 --> 00:06:24.390
And so we're not going to
waste all this extra

00:06:24.390 --> 00:06:25.700
development time trying
to worry about it.

00:06:25.700 --> 00:06:26.240
So that's cool.

00:06:26.240 --> 00:06:27.840
That's awesome.

00:06:27.840 --> 00:06:31.620
And the experience is still
great without it.

00:06:31.620 --> 00:06:34.620
So instead thinking about why
HTML5 for us, it's really more

00:06:34.620 --> 00:06:36.470
of a question about
when HTML5.

00:06:36.470 --> 00:06:38.510
We know that it's going to bring
us a better experience,

00:06:38.510 --> 00:06:43.025
and be faster and more
performant, and all these

00:06:43.025 --> 00:06:45.630
great things, so we don't need
to think about why anymore.

00:06:45.630 --> 00:06:46.690
It's really about when.

00:06:46.690 --> 00:06:47.580
When do we bring it in?

00:06:47.580 --> 00:06:51.550
So just a little idea of how
many users get some of this is

00:06:51.550 --> 00:06:54.650
CSS3 coolness-- well, with
rounded corners, is about 85%.

00:06:54.650 --> 00:06:57.830
The newer versions of IE do have
rounded-corner support,

00:06:57.830 --> 00:07:00.660
IE9 and forward, but the
older ones don't.

00:07:00.660 --> 00:07:04.360
And so at YouTube, that's
about 85% of our users.

00:07:04.360 --> 00:07:05.850
Transitions is a little
bit less.

00:07:05.850 --> 00:07:11.690
About 70% of the users today
will get the cool transitions.

00:07:11.690 --> 00:07:13.300
Now let's talk about performance
and integration.

00:07:13.300 --> 00:07:15.050
And this is a little more
interesting, because I get to

00:07:15.050 --> 00:07:16.050
talk about uploads.

00:07:16.050 --> 00:07:17.970
I think uploads is
pretty neat.

00:07:17.970 --> 00:07:22.100
So this is a picture
of our upload page.

00:07:22.100 --> 00:07:25.640
And the part that I want to
point out is up here, that

00:07:25.640 --> 00:07:27.230
little progress bar.

00:07:27.230 --> 00:07:30.300
Now, we do this in HTML5.

00:07:30.300 --> 00:07:32.790
We use XHR to do this.

00:07:32.790 --> 00:07:33.730
And it's very simple.

00:07:33.730 --> 00:07:37.660
We can have a little snippet
of code like this, where we

00:07:37.660 --> 00:07:42.790
can create a request, and send
a blob or a file over.

00:07:42.790 --> 00:07:45.530
And we can listen to the
progress updates, and be able

00:07:45.530 --> 00:07:48.740
to have this responsive user
interface, where the user

00:07:48.740 --> 00:07:51.050
knows what's going on.

00:07:51.050 --> 00:07:54.730
And so it's just very simple.

00:07:54.730 --> 00:07:56.890
We get that sort of experience
instead of just having the

00:07:56.890 --> 00:08:00.230
user have to sit there and
wait until it's done.

00:08:00.230 --> 00:08:01.300
And so this is great.

00:08:01.300 --> 00:08:01.910
And why?

00:08:01.910 --> 00:08:03.920
Because there's a little bit
more than just that little

00:08:03.920 --> 00:08:04.990
prettiness.

00:08:04.990 --> 00:08:07.930
But it gives us a richer
user experience with

00:08:07.930 --> 00:08:09.080
those progress updates.

00:08:09.080 --> 00:08:11.000
We can also do multiple
file uploads.

00:08:11.000 --> 00:08:13.220
The browser allows us to
do this really easily.

00:08:13.220 --> 00:08:14.800
And We can do resumable
uploads.

00:08:14.800 --> 00:08:17.625
This API has this ability to--

00:08:17.625 --> 00:08:20.320
if upload stops, we can start
off where it left off and keep

00:08:20.320 --> 00:08:25.560
going, whereas before, we would
have to rely on plug-ins

00:08:25.560 --> 00:08:27.090
to have these advanced
features.

00:08:27.090 --> 00:08:29.390
Silverlight has these
features to it.

00:08:29.390 --> 00:08:34.059
And certainly, with POST, we
didn't get all this great

00:08:34.059 --> 00:08:34.669
functionality.

00:08:34.669 --> 00:08:36.000
So this is great.

00:08:36.000 --> 00:08:38.590
We can use XHR, and we do on our
site to enhance our user

00:08:38.590 --> 00:08:39.450
experience.

00:08:39.450 --> 00:08:41.580
So what percentage of our
users get this new

00:08:41.580 --> 00:08:42.220
awesomeness?

00:08:42.220 --> 00:08:45.510
It's about 75%.

00:08:45.510 --> 00:08:47.900
IE is trailing.

00:08:47.900 --> 00:08:53.400
They have XHR support in the
newer versions, and they have

00:08:53.400 --> 00:08:55.830
core support, which we
also use for uploads.

00:08:55.830 --> 00:08:58.270
But it's not quite there yet.

00:08:58.270 --> 00:09:02.360
So let's up the coolness now
and talk about my favorite

00:09:02.360 --> 00:09:04.900
portion, which is multimedia.

00:09:04.900 --> 00:09:06.790
Obviously, it's going to be
great, because this is the

00:09:06.790 --> 00:09:09.320
part that I work on the
most, and it's all

00:09:09.320 --> 00:09:11.350
cat videos and stuff.

00:09:11.350 --> 00:09:13.320
So like I said, it's
all about video.

00:09:13.320 --> 00:09:16.600
And traditionally, we talk about
things on the desktop.

00:09:16.600 --> 00:09:17.440
And desktop's really cool.

00:09:17.440 --> 00:09:18.910
And like I said, we
do cat videos.

00:09:18.910 --> 00:09:21.370
But maybe you guys are going
to produce a video website

00:09:21.370 --> 00:09:23.470
that focuses on something
else.

00:09:23.470 --> 00:09:27.620
And Flash has worked great for
us in the past, and now we

00:09:27.620 --> 00:09:28.950
have this new HTML5
technology.

00:09:28.950 --> 00:09:32.830
So what did we expect to get
when we switched to HTML5?

00:09:32.830 --> 00:09:35.990
Well, because it's open source,
that's pretty cool,

00:09:35.990 --> 00:09:38.160
and we can have open source
browsers, players, and codecs

00:09:38.160 --> 00:09:40.690
help move this technology
faster and in a more

00:09:40.690 --> 00:09:41.670
interesting way.

00:09:41.670 --> 00:09:44.330
Without the need for Flash, this
extra plug-in, the extra

00:09:44.330 --> 00:09:46.320
integration in the system,
we expect that

00:09:46.320 --> 00:09:47.760
it's going to be faster.

00:09:47.760 --> 00:09:50.490
You don't have to instantiate
this plug-in, and it's going

00:09:50.490 --> 00:09:55.080
to be more tightly bundled with
the browser, so it should

00:09:55.080 --> 00:09:56.690
perform better.

00:09:56.690 --> 00:10:00.040
And of course, accessibility
is a big thing.

00:10:00.040 --> 00:10:03.790
For example, just being able
to tab around and interact

00:10:03.790 --> 00:10:08.400
with the video player, with just
the HTML elements that

00:10:08.400 --> 00:10:09.900
the browser's used
to interacting

00:10:09.900 --> 00:10:11.910
with is done for you.

00:10:11.910 --> 00:10:13.830
Whereas with Flash, you have to
make hacks if you want to

00:10:13.830 --> 00:10:18.350
be able to tab into the Flash
player to interact with it, if

00:10:18.350 --> 00:10:20.510
you're using a screen
reader or something.

00:10:20.510 --> 00:10:22.240
And power consumption
is a big one.

00:10:22.240 --> 00:10:27.610
And we'll dive deeper into that
when we talk more about

00:10:27.610 --> 00:10:28.380
mobile stuff.

00:10:28.380 --> 00:10:31.520
So who can use HTML5 today?

00:10:31.520 --> 00:10:33.520
It's about 80% of our users,
which is pretty cool.

00:10:33.520 --> 00:10:36.330
We don't serve it to 80%
of our users yet.

00:10:36.330 --> 00:10:41.550
But this number is great,
because a year and a half ago,

00:10:41.550 --> 00:10:43.570
this was only about 35%.

00:10:43.570 --> 00:10:45.660
And the world kind of looked a
little bit like this a year

00:10:45.660 --> 00:10:47.900
and a half ago.

00:10:47.900 --> 00:10:50.010
And this was a bit of an
exaggeration, but we had all

00:10:50.010 --> 00:10:52.540
these places where we could use
Flash, a good chunk where

00:10:52.540 --> 00:10:55.920
we could use HTML5, and a
tiny sliver where it was

00:10:55.920 --> 00:10:58.210
HTML5-only, and that was
an iPhone and iPod.

00:10:58.210 --> 00:11:01.770
Now clearly, today's world is
a little bit different.

00:11:01.770 --> 00:11:04.680
The numbers that we showed off
in the morning show that

00:11:04.680 --> 00:11:07.250
mobile growth is huge, and we'll
talk about that a little

00:11:07.250 --> 00:11:08.650
bit later, as well.

00:11:08.650 --> 00:11:11.050
But this is where we started
when we were thinking, why are

00:11:11.050 --> 00:11:13.230
we going to build this
HTML5 video player?

00:11:13.230 --> 00:11:15.220
Because most of our users
can have Flash.

00:11:15.220 --> 00:11:16.750
It's been working well for us.

00:11:16.750 --> 00:11:19.330
But the interesting thing is
when we looked at our API--

00:11:19.330 --> 00:11:21.100
who was using our API, what
kind of interesting

00:11:21.100 --> 00:11:22.650
applications they were building,
and where they were

00:11:22.650 --> 00:11:25.020
trying to build it,
it shifted.

00:11:25.020 --> 00:11:30.000
And we saw that in most places
where people were building

00:11:30.000 --> 00:11:33.180
interesting apps, it was places
that needed an HTML5

00:11:33.180 --> 00:11:35.030
player, because Flash
wasn't supported.

00:11:35.030 --> 00:11:36.990
And so this was really
exciting.

00:11:36.990 --> 00:11:41.020
This made it obvious for us
that we needed to have an

00:11:41.020 --> 00:11:43.090
HTML5 player.

00:11:43.090 --> 00:11:44.730
But now let's talk mobile,
because I think that's more

00:11:44.730 --> 00:11:45.060
interesting.

00:11:45.060 --> 00:11:46.310
It's more new.

00:11:46.310 --> 00:11:47.610
That was the past.

00:11:47.610 --> 00:11:49.380
We made those decisions to
go in that direction.

00:11:49.380 --> 00:11:52.890
So what do we have to
worry about now?

00:11:52.890 --> 00:11:55.650
So the first thing is thinking
about just why?

00:11:55.650 --> 00:11:58.060
Why is mobile important?

00:11:58.060 --> 00:12:02.150
Well, so this is the playback
stats that we have from 2010

00:12:02.150 --> 00:12:03.290
going into 2011.

00:12:03.290 --> 00:12:10.220
And we can see that
unfortunately, desktop is so

00:12:10.220 --> 00:12:13.910
huge at YouTube that mobile is
still kind of a small percent.

00:12:13.910 --> 00:12:20.690
But the difference is, desktop
increased by about 30% between

00:12:20.690 --> 00:12:23.030
these years, and
mobile tripled.

00:12:23.030 --> 00:12:26.280
And I really wish we had numbers
for today, but we

00:12:26.280 --> 00:12:28.980
haven't quite compiled all those
official numbers yet.

00:12:28.980 --> 00:12:31.800
But this'll be a lot more--

00:12:31.800 --> 00:12:35.760
this is about 10% of our total
playbacks now, and if we

00:12:35.760 --> 00:12:38.880
showed you what we had for this
year when we have all

00:12:38.880 --> 00:12:40.720
that data, I'm sure that it
will be a lot larger.

00:12:40.720 --> 00:12:41.530
So this is exciting.

00:12:41.530 --> 00:12:45.600
This is a growing market and a
place that we need to provide

00:12:45.600 --> 00:12:48.030
a good video experience.

00:12:48.030 --> 00:12:49.280
So how do we do that?

00:12:49.280 --> 00:12:50.730
Well, so there are a
couple technologies

00:12:50.730 --> 00:12:51.510
we can use on mobile.

00:12:51.510 --> 00:12:52.450
Well, there's Flash.

00:12:52.450 --> 00:12:53.800
We can do native stuff.

00:12:53.800 --> 00:12:56.700
And we can use HTML5 video.

00:12:56.700 --> 00:13:00.380
Now, Flash on the desktop sort
of equals Flash on the phone.

00:13:00.380 --> 00:13:01.580
You don't have to make
too many changes.

00:13:01.580 --> 00:13:03.210
It's going to work.

00:13:03.210 --> 00:13:04.930
But the problem is, you don't
get Flash everywhere.

00:13:04.930 --> 00:13:06.670
Some devices don't support it.

00:13:06.670 --> 00:13:09.930
Certainly, iOS is a good example
of that, and Android.

00:13:09.930 --> 00:13:13.650
Newer versions of Android
don't have Flash.

00:13:13.650 --> 00:13:15.790
So we kind of threw that out.

00:13:15.790 --> 00:13:19.090
So then we have native,
and native is good.

00:13:19.090 --> 00:13:24.280
What we can do here is we can
have a simple RTSP protocol,

00:13:24.280 --> 00:13:25.710
just have that URL
up there that'll

00:13:25.710 --> 00:13:27.090
point to a video stream.

00:13:27.090 --> 00:13:31.330
And then we can serve the video,
and the phone will do

00:13:31.330 --> 00:13:32.630
the work for us.

00:13:32.630 --> 00:13:35.480
And this is great if
we don't have HTML5

00:13:35.480 --> 00:13:38.390
playback, HTML5 video.

00:13:38.390 --> 00:13:40.020
Because otherwise, we'd be
able to build a richer

00:13:40.020 --> 00:13:41.000
experience.

00:13:41.000 --> 00:13:43.530
We also have the ability
to open up an app.

00:13:43.530 --> 00:13:46.290
If we have an app on the phone,
we can use a native app

00:13:46.290 --> 00:13:48.760
protocol to open that up.

00:13:48.760 --> 00:13:52.000
And iOS does special-case a
lot of the YouTube stuff,

00:13:52.000 --> 00:13:54.750
which is nice for us, but if
you're building your own

00:13:54.750 --> 00:13:57.930
things, obviously you don't
have that kind of pull.

00:13:57.930 --> 00:14:01.490
So don't worry about
that one as much.

00:14:01.490 --> 00:14:04.600
So let's talk about
HTML5 video.

00:14:04.600 --> 00:14:07.910
So most the time, people think
of it, sort of like, there's

00:14:07.910 --> 00:14:09.630
Safari in some places,
and they have

00:14:09.630 --> 00:14:11.290
Android in other places.

00:14:11.290 --> 00:14:14.440
And that's a misconception,
because really, the world

00:14:14.440 --> 00:14:16.300
looks like that.

00:14:16.300 --> 00:14:18.764
We have a lot of different
browsers.

00:14:18.764 --> 00:14:22.050
Like, I have all these
installed on my

00:14:22.050 --> 00:14:25.020
phone that I have.

00:14:25.020 --> 00:14:26.450
So these are full-featured
browsers.

00:14:26.450 --> 00:14:29.870
Opera Mini is a proxy browser
so it does things in a

00:14:29.870 --> 00:14:30.690
different way.

00:14:30.690 --> 00:14:33.120
And really, this is still
just a sample.

00:14:33.120 --> 00:14:34.800
There's a lot of different
browsers that we have to worry

00:14:34.800 --> 00:14:36.990
about when we're building
video applications.

00:14:36.990 --> 00:14:40.690
So don't think that it's just
Safari and Android.

00:14:40.690 --> 00:14:44.320
But now, let's get serious and
talk about best practices and

00:14:44.320 --> 00:14:45.710
how we can build those
applications.

00:14:45.710 --> 00:14:48.400
And so I'm going to hand it
over to Zoltan for this.

00:14:48.400 --> 00:14:49.380
ZOLTAN SZEGO: Thanks, Greg.

00:14:49.380 --> 00:14:50.670
So yeah, it's serious
business.

00:14:50.670 --> 00:14:53.486
So let's see how this
looks in code.

00:14:53.486 --> 00:14:56.040
So you have a 
tag, and it's great.

00:14:56.040 --> 00:14:57.890
And let's stick a source
file in there.

00:14:57.890 --> 00:15:00.170
It's our funny_cat_video.

00:15:00.170 --> 00:15:02.040
And in theory, yeah, that's
all there is to it.

00:15:02.040 --> 00:15:04.060
It's a video with a file.

00:15:04.060 --> 00:15:05.800
And so here's where
it gets serious.

00:15:05.800 --> 00:15:08.980
So let's think about what format
the video is in, like

00:15:08.980 --> 00:15:10.790
what devices can play it back.

00:15:10.790 --> 00:15:13.080
So there's a whole bunch of
different codecs that you have

00:15:13.080 --> 00:15:15.230
to consider.

00:15:15.230 --> 00:15:19.570
Various devices support
various formats.

00:15:19.570 --> 00:15:21.070
Let's see the breakdown.

00:15:21.070 --> 00:15:22.960
So H264 is pretty
much supported

00:15:22.960 --> 00:15:24.620
everywhere across the board.

00:15:24.620 --> 00:15:25.600
It's a great bet.

00:15:25.600 --> 00:15:29.470
All the mainstream browsers
support it.

00:15:29.470 --> 00:15:31.490
WebM is kind of runner-up.

00:15:31.490 --> 00:15:33.530
We also include HLS
on this chart.

00:15:33.530 --> 00:15:34.320
It's not really a codec.

00:15:34.320 --> 00:15:37.910
It's more of a way to slice up
your videos and stream them.

00:15:37.910 --> 00:15:39.130
That's the way to go for live

00:15:39.130 --> 00:15:41.310
streaming or adaptive streaming.

00:15:41.310 --> 00:15:45.000
It's supported in iOS and newer
versions of Android.

00:15:45.000 --> 00:15:50.010
So H264 is a really safe bet,
if you want to go to that.

00:15:50.010 --> 00:15:54.620
It's a good idea to keep in mind
the various devices and

00:15:54.620 --> 00:15:58.130
their OS distribution,
the breakdown.

00:15:58.130 --> 00:15:58.940
iOS--

00:15:58.940 --> 00:16:02.260
pretty much every device made
in the last 3 or 4 years

00:16:02.260 --> 00:16:04.680
supports the HTML5 video.

00:16:04.680 --> 00:16:06.510
Apple is pretty good with
getting users to upgrade to

00:16:06.510 --> 00:16:08.910
the latest version, so
no worries there.

00:16:08.910 --> 00:16:12.380
On Android, HTML5 video
works on 2.2 and up.

00:16:12.380 --> 00:16:16.100
So there's a tiny minority who
still can't use it, but

00:16:16.100 --> 00:16:18.760
otherwise, it's good to go.

00:16:18.760 --> 00:16:21.600
And the newer versions,
like 4.0 and up, have

00:16:21.600 --> 00:16:24.510
more advanced support.

00:16:24.510 --> 00:16:28.290
So if you want to use multiple
types of formats, there's the

00:16:28.290 --> 00:16:29.290
way to do it.

00:16:29.290 --> 00:16:32.200
You can take a  tag and
have multiple source tags

00:16:32.200 --> 00:16:35.060
inside it, and the phone's going
to go through it, and

00:16:35.060 --> 00:16:39.850
pick one that it knows it can
play, and go at that.

00:16:39.850 --> 00:16:42.720
GREG SCHECHTER: So one of the
cool things, I think, about

00:16:42.720 --> 00:16:44.950
mobile is looking at power.

00:16:44.950 --> 00:16:46.140
And so what I have here--

00:16:46.140 --> 00:16:47.020
I just have a screenshot.

00:16:47.020 --> 00:16:50.120
A little video capture from
one of our data centers.

00:16:50.120 --> 00:16:53.180
It's cat-powered, which I
think is very important.

00:16:53.180 --> 00:16:55.090
[CAT MEOWS ON VIDEO]

00:16:55.090 --> 00:16:59.350
GREG SCHECHTER: I tried taking
one of these systems and

00:16:59.350 --> 00:17:03.930
having one of my servers that's
at my desk run, but

00:17:03.930 --> 00:17:06.780
somebody had a cat allergy,
so I just had to

00:17:06.780 --> 00:17:08.839
plug it into the wall.

00:17:08.839 --> 00:17:10.430
I wanted it to be more
of a green space,

00:17:10.430 --> 00:17:12.670
but it wasn't working.

00:17:12.670 --> 00:17:15.700
Anyway, enough of those cats.

00:17:15.700 --> 00:17:17.660
They're kind of noisy
sometimes.

00:17:17.660 --> 00:17:18.069
But anyway.

00:17:18.069 --> 00:17:19.145
So this is--

00:17:19.145 --> 00:17:20.055
aaah!

00:17:20.055 --> 00:17:21.305
That's no good.

00:17:23.700 --> 00:17:31.470
So this is a look at some work
that this guy Yossi Oren did.

00:17:31.470 --> 00:17:36.050
And he does research in power
consumption out in Tel Aviv.

00:17:36.050 --> 00:17:36.910
Great guy.

00:17:36.910 --> 00:17:40.990
And so what he did is he took
a tablet that's available in

00:17:40.990 --> 00:17:42.690
China today that
has a WebM kit.

00:17:42.690 --> 00:17:43.890
Because most phones don't.

00:17:43.890 --> 00:17:45.620
Most tablets don't today.

00:17:45.620 --> 00:17:47.260
And he did some power
consumption

00:17:47.260 --> 00:17:49.680
measurements for us.

00:17:49.680 --> 00:17:53.120
And so you can see here that
when the phone is idle, it

00:17:53.120 --> 00:17:54.190
doesn't use up that
much power.

00:17:54.190 --> 00:17:56.380
That's what you would expect,
or what you would hope.

00:17:56.380 --> 00:18:01.910
And you can see that Flash
eats up a lot of power.

00:18:01.910 --> 00:18:04.820
But when you're using hardware
acceleration with web

00:18:04.820 --> 00:18:07.570
animation 64, it's really,
really small.

00:18:07.570 --> 00:18:08.560
And so this is great.

00:18:08.560 --> 00:18:11.180
And the H264 one is
smaller than WebM.

00:18:11.180 --> 00:18:14.790
So we really encourage you,
when you're deciding what

00:18:14.790 --> 00:18:16.990
formats to encode things in,
think about power consumption

00:18:16.990 --> 00:18:18.370
for your users.

00:18:18.370 --> 00:18:22.750
So when WebM is available on
phones, you're going to get a

00:18:22.750 --> 00:18:23.720
good experience.

00:18:23.720 --> 00:18:27.280
And this is first-generation
stuff, and so this is only

00:18:27.280 --> 00:18:28.960
going to improve.

00:18:28.960 --> 00:18:31.710
But today, it's not
as many places.

00:18:31.710 --> 00:18:36.700
You might want to choose H264
for power and other reasons.

00:18:36.700 --> 00:18:40.010
Although one of the cool things
that happened is Yossi

00:18:40.010 --> 00:18:43.730
just gave us some new numbers
for looking at a Chromebook.

00:18:43.730 --> 00:18:46.490
And I did see that the WebM
numbers were better than H264,

00:18:46.490 --> 00:18:49.100
which is pretty exciting
because WebM is a great

00:18:49.100 --> 00:18:53.310
technology that we
use at the 'Tube.

00:18:53.310 --> 00:18:55.130
So this is pretty neat.

00:18:55.130 --> 00:18:57.960
Now, let's actually talk
about sticking a

00:18:57.960 --> 00:18:59.790
video tag in the page.

00:18:59.790 --> 00:19:01.040
So you've got your formats.

00:19:01.040 --> 00:19:01.500
You picked it.

00:19:01.500 --> 00:19:02.330
What does it look like?

00:19:02.330 --> 00:19:05.040
And here I just have a
really simple page.

00:19:05.040 --> 00:19:07.730
It's just going to have a video
tag, and there's H264

00:19:07.730 --> 00:19:10.090
and WebM, and both
tags in there.

00:19:10.090 --> 00:19:12.240
And I have some screenshots
down here of what the

00:19:12.240 --> 00:19:15.140
different browsers look like
on a mobile device.

00:19:15.140 --> 00:19:18.860
And it's not really important to
look at all the differences

00:19:18.860 --> 00:19:22.410
too much, but what I want you
guys to notice is they don't

00:19:22.410 --> 00:19:25.370
look like a video tag,
except for this one.

00:19:25.370 --> 00:19:28.250
This is the only one that I feel
like I can interact with,

00:19:28.250 --> 00:19:30.170
that I can actually start
playing a video with.

00:19:30.170 --> 00:19:32.120
OK, well, that's fine.

00:19:32.120 --> 00:19:32.890
That's kind of cool.

00:19:32.890 --> 00:19:35.090
Now, maybe there's something
that we can

00:19:35.090 --> 00:19:36.150
use to improve that.

00:19:36.150 --> 00:19:38.590
Well, there's a poster
attribute.

00:19:38.590 --> 00:19:39.340
So that--

00:19:39.340 --> 00:19:40.790
we can have our custom
poster here.

00:19:40.790 --> 00:19:42.770
And so here's an example.

00:19:42.770 --> 00:19:45.820
But if we look, when we actually
stick this in a page,

00:19:45.820 --> 00:19:48.080
well, sure, this one's
kind of buggy.

00:19:48.080 --> 00:19:49.180
That's fine.

00:19:49.180 --> 00:19:51.120
But it still doesn't look like
a video that we can interact

00:19:51.120 --> 00:19:55.130
with, that we can
really build--

00:19:55.130 --> 00:19:57.710
this is not a good user
experience, because I don't I

00:19:57.710 --> 00:19:59.590
can play these videos yet.

00:19:59.590 --> 00:20:02.430
And so I'm going to have Zoltan
talk about what we can

00:20:02.430 --> 00:20:05.413
do, what we suggest, to improve
that experience.

00:20:05.413 --> 00:20:06.380
ZOLTAN SZEGO: Thanks, Greg.

00:20:06.380 --> 00:20:10.040
So as you've seen, on the poster
attribute, you can

00:20:10.040 --> 00:20:12.470
specify a little picture for
the thumbnail, and it looks

00:20:12.470 --> 00:20:16.200
pretty much different on each
device, each browser.

00:20:16.200 --> 00:20:18.780
In other words, they might
stretch the image to the

00:20:18.780 --> 00:20:22.960
dimensions of the video tag
or they might scale it

00:20:22.960 --> 00:20:25.210
proportionally the original
image size.

00:20:25.210 --> 00:20:27.802
May or may not put a
play icon on it.

00:20:27.802 --> 00:20:29.590
So it's very inconsistent.

00:20:29.590 --> 00:20:34.030
So what can we do to
improve the looks?

00:20:34.030 --> 00:20:36.660
Well, one thing that you
can do is just not use

00:20:36.660 --> 00:20:38.200
the poster at all.

00:20:38.200 --> 00:20:41.340
And we do that at YouTube
at the mobile web site.

00:20:41.340 --> 00:20:43.650
Just render your own thumbnail
with image.

00:20:43.650 --> 00:20:46.310
You can use your own play
button to put in there.

00:20:46.310 --> 00:20:46.870
It looks great.

00:20:46.870 --> 00:20:48.820
It looks consistent
on each platform.

00:20:48.820 --> 00:20:50.990
And when the user clicks on it,
it can go play the video.

00:20:53.810 --> 00:20:55.630
That's pretty much
a good solution.

00:20:55.630 --> 00:20:57.310
We can't do anything about it.

00:20:57.310 --> 00:20:59.280
The platforms are
too different.

00:20:59.280 --> 00:21:02.890
So we can do it this way.

00:21:02.890 --> 00:21:06.190
So one interesting thing to look
at is how do the videos

00:21:06.190 --> 00:21:07.130
actually play back?

00:21:07.130 --> 00:21:12.280
What happens when you click on
a video to start playing it?

00:21:12.280 --> 00:21:16.250
And there's two big classes
of devices out there--

00:21:16.250 --> 00:21:18.710
those that support playback
inline in the page.

00:21:18.710 --> 00:21:20.110
This is what you're
most familiar with

00:21:20.110 --> 00:21:21.210
from desktop browsers.

00:21:21.210 --> 00:21:24.900
The video's right there
inside your website.

00:21:24.900 --> 00:21:28.340
The iPad does this and newer
Androids can handle this.

00:21:28.340 --> 00:21:30.490
And there's another big class,
and it's very interesting to

00:21:30.490 --> 00:21:33.225
talk about, because there's a
lot of phones, mostly iPhone

00:21:33.225 --> 00:21:36.000
and iOS, which doesn't
do that.

00:21:36.000 --> 00:21:38.510
It goes fullscreen all the
time, no matter what.

00:21:38.510 --> 00:21:42.340
It doesn't support inline
playback, unless you're in a

00:21:42.340 --> 00:21:44.070
web view in an app.

00:21:44.070 --> 00:21:47.190
And so far, in general, that's
not the case, so we have to

00:21:47.190 --> 00:21:48.580
deal with it.

00:21:48.580 --> 00:21:52.010
So let's see what we
can do about that.

00:21:52.010 --> 00:21:53.410
Let's see the good
parts first.

00:21:53.410 --> 00:21:57.970
So video playback does work.

00:21:57.970 --> 00:21:59.550
The video goes fullscreen,
which is great.

00:21:59.550 --> 00:22:01.470
We don't have to worry
about the UI.

00:22:01.470 --> 00:22:03.350
In fact, we don't have
to worry about the

00:22:03.350 --> 00:22:04.460
video element at all.

00:22:04.460 --> 00:22:05.770
It can be anywhere
on the page.

00:22:05.770 --> 00:22:07.140
It can be anywhere in the DOM.

00:22:07.140 --> 00:22:10.640
It can be super tiny, 1x1
pixel, offscreen.

00:22:10.640 --> 00:22:11.440
It doesn't matter.

00:22:11.440 --> 00:22:14.700
As long as it's non-display and
none of it's visible, the

00:22:14.700 --> 00:22:18.440
phone will play it,
no problem.

00:22:18.440 --> 00:22:20.570
There's also a very cool
zoom animation

00:22:20.570 --> 00:22:22.310
that the iPhone does.

00:22:22.310 --> 00:22:25.350
From the position of the video
tag, it goes fullscreen.

00:22:25.350 --> 00:22:27.570
So if you put it kind of in the
middle, that looks pretty

00:22:27.570 --> 00:22:31.210
cool when you go and hit play.

00:22:31.210 --> 00:22:34.890
Also, on WebKit browsers in
general, it has really good

00:22:34.890 --> 00:22:36.270
interaction with the rest
of your website.

00:22:36.270 --> 00:22:39.610
Just like you would expect on a
normal desktop browser, all

00:22:39.610 --> 00:22:41.750
the events happen as
you would expect.

00:22:41.750 --> 00:22:46.900
Timeupdates, uplink, pause,
fullscreen, exit fullscreen.

00:22:46.900 --> 00:22:48.940
You can change the website in
the background while your

00:22:48.940 --> 00:22:51.000
video is actually full screen.

00:22:51.000 --> 00:22:51.690
So that's pretty good.

00:22:51.690 --> 00:22:55.380
You can keep track of what's
happening during playback and

00:22:55.380 --> 00:22:57.920
get a really good interactive
experience.

00:22:57.920 --> 00:23:00.250
But there are some caveats that
you have to think about.

00:23:00.250 --> 00:23:03.820
One thing is that it is native
controls only, and the OS or

00:23:03.820 --> 00:23:05.330
the browser provides
the controls.

00:23:05.330 --> 00:23:06.580
No way to change that.

00:23:09.180 --> 00:23:11.720
You cannot do overlays
on the video.

00:23:11.720 --> 00:23:15.040
So if you'd like to do captions
or something else,

00:23:15.040 --> 00:23:18.735
unfortunately, that
doesn't work.

00:23:18.735 --> 00:23:19.180
Yeah.

00:23:19.180 --> 00:23:21.230
That's pretty much it.

00:23:21.230 --> 00:23:25.780
So about controls, Greg has a
lot more interesting stuff.

00:23:25.780 --> 00:23:26.260
GREG SCHECHTER: So right.

00:23:26.260 --> 00:23:30.270
So once you've gotten your
video playing, the next

00:23:30.270 --> 00:23:32.630
obvious thing is to add
some controls to it.

00:23:32.630 --> 00:23:36.300
So the browser gives us native
controls with a simple

00:23:36.300 --> 00:23:37.270
attribute like that.

00:23:37.270 --> 00:23:41.540
So we can see, here is the
Chrome ones, and if you scroll

00:23:41.540 --> 00:23:44.770
down again, I've got screenshots
of all them.

00:23:44.770 --> 00:23:48.850
And each of them are
a little different.

00:23:48.850 --> 00:23:51.850
And that's really all you
need to take from that.

00:23:51.850 --> 00:23:54.240
So what I want to do
here is call out--

00:23:54.240 --> 00:23:57.550
this is a table of the different
support we have.

00:23:57.550 --> 00:23:59.370
And the top row here
is all green.

00:23:59.370 --> 00:24:01.950
That's for the Play
and Pause button.

00:24:01.950 --> 00:24:03.290
And the Seek bar.

00:24:03.290 --> 00:24:04.830
All these controls have
these two features.

00:24:04.830 --> 00:24:06.350
So this is something
to keep in mind.

00:24:06.350 --> 00:24:07.420
The other ones--

00:24:07.420 --> 00:24:08.620
some people feel
it's important.

00:24:08.620 --> 00:24:11.630
Some browsers feel it's not.

00:24:11.630 --> 00:24:15.350
So now, let's think about
building custom controls.

00:24:15.350 --> 00:24:16.520
Now why might you want to build

00:24:16.520 --> 00:24:18.170
your own custom controls?

00:24:18.170 --> 00:24:20.850
Well, you want to preserve
your brand.

00:24:20.850 --> 00:24:23.080
It's very important at YouTube
that everybody, when you're

00:24:23.080 --> 00:24:25.040
watching a video, you know
it's a YouTube video.

00:24:25.040 --> 00:24:26.690
We have a certain
look and feel.

00:24:26.690 --> 00:24:30.470
We have that nice red Play
button that people recognize,

00:24:30.470 --> 00:24:32.060
and it helps preserve our
brand across the site.

00:24:32.060 --> 00:24:33.380
So that's one reason.

00:24:33.380 --> 00:24:35.490
And granted, you could do that
with just the queue state as

00:24:35.490 --> 00:24:39.050
well, as we talked about
earlier, with that thumbnail

00:24:39.050 --> 00:24:40.270
ahead of time.

00:24:40.270 --> 00:24:42.100
But also, you can unify
your experience

00:24:42.100 --> 00:24:42.930
across all these platforms.

00:24:42.930 --> 00:24:44.440
They all interact a little
bit differently.

00:24:44.440 --> 00:24:45.830
They look a little
bit different.

00:24:45.830 --> 00:24:48.300
You can make sure that when
somebody comes, and they're

00:24:48.300 --> 00:24:50.200
watching a video of yours,
they know how to

00:24:50.200 --> 00:24:50.740
interact with it.

00:24:50.740 --> 00:24:52.420
They know what to expect.

00:24:52.420 --> 00:24:55.120
So I built a little
demonstration here.

00:24:55.120 --> 00:24:57.710
Now, these buttons are
kind of small.

00:24:57.710 --> 00:25:01.040
Now let's imagine we might be
using our fingers, so be sure

00:25:01.040 --> 00:25:02.430
to make them a little bigger.

00:25:02.430 --> 00:25:05.850
And I got a nice Play
button here.

00:25:05.850 --> 00:25:07.480
This video will play.

00:25:07.480 --> 00:25:09.720
How lovely.

00:25:09.720 --> 00:25:12.450
And I can seek around in
the video just fine.

00:25:12.450 --> 00:25:14.110
Now imagine--

00:25:14.110 --> 00:25:16.720
now, one thing I want
to show you--

00:25:16.720 --> 00:25:18.740
it's a new feature that we're
going to be experimenting with

00:25:18.740 --> 00:25:21.770
on YouTube, so this is
the debut of it.

00:25:21.770 --> 00:25:22.810
It's this button here.

00:25:22.810 --> 00:25:25.250
Let's say you're watching, and
you're like, I need more cats.

00:25:25.250 --> 00:25:29.030
So this is the Kitty Time button
right here, and that

00:25:29.030 --> 00:25:31.430
will give you a cat to
complement your viewing

00:25:31.430 --> 00:25:32.290
experience.

00:25:32.290 --> 00:25:35.100
And if I hit Play, you
can still hear the

00:25:35.100 --> 00:25:35.880
sound behind it.

00:25:35.880 --> 00:25:40.010
So it's sort of an immersive
cat experience.

00:25:40.010 --> 00:25:43.320
Now you might laugh at that, you
know, why am I going to be

00:25:43.320 --> 00:25:45.790
using cats, but I'm doing it
to demonstrate a point.

00:25:45.790 --> 00:25:47.900
It allows you, with custom
controls, that you

00:25:47.900 --> 00:25:49.590
can expand that set.

00:25:49.590 --> 00:25:51.630
You can expand your feature
set by doing these things.

00:25:51.630 --> 00:25:53.740
And so at YouTube, we have
annotations, and playlists,

00:25:53.740 --> 00:25:56.790
and captions, and more features
that we can add by

00:25:56.790 --> 00:25:58.250
having these custom controls.

00:25:58.250 --> 00:25:59.870
So that's something that you
want to think about when

00:25:59.870 --> 00:26:03.070
building a video application.

00:26:03.070 --> 00:26:04.670
So now, what are the
Pro Tips for

00:26:04.670 --> 00:26:06.460
building your own controls?

00:26:06.460 --> 00:26:07.740
First thing--

00:26:07.740 --> 00:26:10.020
users are going to be able
to expect to drag

00:26:10.020 --> 00:26:11.370
that progress bar.

00:26:11.370 --> 00:26:18.210
This doesn't happen with all
the interactions for the

00:26:18.210 --> 00:26:18.800
native control.

00:26:18.800 --> 00:26:24.370
So remember that you have to
prevent the scroll, which is

00:26:24.370 --> 00:26:27.900
the default browser behavior
with touchstart.

00:26:27.900 --> 00:26:30.080
Volume can actually get
set on all the phones.

00:26:30.080 --> 00:26:32.360
Not all the browsers will
allow you to do it.

00:26:32.360 --> 00:26:33.550
And people are used to
using the harder

00:26:33.550 --> 00:26:34.660
buttons to control devices.

00:26:34.660 --> 00:26:36.600
So don't waste your
time on that.

00:26:36.600 --> 00:26:40.020
You don't need to build
a UI to do volume.

00:26:40.020 --> 00:26:40.990
Maybe Mute.

00:26:40.990 --> 00:26:41.730
Mute is--

00:26:41.730 --> 00:26:42.650
we're not quite sure.

00:26:42.650 --> 00:26:47.210
You do have the ability to do
that, but certainly not a

00:26:47.210 --> 00:26:49.080
whole volume [? flare. ?]

00:26:49.080 --> 00:26:52.150
And remember people's fingers
are fat, so we recommend that

00:26:52.150 --> 00:26:54.120
you make sure that your buttons
are big enough and

00:26:54.120 --> 00:26:56.140
spaced out enough that people
can click on them and

00:26:56.140 --> 00:26:57.170
interact with them.

00:26:57.170 --> 00:26:59.650
And also, because you're
probably going to be sharing

00:26:59.650 --> 00:27:02.740
these things with your desktop
applications and your mobile

00:27:02.740 --> 00:27:04.490
applications, you
can use SVGs.

00:27:04.490 --> 00:27:08.540
And this way, your icons can
scale, so you don't have to be

00:27:08.540 --> 00:27:13.270
making new images for both your
mobile version and your

00:27:13.270 --> 00:27:15.900
desktop version.

00:27:15.900 --> 00:27:16.410
.

00:27:16.410 --> 00:27:19.040
Certainly, I can hover my finger
on top of my phone, but

00:27:19.040 --> 00:27:20.800
the browser is not going
to know that.

00:27:20.800 --> 00:27:22.910
So don't trigger content
with hover.

00:27:22.910 --> 00:27:25.730
And the last thing
is fullscreen.

00:27:25.730 --> 00:27:28.140
The browsing context is sort
of always in fullscreen, so

00:27:28.140 --> 00:27:29.720
you can kind of fake
it a little bit.

00:27:29.720 --> 00:27:32.840
But I'll let Zoltan dive a
little bit deeper and talk

00:27:32.840 --> 00:27:35.280
about what that means and what
our options are today.

00:27:35.280 --> 00:27:35.630
ZOLTAN SZEGO: Sure.

00:27:35.630 --> 00:27:38.090
So if you have a video, it's
a great thing to look at in

00:27:38.090 --> 00:27:39.470
fullscreen on the phone.

00:27:39.470 --> 00:27:41.210
It's really more immersive.

00:27:41.210 --> 00:27:44.320
So what can we do about that?

00:27:44.320 --> 00:27:47.650
Well, there's this HTML5
fullscreen API that's kind of

00:27:47.650 --> 00:27:50.090
getting standardized,
or in the process.

00:27:50.090 --> 00:27:52.730
Unfortunately, it's not really
available on any of the

00:27:52.730 --> 00:27:54.300
mainstream mobile browsers.

00:27:54.300 --> 00:27:57.210
I think Firefox was the
first to get support.

00:27:57.210 --> 00:27:57.480
GREG SCHECHTER: Right.

00:27:57.480 --> 00:27:59.800
So Firefox added support on
their stable branch, I

00:27:59.800 --> 00:28:00.883
believe, yesterday.

00:28:00.883 --> 00:28:01.810
ZOLTAN SZEGO: Yeah.

00:28:01.810 --> 00:28:05.710
So it's just starting to get
right, and all the devices out

00:28:05.710 --> 00:28:07.300
there right now can use this.

00:28:07.300 --> 00:28:09.410
Unfortunately, it would be
really nice to have it,

00:28:09.410 --> 00:28:11.790
because then you could take the
div containing your whole

00:28:11.790 --> 00:28:14.410
player-- like the little demo
that Greg had earlier with the

00:28:14.410 --> 00:28:15.180
cat button--

00:28:15.180 --> 00:28:17.600
you could take all of that
fullscreen with all the

00:28:17.600 --> 00:28:19.815
controls and overlays
and everything.

00:28:19.815 --> 00:28:22.930
And unfortunately we can't
do that at the moment.

00:28:22.930 --> 00:28:25.360
So what can we do?

00:28:25.360 --> 00:28:26.610
Well, we can fake it.

00:28:31.330 --> 00:28:32.180
Yes.

00:28:32.180 --> 00:28:34.200
So isn't mobile already
fullscreen?

00:28:34.200 --> 00:28:35.750
Well, the browser is.

00:28:35.750 --> 00:28:37.830
So what we can do about it is
take the video as fullscreen

00:28:37.830 --> 00:28:41.240
as it will go, which is the
extent of the browser minus

00:28:41.240 --> 00:28:44.300
the browser Chrome.

00:28:44.300 --> 00:28:46.000
So one thing you can do if--

00:28:46.000 --> 00:28:48.230
for example, we do this in
YouTube embeds, is just open a

00:28:48.230 --> 00:28:51.630
new tab with just the embedded
video running fullscreen.

00:28:51.630 --> 00:28:54.350
In that case, since the
dimensions of the screen

00:28:54.350 --> 00:28:57.650
change, it's a good idea to rely
on the device width if

00:28:57.650 --> 00:29:00.460
you're sizing your controls and
pixels, to make sure that

00:29:00.460 --> 00:29:03.980
things still look proportional
and big enough to click on.

00:29:03.980 --> 00:29:08.040
Another thing you can do is
there's this API, separate

00:29:08.040 --> 00:29:10.090
from the HTML5 fullscreen
API, called

00:29:10.090 --> 00:29:12.740
webkitRequestFullscreen.

00:29:12.740 --> 00:29:16.340
It's a method on
the video tag.

00:29:16.340 --> 00:29:17.860
I'm sorry,
webkitEnterFullscreen.

00:29:17.860 --> 00:29:19.730
It's only available on WebKit.

00:29:19.730 --> 00:29:22.320
And what is does is it takes
the video fullscreen, just

00:29:22.320 --> 00:29:25.320
like it would have gone if the
user clicked on the native

00:29:25.320 --> 00:29:27.000
fullscreen button.

00:29:27.000 --> 00:29:30.110
It goes fullscreen with native
controls, with all the usual

00:29:30.110 --> 00:29:33.030
caveats that applied in
the previous part.

00:29:33.030 --> 00:29:36.050
So this works great on
an iPad, for example.

00:29:36.050 --> 00:29:37.930
There's a couple of restrictions
on when this API

00:29:37.930 --> 00:29:38.660
can be called.

00:29:38.660 --> 00:29:42.620
The video has to be loaded
already, and it needs a click

00:29:42.620 --> 00:29:47.950
event to function, for various
security reasons.

00:29:47.950 --> 00:29:50.740
And so speaking of click events,
autoplay is another

00:29:50.740 --> 00:29:52.580
fun thing to talk about.

00:29:52.580 --> 00:29:54.860
So yeah, we have videos, and
we would definitely like to

00:29:54.860 --> 00:29:58.660
play them as soon as the user
gets to their website.

00:29:58.660 --> 00:30:01.990
So unfortunately,
it doesn't work.

00:30:01.990 --> 00:30:04.520
What you get is a video with
a Play button and it's not

00:30:04.520 --> 00:30:05.070
autoplaying.

00:30:05.070 --> 00:30:05.590
So why?

00:30:05.590 --> 00:30:08.210
What's happening here?

00:30:08.210 --> 00:30:11.320
Well the thing is, since mobile
users are usually on a

00:30:11.320 --> 00:30:14.400
3G connection or any kind of
mobile connection, it might

00:30:14.400 --> 00:30:15.250
not be unlimited.

00:30:15.250 --> 00:30:17.010
It might be metered.

00:30:17.010 --> 00:30:18.760
They have a quota or they're
paying for it.

00:30:18.760 --> 00:30:23.610
So in the decision, there
are pro and contra or

00:30:23.610 --> 00:30:25.010
against both sides.

00:30:25.010 --> 00:30:29.400
But Apple was the first to
decide that they're not going

00:30:29.400 --> 00:30:33.680
to allow autoplaying on
videos in general.

00:30:33.680 --> 00:30:36.150
Which devices have
this restriction?

00:30:36.150 --> 00:30:37.740
Safari and iOS.

00:30:37.740 --> 00:30:41.250
And actually, the other
mainstream browsers are

00:30:41.250 --> 00:30:42.030
following suit.

00:30:42.030 --> 00:30:45.430
So Android browser is
introducing this in 4 point

00:30:45.430 --> 00:30:50.210
something onwards, as is
Chrome on Android.

00:30:50.210 --> 00:30:52.710
So it's another thing that we
have to deal with in mobile

00:30:52.710 --> 00:30:53.870
development.

00:30:53.870 --> 00:30:56.350
So what can we do about this?

00:30:56.350 --> 00:30:59.500
Well first let's check all
the other browsers.

00:30:59.500 --> 00:31:01.860
Firefox and Opera
do support it.

00:31:01.860 --> 00:31:04.910
And none of the mainstream
browsers do, and if they do,

00:31:04.910 --> 00:31:05.600
it's going away.

00:31:05.600 --> 00:31:07.900
So it's best not to count
on being able

00:31:07.900 --> 00:31:11.090
to autoplay a video.

00:31:11.090 --> 00:31:13.820
So the next best thing we can
do is actually have the user

00:31:13.820 --> 00:31:16.680
signal their intent to play by
clicking on the video, and we

00:31:16.680 --> 00:31:18.780
can start playing there.

00:31:18.780 --> 00:31:21.060
And the way it works is, in its
simplest form, just hook

00:31:21.060 --> 00:31:22.930
it right up in the
event handler--

00:31:22.930 --> 00:31:26.330
on click event, play
the video.

00:31:26.330 --> 00:31:30.400
So in our case, the logic is a
little more complex than it

00:31:30.400 --> 00:31:32.620
might be for your website.

00:31:32.620 --> 00:31:35.160
So for YouTube, for example, in
embeds, it loads the embed

00:31:35.160 --> 00:31:38.140
first, but it doesn't have the
video URL, and it has to go

00:31:38.140 --> 00:31:42.280
and fetch all that data, get a
bunch of metadata, make some

00:31:42.280 --> 00:31:44.350
decisions, and see if it's OK.

00:31:44.350 --> 00:31:48.610
So when we get the video URL,
it's an Ajax response, which

00:31:48.610 --> 00:31:51.070
is not a click handler.

00:31:51.070 --> 00:31:54.580
So we can't play the video,
and that's too bad.

00:31:54.580 --> 00:31:58.320
There is a trick to
get this to work.

00:31:58.320 --> 00:31:59.830
We have a bit of code.

00:31:59.830 --> 00:32:03.000
The function on top runs when
the user clicks, and the one

00:32:03.000 --> 00:32:06.750
on bottom runs when the
Ajax request returns.

00:32:06.750 --> 00:32:10.020
And so on top, I'd like you to
look at this line that says

00:32:10.020 --> 00:32:11.560
video tag at load.

00:32:11.560 --> 00:32:14.020
What this does is it calls load
on an empty initialized

00:32:14.020 --> 00:32:17.540
video tag, which does absolutely
nothing visible.

00:32:17.540 --> 00:32:22.350
What it does do is mark the
video tag as user-interacted.

00:32:22.350 --> 00:32:24.825
So if you keep that object
around or that tag around in

00:32:24.825 --> 00:32:27.170
the DOM, that guy
is good to go.

00:32:27.170 --> 00:32:28.770
It can play videos later on.

00:32:28.770 --> 00:32:32.750
And so when you have Ajax
response, just send the source

00:32:32.750 --> 00:32:38.710
and call play, and it
is going to work.

00:32:38.710 --> 00:32:39.740
And this is actually--

00:32:39.740 --> 00:32:41.170
it works in iOS.

00:32:41.170 --> 00:32:44.050
And also, the newer Android
browsers, which introduced the

00:32:44.050 --> 00:32:46.760
restriction, also work
like this, as

00:32:46.760 --> 00:32:48.570
does Chrome on Android.

00:32:48.570 --> 00:32:50.785
So it's not part of the
standard, but it's a hack that

00:32:50.785 --> 00:32:52.410
you can use.

00:32:52.410 --> 00:32:57.020
Another thing here is calling
play in Android and the Ajax

00:32:57.020 --> 00:32:59.790
response handler doesn't work.

00:32:59.790 --> 00:33:01.480
So what can we do about that?

00:33:01.480 --> 00:33:04.650
Apparently it's some kind of
issue with the browser.

00:33:04.650 --> 00:33:07.610
What we can do is take the
play command out of the

00:33:07.610 --> 00:33:11.540
current thread of execution with
a zero-second timeout.

00:33:11.540 --> 00:33:13.540
And this is a good
tip in general.

00:33:13.540 --> 00:33:15.920
If something multimedia-related
is kind of

00:33:15.920 --> 00:33:18.470
wonky in the browser and it
doesn't work, this is a good

00:33:18.470 --> 00:33:21.490
thing to try, try to
do it in a timeout.

00:33:21.490 --> 00:33:24.510
Often it actually helps and
things start working again.

00:33:24.510 --> 00:33:27.160
These are the types of browser
quirks that we have to deal

00:33:27.160 --> 00:33:29.600
with day to day.

00:33:29.600 --> 00:33:31.660
GREG SCHECHTER: So now let's
talk about embeds.

00:33:31.660 --> 00:33:33.980
This stuff is not specific
to mobile, although it

00:33:33.980 --> 00:33:35.590
does work there too.

00:33:35.590 --> 00:33:37.710
So one of the things, like,
after you build a video

00:33:37.710 --> 00:33:40.340
application, and your build
[INAUDIBLE], sometimes it's

00:33:40.340 --> 00:33:43.250
important for you make sure that
your content can be on

00:33:43.250 --> 00:33:44.720
other people's websites.

00:33:44.720 --> 00:33:46.220
So at YouTube, this is very
important for us.

00:33:46.220 --> 00:33:49.180
A lot of people depend on
YouTube embeds, and it really

00:33:49.180 --> 00:33:52.090
enhances their experience.

00:33:52.090 --> 00:33:52.800
So this is great.

00:33:52.800 --> 00:33:54.980
So embeds are important to us.

00:33:54.980 --> 00:33:56.850
So what can you do?

00:33:56.850 --> 00:33:59.060
So the first thing when people
think about embedding content

00:33:59.060 --> 00:34:00.570
is they think of a script tag.

00:34:00.570 --> 00:34:03.760
And this, in most cases,
is usually fine.

00:34:03.760 --> 00:34:07.030
But at YouTube, we're more
than just a video tag.

00:34:07.030 --> 00:34:07.939
We're a whole video player.

00:34:07.939 --> 00:34:12.719
And we can't have the user's CSS
and JavaScript interacting

00:34:12.719 --> 00:34:15.520
with our player, possibly
changing

00:34:15.520 --> 00:34:16.880
the styling of things.

00:34:16.880 --> 00:34:19.110
So we need our content
to be sandboxed.

00:34:19.110 --> 00:34:22.600
So script tag doesn't really
work well for us.

00:34:22.600 --> 00:34:24.610
Now, we could use
an object tag.

00:34:24.610 --> 00:34:28.110
And for our Flash player, that
worked great for many years.

00:34:28.110 --> 00:34:33.159
We were able to load in a full
HTML page in it, and the user

00:34:33.159 --> 00:34:34.199
can interact with it.

00:34:34.199 --> 00:34:36.889
But the problem was, you can't
interact with it through

00:34:36.889 --> 00:34:37.830
JavaScript.

00:34:37.830 --> 00:34:40.900
And we have an API that a lot of
people depend on, a lot of

00:34:40.900 --> 00:34:41.900
developers depend on.

00:34:41.900 --> 00:34:45.250
So that wasn't really an
option for us either.

00:34:45.250 --> 00:34:46.639
So last, we have an iFrame.

00:34:46.639 --> 00:34:49.550
The iFrame is a great solution,
because our content

00:34:49.550 --> 00:34:52.239
is sandboxed, and we would
have JavaScript-API

00:34:52.239 --> 00:34:55.500
communication through something
called postMessage.

00:34:55.500 --> 00:34:57.030
So this is great.

00:34:57.030 --> 00:34:58.750
We were able to build that.

00:34:58.750 --> 00:35:01.680
And so it looks something
like that.

00:35:01.680 --> 00:35:03.620
It's pretty simple.

00:35:03.620 --> 00:35:06.960
You just have the video ID
there for your embed.

00:35:06.960 --> 00:35:10.710
And one thing I want
to call out here is

00:35:10.710 --> 00:35:13.120
that line right there.

00:35:13.120 --> 00:35:15.200
Now, we talked about fullscreen
a little bit

00:35:15.200 --> 00:35:17.850
earlier and how there was
requestFullScreen API.

00:35:17.850 --> 00:35:21.280
Now today, this does
absolutely nothing.

00:35:21.280 --> 00:35:25.350
But the hope is, once those
standards are finalized, that

00:35:25.350 --> 00:35:27.020
this will allow us to get
fullscreen access.

00:35:27.020 --> 00:35:28.500
So why do we have it here now?

00:35:28.500 --> 00:35:31.650
Why is that there if
it does nothing?

00:35:31.650 --> 00:35:33.910
And that's because our embeds,
when they go out into the

00:35:33.910 --> 00:35:37.260
wild, they're going to stay
there for a long time.

00:35:37.260 --> 00:35:41.580
We've had our iFrame embed
as our default embedding

00:35:41.580 --> 00:35:44.580
experience for almost two years
now, and it still has

00:35:44.580 --> 00:35:48.330
less playbacks and impressions
than our old Flash embeds do.

00:35:48.330 --> 00:35:51.030
Most people still use
that on the web.

00:35:51.030 --> 00:35:53.490
So when you think about these
things, it's very important

00:35:53.490 --> 00:35:56.400
that you plan for the
future if you can.

00:35:56.400 --> 00:35:58.520
Realize where things
are going to go.

00:35:58.520 --> 00:36:02.470
When you send something out to
the web, it's going to stay

00:36:02.470 --> 00:36:03.240
there for a long time.

00:36:03.240 --> 00:36:05.650
So plan for it.

00:36:05.650 --> 00:36:07.870
So pro tips, if you're going
to do an iFrame for

00:36:07.870 --> 00:36:08.750
embedding--

00:36:08.750 --> 00:36:11.010
very simple CSS trick
right here.

00:36:11.010 --> 00:36:13.740
Make sure that you put overflow:
hidden on your HTML.

00:36:13.740 --> 00:36:16.840
IOS has some issues with
resizing and stuff, so this

00:36:16.840 --> 00:36:19.670
will save you a lot of hassle,
a lot of trouble.

00:36:19.670 --> 00:36:22.310
The next thing that we recommend
you do is on your

00:36:22.310 --> 00:36:26.460
body tag, make sure you stretch
it out 100% width and

00:36:26.460 --> 00:36:28.370
height and you change the
background color.

00:36:28.370 --> 00:36:30.940
For us, we want a black
background color.

00:36:30.940 --> 00:36:33.380
For your application, it might
make more sense for it to be a

00:36:33.380 --> 00:36:34.760
different color.

00:36:34.760 --> 00:36:41.540
And this way, if somebody starts
resizing that iFrame,

00:36:41.540 --> 00:36:44.690
then you make sure that your
background stays the same and

00:36:44.690 --> 00:36:47.110
you're not having redraw issues
where they can see

00:36:47.110 --> 00:36:48.910
through the white on the back.

00:36:48.910 --> 00:36:50.990
So this is just something
useful that we have.

00:36:50.990 --> 00:36:54.630
And the last thing here is we
recommend that you get rid of

00:36:54.630 --> 00:36:55.920
the tap highlight color.

00:36:55.920 --> 00:36:58.110
Now for some use cases,
this is great.

00:36:58.110 --> 00:37:00.320
But at YouTube with our Play
button, when you click on it,

00:37:00.320 --> 00:37:02.450
there is a visual feedback
that you get.

00:37:02.450 --> 00:37:05.090
I can see that the Loading
icon started spinning.

00:37:05.090 --> 00:37:07.040
I know that I clicked on
that video player.

00:37:07.040 --> 00:37:09.420
I don't need the whole thing
to be highlighted as well,

00:37:09.420 --> 00:37:11.930
which is kind of weird and
looks kind of sloppy.

00:37:11.930 --> 00:37:13.920
So if you have a visual feedback
when they click on

00:37:13.920 --> 00:37:16.470
it, you don't need that
highlight there.

00:37:16.470 --> 00:37:18.810
And with that, I'll hand
it back to Zoltan.

00:37:18.810 --> 00:37:19.580
ZOLTAN SZEGO: Thanks.

00:37:19.580 --> 00:37:24.500
So the last part of the HTML5
features that we have is

00:37:24.500 --> 00:37:25.490
offline and storage.

00:37:25.490 --> 00:37:28.080
And this is most applicable
to mobile.

00:37:28.080 --> 00:37:30.350
The two big ones that we use
at YouTube are localStorage

00:37:30.350 --> 00:37:31.860
and Appcache.

00:37:31.860 --> 00:37:32.960
LocalStorage is great.

00:37:32.960 --> 00:37:36.810
You can use it to store one-off
small bits of data,

00:37:36.810 --> 00:37:38.990
cache some small things.

00:37:38.990 --> 00:37:40.350
We do use that a lot.

00:37:40.350 --> 00:37:43.360
But I want to talk about this
time around is Appcache.

00:37:43.360 --> 00:37:44.200
So it's very interesting.

00:37:44.200 --> 00:37:49.710
So Appcache is this way to cache
the entire website for

00:37:49.710 --> 00:37:51.030
offline access.

00:37:51.030 --> 00:37:54.310
So YouTube is a website that
plays videos from the cloud,

00:37:54.310 --> 00:37:58.460
so isn't it kind of worthless
to cache something offline?

00:37:58.460 --> 00:38:00.902
Well, yes and no.

00:38:00.902 --> 00:38:05.360
What Appcache does do is save
us the download time for the

00:38:05.360 --> 00:38:09.380
actual code for the website.

00:38:09.380 --> 00:38:12.350
On mobile, you pay for code
size twice, generally--

00:38:12.350 --> 00:38:15.530
once for the download and
once for parsing and

00:38:15.530 --> 00:38:17.570
evaluating the script.

00:38:17.570 --> 00:38:20.060
On newer devices, it's not
really that big of an issue,

00:38:20.060 --> 00:38:23.080
but on older iPhones, it took
seriously measurable time to

00:38:23.080 --> 00:38:25.330
actually parse the script.

00:38:25.330 --> 00:38:27.560
So large bits of code
were pretty bad.

00:38:27.560 --> 00:38:30.540
So at least with Appcache, you
can save the download part,

00:38:30.540 --> 00:38:32.500
and that's just great
for latency and for

00:38:32.500 --> 00:38:34.870
the users in general.

00:38:34.870 --> 00:38:37.450
So let's see how this works.

00:38:37.450 --> 00:38:42.386
So here's a very simple
example HTML file.

00:38:42.386 --> 00:38:44.860
What I want to call out is
the manifest up top.

00:38:44.860 --> 00:38:47.760
Manifest is basically a text
file that lists all the

00:38:47.760 --> 00:38:49.910
resources on the website.

00:38:49.910 --> 00:38:54.360
So for example, here we have a
script file and a style sheet.

00:38:54.360 --> 00:38:56.890
And so our manifest file would
look something like this.

00:38:56.890 --> 00:39:00.350
It's just cached the script
in the style sheet.

00:39:00.350 --> 00:39:02.810
You can also specify some files
that you always want to

00:39:02.810 --> 00:39:04.720
load off of the network
and never cache.

00:39:04.720 --> 00:39:07.120
In this case, this image
is always going to

00:39:07.120 --> 00:39:09.410
come from the network.

00:39:09.410 --> 00:39:10.100
So that's great.

00:39:10.100 --> 00:39:14.360
You have an Appcache, and your
users are happily browsing

00:39:14.360 --> 00:39:16.720
with their own copy
of the website.

00:39:16.720 --> 00:39:18.990
But the next week you
push the latest and

00:39:18.990 --> 00:39:19.910
greatest new version.

00:39:19.910 --> 00:39:22.450
So how can you get the users
to get a new version

00:39:22.450 --> 00:39:24.740
downloaded?

00:39:24.740 --> 00:39:27.910
So in Appcache, the state
of the web site

00:39:27.910 --> 00:39:29.020
is tied to the manifest.

00:39:29.020 --> 00:39:30.690
So if the manifest changes,
the website

00:39:30.690 --> 00:39:32.210
is considered changed.

00:39:32.210 --> 00:39:34.770
So one thing you can do is just
stick a comment right

00:39:34.770 --> 00:39:38.090
there at the bottom with some
kind of build ID or timestamp.

00:39:38.090 --> 00:39:40.640
I use the date as the
example here.

00:39:40.640 --> 00:39:44.260
And when you push a new version,
you can update that,

00:39:44.260 --> 00:39:48.855
and the phones might
check later on and

00:39:48.855 --> 00:39:50.630
download the new code.

00:39:50.630 --> 00:39:52.640
How can we make them
do it sooner?

00:39:52.640 --> 00:39:54.830
Let's assume that your website
is communicating with some

00:39:54.830 --> 00:39:56.370
server over Ajax.

00:39:56.370 --> 00:39:59.360
What you can do is just stick
the latest timestamp in your

00:39:59.360 --> 00:40:00.370
Ajax response.

00:40:00.370 --> 00:40:03.730
And then in your code, which
knows about its previous build

00:40:03.730 --> 00:40:06.800
ID or timestamp, it can check
if it's newer and just go

00:40:06.800 --> 00:40:09.910
ahead and initiate the
update process.

00:40:09.910 --> 00:40:11.880
There's this update API here.

00:40:11.880 --> 00:40:13.240
It's a little more involved,
actually.

00:40:13.240 --> 00:40:15.790
There's a couple of function
calls, like swap out the old

00:40:15.790 --> 00:40:17.760
version and new version.

00:40:17.760 --> 00:40:20.110
But this is the gist of it.

00:40:20.110 --> 00:40:24.140
That said, Appcache has
a lot of gotchas.

00:40:24.140 --> 00:40:26.840
One thing is that the files that
you specify to be cached

00:40:26.840 --> 00:40:29.390
cannot have any GET
parameters.

00:40:29.390 --> 00:40:31.770
They are considered different
files if they do have GET

00:40:31.770 --> 00:40:33.370
parameters.

00:40:33.370 --> 00:40:37.940
Also, some implementations, like
iOS5 and upwards, they

00:40:37.940 --> 00:40:43.130
treat the manifest file as a
very strict list of files and

00:40:43.130 --> 00:40:45.195
refuse to load anything
else unless it's

00:40:45.195 --> 00:40:46.630
listed in the network.

00:40:46.630 --> 00:40:49.570
Since YouTube streams videos
from many different servers,

00:40:49.570 --> 00:40:52.960
we actually had to put a little
wild card there to make

00:40:52.960 --> 00:40:55.450
all the videos come from the
network, no matter what.

00:40:55.450 --> 00:40:58.920
Otherwise, the phone just
refuses to download them.

00:40:58.920 --> 00:41:01.290
Also, the thing with Appcache
is, it's easy to get it wrong

00:41:01.290 --> 00:41:02.270
in a scary way.

00:41:02.270 --> 00:41:04.940
You don't want to have your
users stuck on an old buggy

00:41:04.940 --> 00:41:05.830
version of the code.

00:41:05.830 --> 00:41:08.635
Like if your website crashes,
and there's no way to update

00:41:08.635 --> 00:41:11.870
it, that's very scary.

00:41:11.870 --> 00:41:15.240
Appcache has these copies of the
website, and each manifest

00:41:15.240 --> 00:41:16.420
file is tied to a copy.

00:41:16.420 --> 00:41:19.380
So you can end up with
multiple copies.

00:41:19.380 --> 00:41:24.760
Redirects, close to loading your
web site the first time.

00:41:24.760 --> 00:41:30.140
303s or a history API replace
state that changed the URL can

00:41:30.140 --> 00:41:31.600
fool a phone into thinking--

00:41:31.600 --> 00:41:32.900
or the browser, rather--

00:41:32.900 --> 00:41:36.430
to thinking that it's opened
a different website.

00:41:36.430 --> 00:41:39.890
So it might end up having
the wrong URL cached.

00:41:39.890 --> 00:41:43.080
So just a couple things
to keep an eye on.

00:41:43.080 --> 00:41:44.910
Some implementations
are buggy.

00:41:44.910 --> 00:41:47.990
So it's best to develop
carefully.

00:41:47.990 --> 00:41:49.660
While testing, look
at your log.

00:41:49.660 --> 00:41:51.510
See what files are actually
getting downloaded.

00:41:51.510 --> 00:41:54.350
Don't assume that
it just works.

00:41:54.350 --> 00:41:56.220
Just something to keep in mind
and make sure that your

00:41:56.220 --> 00:42:00.050
website isn't broken
for your users.

00:42:00.050 --> 00:42:02.130
GREG SCHECHTER: So we asked the
question earlier-- is the

00:42:02.130 --> 00:42:02.660
coolness ready?

00:42:02.660 --> 00:42:06.610
And I really think that it is.

00:42:06.610 --> 00:42:10.200
It is ready for you to use, and
you have to start using it

00:42:10.200 --> 00:42:15.140
to compete with these emerging
mobile markets.

00:42:15.140 --> 00:42:17.840
And you know, mobile's today,
but there might be other

00:42:17.840 --> 00:42:18.560
things tomorrow.

00:42:18.560 --> 00:42:22.390
So I want to show you one video,
just to think about

00:42:22.390 --> 00:42:23.740
what we're thinking
about at YouTube.

00:42:23.740 --> 00:42:24.480
What's coming next?

00:42:24.480 --> 00:42:28.130
And so you should think
about this as well.

00:42:28.130 --> 00:42:30.189
I need this video here.

00:42:34.446 --> 00:42:34.930
[VIDEO PLAYBACK STARTS]

00:42:34.930 --> 00:42:36.180
[INTERPOSING VOICES - TWO
INSTANCE OF VIDEO ARE RUNNING]

00:42:41.180 --> 00:42:41.900
[VIDEO PLAYBACK ENDS]

00:42:41.900 --> 00:42:42.160
GREG SCHECHTER: All right.

00:42:42.160 --> 00:42:43.410
There we go.

00:42:47.060 --> 00:42:47.550
[VIDEO PLAYBACK STARTS]

00:42:47.550 --> 00:42:48.380
ANNOUNCER (NARRATING ON VIDEO):
Since our founding in

00:42:48.380 --> 00:42:51.440
2005, we at YouTube have
continually striven to bring

00:42:51.440 --> 00:42:53.980
you the best possible video
experience on the internet.

00:42:53.980 --> 00:42:56.390
But that is all about
to change.

00:42:56.390 --> 00:42:59.050
Our latest innovation gives you
a way to literally hold

00:42:59.050 --> 00:43:00.470
YouTube in your hand.

00:43:00.470 --> 00:43:03.680
Introducing the YouTube
Collection on DVD.

00:43:03.680 --> 00:43:04.610
It's the complete YouTube

00:43:04.610 --> 00:43:07.720
experience, completely offline.

00:43:07.720 --> 00:43:09.960
Enjoying YouTube videos
has never been easier.

00:43:09.960 --> 00:43:12.540
With the YouTube Collection,
DVDs have been conveniently

00:43:12.540 --> 00:43:15.320
organized into a system
of nested modules.

00:43:15.320 --> 00:43:18.060
Simply navigate through the
modules until you find the DVD

00:43:18.060 --> 00:43:19.310
of your choice.

00:43:21.315 --> 00:43:24.520
Each DVD menu is populated
video thumbnails.

00:43:24.520 --> 00:43:26.940
Just like on YouTube.com, you
can select your playback

00:43:26.940 --> 00:43:28.350
resolution.

00:43:28.350 --> 00:43:32.695
And yes, fullscreen mode is
available if desired.

00:43:32.695 --> 00:43:34.920
The YouTube Collection doesn't
require the internet, but you

00:43:34.920 --> 00:43:36.990
don't lose the interactivity.

00:43:36.990 --> 00:43:39.070
Just fill out the comment form
and place it in one of the

00:43:39.070 --> 00:43:42.230
self-addressed stamped
envelopes.

00:43:42.230 --> 00:43:44.260
Don't forget to throw in green
thumbs-up or a red

00:43:44.260 --> 00:43:46.350
thumbs-down.

00:43:46.350 --> 00:43:49.550
Your feedback will be sent
directly to the creator of

00:43:49.550 --> 00:43:54.590
that particular video, so you
can maintain the dialogue that

00:43:54.590 --> 00:43:56.462
you're used to.

00:43:56.462 --> 00:43:59.530
The YouTube Collection isn't
just a sampling of YouTube.

00:43:59.530 --> 00:44:01.090
It's all of YouTube.

00:44:01.090 --> 00:44:03.580
Every YouTube video
uploaded, ever.

00:44:03.580 --> 00:44:06.710
As soon as you sign up, we'll
dispatch a fleet of 175

00:44:06.710 --> 00:44:08.840
YouTube trucks to your home.

00:44:08.840 --> 00:44:11.280
Your nested video modules will
arrive securely shrink-wrapped

00:44:11.280 --> 00:44:14.335
on pre-categorized pallets.

00:44:14.335 --> 00:44:16.770
If you live on a steep grade
or in an area with low

00:44:16.770 --> 00:44:20.300
overpasses, your DVDs will be
delivered by pack mule.

00:44:20.300 --> 00:44:22.790
Since approximately an hour of
video is uploaded to YouTube

00:44:22.790 --> 00:44:25.422
every second, you'll receive
a new truckload every week.

00:44:25.422 --> 00:44:28.600
And if you sign up now, we'll
give the entire DVD library to

00:44:28.600 --> 00:44:32.040
a friend or relative of your
choice, totally free.

00:44:32.040 --> 00:44:34.610
Visit YouTube.com/they
outubecollection.

00:44:34.610 --> 00:44:36.630
Order now and select from
a number of free addons,

00:44:36.630 --> 00:44:39.930
including trending videos on
LaserDisc, royalty-free

00:44:39.930 --> 00:44:44.020
soundtracks on vinyl, or
weatherproof exterior DVD

00:44:44.020 --> 00:44:46.166
shelving for when your
collection gets too large for

00:44:46.166 --> 00:44:47.890
the inside of your home.

00:44:47.890 --> 00:44:50.170
Order the YouTube Collection
on DVD.

00:44:50.170 --> 00:44:52.635
Simple, economical,
convenient.

00:44:52.635 --> 00:44:55.163
A whole new way to enjoy
the videos you love.

00:44:59.420 --> 00:44:59.900
[VIDEO PLAYBACK ENDS]

00:44:59.900 --> 00:45:01.170
GREG SCHECHTER: I figured
I'd end with a

00:45:01.170 --> 00:45:02.420
little bit of a joke.

00:45:06.220 --> 00:45:07.060
But yeah.

00:45:07.060 --> 00:45:12.500
So thank you guys, and we're
happy to take questions.

00:45:12.500 --> 00:45:15.170
I'm sorry I didn't have any cats
in that last video, but

00:45:15.170 --> 00:45:17.400
we can show some later
if you'd like.

00:45:17.400 --> 00:45:19.660
ZOLTAN SZEGO: Plenty of cats.

00:45:19.660 --> 00:45:22.810
GREG SCHECHTER: Any questions?

00:45:22.810 --> 00:45:25.310
Yeah.

00:45:25.310 --> 00:45:26.981
AUDIENCE: I'll just ask it.

00:45:26.981 --> 00:45:32.540
With iOS devices, will you ever
be able to play videos

00:45:32.540 --> 00:45:38.800
with an HTMI5 player versus just
the native player that

00:45:38.800 --> 00:45:41.970
they play the videos on?

00:45:41.970 --> 00:45:44.580
ZOLTAN SZEGO: So when you
say iOS devices--

00:45:44.580 --> 00:45:46.780
there's a tube of classes.

00:45:46.780 --> 00:45:52.070
I don't know if iPhones will
ever get inline playback

00:45:52.070 --> 00:45:53.670
support in their browser.

00:45:53.670 --> 00:45:55.910
GREG SCHECHTER: It's hard to
talk on Apple's product

00:45:55.910 --> 00:45:57.770
decisions, being Google
employees.

00:45:57.770 --> 00:45:58.582
AUDIENCE: OK, OK.

00:45:58.582 --> 00:45:58.990
Right.

00:45:58.990 --> 00:45:59.840
GREG SCHECHTER: We
just don't know.

00:45:59.840 --> 00:46:01.510
ZOLTAN SZEGO: Yeah.

00:46:01.510 --> 00:46:03.086
GREG SCHECHTER: Yeah.

00:46:03.086 --> 00:46:03.530
AUDIENCE: Hi.

00:46:03.530 --> 00:46:07.350
I wanted to hear your thoughts
on what obstacles you think

00:46:07.350 --> 00:46:11.950
are in the way with regards to
adaptive streaming on YouTube,

00:46:11.950 --> 00:46:17.050
and possibly, what would it take
to use that technology on

00:46:17.050 --> 00:46:19.650
YouTube across the board?

00:46:19.650 --> 00:46:20.040
GREG SCHECHTER: Sure.

00:46:20.040 --> 00:46:21.980
AUDIENCE: What are those
obstacles, do you think?

00:46:21.980 --> 00:46:24.565
GREG SCHECHTER: So adaptive
streaming is a pretty cool,

00:46:24.565 --> 00:46:26.340
neat feature.

00:46:26.340 --> 00:46:32.030
HLS is a way that we can do that
today on the iOS and on

00:46:32.030 --> 00:46:33.470
newer versions of Android.

00:46:33.470 --> 00:46:39.060
So we can set that up really
easily, and that'll work.

00:46:39.060 --> 00:46:42.490
So that sort of solves the
problem, although, of course,

00:46:42.490 --> 00:46:44.350
it doesn't have support
everywhere yet.

00:46:44.350 --> 00:46:50.120
The other thing is there are
APIs coming out in Chrome--

00:46:50.120 --> 00:46:55.300
and they'll be available other
places, eventually, as well--

00:46:55.300 --> 00:46:58.280
to allow us to actually
just toss in bytes

00:46:58.280 --> 00:46:59.430
into the video tag.

00:46:59.430 --> 00:47:02.930
And so then we can do the
adaptiveness in our code.

00:47:02.930 --> 00:47:08.460
HLS does it for us, but we'll
have that ability to do that

00:47:08.460 --> 00:47:10.780
in JavaScript if we want to.

00:47:10.780 --> 00:47:12.560
Is it mediaSource.append?

00:47:12.560 --> 00:47:13.600
Is that what it's called?

00:47:13.600 --> 00:47:14.665
I think that's what
the API's called.

00:47:14.665 --> 00:47:15.160
I gotta--

00:47:15.160 --> 00:47:15.720
AUDIENCE: AppendBytes.

00:47:15.720 --> 00:47:16.190
GREG SCHECHTER: AppendBytes.

00:47:16.190 --> 00:47:17.580
There we go.

00:47:17.580 --> 00:47:20.140
AUDIENCE: So would you say HLS
is the preferred method, as

00:47:20.140 --> 00:47:23.550
opposed to using Flash, for
YouTube at this point in time?

00:47:23.550 --> 00:47:25.070
GREG SCHECHTER: Yes.

00:47:25.070 --> 00:47:29.100
So our mobile site uses HLS
for live streaming, right?

00:47:29.100 --> 00:47:30.180
ZOLTAN SZEGO: Yes.

00:47:30.180 --> 00:47:33.080
GREG SCHECHTER: And so HLS, we
can do both adaptive and live

00:47:33.080 --> 00:47:34.750
streaming with it.

00:47:34.750 --> 00:47:39.100
And correct me if I'm wrong, but
on the mobile site today,

00:47:39.100 --> 00:47:40.265
we just use it for
live streaming.

00:47:40.265 --> 00:47:40.600
ZOLTAN SZEGO: Yeah.

00:47:40.600 --> 00:47:42.185
At the moment it's just
for live streaming.

00:47:42.185 --> 00:47:42.431
GREG SCHECHTER: Right.

00:47:42.431 --> 00:47:42.680
At the moment.

00:47:42.680 --> 00:47:43.925
But we could do adaptive
streaming.

00:47:43.925 --> 00:47:48.360
So that's sort of the approach
that we're taking, because

00:47:48.360 --> 00:47:51.250
that's something that we can
get out the door today.

00:47:51.250 --> 00:47:54.780
We will be using the MediaSource
AppendBytes API

00:47:54.780 --> 00:47:58.900
once it's been finalized and is
available in more places.

00:47:58.900 --> 00:48:00.310
AUDIENCE: Maybe you answered
this, but what do you think is

00:48:00.310 --> 00:48:05.360
keeping Chrome from just
adopting HLS in their desktop

00:48:05.360 --> 00:48:06.610
applications right now?

00:48:09.360 --> 00:48:10.120
GREG SCHECHTER: Wait--

00:48:10.120 --> 00:48:10.400
sorry?

00:48:10.400 --> 00:48:11.336
What--

00:48:11.336 --> 00:48:15.050
AUDIENCE: So on Chrome
on PC and Macintosh--

00:48:15.050 --> 00:48:17.490
or Apple desktop,
not the iOS --

00:48:17.490 --> 00:48:20.250
they're not capable of
playing back HLS.

00:48:20.250 --> 00:48:22.610
Is my understanding
correct right now?

00:48:22.610 --> 00:48:24.780
GREG SCHECHTER: I would direct
that question to one of the

00:48:24.780 --> 00:48:26.650
Chrome developers, because
I don't know.

00:48:26.650 --> 00:48:27.900
AUDIENCE: OK, thank you.

00:48:32.400 --> 00:48:32.897
GREG SCHECHTER: Yeah.

00:48:32.897 --> 00:48:33.394
Go for it.

00:48:33.394 --> 00:48:36.127
AUDIENCE: I'm just going to yell
it out, but one of the

00:48:36.127 --> 00:48:38.364
things you guys had in an
earlier slide [INAUDIBLE] was

00:48:38.364 --> 00:48:39.855
semantic, Semantic Web
and things like that.

00:48:39.855 --> 00:48:41.346
GREG SCHECHTER: Mm-hm.

00:48:41.346 --> 00:48:44.825
AUDIENCE: Using a script tag or
an embed tag or [INAUDIBLE]

00:48:44.825 --> 00:48:51.286
tag, [INAUDIBLE] get this sort
of nice semantic [INAUDIBLE].

00:48:51.286 --> 00:48:51.783
GREG SCHECHTER: Right.

00:48:51.783 --> 00:48:54.765
AUDIENCE: So for people who are
concerned about SEO for

00:48:54.765 --> 00:48:59.381
clients or things like that, how
does that all play in with

00:48:59.381 --> 00:49:01.816
trying to use [INAUDIBLE]

00:49:01.816 --> 00:49:03.770
and things like that.

00:49:03.770 --> 00:49:07.820
GREG SCHECHTER: So I don't
actually have a really good

00:49:07.820 --> 00:49:08.550
answer for that.

00:49:08.550 --> 00:49:14.110
We don't use a lot of the newer
tags for things unless

00:49:14.110 --> 00:49:17.280
they're specifically working
with the video tag, mostly

00:49:17.280 --> 00:49:20.000
because the extra work that we'd
have to do to get them

00:49:20.000 --> 00:49:23.050
working in the other browsers
hasn't really shown to be

00:49:23.050 --> 00:49:24.300
worth our time.

00:49:26.220 --> 00:49:30.930
SEO is not a big concern of
ours, because a lot of people,

00:49:30.930 --> 00:49:34.240
when they're searching on
YouTube-- well, we're indexed

00:49:34.240 --> 00:49:36.860
and all that, so we don't have
to worry about those things.

00:49:36.860 --> 00:49:37.920
So I'm sorry.

00:49:37.920 --> 00:49:38.780
I don't--

00:49:38.780 --> 00:49:42.010
I wish I had a better answer
for you, but it just hasn't

00:49:42.010 --> 00:49:45.260
been a concern of ours.

00:49:45.260 --> 00:49:46.140
Yeah.

00:49:46.140 --> 00:49:49.080
AUDIENCE: So when you're
delivering a live stream to

00:49:49.080 --> 00:49:52.640
the desktop, if you're not using
HLS, are you doing any

00:49:52.640 --> 00:49:56.220
form of bandwidth adaption,
perhaps statically at the

00:49:56.220 --> 00:50:00.660
beginning of the session, to
adjust the live stream's

00:50:00.660 --> 00:50:03.775
bandwidth to the bandwidth
of the connection?

00:50:03.775 --> 00:50:05.560
GREG SCHECHTER: Sorry, I didn't
actually-- did you hear

00:50:05.560 --> 00:50:05.780
the whole question?

00:50:05.780 --> 00:50:06.540
I didn't.

00:50:06.540 --> 00:50:09.080
AUDIENCE: How are you delivering
a live stream to

00:50:09.080 --> 00:50:09.800
the desktop?

00:50:09.800 --> 00:50:12.220
What protocol and what
form of bandwidth

00:50:12.220 --> 00:50:13.950
selection are you using?

00:50:13.950 --> 00:50:14.390
GREG SCHECHTER: So right.

00:50:14.390 --> 00:50:17.190
So today, we can do
HLS in Safari.

00:50:17.190 --> 00:50:19.510
Certainly that's not as big
of a portion of our

00:50:19.510 --> 00:50:21.760
users as we'd like.

00:50:21.760 --> 00:50:23.010
AUDIENCE: In Safari
to the desktop?

00:50:23.010 --> 00:50:23.450
GREG SCHECHTER: Yes.

00:50:23.450 --> 00:50:25.640
AUDIENCE: Oh, good.

00:50:25.640 --> 00:50:27.090
Elsewhere, we have to wait.

00:50:27.090 --> 00:50:29.635
We have to wait until those APIs
are available for us, and

00:50:29.635 --> 00:50:30.460
they're not yet.

00:50:30.460 --> 00:50:31.840
AUDIENCE: So to a browser
other than

00:50:31.840 --> 00:50:33.430
Safari, what do you do?

00:50:33.430 --> 00:50:35.480
Like to Chrome?

00:50:35.480 --> 00:50:36.660
GREG SCHECHTER: We use Flash.

00:50:36.660 --> 00:50:37.540
We use Flash today.

00:50:37.540 --> 00:50:40.230
And we use Flash for
a lot of things.

00:50:40.230 --> 00:50:43.200
I didn't really talk about it
much today, but Flash is still

00:50:43.200 --> 00:50:45.780
the majority of our playbacks,
because they have core

00:50:45.780 --> 00:50:49.270
features like live streaming
and adaptive--

00:50:49.270 --> 00:50:50.630
AUDIENCE: So then you use--
do you use RKMP,

00:50:50.630 --> 00:50:52.250
which is Flash's real--

00:50:52.250 --> 00:50:52.565
GREG SCHECHTER: Right.

00:50:52.565 --> 00:50:52.880
Yeah.

00:50:52.880 --> 00:50:53.160
AUDIENCE: They do.

00:50:53.160 --> 00:50:54.650
OK.

00:50:54.650 --> 00:50:56.220
ZOLTAN SZEGO: Yeah, the Flash
Player today does have the

00:50:56.220 --> 00:50:57.780
adaptive qualities which--

00:50:57.780 --> 00:50:58.070
AUDIENCE: Right.

00:50:58.070 --> 00:50:59.880
In their protocol, they
can do all of that.

00:50:59.880 --> 00:51:01.860
GREG SCHECHTER: So these are
things that we're waiting for

00:51:01.860 --> 00:51:04.730
from the browsers, to give us
APIs so that we can build

00:51:04.730 --> 00:51:06.570
these same features.

00:51:06.570 --> 00:51:07.820
But they're not there yet.

00:51:10.690 --> 00:51:11.940
Cool.

00:51:13.650 --> 00:51:15.730
AUDIENCE: This-- you might just
speculate on this, but do

00:51:15.730 --> 00:51:19.690
you think, in the future, dogs
will overtake cats on YouTube?

00:51:19.690 --> 00:51:23.800
And to follow that up, will you
create a button for dogs?

00:51:23.800 --> 00:51:25.910
GREG SCHECHTER: So there's
absolutely no way that's going

00:51:25.910 --> 00:51:29.250
to happen, and I will
show you why.

00:51:29.250 --> 00:51:32.740
Because I will pull up my
favorite cat video, and you'll

00:51:32.740 --> 00:51:35.830
understand that the dog will
never be able to have the same

00:51:35.830 --> 00:51:37.080
sort of effect.

00:51:39.990 --> 00:51:40.760
Ninja cat.

00:51:40.760 --> 00:51:43.260
Here we go.

00:51:43.260 --> 00:51:46.040
I just couldn't imagine
a dog doing this.

00:51:46.040 --> 00:52:15.481
[VIDEO PLAYBACK]

00:52:15.481 --> 00:52:25.461
[AUDIENCE LAUGHS]

00:52:25.461 --> 00:52:30.451
[AUDIENCE LAUGHS]

00:52:30.451 --> 00:52:35.940
[AUDIENCE LAUGHS]

00:52:35.940 --> 00:52:41.928
[AUDIENCE LAUGHS]

00:52:41.928 --> 00:52:47.417
[AUDIENCE LAUGHS]

00:52:47.417 --> 00:52:55.900
[AUDIENCE LAUGHS]

00:52:55.900 --> 00:52:57.450
[END VIDEO PLAYBACK]

00:52:57.450 --> 00:53:02.050
GREG SCHECHTER: And on top of
this, we actually sometimes

00:53:02.050 --> 00:53:04.200
see cats actually moving into
the dog space as well.

00:53:10.540 --> 00:53:12.920
Let's see if that's it.

00:53:12.920 --> 00:53:14.700
So we have videos like
this, where--

00:53:14.700 --> 00:53:15.684
[VIDEO PLAYBACK]

00:53:15.684 --> 00:53:16.934
[DOG BARKING ON VIDEO,
OFFSCREEN]

00:53:26.016 --> 00:53:26.508
[DOG'S BARK GRADUALLY
TURNS INTO MEOW]

00:53:26.508 --> 00:53:30.936
[AUDIENCE LAUGHS]

00:53:30.936 --> 00:53:31.440
[END VIDEO PLAYBACK]

00:53:31.440 --> 00:53:34.940
GREG SCHECHTER: So for both of
these things, I can't envision

00:53:34.940 --> 00:53:37.270
a dog being that stealthy
or being able

00:53:37.270 --> 00:53:39.220
meow like a cat instead.

00:53:39.220 --> 00:53:44.992
So I really don't expect dogs
to take over like cats have.

00:53:44.992 --> 00:53:46.378
AUDIENCE: I appreciate that.

00:53:49.620 --> 00:53:49.930
GREG SCHECHTER: Yeah.

00:53:49.930 --> 00:53:53.410
And I guess if you guys have
more questions, we'll be

00:53:53.410 --> 00:53:54.030
around the conference.

00:53:54.030 --> 00:53:56.120
We'll be outside.

00:53:56.120 --> 00:53:57.210
I think--

00:53:57.210 --> 00:53:58.340
I'm kind of getting thirsty.

00:53:58.340 --> 00:53:59.300
Isn't it time for, like,
beer or something?

00:53:59.300 --> 00:54:00.365
ZOLTAN SZEGO: Yeah, it's
almost beer time.

00:54:00.365 --> 00:54:01.250
GREG SCHECHTER: At night?

00:54:01.250 --> 00:54:02.790
Thank you guys for coming.

00:54:02.790 --> 00:54:03.690
ZOLTAN SZEGO: Thanks
for coming, guys.

00:54:03.690 --> 00:54:09.745
[APPLAUSE]

