WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
So here, our goal is to find the element of the non-empty list "l" that maximizes

00:00:06.000 --> 00:00:07.000
the return value of f.

00:00:07.000 --> 00:00:10.000
and I'm just going to call this function findmax f of l.

00:00:10.000 --> 00:00:14.000
Conceptually, one way to do this is to keep track of the best thing you've seen so far,

00:00:14.000 --> 00:00:18.000
and then just walk over the list and notice if you ever see anything better.

00:00:18.000 --> 00:00:22.000
I'm going to make 2 descriptive variable names--the best element I've seen so far

00:00:22.000 --> 00:00:24.000
and the best f value I've seen so far,

00:00:24.000 --> 00:00:28.000
and then what I want to do is iterate over all the possible elements in the list

00:00:28.000 --> 00:00:29.000
without walking off the end,

00:00:29.000 --> 00:00:33.000
and I'll pull out that element and call the function f on it.

00:00:33.000 --> 00:00:38.000
If we either haven't seen anything good yet, or what we just saw is better than

00:00:38.000 --> 00:00:41.000
the best thing we've seen previously, congratulations!

00:00:41.000 --> 00:00:44.000
You, the current element, are promoted to the new champion,

00:00:44.000 --> 00:00:46.000
and then eventually when we're done,

00:00:46.000 --> 00:00:48.000
we just return the best element so far.

00:00:48.000 --> 00:00:53.000
Now I personally recommend making small test cases at the beginning,

00:00:53.000 --> 00:00:56.000
just so that we can get a feel for how it's going before we move to that big

00:00:56.000 --> 00:00:58.000
Barbara Kingsolver thing.

00:00:58.000 --> 00:01:02.000
Well, let's see if I managed to write this Python program without any mistakes.

00:01:02.000 --> 00:01:04.000
This is actually not obvious.

00:01:04.000 --> 00:01:06.000
Oh! There is a mistake.

00:01:06.000 --> 00:01:08.000
It returned bestelementsofar.

00:01:08.000 --> 00:01:14.000
Here's the error at the bottom--unindent does not match any outer indentation level.

00:01:14.000 --> 00:01:15.000
This is on line 13.

00:01:15.000 --> 00:01:19.000
Let's scroll back up and actually, I think, they are right.

00:01:19.000 --> 00:01:20.000
I needed 1 more space there.

00:01:20.000 --> 00:01:22.000
I don't know if you could see this before.

00:01:22.000 --> 00:01:25.000
For some reason, it hadn't tabbed over the whole way, but now I've made it tab

00:01:25.000 --> 00:01:28.000
over the whole way. So let's try again.

00:01:28.000 --> 00:01:31.000
Ah! And now it returns "quick," which is what we expected.

00:01:31.000 --> 00:01:34.000
That's the element of this list with the greatest length.

00:01:34.000 --> 00:01:35.000
Let's try another test.

00:01:35.000 --> 00:01:42.000
Try 5, -6, 3, and 2, and this time we want to find the element with the greatest absolute value.

00:01:42.000 --> 00:01:44.000
That should be -6.

00:01:44.000 --> 00:01:46.000
And it is! Wow!

00:01:46.000 --> 00:01:50.000
Looks like findmax is really working out well, except that it's totally not.

00:01:50.000 --> 00:01:53.000
There's actually a bug in this implementation.

00:01:53.000 --> 00:01:56.000
So the test that I've been making--they're all in sort of random order.

00:01:56.000 --> 00:02:00.000
You really want to try all the corner cases, and for something that takes a list as input,

00:02:00.000 --> 00:02:06.000
corner cases to consider are in order, in reverse order, and random.

00:02:06.000 --> 00:02:10.000
But we tried 2 tests, but they were both sort of in random order,

00:02:10.000 --> 00:02:14.000
and when you're testing a program that involves lists,

00:02:14.000 --> 00:02:17.000
you want to try in order, reverse order, and also random.

00:02:17.000 --> 00:02:20.000
So let's try this on reverse order, and see if it gets the right answer.

00:02:20.000 --> 00:02:23.000
Should be 4, and in fact, it is! Excellent.

00:02:23.000 --> 00:02:26.000
Now let's try it on in order and see if it gets the right answer.

00:02:26.000 --> 00:02:33.000
Should be -4--oh! It is -3. That's not the right answer. Hmm. What do we do?

00:02:33.000 --> 00:02:37.000
There's a bug in our code somewhere, and we may not know where.

00:02:37.000 --> 00:02:41.000
One of the first approaches to figuring out what's going on is called

00:02:41.000 --> 00:02:43.000
print statement debugging.

00:02:43.000 --> 00:02:47.000
So here what I'm doing is changing my program so that everytime we enter this loop,

00:02:47.000 --> 00:02:51.000
we print out what the value of "i" is just to make sure that things are on track.

00:02:51.000 --> 00:02:54.000
Here we're trying to print out the element and the f_value.

00:02:54.000 --> 00:02:58.000
Let's go see if I can even add print debugging without something going wrong.

00:02:58.000 --> 00:03:00.000
Alright, this looks pretty good.

00:03:00.000 --> 00:03:06.000
So we start out when i is 0 and the element there is 1 and the f_value is 1. Looking good.

00:03:06.000 --> 00:03:09.000
Then i is 1, the element is 2, f_value is 2. Good.

00:03:09.000 --> 00:03:13.000
And then i is 2, the element is 3, the f_value is 3.

00:03:13.000 --> 00:03:16.000
Well, this convinces me that we're actually calling the absolute value,

00:03:16.000 --> 00:03:21.000
but the thing I was expecting to see was -4, and we never seem to get there.

00:03:21.000 --> 00:03:25.000
So this suggests to me that i isn't getting high enough.

00:03:25.000 --> 00:03:28.000
Well, we know that i is going over every element in this range,

00:03:28.000 --> 00:03:30.000
so let's print that out to gain some understanding--

00:03:30.000 --> 00:03:33.000
range(len(l)-1).

00:03:33.000 --> 00:03:38.000
So now here at the beginning, it tells us that i is only ranging over 0, 1, and 2,

00:03:38.000 --> 00:03:42.000
but we really want it to range over 0, 1, 2, 3,

00:03:42.000 --> 00:03:45.000
and in fact, we can make this even super obvious.

00:03:45.000 --> 00:03:47.000
Let's make an even simpler list that we're going to fail at.

00:03:47.000 --> 00:03:50.000
Now the list and the element indices are the same.

00:03:50.000 --> 00:03:51.000
We really want to get out the answer 3,

00:03:51.000 --> 00:03:52.000
but if we look down here,

00:03:52.000 --> 00:03:57.000
i only ranges over 0, 1, 2. 0, 0, 0. 1, 1, 1. 2, 2, 2.

00:03:57.000 --> 00:03:58.000
2 is the best so we return it.

00:03:58.000 --> 00:04:00.000
So we're not getting to this last element.

00:04:00.000 --> 00:04:03.000
So there must be something wrong with this set,

00:04:03.000 --> 00:04:06.000
and I'm guessing, since we're missing the last element,

00:04:06.000 --> 00:04:10.000
that this -1--we don't really need to be subtracting 1.

00:04:10.000 --> 00:04:14.000
Now many people are often tempted to subtract 1 because Python lists start at 0,

00:04:14.000 --> 00:04:15.000
and you don't want to walk over the end.

00:04:15.000 --> 00:04:20.000
You will just print out range 4 to satisfy ourselves that it's 0, 1, 2, 3.

00:04:20.000 --> 00:04:22.000
Yep, so range(4)--0, 1, 2, 3.

00:04:22.000 --> 00:04:27.000
Now i ranges over 0, 1, 2, 3, and now we're getting the answer we expect.

00:04:27.000 --> 00:04:31.000
So now let's go back to the problem we were actually given,

00:04:31.000 --> 00:04:34.000
["Barbara", "Kingsolver", "Wrote", "The", "Poisonwood", "Bible"],

00:04:34.000 --> 00:04:37.000
and hopefully, will get either Kingsolver or Poisonwood out,

00:04:37.000 --> 00:04:38.000
assuming I can count.

00:04:38.000 --> 00:04:43.000
Barbara is 7. Kingsolver is 10. Wrote is 5. The is 3. Poisonwood is 10.

00:04:43.000 --> 00:04:47.000
We end up with Kingsolver at the end of the day, which is a perfectly acceptable answer.

00:04:47.000 --> 00:04:51.000
But we've got all of this print debugging, and if the problem doesn't call for that,

00:04:51.000 --> 00:04:56.000
we should typically remove it before submitting, lest it be counted as part of our output

00:04:56.000 --> 00:04:58.000
and cause us to get the problem wrong.

00:04:58.000 --> 09:59:59.000
Now we just return Kingsolver.

