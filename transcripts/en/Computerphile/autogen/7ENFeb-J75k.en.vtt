WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:00.530
If you've got multiple processors either that's multiple cores virtual cores

00:00:00.530 --> 00:00:04.469
in a

00:00:05.410 --> 00:00:10.710
hypothetically a multi-core processor you want to run your algorithm or on

00:00:11.290 --> 00:00:19.139
Multiple CPU instances so you need to split it up and the operating system needs to find some way of controlling all those different instances

00:00:19.930 --> 00:00:22.680
actually you can still be beneficial on a single CPU

00:00:22.810 --> 00:00:28.590
system because it might be times where part of your program is waiting for say network input so the operators will then schedule it in

00:00:28.590 --> 00:00:30.590
another thread of execution

00:00:31.090 --> 00:00:33.090
To do something

00:00:34.360 --> 00:00:37.380
So let's start by thinking about what the operating system sees

00:00:37.450 --> 00:00:43.169
when it's running a program and this is what's called a process and that's got a series of instructions and it's going to be

00:00:43.360 --> 00:00:49.739
Executing this is the program this is actually not part of the operating system is it's the program but it needs to know we're inside

00:00:50.440 --> 00:00:53.759
The program that is so that instruction say

00:00:54.730 --> 00:01:00.930
But there's, also lots of other information that the operating system needs to keep track for a process a things like

00:01:01.719 --> 00:01:03.719
list of open files

00:01:04.360 --> 00:01:07.229
Configuration of memory and so on if you've got virtual memory

00:01:07.390 --> 00:01:08.140
involved or

00:01:08.140 --> 00:01:14.250
Paging there's various things that the operating system needs to keep track each of them has got a unique ID and you can then run

00:01:14.250 --> 00:01:16.250
multiple processes at the same time

00:01:16.600 --> 00:01:23.280
so one way you could break your program up into multiple chunks is to actually have multiple processes running in

00:01:23.560 --> 00:01:25.560
for a while people did this they sort of

00:01:25.659 --> 00:01:32.699
Will use the command a function in UNIX for example called fork you would split the program into 1/2 which would run off as

00:01:33.220 --> 00:01:37.470
it was the other would have a new process identifier and the operating system would copy that block and

00:01:37.570 --> 00:01:42.579
Create a new list of what memory uses a new list of the files they had open now these are point back to the same

00:01:42.579 --> 00:01:43.079
 

00:01:43.079 --> 00:01:50.039
files the same blocks memory allocations and things so that if you change one memory location it updated on the other side and things if

00:01:50.040 --> 00:01:55.529
You changed a file seat to a different part of a file for example it would update in the others but

00:01:56.140 --> 00:02:02.189
They would be separate processes and they'd have to have all the storage required to do that and that worked but

00:02:03.250 --> 00:02:08.849
if you're breaking your program up so you can run your task on multiple CPUs

00:02:09.819 --> 00:02:13.439
most of them are going to have the same list of files the same memory configuration the

00:02:15.459 --> 00:02:19.979
Everything else that the operating system needs to keep track of the only thing that's going to be different is

00:02:20.739 --> 00:02:26.639
Where it is in the program what bit of code is running from what part and so the idea that came along was ok let's

00:02:26.640 --> 00:02:32.189
Have something lighter weight than a process and they called it a thread because you've got your thread of execution through the instructions

00:02:32.319 --> 00:02:36.929
And what we have is that each process will have at least one thread of execution but could have many

00:02:37.329 --> 00:02:41.819
So you have multiple threads of execution in your program so your programs running one thread

00:02:41.819 --> 00:02:44.488
Which it starts off with that will then create another thread

00:02:44.489 --> 00:02:49.949
Which does something and then another thread pratik and so on can do different parts they made last for the whole length of the program

00:02:49.950 --> 00:02:50.340
they

00:02:50.340 --> 00:02:53.489
may only last for a short part while that task being completed and so on

00:02:53.709 --> 00:02:58.468
You may have multiple ones that get jobs from different things and so on how you structure your program

00:02:59.200 --> 00:03:02.039
Doesn't matter but from the operating system point of view it's now

00:03:02.530 --> 00:03:09.569
Scheduling different threads onto the different cause whether that's one to four however many you've got in your system so the idea behind

00:03:10.000 --> 00:03:15.719
Multi-threading is a sort of lightweight way of saying to the operating system these are the different things I want running on my computer

00:03:16.359 --> 00:03:18.659
Whether that's always part of one program

00:03:18.659 --> 00:03:26.219
or multiple threads through multiple programs and the operating systems choosing which one of them actually gets CPU times on any of the CPU calls

00:03:26.379 --> 00:03:28.379
physical or virtual that they have

00:03:28.449 --> 00:03:29.650
available

00:03:29.650 --> 00:03:34.769
Now that it produces if you were actually one program that you've split into multiple threads that introduces some interesting issues

00:03:35.650 --> 00:03:41.159
Because you can get to the point where your programs can no longer do the task that you expect them to do a program which

00:03:41.159 --> 00:03:47.789
Was just one single stream of instructions executing one after the other and so he knew the order they'd execute in two

00:03:48.159 --> 00:03:51.839
to multiple strengths of instruction that are executing

00:03:52.389 --> 00:03:56.609
Sometimes in parallel sometimes one after the other but you no longer have any

00:03:57.879 --> 00:04:03.089
Control over the order that would happen because the operating system might put two of their threads on at the same time

00:04:03.489 --> 00:04:08.578
Or I might let one thread run and then put the other thread on after the other and then go back and you can all

00:04:08.579 --> 00:04:10.579
Control, where it's switch from one

00:04:10.720 --> 00:04:14.759
to the other I can show this with an interesting program on my laptop

00:04:15.129 --> 00:04:18.209
So what I've got here is I'm going to write a program that

00:04:18.400 --> 00:04:23.880
adds up all the numbers from 1 to 1 million but I'm going to do that in two

00:04:24.430 --> 00:04:29.489
Threads so I've written two with the Reds here creating threads the first one is this routine here

00:04:29.490 --> 00:04:31.419
Which is called the hopefully thread function?

00:04:31.419 --> 00:04:35.969
We've got a variable a which we're going to initialize to be 0 and I've declared this as a volatile

00:04:36.370 --> 00:04:38.970
Variable just to tell the C compile and it will change

00:04:39.669 --> 00:04:45.269
While it's running because otherwise you'd have even more problems so split in two so the first one is adding up the first

00:04:45.639 --> 00:04:47.380
500,000 the second one

00:04:47.380 --> 00:04:49.439
exactly the same so it's adding at the second

00:04:50.020 --> 00:04:52.380
500,000 so what it's doing is it's adding up from

00:04:52.690 --> 00:04:58.229
500,000 to 1 million and they're adding that's the same variable so go instruction he's going to fetch one

00:04:58.510 --> 00:05:01.319
Adder on the next one and write it back and then the other one's going to fetch it

00:05:01.450 --> 00:05:05.879
Add on the value and write it back and so on so then we then run our program

00:05:05.880 --> 00:05:10.229
When we create both threads and then we wait for them to complete which is what this P

00:05:10.229 --> 00:05:13.589
Throw joint is doing and then we print out the number that

00:05:13.590 --> 00:05:18.239
We've got so if you just like to add up all the numbers between 1 and a million while I run the program

00:05:19.479 --> 00:05:25.049
Then we'll see what result we get 500 times you'd billion so let's just compile this up

00:05:29.710 --> 00:05:33.150
Not making mistakes the problems would compile this up and let's just run this program

00:05:33.940 --> 00:05:38.700
and it's giving me the answer to eight six six eight nine seven four eight two two six zero

00:05:39.820 --> 00:05:41.820
if I run it again I

00:05:42.250 --> 00:05:48.660
now get the answer three three three nine six three eight two six seven two six I'll run it again I

00:05:48.820 --> 00:05:55.289
get the answer three two six eight seven, oh four oh nine five Q one I run it again I get two for 307

00:05:55.840 --> 00:05:58.739
501 five 490 which sounds like a phone number

00:05:59.020 --> 00:06:03.450
Well this all this all converge on the right answer all leverage out or is this just one of those

00:06:03.760 --> 00:06:04.270
completely

00:06:04.270 --> 00:06:05.620
Well if you think about it

00:06:05.620 --> 00:06:10.620
Should always be the same you've got you're adding up all the numbers between one and a million you should always get the same answer

00:06:11.139 --> 00:06:16.978
It shouldn't be converging on something you should always be producing the same answer so something very very odd is going on on my computer

00:06:17.139 --> 00:06:24.569
Something very very bizarre is going on we could write the program less in fact let's just write the program normally

00:06:25.720 --> 00:06:31.919
let's comment out all this and we'll just write a very quick program that adds up all the values from 1

00:06:32.380 --> 00:06:36.299
to a million so what I is less than or equal to 1

00:06:36.830 --> 00:06:40.840
I'm sorry so it may be a single-threaded program now it's just going to run on one thread

00:06:41.000 --> 00:06:43.359
And if we do that we compile it

00:06:46.069 --> 00:06:48.098
We now get the same value each time

00:06:48.979 --> 00:06:52.059
500 and whatever those so now we've done single-threaded

00:06:52.060 --> 00:06:57.369
we're getting around certain we're getting the same answer each time so what's going on here well you need to think about what's happening in

00:06:57.370 --> 00:06:59.620
This program, so let's just put it back to where it was

00:07:00.379 --> 00:07:02.379
if we look at this instruction here a

00:07:03.500 --> 00:07:09.069
equals a plus I then what this was telling this program to do is to fetch the value of a

00:07:10.430 --> 00:07:12.139
whatever that is

00:07:12.139 --> 00:07:14.318
then add on the value of I to it and

00:07:14.780 --> 00:07:19.269
Then store the result back in a now if I just put that to one side and find my paper

00:07:20.240 --> 00:07:25.060
Which is over here with my pens if we? Were to write that in machine code

00:07:25.819 --> 00:07:30.069
I'll use the arm ship to do that because it just makes things slightly easy to see what's going on

00:07:30.680 --> 00:07:36.969
We would have this is thread 1 so we'll call this t1 we're going to say that this is going to be an LDR instruction

00:07:37.250 --> 00:07:41.199
To load a value from memory so they're loading to be registered let's use our 0

00:07:42.319 --> 00:07:44.319
the value of a

00:07:45.409 --> 00:07:47.409
We're then going to add onto

00:07:48.349 --> 00:07:50.349
Our 0

00:07:51.409 --> 00:07:53.180
The value of r1

00:07:53.180 --> 00:07:57.849
Which is a register containing our loop counter that's the same as I on there and then we're going to store

00:07:58.520 --> 00:08:00.520
the value of R 0

00:08:01.699 --> 00:08:06.758
Back you know so that one Caesars have become 3 machine code instructions

00:08:07.940 --> 00:08:12.759
so the way that the program is executing in one thread is it's loading the value from memory and

00:08:12.889 --> 00:08:15.788
It's making a local copy of it and then it adds a value onto it

00:08:16.279 --> 00:08:18.729
updates its local copy and stores it back

00:08:19.120 --> 00:08:23.400
into the actual location and that thread keeps doing that into the loop so it loads it I

00:08:23.900 --> 00:08:28.980
Had something onto it and stores it back loads it add something else to it

00:08:29.500 --> 00:08:34.360
Stores it back now if we've got a multi-threaded system, which is what we had there, we?

00:08:34.360 --> 00:08:37.899
also have another Steve hi Steve hi Steve and

00:08:38.630 --> 00:08:40.190
in that case

00:08:40.190 --> 00:08:41.630
I'm going to be here

00:08:41.630 --> 00:08:44.829
loading the value I think value onto it storing it back

00:08:44.990 --> 00:08:50.320
And I'm gonna be here loading a value adding something onto it and storing it back so I'm loading value

00:08:50.690 --> 00:08:52.749
adding something on to it I'm loading value

00:08:53.120 --> 00:08:53.860
loading a value  adding something on to it

00:08:53.860 --> 00:08:56.880
adding something on to it storing it back  storing it back

00:08:56.880 --> 00:09:03.820
and what's just happened Because other Steve had added something else on to it, while I'd load it on when I storm my back his update

00:09:04.420 --> 00:09:06.420
doesn't get changed gets lost

00:09:06.550 --> 00:09:07.700
Well that wasn't nice

00:09:07.700 --> 00:09:12.640
So if we look at what's happening on the papal it's loading the value in it's adding the value onto it and then it's doing

00:09:12.640 --> 00:09:15.360
It back but of course, we've got multiple systems and so at some point

00:09:16.240 --> 00:09:17.520
this pro

00:09:17.530 --> 00:09:22.239
Was going to start excusing the same code so let's cross this instruction out for now we'll put it back in a bit later on

00:09:22.490 --> 00:09:27.219
And assume that at this point we load the value into the other thread

00:09:28.100 --> 00:09:30.100
into our zero in

00:09:30.350 --> 00:09:31.550
there

00:09:31.550 --> 00:09:33.849
And then we do the add on in the same way

00:09:34.580 --> 00:09:38.049
Dot and then we do the store back here

00:09:38.870 --> 00:09:41.200
of our zero into a and we've got one a

00:09:41.720 --> 00:09:48.130
Up here there an Singh and then this store actually happens after this store here

00:09:50.150 --> 00:09:54.579
So what happens here is that these both end up getting the same value of a

00:09:55.700 --> 00:10:02.379
And this has its value on in its local register this adds its value one in its local register this stores it back

00:10:03.920 --> 00:10:07.690
Then this stores it back and of course because this is just story back here

00:10:07.910 --> 00:10:11.499
It's overwritten the value that was stored there so the value that was added on here

00:10:12.470 --> 00:10:16.180
gets lost so what we need to do is find a way to

00:10:16.670 --> 00:10:20.469
synchronize these two things so that as soon as this is loaded the value in

00:10:20.720 --> 00:10:23.080
And it's going to add something on to it it stops

00:10:23.720 --> 00:10:27.730
This one from doing it and so there's a couple of ways, we can do that

00:10:28.430 --> 00:10:31.000
The easiest way is that we have something that

00:10:31.250 --> 00:10:38.559
both divide both Steve's or both CPUs have to access and so we could have a token let's use a floppy disk Microsoft Office Professional

00:10:40.220 --> 00:10:45.190
1995 and what we're going to say is that I can only access an update variable a if

00:10:45.620 --> 00:10:48.280
I have the token so let's bring back

00:10:48.950 --> 00:10:51.819
Friendly Steve so we've now got a token and we?

00:10:51.820 --> 00:10:57.520
What we're going to say is it unless I've got the token I cannot access a variable a so I'm going to execute those three

00:10:57.520 --> 00:11:00.280
Instructions whenever I've got the token so I'll get a load of runny win

00:11:01.010 --> 00:11:03.489
add something onto it and store it back and

00:11:03.970 --> 00:11:07.540
gonna hand the token to Steve now I've got the token so I can load a value in

00:11:07.670 --> 00:11:09.969
add the value from I've merged her into it and

00:11:10.040 --> 00:11:13.719
store it back and hand the target and now I've got the token again I can load something into

00:11:13.850 --> 00:11:16.060
It into my register add something onto it

00:11:16.310 --> 00:11:20.799
Back and pass the token on and I've got it so I can load the value in add the value from a register

00:11:21.050 --> 00:11:23.029
Story back and pass the token on

00:11:23.029 --> 00:11:28.148
And because I've got the token again I can do the same again but because only one of us can hold the token at any

00:11:28.149 --> 00:11:31.479
one time it means that only a can get updated

00:11:32.180 --> 00:11:36.759
When we've got the token and so we never lose that right because we're saying that unless you've got the token

00:11:37.100 --> 00:11:40.870
You can't access that very that's great so if we turn back to the laptop we can see

00:11:40.870 --> 00:11:46.629
How we can implement that in our program we're gonna use the same idea, we're gonna have something that we need to have before

00:11:46.629 --> 00:11:51.429
We can run that code in this case we're going to have what's called a mutex and mute an area mutual exclusion

00:11:51.649 --> 00:11:53.449
that we need to lock

00:11:53.449 --> 00:11:55.420
Before we can run, the code after it and then when

00:11:55.420 --> 00:11:57.490
we finished we unlock that and so if it's

00:11:57.649 --> 00:12:01.839
Locked and we try and acquire it our program will pause until it is able to lock it

00:12:02.120 --> 00:12:06.039
So I'm going to do is I've created the variable for it here and I've

00:12:06.040 --> 00:12:08.259
Also initialized it down here so it's all set up

00:12:08.259 --> 00:12:14.199
Ready to go so before I add onto a that the value of the instructions I'm going to lock that

00:12:14.870 --> 00:12:16.250
mutex

00:12:16.250 --> 00:12:19.000
like so and then afterwards

00:12:20.180 --> 00:12:23.439
if I could type I'm going to unlock that mutex

00:12:25.910 --> 00:12:30.759
Like so and I need to do the same in the other thread as well so I'm going to lock the mutex

00:12:38.450 --> 00:12:42.999
I'm going to unlock it afterwards

00:12:45.650 --> 00:12:47.650
So if I can pile this version up

00:12:48.140 --> 00:12:54.100
we still got two threads we're still getting them to add up the things as we go through it and then at the end

00:12:54.620 --> 00:12:59.470
We're going to add the result and it should this time give us the right answer

00:13:00.800 --> 00:13:02.800
so let's run it and

00:13:05.060 --> 00:13:11.290
It gives us the right answer we now split the problem into it's running on two CPUs and because we're locking that variable so

00:13:11.290 --> 00:13:13.480
We can only access it by one thread or the other

00:13:14.030 --> 00:13:20.439
So, we did with the two Steve's then we can get the right result and it produces the same result every time

00:13:21.050 --> 00:13:24.879
now the downside to this is that locking the thread each time slows the running of the program down

00:13:25.100 --> 00:13:28.719
But we can be clever if we think about addition if we add six numbers together

00:13:29.390 --> 00:13:30.640
That's the same as adding

00:13:30.640 --> 00:13:36.699
Three numbers together then adding three numbers together and having the results of both together and we can do the same thing here

00:13:37.100 --> 00:13:39.100
so, we can take this mutex and

00:13:40.190 --> 00:13:44.860
Move it outside of our main loop and instead of rounding on the value of I each time

00:13:45.140 --> 00:13:52.030
we have a local variable we'll call it local a which we add everything on to so we say local a equals local a

00:13:52.790 --> 00:13:54.790
plus I

00:13:55.550 --> 00:14:01.209
So inside our thread we're just going around adding all the values on as we did before which didn't work because we're putting in a

00:14:01.210 --> 00:14:03.910
Local variable that's local to that thread and this function

00:14:04.460 --> 00:14:09.850
It's not gonna be a problem because only this function can access it well do the same in the other thread and then we'll do

00:14:09.850 --> 00:14:15.670
The same thing outside it and the advantage of doing this is that we now only have to acquire that lock

00:14:15.860 --> 00:14:23.289
Once in each thread rather having to acquire it for every single addition, whether you have to acquire it once if we time the program

00:14:24.380 --> 00:14:30.189
Beforehand and I should say at this point the program may be running so fast that we won't better get an accurate time and it

00:14:30.190 --> 00:14:32.380
Wouldn't try anyway so use the time coming to time it

00:14:32.810 --> 00:14:38.050
We see it takes about nine point eight two seconds let's just run it again nor point seven one

00:14:39.260 --> 00:14:40.670
Nor point seven one

00:14:40.670 --> 00:14:46.539
We seem to have standardized around that sort of things about naught point seven so let's compile up our faster version now

00:14:47.840 --> 00:14:52.509
Not made any mistakes and we'll time it again, well let's see produces the right value will time it as well

00:14:53.930 --> 00:14:55.930
And it's taking around the same time

00:14:56.690 --> 00:15:01.959
It's dropping a bit and it doesn't really make any difference in time I think that's just because of how fast the computers are

00:15:02.149 --> 00:15:05.859
That we're dealing with but with a bigger program we're doing more calculations

00:15:06.290 --> 00:15:09.670
Reducing the number of times we require that a lot would actually make the system run

00:15:10.069 --> 00:15:17.889
Faster so multi-threading is the idea breaking our program up into multiple threads of execution that run for different lengths of time but

00:15:17.889 --> 00:15:21.999
We have to be careful that we do things in the right order and we avoid having

00:15:22.840 --> 00:15:25.320
multiple threads accessing the same variable at the same time

00:15:25.660 --> 00:15:31.860
Particularly if they're writing if they're just reading from it it doesn't matter if one's writing and several the reading from it and it doesn't

00:15:31.880 --> 00:15:35.740
matter if they perhaps get an. Older value at a time then it works fine and so on

00:15:37.399 --> 00:15:38.389
That same

00:15:38.389 --> 00:15:43.628
A1 so that he can decrypt the message and read it right so Alice maybe wants to send another one so she's going to tick

00:15:43.629 --> 00:15:47.229
This KDF function again she's going to produce a new key and a2

00:15:47.870 --> 00:15:51.279
she's going to send that to Bob he's going to take this receiving function a2

00:15:51.560 --> 00:15:53.709
Now Bob wants to send a message so he's going to tick

