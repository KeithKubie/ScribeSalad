WEBVTT
Kind: captions
Language: en

00:00:08.840 --> 00:00:09.730
PAUL IRISH: Hi.

00:00:09.730 --> 00:00:13.860
So we're back here at GDL
Presents, where we interview

00:00:13.860 --> 00:00:17.450
unique and talented developers
who are developing really

00:00:17.450 --> 00:00:18.470
compelling stuff.

00:00:18.470 --> 00:00:22.720
Today we have with us Mark
Danks, who you might be

00:00:22.720 --> 00:00:25.390
familiar with his work
at "My Robot Nation."

00:00:25.390 --> 00:00:26.826
How's it going, Mark?

00:00:26.826 --> 00:00:27.550
MARK DANKS: It's going well.

00:00:27.550 --> 00:00:28.140
Good to see you.

00:00:28.140 --> 00:00:28.900
PAUL IRISH: Cool.

00:00:28.900 --> 00:00:29.610
Great.

00:00:29.610 --> 00:00:36.780
So you led development of "My
Robot Nation," which has this

00:00:36.780 --> 00:00:43.190
builder, which is this
incredible app that uses WebGL

00:00:43.190 --> 00:00:44.970
to kind of create a
rich experience.

00:00:44.970 --> 00:00:47.460
Do you want to talk a little
bit about, kind of from a

00:00:47.460 --> 00:00:51.330
consumer perspective, how
this whole thing works?

00:00:51.330 --> 00:00:52.120
MARK DANKS: Sure.

00:00:52.120 --> 00:00:55.270
So what we were looking to do
was really make it easy and

00:00:55.270 --> 00:00:58.830
accessible for people to get
access to 3D printing.

00:00:58.830 --> 00:01:00.780
And we sort of were scratching
our heads at what would be

00:01:00.780 --> 00:01:03.110
this awesome thing, and really
realized that little

00:01:03.110 --> 00:01:05.630
customizable robot
sort of figurines

00:01:05.630 --> 00:01:06.730
would be pretty cool.

00:01:06.730 --> 00:01:08.620
Because each one would
be totally unique.

00:01:08.620 --> 00:01:13.020
And so we thought about writing
an app, or a desktop

00:01:13.020 --> 00:01:14.775
app, or something, and realized
that we could do it

00:01:14.775 --> 00:01:15.770
all in a browser.

00:01:15.770 --> 00:01:18.830
And it just seems to make the
most sense to do that.

00:01:18.830 --> 00:01:20.415
So basically, you go
to the browser.

00:01:20.415 --> 00:01:23.280
It runs full WebGL,
so it's all in 3D.

00:01:23.280 --> 00:01:25.470
But my background's all
in video games.

00:01:25.470 --> 00:01:27.410
And so I sort of approached it
of, how do you make these

00:01:27.410 --> 00:01:30.026
complicated things really easy
to understand, where it's sort

00:01:30.026 --> 00:01:31.440
of just drag and drop?

00:01:31.440 --> 00:01:33.155
You don't have to know anything
about 3D graphics.

00:01:33.155 --> 00:01:34.880
You don't have to know
how to model.

00:01:34.880 --> 00:01:36.990
But literally, it's
an infinite--

00:01:36.990 --> 00:01:38.960
billions and billions of
combinations of these

00:01:38.960 --> 00:01:40.450
different robot shapes
that you can get.

00:01:40.450 --> 00:01:41.710
And they're all in full color.

00:01:41.710 --> 00:01:43.540
So you can put a hat
on your robot.

00:01:43.540 --> 00:01:45.730
You can pick different
body parts.

00:01:45.730 --> 00:01:48.740
And once you like it, and got it
all posed, and ready to go,

00:01:48.740 --> 00:01:51.223
you can go ahead and we'll 3D
print it, and send it to you

00:01:51.223 --> 00:01:52.770
in the mail.

00:01:52.770 --> 00:01:53.690
PAUL IRISH: Great.

00:01:53.690 --> 00:01:53.750
Yeah.

00:01:53.750 --> 00:01:54.810
It's really powerful.

00:01:54.810 --> 00:02:01.230
And it's pretty rad to create
your own robot and then get an

00:02:01.230 --> 00:02:05.330
actual physical version
in a few weeks.

00:02:05.330 --> 00:02:07.700
So why don't you talk a little
bit about how this was

00:02:07.700 --> 00:02:09.080
constructed?

00:02:09.080 --> 00:02:10.440
Because it's really fantastic.

00:02:10.440 --> 00:02:13.820
So one of the things that has
always been really interesting

00:02:13.820 --> 00:02:19.110
to me is seeing someone from the
video game industry, and

00:02:19.110 --> 00:02:21.330
bringing them into the web, and
kind of seeing what their

00:02:21.330 --> 00:02:23.770
development experience
is like there.

00:02:23.770 --> 00:02:26.880
How did you kind of approach
just getting into it, of kind

00:02:26.880 --> 00:02:29.490
of ascertaining what your
development stack was going to

00:02:29.490 --> 00:02:32.140
be like, and how you were
actually going to construct

00:02:32.140 --> 00:02:37.060
with the new primitives
available on the web platform?

00:02:37.060 --> 00:02:37.540
MARK DANKS: Yeah.

00:02:37.540 --> 00:02:40.520
So the way I approached it
first was really thinking

00:02:40.520 --> 00:02:41.740
about, you know--

00:02:41.740 --> 00:02:45.480
there are two main aspects to
the engine itself and sort of

00:02:45.480 --> 00:02:46.590
the interface.

00:02:46.590 --> 00:02:48.010
One of it is the
3D side of it.

00:02:48.010 --> 00:02:50.760
And so that's some really heavy
JavaScript sitting in

00:02:50.760 --> 00:02:51.430
the background.

00:02:51.430 --> 00:02:52.930
And that's basically--

00:02:52.930 --> 00:02:54.055
it's a full-on game engine.

00:02:54.055 --> 00:02:57.070
We do collision detection,
all kinds of stuff.

00:02:57.070 --> 00:02:58.150
And that, luckily, I sort of--

00:02:58.150 --> 00:03:00.195
I have some experience on how
to handle that, how to write

00:03:00.195 --> 00:03:02.080
all the shaders and that
kind of thing.

00:03:02.080 --> 00:03:04.490
So I was able to basically
translate what, for me, used

00:03:04.490 --> 00:03:07.680
to be hardcore C++ code
into JavaScript.

00:03:07.680 --> 00:03:09.380
And was really--

00:03:09.380 --> 00:03:11.710
at the time, honestly, I was
kind of skeptical if this

00:03:11.710 --> 00:03:12.820
could work.

00:03:12.820 --> 00:03:14.180
You know, how do you
[? do array ?] test against

00:03:14.180 --> 00:03:16.550
10,000 triangles
kind of stuff.

00:03:16.550 --> 00:03:17.320
And it just does.

00:03:17.320 --> 00:03:19.910
It works, totally interactive,
60 frames a second, no

00:03:19.910 --> 00:03:21.150
problems at all.

00:03:21.150 --> 00:03:23.490
So that was pretty awesome for
just getting the graphic side

00:03:23.490 --> 00:03:24.690
of it, the WebGL side.

00:03:24.690 --> 00:03:27.200
And then one thing that we did
differently, I think, is

00:03:27.200 --> 00:03:29.630
really going, we're
on the web.

00:03:29.630 --> 00:03:31.270
The web is all about
interfaces.

00:03:31.270 --> 00:03:33.910
So rather than try to create
the interface that you

00:03:33.910 --> 00:03:35.940
interact with where you pick
your attachments, and your

00:03:35.940 --> 00:03:37.840
stamps, and your
robot pieces--

00:03:37.840 --> 00:03:40.664
rather than making that more 3D,
which is really a pain in

00:03:40.664 --> 00:03:42.235
the neck to develop for,
we actually do all

00:03:42.235 --> 00:03:44.260
that in normal HTML.

00:03:44.260 --> 00:03:46.570
Now again, we're using things
like jQuery and some pretty

00:03:46.570 --> 00:03:49.510
complex CSS, but the idea was
we could bring the two

00:03:49.510 --> 00:03:51.060
together in a way that
you really can't

00:03:51.060 --> 00:03:52.610
do on a lot of platforms.

00:03:52.610 --> 00:03:54.350
So that was a really
nice thing.

00:03:54.350 --> 00:03:58.100
So I could spend all my
3D efforts and all my

00:03:58.100 --> 00:04:00.920
visualization in JavaScript and
kind of treating it like a

00:04:00.920 --> 00:04:01.880
game engine.

00:04:01.880 --> 00:04:03.650
But then when we wanted to
deal with how people were

00:04:03.650 --> 00:04:05.780
going to actually interact with
it and select all their

00:04:05.780 --> 00:04:08.460
stuff, we could just treat it
as a normal page, and just

00:04:08.460 --> 00:04:10.580
have the two parts talk
to each other.

00:04:10.580 --> 00:04:11.430
PAUL IRISH: Yeah.

00:04:11.430 --> 00:04:19.690
And so a challenge for a lot of
people with WebGL is that

00:04:19.690 --> 00:04:23.750
dealing with the actual GL
primitives is pretty foreign.

00:04:23.750 --> 00:04:27.860
And so a lot of people just
hop into using a library.

00:04:27.860 --> 00:04:30.940
Now you luckily have a lot of
experience, which makes

00:04:30.940 --> 00:04:38.420
working inside the OpenGL ES 2
kind of environment a bit more

00:04:38.420 --> 00:04:39.810
comfortable.

00:04:39.810 --> 00:04:42.600
Was there any third-party code
that you kind of used in the

00:04:42.600 --> 00:04:45.010
construction of the application
to kind of assist,

00:04:45.010 --> 00:04:47.560
in probably not that,
but other parts?

00:04:47.560 --> 00:04:47.910
MARK DANKS: Yeah.

00:04:47.910 --> 00:04:51.900
For the actual 3D WebGL stuff,
we wrote it all.

00:04:51.900 --> 00:04:54.320
And again, from my background,
I'm a video game

00:04:54.320 --> 00:04:56.550
developer in the past.

00:04:56.550 --> 00:05:00.340
So I'm used to writing on
PlayStation 2 and 3, for Xbox,

00:05:00.340 --> 00:05:01.000
things like that.

00:05:01.000 --> 00:05:04.740
So it's pretty much OpenGL,
DirectX, all no problems.

00:05:04.740 --> 00:05:06.682
So for me, that was no problem
dealing with shaders and how

00:05:06.682 --> 00:05:09.080
you handle all the
actual low-level

00:05:09.080 --> 00:05:10.080
vertex buffers and that.

00:05:10.080 --> 00:05:11.670
It was pretty easy.

00:05:11.670 --> 00:05:13.750
So for that, that's all
completely ours.

00:05:13.750 --> 00:05:16.940
On the interface side, I mean,
the one thing we are using is

00:05:16.940 --> 00:05:17.960
jQuery, very heavily.

00:05:17.960 --> 00:05:20.840
So sort of all of the state
transformations, and

00:05:20.840 --> 00:05:23.315
animations, and movement
you see on that UI are

00:05:23.315 --> 00:05:23.950
all done that way.

00:05:23.950 --> 00:05:25.520
And so that was a pretty
powerful thing, so we didn't

00:05:25.520 --> 00:05:27.450
have to reinvent all
those wheels.

00:05:27.450 --> 00:05:28.640
And again, that's
kind of what--

00:05:28.640 --> 00:05:30.410
when we were looking at it--

00:05:30.410 --> 00:05:32.960
we're looking at how the slice
it of the web side versus the

00:05:32.960 --> 00:05:35.340
3D side, and really bringing
the two together.

00:05:35.340 --> 00:05:37.250
So the main one was probably
the jQuery

00:05:37.250 --> 00:05:38.990
library that we used.

00:05:38.990 --> 00:05:41.460
PAUL IRISH: So inside the
application, I get to kind of

00:05:41.460 --> 00:05:44.050
choose the head, and
the torso, and

00:05:44.050 --> 00:05:45.970
the legs of my robot.

00:05:45.970 --> 00:05:47.170
There's a bunch of
different models.

00:05:47.170 --> 00:05:48.930
I can choose specific ones.

00:05:48.930 --> 00:05:49.700
I can randomize.

00:05:49.700 --> 00:05:51.560
I can then color them all.

00:05:51.560 --> 00:05:54.690
For these actual components--

00:05:54.690 --> 00:05:57.470
so these are all 3D models.

00:05:57.470 --> 00:06:00.820
How did you basically take that
from a 3D model that was

00:06:00.820 --> 00:06:04.100
designed in a modeling
application, and bring it out

00:06:04.100 --> 00:06:06.830
into something that you
can now see in Web GL?

00:06:06.830 --> 00:06:09.270
Kind of, what's the process
for taking that there?

00:06:09.270 --> 00:06:09.580
MARK DANKS: Yeah.

00:06:09.580 --> 00:06:12.680
So we had a bunch of modelers
who worked with us.

00:06:12.680 --> 00:06:15.260
And they're standard
game modelers or

00:06:15.260 --> 00:06:16.370
worked in special effects.

00:06:16.370 --> 00:06:19.095
So they're used to using
programs like Maya and Max.

00:06:19.095 --> 00:06:21.035
They're the high-end
modeling packages.

00:06:21.035 --> 00:06:24.240
And in that case, we just
exported to sort of a generic

00:06:24.240 --> 00:06:25.620
format called OBJ.

00:06:25.620 --> 00:06:28.040
It's kind of a lingua franca
for the industry.

00:06:28.040 --> 00:06:30.310
And then I just wrote a
converter that basically spit

00:06:30.310 --> 00:06:32.440
out all the stuff, WebGL
ready to go.

00:06:32.440 --> 00:06:34.970
So I could just load it directly
in the vertex buffers

00:06:34.970 --> 00:06:35.680
and things like that.

00:06:35.680 --> 00:06:38.610
So for me, it's a fairly
straightforward pipeline.

00:06:38.610 --> 00:06:40.960
The kind of interesting thing
about how we have to do, is

00:06:40.960 --> 00:06:44.400
since we have the additional
wrinkle of 3D printing, what

00:06:44.400 --> 00:06:47.330
we 3D print and what you
interact with on the screen

00:06:47.330 --> 00:06:49.060
are actually different
geometries.

00:06:49.060 --> 00:06:52.250
So on the screen, your robot's
about 10,000 polygons.

00:06:52.250 --> 00:06:54.890
We print the robot at about
half a million.

00:06:54.890 --> 00:06:57.440
So we actually go through a
pretty big translation step on

00:06:57.440 --> 00:07:00.710
the back end, where we literally
recreate everything

00:07:00.710 --> 00:07:03.020
you've done on the screen,
and convert it to

00:07:03.020 --> 00:07:04.630
a print-ready model.

00:07:04.630 --> 00:07:06.585
So that was actually one of the
bigger challenges, of sort

00:07:06.585 --> 00:07:08.700
of how do you-- what you'd see
on the screen, if you print

00:07:08.700 --> 00:07:09.910
it, like nothing
would be round.

00:07:09.910 --> 00:07:12.150
Everything would be faceted
and angular.

00:07:12.150 --> 00:07:14.400
You can't pull tricks with
normals and shading in the

00:07:14.400 --> 00:07:16.450
real world type stuff.

00:07:16.450 --> 00:07:19.320
So yeah, so we actually have
this entire translation

00:07:19.320 --> 00:07:20.630
process that occurs.

00:07:20.630 --> 00:07:22.940
It's kind of an interesting
thing that, when it's running

00:07:22.940 --> 00:07:26.960
actually in the browser, every
frame, basically, I destroy

00:07:26.960 --> 00:07:28.910
the robot and re-create
it from scratch.

00:07:28.910 --> 00:07:31.310
So every single texture, every
single model, every single

00:07:31.310 --> 00:07:32.010
component--

00:07:32.010 --> 00:07:34.170
I rebuild from these
instructions.

00:07:34.170 --> 00:07:35.800
So every frame is [INAUDIBLE]

00:07:35.800 --> 00:07:36.740
redoing all of that.

00:07:36.740 --> 00:07:39.240
And then we spit out that same
sort of instruction set.

00:07:39.240 --> 00:07:41.620
And that's the part then, that
we take these high-resolution

00:07:41.620 --> 00:07:43.835
3D models, run it through
another tool that reconstructs

00:07:43.835 --> 00:07:45.500
that, and makes a
printable model.

00:07:45.500 --> 00:07:46.180
PAUL IRISH: Wow.

00:07:46.180 --> 00:07:47.440
Oh, that's fantastic.

00:07:47.440 --> 00:07:51.430
So one question I just had, the
[? OBJ ?] format that you

00:07:51.430 --> 00:07:52.740
export the models as--

00:07:52.740 --> 00:07:56.390
is that sent down in a
serialized format to the

00:07:56.390 --> 00:07:59.060
browser, which then interprets
it, and brings it up?

00:07:59.060 --> 00:07:59.390
MARK DANKS: Yeah.

00:07:59.390 --> 00:08:01.790
No, we convert it to
a JSON format.

00:08:01.790 --> 00:08:04.850
So that basically with that,
I use this for two reasons.

00:08:04.850 --> 00:08:08.390
One is that we need to just
load it directly into the

00:08:08.390 --> 00:08:11.822
WebGL vertex buffers and
texture coordinates and

00:08:11.822 --> 00:08:12.740
normals and all that
kind of stuff.

00:08:12.740 --> 00:08:14.160
So that's just a straight--

00:08:14.160 --> 00:08:15.450
load in the buffer,
we're done.

00:08:15.450 --> 00:08:16.750
The other thing that is--

00:08:16.750 --> 00:08:19.615
since we do accurate collision
tests against the models--

00:08:19.615 --> 00:08:21.270
I actually use that
exact same data.

00:08:21.270 --> 00:08:24.440
It's basically massaged in a way
that the WebGL can handle

00:08:24.440 --> 00:08:26.720
it, but then my collision code
can handle it as well.

00:08:26.720 --> 00:08:29.920
So we can then go off and
do all the collision on

00:08:29.920 --> 00:08:31.230
the exact same data.

00:08:31.230 --> 00:08:32.340
And there, I have to
get the normals.

00:08:32.340 --> 00:08:33.900
I have to get the
UV coordinates.

00:08:33.900 --> 00:08:35.070
So I need all the
data anyways.

00:08:35.070 --> 00:08:38.700
So rather than try to split it
apart, send double the data

00:08:38.700 --> 00:08:40.900
down, I sort of have a little
custom format that we made

00:08:40.900 --> 00:08:43.159
that just encapsulates
it all in one type.

00:08:43.159 --> 00:08:43.860
PAUL IRISH: That's fantastic.

00:08:43.860 --> 00:08:45.980
So I'm curious--

00:08:45.980 --> 00:08:46.880
a lot--

00:08:46.880 --> 00:08:50.250
typically with applications like
this, what people might

00:08:50.250 --> 00:08:54.120
run into is that the amount of
data, like the models that

00:08:54.120 --> 00:08:56.560
they're sending down or
everything else--

00:08:56.560 --> 00:08:58.980
it gets quite big.

00:08:58.980 --> 00:09:01.520
So on the web, you have the
challenge of, you're sending

00:09:01.520 --> 00:09:04.360
out all the bytes to the user
that they're going to see.

00:09:04.360 --> 00:09:05.280
And they can be sizable.

00:09:05.280 --> 00:09:07.540
So kind of like, what are
the challenges that

00:09:07.540 --> 00:09:08.540
you ran into there?

00:09:08.540 --> 00:09:11.470
And how did you solve
performance, load

00:09:11.470 --> 00:09:13.000
time, things like that?

00:09:13.000 --> 00:09:13.360
MARK DANKS: Yeah.

00:09:13.360 --> 00:09:16.000
So we started doing
it in two ways--

00:09:16.000 --> 00:09:17.620
well three, maybe.

00:09:17.620 --> 00:09:20.610
The honest truth is, we just
went, we hope people have a

00:09:20.610 --> 00:09:22.240
fast net connection.

00:09:22.240 --> 00:09:25.540
And just all of the data
down the pipeline.

00:09:25.540 --> 00:09:27.370
But that being said, then what
we did is we did a lot of

00:09:27.370 --> 00:09:28.150
optimization.

00:09:28.150 --> 00:09:30.940
So we do everything from welding
our vertices, removing

00:09:30.940 --> 00:09:31.930
dead things.

00:09:31.930 --> 00:09:34.205
My JSON format is fairly
compressed.

00:09:34.205 --> 00:09:37.710
So like, if I'm sending a float
down, I'll look at how

00:09:37.710 --> 00:09:39.810
many digits am I actually
sending, and I'll strip it

00:09:39.810 --> 00:09:40.890
back, and things like that.

00:09:40.890 --> 00:09:44.720
So we were able to get it from
sort of a brain dead, F print

00:09:44.720 --> 00:09:46.490
float type mindset.

00:09:46.490 --> 00:09:48.730
We usually able to reduce
it down about a

00:09:48.730 --> 00:09:50.540
third from that size.

00:09:50.540 --> 00:09:51.120
So that was good.

00:09:51.120 --> 00:09:52.550
The other thing is we're
not doing any

00:09:52.550 --> 00:09:55.830
tricks with the textures.

00:09:55.830 --> 00:09:57.770
They're just straight up
PNGs we send through.

00:09:57.770 --> 00:09:59.020
But they are compressed.

00:09:59.020 --> 00:10:02.440
The other thing though, that we
do do there, is when you're

00:10:02.440 --> 00:10:06.470
interacting in the browser,
the textures, the PNG ,

00:10:06.470 --> 00:10:17.380
stamps, are just 128 by 128.

00:10:17.380 --> 00:10:17.705
PAUL IRISH: Uh.

00:10:17.705 --> 00:10:19.620
MALE SPEAKER: We can
edit this in post.

00:10:19.620 --> 00:10:21.072
FEMALE SPEAKER: What happened?

00:10:21.072 --> 00:10:22.340
Did we lose him?

00:10:22.340 --> 00:10:24.550
PAUL IRISH: Mark's back.

00:10:24.550 --> 00:10:26.706
MARK DANKS: Oh--

00:10:26.706 --> 00:10:28.020
how much of that was lost?

00:10:28.020 --> 00:10:29.304
MALE SPEAKER: Still there?

00:10:29.304 --> 00:10:30.780
MARK DANKS: Yeah, we're
still here.

00:10:30.780 --> 00:10:33.430
PAUL IRISH: We lost the
last third of it.

00:10:33.430 --> 00:10:33.676
MARK DANKS: OK.

00:10:33.676 --> 00:10:35.905
I'll say it again.

00:10:35.905 --> 00:10:36.400
PAUL IRISH: OK.

00:10:36.400 --> 00:10:37.820
MARK DANKS: OK, so--

00:10:37.820 --> 00:10:38.560
PAUL IRISH: Here, let me--

00:10:38.560 --> 00:10:39.110
I'll prompt you--

00:10:39.110 --> 00:10:39.955
MARK DANKS: You'll
ask the question?

00:10:39.955 --> 00:10:41.205
PAUL IRISH: Yep.

00:10:42.970 --> 00:10:46.370
So Mark, typically you run
into a problem with

00:10:46.370 --> 00:10:48.880
applications like this, that
you're sending down this model

00:10:48.880 --> 00:10:50.530
data, you're sending out
a lot of other things.

00:10:50.530 --> 00:10:53.660
And you have to deal with the
fact that it adds up to quite

00:10:53.660 --> 00:10:55.870
a few bytes.

00:10:55.870 --> 00:10:59.540
Now what kind of challenges did
you run into in regard to

00:10:59.540 --> 00:11:01.485
like performance and
load time, and how

00:11:01.485 --> 00:11:03.210
did you solve them?

00:11:03.210 --> 00:11:03.580
MARK DANKS: Yeah.

00:11:03.580 --> 00:11:06.590
So there are sort of two main
places where we're sending

00:11:06.590 --> 00:11:07.340
lots of data.

00:11:07.340 --> 00:11:09.080
One is the geometry itself.

00:11:09.080 --> 00:11:12.140
And in that one, since the
sort of internal data for

00:11:12.140 --> 00:11:14.160
collision and all that is the
exact same as the rendering,

00:11:14.160 --> 00:11:15.420
we don't have to
double that up.

00:11:15.420 --> 00:11:17.490
So that was one nice thing.

00:11:17.490 --> 00:11:20.060
Then I did a lot of
optimizations on-- the data we

00:11:20.060 --> 00:11:22.200
send through is in JSON format,
and I actually really

00:11:22.200 --> 00:11:26.060
massage it, so the floating
point numbers, we use as

00:11:26.060 --> 00:11:27.720
smallest numbers as possible.

00:11:27.720 --> 00:11:30.370
And I was able to get down from
sort of a naive export

00:11:30.370 --> 00:11:33.860
out of my tool, down about a
third of the size, really

00:11:33.860 --> 00:11:36.750
looking at how much resolution
in the UV coordinates do I

00:11:36.750 --> 00:11:37.980
actually need?

00:11:37.980 --> 00:11:40.250
OK, I don't need out to the
millions place, only send two

00:11:40.250 --> 00:11:42.130
digits kind of thing.

00:11:42.130 --> 00:11:45.050
Then the other thing is on the
textures, those are actually

00:11:45.050 --> 00:11:47.240
128 by 128 inside the engine.

00:11:47.240 --> 00:11:49.290
So they're pretty small
thumbnails, basically.

00:11:49.290 --> 00:11:51.630
But then when we generate the
print model on the back end,

00:11:51.630 --> 00:11:53.670
we actually use 1024 by 1024.

00:11:53.670 --> 00:11:56.360
So again, we're able to sort
of trick it, and only send

00:11:56.360 --> 00:11:57.190
through the data we need.

00:11:57.190 --> 00:11:59.320
So you can see what it will look
like, but then when we go

00:11:59.320 --> 00:12:01.730
to the print model, we can use
these really high-resolution

00:12:01.730 --> 00:12:04.060
textures that are just
awesome-looking.

00:12:04.060 --> 00:12:06.560
The other thing that we do
heavily, heavily, heavily, is

00:12:06.560 --> 00:12:09.480
the entire engine is
asynchronous loading.

00:12:09.480 --> 00:12:11.410
So we don't load anything
until it's needed.

00:12:11.410 --> 00:12:15.550
And in fact, if you select a
part, we don't even load it

00:12:15.550 --> 00:12:17.690
until it would appear
on the robot.

00:12:17.690 --> 00:12:19.880
So for instance, if you select
the top hat, you can

00:12:19.880 --> 00:12:20.900
immediately select it.

00:12:20.900 --> 00:12:21.620
We don't do any loading.

00:12:21.620 --> 00:12:22.220
We just wait.

00:12:22.220 --> 00:12:25.653
And then you actually move over
the model and now, OK, we

00:12:25.653 --> 00:12:27.020
have to see the top hat--
that's when we

00:12:27.020 --> 00:12:28.540
finally load it through.

00:12:28.540 --> 00:12:29.030
PAUL IRISH: I see.

00:12:29.030 --> 00:12:30.550
That's really smart.

00:12:30.550 --> 00:12:33.150
So yeah, this is really
powerful.

00:12:33.150 --> 00:12:37.200
I'm wondering, when you were
building it, was there any

00:12:37.200 --> 00:12:40.690
issues where you kind of wished
that you had some extra

00:12:40.690 --> 00:12:43.020
feature that was just not
available in the browsers you

00:12:43.020 --> 00:12:46.190
were targeting, or any
challenges like that?

00:12:46.190 --> 00:12:47.340
MARK DANKS: Well, yeah.

00:12:47.340 --> 00:12:51.640
I mean, I wish WebGL was a
little more ubiquitous.

00:12:51.640 --> 00:12:54.890
But that was something that we
decided early on that we

00:12:54.890 --> 00:12:56.460
needed to go for the best
experience, and we

00:12:56.460 --> 00:12:58.410
just go with it.

00:12:58.410 --> 00:13:00.740
Interestingly enough, I've
actually made change that's on

00:13:00.740 --> 00:13:03.910
some of our other apps now,
where if you don't have WebGL,

00:13:03.910 --> 00:13:07.940
we actually render
and canvas 2D.

00:13:07.940 --> 00:13:09.450
And it turned out to
be really easy.

00:13:09.450 --> 00:13:10.790
I kind of wrote it
in a weekend.

00:13:10.790 --> 00:13:12.830
And the reason was because I
had all the collision data,

00:13:12.830 --> 00:13:15.300
which was the triangles, and so
all I do is I just project

00:13:15.300 --> 00:13:17.850
it into canvas as tri's.

00:13:17.850 --> 00:13:20.540
I do a depth sort on all the
triangles, and you're set.

00:13:20.540 --> 00:13:22.450
So we actually have
a fallback now.

00:13:22.450 --> 00:13:25.080
And so I can actually run-- not
"My Robot Nation"-- but

00:13:25.080 --> 00:13:27.173
some of our other apps, I can
run on my iPhone and my iPad

00:13:27.173 --> 00:13:28.030
without a problem.

00:13:28.030 --> 00:13:28.770
PAUL IRISH: Oh, that's
really cool.

00:13:28.770 --> 00:13:31.190
MARK DANKS: So that was
kind of cool to see.

00:13:31.190 --> 00:13:34.320
I think the general thing that
we were seeing with it is just

00:13:34.320 --> 00:13:37.640
that we're so JavaScript
heavy.

00:13:37.640 --> 00:13:39.070
And so it was--

00:13:39.070 --> 00:13:40.680
over the development--

00:13:40.680 --> 00:13:43.300
it was in development for six or
nine months kind of thing.

00:13:43.300 --> 00:13:45.677
It was really cool to see the
browsers getting better and

00:13:45.677 --> 00:13:46.800
better on the JavaScript side.

00:13:46.800 --> 00:13:49.160
And literally, we started
telling-- by the end, we could

00:13:49.160 --> 00:13:52.060
tell the modelers "add more
polygons." You can do it now.

00:13:52.060 --> 00:13:54.535
Whereas in the beginning, we
were really restricted on what

00:13:54.535 --> 00:13:55.960
was possible there.

00:13:55.960 --> 00:13:57.600
A lot of the stuff that--

00:13:57.600 --> 00:14:00.660
I was doing some pretty weird
optimizations on my math

00:14:00.660 --> 00:14:02.230
libraries, just trying
to trick the

00:14:02.230 --> 00:14:04.230
browser into going fast--

00:14:04.230 --> 00:14:06.160
and by the end, it was sort of,
good, I don't have to do

00:14:06.160 --> 00:14:06.900
that anymore.

00:14:06.900 --> 00:14:09.120
And so that was really
a nice thing that--

00:14:09.120 --> 00:14:12.790
if you're doing a little
one-off, give, show, hide kind

00:14:12.790 --> 00:14:14.280
of thing, you don't
really care.

00:14:14.280 --> 00:14:15.400
But when you're doing something
like this, that's

00:14:15.400 --> 00:14:17.800
trying to run at 60 frames,
suddenly, your performance

00:14:17.800 --> 00:14:18.455
matters a lot.

00:14:18.455 --> 00:14:19.222
PAUL IRISH: Yep.

00:14:19.222 --> 00:14:20.670
Absolutely.

00:14:20.670 --> 00:14:21.430
MARK DANKS: Yeah.

00:14:21.430 --> 00:14:25.380
I think other things that I look
at and look forward to

00:14:25.380 --> 00:14:29.910
are a lot more binary support
for data coming to the system.

00:14:29.910 --> 00:14:31.910
So that's the kind of thing
where, if I had

00:14:31.910 --> 00:14:33.410
an easy way to encode--

00:14:33.410 --> 00:14:36.180
basically my JSON
file is binary--

00:14:36.180 --> 00:14:37.880
that would be pretty cool.

00:14:37.880 --> 00:14:39.910
A lot of the stuff-- that
there's a lot of people doing

00:14:39.910 --> 00:14:42.290
work, I know, on texture
compression, and like

00:14:42.290 --> 00:14:44.360
decompressing it in a shader.

00:14:44.360 --> 00:14:45.650
So stuff like that is--

00:14:45.650 --> 00:14:48.630
I've been watching pretty
closely and kind of waiting

00:14:48.630 --> 00:14:49.815
for it to become a little
more mainstream

00:14:49.815 --> 00:14:50.840
before putting it in.

00:14:50.840 --> 00:14:54.590
But the new projects we're
looking at are even bigger

00:14:54.590 --> 00:14:55.260
than this one.

00:14:55.260 --> 00:14:57.750
So we're trying to find ways
that we can keep on pushing

00:14:57.750 --> 00:14:58.660
the content down.

00:14:58.660 --> 00:15:03.300
I think definitely our next big
effort is really on, how

00:15:03.300 --> 00:15:07.160
do we get the bandwidth
requirements down?

00:15:07.160 --> 00:15:08.446
Because once it's on the
client, it seems

00:15:08.446 --> 00:15:09.360
to run pretty well.

00:15:09.360 --> 00:15:10.810
But getting there
is the problem.

00:15:10.810 --> 00:15:12.340
PAUL IRISH: Yeah.

00:15:12.340 --> 00:15:16.600
I'm curious about kind of--
staying in tune with some of

00:15:16.600 --> 00:15:19.250
these conversations and the
features that are being

00:15:19.250 --> 00:15:22.270
standardized and being imposed,
it's a little tricky

00:15:22.270 --> 00:15:23.790
sometimes to kind of
monitor where these

00:15:23.790 --> 00:15:25.870
conversations are happening.

00:15:25.870 --> 00:15:28.370
How are you tracking, for
instance, texture compression,

00:15:28.370 --> 00:15:29.600
or things like that?

00:15:29.600 --> 00:15:30.140
MARK DANKS: Yeah.

00:15:30.140 --> 00:15:32.690
So thankfully, it's
really awesome.

00:15:32.690 --> 00:15:35.970
We got hooked in with the WebGL
community pretty early.

00:15:35.970 --> 00:15:38.010
And we actually presented
it to [? SIGGRAPH ?]

00:15:38.010 --> 00:15:39.900
Birds of a Feather a
couple years ago.

00:15:39.900 --> 00:15:42.420
And that's sort of where we sort
of burst on the scene and

00:15:42.420 --> 00:15:43.750
got introduced to everyone.

00:15:43.750 --> 00:15:45.370
So now we do it-- it's
everything from the mailing

00:15:45.370 --> 00:15:47.410
list-- which is really helpful
and really, really good.

00:15:47.410 --> 00:15:48.850
A lot of stuff happens there.

00:15:48.850 --> 00:15:51.980
Most of the people know I kind
of lurk, but I read every

00:15:51.980 --> 00:15:53.410
single thing that
goes through.

00:15:53.410 --> 00:15:54.040
And then--

00:15:54.040 --> 00:15:55.740
I'm based in San Francisco--

00:15:55.740 --> 00:15:58.440
and so we have WebGL meet-ups
once a month.

00:15:58.440 --> 00:16:00.430
So those are pretty good, where
lots of presentations

00:16:00.430 --> 00:16:02.810
are given and talking about
what's going on.

00:16:02.810 --> 00:16:04.090
I presented there.

00:16:04.090 --> 00:16:07.700
Actually, my company's hosting
the next one on October 25th.

00:16:07.700 --> 00:16:10.205
So that kind of thing is a good
place to meet people who

00:16:10.205 --> 00:16:12.430
are doing this, and sort of
find out what's going on.

00:16:12.430 --> 00:16:14.060
And also it's really--

00:16:14.060 --> 00:16:17.950
all the people who are helping
make WebGL real are really

00:16:17.950 --> 00:16:20.565
open, and accessible, and really
easy to talk with.

00:16:20.565 --> 00:16:22.385
So that's been a really
nice thing as well.

00:16:22.385 --> 00:16:23.190
PAUL IRISH: Awesome.

00:16:23.190 --> 00:16:27.420
Well I encourage everyone to go
check out "My Robot Nation"

00:16:27.420 --> 00:16:29.110
and dig under the covers
a little bit.

00:16:29.110 --> 00:16:32.650
It's a really well-developed
app, and creates a great

00:16:32.650 --> 00:16:34.220
experience--

00:16:34.220 --> 00:16:37.940
one of the first great, solid
WebGL apps that's definitely

00:16:37.940 --> 00:16:39.430
not a demo.

00:16:39.430 --> 00:16:42.440
And it's real, creates a real
thing that you can hold, even.

00:16:42.440 --> 00:16:44.740
So I encourage everyone to
go check it out, see

00:16:44.740 --> 00:16:46.190
what's going on.

00:16:46.190 --> 00:16:49.090
And Mark, thank you very
much for joining us and

00:16:49.090 --> 00:16:49.900
telling us about it.

00:16:49.900 --> 00:16:50.762
MARK DANKS: So one other
thing, if I can

00:16:50.762 --> 00:16:51.960
make a plug, here--

00:16:51.960 --> 00:16:53.320
we're going to actually
expand it a bit.

00:16:53.320 --> 00:16:57.840
And I'm actually in charge
of a another group called

00:16:57.840 --> 00:16:58.270
cubify.com.

00:16:58.270 --> 00:16:59.780
And one of the things we're
going to be releasing here in

00:16:59.780 --> 00:17:02.170
the next couple months
is actually an SDK.

00:17:02.170 --> 00:17:04.440
So people can use this
engine to make their

00:17:04.440 --> 00:17:06.430
own 3D printed models.

00:17:06.430 --> 00:17:08.349
So that's something which--

00:17:08.349 --> 00:17:10.760
keep an eye open for it--
probably end of October,

00:17:10.760 --> 00:17:12.892
November time-frame, this code's
going to be out and

00:17:12.892 --> 00:17:13.819
sort of fully supported.

00:17:13.819 --> 00:17:14.199
PAUL IRISH: Great.

00:17:14.199 --> 00:17:15.940
And say the name of it again?

00:17:15.940 --> 00:17:17.990
MARK DANKS: It's cubify.com.

00:17:17.990 --> 00:17:19.740
And if you go there, you'll
see a bunch of other apps.

00:17:19.740 --> 00:17:22.410
In fact, just last week,
we released an Android

00:17:22.410 --> 00:17:23.770
customization app.

00:17:23.770 --> 00:17:25.210
So you can make your own
Android with the same

00:17:25.210 --> 00:17:25.900
techniques.

00:17:25.900 --> 00:17:26.710
PAUL IRISH: Cool.

00:17:26.710 --> 00:17:28.099
That's rad.

00:17:28.099 --> 00:17:28.540
All right.

00:17:28.540 --> 00:17:28.800
Nice.

00:17:28.800 --> 00:17:30.190
Well, thanks again, Mark.

00:17:30.190 --> 00:17:31.392
This has been great.

00:17:31.392 --> 00:17:32.264
MARK DANKS: Thank you so much.

00:17:32.264 --> 00:17:33.514
PAUL IRISH: All right, cheers.

