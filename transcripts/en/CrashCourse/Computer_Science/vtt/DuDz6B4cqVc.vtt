WEBVTT
Kind: captions
Language: en

00:00:03.120 --> 00:00:05.600
Hi, I'm Carrie Anne, and welcome to Crash
Course Computer Science!

00:00:05.610 --> 00:00:09.990
Last episode, we discussed a few example classic
algorithms, like sorting a list of numbers

00:00:09.990 --> 00:00:11.890
and finding the shortest path in a graph.

00:00:11.890 --> 00:00:16.180
What we didn’t talk much about, is how the
data the algorithms ran on was stored in computer

00:00:16.180 --> 00:00:16.820
memory.

00:00:16.820 --> 00:00:19.940
You don’t want your data to be like John
Green’s college dorm room, with food, clothing

00:00:19.950 --> 00:00:21.380
and papers strewn everywhere.

00:00:21.380 --> 00:00:25.360
Instead, we want our data to be structured,
so that it’s organized, allowing things

00:00:25.360 --> 00:00:27.080
to be easily retrieved and read.

00:00:27.080 --> 00:00:29.660
For this, computer scientists use Data Structures!

00:00:29.800 --> 00:00:39.040
INTRO

00:00:39.040 --> 00:00:43.649
We already introduced one basic data structure
last episode, Arrays, also called lists or

00:00:43.649 --> 00:00:45.340
Vectors in some languages.

00:00:45.340 --> 00:00:47.200
These are a series of values stored in memory.

00:00:47.210 --> 00:00:51.360
So instead of just a single value being saved
into a variable, like ‘j equals 5’, we

00:00:51.379 --> 00:00:55.340
can define a whole series of numbers, and
save that into an array variable.

00:00:55.340 --> 00:00:59.649
To be able to find a particular value in this
array, we have to specify an index.

00:00:59.649 --> 00:01:04.030
Almost all programing languages start arrays
at index 0, and use a square bracket syntax

00:01:04.030 --> 00:01:05.319
to denote array access.

00:01:05.319 --> 00:01:10.080
So, for example, if we want to add the values
in the first and third spots of our array

00:01:10.080 --> 00:01:14.369
‘j’, and save that into a variable ‘a’,
we would write a line of code like this.

00:01:14.369 --> 00:01:16.340
How an array is stored in memory is pretty
straightforward.

00:01:16.340 --> 00:01:21.580
For simplicity, let’s say that the compiler
chose to store ours at memory location 1,000.

00:01:21.580 --> 00:01:26.460
The array contains 7 numbers, and these are stored one after another in memory, as seen here.

00:01:26.580 --> 00:01:31.780
So when we write “j index of 0”, the computer
goes to memory location 1,000, with an offset

00:01:31.789 --> 00:01:33.899
of 0, and we get the value 5.

00:01:33.899 --> 00:01:38.429
If we wanted to retrieve “j index of 5”,
our program goes to memory location 1000,

00:01:38.429 --> 00:01:42.119
plus an offset of 5, which in this case, holds
a value of 4.

00:01:42.119 --> 00:01:45.229
It’s easy to confuse the fifth number in
the array with the number at index 5.

00:01:45.229 --> 00:01:46.710
They are not the same.

00:01:46.710 --> 00:01:50.429
Remember, the number at index 5 is the 6th
number in the array because the first number

00:01:50.429 --> 00:01:51.600
is at index 0.

00:01:51.600 --> 00:01:55.860
Arrays are extremely versatile data structures,
used all the time, and so there are many functions

00:01:55.860 --> 00:01:57.820
that can handle them to do useful things.

00:01:57.820 --> 00:02:01.489
For example, pretty much every programming
language comes with a built-in sort function,

00:02:01.489 --> 00:02:04.240
where you just pass in your array, and it
comes back sorted.

00:02:04.240 --> 00:02:06.820
So there’s no need to write that algorithm
from scratch.

00:02:06.820 --> 00:02:11.380
Very closely related are Strings, which are
just arrays of characters, like letters, numbers,

00:02:11.380 --> 00:02:13.610
punctuation and other written symbols.

00:02:13.610 --> 00:02:16.900
We talked about how computers store characters
way back in Episode 4.

00:02:16.900 --> 00:02:20.660
Most often, to save a string into memory,
you just put it in quotes, like so.

00:02:20.660 --> 00:02:23.010
Although it doesn’t look like an array,
it is.

00:02:23.010 --> 00:02:24.849
Behind the scenes, the memory looks like this.

00:02:24.849 --> 00:02:27.610
Note that the string ends with a zero in memory.

00:02:27.610 --> 00:02:31.099
It’s not the character zero, but the binary
value 0.

00:02:31.099 --> 00:02:34.959
This is called the null character, and denotes
the end of the string in memory.

00:02:34.959 --> 00:02:38.459
This is important because if I call a function
like “print quote”, which writes the string

00:02:38.459 --> 00:02:42.459
to the screen, it prints out each character
in turn starting at the first memory location,

00:02:42.459 --> 00:02:44.709
but it needs to know when to stop!

00:02:44.709 --> 00:02:47.930
Otherwise, it would print out every single
thing in memory as text.

00:02:47.930 --> 00:02:50.970
The zero tells string functions when to stop.

00:02:50.970 --> 00:02:54.170
Because computers work with text so often,
there are many functions that specifically

00:02:54.170 --> 00:02:55.170
handle strings.

00:02:55.170 --> 00:02:59.859
For example, many programming languages have
a string concatenation function, or “strcat”,

00:02:59.859 --> 00:03:03.390
which takes in two strings, and copies the
second one to the end of the first.

00:03:03.390 --> 00:03:07.310
We can use arrays for making one dimensional
lists, but sometimes you want to manipulate

00:03:07.310 --> 00:03:11.140
data that is two dimensional, like a grid
of numbers in a spreadsheet, or the pixels

00:03:11.140 --> 00:03:12.349
on your computer screen.

00:03:12.349 --> 00:03:14.310
For this, we need a Matrix.

00:03:14.310 --> 00:03:17.010
You can think of a Matrix as an array of arrays!

00:03:17.010 --> 00:03:21.890
So a 3 by 3 matrix is really 2 an array of
size 3, with each index storing an array of

00:03:21.890 --> 00:03:23.010
size 3.

00:03:23.010 --> 00:03:24.889
We can initialize a matrix like so.

00:03:24.889 --> 00:03:27.550
In memory, this is packed together in order
like this.

00:03:27.550 --> 00:03:32.220
To access a value, you need to specify two
indexes, like “J index of 2, then index

00:03:32.240 --> 00:03:37.400
of 1” - this tells the computer you’re
looking for the item in subarray 2 at position 1.

00:03:37.400 --> 00:03:39.000
And this would give us the value 12.

00:03:39.010 --> 00:03:42.980
The cool thing about matrices is we’re not
limited to 3 by 3 -- we can make them any

00:03:42.990 --> 00:03:46.700
size we want -- and we can also make them
any number of dimensions we want.

00:03:46.700 --> 00:03:50.299
For example, we can create a five dimensional
matrix and access it like this.

00:03:50.299 --> 00:03:54.799
That’s right, you now know how to access
a five dimensional matrix -- tell your friends!

00:03:54.799 --> 00:03:59.230
So far, we’ve been storing individual numbers
or letters into our arrays or matrices.

00:03:59.230 --> 00:04:02.290
But often it’s useful to store a block of
related variables together.

00:04:02.290 --> 00:04:05.900
Like, you might want to store a bank account
number along with its balance.

00:04:05.900 --> 00:04:09.310
Groups of variables like these can be bundled
together into a Struct.

00:04:09.310 --> 00:04:12.830
Now we can create variables that aren’t
just single numbers, but are compound data

00:04:12.830 --> 00:04:16.209
structures, able to store several pieces of
data at once.

00:04:16.209 --> 00:04:20.139
We can even make arrays of structs that we
define, which are automatically bundled together

00:04:20.139 --> 00:04:21.139
in memory.

00:04:21.139 --> 00:04:25.750
If we access, for example, J index of 0, we
get back the whole struct stored there, and

00:04:25.750 --> 00:04:28.810
we can pull the specific account number and
balance data we want.

00:04:28.810 --> 00:04:32.500
This array of structs, like any other array,
gets created at a fixed size that can’t

00:04:32.500 --> 00:04:34.260
be enlarged to add more items.

00:04:34.260 --> 00:04:38.860
Also, arrays must be stored in order in memory,
making it hard to add a new item to the middle.

00:04:38.870 --> 00:04:42.840
But, the struct data structure can be used
for building more complicated data structures

00:04:42.840 --> 00:04:44.180
that avoid these restrictions.

00:04:44.180 --> 00:04:46.560
Let’s take a look at this struct that’s
called a “node”.

00:04:46.560 --> 00:04:49.620
It stores a variable, like a number, and also
a pointer.

00:04:49.620 --> 00:04:53.780
A pointer is a special variable that points,
hence the name, to a location in memory.

00:04:53.780 --> 00:04:57.960
Using this struct, we can create a linked
list, which is a flexible data structure that

00:04:57.980 --> 00:04:59.280
can store many nodes.

00:04:59.280 --> 00:05:02.660
It does this by having each node point to
the next node in the list.

00:05:02.660 --> 00:05:09.480
Let’s imagine we have three node structs
saved in memory, at locations 1000, 1002 and 1008.

00:05:09.500 --> 00:05:13.490
They might be spaced apart, because they were
created at different times, and other data

00:05:13.490 --> 00:05:14.660
can sit between them.

00:05:14.660 --> 00:05:19.569
So, you see that the first node contains the
value 7, and the location 1008 in its “next”

00:05:19.569 --> 00:05:20.569
pointer.

00:05:20.569 --> 00:05:24.330
This means that the next node in the linked
list is located at memory location 1008.

00:05:24.330 --> 00:05:28.650
Looking down the linked list, to the next
node, we see it stores the value 112 and points

00:05:28.650 --> 00:05:31.190
to another node at location 1002.

00:05:31.190 --> 00:05:36.130
If we follow that, we find a node that contains
the value 14 and points back to the first

00:05:36.130 --> 00:05:37.580
node at location 1000.

00:05:37.580 --> 00:05:41.580
So this linked list happened to be circular,
but it could also have been terminated by

00:05:41.580 --> 00:05:45.960
using a next pointer value of 0 -- the null
value -- which would indicate we’ve reached

00:05:45.960 --> 00:05:47.000
the end of the list.

00:05:47.000 --> 00:05:50.560
When programmers use linked lists, they rarely
look at the memory values stored in the next

00:05:50.560 --> 00:05:51.560
pointers.

00:05:51.560 --> 00:05:55.050
Instead, they can use an abstraction of a
linked list, that looks like this, which is

00:05:55.050 --> 00:05:56.850
much easier to conceptualize.

00:05:56.850 --> 00:06:01.190
Unlike an array, whose size has to be pre-defined,
linked lists can be dynamically extended or

00:06:01.190 --> 00:06:02.190
shortened.

00:06:02.190 --> 00:06:06.099
For example, we can allocate a new node in
memory, and insert it into this list, just

00:06:06.099 --> 00:06:07.810
by changing the next pointers.

00:06:07.810 --> 00:06:12.050
Linked Lists can also easily be re-ordered,
trimmed, split, reversed, and so on.

00:06:12.050 --> 00:06:13.310
Which is pretty nifty!

00:06:13.310 --> 00:06:16.650
And pretty useful for algorithms like sorting,
which we talked about last week.

00:06:16.650 --> 00:06:21.360
Owing to this flexibility, many more-complex data structures are built on top of linked lists

00:06:21.360 --> 00:06:23.900
The most famous and universal are queues and
stacks.

00:06:23.900 --> 00:06:27.240
A queue – like the line at your post office
– goes in order of arrival.

00:06:27.240 --> 00:06:30.000
The person who has been waiting the longest,
gets served first.

00:06:30.000 --> 00:06:33.770
No matter how frustrating it is that all you
want to do is buy stamps and the person in

00:06:33.770 --> 00:06:36.350
front of you seems to be mailing 23 packages.

00:06:36.350 --> 00:06:39.990
But, regardless, this behavior is called First-In
First-Out, or FIFO.

00:06:39.990 --> 00:06:41.470
That’s the first part.

00:06:41.470 --> 00:06:42.900
Not the 23 packages thing.

00:06:42.900 --> 00:06:46.840
Imagine we have a pointer, named “post office
queue”, that points to the first node in

00:06:46.840 --> 00:06:47.840
our linked list.

00:06:47.840 --> 00:06:51.990
Once we’re done serving Hank, we can read
Hank’s next pointer, and update our “post

00:06:51.990 --> 00:06:54.720
office queue” pointer to the next person
in the line.

00:06:54.720 --> 00:06:58.069
We’ve successfully dequeued Hank -- he’s
gone, done, finished.

00:06:58.069 --> 00:07:02.139
If we want to enqueue someone, that is, add
them to the line, we have to traverse down

00:07:02.139 --> 00:07:05.789
the linked list until we hit the end, and
then change that next pointer to point to

00:07:05.789 --> 00:07:06.789
the new person.

00:07:06.789 --> 00:07:10.650
With just a small change, we can use linked
lists as stacks, which are LIFO…

00:07:10.650 --> 00:07:11.979
Last-In First-Out.

00:07:11.979 --> 00:07:15.419
You can think of this like a stack of pancakes...
as you make them, you add them to the top

00:07:15.419 --> 00:07:16.419
of stack.

00:07:16.420 --> 00:07:19.180
And when you want to eat one, you take them
from the top of the stack.

00:07:19.180 --> 00:07:20.260
Delicious!

00:07:20.260 --> 00:07:25.180
Instead of enqueueing and dequeuing, data
is pushed onto the stack and popped from the stacks.

00:07:25.240 --> 00:07:27.420
Yep, those are the official terms!

00:07:27.420 --> 00:07:32.460
If we update our node struct to contain not
just one, but two pointers, we can build trees,

00:07:32.460 --> 00:07:34.800
another data structure that’s used in many
algorithms.

00:07:34.800 --> 00:07:38.900
Again, programmers rarely look at the values
of these pointers, and instead conceptualize

00:07:38.920 --> 00:07:42.039
trees like this:
The top most node is called the root.

00:07:42.039 --> 00:07:45.449
And any nodes that hang from other nodes are
called children nodes.

00:07:45.449 --> 00:07:48.759
As you might expect, nodes above children
are called parent nodes.

00:07:48.759 --> 00:07:51.990
Does this example imply that Thomas Jefferson
is the parent of Aaron Burr?

00:07:51.990 --> 00:07:54.500
I’ll leave that to your fanfiction to decide.

00:07:54.500 --> 00:07:58.760
And finally, any nodes that have no children -- where the tree ends -- are called Leaf Nodes.

00:07:58.780 --> 00:08:03.280
In our example, nodes can have up to two children,
and for that reason, this particular data

00:08:03.280 --> 00:08:04.940
structure is called a binary tree.

00:08:04.940 --> 00:08:09.100
But you could just as easily have trees with
three, four or any number of children by modifying

00:08:09.100 --> 00:08:10.900
the data structure accordingly.

00:08:10.900 --> 00:08:15.060
You can even have tree nodes that use linked
lists to store all the nodes they point to.

00:08:15.060 --> 00:08:18.610
An important property of trees – both in
real life and in data structures – is that

00:08:18.610 --> 00:08:20.410
there’s a one-way path from roots to leaves.

00:08:20.410 --> 00:08:23.699
It’d be weird if roots connected to leaves,
that connected to roots.

00:08:23.699 --> 00:08:28.460
For data that links arbitrarily, that include
things like loops, we can use a graph data

00:08:28.460 --> 00:08:29.460
structure instead.

00:08:29.460 --> 00:08:32.550
Remember our graph from last episode of cities
connected by roads?

00:08:32.550 --> 00:08:36.960
This can be stored as nodes with many pointers,
very much like a tree, but there is no notion

00:08:36.960 --> 00:08:38.900
of roots and leaves, and children and parents…

00:08:38.900 --> 00:08:40.480
Anything can point to anything!

00:08:40.490 --> 00:08:43.980
So that’s a whirlwind overview of pretty
much all of the fundamental data structures

00:08:43.980 --> 00:08:45.520
used in computer science.

00:08:45.520 --> 00:08:49.310
On top of these basic building blocks, programmers
have built all sorts of clever variants, with

00:08:49.310 --> 00:08:53.830
slightly different properties -- data structures
like red-black trees and heaps, which we don’t

00:08:53.830 --> 00:08:54.930
have time to cover.

00:08:54.930 --> 00:08:59.050
These different data structures have properties
that are useful for particular computations.

00:08:59.050 --> 00:09:02.990
The right choice of data structure can make
your job a lot easier, so it pays off to think

00:09:02.990 --> 00:09:05.700
about how you want to structure your data
before you jump in.

00:09:05.700 --> 00:09:10.400
Fortunately, most programming languages come with libraries packed full of ready-made data structures.

00:09:10.400 --> 00:09:15.620
For example, C++ has its Standard Template
Library, and Java has the Java Class Library.

00:09:15.620 --> 00:09:19.820
These mean programmers don’t have to waste
time implementing things from scratch, and

00:09:19.840 --> 00:09:24.660
can instead wield the power of data structures
to do more interesting things, once again

00:09:24.660 --> 00:09:27.900
allowing us to operate at a new level of abstraction!

00:09:27.900 --> 00:09:28.920
I’ll see you next week.

