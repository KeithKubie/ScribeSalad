WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:01.320
RONY ROZEN: As you
probably know by now

00:00:01.320 --> 00:00:03.779
because you watched our
previous episode, adding support

00:00:03.779 --> 00:00:05.820
for localization to your
app right from the start

00:00:05.820 --> 00:00:06.690
is important.

00:00:06.690 --> 00:00:07.590
Not sure why?

00:00:07.590 --> 00:00:10.530
Need a refresher on the basic
use of NSLocalizedString?

00:00:10.530 --> 00:00:11.880
Check out the previous episode.

00:00:11.880 --> 00:00:12.380
I'll wait.

00:00:12.380 --> 00:00:15.461
[MUSIC PLAYING]

00:00:15.960 --> 00:00:17.460
So at this point,
your app supports

00:00:17.460 --> 00:00:18.875
one or more localizations.

00:00:18.875 --> 00:00:21.125
As you're testing your app
in one of the new languages

00:00:21.125 --> 00:00:23.090
it now supports,
you see that a word

00:00:23.090 --> 00:00:24.600
you used in several
different places

00:00:24.600 --> 00:00:26.100
in the English
version of your app

00:00:26.100 --> 00:00:27.930
needs to be translated
in different ways

00:00:27.930 --> 00:00:29.760
in Portuguese, for example.

00:00:29.760 --> 00:00:31.770
Maybe your combination
poker telephone

00:00:31.770 --> 00:00:34.350
app uses the word "call"
in two different ways--

00:00:34.350 --> 00:00:37.290
placing a telephone
call and matching a bet.

00:00:37.290 --> 00:00:39.840
This is how it's going to look
like in the localization file.

00:00:39.840 --> 00:00:42.960
One translation, since these
are two uses of the same key,

00:00:42.960 --> 00:00:45.060
with both comments so
that the translator will

00:00:45.060 --> 00:00:47.220
know where and when it's used.

00:00:47.220 --> 00:00:48.810
If you want to
separate this into two

00:00:48.810 --> 00:00:51.660
different translations, this is
what it's going to look like.

00:00:51.660 --> 00:00:55.290
But wait-- we now have two
translations for the same key.

00:00:55.290 --> 00:00:57.340
That's obviously problematic.

00:00:57.340 --> 00:00:59.730
How will the app know
which key to use when?

00:00:59.730 --> 00:01:02.340
Well one way to resolve this
is to create two different keys

00:01:02.340 --> 00:01:04.680
with the same translation
in the English version.

00:01:04.680 --> 00:01:06.390
This of course means
that we'll also

00:01:06.390 --> 00:01:08.250
need to change the code
accordingly and use

00:01:08.250 --> 00:01:11.820
"CallPhone" and "CallBet"
instead of just "Call."

00:01:11.820 --> 00:01:14.504
It also means that unless we
provide the translation files

00:01:14.504 --> 00:01:16.170
for the English version
of the app where

00:01:16.170 --> 00:01:18.270
the vast majority of
translations are simply

00:01:18.270 --> 00:01:19.920
wrote with identical
texts on both

00:01:19.920 --> 00:01:22.230
the left and the right
side of the equation,

00:01:22.230 --> 00:01:25.110
the user will actually see
"CallPhone" and "CallBet"

00:01:25.110 --> 00:01:28.230
and not "Call," but
it will at least allow

00:01:28.230 --> 00:01:30.000
us to provide each
language with the most

00:01:30.000 --> 00:01:31.830
appropriate translation for it.

00:01:31.830 --> 00:01:33.799
We won't usually need
to use this technique

00:01:33.799 --> 00:01:35.340
but it's good to
know it's an option.

00:01:35.340 --> 00:01:37.710
And it also helps demonstrate
how important the comment

00:01:37.710 --> 00:01:39.147
parameter actually is.

00:01:39.147 --> 00:01:40.980
There are several other
elements of your app

00:01:40.980 --> 00:01:43.500
that you should localize when
launching to new locales--

00:01:43.500 --> 00:01:44.584
images, for example.

00:01:44.584 --> 00:01:46.500
Let's say you're working
on a stock market app

00:01:46.500 --> 00:01:49.110
and want to use an image
symbolizing a successful market

00:01:49.110 --> 00:01:51.840
so that your users will be
happy, optimistic, and eager

00:01:51.840 --> 00:01:53.550
to continue using your app.

00:01:53.550 --> 00:01:55.080
You'll probably
choose an image that

00:01:55.080 --> 00:01:57.180
looks roughly like this, right?

00:01:57.180 --> 00:01:59.040
The problem is that
if you show this image

00:01:59.040 --> 00:02:00.870
to a person in
China, for example,

00:02:00.870 --> 00:02:03.340
they are likely to look at
your app in a negative way.

00:02:03.340 --> 00:02:04.950
There, they have
reverse connotations

00:02:04.950 --> 00:02:07.650
for the red and green colors,
so your image should actually

00:02:07.650 --> 00:02:09.800
look like this instead.

00:02:09.800 --> 00:02:11.390
The way you do this
is quite simple

00:02:11.390 --> 00:02:13.580
and requires no
core-level changes.

00:02:13.580 --> 00:02:16.640
Similar to what we did before
with the localization files,

00:02:16.640 --> 00:02:18.770
all you need to do is
use two different images

00:02:18.770 --> 00:02:20.320
with the same name--

00:02:20.320 --> 00:02:24.642
one in the en.lproj folder,
the other in the zh folder.

00:02:24.642 --> 00:02:26.350
This way, the English
version of your app

00:02:26.350 --> 00:02:28.900
will use the green image, the
Chinese version of your app

00:02:28.900 --> 00:02:32.000
will use the red image, and all
of your users will be happy,

00:02:32.000 --> 00:02:34.670
which is all we
really want, right?

00:02:34.670 --> 00:02:36.500
We used images for
this example, but you

00:02:36.500 --> 00:02:38.330
can do the same thing
with audio files

00:02:38.330 --> 00:02:41.840
and pretty much any file
type you can think of.

00:02:41.840 --> 00:02:45.410
Xcode also supports the standard
XML Localization Interchange

00:02:45.410 --> 00:02:48.020
File Format, or XLIFF.

00:02:48.020 --> 00:02:49.490
This is especially
useful when you

00:02:49.490 --> 00:02:51.560
have texts that are set
via Interface Builder--

00:02:51.560 --> 00:02:54.110
whether zip files
or storyboards.

00:02:54.110 --> 00:02:57.120
Instead of using the script we
used in the previous episode,

00:02:57.120 --> 00:02:59.060
you can select a
project or a target

00:02:59.060 --> 00:03:00.950
in the Xcode project
editor, and then

00:03:00.950 --> 00:03:04.040
choose Editor, Export
For Localization.

00:03:04.040 --> 00:03:06.260
This will generate
an en.xliff file,

00:03:06.260 --> 00:03:08.870
assuming you're using English
as your base language.

00:03:08.870 --> 00:03:10.310
This file will
include the strings

00:03:10.310 --> 00:03:11.960
from all [INAUDIBLE]
Storyboard files

00:03:11.960 --> 00:03:15.470
in addition to ones we
specified with NSLocalizeString.

00:03:15.470 --> 00:03:17.660
You can send this XLIFF
file to the translator

00:03:17.660 --> 00:03:19.100
and get a translated version.

00:03:19.100 --> 00:03:22.550
For Spanish, for example,
it will be es.xliff.

00:03:22.550 --> 00:03:24.870
You'll import the translated
files back into Xcode

00:03:24.870 --> 00:03:27.350
by selecting the project or
target in the Xcode project

00:03:27.350 --> 00:03:30.680
editor and choosing Editor,
Import Localizations.

00:03:30.680 --> 00:03:32.600
The nice thing about
using this method,

00:03:32.600 --> 00:03:34.160
in addition to it
being a format that

00:03:34.160 --> 00:03:36.080
is well-known by
translation companies,

00:03:36.080 --> 00:03:38.930
is that it allows you to only
worry about new translations

00:03:38.930 --> 00:03:41.390
because each time you
import localization,

00:03:41.390 --> 00:03:44.900
the string files are merged with
your existing project files.

00:03:44.900 --> 00:03:47.510
And if you have strings that
are set in Interface Builder

00:03:47.510 --> 00:03:50.810
and not via code, you only need
to worry about one localization

00:03:50.810 --> 00:03:53.870
file per language instead
of having one .strings file

00:03:53.870 --> 00:03:56.150
for each [INAUDIBLE] Storyboard
file and an additional

00:03:56.150 --> 00:03:58.940
localizable .strings file
for the strings set via code.

00:03:58.940 --> 00:04:00.980
The last point I want to
make about localization

00:04:00.980 --> 00:04:02.270
is that it's
important to remember

00:04:02.270 --> 00:04:03.644
that words in
different languages

00:04:03.644 --> 00:04:05.790
have different length,
so it's important to test

00:04:05.790 --> 00:04:08.900
your UI in all supported locales
and see that none of the words

00:04:08.900 --> 00:04:11.210
get truncated, drops
a line, et cetera.

00:04:11.210 --> 00:04:13.170
English tends to be
a compact language,

00:04:13.170 --> 00:04:14.870
so words may end
up being translated

00:04:14.870 --> 00:04:18.131
to something with twice
as many letters or words.

00:04:18.131 --> 00:04:19.880
If you want to display
the number of views

00:04:19.880 --> 00:04:22.340
in a post on your new social
media app, for example,

00:04:22.340 --> 00:04:24.590
you'll need 15 characters
in Italian instead

00:04:24.590 --> 00:04:26.000
of just five in English.

00:04:26.000 --> 00:04:28.010
And don't forget to
consider the opposite case.

00:04:28.010 --> 00:04:30.770
Shorter words can be just as
problematic as longer ones

00:04:30.770 --> 00:04:33.170
if your UI was designed
for a specific word length.

00:04:33.170 --> 00:04:35.870
My main point is basically
be aware of the changing word

00:04:35.870 --> 00:04:38.180
sizes in different
translations and account for it

00:04:38.180 --> 00:04:40.400
right from the start,
already at the design stage.

00:04:40.400 --> 00:04:41.900
I want to leave you
with the concept

00:04:41.900 --> 00:04:43.520
of internationalization.

00:04:43.520 --> 00:04:45.770
In addition to having
users who speak and read

00:04:45.770 --> 00:04:48.140
different languages,
being a word-friendly app

00:04:48.140 --> 00:04:50.780
also means that you need to
internationalize your app.

00:04:50.780 --> 00:04:51.780
What does that mean?

00:04:51.780 --> 00:04:54.350
Well, it may mean supporting
right-to-left displays

00:04:54.350 --> 00:04:56.780
for RTL languages such
as Hebrew and Arabic.

00:04:56.780 --> 00:04:59.480
It may mean supporting
reverse uses of decimal points

00:04:59.480 --> 00:05:02.510
and commas, as is customary
in many European countries.

00:05:02.510 --> 00:05:04.767
It basically means knowing
your target audience

00:05:04.767 --> 00:05:07.100
and what they care about so
that you can design the best

00:05:07.100 --> 00:05:10.779
app for their needs, and happy
users lead to happy developers.

00:05:10.779 --> 00:05:12.320
I hope you find this
helpful and will

00:05:12.320 --> 00:05:15.140
use this new knowledge to build
more global-friendly apps.

00:05:15.140 --> 00:05:17.690
I encourage you to look into
additional IOS localization

00:05:17.690 --> 00:05:20.150
topics we didn't get to
discuss, such as locking

00:05:20.150 --> 00:05:22.150
your views while waiting
for translations,

00:05:22.150 --> 00:05:24.230
testing the translations
directly in Xcode,

00:05:24.230 --> 00:05:26.570
or handling different
units of measurement.

00:05:26.570 --> 00:05:28.570
Until next time, I'm
Rony Rozen for Route 85.

00:05:28.570 --> 00:05:29.490
Thanks for watching.

00:05:29.490 --> 00:05:32.840
[MUSIC PLAYING]

