WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:04.680
Linting is a way to automatically check
your Java script code for errors.

00:00:04.680 --> 00:00:09.610
And it can be done at various stages
during development via your editor,

00:00:09.610 --> 00:00:13.960
your build process or
your pre-commit hook in version control.

00:00:13.960 --> 00:00:17.200
There's not always a right or
wrong way in linting.

00:00:17.200 --> 00:00:20.350
A lot of it is heavily opinionated.

00:00:20.350 --> 00:00:24.970
So you should choose the configuration
that fits your coding style and project.

00:00:24.970 --> 00:00:28.630
There's also the difference of code
style linting versus syntax or

00:00:28.630 --> 00:00:30.210
structural linting.

00:00:30.210 --> 00:00:30.900
Syntax or

00:00:30.900 --> 00:00:35.290
structural linting is what most people
refer to when they say linting.

00:00:35.290 --> 00:00:38.260
These rules check for
JavaScript anti-patterns, such as

00:00:38.260 --> 00:00:43.050
unreachable statements or forgetting
to do a strict comparison against null.

00:00:43.050 --> 00:00:47.050
On the other hand, code style linting
can complain about things such as

00:00:47.050 --> 00:00:49.530
variables that aren't
properly camel cased, or

00:00:49.530 --> 00:00:52.040
a particular way of placing braces for
a function.

00:00:52.040 --> 00:00:56.430
So if linting ensures your code looks
sexy and checks for all these potential

00:00:56.430 --> 00:01:00.740
errors, does that mean your code will
always run if the linter is happy?

00:01:00.740 --> 00:01:01.560
Nope.

00:01:01.560 --> 00:01:04.620
The linter only checks for
potential errors.

00:01:04.620 --> 00:01:08.650
It doesn't actually have any idea
what you're trying to accomplish.

00:01:08.650 --> 00:01:12.940
So now that you're familiar with the
concept of linting, let's talk solutions.

00:01:12.940 --> 00:01:16.965
There are three popular JavaScript
linters out there that developers use,

00:01:16.965 --> 00:01:21.593
JSHint, JSCS, and ESLint.

00:01:21.593 --> 00:01:25.145
You'll find a link in the notes
that details the differences, but

00:01:25.145 --> 00:01:30.865
to cut it short, we'll stick with
ESLint as it supports modern ES6 code,

00:01:30.865 --> 00:01:34.455
can be extended, and has output
that's really easy to understand.

