WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
What does the random program looked like that killed clang?

00:00:03.000 --> 00:00:08.000
Here we have a bunch of preamble stuff at the top and let's get down to the random code.

00:00:08.000 --> 00:00:10.000
Okay. Here's the random code. That's all.

00:00:10.000 --> 00:00:12.000
And so what you can see is just basically it's just a bunch or random junk.

00:00:12.000 --> 00:00:15.000
And so what are we doing here? We're making function calls.

00:00:15.000 --> 00:00:18.000
We have a little integer constant.

00:00:18.000 --> 00:00:20.000
We have some relational operators and so this is the largest program.

00:00:20.000 --> 00:00:23.000
Let's see how big it is. This program isÃ¢Â€Â”oh it's not that big.

00:00:23.000 --> 00:00:25.000
It's 1600 lines or 37 kilobytes of code.

00:00:25.000 --> 00:00:30.000
But right now we don't know what about that program was that caused clang to crash.

00:00:30.000 --> 00:00:33.000
All we know is that crashed it so let's just look and make sure that that works.

00:00:33.000 --> 00:00:36.000
Okay. Good. So here you can see that clang did indeed die in that input.

00:00:36.000 --> 00:00:42.000
We can see thatÃ¢Â€Â”here we see the assertion failure, unknown live-in to the entry block.

00:00:42.000 --> 00:00:46.000
And then the rest of this is just a bunch of sort of other information that clang gives when it crashes.

00:00:46.000 --> 00:00:48.000
For example, the stack trace or functions or actually

00:00:48.000 --> 00:00:52.000
the functions that we're executing when the compiler crashed.

00:00:52.000 --> 00:00:54.000
It's giving us a detailed version of the arguments and some other stuff.

00:00:54.000 --> 00:00:57.000
This is all the stuff that we would include in the bug report when I report this bug

00:00:57.000 --> 00:01:01.000
to the LLVM developers, which I will do tonight after I finish recording lectures.

00:01:01.000 --> 00:01:04.000
So let's see now if we found anything about GCC that's interesting.

00:01:04.000 --> 00:01:07.000
And so here we started at LLVM, which includes this assertion string when it crashes.

00:01:07.000 --> 00:01:10.000
And GCC includes a different message all the time.

00:01:10.000 --> 00:01:12.000
It's an internal compiler error. Okay.

00:01:12.000 --> 00:01:15.000
And so what we can see here is that several times GCC responded with a message saying

00:01:15.000 --> 00:01:19.000
that it was killed and these do not represent compiler bugs that we're interested in.

00:01:19.000 --> 00:01:23.000
These are just performance pathologies where the compiler ran for quite a while on some random input.

00:01:23.000 --> 00:01:25.000
And those tend to be hard to report as bugs so we're not going to worry about that.

00:01:25.000 --> 00:01:29.000
We can see that there was one internal compiler error where verify SSA failed.

00:01:29.000 --> 00:01:31.000
I believe that's a known bug so we're not going to worry about it.

00:01:31.000 --> 00:01:33.000
There's a segmentation fault where GCC crashed,

00:01:33.000 --> 00:01:36.000
and most often that's due to dereferencing a null pointer.

00:01:36.000 --> 00:01:38.000
We're not going to worry about that either.

00:01:38.000 --> 00:01:40.000
There's an error in the get loop body that happens to be a known bug.

00:01:40.000 --> 00:01:45.000
However, that bug has been reported, and then we have an error here which looks to me to be new.

00:01:45.000 --> 00:01:48.000
We have internal compiler error in get initial def for induction

00:01:48.000 --> 00:01:52.000
at tree vect and so tree vect means that error was in the loop vectorizer

00:01:52.000 --> 00:01:55.000
which is a module of GCC that has been getting quite a bit of development

00:01:55.000 --> 00:01:57.000
and quite a bit of attention in recent years.

00:01:57.000 --> 00:02:00.000
This is the place where we'd sort of expect to find bugs.

00:02:00.000 --> 00:02:03.000
And so I'm not going to go generate program that caused this crash since we already

00:02:03.000 --> 00:02:07.000
saw that example for clang but basically what we've seen here how a random testing loop works.

00:02:07.000 --> 00:02:10.000
And so if we actually look at the activity on this machine,

00:02:10.000 --> 00:02:13.000
we can see that lots of programs are running here involving evaluate program as one

00:02:13.000 --> 00:02:15.000
of the driver scripts of the random tester.

00:02:15.000 --> 00:02:20.000
Csmith of course is a random test case generator. CC1 and clang are compiler processes.

00:02:20.000 --> 00:02:23.000
These compilers are sitting here using all 8 cores on a rather fast

00:02:23.000 --> 00:02:26.000
modern machine in order to break compilers.

