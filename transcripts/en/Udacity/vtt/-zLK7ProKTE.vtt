WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:02.511
You're probably familiar
with enumerations and

00:00:02.511 --> 00:00:04.420
structs from other languages.

00:00:04.420 --> 00:00:07.370
Enumerations define a set
of related values, and

00:00:07.370 --> 00:00:10.965
a struct is a convenient way
to bundle properties together.

00:00:10.965 --> 00:00:15.370
In Swift, enumerations and structs are
more powerful than in other languages

00:00:15.370 --> 00:00:19.270
because they can have their own methods
and are able to conform to protocols.

00:00:19.270 --> 00:00:22.150
In other words, in Swift,
it's easy to give an enum or

00:00:22.150 --> 00:00:25.460
a struct its own suite
of functionalities.

00:00:25.460 --> 00:00:27.340
Let's start with enumerations.

00:00:27.340 --> 00:00:30.480
Enums are usually used for
a finite set of values.

00:00:30.480 --> 00:00:33.260
An enum of the primary
colors would look like this.

00:00:33.260 --> 00:00:36.670
You start with the word enum,
followed by the name of the group, and

00:00:36.670 --> 00:00:40.740
in between curly braces you have a list
of members preceded by the word case.

00:00:40.740 --> 00:00:41.890
Here's another example.

00:00:41.890 --> 00:00:43.800
This is an enum my aunties.

00:00:43.800 --> 00:00:46.500
Notice that you don't have to write
the word case for every member.

00:00:46.500 --> 00:00:50.020
You can use this shorthand in which
members are separated by commas.

00:00:50.020 --> 00:00:53.900
You might be used to enums having
integer values like they do in C.

00:00:53.900 --> 00:00:57.970
In Swift, enum members can take
on a value of any primitive type.

00:00:57.970 --> 00:01:01.700
For example, I have this enum of
the American League West Division.

00:01:01.700 --> 00:01:04.290
Let's say I wanted each member
to hold the value of their

00:01:04.290 --> 00:01:06.170
home city as a string.

00:01:06.170 --> 00:01:09.090
I just indicate string up here
next to the name of the enum,

00:01:09.090 --> 00:01:13.930
and then I can define those values
in the enum definition like so.

00:01:13.930 --> 00:01:16.480
You can access those
string values like this,

00:01:16.480 --> 00:01:19.460
with the built-in property rawValue.

00:01:19.460 --> 00:01:21.710
Enums and switch statements
work really well together.

00:01:21.710 --> 00:01:26.040
Here's a statement that switches on
the value of the variable destination.

00:01:26.040 --> 00:01:29.130
Destination is an enum
of type California park,

00:01:29.130 --> 00:01:31.360
which you can see has four members.

00:01:31.360 --> 00:01:33.940
This statement prints out
different warnings based on which

00:01:33.940 --> 00:01:36.880
enum member matches
the value of destination.

00:01:36.880 --> 00:01:41.080
Notice that if I leave out one of the
parks, the compiler gives me a warning.

00:01:41.080 --> 00:01:44.140
This can be especially helpful
if I add a value to an enum

00:01:44.140 --> 00:01:46.760
after I've already used
it in a switch statement.

00:01:46.760 --> 00:01:50.200
The compiler helps me make sure all
my switch statements are exhaustive.

00:01:50.200 --> 00:01:53.605
As you saw up here, initialization
of an enum type is really simple.

00:01:53.605 --> 00:01:56.895
They're just defined with
a specific member of the enum.

00:01:56.895 --> 00:02:00.115
Alternatively, they can also
be designed with raw values

00:02:00.115 --> 00:02:04.015
like these city strings we used for
the American League West, or

00:02:04.015 --> 00:02:07.305
they can be defined with what
are called failable initializers.

00:02:07.305 --> 00:02:10.413
For more on those options, follow
the link in the Instructor's Notes.

