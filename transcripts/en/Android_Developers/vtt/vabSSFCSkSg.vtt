WEBVTT
Kind: captions
Language: en

00:00:08.600 --> 00:00:10.390
Hi, my name is Daniel
[? Orchansky ?].

00:00:10.390 --> 00:00:12.005
I'm an intern here on the
Android team at Google.

00:00:12.005 --> 00:00:14.890
And today I'll be talking about
some folding animation.

00:00:14.890 --> 00:00:17.890
It's a folding animation kind
of like an accordion, except

00:00:17.890 --> 00:00:20.546
you can specify the number of
folds, the orientation, as

00:00:20.546 --> 00:00:22.790
well as the anchor point along
which the fold is going to

00:00:22.790 --> 00:00:23.990
take place.

00:00:23.990 --> 00:00:27.190
So now while you'll be able to
fold any image, as you'll see

00:00:27.190 --> 00:00:28.520
that very soon.

00:00:28.520 --> 00:00:32.140
And the trick behind doing this
is noting that given some

00:00:32.140 --> 00:00:34.350
number of folds, you can split
an image into several

00:00:34.350 --> 00:00:35.550
different segments.

00:00:35.550 --> 00:00:37.570
Each of these segments is a
rectangle that can then be

00:00:37.570 --> 00:00:41.030
transformed in various ways
using major transformations.

00:00:41.030 --> 00:00:45.610
And then, in order to make the
fold even more realistic, what

00:00:45.610 --> 00:00:48.540
I'm going to do is use gradients
along with a

00:00:48.540 --> 00:00:51.830
shadow-like effect on
alternating folds to actually

00:00:51.830 --> 00:00:54.080
get that real folding-like
effect.

00:00:54.080 --> 00:00:58.032
In this demo, it's important
to know that there's fold

00:00:58.032 --> 00:00:59.835
factor that I'm going to
be using that varies

00:00:59.835 --> 00:01:01.080
between zero and one.

00:01:01.080 --> 00:01:02.840
And what's going to happen
when something has a fold

00:01:02.840 --> 00:01:03.580
factor of zero.

00:01:03.580 --> 00:01:04.940
It means that it's completely
unfolded.

00:01:04.940 --> 00:01:08.800
Whereas when something has a
fold factor of one, it means

00:01:08.800 --> 00:01:10.900
that it's completely folded to
the point where you cannot see

00:01:10.900 --> 00:01:11.830
it anymore.

00:01:11.830 --> 00:01:13.350
So that being, said,
let's jump in

00:01:13.350 --> 00:01:15.310
straight into the demo.

00:01:15.310 --> 00:01:18.790
So here we have just an image.

00:01:18.790 --> 00:01:21.230
And I'm going to start
folding it.

00:01:21.230 --> 00:01:23.620
And as I'm moving my
finger, you can see

00:01:23.620 --> 00:01:24.710
the image gets folded.

00:01:24.710 --> 00:01:26.760
And then it gets unfolded.

00:01:26.760 --> 00:01:28.050
This is four folds.

00:01:28.050 --> 00:01:30.160
You change the anchor point
of where it's happening.

00:01:30.160 --> 00:01:33.000
And once again, the same
thing applies here.

00:01:33.000 --> 00:01:36.460
I can change the number of folds
to eight if I want to.

00:01:36.460 --> 00:01:38.754
And the other thing you're
noticing is this kind of sepia

00:01:38.754 --> 00:01:40.490
effect as I'm animating.

00:01:40.490 --> 00:01:41.700
And I can turn that off.

00:01:41.700 --> 00:01:45.030
It's a cool little feature I
thought would add a lot to

00:01:45.030 --> 00:01:48.230
this, which I'll show you how
to implement in a second.

00:01:48.230 --> 00:01:52.617
And the other thing about this
is that you can even fold not

00:01:52.617 --> 00:01:55.340
just that static image, but also
a live camera feed if you

00:01:55.340 --> 00:01:57.650
use something like
a texture here.

00:01:57.650 --> 00:02:03.940
So here we have our camera
crew and unfolding and

00:02:03.940 --> 00:02:05.020
unfolding it.

00:02:05.020 --> 00:02:07.295
So it is a live image that is
being folded an unfolded.

00:02:10.820 --> 00:02:15.530
OK, so that being said, let's
jump straight into the code.

00:02:15.530 --> 00:02:19.246
And the way this works is
folding layout extends the

00:02:19.246 --> 00:02:19.680
view group.

00:02:19.680 --> 00:02:22.220
So this is very generalized,
except it is set up in such a

00:02:22.220 --> 00:02:25.070
way such that my layout
can only ever have,

00:02:25.070 --> 00:02:26.500
at most, one child.

00:02:26.500 --> 00:02:29.356
But then again, this one child
can be a layout that you can

00:02:29.356 --> 00:02:31.860
populate any way that you
want, and then fold--

00:02:31.860 --> 00:02:35.800
even a user interface, with a
buttons and text boxes if

00:02:35.800 --> 00:02:37.420
you'd like.

00:02:37.420 --> 00:02:40.550
So scrolling down, here I'm
doing a lot of checks.

00:02:40.550 --> 00:02:43.070
So if you're trying to add more
than one view, what's

00:02:43.070 --> 00:02:45.020
going to happen is that I'm
actually going to throw an

00:02:45.020 --> 00:02:49.300
exception because, in this
context, that's not something

00:02:49.300 --> 00:02:51.180
that's being supported.

00:02:51.180 --> 00:02:55.400
And once we get through that,
then there's all the setters.

00:02:55.400 --> 00:02:57.160
So like I mentioned before,
you can set

00:02:57.160 --> 00:02:59.015
the number of folds.

00:02:59.015 --> 00:03:00.320
You can set the orientation.

00:03:00.320 --> 00:03:03.140
And you can also set the
number of folds, the

00:03:03.140 --> 00:03:04.980
orientation, and the
anchor point along

00:03:04.980 --> 00:03:07.090
which it's being folded.

00:03:07.090 --> 00:03:10.810
So I'm not showing the
orientation change yet, but

00:03:10.810 --> 00:03:14.910
the same thing applies when you
are in the vertical, as

00:03:14.910 --> 00:03:17.130
opposed to horizontal,
orientation.

00:03:17.130 --> 00:03:20.070
So then here you can set the
fold factor, which is, again,

00:03:20.070 --> 00:03:21.590
a value between zero and one.

00:03:21.590 --> 00:03:24.470
And every single time you set
the fold factor, you need to

00:03:24.470 --> 00:03:26.260
calculate matrices
and invalidate.

00:03:26.260 --> 00:03:31.670
So invalidate will draw the
new folded view onto your

00:03:31.670 --> 00:03:33.670
canvas in it's new
folded state.

00:03:33.670 --> 00:03:36.840
And calculate matrices actually
calculates all the

00:03:36.840 --> 00:03:39.540
transformation matrices that
you need to go from the

00:03:39.540 --> 00:03:43.530
unfolded image to the folded
one to some degree.

00:03:43.530 --> 00:03:47.740
For every single time some other
parameter gets changed,

00:03:47.740 --> 00:03:51.280
we need to call this method
called update fold, which does

00:03:51.280 --> 00:03:55.640
all the preparation for actually
folding a new image.

00:03:55.640 --> 00:03:59.650
So in update fold, we're going
to call prepare fold.

00:03:59.650 --> 00:04:02.370
And all prepare fold really
does is return all our

00:04:02.370 --> 00:04:05.490
variables to default because
this is now a new image.

00:04:05.490 --> 00:04:08.760
It allocates space for all the
transformation matrices we

00:04:08.760 --> 00:04:12.910
need, the paint objects,
the gradient objects,

00:04:12.910 --> 00:04:14.340
and things like that.

00:04:14.340 --> 00:04:16.490
It sets up the gradient objects
that we're going to

00:04:16.490 --> 00:04:20.380
need for later, stores all the
values we're going to need,

00:04:20.380 --> 00:04:23.610
stores the original widths and
heights of the images.

00:04:23.610 --> 00:04:29.510
And the most important thing
that it does is right here,

00:04:29.510 --> 00:04:32.930
where it splits the image
into rectangles.

00:04:32.930 --> 00:04:35.096
So like I said before, in order
to fold something, what

00:04:35.096 --> 00:04:38.330
you need to do is split it into
separate segments, so you

00:04:38.330 --> 00:04:40.800
how each segment should
be transformed.

00:04:40.800 --> 00:04:43.460
But every single segment is
just a simple rectangle.

00:04:43.460 --> 00:04:46.790
So I'm going to store all these
rectangles in an array.

00:04:46.790 --> 00:04:49.300
And I'm going to be referencing
these rectangles

00:04:49.300 --> 00:04:51.650
as the source for every
single transformation

00:04:51.650 --> 00:04:53.480
that I'll be doing.

00:04:53.480 --> 00:04:56.400
So that's on the fold.

00:04:56.400 --> 00:04:58.120
Then in calculating the
matrices, this is where we

00:04:58.120 --> 00:05:00.320
actually calculate the
transformation matrix.

00:05:00.320 --> 00:05:02.773
I'm not going to go through
the math of how I did

00:05:02.773 --> 00:05:02.980
everything.

00:05:02.980 --> 00:05:07.100
But the main thing to note here
is that you need to make

00:05:07.100 --> 00:05:11.970
sure that you reset your
transformation matrix on every

00:05:11.970 --> 00:05:14.840
single time the fold factor
gets changed.

00:05:14.840 --> 00:05:18.150
And the other thing to note is
that the amount that a fold

00:05:18.150 --> 00:05:23.170
should be folded by is inversely
proportional to the

00:05:23.170 --> 00:05:25.140
distance from which it
is away from you.

00:05:25.140 --> 00:05:29.840
So for example, when you start
folding it, you'll that edges

00:05:29.840 --> 00:05:32.820
very quickly start going into
the page, whereas when it's

00:05:32.820 --> 00:05:35.030
already really folded,
the edges don't go

00:05:35.030 --> 00:05:36.150
into the page as much.

00:05:36.150 --> 00:05:43.990
A simple inverse relation
achieves this.

00:05:43.990 --> 00:05:46.010
And that's how you
get the fold.

00:05:46.010 --> 00:05:49.620
So back in calculating matrices,
there's a listener

00:05:49.620 --> 00:05:52.340
that I added on end fold
and on start fold.

00:05:52.340 --> 00:05:58.097
So what this gives you is is
just kind of a listener you

00:05:58.097 --> 00:06:00.760
can listen to when a fold
ends or starts.

00:06:00.760 --> 00:06:06.060
And scrolling down past all
the math, what we're doing

00:06:06.060 --> 00:06:09.920
here is we're going to be
transforming a set of eight

00:06:09.920 --> 00:06:11.920
points to another set
of eight points.

00:06:11.920 --> 00:06:16.750
Since every single segment is
a rectangle, every single

00:06:16.750 --> 00:06:19.090
vertex has two points.

00:06:19.090 --> 00:06:20.500
An x and a y coordinate.

00:06:20.500 --> 00:06:23.700
So given the eight points from
the source, and the eight

00:06:23.700 --> 00:06:25.830
points in the desination, we'll
be able to achieve the

00:06:25.830 --> 00:06:27.800
transformation that we need.

00:06:27.800 --> 00:06:34.405
So how we do that is using the
function available in matrix,

00:06:34.405 --> 00:06:37.860
in Andrew's matrix API
called, poly to

00:06:37.860 --> 00:06:40.190
poly, set poly to poly.

00:06:40.190 --> 00:06:42.770
And what this does is this
take an array of source

00:06:42.770 --> 00:06:45.173
points, an array of destination
points, and the

00:06:45.173 --> 00:06:46.430
number of points you're
going to use.

00:06:46.430 --> 00:06:48.730
So in this case, that
will be four.

00:06:48.730 --> 00:06:51.400
And this is limited
to four at most.

00:06:51.400 --> 00:06:55.990
And so all that's going to do
is give us a matrix that

00:06:55.990 --> 00:06:58.430
transforms that original

00:06:58.430 --> 00:07:00.510
rectangle to this new rectangle.

00:07:00.510 --> 00:07:05.370
And in order to then imagine the
graphical effect here, the

00:07:05.370 --> 00:07:08.860
destination source has its edges
kind of curved in, as

00:07:08.860 --> 00:07:12.500
opposed to just a rectangle,
where all the sides are

00:07:12.500 --> 00:07:14.880
parallel and perpendicular
to each other.

00:07:14.880 --> 00:07:17.660
And scrolling down farther more,
the other thing we need

00:07:17.660 --> 00:07:20.440
to do is scale our gradient.

00:07:20.440 --> 00:07:26.300
So if you saw in the fold, every
other fold has a very

00:07:26.300 --> 00:07:29.040
solid kind of overlay black
shadow over it.

00:07:29.040 --> 00:07:31.980
But that every fold in between
that just has a small gradient

00:07:31.980 --> 00:07:35.020
going across it to achieve that
more realistic effect.

00:07:35.020 --> 00:07:38.810
So the alpha value, as well as
the size and scale for all of

00:07:38.810 --> 00:07:41.360
these are all calculated here.

00:07:41.360 --> 00:07:43.710
Then, in this batch draw,
there's a couple optimizations

00:07:43.710 --> 00:07:45.330
that we have.

00:07:45.330 --> 00:07:47.230
For example, if the fold factor
is equal to zero, and

00:07:47.230 --> 00:07:49.830
it's completely unfolded, no
folding needs to happen, so we

00:07:49.830 --> 00:07:51.660
just draw the original
image and call super.

00:07:54.340 --> 00:07:58.030
In some other cases, like if
it's equal to 1, then we don't

00:07:58.030 --> 00:08:00.170
want to draw anything.

00:08:00.170 --> 00:08:02.760
And then what we're going to do
is loop through all of our

00:08:02.760 --> 00:08:07.810
folds and just start drawing
each and every fold into our

00:08:07.810 --> 00:08:09.470
canvas separately.

00:08:09.470 --> 00:08:14.030
So right here, first, what we do
is concatenate our canvas.

00:08:14.030 --> 00:08:17.085
First we need to save the state
of our current canvas.

00:08:17.085 --> 00:08:19.810
Then we concatenate our
canvas with the

00:08:19.810 --> 00:08:21.690
transformation matrix.

00:08:21.690 --> 00:08:24.280
We need to clip [? our rect ?]
because all we really want to

00:08:24.280 --> 00:08:27.280
show, for every single time,
is one segment at a time.

00:08:27.280 --> 00:08:29.220
So we clip that rectangle.

00:08:29.220 --> 00:08:31.590
We transform it appropriately
so that it's located in the

00:08:31.590 --> 00:08:35.700
beginning of the view because
our transformation matrix, if

00:08:35.700 --> 00:08:38.980
you look the map later, takes
things from the very far left

00:08:38.980 --> 00:08:39.650
and then puts it in the correct

00:08:39.650 --> 00:08:41.559
position on the screen.

00:08:41.559 --> 00:08:43.820
Recall super and
dispatch draw.

00:08:43.820 --> 00:08:45.550
And since the canvas is clipped,
what this is going to

00:08:45.550 --> 00:08:51.100
do is only draw that clipped
section of the canvas that we

00:08:51.100 --> 00:08:52.950
have specified.

00:08:52.950 --> 00:08:55.440
Then we transit our
canvas back.

00:08:55.440 --> 00:08:59.850
And then using the same matrix
information, we'll also draw

00:08:59.850 --> 00:09:03.080
the solid shadows as well as the
gradient shadow on top the

00:09:03.080 --> 00:09:07.060
folds that we've already
drawn above.

00:09:07.060 --> 00:09:12.210
So one of the biggest problems
that we actually encounter

00:09:12.210 --> 00:09:15.580
while working on this is that in
Android 4.3, a new bug was

00:09:15.580 --> 00:09:20.660
introduced where if you call
super.dispatchdraw multiple

00:09:20.660 --> 00:09:24.230
times within one call to
dispatchdraw, it won't

00:09:24.230 --> 00:09:29.150
actually have the same effect
as it does on 4.2

00:09:29.150 --> 00:09:30.860
and prior to that.

00:09:30.860 --> 00:09:33.530
What's going to happen is all
the canvas transformations are

00:09:33.530 --> 00:09:36.380
going to be delayed until the
last canvas transformation.

00:09:36.380 --> 00:09:40.130
And only that last one that
will actually take effect.

00:09:40.130 --> 00:09:44.070
This is now a bug, which
a patch will be

00:09:44.070 --> 00:09:46.110
uploaded in the future.

00:09:46.110 --> 00:09:48.660
But in the meantime, there's
a small work around that we

00:09:48.660 --> 00:09:52.130
found, which only works for
static images, not the like

00:09:52.130 --> 00:09:54.530
camera feed that you
saw earlier.

00:09:54.530 --> 00:09:58.610
And the way this works is, in
prepare fold, what we're going

00:09:58.610 --> 00:10:06.420
to do first is capture the
actual bitmap that we can see.

00:10:06.420 --> 00:10:09.487
So we're just going to take
the child and capture that

00:10:09.487 --> 00:10:10.800
whole thing in a bitmap.

00:10:10.800 --> 00:10:12.490
The matrix transformations
are going to remain

00:10:12.490 --> 00:10:13.740
completely the same.

00:10:16.000 --> 00:10:19.320
But the only difference we're
going to be is here.

00:10:19.320 --> 00:10:25.570
So if it is GBMR2, so Android
4.3, instead of calling super

00:10:25.570 --> 00:10:28.440
to dispatch draw and then
transmitting canvas itself,

00:10:28.440 --> 00:10:31.870
all we're going to do is take
our bitmap, specify a source

00:10:31.870 --> 00:10:34.720
and a destination rectangle
within our bitmap, and then

00:10:34.720 --> 00:10:39.160
use that transformation matrix
to draw only that segment from

00:10:39.160 --> 00:10:40.660
that bitmap onto the screen
where we want to.

00:10:40.660 --> 00:10:44.490
So it will have the exact same
effect on static images, but

00:10:44.490 --> 00:10:46.380
it will not have the
same effect--

00:10:46.380 --> 00:10:48.910
it's actually, it will not
work for something like a

00:10:48.910 --> 00:10:51.420
texture that continuously
updates.

00:10:51.420 --> 00:10:56.692
The last thing that I just want
to show is how we add the

00:10:56.692 --> 00:10:56.905
sepia effect.

00:10:56.905 --> 00:11:00.155
So there's a lot of boilerplate
code in this file

00:11:00.155 --> 00:11:03.100
to handle all the touch events,
but here in on fold

00:11:03.100 --> 00:11:06.520
listener, which is the custom
listener that we created, all

00:11:06.520 --> 00:11:09.540
we're going to be doing is
adding a hardware layer on top

00:11:09.540 --> 00:11:11.490
of our view.

00:11:11.490 --> 00:11:15.200
And when you set a hardware
layer, what you can also do is

00:11:15.200 --> 00:11:17.170
specify a paint object.

00:11:17.170 --> 00:11:19.510
So if it is a hardware
layer, you can

00:11:19.510 --> 00:11:20.590
specify a paint object.

00:11:20.590 --> 00:11:24.790
And that paint object gets
applied onto the view that has

00:11:24.790 --> 00:11:27.040
that layer.

00:11:27.040 --> 00:11:30.630
And if you look at sepia
paint it's a very

00:11:30.630 --> 00:11:31.425
simple color filter.

00:11:31.425 --> 00:11:35.090
They use a couple of color
matrices with some values.

00:11:35.090 --> 00:11:39.002
And by overlaying that onto the
view, you get the sepia

00:11:39.002 --> 00:11:41.740
effect as you're folding it,
which can be very easily

00:11:41.740 --> 00:11:45.560
turned on and off by removing
the layer off of our view.

00:11:45.560 --> 00:11:49.446
So that's ow you do cool
folding animation.

00:11:49.446 --> 00:11:50.696
Thanks for watching.

