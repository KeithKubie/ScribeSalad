WEBVTT
Kind: captions
Language: en

00:00:03.092 --> 00:00:05.550
MACH KOBAYASHI: We all want to
push the limits on our apps,

00:00:05.550 --> 00:00:06.990
especially graphically.

00:00:06.990 --> 00:00:08.590
But you need to be
careful out there.

00:00:08.590 --> 00:00:10.215
Not all of your users
are going to have

00:00:10.215 --> 00:00:11.750
the latest and greatest devices.

00:00:11.750 --> 00:00:13.670
So what might look
great to one user

00:00:13.670 --> 00:00:15.347
might just feel slow to another.

00:00:15.347 --> 00:00:16.930
But you can keep
your graphics looking

00:00:16.930 --> 00:00:18.760
awesome without
sacrificing performance

00:00:18.760 --> 00:00:20.385
with this one weird trick.

00:00:20.385 --> 00:00:20.885
Hi.

00:00:20.885 --> 00:00:23.230
I'm Mach Kobayashi, and
I'm a software engineer

00:00:23.230 --> 00:00:24.500
in Google Research.

00:00:24.500 --> 00:00:27.000
My team is working to bring
3D objects to the world,

00:00:27.000 --> 00:00:29.750
and I focus on the
iOS portion of that.

00:00:29.750 --> 00:00:32.220
Let's take a look at what I've
been working on-- the newest

00:00:32.220 --> 00:00:35.030
version of the Google
Express app for iOS.

00:00:35.030 --> 00:00:36.630
If you're a Google
Express customer

00:00:36.630 --> 00:00:39.450
this is the app that you
would use to buy well, just

00:00:39.450 --> 00:00:40.660
about anything.

00:00:40.660 --> 00:00:42.469
Now on certain items
like this camera

00:00:42.469 --> 00:00:44.260
here, you can actually
click on the picture

00:00:44.260 --> 00:00:46.680
and see a full 3D
view of the object.

00:00:46.680 --> 00:00:48.840
Personally, I don't
buy any camera

00:00:48.840 --> 00:00:51.210
until I've had a chance
to see it from the bottom.

00:00:51.210 --> 00:00:53.917
This looks great on my
shiny new iPhone 6 Plus.

00:00:53.917 --> 00:00:56.500
But if you were to run this on
an older device like the iPhone

00:00:56.500 --> 00:01:00.049
4, yeah, it's a lot choppier.

00:01:00.049 --> 00:01:01.590
It's especially
tough on this device,

00:01:01.590 --> 00:01:03.780
because it's one of the first
with the Retina display.

00:01:03.780 --> 00:01:05.696
Which means that it's
pushing even more pixels

00:01:05.696 --> 00:01:07.230
than the desktop
browser version.

00:01:07.230 --> 00:01:09.160
So what can we do
about this choppiness?

00:01:09.160 --> 00:01:10.790
Well, let's start
by looking at how

00:01:10.790 --> 00:01:13.020
we handle images for
the Retina display.

00:01:13.020 --> 00:01:14.940
When Retina displays
were first released,

00:01:14.940 --> 00:01:18.590
Apple added a content scale
factor to the UIView Class.

00:01:18.590 --> 00:01:20.680
This content scale factor
determined how many

00:01:20.680 --> 00:01:23.630
physical pixels represented
a logical point in a view.

00:01:23.630 --> 00:01:25.230
By using content
scale factors, you

00:01:25.230 --> 00:01:27.540
could represent a shape
at the exact same way

00:01:27.540 --> 00:01:29.900
on two different devices,
even though they were made up

00:01:29.900 --> 00:01:32.230
of drastically different pixels.

00:01:32.230 --> 00:01:35.750
So on my iPhone 4S, the scale
factor is set to 2 by default.

00:01:35.750 --> 00:01:37.440
For every logical
point in my view,

00:01:37.440 --> 00:01:40.590
we're representing that as
a 2 by 2 block of pixels.

00:01:40.590 --> 00:01:42.280
But we can actually change that.

00:01:42.280 --> 00:01:45.260
If we take our view and reduce
the content scale factor to 1,

00:01:45.260 --> 00:01:48.259
we now only need to supply 1
pixel for each logical point.

00:01:48.259 --> 00:01:50.550
That means we only have to
calculate one fourth as many

00:01:50.550 --> 00:01:52.284
pixels to cover the same area.

00:01:52.284 --> 00:01:54.450
The device will automatically
scale things up for us

00:01:54.450 --> 00:01:56.960
by using a crude, but
very fast technique.

00:01:56.960 --> 00:01:59.930
Let's see this in action.

00:01:59.930 --> 00:02:02.520
Now you can see that the
viewer is more responsive.

00:02:02.520 --> 00:02:04.830
But can we go further?

00:02:04.830 --> 00:02:06.990
Here I've really
exaggerated the effect

00:02:06.990 --> 00:02:09.415
by setting content scale
factor to 0.25, which

00:02:09.415 --> 00:02:10.789
means that we're
only calculating

00:02:10.789 --> 00:02:13.930
164th the number of pixels
as we did originally.

00:02:13.930 --> 00:02:16.610
In practice, there's no
need to set it this low,

00:02:16.610 --> 00:02:18.901
but it sure is zippy.

00:02:18.901 --> 00:02:20.400
Unfortunately, as
you can see, we're

00:02:20.400 --> 00:02:23.080
sacrificing visual quality
for responsiveness.

00:02:23.080 --> 00:02:25.250
So is there a way to get
the best of both worlds?

00:02:25.250 --> 00:02:27.040
Is it possible to
switch back and forth

00:02:27.040 --> 00:02:29.500
between different content
scale factor values?

00:02:29.500 --> 00:02:31.410
And it turns out that you can.

00:02:31.410 --> 00:02:34.020
What I like to do is change the
value of content scale factor

00:02:34.020 --> 00:02:36.100
when the user begins
interacting with the object,

00:02:36.100 --> 00:02:38.400
say, in a callback
like touches began.

00:02:38.400 --> 00:02:40.650
Now keep in mind you'll need
to reset the frame buffer

00:02:40.650 --> 00:02:42.270
and update your view
when you do this.

00:02:42.270 --> 00:02:45.310
Fortunately, creating a
frame buffer is very fast,

00:02:45.310 --> 00:02:48.100
and you can still use
your original GL context.

00:02:48.100 --> 00:02:50.380
Now when the user stops
interacting with the object,

00:02:50.380 --> 00:02:52.200
we can crank this
content scale factor

00:02:52.200 --> 00:02:54.790
back up to its original setting,
and you get a high quality

00:02:54.790 --> 00:02:56.066
picture.

00:02:56.066 --> 00:02:57.815
So now we have a viewer
that's responsive,

00:02:57.815 --> 00:03:00.560
but you can still show a high
quality render at the end.

00:03:03.670 --> 00:03:05.420
We hope you found
this trick useful.

00:03:05.420 --> 00:03:07.630
If you did, give it a
try on your own app,

00:03:07.630 --> 00:03:09.440
and let us know in the
comments if you do.

00:03:09.440 --> 00:03:11.000
We'd love to check it out.

00:03:11.000 --> 00:03:13.040
I'm Mach Kobayashi for Route 85.

00:03:13.040 --> 00:03:14.250
Thanks for watching.

00:03:14.250 --> 00:03:17.900
[MUSIC PLAYING]

