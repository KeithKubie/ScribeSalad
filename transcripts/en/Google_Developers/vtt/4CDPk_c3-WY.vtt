WEBVTT
Kind: captions
Language: en

00:00:09.520 --> 00:00:12.320
PENG YING: Hi, and welcome
to Google Developers Live.

00:00:12.320 --> 00:00:14.305
With me today is
my colleague Maru.

00:00:14.305 --> 00:00:15.180
MARU AHUES: Hi, Peng.

00:00:15.180 --> 00:00:16.470
PENG YING: Hi, Maru.

00:00:16.470 --> 00:00:17.970
Now, what we're
talking about today

00:00:17.970 --> 00:00:20.210
is the Google
Wallet Objects API.

00:00:20.210 --> 00:00:22.270
This is another
video in our series

00:00:22.270 --> 00:00:24.970
of videos about the
Wallet Objects API.

00:00:24.970 --> 00:00:27.870
And today, we're going to
talk about the Wallet Objects

00:00:27.870 --> 00:00:29.980
quick start for Ruby.

00:00:29.980 --> 00:00:31.865
The goal of these
quick starts is

00:00:31.865 --> 00:00:34.410
to help you hit the ground
running in your Wallet Objects

00:00:34.410 --> 00:00:36.090
API integration.

00:00:36.090 --> 00:00:38.840
In each of these quick
starts, we cover a few things.

00:00:38.840 --> 00:00:42.100
We cover, hey, how do you
authorize OAuth 2.0 access

00:00:42.100 --> 00:00:43.530
to the resources?

00:00:43.530 --> 00:00:46.910
We cover how to insert
a Wallet Objects class.

00:00:46.910 --> 00:00:51.400
We cover save to Wallet and
how to create a Wallet Object.

00:00:51.400 --> 00:00:55.210
And lastly, we cover the
Wallet web service API,

00:00:55.210 --> 00:00:58.050
which is how do you
enable a discoverable,

00:00:58.050 --> 00:00:59.660
and how do you allow
people to sign up

00:00:59.660 --> 00:01:02.380
for specifically
loyalty objects?

00:01:02.380 --> 00:01:05.800
And to walk through getting
the Ruby quick start up

00:01:05.800 --> 00:01:07.820
and running, here's Maru.

00:01:07.820 --> 00:01:09.060
MARU AHUES: Thank you, Peng.

00:01:09.060 --> 00:01:11.300
Now, let's go into
our documentation

00:01:11.300 --> 00:01:14.740
to get the instructions on
how to download, install,

00:01:14.740 --> 00:01:17.200
and configure the
Ruby quick start.

00:01:17.200 --> 00:01:24.040
First thing is go to our
 developers.google.com/commerce/wallet,

00:01:24.040 --> 00:01:28.140
and then from there, go to the
Google Wallet Objects and click

00:01:28.140 --> 00:01:31.470
on Quick Start
Samples and then Ruby.

00:01:31.470 --> 00:01:35.950
Once you're there, the first
thing that I recommend you do

00:01:35.950 --> 00:01:38.170
is watch the video
that we have on how

00:01:38.170 --> 00:01:41.460
to set up your account,
your OAuth account,

00:01:41.460 --> 00:01:44.130
and get your credentials.

00:01:44.130 --> 00:01:47.780
Once you do that, then the
first thing we're going to do

00:01:47.780 --> 00:01:50.510
is download the sample code.

00:01:50.510 --> 00:01:52.750
To do that, we're going
to go into GitHub.

00:01:52.750 --> 00:01:55.320
Our code is open source,
and you can download it

00:01:55.320 --> 00:01:57.630
or you can clone it from GitHub.

00:01:57.630 --> 00:02:07.700
To do that, the URL is
 github.com/googlewallet/walletobjects-quickstart-ruby.

00:02:07.700 --> 00:02:10.130
From here we can
just copy the URL

00:02:10.130 --> 00:02:13.055
and clone it, or download
it to our local computer.

00:02:17.410 --> 00:02:19.600
On my computer here, I
have it already cloned.

00:02:19.600 --> 00:02:22.130
So this is our directory.

00:02:22.130 --> 00:02:25.650
And these are the files that
we have for the quick start.

00:02:25.650 --> 00:02:28.835
And take, now, a copy
of your private key--

00:02:28.835 --> 00:02:31.460
the one that you downloaded when
you created your credentials--

00:02:31.460 --> 00:02:33.640
and copy it into this directory.

00:02:33.640 --> 00:02:37.760
In my case, my private key is
called wolves-privatekey.p12.

00:02:37.760 --> 00:02:41.730
So I already created it and
copied it into this directory.

00:02:41.730 --> 00:02:44.850
Now, let's go and
configure and make sure

00:02:44.850 --> 00:02:48.382
that we're using the credentials
that we got into our project.

00:02:48.382 --> 00:02:50.715
To do that, let's open the
file called wavsconstants.rv.

00:02:53.870 --> 00:02:56.240
So I'm going to open
it here in my editor.

00:02:56.240 --> 00:02:58.630
And I already have it here.

00:02:58.630 --> 00:03:01.560
And from here, let's change
some of these values.

00:03:01.560 --> 00:03:04.060
The first one is the service
account email address.

00:03:04.060 --> 00:03:10.180
To get that, you'll need
to go into the cloud,

00:03:10.180 --> 00:03:14.910
onto your Cloud Console here,
then click on APIs-- Registered

00:03:14.910 --> 00:03:15.850
Apps, I'm sorry.

00:03:15.850 --> 00:03:18.880
Service Account-project.

00:03:18.880 --> 00:03:21.490
And from here, this
is your email address

00:03:21.490 --> 00:03:25.330
that you'll need to use as a
service account email address.

00:03:25.330 --> 00:03:31.360
So I'm just going to copy that
and paste it here in my file.

00:03:31.360 --> 00:03:34.110
And also, now,
get your esure ID.

00:03:34.110 --> 00:03:37.950
You can find that from
the merchant dashboard.

00:03:37.950 --> 00:03:41.000
So in here, just by going
into Account Management,

00:03:41.000 --> 00:03:44.520
we can copy paste the esure ID.

00:03:44.520 --> 00:03:47.080
So we're copying that into here.

00:03:47.080 --> 00:03:52.390
And now, go into the
service account private key.

00:03:52.390 --> 00:03:53.900
For the service
account private key,

00:03:53.900 --> 00:03:55.420
this is the name
of my private key.

00:03:55.420 --> 00:03:56.990
But if you have
a different name,

00:03:56.990 --> 00:03:59.050
you also need to modify that.

00:03:59.050 --> 00:04:01.330
The application
name-- this value

00:04:01.330 --> 00:04:03.060
doesn't need to match
any of the values

00:04:03.060 --> 00:04:04.900
that you had when you
created your account.

00:04:04.900 --> 00:04:08.060
So in our case, we have by
default Wallet Objects API

00:04:08.060 --> 00:04:11.380
Demo, and you can
leave that value there.

00:04:11.380 --> 00:04:14.310
For the origins,
this URL is the URL

00:04:14.310 --> 00:04:17.829
where we're going to be running
the quick start locally.

00:04:17.829 --> 00:04:20.890
So we have local host
and then port 8080.

00:04:20.890 --> 00:04:22.630
If you're going to
be changing the port,

00:04:22.630 --> 00:04:24.180
then you need to
modify this value.

00:04:24.180 --> 00:04:26.940
Otherwise you can
leave it as this.

00:04:26.940 --> 00:04:31.410
Then we have four different IDs
for the loyalty class object

00:04:31.410 --> 00:04:35.520
ID, for the class object,
and for the offers, as well.

00:04:35.520 --> 00:04:38.950
In this case, you can leave them
as this, or we can modify them.

00:04:38.950 --> 00:04:40.730
If you've been running
the quick start

00:04:40.730 --> 00:04:42.510
and you want to
create a new class,

00:04:42.510 --> 00:04:44.560
then you'll need
to change these.

00:04:44.560 --> 00:04:50.110
So let's say demo one
for each of these.

00:04:50.110 --> 00:04:54.425
Once we have these, we should
be able to run the quick starts.

00:04:54.425 --> 00:04:56.270
But before we do
that, let's make sure

00:04:56.270 --> 00:04:59.880
that we have our
prerequisites done here.

00:04:59.880 --> 00:05:02.580
So first, let's check
our Ruby version.

00:05:02.580 --> 00:05:09.250
So to do that just run
version-- and I'm running 2.0.

00:05:09.250 --> 00:05:11.460
You need to be
running at least 1.93.

00:05:11.460 --> 00:05:14.350
So if that's good, and you
don't need to upgrade your Ruby,

00:05:14.350 --> 00:05:16.910
then now let's
move into our gems.

00:05:16.910 --> 00:05:19.600
For the gems, we need to
have four gems installed

00:05:19.600 --> 00:05:22.160
for the quick start.

00:05:22.160 --> 00:05:27.010
We need to have JSON, the
Google API client, the JWT,

00:05:27.010 --> 00:05:27.830
and Sinatra.

00:05:27.830 --> 00:05:31.830
So let's run-- maybe
you already have

00:05:31.830 --> 00:05:33.530
some of these installed,
so first let's

00:05:33.530 --> 00:05:37.640
run gem query-- local to
see which ones we have.

00:05:37.640 --> 00:05:39.440
And in my case, I have them all.

00:05:39.440 --> 00:05:44.260
I have Sinatra, Google
API Client, JSON, and JWT.

00:05:44.260 --> 00:05:48.150
If you don't have one of
these, then it's very easy.

00:05:48.150 --> 00:05:50.850
Just do gem install and
the name of the gem.

00:05:50.850 --> 00:05:53.920
So I can do here, JSON.

00:05:53.920 --> 00:05:57.160
So since I already installed
them, we don't need to do that.

00:05:57.160 --> 00:06:01.500
Now, once we have that, we have
the correct version of Ruby.

00:06:01.500 --> 00:06:03.200
We downloaded the code.

00:06:03.200 --> 00:06:04.990
We also have all
our gems installed.

00:06:04.990 --> 00:06:06.850
And we modified
all our parameters.

00:06:06.850 --> 00:06:09.050
Now, all we need to
do is just run it.

00:06:09.050 --> 00:06:10.700
To do that is very easy.

00:06:10.700 --> 00:06:13.510
We're using Sinatra
to run the server.

00:06:13.510 --> 00:06:17.920
And we'll call it by doing
Ruby wobs_server, which

00:06:17.920 --> 00:06:20.610
is the name of the Ruby
script that we're running.

00:06:20.610 --> 00:06:23.900
And then minus p
to say that we want

00:06:23.900 --> 00:06:26.340
to run it on a specific port.

00:06:26.340 --> 00:06:30.150
In this case, I'm
running it on port 8080.

00:06:30.150 --> 00:06:32.460
So once we run it,
now it's telling us

00:06:32.460 --> 00:06:34.090
that it's running on port 8080.

00:06:34.090 --> 00:06:35.060
Everything's good.

00:06:35.060 --> 00:06:36.310
Sinatra is running.

00:06:36.310 --> 00:06:39.925
So now, let's go into our
browser and see how this looks.

00:06:43.020 --> 00:06:52.870
So I have here-- we're going to
go into local host port 8080.

00:06:52.870 --> 00:06:56.720
Once we run this, you'll see
that we have it successfully

00:06:56.720 --> 00:06:57.950
running.

00:06:57.950 --> 00:06:59.430
Now, what do we
have in this page?

00:06:59.430 --> 00:07:01.630
We have two steps.

00:07:01.630 --> 00:07:04.330
The first step, it says,
insert the class, so either

00:07:04.330 --> 00:07:06.860
a loyalty class
or an offer class.

00:07:06.860 --> 00:07:09.780
And then we have two
Save to Wallet buttons.

00:07:09.780 --> 00:07:11.070
How does this work?

00:07:11.070 --> 00:07:13.320
The first thing that
you do is that you

00:07:13.320 --> 00:07:16.446
need to have a class
for whatever vertical

00:07:16.446 --> 00:07:17.820
you're working
with, so let's say

00:07:17.820 --> 00:07:19.870
that we're doing the loyalty.

00:07:19.870 --> 00:07:21.610
You'll need to start
the class first,

00:07:21.610 --> 00:07:24.490
and this is only done
once in the system.

00:07:24.490 --> 00:07:26.730
You can also, of
course, update classes

00:07:26.730 --> 00:07:28.950
after you've inserted
them, but you only

00:07:28.950 --> 00:07:31.060
need to insert it once.

00:07:31.060 --> 00:07:35.840
So this button will not be on
your site-- this is only here

00:07:35.840 --> 00:07:38.620
for us to test, to show
you how to create classes

00:07:38.620 --> 00:07:41.010
every time you modify
something on the call.

00:07:41.010 --> 00:07:43.760
But then after, we
then started the class,

00:07:43.760 --> 00:07:46.450
then you will have a
button, or you most probably

00:07:46.450 --> 00:07:49.530
will have a button to
save the card or a coupon

00:07:49.530 --> 00:07:52.140
to the user's Wallet.

00:07:52.140 --> 00:07:53.680
So this button,
once we click it,

00:07:53.680 --> 00:07:56.510
it will create an object
on my Google Wallet

00:07:56.510 --> 00:07:58.710
account, where I'm
signed in, here.

00:07:58.710 --> 00:08:00.810
And then we'll be able
to see that on the phone,

00:08:00.810 --> 00:08:02.490
on the Google Wallet app.

00:08:02.490 --> 00:08:07.390
So first, let me create the
class by just clicking on that.

00:08:07.390 --> 00:08:09.660
Then, it says that it's
inserted the class--

00:08:09.660 --> 00:08:12.670
loyalty class demo one,
which is how we named it --

00:08:12.670 --> 00:08:16.020
and now I go into to
Save Card to Wallet,

00:08:16.020 --> 00:08:17.870
and it saved the card already.

00:08:17.870 --> 00:08:20.880
So now, when we go into
our Google Wallet App,

00:08:20.880 --> 00:08:21.880
we'll see it saved.

00:08:21.880 --> 00:08:23.919
And we'll do that
during our demo.

00:08:23.919 --> 00:08:25.710
PENG YING: And to get
a better idea of what

00:08:25.710 --> 00:08:29.340
classes and objects are, we also
have another Google Developers

00:08:29.340 --> 00:08:31.840
Live video covering the
concept of what objects

00:08:31.840 --> 00:08:33.260
they can take a look at.

00:08:33.260 --> 00:08:34.880
MARU AHUES: Now,
let's go and look

00:08:34.880 --> 00:08:37.340
at the web service
API integration.

00:08:37.340 --> 00:08:41.340
We also provide a sample code
for this in our quick start.

00:08:41.340 --> 00:08:44.700
And how this works then, from
the Google Wallet app, whenever

00:08:44.700 --> 00:08:50.000
a user clicks on either a member
or joining the program, what

00:08:50.000 --> 00:08:53.290
Google does is Google
will send the information

00:08:53.290 --> 00:08:56.030
in a case on request
to your web service.

00:08:56.030 --> 00:08:58.460
Then you will
process, on your end,

00:08:58.460 --> 00:09:01.730
to either create a new object
or send us an existing object.

00:09:01.730 --> 00:09:06.740
Is this is a user that already
has a loyalty card with you?

00:09:06.740 --> 00:09:10.000
Send that information
back to us in JSON.

00:09:10.000 --> 00:09:12.750
And then we will
display it on the phone.

00:09:12.750 --> 00:09:15.730
So let's look at
how we can configure

00:09:15.730 --> 00:09:17.585
that in our discoverable.

00:09:20.730 --> 00:09:23.630
From here, from the browser
on the merchant dashboard,

00:09:23.630 --> 00:09:27.070
if I go into
discoverables, you see here

00:09:27.070 --> 00:09:30.100
that I'm going to edit it.

00:09:30.100 --> 00:09:34.360
And there's a section
called merchant callback

00:09:34.360 --> 00:09:35.300
configuration.

00:09:35.300 --> 00:09:39.100
So in here, you need to
add the URL to the host

00:09:39.100 --> 00:09:42.560
where you're running
your quick start sample,

00:09:42.560 --> 00:09:45.780
and here we need it to be
running somewhere outside, not

00:09:45.780 --> 00:09:51.700
on your local site, so you can
be reachable from our service.

00:09:51.700 --> 00:09:55.910
And the port, and we recommend
that this is running over SSL.

00:09:55.910 --> 00:09:59.770
For testing, you can run
it over regular HTTP.

00:09:59.770 --> 00:10:02.780
But for when you
launch the application,

00:10:02.780 --> 00:10:05.280
needs to be running over SSL.

00:10:05.280 --> 00:10:08.760
Then the path to the web
service on our sample,

00:10:08.760 --> 00:10:10.184
it's web service.

00:10:10.184 --> 00:10:11.600
And of course, you
can change that

00:10:11.600 --> 00:10:15.620
later to whatever makes sense
for you, your application.

00:10:15.620 --> 00:10:20.650
Once we have this, we'll--
whenever there's a request,

00:10:20.650 --> 00:10:23.500
then Google will send
the JSON request to you,

00:10:23.500 --> 00:10:25.240
and you'll respond back to it.

00:10:25.240 --> 00:10:28.170
Peng is going to do a demo on
how this works on the phone,

00:10:28.170 --> 00:10:30.880
and then we'll go over the
code and see where all of this

00:10:30.880 --> 00:10:32.560
is happening in the sample.

00:10:32.560 --> 00:10:35.000
PENG YING: All right, let's
take a look at the phone.

00:10:35.000 --> 00:10:38.214
This is the latest Wallet app.

00:10:38.214 --> 00:10:40.380
And within this Wallet app,
we can see a few things.

00:10:40.380 --> 00:10:43.590
This is what we call
the Here and Now page.

00:10:43.590 --> 00:10:46.600
As you'll see, I have
one loyalty program

00:10:46.600 --> 00:10:48.180
that I've joined.

00:10:48.180 --> 00:10:52.240
This occurred when Maru
clicked Save This Wallet

00:10:52.240 --> 00:10:53.369
during the demo.

00:10:53.369 --> 00:10:55.160
So let's take a look
at that wallet program

00:10:55.160 --> 00:10:58.330
first, or let's take a look
at loyalty object first.

00:10:58.330 --> 00:10:59.540
It's Baconrista Rewards.

00:10:59.540 --> 00:11:01.190
This is our demo merchant.

00:11:01.190 --> 00:11:02.810
And within it, you
can see that hey,

00:11:02.810 --> 00:11:05.460
I have 500 points,
that the tier I am

00:11:05.460 --> 00:11:08.940
is gold, that it's
Maru who joints,

00:11:08.940 --> 00:11:12.010
and some additional details
that a merchant could provide

00:11:12.010 --> 00:11:14.370
for their loyalty objects.

00:11:14.370 --> 00:11:16.700
Now let's take a look at
what a discoverable is,

00:11:16.700 --> 00:11:19.130
and the web service API.

00:11:19.130 --> 00:11:20.900
So in order to
join a new program,

00:11:20.900 --> 00:11:22.566
let's say I'm in the
store or something,

00:11:22.566 --> 00:11:24.120
I want to join a
loyalty program.

00:11:24.120 --> 00:11:26.730
I hit + to find the
loyalty programs that

00:11:26.730 --> 00:11:27.920
are available to me.

00:11:27.920 --> 00:11:30.750
This list will also
be sorted and it'll

00:11:30.750 --> 00:11:32.980
show programs that,
in the future,

00:11:32.980 --> 00:11:35.520
will be relevant
to your location.

00:11:35.520 --> 00:11:38.630
In this case, I'm going to
join our test merchant, which

00:11:38.630 --> 00:11:41.140
is CC Baconrista Rewards.

00:11:41.140 --> 00:11:44.390
So let's take a look
at this discoverable,

00:11:44.390 --> 00:11:46.820
and some details about
bacon plus coffee,

00:11:46.820 --> 00:11:49.480
your best morning every day.

00:11:49.480 --> 00:11:53.210
And yes, I'd love to join
this one, so I'll click join.

00:11:53.210 --> 00:11:55.420
So all of this information
that you see now

00:11:55.420 --> 00:11:58.150
is information that's populated
from my Google Wallet slash

00:11:58.150 --> 00:12:00.570
Google account.

00:12:00.570 --> 00:12:03.040
And this information
can be modified

00:12:03.040 --> 00:12:04.690
by changing some
conditions and then

00:12:04.690 --> 00:12:06.870
discoverable of that
bar we just chose.

00:12:06.870 --> 00:12:10.000
I accept the terms
of service, and I'll

00:12:10.000 --> 00:12:12.430
take some promotional
emails from this merchant.

00:12:12.430 --> 00:12:14.050
Create the account.

00:12:14.050 --> 00:12:16.880
So this will take a few seconds
to call back to the web service

00:12:16.880 --> 00:12:18.960
that Maru just
showed, and then it'll

00:12:18.960 --> 00:12:22.800
to return objects to the
Google service, which will then

00:12:22.800 --> 00:12:26.800
push the object display
back down to my device.

00:12:26.800 --> 00:12:30.750
In this case, I have a
second card with a balance.

00:12:30.750 --> 00:12:33.600
So in this case, maybe I
could show this balance

00:12:33.600 --> 00:12:37.110
and use it as my stored value,
or something in the future.

00:12:37.110 --> 00:12:38.210
So that's a quick demo.

00:12:38.210 --> 00:12:41.424
Now here's Maru to talk
about how everything works.

00:12:41.424 --> 00:12:42.840
MARU AHUES: From
the discoverable,

00:12:42.840 --> 00:12:45.520
there's one thing that we need
to make sure we have set up

00:12:45.520 --> 00:12:47.970
once we're doing
testing on our end,

00:12:47.970 --> 00:12:51.500
is that the status of the
discoverable needs to be draft.

00:12:51.500 --> 00:12:54.870
If it's draft, that means that
no one can see it publicly,

00:12:54.870 --> 00:12:57.610
but we can see it
on our testing mode.

00:12:57.610 --> 00:13:00.650
Also, you will need
to share-- If you

00:13:00.650 --> 00:13:05.031
go to account management, you'll
need to share with the account

00:13:05.031 --> 00:13:05.780
that you're using.

00:13:05.780 --> 00:13:10.680
In my case here, GWalletDemo
is the email address

00:13:10.680 --> 00:13:12.500
that Peng is using on the phone.

00:13:12.500 --> 00:13:14.840
So as long as you get
your discoverable,

00:13:14.840 --> 00:13:19.010
you set it on draft and you
share with the email addresses

00:13:19.010 --> 00:13:21.900
of the accounts that you want
to share your discoverable with.

00:13:21.900 --> 00:13:23.650
Then you can use
it on test mode.

00:13:23.650 --> 00:13:28.742
So you won't be live to anyone
except when you're testing.

00:13:28.742 --> 00:13:30.200
Now, let's look at
some of the code

00:13:30.200 --> 00:13:33.070
and see how this all works out.

00:13:33.070 --> 00:13:35.050
I'm going to open
here the editor.

00:13:35.050 --> 00:13:38.960
And for the Ruby
sample, we have--

00:13:38.960 --> 00:13:43.400
most of the code is included
in the wobs server RB file.

00:13:43.400 --> 00:13:48.280
And what we're doing here is
we have-- first in this area,

00:13:48.280 --> 00:13:49.980
we have the
authentication, and we're

00:13:49.980 --> 00:13:52.500
doing that using OAuth 2.0.

00:13:52.500 --> 00:13:55.660
You have your credentials,
you have your private key,

00:13:55.660 --> 00:13:57.980
and your service
account email address.

00:13:57.980 --> 00:14:02.140
After doing that, we
have-- let me open,

00:14:02.140 --> 00:14:05.990
first, the index.html
so we can look at it.

00:14:05.990 --> 00:14:08.280
When we open the sample,
the first thing you see

00:14:08.280 --> 00:14:10.710
is the index.html page, right?

00:14:10.710 --> 00:14:12.480
And there we have the two steps.

00:14:12.480 --> 00:14:15.280
The first one has the buttons
to insert the loyalty class,

00:14:15.280 --> 00:14:19.670
and the second one has the
save to wallet buttons.

00:14:19.670 --> 00:14:22.700
So on the first one, where we
have the insert loyalty class,

00:14:22.700 --> 00:14:25.840
we can see that these
buttons are rendered

00:14:25.840 --> 00:14:31.650
and they're-- here,
let me ope it here--

00:14:31.650 --> 00:14:36.720
here on the JS file that we are
including within the index.html

00:14:36.720 --> 00:14:40.360
file, we are associating
an action to these.

00:14:40.360 --> 00:14:42.120
When we click on the
loyalty, then we're

00:14:42.120 --> 00:14:45.810
going to be calling
insert/loyalty.

00:14:45.810 --> 00:14:47.980
The same for the
offer button here,

00:14:47.980 --> 00:14:50.680
we're going to be
calling insert/offer.

00:14:50.680 --> 00:14:51.660
then

00:14:51.660 --> 00:14:55.060
We also have, when you're
calling the loyalty save,

00:14:55.060 --> 00:14:58.000
or offer save--
when the page loads,

00:14:58.000 --> 00:15:04.250
this when the page loads here,
we're calling JWT/loyalty.

00:15:04.250 --> 00:15:08.370
And then we're also calling the
job/offer for the other button.

00:15:08.370 --> 00:15:12.470
And what this is doing is
that it's rendering the G save

00:15:12.470 --> 00:15:15.300
to Wallet tag on the
button, which will,

00:15:15.300 --> 00:15:19.910
based on the JS file that we're
including on the index.html,

00:15:19.910 --> 00:15:22.930
will render the nice
Save to Wallet button

00:15:22.930 --> 00:15:25.050
that you see on the page.

00:15:25.050 --> 00:15:27.150
So how does this work?

00:15:27.150 --> 00:15:28.780
When you call the--
first let's look

00:15:28.780 --> 00:15:31.740
at the job for the
save to Wallet button.

00:15:31.740 --> 00:15:35.320
How this works is that you'll
go into the wobs server.

00:15:35.320 --> 00:15:37.480
And we'll find here the path.

00:15:37.480 --> 00:15:43.200
We're saying, if you're calling
jobs/anything, then call this.

00:15:43.200 --> 00:15:46.300
And what this is doing is
that it's creating a job,

00:15:46.300 --> 00:15:50.010
and it's including the
information of the object

00:15:50.010 --> 00:15:53.940
that we're creating-- either
a loyalty object or an offer

00:15:53.940 --> 00:15:54.690
object.

00:15:54.690 --> 00:15:55.990
So this is what we're doing.

00:15:55.990 --> 00:15:58.520
We're saying if it's--
the type is loyalty,

00:15:58.520 --> 00:16:01.490
then we generate an object
and then we add the object

00:16:01.490 --> 00:16:02.730
to the payload.

00:16:02.730 --> 00:16:06.750
And then we encode the
JWT, and here we're

00:16:06.750 --> 00:16:08.290
just outputting that.

00:16:08.290 --> 00:16:09.720
So what it's doing
is that if you

00:16:09.720 --> 00:16:14.840
see the page when we
load it, and you just

00:16:14.840 --> 00:16:16.860
inspect the element,
you'll see that it

00:16:16.860 --> 00:16:22.240
has the JWT on the
URL for that button.

00:16:22.240 --> 00:16:24.450
Then, also we have the insert.

00:16:24.450 --> 00:16:26.290
If you're going
to insert a class,

00:16:26.290 --> 00:16:30.160
then we also have-- if you post
to insert with a type, what

00:16:30.160 --> 00:16:33.160
we're doing in here is that
we're generating a class, also

00:16:33.160 --> 00:16:37.570
based on the idea that we
created on the wobs constants.

00:16:37.570 --> 00:16:40.910
And then we're
calling the API here.

00:16:40.910 --> 00:16:44.330
We're calling our REST API to
insert the object-- the class,

00:16:44.330 --> 00:16:46.750
in this case.

00:16:46.750 --> 00:16:49.120
And that is returning
back an answer, and that

00:16:49.120 --> 00:16:53.010
is displayed on the
page, on the index.html.

00:16:53.010 --> 00:16:56.010
Then the last path that
we need to look at here

00:16:56.010 --> 00:16:57.530
is the web service.

00:16:57.530 --> 00:16:59.870
And this is the one
that was configured

00:16:59.870 --> 00:17:01.710
from the discoverable.

00:17:01.710 --> 00:17:04.060
And when you call web
service, what it's doing

00:17:04.060 --> 00:17:05.700
is that it's checking.

00:17:05.700 --> 00:17:07.380
It's getting-- in
our case, we are

00:17:07.380 --> 00:17:10.410
assuming that we have success--
a successful response-- all

00:17:10.410 --> 00:17:10.910
the time.

00:17:10.910 --> 00:17:14.849
But you can change this value
to return a different message.

00:17:14.849 --> 00:17:18.040
So we're saying, if
it's successful here,

00:17:18.040 --> 00:17:19.569
we're going to create a JWT.

00:17:19.569 --> 00:17:23.380
And we're going to send
back on the payload

00:17:23.380 --> 00:17:25.240
that the result is approved.

00:17:25.240 --> 00:17:30.310
And we're going to send the
loyalty object back to Google.

00:17:30.310 --> 00:17:32.370
So how this works
here is that we're

00:17:32.370 --> 00:17:33.690
generating an object here.

00:17:33.690 --> 00:17:36.280
And we always generate the
same one for the sample.

00:17:36.280 --> 00:17:40.290
But on your case, you would
say, oh it's a new member,

00:17:40.290 --> 00:17:42.150
so we generate a
new object, and you

00:17:42.150 --> 00:17:43.980
generate this
object on your end,

00:17:43.980 --> 00:17:46.510
and then you send back
the information to us.

00:17:46.510 --> 00:17:48.900
And then, of course, you
put them on the payload,

00:17:48.900 --> 00:17:50.670
and you encode it
and send it back.

00:17:50.670 --> 00:17:55.560
Same way that we do with the
other path, with the job path.

00:17:55.560 --> 00:17:57.560
If their response
is not successful,

00:17:57.560 --> 00:17:59.400
then you don't have
to send an object.

00:17:59.400 --> 00:18:03.440
The only thing you send
back is an error message.

00:18:03.440 --> 00:18:05.700
And the result is rejected.

00:18:05.700 --> 00:18:09.530
In that case, then, Google
will display an error

00:18:09.530 --> 00:18:11.920
on the Google Wallet app.

00:18:11.920 --> 00:18:15.760
We also provide on
this sample other paths

00:18:15.760 --> 00:18:18.880
to be able to list
classes and list objects

00:18:18.880 --> 00:18:20.550
and get specific objects.

00:18:20.550 --> 00:18:22.820
And those are just
examples on how

00:18:22.820 --> 00:18:25.560
to call the RESTful
APIs using Ruby.

00:18:25.560 --> 00:18:29.550
This concludes the Google Wallet
Objects Ruby quick start video.

00:18:29.550 --> 00:18:31.410
We hope you found
this video helpful.

00:18:31.410 --> 00:18:33.380
For more videos,
please visit us at

00:18:33.380 --> 00:18:37.090
developers.google.com/livewallet.

00:18:37.090 --> 00:18:40.960
You can also find us in
Google+ and/or Twitter.

00:18:40.960 --> 00:18:42.550
PENG YING: Yeah,
thanks for joining us

00:18:42.550 --> 00:18:44.480
for another week of
Google Developers Live.

00:18:44.480 --> 00:18:46.930
BOTH: See you next time.

