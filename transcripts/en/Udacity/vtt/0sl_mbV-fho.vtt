WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.680
Aggregation in MongoDB uses a pipeline. At the

00:00:02.680 --> 00:00:06.840
far left is your collection, so for example tweets.

00:00:06.840 --> 00:00:09.590
The collection is fed into the first stage

00:00:09.590 --> 00:00:12.480
and the first stage processes the documents in some

00:00:12.480 --> 00:00:14.870
way, and passes the results onto the next

00:00:14.870 --> 00:00:19.400
stage. Each stage does this type of work, processes

00:00:19.400 --> 00:00:22.040
the documents it receives as inputs, and produces

00:00:22.040 --> 00:00:25.420
output documents that are passed to the next stage.

00:00:25.420 --> 00:00:26.450
Now in the example that we looked at in the

00:00:26.450 --> 00:00:29.810
previous lesson, the stages included were a group stage and

00:00:29.810 --> 00:00:32.800
a sort stage. It's the group stage that actually does

00:00:32.800 --> 00:00:35.580
the aggregation. Let's take a look at a pipeline specific to

00:00:35.580 --> 00:00:38.500
that example. Okay, we'll zoom into this, but this is

00:00:38.500 --> 00:00:42.300
a representation of the aggregation pipeline that we saw in

00:00:42.300 --> 00:00:46.450
our previous example. Again, that example looks like this. So,

00:00:46.450 --> 00:00:50.530
here is our aggregate query. Okay. So, here in this column,

00:00:50.530 --> 00:00:53.130
we're representing the collection being fed into that first group

00:00:53.130 --> 00:00:56.760
stage. And then, what the group stage then passes onto

00:00:56.760 --> 00:00:59.570
the sort stage. And then, this is the output of

00:00:59.570 --> 00:01:02.010
the group stage and then finally, the output of the sort

00:01:02.010 --> 00:01:03.820
stage. Let's take a look at each of these in

00:01:03.820 --> 00:01:07.950
just a little bit more detail. Okay, so here's our collection.

00:01:07.950 --> 00:01:11.610
And you can see that I've represented several documents within

00:01:11.610 --> 00:01:15.650
the collection, and in fact, multiple documents for some of the

00:01:15.650 --> 00:01:19.330
Twitter users, okay. This collection will be fed

00:01:19.330 --> 00:01:22.080
into the group stage. So what does group do?

00:01:22.080 --> 00:01:25.390
Well, group is going to find the screen

00:01:25.390 --> 00:01:28.450
name field for the user sub document in each

00:01:28.450 --> 00:01:31.610
one of our tweets. And it's going to

00:01:31.610 --> 00:01:34.950
aggregate together, it's going to accumulate all of those

00:01:34.950 --> 00:01:38.200
tweets and then count them. So, here we

00:01:38.200 --> 00:01:40.770
can see that for this Twitter user, we get

00:01:40.770 --> 00:01:43.520
a count of eight tweets. Because that's how many

00:01:43.520 --> 00:01:47.210
were found in the entire collection of tweets. So,

00:01:47.210 --> 00:01:50.230
the group stage produces documents that look like, this

00:01:50.230 --> 00:01:52.360
from documents that have the shape of those in

00:01:52.360 --> 00:01:55.420
the collection itself, in the tweets collection itself. So

00:01:55.420 --> 00:01:58.480
the sort stage then, takes this type of document

00:01:58.480 --> 00:02:02.810
as input and produces this as output. Remember, sort

00:02:02.810 --> 00:02:05.830
is sorting into reverse order. So, it's producing documents

00:02:05.830 --> 00:02:09.320
that look exactly the same as these, simply sorted,

00:02:09.320 --> 00:02:11.310
so that the ones that have the highest count

00:02:11.310 --> 00:02:13.230
are at the top. So one thing that it's

00:02:13.230 --> 00:02:15.320
very important to bear in mind, when you're thinking about

00:02:15.320 --> 00:02:18.840
the aggregation framework in MongoDB, is that. Depending on

00:02:18.840 --> 00:02:21.760
which operator is used in a given stage. That

00:02:21.760 --> 00:02:26.590
stage may be reshaping the data, sometimes quite significantly.

00:02:26.590 --> 00:02:31.030
The collection of tweets contains dozens of fields. What we've

00:02:31.030 --> 00:02:33.840
done here, what our group stage does, as it

00:02:33.840 --> 00:02:37.150
creates documents that look very different from these to

00:02:37.150 --> 00:02:39.750
do its job. So the whole idea with the

00:02:39.750 --> 00:02:44.120
aggregation pipeline, is that you use aggregation operators, to construct

00:02:44.120 --> 00:02:47.690
stages that will in a series of steps, process

00:02:47.690 --> 00:02:49.890
your data in such a way that it produces

00:02:49.890 --> 00:02:52.340
the results you need. Sometimes a single stage is

00:02:52.340 --> 00:02:56.350
enough, other times you need several stages. And the individual

00:02:56.350 --> 00:02:58.440
operators that are used in a given stage are

00:02:58.440 --> 00:03:02.420
entirely dependent on your application. Exactly what type of processing

00:03:02.420 --> 00:03:04.650
you want to do. You're not whetted to using group

00:03:04.650 --> 00:03:07.470
in the first stage or sort in the last stage.

