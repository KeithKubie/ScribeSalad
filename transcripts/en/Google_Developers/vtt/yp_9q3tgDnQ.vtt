WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.260
NATHAN NAZE: So this is
the Closure Library talk.

00:00:03.260 --> 00:00:05.620
We're starting a little
late, because the main

00:00:05.620 --> 00:00:06.540
session went over.

00:00:06.540 --> 00:00:07.660
My name is Nathan Naze.

00:00:07.660 --> 00:00:09.700
I am an Engineer at Google.

00:00:09.700 --> 00:00:12.520
I have a day job--it is
Google Books, where

00:00:12.520 --> 00:00:13.730
I am a UI Engineer.

00:00:13.730 --> 00:00:18.470
Google Books is one of the
users of Closure Tools in

00:00:18.470 --> 00:00:20.189
general and specifically
Closure Library which is what

00:00:20.189 --> 00:00:21.769
the talk is about today.

00:00:23.609 --> 00:00:26.549
I'm not sure that everybody is
familiar with Closure Library;

00:00:26.549 --> 00:00:28.349
we will spend some time at the
beginning just going over what

00:00:28.349 --> 00:00:30.779
it is and then how to use it.

00:00:32.090 --> 00:00:34.059
View live notes and ask
questions about this about

00:00:34.059 --> 00:00:36.160
the session on Google Wave:
there's a bit.ly link.

00:00:36.160 --> 00:00:42.040
Can everybody read that it's
-- we can do this, if not.

00:00:44.170 --> 00:00:47.140
Right there if you want to type
that in and you have a laptop,

00:00:47.140 --> 00:00:48.940
there's also a Google
Moderator on there.

00:00:48.940 --> 00:00:51.040
I've looked through the
questions already and we will

00:00:51.040 --> 00:00:52.590
go through those and we
also do Q&amp;A at the end.

00:00:53.970 --> 00:00:59.970
So there's three major parts to
this talk: the three parts are

00:00:59.970 --> 00:01:01.540
What is Closure Library,
Getting started with

00:01:01.540 --> 00:01:04.180
Closure Library, and
the reference manual.

00:01:04.860 --> 00:01:06.650
What is the Closure Library is
basically just going to go over

00:01:06.650 --> 00:01:09.370
the Library itself -- talk
about the history

00:01:09.370 --> 00:01:10.020
of the project.

00:01:10.020 --> 00:01:12.250
Getting started with Closure
Library will actually just do a

00:01:12.250 --> 00:01:15.909
brief overview of how it works
and how it's set up, and then

00:01:15.909 --> 00:01:18.130
also a demo of how to get it
working and using an

00:01:18.130 --> 00:01:18.579
actual application.

00:01:19.130 --> 00:01:21.320
And then the reference manual
is just going on -- a brief

00:01:21.320 --> 00:01:22.210
overview of the Library.

00:01:22.210 --> 00:01:24.859
It's inconceivable that we
actually go through every

00:01:24.859 --> 00:01:27.520
module and everything and go
like that, but when you get

00:01:27.520 --> 00:01:29.130
home, you will like to do that.

00:01:29.130 --> 00:01:33.260
We'll talk about some of
the more out there points.

00:01:33.260 --> 00:01:34.390
So what is Closure Library?

00:01:34.390 --> 00:01:36.080
This is the most
important question.

00:01:36.890 --> 00:01:38.890
It's Google's "Standard
Library" for JavaScript.

00:01:38.890 --> 00:01:42.680
Most applications at Google --
gmail -- so the icons are at

00:01:42.680 --> 00:01:46.800
the bottom: gmail, sites, docs
books, reader, blogger,

00:01:46.800 --> 00:01:48.650
calendar -- that's not
exhaustive -- maps actually

00:01:48.650 --> 00:01:54.210
uses it now -- are written
on Closure Library.

00:01:54.210 --> 00:01:57.090
They use Closure
Library as a base.

00:01:57.090 --> 00:01:59.752
So that means they're actually
-- these are applications that

00:01:59.752 --> 00:02:00.119
are written in JavaScript.

00:02:01.450 --> 00:02:03.810
One of the issues is that
JavaScript is a dynamic

00:02:03.810 --> 00:02:06.620
language that isn't
particularly well known for its

00:02:06.620 --> 00:02:10.519
readability or modularization,
and so part of what Closure

00:02:10.519 --> 00:02:14.849
Library is doing is
attempting to solve that.

00:02:14.849 --> 00:02:18.549
With Closure Compiler, which is
also one of the Closure tools,

00:02:18.549 --> 00:02:21.730
it's a typed object-oriented
means of collaboratively

00:02:21.730 --> 00:02:23.639
developing complex
web applications.

00:02:23.919 --> 00:02:27.049
So these teams that we're
working on, these large

00:02:27.049 --> 00:02:29.890
JavaScript applications --
they're not a single developer.

00:02:29.890 --> 00:02:32.740
They're people that -- they are
large teams that work

00:02:32.740 --> 00:02:35.329
collaboratively; we use source
control; people have to be able

00:02:35.329 --> 00:02:37.529
to read your code and
understand what's happening.

00:02:38.259 --> 00:02:40.629
So and as I said, it's the
JavaScript Library behind

00:02:40.629 --> 00:02:43.269
Google's web apps.

00:02:43.269 --> 00:02:45.999
So problems we are trying to
solve with Closure Library:

00:02:45.999 --> 00:02:48.089
like I said, large-scale web
development--where you're

00:02:48.089 --> 00:02:50.934
working on large teams,
when you're working on

00:02:50.934 --> 00:02:52.399
complex applications.

00:02:52.559 --> 00:02:57.459
So as part of that the tools
themselves--JavaScript, HTML,

00:02:57.459 --> 00:03:00.699
CSS, the DOM--these are
meant for web documents.

00:03:00.699 --> 00:03:03.099
Like the early days of the web
are about creating a document,

00:03:03.099 --> 00:03:05.449
you build up from there, how
do you script the thing?

00:03:05.449 --> 00:03:09.039
It's about modifying the DOM;
it's about -- it's not

00:03:09.039 --> 00:03:11.459
necessarily made for these
large complex applications.

00:03:12.199 --> 00:03:15.710
So how do we use those as
tools, but in such a way

00:03:15.710 --> 00:03:18.199
that we can stay sane.

00:03:20.149 --> 00:03:23.409
So as far as collaborative
development goes, what

00:03:23.409 --> 00:03:25.659
we're concerned about is
maintenance and readability.

00:03:25.659 --> 00:03:28.790
These are applications that
we're going to write and going

00:03:28.790 --> 00:03:31.569
to maintain, and we're going to
have people coming out of the

00:03:31.569 --> 00:03:33.229
project that haven't used it in
the past, that haven't read it

00:03:33.229 --> 00:03:36.949
in the past, that have to be
able to go look at the code,

00:03:36.949 --> 00:03:39.939
see what's going on -- we need,
you know, we need a high

00:03:39.939 --> 00:03:40.749
degree of readability.

00:03:40.749 --> 00:03:45.859
We have -- like most languages
at Google, we have a style

00:03:45.859 --> 00:03:48.269
guide that we -- so that people
-- that we require people to

00:03:48.269 --> 00:03:51.010
stick with, and you'll actually
notice that, if you look at the

00:03:51.010 --> 00:03:54.539
source of Closure Library now,
it's also very well-documented

00:03:54.539 --> 00:03:57.819
in terms of comments on the
code JSDoc, which is actually

00:03:57.819 --> 00:03:58.392
something we will get into

00:03:58.392 --> 00:04:02.399
in a bit.

00:04:02.399 --> 00:04:06.759
PEARL is often derided as a
language that is write-only,

00:04:06.759 --> 00:04:10.189
that you can't read somebody
else's code when you go back.

00:04:10.189 --> 00:04:13.199
And one of the problems is that
JavaScript does not necessarily

00:04:13.199 --> 00:04:20.120
have a great reputation for
readability or clear style, and

00:04:20.120 --> 00:04:22.109
it will vary across projects.

00:04:22.109 --> 00:04:25.120
One of the other issues about
-- I mentioned in the previous

00:04:25.120 --> 00:04:29.300
slide, Closure Library is the
standard library for Google.

00:04:29.300 --> 00:04:34.110
Unlike a lot of languages, the
best case I think of is Python,

00:04:34.110 --> 00:04:37.209
which the quote is "comes
with the batteries

00:04:37.209 --> 00:04:40.550
included." It has a
standard library that

00:04:40.550 --> 00:04:41.550
it's shipped with.

00:04:42.169 --> 00:04:43.600
JavaScript doesn't have that.

00:04:43.600 --> 00:04:46.589
It has things in the global
scope--some very basic things;

00:04:46.589 --> 00:04:48.740
it's not a lot of
functionality; what's exposed

00:04:48.740 --> 00:04:53.299
in the browser is an additional
API into the DOM,

00:04:53.299 --> 00:04:54.429
but that's about it.

00:04:54.429 --> 00:04:57.779
So there's a lot of, like,
common infrastructure that

00:04:57.779 --> 00:05:00.559
isn't necessarily a part of the
language, and it isn't standard

00:05:00.559 --> 00:05:05.129
library and so, you end up with
this proliferation of different

00:05:05.129 --> 00:05:07.740
tool kits and different
frameworks, etc.

00:05:09.340 --> 00:05:11.060
Managing complexity:

00:05:11.060 --> 00:05:16.879
So additional to that the
development life cycle is of

00:05:16.879 --> 00:05:19.009
concern to us; we care about
being able to maintain

00:05:19.009 --> 00:05:21.080
code in the future.

00:05:21.910 --> 00:05:23.949
Managing complexity is
important to us I don't,

00:05:23.949 --> 00:05:25.879
want to know about all the
internals of the class.

00:05:25.879 --> 00:05:27.229
You'll actually see this
when we look at the code.

00:05:27.229 --> 00:05:29.919
But the way that Closure
Library components and

00:05:29.919 --> 00:05:31.859
classes are written is
very object-oriented.

00:05:31.859 --> 00:05:34.729
It's kind of -- it's
not procedural.

00:05:35.379 --> 00:05:38.290
And this is -- partially is
-- out of encapsulation.

00:05:38.450 --> 00:05:41.490
We want to hide the internals
of the things that we're

00:05:41.490 --> 00:05:44.539
writing; we want to hide the
internals so that I only

00:05:44.539 --> 00:05:45.339
these objects as interfaces.

00:05:45.509 --> 00:05:48.889
This is just classic
object-oriented development.

00:05:48.889 --> 00:05:51.690
But that helps us work
collaboratively, because I

00:05:51.690 --> 00:05:55.240
write a class, I expose an
interface on it, you write a

00:05:55.240 --> 00:05:56.750
class, you expose an interface.

00:05:56.750 --> 00:05:59.659
None of us have to care
about what's below that.

00:06:00.780 --> 00:06:02.069
Modularization and Conventions.

00:06:02.069 --> 00:06:04.849
So, Closure Library, as I'll
get into, is very broad.

00:06:05.239 --> 00:06:09.060
It's not like a classic
JavaScript Library, which is a

00:06:09.060 --> 00:06:11.369
monolithic thing that you
include, and then all of the

00:06:11.369 --> 00:06:14.250
sudden, there is an API exposed
in a global namespace, rather

00:06:14.250 --> 00:06:17.099
there's a namespacing system,
and I'll get into that.

00:06:17.099 --> 00:06:19.960
But you pull from it what you
want, and that's very important

00:06:19.960 --> 00:06:22.620
to us in terms of speed,
because we want the code

00:06:22.620 --> 00:06:25.139
over the wire to be
as small as possible.

00:06:25.139 --> 00:06:26.209
We do that in two ways.

00:06:26.209 --> 00:06:29.174
One is to just pull what you
want from Closure Library, and

00:06:29.174 --> 00:06:31.560
then secondly, in combination
with Closure Compiler, which

00:06:31.560 --> 00:06:35.370
we'll get into, we want
to make that minified.

00:06:35.370 --> 00:06:38.199
We want -- the Closure Compiler
does more excellent stuff like

00:06:38.199 --> 00:06:40.780
dropping dead code, in-lining
the functions, but we

00:06:40.780 --> 00:06:41.770
will get into that.

00:06:41.770 --> 00:06:43.860
And finally, testing
and stability.

00:06:44.069 --> 00:06:45.900
One thing about Google
development is that everything

00:06:45.900 --> 00:06:50.020
is continuously integrated; we
don't push versions

00:06:50.020 --> 00:06:51.529
of Closure Library.

00:06:51.529 --> 00:06:53.210
You have it as part
of your project.

00:06:53.800 --> 00:06:55.560
You build it through
the Closure Compiler.

00:06:55.560 --> 00:07:00.119
You send that out, but as
part of that, there is a

00:07:00.119 --> 00:07:01.089
suite of tests that run.

00:07:01.089 --> 00:07:03.469
We run it as a continuous build
inside of Google; we run it as

00:07:03.469 --> 00:07:05.859
a submit-queue before you
submit things into Closure

00:07:05.859 --> 00:07:09.189
Library, so that all the tests
are working all the time.

00:07:09.189 --> 00:07:15.370
The other advantage of that is
stability: that you can trust

00:07:15.370 --> 00:07:17.860
that things won't
break over time.

00:07:17.860 --> 00:07:20.340
So Closure Library--let's
give some of the history.

00:07:21.039 --> 00:07:23.680
Starting in 2005, there has
never been anybody staffed

00:07:23.680 --> 00:07:24.460
on Closure Library.

00:07:24.460 --> 00:07:27.659
Like I said, my day job
is Google Books; my 20%

00:07:27.659 --> 00:07:29.060
is Closure Library.

00:07:30.680 --> 00:07:33.060
Actually open-sourcing it was
an effort we wanted to do for

00:07:33.060 --> 00:07:36.960
a long time -- myself and
an Engineer in Sydney,

00:07:36.960 --> 00:07:39.939
Australia, Daniel Nadasi.

00:07:40.519 --> 00:07:43.619
This was our 20% project last
year, and we open-sourced it

00:07:43.619 --> 00:07:46.360
in November of last year.

00:07:47.749 --> 00:07:50.699
I think, at last count, at
least 400 Engineers at Google

00:07:50.699 --> 00:07:55.139
have contributed at least one
change-list to Closure Library.

00:07:55.309 --> 00:07:56.549
It's also the focus
of the talk.

00:07:56.549 --> 00:07:59.749
It's about -- not that lines
of code is a good measure of

00:07:59.749 --> 00:08:02.910
anything, but it's about 250
lines of JavaScript, not

00:08:02.910 --> 00:08:05.379
including the tests,
so it's not small.

00:08:05.800 --> 00:08:09.379
Closure Compiler, which we'll
get into more deeply, but

00:08:09.379 --> 00:08:11.079
conceptually it's a JavaScript
to JavaScript compiler.

00:08:11.699 --> 00:08:13.909
We're not going from a source
language to a target language,

00:08:13.909 --> 00:08:20.739
we're going from source input
to a minified -- for those of

00:08:20.739 --> 00:08:24.849
you that have worked on web
development, you go from --

00:08:24.849 --> 00:08:28.059
you're familiar with minifiers
that are taking a source,

00:08:28.059 --> 00:08:29.879
renaming variables, doing
things just trying to get it

00:08:29.879 --> 00:08:31.049
smaller, stripping
comments, etc.

00:08:31.880 --> 00:08:33.570
It's doing all that, but
it's doing a lot more.

00:08:33.570 --> 00:08:36.390
It's actually doing a full
parse -- developing a parse

00:08:36.390 --> 00:08:39.800
tree, doing transformations on
that to both minify, but also

00:08:39.800 --> 00:08:44.160
to take an unused code to check
types, which is important, and

00:08:44.160 --> 00:08:48.840
we'll get into it later -- and
make that the output of it,

00:08:48.840 --> 00:08:51.190
which we refer to as a
job as [? grabinary ?]

00:08:51.190 --> 00:08:52.860
as small as possible, because
that's what matters in terms of

00:08:52.860 --> 00:08:54.880
speed: getting that thing over
the wire and getting

00:08:54.880 --> 00:08:56.330
it executed.

00:08:56.330 --> 00:08:59.010
The third component of Closure
Tools is Closure Templates.

00:08:59.010 --> 00:09:02.140
This is used in some of our
-- very heavily in gmail.

00:09:04.150 --> 00:09:07.280
It's basically a templating
language that has both a server

00:09:07.280 --> 00:09:11.520
-- a Java server implementation
and also the JavaScript

00:09:11.520 --> 00:09:15.030
implementation in
-- for the client.

00:09:15.180 --> 00:09:18.209
So you can send out a template,
fill it, it renders out

00:09:18.209 --> 00:09:24.610
as HTML, and then you can
use that on your client.

00:09:24.610 --> 00:09:27.690
Closure Library itself --
so like I said, namespaces

00:09:27.690 --> 00:09:28.990
allow for a broad library.

00:09:28.990 --> 00:09:32.830
If we look at the source
itself, it includes a lot,

00:09:32.830 --> 00:09:33.640
including the kitchen sink.

00:09:33.640 --> 00:09:37.170
There's everything from -- the
funny example that we always

00:09:37.170 --> 00:09:39.080
use is there's a quad-tree
implementation, just in

00:09:39.080 --> 00:09:41.240
case you needed that in
your web development.

00:09:41.240 --> 00:09:47.470
Most people don't some; people
have, but all to a widget set.

00:09:47.470 --> 00:09:51.710
So if you go look through the
demos, you'll actually see a

00:09:51.710 --> 00:09:53.996
lot of the widgets that you're
familiar with from a lot of the

00:09:53.996 --> 00:09:57.380
Google apps, because that's the
ones they are using, and we

00:09:57.380 --> 00:09:58.250
care about this in two ways.

00:09:58.250 --> 00:10:03.870
We care that there's
consistency across UI, across

00:10:03.870 --> 00:10:05.950
different applications, but we
also like to share code,

00:10:05.950 --> 00:10:07.700
because that's how
we identify bugs.

00:10:08.500 --> 00:10:09.879
This is the third point there.

00:10:09.879 --> 00:10:11.389
More users means
more found bugs.

00:10:11.629 --> 00:10:14.664
As we reuse these components,
we identify things that change

00:10:14.664 --> 00:10:16.559
or things that aren't working
correctly and somebody

00:10:16.559 --> 00:10:17.470
goes in and fixes it.

00:10:17.470 --> 00:10:21.790
It's Linus' Law, what is the
exact quote? "Given enough

00:10:21.790 --> 00:10:24.430
eyes, all bugs are
shallow." Because we have

00:10:24.430 --> 00:10:27.120
so many clients using Closure
Library, it helps us to find

00:10:27.120 --> 00:10:28.690
and identify these
things early.

00:10:29.010 --> 00:10:31.870
The middle point, types and
type-checking: like I said, the

00:10:31.870 --> 00:10:34.310
style of this is actually quite
-- rather different than what

00:10:34.310 --> 00:10:37.310
you see in a lot of JavaScript,
which tends to be

00:10:37.310 --> 00:10:37.850
very procedural.

00:10:38.620 --> 00:10:41.839
Take this div, style it this
way, push it over here, animate

00:10:41.839 --> 00:10:43.320
it, whatever it happens to be.

00:10:43.920 --> 00:10:46.610
If you actually look at these
things -- if you actually look

00:10:46.610 --> 00:10:50.800
at the code, it's -- JavaScript
has a -- for people coming in

00:10:50.800 --> 00:10:54.030
from other languages, it has
this prototype-based

00:10:54.030 --> 00:10:59.640
inheritance scheme, which is a
little boring, but I'll show an

00:10:59.640 --> 00:11:00.430
example of the code.

00:11:00.430 --> 00:11:03.420
But the thing about that is
we're actually doing

00:11:03.420 --> 00:11:06.910
type-enforcement by Closure
Compiler, what's referred to as

00:11:06.910 --> 00:11:10.679
type-hinting, so JSDoc that
exists on the top of -- the

00:11:10.679 --> 00:11:14.590
JSDoc that sits above methods
is actually specifying: these

00:11:14.590 --> 00:11:17.336
are the names of the
parameters, these are the types

00:11:17.336 --> 00:11:22.205
we're expecting This is, in the
case of a constructor, it's

00:11:22.205 --> 00:11:24.600
actually saying: this is of
type whatever, it extends this

00:11:24.600 --> 00:11:27.589
and the Closure Compiler
actually takes that all in,

00:11:27.589 --> 00:11:30.610
understands it, develops the
inheritance tree, and then does

00:11:30.610 --> 00:11:33.130
all forms of type-checking,
which is essential when you're

00:11:33.130 --> 00:11:37.000
doing these large applications
where I want to know if I'm

00:11:37.000 --> 00:11:40.870
giving a function a type that
is wrong, and that happens all

00:11:40.870 --> 00:11:42.630
the time in dynamic languages.

00:11:43.170 --> 00:11:46.990
Eventually when you get to a
large enough project, you're

00:11:46.990 --> 00:11:50.450
documenting in the doc-stream
what the types are

00:11:50.450 --> 00:11:51.250
anyway, right?

00:11:51.740 --> 00:11:54.070
So why not make that formal.

00:11:54.860 --> 00:11:57.290
So part of the development of
this is it's geared towards

00:11:57.290 --> 00:11:59.570
complex collaborative
UI development.

00:12:00.040 --> 00:12:01.520
Why I use Closure Library then?

00:12:01.520 --> 00:12:03.970
It's modular and broad, like I
said, geared for complex

00:12:03.970 --> 00:12:11.840
applications and implements
type-safety on top of

00:12:11.840 --> 00:12:15.270
JavaScript, which isn't
necessary strong in that suit,

00:12:15.270 --> 00:12:16.430
very stable and tested.

00:12:16.430 --> 00:12:19.390
It's what runs many Google web
appls today, and it works

00:12:19.390 --> 00:12:21.690
well with Closure Compiler.

00:12:21.690 --> 00:12:23.870
Fair point, why not
use Closure Library?

00:12:23.870 --> 00:12:29.040
I won't stay on this slide too
long, but it is a steeper

00:12:29.040 --> 00:12:32.930
learning curve, it's a more
complex way of doing

00:12:32.930 --> 00:12:35.740
development, and it's actually
very much geared towards a

00:12:35.740 --> 00:12:37.695
complex -- it's very much
geared for creating

00:12:37.695 --> 00:12:39.870
complex web applications.

00:12:39.870 --> 00:12:41.640
It's lower level when you
look at it; it's not

00:12:41.640 --> 00:12:44.940
about it exposing a small
understandable API.

00:12:45.310 --> 00:12:47.280
There's modulars all over
the place, they all have

00:12:47.280 --> 00:12:49.200
individual interfaces.

00:12:49.779 --> 00:12:53.950
It's great in that respect, but
if what you want to do is pull

00:12:53.950 --> 00:12:57.240
up a div, style it, animate it
across, there are a lot of

00:12:57.240 --> 00:12:58.680
toolkits that do that very
well, and I would encourage you

00:12:58.680 --> 00:13:01.910
to use them, because they
do a great job of it.

00:13:02.840 --> 00:13:04.490
Use the right tool for the job.

00:13:04.770 --> 00:13:08.480
So for some people this is
overkill; for some people, this

00:13:08.480 --> 00:13:10.125
takes care of a lot of the
problems that are inherent

00:13:10.125 --> 00:13:11.760
in web development today.

00:13:11.760 --> 00:13:15.070
And obviously we do this
because we are working

00:13:15.070 --> 00:13:19.360
with these large
complex applications.

00:13:19.900 --> 00:13:23.850
But it's part of that, while
we're doing it, this is part

00:13:23.850 --> 00:13:26.870
of the impetus for why we
wanted to open-source it.

00:13:26.870 --> 00:13:28.880
We want to continue to develop
this library, but we also

00:13:28.880 --> 00:13:29.980
want to do it in the open.

00:13:30.490 --> 00:13:34.050
And so that was the reason
that we wanted to open-source

00:13:34.050 --> 00:13:36.280
it in the first place.

00:13:36.280 --> 00:13:41.280
So, let me quickly go over the
namespacing system, as you can

00:13:41.280 --> 00:13:45.480
tell, because it's
on the slide here.

00:13:45.900 --> 00:13:46.580
Namepaces 101.

00:13:46.580 --> 00:13:52.490
So if you look at any Closure
Library -- if you look at any

00:13:52.490 --> 00:13:54.670
file in Closure Library, you'll
see the first things at the top

00:13:54.670 --> 00:13:56.920
-- probably first you'll see a
copyright statement and then a

00:13:56.920 --> 00:13:59.020
license statement, but then the
first thing at the top you will

00:13:59.020 --> 00:14:02.950
see is goog.provide, which is a
message that's saying,

00:14:02.950 --> 00:14:07.650
hey I'm providing this
namespace at the top.

00:14:08.160 --> 00:14:09.900
So for those of you familiar
with other languages,

00:14:09.900 --> 00:14:12.230
this is not a novel idea.

00:14:12.690 --> 00:14:15.990
But basically these are
the two ways that we

00:14:15.990 --> 00:14:17.290
express dependency.

00:14:17.290 --> 00:14:19.930
So when I say goog.provide(&amp;qu
ot;foo.bar") it means I'm

00:14:19.930 --> 00:14:23.170
providing this namespace, this
file provides this namespace;

00:14:23.170 --> 00:14:25.500
goog.require says, I
require this namespace.

00:14:25.500 --> 00:14:28.400
So for this to run, I need this
loaded and this loaded and

00:14:28.400 --> 00:14:30.460
this loaded and this loaded.

00:14:30.460 --> 00:14:32.460
The result is a giant
dependency tree.

00:14:32.460 --> 00:14:34.930
Hopefully a dependency tree
and not a dependency cycle

00:14:34.930 --> 00:14:38.330
anywhere, because that makes
it hard to figure it out.

00:14:39.100 --> 00:14:40.900
This is unlike single
file libraries.

00:14:40.900 --> 00:14:43.690
So one of the questions that we
get on the discussion list is

00:14:43.690 --> 00:14:46.440
like, hey this is cool, why
can't I just pull it in

00:14:46.440 --> 00:14:47.730
with the Ajax loader.

00:14:47.730 --> 00:14:51.916
So google Ajax loader is
the thing that will pull

00:14:51.916 --> 00:14:55.450
a certain version of whatever
JavaScript library.

00:14:55.450 --> 00:14:58.010
It doesn't make sense here;
it's not applicable, because

00:14:58.010 --> 00:15:00.130
inherently you are just pulling
a subset of the Closure

00:15:00.130 --> 00:15:02.989
Library, just the parts you use
and then passing that on to --

00:15:02.989 --> 00:15:05.399
in production, you're passing
it on to the Closure Compiler,

00:15:05.399 --> 00:15:09.720
so you are actually building a
separate JS binary for your

00:15:09.720 --> 00:15:12.010
application when you are doing
this, pull a sub-tree

00:15:12.010 --> 00:15:13.630
of what you use.

00:15:13.750 --> 00:15:14.410
This is an example.

00:15:14.510 --> 00:15:17.170
This is actually pulled right
out of goog.math, which is one

00:15:17.170 --> 00:15:19.899
of the lower level things for
just mathematical functions.

00:15:19.899 --> 00:15:22.039
Like I said, there's no
standard library in JavaScript,

00:15:22.039 --> 00:15:27.930
so we're defining all sorts of
low level structures, like

00:15:27.930 --> 00:15:31.190
range, rect, size, coordinate,
box, which are very useful, for

00:15:31.190 --> 00:15:34.810
example, in the style class to
be able to express and

00:15:34.810 --> 00:15:36.880
understand something as
a box or rectangle.

00:15:38.059 --> 00:15:41.649
But goog.math provides --
goog.math is a number of static

00:15:41.649 --> 00:15:46.660
functions; goog.math.range, I
think, is one of them,

00:15:46.660 --> 00:15:48.260
and then these are the
requirements on it.

00:15:48.260 --> 00:15:52.360
So when I say in my file
goog.require(goog.math) it's

00:15:52.360 --> 00:15:54.290
going to go to this file, see
all these other required

00:15:54.290 --> 00:15:56.399
statements, fan out,
grab those as well.

00:15:56.399 --> 00:16:00.990
And so, the result is a
dependency tree, and this

00:16:00.990 --> 00:16:04.280
is just -- I omitted
goog.math on these.

00:16:04.280 --> 00:16:08.040
So math.array, math.size,
math.rect, math.range -- this

00:16:08.040 --> 00:16:12.620
is what you saw before actually
expressed as a dependency tree.

00:16:12.620 --> 00:16:16.634
So if I were to include just,
for example, on this one well

00:16:16.634 --> 00:16:20.635
actually, I have a
mouse-pointer -- if I am just

00:16:20.635 --> 00:16:23.519
including math.rect, what
that's going to require is

00:16:23.519 --> 00:16:27.060
well, it's going to do the
transitive dependency in the

00:16:27.060 --> 00:16:28.800
tree: math.box,
math.coordinate, those ones

00:16:28.800 --> 00:16:31.130
will get pulled.

00:16:31.130 --> 00:16:34.260
Hopefully that makes
sense conceptually.

00:16:34.950 --> 00:16:37.290
Because we're going to go into
a larger -- so when you

00:16:37.290 --> 00:16:43.210
actually think about this, I
was just doing goog.math, there

00:16:43.210 --> 00:16:47.020
are I don't know how many
modules there are in Closure

00:16:47.020 --> 00:16:50.700
Library right now -- the actual
dependency tree, I think it's

00:16:50.700 --> 00:16:54.070
the base one is like 500
or 600 individual files.

00:16:54.070 --> 00:16:57.100
So the actual dependency tree
is very large, and if I were

00:16:57.100 --> 00:16:59.660
to grab it right now, it
would not fit on a slide.

00:16:59.660 --> 00:17:01.780
So we're working with
a reduced example.

00:17:01.780 --> 00:17:03.570
Let's say you have an
application which is green

00:17:03.570 --> 00:17:06.409
here, so foo application.

00:17:06.409 --> 00:17:12.100
I'm saying, so with this guy on
the right, it says I'm going to

00:17:12.100 --> 00:17:15.550
depend on this guy; this guy's
going to depend on both this

00:17:15.550 --> 00:17:16.190
guy and this guy, right?

00:17:16.190 --> 00:17:21.600
And so, when we actually do the
dependency analysis, it's only

00:17:21.600 --> 00:17:24.260
going to pull what's required
and so with what turned gray

00:17:24.260 --> 00:17:26.719
there, are the things from
which there's no path

00:17:26.719 --> 00:17:27.640
down from in the tree.

00:17:27.640 --> 00:17:30.870
And so when we actually build
this, when we actually use it

00:17:30.870 --> 00:17:34.279
in production, we're just
pulling those dots that are

00:17:34.279 --> 00:17:36.720
actually required, and we doing
that in dependency order,

00:17:36.720 --> 00:17:42.299
dependency order being defined
as anything that is required is

00:17:42.299 --> 00:17:44.850
loaded before it's needed.

00:17:44.850 --> 00:17:49.980
So you wind up with a list,
basically, of files.

00:17:49.980 --> 00:17:52.460
We'll get into a more practical
example that second.

00:17:53.210 --> 00:17:56.520
Type checking-- just to
introduce the concept:

00:17:56.520 --> 00:17:57.530
"stronger-typed"
JavaScript.

00:17:59.160 --> 00:18:05.010
For those of you that like
reading JavaScript version

00:18:05.010 --> 00:18:09.450
stuff, there have been
attempts, at least introducing

00:18:09.450 --> 00:18:12.290
some concepts of typing into
future versions of JavaScript,

00:18:12.290 --> 00:18:16.860
but as far as it works at
Google and within Closure

00:18:16.860 --> 00:18:21.570
tools, Bob we're doing it
with JSDoc, so the JSDoc

00:18:21.570 --> 00:18:22.200
we're already adding.

00:18:22.470 --> 00:18:24.700
In the early days of JavaScript
at google, we were adding it

00:18:24.700 --> 00:18:27.470
anyway, because we needed to
know that this is this

00:18:27.470 --> 00:18:29.720
function--it's expecting
an array; this is the

00:18:29.720 --> 00:18:33.810
function that's expecting
whatever it might be.

00:18:33.810 --> 00:18:36.070
But the Closure Compiler, which
is actually, to those of you

00:18:36.070 --> 00:18:40.040
familiar with rhino, which was
a project to do a JavaScript

00:18:40.040 --> 00:18:43.250
implementation in java; it's
actually using that same code

00:18:43.250 --> 00:18:45.580
to build this parse tree, and
it's also scanning those JSDoc

00:18:45.580 --> 00:18:50.190
comments to understand what
the inputs to a method or

00:18:50.190 --> 00:18:52.570
function are supposed to be.

00:18:53.180 --> 00:18:54.690
So it's essential to the
collaboration: one is

00:18:54.690 --> 00:18:57.180
self-documenting code--I want
to know how to use this and the

00:18:57.180 --> 00:19:01.440
types tell me how to do that;
encapsulation, like I said

00:19:01.440 --> 00:19:04.353
previously, it's important for
us to define these interfaces

00:19:04.353 --> 00:19:08.270
-- two things, and then
not worry about the

00:19:08.270 --> 00:19:09.200
implementation underneath.

00:19:09.200 --> 00:19:13.050
As far as when I am interacting
with a class -- I mean this is

00:19:13.050 --> 00:19:15.560
classic object-oriented job --
this is classic object-oriented

00:19:15.560 --> 00:19:18.790
design, but I want to hide the
complexities of how things

00:19:18.790 --> 00:19:19.960
are actually implemented.

00:19:19.960 --> 00:19:23.490
I only want to interact with it
as an object, because these

00:19:23.490 --> 00:19:27.100
code bases are so big, and
nobody could conceivably know

00:19:27.100 --> 00:19:29.120
everything about everything.

00:19:29.570 --> 00:19:31.470
And so part of that is we're
introducing concepts of

00:19:31.470 --> 00:19:35.820
private, public, protected that
you see in other languages, but

00:19:35.820 --> 00:19:37.010
we're actually doing that
in JavaScript, and it's

00:19:37.010 --> 00:19:38.909
enforced by the Compiler.

00:19:39.270 --> 00:19:40.820
And as I said, how is
this actually done --

00:19:40.820 --> 00:19:42.240
as I said, JSDoc tags.

00:19:42.240 --> 00:19:45.280
So for those of you familiar
with java, there's java.doc --

00:19:45.280 --> 00:19:47.990
there are tools that take
java.doc, turn it into

00:19:47.990 --> 00:19:49.230
nice HTML pages.

00:19:49.680 --> 00:19:52.320
We actually also have a tool
that does this and have

00:19:52.320 --> 00:19:54.710
generated documentation
for the Closure Library.

00:19:55.200 --> 00:19:58.169
So the typed annotations are
enforced by Closure Compiler.

00:19:58.669 --> 00:20:00.860
phrase we use is "type
hinting." So these are

00:20:00.860 --> 00:20:04.200
not required to use Closure
Compiler, and if you sit

00:20:04.200 --> 00:20:05.490
through a Closure Compiler
talk, they'll get into this

00:20:05.490 --> 00:20:10.250
more, but if we have type
information, and we see that

00:20:10.250 --> 00:20:14.110
you're passing at something
that is not valid as was

00:20:14.110 --> 00:20:16.270
defined in JSDoc, there
will be a warning.

00:20:17.530 --> 00:20:20.665
And actually for many projects
using Closure Library at

00:20:20.665 --> 00:20:23.300
Google, we actually have
pre-submit set up, so that we

00:20:23.300 --> 00:20:27.085
don't allow any warnings to pop
up for our projects, because

00:20:27.085 --> 00:20:30.070
we don't want -- it's
indicative of a problem.

00:20:30.070 --> 00:20:31.600
Either you are doing
the wrong thing or the

00:20:31.600 --> 00:20:33.029
annotations are wrong.

00:20:33.029 --> 00:20:34.320
So let's use a
concrete example.

00:20:34.320 --> 00:20:36.830
This was taken from
good.math.sum, which is from

00:20:36.830 --> 00:20:40.080
the goog.math that I was
talking about before.

00:20:40.730 --> 00:20:43.925
Brief note: goog is kind of
like the base name that we use

00:20:43.925 --> 00:20:47.580
for things, so goog dot
whatever, goog dot, and it also

00:20:47.580 --> 00:20:49.500
is representative of the
directory structure.

00:20:49.500 --> 00:20:52.669
So here, this is a function
of the goog.math namespace.

00:20:53.960 --> 00:20:57.310
What it's saying is -- I mean,
obviously, what some does is

00:20:57.310 --> 00:20:58.840
return the sum of
the arguments.

00:20:59.070 --> 00:21:02.580
The first parameter, which is
variable arguments is the

00:21:02.580 --> 00:21:05.860
numbers to add; the
documentation -- this is

00:21:05.860 --> 00:21:08.100
documented on the Closure
Compiler site -- the

00:21:08.100 --> 00:21:10.000
documentation is taking --
I'm taking a variable

00:21:10.000 --> 00:21:11.679
number of numbers.

00:21:12.620 --> 00:21:14.419
So when you call this thing,
it's actually going to check

00:21:14.419 --> 00:21:17.610
that that's the case, and then
what I'm returning is a number

00:21:17.610 --> 00:21:20.520
that is the sum of the
arguments, makes sense?

00:21:20.520 --> 00:21:23.730
So that when I'm using this in
code, the Compiler's going to

00:21:23.730 --> 00:21:26.333
say, when I call this I want to
check that everything is right

00:21:26.333 --> 00:21:28.580
when it goes in, and then the
result that I get back, we're

00:21:28.580 --> 00:21:29.460
expecting, is the number.

00:21:29.460 --> 00:21:31.450
And when I use that to call
other things, it's also going

00:21:31.450 --> 00:21:34.420
to be doing that checking,
which is pretty cool.

00:21:34.420 --> 00:21:39.360
Similar, let me talk about a
user-defined -- let me -- when

00:21:39.360 --> 00:21:41.330
I say user-defined, I mean not
inherent in the JavaScript

00:21:41.330 --> 00:21:44.640
language when I am introducing
a type that is not native.

00:21:44.640 --> 00:21:46.890
So for example, this is
a UI widget called

00:21:46.890 --> 00:21:47.039
good.ui.DatePicker.

00:21:51.100 --> 00:21:53.470
The two that are in red there,
a constructor, this is saying

00:21:53.470 --> 00:21:57.220
that this is an instantiable
object and extends goog.ui to a

00:21:57.220 --> 00:22:02.030
component, which is one of the
base classes in the

00:22:02.030 --> 00:22:04.100
UI sub-directory.

00:22:05.080 --> 00:22:11.890
Most things in UI are at least
a sub-class of goog.ui to that

00:22:11.890 --> 00:22:14.769
component, but what's important
about saying extends, is that

00:22:14.769 --> 00:22:20.840
this tells the Closure Compiler
that goog.ui.DatePicker is a

00:22:20.840 --> 00:22:23.780
sub-class of goog.ui component,
and so when I say that I need

00:22:23.780 --> 00:22:27.630
goog.ui component as the
parameter that's going into

00:22:27.630 --> 00:22:31.195
something else, that the
Closure Compiler is like, oh

00:22:31.195 --> 00:22:34.200
cool, well goog.ui.DatePicker
is a sub-class, and so

00:22:34.200 --> 00:22:37.309
everything is cool, no warning.

00:22:37.309 --> 00:22:39.560
This is important.

00:22:39.560 --> 00:22:44.930
So let's talk a little bit
more about Closure Compiler.

00:22:47.960 --> 00:22:48.400
I went

00:22:48.400 --> 00:22:54.940
over it briefly, but hopefully
everybody gets the basic idea.

00:22:55.640 --> 00:22:59.990
What we care about is that
as a basic thing, it

00:22:59.990 --> 00:23:01.310
lowers code size.

00:23:01.520 --> 00:23:02.510
It shrinks code size.

00:23:02.510 --> 00:23:04.694
So this is the basis step that
a minifier does, like renaming

00:23:04.694 --> 00:23:08.190
-- removing dead codes -- or
renaming, is the basic thing,

00:23:08.190 --> 00:23:10.630
but what it also does is remove
dead codes, inlines functions,

00:23:10.630 --> 00:23:12.389
and more -- and then code
checking -- checks types,

00:23:12.389 --> 00:23:15.659
function/method calls, syntax
errors -- it'll grab that

00:23:15.659 --> 00:23:19.380
before the browser does, and as
we pointed out, it understands

00:23:19.380 --> 00:23:19.850
user-defined types.

00:23:21.580 --> 00:23:23.470
For those of you that
are visual learners,

00:23:23.470 --> 00:23:25.620
there is a big box.

00:23:28.200 --> 00:23:30.640
So basically, on the left, I
used green and red, and just

00:23:30.640 --> 00:23:33.820
similar to what we did in the
tree before; green being your

00:23:33.820 --> 00:23:37.190
application code, red being
whatever Closure Compiler

00:23:37.190 --> 00:23:38.570
modules you're taking in.

00:23:38.570 --> 00:23:43.270
We say Closure Compiler -- we'd
like to pile these as input.

00:23:43.270 --> 00:23:45.740
It goes into Closure Compiler
and does a full parse --

00:23:45.740 --> 00:23:48.080
understands it as a full
parse-tree, does whatever

00:23:48.080 --> 00:23:50.910
optimizations it wants to, and
pops out the yellow one, which

00:23:50.910 --> 00:23:54.860
is the JS binary, and
that guy is small.

00:23:55.090 --> 00:23:56.840
So getting started
with Closure Library.

00:23:57.310 --> 00:24:08.880
So, Closure Library exists as
a project that's hosted on

00:24:08.880 --> 00:24:12.090
code.google.com, so it's just
an SVN project I should also

00:24:12.090 --> 00:24:16.510
mention that all the Closure
tools are here, on Closure

00:24:16.510 --> 00:24:20.005
Tools, and then ours is
Library, which has links off

00:24:20.005 --> 00:24:20.990
to everything you need.

00:24:21.620 --> 00:24:28.850
So we hosted in on SVN So how
to get it: click on source;

00:24:28.850 --> 00:24:39.120
let's go to the terminal; close
this; remove trunk for now.

00:24:39.400 --> 00:24:47.083
So what we are doing here -- so
SVN check-out: and that's just

00:24:47.083 --> 00:24:50.554
pulling -- I just wanted to
show what one does to check

00:24:50.554 --> 00:24:51.260
out Closure Library.

00:24:51.260 --> 00:24:53.659
It's going, pulling this all
from the SVN repository.

00:24:53.659 --> 00:24:55.910
The way that this actually
works in production -- this

00:24:55.910 --> 00:24:58.020
gives you an idea of how many
JavaScript files and things

00:24:58.020 --> 00:24:59.995
there are in Closure Library,
because it's going to

00:24:59.995 --> 00:25:01.519
grab them right now.

00:25:02.029 --> 00:25:05.735
But the way that this works
internally is that our work is

00:25:05.735 --> 00:25:08.740
-- we're checking it into
Perforce, which is the

00:25:08.740 --> 00:25:11.540
canonical for Closure Library,
and then we're taking a

00:25:11.540 --> 00:25:13.200
snapshot of pushing
that to SVN.

00:25:13.200 --> 00:25:15.559
So one of the things that we're
working on right now and

00:25:15.559 --> 00:25:19.316
actually if you go into OSCON,
Dan Bentley -- who I'm not sure

00:25:19.316 --> 00:25:22.960
if he's here -- is working on
tools to do this in the general

00:25:22.960 --> 00:25:25.833
case, so we built it once for
Closure Compiler; he's doing it

00:25:25.833 --> 00:25:28.620
in the general case, to make
tools to make the problem of

00:25:28.620 --> 00:25:32.014
going from Perforce to an
external repository easier, and

00:25:32.014 --> 00:25:36.750
then also the reverse: taking
patches to the SVN repository

00:25:36.750 --> 00:25:39.280
or whatever respository it
happens to be externally, and

00:25:39.280 --> 00:25:41.059
migrate them into Perforce.

00:25:42.790 --> 00:25:47.420
So the point I should make
here: SVN externals if you're

00:25:47.420 --> 00:25:51.750
using SVN, so when you do a
sync, you can set up SVN

00:25:51.750 --> 00:25:54.090
externals to be able to pull
Closure Library as well as a

00:25:54.090 --> 00:25:56.030
dependency, and so when you
sync it will also pull

00:25:56.030 --> 00:25:56.734
updates to Closure Compiler

00:25:56.734 --> 00:25:59.070
-- er -- Closure Library.

00:25:59.470 --> 00:26:01.650
And then continuous
integration--some people are

00:26:01.650 --> 00:26:03.300
confused -- I mentioned this
earlier -- some people are

00:26:03.300 --> 00:26:05.070
confused that we're not
doing the versions.

00:26:05.550 --> 00:26:07.040
We just update the
[UNINTELLIGIBLE]

00:26:07.040 --> 00:26:08.140
We find bugs; we fix them.

00:26:08.140 --> 00:26:11.820
And so when you're working
as well, SVN externals is

00:26:11.820 --> 00:26:18.049
a great way of doing this,
but just be tracking ahead.

00:26:18.049 --> 00:26:21.390
So one other point is
server agnosticism.

00:26:21.390 --> 00:26:22.679
There are all sorts of
front-ends at Google.

00:26:22.679 --> 00:26:24.653
There are Java
front-ends, there are C

00:26:24.820 --> 00:26:28.259
front-ends -- that's what I
work on -- there are Python

00:26:28.259 --> 00:26:30.349
front-ends, and so nothing
about Closure is tied to

00:26:30.349 --> 00:26:31.629
any of these set-ups.

00:26:31.629 --> 00:26:34.090
The negatives of that is that
you're responsible for the

00:26:34.090 --> 00:26:37.970
glue, there's a small amount of
work to get it serving Closure

00:26:37.970 --> 00:26:42.420
Library files, and then also to
hook this into the Compiler.

00:26:42.420 --> 00:26:46.680
It's not that hard; I'm
going to do it on stage.

00:26:47.440 --> 00:26:53.020
How to get started: there is a
base file--it's called base.js,

00:26:53.020 --> 00:26:54.890
what that does is it sets
up the loading system.

00:26:55.090 --> 00:26:58.940
It loads a file called deps.js,
which is expressing where all

00:26:58.940 --> 00:27:02.290
the modules are -- what all the
modules are, and what files

00:27:02.290 --> 00:27:04.970
they live in, so that when you
require it can go fetch them.

00:27:05.810 --> 00:27:06.455
It does it

00:27:06.455 --> 00:27:07.370
-- if you actually look at the
file itself,

00:27:07.370 --> 00:27:10.549
goog.addDependency, it says the
path, the namespaces it

00:27:10.549 --> 00:27:12.020
provides, and the ones that
it requires.

00:27:12.020 --> 00:27:14.899
User-defined namespaces use
the same tools to make

00:27:14.899 --> 00:27:15.969
their own dependency files.

00:27:15.969 --> 00:27:19.080
So if you're introducing your
own modules, there's

00:27:19.080 --> 00:27:22.735
documentation of this online,
but you'll also generate deps

00:27:22.735 --> 00:27:25.179
files to tell Closure Library,
"I'm introducing foo

00:27:25.179 --> 00:27:28.860
dot whatever, it lives
in this file."

00:27:28.860 --> 00:27:34.559
So, how this actually works in
your stuff is include a path

00:27:34.559 --> 00:27:39.630
to base.js and the possible
additional deps files as I just

00:27:39.630 --> 00:27:41.580
mentioned -- but let's not
worry about that right now --

00:27:41.580 --> 00:27:45.230
and then the path to my code.

00:27:45.230 --> 00:27:47.520
So let's do an example.

00:27:47.520 --> 00:27:53.149
So like I said, I just grabbed
Closure Library, right here, so

00:27:53.149 --> 00:27:54.979
that I just checked it into
trunk right here, if we

00:27:54.979 --> 00:27:58.090
actually go to trunk,
everything that you see

00:27:58.090 --> 00:28:01.549
in the library today.

00:28:02.330 --> 00:28:03.960
I'm just going to set up a
Python server that serves out

00:28:03.960 --> 00:28:11.410
of my current directory, and
then pop open my browser, local

00:28:11.410 --> 00:28:15.610
host, so trunk is right here,
this is Closure Library as

00:28:15.610 --> 00:28:20.393
you'd see it today, and this is
the namespacing that we have of

00:28:20.393 --> 00:28:21.740
everything, but what I
did for this talk is put

00:28:21.740 --> 00:28:22.659
together a brief demo.

00:28:24.160 --> 00:28:29.570
So let me also bring
that up in eMacs.

00:28:34.420 --> 00:28:40.700
Demo -- can't type -- demo to
HTML -- so this is just a

00:28:40.700 --> 00:28:45.280
simple static HTML file; it's
pulling in a lot of CSS, as

00:28:45.280 --> 00:28:48.490
those of you that are familiar
with HTML can tell, and then

00:28:48.490 --> 00:28:52.020
doing what I said before:
pulling in base.js, pulling in

00:28:52.020 --> 00:28:57.049
the invites, and then just some
simple HTML to bring up a

00:28:57.049 --> 00:28:58.710
little form to fill out.

00:28:59.010 --> 00:29:02.700
That form is -- I wrote an
application; I named it

00:29:02.700 --> 00:29:05.920
Nathan's invite because
that's my first name;

00:29:05.920 --> 00:29:07.330
I'm clever that way.

00:29:07.500 --> 00:29:10.950
So this is -- just as a static
page -- it's not doing

00:29:10.950 --> 00:29:11.890
anything special.

00:29:11.890 --> 00:29:14.040
I haven't done anything,
I'm not using Closure

00:29:14.040 --> 00:29:14.580
Library right now.

00:29:14.580 --> 00:29:21.370
The date is May 19th, boring
boring, in 2010, time, who am

00:29:21.370 --> 00:29:24.310
I inviting, write a little
invitation, click the go

00:29:24.310 --> 00:29:26.559
button, just as an example.

00:29:26.559 --> 00:29:29.870
So at the bottom of this file,
hopefully everybody can read

00:29:29.870 --> 00:29:32.380
this; I have a little call that
I have commented out right now

00:29:32.380 --> 00:29:32.840
that's called invites.start.

00:29:35.380 --> 00:29:39.990
Let's un-comment that;
save it; go back; load.

00:29:40.470 --> 00:29:45.100
And then it's actually if I go
to -- so this is actually

00:29:45.100 --> 00:29:47.689
instead of doing what it did
before, which is basically just

00:29:47.689 --> 00:29:49.700
a static file, it's pulling in
the DatePicker, it allows me to

00:29:49.700 --> 00:29:52.809
pick a date, fills those things
for me, picks a time: 1 p.m.,

00:29:52.809 --> 00:29:56.730
who am I inviting, it's using
the auto-complete widget, which

00:29:56.730 --> 00:30:01.320
is already -- which is
already pre-filled with some

00:30:01.320 --> 00:30:02.640
examples, so Harry S.

00:30:02.640 --> 00:30:09.560
Truman, buddy of mine, Thoreau,
Hank Aaron -- those guys are

00:30:09.560 --> 00:30:16.770
coming to my birthday party and
-- Having a Birthday Party,

00:30:16.770 --> 00:30:18.470
Hope You Can Make It.

00:30:18.860 --> 00:30:21.620
And then this is actually using
the rich text editor, which is

00:30:21.620 --> 00:30:26.090
actually the same one that you
see in gmail, which actually

00:30:26.090 --> 00:30:28.450
-- when we said we were
open-sourcing Closure Library,

00:30:28.450 --> 00:30:30.493
there was a push by that team
to get that checked in so it

00:30:30.493 --> 00:30:32.830
would go out, and it's actually
been a very popular part of

00:30:32.830 --> 00:30:35.700
Closure Library--people
just trying to get that.

00:30:36.550 --> 00:30:40.240
So, normal, make it huge, click
that and the invite is set,

00:30:40.240 --> 00:30:42.470
which is just a static form,
but if you had an actual

00:30:42.470 --> 00:30:48.240
application, you would go off
and do whatever server

00:30:48.240 --> 00:30:48.960
side-work you had to do.

00:30:48.960 --> 00:30:51.559
So let's look at how
that actually worked.

00:30:51.730 --> 00:30:56.550
Like I said, I had a script tag
here called invites.js It goes

00:30:56.550 --> 00:30:57.730
off and fetches that file.

00:30:57.730 --> 00:31:02.380
Let's just look at it, and at
the top, I'm defining

00:31:02.380 --> 00:31:05.570
invites.start, you can see as
I was talking before,

00:31:05.570 --> 00:31:08.490
goog.provide.invites.start, all
that it requires, so these are

00:31:08.490 --> 00:31:10.840
all the things that it was
using to do that demo.

00:31:11.790 --> 00:31:14.040
What's happening is that I'm
loading this file; it's hitting

00:31:14.040 --> 00:31:15.780
all the other requires; it's
fanning out and doing the

00:31:15.780 --> 00:31:18.929
dependency tree thing that I
was talking about before.

00:31:19.450 --> 00:31:21.940
And then when I get to the
bottom of this file,

00:31:21.940 --> 00:31:22.940
invites.start is started.

00:31:22.940 --> 00:31:25.309
And so it's just doing four
things: set up the DatePicker,

00:31:25.309 --> 00:31:28.670
set up timeselect, set up
auto-complete, set up editor,

00:31:28.670 --> 00:31:33.270
and you're actually looking at
this thing, you can read about

00:31:33.270 --> 00:31:36.080
what I'm actually doing
to fill these out.

00:31:36.389 --> 00:31:39.549
One great way to get an
understanding of how to use

00:31:39.549 --> 00:31:45.860
these is to look at the demos
directory; so if I go to -- so

00:31:45.860 --> 00:31:49.380
like I said, I checked
out trunk, right.

00:31:49.380 --> 00:31:52.820
The demos directory is right
here, which is just doing

00:31:52.820 --> 00:31:54.190
common UI controls.

00:31:54.190 --> 00:31:56.790
It says pull out a button.

00:31:56.790 --> 00:32:01.346
Pull out button -- there
you go, how to use

00:32:01.346 --> 00:32:02.490
a button, whatever.

00:32:02.679 --> 00:32:05.500
But if you look at the source
-- oh, this is doing a frame --

00:32:05.500 --> 00:32:11.080
so if we open this guy in a new
tab and we look at the source,

00:32:11.080 --> 00:32:13.509
you can actually just go look
and see what they're doing, as

00:32:13.509 --> 00:32:16.559
well, which is a great way to
just learn about the thing and

00:32:16.559 --> 00:32:20.240
how it's actually used in
practice, makes sense?

00:32:20.360 --> 00:32:30.260
And then the one other thing
that I will do is -- let's go

00:32:30.260 --> 00:32:34.330
back to the demo -- so I talked
about Closure Compiler, so this

00:32:34.330 --> 00:32:37.700
is all -- so actually let
me go back to the slide.

00:32:37.700 --> 00:32:42.250
This is all using just what we
understand is the de-bug loader

00:32:42.250 --> 00:32:43.549
that we described before.

00:32:44.260 --> 00:32:47.409
There's the de-bug loader,
which does essentially what

00:32:47.409 --> 00:32:49.880
I described: get to a point
and go fetch the additional

00:32:49.880 --> 00:32:50.769
files that are necessary.

00:32:50.769 --> 00:32:52.399
The problem is you'd never
actually want to do

00:32:52.399 --> 00:32:52.880
this in practice.

00:32:52.880 --> 00:32:55.490
It's a horrible idea to do this
in practice, because it's

00:32:55.490 --> 00:33:00.725
requiring an extra HDP request
for each time you are

00:33:00.725 --> 00:33:02.070
loading a module.

00:33:02.790 --> 00:33:05.950
So if you're -- it's not
inconceivable that there are

00:33:05.950 --> 00:33:10.910
200 to 300 files in a large,
very complex application--gmail

00:33:10.910 --> 00:33:14.660
probably is much larger than
that--and so when in

00:33:14.660 --> 00:33:18.209
production, we want to compile
it down both so that it's a

00:33:18.209 --> 00:33:24.460
single JavaScript binary, or in
the case of some of the apps,

00:33:24.460 --> 00:33:27.220
it's actually pulling multiple
modules, it's pulling what's

00:33:27.220 --> 00:33:30.380
necessary to bootstrap and then
additional things, but that's

00:33:30.380 --> 00:33:33.050
Closure Library 201,
which is next semester.

00:33:35.580 --> 00:33:38.620
But so there's essentially two
modes: de-bug, which we just

00:33:38.620 --> 00:33:40.110
demonstrated, and then
compiled, where we are actually

00:33:40.110 --> 00:33:41.860
taking the sources and we're
feeding them to the Compiler,

00:33:41.860 --> 00:33:45.150
the Compiler is giving us
output to create our js binary,

00:33:45.150 --> 00:33:47.409
and we're using that
in production.

00:33:47.409 --> 00:33:48.269
So when you're a starter.

00:33:48.269 --> 00:33:48.856
You want to do

00:33:48.856 --> 00:33:48.980
debug.

00:33:50.090 --> 00:33:52.480
There's a couple of reasons
to do debug: one it's

00:33:52.480 --> 00:33:55.210
faster, JavaScript uses
interpretive language.

00:33:55.210 --> 00:33:58.700
If you're running on local
host, 200 requests over

00:33:58.700 --> 00:34:01.899
HEDP is not a big deal.

00:34:01.899 --> 00:34:04.990
So but the more important thing
is that you want to be able to

00:34:04.990 --> 00:34:09.130
use your own debugger; you want
to be able to use whatever

00:34:09.130 --> 00:34:13.049
tools you're using, and when
you're making an edit, you

00:34:13.049 --> 00:34:15.919
want to just be able to hit
refresh and see that happen.

00:34:15.919 --> 00:34:19.049
You also want to be able to --
when you're using a debugger,

00:34:19.049 --> 00:34:21.699
you can set break statements,
you can use console.log

00:34:21.699 --> 00:34:23.869
statements, all sorts
of things like that.

00:34:24.269 --> 00:34:24.509
Compile mode.

00:34:24.509 --> 00:34:27.649
It's run through Closure
Compiler; in most cases

00:34:27.649 --> 00:34:28.829
this is one big file.

00:34:28.949 --> 00:34:31.789
It's small over the wire, and
dependency tools prepare

00:34:31.789 --> 00:34:36.339
your compiler input, which
I'm about to show you.

00:34:36.339 --> 00:34:38.889
The tools that we have to use
this -- the first one we

00:34:38.889 --> 00:34:43.149
released with Closure Compiler
is calcdeps, which was what

00:34:43.149 --> 00:34:45.799
youtube used, because they
didn't necessarily use the same

00:34:45.799 --> 00:34:48.554
build system that the rest of
the -- that apps written on

00:34:48.554 --> 00:34:50.209
top of closure tools used.

00:34:51.160 --> 00:34:51.770
That's a legacy.

00:34:51.770 --> 00:34:53.940
There is a more recent
implementation, which is little

00:34:53.940 --> 00:34:55.729
cleaner called Closure Builder.

00:34:56.329 --> 00:34:57.809
There is an effort to
build the support of

00:34:57.809 --> 00:34:58.789
the Closure Compiler.

00:34:58.979 --> 00:35:01.309
One of the things that we'd
like about that is to have

00:35:01.309 --> 00:35:06.709
better support for non-UNIX
operating systems, because a

00:35:06.709 --> 00:35:09.499
lot of the development at
Google is assuming that

00:35:09.499 --> 00:35:14.969
you're doing things on
UNIX at the command line.

00:35:14.969 --> 00:35:17.660
So let me show you an example
of this: so the same

00:35:17.660 --> 00:35:19.599
demo that we had before.

00:35:19.599 --> 00:35:21.749
Let's kill that server.

00:35:22.450 --> 00:35:25.180
So Compiler -- this is -- if
I go into Compiler, this is

00:35:25.180 --> 00:35:27.509
just a check-out of
Compiler at Head.

00:35:27.930 --> 00:35:30.459
It's just a jar, for those
of you who that know

00:35:30.459 --> 00:35:31.809
how those work.

00:35:34.029 --> 00:35:38.854
But what I want to be able to
do is -- what I'm doing here is

00:35:38.854 --> 00:35:42.789
-- if you look at this trunk
closure builder, it is

00:35:42.789 --> 00:35:44.559
expressing two routes.

00:35:44.559 --> 00:35:48.209
Let me highlight as I
talk -- expressing three

00:35:48.209 --> 00:35:49.439
routes, I'm sorry.

00:35:50.339 --> 00:35:53.259
It's expressing the root
of the Closure Library.

00:35:53.259 --> 00:35:55.499
It says, go search for all the
Closure Library, find all the

00:35:55.499 --> 00:35:57.979
models you see in there, look
through the third party

00:35:57.979 --> 00:36:00.179
closure, which is another -- we
have some We have some amount

00:36:00.179 --> 00:36:03.589
of third party code that we
could pull into Closure Library

00:36:03.589 --> 00:36:07.359
that we want to also scan, and
then the route, the

00:36:07.359 --> 00:36:08.709
files that I wrote.

00:36:08.859 --> 00:36:11.769
The input is demo'd at invites,
that's the top of our tree.

00:36:11.859 --> 00:36:14.264
The output mode is compiled;
I actually want to

00:36:14.264 --> 00:36:14.819
see compiled output.

00:36:15.900 --> 00:36:18.426
The flag is compiler
jar--that's where the jar is

00:36:18.426 --> 00:36:21.430
actually sitting, and the
compiler flags I want to add on

00:36:21.430 --> 00:36:22.430
that are advanced optimization.

00:36:22.609 --> 00:36:25.969
So I wanted to do the full
sweep of -- not only do I want

00:36:25.969 --> 00:36:29.749
minification, but I want your
code-dropping, I want you to

00:36:29.749 --> 00:36:32.439
make this js binary as
small as possible.

00:36:32.439 --> 00:36:36.369
So if I run that,
you see it work.

00:36:36.869 --> 00:36:39.719
What it's doing in Python, is
it's going and scanning all the

00:36:39.719 --> 00:36:42.215
files that I just described,
creating this giant dependency

00:36:42.215 --> 00:36:45.030
tree, picking up that top one,
generating that sub-tree of the

00:36:45.030 --> 00:36:48.659
whole mess that I just created,
and then sending that

00:36:48.659 --> 00:36:50.019
to Closure Compiler.

00:36:50.799 --> 00:36:52.049
And now it's thinking.

00:36:52.710 --> 00:36:54.799
So, right there is the output.

00:36:55.150 --> 00:36:58.210
If you look at any Google
application, you'll actually

00:36:58.210 --> 00:37:01.269
see the same thing, where if
you look at the source tag,

00:37:01.269 --> 00:37:02.810
it's this massive code.

00:37:02.810 --> 00:37:05.396
This actually is written by
humans, but it's gone through

00:37:05.396 --> 00:37:07.640
the minifier, it's gone through
the Compiler, to get it as

00:37:07.640 --> 00:37:09.730
small as possible when we
send it over the wire.

00:37:09.730 --> 00:37:12.569
So what we can do is just take
the output of that and put it

00:37:12.569 --> 00:37:18.349
into compile.js, but like a
cooking program, I've

00:37:18.349 --> 00:37:20.339
already done this.

00:37:21.299 --> 00:37:28.319
So if I go to my demo, I look
at compile.js as just a --

00:37:28.319 --> 00:37:32.270
compile.js is the output of
the Closure Compiler,

00:37:32.270 --> 00:37:32.980
and we go to eMacs.

00:37:34.579 --> 00:37:38.599
We go to invites.html, and
instead of loading this source

00:37:38.599 --> 00:37:42.869
thing like we did before, let's
just cut that out, and

00:37:42.869 --> 00:37:54.429
compiled.js, go back to my demo
-- oops, I killed the Python

00:37:54.429 --> 00:38:01.659
server -- start the server
again, go back to my demo,

00:38:01.659 --> 00:38:04.949
reload it, and then now, it's
actually not doing this

00:38:04.949 --> 00:38:07.519
by requesting each
module individually.

00:38:07.519 --> 00:38:09.499
It's requesting that one
big file that obfuscated

00:38:09.499 --> 00:38:12.769
JavaScript binary that I
was talking about before.

00:38:12.769 --> 00:38:15.079
And everything works
the same as it did.

00:38:15.079 --> 00:38:17.559
So this is what you would
actually want to do in

00:38:17.559 --> 00:38:20.869
production, and then I
go invite my friends.

00:38:21.799 --> 00:38:25.919
So, that's that.

00:38:25.919 --> 00:38:27.009
And then finally, the
reference manual.

00:38:27.289 --> 00:38:29.019
It's inconceivable that we
are going to go through the

00:38:29.019 --> 00:38:37.659
entirety of the library today,
but I will do this briefly.

00:38:37.659 --> 00:38:39.442
Like I said, the code base

00:38:39.442 --> 00:38:41.979
of self-generated docs; we
actually go through the js.docs

00:38:41.979 --> 00:38:47.409
and -- I'm having trouble
getting to this server today,

00:38:47.409 --> 00:38:53.919
but we actually go through the
js.docs and create a generated

00:38:53.919 --> 00:38:56.369
HTML view of all of these, and
so this is actually an SVN

00:38:56.369 --> 00:39:03.049
repository at SVN -- it's in
the doc directory at the route.

00:39:04.160 --> 00:39:09.029
But, one of the things that is
event-driven programming, many

00:39:09.029 --> 00:39:10.819
things are sub-classes
of event targets.

00:39:10.819 --> 00:39:14.030
So, like nodes, you can
actually put listeners onto

00:39:14.030 --> 00:39:16.400
these objects; they express
event, they say, "I'm a

00:39:16.400 --> 00:39:18.550
button and I have been clicked,
I've done whatever." It's

00:39:18.550 --> 00:39:20.339
not just necessarily
just DOM nodes.

00:39:20.339 --> 00:39:22.380
We're providing basic utilities
, which is, you know,

00:39:22.380 --> 00:39:24.469
JavaScript primitives working
with arrays, working with

00:39:24.469 --> 00:39:26.749
objects, things like that.

00:39:27.529 --> 00:39:29.880
DOM utilities, we're dealing
with the DOM; style utilities

00:39:29.880 --> 00:39:32.809
on top of that; network
utilities, be able to do -- you

00:39:32.809 --> 00:39:37.520
know -- XML, HTTP requests;
being able to do JSON P, I-O.

00:39:38.850 --> 00:39:42.749
There is some amount -- the
actual class that's used, for

00:39:42.749 --> 00:39:45.765
example, in gmail chat to have
a long-lived connection with

00:39:45.765 --> 00:39:47.289
the server is in there.

00:39:47.289 --> 00:39:50.839
All sorts of things like that,
it's a very broad library.

00:39:50.839 --> 00:39:51.390
Naming conventions.

00:39:52.270 --> 00:39:55.430
So the namespaces I described
before, goog.dom is going to be

00:39:55.430 --> 00:39:58.900
found in the DOM folder; style,
in style folder; Xhrio -- it

00:39:58.900 --> 00:40:01.369
just maps out -- that's
the convention.

00:40:01.369 --> 00:40:02.794
There is no reason it needs
to be like that, but

00:40:02.794 --> 00:40:04.269
we do it for clarity.

00:40:04.269 --> 00:40:07.509
Like I say, basic utilities,
array, string, math, object,

00:40:07.509 --> 00:40:10.590
uri, basic things for
manipulating url's,

00:40:10.590 --> 00:40:11.839
things like that.

00:40:12.129 --> 00:40:16.709
Data structures -- oops, I
meant to click on that -- this

00:40:16.709 --> 00:40:21.599
is actually doing -- this
is actually all the

00:40:21.599 --> 00:40:25.169
implementations of data
structures that are in there.

00:40:25.169 --> 00:40:31.839
I should be able to do -- for
whatever reason it didn't come

00:40:31.839 --> 00:40:37.079
up before, but this is actually
the docs that are taking the

00:40:37.079 --> 00:40:38.570
js.doc and generating
the docs here.

00:40:38.570 --> 00:40:41.499
So if I were to click, for
example, on one of them uri's,

00:40:41.499 --> 00:40:43.969
what I just described, it's
going to have a nice, pretty

00:40:43.969 --> 00:40:45.950
interface where it says these
are the public methods to

00:40:45.950 --> 00:40:50.200
it, and it's hiding the
private ones right now.

00:40:50.349 --> 00:40:52.506
Some people use that, some
people that are actually coding

00:40:52.506 --> 00:40:56.039
with it are using the source
code to look through.

00:40:56.659 --> 00:40:58.589
DOM and style, goog.dom,
goog.dom.classes.

00:40:59.409 --> 00:41:01.239
There are a lot more things
in there for dealing with

00:41:01.239 --> 00:41:02.509
a low level DOM stuff.

00:41:03.589 --> 00:41:05.259
Style, the same way,
goog.style, goog.window.

00:41:06.639 --> 00:41:09.519
And then for network, all the
things that I described:

00:41:09.519 --> 00:41:13.140
formats, goog.json, and then
all sorts of just common things

00:41:13.140 --> 00:41:15.709
that you'd expect in a base
library, like goog.Date --

00:41:15.709 --> 00:41:18.189
delayed timer, it's
pretty extensive.

00:41:18.599 --> 00:41:21.059
UI, I'll just go over this
briefly, but the best thing

00:41:21.059 --> 00:41:24.199
to look at is the demos for
everything that's in there.

00:41:24.459 --> 00:41:26.239
Just look at the directory
itself; look at the demo's

00:41:26.239 --> 00:41:30.869
directory, which is at slash
demo's, when you check it out.

00:41:31.969 --> 00:41:34.219
Everything is based, like I
said, on Component; there are

00:41:34.219 --> 00:41:36.809
sub-classes of Control and
Container; there's too many,

00:41:36.809 --> 00:41:38.099
too exhaustive to list here.

00:41:38.099 --> 00:41:39.969
Big picture, it looks
somewhat like this.

00:41:39.969 --> 00:41:41.809
We have data structures
and DOM as low-level --

00:41:41.809 --> 00:41:43.339
a low-level library.

00:41:43.339 --> 00:41:48.249
UI sits on top of that, and
over its own yellow box.

00:41:48.249 --> 00:41:52.349
All of the other utilities
of network, random

00:41:52.349 --> 00:41:53.959
utilities, miscellaneous.

00:41:54.799 --> 00:41:56.829
Finally it's important
to mention that we

00:41:56.829 --> 00:41:58.579
keep a test suite.

00:41:58.689 --> 00:42:02.324
If I open that up -- this is
actually going to -- it's going

00:42:02.324 --> 00:42:06.249
to be faster -- there we go --
so, some of these might go red,

00:42:06.249 --> 00:42:09.339
but what is actually doing is
pulling up off of SVN all of

00:42:09.339 --> 00:42:14.079
these tests, which actually sit
in HTML files, and then are

00:42:14.079 --> 00:42:15.789
pulling in the necessary
things, exercising them,

00:42:15.789 --> 00:42:19.390
and reporting back whether
they succeeded or failed.

00:42:19.390 --> 00:42:23.399
And so we have infrastructure
internally that is doing this

00:42:23.399 --> 00:42:25.369
continuously, so when people
check in, we know what breaks

00:42:25.369 --> 00:42:27.169
and we also do it as a submit
queue, so that we know that

00:42:27.169 --> 00:42:28.449
you don't break anything
when you submit.

00:42:31.129 --> 00:42:36.069
I could go into one of these
examples, but basically if you

00:42:36.069 --> 00:42:38.529
open up the HTML file, it's
just a test bed for it to be

00:42:38.529 --> 00:42:40.530
able to run these things in the
browser, and the important

00:42:40.530 --> 00:42:43.359
thing about that is
the next slide.

00:42:43.960 --> 00:42:47.289
So there's a module called
goog.testing that has all sorts

00:42:47.289 --> 00:42:52.839
of asserts and handling of
asynchronicity, mocking tools,

00:42:52.839 --> 00:42:55.559
things like that, that you
would expect in a test suite,

00:42:55.559 --> 00:42:58.920
and then what's important
is the test runner.

00:42:58.920 --> 00:43:02.570
In our -- in Google we have a
test runner that is constantly

00:43:02.570 --> 00:43:04.210
running to, be able to run
these in different browsers.

00:43:04.210 --> 00:43:08.649
So especially for things that
don't impact the Dom, it's kind

00:43:08.649 --> 00:43:14.559
of odd that it would work
on one and not the other?

00:43:14.559 --> 00:43:19.346
Well, there are cases like the
way they handle extra comma in

00:43:19.346 --> 00:43:24.969
an array, which is annoying,
but it's constantly fanning out

00:43:24.969 --> 00:43:28.249
and running them on a suite of
browsers that are just

00:43:28.249 --> 00:43:29.660
existing in a farm.

00:43:29.660 --> 00:43:31.220
Running all these tests
continuously and then

00:43:31.220 --> 00:43:35.779
letting us know if anything
breaks, makes sense?

00:43:35.910 --> 00:43:39.149
The future, Google
and open source.

00:43:39.589 --> 00:43:44.319
So one of our efforts was
an open-source versus

00:43:44.319 --> 00:43:45.529
published source code.

00:43:45.529 --> 00:43:48.910
Our efforts was to extricate
it from our build environment

00:43:48.910 --> 00:43:51.300
internally, to license it
and then publish that code.

00:43:51.300 --> 00:43:54.119
That was our priority.

00:43:54.179 --> 00:43:56.919
Closure library was not started
with the intention of being

00:43:56.919 --> 00:44:00.739
open source one day, and
actually Books did -- you know,

00:44:00.739 --> 00:44:03.619
did a lot of JavaScript work
before Closure Library exists,

00:44:03.619 --> 00:44:05.189
and is was poured
into it later.

00:44:05.559 --> 00:44:09.599
And so I'm not even one of the
original authors, but like I

00:44:09.599 --> 00:44:12.619
said, lots of internal build
system and it's been difficult

00:44:12.619 --> 00:44:15.549
for us to have non-Google code
in the repository, but as part

00:44:15.549 --> 00:44:17.899
of this, we have been working
with the open source project

00:44:17.899 --> 00:44:21.229
office to try to
get around this.

00:44:21.229 --> 00:44:27.619
So I can announce that we
can take patches today.

00:44:27.619 --> 00:44:29.049
This is something that
a lot of people have

00:44:29.049 --> 00:44:32.910
-- what's been annoying --

00:44:32.910 --> 00:44:33.979
[APPLAUSE]

00:44:33.979 --> 00:44:35.979
NATHAN NAZE: What's been
annoying for people outside and

00:44:35.979 --> 00:44:39.049
inside is that people report
bugs and include a patch, and

00:44:39.049 --> 00:44:42.049
we say, for legal reasons,
we can't take that and

00:44:42.049 --> 00:44:43.259
check it into Perforce.

00:44:44.809 --> 00:44:46.020
We can now.

00:44:46.170 --> 00:44:50.219
So if you actually go and look
at the source today, the

00:44:50.219 --> 00:44:52.160
copyright statements have been
changed from copyright Google

00:44:52.160 --> 00:44:54.330
to copyright the Closure
Library authors.

00:44:54.330 --> 00:44:59.889
We have an Office file, and we
can take patches, read them in

00:44:59.889 --> 00:45:02.659
and a Google Engineer will
apply them and put

00:45:02.659 --> 00:45:04.279
them internally.

00:45:04.529 --> 00:45:07.859
Part of MOE, the Make Open Easy
Project, is to automate that

00:45:07.859 --> 00:45:10.140
process so it's less onerous.

00:45:11.140 --> 00:45:14.909
So we're looking forward to
that, and that also -- I looked

00:45:14.909 --> 00:45:16.949
at the way -- some of the
questions that were asked

00:45:16.949 --> 00:45:20.719
before this even started was
-- I'd like to see this

00:45:20.719 --> 00:45:22.809
functionality, I'd like to see
that functionality, and it's

00:45:22.809 --> 00:45:26.469
been hard, because I always
want to say, "Write it

00:45:26.469 --> 00:45:29.930
yourself." And now I can.

00:45:32.489 --> 00:45:36.139
So this is always on -- Google
groups have always been Closure

00:45:36.139 --> 00:45:39.040
Library Compiler templates
discuss -- lot of traffic them,

00:45:39.040 --> 00:45:40.639
I would encourage
you to join them.

00:45:41.049 --> 00:45:45.239
And also we want to try to --
like I said, it was our effort

00:45:45.239 --> 00:45:51.100
to get this thing over the wall
and to push it out there.

00:45:51.100 --> 00:45:53.800
We now want to foster the
community, so we're starting up

00:45:53.800 --> 00:45:56.329
a blog, which different
Engineers that are working

00:45:56.329 --> 00:45:59.479
either on -- on any of the
tools on Compiler Library or

00:45:59.479 --> 00:46:02.199
templates, we'll post notes and
things up there, and also a

00:46:02.199 --> 00:46:07.659
twitter account, which will -
articles that we see, interact

00:46:07.659 --> 00:46:11.839
with people in the community,
and also as a just

00:46:11.839 --> 00:46:13.660
a way to interact.

00:46:13.660 --> 00:46:15.019
And those are the
announcements.

00:46:15.019 --> 00:46:21.249
So I should just bring up the
Closure tools blog, right here.

00:46:21.579 --> 00:46:23.679
It also has links off on the
side to all of th e things that

00:46:23.679 --> 00:46:27.829
you'd care to know about, so
the home, the source -- so

00:46:27.829 --> 00:46:30.170
Compiler, for example, has a
web service, which is a cool

00:46:30.170 --> 00:46:32.229
thing, that you can actually do
this instead of having the

00:46:32.229 --> 00:46:35.569
binary locally, you send it to
an app, and to an app that will

00:46:35.569 --> 00:46:38.419
compile it for you, which is
fun, because you just click

00:46:38.419 --> 00:46:39.639
"Compile,"
and it does it.

00:46:42.309 --> 00:46:45.609
But on top of that, that
should largely be it.

00:46:45.609 --> 00:46:51.809
So the twitter account, we set
it up, so let's do, alert,

00:46:51.809 --> 00:46:58.729
hello world, first post.

00:46:58.729 --> 00:47:02.019
There you go.

00:47:03.109 --> 00:47:04.669
That should be it.

00:47:04.669 --> 00:47:07.839
So you can follow that or you
can follow us -- so actually,

00:47:07.839 --> 00:47:12.669
the funny thing is Google
Reader -- the two ironic points

00:47:12.669 --> 00:47:16.440
are: this presentation was done
in google.docs in our

00:47:16.440 --> 00:47:19.594
presentations thing, which is
written on Closure Library, so

00:47:19.594 --> 00:47:20.949
it's circular in that way and
also, if you follow us

00:47:20.949 --> 00:47:25.139
on Reader, that's also
written on Closure tools.

00:47:25.249 --> 00:47:28.719
So let me go to the Wave, if
anybody had questions during

00:47:28.719 --> 00:47:33.909
this, and also I should go to
the Q&amp;A slide as well.

00:47:36.669 --> 00:47:39.510
So the Wave, the url
is right there.

00:47:39.510 --> 00:47:42.209
If anybody has questions,
please come up to the

00:47:42.209 --> 00:47:43.849
microphone in the middle
so we can all hear you.

00:47:44.409 --> 00:47:46.689
And I should also mention that
Closure Compiler, we'll all be

00:47:46.689 --> 00:47:50.099
having office hours today in
Space B from 2:30 - 5:00.

00:47:50.099 --> 00:47:53.109
I'll also be there, and feel
free if you see me walking

00:47:53.109 --> 00:47:55.739
outside -- I'll be wearing a
nametag with my name on it,

00:47:55.739 --> 00:47:59.769
just grab me, and
ask me questions.

00:47:59.769 --> 00:48:07.039
So thank you.

00:48:07.209 --> 00:48:09.669
I guess we'll start with -- I'm
going to switch back and forth

00:48:09.669 --> 00:48:11.009
between what's on the Wave and
what's on the mic,

00:48:11.009 --> 00:48:12.809
but please...

00:48:12.809 --> 00:48:15.909
SPEAKER1: I have a question
about how does it integrate

00:48:15.909 --> 00:48:20.139
with jQuery and Google web
toolkit and is there anything

00:48:20.139 --> 00:48:23.649
we need to specifically do in
order to make it work, any

00:48:23.649 --> 00:48:26.239
problems, do you recommend
it, things like that...

00:48:26.239 --> 00:48:26.789
NATHAN NAZE: I'm sorry.

00:48:27.319 --> 00:48:30.372
So one of the things is that --
as a design choice, we don't do

00:48:30.372 --> 00:48:34.329
anything to modify, and this is
a problem in other toolkits.

00:48:34.890 --> 00:48:37.195
We want to do nothing that
would impede your ability

00:48:37.195 --> 00:48:38.340
to pull in something else.

00:48:38.340 --> 00:48:41.410
So the major thing there is
squash anything in the global

00:48:41.410 --> 00:48:47.439
scope or modify anything
expected not to be there

00:48:47.439 --> 00:48:47.779
on the prototype.

00:48:48.189 --> 00:48:51.330
So some JavaScript libraries
will do this; they will add

00:48:51.330 --> 00:48:55.089
functions to the array
prototype or to the function

00:48:55.089 --> 00:48:58.789
prototype that actually in the
case -- some of them actually

00:48:58.789 --> 00:49:00.519
squash things that are in
JavaScript 1.6, which

00:49:00.519 --> 00:49:01.710
was a problem.

00:49:01.710 --> 00:49:03.440
So you could definitely
use them both.

00:49:03.890 --> 00:49:09.289
We have talked about how do we
try to integrate GWT and there

00:49:09.289 --> 00:49:12.069
is functional overlap; we don't
really have -- we've talked

00:49:12.069 --> 00:49:15.379
about it, we don't have any
particular plans, but there is

00:49:15.379 --> 00:49:18.559
no reason you couldn't bring
jQuery in, use that -- there is

00:49:18.559 --> 00:49:20.819
a query engine in Closure
Compiler, but if you'd prefer

00:49:20.819 --> 00:49:24.359
to bring in jQuery use that to
pull in a DOM object, give that

00:49:24.359 --> 00:49:26.269
to something in Closure, there
would be no reason

00:49:26.269 --> 00:49:28.729
you couldn't.

00:49:28.729 --> 00:49:31.640
SPEAKER1: So do we need
to namescape, I mean,

00:49:31.640 --> 00:49:32.969
namespace a jQuery, or...

00:49:33.170 --> 00:49:35.549
NATHAN NAZE: Yeah, so the
jQuery is just going to be

00:49:35.549 --> 00:49:37.749
something -- as long as it
doesn't interfere with anything

00:49:37.749 --> 00:49:40.380
in the global scope, so like I
said, everything is -- for us,

00:49:40.380 --> 00:49:43.619
everything is behind this goog
namespace in the top level and

00:49:43.619 --> 00:49:45.980
there shouldn't -- let me know
if you find anything that sits

00:49:45.980 --> 00:49:47.839
anywhere else, so it
shouldn't interact.

00:49:47.839 --> 00:49:50.349
The only thing that would be
a negative interaction is

00:49:50.349 --> 00:49:53.779
something else did something
to modify a prototype,

00:49:53.779 --> 00:49:55.439
something like that, so...

00:49:55.439 --> 00:49:56.010
SPEAKER1: Thank you.

00:49:56.010 --> 00:49:56.940
NATHAN NAZE: Yup.

00:49:57.400 --> 00:50:00.630
So that actually is the Wave
that's on this too, because

00:50:00.630 --> 00:50:02.069
some people were asking
questions remotely.

00:50:04.659 --> 00:50:09.429
So, one of them was actually
related to this, which was

00:50:09.429 --> 00:50:11.769
interactions between -- which
I just answered --

00:50:11.769 --> 00:50:13.379
GWT and Closure.

00:50:17.519 --> 00:50:20.689
Yeah, so another
one from the mic.

00:50:20.689 --> 00:50:24.170
SPEAKER2: So this morning I saw
this speed tracer thing in GWT

00:50:24.170 --> 00:50:30.829
Does it make sense, is Closure,
Closure going to have the

00:50:30.829 --> 00:50:32.130
same thing as well, or...

00:50:32.130 --> 00:50:35.789
NATHAN NAZE: So some of the
things you can do you are -- so

00:50:35.789 --> 00:50:37.849
if you look through the library
there are things to be able to

00:50:37.849 --> 00:50:43.839
do instrumentation, you can
also use Page Speed, to do, to

00:50:43.839 --> 00:50:45.224
find places that you could
speed up your code, what's

00:50:45.224 --> 00:50:48.169
taking too long to load.

00:50:48.169 --> 00:50:50.729
One of the other questions in
there is -- can you describe

00:50:50.729 --> 00:50:52.649
the best way to split a large
code base up into multiple

00:50:52.649 --> 00:50:56.439
dynamically loaded modules
in a way that resembles

00:50:56.439 --> 00:50:57.049
GWT'S code-splitting.

00:50:57.560 --> 00:51:01.300
So a lot of applications today
like gmail will actually -- in

00:51:01.300 --> 00:51:03.570
docs you will notice this, that
it loads in stages, that

00:51:03.570 --> 00:51:04.689
it's doing modules.

00:51:04.689 --> 00:51:08.830
That's one of the ways; it's a
pretty advanced topic, but the

00:51:08.830 --> 00:51:12.530
way that's done is that there
are command line arguments to

00:51:12.530 --> 00:51:14.490
the Compiler where you can
specify, this should be

00:51:14.490 --> 00:51:18.449
compiled into module one; this,
module two, it's a pretty

00:51:18.449 --> 00:51:20.820
advanced topic, we should --
what we'll probably do is do a

00:51:20.820 --> 00:51:24.249
blog post, specifically
on this, so...

00:51:24.249 --> 00:51:27.839
Yeah, I hope that
answers your question.

00:51:27.839 --> 00:51:30.320
Is there anything else on here
-- does anybody share any

00:51:30.320 --> 00:51:33.469
of the questions that are
on here that's in line?

00:51:33.469 --> 00:51:34.829
Can you provide a
public roadmap?

00:51:34.829 --> 00:51:36.019
I should answer.

00:51:36.650 --> 00:51:39.039
So one of the things is that we
try to have all of our

00:51:39.039 --> 00:51:41.700
discussions on Closure Library
Discuss about what we're

00:51:41.700 --> 00:51:42.859
planning on doing next.

00:51:44.549 --> 00:51:47.199
So things right now, things
that we've been prioritizing

00:51:47.199 --> 00:51:48.849
are the announcements for
today, the ability

00:51:48.849 --> 00:51:50.019
to take patches.

00:51:50.779 --> 00:51:53.119
But I think one of the things
we'd also like to do is start

00:51:53.119 --> 00:51:56.249
organizing things and getting a
list of wants, what people want

00:51:56.249 --> 00:51:59.369
to pull into the library or
implement in the library, and

00:51:59.369 --> 00:52:01.780
either get people inside Google
or outside Google

00:52:01.780 --> 00:52:04.565
working on those.

00:52:05.493 --> 00:52:08.279
For the mic...

00:52:08.503 --> 00:52:08.727
SPEAKER3:

00:52:08.727 --> 00:52:10.969
Yeah, actually comparing your
Library to others like jQuery,

00:52:10.969 --> 00:52:14.509
that's not actually my
question, but just a comment --

00:52:14.509 --> 00:52:19.379
an appropriate question would
be the scope of your Library

00:52:19.379 --> 00:52:23.481
versus the scope -- what are
they -- because people tend to

00:52:23.481 --> 00:52:25.924
pick libraries, and then if
yours is very comprehensive

00:52:25.924 --> 00:52:27.059
-- it looks good to me.

00:52:27.059 --> 00:52:28.670
I've done a lot of
JavaScript [INAUDIBLE]

00:52:28.670 --> 00:52:29.069
coding.

00:52:29.069 --> 00:52:31.184
Looks like I'll start to take a
look at this and maybe that

00:52:31.184 --> 00:52:33.919
will become my -- what I use,
assuming it has complete

00:52:33.919 --> 00:52:35.959
coverage of most of the
things I want to do.

00:52:35.959 --> 00:52:36.349
NATHAN NAZE: Right.

00:52:36.349 --> 00:52:38.519
SPEAKER3: Okay, let me ask my
question also and you can

00:52:38.519 --> 00:52:40.739
answer both -- a very
basic question.

00:52:40.789 --> 00:52:43.899
I haven't -- I've done plenty
of JavaScript -- I've coded in

00:52:43.899 --> 00:52:46.709
Java in other worlds, but
I haven't used GWT yet.

00:52:46.709 --> 00:52:51.319
My understanding is GWT enables
you to program in Java, and

00:52:51.319 --> 00:52:54.249
gets compiled to JavaScript,
so, and you mentioned gmail --

00:52:54.249 --> 00:52:57.510
I understand gmail's
a GWT application.

00:52:57.510 --> 00:52:57.750
NATHAN NAZE:

00:52:57.830 --> 00:52:59.910
Gmail is primarily written
on top of Closure tools.

00:52:59.910 --> 00:53:00.720
SPEAKER3: That answers
that question.

00:53:00.720 --> 00:53:02.970
Okay, so it's more
direct JavaScript.

00:53:02.970 --> 00:53:03.239
NATHAN NAZE: Yeah.

00:53:03.499 --> 00:53:06.850
That's one of the things is --
so there's two points there.

00:53:06.850 --> 00:53:10.849
One is that this is a broad
and complex library, and

00:53:10.849 --> 00:53:12.609
it's intended for a very
specific purpose, so

00:53:12.609 --> 00:53:13.970
the scope is different.

00:53:13.970 --> 00:53:15.690
It's, also the intended
purpose is different.

00:53:16.349 --> 00:53:19.779
So it's like, what is
better Python or Java?

00:53:19.849 --> 00:53:20.789
The answer is both.

00:53:21.779 --> 00:53:24.939
We're -- there are
things -- oh, go ahead.

00:53:24.939 --> 00:53:27.029
SPEAKER3: I meant gmail,
the gmail application.

00:53:27.029 --> 00:53:27.819
NATHAN NAZE: Right.

00:53:27.819 --> 00:53:29.309
SPEAKER3: Is it written in GWT?

00:53:29.309 --> 00:53:30.329
NATHAN NAZE: No.

00:53:30.329 --> 00:53:31.890
SPEAKER3: Good, okay.

00:53:31.890 --> 00:53:34.249
NATHAN NAZE: But what I what
I'm saying is that there are

00:53:34.249 --> 00:53:36.910
differences between Closure
Library and the things that it

00:53:36.910 --> 00:53:41.529
was specifically designed for
and, you know, there are cases

00:53:41.529 --> 00:53:43.559
in my day to day programming
life that I'm going to choose

00:53:43.559 --> 00:53:45.930
Java for a variety of reasons,
there's cases I'm going to pick

00:53:45.930 --> 00:53:49.700
Python for a variety of
reasons; same issue with

00:53:49.700 --> 00:53:54.779
Closure Library versus jQuery
and/or any other JavaScript

00:53:54.779 --> 00:53:56.129
library out there.

00:53:56.129 --> 00:53:59.995
A lot of projects at Google use
jQuery A lot projects at Google

00:53:59.995 --> 00:54:04.099
-- a lot of projects,
especially things that aren't

00:54:04.099 --> 00:54:06.989
things like, you know, Google
apps, Google docs, things like

00:54:06.989 --> 00:54:09.915
that; but there are a lot of
projects that actually are

00:54:09.915 --> 00:54:13.012
using other libraries at
Google, depending

00:54:13.012 --> 00:54:13.144
on their purpose.

00:54:13.188 --> 00:54:15.509
Next question.

00:54:15.509 --> 00:54:19.164
SPEAKER4: Yes, I'm doing a
fairly complex medical imaging

00:54:19.164 --> 00:54:22.805
project, and we've decided to
go with Google Closure as

00:54:22.805 --> 00:54:26.679
opposed to jQuery, and the
experience so far has been very

00:54:26.679 --> 00:54:30.099
difficult, because we find
the documentation for the

00:54:30.099 --> 00:54:31.410
API, it's very lacking.

00:54:31.410 --> 00:54:32.339
NATHAN NAZE: Mhm.

00:54:32.339 --> 00:54:33.920
SPEAKER4: And a lot of the
times even the demo's don't

00:54:33.920 --> 00:54:36.099
work like they're
supposed to do.

00:54:36.709 --> 00:54:40.069
So I'm just wondering, there's
a better place than the public

00:54:40.069 --> 00:54:46.186
API where we could find how
they work, and if not, are you

00:54:46.186 --> 00:54:47.469
planning on improving
on the documentation.

00:54:47.469 --> 00:54:48.499
NATHAN NAZE: So, two things.

00:54:48.499 --> 00:54:52.589
One is so like I said, this is
all -- so one of the things is

00:54:52.589 --> 00:54:55.614
we wanted to do in this
development in the public

00:54:55.614 --> 00:54:58.379
realm; so it's all 20
percenters, so we don't have

00:54:58.379 --> 00:55:01.119
any full time staff that is
writing down documentation.

00:55:01.119 --> 00:55:05.299
The two things I would
recommend you do are: complain,

00:55:05.299 --> 00:55:08.329
go to Closure Library Discuss,
say, I don't understand how to

00:55:08.329 --> 00:55:11.039
do this, because we don't know
it's broken, if nobody reports

00:55:11.039 --> 00:55:13.439
back and we don't have
that feedback loop.

00:55:13.439 --> 00:55:16.129
So like I said, I'm one of a
lot of Engineers that work on

00:55:16.129 --> 00:55:20.280
this and they all
read that thing.

00:55:20.280 --> 00:55:23.210
What you don't realize is that
if you go and post on there, a

00:55:23.210 --> 00:55:25.193
lot of the original authors of
Closure's all going to read

00:55:25.193 --> 00:55:26.129
it and respond to it.

00:55:26.529 --> 00:55:28.439
We've also opened up the
wiki for public comment.

00:55:28.439 --> 00:55:33.629
We'd actually like people to --
what -- we have some internal

00:55:33.629 --> 00:55:35.454
documentation, and we try to
take that and put that on the

00:55:35.454 --> 00:55:40.799
wiki, but for pain
points, especially, we'd

00:55:40.799 --> 00:55:41.389
like to know more.

00:55:41.389 --> 00:55:46.249
One of the things is that
inside the generated API docs,

00:55:46.249 --> 00:55:54.654
just taken from the JS doc that
you see on -- in the code, most

00:55:54.654 --> 00:55:56.319
of the time when people are
working internally, they just

00:55:56.319 --> 00:55:58.079
have eMacs windows open and
they are looking at this from

00:55:58.079 --> 00:55:59.410
the left and looking
on the right.

00:55:59.410 --> 00:56:03.779
The code should be the source
of what you're looking at,

00:56:03.779 --> 00:56:05.640
because it's going to be the
one -- the best-documented.

00:56:08.179 --> 00:56:11.824
That's what most Engineers on
-- that are using Closure

00:56:11.824 --> 00:56:13.609
internally are doing.

00:56:13.609 --> 00:56:13.999
Right?

00:56:13.999 --> 00:56:16.069
Thank you.

00:56:16.069 --> 00:56:16.419
SPEAKER5: Good afternoon.

00:56:16.419 --> 00:56:19.079
NATHAN NAZE: Hi.

00:56:19.079 --> 00:56:24.259
SPEAKER5: Concerning open
sourcing closer, what kind of

00:56:24.259 --> 00:56:26.549
patches are you guys looking
for, only bug fixes or

00:56:26.549 --> 00:56:28.439
new patches, like...

00:56:28.439 --> 00:56:29.009
NATHAN NAZE: So, so...

00:56:29.009 --> 00:56:31.699
SPEAKER5: Because we don't want
to work too hard developing new

00:56:31.699 --> 00:56:34.179
patches and, all of the sudden,
oh, we don't accept this patch.

00:56:34.179 --> 00:56:36.669
How do we know what will
be accepted, and...

00:56:36.669 --> 00:56:38.659
NATHAN NAZE: Right so obviously
things that are minor bux

00:56:38.659 --> 00:56:40.999
fixes, there's not going to be
a whole lot of contention.

00:56:40.999 --> 00:56:44.559
If you -- so one of the things
I'd like to do on the external

00:56:44.559 --> 00:56:46.650
discussion list is
identify things.

00:56:46.650 --> 00:56:48.579
You know, this is the module
I'd like to put in, I have

00:56:48.579 --> 00:56:49.750
some interest in this.

00:56:49.750 --> 00:56:51.180
Bring it up on the thread,
because everybody's

00:56:51.180 --> 00:56:52.699
going to copy on that.

00:56:52.699 --> 00:56:54.650
Do that as an initial thing.

00:56:54.650 --> 00:56:58.979
Even inside of Google, like, a
change list of more than 300

00:56:58.979 --> 00:57:03.429
lines is kind of odd, because
you know, this happens in the

00:57:03.429 --> 00:57:05.529
open source community, where
somebody like, goes off,

00:57:05.529 --> 00:57:08.169
branches something, comes in
with 10,000 lines of like, I've

00:57:08.169 --> 00:57:09.279
written you a new whatever.

00:57:09.279 --> 00:57:10.879
SPEAKER5: Split them
up in diffferent...

00:57:10.879 --> 00:57:11.549
NATHAN NAZE: Right, exactly.

00:57:11.549 --> 00:57:13.719
Because that way you're getting
feedback along the way.

00:57:13.719 --> 00:57:17.009
One of the things about the
culture of coding inside

00:57:17.009 --> 00:57:20.949
of Google is, you know,
continuous integration.

00:57:21.219 --> 00:57:26.059
So people are submitting what
they wrote and -- continuous

00:57:26.059 --> 00:57:28.830
integration and also,
code reviewing.

00:57:28.830 --> 00:57:31.200
So we bounce it, you know,
before anything goes in at

00:57:31.200 --> 00:57:33.559
Google, before anything goes
into Closure Library, we're

00:57:33.559 --> 00:57:35.709
doing a continual review of --
like, did you consider this

00:57:35.709 --> 00:57:39.599
case, this is a matched style,
you know, by convention

00:57:39.599 --> 00:57:42.389
we do this, to try to
maintain a good API.

00:57:42.389 --> 00:57:47.784
SPEAKER6: Are you -- are
patches -- sorry - are

00:57:47.784 --> 00:57:50.169
contributors allowed
to commit over time?

00:57:50.169 --> 00:57:52.739
Are you accepting external
committers... with

00:57:52.739 --> 00:57:53.729
Closure Library?

00:57:53.729 --> 00:57:57.069
NATHAN NAZE: So one of the
issues is is -- so we're just

00:57:57.069 --> 00:58:02.039
starting up on this now so the
way that -- I don't know at

00:58:02.039 --> 00:58:05.279
what point -- it would not be
my decision, it would be a

00:58:05.279 --> 00:58:08.009
decision of everybody about how
we're going to handle

00:58:08.009 --> 00:58:09.740
upgrading people to
just committer status.

00:58:09.740 --> 00:58:11.470
One of the issues is [? MOE ?]

00:58:11.470 --> 00:58:17.309
is a nascent project, so the
ability to make submissions to

00:58:17.309 --> 00:58:26.309
the external SVN and pull them
into Perforce, we need to

00:58:26.309 --> 00:58:27.469
figure that process out better.

00:58:27.469 --> 00:58:29.129
Right now it's probably just
going to be sending a patch

00:58:29.129 --> 00:58:29.589
and working with an email.

00:58:30.080 --> 00:58:33.819
We're yet to do -- you know, so
far it's been announced for 15

00:58:33.819 --> 00:58:37.819
minutes now, so we don't have
the policy quite written, but

00:58:37.819 --> 00:58:39.709
it's something we have to do.

00:58:40.329 --> 00:58:43.359
Bring it up on the list would
probably be the best answer,

00:58:43.359 --> 00:58:47.019
and I think we have
one more question.

00:58:47.019 --> 00:58:47.679
SPEAKER7: Both YUI#3 and...

00:58:47.679 --> 00:58:49.910
NATHAN NAZE: Uh, can you
uh, right in the mic?

00:58:49.910 --> 00:58:52.579
SPEAKER7: Yeah, both
YUI3 and Closure and

00:58:52.579 --> 00:58:53.559
dependency resolution.

00:58:53.559 --> 00:58:58.109
Doesn't that actually inspire
more bandwith, rather than

00:58:58.109 --> 00:59:02.410
less, if your application is
multiple-page, because as you

00:59:02.410 --> 00:59:05.670
make your JS binary, you are
including different

00:59:05.670 --> 00:59:10.400
dependencies and creating this
large, monolithic file, per

00:59:10.400 --> 00:59:14.649
page, so you have no, like,
re-useability as far as just

00:59:14.649 --> 00:59:16.749
those particular
script modules.

00:59:16.909 --> 00:59:18.759
They would be re-transmitted
every time, right?

00:59:18.759 --> 00:59:20.850
NATHAN NAZE: No,
it's a fair point.

00:59:20.850 --> 00:59:24.710
The other option is to always
do per module, you know, this

00:59:24.710 --> 00:59:26.990
page only uses this and just
pulls whatever, but you're

00:59:26.990 --> 00:59:29.430
still getting into the problem
of having a whole bunch of HTTP

00:59:29.430 --> 00:59:30.899
requests going back and forth.

00:59:31.529 --> 00:59:34.694
Some people handle this by
writing different binaries for

00:59:34.694 --> 00:59:39.349
each page; some people handle
this by trying to manage it as

00:59:39.349 --> 00:59:42.209
multiple components, so that
there is a base module, and

00:59:42.209 --> 00:59:43.600
then what's additional
for this page.

00:59:43.600 --> 00:59:45.884
The nice thing about that is
that the base module is

00:59:45.884 --> 00:59:48.640
cacheable, and then the other
one is just loaded

00:59:48.640 --> 00:59:49.759
incrementally.

00:59:49.759 --> 00:59:52.319
But, yeah, it's a hard
problem in general, I agree.

00:59:52.749 --> 00:59:55.859
SPEAKER7: Just the bandwith and
the actual JIT reinterpretation

00:59:55.859 --> 00:59:56.749
of the new file would be rather
expensive, it feels like.

00:59:59.179 --> 01:00:02.089
NATHAN NAZE: To do
it just in time?

01:00:02.089 --> 01:00:05.415
SPEAKER7: Well, so if you keep
a file in cache, like your

01:00:05.415 --> 01:00:08.099
monolithic jQuery or whatever,
if the browser is smart enough,

01:00:08.099 --> 01:00:10.622
it can keep that compilation of
it, too, so you might

01:00:10.622 --> 01:00:11.209
consider that, too.

01:00:11.209 --> 01:00:12.709
NATHAN NAZE: Yup.

01:00:13.049 --> 01:00:15.489
so, I mean this is part of the
logic of the Google Ajax API,

01:00:15.489 --> 01:00:18.170
is that if everybody uses the
same URL, they have that one

01:00:18.170 --> 01:00:22.819
consistently cached, and then
if that's widely used on the

01:00:22.819 --> 01:00:25.049
internet, we don't pay
that cost every time that

01:00:25.049 --> 01:00:27.059
people use, and it's a
completely fair point.

01:00:27.999 --> 01:00:30.819
I am 41 seconds over, so
I'll have to let you go.

01:00:31.079 --> 01:00:36.079
Thank you very much.

