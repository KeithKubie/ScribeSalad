WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:01.910
Let's look at an example.

00:00:01.910 --> 00:00:05.280
Here I'm initializing
an NSArray of strings.

00:00:05.280 --> 00:00:08.460
Notice that if I look for
the method addObject or

00:00:08.460 --> 00:00:12.020
something akin to Swift's append method,
it's not found.

00:00:13.350 --> 00:00:16.680
In fact, if you search
the NSArray class reference,

00:00:16.680 --> 00:00:20.230
you won't find any methods for
adding objects to the array.

00:00:20.230 --> 00:00:23.960
I can make a new array using
the array by adding object method but

00:00:23.960 --> 00:00:27.590
I can't add an object to
an existing NSAarray.

00:00:27.590 --> 00:00:32.780
The other option is to define my
array as an NSMutableArray and

00:00:32.780 --> 00:00:36.920
now we can see that the method
add object is indeed available to

00:00:36.920 --> 00:00:42.620
an NSMutableArray and
we can add booties to our kayaking gear.

00:00:42.620 --> 00:00:44.020
We'll go ahead and run it.

00:00:45.170 --> 00:00:50.270
We can look down here in the console and
see the contents of our array.

00:00:50.270 --> 00:00:54.630
Swift and Objective C differ in their
use of reference types and value types.

00:00:54.630 --> 00:00:58.180
Swift encourages widespread
use of value types like strut

00:00:58.180 --> 00:01:01.718
while Objective C favors
reference types like classes.

00:01:01.718 --> 00:01:04.420
Structs are used pretty
sparingly in Objective C and

00:01:04.420 --> 00:01:07.370
they don't have the capability
that struts do in Swift swift.

00:01:07.370 --> 00:01:11.090
For example, this beer struck on the
left that we've seen before in swift on

00:01:11.090 --> 00:01:14.450
the left would be encoded as a class and
objective C.

00:01:14.450 --> 00:01:15.800
To understand what this means for

00:01:15.800 --> 00:01:19.680
immutability, let's compare what happens
when a type is copied by value and

00:01:19.680 --> 00:01:22.190
what happens when an object
is copied by reference.

00:01:22.190 --> 00:01:25.280
This comparison will likely
be familiar to you by now.

00:01:25.280 --> 00:01:27.780
Focus on the last four lines of code and

00:01:27.780 --> 00:01:31.135
take a few seconds to guess
the value of myBeer.style.

00:01:34.320 --> 00:01:39.220
Down here in the console,
we can see that myBeer is still a lager.

00:01:39.220 --> 00:01:40.860
Structs are value types.

00:01:40.860 --> 00:01:44.390
When myBeer was assigned to yourBeer,
a new copy was made, and

00:01:44.390 --> 00:01:47.190
the values of the two
copies are independent.

00:01:47.190 --> 00:01:50.670
Let's see what happens when beer is
implemented as a class in Objective C.

00:01:51.710 --> 00:01:54.130
Now focus on these four lines of code,
and

00:01:54.130 --> 00:01:58.760
again try to guess
the value of myBeer.style.

00:01:58.760 --> 00:02:01.360
We'll run the project, and

00:02:01.360 --> 00:02:06.370
down here in the console we see that
the style of myBeer is now a stout.

00:02:06.370 --> 00:02:08.289
Classes are reference types,

00:02:08.289 --> 00:02:12.860
which means that when we assigned myBeer
to yourBeer, a new reference was made.

00:02:12.860 --> 00:02:17.260
But myBeer and yourBeer both point
to the same underlying instance.

00:02:17.260 --> 00:02:20.320
When we changed the value
of yourBeer.style,

00:02:20.320 --> 00:02:24.410
we changed the value of the underlying
instance to which both beers refer.

