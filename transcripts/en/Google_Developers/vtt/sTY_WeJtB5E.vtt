WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.367
[MUSIC PLAYING]

00:00:08.177 --> 00:00:09.139
[APPLAUSE]

00:00:09.139 --> 00:00:11.502
WOJTEK KALICINSKI:
Hello, everyone.

00:00:11.502 --> 00:00:12.210
My name's Wojtek.

00:00:12.210 --> 00:00:15.300
I'm a developer advocate working
with the Android Studio Team,

00:00:15.300 --> 00:00:17.940
and today I want to tell you
a little bit about performance

00:00:17.940 --> 00:00:22.400
tooling that we are releasing
soon with the new Android

00:00:22.400 --> 00:00:24.930
Studio version, 3.0.

00:00:24.930 --> 00:00:26.760
And why performance tooling?

00:00:26.760 --> 00:00:29.790
Because I think we all
know, perf matters, right?

00:00:29.790 --> 00:00:32.040
That's not something
I have to convince

00:00:32.040 --> 00:00:34.950
you developers that it's true.

00:00:34.950 --> 00:00:36.764
So let me keep this intro short.

00:00:36.764 --> 00:00:38.430
But I just want to
tell you a little bit

00:00:38.430 --> 00:00:42.250
how I understand app performance
and what it means to me.

00:00:42.250 --> 00:00:45.240
So imagine that performance is
actually a measure of your app

00:00:45.240 --> 00:00:46.340
quality, right?

00:00:46.340 --> 00:00:49.170
Now, the user will
download your app

00:00:49.170 --> 00:00:51.770
and install it because
they want to use

00:00:51.770 --> 00:00:55.770
features, the features that
you implemented, the benefits

00:00:55.770 --> 00:00:58.140
that the app gives them.

00:00:58.140 --> 00:01:00.030
You design a great
UI because you

00:01:00.030 --> 00:01:02.910
want the user to be able to
access information quickly,

00:01:02.910 --> 00:01:07.410
and you want them to feel good
about just using your app.

00:01:07.410 --> 00:01:09.790
Think about the other part
of the user experience.

00:01:09.790 --> 00:01:11.950
What if they actually
want to use it,

00:01:11.950 --> 00:01:14.370
but if they're
frustrated because when

00:01:14.370 --> 00:01:18.280
they keep the app open the
battery drains very fast?

00:01:18.280 --> 00:01:20.460
What if just having
the app installed

00:01:20.460 --> 00:01:24.960
means that their phone dies
twice as fast as before?

00:01:24.960 --> 00:01:27.810
The user cares about the
responsiveness of the device,

00:01:27.810 --> 00:01:32.040
about a smooth UI, about
how fast the app installs,

00:01:32.040 --> 00:01:34.440
how much space it
takes up on the device.

00:01:34.440 --> 00:01:37.230
And all these things
ultimately will

00:01:37.230 --> 00:01:40.410
make your user
happy or frustrated,

00:01:40.410 --> 00:01:42.420
because they're using your app.

00:01:42.420 --> 00:01:45.510
And ultimately,
it's what they will

00:01:45.510 --> 00:01:47.040
feel about your
app and what rating

00:01:47.040 --> 00:01:48.900
they will give you
on the Play Store.

00:01:48.900 --> 00:01:52.050
So what can we do about
this as developers?

00:01:52.050 --> 00:01:54.390
I see it as a two way process.

00:01:54.390 --> 00:01:58.140
You have to be proactive
and you have to be reactive.

00:01:58.140 --> 00:01:59.880
Now, what does it really mean?

00:01:59.880 --> 00:02:02.950
So even before you start
working on your app,

00:02:02.950 --> 00:02:04.980
you have to plan
for performance.

00:02:04.980 --> 00:02:06.660
When developing,
before the release,

00:02:06.660 --> 00:02:08.934
you have to keep
measuring and profiling.

00:02:08.934 --> 00:02:11.100
Like, what does it mean
that your app is performing?

00:02:11.100 --> 00:02:14.490
How can you know if it's
performing up to the standards?

00:02:14.490 --> 00:02:17.740
You have to actually
plan for some numbers.

00:02:17.740 --> 00:02:20.970
Just do some benchmarking,
look at your competitors' app,

00:02:20.970 --> 00:02:23.400
see how fast they work,
how fast they start.

00:02:23.400 --> 00:02:27.510
Just write down some
figures and plan for this.

00:02:27.510 --> 00:02:29.499
Then when you release,
maybe you will not

00:02:29.499 --> 00:02:31.290
nail it on the first
time, but at least you

00:02:31.290 --> 00:02:35.710
will have something to strive
for and to try and fix it.

00:02:35.710 --> 00:02:37.477
And then be reactive.

00:02:37.477 --> 00:02:39.810
This whole process doesn't
end when you actually release

00:02:39.810 --> 00:02:41.280
your app and you're done.

00:02:41.280 --> 00:02:41.970
No.

00:02:41.970 --> 00:02:45.660
It's all about monitoring
and reacting to any problems

00:02:45.660 --> 00:02:46.820
that arise.

00:02:46.820 --> 00:02:50.610
And you have to have tools
to be able to debug and fix

00:02:50.610 --> 00:02:52.110
these things.

00:02:52.110 --> 00:02:53.910
So today I'm going
to talk a little bit

00:02:53.910 --> 00:02:57.540
about the new Android Profiler,
available in Android Studio

00:02:57.540 --> 00:02:59.880
3.0, which is currently in beta.

00:02:59.880 --> 00:03:03.210
And this is a tool that replaces
the old Android monitor tab.

00:03:05.890 --> 00:03:08.250
You can see here, when you
launch your app on a device

00:03:08.250 --> 00:03:10.470
or emulator, you open
the Android Profiler

00:03:10.470 --> 00:03:11.954
tab at the bottom.

00:03:11.954 --> 00:03:12.870
And you see this view.

00:03:12.870 --> 00:03:15.480
This is what we call
the unified timeline.

00:03:15.480 --> 00:03:18.390
You can see three charts--

00:03:18.390 --> 00:03:21.410
the CPU, the memory,
and the network charts.

00:03:21.410 --> 00:03:24.990
But what's really cool about
this view is here at the top

00:03:24.990 --> 00:03:28.350
you can see an additional track
with some important app events

00:03:28.350 --> 00:03:31.890
that are happening, such
as input events, rotations,

00:03:31.890 --> 00:03:33.600
and activity state.

00:03:33.600 --> 00:03:35.380
And looking at these
things gives you

00:03:35.380 --> 00:03:39.510
more context to actually analyze
the data that you see below.

00:03:39.510 --> 00:03:43.320
So imagine here I'm touching
the screen, interacting

00:03:43.320 --> 00:03:45.120
with my app, and
I can immediately

00:03:45.120 --> 00:03:48.270
see on the CPU chart that
my app is doing something.

00:03:48.270 --> 00:03:51.420
It's actually processing
the input events.

00:03:51.420 --> 00:03:54.669
Then when I rotate, you can see
that activities are changing.

00:03:54.669 --> 00:03:56.085
The activity is
getting destroyed,

00:03:56.085 --> 00:03:58.980
a new one is being created, and
something is happening there

00:03:58.980 --> 00:04:00.771
with the memory in CPU.

00:04:00.771 --> 00:04:02.520
Now when you click on
any of these tracks,

00:04:02.520 --> 00:04:04.410
you can actually go
to a detailed view.

00:04:04.410 --> 00:04:07.320
And let's start with
the CPU profiler first.

00:04:07.320 --> 00:04:09.437
So the UI is a little
bit complicated.

00:04:09.437 --> 00:04:11.770
I know it can be a little bit
hard to see from the back.

00:04:11.770 --> 00:04:15.330
So let me just walk you
through the main points here.

00:04:15.330 --> 00:04:17.610
So here on the left, you
can see the thread list.

00:04:17.610 --> 00:04:19.550
These are all threads
that were active

00:04:19.550 --> 00:04:23.640
when you were profiling your
app using the CPU profiler.

00:04:23.640 --> 00:04:27.116
Here on the top, you can, again,
see a chart of CPU activity.

00:04:27.116 --> 00:04:29.490
You can see spikes whenever
there was something happening

00:04:29.490 --> 00:04:33.390
in the app, such as
activity creation, swipes,

00:04:33.390 --> 00:04:35.880
list scrolling, and so on.

00:04:35.880 --> 00:04:38.180
And finally, you can
see thread states.

00:04:38.180 --> 00:04:41.240
So you can actually see which
of the threads were active

00:04:41.240 --> 00:04:43.940
and their associated state,
such as if they were sleeping,

00:04:43.940 --> 00:04:46.740
active, waiting
for I/O, and so on.

00:04:46.740 --> 00:04:50.240
Now you can glance at this
and already figure out

00:04:50.240 --> 00:04:51.770
that something's happening.

00:04:51.770 --> 00:04:53.510
But the nice thing
is, you can also

00:04:53.510 --> 00:04:56.140
start method tracing from
here using this button.

00:04:56.140 --> 00:04:59.270
Method tracing is basically
recording all the method calls

00:04:59.270 --> 00:05:01.970
in your app so you can
analyze them better

00:05:01.970 --> 00:05:05.210
and figure out which
methods are taking up

00:05:05.210 --> 00:05:06.850
the most time in your app.

00:05:06.850 --> 00:05:08.570
Now there's two ways
you can do this.

00:05:08.570 --> 00:05:12.130
This dropdown next to
the Record button--

00:05:12.130 --> 00:05:15.200
you can select the sampled
or instrumented trace.

00:05:15.200 --> 00:05:18.530
The difference is,
well, pretty small.

00:05:18.530 --> 00:05:21.450
I mean, they both essentially
do the same thing,

00:05:21.450 --> 00:05:24.020
except the sampled one
has a smaller overhead.

00:05:24.020 --> 00:05:27.170
But it can miss some very
short-lived method sometimes,

00:05:27.170 --> 00:05:30.350
because it samples
every x milliseconds

00:05:30.350 --> 00:05:32.180
to check which methods were run.

00:05:32.180 --> 00:05:35.900
Whereas, if you choose
instrumented traces,

00:05:35.900 --> 00:05:38.930
they will record every
method enter and exit,

00:05:38.930 --> 00:05:40.680
but the overhead will be bigger.

00:05:40.680 --> 00:05:43.490
So what happens when I press
the Start Method Tracing button?

00:05:43.490 --> 00:05:47.090
I interact with my app,
I swipe on the screen,

00:05:47.090 --> 00:05:52.190
I do some transitions, I
rotate my phone, I press Stop.

00:05:52.190 --> 00:05:55.400
And when Android Studio
stops processing the trace,

00:05:55.400 --> 00:05:57.870
you can see this view.

00:05:57.870 --> 00:06:01.670
So here at the bottom,
we see a code chart

00:06:01.670 --> 00:06:04.310
from the selected
slice of time that you

00:06:04.310 --> 00:06:07.410
can see on the timeline.

00:06:07.410 --> 00:06:10.550
So here I selected the moment
when I was rotating my phone

00:06:10.550 --> 00:06:14.250
and the activity is getting
destroyed and recreated.

00:06:14.250 --> 00:06:16.670
So imagine this is
an image gallery app.

00:06:16.670 --> 00:06:18.740
And I notice that when
I'm looking at an image

00:06:18.740 --> 00:06:20.510
and I rotate my
phone, the activity

00:06:20.510 --> 00:06:23.870
takes an unusually long time
to actually restart and show me

00:06:23.870 --> 00:06:25.290
the image again.

00:06:25.290 --> 00:06:27.090
So I want to see
what's happening there.

00:06:27.090 --> 00:06:29.270
So I can actually
zoom in this chart,

00:06:29.270 --> 00:06:32.420
because I want to see the
exact calls that were made.

00:06:32.420 --> 00:06:35.690
Or I can just drag and drop
and select on the timeline

00:06:35.690 --> 00:06:41.280
a smaller slice of that
recording, of that trace.

00:06:41.280 --> 00:06:44.510
And here at the bottom
on the code chart,

00:06:44.510 --> 00:06:47.480
you can see all
Android framework

00:06:47.480 --> 00:06:50.090
methods highlighted in yellow.

00:06:50.090 --> 00:06:51.920
All methods from
my code that were

00:06:51.920 --> 00:06:56.540
called in this trace in green,
and some other standard library

00:06:56.540 --> 00:06:59.090
methods in blue.

00:06:59.090 --> 00:07:03.290
So again, for those who
can't see the small text

00:07:03.290 --> 00:07:06.440
on the screen, here I can see
the whole onCreate method.

00:07:06.440 --> 00:07:08.120
And actually the
width of the chart

00:07:08.120 --> 00:07:13.880
represent for how long
the respective methods

00:07:13.880 --> 00:07:15.370
were running.

00:07:15.370 --> 00:07:17.300
And the first thing
that runs in my onCreate

00:07:17.300 --> 00:07:18.710
is lay out inflation.

00:07:18.710 --> 00:07:19.690
It takes some time.

00:07:19.690 --> 00:07:20.330
That's OK.

00:07:20.330 --> 00:07:22.250
I can't do anything about it.

00:07:22.250 --> 00:07:25.040
But then I notice that there
are two very long method

00:07:25.040 --> 00:07:27.620
calls in my code,
which actually create

00:07:27.620 --> 00:07:29.720
disk caches for my images.

00:07:29.720 --> 00:07:33.980
And first of all, I can see that
I'm actually hitting the disk.

00:07:33.980 --> 00:07:37.010
I'm creating caches, I'm reading
disk from my main thread.

00:07:37.010 --> 00:07:38.532
I can see that
because I'm actually

00:07:38.532 --> 00:07:40.490
analyzing the main thread,
which is highlighted

00:07:40.490 --> 00:07:42.890
at the top on the thread list.

00:07:42.890 --> 00:07:45.890
I can also see that all this
takes almost twice the time it

00:07:45.890 --> 00:07:48.380
takes to initialize my layout.

00:07:48.380 --> 00:07:51.650
So I should probably not
be doing that in onCreate.

00:07:51.650 --> 00:07:53.720
And that's it.

00:07:53.720 --> 00:07:57.170
In 10 seconds, I was able
to quickly glance and see

00:07:57.170 --> 00:07:59.720
what's happening
my onCreate method

00:07:59.720 --> 00:08:01.970
and why it's taking so long.

00:08:01.970 --> 00:08:05.060
So I really recommend to
try this for all the places

00:08:05.060 --> 00:08:07.520
where you need to finish
something quickly,

00:08:07.520 --> 00:08:12.380
if you're doing any calls
in layouts, in the computing

00:08:12.380 --> 00:08:16.160
layouts, in custom
drawing for your views,

00:08:16.160 --> 00:08:20.030
anyplace, basically, that may be
impacted by doing a lot of work

00:08:20.030 --> 00:08:21.350
on the CPU.

00:08:21.350 --> 00:08:24.470
Please check it out.

00:08:24.470 --> 00:08:27.350
There's always also other
ways you can look at the data.

00:08:27.350 --> 00:08:30.755
So the code chart is obviously
a very visual way to analyze it.

00:08:30.755 --> 00:08:33.650
But you can also open
the top down view

00:08:33.650 --> 00:08:36.470
and see all the calls
from the thread root,

00:08:36.470 --> 00:08:41.059
from the main method, all the
way down to individual methods

00:08:41.059 --> 00:08:44.300
that were called in your
app, and also see some data,

00:08:44.300 --> 00:08:47.720
like relative times
of how long they ran.

00:08:47.720 --> 00:08:49.670
And there's another
way of looking at it.

00:08:49.670 --> 00:08:53.210
In the bottom up view,
that's the second tab,

00:08:53.210 --> 00:08:55.460
I can actually sort
all the methods

00:08:55.460 --> 00:08:59.330
that were called by
how long they ran.

00:08:59.330 --> 00:09:02.150
And I can immediately see the
method I was telling you about,

00:09:02.150 --> 00:09:06.200
the create disk caches method,
is very high on the list.

00:09:06.200 --> 00:09:09.200
I can immediately see that
that method is actually

00:09:09.200 --> 00:09:10.820
making my onCreate slow.

00:09:10.820 --> 00:09:13.370
And then if I expand the
nodes in the tree view,

00:09:13.370 --> 00:09:15.890
I can actually see
where it was called.

00:09:15.890 --> 00:09:17.660
So instead of going
from the thread route

00:09:17.660 --> 00:09:20.300
to the individual methods, I'm
going the other way around,

00:09:20.300 --> 00:09:22.090
starting with the
method I'm interested in

00:09:22.090 --> 00:09:26.950
and finding out which place
in my code I was calling it.

00:09:26.950 --> 00:09:31.080
OK, so let's move on
to the memory profiler.

00:09:31.080 --> 00:09:34.170
So here again, same situation.

00:09:34.170 --> 00:09:35.760
I'm rotating my screen.

00:09:35.760 --> 00:09:38.040
Something's being
recomputed, recreated,

00:09:38.040 --> 00:09:39.750
and my memory goes up.

00:09:39.750 --> 00:09:43.200
You can immediately see
that from the chart.

00:09:43.200 --> 00:09:45.330
You can also see
some more events.

00:09:45.330 --> 00:09:47.610
So you can see when GCE
events were happening.

00:09:47.610 --> 00:09:49.980
If you see too many of
these small trashcan

00:09:49.980 --> 00:09:54.750
icons in a short amount of
time, and if the memory is going

00:09:54.750 --> 00:09:56.250
up and down, up and
down, that means

00:09:56.250 --> 00:09:57.660
you might be
thrashing the memory.

00:09:57.660 --> 00:09:59.493
You might be creating
objects and destroying

00:09:59.493 --> 00:10:04.360
them, which again, might impact
the performance of your app.

00:10:04.360 --> 00:10:07.090
Just for debugging, if you need
to force a garbage collection

00:10:07.090 --> 00:10:09.740
event, you can do
that from here.

00:10:09.740 --> 00:10:12.610
But the coolest part
about this memory view,

00:10:12.610 --> 00:10:15.580
about this memory analyzer, is--

00:10:15.580 --> 00:10:17.190
by the way, this is all live.

00:10:17.190 --> 00:10:18.940
I know I'm presenting
this on screenshots,

00:10:18.940 --> 00:10:22.110
but this is all going live
when you run your app.

00:10:22.110 --> 00:10:25.180
And at any given moment, when
you see something happening,

00:10:25.180 --> 00:10:27.370
something interesting
happening in your app,

00:10:27.370 --> 00:10:31.030
you can drag and drop on the
timeline and select slice

00:10:31.030 --> 00:10:35.530
of time without any
prerecording, pressing

00:10:35.530 --> 00:10:38.350
any buttons first, and
see all the allocations

00:10:38.350 --> 00:10:42.200
and deallocations that
happened at that time.

00:10:42.200 --> 00:10:45.100
So here you can see some
input events on the top.

00:10:45.100 --> 00:10:48.190
This is a situation
where I was just

00:10:48.190 --> 00:10:51.650
scrolling a long list of
items, again, of images.

00:10:51.650 --> 00:10:54.550
And you can see, just like
I said, memory goes up,

00:10:54.550 --> 00:10:55.360
memory goes down.

00:10:55.360 --> 00:10:57.910
There's a lot of garbage
collection events.

00:10:57.910 --> 00:11:01.300
And for some reason, my
scrolling is very janky.

00:11:01.300 --> 00:11:04.480
I can see that the app is
loading something and just

00:11:04.480 --> 00:11:06.620
thrashing memory.

00:11:06.620 --> 00:11:10.690
So I'm inspecting this
place for possible culprits.

00:11:10.690 --> 00:11:13.750
And at the bottom, you can
see a list of all the classes

00:11:13.750 --> 00:11:16.960
that were either
allocated or deallocated

00:11:16.960 --> 00:11:19.900
within that time slice.

00:11:19.900 --> 00:11:21.850
But the really helpful
views are actually

00:11:21.850 --> 00:11:25.240
hidden under a dropdown, so
you can arrange this data

00:11:25.240 --> 00:11:26.660
in different ways.

00:11:26.660 --> 00:11:29.380
So here I selected
Arrange by Call Stack.

00:11:29.380 --> 00:11:32.300
And I can actually
find the place

00:11:32.300 --> 00:11:36.880
in my list adapter, the
getView method, which,

00:11:36.880 --> 00:11:39.220
if you remember when
you have a long list,

00:11:39.220 --> 00:11:40.870
the adapter recycles
views, and that

00:11:40.870 --> 00:11:43.150
has to provide them
whenever a new view has

00:11:43.150 --> 00:11:46.000
to be shown on the screen
when you scroll it.

00:11:46.000 --> 00:11:48.950
So I found the getView method
that does exactly that.

00:11:48.950 --> 00:11:50.380
And I can see all
the allocations

00:11:50.380 --> 00:11:51.520
that I'm making there.

00:11:51.520 --> 00:11:53.687
And it turns out
there's actually a lot.

00:11:53.687 --> 00:11:55.270
You can see the
number of allocations.

00:11:55.270 --> 00:11:59.400
You can see the memory size
that is being allocated.

00:11:59.400 --> 00:12:02.410
Another way of looking at it
is you can arrange by package.

00:12:02.410 --> 00:12:05.672
So let's say I'm not
interested by any third party

00:12:05.672 --> 00:12:07.630
libraries that are doing
allocations right now.

00:12:07.630 --> 00:12:09.700
I'm not interested in
the system classes.

00:12:09.700 --> 00:12:13.120
I'm only interested in classes
from my code, so something

00:12:13.120 --> 00:12:14.860
that I wrote that
is being allocated.

00:12:14.860 --> 00:12:17.150
So that's another
way to look at it.

00:12:17.150 --> 00:12:21.110
So let's go back to
analyzing the getView method.

00:12:21.110 --> 00:12:24.100
So when you actually
select a class,

00:12:24.100 --> 00:12:26.710
you can see on the
right a new view opens,

00:12:26.710 --> 00:12:29.830
and you can see all
instances or all objects

00:12:29.830 --> 00:12:33.610
of that class that were actually
allocated and deallocated.

00:12:33.610 --> 00:12:36.380
Even more, when you select
any of these objects,

00:12:36.380 --> 00:12:37.880
you get a call stack.

00:12:37.880 --> 00:12:41.330
So you can see exactly where
that object was allocated.

00:12:41.330 --> 00:12:43.420
So you can track down
these rogue allocations

00:12:43.420 --> 00:12:46.630
and try and fix
it somehow, maybe

00:12:46.630 --> 00:12:51.730
move it to some warm up
before or some shared cache.

00:12:54.750 --> 00:12:57.140
Another thing you can do
with the memory analyzer

00:12:57.140 --> 00:12:59.940
is that you can
analyze heap dumps.

00:12:59.940 --> 00:13:03.060
So whenever you want to examine
some state in your app--

00:13:03.060 --> 00:13:06.389
let's say you were
using your app.

00:13:06.389 --> 00:13:08.430
You're were just using it
as a normal user would,

00:13:08.430 --> 00:13:10.170
and something's wrong.

00:13:10.170 --> 00:13:11.820
You got the app under
some weird state.

00:13:11.820 --> 00:13:14.205
Maybe some view is not
showing, maybe some image

00:13:14.205 --> 00:13:15.720
is not loading,
and you just want

00:13:15.720 --> 00:13:18.210
to figure out what's
going on, or you just

00:13:18.210 --> 00:13:22.410
want to figure out, where is
all that memory coming from,

00:13:22.410 --> 00:13:24.240
all these memory allocations?

00:13:24.240 --> 00:13:28.420
What objects actually
exist in my app?

00:13:28.420 --> 00:13:30.660
So just press this
button, wait a bit,

00:13:30.660 --> 00:13:33.970
and then you get a
similar view as before,

00:13:33.970 --> 00:13:36.360
except now you have
a snapshot of memory

00:13:36.360 --> 00:13:39.990
from your app at the time
when you pressed the button.

00:13:39.990 --> 00:13:42.060
So again, you have
a list of classes.

00:13:42.060 --> 00:13:45.400
You can click on it and
you get a list of instances

00:13:45.400 --> 00:13:48.000
of objects of those classes.

00:13:48.000 --> 00:13:50.145
And here the view looks
slightly different.

00:13:50.145 --> 00:13:51.960
So for every instance,
you can actually

00:13:51.960 --> 00:13:54.090
analyze all the fields,
all the values that

00:13:54.090 --> 00:13:58.800
were held there, just
as if you were debugging

00:13:58.800 --> 00:14:01.170
the app in Android Studio.

00:14:01.170 --> 00:14:05.890
So this is nice for figuring
out the state of the object.

00:14:05.890 --> 00:14:08.220
But if you have
another problem, if you

00:14:08.220 --> 00:14:10.140
know you have a memory
leak and, for example,

00:14:10.140 --> 00:14:12.510
you see an object that
shouldn't really be there--

00:14:12.510 --> 00:14:14.970
let's say it's some
activity that you actually

00:14:14.970 --> 00:14:17.830
stopped interacting
with a long time ago,

00:14:17.830 --> 00:14:20.160
and it should really be
garbage collected by now

00:14:20.160 --> 00:14:22.350
but it's still
there in the list.

00:14:22.350 --> 00:14:26.310
You can use the
bottom view here,

00:14:26.310 --> 00:14:28.680
the References view,
to figure out who's

00:14:28.680 --> 00:14:30.570
holding references to my view.

00:14:30.570 --> 00:14:33.876
Who is preventing it from
being garbage collected?

00:14:33.876 --> 00:14:35.250
And here, by
expanding the nodes,

00:14:35.250 --> 00:14:37.800
you can find a
chain of references,

00:14:37.800 --> 00:14:40.500
usually to the window
object or to some route view

00:14:40.500 --> 00:14:43.770
or whichever object is
being held by the system

00:14:43.770 --> 00:14:45.330
because it's active in your app.

00:14:45.330 --> 00:14:47.760
And then it's holding
onto these objects

00:14:47.760 --> 00:14:51.590
that you would
really like to, well,

00:14:51.590 --> 00:14:53.850
enable them to be
garbage collected.

00:14:53.850 --> 00:14:57.840
So a great way of
analyzing memory leaks.

00:14:57.840 --> 00:15:01.120
And finally, the last
profiler, network profiler.

00:15:01.120 --> 00:15:02.920
So this view is
quite interesting,

00:15:02.920 --> 00:15:06.400
because you can use
it for two purposes--

00:15:06.400 --> 00:15:09.900
well, analyzing network
requests, obviously.

00:15:09.900 --> 00:15:12.660
But the other one is it actually
shows you the radio power

00:15:12.660 --> 00:15:15.550
state, and you can figure out
some battery problems that

00:15:15.550 --> 00:15:17.780
might be created by your app.

00:15:17.780 --> 00:15:22.030
So the radio state can be
shown in three states, really.

00:15:22.030 --> 00:15:26.470
It's either Wi-Fi, low powered
radio or high powered radio.

00:15:26.470 --> 00:15:28.840
And the way the GSM
radio on your devices

00:15:28.840 --> 00:15:32.590
works, when it doesn't have
to do any transmissions,

00:15:32.590 --> 00:15:35.730
when you're not downloading
or uploading data,

00:15:35.730 --> 00:15:40.360
it can go to a low powered
state to save battery life.

00:15:40.360 --> 00:15:42.670
As soon as you want
to make a request,

00:15:42.670 --> 00:15:45.070
if your app has to
hit the network,

00:15:45.070 --> 00:15:47.800
the radio has to be powered up.

00:15:47.800 --> 00:15:49.780
That have already
takes up some battery.

00:15:49.780 --> 00:15:52.780
Then you make your request, and
then it stays up for some time,

00:15:52.780 --> 00:15:55.360
just in case you want
to request some more

00:15:55.360 --> 00:15:56.950
data from the network.

00:15:56.950 --> 00:15:59.500
And that can be wasteful,
but you can actually

00:15:59.500 --> 00:16:02.620
minimize that impact by
batching your request.

00:16:02.620 --> 00:16:08.620
And if you look here, if you
look at your network profiler,

00:16:08.620 --> 00:16:10.030
after using your
app for a while,

00:16:10.030 --> 00:16:11.890
after interacting
with it, you can

00:16:11.890 --> 00:16:16.510
see if your requests were,
well, batched in one place.

00:16:16.510 --> 00:16:19.540
You woke up the radio once,
did all your downloading,

00:16:19.540 --> 00:16:22.000
and then the radio can go
to a low powered state,

00:16:22.000 --> 00:16:25.540
or if you are waking the radio
up every minute, every 30

00:16:25.540 --> 00:16:30.320
seconds, and then figure
out how to fix it.

00:16:30.320 --> 00:16:32.590
Obviously, the network
profiler is not only

00:16:32.590 --> 00:16:34.591
about the radio state
and the battery,

00:16:34.591 --> 00:16:35.590
it's all about networks.

00:16:35.590 --> 00:16:38.320
So at the bottom, you see
the data transfer graph,

00:16:38.320 --> 00:16:42.931
you see how much data was sent,
when the requests were made.

00:16:42.931 --> 00:16:44.680
And again, like on the
previous profilers,

00:16:44.680 --> 00:16:47.110
you can select a chunk
of time and then see

00:16:47.110 --> 00:16:52.870
all the HTTP and HTTPS requests
that were made in that time.

00:16:52.870 --> 00:16:55.600
It's a little bit
similar to DevTools

00:16:55.600 --> 00:16:58.150
that you know from
Chrome, for example.

00:16:58.150 --> 00:17:03.490
You see content-type, you
can see a timeline with time

00:17:03.490 --> 00:17:06.700
that every request took.

00:17:06.700 --> 00:17:08.810
But even more, if you
click on any of these,

00:17:08.810 --> 00:17:10.520
you can see the actual payload.

00:17:10.520 --> 00:17:13.329
So if it was an image,
like a JPEG or a PNG,

00:17:13.329 --> 00:17:16.089
if it was text,
such as JSON or XML,

00:17:16.089 --> 00:17:19.630
you can see the actual data that
was downloaded into your app

00:17:19.630 --> 00:17:21.220
through that request.

00:17:21.220 --> 00:17:24.359
You can obviously also
see HTTP headers--

00:17:24.359 --> 00:17:28.610
very useful for debugging any
problems with server APIs.

00:17:28.610 --> 00:17:32.320
And finally, you can see
the call stack showing you

00:17:32.320 --> 00:17:34.270
where the call was
made in your code.

00:17:34.270 --> 00:17:37.320
So that pretty useful.

00:17:37.320 --> 00:17:38.650
A few comments.

00:17:38.650 --> 00:17:42.606
The profilers work
great on Android Oreo.

00:17:42.606 --> 00:17:44.590
You don't have to
literally do anything.

00:17:44.590 --> 00:17:48.490
They should just work
with any debuggable APK.

00:17:48.490 --> 00:17:50.390
They also work on
lower API versions.

00:17:50.390 --> 00:17:53.140
However, remember
on Nougat and below,

00:17:53.140 --> 00:17:56.230
you have to build and deploy
your app from Android Studio

00:17:56.230 --> 00:17:59.350
to use all the functions
of the Android profilers.

00:17:59.350 --> 00:18:02.160
And you have to remember to
enable advanced profiling.

00:18:02.160 --> 00:18:03.910
If you don't have it
enabled, don't worry.

00:18:03.910 --> 00:18:07.090
The profiler will
show you a prompt

00:18:07.090 --> 00:18:11.110
and it will literally
be one click fix.

00:18:11.110 --> 00:18:12.610
And there are some
small differences

00:18:12.610 --> 00:18:13.810
in how profilers work.

00:18:13.810 --> 00:18:16.302
So for example, in
Nougat and below,

00:18:16.302 --> 00:18:18.010
to track memory
allocations, you actually

00:18:18.010 --> 00:18:23.080
have to press a Record button,
just like in the CPU chart.

00:18:23.080 --> 00:18:27.490
Other than that, most functions
should be available for you.

00:18:27.490 --> 00:18:31.210
And there's one more new
thing in Android Studio 3.0.

00:18:31.210 --> 00:18:34.780
If there are any, for example,
game developers out there,

00:18:34.780 --> 00:18:37.990
or people who use
alternative ways to build

00:18:37.990 --> 00:18:42.850
your APKs such as different
IDEs or different tool chains,

00:18:42.850 --> 00:18:46.180
and you would like to use all
these new Android profiler

00:18:46.180 --> 00:18:49.300
goodness, or just use Android
Studio to debug your app,

00:18:49.300 --> 00:18:51.550
there's now a new project
type in Android Studio

00:18:51.550 --> 00:18:55.060
to debug external APKs.

00:18:55.060 --> 00:18:58.450
You can select this
profile or debug option

00:18:58.450 --> 00:19:01.180
from the Android Studio
launcher, the first screen

00:19:01.180 --> 00:19:02.170
that you see.

00:19:02.170 --> 00:19:05.590
Select your APK, and it will
be like a dummy project will

00:19:05.590 --> 00:19:08.910
be created for you
with the APK attached,

00:19:08.910 --> 00:19:11.420
with the Java code
decompiled to Smali.

00:19:11.420 --> 00:19:15.310
And you can even see the
APK contents open in the APK

00:19:15.310 --> 00:19:17.000
analyzer for you.

00:19:17.000 --> 00:19:19.610
So you can do that to
load an external APK.

00:19:19.610 --> 00:19:23.260
You can even attach Java sources
and attach native libraries

00:19:23.260 --> 00:19:24.640
with debug symbols.

00:19:24.640 --> 00:19:28.750
That lets you do step by
step debugging in your code.

00:19:28.750 --> 00:19:30.790
And yeah, if you've
always wanted

00:19:30.790 --> 00:19:33.580
to use Android Studio for APKs
built with something else,

00:19:33.580 --> 00:19:36.120
do try it out.

00:19:36.120 --> 00:19:37.500
So I mentioned APK analyzer.

00:19:37.500 --> 00:19:39.260
That was the window
on the right.

00:19:39.260 --> 00:19:41.120
It's not new in
any Android Studio.

00:19:41.120 --> 00:19:45.590
However, Android Studio 3.0
brings some pretty notable

00:19:45.590 --> 00:19:47.840
improvements.

00:19:47.840 --> 00:19:51.980
The way you launch it is
you can select Analyze APK

00:19:51.980 --> 00:19:53.060
from the Build menu.

00:19:53.060 --> 00:19:54.800
Just one word of advice.

00:19:54.800 --> 00:19:58.100
If you build your APKs during
development using Instant Run,

00:19:58.100 --> 00:20:00.920
using the Run button
in Android Studio,

00:20:00.920 --> 00:20:04.040
don't open these using
the APK analyzer.

00:20:04.040 --> 00:20:06.200
They don't contain all
the classes and resources

00:20:06.200 --> 00:20:09.480
that you want to actually
look at and analyze.

00:20:09.480 --> 00:20:13.730
Instead, press the Build
APK or Generate Sign APK.

00:20:13.730 --> 00:20:15.620
Wait until the APK
builds, and you'll

00:20:15.620 --> 00:20:18.680
get a nice notification
APK is ready.

00:20:18.680 --> 00:20:23.140
You can either locate it on
disk or open it in the analyzer.

00:20:23.140 --> 00:20:26.390
So when you press Analyze,
APK Analyzer launches.

00:20:26.390 --> 00:20:29.852
You can see-- let me just give
you a short walk through if you

00:20:29.852 --> 00:20:30.810
haven't used it before.

00:20:30.810 --> 00:20:33.240
But it's been in Android
Studio for some time.

00:20:33.240 --> 00:20:35.420
And you can see the
contents of the APK,

00:20:35.420 --> 00:20:38.840
all the files, some basic
info such as the file

00:20:38.840 --> 00:20:41.780
size of the APK,
file sizes inside,

00:20:41.780 --> 00:20:44.030
the download size, because
Play Store compresses

00:20:44.030 --> 00:20:47.600
the APK for delivery to devices,
and then you can actually

00:20:47.600 --> 00:20:49.920
dig into the classes--

00:20:49.920 --> 00:20:51.800
they're in your
classes DEX files--

00:20:51.800 --> 00:20:53.950
and resources.

00:20:53.950 --> 00:20:56.060
What we've added
Android Studio 3.0,

00:20:56.060 --> 00:21:00.140
you can actually now see a third
column showing you the sizes

00:21:00.140 --> 00:21:03.230
of the DEX code in your APKs.

00:21:03.230 --> 00:21:06.170
So you can actually see
the size of a package,

00:21:06.170 --> 00:21:08.120
the size of a class,
and even the size

00:21:08.120 --> 00:21:12.350
that a method adds to
your class as DEX files.

00:21:12.350 --> 00:21:14.270
So it's pretty good
for figuring out where

00:21:14.270 --> 00:21:17.980
all that space is going to.

00:21:17.980 --> 00:21:20.380
But there is a new thing I
wanted to announce today.

00:21:20.380 --> 00:21:23.830
And just last night, we
updated the Android SDK tools

00:21:23.830 --> 00:21:25.780
in the Canary Channel,
and we are now

00:21:25.780 --> 00:21:28.330
offering the APK analyzer
as a command line

00:21:28.330 --> 00:21:32.684
tool for using your CI
servers and build servers.

00:21:32.684 --> 00:21:35.340
[APPLAUSE]

00:21:35.340 --> 00:21:37.020
So this was a
longstanding request.

00:21:37.020 --> 00:21:41.070
I'm happy we are finally
releasing to you in preview.

00:21:41.070 --> 00:21:42.630
I'm hoping you'll try it out.

00:21:42.630 --> 00:21:47.190
It does most of the things and
even more than the APK analyzer

00:21:47.190 --> 00:21:50.730
in Android Studio.

00:21:50.730 --> 00:21:52.190
Syntax is pretty basic.

00:21:52.190 --> 00:21:56.600
It has commands that let you
inspect things in the manifest,

00:21:56.600 --> 00:21:59.660
in the APK, in the deck size,
and even print out resources

00:21:59.660 --> 00:22:01.780
from the resource table.

00:22:01.780 --> 00:22:05.240
It will be great for generating
reports on your build service.

00:22:05.240 --> 00:22:07.390
It will be great for
comparing two APK

00:22:07.390 --> 00:22:10.130
versions to see where
you've regressed

00:22:10.130 --> 00:22:12.920
when it comes to APK size.

00:22:12.920 --> 00:22:15.620
With some script-fu,
you can even

00:22:15.620 --> 00:22:20.660
figure out very, very specific
changes in your APK, such

00:22:20.660 --> 00:22:24.290
as you take two APKs, you
list all the packages inside,

00:22:24.290 --> 00:22:27.110
all the classes, and you
notice that between these two

00:22:27.110 --> 00:22:31.100
versions, some developer in your
project added two new classes

00:22:31.100 --> 00:22:35.720
and they take up x amount
of space in those APKs.

00:22:35.720 --> 00:22:39.350
So these are only some ideas
on how you can use them.

00:22:39.350 --> 00:22:44.190
I'm curious to hear your
feedback on this tool.

00:22:44.190 --> 00:22:48.400
So please come to see me after
the session and let's talk.

00:22:48.400 --> 00:22:50.650
And the last thing I wanted
to mention at this session

00:22:50.650 --> 00:22:52.810
is Android Vitals.

00:22:52.810 --> 00:22:58.060
So this is a place in the
Google Play Console that

00:22:58.060 --> 00:23:03.220
lets you track and see some
common problems with your apps

00:23:03.220 --> 00:23:08.020
that are happening on user's
devices, such as ANR rate.

00:23:08.020 --> 00:23:10.210
ANR is Application
Not Responding.

00:23:10.210 --> 00:23:13.240
This basically happens whenever
you use network or storage

00:23:13.240 --> 00:23:14.830
from the main thread.

00:23:14.830 --> 00:23:16.870
You can see the crash rate.

00:23:16.870 --> 00:23:19.300
You can figure out things
like slow rendering

00:23:19.300 --> 00:23:22.150
or frozen frames,
which usually means

00:23:22.150 --> 00:23:26.470
you're doing something wrong
with the CPU or memory, as I

00:23:26.470 --> 00:23:29.062
showed you you can
analyze before.

00:23:29.062 --> 00:23:31.270
And finally, stuck wait
locks and excessive wake ups,

00:23:31.270 --> 00:23:36.930
which have an impact on
the user's battery life.

00:23:36.930 --> 00:23:39.320
We also offer all
this information

00:23:39.320 --> 00:23:41.210
on developers.android.com.

00:23:41.210 --> 00:23:45.890
So every section
has a dedicated page

00:23:45.890 --> 00:23:48.950
that explains all the
tools and debug methods

00:23:48.950 --> 00:23:51.650
that you can use to
figure out these things

00:23:51.650 --> 00:23:53.100
and fix them in your apps.

00:23:53.100 --> 00:23:56.660
So I really encourage you to
look it up in the Play Store,

00:23:56.660 --> 00:24:00.920
in the Play Console,
and start working on it.

00:24:00.920 --> 00:24:02.450
So thank you very much.

00:24:02.450 --> 00:24:06.140
I'll be here on Level 3 in the
Android Office Hours Booth.

00:24:06.140 --> 00:24:08.600
If you want to talk about
the new profilers on the APK

00:24:08.600 --> 00:24:10.190
analyzer, please
come talk to me,

00:24:10.190 --> 00:24:12.770
and I'm curious to
hear what you think.

00:24:12.770 --> 00:24:13.520
Thank you.

00:24:13.520 --> 00:24:14.720
[APPLAUSE]

00:24:14.720 --> 00:24:17.470
[MUSIC PLAYING]

