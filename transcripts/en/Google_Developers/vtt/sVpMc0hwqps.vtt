WEBVTT
Kind: captions
Language: en

00:00:06.461 --> 00:00:10.240
MARTIN GORNER: Hello, and thank
you for watching "Google

00:00:10.240 --> 00:00:13.410
Developers Live." This is a new
show called "root access

00:00:13.410 --> 00:00:18.190
Berlin." We are recording at
the brand new studio at the

00:00:18.190 --> 00:00:19.730
Factory in Berlin.

00:00:19.730 --> 00:00:23.730
The startup community is
absolutely vibrant here.

00:00:23.730 --> 00:00:26.710
The Factory is the
place to be.

00:00:26.710 --> 00:00:30.310
It's a 16,000 square meter
campus that mixes young

00:00:30.310 --> 00:00:33.660
startups, seasoned startups,
and creates a fantastic

00:00:33.660 --> 00:00:37.080
innovation, to stimulate
innovation and new

00:00:37.080 --> 00:00:38.550
technologies.

00:00:38.550 --> 00:00:42.150
Please welcome Chad from
6Wunderkinder.

00:00:42.150 --> 00:00:42.650
CHAD FOWLER: Thank you.

00:00:42.650 --> 00:00:44.360
MARTIN GORNER: Chad, can
you introduce yourself?

00:00:44.360 --> 00:00:45.550
CHAD FOWLER: Yeah,
I'm Chad Fowler.

00:00:45.550 --> 00:00:49.950
I'm Chief Technology Officer at
6Wunderkinder, which means,

00:00:49.950 --> 00:00:52.390
partially, that I'm
a programmer.

00:00:52.390 --> 00:00:56.950
And probably mostly, I am the
seasoned guy in the young,

00:00:56.950 --> 00:00:59.470
fresh startup, to
use your words.

00:00:59.470 --> 00:01:00.370
MARTIN GORNER: All right.

00:01:00.370 --> 00:01:05.170
So the product you do is
actually a very successful

00:01:05.170 --> 00:01:07.320
cost manager.

00:01:07.320 --> 00:01:08.830
Can you tell us more about it?

00:01:08.830 --> 00:01:11.340
And I'll show on the screen
what it looks like?

00:01:11.340 --> 00:01:12.530
CHAD FOWLER: Sure, OK.

00:01:12.530 --> 00:01:15.860
So the product is called
Wunderlist.

00:01:15.860 --> 00:01:18.040
And this is actually Wunderlist
2, which we

00:01:18.040 --> 00:01:19.210
launched in December.

00:01:19.210 --> 00:01:21.130
And I'm going to talk about
the implementation of it a

00:01:21.130 --> 00:01:22.810
little bit later.

00:01:22.810 --> 00:01:27.180
But it is a productivity tool
that we pride on being simple

00:01:27.180 --> 00:01:29.360
and beautiful and just staying
out of your way.

00:01:29.360 --> 00:01:32.420
So it's a place where you can
capture your own tasks for

00:01:32.420 --> 00:01:34.120
personal or for work.

00:01:34.120 --> 00:01:37.090
And you can share them with
others and even assign them to

00:01:37.090 --> 00:01:38.105
people, and that
sort of thing.

00:01:38.105 --> 00:01:40.680
MARTIN GORNER: So here, I
have actually done that.

00:01:40.680 --> 00:01:43.010
I have created this work list.

00:01:43.010 --> 00:01:45.820
And I have shared it
with you, Chad.

00:01:45.820 --> 00:01:48.540
And you have a smartphone,
on which you can see it.

00:01:48.540 --> 00:01:52.500
So let me add a work
item for you.

00:01:57.380 --> 00:01:59.080
All right.

00:01:59.080 --> 00:02:00.326
CHAD FOWLER: Easy.

00:02:00.326 --> 00:02:01.500
MARTIN GORNER: Easy, yes.

00:02:01.500 --> 00:02:05.524
Let's see how this works.

00:02:05.524 --> 00:02:08.600
CHAD FOWLER: So this is our
native Android application.

00:02:08.600 --> 00:02:11.160
You'll see that it
synchronized and

00:02:11.160 --> 00:02:12.780
the task came through.

00:02:12.780 --> 00:02:17.200
Something I forgot to mention
is we are a distributed

00:02:17.200 --> 00:02:19.670
cross-platform product.

00:02:19.670 --> 00:02:23.110
So we have a central
synchronization service.

00:02:23.110 --> 00:02:27.920
But then, we have Windows,
iOS, Objective, Mac OS,

00:02:27.920 --> 00:02:30.095
Android, and web clients.

00:02:30.095 --> 00:02:32.750
MARTIN GORNER: So yes, this
looks extremely simple.

00:02:32.750 --> 00:02:33.660
I add a task.

00:02:33.660 --> 00:02:35.440
It pops up on my
other devices.

00:02:35.440 --> 00:02:38.690
It pops up in the list of people
who share my list.

00:02:38.690 --> 00:02:39.970
It's super simple.

00:02:39.970 --> 00:02:40.540
CHAD FOWLER: Yeah.

00:02:40.540 --> 00:02:42.110
That's what we want
you to think.

00:02:42.110 --> 00:02:43.490
Or that's what we want
you to feel.

00:02:43.490 --> 00:02:45.470
MARTIN GORNER: There must be 20
lines of code behind this.

00:02:45.470 --> 00:02:47.200
CHAD FOWLER: Slightly
more than 20.

00:02:47.200 --> 00:02:49.810
It ends up being a lot more
complicated than that, to

00:02:49.810 --> 00:02:52.040
implement it and make
it be seen less.

00:02:52.040 --> 00:02:54.840
Just then, you shared
one task with me.

00:02:54.840 --> 00:02:57.510
I was not currently
working on it.

00:02:57.510 --> 00:02:59.580
Neither of us was offline.

00:02:59.580 --> 00:03:03.280
But it gets a lot harder when
you have multiple clients on

00:03:03.280 --> 00:03:05.400
multiple platforms,
connected and/or

00:03:05.400 --> 00:03:07.890
disconnected from the internet.

00:03:07.890 --> 00:03:11.580
So effectively, the problem
that we have to solve is

00:03:11.580 --> 00:03:16.630
similar to creating a
multi-master distributed

00:03:16.630 --> 00:03:17.930
database system.

00:03:17.930 --> 00:03:20.490
You may have multiple friends
and coworkers that you're

00:03:20.490 --> 00:03:24.320
collaborating with that have
mobile phones and desktop

00:03:24.320 --> 00:03:28.560
computers and connections via
the web, all of them making

00:03:28.560 --> 00:03:31.340
updates all at the same time,
on the same lists and tasks

00:03:31.340 --> 00:03:32.450
that you are.

00:03:32.450 --> 00:03:34.470
So they're saving those
changes locally.

00:03:34.470 --> 00:03:36.740
When they go offline, they could
be saving many, many

00:03:36.740 --> 00:03:38.000
changes locally.

00:03:38.000 --> 00:03:40.790
When they come back online,
they bombard

00:03:40.790 --> 00:03:42.500
the server with changes.

00:03:42.500 --> 00:03:46.760
And as you probably know, in
mobile development, every

00:03:46.760 --> 00:03:49.960
connection you make is very
expensive, in terms of time

00:03:49.960 --> 00:03:52.520
and potential battery life.

00:03:52.520 --> 00:03:57.090
So the big problem that we had
to solve when we implemented

00:03:57.090 --> 00:04:02.170
the synchronization layer is,
how can we allow clients to

00:04:02.170 --> 00:04:05.940
batch up a bunch of requests and
effectively make them all

00:04:05.940 --> 00:04:08.240
via one HTTP call and
get all of the

00:04:08.240 --> 00:04:10.060
responses back all at once.

00:04:10.060 --> 00:04:13.960
So we initially implemented
that in Ruby.

00:04:13.960 --> 00:04:15.730
Our back end was written
in Ruby.

00:04:15.730 --> 00:04:18.260
And we did it all in memory.

00:04:18.260 --> 00:04:20.029
MARTIN GORNER: So this is
what it looks like.

00:04:20.029 --> 00:04:21.070
CHAD FOWLER: Yes, exactly.

00:04:21.070 --> 00:04:24.150
So the black box that says, go,
the first implementation

00:04:24.150 --> 00:04:25.100
was done in Ruby.

00:04:25.100 --> 00:04:26.480
It was all in memory.

00:04:26.480 --> 00:04:29.120
And that worked when we had a
monolithic API that was all

00:04:29.120 --> 00:04:30.440
written in one language.

00:04:30.440 --> 00:04:32.930
But we're moving to a
heterogeneous distributed

00:04:32.930 --> 00:04:35.870
service oriented type of
architecture, for many

00:04:35.870 --> 00:04:39.390
reasons, including performance
and scalability.

00:04:39.390 --> 00:04:44.040
So to do this, we decided
instead of having an in-memory

00:04:44.040 --> 00:04:49.270
batch API layer, we would
do a batch API service.

00:04:49.270 --> 00:04:52.390
So it takes the same format that
the original thing does.

00:04:52.390 --> 00:04:54.580
But instead of just calling
things in memory, it makes

00:04:54.580 --> 00:04:56.750
HTTP requests.

00:04:56.750 --> 00:04:58.105
And this is a JSON document.

00:04:58.105 --> 00:05:01.330
And it represents the request
and the response.

00:05:01.330 --> 00:05:04.110
So a client would batch up
potentially multiple HTTP

00:05:04.110 --> 00:05:05.230
operations.

00:05:05.230 --> 00:05:07.570
You can see the methods are
listed, Get and Post,

00:05:07.570 --> 00:05:09.100
and then the URIs.

00:05:09.100 --> 00:05:11.850
And then the server does all
of the requests, in the

00:05:11.850 --> 00:05:15.330
initial version, only serially,
and then packages up

00:05:15.330 --> 00:05:17.270
the results, again in
a JSON document that

00:05:17.270 --> 00:05:18.625
the clients can parse.

00:05:18.625 --> 00:05:20.700
MARTIN GORNER: And so you chose
to recode your Ruby

00:05:20.700 --> 00:05:21.660
server in Go.

00:05:21.660 --> 00:05:22.730
CHAD FOWLER: Yes.

00:05:22.730 --> 00:05:23.560
MARTIN GORNER: Why Go?

00:05:23.560 --> 00:05:27.910
That seems like a no go, to add
a new language that nobody

00:05:27.910 --> 00:05:29.220
knows about.

00:05:29.220 --> 00:05:32.710
You have very little competency
in the world for

00:05:32.710 --> 00:05:34.155
working with it.

00:05:34.155 --> 00:05:36.490
CHAD FOWLER: Yeah, so
there are a few

00:05:36.490 --> 00:05:38.170
different answers to that.

00:05:38.170 --> 00:05:40.200
One of them is more
philosophical.

00:05:40.200 --> 00:05:44.870
And that is, I think it's a
mistake for teams to be afraid

00:05:44.870 --> 00:05:48.220
of new languages and
new technologies.

00:05:48.220 --> 00:05:51.390
I understand why teams can be.

00:05:51.390 --> 00:05:56.330
Now, when it comes to Go, Go
is really easy to learn.

00:05:56.330 --> 00:05:59.890
I learned enough to do this
service watching one talk at a

00:05:59.890 --> 00:06:02.820
conference, from a
Google engineer.

00:06:02.820 --> 00:06:06.100
So it's a really good at
doing concurrency.

00:06:06.100 --> 00:06:08.210
It's really good at
doing networking.

00:06:08.210 --> 00:06:11.090
And in order to actually
deploy Go--

00:06:11.090 --> 00:06:14.170
a beautiful thing about it is,
although it has all these high

00:06:14.170 --> 00:06:16.400
level language things that
you're used to from languages

00:06:16.400 --> 00:06:19.150
that have virtual machines,
there are no external

00:06:19.150 --> 00:06:20.220
dependencies.

00:06:20.220 --> 00:06:22.100
So it's really, really
simple to deploy.

00:06:22.100 --> 00:06:25.440
Whereas, if we were to go for
JVM stuff, then we'd have to

00:06:25.440 --> 00:06:27.050
get a JVM stack running our

00:06:27.050 --> 00:06:29.270
infrastructure, Erlang same thing.

00:06:29.270 --> 00:06:32.250
MARTIN GORNER: So for you, the
ease of deployment, lack of

00:06:32.250 --> 00:06:34.040
dependencies, was the key.

00:06:34.040 --> 00:06:38.260
I understand that, for other
people, having a strongly

00:06:38.260 --> 00:06:40.660
typed language is
also important.

00:06:40.660 --> 00:06:42.380
Go is that.

00:06:42.380 --> 00:06:45.930
The performance part is, I
think, very important for a

00:06:45.930 --> 00:06:46.640
lot of people.

00:06:46.640 --> 00:06:48.750
Go is compiled into a
native assembler.

00:06:48.750 --> 00:06:55.510
So it's close to
C performance.

00:06:55.510 --> 00:07:00.680
But the big difference from
C is that it has memory

00:07:00.680 --> 00:07:01.470
management.

00:07:01.470 --> 00:07:02.900
So it is a garbage-collected
language.

00:07:02.900 --> 00:07:06.400
CHAD FOWLER: Yes, I think of it
as a modern C, what I would

00:07:06.400 --> 00:07:09.630
wish C would be today,
is what Go is for me.

00:07:09.630 --> 00:07:14.480
MARTIN GORNER: And Go has
built-in concurrency patterns,

00:07:14.480 --> 00:07:17.350
which we'll dive into shortly,
because that is what allows

00:07:17.350 --> 00:07:19.820
you to program this service
very simply.

00:07:19.820 --> 00:07:21.666
CHAD FOWLER: Yes, exactly.

00:07:21.666 --> 00:07:22.430
MARTIN GORNER: All right.

00:07:22.430 --> 00:07:25.430
So now we want root access.

00:07:25.430 --> 00:07:26.080
Let's show the code.

00:07:26.080 --> 00:07:26.880
CHAD FOWLER: OK.

00:07:26.880 --> 00:07:29.840
Let's start by looking again at
the JSON document that we

00:07:29.840 --> 00:07:30.760
were looking at a minute ago.

00:07:30.760 --> 00:07:32.810
And the reason that concurrency
is interesting

00:07:32.810 --> 00:07:37.770
here is, as I said, this
document could have maybe 40,

00:07:37.770 --> 00:07:40.600
50 requests in a single
batch request.

00:07:40.600 --> 00:07:43.615
And another way to say it is,
if you have 10 requests that

00:07:43.615 --> 00:07:46.020
you're doing, and each one takes
one second on the back

00:07:46.020 --> 00:07:48.610
end, then it could either
take 10 seconds.

00:07:48.610 --> 00:07:50.390
Or it could take one second,
just to oversimplify.

00:07:50.390 --> 00:07:52.720
MARTIN GORNER: And here, it
will take one second.

00:07:52.720 --> 00:07:53.110
CHAD FOWLER: Correct.

00:07:53.110 --> 00:07:56.350
MARTIN GORNER: But before
we go there, you

00:07:56.350 --> 00:07:58.740
need to do HTTP requests.

00:07:58.740 --> 00:08:01.810
There are handy libraries
for doing that in Go.

00:08:01.810 --> 00:08:05.370
So let's see what
they look like.

00:08:05.370 --> 00:08:07.790
So this is an HTTP client.

00:08:07.790 --> 00:08:09.640
You import the library.

00:08:09.640 --> 00:08:11.700
And really, the only
thing there is to

00:08:11.700 --> 00:08:13.740
it is Get and Post.

00:08:13.740 --> 00:08:16.840
It doesn't get any simpler
than that.

00:08:16.840 --> 00:08:19.010
CHAD FOWLER: And that's included
with Go, as part of

00:08:19.010 --> 00:08:22.525
the standard library, which
is a lovely thing.

00:08:22.525 --> 00:08:25.480
MARTIN GORNER: And here's how
you do an HTTP server.

00:08:25.480 --> 00:08:27.490
It's the same library.

00:08:27.490 --> 00:08:31.050
And first, you have to look
at the main function.

00:08:31.050 --> 00:08:32.000
You declare a handler.

00:08:32.000 --> 00:08:34.450
You associate it to a URL.

00:08:34.450 --> 00:08:38.150
And then you launch the serving

00:08:38.150 --> 00:08:41.500
service, Listen and Serve.

00:08:41.500 --> 00:08:44.730
And the handler is, again,
pretty much what you expect

00:08:44.730 --> 00:08:45.925
from an HTTP handler.

00:08:45.925 --> 00:08:50.100
It has a response writer for
writing the response.

00:08:50.100 --> 00:08:51.880
And it has access
to the request.

00:08:51.880 --> 00:08:52.450
CHAD FOWLER: Yes.

00:08:52.450 --> 00:08:56.920
And this is a multi-threaded
server that can

00:08:56.920 --> 00:08:58.290
handle a lot of load.

00:08:58.290 --> 00:09:01.010
Just this little bit of code
here, that's actually what a

00:09:01.010 --> 00:09:03.600
production Go server
looks like.

00:09:03.600 --> 00:09:04.320
MARTIN GORNER: OK.

00:09:04.320 --> 00:09:08.450
So let's dive into the real
code here and talk about

00:09:08.450 --> 00:09:09.960
concurrency.

00:09:09.960 --> 00:09:15.150
So here is the first part
of your black box.

00:09:15.150 --> 00:09:16.230
What does this do?

00:09:16.230 --> 00:09:20.530
CHAD FOWLER: So this is actually
the code where, given

00:09:20.530 --> 00:09:25.180
a request, one of those JSON
documents sent from a client,

00:09:25.180 --> 00:09:28.090
off screen, we're calling
extract batch operations,

00:09:28.090 --> 00:09:31.100
which all it does is parse
the JSON of this request.

00:09:31.100 --> 00:09:35.415
So we're extracting that into
a collection of operations,

00:09:35.415 --> 00:09:38.120
which is what we've assigned
to ops here.

00:09:38.120 --> 00:09:41.150
And then, the interesting
thing and the part that

00:09:41.150 --> 00:09:44.350
demonstrates how concurrency
works is the line in red,

00:09:44.350 --> 00:09:48.130
where we see rc equals
make chan Response.

00:09:48.130 --> 00:09:50.770
What we're doing here is we're
declaring a variable called

00:09:50.770 --> 00:09:55.130
rc, which is an instantiated
channel in Go.

00:09:55.130 --> 00:09:59.570
And channels are how, in Go, you
have multiple concurrent

00:09:59.570 --> 00:10:03.100
threads-- or Go routines is
what they're called--

00:10:03.100 --> 00:10:06.490
able to talk to each other and
send messages to each other in

00:10:06.490 --> 00:10:08.930
a thread slash concurrent-safe
way.

00:10:08.930 --> 00:10:12.900
MARTIN GORNER: So the core
is the Go routine.

00:10:12.900 --> 00:10:16.980
And that is the Go statement
that you see here.

00:10:16.980 --> 00:10:18.185
What does that do?

00:10:18.185 --> 00:10:23.000
CHAD FOWLER: So basically what
that does is, we could have

00:10:23.000 --> 00:10:25.410
called request without
the word go there.

00:10:25.410 --> 00:10:27.380
This is a really neat
thing about it.

00:10:27.380 --> 00:10:29.800
It's like you add go
to the beginning or

00:10:29.800 --> 00:10:31.310
right before a call.

00:10:31.310 --> 00:10:34.130
And it turns something that was
otherwise done serially in

00:10:34.130 --> 00:10:37.260
the same thread into
running into a new

00:10:37.260 --> 00:10:39.300
thread or a new thread.

00:10:39.300 --> 00:10:42.230
The threads in Go are called Go
routines, because they're

00:10:42.230 --> 00:10:44.250
not exactly threads.

00:10:44.250 --> 00:10:46.060
They happen to run on operating

00:10:46.060 --> 00:10:47.230
system threads natively.

00:10:47.230 --> 00:10:48.510
But they're smarter than that.

00:10:48.510 --> 00:10:51.120
They can multiplex across
operating systems threads, in

00:10:51.120 --> 00:10:54.290
case one gets locked up,
that sort of thing.

00:10:54.290 --> 00:10:56.300
So it's a really high-level
environment.

00:10:56.300 --> 00:10:59.150
And you can see, with just that
Go statement, you take

00:10:59.150 --> 00:11:01.685
that was serial before,
and you turn it

00:11:01.685 --> 00:11:02.560
into parallel code.

00:11:02.560 --> 00:11:05.580
MARTIN GORNER: And actually, the
Go runtime can also decide

00:11:05.580 --> 00:11:08.700
to run a Go routine as its
thread or to batch them up

00:11:08.700 --> 00:11:10.090
inside one thread.

00:11:10.090 --> 00:11:15.650
So you can have many more Go
routines than you would have

00:11:15.650 --> 00:11:18.330
been able to have threads,
in any operating system.

00:11:18.330 --> 00:11:19.360
CHAD FOWLER: Yeah,
it's a really

00:11:19.360 --> 00:11:21.640
nice high-level construct.

00:11:21.640 --> 00:11:24.960
So what we're doing here is,
we're calling the Request

00:11:24.960 --> 00:11:29.230
function, which is something
that we built, which just

00:11:29.230 --> 00:11:34.340
simply goes off and makes the
HTTP request that we've asked

00:11:34.340 --> 00:11:35.850
for in that batch JSON.

00:11:35.850 --> 00:11:38.350
And then we pass in
it this channel.

00:11:38.350 --> 00:11:41.300
So that's how the new Go routine
is going to be able to

00:11:41.300 --> 00:11:44.410
communicate back to the calling
code and give it the

00:11:44.410 --> 00:11:46.065
response from the
batch request.

00:11:46.065 --> 00:11:52.730
MARTIN GORNER: So let's see
how these calls come back.

00:11:52.730 --> 00:11:53.610
What does this do?

00:11:53.610 --> 00:11:56.690
This looks a little
bit unusual.

00:11:56.690 --> 00:11:59.930
There is an infinite loop
on a Select statement,

00:11:59.930 --> 00:12:02.370
on a channel response.

00:12:02.370 --> 00:12:05.120
CHAD FOWLER: Yeah, it's very
similar to the Select call in

00:12:05.120 --> 00:12:11.650
C. Although, what we're doing
here is, we're asking Go to

00:12:11.650 --> 00:12:14.560
watch for I/O on channels.

00:12:14.560 --> 00:12:17.390
So we say, Select, which tells
us it to watch and block for

00:12:17.390 --> 00:12:21.240
I/O. And then we say, if we get
a response from this RC

00:12:21.240 --> 00:12:25.710
thing, which is the channel we
made earlier, then we can

00:12:25.710 --> 00:12:26.500
process it.

00:12:26.500 --> 00:12:29.000
And the syntax that we have
highlighted here, where it

00:12:29.000 --> 00:12:30.910
says less than dash rc--

00:12:30.910 --> 00:12:33.010
that is basically saying,
we're taking

00:12:33.010 --> 00:12:34.210
something out of RC.

00:12:34.210 --> 00:12:36.940
It's a kind of a clever
visual syntax.

00:12:36.940 --> 00:12:39.230
MARTIN GORNER: So on the
previous screen, we have

00:12:39.230 --> 00:12:42.990
launched our 10 requests,
asynchronously.

00:12:42.990 --> 00:12:46.840
And here, we are listening on
the channel, if one of those

00:12:46.840 --> 00:12:48.035
is returning a response.

00:12:48.035 --> 00:12:48.850
CHAD FOWLER: Correct.

00:12:48.850 --> 00:12:51.550
MARTIN GORNER: One of those
or many of those.

00:12:51.550 --> 00:12:56.020
How are you going
to deploy it?

00:12:56.020 --> 00:12:57.520
Is it physically one box?

00:12:57.520 --> 00:13:00.510
CHAD FOWLER: A beautiful thing
about this service is, it's

00:13:00.510 --> 00:13:01.690
this much code.

00:13:01.690 --> 00:13:05.880
And it's like technically maybe
three times as much code

00:13:05.880 --> 00:13:09.220
as we saw, for the
entire thing.

00:13:09.220 --> 00:13:11.980
But not only is it a small
footprint for the developers.

00:13:11.980 --> 00:13:14.020
It's a small footprint
for the server.

00:13:14.020 --> 00:13:16.090
So the way we're deploying it
is, we're actually just

00:13:16.090 --> 00:13:18.460
putting it on all the servers,
so wherever we have app

00:13:18.460 --> 00:13:21.390
servers, which really simplifies
our deployment,

00:13:21.390 --> 00:13:23.720
because it's not eating
up so many resources.

00:13:23.720 --> 00:13:26.970
We can just say, it's a part of
our standard server build.

00:13:26.970 --> 00:13:28.700
And it's just always running.

00:13:28.700 --> 00:13:31.330
It just goes extremely quick.

00:13:31.330 --> 00:13:34.730
MARTIN GORNER: Thank you very
much for being with us on

00:13:34.730 --> 00:13:40.370
"root access Berlin." And we
hope to see you soon, with

00:13:40.370 --> 00:13:43.250
other startups, other
interesting technical

00:13:43.250 --> 00:13:45.010
problems, and other--

00:13:45.010 --> 00:13:47.620
I hope-- interesting technical
solutions.

00:13:47.620 --> 00:13:48.630
Thank you, good-bye.

00:13:48.630 --> 00:13:49.260
Thank you, Chad.

00:13:49.260 --> 00:13:50.510
CHAD FOWLER: Thanks.

