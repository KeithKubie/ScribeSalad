WEBVTT
Kind: captions
Language: en

00:00:03.037 --> 00:00:04.120
SVET GANOV: Hi, everybody.

00:00:04.120 --> 00:00:05.400
My name is Svet Ganov.

00:00:05.400 --> 00:00:08.230
I'm the tech lead for the
Android runtime permission

00:00:08.230 --> 00:00:09.044
model.

00:00:09.044 --> 00:00:12.300
I'm the TL for Android
printing accessibility.

00:00:12.300 --> 00:00:15.267
I worked on various
other things.

00:00:15.267 --> 00:00:16.850
JEFF SHARKEY: My
name is Jeff Sharkey.

00:00:16.850 --> 00:00:19.100
I'm a software engineer on
the Android framework team,

00:00:19.100 --> 00:00:21.230
and I've worked on
things like SD cards,

00:00:21.230 --> 00:00:24.170
package management, and parts
of the networking stack.

00:00:24.170 --> 00:00:26.850
Today Svet's going to dig into
permissions and how they've

00:00:26.850 --> 00:00:28.700
evolved in Marshmallow,
and then I'll

00:00:28.700 --> 00:00:31.240
be back up to talk
about best practices.

00:00:31.240 --> 00:00:32.299
Svet?

00:00:32.299 --> 00:00:33.660
SVET GANOV: Thank you, Jeff.

00:00:33.660 --> 00:00:35.950
So before I begin
my talk, you're

00:00:35.950 --> 00:00:38.630
probably wondering, what
are these permissions?

00:00:38.630 --> 00:00:40.523
What is he going to
be talking about?

00:00:45.421 --> 00:00:47.545
Before I get into the nuts
and bolts of permissions

00:00:47.545 --> 00:00:50.350
and how the new runtime
permission model works,

00:00:50.350 --> 00:00:52.380
I want to cover the very basics.

00:00:52.380 --> 00:00:53.760
What is a permission?

00:00:53.760 --> 00:00:56.830
A permission controls
access to sensitive data.

00:00:56.830 --> 00:01:06.250
For example, my contacts,
SMS, and critical resources.

00:01:06.250 --> 00:01:07.870
Critical resources
are, for example,

00:01:07.870 --> 00:01:11.060
the camera and the GPS.

00:01:11.060 --> 00:01:14.330
Permissions are granted to
applications by the user,

00:01:14.330 --> 00:01:16.160
and there are two
different protection

00:01:16.160 --> 00:01:17.850
levels of provisions.

00:01:17.850 --> 00:01:21.570
One of them is normal,
dangerous, and signature.

00:01:21.570 --> 00:01:23.690
Normal permissions
are considered

00:01:23.690 --> 00:01:27.320
not that harmful to the user,
and applications usually

00:01:27.320 --> 00:01:29.800
get them immediately as
soon as they are installed.

00:01:29.800 --> 00:01:32.180
They don't need user approval.

00:01:32.180 --> 00:01:34.840
Dangerous permissions are
more critical to the user,

00:01:34.840 --> 00:01:37.550
and these are things
like your contacts,

00:01:37.550 --> 00:01:41.297
your camera, and
location, which require

00:01:41.297 --> 00:01:43.130
the user to opt in and
allow the application

00:01:43.130 --> 00:01:44.702
to use the information.

00:01:44.702 --> 00:01:46.160
There is a third
type of permission

00:01:46.160 --> 00:01:47.743
which is called
signature permissions.

00:01:47.743 --> 00:01:49.800
Signature permissions
are defined

00:01:49.800 --> 00:01:51.800
by an application
or the platform,

00:01:51.800 --> 00:01:53.559
and in order for
another application

00:01:53.559 --> 00:01:55.350
to get this permission,
it has to be signed

00:01:55.350 --> 00:01:56.940
with the same certificate.

00:01:56.940 --> 00:01:59.859
This pretty much means
that it should be developed

00:01:59.859 --> 00:02:00.775
by the same developer.

00:02:04.650 --> 00:02:08.389
I'm going to do a very quick
dive on how permissions used

00:02:08.389 --> 00:02:13.350
to work before on L, and pre-M
devices in general before I

00:02:13.350 --> 00:02:15.620
dive into the new
permission model.

00:02:15.620 --> 00:02:20.040
So what probably most of
you know, on the L devices

00:02:20.040 --> 00:02:22.770
you just go to the Play Store.

00:02:22.770 --> 00:02:25.940
You find an application
you want to install.

00:02:25.940 --> 00:02:27.880
You see the familiar
Install button.

00:02:27.880 --> 00:02:29.860
You click the Install
button, and you

00:02:29.860 --> 00:02:32.210
see this nice list of
all the permissions

00:02:32.210 --> 00:02:34.640
that the application is using.

00:02:34.640 --> 00:02:36.930
You have basically two
options at this point--

00:02:36.930 --> 00:02:39.990
accept operations or go back.

00:02:39.990 --> 00:02:42.260
And even if you don't like
one of those permissions

00:02:42.260 --> 00:02:44.030
and if you have some
doubts, you basically

00:02:44.030 --> 00:02:47.440
have still these two options,
like opt in or completely don't

00:02:47.440 --> 00:02:50.630
install the application at all.

00:02:50.630 --> 00:02:52.890
Assume that I approve
all permissions.

00:02:52.890 --> 00:02:55.750
The application gets
downloaded, I open the app,

00:02:55.750 --> 00:02:59.030
and the application can
be used all the time.

00:02:59.030 --> 00:03:04.050
So the old permission model
had several limitations.

00:03:04.050 --> 00:03:06.500
For one, the user
had no control.

00:03:06.500 --> 00:03:08.030
Basically you have
the big hammer.

00:03:08.030 --> 00:03:09.790
You add or keep the
nail or you don't.

00:03:09.790 --> 00:03:12.290
It's basically you add or accept
all permissions and install

00:03:12.290 --> 00:03:14.490
the app or you don't.

00:03:14.490 --> 00:03:16.221
There is no context
for the user.

00:03:16.221 --> 00:03:17.970
Why does this application
use permissions?

00:03:17.970 --> 00:03:21.160
So you're probably asking,
why is a flashlight

00:03:21.160 --> 00:03:24.904
app asking for some permission?

00:03:24.904 --> 00:03:26.570
There's probably a
good reason for that,

00:03:26.570 --> 00:03:29.460
but the thing is that it's
not obvious every time

00:03:29.460 --> 00:03:32.550
why the applications
uses certain permissions.

00:03:32.550 --> 00:03:35.870
Another problem we had was
we had too many permissions,

00:03:35.870 --> 00:03:38.300
and it was really hard to
make an informed choice when

00:03:38.300 --> 00:03:40.800
you have 30 options and
you need to understand

00:03:40.800 --> 00:03:44.960
30 different concepts
to decide what to do.

00:03:44.960 --> 00:03:46.810
Another problem is
the technical jargon

00:03:46.810 --> 00:03:50.430
that was used by the explanation
for certain permissions,

00:03:50.430 --> 00:03:53.890
mainly because it's
been evolving over time,

00:03:53.890 --> 00:03:55.815
and we've been adding
more and more concepts,

00:03:55.815 --> 00:03:57.940
and to be honest, I am an
engineer working on this,

00:03:57.940 --> 00:04:01.420
and still it was kind of hard to
understand all the permissions

00:04:01.420 --> 00:04:02.730
at some point.

00:04:02.730 --> 00:04:05.671
I just needed to look it
up and see what it was.

00:04:05.671 --> 00:04:07.170
And the other issue,
which is really

00:04:07.170 --> 00:04:09.460
important for you guys
who have developers

00:04:09.460 --> 00:04:11.160
is that there was
friction on upgrade,

00:04:11.160 --> 00:04:13.740
because if you get an
update for the application

00:04:13.740 --> 00:04:15.490
and require a new
permission, the user has

00:04:15.490 --> 00:04:20.420
to explicitly approve it
before the upgrade occurs.

00:04:20.420 --> 00:04:23.220
This is problematic, because
many times developers

00:04:23.220 --> 00:04:25.180
are afraid to add new
features because they

00:04:25.180 --> 00:04:27.500
may require a new permission.

00:04:27.500 --> 00:04:31.130
This can limit the options
of the application,

00:04:31.130 --> 00:04:38.290
and this could lead to the
other pathological case where

00:04:38.290 --> 00:04:40.500
you request all
permissions up front,

00:04:40.500 --> 00:04:43.160
just in case-- you
don't even know.

00:04:43.160 --> 00:04:47.380
So in order to solve
all these problems,

00:04:47.380 --> 00:04:53.530
I'm presenting how permissions
work on M, or Mash model.

00:04:53.530 --> 00:04:57.590
What we did is, we realized that
we had too many permissions,

00:04:57.590 --> 00:04:59.790
and we decided to
group the permissions

00:04:59.790 --> 00:05:04.540
into nine permission groups
which are oriented by topic.

00:05:04.540 --> 00:05:06.310
This is what we
present to the user

00:05:06.310 --> 00:05:08.050
when they manage
the permissions.

00:05:08.050 --> 00:05:12.760
So if the user grants you
the contacts permission,

00:05:12.760 --> 00:05:15.020
they under the hood grant
you all the permissions

00:05:15.020 --> 00:05:18.250
in the contacts group.

00:05:18.250 --> 00:05:21.480
All the permissions are runtime,
so there is no permission UI

00:05:21.480 --> 00:05:22.560
when you install the app.

00:05:22.560 --> 00:05:24.935
So if you go to the Play Store
and find your application,

00:05:24.935 --> 00:05:28.230
you see the Install
button, then click Install,

00:05:28.230 --> 00:05:30.370
and the installation
starts right away.

00:05:30.370 --> 00:05:32.710
You don't see any UI, any
dialogues for permissions,

00:05:32.710 --> 00:05:36.130
and you can open the app.

00:05:36.130 --> 00:05:37.850
When the application
needs permissions,

00:05:37.850 --> 00:05:40.250
it does present them at runtime.

00:05:40.250 --> 00:05:43.100
This is one example of
how the calendar app is

00:05:43.100 --> 00:05:46.290
asking for your contacts.

00:05:46.290 --> 00:05:47.920
The idea behind this
permission model

00:05:47.920 --> 00:05:49.680
is that the user has
more context for what

00:05:49.680 --> 00:05:51.540
the permission is needed
for, because you're

00:05:51.540 --> 00:05:55.660
trying to use a feature, you're
trying to use the camera,

00:05:55.660 --> 00:05:57.685
and when you try
to use the feature,

00:05:57.685 --> 00:05:59.310
it's asking for the
camera permissions.

00:05:59.310 --> 00:06:01.630
It's pretty obvious why
the permission is needed,

00:06:01.630 --> 00:06:05.895
and you have more contacts
and more informed choices.

00:06:05.895 --> 00:06:07.770
The other benefit of
the new permission model

00:06:07.770 --> 00:06:09.530
is that you can always
change your mind.

00:06:09.530 --> 00:06:12.250
You can say, hey, I granted
this app this permission,

00:06:12.250 --> 00:06:16.100
but I don't feel comfortable for
the app to use this permission.

00:06:16.100 --> 00:06:19.070
You can always go to
Settings and change that.

00:06:19.070 --> 00:06:23.139
Or you have access to
permissions by application,

00:06:23.139 --> 00:06:24.680
so now we can see
all the permissions

00:06:24.680 --> 00:06:26.000
that the Hangouts app is using.

00:06:30.580 --> 00:06:32.340
So which apps are
using this permission?

00:06:32.340 --> 00:06:35.300
For example, which apps
are using the camera

00:06:35.300 --> 00:06:37.890
permission on my device?

00:06:37.890 --> 00:06:39.380
You can control that.

00:06:45.230 --> 00:06:47.380
This is how modern
applications work.

00:06:47.380 --> 00:06:50.106
The application has to
be explicitly written

00:06:50.106 --> 00:06:51.480
to use the new
runtime permission

00:06:51.480 --> 00:06:55.310
model, which is probably 0.1% of
the applications from the Play

00:06:55.310 --> 00:06:56.430
Store.

00:06:56.430 --> 00:06:59.010
You're probably
asking yourself, what

00:06:59.010 --> 00:07:03.630
do I do for all the 99.9%
of the applications?

00:07:03.630 --> 00:07:04.929
How do they work?

00:07:04.929 --> 00:07:06.470
Because the way
they're written, they

00:07:06.470 --> 00:07:08.880
don't expect permissions
to be revoked on them.

00:07:08.880 --> 00:07:11.520
So if you revoke the
permission on an app,

00:07:11.520 --> 00:07:16.510
it will just blindly call the
API, and it will just crash.

00:07:16.510 --> 00:07:18.520
The way permissions
work for legacy apps

00:07:18.520 --> 00:07:20.030
is you go to the
Play Store again,

00:07:20.030 --> 00:07:22.460
you find the application,
you click the Install button,

00:07:22.460 --> 00:07:24.870
you see the familiar
permissions dialog,

00:07:24.870 --> 00:07:26.810
and again you have two options.

00:07:26.810 --> 00:07:30.462
You either accept all
permissions or you go back.

00:07:30.462 --> 00:07:32.920
The difference, though, is when
you install the application

00:07:32.920 --> 00:07:37.490
and accept all permissions,
now you can go to Settings,

00:07:37.490 --> 00:07:39.800
and you can manage permissions
for those applications,

00:07:39.800 --> 00:07:42.247
even though they don't support
the new runtime permission

00:07:42.247 --> 00:07:43.830
model.

00:07:43.830 --> 00:07:47.260
Then the question is, again,
you have the nine permission

00:07:47.260 --> 00:07:50.340
groups, so from this
point on, for you,

00:07:50.340 --> 00:07:53.550
the application is controlling
permissions for legacy

00:07:53.550 --> 00:07:55.360
and non-legacy apps is
absolutely the same.

00:07:55.360 --> 00:07:57.490
There is no difference.

00:07:57.490 --> 00:08:00.840
And then the question is
how did you guys do this?

00:08:00.840 --> 00:08:03.250
The way we do it is, instead
of revoking permissions

00:08:03.250 --> 00:08:06.590
for legacy applications,
we're just disabling the API.

00:08:06.590 --> 00:08:08.400
We're using a feature
called app-ops.

00:08:08.400 --> 00:08:10.920
Probably some of you
are familiar with it.

00:08:10.920 --> 00:08:12.990
And what we do is
literally-- for example,

00:08:12.990 --> 00:08:15.562
you revoke the
contacts permission.

00:08:15.562 --> 00:08:17.520
The application really
has contacts permission.

00:08:17.520 --> 00:08:19.186
We don't revoke the
permission, but what

00:08:19.186 --> 00:08:21.870
we do is, when the application
is asking for contacts,

00:08:21.870 --> 00:08:24.730
we say, sorry no
contacts on the device.

00:08:24.730 --> 00:08:27.920
So we're basically
making the APIs

00:08:27.920 --> 00:08:33.130
do nothing or return default
errors or empty data sets.

00:08:33.130 --> 00:08:35.564
It's case-dependent,
so we basically

00:08:35.564 --> 00:08:36.980
had to visit all
the APIs and just

00:08:36.980 --> 00:08:38.188
make them work appropriately.

00:08:42.370 --> 00:08:44.100
How do you ask for permission?

00:08:44.100 --> 00:08:46.984
Before I go into the nuts and
bolts of how to do it in code,

00:08:46.984 --> 00:08:49.400
I really want to cover the UX,
because it's really, really

00:08:49.400 --> 00:08:51.510
important to have a
consistent experience

00:08:51.510 --> 00:08:53.400
for all applications.

00:08:53.400 --> 00:08:55.150
It's good for the user,
it's good for you,

00:08:55.150 --> 00:08:58.580
It's good for the ecosystem,
it's good for everyone.

00:08:58.580 --> 00:09:00.630
You can imagine a
two-dimensional matrix.

00:09:00.630 --> 00:09:04.110
So in one dimension you have
how important this permission

00:09:04.110 --> 00:09:06.200
is for my application.

00:09:06.200 --> 00:09:10.100
Is it critical, or is
it an optional feature?

00:09:10.100 --> 00:09:12.660
So for example, if
I have a camera app,

00:09:12.660 --> 00:09:15.000
the camera permission
is critical for my app.

00:09:15.000 --> 00:09:17.330
It will not work if I don't
have the camera permission.

00:09:17.330 --> 00:09:19.560
However, location is
a different story.

00:09:19.560 --> 00:09:22.050
Maybe I have a
geotagging feature,

00:09:22.050 --> 00:09:25.000
but most users probably
don't understand

00:09:25.000 --> 00:09:27.999
how location is related to
photos, and in this case,

00:09:27.999 --> 00:09:30.040
I probably don't need this
permission right away.

00:09:30.040 --> 00:09:32.340
It's not critical for
my application to work.

00:09:32.340 --> 00:09:34.520
Also, it's about context.

00:09:34.520 --> 00:09:37.020
The other dimension of
this matrix is the context.

00:09:37.020 --> 00:09:41.260
So is it clear to the user
why you need the permission,

00:09:41.260 --> 00:09:42.180
or is it not clear?

00:09:42.180 --> 00:09:45.400
And based on that, I'll
cover all the cases

00:09:45.400 --> 00:09:49.750
and what the UX recommendation
is in each of use cases.

00:09:49.750 --> 00:09:51.840
So Case 1.

00:09:51.840 --> 00:09:53.600
Assume that it's a
critical permission

00:09:53.600 --> 00:09:56.750
that your application needs,
but it's not clear to the user

00:09:56.750 --> 00:09:58.780
why you need this permission.

00:09:58.780 --> 00:10:00.790
So that's a great
opportunity for you

00:10:00.790 --> 00:10:04.790
to have a warm welcome
screen, where you present

00:10:04.790 --> 00:10:06.630
the core features
for your application

00:10:06.630 --> 00:10:10.120
and how to use the application,
and you educate the user.

00:10:10.120 --> 00:10:11.780
In this context.

00:10:11.780 --> 00:10:14.845
it will be clear to the user
why this permission is needed,

00:10:14.845 --> 00:10:16.970
and at the end of this
flow, you can just literally

00:10:16.970 --> 00:10:18.940
request a permission,
and the user

00:10:18.940 --> 00:10:23.650
will not be wondering why you
need this permission at all.

00:10:23.650 --> 00:10:27.540
The second pattern
is asking up-front.

00:10:27.540 --> 00:10:30.405
If you have an application that
really needs this permission

00:10:30.405 --> 00:10:32.510
and it's very obvious--
the camera app

00:10:32.510 --> 00:10:33.990
is a perfect example.

00:10:33.990 --> 00:10:36.185
You have a camera, you
need the camera permission,

00:10:36.185 --> 00:10:37.950
and without the
camera permission,

00:10:37.950 --> 00:10:39.510
the application cannot work.

00:10:39.510 --> 00:10:41.079
So for the user
it's not a surprise

00:10:41.079 --> 00:10:42.620
if you ask for the
camera permission.

00:10:42.620 --> 00:10:44.120
They just downloaded
the camera app.

00:10:46.880 --> 00:10:50.400
The third case is for
secondary features

00:10:50.400 --> 00:10:53.470
where it's obvious why
you need this permission.

00:10:53.470 --> 00:10:56.220
For example, let's pick
the geotagging example

00:10:56.220 --> 00:11:00.520
that I gave you
a minute earlier.

00:11:00.520 --> 00:11:05.020
If I have a photo and I
select to geotag the photo,

00:11:05.020 --> 00:11:07.280
and I'm asked for a
location permission,

00:11:07.280 --> 00:11:08.330
I wouldn't be surprised.

00:11:08.330 --> 00:11:09.430
It's obvious to me.

00:11:09.430 --> 00:11:11.280
I can see in the
context that I know

00:11:11.280 --> 00:11:14.200
why this permission is needed.

00:11:14.200 --> 00:11:21.310
The fourth pattern is
educate in context.

00:11:21.310 --> 00:11:24.910
This is for cases where
it's a secondary feature

00:11:24.910 --> 00:11:27.960
for the application, and
it's unclear to the user.

00:11:27.960 --> 00:11:29.920
you really shouldn't
have features

00:11:29.920 --> 00:11:34.497
that fall into this
bucket, but in case you do,

00:11:34.497 --> 00:11:36.580
you can explain before you
request the permission.

00:11:36.580 --> 00:11:38.380
You can educate
the user on why you

00:11:38.380 --> 00:11:40.840
need this permission before
you ask for the permission.

00:11:40.840 --> 00:11:45.010
We even have a dedicated API,
which has this long name show

00:11:45.010 --> 00:11:49.380
request permission rationale,
that you can use as a hint

00:11:49.380 --> 00:11:51.303
whether to show a
permission rationale.

00:11:51.303 --> 00:11:55.071
I'll cover this in
detail a bit later.

00:11:55.071 --> 00:11:57.070
What I forgot to mention
that's really important

00:11:57.070 --> 00:11:59.780
is that when you ask for a
permission the very first time,

00:11:59.780 --> 00:12:03.240
the user does two options--
accept the permission

00:12:03.240 --> 00:12:04.590
or deny the permission.

00:12:04.590 --> 00:12:07.200
They do not have the option
to say don't ask me again.

00:12:07.200 --> 00:12:10.610
So the very first
time it's safe to ask.

00:12:10.610 --> 00:12:12.920
The second time,
the user says no,

00:12:12.920 --> 00:12:16.380
but the application keeps
asking for the same permission.

00:12:16.380 --> 00:12:20.384
Now the user has the option
to say don't ask me again.

00:12:20.384 --> 00:12:22.300
So the very first time
you save, that's a very

00:12:22.300 --> 00:12:25.713
important message-- just ask
for the permission up front.

00:12:30.040 --> 00:12:31.930
There is a fifth pattern
which I would say

00:12:31.930 --> 00:12:34.322
is more like an anti-pattern.

00:12:34.322 --> 00:12:36.030
I've been asked this
question many times,

00:12:36.030 --> 00:12:38.404
so that's why I decided to
bring it up to your attention.

00:12:38.404 --> 00:12:40.970
But to be honest,
from all the Google

00:12:40.970 --> 00:12:44.720
Apps that were seeing
this as a problem,

00:12:44.720 --> 00:12:47.430
nobody actually had to
implement this pattern,

00:12:47.430 --> 00:12:50.270
and there was another
way around that.

00:12:50.270 --> 00:12:52.010
That's the case where
you have a service,

00:12:52.010 --> 00:12:55.930
it runs in the background,
and you don't have UI,

00:12:55.930 --> 00:12:58.260
the user's not using the
UI of your application,

00:12:58.260 --> 00:12:59.610
and now you need a permission.

00:12:59.610 --> 00:13:02.150
So what do you do?

00:13:02.150 --> 00:13:05.246
We don't have APIs to request
permissions from services,

00:13:05.246 --> 00:13:06.870
and that's on purpose,
because we don't

00:13:06.870 --> 00:13:08.880
want to interrupt the user.

00:13:08.880 --> 00:13:12.310
So definitely, when the
user is using another app,

00:13:12.310 --> 00:13:14.570
you shouldn't throw
an activity in front

00:13:14.570 --> 00:13:16.510
of them asking for
the permission,

00:13:16.510 --> 00:13:18.960
because this is
disrupting the user flow.

00:13:18.960 --> 00:13:23.800
What you should do is first
avoid this if possible,

00:13:23.800 --> 00:13:26.040
and the other is just post
a notification and say,

00:13:26.040 --> 00:13:28.720
hey, this feature won't work.

00:13:28.720 --> 00:13:32.430
When the user has time, they
can open the notification.

00:13:32.430 --> 00:13:34.080
When they click on
the notification,

00:13:34.080 --> 00:13:36.430
you should bring
a full screen UI

00:13:36.430 --> 00:13:39.150
where you can explain
what feature needs

00:13:39.150 --> 00:13:41.790
this permission, what is
this permission used for,

00:13:41.790 --> 00:13:45.080
and let the user choose
whether they want to opt in,

00:13:45.080 --> 00:13:48.240
and at which point you can
request permission or opt out.

00:13:51.580 --> 00:13:54.080
So here are the
permissions APIs.

00:13:54.080 --> 00:13:55.940
There are just a few
APIs you need to learn.

00:13:55.940 --> 00:13:58.345
They're very, very simple.

00:13:58.345 --> 00:13:59.970
I really want to have
this message that

00:13:59.970 --> 00:14:03.000
is very, very, very simple
to use for permissions.

00:14:03.000 --> 00:14:06.750
The first API is very simple.

00:14:06.750 --> 00:14:09.560
Do I have this
permission, which means

00:14:09.560 --> 00:14:12.040
does my app have the
permission, not somebody who's

00:14:12.040 --> 00:14:14.280
calling for a remote process.

00:14:14.280 --> 00:14:17.030
The second API is to
request the permission.

00:14:17.030 --> 00:14:18.600
As you can see,
we have these APIs

00:14:18.600 --> 00:14:20.994
on Activity
[INAUDIBLE] Fragments.

00:14:20.994 --> 00:14:22.410
Once you request
a permission, you

00:14:22.410 --> 00:14:23.840
need an API,
because a permission

00:14:23.840 --> 00:14:25.400
request is asynchronous.

00:14:25.400 --> 00:14:28.410
This brings a UI, and the
user has to decide what to do.

00:14:28.410 --> 00:14:31.620
That's why you have this
call-back on permission result

00:14:31.620 --> 00:14:34.570
request on a request
permissions result where

00:14:34.570 --> 00:14:38.588
you need to handle the result
of what the user decided to do.

00:14:38.588 --> 00:14:41.890
The last two APIs are a little
non-obvious as to what they do.

00:14:41.890 --> 00:14:44.690
They should show
permission rationale.

00:14:44.690 --> 00:14:48.600
This API it has
very targeted use,

00:14:48.600 --> 00:14:51.850
and it's intended for--
so this returns true if

00:14:51.850 --> 00:14:55.180
and only if the user already
declined the permission once.

00:14:55.180 --> 00:15:00.470
You requested a permission, the
user saw the UI and said no.

00:15:00.470 --> 00:15:04.531
And now you can
use this API that's

00:15:04.531 --> 00:15:07.490
a hint whether--
maybe the user did not

00:15:07.490 --> 00:15:09.740
have enough context when
they requested the permission

00:15:09.740 --> 00:15:10.490
the previous time.

00:15:13.420 --> 00:15:16.460
So you can help the user and
show this additional education

00:15:16.460 --> 00:15:19.600
and additional screen to explain
why you need the permission.

00:15:19.600 --> 00:15:21.240
But again, this
is very optional,

00:15:21.240 --> 00:15:23.602
and this is only if you
feel that the user doesn't

00:15:23.602 --> 00:15:24.435
have enough context.

00:15:27.130 --> 00:15:29.820
We really think that most of the
time this shouldn't be needed,

00:15:29.820 --> 00:15:32.630
but in case you do, it's there.

00:15:32.630 --> 00:15:35.550
There is another case where
you can have device policy that

00:15:35.550 --> 00:15:40.220
says, no, this application
does not have this permission,

00:15:40.220 --> 00:15:42.790
and it cannot get it.

00:15:42.790 --> 00:15:46.605
The way to read this API, is
permission revoked by policy,

00:15:46.605 --> 00:15:50.824
is does the user have the power
to give me the permission?

00:15:50.824 --> 00:15:52.240
If The user doesn't
have the power

00:15:52.240 --> 00:15:55.010
to give you the permission,
you may not even

00:15:55.010 --> 00:15:59.030
expose the feature, or you
can explain to the user

00:15:59.030 --> 00:16:03.000
that the feature is not
developed because the policy

00:16:03.000 --> 00:16:05.750
doesn't allow this permission.

00:16:05.750 --> 00:16:08.440
Now that we have all
the building blocks,

00:16:08.440 --> 00:16:12.420
here is how we
put them together.

00:16:12.420 --> 00:16:14.739
It's really important
that the very first thing

00:16:14.739 --> 00:16:17.030
you need to do when you call
a permission-protected API

00:16:17.030 --> 00:16:19.570
is to always, always
first check whether you

00:16:19.570 --> 00:16:22.560
have the permission.

00:16:22.560 --> 00:16:26.000
If you have the permission,
just go ahead and do the work.

00:16:26.000 --> 00:16:27.890
If you don't have
the permission,

00:16:27.890 --> 00:16:31.450
now you can optionally check
should I show rationale,

00:16:31.450 --> 00:16:34.640
should I help the
user better understand

00:16:34.640 --> 00:16:37.320
why I need this permission,
because the user already

00:16:37.320 --> 00:16:39.720
declined the permission.

00:16:39.720 --> 00:16:43.060
Otherwise, you just go ahead
and request the permission.

00:16:43.060 --> 00:16:44.560
Once you request
the permission, you

00:16:44.560 --> 00:16:47.465
need to handle the result
based on what the user decided.

00:16:51.150 --> 00:16:53.810
This is what permission
result handling looks like.

00:16:53.810 --> 00:16:55.200
The first thing
you need to check

00:16:55.200 --> 00:16:58.950
is, is this the request I made,
like is this the answer I'm

00:16:58.950 --> 00:17:00.090
waiting for.

00:17:00.090 --> 00:17:02.280
If that's the case,
the next check

00:17:02.280 --> 00:17:04.680
is, is there information
in the answer,

00:17:04.680 --> 00:17:09.069
so are these arrays with
permissions and results empty.

00:17:09.069 --> 00:17:12.953
They're usually empty if
there is a cancellation.

00:17:12.953 --> 00:17:15.119
The next thing I check is,
did I get the permission.

00:17:15.119 --> 00:17:16.869
If you get the permission,
go do the work.

00:17:20.030 --> 00:17:21.819
So it's all great.

00:17:21.819 --> 00:17:23.150
How do you get on the boat?

00:17:23.150 --> 00:17:24.316
How do you get on the train?

00:17:24.316 --> 00:17:26.369
How do you opt in to a
new permission model?

00:17:26.369 --> 00:17:29.420
It's based on the target
SDK, so what you need to do

00:17:29.420 --> 00:17:33.540
is change your target SDK
to 23, and magically, you

00:17:33.540 --> 00:17:36.640
use the new API and you're
in the new permission model.

00:17:36.640 --> 00:17:39.300
It's important to note
that there is no way out.

00:17:39.300 --> 00:17:45.670
Once you get in, you cannot
go back to target SDK, say 22.

00:17:45.670 --> 00:17:48.950
This main reason for
that is that we really

00:17:48.950 --> 00:17:51.872
believe that runtime permissions
are really good for the user,

00:17:51.872 --> 00:17:53.330
they're really good
for developers,

00:17:53.330 --> 00:17:55.980
they're good for the
ecosystem, and we really

00:17:55.980 --> 00:18:01.640
want to incentivize everybody to
use this new permission model.

00:18:01.640 --> 00:18:03.350
We have these very
special cases which

00:18:03.350 --> 00:18:06.230
I want to point out,
very, very useful APIs.

00:18:06.230 --> 00:18:08.980
One of them is say
you have a new feature

00:18:08.980 --> 00:18:10.820
that you want to use.

00:18:10.820 --> 00:18:15.230
You want to add a camera feature
only for M devices and up.

00:18:15.230 --> 00:18:17.770
You don't want to request
a camera permission,

00:18:17.770 --> 00:18:21.340
because this can affect your
adoption on all the platforms.

00:18:21.340 --> 00:18:23.800
So what you can do is hey, I
want to use this permission,

00:18:23.800 --> 00:18:26.800
but only on platforms that
support runtime permissions.

00:18:26.800 --> 00:18:27.990
So use this permission.

00:18:27.990 --> 00:18:31.670
SDK 23 is your friend.

00:18:31.670 --> 00:18:33.850
We have another way of
requesting permissions up

00:18:33.850 --> 00:18:34.720
to a given SDK.

00:18:34.720 --> 00:18:39.320
So you say, I want this
permission up to L. The way

00:18:39.320 --> 00:18:43.000
you do it is you specify max
SDK version in the user's

00:18:43.000 --> 00:18:45.810
permission API,
in your manifest.

00:18:48.820 --> 00:18:51.530
Upgrades-- what it
the upgrading story?

00:18:51.530 --> 00:18:55.460
Permissions are grandfathered,
so if you have an L app on an L

00:18:55.460 --> 00:18:57.360
device, you have
all the permissions,

00:18:57.360 --> 00:18:59.620
and if the device
gets updated to M,

00:18:59.620 --> 00:19:01.680
your application still
has all the permissions,

00:19:01.680 --> 00:19:03.888
with the caveat that the
user can go ahead and revoke

00:19:03.888 --> 00:19:06.230
the permissions.

00:19:06.230 --> 00:19:10.650
If you upgrade your application
from target SDK 22 to 23

00:19:10.650 --> 00:19:12.380
to opt into the new
permission model,

00:19:12.380 --> 00:19:15.430
you still keep your permissions.

00:19:15.430 --> 00:19:16.850
Also revoke permissions.

00:19:16.850 --> 00:19:20.210
If I install a legacy
app targeting L SDK,

00:19:20.210 --> 00:19:23.170
and if I revoke some
permissions as a user, when

00:19:23.170 --> 00:19:25.400
I get the update,
the same permissions

00:19:25.400 --> 00:19:28.925
are still revoked until I go
ahead and run them explicitly.

00:19:33.160 --> 00:19:34.565
We support library APIs.

00:19:34.565 --> 00:19:37.340
I will not go into details,
but the message here

00:19:37.340 --> 00:19:41.480
is for all the APIs
that you saw in the SDK,

00:19:41.480 --> 00:19:44.220
there are corresponding APis
in the Support v4 library,

00:19:44.220 --> 00:19:47.150
so you can use permissions
from the support library.

00:19:47.150 --> 00:19:50.870
We also have APIs in
Support library v13

00:19:50.870 --> 00:19:55.382
if you don't want
to go back to v4.

00:19:55.382 --> 00:19:57.340
And this is kind of an
edge case which I really

00:19:57.340 --> 00:20:00.660
wanted to point out for
proxying permissions.

00:20:00.660 --> 00:20:02.850
This is again a very edge case.

00:20:02.850 --> 00:20:05.640
Usually this happens
when I have an app that

00:20:05.640 --> 00:20:10.150
has access to contacts,
and I decorate contacts,

00:20:10.150 --> 00:20:12.810
for every contact, I'm adding
a Smiley face, for example.

00:20:17.029 --> 00:20:19.070
I have the contacts
permission, and I have access

00:20:19.070 --> 00:20:21.890
to all the contacts, but if an
app is asking me, hey, give me

00:20:21.890 --> 00:20:24.382
the Smiley face contact,
I need to verify

00:20:24.382 --> 00:20:26.090
whether this application
has the contacts

00:20:26.090 --> 00:20:27.890
permission in first
place, because I don't

00:20:27.890 --> 00:20:30.181
want to be leaking the contacts
permission without user

00:20:30.181 --> 00:20:31.696
approval.

00:20:31.696 --> 00:20:33.820
It's really important to
use the permission-checker

00:20:33.820 --> 00:20:35.890
from the v4 Support
library to do this,

00:20:35.890 --> 00:20:38.500
because it checks not
only the permission,

00:20:38.500 --> 00:20:42.150
but it also checks whether
the APIs are enabled.

00:20:42.150 --> 00:20:44.100
If you remember, for
legacy applications

00:20:44.100 --> 00:20:47.320
we don't revoke permissions,
we disable the APIs.

00:20:47.320 --> 00:20:50.410
So the permission checker knows
how to check the permission

00:20:50.410 --> 00:20:52.297
and whether the APIs
are disabled by checking

00:20:52.297 --> 00:20:53.380
the corresponding app-ops.

00:20:56.580 --> 00:20:59.170
There are some command line
tools that are very useful.

00:20:59.170 --> 00:21:02.454
One of them is adb
shell pm grant/revoke.

00:21:02.454 --> 00:21:04.870
You can use this to grant or
revoke permissions to an app.

00:21:04.870 --> 00:21:06.550
During development
this is very useful.

00:21:06.550 --> 00:21:09.214
Instead of having to manually
approve the permission

00:21:09.214 --> 00:21:11.630
every time, you can literally
grant and revoke permissions

00:21:11.630 --> 00:21:12.950
from the command line.

00:21:12.950 --> 00:21:15.060
Another thing that's very
useful for a developer

00:21:15.060 --> 00:21:17.190
is if you want to
install the application

00:21:17.190 --> 00:21:19.110
with all permissions
granted, you

00:21:19.110 --> 00:21:22.510
use the familiar adb install
with the dash g, which

00:21:22.510 --> 00:21:24.820
means grant all
permissions, specify

00:21:24.820 --> 00:21:30.350
the package and the APK, and
all permissions are granted.

00:21:30.350 --> 00:21:35.390
Sometimes it's useful to dump
the state for your application.

00:21:35.390 --> 00:21:37.590
Adb shell dumps the
package, and then

00:21:37.590 --> 00:21:40.124
the package name dumps
the state of your package

00:21:40.124 --> 00:21:42.665
in the PackageManager, and it
also lists all the permissions.

00:21:46.300 --> 00:21:48.610
We also have some
device policy APIs.

00:21:48.610 --> 00:21:51.600
This is very for people who
write device policy, which

00:21:51.600 --> 00:21:55.880
is fairly rare, but there
is a way for you to specify,

00:21:55.880 --> 00:21:59.520
hey, this permission for
this app is always granted

00:21:59.520 --> 00:22:01.160
or it's always denied.

00:22:01.160 --> 00:22:04.360
Or you can say, hey, for
every subsequent request,

00:22:04.360 --> 00:22:06.700
I want permissions to
be automatically denied

00:22:06.700 --> 00:22:07.825
or automatically approved.

00:22:11.650 --> 00:22:13.470
Some dos and don'ts.

00:22:13.470 --> 00:22:17.670
Please never code around
permission groups.

00:22:17.670 --> 00:22:22.520
Don't assume that if you have
one permission in one group,

00:22:22.520 --> 00:22:25.150
you have the other
permissions in the same group.

00:22:25.150 --> 00:22:28.120
We reserve the right-- because
at the application level,

00:22:28.120 --> 00:22:31.190
you operate in that the role
individual permission level.

00:22:31.190 --> 00:22:34.580
And the user controls the
permissions at the group level.

00:22:34.580 --> 00:22:36.730
So it's a simplification
for the user.

00:22:36.730 --> 00:22:40.110
But please don't assume
any grouping behavior.

00:22:40.110 --> 00:22:44.020
We want to reserve the right to
add new permission groups, move

00:22:44.020 --> 00:22:46.070
permissions between groups.

00:22:46.070 --> 00:22:48.190
I'm not saying we will
do it, but it's just

00:22:48.190 --> 00:22:50.650
for the flexibility
of the platform.

00:22:50.650 --> 00:22:52.380
Also avoid screening questions.

00:22:52.380 --> 00:22:54.500
Hey, if I ask you
for this permission,

00:22:54.500 --> 00:22:57.165
are you going to give
me this permission?

00:22:57.165 --> 00:22:59.540
We want you to ask up front,
because the first time there

00:22:59.540 --> 00:23:00.630
is no penalty.

00:23:00.630 --> 00:23:02.660
There is no don't ask
again option for the user

00:23:02.660 --> 00:23:05.270
if you ask for the
very first time.

00:23:05.270 --> 00:23:06.865
Also follow the UX patterns.

00:23:06.865 --> 00:23:08.990
It's really important that
all the applications are

00:23:08.990 --> 00:23:11.240
consistent, it's good for
users, it's good for you,

00:23:11.240 --> 00:23:14.290
it's good for everybody.

00:23:14.290 --> 00:23:17.070
I want to stress again check
before you call an API that

00:23:17.070 --> 00:23:20.210
is protected by a permission.

00:23:20.210 --> 00:23:22.070
Don't assume that you
have the permission,

00:23:22.070 --> 00:23:24.390
or don't rely on
some previous checks.

00:23:27.330 --> 00:23:30.440
And this applies for any API,
it's not only for permissions.

00:23:30.440 --> 00:23:32.370
But don't infer
undocumented behavior,

00:23:32.370 --> 00:23:34.180
don't rely on
undocumented behavior,

00:23:34.180 --> 00:23:36.740
because we may
accidentally change that,

00:23:36.740 --> 00:23:38.932
and we may accidentally
break your applications.

00:23:38.932 --> 00:23:41.140
We are trying really hard
to be backwards-compatible,

00:23:41.140 --> 00:23:44.694
but sometimes it's hard.

00:23:44.694 --> 00:23:46.110
And probably we
have the question,

00:23:46.110 --> 00:23:48.650
how do I know which APIs are
protected by permissions, which

00:23:48.650 --> 00:23:50.550
is an interesting question.

00:23:50.550 --> 00:23:53.240
It was never documented.

00:23:53.240 --> 00:23:55.095
You can use Android
Studio, actually.

00:23:55.095 --> 00:23:56.830
Android Studio is
flagging if you

00:23:56.830 --> 00:23:59.320
call an API without
checking for permission.

00:23:59.320 --> 00:24:04.430
With this asterisk that not all
APIs are probably annotated,

00:24:04.430 --> 00:24:06.310
we have this special
annotation on the API

00:24:06.310 --> 00:24:08.380
which permissions
are guarding it.

00:24:08.380 --> 00:24:13.470
So in some cases, it may have
some misses, but we're trying

00:24:13.470 --> 00:24:16.100
to get it better and better.

00:24:16.100 --> 00:24:19.120
So with that, I'm
tossing over to Jeff

00:24:19.120 --> 00:24:23.626
to talk about how not
to use permissions.

00:24:23.626 --> 00:24:25.250
JEFF SHARKEY: Sven
just explained to us

00:24:25.250 --> 00:24:26.960
the new runtime
permissions model

00:24:26.960 --> 00:24:29.880
in M, how things changed
and evolved there,

00:24:29.880 --> 00:24:31.440
and these powerful
new permission

00:24:31.440 --> 00:24:33.930
groups that we have that
you can request from users.

00:24:33.930 --> 00:24:36.471
But I'm going to shift gears
and talk about how you as an app

00:24:36.471 --> 00:24:38.580
developer can actually
ask the user for fewer

00:24:38.580 --> 00:24:40.880
permissions over time.

00:24:40.880 --> 00:24:43.550
So as an example, again, we have
these permission categories.

00:24:43.550 --> 00:24:45.560
There are nice and
shiny, but some of them

00:24:45.560 --> 00:24:48.710
can be pretty broad and scary.

00:24:48.710 --> 00:24:51.290
You as a developer
are asking the user

00:24:51.290 --> 00:24:54.000
to give you access to
all of their contacts,

00:24:54.000 --> 00:24:56.600
to all of the files that
they have on their SD card,

00:24:56.600 --> 00:24:59.980
including all the photos that
they've taken in the past.

00:24:59.980 --> 00:25:02.510
Some of these permissions
may make sense for your app.

00:25:02.510 --> 00:25:04.820
Again, if you're
building that camera app,

00:25:04.820 --> 00:25:07.640
you need access to the camera
permission to make that happen.

00:25:07.640 --> 00:25:10.325
But other times you may be
asking for more than you need.

00:25:10.325 --> 00:25:11.700
So that's what
we're going to do.

00:25:11.700 --> 00:25:12.620
We're going to go
through a couple

00:25:12.620 --> 00:25:13.997
of these common categories.

00:25:13.997 --> 00:25:16.080
We're going to look at use
cases, common use cases

00:25:16.080 --> 00:25:17.730
that you as an app
developer may have,

00:25:17.730 --> 00:25:20.440
and we're going to look
at ways to still build

00:25:20.440 --> 00:25:23.140
those parts of your
application without requesting

00:25:23.140 --> 00:25:26.520
the big, broad,
scary permissions.

00:25:26.520 --> 00:25:28.950
So the first one we'll
dig into is storage.

00:25:28.950 --> 00:25:30.572
You'll probably
recognize this as read

00:25:30.572 --> 00:25:33.030
or write external storage if
you've added these permissions

00:25:33.030 --> 00:25:34.420
to your manifest.

00:25:34.420 --> 00:25:36.310
And when you ask the
user for this permission

00:25:36.310 --> 00:25:38.260
and they grant it,
the user is giving you

00:25:38.260 --> 00:25:40.660
access to all of the
files on their card.

00:25:40.660 --> 00:25:43.760
Even if you as an app
developer are not interested,

00:25:43.760 --> 00:25:47.140
you're still requesting and
getting access to all of that.

00:25:47.140 --> 00:25:48.930
Some common use
cases as a developer

00:25:48.930 --> 00:25:51.390
is you might just be
looking for a place

00:25:51.390 --> 00:25:53.170
to store additional data.

00:25:53.170 --> 00:25:54.350
You're trying to be helpful.

00:25:54.350 --> 00:25:55.850
You don't want to
take up the user's

00:25:55.850 --> 00:25:57.980
valuable internal storage space.

00:25:57.980 --> 00:26:00.520
You want to put that content
out on an SD card, maybe

00:26:00.520 --> 00:26:04.610
a 33- or 64-gig card
that the user's inserted.

00:26:04.610 --> 00:26:07.150
A second use case is maybe
you want the user to pick

00:26:07.150 --> 00:26:08.792
individual files to work with.

00:26:08.792 --> 00:26:10.250
If you're a photo
editor app, maybe

00:26:10.250 --> 00:26:12.760
just want to open
the one or two files

00:26:12.760 --> 00:26:14.260
that you want the
user to work with,

00:26:14.260 --> 00:26:18.360
and you're not interested
in all those other details.

00:26:18.360 --> 00:26:20.140
So let's dig into the details.

00:26:20.140 --> 00:26:22.640
For that first example,
there are a handful of APis

00:26:22.640 --> 00:26:25.520
that were introduced
in KitKat on context,

00:26:25.520 --> 00:26:30.350
called getExternalFileDirs,
CachdDirs, and MediaDirs.

00:26:30.350 --> 00:26:33.210
When you call these, the
paths that are returned

00:26:33.210 --> 00:26:36.750
exist on the SD card, but
they have your package name

00:26:36.750 --> 00:26:37.695
burned into them.

00:26:37.695 --> 00:26:39.070
So if you look at
the bottom, you

00:26:39.070 --> 00:26:42.530
can see the example of what
those returned paths look like.

00:26:42.530 --> 00:26:47.050
Notice it would be under the SD
card/Android/data/your package

00:26:47.050 --> 00:26:47.640
name.

00:26:47.640 --> 00:26:49.140
There are a couple
reasons for that.

00:26:49.140 --> 00:26:52.980
First of all, that's how the
system recognizes who that data

00:26:52.980 --> 00:26:56.810
belongs to, so that it can
give you access to that data.

00:26:56.810 --> 00:26:59.270
The paths that are
returned from these APIs--

00:26:59.270 --> 00:27:01.870
your application always
has read and write

00:27:01.870 --> 00:27:04.630
access to any contents
under those directories.

00:27:04.630 --> 00:27:07.120
You're free to create new
directories and new files

00:27:07.120 --> 00:27:09.440
at any time, and there
are no permissions

00:27:09.440 --> 00:27:11.330
required to do that.

00:27:11.330 --> 00:27:15.655
You don't need to request those
read or write permissions.

00:27:15.655 --> 00:27:17.780
They still work even if
you have those permissions,

00:27:17.780 --> 00:27:19.750
but you don't need
to request them.

00:27:19.750 --> 00:27:22.990
The other benefit here is that
there's better accountability.

00:27:22.990 --> 00:27:26.030
As the user goes to
uninstall your application,

00:27:26.030 --> 00:27:28.500
the system will automatically
clean up any files

00:27:28.500 --> 00:27:31.130
that you've chosen to
store in those locations.

00:27:31.130 --> 00:27:33.330
In addition, if the
user goes into Settings

00:27:33.330 --> 00:27:35.840
to see where their disk
space is being used,

00:27:35.840 --> 00:27:38.610
it will be accounted against
your application correctly.

00:27:38.610 --> 00:27:41.670
So it's better for a lot
of different reasons.

00:27:41.670 --> 00:27:43.530
The next example
that we talked about

00:27:43.530 --> 00:27:46.240
was just looking to pick
an individual file or work

00:27:46.240 --> 00:27:48.085
with a handful of files.

00:27:48.085 --> 00:27:49.710
This is where I'd
like to take a second

00:27:49.710 --> 00:27:52.230
to talk about the
Storage Access Framework.

00:27:52.230 --> 00:27:54.360
This is something that
we built in KitKat,

00:27:54.360 --> 00:27:57.190
and it's really an
abstraction layer between apps

00:27:57.190 --> 00:28:01.590
that offer to store files
or data, say like an SD card

00:28:01.590 --> 00:28:04.110
or a Google Drive in
the cloud, and apps

00:28:04.110 --> 00:28:06.500
that offer to work
with content or files,

00:28:06.500 --> 00:28:10.910
say a document editor
or a photo editor.

00:28:10.910 --> 00:28:12.850
In this case, instead
of asking the user

00:28:12.850 --> 00:28:14.800
for those broad
permissions, asking

00:28:14.800 --> 00:28:16.800
for all of the files
on their SD card

00:28:16.800 --> 00:28:19.360
or all of the contents
of their Google Drive,

00:28:19.360 --> 00:28:21.380
you as an app developer
are able to launch

00:28:21.380 --> 00:28:24.290
a handful of common intents
that go into the Storage Access

00:28:24.290 --> 00:28:27.920
Framework, and ask the data
what files would the user like

00:28:27.920 --> 00:28:28.700
to work with.

00:28:28.700 --> 00:28:30.280
They're given that
freedom to choose

00:28:30.280 --> 00:28:32.759
which things they want to
return an access to your app.

00:28:32.759 --> 00:28:34.550
The handful of intents
that are interesting

00:28:34.550 --> 00:28:38.210
here are Open Document, Create
Document, and Get Content.

00:28:38.210 --> 00:28:41.240
You can think of those
essentially like an open file

00:28:41.240 --> 00:28:44.210
dialog box save file and
more of like an attached

00:28:44.210 --> 00:28:46.937
file, if you're building
like an email application.

00:28:46.937 --> 00:28:49.020
And will dig into it in a
moment, and a little bit

00:28:49.020 --> 00:28:50.920
about how that works
under the hood.

00:28:50.920 --> 00:28:53.610
Another thing to mention
is in Marshmallow,

00:28:53.610 --> 00:28:57.310
we added access to USB
OTG, or On-The-Go devices.

00:28:57.310 --> 00:28:59.290
So if you have a USB
flash drive that you've

00:28:59.290 --> 00:29:01.820
plugged into your
device, those are now

00:29:01.820 --> 00:29:03.990
available through the
Storage Access Framework.

00:29:03.990 --> 00:29:06.960
So you as an app developer, if
you were using these intents,

00:29:06.960 --> 00:29:09.510
you didn't have to add any
additional code to start

00:29:09.510 --> 00:29:10.860
working with those devices.

00:29:10.860 --> 00:29:12.180
They automatically appeared.

00:29:12.180 --> 00:29:15.490
And that's true of a
cloud storage provider

00:29:15.490 --> 00:29:17.014
or any other storage medium.

00:29:17.014 --> 00:29:19.180
If they participate in the
Storage Access Framework,

00:29:19.180 --> 00:29:20.638
there's no additional
work that you

00:29:20.638 --> 00:29:23.310
need to do as an app
developer, and it gives users

00:29:23.310 --> 00:29:26.429
more freedom and flexibility.

00:29:26.429 --> 00:29:28.720
Then you might ask the
question, how does this-- here's

00:29:28.720 --> 00:29:29.594
an example, actually.

00:29:29.594 --> 00:29:31.340
We'll take a look at
just some of that UI

00:29:31.340 --> 00:29:32.880
around that experience.

00:29:32.880 --> 00:29:35.850
These are those three intents,
Open Document, Create Document,

00:29:35.850 --> 00:29:37.740
and Get Content.

00:29:37.740 --> 00:29:40.650
One thing to point out here
is that we're giving users

00:29:40.650 --> 00:29:44.110
a consistent experience when
they go to pick these files.

00:29:44.110 --> 00:29:46.610
You could build your
own UI for navigating

00:29:46.610 --> 00:29:49.310
the contents of the SD
card, but as the user comes

00:29:49.310 --> 00:29:50.810
into your app,
they're going to have

00:29:50.810 --> 00:29:53.170
to understand how you've
chosen to represent some

00:29:53.170 --> 00:29:55.040
of those concepts,
and it'll be slightly

00:29:55.040 --> 00:29:56.790
different from every
other time they've

00:29:56.790 --> 00:29:58.334
encountered that before.

00:29:58.334 --> 00:29:59.750
But by using these
common intents,

00:29:59.750 --> 00:30:02.390
we're giving a UI that
the user has probably

00:30:02.390 --> 00:30:04.390
seen a couple of other
times on the platform.

00:30:04.390 --> 00:30:06.934
They're already familiar
with how to navigate and use,

00:30:06.934 --> 00:30:09.350
to navigate and pick the files
that they're interested in,

00:30:09.350 --> 00:30:10.850
and this is beneficial
for the user,

00:30:10.850 --> 00:30:13.020
because they can get the
task that they want to do--

00:30:13.020 --> 00:30:14.540
they can get that done faster.

00:30:14.540 --> 00:30:19.560
They understand how to
interact with this framework.

00:30:19.560 --> 00:30:21.890
Now let's dig a little
bit deeper under the hood.

00:30:21.890 --> 00:30:24.360
How does Storage Access
Framework actually work?

00:30:24.360 --> 00:30:28.440
I'll talk a little bit
about URI permission grants.

00:30:28.440 --> 00:30:30.360
All of the stuff we
talked about earlier today

00:30:30.360 --> 00:30:33.122
is focusing on traditional
Android permissions, which

00:30:33.122 --> 00:30:34.871
are a string, like
android.permission.READ

00:30:34.871 --> 00:30:35.579
EXTERNAL STORAGE.

00:30:37.670 --> 00:30:40.250
That's something that your
app requests in your manifest,

00:30:40.250 --> 00:30:41.830
and when the user
grants that access,

00:30:41.830 --> 00:30:44.850
you're granted that for the rest
of the lifetime of your app,

00:30:44.850 --> 00:30:46.450
either until the
user uninstalls you,

00:30:46.450 --> 00:30:48.440
or until the user
goes into Settings

00:30:48.440 --> 00:30:50.670
and revokes that permission.

00:30:50.670 --> 00:30:52.590
URI permission
grants are slightly

00:30:52.590 --> 00:30:54.180
different in that
they're centered

00:30:54.180 --> 00:30:55.930
around content providers.

00:30:55.930 --> 00:30:59.170
So a content provider surfaces
its content on the system

00:30:59.170 --> 00:31:02.800
through a URI, a
content://, an authority,

00:31:02.800 --> 00:31:04.370
and then a path name.

00:31:04.370 --> 00:31:06.960
And the power here
with URI permissions

00:31:06.960 --> 00:31:10.560
is that we can grant access
to a very specific path

00:31:10.560 --> 00:31:14.250
inside of a content provider
for a limited amount of time.

00:31:14.250 --> 00:31:16.940
So, for example, if I just
took a photo in my app

00:31:16.940 --> 00:31:18.930
and I want to share
it with someone else,

00:31:18.930 --> 00:31:21.990
I can extend access
to just that photo

00:31:21.990 --> 00:31:24.450
that I just took to the
receiving app at the other end,

00:31:24.450 --> 00:31:26.140
temporarily.

00:31:26.140 --> 00:31:28.930
The lifetime of that permission
is until that activity

00:31:28.930 --> 00:31:30.284
stack finishes.

00:31:30.284 --> 00:31:31.700
So I extend them
access, maybe I'm

00:31:31.700 --> 00:31:34.034
sharing it as part of a social
network, they get access,

00:31:34.034 --> 00:31:36.491
they can see the data that they
need to get their job done,

00:31:36.491 --> 00:31:38.630
and as soon as the user
leaves that activity stack,

00:31:38.630 --> 00:31:40.110
the permission is revoked.

00:31:40.110 --> 00:31:42.400
So they only have access to
the data that they needed

00:31:42.400 --> 00:31:45.406
and for a very limited time.

00:31:45.406 --> 00:31:46.780
You might be asking
the question,

00:31:46.780 --> 00:31:49.530
how do I wire this
up inside my app?

00:31:49.530 --> 00:31:52.090
And one of the easiest ways
to do that is using a class

00:31:52.090 --> 00:31:54.570
called FileProvider in
the Support library.

00:31:54.570 --> 00:31:56.880
That allows you as a
developer to easily convert.

00:31:56.880 --> 00:31:59.890
If you have a file on
disk, you can convert it

00:31:59.890 --> 00:32:02.200
into one of these content
URIs that then you

00:32:02.200 --> 00:32:04.390
can stick into just
a traditional intent

00:32:04.390 --> 00:32:06.280
that you might already
be using today.

00:32:06.280 --> 00:32:08.320
In this case there is
an Intent.ACTION_SEND,

00:32:08.320 --> 00:32:12.410
send and instead of
using a file URI,

00:32:12.410 --> 00:32:15.040
we're sending a content
URI to the other side,

00:32:15.040 --> 00:32:17.740
and that's what allows us to
use that additional flag there,

00:32:17.740 --> 00:32:19.323
Intent.FLAG GRANT
READ URI PERMISSION.

00:32:20.810 --> 00:32:23.900
This is you as an app developer
communicating to the system

00:32:23.900 --> 00:32:27.180
that you want to extend
temporary access to that URI

00:32:27.180 --> 00:32:29.502
to whoever receives
it at the other end.

00:32:29.502 --> 00:32:30.960
One of the reasons
this is becoming

00:32:30.960 --> 00:32:34.230
more important in Marshmallow
is that you may not

00:32:34.230 --> 00:32:36.220
know-- whoever's at the
receiving end may not

00:32:36.220 --> 00:32:38.140
have that storage
permission, or they may not

00:32:38.140 --> 00:32:40.870
have the permissions to
access that content outright.

00:32:40.870 --> 00:32:43.010
So this is your way of
making sure that whoever's

00:32:43.010 --> 00:32:45.093
at the receiving end has
the permissions that they

00:32:45.093 --> 00:32:48.370
need to access the
content under the hood.

00:32:48.370 --> 00:32:51.460
So in summary, even if
you're using file URIs,

00:32:51.460 --> 00:32:53.834
you'll want to look at
transitioing them, even in M,

00:32:53.834 --> 00:32:56.250
more towards using these content
URIs because of the power

00:32:56.250 --> 00:32:57.529
that comes from them.

00:32:57.529 --> 00:32:59.070
And there's a
StrictMode API that you

00:32:59.070 --> 00:33:01.490
can use to help track
down in your application

00:33:01.490 --> 00:33:04.089
if there are places where you
might still be using file URIs.

00:33:04.089 --> 00:33:06.255
You can turn on that
StrictMode, and it will log it,

00:33:06.255 --> 00:33:08.713
and you can quickly figure out
if there are any places that

00:33:08.713 --> 00:33:10.360
are still lingering around.

00:33:10.360 --> 00:33:12.080
All right, so we've
talked about storage.

00:33:12.080 --> 00:33:13.430
Let's go into another category.

00:33:13.430 --> 00:33:14.914
Let's talk about Phone.

00:33:14.914 --> 00:33:17.080
A couple of permissions
that fall into that category

00:33:17.080 --> 00:33:19.589
are READ_PHONE_STATE
and CALL_PHONE.

00:33:19.589 --> 00:33:21.880
These are pretty powerful
too, when you think about it.

00:33:21.880 --> 00:33:24.650
They give you access to see
the user's phone number,

00:33:24.650 --> 00:33:28.100
to see their IMEI, to read the
current state of the phone,

00:33:28.100 --> 00:33:29.680
are they in a phone call or not.

00:33:29.680 --> 00:33:33.640
In reality, you may have
a couple common use cases,

00:33:33.640 --> 00:33:35.750
like, for example, you're
just interested in using

00:33:35.750 --> 00:33:38.860
the IMEI as a unique identifier,
to be able to figure out

00:33:38.860 --> 00:33:40.514
which device is this.

00:33:40.514 --> 00:33:42.180
Or you may just want
to initiate a phone

00:33:42.180 --> 00:33:43.888
call, to start a call
to a specific phone

00:33:43.888 --> 00:33:45.520
number for the user.

00:33:45.520 --> 00:33:48.460
Let's look at that first
example, and I'll say,

00:33:48.460 --> 00:33:53.250
don't use IMEI as a unique
identifier on the device.

00:33:53.250 --> 00:33:56.180
The reality is not all
devices have a telephone stack

00:33:56.180 --> 00:33:57.490
in the first place.

00:33:57.490 --> 00:33:59.930
Most tablets out
there, for example.

00:33:59.930 --> 00:34:01.500
If you need some
sort of identifier,

00:34:01.500 --> 00:34:03.120
you can always
build one yourself.

00:34:03.120 --> 00:34:05.280
You can use, like,
java.util.UUID

00:34:05.280 --> 00:34:07.390
and Persistent locally
in your app data storage,

00:34:07.390 --> 00:34:09.219
and then communicate
that with your server

00:34:09.219 --> 00:34:11.370
when you are
interacting with it.

00:34:11.370 --> 00:34:14.340
Another alternative
is the Instance ID

00:34:14.340 --> 00:34:16.830
that's provided through
Google Play services.

00:34:16.830 --> 00:34:17.639
That's also useful.

00:34:17.639 --> 00:34:19.730
It provides a unique
identifier that then you

00:34:19.730 --> 00:34:21.920
would use if you're
integrating with Google Cloud

00:34:21.920 --> 00:34:24.422
Messaging, for example.

00:34:24.422 --> 00:34:26.880
Second of all, if you're looking
for that unique identifier

00:34:26.880 --> 00:34:28.370
for managing app
licenses, there's

00:34:28.370 --> 00:34:30.820
also a solution in Play.

00:34:30.820 --> 00:34:33.659
The Play Licensing is another
alternative to look at there.

00:34:33.659 --> 00:34:36.239
So the takeaway is
please don't use IMEI,

00:34:36.239 --> 00:34:40.120
because it's not really as
useful as you think it is.

00:34:40.120 --> 00:34:42.260
For that second example
of making a phone call,

00:34:42.260 --> 00:34:44.400
there's are two intents
here that are interesting.

00:34:44.400 --> 00:34:46.370
There's a slight
nuance between the two.

00:34:46.370 --> 00:34:49.260
There's ACTION_CALL
and ACTION_DIAL.

00:34:49.260 --> 00:34:51.050
When you send an
ACTION_CALL call intent,

00:34:51.050 --> 00:34:52.966
you're actually taking
the phone off the hook,

00:34:52.966 --> 00:34:56.429
dialing the number, and it
starts ringing for the user.

00:34:56.429 --> 00:34:58.046
They'll hear the
actually ringing

00:34:58.046 --> 00:35:00.510
as it initiates the phone call.

00:35:00.510 --> 00:35:03.840
ACTION_DIAL, on the other hand,
simply launches the dialer

00:35:03.840 --> 00:35:06.530
activity, the UI, and
inserts the number.

00:35:06.530 --> 00:35:09.060
It types the number in, the
phone number you want to call,

00:35:09.060 --> 00:35:10.616
but it doesn't
actually initiate it.

00:35:10.616 --> 00:35:12.240
It waits for the user
to click a button

00:35:12.240 --> 00:35:13.656
to confirm that
they actually want

00:35:13.656 --> 00:35:15.752
to initiate that phone call.

00:35:15.752 --> 00:35:17.210
The difference
between those two is

00:35:17.210 --> 00:35:21.530
that the ACTION_CALL requires
the CALL_PHONE permission.

00:35:21.530 --> 00:35:24.180
If you use ACTION_DIAL, you'll
get that same functionality.

00:35:24.180 --> 00:35:25.555
You're helping
the user short-cut

00:35:25.555 --> 00:35:28.406
into making that phone call
that you know they to make,

00:35:28.406 --> 00:35:30.030
but without requesting
that permission.

00:35:30.030 --> 00:35:32.321
When you think about it, that
flow is a little awkward.

00:35:32.321 --> 00:35:34.872
You're asking them for the
phone permission allow,

00:35:34.872 --> 00:35:37.080
and then you're immediately
launching the phone call.

00:35:37.080 --> 00:35:38.920
You think about using
ACTION_DIAL instead.

00:35:38.920 --> 00:35:40.586
You launch them into
that familiar flow,

00:35:40.586 --> 00:35:42.800
they click the Call button,
and they're on their way.

00:35:42.800 --> 00:35:45.750
Here's just a quick example
of building up that tel:URI

00:35:45.750 --> 00:35:48.030
and setting ACTION_DIAL.

00:35:48.030 --> 00:35:50.740
Let's talk about the
Camera/Mic permissions.

00:35:50.740 --> 00:35:53.250
When you request these,
you're requesting full access

00:35:53.250 --> 00:35:55.540
to the camera and
microphone from now

00:35:55.540 --> 00:35:58.200
on, when in reality
maybe you're just

00:35:58.200 --> 00:36:01.220
interested in taking a photo
or a small video for the user

00:36:01.220 --> 00:36:03.180
just for this moment
in time-- maybe,

00:36:03.180 --> 00:36:04.650
for example, a
picture of a check

00:36:04.650 --> 00:36:07.610
that the user just wrote
that they want to cash.

00:36:07.610 --> 00:36:11.280
So it's really just some of
the common one-off use cases,

00:36:11.280 --> 00:36:13.620
and you may not need that
permission all the time

00:36:13.620 --> 00:36:14.562
going into the future.

00:36:14.562 --> 00:36:17.020
And there are some nice intents
that can help you out here.

00:36:17.020 --> 00:36:20.090
On MediaStore, there's
ACTION_IMAGE_CAPTURE and

00:36:20.090 --> 00:36:21.962
VIDEO_CAPTURE.

00:36:21.962 --> 00:36:23.420
One of the biggest
benefits here is

00:36:23.420 --> 00:36:26.857
that you're launching the user
into a consistent experience.

00:36:26.857 --> 00:36:28.690
If you were to request
the camera permission

00:36:28.690 --> 00:36:30.660
and build your own
UI, and then you

00:36:30.660 --> 00:36:32.730
need to represent advanced
features like turning

00:36:32.730 --> 00:36:35.680
the flash on and off, or
turning on other camera features

00:36:35.680 --> 00:36:37.130
and functionality,
you're probably

00:36:37.130 --> 00:36:38.910
going to do that
in a different way,

00:36:38.910 --> 00:36:41.927
using a different UI
than the user is used to.

00:36:41.927 --> 00:36:43.760
The camera app that's
built into their phone

00:36:43.760 --> 00:36:45.030
may represent it
one way, and then

00:36:45.030 --> 00:36:46.988
you're giving them a
slightly different UI that

00:36:46.988 --> 00:36:49.219
will take them a longer
time to get used to find out

00:36:49.219 --> 00:36:50.760
where are all the
additional features

00:36:50.760 --> 00:36:54.410
and functionality that they're
used to having access to,

00:36:54.410 --> 00:36:56.390
so by using these
intents, you're

00:36:56.390 --> 00:36:59.070
actually launching into
the built-in camera

00:36:59.070 --> 00:37:02.120
app on the system, the one
that the user has chosen,

00:37:02.120 --> 00:37:03.620
where they've
probably already taken

00:37:03.620 --> 00:37:04.999
dozens of photos in the past.

00:37:04.999 --> 00:37:06.790
They're already familiar
with how to choose

00:37:06.790 --> 00:37:08.030
the advanced functionality.

00:37:08.030 --> 00:37:11.699
So it's making the user
experience faster for them.

00:37:11.699 --> 00:37:13.990
They're able to jump right
in, they understand the flow

00:37:13.990 --> 00:37:16.198
and how to use it, and then
they get the content back

00:37:16.198 --> 00:37:17.810
that they need.

00:37:17.810 --> 00:37:21.320
The one thing that I will
mention here is you may think,

00:37:21.320 --> 00:37:23.580
well, I'll try requesting
the camera permission,

00:37:23.580 --> 00:37:25.080
and if the user
denies me, then I'll

00:37:25.080 --> 00:37:27.290
fall back to using
some of these intents.

00:37:27.290 --> 00:37:27.790
That's

00:37:27.790 --> 00:37:29.630
Something we don't
want to encourage.

00:37:29.630 --> 00:37:31.750
If you need the full
camera experience,

00:37:31.750 --> 00:37:34.080
ask for the camera
permission and make sure

00:37:34.080 --> 00:37:35.990
that the user either
allows or denies

00:37:35.990 --> 00:37:37.932
it, and don't try falling back.

00:37:37.932 --> 00:37:39.140
Go for the one that you want.

00:37:39.140 --> 00:37:43.010
If you really need the full
camera permission, ask for it.

00:37:43.010 --> 00:37:45.340
Or if you don't need the
full camera permission,

00:37:45.340 --> 00:37:47.520
just use one of these intents.

00:37:47.520 --> 00:37:49.410
The reality is that if
you ask for the camera

00:37:49.410 --> 00:37:51.570
permission and the
user denies you,

00:37:51.570 --> 00:37:53.560
and then if you try using
one of these intents,

00:37:53.560 --> 00:37:56.016
the system will throw a
security exception at you,

00:37:56.016 --> 00:37:56.890
so this is purposely.

00:37:56.890 --> 00:38:02.010
We want to have you focus on
either one path or the other.

00:38:02.010 --> 00:38:03.940
Contacts permission--
let's talk about those.

00:38:03.940 --> 00:38:05.110
Redirect contacts.

00:38:05.110 --> 00:38:07.520
And again, this is accessing
all the user's contacts, all

00:38:07.520 --> 00:38:10.320
the people that they've
added over the years, when

00:38:10.320 --> 00:38:13.550
in reality you may only be
interested in just reading

00:38:13.550 --> 00:38:14.297
one contact.

00:38:14.297 --> 00:38:16.130
You want to share
something with one person.

00:38:16.130 --> 00:38:18.755
Or maybe you just want to add a
little bit of additional detail

00:38:18.755 --> 00:38:21.040
to an existing contact,
maybe a new email address.

00:38:21.040 --> 00:38:24.340
So we'll dig into two quick
examples related to those.

00:38:24.340 --> 00:38:25.789
First there's ACTION_PICK.

00:38:25.789 --> 00:38:28.080
You can launch that ACTION_PIC
intent and ask the user,

00:38:28.080 --> 00:38:31.480
pick me a contact and in
return the access back.

00:38:31.480 --> 00:38:33.820
Under the hood, this using
the same URI permission

00:38:33.820 --> 00:38:35.750
grants that we talked
about a few moments ago.

00:38:35.750 --> 00:38:38.291
When you launched towards the
system asking the user to pick,

00:38:38.291 --> 00:38:41.050
whatever item that they
pick, that contact, that URI,

00:38:41.050 --> 00:38:43.720
is returned to you with
temporary permission,

00:38:43.720 --> 00:38:45.450
that you can read
just that contact.

00:38:45.450 --> 00:38:47.575
You won't be able to see
any of the other contacts,

00:38:47.575 --> 00:38:49.210
but just the one
the user selected.

00:38:49.210 --> 00:38:52.020
Here's that quick example,
and there are more details

00:38:52.020 --> 00:38:54.280
if you go to the link there
for the contacts provider,

00:38:54.280 --> 00:38:56.700
to see how that
works under the hood.

00:38:56.700 --> 00:38:58.880
On the flip side, creating
or editing a contact,

00:38:58.880 --> 00:39:00.040
there's an intent for that.

00:39:00.040 --> 00:39:02.041
Here you provide just
information that you know.

00:39:02.041 --> 00:39:03.706
You know their phone
number, their name,

00:39:03.706 --> 00:39:06.240
or their email address, and
you give the user the choice.

00:39:06.240 --> 00:39:08.940
Maybe they want to create
a brand-new contact

00:39:08.940 --> 00:39:12.449
for this person, or maybe
this contact already exists,

00:39:12.449 --> 00:39:13.990
and you're just
augmenting and adding

00:39:13.990 --> 00:39:16.981
a little bit of extra details
that weren't in there before.

00:39:16.981 --> 00:39:18.730
This you're launching
towards the contacts

00:39:18.730 --> 00:39:21.690
up on the platform, and the
user is the one left in control.

00:39:21.690 --> 00:39:24.023
They can make the choice of
what to do, create a new one

00:39:24.023 --> 00:39:25.110
or edit an existing.

00:39:25.110 --> 00:39:26.850
Similarly here,
you're giving them

00:39:26.850 --> 00:39:29.242
a familiar contact-editing
experience,

00:39:29.242 --> 00:39:30.950
something that they've
already interacted

00:39:30.950 --> 00:39:34.830
with on the phone, a URI
that they're familiar with.

00:39:34.830 --> 00:39:36.540
Calendar permission--
again, it's

00:39:36.540 --> 00:39:39.900
accessing all of the
user's calendar events,

00:39:39.900 --> 00:39:42.770
when in reality you may just
want to add one upcoming event,

00:39:42.770 --> 00:39:45.510
say, for example, this talk
that we're in right now.

00:39:45.510 --> 00:39:47.010
Here's an example
of how to do that.

00:39:47.010 --> 00:39:50.055
There's an ACTION_INSERT
intent for that.

00:39:50.055 --> 00:39:51.513
We can fill in some
of the details,

00:39:51.513 --> 00:39:52.895
say, like, when it
starts and ends,

00:39:52.895 --> 00:39:55.110
and the details around it, and
then just start that activity.

00:39:55.110 --> 00:39:57.060
We don't require the
right calendar event.

00:39:57.060 --> 00:39:58.870
We launch into a
UI, and fill out

00:39:58.870 --> 00:40:00.400
the fields, ready
for the user taste

00:40:00.400 --> 00:40:02.936
to say, yes, I want to
save, and persist that.

00:40:02.936 --> 00:40:04.810
So we're adding that
additional functionality

00:40:04.810 --> 00:40:07.960
without requiring
that permission.

00:40:07.960 --> 00:40:11.510
So in summary, we talked about
how permissions and Marshmallow

00:40:11.510 --> 00:40:14.130
are much more powerful
now, but at the same time,

00:40:14.130 --> 00:40:18.050
the user has the power to
deny us access as developers.

00:40:18.050 --> 00:40:19.102
They can say no.

00:40:19.102 --> 00:40:20.810
So what I would say
is carefully consider

00:40:20.810 --> 00:40:23.720
when you are asking
for those permissions,

00:40:23.720 --> 00:40:25.500
and consider using
some of the strategies

00:40:25.500 --> 00:40:27.990
that we just talked
about to build your apps,

00:40:27.990 --> 00:40:30.680
without having to ask for those
permissions in the first place,

00:40:30.680 --> 00:40:32.720
in a way that you can
still accomplish the goal,

00:40:32.720 --> 00:40:34.470
build the app that you want to
build with the functionality

00:40:34.470 --> 00:40:36.250
that you need,
but without asking

00:40:36.250 --> 00:40:38.160
for those broad permissions.

00:40:38.160 --> 00:40:41.560
And finally, we talked
about those intent patterns,

00:40:41.560 --> 00:40:44.923
so the intents where the user
is given a common, familiar UI,

00:40:44.923 --> 00:40:46.506
so they have a
consistent experience ,

00:40:46.506 --> 00:40:49.005
and they're able to accomplish
whatever they're trying to do

00:40:49.005 --> 00:40:50.020
faster.

00:40:50.020 --> 00:40:52.880
So hopefully you have a
better picture of Marshmallow

00:40:52.880 --> 00:40:55.590
and how the permissions
have evolved.

00:40:55.590 --> 00:40:56.837
Svet and I will be available.

00:40:56.837 --> 00:40:57.920
We're running out of time.

00:40:57.920 --> 00:41:00.610
We'll be available at office
hours later this evening

00:41:00.610 --> 00:41:02.860
if you have questions
for either of us.

00:41:02.860 --> 00:41:05.740
But without that,
thanks for your time.

00:41:05.740 --> 00:41:08.740
[APPLAUSE]

00:41:08.740 --> 00:41:12.690
[MUSIC PLAYING]

