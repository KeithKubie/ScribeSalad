WEBVTT
Kind: captions
Language: en

00:00:04.800 --> 00:00:06.500
MALE SPEAKER: Welcome
to Getting Started

00:00:06.500 --> 00:00:07.890
with Mobile Web Development.

00:00:07.890 --> 00:00:09.470
A short crash
course where you'll

00:00:09.470 --> 00:00:11.710
get to set up and
build responsive,

00:00:11.710 --> 00:00:15.320
multi-device web apps and sites
using Chrome developer tools.

00:00:15.320 --> 00:00:16.732
Once you've chosen
your framework

00:00:16.732 --> 00:00:18.440
and have agreed with
your team about what

00:00:18.440 --> 00:00:21.720
it is you want to do with
your awesome, responsive site,

00:00:21.720 --> 00:00:22.916
you're ready to dive in.

00:00:22.916 --> 00:00:24.790
MALE SPEAKER: And one
of the first challenges

00:00:24.790 --> 00:00:28.420
with developing for the mobile
web is the display screen.

00:00:28.420 --> 00:00:30.250
The typically small
display screen,

00:00:30.250 --> 00:00:32.850
compared to a desktop
or a laptop device,

00:00:32.850 --> 00:00:36.170
really forces you to focus on
what's critical for your users.

00:00:36.170 --> 00:00:38.970
In today's landscape you should
really think of your designs

00:00:38.970 --> 00:00:42.850
in terms of three main
scenarios, phone, tablet,

00:00:42.850 --> 00:00:44.160
and desktop.

00:00:44.160 --> 00:00:46.770
These may share some design
characteristics of course,

00:00:46.770 --> 00:00:48.680
and they'll
certainly share data,

00:00:48.680 --> 00:00:51.010
but you should consider
the optimal experience

00:00:51.010 --> 00:00:53.290
for each of these
scenarios separately

00:00:53.290 --> 00:00:54.885
as you build your design.

00:00:54.885 --> 00:00:57.890
MALE SPEAKER: As you can
see, Chrome Dev Tools

00:00:57.890 --> 00:01:01.020
provides a series of tabs that
allow you to debug and inspect

00:01:01.020 --> 00:01:03.200
your web apps.

00:01:03.200 --> 00:01:05.960
For example, you can select
any element on the page

00:01:05.960 --> 00:01:10.560
by right clicking the element
and selecting Inspect Element.

00:01:10.560 --> 00:01:16.300
Or, as I'll do here, you can
click on the magnifying glass

00:01:16.300 --> 00:01:18.922
and hover over an area that
you would like to inspect.

00:01:18.922 --> 00:01:20.380
MALE SPEAKER: The
set up is simple.

00:01:20.380 --> 00:01:23.280
All you need as an Android
device, a USB cable,

00:01:23.280 --> 00:01:25.010
and your development machine.

00:01:25.010 --> 00:01:25.760
Let's take a look.

00:01:28.310 --> 00:01:30.710
Before you get started, you
need to turn on the Developer

00:01:30.710 --> 00:01:32.390
Mode in your Android device.

00:01:32.390 --> 00:01:34.620
This may be different
on any given device.

00:01:34.620 --> 00:01:37.100
And you can check your device's
manual for how to do this.

00:01:37.100 --> 00:01:43.010
In many cases though, you need
to go to your devices Settings,

00:01:43.010 --> 00:01:46.460
click on About
Device, and then click

00:01:46.460 --> 00:01:50.870
on Build Number seven times.

00:01:50.870 --> 00:01:53.050
Seriously.

00:01:53.050 --> 00:01:55.780
Next you'll want to
turn on USB debugging.

00:01:55.780 --> 00:01:59.700
Again, this varies slightly
on your given device,

00:01:59.700 --> 00:02:01.780
but is usually located
in the Developer Options.

00:02:06.311 --> 00:02:08.810
We also need to make sure we
have the right tools installed.

00:02:08.810 --> 00:02:11.180
On my laptop I
have Chrome Canary.

00:02:11.180 --> 00:02:14.410
And on my mobile device I
have Chrome Beta installed.

00:02:14.410 --> 00:02:16.720
Now that we have everything
set up the way we need,

00:02:16.720 --> 00:02:18.680
open Chrome on your
development machine,

00:02:18.680 --> 00:02:22.280
and go to Chrome Inspect.

00:02:22.280 --> 00:02:23.890
Make sure the site
you want to debug

00:02:23.890 --> 00:02:26.210
is open on your mobile
device, and then

00:02:26.210 --> 00:02:29.145
connect your laptop to
your mobile device via USB.

00:02:33.260 --> 00:02:38.140
Then confirm that you want
to allow USB debugging.

00:02:38.140 --> 00:02:39.590
Back on our
development machine we

00:02:39.590 --> 00:02:42.420
can see a list of the attached
devices, and the Chrome

00:02:42.420 --> 00:02:44.710
tabs that are open
on the device.

00:02:44.710 --> 00:02:46.185
You can even open other tabs.

00:02:49.520 --> 00:02:52.660
You can also focus
on specific tabs.

00:02:52.660 --> 00:02:59.424
You can reload them, and
you can even close a tab.

00:02:59.424 --> 00:03:01.090
MALE SPEAKER: When
mobile browsers first

00:03:01.090 --> 00:03:03.030
came along the
content on the web

00:03:03.030 --> 00:03:05.800
wasn't designed for narrow,
small screen devices.

00:03:05.800 --> 00:03:07.800
It was designed for
windows that were around

00:03:07.800 --> 00:03:11.350
1,000 pixels wide, and
wider than they were tall,

00:03:11.350 --> 00:03:12.700
with easy scrolling.

00:03:12.700 --> 00:03:15.600
To shoehorn this content
into a tiny, mobile screen,

00:03:15.600 --> 00:03:17.330
since rendering a
web page designed

00:03:17.330 --> 00:03:20.900
for 1,000 pixels across
on a 320 pixel wide screen

00:03:20.900 --> 00:03:22.870
would mean you'd
be scrolling a lot,

00:03:22.870 --> 00:03:26.760
mobile browsers basically
lied about the window width.

00:03:26.760 --> 00:03:30.370
They made the window act as
if it were 980 pixels wide,

00:03:30.370 --> 00:03:34.220
even though the original iPhone
was only 320 pixels across.

00:03:34.220 --> 00:03:36.770
This enabled sites that
were designed for a 1024

00:03:36.770 --> 00:03:41.460
by 768 screen, that is, that
were around 980 pixels wide,

00:03:41.460 --> 00:03:43.331
to fit on the mobile screen.

00:03:43.331 --> 00:03:45.080
Although you needed
to do a lot of zooming

00:03:45.080 --> 00:03:47.080
to read the text sometimes.

00:03:47.080 --> 00:03:48.740
Unfortunately if
your site did not

00:03:48.740 --> 00:03:51.440
happen to match that
980 pixel width,

00:03:51.440 --> 00:03:53.570
you were either going
to overflow or underflow

00:03:53.570 --> 00:03:54.550
the screen.

00:03:54.550 --> 00:03:57.820
Either wasting space, or
forcing the user to zoom.

00:03:57.820 --> 00:04:01.460
In order to control this, Apple
provided a viewport meta tag

00:04:01.460 --> 00:04:05.390
to be added to your HTML to
control the default for how big

00:04:05.390 --> 00:04:07.980
should my screen
act on this page.

00:04:07.980 --> 00:04:10.210
The default is 980.

00:04:10.210 --> 00:04:13.230
So if you put 980 here,
it would have no effect.

00:04:13.230 --> 00:04:16.070
The mobile browser
already defaults to 980.

00:04:16.070 --> 00:04:18.050
But setting a viewport
tells the browser

00:04:18.050 --> 00:04:21.060
how wide the content is
intended to be, and then

00:04:21.060 --> 00:04:23.750
the browser scales to make
that size fit on the device's

00:04:23.750 --> 00:04:24.720
screen.

00:04:24.720 --> 00:04:27.220
There are two ways
to use this tag.

00:04:27.220 --> 00:04:30.370
Although typically viewport
is only being set on load,

00:04:30.370 --> 00:04:32.760
you can actually play around
with the viewport settings

00:04:32.760 --> 00:04:34.990
in the development tools
to tweak it, and get it

00:04:34.990 --> 00:04:35.960
just right.

00:04:35.960 --> 00:04:38.170
If I go into the page
and set the viewport meta

00:04:38.170 --> 00:04:40.970
element contents from
the Mobile Dev Tools,

00:04:40.970 --> 00:04:43.810
it will change the page as
if it had been refreshed.

00:04:43.810 --> 00:04:46.610
However, and this is where
it gets a bit confusing,

00:04:46.610 --> 00:04:48.660
the zoom level is
maintained by the browser

00:04:48.660 --> 00:04:50.430
across page refreshes.

00:04:50.430 --> 00:04:52.860
So when you change viewport
settings in the source code,

00:04:52.860 --> 00:04:56.710
and you're reloading, be sure
to actually close the tab first.

00:04:56.710 --> 00:04:59.160
Don't just hit reload,
or it won't necessarily

00:04:59.160 --> 00:05:00.980
show the effects on the screen.

00:05:00.980 --> 00:05:02.980
So let's try this
out on this page.

00:05:02.980 --> 00:05:06.270
Let's add a device width
element to our lorem ipsum page,

00:05:06.270 --> 00:05:08.750
and refresh it on
the mobile browser.

00:05:08.750 --> 00:05:12.130
This is what a page
looked like before.

00:05:12.130 --> 00:05:15.230
Now, with the meta tag in
place, let's try reloading it.

00:05:15.230 --> 00:05:18.190
And you can see the page
now chooses a better size

00:05:18.190 --> 00:05:20.810
because it's reflowing at the
native size of the screen.

00:05:20.810 --> 00:05:23.930
MALE SPEAKER: So really, fixed
viewport widths are historical.

00:05:23.930 --> 00:05:25.700
Resizing by default
was an attempt

00:05:25.700 --> 00:05:28.930
to shoehorn the desktop
web into a mobile device.

00:05:28.930 --> 00:05:31.190
Fixed viewport sizes
were a quick way

00:05:31.190 --> 00:05:34.410
to provide some minimal
controls on that resizing.

00:05:34.410 --> 00:05:37.370
With Device Width gets us
back to the same scalable

00:05:37.370 --> 00:05:40.100
sized canvas that
the desktop web has.

00:05:40.100 --> 00:05:42.720
So the right way to do
fluid, flexible design

00:05:42.720 --> 00:05:46.570
in the modern mobile web
starts with this tag.

00:05:46.570 --> 00:05:48.330
This marker lets
the browser know

00:05:48.330 --> 00:05:51.350
you're one of the cool kids,
and you know what you're doing.

00:05:51.350 --> 00:05:54.122
There is one more
thing on viewports.

00:05:54.122 --> 00:05:55.830
You're naturally going
to want to lay out

00:05:55.830 --> 00:05:59.300
elements on the page relative
to the size of the viewport.

00:05:59.300 --> 00:06:01.650
Particularly, when you're
sizing columns on the page,

00:06:01.650 --> 00:06:02.900
for example.

00:06:02.900 --> 00:06:06.820
So we have a new unit type
in CSS called viewport units.

00:06:06.820 --> 00:06:09.610
You can use these units to
size things in percentage

00:06:09.610 --> 00:06:12.340
of width of viewport
or percentage of height

00:06:12.340 --> 00:06:15.220
of viewport without having
to push percentage sizing

00:06:15.220 --> 00:06:17.950
everywhere, which makes
things a little easier.

00:06:17.950 --> 00:06:20.070
The really exciting
thing is these unit

00:06:20.070 --> 00:06:22.120
types even work in
desktop browsers,

00:06:22.120 --> 00:06:23.509
as well as in mobile browsers.

00:06:23.509 --> 00:06:24.925
MALE SPEAKER: So
now that you know

00:06:24.925 --> 00:06:26.910
how to set the
viewport meta, let's

00:06:26.910 --> 00:06:28.450
poke around in the
developer tools

00:06:28.450 --> 00:06:31.280
to see what we need to
do to fix this page.

00:06:31.280 --> 00:06:33.930
Now the biggest problem
here is that the page

00:06:33.930 --> 00:06:36.130
has a fixed column width.

00:06:36.130 --> 00:06:39.550
If I resize the window, you'll
notice the column of text

00:06:39.550 --> 00:06:43.350
doesn't actually change
size, just margin position.

00:06:43.350 --> 00:06:46.270
As we mouse around the
elements inside the DevTools,

00:06:46.270 --> 00:06:49.200
we can pretty quickly find
the first offending element.

00:06:49.200 --> 00:06:53.230
This page element here
actually has a width set on it.

00:06:53.230 --> 00:06:55.830
Let's disable that
and see what happens.

00:06:55.830 --> 00:06:58.080
Well, it certainly
changed things,

00:06:58.080 --> 00:07:02.310
but I don't think it actually
improved things very much.

00:07:02.310 --> 00:07:04.070
Let's keep digging
inside the content

00:07:04.070 --> 00:07:05.580
and see what we can find.

00:07:05.580 --> 00:07:09.390
This wrapper element has a width
of 100% already, which is good.

00:07:09.390 --> 00:07:11.970
It means that it's not
preventing us from resizing.

00:07:11.970 --> 00:07:15.380
But this content element does
have a width set in pixels.

00:07:15.380 --> 00:07:17.300
Let's disable that.

00:07:17.300 --> 00:07:20.440
Now as we resize the
page our content is fine,

00:07:20.440 --> 00:07:23.420
but the sidebar is
appearing and disappearing.

00:07:23.420 --> 00:07:25.450
Sure enough, it has a width set.

00:07:25.450 --> 00:07:27.830
If we set its width
as a percentage also,

00:07:27.830 --> 00:07:30.270
now we're resizing
a little bit better.

00:07:30.270 --> 00:07:32.780
So now let's go
back up to the page,

00:07:32.780 --> 00:07:34.600
and let's try giving it a width.

00:07:34.600 --> 00:07:37.980
But let's give it a width
in viewport units instead.

00:07:37.980 --> 00:07:39.770
Now our only remaining
problem seems

00:07:39.770 --> 00:07:41.960
to be that the header
is actually not

00:07:41.960 --> 00:07:43.580
resizing as we want it to.

00:07:43.580 --> 00:07:45.860
Let's go take a look at
the header image again.

00:07:45.860 --> 00:07:49.260
The image has a max width
set, but not just a width.

00:07:49.260 --> 00:07:52.690
So let's set its width.

00:07:52.690 --> 00:07:55.410
And now everything seems
to be resizing well.

00:07:55.410 --> 00:07:56.940
Now, this isn't perfect.

00:07:56.940 --> 00:07:59.150
But all that I really
wanted to get at

00:07:59.150 --> 00:08:01.750
was that as you try
to transition pages

00:08:01.750 --> 00:08:03.990
from fixed layout
to fluid layout,

00:08:03.990 --> 00:08:07.330
the core things to look
for are fixed pixel sizes

00:08:07.330 --> 00:08:09.720
and lack of percentage resize.

00:08:09.720 --> 00:08:11.930
Be sure to create fluid layouts.

00:08:11.930 --> 00:08:14.740
Be sure to reflow to use
all the space on the screen,

00:08:14.740 --> 00:08:17.150
and take advantage
of every bit you can.

00:08:17.150 --> 00:08:20.070
And be sure you adapt to
different screens as well.

00:08:20.070 --> 00:08:23.280
One tool that makes reflow
a lot easier, particularly

00:08:23.280 --> 00:08:25.510
across very different
screen sizes,

00:08:25.510 --> 00:08:28.590
is the new Flexbox
layout in CSS.

00:08:28.590 --> 00:08:30.780
This new tool lets
you stack elements

00:08:30.780 --> 00:08:32.989
in flexible rows or columns.

00:08:32.989 --> 00:08:34.799
MALE SPEAKER: Responsive
design isn't just

00:08:34.799 --> 00:08:36.840
about flexible
fluid designs, it's

00:08:36.840 --> 00:08:40.200
also about adapting to different
scenarios and environments.

00:08:40.200 --> 00:08:44.700
And our primary tool for
doing that is Media Queries.

00:08:44.700 --> 00:08:47.160
Media queries have their
roots in the media type

00:08:47.160 --> 00:08:48.320
for style sheets.

00:08:48.320 --> 00:08:49.910
Used to declare a
style sheet that's

00:08:49.910 --> 00:08:53.150
only applied to certain media
types, like when printing,

00:08:53.150 --> 00:08:55.990
and in the At Media
Section in CSS,

00:08:55.990 --> 00:08:58.540
where you can declare a
subsection of the style sheet

00:08:58.540 --> 00:09:01.390
to only be used for
print or other media.

00:09:01.390 --> 00:09:04.670
For example, it's helpful to
display the URL of hyperlinks

00:09:04.670 --> 00:09:08.110
when printing, since you can't
click on the links on paper.

00:09:08.110 --> 00:09:09.780
So that's what this rule does.

00:09:09.780 --> 00:09:14.110
But CSS3 Media Queries
added media query terms.

00:09:14.110 --> 00:09:17.110
This lets us make conditional
rules in our style sheets

00:09:17.110 --> 00:09:20.770
based on environmental factors
like the width of the window,

00:09:20.770 --> 00:09:23.250
or the orientation
of the device.

00:09:23.250 --> 00:09:25.810
This opens up a huge
opportunity for us

00:09:25.810 --> 00:09:29.050
to make truly adaptive layouts.

00:09:29.050 --> 00:09:30.800
There are a number of
different properties

00:09:30.800 --> 00:09:33.920
available inside these
media query expressions

00:09:33.920 --> 00:09:36.570
like the width and height of
the current window, the width

00:09:36.570 --> 00:09:40.870
and height of the device, the
device orientation, the device

00:09:40.870 --> 00:09:44.240
aspect ratio and
window aspect ratio,

00:09:44.240 --> 00:09:46.890
whether the device
is grid-based,

00:09:46.890 --> 00:09:49.090
how many bits per
color the device uses,

00:09:49.090 --> 00:09:51.350
or whether it's an
indexed color device,

00:09:51.350 --> 00:09:53.930
or whether it's monochrome,
the overall resolution

00:09:53.930 --> 00:09:58.221
of the device, and whether it's
progressive or interlaced scan.

00:09:58.221 --> 00:09:59.820
MALE SPEAKER: This
was a crash course

00:09:59.820 --> 00:10:02.140
in mobile web development
and using Chrome Developer

00:10:02.140 --> 00:10:04.970
Tools to build responsive,
multi-device web apps

00:10:04.970 --> 00:10:05.980
and sites.

00:10:05.980 --> 00:10:08.640
For more best practices
and how to's, check out

00:10:08.640 --> 00:10:11.710
the full mobile web
development course, on Udacity.

00:10:11.710 --> 00:10:13.210
You could also find
more information

00:10:13.210 --> 00:10:15.120
on the web fundamental site.

00:10:15.120 --> 00:10:17.820
All the best, and happy coding.

