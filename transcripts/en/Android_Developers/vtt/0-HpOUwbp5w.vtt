WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.494
[MUSIC PLAYING]

00:00:06.706 --> 00:00:08.039
WOJTEK KALICINSKI: Hi, everyone.

00:00:08.039 --> 00:00:09.750
My name is Wojtek.

00:00:09.750 --> 00:00:11.610
And I wanted to share
with you a short story

00:00:11.610 --> 00:00:14.460
about my experience with the new
Kotlin multi-platform project

00:00:14.460 --> 00:00:16.090
in Kotlin 1.3.

00:00:16.090 --> 00:00:17.767
So when we come to
these conferences,

00:00:17.767 --> 00:00:20.100
talk about Android, talk about
running Kotlin on Android

00:00:20.100 --> 00:00:24.690
for making Android apps, what
we really mean is Kotlin JVM.

00:00:24.690 --> 00:00:26.850
That's the Kotlin
that we know that gets

00:00:26.850 --> 00:00:28.830
compiled to Java bytecode.

00:00:28.830 --> 00:00:31.620
And then we can transform
it into .dex files,

00:00:31.620 --> 00:00:32.619
run it on Android.

00:00:32.619 --> 00:00:35.400
But it can also run on cloud
servers, on our desktops,

00:00:35.400 --> 00:00:36.700
and so on.

00:00:36.700 --> 00:00:38.800
Now there are two more
flavors of Kotlin actually,

00:00:38.800 --> 00:00:40.380
or compilation targets.

00:00:40.380 --> 00:00:42.930
First one, Kotlin
JS, for running

00:00:42.930 --> 00:00:45.330
JavaScript in a web
browser environment

00:00:45.330 --> 00:00:48.570
or even something like
cloud functions or Node.js.

00:00:48.570 --> 00:00:51.390
And then there's Kotlin
native, which compiles down

00:00:51.390 --> 00:00:54.240
to machine code in
native libraries

00:00:54.240 --> 00:00:57.210
that can run or target
various platforms,

00:00:57.210 --> 00:01:01.350
such as IOS, desktop apps, even
WebAssembly, and even Android.

00:01:01.350 --> 00:01:04.269
So how do we actually
get started with this?

00:01:04.269 --> 00:01:06.720
So Kotlin 1.3 introduces
a new project structure

00:01:06.720 --> 00:01:09.710
and a new plug-in that's
called Kotlin multi-platform.

00:01:09.710 --> 00:01:12.000
And if you apply that
to any of your modules,

00:01:12.000 --> 00:01:16.950
you can then select
from a set of presets

00:01:16.950 --> 00:01:18.520
to target any of
these platforms.

00:01:18.520 --> 00:01:21.600
So here, for example, I'm
targeting an Android library

00:01:21.600 --> 00:01:23.900
and a js target.

00:01:23.900 --> 00:01:26.030
Now when you add
these to your module,

00:01:26.030 --> 00:01:29.280
it automatically creates source
sets for each of these platform

00:01:29.280 --> 00:01:30.840
specific Kotlin files.

00:01:30.840 --> 00:01:33.500
So if you put your Kotlin
files in the js main folder,

00:01:33.500 --> 00:01:37.552
they will get compiled or
transpiled to JavaScript files.

00:01:37.552 --> 00:01:41.050
Now what do I mean
by Kotlin specific--

00:01:41.050 --> 00:01:42.845
sorry-- platform
specific Kotlin?

00:01:42.845 --> 00:01:45.220
Now if you go and browse the
documentation, the reference

00:01:45.220 --> 00:01:47.440
pages for each of
the Kotlin packages,

00:01:47.440 --> 00:01:50.470
and you mouse over any
of them, in the top right

00:01:50.470 --> 00:01:52.330
you will see these
multicolored chips

00:01:52.330 --> 00:01:54.850
that tell you which
compilation target

00:01:54.850 --> 00:01:56.510
this library is available on?

00:01:56.510 --> 00:01:59.920
So here, for example, the
Kotlin browser package

00:01:59.920 --> 00:02:02.560
that lets you access interfaces
for document and window

00:02:02.560 --> 00:02:04.690
from the web browser
environment, probably only

00:02:04.690 --> 00:02:06.160
makes sense on a js target.

00:02:06.160 --> 00:02:08.630
And that's how it is.

00:02:08.630 --> 00:02:10.840
Now fortunately,
many, many of the core

00:02:10.840 --> 00:02:13.660
libraries and functions
are available across all

00:02:13.660 --> 00:02:15.140
the compilation targets.

00:02:15.140 --> 00:02:18.220
In fact, you can see a
fourth one, Kotlin common,

00:02:18.220 --> 00:02:19.630
which means this
is a pure Kotlin

00:02:19.630 --> 00:02:23.260
library that can run independent
of any platform that's

00:02:23.260 --> 00:02:25.170
targeting.

00:02:25.170 --> 00:02:27.340
And in fact, if you add
the multi-platform plug-in

00:02:27.340 --> 00:02:30.580
to your project, along with the
platform specific source sets,

00:02:30.580 --> 00:02:32.890
you also get a common
source set where you can

00:02:32.890 --> 00:02:35.230
put platform independent code.

00:02:35.230 --> 00:02:37.570
Now the thing about platform
independent code is,

00:02:37.570 --> 00:02:40.240
it cannot call any
of the platform APIs.

00:02:40.240 --> 00:02:43.570
It cannot call any of the js
specific or Android specific

00:02:43.570 --> 00:02:44.505
APIs.

00:02:44.505 --> 00:02:46.134
The other way, of course, works.

00:02:46.134 --> 00:02:47.800
You can have your
platform specific code

00:02:47.800 --> 00:02:51.790
from any of the flavors depend
on a shared common library

00:02:51.790 --> 00:02:53.650
or source set.

00:02:53.650 --> 00:02:56.690
So knowing all that, I set out
to write an example app just

00:02:56.690 --> 00:02:58.600
to learn about Kotlin
multi-platform.

00:02:58.600 --> 00:03:01.510
And I decided to make
a small Sudoku game.

00:03:01.510 --> 00:03:03.860
Now one thing I have to say
about Kotlin multi-platform

00:03:03.860 --> 00:03:07.310
is, it's not a toolkit that lets
you write an app once and run

00:03:07.310 --> 00:03:08.180
it everywhere.

00:03:08.180 --> 00:03:10.280
I still need to
create an Android app

00:03:10.280 --> 00:03:12.560
with Android specific
code, just like I normally

00:03:12.560 --> 00:03:15.800
would, and then a web page
with some JavaScript code

00:03:15.800 --> 00:03:17.540
just to initialize
things, like entry

00:03:17.540 --> 00:03:20.250
points to my app,
lifecycle UI, and so on.

00:03:20.250 --> 00:03:23.140
But then, what I do is, all
my shared business logic--

00:03:23.140 --> 00:03:25.400
so in my case, it's
the Sudoku engine that

00:03:25.400 --> 00:03:27.980
solves and generates
Sudoku boards for me,

00:03:27.980 --> 00:03:30.110
I take it out and
put it in a shared

00:03:30.110 --> 00:03:32.690
library using Kotlin common.

00:03:32.690 --> 00:03:36.350
And in fact, the only source
set I have in this library

00:03:36.350 --> 00:03:37.440
is common main.

00:03:37.440 --> 00:03:39.200
So I put all my code there.

00:03:39.200 --> 00:03:41.750
And that means it's available
across all the platforms

00:03:41.750 --> 00:03:43.650
that I choose to target.

00:03:43.650 --> 00:03:44.150
OK.

00:03:44.150 --> 00:03:46.970
But then I thought, OK,
I have this core engine

00:03:46.970 --> 00:03:48.590
for solving my Sudoku code.

00:03:48.590 --> 00:03:51.140
But I would also like to
draw the board on the screen.

00:03:51.140 --> 00:03:53.630
And why code it
for each platform

00:03:53.630 --> 00:03:57.325
separately if it should look
the same on each of them?

00:03:57.325 --> 00:03:58.700
So I thought,
wouldn't it be nice

00:03:58.700 --> 00:04:01.190
if I had an API for drawing
on the screen that's

00:04:01.190 --> 00:04:03.110
completely platform
independent, something

00:04:03.110 --> 00:04:05.420
that can multi-platform canvas?

00:04:05.420 --> 00:04:08.990
But then what I want to
do is I want to actually

00:04:08.990 --> 00:04:12.090
have it delegate to each of
the platforms implementations.

00:04:12.090 --> 00:04:13.670
So I want to use
the Android canvas

00:04:13.670 --> 00:04:16.430
to draw on Android
while I use the HTML

00:04:16.430 --> 00:04:18.529
canvas to draw on a website.

00:04:18.529 --> 00:04:22.070
The thing is, I just told you
that Kotlin common code cannot

00:04:22.070 --> 00:04:24.200
call any platform interfaces.

00:04:24.200 --> 00:04:25.730
So I can't really
depend on these

00:04:25.730 --> 00:04:27.780
and export them
from this module.

00:04:27.780 --> 00:04:30.230
So how does it work in Kotlin?

00:04:30.230 --> 00:04:33.050
Well, there's this expect
and actual mechanism

00:04:33.050 --> 00:04:37.220
that lets you declare expected
classes in your common code,

00:04:37.220 --> 00:04:41.150
which is something almost like
defining an interface in Java.

00:04:41.150 --> 00:04:45.140
And then in each of my
platform specific source sets,

00:04:45.140 --> 00:04:47.360
I provide the actual
implementation

00:04:47.360 --> 00:04:49.790
that can depend and
use platform APIs,

00:04:49.790 --> 00:04:52.571
such as the Android canvas.

00:04:52.571 --> 00:04:55.340
Now, when I add that dependency
from my common source

00:04:55.340 --> 00:04:59.470
set to the other one, it
looks something like this.

00:04:59.470 --> 00:05:03.685
But actually, when compiling for
a specific platform, such a js,

00:05:03.685 --> 00:05:07.600
this dependency will actually
use the correct HTML5 canvas.

00:05:07.600 --> 00:05:08.784
[GONG]

00:05:08.784 --> 00:05:11.069
[CHUCKLE]

00:05:11.069 --> 00:05:13.180
OK, if I could just show
the link to the project

00:05:13.180 --> 00:05:16.994
so that everyone can look
at it, that would be great.

00:05:16.994 --> 00:05:18.930
[LAUGHTER]

00:05:18.930 --> 00:05:20.020
Yep.

00:05:20.020 --> 00:05:20.970
SPEAKER 1: [INAUDIBLE]

00:05:20.970 --> 00:05:23.345
[CHUCKLE]

00:05:23.345 --> 00:05:24.034
[APPLAUSE]

00:05:24.034 --> 00:05:25.450
WOJTEK KALICINSKI:
Yeah that's it.

00:05:25.450 --> 00:05:27.900
[MUSIC PLAYING]

