WEBVTT
Kind: captions
Language: en

00:00:00.700 --> 00:00:02.930
Alright, so now let's, let's get back to our data set that

00:00:02.930 --> 00:00:06.250
we were looking at before. So again, the ideas that we're, we're going to

00:00:06.250 --> 00:00:09.830
try to find a way of predicting the value for various points along

00:00:09.830 --> 00:00:12.770
the way on this curve. And one thing we could do is find

00:00:12.770 --> 00:00:15.960
the best line. But we also talked now about finding the best constant.

00:00:15.960 --> 00:00:19.120
Turns out these all belong to a family of functions that we could

00:00:19.120 --> 00:00:23.490
fit. Which are functions of this form. Alright. We've got x is our

00:00:23.490 --> 00:00:26.200
input and what we're going to do is we're going to take some constant and

00:00:26.200 --> 00:00:31.750
add that to some scaled version of x times some scaled version of x squared plus

00:00:31.750 --> 00:00:35.190
some scaled version of x cubed, all the way up to some order k. And we've

00:00:35.190 --> 00:00:37.710
talked about k equals zero, the constant function.

00:00:37.710 --> 00:00:39.380
And k equals one, the line. But there's

00:00:39.380 --> 00:00:42.570
also k equals two, parabola. Would it probably

00:00:42.570 --> 00:00:44.410
be a good choice at this particular case?

00:00:44.410 --> 00:00:45.770
&gt;&gt; Yes.

00:00:45.770 --> 00:00:49.900
&gt;&gt; It does seem like it's got, sort of, curvy downy nature, right?

00:00:49.900 --> 00:00:51.108
&gt;&gt; Mm hm.

00:00:51.108 --> 00:00:51.330
&gt;&gt; It's

00:00:51.330 --> 00:00:53.440
going up and it's kind of flattening out and maybe we could

00:00:53.440 --> 00:00:57.540
imagine that it starts coming down again? At least, over the course of

00:00:57.540 --> 00:00:59.790
these points, it doesn't come down again but at least it sort of

00:00:59.790 --> 00:01:02.840
flattened out. So let's take a look at that. Let's take a look

00:01:02.840 --> 00:01:07.670
at the. The best parabola to fit this. Alright, so, so here

00:01:07.670 --> 00:01:10.870
we go. We've got the, the best line now, the best constant function

00:01:10.870 --> 00:01:13.850
which is just the average. We have the best line with some slope

00:01:13.850 --> 00:01:16.480
to it. That's the green one. We have now the best parabola and

00:01:16.480 --> 00:01:18.030
look at it, it does, it does a nice job,

00:01:18.030 --> 00:01:20.930
right? Kind a gets, gets tucked in with all those other

00:01:20.930 --> 00:01:23.720
points. so, so what do you think? Is this the

00:01:23.720 --> 00:01:27.340
best way of, of capturing this. This particular set of points?

00:01:27.340 --> 00:01:32.140
&gt;&gt; Well, if the only thing we care about is minimizing the sum of squared

00:01:32.140 --> 00:01:37.490
error, my guess is that the parabola has less squared error.

00:01:38.640 --> 00:01:42.110
&gt;&gt; Yeah. It ha, there's more degrees of freedom so at the worst

00:01:42.110 --> 00:01:45.380
we could have just fit the parabola as a line. Right.

00:01:45.380 --> 00:01:49.330
We can always just set any of these coefficients to, to zero.

00:01:49.330 --> 00:01:51.860
So if the best fit to this really was a line. The

00:01:51.860 --> 00:01:54.410
best fit to this data point was a line, then the parabola

00:01:54.410 --> 00:01:57.370
that we see here wouldn't have any curve to it. So,

00:01:57.370 --> 00:02:00.693
yeah. Our arrows going down. Hm, As we have gone from order

00:02:00.693 --> 00:02:03.960
zero to order one to order two. So can you think of

00:02:03.960 --> 00:02:06.230
any other way getting there in order to getting down even more.

00:02:06.230 --> 00:02:07.530
&gt;&gt; How about order

00:02:07.530 --> 00:02:08.240
14 million.

00:02:09.830 --> 00:02:13.150
&gt;&gt; Interesting, while in this particular case,

00:02:13.150 --> 00:02:14.880
given the amount of data that we have,

00:02:14.880 --> 00:02:16.520
we can't go past the number of

00:02:16.520 --> 00:02:20.530
data points, yeh after that. They're really unconstrained.

00:02:20.530 --> 00:02:22.180
&gt;&gt; Okay. Then how about order nine?

00:02:22.180 --> 00:02:25.140
&gt;&gt; Order nine is a good idea. But just to

00:02:25.140 --> 00:02:26.770
give you an idea here, we're going to step up a little

00:02:26.770 --> 00:02:28.570
more. This is order four and look at, look at how

00:02:28.570 --> 00:02:33.140
lovely it can actually capture the flow here. That's, very faded.

00:02:33.140 --> 00:02:37.290
Order six and in fact the best we can do here is of the, of the,

00:02:37.290 --> 00:02:38.960
sorry. The most, the highest order that, that

00:02:38.960 --> 00:02:41.550
works is order eight. And, son of a gun,

00:02:41.550 --> 00:02:44.910
look what it did. It hit every single

00:02:44.910 --> 00:02:47.110
point dead on in the center. Boom. Boom. Boom.

00:02:47.110 --> 00:02:48.440
Boom. It used all the degrees of freedom

00:02:48.440 --> 00:02:50.950
it had to reduce the error to essentially zero.

00:02:50.950 --> 00:02:52.030
&gt;&gt; Excellent.

00:02:52.030 --> 00:02:54.910
&gt;&gt; So [LAUGH], one could argue that this is a really

00:02:54.910 --> 00:02:58.090
good idea. Though, if you look at what happens around 9000,

00:02:58.090 --> 00:03:00.960
there's some craziness. Do you see that?

00:03:00.960 --> 00:03:01.220
&gt;&gt; I do.

00:03:01.220 --> 00:03:06.510
&gt;&gt; At the Yeah, the To try to get this particular parabola

00:03:06.510 --> 00:03:11.380
to hit that particular point, it sent the curve soaring down with an up again.

00:03:11.380 --> 00:03:16.319
&gt;&gt; We also did that between 6500 and 8500, it sent [CROSSTALK].

00:03:16.319 --> 00:03:16.888
&gt;&gt; Yes good point

00:03:16.888 --> 00:03:17.854
&gt;&gt; [UNKNOWN] [CROSSTALK]

00:03:17.854 --> 00:03:23.170
&gt;&gt; Right, right, that's right went off the top of the plot. So Yeah,

00:03:23.170 --> 00:03:26.660
that's kind of [INAUDIBLE]. But let's just, just to show that we really

00:03:26.660 --> 00:03:29.320
are, as we have more degrees of freedom we're fitting the error better.

00:03:29.320 --> 00:03:31.950
Let me show you what it looks like, the amount of error for

00:03:31.950 --> 00:03:35.470
the best fit for each of these orders of k. Alright and so, so

00:03:35.470 --> 00:03:39.370
what you see when we actually plot the, the squared error, this function

00:03:39.370 --> 00:03:42.010
that we're trying to minimize. As we go from order zero to order

00:03:42.010 --> 00:03:44.140
one, order two, order three, order four, order five, all the way to

00:03:44.140 --> 00:03:47.710
eight. By eight, there is no error left because it nailed every single point.

00:03:49.160 --> 00:03:51.930
So you know its kind of a good, nut it doesn't feel quite

00:03:51.930 --> 00:03:54.540
right like the curves that we're looking there looked a little bit crazy.

