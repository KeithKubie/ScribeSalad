WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:04.539
[Music]

00:00:04.539 --> 00:00:04.549
 

00:00:04.549 --> 00:00:07.249
in the previous video we saw just how

00:00:07.249 --> 00:00:07.259
in the previous video we saw just how
 

00:00:07.259 --> 00:00:09.350
in the previous video we saw just how
important low-latency is when creating

00:00:09.350 --> 00:00:09.360
important low-latency is when creating
 

00:00:09.360 --> 00:00:11.720
important low-latency is when creating
interactive audio experiences but how

00:00:11.720 --> 00:00:11.730
interactive audio experiences but how
 

00:00:11.730 --> 00:00:13.339
interactive audio experiences but how
can you actually achieve this in your

00:00:13.339 --> 00:00:13.349
can you actually achieve this in your
 

00:00:13.349 --> 00:00:15.740
can you actually achieve this in your
app in this video I'll show you how the

00:00:15.740 --> 00:00:15.750
app in this video I'll show you how the
 

00:00:15.750 --> 00:00:18.200
app in this video I'll show you how the
oboe library helps you to create a low

00:00:18.200 --> 00:00:18.210
oboe library helps you to create a low
 

00:00:18.210 --> 00:00:20.380
oboe library helps you to create a low
latency audio stream for playing sound

00:00:20.380 --> 00:00:20.390
latency audio stream for playing sound
 

00:00:20.390 --> 00:00:22.910
latency audio stream for playing sound
you can play sound through a number of

00:00:22.910 --> 00:00:22.920
you can play sound through a number of
 

00:00:22.920 --> 00:00:24.890
you can play sound through a number of
different audio devices such as the

00:00:24.890 --> 00:00:24.900
different audio devices such as the
 

00:00:24.900 --> 00:00:27.740
different audio devices such as the
built-in speakers wired headphones USB

00:00:27.740 --> 00:00:27.750
built-in speakers wired headphones USB
 

00:00:27.750 --> 00:00:31.070
built-in speakers wired headphones USB
audio devices or over Bluetooth an audio

00:00:31.070 --> 00:00:31.080
audio devices or over Bluetooth an audio
 

00:00:31.080 --> 00:00:33.229
audio devices or over Bluetooth an audio
stream is used to move data from your

00:00:33.229 --> 00:00:33.239
stream is used to move data from your
 

00:00:33.239 --> 00:00:35.569
stream is used to move data from your
app to an audio device so that it can be

00:00:35.569 --> 00:00:35.579
app to an audio device so that it can be
 

00:00:35.579 --> 00:00:38.420
app to an audio device so that it can be
played to create an audio stream we use

00:00:38.420 --> 00:00:38.430
played to create an audio stream we use
 

00:00:38.430 --> 00:00:40.729
played to create an audio stream we use
an audio stream builder this allows us

00:00:40.729 --> 00:00:40.739
an audio stream builder this allows us
 

00:00:40.739 --> 00:00:43.010
an audio stream builder this allows us
to set properties on the stream it's

00:00:43.010 --> 00:00:43.020
to set properties on the stream it's
 

00:00:43.020 --> 00:00:44.299
to set properties on the stream it's
best to leave most properties

00:00:44.299 --> 00:00:44.309
best to leave most properties
 

00:00:44.309 --> 00:00:46.819
best to leave most properties
unspecified to allow OBO to pick the

00:00:46.819 --> 00:00:46.829
unspecified to allow OBO to pick the
 

00:00:46.829 --> 00:00:48.799
unspecified to allow OBO to pick the
optimal values for the default audio

00:00:48.799 --> 00:00:48.809
optimal values for the default audio
 

00:00:48.809 --> 00:00:52.040
optimal values for the default audio
device however to create a stream with

00:00:52.040 --> 00:00:52.050
device however to create a stream with
 

00:00:52.050 --> 00:00:53.930
device however to create a stream with
the lowest possible latency there are a

00:00:53.930 --> 00:00:53.940
the lowest possible latency there are a
 

00:00:53.940 --> 00:00:55.760
the lowest possible latency there are a
few properties which we should always

00:00:55.760 --> 00:00:55.770
few properties which we should always
 

00:00:55.770 --> 00:00:59.029
few properties which we should always
set the performance mode should be set

00:00:59.029 --> 00:00:59.039
set the performance mode should be set
 

00:00:59.039 --> 00:01:01.040
set the performance mode should be set
to low latency and the sharing mode

00:01:01.040 --> 00:01:01.050
to low latency and the sharing mode
 

00:01:01.050 --> 00:01:03.770
to low latency and the sharing mode
should be set to exclusive once the

00:01:03.770 --> 00:01:03.780
should be set to exclusive once the
 

00:01:03.780 --> 00:01:05.390
should be set to exclusive once the
stream properties have been set we can

00:01:05.390 --> 00:01:05.400
stream properties have been set we can
 

00:01:05.400 --> 00:01:07.640
stream properties have been set we can
open the stream by passing a reference

00:01:07.640 --> 00:01:07.650
open the stream by passing a reference
 

00:01:07.650 --> 00:01:10.190
open the stream by passing a reference
to an audio stream pointer be sure to

00:01:10.190 --> 00:01:10.200
to an audio stream pointer be sure to
 

00:01:10.200 --> 00:01:11.750
to an audio stream pointer be sure to
check the stream open successfully

00:01:11.750 --> 00:01:11.760
check the stream open successfully
 

00:01:11.760 --> 00:01:13.640
check the stream open successfully
otherwise you won't have a valid stream

00:01:13.640 --> 00:01:13.650
otherwise you won't have a valid stream
 

00:01:13.650 --> 00:01:16.249
otherwise you won't have a valid stream
object if there was a problem you can

00:01:16.249 --> 00:01:16.259
object if there was a problem you can
 

00:01:16.259 --> 00:01:18.109
object if there was a problem you can
convert the error to a human readable

00:01:18.109 --> 00:01:18.119
convert the error to a human readable
 

00:01:18.119 --> 00:01:20.780
convert the error to a human readable
string using convert to text in fact

00:01:20.780 --> 00:01:20.790
string using convert to text in fact
 

00:01:20.790 --> 00:01:22.820
string using convert to text in fact
convert to text can be used to convert

00:01:22.820 --> 00:01:22.830
convert to text can be used to convert
 

00:01:22.830 --> 00:01:26.179
convert to text can be used to convert
many OBO objects to text once the stream

00:01:26.179 --> 00:01:26.189
many OBO objects to text once the stream
 

00:01:26.189 --> 00:01:27.859
many OBO objects to text once the stream
has been successfully opened you can

00:01:27.859 --> 00:01:27.869
has been successfully opened you can
 

00:01:27.869 --> 00:01:30.620
has been successfully opened you can
start it asynchronously you can now send

00:01:30.620 --> 00:01:30.630
start it asynchronously you can now send
 

00:01:30.630 --> 00:01:33.800
start it asynchronously you can now send
data to the audio device to put data

00:01:33.800 --> 00:01:33.810
data to the audio device to put data
 

00:01:33.810 --> 00:01:35.929
data to the audio device to put data
into an audio stream we can either write

00:01:35.929 --> 00:01:35.939
into an audio stream we can either write
 

00:01:35.939 --> 00:01:37.910
into an audio stream we can either write
directly into it or have the audio

00:01:37.910 --> 00:01:37.920
directly into it or have the audio
 

00:01:37.920 --> 00:01:40.210
directly into it or have the audio
stream request data using a callback

00:01:40.210 --> 00:01:40.220
stream request data using a callback
 

00:01:40.220 --> 00:01:43.130
stream request data using a callback
callbacks give us the lowest latency so

00:01:43.130 --> 00:01:43.140
callbacks give us the lowest latency so
 

00:01:43.140 --> 00:01:44.810
callbacks give us the lowest latency so
it's best to use them for interactive

00:01:44.810 --> 00:01:44.820
it's best to use them for interactive
 

00:01:44.820 --> 00:01:46.969
it's best to use them for interactive
audio apps to create a callback object

00:01:46.969 --> 00:01:46.979
audio apps to create a callback object
 

00:01:46.979 --> 00:01:49.639
audio apps to create a callback object
sub class audio stream callback and

00:01:49.639 --> 00:01:49.649
sub class audio stream callback and
 

00:01:49.649 --> 00:01:53.270
sub class audio stream callback and
override the on audio ready method this

00:01:53.270 --> 00:01:53.280
override the on audio ready method this
 

00:01:53.280 --> 00:01:54.920
override the on audio ready method this
method is called when the audio stream

00:01:54.920 --> 00:01:54.930
method is called when the audio stream
 

00:01:54.930 --> 00:01:57.709
method is called when the audio stream
requires more data it has three

00:01:57.709 --> 00:01:57.719
requires more data it has three
 

00:01:57.719 --> 00:02:00.109
requires more data it has three
parameters a pointer to the audio stream

00:02:00.109 --> 00:02:00.119
parameters a pointer to the audio stream
 

00:02:00.119 --> 00:02:02.660
parameters a pointer to the audio stream
object a container array which we can

00:02:02.660 --> 00:02:02.670
object a container array which we can
 

00:02:02.670 --> 00:02:05.840
object a container array which we can
write our audio data into this has type

00:02:05.840 --> 00:02:05.850
write our audio data into this has type
 

00:02:05.850 --> 00:02:07.670
write our audio data into this has type
void star because the format of the

00:02:07.670 --> 00:02:07.680
void star because the format of the
 

00:02:07.680 --> 00:02:09.410
void star because the format of the
audio stream can either be 16-bit

00:02:09.410 --> 00:02:09.420
audio stream can either be 16-bit
 

00:02:09.420 --> 00:02:12.380
audio stream can either be 16-bit
integers or floats it's up to us to cast

00:02:12.380 --> 00:02:12.390
integers or floats it's up to us to cast
 

00:02:12.390 --> 00:02:13.720
integers or floats it's up to us to cast
to the correct

00:02:13.720 --> 00:02:13.730
to the correct
 

00:02:13.730 --> 00:02:16.520
to the correct
lastly num frames tells us how many

00:02:16.520 --> 00:02:16.530
lastly num frames tells us how many
 

00:02:16.530 --> 00:02:19.309
lastly num frames tells us how many
frames of audio are required each frame

00:02:19.309 --> 00:02:19.319
frames of audio are required each frame
 

00:02:19.319 --> 00:02:21.619
frames of audio are required each frame
contains one or more samples the number

00:02:21.619 --> 00:02:21.629
contains one or more samples the number
 

00:02:21.629 --> 00:02:23.330
contains one or more samples the number
of samples will depend on the streams

00:02:23.330 --> 00:02:23.340
of samples will depend on the streams
 

00:02:23.340 --> 00:02:25.580
of samples will depend on the streams
channel count for example a stereo

00:02:25.580 --> 00:02:25.590
channel count for example a stereo
 

00:02:25.590 --> 00:02:28.789
channel count for example a stereo
stream has two samples per frame one for

00:02:28.789 --> 00:02:28.799
stream has two samples per frame one for
 

00:02:28.799 --> 00:02:30.289
stream has two samples per frame one for
the left channel and one for the right

00:02:30.289 --> 00:02:30.299
the left channel and one for the right
 

00:02:30.299 --> 00:02:32.750
the left channel and one for the right
channel num frames also tells us the

00:02:32.750 --> 00:02:32.760
channel num frames also tells us the
 

00:02:32.760 --> 00:02:34.600
channel num frames also tells us the
maximum time we have to create the data

00:02:34.600 --> 00:02:34.610
maximum time we have to create the data
 

00:02:34.610 --> 00:02:37.250
maximum time we have to create the data
failure to supply data within this time

00:02:37.250 --> 00:02:37.260
failure to supply data within this time
 

00:02:37.260 --> 00:02:40.309
failure to supply data within this time
is known as an under run as an example

00:02:40.309 --> 00:02:40.319
is known as an under run as an example
 

00:02:40.319 --> 00:02:42.759
is known as an under run as an example
if our audio stream has a sample rate of

00:02:42.759 --> 00:02:42.769
if our audio stream has a sample rate of
 

00:02:42.769 --> 00:02:46.399
if our audio stream has a sample rate of
48,000 samples per second and 192 frames

00:02:46.399 --> 00:02:46.409
48,000 samples per second and 192 frames
 

00:02:46.409 --> 00:02:48.619
48,000 samples per second and 192 frames
are requested this gives us 4

00:02:48.619 --> 00:02:48.629
are requested this gives us 4
 

00:02:48.629 --> 00:02:51.259
are requested this gives us 4
milliseconds to create this data in the

00:02:51.259 --> 00:02:51.269
milliseconds to create this data in the
 

00:02:51.269 --> 00:02:53.240
milliseconds to create this data in the
real world we want to keep well under

00:02:53.240 --> 00:02:53.250
real world we want to keep well under
 

00:02:53.250 --> 00:02:55.009
real world we want to keep well under
this deadline to allow for system

00:02:55.009 --> 00:02:55.019
this deadline to allow for system
 

00:02:55.019 --> 00:02:57.949
this deadline to allow for system
overhead and late callbacks to give you

00:02:57.949 --> 00:02:57.959
overhead and late callbacks to give you
 

00:02:57.959 --> 00:02:59.720
overhead and late callbacks to give you
the best chance of meeting this audio

00:02:59.720 --> 00:02:59.730
the best chance of meeting this audio
 

00:02:59.730 --> 00:03:02.149
the best chance of meeting this audio
deadline on audio ready is called on a

00:03:02.149 --> 00:03:02.159
deadline on audio ready is called on a
 

00:03:02.159 --> 00:03:04.550
deadline on audio ready is called on a
high priority system thread which means

00:03:04.550 --> 00:03:04.560
high priority system thread which means
 

00:03:04.560 --> 00:03:06.649
high priority system thread which means
it won't be preempted by lower priority

00:03:06.649 --> 00:03:06.659
it won't be preempted by lower priority
 

00:03:06.659 --> 00:03:08.990
it won't be preempted by lower priority
threads but it's critical that you don't

00:03:08.990 --> 00:03:09.000
threads but it's critical that you don't
 

00:03:09.000 --> 00:03:11.059
threads but it's critical that you don't
do too much work or block inside this

00:03:11.059 --> 00:03:11.069
do too much work or block inside this
 

00:03:11.069 --> 00:03:13.849
do too much work or block inside this
method more detailed guidance on what

00:03:13.849 --> 00:03:13.859
method more detailed guidance on what
 

00:03:13.859 --> 00:03:15.440
method more detailed guidance on what
you should and shouldn't do here can be

00:03:15.440 --> 00:03:15.450
you should and shouldn't do here can be
 

00:03:15.450 --> 00:03:18.159
you should and shouldn't do here can be
found in the full guide to ovo on github

00:03:18.159 --> 00:03:18.169
found in the full guide to ovo on github
 

00:03:18.169 --> 00:03:21.080
found in the full guide to ovo on github
inside on audio ready we write the

00:03:21.080 --> 00:03:21.090
inside on audio ready we write the
 

00:03:21.090 --> 00:03:22.699
inside on audio ready we write the
requested number of audio frames into

00:03:22.699 --> 00:03:22.709
requested number of audio frames into
 

00:03:22.709 --> 00:03:25.220
requested number of audio frames into
the audio data array this could be

00:03:25.220 --> 00:03:25.230
the audio data array this could be
 

00:03:25.230 --> 00:03:27.589
the audio data array this could be
generated using digital synthesis or be

00:03:27.589 --> 00:03:27.599
generated using digital synthesis or be
 

00:03:27.599 --> 00:03:29.800
generated using digital synthesis or be
supplied from pre-recorded audio data

00:03:29.800 --> 00:03:29.810
supplied from pre-recorded audio data
 

00:03:29.810 --> 00:03:32.750
supplied from pre-recorded audio data
finally return a data callback result

00:03:32.750 --> 00:03:32.760
finally return a data callback result
 

00:03:32.760 --> 00:03:35.119
finally return a data callback result
this can either be continued which

00:03:35.119 --> 00:03:35.129
this can either be continued which
 

00:03:35.129 --> 00:03:36.680
this can either be continued which
indicates that we want the callbacks to

00:03:36.680 --> 00:03:36.690
indicates that we want the callbacks to
 

00:03:36.690 --> 00:03:39.530
indicates that we want the callbacks to
continue or stop which indicates that

00:03:39.530 --> 00:03:39.540
continue or stop which indicates that
 

00:03:39.540 --> 00:03:41.479
continue or stop which indicates that
the stream should stop with no more

00:03:41.479 --> 00:03:41.489
the stream should stop with no more
 

00:03:41.489 --> 00:03:42.430
the stream should stop with no more
callbacks

00:03:42.430 --> 00:03:42.440
callbacks
 

00:03:42.440 --> 00:03:44.479
callbacks
once you've finished creating your

00:03:44.479 --> 00:03:44.489
once you've finished creating your
 

00:03:44.489 --> 00:03:46.309
once you've finished creating your
callback object you can link it to your

00:03:46.309 --> 00:03:46.319
callback object you can link it to your
 

00:03:46.319 --> 00:03:48.170
callback object you can link it to your
stream using the builder we created

00:03:48.170 --> 00:03:48.180
stream using the builder we created
 

00:03:48.180 --> 00:03:51.110
stream using the builder we created
earlier there's one final step we need

00:03:51.110 --> 00:03:51.120
earlier there's one final step we need
 

00:03:51.120 --> 00:03:53.059
earlier there's one final step we need
to take to ensure our audio stream has

00:03:53.059 --> 00:03:53.069
to take to ensure our audio stream has
 

00:03:53.069 --> 00:03:55.430
to take to ensure our audio stream has
the lowest possible latency setting its

00:03:55.430 --> 00:03:55.440
the lowest possible latency setting its
 

00:03:55.440 --> 00:03:58.159
the lowest possible latency setting its
buffer size the audio streams buffer

00:03:58.159 --> 00:03:58.169
buffer size the audio streams buffer
 

00:03:58.169 --> 00:03:59.990
buffer size the audio streams buffer
size affects the time it takes for an

00:03:59.990 --> 00:04:00.000
size affects the time it takes for an
 

00:04:00.000 --> 00:04:02.180
size affects the time it takes for an
audio frame to travel through the stream

00:04:02.180 --> 00:04:02.190
audio frame to travel through the stream
 

00:04:02.190 --> 00:04:04.490
audio frame to travel through the stream
to the audio device the larger the

00:04:04.490 --> 00:04:04.500
to the audio device the larger the
 

00:04:04.500 --> 00:04:06.259
to the audio device the larger the
buffer the longer it takes and the

00:04:06.259 --> 00:04:06.269
buffer the longer it takes and the
 

00:04:06.269 --> 00:04:09.080
buffer the longer it takes and the
higher the latency an optimally sized

00:04:09.080 --> 00:04:09.090
higher the latency an optimally sized
 

00:04:09.090 --> 00:04:11.149
higher the latency an optimally sized
buffer provides a good trade-off between

00:04:11.149 --> 00:04:11.159
buffer provides a good trade-off between
 

00:04:11.159 --> 00:04:14.719
buffer provides a good trade-off between
latency and under on protection the

00:04:14.719 --> 00:04:14.729
latency and under on protection the
 

00:04:14.729 --> 00:04:16.610
latency and under on protection the
buffer size must be a multiple of the

00:04:16.610 --> 00:04:16.620
buffer size must be a multiple of the
 

00:04:16.620 --> 00:04:18.620
buffer size must be a multiple of the
streams burst size which is the number

00:04:18.620 --> 00:04:18.630
streams burst size which is the number
 

00:04:18.630 --> 00:04:21.020
streams burst size which is the number
of frames the audio device consumes in a

00:04:21.020 --> 00:04:21.030
of frames the audio device consumes in a
 

00:04:21.030 --> 00:04:23.870
of frames the audio device consumes in a
single read a good rule of thumb is to

00:04:23.870 --> 00:04:23.880
single read a good rule of thumb is to
 

00:04:23.880 --> 00:04:26.310
single read a good rule of thumb is to
use twice this burst size

00:04:26.310 --> 00:04:26.320
use twice this burst size
 

00:04:26.320 --> 00:04:28.860
use twice this burst size
this means that if occasionally we miss

00:04:28.860 --> 00:04:28.870
this means that if occasionally we miss
 

00:04:28.870 --> 00:04:30.990
this means that if occasionally we miss
our audio callback deadline the user

00:04:30.990 --> 00:04:31.000
our audio callback deadline the user
 

00:04:31.000 --> 00:04:33.660
our audio callback deadline the user
will not hear an audio glitch as long as

00:04:33.660 --> 00:04:33.670
will not hear an audio glitch as long as
 

00:04:33.670 --> 00:04:36.810
will not hear an audio glitch as long as
the next callback runs on time use get

00:04:36.810 --> 00:04:36.820
the next callback runs on time use get
 

00:04:36.820 --> 00:04:38.430
the next callback runs on time use get
frames per burst to get the burst size

00:04:38.430 --> 00:04:38.440
frames per burst to get the burst size
 

00:04:38.440 --> 00:04:41.100
frames per burst to get the burst size
and set buffer size in frames to set the

00:04:41.100 --> 00:04:41.110
and set buffer size in frames to set the
 

00:04:41.110 --> 00:04:43.680
and set buffer size in frames to set the
buffer size now that all the stream

00:04:43.680 --> 00:04:43.690
buffer size now that all the stream
 

00:04:43.690 --> 00:04:45.420
buffer size now that all the stream
properties are set we can start the

00:04:45.420 --> 00:04:45.430
properties are set we can start the
 

00:04:45.430 --> 00:04:47.540
properties are set we can start the
stream callbacks will start immediately

00:04:47.540 --> 00:04:47.550
stream callbacks will start immediately
 

00:04:47.550 --> 00:04:49.740
stream callbacks will start immediately
and once you finish with the stream

00:04:49.740 --> 00:04:49.750
and once you finish with the stream
 

00:04:49.750 --> 00:04:52.350
and once you finish with the stream
remember to close it after you close a

00:04:52.350 --> 00:04:52.360
remember to close it after you close a
 

00:04:52.360 --> 00:04:54.030
remember to close it after you close a
stream it cannot be accessed any more

00:04:54.030 --> 00:04:54.040
stream it cannot be accessed any more
 

00:04:54.040 --> 00:04:56.100
stream it cannot be accessed any more
you should now have everything you need

00:04:56.100 --> 00:04:56.110
you should now have everything you need
 

00:04:56.110 --> 00:04:58.410
you should now have everything you need
to play audio using a low latency audio

00:04:58.410 --> 00:04:58.420
to play audio using a low latency audio
 

00:04:58.420 --> 00:05:01.230
to play audio using a low latency audio
stream for a working example check out

00:05:01.230 --> 00:05:01.240
stream for a working example check out
 

00:05:01.240 --> 00:05:03.630
stream for a working example check out
the hello oboe sample on github which

00:05:03.630 --> 00:05:03.640
the hello oboe sample on github which
 

00:05:03.640 --> 00:05:04.920
the hello oboe sample on github which
shows you how to create a simple

00:05:04.920 --> 00:05:04.930
shows you how to create a simple
 

00:05:04.930 --> 00:05:07.920
shows you how to create a simple
synthesizer app it also demonstrates how

00:05:07.920 --> 00:05:07.930
synthesizer app it also demonstrates how
 

00:05:07.930 --> 00:05:10.350
synthesizer app it also demonstrates how
to handle audio device changes such as

00:05:10.350 --> 00:05:10.360
to handle audio device changes such as
 

00:05:10.360 --> 00:05:11.460
to handle audio device changes such as
when the user connects their headphones

00:05:11.460 --> 00:05:11.470
when the user connects their headphones
 

00:05:11.470 --> 00:05:15.030
when the user connects their headphones
a link can be found below in the next

00:05:15.030 --> 00:05:15.040
a link can be found below in the next
 

00:05:15.040 --> 00:05:16.770
a link can be found below in the next
episode I'll show you how to record

00:05:16.770 --> 00:05:16.780
episode I'll show you how to record
 

00:05:16.780 --> 00:05:18.750
episode I'll show you how to record
sound through a microphone using low

00:05:18.750 --> 00:05:18.760
sound through a microphone using low
 

00:05:18.760 --> 00:05:21.240
sound through a microphone using low
latency input streams that's all for now

00:05:21.240 --> 00:05:21.250
latency input streams that's all for now
 

00:05:21.250 --> 00:05:24.800
latency input streams that's all for now
so good luck and go make some noise

00:05:24.800 --> 00:05:24.810
so good luck and go make some noise
 

00:05:24.810 --> 00:05:27.910
so good luck and go make some noise
[Music]

