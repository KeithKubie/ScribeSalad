WEBVTT
Kind: captions
Language: en

00:00:00.345 --> 00:00:03.100
Let's compare the two methods side by side.

00:00:03.100 --> 00:00:07.580
Recall, this was my cross-correlation formulation.

00:00:07.580 --> 00:00:11.430
This is my convolution formulation.

00:00:11.430 --> 00:00:13.310
You will notice the big difference here.

00:00:14.640 --> 00:00:19.510
This one, the index i minus u, j minus v.

00:00:19.510 --> 00:00:21.080
While here we're adding it.

00:00:21.080 --> 00:00:24.550
Plus u and j plus v.

00:00:24.550 --> 00:00:28.690
Again, the same looping criteria that we looked at prior, which has basically

00:00:28.690 --> 00:00:35.830
been being able to loop over the whole image in both the two dimensions.

00:00:35.830 --> 00:00:39.550
So notice between the two formulations of cross-correlation and

00:00:39.550 --> 00:00:41.890
convolution, there is one difference here.

00:00:43.130 --> 00:00:46.710
There is a plus index here and a minus index here.

00:00:46.710 --> 00:00:48.270
What does that mean?

00:00:48.270 --> 00:00:49.710
This is, was our kernel.

00:00:49.710 --> 00:00:51.790
We've been playing around with this kernel all the time.

00:00:51.790 --> 00:00:55.810
Let's actually play around with it a little bit more to understand how and

00:00:55.810 --> 00:00:59.890
what are the differences between cross-correlation and convolution.

00:00:59.890 --> 00:01:03.150
To help me let's actually I'm going to just give you an example of

00:01:03.150 --> 00:01:04.800
just a small three by three.

00:01:04.800 --> 00:01:07.020
Again notice if it's a three by three,

00:01:07.020 --> 00:01:10.600
the neighborhood is basically k is equal to 1.

00:01:10.600 --> 00:01:13.410
So now let's look at this formulation here.

00:01:13.410 --> 00:01:14.800
k is equal to 1.

00:01:14.800 --> 00:01:21.520
Remember, this one is an element that has indices 0 and 0 in two dimensions.

00:01:21.520 --> 00:01:22.300
k is equal to 1.

00:01:22.300 --> 00:01:27.508
The first element we will be basically doing is i minus, 1,

00:01:27.508 --> 00:01:30.864
so this is the index minus 1 by minus 1.

00:01:30.864 --> 00:01:34.267
And similarly as I'm looping through it,

00:01:34.267 --> 00:01:39.760
you would notice that this would be 0 minus 1, then of course,.

00:01:41.330 --> 00:01:45.320
This would be 1 and minus 1.

00:01:45.320 --> 00:01:48.660
Traversing through this way, this you pretty much know the answer for

00:01:48.660 --> 00:01:54.020
this one is 1 and 1, and this would be minus 1 and 1.

00:01:55.220 --> 00:01:57.084
So notice this is how we loop around, so

00:01:57.084 --> 00:02:02.060
in essence when I did cross-correlation, I started gotten a, first b, first c,

00:02:02.060 --> 00:02:05.300
first d, first e, first f, first and then g, h, and i.

00:02:05.300 --> 00:02:10.389
And that's how I actually did the looping and how I got the result.

00:02:10.389 --> 00:02:15.870
And now let's look at this example, now my k is minus 1, but

00:02:15.870 --> 00:02:20.960
minus, minus becomes 1, so basically the first element I pick up

00:02:20.960 --> 00:02:25.270
in convolution would be this 1, okay.

00:02:25.270 --> 00:02:30.362
And the second one I would pick up would be this one,

00:02:30.362 --> 00:02:33.690
3, 4, 5, 6, 7, 8, 9.

00:02:34.710 --> 00:02:40.320
Here in this case for this instance, I started with first.

00:02:40.320 --> 00:02:43.740
Then traversing it this way, and traversing it this way.

00:02:43.740 --> 00:02:46.690
In case of convolution, untraversing it.

00:02:49.660 --> 00:02:52.430
In essence, by just changing the sign here,

00:02:52.430 --> 00:02:57.640
I've actually now given myself the ability to the flip, before I do anything.

00:02:58.990 --> 00:03:00.970
And that's important part on what we want to actually do.

00:03:00.970 --> 00:03:05.420
And that was a difference by just changing this no, sign here allows us to do.

00:03:05.420 --> 00:03:09.820
So in essence that's how we're able to get this completely flipped kernel.

