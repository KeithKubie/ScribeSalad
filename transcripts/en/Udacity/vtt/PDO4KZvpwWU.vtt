WEBVTT
Kind: captions
Language: en

00:00:00.202 --> 00:00:03.833
So today we're going to discuss how you implement reduce in a serial way,

00:00:03.833 --> 00:00:05.915
sort of the traditional way that we all know and love.

00:00:05.915 --> 00:00:08.692
And so the structure of this looks a little bit like map.

00:00:08.692 --> 00:00:11.408
In both reduce and map, we loop through all of our elements.

00:00:11.408 --> 00:00:13.358
But it's different in an important way.

00:00:13.358 --> 00:00:16.224
In map each loop iteration is independent.

00:00:16.224 --> 00:00:20.503
We can run these simultaneously and in any order we choose.

00:00:20.503 --> 00:00:25.639
In reduce, on the other hand, each iteration is dependent on the previous iteration.

00:00:26.592 --> 00:00:31.143
And here's the serial code to sum a series of elements, and this is relatively straightforward.

00:00:31.143 --> 00:00:35.055
We have a serial variable named sum, we initialize it to 0.

00:00:35.055 --> 00:00:39.231
We then loop through our set of elements and on each iteration

00:00:39.231 --> 00:00:42.570
add the current element to the previous sum.

00:00:42.570 --> 00:00:45.396
And so when we're done we can return this sum variable and we're done.

00:00:45.396 --> 00:00:48.361
So on the 1st iteration we do this 1st add here,

00:00:48.361 --> 00:00:51.625
and we take the result on the 2nd iteration, do a 2nd add here.

00:00:51.826 --> 00:00:54.488
On the 3rd iteration we do a 3rd add and so on.

00:00:54.488 --> 00:00:56.833
So what's different about this than the map example

00:00:56.833 --> 00:01:00.489
is that this add operation is dependent on the previous one,

00:01:00.489 --> 00:01:04.236
whereas in map, all these things can happen in parallel and at the same time.

00:01:04.236 --> 00:01:07.577
So now let's take a little bit of a closer look at a serial reduction.

00:01:07.577 --> 00:01:10.620
We're going to take 5 pieces of data here--a, b, c, d, e--

00:01:10.620 --> 00:01:14.117
and reduce them using the plus operator.

00:01:14.117 --> 00:01:18.575
First, how many operations does it take to perform this serial reduction?

00:01:18.575 --> 00:01:22.729
So we can just count the operations--1, 2, 3, 4.

00:01:22.729 --> 00:01:25.365
So 4 operations That's our amount of work.

00:01:25.365 --> 00:01:31.996
The next thing we're going to do is count the number of steps it takes. So that would be 1, 2, 3, 4.

00:01:31.996 --> 00:01:35.715
So it's also 4 steps. So a quiz.

00:01:35.715 --> 00:01:39.680
Which of these 4 statements are true about a serial reduction code

00:01:39.680 --> 00:01:44.217
running on an input of size n, arbitrary size?

00:01:44.217 --> 00:01:49.782
First, it takes n operations, then it takes n - 1 operations,

00:01:49.782 --> 00:01:54.976
or its work complexity is O(n), proportional to the size of the input,

00:01:54.976 --> 00:01:59.918
or its step complexity is O(1), independent of the size of the input.

00:01:59.918 --> 00:02:01.868
So please check which ones are true.

