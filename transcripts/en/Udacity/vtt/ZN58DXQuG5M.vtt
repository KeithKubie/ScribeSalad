WEBVTT
Kind: captions
Language: en

00:00:00.700 --> 00:00:04.350
The book describes five creational patterns.

00:00:04.350 --> 00:00:07.620
Their names are singleton, prototype, builder, factory method and

00:00:07.620 --> 00:00:09.340
abstract factory.

00:00:09.340 --> 00:00:12.088
In a minute we will look at the singleton pattern.

00:00:12.088 --> 00:00:15.250
The prototype pattern is a way for

00:00:15.250 --> 00:00:19.280
designers to make use of a different kind of inheritance.

00:00:20.350 --> 00:00:24.770
Most object oriented languages provide class based inheritance.

00:00:24.770 --> 00:00:29.000
But some languages like LISP, provide a different way to inherit.

00:00:29.000 --> 00:00:32.600
Instead of inheriting from classes, you inherit from other objects.

00:00:32.600 --> 00:00:35.550
The prototype pattern tells you how you might get that same

00:00:35.550 --> 00:00:37.910
facility within a class based language.

00:00:37.910 --> 00:00:43.150
The builder patterns gives you a way of separating the actual construction of

00:00:43.150 --> 00:00:47.320
the object from how it's pieces are built.

00:00:47.320 --> 00:00:51.000
Factory method is a way that let's the sub classes decide

00:00:51.000 --> 00:00:53.190
which class to instantiate.

00:00:53.190 --> 00:00:56.400
The framework as a whole merely ask for creation.

00:00:56.400 --> 00:00:59.890
Specific creation is done by a concrete factory.

00:00:59.890 --> 00:01:03.990
And if you want to apply this method to a set of related classes,

00:01:03.990 --> 00:01:06.870
you can use the abstract factory pattern.

00:01:06.870 --> 00:01:11.780
For example, user interface tool kits may allow you to specify the look and feel

00:01:11.780 --> 00:01:16.230
of a set of widgets, and the abstract factory has a way of accomplishing that.

