WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:03.310
When writing web apps,
you'll encounter a lot of APIs

00:00:03.310 --> 00:00:04.580
you'll have to talk to.

00:00:04.580 --> 00:00:06.410
Some of them might
be JavaScript APIs

00:00:06.410 --> 00:00:08.118
that don't involve
much more than calling

00:00:08.118 --> 00:00:09.699
a function in JavaScript.

00:00:09.699 --> 00:00:11.750
Other APIs as are
provided by third parties

00:00:11.750 --> 00:00:15.000
and require you to make
HTTP requests yourself.

00:00:15.000 --> 00:00:16.699
A RESTful API is
one that follows

00:00:16.699 --> 00:00:20.570
a design called REST that works
especially well with HTTP.

00:00:20.570 --> 00:00:22.969
REST stands for
Representational State Transfer.

00:00:22.969 --> 00:00:26.390
But let's be honest, that isn't
really a very descriptive name.

00:00:26.390 --> 00:00:29.039
Not all APIs follow the
rest pattern, but many do.

00:00:29.039 --> 00:00:31.579
So let's take a look at
the underlying concept.

00:00:31.579 --> 00:00:34.699
The basic entities are
collections and objects

00:00:34.700 --> 00:00:36.560
inside those collections.

00:00:36.560 --> 00:00:38.900
The general pattern to
retrieve items from collections

00:00:38.899 --> 00:00:41.509
is using a GET request with
both the collection name

00:00:41.509 --> 00:00:43.969
and the unique item
name in that collection.

00:00:43.969 --> 00:00:46.049
For example, if I want
to look up Richard,

00:00:46.049 --> 00:00:47.989
I'd send this request,
and the server

00:00:47.990 --> 00:00:50.954
would get the record containing
the data about Richard.

00:00:50.954 --> 00:00:53.629
If I wanted to update
the data in that record,

00:00:53.630 --> 00:00:56.690
I'd use a PUT request and
append the updated information

00:00:56.689 --> 00:00:58.039
to the request.

00:00:58.039 --> 00:01:00.140
Every subsequent GET
request should now

00:01:00.140 --> 00:01:02.460
yield the updated record.

00:01:02.460 --> 00:01:05.000
A POST request is used
very similar to PUT.

00:01:05.000 --> 00:01:07.280
But instead of updating
existing records,

00:01:07.280 --> 00:01:10.070
you use it to
create new records.

00:01:10.069 --> 00:01:11.719
Notice that you
usually do not provide

00:01:11.719 --> 00:01:13.969
the name under which the
new record will be created

00:01:13.969 --> 00:01:16.819
but let the server make
that choice for you.

00:01:16.819 --> 00:01:18.439
The response to
that POST request

00:01:18.439 --> 00:01:21.679
is usually a redirect to
the newly created record.

00:01:21.680 --> 00:01:24.680
And lastly, DELETE is
just what you think it is.

00:01:24.680 --> 00:01:28.550
It removes items
from the collection.

