WEBVTT
Kind: captions
Language: en

00:00:00.012 --> 00:00:03.690
So, let me show you how that goes wrong. When we define my_append, we create

00:00:03.690 --> 00:00:07.820
this new list. The default parameter gets initialized to this new list object

00:00:07.820 --> 00:00:13.274
which is currently empty. Then, we make our first call to my_append. There's no

00:00:13.274 --> 00:00:18.290
default parameters so within the body the value of lst is this object, we append

00:00:18.290 --> 00:00:22.225
to it. So now, after the first call, the value of lst is a list containing one

00:00:22.225 --> 00:00:26.558
element, apple. We can see that p has the value that we expected. Now, if we

00:00:26.558 --> 00:00:30.142
call my_append, again passing in just a single element, well, instead of the

00:00:30.142 --> 00:00:33.737
value of list having an empty list, it's going to have the value apple. So, what

00:00:33.737 --> 00:00:37.580
we will get back for q is the result of appending orange to apple, which is the

00:00:37.580 --> 00:00:41.825
list apple, orange. The moral is that we should avoid default parameter values

00:00:41.825 --> 00:00:45.470
that are mutable objects. This can lead to really hard to find bugs that can

00:00:45.470 --> 00:00:49.200
take many hours to figure out if you're not careful. There is a correct way to

00:00:49.200 --> 00:00:53.680
do this, which is to assign the default perimeter to an immutable value. Here,

00:00:53.680 --> 00:00:58.168
we'll use the value, None, and then every time it's called, we're checking if it

00:00:58.168 --> 00:01:03.130
has the default value, None. If it does, we initialize list to a new empty list.

00:01:03.130 --> 00:01:07.745
Note that this happens every time my_append is called so every time we'll get a

00:01:07.745 --> 00:01:12.289
new empty list object, instead of modifying the same one, which is what we're

00:01:12.289 --> 00:01:16.244
doing before. This example is taken from David Goodger's excellent document,

00:01:16.244 --> 00:01:19.883
Code Like a Pythonista: Idiomatic Python, and there's a link to that below.

