WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.988
Stratton calls the third technique tiling.

00:00:01.988 --> 00:00:05.652
Often multiple threads or, more generally, multiple computational tasks

00:00:05.652 --> 00:00:08.930
will need to access overlapping parts of a data structure.

00:00:08.930 --> 00:00:14.006
Stratton uses the term tiling to refer to buffering data onto fast on-chip storage

00:00:14.006 --> 00:00:18.765
where it will be repeatedly accessed. Now, this is an old, old idea.

00:00:18.765 --> 00:00:22.245
On the CPU it generally means sizing the data accessed by a program

00:00:22.245 --> 00:00:25.670
so that it will fit naturally into the CPU core's on-chip cache.

00:00:25.670 --> 00:00:29.396
There's an implicit copy going on between the locations in DRAM

00:00:29.396 --> 00:00:32.581
and the fast on-chip storage--in this case, the cache.

00:00:32.581 --> 00:00:37.958
Another way to do it is to explicitly allocate some of this fast memory to be used as a scratchpad.

00:00:37.958 --> 00:00:40.861
And on the GPU in CUDA, this is what we call shared memory.

00:00:40.861 --> 00:00:44.483
And then we can have a set of threads that do the explicit copy,

00:00:44.483 --> 00:00:48.825
pulling memory in from DRAM, explicitly laying it out in the scratchpad memory,

00:00:48.825 --> 00:00:52.298
in the shared memory, just the way we want it, where then we'll operate on it.

00:00:52.298 --> 00:00:57.580
It's worth emphasizing GPUs run so many threads that the amount of cache per thread is limited.

00:00:57.580 --> 00:01:00.971
So this style of cache blocking which is what you call this technique on the CPU,

00:01:00.971 --> 00:01:03.575
isn't so great for the GPU.

00:01:03.575 --> 00:01:06.692
A better approach is to explicitly copy data that will be reused by the threads

00:01:06.692 --> 00:01:10.352
in a thread block into the fast shared memory that's available and set aside for that block.

00:01:10.352 --> 00:01:11.914
Let's have a quiz.

00:01:11.914 --> 00:01:15.151
Which of the following 2 code snippets would benefit from tiling?

00:01:15.151 --> 00:01:21.138
The first snippet averages values from 5 arrays; the second averages 5 values from 1 array.

