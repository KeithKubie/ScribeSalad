WEBVTT
Kind: captions
Language: en

00:00:05.900 --> 00:00:08.250
TODD KERPELMAN: Hello, and
welcome to our second official

00:00:08.250 --> 00:00:10.760
"Google Play Games Show"--

00:00:10.760 --> 00:00:12.140
not a game show, but
a show about

00:00:12.140 --> 00:00:13.550
Google Play Game Services.

00:00:13.550 --> 00:00:14.350
BRUNO OLIVEIRA: Important
difference.

00:00:14.350 --> 00:00:14.890
TODD KERPELMAN: Yes--

00:00:14.890 --> 00:00:15.960
I'm Todd Kerpelman.

00:00:15.960 --> 00:00:18.500
I'm a developer advocate here at
Google Play Game Services.

00:00:18.500 --> 00:00:21.280
BRUNO OLIVEIRA: And I'm Bruno
Oliveira, and I'm a developer

00:00:21.280 --> 00:00:23.130
programs engineer at the Google
Play Game Services.

00:00:23.130 --> 00:00:25.630
And we are broadcasting actually
from our advanced

00:00:25.630 --> 00:00:28.080
physics lab where we are
researching very advanced

00:00:28.080 --> 00:00:30.840
materials like this invisible
Android doll.

00:00:30.840 --> 00:00:33.430
TODD KERPELMAN: Yes, I've
discovered I now have the

00:00:33.430 --> 00:00:36.400
x-ray app on my phone,
which is pretty cool.

00:00:36.400 --> 00:00:40.090
It looks through all sorts of
organic matter, which I think

00:00:40.090 --> 00:00:41.210
will be coming out
pretty soon.

00:00:41.210 --> 00:00:42.010
We're working on that.

00:00:42.010 --> 00:00:43.480
BRUNO OLIVEIRA: So as you can
see, it's very advanced and

00:00:43.480 --> 00:00:45.400
top secret stuff that
we have here.

00:00:45.400 --> 00:00:47.180
And this is in no way
a green screen.

00:00:47.180 --> 00:00:48.780
TODD KERPELMAN: Not
at all, no--

00:00:48.780 --> 00:00:51.390
I actually did not realize until
I was in this studio

00:00:51.390 --> 00:00:53.030
today that this is fake.

00:00:53.030 --> 00:00:54.730
I thought this was a
real background.

00:00:54.730 --> 00:00:58.310
So we're letting you
in on the magic.

00:00:58.310 --> 00:00:59.650
BRUNO OLIVEIRA: And actually,
the real background is right

00:00:59.650 --> 00:01:00.590
over there.

00:01:00.590 --> 00:01:01.600
There's a camera there.

00:01:01.600 --> 00:01:03.710
And then, there's a green screen
over here projecting a

00:01:03.710 --> 00:01:06.570
background that's over there
over here just so that we can

00:01:06.570 --> 00:01:08.120
have this transparent
Android doll.

00:01:08.120 --> 00:01:09.710
TODD KERPELMAN: It's really
just for the gimmick.

00:01:09.710 --> 00:01:10.040
BRUNO OLIVEIRA: Exactly.

00:01:10.040 --> 00:01:12.570
TODD KERPELMAN: So we are here
to talk to you today about

00:01:12.570 --> 00:01:15.510
building web games with
Play Game Services.

00:01:15.510 --> 00:01:18.050
It's because I realized that
up until this point, we've

00:01:18.050 --> 00:01:20.120
been talking an awful
lot about mobile.

00:01:20.120 --> 00:01:22.670
We've been talking an awful
lot about Android

00:01:22.670 --> 00:01:24.820
and a bit about iOS.

00:01:24.820 --> 00:01:27.310
But web game developers,
you're people, too.

00:01:27.310 --> 00:01:28.370
You need love.

00:01:28.370 --> 00:01:31.680
And we are here to give you some
of that love in the form

00:01:31.680 --> 00:01:35.480
of a demo and a presentation
that Bruno's put together.

00:01:35.480 --> 00:01:37.320
BRUNO OLIVEIRA: Yeah, talking
about advanced stuff, let's

00:01:37.320 --> 00:01:40.070
switch to a presentation.

00:01:40.070 --> 00:01:40.860
TODD KERPELMAN: I thought
this was just going

00:01:40.860 --> 00:01:42.230
to be a casual talk.

00:01:42.230 --> 00:01:44.510
But Bruno prepared slides.

00:01:44.510 --> 00:01:45.780
BRUNO OLIVEIRA: 12 slides.

00:01:45.780 --> 00:01:46.246
TODD KERPELMAN: Yeah,
I'm impressed.

00:01:46.246 --> 00:01:48.690
BRUNO OLIVEIRA: So anyway, let's
talk about building web

00:01:48.690 --> 00:01:51.430
games using the Google
Play Game Services.

00:01:51.430 --> 00:01:53.610
We're going to give just a very
quick overview of how to

00:01:53.610 --> 00:01:55.400
set up your game, because we're
not going to go through

00:01:55.400 --> 00:01:55.980
all the steps.

00:01:55.980 --> 00:01:58.660
Because we wouldn't have time.

00:01:58.660 --> 00:02:00.620
But let's just give a quick
overview of the steps.

00:02:00.620 --> 00:02:03.660
So yes, we do have a web API for
Google Play Game Services.

00:02:03.660 --> 00:02:04.795
And if you go to
developers.googl

00:02:04.795 --> 00:02:08.820
e.com/games/services and look
at the left side navigation

00:02:08.820 --> 00:02:10.880
menu, you're going to
find a whole section

00:02:10.880 --> 00:02:11.810
there about web games.

00:02:11.810 --> 00:02:14.590
So you're going to find both the
client side set up and the

00:02:14.590 --> 00:02:16.580
client-server set up.

00:02:16.580 --> 00:02:19.650
So there are basically these
two options for web games.

00:02:19.650 --> 00:02:21.470
You can either do a client-only
set up where you

00:02:21.470 --> 00:02:24.750
have, essentially, a client side
HTML and JavaScript and

00:02:24.750 --> 00:02:25.640
no server component.

00:02:25.640 --> 00:02:28.610
Or you can have the
client-server set up, where

00:02:28.610 --> 00:02:31.410
your client side essentially
serves as an interface.

00:02:31.410 --> 00:02:33.140
And then, the server is
the component that

00:02:33.140 --> 00:02:34.790
actually makes API calls.

00:02:34.790 --> 00:02:36.980
We're going to talk about only
the client side here, because

00:02:36.980 --> 00:02:37.760
it's simpler.

00:02:37.760 --> 00:02:40.650
But the server side is also
not very difficult.

00:02:40.650 --> 00:02:42.600
The only difference is that you
have to pass your token to

00:02:42.600 --> 00:02:43.050
the server.

00:02:43.050 --> 00:02:45.100
And then, the server is going
to make the API calls.

00:02:45.100 --> 00:02:47.120
But to set up the client side--
so first of all, you

00:02:47.120 --> 00:02:49.290
should have done the
initial set up.

00:02:49.290 --> 00:02:51.910
So you should set up
your game in the

00:02:51.910 --> 00:02:53.420
developer console first.

00:02:53.420 --> 00:02:56.210
Once you have that done, then
you can, from the client side,

00:02:56.210 --> 00:02:57.850
start by loading the API.

00:02:57.850 --> 00:03:00.290
And then, you authorize,
which means showing the

00:03:00.290 --> 00:03:02.450
authorization dialogues
if they're needed.

00:03:02.450 --> 00:03:04.910
And then, you can start making
the API calls as soon as you

00:03:04.910 --> 00:03:07.380
get the callback saying
that you're signed in.

00:03:07.380 --> 00:03:10.530
So setting up the game is
actually pretty easy.

00:03:10.530 --> 00:03:12.810
And most of the code is pretty
much copy and paste from

00:03:12.810 --> 00:03:13.780
boilerplate.

00:03:13.780 --> 00:03:17.920
So just load the client.js, and
then you just write that

00:03:17.920 --> 00:03:21.000
to initialize the Google+ API.

00:03:21.000 --> 00:03:23.580
Once you have that done, you're
going to get a callback

00:03:23.580 --> 00:03:27.500
saying that the APIs
are loaded.

00:03:27.500 --> 00:03:29.620
And that's the point where
you should authenticate.

00:03:29.620 --> 00:03:34.265
So if you just call
gapi.authorize, you can start

00:03:34.265 --> 00:03:36.210
with this authentication
process.

00:03:36.210 --> 00:03:38.770
If you call it with immediate
equals true, that's going to

00:03:38.770 --> 00:03:42.320
mean that the API is not going
to show any pop-ups.

00:03:42.320 --> 00:03:44.710
And then, if you call with
immediate equals false, that

00:03:44.710 --> 00:03:47.790
means that pop-ups may be shown,
which means that you

00:03:47.790 --> 00:03:49.530
should first write to
authenticate with immediate

00:03:49.530 --> 00:03:50.550
equals true.

00:03:50.550 --> 00:03:52.820
And then, if that succeeds,
well, that's very good.

00:03:52.820 --> 00:03:55.850
And if that fails, you can
call again with immediate

00:03:55.850 --> 00:03:58.800
equals false once the user
clicks a Sign In button.

00:03:58.800 --> 00:04:00.940
TODD KERPELMAN: I'll break in
here and say, immediate equals

00:04:00.940 --> 00:04:04.290
true generally succeeds if the
user has signed in to your

00:04:04.290 --> 00:04:05.620
application in the past.

00:04:05.620 --> 00:04:09.450
So this is usually for returning
players that have

00:04:09.450 --> 00:04:10.160
already signed in.

00:04:10.160 --> 00:04:11.220
They've already accepted.

00:04:11.220 --> 00:04:13.550
You don't want them to have to
press a Sign In button every

00:04:13.550 --> 00:04:14.810
time they visit your game.

00:04:14.810 --> 00:04:17.540
And so this call essentially
tries to log them in behind

00:04:17.540 --> 00:04:18.790
the scenes.

00:04:18.790 --> 00:04:21.160
It's when that attempt fails
that you then say, oh, all

00:04:21.160 --> 00:04:23.220
right, maybe we should
show a Hey, Click

00:04:23.220 --> 00:04:24.630
Here to Sign In button.

00:04:24.630 --> 00:04:27.890
And on clicking that Sign In
button, that's when you'd make

00:04:27.890 --> 00:04:29.580
this call with immediate
equals false.

00:04:29.580 --> 00:04:31.490
BRUNO OLIVEIRA: Exactly, and
the reason why this is not

00:04:31.490 --> 00:04:34.030
automatic is that most browsers
block pop-ups.

00:04:34.030 --> 00:04:36.110
So if you try and show a pop-up
without the user having

00:04:36.110 --> 00:04:38.720
clicked a button, that's usually
going to get blocked.

00:04:38.720 --> 00:04:40.910
So this is why it's important
to first try to call with

00:04:40.910 --> 00:04:41.770
immediate equals true.

00:04:41.770 --> 00:04:43.830
And then, if that fails,
then you wait until the

00:04:43.830 --> 00:04:44.790
user clicks a button.

00:04:44.790 --> 00:04:48.800
And only then do you call with
immediate equals false so that

00:04:48.800 --> 00:04:52.320
you don't get that blocking
behavior.

00:04:52.320 --> 00:04:56.770
So next, once you have your
authenticated, you can either

00:04:56.770 --> 00:04:59.030
use the API of a call-in
request for everything.

00:04:59.030 --> 00:05:00.050
So you would call request.

00:05:00.050 --> 00:05:02.720
And then, you have to pass
the parameters and so on.

00:05:02.720 --> 00:05:05.160
But there's actually a
very handy service

00:05:05.160 --> 00:05:06.500
called Discovery Service.

00:05:06.500 --> 00:05:08.560
And the Discovery Service means
you can actually make

00:05:08.560 --> 00:05:11.620
the REST API calls in a much
more convenient syntax.

00:05:11.620 --> 00:05:15.630
And to use that, you first have
to load your API using

00:05:15.630 --> 00:05:18.000
that syntax, which is
gapi.client.load.

00:05:18.000 --> 00:05:19.340
Then, in this case,
I'm loading the

00:05:19.340 --> 00:05:21.210
games API version one.

00:05:21.210 --> 00:05:23.330
And then, this is the callback
that's going to get called as

00:05:23.330 --> 00:05:24.760
soon as that API is ready.

00:05:24.760 --> 00:05:27.510
So when I get a call to
onApiLoaded, I know that I can

00:05:27.510 --> 00:05:29.060
start making the calls.

00:05:29.060 --> 00:05:32.410
And the calls look much more
convenient than what you would

00:05:32.410 --> 00:05:34.030
see with request.

00:05:34.030 --> 00:05:35.830
So for instance, if I want
to list the players'

00:05:35.830 --> 00:05:37.250
achievements, all I have to do
is call gapi.client.game

00:05:37.250 --> 00:05:38.500
s.achievements.list.

00:05:40.040 --> 00:05:42.200
And that's going to generate
a request that I can then

00:05:42.200 --> 00:05:44.700
execute and then pass
my callback.

00:05:44.700 --> 00:05:47.260
And once that callback gets
called, you're going to get

00:05:47.260 --> 00:05:48.690
the result of that call.

00:05:48.690 --> 00:05:50.140
So you can test, can
check for errors.

00:05:50.140 --> 00:05:52.930
And if there's no error, then
you can do whatever you want

00:05:52.930 --> 00:05:54.350
with that result.

00:05:54.350 --> 00:05:56.150
In this case, I'm just
iterating through the

00:05:56.150 --> 00:05:57.940
achievements that the user
has and then doing

00:05:57.940 --> 00:05:59.370
something with them.

00:05:59.370 --> 00:06:04.000
So this just illustrates just
in a few minutes pretty much

00:06:04.000 --> 00:06:06.270
the summary of how to
use the web API.

00:06:06.270 --> 00:06:09.120
But first, we do encourage you
to take a more careful look at

00:06:09.120 --> 00:06:09.970
the documentation.

00:06:09.970 --> 00:06:13.160
Because there are many
more details of this.

00:06:13.160 --> 00:06:15.880
So with that said, let's
go on to the demo.

00:06:15.880 --> 00:06:17.930
So this is a demo that
we've been writing

00:06:17.930 --> 00:06:19.790
called Firewall Defense.

00:06:19.790 --> 00:06:22.960
So this is what it kind
of looks like.

00:06:22.960 --> 00:06:24.160
This is a screen shot.

00:06:24.160 --> 00:06:25.410
This is the first screen.

00:06:25.410 --> 00:06:27.820
And then, when you play, this
is the actual gameplay.

00:06:27.820 --> 00:06:30.430
For those of you know me know
that I have a certain passion

00:06:30.430 --> 00:06:33.370
for video games with
very big pixels.

00:06:33.370 --> 00:06:37.820
So this is one example
of such game.

00:06:37.820 --> 00:06:41.050
The source code for this sample
is available on GitHub.

00:06:41.050 --> 00:06:44.030
But I'm running this
source code on my

00:06:44.030 --> 00:06:46.290
private App Engine instance.

00:06:46.290 --> 00:06:48.220
So this is what you're
seeing here.

00:06:48.220 --> 00:06:49.350
So this is the game, right?

00:06:49.350 --> 00:06:53.220
So I have this initial screen
where I show the top three

00:06:53.220 --> 00:06:55.370
scores in the leader boards.

00:06:55.370 --> 00:06:56.930
I have my achievements screen.

00:06:56.930 --> 00:06:58.530
I'm actually already signed
in, so I don't

00:06:58.530 --> 00:06:59.180
need to click here.

00:06:59.180 --> 00:07:01.470
But for somebody playing the
game for the first time, they

00:07:01.470 --> 00:07:03.640
would have to click Sign In.

00:07:03.640 --> 00:07:06.060
Then, I have the achievements
over here.

00:07:06.060 --> 00:07:08.860
So I'm showing green the
achievements that I have, and

00:07:08.860 --> 00:07:10.950
then in grey the ones
that I don't have.

00:07:10.950 --> 00:07:13.190
So as you can see, I've been
playing this a lot.

00:07:13.190 --> 00:07:17.090
But I haven't really gotten a
very good score yet, unlike

00:07:17.090 --> 00:07:19.410
some people in the
leader boards.

00:07:19.410 --> 00:07:22.580
And then, I have the high score
screen, which shows my

00:07:22.580 --> 00:07:25.720
social leader boards, so the
high scores from my friends.

00:07:25.720 --> 00:07:28.230
And then, it also
shows the public

00:07:28.230 --> 00:07:30.390
high scores from everybody.

00:07:30.390 --> 00:07:34.610
So as you can see, I'm I think
in eighth place-- no, seventh

00:07:34.610 --> 00:07:35.560
place-- in the list.

00:07:35.560 --> 00:07:36.420
No, actually, that's eight.

00:07:36.420 --> 00:07:37.670
There are 10.

00:07:37.670 --> 00:07:40.350
So I'm reduced to eighth
place on my own game.

00:07:40.350 --> 00:07:41.200
TODD KERPELMAN: That's
OK, I'm not even on

00:07:41.200 --> 00:07:42.420
that top 10 list anymore.

00:07:42.420 --> 00:07:44.450
But I am on your social
list, so that's good.

00:07:44.450 --> 00:07:46.580
BRUNO OLIVEIRA: Exactly, so
you are at 4,058 points.

00:07:46.580 --> 00:07:48.470
So let's show the
actual gameplay.

00:07:48.470 --> 00:07:50.330
Hopefully, the sound's going
to come out, right?

00:07:50.330 --> 00:07:51.940
Let's see--

00:07:51.940 --> 00:07:53.970
all right, so this is
where I try to beat

00:07:53.970 --> 00:07:55.320
everyone's high score.

00:07:55.320 --> 00:07:59.580
So you have these enemies
that you can shoot.

00:07:59.580 --> 00:08:04.770
And then, they disappear.

00:08:04.770 --> 00:08:07.540
Then, of course, one of the
challenges of the game is that

00:08:07.540 --> 00:08:09.340
there are not only these
enemies, but also

00:08:09.340 --> 00:08:11.766
these allied packets.

00:08:11.766 --> 00:08:14.620
And if you shoot them, they
become missiles that are going

00:08:14.620 --> 00:08:16.850
to try and destroy
your firewall.

00:08:16.850 --> 00:08:19.450
Once you run out of firewall,
you lose the game, and that's

00:08:19.450 --> 00:08:20.070
your score.

00:08:20.070 --> 00:08:22.490
I just scored 500 points.

00:08:22.490 --> 00:08:25.210
And of course, if that score
had been bigger, I would

00:08:25.210 --> 00:08:27.240
appear in the--

00:08:27.240 --> 00:08:29.960
my place in the leader
boards would change.

00:08:29.960 --> 00:08:33.370
But my score was not that big.

00:08:33.370 --> 00:08:36.429
But I'll try harder later.

00:08:36.429 --> 00:08:37.020
TODD KERPELMAN: Sounds good.

00:08:37.020 --> 00:08:40.539
BRUNO OLIVEIRA: Yeah, so that's
pretty much the demo.

00:08:40.539 --> 00:08:42.760
TODD KERPELMAN: Cool, so let's
bring up a few things that

00:08:42.760 --> 00:08:46.140
people might be asking after
seeing this demo.

00:08:46.140 --> 00:08:50.250
The first is, we notice that we
were able to see a list of

00:08:50.250 --> 00:08:53.690
achievements and a list of high
scores now on Android,

00:08:53.690 --> 00:08:55.690
iOS devices, and
their widgets.

00:08:55.690 --> 00:08:57.350
Wait a minute--

00:08:57.350 --> 00:09:00.350
I've been informing I need
to adjustment my mic.

00:09:00.350 --> 00:09:01.600
How's that?

00:09:01.600 --> 00:09:03.660
OK, I'm getting a thumbs up.

00:09:03.660 --> 00:09:06.450
So on Android, iOS, we had
widgets to display

00:09:06.450 --> 00:09:08.010
achievements and high scores.

00:09:08.010 --> 00:09:10.670
Did you have widgets that you
were able to use here?

00:09:10.670 --> 00:09:13.300
BRUNO OLIVEIRA: No, if you're
doing a web game, since every

00:09:13.300 --> 00:09:16.350
web game is pretty much
different, there are no

00:09:16.350 --> 00:09:17.420
ready-to-use widgets.

00:09:17.420 --> 00:09:19.330
But it turns out that the
API is actually pretty

00:09:19.330 --> 00:09:20.500
straightforward to do that.

00:09:20.500 --> 00:09:23.170
All they have to do is call the
load APIs, and then you

00:09:23.170 --> 00:09:25.030
get a callback whenever you
have the data loaded.

00:09:25.030 --> 00:09:27.680
So that's pretty much what I'm
doing here in achievements and

00:09:27.680 --> 00:09:28.660
the leader boards.

00:09:28.660 --> 00:09:31.550
I just make a call
to the load API.

00:09:31.550 --> 00:09:33.570
And then, when I get the
callback, I have the data.

00:09:33.570 --> 00:09:35.560
And then, with the data,
I just format my own

00:09:35.560 --> 00:09:37.690
HTML with that data.

00:09:37.690 --> 00:09:39.510
TODD KERPELMAN: So getting
the data should be pretty

00:09:39.510 --> 00:09:40.390
straightforward.

00:09:40.390 --> 00:09:41.850
Most of the work the developer's
going to need to

00:09:41.850 --> 00:09:46.060
do is any CSS magic that they
want to, say, make an

00:09:46.060 --> 00:09:48.370
achievement look nice versus
an achievement they haven't

00:09:48.370 --> 00:09:49.290
earned, or that sort of thing?

00:09:49.290 --> 00:09:50.930
BRUNO OLIVEIRA: Exactly, so
making achievements look nice

00:09:50.930 --> 00:09:52.590
is not in the scope
of the sample.

00:09:52.590 --> 00:09:55.720
As you can see, they look pretty
disastrously ugly.

00:09:55.720 --> 00:09:58.960
So what I'm doing here is,
I'm just showing the--

00:09:58.960 --> 00:10:00.730
this is actually one of the
things I really like about

00:10:00.730 --> 00:10:03.260
video games, is that I can use
it as an excuse to have very

00:10:03.260 --> 00:10:03.950
poor graphics.

00:10:03.950 --> 00:10:04.730
TODD KERPELMAN: That is true.

00:10:04.730 --> 00:10:06.650
BRUNO OLIVEIRA: So this is just
the-- and I'm actually

00:10:06.650 --> 00:10:09.110
showing the icon for
each achievement.

00:10:09.110 --> 00:10:11.140
So when you're setting up
achievements on the developer

00:10:11.140 --> 00:10:14.110
console, you have the chance
to upload an icon for each

00:10:14.110 --> 00:10:16.140
achievement. and that's the
one that I'm showing.

00:10:16.140 --> 00:10:18.300
The fact that it's always the
same is just because of my

00:10:18.300 --> 00:10:20.140
complete lack of artistic
ability.

00:10:20.140 --> 00:10:22.460
And I'm just using the same icon
for every achievement.

00:10:22.460 --> 00:10:25.860
But if you had different icons
for different achievements,

00:10:25.860 --> 00:10:27.255
you would be seeing them here.

00:10:27.255 --> 00:10:31.060
TODD KERPELMAN: Cool, I'm also
going to ask about--

00:10:31.060 --> 00:10:34.630
now, I know that during your
presentation, we talked about

00:10:34.630 --> 00:10:37.700
calling gapi.authorize
to sign the user in.

00:10:37.700 --> 00:10:40.650
But I know that for this
particular sample application,

00:10:40.650 --> 00:10:43.150
you're using the Google+ Sign
In button, is that correct?

00:10:43.150 --> 00:10:44.590
BRUNO OLIVEIRA: That's correct,
so if I sign out--

00:10:44.590 --> 00:10:46.500
and hopefully nothing
will go out if I do.

00:10:46.500 --> 00:10:51.105
There we go, so I'm using the
built-in Google+ Google Sign

00:10:51.105 --> 00:10:54.280
In button, which means
that this actually

00:10:54.280 --> 00:10:56.250
saves me a lot of code.

00:10:56.250 --> 00:10:58.420
Because instead of having to
write gapi.authorize and all

00:10:58.420 --> 00:11:01.830
that, all I have to do is just
place the Sign In button and

00:11:01.830 --> 00:11:03.440
set the properties.

00:11:03.440 --> 00:11:06.160
TODD KERPELMAN: Right, the Sign
In button's like three

00:11:06.160 --> 00:11:09.070
lines of HTML, essentially, that
you're putting in that

00:11:09.070 --> 00:11:11.700
kind of does all the
work for you.

00:11:11.700 --> 00:11:14.090
The main drawback, and the
reason, I think, we're showing

00:11:14.090 --> 00:11:17.990
you both ways of signing the
user in, is that this Sign In

00:11:17.990 --> 00:11:20.890
button has to appear within
a SPAN or within a DIV.

00:11:20.890 --> 00:11:25.060
And, say, for an HTML5 game like
this, it's not a problem.

00:11:25.060 --> 00:11:28.460
But if you were, for example,
creating a Flash game or Unity

00:11:28.460 --> 00:11:33.130
game or something where it would
be harder to put a SPAN

00:11:33.130 --> 00:11:36.170
on top of your game, and it
would need to be outside the

00:11:36.170 --> 00:11:38.300
frame of the game where people
might miss it or something

00:11:38.300 --> 00:11:42.670
like that, you would probably
want to go with the more

00:11:42.670 --> 00:11:47.560
closer to the metal JavaScript
gapi.authorize call.

00:11:47.560 --> 00:11:51.780
So both methods work
if you're able to

00:11:51.780 --> 00:11:52.900
use the Sign In button.

00:11:52.900 --> 00:11:54.390
That is the preferred way.

00:11:54.390 --> 00:11:57.810
It also does a couple of extra
things behind the scenes.

00:11:57.810 --> 00:12:01.500
I think it makes loading the
+1 button faster and some

00:12:01.500 --> 00:12:02.480
other stuff like that.

00:12:02.480 --> 00:12:06.200
So I know that on behalf of the
Google+ team, they would

00:12:06.200 --> 00:12:09.060
prefer that you use
this if possible.

00:12:09.060 --> 00:12:12.600
If however, your game engine
simply can't render a DIV on

00:12:12.600 --> 00:12:16.380
top of it, or it has problems,
then go with the

00:12:16.380 --> 00:12:17.600
gapi.authorize call.

00:12:17.600 --> 00:12:21.730
BRUNO OLIVEIRA: Yeah,
definitely, and the other item

00:12:21.730 --> 00:12:24.880
to look out for, which was
actually a bug in the initial

00:12:24.880 --> 00:12:27.940
version of this game, is that
if the user doesn't sign in,

00:12:27.940 --> 00:12:31.680
you have to be careful never to
try and make any API calls

00:12:31.680 --> 00:12:32.920
when the user's not signed in.

00:12:32.920 --> 00:12:35.660
So notice that I'm not signed
in, but I can still play.

00:12:35.660 --> 00:12:37.540
Of course, none of my high
scores are going to be

00:12:37.540 --> 00:12:39.490
recorded, and I'm not going
to be able to unlock any

00:12:39.490 --> 00:12:42.686
achievements, because
I'm not signed in.

00:12:42.686 --> 00:12:44.080
But this doesn't mean
that I can't play.

00:12:44.080 --> 00:12:47.340
So the recommendation is,
make sign-in optional.

00:12:47.340 --> 00:12:48.940
So users can sign
in if they want.

00:12:48.940 --> 00:12:50.950
And if they don't, you should
provide pretty much the same

00:12:50.950 --> 00:12:53.470
gaming experience minus the
achievements and leader boards

00:12:53.470 --> 00:12:54.260
and so on and so forth.

00:12:54.260 --> 00:12:55.790
So I can still play.

00:12:55.790 --> 00:12:57.340
It's still going to
give me a score.

00:12:57.340 --> 00:13:00.110
But of course, none of that's
going to get uploaded.

00:13:00.110 --> 00:13:02.220
And if I click the Achievements
button, I'm going

00:13:02.220 --> 00:13:06.220
to have this beautiful alert
dialogue saying that, please

00:13:06.220 --> 00:13:07.840
sign in with Google to
see achievements.

00:13:07.840 --> 00:13:09.870
Of course, in a production
application, you

00:13:09.870 --> 00:13:10.900
shouldn't use alerts.

00:13:10.900 --> 00:13:12.190
But you should just integrate
that into

00:13:12.190 --> 00:13:14.270
your game's user interface.

00:13:14.270 --> 00:13:16.390
Even better would be to
disable the buttons.

00:13:16.390 --> 00:13:21.490
If only I knew what the HTML
code for grey was.

00:13:21.490 --> 00:13:24.710
TODD KERPELMAN: So when you
tried to call Uploading

00:13:24.710 --> 00:13:25.920
Achievements before when
the user wasn't

00:13:25.920 --> 00:13:27.320
signed in, what happened?

00:13:27.320 --> 00:13:27.690
BRUNO OLIVEIRA: What happens?

00:13:27.690 --> 00:13:29.430
You get JavaScript errors.

00:13:29.430 --> 00:13:31.920
So depending on the case, you
might actually survive it.

00:13:31.920 --> 00:13:34.324
And other browsers just
stop because of that.

00:13:34.324 --> 00:13:35.220
TODD KERPELMAN: OK,
good to know.

00:13:35.220 --> 00:13:37.830
BRUNO OLIVEIRA: Yeah, it's
always good practice to check

00:13:37.830 --> 00:13:41.450
if you're signed in before
trying to do any API calls.

00:13:41.450 --> 00:13:42.820
TODD KERPELMAN: And I think we
should probably point out--

00:13:42.820 --> 00:13:46.310
this is one of four different
sample applications that are

00:13:46.310 --> 00:13:50.880
available to you as web
developers that will all be

00:13:50.880 --> 00:13:53.040
linked to from our
downloads page.

00:13:53.040 --> 00:13:56.210
So this one, Firewall Defense,
is the one that actually looks

00:13:56.210 --> 00:13:57.380
and plays like a game.

00:13:57.380 --> 00:13:59.040
And you can kind of see
the potential, and

00:13:59.040 --> 00:14:00.330
it's actually fun.

00:14:00.330 --> 00:14:03.650
We also have a pure JavaScript
version of the

00:14:03.650 --> 00:14:05.380
Type a Number Challenge.

00:14:05.380 --> 00:14:08.400
This is our fantastic sample
game where you can enter a

00:14:08.400 --> 00:14:09.680
number and that's your score.

00:14:09.680 --> 00:14:11.040
BRUNO OLIVEIRA: It's
definitely our most

00:14:11.040 --> 00:14:12.290
user-friendly game.

00:14:12.290 --> 00:14:14.440
It's like, if you want a
score, just type it.

00:14:14.440 --> 00:14:15.440
TODD KERPELMAN: You type it.

00:14:15.440 --> 00:14:17.160
BRUNO OLIVEIRA: Except when
playing in Hard mode, because

00:14:17.160 --> 00:14:19.560
in Hard mode, you only actually
get half the score

00:14:19.560 --> 00:14:20.125
you requested.

00:14:20.125 --> 00:14:23.920
TODD KERPELMAN: That is true,
but that does demonstrate most

00:14:23.920 --> 00:14:27.670
of the major calls in terms of
achievements, leader boards.

00:14:27.670 --> 00:14:32.670
We also have the Type a Number
Ajaxy PHP version, which shows

00:14:32.670 --> 00:14:35.490
an example of the client-server
set-up that

00:14:35.490 --> 00:14:38.540
Bruno had alluded to earlier
in the presentation.

00:14:38.540 --> 00:14:41.370
So if you actually want to see
what that looks like before

00:14:41.370 --> 00:14:44.390
the OAuth guys get after us, I
want to point out the proper

00:14:44.390 --> 00:14:47.580
way to do it is to request a
one-time code on the client

00:14:47.580 --> 00:14:51.140
that you then pass down to the
server, which then exchanges

00:14:51.140 --> 00:14:51.850
for a token.

00:14:51.850 --> 00:14:53.880
You don't actually want to pass
your OAuth2 token down to

00:14:53.880 --> 00:14:56.850
the server if you can help it.

00:14:56.850 --> 00:15:00.760
But all of that is displayed
and working in

00:15:00.760 --> 00:15:02.430
the PHP sample app.

00:15:02.430 --> 00:15:04.600
Feel free to take a look at
that, and it should be pretty

00:15:04.600 --> 00:15:07.580
easy to translate that to other
languages if you're not

00:15:07.580 --> 00:15:09.430
using PHP on the backend.

00:15:09.430 --> 00:15:14.420
We also have the Collect All the
Stars sample application.

00:15:14.420 --> 00:15:18.180
And that demonstrates Cloud
Save in JavaScript.

00:15:18.180 --> 00:15:20.620
That's probably something that
you should look at as well if

00:15:20.620 --> 00:15:22.530
you're at all interested
in Cloud Save--

00:15:22.530 --> 00:15:24.310
and you should be, because
it's kind of cool.

00:15:24.310 --> 00:15:26.460
We did not do a client-server
version of that.

00:15:26.460 --> 00:15:29.400
Because if you have a server
running, then Cloud Save

00:15:29.400 --> 00:15:31.910
probably isn't quite
as interesting.

00:15:31.910 --> 00:15:33.890
But do take a look at that.

00:15:33.890 --> 00:15:35.830
And hold on, I'm being told
to adjust my mic again.

00:15:35.830 --> 00:15:38.530
You know, I promised last
time that I would

00:15:38.530 --> 00:15:39.740
wear a collared shirt.

00:15:39.740 --> 00:15:40.780
And then, I forgot.

00:15:40.780 --> 00:15:42.640
BRUNO OLIVEIRA: You just have
to stay perfectly still.

00:15:42.640 --> 00:15:44.425
TODD KERPELMAN: Right, well,
it's warm here in Mountain

00:15:44.425 --> 00:15:47.280
View, so I went with
a t-shirt today--

00:15:47.280 --> 00:15:49.300
forgot I was recording.

00:15:49.300 --> 00:15:52.020
So we should also ask,
what about cheating?

00:15:52.020 --> 00:15:56.050
So all the high scores are being
essentially generated

00:15:56.050 --> 00:15:57.510
and set up by the client.

00:15:57.510 --> 00:16:02.310
If I'm a JavaScript game
developer, is there anything I

00:16:02.310 --> 00:16:04.150
can do to prevent cheating,
or what

00:16:04.150 --> 00:16:05.750
strategies would you recommend?

00:16:05.750 --> 00:16:07.900
BRUNO OLIVEIRA: Well actually,
on this sample, we don't do

00:16:07.900 --> 00:16:09.730
much to prevent cheating at
all, because we want the

00:16:09.730 --> 00:16:10.740
source code to be readable.

00:16:10.740 --> 00:16:13.850
So we we're not doing anything
truly special here.

00:16:13.850 --> 00:16:16.360
But of course, if you're doing a
production game, you want to

00:16:16.360 --> 00:16:17.960
take every possible measure
to make sure that

00:16:17.960 --> 00:16:19.100
people don't cheat.

00:16:19.100 --> 00:16:22.050
And that starts with maybe
obfuscating your code and

00:16:22.050 --> 00:16:24.430
making sure that it's not
that easy to tamper

00:16:24.430 --> 00:16:25.870
with it, and so on.

00:16:25.870 --> 00:16:28.320
But of course, maybe people
are going to find ways to

00:16:28.320 --> 00:16:29.330
cheat anyway.

00:16:29.330 --> 00:16:33.190
Maybe there's a special glitch
in your game logic that allows

00:16:33.190 --> 00:16:35.930
people to get an infinite score
or something like that.

00:16:35.930 --> 00:16:39.180
And what you can do, of course,
is, you can manage

00:16:39.180 --> 00:16:40.800
that from the server side.

00:16:40.800 --> 00:16:43.310
And if you notice that somebody
has cheated and has

00:16:43.310 --> 00:16:46.000
an impossible score, what
you can do is call

00:16:46.000 --> 00:16:47.120
the management APIs.

00:16:47.120 --> 00:16:50.340
So the management APIs are also
documented in our web

00:16:50.340 --> 00:16:51.360
documentation.

00:16:51.360 --> 00:16:54.600
And what they allow you to do
is, you can authenticate as

00:16:54.600 --> 00:16:58.280
the owner of the game, so this
means the user who created

00:16:58.280 --> 00:16:59.400
that client ID.

00:16:59.400 --> 00:17:02.260
And once you're authenticated as
the owner of the game, you

00:17:02.260 --> 00:17:03.820
can hide a player's score.

00:17:03.820 --> 00:17:07.280
Hiding means that player, the
cheater who has 1 million

00:17:07.280 --> 00:17:09.290
points, they're still going
to see that they

00:17:09.290 --> 00:17:10.230
have 1 million points.

00:17:10.230 --> 00:17:12.980
But after you hide their score,
nobody else is going to

00:17:12.980 --> 00:17:14.630
be able to see that they
have that score.

00:17:14.630 --> 00:17:17.280
So they can go on and
be happy that they

00:17:17.280 --> 00:17:18.240
have 1 million points.

00:17:18.240 --> 00:17:20.250
But then, nobody else who plays
the game is going to see

00:17:20.250 --> 00:17:21.150
that score anymore.

00:17:21.150 --> 00:17:23.040
So he can be happy alone.

00:17:23.040 --> 00:17:24.230
TODD KERPELMAN: And that's
much nicer than

00:17:24.230 --> 00:17:25.030
deleting the score.

00:17:25.030 --> 00:17:27.710
Because if it turns out this
was actually a fantastic

00:17:27.710 --> 00:17:29.890
player who really did
legitimately get a million

00:17:29.890 --> 00:17:32.730
points, you're able to
un-hide them later.

00:17:32.730 --> 00:17:36.080
We should also point out, these
management APIs work for

00:17:36.080 --> 00:17:37.210
mobile games as well.

00:17:37.210 --> 00:17:39.940
So you would need to build a
little web client to make

00:17:39.940 --> 00:17:40.840
these calls.

00:17:40.840 --> 00:17:43.170
But if you notice, say, you're
building a mobile game, and

00:17:43.170 --> 00:17:45.620
there are some people on the
high score list that maybe

00:17:45.620 --> 00:17:48.280
shouldn't be at the level
they're at, you can hide those

00:17:48.280 --> 00:17:51.400
scores as well just by building
a little web app that

00:17:51.400 --> 00:17:52.420
would make these calls.

00:17:52.420 --> 00:17:53.520
BRUNO OLIVEIRA: Exactly--

00:17:53.520 --> 00:17:57.000
of course, the burden is upon
you to make good judgments of

00:17:57.000 --> 00:17:58.960
what is a plausible score
and what's not.

00:17:58.960 --> 00:18:03.080
So what you don't want to do
is hide the score from a

00:18:03.080 --> 00:18:05.480
player who actually legitimately
has that score.

00:18:05.480 --> 00:18:07.330
So this is pretty
much up to you.

00:18:07.330 --> 00:18:10.750
So you have to be very careful
to detect when cheating is

00:18:10.750 --> 00:18:12.450
actually happening and
when it's not.

00:18:12.450 --> 00:18:13.900
TODD KERPELMAN: I'd also
probably point out, one of the

00:18:13.900 --> 00:18:16.670
best ways to deter cheating
is just focus

00:18:16.670 --> 00:18:18.230
on the social scores.

00:18:18.230 --> 00:18:21.500
If I'm cheating on a public
leader board, maybe I feel

00:18:21.500 --> 00:18:23.340
like I'm a badass
hacker because I

00:18:23.340 --> 00:18:24.510
hacked Google or something.

00:18:24.510 --> 00:18:26.780
But if it's a social leader
board, and I've cheated my way

00:18:26.780 --> 00:18:29.670
to the top, I'm just a jerk.

00:18:29.670 --> 00:18:30.470
My friends will--

00:18:30.470 --> 00:18:36.380
BRUNO OLIVEIRA: Exactly, social
leader boards have this

00:18:36.380 --> 00:18:38.190
automatic control.

00:18:38.190 --> 00:18:38.990
TODD KERPELMAN: Which is nice.

00:18:38.990 --> 00:18:40.810
BRUNO OLIVEIRA: Yeah,
which is nice.

00:18:40.810 --> 00:18:43.230
TODD KERPELMAN: All right, did
my microphone just jump?

00:18:43.230 --> 00:18:44.440
BRUNO OLIVEIRA: It's part
of our advanced

00:18:44.440 --> 00:18:45.620
technology for this lab.

00:18:45.620 --> 00:18:48.340
TODD KERPELMAN: All right,
awesome, we should also

00:18:48.340 --> 00:18:52.250
probably point out that if
you're a Flash developer or a

00:18:52.250 --> 00:18:53.590
Unity developer--

00:18:53.590 --> 00:18:55.530
BRUNO OLIVEIRA: Or an anything
else developer, basically.

00:18:55.530 --> 00:18:58.020
TODD KERPELMAN: Yes, anything
else, and you are looking to

00:18:58.020 --> 00:19:03.430
make a web game like this, as
far as I know, on Flash,

00:19:03.430 --> 00:19:06.660
probably the best strategy I
would recommend would be to

00:19:06.660 --> 00:19:08.950
make external interface calls.

00:19:08.950 --> 00:19:11.210
This is something that
ActionScript has that

00:19:11.210 --> 00:19:13.500
essentially allows you
to make calls to

00:19:13.500 --> 00:19:15.640
JavaScript from Flash.

00:19:15.640 --> 00:19:18.170
And then, JavaScript also has
a way that you can find your

00:19:18.170 --> 00:19:20.986
Flash object and make
calls into it.

00:19:20.986 --> 00:19:24.430
BRUNO OLIVEIRA: Yeah, I think
most browser-based plug-ins or

00:19:24.430 --> 00:19:26.490
technologies have a way in which
you can communicate with

00:19:26.490 --> 00:19:27.650
JavaScript.

00:19:27.650 --> 00:19:29.610
And if it can do that, then
you can call the APIs from

00:19:29.610 --> 00:19:30.370
JavaScript.

00:19:30.370 --> 00:19:33.380
Even it's just a wrapper, you
could just write a thin

00:19:33.380 --> 00:19:35.690
wrapper over the APIs in
JavaScript and then call it

00:19:35.690 --> 00:19:36.900
from your own engine.

00:19:36.900 --> 00:19:38.830
TODD KERPELMAN: Yeah, I
really need to make a

00:19:38.830 --> 00:19:40.660
sample Flash game.

00:19:40.660 --> 00:19:42.660
I don't know if I still have
it installed on my machine.

00:19:42.660 --> 00:19:43.950
I'm going to have to find out.

00:19:43.950 --> 00:19:45.720
It's been a while.

00:19:45.720 --> 00:19:47.990
But yeah, I think a sample might
be good for the flash

00:19:47.990 --> 00:19:48.850
developers out there.

00:19:48.850 --> 00:19:50.990
BRUNO OLIVEIRA: Yeah, and if
you're using anything else

00:19:50.990 --> 00:19:54.890
that's not web, the good thing
about it being a REST API is

00:19:54.890 --> 00:19:56.810
that pretty much everyone
can use it.

00:19:56.810 --> 00:19:59.270
As long as your language
platform or whatever has a way

00:19:59.270 --> 00:20:01.390
to communicate with the
interwebs, you can

00:20:01.390 --> 00:20:02.630
make REST API calls.

00:20:02.630 --> 00:20:04.120
TODD KERPELMAN: So what
if I'm making a

00:20:04.120 --> 00:20:06.390
downloadable EXE game?

00:20:06.390 --> 00:20:07.530
Can I still do it?

00:20:07.530 --> 00:20:08.190
BRUNO OLIVEIRA: Absolutely.

00:20:08.190 --> 00:20:08.660
TODD KERPELMAN: How?

00:20:08.660 --> 00:20:10.570
BRUNO OLIVEIRA: Well, you have
to go through the OAuth flow

00:20:10.570 --> 00:20:13.050
for downloading applications,
which is not as fun

00:20:13.050 --> 00:20:14.400
as the one for web.

00:20:14.400 --> 00:20:17.150
Because you might have to pop
up a browser where the user

00:20:17.150 --> 00:20:19.200
has to log in and authorize
your token.

00:20:19.200 --> 00:20:21.220
But then, users are pretty
much used to that on

00:20:21.220 --> 00:20:23.560
downloaded applications, so it
shouldn't be anything new.

00:20:23.560 --> 00:20:28.280
TODD KERPELMAN: So would I be
able to display a browser

00:20:28.280 --> 00:20:31.860
window within my game, or would
I be essentially tabbing

00:20:31.860 --> 00:20:36.540
out to my browser, having the
user go through clicking OK,

00:20:36.540 --> 00:20:38.090
and then going back
into the game?

00:20:38.090 --> 00:20:39.530
BRUNO OLIVEIRA: It's pretty much
I think up to every game,

00:20:39.530 --> 00:20:42.860
but the preferred flow is if you
launch the actual browser.

00:20:42.860 --> 00:20:46.850
Because it certainly works with
an embedded browser, but

00:20:46.850 --> 00:20:49.230
the user's going to feel much
more comfortable if you pop up

00:20:49.230 --> 00:20:50.390
an actual browser.

00:20:50.390 --> 00:20:52.920
Because the whole point of OAuth
is that users feel very

00:20:52.920 --> 00:20:55.230
comfortable typing their
password whenever they know

00:20:55.230 --> 00:20:58.840
that they're actually talking to
the owner of that password.

00:20:58.840 --> 00:21:02.800
So they should be able to look
at that URL bar and know that

00:21:02.800 --> 00:21:05.840
they're typing their Google
password into a Google server.

00:21:05.840 --> 00:21:08.220
So that's the whole point of
OAuth, so definitely prefer

00:21:08.220 --> 00:21:12.810
using an actual browser
in that case.

00:21:12.810 --> 00:21:15.790
And then, from that point on,
once you're over that

00:21:15.790 --> 00:21:17.710
authentication part, it's
pretty much very easy.

00:21:17.710 --> 00:21:19.900
Because then, you have the
token, and you can make REST

00:21:19.900 --> 00:21:23.660
API calls using that token until
it expires, at which

00:21:23.660 --> 00:21:24.190
point you have to renew it.

00:21:24.190 --> 00:21:26.760
But then, it's pretty much
straightforward.

00:21:26.760 --> 00:21:29.355
TODD KERPELMAN: Cool, well
all right, I think--

00:21:29.355 --> 00:21:31.210
do we have anything else we were
going to talk about for

00:21:31.210 --> 00:21:32.030
this session?

00:21:32.030 --> 00:21:32.880
That's about it.

00:21:32.880 --> 00:21:34.790
BRUNO OLIVEIRA: I guess
that's about it.

00:21:34.790 --> 00:21:36.090
TODD KERPELMAN: All right,
well, if you are a web

00:21:36.090 --> 00:21:39.300
developer, we're hoping that you
found some of this useful.

00:21:39.300 --> 00:21:42.330
Be sure to check out Firewall
Defense, which is now posted

00:21:42.330 --> 00:21:46.000
on our GitHub page along with
all the other fantastic

00:21:46.000 --> 00:21:47.910
JavaScript sample apps.

00:21:47.910 --> 00:21:50.240
And start adding some
achievements to your games,

00:21:50.240 --> 00:21:51.590
because they're always fun.

00:21:51.590 --> 00:21:53.410
BRUNO OLIVEIRA: Yep, and
remember, don't tell anybody

00:21:53.410 --> 00:21:54.965
about the invisible Android
technology.

00:21:54.965 --> 00:21:55.960
That's very confidential.

00:21:55.960 --> 00:21:57.320
TODD KERPELMAN: Yeah,
it's still beta.

00:21:57.320 --> 00:21:58.700
We're looking for
our last intern.

00:21:58.700 --> 00:22:00.194
We haven't found him yet.

00:22:00.194 --> 00:22:02.320
BRUNO OLIVEIRA: Yep, all right,
so thank you very much,

00:22:02.320 --> 00:22:03.570
and see you next time.

