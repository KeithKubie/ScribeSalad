WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:07.420
Cross site request forgery, CSRF, is the third big web attack. I've talked about cross site scripting

00:00:07.420 --> 00:00:13.060
in the past. I've talked about SQL injection. This is number three, and it's the lesser-known one.

00:00:15.180 --> 00:00:22.120
Web browsers are fairly trusting things. I've said this before: if you give them some code to run,

00:00:22.120 --> 00:00:27.860
they don't cast a value judgment on it. They can't tell if it's malicious. They will just run it.

00:00:27.860 --> 00:00:34.880
Now, this was kind of okay in the early days of the web, when there wasn't online banking and things like that.

00:00:34.880 --> 00:00:41.900
The worst you could do is put a comment somewhere. Nowadays, bit more complicated.

00:00:41.900 --> 00:00:47.040
The web runs on data being sent back and forth, and that data can be encoded in a couple of ways.

00:00:47.040 --> 00:00:51.180
You can have what's called a GET request, and that's like if you look up, if you're using this on desktop,

00:00:51.180 --> 00:00:57.840
and you look up at the browser address bar, you'll see: youtube.com/watch, that's the name of the page,

00:00:57.840 --> 00:01:02.820
and then a ?v= a string of characters.

00:01:02.820 --> 00:01:08.520
That means that you're going to the watch page, and then the rest of that gets stripped off and sent

00:01:08.520 --> 00:01:12.800
to the logic at YouTube which says, oh, I want this video, so pull these details out of the database.

00:01:12.800 --> 00:01:16.720
There's another way of doing that, called POST, which is the kind of thing where you have a form

00:01:16.720 --> 00:01:22.940
with a button at the bottom of it. And when you hit "go", then all that data gets bundled up and sent

00:01:22.940 --> 00:01:28.440
along with the request, but not in the address bar. And traditionally, if you put it in the address bar,

00:01:28.440 --> 00:01:33.480
it's designed for fetching data. It's called a GET. So that means that you can take this YouTube URL,

00:01:33.480 --> 00:01:38.560
and copy and paste it to somewhere else. And just bundling the data up, like when you click "go" on a form,

00:01:38.560 --> 00:01:44.360
is called a POST. And that's meant for writing things, things that happen once. So that when you hit refresh

00:01:44.360 --> 00:01:49.300
or go back to the same page, it doesn't do the same thing twice. So if you enter a comment,

00:01:49.300 --> 00:01:54.960
it doesn't put all your comment's details in the URL bar, and you can't copy and paste that to a friend,

00:01:54.960 --> 00:02:01.040
and they all post the same comment. And that's reasonably good for the early days of the web,

00:02:01.040 --> 00:02:09.760
but since then, it's got a bit more complicated. Let's say you have a form on your website for an online bank.

00:02:09.760 --> 00:02:18.920
So let's design a really bad online bank form. Let's have, send some money from your account

00:02:18.920 --> 00:02:28.760
to this account number, and send this much. And then there's a "go" button. And let's say that

00:02:28.760 --> 00:02:33.460
as long as you're logged in, as long as you've been to all the authentication checks, and used that little

00:02:33.460 --> 00:02:37.960
chip &amp; PIN device that gives you a password to type in, you've got access to that form.

00:02:37.960 --> 00:02:43.480
You type in the account number, you type in how much you're transmitting, you select "go."

00:02:43.480 --> 00:02:49.200
First of all, this won't use a GET request. It won't appear up top like YouTube does.

00:02:49.200 --> 00:02:54.520
It'll bundle it up in a POST, it'll send the request, and your bank will send back that it's done.

00:02:54.520 --> 00:03:03.180
But the trouble is, that form is, well, almost public. You know how it's designed. So let's imagine you set up

00:03:03.180 --> 00:03:10.860
a fake webpage somewhere else that has that form on it. And maybe, just maybe, you hide some of those

00:03:10.860 --> 00:03:18.180
details, so they're already typed in. So it already has your account number in it, and, say, Â£1,000.

00:03:18.480 --> 00:03:22.120
and then when someone comes along, and they want to put a comment on your websiteâ€”

00:03:22.360 --> 00:03:24.940
So let's design a really malicious blog.

00:03:25.260 --> 00:03:27.280
Let's, let's call it "My Awesome Blog".

00:03:27.280 --> 00:03:32.140
Let's write some really inflammatory content that people will love to comment on.

00:03:32.140 --> 00:03:34.960
And here, is a comment box.

00:03:34.960 --> 00:03:40.680
But off here, offscreen where they can't see it, or even completely invisible,

00:03:40.680 --> 00:03:46.100
is a box that says 'account number', prefilled with your account number; 'amount', a thousand pounds.

00:03:46.100 --> 00:03:48.980
I've written a hundred. Uhm, a hundred pounds.

00:03:49.040 --> 00:03:52.940
'Cause apparently my hand has lower ambitions than my brain does.

00:03:53.120 --> 00:03:57.520
And when you click that 'go' button, it's not going to My Awesome Blog.

00:03:57.760 --> 00:03:59.900
It goes to the really badly designed online bank.

00:04:00.420 --> 00:04:03.360
Which probably says: oh! We've got a request here!

00:04:03.520 --> 00:04:09.480
Don't know what this all blog nonsense is about, but look, we've got an account number, we've got some money - transfer it!

00:04:09.480 --> 00:04:12.100
Because we've already been authorized.

00:04:12.620 --> 00:04:17.820
Because you logged in to that online bank in another tab, while you were bored. And, well...

00:04:17.820 --> 00:04:19.840
Great. The money is gone.

00:04:20.060 --> 00:04:24.220
And it gets worse than that. Because, if you've noticed, when you type a comment on YouTube,

00:04:24.220 --> 00:04:29.640
You click "Post". It doesn't load the whole page back, like it used to in the early days of the web.

00:04:29.660 --> 00:04:31.820
Now, it does it all in the background, silently.

00:04:31.820 --> 00:04:33.800
And just sends a thing back, saying "Yeah."

00:04:33.800 --> 00:04:35.360
"That's fine. No worries."

00:04:35.360 --> 00:04:37.680
Well, that would work with this too.

00:04:37.680 --> 00:04:40.280
You wouldn't even need to click the 'go' button.

00:04:40.280 --> 00:04:45.700
It could just be that when I load up my site, My (malicious) Awesome Blog,

00:04:45.700 --> 00:04:49.980
it just creates that form in the background and sends off that request.

00:04:49.980 --> 00:04:54.940
There's a few things in browsers designed to stop you from doing that, but there are ways around them.

00:04:55.820 --> 00:04:58.580
Now, that's obviously quite a big problem.

00:04:58.940 --> 00:05:02.940
Online banks are generally not designed that way, unless they are designed incompetently.

00:05:02.940 --> 00:05:06.700
But a lot of web forums, a lot of smaller sites have problems like that.

00:05:06.700 --> 00:05:10.640
If you've ever designed something with a delete your account button,

00:05:10.640 --> 00:05:18.360
then frequently, it just goes to something like /delete. With maybe, you know, ?confirm=true on it.

00:05:18.360 --> 00:05:22.720
And you assume that the only time that form would be visible, is when the user is logged in,

00:05:22.940 --> 00:05:28.760
and has clicked: No, I really want to delete my account. I could copy that 'delete your account' form

00:05:28.940 --> 00:05:33.500
and just put it in the background of my completely irrelevant web page somewhere else.

00:05:33.500 --> 00:05:38.800
And you wouldn't even see if it fired, because it's all happening in the background using modern web technologies.

00:05:38.940 --> 00:05:44.640
And, you wouldn't notice. It would delete your account quietly in the background because that form,

00:05:44.680 --> 00:05:49.940
that 'delete you account' form or that transfer the money form, hasn't checked where the request is coming from.

00:05:49.940 --> 00:05:54.200
There was something in what's called HTTP, the hypertext transfer protocol,

00:05:54.200 --> 00:05:58.520
the very basics of the web, designed to stop this and it's called the Referer header.

00:05:58.520 --> 00:06:04.200
and it means, that when you click a link or submit a form, it includes the things

00:06:04.200 --> 00:06:06.820
it says Referer: this site.

00:06:06.940 --> 00:06:11.100
So you know if the form  request is coming from the actual online bank, or the actual

00:06:11.300 --> 00:06:14.940
delete your account form, and not some malicious site elsewhere.

00:06:14.940 --> 00:06:20.240
The trouble is, if you start checking for that, a lot of users start complaining

00:06:20.240 --> 00:06:24.840
because that Referer header isn't always sent like it should. Maybe you've got an adverb blocker

00:06:24.940 --> 00:06:29.720
or maybe you've got some kind of privacy tool that's blocking that as well.

00:06:29.720 --> 00:06:37.700
The way to get around that, is a one time key. What the Americans call a nonce, and which the British definitely do not call a nonce.

00:06:37.900 --> 00:06:44.500
The one time key works, by the form on your website generating a unique code.

00:06:44.500 --> 00:06:48.980
It can be anything, just a random string of characters, each time you create the form.

00:06:48.980 --> 00:06:53.940
And then storing that [string of characters] and saying right, anything that comes back,

00:06:53.940 --> 00:06:58.040
anything that I see, needs to have this token with it.

00:06:58.100 --> 00:07:02.660
and this code, this token you've generated is in the form as well.

00:07:02.780 --> 00:07:11.720
Completely hidden, invisible to the user is something that says, token: random string of characters.

00:07:11.720 --> 00:07:20.440
I think I just wrote a number plate. Uhm, this random string is meaningless, but what it represents

00:07:20.440 --> 00:07:26.520
is that this form that I just made and I just sent out to the user, is the one that's coming back.

00:07:26.520 --> 00:07:32.840
So meanwhile, on My (malicious) Awesome Blog, I don't know what this token is, I can't possibly know

00:07:32.840 --> 00:07:39.300
what this token is, because it changes per user and it changes every time the form is requested, or at least

00:07:39.300 --> 00:07:45.780
every few minutes. And if you copy that form, if you take that token and try and use it 5 minutes later or

00:07:45.780 --> 00:07:51.620
10 minutes later or when the form has already been submitted, or for a different person, or for any one of these things

00:07:51.620 --> 00:07:56.460
Then I'll look at that token and I'll go: that's wrong. I'm not having that (?) and suddenly,

00:07:56.460 --> 00:08:03.060
Cross Site Request Forgery doesn't work anymore. And there're still theoretical attacks and lucky flux

00:08:03.060 --> 00:08:10.960
that could get past this, but in general, that solves it. So if you're designing web forms for anything which is permanent

00:08:11.140 --> 00:08:19.080
anything like deleting an account, posting a comment, authorizing someone, or even transferring money, if you're not using this,

00:08:19.200 --> 00:08:23.980
this is a pretty big security hole, and if the sites you're using aren't using this, well...

00:08:23.980 --> 00:08:29.040
you now know what might happen when you go to some malicious blog somewhere out there.

00:08:29.080 --> 00:08:35.220
So that's Cross Site Request Forgery, and it is the third attack and everyone knows about XSS,

00:08:35.220 --> 00:08:39.600
if you're a web developer, Cross Site Scripting (XSS) is the one you know about.

00:08:39.600 --> 00:08:43.940
SQL injection, database attacks are the one you know about, but this...

00:08:43.940 --> 00:08:48.920
This one went under the radar for a long time, and there's still a lot of developers that don't know about it.

00:08:48.920 --> 00:08:54.640
So if you're designing a site, or using a site that has anything kind of permanent to it, have a look

00:08:54.640 --> 00:09:00.340
and see if a token is being sent. 'Cause if it isn't, might be a bit of a security hole there.

00:09:03.580 --> 00:09:10.180
You start with a script tag and then everything stops,  you've got a closing script tag down here.

00:09:10.180 --> 00:09:13.800
Nothing in this section will actually appear on the user's screen...

00:09:13.900 --> 00:09:18.580
Now let's say I type in "Tom" with a quote mark in it...

