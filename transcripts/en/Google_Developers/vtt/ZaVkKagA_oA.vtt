WEBVTT
Kind: captions
Language: en

00:00:00.680 --> 00:00:01.290
Hi.

00:00:01.290 --> 00:00:03.250
I'm Andres from the
Android NFC team,

00:00:03.250 --> 00:00:06.010
and I'm excited be here talking
to you about the great new NFC

00:00:06.010 --> 00:00:07.890
and Host Card Emulation
features we've

00:00:07.890 --> 00:00:09.970
built for the L
Developer Preview.

00:00:09.970 --> 00:00:13.090
First off, let's see what host
card emulation is all about,

00:00:13.090 --> 00:00:15.360
and how we're making it even
better in the L Developer

00:00:15.360 --> 00:00:16.500
Preview.

00:00:16.500 --> 00:00:19.890
In KitKat, we feed the
NFC radio with HCE,

00:00:19.890 --> 00:00:22.860
opening up NFC's wonderfully
simple proximity interface

00:00:22.860 --> 00:00:25.380
to any developer on any device.

00:00:25.380 --> 00:00:27.310
NFC applications
were no longer forced

00:00:27.310 --> 00:00:29.810
to run on specialized
and proprietary hardware,

00:00:29.810 --> 00:00:32.930
and instead could now
run directly on the CPU.

00:00:32.930 --> 00:00:35.780
This enabled apps running
any KitKat or later device

00:00:35.780 --> 00:00:39.530
to leverage the capabilities of
the ever-growing NFC ecosystem.

00:00:39.530 --> 00:00:42.329
Mass transit, identity,
building access.

00:00:42.329 --> 00:00:43.870
These are just the
tip of the iceberg

00:00:43.870 --> 00:00:46.470
with what you can
build using HCE.

00:00:46.470 --> 00:00:49.370
HCE allows apps on your phone
to look like a smart card,

00:00:49.370 --> 00:00:51.730
such as a public
transit or payment card.

00:00:51.730 --> 00:00:54.180
Just like an application
running on a smart card,

00:00:54.180 --> 00:00:56.120
an HCE app just
needs to register

00:00:56.120 --> 00:00:59.290
an application
identifier or AID.

00:00:59.290 --> 00:01:01.590
Application identifiers
allow NFC readers

00:01:01.590 --> 00:01:04.500
to select the application
they want to talk to.

00:01:04.500 --> 00:01:06.660
Our I/O transport
app, for example,

00:01:06.660 --> 00:01:09.130
registers the AIDs it's
interested in with the Android

00:01:09.130 --> 00:01:10.040
Runtime.

00:01:10.040 --> 00:01:12.480
When you tap your phone
on the transport reader,

00:01:12.480 --> 00:01:14.830
it selects that AID, and
the I/O transport app

00:01:14.830 --> 00:01:16.450
gets invoked automatically.

00:01:16.450 --> 00:01:20.060
It's then free to exchange
arbitrary data with the reader.

00:01:20.060 --> 00:01:22.860
Based on your feedback, we've
expanded HCE capabilities

00:01:22.860 --> 00:01:26.230
to open it up for more use
cases, easier integration,

00:01:26.230 --> 00:01:29.110
and broader availability
in the L Developer Preview.

00:01:29.110 --> 00:01:31.000
Let's see what's new.

00:01:31.000 --> 00:01:33.260
Lots of early HCE
developers noted

00:01:33.260 --> 00:01:36.310
that they didn't know their
AID list at compile time.

00:01:36.310 --> 00:01:38.520
They wanted a way to
register them dynamically,

00:01:38.520 --> 00:01:40.920
depending on the state
of their application.

00:01:40.920 --> 00:01:42.660
Starting with the L
Developer Preview,

00:01:42.660 --> 00:01:45.400
applications need not
register their AID statically

00:01:45.400 --> 00:01:46.630
in the manifest.

00:01:46.630 --> 00:01:48.700
Now, applications
can dynamically

00:01:48.700 --> 00:01:52.270
register for AIDs they're
interested in at runtime.

00:01:52.270 --> 00:01:53.790
For example, if
your loyalty card

00:01:53.790 --> 00:01:57.450
receives a new type of loyalty
card with a different AID,

00:01:57.450 --> 00:02:00.210
you can register it without
recompiling the app.

00:02:00.210 --> 00:02:02.190
Use these APIs to
dynamically register

00:02:02.190 --> 00:02:05.494
your application's AIDs.

00:02:05.494 --> 00:02:08.042
We're also opening up
the possibility for apps

00:02:08.042 --> 00:02:10.500
in the foreground to handle
the transaction, even when they

00:02:10.500 --> 00:02:13.100
might not be the default
app for that AID.

00:02:13.100 --> 00:02:15.270
In KitKat, you could
only pick one application

00:02:15.270 --> 00:02:17.010
that would handle
all of your payments,

00:02:17.010 --> 00:02:20.080
forcing the user into Settings
to switch the default.

00:02:20.080 --> 00:02:21.690
L Developer Preview
allows your app

00:02:21.690 --> 00:02:24.610
to register as the temporary
default for a set of AIDs

00:02:24.610 --> 00:02:26.100
when it's in the foreground.

00:02:26.100 --> 00:02:28.670
Imagine you have a payment app
that only works in your store.

00:02:28.670 --> 00:02:30.110
Call it OneStorePay.

00:02:30.110 --> 00:02:32.620
Probably won't be set as
a default payment app.

00:02:32.620 --> 00:02:35.090
But if the user opens
your app before she taps,

00:02:35.090 --> 00:02:37.100
the transaction is
yours to handle.

00:02:37.100 --> 00:02:39.450
The AllStorePay app, which
works in every store,

00:02:39.450 --> 00:02:41.610
will work just as
the user expects

00:02:41.610 --> 00:02:43.630
when your app isn't
in the foreground.

00:02:43.630 --> 00:02:46.230
You've used these APIs to
register your application

00:02:46.230 --> 00:02:48.800
for dynamic foreground dispatch.

00:02:48.800 --> 00:02:51.770
You can find out more about
how to write HCE apps, as well

00:02:51.770 --> 00:02:53.856
as all of our great new
features, right here.

00:02:53.856 --> 00:02:55.980
Thanks for giving me the
time to talk to you today.

00:02:55.980 --> 00:02:59.650
I hope to see you soon building
great NFC and HCE apps.

