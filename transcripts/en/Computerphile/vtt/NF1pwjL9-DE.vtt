WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:06.460
So when we looked in the last video my security overview for a particular website we noticed he actually wasn't using Diffie Hellman

00:00:06.620 --> 00:00:10.460
it was using elliptic curve diffie-hellman, so this is just going to be a short video

00:00:10.460 --> 00:00:17.420
that explains broadly the difference between the two without going into too much maths although actually the maths of elliptic curves isn't that difficult.

00:00:17.800 --> 00:00:19.840
Let's not go over Diffie-Hellman a third time

00:00:19.840 --> 00:00:23.520
So you and me have some kind of secret key and we use that to talk securely

00:00:23.820 --> 00:00:26.100
Diffie-Hellman is how we get that secret key.

00:00:26.100 --> 00:00:27.100
Every time I talk about Diffie-Hellman

00:00:27.100 --> 00:00:31.860
and use any kind of analogy people were like oh show us the maths so this is for the maths people

00:00:31.860 --> 00:00:35.720
We had a few interesting questions on the Diffie-Hellman video so let's explore

00:00:35.720 --> 00:00:41.579
Remember that Alice here has some public variable g ^ a mod n now

00:00:41.579 --> 00:00:46.709
what's important about this is that in some sense a has been mixed into this generator, so what we can't split it up

00:00:46.710 --> 00:00:48.710
She can send this around,

00:00:48.760 --> 00:00:50.190
without everyone working out

00:00:50.190 --> 00:00:57.210
what a is, which is the important thing. So really what the mathematics behind Diffie-Hellman does, is allow the protocol to send

00:00:57.730 --> 00:01:03.899
messages where you can't extract this private variable and that's exactly what elliptic curves do, they just do it in a slightly different way

00:01:06.460 --> 00:01:10.379
I'll draw a picture elliptic curve ish. Right so this is an elliptic curve

00:01:10.380 --> 00:01:13.020
Elliptic curves are curves in two dimensions

00:01:13.020 --> 00:01:15.150
Cameraman: We need colors on this mark, colors, couple colors

00:01:15.310 --> 00:01:16.685
Mark: It's the future, right!

00:01:16.685 --> 00:01:21.780
So the formula for an elliptic curve is y^2 = x^3 + ax + b.

00:01:22.080 --> 00:01:25.619
and that's the last time we were to talk about it. So the parameters of the curve are a and b

00:01:25.619 --> 00:01:30.569
and then the curve will look something like, hold on I'm going to sort take a bit of artistic license with this

00:01:30.610 --> 00:01:36.209
but something a bit like that. Now they vary in shape depending on what a and b are. The thing about an elliptic

00:01:36.210 --> 00:01:41.909
Curve is in our modular arithmetic we had numbers going around modulo n, right which is just a list of numbers

00:01:41.909 --> 00:01:43.380
it's a cycle of numbers.

00:01:43.380 --> 00:01:47.900
Here we have a cycle of points somewhere on this curve, so our generator will be a point on this curve

00:01:47.909 --> 00:01:49.940
Let's use blue, shall we.

00:01:49.940 --> 00:01:50.548
This is our generator

00:01:51.850 --> 00:01:53.700
That's not a good place for my generator

00:01:53.700 --> 00:01:58.500
It's not a good place my generator, because then my next example of adding things to the generator won't work

00:01:59.350 --> 00:02:00.600
Let's let's do it

00:02:00.600 --> 00:02:05.489
Let's do it there all right ignore that point that can be a different point for later now if this is our generator G

00:02:05.500 --> 00:02:10.500
What we can do, instead of raising things to powers, we just add G to itself. We have 2G 3G

00:02:11.020 --> 00:02:15.419
3G is G Plus G Plus G. Yeah, so what we can do is we can add

00:02:16.660 --> 00:02:19.319
G to itself. To do that what you do is you draw a line

00:02:19.800 --> 00:02:25.080
At the tangent of this curve all the way until it hits another point on the curve

00:02:25.240 --> 00:02:29.760
You flip it over to the other dimension, and this is 2g over here

00:02:30.300 --> 00:02:36.680
3G would be the line between these two. Find out where it intersects and flip it over here

00:02:36.690 --> 00:02:41.609
So this is 3G. 3G plus G, would be, it goes along here like this

00:02:42.340 --> 00:02:46.440
Intersects the curve somewhere else flips over and it's over here, so this is 4G.

00:02:46.780 --> 00:02:49.420
Now we won't look at it anymore right the actual formula for this is just

00:02:49.960 --> 00:02:52.230
mathematics to do with lines and the tangent of this curve

00:02:52.230 --> 00:02:56.459
It's actually not very complicated the point is what we're doing is by multiplying G

00:02:56.590 --> 00:03:02.729
By various numbers or adding it to itself this point addition. We're moving around this curve sort of seemingly at random

00:03:03.519 --> 00:03:09.479
Right a bit like how we were moving around our clock face seemingly at random so the nice thing is that if you're adding points

00:03:09.480 --> 00:03:10.570
together one elliptic curve

00:03:10.570 --> 00:03:12.719
You will always intersect only one other point

00:03:13.150 --> 00:03:17.880
Which means that you've never got a choice of two or three points where you could go so that helps a lot?

00:03:18.040 --> 00:03:21.269
When you're doing this so if I give you a point on the curve here

00:03:21.790 --> 00:03:26.099
And I say question mark G right how many multiples of G

00:03:26.100 --> 00:03:31.679
Is that then any ideas no no idea at all right? It could be 50 G. It. Could be 5 billion G

00:03:31.680 --> 00:03:33.510
We don't we you know it

00:03:33.510 --> 00:03:39.060
There's no way of knowing that is our private number, and that's the thing we can't extract back out here

00:03:39.060 --> 00:03:42.239
We couldn't get our a if I give you a G

00:03:42.239 --> 00:03:47.219
That's all I'm gonna capitalize it now G. Plus G Plus G Plus G a times on this curve

00:03:47.220 --> 00:03:50.549
I give you that point and ask you to tell me what the private variable was oh

00:03:51.640 --> 00:03:56.699
No idea, you know for a small curve. You might get it off a few attempts for a big curve

00:03:56.700 --> 00:03:59.910
You're never going to get it. Oh, it's going to take you so long and you won't bother

00:04:00.730 --> 00:04:02.200
So what?

00:04:02.200 --> 00:04:08.250
Elliptic curves, do is literally a plug in replacement for the mathematics that a modular arithmetic mathematics involved in normal

00:04:08.890 --> 00:04:10.079
difficulty late B

00:04:10.079 --> 00:04:17.129
G and their shared secret will end up being a B G and it's very very similar now

00:04:17.380 --> 00:04:21.359
Just to give you someone. We also do this all modulo n because why wouldn't you?

00:04:22.210 --> 00:04:27.650
Know because that's how the mathematics works. That's what we do so in fact. It doesn't really look like a curve anymore

00:04:27.650 --> 00:04:34.070
I'll show you a picture of one so this is an example of elliptic curve. I just looked on internet right modulo something like

00:04:35.280 --> 00:04:37.280
460 this is some curve

00:04:37.280 --> 00:04:40.339
I don't know what the parameters are now you can see if this was a generator

00:04:40.680 --> 00:04:44.239
The points are just gonna dot around all over the place eventually

00:04:44.240 --> 00:04:46.229
They'll go back to the start and cycle background again

00:04:46.229 --> 00:04:50.719
But not for a long long time so if I give you this point and tell you what was my private number

00:04:51.600 --> 00:04:53.839
That's how it's secure. It's very hard

00:04:54.690 --> 00:04:56.570
to undo that and in fact

00:04:56.570 --> 00:05:00.649
It's very mathematically quite easy to calculate some multiple of G and move around

00:05:00.840 --> 00:05:06.649
But it's difficult to undo that process that's the private part of elliptic curves. You know I'm going to ask you though

00:05:06.680 --> 00:05:11.630
Why why, would you bother with this? So this looks like it's are being unnecessary complication. Yeah well

00:05:11.820 --> 00:05:14.689
It's a notice in some sense slightly more complicated, but actually

00:05:15.210 --> 00:05:22.910
Mathematically, it's much more efficient the so elliptic curves are a little bit harder to solve this elliptic curve discrete logarithm problem

00:05:23.039 --> 00:05:24.260
Which is what we call it?

00:05:24.260 --> 00:05:28.069
It's slightly harder to solve in some sense than the regular discrete logarithm problem

00:05:28.070 --> 00:05:31.039
Which means that elliptic curves can get away with shorter key sizes?

00:05:31.039 --> 00:05:35.389
And that just means less computation when you're calculating a to the G or B to the G

00:05:35.940 --> 00:05:41.299
To give you an example, so let's imagine that I use a different key was three thousand bits long

00:05:41.300 --> 00:05:45.500
I would get the same security from an elliptic curve where my

00:05:46.080 --> 00:05:53.479
prime n is only 256 bits long which is much much shorter the matter is much easier to compute much much faster, so

00:05:54.090 --> 00:05:59.690
There was a strong tendency to use elliptic curves for that reason if you've got to imagine if you're a server

00:05:59.910 --> 00:06:03.919
Performing these key exchanges all the time because people come into your shop or something like this

00:06:03.960 --> 00:06:08.090
Then that kind of savings actually quite useful. It doesn't really matter if you're doing on your home

00:06:08.090 --> 00:06:08.580
PC

00:06:08.580 --> 00:06:09.870
But you know that many

00:06:09.870 --> 00:06:14.570
You might as well use it with the flip side of that question that yeah is anyone still using the other way

00:06:14.789 --> 00:06:15.320
Yep

00:06:15.320 --> 00:06:18.289
so there are a few people who are a little bit suspicious of elliptic curves and

00:06:18.450 --> 00:06:22.339
certain elliptic curves for example the NIST P 256 curve has its disk trap

00:06:22.500 --> 00:06:26.479
Detractors because they're not absolutely sure where things like this a and B came from and so on okay

00:06:26.479 --> 00:06:30.889
Maybe I mean for what it's worth big companies are also using that curve, and they seem to be fond of it

00:06:31.830 --> 00:06:34.370
Other curves are available to give you an example

00:06:34.380 --> 00:06:39.089
I've used a publicly available cryptography library to generate a couple essentially equivalent to

00:06:39.340 --> 00:06:43.019
G to the a and a G just so you can see the difference in this sort of size

00:06:43.020 --> 00:06:45.020
We're talking about here if I run this Python script

00:06:45.310 --> 00:06:48.779
We've established a generator and a large prime

00:06:48.779 --> 00:06:54.209
And this prime is 2048 bits so this is our a and this is our G to the a mod N

00:06:54.210 --> 00:06:57.930
And you can see I mean this will be slightly shorter, but the idea you can see they're there

00:06:57.930 --> 00:07:04.049
They're quite long approaching two thousand bits so that on a fast version you can see it didn't take very long to compute

00:07:04.050 --> 00:07:10.139
But it took a little time to compute if I've run the same thing using elliptic curve. Cryptography on the NIST P 256 curve

00:07:10.210 --> 00:07:12.930
We'll see it should be a lot shorter, okay

00:07:13.539 --> 00:07:19.769
There we go right much shorter the missing 256 bit number much much shorter. You can see our private key is actually a number

00:07:20.289 --> 00:07:22.709
Because it's a number a the number of times

00:07:22.710 --> 00:07:28.469
We've jumped around our elliptic curve, and this is our actual XY coordinate of our point on the curve

00:07:28.469 --> 00:07:32.039
So you can see it's split into here's the first part, and then the second part here

00:07:32.039 --> 00:07:34.039
So this is X and this is y?

00:07:34.150 --> 00:07:37.560
What you would normally do in this kind of situation if you were driving a key from this is

00:07:37.659 --> 00:07:41.519
Scrap the Y and just use the X because it's long enough and secure enough

00:07:42.009 --> 00:07:45.179
But that will depend on your situation there are debates that I had over

00:07:45.180 --> 00:07:50.219
What curves are safe to use a lot of people use the NIST PT five six curve?

00:07:50.319 --> 00:07:57.269
But some people other researchers don't think that secure because it may be made they've taken shortcuts on some of the parameters for efficiency reasons

00:07:57.969 --> 00:08:02.219
They're not sure where somebody's parameters came from and that isn't without precedent

00:08:02.229 --> 00:08:06.838
There was a situation where an elliptic curve random number generator was found to essentially have a backdoor

00:08:07.000 --> 00:08:14.309
Which might be for a different video so the x.25 five one nine. Curve is quite well-regarded because they've gone to great lengths to

00:08:15.639 --> 00:08:21.418
Demonstrate how they came up with their variables, and why it's used you know if you're if you're intricate to graphic research

00:08:21.419 --> 00:08:25.049
This is something that comes concern. You who's just using the web probably don't worry about it

00:08:25.599 --> 00:08:32.908
Heed the message hello computer file pop up, so it's getting the data of various things and we see here hello computer file

00:08:32.949 --> 00:08:38.669
We've been able to do this by accessing a value that we shouldn't be able to access this code this if statement should stop us

00:08:38.669 --> 00:08:41.458
Being able to access this past the end of this array

