WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:04.500
When alex did a video on linked list there's a lot of comments on it it sort of thing

00:00:04.500 --> 00:00:06.929
I want to use a linked list arrays a factor

00:00:06.930 --> 00:00:10.950
What's the point of reading this and so I was sort of thinking about is that well actually "Are arrays

00:00:11.100 --> 00:00:15.740
faster than the linked list or are the linked lists faster than an array, how do we go about finding out?"

00:00:15.740 --> 00:00:19.700
Which one's faster, so let's have a shoot out arrays versus linked list

00:00:21.700 --> 00:00:23.360
First question to start is

00:00:23.360 --> 00:00:26.360
I should just remind ourselves what the difference is between a linked list and

00:00:26.600 --> 00:00:29.560
An array so let's start with the array so probably the simplest

00:00:30.120 --> 00:00:33.080
To understand so an array is just a way of storing

00:00:33.780 --> 00:00:35.040
several

00:00:35.040 --> 00:00:36.630
values

00:00:36.630 --> 00:00:39.589
in memory so we start off with the first value and

00:00:40.380 --> 00:00:43.609
for the purposes of this demonstration, I'm going to use a

00:00:44.190 --> 00:00:49.069
Structure containing multiple values. We did talk about objects a while ago structures are what you had before

00:00:49.070 --> 00:00:53.989
We saw this object which is a collection of values in memories and store to integer values

00:00:53.989 --> 00:00:59.329
So this is array element zero and it's got two numbers. We then got array element one

00:01:00.240 --> 00:01:02.100
And it's got two numbers

00:01:02.100 --> 00:01:04.699
Looks like I'm playing break out got a great element

00:01:05.250 --> 00:01:09.199
To and it's got two numbers and so we can refer to any of these

00:01:10.200 --> 00:01:11.399
by

00:01:11.399 --> 00:01:17.269
reference to the Index starts at 0 3 4 5 6

00:01:18.420 --> 00:01:23.839
7 10 so you can have an array of any size we have to know how big it is if you wanted to be when

00:01:23.840 --> 00:01:26.210
You create so you allocate the memory for all the things and then?

00:01:26.280 --> 00:01:31.729
You can store some values so we can write 42 in this one. We can put 21 in here

00:01:31.729 --> 00:01:37.519
I'm going to put 3 in that one and we can store them or we can put different values in here as

00:01:38.159 --> 00:01:45.289
Well as we need them so that's how an array works. Which is one big block of memory each thing stored one after the other

00:01:45.990 --> 00:01:50.150
linked list works slightly different we start off at the beginning of

00:01:50.670 --> 00:01:54.799
the linked list and it points at nothing but then as we add things to the list we

00:01:55.740 --> 00:02:02.240
Allocate the memory for it. We're going to store two things so the first thing we'll label these things inside it p

00:02:02.909 --> 00:02:04.938
And Q so it's a lot p here

00:02:05.400 --> 00:02:11.600
And we've got q but we also have an extra thing that tells us where the next they will be and that's empty, too

00:02:11.600 --> 00:02:15.649
So it's all put 42 and 16 so we just allocate space for that one

00:02:16.140 --> 00:02:19.579
Structure that one thing that we're going to store and we connect it up

00:02:19.980 --> 00:02:24.890
So we point this at the first thing so we often call this something like first

00:02:24.890 --> 00:02:27.350
And we see Alex videos to see how that have done

00:02:27.570 --> 00:02:31.519
So when we want to store the next thing we allocate explai for another one

00:02:33.000 --> 00:02:35.330
And we can store the value, so we've still got 8

00:02:35.910 --> 00:02:42.259
21 in it now the difference between this could be anywhere else in memory, and we connect to the next pointer

00:02:43.410 --> 00:02:45.060
to point in

00:02:45.060 --> 00:02:47.929
To the next thing so we have some known starting point

00:02:48.150 --> 00:02:54.620
which points to the first thing and the first thing 22 the second thing and the second thing would point to the third thing and

00:02:54.840 --> 00:02:58.069
So on and that would point down and these could be all over

00:02:58.620 --> 00:02:59.640
anywhere

00:02:59.640 --> 00:03:05.270
In the computer's memory and then at the end you normally point it at some known value

00:03:05.270 --> 00:03:10.039
Which is often referred to as null and is often the number zero?

00:03:10.620 --> 00:03:13.190
So you can then walk through your list

00:03:13.190 --> 00:03:17.449
And when you find at the next point of zero or null you know you've come to the end of it

00:03:17.519 --> 00:03:22.339
There are two different ways of storing data the best or the same amount of data now

00:03:22.340 --> 00:03:26.810
He's got some differences this one as I says it's fixed inside, and you create it you can store

00:03:26.810 --> 00:03:32.660
How many things you know I've actually filled in but as soon as you get more than eleven since final top array?

00:03:32.660 --> 00:03:37.639
You can't go past eleven if you can see yeah the numbers all go to

00:03:38.280 --> 00:03:44.119
11 on this however if we wanted to put something else thing we can just get rid of this thing

00:03:44.459 --> 00:03:46.459
And update this to point

00:03:47.190 --> 00:03:49.190
To a new thing so we can make this grow

00:03:49.680 --> 00:03:52.400
Quite easily, and we can also be really clever

00:03:52.400 --> 00:03:56.810
We can add things in the middle and the beginning very very simply, but we're going to go into that today

00:03:58.680 --> 00:04:03.410
So creating them. We're probably only going to do once but which one is actually faster

00:04:04.530 --> 00:04:09.380
Well, let's think about what actually to do. Let's define a very very simple problem

00:04:09.450 --> 00:04:12.109
We've created the structure here, and it's got two things in it

00:04:12.109 --> 00:04:18.109
It's got an integer called p and an integer called Q so saving the linked list and in

00:04:18.570 --> 00:04:24.739
The array let's consider an operation where we're just going to go through all the elements in our array

00:04:24.740 --> 00:04:31.010
Or all the elements in our linked list and sum the value of p are going to add up all the value

00:04:31.010 --> 00:04:33.319
So we're going to add up. What's in array

00:04:33.360 --> 00:04:37.729
Element Zeroes P in array of them at once P and so on so we're going to effectively do

00:04:37.860 --> 00:04:41.030
Something's going to add them all up. We'll do the same with the linked list as well

00:04:41.030 --> 00:04:44.750
So we're going to set what the first thing is to point to p

00:04:45.450 --> 00:04:50.299
Now that one. No. There's no time out of its value of p the next one and so on and we'll add them all up

00:04:52.380 --> 00:04:55.969
Why are we using missiles they want to the unique thing about this is

00:04:56.490 --> 00:05:01.790
That it's going to visit every single element in either the array or every single element in the linked list

00:05:02.040 --> 00:05:07.249
so we're going to visit every single element if you only have to visit one element then the very nature of

00:05:07.530 --> 00:05:09.410
Random access into array means as we fast

00:05:09.410 --> 00:05:14.390
There's no way you can make any difference unless it's the first element if you only one to ever access the first element

00:05:14.670 --> 00:05:17.330
Then look at the same speed we fuel directly to random element

00:05:17.460 --> 00:05:22.790
Then the array or win hands down you can just think about how it works that will be the case. We're going to consider

00:05:22.790 --> 00:05:26.689
We want to access every single element and do something to it and in this case

00:05:26.690 --> 00:05:31.190
You're just going to sum up the values, but it could be if things were representing say windows on the screen

00:05:31.190 --> 00:05:33.739
We want to move them around we want to redraw them

00:05:33.740 --> 00:05:38.270
Whatever it is will then do something to every single wall so we sort of set out the problem?

00:05:38.270 --> 00:05:42.289
I'm going to go over an array of values and a linked list of values

00:05:42.420 --> 00:05:45.649
I'm going to in sum in the visits all and we do actually add up all the numbers

00:05:46.290 --> 00:05:52.099
Stored in the element P. Which is part of the structure so what I've done is I've written

00:05:52.710 --> 00:05:55.760
To see poems which are more or less identical

00:05:56.610 --> 00:05:58.610
I'm going to create

00:05:59.370 --> 00:06:01.370
125,000 elements in my array

00:06:01.890 --> 00:06:09.439
or mailing list and in the linked list I've got a structure which contains an integer p and an integer Q and

00:06:09.900 --> 00:06:11.840
in the array version

00:06:11.840 --> 00:06:15.739
I've got a structure which contains an integer p and interested Q in the array item

00:06:15.990 --> 00:06:21.290
The only difference is that the linked list has one extra item which is the next pointer to the next thing?

00:06:21.290 --> 00:06:26.809
So very listen see so hopefully we'll go as fast as we possibly can most of the rest of the program

00:06:27.320 --> 00:06:28.080
is

00:06:28.080 --> 00:06:29.250
identical

00:06:29.250 --> 00:06:31.880
so I have my main Routine here which creates a

00:06:32.700 --> 00:06:35.779
List or an array of random number generator?

00:06:37.200 --> 00:06:41.809
125,000 random numbers which is a slowest part of the program you'll see and then store them

00:06:42.000 --> 00:06:46.190
So allocate memory for each element in the linked list and then we set the value

00:06:46.740 --> 00:06:51.410
Everything else will just leave with 0 and we do the same with the array just as we did on the paper

00:06:52.410 --> 00:06:54.410
We then run the program

00:06:54.450 --> 00:06:57.379
100 times and all going to here is time

00:06:57.810 --> 00:07:03.350
How long it takes to run a function which adds afforda numbers either in the list or in the array?

00:07:04.050 --> 00:07:05.370
I will do that 100 times

00:07:05.370 --> 00:07:10.049
And then we can work out the average time it takes to calculate one and we'll print out the values as we go

00:07:10.050 --> 00:07:16.079
So we're just using the built-in clock function in C. Which should be accurate accurate enough for what we want to do

00:07:16.690 --> 00:07:22.079
so the real meat the body of the program is this function here some list or

00:07:22.990 --> 00:07:24.030
Some array

00:07:24.030 --> 00:07:29.309
Let's start with the array one because possibly the simplest we said a variable to be zero that's going to be asked some

00:07:29.710 --> 00:07:30.810
You have another variable

00:07:30.810 --> 00:07:35.009
I which is going to be our index through the array and we go from I equals zero

00:07:35.310 --> 00:07:39.089
I first element until we get to the end the number of elements in there

00:07:39.090 --> 00:07:46.739
and we just say this sum equals the value that was already in sum plus the value in the ice element in the array a

00:07:47.740 --> 00:07:49.060
P element

00:07:49.060 --> 00:07:54.389
Remember we said the array had a p and a Q in it we want the value stored in the p space within the structure

00:07:54.390 --> 00:08:00.150
in our array, so I'm just going to add get them together the list version very very similar we set the someone to be 0

00:08:00.790 --> 00:08:03.090
We say while p does not equal null

00:08:03.090 --> 00:08:07.500
So why we haven't reached the end of the list and we set p initially to be the first thing in the linked list?

00:08:07.690 --> 00:08:11.160
So pointing out that first thing sum equals sum plus

00:08:11.680 --> 00:08:14.549
P inside p. We using P inside p

00:08:15.100 --> 00:08:22.259
Confusing variable names, but then I'm asleep programmer, and then we set p ir pointer to point to the next thing

00:08:22.260 --> 00:08:27.629
So we follow the link to the next thing in the linked list and we keep doing that until we come to the end

00:08:28.180 --> 00:08:32.759
There are two programs as simple as you get in terms of implementing a linked list or on array

00:08:33.460 --> 00:08:35.460
so we're going to do is run them and

00:08:35.710 --> 00:08:37.920
We should get some values output

00:08:38.050 --> 00:08:41.969
But we're not going to run them on the I max we're not going to run them on the raspberry Pi

00:08:42.760 --> 00:08:49.290
we're actually going to run them on the atari behind me which means I need a very high Peak high-tech piece of

00:08:49.930 --> 00:08:53.940
Equipment, so I need a floppy disk to transfer other programs from the iMac

00:08:55.630 --> 00:09:00.210
Go topping them off the iMac, and then we can run them on the AtAri

00:09:03.070 --> 00:09:05.070
so go over to the Atari and

00:09:06.550 --> 00:09:10.829
Assurance that it's cameras and spot. We can see it. So what I'm gonna do at first is they got to run

00:09:11.410 --> 00:09:13.410
the list first also going to generate

00:09:14.050 --> 00:09:15.580
125,000

00:09:15.580 --> 00:09:17.580
linked list values to let it Run

00:09:18.910 --> 00:09:20.910
Right while it loads off the floppy disk

00:09:21.220 --> 00:09:25.709
that's what it used to be like back in the 80s and 90s you had to wait one you crave them ran a

00:09:27.580 --> 00:09:29.580
While a

00:09:30.340 --> 00:09:32.340
long While

00:09:33.400 --> 00:09:35.400
And this is just a simple program

00:09:36.010 --> 00:09:36.930
So there is good

00:09:36.930 --> 00:09:37.780
So it's not

00:09:37.780 --> 00:09:42.869
Initializing the link list it's allocating all the memory for the different elements and then putting a random number

00:09:43.000 --> 00:09:45.900
In the P value of each one, so we'll let that run

00:09:47.680 --> 00:09:53.880
In the words of the old Hobbit computer game time passes or in the words of every apple of this

00:09:54.790 --> 00:09:56.470
secret short

00:09:56.470 --> 00:09:58.470
How long does this take?

00:09:59.620 --> 00:10:05.160
A while lots of oil, I don't know another time this bit

00:10:06.820 --> 00:10:09.869
125,000 times however long it takes to allocate a random number and allocate some memory

00:10:11.140 --> 00:10:15.780
On the clock speed of what this is actually an 8 MegAhertz cPU

00:10:17.050 --> 00:10:23.369
So it's a takes a while the computer loaded off all the code for the program and off the floppy disk into memory

00:10:24.010 --> 00:10:30.359
And it's now running it to generate the data set that we need then Gonna sum all the values

00:10:30.360 --> 00:10:32.670
So everything is happening now will happen off memory

00:10:33.190 --> 00:10:35.280
It's just taking a while to process it

00:10:36.130 --> 00:10:42.119
But we are recording it in 4k which is a slight overkill. I hope you're getting into that

00:10:43.270 --> 00:10:44.680
extra bit

00:10:44.680 --> 00:10:48.270
So the programs going through now and we'll let it run 400 times

00:10:48.270 --> 00:10:50.910
We'll get an average, but actually looking at the values of the coming up

00:10:50.910 --> 00:10:54.179
I think we can safely assume that the average is going to end up being

00:10:54.910 --> 00:11:00.239
166 clock ticks now when I say qwop takes each of the machines. We're going to look at are going to have

00:11:00.820 --> 00:11:07.260
Different clocks perms that they use the time things so we can't compare the values directly what we could come read with the seconds

00:11:07.260 --> 00:11:10.530
But we can certainly see the relative patterns between it will call that

00:11:13.270 --> 00:11:19.199
166 clock ticks over to run the linked list version of the program it takes

00:11:20.230 --> 00:11:22.230
166 clock ticks

00:11:22.630 --> 00:11:25.830
So let's now run the array version of the program

00:11:26.860 --> 00:11:28.770
So now we're going to do exactly the same thing

00:11:28.770 --> 00:11:32.790
we're going to allocate an array every time tWenty-five thousand elements and

00:11:33.130 --> 00:11:35.040
populate them with random values because of the way

00:11:35.040 --> 00:11:35.490
I've written the program

00:11:35.490 --> 00:11:40.049
It will actually be the same pSeudo random number sequence that the sum should be the same and then we're going to fill

00:11:40.300 --> 00:11:48.060
each of them up and time how long that takes and we'll they'll see whether an array actually is faster than the linked list or

00:11:48.280 --> 00:11:50.550
Whether a linked list will be b. Array

00:11:51.310 --> 00:11:54.989
So that to me looks like that little spinny thing is going faster

00:11:55.210 --> 00:11:58.829
Yeah, well so and I haven't just upgraded the processor while they're off camera

00:11:58.840 --> 00:12:00.700
What's actually happening is?

00:12:00.700 --> 00:12:07.050
When we allocate the space for the linked list we have to allocate space for each element and then for the gym there

00:12:07.050 --> 00:12:11.699
We allocate space for the next element. We could do that in a different way and speed things up, but we did it

00:12:11.700 --> 00:12:16.650
That's the classic way with the array. We allocate the whole lot in one go, so we all take one

00:12:17.200 --> 00:12:21.780
Huge block of memory under 25,000 times eight is about one meg's worth of memory

00:12:22.150 --> 00:12:28.079
So allocate all that in one go, and then we're just going through it filling in all the values setting all the values

00:12:28.870 --> 00:12:31.049
So that should be quicker

00:12:31.050 --> 00:12:37.259
and it seems and spinning wheel is going slightly faster what why would that Spin wheel very fast can you just learn how that

00:12:37.570 --> 00:12:40.079
You can read it if you've heard this thing you it yeah?

00:12:40.080 --> 00:12:43.590
So to give some nice sort of visual Feedback while this is running

00:12:43.590 --> 00:12:48.660
Well, I'm just a plain white screen what I'm doing is I'm printing every hundred element ideals

00:12:48.660 --> 00:12:51.060
I update that thing and just printing either a dash a

00:12:51.370 --> 00:12:57.539
Vertical line or one of the two slashes to make it look like it's getting round and those are printing it it creates a little

00:12:57.540 --> 00:13:01.560
Effect which is see that something's happened and the computer hasn't crashed

00:13:01.560 --> 00:13:08.070
So this should be faster, and we should get a value so is now working and the immediate thing we see is

00:13:08.620 --> 00:13:11.159
That the array is taking about

00:13:11.800 --> 00:13:13.800
179 or

00:13:14.170 --> 00:13:18.029
178 ticks it's the same quad kick so we can compare these two values

00:13:18.790 --> 00:13:20.470
the Array is

00:13:20.470 --> 00:13:22.649
slower than a linked list I

00:13:23.860 --> 00:13:30.240
Know down, okay? All right now. So you can't argue in - okay, so the numbers have come in the computers around

00:13:33.250 --> 00:13:41.099
170 angular call is to that 170 8.5. Always for the final average to come in but for that. So they're roughly comparable

00:13:42.730 --> 00:13:49.119
Basically there's not much it sort of thing, but there's something about 200 qwop ticks per second on this machine

00:13:50.450 --> 00:13:54.009
It's is probably a noticeable. It's about 10 percent slower

00:13:54.800 --> 00:14:00.039
Okay, so that's it. I mean we can stop here come a that's it. We know. What's what arrays are slow

00:14:00.040 --> 00:14:02.950
You wrinkly yep, so arrays are slower than ling Li

00:14:03.920 --> 00:14:08.440
Gotta get my vendor video yeah and a video you can now bring up the slash computer, so

00:14:09.529 --> 00:14:11.029
virtually

00:14:11.029 --> 00:14:13.269
There are two ways you can walk over the Ray

00:14:14.120 --> 00:14:18.640
We went up the array from the smaller numbers to the larger numbers

00:14:18.640 --> 00:14:23.529
But we could also start at the larger indexes and move back to the smaller indexes, and I thought well

00:14:23.839 --> 00:14:28.719
Let's try it both ways let's not have anyone posting some comments saying no, but if you went the other way

00:14:29.210 --> 00:14:34.900
So let's run it the other way, so I wrote a version which walks down and because we're adding the numbers together

00:14:34.900 --> 00:14:40.479
We'll get exactly the same answer a plus b equals b. Plus a and all that you can watch numberphile to find out

00:14:41.060 --> 00:14:43.060
More online. I'm sure

00:14:43.220 --> 00:14:49.030
You think this would take exactly the same amount of time, so just update our table

00:14:49.880 --> 00:14:54.609
To do this and we're going to have the reverse array here

00:14:56.150 --> 00:14:58.010
I'll just wait while it does that

00:14:58.010 --> 00:15:02.229
So going backwards through the array the only thing can we do the same thing with the linked list

00:15:02.560 --> 00:15:04.929
Well the way we've designed the linked list we

00:15:05.750 --> 00:15:12.460
Have a pointer to the next thing in each thing, but we don't have a pointer back to the previous thing

00:15:12.460 --> 00:15:15.369
It's a singly linked list so we can only move forwards along it

00:15:15.410 --> 00:15:20.530
We could design it to be a doubly linked list and have a backwards and forwards pointer

00:15:20.570 --> 00:15:23.679
but if you think about it if we started at the end

00:15:23.680 --> 00:15:26.830
And move backwards that's going to be exactly the same

00:15:27.200 --> 00:15:30.729
Operations as if we start at the beginning and before so there's actually no point in testing

00:15:30.730 --> 00:15:36.310
It'd be exactly the same code. We just be using different offsets into memory so taking exactly the same amount of time

00:15:37.580 --> 00:15:43.209
While we wait for that to do its thing let's run the same programs on

00:15:44.029 --> 00:15:50.559
The Imac and see how much faster it is so let's compile them up. I am turning on as I did before all the optimizations

00:15:51.770 --> 00:15:59.639
For the array and things that'll make it go as fast as poss but some of the comparison to the array

00:16:00.820 --> 00:16:03.360
Test and I going to compile with the speed test

00:16:05.980 --> 00:16:07.980
Done, and I'm going to do the same thing

00:16:08.830 --> 00:16:10.830
for the link

00:16:11.440 --> 00:16:14.129
Test I'm going to say something really obvious now

00:16:14.130 --> 00:16:19.170
But it's honestly a heck of a lot quicker this machine just to get compiled up and ready. Yeah

00:16:19.170 --> 00:16:23.219
Those machines much faster because while I'm compiling everything on here and then transferring it across

00:16:23.530 --> 00:16:28.170
Rather than trying to get my old C compiler going on the AtAri

00:16:28.570 --> 00:16:34.230
And also the chances are this will produce better code, so it'll take make the most benefit of the speed

00:16:34.780 --> 00:16:38.699
We can pile them up, so let's run the linked list test as we did before

00:16:39.910 --> 00:16:41.800
boom

00:16:41.800 --> 00:16:43.240
It's done

00:16:43.240 --> 00:16:45.599
Everything now you notice that took a lot quicker?

00:16:46.120 --> 00:16:53.579
The numbers are still roughly in the same order still about 100 and around 200 but remember this is a different

00:16:53.890 --> 00:17:01.290
Clock we cannot compare the ticks from that one - it's on the different numbers, but we get the average here two hundred and nine

00:17:01.870 --> 00:17:06.869
Point five four I'm acting this is 166 atari ticks

00:17:06.870 --> 00:17:11.130
They're much slower chicks than the I like ticks we can't compare that to that we can compare

00:17:11.710 --> 00:17:12.820
horizontally

00:17:12.820 --> 00:17:16.080
let's do the same now with the array test and

00:17:18.220 --> 00:17:19.600
Wow

00:17:19.600 --> 00:17:24.510
When we did the linked list test on the atari it was faster than the array test

00:17:25.570 --> 00:17:27.599
Roughly take you about ten percent faster

00:17:28.660 --> 00:17:32.099
Nothing really in it you could say look at the difference on

00:17:32.710 --> 00:17:38.879
The Imac the IMac takes forty three point four four clock ticks to do the array

00:17:39.730 --> 00:17:41.730
209 that's five times

00:17:42.670 --> 00:17:46.979
Faster for the Array was on the Atari the linked list was faster

00:17:47.620 --> 00:17:50.219
So a reverse array is now going on

00:17:51.220 --> 00:17:53.220
the Atari

00:17:53.860 --> 00:17:55.860
114 and

00:17:55.990 --> 00:18:02.790
That's quicker. That's quicker than the original array, and that's quicker than the linked list, so if we do everything backwards

00:18:04.570 --> 00:18:08.519
Doogie where it's very good if you do everything forwards

00:18:09.630 --> 00:18:12.109
It's much slower. I'm a bit confused

00:18:12.180 --> 00:18:17.509
Is there any possibility that's just a problem the code or something always are you going to reveal something to this year?

00:18:19.890 --> 00:18:22.850
We need to delve a bit deeper here to see what's really going on

00:18:24.480 --> 00:18:26.480
Remember we wrote these programs in C

00:18:26.790 --> 00:18:29.960
So we wrote these in the high-level language and then they got compiled down

00:18:30.300 --> 00:18:36.259
To the instructions that the machine can execute and what's actually happening here. Is that the research shows that the machine can execute?

00:18:36.840 --> 00:18:42.979
Favor walking backwards down something compared with going further upwards now

00:18:43.260 --> 00:18:45.379
Let's run that same array backwards

00:18:45.900 --> 00:18:52.580
Program on the IMac for completing this so let me compile that one up and again. I'm

00:18:53.280 --> 00:18:55.280
Optimizing everything to the hilt

00:18:55.800 --> 00:18:58.220
Test and so we'll run speed tests back

00:19:01.380 --> 00:19:06.200
And we'll run this one so before the arrays now much faster

00:19:07.590 --> 00:19:13.609
According to this a reversal rate should be faster than the forward array. So what would you expect the value to be shown for?

00:19:14.730 --> 00:19:20.180
Run on the reverse away about fifteen or twenty directly if it was the same as that did

00:19:20.940 --> 00:19:22.890
All right

00:19:22.890 --> 00:19:26.090
Would you like to stick with that answer or would you like to change that oh?

00:19:27.270 --> 00:19:29.270
nervous excited actually

00:19:29.760 --> 00:19:36.260
Because the Atari was faster to do a linked list in an array and the iMac was the other way around

00:19:36.260 --> 00:19:40.640
I'm going to say it's going to be slower to do it in reverse. So you reckon firm supposed to do it in reverse

00:19:41.030 --> 00:19:45.920
Oh, I do like an indecisive person there. We go average time forty seven

00:19:48.090 --> 00:19:50.010
point four six

00:19:50.010 --> 00:19:54.619
So marginally slow marginally slower about 10% slower

00:19:55.410 --> 00:19:57.590
but still an order of magnitude

00:19:59.220 --> 00:20:02.329
faster than this we could do the same on the raspberry Pi

00:20:03.750 --> 00:20:08.450
So again, we'll compile all of these up, so we'll do it array test

00:20:10.290 --> 00:20:17.509
Compile it up noticeably slower to compile will do the LL test. This is the list version

00:20:19.600 --> 00:20:23.829
And we'll do the reverse test

00:20:25.700 --> 00:20:31.299
So compile them all up on the last repair, so let's run these and get the numbers we've run the array test

00:20:31.970 --> 00:20:39.519
we now get nine 165 point seven five as an average for the array will run the link list and

00:20:41.150 --> 00:20:44.800
We get one eight five eight

00:20:46.160 --> 00:20:52.000
Point six one for the linked list test and now we run the reverse test

00:20:53.810 --> 00:20:55.810
and

00:20:55.880 --> 00:20:58.209
We get 101

00:21:01.190 --> 00:21:06.159
9.5 five so we've run the test now. So we've we've assumed nothing

00:21:06.160 --> 00:21:11.259
We've ran some tests or to get some data so we can see which is faster an array or liquids with this operation

00:21:11.260 --> 00:21:12.710
We've been trying

00:21:12.710 --> 00:21:15.279
And we've got some pretty interesting results

00:21:15.280 --> 00:21:19.090
So we're running on the atari the linked list was faster than the array

00:21:19.460 --> 00:21:23.380
unless he ran the array backwards in which case the array was faster than the linked list and

00:21:23.510 --> 00:21:25.600
The array going forward we'll come back to that

00:21:25.600 --> 00:21:29.649
We ran it on the raspberry Pi and here the array was about twice as fast as the linked list

00:21:29.960 --> 00:21:36.460
Baby rarely backwards the Array was slower, and if you do it on the IMac view range height, I'm faster than the linked list

00:21:36.980 --> 00:21:39.370
Whichever way you went so what's going on here?

00:21:39.490 --> 00:21:43.539
Well, let's ignore the iMac for the minute the apple Haters will love that bit

00:21:43.540 --> 00:21:48.009
but let's ignore the Imac for though and let's just have a look at the raspBerry Pi and

00:21:48.620 --> 00:21:50.620
the attali so we've got

00:21:50.780 --> 00:21:54.399
the Atari and the Raspberry Pi and we'll just go with

00:21:55.040 --> 00:22:00.340
The array speed and the link to this so we've got about one hundred and seventy nine

00:22:00.590 --> 00:22:07.029
For that and one hundred and sixty-six clock ticks that now when we can't compare the clock ticks between the different machines because they're different

00:22:07.700 --> 00:22:09.430
different clocks used in the machines

00:22:09.430 --> 00:22:15.279
but we can compare them relatively between the same thing on the same machine for the raspberry Pi it was

00:22:15.830 --> 00:22:17.600
966 and

00:22:17.600 --> 00:22:19.600
that was a

00:22:19.790 --> 00:22:22.450
1859 Kish now what's going on here?

00:22:23.840 --> 00:22:25.730
Well the thing we need to remember

00:22:25.730 --> 00:22:26.900
if you look at the machine code

00:22:26.900 --> 00:22:34.059
It's roughly the same length the same number of operation now on the atari some of the instructions will take slightly longer than to execute

00:22:34.370 --> 00:22:36.400
But that's not what gets going on here

00:22:36.500 --> 00:22:38.829
We need to think back to the video on

00:22:39.320 --> 00:22:46.150
Cashiers that we did the difference between the raspberry Pi CPU would have been much faster and more modern and the Ataris

00:22:46.520 --> 00:22:48.520
Is that the AtAris?

00:22:48.980 --> 00:22:50.690
Doesn't have a cache

00:22:50.690 --> 00:22:58.510
So every instructionally needs to fetch every bit of data that needs to fetch has to be fetched from memory each time

00:22:58.880 --> 00:23:00.880
No, it's not cached

00:23:01.220 --> 00:23:07.000
broadly speaking we believe something going on there, but broadly speaking with no cache is about half the

00:23:07.760 --> 00:23:10.900
Prefetch buffer if you want to get into the details, but we can see there's no cash

00:23:10.900 --> 00:23:15.249
So if we think about the cPU in the atari, then it's having to access

00:23:16.340 --> 00:23:18.340
memory

00:23:19.130 --> 00:23:23.979
For everything so everything that the cPU needs to fetch on the Atari the instructions

00:23:24.290 --> 00:23:31.569
The data from the array or a linked list and of course the next pointer from the linked list has to come from memory

00:23:31.570 --> 00:23:37.750
So it takes the same amount of time we get are the two weather fetching data or fetching instructions on the raspBerry Pi however?

00:23:38.750 --> 00:23:45.400
We still got the main body the cPU which is going to execute things and it has memory

00:23:46.100 --> 00:23:47.570
as well

00:23:47.570 --> 00:23:54.730
but in between there we have a cache in fact we actually probably have two caches one for Data and

00:23:57.140 --> 00:23:59.140
one for instructions as

00:23:59.720 --> 00:24:02.709
I want to see if you activate as we looked at in the previous video is

00:24:03.290 --> 00:24:07.929
Access to it via the caches, and then they if they haven't got it to get it

00:24:08.600 --> 00:24:11.140
From memory, so why does this make a difference?

00:24:11.809 --> 00:24:15.099
Surely things will still wake up so well on the atari the fastest

00:24:15.770 --> 00:24:20.650
thing in the theory is basically the memory the memory is much faster than the cPU that's about twice as fast and

00:24:20.870 --> 00:24:25.929
So the memory can provide a data exactly when the cPU needs it. There's no real need for cash

00:24:26.900 --> 00:24:33.309
Move ahead to the raspberry Pi and the are make of course then the cPU is much faster than the memory

00:24:33.740 --> 00:24:38.140
So when cPU ask for something it has to wait while the memory?

00:24:38.780 --> 00:24:40.340
provides it

00:24:40.340 --> 00:24:42.550
Now let's figure out how what happens when we run our program?

00:24:43.550 --> 00:24:45.550
with the array

00:24:46.220 --> 00:24:48.220
on the raspberry Pi

00:24:48.450 --> 00:24:54.379
Every instruction after the first time will be accessed will be cached in the instruction cache

00:24:54.509 --> 00:24:58.849
So the first time we go through the loop all the instructions are going to be used in that loop will have been cached in

00:24:58.850 --> 00:25:01.279
The instruction cap so you can get these immediately the data

00:25:02.669 --> 00:25:05.628
particularly with the array would also collapse a bit with a linked list we

00:25:06.090 --> 00:25:08.899
Don't get just one or two bytes in each time

00:25:08.899 --> 00:25:14.268
I'll get what we call a cache line pickups 128 bytes in a go, so we'll get some of the data that we already need

00:25:15.090 --> 00:25:19.759
Into the cache as well, so some of the data will already be there in the array more so with your right

00:25:19.769 --> 00:25:26.089
so the reason of the array runs faster on the raspberry Pi is that all the instructions are coming straight out of the

00:25:26.250 --> 00:25:29.750
Institute basically giving us a fast lane for those instructions, so they get there immediately

00:25:30.840 --> 00:25:35.029
There's only the data that needs to get from main memory, which will get cached as well

00:25:35.789 --> 00:25:37.789
So the same happens with the route list program

00:25:38.279 --> 00:25:42.768
Except for one crucial difference with the linked list poem we have to make one memory access

00:25:42.990 --> 00:25:45.620
to get the data value that we're going to sum and

00:25:45.929 --> 00:25:49.878
Then we have to make another memory access which has to go through the cat into main memory

00:25:50.970 --> 00:25:52.970
for the address of the next thing

00:25:53.789 --> 00:25:55.789
we have to make to

00:25:55.889 --> 00:25:58.819
Memory request which may get satisfied by main Memory here

00:25:59.519 --> 00:26:00.710
Where's our the array one?

00:26:00.710 --> 00:26:04.250
We only have to make one for the value that we're interested in and because of the cache

00:26:04.590 --> 00:26:12.019
We get sort of a fast passing instructions, and so actually not having to do that second memory access to get the next pointer here

00:26:12.720 --> 00:26:19.669
Means that this the arraylist of the program ends are working about twice as fast on the atari because everything is coming from

00:26:20.070 --> 00:26:24.230
memory it doesn't matter whether you're reading an instruction or reading a

00:26:25.740 --> 00:26:26.539
bit of Data

00:26:26.539 --> 00:26:33.528
It's still going to come from memory each time so actually the front of the value is already pre-calculated in memory means that actually runs

00:26:34.470 --> 00:26:40.579
Slightly faster, I mean, we're talking perhaps 10% faster. Not really a billion so we get a slight speed benefit

00:26:41.700 --> 00:26:43.850
Now to show that this is the case

00:26:43.850 --> 00:26:50.149
I took the same version of the program on the atari and ran it on the atari router now the difference for the AtAri

00:26:50.149 --> 00:26:55.518
St. We use there and the Falcon is that the falcon has a slightly later version of the 68000 processor

00:26:56.159 --> 00:26:58.130
which has a cache

00:26:58.130 --> 00:27:04.010
In it both instructions and data cache and when I ran that on there the times that came out

00:27:05.130 --> 00:27:11.270
So the array was 46 clock ticks is much faster processor anyway, and the link list

00:27:11.970 --> 00:27:13.970
was

00:27:14.580 --> 00:27:16.080
58.5

00:27:16.080 --> 00:27:20.750
Clock ticks so on the Falcon because you've got the cache. They're just like on the raspberry Pi

00:27:21.390 --> 00:27:26.839
The array version ends up being traffic exactly the same program exactly the same machine code

00:27:27.510 --> 00:27:32.209
Because you've got the cache there the array version ends up being faster because the instructions of their

00:27:32.640 --> 00:27:36.169
Professional and that sort of fat packs from the cache rather having to go to main memory each time

00:27:36.900 --> 00:27:38.520
mean that the

00:27:38.520 --> 00:27:41.539
irradiation becomes faster than the linked list version

00:27:42.870 --> 00:27:49.400
Now tell them other things we haven't talked about yet. Why is the reverse array faster on the AtAri?

00:27:50.280 --> 00:27:51.980
Simple answer to that it

00:27:51.980 --> 00:27:56.809
Just uses slightly different instructions their instructions on the six 8000 that allow you to do a decrement

00:27:56.880 --> 00:27:59.869
Testing with zero branch which isn't all in one instruction

00:28:00.299 --> 00:28:06.649
So you can actually make the code slightly more compact and run slightly faster again. It's a small enough time

00:28:07.860 --> 00:28:13.849
Why then is the imac significantly faster? We're getting sort of five times faster?

00:28:14.220 --> 00:28:18.319
Well that's because I use a slightly different compiler that I use the clang C

00:28:18.450 --> 00:28:23.210
Compiler on the IMac rather than GCC for the other two and it cheats it

00:28:23.850 --> 00:28:28.039
It squats that you've got an array axises in the loop, and it says well

00:28:28.039 --> 00:28:31.249
Okay, rather than doing a loop around one array access

00:28:31.250 --> 00:28:35.030
I will do a loop around eight array accesses all in one go

00:28:35.030 --> 00:28:41.179
So it actually removes some of the tests for the loop and it makes the program much faster for the compilers being clever

00:28:41.460 --> 00:28:42.950
And optimizing the program

00:28:42.950 --> 00:28:47.870
So it runs faster the answer to whether the raise faster than the link list or not?

00:28:48.240 --> 00:28:54.260
Very much depends on how you cpu in the machine that you've built is configured to actually execute the code

00:28:54.690 --> 00:28:56.220
So you can't make assumptions?

00:28:56.220 --> 00:29:01.970
About how a cpu will execute code you really need to do the test to see what's happening even within the same

00:29:02.970 --> 00:29:09.319
architecture family the difference between the six 8006 8030 in the Falcon mean that

00:29:09.750 --> 00:29:16.069
Assumptions we make based on what they charity did where the Rally was slower than the link list aren't true on

00:29:16.260 --> 00:29:22.909
The Falcon and when you move it on to a completely different architecture like the raspberry Pi or the X86 chip in the iMac

00:29:23.070 --> 00:29:28.700
Then again you get different effects, so the best thing is when you're faced with a question question like this, and you're not sure

00:29:29.220 --> 00:29:33.500
Come up with some test and collect real data, and you'll be able to see what's going on

00:29:55.300 --> 00:29:57.300
could you

