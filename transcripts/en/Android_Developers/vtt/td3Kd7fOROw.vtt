WEBVTT
Kind: captions
Language: en

00:00:04.333 --> 00:00:06.000
DAN SANDLER: This is
what my team does--

00:00:06.000 --> 00:00:06.510
System UI.

00:00:06.510 --> 00:00:10.180
We see a UI paradigm
taking hold in the wild.

00:00:10.180 --> 00:00:10.680
We take it.

00:00:10.680 --> 00:00:11.430
We learn about it.

00:00:11.430 --> 00:00:13.213
We make it safer, more reusable.

00:00:13.213 --> 00:00:15.755
And then we contribute it back
to the framework for everybody

00:00:15.755 --> 00:00:16.800
to use on Android.

00:00:16.800 --> 00:00:20.760
So in API 29, we have a
developer preview of something

00:00:20.760 --> 00:00:22.650
that we call Bubbles.

00:00:22.650 --> 00:00:25.350
Bubbles is an implementation
for any app that

00:00:25.350 --> 00:00:28.530
wants to use it of a
floating chat bubble

00:00:28.530 --> 00:00:30.750
that you can use to
connect to your app.

00:00:30.750 --> 00:00:33.000
And effectively, you tie
it to a notification.

00:00:33.000 --> 00:00:36.600
You add in some bubble metadata
here, including an icon.

00:00:36.600 --> 00:00:38.070
And an intent to
launch an activity

00:00:38.070 --> 00:00:41.250
will actually put your activity
inside a floating window.

00:00:44.340 --> 00:00:46.380
We'll put your activity
inside a floating window

00:00:46.380 --> 00:00:47.800
when the user
touches that bubble.

00:00:47.800 --> 00:00:49.630
So this is something we've
been working on for a while.

00:00:49.630 --> 00:00:50.797
But we really need feedback.

00:00:50.797 --> 00:00:52.320
We're excited for you to use it.

00:00:52.320 --> 00:00:53.400
Let us know how it works.

00:00:53.400 --> 00:00:54.775
The way this is
going to work is,

00:00:54.775 --> 00:00:57.390
in Q, you can go turn this
on in developer settings

00:00:57.390 --> 00:01:00.390
and start implementing
support for it in your app.

00:01:00.390 --> 00:01:02.640
Or, as a user, you can
start seeing which apps have

00:01:02.640 --> 00:01:04.410
moved over to this new system.

00:01:04.410 --> 00:01:06.330
In the future, we'll
move that opt-in up

00:01:06.330 --> 00:01:08.460
to a full user
setting so that users

00:01:08.460 --> 00:01:10.230
can turn on Bubble support.

00:01:10.230 --> 00:01:13.950
And then, eventually, the
SAWs will be fully deprecated,

00:01:13.950 --> 00:01:16.950
and all apps using that paradigm
to do Bubbles will move over

00:01:16.950 --> 00:01:19.410
to the Bubbles API.

00:01:19.410 --> 00:01:21.390
There is a talk
about this Thursday,

00:01:21.390 --> 00:01:23.010
9:30, right after breakfast--

00:01:23.010 --> 00:01:25.090
What's New in the Android
OS User Interface.

00:01:25.090 --> 00:01:27.000
It's either here or
Stage 1, one of those.

00:01:27.000 --> 00:01:29.665
It'll be on YouTube, too.

00:01:29.665 --> 00:01:31.290
Now that we're done
talking about that,

00:01:31.290 --> 00:01:35.817
I want to bring the
lights down a little bit,

00:01:35.817 --> 00:01:36.900
and talk about Dark Theme.

00:01:40.532 --> 00:01:41.990
From the Google
Finally department,

00:01:41.990 --> 00:01:46.462
it is finally an end-user
feature in core Android.

00:01:46.462 --> 00:01:48.420
It's no longer tied to
time of day, by the way.

00:01:48.420 --> 00:01:51.380
So this whole MODE AUTO_TIME
thing, that's done.

00:01:51.380 --> 00:01:51.880
Forget it.

00:01:51.880 --> 00:01:54.690
It is just, user wants
it on, user wants it off.

00:01:54.690 --> 00:01:56.577
That's how Dark Theme works.

00:01:56.577 --> 00:01:58.160
So if you want to
Dark Theme your app,

00:01:58.160 --> 00:01:59.118
you have a few options.

00:01:59.118 --> 00:02:00.930
Option A, and this
is the easiest,

00:02:00.930 --> 00:02:04.260
is just to use
the Android themes

00:02:04.260 --> 00:02:06.210
that we already have
that support this.

00:02:06.210 --> 00:02:08.490
So AppCompat.DayNight--
that's been there for a while.

00:02:08.490 --> 00:02:10.035
We now have
DeviceDefault.DayNight

00:02:10.035 --> 00:02:11.910
if you're trying to
match the device's style,

00:02:11.910 --> 00:02:13.973
you're making more of
a utility kind of app.

00:02:13.973 --> 00:02:15.390
And then you can
actually pull out

00:02:15.390 --> 00:02:19.800
just elements of the
day-night current theme

00:02:19.800 --> 00:02:22.950
like colors and things like that
to just pull in accent colors.

00:02:24.210 --> 00:02:25.690
Your other option is--

00:02:25.690 --> 00:02:26.940
this is actually kind of wild.

00:02:26.940 --> 00:02:29.190
We have this thing in
Q called Force Dark

00:02:29.190 --> 00:02:30.240
that you can turn on.

00:02:30.240 --> 00:02:32.850
This is kind of some
eccentric wizardry

00:02:32.850 --> 00:02:34.950
that the graphics
team has put together.

00:02:34.950 --> 00:02:38.790
If you want, the OS will
just invert your app for you.

00:02:38.790 --> 00:02:40.320
Just flip it into dark mode.

00:02:40.320 --> 00:02:41.847
You don't have to
do anything else--

00:02:41.847 --> 00:02:43.680
except that it's actually
kind of terrifying

00:02:43.680 --> 00:02:45.870
when some things, like
photos, are inverted.

00:02:45.870 --> 00:02:47.880
So you can actually opt
out individual views

00:02:47.880 --> 00:02:50.100
from being put into
forced dark if you're

00:02:50.100 --> 00:02:51.660
using that in your app at all.

00:02:51.660 --> 00:02:52.860
So you should try that.

00:02:52.860 --> 00:02:56.343
It may actually save you quite
a bit of development time.

00:02:56.343 --> 00:02:58.260
Option C-- you've always
been able to do this.

00:02:58.260 --> 00:02:59.190
Just do it yourself.

00:02:59.190 --> 00:03:01.050
Look at the UI mode.

00:03:01.050 --> 00:03:02.760
Change all of the
themes in your app.

00:03:02.760 --> 00:03:03.960
Switch it around.

00:03:03.960 --> 00:03:06.345
That's always fine--
as long as you're

00:03:06.345 --> 00:03:07.845
looking at the
current configuration

00:03:07.845 --> 00:03:09.990
and know whether
you should be doing

00:03:09.990 --> 00:03:12.300
dark theme or light theme.

00:03:12.300 --> 00:03:15.420
And then, of course, option
D, which I do not recommend,

00:03:15.420 --> 00:03:16.260
is just ignore it.

00:03:16.260 --> 00:03:20.480
And then you'll be the only
app with a searingly white UI

00:03:20.480 --> 00:03:22.835
in between other
neatly dark themed apps

00:03:22.835 --> 00:03:23.710
on the user's device.

00:03:23.710 --> 00:03:24.960
So don't do that.

00:03:24.960 --> 00:03:26.850
We have another talk about that.

00:03:26.850 --> 00:03:31.060
That is Thursday, also, at-- how
did we end up with both system

00:03:31.060 --> 00:03:33.060
UI talks at the same time
on different-- anyway.

00:03:33.060 --> 00:03:34.810
CHET HAASE: We're
really into concurrency.

00:03:34.810 --> 00:03:36.014
[LAUGHTER]

00:03:37.388 --> 00:03:40.620
DAN SANDLER: You know, if we
had just used co-routines--

00:03:40.620 --> 00:03:43.350
Thursday at 9:30, there's a
separate talk about Dark Theme

00:03:43.350 --> 00:03:48.270
and gestures in Android Q,
which I encourage you to attend.

00:03:48.270 --> 00:03:50.640
Next up in system UI,
let's talk about sharing.

00:03:50.640 --> 00:03:53.270
And as we all know,
sharing is caring.

00:03:53.270 --> 00:03:54.770
And in this particular
context, what

00:03:54.770 --> 00:03:56.820
that means is, we,
my team, Android--

00:03:56.820 --> 00:04:00.780
we care about performance,
custom share targets

00:04:00.780 --> 00:04:05.070
coming from your app, content
previews, copy to clipboard.

00:04:05.070 --> 00:04:06.330
Did I mention performance?

00:04:06.330 --> 00:04:09.220
These are things that
we really care about.

00:04:09.220 --> 00:04:13.410
But the share sheet in
P needs a little more

00:04:13.410 --> 00:04:14.880
of that caring, a
little more TLC.

00:04:14.880 --> 00:04:19.200
So let me present to you the
share sheet in Q. It's awesome.

00:04:19.200 --> 00:04:22.420
So this bad boy can
fit so many icons.

00:04:22.420 --> 00:04:22.920
Look.

00:04:22.920 --> 00:04:27.120
We've got content preview that
does images and text depending

00:04:27.120 --> 00:04:28.800
on what you put
into the clip data.

00:04:28.800 --> 00:04:30.360
We have a new
sharing shortcut API

00:04:30.360 --> 00:04:33.690
that does not synchronously
and serially launch every app

00:04:33.690 --> 00:04:35.380
and ask it, hey, what you got?

00:04:35.380 --> 00:04:38.050
It's lightning fast.

00:04:38.050 --> 00:04:40.200
We've got copy to clipboard
that's just a button.

00:04:40.200 --> 00:04:42.000
It's just a button
right there at the top.

00:04:42.000 --> 00:04:44.760
Like, why did we not
think of this before?

00:04:44.760 --> 00:04:46.875
And it is really, really fast.

00:04:46.875 --> 00:04:47.750
Beautiful animations.

00:04:47.750 --> 00:04:49.125
I'm so excited
for you to try it.

00:04:49.125 --> 00:04:51.180
It's in beta 3.

00:04:51.180 --> 00:04:52.050
Check it out.

00:04:52.050 --> 00:04:54.030
And we're talking about
that-- guess what?

00:04:54.030 --> 00:04:55.620
On Thursday at 9:30.

00:04:55.620 --> 00:04:57.512
[LAUGHTER]

00:05:00.350 --> 00:05:02.267
Now, let's talk--

00:05:02.267 --> 00:05:03.350
CHET HAASE: Interruptions.

00:05:03.350 --> 00:05:04.412
[LAUGHTER]

00:05:04.412 --> 00:05:05.870
DAN SANDLER: --about
interruptions.

00:05:05.870 --> 00:05:06.537
Thank you, Chet.

00:05:06.537 --> 00:05:07.360
CHET HAASE: Yeah.

00:05:07.360 --> 00:05:09.110
DAN SANDLER: Interruptions--
notifications

00:05:09.110 --> 00:05:12.230
that ask for your
attention urgently.

00:05:12.230 --> 00:05:14.000
We did a little back
of the envelope math.

00:05:14.000 --> 00:05:17.570
Most of our users get at
least one of these interrupt--

00:05:17.570 --> 00:05:20.090
something beeping,
popping up, whatever--

00:05:20.090 --> 00:05:23.480
at least one per waking hour,
but a substantial fraction,

00:05:23.480 --> 00:05:25.578
every 10 minutes
or more frequently.

00:05:25.578 --> 00:05:27.620
And our user research says
that this is too much.

00:05:27.620 --> 00:05:30.590
People feel like they're
getting too many interruptions.

00:05:30.590 --> 00:05:32.703
A great deal of that is
due to people's lives

00:05:32.703 --> 00:05:33.870
being full of interruptions.

00:05:33.870 --> 00:05:37.730
But your device, your phone
should help you manage that.

00:05:37.730 --> 00:05:41.220
People want to be interrupted,
but only for what matters.

00:05:41.220 --> 00:05:44.680
We want notifications
to just chill out.

00:05:44.680 --> 00:05:46.130
What's a good word?

00:05:46.130 --> 00:05:47.020
Calm?

00:05:47.020 --> 00:05:47.520
Quiet?

00:05:47.520 --> 00:05:49.520
[SPEAKING FRENCH]

00:05:51.050 --> 00:05:51.708
Gentle.

00:05:51.708 --> 00:05:53.000
Gentle is the word [INAUDIBLE].

00:05:53.000 --> 00:05:53.460
CHET HAASE: I think
he was chilling out.

00:05:53.460 --> 00:05:54.380
ROMAIN GUY: Were you
trying to speak French?

00:05:54.380 --> 00:05:54.790
DAN SANDLER: No.

00:05:54.790 --> 00:05:55.832
ROMAIN GUY: That was bad.

00:05:55.832 --> 00:05:56.856
[LAUGHTER]

00:05:57.800 --> 00:05:59.270
DAN SANDLER: So we're going to
take those notifications that

00:05:59.270 --> 00:06:00.410
aren't trying to
get your attention,

00:06:00.410 --> 00:06:03.050
and we're going to put them down
here, in a separate section.

00:06:03.050 --> 00:06:04.635
We'll call this
the gentle section.

00:06:04.635 --> 00:06:07.010
That leaves the urgent stuff,
the things that can't wait,

00:06:07.010 --> 00:06:08.720
and the things that make noise
to get your attention-- those

00:06:08.720 --> 00:06:09.440
go at the top.

00:06:09.440 --> 00:06:11.670
And we call those priority.

00:06:11.670 --> 00:06:13.460
So the question, of
course, as developers

00:06:13.460 --> 00:06:14.810
is, what takes priority?

00:06:14.810 --> 00:06:17.810
Because if everything
is priority, nothing is.

00:06:17.810 --> 00:06:19.350
First of all, apps
can still say,

00:06:19.350 --> 00:06:21.380
hey, this is an important thing.

00:06:21.380 --> 00:06:22.430
And that causes a popup--

00:06:22.430 --> 00:06:24.817
a heads-up notification,
we call it internally.

00:06:24.817 --> 00:06:25.400
You know this.

00:06:25.400 --> 00:06:28.640
So you use that sparingly
to not annoy the user.

00:06:28.640 --> 00:06:30.140
We've also always
applied, and we're

00:06:30.140 --> 00:06:33.230
continuing to tune our
OS-level heuristics for how

00:06:33.230 --> 00:06:35.090
to adjust these things
to try to figure out,

00:06:35.090 --> 00:06:37.160
what is the right
actual presentation

00:06:37.160 --> 00:06:39.320
for this notification
in the moment?

00:06:39.320 --> 00:06:42.160
So we'll actually make sure
that things like basic device

00:06:42.160 --> 00:06:44.660
functions like, hey, you're out
about to run out of battery,

00:06:44.660 --> 00:06:46.118
or, here's an
incoming phone call--

00:06:46.118 --> 00:06:47.877
those things are a priority.

00:06:47.877 --> 00:06:50.210
We're also going to continue
to prioritize communication

00:06:50.210 --> 00:06:52.728
from people, which we've
done for a few releases now.

00:06:52.728 --> 00:06:54.770
And also, events, alarms--
things that you really

00:06:54.770 --> 00:06:55.747
don't want to miss.

00:06:55.747 --> 00:06:57.830
And then, as always-- you
should know this by now.

00:06:57.830 --> 00:06:58.880
My team feels very strongly.

00:06:58.880 --> 00:07:00.350
The user always
gets the final say.

00:07:00.350 --> 00:07:02.510
So you'll be able to long
press on a notification,

00:07:02.510 --> 00:07:05.960
and very easily switch it
from priority to gentle

00:07:05.960 --> 00:07:09.790
and back to decide
which bucket it fits in.

00:07:09.790 --> 00:07:12.590
In beta 3, we're trying
something a little exciting

00:07:12.590 --> 00:07:14.480
where we don't
actually show the icons

00:07:14.480 --> 00:07:17.450
for those gentle notifications
in the status bar.

00:07:17.450 --> 00:07:18.998
Let us know how you
feel about that.

00:07:18.998 --> 00:07:20.540
We're still trying
decide how we want

00:07:20.540 --> 00:07:26.030
to make that work in future
versions of the beta software.

00:07:26.030 --> 00:07:27.880
While we're talking
about notifications--

00:07:27.880 --> 00:07:29.630
I think this was
mentioned in at least one

00:07:29.630 --> 00:07:31.970
of the other two keynotes today.

00:07:31.970 --> 00:07:34.340
We talked about-- we call
them notification actions.

00:07:34.340 --> 00:07:36.380
But these smart
replies actually are

00:07:36.380 --> 00:07:38.720
something that the
OS is now supplying

00:07:38.720 --> 00:07:40.800
to all messaging
style notifications.

00:07:40.800 --> 00:07:42.680
We're just going to
throw them in there.

00:07:42.680 --> 00:07:46.050
And you've seen this in
Google Apps up until now.

00:07:46.050 --> 00:07:48.020
Now every app on
the device is going

00:07:48.020 --> 00:07:50.900
to have the ability to have
this in messaging style.

00:07:50.900 --> 00:07:54.170
And you can even opt into it
for other notification types

00:07:54.170 --> 00:07:55.170
as well, if you want.

00:07:55.170 --> 00:07:56.628
And this is
automatically generated

00:07:56.628 --> 00:07:58.670
based on the content
of that notification.

00:07:58.670 --> 00:08:00.860
So that's the last bit
of notifications news.

00:08:00.860 --> 00:08:04.020
And we're talking
about it-- guess when?

00:08:04.020 --> 00:08:04.790
Thursday at 9:30.

00:08:04.790 --> 00:08:06.860
That's right.

00:08:06.860 --> 00:08:08.390
Last thing, and
then contractually,

00:08:08.390 --> 00:08:10.560
I'm required to
give up the clicker.

00:08:10.560 --> 00:08:12.523
I want to talk to you
about gesture navigation.

00:08:12.523 --> 00:08:13.940
So this is something,
as you know,

00:08:13.940 --> 00:08:15.648
we've been working on
for a little while.

00:08:15.648 --> 00:08:20.018
We started hacking away at it
in P sort of in baby steps.

00:08:20.018 --> 00:08:21.560
But it's important
to talk about just

00:08:21.560 --> 00:08:23.280
briefly, why is
this even important?

00:08:23.280 --> 00:08:26.720
Why are we going to
gesture navigation

00:08:26.720 --> 00:08:28.460
overall in the operating system?

00:08:28.460 --> 00:08:31.490
The basic idea is to just
get less system UI in the way

00:08:31.490 --> 00:08:33.845
of your beautiful
content that's--

00:08:33.845 --> 00:08:37.760
it's not really-- can we
do more beautiful-- what

00:08:37.760 --> 00:08:40.942
would be the most beautiful
thing that we could put here?

00:08:40.942 --> 00:08:42.325
[LAUGHTER]

00:08:43.250 --> 00:08:43.980
Right?

00:08:43.980 --> 00:08:44.480
Right?

00:08:44.480 --> 00:08:45.855
ROMAIN GUY: I
disagree with this.

00:08:45.855 --> 00:08:46.740
[LAUGHTER]

00:08:50.240 --> 00:08:53.990
DAN SANDLER: So in the case of
gesture navigation at the OS

00:08:53.990 --> 00:08:57.050
level, we noticed a UI
paradigm in the wild.

00:08:57.050 --> 00:08:59.000
And we took a look
at it, understood it,

00:08:59.000 --> 00:09:02.180
made it safer, more usable,
and added it to the framework.

00:09:02.180 --> 00:09:03.960
Does this sound familiar to you?

00:09:03.960 --> 00:09:06.055
This is what we do at Android.

00:09:06.055 --> 00:09:07.430
And in this case,
it was actually

00:09:07.430 --> 00:09:10.710
devices that were pioneering
more immersive experiences,

00:09:10.710 --> 00:09:13.880
but all with different gestures,
where you would slide and poke

00:09:13.880 --> 00:09:17.040
the screen in order to get
it to do different things.

00:09:17.040 --> 00:09:18.950
So we actually worked
with OEMs on this.

00:09:18.950 --> 00:09:19.950
ROMAIN GUY: [INAUDIBLE].

00:09:19.950 --> 00:09:20.490
[LAUGHTER]

00:09:20.490 --> 00:09:21.440
Is that what I'm supposed to do?

00:09:21.440 --> 00:09:22.440
DAN SANDLER: Be careful.

00:09:22.440 --> 00:09:23.900
Be gentle.

00:09:23.900 --> 00:09:26.810
Gentle is the word
of the day, remember?

00:09:26.810 --> 00:09:28.670
We've actually worked
with OEMs on this

00:09:28.670 --> 00:09:31.730
and came up with a standard
that is much simpler,

00:09:31.730 --> 00:09:36.480
and we can start to see
across the ecosystem.

00:09:36.480 --> 00:09:39.050
So as app developers, you
need to prepare yourselves.

00:09:39.050 --> 00:09:41.940
One of the things you want to
do is simply draw edge to edge.

00:09:41.940 --> 00:09:45.300
The whole point of this is
to give you more Chet face.

00:09:45.300 --> 00:09:48.620
So go ahead and actually draw
underneath the status bar,

00:09:48.620 --> 00:09:51.810
underneath the navigation bar,
where you might not ordinarily

00:09:51.810 --> 00:09:52.310
have done.

00:09:52.310 --> 00:09:54.518
But you want to avoid putting
clickable things there,

00:09:54.518 --> 00:09:56.330
because those clicks
are potentially

00:09:56.330 --> 00:09:58.857
going to get captured by,
for example, the status bar.

00:09:58.857 --> 00:10:01.190
You also want to figure out
where the gesture areas are.

00:10:01.190 --> 00:10:03.263
And we're standardizing
what these gestures are,

00:10:03.263 --> 00:10:05.180
but you'll actually want
to look at the insets

00:10:05.180 --> 00:10:07.167
to figure out where
there are regions where

00:10:07.167 --> 00:10:09.500
a swipe from the edge is
actually going to be taken over

00:10:09.500 --> 00:10:10.430
by the operating system.

00:10:10.430 --> 00:10:11.840
Obviously, we've had
that for a long time

00:10:11.840 --> 00:10:13.640
from the top of the
screen and the bottom.

00:10:13.640 --> 00:10:15.530
And now, it's happening
from the left and right.

00:10:15.530 --> 00:10:17.530
So you don't want to put
draggable things there.

00:10:17.530 --> 00:10:20.630
But of course, clicks will
still work-- touches, taps.

00:10:20.630 --> 00:10:23.520
If you have a situation in your
app where you really, really,

00:10:23.520 --> 00:10:26.060
really need to be able to
drag in from the sides--

00:10:26.060 --> 00:10:29.470
you've got a game or you've got
a sidebar navigation pattern

00:10:29.470 --> 00:10:30.710
or you've got a drawing app--

00:10:30.710 --> 00:10:32.090
I hear those are popular--

00:10:32.090 --> 00:10:34.760
you can actually use things
called exclusion rectangles

00:10:34.760 --> 00:10:37.650
to allocate a part of
the screen to say, hey,

00:10:37.650 --> 00:10:42.360
I actually need side gestures
in this particular area.

00:10:42.360 --> 00:10:44.330
So if you've got a
horizontally scrolling thing

00:10:44.330 --> 00:10:46.372
or, again, that [? drawer, ?]
you could take away

00:10:46.372 --> 00:10:49.733
just one of those system gesture
areas and bring it to your app.

00:10:49.733 --> 00:10:51.150
But remember, if
the user is going

00:10:51.150 --> 00:10:54.410
to be relying on
this to go back,

00:10:54.410 --> 00:10:56.540
it needs to really, really
make sense that it's not

00:10:56.540 --> 00:10:59.450
going to do that in your app.

00:10:59.450 --> 00:11:01.400
And we are talking
about this, once again,

00:11:01.400 --> 00:11:06.440
on Thursday at 9:30, in a talk
about Dark Theme and gestures.

00:11:06.440 --> 00:11:09.728
With that, I'll hand
it back to Chet.

00:11:09.728 --> 00:11:10.520
CHET HAASE: Thanks.

00:11:10.520 --> 00:11:12.103
We're going to do a
really quick drive

00:11:12.103 --> 00:11:14.720
by in some of the random
platform improvements

00:11:14.720 --> 00:11:16.580
that we've had recently.

00:11:16.580 --> 00:11:19.970
WebView had a recent change to
introduce Trichrome, which is

00:11:19.970 --> 00:11:21.500
separating WebView from Chrome.

00:11:21.500 --> 00:11:23.450
They used to be lock
step-- so you update one,

00:11:23.450 --> 00:11:24.990
you update the other.

00:11:24.990 --> 00:11:26.450
Now, they are more separate.

00:11:26.450 --> 00:11:29.190
Makes it a little bit easier
to deal with that as a user.

00:11:29.190 --> 00:11:31.367
We also detect when
the render is hung.

00:11:31.367 --> 00:11:33.950
So it's easy to set a callback,
get callback, and do something

00:11:33.950 --> 00:11:35.690
about it if you need to.

00:11:35.690 --> 00:11:37.700
Accessibility-- couple
of important changes.

00:11:37.700 --> 00:11:40.490
It's way easier to set
accessibility actions now.

00:11:40.490 --> 00:11:42.020
That's a one-liner.

00:11:42.020 --> 00:11:44.190
And also, sometimes your UI--

00:11:44.190 --> 00:11:46.580
the amount of time it
needs to stay on the screen

00:11:46.580 --> 00:11:49.620
depends on situations that
are related to the user.

00:11:49.620 --> 00:11:52.220
You can actually query from
the accessibility manager

00:11:52.220 --> 00:11:55.670
how long that transient
UI should stick around.

00:11:55.670 --> 00:11:58.460
There's a talk on accessibility
Wednesday at 9:30.

00:11:58.460 --> 00:12:00.065
Go to that for more.

00:12:00.065 --> 00:12:01.940
ROMAIN GUY: We've also
been changing to text.

00:12:01.940 --> 00:12:05.350
So in API 23, we
introduced hyphenation.

00:12:05.350 --> 00:12:06.350
And it looked beautiful.

00:12:06.350 --> 00:12:09.432
So we turned it on
by default. However,

00:12:09.432 --> 00:12:11.390
we then measured the
performance of that thing.

00:12:11.390 --> 00:12:13.370
And it turns out
it's 2 to 2.5 times

00:12:13.370 --> 00:12:15.170
slower than not
using hyphenation.

00:12:15.170 --> 00:12:18.075
It also turns out that most
layouts are slow because

00:12:18.075 --> 00:12:18.950
of text measurements.

00:12:18.950 --> 00:12:21.410
So in Q, it's now
off by default again.

00:12:21.410 --> 00:12:22.580
So sorry about that.

00:12:22.580 --> 00:12:23.470
[LAUGHTER]

00:12:23.470 --> 00:12:24.345
DAN SANDLER: Dash it.

00:12:24.838 --> 00:12:26.380
ROMAIN GUY: We have
Jetpack libraries

00:12:26.380 --> 00:12:27.380
to help you with this.

00:12:27.380 --> 00:12:31.280
But re-enable it if you
really need hyphenation.

00:12:31.280 --> 00:12:33.440
We also made it easier
to find system fonts.

00:12:33.440 --> 00:12:36.590
Until now, you had to parse
an XML file that was somewhere

00:12:36.590 --> 00:12:37.550
in the system.

00:12:37.550 --> 00:12:38.570
Don't do that anymore.

00:12:38.570 --> 00:12:39.900
Use this new API.

00:12:39.900 --> 00:12:42.720
We also have an API for this
for native applications.

00:12:42.720 --> 00:12:45.680
So if you write a game or
anything with native code,

00:12:45.680 --> 00:12:48.260
you can use this new API
to find all the fonts.

00:12:48.260 --> 00:12:49.760
We also have a bunch
of new features

00:12:49.760 --> 00:12:52.393
that I barely understand, but
I'm sure they are amazing.

00:12:52.393 --> 00:12:53.810
So we finally have
implementations

00:12:53.810 --> 00:12:56.450
for LineBackgroundSpan
and LineHeightSpan.

00:12:56.450 --> 00:12:59.040
Those were two interfaces
that we [INAUDIBLE] in the SDK

00:12:59.040 --> 00:13:00.753
without implementation.

00:13:00.753 --> 00:13:02.420
Sounds like a pretty
stupid thing to do.

00:13:02.420 --> 00:13:04.301
So we fixed it.

00:13:04.301 --> 00:13:07.457
TextAppearanceSpan used to
not read all the attributes

00:13:07.457 --> 00:13:09.290
that there were available
in TextAppearance.

00:13:09.290 --> 00:13:10.610
We also fixed that.

00:13:10.610 --> 00:13:13.160
We have new APIs,
LineBreaker and MeasuredText,

00:13:13.160 --> 00:13:15.680
to let you break lines
the way you want.

00:13:15.680 --> 00:13:17.960
And we have Zawgyi
support, font and encoding.

00:13:17.960 --> 00:13:20.900
So this is useful
for users in Myanmar.

00:13:20.900 --> 00:13:22.400
If you want to know
more about text,

00:13:22.400 --> 00:13:24.843
tomorrow at 6:30, there's a--

00:13:24.843 --> 00:13:30.170
sorry-- a talk
called Best Practices

00:13:30.170 --> 00:13:32.160
for Using Text in Android.

00:13:32.160 --> 00:13:34.235
And really, slightly
related to text, so in P,

00:13:34.235 --> 00:13:36.590
we introduced this
new magnifier API

00:13:36.590 --> 00:13:39.110
that we use when we're
doing text selection.

00:13:39.110 --> 00:13:42.180
And you can use it to magnify
pretty much anything you want.

00:13:42.180 --> 00:13:44.330
We added new capabilities
in that API in Q.

00:13:44.330 --> 00:13:46.590
So now you can change the
corner radius of the window.

00:13:46.590 --> 00:13:48.050
You can change the position.

00:13:48.050 --> 00:13:50.678
You can change the zoom
of the magnification.

00:13:50.678 --> 00:13:52.970
And you can change the
elevation to control the shadow.

00:13:55.660 --> 00:13:57.133
CHET HAASE: So
private APIs-- this

00:13:57.133 --> 00:13:59.050
is a project that we
started in the P release,

00:13:59.050 --> 00:14:01.930
where we started limiting
access to private APIs.

00:14:01.930 --> 00:14:03.753
We really don't want
application developers

00:14:03.753 --> 00:14:05.170
calling these
things, because they

00:14:05.170 --> 00:14:08.200
can change between releases.

00:14:08.200 --> 00:14:10.438
So let's not do the
private API thing anymore.

00:14:10.438 --> 00:14:11.980
ROMAIN GUY: Don't
touch our privates.

00:14:11.980 --> 00:14:12.490
Wait.

00:14:12.490 --> 00:14:13.894
[LAUGHTER]

00:14:14.830 --> 00:14:17.140
CHET HAASE: Instead, we're
trying to point you to--

00:14:17.140 --> 00:14:19.090
in a lot of cases,
there's no good reason

00:14:19.090 --> 00:14:20.440
to be calling that private API.

00:14:20.440 --> 00:14:23.080
Maybe we introduced a
public method in the time

00:14:23.080 --> 00:14:25.748
since you first introduced that
code into your application.

00:14:25.748 --> 00:14:27.290
Maybe you just missed
it in the docs.

00:14:27.290 --> 00:14:29.110
Whatever the reason
is, often, there's

00:14:29.110 --> 00:14:30.700
actually a much
better public way

00:14:30.700 --> 00:14:32.360
to do the thing
you're trying to do.

00:14:32.360 --> 00:14:33.700
So we're enhancing
the documentation

00:14:33.700 --> 00:14:35.033
to point you to the right thing.

00:14:35.033 --> 00:14:37.495
Or, in cases where there
isn't a public method

00:14:37.495 --> 00:14:40.120
and there's no particularly good
reason why there shouldn't be,

00:14:40.120 --> 00:14:42.190
we're introducing a
new public method.

00:14:42.190 --> 00:14:44.200
Or if there can't be
simply a new method for it,

00:14:44.200 --> 00:14:46.117
maybe there's a different
approach to do this.

00:14:46.117 --> 00:14:48.260
So we're also documenting
that, instead.

00:14:48.260 --> 00:14:50.680
And then we're
restricting these things

00:14:50.680 --> 00:14:52.900
by putting them on a gray
list which says, yep,

00:14:52.900 --> 00:14:54.650
it'll still work
through this release.

00:14:54.650 --> 00:14:56.980
But as of future releases,
this will no longer work.

00:14:56.980 --> 00:14:59.330
So it's time for you
to migrate your code.

00:14:59.330 --> 00:15:02.932
This is all about fixing
crashes for the user

00:15:02.932 --> 00:15:04.390
where it's going
to crash for them,

00:15:04.390 --> 00:15:06.910
because we end up changing
an internal method

00:15:06.910 --> 00:15:08.500
without realizing
that you're using it

00:15:08.500 --> 00:15:10.085
in a completely unexpected way.

00:15:10.085 --> 00:15:11.710
ROMAIN GUY: And we've
seen applications

00:15:11.710 --> 00:15:14.950
that use reflection to access
fields that have had getters

00:15:14.950 --> 00:15:17.740
and setters since API level 1.

00:15:17.740 --> 00:15:20.530
So if you're doing that,
please come tell me why.

00:15:20.530 --> 00:15:22.180
I really, really don't get it.

00:15:22.180 --> 00:15:23.404
[LAUGHTER]

00:15:23.927 --> 00:15:25.510
CHET HAASE: There's
good documentation

00:15:25.510 --> 00:15:27.302
on all of the changes
that we've made there

00:15:27.302 --> 00:15:28.870
and what we're doing about this.

00:15:28.870 --> 00:15:31.600
So go to the
developer.Android.com site

00:15:31.600 --> 00:15:33.040
for more information.

00:15:33.040 --> 00:15:34.558
There's some great
changes in ART.

00:15:34.558 --> 00:15:36.850
A couple of things we want
to talk about-- app profiles

00:15:36.850 --> 00:15:38.300
in the cloud.

00:15:38.300 --> 00:15:42.820
So this gives better start
up for a recently installed

00:15:42.820 --> 00:15:43.490
application.

00:15:43.490 --> 00:15:44.470
Here's how it works.

00:15:44.470 --> 00:15:46.660
Nice diagram I stole
from their slides.

00:15:46.660 --> 00:15:48.550
Basically, all these
users in the world

00:15:48.550 --> 00:15:49.930
using this application.

00:15:49.930 --> 00:15:53.510
We're doing the
ahead-of-time compiles.

00:15:53.510 --> 00:15:54.280
We git the code.

00:15:54.280 --> 00:15:56.740
We figure out what needs to
be compiled on the device.

00:15:56.740 --> 00:15:57.970
We create that device code.

00:15:57.970 --> 00:16:00.640
We upload all of
these into the cloud

00:16:00.640 --> 00:16:03.190
and we figure out, what's
the base set of stuff that

00:16:03.190 --> 00:16:06.200
needs to be pre-compiled for
the apps to launch faster?

00:16:06.200 --> 00:16:08.360
And now, when you
install that application,

00:16:08.360 --> 00:16:11.350
you also install pre-compiled
code for your device.

00:16:11.350 --> 00:16:14.020
So you don't have to go through
the compilation step yourself,

00:16:14.020 --> 00:16:17.410
because other people did it
across the world for you.

00:16:17.410 --> 00:16:20.230
The team has also worked a
lot on startup improvements

00:16:20.230 --> 00:16:22.610
in general in addition
to that other stuff,

00:16:22.610 --> 00:16:25.510
and also worked on a
generational garbage collector.

00:16:25.510 --> 00:16:28.960
After ART came out, they had
a generational collector,

00:16:28.960 --> 00:16:31.660
but that was turned off, I
believe, in the O release.

00:16:31.660 --> 00:16:32.550
ROMAIN GUY: We gave
a talk on that.

00:16:32.550 --> 00:16:33.550
CHET HAASE: Yes, we did.

00:16:33.550 --> 00:16:36.400
And I'm sure we
said O. And it was

00:16:36.400 --> 00:16:39.220
because they came out with
a new concurrent collector,

00:16:39.220 --> 00:16:42.020
and that didn't work out to
introduce that at that time.

00:16:42.020 --> 00:16:45.640
So now we have a GC,
Generational Collector, again.

00:16:45.640 --> 00:16:47.140
It collects new objects first.

00:16:47.140 --> 00:16:50.350
So it turns out that a lot
of the garbage being created

00:16:50.350 --> 00:16:52.590
are things that are
really transient objects.

00:16:52.590 --> 00:16:54.340
So if we can look
through that list first,

00:16:54.340 --> 00:16:56.330
it's much smaller, much quicker.

00:16:56.330 --> 00:16:59.650
We can get all the space that
you need back, in most cases,

00:16:59.650 --> 00:17:01.270
without doing a full GC.

00:17:01.270 --> 00:17:02.937
Cheaper, faster, better.

00:17:02.937 --> 00:17:04.270
And that's what we're all about.

00:17:04.270 --> 00:17:07.569
There's a GC or ART
talk Wednesday at 11:30

00:17:07.569 --> 00:17:09.293
you should go to for
more information.

00:17:09.293 --> 00:17:10.960
ROMAIN GUY: Kotlin--
ever heard of that?

00:17:10.960 --> 00:17:13.390
How many of you
are using Kotlin?

00:17:13.390 --> 00:17:13.890
All right.

00:17:13.890 --> 00:17:14.710
DAN SANDLER: Yay.

00:17:14.710 --> 00:17:16.793
ROMAIN GUY: So in the words
of Chet in the keynote

00:17:16.793 --> 00:17:19.089
this morning, we are
increasingly Kotlin first,

00:17:19.089 --> 00:17:20.869
whatever that means.

00:17:20.869 --> 00:17:22.900
So what this means-- that
all the new APIs that

00:17:22.900 --> 00:17:25.724
were introduced in Q come
with nullability annotations.

00:17:25.724 --> 00:17:27.099
So that's very
useful for Kotlin.

00:17:27.099 --> 00:17:29.516
It's also useful if you use
the Java programming language.

00:17:29.516 --> 00:17:31.330
And speaking of the
annotations, now, we

00:17:31.330 --> 00:17:33.880
enforce nullability as an
error and not as a warning

00:17:33.880 --> 00:17:36.130
anymore when you target
Q. So we will help

00:17:36.130 --> 00:17:37.629
you build better applications.

00:17:37.629 --> 00:17:39.546
Someone is really happy
about this over there.

00:17:39.546 --> 00:17:40.400
[LAUGHTER]

00:17:42.860 --> 00:17:47.470
Kotlin 1.3.30 also brought
incremental annotation

00:17:47.470 --> 00:17:48.940
processing in kapt.

00:17:48.940 --> 00:17:50.100
[APPLAUSE]

00:17:50.100 --> 00:17:52.460
All right.

00:17:52.460 --> 00:17:56.700
All just stuff using
annotation processors.

00:17:56.700 --> 00:17:59.040
And so there's a talk
tomorrow at 12:30, What's

00:17:59.040 --> 00:18:00.970
New in Kotlin on Android.

00:18:00.970 --> 00:18:02.940
And we're also adding
support for coroutines

00:18:02.940 --> 00:18:04.900
in various Jetpack
libraries like room.

00:18:04.900 --> 00:18:06.870
And there is a
talk on Thursday--

00:18:06.870 --> 00:18:08.680
Understanding Kotlin
Coroutines on Android.

00:18:08.680 --> 00:18:11.250
And if you attend the Jetpack
sessions on the [INAUDIBLE]

00:18:11.250 --> 00:18:14.230
components, you will
hear more about this.

00:18:14.230 --> 00:18:18.870
Security-- this is where I'm out
of my depth, so bear with me.

00:18:18.870 --> 00:18:21.360
TLS 1.3 is now
enabled by default.

00:18:21.360 --> 00:18:25.700
And thanks to the one RTT,
connections are 40% faster.

00:18:25.700 --> 00:18:27.680
I think that was right.

00:18:27.680 --> 00:18:29.940
We made improvements
to the biometric dialog

00:18:29.940 --> 00:18:32.070
so you can request implicit
confirmation instead

00:18:32.070 --> 00:18:33.720
of explicit confirmation.

00:18:33.720 --> 00:18:36.840
And if there's an issue with
the biometric recognition,

00:18:36.840 --> 00:18:38.530
you can also use a
passcode fallback.

00:18:38.530 --> 00:18:41.602
So the user can use
them for a passcode.

00:18:41.602 --> 00:18:43.560
And finally, we have a
Jetpack security library

00:18:43.560 --> 00:18:45.140
that I know almost
nothing about.

00:18:45.140 --> 00:18:48.240
So please go attend this
talk, Security on Android--

00:18:48.240 --> 00:18:50.410
What's Next? on Thursday.

00:18:50.410 --> 00:18:53.040
Finally, in PowerManager,
we introduced a new API.

00:18:53.040 --> 00:18:54.570
You can register
a listener to be

00:18:54.570 --> 00:18:57.448
notified when the device goes
under thermal throttling.

00:18:57.448 --> 00:18:59.365
So if you're doing too
much work or the device

00:18:59.365 --> 00:19:01.020
is getting hot for
whatever reason,

00:19:01.020 --> 00:19:03.343
you can use that feature
to back off, do less work,

00:19:03.343 --> 00:19:05.010
or adapt what your
application is doing.

00:19:05.010 --> 00:19:07.050
For instance, a game, you
can change the quality

00:19:07.050 --> 00:19:09.570
of the graphics to avoid
the device running too hot

00:19:09.570 --> 00:19:13.390
and maybe turning off or
using too much battery.

00:19:13.390 --> 00:19:15.870
CHET HAASE: NN API has
had some improvements.

00:19:15.870 --> 00:19:18.540
Now, 60 new ops to take
advantage of as well

00:19:18.540 --> 00:19:21.550
as massive latency reduction.

00:19:21.550 --> 00:19:24.060
And there is a talk
today at 6:00 PM.

00:19:24.060 --> 00:19:29.225
So go to that for more
ML, NN API goodness.

00:19:29.225 --> 00:19:30.600
ROMAIN GUY: And
that's the extent

00:19:30.600 --> 00:19:33.030
that you know about
machine learning.

00:19:33.030 --> 00:19:33.720
CHET HAASE: Yes.

00:19:33.720 --> 00:19:35.070
Sure.

00:19:35.070 --> 00:19:37.920
Preferences-- so you
may already know this.

00:19:37.920 --> 00:19:39.390
This is not news.

00:19:39.390 --> 00:19:41.640
But if you're using Android
preference, you shouldn't.

00:19:41.640 --> 00:19:43.180
That is now deprecated.

00:19:43.180 --> 00:19:45.630
We want to move everybody
away from the platform

00:19:45.630 --> 00:19:47.500
onto the Jetpack
version of that,

00:19:47.500 --> 00:19:49.590
which is androidx.preference.

00:19:49.590 --> 00:19:51.460
We have some sample code here.

00:19:51.460 --> 00:19:54.640
So you simply load
in this XML code.

00:19:54.640 --> 00:19:55.890
We'll show an example of that.

00:19:55.890 --> 00:19:59.452
So you've got some XML here
that populates this UI.

00:19:59.452 --> 00:20:00.660
So you have these categories.

00:20:00.660 --> 00:20:01.650
Easy to setup.

00:20:01.650 --> 00:20:04.950
We've got built-in widgets for
you, check boxes, and switches.

00:20:04.950 --> 00:20:05.640
All looks good.

00:20:05.640 --> 00:20:07.560
It's all pretty easy to set up.

00:20:07.560 --> 00:20:08.523
So you should use that.

00:20:08.523 --> 00:20:10.190
And if you want to
know more about that,

00:20:10.190 --> 00:20:13.690
there was a quick talk at ADS
in the fall which is on YouTube.

00:20:13.690 --> 00:20:15.900
So go check out that talk.

00:20:15.900 --> 00:20:17.610
Architecture components--
lots of things

00:20:17.610 --> 00:20:19.320
going on there all the time.

00:20:19.320 --> 00:20:25.170
WorkManager just went
stable, 1.0.1 and 2.0.1.

00:20:25.170 --> 00:20:28.015
And they continue to work
on more capabilities there.

00:20:28.015 --> 00:20:29.640
Same thing with
Navigation Controller--

00:20:29.640 --> 00:20:32.130
just went stable recently.

00:20:32.130 --> 00:20:33.930
There's a talk on both of these.

00:20:33.930 --> 00:20:35.400
Well, there's a talk at IO.

00:20:35.400 --> 00:20:38.550
There's also an older
ADS talk on WorkManager.

00:20:38.550 --> 00:20:42.060
SavedState for ViewModel
just went alpha this week.

00:20:42.060 --> 00:20:45.000
Easier handling of
process restarts.

00:20:45.000 --> 00:20:49.440
Benchmarking-- new Jetpack
API for handling performance

00:20:49.440 --> 00:20:50.790
testing in your codes.

00:20:50.790 --> 00:20:53.400
And there's a talk on
that Thursday at 1:30.

00:20:53.400 --> 00:20:56.100
And finally, Lifecycles,
Livedata, and Room--

00:20:56.100 --> 00:21:00.875
now deep co-routine integration,
as well as more capabilities

00:21:00.875 --> 00:21:02.250
there that will
be covered in the

00:21:02.250 --> 00:21:04.350
What's New in Architecture
Components talk

00:21:04.350 --> 00:21:06.300
tomorrow at 10:30.

00:21:06.300 --> 00:21:08.610
CameraX library-- we
touched on this briefly

00:21:08.610 --> 00:21:10.840
in the technical
keynote earlier.

00:21:10.840 --> 00:21:13.350
Easy to use camera library.

00:21:13.350 --> 00:21:15.600
It works around
the issues that you

00:21:15.600 --> 00:21:18.210
have of having device-specific
implementation of some

00:21:18.210 --> 00:21:19.680
of the platform APIs.

00:21:19.680 --> 00:21:21.930
Puts that work-around directly
in the library itself,

00:21:21.930 --> 00:21:24.150
so it's much easier
for you to use.

00:21:24.150 --> 00:21:28.590
It's backwards compatible all
the way to Android Lollipop.

00:21:28.590 --> 00:21:31.530
And it's a much
more concise API.

00:21:31.530 --> 00:21:33.690
So your code should
be much smaller

00:21:33.690 --> 00:21:35.950
to do all the right things
that you need to do.

00:21:35.950 --> 00:21:37.470
And there's an
extensions add-on.

00:21:37.470 --> 00:21:39.480
We're working with
manufacturers on this

00:21:39.480 --> 00:21:42.250
to provide access to
device-specific functionality

00:21:42.250 --> 00:21:43.410
like HDR.

00:21:43.410 --> 00:21:46.230
And you'll soon see some of
those extensions coming out

00:21:46.230 --> 00:21:48.760
for those manufacturers--
not just their new devices,

00:21:48.760 --> 00:21:50.753
but also existing devices.

00:21:50.753 --> 00:21:52.920
ROMAIN GUY: So we have a
lot of libraries in Jetpack

00:21:52.920 --> 00:21:54.000
to make your life easier.

00:21:54.000 --> 00:21:55.830
But there's one areas
where we have not

00:21:55.830 --> 00:22:00.480
done-- enough building Android
UI remains pretty difficult.

00:22:00.480 --> 00:22:02.740
And we designed our UI
tool kit a long time ago,

00:22:02.740 --> 00:22:03.540
over 10 years ago.

00:22:03.540 --> 00:22:05.730
And the state of the art
has evolved a little bit

00:22:05.730 --> 00:22:06.730
since then.

00:22:06.730 --> 00:22:08.790
So we took inspiration
from what you've told us,

00:22:08.790 --> 00:22:10.750
from things like
[? CrackDigest, ?]

00:22:10.750 --> 00:22:14.840
[? ViewDigest, ?] Litho,
and even now on Flutter.

00:22:14.840 --> 00:22:16.170
And we decided to inven--

00:22:16.170 --> 00:22:18.270
to invest, sorry--
in a declarative

00:22:18.270 --> 00:22:20.550
approach to reactive
programming.

00:22:20.550 --> 00:22:23.070
So, like Chet mentioned
earlier, in the keynote,

00:22:23.070 --> 00:22:26.000
we're working on a new tool
kit called Jetpack Compose.

00:22:26.000 --> 00:22:27.900
It's our next-generation
UI tool kit.

00:22:27.900 --> 00:22:29.780
It's unbundled, so
you'll be able to put it

00:22:29.780 --> 00:22:30.780
inside your application.

00:22:30.780 --> 00:22:34.140
We'll be able to deliver
updates whenever we want.

00:22:34.140 --> 00:22:35.360
It is reactive.

00:22:35.360 --> 00:22:37.860
And it's also entirely
written in Kotlin.

00:22:37.860 --> 00:22:42.462
We rely on the Kotlin compiler
plugin to make this work.

00:22:42.462 --> 00:22:44.170
It's to make it as
efficient as possible.

00:22:44.170 --> 00:22:46.813
We tried to avoid doing as
much as possible at run time.

00:22:46.813 --> 00:22:48.480
And what we're doing
today is, we're not

00:22:48.480 --> 00:22:50.563
delivering you binaries
you can use in production,

00:22:50.563 --> 00:22:52.220
but we're open
sourcing all the code.

00:22:52.220 --> 00:22:53.780
We're putting
everything in the OSP.

00:22:53.780 --> 00:22:56.390
And as of today, the entire team
will start working in the OSP

00:22:56.390 --> 00:22:57.000
directly.

00:22:57.000 --> 00:22:57.990
So you can join us.

00:22:57.990 --> 00:22:58.920
You can look at the source code.

00:22:58.920 --> 00:22:59.570
You can play with it.

00:22:59.570 --> 00:23:00.740
You can give us feedback.

00:23:00.740 --> 00:23:02.572
And you can even
contribute, if you want.

00:23:02.572 --> 00:23:03.780
So I want to show you a demo.

00:23:03.780 --> 00:23:05.930
So can we please switch
to the demo machine?

00:23:05.930 --> 00:23:08.180
DAN SANDLER: Can we just go
awkwardly stand behind him

00:23:08.180 --> 00:23:08.480
while he does this?

00:23:08.480 --> 00:23:09.394
[INAUDIBLE]

00:23:09.394 --> 00:23:10.765
[LAUGHTER]

00:23:13.510 --> 00:23:14.380
ROMAIN GUY: Yes.

00:23:14.380 --> 00:23:16.940
So-- that's bizarre.

00:23:16.940 --> 00:23:18.610
So I do work a lot with Chet.

00:23:18.610 --> 00:23:20.380
And he does make a
lot of good jokes.

00:23:20.380 --> 00:23:23.090
He also makes a lot of bad ones.

00:23:23.090 --> 00:23:24.910
So I built myself
a small app to be

00:23:24.910 --> 00:23:26.730
able to count those bad jokes.

00:23:26.730 --> 00:23:28.730
And I'm going to show you
how to build that app.

00:23:28.730 --> 00:23:31.060
So this is an app that's
using Jetpack Compose.

00:23:31.060 --> 00:23:32.560
One of the things
that we want to do

00:23:32.560 --> 00:23:34.435
is, we want to make it
a lot easier to create

00:23:34.435 --> 00:23:36.550
new widgets or new components.

00:23:36.550 --> 00:23:38.580
And with Jetpack
Compose, a component

00:23:38.580 --> 00:23:39.848
is just a single function.

00:23:39.848 --> 00:23:41.140
So you have an annotation here.

00:23:41.140 --> 00:23:42.973
But we're not using an
annotation processor.

00:23:42.973 --> 00:23:45.250
We're using a Kotlin
compiler plugin.

00:23:45.250 --> 00:23:47.440
So all you have to do is,
you create this function.

00:23:47.440 --> 00:23:49.530
Every parameter of the
function is effectively

00:23:49.530 --> 00:23:52.520
a parameter or a property
of your component.

00:23:52.520 --> 00:23:54.760
Here, I'm going to
add some states.

00:23:54.760 --> 00:23:56.427
So I'm not going to
go into the details,

00:23:56.427 --> 00:23:57.760
but I'm just creating a counter.

00:23:57.760 --> 00:23:58.750
It's initialized to 0.

00:23:58.750 --> 00:24:01.360
It's part of its [INAUDIBLE]
state of a component.

00:24:01.360 --> 00:24:03.850
Then I'm going to
create a column, which

00:24:03.850 --> 00:24:05.990
is the equivalent of a
vertical linear layout.

00:24:05.990 --> 00:24:09.175
I'm going to put a button in it.

00:24:09.175 --> 00:24:11.050
And you can see that
the button, I just reuse

00:24:11.050 --> 00:24:12.810
the title parameter I received.

00:24:12.810 --> 00:24:15.580
And in the onClick
property, I can just

00:24:15.580 --> 00:24:18.010
increase the value
of my counter.

00:24:18.010 --> 00:24:20.440
Then, I want to display
the value of that counter.

00:24:20.440 --> 00:24:23.120
And so I use a label.

00:24:23.120 --> 00:24:26.420
I'm just going to
use, again, my state.

00:24:26.420 --> 00:24:28.150
Bad jokes.

00:24:28.150 --> 00:24:29.140
Sorry.

00:24:29.140 --> 00:24:30.240
And that's it.

00:24:30.240 --> 00:24:31.870
Now let's run this.

00:24:31.870 --> 00:24:33.680
Oh, I forgot one thing.

00:24:33.680 --> 00:24:35.470
I need to instantiate
my component.

00:24:40.270 --> 00:24:41.740
Here we go.

00:24:41.740 --> 00:24:43.390
Let's cancel this.

00:24:43.390 --> 00:24:45.940
Let's run.

00:24:45.940 --> 00:24:48.190
We are also working hard
on making new compilation

00:24:48.190 --> 00:24:49.570
step as fast as possible.

00:24:49.570 --> 00:24:51.895
This is still heavily
under development.

00:24:51.895 --> 00:24:52.520
So don't worry.

00:24:52.520 --> 00:24:54.170
It will get better.

00:24:54.170 --> 00:24:57.400
But here, you have an entire
app that's fully reactive.

00:24:57.400 --> 00:24:59.740
As you can see, I did
not have to write an XML.

00:24:59.740 --> 00:25:01.177
So there's no XML layout.

00:25:01.177 --> 00:25:02.510
There's no annotation processor.

00:25:02.510 --> 00:25:03.800
There's no data binding.

00:25:03.800 --> 00:25:05.230
There's no listeners.

00:25:05.230 --> 00:25:06.950
And when the app
finally shows up,

00:25:06.950 --> 00:25:08.461
I'm going to blame [? Gradle. ?]

00:25:08.461 --> 00:25:10.870
[LAUGHTER]

00:25:10.870 --> 00:25:12.320
It always works.

00:25:12.320 --> 00:25:15.400
It's very unfair,
but it always works.

00:25:15.400 --> 00:25:18.670
This is a build from last week,
so please cross your fingers

00:25:18.670 --> 00:25:19.450
for me.

00:25:19.450 --> 00:25:22.300
It should work.

00:25:22.300 --> 00:25:23.570
It worked until now.

00:25:23.570 --> 00:25:24.968
[LAUGHTER]

00:25:25.900 --> 00:25:27.792
It worked backstage
just before the talk.

00:25:27.792 --> 00:25:30.417
CHET HAASE: You know, we weren't
standing behind you last time.

00:25:36.855 --> 00:25:37.980
ROMAIN GUY: I'll try again.

00:25:37.980 --> 00:25:38.925
[CLAPPING]

00:25:38.925 --> 00:25:40.050
Thank you for your support.

00:25:40.050 --> 00:25:42.465
[APPLAUSE]

00:25:46.330 --> 00:25:49.120
Like I said, it's not
ready for production yet.

00:25:49.120 --> 00:25:50.530
Those are the early days.

00:25:50.530 --> 00:25:53.292
So if someone could
please fix this for us,

00:25:53.292 --> 00:25:54.500
the source code is available.

00:25:54.500 --> 00:25:55.440
Oh.

00:25:55.440 --> 00:25:56.050
Here we are.

00:25:56.050 --> 00:25:56.717
CHET HAASE: Yay.

00:25:56.717 --> 00:25:58.327
DAN SANDLER: Yay.

00:25:58.327 --> 00:26:00.160
ROMAIN GUY: And when I
click-- look at that.

00:26:00.160 --> 00:26:01.360
It increases the label.

00:26:01.360 --> 00:26:03.104
[APPLAUSE]

00:26:03.980 --> 00:26:05.090
No listeners.

00:26:05.090 --> 00:26:07.310
CHET HAASE: Nice.

00:26:07.310 --> 00:26:07.970
Thanks.

00:26:07.970 --> 00:26:10.406
I think that demo
really-- clicked.

00:26:10.406 --> 00:26:11.407
[LAUGHTER]

00:26:11.407 --> 00:26:13.490
ROMAIN GUY: Can we get
back to the slides, please?

00:26:18.630 --> 00:26:21.590
So if you want to know more,
you can check out this website,

00:26:21.590 --> 00:26:23.875
d.android.com/jetpackcompose.

00:26:23.875 --> 00:26:25.250
You will find all
the information

00:26:25.250 --> 00:26:26.773
on how to get to
the source code.

00:26:26.773 --> 00:26:28.190
We have written
it, so you can use

00:26:28.190 --> 00:26:30.232
the special version of
Android [INAUDIBLE] that's

00:26:30.232 --> 00:26:31.400
required to make this work.

00:26:31.400 --> 00:26:33.115
And there is a talk
tomorrow at 3:30

00:26:33.115 --> 00:26:34.490
where we're going
to go into more

00:26:34.490 --> 00:26:38.795
details about why we're doing
this and how these things work.

00:26:38.795 --> 00:26:41.420
CHET HAASE: But the UI tool kit
is not just about the new stuff

00:26:41.420 --> 00:26:43.490
that we're working on that
will be available sometime

00:26:43.490 --> 00:26:44.073
in the future.

00:26:44.073 --> 00:26:46.823
We're also still supporting
and enhancing all the stuff

00:26:46.823 --> 00:26:47.990
that you're using right now.

00:26:47.990 --> 00:26:50.300
A good example of
that is ViewPager 2.

00:26:50.300 --> 00:26:53.540
We've been asked for fixes
as well as more functionality

00:26:53.540 --> 00:26:54.950
in ViewPager for many years.

00:26:54.950 --> 00:26:57.500
We were sort of painted into
a corner with what we had.

00:26:57.500 --> 00:26:59.660
What we really wanted
was a ViewPager

00:26:59.660 --> 00:27:02.840
that was built around a
much more flexible model.

00:27:02.840 --> 00:27:05.420
So we built this
around RecyclerView.

00:27:05.420 --> 00:27:08.750
So RecyclerView capabilities,
but ViewPager API.

00:27:08.750 --> 00:27:11.390
As it should be very
familiar and easy to port to.

00:27:11.390 --> 00:27:14.270
We support RTL-- something
that was missing for years.

00:27:14.270 --> 00:27:15.720
We also support vertical paging.

00:27:15.720 --> 00:27:16.220
Who knew?

00:27:16.220 --> 00:27:18.095
People actually want to
scroll the other way.

00:27:18.095 --> 00:27:19.220
Who knew?

00:27:19.220 --> 00:27:23.000
And much better support
for notifications from data

00:27:23.000 --> 00:27:24.060
set changes, as well.

00:27:24.060 --> 00:27:25.760
So please check that out.

00:27:25.760 --> 00:27:27.990
Alpha 4 very recently.

00:27:27.990 --> 00:27:30.170
So development ongoing,
but hopefully usable

00:27:30.170 --> 00:27:31.448
in the meantime.

00:27:31.448 --> 00:27:33.740
ROMAIN GUY: And continued
investment in our existing UI

00:27:33.740 --> 00:27:34.240
tool kit--

00:27:34.240 --> 00:27:37.670
we're going to introduce soon
something called ViewBindings.

00:27:37.670 --> 00:27:39.860
Basically, we want
you to not have

00:27:39.860 --> 00:27:41.875
to call findViewById anymore.

00:27:41.875 --> 00:27:44.000
We also don't want you to
use annotation processors

00:27:44.000 --> 00:27:46.920
with this, because they tend
to slow down your build.

00:27:46.920 --> 00:27:51.770
So instead, we generate binding
code from the XML layouts

00:27:51.770 --> 00:27:52.610
directly.

00:27:52.610 --> 00:27:54.590
It is null-safe and
it is type-safe.

00:27:54.590 --> 00:27:56.612
And I'm going to
show you an example.

00:27:56.612 --> 00:27:58.820
So there is a talk tomorrow
on architecture component

00:27:58.820 --> 00:28:00.695
where [INAUDIBLE] is
going to talk about this

00:28:00.695 --> 00:28:01.743
in a little more details.

00:28:01.743 --> 00:28:02.660
But here's an example.

00:28:02.660 --> 00:28:05.480
We have a file called
search_item.xml.

00:28:05.480 --> 00:28:08.990
From that file, at compile time,
using the similar technology

00:28:08.990 --> 00:28:11.210
that we use for DataBinding,
we generate a class

00:28:11.210 --> 00:28:13.150
called SearchItemBindings.

00:28:13.150 --> 00:28:16.640
And SearchItemBindings contains
a bunch of fields or properties

00:28:16.640 --> 00:28:18.830
that you can use to
access the views directly.

00:28:18.830 --> 00:28:21.455
So, for instance, the
root view of this layout

00:28:21.455 --> 00:28:23.450
is in a property
called rootView.

00:28:23.450 --> 00:28:25.190
So you can just say
binding.rootView

00:28:25.190 --> 00:28:27.900
and that's it-- you have
access to that top-level view.

00:28:27.900 --> 00:28:30.918
And as you can see, there's also
a text view called packageName.

00:28:30.918 --> 00:28:32.960
And again, we have a
property called packageName.

00:28:32.960 --> 00:28:35.450
And it had the type text view,
so you can call .text on it

00:28:35.450 --> 00:28:36.088
directly.

00:28:36.088 --> 00:28:37.380
And this thing is really smart.

00:28:37.380 --> 00:28:40.010
It looks at all the
configuration for that XML file

00:28:40.010 --> 00:28:44.720
and finds the type that works
across all the configurations.

00:28:44.720 --> 00:28:47.670
Graphics and media-- we're going
to go through this a little bit

00:28:47.670 --> 00:28:48.780
quickly.

00:28:48.780 --> 00:28:51.560
So we had this classical
PorterDuff.Mode on Android

00:28:51.560 --> 00:28:53.540
that was not documented
for the longest time.

00:28:53.540 --> 00:28:55.370
It's very confusing,
because it contains

00:28:55.370 --> 00:28:57.960
modes that have nothing to
do with porter and duff.

00:28:57.960 --> 00:29:00.350
So in Q, we're introducing
a new classical blend

00:29:00.350 --> 00:29:03.020
mode that basically
replaces PorterDuff.Mode.

00:29:03.020 --> 00:29:04.920
PorterDuff.Mode still works.

00:29:04.920 --> 00:29:07.460
But we're also
adding missing modes

00:29:07.460 --> 00:29:08.810
like HARD_LIGHT and SOFT_LIGHT.

00:29:08.810 --> 00:29:10.880
So basically, now,
we have all the modes

00:29:10.880 --> 00:29:12.950
that you can find in
Sketch or Adobe Photoshop

00:29:12.950 --> 00:29:14.300
and applications like this.

00:29:14.300 --> 00:29:16.220
So that should make
your designers happy.

00:29:16.220 --> 00:29:18.840
We're also exposing an
API called RenderNode.

00:29:18.840 --> 00:29:21.595
This is what we use for hardware
acceleration inside the UI tool

00:29:21.595 --> 00:29:22.910
kit.

00:29:22.910 --> 00:29:24.560
So it's used by the
Views internally.

00:29:24.560 --> 00:29:25.770
And it contains a display.

00:29:25.770 --> 00:29:27.770
So it's all the joint
commands that you

00:29:27.770 --> 00:29:30.470
issue on a canvas in
your onDraw function.

00:29:30.470 --> 00:29:34.280
It also displays properties
such as rotation, alpha, scale,

00:29:34.280 --> 00:29:35.520
and things like this.

00:29:35.520 --> 00:29:37.610
And a render node can
contain other render nodes.

00:29:37.610 --> 00:29:39.380
So you can build a
tree of render notes

00:29:39.380 --> 00:29:41.010
for super efficient rendering.

00:29:41.010 --> 00:29:42.320
So here, as I use them.

00:29:42.320 --> 00:29:43.780
You just create a new instance.

00:29:43.780 --> 00:29:46.220
You give it a
position and a size.

00:29:46.220 --> 00:29:49.220
Then, by calling beginRecording,
you get a special canvas

00:29:49.220 --> 00:29:52.400
that you can use to record
commands on the render node

00:29:52.400 --> 00:29:53.120
itself.

00:29:53.120 --> 00:29:55.220
And when you're done,
you call endRecording.

00:29:55.220 --> 00:29:57.060
Then you can manipulate
the properties.

00:29:57.060 --> 00:29:59.432
So if you want to fade the
content of the trainer node,

00:29:59.432 --> 00:30:01.640
you don't have to rerecord
all your drawing commands.

00:30:01.640 --> 00:30:03.265
You can just change
the alpha property.

00:30:03.265 --> 00:30:06.380
And again, that is
exactly what views do.

00:30:06.380 --> 00:30:08.967
Funny, when you're done with
it, inside your onDraw method,

00:30:08.967 --> 00:30:11.300
you have to check that the
canvas you're going to render

00:30:11.300 --> 00:30:12.680
onto is hardware accelerated.

00:30:12.680 --> 00:30:15.390
And if it is, you can call
drawRenderNode and pass

00:30:15.390 --> 00:30:17.990
the RenderNode you just created.

00:30:17.990 --> 00:30:20.900
You can use RenderNode to create
shadows without using a view.

00:30:20.900 --> 00:30:22.730
A RenderNode can
have an outline.

00:30:22.730 --> 00:30:25.310
So now, you don't need to
create a brand new View, which

00:30:25.310 --> 00:30:27.150
is a very heavy
object, just to create

00:30:27.150 --> 00:30:29.570
a shadow inside your
custom view, for instance.

00:30:29.570 --> 00:30:31.070
We're also exposing
something called

00:30:31.070 --> 00:30:32.570
a HardwareRenderer,
which is what we

00:30:32.570 --> 00:30:34.770
use to render the RenderNodes.

00:30:34.770 --> 00:30:36.590
So again, used by the
tool kit internally.

00:30:36.590 --> 00:30:39.548
It renders all those
nodes onto a surface.

00:30:39.548 --> 00:30:41.090
The cool thing about
HardwareRenderer

00:30:41.090 --> 00:30:44.250
is that it lets you
control the light source

00:30:44.250 --> 00:30:46.100
that we use in material design.

00:30:46.100 --> 00:30:48.230
So with material design,
we cast dynamic shadows

00:30:48.230 --> 00:30:49.130
on all the objects.

00:30:49.130 --> 00:30:50.630
But the position
of the light source

00:30:50.630 --> 00:30:51.963
has been fixed by the designers.

00:30:51.963 --> 00:30:54.463
With HardwareRenderer, you can
move that light source around

00:30:54.463 --> 00:30:55.950
for pretty interesting effects.

00:30:55.950 --> 00:30:57.020
So here's how it works.

00:30:57.020 --> 00:30:58.400
You create the HardwareRenderer.

00:30:58.400 --> 00:31:00.240
You give it a surface.

00:31:00.240 --> 00:31:04.520
Then you set the content root of
the renderer as the RenderNode.

00:31:04.520 --> 00:31:08.458
And then you just request
for a frame to be issued.

00:31:08.458 --> 00:31:11.000
Here are the methods you can
use to control the light source.

00:31:11.000 --> 00:31:13.250
You can change the alpha
of the ambient shadows

00:31:13.250 --> 00:31:14.210
and the direct shadows.

00:31:14.210 --> 00:31:16.520
And you can also change
the position and the size

00:31:16.520 --> 00:31:17.570
of the light source.

00:31:17.570 --> 00:31:19.820
So here's a quick demo that
shows you what you can do.

00:31:22.295 --> 00:31:23.170
Let's try this again.

00:31:26.938 --> 00:31:28.980
The shadows should be
moving around and changing.

00:31:28.980 --> 00:31:29.260
[LAUGHTER]

00:31:29.260 --> 00:31:29.885
Oh, here we go.

00:31:29.885 --> 00:31:31.607
CHET HAASE: There we go.

00:31:31.607 --> 00:31:33.440
ROMAIN GUY: I have no
luck with demos today.

00:31:33.440 --> 00:31:34.950
As you can see, we're
not moving the object.

00:31:34.950 --> 00:31:36.990
And the shadow is only
moving and changing blur

00:31:36.990 --> 00:31:39.720
because the light source
itself is moving around.

00:31:39.720 --> 00:31:41.940
Hardware bitmaps--
that is not a new API,

00:31:41.940 --> 00:31:44.765
but now a hardware bitmap
can wrap a HardwareBuffer.

00:31:44.765 --> 00:31:46.140
And a HardwareBuffer
is something

00:31:46.140 --> 00:31:48.990
that can be generated by
OpenGL, by the camera,

00:31:48.990 --> 00:31:51.360
or various other hardware units.

00:31:51.360 --> 00:31:53.190
They are useful
because that lets

00:31:53.190 --> 00:31:56.310
you use something that
changes frequently as a bitmap

00:31:56.310 --> 00:31:59.012
without incurring the cost
of a texture upload, which

00:31:59.012 --> 00:32:00.970
is something that happens
every time you modify

00:32:00.970 --> 00:32:02.630
a regular bitmap.

00:32:02.630 --> 00:32:04.605
And basically, you can
use it to wrap surfaces.

00:32:04.605 --> 00:32:05.730
So here, I have an example.

00:32:05.730 --> 00:32:07.740
It's a very silly
example, but it's

00:32:07.740 --> 00:32:11.010
a Lottie animation that's
using hardware rendering

00:32:11.010 --> 00:32:12.510
to render into a surface.

00:32:12.510 --> 00:32:16.020
Then it's wrapped into a bitmap
that's set as a bitmap shader

00:32:16.020 --> 00:32:18.317
on the paint that's
used to draw the text.

00:32:18.317 --> 00:32:19.150
It could be a video.

00:32:19.150 --> 00:32:20.620
It could be OpenGL renderings.

00:32:20.620 --> 00:32:22.412
So you could do a lot
of really cool things

00:32:22.412 --> 00:32:23.320
in your application.

00:32:23.320 --> 00:32:26.280
And I'm going to
keep the code itself.

00:32:26.280 --> 00:32:27.743
Basically, we use
an image reader.

00:32:27.743 --> 00:32:29.160
You have to create
a new instance.

00:32:29.160 --> 00:32:30.785
An image reader will
give you a surface

00:32:30.785 --> 00:32:34.770
that you can use to render onto
either by loading in the canvas

00:32:34.770 --> 00:32:36.560
or giving it to the
hardware renderer.

00:32:36.560 --> 00:32:38.910
And every time an
image is available,

00:32:38.910 --> 00:32:40.470
you can acquire a
hardware buffer.

00:32:40.470 --> 00:32:43.200
And then you can call
Bitmap.wrapHardwareBuffer

00:32:43.200 --> 00:32:44.700
to get an actual bitmap.

00:32:44.700 --> 00:32:46.470
And then, finally, we
can use that bitmap

00:32:46.470 --> 00:32:47.820
inside a bitmap shader.

00:32:47.820 --> 00:32:50.610
So in summary, this
is all the classes

00:32:50.610 --> 00:32:51.930
you need to make this work.

00:32:51.930 --> 00:32:53.250
It's fairly simple
and self-explanatory.

00:32:53.250 --> 00:32:53.730
CHET HAASE: Obvious.

00:32:53.730 --> 00:32:54.900
ROMAIN GUY: So I'm
going to move on.

00:32:54.900 --> 00:32:55.570
[LAUGHTER]

00:32:55.570 --> 00:32:57.320
I think those are all
the graphics classes

00:32:57.320 --> 00:32:59.880
we have in the
platform, pretty much.

00:32:59.880 --> 00:33:02.830
Surface control is a way to
talk to surface [INAUDIBLE]

00:33:02.830 --> 00:33:03.685
directly.

00:33:03.685 --> 00:33:05.060
Again, we're
running out of time,

00:33:05.060 --> 00:33:06.143
so I'm going to skip that.

00:33:06.143 --> 00:33:08.180
There's new NDK APIs.

00:33:08.180 --> 00:33:10.350
But they're super cool.

00:33:10.350 --> 00:33:15.990
Vulkan-- all new 64-bit devices
that will ship from now on

00:33:15.990 --> 00:33:18.300
will be required to
ship with Vulcan 1.1.

00:33:18.300 --> 00:33:19.890
So if you have
questions about Vulkan,

00:33:19.890 --> 00:33:22.320
please come to the Graphics
Office Hours tomorrow

00:33:22.320 --> 00:33:23.010
afternoon.

00:33:23.010 --> 00:33:25.200
ANGLE-- this is
something experimental.

00:33:25.200 --> 00:33:28.260
We have OpenGL ES
running on top of Vulkan.

00:33:28.260 --> 00:33:32.190
This will allow us to deliver
updates to the OpenGL ES driver

00:33:32.190 --> 00:33:34.350
effectively as
just a simple APK.

00:33:34.350 --> 00:33:36.585
Right now, it's not
inside developer options.

00:33:36.585 --> 00:33:38.667
And inside your APK,
you also have to opt in.

00:33:38.667 --> 00:33:40.500
If you want to know
more about this feature,

00:33:40.500 --> 00:33:42.570
again, please come
to the office hours.

00:33:42.570 --> 00:33:45.870
In Android O, we introduced
wide color gamut rendering.

00:33:45.870 --> 00:33:48.177
We were using
16-bit color depth.

00:33:48.177 --> 00:33:50.010
Unfortunately, it was
using a lot of memory.

00:33:50.010 --> 00:33:52.290
It was also using
a lot of battery.

00:33:52.290 --> 00:33:56.403
So now we use 8-bit color depth,
and it solves these issues.

00:33:56.403 --> 00:33:57.570
And we have a bunch of APIs.

00:33:57.570 --> 00:34:00.307
So ColorLong is just like
the oldest color [INAUDIBLE]

00:34:00.307 --> 00:34:01.140
that you're used to.

00:34:01.140 --> 00:34:02.515
Those are a little
more powerful,

00:34:02.515 --> 00:34:04.772
because they let you
choose the color space.

00:34:04.772 --> 00:34:06.730
And now, we have a bunch
of new APIs on Canvas.

00:34:06.730 --> 00:34:09.630
So before, you could
render wide gamut bitmaps.

00:34:09.630 --> 00:34:12.330
Now, you can draw anything
with Canvas and wide gamut.

00:34:12.330 --> 00:34:14.580
So again, if you have
questions, office hours, please.

00:34:14.580 --> 00:34:19.030
Audio playback-- now you can
capture audio on the device.

00:34:19.030 --> 00:34:20.250
There's a new class for that.

00:34:20.250 --> 00:34:21.400
You have to opt in or out.

00:34:21.400 --> 00:34:23.040
If your app doesn't
target Android Q,

00:34:23.040 --> 00:34:24.830
you're automatically opted out.

00:34:24.830 --> 00:34:28.600
If your app does target Q, you
will be opted in by default.

00:34:28.600 --> 00:34:31.440
So in case you are playing
something that should not

00:34:31.440 --> 00:34:34.230
be recorded, please make
sure to check out those APIs

00:34:34.230 --> 00:34:36.596
and turn it off.

00:34:36.596 --> 00:34:38.429
CHET HAASE: Really quick
run through-- there

00:34:38.429 --> 00:34:40.650
are a lot of very
important privacy changes

00:34:40.650 --> 00:34:42.697
that most developers
probably need to understand.

00:34:42.697 --> 00:34:45.239
We're not going to have a lot
of time to cover them in depth,

00:34:45.239 --> 00:34:47.909
so it's very fortunate that
we have at least three privacy

00:34:47.909 --> 00:34:49.717
talks at IO that you
should check out.

00:34:49.717 --> 00:34:51.300
There's also really
good documentation

00:34:51.300 --> 00:34:52.967
on the developer's
side for the preview.

00:34:53.467 --> 00:34:55.920
External storage-- this
is about making sure

00:34:55.920 --> 00:34:58.470
that apps can't, by
default, access files

00:34:58.470 --> 00:35:00.030
created by all these other apps.

00:35:00.030 --> 00:35:02.760
targetSdk = P-- this
is to help migration.

00:35:02.760 --> 00:35:04.530
There is no change
from previous behavior.

00:35:04.530 --> 00:35:08.200
But if you're targeting Q, then
you are sandboxed by default.

00:35:08.200 --> 00:35:10.350
You'll only have access
to your own files.

00:35:10.350 --> 00:35:11.880
You can get access
to media files

00:35:11.880 --> 00:35:14.160
by using the traditional
storage permission,

00:35:14.160 --> 00:35:16.230
as well as the media store APIs.

00:35:16.230 --> 00:35:18.090
If you want access
to photo metadata,

00:35:18.090 --> 00:35:20.700
you need to use the storage
permission plus a location

00:35:20.700 --> 00:35:21.670
permission.

00:35:21.670 --> 00:35:23.700
And if you still need
access to all files,

00:35:23.700 --> 00:35:25.650
maybe you are actually
a file browser.

00:35:25.650 --> 00:35:27.240
There is a manifest
flag that you can

00:35:27.240 --> 00:35:29.160
look into for more information.

00:35:29.160 --> 00:35:31.410
And please go to the
talk Wednesday at 1:30

00:35:31.410 --> 00:35:33.180
for more information on that.

00:35:33.180 --> 00:35:36.660
Changes to location-- we
now have a [INAUDIBLE]

00:35:36.660 --> 00:35:37.890
for a location.

00:35:37.890 --> 00:35:39.990
The user needs to
give you permission

00:35:39.990 --> 00:35:42.150
to get access to
location if you're

00:35:42.150 --> 00:35:44.040
running in the background.

00:35:44.040 --> 00:35:46.827
An app can say, I want
location at all time.

00:35:46.827 --> 00:35:48.660
And the user can say,
no, you'll only get it

00:35:48.660 --> 00:35:49.910
when you're in the foreground.

00:35:49.910 --> 00:35:51.420
So we leave that up to the user.

00:35:51.420 --> 00:35:53.640
And there's a new permission
you have to request

00:35:53.640 --> 00:35:55.890
for background access.

00:35:55.890 --> 00:35:57.520
Talk on that tomorrow morning.

00:35:57.520 --> 00:35:59.010
So please go to that.

00:35:59.010 --> 00:36:01.950
We are restricting applications
from launching activities

00:36:01.950 --> 00:36:03.460
when they're in the background.

00:36:03.460 --> 00:36:05.400
So in order to actually
start an activity,

00:36:05.400 --> 00:36:07.860
if you are used
to doing this, you

00:36:07.860 --> 00:36:10.350
need to either be in the
foreground to begin with,

00:36:10.350 --> 00:36:14.130
or you need to get pending
intent from a foreground app

00:36:14.130 --> 00:36:16.770
or from the system or a
broadcast from the system.

00:36:16.770 --> 00:36:19.740
Or, the best practice is
to launch a foreground

00:36:19.740 --> 00:36:20.730
notification.

00:36:20.730 --> 00:36:23.650
Then that is in the foreground,
and it can launch the activity.

00:36:23.650 --> 00:36:25.720
Basically, the user
needs to be involved.

00:36:25.720 --> 00:36:28.190
They need to understand
what's actually going on.

00:36:28.190 --> 00:36:30.270
Talk on this tomorrow
morning, early.

00:36:30.270 --> 00:36:31.670
So go to that.

00:36:31.670 --> 00:36:34.820
Camera-- if you're used to
getting camera characteristics,

00:36:34.820 --> 00:36:37.920
we restrict access to
device-specific data.

00:36:37.920 --> 00:36:40.940
So if you're getting these
kinds of pieces of information,

00:36:40.940 --> 00:36:44.810
you now need camera
permission to get those.

00:36:44.810 --> 00:36:47.690
And there's more information,
again, tomorrow at 8:30.

00:36:47.690 --> 00:36:51.080
Connectivity-- really whipping
through this really quickly.

00:36:51.080 --> 00:36:53.870
You cannot disable and
enable Wi-Fi on the fly from

00:36:53.870 --> 00:36:55.830
your application anymore.

00:36:55.830 --> 00:36:58.850
Instead, the approved practice
is to use a settings panel.

00:36:58.850 --> 00:37:00.590
If you really need
the user to toggle

00:37:00.590 --> 00:37:02.790
this for some
specific capability,

00:37:02.790 --> 00:37:04.790
there's a new
settings capability

00:37:04.790 --> 00:37:06.760
that we give you
where you can pop up

00:37:06.760 --> 00:37:08.840
a settings panel directly
inline in your app

00:37:08.840 --> 00:37:12.200
for specific capabilities
of internet, Wi-Fi, NFC,

00:37:12.200 --> 00:37:13.340
and volume.

00:37:13.340 --> 00:37:14.540
And it works like this.

00:37:14.540 --> 00:37:16.100
It will basically
ask for that thing,

00:37:16.100 --> 00:37:18.320
and it pops up the panel
as your application

00:37:18.320 --> 00:37:19.970
is running in the foreground.

00:37:19.970 --> 00:37:21.590
Works like a charm.

00:37:21.590 --> 00:37:22.610
And with that--

00:37:22.610 --> 00:37:23.120
DAN SANDLER: Oh,
I get to finish?

00:37:23.120 --> 00:37:24.787
CHET HAASE: --I think
Dan wants to say--

00:37:24.787 --> 00:37:25.985
DAN SANDLER: Oh, I thought--

00:37:25.985 --> 00:37:26.840
wow.

00:37:26.840 --> 00:37:27.690
Thank you.

00:37:27.690 --> 00:37:31.300
Thank you all so much
for joining us here.

