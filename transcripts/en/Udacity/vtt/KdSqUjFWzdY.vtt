WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:02.310
Before we get started, let's make sure you're clear

00:00:02.310 --> 00:00:05.340
on when the MapReduce programming model is appropriate and when

00:00:05.340 --> 00:00:09.420
it isn't. People use the term big data a lot.

00:00:09.420 --> 00:00:12.150
But often data isn't actually that big, in the grand

00:00:12.150 --> 00:00:15.080
scheme of things. Some people might tell you that

00:00:15.080 --> 00:00:17.800
big data is anything too large to deal with easily

00:00:17.800 --> 00:00:22.460
in Excel. That's definitely not the case. It's generally safe

00:00:22.460 --> 00:00:25.580
to say that your data is quote unquote big if

00:00:25.580 --> 00:00:29.200
it's too large to fit onto one disc. A reasonable

00:00:29.200 --> 00:00:31.550
size at which to set the lower bound for big data

00:00:31.550 --> 00:00:35.580
at this point in time is probably about five terabytes. For

00:00:35.580 --> 00:00:38.970
example, say Google was trying to catalog and index all of

00:00:38.970 --> 00:00:40.860
the books in the world to find out which words

00:00:40.860 --> 00:00:44.710
have appeared most often. It'd be impossible to load the text

00:00:44.710 --> 00:00:47.440
from all the books in the world into a single disc.

00:00:47.440 --> 00:00:50.630
It's simply too much data. This is when we should look

00:00:50.630 --> 00:00:53.620
to the MapReduce programming model. Beyond this first

00:00:53.620 --> 00:00:56.592
constraint, because of the specifics of the MapReduce

00:00:56.592 --> 00:00:59.950
programming model, MapReduce only works for tasks where

00:00:59.950 --> 00:01:03.020
you hope to employ many workers simultaneously who do

00:01:03.020 --> 00:01:06.140
not have knowledge of each other's actions. Why

00:01:06.140 --> 00:01:09.140
is that? MapReduce splits a large job up into

00:01:09.140 --> 00:01:11.810
several smaller chunks that each fit onto one

00:01:11.810 --> 00:01:16.030
machine and occurs simultaneously. These machines do not communicate

00:01:16.030 --> 00:01:17.230
with each other while performing their

00:01:17.230 --> 00:01:20.780
computations. Certain tasks, that would be very

00:01:20.780 --> 00:01:25.110
easy to do using a SQL-like database or simple Python script, can become very

00:01:25.110 --> 00:01:26.470
complex when attempting to do them

00:01:26.470 --> 00:01:29.710
using MapReduce. Because of this, the smartest

00:01:29.710 --> 00:01:33.620
thing to do is to only use MapReduce when your data is truly big.

