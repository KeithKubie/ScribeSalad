WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:04.360
A couple of videos ago, I made
the statement that the rank of

00:00:04.360 --> 00:00:08.280
a matrix A is equal to the
rank of its transpose.

00:00:08.280 --> 00:00:09.910
And I made a bit of a
hand wavy argument.

00:00:09.910 --> 00:00:12.310
It was at the end of the
video, and I was tired.

00:00:12.310 --> 00:00:13.710
It was actually the
end of the day.

00:00:13.710 --> 00:00:16.810
And I thought it'd be worthwhile
to maybe flush this

00:00:16.810 --> 00:00:17.300
out a little bit.

00:00:17.300 --> 00:00:18.620
Because it's an important
take away.

00:00:18.620 --> 00:00:21.550
It'll help us understand
everything we've learned a

00:00:21.550 --> 00:00:23.200
little bit better.

00:00:23.200 --> 00:00:25.560
So, let's understand-- I'm
actually going to start with

00:00:25.560 --> 00:00:26.830
the rank of A transpose.

00:00:31.630 --> 00:00:37.080
The rank of A transpose is equal
to the dimension of the

00:00:37.080 --> 00:00:40.020
column space of A transpose.

00:00:40.020 --> 00:00:42.690
That's the definition
of the rank.

00:00:42.690 --> 00:00:46.810
The dimension of the column
space of A transpose is the

00:00:46.810 --> 00:00:53.950
number of basis vectors for the

00:00:53.950 --> 00:00:55.330
column space of A transpose.

00:00:55.330 --> 00:00:56.810
That's what dimension is.

00:00:56.810 --> 00:00:59.900
For any subspace, you figure out
how many basis vectors you

00:00:59.900 --> 00:01:01.910
need in that subspace,
and you count them,

00:01:01.910 --> 00:01:02.830
and that's your dimension.

00:01:02.830 --> 00:01:07.180
So, it's the number of basis
vectors for the column space

00:01:07.180 --> 00:01:10.150
of A transpose, which is, of
course, the same thing.

00:01:10.150 --> 00:01:12.530
This thing we've seen multiple
times, is the same thing as

00:01:12.530 --> 00:01:13.780
the row space of A.

00:01:17.690 --> 00:01:17.950
Right?

00:01:17.950 --> 00:01:20.220
The columns of A transpose
are the same thing

00:01:20.220 --> 00:01:21.785
as the rows of A.

00:01:21.785 --> 00:01:24.310
It's because You switch the
rows and the columns.

00:01:24.310 --> 00:01:27.480
Now, how can we figure out the
number of basis vectors we

00:01:27.480 --> 00:01:30.390
need for the column space
of A transpose, or the

00:01:30.390 --> 00:01:32.040
row space of A?

00:01:32.040 --> 00:01:34.160
Let's just think about what
the column space of A

00:01:34.160 --> 00:01:36.330
transpose is telling us.

00:01:36.330 --> 00:01:38.290
So, it's equivalent to--
so let's say, let

00:01:38.290 --> 00:01:39.690
me draw A like this.

00:01:43.400 --> 00:01:44.420
That's a matrix A.

00:01:44.420 --> 00:01:47.160
Let's say it's an
m by n matrix.

00:01:47.160 --> 00:01:49.210
Let me just write it as a
bunch of row vectors.

00:01:49.210 --> 00:01:51.040
I could also write it as a bunch
of column vectors, but

00:01:51.040 --> 00:01:53.150
right now let's stick
to the row vectors.

00:01:53.150 --> 00:01:55.420
So we have row one.

00:01:55.420 --> 00:01:57.420
The transpose of
column vectors.

00:01:57.420 --> 00:02:02.460
That's row one, and we're going
to have row two, and

00:02:02.460 --> 00:02:05.710
we're going to go all the
way down to row m.

00:02:05.710 --> 00:02:06.010
Right?

00:02:06.010 --> 00:02:06.970
It's an m by n matrix.

00:02:06.970 --> 00:02:10.289
Each of these vectors are
members of rn, because they're

00:02:10.289 --> 00:02:11.690
going to have n entries in them

00:02:11.690 --> 00:02:13.800
because we have n columns.

00:02:13.800 --> 00:02:15.730
So, that's what A is
going to look like.

00:02:15.730 --> 00:02:17.050
A is going look like that.

00:02:17.050 --> 00:02:20.660
And then A transpose, all
of these rows are

00:02:20.660 --> 00:02:22.480
going to become columns.

00:02:22.480 --> 00:02:27.670
A transpose is going to look
like this. r1, r2,

00:02:27.670 --> 00:02:30.890
all the way to rm.

00:02:30.890 --> 00:02:33.880
And this is of course going
to be an n by m matrix.

00:02:33.880 --> 00:02:35.485
You swap these out.

00:02:35.485 --> 00:02:38.670
So, all these rows are
going to be columns.

00:02:38.670 --> 00:02:39.650
Right?

00:02:39.650 --> 00:02:41.590
And, obviously the column
space-- or maybe not so

00:02:41.590 --> 00:02:47.350
obviously-- the column space of
A transpose is equal to the

00:02:47.350 --> 00:02:56.270
span of r1, r2, all
the way to rm.

00:02:56.270 --> 00:02:56.900
Right?

00:02:56.900 --> 00:02:58.390
It's equal to the span
of these things.

00:02:58.390 --> 00:03:00.780
Or you could equivocally call
it, it's equal to the span of

00:03:00.780 --> 00:03:01.470
the rows of A.

00:03:01.470 --> 00:03:03.740
That's why it's also called
the row space.

00:03:03.740 --> 00:03:12.560
This is equal to the span
of the rows of A.

00:03:12.560 --> 00:03:14.530
These two things
are equivalent.

00:03:14.530 --> 00:03:16.100
Now, these are the span.

00:03:16.100 --> 00:03:18.260
That means this is some subspace
that's all of the

00:03:18.260 --> 00:03:20.700
linear combinations of these
columns, or all of the linear

00:03:20.700 --> 00:03:22.090
combinations of these rows.

00:03:22.090 --> 00:03:26.030
If we want the basis for it, we
want to find a minimum set

00:03:26.030 --> 00:03:29.280
of linearly independent vectors
that we could use to

00:03:29.280 --> 00:03:30.880
construct any of
these columns.

00:03:30.880 --> 00:03:34.830
Or that we could use construct
any of these rows, right here.

00:03:34.830 --> 00:03:37.270
Now, what happens when
we put A into

00:03:37.270 --> 00:03:40.070
reduced row echelon form?

00:03:40.070 --> 00:03:46.290
We do a bunch of row operations
to put it into

00:03:46.290 --> 00:03:49.020
reduced row echelon form.

00:03:49.020 --> 00:03:49.140
Right?

00:03:49.140 --> 00:03:52.150
Do a bunch of row operations
and you eventually get

00:03:52.150 --> 00:03:53.050
something like this.

00:03:53.050 --> 00:03:57.410
You'll get the reduced row
echelon form of A.

00:03:57.410 --> 00:03:59.610
The reduced row echelon form
of A is going to look

00:03:59.610 --> 00:04:00.840
something like this.

00:04:00.840 --> 00:04:04.180
You're going to have some pivot
rows, some rows that

00:04:04.180 --> 00:04:05.650
have pivot entries.

00:04:05.650 --> 00:04:08.010
Let's say that's one of them.

00:04:08.010 --> 00:04:08.980
Let's say that's one of them.

00:04:08.980 --> 00:04:11.390
This will all have 0's
all the way down.

00:04:11.390 --> 00:04:12.770
This one will have 0's.

00:04:12.770 --> 00:04:14.760
Your pivot entry has to
be the only non-zero

00:04:14.760 --> 00:04:16.180
entry in it's column.

00:04:16.180 --> 00:04:18.220
And everything to the left
of it all has to be 0.

00:04:18.220 --> 00:04:19.790
Let's say that this one isn't.

00:04:19.790 --> 00:04:21.360
These are some non-zero
values.

00:04:21.360 --> 00:04:22.600
These are 0.

00:04:22.600 --> 00:04:24.690
We have another pivot
entry over here.

00:04:24.690 --> 00:04:25.340
Everything else is 0.

00:04:25.340 --> 00:04:29.350
Let's say everything else
are non-pivot entries.

00:04:29.350 --> 00:04:32.510
So you come here and you have
a certain number of pivot

00:04:32.510 --> 00:04:35.350
rows, or a certain number
of pivot entries, right?

00:04:35.350 --> 00:04:37.630
And you got there by performing
linear row

00:04:37.630 --> 00:04:38.880
operations on these guys.

00:04:38.880 --> 00:04:41.670
So those linear row operations--
you know, I take

00:04:41.670 --> 00:04:44.655
3 times row two, and I add it
to row one, and that's going

00:04:44.655 --> 00:04:45.790
to become my new row two.

00:04:45.790 --> 00:04:47.840
And you keep doing that and
you get these things here.

00:04:47.840 --> 00:04:49.170
So, these things
here are linear

00:04:49.170 --> 00:04:50.890
combinations of those guys.

00:04:50.890 --> 00:04:52.830
Or another way to do it, you
can reverse those row

00:04:52.830 --> 00:04:53.380
operations.

00:04:53.380 --> 00:04:56.170
I could start with these
guys right here.

00:04:56.170 --> 00:04:58.990
And I could just as easily
perform the reverse row

00:04:58.990 --> 00:05:00.420
operations.

00:05:00.420 --> 00:05:02.470
Any linear operation, you can
perform the reverse of it.

00:05:02.470 --> 00:05:04.040
We've seen that multiple
times.

00:05:04.040 --> 00:05:09.690
You could perform row operations
with these guys to

00:05:09.690 --> 00:05:11.420
get all of these guys.

00:05:11.420 --> 00:05:15.070
Or another way to view it is,
these vectors here, these row

00:05:15.070 --> 00:05:20.400
vectors right here, they span
all of these-- or all of these

00:05:20.400 --> 00:05:23.170
row vectors can be represented
of linear combinations of your

00:05:23.170 --> 00:05:24.190
pivot rows right here.

00:05:24.190 --> 00:05:29.280
Obviously, your non-pivot rows
are going to be all 0's.

00:05:29.280 --> 00:05:31.380
And those are useless.

00:05:31.380 --> 00:05:33.670
But, your pivot rows, if you
take linear combinations of

00:05:33.670 --> 00:05:37.870
them, you can clearly do reverse
row echelon form and

00:05:37.870 --> 00:05:39.190
get back to your matrix.

00:05:39.190 --> 00:05:41.280
So, all of these guys can
be represented as linear

00:05:41.280 --> 00:05:42.730
combinations of them.

00:05:42.730 --> 00:05:47.140
And all of these pivot entries
are by definition-- well,

00:05:47.140 --> 00:05:48.590
almost by definition--
they are linearly

00:05:48.590 --> 00:05:49.900
independent, right?

00:05:49.900 --> 00:05:50.970
Because I've got a 1 here.

00:05:50.970 --> 00:05:53.320
No one else has a 1 there.

00:05:53.320 --> 00:05:55.880
So this guy can definitely not
be represented as a linear

00:05:55.880 --> 00:05:57.990
combination of the other guy.

00:05:57.990 --> 00:06:00.710
So why am I going through
this whole exercise?

00:06:00.710 --> 00:06:02.300
Well, we started off
saying we wanted a

00:06:02.300 --> 00:06:05.470
basis for the row space.

00:06:05.470 --> 00:06:09.600
We wanted some minimum set of
linearly independent vectors

00:06:09.600 --> 00:06:12.610
that spans everything that
these guys can span.

00:06:12.610 --> 00:06:14.920
Well, if all of these guys can
be represented as linear

00:06:14.920 --> 00:06:17.660
combinations of these row
vectors in reduced row echelon

00:06:17.660 --> 00:06:23.090
form-- or these pivot rows in
reduced row echelon form-- and

00:06:23.090 --> 00:06:25.910
these guys are all linearly
independent, then they are a

00:06:25.910 --> 00:06:27.980
reasonable basis.

00:06:27.980 --> 00:06:30.810
So these pivot rows right here,
that's one of them, this

00:06:30.810 --> 00:06:33.750
is the second one, this is the
third one, maybe they're the

00:06:33.750 --> 00:06:34.380
only three.

00:06:34.380 --> 00:06:36.050
This is just my particular
example.

00:06:36.050 --> 00:06:38.715
That would be a suitable basis
for the row space.

00:06:38.715 --> 00:06:40.520
So let me write this down.

00:06:40.520 --> 00:06:57.480
The pivot rows in reduced row
echelon form of A are a basis

00:06:57.480 --> 00:07:03.470
for the row space of A.

00:07:03.470 --> 00:07:07.180
And the row space of A is the
same thing, or the column

00:07:07.180 --> 00:07:08.230
space of A transpose.

00:07:08.230 --> 00:07:10.370
The row space of A is the
same thing as the

00:07:10.370 --> 00:07:11.490
column space of A transpose.

00:07:11.490 --> 00:07:13.150
We've see that multiple times.

00:07:13.150 --> 00:07:16.870
Now, if we want to know the
dimension of your column

00:07:16.870 --> 00:07:20.770
space, we just count the number
of pivot rows you have.

00:07:20.770 --> 00:07:22.530
So you just count the number
of pivot rows.

00:07:22.530 --> 00:07:25.740
So the dimension of your row
space, which is the same thing

00:07:25.740 --> 00:07:28.360
as the column space of A
transpose, is going to be the

00:07:28.360 --> 00:07:32.420
number of pivot rows you have
in reduced row echelon form.

00:07:32.420 --> 00:07:35.010
Or, even simpler, the number
of pivot entries you have

00:07:35.010 --> 00:07:37.430
because every pivot entry
has a pivot row.

00:07:37.430 --> 00:07:46.760
So we can write that the rank of
A transpose is equal to the

00:07:46.760 --> 00:07:57.180
number of pivot entries in
reduced row echelon form of A.

00:07:57.180 --> 00:07:57.490
Right?

00:07:57.490 --> 00:07:59.950
Because every pivot entry
corresponds to a pivot row.

00:07:59.950 --> 00:08:03.840
Those pivot rows are a suitable
basis for the entire

00:08:03.840 --> 00:08:06.260
row space, because every row
could be made with a linear

00:08:06.260 --> 00:08:07.910
combination of these guys.

00:08:07.910 --> 00:08:10.270
And since all these can be, then
anything that these guys

00:08:10.270 --> 00:08:12.970
can construct, these
guys can construct.

00:08:12.970 --> 00:08:13.930
Fair enough.

00:08:13.930 --> 00:08:16.350
Now, what is the rank of A?

00:08:16.350 --> 00:08:18.160
This is the rank of A transpose
that we've been

00:08:18.160 --> 00:08:20.440
dealing with so far.

00:08:20.440 --> 00:08:30.350
The rank of A is equal to
the dimension of the

00:08:30.350 --> 00:08:32.620
column space of A.

00:08:32.620 --> 00:08:41.669
Or, you could say it's the
number of vectors in the basis

00:08:41.669 --> 00:08:44.450
for the column space of A.

00:08:44.450 --> 00:08:50.910
So if we take that same matrix
A that we used above, and we

00:08:50.910 --> 00:08:55.860
instead we write it as a bunch
of column vectors, so c1, c2,

00:08:55.860 --> 00:08:57.720
all the way to cn.

00:08:57.720 --> 00:09:00.440
We have n columns right there.

00:09:00.440 --> 00:09:02.490
The column space is essentially
the subspace

00:09:02.490 --> 00:09:05.150
that's spanned by all of these
characters right here, right?

00:09:05.150 --> 00:09:06.790
Spanned by each of these
column vectors.

00:09:06.790 --> 00:09:13.810
So the column space of A is
equal to the span of c1, c2,

00:09:13.810 --> 00:09:15.810
all the way to cn.

00:09:15.810 --> 00:09:17.410
That's the definition of it.

00:09:17.410 --> 00:09:19.280
But we want to know the number
of basis vectors.

00:09:19.280 --> 00:09:23.020
And we've seen before-- we've
done this multiple times--

00:09:23.020 --> 00:09:25.170
what suitable basis
vectors could be.

00:09:25.170 --> 00:09:28.800
If you put this into reduced row
echelon form, and you have

00:09:28.800 --> 00:09:33.480
some pivot entries and their
corresponding pivot columns,

00:09:33.480 --> 00:09:35.820
so some pivot entries with
their corresponding pivot

00:09:35.820 --> 00:09:37.380
columns just like that.

00:09:37.380 --> 00:09:41.540
Maybe that's like that, and then
maybe this one isn't one,

00:09:41.540 --> 00:09:42.620
and then this one is.

00:09:42.620 --> 00:09:44.210
So you have a certain number
of pivot columns.

00:09:47.040 --> 00:09:49.450
Let me do it with another
color right here.

00:09:49.450 --> 00:09:53.190
When you put A into reduced row
echelon form, we learned

00:09:53.190 --> 00:09:56.660
that the basis vectors, or the
basis columns that form a

00:09:56.660 --> 00:09:59.090
basis for your column space,
are the columns that

00:09:59.090 --> 00:10:02.000
correspond to the
pivot columns.

00:10:02.000 --> 00:10:04.750
So the first column here is a
pivot column, so this guy

00:10:04.750 --> 00:10:05.780
could be a basis vector.

00:10:05.780 --> 00:10:08.010
The second column is, so this
guy could be a pivot vector.

00:10:08.010 --> 00:10:10.720
Or maybe the fourth one right
here, so this guy could be a

00:10:10.720 --> 00:10:11.880
pivot vector.

00:10:11.880 --> 00:10:15.690
So, in general, you just say
hey, if you want to count the

00:10:15.690 --> 00:10:17.290
number basis vectors-- because
we don't even have to know

00:10:17.290 --> 00:10:18.400
what they are to figure
out the rank.

00:10:18.400 --> 00:10:20.230
We just have to know the
number they are.

00:10:20.230 --> 00:10:22.960
Well you say, well for every
pivot column here, we have a

00:10:22.960 --> 00:10:24.530
basis vector over there.

00:10:24.530 --> 00:10:26.990
So we could just count the
number pivot columns.

00:10:26.990 --> 00:10:29.510
But the number of pivot columns
is equivalent to just

00:10:29.510 --> 00:10:31.510
the number of pivot entries we
have. Because every pivot

00:10:31.510 --> 00:10:33.200
entry gets its own column.

00:10:33.200 --> 00:10:42.220
So we could say that the rank of
A is equal to the number of

00:10:42.220 --> 00:10:49.870
pivot entries in the reduced
row echelon form of A.

00:10:49.870 --> 00:10:53.000
And, as you can see very
clearly, that's the exact same

00:10:53.000 --> 00:10:55.940
thing that we deduced was
equivalent to the rank of A

00:10:55.940 --> 00:10:57.480
transpose-- the dimension
of the

00:10:57.480 --> 00:10:59.720
columns space of A transpose.

00:10:59.720 --> 00:11:02.240
Or the dimension of the
row space of A.

00:11:02.240 --> 00:11:04.450
So we can now write
our conclusion.

00:11:04.450 --> 00:11:11.100
The rank of A is definitely the
same thing as the rank of

00:11:11.100 --> 00:11:12.350
A transpose.

