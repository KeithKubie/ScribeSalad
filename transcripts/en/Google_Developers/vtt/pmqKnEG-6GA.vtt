WEBVTT
Kind: captions
Language: en

00:00:01.290 --> 00:00:01.580
PAUL IRISH: All right.

00:00:01.580 --> 00:00:04.560
Good morning, good evening,
good afternoon.

00:00:04.560 --> 00:00:06.670
BORIS SMUS: What's up?

00:00:06.670 --> 00:00:09.030
PAUL IRISH: We're bringing to
you the first installment of

00:00:09.030 --> 00:00:13.100
what we're going to be calling
HTML5 Rocks Live, a video

00:00:13.100 --> 00:00:14.915
series talking about--

00:00:14.915 --> 00:00:16.590
ERIC BIDELMAN: What are we
going to talk about?

00:00:16.590 --> 00:00:17.430
PAUL IRISH: I don't know.

00:00:17.430 --> 00:00:18.070
BORIS SMUS: Everything.

00:00:18.070 --> 00:00:18.520
PAUL IRISH: Building web apps.

00:00:18.520 --> 00:00:19.760
BORIS SMUS: Building web apps.

00:00:19.760 --> 00:00:24.910
PAUL IRISH: What's new in the
browser, and how to do amazing

00:00:24.910 --> 00:00:26.554
things inside the browser,
I guess.

00:00:26.554 --> 00:00:28.740
BORIS SMUS: How to do that.

00:00:28.740 --> 00:00:29.570
PAUL IRISH: Today, we
have a few things

00:00:29.570 --> 00:00:30.670
we're going to show.

00:00:30.670 --> 00:00:34.570
We're going to talk about the
new Vertical Timeline in

00:00:34.570 --> 00:00:37.700
Chrome Developer tools, we're
going to talk about Device

00:00:37.700 --> 00:00:41.810
Detection, and then we're also
going to talk about the File

00:00:41.810 --> 00:00:44.550
System API, and some
new stuff for that.

00:00:44.550 --> 00:00:44.860
ERIC BIDELMAN: Before
we do that, we

00:00:44.860 --> 00:00:46.095
should introduce ourselves.

00:00:46.095 --> 00:00:46.400
PAUL IRISH: Sounds good.

00:00:46.400 --> 00:00:47.900
BORIS SMUS: Good point.

00:00:47.900 --> 00:00:49.580
ERIC BIDELMAN: So who
are you, fine sir?

00:00:49.580 --> 00:00:50.720
PAUL IRISH: My name
is Paul Irish.

00:00:50.720 --> 00:00:53.710
We're all on the Chrome
Developer Relations team.

00:00:53.710 --> 00:00:57.990
I like to focus on the Chrome
Developer Tools and

00:00:57.990 --> 00:01:02.070
Cross-browser, and all
sorts of good stuff.

00:01:02.070 --> 00:01:02.385
BORIS SMUS: My name is.

00:01:02.385 --> 00:01:03.170
Boris.

00:01:03.170 --> 00:01:07.350
I mostly the focus on mobile
stuff and used to be on

00:01:07.350 --> 00:01:08.525
Extensions.

00:01:08.525 --> 00:01:09.505
ERIC BIDELMAN: What's
up, everybody?

00:01:09.505 --> 00:01:11.280
My name's Eric Bidelman, also
[? on Chrome Developer ?]

00:01:11.280 --> 00:01:16.350
Relations, focusing mainly
on HTML5 awesomeness for

00:01:16.350 --> 00:01:17.790
building web apps.

00:01:17.790 --> 00:01:19.540
PAUL IRISH: Right.

00:01:19.540 --> 00:01:23.420
So first, I think we'll
just go right into it.

00:01:23.420 --> 00:01:26.290
I want to show off some new
features inside the Chrome Dev

00:01:26.290 --> 00:01:28.404
Tools, and so what I'm going
to do is I'm just going to

00:01:28.404 --> 00:01:29.654
share my screen.

00:01:33.010 --> 00:01:33.700
It should be good.

00:01:33.700 --> 00:01:34.550
Cool.

00:01:34.550 --> 00:01:38.510
So I wanted to show some new
stuff, and so what I'm going

00:01:38.510 --> 00:01:42.040
to do is actually going to use a
demo that was written by the

00:01:42.040 --> 00:01:46.530
government called Hakim,
who goes by hakimel

00:01:46.530 --> 00:01:48.300
on Twitter and GetHub.

00:01:48.300 --> 00:01:50.560
Really good stuff, and so this
is a little tricky because

00:01:50.560 --> 00:01:53.590
you're going to be watching it
and the frame rate won't be so

00:01:53.590 --> 00:01:57.106
hot, and it's all about smooth
graphics, but you're just

00:01:57.106 --> 00:02:00.390
going to have to bear
with me here.

00:02:00.390 --> 00:02:03.860
So what this is, is a little
demo where we can scroll

00:02:03.860 --> 00:02:08.500
through a list of items and
there is a visual effect as

00:02:08.500 --> 00:02:13.050
the items kind of scroll
into view.

00:02:13.050 --> 00:02:13.980
Pretty cool.

00:02:13.980 --> 00:02:18.762
And so Hakim released this
sometime last week, and

00:02:18.762 --> 00:02:20.350
everyone was really into it.

00:02:20.350 --> 00:02:22.490
As so I was looking at the code
behind it and I was like,

00:02:22.490 --> 00:02:23.440
hm, this is cool.

00:02:23.440 --> 00:02:25.220
And I was wondering if we could
actually make it any

00:02:25.220 --> 00:02:26.800
smoother at all.

00:02:26.800 --> 00:02:31.275
I learned a few things about how
Chrome deals with hardware

00:02:31.275 --> 00:02:33.240
accelerated graphics
and was like--

00:02:33.240 --> 00:02:35.395
ERIC BIDELMAN: Did you see like
visual jank, and were you

00:02:35.395 --> 00:02:36.520
actively investigating?

00:02:36.520 --> 00:02:36.890
PAUL IRISH: Yeah.

00:02:36.890 --> 00:02:38.390
ERIC BIDELMAN: It's a
great demo, but--

00:02:38.390 --> 00:02:40.560
PAUL IRISH: Yeah,
I mean, I did.

00:02:40.560 --> 00:02:43.990
So we call it jank oftentimes
inside the team.

00:02:43.990 --> 00:02:48.320
Jank is just like stuttering
and the absence of buttery

00:02:48.320 --> 00:02:49.570
smoothness.

00:02:52.180 --> 00:02:53.000
BORIS SMUS: Devoid of.

00:02:53.000 --> 00:02:55.560
PAUL IRISH: Yeah, exactly.

00:02:55.560 --> 00:02:58.150
So it was good, but I was like,
I think we can get it a

00:02:58.150 --> 00:02:59.080
little bit better.

00:02:59.080 --> 00:03:01.775
So I'm going to show you a new
tool inside the Chrome Dev

00:03:01.775 --> 00:03:04.450
Tools that we're going to use
to kind of explore this.

00:03:08.090 --> 00:03:10.530
So you'll see it here.

00:03:10.530 --> 00:03:12.940
Right inside the Timelines
Panel on the Timelines,

00:03:12.940 --> 00:03:16.790
there's these two buttons right
underneath Resources.

00:03:16.790 --> 00:03:19.780
And it doesn't look like it's
very much now, but we'll see

00:03:19.780 --> 00:03:20.350
it in a little bit.

00:03:20.350 --> 00:03:24.410
Now right now to enable this,
you're going to have to do a

00:03:24.410 --> 00:03:25.900
little bit funky stuff.

00:03:25.900 --> 00:03:28.480
You're going to go to About
Flags, where you can turn on

00:03:28.480 --> 00:03:31.930
all sorts of good stuff, and
you're going to search for

00:03:31.930 --> 00:03:34.930
Developer Tool Experiments.

00:03:34.930 --> 00:03:36.550
You enable that.

00:03:36.550 --> 00:03:40.710
And then back inside your Dev
Tools, you click on Settings

00:03:40.710 --> 00:03:43.900
and down at the bottom is all
this cool experiments.

00:03:43.900 --> 00:03:46.890
Now of course, all this stuff is
kind of super experimental.

00:03:46.890 --> 00:03:49.580
If it breaks, too bad.

00:03:49.580 --> 00:03:51.880
But this is the new Vertical
Overview Mode in

00:03:51.880 --> 00:03:52.800
the Timeline Panel.

00:03:52.800 --> 00:03:55.860
And you'll be seeing it
soon anyways, but

00:03:55.860 --> 00:03:58.480
here's what it does.

00:03:58.480 --> 00:04:01.280
First, I'm going to keep it
off, and I'm just going to

00:04:01.280 --> 00:04:07.150
record, and I'll go down and
scroll a little bit.

00:04:07.150 --> 00:04:09.100
OK, cool.

00:04:09.100 --> 00:04:13.350
Stop recording, and now I can
click and I can drag, and I

00:04:13.350 --> 00:04:14.840
can see some things.

00:04:14.840 --> 00:04:17.329
Mostly, it just paints all along
the side, and we can see

00:04:17.329 --> 00:04:21.810
how big the paints are,
here's a scroll event.

00:04:21.810 --> 00:04:24.570
It looks like this scroll event
is actually taking up

00:04:24.570 --> 00:04:26.390
quite a bit of time.

00:04:26.390 --> 00:04:29.280
How long is this?

00:04:29.280 --> 00:04:32.940
211 milliseconds for the
entire duration.

00:04:32.940 --> 00:04:35.410
ERIC BIDELMAN: So Paul, is that
the call-back for the

00:04:35.410 --> 00:04:37.230
scroll, or what is that?

00:04:37.230 --> 00:04:37.950
PAUL IRISH: Yeah.

00:04:37.950 --> 00:04:41.550
The self time of the actual
event itself is very, very

00:04:41.550 --> 00:04:44.880
small, but what it does
is considerable.

00:04:44.880 --> 00:04:47.810
So that one scroll event
kicks off a lot of

00:04:47.810 --> 00:04:49.460
Recalculate Style Layout.

00:04:49.460 --> 00:04:52.740
So Recalculate Style Layout is
basically, we're matching all

00:04:52.740 --> 00:04:57.710
the CSS against the DOM, and
then recalculating all the

00:04:57.710 --> 00:04:59.200
geometry of the page.

00:04:59.200 --> 00:05:03.080
And when you see Recalc Style
followed by Layout, and that

00:05:03.080 --> 00:05:06.670
pair going back and forth,
there's usually an ability to

00:05:06.670 --> 00:05:07.860
optimize that.

00:05:07.860 --> 00:05:10.350
So we're going to look into
what we can do there.

00:05:10.350 --> 00:05:11.855
ERIC BIDELMAN: So that's
sort of an instant red

00:05:11.855 --> 00:05:12.860
flag on your web app?

00:05:12.860 --> 00:05:14.346
PAUL IRISH: Yeah, exactly.

00:05:14.346 --> 00:05:16.740
BORIS SMUS: So could you talk a
little bit about the yellow

00:05:16.740 --> 00:05:20.450
bar has the bright yellow and
then the less bright yellow?

00:05:20.450 --> 00:05:21.010
PAUL IRISH: Oh yeah.

00:05:21.010 --> 00:05:23.070
The beginning is the
self time, right?

00:05:23.070 --> 00:05:25.110
So if I'm highlighting over
here and we have the self

00:05:25.110 --> 00:05:30.220
time, it's basically that
sometimes you'll see this.

00:05:30.220 --> 00:05:31.330
You'll see this with
event handlers.

00:05:31.330 --> 00:05:35.670
You'll also see this
with Ajax.

00:05:35.670 --> 00:05:38.760
What the actual event was is the
very beginning, and then

00:05:38.760 --> 00:05:44.180
it's effect is captured by the
whole thing, so the scroll

00:05:44.180 --> 00:05:46.560
handler and all its effects.

00:05:46.560 --> 00:05:48.050
PAUL IRISH: So what I'm actually
going to do is I'm

00:05:48.050 --> 00:05:49.890
going to clear this out,
we'll switch over to

00:05:49.890 --> 00:05:53.960
Vertical, and record.

00:05:53.960 --> 00:05:57.530
Now, it's a little
bit different.

00:05:57.530 --> 00:05:58.870
ERIC BIDELMAN: Oh that's nice.

00:05:58.870 --> 00:06:02.450
PAUL IRISH: So I'm going to do
that once more, because I'm--

00:06:02.450 --> 00:06:03.700
here we go.

00:06:08.070 --> 00:06:11.350
So this is a much different
view, right?

00:06:11.350 --> 00:06:12.890
These are all frames.

00:06:12.890 --> 00:06:17.320
So one thing you'll notice is
along the top is a time from

00:06:17.320 --> 00:06:23.040
zero to four seconds, but if
we zoom in to the frames,

00:06:23.040 --> 00:06:26.270
you'll see that the time
scale is actually the

00:06:26.270 --> 00:06:28.430
length of each frame.

00:06:28.430 --> 00:06:33.580
And what's the optimized, best
frame rate that we could have?

00:06:33.580 --> 00:06:34.010
ERIC BIDELMAN: 60.

00:06:34.010 --> 00:06:34.640
BORIS SMUS: 60.

00:06:34.640 --> 00:06:35.760
PAUL IRISH: 60 frames
per second.

00:06:35.760 --> 00:06:37.260
And how many milliseconds
per frame is that?

00:06:37.260 --> 00:06:39.370
BORIS SMUS: 16.66 repeated.

00:06:39.370 --> 00:06:40.568
PAUL IRISH: Correct.

00:06:40.568 --> 00:06:42.062
ERIC BIDELMAN: Were you
a math major, Paul?

00:06:42.062 --> 00:06:43.058
This is good, man.

00:06:43.058 --> 00:06:44.560
PAUL IRISH: Blue ribbon.

00:06:44.560 --> 00:06:51.580
So in an ideal world, you have
16.6 milliseconds per frame,

00:06:51.580 --> 00:06:52.710
nothing more.

00:06:52.710 --> 00:06:55.910
And your entire everything
just happens inside 16

00:06:55.910 --> 00:06:58.340
milliseconds.

00:06:58.340 --> 00:07:01.070
Now, it happens that you
take more than this.

00:07:01.070 --> 00:07:04.150
And so we've just dived in,
and we can see that these

00:07:04.150 --> 00:07:09.290
frames are actually taking
40, 60, 100, 80--

00:07:09.290 --> 00:07:12.220
they're are a lot more
than just that 16.

00:07:12.220 --> 00:07:13.820
But we're able to see
exactly what is

00:07:13.820 --> 00:07:16.280
happening inside that time.

00:07:16.280 --> 00:07:19.180
So we have a scroll event and
it's doing a bunch of stuff,

00:07:19.180 --> 00:07:22.430
and so I can click in and see
what's going on inside that

00:07:22.430 --> 00:07:23.130
scroll event.

00:07:23.130 --> 00:07:29.230
So there's a lot of things
happening, but it looks like--

00:07:29.230 --> 00:07:31.415
ERIC BIDELMAN: Sorry, were
you projecting that?

00:07:31.415 --> 00:07:33.310
Are we projecting the
screen right now?

00:07:33.310 --> 00:07:38.070
PAUL IRISH: No, but we'll
switch over to that.

00:07:38.070 --> 00:07:43.590
So this is Scripts Panel, but
I'm just going to bring this

00:07:43.590 --> 00:07:48.740
up inside my Code Editor
so everyone can see it.

00:07:48.740 --> 00:07:53.010
We have a Scroll Handler that
is bound to Update, and in

00:07:53.010 --> 00:07:57.370
Update, we do all this magic.

00:07:57.370 --> 00:08:00.680
And that's good, but one thing
that I learned a few months

00:08:00.680 --> 00:08:03.410
ago is it's actually quite
bad to bind to

00:08:03.410 --> 00:08:05.210
either Scroll or Resize.

00:08:05.210 --> 00:08:09.620
Those events fire quite a bit,
and typically, you'll be

00:08:09.620 --> 00:08:13.990
binding those so that you can
update the UI of the page.

00:08:13.990 --> 00:08:19.230
But we have a first class API
designed for redrawing the UI

00:08:19.230 --> 00:08:22.880
of the page when the browser's
ready, which is called--

00:08:22.880 --> 00:08:24.250
ERIC BIDELMAN: RAF,
RequestAnimationFrame,

00:08:24.250 --> 00:08:24.890
everybody's best friend.

00:08:24.890 --> 00:08:26.765
PAUL IRISH: Yeah,
RequestAnimationFrame or RAF,

00:08:26.765 --> 00:08:27.920
as we abbreviate it.

00:08:27.920 --> 00:08:28.440
ERIC BIDELMAN: So let me
ask you a question.

00:08:28.440 --> 00:08:33.020
The Scroll and Resize, those
always fire quite more often

00:08:33.020 --> 00:08:36.730
than 16 FPS, right?

00:08:36.730 --> 00:08:37.320
No, or?

00:08:37.320 --> 00:08:38.289
PAUL IRISH: They fire a lot.

00:08:38.289 --> 00:08:40.120
ERIC BIDELMAN: They fire away
more than you should be

00:08:40.120 --> 00:08:42.150
updating UI, right?

00:08:42.150 --> 00:08:43.504
PAUL IRISH: Browser engineers
really just don't like it when

00:08:43.504 --> 00:08:45.430
you bind them.

00:08:45.430 --> 00:08:47.540
ERIC BIDELMAN: Users just don't
either, because that

00:08:47.540 --> 00:08:51.820
means there's jank, word of the
day, inside of your app.

00:08:51.820 --> 00:08:53.760
PAUL IRISH: So what we're going
to do is we're going to

00:08:53.760 --> 00:08:55.070
change the implementation.

00:08:55.070 --> 00:08:56.850
Instead of binding to
Scroll, we're just

00:08:56.850 --> 00:08:58.060
going to bind to RAF.

00:08:58.060 --> 00:09:01.090
So the browser's going to
optimize that to 60

00:09:01.090 --> 00:09:02.420
frames if it can.

00:09:02.420 --> 00:09:06.250
So I'm going to take this scroll
event, and I'm going to

00:09:06.250 --> 00:09:10.000
copy in a little
RequestAnimationFrame shim,

00:09:10.000 --> 00:09:20.080
and then I'm going to replace
the scroll with some RAF loop.

00:09:20.080 --> 00:09:23.950
So this is just a recursive
loop to call

00:09:23.950 --> 00:09:25.200
RequestAnimationFrame.

00:09:27.020 --> 00:09:29.180
ERIC BIDELMAN: So for those
not familiar with

00:09:29.180 --> 00:09:31.500
RequestAnimationFrame,
I'm not seeing a--

00:09:31.500 --> 00:09:32.740
so set time out, right?

00:09:32.740 --> 00:09:35.980
People use set time out, there's
a time that you recall

00:09:35.980 --> 00:09:37.240
your callback.

00:09:37.240 --> 00:09:38.760
That's not the case with
RequestAnimationFrame?

00:09:38.760 --> 00:09:41.310
Can you explain that
a little bit?

00:09:41.310 --> 00:09:43.795
PAUL IRISH: Well, it
is a callback.

00:09:43.795 --> 00:09:45.440
ERIC BIDELMAN: Yeah, but you're
not [? parsing ?] an

00:09:45.440 --> 00:09:47.240
explicit time that you're
calling the callback?

00:09:47.240 --> 00:09:47.630
PAUL IRISH: Yeah.

00:09:47.630 --> 00:09:50.120
You're just saying,
hey, browser, you

00:09:50.120 --> 00:09:51.490
take care of this.

00:09:51.490 --> 00:09:53.740
This is the function that I
want to be called, and you

00:09:53.740 --> 00:09:56.280
call it as much as you can.

00:09:56.280 --> 00:09:59.240
And one of the things that's
happening is the browser's

00:09:59.240 --> 00:10:00.030
starting to get smart.

00:10:00.030 --> 00:10:02.590
So if your callback starts to
take so much time, it's

00:10:02.590 --> 00:10:04.460
actually going to optimize
your animation

00:10:04.460 --> 00:10:06.040
for 30 frames a second.

00:10:06.040 --> 00:10:08.860
So you're always blowing past
the 16.6 milliseconds, but

00:10:08.860 --> 00:10:11.250
it's going to say, hey,
we're just going to be

00:10:11.250 --> 00:10:12.530
30 frames per second.

00:10:12.530 --> 00:10:16.110
Now, the big thing about these
30 and 60 numbers is that your

00:10:16.110 --> 00:10:18.980
monitor refreshes at 60 hertz.

00:10:18.980 --> 00:10:26.480
So Chrome is actually able to
make sure that your canvas, or

00:10:26.480 --> 00:10:30.180
your CSS, changes are being
painted to the screen and

00:10:30.180 --> 00:10:35.010
synchronized to the refresh
rate of the monitor, which

00:10:35.010 --> 00:10:39.250
means it's as smooth as it can
be, which is really powerful.

00:10:39.250 --> 00:10:43.960
So this is the best way to
get the best graphics.

00:10:43.960 --> 00:10:45.610
ERIC BIDELMAN: The other benefit
too is that if your

00:10:45.610 --> 00:10:49.070
app isn't visible to the user,
RequestAnimationFrame will

00:10:49.070 --> 00:10:51.710
stop calling that callback
altogether.

00:10:51.710 --> 00:10:54.910
So if the users can't see
something visually being

00:10:54.910 --> 00:10:57.310
updated on the page, then
there's no reason to waste

00:10:57.310 --> 00:10:58.440
that CPU [INAUDIBLE]

00:10:58.440 --> 00:11:00.290
extra calculation.

00:11:00.290 --> 00:11:00.600
That's another benefit.

00:11:00.600 --> 00:11:03.010
PAUL IRISH: So this is one of
the cool things on Chrome for

00:11:03.010 --> 00:11:05.740
Android is that Chrome for
Android is the first mobile

00:11:05.740 --> 00:11:08.290
browser that has
RequestAnimationFrame, so you

00:11:08.290 --> 00:11:10.420
have some [? cool ?]
canvas loop using

00:11:10.420 --> 00:11:13.720
RequestAnimationFrame and you
switch to another tab, that is

00:11:13.720 --> 00:11:14.760
not still running.

00:11:14.760 --> 00:11:16.010
[INAUDIBLE].

00:11:17.720 --> 00:11:21.310
BORIS SMUS: So here, you're
not bound to any event

00:11:21.310 --> 00:11:24.190
handler, so this will rerender
all the time, regardless of if

00:11:24.190 --> 00:11:25.330
you're [INAUDIBLE]
or not, right?

00:11:25.330 --> 00:11:27.370
PAUL IRISH: Correct.

00:11:27.370 --> 00:11:28.910
ERIC BIDELMAN: Do
we like that?

00:11:28.910 --> 00:11:31.410
PAUL IRISH: No.

00:11:31.410 --> 00:11:31.770
Good question.

00:11:31.770 --> 00:11:33.870
This is a very naive
implementation.

00:11:33.870 --> 00:11:39.670
In an ideal world, we would have
scroll kicks off this RAF

00:11:39.670 --> 00:11:43.420
loop, and then at some point,
we like to bounce the scroll

00:11:43.420 --> 00:11:46.320
event, kick off RAF, and then
cancel out RAF when the

00:11:46.320 --> 00:11:47.190
scrolling is done.

00:11:47.190 --> 00:11:48.270
BORIS SMUS: Yeah, so we want
a time out or something.

00:11:48.270 --> 00:11:48.860
PAUL IRISH: Yeah.

00:11:48.860 --> 00:11:51.080
So there's a way to kind of like
have Scroll and Resize

00:11:51.080 --> 00:11:54.520
kick off RAF but
work together.

00:11:54.520 --> 00:11:55.750
ERIC BIDELMAN: So the
call [INAUDIBLE]

00:11:55.750 --> 00:11:58.660
is similar to Set Timeout, you
can cancel, you can request,

00:11:58.660 --> 00:12:00.845
it's just that time difference
that you're not [? parsing ?]

00:12:00.845 --> 00:12:01.100
in.

00:12:01.100 --> 00:12:02.300
PAUL IRISH: Yeah.

00:12:02.300 --> 00:12:04.430
So we'll go back to
the timeline.

00:12:04.430 --> 00:12:10.000
And now that I have RAF in,
before, you kind of see all

00:12:10.000 --> 00:12:13.900
these uneven bars, but there's
not a lot of context.

00:12:13.900 --> 00:12:17.990
Now with RAF in, I've saved,
I'm going to refresh.

00:12:24.240 --> 00:12:28.710
And once it's in, I'm going to
record our new thing, and

00:12:28.710 --> 00:12:29.750
you'll see quite a bit of

00:12:29.750 --> 00:12:33.130
difference down in the timeline.

00:12:33.130 --> 00:12:34.790
So--

00:12:34.790 --> 00:12:35.090
ERIC BIDELMAN: Nice.

00:12:35.090 --> 00:12:36.890
PAUL IRISH: It's already
moving, and

00:12:36.890 --> 00:12:38.160
there's a lot of bars.

00:12:38.160 --> 00:12:42.590
So I'm not touching anything and
the bars are just going.

00:12:42.590 --> 00:12:45.570
And so you can see down here,
there's a lot of animation

00:12:45.570 --> 00:12:46.680
frames firing.

00:12:46.680 --> 00:12:53.350
So this is pretty cool, but what
we're able to see is that

00:12:53.350 --> 00:12:57.860
the browser is giving us an
indication of how long all

00:12:57.860 --> 00:13:00.030
these animation frames
are taking.

00:13:00.030 --> 00:13:02.830
And so we're able to see when
there's big spikes, that means

00:13:02.830 --> 00:13:05.760
that it's taking much longer
than it should and we're not

00:13:05.760 --> 00:13:07.310
able to hit our 60 frames
per second.

00:13:07.310 --> 00:13:10.090
So in an ideal world, 60 frames
per second means that

00:13:10.090 --> 00:13:14.191
all these bars are just
completely flat.

00:13:14.191 --> 00:13:15.800
But here, we have spikes.

00:13:15.800 --> 00:13:16.360
ERIC BIDELMAN: This is cool.

00:13:16.360 --> 00:13:17.570
So this is like a visual
representation of

00:13:17.570 --> 00:13:18.740
your code right now.

00:13:18.740 --> 00:13:18.930
PAUL IRISH: Yeah.

00:13:18.930 --> 00:13:21.370
And so these spikes
are jank, right?

00:13:21.370 --> 00:13:22.650
ERIC BIDELMAN: Yeah Let's
get rid of that.

00:13:22.650 --> 00:13:23.770
PAUL IRISH: So we're going
to kill that jank.

00:13:23.770 --> 00:13:28.500
So I'm just going to zoom in,
and you've really got to zoom

00:13:28.500 --> 00:13:30.980
in pretty close.

00:13:30.980 --> 00:13:33.350
So that looks pretty good.

00:13:33.350 --> 00:13:34.615
And I'm going to switch--

00:13:46.280 --> 00:13:49.520
OK, this looks pretty good.

00:13:49.520 --> 00:13:52.850
We have this animation
frame, it fires, it

00:13:52.850 --> 00:13:56.010
takes quite a while.

00:13:56.010 --> 00:13:57.190
And we're going to look
into what's going on.

00:13:57.190 --> 00:14:00.565
We got Recalculate Style
going on inside

00:14:00.565 --> 00:14:02.045
of that, a few layouts.

00:14:02.045 --> 00:14:05.890
We click into the Recalculate
Style, and it points to this

00:14:05.890 --> 00:14:09.530
line in particular, which is
Offset Top, Offset Height.

00:14:09.530 --> 00:14:11.030
ERIC BIDELMAN: Uh-oh.

00:14:11.030 --> 00:14:12.220
PAUL IRISH: Yeah.

00:14:12.220 --> 00:14:15.720
There's a few DOM properties
that cause a reflow, and

00:14:15.720 --> 00:14:19.420
that's essentially what's
happening, is that the browser

00:14:19.420 --> 00:14:22.440
has to say, hey, I don't know
what the Offset Top and Offset

00:14:22.440 --> 00:14:24.330
Height is, but I need to
recalculate the entire

00:14:24.330 --> 00:14:28.810
geometry of the page in order
to give you, the JavaScript,

00:14:28.810 --> 00:14:31.600
an accurate number for
these two things.

00:14:31.600 --> 00:14:33.120
And it has to do this--

00:14:33.120 --> 00:14:36.660
actually the loop that it's in
is for every single item in

00:14:36.660 --> 00:14:41.852
this list on every
single frame.

00:14:41.852 --> 00:14:42.326
BORIS SMUS: Wow.

00:14:42.326 --> 00:14:43.748
ERIC BIDELMAN: It seems
really wasteful.

00:14:43.748 --> 00:14:44.700
PAUL IRISH: Totally wasteful.

00:14:44.700 --> 00:14:47.150
It turns out that Offset Top and
Offset Height do not even

00:14:47.150 --> 00:14:49.950
change for any of these
for the entire thing.

00:14:49.950 --> 00:14:51.315
ERIC BIDELMAN: This is why
it's hard to be a web

00:14:51.315 --> 00:14:53.350
developer right here,
this sort of thing.

00:14:53.350 --> 00:14:54.600
PAUL IRISH: That's true.

00:14:56.660 --> 00:14:57.390
So let's see.

00:14:57.390 --> 00:15:01.020
I'll go to the next iteration.

00:15:01.020 --> 00:15:02.130
This is where this ended up.

00:15:02.130 --> 00:15:06.250
So I spent some time with this,
and we ended up here

00:15:06.250 --> 00:15:09.750
where we actually cache
some of these numbers.

00:15:09.750 --> 00:15:18.160
So the Scroll Top we cache,
and make sure that if the

00:15:18.160 --> 00:15:21.530
Scroll Top is not changed since
last time we went into

00:15:21.530 --> 00:15:25.800
this RAF loop, we just
quit immediately.

00:15:25.800 --> 00:15:28.800
And then we actually
do two loops.

00:15:28.800 --> 00:15:33.420
One loop we do to go and get the
Offset Tops, and then we

00:15:33.420 --> 00:15:36.860
do a second loop to go
make the changes.

00:15:36.860 --> 00:15:39.850
Now, the reason that we actually
do two loops is back

00:15:39.850 --> 00:15:42.490
on HTML5 Rocks a while ago, we
talked about reflows and

00:15:42.490 --> 00:15:45.430
optimizing for those, and we
talked about that pattern of

00:15:45.430 --> 00:15:48.130
Recalculate Style Layout,
Recalculate Style Layout.

00:15:48.130 --> 00:15:52.490
And here, we were asking for
what is the Offset Top, and

00:15:52.490 --> 00:15:56.850
immediately using Class List
to change the class of some

00:15:56.850 --> 00:15:58.360
DOM elements.

00:15:58.360 --> 00:16:00.680
And then we would just do that,
and then we'd do about

00:16:00.680 --> 00:16:02.550
100 per loop.

00:16:02.550 --> 00:16:04.990
And so that is totally
wasteful.

00:16:04.990 --> 00:16:07.420
So here, we're able to get all
of our information out of the

00:16:07.420 --> 00:16:10.740
DOM in one move, one pass, and
then make all of our changes

00:16:10.740 --> 00:16:14.540
in another pass, and that's
really the most optimized way

00:16:14.540 --> 00:16:15.550
to handle this.

00:16:15.550 --> 00:16:16.630
ERIC BIDELMAN: It's interesting
that something

00:16:16.630 --> 00:16:18.210
like two loops, you wouldn't--

00:16:18.210 --> 00:16:21.490
[INAUDIBLE] two loops would be
more efficient, oftentimes,

00:16:21.490 --> 00:16:24.340
than touching the DOM like you
would in single loop, but

00:16:24.340 --> 00:16:25.880
maybe that's something you
have to do, you have to

00:16:25.880 --> 00:16:26.905
consider that, right?

00:16:26.905 --> 00:16:28.250
DOM is the bottleneck here.

00:16:28.250 --> 00:16:30.180
PAUL IRISH: DOM is the
bottleneck, not two loops.

00:16:30.180 --> 00:16:33.970
I mean, I could make it do 10
loops, and that'd probably

00:16:33.970 --> 00:16:37.000
still be more effective than
the back and forth

00:16:37.000 --> 00:16:37.380
inside of the loop.

00:16:37.380 --> 00:16:39.060
ERIC BIDELMAN: [INAUDIBLE]
calculate a Fibonacci sequence

00:16:39.060 --> 00:16:40.065
in there someplace
or something?

00:16:40.065 --> 00:16:42.410
BORIS SMUS: Basically what
you're doing is you're getting

00:16:42.410 --> 00:16:44.907
the updates and then doing
the renders separately.

00:16:44.907 --> 00:16:46.340
PAUL IRISH: Yeah, exactly.

00:16:46.340 --> 00:16:49.260
BORIS SMUS: But how does a web
developer know which of these

00:16:49.260 --> 00:16:50.600
things cause a reflow?

00:16:50.600 --> 00:16:51.960
ERIC BIDELMAN: I was just
thinking of that.

00:16:51.960 --> 00:16:53.860
Like is there a best
practices?

00:16:53.860 --> 00:16:54.680
BORIS SMUS: [INAUDIBLE].

00:16:54.680 --> 00:16:56.420
PAUL IRISH: OK, so
that's fair.

00:16:56.420 --> 00:17:02.580
So one, you could be like, DOM
Properties That Cause Reflow.

00:17:02.580 --> 00:17:04.500
Just use your favorite search
engine and ask.

00:17:07.930 --> 00:17:12.040
The best resource on this
is on this site.

00:17:12.040 --> 00:17:15.050
This is actually a Chrome
engineer, Tony.

00:17:15.050 --> 00:17:18.680
And he just looked into the Web
Kit source and found out

00:17:18.680 --> 00:17:21.310
that these are all the
properties, these are all the

00:17:21.310 --> 00:17:25.180
methods, and all these things
force the browser to go ask

00:17:25.180 --> 00:17:28.924
and they all force a
reflow, if you ask

00:17:28.924 --> 00:17:30.230
for all these things.

00:17:30.230 --> 00:17:35.650
So if you know that,
because you do.

00:17:35.650 --> 00:17:36.615
ERIC BIDELMAN: Step one.

00:17:36.615 --> 00:17:38.540
PAUL IRISH: And then you're over
here, you see Recalculate

00:17:38.540 --> 00:17:40.620
Style Layout, Recalculate
Style, and this actually

00:17:40.620 --> 00:17:42.980
pointing to a line number,
a file and line number.

00:17:42.980 --> 00:17:45.580
And I click 44, and
it highlights this

00:17:45.580 --> 00:17:47.800
line 44 right here.

00:17:47.800 --> 00:17:50.810
It's a pretty good indication.

00:17:50.810 --> 00:17:54.350
And so if I move over, this is
the new and updated one.

00:17:57.280 --> 00:18:00.070
And I'll do a timeline
recording of this.

00:18:08.100 --> 00:18:09.680
Good.

00:18:09.680 --> 00:18:14.140
Now, it's hard just to show on
the screen cast, but we're a

00:18:14.140 --> 00:18:17.340
little bit smoother,
and inside--

00:18:17.340 --> 00:18:19.250
yes, that's what I wanted.

00:18:19.250 --> 00:18:21.620
So we only have a single
Recalc Style and then a

00:18:21.620 --> 00:18:24.290
layout, as opposed to back and
forth and back and forth.

00:18:24.290 --> 00:18:27.420
So that's exactly what we want
to be able to see, is that

00:18:27.420 --> 00:18:31.910
we're only getting a single
one of each per frame.

00:18:31.910 --> 00:18:33.135
That is optimal.

00:18:33.135 --> 00:18:33.910
It's hard to get.

00:18:33.910 --> 00:18:35.000
ERIC BIDELMAN: So remind us what
we were seeing before.

00:18:35.000 --> 00:18:40.150
We were seeing orange mixed in
with purple, or were we seeing

00:18:40.150 --> 00:18:41.000
higher bars?

00:18:41.000 --> 00:18:48.290
PAUL IRISH: Yeah so yellow and
orange is script, and then

00:18:48.290 --> 00:18:49.550
purple is rendering.

00:18:49.550 --> 00:18:51.700
ERIC BIDELMAN: That's the
browser doing its thing,

00:18:51.700 --> 00:18:52.250
whatever [INAUDIBLE]?

00:18:52.250 --> 00:18:53.340
PAUL IRISH: Yeah.

00:18:53.340 --> 00:18:55.870
And so it's hard to sometimes
say what the rendering is,

00:18:55.870 --> 00:18:58.620
whereas the script is basically
always your code.

00:18:58.620 --> 00:19:01.460
But when we see this purple back
and forth back and forth

00:19:01.460 --> 00:19:05.170
Recalc Style Layout, that's
just a bad idea.

00:19:05.170 --> 00:19:08.260
So you're able to kind of do
these hovers here and see that

00:19:08.260 --> 00:19:12.720
we have a call stack, we're in
Update Anim Loop, and get an

00:19:12.720 --> 00:19:14.870
idea of where this
is happening.

00:19:14.870 --> 00:19:17.310
So the cool thing here is that
we're able to get some

00:19:17.310 --> 00:19:21.420
information from the Dev Tools
on what exactly and where

00:19:21.420 --> 00:19:24.080
exactly we can optimize
better.

00:19:24.080 --> 00:19:25.140
ERIC BIDELMAN: That's great that
I don't have to memorize

00:19:25.140 --> 00:19:28.136
all those properties, the Dev
Tools can help me there.

00:19:28.136 --> 00:19:31.570
Can you go back to the
timeline again?

00:19:31.570 --> 00:19:34.740
I just want to show people
that-- we talked a little

00:19:34.740 --> 00:19:36.910
about this before, but
RequestAnimationFrame is

00:19:36.910 --> 00:19:39.900
continuing to fire, regardless
if you're scrolling these

00:19:39.900 --> 00:19:40.640
lists or not.

00:19:40.640 --> 00:19:43.030
So it probably is one
of these best

00:19:43.030 --> 00:19:44.460
practices that you consider.

00:19:44.460 --> 00:19:46.740
If the user's not engaging
with your page, then you

00:19:46.740 --> 00:19:50.580
should probably cancel that and
not waste those callbacks.

00:19:50.580 --> 00:19:51.830
PAUL IRISH: Yeah.

00:19:55.320 --> 00:19:57.750
The quicker that you're able
to say, I don't need what's

00:19:57.750 --> 00:20:01.140
going to happen inside this RAF
callback to happen, and

00:20:01.140 --> 00:20:04.260
just cancel out of that
loop, the better.

00:20:04.260 --> 00:20:06.150
And so that's [INAUDIBLE] we
ended up in this loop.

00:20:06.150 --> 00:20:06.500
BORIS SMUS: Right.

00:20:06.500 --> 00:20:08.367
But of course, if you
background it, it's

00:20:08.367 --> 00:20:09.480
not going to fire.

00:20:09.480 --> 00:20:09.640
PAUL IRISH: Yeah.

00:20:09.640 --> 00:20:11.980
And if you're in another tab,
you're totally good.

00:20:15.110 --> 00:20:20.760
So you should Google for this
demo and check it out, because

00:20:20.760 --> 00:20:27.640
it's got a lot of other
community additions since the

00:20:27.640 --> 00:20:28.670
last week or so.

00:20:28.670 --> 00:20:30.760
ERIC BIDELMAN: It's called Silly
List Scroll Effects?

00:20:30.760 --> 00:20:31.070
PAUL IRISH: Yeah.

00:20:31.070 --> 00:20:35.130
I think it's actually since
been named to stroll.js.

00:20:35.130 --> 00:20:37.240
ERIC BIDELMAN: Of course
there's a .js for it.

00:20:37.240 --> 00:20:39.075
PAUL IRISH: Of course.

00:20:39.075 --> 00:20:40.960
ERIC BIDELMAN: That
was pretty rad.

00:20:40.960 --> 00:20:44.070
Unfortunately, the screen, the
hangout doesn't do it justice.

00:20:44.070 --> 00:20:45.580
PAUL IRISH: So go
check it out.

00:20:45.580 --> 00:20:49.000
And if you want, go find
his GetHub [? repo ?]

00:20:49.000 --> 00:20:52.080
and revert back to the very
original first commit, and

00:20:52.080 --> 00:20:53.960
then you'll be able to see the
difference between the

00:20:53.960 --> 00:20:56.520
original one with a considerable
amount of jank,

00:20:56.520 --> 00:20:59.040
and the new ones, which
are smooth.

00:20:59.040 --> 00:21:00.765
ERIC BIDELMAN: We
don't like jank.

00:21:00.765 --> 00:21:02.170
That's cool, man.

00:21:02.170 --> 00:21:05.540
Vertical Timeline, awesome.

00:21:05.540 --> 00:21:07.950
Again, in the Dev Tools
Experiments, right?

00:21:07.950 --> 00:21:09.830
So in by default yet, but--

00:21:09.830 --> 00:21:11.300
PAUL IRISH: Yep.

00:21:11.300 --> 00:21:11.970
BORIS SMUS: And this
is Canary, right?

00:21:11.970 --> 00:21:12.240
PAUL IRISH: Yeah.

00:21:12.240 --> 00:21:13.900
I'm trying this in Canary.

00:21:13.900 --> 00:21:16.900
And you have to turn on two
separate experimental

00:21:16.900 --> 00:21:17.730
flags to get it.

00:21:17.730 --> 00:21:20.000
But it'll probably be coming
out into the main release

00:21:20.000 --> 00:21:21.250
pretty soon.

00:21:25.550 --> 00:21:30.000
Boris, do you want to show off
your cool device, device.js?

00:21:30.000 --> 00:21:30.780
BORIS SMUS: Sure, sure.

00:21:30.780 --> 00:21:31.940
ERIC BIDELMAN: What did
you make, Boris?

00:21:31.940 --> 00:21:33.170
BORIS SMUS: I made a library.

00:21:33.170 --> 00:21:35.880
PAUL IRISH: Yeah?

00:21:35.880 --> 00:21:36.660
BORIS SMUS: It's called--

00:21:36.660 --> 00:21:39.440
well, let me talk about maybe
briefly what sort of

00:21:39.440 --> 00:21:40.690
spurred this on.

00:21:43.910 --> 00:21:47.640
So basically, you've probably
heard of Responsive Design.

00:21:47.640 --> 00:21:48.375
Yeah?

00:21:48.375 --> 00:21:50.220
You guys heard of Responsive
Design?

00:21:50.220 --> 00:21:52.520
ERIC BIDELMAN: I have. But
you could remind me.

00:21:52.520 --> 00:22:00.650
BORIS SMUS: So it's actually
pretty broad, but the basic

00:22:00.650 --> 00:22:04.370
idea of it is you use JSS Media
Queries to check the

00:22:04.370 --> 00:22:08.920
width of your device, and style
the page appropriately.

00:22:08.920 --> 00:22:10.950
So if you have a really
large screen, you

00:22:10.950 --> 00:22:11.880
make it all fit well.

00:22:11.880 --> 00:22:14.886
If you have a small screen, you
make it compress down and

00:22:14.886 --> 00:22:15.720
do the right thing.

00:22:15.720 --> 00:22:20.840
So there's a nice gallery
of pages that do this.

00:22:20.840 --> 00:22:22.470
If you go to Mediaquery.--

00:22:26.180 --> 00:22:29.410
could you do that, Eric?

00:22:29.410 --> 00:22:32.030
Please type.

00:22:32.030 --> 00:22:35.170
I'll just turn the screen
share back on.

00:22:35.170 --> 00:22:40.580
Yes, so mediaquery.es is a nice
gallery of responsive--

00:22:40.580 --> 00:22:43.655
oh, it's actually one of those
funky Delicious URLs.

00:22:46.160 --> 00:22:48.310
Probably not this one.

00:22:48.310 --> 00:22:50.480
Here.

00:22:50.480 --> 00:22:52.310
ERIC BIDELMAN: Boris, you have
to show and tell your

00:22:52.310 --> 00:22:55.170
own show and tell.

00:22:55.170 --> 00:22:57.920
BORIS SMUS: So this page is
a gallery of a bunch of

00:22:57.920 --> 00:22:59.765
Responsively Designed sites.

00:22:59.765 --> 00:23:02.960
And you can see if I resize
that this site itself is

00:23:02.960 --> 00:23:04.630
responsively designed.

00:23:04.630 --> 00:23:10.770
But if I go to a particular
example, it also has this

00:23:10.770 --> 00:23:16.600
feature where once it loads,
you'll see that as I resize

00:23:16.600 --> 00:23:20.670
the browser, the page starts
flowing in different ways.

00:23:20.670 --> 00:23:26.290
And what's happening basically
is there's a way to turn on

00:23:26.290 --> 00:23:31.240
device width-specific CSS.

00:23:31.240 --> 00:23:33.150
So that's great, right, if you
want to customize the way

00:23:33.150 --> 00:23:34.290
things look.

00:23:34.290 --> 00:23:37.600
But if you have like an m.
site or a specific tablet

00:23:37.600 --> 00:23:39.765
site, this doesn't really
address anything.

00:23:39.765 --> 00:23:42.060
And there's good reasons for
doing that, like you might

00:23:42.060 --> 00:23:44.700
want to have better
performance, like

00:23:44.700 --> 00:23:48.030
mobile-specific performance
optimizations, for example, or

00:23:48.030 --> 00:23:49.820
you might want to load
custom JavaScript.

00:23:49.820 --> 00:23:51.340
PAUL IRISH: You're going to
have different features,

00:23:51.340 --> 00:23:52.920
depending on--

00:23:52.920 --> 00:23:55.600
you're not going to have a drag
and drop file upload on

00:23:55.600 --> 00:23:57.120
your phone site.

00:23:57.120 --> 00:23:58.000
BORIS SMUS: Right.

00:23:58.000 --> 00:24:01.290
So there's good reasons to use
responsive design, but there's

00:24:01.290 --> 00:24:02.640
also good reasons
not to use it,

00:24:02.640 --> 00:24:04.540
depending on your situation.

00:24:04.540 --> 00:24:08.830
So there's a bunch of approaches
you can take.

00:24:08.830 --> 00:24:12.200
The common one is server side
user agent detection.

00:24:12.200 --> 00:24:14.554
So things like [? Wirfel ?]

00:24:14.554 --> 00:24:17.060
you can just load it up here.

00:24:17.060 --> 00:24:18.310
[? Wirfel. ?]

00:24:20.010 --> 00:24:22.060
It's a really old school
project, but still being

00:24:22.060 --> 00:24:23.740
maintained quite actively.

00:24:23.740 --> 00:24:26.280
It goes back to the
days of WAP.

00:24:26.280 --> 00:24:33.150
So if you guys remember, WAP was
the precursor to HTML on

00:24:33.150 --> 00:24:34.780
mobile devices.

00:24:34.780 --> 00:24:38.560
Anyway, these guys have a huge
database of devices and what

00:24:38.560 --> 00:24:40.150
their capabilities
are, essentially.

00:24:40.150 --> 00:24:45.140
There's similar other projects,
like Device Atlas,

00:24:45.140 --> 00:24:50.170
and this is all kind of dark
secrets, like black magic-type

00:24:50.170 --> 00:24:54.020
stuff, because there's just so
much complexity with User

00:24:54.020 --> 00:24:55.320
Agent Parsing to do it right.

00:24:57.910 --> 00:25:00.170
ERIC BIDELMAN: Can I ask you a
really important question?

00:25:00.170 --> 00:25:00.590
BORIS SMUS: Sure.

00:25:00.590 --> 00:25:00.950
ERIC BIDELMAN: So User
Agent Detection.

00:25:00.950 --> 00:25:03.710
There's a lot of people that
say it's the devil,

00:25:03.710 --> 00:25:05.202
people say it's good.

00:25:05.202 --> 00:25:09.030
What's your opinion on it, and
should we be doing it in 2012?

00:25:09.030 --> 00:25:09.890
BORIS SMUS: So that's
a good question.

00:25:09.890 --> 00:25:13.890
I think the debate is still
pretty much open for now.

00:25:13.890 --> 00:25:19.030
The main reason is it's still
so common is on the server

00:25:19.030 --> 00:25:21.440
side, there's basically nothing
except for the user

00:25:21.440 --> 00:25:24.140
agent that you can know about
the browser that's hitting

00:25:24.140 --> 00:25:25.420
you, right?

00:25:25.420 --> 00:25:27.400
So that's all you got
on the server.

00:25:27.400 --> 00:25:30.770
And for performance reasons, you
want to do things on the

00:25:30.770 --> 00:25:34.950
server in the initial loading
stage, right?

00:25:34.950 --> 00:25:37.180
Like on a client, if you're
doing things like

00:25:37.180 --> 00:25:41.750
feature-based detection to load
a specific layout, you're

00:25:41.750 --> 00:25:44.560
inevitably doing a redirect,
right, or some sort of dynamic

00:25:44.560 --> 00:25:45.810
script loading.

00:25:45.810 --> 00:25:48.510
So that's going to have some
sort of performance hit.

00:25:48.510 --> 00:25:49.680
PAUL IRISH: Some latency
cost, yes.

00:25:49.680 --> 00:25:53.360
BORIS SMUS: Some latency cost.
So Device JS actually takes

00:25:53.360 --> 00:25:55.290
that exact approach.

00:25:55.290 --> 00:25:57.500
So it does client side detection
based on media

00:25:57.500 --> 00:26:01.170
queries, which is, for browsers
that support media

00:26:01.170 --> 00:26:05.660
queries, much nicer than just
relying on the server.

00:26:05.660 --> 00:26:09.010
So you could say things like,
if I have this particular

00:26:09.010 --> 00:26:14.410
width, load this version
of my web app.

00:26:14.410 --> 00:26:21.890
So of course, the trade-off is
performance, but you end up

00:26:21.890 --> 00:26:25.880
having much more future-proof
solution that's based on

00:26:25.880 --> 00:26:28.150
feature detection, similar
to Modernizer.

00:26:28.150 --> 00:26:30.680
So this is Device
JS on GetHub.

00:26:30.680 --> 00:26:31.360
ERIC BIDELMAN: [INAUDIBLE]?

00:26:31.360 --> 00:26:35.090
BORIS SMUS: It's right here.

00:26:35.090 --> 00:26:43.200
And basically, the idea is
upfront, you can use Follow

00:26:43.200 --> 00:26:44.480
Semantic approach.

00:26:44.480 --> 00:26:49.130
Here, you could say use the Link
Rel Alternate tag, which

00:26:49.130 --> 00:26:51.880
sort of specifies the list of
all the versions that your web

00:26:51.880 --> 00:26:54.360
app should specify.

00:26:54.360 --> 00:26:56.780
And this is great
for crawlers.

00:26:56.780 --> 00:26:59.200
It's also just a generally
a best practice that

00:26:59.200 --> 00:27:02.870
semantically says, this page
has multiple versions.

00:27:02.870 --> 00:27:05.590
PAUL IRISH: That's really--

00:27:05.590 --> 00:27:09.400
if you have multiple versions
of your site or app, this is

00:27:09.400 --> 00:27:12.280
the best way to semantically
represent that.

00:27:12.280 --> 00:27:13.660
ERIC BIDELMAN: So I haven't
really seen this before.

00:27:13.660 --> 00:27:14.150
Is this a new thing?

00:27:14.150 --> 00:27:15.910
Are people doing this?

00:27:15.910 --> 00:27:17.340
BORIS SMUS: It's really
old, actually.

00:27:17.340 --> 00:27:17.800
PAUL IRISH: So yeah.

00:27:17.800 --> 00:27:21.150
If you look in the spec,
for like HTML4 spec--

00:27:21.150 --> 00:27:22.265
ERIC BIDELMAN: Oh, it's
back to four.

00:27:22.265 --> 00:27:23.905
PAUL IRISH: Yeah, we'll
go back to four.

00:27:23.905 --> 00:27:25.100
It's in Five, too.

00:27:25.100 --> 00:27:27.580
I don't want to be too retro.

00:27:27.580 --> 00:27:35.020
But Link Rel Alternate means,
this document is available for

00:27:35.020 --> 00:27:36.920
a different media type.

00:27:36.920 --> 00:27:40.110
And the media type is defined in
that attribute, and it's a

00:27:40.110 --> 00:27:40.520
media query.

00:27:40.520 --> 00:27:40.880
ERIC BIDELMAN: Right.

00:27:40.880 --> 00:27:42.230
PAUL IRISH: So that's
what we're doing.

00:27:42.230 --> 00:27:44.330
ERIC BIDELMAN: It's great that
we're using these old

00:27:44.330 --> 00:27:48.715
paradigms and semantics that
have been out for a while but

00:27:48.715 --> 00:27:49.680
are basically new.

00:27:49.680 --> 00:27:51.960
BORIS SMUS: There's some
new stuff here too.

00:27:51.960 --> 00:27:54.220
So in the old school
days, you would say

00:27:54.220 --> 00:27:56.120
something like handheld.

00:27:56.120 --> 00:27:57.490
There used to be this
media query

00:27:57.490 --> 00:28:00.650
type and it was handheld.

00:28:00.650 --> 00:28:03.870
That kind of is not really well
supported, didn't really

00:28:03.870 --> 00:28:05.150
work so well.

00:28:05.150 --> 00:28:08.730
So one thing you'll notice here
that you probably haven't

00:28:08.730 --> 00:28:10.260
seen is this.

00:28:10.260 --> 00:28:15.150
And what I'm doing here is
creating a media query that

00:28:15.150 --> 00:28:18.770
should exist. It doesn't
currently exist, except for in

00:28:18.770 --> 00:28:21.430
Mozilla with a Moz Touch-Enabled
flag.

00:28:21.430 --> 00:28:24.940
And basically, the Device.js
library just makes

00:28:24.940 --> 00:28:26.120
that happen for you.

00:28:26.120 --> 00:28:31.040
PAUL IRISH: So as far as what
Device.js does, it reads these

00:28:31.040 --> 00:28:33.430
Link tags, and does something?

00:28:33.430 --> 00:28:33.740
BORIS SMUS: Yeah.

00:28:33.740 --> 00:28:37.370
So the idea is, you include
Device.js here, and it'll

00:28:37.370 --> 00:28:39.720
parse the Link tags
in your page.

00:28:39.720 --> 00:28:44.040
And given these media
attributes, do sort of the

00:28:44.040 --> 00:28:47.840
right thing, the right thing
being it redirects to--

00:28:47.840 --> 00:28:51.730
so first it checks which version
you should have. And

00:28:51.730 --> 00:28:54.380
you would have these links in
all the versions of your page.

00:28:54.380 --> 00:28:58.190
So it checks which version you
should have, and it compares

00:28:58.190 --> 00:29:00.620
to your current version based
on the URL that you're

00:29:00.620 --> 00:29:01.440
currently on.

00:29:01.440 --> 00:29:05.070
And if you need to redirect,
then Device.js

00:29:05.070 --> 00:29:05.770
will redirect you.

00:29:05.770 --> 00:29:06.970
And that's it.

00:29:06.970 --> 00:29:09.990
ERIC BIDELMAN: So to clarify,
if I hit the Desktop landing

00:29:09.990 --> 00:29:12.080
page on my mobile device or
something, it's going to

00:29:12.080 --> 00:29:15.210
redirect me to the mobile
version that I'd specified

00:29:15.210 --> 00:29:16.195
with Device.js?

00:29:16.195 --> 00:29:17.280
BORIS SMUS: Yes.

00:29:17.280 --> 00:29:19.880
So I can show you
a quick demo.

00:29:19.880 --> 00:29:23.380
So here, I've got
a sample app.

00:29:23.380 --> 00:29:27.640
It's linked to from the GetHub
page, but the default landing

00:29:27.640 --> 00:29:30.960
page is just a redirector.

00:29:30.960 --> 00:29:33.710
So if I go to Sample,
I get redirected

00:29:33.710 --> 00:29:34.630
to the desktop page.

00:29:34.630 --> 00:29:41.500
If I try going to the Phone
page, I'm getting redirected

00:29:41.500 --> 00:29:42.890
to the Desktop page.

00:29:42.890 --> 00:29:46.750
And the same thing will
happen on mobile.

00:29:46.750 --> 00:29:51.820
So here's my little
setup here.

00:29:51.820 --> 00:29:54.860
And you can see, it's
the same exact URL.

00:29:54.860 --> 00:30:01.830
And if I go to the Root
page, I get redirected

00:30:01.830 --> 00:30:03.730
to the phone version.

00:30:03.730 --> 00:30:06.160
And this is all based on the
media queries that are

00:30:06.160 --> 00:30:09.230
specified in the Link
alternates.

00:30:09.230 --> 00:30:18.020
So I can also go to
the Desktop page.

00:30:18.020 --> 00:30:20.800
Whoa, whoops.

00:30:20.800 --> 00:30:22.050
This is interesting.

00:30:24.940 --> 00:30:27.090
So anyway, that should
definitely work.

00:30:27.090 --> 00:30:29.480
I'm not sure what
happened there.

00:30:29.480 --> 00:30:30.540
So that's the idea.

00:30:30.540 --> 00:30:34.980
And of course in some cases, you
might want to override the

00:30:34.980 --> 00:30:36.730
version that you want
to load, right?

00:30:36.730 --> 00:30:41.250
Like for development, or
generally, you probably want

00:30:41.250 --> 00:30:43.820
to provide a way to specify
the version

00:30:43.820 --> 00:30:45.240
that you want to use.

00:30:45.240 --> 00:30:46.870
PAUL IRISH: So if you want to
override it and be like, you

00:30:46.870 --> 00:30:49.270
know what, I thank you very much
for bringing me to the

00:30:49.270 --> 00:30:51.800
phone view, but I want
the desktop view.

00:30:51.800 --> 00:30:52.030
BORIS SMUS: Right.

00:30:52.030 --> 00:30:54.290
So that's not to say that you
shouldn't provide the

00:30:54.290 --> 00:30:58.380
functionality that your users
need on all of your versions,

00:30:58.380 --> 00:31:00.670
but it's nice to have
an override.

00:31:00.670 --> 00:31:07.660
So I've basically in this little
demo I provided, links.

00:31:07.660 --> 00:31:11.680
And if you could show the
screen share of this.

00:31:11.680 --> 00:31:13.680
So there's a phone version
and a tablet version.

00:31:13.680 --> 00:31:19.170
And you can see if I go here,
what's basically happening is

00:31:19.170 --> 00:31:24.220
there's a Device Equals thing
in the URL you can see.

00:31:24.220 --> 00:31:24.660
ERIC BIDELMAN: Force equals.

00:31:24.660 --> 00:31:26.780
BORIS SMUS: You can see Device
Equals Desktop here.

00:31:26.780 --> 00:31:27.780
ERIC BIDELMAN: Oh, I see.

00:31:27.780 --> 00:31:31.680
BORIS SMUS: And then when you
click that particular version,

00:31:31.680 --> 00:31:34.460
then it'll redirect you with
Force Equals One, so that it

00:31:34.460 --> 00:31:37.380
doesn't attempt to redirect
you again.

00:31:37.380 --> 00:31:39.290
ERIC BIDELMAN: Could you kill
that with a Push [? state, ?]

00:31:39.290 --> 00:31:41.212
replace that?

00:31:41.212 --> 00:31:44.110
BORIS SMUS: Um, you could.

00:31:44.110 --> 00:31:45.240
Definitely could.

00:31:45.240 --> 00:31:47.480
PAUL IRISH: So using
just your API?

00:31:47.480 --> 00:31:48.140
BORIS SMUS: [INAUDIBLE].

00:31:48.140 --> 00:31:49.390
Could totally do this.

00:31:51.580 --> 00:31:54.440
That's a good idea.

00:31:54.440 --> 00:31:55.690
ERIC BIDELMAN: So can
you just quickly

00:31:55.690 --> 00:31:57.690
explain again the touch?

00:31:57.690 --> 00:31:58.940
So the Nonstandard
Touch-Enabled.

00:32:01.470 --> 00:32:04.050
So basically, that's saying if
I'm on the screen and I don't

00:32:04.050 --> 00:32:07.150
have touch capability, then
show me the desktop?

00:32:07.150 --> 00:32:07.460
BORIS SMUS: Yeah.

00:32:07.460 --> 00:32:08.571
ERIC BIDELMAN: Is there ever the
case where you're going to

00:32:08.571 --> 00:32:11.150
be using Touch-Enabled One for
something like the tablet or

00:32:11.150 --> 00:32:13.840
phone, or would Media
Query suffice?

00:32:13.840 --> 00:32:14.250
BORIS SMUS: Right.

00:32:14.250 --> 00:32:18.630
So the beauty of this approach
is it basically scales to any

00:32:18.630 --> 00:32:22.970
sort of device or form factor
that you might have. So if you

00:32:22.970 --> 00:32:31.740
imagine some sort of ocular
implant thing, like something

00:32:31.740 --> 00:32:34.640
completely crazy, all you need
is you implement the media

00:32:34.640 --> 00:32:37.465
query for it, and then you
add your Link Alternate.

00:32:37.465 --> 00:32:40.815
PAUL IRISH: I wonder if Google
Glass will have a media query

00:32:40.815 --> 00:32:43.755
that's appropriate for it.

00:32:43.755 --> 00:32:45.005
[INTERPOSING VOICES]

00:32:50.330 --> 00:32:52.090
ERIC BIDELMAN: This
is cool, man.

00:32:52.090 --> 00:32:54.880
PAUL IRISH: So right now, you've
created support for

00:32:54.880 --> 00:32:56.050
Touch-Enabled.

00:32:56.050 --> 00:32:59.280
I wonder if there's room for
more of that in the future.

00:32:59.280 --> 00:33:02.630
BORIS SMUS: Yeah, that's kind of
my hope here, that we don't

00:33:02.630 --> 00:33:05.290
need to create these things
but they just exist.

00:33:05.290 --> 00:33:06.000
ERIC BIDELMAN: Boris,
are you trying to

00:33:06.000 --> 00:33:07.340
push the web forward?

00:33:07.340 --> 00:33:09.990
BORIS SMUS: Actually
yes, Eric, I am.

00:33:09.990 --> 00:33:10.440
ERIC BIDELMAN: That's
fantastic.

00:33:10.440 --> 00:33:11.440
BORIS SMUS: It's what
we do here.

00:33:11.440 --> 00:33:14.070
ERIC BIDELMAN: One library
at a time.

00:33:14.070 --> 00:33:17.200
BORIS SMUS: So there's a CR bug
that's linked to from the

00:33:17.200 --> 00:33:18.240
GetHub page.

00:33:18.240 --> 00:33:20.870
You should probably go
to this and star it.

00:33:20.870 --> 00:33:22.580
Only nine people have
starred it.

00:33:22.580 --> 00:33:24.375
That's sad.

00:33:24.375 --> 00:33:29.240
Can we have like 10 or 12 people
star it right now?

00:33:29.240 --> 00:33:29.660
BORIS SMUS: Awesome.

00:33:29.660 --> 00:33:30.280
Thanks, guys.

00:33:30.280 --> 00:33:30.810
ERIC BIDELMAN: This is
a great feature.

00:33:30.810 --> 00:33:34.270
This should be enabled by
default in browsers for sure.

00:33:34.270 --> 00:33:36.357
You said Firefox has this
if you enable it

00:33:36.357 --> 00:33:37.280
on a flag or something?

00:33:37.280 --> 00:33:37.560
BORIS SMUS: Yeah.

00:33:37.560 --> 00:33:41.720
So Firefox, I think it
should be in the

00:33:41.720 --> 00:33:43.590
stable version, I believe.

00:33:43.590 --> 00:33:44.840
I haven't tested.

00:33:47.440 --> 00:33:49.770
So even in Firefox, I'm not
falling back to the Moz

00:33:49.770 --> 00:33:53.840
[INAUDIBLE], I'm just using
modernizer, actually, to check

00:33:53.840 --> 00:33:55.500
for touch support.

00:33:55.500 --> 00:33:58.070
So that's basically
how it works.

00:33:58.070 --> 00:34:00.786
I know there's some caveats,
some strange configurations

00:34:00.786 --> 00:34:04.430
under which it won't.

00:34:04.430 --> 00:34:05.140
ERIC BIDELMAN: By the
way, speaking of

00:34:05.140 --> 00:34:05.870
Modernizer and touch.

00:34:05.870 --> 00:34:08.090
I know I asked you this question
the other day, but

00:34:08.090 --> 00:34:12.239
this will be valuable
for viewers.

00:34:12.239 --> 00:34:14.380
Dev Tools has the ability
to simulate

00:34:14.380 --> 00:34:15.290
touch events, correct?

00:34:15.290 --> 00:34:15.830
BORIS SMUS: True.

00:34:15.830 --> 00:34:18.896
ERIC BIDELMAN: Does Modernizer
detect those as well?

00:34:18.896 --> 00:34:20.800
PAUL IRISH: Why you
gotta do that?

00:34:20.800 --> 00:34:22.409
ERIC BIDELMAN: I was
pointing that out.

00:34:22.409 --> 00:34:24.350
I ran into the issue, and maybe
somebody else is having

00:34:24.350 --> 00:34:26.874
the same problem.

00:34:26.874 --> 00:34:28.880
BORIS SMUS: Actually,
can we show that?

00:34:28.880 --> 00:34:31.199
PAUL IRISH: This is really handy
if you're doing mobile

00:34:31.199 --> 00:34:33.520
development.

00:34:33.520 --> 00:34:35.770
BORIS SMUS: This isn't
on Canary, though.

00:34:35.770 --> 00:34:36.920
PAUL IRISH: You mean
you don't have it?

00:34:36.920 --> 00:34:38.690
BORIS SMUS: I have it, but
I'm not running it.

00:34:41.719 --> 00:34:42.600
PAUL IRISH: Well.

00:34:42.600 --> 00:34:43.105
One second.

00:34:43.105 --> 00:34:44.355
We'll try--

00:34:46.760 --> 00:34:49.699
BORIS SMUS: I don't think Touch
Simulation [INAUDIBLE].

00:34:49.699 --> 00:34:51.800
PAUL IRISH: That's possible.

00:34:51.800 --> 00:34:54.425
ERIC BIDELMAN: Well, you could
show your laptop again.

00:34:54.425 --> 00:34:55.860
PAUL IRISH: Yeah,
probably could.

00:34:55.860 --> 00:34:57.150
BORIS SMUS: I could
just open Canary.

00:34:57.150 --> 00:34:58.840
I mean, this happens
to be stable.

00:35:01.740 --> 00:35:04.680
Yeah, let's do that.

00:35:04.680 --> 00:35:08.090
So there's been a few things
landing inside Chrome Dev

00:35:08.090 --> 00:35:13.370
Tools that makes it awesome for
mobile, and one of them is

00:35:13.370 --> 00:35:17.230
you're now able to emulate
touch events.

00:35:17.230 --> 00:35:19.270
Well, there's really been
no good way to do it.

00:35:19.270 --> 00:35:21.190
There's been some JavaScript
libraries, which have tried to

00:35:21.190 --> 00:35:24.360
map it over, but now we just
have first class support for

00:35:24.360 --> 00:35:28.990
it in the browser, so it's
pretty powerful.

00:35:28.990 --> 00:35:32.990
And so I'll show you now how
that works, and some of the

00:35:32.990 --> 00:35:35.560
other mobile features that
we have available.

00:35:35.560 --> 00:35:38.070
Could you dock that baby?

00:35:38.070 --> 00:35:39.290
BORIS SMUS: Docked.

00:35:39.290 --> 00:35:40.210
PAUL IRISH: Sweet.

00:35:40.210 --> 00:35:42.510
BORIS SMUS: It's like some
features are already on.

00:35:42.510 --> 00:35:43.550
PAUL IRISH: Oh, check
this out.

00:35:43.550 --> 00:35:45.470
So we also have another
feature to show you.

00:35:45.470 --> 00:35:46.540
ERIC BIDELMAN: Oh wow,
look at this.

00:35:46.540 --> 00:35:47.790
So many features.

00:35:50.540 --> 00:35:53.460
So you open up Settings, and
then now you have this.

00:35:53.460 --> 00:35:56.590
You can override the user agent
and say that you want

00:35:56.590 --> 00:36:00.720
the Network User Agent to be
sent out as IOS5, or any of

00:36:00.720 --> 00:36:01.735
the other possibilities.

00:36:01.735 --> 00:36:03.415
ERIC BIDELMAN: Wait, I know
the best feature.

00:36:03.415 --> 00:36:06.200
Can't you Control Zoom in
on the Dev Tools now?

00:36:06.200 --> 00:36:06.710
PAUL IRISH: It's true.

00:36:06.710 --> 00:36:07.450
BORIS SMUS: Whoa,
look at that.

00:36:07.450 --> 00:36:08.860
ERIC BIDELMAN: This is the best
feature, especially if

00:36:08.860 --> 00:36:10.290
you're presenting
the Dev Tools.

00:36:10.290 --> 00:36:12.080
PAUL IRISH: That's right.

00:36:12.080 --> 00:36:14.570
ERIC BIDELMAN: And we can do
that because it's a web app,

00:36:14.570 --> 00:36:15.430
it's a web app.

00:36:15.430 --> 00:36:17.470
PAUL IRISH: So Chrome
Dev Tools is just

00:36:17.470 --> 00:36:18.680
JavaScript and CSS.

00:36:18.680 --> 00:36:23.220
So Control plus Nav zooms.
It's pretty newish.

00:36:23.220 --> 00:36:25.810
BORIS SMUS: Did you know that
changing the User Agent also

00:36:25.810 --> 00:36:27.340
sets the dimensions?

00:36:27.340 --> 00:36:27.940
PAUL IRISH: What?

00:36:27.940 --> 00:36:29.960
ERIC BIDELMAN: That actually
is really hot.

00:36:29.960 --> 00:36:30.320
BORIS SMUS: Wow.

00:36:30.320 --> 00:36:31.410
That's really nice.

00:36:31.410 --> 00:36:33.480
I didn't know that.

00:36:33.480 --> 00:36:34.080
PAUL IRISH: Wow.

00:36:34.080 --> 00:36:37.820
ERIC BIDELMAN: So I know when
I've done mobile development,

00:36:37.820 --> 00:36:39.520
I have a little JavaScript
[? bookmarklet ?]

00:36:39.520 --> 00:36:42.110
that opens my screen to a
certain width and height and

00:36:42.110 --> 00:36:44.670
everything, maybe I'm
doing some UA

00:36:44.670 --> 00:36:45.630
detection on the server.

00:36:45.630 --> 00:36:47.965
This kind of replaces that?

00:36:47.965 --> 00:36:49.947
I mean, this is really nice.

00:36:49.947 --> 00:36:51.140
PAUL IRISH: Yeah.

00:36:51.140 --> 00:36:54.180
So we have the device
metrics so you can

00:36:54.180 --> 00:36:56.260
customize your own view.

00:36:56.260 --> 00:36:59.470
If I turn it off, it kind of
just expands it back to the

00:36:59.470 --> 00:37:05.070
full view, but I'm compressing
down the page to match my

00:37:05.070 --> 00:37:06.490
device metrics which
I can customize.

00:37:06.490 --> 00:37:10.520
Also, the Font Scale factor and
Fit Window, which I'm not

00:37:10.520 --> 00:37:12.770
yet sure exactly what it does.

00:37:12.770 --> 00:37:13.596
BORIS SMUS: Can you try it?

00:37:13.596 --> 00:37:14.010
ERIC BIDELMAN: Try it.

00:37:14.010 --> 00:37:17.010
PAUL IRISH: Yeah,
it does that.

00:37:17.010 --> 00:37:18.390
So does that help, guys?

00:37:21.430 --> 00:37:22.036
ERIC BIDELMAN: Actually,
we should bring up

00:37:22.036 --> 00:37:23.420
a responsive page.

00:37:23.420 --> 00:37:26.310
Is this a responsive page?

00:37:26.310 --> 00:37:27.670
PAUL IRISH: This is not.

00:37:27.670 --> 00:37:30.110
BORIS SMUS: Just pull
up mediaquery.es.

00:37:30.110 --> 00:37:33.270
ERIC BIDELMAN: And just
show what happens?

00:37:33.270 --> 00:37:36.700
That's another way to do
really quick responsive

00:37:36.700 --> 00:37:39.650
testing is to now use
the Dev Tools to--

00:37:39.650 --> 00:37:40.060
PAUL IRISH: Right.

00:37:40.060 --> 00:37:41.600
So this is pretty cool.

00:37:41.600 --> 00:37:49.500
Because in the Dev Tools I can
now set up, just change the--

00:37:49.500 --> 00:37:52.330
let's try to go down to Five.

00:37:58.130 --> 00:37:59.380
What's a [INAUDIBLE]?

00:38:01.900 --> 00:38:03.205
BORIS SMUS: I guess you
can't [? zip the-- ?]

00:38:05.930 --> 00:38:07.090
PAUL IRISH: Wow.

00:38:07.090 --> 00:38:07.800
That works.

00:38:07.800 --> 00:38:08.870
So we can do that.

00:38:08.870 --> 00:38:13.490
And also another way to handle
your responsive design

00:38:13.490 --> 00:38:17.850
development is I can just Dock
to Right this entire thing.

00:38:17.850 --> 00:38:21.640
And if I Dock to Right my Dev
Tools, I can just bring this

00:38:21.640 --> 00:38:25.830
over and squeeze down that
content as much as I want.

00:38:25.830 --> 00:38:27.106
ERIC BIDELMAN: That's cool.

00:38:27.106 --> 00:38:28.830
BORIS SMUS: How did
it do that?

00:38:28.830 --> 00:38:29.340
PAUL IRISH: Magic.

00:38:29.340 --> 00:38:32.916
ERIC BIDELMAN: If you refresh
this page, right?

00:38:32.916 --> 00:38:35.260
Does it refresh the
Dev Tools as well?

00:38:35.260 --> 00:38:36.533
[INAUDIBLE]?

00:38:36.533 --> 00:38:38.850
PAUL IRISH: Yeah.

00:38:38.850 --> 00:38:40.180
It brings it all back.

00:38:40.180 --> 00:38:42.611
So I think what we're trying
to show, before we got a

00:38:42.611 --> 00:38:44.256
little sidetracked, guys--

00:38:44.256 --> 00:38:47.330
ERIC BIDELMAN: There's just so
much really cool features.

00:38:47.330 --> 00:38:48.410
PAUL IRISH: There's a
lot of good stuff.

00:38:48.410 --> 00:38:49.470
Emulate touch events.

00:38:49.470 --> 00:38:50.530
ERIC BIDELMAN: Emulate
touch events.

00:38:50.530 --> 00:38:52.750
PAUL IRISH: So I'll turn it off,
because that's how it is

00:38:52.750 --> 00:38:53.340
by default.

00:38:53.340 --> 00:38:55.130
I have this little demo page.

00:38:55.130 --> 00:38:59.060
It's a multi-touch demo, so you
can load it on Android or

00:38:59.060 --> 00:39:00.970
IOS, and just use multi-touch.

00:39:00.970 --> 00:39:03.390
It draws it on a canvas
element, and it works.

00:39:03.390 --> 00:39:07.430
So the fact that you can do
multi-touch in JavaScript and

00:39:07.430 --> 00:39:09.100
Canvas is kind of, not many
people know that.

00:39:09.100 --> 00:39:10.560
But you can tell it
doesn't work.

00:39:10.560 --> 00:39:11.850
I'm clicking on it
now and dragging,

00:39:11.850 --> 00:39:14.210
and there's no touch.

00:39:14.210 --> 00:39:21.090
But I turn this on, and it's
totally working, right, guys?

00:39:21.090 --> 00:39:22.640
BORIS SMUS: That's
amazing, Paul.

00:39:22.640 --> 00:39:23.260
ERIC BIDELMAN: It's
because you're

00:39:23.260 --> 00:39:24.050
painting in white, right?

00:39:24.050 --> 00:39:26.370
You're painting white
lines instead of--

00:39:26.370 --> 00:39:27.780
PAUL IRISH: Wow.

00:39:27.780 --> 00:39:30.000
ERIC BIDELMAN: Demo fail.

00:39:30.000 --> 00:39:31.900
BORIS SMUS: Hold on, maybe it's
some sort of-- maybe the

00:39:31.900 --> 00:39:32.820
internet is down.

00:39:32.820 --> 00:39:34.070
ERIC BIDELMAN: This is a
feature, that Dev Tools is

00:39:34.070 --> 00:39:37.305
killing the internet,
Brand new feature.

00:39:37.305 --> 00:39:40.530
This is simulating offline,
which is a great segue.

00:39:40.530 --> 00:39:42.580
PAUL IRISH: Perfect.

00:39:42.580 --> 00:39:44.980
So I encourage you to check it
out, emulate such events.

00:39:44.980 --> 00:39:48.460
It works, and it works well
when you're [INAUDIBLE].

00:39:51.620 --> 00:39:52.890
BORIS SMUS: It's Canary
[INAUDIBLE].

00:39:52.890 --> 00:39:53.360
It happens.

00:39:53.360 --> 00:39:54.670
Maybe your site's down.

00:39:54.670 --> 00:39:56.370
PAUL IRISH: My site
must be down.

00:39:56.370 --> 00:39:56.746
ERIC BIDELMAN: Uh-oh.

00:39:56.746 --> 00:39:57.760
PAUL IRISH: That's
embarrassing.

00:39:57.760 --> 00:39:59.010
ERIC BIDELMAN: That's
really embarrassing.

00:40:01.360 --> 00:40:07.340
PAUL IRISH: So speaking of
offline, one of the big tricks

00:40:07.340 --> 00:40:08.640
dealing with offline
is that you need a

00:40:08.640 --> 00:40:12.410
mechanism to store data.

00:40:12.410 --> 00:40:16.030
And we started off with local
storage, session storage, and

00:40:16.030 --> 00:40:17.960
then there's Web SQL database,
but now that's

00:40:17.960 --> 00:40:18.860
[? deprecated, ?]

00:40:18.860 --> 00:40:20.420
although there's varying
support.

00:40:20.420 --> 00:40:23.500
IndexedDB is the new hotness,
and there's increasingly

00:40:23.500 --> 00:40:27.230
better support, but
it is a mess.

00:40:27.230 --> 00:40:28.520
But there's a new APIs--

00:40:28.520 --> 00:40:30.170
ERIC BIDELMAN: Well, there's
one API that I'm

00:40:30.170 --> 00:40:31.670
particularly fond of.

00:40:31.670 --> 00:40:32.570
BORIS SMUS: Which one's
that, Eric?

00:40:32.570 --> 00:40:34.420
ERIC BIDELMAN: So that's
the File System API.

00:40:34.420 --> 00:40:37.230
So there's an API that's been
specced out in W3C,

00:40:37.230 --> 00:40:40.630
[INAUDIBLE] in Chrome, been
available for a while now,

00:40:40.630 --> 00:40:42.430
called the File System API.

00:40:42.430 --> 00:40:44.480
It's my baby, I wrote
a book about it--

00:40:44.480 --> 00:40:46.630
I'll push that--

00:40:46.630 --> 00:40:49.280
and I wrote a library called
Filer JS to sort of wrap the

00:40:49.280 --> 00:40:53.390
library, and you can pretty
much call Unix commands.

00:40:53.390 --> 00:40:55.380
So there's a Copy function,
there's a Move function.

00:40:55.380 --> 00:40:55.710
PAUL IRISH: So [INAUDIBLE]

00:40:55.710 --> 00:40:58.170
API, just to be clear, is like
you can create files, you can

00:40:58.170 --> 00:41:00.880
create folders, you
can move files.

00:41:00.880 --> 00:41:03.150
Think about moving files
and folders on a

00:41:03.150 --> 00:41:04.505
regular file system.

00:41:04.505 --> 00:41:05.750
ERIC BIDELMAN: It's exactly
what you'd expect in

00:41:05.750 --> 00:41:06.290
JavaScript, yeah.

00:41:06.290 --> 00:41:07.680
PAUL IRISH: It's the same
thing, except you have a

00:41:07.680 --> 00:41:08.390
JavaScript API for it.

00:41:08.390 --> 00:41:10.305
ERIC BIDELMAN: This is great.

00:41:10.305 --> 00:41:13.340
BORIS SMUS: But you can't go
to your file system, right?

00:41:13.340 --> 00:41:14.040
PAUL IRISH: It's sandboxed.

00:41:14.040 --> 00:41:15.346
ERIC BIDELMAN: It's an important
distinction, and

00:41:15.346 --> 00:41:17.820
this is something that always
comes up, is you can't just

00:41:17.820 --> 00:41:21.000
open a file system and read from
My Pictures folder, My

00:41:21.000 --> 00:41:22.150
Music folder.

00:41:22.150 --> 00:41:26.960
It's very much a sandbox view
of just your applications.

00:41:26.960 --> 00:41:30.010
Your applications can read and
write folders and files to

00:41:30.010 --> 00:41:33.120
this view, but another web app
can't access that because of

00:41:33.120 --> 00:41:36.080
the origin policy, and you
can't break out of that.

00:41:36.080 --> 00:41:37.620
So that's a great distinction
to make.

00:41:37.620 --> 00:41:39.770
But it's exactly what
you'd expect, right?

00:41:39.770 --> 00:41:42.800
In JavaScript, you can write
files and store them, you can

00:41:42.800 --> 00:41:44.140
cache them.

00:41:44.140 --> 00:41:44.960
PAUL IRISH: Big files too.

00:41:44.960 --> 00:41:45.620
ERIC BIDELMAN: Big files.

00:41:45.620 --> 00:41:49.900
So using the Quota API, you can
store whatever you want,

00:41:49.900 --> 00:41:52.780
unlimited storage as far
as quota is concerned.

00:41:52.780 --> 00:41:55.440
So this has a real advantage of
being able to cache things

00:41:55.440 --> 00:41:57.740
offline as one big use case.

00:41:57.740 --> 00:42:00.580
Say you have a music app and
you want to cache MP3s or

00:42:00.580 --> 00:42:02.310
something, or files.

00:42:02.310 --> 00:42:06.120
You can do that and make a
folder for all your rock, or

00:42:06.120 --> 00:42:08.990
all your pop music or something,
and then delete

00:42:08.990 --> 00:42:09.830
that at will.

00:42:09.830 --> 00:42:13.660
So it has some advantages
over other offline APIs.

00:42:13.660 --> 00:42:16.260
App Cache is a good example
people really hate.

00:42:16.260 --> 00:42:19.685
It's hard to work with, it's not
very dynamic, you have to

00:42:19.685 --> 00:42:21.610
[? create ?] manifests
and keep all those

00:42:21.610 --> 00:42:22.780
assets up to date.

00:42:22.780 --> 00:42:24.780
If one thing in the manifest
changes, everything's

00:42:24.780 --> 00:42:27.010
downloaded, it's not great
for mobile, that's

00:42:27.010 --> 00:42:28.335
not great in general.

00:42:28.335 --> 00:42:29.440
BORIS SMUS: You can't
add anything to your

00:42:29.440 --> 00:42:30.480
[INAUDIBLE], right?

00:42:30.480 --> 00:42:31.680
ERIC BIDELMAN: You can, but
you have to change the

00:42:31.680 --> 00:42:33.680
manifest, but then everything,
right?

00:42:33.680 --> 00:42:34.760
If you're saving a--

00:42:34.760 --> 00:42:36.180
BORIS SMUS: But for JavaScript,
you can't?

00:42:36.180 --> 00:42:36.380
BORIS SMUS: You can't, right.

00:42:36.380 --> 00:42:38.940
Programmatically you can sort
of say, I want to add this

00:42:38.940 --> 00:42:40.980
file, I want to subtract this
file, you have to work with

00:42:40.980 --> 00:42:43.180
the manifest. And in
my opinion, it's

00:42:43.180 --> 00:42:44.600
a pain in the butt.

00:42:44.600 --> 00:42:48.780
So my love for the API is
apparent maybe, but I want to

00:42:48.780 --> 00:42:51.820
help bring this File System
API to more browsers.

00:42:51.820 --> 00:42:54.530
So like we said, it's only
in Chrome right now.

00:42:54.530 --> 00:42:56.930
But today actually,
I will be seeing--

00:42:56.930 --> 00:42:59.920
I had a blog post
about it today,

00:42:59.920 --> 00:43:01.460
hours before this hangout.

00:43:05.100 --> 00:43:06.950
I'm releasing a library
[INAUDIBLE]

00:43:06.950 --> 00:43:11.820
to blog post. It's called
IDB File System.js.

00:43:11.820 --> 00:43:14.630
And essentially what it is, it's
a polyfill library for

00:43:14.630 --> 00:43:16.130
the File System API.

00:43:16.130 --> 00:43:18.210
So the way it works is
pretty interesting.

00:43:18.210 --> 00:43:22.280
I had to wrestle with not only
the File System API, so I had

00:43:22.280 --> 00:43:25.270
to implement that entire thing
in JavaScript, but the

00:43:25.270 --> 00:43:27.960
underlying storage, the reason
this works in other browsers,

00:43:27.960 --> 00:43:30.340
is that it can take advantage
of IndexedDB.

00:43:30.340 --> 00:43:33.340
So IndexedDB is sort of
this up and comer.

00:43:33.340 --> 00:43:37.150
Firefox has it, IE10 will have
it, Chrome certainly has it,

00:43:37.150 --> 00:43:37.900
who knows if--

00:43:37.900 --> 00:43:39.610
PAUL IRISH: It'll be coming
in [INAUDIBLE].

00:43:39.610 --> 00:43:42.680
ERIC BIDELMAN: So everyone will
likely have the IndexedDB

00:43:42.680 --> 00:43:44.620
API pretty soon.

00:43:44.620 --> 00:43:47.270
This is sort of my attempt to
help that in the immediate

00:43:47.270 --> 00:43:50.540
future, and File System.js
essentially a polyfill.

00:43:53.590 --> 00:43:55.820
How would you explain
a polyfill, Paul?

00:43:55.820 --> 00:43:56.290
Library.

00:43:56.290 --> 00:43:59.230
PAUL IRISH: Yeah, it has the
exact same APIs as the

00:43:59.230 --> 00:44:02.570
standard implementation, just
delivered via JavaScript

00:44:02.570 --> 00:44:04.640
instead of the browser
delivering it.

00:44:04.640 --> 00:44:06.620
So it works the same way.

00:44:06.620 --> 00:44:09.430
ERIC BIDELMAN: So I have a good
demo of this working, if

00:44:09.430 --> 00:44:11.930
you can switch back to
the demo machine.

00:44:11.930 --> 00:44:15.650
Do you have Firefox,
by the way?

00:44:15.650 --> 00:44:16.900
BORIS SMUS: Probably
an old version.

00:44:19.410 --> 00:44:23.120
ERIC BIDELMAN: So this is a demo
that I put together, and

00:44:23.120 --> 00:44:25.950
this demo runs both in
Chrome and Firefox.

00:44:25.950 --> 00:44:28.270
Unfortunately, I don't think
Boris has Firefox that we can

00:44:28.270 --> 00:44:31.640
bring up right now, but this
demo would work perfectly in

00:44:31.640 --> 00:44:33.720
that using IndexedDB
as a storage layer.

00:44:36.820 --> 00:44:37.480
But this is great.

00:44:37.480 --> 00:44:41.160
So I can write a web app now
that uses the File System API,

00:44:41.160 --> 00:44:42.950
and it's going to work
cross-browser.

00:44:42.950 --> 00:44:45.950
So what this is doing is
essentially I can just have my

00:44:45.950 --> 00:44:48.980
root folder here, we open the
file system using our File

00:44:48.980 --> 00:44:51.392
System API calls.

00:44:51.392 --> 00:44:57.300
We'll create a couple,
folders test.

00:44:57.300 --> 00:45:00.490
So this is just using the
methods that the File System

00:45:00.490 --> 00:45:02.140
API implements.

00:45:02.140 --> 00:45:04.670
So we can create a blank
folder, a blank file.

00:45:04.670 --> 00:45:07.656
I can drill down into
these folders.

00:45:07.656 --> 00:45:09.570
I can zoom.

00:45:09.570 --> 00:45:12.100
Zooming's good.

00:45:12.100 --> 00:45:14.595
So you can see, I created a
folder, Test, I'm in that

00:45:14.595 --> 00:45:15.440
folder, Test, right now.

00:45:15.440 --> 00:45:18.090
So I refresh, my data
is preserved.

00:45:18.090 --> 00:45:21.940
So I still have my folder that
I created, my empty file.

00:45:21.940 --> 00:45:25.280
Do you have any files we can
drag into this web app that

00:45:25.280 --> 00:45:26.846
aren't risque?

00:45:26.846 --> 00:45:28.830
PAUL IRISH: That
aren't risque.

00:45:28.830 --> 00:45:30.100
Well.

00:45:30.100 --> 00:45:33.490
BORIS SMUS: I don't usually
have such files.

00:45:33.490 --> 00:45:34.590
ERIC BIDELMAN: Do you
have like a basic

00:45:34.590 --> 00:45:35.390
text file or something?

00:45:35.390 --> 00:45:38.180
An image would work great,
some kind of image.

00:45:38.180 --> 00:45:39.920
BORIS SMUS: Let's do
a big spooky fire.

00:45:39.920 --> 00:45:41.906
ERIC BIDELMAN: Big
spooky fire.

00:45:41.906 --> 00:45:43.156
Fires are spooky.

00:45:49.150 --> 00:45:51.046
BORIS SMUS: Big spooky fire.

00:45:51.046 --> 00:45:54.500
My computer is busy upgrading
Firefox, I think.

00:45:54.500 --> 00:45:57.380
ERIC BIDELMAN: No problem.

00:45:57.380 --> 00:45:59.280
BORIS SMUS: Should we
just drag it in?

00:45:59.280 --> 00:46:00.110
ERIC BIDELMAN: Drag it in.

00:46:00.110 --> 00:46:00.580
PAUL IRISH: Whoa.

00:46:00.580 --> 00:46:02.710
ERIC BIDELMAN: So using the
power of drag and drop, we can

00:46:02.710 --> 00:46:07.120
add that file right to
the File System API.

00:46:07.120 --> 00:46:08.380
Imagine this was in Firefox,
it would be

00:46:08.380 --> 00:46:10.350
the exact same process.

00:46:10.350 --> 00:46:12.890
Just to show you [INAUDIBLE]
that was added, we hopefully

00:46:12.890 --> 00:46:15.722
clicked that, and displayed
big spooky fires.

00:46:15.722 --> 00:46:19.590
We're just completely
crashing right now.

00:46:19.590 --> 00:46:20.270
But this is cool.

00:46:20.270 --> 00:46:23.630
So now, I can use File System
API and all of its benefits in

00:46:23.630 --> 00:46:25.300
other browsers.

00:46:25.300 --> 00:46:28.260
PAUL IRISH: So it's File System
API built on top of

00:46:28.260 --> 00:46:32.380
IndexedDB, so that means we
now have the same API

00:46:32.380 --> 00:46:34.805
available, first of all in
Chrome, but with the polyfill,

00:46:34.805 --> 00:46:38.310
in Firefox and IE10, and any
future browser that supports

00:46:38.310 --> 00:46:40.930
the IndexedDB, so mobile
browsers in particular.

00:46:40.930 --> 00:46:43.875
ERIC BIDELMAN: Mobile browsers
in particular.

00:46:43.875 --> 00:46:47.290
Caveat, I haven't tested
it in IE10.

00:46:47.290 --> 00:46:47.720
PAUL IRISH: I took a look.

00:46:47.720 --> 00:46:48.170
ERIC BIDELMAN: You
took a look.

00:46:48.170 --> 00:46:49.110
What happened?

00:46:49.110 --> 00:46:51.020
PAUL IRISH: I took a look, I
[INAUDIBLE] in Browser Stack,

00:46:51.020 --> 00:46:53.910
and I think I saw
an exception.

00:46:53.910 --> 00:46:55.450
Probably not your fault.

00:46:55.450 --> 00:46:58.415
It's not your fault.

00:46:58.415 --> 00:46:59.120
ERIC BIDELMAN: Don't
worry about it.

00:46:59.120 --> 00:47:00.130
PAUL IRISH: It might
be your fault.

00:47:00.130 --> 00:47:01.030
ERIC BIDELMAN: I
want to show--

00:47:01.030 --> 00:47:08.280
so there's also another
demo that I wrote.

00:47:08.280 --> 00:47:09.530
Oops.

00:47:11.460 --> 00:47:14.410
So if you want to play around
with library, go ahead.

00:47:14.410 --> 00:47:15.400
I'd love your feedback.

00:47:15.400 --> 00:47:17.290
And absolutely, like if you
have Pull Requests or

00:47:17.290 --> 00:47:20.170
something for IE10 bugs or
something, I just haven't had

00:47:20.170 --> 00:47:22.410
the time to test. But Firefox
works flawlessly.

00:47:22.410 --> 00:47:24.400
They have probably the
most up to date

00:47:24.400 --> 00:47:25.650
implementation of IndexedDB.

00:47:28.010 --> 00:47:30.720
So this is another demo I wrote
when I wrote Filer JS,

00:47:30.720 --> 00:47:33.790
the wrapper library that
implements Unix commands.

00:47:33.790 --> 00:47:37.000
And you could see, sorry for the
small screen, but it's the

00:47:37.000 --> 00:47:40.400
same demo, and it's also now
working just out of the box

00:47:40.400 --> 00:47:42.610
with this library dropped in.

00:47:42.610 --> 00:47:46.730
It works out of the box with
Firefox, with other browsers

00:47:46.730 --> 00:47:48.260
that implement IndexedDB.

00:47:48.260 --> 00:47:50.940
So I can traverse in these
folders, as you'd expect, I

00:47:50.940 --> 00:47:54.190
can add files, I can
import files, I can

00:47:54.190 --> 00:47:55.930
preview those files.

00:47:55.930 --> 00:47:57.080
So this is cool.

00:47:57.080 --> 00:47:59.460
I'm really excited about this.

00:47:59.460 --> 00:48:02.370
Obviously, my passion for the
API comes into play, and I

00:48:02.370 --> 00:48:04.650
think it's got a lot of
advantages over some of the

00:48:04.650 --> 00:48:05.565
other offline APIs.

00:48:05.565 --> 00:48:07.070
PAUL IRISH: Did you say
that that demo is

00:48:07.070 --> 00:48:09.060
using Filer JS as well?

00:48:09.060 --> 00:48:09.740
ERIC BIDELMAN: Yeah.

00:48:09.740 --> 00:48:10.610
So great point, Paul.

00:48:10.610 --> 00:48:11.750
I Didn't say that.

00:48:11.750 --> 00:48:13.560
Maybe I did, I don't know.

00:48:13.560 --> 00:48:15.530
But this demo is using
the library that I

00:48:15.530 --> 00:48:16.860
wrote, Filer JS.

00:48:16.860 --> 00:48:18.700
PAUL IRISH: So this is like
a sweet sugar API.

00:48:18.700 --> 00:48:21.710
ERIC BIDELMAN: It's a Sugar API
on top of the [INAUDIBLE]

00:48:21.710 --> 00:48:22.964
File System API.

00:48:22.964 --> 00:48:24.220
PAUL IRISH: Because that
API [INAUDIBLE].

00:48:24.220 --> 00:48:25.600
ERIC BIDELMAN: It's good,
it's powerful.

00:48:25.600 --> 00:48:26.670
We all know it's powerful.

00:48:26.670 --> 00:48:30.264
PAUL IRISH: But I would love
to just [INAUDIBLE] and

00:48:30.264 --> 00:48:31.040
[INAUDIBLE] and all that.

00:48:31.040 --> 00:48:35.770
ERIC BIDELMAN: [INAUDIBLE],
copy, LS, current working

00:48:35.770 --> 00:48:38.930
directory, all this cool stuff
that you're familiar with.

00:48:38.930 --> 00:48:42.140
Basically, this library now,
the IDB File System, is

00:48:42.140 --> 00:48:43.150
sitting on top of Filer.

00:48:43.150 --> 00:48:45.670
So they're working together, and
this demo just works out

00:48:45.670 --> 00:48:47.810
of the box thanks to that.

00:48:47.810 --> 00:48:50.910
BORIS SMUS: So I think Mozilla
had some sort of large file

00:48:50.910 --> 00:48:52.260
supporting IndexedDB?

00:48:52.260 --> 00:48:53.124
ERIC BIDELMAN: Yeah.

00:48:53.124 --> 00:48:57.200
BORIS SMUS: Do you know
anything about that?

00:48:57.200 --> 00:48:59.720
ERIC BIDELMAN: I think you're
asking about supporting binary

00:48:59.720 --> 00:49:01.530
data inside of--

00:49:01.530 --> 00:49:04.740
BORIS SMUS: So they had some
specific extension for large--

00:49:04.740 --> 00:49:05.990
ERIC BIDELMAN: Interesting.

00:49:10.240 --> 00:49:13.510
BORIS SMUS: So Mozilla had an
extension for large file

00:49:13.510 --> 00:49:16.315
support, I think in IndexedDB,
but I don't

00:49:16.315 --> 00:49:17.800
really know the details.

00:49:17.800 --> 00:49:19.910
ERIC BIDELMAN: So actually, this
project started off for

00:49:19.910 --> 00:49:24.370
me as a sort of investigation
if you could store files--

00:49:24.370 --> 00:49:27.510
it's been said before that you
can store files and really

00:49:27.510 --> 00:49:30.650
replicate the File System
API inside of IndexedDB.

00:49:30.650 --> 00:49:34.290
So I went down that path
expecting to fail, but it

00:49:34.290 --> 00:49:36.640
actually turned out
to be possible.

00:49:36.640 --> 00:49:39.470
Firefox's implementation, in
particular, has the ability to

00:49:39.470 --> 00:49:42.140
store binary data
in IndexedDB.

00:49:42.140 --> 00:49:45.530
So as soon as I saw that, my
eyes opened up and said, hey,

00:49:45.530 --> 00:49:49.470
you can polyfill an entire API,
which it's not a small

00:49:49.470 --> 00:49:51.940
API, if you look at
the code base.

00:49:51.940 --> 00:49:56.045
We can pretty much polyfill the
entire API and replicate

00:49:56.045 --> 00:49:59.900
it using IndexedDB as sort of
the underlying storage layer.

00:49:59.900 --> 00:50:01.050
BORIS SMUS: Awesome.

00:50:01.050 --> 00:50:02.600
Very cool stuff.

00:50:02.600 --> 00:50:04.280
ERIC BIDELMAN: So great for
mobile, great for other

00:50:04.280 --> 00:50:06.935
browsers, great for building
an app that works offline.

00:50:09.840 --> 00:50:11.400
That's all I had for me.

00:50:11.400 --> 00:50:13.760
Do we have time for questions?

00:50:13.760 --> 00:50:14.870
PAUL IRISH: We have time
for one question.

00:50:14.870 --> 00:50:15.700
ERIC BIDELMAN: One question?

00:50:15.700 --> 00:50:19.890
PAUL IRISH: So this came in over
the moderator during our

00:50:19.890 --> 00:50:21.640
conversation.

00:50:21.640 --> 00:50:26.830
And the question is coming in
from Stephan in Berlin.

00:50:26.830 --> 00:50:32.940
And he asks, I wanted to start
a Chrome app based on

00:50:32.940 --> 00:50:35.360
Backbone, Underscore,
and Require.

00:50:35.360 --> 00:50:39.530
However, the Chrome App Manifest
Version Two won't

00:50:39.530 --> 00:50:42.170
allow CSP libraries using
a [? Val New, ?]

00:50:42.170 --> 00:50:44.670
which excludes all known
JS type of frameworks.

00:50:44.670 --> 00:50:45.920
Is there a solution for that?

00:50:48.660 --> 00:50:51.290
This is an interesting question,
and I think we're

00:50:51.290 --> 00:50:51.970
looking into it.

00:50:51.970 --> 00:50:57.620
Basically, one of the things
that we're excited about is

00:50:57.620 --> 00:51:01.120
getting better CSV
support inside

00:51:01.120 --> 00:51:02.430
external JavaScript libraries.

00:51:02.430 --> 00:51:06.520
So basically, if you rely on the
function [? constructor ?]

00:51:06.520 --> 00:51:10.510
or eval, that means that that
JavaScript library won't work

00:51:10.510 --> 00:51:12.212
in a CSP environment.

00:51:12.212 --> 00:51:15.160
CSP is Content Security
Policy.

00:51:15.160 --> 00:51:18.000
It's a new security model.

00:51:18.000 --> 00:51:19.510
It's pretty exciting,
and it's coming.

00:51:19.510 --> 00:51:22.970
There's good support for it in
Firefox and Chrome right now,

00:51:22.970 --> 00:51:24.850
and Chrome apps will
be using it.

00:51:24.850 --> 00:51:29.866
So basically I would ask, if
you have incompatibilities,

00:51:29.866 --> 00:51:32.630
they have to be looked
at the library level.

00:51:32.630 --> 00:51:37.630
So try and see if there's a
way to work around that.

00:51:37.630 --> 00:51:40.620
One of the ways in particular,
with templating libraries, is

00:51:40.620 --> 00:51:43.930
any precompiled templates
are not using eval.

00:51:43.930 --> 00:51:48.910
So precompiled templates are
the way to get CSP support.

00:51:48.910 --> 00:51:49.970
ERIC BIDELMAN: That's generally
a good thing.

00:51:49.970 --> 00:51:51.580
You should be compiling
your templates anyway.

00:51:51.580 --> 00:51:52.200
PAUL IRISH: Way faster.

00:51:52.200 --> 00:51:53.800
ERIC BIDELMAN: So it's
good for performance.

00:51:53.800 --> 00:51:54.760
You should be doing
that already.

00:51:54.760 --> 00:51:57.300
This is just nudging, hopefully,
developers in the

00:51:57.300 --> 00:51:58.880
right direction.

00:51:58.880 --> 00:52:01.010
PAUL IRISH: So that's
your solution there.

00:52:01.010 --> 00:52:02.414
But is that it?

00:52:02.414 --> 00:52:05.310
BORIS SMUS: I think basically
that's a good thing.

00:52:05.310 --> 00:52:09.340
One thing is I think Mustache
doesn't precompile, but

00:52:09.340 --> 00:52:13.380
Handlebars does, and probably
other templating

00:52:13.380 --> 00:52:15.060
agents do as well.

00:52:15.060 --> 00:52:15.900
PAUL IRISH: Precompile them.

00:52:15.900 --> 00:52:16.545
ERIC BIDELMAN: Good thing.

00:52:16.545 --> 00:52:16.830
PAUL IRISH: All right.

00:52:16.830 --> 00:52:20.700
Well, I appreciate you
guys watching, and--

00:52:20.700 --> 00:52:21.480
ERIC BIDELMAN: Thanks,
everybody.

00:52:21.480 --> 00:52:24.160
PAUL IRISH: We'll be back
soon again [INAUDIBLE].

00:52:24.160 --> 00:52:24.996
ERIC BIDELMAN: See you again.

00:52:24.996 --> 00:52:26.246
PAUL IRISH: Cool.

