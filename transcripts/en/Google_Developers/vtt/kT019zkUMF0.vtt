WEBVTT
Kind: captions
Language: en

00:00:01.010 --> 00:00:01.930
URS HOELZLE: Hi, everyone.

00:00:01.930 --> 00:00:06.840
Welcome to Google I/O and the
Cloud Session at Google I/O.

00:00:06.840 --> 00:00:07.730
I'm Urs Hoelzle.

00:00:07.730 --> 00:00:10.320
I run technical infrastructure
at Google.

00:00:10.320 --> 00:00:15.600
And let me start by talking a
little bit about the history

00:00:15.600 --> 00:00:18.460
of our infrastructure.

00:00:18.460 --> 00:00:22.090
We started building our internal
infrastructure a long

00:00:22.090 --> 00:00:23.980
time ago, over a decade ago.

00:00:23.980 --> 00:00:27.040
And we had to start building
it, because there wasn't

00:00:27.040 --> 00:00:31.510
really any infrastructure that
scaled to the demands of our

00:00:31.510 --> 00:00:37.940
workload, to Search, to Gmail,
to apps, to everything.

00:00:37.940 --> 00:00:41.090
And last year, I invited Steven
Levy to come by and

00:00:41.090 --> 00:00:43.140
have a look at our
infrastructure.

00:00:43.140 --> 00:00:46.570
And he called it "the mother
of all clouds,"

00:00:46.570 --> 00:00:47.630
which is kind of true.

00:00:47.630 --> 00:00:50.630
Because we'd been working
on it for 14 years.

00:00:50.630 --> 00:00:56.420
So for 14 years, we've been
building the largest, fastest,

00:00:56.420 --> 00:01:00.940
and most cost effective
infrastructure in the world.

00:01:00.940 --> 00:01:03.825
For over a decade, we've been
building our servers we've

00:01:03.825 --> 00:01:06.600
been building our data centers,
we've been building

00:01:06.600 --> 00:01:08.550
our networks.

00:01:08.550 --> 00:01:11.290
You use this infrastructure
everyday, probably, because

00:01:11.290 --> 00:01:12.480
you use Google products.

00:01:12.480 --> 00:01:15.670
And so you know how fast
and reliable it is.

00:01:15.670 --> 00:01:17.760
And building such an
infrastructure is really a

00:01:17.760 --> 00:01:22.070
huge task and, sometimes,
it's a huge headache.

00:01:22.070 --> 00:01:25.270
But for me and my team,
it's a huge challenge.

00:01:25.270 --> 00:01:27.790
And that's what makes us get
up in the morning, come to

00:01:27.790 --> 00:01:30.900
work, to go and make that
infrastructure even better.

00:01:30.900 --> 00:01:33.960
And with the Google Cloud
infrastructure, you can now

00:01:33.960 --> 00:01:37.800
use that same infrastructure
for your own applications.

00:01:37.800 --> 00:01:40.700
But before we get into the
details, let me just show you

00:01:40.700 --> 00:01:44.110
a few pictures of how
this actually looks.

00:01:44.110 --> 00:01:48.080
Here's what looks like a room of
servers, but it's actually

00:01:48.080 --> 00:01:49.680
from our networking room.

00:01:49.680 --> 00:01:51.740
Our networking rooms are
larger than some other

00:01:51.740 --> 00:01:53.400
people's server rooms.

00:01:53.400 --> 00:01:56.970
Here's another look at a
networking room where we

00:01:56.970 --> 00:02:00.210
connect our data centers
together.

00:02:00.210 --> 00:02:03.750
Here's a row of servers, each
server built by us and

00:02:03.750 --> 00:02:06.440
optimized for performance
and cost.

00:02:06.440 --> 00:02:08.320
So maybe they're not
pretty, but they're

00:02:08.320 --> 00:02:09.715
fast and very effective.

00:02:12.680 --> 00:02:14.700
Here's the inside
of a server row.

00:02:14.700 --> 00:02:16.730
So on both sides, you see
the back of the servers.

00:02:16.730 --> 00:02:20.560
They push their hot air into
this plenum, where it gets

00:02:20.560 --> 00:02:22.490
cooled again.

00:02:22.490 --> 00:02:27.380
Here's a server room in Finland,
where we converted a

00:02:27.380 --> 00:02:31.090
paper mill into a data center.

00:02:31.090 --> 00:02:34.770
And here's a mechanical room,
in one of our data centers,

00:02:34.770 --> 00:02:37.430
where all the cooling water
comes together.

00:02:37.430 --> 00:02:40.510
Blue pipes deliver the cool
water to the floor.

00:02:40.510 --> 00:02:44.070
Red is the warm water
coming back.

00:02:44.070 --> 00:02:46.820
And here's some cooling towers
in the data center.

00:02:46.820 --> 00:02:52.560
We use cooling towers, where
we evaporate water, to call

00:02:52.560 --> 00:02:55.820
our data centers in an
environmentally friendly way.

00:02:55.820 --> 00:02:59.410
In fact, we spent a lot of
effort to make our data

00:02:59.410 --> 00:03:05.850
centers, an our cloud,
as environmentally

00:03:05.850 --> 00:03:07.910
compatible as possible.

00:03:07.910 --> 00:03:10.190
So we've been leaders
in data center

00:03:10.190 --> 00:03:12.190
efficiency, for example.

00:03:12.190 --> 00:03:16.070
Our data centers use only half
as much energy as normal,

00:03:16.070 --> 00:03:17.840
average data centers.

00:03:17.840 --> 00:03:20.250
And that's good not just for
the environment, it's also

00:03:20.250 --> 00:03:21.260
good for you.

00:03:21.260 --> 00:03:24.420
Because less overhead
means less cost.

00:03:24.420 --> 00:03:28.660
And we pass these savings on
to you in lower prices.

00:03:28.660 --> 00:03:32.260
We're also the first internet
company that's gotten ISO

00:03:32.260 --> 00:03:35.290
14,000 environmental
certification for our

00:03:35.290 --> 00:03:36.940
standards at the data centers.

00:03:36.940 --> 00:03:41.510
And we're proud to have been
the Cool IT leader in the

00:03:41.510 --> 00:03:44.150
Greenpeace Leader Board for
two years in a row now.

00:03:44.150 --> 00:03:46.430
So when you run your
applications in the Google

00:03:46.430 --> 00:03:48.250
Cloud, you know you're not
just getting great

00:03:48.250 --> 00:03:51.800
performance, but you also
get great environmental

00:03:51.800 --> 00:03:53.600
performance.

00:03:53.600 --> 00:03:56.200
And we're continuing to build
this infrastructure.

00:03:56.200 --> 00:03:59.450
Just in the last 12 months,
we announced data center

00:03:59.450 --> 00:04:04.050
expansions, in the US, in
Europe, in Asia, and in South

00:04:04.050 --> 00:04:08.580
America, for over
$2.9 billion.

00:04:08.580 --> 00:04:12.340
So clearly we see a
lot of growth and

00:04:12.340 --> 00:04:14.180
demand for our services.

00:04:14.180 --> 00:04:17.390
But we also wanted to make sure
there's enough room for

00:04:17.390 --> 00:04:20.610
the growth of your services.

00:04:20.610 --> 00:04:24.600
We also run one of the world's
largest networks.

00:04:24.600 --> 00:04:28.410
We're the only company, that's
not an ISP, to own and

00:04:28.410 --> 00:04:31.100
operates submarine cables,
for example.

00:04:31.100 --> 00:04:34.970
So here you see some pictures
of the Unity cable, where we

00:04:34.970 --> 00:04:37.410
organized the consortium to
build a new cable between the

00:04:37.410 --> 00:04:42.760
US and Japan that, today, serves
several terabits of

00:04:42.760 --> 00:04:46.860
capacity between those two
places, just in time for for

00:04:46.860 --> 00:04:48.970
"Gangnam Style", I guess.

00:04:48.970 --> 00:04:51.380
So our network spans
the globe.

00:04:51.380 --> 00:04:53.610
And it includes one of
the largest, if not

00:04:53.610 --> 00:04:55.470
the largest, CDN.

00:04:55.470 --> 00:04:59.850
We peer with virtually every
major ISP worldwide.

00:04:59.850 --> 00:05:04.380
So we can hand off your bits to
the end user's ISP in one

00:05:04.380 --> 00:05:08.640
step and, therefore, have the
best performance and speed.

00:05:08.640 --> 00:05:10.170
So you know that you're not
just getting the best

00:05:10.170 --> 00:05:12.650
performance inside
the data center.

00:05:12.650 --> 00:05:15.670
You're also going to get the
best performance between data

00:05:15.670 --> 00:05:18.100
centers and to your users.

00:05:18.100 --> 00:05:20.130
And our network is
not just big.

00:05:20.130 --> 00:05:25.330
It's also one of the most
advanced networks you'll find.

00:05:25.330 --> 00:05:29.400
Well, today, many are talking
about introducing software

00:05:29.400 --> 00:05:31.290
defined networking.

00:05:31.290 --> 00:05:35.540
We have been running a software
defined backbone for

00:05:35.540 --> 00:05:36.710
over two years.

00:05:36.710 --> 00:05:39.750
Our OpenFlow powered backbone,
which you see here, connects

00:05:39.750 --> 00:05:44.350
our data centers and provides
much better performance and

00:05:44.350 --> 00:05:47.090
cost than our previous
backbone.

00:05:47.090 --> 00:05:49.370
And so when you run your
application, on the Google

00:05:49.370 --> 00:05:53.590
Cloud, you'll benefit from
that backbone as well.

00:05:53.590 --> 00:05:55.910
And of course, we work
not just on physical

00:05:55.910 --> 00:05:59.600
infrastructure but also on
software infrastructure.

00:05:59.600 --> 00:06:05.170
And I'm especially proud that
we can really claim the best

00:06:05.170 --> 00:06:08.470
track record, of any company,
in building

00:06:08.470 --> 00:06:09.960
infrastructure software.

00:06:09.960 --> 00:06:14.330
Here's just a few examples from
the last decade or so.

00:06:14.330 --> 00:06:18.790
In 2002, we built GFS, the
Google File System.

00:06:18.790 --> 00:06:22.530
And here, this was really the
first file system to scale to

00:06:22.530 --> 00:06:25.260
data center size.

00:06:25.260 --> 00:06:29.880
We had to build it, because no
existing file system could

00:06:29.880 --> 00:06:32.060
really handle our workload.

00:06:32.060 --> 00:06:34.910
Remember, to build a Web Search,
you have to first

00:06:34.910 --> 00:06:36.520
build an index.

00:06:36.520 --> 00:06:39.290
And to build an index, you have
to store your own copy of

00:06:39.290 --> 00:06:41.860
the web in a file system.

00:06:41.860 --> 00:06:45.790
So that's why we built GFS,
which, a few years later,

00:06:45.790 --> 00:06:49.570
inspired Hadoop File
System, HGFS.

00:06:49.570 --> 00:06:52.020
But we're not actually
using GFS anymore.

00:06:52.020 --> 00:06:56.370
We moved on to Colossus,
which is it's much

00:06:56.370 --> 00:06:59.070
more capable successor.

00:06:59.070 --> 00:07:01.380
And that's what's actually
powering the cloud storage

00:07:01.380 --> 00:07:05.660
today and also, pretty much, any
other storage at Google.

00:07:05.660 --> 00:07:11.260
Now why did we retire what,
arguably, was one of the

00:07:11.260 --> 00:07:14.800
world's most successful and
most capable file systems?

00:07:14.800 --> 00:07:17.770
It's because we're building
for the future.

00:07:17.770 --> 00:07:21.730
And we wanted a file system that
was more capable, a file

00:07:21.730 --> 00:07:25.150
system that can handle workloads
and storage pools at

00:07:25.150 --> 00:07:30.200
least 100 times bigger than GFS,
a file system that has

00:07:30.200 --> 00:07:33.760
higher availability, with
multimaster and a fully

00:07:33.760 --> 00:07:36.990
distributed directory, a file
system that understands

00:07:36.990 --> 00:07:39.230
Flash and so on.

00:07:39.230 --> 00:07:42.840
We also learned a lot of things
in the 13 years since

00:07:42.840 --> 00:07:44.710
we started using GFS.

00:07:44.710 --> 00:07:48.830
And all of these things have
flowed into Colossus.

00:07:48.830 --> 00:07:51.520
And therefore, we retired GFS.

00:07:51.520 --> 00:07:56.250
For another example, 2004 we
created MapReduce, which, of

00:07:56.250 --> 00:08:01.490
course, inspired Hadoop and the
whole big data industry.

00:08:01.490 --> 00:08:04.750
Similarly, here, we have a lot
of MapReduce still running

00:08:04.750 --> 00:08:05.970
inside the company.

00:08:05.970 --> 00:08:09.170
But we're not actually using
MapReduce anymore.

00:08:09.170 --> 00:08:12.460
We use Flume, which makes it
much easier to construct large

00:08:12.460 --> 00:08:14.530
pipelines of MapReduces.

00:08:14.530 --> 00:08:20.950
In 2006, we created Big Table,
which is, probably, the

00:08:20.950 --> 00:08:25.590
world's most scalable NoSQL
infrastructure and, very

00:08:25.590 --> 00:08:30.410
likely, the most battle tested
NoSQL infrastructure there is.

00:08:30.410 --> 00:08:34.950
Almost everything at Google uses
Big Table, so Gmail, web

00:08:34.950 --> 00:08:40.620
indexing, G+, if they
use a NoSQL system.

00:08:40.620 --> 00:08:43.320
So pretty much everything
runs on Big Table today.

00:08:43.320 --> 00:08:47.690
But of course, we're already
working on making it obsolete.

00:08:47.690 --> 00:08:55.010
And last year, we talked about
Spanner, which gives you a

00:08:55.010 --> 00:08:58.730
similarly scalable and similar
performance system but with

00:08:58.730 --> 00:09:01.440
transactional consistency.

00:09:01.440 --> 00:09:03.830
So if hope you're catching
my point.

00:09:03.830 --> 00:09:08.990
Not just once, but several
times, we wrote an industry

00:09:08.990 --> 00:09:16.090
leading system, a decade ago,
only to retire it, because it

00:09:16.090 --> 00:09:19.210
wasn't good enough anymore, and
we wanted to get something

00:09:19.210 --> 00:09:20.740
even better.

00:09:20.740 --> 00:09:24.040
And so we've been around the
block more than once.

00:09:24.040 --> 00:09:26.970
And that's what you actually
see in the quality and the

00:09:26.970 --> 00:09:30.620
performance of the public
cloud infrastructure.

00:09:30.620 --> 00:09:34.270
Even though it's just
not even a year old.

00:09:34.270 --> 00:09:38.710
So we spent the last 14 years
building these great systems,

00:09:38.710 --> 00:09:41.820
with the scale, performance,
and value that we needed

00:09:41.820 --> 00:09:42.600
internally.

00:09:42.600 --> 00:09:46.440
And now we're making them
available to you.

00:09:46.440 --> 00:09:50.500
In fact, in just the last 10-11
months, since I was here

00:09:50.500 --> 00:09:56.710
at Google I/O announcing our
cloud, we've launched over 160

00:09:56.710 --> 00:09:59.430
improvements to pretty
much all of the

00:09:59.430 --> 00:10:01.960
systems in the cloud.

00:10:01.960 --> 00:10:05.270
Now let's take a look at
what our users have

00:10:05.270 --> 00:10:09.770
done with that cloud.

00:10:09.770 --> 00:10:16.350
MapR broke the Minute Sort,
for only $1,200,

00:10:16.350 --> 00:10:17.570
using Compute Engine.

00:10:17.570 --> 00:10:21.700
The previous world record was
held by custom hardware

00:10:21.700 --> 00:10:24.500
costing hundreds of thousands
of dollars.

00:10:24.500 --> 00:10:29.650
So even in a prerelease
software, we're delivering

00:10:29.650 --> 00:10:32.240
world record performance.

00:10:32.240 --> 00:10:36.200
Snapchat, probably one of the
largest, fastest growing,

00:10:36.200 --> 00:10:39.640
consumer services out there, is
delivering over 150 million

00:10:39.640 --> 00:10:43.740
snaps per day on Google
App Engine.

00:10:43.740 --> 00:10:48.500
Songpop scaled to over 80
million users on a cloud

00:10:48.500 --> 00:10:52.720
platform, 1 million daily users,
using App Engine and

00:10:52.720 --> 00:10:56.120
Datastore and cloud storage.

00:10:56.120 --> 00:11:05.920
Scalr, the performance of
Compute Engine let Scalr dream

00:11:05.920 --> 00:11:09.710
about things that they couldn't
dream about before,

00:11:09.710 --> 00:11:12.060
even though they'd been
providing systems management

00:11:12.060 --> 00:11:16.640
software for many other
cloud providers.

00:11:16.640 --> 00:11:20.610
The simplicity of our
infrastructure lets Udacity

00:11:20.610 --> 00:11:24.065
focus on doing courseware rather
than being an sysadmin

00:11:24.065 --> 00:11:29.800
or dealing with administering
the systems.

00:11:29.800 --> 00:11:32.830
And for those of you watching
from Europe, or here from

00:11:32.830 --> 00:11:36.290
Europe, you know that the
"Concours Eurovision" is one

00:11:36.290 --> 00:11:40.850
of the largest TV events in
the world, a song contest.

00:11:40.850 --> 00:11:44.830
And just two days ago,
the semifinals ran.

00:11:44.830 --> 00:11:48.260
And the software, for the user
participation in those

00:11:48.260 --> 00:11:51.960
semifinals, was written by our
two partners, Scalr and

00:11:51.960 --> 00:11:53.990
grandcentrix.

00:11:53.990 --> 00:11:58.920
They delivered 50,000 requests
per second at really great and

00:11:58.920 --> 00:12:03.440
consistent latency on
Compute Engine.

00:12:03.440 --> 00:12:09.170
So our customers are using,
really, all parts of our

00:12:09.170 --> 00:12:10.710
infrastructure.

00:12:10.710 --> 00:12:14.940
Let's take a quick step
back and look at that.

00:12:14.940 --> 00:12:18.560
Our Cloud Platform is a
comprehensive, integrated

00:12:18.560 --> 00:12:22.600
platform, with compute, storage,
and application

00:12:22.600 --> 00:12:26.570
services, and extension of our
internal infrastructure, with

00:12:26.570 --> 00:12:30.500
strong connections to other
Google services and APIs.

00:12:30.500 --> 00:12:33.620
And so as thousands of Google's
engineers improve

00:12:33.620 --> 00:12:37.250
this infrastructure, for Google,
you will benefit from

00:12:37.250 --> 00:12:39.400
those improvements as well.

00:12:39.400 --> 00:12:42.530
So you can use what we use.

00:12:42.530 --> 00:12:46.800
So you can build your software
and run your business, in the

00:12:46.800 --> 00:12:51.620
same place that we do, with the
same performance, scale,

00:12:51.620 --> 00:12:56.310
and value that we built
for ourselves.

00:12:56.310 --> 00:13:01.060
So now that you've seen our past
and our vision, let me

00:13:01.060 --> 00:13:05.020
show you a few things that
we're announcing today.

00:13:05.020 --> 00:13:09.210
Let's start with Compute Engine,
because many of you

00:13:09.210 --> 00:13:12.700
want and need access
to raw VMs.

00:13:12.700 --> 00:13:14.240
That's important.

00:13:14.240 --> 00:13:16.670
We announced Compute
Engine a year ago.

00:13:16.670 --> 00:13:20.630
And we've rolled out a ton of
improvements since then.

00:13:20.630 --> 00:13:25.420
Now, today, the standard unit
of measure for compute is an

00:13:25.420 --> 00:13:29.120
hour, regardless of how much
time you actually use.

00:13:29.120 --> 00:13:33.410
So if you have a 15 minute
job, that's done after 15

00:13:33.410 --> 00:13:37.750
minutes, you still pay for 60
minutes, which increases your

00:13:37.750 --> 00:13:41.020
actual cost by four times.

00:13:41.020 --> 00:13:43.870
So just think about that,
imagine making at 15 minute

00:13:43.870 --> 00:13:47.840
phone call, and you get charged
for a full hour.

00:13:47.840 --> 00:13:50.360
It makes no sense.

00:13:50.360 --> 00:13:55.100
And starting today, you won't
get overcharged like that on

00:13:55.100 --> 00:13:56.390
Compute Engine.

00:13:56.390 --> 00:14:00.740
We're introducing sub-hour
billing, which means that

00:14:00.740 --> 00:14:03.510
you'd have the value and the
flexibility that you'd want

00:14:03.510 --> 00:14:04.360
from the cloud.

00:14:04.360 --> 00:14:06.260
And specifically, we're
billing in one minute

00:14:06.260 --> 00:14:10.620
increments, with a 10
minute minimum.

00:14:10.620 --> 00:14:13.835
So you really pay only for
what you actually use.

00:14:13.835 --> 00:14:16.290
AUDIENCE: [APPLAUSE]

00:14:16.290 --> 00:14:18.060
URS HOELZLE: Thank you.

00:14:18.060 --> 00:14:20.640
So sub-hour billing really
changes how you can think

00:14:20.640 --> 00:14:22.590
about building your
applications.

00:14:22.590 --> 00:14:25.680
So suppose you have a MapReduce,
and it's running

00:14:25.680 --> 00:14:28.180
for an hour, and that's
too slow.

00:14:28.180 --> 00:14:31.900
And suppose you want to make
it complete in 15 minutes.

00:14:31.900 --> 00:14:35.610
Well, it's easy, just add four
times as many servers.

00:14:35.610 --> 00:14:39.330
You get charged for four times
as many servers but only for

00:14:39.330 --> 00:14:39.980
15 minutes.

00:14:39.980 --> 00:14:43.640
So you end up paying basically
the same thing as before, yet

00:14:43.640 --> 00:14:45.820
your job runs four
times faster.

00:14:45.820 --> 00:14:48.630
In other cloud providers, you'd
have to pay a four times

00:14:48.630 --> 00:14:51.510
premium for that extra speedup,
which really doesn't

00:14:51.510 --> 00:14:55.250
make it a viable choice.

00:14:55.250 --> 00:15:00.360
So the sorting world record,
that you saw before, now,

00:15:00.360 --> 00:15:03.990
instead of $1,200,
only costs $200.

00:15:03.990 --> 00:15:07.480
So that's really value,
performance, and scalability

00:15:07.480 --> 00:15:09.960
all in one place.

00:15:09.960 --> 00:15:14.800
But sometimes you need only a
little bit of VM, maybe for

00:15:14.800 --> 00:15:19.020
testing or for an application
that just doesn't

00:15:19.020 --> 00:15:20.600
need a lot of CPU.

00:15:20.600 --> 00:15:23.550
So we're introducing smaller
micro-instances.

00:15:23.550 --> 00:15:25.560
They're very cost effective
ways to

00:15:25.560 --> 00:15:27.300
handle these workloads.

00:15:27.300 --> 00:15:30.680
But unlike other provider's
small instances, these

00:15:30.680 --> 00:15:33.510
instances still have predictable
performance, not

00:15:33.510 --> 00:15:35.780
just best effort performance.

00:15:35.780 --> 00:15:39.430
So just as sub-hour billing lets
you scale up a workload,

00:15:39.430 --> 00:15:43.670
these instances let you scale
it down with predictable

00:15:43.670 --> 00:15:45.750
performance.

00:15:45.750 --> 00:15:50.680
We also have advanced routing
that lets you connect your

00:15:50.680 --> 00:15:53.490
on-premise infrastructure,
with an

00:15:53.490 --> 00:15:56.410
encrypted VPN, to the cloud.

00:15:56.410 --> 00:15:59.120
It's very easy to use,
very straightforward.

00:15:59.120 --> 00:16:03.410
Now you can have applications
that really span both

00:16:03.410 --> 00:16:04.660
infrastructures.

00:16:06.410 --> 00:16:12.020
Persistent disks are a big
portion of the value in the

00:16:12.020 --> 00:16:13.730
infrastructure.

00:16:13.730 --> 00:16:19.440
You want to attach persistent
disks to your VMs.

00:16:19.440 --> 00:16:23.980
And our persistent disks are
limited to 1 terabyte, which,

00:16:23.980 --> 00:16:27.220
even though it matches what
other providers have, isn't

00:16:27.220 --> 00:16:27.940
really enough.

00:16:27.940 --> 00:16:30.320
And so we were asked to
make them bigger.

00:16:30.320 --> 00:16:32.490
And you were right.

00:16:32.490 --> 00:16:34.350
1 terabyte isn't really
big enough.

00:16:34.350 --> 00:16:36.190
So starting today,
you can have 10

00:16:36.190 --> 00:16:39.560
terabyte persistent disks.

00:16:39.560 --> 00:16:43.750
And I'm especially proud that
we've are introducing this 11

00:16:43.750 --> 00:16:47.720
months after we started, after
we first announced Compute

00:16:47.720 --> 00:16:52.270
Engine, where other leading
providers, after seven years,

00:16:52.270 --> 00:16:54.210
have not managed to have
persistent disks

00:16:54.210 --> 00:16:56.330
larger than 1 terabytes.

00:16:56.330 --> 00:17:02.560
So speaking of storage, if
you've been using App Engine,

00:17:02.560 --> 00:17:07.210
you loved Datastore, because
Datastore is, basically, Big

00:17:07.210 --> 00:17:12.319
Table, a NoSQL data store that
is very, very scalable and

00:17:12.319 --> 00:17:14.710
very, very easy to use.

00:17:14.710 --> 00:17:18.700
So the App Engine high
replication Datastore has been

00:17:18.700 --> 00:17:20.810
incredibly popular.

00:17:20.810 --> 00:17:25.230
This Datastore, today, serves
over 4.5 trillion

00:17:25.230 --> 00:17:27.619
transactions per month.

00:17:27.619 --> 00:17:31.350
That's trillion not billion.

00:17:31.350 --> 00:17:33.030
So it's been incredibly
successful.

00:17:33.030 --> 00:17:36.530
It's twice the load that it
handled, less than 11 months

00:17:36.530 --> 00:17:38.760
ago, at Google I/O.

00:17:38.760 --> 00:17:42.590
And now you can use this
Datastore, from anywhere, as a

00:17:42.590 --> 00:17:45.660
service, the Google
Cloud Datastore.

00:17:45.660 --> 00:17:48.540
So whether you build your
application on App Engine or

00:17:48.540 --> 00:17:50.620
on Compute Engine or
elsewhere, you

00:17:50.620 --> 00:17:52.120
can access this Datastore.

00:17:52.120 --> 00:17:57.590
And because it's NoSQL, it has
fast queries response time, no

00:17:57.590 --> 00:18:01.770
matter whether you have
a 10K row table or a

00:18:01.770 --> 00:18:03.720
10 million row table.

00:18:03.720 --> 00:18:09.400
So you can use it from any
language and from anywhere.

00:18:09.400 --> 00:18:13.150
Speaking of App Engine, as you
know App Engine has been

00:18:13.150 --> 00:18:19.140
around for a number of years and
provides a scalable, very

00:18:19.140 --> 00:18:23.320
easy to use, managed way to
build applications without the

00:18:23.320 --> 00:18:25.595
hassle of managing servers.

00:18:25.595 --> 00:18:29.590
It now has over 3 million active
applications, active

00:18:29.590 --> 00:18:32.810
running applications, making
it one of the top Google

00:18:32.810 --> 00:18:36.190
services, and has thriving
communities around

00:18:36.190 --> 00:18:39.300
Python, Java, Go.

00:18:39.300 --> 00:18:42.780
But it's missing one of the most
popular languages on the

00:18:42.780 --> 00:18:46.910
web, one that powers 3/4
of all websites.

00:18:46.910 --> 00:18:50.820
Well, starting today, PHP
developers can get the

00:18:50.820 --> 00:18:52.570
benefits of App Engine.

00:18:52.570 --> 00:18:58.420
AUDIENCE: [APPLAUSE]

00:18:58.420 --> 00:19:01.100
URS HOELZLE: This isn't like
your existing PHP stacks.

00:19:01.100 --> 00:19:06.880
So with App Engine, you don't
have to manage your PHP stack.

00:19:06.880 --> 00:19:09.310
We patch it and manage
for you.

00:19:09.310 --> 00:19:13.060
And because it's App Engine, if
your site gets no traffic,

00:19:13.060 --> 00:19:14.660
it costs you nothing.

00:19:14.660 --> 00:19:17.340
But if your site gets
a lot of traffic, we

00:19:17.340 --> 00:19:18.950
can scale it up fast.

00:19:18.950 --> 00:19:20.930
And by fast, I mean fast.

00:19:20.930 --> 00:19:24.562
We scale up new instances
in fractions of a

00:19:24.562 --> 00:19:27.390
second, not in minutes.

00:19:27.390 --> 00:19:30.390
And these instances
are not shared.

00:19:30.390 --> 00:19:33.440
They are securely isolated.

00:19:33.440 --> 00:19:36.170
Static caching is built in.

00:19:36.170 --> 00:19:39.680
The data use store is
automatically replicated

00:19:39.680 --> 00:19:42.090
between multiple data centers.

00:19:42.090 --> 00:19:46.310
So this isn't your daddy's
PHP server.

00:19:46.310 --> 00:19:49.810
In fact, just this weekend,
literally, this weekend, we

00:19:49.810 --> 00:19:55.930
helped someone port their
existing PHP website to App

00:19:55.930 --> 00:19:59.490
Engine PHP, because they were
anticipating a flash crowd,

00:19:59.490 --> 00:20:01.480
which in fact did happen.

00:20:01.480 --> 00:20:06.040
It took only a few hours to port
to site including turning

00:20:06.040 --> 00:20:08.340
on Page Speed service.

00:20:08.340 --> 00:20:11.580
And the result was that they
had a highly scalable site,

00:20:11.580 --> 00:20:15.770
where a cold page load was four
times faster than before.

00:20:15.770 --> 00:20:20.480
So PHP has never been easier
to use and run.

00:20:20.480 --> 00:20:23.620
Speaking of App Engine, still,
a lot of you write large

00:20:23.620 --> 00:20:25.380
applications on App Engine.

00:20:25.380 --> 00:20:29.700
And we've made it much easier,
now, to have such large

00:20:29.700 --> 00:20:30.860
applications.

00:20:30.860 --> 00:20:34.700
Because you can build modules
inside your applications.

00:20:34.700 --> 00:20:38.210
And these modules logically
separate your code.

00:20:38.210 --> 00:20:41.640
They let you develop, with
independent teams.

00:20:41.640 --> 00:20:46.850
And you can, at a fine-grained
level, control the versioning,

00:20:46.850 --> 00:20:51.570
the ACLs, the updates, the
[? codas ?], and so on of

00:20:51.570 --> 00:20:52.870
these different modules.

00:20:52.870 --> 00:20:56.250
And in fact, you can use
different languages for these

00:20:56.250 --> 00:20:59.350
different modules, all in
the same application.

00:20:59.350 --> 00:21:03.170
And they all share the same
backend datastores.

00:21:03.170 --> 00:21:05.790
So writing large applications
in App Engine

00:21:05.790 --> 00:21:07.040
has never been easier.

00:21:10.310 --> 00:21:13.990
Well, actually, it can
get even easier.

00:21:13.990 --> 00:21:18.840
As you saw in the keynote, this
morning, we're making it

00:21:18.840 --> 00:21:23.280
even easier to write
mobile backends.

00:21:23.280 --> 00:21:26.450
Many of you already are using
the Google Cloud, as a

00:21:26.450 --> 00:21:29.310
backend, for mobile
applications.

00:21:29.310 --> 00:21:34.110
And with the tools you saw this
morning, in Android, in

00:21:34.110 --> 00:21:37.380
the keynote, we're making it
even easier for you to

00:21:37.380 --> 00:21:39.980
interface with your backend
and to generate a

00:21:39.980 --> 00:21:41.340
lot of code for it.

00:21:41.340 --> 00:21:44.020
You'll see that later in this.

00:21:44.020 --> 00:21:47.760
You'll see it live, later
in this talk.

00:21:47.760 --> 00:21:50.760
But we know that some of
you actually don't want

00:21:50.760 --> 00:21:52.560
to write any code.

00:21:52.560 --> 00:21:58.550
So we also are introducing the
Mobile Starter Kit, which is,

00:21:58.550 --> 00:22:02.090
literally, a no-server
code solution.

00:22:02.090 --> 00:22:05.170
You get a backend, a mobile
backend, with push

00:22:05.170 --> 00:22:07.840
notifications and
authentication.

00:22:07.840 --> 00:22:10.250
And you don't have to
write any code.

00:22:10.250 --> 00:22:13.060
Well, you do have to write code,
namely the code for your

00:22:13.060 --> 00:22:15.872
client, that's the code
you want to write.

00:22:15.872 --> 00:22:20.610
No overhead, the cloud really
doesn't get easier than this.

00:22:20.610 --> 00:22:23.720
Finally, last but not least, we
know that a lot of you care

00:22:23.720 --> 00:22:24.970
about security.

00:22:24.970 --> 00:22:28.090
And in fact, a lot of
organizations require their

00:22:28.090 --> 00:22:29.910
infrastructure to
be certified.

00:22:29.910 --> 00:22:35.260
So I'm happy to announce that
we have ISO 27K security

00:22:35.260 --> 00:22:39.800
certification for all of our
cloud, Compute Engine, App

00:22:39.800 --> 00:22:41.810
Engine, and storage.

00:22:41.810 --> 00:22:45.550
And this is just one example of
our commitment to security.

00:22:45.550 --> 00:22:49.700
And you'll hear more about
that later this year.

00:22:49.700 --> 00:22:53.640
But now, let's see this cloud
platform in action.

00:22:53.640 --> 00:22:58.550
So Greg will show you how easy
it is to build an application,

00:22:58.550 --> 00:23:01.510
by mixing and matching the
different components of our

00:23:01.510 --> 00:23:02.060
infrastructure.

00:23:02.060 --> 00:23:03.023
Greg.

00:23:03.023 --> 00:23:07.600
AUDIENCE: [APPLAUSE]

00:23:07.600 --> 00:23:10.370
GREG DEMICHILLIE: Thanks, Urs.

00:23:10.370 --> 00:23:13.330
As Urs mentioned, I'm going
to spend the next 25 or so

00:23:13.330 --> 00:23:16.410
minutes building out an
application that uses some of

00:23:16.410 --> 00:23:18.990
these new features of the
cloud platform that we

00:23:18.990 --> 00:23:20.190
announced today.

00:23:20.190 --> 00:23:22.160
And because this is a developer
conference, we're

00:23:22.160 --> 00:23:25.270
going to spend the next 25
minutes looking at code.

00:23:25.270 --> 00:23:28.410
I also want to introduce Brian
Lynch, a solutions architect,

00:23:28.410 --> 00:23:30.330
on the cloud platform, who's
going to help us as we go

00:23:30.330 --> 00:23:31.610
through this.

00:23:31.610 --> 00:23:35.540
So let me start by describing to
you what this application,

00:23:35.540 --> 00:23:36.790
that we're going to build, is.

00:23:40.290 --> 00:23:42.350
We're going to build
a video sharing

00:23:42.350 --> 00:23:45.290
site for I/O attendees.

00:23:45.290 --> 00:23:47.910
This is going to have a site
that allows us to upload

00:23:47.910 --> 00:23:51.270
videos, view videos,
comment on them.

00:23:51.270 --> 00:23:53.170
And it's going to have
a mobile companion,

00:23:53.170 --> 00:23:55.300
as well, for us.

00:23:55.300 --> 00:23:57.420
So let's start by looking at the
architecture we're going

00:23:57.420 --> 00:24:01.250
to use to build this
application.

00:24:01.250 --> 00:24:04.550
It is going to be a web
front-end that's written in

00:24:04.550 --> 00:24:06.880
App Engine, that does
the heavy lifting.

00:24:06.880 --> 00:24:10.230
We're going to use a variety of
data storage technologies,

00:24:10.230 --> 00:24:14.670
from Cloud SQL to the Cloud
Datastore, to cloud storage.

00:24:14.670 --> 00:24:16.240
There's some processing
we're going to do

00:24:16.240 --> 00:24:17.100
with Compute Engine.

00:24:17.100 --> 00:24:18.830
And I'll talk about that
when we get to it.

00:24:18.830 --> 00:24:21.850
And then, finally, we're going
to build a mobile front-end,

00:24:21.850 --> 00:24:25.200
using the Android tools, to tie
the whole thing together.

00:24:25.200 --> 00:24:29.310
So let's start with the
App Engine front-end.

00:24:29.310 --> 00:24:33.920
As Urs mentioned, App Engine was
originally built to take

00:24:33.920 --> 00:24:37.400
away the tedious, error prone,
grunt work from making a

00:24:37.400 --> 00:24:40.460
global scale, highly available
application.

00:24:40.460 --> 00:24:44.400
It's hugely successful, with 3
million active applications.

00:24:44.400 --> 00:24:47.700
And as Urs mentioned, there's
big communities, around the

00:24:47.700 --> 00:24:52.390
Java and Go and Python and now
we've added PHP to the mix.

00:24:52.390 --> 00:24:54.810
So we're going to use PHP
to build this particular

00:24:54.810 --> 00:24:56.470
application.

00:24:56.470 --> 00:24:59.100
So let's take a look at
PHP on App Engine.

00:24:59.100 --> 00:25:02.410
We'll switch over to
the demo machine.

00:25:02.410 --> 00:25:04.970
And what we have here
is a laptop with

00:25:04.970 --> 00:25:06.830
the Cloud SDK installed.

00:25:06.830 --> 00:25:08.410
We're going to use my favorite
text editor,

00:25:08.410 --> 00:25:10.000
in this case, Sublime.

00:25:10.000 --> 00:25:12.470
And we're going to start by
creating, sort of, a Hello

00:25:12.470 --> 00:25:15.380
World application, the simplest
PHP application we

00:25:15.380 --> 00:25:16.340
can think of.

00:25:16.340 --> 00:25:20.880
So we'll put the PHP tag, and
we'll do a call phpinfo.

00:25:20.880 --> 00:25:24.200
For those of you who don't know
PHP, phpinfo basically

00:25:24.200 --> 00:25:26.780
returns a bunch of information
about the environment you're

00:25:26.780 --> 00:25:28.820
running in, the server
environment, the

00:25:28.820 --> 00:25:30.450
configuration, and all that.

00:25:30.450 --> 00:25:32.190
So it's one line of code
that will generate

00:25:32.190 --> 00:25:36.070
some interesting content.

00:25:36.070 --> 00:25:42.050
Now, as Urs mentioned, we are
striving for a 100% compatible

00:25:42.050 --> 00:25:44.050
version of PHP here.

00:25:44.050 --> 00:25:46.670
So for many, many applications,
there are

00:25:46.670 --> 00:25:48.590
absolutely no code changes.

00:25:48.590 --> 00:25:52.960
But App Engine actually adds
extra value on top of PHP.

00:25:52.960 --> 00:25:55.820
So let's look a little bit at
the configuration information

00:25:55.820 --> 00:25:57.980
that we need to provide
for App Engine.

00:25:57.980 --> 00:26:00.230
Some of this is what you'd
expect for App Engine, the

00:26:00.230 --> 00:26:02.950
project ID, the name.

00:26:02.950 --> 00:26:05.760
Those of you use App Engine,
know that App Engine provides

00:26:05.760 --> 00:26:08.760
built-in support for versioning
and rollbacks, so

00:26:08.760 --> 00:26:11.600
you can deploy new versions
of an application.

00:26:11.600 --> 00:26:12.350
If they don't work.

00:26:12.350 --> 00:26:14.550
You can roll them
back instantly.

00:26:14.550 --> 00:26:17.350
So we've given this
a version number.

00:26:17.350 --> 00:26:20.910
We've put index.php as the
name of the script

00:26:20.910 --> 00:26:22.280
that this will run.

00:26:22.280 --> 00:26:24.840
So with that, we've built
our application.

00:26:24.840 --> 00:26:26.740
Let's flip over to
the terminal.

00:26:26.740 --> 00:26:29.350
And we will publish
that app using the

00:26:29.350 --> 00:26:31.410
standard App Engine tool.

00:26:31.410 --> 00:26:34.410
We'll tell it that the
runtime for this

00:26:34.410 --> 00:26:38.350
particular project is PHP.

00:26:38.350 --> 00:26:39.820
And we'll give it
the name of it.

00:26:39.820 --> 00:26:41.150
And up it goes.

00:26:41.150 --> 00:26:43.340
So App Engine is collecting
the resources.

00:26:43.340 --> 00:26:45.210
It's compiling the PHP.

00:26:45.210 --> 00:26:48.820
It's uploading all of that
into the application.

00:26:48.820 --> 00:26:50.800
It checks for the deployment
to work.

00:26:50.800 --> 00:26:54.330
Sure enough, and the app
is up and running.

00:26:54.330 --> 00:26:59.230
So let's pop over to the browser
and look at this.

00:26:59.230 --> 00:27:00.800
So here's the PHP info.

00:27:00.800 --> 00:27:03.430
It has all of the information
that we would expect.

00:27:03.430 --> 00:27:05.230
That we are running on Linux.

00:27:05.230 --> 00:27:07.660
Later on down, it will list the
version of the frameworks

00:27:07.660 --> 00:27:08.680
that are installed.

00:27:08.680 --> 00:27:11.890
I'll point out the server API
line showing that this is

00:27:11.890 --> 00:27:14.900
actually running on an App
Engine PHP server.

00:27:14.900 --> 00:27:18.870
So that's a "hello world", but
now let's actually turn around

00:27:18.870 --> 00:27:20.860
and build our application.

00:27:20.860 --> 00:27:24.800
And what's PHP without SQL?

00:27:24.800 --> 00:27:26.940
Luckily, with the cloud
platform, we have

00:27:26.940 --> 00:27:28.520
Google Cloud SQL.

00:27:28.520 --> 00:27:32.120
Cloud SQL is a cloud hosted
service that marries the

00:27:32.120 --> 00:27:35.670
industry standard, MySQL
front-end, to a highly

00:27:35.670 --> 00:27:38.750
available backend, all running
on Google managed, Google

00:27:38.750 --> 00:27:41.210
hosted infrastructure.

00:27:41.210 --> 00:27:43.560
As a developer, I don't have
to worry about configuring

00:27:43.560 --> 00:27:44.680
this MySQL.

00:27:44.680 --> 00:27:47.500
I don't have to worry about
deploying it, maintaining it.

00:27:47.500 --> 00:27:50.690
I just use industry standard
tools, like JDBC, Crystal

00:27:50.690 --> 00:27:53.380
Reports, SQuirreL SQL
to manage it.

00:27:53.380 --> 00:27:57.170
So to help get us started, we
pre-populated a Cloud SQL

00:27:57.170 --> 00:28:01.470
database with some videos that
we took in the week running up

00:28:01.470 --> 00:28:02.700
to the conference.

00:28:02.700 --> 00:28:04.150
So let's take a look at that.

00:28:04.150 --> 00:28:06.560
We're going to switch over
to our command line.

00:28:06.560 --> 00:28:10.170
We're going to use the Cloud
SQL command tools.

00:28:10.170 --> 00:28:14.270
And I'm going to specify the
name of the project and the

00:28:14.270 --> 00:28:17.560
name of the instance, of Cloud
SQL, that I'm running on, and

00:28:17.560 --> 00:28:19.780
then the particular database
I want to look at.

00:28:22.360 --> 00:28:23.510
So we have connection.

00:28:23.510 --> 00:28:26.320
And now I can use just standard
MySQL-type commands.

00:28:26.320 --> 00:28:28.080
We'll show the tables.

00:28:28.080 --> 00:28:29.170
You'll see that there's
a table of

00:28:29.170 --> 00:28:31.180
videos, a table of users.

00:28:31.180 --> 00:28:35.050
We'll select the first, I don't
know, 10 or 50 videos

00:28:35.050 --> 00:28:37.530
from the videos table.

00:28:37.530 --> 00:28:39.770
And what I want to point
out here is, of

00:28:39.770 --> 00:28:41.050
course, there's an ID.

00:28:41.050 --> 00:28:44.050
You'll notice that what's stored
here is a URL into

00:28:44.050 --> 00:28:45.270
Google Cloud Storage.

00:28:45.270 --> 00:28:49.880
We're actually storing these
videos in cloud storage.

00:28:49.880 --> 00:28:52.680
So let's actually start to build
out the application to

00:28:52.680 --> 00:28:53.840
query these.

00:28:53.840 --> 00:28:55.860
To make it a little bit simpler,
we're going to switch

00:28:55.860 --> 00:28:57.100
over to the desktop.

00:28:57.100 --> 00:29:00.770
And I'm going to drag and drop
in a bunch of CSS and HTML and

00:29:00.770 --> 00:29:06.310
JavaScript to make the
application look pretty.

00:29:06.310 --> 00:29:09.720
And we're going to look at one
particular bit of code, which

00:29:09.720 --> 00:29:12.040
is the code that queries
the MySQL database.

00:29:14.540 --> 00:29:17.480
If you know PHP, this code
should look very, very

00:29:17.480 --> 00:29:18.600
familiar to you.

00:29:18.600 --> 00:29:23.190
This is standard PHP MySQL code,
the standard connection

00:29:23.190 --> 00:29:25.700
string and a standard query.

00:29:25.700 --> 00:29:29.170
But there are advantages of
running with Cloud SQL.

00:29:29.170 --> 00:29:33.280
We know that this App Engine
app and this Cloud SQL are

00:29:33.280 --> 00:29:35.870
part of the same project,
because you told us that.

00:29:35.870 --> 00:29:38.290
That allows us to automatically
configure the

00:29:38.290 --> 00:29:42.220
firewalls to allow those two to
talk to each other, while

00:29:42.220 --> 00:29:45.830
keeping them isolated from
other traffic and other

00:29:45.830 --> 00:29:49.150
projects that are running
on the infrastructure.

00:29:49.150 --> 00:29:52.760
It also allows us to place
those instances, in our

00:29:52.760 --> 00:29:56.020
infrastructure, in a way that
reduces latency between them.

00:29:56.020 --> 00:29:58.620
Because, again, we know that
this particular Cloud SQL

00:29:58.620 --> 00:30:01.860
database and this particular
application are running with

00:30:01.860 --> 00:30:03.430
each other.

00:30:03.430 --> 00:30:05.035
So let's go ahead and
run this app.

00:30:09.360 --> 00:30:13.240
And so now I've got my nice
pretty CSS and HTML.

00:30:13.240 --> 00:30:16.470
We've retrieved, from the
database, the URLs, the

00:30:16.470 --> 00:30:18.360
thumbnails for all the videos.

00:30:18.360 --> 00:30:21.860
So we'll just pick one
at random there.

00:30:21.860 --> 00:30:23.150
And were retrieving the video.

00:30:23.150 --> 00:30:26.440
And there's Joe waving at us.

00:30:26.440 --> 00:30:32.170
So that's a simple use of
querying a Cloud SQL database.

00:30:32.170 --> 00:30:34.570
Now this is a video site.

00:30:34.570 --> 00:30:35.940
And it is 2013.

00:30:35.940 --> 00:30:39.280
So, clearly, I have to have
comments on a video, right?

00:30:39.280 --> 00:30:42.130
In fact, I expect this site
to be wildly popular.

00:30:42.130 --> 00:30:45.230
I think I might have thousands
of comments for every video.

00:30:45.230 --> 00:30:47.020
And I have thousands
of videos.

00:30:47.020 --> 00:30:51.670
So clearly, I need a very low
latency, high performance

00:30:51.670 --> 00:30:54.340
datastore to hold
those comments.

00:30:54.340 --> 00:30:57.560
Now, fortunately, we have Cloud
Datastore, our built-in

00:30:57.560 --> 00:30:59.060
NoSQL database.

00:30:59.060 --> 00:31:01.250
As Urs mentioned, we're
currently handling over 4 and

00:31:01.250 --> 00:31:03.370
1/2 trillion requests a month.

00:31:03.370 --> 00:31:06.110
I think that's enough
scalability for the comments

00:31:06.110 --> 00:31:07.800
we're going to process.

00:31:07.800 --> 00:31:09.140
So let's take a look at that.

00:31:11.880 --> 00:31:13.600
We flip over.

00:31:13.600 --> 00:31:17.500
This is a little bit of code,
from App Engine, that accesses

00:31:17.500 --> 00:31:22.790
the comments in the
Cloud Datastore.

00:31:22.790 --> 00:31:25.026
You'll notice, again, it looks
very familiar to you if you're

00:31:25.026 --> 00:31:26.470
a PHP developer.

00:31:26.470 --> 00:31:28.280
It's retrieving a little
bit of information

00:31:28.280 --> 00:31:29.480
from the HTML page.

00:31:29.480 --> 00:31:31.280
So it's getting the comment.

00:31:31.280 --> 00:31:33.210
It's retrieving a little bit
of information from the

00:31:33.210 --> 00:31:36.310
session state, so I know the
name of the logged in user.

00:31:36.310 --> 00:31:38.590
It's constructing a
comment entity.

00:31:38.590 --> 00:31:41.770
It's putting in the text, the
current date, the user, and

00:31:41.770 --> 00:31:44.650
then it's calling the PUT method
to actually take that

00:31:44.650 --> 00:31:47.510
data and store it into
Cloud Datastore.

00:31:47.510 --> 00:31:49.960
Once it's stored, if we scroll
down a little bit farther,

00:31:49.960 --> 00:31:52.240
we'll see the code
to retrieve it.

00:31:52.240 --> 00:31:55.070
It's creating a query
for the comment.

00:31:55.070 --> 00:31:57.670
It's filtering it
by the video ID.

00:31:57.670 --> 00:32:00.590
It's ordering it by the
date it was added.

00:32:00.590 --> 00:32:02.790
And then it's actually taking
that and putting it

00:32:02.790 --> 00:32:04.960
into the HTML page.

00:32:04.960 --> 00:32:07.130
So we already have some
comments we added.

00:32:07.130 --> 00:32:08.930
So let's flip back over
and see what people

00:32:08.930 --> 00:32:11.570
think of Joe's waving.

00:32:11.570 --> 00:32:13.990
And they seem to like it.

00:32:13.990 --> 00:32:17.550
So Brian, what do you
think of Joe's wave?

00:32:17.550 --> 00:32:17.995
BRIAN LYNCH: Great.

00:32:17.995 --> 00:32:20.390
GREG DEMICHILLIE: Great wave.

00:32:20.390 --> 00:32:20.700
Great.

00:32:20.700 --> 00:32:23.980
So when he hits Enter, we'll
create that, post it into the

00:32:23.980 --> 00:32:26.340
datastore, pull it back,
and there we have it.

00:32:26.340 --> 00:32:30.450
So now we have App Engine
accessing a very, highly

00:32:30.450 --> 00:32:33.890
available, highly scalable,
global datastore.

00:32:33.890 --> 00:32:36.650
So let me flip back to
the slides for a sec.

00:32:36.650 --> 00:32:38.960
Let me sort of recap what
we've done so far.

00:32:41.740 --> 00:32:44.890
We've built the front-end, using
PHP, the language the

00:32:44.890 --> 00:32:48.010
powers 3/4 of the world's
websites.

00:32:48.010 --> 00:32:50.630
We've accessed data in
a variety of forms.

00:32:50.630 --> 00:32:54.020
We've queried a database, in
Cloud SQL, using just the

00:32:54.020 --> 00:32:59.200
plain, old PHP MySQL integration
that I'm used to.

00:32:59.200 --> 00:33:03.600
I've used cloud storage to
access, potentially, terabytes

00:33:03.600 --> 00:33:07.080
of data that I've stored
in actual videos.

00:33:07.080 --> 00:33:10.820
We've used a NoSQL database,
in the Cloud Datastore, to

00:33:10.820 --> 00:33:13.740
store and update comments.

00:33:13.740 --> 00:33:17.720
So that's a pretty good
front-end so far.

00:33:17.720 --> 00:33:22.290
But you know, behind most of the
most popular websites out

00:33:22.290 --> 00:33:25.120
there, somewhere, there
is some heavy duty

00:33:25.120 --> 00:33:27.150
processing going on.

00:33:27.150 --> 00:33:29.760
That could be analyzing
log files.

00:33:29.760 --> 00:33:32.360
It could be building
recommendation engines, to

00:33:32.360 --> 00:33:34.710
tell you that, if you like
a, you might like b.

00:33:34.710 --> 00:33:39.020
It could be processing media,
whether it's audio or video.

00:33:39.020 --> 00:33:42.220
In our case, we want to allow
our users to upload the

00:33:42.220 --> 00:33:46.310
videos, in any format, and then
we want to transcode that

00:33:46.310 --> 00:33:50.180
to a variety of formats, for
a variety of devices.

00:33:50.180 --> 00:33:55.960
That sort of work is a really
good task for Compute Engine.

00:33:55.960 --> 00:33:58.400
It's spiky computationally,
right?

00:33:58.400 --> 00:33:59.970
So it only happens
when somebody

00:33:59.970 --> 00:34:01.610
actually uploads a video.

00:34:01.610 --> 00:34:04.640
It actually is CPU intensive.

00:34:04.640 --> 00:34:08.170
And so it's the kind of task
where I want the cores I want,

00:34:08.170 --> 00:34:12.159
when I want them, and with
the performance I expect.

00:34:12.159 --> 00:34:14.980
So it's a really good job
for Compute Engine.

00:34:14.980 --> 00:34:18.050
Since the last I/O, we've been
very busy hardening the

00:34:18.050 --> 00:34:20.179
Compute Engine service,
rolling out new

00:34:20.179 --> 00:34:21.300
capabilities for it.

00:34:21.300 --> 00:34:24.360
So let me give you an update
of what Compute

00:34:24.360 --> 00:34:25.760
Engine looks like.

00:34:25.760 --> 00:34:29.610
So let's switch back to
our cloud console.

00:34:29.610 --> 00:34:32.659
And this is, for those you who
have noticed already, we've

00:34:32.659 --> 00:34:35.010
rolled out a new version
of the Cloud Console.

00:34:35.010 --> 00:34:36.710
Compute Engine now
appears in it.

00:34:36.710 --> 00:34:39.159
I think the console
looks great.

00:34:39.159 --> 00:34:41.900
So let's first show you the user
interface for creating a

00:34:41.900 --> 00:34:44.300
new instance.

00:34:44.300 --> 00:34:47.850
So to create an instance, I
populate it with all the

00:34:47.850 --> 00:34:49.000
things you'd expect.

00:34:49.000 --> 00:34:50.590
I give it a name, a region.

00:34:50.590 --> 00:34:52.679
I apply metadata to it.

00:34:52.679 --> 00:34:55.489
If Brian scrolls down, we look
at the machine types.

00:34:55.489 --> 00:34:57.940
We've been busy expanding
the range of

00:34:57.940 --> 00:34:59.650
machine types we offer.

00:34:59.650 --> 00:35:02.540
So we have everything from one
to eight cores, with the

00:35:02.540 --> 00:35:06.230
disks, without disks, high
memory, high CPU.

00:35:06.230 --> 00:35:10.040
So pretty much whatever the type
of load you have, we've

00:35:10.040 --> 00:35:12.810
got a machine type there
that's suited for it.

00:35:12.810 --> 00:35:15.920
Now, in our case, we're not
going to create VMs with the

00:35:15.920 --> 00:35:16.900
user interface.

00:35:16.900 --> 00:35:18.550
We're going to create them
programmatically

00:35:18.550 --> 00:35:20.340
via the REST API.

00:35:20.340 --> 00:35:23.610
Because we're going to have App
Engine orchestrate these

00:35:23.610 --> 00:35:24.840
virtual machines.

00:35:24.840 --> 00:35:27.840
App Engine is going to be the
one that creates VMs as we

00:35:27.840 --> 00:35:30.470
need them and kills them when
we don't need them anymore.

00:35:30.470 --> 00:35:32.580
And for everything you do in the
Cloud Console, there's a

00:35:32.580 --> 00:35:36.820
corresponding REST API
that lets you do it.

00:35:36.820 --> 00:35:39.030
So we've got a quick
upload page,

00:35:39.030 --> 00:35:40.280
here, that we've created.

00:35:44.430 --> 00:35:47.320
And it's a simple HTML
target that allows me

00:35:47.320 --> 00:35:48.330
to drag videos in.

00:35:48.330 --> 00:35:52.340
Now, we could drag one video
in and watch what happens.

00:35:52.340 --> 00:35:54.010
But one video?

00:35:54.010 --> 00:35:56.080
I mean that's not really Google
scale, is it, right?

00:35:56.080 --> 00:35:57.730
You guys just saw maps
of the Earth.

00:35:57.730 --> 00:36:00.600
So I think you expect a little
more than one video.

00:36:00.600 --> 00:36:04.450
So let's drop 1,000 in.

00:36:04.450 --> 00:36:09.800
Now VMs take 20 to 30 seconds
to spin up, which may seems

00:36:09.800 --> 00:36:12.950
fast to you, but, to us,
that's still too slow.

00:36:12.950 --> 00:36:15.470
But while it does that, let me
just talk to you about what

00:36:15.470 --> 00:36:16.630
it's doing.

00:36:16.630 --> 00:36:20.270
We could have App Engine just
fire up one VM and tell it,

00:36:20.270 --> 00:36:21.990
encode 1,000 videos.

00:36:21.990 --> 00:36:23.500
But that would take a while.

00:36:23.500 --> 00:36:25.890
What I really want to do is
have a fleet of virtual

00:36:25.890 --> 00:36:29.060
machines that I spread
the work out to.

00:36:29.060 --> 00:36:32.080
And that's exactly what the App
Engine app is doing here.

00:36:32.080 --> 00:36:34.670
It's firing up a bank of VMs.

00:36:34.670 --> 00:36:37.670
It's using our Compute Engine
management APIs to

00:36:37.670 --> 00:36:39.900
monitor the CPU load.

00:36:39.900 --> 00:36:43.740
If the CPU loads are all busy,
it fires up more VMs, so the

00:36:43.740 --> 00:36:45.010
job gets done quickly.

00:36:45.010 --> 00:36:49.080
If the CPU load drops, it gives
that VM more jobs to do.

00:36:49.080 --> 00:36:51.540
When it's finally done, it goes
through and it shuts down

00:36:51.540 --> 00:36:57.020
all the VMs, so that I don't
pay for the usage any more.

00:36:57.020 --> 00:37:00.950
And this is a good example of
why fast start-up and sub-hour

00:37:00.950 --> 00:37:02.760
billing is so cool.

00:37:02.760 --> 00:37:06.690
I can literally throw cores at
a problem, because the VMs

00:37:06.690 --> 00:37:08.030
start-up quickly.

00:37:08.030 --> 00:37:08.820
They do the work.

00:37:08.820 --> 00:37:10.370
And I only pay for the
minutes that I'm

00:37:10.370 --> 00:37:12.420
actually running them.

00:37:12.420 --> 00:37:14.050
So I think, by this time,
we should have

00:37:14.050 --> 00:37:15.170
some VMs up and running.

00:37:15.170 --> 00:37:16.940
So let's pop back over
to the console.

00:37:16.940 --> 00:37:19.540
And you'll notice, down there,
there's the list of our VMs.

00:37:19.540 --> 00:37:21.700
They're in alphabetical order,
not the order we

00:37:21.700 --> 00:37:22.550
instantiated them.

00:37:22.550 --> 00:37:25.990
So if we scroll down, yeah, you
see the green check marks.

00:37:25.990 --> 00:37:27.850
Those are VMs that are up
and running and are

00:37:27.850 --> 00:37:29.930
processing work now.

00:37:29.930 --> 00:37:33.730
And if you scroll back up to the
graph, you'll see that we

00:37:33.730 --> 00:37:36.440
ran an earlier test run,
a little bit earlier.

00:37:36.440 --> 00:37:38.240
And you can see the
CPU spikes, from

00:37:38.240 --> 00:37:39.830
those, jumping up.

00:37:39.830 --> 00:37:43.430
And more importantly, you see
them going back to 0 when the

00:37:43.430 --> 00:37:44.620
work was done.

00:37:44.620 --> 00:37:47.140
You know, at Google, we
say faster is better.

00:37:47.140 --> 00:37:49.290
And we certainly take that to
heart in Compute Engine, by

00:37:49.290 --> 00:37:52.370
having fast start-up times,
consistent performance, and

00:37:52.370 --> 00:37:56.610
sub-hour billing, really letting
you do things that

00:37:56.610 --> 00:38:00.500
weren't even economically
possible before.

00:38:00.500 --> 00:38:04.580
So let me go back to the slides
for a sec, recap where

00:38:04.580 --> 00:38:07.520
we are, with our application.

00:38:07.520 --> 00:38:10.630
We've got a front-end, written
in App Engine and PHP, that

00:38:10.630 --> 00:38:12.410
handles all the website.

00:38:12.410 --> 00:38:15.590
We've got a variety of
datastores in cloud storage,

00:38:15.590 --> 00:38:17.910
Cloud SQL, Cloud Datastore.

00:38:17.910 --> 00:38:21.960
And we have a backend in Compute
Engine that does video

00:38:21.960 --> 00:38:24.230
encoding for us.

00:38:24.230 --> 00:38:27.220
But there's more we can do
with Compute Engine here.

00:38:27.220 --> 00:38:29.980
Remember, I talked about those
comments that we've had in the

00:38:29.980 --> 00:38:32.150
Cloud Datastore?

00:38:32.150 --> 00:38:35.500
Well, as the owner this site,
I'd like to actually know

00:38:35.500 --> 00:38:37.410
whether, on balance,
those comments were

00:38:37.410 --> 00:38:41.280
good, bad, or neutral.

00:38:41.280 --> 00:38:43.760
And then furthermore, I want
to use Compute Engine to do

00:38:43.760 --> 00:38:45.020
that analysis.

00:38:45.020 --> 00:38:47.950
Now, in the past, the Cloud
Datastore was only available

00:38:47.950 --> 00:38:48.840
to App Engine.

00:38:48.840 --> 00:38:51.180
But as of today, that
Datastore is open to

00:38:51.180 --> 00:38:54.470
everybody, so that I can access
the same comments data

00:38:54.470 --> 00:38:58.650
that App Engine was using
from Compute Engine.

00:38:58.650 --> 00:39:00.700
The nice thing about the
Datastore, it was developed

00:39:00.700 --> 00:39:03.680
for the kind of data sets that
we encounter at Google.

00:39:03.680 --> 00:39:07.270
Because we do things like Web
Search and Maps and ads and

00:39:07.270 --> 00:39:11.425
Gmail, we needed a very high
capacity datastore that had

00:39:11.425 --> 00:39:12.900
very fast performance.

00:39:12.900 --> 00:39:15.350
So you get consistent
performance on this Datastore,

00:39:15.350 --> 00:39:17.150
whether you're accessing
a megabyte of data or

00:39:17.150 --> 00:39:18.960
a terabyte of data.

00:39:18.960 --> 00:39:23.840
So let's flip over and look at
how we're going to do this.

00:39:23.840 --> 00:39:28.420
We wrote a Python script that
analyzes the comments.

00:39:28.420 --> 00:39:30.230
We'll take a quick look.

00:39:30.230 --> 00:39:33.300
So we're going to SSH
into that machine.

00:39:33.300 --> 00:39:36.730
So why don't we go back to the
text editor, real quick, so we

00:39:36.730 --> 00:39:39.910
can show the code.

00:39:39.910 --> 00:39:43.610
So this is just some very simple
analysis, based on the

00:39:43.610 --> 00:39:46.180
words that are included in the
post, to find out whether it's

00:39:46.180 --> 00:39:48.170
net positive or negative.

00:39:48.170 --> 00:39:50.670
If we scroll down a bit,
we'll see the code

00:39:50.670 --> 00:39:52.380
to query the database.

00:39:55.610 --> 00:39:59.540
So there's query response equals
database dot run query.

00:39:59.540 --> 00:40:02.320
That retrieves the data.

00:40:02.320 --> 00:40:04.990
And then there's some similar
code that writes the data,

00:40:04.990 --> 00:40:07.760
such as datastore.BlindWrite.

00:40:07.760 --> 00:40:11.010
In this case, we're the only
ones accessing the Datastore.

00:40:11.010 --> 00:40:12.930
So a BlindWrite is just fine.

00:40:12.930 --> 00:40:16.100
I don't have to worry about
multiple writers.

00:40:16.100 --> 00:40:19.040
If I did care about that, I
could just as easily wrap this

00:40:19.040 --> 00:40:24.920
up in a transaction and get that
transacted protection as

00:40:24.920 --> 00:40:26.870
well as this way.

00:40:26.870 --> 00:40:31.110
So this is our simple video
comment analysis.

00:40:31.110 --> 00:40:33.860
Let's go back and actually run
it, on one video, to see what

00:40:33.860 --> 00:40:35.000
it does, for one video.

00:40:35.000 --> 00:40:39.080
So we're SSH-ed into our
virtual machine.

00:40:39.080 --> 00:40:41.330
And we're going to run
this Python script.

00:40:41.330 --> 00:40:44.730
And it retrieves all the
comments, very, very quickly.

00:40:44.730 --> 00:40:48.410
For each comment, it determines
0 is neutral, 1 is

00:40:48.410 --> 00:40:50.770
positive, minus 1 is negative.

00:40:50.770 --> 00:40:52.830
Now, that's fine
for one video.

00:40:52.830 --> 00:40:54.460
But I've got 1,000 videos.

00:40:54.460 --> 00:40:56.650
And I have 1,000 comments
on each video.

00:40:56.650 --> 00:40:59.160
So this starts to look like
a MapReduce sort of

00:40:59.160 --> 00:41:00.520
job, doesn't it, right?

00:41:00.520 --> 00:41:03.510
Phase one being, analyzing
all the comments.

00:41:03.510 --> 00:41:06.190
Phase two being to collect that
information and come up

00:41:06.190 --> 00:41:07.830
with an aggregate answer
of whether a

00:41:07.830 --> 00:41:09.580
video is good or bad.

00:41:09.580 --> 00:41:13.480
So we already have a 10 node
Hadoop cluster up and running

00:41:13.480 --> 00:41:15.320
on Compute Engine.

00:41:15.320 --> 00:41:19.740
And just to prove that this
really is writing to the

00:41:19.740 --> 00:41:23.400
Datastore, let me flip over to
the Datastore Viewer, in the

00:41:23.400 --> 00:41:29.480
Cloud Console, and we'll look
at the comments Datastore.

00:41:29.480 --> 00:41:30.860
So we've got a query written.

00:41:34.840 --> 00:41:38.550
So just to see, these are all
the IDs of the videos and the

00:41:38.550 --> 00:41:39.850
number of comments they have.

00:41:39.850 --> 00:41:42.780
And you'll notice there's no
column there for a sentiment.

00:41:42.780 --> 00:41:44.210
We haven't yet calculated
that.

00:41:44.210 --> 00:41:47.040
In fact, because this is a NoSQL
database, we don't even

00:41:47.040 --> 00:41:49.620
have a schema for columns.

00:41:49.620 --> 00:41:52.130
In fact, if I were using
a SQL database, this

00:41:52.130 --> 00:41:53.020
would be really difficult.

00:41:53.020 --> 00:41:55.940
Because I would have to push
a schema change through the

00:41:55.940 --> 00:41:58.690
whole system, just to start
calculating sentiments.

00:41:58.690 --> 00:42:01.300
The nice thing about NoSQL
databases is you just start

00:42:01.300 --> 00:42:04.160
writing new values, and they
automatically appear.

00:42:04.160 --> 00:42:06.760
So let's fire up the Hadoop
job, and let's start

00:42:06.760 --> 00:42:09.680
processing these for
all of the videos.

00:42:09.680 --> 00:42:11.840
Now, as Urs mentioned,
we run a lot of

00:42:11.840 --> 00:42:14.090
MapReduce inside of Google.

00:42:14.090 --> 00:42:16.920
So we've really tried to
optimize our data center to

00:42:16.920 --> 00:42:19.620
run MapReduce jobs
really well.

00:42:19.620 --> 00:42:20.730
So our job is running.

00:42:20.730 --> 00:42:25.690
The map phase, for each video,
it retrieves all the comments.

00:42:25.690 --> 00:42:28.580
It does a quick analysis on
whether it's positive,

00:42:28.580 --> 00:42:30.090
negative, or neutral.

00:42:30.090 --> 00:42:33.170
The reduce phase then collects
those results, for all the

00:42:33.170 --> 00:42:35.950
videos, and comes up with
an answer for each one.

00:42:35.950 --> 00:42:38.220
So the map is done.

00:42:38.220 --> 00:42:39.480
The reduce has started.

00:42:39.480 --> 00:42:45.320
So let's flip back to the
console and re-run the query.

00:42:45.320 --> 00:42:47.190
And you'll notice, we have
total sentiments now

00:42:47.190 --> 00:42:47.940
calculated.

00:42:47.940 --> 00:42:49.490
It's a new column
that appeared.

00:42:49.490 --> 00:42:51.390
We've calculated all that.

00:42:51.390 --> 00:42:52.400
Some of them looks awesome.

00:42:52.400 --> 00:42:54.340
Some videos got a 31.

00:42:54.340 --> 00:42:55.940
Some of them, maybe
not so much.

00:42:55.940 --> 00:42:59.630
I hope Joe is the 31 and
not the minus 4.

00:42:59.630 --> 00:43:01.600
So sure enough, the values
are calculated.

00:43:01.600 --> 00:43:03.580
And they appear in
the Datastore.

00:43:03.580 --> 00:43:06.220
So if we go and look at--

00:43:06.220 --> 00:43:09.440
the last thing we did was we
updated our PHP page to

00:43:09.440 --> 00:43:12.870
actually retrieve that value
that was calculated.

00:43:12.870 --> 00:43:16.320
So if you scroll down, you'll
see it's now positive.

00:43:16.320 --> 00:43:18.980
So here we had App
Engine entering

00:43:18.980 --> 00:43:20.600
comments in the Datastore.

00:43:20.600 --> 00:43:23.680
Compute Engine reading those
values, writing a sentiment

00:43:23.680 --> 00:43:24.660
value back.

00:43:24.660 --> 00:43:27.970
And then App Engine seeing that
sentiment and placing it

00:43:27.970 --> 00:43:29.610
in the page.

00:43:29.610 --> 00:43:33.190
So you really get to use each
service, for the job it's best

00:43:33.190 --> 00:43:36.290
at, but have a consistent set
of datastores that you can

00:43:36.290 --> 00:43:40.080
access across all of those.

00:43:40.080 --> 00:43:41.330
So let's flip back
to the slides.

00:43:44.010 --> 00:43:48.430
So that completes our web app.

00:43:48.430 --> 00:43:51.120
Let's turn our attention to
the mobile companion.

00:43:51.120 --> 00:43:54.320
We're all walking around with
incredibly powerful, video

00:43:54.320 --> 00:43:55.500
devices in our pockets.

00:43:55.500 --> 00:43:56.980
So of course, we want
to be able to take

00:43:56.980 --> 00:43:58.940
video and upload them.

00:43:58.940 --> 00:44:01.800
And in fact, what I really want
to do is make it super

00:44:01.800 --> 00:44:05.350
easy, for my mobile developers,
to access the code

00:44:05.350 --> 00:44:08.110
that I've written inside
of App Engine.

00:44:08.110 --> 00:44:09.720
And Cloud Endpoints does that.

00:44:09.720 --> 00:44:13.130
Cloud Endpoints makes it super
simple to write backend logic,

00:44:13.130 --> 00:44:17.140
in whatever language you want,
and easily expose a nice,

00:44:17.140 --> 00:44:18.740
friendly, client
side interface.

00:44:18.740 --> 00:44:20.560
You don't have to worry about
data sterilization.

00:44:20.560 --> 00:44:22.360
You don't have to write
OAuth code.

00:44:22.360 --> 00:44:24.240
You simply write server code.

00:44:24.240 --> 00:44:27.740
And then you get a nice,
client library for it.

00:44:27.740 --> 00:44:31.350
So to do that, we've written
some backend code, in Java,

00:44:31.350 --> 00:44:33.370
taking advantage of the feature,
that Urs talked

00:44:33.370 --> 00:44:36.960
about, of breaking App Engine
apps into sub-components.

00:44:36.960 --> 00:44:39.130
We've written a second
component in Java.

00:44:39.130 --> 00:44:42.920
We need to switch
the switcher.

00:44:42.920 --> 00:44:45.510
This component does
two things.

00:44:45.510 --> 00:44:49.810
First, it returns a URL into
Cloud Storage, for the mobile

00:44:49.810 --> 00:44:52.180
device, to upload to.

00:44:52.180 --> 00:44:55.940
Second, it provides an API,
here, you see, called Upload

00:44:55.940 --> 00:44:59.200
Completed, that the mobile
device will call when the

00:44:59.200 --> 00:45:00.440
video is uploaded.

00:45:00.440 --> 00:45:04.510
And when that's done, the App
Engine server sets a title,

00:45:04.510 --> 00:45:07.730
creates a thumbnail, basically
populates the metadata about

00:45:07.730 --> 00:45:09.220
that video.

00:45:09.220 --> 00:45:10.490
So I'm pretty happy.

00:45:10.490 --> 00:45:11.370
That does what I want.

00:45:11.370 --> 00:45:13.570
Now, those of you have noticed,
will notice that

00:45:13.570 --> 00:45:15.000
we're not in Sublime anymore.

00:45:15.000 --> 00:45:18.630
This is the new Android Studio
Mobile IDE that you heard

00:45:18.630 --> 00:45:20.370
announced, earlier today.

00:45:20.370 --> 00:45:23.810
Based on IntelliJ, I think it's
a huge step forward, in

00:45:23.810 --> 00:45:25.460
terms of providing a
great development

00:45:25.460 --> 00:45:27.800
environment for Android.

00:45:27.800 --> 00:45:30.550
Now, I'm a cloud guy, so my
particular favorite feature

00:45:30.550 --> 00:45:32.060
here is this.

00:45:32.060 --> 00:45:34.700
I can Right Click on
my server project.

00:45:34.700 --> 00:45:36.730
And down there, there's
Cloud Endpoints.

00:45:36.730 --> 00:45:39.350
And it says, Generate
Client Libraries.

00:45:39.350 --> 00:45:40.860
That's all I need to do.

00:45:40.860 --> 00:45:44.370
The tool will then generate, for
me, a client side wrapper

00:45:44.370 --> 00:45:47.820
that gives me a nice, clean,
type-safe interface to my

00:45:47.820 --> 00:45:49.270
server side logic.

00:45:49.270 --> 00:45:51.690
So let's look at that
client side code.

00:45:54.240 --> 00:45:57.540
And you'll notice this code
looks very much like the

00:45:57.540 --> 00:45:58.410
server side code.

00:45:58.410 --> 00:46:00.030
There's Upload Completed.

00:46:00.030 --> 00:46:02.710
It takes a bunch of parameters
for a URL and a

00:46:02.710 --> 00:46:04.320
thumbnail and a string.

00:46:04.320 --> 00:46:06.700
So by calling that, I don't
have to deal with the

00:46:06.700 --> 00:46:07.430
authentication.

00:46:07.430 --> 00:46:09.560
I don't have to worry about how
do I serialize and marshal

00:46:09.560 --> 00:46:12.450
data back and forth between
the client and the server.

00:46:12.450 --> 00:46:14.900
So we're actually going to run
this application, now.

00:46:14.900 --> 00:46:17.590
I've got an Android
phone, here.

00:46:17.590 --> 00:46:18.840
So if we switch over to this.

00:46:23.720 --> 00:46:24.970
Hello?

00:46:27.810 --> 00:46:29.460
Is the phone bad?

00:46:32.960 --> 00:46:34.210
The phone turned off.

00:46:39.220 --> 00:46:42.090
You rehearse for almost every
eventuality in these things,

00:46:42.090 --> 00:46:44.730
but, somehow, the phone being
turned off is not one of them.

00:46:50.210 --> 00:46:52.640
While that's coming up, let me
mention a couple things.

00:46:52.640 --> 00:46:55.870
There are breakout sessions on
all the topics that we're

00:46:55.870 --> 00:46:58.230
covering today, including mobile
development, with the

00:46:58.230 --> 00:46:59.430
backend starter.

00:46:59.430 --> 00:47:01.650
PHP on App Engine, there's
a complete break

00:47:01.650 --> 00:47:02.720
out session on that.

00:47:02.720 --> 00:47:05.120
There's a breakout session on
the Cloud Datastore as well.

00:47:05.120 --> 00:47:07.910
So if you want the nitty gritty,
from the developers,

00:47:07.910 --> 00:47:10.940
on any of those technologies,
definitely those breakout

00:47:10.940 --> 00:47:12.273
sessions are where to go.

00:47:12.273 --> 00:47:16.140
I don't have my phone here.

00:47:16.140 --> 00:47:17.390
BRIAN LYNCH: One second,
[INAUDIBLE].

00:47:22.610 --> 00:47:23.930
GREG DEMICHILLIE: Toss me
my phone, from my bag.

00:47:23.930 --> 00:47:25.180
I have the app on it.

00:47:47.082 --> 00:47:48.332
Battery?

00:47:53.100 --> 00:47:55.030
So we'll take one more time
for that to boot.

00:47:55.030 --> 00:47:56.550
I'm going to go through this,
because it's worth seeing the

00:47:56.550 --> 00:47:57.800
mobile device.

00:48:02.670 --> 00:48:03.956
There we go.

00:48:22.690 --> 00:48:23.610
There we are.

00:48:23.610 --> 00:48:25.460
Unfortunately, I'm about
to expose Brian's--

00:48:25.460 --> 00:48:26.680
excuse me--

00:48:26.680 --> 00:48:30.310
unlock code, so if you happen to
get his phone, you now know

00:48:30.310 --> 00:48:33.260
how to do all sorts of things.

00:48:33.260 --> 00:48:34.250
So here's our application.

00:48:34.250 --> 00:48:35.490
It's staring up at the Elmo.

00:48:35.490 --> 00:48:36.890
I'm going to put
my head in it.

00:48:36.890 --> 00:48:38.740
I'm going to hit the
record button.

00:48:38.740 --> 00:48:40.840
You'll see, it starts
recording.

00:48:40.840 --> 00:48:44.660
You'll see the blue recording
bar going across.

00:48:44.660 --> 00:48:47.690
It's finished recording.

00:48:47.690 --> 00:48:49.140
Connecting to server for URL.

00:48:49.140 --> 00:48:50.930
So it's making the first call.

00:48:50.930 --> 00:48:52.180
Could not upload your video.

00:48:55.880 --> 00:48:57.753
Let's try it one more time.

00:49:02.663 --> 00:49:04.140
AUDIENCE: [INAUDIBLE].

00:49:04.140 --> 00:49:05.390
GREG DEMICHILLIE: Yep.

00:49:28.010 --> 00:49:30.200
Ah, yes, now we have
a connection.

00:49:30.200 --> 00:49:31.450
Let's see how Verizon does.

00:49:34.890 --> 00:49:37.870
There we go.

00:49:37.870 --> 00:49:39.120
So it's recording now.

00:49:43.510 --> 00:49:44.760
Connecting to server.

00:49:47.380 --> 00:49:48.630
Uploading the video.

00:49:50.960 --> 00:49:52.852
Yes!

00:49:52.852 --> 00:49:56.220
AUDIENCE: [APPLAUSE]

00:49:56.220 --> 00:49:58.860
GREG DEMICHILLIE: Persistence
pays off.

00:49:58.860 --> 00:50:00.820
I'm going to do one more of
you guys, just so you're

00:50:00.820 --> 00:50:03.320
memorialized, in my keynote
demo, for the time when my

00:50:03.320 --> 00:50:05.460
phone didn't work,
of all things.

00:50:05.460 --> 00:50:07.020
So I'm taking a video now.

00:50:07.020 --> 00:50:09.570
Everybody can wave.

00:50:09.570 --> 00:50:10.820
Very nice.

00:50:12.960 --> 00:50:15.270
And it's going to do its thing,
connecting to the

00:50:15.270 --> 00:50:18.660
server, uploading the video.

00:50:18.660 --> 00:50:20.960
Let's flip back to
the actual site.

00:50:20.960 --> 00:50:23.950
Let's look at the videos.

00:50:23.950 --> 00:50:27.790
The most recent one uploaded
is, yes, me, looking,

00:50:27.790 --> 00:50:31.500
unfortunately, right
up my nose.

00:50:31.500 --> 00:50:35.160
If my parents are watching,
I apologize now.

00:50:35.160 --> 00:50:35.720
Oh, there we go.

00:50:35.720 --> 00:50:37.920
That's a better one.

00:50:37.920 --> 00:50:41.520
AUDIENCE: [APPLAUSE]

00:50:41.520 --> 00:50:42.770
GREG DEMICHILLIE: Let's
go back to slides.

00:50:45.670 --> 00:50:50.070
So that's, really, just one
example of what you can do

00:50:50.070 --> 00:50:52.690
with the Cloud Platform.

00:50:52.690 --> 00:50:56.130
I want to point out one more,
that I'm not going to build,

00:50:56.130 --> 00:50:57.700
but I want to draw your
attention to.

00:50:57.700 --> 00:50:59.830
And this is the Data
Sensing Lab.

00:50:59.830 --> 00:51:02.490
Those of you who have noticed
have seen these little signs

00:51:02.490 --> 00:51:03.930
around Mosconi Center.

00:51:03.930 --> 00:51:08.220
We've deployed 525 sensors
around Mosconi that measure

00:51:08.220 --> 00:51:11.670
things, such as the temperature
and the humidity

00:51:11.670 --> 00:51:14.790
and sensor maps of how many
people are walking by and the

00:51:14.790 --> 00:51:16.640
noise level, how loud is it.

00:51:16.640 --> 00:51:20.040
And then we've built a system,
using the Cloud Platform, to

00:51:20.040 --> 00:51:23.110
collect that data, to store that
data, to analyze it, and

00:51:23.110 --> 00:51:24.720
to visualize it.

00:51:24.720 --> 00:51:28.650
So if you go to the Sandbox,
right now, after this session,

00:51:28.650 --> 00:51:31.420
you'll be able to see this data
in realtime and sort of

00:51:31.420 --> 00:51:35.620
play with and visualize a very
large, very rich set of data.

00:51:35.620 --> 00:51:38.460
There's also going to be a
session, where the authors of

00:51:38.460 --> 00:51:40.900
the Data Sensing Lab will walk
you through what they did, how

00:51:40.900 --> 00:51:43.870
they did it, and how they
used the cloud platform.

00:51:43.870 --> 00:51:47.480
While you're at the Sandbox,
please take the time to stop

00:51:47.480 --> 00:51:49.040
by and look at our partners.

00:51:49.040 --> 00:51:51.930
As you know, even as much effort
as we put into the

00:51:51.930 --> 00:51:53.610
Cloud Platform, it's
not just us.

00:51:53.610 --> 00:51:56.110
It's also our partners that
help make this real.

00:51:56.110 --> 00:51:58.280
In particular, there
are 16 partners who

00:51:58.280 --> 00:51:58.995
will be in our sand--

00:51:58.995 --> 00:52:01.850
[LOSS OF AUDIO]

00:52:01.850 --> 00:52:03.270
Somebody Double Clicked
the button.

00:52:03.270 --> 00:52:06.330
They'll be 16 partners
in the Sandbox.

00:52:06.330 --> 00:52:07.630
These aren't marketing people.

00:52:07.630 --> 00:52:08.770
These are developers.

00:52:08.770 --> 00:52:11.060
So you can go and ask your
technical questions.

00:52:11.060 --> 00:52:13.600
They'll tell you their best
practices they learned from

00:52:13.600 --> 00:52:16.090
running on the Cloud Platform.

00:52:16.090 --> 00:52:17.860
And so that's a great
resource as well.

00:52:17.860 --> 00:52:19.780
With that, we'll turn
it back over to Urs.

00:52:19.780 --> 00:52:21.210
And I'll wish everybody,
have a great I/O.

00:52:21.210 --> 00:52:28.110
AUDIENCE: [APPLAUSE]

00:52:28.110 --> 00:52:29.850
URS HOELZLE: Thank you, Greg.

00:52:29.850 --> 00:52:35.230
So you've heard a lot
today and saw a lot

00:52:35.230 --> 00:52:37.820
of cool, new things.

00:52:37.820 --> 00:52:43.700
Just to recap, you've seen the
Cloud Datastore, in action, in

00:52:43.700 --> 00:52:48.280
the demos, and accessible,
now, from anywhere.

00:52:48.280 --> 00:52:51.500
You have sub-hour billing, so
you pay only for what you

00:52:51.500 --> 00:52:52.350
actually use.

00:52:52.350 --> 00:52:54.990
You have shared core instances,
for the times where

00:52:54.990 --> 00:52:57.030
you just need a little
bit of CPU.

00:52:57.030 --> 00:53:00.140
You have Advanced Routing to
connect on-premise and

00:53:00.140 --> 00:53:01.510
off-premise.

00:53:01.510 --> 00:53:05.080
You have 10 times larger
persistent disks.

00:53:05.080 --> 00:53:09.030
And you have PHP
on App Engine.

00:53:09.030 --> 00:53:12.180
But there's one more thing
I'd like to talk about.

00:53:12.180 --> 00:53:19.410
And in fact, it's something that
I wish we had had in 1999

00:53:19.410 --> 00:53:21.430
when we started Google.

00:53:21.430 --> 00:53:24.910
And it's something that
we've been working on

00:53:24.910 --> 00:53:26.940
for a very long time.

00:53:26.940 --> 00:53:30.680
And it's something that's just a
start, but something that, I

00:53:30.680 --> 00:53:34.150
believe, will change the face
of computing over the next

00:53:34.150 --> 00:53:41.000
decade, based on the work that
we've done in the past decade.

00:53:41.000 --> 00:53:44.370
Something that will make Google
better but will make

00:53:44.370 --> 00:53:47.050
the lives of developers better,
and it will make the

00:53:47.050 --> 00:53:48.840
web better.

00:53:48.840 --> 00:53:55.050
So I'm very, very excited that
tonight, starting at 6:00 PM,

00:53:55.050 --> 00:54:00.100
Compute Engine is open, for
signups, to everyone.

00:54:00.100 --> 00:54:06.800
AUDIENCE: [APPLAUSE]

00:54:06.800 --> 00:54:10.720
URS HOELZLE: So head over to
cloud.google.com, sign up,

00:54:10.720 --> 00:54:12.170
give it as spin.

00:54:12.170 --> 00:54:14.120
I'm excited to see what
all of you do

00:54:14.120 --> 00:54:16.420
on top of this platform.

00:54:16.420 --> 00:54:19.330
So thank you for coming to
Google I/O. Thanks for coming

00:54:19.330 --> 00:54:20.120
to the Cloud Session.

00:54:20.120 --> 00:54:21.980
Have fun at the other
sessions.

00:54:21.980 --> 00:54:23.670
And have fun in San Francisco.

00:54:23.670 --> 00:54:29.670
AUDIENCE: [APPLAUSE]

