WEBVTT
Kind: captions
Language: en

00:00:00.960 --> 00:00:03.260
ERIC KOLEDA: Hi, and welcome to
another episode of Google

00:00:03.260 --> 00:00:04.790
Apps Script Office Hours.

00:00:04.790 --> 00:00:07.260
I am Eric Koleda, and with
me today we have Jan.

00:00:07.260 --> 00:00:09.780
And we are both on the
Apps Script devrel

00:00:09.780 --> 00:00:11.710
team, Developer Relations.

00:00:11.710 --> 00:00:14.950
And we hold these weekly office
hours to give you

00:00:14.950 --> 00:00:16.340
updates on Apps Script
and answer any

00:00:16.340 --> 00:00:18.530
questions you guys have.

00:00:18.530 --> 00:00:20.450
So let's get started.

00:00:20.450 --> 00:00:22.440
So I think we're going to start
with the release notes

00:00:22.440 --> 00:00:26.660
for the last release
of the Apps Script

00:00:26.660 --> 00:00:28.500
that we pushed out.

00:00:28.500 --> 00:00:29.570
And do you want to cover this?

00:00:29.570 --> 00:00:30.460
JAN KLEINERT: Sure.

00:00:30.460 --> 00:00:31.010
So--

00:00:31.010 --> 00:00:33.005
and you can find these
from developers.googl

00:00:33.005 --> 00:00:35.730
e.com/apps-script.

00:00:35.730 --> 00:00:38.210
There's release notes
linked there.

00:00:38.210 --> 00:00:40.630
So this was from July 26.

00:00:40.630 --> 00:00:44.050
And we made some improvements,
and we're actually continuing

00:00:44.050 --> 00:00:46.150
to make more-- so you will see
more of these come out in the

00:00:46.150 --> 00:00:47.430
near future--

00:00:47.430 --> 00:00:50.120
to improve the speed of handling
large batches of data

00:00:50.120 --> 00:00:50.900
in ScriptDb.

00:00:50.900 --> 00:00:54.170
So when you're using say, batch,
we are trying to speed

00:00:54.170 --> 00:00:56.906
up the processing in saving
those large batches of data.

00:00:56.906 --> 00:00:58.396
And we've made some
progress there.

00:00:58.396 --> 00:01:00.123
ERIC KOLEDA: Yeah, and if you
haven't used ScriptDb yet,

00:01:00.123 --> 00:01:03.240
that's the new storage solution
built into Apps

00:01:03.240 --> 00:01:08.880
Script, which is a JavaScript
object store, and it's easily

00:01:08.880 --> 00:01:10.890
and simply accessible from right
in the script itself.

00:01:10.890 --> 00:01:12.330
So if you haven't played
around with

00:01:12.330 --> 00:01:12.810
that yet, take a look.

00:01:12.810 --> 00:01:14.450
It's getting faster
by the day.

00:01:14.450 --> 00:01:14.880
JAN KLEINERT: Yes.

00:01:14.880 --> 00:01:15.990
Definitely.

00:01:15.990 --> 00:01:18.490
Also, One of the script
templates that show up on the

00:01:18.490 --> 00:01:21.000
welcome screen when you open
up script.google.com, we've

00:01:21.000 --> 00:01:22.570
fixed an error in the Gmail
script template.

00:01:22.570 --> 00:01:25.560
So if you've been having some
unexpected results from that

00:01:25.560 --> 00:01:27.963
one, that's fixed now.

00:01:27.963 --> 00:01:31.300
Also, there was an issue with
ScriptDb where sometimes if

00:01:31.300 --> 00:01:35.550
you were setting an object
that had an empty--

00:01:35.550 --> 00:01:38.590
that's causing errors, that's
been fixed now as well.

00:01:38.590 --> 00:01:42.100
ERIC KOLEDA: And was that also
related to project properties?

00:01:42.100 --> 00:01:42.990
JAN KLEINERT: Somewhat
related.

00:01:42.990 --> 00:01:48.100
So the issues with project
properties for empty property

00:01:48.100 --> 00:01:51.030
keys was fixed slightly
before this.

00:01:51.030 --> 00:01:53.630
So that's resolved now, too.

00:01:53.630 --> 00:01:56.660
We also added support for chat
within the script editor.

00:01:56.660 --> 00:01:58.540
So now, if you're collaborating
with somebody

00:01:58.540 --> 00:02:01.540
else, so if you and someone else
or multiple people are

00:02:01.540 --> 00:02:04.250
editing a script, you'll notice
on the right-hand side,

00:02:04.250 --> 00:02:06.350
there will be a panel where you
can chat with the other

00:02:06.350 --> 00:02:08.580
collaborators who are currently

00:02:08.580 --> 00:02:09.490
active on that script.

00:02:09.490 --> 00:02:10.400
So that's pretty exciting.

00:02:10.400 --> 00:02:12.350
So it's similar to the chat that
you would see if you're

00:02:12.350 --> 00:02:14.620
in a document or spreadsheet,
you can do

00:02:14.620 --> 00:02:15.880
that now in your scripts.

00:02:15.880 --> 00:02:16.160
ERIC KOLEDA: Yeah.

00:02:16.160 --> 00:02:17.845
And that's one of the great
things about scripts is that

00:02:17.845 --> 00:02:20.640
since the editor and all the
code is hosted on Google

00:02:20.640 --> 00:02:23.705
servers, collaborating between
different people writing

00:02:23.705 --> 00:02:25.350
scripts is really simple.

00:02:25.350 --> 00:02:27.556
And now with the chat, you can
make sure that you guys are--

00:02:27.556 --> 00:02:28.537
people are synced
up when they're

00:02:28.537 --> 00:02:29.130
working on a script together.

00:02:29.130 --> 00:02:32.030
JAN KLEINERT: It makes
things a lot faster.

00:02:32.030 --> 00:02:35.500
So there was an issue where,
for a short period of time,

00:02:35.500 --> 00:02:37.990
scripts were not being copied
when you copied a site.

00:02:37.990 --> 00:02:39.080
And that's resolved now.

00:02:39.080 --> 00:02:41.830
So now, when you copy a site,
as expected, the scripts

00:02:41.830 --> 00:02:45.070
associated with the original
site will come with it.

00:02:45.070 --> 00:02:49.170
We also added autocomplete
for libraries.

00:02:49.170 --> 00:02:51.830
So if you have a library
included in development mode,

00:02:51.830 --> 00:02:53.850
autocomplete will work
for that library now.

00:02:53.850 --> 00:02:56.700
So we added that feature, which
should make it much

00:02:56.700 --> 00:03:00.130
simpler to develop against
your own libraries before

00:03:00.130 --> 00:03:02.800
you're ready to make them
out there for the world.

00:03:02.800 --> 00:03:04.320
ERIC KOLEDA: Because in
libraries, in general, you're

00:03:04.320 --> 00:03:06.860
creating versions of your
library that are stable.

00:03:06.860 --> 00:03:08.920
And when you're using a library,
you pick a version.

00:03:08.920 --> 00:03:11.242
But when you flip on development
mode, now all of a

00:03:11.242 --> 00:03:14.183
sudden you're using the latest
code, even if it's

00:03:14.183 --> 00:03:15.246
not safe to a version.

00:03:15.246 --> 00:03:17.580
And when you're building new
features in libraries and

00:03:17.580 --> 00:03:20.570
testing them out, this makes
it a little easier.

00:03:20.570 --> 00:03:21.910
JAN KLEINERT: For sure.

00:03:21.910 --> 00:03:24.110
There was a problem
with set value and

00:03:24.110 --> 00:03:24.990
the date picker widget.

00:03:24.990 --> 00:03:26.810
That's been fixed now.

00:03:26.810 --> 00:03:29.980
We also added remove methods
to the UI instance.

00:03:29.980 --> 00:03:34.180
So now you can remove widgets,
such as panels or other

00:03:34.180 --> 00:03:36.630
elements, from your
UI instance.

00:03:36.630 --> 00:03:39.170
That should help you clean
up a lot on some of these

00:03:39.170 --> 00:03:39.640
interfaces.

00:03:39.640 --> 00:03:41.630
Instead of just having to hide
everything, you can actually

00:03:41.630 --> 00:03:42.420
remove them now.

00:03:42.420 --> 00:03:44.540
So that's great, a
long time coming.

00:03:44.540 --> 00:03:47.510
We also added support for
Google Analytics via the

00:03:47.510 --> 00:03:48.240
Analytics service.

00:03:48.240 --> 00:03:50.780
I think I gave a teaser
on this last week.

00:03:50.780 --> 00:03:52.700
But it's there now, the
documentation there.

00:03:52.700 --> 00:03:56.380
And then two things that we just
added actually since then

00:03:56.380 --> 00:03:59.810
that we haven't quite added
to the release notes yet.

00:03:59.810 --> 00:04:03.850
But we have added updated
documentation for

00:04:03.850 --> 00:04:05.485
the BigQuery service.

00:04:05.485 --> 00:04:09.180
And also, yesterday, we added
support for version 1.5 of the

00:04:09.180 --> 00:04:11.000
prediction API.

00:04:11.000 --> 00:04:12.920
So those are all there
under the Google

00:04:12.920 --> 00:04:15.240
API services section.

00:04:15.240 --> 00:04:19.954
They are all the ones that you
have to enable first on the

00:04:19.954 --> 00:04:21.089
API console.

00:04:21.089 --> 00:04:22.940
But those are all there now.

00:04:22.940 --> 00:04:24.630
ERIC KOLEDA: I think in general,
those services in

00:04:24.630 --> 00:04:26.993
Apps Script mirror very closely
the services that you

00:04:26.993 --> 00:04:29.130
would use outside
of Apps Script.

00:04:29.130 --> 00:04:29.610
Right?

00:04:29.610 --> 00:04:30.210
JAN KLEINERT: That's correct.

00:04:30.210 --> 00:04:30.570
They're very similar.

00:04:30.570 --> 00:04:30.720
[? ERIC KOLEDA: Introducing ?]

00:04:30.720 --> 00:04:35.710
them directly via the Java
library or the Python library.

00:04:35.710 --> 00:04:37.550
Basically, if you've already
been using some of these other

00:04:37.550 --> 00:04:40.050
Google services in different
code you've written, you can

00:04:40.050 --> 00:04:45.015
actually use them, very, very
similar methods and use cases

00:04:45.015 --> 00:04:48.314
inside of Apps Script now.

00:04:48.314 --> 00:04:50.640
JAN KLEINERT: So I think that's
it for release notes.

00:04:55.300 --> 00:04:57.850
ERIC KOLEDA: So I know we have
some people in the hangout, or

00:04:57.850 --> 00:05:00.050
at least one person here
in the hangout.

00:05:00.050 --> 00:05:01.960
Hey, Josh, you want to join
back in and chat?

00:05:01.960 --> 00:05:02.880
JOSH: Yeah.

00:05:02.880 --> 00:05:03.060
Hello.

00:05:03.060 --> 00:05:04.310
ERIC KOLEDA: Hi.

00:05:04.310 --> 00:05:04.870
JOSH: Thank you.

00:05:04.870 --> 00:05:07.010
Some exciting features
coming along.

00:05:07.010 --> 00:05:09.252
I'm going to keep Bill's
feet to the fire.

00:05:09.252 --> 00:05:12.450
If you don't know the history
of this, I came to these

00:05:12.450 --> 00:05:14.420
first, and he came.

00:05:14.420 --> 00:05:15.670
And he is actually
a developer.

00:05:15.670 --> 00:05:20.260
I'm just a wannabe and right
now, a funder of developers.

00:05:20.260 --> 00:05:23.090
And so I like to kind of
know what's going on.

00:05:23.090 --> 00:05:25.940
So one of the things I'd like
to do, I have a really old

00:05:25.940 --> 00:05:30.475
version of a CRM, GoldMine.

00:05:30.475 --> 00:05:34.090
And it's about 10 years old now,
and it's limping along.

00:05:34.090 --> 00:05:39.160
And I built kind of another silo
doing something related

00:05:39.160 --> 00:05:42.570
to customer management
in spreadsheets.

00:05:42.570 --> 00:05:44.990
And I have done a lot of
reporting on that, and I did a

00:05:44.990 --> 00:05:50.710
lot of pivot tables and things
for reports, really wonky

00:05:50.710 --> 00:05:58.640
stuff until I saw GAS
and what it can do.

00:05:58.640 --> 00:06:01.230
Now I'm starting to think
that I want to move

00:06:01.230 --> 00:06:03.620
my data into ScriptDb.

00:06:03.620 --> 00:06:08.740
I'm looking at about a half a
million records and probably

00:06:08.740 --> 00:06:15.470
35 attributes of each record,
so a healthy amount of data.

00:06:15.470 --> 00:06:22.440
My concern is if I move totally
into the GAS ScriptDb

00:06:22.440 --> 00:06:26.890
world, I've built a lot of
reports that really require

00:06:26.890 --> 00:06:28.340
this data be in spreadsheets.

00:06:28.340 --> 00:06:30.470
I mean, I only know how to
build reports off of

00:06:30.470 --> 00:06:30.725
spreadsheets.

00:06:30.725 --> 00:06:34.400
And I have done some kludgy
stuff to make it work, but it

00:06:34.400 --> 00:06:35.716
works right now.

00:06:39.550 --> 00:06:42.670
Would it be possible to store
my data in ScriptDb and

00:06:42.670 --> 00:06:49.350
automatically pull it out once
a day into spreadsheets and

00:06:49.350 --> 00:06:52.250
still have all the reporting
that I currently have?

00:06:52.250 --> 00:06:53.170
JAN KLEINERT: Possibly--

00:06:53.170 --> 00:06:55.290
and you're talking about
Google spreadsheets?

00:06:55.290 --> 00:06:56.170
Is that right?

00:06:56.170 --> 00:06:56.605
JOSH: Yeah.

00:06:56.605 --> 00:06:57.040
JAN KLEINERT: OK.

00:06:57.040 --> 00:07:00.030
So if you have about a half a
million records, I'm guessing

00:07:00.030 --> 00:07:02.570
that you have more than
one spreadsheet, yes?

00:07:02.570 --> 00:07:07.260
JOSH: Well, actually, so I have
two different kind of

00:07:07.260 --> 00:07:09.920
silos right now.

00:07:09.920 --> 00:07:12.490
And one's going to be managing
GoldMine and doesn't have any

00:07:12.490 --> 00:07:14.300
reporting, and it's
really outdated.

00:07:14.300 --> 00:07:15.490
And the other one
is just a whole

00:07:15.490 --> 00:07:17.820
different set of records.

00:07:17.820 --> 00:07:20.830
But yeah, actually,
I'm sorry, it is.

00:07:20.830 --> 00:07:23.630
Both silos are about a half a
million, so maybe together

00:07:23.630 --> 00:07:25.860
there would be some overlap.

00:07:25.860 --> 00:07:27.740
So right now, I really do--

00:07:27.740 --> 00:07:29.835
I only knew how to--

00:07:29.835 --> 00:07:33.360
you can only pull 50
imports at a time.

00:07:33.360 --> 00:07:37.170
So because I have that half a
million spread out amongst 70

00:07:37.170 --> 00:07:40.410
branches, what I had to do was
create container pages.

00:07:43.280 --> 00:07:46.280
So there's a spreadsheet with a
data page, and it could have

00:07:46.280 --> 00:07:49.370
anywhere from 8 to
15,000 records.

00:07:49.370 --> 00:07:51.320
I create pivot tables,
summaries of

00:07:51.320 --> 00:07:52.980
that using pivot tables.

00:07:52.980 --> 00:07:57.890
And I have about four important
summaries per each

00:07:57.890 --> 00:08:01.010
one of the 70 spreadsheets.

00:08:01.010 --> 00:08:08.530
Because I can't pull 70 times
4 into a grand total sheet,

00:08:08.530 --> 00:08:12.470
what I did is create data
pages which pull four

00:08:12.470 --> 00:08:14.210
summaries down into one page.

00:08:14.210 --> 00:08:16.715
And now I've created
just one pull for

00:08:16.715 --> 00:08:18.690
that, one import range.

00:08:18.690 --> 00:08:21.040
And I know I'm not at GAS
world a little bit,

00:08:21.040 --> 00:08:24.170
but it all ties back.

00:08:24.170 --> 00:08:27.200
And then from there, so I have
one data page for each of the

00:08:27.200 --> 00:08:28.550
70 branches.

00:08:28.550 --> 00:08:32.570
I then, from there, break my
70 branches into three

00:08:32.570 --> 00:08:37.580
regions, and I pull
down a third of 70

00:08:37.580 --> 00:08:39.010
into a summary page.

00:08:39.010 --> 00:08:41.710
So I keep summarizing
summary pages.

00:08:41.710 --> 00:08:45.010
And believe it or not,
it's crazy, but it's

00:08:45.010 --> 00:08:45.956
working right now.

00:08:45.956 --> 00:08:47.400
It's not very elegant.

00:08:47.400 --> 00:08:51.090
It's not very efficient, but
it's pretty impressive in its

00:08:51.090 --> 00:08:52.920
inelegance.

00:08:52.920 --> 00:08:54.710
But I can't lose
that right now.

00:08:54.710 --> 00:08:58.880
I can't change the tire while
the car is rolling right now.

00:08:58.880 --> 00:09:01.260
But I definitely think
that ScriptDb--

00:09:01.260 --> 00:09:04.040
first of all, tell me it can
handle the volume of data that

00:09:04.040 --> 00:09:05.450
have, right?

00:09:05.450 --> 00:09:06.870
ERIC KOLEDA: Well, that was
one of the things that I

00:09:06.870 --> 00:09:07.520
wanted to look into.

00:09:07.520 --> 00:09:10.300
Because I know we do publish a
limit on how much data can be

00:09:10.300 --> 00:09:12.020
stored in a ScriptDB.

00:09:12.020 --> 00:09:15.110
JAN KLEINERT: So I think there
are limits on certain things.

00:09:15.110 --> 00:09:18.120
So there's limits on the number
of records you can get

00:09:18.120 --> 00:09:22.710
back in a single query, which
is not the same as saying--

00:09:22.710 --> 00:09:25.560
because I think you get
50,000 records back

00:09:25.560 --> 00:09:27.650
in one single query.

00:09:27.650 --> 00:09:29.730
That doesn't mean you can
only store 50,000

00:09:29.730 --> 00:09:32.200
records in the db.

00:09:32.200 --> 00:09:37.080
You can just only get a
50,000-item snapshot at any

00:09:37.080 --> 00:09:38.710
given time.

00:09:38.710 --> 00:09:43.250
But there are some limitations,
I think, on the

00:09:43.250 --> 00:09:45.640
size of the item.

00:09:45.640 --> 00:09:49.660
But I don't know that we have
a larger aggregate limit on

00:09:49.660 --> 00:09:51.135
the total size of
the database.

00:09:51.135 --> 00:09:53.495
ERIC KOLEDA: I thought I
heard that discussed.

00:09:53.495 --> 00:09:56.195
Yeah, I think we would have
to check that, though.

00:09:56.195 --> 00:09:58.290
And the thing is that it's a
little difficult to calculate

00:09:58.290 --> 00:10:00.160
it that is there, if I remember
that limit correctly,

00:10:00.160 --> 00:10:01.840
that there is one that
exists because--

00:10:01.840 --> 00:10:03.050
JAN KLEINERT: It's a
size limitation.

00:10:03.050 --> 00:10:06.420
It's some number of--

00:10:06.420 --> 00:10:07.020
ERIC KOLEDA: Megabytes,
gigabytes or something.

00:10:07.020 --> 00:10:07.840
JAN KLEINERT: Yeah.

00:10:07.840 --> 00:10:09.590
I think it might be
some small number

00:10:09.590 --> 00:10:10.880
of hundreds of megabytes.

00:10:10.880 --> 00:10:11.860
ERIC KOLEDA: Yeah, I think
that sounds right.

00:10:11.860 --> 00:10:14.970
JAN KLEINERT: It's actually in
the documentation in the FAQ

00:10:14.970 --> 00:10:17.170
section for ScriptDb.

00:10:17.170 --> 00:10:18.860
ERIC KOLEDA: But it's not number
of entries and number

00:10:18.860 --> 00:10:19.180
of attributes.

00:10:19.180 --> 00:10:22.390
It really depends on how much
data is in those entries and

00:10:22.390 --> 00:10:22.830
attributes.

00:10:22.830 --> 00:10:24.770
So it can be a little difficult
to calculate.

00:10:24.770 --> 00:10:29.870
I would say half a million and
times some 30 attributes or

00:10:29.870 --> 00:10:32.940
something like that, you're
probably getting

00:10:32.940 --> 00:10:34.110
maybe in the range.

00:10:34.110 --> 00:10:36.226
We would have to do some number
crunching, I guess, to

00:10:36.226 --> 00:10:37.360
figure that out.

00:10:37.360 --> 00:10:39.120
JOSH: So at that point,
i'll just become, is

00:10:39.120 --> 00:10:40.140
it efficient enough?

00:10:40.140 --> 00:10:41.616
I mean, is it fast enough?

00:10:41.616 --> 00:10:43.320
ERIC KOLEDA: Yeah.

00:10:43.320 --> 00:10:44.970
Or can you fit it all.

00:10:44.970 --> 00:10:45.780
Right?

00:10:45.780 --> 00:10:46.550
JOSH: Well, that is the
first question.

00:10:46.550 --> 00:10:49.250
And then if I can fit it
all, is it reasonable?

00:10:49.250 --> 00:10:51.616
I mean, is it working
with that volume?

00:10:51.616 --> 00:10:52.930
[INTERPOSING VOICES]

00:10:52.930 --> 00:10:54.670
JAN KLEINERT: --between
interacting with the

00:10:54.670 --> 00:10:58.210
spreadsheet service to basically
pull data from

00:10:58.210 --> 00:11:00.810
ScriptDb and stick it
into spreadsheets.

00:11:00.810 --> 00:11:05.320
And you can do some optimizing
there to save the data to the

00:11:05.320 --> 00:11:06.930
spreadsheet in the most
efficient way.

00:11:06.930 --> 00:11:09.180
If you have tons and tons and
tons of data, and you're doing

00:11:09.180 --> 00:11:14.080
this all at once, we do also
have a script execution time

00:11:14.080 --> 00:11:17.555
limit, so where any single
execution of a script can only

00:11:17.555 --> 00:11:20.700
run for six minutes.

00:11:20.700 --> 00:11:21.830
You--

00:11:21.830 --> 00:11:23.470
I am just guessing off
the top of my head.

00:11:23.470 --> 00:11:25.460
If you are trying to put a half
a million records into

00:11:25.460 --> 00:11:28.060
the spreadsheet, it's probably
going to run into that limit.

00:11:28.060 --> 00:11:31.060
So you would have to invoke
some sort of batching or

00:11:31.060 --> 00:11:34.420
chunking of those right
spreadsheets.

00:11:34.420 --> 00:11:36.220
JOSH: I'm not going to put
half a million in any one

00:11:36.220 --> 00:11:38.650
spreadsheet because of the same
problem I have right now.

00:11:38.650 --> 00:11:40.100
The spreadsheets themselves
cannot

00:11:40.100 --> 00:11:42.070
handle it, forget ScriptDb.

00:11:42.070 --> 00:11:45.190
So what I'm imagining is
keeping the exact same

00:11:45.190 --> 00:11:47.720
spreadsheet structure that
I have right now and just

00:11:47.720 --> 00:11:49.410
populating those spreadsheets
with

00:11:49.410 --> 00:11:53.000
automatic pulls from ScriptDb.

00:11:53.000 --> 00:11:53.440
ERIC KOLEDA: Yeah.

00:11:53.440 --> 00:11:55.920
It certainly, I think, is
a possible solution.

00:11:55.920 --> 00:11:58.050
I was actually thinking about
something similar today where

00:11:58.050 --> 00:12:00.820
you keep your data in ScriptDb,
and then you output

00:12:00.820 --> 00:12:03.380
segments of it to spreadsheets
to expose

00:12:03.380 --> 00:12:04.620
the data to a person.

00:12:04.620 --> 00:12:06.110
Because there's no
UI for ScriptDb.

00:12:06.110 --> 00:12:08.070
You can't browse around it.

00:12:08.070 --> 00:12:11.400
So you could use a spreadsheet
as a way to expose the data to

00:12:11.400 --> 00:12:14.330
humans, or, in your case, maybe
expose it to all these

00:12:14.330 --> 00:12:16.300
other processes you
have set up.

00:12:16.300 --> 00:12:16.810
JOSH: Wow.

00:12:16.810 --> 00:12:17.330
I'm flattered.

00:12:17.330 --> 00:12:19.160
I'm having similar
thoughts to--

00:12:19.160 --> 00:12:21.780
[LAUGHTER]

00:12:21.780 --> 00:12:23.590
JOSH: Because people can work
with spreadsheets, right?

00:12:23.590 --> 00:12:24.770
They can work with--

00:12:24.770 --> 00:12:26.070
well, I was going to say they
could work with pivot tables,

00:12:26.070 --> 00:12:28.500
but actually most
people don't.

00:12:28.500 --> 00:12:30.550
Since I started working, I'm
like, wow, I needed to learn

00:12:30.550 --> 00:12:35.780
this a long time ago, but they
have their limitations too.

00:12:35.780 --> 00:12:37.980
ERIC KOLEDA: And I think, in
past hangouts, you've come and

00:12:37.980 --> 00:12:39.800
asked about data storage
options.

00:12:39.800 --> 00:12:41.550
I remember that's a topic
that's come up before.

00:12:41.550 --> 00:12:43.660
And the one thing I would say
about ScriptDb, the thing that

00:12:43.660 --> 00:12:46.200
makes it different and maybe
not appropriate, depending

00:12:46.200 --> 00:12:48.770
upon all of your use cases,
is that it's not about

00:12:48.770 --> 00:12:49.980
aggregation.

00:12:49.980 --> 00:12:54.100
You cannot say, give me the sum
of all of these fields or

00:12:54.100 --> 00:12:54.930
do accounts.

00:12:54.930 --> 00:12:57.010
It's not a relational database
that gives you that kind of

00:12:57.010 --> 00:12:58.360
aggregation ability.

00:12:58.360 --> 00:13:01.600
And it sounds like that's what
you're using pivot tables for.

00:13:01.600 --> 00:13:05.480
So if you're trying to take
large amounts of data and

00:13:05.480 --> 00:13:08.560
compress it into summaries, you
cannot do that natively

00:13:08.560 --> 00:13:09.540
inside ScriptDb.

00:13:09.540 --> 00:13:12.570
You would have to either do the
math in code, export it to

00:13:12.570 --> 00:13:15.000
a spreadsheet and have the pivot
table do it, et cetera.

00:13:15.000 --> 00:13:19.090
Versus there are other data
storage solutions like the

00:13:19.090 --> 00:13:22.310
Fusion Tables that do
allow for creating

00:13:22.310 --> 00:13:24.170
views-on data that--

00:13:24.170 --> 00:13:26.260
summaries and such--

00:13:26.260 --> 00:13:28.140
or relational databases.

00:13:28.140 --> 00:13:30.830
So if a lot of what you are
doing or all of what you are

00:13:30.830 --> 00:13:33.650
doing is trying to create
summaries from large amounts

00:13:33.650 --> 00:13:35.735
of data, then maybe
ScriptDb doesn't

00:13:35.735 --> 00:13:36.310
provide you as much value.

00:13:36.310 --> 00:13:39.430
I think ScriptDb is where you
have a lot of people that are

00:13:39.430 --> 00:13:42.360
going to open a record, edit
a record, save a record.

00:13:42.360 --> 00:13:45.690
Those records are complex
objects and maybe link to each

00:13:45.690 --> 00:13:48.600
other, and there are
different types.

00:13:48.600 --> 00:13:49.870
I think when you're more focused
on an individual

00:13:49.870 --> 00:13:51.740
entity instead of the summaries,
that could be a

00:13:51.740 --> 00:13:52.990
better place for ScriptDb.

00:13:52.990 --> 00:13:56.670
But I think it depends really on
some of your use cases, but

00:13:56.670 --> 00:13:58.970
that's just something to keep
in mind is that ScriptDb

00:13:58.970 --> 00:14:02.590
itself is never going to be able
to give you a total of

00:14:02.590 --> 00:14:04.490
some field across all
your entities.

00:14:04.490 --> 00:14:07.080
You'll have to do that
math on your own.

00:14:07.080 --> 00:14:07.240
JOSH: OK.

00:14:07.240 --> 00:14:08.920
And one last more specific
question.

00:14:08.920 --> 00:14:13.740
ScriptDb, last I knew, didn't
handle dates very natively.

00:14:13.740 --> 00:14:16.122
Is that in the works?

00:14:16.122 --> 00:14:18.930
Because that would be
a huge impediment.

00:14:18.930 --> 00:14:20.490
JAN KLEINERT: That is
still the case.

00:14:20.490 --> 00:14:24.350
So you can't save the native
JavaScript date object.

00:14:24.350 --> 00:14:27.640
Instead, you can either save a
string representation of it,

00:14:27.640 --> 00:14:29.610
or if you're actually going
to be doing some sort of

00:14:29.610 --> 00:14:31.600
arithmetic or stuff,
then you can

00:14:31.600 --> 00:14:34.330
save the numeric timestamp.

00:14:34.330 --> 00:14:37.750
But yes, that is still a
limitation that we hope to not

00:14:37.750 --> 00:14:41.600
have as a limitation in the
future, but currently it is.

00:14:41.600 --> 00:14:42.740
ERIC KOLEDA: Dates are
one of those things

00:14:42.740 --> 00:14:44.010
that are tricky, right?

00:14:44.010 --> 00:14:46.120
And I think one of the engineers
brought it up when

00:14:46.120 --> 00:14:47.120
he was talking about it.

00:14:47.120 --> 00:14:49.455
Like, if you create the date
and you're on Eastern time,

00:14:49.455 --> 00:14:51.670
and then what if you try to read
it again, and now you're

00:14:51.670 --> 00:14:53.340
on Pacific time?

00:14:53.340 --> 00:14:56.690
It gets complicated where when
you save a timestamp, that

00:14:56.690 --> 00:14:58.620
timestamp is true everywhere.

00:14:58.620 --> 00:15:03.420
It's the number in milliseconds
since 1970.

00:15:03.420 --> 00:15:05.165
And that's going to be
true no matter where

00:15:05.165 --> 00:15:06.050
you are in the world.

00:15:06.050 --> 00:15:09.640
So I think it's simpler this
way, but it definitely

00:15:09.640 --> 00:15:10.820
requires a little
bit more work.

00:15:10.820 --> 00:15:14.530
And I think we're looking at
ways to make it easier to use

00:15:14.530 --> 00:15:16.090
but without causing
all sorts of weird

00:15:16.090 --> 00:15:18.142
confusion around time zones.

00:15:18.142 --> 00:15:18.546
JOSH: OK.

00:15:18.546 --> 00:15:21.100
Thank you.

00:15:21.100 --> 00:15:23.190
ERIC KOLEDA: So we have Jim
joining the interim.

00:15:23.190 --> 00:15:26.840
Are you there, Jim?

00:15:26.840 --> 00:15:29.360
JAN KLEINERT: I think he
might be on mute here.

00:15:29.360 --> 00:15:32.270
But we do have several questions
on the moderator

00:15:32.270 --> 00:15:34.232
page that we can jump over
to if you'd like.

00:15:37.130 --> 00:15:39.990
ERIC KOLEDA: So if you're
watching this, every week, we

00:15:39.990 --> 00:15:42.850
have a moderator page
linked off of our

00:15:42.850 --> 00:15:46.740
developers.google.live show
page, where you can ask

00:15:46.740 --> 00:15:49.820
questions ahead of time in case
you can't attend live or

00:15:49.820 --> 00:15:52.770
would rather just
type them out.

00:15:52.770 --> 00:15:53.220
JAN KLEINERT: OK, it
looks like we have

00:15:53.220 --> 00:15:54.780
six questions here.

00:15:54.780 --> 00:15:57.805
We went ahead and added in
some responses to some of

00:15:57.805 --> 00:16:00.030
these ahead of time, but we'll
go through each of them as

00:16:00.030 --> 00:16:02.060
much as we have time
for anyway.

00:16:02.060 --> 00:16:03.790
I'll take the first one,
and then we can

00:16:03.790 --> 00:16:04.850
trade off if you want.

00:16:04.850 --> 00:16:07.360
So the first one is actually
related to ScriptDb, and it's

00:16:07.360 --> 00:16:10.560
kind of similar to what we
were just talking about.

00:16:10.560 --> 00:16:13.750
So is there any to save large
spreadsheets to ScriptDb,

00:16:13.750 --> 00:16:16.930
something like 13 times
10,000 cells?

00:16:16.930 --> 00:16:19.350
So using the method from the
documentation, that exceeds

00:16:19.350 --> 00:16:21.100
the expiration time
for the script.

00:16:21.100 --> 00:16:23.913
And by saving the spreadsheet
into one big object, it throws

00:16:23.913 --> 00:16:24.740
a data storage error.

00:16:24.740 --> 00:16:29.740
So I'm not entirely sure which
specific method from the

00:16:29.740 --> 00:16:32.570
documentation you're
referring to here.

00:16:32.570 --> 00:16:36.050
One thing that would help you
probably if you are not

00:16:36.050 --> 00:16:39.290
already using it, is there is a
save batch method that will

00:16:39.290 --> 00:16:41.990
do this more efficiently than if
you were just doing Save in

00:16:41.990 --> 00:16:45.390
a loop on all the individual
records.

00:16:45.390 --> 00:16:50.110
Now, doing that could
still run into that

00:16:50.110 --> 00:16:51.950
execution time limit.

00:16:51.950 --> 00:16:55.300
So what you can do there
is you could set

00:16:55.300 --> 00:16:56.385
some sort of chunking.

00:16:56.385 --> 00:17:00.910
So you can say, I'm just going
to do 1,000 records at a time

00:17:00.910 --> 00:17:03.700
or whatever you find is going to
be a safe number that will

00:17:03.700 --> 00:17:06.000
allow you get it done
within six minutes.

00:17:06.000 --> 00:17:08.020
And then set some
sort of flag.

00:17:08.020 --> 00:17:10.932
You can use script properties
for this to say, I got through

00:17:10.932 --> 00:17:11.869
row whatever.

00:17:11.869 --> 00:17:14.650
And then pick up from there
and have your script keep

00:17:14.650 --> 00:17:17.310
going until all the data
is in the database.

00:17:17.310 --> 00:17:19.270
Additionally, I was speaking to
one of the engineers about

00:17:19.270 --> 00:17:20.260
this this morning.

00:17:20.260 --> 00:17:22.750
And they're still doing some
more work that should actually

00:17:22.750 --> 00:17:25.130
solve the issue that you're
getting with the data storage

00:17:25.130 --> 00:17:29.580
error when you try to save
one gigantic object.

00:17:29.580 --> 00:17:31.940
There's definitely some work we
are doing behind the scenes

00:17:31.940 --> 00:17:34.770
there to make that work better
and work more consistently

00:17:34.770 --> 00:17:37.200
with these really, really large
objects that have a lot

00:17:37.200 --> 00:17:38.580
of attributes on them.

00:17:38.580 --> 00:17:42.280
So in the, hopefully, near
future, that should be a

00:17:42.280 --> 00:17:44.790
smoother option for you
to use as well.

00:17:44.790 --> 00:17:47.495
ERIC KOLEDA: But now, the power
of ScriptDb, I think,

00:17:47.495 --> 00:17:49.900
really comes from its querying
abilities, where you can say,

00:17:49.900 --> 00:17:52.260
give me all the records that
match this or match that.

00:17:52.260 --> 00:17:55.470
But if you have one giant
object, you lose that.

00:17:55.470 --> 00:17:58.440
So I think you're going to want
to look towards to doing

00:17:58.440 --> 00:18:02.085
lots of individual, like maybe
one row is one object in

00:18:02.085 --> 00:18:04.860
ScriptDb instead of
one giant object.

00:18:04.860 --> 00:18:06.850
JAN KLEINERT: So combining save
batch with chunking if

00:18:06.850 --> 00:18:09.630
you still need it is probably
the recommended

00:18:09.630 --> 00:18:12.520
way to go for now.

00:18:12.520 --> 00:18:16.785
ERIC KOLEDA: The next question
we have here is

00:18:16.785 --> 00:18:17.990
this one here, right?

00:18:17.990 --> 00:18:18.260
JAN KLEINERT: Yes.

00:18:18.260 --> 00:18:20.980
ERIC KOLEDA: So I have an HTML
table, and I want to sort the

00:18:20.980 --> 00:18:22.380
table by clicking the
column headings.

00:18:22.380 --> 00:18:24.340
How can I do this with something
like jQuery's

00:18:24.340 --> 00:18:26.730
library table sort,
or sort table.

00:18:26.730 --> 00:18:30.090
I don't see anywhere I can call
the library in a folder.

00:18:30.090 --> 00:18:31.960
Or is there a different
method?

00:18:31.960 --> 00:18:34.060
So you've already looked
into this a little bit.

00:18:34.060 --> 00:18:35.640
JAN KLEINERT: Yeah, actually.

00:18:35.640 --> 00:18:38.290
So if I understood the question
correctly, I looked

00:18:38.290 --> 00:18:40.570
at the table sorter library.

00:18:40.570 --> 00:18:43.315
And if you go to that page, you
can download the ZIP file

00:18:43.315 --> 00:18:46.180
that has all the related files
that you need, the JavaScript

00:18:46.180 --> 00:18:48.380
and everything else.

00:18:48.380 --> 00:18:50.740
While it's true that in any
Apps Script project, you

00:18:50.740 --> 00:18:53.780
cannot just stick the JavaScript
and the CSS files

00:18:53.780 --> 00:18:55.710
in there and then reference
them, you

00:18:55.710 --> 00:18:56.640
have a couple options.

00:18:56.640 --> 00:18:59.320
So if you have somewhere you
would want to maybe host the

00:18:59.320 --> 00:18:59.980
JavaScript files--

00:18:59.980 --> 00:19:02.530
I was thinking you could
possibly even do it as an

00:19:02.530 --> 00:19:05.750
attachment in Google Sites as
one kind of quick and dirty

00:19:05.750 --> 00:19:07.170
way of doing it.

00:19:07.170 --> 00:19:09.780
And then you can reference in
the script file, you could do

00:19:09.780 --> 00:19:12.380
source equals and then point to
the URL of where you have

00:19:12.380 --> 00:19:16.360
that file posted, even if it
is as a Sites attachment.

00:19:16.360 --> 00:19:17.200
That's one option.

00:19:17.200 --> 00:19:20.150
The other would be, if it's
not too terribly much code

00:19:20.150 --> 00:19:22.900
that it makes you go crazy to
paste it all in, you can

00:19:22.900 --> 00:19:24.760
inline that code from
the library

00:19:24.760 --> 00:19:25.780
just into your scripts.

00:19:25.780 --> 00:19:29.010
So in your HTML file in Apps
Script, you can just open up a

00:19:29.010 --> 00:19:33.040
script tag, paste in all of that
library, and then get on

00:19:33.040 --> 00:19:33.760
with your coding.

00:19:33.760 --> 00:19:36.550
So those are a couple options.

00:19:36.550 --> 00:19:38.620
I have been hearing some
requests from people who want

00:19:38.620 --> 00:19:42.260
to be able to include other
types of files and other

00:19:42.260 --> 00:19:45.095
assets within their Apps
Script project.

00:19:45.095 --> 00:19:48.575
If that's something that you
would prefer, then be sure to

00:19:48.575 --> 00:19:51.130
use that in the issue tracker so
we can get a sense for how

00:19:51.130 --> 00:19:53.475
many people are looking for that
sort of functionality.

00:19:56.980 --> 00:19:57.820
ERIC KOLEDA: One other thing I
was going to say about the

00:19:57.820 --> 00:20:01.080
scripts is that the way that the
HTML service and the apps

00:20:01.080 --> 00:20:03.190
that are [INAUDIBLE] it work is
it uses a technology called

00:20:03.190 --> 00:20:07.820
Caja, which kind of inspects
and modifies your HTML and

00:20:07.820 --> 00:20:10.370
JavaScript to make sure that
nothing fishy is going on.

00:20:10.370 --> 00:20:13.240
So not every script you find in
the world is going to work

00:20:13.240 --> 00:20:14.730
with Caja straight
off the bat.

00:20:14.730 --> 00:20:16.660
Caja will go in there,
poke around.

00:20:16.660 --> 00:20:18.920
And if it's doing anything that
is dangerous, it could

00:20:18.920 --> 00:20:20.622
potential remove that part of
the code, and it will block it

00:20:20.622 --> 00:20:21.090
from working.

00:20:21.090 --> 00:20:25.560
So for libraries and jQuery
libraries, jQuery itself is

00:20:25.560 --> 00:20:26.280
supported by Caja.

00:20:26.280 --> 00:20:27.410
They have verified that.

00:20:27.410 --> 00:20:28.120
It's a popular library.

00:20:28.120 --> 00:20:31.370
But for a lot of derivative
plug-in libraries, if those

00:20:31.370 --> 00:20:33.700
haven't been explicitly tested
with Caja, they may not work,

00:20:33.700 --> 00:20:35.080
and you'll have to do
some testing there.

00:20:35.080 --> 00:20:37.030
JAN KLEINERT: And if you want to
get a sense of that without

00:20:37.030 --> 00:20:39.300
having to write your script
first there, if you search for

00:20:39.300 --> 00:20:43.780
Caja Playground, there is an
easy tool you can use to check

00:20:43.780 --> 00:20:48.420
and see if something will cajole
properly or not so that

00:20:48.420 --> 00:20:52.692
you can save yourself a little
trouble up front.

00:20:52.692 --> 00:20:54.040
ERIC KOLEDA: Want to
take the next one?

00:20:54.040 --> 00:20:54.650
JAN KLEINERT: Oh, sure.

00:20:54.650 --> 00:20:57.710
ERIC KOLEDA: You were going
to answer it anyhow.

00:20:57.710 --> 00:21:00.360
JAN KLEINERT: So I have a UI
form that's pulling in a list

00:21:00.360 --> 00:21:02.086
of students from a sheet.

00:21:02.086 --> 00:21:04.750
So I've coded it to loop one
at a time and add it to the

00:21:04.750 --> 00:21:05.630
drop-down list.

00:21:05.630 --> 00:21:07.850
If I have over 300 students,
it'll take 20 seconds.

00:21:07.850 --> 00:21:08.510
Help.

00:21:08.510 --> 00:21:10.780
So someone else has actually
added in a comment here, which

00:21:10.780 --> 00:21:12.070
I'm going to read through.

00:21:12.070 --> 00:21:14.670
Oh, and look, this is actually
a good suggestion here.

00:21:14.670 --> 00:21:17.550
So one of the best ways to solve
this is to load the list

00:21:17.550 --> 00:21:19.750
of the students into a cache.

00:21:19.750 --> 00:21:21.980
So we have a cache service.

00:21:21.980 --> 00:21:23.610
Things like this would make
sense for this, especially if

00:21:23.610 --> 00:21:26.110
your list of students is not
going to be changing a lot on

00:21:26.110 --> 00:21:30.770
the fly like from any one use
of the app to another.

00:21:30.770 --> 00:21:34.670
So you can pull in this list of
students, save it using the

00:21:34.670 --> 00:21:37.480
cache service for as long as
you choose to save it.

00:21:37.480 --> 00:21:40.740
I think the default is
35 minutes, maybe?

00:21:40.740 --> 00:21:41.200
ERIC KOLEDA: It's something
like that.

00:21:41.200 --> 00:21:43.413
But yeah., you can even specify
it down to the second.

00:21:43.413 --> 00:21:43.866
JAN KLEINERT: Yeah.

00:21:43.866 --> 00:21:46.750
Or even up to six
hours, I think.

00:21:46.750 --> 00:21:49.790
And then that could be much,
much faster on subsequent

00:21:49.790 --> 00:21:53.305
accesses to that list
of students.

00:21:53.305 --> 00:21:56.295
So it would take a little bit of
time for the first time you

00:21:56.295 --> 00:21:57.920
pull it from the spreadsheet.

00:21:57.920 --> 00:22:02.480
And instead of looping one at
a time, make sure basically,

00:22:02.480 --> 00:22:05.370
that you pull it from the
spreadsheet using getValues

00:22:05.370 --> 00:22:08.110
instead of a loop where you're
doing getValue, and that will

00:22:08.110 --> 00:22:10.100
be much, much faster too.

00:22:10.100 --> 00:22:12.140
And that should help you out.

00:22:12.140 --> 00:22:14.430
The other option here, they
were saying to maybe store

00:22:14.430 --> 00:22:17.260
those records in ScriptDb
instead of spreadsheets.

00:22:17.260 --> 00:22:20.000
That may save you
some time, too.

00:22:20.000 --> 00:22:23.960
I think it is generally somewhat
faster to pull things

00:22:23.960 --> 00:22:27.360
from ScriptDb than to pull
from spreadsheet cells.

00:22:27.360 --> 00:22:31.030
So for 300 records, you probably
aren't going to get a

00:22:31.030 --> 00:22:34.210
huge difference, but I would say
cache service is the way

00:22:34.210 --> 00:22:37.480
to go with this.

00:22:37.480 --> 00:22:38.610
ERIC KOLEDA: So the next one
we have in here, is there a

00:22:38.610 --> 00:22:42.150
way to apply query to sheets in
a spreadsheet when I join

00:22:42.150 --> 00:22:43.220
two tables?

00:22:43.220 --> 00:22:45.260
So I'm not entirely clear
on what this means.

00:22:45.260 --> 00:22:47.310
I know there is a query function
built into Google

00:22:47.310 --> 00:22:50.650
spreadsheets that allows you
to look over a range and

00:22:50.650 --> 00:22:52.460
filter them down.

00:22:52.460 --> 00:22:54.510
And Apps Script does
have the ability to

00:22:54.510 --> 00:22:55.735
set formulas in cells.

00:22:55.735 --> 00:22:58.100
So you could use Apps Script
to build these

00:22:58.100 --> 00:22:59.870
formulas for you.

00:22:59.870 --> 00:23:02.530
However, you can'y natively call
spreadsheet functions in

00:23:02.530 --> 00:23:03.090
Apps Script.

00:23:03.090 --> 00:23:06.560
So you can't call in your
code the query method.

00:23:06.560 --> 00:23:09.160
What you could do is set that
formula into a cell, but you

00:23:09.160 --> 00:23:11.520
ca't actually call it and
get the result back.

00:23:11.520 --> 00:23:13.670
But a thing that we've talked
about before with data

00:23:13.670 --> 00:23:15.790
options, there's a lot of
different ways to store data,

00:23:15.790 --> 00:23:17.770
get data, merge data, encode.

00:23:17.770 --> 00:23:20.870
So there are a lot of
possibilities to go about it.

00:23:20.870 --> 00:23:22.100
It depends on what you
are looking for.

00:23:22.100 --> 00:23:23.610
JAN KLEINERT: I would say for
this one, if we are not

00:23:23.610 --> 00:23:25.860
totally understanding what you
are asking for, post this on

00:23:25.860 --> 00:23:28.740
Stack Overflow with some example
code of what you're

00:23:28.740 --> 00:23:29.650
trying to do.

00:23:29.650 --> 00:23:32.006
And we or someone else
can probably

00:23:32.006 --> 00:23:32.925
help you find a solution.

00:23:32.925 --> 00:23:35.690
ERIC KOLEDA: Yeah.

00:23:35.690 --> 00:23:38.720
JAN KLEINERT: So there's an
XLS file in Google Drive.

00:23:38.720 --> 00:23:40.865
We need to convert it
automatically to a spreadsheet

00:23:40.865 --> 00:23:44.140
by Apps Script or else by
a Chrome extension.

00:23:44.140 --> 00:23:45.970
So I posted a link
to some manual

00:23:45.970 --> 00:23:46.910
instructions for doing this.

00:23:46.910 --> 00:23:51.770
I think if you right-click in
Drive on one of these files,

00:23:51.770 --> 00:23:56.055
and there's the option to
basically turn it into a

00:23:56.055 --> 00:23:57.550
related Google document.

00:23:57.550 --> 00:24:00.040
I don't believe, and correct me
if you can think of a way

00:24:00.040 --> 00:24:02.430
of doing this, but I don't
think we have a way of

00:24:02.430 --> 00:24:03.985
directly doing this
in Apps Script.

00:24:03.985 --> 00:24:07.920
We kind of have a way of getting
data from a Google

00:24:07.920 --> 00:24:10.500
spreadsheet into some other
formats, such as a PDF, but we

00:24:10.500 --> 00:24:13.590
don't have a way today of going
the opposite direction.

00:24:13.590 --> 00:24:15.900
So that would make a great
feature request.

00:24:15.900 --> 00:24:18.070
So please do add it in the issue
tracker, which you can

00:24:18.070 --> 00:24:19.602
get to from our documentation.

00:24:22.520 --> 00:24:24.010
ERIC KOLEDA: We've got
some new ones here.

00:24:24.010 --> 00:24:26.530
So we have, how do you change
text in the text box without

00:24:26.530 --> 00:24:27.810
reloading the UI?

00:24:27.810 --> 00:24:30.860
So I'm assuming this is
the UI app, as your

00:24:30.860 --> 00:24:32.930
answer here is addressed.

00:24:32.930 --> 00:24:38.080
It is possible to do this using
client handlers, even

00:24:38.080 --> 00:24:38.960
server handlers to a degree.

00:24:38.960 --> 00:24:43.550
So when you're using the UI app,
essentially, what you're

00:24:43.550 --> 00:24:45.600
doing is you're modifying it
in your script and then

00:24:45.600 --> 00:24:48.405
returning that app back again,
whether it began to do that or

00:24:48.405 --> 00:24:50.680
in the handler class.

00:24:50.680 --> 00:24:53.910
And if you are using a server
handler, there is a trip to

00:24:53.910 --> 00:24:56.840
the server, some calculation
takes place, and then the data

00:24:56.840 --> 00:24:58.710
is updated on the client.

00:24:58.710 --> 00:25:02.660
Even so, it's not a full-page
refresh as you would see maybe

00:25:02.660 --> 00:25:04.260
in other [INAUDIBLE] apps.

00:25:04.260 --> 00:25:05.830
But if you use client handlers,
it's even faster,

00:25:05.830 --> 00:25:07.565
because there's no round
trip the server

00:25:07.565 --> 00:25:09.390
that would take place.

00:25:09.390 --> 00:25:12.600
So as the sample code that Jan
posted here, you can actually

00:25:12.600 --> 00:25:16.285
do some SetText in a client
handler to modify

00:25:16.285 --> 00:25:17.940
some of the text box.

00:25:17.940 --> 00:25:22.645
So that's something you might
look into for a super speedy

00:25:22.645 --> 00:25:23.485
text box modification.

00:25:23.485 --> 00:25:24.620
JAN KLEINERT: Right.

00:25:24.620 --> 00:25:29.060
And [INAUDIBLE], client handlers
won't necessarily

00:25:29.060 --> 00:25:31.900
work on every single type of
widget, but they will work on

00:25:31.900 --> 00:25:32.960
quite a few of them.

00:25:32.960 --> 00:25:34.400
ERIC KOLEDA: And they don't
have every option.

00:25:34.400 --> 00:25:35.490
JAN KLEINERT: Right.

00:25:35.490 --> 00:25:37.370
ERIC KOLEDA: But if you want to
do some simple things like

00:25:37.370 --> 00:25:38.950
she said here about making
some things visible or

00:25:38.950 --> 00:25:41.752
invisible, changing some style
properties I think, changing

00:25:41.752 --> 00:25:43.240
the text in this
case, those are

00:25:43.240 --> 00:25:45.656
possible in client handlers.

00:25:45.656 --> 00:25:48.510
JAN KLEINERT: And we have
one last question here.

00:25:48.510 --> 00:25:50.290
So why aren't you using
a Chromebook?

00:25:50.290 --> 00:25:51.560
So fair question.

00:25:51.560 --> 00:25:53.000
My Chromebook is at my desk.

00:25:53.000 --> 00:25:55.710
And actually, you can't see
this, but if I were to turn

00:25:55.710 --> 00:25:57.980
the camera around, you would
see we've got a couple

00:25:57.980 --> 00:25:58.740
Chromebooks set up
in here too.

00:25:58.740 --> 00:26:02.700
So we use lots of different
computers.

00:26:02.700 --> 00:26:03.650
Fair question.

00:26:03.650 --> 00:26:06.530
Maybe next week we'll have
a Chromebook set up here.

00:26:06.530 --> 00:26:07.740
Actually, we will.

00:26:07.740 --> 00:26:08.325
I am getting a nod.

00:26:08.325 --> 00:26:09.802
We are going to have
a Chromebook set

00:26:09.802 --> 00:26:11.560
up here next week.

00:26:11.560 --> 00:26:12.060
JOSH: Well, wait, wait, wait.

00:26:12.060 --> 00:26:14.610
I have an incredibly important
question now.

00:26:14.610 --> 00:26:18.520
How do I go about getting
one of those stickers?

00:26:18.520 --> 00:26:19.200
JAN KLEINERT: Oh my gosh.

00:26:19.200 --> 00:26:21.250
If I could just tell you how
many people ask me that.

00:26:21.250 --> 00:26:21.835
And I don't know the answer.

00:26:21.835 --> 00:26:22.450
JOSH: I bet.

00:26:22.450 --> 00:26:25.700
JAN KLEINERT: I can't even find
another one of these.

00:26:25.700 --> 00:26:27.470
I don't know where
they come from.

00:26:27.470 --> 00:26:30.630
So unfortunately, I don't
know how to get more.

00:26:30.630 --> 00:26:33.210
But if I ever find out,
I will let you

00:26:33.210 --> 00:26:35.210
know in a future hangout.

00:26:35.210 --> 00:26:35.780
JOSH: Please do.

00:26:35.780 --> 00:26:36.480
JAN KLEINERT: OK.

00:26:36.480 --> 00:26:37.950
I should just take
the sticker away

00:26:37.950 --> 00:26:40.600
because it's too tempting.

00:26:40.600 --> 00:26:43.840
JOSH: I'm wondering if
it would peel off.

00:26:43.840 --> 00:26:44.560
JAN KLEINERT: Not well.

00:26:44.560 --> 00:26:46.680
And once it peels
off, it's done.

00:26:46.680 --> 00:26:47.980
JOSH: It is fantastic.

00:26:47.980 --> 00:26:48.400
JAN KLEINERT: Thanks.

00:26:48.400 --> 00:26:50.915
ERIC KOLEDA: So we've had a
number of people join the

00:26:50.915 --> 00:26:52.880
hangout while we've been going
through the moderator.

00:26:52.880 --> 00:26:54.993
In the couple of minutes we have
left, does anyone else

00:26:54.993 --> 00:26:56.480
who's live here want
to ask a question?

00:26:59.070 --> 00:27:00.610
AUDIENCE: Ah, you know what?

00:27:00.610 --> 00:27:04.420
I just realized it's at
11 o'clock, not 11:30.

00:27:04.420 --> 00:27:07.980
That explains why you're
just about done.

00:27:07.980 --> 00:27:09.940
Hope it was a great hangout.

00:27:09.940 --> 00:27:11.305
Actually, I do have
a question.

00:27:13.830 --> 00:27:20.520
It was about issue tracker and
stack overflow, and how do you

00:27:20.520 --> 00:27:23.590
prioritize those in terms--

00:27:23.590 --> 00:27:26.040
I noticed like on issue
tracker, I've been on.

00:27:26.040 --> 00:27:27.080
And Jan, thank you.

00:27:27.080 --> 00:27:31.110
I saw that you triaged
a couple of things

00:27:31.110 --> 00:27:32.110
that I put on there.

00:27:32.110 --> 00:27:33.890
How do you decide, because I
noticed there is a lot of

00:27:33.890 --> 00:27:37.240
things on issue tracker that
don't actually have any sort

00:27:37.240 --> 00:27:40.900
of response from anyone.

00:27:40.900 --> 00:27:43.670
How do you decide what to
respond to and what not to

00:27:43.670 --> 00:27:45.190
respond to?

00:27:45.190 --> 00:27:47.630
JAN KLEINERT: So the goal of the
issue tracker is, the goal

00:27:47.630 --> 00:27:50.320
is for us to get to every
single issue on there.

00:27:50.320 --> 00:27:53.090
Sometimes it may take longer for
some issues than others,

00:27:53.090 --> 00:27:56.500
but once we set something to
triage, or feedback requested

00:27:56.500 --> 00:28:01.070
state, it means that we've
either tried to take action on

00:28:01.070 --> 00:28:03.170
it but we need more information,
or we've raised

00:28:03.170 --> 00:28:03.780
it internally.

00:28:03.780 --> 00:28:06.215
That's basically what the
triage status means.

00:28:06.215 --> 00:28:08.750
If something's still in new
status, we probably have

00:28:08.750 --> 00:28:12.040
looked at it, and we just
haven't yet figured out where

00:28:12.040 --> 00:28:15.550
we need to, or how we need
to, raise it internally.

00:28:15.550 --> 00:28:18.080
And then some issues where it
turns out something might not

00:28:18.080 --> 00:28:20.760
be feasible for us to fix,
either now or in the near

00:28:20.760 --> 00:28:23.540
future, we may close something
out and state that and maybe

00:28:23.540 --> 00:28:26.800
give you a workaround instead.

00:28:26.800 --> 00:28:27.590
AUDIENCE: That makes sense.

00:28:27.590 --> 00:28:31.395
I was just wondering though,
because it seemed like back a

00:28:31.395 --> 00:28:36.440
ways, there were some issues
that didn't actually have

00:28:36.440 --> 00:28:37.965
anything, going back
quite a ways.

00:28:40.660 --> 00:28:42.850
That's what I was just kind of
wondering about was some of

00:28:42.850 --> 00:28:46.200
those older ones that maybe
are in back awhile, and

00:28:46.200 --> 00:28:48.270
recognizing you have a difficult
time, lots of

00:28:48.270 --> 00:28:49.527
information flowing at you.

00:28:49.527 --> 00:28:49.750
But--

00:28:49.750 --> 00:28:52.590
ERIC KOLEDA: Well, if you've
been on some of those really

00:28:52.590 --> 00:28:54.920
old issues, I have
actually started.

00:28:54.920 --> 00:28:56.630
Every day, we kind of handle
all of the new

00:28:56.630 --> 00:28:57.380
stuff that comes in.

00:28:57.380 --> 00:29:00.540
But also, kind of as another
project, gone back in time and

00:29:00.540 --> 00:29:02.560
made sure that anything that
fell through the cracks gets

00:29:02.560 --> 00:29:02.900
an answer now.

00:29:02.900 --> 00:29:04.605
So we've been on some
of those older ones.

00:29:04.605 --> 00:29:05.533
I've been replying
to them, too.

00:29:05.533 --> 00:29:08.325
So I think eventually, we're
going to meet in the middle.

00:29:08.325 --> 00:29:12.920
And everything will be either
triaged or feedback requested

00:29:12.920 --> 00:29:14.510
or something else.

00:29:14.510 --> 00:29:16.210
AUDIENCE: Or fresh, right?

00:29:16.210 --> 00:29:17.790
And I understand it's
not the same day.

00:29:17.790 --> 00:29:19.870
I was just kind of curious
about that.

00:29:19.870 --> 00:29:22.590
And then I guess the other
little question is sort of

00:29:22.590 --> 00:29:23.040
subsequent.

00:29:23.040 --> 00:29:26.440
So once you have triaged it,
do you have a framework for

00:29:26.440 --> 00:29:29.420
prioritizing and deciding
which enhancement--

00:29:29.420 --> 00:29:33.230
defects, obviously, you decide
how effective is it.

00:29:33.230 --> 00:29:36.040
But in terms of enhancements,
how do you decide?

00:29:36.040 --> 00:29:37.930
What's your process?

00:29:37.930 --> 00:29:40.875
So you're Developer Relations,
so you've got this enhancement

00:29:40.875 --> 00:29:43.230
that you think looks
interesting.

00:29:43.230 --> 00:29:45.670
What's your internal process
for taking that back to the

00:29:45.670 --> 00:29:50.400
engineers and deciding
how important is it?

00:29:50.400 --> 00:29:53.566
Where does it fall in
the whole framework?

00:29:53.566 --> 00:29:54.440
JAN KLEINERT: That's
a good question.

00:29:54.440 --> 00:29:56.740
So there's a few parts to it.

00:29:56.740 --> 00:29:59.490
One of them I can definitely
tell you is the number of

00:29:59.490 --> 00:30:01.410
stars on that issue tracker.

00:30:01.410 --> 00:30:03.590
So every time somebody wants to
follow an issue, they can

00:30:03.590 --> 00:30:05.800
star it, and we can see
the number of stars.

00:30:05.800 --> 00:30:09.950
And that is a good indicator of
interest to us for how many

00:30:09.950 --> 00:30:12.440
people are looking for a
particular type of feature.

00:30:12.440 --> 00:30:15.300
Other ones may already
fall into some road

00:30:15.300 --> 00:30:16.330
map that we've defined.

00:30:16.330 --> 00:30:18.340
And so we're like, oh, we're
definitely already

00:30:18.340 --> 00:30:19.040
planning to do that.

00:30:19.040 --> 00:30:21.920
But for ones where it's like,
oh, well, that's a great idea.

00:30:21.920 --> 00:30:23.860
Let's get an understanding for
how many people are looking

00:30:23.860 --> 00:30:26.013
for this type of functionality,
the stars in

00:30:26.013 --> 00:30:28.780
the tracker is one way
that we do that.

00:30:28.780 --> 00:30:30.262
And the products getting ready
to appear at Google and for

00:30:30.262 --> 00:30:32.560
Apps Script has a tough time,
because there are way more

00:30:32.560 --> 00:30:35.440
great ideas than I think
there are hours

00:30:35.440 --> 00:30:36.210
in the day to implement.

00:30:36.210 --> 00:30:38.780
So I think we do a great job.

00:30:38.780 --> 00:30:41.205
The team does a great job here
of trying to figure out what

00:30:41.205 --> 00:30:43.450
is most important to to people
externally, what's going to

00:30:43.450 --> 00:30:45.900
get a lot of good work done,
what's going to enable great

00:30:45.900 --> 00:30:48.000
new uses of Apps Script.

00:30:48.000 --> 00:30:49.860
AUDIENCE: What's the mission
of Google Apps Script?

00:30:53.070 --> 00:30:55.060
JAN KLEINERT: So it's actually
kind of a twofold thing.

00:30:55.060 --> 00:30:57.950
So one is to allow you to
extend what you can do.

00:30:57.950 --> 00:31:00.060
And I'm talking fast because
we're actually a little over

00:31:00.060 --> 00:31:02.640
time, but I want to wrap up
your question for you.

00:31:02.640 --> 00:31:06.340
So one is it allow you as a
developer to really easily

00:31:06.340 --> 00:31:08.630
code and extend what you can
do with Google products,

00:31:08.630 --> 00:31:11.580
specifically a lot of the Google
Apps products, and make

00:31:11.580 --> 00:31:14.840
them more useful to you
and kind of tie all

00:31:14.840 --> 00:31:16.930
those services together.

00:31:16.930 --> 00:31:20.200
Another is just to make it easy
for anybody to build code

00:31:20.200 --> 00:31:20.750
in the browser.

00:31:20.750 --> 00:31:22.280
So you're building this stuff.

00:31:22.280 --> 00:31:23.960
You're just coding
in the browser.

00:31:23.960 --> 00:31:25.870
It runs on Google servers.

00:31:25.870 --> 00:31:28.880
And today, you can build
web apps really

00:31:28.880 --> 00:31:30.330
easily and deploy them.

00:31:30.330 --> 00:31:31.690
You don't have to worry
about hosting.

00:31:31.690 --> 00:31:34.830
So it's all about making a
simple way for you to do all

00:31:34.830 --> 00:31:37.580
of these things.

00:31:37.580 --> 00:31:40.120
And on that note, we are
quite a bit over time.

00:31:40.120 --> 00:31:41.035
So thank you, everybody.

00:31:41.035 --> 00:31:42.040
AUDIENCE: Sorry about that.

00:31:42.040 --> 00:31:43.295
JAN KLEINERT: No
problem at all.

00:31:43.295 --> 00:31:46.670
It's a good question, and we'll
see you all next week.

00:31:46.670 --> 00:31:48.885
And next week, I think we're
going to be at 4:30 PM,

00:31:48.885 --> 00:31:51.946
eastern time, from
a Chromebook.

00:31:51.946 --> 00:31:52.332
AUDIENCE: Thanks.

00:31:52.332 --> 00:31:53.170
JAN KLEINERT: All right.

00:31:53.170 --> 00:31:53.760
AUDIENCE: Bye.

00:31:53.760 --> 00:31:55.010
JAN KLEINERT: Bye.

