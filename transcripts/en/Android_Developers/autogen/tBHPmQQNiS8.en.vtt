WEBVTT
Kind: captions
Language: en

00:00:01.220 --> 00:00:03.470
as much as we'd like to focus on

00:00:03.470 --> 00:00:03.480
as much as we'd like to focus on
 

00:00:03.480 --> 00:00:05.300
as much as we'd like to focus on
creating and managing threads and work

00:00:05.300 --> 00:00:05.310
creating and managing threads and work
 

00:00:05.310 --> 00:00:06.980
creating and managing threads and work
packets we tend to ignore the biggest

00:00:06.980 --> 00:00:06.990
packets we tend to ignore the biggest
 

00:00:06.990 --> 00:00:09.709
packets we tend to ignore the biggest
hardest problem in threaded memory my

00:00:09.709 --> 00:00:09.719
hardest problem in threaded memory my
 

00:00:09.719 --> 00:00:11.030
hardest problem in threaded memory my
name is Colt McAnlis and while threading

00:00:11.030 --> 00:00:11.040
name is Colt McAnlis and while threading
 

00:00:11.040 --> 00:00:12.650
name is Colt McAnlis and while threading
and memory have a long complicated

00:00:12.650 --> 00:00:12.660
and memory have a long complicated
 

00:00:12.660 --> 00:00:14.539
and memory have a long complicated
history and programming there are some

00:00:14.539 --> 00:00:14.549
history and programming there are some
 

00:00:14.549 --> 00:00:16.460
history and programming there are some
specific nuances on Android that you

00:00:16.460 --> 00:00:16.470
specific nuances on Android that you
 

00:00:16.470 --> 00:00:18.380
specific nuances on Android that you
need to be aware of you got to remember

00:00:18.380 --> 00:00:18.390
need to be aware of you got to remember
 

00:00:18.390 --> 00:00:20.870
need to be aware of you got to remember
that memory in computing isn't really

00:00:20.870 --> 00:00:20.880
that memory in computing isn't really
 

00:00:20.880 --> 00:00:22.550
that memory in computing isn't really
thread safe when two threads are

00:00:22.550 --> 00:00:22.560
thread safe when two threads are
 

00:00:22.560 --> 00:00:23.840
thread safe when two threads are
operating on the same block of memory

00:00:23.840 --> 00:00:23.850
operating on the same block of memory
 

00:00:23.850 --> 00:00:26.060
operating on the same block of memory
weird things happen I mean you can get

00:00:26.060 --> 00:00:26.070
weird things happen I mean you can get
 

00:00:26.070 --> 00:00:27.290
weird things happen I mean you can get
memory contention problems with

00:00:27.290 --> 00:00:27.300
memory contention problems with
 

00:00:27.300 --> 00:00:29.720
memory contention problems with
readwrite access order ABA problems rips

00:00:29.720 --> 00:00:29.730
readwrite access order ABA problems rips
 

00:00:29.730 --> 00:00:32.330
readwrite access order ABA problems rips
in the fabric of space-time ok maybe not

00:00:32.330 --> 00:00:32.340
in the fabric of space-time ok maybe not
 

00:00:32.340 --> 00:00:35.030
in the fabric of space-time ok maybe not
maybe not the last one but anyhow fixing

00:00:35.030 --> 00:00:35.040
maybe not the last one but anyhow fixing
 

00:00:35.040 --> 00:00:37.250
maybe not the last one but anyhow fixing
these means restricting memory access

00:00:37.250 --> 00:00:37.260
these means restricting memory access
 

00:00:37.260 --> 00:00:39.139
these means restricting memory access
from threads using locking which is a

00:00:39.139 --> 00:00:39.149
from threads using locking which is a
 

00:00:39.149 --> 00:00:40.459
from threads using locking which is a
whole separate video series that we're

00:00:40.459 --> 00:00:40.469
whole separate video series that we're
 

00:00:40.469 --> 00:00:41.990
whole separate video series that we're
not going to get into right now but most

00:00:41.990 --> 00:00:42.000
not going to get into right now but most
 

00:00:42.000 --> 00:00:43.580
not going to get into right now but most
important to understand is that Android

00:00:43.580 --> 00:00:43.590
important to understand is that Android
 

00:00:43.590 --> 00:00:45.440
important to understand is that Android
isn't immune to these problems for the

00:00:45.440 --> 00:00:45.450
isn't immune to these problems for the
 

00:00:45.450 --> 00:00:47.690
isn't immune to these problems for the
most part the same techniques you use to

00:00:47.690 --> 00:00:47.700
most part the same techniques you use to
 

00:00:47.700 --> 00:00:49.160
most part the same techniques you use to
deal with these issues on other

00:00:49.160 --> 00:00:49.170
deal with these issues on other
 

00:00:49.170 --> 00:00:51.950
deal with these issues on other
platforms can be applied here too but

00:00:51.950 --> 00:00:51.960
platforms can be applied here too but
 

00:00:51.960 --> 00:00:53.779
platforms can be applied here too but
there are a few specific cases that you

00:00:53.779 --> 00:00:53.789
there are a few specific cases that you
 

00:00:53.789 --> 00:00:55.819
there are a few specific cases that you
need to be aware of let's start with the

00:00:55.819 --> 00:00:55.829
need to be aware of let's start with the
 

00:00:55.829 --> 00:00:58.220
need to be aware of let's start with the
fact that by design UI objects are not

00:00:58.220 --> 00:00:58.230
fact that by design UI objects are not
 

00:00:58.230 --> 00:01:00.380
fact that by design UI objects are not
thread safe UI objects are expected to

00:01:00.380 --> 00:01:00.390
thread safe UI objects are expected to
 

00:01:00.390 --> 00:01:02.959
thread safe UI objects are expected to
be created used and destroyed all on the

00:01:02.959 --> 00:01:02.969
be created used and destroyed all on the
 

00:01:02.969 --> 00:01:04.820
be created used and destroyed all on the
UI thread and not guaranteed to behave

00:01:04.820 --> 00:01:04.830
UI thread and not guaranteed to behave
 

00:01:04.830 --> 00:01:07.760
UI thread and not guaranteed to behave
properly on any other threads trying to

00:01:07.760 --> 00:01:07.770
properly on any other threads trying to
 

00:01:07.770 --> 00:01:09.350
properly on any other threads trying to
modify or even reference them on other

00:01:09.350 --> 00:01:09.360
modify or even reference them on other
 

00:01:09.360 --> 00:01:10.880
modify or even reference them on other
threads can throw exceptions cause

00:01:10.880 --> 00:01:10.890
threads can throw exceptions cause
 

00:01:10.890 --> 00:01:13.429
threads can throw exceptions cause
silent failures crashes and just general

00:01:13.429 --> 00:01:13.439
silent failures crashes and just general
 

00:01:13.439 --> 00:01:15.980
silent failures crashes and just general
weirdness that in fact just holding a

00:01:15.980 --> 00:01:15.990
weirdness that in fact just holding a
 

00:01:15.990 --> 00:01:17.660
weirdness that in fact just holding a
direct reference to a UI object on a

00:01:17.660 --> 00:01:17.670
direct reference to a UI object on a
 

00:01:17.670 --> 00:01:19.910
direct reference to a UI object on a
worker thread can be a problem for

00:01:19.910 --> 00:01:19.920
worker thread can be a problem for
 

00:01:19.920 --> 00:01:21.920
worker thread can be a problem for
example your work object may contain a

00:01:21.920 --> 00:01:21.930
example your work object may contain a
 

00:01:21.930 --> 00:01:24.020
example your work object may contain a
reference to a view but before your work

00:01:24.020 --> 00:01:24.030
reference to a view but before your work
 

00:01:24.030 --> 00:01:26.390
reference to a view but before your work
completes on the worker thread the view

00:01:26.390 --> 00:01:26.400
completes on the worker thread the view
 

00:01:26.400 --> 00:01:27.920
completes on the worker thread the view
is removed from the view hierarchy on

00:01:27.920 --> 00:01:27.930
is removed from the view hierarchy on
 

00:01:27.930 --> 00:01:30.679
is removed from the view hierarchy on
the main thread so what do you do here I

00:01:30.679 --> 00:01:30.689
the main thread so what do you do here I
 

00:01:30.689 --> 00:01:32.060
the main thread so what do you do here I
mean you can't trust any of the

00:01:32.060 --> 00:01:32.070
mean you can't trust any of the
 

00:01:32.070 --> 00:01:33.560
mean you can't trust any of the
properties of that view since the data

00:01:33.560 --> 00:01:33.570
properties of that view since the data
 

00:01:33.570 --> 00:01:35.120
properties of that view since the data
has changed and updating those

00:01:35.120 --> 00:01:35.130
has changed and updating those
 

00:01:35.130 --> 00:01:36.620
has changed and updating those
properties doesn't really mean anything

00:01:36.620 --> 00:01:36.630
properties doesn't really mean anything
 

00:01:36.630 --> 00:01:38.240
properties doesn't really mean anything
since it's not part of the hierarchy

00:01:38.240 --> 00:01:38.250
since it's not part of the hierarchy
 

00:01:38.250 --> 00:01:40.280
since it's not part of the hierarchy
anymore and won't be drawn to the screen

00:01:40.280 --> 00:01:40.290
anymore and won't be drawn to the screen
 

00:01:40.290 --> 00:01:42.920
anymore and won't be drawn to the screen
and this gets crazy really quick I

00:01:42.920 --> 00:01:42.930
and this gets crazy really quick I
 

00:01:42.930 --> 00:01:45.080
and this gets crazy really quick I
remember views contain references to

00:01:45.080 --> 00:01:45.090
remember views contain references to
 

00:01:45.090 --> 00:01:46.760
remember views contain references to
their owning activity I mean we did a

00:01:46.760 --> 00:01:46.770
their owning activity I mean we did a
 

00:01:46.770 --> 00:01:49.160
their owning activity I mean we did a
whole video on how leaking those views

00:01:49.160 --> 00:01:49.170
whole video on how leaking those views
 

00:01:49.170 --> 00:01:50.600
whole video on how leaking those views
can cause all sorts of memory problems

00:01:50.600 --> 00:01:50.610
can cause all sorts of memory problems
 

00:01:50.610 --> 00:01:52.969
can cause all sorts of memory problems
but this gets even worse when threading

00:01:52.969 --> 00:01:52.979
but this gets even worse when threading
 

00:01:52.979 --> 00:01:55.249
but this gets even worse when threading
is involved if an activity is destroyed

00:01:55.249 --> 00:01:55.259
is involved if an activity is destroyed
 

00:01:55.259 --> 00:01:57.020
is involved if an activity is destroyed
but there still exists a threaded block

00:01:57.020 --> 00:01:57.030
but there still exists a threaded block
 

00:01:57.030 --> 00:01:59.149
but there still exists a threaded block
of work that references it the activity

00:01:59.149 --> 00:01:59.159
of work that references it the activity
 

00:01:59.159 --> 00:02:00.889
of work that references it the activity
won't get collected until that work

00:02:00.889 --> 00:02:00.899
won't get collected until that work
 

00:02:00.899 --> 00:02:02.749
won't get collected until that work
finishes so if you kick off some work

00:02:02.749 --> 00:02:02.759
finishes so if you kick off some work
 

00:02:02.759 --> 00:02:04.370
finishes so if you kick off some work
and the user rotates the screen three

00:02:04.370 --> 00:02:04.380
and the user rotates the screen three
 

00:02:04.380 --> 00:02:05.600
and the user rotates the screen three
times in a row before that work

00:02:05.600 --> 00:02:05.610
times in a row before that work
 

00:02:05.610 --> 00:02:07.819
times in a row before that work
completes you could end up with three

00:02:07.819 --> 00:02:07.829
completes you could end up with three
 

00:02:07.829 --> 00:02:09.499
completes you could end up with three
instances of that activity object

00:02:09.499 --> 00:02:09.509
instances of that activity object
 

00:02:09.509 --> 00:02:12.110
instances of that activity object
resident in memory and to be clear it's

00:02:12.110 --> 00:02:12.120
resident in memory and to be clear it's
 

00:02:12.120 --> 00:02:13.350
resident in memory and to be clear it's
not just explode

00:02:13.350 --> 00:02:13.360
not just explode
 

00:02:13.360 --> 00:02:15.270
not just explode
references to UI objects that you need

00:02:15.270 --> 00:02:15.280
references to UI objects that you need
 

00:02:15.280 --> 00:02:16.980
references to UI objects that you need
to worry about you also have to be

00:02:16.980 --> 00:02:16.990
to worry about you also have to be
 

00:02:16.990 --> 00:02:19.260
to worry about you also have to be
cautious of implicit references as well

00:02:19.260 --> 00:02:19.270
cautious of implicit references as well
 

00:02:19.270 --> 00:02:22.140
cautious of implicit references as well
check out this very common scene all the

00:02:22.140 --> 00:02:22.150
check out this very common scene all the
 

00:02:22.150 --> 00:02:23.790
check out this very common scene all the
time coding pattern in Android apps

00:02:23.790 --> 00:02:23.800
time coding pattern in Android apps
 

00:02:23.800 --> 00:02:26.040
time coding pattern in Android apps
you've got some threading object that's

00:02:26.040 --> 00:02:26.050
you've got some threading object that's
 

00:02:26.050 --> 00:02:28.230
you've got some threading object that's
declared as an inner class of an

00:02:28.230 --> 00:02:28.240
declared as an inner class of an
 

00:02:28.240 --> 00:02:30.450
declared as an inner class of an
activity the problem here is that the

00:02:30.450 --> 00:02:30.460
activity the problem here is that the
 

00:02:30.460 --> 00:02:33.090
activity the problem here is that the
async task object now has an implicit

00:02:33.090 --> 00:02:33.100
async task object now has an implicit
 

00:02:33.100 --> 00:02:35.550
async task object now has an implicit
reference to the enclosing activity and

00:02:35.550 --> 00:02:35.560
reference to the enclosing activity and
 

00:02:35.560 --> 00:02:37.170
reference to the enclosing activity and
will keep that reference until the work

00:02:37.170 --> 00:02:37.180
will keep that reference until the work
 

00:02:37.180 --> 00:02:39.540
will keep that reference until the work
object has been destroyed the result is

00:02:39.540 --> 00:02:39.550
object has been destroyed the result is
 

00:02:39.550 --> 00:02:41.850
object has been destroyed the result is
the same problem until this work

00:02:41.850 --> 00:02:41.860
the same problem until this work
 

00:02:41.860 --> 00:02:43.830
the same problem until this work
completes the activity stays around in

00:02:43.830 --> 00:02:43.840
completes the activity stays around in
 

00:02:43.840 --> 00:02:45.900
completes the activity stays around in
memory and by the way this type of

00:02:45.900 --> 00:02:45.910
memory and by the way this type of
 

00:02:45.910 --> 00:02:48.210
memory and by the way this type of
pattern also leads to common types of

00:02:48.210 --> 00:02:48.220
pattern also leads to common types of
 

00:02:48.220 --> 00:02:51.420
pattern also leads to common types of
crashes seen in Android apps some block

00:02:51.420 --> 00:02:51.430
crashes seen in Android apps some block
 

00:02:51.430 --> 00:02:53.040
crashes seen in Android apps some block
of threading work is kicked off but the

00:02:53.040 --> 00:02:53.050
of threading work is kicked off but the
 

00:02:53.050 --> 00:02:54.870
of threading work is kicked off but the
user hits back or does something else to

00:02:54.870 --> 00:02:54.880
user hits back or does something else to
 

00:02:54.880 --> 00:02:57.240
user hits back or does something else to
change the topmost activity later when

00:02:57.240 --> 00:02:57.250
change the topmost activity later when
 

00:02:57.250 --> 00:02:58.949
change the topmost activity later when
the threaded work completes it tries to

00:02:58.949 --> 00:02:58.959
the threaded work completes it tries to
 

00:02:58.959 --> 00:03:01.620
the threaded work completes it tries to
make updates to a state that's no longer

00:03:01.620 --> 00:03:01.630
make updates to a state that's no longer
 

00:03:01.630 --> 00:03:03.990
make updates to a state that's no longer
valid the result is a dialog box

00:03:03.990 --> 00:03:04.000
valid the result is a dialog box
 

00:03:04.000 --> 00:03:06.120
valid the result is a dialog box
notifying me that an app I haven't used

00:03:06.120 --> 00:03:06.130
notifying me that an app I haven't used
 

00:03:06.130 --> 00:03:08.729
notifying me that an app I haven't used
for 10 minutes has crashed which is kind

00:03:08.729 --> 00:03:08.739
for 10 minutes has crashed which is kind
 

00:03:08.739 --> 00:03:11.610
for 10 minutes has crashed which is kind
of awkward for everybody the takeaway

00:03:11.610 --> 00:03:11.620
of awkward for everybody the takeaway
 

00:03:11.620 --> 00:03:12.660
of awkward for everybody the takeaway
here is that you shouldn't hold

00:03:12.660 --> 00:03:12.670
here is that you shouldn't hold
 

00:03:12.670 --> 00:03:15.030
here is that you shouldn't hold
references to any types of UI specific

00:03:15.030 --> 00:03:15.040
references to any types of UI specific
 

00:03:15.040 --> 00:03:17.310
references to any types of UI specific
objects in any of your threading

00:03:17.310 --> 00:03:17.320
objects in any of your threading
 

00:03:17.320 --> 00:03:19.620
objects in any of your threading
scenarios which leads to the natural

00:03:19.620 --> 00:03:19.630
scenarios which leads to the natural
 

00:03:19.630 --> 00:03:21.720
scenarios which leads to the natural
question how are we supposed to update

00:03:21.720 --> 00:03:21.730
question how are we supposed to update
 

00:03:21.730 --> 00:03:24.090
question how are we supposed to update
the UI from threaded work the trick here

00:03:24.090 --> 00:03:24.100
the UI from threaded work the trick here
 

00:03:24.100 --> 00:03:25.740
the UI from threaded work the trick here
is to force the top-level activity or

00:03:25.740 --> 00:03:25.750
is to force the top-level activity or
 

00:03:25.750 --> 00:03:27.210
is to force the top-level activity or
fragment to be the sole system

00:03:27.210 --> 00:03:27.220
fragment to be the sole system
 

00:03:27.220 --> 00:03:29.190
fragment to be the sole system
responsible for updating the UI objects

00:03:29.190 --> 00:03:29.200
responsible for updating the UI objects
 

00:03:29.200 --> 00:03:31.140
responsible for updating the UI objects
for example when you like to kick off

00:03:31.140 --> 00:03:31.150
for example when you like to kick off
 

00:03:31.150 --> 00:03:33.090
for example when you like to kick off
some work create a work record that

00:03:33.090 --> 00:03:33.100
some work create a work record that
 

00:03:33.100 --> 00:03:35.190
some work create a work record that
pairs a view with some update function

00:03:35.190 --> 00:03:35.200
pairs a view with some update function
 

00:03:35.200 --> 00:03:36.810
pairs a view with some update function
when that block of work is finished it

00:03:36.810 --> 00:03:36.820
when that block of work is finished it
 

00:03:36.820 --> 00:03:38.580
when that block of work is finished it
submits the results back to the activity

00:03:38.580 --> 00:03:38.590
submits the results back to the activity
 

00:03:38.590 --> 00:03:40.920
submits the results back to the activity
using an intent or a run on UI thread

00:03:40.920 --> 00:03:40.930
using an intent or a run on UI thread
 

00:03:40.930 --> 00:03:43.050
using an intent or a run on UI thread
call the activity can then call the

00:03:43.050 --> 00:03:43.060
call the activity can then call the
 

00:03:43.060 --> 00:03:44.430
call the activity can then call the
update function with the new information

00:03:44.430 --> 00:03:44.440
update function with the new information
 

00:03:44.440 --> 00:03:47.280
update function with the new information
or if the view isn't there just drop the

00:03:47.280 --> 00:03:47.290
or if the view isn't there just drop the
 

00:03:47.290 --> 00:03:49.380
or if the view isn't there just drop the
work altogether and if the activity that

00:03:49.380 --> 00:03:49.390
work altogether and if the activity that
 

00:03:49.390 --> 00:03:51.720
work altogether and if the activity that
issued the work was destroyed then the

00:03:51.720 --> 00:03:51.730
issued the work was destroyed then the
 

00:03:51.730 --> 00:03:53.430
issued the work was destroyed then the
new activity won't have a reference to

00:03:53.430 --> 00:03:53.440
new activity won't have a reference to
 

00:03:53.440 --> 00:03:55.020
new activity won't have a reference to
any of this and will just drop the work

00:03:55.020 --> 00:03:55.030
any of this and will just drop the work
 

00:03:55.030 --> 00:03:57.240
any of this and will just drop the work
to see no crashes no memory leaks just

00:03:57.240 --> 00:03:57.250
to see no crashes no memory leaks just
 

00:03:57.250 --> 00:04:00.270
to see no crashes no memory leaks just
pure clean fun now if you ever want a

00:04:00.270 --> 00:04:00.280
pure clean fun now if you ever want a
 

00:04:00.280 --> 00:04:02.009
pure clean fun now if you ever want a
deeper look at how threading and memory

00:04:02.009 --> 00:04:02.019
deeper look at how threading and memory
 

00:04:02.019 --> 00:04:03.810
deeper look at how threading and memory
are working together make sure to check

00:04:03.810 --> 00:04:03.820
are working together make sure to check
 

00:04:03.820 --> 00:04:05.520
are working together make sure to check
out the powerful new tools inside of

00:04:05.520 --> 00:04:05.530
out the powerful new tools inside of
 

00:04:05.530 --> 00:04:07.560
out the powerful new tools inside of
Android studio which just get an awesome

00:04:07.560 --> 00:04:07.570
Android studio which just get an awesome
 

00:04:07.570 --> 00:04:10.979
Android studio which just get an awesome
revamp as a version 2.0 the deeper you

00:04:10.979 --> 00:04:10.989
revamp as a version 2.0 the deeper you
 

00:04:10.989 --> 00:04:12.569
revamp as a version 2.0 the deeper you
go into Android performance the more you

00:04:12.569 --> 00:04:12.579
go into Android performance the more you
 

00:04:12.579 --> 00:04:15.240
go into Android performance the more you
realize how important memory is on this

00:04:15.240 --> 00:04:15.250
realize how important memory is on this
 

00:04:15.250 --> 00:04:16.890
realize how important memory is on this
platform which is why you should check

00:04:16.890 --> 00:04:16.900
platform which is why you should check
 

00:04:16.900 --> 00:04:18.900
platform which is why you should check
out the rest of the memory videos on the

00:04:18.900 --> 00:04:18.910
out the rest of the memory videos on the
 

00:04:18.910 --> 00:04:20.370
out the rest of the memory videos on the
Android performance patterns playlist

00:04:20.370 --> 00:04:20.380
Android performance patterns playlist
 

00:04:20.380 --> 00:04:21.599
Android performance patterns playlist
and don't forget to check out our

00:04:21.599 --> 00:04:21.609
and don't forget to check out our
 

00:04:21.609 --> 00:04:24.690
and don't forget to check out our
Google+ community as well so keep calm

00:04:24.690 --> 00:04:24.700
Google+ community as well so keep calm
 

00:04:24.700 --> 00:04:27.200
Google+ community as well so keep calm
profile your code and always remember

00:04:27.200 --> 00:04:27.210
profile your code and always remember
 

00:04:27.210 --> 00:04:29.630
profile your code and always remember
perfmatters

