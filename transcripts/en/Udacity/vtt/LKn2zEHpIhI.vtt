WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.710
In crossbar switching every input port has a connection

00:00:03.710 --> 00:00:07.190
to every output port, and during each time slot, each

00:00:07.190 --> 00:00:11.800
input is connected to zero or one outputs. The crossbar

00:00:11.800 --> 00:00:14.510
is often depicted as follows. So if one wants to

00:00:14.510 --> 00:00:16.800
send to four, we could connect the input to

00:00:16.800 --> 00:00:19.630
the output in that time slot, and now this row

00:00:19.630 --> 00:00:22.770
and this column is occupied. But we could connect two

00:00:22.770 --> 00:00:25.670
to six and three to five in the same time

00:00:25.670 --> 00:00:29.980
slot without introducing contention. So the advantage

00:00:29.980 --> 00:00:31.270
of this design is that it can

00:00:31.270 --> 00:00:34.440
exploit parallelism by allowing multiple packets to

00:00:34.440 --> 00:00:36.990
be forwarded across the interconnect in parallel.

00:00:36.990 --> 00:00:42.010
But of course we also need proper scheduling algorithms To ensure fair use of

00:00:42.010 --> 00:00:44.180
the crossbar switch. Let's take a quick

00:00:44.180 --> 00:00:46.480
look at what this algorithm needs to achieve.

