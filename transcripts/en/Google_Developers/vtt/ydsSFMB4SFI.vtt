WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.040
&gt;&gt; All right. Hey, everyone. Today, I want
to talk about the Google Wave Conversation

00:00:05.040 --> 00:00:10.620
Model. Now, it’s important to understand
the Wave Conversation Model as a user because

00:00:10.620 --> 00:00:16.740
it lets you understand what Wave is capable
of in terms of the conversations and the documents.

00:00:16.740 --> 00:00:21.890
And it’s important to understand that as
a Wave API Developer because it lets you understand

00:00:21.890 --> 00:00:26.900
what your robot is capable of, and how your
robot can manipulate the Waves and conversations.

00:00:26.900 --> 00:00:33.160
So, to start off with, let’s talk about
the thing that everybody talks about, which

00:00:33.160 --> 00:00:40.489
is a Wave. Now, a Wave isn’t actually much
of anything at all. It’s actually a collection

00:00:40.489 --> 00:00:49.010
of one or more wavelets that a particular
viewer has access to within the designated

00:00:49.010 --> 00:00:53.800
Wave. So, in this example right here, we have
an hour conversation with four participants,

00:00:53.800 --> 00:01:00.290
and an inner conversation with two participants,
and each of these are actually what we called

00:01:00.290 --> 00:01:07.090
wavelets, and this particular user has access
to these two wavelets, and so, this is what

00:01:07.090 --> 00:01:12.229
they see when they see a Wave. Another user
looking at the Wave that doesn’t have access

00:01:12.229 --> 00:01:19.270
to that private reply would only see that
outer wavelet. So Wave is actually different

00:01:19.270 --> 00:01:24.909
depending on who’s looking at it, because
they may or may not have access to every single

00:01:24.909 --> 00:01:29.549
possible wavelet that’s designated without
Wave ID. So, as you can see the wavelet is

00:01:29.549 --> 00:01:35.400
actually where all the conversation and good
stuff happens. So, let’s look in more detail

00:01:35.400 --> 00:01:41.280
with a wavelet. So, a wavelet is a collection
of participants, and a collection of documents

00:01:41.280 --> 00:01:46.479
that those participants have access to. The
documents are a conversation document which

00:01:46.479 --> 00:01:52.810
describes the structure--all conversation;
a collection of blips which is each of the

00:01:52.810 --> 00:01:56.710
messages, and tags. And there’s also a few
other located documents that we don’t actually

00:01:56.710 --> 00:02:04.119
see rendered of a client. So it’s just the
list of everybody on the wavelet, and we’ve

00:02:04.119 --> 00:02:10.170
also seen that list whether they have full
access or read-only which is the basic controls

00:02:10.170 --> 00:02:19.500
that we have right now in the Wave model.
The time is very simple, just a list of times,

00:02:19.500 --> 00:02:25.690
and the conversation document here looks pretty
simple. It’s just a sequence of blip elements,

00:02:25.690 --> 00:02:31.750
and each blip having an ID. And this basically
shows the Wave client how that you’d render

00:02:31.750 --> 00:02:38.190
each of those blips. We’ll see more complex
conversation document later. The blip document

00:02:38.190 --> 00:02:43.980
here is really simple. It’s just basically
has the text of the message, when are we getting

00:02:43.980 --> 00:02:52.390
pizza? We also see more complex blip document
later. So, the conversation document, and

00:02:52.390 --> 00:02:59.510
this is really cool because it’s what lets
us have--inline conversations, nested conversations,

00:02:59.510 --> 00:03:04.640
all these multithreaded conversations are
only possible view the conversation document.

00:03:04.640 --> 00:03:11.410
So, this example here has one main blip where
I put a few sentences of the text, and then

00:03:11.410 --> 00:03:16.530
I’ve done inline conversations below each
of those sensitive texts, and that’s what

00:03:16.530 --> 00:03:21.930
we would call an inline thread in the conversation
document. The first thread has one blip. The

00:03:21.930 --> 00:03:25.950
second thread has two blips, and the third
thread actually has an inner thread inside

00:03:25.950 --> 00:03:32.190
of it. So let’s see what that looks like
in the actual conversation document XML. So

00:03:32.190 --> 00:03:38.780
here’s XML, you can see there’s a blip,
and then the blip has sub-children that are

00:03:38.780 --> 00:03:43.740
thread elements, and they specify that they
are inline as an--actually we have the thread

00:03:43.740 --> 00:03:50.500
elements. So you can see this is--it’s a
very simple--XML like structure that lets

00:03:50.500 --> 00:03:58.000
us specify broader complex, and nested conversations.
Now, the really cool thing about conversation

00:03:58.000 --> 00:04:02.989
documents is the inherent flexibility in this
format. So, we envisioned a future where users

00:04:02.989 --> 00:04:08.049
and API developers can actually perform something
really like what is called blip surgery which

00:04:08.049 --> 00:04:13.720
means that you could move blips around the
inside of the conversation, and you can move

00:04:13.720 --> 00:04:20.909
threads around, and it’s all highly flexible,
right? So, this is a really cool future because

00:04:20.909 --> 00:04:26.779
it means that you can better carry your Waves.
And, you know, if you see a thread that really

00:04:26.779 --> 00:04:32.110
should’ve gone up there, then you would
simply drag and drop it over there. And this

00:04:32.110 --> 00:04:38.050
is the flexibility that’s in Wave, and it’s
not in the lot of other conversation from

00:04:38.050 --> 00:04:42.860
what’s out there. So, now let’s talk about
the blip document. So, the really cool thing

00:04:42.860 --> 00:04:48.779
about the blip document is that we can actually
do multimedia rich messages inside of a blip

00:04:48.779 --> 00:04:54.159
instead of just doing text. And the way we
do this is we are using the combination of

00:04:54.159 --> 00:05:02.669
element and annotations. So, the example here,
the annotations make the awesome hold, and

00:05:02.669 --> 00:05:10.909
make the image element show up, and make the
link, link up to across that. So, the elements

00:05:10.909 --> 00:05:15.970
are specified in the blip XML, and you can
see, we start with a really basic element;

00:05:15.970 --> 00:05:21.830
the line element. And that can have attributes
like alignment whether it’s bulleted, heading,

00:05:21.830 --> 00:05:26.639
etcetera, and we have some text, and then
we have the image element which has actually

00:05:26.639 --> 00:05:31.639
the route which specifies, you know, where
that image comes from. So those are really

00:05:31.639 --> 00:05:38.050
basic elements but there’s a long list of
elements you can have inside a wavelet, line,

00:05:38.050 --> 00:05:43.610
gadget, installer, attachment, image, and
then much of form elements to help you get

00:05:43.610 --> 00:05:49.169
structured input from wave users. Then we
have the annotations. And in the example I

00:05:49.169 --> 00:05:56.210
showed, many of the annotations are used to
style a blip. And then an annotation is a

00:05:56.210 --> 00:06:02.729
key in a value applied to a particular range
of characters, and the Wave client may decide

00:06:02.729 --> 00:06:09.090
to render particular annotations, particular
waves particularly with our style annotations.

00:06:09.090 --> 00:06:17.050
So, for example, from start 17 to end 24,
we have styled a font Wave bold. And that

00:06:17.050 --> 00:06:22.610
means that the Wave client is going to render
a character 17 to 24 as bold using, you know,

00:06:22.610 --> 00:06:28.749
simple CSS. We also have an annotation for
linking. So from 72 to 76, we’re going to

00:06:28.749 --> 00:06:34.669
link off to the picture album. Now, those
are the annotations of the Wave client kind

00:06:34.669 --> 00:06:40.330
of special cases, and render specially but
there are also some annotations that the Wave

00:06:40.330 --> 00:06:45.800
client sets for its own use but it doesn’t
render to the user. So, for example, the client

00:06:45.800 --> 00:06:53.409
is always analyzing the language that Wave
user’s typing, and then it annotates the

00:06:53.409 --> 00:06:57.689
characters for--to specify what language it
is in. So here, it says that the entire blip

00:06:57.689 --> 00:07:03.819
is an English which is correct with the labels,
and annotation. And then the spelling even

00:07:03.819 --> 00:07:07.379
can actually use the annotations to the side
what spelling suggestions you make. So, I

00:07:07.379 --> 00:07:13.580
think custom annotation the wave client used
but also the developers can set around the

00:07:13.580 --> 00:07:17.649
custom annotations if they want to specify
particular range of text that is important

00:07:17.649 --> 00:07:23.110
for the robot. They can just set, you know,
their own annotation that says my robot thinks

00:07:23.110 --> 00:07:29.419
it’s important, value equals, whatever.
So, it’s also Wave actually putting data

00:07:29.419 --> 00:07:33.389
inside of the Wave for a particular range
of characters. So, annotations are really

00:07:33.389 --> 00:07:40.080
cool because we could separate presentation,
and we can store extra data. So here’s the

00:07:40.080 --> 00:07:46.139
list of the annotations that the Wave client
considers special, and anything besides this

00:07:46.139 --> 00:07:53.129
would just be considered custom annotation,
and ignored by the client. And that’s basically

00:07:53.129 --> 00:07:58.039
the Google Wave Conversation Model. Hopefully,
that helps you understand way better both

00:07:58.039 --> 00:08:03.669
from the user point of view, and from the
Wave developer point of view. If you have

00:08:03.669 --> 00:08:08.889
any questions, please post it in one of our
handy forms. All right? See you later.

