WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
All right. So we just saw Computing the Closure,

00:00:05.000 --> 00:00:09.000
which is one way to help us complete the parsing chart--

00:00:09.000 --> 00:00:13.000
in fact, it's one of three ways.

00:00:13.000 --> 00:00:16.000
Now we're going to see a second

00:00:16.000 --> 00:00:19.000
that's sometimes called, Consuming the input

00:00:19.000 --> 00:00:22.000
or shifting over the input.

00:00:22.000 --> 00:00:24.000
Shifting over the input, consuming the input,

00:00:24.000 --> 00:00:28.000
or reading the input is one more way to help complete the parsing chart.

00:00:28.000 --> 00:00:30.000
We are going to need all 3 powers, combined,

00:00:30.000 --> 00:00:34.000
in order to make a totally complete parsing chart.

00:00:34.000 --> 00:00:36.000
But for now, let's worry about the input.

00:00:36.000 --> 00:00:38.000
So recall that, very generally,

00:00:38.000 --> 00:00:41.000
we could be in a parsing state that looks like this.

00:00:41.000 --> 00:00:43.000
This is a rule from our grammar, with a dot added

00:00:43.000 --> 00:00:47.000
and this (from) information or starting at information added.

00:00:47.000 --> 00:00:49.000
And I've drawn (a) and (b) and (c) and (d) in purple

00:00:49.000 --> 00:00:52.000
because we're not sure if they're terminals or nonterminals.

00:00:52.000 --> 00:00:55.000
We just saw what to do if (c)--the next thing we're expecting--

00:00:55.000 --> 00:00:57.000
is a nonterminal.

00:00:57.000 --> 00:01:00.000
We compute the closure by looking at all the rules that start with (c) in the grammar.

00:01:00.000 --> 00:01:03.000
But what if (C) is a terminal--

00:01:03.000 --> 00:01:05.000
a token, final part of the input?

00:01:05.000 --> 00:01:08.000
Well, then we'll just shift over it and consume it.

00:01:08.000 --> 00:01:12.000
If we were in this parsing state in chart[i],

00:01:12.000 --> 00:01:14.000
that means, after seeing (i) tokens,

00:01:14.000 --> 00:01:16.000
this is where we could be.

00:01:16.000 --> 00:01:20.000
I'm just going to take my finger and--whoomp--move it to the right one!

00:01:20.000 --> 00:01:23.000
So I can just move my finger over,

00:01:23.000 --> 00:01:25.000
so that instead of expecting a (c),

00:01:25.000 --> 00:01:27.000
I've seen the (c)

00:01:27.000 --> 00:01:29.000
if (c) was the ith input token.

00:01:29.000 --> 00:01:32.000
This is a prediction we're making: (c) may come in the future.

00:01:32.000 --> 00:01:34.000
I go look at what the user actually entered.

00:01:34.000 --> 00:01:36.000
If (c) was actually the next token in the input,

00:01:36.000 --> 00:01:38.000
the next letter they typed in,

00:01:38.000 --> 00:01:40.000
the next word in the program,

00:01:40.000 --> 00:01:43.000
then I can shift over it and say great--we have parsed that,

00:01:43.000 --> 00:01:47.000
that's just what we were expecting, that totally fits our plan--no problems at all.

00:01:47.000 --> 00:01:49.000
So if we were in chart[i],

00:01:49.000 --> 00:01:53.000
I'm going to put this new information in chart[i + 1]

00:01:53.000 --> 00:01:55.000
because, remember the number here in the chart

00:01:55.000 --> 00:01:58.000
corresponds to how many tokens we've seen.

00:01:58.000 --> 00:02:00.000
And we're only in this brave new world

00:02:00.000 --> 00:02:02.000
after we've seen the (c).

00:02:02.000 --> 00:02:05.000
The (c) was one token; previously we'd seen (i) tokens ,

00:02:05.000 --> 00:02:08.000
so now we've seen [i + 1] tokens.

00:02:08.000 --> 09:59:59.000
This entire approach is called shifting.

