WEBVTT
Kind: captions
Language: en

00:00:06.363 --> 00:00:08.066
In prior lessons
Paco learned how to use

00:00:08.066 --> 00:00:11.099
the local
development environment

00:00:11.099 --> 00:00:13.528
and unfold
the census landing page.

00:00:13.858 --> 00:00:16.924
In this lesson
we will add on functionality

00:00:16.924 --> 00:00:19.726
to Paco's application and
explain various important points

00:00:19.726 --> 00:00:23.165
for developing applications
with micro-framework WebApp2,

00:00:23.297 --> 00:00:25.693
created especially
for Google App Engine.

00:00:26.693 --> 00:00:28.825
Paco can also use
other frameworks

00:00:28.825 --> 00:00:31.825
like Flask, Pylons or Django
to create his application.

00:00:32.099 --> 00:00:34.594
Given that WebApp2
is included with SDK

00:00:34.594 --> 00:00:37.033
and is easy to understand,
we will use it

00:00:37.033 --> 00:00:39.561
as a starting point
for the census application.

00:00:39.627 --> 00:00:42.330
By using a framework,
Paco not only avoids

00:00:42.330 --> 00:00:44.396
implementing many
low-level details

00:00:44.396 --> 00:00:47.429
to processing http requests,

00:00:47.726 --> 00:00:49.759
but he also acquires methods

00:00:49.759 --> 00:00:52.198
for organizing root code
for the application.

00:00:52.231 --> 00:00:54.231
When we created
the census landing page,

00:00:54.231 --> 00:00:57.561
Paco included various handlers
in the a.yaml file.

00:00:59.033 --> 00:01:01.693
The first of these establishes
that all the routes

00:01:01.693 --> 00:01:03.462
that begin with /assets

00:01:03.462 --> 00:01:05.264
will serve as static files

00:01:05.264 --> 00:01:06.891
from the static file.

00:01:07.297 --> 00:01:09.495
The second one
sees that any other route

00:01:09.495 --> 00:01:12.165
delivers the index.html file.

00:01:15.891 --> 00:01:17.495
After assigning the Python code,

00:01:17.495 --> 00:01:19.396
that should execute to resolve

00:01:19.396 --> 00:01:20.495
each of the suggested scenarios

00:01:20.495 --> 00:01:22.759
in the census application,

00:01:22.759 --> 00:01:25.231
Paco needs to make
a small modification.

00:01:25.528 --> 00:01:28.396
The index.html
will only serve

00:01:28.396 --> 00:01:29.495
in the /. route.

00:01:30.462 --> 00:01:32.396
The rest of
the application routes

00:01:32.396 --> 00:01:35.957
will be managed by script
that we will build with WebApp2.

00:01:36.066 --> 00:01:38.363
The parameter we pass
to this directive

00:01:38.363 --> 00:01:41.363
represents the app attribute
in the Main module.

00:01:42.528 --> 00:01:45.693
Later on, Paco creates
the .main.pi file

00:01:46.066 --> 00:01:48.363
and defines the WSGI application

00:01:48.363 --> 00:01:50.627
in charge of attending requests.

00:01:50.891 --> 00:01:54.627
WSGI is simply a popular
protocol

00:01:54.627 --> 00:01:58.297
among the Python CGI
applications, that makes it easy

00:01:58.297 --> 00:01:59.594
to move them between platforms.

00:01:59.957 --> 00:02:03.594
The WSGI application builder
receives a list of instances

00:02:03.594 --> 00:02:06.462
of route WebApp2 objects
as a parameter.

00:02:07.165 --> 00:02:09.198
These objects serve
a similar function

00:02:09.198 --> 00:02:11.825
to the app.yaml file handlers.

00:02:12.066 --> 00:02:14.099
They allow us to define
the code fragment,

00:02:14.099 --> 00:02:16.990
normally one class,
in charge of implementing

00:02:16.990 --> 00:02:19.693
the correct logic for each route
in the application.

00:02:19.858 --> 00:02:21.891
For example,
Paco's first route

00:02:21.891 --> 00:02:25.693
assigns the identity page class
to the /identity route.

00:02:26.165 --> 00:02:28.660
We will call this process
Routing.

00:02:28.924 --> 00:02:30.561
The additional name parameter

00:02:30.561 --> 00:02:32.759
allows Paco to name each route.

00:02:32.759 --> 00:02:35.231
This way, when one handler
needs to call another,

00:02:35.231 --> 00:02:38.099
from another, Paco will only
need to use this name

00:02:38.099 --> 00:02:41.528
and will avoid specifically
including routes like /identity,

00:02:41.528 --> 00:02:43.693
which tend to change over time.

00:02:43.726 --> 00:02:46.066
We can define as many routes
and handler classes

00:02:46.066 --> 00:02:47.363
as necessary.

00:02:47.660 --> 00:02:49.858
The goal is to maintain
the logic of the application

00:02:49.858 --> 00:02:51.858
as clear and simple as possible

00:02:51.858 --> 00:02:54.165
and to not assign
too many responsibilities

00:02:54.165 --> 00:02:55.891
to just one request handler.

00:02:56.165 --> 00:02:58.627
By analyzing the wideframes
for the census application,

00:02:58.627 --> 00:03:00.858
we will initially create
three request handlers.

00:03:01.099 --> 00:03:02.198
Identity Page:

00:03:02.198 --> 00:03:04.693
for attending matters
relating to user identity.

00:03:04.759 --> 00:03:05.858
Question Page:

00:03:05.858 --> 00:03:07.330
is charge of question flow.

00:03:07.330 --> 00:03:08.429
And Result Page:

00:03:08.429 --> 00:03:10.759
in charge of presenting results.

00:03:10.891 --> 00:03:11.990
Each request handler

00:03:11.990 --> 00:03:14.099
is responsible
for completely handling

00:03:14.099 --> 00:03:15.792
the http request,

00:03:16.033 --> 00:03:18.363
manipulate data
and turn in an answer

00:03:18.363 --> 00:03:21.726
in html, xml, Jason
or whichever format

00:03:21.726 --> 00:03:23.396
is appropriate in our case.

00:03:23.495 --> 00:03:25.330
With the predetermined
configuration,

00:03:25.330 --> 00:03:27.858
the moment
an http request is received,

00:03:27.858 --> 00:03:30.726
webapp2 will instance
the defined class

00:03:30.726 --> 00:03:32.561
in the routing parameters
previously mentioned,

00:03:32.561 --> 00:03:35.132
and will search for a module

00:03:35.132 --> 00:03:37.561
with the name of the verb
http used

00:03:37.561 --> 00:03:39.330
to make the request
in the class.

00:03:39.363 --> 00:03:41.726
Remember that
the most common verbs

00:03:41.726 --> 00:03:44.891
in applications that serve
html content are Get and Post.

00:03:45.297 --> 00:03:47.198
For this reason,
our request handler

00:03:47.198 --> 00:03:49.132
needs to respectively
implement the methods

00:03:49.132 --> 00:03:52.198
IdentityPage Get
and IdentityPage Post

00:03:52.429 --> 00:03:54.594
to correctly
attend the requests.

00:03:54.627 --> 00:03:56.858
To better understand
how all this works

00:03:56.858 --> 00:03:59.363
Paco will implement an initial
version of the methods

00:03:59.363 --> 00:04:02.330
IdentityPage Get
and IdentityPage Post.

00:04:02.330 --> 00:04:05.858
This implementation will print
the initial html code

00:04:05.858 --> 00:04:07.462
from the application forms

00:04:07.462 --> 00:04:09.363
upon receiving a Get request,

00:04:09.363 --> 00:04:11.462
and the data sent on this form

00:04:11.462 --> 00:04:13.462
upon making a Post request.

00:04:14.033 --> 00:04:15.198
In another lesson

00:04:15.198 --> 00:04:17.330
we will learn how to work
in a organized way

00:04:17.330 --> 00:04:18.825
with the html code.

00:04:19.165 --> 00:04:21.099
For now, Paco will save it
in a variable

00:04:21.099 --> 00:04:24.099
and will deliver it directly
to the client in the answer.

00:04:24.165 --> 00:04:27.033
This is done using
the self.response property,

00:04:27.033 --> 00:04:29.990
over which
variable content is written.

00:04:29.990 --> 00:04:32.330
With this property,
Paco can also change

00:04:32.330 --> 00:04:34.198
other attributes of the answer.

00:04:34.264 --> 00:04:36.495
Like for example,
the character codification

00:04:36.495 --> 00:04:38.033
or the type of content.

00:04:38.165 --> 00:04:41.429
Given that the predetermined
value is txt.html,

00:04:41.429 --> 00:04:43.330
it's not necessary in this case.

00:04:43.627 --> 00:04:45.957
WebApp2 also makes
it easier to access the data

00:04:45.957 --> 00:04:47.627
sent in the request.

00:04:47.726 --> 00:04:49.660
Accessing these parameters
is as easy

00:04:49.660 --> 00:04:52.429
as accessing the attribute
self.request.GET

00:04:52.429 --> 00:04:53.825
in the case of Get requests,

00:04:53.825 --> 00:04:56.825
and self.reques.POST
for Post requests,

00:04:57.264 --> 00:04:59.099
or simply
self.request.params,

00:04:59.099 --> 00:05:01.363
which combines
the Get and Post variables.

00:05:01.792 --> 00:05:04.198
We will learn in another lesson
how to use some

00:05:04.198 --> 00:05:06.198
extras included in WebApp2,

00:05:06.198 --> 00:05:09.033
such as the session
or internationalization modules.

00:05:09.396 --> 00:05:10.957
But for now, we guarantee

00:05:10.957 --> 00:05:12.429
that Paco's application

00:05:12.429 --> 00:05:15.990
presents the correct
html format in each Get request

00:05:15.990 --> 00:05:19.132
and presents the sent data
in each Post request.s

00:05:19.429 --> 00:05:21.660
To test this,
Paco opens his navigator

00:05:21.660 --> 00:05:23.561
and goes to this address.

00:05:24.198 --> 00:05:25.528
Everything functions as hoped:

00:05:25.528 --> 00:05:27.495
WebApp2
instance request handler,

00:05:27.495 --> 00:05:29.627
defined by the class
IdentityPage

00:05:29.627 --> 00:05:30.726
and yaml Get module

00:05:30.726 --> 00:05:33.033
by printing the html
that corresponds

00:05:33.033 --> 00:05:35.990
to the census page
identity information.

00:05:36.033 --> 00:05:38.594
Now, all that's left is to fill
out the form information

00:05:38.594 --> 00:05:41.066
and click on Send
to test the Post method.

00:05:41.627 --> 00:05:42.726
Perfect.

00:05:42.726 --> 00:05:44.198
The data sent from the form

00:05:44.198 --> 00:05:46.891
are now printed
upon making the Post request.

00:05:46.957 --> 00:05:48.792
Discover other important aspects

00:05:48.792 --> 00:05:50.891
of developing applications
with WebApp2

00:05:50.891 --> 00:05:53.759
by downloading the code
from this lesson.

00:05:53.759 --> 00:05:56.165
Try it in your SDK,
upload it to Google App Engine

00:05:56.165 --> 00:05:58.957
and experience creating
new request handlers.

00:05:58.990 --> 00:06:01.165
Don't miss out
and keep programming!

