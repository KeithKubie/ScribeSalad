WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
All right. Now we've got two different algorithms--naive and Russian--

00:00:03.000 --> 00:00:05.000
that can both be used to multiply numbers together.

00:00:05.000 --> 00:00:07.000
Who's better? How are we going to figure that out?

00:00:07.000 --> 00:00:09.000
Depends. What matters to us?

00:00:09.000 --> 00:00:11.000
It could be that you want the program to be really easily read,

00:00:11.000 --> 00:00:14.000
in which case naive is probably easier than Russian.

00:00:14.000 --> 00:00:16.000
But it could also depend on speed.

00:00:16.000 --> 00:00:19.000
Which one gives you the answer that you want fastest?

00:00:19.000 --> 00:00:21.000
How can we find out which one is faster?

00:00:21.000 --> 00:00:24.000
For starters, we can do some plotting again. Let's do that.

00:00:24.000 --> 00:00:27.000
I wanted to show you a plot of the running time of Russian for a range

00:00:27.000 --> 00:00:29.000
of different values for squaring.

00:00:29.000 --> 00:00:32.000
Russian(n, n) for lots of different values of n.

00:00:32.000 --> 00:00:34.000
But the plot was really uninteresting.

00:00:34.000 --> 00:00:39.000
The reason was that I just couldn't for the life of me get it to take more than 2 ms

00:00:39.000 --> 00:00:41.000
to multiply two numbers together.

00:00:41.000 --> 00:00:44.000
I used numbers as big as 2^1000, which is a very, very big number,

00:00:44.000 --> 00:00:47.000
and it returns instantaneously.

00:00:47.000 --> 00:00:50.000
After numbers get much bigger than this the plotting routine gets very confused,

00:00:50.000 --> 00:00:53.000
because it doesn't know how to deal with numbers this large.

00:00:53.000 --> 00:00:58.000
Whereas for--shall we say--only 2^23 naive was taking already 3 seconds,

00:00:58.000 --> 00:01:00.000
which is a lot longer.

00:01:00.000 --> 09:59:59.000
There's a huge difference between the running times of these algorithms.

