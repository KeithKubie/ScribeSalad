WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:04.390
So, we've arrived at the functional class pattern with shared methods, or

00:00:04.390 --> 00:00:06.320
simply the functional shared pattern.

00:00:06.320 --> 00:00:09.390
But there's still some cleanup we will probably want to do before it's

00:00:09.390 --> 00:00:10.570
fully refactored.

00:00:10.570 --> 00:00:11.150
For one thing,

00:00:11.150 --> 00:00:14.340
we see that there are two places that we have to name the move method.

00:00:14.340 --> 00:00:17.070
Once when we build the function in the first place, and

00:00:17.070 --> 00:00:21.550
another time when we decide we want to assign it over onto every car object.

00:00:21.550 --> 00:00:25.420
So, if we found ourselves building more functions and assigning each one as

00:00:25.420 --> 00:00:29.440
a property of the object, we would have to name them in two different places.

00:00:29.440 --> 00:00:33.230
There'd be two lists of all of the methods that belong on cars.

00:00:33.230 --> 00:00:36.770
This is problematic because you could easily find yourself correctly editing one

00:00:36.770 --> 00:00:38.920
of the lists and forgetting to edit the other.

00:00:38.920 --> 00:00:42.550
Perhaps, there's some programmatic way that we could iterate across all of

00:00:42.550 --> 00:00:45.550
the methods that we want to include on every car object and

00:00:45.550 --> 00:00:49.550
add them on automatically as a result of them having been in a list somewhere.

00:00:49.550 --> 00:00:53.820
There isn't necessarily a way to iterate over the variables in a scope, and so

00:00:53.820 --> 00:00:55.620
we're going to have to think of something clever.

00:00:55.620 --> 00:00:59.640
Maybe we could store all the methods we plan on adding to cars in an object in

00:00:59.640 --> 00:01:00.800
the first place.

00:01:00.800 --> 00:01:03.760
That way, it's easy to iterate over the object programmatically and

00:01:03.760 --> 00:01:05.160
add them all in a single line

