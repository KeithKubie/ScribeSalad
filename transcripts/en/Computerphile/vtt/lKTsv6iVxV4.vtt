WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.060
going out of bounds if you don't or

00:00:03.060 --> 00:00:05.970
can't check for it or if your hardware

00:00:05.970 --> 00:00:08.160
doesn't signal it to you can be really

00:00:08.160 --> 00:00:10.800
really embarrassing because all sorts of

00:00:10.800 --> 00:00:14.820
dangerous situations can happen perhaps

00:00:14.820 --> 00:00:16.410
the most easy one to understand is that

00:00:16.410 --> 00:00:18.630
yes if you add together two positive

00:00:18.630 --> 00:00:20.340
numbers that are too big they're going

00:00:20.340 --> 00:00:21.779
to come out looking like a negative

00:00:21.779 --> 00:00:24.900
number the the overflow situation will

00:00:24.900 --> 00:00:26.939
propagate into the sign bit you amp

00:00:26.939 --> 00:00:28.289
together two things which you've got a

00:00:28.289 --> 00:00:30.029
zero on the Left saying clearly they're

00:00:30.029 --> 00:00:31.920
positive when the whole thing overflow

00:00:31.920 --> 00:00:33.270
is you end up with the answer having a

00:00:33.270 --> 00:00:35.130
one in the sign bit so it's looking

00:00:35.130 --> 00:00:37.500
negative if you for example haven't had

00:00:37.500 --> 00:00:39.390
a digital radio altimeter which was

00:00:39.390 --> 00:00:41.340
absolutely sure that you were at 30,000

00:00:41.340 --> 00:00:43.860
feet and then suddenly found that it to

00:00:43.860 --> 00:00:47.070
run out of bits and oh dear you've added

00:00:47.070 --> 00:00:48.930
together the latest increments in height

00:00:48.930 --> 00:00:50.430
course you've climbed a bit and oh dear

00:00:50.430 --> 00:00:52.469
you seem to be 60 fathoms deep under the

00:00:52.469 --> 00:00:54.629
sea things can get very very

00:00:54.629 --> 00:00:57.180
embarrassing indeed if other hardware

00:00:57.180 --> 00:00:59.370
that controls your engine or your flaps

00:00:59.370 --> 00:01:03.210
relies absolutely on this thing being

00:01:03.210 --> 00:01:08.850
correct I'm going to describe to you in

00:01:08.850 --> 00:01:11.549
three different ways how you might

00:01:11.549 --> 00:01:15.060
tackle doing negative numbers whichever

00:01:15.060 --> 00:01:18.630
notation you use it turns out to be

00:01:18.630 --> 00:01:21.119
handy to keep the right-hand side of

00:01:21.119 --> 00:01:23.100
your bit pattern as you look at it the

00:01:23.100 --> 00:01:25.740
actual magnitude of the number and save

00:01:25.740 --> 00:01:28.350
the leftmost bit as you're looking at it

00:01:28.350 --> 00:01:31.380
for denoting the sign and almost

00:01:31.380 --> 00:01:34.110
universally it will be if that's so

00:01:34.110 --> 00:01:36.930
called sign bit as it's now called is 0

00:01:36.930 --> 00:01:38.939
then it denotes a positive number if

00:01:38.939 --> 00:01:41.220
it's a one it's going to denote a

00:01:41.220 --> 00:01:44.460
negative number so roughly speaking if

00:01:44.460 --> 00:01:47.009
you think about that 0 and 1 signaling

00:01:47.009 --> 00:01:50.579
the sign that leaves you three bits left

00:01:50.579 --> 00:01:53.159
for the actual size of the number be it

00:01:53.159 --> 00:01:55.229
positive or negative well in three bits

00:01:55.229 --> 00:01:57.469
you can hold anything from zero to seven

00:01:57.469 --> 00:02:03.600
so roughly what one is saying is that if

00:02:03.600 --> 00:02:06.689
we have a range of numbers that goes

00:02:06.689 --> 00:02:11.520
from plus 7 2-7 do you think about it

00:02:11.520 --> 00:02:12.930
that's 14 do

00:02:12.930 --> 00:02:15.659
from numbers one to seven positive 1 to

00:02:15.659 --> 00:02:18.930
7 negative 14 different numbers but in

00:02:18.930 --> 00:02:22.890
four bits we can accommodate 16 numbers

00:02:22.890 --> 00:02:26.459
to the power 4 is 16 naught 2 15 in hand

00:02:26.459 --> 00:02:28.859
side so where's the other two gone we've

00:02:28.859 --> 00:02:31.799
allocated for teams to all the other two

00:02:31.799 --> 00:02:33.750
are real trouble causes because what

00:02:33.750 --> 00:02:36.569
tends to happen in your naive approach

00:02:36.569 --> 00:02:38.250
to this which we'll do in a minute is

00:02:38.250 --> 00:02:41.159
those two missing numbers converge on

00:02:41.159 --> 00:02:44.430
wanting to be zero so you end up with

00:02:44.430 --> 00:02:49.470
plus 0 and minus a 0 and that is a pain

00:02:49.470 --> 00:02:52.980
you start off with zero four zeros here

00:02:52.980 --> 00:02:56.069
four plus a 0 if you put a one in the

00:02:56.069 --> 00:02:58.500
sign bit position but leave the others

00:02:58.500 --> 00:03:00.480
to zero then of course you've got minus

00:03:00.480 --> 00:03:03.239
zero what could be more nightmarish if

00:03:03.239 --> 00:03:04.889
you're trying to design a binary adder

00:03:04.889 --> 00:03:07.620
circuit to say oh we're not just got to

00:03:07.620 --> 00:03:10.370
check for plus zero we gotta check 4-0

00:03:10.370 --> 00:03:13.379
okay and all the rest it just follow

00:03:13.379 --> 00:03:18.000
exactly like that look 00 01 is +1 so

00:03:18.000 --> 00:03:20.970
what would minus 1 be same as +1 or not

00:03:20.970 --> 00:03:23.699
one but put a warm to denote negative at

00:03:23.699 --> 00:03:25.979
the left hand side and that works all

00:03:25.979 --> 00:03:28.879
the way in the sign and magnitude

00:03:28.879 --> 00:03:31.139
notation the example I'm going to take

00:03:31.139 --> 00:03:32.970
in all three of these notations i'll be

00:03:32.970 --> 00:03:36.750
covering is just simply this plus 7 and

00:03:36.750 --> 00:03:40.139
add on minus 3 to it in other words it's

00:03:40.139 --> 00:03:42.150
seven take away three the answers gots

00:03:42.150 --> 00:03:45.090
before now where do we get to its sign

00:03:45.090 --> 00:03:47.819
and magnitude we write down plus seven

00:03:47.819 --> 00:03:52.979
then we write down 10 11 don't forget

00:03:52.979 --> 00:03:55.290
this is now the sign bit it's special

00:03:55.290 --> 00:03:58.709
the note 11 2 and the 1 is 3 but the one

00:03:58.709 --> 00:04:01.049
in the sign bit position says I'm trying

00:04:01.049 --> 00:04:05.459
to do 7-3 your hardware man then start

00:04:05.459 --> 00:04:06.720
saying look I've got to build some

00:04:06.720 --> 00:04:09.479
binary logic circuitry to do this and

00:04:09.479 --> 00:04:12.720
what I want is just to do simple binary

00:04:12.720 --> 00:04:15.120
editions with carys even those a

00:04:15.120 --> 00:04:16.949
subtraction I don't care you've told me

00:04:16.949 --> 00:04:19.590
you denoted a negative number I want to

00:04:19.590 --> 00:04:21.479
do simple binary editions of ones and

00:04:21.479 --> 00:04:23.159
laws and I want the answer to drop out

00:04:23.159 --> 00:04:25.240
just magically to

00:04:25.240 --> 00:04:29.560
plus 4 will it not a chance I'm going to

00:04:29.560 --> 00:04:31.300
say if you just add them what would

00:04:31.300 --> 00:04:34.419
happen you get 1 plus 1 is 0 and carry

00:04:34.419 --> 00:04:37.690
one one and one and one we now know you

00:04:37.690 --> 00:04:40.389
put down a one and you carry a 1 1 plus

00:04:40.389 --> 00:04:45.099
1 is 0 but it carries a bit over into

00:04:45.099 --> 00:04:48.479
this sign bit column oh what a nightmare

00:04:48.479 --> 00:04:50.979
what is trying to tell you look is that

00:04:50.979 --> 00:04:53.590
the answers to it isn't when you come to

00:04:53.590 --> 00:04:55.870
analyze this carefully it happens

00:04:55.870 --> 00:04:59.680
largely because the sign bit is not

00:04:59.680 --> 00:05:02.199
actually part of the number it's an add

00:05:02.199 --> 00:05:04.330
on extra so this one way I think we can

00:05:04.330 --> 00:05:06.039
throw right out the window and say it

00:05:06.039 --> 00:05:07.960
may appeal to you as a human to do it

00:05:07.960 --> 00:05:10.090
like this but really that is not going

00:05:10.090 --> 00:05:12.250
to be easy to build hardware around what

00:05:12.250 --> 00:05:15.520
you want actually in some sense is to

00:05:15.520 --> 00:05:19.360
map those negative numbers differently

00:05:19.360 --> 00:05:21.970
in other words you map them top down

00:05:21.970 --> 00:05:24.490
from the big numbers down to the little

00:05:24.490 --> 00:05:27.190
ones in terms of what an unsigned the

00:05:27.190 --> 00:05:28.750
law would be doing the other way around

00:05:28.750 --> 00:05:32.199
and it all is so much easier what ones

00:05:32.199 --> 00:05:34.930
complement does is it says form the

00:05:34.930 --> 00:05:37.719
negative number by taking a positive one

00:05:37.719 --> 00:05:40.900
and inverting every bit if it's a zero

00:05:40.900 --> 00:05:43.960
turn it to a one if it's a one turn it

00:05:43.960 --> 00:05:47.979
to a zero what that does is it turns 0

00:05:47.979 --> 00:05:51.130
into being what would have been 15 in

00:05:51.130 --> 00:05:55.630
unsigned yeah but ah since one on the

00:05:55.630 --> 00:05:57.849
left is signed and now image is a

00:05:57.849 --> 00:06:00.969
negative number you still have the two

00:06:00.969 --> 00:06:03.430
representations of zero problem you've

00:06:03.430 --> 00:06:07.169
got zero and you've got minus zero

00:06:07.169 --> 00:06:10.889
however look what happens here you map

00:06:10.889 --> 00:06:14.620
0001 you flip all the bits this is a

00:06:14.620 --> 00:06:18.039
rule to make it negative change 0001

00:06:18.039 --> 00:06:22.870
into being 1110 so that is how you do

00:06:22.870 --> 00:06:26.310
minus one but what does 1110

00:06:26.310 --> 00:06:28.830
mean if it were an unsigned number it

00:06:28.830 --> 00:06:31.890
means a plus 4 plus 2 is 14 so I've

00:06:31.890 --> 00:06:37.560
mapped minus 1 into being 14 I'm at

00:06:37.560 --> 00:06:40.800
minus 2 into being 13 this is what i

00:06:40.800 --> 00:06:45.900
mean by coming downwards okay now if you

00:06:45.900 --> 00:06:49.740
do that well you're part way on the way

00:06:49.740 --> 00:06:52.890
to getting a system in which the sign

00:06:52.890 --> 00:06:55.260
bit behaves almost normally and that's

00:06:55.260 --> 00:06:59.310
what you want to do let us know let me

00:06:59.310 --> 00:07:01.710
say yet again this still has the problem

00:07:01.710 --> 00:07:04.460
of two representations of 0 which

00:07:04.460 --> 00:07:06.420
hardware and software people would

00:07:06.420 --> 00:07:08.220
absolutely hate could you imagine in

00:07:08.220 --> 00:07:10.620
your java program if you wrote if i

00:07:10.620 --> 00:07:13.970
equals equals 0 behind the scenes a

00:07:13.970 --> 00:07:16.680
swearing compiler indulges in lots of

00:07:16.680 --> 00:07:18.900
bad language saying owing to the

00:07:18.900 --> 00:07:20.370
architecture of this machine now now got

00:07:20.370 --> 00:07:22.770
to check for plus 0 and minus zero don't

00:07:22.770 --> 00:07:25.110
want that you want one representation of

00:07:25.110 --> 00:07:28.020
0 anyway for the moment this is a step

00:07:28.020 --> 00:07:30.390
on the way we're getting there this is

00:07:30.390 --> 00:07:34.320
one's complement and let's do our thing

00:07:34.320 --> 00:07:37.110
of taking plus seven and adding minus

00:07:37.110 --> 00:07:38.700
three well since seven is a positive

00:07:38.700 --> 00:07:42.810
number that is still 0 1 1 1 but we've

00:07:42.810 --> 00:07:46.590
now got to add in minus 3 well we look

00:07:46.590 --> 00:07:49.710
up what minus 3 is in one's complement

00:07:49.710 --> 00:07:58.320
and it is 1100 now what I'm saying is

00:07:58.320 --> 00:08:00.000
that is a positive representation

00:08:00.000 --> 00:08:02.660
because it's got not there as plus 7

00:08:02.660 --> 00:08:05.430
this is a negative number clearly it is

00:08:05.430 --> 00:08:07.170
it's got one in the sign bit position

00:08:07.170 --> 00:08:09.480
let's just add them together one and 0

00:08:09.480 --> 00:08:17.000
is 1 1 and 0 is 1 1 and 1 is 0 but carry

00:08:17.000 --> 00:08:22.500
11 and 1 is 0 this is in the sign bit

00:08:22.500 --> 00:08:24.480
position now but we're still treating it

00:08:24.480 --> 00:08:28.710
now like it's an ordinary binary pair of

00:08:28.710 --> 00:08:31.350
integers but I've still got 1 plus 1 is

00:08:31.350 --> 00:08:35.910
0 and it will generate a caring the rule

00:08:35.910 --> 00:08:36.810
in

00:08:36.810 --> 00:08:39.029
one's complement arithmetic says the

00:08:39.029 --> 00:08:41.039
following treat the sign bit just like a

00:08:41.039 --> 00:08:43.110
normal binary addition in that position

00:08:43.110 --> 00:08:45.990
but if you generate a carry out from the

00:08:45.990 --> 00:08:48.090
sign bit don't throw it away don't

00:08:48.090 --> 00:08:50.820
ignore it just bring it back on a

00:08:50.820 --> 00:08:53.310
journey around to the right hand end of

00:08:53.310 --> 00:08:55.950
the number and add it in so we then have

00:08:55.950 --> 00:08:59.850
naught naught 1 1 plus 1 1 + 1 is 0

00:08:59.850 --> 00:09:05.610
carry 1 1 0 1 is 0 carry 1 1 and 0 is 1

00:09:05.610 --> 00:09:11.490
0 and 00 you p that's possible that's

00:09:11.490 --> 00:09:13.710
the right answer now you might say oh

00:09:13.710 --> 00:09:15.839
well bringing around that carry bit it's

00:09:15.839 --> 00:09:18.180
just black magic yeah that would need a

00:09:18.180 --> 00:09:19.890
more advanced tutorial explaining

00:09:19.890 --> 00:09:22.470
exactly why but it really does work is

00:09:22.470 --> 00:09:25.320
simply this it says just treat the sign

00:09:25.320 --> 00:09:27.810
bit as normal don't get panicked about

00:09:27.810 --> 00:09:30.029
it if you do generate the carry bit just

00:09:30.029 --> 00:09:31.410
bring it around to the right hand then

00:09:31.410 --> 00:09:35.370
and add it back in ok so we're making

00:09:35.370 --> 00:09:36.839
real progress now we've got something

00:09:36.839 --> 00:09:40.050
which does give us a right answer but

00:09:40.050 --> 00:09:41.880
you have to mess about with carry bits a

00:09:41.880 --> 00:09:45.000
little bit wouldn't it be nice if we

00:09:45.000 --> 00:09:49.110
could get rid of that effect don't have

00:09:49.110 --> 00:09:51.470
to worry about any carry bit and also

00:09:51.470 --> 00:09:53.970
also what we really want to solve is

00:09:53.970 --> 00:09:58.980
this we dumped 12 zeros ok now there is

00:09:58.980 --> 00:10:00.690
a big problem here because if you think

00:10:00.690 --> 00:10:02.160
about it you've got some positive

00:10:02.160 --> 00:10:04.050
numbers seven negative numbers you've

00:10:04.050 --> 00:10:06.839
got two left over if you don't have to

00:10:06.839 --> 00:10:09.839
zeros and you'll know what 10 what's

00:10:09.839 --> 00:10:12.060
going to happen to that 16th number as

00:10:12.060 --> 00:10:15.270
we'll find out now in the final phase of

00:10:15.270 --> 00:10:17.640
this story your leftover number has

00:10:17.640 --> 00:10:19.050
either got to become an extra positive

00:10:19.050 --> 00:10:21.990
number or an astronaut Eve number so

00:10:21.990 --> 00:10:24.390
will now do two's complement two's

00:10:24.390 --> 00:10:27.540
complement is equivalent to the ones

00:10:27.540 --> 00:10:31.350
complement with one added to it let's

00:10:31.350 --> 00:10:34.290
just take a sample middle of the range

00:10:34.290 --> 00:10:37.260
number plus 3 let's turn it into twos

00:10:37.260 --> 00:10:39.839
complement and remember what you do to

00:10:39.839 --> 00:10:41.580
do that is you take the binary

00:10:41.580 --> 00:10:44.100
representation of three you first of all

00:10:44.100 --> 00:10:45.810
turn it into one's complement by

00:10:45.810 --> 00:10:47.050
flipping the bits

00:10:47.050 --> 00:10:51.970
and then you add one let us take plus 3

00:10:51.970 --> 00:10:56.640
this is zero zero one one and we want

00:10:56.640 --> 00:11:01.089
minus 3 in well first of all we do minus

00:11:01.089 --> 00:11:04.660
3 in one's complement easy you just flip

00:11:04.660 --> 00:11:09.850
the bits you go 1100 and in two's

00:11:09.850 --> 00:11:12.670
complement what do you do you take the

00:11:12.670 --> 00:11:14.260
ones complement which you've already got

00:11:14.260 --> 00:11:17.079
a new add one and you see what happens

00:11:17.079 --> 00:11:23.200
one plus zero is 10 11 there's your

00:11:23.200 --> 00:11:27.720
answer so minus 3 in two's complement is

00:11:27.720 --> 00:11:34.440
represented by 1101 in unsigned terms

00:11:34.440 --> 00:11:40.829
this has now been represented by 13 1101

00:11:40.829 --> 00:11:45.010
whereas in one's complement terms it was

00:11:45.010 --> 00:11:48.519
1100 it was represented by 12 so we've

00:11:48.519 --> 00:11:50.769
shoved at the whole range down by one

00:11:50.769 --> 00:11:53.620
believe it or not that now magically

00:11:53.620 --> 00:11:56.140
gets rid of the two zeros problem just

00:11:56.140 --> 00:11:59.170
by shifting the range and if you like

00:11:59.170 --> 00:12:02.320
this is the fundamental piece of magic

00:12:02.320 --> 00:12:04.540
which I think we can do over here just

00:12:04.540 --> 00:12:10.480
consider 0 0 0 0 plus 0 I'm now going to

00:12:10.480 --> 00:12:13.720
turn it into minus 0 and with

00:12:13.720 --> 00:12:15.310
trepidation because it's probably going

00:12:15.310 --> 00:12:16.690
to be some other completely different

00:12:16.690 --> 00:12:18.610
bit problem but just look what the rule

00:12:18.610 --> 00:12:21.220
says it says do the ones complement

00:12:21.220 --> 00:12:26.230
first of all 11 11 and add one because

00:12:26.230 --> 00:12:27.880
two's complement is one's coming up this

00:12:27.880 --> 00:12:33.399
one what happens now 1 1 is 0 carry 1 1

00:12:33.399 --> 00:12:38.380
0 1 is 0 carry a 1 1 0 1 is 0 carry 11

00:12:38.380 --> 00:12:39.790
and what we're in the side bit position

00:12:39.790 --> 00:12:41.320
but we don't panic it's just like any

00:12:41.320 --> 00:12:44.350
other one on one is 0 and we carry one

00:12:44.350 --> 00:12:46.870
I'm going to do an end-around carry no

00:12:46.870 --> 00:12:49.029
thing you have to remember in two's

00:12:49.029 --> 00:12:51.070
complement is that carries at the

00:12:51.070 --> 00:12:52.810
left-hand end I just thrown away and

00:12:52.810 --> 00:12:53.400
ignore

00:12:53.400 --> 00:12:56.370
they do not do an end-around carry why

00:12:56.370 --> 00:12:59.310
they did in one's complement this magic

00:12:59.310 --> 00:13:01.890
you just throw the carry bit away and

00:13:01.890 --> 00:13:03.890
what you're left with no not-not-not

00:13:03.890 --> 00:13:08.010
look at plus zero has mapped into

00:13:08.010 --> 00:13:10.770
looking like plus zero when you take it

00:13:10.770 --> 00:13:13.260
two's complement negative that's exactly

00:13:13.260 --> 00:13:17.130
what you are after is one representation

00:13:17.130 --> 00:13:21.660
of zero and only one but you'll now say

00:13:21.660 --> 00:13:24.360
are now come on you warned us that if

00:13:24.360 --> 00:13:28.580
you have only 10 and you if you have and

00:13:28.580 --> 00:13:31.470
one to seven that's seven numbers and

00:13:31.470 --> 00:13:33.510
minus 1 by seven oh seven times you want

00:13:33.510 --> 00:13:37.080
10 that's only 15 slots taken up what's

00:13:37.080 --> 00:13:39.540
happening to the 16th slot although it's

00:13:39.540 --> 00:13:43.230
a four bit system it now ranges from 0

00:13:43.230 --> 00:13:46.590
to 7 in positive but in negative numbers

00:13:46.590 --> 00:13:49.500
there's the zero appearing again but

00:13:49.500 --> 00:13:52.050
right out the bottom one and three zeros

00:13:52.050 --> 00:13:54.810
what does that one represent that and

00:13:54.810 --> 00:13:57.750
the answer is minus eight what happens

00:13:57.750 --> 00:14:00.450
when he goes wrong well it we've

00:14:00.450 --> 00:14:02.190
discovered of course that in two's

00:14:02.190 --> 00:14:05.790
complement for bit representation we can

00:14:05.790 --> 00:14:10.110
go from minus eight up to plus seven you

00:14:10.110 --> 00:14:12.060
add anything within those ranges as

00:14:12.060 --> 00:14:13.620
we've been doing like seven plus minus

00:14:13.620 --> 00:14:15.270
three there's no problem the answer is

00:14:15.270 --> 00:14:17.430
going to be in range obviously but if

00:14:17.430 --> 00:14:20.730
you add together shall we say plus 72

00:14:20.730 --> 00:14:23.070
plus seven and that's plus 14 and that's

00:14:23.070 --> 00:14:25.500
too big positive to be held in four bits

00:14:25.500 --> 00:14:28.260
equally if you had I don't know minus

00:14:28.260 --> 00:14:31.110
five 2-5 comes to minus 10 and we can go

00:14:31.110 --> 00:14:32.940
down as far as minus eight but not minus

00:14:32.940 --> 00:14:37.770
10 so how does this show up then we

00:14:37.770 --> 00:14:42.240
clearly going to get overflows well I

00:14:42.240 --> 00:14:45.240
think the answer is if you look back or

00:14:45.240 --> 00:14:47.310
think back in the video to what we were

00:14:47.310 --> 00:14:49.920
doing when we were carefully adding 7

00:14:49.920 --> 00:14:54.060
2-3 and staying in range what I didn't

00:14:54.060 --> 00:14:56.040
point out but should have done at the

00:14:56.040 --> 00:14:58.410
time is that the carry bit that appeared

00:14:58.410 --> 00:15:00.270
on the left you remember you carried out

00:15:00.270 --> 00:15:01.800
of the sign position I said oh it's

00:15:01.800 --> 00:15:04.710
two's company cuz throw it away yes you

00:15:04.710 --> 00:15:07.200
can throw it away but what

00:15:07.200 --> 00:15:10.110
you would find is if it's gone wrong is

00:15:10.110 --> 00:15:14.100
that there was a carry in to the sign

00:15:14.100 --> 00:15:17.310
bit before there was a carry out and the

00:15:17.310 --> 00:15:20.600
rule very simply is this is if they

00:15:20.600 --> 00:15:23.970
carry in to the sign bit and the carry

00:15:23.970 --> 00:15:25.680
out to the sign bit are the same sort of

00:15:25.680 --> 00:15:27.270
thing like you carrying a worn you carry

00:15:27.270 --> 00:15:29.850
out a one that's fine or you carry in an

00:15:29.850 --> 00:15:32.010
or you carry out or not that's fine but

00:15:32.010 --> 00:15:33.720
if they're the opposite way around a

00:15:33.720 --> 00:15:36.000
naught gets carried into the side bit of

00:15:36.000 --> 00:15:37.770
one gets carried out or a one gets

00:15:37.770 --> 00:15:39.440
carried in &amp; anor gets carried out

00:15:39.440 --> 00:15:42.330
surefire sign of overflow and that is

00:15:42.330 --> 00:15:44.430
exactly what the hardware engineer wants

00:15:44.430 --> 00:15:46.020
they don't want to have to start

00:15:46.020 --> 00:15:47.670
thinking about the magnitude of the

00:15:47.670 --> 00:15:50.280
numbers they want a simple rule about

00:15:50.280 --> 00:15:53.370
carry bits which says it overflowed and

00:15:53.370 --> 00:15:55.680
then you set a hardware overflow

00:15:55.680 --> 00:16:01.260
indicator just like that this is a

00:16:01.260 --> 00:16:03.630
problem it hitters and they would have

00:16:03.630 --> 00:16:05.340
embarrassed us slightly in the Ackermann

00:16:05.340 --> 00:16:07.440
function video because the those

00:16:07.440 --> 00:16:11.190
counters we were setting for all the big

00:16:11.190 --> 00:16:13.470
integers we were overflowing all the

00:16:13.470 --> 00:16:17.180
time we just weren't checking for it

