WEBVTT
Kind: captions
Language: en

00:00:04.440 --> 00:00:05.560
SWEET SONG: Hi, everyone.

00:00:05.560 --> 00:00:07.860
Thanks for coming to
our talk today doing

00:00:07.860 --> 00:00:10.410
apps for the Chrome
OS ecosystem.

00:00:10.410 --> 00:00:11.430
My name is Sweet.

00:00:11.430 --> 00:00:14.880
And I'm a product manager for
Android apps on Chrome OS.

00:00:14.880 --> 00:00:16.800
For today's session,
we're going to cover

00:00:16.800 --> 00:00:18.520
three different topics.

00:00:18.520 --> 00:00:22.540
The first is an update on our
Chrome OS ecosystem growth.

00:00:22.540 --> 00:00:24.330
The second, we're
going to be introducing

00:00:24.330 --> 00:00:26.205
the cool new features
that we've been working

00:00:26.205 --> 00:00:30.570
on, and lastly, developer
notes and best practices

00:00:30.570 --> 00:00:34.110
to enhance your
experience on Chrome OS.

00:00:34.110 --> 00:00:36.960
So starting off with
our ecosystem update

00:00:36.960 --> 00:00:40.260
for our Chrome OS growth--

00:00:40.260 --> 00:00:43.350
Chrome OS devices
run Android apps

00:00:43.350 --> 00:00:46.970
through the Play Store
using an Android container.

00:00:46.970 --> 00:00:48.720
But we are inherently
different from a lot

00:00:48.720 --> 00:00:51.570
of the traditional
Android phones, in that we

00:00:51.570 --> 00:00:53.500
have a larger screen.

00:00:53.500 --> 00:00:55.590
We also have different
inputs, including

00:00:55.590 --> 00:00:59.130
keyboard, mouse, stylus.

00:00:59.130 --> 00:01:03.120
Users also use more
multi-monitor support with us.

00:01:03.120 --> 00:01:07.410
And they tend to use a
lot more multitasking,

00:01:07.410 --> 00:01:09.570
with multiple windows
and activities going on

00:01:09.570 --> 00:01:11.650
at the same time.

00:01:11.650 --> 00:01:14.730
So as the leading OS for
Google's large screen

00:01:14.730 --> 00:01:17.940
experiences, we've been
really doubling down

00:01:17.940 --> 00:01:20.310
to provide the hardware
that's capable of doing

00:01:20.310 --> 00:01:22.380
all these wonderful things.

00:01:22.380 --> 00:01:25.740
In addition to the clam
shells, the convertibles,

00:01:25.740 --> 00:01:28.350
and the Chrome
boxes, this past year

00:01:28.350 --> 00:01:31.400
we've launched our very first
tablets and attachables.

00:01:34.580 --> 00:01:37.810
But as we have more of a
device hardware corpus,

00:01:37.810 --> 00:01:40.540
we've also seen
more users, as well.

00:01:40.540 --> 00:01:46.780
In Q4 of 2018, 21% of all
notebooks sold in the US

00:01:46.780 --> 00:01:48.520
were Chromebooks.

00:01:48.520 --> 00:01:53.170
That's a 23% year over year
growth over our last year.

00:01:53.170 --> 00:01:56.770
We're currently in nine
countries and physically

00:01:56.770 --> 00:01:59.140
in more than 10,000 stores.

00:01:59.140 --> 00:02:01.410
And we're continuing that
expansion this year as well.

00:02:04.920 --> 00:02:07.910
So we have our device portfolio.

00:02:07.910 --> 00:02:09.750
We have more users.

00:02:09.750 --> 00:02:14.090
But also, users are responding
more to apps in Chrome OS.

00:02:14.090 --> 00:02:18.290
In the last year, app usage
on Android on Chrome OS

00:02:18.290 --> 00:02:20.780
has grown by 4x.

00:02:20.780 --> 00:02:23.960
And that's a testament to
our growing app catalog,

00:02:23.960 --> 00:02:27.110
along with users finding
more utility and better

00:02:27.110 --> 00:02:31.910
experiences on their Chrome
OS devices from the apps.

00:02:31.910 --> 00:02:35.610
There's two that I
really want to highlight.

00:02:35.610 --> 00:02:39.830
The first one is Asphalt
8, a racing car game.

00:02:39.830 --> 00:02:42.500
We work with them to really
enhance the experience

00:02:42.500 --> 00:02:46.610
on our Chrome OS devices,
specifically around keyboard

00:02:46.610 --> 00:02:49.340
support and tablet mode.

00:02:49.340 --> 00:02:51.680
And we found that, after
these improvements,

00:02:51.680 --> 00:02:55.830
they've seen a 6x
boost in daily activity

00:02:55.830 --> 00:02:59.270
and a 9x boost in app revenue.

00:02:59.270 --> 00:03:01.550
We've been really
proud of these numbers.

00:03:01.550 --> 00:03:04.640
And we've been working with
them on Asphalt 9, which

00:03:04.640 --> 00:03:06.950
is in our retail mode
in physical stores

00:03:06.950 --> 00:03:08.000
as well to show off.

00:03:10.750 --> 00:03:13.900
The other app is Concepts,
which we just saw in our video

00:03:13.900 --> 00:03:15.100
just now.

00:03:15.100 --> 00:03:17.440
Concepts is an illustrating app.

00:03:17.440 --> 00:03:20.380
And it's really
well-positioned with Chrome OS

00:03:20.380 --> 00:03:24.430
because we have a really
fast and responsive stylus

00:03:24.430 --> 00:03:27.020
along with a larger screen
real estate on our devices,

00:03:27.020 --> 00:03:29.440
so users can IDA more.

00:03:29.440 --> 00:03:33.580
Compared to the other devices,
we've seen that on Chrome OS

00:03:33.580 --> 00:03:37.270
they've had 12x more time
spent and double the paid

00:03:37.270 --> 00:03:38.880
conversions.

00:03:38.880 --> 00:03:41.800
And on our higher-end devices,
for the Pixelbooks and Pixel

00:03:41.800 --> 00:03:44.940
Slates, it's even better,
with 20x more time

00:03:44.940 --> 00:03:48.520
spend and quadruple
the paid conversions.

00:03:48.520 --> 00:03:50.770
And those are just
two examples of apps

00:03:50.770 --> 00:03:53.270
that we've been working
with our developers.

00:03:53.270 --> 00:03:55.510
And they've seen
users embrace them.

00:03:55.510 --> 00:03:59.740
And we're happy to work with you
as well to promote and really

00:03:59.740 --> 00:04:02.600
make your apps
shine on Chrome OS.

00:04:02.600 --> 00:04:07.300
As an added bonus, your apps
improved for Chrome OS are also

00:04:07.300 --> 00:04:10.750
going to benefit from those
on Android foldable phones

00:04:10.750 --> 00:04:12.200
and Android tablets.

00:04:12.200 --> 00:04:15.910
So you get more bang
for your buck, too.

00:04:15.910 --> 00:04:19.292
Next, I'm going to turn it over
to Stefan Kuhne, one of our eng

00:04:19.292 --> 00:04:21.459
leads, on what we've been
working on this past year.

00:04:27.080 --> 00:04:28.440
STEFAN KUHNE: Hello, everyone.

00:04:28.440 --> 00:04:29.180
I'm Stefan Kuhne.

00:04:29.180 --> 00:04:32.240
I'm one of the tech leads
bringing Android to Chrome OS.

00:04:32.240 --> 00:04:35.570
And you have maybe you
seen me in earlier talks.

00:04:35.570 --> 00:04:39.120
And this brings me already to
what I'm talking about today--

00:04:39.120 --> 00:04:42.260
well, all the changes we
have done over the past year

00:04:42.260 --> 00:04:43.800
to this year.

00:04:43.800 --> 00:04:45.290
So let's have a look.

00:04:45.290 --> 00:04:47.197
First off, we are
launching Android Pie.

00:04:47.197 --> 00:04:49.280
Well, it's a little bit
snow of yesterday, I know.

00:04:49.280 --> 00:04:50.697
But the thing is,
we were actually

00:04:50.697 --> 00:04:53.880
starting that conversion
process end of last year

00:04:53.880 --> 00:04:55.980
with our Pixel Slate tablet.

00:04:55.980 --> 00:05:00.170
And we are continuing to roll
out Pie to all of our fleet.

00:05:00.170 --> 00:05:01.820
And, at the same
time, we are also

00:05:01.820 --> 00:05:05.300
improving the quality,
stability, performance,

00:05:05.300 --> 00:05:09.230
and all the other kind of things
over the course of this year.

00:05:09.230 --> 00:05:12.890
At the same time, we are also
turning on Android P by default

00:05:12.890 --> 00:05:17.031
on for most users, so
means for end users.

00:05:17.031 --> 00:05:19.900
OK, so another
thing we have done

00:05:19.900 --> 00:05:24.440
is we were doubling down
on improving the developer

00:05:24.440 --> 00:05:25.230
quality.

00:05:25.230 --> 00:05:27.500
So first off, there is
a one-click installer

00:05:27.500 --> 00:05:28.940
for Android Studio.

00:05:28.940 --> 00:05:31.460
Much less hassle than
before, you will definitely

00:05:31.460 --> 00:05:32.720
agree on that one.

00:05:32.720 --> 00:05:34.868
We improved also
the linting support,

00:05:34.868 --> 00:05:37.160
which basically gives you
some kind of highlights where

00:05:37.160 --> 00:05:39.035
you are doing something
which is possibly not

00:05:39.035 --> 00:05:40.790
that ideal for Chrome OS.

00:05:40.790 --> 00:05:42.890
So, basically, everything
what we tell you

00:05:42.890 --> 00:05:46.580
is beneficial for the phone
as well as for the Chrome OS.

00:05:46.580 --> 00:05:47.990
But in this
particular case, it's

00:05:47.990 --> 00:05:50.820
of course especially for that.

00:05:50.820 --> 00:05:53.600
Another thing what we are
doing is inside the Android--

00:05:53.600 --> 00:05:57.530
no, inside the Linux VM, we
are adding audio support.

00:05:57.530 --> 00:05:59.870
Which basically
means you are getting

00:05:59.870 --> 00:06:04.310
all the audio which we used
to use on Linux directly

00:06:04.310 --> 00:06:05.130
on the system.

00:06:05.130 --> 00:06:07.220
Which means Udacity and
all these kind of things

00:06:07.220 --> 00:06:08.600
are working.

00:06:08.600 --> 00:06:10.860
So for the next
thing, I'm calling

00:06:10.860 --> 00:06:14.840
to Emilie, who is actually
demonstrating how to improve--

00:06:14.840 --> 00:06:18.888
well, how we have actually
used ADB now over USB.

00:06:18.888 --> 00:06:20.180
EMILIE ROBERTS: Thanks, Stefan.

00:06:20.180 --> 00:06:23.660
So I'm am super happy to
announce what we've added here.

00:06:23.660 --> 00:06:26.840
Can we bump over
to the computer?

00:06:26.840 --> 00:06:30.040
So here I have Android Studio
running on the Pixelbook--

00:06:30.040 --> 00:06:30.670
whoops.

00:06:30.670 --> 00:06:33.100
And I could run--

00:06:33.100 --> 00:06:36.200
uh-oh, what have I done?

00:06:36.200 --> 00:06:36.890
Agh-ha, OK.

00:06:36.890 --> 00:06:39.530
Well I ran the app, and
it pushed it directly

00:06:39.530 --> 00:06:40.723
to the device.

00:06:40.723 --> 00:06:42.890
This is last year's news
if you were here last year.

00:06:42.890 --> 00:06:45.120
So there's nothing
new with that.

00:06:45.120 --> 00:06:46.600
But what is new--

00:06:46.600 --> 00:06:48.710
and this does not
require developer mode.

00:06:48.710 --> 00:06:51.200
So super exciting--
I've got pixel to phone.

00:06:51.200 --> 00:06:54.590
I can plug it in over USB.

00:06:54.590 --> 00:06:57.290
And this time actually,
let's do a profiling

00:06:57.290 --> 00:07:00.310
just so you know
that I'm legit here.

00:07:03.970 --> 00:07:06.940
In the bottom, you see
this Connect to Linux, So,

00:07:06.940 --> 00:07:10.590
Allow Linux to
Access my USB device.

00:07:10.590 --> 00:07:11.930
And if the demo Gods smile--

00:07:11.930 --> 00:07:13.730
and they have smiled on me.

00:07:13.730 --> 00:07:15.450
Google Pixel 2 XL
is right there.

00:07:15.450 --> 00:07:18.335
So I can select the phone.

00:07:18.335 --> 00:07:19.835
This will hopefully
run my profiler.

00:07:22.580 --> 00:07:23.710
There we go.

00:07:23.710 --> 00:07:28.330
The app is hopefully
working, please--

00:07:28.330 --> 00:07:29.110
installing APKs.

00:07:31.985 --> 00:07:34.870
Whoops, my screen
has fallen asleep.

00:07:40.100 --> 00:07:41.690
So there's the app running.

00:07:41.690 --> 00:07:43.290
You can see the profiling.

00:07:43.290 --> 00:07:44.030
It's legit.

00:07:44.030 --> 00:07:46.610
Yeah, you can clap, yeah.

00:07:46.610 --> 00:07:48.670
Thank you, Stefan and your team.

00:07:48.670 --> 00:07:50.150
And you can see it if I clack--

00:07:50.150 --> 00:07:52.520
you get the screen, you know,
you get the screen tabs.

00:07:52.520 --> 00:07:57.910
You can dig into the memory just
like you'd expect in profiling.

00:07:57.910 --> 00:07:59.078
What can I say?

00:07:59.078 --> 00:07:59.620
Thanks a lot.

00:07:59.620 --> 00:08:00.162
I'll be back.

00:08:00.162 --> 00:08:00.970
Don't worry.

00:08:00.970 --> 00:08:02.138
Back to you, Stefan.

00:08:02.138 --> 00:08:03.430
STEFAN KUHNE: Awesome teamwork.

00:08:03.430 --> 00:08:05.440
Many thanks, Emilie.

00:08:05.440 --> 00:08:08.830
OK, so another thing, we
know that you are actually

00:08:08.830 --> 00:08:12.303
one of the power users of our
system because you have an IDE,

00:08:12.303 --> 00:08:13.720
you have Android
applications, you

00:08:13.720 --> 00:08:15.650
have Chrome, all these
other kind of things.

00:08:15.650 --> 00:08:17.692
And one of the things what
you are really missing

00:08:17.692 --> 00:08:19.100
is a virtual desktop.

00:08:19.100 --> 00:08:22.210
So beginning with M76,
which is currently

00:08:22.210 --> 00:08:27.400
in our Canary channel, you can
already test out this feature.

00:08:27.400 --> 00:08:31.630
Simply go into Chrome's
Flex and turn it on.

00:08:31.630 --> 00:08:33.620
Another thing what
we are doing is well,

00:08:33.620 --> 00:08:36.120
in the past HDCP
was not reasonable

00:08:36.120 --> 00:08:37.270
on the external monitor.

00:08:37.270 --> 00:08:38.380
We have mitigated that.

00:08:38.380 --> 00:08:41.140
You can now play back videos
on next on an external screen.

00:08:41.140 --> 00:08:43.360
If you ever plan
to actually use--

00:08:43.360 --> 00:08:46.958
for example, SurfaceView
setSecure, well be aware,

00:08:46.958 --> 00:08:49.000
there are monitors which
are not supporting this.

00:08:49.000 --> 00:08:51.220
And, of course, it's a very bad
experience for the user if he

00:08:51.220 --> 00:08:53.107
sees only a black box
instead of buttons,

00:08:53.107 --> 00:08:54.190
and cannot press anything.

00:08:54.190 --> 00:08:56.398
So therefore, don't really
use it if you don't really

00:08:56.398 --> 00:08:59.160
mean to use it.

00:08:59.160 --> 00:09:01.430
Another thing what we
are doing is integration.

00:09:01.430 --> 00:09:03.680
So a lot of integration
work was going, for example,

00:09:03.680 --> 00:09:06.260
into ARCore, which is
in all our tablets,

00:09:06.260 --> 00:09:08.210
which have world-facing cameras.

00:09:08.210 --> 00:09:10.340
It's being used already
in schools for things

00:09:10.340 --> 00:09:14.360
like Geogebra, and Google
Expedition, and many more

00:09:14.360 --> 00:09:15.350
to follow.

00:09:15.350 --> 00:09:18.440
Another thing what we are
doing is instant app support.

00:09:18.440 --> 00:09:20.570
Instant app support
is ready to roll out.

00:09:20.570 --> 00:09:22.430
And if your application
is doing this,

00:09:22.430 --> 00:09:26.130
you will actually see
that very shortly.

00:09:26.130 --> 00:09:29.760
I/O-- I have seen
this somewhere.

00:09:29.760 --> 00:09:31.800
Well, this is
meant to be exactly

00:09:31.800 --> 00:09:34.030
as meant, input and output.

00:09:34.030 --> 00:09:36.720
So we have done various
things around IO.

00:09:36.720 --> 00:09:39.390
One of them is
bringing some drives,

00:09:39.390 --> 00:09:41.810
any kind of external
media to Chromebooks.

00:09:41.810 --> 00:09:44.670
So when you plug it in,
the Android application

00:09:44.670 --> 00:09:47.002
will be able to
access it directly.

00:09:47.002 --> 00:09:48.960
So that was one of the
big asks from last year.

00:09:53.750 --> 00:09:55.600
Another thing is play files.

00:09:55.600 --> 00:09:58.900
So this is something which,
if you ever use the Chrome OS

00:09:58.900 --> 00:10:01.090
files browser, you
have possibly seen

00:10:01.090 --> 00:10:03.130
that there was no way
of accessing the Android

00:10:03.130 --> 00:10:06.110
files if you want to send
something or inspect something.

00:10:06.110 --> 00:10:08.890
Well, now inside this
tool, you have actually

00:10:08.890 --> 00:10:12.230
also Play Files, which is
the mirror of SD cards.

00:10:12.230 --> 00:10:15.420
So you can get to
all of these files.

00:10:15.420 --> 00:10:20.360
Another thing is if you
have DocumentsProvider API,

00:10:20.360 --> 00:10:25.280
like for example Google Drive,
Dropbox, or anything like that,

00:10:25.280 --> 00:10:26.750
they will actually
be reflected now

00:10:26.750 --> 00:10:28.070
also in the files application.

00:10:28.070 --> 00:10:30.350
So, basically, it's
fully transparent

00:10:30.350 --> 00:10:32.180
and it's running
inside Chrome space.

00:10:32.180 --> 00:10:34.970
But it's using all the Android
features on that point.

00:10:34.970 --> 00:10:37.490
So you can drag and drop
files now from all these cloud

00:10:37.490 --> 00:10:42.350
storage providers without
thinking about that.

00:10:42.350 --> 00:10:45.050
And if you are using
this cloud provider

00:10:45.050 --> 00:10:46.960
API for your own
applications, you

00:10:46.960 --> 00:10:51.510
can even then make it that you
can actually use this directly,

00:10:51.510 --> 00:10:54.750
so like editing files and so on.

00:10:54.750 --> 00:10:58.780
Managed devices-- we had
other several new add-ons.

00:10:58.780 --> 00:11:01.770
So first off, we were improving
the installation speed

00:11:01.770 --> 00:11:04.110
from minutes two seconds.

00:11:04.110 --> 00:11:05.830
And it's also much more secure.

00:11:05.830 --> 00:11:07.380
So therefore, it
should be now really

00:11:07.380 --> 00:11:11.963
be installed when an
administrator is asking for it.

00:11:11.963 --> 00:11:13.380
Another thing that
we are doing is

00:11:13.380 --> 00:11:16.530
when you are using the VPN
connection from Chrome OS,

00:11:16.530 --> 00:11:19.860
then Android will
automatically use the same VPN

00:11:19.860 --> 00:11:22.350
connection, which is a
huge improvement in regards

00:11:22.350 --> 00:11:25.218
of security.

00:11:25.218 --> 00:11:27.510
So now I am coming to the
most important thing for you,

00:11:27.510 --> 00:11:30.690
because this is a section
which is explicitly

00:11:30.690 --> 00:11:33.450
trying to target all the
things that you should actually

00:11:33.450 --> 00:11:36.870
watch out for to make your
application shine on Chrome OS.

00:11:36.870 --> 00:11:38.480
So let's have a look.

00:11:38.480 --> 00:11:41.470
Multi-monitor-- this is
not really new, right?

00:11:41.470 --> 00:11:44.410
We were talking about this
one already last year.

00:11:44.410 --> 00:11:46.800
But one of the things
what we were silently

00:11:46.800 --> 00:11:50.570
doing behind the scenes was we
were doing a lot of scaling.

00:11:50.570 --> 00:11:53.070
Because the thing is, if you
have an internal small monitor,

00:11:53.070 --> 00:11:56.430
which has 4K, and you have
an external big screen, which

00:11:56.430 --> 00:12:00.420
is maybe even also 4k, then
there an a size differential

00:12:00.420 --> 00:12:01.680
of two to one.

00:12:01.680 --> 00:12:04.650
Which basically means if you are
dragging a window from A to B,

00:12:04.650 --> 00:12:06.398
suddenly it becomes
like a giant mess.

00:12:06.398 --> 00:12:08.940
So, therefore, that is something
what the user doesn't really

00:12:08.940 --> 00:12:09.440
want to see.

00:12:09.440 --> 00:12:11.730
So therefore, what we do
is we scale that thing down

00:12:11.730 --> 00:12:15.580
to match the same size
as on the notebook.

00:12:15.580 --> 00:12:19.170
But the problem with that is,
of course, that well, scaling

00:12:19.170 --> 00:12:22.380
means you are losing some
information from the thing,

00:12:22.380 --> 00:12:23.530
it's getting blurry.

00:12:23.530 --> 00:12:24.690
It's not really that great.

00:12:24.690 --> 00:12:29.160
So therefore, what we are
trying to do going forward

00:12:29.160 --> 00:12:31.987
is we will actually change
the density on the fly.

00:12:31.987 --> 00:12:33.570
That is something
what we were talking

00:12:33.570 --> 00:12:35.310
about last year and
the year before,

00:12:35.310 --> 00:12:37.540
about changing the size.

00:12:37.540 --> 00:12:41.820
So this is now the next thing--
which is the next and the last

00:12:41.820 --> 00:12:43.950
thing that we are asking
anything from you--

00:12:43.950 --> 00:12:46.830
is to actually make
your application be

00:12:46.830 --> 00:12:49.840
aware of different densities
on an activity level.

00:12:49.840 --> 00:12:52.560
So don't do that inside
your service or what-not.

00:12:52.560 --> 00:12:54.150
Do it actually
inside the activity

00:12:54.150 --> 00:12:56.775
because you might actually have
multiple windows on the screen,

00:12:56.775 --> 00:12:58.500
and you never know
where it is, right?

00:12:58.500 --> 00:13:01.590
So, if you're using
on-configuration changes,

00:13:01.590 --> 00:13:03.000
check out the density.

00:13:03.000 --> 00:13:06.660
And otherwise, listen
to these kind of events.

00:13:06.660 --> 00:13:09.000
So gaming-- if you
were ever using gaming

00:13:09.000 --> 00:13:10.740
and you were using
a game controller,

00:13:10.740 --> 00:13:13.350
you have possibly noticed
that there is not really

00:13:13.350 --> 00:13:14.857
much of what Android is doing.

00:13:14.857 --> 00:13:17.190
So you cannot really figure
out how many controllers are

00:13:17.190 --> 00:13:18.250
connected.

00:13:18.250 --> 00:13:20.545
And if the mapping was
wrong, it didn't really work.

00:13:20.545 --> 00:13:21.420
We are changing this.

00:13:21.420 --> 00:13:23.400
Basically, very soon
you will actually

00:13:23.400 --> 00:13:26.922
have the standard API,
which is on any phone.

00:13:26.922 --> 00:13:29.130
So if you want to test it
out, test it on your phone.

00:13:29.130 --> 00:13:33.340
If it's working there, it
will work in the future.

00:13:33.340 --> 00:13:35.570
Well, then there's
relative mouse positioning,

00:13:35.570 --> 00:13:37.480
which is used by all
kinds of first-person

00:13:37.480 --> 00:13:38.620
shooters and whatnot.

00:13:38.620 --> 00:13:40.930
We have that also
now supported, which

00:13:40.930 --> 00:13:46.420
went out in M74, which
is now in release state.

00:13:46.420 --> 00:13:48.220
So you can request the pointer.

00:13:48.220 --> 00:13:51.910
And you can actually listen then
to all changes and go for that.

00:13:51.910 --> 00:13:54.250
So and with that, I'm coming
to the most important topic

00:13:54.250 --> 00:13:56.740
of this talk, which
is animation jank.

00:13:56.740 --> 00:13:58.910
Well, if you were ever
doing any kind of animation,

00:13:58.910 --> 00:14:01.270
you have possibly seen
kind some kind of jank.

00:14:01.270 --> 00:14:02.140
What is jank?

00:14:02.140 --> 00:14:04.420
It's something like when
something moves very slowly,

00:14:04.420 --> 00:14:08.050
suddenly you see this kind of
hiccup when something is stuck

00:14:08.050 --> 00:14:09.490
and then continuing.

00:14:09.490 --> 00:14:14.100
And there is, unfortunately,
no tool up to now shows you

00:14:14.100 --> 00:14:15.767
where this hiccup
is coming from.

00:14:15.767 --> 00:14:17.350
But we were working
on that very hard.

00:14:17.350 --> 00:14:20.750
So and for that, I have a
small presentation for that.

00:14:20.750 --> 00:14:23.088
So, unfortunately,
this is not that easy.

00:14:23.088 --> 00:14:24.130
There are a lot of boxes.

00:14:24.130 --> 00:14:25.762
But don't be scared.

00:14:25.762 --> 00:14:27.220
If you have never
seen them before,

00:14:27.220 --> 00:14:29.095
I will actually guide
you through everything.

00:14:29.095 --> 00:14:32.600
So, first off, when you look
into a standard application,

00:14:32.600 --> 00:14:34.720
it is usually using
double buffering.

00:14:34.720 --> 00:14:36.255
What does double buffering mean?

00:14:36.255 --> 00:14:38.380
It means you have one
buffer, which is being shown,

00:14:38.380 --> 00:14:40.310
and one buffer, which
is being rendered to.

00:14:40.310 --> 00:14:42.940
And you are constantly iterating
between the two of them.

00:14:42.940 --> 00:14:44.620
And the application
is basically--

00:14:44.620 --> 00:14:47.350
it's getting the buffer, it's
rendering through the buffer,

00:14:47.350 --> 00:14:49.780
and it's submitting the
buffer to be displayed.

00:14:49.780 --> 00:14:52.210
And then it's doing
the same thing again,

00:14:52.210 --> 00:14:53.710
and over, and over,
and over again.

00:14:53.710 --> 00:14:55.880
It's always exactly
the same thing.

00:14:55.880 --> 00:14:57.850
And, in screen space,
you see them first

00:14:57.850 --> 00:15:00.490
the old picture, then comes
the vSync, which is basically

00:15:00.490 --> 00:15:02.950
the end of the scan out
of the buffer, which

00:15:02.950 --> 00:15:05.410
means at which point in time
you can flip to the next one.

00:15:05.410 --> 00:15:06.940
And then it flips
to the next frame.

00:15:06.940 --> 00:15:08.620
This is the ideal state.

00:15:08.620 --> 00:15:12.200
So looking deeper into the
system, there's driver space.

00:15:12.200 --> 00:15:14.560
So in driver space, we are
waiting now for the reasoning

00:15:14.560 --> 00:15:17.080
from the previous frame so
that we can take the buffer

00:15:17.080 --> 00:15:18.700
and render stuff into it.

00:15:18.700 --> 00:15:21.040
So which is basically then
producing all the buff master

00:15:21.040 --> 00:15:24.460
DMA commands and putting them
into one contiguous buffer

00:15:24.460 --> 00:15:28.530
so that the GPU can read them,
and continuing the same thing.

00:15:28.530 --> 00:15:31.600
And in GPU space, the GPU
was simply taking that thing,

00:15:31.600 --> 00:15:34.210
it's executing these buffers
which were being produced

00:15:34.210 --> 00:15:36.730
by the driver space, and
doing that one by one,

00:15:36.730 --> 00:15:39.420
and flipping it automatically
via hardware event

00:15:39.420 --> 00:15:42.520
into view as soon as is needed.

00:15:42.520 --> 00:15:44.620
So, where comes
jank now into play?

00:15:44.620 --> 00:15:48.250
Well, jank comes if, for
example, the rendering takes

00:15:48.250 --> 00:15:49.990
much longer than you expect.

00:15:49.990 --> 00:15:51.910
So in that case, what happens?

00:15:51.910 --> 00:15:54.203
Well, basically you're
repeating the previous frame.

00:15:54.203 --> 00:15:56.620
And even worse, whatever you
have already cued up in order

00:15:56.620 --> 00:15:59.500
to be rendered is possibly
producing the next frame,

00:15:59.500 --> 00:16:00.710
which is also bad.

00:16:00.710 --> 00:16:03.760
So it's not only one frame
which is bad, it's two or three.

00:16:03.760 --> 00:16:06.680
So therefore, it's really
a bad thing to have that.

00:16:06.680 --> 00:16:09.610
So another thing what can
happen is that in user space,

00:16:09.610 --> 00:16:11.480
you will actually see
something similar.

00:16:11.480 --> 00:16:13.120
So which means like
for example, there

00:16:13.120 --> 00:16:15.940
is memory swapping involved,
Chrome is basically

00:16:15.940 --> 00:16:20.380
loading some new
notifications, or maybe Android

00:16:20.380 --> 00:16:21.940
is doing some
compaction, or whatnot.

00:16:21.940 --> 00:16:23.440
And in that case,
you might actually

00:16:23.440 --> 00:16:26.260
end up in the same state.

00:16:26.260 --> 00:16:29.380
But unfortunately, we are
running a desktop operating

00:16:29.380 --> 00:16:30.010
system, right?

00:16:30.010 --> 00:16:31.750
Which is not only that.

00:16:31.750 --> 00:16:33.490
So now it's getting
a little bit more

00:16:33.490 --> 00:16:36.327
complicated because we have
suddenly multiple clients which

00:16:36.327 --> 00:16:37.160
have to be rendered.

00:16:37.160 --> 00:16:40.060
So we have now n
things which are being

00:16:40.060 --> 00:16:41.360
rendering at the same time.

00:16:41.360 --> 00:16:44.170
So think about everything
what I was talking before,

00:16:44.170 --> 00:16:46.240
but only n times.

00:16:46.240 --> 00:16:47.980
So this case, two.

00:16:47.980 --> 00:16:50.290
And we have a driver space
exactly as many boxes

00:16:50.290 --> 00:16:52.150
again, only double.

00:16:52.150 --> 00:16:54.390
And well, this GPU space
gets cramped, right?

00:16:54.390 --> 00:16:56.140
Because we have to do
now multiple things,

00:16:56.140 --> 00:16:58.480
which are [INAUDIBLE].

00:16:58.480 --> 00:17:03.430
And, well, then comes the scary
thing, which is the compositor.

00:17:03.430 --> 00:17:04.510
What is the compositor?

00:17:04.510 --> 00:17:07.023
Well, basically it's now
taking all these surfaces

00:17:07.023 --> 00:17:08.440
and it's compositing
them together

00:17:08.440 --> 00:17:12.010
into one surface, which means we
have to read everything again,

00:17:12.010 --> 00:17:14.440
write it again into the
output buffer, which

00:17:14.440 --> 00:17:16.197
is another overhead, right?

00:17:16.197 --> 00:17:18.280
So let's complete the
picture with some more boxes

00:17:18.280 --> 00:17:19.930
from what happened before.

00:17:19.930 --> 00:17:21.520
And now if you look
into the screen

00:17:21.520 --> 00:17:23.720
and you look from the upper
left to the lower right,

00:17:23.720 --> 00:17:26.800
you see that the blue thing is
percolating through the system

00:17:26.800 --> 00:17:28.420
all the way to the output.

00:17:28.420 --> 00:17:31.390
Except for, there is no blue
slide on the screen, right?

00:17:31.390 --> 00:17:34.240
Which means we have already
created a pipeline here.

00:17:34.240 --> 00:17:37.090
A pipeline is a good
thing in some ways.

00:17:37.090 --> 00:17:39.040
Because the thing
is, if the system has

00:17:39.040 --> 00:17:41.500
some fluctuations like
memory swapping or whatnot,

00:17:41.500 --> 00:17:43.010
you can compensate for them.

00:17:43.010 --> 00:17:44.750
But the thing is it
has also the problem

00:17:44.750 --> 00:17:46.698
that if you click
something, it might actually

00:17:46.698 --> 00:17:48.490
take a little bit of
time, additional time,

00:17:48.490 --> 00:17:50.380
to actually see that.

00:17:50.380 --> 00:17:52.570
So the good news is
there is actually

00:17:52.570 --> 00:17:55.210
very old technology
from the 90s, which

00:17:55.210 --> 00:17:59.360
is actually trying to eliminate
this by using overlays.

00:17:59.360 --> 00:18:01.840
So overlays is basically
the GPU was reading out

00:18:01.840 --> 00:18:04.810
two buffers at the same time
and it's blending them together.

00:18:04.810 --> 00:18:06.670
But unfortunately,
that works only as long

00:18:06.670 --> 00:18:10.060
as you are not zooming in or
you are not turning your display

00:18:10.060 --> 00:18:12.790
into a portrait, for example.

00:18:12.790 --> 00:18:14.740
And since most
users are possibly

00:18:14.740 --> 00:18:16.600
playing around with
the zoom level,

00:18:16.600 --> 00:18:18.050
it might actually not work.

00:18:18.050 --> 00:18:20.430
The good news on the other
hand is we are working on it.

00:18:20.430 --> 00:18:21.430
By the end of the year--

00:18:21.430 --> 00:18:23.270
I hope much, much earlier--

00:18:23.270 --> 00:18:24.700
we will be able to address it.

00:18:24.700 --> 00:18:27.070
And you will have
always double buffering

00:18:27.070 --> 00:18:29.460
if you're running in front.

00:18:29.460 --> 00:18:31.870
So with that, coming
to the tool itself.

00:18:31.870 --> 00:18:32.915
So what can the tool do?

00:18:32.915 --> 00:18:35.040
Well, first off it can
actually show how the buffer

00:18:35.040 --> 00:18:37.350
is percolating, so the system.

00:18:37.350 --> 00:18:40.960
It can show you when memory
was actually being swapped.

00:18:40.960 --> 00:18:43.440
It can show you how
busy the CPU and the GPU

00:18:43.440 --> 00:18:45.090
is at any point in time.

00:18:45.090 --> 00:18:48.120
It can actually show you all
kinds of things-- temperature,

00:18:48.120 --> 00:18:50.640
speed, and what-not from
all the different components

00:18:50.640 --> 00:18:51.900
inside the system.

00:18:51.900 --> 00:18:54.537
And best of all, if you have
some traces inside your code

00:18:54.537 --> 00:18:57.120
and you want to see exactly what
happened at [INAUDIBLE] point

00:18:57.120 --> 00:18:58.860
in time, you can actually
put them in there

00:18:58.860 --> 00:19:00.810
and you can actually see
them and monitor them

00:19:00.810 --> 00:19:02.977
there as well so that you
see everything in relation

00:19:02.977 --> 00:19:03.840
to each other.

00:19:03.840 --> 00:19:05.340
And then you can
actually drill down

00:19:05.340 --> 00:19:07.620
and see why you have seen jank.

00:19:07.620 --> 00:19:11.400
So with that, let's
come to a sort of demo.

00:19:11.400 --> 00:19:13.110
So, let's see.

00:19:13.110 --> 00:19:15.540
Let's bring up our tool.

00:19:15.540 --> 00:19:16.630
So this tool is--

00:19:16.630 --> 00:19:18.500
basically it's a small
particle generator.

00:19:18.500 --> 00:19:19.980
And you can see already here--

00:19:19.980 --> 00:19:23.860
let me close this guy here.

00:19:23.860 --> 00:19:25.670
So you can basically
see the lower line

00:19:25.670 --> 00:19:27.340
is 60 frames per
second, the next line

00:19:27.340 --> 00:19:29.470
is 30 frames per second,
15, and so on, and so on.

00:19:32.620 --> 00:19:34.540
So in order to start the
tool, what I am doing

00:19:34.540 --> 00:19:37.510
is I'm pressing Control-Shift-G.
So now tool is running.

00:19:37.510 --> 00:19:39.190
And there was also a jank.

00:19:39.190 --> 00:19:39.940
Look at that.

00:19:39.940 --> 00:19:42.470
That was fast, much
faster than expected.

00:19:42.470 --> 00:19:43.720
So let's see.

00:19:43.720 --> 00:19:47.260
So first, let's try to
zoom out a little bit

00:19:47.260 --> 00:19:49.150
to see the regular pattern.

00:19:49.150 --> 00:19:50.650
You can actually see now here--

00:19:50.650 --> 00:19:51.858
I hope you can see my cursor.

00:19:51.858 --> 00:19:52.960
Yes, you can, awesome.

00:19:52.960 --> 00:19:55.210
You can actually see how the
buffer is-- so first off,

00:19:55.210 --> 00:19:56.770
we have four buffers here.

00:19:56.770 --> 00:19:58.720
So the upper line is always--

00:19:58.720 --> 00:20:02.200
and the thing was application
and/or surface [INAUDIBLE]..

00:20:02.200 --> 00:20:05.943
The next line is what Chrome
is seeing for its compositor.

00:20:05.943 --> 00:20:08.110
And then comes the next
buffer, and the next buffer,

00:20:08.110 --> 00:20:08.750
and the next buffer.

00:20:08.750 --> 00:20:09.958
So there are lots of buffers.

00:20:09.958 --> 00:20:12.760
We had four buffers, it
means quadruple buffering.

00:20:12.760 --> 00:20:15.730
So then we have the
Android compositor,

00:20:15.730 --> 00:20:17.230
which is doing a
little bit of stuff

00:20:17.230 --> 00:20:19.570
before it's actually
passing it onto Chrome

00:20:19.570 --> 00:20:21.410
and it's doing something.

00:20:21.410 --> 00:20:22.980
And we see Chrome
is also rendering.

00:20:22.980 --> 00:20:24.730
And as you can see,
there are two buffers,

00:20:24.730 --> 00:20:27.040
which is basically saying
it's using double buffering

00:20:27.040 --> 00:20:28.540
at that point in time.

00:20:28.540 --> 00:20:30.520
And looking into
the memories thing,

00:20:30.520 --> 00:20:32.860
you can actually see how
much memory was being used.

00:20:32.860 --> 00:20:35.590
You can see a line creeping
up here, which is--

00:20:35.590 --> 00:20:36.550
oh, look at that.

00:20:36.550 --> 00:20:39.500
So memory is actually definitely
creeping up over time.

00:20:39.500 --> 00:20:42.470
And you can also then see that
the GPU was very busy here.

00:20:42.470 --> 00:20:42.970
See?

00:20:42.970 --> 00:20:45.450
So there is only a little
bit, and there here

00:20:45.450 --> 00:20:47.020
is a pretty solid line.

00:20:47.020 --> 00:20:47.950
So let's drill in.

00:20:47.950 --> 00:20:48.970
Let's see.

00:20:48.970 --> 00:20:50.860
The GL thread was taking longer.

00:20:50.860 --> 00:20:52.300
Look at that, OK.

00:20:52.300 --> 00:20:56.130
So why was the GL
thread taking more time?

00:20:56.130 --> 00:20:58.510
Let's have a look.

00:20:58.510 --> 00:21:01.930
There is-- what is this?

00:21:01.930 --> 00:21:04.660
I think this is--

00:21:04.660 --> 00:21:06.760
the temperature of the
system is incredible.

00:21:06.760 --> 00:21:07.630
It's 84 .

00:21:07.630 --> 00:21:09.790
Degrees that is
possibly always a reason

00:21:09.790 --> 00:21:11.767
why it was actually
going down, because you

00:21:11.767 --> 00:21:13.600
are starting possibly
to throttle the system

00:21:13.600 --> 00:21:15.400
at that point in time.

00:21:15.400 --> 00:21:19.270
But in general, this tool gives
you all the information in one

00:21:19.270 --> 00:21:19.870
go.

00:21:19.870 --> 00:21:22.580
And you can-- let's
scroll through.

00:21:22.580 --> 00:21:24.550
You can see at
the end that there

00:21:24.550 --> 00:21:27.680
is composition jank somewhere.

00:21:27.680 --> 00:21:30.350
So if you want to see
anything more about this tool,

00:21:30.350 --> 00:21:32.020
please come by our Sandboxes.

00:21:32.020 --> 00:21:34.510
We have actually people
which we were training

00:21:34.510 --> 00:21:38.500
and they are working
on the tool, which

00:21:38.500 --> 00:21:40.840
are able to actually
handle anything

00:21:40.840 --> 00:21:41.840
inside your application.

00:21:41.840 --> 00:21:43.757
If you to see why your
application is janking,

00:21:43.757 --> 00:21:44.980
please let us know.

00:21:44.980 --> 00:21:46.360
So with that, back
to the slides.

00:21:51.520 --> 00:21:54.060
So if you want to
try it on your own,

00:21:54.060 --> 00:21:57.770
M75 is going to beta
around today or tomorrow.

00:21:57.770 --> 00:22:00.160
So you can actually simply
take the beta channel,

00:22:00.160 --> 00:22:01.885
go into developer
mode-- unfortunately

00:22:01.885 --> 00:22:04.510
you need developer mode for this
because traces are, of course,

00:22:04.510 --> 00:22:06.110
some kind of security risk.

00:22:06.110 --> 00:22:09.580
So, therefore, you need to be in
development mode for that one.

00:22:09.580 --> 00:22:12.040
And then go into
Settings, Flags,

00:22:12.040 --> 00:22:15.340
and say that you want to
use the visualization tool.

00:22:15.340 --> 00:22:21.310
And then navigate to this
page to see the result.

00:22:21.310 --> 00:22:24.130
For the usage, stop on jank.

00:22:24.130 --> 00:22:26.440
Activate that, add your
additional counters

00:22:26.440 --> 00:22:28.630
if you want to, and
run your application.

00:22:28.630 --> 00:22:30.230
And then once you
are at the point.

00:22:30.230 --> 00:22:33.260
Press Control-G, and
see what happens.

00:22:33.260 --> 00:22:35.140
You can use w and s
at any point in time

00:22:35.140 --> 00:22:38.350
in order to zoom in and
out of the timeline.

00:22:38.350 --> 00:22:40.760
Last but not least, we have
updated our documentation.

00:22:40.760 --> 00:22:42.343
So if you go online,
you will actually

00:22:42.343 --> 00:22:44.470
see how to use the tool.

00:22:44.470 --> 00:22:47.410
And we will add more information
there going forwards.

00:22:47.410 --> 00:22:49.780
And well, come to our sandbox.

00:22:49.780 --> 00:22:50.780
To actually get it done.

00:22:50.780 --> 00:22:52.447
With that, I am passing
it on to Emilie.

00:22:58.488 --> 00:22:59.780
EMILIE ROBERTS: Thanks, Stefan.

00:22:59.780 --> 00:23:01.380
So I'm Emilie Roberts.

00:23:01.380 --> 00:23:05.150
I'm a developer advocate
working Chrome OS.

00:23:05.150 --> 00:23:07.820
I know many of you,
which is really exciting.

00:23:07.820 --> 00:23:12.020
And okie-dokey, so we've learned
a lot about where Chrome OS is

00:23:12.020 --> 00:23:13.900
and lots of the new
tools and features

00:23:13.900 --> 00:23:14.900
we've brought this year.

00:23:14.900 --> 00:23:16.483
I want to talk a
little bit about what

00:23:16.483 --> 00:23:18.170
you can do to optimize
your app, what

00:23:18.170 --> 00:23:20.000
you can do to make
your apps look awesome

00:23:20.000 --> 00:23:22.520
and work really
awesome on Chrome OS.

00:23:22.520 --> 00:23:24.500
So I'm going to talk a
little bit about input

00:23:24.500 --> 00:23:25.725
and then about output.

00:23:25.725 --> 00:23:27.350
And I'm also going
to talk a little bit

00:23:27.350 --> 00:23:29.510
about the slash in
the middle, which

00:23:29.510 --> 00:23:33.140
is a surprise topic coming up.

00:23:33.140 --> 00:23:38.390
So your applications
should support keyboard.

00:23:38.390 --> 00:23:39.373
Thanks very much.

00:23:39.373 --> 00:23:40.040
Have a good day.

00:23:44.320 --> 00:23:44.950
Just kidding.

00:23:44.950 --> 00:23:46.270
If you know me, I'd
like to talk a lot.

00:23:46.270 --> 00:23:48.190
So I'm going to talk
about a few more things.

00:23:48.190 --> 00:23:49.840
Seriously, support
keyboard input--

00:23:49.840 --> 00:23:53.360
I know most people
here already do that.

00:23:53.360 --> 00:23:55.810
And if you do, the code
looks something like this.

00:23:55.810 --> 00:23:58.030
So if I'm looking for
a key up or key down,

00:23:58.030 --> 00:24:00.810
I'm looking for the j key.

00:24:00.810 --> 00:24:02.100
I do what I want to do.

00:24:02.100 --> 00:24:03.310
I return true.

00:24:03.310 --> 00:24:04.950
Everything's good.

00:24:04.950 --> 00:24:08.370
One little gotcha that
we've seen in a few apps,

00:24:08.370 --> 00:24:10.890
don't swallow every key
that the system sends.

00:24:10.890 --> 00:24:12.360
So if I'm not
using a key, so I'm

00:24:12.360 --> 00:24:15.080
not using any other
keyboard but j here, pass it

00:24:15.080 --> 00:24:18.280
back up to Super,
back up to the system.

00:24:18.280 --> 00:24:19.950
For example, Chrome
OS might want

00:24:19.950 --> 00:24:22.220
to do something
smart with Control-N

00:24:22.220 --> 00:24:24.750
and open any window,
or Control-Shift-G

00:24:24.750 --> 00:24:27.600
like that tool we just saw,
and run the graphics trace.

00:24:27.600 --> 00:24:31.350
If your app is a black hole that
swallows all the key presses,

00:24:31.350 --> 00:24:33.210
then it's sad for
the user or else

00:24:33.210 --> 00:24:35.730
Chrome OS has to do some tricks.

00:24:35.730 --> 00:24:38.720
So pass it up to Super.

00:24:38.720 --> 00:24:41.960
Some of you may have noticed
that Chrome OS keyboards have

00:24:41.960 --> 00:24:43.070
a Refresh key.

00:24:43.070 --> 00:24:44.840
What the heck is up with that?

00:24:44.840 --> 00:24:46.410
It's a legitimate key.

00:24:46.410 --> 00:24:49.160
It's got his very own key
code and everything, key code

00:24:49.160 --> 00:24:50.730
refresh.

00:24:50.730 --> 00:24:53.440
So in the web world, it makes
sense to refresh a web page.

00:24:53.440 --> 00:24:56.840
But if you think about social
media apps or any content app,

00:24:56.840 --> 00:25:01.040
there's also a refresh type
of action that users expect.

00:25:01.040 --> 00:25:04.590
And, if there's a refresh key
sitting in front of your users,

00:25:04.590 --> 00:25:06.590
well, they're going to
expect when they press it

00:25:06.590 --> 00:25:08.090
that your app refreshes.

00:25:08.090 --> 00:25:09.620
So you just need
to handle key code

00:25:09.620 --> 00:25:11.840
refresh like in
the previous slide

00:25:11.840 --> 00:25:14.810
and do the refresh
action in your app.

00:25:14.810 --> 00:25:17.330
The good news is, if you're
already using swipe refresh

00:25:17.330 --> 00:25:19.617
layout, this will be wired up.

00:25:19.617 --> 00:25:21.200
I don't think it's
quite wired up yet,

00:25:21.200 --> 00:25:22.742
but it will be wired
up automatically

00:25:22.742 --> 00:25:24.280
for you coming forward.

00:25:24.280 --> 00:25:26.780
You press Refresh,
that type of layout

00:25:26.780 --> 00:25:29.980
will refresh automatically.

00:25:29.980 --> 00:25:30.930
Oh, this one's fun.

00:25:30.930 --> 00:25:33.750
So if you think about
a mobile operating

00:25:33.750 --> 00:25:36.030
system and an app
optimized for that,

00:25:36.030 --> 00:25:40.170
and suddenly it's on a laptop
with a touchpad, and stylus,

00:25:40.170 --> 00:25:44.340
and all that stuff, it's a super
interesting, wonderful, super

00:25:44.340 --> 00:25:46.360
challenging problem
to think about.

00:25:46.360 --> 00:25:49.390
Like, how does that happen?

00:25:49.390 --> 00:25:49.890
It's cool.

00:25:49.890 --> 00:25:51.515
That's why I'm doing
the job I'm doing.

00:25:51.515 --> 00:25:52.690
It's super interesting.

00:25:52.690 --> 00:25:53.982
So let's talk about a touchpad.

00:25:53.982 --> 00:25:55.800
For example, a
user on a desktop,

00:25:55.800 --> 00:25:57.900
if they do a two finger
swipe with a touchpad,

00:25:57.900 --> 00:26:00.693
they expect the app to scroll.

00:26:00.693 --> 00:26:02.610
Well, that's not what
happens in a phone where

00:26:02.610 --> 00:26:06.690
it's like a one finger hold
and drag type of motion.

00:26:06.690 --> 00:26:09.740
So Chrome OS automatically
wires that up for you.

00:26:09.740 --> 00:26:11.700
So most of you
have nothing to do.

00:26:11.700 --> 00:26:15.285
The user swipes on the
touchpad and it works.

00:26:15.285 --> 00:26:15.910
That's awesome.

00:26:15.910 --> 00:26:17.040
That's what we want.

00:26:17.040 --> 00:26:19.980
If you're doing
something a little more

00:26:19.980 --> 00:26:22.540
tricky with your motion
events, for example

00:26:22.540 --> 00:26:25.203
if you're a drawing app,
maybe that scrolling motion

00:26:25.203 --> 00:26:26.870
is going to start
drawing on the canvas.

00:26:26.870 --> 00:26:28.210
That's just not what you want.

00:26:28.210 --> 00:26:30.330
So all you have to do is--

00:26:30.330 --> 00:26:32.400
or what works in most
cases, I should say,

00:26:32.400 --> 00:26:33.360
check the button state.

00:26:33.360 --> 00:26:35.670
If it's zero, no
buttons being pressed,

00:26:35.670 --> 00:26:36.900
it's not a drawing event.

00:26:36.900 --> 00:26:38.670
And you can just ignore it.

00:26:38.670 --> 00:26:41.562
And that should work great.

00:26:41.562 --> 00:26:44.300
Okie-dokey, so this
is a super fun game.

00:26:44.300 --> 00:26:48.180
It's EA's NBA Live
mobile basketball.

00:26:48.180 --> 00:26:50.000
Take a look at it.

00:26:50.000 --> 00:26:52.520
It's pretty fun to
play on Chromebooks.

00:26:52.520 --> 00:26:54.680
It's a little janky on
the screen, but that's OK.

00:26:54.680 --> 00:26:58.870
So take a look at the left,
take a look at the right.

00:26:58.870 --> 00:27:00.930
Ea did something
really smart, which

00:27:00.930 --> 00:27:02.940
is if a system is
not keeping up,

00:27:02.940 --> 00:27:05.940
then it's cutting
out extra animations

00:27:05.940 --> 00:27:08.580
and that stuff so that the
actual gameplay is still

00:27:08.580 --> 00:27:10.380
going on, which is awesome.

00:27:10.380 --> 00:27:13.620
But you'll notice that
poor guy on the left,

00:27:13.620 --> 00:27:15.540
his basketballs trailing
along behind him

00:27:15.540 --> 00:27:17.310
like a little chihuahua.

00:27:17.310 --> 00:27:19.140
He's not really
doing anything cool.

00:27:19.140 --> 00:27:21.030
This is select, is the past.

00:27:21.030 --> 00:27:24.207
And the right frame is the
current state of things.

00:27:24.207 --> 00:27:26.790
It's much more interesting-- the
ball is bouncing up and down,

00:27:26.790 --> 00:27:29.170
he's doing those cool moves.

00:27:29.170 --> 00:27:30.710
That's what we want to see.

00:27:30.710 --> 00:27:32.545
So the issue was
absolutely not EA's.

00:27:32.545 --> 00:27:33.420
This game is awesome.

00:27:33.420 --> 00:27:37.560
In fact, as I said, I think did
something really intelligent.

00:27:37.560 --> 00:27:40.260
The issue was Chrome
OS-- our language

00:27:40.260 --> 00:27:41.550
skills weren't that good.

00:27:41.550 --> 00:27:45.870
We don't speak ARM that well
for many of our x86 devices.

00:27:45.870 --> 00:27:50.100
And so the good news is we've
gone to language school, who

00:27:50.100 --> 00:27:51.790
diligently done our homework.

00:27:51.790 --> 00:27:53.170
We speak ARM a
little bit better.

00:27:53.170 --> 00:27:56.670
So our translation from
ARM to x86 is much better.

00:27:56.670 --> 00:27:59.460
So games will
automatically get that.

00:27:59.460 --> 00:28:01.770
And there's a lot of new
improvements coming this year

00:28:01.770 --> 00:28:03.400
in the pipeline already.

00:28:03.400 --> 00:28:05.880
So if you're building
for ARM, good news--

00:28:05.880 --> 00:28:08.130
y9ou should see some
improvements in translation.

00:28:08.130 --> 00:28:10.910
You'll be able to
do those cool moves.

00:28:10.910 --> 00:28:14.360
However, if you care
about performance--

00:28:14.360 --> 00:28:15.800
and who doesn't, right--

00:28:15.800 --> 00:28:21.230
but especially if you're a game
or a creative app, support x86.

00:28:21.230 --> 00:28:23.900
Because all of our top
applications-- or sorry,

00:28:23.900 --> 00:28:26.030
our top devices, are x86.

00:28:26.030 --> 00:28:27.330
Most of them 64-bit.

00:28:27.330 --> 00:28:29.630
The 64-bit
requirement is coming.

00:28:29.630 --> 00:28:31.880
And don't throw away ARM 32,
because obviously there's

00:28:31.880 --> 00:28:33.230
lots of those devices too.

00:28:33.230 --> 00:28:39.530
So ARM 32, ARM 64,
x86-32, x86-64--

00:28:39.530 --> 00:28:41.030
sounds like a lot,
but it's actually

00:28:41.030 --> 00:28:42.470
quite easy in Android Studio.

00:28:42.470 --> 00:28:46.570
And, with Android app bundles,
it bundles it up all nicely,

00:28:46.570 --> 00:28:48.110
sends it to the Play Store.

00:28:48.110 --> 00:28:50.900
The Play Store will only send
the ABIs that your users need.

00:28:50.900 --> 00:28:53.150
So it doesn't increase their
download size or anything

00:28:53.150 --> 00:28:53.850
like that.

00:28:53.850 --> 00:28:56.030
So thank you very
much, in advance,

00:28:56.030 --> 00:28:59.730
for always supporting x86.

00:28:59.730 --> 00:29:01.370
Okie-dokey, so
here's the it topic

00:29:01.370 --> 00:29:03.120
I'm really excited
about, which is layout.

00:29:03.120 --> 00:29:04.083
This is the o--

00:29:04.083 --> 00:29:05.000
oh, I didn't tell you.

00:29:05.000 --> 00:29:07.250
The slash was the
indicate translation.

00:29:07.250 --> 00:29:10.340
So input slash
indicate-- oh, anyway.

00:29:10.340 --> 00:29:13.790
So let's talk about layout.

00:29:13.790 --> 00:29:15.740
There are mobile
phones, obviously.

00:29:15.740 --> 00:29:17.690
But we're moving
a lot beyond that.

00:29:17.690 --> 00:29:21.620
There's tablets, there's
Chromebooks, there's foldables,

00:29:21.620 --> 00:29:23.633
there's external
monitors, there's TVs,

00:29:23.633 --> 00:29:24.800
there's all sorts of things.

00:29:24.800 --> 00:29:27.800
Your apps need to work
across all of those devices.

00:29:27.800 --> 00:29:31.010
And that's becoming more and
more true as time goes on.

00:29:31.010 --> 00:29:34.720
And the ideal
situation is one app

00:29:34.720 --> 00:29:36.930
can just fluidly and
seamlessly handle that.

00:29:36.930 --> 00:29:39.100
So on a Chromebook, if
I'm resizing your app just

00:29:39.100 --> 00:29:42.610
gets bigger, it looks great,
does what it needs to do.

00:29:42.610 --> 00:29:44.380
Somebody opens a
foldable, it works great.

00:29:44.380 --> 00:29:46.880
Somebody plugs in an external
monitor, it works great.

00:29:46.880 --> 00:29:49.480
So this goes a long way.

00:29:49.480 --> 00:29:52.900
One approach is to use
different layout buckets

00:29:52.900 --> 00:29:54.620
based on screen sizes.

00:29:54.620 --> 00:29:56.390
So I'm sure many of
you have seen this.

00:29:56.390 --> 00:29:56.890
I hope so.

00:29:56.890 --> 00:29:59.560
If not, you can check
out our Resizing Code Lab

00:29:59.560 --> 00:30:01.640
in the Code Lab tents.

00:30:01.640 --> 00:30:03.680
You have one resource
file and then differently

00:30:03.680 --> 00:30:04.550
layout buckets--

00:30:04.550 --> 00:30:06.890
landscape, wide
landscape, wide portrait.

00:30:06.890 --> 00:30:10.520
Maybe you have six, maybe have
two depending on your layout.

00:30:10.520 --> 00:30:14.060
Let's talk about something else,
which is navigation patterns.

00:30:14.060 --> 00:30:16.050
So this is how your
users experience

00:30:16.050 --> 00:30:17.860
your app, how they get
around your app, how

00:30:17.860 --> 00:30:20.800
they explore your content.

00:30:20.800 --> 00:30:23.080
Super related to
screen sizes, but I

00:30:23.080 --> 00:30:25.850
think it deserves its
own separate topic.

00:30:25.850 --> 00:30:28.090
So what happens if you
have a mobile phone app

00:30:28.090 --> 00:30:30.310
and you put it on
an external monitor?

00:30:30.310 --> 00:30:33.570
It might look
something like this.

00:30:33.570 --> 00:30:34.550
It looks horrible.

00:30:34.550 --> 00:30:35.480
It looks terrible.

00:30:35.480 --> 00:30:37.340
This is a photo viewing app.

00:30:37.340 --> 00:30:39.500
And the developer, the
designer should probably

00:30:39.500 --> 00:30:41.360
be sent back to
design school, should

00:30:41.360 --> 00:30:43.640
be thrown out of the building.

00:30:43.640 --> 00:30:44.510
It's me.

00:30:44.510 --> 00:30:46.150
So don't throw me
out yet, please.

00:30:46.150 --> 00:30:47.750
Give me a second chance.

00:30:47.750 --> 00:30:50.480
But you can see that
it's a photo-viewing app.

00:30:50.480 --> 00:30:52.642
Maybe on the phone, fine,
you have a 100 photos,

00:30:52.642 --> 00:30:54.350
you don't want a
million little previews.

00:30:54.350 --> 00:30:57.470
But come on, we've got
lots of screen real estate.

00:30:57.470 --> 00:30:58.640
We can do better.

00:30:58.640 --> 00:31:01.387
I could literally like
fit inside those columns

00:31:01.387 --> 00:31:02.470
with my arms outstretched.

00:31:02.470 --> 00:31:04.070
There's so much wasted space.

00:31:04.070 --> 00:31:07.640
And most importantly, take
a look at the navigation.

00:31:07.640 --> 00:31:10.670
It's all stretched
out, it's tiny.

00:31:10.670 --> 00:31:12.770
Can you see what
those icons are?

00:31:12.770 --> 00:31:14.760
I doubt it from there, right?

00:31:14.760 --> 00:31:17.360
And if you're a visually--

00:31:17.360 --> 00:31:18.732
you have some different--

00:31:18.732 --> 00:31:20.690
you're a lower vision
user, you're a little bit

00:31:20.690 --> 00:31:24.020
far-sighted, you're a normal
person with perfect eagle eye

00:31:24.020 --> 00:31:27.488
vision, it's really hard
to see, to understand,

00:31:27.488 --> 00:31:29.030
and, if you have
any mobility issues,

00:31:29.030 --> 00:31:32.808
to even interact with
those touch targets.

00:31:32.808 --> 00:31:33.600
Thumbs down, right?

00:31:33.600 --> 00:31:35.552
So I get a second chance.

00:31:35.552 --> 00:31:36.510
Here's my second draft.

00:31:36.510 --> 00:31:38.110
You can see I did a
little bit better.

00:31:38.110 --> 00:31:38.670
It's a photo viewer.

00:31:38.670 --> 00:31:40.837
I put a little photo preview
if I have enough space.

00:31:40.837 --> 00:31:42.492
Did a little bit
better in the middle.

00:31:42.492 --> 00:31:44.700
And most importantly, this
is what I'm talking about,

00:31:44.700 --> 00:31:47.160
the navigation is
over on the left.

00:31:47.160 --> 00:31:49.050
This is a side navigation.

00:31:49.050 --> 00:31:50.545
It's got icons, labels.

00:31:50.545 --> 00:31:51.670
They're all close together.

00:31:51.670 --> 00:31:56.460
It's easy to navigate for
anybody using the navigation.

00:31:56.460 --> 00:31:58.470
That get GitHub link
we'll be live very soon.

00:31:58.470 --> 00:32:01.740
If you want to see my amazing
code for this amazing demo,

00:32:01.740 --> 00:32:04.530
check it out probably later
this week or next week.

00:32:07.480 --> 00:32:10.502
And take a look at the
material design site.

00:32:10.502 --> 00:32:11.710
There's lots of great things.

00:32:11.710 --> 00:32:13.360
They have a number
of material studies,

00:32:13.360 --> 00:32:15.790
which are like toy apps
looking at this stuff.

00:32:15.790 --> 00:32:17.840
And they're doing exactly
what I'm talking about.

00:32:17.840 --> 00:32:21.100
So they're on a
mobile phone, maybe

00:32:21.100 --> 00:32:22.830
they use the bottom navigation.

00:32:22.830 --> 00:32:24.400
It's a large landscape.

00:32:24.400 --> 00:32:26.763
They've got site navigation
with icons and labels,

00:32:26.763 --> 00:32:28.430
and then if it's large
but not so large,

00:32:28.430 --> 00:32:31.313
maybe like a rail
navigation on the left.

00:32:31.313 --> 00:32:32.980
I want to take just
a second to call out

00:32:32.980 --> 00:32:37.720
a really awesome developer we've
worked with this year, Adobe.

00:32:37.720 --> 00:32:40.240
As they were optimizing
Adobe Acrobat

00:32:40.240 --> 00:32:43.450
for Chrome OS this year, which
meant keyboard input, mouse

00:32:43.450 --> 00:32:46.690
input, drag and drop, all
that other great stuff.

00:32:46.690 --> 00:32:48.600
They also redesigned
their layout

00:32:48.600 --> 00:32:50.350
so it worked really
well on large screens.

00:32:50.350 --> 00:32:52.000
So, a mobile phone,
they've got exactly

00:32:52.000 --> 00:32:54.817
the same bottom navigation,
which makes sense,

00:32:54.817 --> 00:32:55.900
people are used to, works.

00:32:55.900 --> 00:32:58.108
But on a larger screen,
moves to the side navigation.

00:32:58.108 --> 00:33:00.700
So great work, Adobe, thank you.

00:33:00.700 --> 00:33:02.440
And I'm sure your
users thank you, too.

00:33:02.440 --> 00:33:06.010
You can check out Adobe Acrobat
and some of their other apps

00:33:06.010 --> 00:33:11.450
in our Sandbox tents
or for yourself.

00:33:11.450 --> 00:33:15.170
OK, so this is the slide I
inserted as a gift to you.

00:33:15.170 --> 00:33:18.350
In case you haven't dived
into Jet Pack yet, please do.

00:33:18.350 --> 00:33:22.100
As an Android developer, it's
made my life so much easier.

00:33:22.100 --> 00:33:23.970
Thank you very much.

00:33:23.970 --> 00:33:25.850
Particularly with what
we're talking about,

00:33:25.850 --> 00:33:28.610
particularly all these different
screen sizes, view model,

00:33:28.610 --> 00:33:31.818
just makes saving your
state so much easier.

00:33:31.818 --> 00:33:33.360
It's a very elegant
way to handle it,

00:33:33.360 --> 00:33:35.835
and navigation makes
your fragment headaches

00:33:35.835 --> 00:33:38.210
and your pushing and popping
to the fragment set go away.

00:33:38.210 --> 00:33:41.812
So d.android.com/jetpack,
check it out.

00:33:41.812 --> 00:33:43.520
I think you'll appreciate
it if you don't

00:33:43.520 --> 00:33:44.687
know what I'm talking about.

00:33:47.070 --> 00:33:48.200
So we're nearing the end.

00:33:48.200 --> 00:33:50.640
I wanted to do our
call-out to our code labs.

00:33:50.640 --> 00:33:54.050
We have a Resizing Code Lab as
well as Optimizing Code Lab,

00:33:54.050 --> 00:33:56.390
which is like keyboard
mouse, drag and drop,

00:33:56.390 --> 00:33:57.620
all that fun stuff.

00:33:57.620 --> 00:33:59.660
They've been slightly
refreshed for 2019.

00:33:59.660 --> 00:34:00.890
So check them out.

00:34:00.890 --> 00:34:02.390
And what's cool in
the code lab tent

00:34:02.390 --> 00:34:05.510
is you can go into a Chromebook,
develop on the Chromebook

00:34:05.510 --> 00:34:07.350
in Android Studio,
like we saw earlier,

00:34:07.350 --> 00:34:09.142
and then push it right
to the device, which

00:34:09.142 --> 00:34:13.210
is kind of cool as well.

00:34:13.210 --> 00:34:16.320
Last but not least, we
have a bunch of sandboxes

00:34:16.320 --> 00:34:18.090
all around IO--

00:34:18.090 --> 00:34:20.850
so in the Chrome OS
tent, in the gaming tent,

00:34:20.850 --> 00:34:24.400
in the Android tent,
we're in Flutter, I think.

00:34:24.400 --> 00:34:25.810
Anyway, we're all over.

00:34:25.810 --> 00:34:27.972
And you can talk with
the engineers that

00:34:27.972 --> 00:34:29.139
are building these products.

00:34:29.139 --> 00:34:32.230
We were really fortunate to get
like 40 of the engineers that

00:34:32.230 --> 00:34:33.030
work on Chrome OS.

00:34:33.030 --> 00:34:35.893
So, if you have questions, go
and talk to them, use them.

00:34:35.893 --> 00:34:37.810
Try this stuff out, try
lots of the great apps

00:34:37.810 --> 00:34:42.820
we have, and Linux, also known
as Crostini on Chromebooks,

00:34:42.820 --> 00:34:44.290
is really improving.

00:34:44.290 --> 00:34:46.360
So you can go into
the Chrome OS 10

00:34:46.360 --> 00:34:49.929
and look at Developing on
Chromebooks for the Web,

00:34:49.929 --> 00:34:52.730
for Android, game development--
we've got Unity running,

00:34:52.730 --> 00:34:54.380
which is kind of cool.

00:34:54.380 --> 00:34:57.160
And, most importantly--
well, not most importantly--

00:34:57.160 --> 00:35:01.480
least importantly, check
out our cool enamel pins.

00:35:01.480 --> 00:35:03.252
We have eight of them.

00:35:03.252 --> 00:35:04.960
The eighth one, I
think, is super secret.

00:35:04.960 --> 00:35:07.540
But we have seven that you can
go in each of the Sandboxes.

00:35:07.540 --> 00:35:08.530
They're really cool.

00:35:08.530 --> 00:35:10.790
Collect them.

00:35:10.790 --> 00:35:13.880
And with that, I think I've
got no more slides left.

00:35:13.880 --> 00:35:14.570
Oh, yeah, sorry.

00:35:14.570 --> 00:35:15.517
There's my little pin.

00:35:15.517 --> 00:35:16.850
That's from the Android Sandbox.

00:35:16.850 --> 00:35:18.110
Check it out.

00:35:18.110 --> 00:35:21.290
Okie-dokey., so you've learned
a lot about what's going on.

00:35:21.290 --> 00:35:23.660
I hope you're excited
about the new tools.

00:35:23.660 --> 00:35:25.760
And I hope you're excited
about the enamel pins.

00:35:25.760 --> 00:35:27.710
Please think about screen sizes.

00:35:27.710 --> 00:35:30.950
Please think about navigation
and keyboard input.

00:35:30.950 --> 00:35:32.810
Support x86.

00:35:32.810 --> 00:35:36.290
And all these things can help us
support you in the Play Store.

00:35:36.290 --> 00:35:36.873
Keep in touch.

00:35:36.873 --> 00:35:38.123
Let us know what you're doing.

00:35:38.123 --> 00:35:40.700
We're really excited, as always,
to work with the developers

00:35:40.700 --> 00:35:42.150
and this great community.

00:35:42.150 --> 00:35:44.720
So, thank you for
building on Chrome OS.

00:35:44.720 --> 00:35:47.560
Thank you for building
for Chrome OS.

00:35:47.560 --> 00:35:50.060
And thanks for your time for
coming here today, and spending

00:35:50.060 --> 00:35:52.250
it with us, and
interacting with us after.

00:35:52.250 --> 00:35:54.320
We'll be around
in the sandboxes.

00:35:54.320 --> 00:35:56.930
And, with that, I've
got to say thank you

00:35:56.930 --> 00:35:59.390
to Sweet and Stefan, my
fellow co-presenters.

00:35:59.390 --> 00:36:01.010
And thanks again to you.

00:36:01.010 --> 00:36:02.240
Talk to you soon.

00:36:02.240 --> 00:36:06.490
[LOGO MUSIC]

