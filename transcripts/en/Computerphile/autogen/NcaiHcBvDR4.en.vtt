WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:03.480
Okay, so endianness it's, um, it's a simple problem really

00:00:04.360 --> 00:00:10.960
Computers these days arrange their memory in terms of bytes. So 8-bit values, eight binary digits, 8 bits

00:00:11.710 --> 00:00:16.859
arranged in the computer's memory and we have an individual address for those things, for each of those bytes.

00:00:16.900 --> 00:00:22.230
Now, the computers don't deal always with bytes. Sometimes they use 16-bit values

00:00:22.230 --> 00:00:27.040
sometimes they use 32-bit values and so you have an interesting question is that you've got say

00:00:27.220 --> 00:00:30.220
a 32-bit value, let's just stick with 32-bit values for now

00:00:30.900 --> 00:00:33.840
and you need to assign it into a memory location.

00:00:36.520 --> 00:00:43.920
So you've got 8 bits per memory location per memory address and you've got 32 bits so you're gonna have to split it into 4

00:00:44.079 --> 00:00:49.499
bytes worth of things, four individual pieces, and then assign each of those individual pieces

00:00:50.260 --> 00:00:57.539
into one memory location. Let's pick a 32-bit value and we'll do it in hexadecimal. Just cause it makes the numbers easier.

00:00:57.570 --> 00:01:04.169
So the 0x means it's hexadecimal and we're gonna go for 0 0 C 0

00:01:05.700 --> 00:01:08.500
F F E E. So this is going to be

00:01:09.320 --> 00:01:13.300
our 32-bit value that we're going to want to assign into

00:01:13.540 --> 00:01:16.700
four different memory locations.

00:01:16.750 --> 00:01:24.180
So this would be address 0 1 2 3 and then 4 it would go on like that, memory locations.

00:01:24.180 --> 00:01:26.369
So each of those addresses is going to represent a byte.

00:01:26.369 --> 00:01:34.139
That's the number between 0 and 255 which is equivalent to two hexadecimal digits. Each hexadecimal digit represents one nibble four bits

00:01:34.140 --> 00:01:38.879
So two of them is a bytes worth. Eight of them is 32 bits worth. So we need to assign

00:01:39.460 --> 00:01:41.460
these bytes into

00:01:41.920 --> 00:01:47.060
the memory locations. So how do we do it? What would your suggestion be, Shawn?

00:01:47.060 --> 00:01:50.600
Shawn: "To me, it looks like you were just kind of translate that down and have

00:01:50.600 --> 00:01:54.600
the 0 0 in 0 and just carry on like that."

00:01:54.600 --> 00:01:59.460
So you want me to put the 0 0 there and then I put C 0 in there?

00:01:59.460 --> 00:02:03.020
I put FF in there and then E E in there?

00:02:03.020 --> 00:02:05.220
Shawn: "Yeah, but I do feel like I'm walking into a trap."

00:02:05.260 --> 00:02:09.720
No, obviously you like to eat your hard-boiled eggs from the big end

00:02:10.539 --> 00:02:11.659
Shawn: "Right."

00:02:11.659 --> 00:02:12.430
Ok.

00:02:12.430 --> 00:02:14.640
There is another way you could it though. You could start

00:02:15.010 --> 00:02:20.640
from the little end and there is a reason why I'm talking about a hard-boiled egg. I haven't completely flipped in this computerphile video.

00:02:20.640 --> 00:02:22.320
We'll come back to that in a minute.

00:02:22.320 --> 00:02:25.120
Let's draw out another set of four memory locations.

00:02:25.160 --> 00:02:30.140
0 1 2 3 &amp; 4. We could also have started from this end

00:02:30.140 --> 00:02:33.420
and put the EE in there, the F F in there

00:02:33.480 --> 00:02:39.180
the C 0 in there, and then the two zeros in there and that would be another way of doing it.

00:02:39.180 --> 00:02:42.500
In actual fact, as long as you're consistent in the way you do it

00:02:42.500 --> 00:02:45.440
and you build a computer knowing that if it's going to read a 32-bit value

00:02:45.440 --> 00:02:51.000
they're going to be in this order or that order or whatever order and it's consistent then your computer system would work.

00:02:51.700 --> 00:02:56.100
What we've done here is we've got two different ways of writing these things out

00:02:56.400 --> 00:03:03.660
and this is basically the issue around endianness is: How does your computer store values that are bigger than 1 byte

00:03:03.920 --> 00:03:08.660
in memory when each memory is made up of 8-bit locations where we can store 8 bits?

00:03:08.660 --> 00:03:13.320
So how do we map say a 32-bit value, a 64-bit value, a 16-bit value

00:03:13.320 --> 00:03:18.020
into those 8-bit locations. And this is where we come back to our friend the egg.

00:03:18.100 --> 00:03:22.760
There's a book published in the 1700s by Jonathan Swift called Gulliver's Travels.

00:03:22.880 --> 00:03:27.980
It's a novel, it's a satire of society. In this novel, Gulliver goes on his travels.

00:03:27.980 --> 00:03:30.540
The first place he goes to is a town called Lilliput.

00:03:30.540 --> 00:03:34.889
Lilliput, everyone's very tiny, but they like to argue about things and apparently - I haven't read the book -

00:03:34.889 --> 00:03:38.420
but apparently at one point civil war breaks out

00:03:38.740 --> 00:03:40.980
over which way do you eat an egg?

00:03:41.440 --> 00:03:48.360
Do you start from the top, the little end, because it's pointy or do you start from the bottom, the big end?

00:03:48.360 --> 00:03:50.190
Half of Lilliput was little-endian.

00:03:50.190 --> 00:03:55.499
They would start from the the pointy end and the other half were big-endian. They would start from the other end.

00:03:55.500 --> 00:03:57.640
So they would sort of smack it down like that

00:03:57.980 --> 00:04:02.000
and start peeling their eggs or hitting it with, uh, probably with a teaspoon and serving it

00:04:02.000 --> 00:04:03.780
and dipping their yolk in there.

00:04:03.780 --> 00:04:06.560
And we've got here the two main types that are used.

00:04:06.570 --> 00:04:12.629
This one is called big-endian and this one is called little-endian.

00:04:12.630 --> 00:04:16.589
And the reason why it's called that is because if we were to write this out as a binary number

00:04:16.720 --> 00:04:22.640
If you've got a hexadecimal number, you can convert each of the hexadecimal digits into four binary digits

00:04:22.640 --> 00:04:24.480
it's relatively easy to write it out.

00:04:24.480 --> 00:04:30.700
So we get 1 1 1 0 for the first E, followed by 1 1 1 0

00:04:30.720 --> 00:04:33.320
going backwards for the second E.

00:04:33.320 --> 00:04:37.840
Then we get 1 1 ... 0 0 and this should be 32 bits there.

00:04:37.840 --> 00:04:41.240
Now each of these bits has a number associated with it.

00:04:41.240 --> 00:04:46.840
So this would be considered bit 0 and this would be considered bit 31.

00:04:46.840 --> 00:04:51.320
And then we can count down, so this is then bit 24. That's bit 23.

00:04:51.520 --> 00:04:53.440
Bit 16 and 15.

00:04:53.440 --> 00:04:56.940
And then that would be the bit 8 and that's bit 7.

00:04:56.940 --> 00:05:00.920
And so this byte, the E E, is what we call the least significant byte

00:05:00.920 --> 00:05:04.100
because it's got the bits with the least numbers on them, the smaller bits.

00:05:04.100 --> 00:05:11.640
And this is the most significant byte because it's got the bits with the higher numbers on: 24-to-31 as opposed to 0-to-7.

00:05:11.640 --> 00:05:16.820
Someone had the big idea that the way to name these things was to reference the egg Wars of Gulliver's Travels

00:05:17.080 --> 00:05:18.759
and to refer to

00:05:18.760 --> 00:05:25.940
systems that started, the sensible way in my opinion, putting the 0 0 then C 0 then F F then EE

00:05:25.980 --> 00:05:29.300
like that in memory, they would be big-endian systems.

00:05:29.300 --> 00:05:32.340
People that started by putting E E at the bottom

00:05:32.440 --> 00:05:36.980
and then F F C 0 0 0 would be called little-endian systems.

00:05:37.270 --> 00:05:43.169
So that's why we call it endianness. It all traces back to eggs of Lilliput in Gulliver's Travels.

00:05:43.330 --> 00:05:48.570
Now you might ask why have two systems at all, why not just standardize on doing it one way or the other?

00:05:48.570 --> 00:05:53.380
Well, as I said, it doesn't make any difference as long as your computer system's consistent

00:05:53.380 --> 00:05:57.240
the people who are writing the software know how it's done, the hardware designers know how it's done

00:05:57.310 --> 00:05:59.969
everything's lined up in the right place and it isn't a problem.

00:06:01.120 --> 00:06:04.540
But there are some advantages to doing it one way over the other.

00:06:04.540 --> 00:06:07.300
So, for example with the big-endian system

00:06:07.300 --> 00:06:10.940
it's what you naturally went for, you naturally went for a big-endian system.

00:06:10.949 --> 00:06:15.809
And so the people who designed some of the IBM mainframes, the PowerPC architecture

00:06:16.240 --> 00:06:20.060
the 68000 chip, and things like the original Macintosh and the Atari ST.

00:06:20.160 --> 00:06:25.220
There all big-endian systems. So when they got a 32-bit value they start in the first address

00:06:25.229 --> 00:06:30.269
they put the most significant byte and then they go down towards the least significant byte.

00:06:30.960 --> 00:06:36.060
On the other hand, the 6502 chip, the ARM chip by default, it can work the other way

00:06:36.060 --> 00:06:41.480
the Intel x86 and the AMD x86 chips, there all little-endian systems, Z80 was as well.

00:06:41.700 --> 00:06:47.460
They will put the least significant byte first in memory, and there is an advantage from that

00:06:47.460 --> 00:06:50.760
because when you're reading it and building the hardware

00:06:50.760 --> 00:06:54.060
it doesn't matter whether you've got a

00:06:54.500 --> 00:06:58.180
16-bit value or a 32-bit value. If we had a 16-bit value

00:06:58.180 --> 00:07:04.260
let us have A B C D, that would be big-endian. And you could also write that

00:07:04.260 --> 00:07:07.900
as C D A B, and then that would be little.

00:07:07.900 --> 00:07:15.560
If it's a little-endian system, the first byte always goes in bits naught-to-7 the second byte always goes into bits 8-to-15

00:07:15.660 --> 00:07:22.000
regardless of whether it's a 2-byte number, a 16-bit number, or a 32-bit number, or a 64-bit number.

00:07:22.000 --> 00:07:27.880
So your hardware's simpler to design. On the other hand, if you're reading the memory in a debugger or something

00:07:27.889 --> 00:07:32.779
it becomes harder and you have to manually rearrange the bytes in your own head.

00:07:32.840 --> 00:07:38.500
There's also another system, which is sometimes referred to as PDP 11 ordering, or mix ordering

00:07:38.580 --> 00:07:42.740
which is when you just sort of really mix it up and start from the middle and go out.

00:07:42.740 --> 00:07:45.799
You can get really weird ordering, but we'll ignore that for now.

00:07:46.400 --> 00:07:50.420
So generally on one system if it's not talking to anything else

00:07:50.420 --> 00:07:53.820
it doesn't matter which endianness you need as long as you know what it is.

00:07:54.720 --> 00:07:57.620
The problem comes is when you have one computer

00:07:57.780 --> 00:08:00.840
communicating with another whether that's over a network

00:08:01.349 --> 00:08:05.269
or whether that's by putting data onto a floppy disk, a USB stick, or something.

00:08:05.430 --> 00:08:08.750
You've then got bytes laid out in something by one machine

00:08:08.750 --> 00:08:11.720
which is being read by another machine and when you do that

00:08:12.060 --> 00:08:17.140
you need to make sure that both machines agree on how the bytes are laid out.

00:08:17.140 --> 00:08:18.000
So for example...

00:08:18.800 --> 00:08:24.580
Networks, when they're transferring data across, they're going to need to agree what order do the bits come in?

00:08:24.590 --> 00:08:28.070
What order do the bytes come in to represent a 32-bit number?

00:08:28.139 --> 00:08:34.129
If they don't agree on a standard and the Internet, for example, is agreed on everything being big-endian, sensible choice

00:08:35.459 --> 00:08:36.630
then

00:08:36.630 --> 00:08:38.300
one machine will send it big-endian

00:08:38.300 --> 00:08:42.979
the other machine will read it little-endian and get completely the wrong number out when they do it.

00:08:42.979 --> 00:08:49.129
So the only time it really matters is when you're transferring data between machines of different types in which case you have to make sure

00:08:49.320 --> 00:08:52.380
that you agree on what standard your using to transfer them.

00:08:52.500 --> 00:08:53.980
Shawn: "Where's that translation happen?"

00:08:54.620 --> 00:08:59.080
So that's a good question. Normally it will happen in the software. Say, for example

00:08:59.760 --> 00:09:03.770
when you write software to communicate over a network using IP

00:09:03.960 --> 00:09:09.829
there's various functions that you will call to take the number, say, for example, your TCP port number

00:09:09.830 --> 00:09:14.720
so like, if you're trying to connect to a web server that's port 80 or port 443 if you've got encryption.

00:09:15.120 --> 00:09:20.220
Rather than just setting the value directly in memory, you run it through a function

00:09:20.220 --> 00:09:23.820
which is called network to host ordering

00:09:23.820 --> 00:09:27.950
or host to network ordering depending on which way you're doing it.

00:09:27.950 --> 00:09:32.220
So if you're setting the port number you'd use this one, if you're reading it from a network packet you'd use that one

00:09:32.220 --> 00:09:34.400
and that will do the conversion for you, if needed.

00:09:34.400 --> 00:09:40.639
So that thing will be defined on, say, an Intel system to convert from little-endian to big-endian.

00:09:41.550 --> 00:09:47.089
But on a Motorola system using a 68000, which is natively big-endian, it will just do nothing and copy the values.

00:09:47.340 --> 00:09:49.340
Shawn: "Does it slow things down?"

00:09:49.480 --> 00:09:52.400
Um, yes, a bit.

00:09:53.100 --> 00:09:55.459
So, for example, you have to

00:09:56.040 --> 00:09:59.520
read the bytes individually and then shuffle them around in memory

00:09:59.520 --> 00:10:04.540
in actual fact modern CPUs, modern ARM chips, modern Intel chips have

00:10:04.920 --> 00:10:10.740
instructions that can move big-endian numbers even though they're natively little-endian. And at that point it's done as fast as possible.

00:10:11.490 --> 00:10:16.129
These days, with the clock speeds you're dealing with, the slowdown won't be noticeable because you're not doing it that often.

00:10:16.300 --> 00:10:20.780
It's... you set one value in a port number when you create the socket.

00:10:20.780 --> 00:10:23.360
The rest of the transmission probably is in ASCII, anyway

00:10:23.360 --> 00:10:26.880
so you never need to convert anything so it's not gonna make that much of a difference.

00:10:27.540 --> 00:10:31.520
If I write down 0 0 1 0

00:10:31.520 --> 00:10:35.100
that represents a 2 in its simplest form. That is what

00:10:35.580 --> 00:10:42.860
binary coded decimal is and you just use them in 4-bit nibbles. Now. We all know a nibble is half a byte.

00:10:42.860 --> 00:10:45.720
A byte equals eight...

