WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:14.518
IAN FETTE: Thank you all very
much for coming to the Google

00:00:14.518 --> 00:00:15.818
Chrome Fireside Chat.

00:00:16.178 --> 00:00:17.058
My name's Ian Fette.

00:00:17.058 --> 00:00:21.358
I am a product manager on
Google Chrome, and I'd like

00:00:21.358 --> 00:00:23.878
to introduce everyone
else up here on stage.

00:00:24.398 --> 00:00:28.438
We've got Alex Russell, one at
the software engineers on the

00:00:28.438 --> 00:00:31.540
Google Chrome team, Brian
Rakowski, director of Product

00:00:31.540 --> 00:00:35.180
Management for Google Chrome,
and Erik Kay, also a

00:00:35.180 --> 00:00:37.040
software engineer on the
Google Chrome team.

00:00:38.180 --> 00:00:41.360
I'd think we'd like to keep
this sort of informal.

00:00:41.420 --> 00:00:45.980
I'm a big fan of just
Q&amp;A style sessions.

00:00:45.980 --> 00:00:47.420
So there's a mike in the
middle of the room.

00:00:47.420 --> 00:00:51.160
If you have any questions for
the panel, or for any of us,

00:00:51.160 --> 00:00:53.980
please come up to the mike
in the middle of the

00:00:53.980 --> 00:01:03.820
room and ask away.
16
00:01:03,82 --&gt; 00:01:03,06
[UNINTELLIGIBLE QUESTION]

00:01:03.060 --> 00:01:03.540
IAN FETTE:

00:01:03.540 --> 00:01:05.260
Will we accept shouted
questions from the sardines

00:01:05.260 --> 00:01:07.900
in the middle of rows?

00:01:07.900 --> 00:01:12.480
Yes, but if someone is at the
mike, they will get priority.

00:01:12.480 --> 00:01:18.480
That was easy, thank you.

00:01:18.480 --> 00:01:19.360
AUDIENCE: I'm at the mike.

00:01:19.360 --> 00:01:22.980
I'm gonna try and phrase this
statement as a question.

00:01:22.980 --> 00:01:26.260
Today you announced the
Google Chrome App Store.

00:01:26.620 --> 00:01:28.180
In the same conversation,
almost the same breath as

00:01:28.180 --> 00:01:32.000
talking about all the openness
and that, can you connect

00:01:32.000 --> 00:01:34.880
those two in an open way?

00:01:34.880 --> 00:01:36.180
ERIK KAY: Sure.

00:01:36.180 --> 00:01:37.460
I'll take a stab at this.

00:01:37.460 --> 00:01:42.668
So think about the web
apps that are gonna

00:01:42.668 --> 00:01:44.000
be on the web store.

00:01:44.000 --> 00:01:46.060
They're really just web apps.

00:01:46.060 --> 00:01:47.840
They're the same web apps.

00:01:47.840 --> 00:01:50.920
The only difference is that
we're providing a little bit of

00:01:50.920 --> 00:01:55.980
glue, a little bit of metadata
to describe those apps.

00:01:55.980 --> 00:01:59.940
So existing web app runs on any
modern browser, tack on a

00:01:59.940 --> 00:02:02.980
little bit of metadata that
allows it to run a little bit

00:02:02.980 --> 00:02:06.280
nicer in the browser, that
allows the listing to show up

00:02:06.280 --> 00:02:09.258
in the store, that's all.

00:02:09.258 --> 00:02:12.458
AUDIENCE: When I buy an app,
where does the permission model

00:02:12.458 --> 00:02:14.898
key into that and how does it
-- like is that -- is it

00:02:14.898 --> 00:02:17.738
locking it into Chrome or if
I'm running Chrome and

00:02:17.738 --> 00:02:19.298
I'm also running--

00:02:19.298 --> 00:02:19.478
ERIK KAY: No, definitely not.

00:02:19.478 --> 00:02:20.438
AUDIENCE: --Safari, I could
also run the same app?

00:02:20.438 --> 00:02:25.278
ERIK KAY: So, if you want to
sell web apps, the thing that

00:02:25.278 --> 00:02:27.860
you're using there will be
our backend license server.

00:02:27.860 --> 00:02:33.338
So at that point, this is again
web app talking to web server,

00:02:33.338 --> 00:02:42.318
and so that technology should
run, you know, on any browser.

00:02:42.318 --> 00:02:42.604
AUDIENCE: OK, thanks.

00:02:42.778 --> 00:02:43.798
IAN FETTE: Open
mike at the floor.

00:02:43.798 --> 00:02:44.918
Please step on up.

00:02:44.338 --> 00:03:03.058
Don't be shy.

00:03:03.058 --> 00:03:03.398
[UNINTELLIGIBLE QUESTION]

00:03:03.398 --> 00:03:03.838
ERIK KAY: Sure.

00:03:03.838 --> 00:03:05.918
Let me repeat the
question since it was

00:03:05.918 --> 00:03:08.998
a shouted question.

00:03:08.998 --> 00:03:12.458
The question is, well, if you
went to check it out today, you

00:03:12.458 --> 00:03:16.378
can only try it out on Windows,
and that kind of sucks for

00:03:16.378 --> 00:03:19.978
everybody using Mac or Linux,
and yes, we're sorry.

00:03:20.438 --> 00:03:23.698
So let me give you a little
bit of rationale for

00:03:23.698 --> 00:03:26.018
why it is this way.

00:03:26.018 --> 00:03:28.840
You know, Chrome, being an
open-source project is

00:03:28.840 --> 00:03:30.958
a blessing and a curse.

00:03:31.338 --> 00:03:36.478
So the blessing part of that is
that from your guys

00:03:36.478 --> 00:03:39.338
perspective, hopefully, is that
you get to see stuff

00:03:39.338 --> 00:03:40.178
really early on.

00:03:40.178 --> 00:03:43.060
We don't really get to keep
secrets for very long because

00:03:43.060 --> 00:03:45.740
anyone-- we have reporters who
are literally monitoring

00:03:45.740 --> 00:03:47.698
are source checkins.

00:03:47.698 --> 00:03:52.018
So basically, you know, people
are going to figure this out

00:03:52.018 --> 00:03:53.278
before too long here anyway.

00:03:53.958 --> 00:03:57.938
So what you're catching us is
in the stage where we're still

00:03:57.938 --> 00:04:00.198
iterating on the UI and still
trying to make decisions.

00:04:00.198 --> 00:04:05.080
Now typically in the
development cycle, we do our

00:04:05.080 --> 00:04:07.860
prototyping on one platform,
and it depends on the team,

00:04:07.860 --> 00:04:10.338
depends on what they're doing
most of their development on.

00:04:10.338 --> 00:04:14.078
But since we're making lots of
changes and lots of stuff, it

00:04:14.078 --> 00:04:16.478
doesn't make sense to do that
three times until we're a

00:04:16.478 --> 00:04:19.960
little bit closer to being
for sure this is it.

00:04:19.960 --> 00:04:22.100
We do have some early
work happening on Mac.

00:04:22.100 --> 00:04:24.720
I think we're not that far away
from being able to have people

00:04:24.720 --> 00:04:28.390
play with it on Mac, but it
just doesn't make sense for

00:04:28.390 --> 00:04:29.120
us to do it all together.

00:04:29.120 --> 00:04:33.700
But our plan is to have a
developer preview for all

00:04:33.700 --> 00:04:34.060
platforms later this summer.

00:04:34.060 --> 00:04:37.638
So anyway, you can hear
more details about

00:04:37.638 --> 00:04:38.138
some of this stuff.

00:04:39.600 --> 00:04:46.698
There's a session tomorrow
going into more detail.

00:04:46.698 --> 00:04:47.680
IAN FETTE: Next question.

00:04:47.680 --> 00:04:51.860
AUDIENCE: I was noticing that
on the schedule, it says this

00:04:51.860 --> 00:04:54.820
is a Fireside Chat with like
Google Chrome and

00:04:54.820 --> 00:04:54.860
Chrome OS team.

00:04:54.860 --> 00:04:57.858
Are we clear to ask
Chrome OS questions?

00:04:57.858 --> 00:04:58.058
Can you guys answer those?

00:04:58.058 --> 00:04:59.100
BRIAN RAKOWSKI: We actually
don't have anyone from

00:04:59.100 --> 00:05:00.600
the Chrome OS team here.

00:05:00.600 --> 00:05:05.138
We have people all representing
Chrome here so you're

00:05:05.138 --> 00:05:05.958
welcome to ask questions.

00:05:05.958 --> 00:05:07.958
We may not give you very
interesting answers.

00:05:07.958 --> 00:05:08.180
AUDIENCE: OK, sure.

00:05:08.180 --> 00:05:10.140
Yeah, then I'll still
ask my question.

00:05:10.140 --> 00:05:13.560
Just first of all, what is kind
of the status of Chrome OS?

00:05:13.560 --> 00:05:15.200
I know there's been
some -- I've heard a

00:05:15.200 --> 00:05:15.480
little bit about it.

00:05:15.480 --> 00:05:16.940
I haven't heard too much buzz.

00:05:16.940 --> 00:05:18.660
I was actually kind of
expecting to hear more today,

00:05:18.660 --> 00:05:21.280
especially with kind of the --
there's been these massive

00:05:21.280 --> 00:05:25.620
overtones of HTML5 and the
Chrome web app store, and now

00:05:25.620 --> 00:05:28.660
it just came from the NaCl
session with running native

00:05:28.660 --> 00:05:30.400
code in Chrome, and
that all sounds great.

00:05:30.400 --> 00:05:32.740
And is all that going to
be kind of incorporated

00:05:32.740 --> 00:05:33.758
into Chrome OS?

00:05:33.758 --> 00:05:36.540
And the other question I guess
I would have is what's kind

00:05:36.540 --> 00:05:37.638
of the time line on that.

00:05:37.638 --> 00:05:40.000
I know Notion Inc. is coming
out with their Adam tablet

00:05:40.000 --> 00:05:42.058
they claim can run Chrome OS.

00:05:42.058 --> 00:05:45.160
And I think it was Acer or Asus
who is supposed to come out

00:05:45.160 --> 00:05:47.600
with a netbook that
can run Chrome OS.

00:05:47.638 --> 00:05:50.958
Just what's the -- and maybe
you guys don't even know the

00:05:50.958 --> 00:05:53.498
answer to those questions, but
just to put them out there.

00:05:53.498 --> 00:05:56.600
BRIAN RAKOWSKI: Yeah, I
can give a quick answer.

00:05:56.600 --> 00:05:59.738
So in terms of the progress and
the status update on Chrome

00:05:59.738 --> 00:06:01.158
OS, the team is continuing to
make really good progress.

00:06:01.158 --> 00:06:03.860
It's all happening in
the open source, like

00:06:03.860 --> 00:06:04.198
the rest of Chrome.

00:06:04.198 --> 00:06:07.618
So there's no secrets there
and everybody can check

00:06:07.618 --> 00:06:09.800
and see what's happening.

00:06:09.800 --> 00:06:11.160
We don't have a lot of new
things to announce right now.

00:06:11.160 --> 00:06:13.600
We're focusing what we're
talking about on the stuff that

00:06:13.600 --> 00:06:15.640
people can play with as
developers unless, of course,

00:06:15.640 --> 00:06:19.398
you want to plug in to the
Chrome OS development itself in

00:06:19.398 --> 00:06:20.318
the open-source project.

00:06:20.920 --> 00:06:23.458
In terms of the schedule, I
think things are moving along.

00:06:24.180 --> 00:06:27.658
We don't have any announcements
in terms of products that are

00:06:27.658 --> 00:06:29.260
going to be shipping with
Chrome OS, but as you know,

00:06:29.260 --> 00:06:32.338
there's lots of people who are
downloading the source,

00:06:32.338 --> 00:06:34.278
compiling it and sticking it on
Netbook, so people are playing

00:06:34.278 --> 00:06:35.818
with it that way, but I
certainly don't recommend

00:06:35.818 --> 00:06:36.138
doing that as a user.

00:06:37.660 --> 00:06:40.318
But as a developer, we're
very excited to see all

00:06:40.318 --> 00:06:41.220
the momentum around it.

00:06:41.220 --> 00:06:42.860
So it's still very important.

00:06:42.860 --> 00:06:44.260
We're still chugging
along on it.

00:06:44.260 --> 00:06:47.980
It's not forgotten or
something like that.

00:06:47.980 --> 00:06:49.740
It's just not much to talk
about yet right now.

00:06:49.740 --> 00:06:52.640
IAN FETTE: And part of your
question was around the

00:06:52.640 --> 00:06:55.180
native client session,
around the web story.

00:06:55.740 --> 00:06:58.278
We're working very hard to make
sure that everything we do in

00:06:58.278 --> 00:07:01.560
Chrome benefits Chrome
OS and vice versa.

00:07:01.560 --> 00:07:05.540
So you see UI concepts that are
first prototype on Chrome OS

00:07:05.540 --> 00:07:07.938
making their way into Chrome
where it makes sense.

00:07:07.938 --> 00:07:10.600
All the work that we're doing
in Chrome like native client,

00:07:10.600 --> 00:07:13.400
the web store, all of
that is available, in

00:07:13.400 --> 00:07:13.740
Chrome OS as well.

00:07:13.740 --> 00:07:17.360
So we're trying to make sure
that innovations that happen

00:07:17.360 --> 00:07:20.500
on either side of the product
make it all the way around

00:07:20.500 --> 00:07:21.640
when that makes sense.

00:07:22.560 --> 00:07:24.440
And for native client
and the web store, that

00:07:24.440 --> 00:07:29.918
definitely makes sense.

00:07:29.918 --> 00:07:30.278
AUDIENCE: Thank you.

00:07:30.278 --> 00:07:33.578
AUDIENCE: As an enterprise
customer for apps with about

00:07:33.578 --> 00:07:34.398
17,000 seats, we're trying
to move away from--

00:07:34.398 --> 00:07:35.740
ERIK KAY: Could you
step up to the mike?

00:07:35.740 --> 00:07:36.844
AUDIENCE: Sorry, yeah.

00:07:37.898 --> 00:07:40.738
I'm an enterprise apps customer
with about 17,000 users.

00:07:40.738 --> 00:07:43.838
We're trying to move away from
IE6 and we'd like to take

00:07:43.838 --> 00:07:46.258
Chrome seriously, but without
things like group policy

00:07:46.258 --> 00:07:48.878
controls and being able to
create custom packages,

00:07:48.878 --> 00:07:50.018
we can't really do that.

00:07:50.018 --> 00:07:52.518
Is there anything in the works?

00:07:52.518 --> 00:07:53.568
ALEX RUSSELL: Yeah.

00:07:53.568 --> 00:07:57.738
So there is a series of group
policy controls for Omaha,

00:07:57.738 --> 00:08:00.948
which is the auto update
system, which will today allow

00:08:00.948 --> 00:08:03.278
you to configure when and how
Google Chrome is updated.

00:08:03.860 --> 00:08:06.420
So for those of you who
don't know, Google Chrome

00:08:06.420 --> 00:08:08.420
continuously auto-updates
in the background.

00:08:08.420 --> 00:08:10.740
So every time we push a new
revision, it's out to 90-plus

00:08:10.740 --> 00:08:14.878
percent of the user base, you
know, in months, not years.

00:08:14.878 --> 00:08:18.698
So you, as an administrator,
can choose to today, through

00:08:18.698 --> 00:08:20.838
that group policy template,
configure when those updates

00:08:20.838 --> 00:08:22.584
come down so you can lock it.

00:08:23.578 --> 00:08:26.778
And as another potential option
for you, I work on a product

00:08:26.778 --> 00:08:29.820
called Chrome Frame, which
allows you to run Google's

00:08:29.820 --> 00:08:32.860
Chrome rendering
engine inside of IE6.

00:08:32.860 --> 00:08:33.740
So in case you have
applications inside your

00:08:33.740 --> 00:08:36.640
firewall but can't move just
yet, you may not have to run

00:08:36.640 --> 00:08:37.100
browsers side by side.

00:08:37.100 --> 00:08:39.320
IAN FETTE: We also have a group
of engineers that are working

00:08:39.320 --> 00:08:43.178
on making more of the Google
Chrome settings configurable

00:08:43.178 --> 00:08:45.740
via group policy.

00:08:45.200 --> 00:08:48.980
Some of those you'll see start
to role out in Chrome 6.

00:08:49.080 --> 00:08:56.820
So that's also ongoing work.

00:08:56.820 --> 00:08:59.280
AUDIENCE: So before joining
Mozilla, I was interested in

00:08:59.280 --> 00:09:03.530
the auto-detection of
extensions and web apps like

00:09:03.530 --> 00:09:06.800
that on the web in
a way that's open.

00:09:06.800 --> 00:09:08.984
Recently, there was a post on
Mozilla apps -- I don't know if

00:09:08.984 --> 00:09:13.120
any of you caught it -- about
indexing extensions and apps.

00:09:13.120 --> 00:09:15.378
And I was just wondering,
I would love to get

00:09:15.378 --> 00:09:16.840
your guys' feedback.

00:09:16.058 --> 00:09:19.040
We didn't really hear anything
from any other browser

00:09:19.040 --> 00:09:20.780
vendors, but we're going
to start exploring it.

00:09:20.780 --> 00:09:23.040
So do you guys think
that that's something

00:09:23.040 --> 00:09:23.940
you'd want to pursue?

00:09:23.940 --> 00:09:27.980
Like an HTML, sort of like, I
know there's pseudo-standards

00:09:27.980 --> 00:09:31.840
and metatags and stuff like
that, but go that direction?

00:09:31.840 --> 00:09:32.960
ERIK KAY: Yeah, this is
definitely something we're

00:09:32.960 --> 00:09:36.820
exploring, and you know, I
don't think we have anything

00:09:36.820 --> 00:09:38.720
really specific to share,
but there's sort of two

00:09:38.720 --> 00:09:40.020
ways you can look at.

00:09:40.020 --> 00:09:45.380
So one is discovery on the
pages that are -- directly

00:09:45.380 --> 00:09:46.918
are the app, right?

00:09:46.918 --> 00:09:51.320
Saying oh, I am a web app or
I have a related extension,

00:09:51.320 --> 00:09:52.900
that sort of metadata.

00:09:53.080 --> 00:09:58.660
The other thing, to be honest,
is that, you know, all the

00:09:58.660 --> 00:10:03.298
different galleries and stores
that are out there actually

00:10:03.298 --> 00:10:05.720
contribute a lot to search and
discoverability that

00:10:05.720 --> 00:10:07.720
are out there.

00:10:07.720 --> 00:10:12.120
AMO for Firefox gets
crawled, all of its pages.

00:10:12.120 --> 00:10:15.720
If you know you want to look
for a Firefox extension that

00:10:15.720 --> 00:10:18.860
does X, Y, Z, you know it's
really easy to search in any

00:10:18.860 --> 00:10:20.200
search engine and find
it, and the same with

00:10:20.200 --> 00:10:22.920
Chrome extensions.

00:10:22.920 --> 00:10:28.210
But I think that -- so I think
that part is already in pretty

00:10:28.210 --> 00:10:31.778
good shape, but I think we
should keep pushing on that,

00:10:31.778 --> 00:10:36.800
that having curated directories
with reviews and rankings in

00:10:36.800 --> 00:10:38.160
popularity, these are
all things that help

00:10:38.160 --> 00:10:40.540
make search better.

00:10:40.540 --> 00:10:43.300
But as far as discovery on the
web, we think that's important

00:10:43.300 --> 00:10:47.898
to -- the reason why that is
important is to sort of help

00:10:47.898 --> 00:10:51.140
people have more accidental
discoveries, connected things

00:10:51.140 --> 00:10:54.440
to the things they typically
do, and I think there are a

00:10:54.440 --> 00:10:56.918
number of different approaches
to that aside from just

00:10:56.918 --> 00:10:57.700
the metadata thing.

00:10:57.700 --> 00:11:00.600
But I don't think we have
anything concrete to

00:11:00.600 --> 00:11:01.350
share at this stage.

00:11:08.700 --> 00:11:10.740
IAN FETTE: The microphone
is open if anyone has

00:11:10.740 --> 00:11:18.660
questions, or feel free
to just shout it out.
240
00:11:18,66 --&gt; 00:11:18
[UNINTELLIGIBLE QUESTION]

00:11:18.000 --> 00:11:19.240
IAN FETTE: Erik, what's
the payment mechanism

00:11:19.240 --> 00:11:21.500
for the web store?

00:11:21.500 --> 00:11:22.620
ERIK KAY: I'm a
popular guy today.

00:11:24.380 --> 00:11:25.760
Well, that's a good question.

00:11:26.180 --> 00:11:28.620
We're going to be using
Google checkout, primarily.

00:11:29.580 --> 00:11:34.980
We're -- I think beyond that,
we don't have a lot to share.

00:11:36.620 --> 00:11:42.320
It's something that we
understand that basically today

00:11:42.320 --> 00:11:47.760
on the web, you can already
sell things, and so we have to

00:11:47.760 --> 00:11:49.360
compete with what's
already out there.

00:11:49.360 --> 00:11:52.780
So it's our intent to try to
make a really smooth experience

00:11:52.780 --> 00:11:58.820
for developers and end users,
and so this is, you know, a

00:11:58.820 --> 00:12:00.960
challenging thing to do for
anybody, as anybody who's

00:12:00.960 --> 00:12:02.620
been involved in payment
systems before knows.

00:12:03.678 --> 00:12:07.326
But we're intending to be
has broad and deep as

00:12:07.326 --> 00:12:12.920
we can on that front.

00:12:12.920 --> 00:12:13.240
[UNINTELLIGIBLE QUESTION]

00:12:13.240 --> 00:12:17.140
ERIK KAY: As I said before,
you're catching us pretty

00:12:17.140 --> 00:12:19.840
early -- I'm sorry, I should
repeat the questions.

00:12:20.400 --> 00:12:23.400
So the question was, what's
the revshare model for

00:12:23.400 --> 00:12:24.620
the web store, I imagine.

00:12:25.980 --> 00:12:28.880
So you're catching us pretty
early in -- in the process here

00:12:28.880 --> 00:12:31.798
because, you know, like I said,
the open-source nature, and

00:12:31.798 --> 00:12:35.680
some of the concrete business
details like that, we have

00:12:35.680 --> 00:12:39.020
ideas for it, we're working
through that, but we don't have

00:12:39.020 --> 00:12:43.440
anything definitive
to share yet.

00:12:43.440 --> 00:12:46.680
AUDIENCE: Hi, what challenges
do you have the developers --

00:12:46.680 --> 00:12:50.500
as developers that we wouldn't
think you would have?

00:12:50.500 --> 00:12:51.360
I mean, obviously, one of
them, is everyone looking

00:12:51.360 --> 00:12:56.040
at every checking you do?

00:12:56.040 --> 00:12:58.272
ALEX RUSSELL: We have to
write in C plus plus.

00:12:58.272 --> 00:13:00.500
[LAUGHTER]

00:13:00.500 --> 00:13:03.600
IAN FETTE: I think from my
perspective -- I should caveat

00:13:03.600 --> 00:13:07.560
this -- I manage the group
that's working on all the HTML5

00:13:07.560 --> 00:13:10.860
APIs in the web platform -- I
think a lot of people have this

00:13:10.860 --> 00:13:15.340
notion that now that Google has
a web browser and a bunch of

00:13:15.340 --> 00:13:19.020
web applications that it can
just sort of go off and do

00:13:19.020 --> 00:13:22.600
whatever it wants to do, and it
turns out that things are a

00:13:22.600 --> 00:13:24.500
lot more nuanced than that.

00:13:25.900 --> 00:13:28.880
We work very hard to make sure
that the APIs that we develop

00:13:28.880 --> 00:13:33.460
give a lot of power to web
application authors, not just

00:13:33.460 --> 00:13:36.300
at Google, but across the web
as a whole, and so we have to

00:13:36.300 --> 00:13:41.400
do a lot of work to think what
is the right API for the web,

00:13:41.400 --> 00:13:44.640
not just for Google, but
for all web authors.

00:13:44.640 --> 00:13:46.740
We have to think about how
does this fit in with

00:13:46.740 --> 00:13:47.140
other web standards.

00:13:47.500 --> 00:13:50.200
We've spent a lot of time in
standards bodies, and while we

00:13:50.200 --> 00:13:54.740
don't constrain ourselves, we
don't require full buy-in

00:13:54.740 --> 00:13:56.360
before we do anything,
before we innovate.

00:13:57.800 --> 00:14:00.858
It's certainly not the case
that we just go off and do

00:14:00.858 --> 00:14:03.758
whatever it is that we want to
do without any consideration

00:14:03.758 --> 00:14:07.140
for web standards, web
communities, other developers.

00:14:07.140 --> 00:14:11.680
So I think that's something
that takes a lot more time and

00:14:11.680 --> 00:14:13.680
effort than most people would
expect, but in the long run, I

00:14:13.680 --> 00:14:16.120
think it's well worth
it for us to do that.

00:14:16.120 --> 00:14:20.580
ERIK KAY: So I think the thing
that maybe people who are

00:14:20.580 --> 00:14:24.220
developers, who have developed
client code before, might

00:14:24.220 --> 00:14:27.680
appreciate that I think is the
thing I'm probably most proud

00:14:27.680 --> 00:14:29.920
of that the Chrome team has
done is kind of something sort

00:14:29.920 --> 00:14:34.700
of deep and esoteric, which is
that we release from the

00:14:34.700 --> 00:14:37.780
trunk, you know, every
week, basically.

00:14:37.780 --> 00:14:40.820
So what that means is we're
pushing out a new client build,

00:14:40.820 --> 00:14:43.100
you know, from, you know,
from the tip of tree.

00:14:43.100 --> 00:14:45.840
There are no private branches.

00:14:45.840 --> 00:14:50.200
There's no large efforts
going on that people aren't

00:14:50.200 --> 00:14:52.000
seeing that aren't getting
pushed out immediately.

00:14:52.000 --> 00:14:56.058
And the fact that we're having
to do that every week means

00:14:56.058 --> 00:14:59.100
that we have a lot of
responsibility to not regress,

00:14:59.100 --> 00:15:03.100
to not introduce new
performance regressions, to not

00:15:03.100 --> 00:15:07.240
break compatibility for some
large number of sites, for not

00:15:07.240 --> 00:15:10.260
really messing things up
when we add some new

00:15:10.260 --> 00:15:11.640
experimental feature.

00:15:11.640 --> 00:15:16.138
And for all the web developers
in the room, you're used to

00:15:16.138 --> 00:15:18.760
this, that this is something
you have to do that

00:15:18.760 --> 00:15:19.460
all the time.

00:15:19.460 --> 00:15:20.426
In C

00:15:21.120 --> 00:15:25.400
land and integrating with OS's
and all of that, this is

00:15:25.400 --> 00:15:27.840
something that I think has
really never really been done

00:15:27.840 --> 00:15:30.040
before, and it's partly because
of our auto-update mechanisms,

00:15:30.040 --> 00:15:34.880
but also partly because of our
development practices and

00:15:34.880 --> 00:15:35.000
engineering philosophy.

00:15:35.520 --> 00:15:38.580
But as a result, it winds up
being quite challenging.

00:15:38.580 --> 00:15:42.120
You check something, in, if you
break something, your change

00:15:42.120 --> 00:15:44.820
will get reverted immediately.

00:15:44.820 --> 00:15:46.600
So there's people, and
people will give you

00:15:46.600 --> 00:15:47.720
a hard time about it.

00:15:47.720 --> 00:15:50.212
And so you have to be very
careful, and your code has

00:15:50.212 --> 00:15:52.110
to be very well tested
before it lands.

00:15:58.240 --> 00:15:59.560
ALEX RUSSELL: Just to Ian's
point, just to elaborate

00:15:59.560 --> 00:15:59.818
a little bit more.

00:16:00.238 --> 00:16:04.740
We take that responsibility for
innovating out in front and

00:16:04.740 --> 00:16:07.180
then cleaning up the mess, if
we don't get it right, very

00:16:07.180 --> 00:16:11.840
seriously, and that's caused us
to do a lot of work in the last

00:16:11.840 --> 00:16:16.180
year, particularly around
features like databases where

00:16:16.180 --> 00:16:18.220
we tried something and it
changed the discussion

00:16:18.220 --> 00:16:19.560
and that's great.

00:16:19.560 --> 00:16:22.820
And we're excited about the way
people are thinking about it

00:16:22.820 --> 00:16:24.398
now, but it does mean that we
have to go back and do a bunch

00:16:24.398 --> 00:16:26.138
more work to make sure that
when the standard does come

00:16:26.138 --> 00:16:29.018
down the pike, we get it right,
and we go and we do the work to

00:16:29.018 --> 00:16:32.138
make sure that we are standards
compliant as well as

00:16:32.138 --> 00:16:32.820
simply innovative.

00:16:32.820 --> 00:16:34.558
IAN FETTE: And we've done that
with -- you can actually see

00:16:34.558 --> 00:16:37.520
a number of products
that exemplify that.

00:16:37.520 --> 00:16:42.240
For example, with Gears, we
were really out there trying to

00:16:42.240 --> 00:16:46.260
innovate and give offline
access and offline data storage

00:16:46.260 --> 00:16:49.040
capabilities to applications,
and it was a great thing

00:16:49.040 --> 00:16:50.360
for Google to do.

00:16:50.360 --> 00:16:51.400
It was a great success.

00:16:51.400 --> 00:16:54.920
It showed that these APIs are
actually worthwhile, and now

00:16:54.920 --> 00:16:59.100
there's a standard for how you
do it offline applications and

00:16:59.100 --> 00:17:02.920
how you do offline data storage
and so now we're implementing

00:17:02.920 --> 00:17:03.200
those standards.

00:17:03.200 --> 00:17:05.640
Same thing with 3D graphics.

00:17:05.640 --> 00:17:12.420
We put out O3D as an example
for the need for rich graphics

00:17:12.420 --> 00:17:15.880
capabilities in the web
browser, and now we -- most of

00:17:15.880 --> 00:17:18.300
the -- Firefox and others, are
collaborating on a spec called

00:17:18.300 --> 00:17:22.418
WebGL to give 3D graphics
capabilities to browsers.

00:17:22.418 --> 00:17:27.320
So we've deprecated O3D as the
product in favor of WebGL So we

00:17:27.320 --> 00:17:33.060
are committed to standards and
to making sure that when we do

00:17:33.060 --> 00:17:35.340
something, we do it in a way
that's good for the web.

00:17:35.340 --> 00:17:38.520
We take in feedback from web
community to help build up a

00:17:38.520 --> 00:17:44.840
standard and then we support
that standard going forward.

00:17:44.840 --> 00:17:46.980
AUDIENCE: Yes, so this is
related to all of that.

00:17:46.980 --> 00:17:52.260
One thing you didn't mention is
web sockets, and that protocol

00:17:52.260 --> 00:17:56.180
is kind of -- by Mozilla said
they wouldn't push it at least

00:17:56.180 --> 00:18:00.140
until there's a little bit more
standardization around,

00:18:00.140 --> 00:18:02.640
that sort of API.

00:18:02.640 --> 00:18:03.020
I wonder what the
status of that is.

00:18:03.020 --> 00:18:07.240
If you guys are planning
to sort of solidify that?

00:18:07.240 --> 00:18:07.920
Just talk about it a little?

00:18:07.920 --> 00:18:08.760
IAN FETTE: Sure.

00:18:08.760 --> 00:18:09.220
So I can definitely
speak to web sockets.

00:18:09.220 --> 00:18:13.400
I can't speak to Mozilla's
shipping plans because I don't

00:18:13.400 --> 00:18:16.520
represent Mozilla, but suffice
to say that we've had a number

00:18:16.520 --> 00:18:18.940
of lunches over beer
with Mozilla to talk

00:18:18.940 --> 00:18:19.860
about web sockets.

00:18:20.140 --> 00:18:22.940
There was a lot of beer.

00:18:22.940 --> 00:18:25.860
In terms of the web sockets,
API itself, it's somewhat

00:18:25.860 --> 00:18:27.720
interesting in that it
started off in the

00:18:27.720 --> 00:18:29.580
WHATWG working group.

00:18:29.580 --> 00:18:33.000
So Hixie wrote the first draft,
recognizing the need to have

00:18:33.000 --> 00:18:35.720
bidirectional communications
between a client

00:18:35.720 --> 00:18:37.358
app and a server.

00:18:37.358 --> 00:18:40.598
So for those of you who aren't
familiar with web sockets,

00:18:40.598 --> 00:18:45.420
today you can use hanging GET
requests and a bunch of posts

00:18:45.420 --> 00:18:49.380
to effectively have
bidirectional communication

00:18:49.380 --> 00:18:50.778
from your web app
to the server.

00:18:50.778 --> 00:18:52.400
This has a number
of down sides.

00:18:52.400 --> 00:18:54.900
Namely, each time you send
something to the server,

00:18:54.900 --> 00:18:57.520
you have to send
all of the headers.

00:18:57.520 --> 00:19:00.260
So if you want to send a
one-character update, saying

00:19:00.260 --> 00:19:02.750
the user just pressed
"a," that can blow

00:19:02.750 --> 00:19:03.680
up to easily a kilobyte.

00:19:03.680 --> 00:19:08.420
A web socket is designed to
provide a long-lived connection

00:19:08.420 --> 00:19:11.720
that's bidirectional so either
the app or the server can send

00:19:11.720 --> 00:19:14.420
data, and there's a small
amount of framing around that

00:19:14.420 --> 00:19:17.880
data, but you don't have
all the headers each time.

00:19:17.880 --> 00:19:21.098
So this work that started off
from WHATWG is now split

00:19:21.098 --> 00:19:24.598
between WHATWG, W3C and IETF.

00:19:25.858 --> 00:19:32.400
IETF is now contributing in
terms of the actual protocol,

00:19:32.400 --> 00:19:36.600
the wire format, how the data
appears on the network, and

00:19:36.600 --> 00:19:38.880
there's a lot of changes
being made right now.

00:19:39.120 --> 00:19:43.500
At Google, since we do have
this frequent-release cycle

00:19:43.500 --> 00:19:45.640
with Google Chrome where we're
shipping a new build every week

00:19:45.640 --> 00:19:50.260
to the Dev channel, we are
trying to stay on the tip of

00:19:50.260 --> 00:19:52.020
tree of that specification.

00:19:52.020 --> 00:19:55.240
So we're in the process right
now of implementing Draft

00:19:55.240 --> 00:19:57.360
76 for web sockets.

00:19:57.360 --> 00:19:59.320
We're going to ship that.

00:19:59.320 --> 00:20:03.380
We already shipped Draft 75 in
a previous version of Chrome,

00:20:03.380 --> 00:20:06.960
and we think that web sockets
right now is at that point

00:20:06.960 --> 00:20:09.660
where there's not enough people
using it right now that we're

00:20:09.660 --> 00:20:11.980
worried about shipping
breaking changes.

00:20:12.020 --> 00:20:16.340
So we are staying on the
tip of that specification

00:20:16.340 --> 00:20:18.820
and continuing to ship
the latest version.

00:20:18.820 --> 00:20:23.500
Obviously, we'd like to see it
solidify, but we don't see

00:20:23.500 --> 00:20:24.720
it as a problem as of yet.

00:20:24.720 --> 00:20:28.180
So we're going to continue to
contribute to the protocol

00:20:28.180 --> 00:20:30.680
development and ship a
client based on the latest

00:20:30.680 --> 00:20:32.800
version of the protocol.

00:20:38.700 --> 00:20:43.240
AUDIENCE: So, related to that
last answer, I know that Google

00:20:43.240 --> 00:20:47.068
has also been having some
efforts to try to speed up the

00:20:47.068 --> 00:20:51.420
rate of communication to get
around the HTTP protocol.

00:20:51.420 --> 00:20:55.240
This web socket solution, will
that be able to embrace that

00:20:55.240 --> 00:20:58.098
solution that Google has been
proposing that will double the

00:20:58.098 --> 00:21:00.900
speed, I think or so, as
has been talked about?

00:21:00.900 --> 00:21:03.338
IAN FETTE: Yes, I believe what
you're referring to is called

00:21:03.338 --> 00:21:08.640
Speedy, which is designed to
take HTTP and make it much

00:21:08.640 --> 00:21:11.060
faster to load a web page
with many resources.

00:21:11.500 --> 00:21:15.440
Speedy and web sockets are
in many ways orthogonal.

00:21:16.940 --> 00:21:21.078
So Speedy is designed to take
an entire page with a bunch of

00:21:21.078 --> 00:21:24.460
resources, like hundreds of
images and CSS files, and allow

00:21:24.460 --> 00:21:28.880
that to be delivered to the
client in a much up more

00:21:28.880 --> 00:21:32.220
efficient manner, so
much faster, primarily

00:21:32.220 --> 00:21:32.880
targeting latency.

00:21:34.020 --> 00:21:37.520
Web sockets is not about
loading the entire page.

00:21:37.520 --> 00:21:41.920
Web sockets is really about
replacing the use of hanging

00:21:41.920 --> 00:21:44.180
GETS and post requests
through that bidirectional

00:21:44.180 --> 00:21:47.800
communication back and forth
between the web application

00:21:47.800 --> 00:21:48.838
and the server.

00:21:48.838 --> 00:21:52.280
So while Speedy can be used to
speed up the load of that web

00:21:52.280 --> 00:21:57.420
application, web sockets
is designed to make the

00:21:57.420 --> 00:22:00.960
communication of that web
application and its server more

00:22:00.960 --> 00:22:05.960
efficient so the two are sort
of orthogonal in that respect.

00:22:05.960 --> 00:22:09.578
ALEX RUSSELL: It is worth
noting that Speedy defines an

00:22:09.578 --> 00:22:12.540
opening to a server that's
stateful so you do get a

00:22:12.540 --> 00:22:14.140
bidirectional stateful
communication channel and web

00:22:14.140 --> 00:22:17.800
socket will be able to run over
that, but that's again a

00:22:17.800 --> 00:22:19.312
negotiation that both the
client and the server will have

00:22:19.312 --> 00:22:22.580
to make once clients and
servers have both Speedy and

00:22:22.580 --> 00:22:25.000
web socket implementations.

00:22:25.000 --> 00:22:27.318
AUDIENCE: Hi, I'd like to get
you guys' thoughts on WebGL.

00:22:27.318 --> 00:22:31.890
Do you know what the status of
it is and kind of where Chrome

00:22:31.890 --> 00:22:35.840
stands in relation to it?

00:22:35.840 --> 00:22:39.040
IAN FETTE: So the status, we're
now shipping it in nightly

00:22:39.040 --> 00:22:42.560
builds of Google Chrome.

00:22:42.560 --> 00:22:44.280
I think we've turned
off the flag on that.

00:22:44.280 --> 00:22:47.200
I'd have to double check.

00:22:47.200 --> 00:22:50.300
You can see a lot of demos that
will actually run in a Dev

00:22:50.300 --> 00:22:52.140
channel build of Google Chrome.

00:22:52.140 --> 00:22:55.300
So we're definitely happy with
the progress that's being made.

00:22:56.780 --> 00:23:00.720
We're not quite done yet, but I
think it's safe to say that

00:23:00.720 --> 00:23:05.240
WebGL is something that we
support, that we're happy to

00:23:05.240 --> 00:23:09.840
see continued development on,
and we will continue to develop

00:23:09.840 --> 00:23:13.118
and support that specification.

00:23:13.118 --> 00:23:15.238
ERIK KAY: By the way, this is
another good one to sort of

00:23:15.238 --> 00:23:18.078
follow on to the previous --
the earlier question about

00:23:18.078 --> 00:23:21.680
what's harder to do than
you might expect for us.

00:23:22.640 --> 00:23:25.220
WebGL is one of those
things that sounds

00:23:25.220 --> 00:23:26.618
really straightforward.

00:23:26.618 --> 00:23:29.020
It's like, oh, it's just a 3D
API, you know, and my desktop

00:23:29.020 --> 00:23:32.840
has been doing that forever,
but partly because of the

00:23:32.840 --> 00:23:37.560
nature of Chrome's process
model and security system.

00:23:37.560 --> 00:23:40.598
It turns out that doing 3D
graphics in a sandboxed

00:23:40.598 --> 00:23:45.020
rendering process is quite
challenging, and especially

00:23:45.020 --> 00:23:50.020
if we want to maintain
performance and fidelity.

00:23:50.020 --> 00:23:54.400
You know, that's been a lot of
work to get right, and all

00:23:54.400 --> 00:23:57.118
that's starting to come
together, and the nice thing

00:23:57.118 --> 00:24:00.960
about that is now that we're
sort of getting all this

00:24:00.960 --> 00:24:03.560
accelerated 3D rendering
working in the sandboxed model,

00:24:03.560 --> 00:24:06.200
you're going to see us being
able to do more exciting

00:24:06.200 --> 00:24:09.800
accelerated graphics and
speeding up Chrome along a

00:24:09.800 --> 00:24:12.500
bunch of different lines that
you haven't seen us do yet.

00:24:12.500 --> 00:24:14.680
ALEX RUSSELL: There's active
work right now, for instance,

00:24:14.680 --> 00:24:19.200
on hardware-accelerating CSS
transforms so web-based CSS

00:24:19.200 --> 00:24:21.460
transforms in Chrome will
eventually be able to be

00:24:21.460 --> 00:24:22.560
hardware accelerated
because of that same work.

00:24:22.560 --> 00:24:24.460
It is very difficult to get off
the ground with a new system

00:24:24.460 --> 00:24:29.338
like this, but it is off.

00:24:29.338 --> 00:24:33.960
AUDIENCE: Hi, So this is -- is
it for oscillating to the

00:24:33.960 --> 00:24:36.618
composition of the
[UNINTELLIGIBLE]

00:24:36.618 --> 00:24:39.820
in this level of the
-- in this topic?

00:24:39.820 --> 00:24:43.880
Are you guys working to
accelerate 2D graphics,

00:24:43.880 --> 00:24:45.640
let's say, like to
the [UNINTELLIGIBLE]

00:24:45.640 --> 00:24:48.600
like the Internet
Explorer 9 is doing?

00:24:49.700 --> 00:24:51.780
ERIK KAY: Yeah, we're also
working to accelerate

00:24:51.780 --> 00:24:53.060
2D graphics as well.

00:24:53.060 --> 00:24:56.810
AUDIENCE: And are you guys
planning on doing any work with

00:24:56.810 --> 00:24:58.520
the Audio Tag, like the work
that the Mozilla

00:24:58.520 --> 00:25:00.560
guys are doing?

00:25:00.560 --> 00:25:01.620
ALEX RUSSELL: We
support it, yes.

00:25:01.620 --> 00:25:02.280
AUDIENCE: No, no, no.

00:25:02.280 --> 00:25:06.780
Yeah, but to be able to send
it to the buffer, you know,

00:25:06.780 --> 00:25:08.100
get the data to the--

00:25:08.100 --> 00:25:08.358
ALEX RUSSELL: Do you
mean the Mozilla--

00:25:08.358 --> 00:25:09.240
AUDIENCE: Yeah, yeah.

00:25:09.240 --> 00:25:11.530
ALEX RUSSELL: --the extensions
is the idea that Mozilla

00:25:11.530 --> 00:25:12.660
has offered so far.

00:25:12.660 --> 00:25:15.220
IAN FETTE: So I'm not sure
about the Mozilla extensions

00:25:15.220 --> 00:25:17.500
to the Audio Tag.

00:25:17.860 --> 00:25:21.420
We are working on another audio
API that will actually grant

00:25:21.420 --> 00:25:24.860
you positional audio
capabilities.

00:25:24.860 --> 00:25:28.180
So this is an API where you
cannot just construct audio on

00:25:28.180 --> 00:25:33.360
the fly, but you can also
control effects such as

00:25:33.360 --> 00:25:37.980
position, directionality,
reverb, the whole sort of line

00:25:37.980 --> 00:25:42.580
of audio controls that you'd
expect from something like

00:25:42.580 --> 00:25:46.680
DirectX, Audio API, that level
of capability we're looking to

00:25:46.680 --> 00:25:50.140
expose in the browser, and that
work is happening in WebKit.

00:25:50.700 --> 00:25:54.360
There's a specification being
worked on by one of the

00:25:54.360 --> 00:25:55.680
engineers at Google for that.

00:25:56.098 --> 00:25:59.380
So we are taking
audio seriously.

00:25:59.520 --> 00:26:03.820
I unfortunately am not familiar
with the exact extensions

00:26:03.820 --> 00:26:06.220
to the Audio Tag that
you're referencing.

00:26:06.220 --> 00:26:08.540
But I can tell you that we do
take very seriously the

00:26:08.540 --> 00:26:12.286
requirement to be able to build
up audio on the fly as well

00:26:12.286 --> 00:26:14.380
as control things
like positioning.

00:26:14.380 --> 00:26:17.920
So not just playing back a
simple audio file, but actually

00:26:17.920 --> 00:26:20.440
generating an audio stream on
the fly and controlling the

00:26:20.440 --> 00:26:22.760
position of that audio.

00:26:22.760 --> 00:26:24.180
AUDIENCE: And also, do you
think you guys have reached

00:26:24.180 --> 00:26:26.240
the limits of the canvas tag?

00:26:26.240 --> 00:26:30.840
Like the speed that you're
drawing stuff, or, you know,

00:26:30.840 --> 00:26:34.840
you know, that you draw
pixels and on geometry?

00:26:34.840 --> 00:26:36.320
IAN FETTE: The question is have
we reached the limits of the

00:26:36.320 --> 00:26:41.040
canvas tag in terms of speed?

00:26:41.040 --> 00:26:41.680
ALEX RUSSELL: I think, no.

00:26:41.680 --> 00:26:42.380
IAN FETTE: No.

00:26:42.380 --> 00:26:47.920
ALEX RUSSELL: Very briefly, so
the canvas tag today uses a

00:26:47.920 --> 00:26:50.838
single array exposed to
JavaScript that you script,

00:26:50.838 --> 00:26:52.890
right, and then you
have drawn commands.

00:26:52.890 --> 00:26:54.160
Some things are going to
continue to get faster.

00:26:54.160 --> 00:26:58.140
So V8 is continuing to get
faster and we're excited about,

00:26:58.140 --> 00:27:00.260
you know, how much faster it's
going to be in the future.

00:27:00.680 --> 00:27:03.640
So that aspect of canvas
performance is going to

00:27:03.640 --> 00:27:03.860
continue to improve.

00:27:03.860 --> 00:27:08.560
There's also work happening
right now, both in part due to

00:27:08.560 --> 00:27:10.140
some great proposals from
Mozilla around typed array,

00:27:10.140 --> 00:27:14.710
which is a binary array
subtype, and that work has sort

00:27:14.710 --> 00:27:17.960
of spilled over into the
TC39 the [UNINTELLIGIBLE]

00:27:17.960 --> 00:27:19.640
working group, and it's
being actively considered

00:27:19.640 --> 00:27:20.040
sort of as we speak.

00:27:21.580 --> 00:27:25.660
So a binary-array type in
JavaScript as a language will

00:27:25.660 --> 00:27:27.780
help us sort of accelerate some
of those use cases as well.

00:27:27.780 --> 00:27:32.100
So where that goes,
you can imagine.

00:27:32.100 --> 00:27:34.260
I think there has been work
in the past in proposals on

00:27:34.260 --> 00:27:37.020
mailing lists for moving canvas
processing on working threads.

00:27:37.020 --> 00:27:39.280
So getting it off of the
main thread and maybe

00:27:39.280 --> 00:27:39.900
onto a difference CPU.

00:27:40.760 --> 00:27:41.700
That's exciting as well.

00:27:41.700 --> 00:27:44.518
So there are other
opportunities for us to

00:27:44.518 --> 00:27:47.200
accelerate it and sort of, you
know, as canvas performance

00:27:47.200 --> 00:27:50.538
becomes a limiting factor, I
think you should expect to see

00:27:50.538 --> 00:27:52.500
us exploring more of those.

00:27:52.700 --> 00:27:55.780
ERIK KAY: By the way, one other
thing I want to mention about

00:27:55.780 --> 00:27:59.480
performance, and we're
obviously very passionate about

00:27:59.480 --> 00:28:03.560
making the processor faster in
all aspects, but some of the

00:28:03.560 --> 00:28:07.920
newer features of the web don't
have a lot of use cases out

00:28:07.920 --> 00:28:10.660
there yet, and so we don't
necessarily know where the

00:28:10.660 --> 00:28:12.780
limits are and where
the problems are.

00:28:12.780 --> 00:28:18.360
So what we always encourage
people to do is to don't just

00:28:18.360 --> 00:28:21.120
assume that something is the
way it is and that

00:28:21.120 --> 00:28:22.260
that's a limit.

00:28:22.260 --> 00:28:27.298
If you see something that feels
slow, you know, file a bug.

00:28:27.298 --> 00:28:28.920
Express it in the
form of a benchmark.

00:28:28.920 --> 00:28:32.460
It turns out if you put a web
page out there that has a --

00:28:32.460 --> 00:28:36.200
that'll spit out a number, you
know, that says your browser

00:28:36.200 --> 00:28:40.260
runs this thing at -- with a
score of 42 and this other

00:28:40.260 --> 00:28:42.980
browser runs a speed of 78--

00:28:42.980 --> 00:28:43.780
IAN FETTE: We'll beat them.

00:28:43.780 --> 00:28:46.120
ERIK KAY: Yeah,
we'll beat them.

00:28:46.120 --> 00:28:49.720
ALEX RUSSELL: Well, you'd first
expect browser vendors to argue

00:28:49.720 --> 00:28:50.640
over whether or not it's a
reasonable measurement.

00:28:50.640 --> 00:28:52.680
But once they do, they'll also
at the same time be

00:28:52.680 --> 00:28:54.600
accelerating that test case so
that they look good

00:28:54.600 --> 00:28:54.920
on it as well.

00:28:54.920 --> 00:28:55.498
ERIK KAY: Yeah, exactly.

00:28:55.498 --> 00:28:59.218
So the thing that's interesting
is, if you have a web app and

00:28:59.218 --> 00:29:02.680
your web app feels slow for
some reason, take your web

00:29:02.680 --> 00:29:05.000
app and consolidate it
down to a benchmark.

00:29:05.000 --> 00:29:08.298
Publish that, and you'll have
browser makers competing to

00:29:08.298 --> 00:29:10.880
make your web app faster.

00:29:10.880 --> 00:29:13.760
Trust me, it works.

00:29:13.760 --> 00:29:16.120
AUDIENCE: So I work with a lot
of embedded and

00:29:16.120 --> 00:29:20.140
resource-constrained hardware,
and it seems like there's a

00:29:20.140 --> 00:29:24.460
potential for a lot of overlap
between Chrome OS and Android,

00:29:24.460 --> 00:29:27.220
and I was wondering if someone
on your team can speak as to

00:29:27.220 --> 00:29:31.000
which hardware maybe Chrome OS
is more targeted towards

00:29:31.000 --> 00:29:33.340
versus Android?

00:29:33.340 --> 00:29:34.780
BRIAN RAKOWSKI: Yeah,
I can answer that.

00:29:35.020 --> 00:29:37.018
You know, right now, the
Android team is focused on

00:29:37.018 --> 00:29:42.280
handsets, the Chrome team is
focused on small form-factor

00:29:42.280 --> 00:29:44.500
laptops, netbooks.

00:29:44.500 --> 00:29:48.818
It's easy to see that there's
some place where those two

00:29:48.818 --> 00:29:51.220
things converge, just looking
at the trends and looking at

00:29:51.220 --> 00:29:52.700
iPads and things like that.

00:29:52.700 --> 00:29:54.480
And, of course, the next
question is, well, which one of

00:29:54.480 --> 00:29:57.680
these things is gonna run
better on those devices, where

00:29:57.680 --> 00:30:02.720
it's like a touchscreen so it
kinda seems like Android, but

00:30:02.720 --> 00:30:04.020
it's a little bit bigger so it
kinda seems like Chrome and you

00:30:04.020 --> 00:30:09.800
want a more powerful browser,
and I think the truth and the

00:30:09.800 --> 00:30:11.800
answer there is we don't know.

00:30:11.800 --> 00:30:15.520
We have two open-source
solutions out there trying to

00:30:15.520 --> 00:30:19.920
be the best solution for,
popular use cases today, and I

00:30:19.920 --> 00:30:22.700
think both of us will explore,
you know, how far we can take

00:30:22.700 --> 00:30:23.800
those different approaches.

00:30:24.400 --> 00:30:25.160
Both of them have
their pros and cons.

00:30:25.160 --> 00:30:30.578
Both of them have the
different targets right now.

00:30:30.578 --> 00:30:30.880
But we'll see.

00:30:31.200 --> 00:30:34.960
We don't know, and I think
that's a good thing.

00:30:34.960 --> 00:30:36.458
We'll have to see
which one pans out.

00:30:36.940 --> 00:30:39.960
We'll have to see which ends up
supporting those use cases.

00:30:39.960 --> 00:30:42.580
We'll have to see which of
these devices ends up being

00:30:42.580 --> 00:30:44.378
popular with consumers and
important for us to nail.

00:30:49.720 --> 00:30:53.480
AUDIENCE: Hi, I know we talk
a lot about performance in

00:30:53.480 --> 00:30:56.780
Chrome and V8 is just
incredibly quick.

00:30:56.780 --> 00:30:59.640
I've been pretty thrilled with
that in my web application, but

00:30:59.640 --> 00:31:02.858
with that continuing to
improve, what you think is the

00:31:02.858 --> 00:31:07.380
future of the native code
execution in a browser that

00:31:07.380 --> 00:31:10.260
also is being developed
here at Google?

00:31:10.260 --> 00:31:13.260
IAN FETTE: So I think that
native code execution is

00:31:13.260 --> 00:31:14.380
important for two things.

00:31:14.380 --> 00:31:20.600
One is raw performance and
speed, and I think that we are

00:31:20.600 --> 00:31:24.660
going to continue to increase
that performance of V8 to give

00:31:24.660 --> 00:31:28.640
the faster JavaScript, but
there will eventually come a

00:31:28.640 --> 00:31:34.320
point where you hit a level,
you know, where as a language,

00:31:34.320 --> 00:31:39.320
JavaScript is not going to be
as fast for certain types of

00:31:39.320 --> 00:31:41.598
operations as native
code would be.

00:31:41.598 --> 00:31:44.040
So I think that there's
certainly a use case for

00:31:44.040 --> 00:31:45.580
native code for certain
types of operations.

00:31:45.580 --> 00:31:48.640
For instance, every time you
want to access a JavaScript

00:31:48.640 --> 00:31:50.760
object in V8, you're gonna have
to make sure is this object

00:31:50.760 --> 00:31:53.398
still the same, is this
function still valid for this

00:31:53.398 --> 00:31:55.640
object, does it have the same
address, that's going

00:31:55.640 --> 00:31:56.440
to add some overhead.

00:31:57.020 --> 00:32:00.060
So native code where it's
compiled in advance will

00:32:00.060 --> 00:32:01.800
have an advantage there.

00:32:01.800 --> 00:32:03.400
But I think one of the other
big advantages for native

00:32:03.400 --> 00:32:07.280
client is not just in terms of
performance, but realizing that

00:32:07.280 --> 00:32:11.640
there is this huge wealth of
already existing code in the

00:32:11.640 --> 00:32:13.640
wild that is not JavaScript.

00:32:13.640 --> 00:32:17.620
So if you look at games, for
instance, there are years and

00:32:17.620 --> 00:32:20.580
years that have been spent
developing things like

00:32:20.580 --> 00:32:24.440
physics libraries and graph
extensions for games.

00:32:24.440 --> 00:32:28.460
These are -- these would be
very difficult and time

00:32:28.460 --> 00:32:31.380
intensive to port over to
JavaScript, but if you could

00:32:31.380 --> 00:32:33.960
compile them and run them and
see in, the browser you'd be

00:32:33.960 --> 00:32:37.700
able to immediately take all
of that work and port your

00:32:37.700 --> 00:32:38.320
application to the browser.

00:32:38.320 --> 00:32:41.540
So something like a game
that had been written

00:32:41.540 --> 00:32:42.880
for iPhone in C

00:32:43.078 --> 00:32:49.078
or Objective-C could
potentially, if you have

00:32:49.078 --> 00:32:51.380
support for those libraries
and for native code -- could

00:32:51.380 --> 00:32:53.140
potentially be run in a
browser with a minimal

00:32:53.140 --> 00:32:54.320
amount of effort.

00:32:54.320 --> 00:32:58.540
So I think that that's another
advantage to approaches

00:32:58.540 --> 00:32:59.098
like native client.

00:32:59.098 --> 00:33:01.380
It's not just about
performance.

00:33:01.380 --> 00:33:04.140
Performance is a huge benefit,
but you also get the benefit of

00:33:04.140 --> 00:33:06.920
being able to take advantage
of existing code bases.

00:33:06.920 --> 00:33:09.040
ALEX RUSSELL: And maybe a
different framing is to

00:33:09.040 --> 00:33:11.440
think of it in terms of
effort versus outcome.

00:33:12.518 --> 00:33:16.220
And if you can't run native
code, there's a cap on what

00:33:16.220 --> 00:33:18.798
sort of outcomes you can
achieve per some level

00:33:18.798 --> 00:33:20.960
of effort, right?

00:33:20.960 --> 00:33:24.160
And so that transition, that
transition point from I can do

00:33:24.160 --> 00:33:26.160
some simple HTML and I can
start scripting it with

00:33:26.160 --> 00:33:28.278
JavaScript, you know, if you're
gonna hit this thing up here

00:33:28.278 --> 00:33:31.238
where you can't sort of deliver
that rich sort of game-like 3D

00:33:31.238 --> 00:33:33.338
world experience, which just
doesn't have a semantic meaning

00:33:33.338 --> 00:33:36.780
as a document, you
need to go, right?

00:33:36.780 --> 00:33:38.680
You need to keep going
and the web needs to

00:33:38.680 --> 00:33:38.820
deliver that to you.

00:33:38.820 --> 00:33:42.880
And so we think of our job as
browser vendors as giving you

00:33:42.880 --> 00:33:47.540
full access to the platform in
a way that's useful, easy, safe

00:33:47.540 --> 00:33:49.348
and scales with your effort.

00:33:50.420 --> 00:33:53.000
ERIK KAY: By the way, just
one other follow-on, we've

00:33:53.000 --> 00:33:56.080
mentioned this a few times, but
I think it's worth sort of

00:33:56.080 --> 00:34:00.920
combining it a bit is we've
referenced that something

00:34:00.920 --> 00:34:03.860
will be useful for games.

00:34:03.860 --> 00:34:05.460
And the reason we keep bringing
that up is because we think

00:34:05.460 --> 00:34:09.078
it's an important thing to
really enable, to enable

00:34:09.078 --> 00:34:13.138
full-fidelity entertainment,
you know, via the web.

00:34:13.138 --> 00:34:15.138
And so that means
audio, video, 3D.

00:34:16.258 --> 00:34:18.158
That means high-performance.

00:34:18.158 --> 00:34:21.338
That means dealing with
existing co-libraries.

00:34:21.878 --> 00:34:26.618
It means providing people a
means to monetize, to sell

00:34:26.618 --> 00:34:30.098
these -- these games where
maybe advertising

00:34:30.098 --> 00:34:31.558
might not work.

00:34:32.100 --> 00:34:38.338
These are all things that we
think, you know, are connected.

00:34:38.338 --> 00:34:41.818
AUDIENCE: For people that might
want to aspire to be on a

00:34:41.818 --> 00:34:45.838
Google Chrome development team
in the future, what experience

00:34:45.838 --> 00:34:49.358
or how did you guys end
up being on this team?

00:34:49.358 --> 00:34:52.498
IAN FETTE: I got a
call from that guy.

00:34:52.498 --> 00:34:54.298
BRIAN RAKOWSKI: Yeah, so
there's a bunch of different

00:34:54.298 --> 00:34:55.098
skill sets that we
look for on the team.

00:34:55.098 --> 00:34:58.258
We have -- on this panel we
have representing people who

00:34:58.258 --> 00:35:01.578
are engineers and also
product managers.

00:35:01.578 --> 00:35:04.258
Ian came to us because we were
looking for somebody who

00:35:04.258 --> 00:35:05.278
understood security
very deeply.

00:35:06.078 --> 00:35:08.278
He was doing some work -- he
was working on a PhD and we

00:35:08.278 --> 00:35:09.418
stole him out of his PhD
program because we needed

00:35:09.418 --> 00:35:12.378
a security expert on the
team to fill the PM role.

00:35:12.378 --> 00:35:15.878
So if you know a lot about web
technology, that's pretty good.

00:35:15.878 --> 00:35:18.820
If you know a lot about
browsers, that's pretty good.

00:35:18.820 --> 00:35:20.978
The engineering -- maybe
you guys want to talk

00:35:20.978 --> 00:35:21.578
about engineering.

00:35:21.578 --> 00:35:24.340
ERIK KAY: Yeah, the engineering
philosophy -- I mean, there's a

00:35:24.340 --> 00:35:26.598
lot to read out on the net so I
won't talk about it too, too

00:35:26.598 --> 00:35:29.998
much here, but the general
Google hiring philosophy

00:35:29.998 --> 00:35:34.260
applies to Chrome, which is
that we do like to higher

00:35:34.260 --> 00:35:38.940
generalists, people who, you
know, can do a lot, who can

00:35:38.940 --> 00:35:42.418
wear a lot of hats, can see the
big picture, and who aren't

00:35:42.418 --> 00:35:45.840
afraid to dive into code
at, you know, at any

00:35:45.840 --> 00:35:46.958
level of the system.

00:35:47.238 --> 00:35:50.118
So that seems to be a
guiding principle.

00:35:50.958 --> 00:35:54.498
There's a lot of stuff about
challenging interview questions

00:35:54.498 --> 00:35:58.340
and being able to answer, you
know, complex coding things,

00:35:58.340 --> 00:36:02.878
but really if you're, you know,
a good overall engineer,

00:36:02.878 --> 00:36:03.336
can code in C

00:36:04.200 --> 00:36:08.178
-- unfortunately, that's what
we're coding in for Chrome

00:36:08.178 --> 00:36:09.300
-- that's a good start.

00:36:09.300 --> 00:36:12.140
One other thing that just the
Chrome -- you have an advantage

00:36:12.140 --> 00:36:14.880
if you're interested in getting
on the Chrome team versus just

00:36:14.880 --> 00:36:18.098
becoming a generic Google
engineer is that it's an

00:36:18.098 --> 00:36:18.178
open-source project.

00:36:19.038 --> 00:36:22.260
And we really love
external contributors.

00:36:22.378 --> 00:36:27.298
You know, it's not often that
you get people volunteering to

00:36:27.298 --> 00:36:33.440
help you do your job, and it's
really humbling, actually, that

00:36:33.440 --> 00:36:35.480
we've created something that
people are passionate about and

00:36:35.480 --> 00:36:38.498
really want to get
involved with.

00:36:38.498 --> 00:36:41.618
Back when I went to college,
you know, open source was just

00:36:41.618 --> 00:36:44.760
getting going and there weren't
as many opportunities, and what

00:36:44.760 --> 00:36:49.820
I'd recommend any aspiring, you
know, developer to do is jump

00:36:49.820 --> 00:36:51.698
on an open-source project.

00:36:51.698 --> 00:36:53.958
You know, yeah, you're not
getting paid for it, but, you

00:36:53.958 --> 00:36:56.840
know, this is great experience.

00:36:56.840 --> 00:36:58.300
And we welcome contributions.

00:36:58.038 --> 00:37:02.898
There's a guide about how to
get started, how to build it.

00:37:02.898 --> 00:37:05.158
There's even a set of bugs
that we have tagged that say

00:37:05.158 --> 00:37:07.918
"help wanted" or
"good starter bug,"

00:37:07.918 --> 00:37:09.218
you know, that are good
places to get going.

00:37:09.218 --> 00:37:13.598
So if you really are aspiring
and interested in building and

00:37:13.598 --> 00:37:17.138
getting involved in Chrome, we
have hired people who came on

00:37:17.138 --> 00:37:22.298
as contributors to the project,
and I'll tell you, there is no

00:37:22.298 --> 00:37:27.320
better interview than the proof
that you actually contributed

00:37:27.320 --> 00:37:30.218
code and can have people on
the team vouch for you.

00:37:30.218 --> 00:37:31.218
ALEX RUSSELL: This isn't
unique to Chrome, by the way.

00:37:31.218 --> 00:37:33.320
I've worked at lots of other
the companies where if you

00:37:33.320 --> 00:37:35.360
could walk in and say I'm a
committer at Apache, that buys

00:37:35.360 --> 00:37:38.058
you -- you know, all the
interviews before lunch

00:37:38.058 --> 00:37:40.218
are sort of cut off.

00:37:40.218 --> 00:37:42.260
It's not true at Google, but
generally speaking, if you're

00:37:42.260 --> 00:37:45.878
looking for advice in terms of
how to get hired anywhere, I

00:37:45.878 --> 00:37:47.000
would suggest that you find
something you really care about

00:37:47.000 --> 00:37:50.858
and go work on it in an
open-source project.

00:37:50.858 --> 00:37:52.118
BRIAN RAKOWSKI: By the
way, is Muhammad here?

00:37:52.118 --> 00:37:54.218
I know he came out for IO.

00:37:54.218 --> 00:37:56.780
He may not be in this session,
but one of our open-source

00:37:56.780 --> 00:37:58.898
committers came out and
he visited the office.

00:37:58.898 --> 00:38:00.398
I think it was yesterday
he was walking around.

00:38:00.398 --> 00:38:01.598
So it was nice to
meet him in person.

00:38:02.580 --> 00:38:04.738
There's a lot of people out
there who we communicate

00:38:04.738 --> 00:38:07.038
with on a daily basis who
we've never seen so--

00:38:07.038 --> 00:38:09.118
ERIK KAY: Sure, and by the way,
from all around the world.

00:38:09.118 --> 00:38:13.218
One of our most prolific and
early open-source contributors

00:38:13.218 --> 00:38:17.738
was from Poland, and even
though he's working on his PhD,

00:38:17.738 --> 00:38:22.318
he contributes tremendously,
you know, even in

00:38:22.318 --> 00:38:23.138
his spare time.

00:38:23.138 --> 00:38:25.558
So there's a lot
of opportunity.

00:38:25.558 --> 00:38:27.218
IAN FETTE: And it's worth
pointing out that we do have

00:38:27.218 --> 00:38:30.538
offices all around the world,
not just in California, but

00:38:30.538 --> 00:38:34.860
all the way out to London,
Tokyo and Russia as well.

00:38:34.860 --> 00:38:36.940
BRIAN RAKOWSKI: I guess the
point is that we need help.

00:38:36.940 --> 00:38:38.848
We have way too
much stuff to do.

00:38:38.848 --> 00:38:39.518
Please help.

00:38:39.518 --> 00:38:40.558
ALEX RUSSELL: There's no part
of computer science aside,

00:38:40.558 --> 00:38:43.018
I think, from artificial
intelligence and large-scale

00:38:43.018 --> 00:38:45.226
intelligence that we don't
touch as the Chrome team.

00:38:47.898 --> 00:38:49.298
AUDIENCE: Hi, I have
two questions.

00:38:49.298 --> 00:38:54.678
The first one is we've done a
lot of benchmarking between the

00:38:54.678 --> 00:38:59.638
browser on Android and Chrome
browser like SunSpider, V8

00:38:59.638 --> 00:39:04.078
benchmark, and I'm talking
about the Android Eclair

00:39:04.078 --> 00:39:10.098
release, and it's significantly
slower than Chrome.

00:39:10.098 --> 00:39:15.398
So can you comment on whether,
you know, Chrome can run on

00:39:15.398 --> 00:39:18.278
Android or whether there would
be plans, and how you

00:39:18.278 --> 00:39:20.360
plan to fix the gap?

00:39:20.360 --> 00:39:24.578
ERIK KAY: So none of us are on
the Android team, but we do

00:39:24.578 --> 00:39:28.098
talk to them, and we do a share
a lot back and forth, so take

00:39:28.098 --> 00:39:30.718
what I say with a little
bit of a grain of salt.

00:39:32.978 --> 00:39:36.818
We share a lot of resources
between -- in code.

00:39:36.818 --> 00:39:41.198
Android -- and we
both use WebKit.

00:39:41.198 --> 00:39:46.078
Android is now, I think with
Froyo started to use V8 and

00:39:46.078 --> 00:39:48.878
also using Chrome's
network stack.

00:39:49.438 --> 00:39:52.178
So we're sharing more
and more each day.

00:39:53.238 --> 00:39:57.558
and I think that you're gonna
see that their performance and

00:39:57.558 --> 00:40:01.298
ours, you know, get closer
and closer over time.

00:40:01.738 --> 00:40:04.498
So in the browser front, we
do collaborate quite a bit.

00:40:05.058 --> 00:40:09.798
And I think, as Ian was
saying earlier, we do have

00:40:09.798 --> 00:40:11.218
different constraints.

00:40:11.438 --> 00:40:15.558
You know, on the desktop, we've
got, you know, we can pretty

00:40:15.558 --> 00:40:18.780
much assume, you know, people
have a lot of memory,

00:40:18.780 --> 00:40:19.080
a lot of RAM.

00:40:19.080 --> 00:40:23.320
But, you know, on Android
devices, you can't.

00:40:23.320 --> 00:40:26.238
It's a much smaller
footprint, in general.

00:40:26.238 --> 00:40:28.020
The other thing that you've got
that's a problem on Android

00:40:28.020 --> 00:40:32.738
that people don't really
realize is that actually

00:40:32.738 --> 00:40:35.318
the Flash storage is
quite high latency.

00:40:36.378 --> 00:40:39.760
People think of Flash as being
faster, but it turns out that

00:40:39.760 --> 00:40:42.198
writing to Flash, especially
the type of Flash that's

00:40:42.198 --> 00:40:45.038
in phones is pretty slow.

00:40:45.038 --> 00:40:48.640
And so you have to be careful
about how often you write, so

00:40:48.640 --> 00:40:52.760
even simple things like dealing
with cookies -- I know the

00:40:52.760 --> 00:40:55.818
engineer who worked on the
cookie system for Android and

00:40:55.818 --> 00:40:58.758
she was complaining to me about
how, trying to, you know, write

00:40:58.758 --> 00:41:01.898
to the database, these cookie
changes was killing

00:41:01.898 --> 00:41:02.478
their performance.

00:41:02.478 --> 00:41:04.318
This was a long time ago.

00:41:04.578 --> 00:41:04.760
They've fixed some of that.

00:41:04.760 --> 00:41:08.420
But it was -- they had to come
up with tricks and ways to

00:41:08.420 --> 00:41:10.618
avoid having to write too much.

00:41:10.618 --> 00:41:13.780
So we're always going to be a
bit different, just due to the

00:41:13.780 --> 00:41:15.998
constraints and the types of
hardware that we're running on,

00:41:15.998 --> 00:41:19.960
and it's not really fair to do
a strict apples-to-apples

00:41:19.960 --> 00:41:23.658
comparison there, but
conceptually, assume that

00:41:23.658 --> 00:41:25.818
they're getting closer
and closer over time.

00:41:25.818 --> 00:41:26.738
AUDIENCE: OK, great.

00:41:26.738 --> 00:41:29.578
The second question is can you
comment more on the video

00:41:29.578 --> 00:41:34.620
standards for what Chrome
browser would be using now

00:41:34.620 --> 00:41:37.738
that VP8 is being announced?

00:41:37.738 --> 00:41:40.600
You know, which do you think
would be more standard?

00:41:40.600 --> 00:41:44.498
H.264 or VP8, and how
does Flash play into it?

00:41:46.320 --> 00:41:49.158
IAN FETTE: So we did announce
this morning in the keynote

00:41:49.158 --> 00:41:52.518
support for WebM, which is
the VP8 plus Ogg Vorbis.

00:41:52.518 --> 00:41:58.698
It's the audio in basically
a Matroska container.

00:41:58.698 --> 00:42:00.840
We're obviously going
to support WebM.

00:42:00.840 --> 00:42:04.378
We're already supporting
H.264 as well as Ogg Theora.

00:42:04.618 --> 00:42:09.018
I think that right now it's a
bit early to say whether we're

00:42:09.018 --> 00:42:14.518
going to make any changes in
terms of discontinuing support

00:42:14.518 --> 00:42:15.898
for anything that we're
currently shipping.

00:42:15.898 --> 00:42:18.418
I think right now we're putting
a lot of focus into making sure

00:42:18.418 --> 00:42:23.638
that WebM is performant in
Chrome and that we get hardware

00:42:23.638 --> 00:42:25.638
support for WebM and we're
trying to make sure that

00:42:25.638 --> 00:42:27.078
that's a great experience.

00:42:27.078 --> 00:42:32.878
And once we have more
experience, more data on how

00:42:32.878 --> 00:42:35.398
that goes and what the adoption
is, at that point we'll look to

00:42:35.398 --> 00:42:39.600
see up what we're going to do
with respect to the

00:42:39.600 --> 00:42:47.178
other codecs that we're
currently shipping.

00:42:47.178 --> 00:42:50.018
AUDIENCE: Why is it unfortunate
that you guys use C plus plus?

00:42:50.018 --> 00:42:50.310
ALEX RUSSELL: Oh, it's not.

00:42:50.310 --> 00:42:52.110
I was joking.
865
00:42:52,11 --&gt; 00:42:52,044
AUDIENCE: Oh,

00:42:52.044 --> 00:42:52.978
really?

00:42:52.978 --> 00:42:53.818
ALEX RUSSELL: It's fast.

00:42:53.818 --> 00:42:55.898
And we need Chrome to be fast.

00:42:55.898 --> 00:42:59.598
Speed is what we're going
for at every point.

00:42:59.598 --> 00:43:01.358
On the other hand, C

00:43:01.884 --> 00:43:02.538
is a very large language.

00:43:03.798 --> 00:43:04.998
It's difficult to
know all of it.

00:43:05.378 --> 00:43:08.458
So there's a very high
bar to getting going

00:43:08.458 --> 00:43:09.438
and getting started.

00:43:09.438 --> 00:43:12.300
I didn't mean that as a
slight to C plus plus.

00:43:12.300 --> 00:43:15.540
But if you're a -- if you're a
wizard at Valgrind and you love

00:43:15.540 --> 00:43:19.180
finding memory bugs, definitely
go to Google dot

00:43:19.180 --> 00:43:21.998
com slash jobs.

00:43:21.998 --> 00:43:24.524
ERIK KAY: Yeah, I think that's
the biggest thing is that C

00:43:24.962 --> 00:43:28.238
is -- we wouldn't have
chosen anything different

00:43:28.238 --> 00:43:29.198
even in retrospect.

00:43:29.198 --> 00:43:31.498
It's the right
tool for the job.

00:43:31.498 --> 00:43:34.478
However, with great power
comes great responsibility,

00:43:34.478 --> 00:43:35.738
as they say.

00:43:35.738 --> 00:43:38.460
It's, you know, it's a
dangerous language and

00:43:38.460 --> 00:43:40.538
so, as a result, we have
to be very careful.

00:43:41.300 --> 00:43:44.938
Very early on, we used Purify
pretty heavily because we were

00:43:44.938 --> 00:43:47.718
deeply paranoid about the kind
of bugs we know were

00:43:47.718 --> 00:43:49.278
going to happen.

00:43:49.978 --> 00:43:53.558
Once Linux and Mac came online,
getting Valgrind, we helped

00:43:53.558 --> 00:43:56.700
sponsor the Valgrind Mac port
because we really, really

00:43:56.700 --> 00:43:58.940
wanted to make sure that we
weren't introducing

00:43:58.940 --> 00:43:59.160
new memory bugs.

00:43:59.160 --> 00:44:02.984
This is an area that I
think if you're doing C

00:44:03.800 --> 00:44:07.240
development, C development,
you cannot be too paranoid

00:44:07.240 --> 00:44:08.720
about this in your
development process.

00:44:08.720 --> 00:44:13.058
And building it into your tools
and into your build process

00:44:13.058 --> 00:44:15.918
is an important thing to do.

00:44:15.918 --> 00:44:16.658
ALEX RUSSELL: It's also in
the architecture with the

00:44:16.658 --> 00:44:17.998
sandbox model, right?

00:44:17.998 --> 00:44:20.738
That paranoia goes
all the way down.

00:44:20.738 --> 00:44:22.138
AUDIENCE: Just how is it as
developers, being somebody

00:44:22.138 --> 00:44:24.138
that's pushing standards, you
guys are getting everyone to

00:44:24.138 --> 00:44:27.698
join the bandwagon, and then
you've got people lagging

00:44:27.698 --> 00:44:31.280
behind like Internet Explorer
and how -- as developers, you

00:44:31.280 --> 00:44:35.038
know, we'll love to develop on
and push all the stuff, but

00:44:35.038 --> 00:44:38.218
then we also have to support
like the weak chain.

00:44:38.218 --> 00:44:40.900
IAN FETTE: I would actually
turn that question around and

00:44:40.900 --> 00:44:43.718
ask, as an application
developer, not as a browser

00:44:43.718 --> 00:44:47.638
developer, what's it like to
have certain browsers that are

00:44:47.638 --> 00:44:49.978
lagging behind and what can
I do as an application

00:44:49.978 --> 00:44:51.698
developer to change that?

00:44:51.698 --> 00:44:52.058
AUDIENCE: It's
definitely something.

00:44:53.178 --> 00:44:56.978
Like how do we -- what can
we do to help you guys?

00:44:56.978 --> 00:44:57.138
IAN FETTE: Build better apps.

00:44:57.138 --> 00:44:57.738
Like, I'm not kidding.

00:44:57.738 --> 00:45:00.238
The best way to do it is
to build apps that are

00:45:00.238 --> 00:45:01.638
absolutely awesome.

00:45:01.638 --> 00:45:03.400
Get them to work great.

00:45:03.400 --> 00:45:07.260
Show that these --
functionalities that you want

00:45:07.260 --> 00:45:09.600
to take advantage of can
actually let you do awesome

00:45:09.600 --> 00:45:13.578
things, and if you have a huge
app with a huge number of

00:45:13.578 --> 00:45:16.578
users, I don't work for
Microsoft, so I can't say I

00:45:16.578 --> 00:45:22.800
guarantee it, but I would
expect that if you build

00:45:22.800 --> 00:45:24.518
it, they will come.

00:45:24.518 --> 00:45:27.898
ALEX RUSSELL: So I work on
Chrome Frame, which for those

00:45:27.898 --> 00:45:30.960
of you who may not be familiar
with it is a plug-in for

00:45:30.960 --> 00:45:32.118
Internet Explorer that
puts Chrome's rendering

00:45:32.118 --> 00:45:35.338
engine inside of IE.

00:45:35.338 --> 00:45:37.058
I feel your pain, right?

00:45:37.058 --> 00:45:39.158
I think that's the
easiest way to say it.

00:45:39.158 --> 00:45:41.358
I worked on a Javascript
library before I came to

00:45:41.358 --> 00:45:43.358
join Google, and that
was sort of Plan B.

00:45:43.358 --> 00:45:45.218
Plan A was browser competition
gets us new features

00:45:45.218 --> 00:45:47.538
everywhere faster.

00:45:47.538 --> 00:45:50.958
Browser competition
should always be Plan A.

00:45:50.958 --> 00:45:52.058
Part of the reason that specs
work so well is that they get

00:45:52.058 --> 00:45:54.078
every other browser vendor on
the exact same page that we

00:45:54.078 --> 00:45:57.338
are, and hopefull, it
happens very quickly.

00:45:57.338 --> 00:46:00.018
We work on something, we look,
we build a spec where we

00:46:00.018 --> 00:46:02.118
contribute to a spec, we find a
spec that already does what we

00:46:02.118 --> 00:46:04.138
want, and we implement it.

00:46:04.138 --> 00:46:06.500
And then hopefully, everyone
else comes along very quickly.

00:46:06.500 --> 00:46:10.578
There's a sum chunk of the user
base who may not be making

00:46:10.578 --> 00:46:14.378
informed choices about their
usage of browsers, and so I

00:46:14.378 --> 00:46:17.058
acknowledge that we have an
economic problem here where we

00:46:17.058 --> 00:46:19.618
have to bring many users along
who you may not know that they

00:46:19.618 --> 00:46:21.798
have choices and may not
know how to exercise

00:46:21.798 --> 00:46:23.168
them if they do.

00:46:23.168 --> 00:46:27.780
So Chrome Frame is our sort
of interstitial answer here.

00:46:27.780 --> 00:46:31.658
We need a way to help
organizations and users come

00:46:31.658 --> 00:46:33.458
along for the ride, get the new
applications where they may not

00:46:33.458 --> 00:46:37.978
be able to make choices
about getting a different

00:46:37.978 --> 00:46:39.238
browser for themselves.

00:46:41.398 --> 00:46:44.578
But hopefully, that's a way
station on the way to getting

00:46:44.578 --> 00:46:47.918
people to use better browsers
in general and getting people

00:46:47.918 --> 00:46:49.738
to have browsers that
auto-update, right?

00:46:49.738 --> 00:46:52.778
One of the best things -- one
of the most wonderful things

00:46:52.778 --> 00:46:55.058
I've seen in a very long time
was watching the browser

00:46:55.058 --> 00:47:00.938
percentages over the summer of
2009 when Microsoft turned the

00:47:00.938 --> 00:47:03.098
auto-update switch for IE7 to
IE8 on as a high-priority

00:47:03.098 --> 00:47:05.718
update to XP and Vista.

00:47:05.718 --> 00:47:08.180
You could watch the percentages
flip in a matter of months.

00:47:08.180 --> 00:47:09.840
This is really good news.

00:47:09.840 --> 00:47:10.520
This is good stuff.

00:47:10.520 --> 00:47:13.480
That means that auto-update
works and that browser

00:47:13.480 --> 00:47:14.360
competition works.

00:47:14.360 --> 00:47:16.800
We get great new features and
we get them faster when we have

00:47:16.800 --> 00:47:18.318
browsers that auto-update --

00:47:18.318 --> 00:47:21.280
ERIK KAY: By the way, I think
that you've asked the question

00:47:21.280 --> 00:47:25.760
that is almost by definition
the reason for Chrome's

00:47:25.760 --> 00:47:29.758
existence, which is that
browser development wasn't

00:47:29.758 --> 00:47:33.718
happening fast enough and
standards weren't moving

00:47:33.718 --> 00:47:35.998
fast enough and performance
wasn't moving fast enough.

00:47:35.998 --> 00:47:38.418
These were things that
were not good enough.

00:47:38.418 --> 00:47:41.158
And so part of the whole
purpose of Chrome's existence

00:47:41.158 --> 00:47:45.918
was to light a fire for the
whole industry, and I hope that

00:47:45.918 --> 00:47:49.818
people, you know, that see that
-- it seems like that that's

00:47:49.818 --> 00:47:53.058
happening, and we're not done.

00:47:53.820 --> 00:47:58.538
We think that the fact that if
you watch like, for example,

00:47:58.538 --> 00:48:02.458
just the performance graph of
V8, you know, from when we came

00:48:02.458 --> 00:48:07.038
out to where we're at now, the
Delta between version, you

00:48:07.038 --> 00:48:12.498
know, Chrome 4 and Chrome 5
was, you know, as big or bigger

00:48:12.498 --> 00:48:15.998
than the performance from
the previous release.

00:48:15.998 --> 00:48:21.418
And basically, meanwhile, all
the other browsers makers are

00:48:21.418 --> 00:48:24.298
slowly catching up, and we
don't want them to think, OK,

00:48:24.298 --> 00:48:26.318
now I've gotten as good as
Chrome, I'm good enough.

00:48:27.018 --> 00:48:29.558
Because we want to be at
that next level higher to

00:48:29.558 --> 00:48:30.738
keep pushing it forward.

00:48:30.738 --> 00:48:32.498
And so this is going to be on
performance, this is going

00:48:32.498 --> 00:48:37.340
to be on standards and
capabilities and features and

00:48:37.340 --> 00:48:51.738
on any axis that we can think
of to make browsers better.

00:48:51.738 --> 00:48:52.978
[UNINTELLIGIBLE QUESTION]

00:48:52.978 --> 00:48:56.258
So when a bug comes in --
sorry, question was, what's

00:48:56.258 --> 00:48:57.378
our stance on security?

00:48:57.378 --> 00:49:00.658
What happens when a
security bug comes in?

00:49:00.178 --> 00:49:03.058
There's a number of ways that
security bugs are reported.

00:49:03.058 --> 00:49:05.110
There's either the bug
tracker where you can file

00:49:05.110 --> 00:49:06.980
a bug as a security bug.

00:49:06.980 --> 00:49:09.798
We also get reports to Security
at Chromium dot org and

00:49:09.798 --> 00:49:11.918
Security at Google dot com.

00:49:11.458 --> 00:49:15.538
When those come in, a number of
people, myself included, get

00:49:15.538 --> 00:49:18.858
emailed as a very high-priority
email to go take a look at that

00:49:18.858 --> 00:49:22.618
bug to see a) is it valid, b)
can we reproduce it, c) how

00:49:22.618 --> 00:49:27.188
serious is it, and we then go
about trying to understand the

00:49:27.188 --> 00:49:29.398
bug, making sure that we can
reproduce it, if we can

00:49:29.398 --> 00:49:32.618
reproduce it, understanding is
this something that

00:49:32.618 --> 00:49:33.338
is exploitable?

00:49:33.338 --> 00:49:34.818
If so, how exploitable?

00:49:34.818 --> 00:49:36.200
Does it just crash the browser?

00:49:36.200 --> 00:49:38.540
Does it let you execute
arbitrary code on

00:49:38.540 --> 00:49:39.600
the user's computer?

00:49:39.600 --> 00:49:42.620
If so, does that code
execute within the sandbox?

00:49:42.620 --> 00:49:45.638
Does it execute outside
of the sandbox?

00:49:45.638 --> 00:49:49.618
So we very rapidly
understand the bug and

00:49:49.618 --> 00:49:51.638
the severity of the bug.

00:49:51.818 --> 00:49:54.958
We then develop an update and
because of the auto-update

00:49:54.958 --> 00:49:58.370
mechanism, we can push it out
-- we can push it out to all

00:49:58.370 --> 00:50:00.320
of our users automatically.

00:50:00.320 --> 00:50:02.778
You might not see it
immediately disclosed.

00:50:03.398 --> 00:50:05.458
There's good reasons for that.

00:50:05.698 --> 00:50:07.218
One of them is just the
delay in updating.

00:50:07.678 --> 00:50:09.380
We don't update overnight.

00:50:09.380 --> 00:50:12.420
We do sort of do a staged
update over a few days to make

00:50:12.420 --> 00:50:15.760
sure that we're not going
to blow anything up.

00:50:15.760 --> 00:50:18.798
But another reason is that a
lot of times we find bugs

00:50:18.798 --> 00:50:20.558
in shared components.

00:50:20.458 --> 00:50:24.438
This could be in the WebKit
code that we use for rendering.

00:50:24.438 --> 00:50:28.158
It could be in a library that's
used by not just Chrome

00:50:28.158 --> 00:50:30.840
but other applications.

00:50:30.840 --> 00:50:32.680
So we want to make sure that
we're responsible with that

00:50:32.680 --> 00:50:35.980
information, that we report
those bugs upstream and give

00:50:35.980 --> 00:50:39.020
other users of that code a
chance to update their

00:50:39.020 --> 00:50:42.318
applications as well before
we just open that bug

00:50:42.318 --> 00:50:43.018
up to the public.

00:50:44.058 --> 00:50:47.720
So we are very careful about
making sure that we update as

00:50:47.720 --> 00:50:51.598
quickly as we can, but we also
want to do that disclosure of

00:50:51.598 --> 00:50:53.820
the security bug in a
responsible manner.

00:50:53.820 --> 00:50:57.180
So we're not trying to hide
the fact that we had a bug.

00:50:57.180 --> 00:50:59.020
We're not trying to not
disclose it so that we

00:50:59.020 --> 00:51:02.638
look better in some
bug timing metric.

00:51:02.138 --> 00:51:05.500
It's really about doing the
right thing in making sure

00:51:05.500 --> 00:51:08.178
that we aren't putting any
additional users at risk.

00:51:08.178 --> 00:51:12.940
ERIK KAY: So another related
point I'd make is we're not

00:51:12.940 --> 00:51:14.898
just reactive on the
security front.

00:51:14.838 --> 00:51:16.518
We're not just waiting
for bugs to get reported

00:51:16.518 --> 00:51:17.858
and then fix it.

00:51:18.058 --> 00:51:24.100
We have a team of some of the
smartest security vulnerability

00:51:24.100 --> 00:51:25.220
generators that I've ever seen.

00:51:25.220 --> 00:51:29.698
These are the sort of people
that are really good at finding

00:51:29.698 --> 00:51:35.578
exploits and things, and their
frightening, I mean, some of

00:51:35.578 --> 00:51:39.858
the bug reports, it's,
you know, bizarre.

00:51:39.858 --> 00:51:40.538
ALEX RUSSELL: Once you
understand it, it

00:51:40.538 --> 00:51:43.458
actually does hurt.

00:51:43.458 --> 00:51:45.880
ERIK KAY: So we have these
people who are actively trying

00:51:45.880 --> 00:51:49.218
to break Chrome all the time
and, you know, on the payroll,

00:51:49.218 --> 00:51:52.360
trying to do things, and one of
the things that I think that we

00:51:52.360 --> 00:51:56.198
do that I'm very happy about
the way we do it is that when

00:51:56.198 --> 00:52:01.038
they find bugs, we disclose
those bugs as well.

00:52:01.038 --> 00:52:05.038
The fact that they were
discovered internally doesn't

00:52:05.038 --> 00:52:06.800
mean it wasn't a bug.

00:52:06.800 --> 00:52:08.058
It doesn't mean it's something
that we should be able

00:52:08.058 --> 00:52:10.698
to really hide or
obscure from people.

00:52:11.398 --> 00:52:13.978
So we'll publish that as well
when we fix that and let people

00:52:13.978 --> 00:52:17.798
know that there was a bug in a
previous version, we tracked it

00:52:17.798 --> 00:52:21.858
down and whatever, so you
can see those things.

00:52:21.858 --> 00:52:23.558
BRIAN RAKOWSKI: We also
have a bug bounty program.

00:52:23.558 --> 00:52:27.178
So if you find security bugs,
we want to reward people for

00:52:27.178 --> 00:52:29.858
disclosing them responsibly,
and we'll give a little cash

00:52:29.858 --> 00:52:32.618
to the people who do that
and give them a little

00:52:32.618 --> 00:52:34.218
acknowledgment too.

00:52:34.218 --> 00:52:35.818
Hopefully, that's inspiring
people and encouraging

00:52:35.818 --> 00:52:39.658
people to do the right
thing with bugs.

00:52:39.658 --> 00:52:43.858
AUDIENCE: Is the development of
the Go language in any way to

00:52:43.858 --> 00:52:46.998
go help deal with the problems
encountered with memory issues

00:52:46.998 --> 00:52:49.018
that have been discovered
by your team?

00:52:49.018 --> 00:52:51.938
ALEX RUSSELL: It doesn't help
us, but I'm hopeful that the

00:52:51.938 --> 00:52:54.320
browsers that come after us
could use something like Go.

00:52:54.320 --> 00:52:58.238
IAN FETTE: So one thing that I
will say is when we created

00:52:58.238 --> 00:53:01.658
Google Chrome and we decided
what rendering engine to use,

00:53:01.658 --> 00:53:04.038
it was very important for us
not to create another

00:53:04.038 --> 00:53:04.718
rendering engine.

00:53:05.300 --> 00:53:09.320
We didn't want to -- and this
is not to say there should

00:53:09.320 --> 00:53:11.598
never be another rendering
engine, but when we looked at

00:53:11.598 --> 00:53:15.758
our options, we felt that if we
created another rendering

00:53:15.758 --> 00:53:19.938
engine with a different set of
compatibility issues at that

00:53:19.938 --> 00:53:23.978
time, it would not be a good
thing either for us or for

00:53:23.978 --> 00:53:26.898
developers, so we were very
keen to use an existing

00:53:26.898 --> 00:53:30.598
rendering engine, which also
heavily influences the

00:53:30.598 --> 00:53:32.518
choice of language that
you're going to use.

00:53:32.518 --> 00:53:34.760
Because if your browser and
engine action are in two

00:53:34.760 --> 00:53:39.918
different languages, you
will have some fun.

00:53:39.918 --> 00:53:43.478
AUDIENCE: You mentioned a few
times about your development

00:53:43.478 --> 00:53:45.058
process, working on an
open-source project, dealing

00:53:45.058 --> 00:53:49.618
with external contributors,
staying with the trunk.

00:53:49.618 --> 00:53:53.738
Can you comment on how that
compares with the closed

00:53:53.738 --> 00:53:54.838
projects within Google?

00:53:54.800 --> 00:54:00.778
Is it roughly the same with the
apps guys or the mail guys?

00:54:00.778 --> 00:54:02.378
IAN FETTE: I think
parts are the same and

00:54:02.378 --> 00:54:03.778
parts are different.

00:54:03.778 --> 00:54:08.138
Google has a very strong
culture around things like code

00:54:08.138 --> 00:54:09.878
coverage and automated testing.

00:54:09.878 --> 00:54:11.498
So a lot of --

00:54:11.498 --> 00:54:11.698
ALEX RUSSELL: And code reviews.

00:54:11.698 --> 00:54:12.978
IAN FETTE: And code reviews.

00:54:12.978 --> 00:54:16.698
So a lot of projects in Google
share that philosophy of making

00:54:16.698 --> 00:54:20.088
sure that there is something
like a continuous build so that

00:54:20.088 --> 00:54:23.260
when you check in a change, you
can see did that -- did that

00:54:23.260 --> 00:54:25.198
change break the build, did I
just hamper the productivity

00:54:25.198 --> 00:54:27.978
of other developers?

00:54:27.978 --> 00:54:31.658
But there are some unique
constraints that we face in a

00:54:31.658 --> 00:54:34.998
open-source project, especially
when we're developing things

00:54:34.998 --> 00:54:37.760
like the Chrome web store.

00:54:37.760 --> 00:54:41.138
Obviously when you start
checking in changes like that,

00:54:41.138 --> 00:54:42.858
not everyone's going to see.

00:54:42.858 --> 00:54:43.760
So I think there's some.

00:54:43.760 --> 00:54:46.718
There's a lot of shared culture
between the Chrome team and the

00:54:46.718 --> 00:54:49.598
rest of Google in terms of
common engineering practices,

00:54:49.598 --> 00:54:53.758
code review, automated testing,
but I think we also face some

00:54:53.758 --> 00:54:55.198
slightly different constraints.

00:54:55.198 --> 00:54:58.840
ERIK KAY: Yeah, I mean, the
project originated, you know,

00:54:58.840 --> 00:55:03.678
at Google so I would say that
more that we -- that the code

00:55:03.678 --> 00:55:07.578
team was influenced by Google's
existing engineering practices

00:55:07.578 --> 00:55:09.618
rather than, you know, the
other way around, right?

00:55:09.618 --> 00:55:13.160
So the code coverage, the
testing, even the frequent

00:55:13.160 --> 00:55:16.218
release process I think is in
part a reflection of the fact

00:55:16.218 --> 00:55:19.958
that Google is mostly
a web company, right?

00:55:19.958 --> 00:55:23.058
Mostly used to this being able
to push, you know, right away,

00:55:23.058 --> 00:55:27.478
you know, this week, you know,
as opposed to being on

00:55:27.478 --> 00:55:30.018
monolithic yearly release
cycles, and that we

00:55:30.018 --> 00:55:31.378
wanted to do that too.

00:55:32.118 --> 00:55:37.980
And so I think the underlying
culture at Google definitely

00:55:37.980 --> 00:55:39.660
influenced how we wanted to do
it even though we were going to

00:55:39.660 --> 00:55:41.210
be open sourced, and that was
going to make us

00:55:41.210 --> 00:55:47.260
a bit different.

00:55:47.260 --> 00:55:51.038
IAN FETTE: Any other questions?
1137
00:55:51,038 --&gt; 00:55:51,018
Yes?

00:55:51.018 --> 00:56:07.898
[UNINTELLIGIBLE QUESTION]

00:56:07.898 --> 00:56:09.638
ALEX RUSSELL: I can take
a quick shot at it.

00:56:09.638 --> 00:56:11.078
Oh, yes, of course.

00:56:11.078 --> 00:56:15.640
So the question was we have a
challenge because we have so

00:56:15.640 --> 00:56:17.980
many different dependencies
and we're adding new

00:56:17.980 --> 00:56:18.660
features all the time.

00:56:18.660 --> 00:56:21.078
So how do we manage the source
control between the trunk

00:56:21.078 --> 00:56:24.138
version, which we released the
Dev channel off of, the Beta

00:56:24.138 --> 00:56:26.878
channel, which is sort of like
the broader update, you know,

00:56:26.878 --> 00:56:28.660
it's-probably-no
t-going-to-be-on-fire version,

00:56:28.660 --> 00:56:30.060
and then the Stable channel,
which is it's definitely

00:56:30.060 --> 00:56:31.758
not on fire.

00:56:31.758 --> 00:56:35.038
So we have a couple of other
axes which are important.

00:56:35.038 --> 00:56:37.738
First we have
external web bases.

00:56:37.738 --> 00:56:40.058
So we work very closely
with the WebKit community.

00:56:40.058 --> 00:56:43.380
And that means that we try to
stay as close to the WebKit tip

00:56:43.380 --> 00:56:46.260
of trunk as possible, but if we
have to land a patch on both

00:56:46.260 --> 00:56:47.958
sides, we have to commit it in
both places and keep

00:56:47.958 --> 00:56:49.538
those in sync.

00:56:49.538 --> 00:56:52.598
We use external libraries,
things like Skia, which

00:56:52.598 --> 00:56:55.678
is our drawing library
on Windows and Linux.

00:56:55.678 --> 00:56:58.498
Skia is the graphics library
that is also shared by Android.

00:56:58.498 --> 00:57:02.478
And that component is also
a third-party component.

00:57:02.478 --> 00:57:04.840
And we've actually taken that
opportunity to break out some

00:57:04.840 --> 00:57:06.158
other components as well and
turn them into third-party

00:57:06.158 --> 00:57:09.172
dependencies with their own
sort of Google code sites and

00:57:09.172 --> 00:57:10.558
their own source control
systems and their own

00:57:10.558 --> 00:57:12.478
revision systems.

00:57:12.478 --> 00:57:13.968
So we have a lot of
dependencies in a lot of

00:57:13.968 --> 00:57:16.920
places and some complexity
about rolling revisions.

00:57:16.920 --> 00:57:18.738
So we built some tools.

00:57:18.738 --> 00:57:20.258
I mean, that's sort of like, I
think, the Google engineer way

00:57:20.258 --> 00:57:22.800
to do things is you go and you
build tools to make it happen.

00:57:22.800 --> 00:57:27.458
So instead of having just raw
subversion, we have raw

00:57:27.458 --> 00:57:30.540
subversion with a wrapper
called GClient and GCL.

00:57:30.920 --> 00:57:35.198
GCL manages change lists and
GClient helps us sink revisions

00:57:35.198 --> 00:57:38.938
to third-party dependencies so
that we can check in a file

00:57:38.938 --> 00:57:42.118
sort of like subversion
externals that allows us to

00:57:42.118 --> 00:57:44.958
lock to a particular
revision of an upstream or

00:57:44.958 --> 00:57:46.960
third-party package.

00:57:46.960 --> 00:57:49.940
And so when we say we want to
get a new version of WebKit, we

00:57:49.940 --> 00:57:52.120
change the revision number of
that third-party upstream

00:57:52.120 --> 00:57:54.398
dependency in the DEPS file.

00:57:54.398 --> 00:57:55.098
We call it a DEPS roll.

00:57:55.098 --> 00:57:58.570
And then we run it through
the continuous builds and

00:57:58.570 --> 00:58:00.418
then everybody gets it.

00:58:00.418 --> 00:58:04.738
So that's sort of the general
process is that we manage those

00:58:04.738 --> 00:58:07.600
dependencies by sort of keeping
at a little bit of

00:58:07.600 --> 00:58:07.900
an arm's length.

00:58:07.900 --> 00:58:10.360
We're trying to stay up as
quickly as possible with them.

00:58:10.360 --> 00:58:13.840
In terms of how we make
releases, there are branches.

00:58:13.840 --> 00:58:17.718
There are two branches, usually
alive at any point in time.

00:58:17.718 --> 00:58:20.278
There's the Dev channel,
which is trunk.

00:58:20.278 --> 00:58:23.958
There's the Beta channel branch
and the release table branch.

00:58:23.958 --> 00:58:27.940
And we selectively roll patches
in from trunk down to those two

00:58:27.940 --> 00:58:29.880
branches so that they turn
much less frequently

00:58:29.880 --> 00:58:30.900
than trunk does.

00:58:30.900 --> 00:58:35.320
Does that answer the question?

00:58:35.320 --> 00:58:35.820
[UNINTELLIGIBLE ANSWER]

00:58:35.820 --> 00:58:36.038
ALEX RUSSELL: Great, yeah.

00:58:36.038 --> 00:58:39.758
ERIK KAY: One additional
follow-on I'll say is that

00:58:39.758 --> 00:58:43.178
the core part of our
release is the Dev channel.

00:58:43.178 --> 00:58:46.260
So Beta and Stable are
really just patches, mostly

00:58:46.260 --> 00:58:49.258
security bugs, little
incremental bug fixes.

00:58:49.258 --> 00:58:51.418
The philosophy, the way
we describe it, is

00:58:51.418 --> 00:58:53.118
called trunk stable.

00:58:53.158 --> 00:58:58.628
So what it means is that the
trunk of our source repository

00:58:58.628 --> 00:59:02.538
should always be buildable,
should always be in a reliable,

00:59:02.538 --> 00:59:06.158
usable, shippable state
at any moment in time.

00:59:06.158 --> 00:59:08.998
Now, we're not perfect about
that, but we're pretty

00:59:08.998 --> 00:59:10.198
close, actually.

00:59:10.198 --> 00:59:15.078
And so what that means to be
trunk stable, it puts a bit

00:59:15.078 --> 00:59:18.998
more onus on each developer
with each check-in to think

00:59:18.998 --> 00:59:21.378
about how your check-in is
going to keep it stable.

00:59:21.378 --> 00:59:27.578
So, for example, when Ben
Goodger, UI lead, you know,

00:59:27.578 --> 00:59:31.518
landed a -- wanted to redesign
how the tab system worked, the

00:59:31.518 --> 00:59:35.958
underlying drawing and user
interaction mechanism, you can

00:59:35.958 --> 00:59:38.578
imagine that that was going to
be a pretty destabilizing

00:59:38.578 --> 00:59:40.818
change, and it's pretty hard
to land that in a

00:59:40.818 --> 00:59:42.498
trunk-stable way.

00:59:42.498 --> 00:59:46.358
But the way he did it was to
essentially have to land a

00:59:46.358 --> 00:59:50.420
completely separate fork of
code that duplicated much of

00:59:50.420 --> 00:59:52.580
the logic that was
in the other one.

00:59:52.580 --> 00:59:55.040
So have two separate versions
of the code simultaneously in

00:59:55.040 --> 00:59:59.138
the tree that were controlled
via a command line switch.

00:59:59.138 --> 01:00:01.958
So basically, you land
the new feature and

01:00:01.958 --> 01:00:02.480
it's behind of switch.

01:00:03.660 --> 01:00:05.880
By default, you get
the old behavior.

01:00:05.880 --> 01:00:07.318
If you use the switch, you
get the new behavior.

01:00:07.318 --> 01:00:10.960
As you iterate, the new feature
gets more and more stable.

01:00:10.960 --> 01:00:12.300
You start to feel
better about it.

01:00:12.300 --> 01:00:15.598
At some point, you flip
the switch the other way.

01:00:15.598 --> 01:00:18.598
So you still have a switch, but
it now is give me the old

01:00:18.598 --> 01:00:21.858
behavior, please, type of
switch because you

01:00:21.858 --> 01:00:23.678
broke something.

01:00:23.678 --> 01:00:27.858
But the -- but you're trusting
it to be stable enough.

01:00:27.858 --> 01:00:30.078
But because you've got
them still both in there,

01:00:30.078 --> 01:00:31.798
it's easy to revert.

01:00:31.798 --> 01:00:33.298
It's easy to say oops,
I broke something.

01:00:33.298 --> 01:00:35.018
Let me quick switch it back
for a few revisions while

01:00:35.018 --> 01:00:36.938
I fix it some more.

01:00:36.938 --> 01:00:38.718
Now we'll try it again.

01:00:38.718 --> 01:00:45.258
And so it's more work for us as
developers, but in the end,

01:00:45.258 --> 01:00:48.078
it's actually a huge net
productivity gain because if

01:00:48.078 --> 01:00:51.680
you've ever worked on projects
that are not -- don't have the

01:00:51.680 --> 01:00:56.158
trunk-stable philosophy, you
get into a state where

01:00:56.158 --> 01:00:58.158
people can't build.

01:00:58.158 --> 01:01:01.238
You know, where the tree is
broken for long stretches of

01:01:01.238 --> 01:01:05.318
time, where regressions creep
in and no one knows where they

01:01:05.318 --> 01:01:09.818
started, and trying to track
those down becomes a nightmare.

01:01:09.818 --> 01:01:14.178
Or you work on large feature
branches for months at a time

01:01:14.178 --> 01:01:18.718
that suddenly land in one
gigantic merge, and that

01:01:18.718 --> 01:01:19.858
suddenly destabilizes
everything.

01:01:20.178 --> 01:01:24.378
So while it's more work for
each individual patch, the

01:01:24.378 --> 01:01:28.578
net effect is a big win.

01:01:28.578 --> 01:01:31.318
IAN FETTE: So I see our
clock in the back has

01:01:31.318 --> 01:01:32.098
actually hit zero.

01:01:34.178 --> 01:01:37.558
I'm supposing that means we are
probably out of time, so I'd

01:01:37.558 --> 01:01:40.198
like to take this opportunity
to thank everyone in the

01:01:40.198 --> 01:01:43.038
audience for coming, in asking
a great set of questions.

01:01:43.038 --> 01:01:44.158
Thank you all so much.

01:01:44.158 --> 01:01:46.618
It's great to get
this feedback.

01:01:46.618 --> 01:01:49.574
And I hope you enjoy the rest
of your time here at Google IO.

01:01:50.598 --> 01:01:53.458
And we'll probably be out in
the hall for a little bit if

01:01:53.458 --> 01:01:58.458
you have any other questions
that you want to ask Thanks.

