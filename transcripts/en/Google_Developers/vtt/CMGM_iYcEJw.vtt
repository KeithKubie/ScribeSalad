WEBVTT
Kind: captions
Language: en

00:00:09.840 --> 00:00:15.370
Hi, I'm Hernan Liendo, one of the 13 Google Developers Experts Of Cloud Platform, I've been

00:00:15.370 --> 00:00:19.360
a university professor for 15 years. I'm also the Co-founder of Zupcat. As I've been

00:00:19.360 --> 00:00:23.610
telling you in the presentations,
massive games are used by billon

00:00:23.610 --> 00:00:29.920
of users. And tough is a game, we require to
have a safety similar to a banking

00:00:29.920 --> 00:00:34.500
application, because the games generate economic transactions and must be safe.

00:00:34.500 --> 00:00:39.830
One of the things we did to control
this was to generate audit records

00:00:39.830 --> 00:00:44.700
of the events that the user games take.
You can imagine that if we have

00:00:44.700 --> 00:00:49.480
million users in some tables and
those users, in their various sessions, generate

00:00:49.480 --> 00:00:54.510
thousands of events, then we are beginning
to have tables that have billions

00:00:54.510 --> 00:00:59.120
of registers. In this presentation I will
tell you how we can work with that amount

00:00:59.120 --> 00:01:04.640
of data. BigQuery is an ideal solution
to work with tables that have a big

00:01:04.640 --> 00:01:10.680
amount of data, but its query does not occur
so frequently. It is ideal for our

00:01:10.680 --> 00:01:15.300
audit tables. BigQuery
provides a interface similar to a SQL data

00:01:15.300 --> 00:01:22.300
base, where we can do Select queries
with known commands.

00:01:23.979 --> 00:01:28.259
But it does something that SQL doesn't do. That is to process huge amount of information

00:01:28.259 --> 00:01:33.640
very fast. This does it because when we execute a query, it instance multiple servers

00:01:33.640 --> 00:01:38.890
in parallel to make it along several Terabytes of information in just seconds.  A fundamental

00:01:38.890 --> 00:01:43.950
aspect of BigQuery is its scheme price and this is the reason that we decided to use it.

00:01:43.950 --> 00:01:49.229
In this scheme we're are not charged when we incorporate data into the database

00:01:49.229 --> 00:01:54.200
or when we take them. The network cost is 0.
About the storage, the cost is 10

00:01:54.200 --> 00:02:00.200
times lower to the one we have in Cloud Datastore
that is already low,which makes

00:02:00.200 --> 00:02:06.539
the storage in BigQuery really low.
What BigQuery charges is the amount of

00:02:06.539 --> 00:02:10.459
bytes that are read when making a query, as in our case it is a

00:02:10.459 --> 00:02:15.800
auditory case, we have a big flow of inserts of data because of the events that the

00:02:15.800 --> 00:02:20.299
users produce, and that we rearly have to consult that data to

00:02:20.299 --> 00:02:25.879
find a strange behavior, the pricing scheme is great, we only pay

00:02:25.879 --> 00:02:30.379
when we do a query to the data base.
Now, I'll show you, step by step,

00:02:30.379 --> 00:02:35.890
the necessary code to connect to a data store of
BigQuery to create structures,

00:02:35.890 --> 00:02:39.920
to insert registers, and to consult them from a Java program.
The first step

00:02:39.920 --> 00:02:46.920
to use Query, is to activate the Billing system
un our App Engine Application.

00:02:47.879 --> 00:02:52.450
This is required because when we do queries
to the data base we're incurring

00:02:52.450 --> 00:02:59.060
into expenses.  The next step is to give editing persmission to a special admin account

00:02:59.060 --> 00:03:03.799
that already exists in our application,
but we need to activate it. The next thing

00:03:03.799 --> 00:03:08.049
we need to do is to connect to the data base, and this is quite different if we want to

00:03:08.049 --> 00:03:13.219
do so from  a hosted application in App Engine, or if we want to do it from a remote

00:03:13.219 --> 00:03:18.510
application like the one we're running here en mi machine. In the first case, where we

00:03:18.510 --> 00:03:24.150
connect from App Engine, we must follow these instructions

00:03:24.150 --> 00:03:30.939
that I'll show you: first we can implement
a type class to make sure

00:03:30.939 --> 00:03:36.700
there's just one connection factory in our application and we must include the next

00:03:36.700 --> 00:03:43.700
code. These options over here obtains
the credentials of a administrator

00:03:44.230 --> 00:03:48.349
account that runs in App Engine has. Is the
one that we configured

00:03:48.349 --> 00:03:53.129
before. This let us obtain the name of
the application. And with these lines

00:03:53.129 --> 00:03:58.560
we obtain an object that let us connect
to BigQuery from an App Engine

00:03:58.560 --> 00:04:04.859
server. If we need to connect
from a client, the steps are

00:04:04.859 --> 00:04:10.439
totalyy different. We have to implement
this class. a client factory

00:04:10.439 --> 00:04:17.439
from the side of the client, that when we run it for the first time, we'll have to indicate

00:04:17.590 --> 00:04:24.280
the number of the project in which our BigQuery base is being used. We obtain the number

00:04:24.280 --> 00:04:31.280
of the project in the overview field that's here,
and we also have to

00:04:32.780 --> 00:04:37.740
be able to obtain the name of the app.
We'll get this in the same page in this

00:04:37.740 --> 00:04:44.740
part. With this information we execute
this code

00:04:44.740 --> 00:04:46.740
that for the first time it will print in

00:04:47.800 --> 00:04:54.800
the screen this message and it will
give us a URL. We must enter this URL

00:04:54.960 --> 00:05:01.400
with an authenticated account from Gmail that has permission in our BigQuery application,

00:05:01.400 --> 00:05:06.990
and we have to give it the necessary permission, accept the permissions that we find when we go to the URL

00:05:06.990 --> 00:05:13.990
that prints. Then, we must paste that security
code in the application and finally

00:05:14.270 --> 00:05:20.520
we'll obtain a connection to BigQuery.
As we saw before, our BigQuery class

00:05:20.520 --> 00:05:27.520
Client factory or our  BigQuery server
factory, give as a BigQuery instance

00:05:27.759 --> 00:05:33.669
client. This class is already independent from where we're runing our queries, and

00:05:33.669 --> 00:05:40.669
it let us execute directives to BigQuery.

00:05:40.669 --> 00:05:42.120
With this method as an example we

00:05:42.120 --> 00:05:47.610
can create a table. We must put
the data set name that is kind of a table

00:05:47.610 --> 00:05:54.610
grouping, the name of the table
and a string to string map that will have

00:05:54.610 --> 00:06:01.610
each field that we want to create
and its type of data. This make a remote

00:06:02.039 --> 00:06:08.569
requirement to BigQuery configured with the data that we gave to it. And finally it builds

00:06:08.569 --> 00:06:15.280
the table with this code line.
The next code is necessary to able to insert

00:06:15.280 --> 00:06:20.250
registers to a BigQuery connection. This code is also in the BigQuery class client.

00:06:20.250 --> 00:06:25.680
that we talked about before,
and insert rows expects that we put

00:06:25.680 --> 00:06:30.650
the name of the data set, the name of the table where we'll insert those registers and a

00:06:30.650 --> 00:06:37.650
group of objects of string map objects type, where each of those registers is an entity,

00:06:39.280 --> 00:06:44.159
is an instance of the map that has many values.
In the key we'll obtain the names

00:06:44.159 --> 00:06:48.080
of the fields and in the object we'll get the value of the fields that we want to insert.

00:06:48.080 --> 00:06:55.080
We can do multiple inserts in a
requirement through a list. This

00:06:56.240 --> 00:07:02.379
code will create the necessary
codes to make that remote call and finally

00:07:02.379 --> 00:07:06.819
it will execute that insert all command
that will insert in the data base.

00:07:06.819 --> 00:07:11.000
It's frequent that an insertion requirement to the data base produces error. Because of this

00:07:11.000 --> 00:07:17.490
we envolve it in this block that will try to execute this requirement 5 times in case

00:07:17.490 --> 00:07:24.150
it fails. It wil also wait a second between each one of these executions. Lastly I want to

00:07:24.150 --> 00:07:28.960
show you the necessary code
to execute a query. A query that brings,

00:07:28.960 --> 00:07:33.860
that gather tables, and that gives us a result.
To do so we must follow this method

00:07:33.860 --> 00:07:40.860
the execute query and give it a string,
this string is one that supports BigQuery

00:07:41.199 --> 00:07:48.080
that will also give back a map which key is the name of the field and which value is

00:07:48.080 --> 00:07:53.110
the result. And as the result are a lot usually,
that will be enveloped in a

00:07:53.110 --> 00:08:00.110
list. This code basically prepares
the Query, that we have

00:08:01.030 --> 00:08:05.819
here and it will start to paginate the results,
that can be many, until

00:08:05.819 --> 00:08:12.819
it has no more results. These same queries can be executed in the BigQuery console

00:08:13.740 --> 00:08:18.580
visually, so we can test it here.
For example this one that I have here

00:08:18.580 --> 00:08:22.750
that brings me all the auditory fields
of a user that has this ID, ordered by

00:08:22.750 --> 00:08:27.789
occurrence time of the event in
a descendent way. Now I will show you

00:08:27.789 --> 00:08:33.200
how we do a query in the BigQuery web interface. As you can see here I must access

00:08:33.200 --> 00:08:39.919
to bigquery cloud.google.com and
I'll be able to to load my queries. I'll bring an

00:08:39.919 --> 00:08:46.570
old query. Notice is identical to SQL. In this case I'm bringing all the

00:08:46.570 --> 00:08:53.000
registers of my auditory table where
the user is the one that is here, ordered by

00:08:53.000 --> 00:09:00.000
its occurrence date in a descendent way. When I execute the query I can see how long is

00:09:00.420 --> 00:09:06.100
taking to obtain those dates. And next this will tell me the amount

00:09:06.100 --> 00:09:10.920
of bytes that had to process to do this query.
Remember that this relates to

00:09:10.920 --> 00:09:17.130
the consult price, and down here
I can see the results. This same query

00:09:17.130 --> 00:09:22.970
can be executed with Java code, like I showed you in the previous code. BigQuery

00:09:22.970 --> 00:09:28.120
is a great solution that is perfect for
storage and massive events of users

00:09:28.120 --> 00:09:33.530
analysis. In this presentations I was able to tell you some keys to operate heats. We also

00:09:33.530 --> 00:09:39.840
talked about persistence strategies
of massive data. We also talked

00:09:39.840 --> 00:09:45.070
about Simple-datastore, a framework that we use a lot and that we were able to release as an Open Source project.

00:09:45.070 --> 00:09:49.480
Finally I gave you many BigQuery details.
I really hope that this presentations

00:09:49.480 --> 00:09:51.640
are useful! I hope to see you soon!

