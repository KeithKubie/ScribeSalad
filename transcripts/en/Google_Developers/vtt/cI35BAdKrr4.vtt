WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.009
NAVNEET JONEJA: My name
is Navneet Joneja.

00:00:02.009 --> 00:00:04.680
I'm the product manager for
Google Cloud Storage.

00:00:04.680 --> 00:00:07.620
With me is Nathan Herring,
an engineer on the team.

00:00:07.620 --> 00:00:10.260
And we're here to talk to you
about how you can use Google

00:00:10.260 --> 00:00:12.960
Cloud Storage to power your
application's data.

00:00:16.340 --> 00:00:18.190
So a quick overview of what
we're going to talk about

00:00:18.190 --> 00:00:21.080
today, we're going to start
off by talking about Cloud

00:00:21.080 --> 00:00:25.030
Storage in general and why it's
an interesting set of

00:00:25.030 --> 00:00:28.350
tools for a large number
of applications.

00:00:28.350 --> 00:00:31.210
We'll spend some time diving
into Cloud Storage as a

00:00:31.210 --> 00:00:33.900
service and its benefits.

00:00:33.900 --> 00:00:36.130
And then finally we'll talk
about several advanced use

00:00:36.130 --> 00:00:39.110
cases in the context of an
application that you might

00:00:39.110 --> 00:00:40.360
build yourself.

00:00:45.900 --> 00:00:47.720
So while you're watching this
talk, we hope you'll ask

00:00:47.720 --> 00:00:51.130
yourself just one question which
is, what could you do

00:00:51.130 --> 00:00:53.600
with your applications
if you had access to

00:00:53.600 --> 00:00:55.850
storage as a service?

00:00:55.850 --> 00:01:01.620
If you knew that your data was
always available and had great

00:01:01.620 --> 00:01:03.570
performance because it was
backed by the same

00:01:03.570 --> 00:01:07.100
infrastructure that Google uses
for its own applications,

00:01:07.100 --> 00:01:14.290
and was backed by 99.9% SLA--

00:01:14.290 --> 00:01:16.770
if you could get the benefit of
transparent scaling built

00:01:16.770 --> 00:01:19.830
on the same infrastructure that
lets YouTube handle over

00:01:19.830 --> 00:01:25.200
60 hours of video uploads every
minute, and if it's cost

00:01:25.200 --> 00:01:26.830
effective as well?

00:01:26.830 --> 00:01:30.290
Because you only paid for what
you used, so you didn't have

00:01:30.290 --> 00:01:33.820
to worry about buying a large
amount of storage hardware in

00:01:33.820 --> 00:01:37.760
advance, planning your capacity,
worrying about what

00:01:37.760 --> 00:01:41.010
happens if you bought too little
storage, which means

00:01:41.010 --> 00:01:43.840
that you might have to scramble
to get more capacity.

00:01:43.840 --> 00:01:46.630
Or the worst case scenario,
maybe even scale down what

00:01:46.630 --> 00:01:48.200
you're doing, because
your infrastructure

00:01:48.200 --> 00:01:50.240
can't support it.

00:01:50.240 --> 00:01:53.010
On the flip side, by too much
and have a large amount of

00:01:53.010 --> 00:01:55.900
unused capacity sitting
around costing money.

00:01:55.900 --> 00:01:57.700
You don't have to worry about
either of those use cases,

00:01:57.700 --> 00:02:02.550
because with storage as a
service you just pay for what

00:02:02.550 --> 00:02:05.040
you use, and it's only cents
for the gigabytes.

00:02:05.040 --> 00:02:08.630
So it's quite cost effective.

00:02:08.630 --> 00:02:11.640
If you're like a lot of our
customers, we hope that you'll

00:02:11.640 --> 00:02:15.220
find that having access to
service like this means that

00:02:15.220 --> 00:02:18.270
you can focus on building the
application, and leave the

00:02:18.270 --> 00:02:20.630
infrastructure, the scaling,
the performance

00:02:20.630 --> 00:02:22.290
availability to Google.

00:02:25.270 --> 00:02:28.250
Let's talk about the
foundations.

00:02:28.250 --> 00:02:31.680
At its core, Google Cloud
Storage is a service that lets

00:02:31.680 --> 00:02:36.280
you store your data on Google's
infrastructure, as I

00:02:36.280 --> 00:02:38.690
mentioned, with very high
availability and performance

00:02:38.690 --> 00:02:40.120
and reliability.

00:02:40.120 --> 00:02:43.080
And that's primarily because
it's built on great

00:02:43.080 --> 00:02:43.640
Infrastructure.

00:02:43.640 --> 00:02:48.980
But also because we replicate
data, we have multiple layers

00:02:48.980 --> 00:02:49.610
of redundancy.

00:02:49.610 --> 00:02:52.630
So we have data replicated
across data centers, as well

00:02:52.630 --> 00:02:56.210
as within the data center to
make sure that your data is

00:02:56.210 --> 00:02:58.760
both durable and reliable.

00:02:58.760 --> 00:03:03.470
And in fact, even if we were to
lose a data center, which

00:03:03.470 --> 00:03:05.790
does that happen every now
and then the world--

00:03:05.790 --> 00:03:09.930
an amusing anecdote I heard was
a garbage truck crashing

00:03:09.930 --> 00:03:15.750
into a pole, knocking over an
optical fiber, and cutting the

00:03:15.750 --> 00:03:17.770
data center off for
a few minutes.

00:03:17.770 --> 00:03:20.640
But in general this stuff
happens, and you want to make

00:03:20.640 --> 00:03:23.260
sure that if you're building an
application that faces end

00:03:23.260 --> 00:03:26.130
users, that you don't have to
worry about this stuff.

00:03:26.130 --> 00:03:28.630
It turns out that because
of the replication, the

00:03:28.630 --> 00:03:30.960
redundancy, with Cloud Storage
you don't have to worry about

00:03:30.960 --> 00:03:32.920
issues like that.

00:03:32.920 --> 00:03:36.820
I also would like to mention
that with Google Cloud

00:03:36.820 --> 00:03:40.050
Storage, we offer two different
regions, one in the

00:03:40.050 --> 00:03:41.550
US and one in Europe.

00:03:41.550 --> 00:03:43.820
And both of those are backed
by the same kind of

00:03:43.820 --> 00:03:46.630
infrastructure, so multiple
layers of redundancy.

00:03:46.630 --> 00:03:48.890
And it's powered by the
Google network.

00:03:48.890 --> 00:03:53.050
So Google has spent more than
a decade building out a very

00:03:53.050 --> 00:03:55.890
reliable, high performance,
highly available network,

00:03:55.890 --> 00:03:59.650
because we need that for search,
for YouTube, for all

00:03:59.650 --> 00:04:01.120
the other sites we serve.

00:04:01.120 --> 00:04:04.630
And we put the same network to
work for you and your data

00:04:04.630 --> 00:04:07.410
when you store your data
in cloud storage.

00:04:07.410 --> 00:04:09.580
And you'll find very quickly--

00:04:09.580 --> 00:04:11.420
and you may already
have found--

00:04:11.420 --> 00:04:14.930
that when you trust your
applications, your data to the

00:04:14.930 --> 00:04:17.660
cloud, that one of the
most important

00:04:17.660 --> 00:04:19.339
things is the network.

00:04:19.339 --> 00:04:23.020
Because ultimately it defines
the kind of performance, the

00:04:23.020 --> 00:04:26.170
kind of experience you
get from the cloud.

00:04:26.170 --> 00:04:30.010
And so we think that our
innovation and our constant

00:04:30.010 --> 00:04:33.290
focus on the reliability and
quality of the network really

00:04:33.290 --> 00:04:35.530
shows in all our services
and in Cloud

00:04:35.530 --> 00:04:36.780
Service Storage as well.

00:04:40.320 --> 00:04:42.530
And then finally, I talked a
little bit about scaling.

00:04:42.530 --> 00:04:45.000
With Cloud Storage you can
store any amount of data.

00:04:45.000 --> 00:04:48.540
So as you find new reasons to
gather data or store data in

00:04:48.540 --> 00:04:51.300
the Cloud, you can just
stick it in the cloud.

00:04:51.300 --> 00:04:55.300
And you can store up to five
terabytes per piece of data.

00:04:55.300 --> 00:04:57.900
So you effectively
get access to

00:04:57.900 --> 00:05:00.990
virtually unlimited scaling.

00:05:00.990 --> 00:05:04.720
So I'm going to pause there
and stop talking about the

00:05:04.720 --> 00:05:06.990
service, and actually show you
the service in action.

00:05:09.600 --> 00:05:11.440
It's extremely easy to sign
up for the service.

00:05:11.440 --> 00:05:14.770
All you do is you go to
developers.google.com/console,

00:05:14.770 --> 00:05:16.790
which is the API's console.

00:05:16.790 --> 00:05:19.780
If you've used any Google API,
you've been here before.

00:05:19.780 --> 00:05:22.060
If not, that's the URL.

00:05:22.060 --> 00:05:33.480
So you go there, and you turn on
the Cloud Storage API, and

00:05:33.480 --> 00:05:34.760
that's pretty much it.

00:05:34.760 --> 00:05:37.110
Because it's a paid service, if
you haven't entered billing

00:05:37.110 --> 00:05:38.790
information in the past, it
will ask you for billing

00:05:38.790 --> 00:05:41.110
information, and then
you're good to go.

00:05:41.110 --> 00:05:44.550
So once you do that, you
actually already have access.

00:05:44.550 --> 00:05:47.670
I've done that already here
in the background.

00:05:47.670 --> 00:05:49.950
You can actually access all the
information need to access

00:05:49.950 --> 00:05:53.060
Cloud Storage right here from
within the console.

00:05:53.060 --> 00:05:55.870
And then let me show you
what that looks like.

00:05:55.870 --> 00:06:00.220
So the Cloud Storage Service
actually has a RESTful API.

00:06:00.220 --> 00:06:02.690
What I'm going to be showing
you is two tools that we've

00:06:02.690 --> 00:06:04.860
built ourselves using the API.

00:06:04.860 --> 00:06:07.780
You can replicate all this
functionality yourself, but we

00:06:07.780 --> 00:06:10.320
find that for our users these
two tools are very easy and

00:06:10.320 --> 00:06:12.120
very good ways to get started.

00:06:12.120 --> 00:06:17.390
I'm going to start by showing
you a tool called gsutil.

00:06:17.390 --> 00:06:21.632
And because I don't trust my
typing powers, I have put a

00:06:21.632 --> 00:06:23.060
little shell script, but that's
what it looks like.

00:06:23.060 --> 00:06:25.640
So it's a very, very familiar
looking tool.

00:06:25.640 --> 00:06:28.540
It looks almost like
a Unix copy.

00:06:28.540 --> 00:06:30.800
You're copying a bunch
of data from a folder

00:06:30.800 --> 00:06:31.740
on the local directory.

00:06:31.740 --> 00:06:34.020
I actually have a bunch
of data in a

00:06:34.020 --> 00:06:36.610
folder called Assets.

00:06:36.610 --> 00:06:38.380
And what I am actually
uploading is

00:06:38.380 --> 00:06:39.260
JavaScript web game.

00:06:39.260 --> 00:06:42.010
So I'm going to take an entire
JavaScript web game, and stick

00:06:42.010 --> 00:06:43.860
it in the cloud right now.

00:06:43.860 --> 00:06:46.190
I'm going to stick it in the
second part, which looks like,

00:06:46.190 --> 00:06:47.980
basically, a URL.

00:06:47.980 --> 00:06:50.230
It's a bucket, which
is a container for

00:06:50.230 --> 00:06:52.050
storage in Cloud Storage.

00:06:52.050 --> 00:06:56.290
And so what I'm going to do
right here is kick that off.

00:06:56.290 --> 00:07:00.270
And while it's happening, I'm
going to show you the second

00:07:00.270 --> 00:07:03.430
tool, which is the Cloud
Storage Manager.

00:07:03.430 --> 00:07:06.140
And this is a very simple, basic
Web UI which lets you

00:07:06.140 --> 00:07:07.990
get data into and out
of the cloud.

00:07:07.990 --> 00:07:09.850
And we find that for early
tasks, when you're just

00:07:09.850 --> 00:07:12.810
getting started with the
service, a lot of users will

00:07:12.810 --> 00:07:14.920
come and start off here.

00:07:14.920 --> 00:07:16.790
It doesn't offer all the
capabilities of the

00:07:16.790 --> 00:07:17.610
Command Line Tool.

00:07:17.610 --> 00:07:19.960
This is more for quickly getting
started, quickly

00:07:19.960 --> 00:07:21.960
looking at your data.

00:07:21.960 --> 00:07:23.910
I'm guessing that by now all
the data is already in the

00:07:23.910 --> 00:07:27.590
cloud, so let me click through
on the bucket, and

00:07:27.590 --> 00:07:29.060
there you have it.

00:07:29.060 --> 00:07:32.690
So let me talk quickly about one
more piece of secret sauce

00:07:32.690 --> 00:07:35.410
in here before I show you
the tool in action.

00:07:38.890 --> 00:07:40.960
So all the data's copied
to the cloud.

00:07:40.960 --> 00:07:44.160
If you recall, the URL actually
looked like a

00:07:44.160 --> 00:07:47.380
website, www.gcsdemo.org.

00:07:47.380 --> 00:07:50.830
That's because, actually,
I own that domain.

00:07:50.830 --> 00:07:54.230
I've created CNAME redirect
to Cloud Storage.

00:07:54.230 --> 00:07:55.460
So that domain is actually
going to be

00:07:55.460 --> 00:07:57.730
served from Cloud Storage.

00:07:57.730 --> 00:08:00.140
And so we do a little bit of
work behind the scenes.

00:08:00.140 --> 00:08:02.930
It's not a lot of work, but I
kind of want to talk about it,

00:08:02.930 --> 00:08:04.430
because it's both a benefit,
and it's a

00:08:04.430 --> 00:08:05.270
little bit more work.

00:08:05.270 --> 00:08:07.570
But we actually ask you to prove
that you own a domain.

00:08:07.570 --> 00:08:10.810
If you create a bucket which
looks like a domain, we ask

00:08:10.810 --> 00:08:12.270
that you prove that you own the
domain, and that's done

00:08:12.270 --> 00:08:14.790
through the standard Google
Webmaster Tools.

00:08:14.790 --> 00:08:19.750
So it's very simple to prove
it, and once you do that

00:08:19.750 --> 00:08:22.990
you're the only person who can
actually create that domain.

00:08:22.990 --> 00:08:25.000
And to prove that, I've created
an alternate config

00:08:25.000 --> 00:08:26.790
with a different user
who doesn't

00:08:26.790 --> 00:08:27.880
actually own the domain.

00:08:27.880 --> 00:08:31.070
And I'm going to try and create
that random bucket in

00:08:31.070 --> 00:08:32.000
the same domain.

00:08:32.000 --> 00:08:34.549
Oops, no bucket for you.

00:08:34.549 --> 00:08:37.620
So it's very easy to reserve
a domain that you own, so

00:08:37.620 --> 00:08:38.770
there's no squatting.

00:08:38.770 --> 00:08:40.080
You prove you own the domain,
you can create

00:08:40.080 --> 00:08:41.330
buckets in that domain.

00:08:44.179 --> 00:08:47.115
So now let me show you that
web game in action.

00:08:49.680 --> 00:08:53.140
You can see the URL is
just www.gcsdemo.org.

00:08:53.140 --> 00:09:00.170
And here is the game.

00:09:00.170 --> 00:09:04.730
Of course, I'm actually better
at desktop pool that I am at

00:09:04.730 --> 00:09:06.160
real pool, because that would
never have happened.

00:09:06.160 --> 00:09:09.320
So as I mentioned, you can
build new applications.

00:09:09.320 --> 00:09:11.450
That's just a very small
taste of what you can

00:09:11.450 --> 00:09:12.880
do with Cloud Storage.

00:09:12.880 --> 00:09:15.250
It's often a very easy getting
started thing, and people

00:09:15.250 --> 00:09:17.730
often start off by trying to
serve data, but they quickly

00:09:17.730 --> 00:09:19.710
learn that they could do a lot
more with the RESTful API.

00:09:28.940 --> 00:09:30.650
So let's talk about
the service.

00:09:30.650 --> 00:09:33.320
As I mentioned, it's
a RESTful API.

00:09:33.320 --> 00:09:36.330
The model for how you store data
in the cloud is a very

00:09:36.330 --> 00:09:40.510
fact, one level hierarchy based
on collections of data

00:09:40.510 --> 00:09:43.300
called buckets and objects.

00:09:43.300 --> 00:09:47.210
So anybody bucket can contain
a number of objects.

00:09:47.210 --> 00:09:52.080
Buckets are sort of a nice one
level of hierarchy, so you can

00:09:52.080 --> 00:09:55.240
share common configuration
things across objects, group

00:09:55.240 --> 00:09:57.300
them, create a name space
for yourself.

00:09:57.300 --> 00:09:59.250
Nathan will spend some more time
talking about some of the

00:09:59.250 --> 00:10:03.300
cool things you can do when you
actually have a bucket.

00:10:03.300 --> 00:10:05.380
So once you've created a bucket
and you have your data

00:10:05.380 --> 00:10:08.090
in the cloud, we want to make
sure that you have very easy

00:10:08.090 --> 00:10:09.300
access to it.

00:10:09.300 --> 00:10:12.510
So we've provided you with
mechanisms to stream your data

00:10:12.510 --> 00:10:13.790
into and out of the cloud.

00:10:13.790 --> 00:10:16.660
So you don't necessarily have
to worry about gathering all

00:10:16.660 --> 00:10:19.100
the data on your server, and
then forwarding it to us.

00:10:19.100 --> 00:10:21.080
You can actually store your data
in the cloud as soon as

00:10:21.080 --> 00:10:24.200
you get it using the standard
HTTP chunked

00:10:24.200 --> 00:10:26.200
transfer encoding mechanism.

00:10:26.200 --> 00:10:28.430
You could also stream data out
of the cloud using, again,

00:10:28.430 --> 00:10:30.390
standard content-range
requests.

00:10:30.390 --> 00:10:34.010
So it's very, very standard
HTTP compliant.

00:10:34.010 --> 00:10:37.240
We also provide less standard,
because HTTP doesn't have a

00:10:37.240 --> 00:10:40.890
protocol for this, the ability
to resume transfers, both

00:10:40.890 --> 00:10:43.700
upload up and down.

00:10:43.700 --> 00:10:46.340
For uploading data, this is
actually a very important

00:10:46.340 --> 00:10:47.670
thing for a lot of
our customers.

00:10:47.670 --> 00:10:50.220
Because when they build
applications which target end

00:10:50.220 --> 00:10:53.750
users, and they want to allow
end users, for example, to

00:10:53.750 --> 00:10:57.900
submit content-- let's say
you're building, I don't know,

00:10:57.900 --> 00:11:00.960
an application that let's people
submit karaoke songs

00:11:00.960 --> 00:11:03.250
that have people vote on them.

00:11:03.250 --> 00:11:06.410
But you want to have end users
submit data to the cloud.

00:11:06.410 --> 00:11:08.710
You want to make sure that if
they're on flaky connections,

00:11:08.710 --> 00:11:12.030
which does sometimes happen,
perhaps they're taking a video

00:11:12.030 --> 00:11:14.350
of themselves on their phone
in a karaoke bar at

00:11:14.350 --> 00:11:15.930
1 o'clock at night.

00:11:15.930 --> 00:11:17.840
You want to make sure that if
the video upload to the cloud

00:11:17.840 --> 00:11:21.270
breaks off, it just resumes
where it left off.

00:11:21.270 --> 00:11:23.820
And that's actually made
very easy by the

00:11:23.820 --> 00:11:26.440
resumable transfer protocol.

00:11:26.440 --> 00:11:31.100
We also make it very easy to
store and retrieve data to the

00:11:31.100 --> 00:11:33.640
browser, again, because
we use standard HTTP

00:11:33.640 --> 00:11:35.880
for all this stuff.

00:11:35.880 --> 00:11:39.240
And we make it very easy to
authenticate the service using

00:11:39.240 --> 00:11:40.610
either app Engine or
compute engine.

00:11:40.610 --> 00:11:43.930
So if you're using compute
engine, you actually don't

00:11:43.930 --> 00:11:47.820
have to worry about all the
steps required by the OAuth

00:11:47.820 --> 00:11:50.750
standard to prove that you
are who you say you are.

00:11:50.750 --> 00:11:52.880
The application container takes
care of that for you in

00:11:52.880 --> 00:11:53.440
the background.

00:11:53.440 --> 00:11:55.620
So you can actually just access
the service without

00:11:55.620 --> 00:11:58.750
worrying OAuth at all.

00:11:58.750 --> 00:12:01.190
Let's talk about one more aspect
of Cloud Storage which

00:12:01.190 --> 00:12:02.270
I think is really important.

00:12:02.270 --> 00:12:06.240
And we've actually spent a lot
of time working on making sure

00:12:06.240 --> 00:12:08.910
you have, what's called, strong
data consistency.

00:12:08.910 --> 00:12:12.110
And strong data consistency
means that when you write a

00:12:12.110 --> 00:12:14.910
piece of data to the cloud from
anywhere in the world,

00:12:14.910 --> 00:12:19.390
you want to make sure that you
or your end users anywhere in

00:12:19.390 --> 00:12:22.190
the world get access to that
same piece of data

00:12:22.190 --> 00:12:23.250
immediately.

00:12:23.250 --> 00:12:26.190
Now the contrast is strong
data consistency versus

00:12:26.190 --> 00:12:27.580
eventual consistency.

00:12:27.580 --> 00:12:29.930
When you look at a lot of
distributed systems, there's

00:12:29.930 --> 00:12:31.690
this term called eventual
consistency

00:12:31.690 --> 00:12:33.210
which gets thrown around.

00:12:33.210 --> 00:12:37.900
Which effectively means that
over time the entire system

00:12:37.900 --> 00:12:39.560
reflects every update
made to it.

00:12:39.560 --> 00:12:42.818
So to write a new piece of data
from Europe, and you try

00:12:42.818 --> 00:12:45.620
to read it back from the US,
eventually the whole system

00:12:45.620 --> 00:12:48.260
will have a consistent view of
what data exists in the cloud.

00:12:48.260 --> 00:12:51.750
But in the short term, it could
look like your data

00:12:51.750 --> 00:12:54.560
doesn't exist or you could see
an older version of the data.

00:12:54.560 --> 00:12:58.100
And we think that's actually
a lot of complexity and can

00:12:58.100 --> 00:13:00.430
cause all kinds of
interesting--

00:13:00.430 --> 00:13:03.540
if your forensic analysis
is interesting--

00:13:03.540 --> 00:13:07.920
but more often painful aspects
to the user experience.

00:13:07.920 --> 00:13:09.850
So we want to make sure that
you can trust that once you

00:13:09.850 --> 00:13:11.920
write your data in the cloud,
you could just read back

00:13:11.920 --> 00:13:14.260
immediately from anywhere.

00:13:14.260 --> 00:13:16.760
And hand in hand with that, we
actually provide you with the

00:13:16.760 --> 00:13:20.480
ability to order your updates,
so that you could actually,

00:13:20.480 --> 00:13:23.190
when you scale up and you have
a massive number of clients

00:13:23.190 --> 00:13:26.190
reading and writing from the
cloud, you could make sure

00:13:26.190 --> 00:13:29.020
that you know when multiple
people are trying to update

00:13:29.020 --> 00:13:32.060
the same piece of data, which
update succeeded.

00:13:32.060 --> 00:13:33.940
And so if you actually want
to do something like read,

00:13:33.940 --> 00:13:36.430
modify, write, these two
characteristics are extremely

00:13:36.430 --> 00:13:38.570
important, and they're
there for you.

00:13:41.720 --> 00:13:43.290
Let's talk about sharing
and controlling

00:13:43.290 --> 00:13:44.910
access to your data.

00:13:44.910 --> 00:13:48.820
So we provide you with
mechanisms to provide access

00:13:48.820 --> 00:13:52.880
control, or ACLs, over
all your data using

00:13:52.880 --> 00:13:55.370
either groups or users.

00:13:55.370 --> 00:13:59.060
So we often find that our
customers actually tend to

00:13:59.060 --> 00:14:01.120
coalesce around group ACLs.

00:14:01.120 --> 00:14:03.790
And the reason for that is
because when you share data

00:14:03.790 --> 00:14:07.340
with groups of people, that's
actually the most natural

00:14:07.340 --> 00:14:08.140
sharing mechanism.

00:14:08.140 --> 00:14:10.140
You're often trying to share
data in a corporate

00:14:10.140 --> 00:14:13.090
environments with other teams
the company, potentially your

00:14:13.090 --> 00:14:14.580
customers, your partners.

00:14:14.580 --> 00:14:17.270
If you're sharing data with
users, it's often I'm sharing

00:14:17.270 --> 00:14:20.360
it with my family, not really
with one person.

00:14:20.360 --> 00:14:23.600
And that also makes it much
easier when you think about

00:14:23.600 --> 00:14:25.890
the composition of the group
you're sharing with changing.

00:14:25.890 --> 00:14:30.150
So let's say you're implementing
a content

00:14:30.150 --> 00:14:33.790
management system which lets
your graphic designers share

00:14:33.790 --> 00:14:35.500
their data with the people
who are actually

00:14:35.500 --> 00:14:37.310
putting up your website.

00:14:37.310 --> 00:14:42.130
And let's say one of your
graphic artist decided to move

00:14:42.130 --> 00:14:44.760
on over to the website design
team, so they get different

00:14:44.760 --> 00:14:46.320
access control.

00:14:46.320 --> 00:14:48.770
You just change the membership
of those two groups, and that

00:14:48.770 --> 00:14:50.150
data flows through.

00:14:50.150 --> 00:14:53.690
So it's actually much easier to
manage access to your data

00:14:53.690 --> 00:14:56.050
where you could think about in
terms of groups of people and

00:14:56.050 --> 00:14:58.030
who gets access to your data.

00:14:58.030 --> 00:15:00.640
And to extend that and make that
even easier we actually

00:15:00.640 --> 00:15:02.530
provide you with a mechanism
called the

00:15:02.530 --> 00:15:03.700
default object ACLs.

00:15:03.700 --> 00:15:05.400
So this is one of the nice
things you can do at a bucket

00:15:05.400 --> 00:15:09.180
level is set up the default
access control on every new

00:15:09.180 --> 00:15:12.120
piece of data which shows
up in a bucket.

00:15:12.120 --> 00:15:15.120
So if you're actually creating
an internet share, so you're

00:15:15.120 --> 00:15:18.200
sharing data with people all
over the internet, you can

00:15:18.200 --> 00:15:22.770
just go in and set up the
default object ACLs when you

00:15:22.770 --> 00:15:24.340
create the bucket.

00:15:24.340 --> 00:15:26.690
And then from then onwards, the
data which shows up will

00:15:26.690 --> 00:15:28.530
automatically have the
right permissions.

00:15:28.530 --> 00:15:32.090
So you can control access,
set it up once, and then

00:15:32.090 --> 00:15:33.500
forget about it.

00:15:33.500 --> 00:15:36.710
We find that's really
powerful.

00:15:36.710 --> 00:15:39.370
In some cases, you actually
don't want to focus on using

00:15:39.370 --> 00:15:43.300
access control programmatically
and through a

00:15:43.300 --> 00:15:44.840
declaration on the object.

00:15:44.840 --> 00:15:46.910
You actually want to do that
dynamically in your

00:15:46.910 --> 00:15:48.450
application.

00:15:48.450 --> 00:15:51.230
And when you're trying to do
that, one thing we offer you

00:15:51.230 --> 00:15:52.790
is the ability to actually
create what

00:15:52.790 --> 00:15:54.480
we call Signed URLs.

00:15:54.480 --> 00:15:59.120
So you effectively delegate
permission to any user who has

00:15:59.120 --> 00:16:01.910
that special token for a limited
amount of time to act

00:16:01.910 --> 00:16:04.110
on behalf of the person
who signed the URL.

00:16:04.110 --> 00:16:06.930
And so you could, for example,
implement an application that

00:16:06.930 --> 00:16:09.660
lets you sell premium content.

00:16:09.660 --> 00:16:13.080
So let's say you're selling
music, you can give a person a

00:16:13.080 --> 00:16:15.930
token that let's then download
the song they just bought for,

00:16:15.930 --> 00:16:17.170
let's say, an hour.

00:16:17.170 --> 00:16:19.810
And after that, if the URL
expired, they can come back

00:16:19.810 --> 00:16:21.260
and get a new one.

00:16:21.260 --> 00:16:24.330
So you control access to
your applications.

00:16:24.330 --> 00:16:25.810
And finally we make
all this really

00:16:25.810 --> 00:16:27.350
easy through the browser.

00:16:27.350 --> 00:16:32.320
So if you actually hand out a
URL to a person, all Cloud

00:16:32.320 --> 00:16:36.100
Storage access keys are URLs,
and you want them to be able

00:16:36.100 --> 00:16:38.460
to access it from the browser,
all they do is to log in with

00:16:38.460 --> 00:16:41.420
their account, they prove to us
that they're the person who

00:16:41.420 --> 00:16:43.885
they say they are, they have
access to the object, and they

00:16:43.885 --> 00:16:44.670
can download it.

00:16:44.670 --> 00:16:46.803
So it's very easy to do this
both programmatically and

00:16:46.803 --> 00:16:49.880
through the browser.

00:16:49.880 --> 00:16:52.450
So I've talked a bit about some
of the key aspects of the

00:16:52.450 --> 00:16:55.210
service, and I hope that at
this point in time you're

00:16:55.210 --> 00:16:57.660
already beginning to have some
ideas about how you can use

00:16:57.660 --> 00:16:59.020
the service.

00:16:59.020 --> 00:17:02.710
One of the ways, actually here
are a few the ways in which

00:17:02.710 --> 00:17:04.480
our customers use the service.

00:17:04.480 --> 00:17:07.390
Everything from content serving,
you saw me give a

00:17:07.390 --> 00:17:11.020
demonstration of that with the
JavaScript web app all the way

00:17:11.020 --> 00:17:14.490
up to actually storing it in the
cloud and then making use

00:17:14.490 --> 00:17:16.000
of Google's computation
technology.

00:17:16.000 --> 00:17:20.420
So actually taking the data
they've uploaded into Cloud

00:17:20.420 --> 00:17:24.849
Storage, and then using services
like Google Big Query

00:17:24.849 --> 00:17:31.520
to do multi terabyte scale SQL
queries on data in close real

00:17:31.520 --> 00:17:33.750
time, which is actually a really
powerful tool when you

00:17:33.750 --> 00:17:35.080
think about it.

00:17:35.080 --> 00:17:38.540
Or using our machine learning
tools, and everything in

00:17:38.540 --> 00:17:40.855
between, so you can move your
data, your data backups, and

00:17:40.855 --> 00:17:43.210
your archives in the cloud, make
them available to people

00:17:43.210 --> 00:17:44.580
over the internet.

00:17:44.580 --> 00:17:45.650
You can use it for
data sharing.

00:17:45.650 --> 00:17:48.880
I talked about a few of
those examples of when

00:17:48.880 --> 00:17:50.460
that might be useful.

00:17:50.460 --> 00:17:52.610
Or you can use it for any
generic storage for any

00:17:52.610 --> 00:17:54.760
application you build, so if
you're building a photo

00:17:54.760 --> 00:17:57.230
sharing app, which interestingly
you'll see in a

00:17:57.230 --> 00:17:59.240
few minutes, you can use it
to store your photographs.

00:18:02.020 --> 00:18:05.470
So we announced cloud
storage in general

00:18:05.470 --> 00:18:07.050
availability at I/O last year.

00:18:07.050 --> 00:18:09.420
And we've been hard at work
delivering several features

00:18:09.420 --> 00:18:10.970
that you've asked us for.

00:18:10.970 --> 00:18:12.480
So thank you for the feature
requests, and

00:18:12.480 --> 00:18:13.860
please keep them coming.

00:18:13.860 --> 00:18:18.630
We'll also talk about two things
that are new today.

00:18:18.630 --> 00:18:20.830
The ability to serve an entire
site, as you just

00:18:20.830 --> 00:18:22.370
saw for a while ago.

00:18:22.370 --> 00:18:25.180
We'll actually show you the code
to make that happen, and

00:18:25.180 --> 00:18:28.530
faster access to your server
access log, so you can

00:18:28.530 --> 00:18:32.080
actually perform much faster
analysis on who's using your

00:18:32.080 --> 00:18:33.950
application and how.

00:18:33.950 --> 00:18:35.890
And then we're also going to
talk about some great new

00:18:35.890 --> 00:18:38.700
technology that we're going
to ship very soon.

00:18:38.700 --> 00:18:39.970
We're going to give you
a taste of that.

00:18:39.970 --> 00:18:41.150
Some of that is going to
be available in limited

00:18:41.150 --> 00:18:42.410
availability today.

00:18:42.410 --> 00:18:44.090
And some of it is going to
be completely new, and

00:18:44.090 --> 00:18:47.290
will come out son.

00:18:47.290 --> 00:18:50.480
So to talk about all that in the
context of an application,

00:18:50.480 --> 00:18:54.502
I'd like to invite
Nathan Herring.

00:18:54.502 --> 00:18:55.752
NATHAN HERRING: Thanks,
Navneet.

00:18:59.750 --> 00:19:01.790
So I'm going to talk a little
bit about how you can use

00:19:01.790 --> 00:19:03.740
Cloud Storage in your
application, and I'm going to

00:19:03.740 --> 00:19:05.850
demonstrate this with
a little lab.

00:19:05.850 --> 00:19:10.040
So you've been working late at
night, trading ideas for your

00:19:10.040 --> 00:19:13.470
next million dollar software
project with your venture

00:19:13.470 --> 00:19:16.630
capitalists, and you've got
it, you've got the idea.

00:19:16.630 --> 00:19:19.990
You have the customers, they
have the data, and you can

00:19:19.990 --> 00:19:22.270
provide the value
added service.

00:19:22.270 --> 00:19:24.810
Well we're going to show you
how to use Cloud Storage to

00:19:24.810 --> 00:19:29.430
take end user uploads, take
action on the data they

00:19:29.430 --> 00:19:34.020
provide you, and then serve that
data back to them as well

00:19:34.020 --> 00:19:38.076
as take a look at how people
are using your service.

00:19:38.076 --> 00:19:42.720
And for that I'm going to
switch over to a demo.

00:19:42.720 --> 00:19:45.090
What Navneet showed you a little
bit before is this

00:19:45.090 --> 00:19:46.560
simple photo gallery.

00:19:46.560 --> 00:19:49.410
All of the images you're seeing
here are being served

00:19:49.410 --> 00:19:52.450
directly to your customers
from Cloud Storage, not

00:19:52.450 --> 00:19:54.510
through your website.

00:19:54.510 --> 00:19:59.400
In addition, we have an upload
tab, which you can do it right

00:19:59.400 --> 00:20:01.710
here on your Macintosh or you
could have it run in your

00:20:01.710 --> 00:20:02.980
Android browser.

00:20:02.980 --> 00:20:06.990
Either way a user can quickly
put their important data-- in

00:20:06.990 --> 00:20:09.240
this case, we're using
a photograph--

00:20:09.240 --> 00:20:12.840
hit upload, and it goes
directly to the cloud.

00:20:12.840 --> 00:20:17.060
It Does not go through
your website.

00:20:17.060 --> 00:20:20.340
Once you're done we can return
to the gallery, and all a

00:20:20.340 --> 00:20:26.790
sudden we have our new picture
here in the cloud along with

00:20:26.790 --> 00:20:27.550
all the other data.

00:20:27.550 --> 00:20:29.080
So I'm going to tell
you a little bit

00:20:29.080 --> 00:20:30.330
how we put this together.

00:20:40.910 --> 00:20:42.690
The first thing I'm going
to talk about is

00:20:42.690 --> 00:20:43.970
storing end user data.

00:20:48.040 --> 00:20:51.750
The first technology we use to
allow people to have access to

00:20:51.750 --> 00:20:54.610
Cloud Storage in this
demonstration, is we use

00:20:54.610 --> 00:20:56.880
signed post policies.

00:20:56.880 --> 00:20:59.020
That, in combination with Signed
URLs, that's something

00:20:59.020 --> 00:21:01.670
that Navneet was talking a
little earlier about let's you

00:21:01.670 --> 00:21:06.860
do very specific delegation of
your access to edit items in a

00:21:06.860 --> 00:21:10.030
bucket or add new objects to
a bucket to your customers.

00:21:10.030 --> 00:21:12.860
They don't even have to be
Google account holders.

00:21:12.860 --> 00:21:16.260
They can just get the URL that
you give them and use it.

00:21:16.260 --> 00:21:21.430
In the case of downloads, it's a
matter of signing a piece of

00:21:21.430 --> 00:21:24.730
data that says, what is the
action you want to take?

00:21:24.730 --> 00:21:26.490
And what is the specific
bucket and

00:21:26.490 --> 00:21:28.090
object you want to access?

00:21:28.090 --> 00:21:30.110
And you could make some other
assertions as well.

00:21:30.110 --> 00:21:34.530
Once you sign that, you add that
to the URL, and pass that

00:21:34.530 --> 00:21:36.340
entire URL to customer.

00:21:36.340 --> 00:21:40.600
In this case, we're actually
using Signed POST policies,

00:21:40.600 --> 00:21:45.010
which is an HTML form post,
which we then say you're

00:21:45.010 --> 00:21:47.560
supposed to upload this specific
object with these

00:21:47.560 --> 00:21:52.400
access controls, and you can
make other assertions as well.

00:21:52.400 --> 00:21:56.140
Like Navneet said, this is a
great way to deliver things

00:21:56.140 --> 00:21:59.800
like a temporary time
bomb downloads.

00:21:59.800 --> 00:22:02.320
It's also a great way to be
able to have users upload

00:22:02.320 --> 00:22:04.830
their data to cloud.

00:22:04.830 --> 00:22:07.130
and there's more information,
you can find it at the access

00:22:07.130 --> 00:22:10.590
control link at the bottom.

00:22:10.590 --> 00:22:12.610
The second technology we're
using here in this

00:22:12.610 --> 00:22:17.100
demonstration is Cross-Origin
Resource Sharing,

00:22:17.100 --> 00:22:18.970
also known as CORS.

00:22:18.970 --> 00:22:21.520
It's really actually letting the
browser do its job to keep

00:22:21.520 --> 00:22:22.860
you safe and secure.

00:22:22.860 --> 00:22:25.610
You really don't
want to have--

00:22:25.610 --> 00:22:27.930
when you have a website that's
operating with a third party

00:22:27.930 --> 00:22:30.940
website, you don't want to
have malicious iframes

00:22:30.940 --> 00:22:34.600
stealing your data and sending
it to tracking websites or

00:22:34.600 --> 00:22:38.630
vice versa, branding your
data as their own.

00:22:38.630 --> 00:22:43.630
So what browsers will do
normally, will keep your site

00:22:43.630 --> 00:22:46.020
from accessing that third party
site, unless you tell it

00:22:46.020 --> 00:22:48.630
you're one of the good guys.

00:22:48.630 --> 00:22:51.470
In our case what you could do
is, you can configure in a

00:22:51.470 --> 00:22:54.820
bucket in Cloud Storage to have
CORS configuration saying

00:22:54.820 --> 00:22:59.500
that your app spot app or your
other web application is a

00:22:59.500 --> 00:23:01.050
friend of yours.

00:23:01.050 --> 00:23:04.690
So what happens in the browser
world, is the browser sends a

00:23:04.690 --> 00:23:08.710
preflight request, and we say
why yes, you are in fact

00:23:08.710 --> 00:23:10.790
allowed to send requests.

00:23:10.790 --> 00:23:15.360
And then Chrome or your other
browsers will allow Form

00:23:15.360 --> 00:23:18.050
posts, which is what we
do in our application.

00:23:18.050 --> 00:23:22.880
Or you can use JavaScript
XMLHttp requests, and they

00:23:22.880 --> 00:23:24.130
don't get blocked.

00:23:30.650 --> 00:23:33.480
Another thing that's always
important when you're thinking

00:23:33.480 --> 00:23:36.840
about having your users upload
data to the cloud is getting

00:23:36.840 --> 00:23:39.500
the right access controls
on things.

00:23:39.500 --> 00:23:44.050
And there are some helpful group
mechanisms things that

00:23:44.050 --> 00:23:49.830
we have that will let you do
some management of this.

00:23:49.830 --> 00:23:53.920
Every bucket belongs to an API
project, and API projects come

00:23:53.920 --> 00:23:55.390
with three groups
automatically.

00:23:55.390 --> 00:23:57.670
They have an owner's, editors,
and viewers.

00:23:57.670 --> 00:24:00.500
And buckets by default and
objects that are created in

00:24:00.500 --> 00:24:04.550
them have those groups
attached to them.

00:24:04.550 --> 00:24:08.200
So if you have a homogeneous set
of buckets in a project,

00:24:08.200 --> 00:24:11.060
you can certainly use those
to control your access.

00:24:11.060 --> 00:24:16.360
But if you have per-bucket
custom configuration, it's

00:24:16.360 --> 00:24:18.470
really easy to set up
a Google group to

00:24:18.470 --> 00:24:20.140
manage all your users.

00:24:20.140 --> 00:24:24.670
Groups can contain individual
users like actual emails of

00:24:24.670 --> 00:24:26.660
your customers, or they
could be things

00:24:26.660 --> 00:24:29.100
like service accounts.

00:24:29.100 --> 00:24:31.320
In any case, once you've set up
whatever groups you want to

00:24:31.320 --> 00:24:34.470
set up, you can then specify
access controls on your

00:24:34.470 --> 00:24:36.860
uploaded objects.

00:24:36.860 --> 00:24:40.570
There are a number of
pre-configured, pre-defined

00:24:40.570 --> 00:24:42.140
access control lists
like Public

00:24:42.140 --> 00:24:43.980
Read or Project Private.

00:24:43.980 --> 00:24:47.550
And you can specify those in
your upload request with the

00:24:47.550 --> 00:24:49.510
xgoogle ACL request header.

00:24:49.510 --> 00:24:52.380
And that is another thing that
you can, in your form post

00:24:52.380 --> 00:24:56.310
policy, say that you must post
with this access control.

00:24:56.310 --> 00:24:58.880
The other thing that the
Navneet talked about is

00:24:58.880 --> 00:25:00.340
default object access
controls.

00:25:00.340 --> 00:25:01.820
They're really handy.

00:25:01.820 --> 00:25:05.300
Once you set it up, but you
can give every new object

00:25:05.300 --> 00:25:07.075
exactly the access controls
you want.

00:25:16.320 --> 00:25:19.800
So next, you've had your users
upload their data into the

00:25:19.800 --> 00:25:22.390
cloud, and now you want to
serve it back to them and

00:25:22.390 --> 00:25:24.320
serve some more.

00:25:24.320 --> 00:25:26.490
So first we're going to talk
a little bit about how our

00:25:26.490 --> 00:25:28.630
little application works.

00:25:28.630 --> 00:25:32.090
This is a tiny little snippet of
JavaScript that runs in the

00:25:32.090 --> 00:25:34.620
client in the browser.

00:25:34.620 --> 00:25:40.070
What we end up doing is, when
we load we ask your website

00:25:40.070 --> 00:25:43.590
what are the objects in cloud
storage you want to render?

00:25:43.590 --> 00:25:46.830
And it passes back a little
blob of JSON, and we parse

00:25:46.830 --> 00:25:50.870
that and use it to build up
direct URL all links as either

00:25:50.870 --> 00:25:56.080
anchor tags or image source
tags, and then render those by

00:25:56.080 --> 00:25:58.040
putting them in the DOM.

00:25:58.040 --> 00:26:00.850
You can see an example
at the bottom.

00:26:00.850 --> 00:26:06.070
So between the boilerplate of
this lovely library called the

00:26:06.070 --> 00:26:10.230
Twitter Bootstrap Library, all
we had to do in terms of code

00:26:10.230 --> 00:26:13.210
and JavaScript and App Engine
was about four pages worth of

00:26:13.210 --> 00:26:14.640
code, and this is just
a little part of it.

00:26:17.140 --> 00:26:21.860
But why even have your
own separate website?

00:26:21.860 --> 00:26:25.370
You can just run it in
Google cloud storage.

00:26:25.370 --> 00:26:29.920
Today we are releasing the
ability to configure a bucket

00:26:29.920 --> 00:26:31.350
as a website.

00:26:31.350 --> 00:26:34.750
And we have two properties
of a bucket that

00:26:34.750 --> 00:26:36.310
control how this works.

00:26:36.310 --> 00:26:39.180
The first one is this idea
of a directory page.

00:26:39.180 --> 00:26:44.390
So when a user browses to the
bucket or some directory like

00:26:44.390 --> 00:26:48.630
object inside the bucket, they
don't get a strange error

00:26:48.630 --> 00:26:50.170
message saying, this
object isn't found.

00:26:50.170 --> 00:26:54.360
Instead, what we do is we go and
look for this sub-object.

00:26:54.360 --> 00:26:59.000
In this case, we're looking
at example.com/index.html.

00:26:59.000 --> 00:27:02.190
And if you have placed an
object called index.html

00:27:02.190 --> 00:27:05.150
there, we will serve
that to the user.

00:27:05.150 --> 00:27:08.160
This allows the website demo
that Navneet put up a little

00:27:08.160 --> 00:27:12.770
before by letting that
particular GCS demo bucket

00:27:12.770 --> 00:27:14.760
point directly to an object
that then served up the

00:27:14.760 --> 00:27:16.970
JavaScript.

00:27:16.970 --> 00:27:18.390
And this works for sub
directories too.

00:27:18.390 --> 00:27:23.080
So you can express
directory-like quality inside

00:27:23.080 --> 00:27:25.410
of your bucket in the website.

00:27:25.410 --> 00:27:28.490
The other interesting piece
of this is you can have

00:27:28.490 --> 00:27:30.510
a custom 404 page.

00:27:30.510 --> 00:27:33.990
And this is just a top level
object that you point to, and

00:27:33.990 --> 00:27:38.430
if the original object could not
be found or the directory

00:27:38.430 --> 00:27:41.350
object could not be found,
we'll render this.

00:27:41.350 --> 00:27:44.230
And both of these objects can
have their own custom

00:27:44.230 --> 00:27:44.990
JavaScript in them.

00:27:44.990 --> 00:27:48.070
So you can do much more than
just serve static content.

00:27:48.070 --> 00:27:51.010
You can figure out what request
was being asked, and

00:27:51.010 --> 00:27:55.130
maybe do some logging, or
perhaps provide alternatives,

00:27:55.130 --> 00:27:58.290
redirects, it's really
up to you.

00:27:58.290 --> 00:28:00.860
Here we have a little
bit of XML.

00:28:00.860 --> 00:28:03.280
This is the request you would
do to set that in.

00:28:03.280 --> 00:28:06.890
It's also available via the
GSUtil command line

00:28:06.890 --> 00:28:08.640
application that Navneet
showed before.

00:28:11.510 --> 00:28:14.790
So now that we have users
uploading their data into the

00:28:14.790 --> 00:28:18.740
cloud and we're serving it
back to them, we need to

00:28:18.740 --> 00:28:21.040
figure out some way to actually
take action on this

00:28:21.040 --> 00:28:22.290
uploaded data.

00:28:24.340 --> 00:28:25.860
So we have the flow, right?

00:28:25.860 --> 00:28:29.260
The customer hits upload, it
doesn't go to the application,

00:28:29.260 --> 00:28:33.210
it goes to Cloud Storage, but
then we need to do things like

00:28:33.210 --> 00:28:35.760
create the thumbnails and
render the galleries.

00:28:35.760 --> 00:28:38.090
And there's some magic that
happens between step one and

00:28:38.090 --> 00:28:42.120
two, and that's what I'd like
to talk about today.

00:28:42.120 --> 00:28:45.300
Traditional web applications
would often have you do a

00:28:45.300 --> 00:28:51.580
redirect after a post or have a
second web request that gets

00:28:51.580 --> 00:28:53.550
sent to the main application
to say, hey,

00:28:53.550 --> 00:28:55.040
something new has happened.

00:28:55.040 --> 00:28:57.840
Well that's putting the burden
of responsibility on the

00:28:57.840 --> 00:29:00.150
client, which is not where
you want to be.

00:29:00.150 --> 00:29:02.880
The other, alternative polling,
is even worse.

00:29:02.880 --> 00:29:06.790
But today we are going to show
you what's coming up next,

00:29:06.790 --> 00:29:10.960
notifications in
Cloud Storage.

00:29:10.960 --> 00:29:13.070
In order to set up
notifications, you need to

00:29:13.070 --> 00:29:15.450
have full control
over the bucket.

00:29:15.450 --> 00:29:18.290
But once you do,
you basically--

00:29:18.290 --> 00:29:21.140
for example, if you're using a
service account representing

00:29:21.140 --> 00:29:24.830
your application, you can put
the email address of that

00:29:24.830 --> 00:29:27.090
service account directly
into the asset control

00:29:27.090 --> 00:29:29.100
list for the bucket.

00:29:29.100 --> 00:29:33.830
In this case we were using an
App Engine application, but it

00:29:33.830 --> 00:29:35.950
doesn't have to be.

00:29:35.950 --> 00:29:38.400
And you might find that the
email address is instead

00:29:38.400 --> 00:29:39.650
developer@gservers.com.

00:29:41.870 --> 00:29:45.800
But once you've set that up, the
next thing you have to do

00:29:45.800 --> 00:29:48.330
is actually perform
the subscription.

00:29:48.330 --> 00:29:51.420
And here we have some code that
says, well we want the

00:29:51.420 --> 00:29:53.970
full control over this bucket.

00:29:53.970 --> 00:29:55.950
And we have two relevant URLs.

00:29:55.950 --> 00:29:58.210
The first one is the actually
subscription URL.

00:29:58.210 --> 00:30:00.670
And you could see that your
bucket name is baked right

00:30:00.670 --> 00:30:02.300
into that URL.

00:30:02.300 --> 00:30:04.450
The second is a call back URL.

00:30:04.450 --> 00:30:08.290
This is the URL that you build
that Cloud Storage will turn

00:30:08.290 --> 00:30:10.810
around and call you
on with the data

00:30:10.810 --> 00:30:13.220
of what's been updated.

00:30:13.220 --> 00:30:15.330
You can see here that we're
actually using that service

00:30:15.330 --> 00:30:18.920
account we just mentioned
directly from app engine's

00:30:18.920 --> 00:30:21.250
ability to get access
tokens out of this.

00:30:21.250 --> 00:30:25.170
If you're not using App Engine,
it's a simple matter

00:30:25.170 --> 00:30:28.850
of downloading the private key
for the service account, and

00:30:28.850 --> 00:30:30.235
using that to get your tokens.

00:30:33.140 --> 00:30:35.900
Once have the two URLs
of interest and the

00:30:35.900 --> 00:30:38.910
authorization, you run a
fetch, a get, at this

00:30:38.910 --> 00:30:41.700
particular URL.

00:30:41.700 --> 00:30:45.200
We use the xsubscibe header with
the hook that you want.

00:30:45.200 --> 00:30:48.415
And if you get a successful
response, a 200rit response

00:30:48.415 --> 00:30:51.580
back, then you're all set.

00:30:51.580 --> 00:30:52.910
So now what do you
get out of this?

00:30:52.910 --> 00:30:57.290
Well, you're going to get a BLOB
of JSON that says, this

00:30:57.290 --> 00:30:58.890
is what's changed.

00:30:58.890 --> 00:31:03.190
This is a smaller example than
what you'd actually see.

00:31:03.190 --> 00:31:06.620
But generally speaking, right
now I think we only return one

00:31:06.620 --> 00:31:07.970
object, but it's possible
we might

00:31:07.970 --> 00:31:09.600
batch them in the future.

00:31:09.600 --> 00:31:12.880
But here's an example of some of
the metadata that you might

00:31:12.880 --> 00:31:14.130
see about an object.

00:31:17.360 --> 00:31:24.990
You can see the content type,
the MD5 hash, the owner, which

00:31:24.990 --> 00:31:28.930
in this case is the
ID of the user.

00:31:28.930 --> 00:31:34.250
So now all you have left is to
add a response handler in your

00:31:34.250 --> 00:31:37.930
App Engine app or your other
application to import that

00:31:37.930 --> 00:31:40.800
JSON and read the metadata
fields out of it.

00:31:40.800 --> 00:31:44.510
And then now you can add it to
your task queue, you can set

00:31:44.510 --> 00:31:48.160
up Google pipelines to perform
all sorts of operations on

00:31:48.160 --> 00:31:50.390
that data, do whatever
you want.

00:31:50.390 --> 00:31:55.550
You add the value at this point
and can profit by it.

00:31:55.550 --> 00:31:58.220
So now that we've got this
excellent application out

00:31:58.220 --> 00:32:00.900
there, we're photo sharing away,
people are uploading all

00:32:00.900 --> 00:32:03.260
their images, people are viewing
their images, you have

00:32:03.260 --> 00:32:05.630
a whole lot of people using your
service, and you might

00:32:05.630 --> 00:32:08.370
want to know what's going on.

00:32:08.370 --> 00:32:11.470
The Google Cloud Storage
provides usage logs to help

00:32:11.470 --> 00:32:14.140
you figure out what's
going on.

00:32:14.140 --> 00:32:17.000
We're going to talk about
two parts here.

00:32:17.000 --> 00:32:20.480
The first is configuring your
bucket to produce the access

00:32:20.480 --> 00:32:22.050
and storage logs.

00:32:22.050 --> 00:32:25.780
The second is how you might be
able to use Google Big Query

00:32:25.780 --> 00:32:27.380
to perform some analysis.

00:32:33.300 --> 00:32:37.940
The first part of setting this
up is, you need to have a

00:32:37.940 --> 00:32:39.200
second bucket.

00:32:39.200 --> 00:32:42.110
This is so that there isn't a
causal loop, so your access

00:32:42.110 --> 00:32:44.470
logs cause more access logs.

00:32:44.470 --> 00:32:47.350
But you basically create a
second bucket, and you grant

00:32:47.350 --> 00:32:49.540
write access to that bucket
to our service,

00:32:49.540 --> 00:32:51.930
our analytic service.

00:32:51.930 --> 00:32:57.920
This is an example of how to set
up that configuration on

00:32:57.920 --> 00:33:01.920
example.com to say, please log
all storage and access for

00:33:01.920 --> 00:33:03.640
this bucket into the
logs.example.com.

00:33:06.230 --> 00:33:09.560
We also provide the ability
to have a prefix.

00:33:09.560 --> 00:33:12.590
So you can have many, many
buckets share the same logging

00:33:12.590 --> 00:33:16.550
bucket and differentiate
by the prefix.

00:33:16.550 --> 00:33:19.120
The other thing I should also
mention is that a default

00:33:19.120 --> 00:33:22.810
object ACL here is pretty
critical, because you get

00:33:22.810 --> 00:33:24.450
whatever that is.

00:33:24.450 --> 00:33:27.190
When Cloud Storage Analytics
writes a new object in there

00:33:27.190 --> 00:33:31.040
it will just inherit the ACLs
that are already in there.

00:33:31.040 --> 00:33:35.250
Then once you to set that up the
logs bucket will get logs

00:33:35.250 --> 00:33:37.650
in it, and then it's just a
pretty straightforward matter

00:33:37.650 --> 00:33:40.010
to import that data
into Big Query.

00:33:40.010 --> 00:33:43.380
And we'll have some examples
up on our document site.

00:33:43.380 --> 00:33:46.510
But once you're in big query,
you can do things like SQL

00:33:46.510 --> 00:33:49.640
statements over the objects
that people are serving.

00:33:49.640 --> 00:33:52.440
And it seems that we have a
really popular photo that

00:33:52.440 --> 00:33:56.400
people downloaded lots of times
called Bool's cats.

00:33:56.400 --> 00:34:00.570
Well your mileage may vary.

00:34:00.570 --> 00:34:04.740
But you can see that like you
can slice and dice this data

00:34:04.740 --> 00:34:05.990
anyway you want.

00:34:08.639 --> 00:34:12.010
So remember that little blob
of JSON that came in the

00:34:12.010 --> 00:34:13.670
notifications?

00:34:13.670 --> 00:34:17.380
Well that came from
a new in-point

00:34:17.380 --> 00:34:18.560
we're introducing today.

00:34:18.560 --> 00:34:21.350
Today Google Cloud Storage
joins the rest of the

00:34:21.350 --> 00:34:25.120
discovery based APIs that
we offer here at Google.

00:34:25.120 --> 00:34:29.150
We have a new set of
JSON-specific end points that

00:34:29.150 --> 00:34:32.170
are specifically geared towards
working with the

00:34:32.170 --> 00:34:37.270
number of API client libraries
that Google supports.

00:34:37.270 --> 00:34:39.810
So here, again, is a little
more metadata.

00:34:39.810 --> 00:34:43.870
This is some sample metadata
what a bucket would look like.

00:34:43.870 --> 00:34:48.500
We have here the project ID, the
time was created, the all

00:34:48.500 --> 00:34:53.159
important location, whether it's
in the US or in Europe.

00:34:53.159 --> 00:34:56.060
There are some other things are
not mention here like the

00:34:56.060 --> 00:34:58.890
default object ACLs, the ACLs.

00:34:58.890 --> 00:35:02.720
One thing about this new API
is that you can set all of

00:35:02.720 --> 00:35:08.260
these things in one update
or one insert operation.

00:35:08.260 --> 00:35:10.990
That's kind of neat.

00:35:10.990 --> 00:35:13.560
So there are some improvements
that we get from producing a

00:35:13.560 --> 00:35:15.130
discovery based API.

00:35:15.130 --> 00:35:17.800
And you may have heard some of
these in some of the API

00:35:17.800 --> 00:35:21.190
talks, because they're common
across Google technologies.

00:35:21.190 --> 00:35:25.460
One is the idea of being able
to patch metadata you don't

00:35:25.460 --> 00:35:29.550
now have to edit all of
the buckets options.

00:35:29.550 --> 00:35:32.470
You don't have to edit all of
the objects little pieces of

00:35:32.470 --> 00:35:35.650
metadata like content type or
encoding if you want to change

00:35:35.650 --> 00:35:37.210
just one thing

00:35:37.210 --> 00:35:40.000
And metadata patch allows
you to do this.

00:35:40.000 --> 00:35:44.720
It basically lets you use the
patch verb and specify only a

00:35:44.720 --> 00:35:46.530
tiny little blob of
JSON which is the

00:35:46.530 --> 00:35:48.430
thing you want to change.

00:35:48.430 --> 00:35:50.740
It also allows you to
do metadata batch.

00:35:50.740 --> 00:35:54.980
Which is, if you need to make an
operation on a whole number

00:35:54.980 --> 00:36:00.080
of objects, you can do
that all at once.

00:36:00.080 --> 00:36:05.510
It also lets you access
objects and other

00:36:05.510 --> 00:36:07.780
APIs at the same time.

00:36:07.780 --> 00:36:11.540
Another thing that we've
introduced here is this idea

00:36:11.540 --> 00:36:14.540
of access controls
as a collection.

00:36:14.540 --> 00:36:17.420
And it lets you do things like
line item access controls.

00:36:17.420 --> 00:36:21.880
Instead of having to do a read,
modify, write kind of

00:36:21.880 --> 00:36:25.600
form of editing your access
controls, you can say please

00:36:25.600 --> 00:36:29.610
give this user read access.

00:36:29.610 --> 00:36:33.380
And it will just add that.

00:36:33.380 --> 00:36:36.760
But the most important thing,
really, is the fact that we

00:36:36.760 --> 00:36:41.130
now can take advantage of
Google's API awesome API

00:36:41.130 --> 00:36:42.275
client libraries.

00:36:42.275 --> 00:36:45.630
And available now are all these
languages and there's

00:36:45.630 --> 00:36:47.480
more support coming.

00:36:47.480 --> 00:36:51.310
This is all happening in limited
availability, so you

00:36:51.310 --> 00:36:54.040
should stay tuned to find out
how you can get involved.

00:36:57.220 --> 00:36:59.900
So there are some things that
we weren't able to fit into

00:36:59.900 --> 00:37:03.900
our demonstration app, and I'd
like to talk about them now.

00:37:03.900 --> 00:37:06.790
One of the things that
happens when you're

00:37:06.790 --> 00:37:07.940
operating at scale--

00:37:07.940 --> 00:37:11.540
although we don't show this
with our web service

00:37:11.540 --> 00:37:14.060
application or our photo
gallery application.

00:37:14.060 --> 00:37:17.840
But if you have a whole bunch of
your servers all talking to

00:37:17.840 --> 00:37:21.630
Cloud Storage and all working
on the same objects, either

00:37:21.630 --> 00:37:26.990
because you are reading an
object, working on it, perhaps

00:37:26.990 --> 00:37:30.440
editing that object in place,
or because you're doing

00:37:30.440 --> 00:37:33.270
content delivery of all of us
form, and want to make sure

00:37:33.270 --> 00:37:39.100
that you only update objects
when you have to.

00:37:39.100 --> 00:37:40.990
There are some tools
that we have to

00:37:40.990 --> 00:37:44.620
allow concurrency control.

00:37:44.620 --> 00:37:46.600
Those are the two major
ways of doing it.

00:37:46.600 --> 00:37:50.010
If you are doing a read, modify,
write, it's really

00:37:50.010 --> 00:37:52.600
nice to be able to use
the traditional HTTP

00:37:52.600 --> 00:37:58.870
preconditioners of If match,
or if unmodified sense.

00:37:58.870 --> 00:38:02.090
That way when you've done the
read other object data, you

00:38:02.090 --> 00:38:05.750
can then do your work on it, and
only commit it if someone

00:38:05.750 --> 00:38:08.850
has not messed with your object
from behind your back.

00:38:08.850 --> 00:38:13.310
So the reverse which is the how
do you caching, is you can

00:38:13.310 --> 00:38:15.490
ask, hey, Cloud Storage
give this to me, but

00:38:15.490 --> 00:38:17.650
only if it's changed.

00:38:17.650 --> 00:38:19.650
And for that you'd want
if none match,

00:38:19.650 --> 00:38:22.160
or if modified since.

00:38:22.160 --> 00:38:25.750
We also have some custom
HEP-preconditioned headers

00:38:25.750 --> 00:38:28.410
that re used with a copy
in the cloud operation.

00:38:28.410 --> 00:38:29.980
And you can mix and
match these.

00:38:29.980 --> 00:38:33.680
So you can say only copy this
object if it hasn't changed

00:38:33.680 --> 00:38:37.100
from the last time inspected,
and only put it over here if

00:38:37.100 --> 00:38:41.440
that object hasn't changed since
last time inspected.

00:38:41.440 --> 00:38:44.450
This allows you to be able to be
very careful about how you

00:38:44.450 --> 00:38:46.460
do object updates and,
not lose any data.

00:38:49.280 --> 00:38:52.670
But another way that we're going
to introduce today as a

00:38:52.670 --> 00:38:57.230
technology preview to not lose
data is object versioning.

00:38:57.230 --> 00:39:00.640
Very soon now you'll be able
to turn on the bucket

00:39:00.640 --> 00:39:04.680
configuration such that when
you over right or delete an

00:39:04.680 --> 00:39:08.080
object, that object does not go
away, it's kept around in

00:39:08.080 --> 00:39:09.880
the service.

00:39:09.880 --> 00:39:11.570
Each of these objects
contain their own

00:39:11.570 --> 00:39:12.900
set of mutable metadata.

00:39:12.900 --> 00:39:15.940
So you can go to an older object
and change the access

00:39:15.940 --> 00:39:19.640
controls on it to be private
to your organization.

00:39:19.640 --> 00:39:23.610
And so on only your customers
get to read the latest.

00:39:23.610 --> 00:39:28.470
Or you can fix errors in
your older objects.

00:39:28.470 --> 00:39:29.960
But the best thing is that
you can go back.

00:39:29.960 --> 00:39:33.020
So you no longer have
to provide backup

00:39:33.020 --> 00:39:34.050
services for yourself.

00:39:34.050 --> 00:39:36.510
You can just go back to the
data that you had in the

00:39:36.510 --> 00:39:38.380
cloud, and it will be
right there for you.

00:39:44.110 --> 00:39:47.280
So we've talked about a
bunch of stuff here

00:39:47.280 --> 00:39:49.340
today for Cloud Storage.

00:39:49.340 --> 00:39:52.030
There's a whole bunch of things
you can use right now.

00:39:52.030 --> 00:39:54.830
You can use access and storage
logs by configuring your

00:39:54.830 --> 00:39:57.650
bucket to render those.

00:39:57.650 --> 00:40:00.710
You can use Signed URLs and
post queries to allow

00:40:00.710 --> 00:40:04.200
delegated access to customers
to use Cloud Storage.

00:40:04.200 --> 00:40:07.410
Cross origin resource sharing
to ensure that your browser

00:40:07.410 --> 00:40:12.080
can go directly to us as a
third party site without

00:40:12.080 --> 00:40:15.110
preventing you through
security options.

00:40:15.110 --> 00:40:17.850
Buckets as a website, default
object access controls, and

00:40:17.850 --> 00:40:19.970
concurrency controls--

00:40:19.970 --> 00:40:22.540
we also are introducing the
discovery based version of the

00:40:22.540 --> 00:40:26.270
API, and you can request access
up at the console.

00:40:26.270 --> 00:40:28.530
That will get turned
on, if not right

00:40:28.530 --> 00:40:30.810
now, than later today.

00:40:30.810 --> 00:40:32.610
And you can right now get
started by reading the

00:40:32.610 --> 00:40:35.560
documentation or playing with it
the API's explorer, and we

00:40:35.560 --> 00:40:37.860
highly suggest that you do so.

00:40:37.860 --> 00:40:39.860
And you've seen a couple of
things are coming out

00:40:39.860 --> 00:40:42.090
imminently at our technology
preview.

00:40:42.090 --> 00:40:47.040
We have notifications which lets
you subscribe to changes

00:40:47.040 --> 00:40:49.790
happening in your buckets so
you can operate exactly in

00:40:49.790 --> 00:40:53.730
time without polling,
and object versions.

00:40:53.730 --> 00:40:55.680
If you're interested in Cloud
Storage and want to know

00:40:55.680 --> 00:41:00.480
what's going on, I highly
suggest that you sign up at GS

00:41:00.480 --> 00:41:04.610
announce to get whenever we
release new features.

00:41:04.610 --> 00:41:06.060
And give us feedback.

00:41:06.060 --> 00:41:08.460
Join us at
GSdiscussion@googlegroups.com

00:41:08.460 --> 00:41:10.780
and tell us what you like, what
you don't like, what you

00:41:10.780 --> 00:41:12.330
want to see.

00:41:12.330 --> 00:41:15.360
Really, it's you're guys'
feedback on how our API works

00:41:15.360 --> 00:41:19.300
that helps us figure out what
we need to do next.

00:41:19.300 --> 00:41:22.310
And as always there's a sign up
link at the bottom, you can

00:41:22.310 --> 00:41:25.310
go there, set yourself up,
and get rolling with

00:41:25.310 --> 00:41:28.120
Google Cloud Storage.

00:41:28.120 --> 00:41:31.550
So for those of you who did not
see some of these related

00:41:31.550 --> 00:41:34.340
sessions at Google I/O, I
highly recommend them.

00:41:34.340 --> 00:41:38.960
They'll be broadcast through
recording on YouTube.

00:41:38.960 --> 00:41:40.980
But Building Data Pipelines
At Google Scale

00:41:40.980 --> 00:41:42.800
is an awesome talk.

00:41:42.800 --> 00:41:45.740
It talks about how you can use
MapReduce using cloud storage,

00:41:45.740 --> 00:41:49.700
and also provides the ability
to do workflows to move data

00:41:49.700 --> 00:41:53.050
from whatever data store you
might have through Google

00:41:53.050 --> 00:41:56.650
Cloud Storage to be analyzed
by Big Query.

00:41:56.650 --> 00:41:58.350
The second one it's interesting,
if you want to

00:41:58.350 --> 00:42:01.280
think about the authentication
aspects of using cloud

00:42:01.280 --> 00:42:03.250
storage-- especially
service accounts--

00:42:03.250 --> 00:42:06.560
is a OAuth 2.0 for identity
and data access.

00:42:06.560 --> 00:42:08.520
You should have a link
here, and eventually

00:42:08.520 --> 00:42:09.230
those will get posted.

00:42:09.230 --> 00:42:13.660
I Highly suggest you
take a look.

00:42:13.660 --> 00:42:14.580
And that's about it.

00:42:14.580 --> 00:42:17.950
We'd like to thank you for
coming here and listening to

00:42:17.950 --> 00:42:19.420
us talk about our service.

00:42:19.420 --> 00:42:23.610
We're really excited that you
guys are going to use us to

00:42:23.610 --> 00:42:26.650
hook up all of your web apps,
Google Cloud Engine, Google

00:42:26.650 --> 00:42:30.440
App Engine, we're just happy
that you're here.

00:42:30.440 --> 00:42:32.630
You can find more information
up at

00:42:32.630 --> 00:42:35.940
developers.google.com/storage.

00:42:35.940 --> 00:42:38.345
We are available directly
at gs/team@google.com.

00:42:41.670 --> 00:42:44.620
You can always reach us.

00:42:44.620 --> 00:42:46.560
You can ask questions
on stack overflow.

00:42:46.560 --> 00:42:49.150
The tag we have is
google-cloud-storage.

00:42:49.150 --> 00:42:50.600
My name's Nathan.

00:42:50.600 --> 00:42:51.920
This is Navneet.

00:42:51.920 --> 00:42:53.690
At this point I'd
love to invite

00:42:53.690 --> 00:42:55.860
you all to ask questions.

00:42:55.860 --> 00:42:58.180
If you go to the microphones, we
won't have to repeat it for

00:42:58.180 --> 00:43:00.323
the recorded audience.

00:43:00.323 --> 00:43:01.309
So, thanks for coming.

00:43:01.309 --> 00:43:10.676
[APPLAUSE]

00:43:10.676 --> 00:43:11.900
AUDIENCE: I have
some questions.

00:43:11.900 --> 00:43:13.880
If you could share some
information on performance--

00:43:13.880 --> 00:43:15.700
sorry, IOPS performance.

00:43:15.700 --> 00:43:18.810
And also the latency
of getting the

00:43:18.810 --> 00:43:20.080
data on Edge servers.

00:43:20.080 --> 00:43:23.230
I'm just wondering if I replace
my source solution

00:43:23.230 --> 00:43:26.430
with yours, and I'm using
Akamai, for example, what type

00:43:26.430 --> 00:43:29.530
of performance I would expect.

00:43:29.530 --> 00:43:33.310
NAVNEET JONEJA: So let me answer
them in reverse order.

00:43:33.310 --> 00:43:39.160
So we do a lot of performance
optimization in Cloud Storage.

00:43:39.160 --> 00:43:41.850
I won't necessarily say that
you can replace Akamai with

00:43:41.850 --> 00:43:44.250
Cloud Storage, but what I would
say is give it a try.

00:43:44.250 --> 00:43:46.380
We actually have a free trial
tier, so you can stick some

00:43:46.380 --> 00:43:48.890
data in there, serve it out,
see how it goes for you.

00:43:48.890 --> 00:43:51.710
In many cases we found our
customers find that, because

00:43:51.710 --> 00:43:53.550
of the really good performance
we provide, they don't

00:43:53.550 --> 00:43:55.510
necessarily need a CVM,
so I encourage you

00:43:55.510 --> 00:43:57.000
to give it a try.

00:43:57.000 --> 00:44:01.510
To answer the first question,
it's a cloud storage service.

00:44:01.510 --> 00:44:04.125
It's built on Google
infrastructure and scales to

00:44:04.125 --> 00:44:06.670
the levels Google need it to,
so in terms of IOPS I think

00:44:06.670 --> 00:44:11.240
you are unlikely to hit any
limitations in service.

00:44:11.240 --> 00:44:13.330
NATHAN HERRING: There are some
things that-- we do have Edge

00:44:13.330 --> 00:44:14.460
servers of our own.

00:44:14.460 --> 00:44:17.770
And depending on how you have
your access control set up,

00:44:17.770 --> 00:44:20.200
it's entirely possible that we
can provide really excellent

00:44:20.200 --> 00:44:21.820
performance by caching
at the edges.

00:44:21.820 --> 00:44:24.930
AUDIENCE: Is that included
in the storage?

00:44:24.930 --> 00:44:27.150
Is caching something
that you get with--

00:44:27.150 --> 00:44:30.060
NATHAN HERRING: Caching is, you
get it for free, but they

00:44:30.060 --> 00:44:31.400
have to be public objects.

00:44:31.400 --> 00:44:35.250
If they're not public objects
that require authentication,

00:44:35.250 --> 00:44:38.160
then we don't know that you
can cache it, so we don't.

00:44:38.160 --> 00:44:39.410
AUDIENCE: Thank you.

00:44:41.420 --> 00:44:43.060
AUDIENCE: I have a question.

00:44:43.060 --> 00:44:45.300
When you're uploading, is there
a way to monitor the

00:44:45.300 --> 00:44:47.360
progress from some--

00:44:47.360 --> 00:44:48.680
NATHAN HERRING: Oh, sure.

00:44:48.680 --> 00:44:51.380
The way that we had i tin our
JavaScript was pretty

00:44:51.380 --> 00:44:56.460
simplified, but reasonable
uploads are set up so that you

00:44:56.460 --> 00:44:58.170
can monitor the progress
directly.

00:44:58.170 --> 00:45:04.660
But there are some browsers that
don't let you do that,

00:45:04.660 --> 00:45:07.190
and you're allowed
to chunk uploads.

00:45:07.190 --> 00:45:10.890
Even though it's not usually
desirable, but the best

00:45:10.890 --> 00:45:14.470
performance is create a
resumable session to upload,

00:45:14.470 --> 00:45:17.920
and then post as much as you can
until your either done or

00:45:17.920 --> 00:45:19.830
the internet breaks.

00:45:19.830 --> 00:45:23.740
But you can always break it up
into sections to say, I posted

00:45:23.740 --> 00:45:26.220
this much, report progress.

00:45:26.220 --> 00:45:27.700
I posted this much,
report progress.

00:45:27.700 --> 00:45:31.530
AUDIENCE: What I was really
asking was, I have a similar

00:45:31.530 --> 00:45:33.530
app already, and what
I'm thinking is--

00:45:33.530 --> 00:45:35.990
can I from JavaScript, from
the browser can I say hey,

00:45:35.990 --> 00:45:37.100
what percentage does
this have, so I

00:45:37.100 --> 00:45:39.150
could show the user.

00:45:39.150 --> 00:45:40.640
NATHAN HERRING: I believe so.

00:45:40.640 --> 00:45:45.310
I'd have to go back and look
at the JavaScript well--.

00:45:45.310 --> 00:45:47.040
NAVNEET JONEJA: So find is
afterwards, we'll talk through

00:45:47.040 --> 00:45:48.290
this in detail.

00:45:51.145 --> 00:45:54.290
AUDIENCE: I was just wondering
when we can expect this to be

00:45:54.290 --> 00:45:57.610
available to Google
Apps accounts.

00:45:57.610 --> 00:45:59.710
I kind of tried it with my
Google Apps account, and it

00:45:59.710 --> 00:46:01.392
didn't seem to work.

00:46:01.392 --> 00:46:03.030
NAVNEET JONEJA: Find us
afterwards, it should work

00:46:03.030 --> 00:46:04.225
with apps accounts right now.

00:46:04.225 --> 00:46:06.740
AUDIENCE: OK, can we do
billing through--

00:46:06.740 --> 00:46:08.460
if we have a Premier account
for App Engine,

00:46:08.460 --> 00:46:10.842
does that tie through?

00:46:10.842 --> 00:46:12.510
NAVNEET JONEJA: Currently
Premier accounts are separate

00:46:12.510 --> 00:46:15.170
from Cloud Storage and App
Engine, but you could actually

00:46:15.170 --> 00:46:18.370
get a Premiere account
for storage as well.

00:46:18.370 --> 00:46:20.510
AUDIENCE: I have a two
part question.

00:46:20.510 --> 00:46:23.710
OK, the first one is, how
are things like--

00:46:23.710 --> 00:46:25.890
and maybe that was a
session on this--

00:46:25.890 --> 00:46:28.720
databases handled
in the cloud?

00:46:28.720 --> 00:46:32.090
And the second part of that
question is, have you heard

00:46:32.090 --> 00:46:37.240
any horror stories or anything
or examples of how people have

00:46:37.240 --> 00:46:40.490
dealt with things like Oracle
licensing when trying to put

00:46:40.490 --> 00:46:41.470
things in the cloud?

00:46:41.470 --> 00:46:45.510
Because I know they love
licensing things by core.

00:46:45.510 --> 00:46:46.570
NAVNEET JONEJA: that's
a great question.

00:46:46.570 --> 00:46:50.960
So in terms of the performance
characteristics you need from

00:46:50.960 --> 00:46:54.000
databases, it turns out that
because you're actually trying

00:46:54.000 --> 00:46:57.780
to typically insert small pieces
of data with random

00:46:57.780 --> 00:47:00.980
access reads and writes, it's
not really suited for the kind

00:47:00.980 --> 00:47:02.480
of service we have
at Cloud Storage.

00:47:02.480 --> 00:47:06.310
But we do have a sister service
called Google Cloud

00:47:06.310 --> 00:47:10.320
SQL which allows you to do MySQL
databases in the Google

00:47:10.320 --> 00:47:11.900
Cloud fully managed.

00:47:11.900 --> 00:47:14.470
So I would check that out if you
want to post your database

00:47:14.470 --> 00:47:15.880
in the Cloud Storage.

00:47:15.880 --> 00:47:18.460
There was also a talk yesterday
about the battle of

00:47:18.460 --> 00:47:21.410
back ends, which was basically
comparing relational database

00:47:21.410 --> 00:47:24.500
like MySQL with the NoSQL
database like the app Engine

00:47:24.500 --> 00:47:25.230
data store.

00:47:25.230 --> 00:47:26.520
So that's what I would
talk about in terms

00:47:26.520 --> 00:47:28.340
of structured data.

00:47:28.340 --> 00:47:30.310
To answer your question about
Oracle and licensing, we don't

00:47:30.310 --> 00:47:32.880
actually currently have
something that does Oracle, so

00:47:32.880 --> 00:47:35.800
within Cloud Storage that's not
within the Google Cloud

00:47:35.800 --> 00:47:39.360
Ecosystem yet. that isn't really
question we can answer.

00:47:39.360 --> 00:47:41.770
AUDIENCE: I've just hot a
question about the persistent

00:47:41.770 --> 00:47:43.900
storage in the new
compute engine.

00:47:43.900 --> 00:47:46.690
Could you share, I guess, a bit
of the differences that

00:47:46.690 --> 00:47:50.230
you guys are seeing or planning
from a strategic

00:47:50.230 --> 00:47:50.710
perspective?

00:47:50.710 --> 00:47:53.200
It seems like the bucket
metaphor versus maybe the

00:47:53.200 --> 00:47:57.140
database, sort of sand metaphor
is probably the main

00:47:57.140 --> 00:47:58.100
one, but I was wondering
if you could

00:47:58.100 --> 00:47:59.430
answer or speak to that.

00:47:59.430 --> 00:48:01.850
As well, I was wondering whether
Speedy is something

00:48:01.850 --> 00:48:03.980
that you guys have enabled from
a HTTP delivery point of

00:48:03.980 --> 00:48:07.446
view coming out of
Google Storage.

00:48:07.446 --> 00:48:08.890
NAVNEET JONEJA: So let me see.

00:48:08.890 --> 00:48:11.390
Two questions you asked were,
first is, can you

00:48:11.390 --> 00:48:13.440
differentiate between the
synthesis and disk?

00:48:13.440 --> 00:48:15.750
And second is, do you think of
persistent disk as being

00:48:15.750 --> 00:48:17.850
something that could potentially
offer HTTP end

00:48:17.850 --> 00:48:19.360
point to Cloud Storage?

00:48:19.360 --> 00:48:19.980
AUDIENCE: No, the
second question

00:48:19.980 --> 00:48:20.870
was completely unrelated.

00:48:20.870 --> 00:48:23.690
I was really just asking about
Speedy, that HTTP extension

00:48:23.690 --> 00:48:25.880
that can pipeline requests.

00:48:25.880 --> 00:48:27.370
NAVNEET JONEJA: So that's
a great question.

00:48:27.370 --> 00:48:29.200
So let me answer the first
question first.

00:48:29.200 --> 00:48:33.090
In terms of the access models,
think about Google Cloud

00:48:33.090 --> 00:48:35.940
Storage as being an internet
object store.

00:48:35.940 --> 00:48:40.160
So it's really fundamentally
targeted at storing objects,

00:48:40.160 --> 00:48:43.680
which are logical entities,
and actually using that in

00:48:43.680 --> 00:48:45.980
your applications when they
actually only care about the

00:48:45.980 --> 00:48:47.710
object, the entity.

00:48:47.710 --> 00:48:49.970
It's really focused at that
really high availability,

00:48:49.970 --> 00:48:53.680
reliable performance, HTTP
access, all that good stuff.

00:48:53.680 --> 00:48:57.010
Let's assume Disk is a lower
level service, it's basically

00:48:57.010 --> 00:48:58.480
a block device.

00:48:58.480 --> 00:49:01.000
Great performance, you mount
it from compute engine as a

00:49:01.000 --> 00:49:03.330
disk, and then you could do
things like, for example, as

00:49:03.330 --> 00:49:05.360
you mentioned run a
database on it.

00:49:05.360 --> 00:49:06.210
The kind of use cases you

00:49:06.210 --> 00:49:07.380
implement on them are different.

00:49:07.380 --> 00:49:12.530
They're also complimentary,
because it turns out that you

00:49:12.530 --> 00:49:14.130
don't always want to store
everything on a persistent

00:49:14.130 --> 00:49:15.560
disk and manage that yourself.

00:49:15.560 --> 00:49:17.906
You could store that data
in Cloud Storage.

00:49:17.906 --> 00:49:20.280
AUDIENCE: And the Speedy
dimension?

00:49:20.280 --> 00:49:22.060
NAVNEET JONEJA: I actually don't
have an answer for you

00:49:22.060 --> 00:49:23.655
on that, but find me afterwards,
and I'll see if I

00:49:23.655 --> 00:49:26.326
can find the answer for you.

00:49:26.326 --> 00:49:30.730
AUDIENCE: Do the object versions
have a specific

00:49:30.730 --> 00:49:33.455
lifetime that they last, or do
they just last forever and

00:49:33.455 --> 00:49:35.140
just count against
your storage?

00:49:35.140 --> 00:49:39.065
And is there an easy way to
purge older versions?

00:49:39.065 --> 00:49:41.660
NATHAN HERRING: This is not
entirely formed yet, but

00:49:41.660 --> 00:49:43.520
you'll be able to purge
individual versions.

00:49:43.520 --> 00:49:46.660
It's probable that we will have
some expiration that you

00:49:46.660 --> 00:49:52.250
could set on it, or like keep
inversions, but it is not out

00:49:52.250 --> 00:49:55.250
yet, so we will take that
under consideration.

00:49:59.184 --> 00:50:01.320
AUDIENCE: My question
is more--

00:50:01.320 --> 00:50:05.310
I guess could you comment a
little bit more on what I

00:50:05.310 --> 00:50:09.950
consider kind of a Federated
token, where my application is

00:50:09.950 --> 00:50:17.330
really a broker of identity
between some internal systems

00:50:17.330 --> 00:50:18.920
and Google Cloud Storage?

00:50:18.920 --> 00:50:25.890
So I saw that you support post
forms that I authenticate, but

00:50:25.890 --> 00:50:30.180
what if my posting is very
different than my reads?

00:50:30.180 --> 00:50:32.000
And how do I--

00:50:32.000 --> 00:50:34.290
first of all, does it support
all the verbs?

00:50:34.290 --> 00:50:35.680
Does it support patch?

00:50:35.680 --> 00:50:38.440
What if I only want to upload
part of the file?

00:50:38.440 --> 00:50:42.460
If I have a file on Google Cloud
Storage, and say it's 5

00:50:42.460 --> 00:50:44.380
terabytes of data, and I only
want to patch it with another

00:50:44.380 --> 00:50:48.810
gig of data, can
this, I guess--

00:50:48.810 --> 00:50:51.380
I call it Federated Tokens,
because that's the equivalent

00:50:51.380 --> 00:50:52.950
on the Amazon side--

00:50:52.950 --> 00:50:54.100
support that?

00:50:54.100 --> 00:50:57.940
And does the read semantics
or your get verb--

00:50:57.940 --> 00:51:02.490
can you have different ACLs or a
group extensions or some way

00:51:02.490 --> 00:51:06.540
to manage identities for
different verbs, and I guess

00:51:06.540 --> 00:51:08.050
can you talk a little
bit more about that?

00:51:08.050 --> 00:51:11.790
And how would you create sort
of this broker of identity

00:51:11.790 --> 00:51:14.830
between some internal systems
and Google cloud storage?

00:51:14.830 --> 00:51:18.130
So that a client would come to
you, you would get a token

00:51:18.130 --> 00:51:21.187
that would say, put in the HTTP
headers, and then the

00:51:21.187 --> 00:51:23.680
client can actually directly
connect to Google Cloud

00:51:23.680 --> 00:51:27.090
Storage as opposed to coming
back to the application, and

00:51:27.090 --> 00:51:29.200
the application uploading
it to cloud storage.

00:51:29.200 --> 00:51:30.810
Does that make sense?

00:51:30.810 --> 00:51:33.300
NAVNEET JONEJA: I think I get
the gist of your question.

00:51:33.300 --> 00:51:34.890
Let me see if I understand.

00:51:34.890 --> 00:51:39.460
So I think what you're looking
for is some mechanism for you

00:51:39.460 --> 00:51:42.520
to provide a token
to Cloud Storage.

00:51:42.520 --> 00:51:44.700
And Cloud Storage looks at that
token in the request and

00:51:44.700 --> 00:51:46.580
say, is this valid?

00:51:46.580 --> 00:51:49.322
And because you provided
that token, it's valid.

00:51:49.322 --> 00:51:50.280
AUDIENCE: Yes.

00:51:50.280 --> 00:51:53.150
NAVNEET JONEJA: So Signed URL
is a kind of a form of that.

00:51:53.150 --> 00:51:55.690
Because you essentially come to
us with your assigned URL,

00:51:55.690 --> 00:51:59.300
you delegate access to a given
object on any of the verbs.

00:51:59.300 --> 00:52:02.130
So all the verbs we have
are supported.

00:52:02.130 --> 00:52:04.935
And if a person shows up with
that URL, which is essentially

00:52:04.935 --> 00:52:08.320
a tokenized URL, they
get access to data.

00:52:08.320 --> 00:52:09.120
If not, they don't.

00:52:09.120 --> 00:52:10.550
So that's the form
we support today.

00:52:10.550 --> 00:52:13.160
We don't have a more complex
system where we actually

00:52:13.160 --> 00:52:15.550
integrate with authenticity
on site.

00:52:15.550 --> 00:52:17.390
We don't have that right now.

00:52:17.390 --> 00:52:19.960
The second question you asked
was patching data.

00:52:19.960 --> 00:52:21.980
We don't actually support
patching the

00:52:21.980 --> 00:52:24.220
core object data today.

00:52:24.220 --> 00:52:27.131
It's all right on the
semantics right now.

00:52:27.131 --> 00:52:28.250
AUDIENCE: Thank you.

00:52:28.250 --> 00:52:32.160
NATHAN HERRING: So to elaborate
a little bit, we do

00:52:32.160 --> 00:52:36.190
allow things like App Engine to
have users log in and then

00:52:36.190 --> 00:52:38.500
provide their credentials
to an App Engine app.

00:52:38.500 --> 00:52:43.580
Or you can do it via the API
client libraries, and then

00:52:43.580 --> 00:52:46.140
they get the token
for themselves.

00:52:46.140 --> 00:52:48.260
And then they can access Google
Cloud Storage as if

00:52:48.260 --> 00:52:49.760
they are themselves.

00:52:49.760 --> 00:52:52.350
So depending on how you have
access controls set up in your

00:52:52.350 --> 00:52:55.590
objects, that might suit
your purposes.

00:52:55.590 --> 00:53:00.000
AUDIENCE: Now it was more
for non-Google--

00:53:00.000 --> 00:53:03.350
I guess for people that don't
have a Gmail account.

00:53:03.350 --> 00:53:05.410
It was more for if you have a
bunch of internal systems.

00:53:05.410 --> 00:53:07.700
NATHAN HERRING: Gmail accounts
actually are not, strictly

00:53:07.700 --> 00:53:09.210
speaking, required.

00:53:09.210 --> 00:53:12.290
Anyone with any email account
at all can have a Google

00:53:12.290 --> 00:53:15.570
account attached
to that email.

00:53:15.570 --> 00:53:17.730
And then you can--

00:53:17.730 --> 00:53:20.620
if you add that they can
basically get an invitation to

00:53:20.620 --> 00:53:22.750
come and use the service.

00:53:22.750 --> 00:53:25.990
But if you don't want to do
that, then yes, you're kind of

00:53:25.990 --> 00:53:30.710
in the model of providing
delegated access as if they

00:53:30.710 --> 00:53:34.835
are you or some identity that
you've said, please act as

00:53:34.835 --> 00:53:36.600
this person.

00:53:36.600 --> 00:53:37.690
AUDIENCE: Thanks.

00:53:37.690 --> 00:53:41.800
AUDIENCE: So could you comment
on as a service, which

00:53:41.800 --> 00:53:45.780
consistency availability, and
petition, which two you're

00:53:45.780 --> 00:53:47.220
emphasis is on.

00:53:47.220 --> 00:53:49.760
NAVNEET JONEJA: You're talking
about the CAP theorem.

00:53:49.760 --> 00:53:52.660
So that's a really interesting
question.

00:53:52.660 --> 00:53:57.810
It deserves an in detail offline
answer from us, so if

00:53:57.810 --> 00:53:58.800
you want to talk about
it more, let's

00:53:58.800 --> 00:54:00.450
talk about it offline.

00:54:00.450 --> 00:54:04.610
At a high level, if you could go
and look up research on the

00:54:04.610 --> 00:54:06.560
web, you'll find that there's
actually someone who proved

00:54:06.560 --> 00:54:08.960
that the Cap theorem
only holds at a

00:54:08.960 --> 00:54:09.960
given point of time.

00:54:09.960 --> 00:54:15.480
In other words at a given point
of time, consistency,

00:54:15.480 --> 00:54:18.030
partition tolerance, and
availability are sort of like

00:54:18.030 --> 00:54:19.260
the three ends of the
triangle you can't

00:54:19.260 --> 00:54:20.310
hold at the same time.

00:54:20.310 --> 00:54:22.540
It turns out that you can, for a
fraction of a second let one

00:54:22.540 --> 00:54:23.830
corner up and then push
it back down again.

00:54:23.830 --> 00:54:25.590
So there actually are
ways to do stuff.

00:54:25.590 --> 00:54:27.450
I'm not going to go into the
secret sauce of what we do,

00:54:27.450 --> 00:54:31.430
but the answer is we really
try to do all three.

00:54:36.420 --> 00:54:40.360
AUDIENCE: Sam's creating yet
another photo sharing app, and

00:54:40.360 --> 00:54:43.040
with the idea that all the
photos that are added are to

00:54:43.040 --> 00:54:44.845
be shared publicly--

00:54:44.845 --> 00:54:47.320
so a user adds photos to albums,
and then they get

00:54:47.320 --> 00:54:49.900
shared to the worldwide web.

00:54:49.900 --> 00:54:52.820
And say all my users already
have Google accounts and they

00:54:52.820 --> 00:54:56.720
all have Picasso Web, should I
implement that using their

00:54:56.720 --> 00:54:58.020
Picasso web albums?

00:54:58.020 --> 00:55:02.980
Or should I use Google Cloud
Storage to have them--

00:55:02.980 --> 00:55:05.540
should I save their photos to
Google Cloud Storage instead?

00:55:05.540 --> 00:55:08.200
Instead of having them create
albums in Picasso Web and then

00:55:08.200 --> 00:55:09.066
sharing them?

00:55:09.066 --> 00:55:10.780
NAVNEET JONEJA: So that's
a great question.

00:55:10.780 --> 00:55:14.780
So I think answer to that
question really depends on who

00:55:14.780 --> 00:55:15.810
owns the data.

00:55:15.810 --> 00:55:18.970
So if you want your applications
to own the data,

00:55:18.970 --> 00:55:23.510
and you basically want your
application to be able to

00:55:23.510 --> 00:55:25.570
manage the data, control the
data, let's say you want to

00:55:25.570 --> 00:55:29.130
do, for example, you want
to be able to manage--

00:55:29.130 --> 00:55:31.380
in terms of service adherence--
you want to

00:55:31.380 --> 00:55:33.600
prevent people from uploading
other things

00:55:33.600 --> 00:55:35.190
that are not images.

00:55:35.190 --> 00:55:36.730
If you want to have control over
the data, you probably

00:55:36.730 --> 00:55:38.020
want to use Cloud Storage.

00:55:38.020 --> 00:55:41.300
If what you want is to have
people tell Google, this is my

00:55:41.300 --> 00:55:44.730
data, and your application
accesses it indirectly as sort

00:55:44.730 --> 00:55:47.600
of a layer above the storage,
then you're looking at

00:55:47.600 --> 00:55:49.600
something like Drive
or Picasso.

00:55:49.600 --> 00:55:50.850
So that's kind of the models.

00:55:50.850 --> 00:55:53.650
If you have user controlled
storage, get Drive or Picasso.

00:55:53.650 --> 00:55:55.760
If you have application owned
and controlled storage, you

00:55:55.760 --> 00:55:57.670
get Cloud Storage.

00:55:57.670 --> 00:56:00.248
AUDIENCE: Cool, thanks.

00:56:00.248 --> 00:56:04.380
AUDIENCE: My question is on
setting custom headers.

00:56:04.380 --> 00:56:07.810
If you set a bucket as a
website, can use set the cross

00:56:07.810 --> 00:56:09.850
domain origin header?

00:56:09.850 --> 00:56:18.250
And for objects, can use set
metadata such as Gzip content?

00:56:18.250 --> 00:56:21.010
NAVNEET JONEJA: So Metadata, we
do support setting of the

00:56:21.010 --> 00:56:22.530
content encoding header.

00:56:22.530 --> 00:56:24.800
That's actually a slightly more
complicated discussion,

00:56:24.800 --> 00:56:26.360
so let's have that
offline as well.

00:56:26.360 --> 00:56:28.040
But we do support setting it.

00:56:28.040 --> 00:56:30.890
The first question was--

00:56:30.890 --> 00:56:33.850
NATHAN HERRING: It sounded like,
if you wanted to have a

00:56:33.850 --> 00:56:35.720
cross origin resource
sharing when you're

00:56:35.720 --> 00:56:38.326
using a static website.

00:56:38.326 --> 00:56:41.850
AUDIENCE: Right, if I set the
bucket as a website, can I

00:56:41.850 --> 00:56:43.545
trust another domain?

00:56:43.545 --> 00:56:46.380
NATHAN HERRING: Right, and so if
that website you're serving

00:56:46.380 --> 00:56:52.460
up say links to an app spot or
your other website over there,

00:56:52.460 --> 00:56:55.480
it's really up to that other
websites to support the CORS

00:56:55.480 --> 00:56:56.150
configurations.

00:56:56.150 --> 00:57:00.080
So your browser is going to do
the preflight request to the

00:57:00.080 --> 00:57:01.330
other place.

00:57:01.330 --> 00:57:03.550
If you're just doing it to
another bucket, then that

00:57:03.550 --> 00:57:06.840
other bucket could have CORS
configuration set on it to

00:57:06.840 --> 00:57:10.580
allow this and--

00:57:10.580 --> 00:57:12.120
you can do a lot with
CORS configuration.

00:57:12.120 --> 00:57:17.680
AUDIENCE: Yes, say my third
party website is doing the

00:57:17.680 --> 00:57:20.940
session authentication, let's
say session management, but

00:57:20.940 --> 00:57:23.940
I'm storing all my thumbnails
on your site, than I'd

00:57:23.940 --> 00:57:26.985
probably need CORS header
on your site.

00:57:26.985 --> 00:57:27.990
NATHAN HERRING: Yes.

00:57:27.990 --> 00:57:30.045
AUDIENCE: And you guys
set that CORS.

00:57:30.045 --> 00:57:31.870
NATHAN HERRING: You get
to control that.

00:57:31.870 --> 00:57:34.140
AUDIENCE: You can?

00:57:34.140 --> 00:57:36.460
NATHAN HERRING: So it's a
configuration on the bucket,

00:57:36.460 --> 00:57:37.650
and you can set that up.

00:57:37.650 --> 00:57:41.190
And there's some documentation
up on my website, and I

00:57:41.190 --> 00:57:42.996
entreat you to take a look.

00:57:42.996 --> 00:57:46.660
AUDIENCE: Yesterday at the
Google Drive demonstration, if

00:57:46.660 --> 00:57:51.040
I upload pictures, I get optical
character recognition,

00:57:51.040 --> 00:57:52.880
for example, find
all the pictures

00:57:52.880 --> 00:57:54.670
in Germany or whatever.

00:57:54.670 --> 00:57:57.430
Do I have a similar
ability here?

00:57:57.430 --> 00:57:59.820
NAVNEET JONEJA: Not right now.

00:57:59.820 --> 00:58:02.370
That kind of brings into light
the difference between the two

00:58:02.370 --> 00:58:03.540
services, right?

00:58:03.540 --> 00:58:05.420
Cloud Storage is really focused
at giving you storage

00:58:05.420 --> 00:58:06.750
for your applications.

00:58:06.750 --> 00:58:10.020
It's really focused on storage
and the related features that

00:58:10.020 --> 00:58:11.600
you need from the
storage layer.

00:58:11.600 --> 00:58:13.600
Drive is much more end user
focused, and has those

00:58:13.600 --> 00:58:14.190
additional features.

00:58:14.190 --> 00:58:16.500
Which is not to say that if
you come and ask us for

00:58:16.500 --> 00:58:18.370
certain features, we won't
implement them, but that's

00:58:18.370 --> 00:58:20.040
kind of the dichotomy of how we
think about these services.

00:58:20.040 --> 00:58:22.465
AUDIENCE: Thank you.

00:58:22.465 --> 00:58:25.790
NATHAN HERRING: Anybody else?

00:58:25.790 --> 00:58:27.800
All right, we'd like to thank
you again for joining us.

00:58:27.800 --> 00:58:31.410
[APPLAUSE]

