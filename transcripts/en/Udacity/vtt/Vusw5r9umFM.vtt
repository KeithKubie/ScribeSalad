WEBVTT
Kind: captions
Language: en

00:00:01.179 --> 00:00:03.500
CORS has been
adopted by API providers

00:00:03.500 --> 00:00:06.500
as the primary way
to share resources.

00:00:06.500 --> 00:00:08.870
CORS Headers permit
cross origin requests

00:00:08.869 --> 00:00:10.669
without relying on
JavaScript, though they

00:00:10.669 --> 00:00:13.009
do need some server side code.

00:00:13.009 --> 00:00:15.019
CORS Headers allows
servers to specify

00:00:15.019 --> 00:00:16.669
a set of origins
that are allowed

00:00:16.670 --> 00:00:18.590
to access its resources.

00:00:18.589 --> 00:00:21.210
If the request referrer
header is on that list,

00:00:21.210 --> 00:00:24.050
It will be able to inspect
the answer and use the data,

00:00:24.050 --> 00:00:25.550
problem solved.

00:00:25.550 --> 00:00:27.230
However, if you
take a closer look,

00:00:27.230 --> 00:00:28.760
you will realize
that by the time

00:00:28.760 --> 00:00:30.870
the server sends
back the headers,

00:00:30.870 --> 00:00:33.170
the request will
already have executed.

00:00:33.170 --> 00:00:35.780
This can become problematic
with [INAUDIBLE] operations.

00:00:35.780 --> 00:00:38.960
Because it is already too
late to ignore the request.

00:00:38.960 --> 00:00:41.549
This is where preflight
requests come into play.

00:00:41.549 --> 00:00:43.939
A preflight request
uses the options method

00:00:43.939 --> 00:00:46.039
and allows the browser
to signal that it only

00:00:46.039 --> 00:00:48.850
wants to check what is
allowed and what is not.

00:00:48.850 --> 00:00:51.530
The server should not execute
any kind of business logic,

00:00:51.530 --> 00:00:54.969
but only return the headers,
similar to a head request.

00:00:54.969 --> 00:00:57.799
However, not all requests
will be preflighted.

00:00:57.799 --> 00:01:00.679
Requests that are made
because of image tags or forms

00:01:00.679 --> 00:01:02.210
will not be preflighted.

00:01:02.210 --> 00:01:05.120
So any kind of get request
will be sent straight away.

00:01:05.120 --> 00:01:07.100
You just won't be able
to read the answer

00:01:07.099 --> 00:01:09.019
if CORS doesn't allow it.

00:01:09.019 --> 00:01:11.329
The details about when
preflight requests are actually

00:01:11.329 --> 00:01:13.855
sent with CORS are
intricate and extensive.

00:01:13.855 --> 00:01:15.980
So I'll leave a link with
details in the instructor

00:01:15.980 --> 00:01:18.010
notes.

00:01:18.010 --> 00:01:20.800
Now, we have a couple of ways
to get around the single origin

00:01:20.799 --> 00:01:21.789
restriction.

00:01:21.790 --> 00:01:24.609
If you're ever involved in
publishing an API yourself,

00:01:24.609 --> 00:01:27.730
I'd encourage you to think about
CORS from the very beginning

00:01:27.730 --> 00:01:30.310
and to enable it on your server.

