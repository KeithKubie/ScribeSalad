WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.381
[MUSIC PLAYING]

00:00:06.335 --> 00:00:07.710
JEFFREY VAN GOGH:
Good afternoon.

00:00:07.710 --> 00:00:08.810
I'm Jeffrey van Gogh.

00:00:08.810 --> 00:00:11.400
I'm a tech lead manager
on the Android Studio team

00:00:11.400 --> 00:00:15.350
where I'm in charge of
the D8R8 Compiler Project.

00:00:15.350 --> 00:00:19.080
So last year a lot
happened in compiler space.

00:00:19.080 --> 00:00:21.000
We added incremental
dexing, which makes

00:00:21.000 --> 00:00:23.070
your debugger build faster.

00:00:23.070 --> 00:00:25.200
We added desugaring of
Java 8 language features.

00:00:25.200 --> 00:00:28.530
So you can now use Java
8 features like Lambdas

00:00:28.530 --> 00:00:30.570
in older versions of Android.

00:00:30.570 --> 00:00:33.860
We added a new dexers, which
compiles your Java bytecode

00:00:33.860 --> 00:00:37.590
to Dalvik bytecode that
runs from the art runtime.

00:00:37.590 --> 00:00:41.742
We added a new shrink
and optimizer called R8.

00:00:41.742 --> 00:00:43.950
And we added sculpin specific
optimizations into that

00:00:43.950 --> 00:00:45.160
as well.

00:00:45.160 --> 00:00:48.090
And then today, we also
have the Android app bundle.

00:00:48.090 --> 00:00:51.090
And so I wanted to talk
to you about all of these,

00:00:51.090 --> 00:00:54.106
show how it works inside
Gradle, and give you

00:00:54.106 --> 00:00:55.980
some tips of things you
need to know when you

00:00:55.980 --> 00:00:59.560
start using these new tools.

00:00:59.560 --> 00:01:02.970
So let's first start looking
at incremental dexing.

00:01:02.970 --> 00:01:07.320
So here, you have a very,
very simplified version

00:01:07.320 --> 00:01:11.340
of what happens in Gradle
when the compiler runs.

00:01:11.340 --> 00:01:14.040
So first we run either
Java C or Kotlin

00:01:14.040 --> 00:01:16.590
C to take your Java
or open source code

00:01:16.590 --> 00:01:19.260
and generate Java bytecode.

00:01:19.260 --> 00:01:22.890
And then we run DX that
takes a Java bytecode

00:01:22.890 --> 00:01:26.090
and produces Dalvik bytecode.

00:01:26.090 --> 00:01:28.470
Now the nice thing
that in Gradle,

00:01:28.470 --> 00:01:30.960
because of Gradle
and Jet Brains' work,

00:01:30.960 --> 00:01:34.530
Java C and Kotlin C are
actually incremental.

00:01:34.530 --> 00:01:37.650
And that means that if you
change one source file,

00:01:37.650 --> 00:01:40.620
it only compiles that one
source file and potentially

00:01:40.620 --> 00:01:44.405
any sources that have different
semantics based on that change.

00:01:44.405 --> 00:01:48.030
Now unfortunately, in
Android Studio and Gradle,

00:01:48.030 --> 00:01:52.230
before 3.0, DX didn't
do any incremental work.

00:01:52.230 --> 00:01:55.320
So it still took all
your Java class files

00:01:55.320 --> 00:01:58.320
and compiled each one of
them to Dalvik bytecode,

00:01:58.320 --> 00:02:02.040
even if those class
files haven't changed.

00:02:02.040 --> 00:02:04.980
So in Android Studio
3.0 and above,

00:02:04.980 --> 00:02:08.520
we actually change it so
that we can be incremental.

00:02:08.520 --> 00:02:11.370
So we split the DX
and do two steps.

00:02:11.370 --> 00:02:14.980
One that takes the Java bytecode
and compiles it to the Dalvik

00:02:14.980 --> 00:02:15.480
bytecode.

00:02:15.480 --> 00:02:17.380
And we do that per class file.

00:02:17.380 --> 00:02:20.990
So we actually generate now
one dex file per class file.

00:02:20.990 --> 00:02:24.870
And that way, that step
can be incremental.

00:02:24.870 --> 00:02:29.520
And then after that, we take all
those dex files and merge them

00:02:29.520 --> 00:02:33.420
into a single or multiple
dex files if needed.

00:02:33.420 --> 00:02:36.660
And the reason this works
is that most of the time

00:02:36.660 --> 00:02:40.080
spent in dexing is actually
in the compilation phase,

00:02:40.080 --> 00:02:42.690
where we take the
Java bytecode, which

00:02:42.690 --> 00:02:45.780
is a stack-based machine,
to Dalvik bytecode, which

00:02:45.780 --> 00:02:47.340
is register-based.

00:02:47.340 --> 00:02:51.600
And then the dex merging is more
or less like a fancy concat.

00:02:51.600 --> 00:02:53.940
And so that's a lot faster.

00:02:53.940 --> 00:02:58.140
And so we enable it by
default in your debug builds.

00:02:58.140 --> 00:03:00.470
In release builds,
we don't do that.

00:03:00.470 --> 00:03:04.020
And so you pay a little bit
extra for the initial build,

00:03:04.020 --> 00:03:06.540
because we need to
generate more files.

00:03:06.540 --> 00:03:09.580
But then each incremental
build that do you afterwards,

00:03:09.580 --> 00:03:13.500
it's a lot faster, just because
we have to do less work.

00:03:13.500 --> 00:03:16.230
There are some things you
need to be aware of, though.

00:03:16.230 --> 00:03:21.150
So Java C and Kotlin C are only
incremental when you are not

00:03:21.150 --> 00:03:23.320
using annotation processors.

00:03:23.320 --> 00:03:25.620
Any time you enable
annotation processors,

00:03:25.620 --> 00:03:27.960
these annotation
processors can reach

00:03:27.960 --> 00:03:29.830
into any part of your source.

00:03:29.830 --> 00:03:33.470
And so we cannot make
that incremental.

00:03:33.470 --> 00:03:36.720
Now, Gradle is working hard
to make that supported.

00:03:36.720 --> 00:03:40.860
So in Gradle 4.7, they
introduce a preliminary support

00:03:40.860 --> 00:03:44.130
for incremental
annotation processors.

00:03:44.130 --> 00:03:47.460
This requires some work by
the annotation processor

00:03:47.460 --> 00:03:49.530
to support that, because
annotation processor

00:03:49.530 --> 00:03:53.550
needs to tell Gradle how
incremental it can be.

00:03:53.550 --> 00:03:55.680
And so what I'd
like to ask you all

00:03:55.680 --> 00:03:58.590
is if you are an annotation
processor writer,

00:03:58.590 --> 00:04:00.630
look at the stuff
the Gradle is doing

00:04:00.630 --> 00:04:02.580
and see if you can support that.

00:04:02.580 --> 00:04:04.710
And if you're using
annotation processors, please

00:04:04.710 --> 00:04:06.630
read out to the
developers of those

00:04:06.630 --> 00:04:09.015
that they should look at
this, because it will really,

00:04:09.015 --> 00:04:10.140
really speed up your bills.

00:04:13.540 --> 00:04:18.160
So let's go on to desugaring.

00:04:18.160 --> 00:04:20.110
What is desugaring?

00:04:20.110 --> 00:04:21.940
We hear from all
people, they have it

00:04:21.940 --> 00:04:25.840
many times that they want to
use modern Java features, Java

00:04:25.840 --> 00:04:29.660
8, like lambdas, default
methods and interfaces,

00:04:29.660 --> 00:04:32.680
try-with resources, et cetera.

00:04:32.680 --> 00:04:34.660
Unfortunately, a lot
of these features

00:04:34.660 --> 00:04:38.590
require new bytecode and
language APIs to support them.

00:04:38.590 --> 00:04:40.630
And of course, a lot
of Android devices

00:04:40.630 --> 00:04:44.590
out there run older
versions of the Dalvik VM

00:04:44.590 --> 00:04:47.102
that doesn't yet support these.

00:04:47.102 --> 00:04:49.310
And the developers really
want to use these features,

00:04:49.310 --> 00:04:51.910
especially as they start
using new frameworks

00:04:51.910 --> 00:04:53.380
like re-active extensions.

00:04:53.380 --> 00:04:55.520
Now, I'm not sure exactly
what these libraries do,

00:04:55.520 --> 00:04:57.430
but they use a lot of callbacks.

00:04:57.430 --> 00:05:01.730
And it would be much nicer
if you can use lambdas there.

00:05:01.730 --> 00:05:04.240
And so what we do
with desugar is

00:05:04.240 --> 00:05:06.790
we take the bytecode
and calls that

00:05:06.790 --> 00:05:10.499
are generated by these new
features in the Java compiler,

00:05:10.499 --> 00:05:12.040
and we convert them
to something that

00:05:12.040 --> 00:05:14.030
is supported in the old system.

00:05:14.030 --> 00:05:17.530
So for instance, if you
use a lambda in Java 8,

00:05:17.530 --> 00:05:21.250
we can take that and
replace it with a class

00:05:21.250 --> 00:05:23.091
as if you were to
handwrite it, so that you

00:05:23.091 --> 00:05:25.090
don't have to handwrite
it and we do it for you.

00:05:27.740 --> 00:05:30.440
So let's take a look at
how that works in practice.

00:05:30.440 --> 00:05:32.890
So let's switch to the demo.

00:05:32.890 --> 00:05:36.780
So here for Android
Studio project,

00:05:36.780 --> 00:05:39.490
that is just created by
following the wizards

00:05:39.490 --> 00:05:42.670
and selecting a basic activity.

00:05:42.670 --> 00:05:48.010
And so if you go to the module
and the module settings.

00:05:48.010 --> 00:05:51.900
You'll see that I have set
the source language to 1.8.

00:05:51.900 --> 00:05:56.050
And now it will allow me to
write Java 8 language features.

00:05:56.050 --> 00:05:58.390
And if you do this,
Gradle automatically

00:05:58.390 --> 00:06:01.170
figures out that it needs
to run desugar for you.

00:06:01.170 --> 00:06:02.885
And so here I have some code.

00:06:02.885 --> 00:06:04.870
I have a floating
action button that I

00:06:04.870 --> 00:06:07.870
want to hook up some code
to, that when you click it--

00:06:07.870 --> 00:06:10.000
and all because I
use Java 8, I don't

00:06:10.000 --> 00:06:12.310
have to write new
OnClickListener

00:06:12.310 --> 00:06:14.560
and implement the
whole interface.

00:06:14.560 --> 00:06:16.480
Instead, I can
just write a lambda

00:06:16.480 --> 00:06:20.000
and have it in be invoked.

00:06:20.000 --> 00:06:24.510
So if I go and look at the
output of the Java C compiler,

00:06:24.510 --> 00:06:27.820
there is a main
activity of class.

00:06:27.820 --> 00:06:30.050
And I can copy that path.

00:06:30.050 --> 00:06:34.210
There is a tool in the Java
JDK called Java P, which

00:06:34.210 --> 00:06:37.761
allows you to take a class file
and look at the bytecode that's

00:06:37.761 --> 00:06:38.260
in there.

00:06:38.260 --> 00:06:40.502
And so I'll run that.

00:06:40.502 --> 00:06:42.210
And because it generates
a lot of output,

00:06:42.210 --> 00:06:43.470
I'll pipe it to a file.

00:06:43.470 --> 00:06:48.680
And then I'm opening it in my
favorites ID, Android Studio.

00:06:48.680 --> 00:06:52.890
And so if you haven't looked at
Java bytecode, don't be afraid.

00:06:52.890 --> 00:06:54.910
It is still pretty high-level.

00:06:54.910 --> 00:06:56.140
It's kind of readable.

00:06:56.140 --> 00:06:58.940
The only thing that's not there
is for loops, if statements,

00:06:58.940 --> 00:06:59.440
and so on.

00:06:59.440 --> 00:07:01.030
But like, if you
read through it,

00:07:01.030 --> 00:07:02.620
it's still pretty
understandable.

00:07:02.620 --> 00:07:05.869
So just a lot of constants that
we're just going to skip over.

00:07:05.869 --> 00:07:07.660
And then here, we have
your onCreate method

00:07:07.660 --> 00:07:09.290
that we were looking at.

00:07:09.290 --> 00:07:14.470
And in first call here, you see
that there is a virtual call

00:07:14.470 --> 00:07:15.880
to the set OnClickListener.

00:07:15.880 --> 00:07:19.360
That's the thing where
we passed our lambda to.

00:07:19.360 --> 00:07:21.430
And then see that the
argument before that

00:07:21.430 --> 00:07:25.430
is this invoked
dynamic construction.

00:07:25.430 --> 00:07:29.680
And it tells us that it's going
to pass this OnClickListener.

00:07:29.680 --> 00:07:31.870
So what does invoke dynamic?

00:07:31.870 --> 00:07:37.630
It's a nice feature in the Java
VM that is kind of reflective.

00:07:37.630 --> 00:07:41.770
So instead of the VM immediately
invoking your method,

00:07:41.770 --> 00:07:45.640
it allows the application
to provide a hook in there

00:07:45.640 --> 00:07:48.810
and dispatch the
method anyway you want.

00:07:48.810 --> 00:07:53.770
And so in Java, they have these
things called metafactories

00:07:53.770 --> 00:07:56.660
that they use to
implement these features.

00:07:56.660 --> 00:07:59.810
And so there is the
specific LambdaMetafactory.

00:07:59.810 --> 00:08:03.350
And you see that here in
the bottom of the file.

00:08:03.350 --> 00:08:05.350
Let's get this argument to view.

00:08:05.350 --> 00:08:09.430
And then it passes to this
lambda onCreate method,

00:08:09.430 --> 00:08:12.580
which we can see here as well.

00:08:12.580 --> 00:08:15.940
And if you look carefully,
you see that it actually

00:08:15.940 --> 00:08:20.660
has the snack bar codes that we
had in the body of our lambda.

00:08:20.660 --> 00:08:23.110
So what is going on here is
that the first time the app

00:08:23.110 --> 00:08:26.590
is run on the JVM,
it knows it needs

00:08:26.590 --> 00:08:28.780
to call this LambdaMetafactory.

00:08:28.780 --> 00:08:30.820
And that thing will
actually generate

00:08:30.820 --> 00:08:35.179
the class that implements
the interface on the fly.

00:08:35.179 --> 00:08:38.530
And then it will call that
for the rest of the program.

00:08:38.530 --> 00:08:42.370
Now the problem is that
that takes time at runtime.

00:08:42.370 --> 00:08:44.240
It adds more memory at runtime.

00:08:44.240 --> 00:08:47.710
So we don't do that
on an Androids,

00:08:47.710 --> 00:08:50.020
even in newer
version of Android.

00:08:50.020 --> 00:08:51.900
And of course, in old
version of Android,

00:08:51.900 --> 00:08:55.270
they don't know about this
invoke dynamic construction

00:08:55.270 --> 00:08:57.340
or the metafactory.

00:08:57.340 --> 00:08:59.440
So instead, desugar
will take care of this.

00:08:59.440 --> 00:09:02.800
So let's take a look at what's
happened in this project

00:09:02.800 --> 00:09:06.350
and when you build
it using desugar.

00:09:06.350 --> 00:09:09.550
So I'm going to open the APK.

00:09:09.550 --> 00:09:11.665
There is this tool
in Android Studio 3.0

00:09:11.665 --> 00:09:14.530
and above called
the APK Analyzer.

00:09:14.530 --> 00:09:17.300
It allows you to
look inside the APK,

00:09:17.300 --> 00:09:20.140
both for file size
of your resources,

00:09:20.140 --> 00:09:24.110
but also to see what's
inside the dex code that's

00:09:24.110 --> 00:09:26.550
going to run on the device.

00:09:26.550 --> 00:09:30.380
So here I see all the
packages in the dex codes.

00:09:30.380 --> 00:09:35.180
And I'm going to navigate to
my main activity, and then

00:09:35.180 --> 00:09:36.170
the onCreate method.

00:09:36.170 --> 00:09:38.930
And I'm going to
say show bytecode.

00:09:38.930 --> 00:09:43.440
So you see bytecode that is kind
of similar to Java bytecode.

00:09:43.440 --> 00:09:45.320
There's a couple of differences.

00:09:45.320 --> 00:09:48.800
Instead of using stack-based
machines, we have registers.

00:09:48.800 --> 00:09:52.490
But if you are not familiar with
that, don't worry about that.

00:09:52.490 --> 00:09:54.920
So at the end of the
method, we see the same call

00:09:54.920 --> 00:09:57.680
to the set OnClickListener.

00:09:57.680 --> 00:10:00.570
But the big difference is
that one line above, it

00:10:00.570 --> 00:10:02.720
doesn't show invoke
dynamic or invoke custom

00:10:02.720 --> 00:10:04.310
as it would be on Android.

00:10:04.310 --> 00:10:08.960
Instead, it calls this magic
class dash dash tilde lambda,

00:10:08.960 --> 00:10:12.030
and then it gets the
interface field of that.

00:10:12.030 --> 00:10:14.280
So let's take a
look at that class.

00:10:17.900 --> 00:10:21.210
So you see that the class
is right along there.

00:10:21.210 --> 00:10:23.060
And so what we see
in the class is

00:10:23.060 --> 00:10:26.540
that it implements the
OnClickListener interface.

00:10:26.540 --> 00:10:29.650
It has a static field instance.

00:10:29.650 --> 00:10:34.070
And then it has the onClick
method for the OnClickListener

00:10:34.070 --> 00:10:35.630
interface.

00:10:35.630 --> 00:10:39.050
And all it does is call the
generated method it contained

00:10:39.050 --> 00:10:41.740
to method body for lambda.

00:10:41.740 --> 00:10:46.490
And so now there is no Java 8
features, no Java 8 bytecodes

00:10:46.490 --> 00:10:47.970
in this code.

00:10:47.970 --> 00:10:50.880
And we can execute it
on any Android version,

00:10:50.880 --> 00:10:53.272
even as low as Ice
Cream Sandwich.

00:10:53.272 --> 00:10:54.730
So let's switch
back to the slides.

00:10:57.440 --> 00:11:00.560
So this is how that is
integrated into the Gradle

00:11:00.560 --> 00:11:01.880
build system.

00:11:01.880 --> 00:11:04.880
After the Java C
compiler runs, we

00:11:04.880 --> 00:11:07.600
run the separate
process called desugar.

00:11:07.600 --> 00:11:10.190
What it does, it reads
the Java bytecode.

00:11:10.190 --> 00:11:12.770
It takes out all these functions
that are not supported,

00:11:12.770 --> 00:11:16.130
emits new bytecodes, and
then we pass it on to DX.

00:11:16.130 --> 00:11:18.440
And so the rest of
the pipeline doesn't

00:11:18.440 --> 00:11:21.740
have to know anything
about desugaring.

00:11:21.740 --> 00:11:22.490
So this is nice.

00:11:22.490 --> 00:11:23.912
You can use new Java 8 features.

00:11:23.912 --> 00:11:25.370
There's a couple
of things you need

00:11:25.370 --> 00:11:29.130
to be aware of if you do your
own bytecode transformations.

00:11:29.130 --> 00:11:32.060
So there's people who do their
own bytecode transformations

00:11:32.060 --> 00:11:36.080
for code injection, crest
reporting, et cetera.

00:11:36.080 --> 00:11:38.570
Because we you run
desugar, we run

00:11:38.570 --> 00:11:41.640
your bytecode transformations
after desugar,

00:11:41.640 --> 00:11:45.560
which means that you see all our
crazy patterns like the dollar

00:11:45.560 --> 00:11:48.632
lambda codes when you're
doing your own processing.

00:11:48.632 --> 00:11:50.840
So be aware of that if you're
doing your own bytecode

00:11:50.840 --> 00:11:54.270
transformations.

00:11:54.270 --> 00:11:58.316
So let's move on to D8.

00:11:58.316 --> 00:12:00.320
D8 is our new dexer.

00:12:00.320 --> 00:12:04.190
As I said, Android, it
runs Dalvik bytecode, not

00:12:04.190 --> 00:12:05.150
Java bytecode.

00:12:05.150 --> 00:12:08.210
And dexer is the tool
that takes Java bytecodes

00:12:08.210 --> 00:12:10.520
from the stack-based
machine and converts it

00:12:10.520 --> 00:12:14.540
into Dalvik bytecode,
which is register-based.

00:12:14.540 --> 00:12:20.510
We had this tool before called
DX, but it's pretty old.

00:12:20.510 --> 00:12:21.890
People had problems with it.

00:12:21.890 --> 00:12:26.120
And so we decided to build
a new version called D8.

00:12:26.120 --> 00:12:28.460
And so the reason
we build it is we

00:12:28.460 --> 00:12:31.580
want to have faster completion,
because everybody always

00:12:31.580 --> 00:12:35.630
wants faster builds, we want
to generate smaller code,

00:12:35.630 --> 00:12:38.030
and give people
better diagnostics.

00:12:38.030 --> 00:12:42.410
By better diagnostics, I
mean both the error messages

00:12:42.410 --> 00:12:46.100
that you get when you run the
compiler as well as better

00:12:46.100 --> 00:12:47.780
debug information
that when you're

00:12:47.780 --> 00:12:49.847
running your app
in the debugger,

00:12:49.847 --> 00:12:51.680
that you have a better
understanding of what

00:12:51.680 --> 00:12:54.790
is going on.

00:12:54.790 --> 00:12:58.460
So how is D8 integrated into
the Gradle build system?

00:12:58.460 --> 00:13:01.400
It's actually quite
similar to what DX is.

00:13:01.400 --> 00:13:04.100
We just swap out the X for D8.

00:13:04.100 --> 00:13:08.150
The interesting thing there
is that in Android Studio 3.2,

00:13:08.150 --> 00:13:12.872
we also integrate the
desugaring step into D8.

00:13:12.872 --> 00:13:17.470
So that saves us a round trip
between reading and writing

00:13:17.470 --> 00:13:18.590
the class files.

00:13:18.590 --> 00:13:22.142
And so it will
provide more speed up.

00:13:22.142 --> 00:13:23.600
The side effect of
that, though, is

00:13:23.600 --> 00:13:26.660
that if you're writing your
own bytecode rewriters,

00:13:26.660 --> 00:13:29.540
we now run them
before D8, which means

00:13:29.540 --> 00:13:30.950
that your bytecode
rewriters have

00:13:30.950 --> 00:13:32.615
to support the Java 8 language.

00:13:35.600 --> 00:13:38.260
So let's look at the
demo of D8 in action.

00:13:45.050 --> 00:13:48.350
So here, I have another
project that I just created

00:13:48.350 --> 00:13:51.530
using the Project Wizard.

00:13:51.530 --> 00:13:54.350
And then because I'm
using Android Studio 3.2,

00:13:54.350 --> 00:13:56.790
D8 is already
enabled by default.

00:13:56.790 --> 00:13:58.820
So I went into the
Gradle property files

00:13:58.820 --> 00:14:00.980
and I explicitly
disabled D8 because I

00:14:00.980 --> 00:14:06.980
want to show you the behavior
of DX before we use D8.

00:14:06.980 --> 00:14:10.160
So in my main application,
I added some code

00:14:10.160 --> 00:14:14.690
to my OnClickListener to have
the snack bar print a custom

00:14:14.690 --> 00:14:15.800
message.

00:14:15.800 --> 00:14:18.440
And then I have a
method get message,

00:14:18.440 --> 00:14:20.360
and I set a breakpoint.

00:14:20.360 --> 00:14:22.507
So let's look at
that when I run that

00:14:22.507 --> 00:14:23.840
in the emulator on the debugger.

00:14:29.440 --> 00:14:30.740
So the app is running.

00:14:30.740 --> 00:14:36.760
And I'm going to hit the button
so that I hit the break point.

00:14:36.760 --> 00:14:40.530
So I initialize x to be the
length of the empty string.

00:14:40.530 --> 00:14:42.400
So that should be 0.

00:14:42.400 --> 00:14:44.380
And so in the if
statement, I expect

00:14:44.380 --> 00:14:48.040
to step through the true case.

00:14:48.040 --> 00:14:50.020
And of course,
that's what happens.

00:14:50.020 --> 00:14:52.580
And I'm going to step further.

00:14:52.580 --> 00:14:54.820
This is bizarre, right?

00:14:54.820 --> 00:14:56.680
I don't expect my
code to evaluate

00:14:56.680 --> 00:14:59.500
both the true and false case.

00:14:59.500 --> 00:15:01.940
So that's kind of weird.

00:15:01.940 --> 00:15:06.310
So let's see what happens if I
run and see what the output is.

00:15:06.310 --> 00:15:08.770
So luckily, the
output on the screen

00:15:08.770 --> 00:15:11.290
is hello there, what I expected.

00:15:11.290 --> 00:15:13.040
But there was something
weird going on.

00:15:13.040 --> 00:15:14.700
But what was going on?

00:15:14.700 --> 00:15:20.350
So let's remove this,
and sync our Gradle build

00:15:20.350 --> 00:15:22.540
so that we are switching to D8.

00:15:22.540 --> 00:15:28.330
And let's stop that
and redeploy it.

00:15:28.330 --> 00:15:32.320
So while this is going on--
so in DX we have this issue.

00:15:32.320 --> 00:15:37.360
And it was actually a very
high start bug report.

00:15:37.360 --> 00:15:41.410
And the reason it was happening
is that not only is the VM

00:15:41.410 --> 00:15:44.510
very different between
stack and register,

00:15:44.510 --> 00:15:47.880
the way that debug
information is stored in Java,

00:15:47.880 --> 00:15:50.140
the class files, and
Dalvik is very different.

00:15:50.140 --> 00:15:53.430
In Java, it starts
with the instructions,

00:15:53.430 --> 00:15:55.250
and in Dalvik, it's
a state machine.

00:15:55.250 --> 00:15:58.630
And so we had to translate
both from sector register

00:15:58.630 --> 00:16:00.430
and the debug information.

00:16:00.430 --> 00:16:03.670
And so sometimes
information got lost.

00:16:03.670 --> 00:16:07.480
So it might end up with a single
return statement in the Dalvik

00:16:07.480 --> 00:16:08.920
bytecode, and then
we couldn't map

00:16:08.920 --> 00:16:11.710
that in the debug information.

00:16:11.710 --> 00:16:14.950
In D8, we track all the
debug information carefully.

00:16:14.950 --> 00:16:16.690
And we have a whole
system of assertions

00:16:16.690 --> 00:16:19.790
to make sure that we don't
lose debug information.

00:16:19.790 --> 00:16:22.210
So let's hit the button here.

00:16:22.210 --> 00:16:24.700
We're hitting the
break point again.

00:16:24.700 --> 00:16:25.720
We step through.

00:16:25.720 --> 00:16:28.240
We're getting to
the truth branch.

00:16:28.240 --> 00:16:29.558
And we jump out of it.

00:16:29.558 --> 00:16:32.700
[APPLAUSE]

00:16:32.700 --> 00:16:34.450
Thank you.

00:16:34.450 --> 00:16:38.550
So let's switch
back to the slides.

00:16:38.550 --> 00:16:43.050
So we have done a
lot of work on D8.

00:16:43.050 --> 00:16:47.040
It has better debug information,
but it's also faster.

00:16:47.040 --> 00:16:50.430
So here are some data
around build time

00:16:50.430 --> 00:16:52.530
on the Google Nest app.

00:16:52.530 --> 00:16:57.220
So we shipped D8 as a preview
in Android Studio 3.1.

00:16:57.220 --> 00:17:00.210
There were not always faster,
but we had a lot more work

00:17:00.210 --> 00:17:01.992
since 3.1.

00:17:01.992 --> 00:17:05.490
And so in 3.2, on
average, we're about 16%

00:17:05.490 --> 00:17:07.710
faster in clean builds.

00:17:07.710 --> 00:17:09.480
And of course,
incremental to builds,

00:17:09.480 --> 00:17:12.880
the delta is smaller because
there is less code to compile.

00:17:12.880 --> 00:17:17.339
So still, 16% is pretty nice.

00:17:17.339 --> 00:17:20.670
So D8 is already widely used.

00:17:20.670 --> 00:17:25.980
If you're using Android P beta,
that was a release yesterday,

00:17:25.980 --> 00:17:29.520
Android P is completely
built with D8.

00:17:29.520 --> 00:17:32.220
The Google Docs app is
already built with D8,

00:17:32.220 --> 00:17:35.460
and then Google Photos is
right now in Canary using D8.

00:17:35.460 --> 00:17:38.430
And many more Google
apps will follow soon.

00:17:41.300 --> 00:17:43.200
So let's move over to R8.

00:17:45.950 --> 00:17:47.780
R8 is our new shrinker.

00:17:47.780 --> 00:17:50.690
So why do you want a shrinker?

00:17:50.690 --> 00:17:53.170
So most people who
build apps, they

00:17:53.170 --> 00:17:56.240
use a lot of libraries like
Google [INAUDIBLE],, Apache

00:17:56.240 --> 00:17:59.330
Commons, RX Java,
and you usually

00:17:59.330 --> 00:18:00.710
don't use that full library.

00:18:00.710 --> 00:18:03.920
The IP might use maybe
10%, 15% of that library.

00:18:03.920 --> 00:18:06.890
Yet, if you ship it as is, you
would be shipping all that code

00:18:06.890 --> 00:18:08.570
that you don't use.

00:18:08.570 --> 00:18:11.180
And application size
is important, right?

00:18:11.180 --> 00:18:13.820
People don't want to pay
for it in their bandwidth.

00:18:13.820 --> 00:18:16.650
It uses disk space
on the device.

00:18:16.650 --> 00:18:18.850
And so the smaller
app, the better.

00:18:18.850 --> 00:18:20.300
And there was a
previous solution

00:18:20.300 --> 00:18:22.700
to this, the ProGuard tool.

00:18:22.700 --> 00:18:25.070
But we hear from people that
they have issues with it.

00:18:25.070 --> 00:18:26.820
It was taking a long time.

00:18:26.820 --> 00:18:28.460
The code wasn't as
small as they wish.

00:18:28.460 --> 00:18:30.970
It didn't really
understand Android.

00:18:30.970 --> 00:18:33.710
And so we invested in
building a new shrinker.

00:18:33.710 --> 00:18:37.400
We also made the error
messages clearer.

00:18:37.400 --> 00:18:39.710
And of course, we understood
that people are already

00:18:39.710 --> 00:18:42.200
using ProGuard, and so
we decided that we wanted

00:18:42.200 --> 00:18:43.780
to be ProGuard compatible.

00:18:43.780 --> 00:18:46.330
And so we understand all
of ProGuard's keep rules.

00:18:49.500 --> 00:18:51.830
So how does ProGuard work?

00:18:51.830 --> 00:18:54.860
[INAUDIBLE] So
before in Gradle, we

00:18:54.860 --> 00:18:58.940
would run ProGuard between your
Java compilation and the dex

00:18:58.940 --> 00:18:59.600
generation.

00:18:59.600 --> 00:19:02.090
And the reason for
that is that ProGuard

00:19:02.090 --> 00:19:05.930
is a Java-to-Java compilation.

00:19:05.930 --> 00:19:09.101
And so this added more
time to your build.

00:19:09.101 --> 00:19:13.550
In Android Studio 3.2,
you can enable our R8.

00:19:13.550 --> 00:19:14.630
It's still experimental.

00:19:14.630 --> 00:19:17.450
You can enable it
using the setting.

00:19:17.450 --> 00:19:21.290
And what will happen is it
will replace ProGuard, desugar,

00:19:21.290 --> 00:19:24.940
D8 with one single
process, R8, that does

00:19:24.940 --> 00:19:26.410
all of those steps in one go.

00:19:30.260 --> 00:19:34.720
So we ran R8 on several
apps internally.

00:19:34.720 --> 00:19:36.380
This is the Nest app data.

00:19:36.380 --> 00:19:39.340
So by just swapping
ProGuard for R8,

00:19:39.340 --> 00:19:43.360
we're able to save 100K
on the dex file size,

00:19:43.360 --> 00:19:47.710
and save 25% in
compilation time.

00:19:47.710 --> 00:19:50.320
Now, the Nest app
is highly optimized.

00:19:50.320 --> 00:19:52.930
It has very specific
ProGuard keep rules,

00:19:52.930 --> 00:19:55.930
and still we were able to
save quite a bit of space.

00:19:55.930 --> 00:19:58.780
We also run this on some of the
system apps that are shipping

00:19:58.780 --> 00:20:01.420
with the Android
OS, and on average

00:20:01.420 --> 00:20:05.410
were able to save 25%
of the dex file size

00:20:05.410 --> 00:20:07.330
by just swapping
ProGuard with R8.

00:20:11.760 --> 00:20:13.930
So of course, last
year we announced

00:20:13.930 --> 00:20:16.680
that Kotlin is now a
supported language on Android.

00:20:16.680 --> 00:20:20.400
And so we figured we need to do
something for Kotlin as well.

00:20:20.400 --> 00:20:22.060
Kotlin this is amazing language.

00:20:22.060 --> 00:20:24.807
It allows you to write
very succinct codes.

00:20:24.807 --> 00:20:26.640
But of course, if you
write a succinct code,

00:20:26.640 --> 00:20:30.690
and it's so powerful, it needs
to generate a lot of bytecode.

00:20:30.690 --> 00:20:32.190
And so we looked
into places what

00:20:32.190 --> 00:20:37.990
we could strength that further
than the standard analysis.

00:20:37.990 --> 00:20:42.090
And so we found a couple
places where we could do things

00:20:42.090 --> 00:20:45.930
like class merging,
especially around lambdas,

00:20:45.930 --> 00:20:48.930
we do more nullness
analysis, et cetera.

00:20:48.930 --> 00:20:50.850
So let's take a
look at that demo.

00:20:54.840 --> 00:21:02.079
So here I have a
Kotlin application.

00:21:02.079 --> 00:21:03.870
For those of you haven't
programmed Kotlin,

00:21:03.870 --> 00:21:08.444
this is a data class, which
is a class that it generates

00:21:08.444 --> 00:21:09.360
a lot of code for you.

00:21:09.360 --> 00:21:13.950
So you have a couple fields
here that are really properties.

00:21:13.950 --> 00:21:16.410
So it generates
getters and setters,

00:21:16.410 --> 00:21:19.110
equals, get hash
code, et cetera.

00:21:19.110 --> 00:21:21.590
And then here, I have an
extension method that tells it

00:21:21.590 --> 00:21:26.370
that if I see a collection
that's instantiated to the type

00:21:26.370 --> 00:21:29.640
car, at this extra
method, it allows me

00:21:29.640 --> 00:21:32.210
to search for make and model.

00:21:32.210 --> 00:21:36.270
And so in the class, I'm
using the sequence operators

00:21:36.270 --> 00:21:40.050
of Kotlin to do a couple
of filters and groupize.

00:21:40.050 --> 00:21:43.439
Now, normally you wouldn't write
this many filters in a row.

00:21:43.439 --> 00:21:45.480
You would probably just
put all the Boolean logic

00:21:45.480 --> 00:21:46.830
in one filter.

00:21:46.830 --> 00:21:50.190
But they wanted to show you what
happens with multiple filters.

00:21:50.190 --> 00:21:53.610
So normally, Kotlin will
compile each of these lambdas

00:21:53.610 --> 00:21:55.710
into its own class.

00:21:55.710 --> 00:21:59.650
And so each lambda you
use adds a new class.

00:21:59.650 --> 00:22:01.842
And that's not really what
you want in a dex file,

00:22:01.842 --> 00:22:04.050
because you always want to
keep the methods reference

00:22:04.050 --> 00:22:06.420
count low.

00:22:06.420 --> 00:22:10.860
So let's take a look at what
happens when we do with R8.

00:22:10.860 --> 00:22:15.330
In this project, enabled R8
by setting this property.

00:22:15.330 --> 00:22:19.140
And let's take a look what
happens in the output APK.

00:22:19.140 --> 00:22:22.980
So here, my class is dex again.

00:22:22.980 --> 00:22:28.170
The main activity-- and I
added a call to that method,

00:22:28.170 --> 00:22:30.480
in the onCreate method.

00:22:30.480 --> 00:22:34.110
And so here in the
onCreate method,

00:22:34.110 --> 00:22:37.380
you see that there is this new
instance to this lambda group

00:22:37.380 --> 00:22:38.640
class.

00:22:38.640 --> 00:22:41.460
And the interesting thing is
that lambda group class is not

00:22:41.460 --> 00:22:42.900
defined in a package.

00:22:42.900 --> 00:22:46.510
It's defined at the top level.

00:22:46.510 --> 00:22:48.000
So let's take a look at that.

00:22:48.000 --> 00:22:51.380
Here in the dex file,
there is this [INAUDIBLE]

00:22:51.380 --> 00:22:54.750
lambda group class.

00:22:54.750 --> 00:22:59.100
And you see it implements the
Kotlin function one interface.

00:22:59.100 --> 00:23:01.260
And it has two instance fields.

00:23:01.260 --> 00:23:05.670
One, which is of type
objects, is named capture,

00:23:05.670 --> 00:23:08.250
and the other one is ID.

00:23:08.250 --> 00:23:12.360
And then the constructor takes
both the ID and the objects

00:23:12.360 --> 00:23:15.000
and sets the variables.

00:23:15.000 --> 00:23:19.500
And then here, in
the invoke method,

00:23:19.500 --> 00:23:22.650
we see that it has
this packet switched.

00:23:22.650 --> 00:23:25.680
And so what we're doing is
we're regenerating, basically,

00:23:25.680 --> 00:23:28.800
the bytecode equivalent
of a switch statement.

00:23:28.800 --> 00:23:32.130
We switch over the ID that was
passed into the constructor

00:23:32.130 --> 00:23:34.324
to figure out which
piece of code to call.

00:23:34.324 --> 00:23:35.740
And so if you
scroll through here,

00:23:35.740 --> 00:23:42.930
you'll see that the call to get
here, the property read model,

00:23:42.930 --> 00:23:44.820
are all in this piece of code.

00:23:44.820 --> 00:23:47.800
And then you see here
that we have the switch.

00:23:47.800 --> 00:23:49.440
And so what is
going on is we find

00:23:49.440 --> 00:23:54.570
that we have lambdas that
are of the same signature,

00:23:54.570 --> 00:23:57.480
basically they implement
the same interface,

00:23:57.480 --> 00:24:00.730
and they have the same
capture variables.

00:24:00.730 --> 00:24:03.270
And so we can take all
the different lambdas

00:24:03.270 --> 00:24:05.760
and merge them into
one class, which

00:24:05.760 --> 00:24:09.657
allows you to have less metadata
and less method references.

00:24:09.657 --> 00:24:11.115
So let's switch
back to the slides.

00:24:20.450 --> 00:24:24.170
Kotlin is something
we're very excited about,

00:24:24.170 --> 00:24:26.010
and it's becoming more
and more important.

00:24:26.010 --> 00:24:29.390
And so with R8, we're going to
keep adding new optimizations

00:24:29.390 --> 00:24:30.540
for Kotlin.

00:24:30.540 --> 00:24:36.500
We're doing the lambda
merging, no analysis,

00:24:36.500 --> 00:24:38.140
and we're adding many more.

00:24:38.140 --> 00:24:40.740
And so hopefully, R8
will really help you get

00:24:40.740 --> 00:24:41.990
your Kotlin code even smaller.

00:24:46.070 --> 00:24:50.770
Lastly, we announced Android
app bundle yesterday.

00:24:50.770 --> 00:24:53.050
One of the things that comes
with Android app bundle

00:24:53.050 --> 00:24:56.320
is dynamic features.

00:24:56.320 --> 00:25:00.790
And so you cannot only
split your APK by resources,

00:25:00.790 --> 00:25:02.820
languages, et cetera.

00:25:02.820 --> 00:25:08.457
You can now also split your
features into multiple APKs.

00:25:08.457 --> 00:25:10.540
And that's of course,
great, because not everybody

00:25:10.540 --> 00:25:12.790
uses every feature of your app.

00:25:12.790 --> 00:25:15.700
And now the downside-- and we
heard this already with Instant

00:25:15.700 --> 00:25:17.050
Apps last year--

00:25:17.050 --> 00:25:19.280
instead, it makes
it harder to run

00:25:19.280 --> 00:25:23.200
ProGuard or R8 over your
app, because these tools,

00:25:23.200 --> 00:25:25.870
they are based on doing
whole program analysis.

00:25:25.870 --> 00:25:29.030
And now you don't have a
single program anymore.

00:25:29.030 --> 00:25:30.700
And so what we came
up with is a way

00:25:30.700 --> 00:25:34.000
to take all your
different features,

00:25:34.000 --> 00:25:36.370
add them, and pass
them as one command

00:25:36.370 --> 00:25:39.640
line into ProGuard or R8
so that it is effectively

00:25:39.640 --> 00:25:41.520
a whole program.

00:25:41.520 --> 00:25:48.520
And then program R8 will spit
out a single jar or dex file.

00:25:48.520 --> 00:25:51.220
And then we can take that
information, the ProGuard

00:25:51.220 --> 00:25:54.820
mapping file and the
original feature jars,

00:25:54.820 --> 00:25:57.160
and with that information,
we have enough data

00:25:57.160 --> 00:26:00.139
to reconstitute the
different dex files.

00:26:00.139 --> 00:26:01.930
And so we have this
new dex splitter, which

00:26:01.930 --> 00:26:04.930
is based on the D8 code base.

00:26:04.930 --> 00:26:07.000
And it will spit out
the whole program again

00:26:07.000 --> 00:26:08.950
into different modules.

00:26:08.950 --> 00:26:11.770
And now you can apply
shrinking and optimizations

00:26:11.770 --> 00:26:15.770
to your features as well.

00:26:15.770 --> 00:26:17.060
So this is coming soon.

00:26:17.060 --> 00:26:20.620
It will be in Android Studio 3.2
by the time it reaches stable.

00:26:24.900 --> 00:26:28.340
So we looked at a whole bunch
of different compiler work

00:26:28.340 --> 00:26:30.380
that we've done
over the last year.

00:26:30.380 --> 00:26:32.900
Some of it is already stable.

00:26:32.900 --> 00:26:35.350
Incremental dexing, it was
introduced in Android Studio

00:26:35.350 --> 00:26:39.540
3.0, desugar stand
alone was Studio 3.0.

00:26:39.540 --> 00:26:43.130
In Android Studio
3.2 we're enabling D8

00:26:43.130 --> 00:26:46.599
and desugaring as part of that.

00:26:46.599 --> 00:26:48.140
And then in Android
Studio 3.2, we're

00:26:48.140 --> 00:26:52.430
introducing R8 as an
experimental feature.

00:26:52.430 --> 00:26:53.780
Please use it.

00:26:53.780 --> 00:26:57.320
We announced that DX will be
deprecated as soon as we find

00:26:57.320 --> 00:27:01.400
no more major issues in D8.

00:27:01.400 --> 00:27:05.460
So before even a year
or so, DX will be gone.

00:27:05.460 --> 00:27:06.770
So we'd like you to try it out.

00:27:09.970 --> 00:27:12.770
File bugs-- so if you
go in Android Studio

00:27:12.770 --> 00:27:16.020
to the Help menu, there is
a Submit Feedback option,

00:27:16.020 --> 00:27:19.970
which will immediately dump
you into the Issue Tracker.

00:27:19.970 --> 00:27:21.530
And then you can
easily file a bug.

00:27:21.530 --> 00:27:24.950
Our team is very
responsive to these bugs.

00:27:24.950 --> 00:27:26.919
There is another
session tomorrow

00:27:26.919 --> 00:27:28.460
that's called
Effective ProGuard Keep

00:27:28.460 --> 00:27:30.590
Rules for Smaller Applications.

00:27:30.590 --> 00:27:32.960
And it's basically
a how-to on how

00:27:32.960 --> 00:27:38.360
to start using ProGuard or R8 by
one of the developers on the R8

00:27:38.360 --> 00:27:39.890
team.

00:27:39.890 --> 00:27:42.780
Please fill out the survey on
the Google.com I/O schedule

00:27:42.780 --> 00:27:43.940
about this talk as well.

00:27:43.940 --> 00:27:45.035
Thanks, everybody!

00:27:45.035 --> 00:27:49.750
[MUSIC PLAYING]

