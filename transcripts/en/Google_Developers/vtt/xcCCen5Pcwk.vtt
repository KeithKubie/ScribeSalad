WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.450
[MUSIC PLAYING]

00:00:08.450 --> 00:00:08.950
All right.

00:00:08.950 --> 00:00:11.810
So I'm super excited about
talking to you all here at GDC.

00:00:11.810 --> 00:00:13.200
And I've spent
the last few weeks

00:00:13.200 --> 00:00:14.970
building a bunch of sample
games and a whole bunch of game

00:00:14.970 --> 00:00:16.520
engines, and I can
confidently say

00:00:16.520 --> 00:00:19.190
that it is the best time
ever to be a game developer.

00:00:19.190 --> 00:00:21.320
Our tools are
better, our platforms

00:00:21.320 --> 00:00:24.470
are more refined and stable,
and our means of distribution

00:00:24.470 --> 00:00:26.740
is, well, more open and
available than anything

00:00:26.740 --> 00:00:28.840
we've ever had before.

00:00:28.840 --> 00:00:31.100
So game engines are big
and powerful tools that

00:00:31.100 --> 00:00:33.190
work across multiple platforms.

00:00:33.190 --> 00:00:35.330
But sometimes they may
seem to be a bit big

00:00:35.330 --> 00:00:36.837
and clunky for mobile.

00:00:36.837 --> 00:00:38.920
Things are not always
associated with game engines

00:00:38.920 --> 00:00:42.160
or being small, providing
optimal performance,

00:00:42.160 --> 00:00:44.694
and especially leveraging
platform-specific features.

00:00:44.694 --> 00:00:46.110
And of course you
want to be small

00:00:46.110 --> 00:00:48.802
because great small
games get more downloads

00:00:48.802 --> 00:00:49.760
than great large games.

00:00:49.760 --> 00:00:51.070
And you want them
to optimally perform

00:00:51.070 --> 00:00:52.528
because of course
higher performing

00:00:52.528 --> 00:00:54.650
games get more fun per
watt of mobile power,

00:00:54.650 --> 00:00:57.870
get better ratings, more play
time, and more downloads.

00:00:57.870 --> 00:01:00.340
And leveraging platform
features can be key for success.

00:01:00.340 --> 00:01:03.050
Especially on Android, we have
a huge set of game services

00:01:03.050 --> 00:01:05.740
that help you to grow, retain,
and yet even monetize your user

00:01:05.740 --> 00:01:07.230
base.

00:01:07.230 --> 00:01:09.790
Google Play offers a feature
to help you called multiple APK

00:01:09.790 --> 00:01:12.220
support to allow you to post
different APKs which target

00:01:12.220 --> 00:01:13.170
different hardware versions.

00:01:13.170 --> 00:01:15.378
We're going to uncover two
of the most important ways

00:01:15.378 --> 00:01:18.760
in which you can use it, which
is texture formats and ABIs,

00:01:18.760 --> 00:01:20.282
with a few different
game engines.

00:01:20.282 --> 00:01:21.990
We'll also talk briefly
about integrating

00:01:21.990 --> 00:01:23.347
Google Play game services.

00:01:23.347 --> 00:01:23.930
And that's it.

00:01:23.930 --> 00:01:25.638
I only have five
minutes and I've already

00:01:25.638 --> 00:01:27.460
used a minute and 15 seconds.

00:01:27.460 --> 00:01:29.030
So, the basic
rules for multi-APK

00:01:29.030 --> 00:01:31.280
are that we need to APKs
that have a different version

00:01:31.280 --> 00:01:33.450
number with distinguishing
manifest characteristic

00:01:33.450 --> 00:01:35.390
that allows Google Play
to filter correctly.

00:01:35.390 --> 00:01:37.000
Now version networks
are used for priority

00:01:37.000 --> 00:01:39.083
when the same device can
support multiple versions

00:01:39.083 --> 00:01:39.800
of the same app.

00:01:39.800 --> 00:01:42.559
The multiple-APK goal is
how to generate an APK

00:01:42.559 --> 00:01:44.600
with different version
numbers, different texture

00:01:44.600 --> 00:01:47.722
format, and different binary
targets in each engine.

00:01:47.722 --> 00:01:49.930
It's always a comfort for
me to work with Cocos 2d-x.

00:01:49.930 --> 00:01:51.050
I think it's because
like Android it's

00:01:51.050 --> 00:01:52.090
free and open source.

00:01:52.090 --> 00:01:54.900
This game engine delivers small
binaries with high performance.

00:01:54.900 --> 00:01:56.441
And it's loaded with
tools to get you

00:01:56.441 --> 00:01:57.700
in the game from the start.

00:01:57.700 --> 00:01:59.840
Internally, Cocos supports
just the older formats.

00:01:59.840 --> 00:02:01.640
But since it's open source,
it's relatively easy

00:02:01.640 --> 00:02:02.720
to add support for others.

00:02:02.720 --> 00:02:04.190
You need to use
whatever texture packing

00:02:04.190 --> 00:02:05.648
tool you might be
using to generate

00:02:05.648 --> 00:02:06.990
sprite sheets with each format.

00:02:06.990 --> 00:02:09.139
It'll also be up to you
to pack the correct format

00:02:09.139 --> 00:02:10.699
to the correct builds.

00:02:10.699 --> 00:02:11.737
All right.

00:02:11.737 --> 00:02:13.320
It's really easy to
find that manifest

00:02:13.320 --> 00:02:14.450
and make changes at least.

00:02:14.450 --> 00:02:16.616
Here's an example of declaring
a build that requires

00:02:16.616 --> 00:02:18.350
DXT for Google Play.

00:02:18.350 --> 00:02:20.850
It's super easy to do
architecture specific builds

00:02:20.850 --> 00:02:22.470
because it just uses the APK.

00:02:22.470 --> 00:02:24.440
So a default makefile
looks like this.

00:02:24.440 --> 00:02:27.570
By adding the V7A ABI
we get an RB7 build.

00:02:27.570 --> 00:02:30.250
And this gives us
an X86-only build.

00:02:30.250 --> 00:02:32.880
By putting multiple ABIs on
the line separated by spaces

00:02:32.880 --> 00:02:34.550
we get a fat build
with both binaries.

00:02:34.550 --> 00:02:36.342
And Android chooses
the best automatically.

00:02:36.342 --> 00:02:38.800
There are lots of features that
show how to enter integrate

00:02:38.800 --> 00:02:40.570
Google Play Game
Services with Cocos 2d-x,

00:02:40.570 --> 00:02:42.600
and it's easy because
we have a C++ client.

00:02:42.600 --> 00:02:44.590
The Cocos team created
their own sample here,

00:02:44.590 --> 00:02:47.940
showing leaderboards and
achievements as well as

00:02:47.940 --> 00:02:49.147
turn-based multiplayer.

00:02:49.147 --> 00:02:50.230
So let's switch to Unreal.

00:02:50.230 --> 00:02:52.391
Now texture formats are
really easy with Unreal.

00:02:52.391 --> 00:02:53.890
You just select
which texture format

00:02:53.890 --> 00:02:54.640
you want to build against.

00:02:54.640 --> 00:02:56.560
However Unreal won't
automatically get your manifest

00:02:56.560 --> 00:02:58.018
or recheck your
format to allow you

00:02:58.018 --> 00:03:00.690
to use this to differentiate
multiple APK on Google Play.

00:03:00.690 --> 00:03:01.910
To that it's really simple.

00:03:01.910 --> 00:03:03.701
You create a manifest
requirement additions

00:03:03.701 --> 00:03:05.820
text file and add the
support GL texture tag.

00:03:05.820 --> 00:03:08.154
In my case I've added the one
for ASTC low dynamic range

00:03:08.154 --> 00:03:10.486
which is what is currently
supported by high-end Android

00:03:10.486 --> 00:03:11.130
devices.

00:03:11.130 --> 00:03:14.120
Now, for ET2, one needs to
require OpenGL [INAUDIBLE]

00:03:14.120 --> 00:03:16.000
3.0 in that APK
because there isn't

00:03:16.000 --> 00:03:17.850
a hardware extension for it.

00:03:17.850 --> 00:03:19.420
It'd be great if
someone did a patch

00:03:19.420 --> 00:03:21.416
to make Unreal do
this on its own.

00:03:21.416 --> 00:03:23.790
Unreal has built-in support
for Google Play Games servers

00:03:23.790 --> 00:03:24.825
as just leaderboards
and achievements.

00:03:24.825 --> 00:03:26.820
It also has support for
licensing, APK [INAUDIBLE]

00:03:26.820 --> 00:03:28.930
files, add [INAUDIBLE] banner
adds and in-app purchases.

00:03:28.930 --> 00:03:30.570
You can add your Google
Play app ID here along

00:03:30.570 --> 00:03:32.340
with mapping for
leaderboards and achievements

00:03:32.340 --> 00:03:33.714
and follow the
blueprints example

00:03:33.714 --> 00:03:36.440
given with Tappy Chicken to
show how to integrate them.

00:03:36.440 --> 00:03:39.374
If you want to do a build for
X86, X86-64, Android expansion

00:03:39.374 --> 00:03:41.540
pack, you'll need to rebuild
the editor from source.

00:03:41.540 --> 00:03:42.870
Not hard just a bit more work.

00:03:42.870 --> 00:03:45.864
And after all, being
open-sourced is pretty cool.

00:03:45.864 --> 00:03:48.280
Unity on the other hand will
nicely add the texture format

00:03:48.280 --> 00:03:49.590
into the manifest file for you.

00:03:49.590 --> 00:03:52.070
But if you select
ETC2, you'll want

00:03:52.070 --> 00:03:54.190
to make sure you manually
set the required GLES

00:03:54.190 --> 00:03:55.490
version to 3.0.

00:03:55.490 --> 00:03:57.970
To do this without selecting
the ES3 path in Unity

00:03:57.970 --> 00:04:00.439
you can take advantage
of manifest overwriting.

00:04:00.439 --> 00:04:02.980
By creating an Android manifest
file in the plugins directory

00:04:02.980 --> 00:04:04.260
that contains [INAUDIBLE]
the user's feature

00:04:04.260 --> 00:04:05.487
file for the GLES version.

00:04:05.487 --> 00:04:07.570
This is also how you can
add in customizations you

00:04:07.570 --> 00:04:09.025
might want to in the manifest.

00:04:09.025 --> 00:04:10.400
You have to go to
player settings

00:04:10.400 --> 00:04:12.330
to switch the ABI type
for Unity, which today

00:04:12.330 --> 00:04:14.720
just supports RMB7 and X86.

00:04:14.720 --> 00:04:17.220
Unity doesn't have any built-in
support for Google Play Game

00:04:17.220 --> 00:04:18.200
Services yet.

00:04:18.200 --> 00:04:19.680
But fortunately we've written
a plug-in that supports

00:04:19.680 --> 00:04:20.860
almost all Play games features.

00:04:20.860 --> 00:04:21.959
And if this weren't
a lightning talk,

00:04:21.959 --> 00:04:24.292
this is where I go into an
in-depth discussion about how

00:04:24.292 --> 00:04:25.090
to use this stuff.

00:04:25.090 --> 00:04:26.240
There are many
other options too.

00:04:26.240 --> 00:04:28.190
GameMaker and Corona have
great Google Play games

00:04:28.190 --> 00:04:30.340
services integrations with
Corona also integrating

00:04:30.340 --> 00:04:32.790
our real-time Liquid Fun
2D particle simulation,

00:04:32.790 --> 00:04:35.290
Defold from [INAUDIBLE] allow
some amazing real-time changes

00:04:35.290 --> 00:04:36.683
in a cloud-based
development environment,

00:04:36.683 --> 00:04:38.599
and Autodesk Stingray
has powerful integration

00:04:38.599 --> 00:04:40.530
with professional 3-D tools.

00:04:40.530 --> 00:04:44.730
Remember, have fun, think small,
leverage Play Game services

00:04:44.730 --> 00:04:48.160
and package the best
binary for you users.

00:04:48.160 --> 00:04:48.920
Thank you.

00:04:48.920 --> 00:04:50.880
Here's how to reach
me and please welcome

00:04:50.880 --> 00:04:53.330
to the stage, Nathan Camarillo.

00:04:53.330 --> 00:04:54.830
[APPLAUSE]

00:04:54.830 --> 00:05:08.830
[MUSIC PLAYING]

