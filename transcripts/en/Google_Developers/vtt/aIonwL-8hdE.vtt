WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.430
JACOB RICHMAN: So we're
talking about Dart JavaScript.

00:00:02.430 --> 00:00:05.380
[APPLAUSE]

00:00:05.380 --> 00:00:10.600
In the past, using JavaScript
Interop meant verbose syntax

00:00:10.600 --> 00:00:12.370
and giving up all
the static type

00:00:12.370 --> 00:00:14.430
checking you take
for granted in Dart--

00:00:14.430 --> 00:00:17.520
so you'd miss your ID
autocompletions, everything

00:00:17.520 --> 00:00:18.980
you love about Dart.

00:00:18.980 --> 00:00:21.600
And worse, performance
was also a problem,

00:00:21.600 --> 00:00:24.290
because we wrapped every
single object when it passed

00:00:24.290 --> 00:00:27.630
between JavaScript and Dart.

00:00:27.630 --> 00:00:30.290
The new type JavaScript
Interop facade

00:00:30.290 --> 00:00:33.080
give you the same terse
syntax and static type

00:00:33.080 --> 00:00:36.440
analysis you expect
for Dart, but for all

00:00:36.440 --> 00:00:38.980
your JavaScript libraries.

00:00:38.980 --> 00:00:40.610
And equally importantly,
we no longer

00:00:40.610 --> 00:00:43.180
wrap any objects when we
pass them across the Interop

00:00:43.180 --> 00:00:47.490
boundary-- so you don't have
to worry about wrapping causing

00:00:47.490 --> 00:00:50.080
a lot of performance overhead.

00:00:50.080 --> 00:00:53.080
Let's take a look at a simple
example using the chart JS

00:00:53.080 --> 00:00:56.010
library to see how hard
Interop was for even

00:00:56.010 --> 00:00:59.230
a really simple use case.

00:00:59.230 --> 00:01:01.240
Well, first, look at
the JavaScript version

00:01:01.240 --> 00:01:04.190
of this example, because
unfortunately, it's much easier

00:01:04.190 --> 00:01:06.710
to read than the Dart version.

00:01:06.710 --> 00:01:08.760
In this example,
all we're doing is

00:01:08.760 --> 00:01:12.470
we are getting a canvas
rendering context 2D object.

00:01:12.470 --> 00:01:14.100
We're creating a data set.

00:01:14.100 --> 00:01:16.410
Configuring some
styles for the chart.

00:01:16.410 --> 00:01:17.860
Defining the labels
for the chart.

00:01:17.860 --> 00:01:21.170
Creating a data set
with three points.

00:01:21.170 --> 00:01:23.020
And then, rendering the data.

00:01:23.020 --> 00:01:24.430
To a chart object.

00:01:24.430 --> 00:01:25.670
Passing in that canvas.

00:01:25.670 --> 00:01:27.180
So pretty simple.

00:01:27.180 --> 00:01:30.210
But here's what the Dart
version looked like.

00:01:30.210 --> 00:01:32.660
Unfortunately, this code's
a lot harder to read,

00:01:32.660 --> 00:01:36.400
because of the verbose syntax
for method calls, property

00:01:36.400 --> 00:01:39.220
accesses, and
invoking constructors.

00:01:39.220 --> 00:01:44.640
And the verbose calls to
jsify don't help either.

00:01:44.640 --> 00:01:46.240
This code barely
fits on my side,

00:01:46.240 --> 00:01:51.030
so let's zoom in a bit to
understand it in more detail.

00:01:51.030 --> 00:01:53.200
So if you use Dart
HTML a lot, you'll

00:01:53.200 --> 00:01:55.650
wonder why we're
having to call the

00:01:55.650 --> 00:02:01.660
get context method with the
JS Interop call method syntax.

00:02:01.660 --> 00:02:03.930
The reason is the
old Interop only

00:02:03.930 --> 00:02:07.100
let you pass a small number
of types between Dart

00:02:07.100 --> 00:02:10.610
and JavaScript-- and
CanvasRenderingContext2D

00:02:10.610 --> 00:02:12.640
wasn't one of those types.

00:02:12.640 --> 00:02:15.940
So we had to pass the
canvas object to JavaScript

00:02:15.940 --> 00:02:17.940
and then, call the
JavaScript method on it

00:02:17.940 --> 00:02:20.970
to make sure we're
playing nicely.

00:02:20.970 --> 00:02:22.880
If we hadn't done
that, we would have

00:02:22.880 --> 00:02:25.710
end up passing an
opaque dark candle

00:02:25.710 --> 00:02:28.715
to the
CanvasRenderingContext2D object

00:02:28.715 --> 00:02:33.970
and JavaScript would have had
no idea what to do with it.

00:02:33.970 --> 00:02:37.940
And then, here are
the jsify calls again.

00:02:37.940 --> 00:02:41.400
In addition to being verbose,
these were also really slow.

00:02:41.400 --> 00:02:43.850
Because when you
make this call, you

00:02:43.850 --> 00:02:47.140
have to recursively
copy every object

00:02:47.140 --> 00:02:50.060
within the map and
any maps or lists

00:02:50.060 --> 00:02:52.250
within the map to
convert them over

00:02:52.250 --> 00:02:56.150
to the correct JavaScript types.

00:02:56.150 --> 00:02:57.900
For a simple example,
this wouldn't

00:02:57.900 --> 00:02:59.050
be a performance problem.

00:02:59.050 --> 00:03:02.980
But imagine if you're trying
to plot 10,000 points,

00:03:02.980 --> 00:03:06.340
now you're having
to worry about this.

00:03:06.340 --> 00:03:08.020
And calling a
JavaScript constructor

00:03:08.020 --> 00:03:10.230
was also not really
very obvious.

00:03:10.230 --> 00:03:12.772
Looking at that line above,
it's not really clear

00:03:12.772 --> 00:03:14.480
that I'm just creating
a new chart object

00:03:14.480 --> 00:03:17.940
and passing in those parameters.

00:03:17.940 --> 00:03:19.810
So why was Interop so hard?

00:03:19.810 --> 00:03:22.000
Superficially,
Dart and JavaScript

00:03:22.000 --> 00:03:24.350
have a lot of commonalities.

00:03:24.350 --> 00:03:27.690
Both languages have first
class functions, properties,

00:03:27.690 --> 00:03:30.040
and do not require
method overloading.

00:03:30.040 --> 00:03:31.690
It seems really
reasonable that you

00:03:31.690 --> 00:03:35.180
should be able to call
JavaScript methods from Dart

00:03:35.180 --> 00:03:38.120
using that same Dart
syntax you're used to,

00:03:38.120 --> 00:03:39.910
instead of all this
extra friction we

00:03:39.910 --> 00:03:43.460
saw in the previous slide.

00:03:43.460 --> 00:03:45.310
So one of the challenges
was supporting

00:03:45.310 --> 00:03:48.380
Dartium with performance
suitable to deploy

00:03:48.380 --> 00:03:49.886
a large application.

00:03:49.886 --> 00:03:54.110
Dartium had two separate
VMs, one for JavaScript

00:03:54.110 --> 00:03:55.620
and one for Dart.

00:03:55.620 --> 00:03:58.240
Having separate VMs
meant high overhead

00:03:58.240 --> 00:04:01.270
for every single call
between the two VMs.

00:04:01.270 --> 00:04:04.100
Even with our best efforts,
you could really only expect

00:04:04.100 --> 00:04:07.740
about 50,000 calls
between VMs per second--

00:04:07.740 --> 00:04:10.960
that meant that if we encouraged
you to accidentally have

00:04:10.960 --> 00:04:13.770
to go back and forth
between Dart and JavaScript

00:04:13.770 --> 00:04:17.790
for every element in that
100,000 element array,

00:04:17.790 --> 00:04:21.130
that's going take two seconds--
that's not really good.

00:04:21.130 --> 00:04:23.590
So the new JavaScript
Interop has

00:04:23.590 --> 00:04:27.180
to work correctly in Dartium,
but the performance only

00:04:27.180 --> 00:04:29.570
needs to be good
enough for developing

00:04:29.570 --> 00:04:32.620
your app-- it doesn't have to
be good enough for production,

00:04:32.620 --> 00:04:36.340
so this gave us a
lot more flexibility.

00:04:36.340 --> 00:04:39.880
We also get to ignore some
tricky garbage collection

00:04:39.880 --> 00:04:41.500
issues that occur.

00:04:41.500 --> 00:04:43.850
Because once again, it's
a development environment,

00:04:43.850 --> 00:04:48.790
so if we leak a little bit of
memory, doesn't really matter.

00:04:48.790 --> 00:04:52.500
So implementing really
good Interop in Dart2Js

00:04:52.500 --> 00:04:55.730
was challenging, but for
really different reasons.

00:04:55.730 --> 00:04:59.630
So Dart2Js depends on a
whole program analysis

00:04:59.630 --> 00:05:04.990
to efficiently compile your
code to a small JavaScript

00:05:04.990 --> 00:05:08.430
and with obeying all
the Dart semantics.

00:05:08.430 --> 00:05:12.190
As Vijay was just discussing,
matching those Dart semantics

00:05:12.190 --> 00:05:15.312
is really important and a
big reason why you use Dart.

00:05:17.910 --> 00:05:21.100
This meant we couldn't just
choose some Interop scheme that

00:05:21.100 --> 00:05:24.020
looked really nice, but
ended up breaking the Dart

00:05:24.020 --> 00:05:27.337
semantics in really surprising
and unpredictable ways.

00:05:30.080 --> 00:05:33.590
So if we use the Dart
no such method feature

00:05:33.590 --> 00:05:37.650
to implement JavaScript Interop,
we actually get really close.

00:05:37.650 --> 00:05:41.830
We achieve natural
looking JavaScript calls

00:05:41.830 --> 00:05:45.830
to JavaScript methods, and
we get the right runtime

00:05:45.830 --> 00:05:47.960
semantics.

00:05:47.960 --> 00:05:50.700
Essentially, you have no such
method turn-around and call

00:05:50.700 --> 00:05:53.980
JavaScript with exactly
the same method or property

00:05:53.980 --> 00:05:57.230
name, and exactly the
same list of arguments.

00:05:57.230 --> 00:06:00.250
Unfortunately, this
hurts Dart2Js performance

00:06:00.250 --> 00:06:01.936
pretty badly.

00:06:01.936 --> 00:06:04.010
I'll make Steven
Adams really sad

00:06:04.010 --> 00:06:06.860
if I try to explain why, so
if you want to know more,

00:06:06.860 --> 00:06:09.770
check out his really excellent
talk from the Dart summit

00:06:09.770 --> 00:06:10.560
last year.

00:06:13.960 --> 00:06:18.640
So we mitigated the flaws and
the no such method solution

00:06:18.640 --> 00:06:22.170
with what I like to call
some such method-- what

00:06:22.170 --> 00:06:26.080
this means is that the Dart2Js
compiler, instead of having

00:06:26.080 --> 00:06:29.350
to assume that any possible
method could be coming

00:06:29.350 --> 00:06:33.460
from JavaScript, it only has
to worry about method names

00:06:33.460 --> 00:06:37.290
and numbers of arguments
that actually exist

00:06:37.290 --> 00:06:40.050
and the type definitions
for the JavaScript libraries

00:06:40.050 --> 00:06:41.440
you're using.

00:06:41.440 --> 00:06:44.290
And in practice, this mitigates
most of the issue with the no

00:06:44.290 --> 00:06:46.440
such method solution.

00:06:46.440 --> 00:06:50.000
The Dartium solution actually
does just use no such method,

00:06:50.000 --> 00:06:55.340
because no such method
isn't a problem in Dartium.

00:06:55.340 --> 00:06:57.260
And so, when you're
using the new Interop,

00:06:57.260 --> 00:06:59.980
remembering that it is
expressible in terms

00:06:59.980 --> 00:07:01.610
of no such method
can really help

00:07:01.610 --> 00:07:04.200
you understand what's
going to happen--

00:07:04.200 --> 00:07:08.720
because our solution is
constrained by the semantics.

00:07:08.720 --> 00:07:10.680
And it's going to make
it easier to understand

00:07:10.680 --> 00:07:13.980
what will happen for some
of the tricky edge cases,

00:07:13.980 --> 00:07:19.950
such as if you try to tear of a
function on a JavaScript class.

00:07:19.950 --> 00:07:22.950
In this case, the
call to no such method

00:07:22.950 --> 00:07:24.930
will just look like
a property access,

00:07:24.930 --> 00:07:28.375
so you will access the property
on the JavaScript class--

00:07:28.375 --> 00:07:29.666
which happens to be a function.

00:07:33.260 --> 00:07:37.570
So because all we require
for JavaScript correctness is

00:07:37.570 --> 00:07:41.150
the right member names and
numbers of allowed arguments,

00:07:41.150 --> 00:07:45.250
the Dart facades for JavaScript
libraries can be approximate--

00:07:45.250 --> 00:07:48.600
and this is really important,
because JavaScript types

00:07:48.600 --> 00:07:50.640
are approximate.

00:07:50.640 --> 00:07:52.730
Like VJ was talking
about, no one's

00:07:52.730 --> 00:07:55.060
actually tacking the
types at runtime.

00:07:55.060 --> 00:07:59.014
So if we really depended
tightly on the types,

00:07:59.014 --> 00:08:01.430
you could end up broken in a
way that you couldn't get out

00:08:01.430 --> 00:08:05.300
of-- because it really was
a cat instead of a dog,

00:08:05.300 --> 00:08:10.730
but that was OK, because the
cat did have the bark method.

00:08:10.730 --> 00:08:13.760
So often type definitions
from JavaScript libraries

00:08:13.760 --> 00:08:15.850
were actually created
by a different author

00:08:15.850 --> 00:08:17.760
than the original
library authors,

00:08:17.760 --> 00:08:23.230
so that's another way you
get some small errors.

00:08:23.230 --> 00:08:26.340
Fortunately, even these
approximate JavaScript type

00:08:26.340 --> 00:08:30.800
definitions are really useful
for your editor experience.

00:08:30.800 --> 00:08:32.870
You still get really
good code complete

00:08:32.870 --> 00:08:40.980
and you still catch the
standard compile time errors.

00:08:40.980 --> 00:08:45.415
So the new Interop solutions
user facing API is package:js.

00:08:45.415 --> 00:08:48.940
So package:js has a
really small API surface,

00:08:48.940 --> 00:08:51.470
it's really just these
two annotations--

00:08:51.470 --> 00:08:53.860
@JS and @anonymous.

00:08:53.860 --> 00:08:57.970
You just use @JS to indicate
whether libraries, classes,

00:08:57.970 --> 00:09:00.341
and top-level members are
coming from JavaScript.

00:09:05.210 --> 00:09:07.920
So here's some of the types
you can share between Dart

00:09:07.920 --> 00:09:11.400
and JavaScript using package:js
without ever having to worry

00:09:11.400 --> 00:09:14.860
about conversions or wrappings.

00:09:14.860 --> 00:09:18.200
The only case we can't make
as seamless as we'd like

00:09:18.200 --> 00:09:21.530
is passing a function
from Dart to JavaScript.

00:09:21.530 --> 00:09:23.470
For this case, you
do have to call

00:09:23.470 --> 00:09:25.720
allow Interop on a function.

00:09:25.720 --> 00:09:27.980
After you do that, it
becomes a function that's

00:09:27.980 --> 00:09:30.700
safe to use in both
Dart and JavaScript--

00:09:30.700 --> 00:09:33.110
we had to do this for Dart2Js.

00:09:33.110 --> 00:09:36.580
It's possible we can remove
this constraint in the future.

00:09:36.580 --> 00:09:38.800
Thanks to strong
mode and some ES6

00:09:38.800 --> 00:09:41.720
features, Dart Dev Compiler
doesn't have this constraint.

00:09:45.570 --> 00:09:47.420
So just one warning.

00:09:47.420 --> 00:09:50.990
Don't combine the old JS
Interop and package:js.

00:09:50.990 --> 00:09:53.000
You'll get really
strange behavior,

00:09:53.000 --> 00:09:56.690
because package:js is assuming
there is never any wrapping

00:09:56.690 --> 00:09:59.450
and dart:js is
wrapping everything--

00:09:59.450 --> 00:10:02.770
so you can really quickly end up
passing wrappers to JavaScript,

00:10:02.770 --> 00:10:06.340
where it's not going
to be a good time.

00:10:06.340 --> 00:10:11.400
So let's see how the package:js
library works for the chart.js

00:10:11.400 --> 00:10:12.940
library we examined earlier.

00:10:15.670 --> 00:10:17.850
So here is a snippet
from the Dart JavaScript

00:10:17.850 --> 00:10:22.570
facade for the chart
library that we looked at.

00:10:22.570 --> 00:10:24.940
Generally, this just looks
like a regular Dart class.

00:10:24.940 --> 00:10:27.720
And even without knowing
anything about Interop,

00:10:27.720 --> 00:10:31.360
it's pretty obvious
what is going on.

00:10:31.360 --> 00:10:34.540
You can see this full
definition if you go to the web

00:10:34.540 --> 00:10:35.506
address in the bottom.

00:10:38.990 --> 00:10:40.540
So what's going on here?

00:10:40.540 --> 00:10:42.600
This is the JS
annotation that indicates

00:10:42.600 --> 00:10:44.840
that the library
used JS Interop-- you

00:10:44.840 --> 00:10:46.440
have to include that.

00:10:46.440 --> 00:10:48.620
In the future, expect
tight integration

00:10:48.620 --> 00:10:51.590
with JS module loaders,
so you could specify

00:10:51.590 --> 00:10:55.620
where to load the module as
part of this annotation--

00:10:55.620 --> 00:10:58.500
so you can let Dart fully
control when the JavaScript

00:10:58.500 --> 00:11:00.838
libraries are loaded in.

00:11:03.630 --> 00:11:06.020
So a library with
this annotation

00:11:06.020 --> 00:11:09.440
can still have some regular Dart
classes and top-level members.

00:11:12.630 --> 00:11:15.410
So these annotations
indicated that the classes

00:11:15.410 --> 00:11:19.960
are coming from JavaScript, they
are not regular Dart classes.

00:11:19.960 --> 00:11:23.010
And because there are just
facades for JavaScript classes,

00:11:23.010 --> 00:11:26.530
all members must be external
without actual Dart method

00:11:26.530 --> 00:11:28.090
bodies.

00:11:28.090 --> 00:11:30.430
Generally, we found this
restriction is actually

00:11:30.430 --> 00:11:35.230
beneficial as it is far easier
to leverage existing JavaScript

00:11:35.230 --> 00:11:38.920
examples for API if you
resist the temptation to make

00:11:38.920 --> 00:11:41.750
the API more Dart-y.

00:11:41.750 --> 00:11:44.080
And as I said, Dart
in JavaScript syntax

00:11:44.080 --> 00:11:47.550
is generally compatible
enough that you don't really

00:11:47.550 --> 00:11:49.300
need to make the API
more Darty-- it would

00:11:49.300 --> 00:11:51.080
be more something
you do, because it

00:11:51.080 --> 00:11:53.216
seemed tempting than
something you had to do.

00:11:56.980 --> 00:12:01.090
You'll generally, have a better
time if you use the new JS

00:12:01.090 --> 00:12:04.470
Interop for JavaScript libraries
created around the past five

00:12:04.470 --> 00:12:07.830
years, because of more of a nice
object-oriented structure that

00:12:07.830 --> 00:12:13.160
will make them convenient
to use from Dart.

00:12:13.160 --> 00:12:15.650
So what's this
anonymous annotation?

00:12:15.650 --> 00:12:18.430
That indicates that this
JavaScript class just

00:12:18.430 --> 00:12:21.140
corresponds to a
JavaScript object literal,

00:12:21.140 --> 00:12:24.800
not a class with
a real JavaScript

00:12:24.800 --> 00:12:26.270
constructor-- it's
something people

00:12:26.270 --> 00:12:28.790
love to do in JavaScript.

00:12:28.790 --> 00:12:31.120
And using the
annotation is really

00:12:31.120 --> 00:12:35.420
useful for giving structured
APIs that otherwise would just

00:12:35.420 --> 00:12:38.110
be a big bag of properties.

00:12:38.110 --> 00:12:42.960
If you had a typo and entered
the wrong property name,

00:12:42.960 --> 00:12:47.620
now, you'll get an
obvious Dart static error

00:12:47.620 --> 00:12:50.250
instead of just having
the program keep going

00:12:50.250 --> 00:12:52.750
and probably never even throw
an exception in JavaScript--

00:12:52.750 --> 00:12:54.720
because it's not
really a big deal

00:12:54.720 --> 00:12:57.340
to have some additional
property on an object

00:12:57.340 --> 00:13:00.840
that the library
wasn't expecting.

00:13:00.840 --> 00:13:03.680
The other big reason for
this pattern is performance.

00:13:03.680 --> 00:13:06.010
We can compile a
factory constructor

00:13:06.010 --> 00:13:11.240
like this down to just the
raw JavaScript object literal.

00:13:11.240 --> 00:13:14.740
While for the jsify case, we
had to recursively traverse

00:13:14.740 --> 00:13:19.380
the contents of the object
and convert it to a JavaScript

00:13:19.380 --> 00:13:20.340
literal at that point.

00:13:23.570 --> 00:13:26.550
And so, notice that we're
able to describe this methods

00:13:26.550 --> 00:13:29.690
arguments in terms of
the familiar Dart list

00:13:29.690 --> 00:13:36.150
class instead of JavaScript
specific array class--

00:13:36.150 --> 00:13:38.280
which could require some
expensive conversions

00:13:38.280 --> 00:13:40.220
to create.

00:13:40.220 --> 00:13:42.310
This makes a really big
performance difference

00:13:42.310 --> 00:13:44.100
on Dart2Js.

00:13:44.100 --> 00:13:46.550
Of course, this
design isn't efficient

00:13:46.550 --> 00:13:48.720
for us to implement
in Dartium and it

00:13:48.720 --> 00:13:53.515
took some crazy code to make
the regular Dart VM list object

00:13:53.515 --> 00:13:57.420
mimic a JavaScript array
object well enough on Dartium

00:13:57.420 --> 00:14:01.660
to fool almost all
JavaScript libraries.

00:14:01.660 --> 00:14:04.500
One thing to watch
out for about arrays.

00:14:04.500 --> 00:14:08.310
This only works for the
built-in Dart list class.

00:14:08.310 --> 00:14:10.400
If you have some
custom list class,

00:14:10.400 --> 00:14:12.920
make sure you call the
two list method on it

00:14:12.920 --> 00:14:14.940
before passing it to JavaScript.

00:14:14.940 --> 00:14:16.570
Unfortunately,
JavaScript doesn't

00:14:16.570 --> 00:14:23.880
have the features to let you
create your own custom list

00:14:23.880 --> 00:14:26.480
array like classes.

00:14:26.480 --> 00:14:28.760
This is actually OK in
practice, because most

00:14:28.760 --> 00:14:30.740
of the lists you
have in your program

00:14:30.740 --> 00:14:33.054
are probably core
list types anyway.

00:14:33.054 --> 00:14:35.220
And if they're not, you
probably did something wrong

00:14:35.220 --> 00:14:37.220
and it's probably slowing
down your performance.

00:14:42.200 --> 00:14:45.970
So as you can see, it's fine for
a Java [INAUDIBLE] facade class

00:14:45.970 --> 00:14:47.960
to implement another class.

00:14:47.960 --> 00:14:50.870
In this case, the linear chart
data implements the chart data

00:14:50.870 --> 00:14:52.680
class-- and that
that's just fine,

00:14:52.680 --> 00:14:55.870
it won't cause any issues.

00:14:55.870 --> 00:14:58.070
And so, as we discussed
earlier-- previously,

00:14:58.070 --> 00:15:02.620
you had to pass in
a JavaScript object

00:15:02.620 --> 00:15:05.400
for the CanvasRenderingContext2D
rather than

00:15:05.400 --> 00:15:08.610
just the regular
object in Dart HTML.

00:15:08.610 --> 00:15:09.930
Now, you don't have to do it.

00:15:09.930 --> 00:15:14.560
All the Dart HTML types are
fine to use with Interop.

00:15:14.560 --> 00:15:18.300
So let's look back at that
old example from Dart:js.

00:15:21.040 --> 00:15:23.330
Here's what it looks like now.

00:15:23.330 --> 00:15:24.830
So in this version,
it's pretty easy

00:15:24.830 --> 00:15:27.610
to read-- everything's
statically typed.

00:15:27.610 --> 00:15:30.670
If you wanted to know what
other options the data set

00:15:30.670 --> 00:15:33.690
object takes, just
right click in your IDE

00:15:33.690 --> 00:15:36.620
and jump to the definition.

00:15:36.620 --> 00:15:38.826
If you had a typo in
any of the API names,

00:15:38.826 --> 00:15:40.700
you are now going to
get a static type error,

00:15:40.700 --> 00:15:45.470
and you'll be able to catch
the error before you actually

00:15:45.470 --> 00:15:47.030
run your application.

00:15:47.030 --> 00:15:48.805
And so, that yeah we did.

00:15:48.805 --> 00:15:50.650
I spelled colour with
the British spelling.

00:15:50.650 --> 00:15:53.460
And so, in the
previous example that

00:15:53.460 --> 00:15:55.340
wouldn't have broken
anything, we just

00:15:55.340 --> 00:15:57.430
didn't have the right
background color.

00:15:57.430 --> 00:15:57.940
Now, we do.

00:15:57.940 --> 00:16:01.340
So let's fix that.

00:16:01.340 --> 00:16:04.640
So what does our Dart:js compile
output for this example look

00:16:04.640 --> 00:16:05.560
like?

00:16:05.560 --> 00:16:07.270
It's great if the
code is easy to write,

00:16:07.270 --> 00:16:09.580
but if the compile
output's not terse,

00:16:09.580 --> 00:16:12.540
we haven't really achieved much.

00:16:12.540 --> 00:16:13.570
So here's the output.

00:16:13.570 --> 00:16:16.430
You can see all
those Dart classes

00:16:16.430 --> 00:16:19.410
that were giving structure
to JavaScript a object

00:16:19.410 --> 00:16:22.830
literal just compiled down
directly to the JavaScript

00:16:22.830 --> 00:16:24.210
object literal.

00:16:24.210 --> 00:16:27.740
So this is the actual code
from Dart2Js-- it just looks

00:16:27.740 --> 00:16:28.990
like the idiomatic JavaScript.

00:16:31.970 --> 00:16:35.062
There is one of the
object literals.

00:16:35.062 --> 00:16:37.680
And you'll notice
setting the data property

00:16:37.680 --> 00:16:40.030
on the data set looks
a little bit different,

00:16:40.030 --> 00:16:43.090
but that's just
the Dart2Js syntax

00:16:43.090 --> 00:16:46.830
to make sure that you handle
Dart semantics correctly.

00:16:46.830 --> 00:16:50.020
So if you happen to have an
object where Dart2Js couldn't

00:16:50.020 --> 00:16:52.130
figure out whether it
was a JavaScript data

00:16:52.130 --> 00:16:56.290
set or some Dart class that
had the same interface,

00:16:56.290 --> 00:16:58.160
everything would still
work in this case.

00:17:01.440 --> 00:17:03.790
So now, it's time
for some fun demos.

00:17:03.790 --> 00:17:06.869
The good news is that
type JavaScript facade

00:17:06.869 --> 00:17:09.869
we looked out for
chart.js wasn't something

00:17:09.869 --> 00:17:11.849
that I generated
myself, it's something

00:17:11.849 --> 00:17:16.079
we generated automatically based
on existing TypeScript library

00:17:16.079 --> 00:17:17.500
definition.

00:17:17.500 --> 00:17:19.003
So let's try out that tool.

00:17:37.940 --> 00:17:39.270
So here we go.

00:17:39.270 --> 00:17:44.504
This is the code lab application
from the dev compilers work

00:17:44.504 --> 00:17:46.590
flow yesterday.

00:17:46.590 --> 00:17:49.010
So I'm just going to
call the Dart JS facade

00:17:49.010 --> 00:17:53.120
gen on the TypeScript definition
for the chart library.

00:17:53.120 --> 00:17:55.020
When I do that-- OK.

00:17:55.020 --> 00:17:56.000
Here's the definition.

00:17:56.000 --> 00:17:58.610
You can see here are
all the types from Dart

00:17:58.610 --> 00:18:01.530
HTML that the library's using.

00:18:01.530 --> 00:18:04.910
We're able to get the canvas
gradient, canvas pattern,

00:18:04.910 --> 00:18:07.446
and a bunch of other
Dart HTML types.

00:18:07.446 --> 00:18:08.820
And then, keep
going here, we can

00:18:08.820 --> 00:18:12.680
see all the different classes
I was able to extract out.

00:18:12.680 --> 00:18:14.369
So clearly, this
is more code than I

00:18:14.369 --> 00:18:16.910
would have wanted to write by
hand if I was using a library--

00:18:16.910 --> 00:18:21.680
but someone else already
wrote this, so I'm done.

00:18:21.680 --> 00:18:25.960
Now, in that example VJ
showed in that last talk,

00:18:25.960 --> 00:18:27.560
we used the Quill library.

00:18:27.560 --> 00:18:31.991
Let's try generating the
facade for that instead.

00:18:31.991 --> 00:18:32.490
OK.

00:18:32.490 --> 00:18:34.730
Looks pretty good.

00:18:34.730 --> 00:18:36.950
Let's copy it over the code app.

00:18:36.950 --> 00:18:39.150
After I run the
tool, you'll notice

00:18:39.150 --> 00:18:42.020
that dev compiler's
running in the lower tab,

00:18:42.020 --> 00:18:44.910
and it saw the change and
recompiled everything.

00:18:44.910 --> 00:18:49.900
So I'm ready to actually
try out the application.

00:18:49.900 --> 00:18:51.460
And I have really
blown up my font,

00:18:51.460 --> 00:18:52.840
so you can't see
the application,

00:18:52.840 --> 00:18:54.256
but you see the
dev tools for it--

00:18:54.256 --> 00:18:56.150
because I love the
dev tools, so we're

00:18:56.150 --> 00:18:58.420
going to actually focus on that.

00:18:58.420 --> 00:19:01.330
Now, the feature that I'm
really excited to demonstrate

00:19:01.330 --> 00:19:05.020
that we have working
in just regular Chrome

00:19:05.020 --> 00:19:07.050
is a Dart specific
console, where

00:19:07.050 --> 00:19:10.650
you can issue arbitrary
Dart statements,

00:19:10.650 --> 00:19:13.530
compile them, and run them
as part of your already

00:19:13.530 --> 00:19:15.020
running applications.

00:19:15.020 --> 00:19:19.980
This all works, because the Dev
Compiler works incrementally.

00:19:19.980 --> 00:19:23.320
So let's see if this is
really running Dart here.

00:19:23.320 --> 00:19:25.820
So in my JavaScript
console down here,

00:19:25.820 --> 00:19:29.507
I could see whether a 1
is not equal the string 1.

00:19:29.507 --> 00:19:31.340
Oh yeah, that makes
sense-- it's JavaScript.

00:19:31.340 --> 00:19:37.950
If I go over to my Dart
consol-- so there we go.

00:19:37.950 --> 00:19:41.550
Clearly, we're
actually running Dart.

00:19:41.550 --> 00:19:43.693
[APPLAUSE]

00:19:45.420 --> 00:19:47.410
But it gets a lot
more fun than that.

00:19:47.410 --> 00:19:50.390
This can also be a nice way to
play around with what the dev

00:19:50.390 --> 00:19:52.290
compiler output looks like.

00:19:52.290 --> 00:19:55.230
For example, I could define
a function in the console.

00:19:55.230 --> 00:19:58.630
Here, I've defined a function
that takes two integers

00:19:58.630 --> 00:20:00.250
and adds them together.

00:20:00.250 --> 00:20:02.390
And it happens the
console is calling

00:20:02.390 --> 00:20:04.160
to string on the object.

00:20:04.160 --> 00:20:06.630
So here, I can see the
actual source code.

00:20:06.630 --> 00:20:10.640
So this function is checking
whether the two arguments

00:20:10.640 --> 00:20:11.850
are not null.

00:20:11.850 --> 00:20:14.750
And if they're not null, it's
just adding them together.

00:20:14.750 --> 00:20:15.250
Back

00:20:15.250 --> 00:20:16.666
In the regular
JavaScript console,

00:20:16.666 --> 00:20:19.080
you can see that this
function actually

00:20:19.080 --> 00:20:24.500
has a type int comma int to
dynamic, which makes sense.

00:20:24.500 --> 00:20:27.930
If on the other hand, I had
omitted the types for the two

00:20:27.930 --> 00:20:33.710
arguments, now you can
see Dev Compiler realizes

00:20:33.710 --> 00:20:37.640
this is a dynamic call-- so it
calls the dynamic call helper,

00:20:37.640 --> 00:20:40.130
descend, to invoke the call.

00:20:40.130 --> 00:20:46.330
So you can get a feel for how
adding types helps things.

00:20:46.330 --> 00:20:50.030
And of course, a wrapper
wouldn't be really useful

00:20:50.030 --> 00:20:52.840
if you couldn't use it on
your running application.

00:20:52.840 --> 00:20:55.851
Over here, here is a
captain log, .DartFiles,

00:20:55.851 --> 00:20:56.850
part of the application.

00:20:56.850 --> 00:20:58.320
I can right click on it.

00:20:58.320 --> 00:21:01.190
And say, open using the
Dev Compiler debugger.

00:21:01.190 --> 00:21:05.190
And now, it set the context
of this Dart console

00:21:05.190 --> 00:21:07.230
to that library.

00:21:07.230 --> 00:21:15.410
So I can access any top
level member from that class.

00:21:15.410 --> 00:21:16.140
So log element.

00:21:16.140 --> 00:21:16.870
OK.

00:21:16.870 --> 00:21:18.110
There it is.

00:21:18.110 --> 00:21:19.610
It's an HTML element.

00:21:19.610 --> 00:21:22.506
We've got the map
of log entries.

00:21:22.506 --> 00:21:26.800
Makes sense it's a Dart
hash map with those keys.

00:21:29.380 --> 00:21:32.510
This will work even if these are
private members in your class.

00:21:32.510 --> 00:21:34.240
And one fun feature, guys.

00:21:34.240 --> 00:21:37.220
You can even access private
members in other classes.

00:21:37.220 --> 00:21:39.980
Because we know when
you're compiling code just

00:21:39.980 --> 00:21:45.066
for the dev tools, you
want to access privates

00:21:45.066 --> 00:21:45.940
from other libraries.

00:21:45.940 --> 00:21:48.039
You don't need the
sort of normal safe

00:21:48.039 --> 00:21:49.580
you'd have in
[INAUDIBLE], you really

00:21:49.580 --> 00:21:51.205
want to be able to
access the privates.

00:21:53.820 --> 00:21:55.320
Let's see, what
else can we do here?

00:21:59.620 --> 00:22:03.210
We could access a
particular log entry,

00:22:03.210 --> 00:22:05.095
so we can get the
last entry in the log.

00:22:09.382 --> 00:22:10.230
yes.

00:22:10.230 --> 00:22:10.730
So, OK.

00:22:10.730 --> 00:22:12.236
So last entry is
the development.

00:22:12.236 --> 00:22:13.610
What if I wanted
to see the text?

00:22:13.610 --> 00:22:14.440
OK.

00:22:14.440 --> 00:22:18.130
You can see I call
the Dart HTML text

00:22:18.130 --> 00:22:21.085
property, instead of having to
worry about what the JavaScript

00:22:21.085 --> 00:22:22.210
name was.

00:22:22.210 --> 00:22:25.770
And down here, you see what
the last entry was in the log.

00:22:28.410 --> 00:22:31.320
And of course, I've kept
these expressions small just

00:22:31.320 --> 00:22:32.660
to avoid too many typos.

00:22:32.660 --> 00:22:35.580
But you can also write
a full Dart expression.

00:22:35.580 --> 00:22:37.810
So here, I've got a
Dart [INAUDIBLE] loop,

00:22:37.810 --> 00:22:41.360
where I printed all the elements
in the log to the console.

00:22:41.360 --> 00:22:44.886
And it all just worked.

00:22:44.886 --> 00:22:45.760
So that's pretty fun.

00:22:45.760 --> 00:22:47.093
We're pretty excited about this.

00:22:47.093 --> 00:22:49.490
So it'll let you get the
same sort of experience

00:22:49.490 --> 00:22:54.300
you had in Dartium,
but in Dev Compiler.

00:22:54.300 --> 00:22:56.240
So I'll get back to
the rest of the slides

00:22:56.240 --> 00:22:58.620
and then it will be time
for some lunch, which

00:22:58.620 --> 00:22:59.821
seems pretty exciting too.

00:23:16.380 --> 00:23:22.340
So the JS facade generator even
works when some of the types

00:23:22.340 --> 00:23:25.630
aren't expressable in
Dart-- in those cases,

00:23:25.630 --> 00:23:28.870
the facade generator will
simplify the type to something

00:23:28.870 --> 00:23:33.890
expressible in Dart and leave
a Dart version of the raw type

00:23:33.890 --> 00:23:35.022
in a [INAUDIBLE].

00:23:35.022 --> 00:23:36.480
So this is really
nice, because you

00:23:36.480 --> 00:23:40.760
don't have to go back to the
original library definition

00:23:40.760 --> 00:23:42.880
to figure out what
you're trying to say.

00:23:42.880 --> 00:23:46.140
For example, they might have
been using union types or pair

00:23:46.140 --> 00:23:48.760
types-- some feature that
doesn't exist in Dart,

00:23:48.760 --> 00:23:50.240
but does in TypeScript.

00:23:54.520 --> 00:23:56.550
And there's also
an escape hatch.

00:23:56.550 --> 00:23:59.520
Sometimes you really want
to do something dynamic

00:23:59.520 --> 00:24:04.565
with JavaScript and the
JS facades won't really

00:24:04.565 --> 00:24:06.690
let you do that, because
they're focused on letting

00:24:06.690 --> 00:24:09.590
you use a specific static API.

00:24:09.590 --> 00:24:12.490
There is JS utile library,
part of packet JS,

00:24:12.490 --> 00:24:15.590
that gives you the escape
hatch you need for that case.

00:24:15.590 --> 00:24:18.620
And generally speaking,
these methods look a lot like

00:24:18.620 --> 00:24:21.190
the methods you're
used to for JS object,

00:24:21.190 --> 00:24:25.440
except these are static methods,
and they're really fast,

00:24:25.440 --> 00:24:28.220
and they work well with
the type JS Interop-- well,

00:24:28.220 --> 00:24:31.100
dart:js will blow it up.

00:24:31.100 --> 00:24:32.650
So if you find
out you're wanting

00:24:32.650 --> 00:24:35.650
to use these methods a
lot, please let me know.

00:24:35.650 --> 00:24:38.390
I really want to know cases
where our existing Interop

00:24:38.390 --> 00:24:40.267
isn't meeting your needs.

00:24:40.267 --> 00:24:42.100
That probably indicates
there's some feature

00:24:42.100 --> 00:24:42.933
we should be adding.

00:24:48.702 --> 00:24:53.050
So we make consuming JavaScript
libraries from Dart easy,

00:24:53.050 --> 00:24:57.070
but we don't really enable
cases like extending

00:24:57.070 --> 00:24:59.950
JavaScript classes from
Dart or vice versa.

00:24:59.950 --> 00:25:02.930
If you're interested in those
cases, the best place to look

00:25:02.930 --> 00:25:07.910
is Dart Dev compiler, where
it is so tightly integrated

00:25:07.910 --> 00:25:10.770
with JavaScript class syntax
and calling conventions

00:25:10.770 --> 00:25:13.460
that those sorts of cases
are feasible in a kind

00:25:13.460 --> 00:25:15.020
of efficient way.

00:25:15.020 --> 00:25:18.060
The other thing we want to
do a little bit nearer term

00:25:18.060 --> 00:25:21.500
is make future and promise
integrate well together, just

00:25:21.500 --> 00:25:24.220
like list an array
integrate together.

00:25:24.220 --> 00:25:27.280
And this will matter more and
more as new JavaScript APIs

00:25:27.280 --> 00:25:33.234
take advantage of promises to
handle pass asynchronous calls.

00:25:33.234 --> 00:25:35.500
[APPLAUSE]

00:25:38.560 --> 00:25:41.600
So let us know how JS
Interop is working for you

00:25:41.600 --> 00:25:43.240
and what features you need.

00:25:43.240 --> 00:25:43.740
Thank you.

00:25:43.740 --> 00:25:45.060
And let's enjoy lunch.

00:25:45.060 --> 00:25:47.810
[APPLAUSE]

