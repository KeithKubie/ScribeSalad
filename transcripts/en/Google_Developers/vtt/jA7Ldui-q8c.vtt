WEBVTT
Kind: captions
Language: en

00:00:09.424 --> 00:00:11.030
JEFF POSNICK: Hey, everybody.

00:00:11.030 --> 00:00:14.330
Welcome to this week's episode
of YouTube Developers Live.

00:00:14.330 --> 00:00:17.390
This week we're going to be
focusing on a topic near and

00:00:17.390 --> 00:00:21.860
dear to my heart, which is
debugging issues with YouTube

00:00:21.860 --> 00:00:26.060
data APIs and YouTube player
APIs and some best practices

00:00:26.060 --> 00:00:28.330
for how to obtain help whenever
you do run into an

00:00:28.330 --> 00:00:31.930
issue that you're not able
to debug yourself.

00:00:31.930 --> 00:00:34.460
Apologies for the folks who
wanted to watch along with the

00:00:34.460 --> 00:00:37.150
show live, but we're actually
doing a recorded, semi-live

00:00:37.150 --> 00:00:37.950
version of the show.

00:00:37.950 --> 00:00:39.750
I assure you that I am live.

00:00:39.750 --> 00:00:42.350
The API calls we'll be making
will be live, so hopefully

00:00:42.350 --> 00:00:45.040
that will be able to suffice
for everybody.

00:00:45.040 --> 00:00:47.790
And I also wanted to point out
that this is probably going to

00:00:47.790 --> 00:00:49.940
be a little bit shorter than
our normal shows where

00:00:49.940 --> 00:00:51.860
we have guests on.

00:00:51.860 --> 00:00:54.010
But hopefully, it'll have some
nice focused content for

00:00:54.010 --> 00:00:55.660
everybody to dig into.

00:00:55.660 --> 00:00:58.520
So let's jump right
into things.

00:00:58.520 --> 00:01:01.260
I wanted to just, as I
mentioned, emphasize the fact

00:01:01.260 --> 00:01:04.680
that we want to make it possible
for folks to help

00:01:04.680 --> 00:01:05.790
themselves.

00:01:05.790 --> 00:01:09.430
When you are running into an
error, usually the API will

00:01:09.430 --> 00:01:11.910
give you the information that
you need in order to figure

00:01:11.910 --> 00:01:14.800
out what's going on and to solve
the problem by yourself.

00:01:14.800 --> 00:01:16.810
And that's the ideal case.

00:01:16.810 --> 00:01:19.852
But we also want to help you
get the techniques that you

00:01:19.852 --> 00:01:24.950
know to report really meaningful
issues to us.

00:01:24.950 --> 00:01:27.140
If you happen to notice
something and it's clear that

00:01:27.140 --> 00:01:29.960
there is some sort of bug,
there's certain pieces of

00:01:29.960 --> 00:01:33.760
information, certain steps that
we need on the Developer

00:01:33.760 --> 00:01:37.870
Relations team side to really
effectively help you.

00:01:37.870 --> 00:01:40.900
So we'll cover some techniques
for getting that as well.

00:01:40.900 --> 00:01:42.020
Let's dig right in.

00:01:42.020 --> 00:01:44.170
And we're going to start
by talking about the

00:01:44.170 --> 00:01:46.930
YouTube Data APIs.

00:01:46.930 --> 00:01:49.920
Data APIs is kind of like a
big umbrella right now.

00:01:49.920 --> 00:01:53.520
So I'm talking about YouTube
Data API, Version 3.

00:01:53.520 --> 00:01:56.980
A lot of what I'm saying also
applies to the Analytics API.

00:01:56.980 --> 00:01:59.440
A lot of what I'm saying will
apply to Version 2 of the Data

00:01:59.440 --> 00:02:04.720
API, so I'll just say Data API
as a kind of catch-all.

00:02:04.720 --> 00:02:07.680
And the one thing that's
probably more important than

00:02:07.680 --> 00:02:10.229
anything else that I wanted to
point out about the Data APIs

00:02:10.229 --> 00:02:14.530
is that they always
return a response.

00:02:14.530 --> 00:02:18.560
This is a RESTful API.

00:02:18.560 --> 00:02:21.470
Every request is
made via HTTP.

00:02:21.470 --> 00:02:24.440
So you send our service
an HTTP request.

00:02:24.440 --> 00:02:27.580
We will send you back
an HTTP response.

00:02:27.580 --> 00:02:29.930
Now, that doesn't always mean
that it's going to be a

00:02:29.930 --> 00:02:31.900
successful API request.

00:02:31.900 --> 00:02:36.290
That HTTP response might have
an error associated with it.

00:02:36.290 --> 00:02:41.250
But we should always give you
something that is hopefully

00:02:41.250 --> 00:02:44.880
meaningful enough to debug
whatever's going on with your

00:02:44.880 --> 00:02:46.440
request and to identify
the problem.

00:02:46.440 --> 00:02:49.270
So more important than anything
else, know that you

00:02:49.270 --> 00:02:52.680
should always get back a
response from the API.

00:02:52.680 --> 00:02:56.580
And I sometimes see folks who
raise questions in Stack

00:02:56.580 --> 00:02:59.095
Overflow or the issue tracker
and they say, I'm not getting

00:02:59.095 --> 00:03:01.250
a response back from the API.

00:03:01.250 --> 00:03:04.230
Really, the only case that that
should happen, where you

00:03:04.230 --> 00:03:06.640
don't hear anything back, is
when your request never makes

00:03:06.640 --> 00:03:08.660
it to our server
to begin with.

00:03:08.660 --> 00:03:11.460
And this sometimes happens
because people are on fairly

00:03:11.460 --> 00:03:15.020
complicated network setups, or
maybe they're behind some sort

00:03:15.020 --> 00:03:21.210
of firewall and access to
Google's API servers happen to

00:03:21.210 --> 00:03:23.220
be blocked on their network.

00:03:23.220 --> 00:03:25.640
If you're in that situation,
there's not so much that we

00:03:25.640 --> 00:03:27.060
can do to help you.

00:03:27.060 --> 00:03:29.870
Talking to your network
administrator or just trying

00:03:29.870 --> 00:03:32.860
to fiddle around with settings,
or try it on a

00:03:32.860 --> 00:03:36.100
different computer, on a
different network, all those

00:03:36.100 --> 00:03:38.770
are steps that you would have
to take in order to resolve

00:03:38.770 --> 00:03:40.320
those sorts of issues.

00:03:40.320 --> 00:03:45.440
But that's kind of
an edge case.

00:03:45.440 --> 00:03:49.290
So for the folks who know how
HTTP request and responses

00:03:49.290 --> 00:03:54.980
work, you always get back an
HTTP response code, and you

00:03:54.980 --> 00:03:58.440
also get back a status line
associated with that code.

00:03:58.440 --> 00:04:03.270
And usually, and certainly for
requests made against our API

00:04:03.270 --> 00:04:06.560
servers, you'll get back
an HTTP response body.

00:04:06.560 --> 00:04:11.840
So a combination of that HTTP
response code, the status line

00:04:11.840 --> 00:04:15.410
for that response, and the
response body is the

00:04:15.410 --> 00:04:18.829
information that you need as a
developer to figure out what's

00:04:18.829 --> 00:04:21.630
going wrong with
your API calls.

00:04:21.630 --> 00:04:26.040
It's not sufficient a lot of
times to just look at the

00:04:26.040 --> 00:04:26.640
response code.

00:04:26.640 --> 00:04:30.070
A lot of times people will say,
hey, I'm getting back an

00:04:30.070 --> 00:04:34.160
HTTP 403 error when I
make this API call.

00:04:34.160 --> 00:04:37.350
There are only a certain number
of valid HTTP response

00:04:37.350 --> 00:04:39.990
codes, so some of them are
overloaded and reused for

00:04:39.990 --> 00:04:42.830
different types of errors.

00:04:42.830 --> 00:04:47.170
HTTP 403s usually have to
do with unauthorized

00:04:47.170 --> 00:04:49.640
or forbidden requests.

00:04:49.640 --> 00:04:52.475
Even trying to come up with all
the potential things on

00:04:52.475 --> 00:04:53.640
the top of my head is
a little difficult

00:04:53.640 --> 00:04:54.720
because there's a lot.

00:04:54.720 --> 00:04:58.900
So a lot of times, the only way
to figure out what's going

00:04:58.900 --> 00:05:02.730
on is to look at the actual
body of the HTTP response.

00:05:02.730 --> 00:05:06.040
And in that body, you'll
see more details about

00:05:06.040 --> 00:05:06.490
what caused the error.

00:05:06.490 --> 00:05:08.260
So it might be a quota error.

00:05:08.260 --> 00:05:12.800
It might be due to using the
credentials for a different

00:05:12.800 --> 00:05:17.480
account when trying to access
the authorized information of

00:05:17.480 --> 00:05:18.640
a completely separate account.

00:05:18.640 --> 00:05:21.310
It might be because you're
trying to access information

00:05:21.310 --> 00:05:23.790
that somebody has decided they
don't want to make public,

00:05:23.790 --> 00:05:26.930
like their list of favorite
videos or something like that.

00:05:26.930 --> 00:05:29.980
There are specific error codes
that will be in the response

00:05:29.980 --> 00:05:32.660
body associated with each of
those types of failure.

00:05:32.660 --> 00:05:34.290
And, again, you need to look.

00:05:34.290 --> 00:05:38.650
So the question that everybody
should ask us as a followup

00:05:38.650 --> 00:05:40.910
for that is exactly
how do I look?

00:05:40.910 --> 00:05:45.130
A lot of times, your interaction
with our API is

00:05:45.130 --> 00:05:47.960
via our client libraries, and
our client libraries do a

00:05:47.960 --> 00:05:51.880
great job of simplifying a
lot of common use cases.

00:05:51.880 --> 00:05:53.700
It makes it really easy
to make requests.

00:05:53.700 --> 00:05:56.020
It makes it really easy to
deal with responses.

00:05:56.020 --> 00:06:01.340
But it also handles a lot of the
details for you, including

00:06:01.340 --> 00:06:06.200
taking the HTTP response, and
de-serializing it, and

00:06:06.200 --> 00:06:09.570
converting into a Python object
or a Java object or

00:06:09.570 --> 00:06:10.800
something like that.

00:06:10.800 --> 00:06:15.040
So most of the time, the client
libraries will, when

00:06:15.040 --> 00:06:18.470
they see an HTTP error response,
turn that into an

00:06:18.470 --> 00:06:21.380
exception that gets raised by
the Native Client Library.

00:06:21.380 --> 00:06:24.910
And this is a perfectly fine
way of interacting with the

00:06:24.910 --> 00:06:28.130
API and handling things, because
the exception object

00:06:28.130 --> 00:06:34.370
that gets created-- and again,
the specifics vary from the

00:06:34.370 --> 00:06:35.980
Python client library, the Java

00:06:35.980 --> 00:06:36.870
library, things like that.

00:06:36.870 --> 00:06:39.690
But for the most part, there are
going to be accessors on

00:06:39.690 --> 00:06:41.810
that exception object where you
can get that underlying

00:06:41.810 --> 00:06:45.770
information about the HTTP error
response, including with

00:06:45.770 --> 00:06:48.740
the error code what the HTTP
response code was, the status

00:06:48.740 --> 00:06:52.300
line, the response body,
all that sort of thing.

00:06:52.300 --> 00:06:56.050
But sometimes you have to know
exactly where to look and

00:06:56.050 --> 00:07:00.400
maybe you're not just handling
exceptions by properly looking

00:07:00.400 --> 00:07:02.700
at all the properties and
getting the details.

00:07:02.700 --> 00:07:05.120
Maybe you just happen to be
logging whatever the string

00:07:05.120 --> 00:07:07.940
representation of the exception
is, and that makes

00:07:07.940 --> 00:07:10.230
it a little bit difficult
for you to figure out

00:07:10.230 --> 00:07:11.000
what's going on.

00:07:11.000 --> 00:07:15.580
So in that situation, your
best friend is basically

00:07:15.580 --> 00:07:21.010
turning on HTTP-level logging
in the client libraries.

00:07:21.010 --> 00:07:24.000
And the reason that you have to
turn on the client library

00:07:24.000 --> 00:07:28.780
level is that certainly for
all of our newer APIs--

00:07:28.780 --> 00:07:31.470
and it's actually now the
default for Version

00:07:31.470 --> 00:07:32.600
2 of the Data API--

00:07:32.600 --> 00:07:36.520
all requests are made
using HTTPS.

00:07:36.520 --> 00:07:41.060
So if you've ever made HTTP
requests, you could fire up a

00:07:41.060 --> 00:07:43.920
network monitoring tool like
Wire Shark and just take a

00:07:43.920 --> 00:07:48.620
look at that raw HTTP traffic
as it's being sent out.

00:07:48.620 --> 00:07:52.840
You could obviously see some
information that you might not

00:07:52.840 --> 00:07:56.740
want to be explored in plain
text across the internet

00:07:56.740 --> 00:07:59.905
though, so we are now using
HTTPS for everything.

00:07:59.905 --> 00:08:03.040
And in order to take a look at
that raw data, you need to

00:08:03.040 --> 00:08:05.970
make a change in the client
library to enable log in.

00:08:05.970 --> 00:08:09.140
So I'm going to just quickly
walk through the steps for the

00:08:09.140 --> 00:08:13.100
Python client library making a
v3 Data API call and show you

00:08:13.100 --> 00:08:16.820
how to turn on that HTTP logging
and what the output

00:08:16.820 --> 00:08:18.210
looks like.

00:08:18.210 --> 00:08:22.740
So I'm going to quickly go to
my terminal, make this a

00:08:22.740 --> 00:08:28.005
little bit bigger, too, and if
you run this code, it's a

00:08:28.005 --> 00:08:29.255
basic my_channel.py.

00:08:31.920 --> 00:08:35.440
So I'll pull up the code in a
second, but just to show you

00:08:35.440 --> 00:08:37.169
what's happening over here,
I'm getting back

00:08:37.169 --> 00:08:39.110
an HTTP error 400.

00:08:39.110 --> 00:08:42.240
It's telling me what it's
requesting, and it's saying no

00:08:42.240 --> 00:08:43.309
filter selected.

00:08:43.309 --> 00:08:45.910
So all I'm doing over here is
relying on the Python client

00:08:45.910 --> 00:08:50.580
library's default behavior of
printing out the exception

00:08:50.580 --> 00:08:52.020
when it dies.

00:08:52.020 --> 00:08:54.810
So this actually is pretty
good, and that's great.

00:08:54.810 --> 00:08:57.390
The Python client library does
a good job of exposing really

00:08:57.390 --> 00:09:01.420
useful information during
just the default

00:09:01.420 --> 00:09:02.770
display of the exception.

00:09:02.770 --> 00:09:06.940
But let's say I wanted to see
the exact HTTP request that's

00:09:06.940 --> 00:09:08.610
being made and the response
headers and

00:09:08.610 --> 00:09:10.400
everything like that.

00:09:10.400 --> 00:09:12.580
And we'll get into a little bit
later why you might want

00:09:12.580 --> 00:09:15.530
to get that information for
debugging purposes.

00:09:15.530 --> 00:09:17.670
So I'm going to pull up
the code over here.

00:09:17.670 --> 00:09:22.560
This is a little bit of a
contrived example because I

00:09:22.560 --> 00:09:26.180
explicitly did something wrong
in this code to make it fail.

00:09:26.180 --> 00:09:33.503
But I'm basically going to be
taking this line and just bump

00:09:33.503 --> 00:09:35.220
that up a little bit
if I could remember

00:09:35.220 --> 00:09:40.020
how to do it here.

00:09:40.020 --> 00:09:40.520
I'm not sure.

00:09:40.520 --> 00:09:44.180
But if you could see this, this
is httplib2.debug level

00:09:44.180 --> 00:09:45.770
setting equal to 4.

00:09:45.770 --> 00:09:48.370
And I'll include a link to the
docs that explain how to do

00:09:48.370 --> 00:09:49.870
that for the Python
client library.

00:09:49.870 --> 00:09:51.680
So this is basically telling
the Python client library,

00:09:51.680 --> 00:09:55.560
hey, I would like you to turn
on the highest level of

00:09:55.560 --> 00:09:58.130
debugging for all of your HTTP
requests that you are making.

00:09:58.130 --> 00:10:01.920
So let's just see how
un-commenting that line

00:10:01.920 --> 00:10:03.940
changes things around.

00:10:03.940 --> 00:10:07.530
So in this case, you could see
all the HTTP requests that are

00:10:07.530 --> 00:10:09.660
being made, and you can
see the response.

00:10:09.660 --> 00:10:11.300
And this is on the
raw HTTP level.

00:10:11.300 --> 00:10:14.350
So you see over here, for
instance, this is the

00:10:14.350 --> 00:10:17.370
authorization token
that I'm using.

00:10:17.370 --> 00:10:21.320
This is the actual URL that's
being requested.

00:10:21.320 --> 00:10:26.040
It's making channels,
get request against

00:10:26.040 --> 00:10:28.430
Googleapis.com, so that
all looks fine.

00:10:28.430 --> 00:10:32.210
And I'm getting back an
HTTP 400 bad request.

00:10:32.210 --> 00:10:34.810
And in this particular case,
I happen to know what the

00:10:34.810 --> 00:10:35.610
problem is.

00:10:35.610 --> 00:10:38.540
It's because I don't have
mine=true sets,

00:10:38.540 --> 00:10:40.080
so there's no filter.

00:10:40.080 --> 00:10:43.920
So if I just run that again,
you can see I get back, in

00:10:43.920 --> 00:10:47.870
this case, an HTTP
200 response.

00:10:47.870 --> 00:10:50.650
So everything worked fine
in this particular case.

00:10:50.650 --> 00:10:55.830
So this is something that's
specific to each client

00:10:55.830 --> 00:10:56.660
library, like I said.

00:10:56.660 --> 00:10:58.990
So you kind of have to look up
the documentation for each

00:10:58.990 --> 00:11:02.680
client library and see how to
turn on HTTP request logging,

00:11:02.680 --> 00:11:03.810
but it's super important.

00:11:03.810 --> 00:11:07.240
And it's a really great
debugging technique.

00:11:07.240 --> 00:11:12.970
So the other way you could debug
calls made to the API

00:11:12.970 --> 00:11:16.360
without having to actually turn
on HTTP logging is to

00:11:16.360 --> 00:11:21.600
make those calls in like a
sandbox type of context.

00:11:21.600 --> 00:11:23.600
And what we could have--

00:11:23.600 --> 00:11:26.250
the provide side is the API's
explorer, which lets you

00:11:26.250 --> 00:11:31.790
experiment with all sorts of
Data API calls in this really

00:11:31.790 --> 00:11:33.250
friendly web interface.

00:11:33.250 --> 00:11:35.860
And I'm just going to make
the same sort of

00:11:35.860 --> 00:11:37.090
request over here.

00:11:37.090 --> 00:11:40.420
Let me actually just
do a search.list.

00:11:40.420 --> 00:11:44.020
So I'm going to put in, well,
actually, let me just do it

00:11:44.020 --> 00:11:44.900
without anything over here.

00:11:44.900 --> 00:11:49.085
So this just lets you make your
same Data API requests

00:11:49.085 --> 00:11:51.700
that you can make from code
within this web browser.

00:11:51.700 --> 00:11:53.690
And you see all the different
options you can set.

00:11:53.690 --> 00:11:54.820
So let me just not
put in anything.

00:11:54.820 --> 00:11:57.950
And I know that's going to be
an error because you need to

00:11:57.950 --> 00:12:00.690
set some filters and say what
you want your parts.

00:12:00.690 --> 00:12:03.210
So if you look over here, you
can see that this will give

00:12:03.210 --> 00:12:07.790
you the underlying HTTP request
that's being made and

00:12:07.790 --> 00:12:09.440
the response in a really
nice format.

00:12:09.440 --> 00:12:10.830
And it makes it easy to read.

00:12:10.830 --> 00:12:15.346
It makes it easy to pass it
along to Stack Overflow or the

00:12:15.346 --> 00:12:17.760
issue tracker when you're
asking for help.

00:12:17.760 --> 00:12:20.320
So you'll see over here, you
get back this error--

00:12:20.320 --> 00:12:22.310
required parameter part--

00:12:22.310 --> 00:12:25.120
and that gives you a pretty
clear explanation.

00:12:25.120 --> 00:12:27.750
Hey, I need to put in a part if
I want to make my request.

00:12:27.750 --> 00:12:31.390
So I'm going to say
over here part ID.

00:12:31.390 --> 00:12:34.300
I'm going to re-run
my request.

00:12:34.300 --> 00:12:36.450
And in this case, I
get back results.

00:12:36.450 --> 00:12:41.190
So this is good for both trying
to replicate a request

00:12:41.190 --> 00:12:42.910
that's giving you an
error when you're

00:12:42.910 --> 00:12:43.950
using a client library.

00:12:43.950 --> 00:12:47.290
You could just try to find the
corresponding method in this

00:12:47.290 --> 00:12:50.470
API's explorer and make the
request from there and see

00:12:50.470 --> 00:12:53.330
what the response is in a
really friendly format.

00:12:53.330 --> 00:12:56.090
One other thing to point out
is that a lot of requests,

00:12:56.090 --> 00:12:59.900
certainly for the Analytics
API and some of the other

00:12:59.900 --> 00:13:02.870
APIs, but even some Data API
requests, require that you go

00:13:02.870 --> 00:13:07.050
through the OAuth2 flow before
you can make those requests.

00:13:07.050 --> 00:13:09.450
You can do that directly
from the API explorer.

00:13:09.450 --> 00:13:13.070
So just because you're making an
authorized request does not

00:13:13.070 --> 00:13:15.100
mean you have to use
a client library.

00:13:15.100 --> 00:13:16.800
You could play around with
the API explorer

00:13:16.800 --> 00:13:18.950
in that case, too.

00:13:18.950 --> 00:13:22.810
We have a brand new page in
our docs that is really

00:13:22.810 --> 00:13:24.520
awesome that--

00:13:24.520 --> 00:13:28.300
also if you're into the sort of
thing like I am, that gives

00:13:28.300 --> 00:13:31.660
you a full breakdown of all the
different types of errors

00:13:31.660 --> 00:13:33.990
that you could get back
from doing Data

00:13:33.990 --> 00:13:35.780
API Version 3 requests.

00:13:35.780 --> 00:13:40.130
So this gives you kind of an
atlas for things that could go

00:13:40.130 --> 00:13:43.450
wrong and what you could kind
of prepare yourself for.

00:13:43.450 --> 00:13:45.990
So it's broken down into general
errors, the type of

00:13:45.990 --> 00:13:48.720
things that could happen for
any request, regardless of

00:13:48.720 --> 00:13:50.580
which service you're
going against.

00:13:50.580 --> 00:13:52.160
These are the things that
you'd expect like what

00:13:52.160 --> 00:13:57.000
exceeded or bad requests
with bad filters

00:13:57.000 --> 00:13:58.810
or things like that.

00:13:58.810 --> 00:14:03.610
There's also, for specific API
calls like for doing a search,

00:14:03.610 --> 00:14:06.520
invalid search filter,
invalid video ID.

00:14:06.520 --> 00:14:11.200
So if you happen to get a
specific error code, you can

00:14:11.200 --> 00:14:13.010
look it up on this page, and you
can see a little bit more

00:14:13.010 --> 00:14:16.470
detail in the description field
for the possible causes.

00:14:16.470 --> 00:14:19.410
And in some cases, understanding
the causes

00:14:19.410 --> 00:14:22.510
should hopefully give you an
idea of how to fix the

00:14:22.510 --> 00:14:25.430
underlying problem.

00:14:25.430 --> 00:14:27.500
That's pretty much what I wanted
to talk about on the

00:14:27.500 --> 00:14:29.320
Data API side of things.

00:14:29.320 --> 00:14:32.700
There's a completely different
API that folks are probably

00:14:32.700 --> 00:14:34.800
familiar with as well and
that's the Player API.

00:14:34.800 --> 00:14:39.620
And the Player API is, as the
name suggests, used for

00:14:39.620 --> 00:14:40.950
playing back YouTube videos.

00:14:40.950 --> 00:14:44.790
And we'll just talk about the
Player API in the context of

00:14:44.790 --> 00:14:46.590
embeds on web pages right now.

00:14:46.590 --> 00:14:51.450
I know a lot of folks might be
using the newer Android Player

00:14:51.450 --> 00:14:53.800
API for embedding YouTube
videos in Android

00:14:53.800 --> 00:14:54.570
applications.

00:14:54.570 --> 00:14:57.560
And what I'm going to talk
about is not necessarily

00:14:57.560 --> 00:15:01.070
related to that, but more
about the web embeds and

00:15:01.070 --> 00:15:02.060
debugging those.

00:15:02.060 --> 00:15:05.810
So the most important thing to
keep in mind for web embeds is

00:15:05.810 --> 00:15:07.830
that things can go wrong.

00:15:07.830 --> 00:15:12.540
The common way of handling and
reporting errors back to

00:15:12.540 --> 00:15:17.030
developers when things do go
wrong, when you use the Web

00:15:17.030 --> 00:15:21.620
Embed API, is via an
On Error Handler.

00:15:21.620 --> 00:15:24.120
So this is a specific JavaScript
event handler that

00:15:24.120 --> 00:15:26.900
will get fired whenever
something happens

00:15:26.900 --> 00:15:29.800
that impacts playback.

00:15:29.800 --> 00:15:33.880
So I'm going to do a quick
live example of

00:15:33.880 --> 00:15:34.640
how that might work.

00:15:34.640 --> 00:15:38.620
So I'm going to pull up the
Player API over here.

00:15:38.620 --> 00:15:45.621
I'm going to grab a sample from
our Getting Started guide

00:15:45.621 --> 00:15:47.700
for using Player API.

00:15:47.700 --> 00:15:49.580
This is a full working
example.

00:15:49.580 --> 00:15:51.620
I'm going to pull up a site
called jsfiddle, which I

00:15:51.620 --> 00:15:56.810
happen to like for doing live
JavaScript testing things.

00:15:56.810 --> 00:15:57.740
I'm going to paste this
right in here.

00:15:57.740 --> 00:16:02.330
This gives you a kind of
playground where you can host

00:16:02.330 --> 00:16:08.215
HTML, JavaScript, and CSS, and
it provides you with a URL

00:16:08.215 --> 00:16:10.810
that you can then pass along
to somebody else.

00:16:10.810 --> 00:16:13.040
And they could run your
code and see exactly

00:16:13.040 --> 00:16:14.070
what the output is.

00:16:14.070 --> 00:16:18.420
So this is super, super useful
for debugging things in kind

00:16:18.420 --> 00:16:21.620
of a clean environment but also
for reporting problems.

00:16:21.620 --> 00:16:24.660
If you do happen to have any
sort of errors that you're

00:16:24.660 --> 00:16:28.330
really not sure about with the
Player API, a lot of the times

00:16:28.330 --> 00:16:33.090
what we'll ask for is that you
provide a simple reproduction

00:16:33.090 --> 00:16:34.160
of the issue.

00:16:34.160 --> 00:16:37.300
Sometimes we'll say, hey, you
can give us the full site URL

00:16:37.300 --> 00:16:41.030
for your live production site,
and we can see the error

00:16:41.030 --> 00:16:43.750
within the context
of a bigger page.

00:16:43.750 --> 00:16:46.250
But if it's really just like
a standalone, easily

00:16:46.250 --> 00:16:49.210
reproducible problem, putting it
on something like jsfiddle,

00:16:49.210 --> 00:16:51.540
and I'm sure there are other
sites out there that do

00:16:51.540 --> 00:16:56.060
something similar, gives us a
really good way of being able

00:16:56.060 --> 00:16:58.460
to look at the specific code.

00:16:58.460 --> 00:17:01.460
We can then go and edit the code
and play around a bit and

00:17:01.460 --> 00:17:05.200
try things out and try
making some changes.

00:17:05.200 --> 00:17:06.220
So I highly recommend it.

00:17:06.220 --> 00:17:10.170
So what I did over here is
take the code from the

00:17:10.170 --> 00:17:13.650
documentation for using
the iframe Player API.

00:17:13.650 --> 00:17:17.980
And I pasted it into the HTML
frame within jsfiddle, and I'm

00:17:17.980 --> 00:17:20.140
going to click Run right now.

00:17:20.140 --> 00:17:25.630
So this is fortunately actually
working, because we

00:17:25.630 --> 00:17:28.790
do strive to have working code
within our documentation.

00:17:28.790 --> 00:17:30.010
So everything looks good.

00:17:30.010 --> 00:17:32.570
In this case, it loads
up the sample video.

00:17:32.570 --> 00:17:33.980
Things are great.

00:17:33.980 --> 00:17:36.990
I want to show you how you can
deal with an error situation.

00:17:36.990 --> 00:17:41.200
I'm going to bump up the size
over here of some things in

00:17:41.200 --> 00:17:44.160
order to make this a little
bit more visible.

00:17:44.160 --> 00:17:48.290
So you can see that in the
iframe player, we have the

00:17:48.290 --> 00:17:52.860
ability to define a bunch of
events where handlers are

00:17:52.860 --> 00:17:56.470
fired in response to different
API states, so things like the

00:17:56.470 --> 00:17:59.080
API being ready or on the state
change like when the

00:17:59.080 --> 00:18:01.790
video pauses or plays
or so on.

00:18:01.790 --> 00:18:05.050
The example we have in the docs
doesn't show using the

00:18:05.050 --> 00:18:07.510
OnError handler, but I could
quickly put that in.

00:18:07.510 --> 00:18:10.870
So there's another event
called OnError

00:18:10.870 --> 00:18:12.070
that could be fired.

00:18:12.070 --> 00:18:16.550
And I'm going to create an
inline anonymous function to

00:18:16.550 --> 00:18:25.820
handle it and go over here and
do the hold alerts, and error,

00:18:25.820 --> 00:18:27.640
and in this case, I
want to do e.data.

00:18:30.230 --> 00:18:33.400
So the OnError handler gets
passed in as parameter E, and

00:18:33.400 --> 00:18:37.840
the data property of E will
have the error code in it.

00:18:37.840 --> 00:18:41.400
So if I run it now, nothing's
going to happen because we

00:18:41.400 --> 00:18:43.880
have this great code, and
there's no errors.

00:18:43.880 --> 00:18:47.900
But it's pretty easy to create
an error with the Player API,

00:18:47.900 --> 00:18:51.960
for instance, if you have
an invalid video ID

00:18:51.960 --> 00:18:52.310
that you try to load.

00:18:52.310 --> 00:18:55.380
So let me just put in a bunch
of junk at the end of the

00:18:55.380 --> 00:18:58.400
video ID and try and
run that again.

00:18:58.400 --> 00:19:06.150
And what we should see
is an OnError occur.

00:19:06.150 --> 00:19:07.400
Let me try that one more time.

00:19:11.470 --> 00:19:14.330
No.

00:19:14.330 --> 00:19:17.020
Something happened.

00:19:17.020 --> 00:19:19.020
I could spend a little bit more
time looking into this,

00:19:19.020 --> 00:19:23.570
but I don't want to take away
from the rest of the show.

00:19:23.570 --> 00:19:27.030
Basically, if anything does go
wrong, this OnError handler

00:19:27.030 --> 00:19:27.630
should fire off.

00:19:27.630 --> 00:19:30.760
And in this case, I was
trying to just alert

00:19:30.760 --> 00:19:32.670
for the error message.

00:19:32.670 --> 00:19:34.910
I'm not exactly sure why it's
not happening, but in a real

00:19:34.910 --> 00:19:38.250
application, you could do
any variety of steps.

00:19:38.250 --> 00:19:42.600
You could log it to some sort
of remote JavaScript login

00:19:42.600 --> 00:19:43.670
console you have set up.

00:19:43.670 --> 00:19:46.610
You could take action by trying
to load in the next

00:19:46.610 --> 00:19:48.360
video when an error occurs.

00:19:48.360 --> 00:19:50.670
You could do any number
of different things.

00:19:50.670 --> 00:19:57.060
The Player API has in the
documentation a list of

00:19:57.060 --> 00:20:00.920
potential error codes that you
might run into similar to that

00:20:00.920 --> 00:20:04.165
list from the Data API and
things like error code 2 for

00:20:04.165 --> 00:20:09.496
an invalid video ID, 5 if the
video can't be played in the

00:20:09.496 --> 00:20:12.220
HTML5 player, and a few
other things here.

00:20:12.220 --> 00:20:16.060
So this is where that's
documented.

00:20:16.060 --> 00:20:20.460
I wanted to just give you the
best practices, and I've kind

00:20:20.460 --> 00:20:24.440
of touched on these in the
course of talking about the

00:20:24.440 --> 00:20:26.150
ways of getting debugging
information.

00:20:26.150 --> 00:20:30.620
But the absolute at a minimum
useful information that we

00:20:30.620 --> 00:20:35.040
need when you're reporting an
error to us either in Stack

00:20:35.040 --> 00:20:38.780
Overflow or issue tracker in
order to effectively figure

00:20:38.780 --> 00:20:42.680
out what's going on and to help
you with your problem.

00:20:42.680 --> 00:20:48.950
So we really, really want the
HTTP request and response

00:20:48.950 --> 00:20:53.100
trace if you're running into an
issue with the Data APIs.

00:20:53.100 --> 00:20:57.540
This includes both the HTTP
request headers and HTTP

00:20:57.540 --> 00:21:00.590
response headers and
response body.

00:21:00.590 --> 00:21:05.850
This really should be sufficient
information to

00:21:05.850 --> 00:21:07.500
figure out pretty much
any problem.

00:21:07.500 --> 00:21:09.230
If you are person posting this
in a public forum, you

00:21:09.230 --> 00:21:12.750
probably do want to remove your
authorization value, even

00:21:12.750 --> 00:21:16.300
though Oauth2 tokens do
expire after an hour.

00:21:16.300 --> 00:21:18.550
But you still probably don't
want to post that publicly.

00:21:18.550 --> 00:21:22.110
But pretty much everything else
other than that token you

00:21:22.110 --> 00:21:23.430
could post publicly.

00:21:23.430 --> 00:21:27.330
And that will give us enough
information to figure out what

00:21:27.330 --> 00:21:30.070
your request is, what you're
getting back, do any sort of

00:21:30.070 --> 00:21:32.160
cross-referencing with our
internal logs that we need to

00:21:32.160 --> 00:21:35.660
do, and hopefully find the
solution to your problem.

00:21:35.660 --> 00:21:38.780
So that's really the best
information you can provide to

00:21:38.780 --> 00:21:42.260
us when you're running into an
error with the Data APIs.

00:21:42.260 --> 00:21:44.680
On the Player API side of
things, like I mentioned, a

00:21:44.680 --> 00:21:47.280
live reproduction on your
production site

00:21:47.280 --> 00:21:48.040
is certainly good.

00:21:48.040 --> 00:21:50.840
If it's something very specific
to the way your page

00:21:50.840 --> 00:21:53.570
layout is and maybe you have a
few different plugins running,

00:21:53.570 --> 00:21:56.950
and you're using jQuery and
something else, and you really

00:21:56.950 --> 00:22:01.290
can only reproduce a problem
on a full website, then

00:22:01.290 --> 00:22:04.250
definitely give us
that site's URL.

00:22:04.250 --> 00:22:06.830
But the better way to do it is
probably to use something like

00:22:06.830 --> 00:22:08.890
jsfiddle and create
a very minimal

00:22:08.890 --> 00:22:10.320
reproduction of the problem.

00:22:10.320 --> 00:22:12.520
And we'll take a look
at that jsfiddle.

00:22:12.520 --> 00:22:14.955
We can edit it a little bit, and
we can play around with it

00:22:14.955 --> 00:22:17.030
live and try to figure
out what's going on.

00:22:17.030 --> 00:22:20.380
So that's really what we're
looking for when you're trying

00:22:20.380 --> 00:22:22.230
to give us information.

00:22:22.230 --> 00:22:27.350
And that's just ways for you to
help us help you by giving

00:22:27.350 --> 00:22:30.610
us all the information we
need right up front.

00:22:30.610 --> 00:22:33.900
And that's pretty much what I
wanted to cover in terms of

00:22:33.900 --> 00:22:35.800
debugging and error
handling and best

00:22:35.800 --> 00:22:37.990
practices in that space.

00:22:37.990 --> 00:22:40.210
And I wanted to do a quick shout
out to the folks who

00:22:40.210 --> 00:22:45.280
were able to make it to
our Los Angeles video.

00:22:45.280 --> 00:22:49.390
We did a YouTube plus Google TV
video hackathon about two

00:22:49.390 --> 00:22:49.920
weeks ago now.

00:22:49.920 --> 00:22:52.930
So thanks for all the folks
who came out to that.

00:22:52.930 --> 00:22:54.950
It was great meeting a
lot of you in person.

00:22:54.950 --> 00:22:58.056
And I think next week, we're
going to be returning to more

00:22:58.056 --> 00:23:01.960
of our traditional sit down
show with some guest

00:23:01.960 --> 00:23:03.620
developers who are using API.

00:23:03.620 --> 00:23:05.550
And I think that's going
to be a great show.

00:23:05.550 --> 00:23:07.310
So stay tuned for that
at the same time.

00:23:07.310 --> 00:23:08.930
Thanks everybody.

00:23:08.930 --> 00:23:10.180
Jeff Posnick signing off.

