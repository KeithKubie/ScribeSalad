WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.606
SPEAKER 1: Android Oreo is here
and available to consumers.

00:00:03.606 --> 00:00:05.230
Hopefully, you've
taken the opportunity

00:00:05.230 --> 00:00:08.440
to test and update your apps
during the long preview process

00:00:08.440 --> 00:00:10.600
so those influential,
vocal early adopters have

00:00:10.600 --> 00:00:12.160
a great experience.

00:00:12.160 --> 00:00:15.280
Let's review what O brings-
a chocolate sandwich cookie

00:00:15.280 --> 00:00:19.540
of important structural changes
with sweet new capabilities.

00:00:19.540 --> 00:00:21.185
The most important stuff first.

00:00:21.185 --> 00:00:23.560
You should keep in mind that
even if your app doesn't yet

00:00:23.560 --> 00:00:27.670
target O, it will behave
differently on O in a few ways.

00:00:27.670 --> 00:00:29.590
When your app is in
the background, i.e.

00:00:29.590 --> 00:00:31.750
without an active activity
or foreground service,

00:00:31.750 --> 00:00:34.900
location updates will be
significantly less frequent.

00:00:34.900 --> 00:00:37.690
When your app no longer has
an active activity, service,

00:00:37.690 --> 00:00:39.910
or other component
any wake locks at hold

00:00:39.910 --> 00:00:42.100
will be automatically released.

00:00:42.100 --> 00:00:44.440
For devices that come
with Google Play services,

00:00:44.440 --> 00:00:46.300
settings not secured
on Android ID

00:00:46.300 --> 00:00:48.280
will return a different
value for each app

00:00:48.280 --> 00:00:51.280
based upon the sign-in
key and user profile.

00:00:51.280 --> 00:00:53.590
For advertising, you
really need to be

00:00:53.590 --> 00:00:57.700
using Google Play services
user-resettable advertising ID.

00:00:57.700 --> 00:00:59.740
Here's another
privacy-related change.

00:00:59.740 --> 00:01:02.320
Apps targeting O won't
be able to get access

00:01:02.320 --> 00:01:04.780
to user accounts using the
get accounts permission.

00:01:04.780 --> 00:01:08.195
Instead, apps must rely on
the account user activity.

00:01:08.195 --> 00:01:10.570
Account owners can now choose
whether their accounts will

00:01:10.570 --> 00:01:13.240
be visible to other apps and
the account user activity

00:01:13.240 --> 00:01:15.280
will be updated accordingly.

00:01:15.280 --> 00:01:17.500
If you're targeting O, your
app will have new limits

00:01:17.500 --> 00:01:19.030
on background processing.

00:01:19.030 --> 00:01:21.370
In summary, only a small
number of broadcast

00:01:21.370 --> 00:01:24.430
can be used to start your
app, such as Boot Completed.

00:01:24.430 --> 00:01:27.070
Also, your app will no longer
be able to start services

00:01:27.070 --> 00:01:28.220
when in the background.

00:01:28.220 --> 00:01:31.210
You'll need to rely on explicit
broadcast receivers, Jobs,

00:01:31.210 --> 00:01:34.450
Firebase Cloud Messaging, and
startForeground, a new API

00:01:34.450 --> 00:01:36.490
to start foreground services.

00:01:36.490 --> 00:01:39.640
Android Oreo adds features to
support wide gamut displays,

00:01:39.640 --> 00:01:42.850
including 16-bit PNG
and ICC profiles,

00:01:42.850 --> 00:01:45.880
JPEG, PNG, and WebP,
along with new utilities

00:01:45.880 --> 00:01:48.340
such as color space
and color log.

00:01:48.340 --> 00:01:51.370
Android O also supports a
longer, narrower screens,

00:01:51.370 --> 00:01:53.320
and apps that target
Android O no longer

00:01:53.320 --> 00:01:56.566
have a default maximum
aspect ratio of 1.86.

00:01:56.566 --> 00:02:00.100
If your activity needs to
set a maximum aspect ratio,

00:02:00.100 --> 00:02:01.590
the system will
letterbox your app

00:02:01.590 --> 00:02:03.700
if you set resizeable
activity to false

00:02:03.700 --> 00:02:06.580
and use the max aspect
ratio attribute.

00:02:06.580 --> 00:02:09.880
Of course, it's best to make
your app work fullscreen

00:02:09.880 --> 00:02:13.960
and with multi-window, so only
use this as a last resort.

00:02:13.960 --> 00:02:16.710
To make it easier to correct
graphics driver issues,

00:02:16.710 --> 00:02:18.640
Android O device
manufacturers may

00:02:18.640 --> 00:02:20.770
choose to update these
drivers in the Play Store

00:02:20.770 --> 00:02:22.770
without having to
do a system update.

00:02:22.770 --> 00:02:25.630
And of course, Android O is
built on Project Treble, so

00:02:25.630 --> 00:02:27.760
devices that ship
with O will be easier

00:02:27.760 --> 00:02:30.670
to update to new versions
of Android in future.

00:02:30.670 --> 00:02:32.980
Android Oreo gives
users fine-grain control

00:02:32.980 --> 00:02:36.130
over notifications by adding
notification channels.

00:02:36.130 --> 00:02:39.610
Apps can declare channels, which
show up to users as categories.

00:02:39.610 --> 00:02:42.580
Users can block a category and
alter its behavior controlling

00:02:42.580 --> 00:02:46.060
vibration, lights, and
lock screen privacy.

00:02:46.060 --> 00:02:49.120
Apps can target Android
O must use channels

00:02:49.120 --> 00:02:50.800
if they use notifications.

00:02:50.800 --> 00:02:54.220
We call the notification manager
to create notification channels

00:02:54.220 --> 00:02:56.290
and then we set the
notification channel ID

00:02:56.290 --> 00:02:58.480
in the compact
notification builder.

00:02:58.480 --> 00:03:01.270
Android O also supports
notification badging and dots

00:03:01.270 --> 00:03:02.550
by default in a channel.

00:03:02.550 --> 00:03:06.280
We can turn this off by setting
set show badge to false.

00:03:06.280 --> 00:03:09.370
Android Oreo now allows apps to
request adding their AppWidget

00:03:09.370 --> 00:03:10.210
to the launcher.

00:03:10.210 --> 00:03:12.760
You can easily check to see if
AppWidget pinning requests are

00:03:12.760 --> 00:03:14.290
supported by the
default launcher

00:03:14.290 --> 00:03:16.780
and then have your app
request them in your UI.

00:03:16.780 --> 00:03:19.030
And we've changed the way
adding shortcuts works,

00:03:19.030 --> 00:03:22.210
eliminating the broadcast
used in Android 7.1.

00:03:22.210 --> 00:03:23.710
Similar to AppWidgets,
you can check

00:03:23.710 --> 00:03:25.751
to see if shortcut pinning
requests are supported

00:03:25.751 --> 00:03:27.790
and then have your
app request them.

00:03:27.790 --> 00:03:30.760
Picture in Picture is now
available for all devices, not

00:03:30.760 --> 00:03:32.260
just Android TV.

00:03:32.260 --> 00:03:34.395
To specify if your
activity can use PiP mode,

00:03:34.395 --> 00:03:36.520
set Android [INAUDIBLE]
supports Picture in Picture

00:03:36.520 --> 00:03:38.380
to true in the manifest.

00:03:38.380 --> 00:03:40.390
All an app has to do to
start Picture in Picture

00:03:40.390 --> 00:03:42.010
is call enter Picture
in Picture mode

00:03:42.010 --> 00:03:44.110
from a resumed or pause state.

00:03:44.110 --> 00:03:46.000
Activities can now be
launched by the app

00:03:46.000 --> 00:03:49.000
on secondary displays using
activity options, simpler

00:03:49.000 --> 00:03:51.010
and easier than the
presentation API.

00:03:51.010 --> 00:03:53.110
In addition, activities
that support multi-window

00:03:53.110 --> 00:03:56.050
can be launched by a user
on secondary displays.

00:03:56.050 --> 00:03:58.630
These displays have per
display based configurations

00:03:58.630 --> 00:04:00.360
and resource management.

00:04:00.360 --> 00:04:02.360
This means that some parts
of the configuration,

00:04:02.360 --> 00:04:05.680
such as screen width DP, screen
high DP, layout, and density DP

00:04:05.680 --> 00:04:08.560
will be set according to display
on which the activity currently

00:04:08.560 --> 00:04:09.820
resides.

00:04:09.820 --> 00:04:13.340
Fonts now are a fully-supported
resource type in Android O

00:04:13.340 --> 00:04:15.310
and have also been
back-ported to API 14

00:04:15.310 --> 00:04:16.690
in the support library.

00:04:16.690 --> 00:04:19.180
You can use the get font
method to get a font by ID

00:04:19.180 --> 00:04:21.820
and use these fonts
directly in text views.

00:04:21.820 --> 00:04:24.850
You can also define entire
font families in XML,

00:04:24.850 --> 00:04:26.650
declaring the font
styles and weights,

00:04:26.650 --> 00:04:28.570
along with the font resource.

00:04:28.570 --> 00:04:30.430
Downloadable fonts are
also supported in O

00:04:30.430 --> 00:04:32.320
and implemented in
the support library.

00:04:32.320 --> 00:04:34.160
These fonts are shared
between applications,

00:04:34.160 --> 00:04:36.040
making better use of storage.

00:04:36.040 --> 00:04:39.010
The 800 plus Google Fonts
are now available directly

00:04:39.010 --> 00:04:40.450
within Android
Studio, where they

00:04:40.450 --> 00:04:42.340
can either be
embedded in your ABK

00:04:42.340 --> 00:04:45.290
or set to download on-demand.

00:04:45.290 --> 00:04:48.110
One of my favorite Android Oreo
and support library features

00:04:48.110 --> 00:04:50.210
is TextView AutoSizing.

00:04:50.210 --> 00:04:52.370
You can create an array
of preset text sizes

00:04:52.370 --> 00:04:54.890
or set min and max sizes
with a step granularity

00:04:54.890 --> 00:04:57.020
and the text will grow
and shrink to fill

00:04:57.020 --> 00:04:59.360
the available text view space.

00:04:59.360 --> 00:05:01.377
EditText can now be autofilled.

00:05:01.377 --> 00:05:02.960
Much of this will
happen automatically

00:05:02.960 --> 00:05:05.043
but you can help the
Autofill provider do a better

00:05:05.043 --> 00:05:06.590
job by giving it hints.

00:05:06.590 --> 00:05:09.970
You can also mark fields
that Autofill should ignore.

00:05:09.970 --> 00:05:12.809
Adaptive icon support in
Oreo allows app developers

00:05:12.809 --> 00:05:14.350
to control the way
their icon appears

00:05:14.350 --> 00:05:16.650
with launchers and devices
that use different icon

00:05:16.650 --> 00:05:18.550
shapes, with an
additional layer that can

00:05:18.550 --> 00:05:20.380
be used for animated effects.

00:05:20.380 --> 00:05:22.090
Android Studio
includes a new wizard

00:05:22.090 --> 00:05:23.680
for creating adaptive icons.

00:05:23.680 --> 00:05:26.140
And O has added support
for fractional inset values

00:05:26.140 --> 00:05:29.940
to make it easier to use legacy
resources to build these icons.

00:05:29.940 --> 00:05:31.960
Android has a new
native audio API,

00:05:31.960 --> 00:05:34.630
AAudio, designed for
low latency tasks,

00:05:34.630 --> 00:05:37.420
such as effects processing
and real-time synthesis.

00:05:37.420 --> 00:05:39.560
It's easier to use and
adds a new direct mode

00:05:39.560 --> 00:05:43.680
that if implemented by an
OEM allows to reduce latency.

00:05:43.680 --> 00:05:46.690
There's so much to discover in
Android O, which also includes

00:05:46.690 --> 00:05:48.550
updates to playback
and recording,

00:05:48.550 --> 00:05:50.490
seeking and reversing
animator's sets,

00:05:50.490 --> 00:05:53.110
multi-process web
view is Safe Browsing,

00:05:53.110 --> 00:05:55.450
StrictMode enhancements,
seekable file descriptors

00:05:55.450 --> 00:05:59.050
with media file access, more
language support, and more.

00:05:59.050 --> 00:06:01.600
Check out the links to learn
more about Android Oreo

00:06:01.600 --> 00:06:03.490
and how we're helping
developers leverage key

00:06:03.490 --> 00:06:05.530
features using the
support library.

00:06:05.530 --> 00:06:07.180
Also see how we're
improving Android

00:06:07.180 --> 00:06:09.460
development with the launch
of [INAUDIBLE] support,

00:06:09.460 --> 00:06:13.260
architecture components,
and Android Studio 3.0.

