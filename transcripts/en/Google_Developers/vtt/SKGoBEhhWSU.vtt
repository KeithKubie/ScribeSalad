WEBVTT
Kind: captions
Language: en

00:00:01.500 --> 00:00:02.600
ALEX DANILO: Hi, everybody.

00:00:02.600 --> 00:00:03.440
My name is Alex Danilo.

00:00:03.440 --> 00:00:07.180
I'm in developer relations and
on Chrome, and I have today

00:00:07.180 --> 00:00:10.120
with me Alexis Deveria
from Adobe.

00:00:10.120 --> 00:00:12.310
Alexis, of course, is the
man who built the site

00:00:12.310 --> 00:00:15.480
caniuse.com, which is a
fantastic resource for anybody

00:00:15.480 --> 00:00:17.740
doing HTML5 development.

00:00:17.740 --> 00:00:19.390
We're going to show you a whole
lot of stuff today.

00:00:19.390 --> 00:00:22.420
We're talking about CSS filters,
but most of all,

00:00:22.420 --> 00:00:25.700
we're talking about a new next
generation reading experience.

00:00:25.700 --> 00:00:28.750
So this is built with not just
CSS filters, but a whole lot

00:00:28.750 --> 00:00:32.240
of web technologies, so we're
going to cover stuff that uses

00:00:32.240 --> 00:00:37.260
WebGL, uses SVG, uses Canvas,
uses a whole lot of stuff, all

00:00:37.260 --> 00:00:39.380
working together to bring you
a seamless experience.

00:00:39.380 --> 00:00:42.260
And of course, this is
all about trees, OK?

00:00:42.260 --> 00:00:44.370
So when we talk about
DOM trees in the

00:00:44.370 --> 00:00:45.305
browser, we get excited.

00:00:45.305 --> 00:00:46.630
Or at least I do.

00:00:46.630 --> 00:00:48.370
I don't know about you guys.

00:00:48.370 --> 00:00:50.040
But of course, today, we're
talking about the world's

00:00:50.040 --> 00:00:52.960
biggest tree in mass, and it's
called The President.

00:00:52.960 --> 00:00:56.430
And National Geographic has this
beautiful, beautiful site

00:00:56.430 --> 00:00:59.710
that they've built with Adobe's
help, and we're going

00:00:59.710 --> 00:01:00.920
to talk all about that today.

00:01:00.920 --> 00:01:04.209
So what are CSS filters,
I'm sure you're asking?

00:01:04.209 --> 00:01:06.420
Well, you build these beautiful
DOM tree things

00:01:06.420 --> 00:01:09.160
inside your browser, and then
the browser comes along and it

00:01:09.160 --> 00:01:11.970
goes, well, we need
to see that thing.

00:01:11.970 --> 00:01:14.960
So the browser lays it out,
places all the elements on the

00:01:14.960 --> 00:01:18.080
page, and then it gets
styled, and CSS comes

00:01:18.080 --> 00:01:20.090
along and styles it.

00:01:20.090 --> 00:01:22.210
And then we have this
post-processing step, which is

00:01:22.210 --> 00:01:23.830
a CSS filter.

00:01:23.830 --> 00:01:25.860
So if you can imagine baking
a cake, you get all your

00:01:25.860 --> 00:01:27.570
ingredients, you put them
together, you bake it.

00:01:27.570 --> 00:01:28.870
That's your web page.

00:01:28.870 --> 00:01:30.380
You want to make it look good,
so you put a bit of

00:01:30.380 --> 00:01:31.720
icing on the top.

00:01:31.720 --> 00:01:33.960
And then you sprinkle sugar, and
CSS filters are the sugar,

00:01:33.960 --> 00:01:36.205
which makes it look
even better.

00:01:36.205 --> 00:01:38.700
And so once you've done the
filter, you then push it to

00:01:38.700 --> 00:01:39.220
the screen.

00:01:39.220 --> 00:01:42.620
So once you've generated a
bitmap, the bitmap can be

00:01:42.620 --> 00:01:44.920
filtered inside the browser, and
then that eventually ends

00:01:44.920 --> 00:01:45.740
up on the page.

00:01:45.740 --> 00:01:47.620
And that's what you look at.

00:01:47.620 --> 00:01:50.305
So where did this all begin?

00:01:50.305 --> 00:01:52.920
This all began with
SVG, of course.

00:01:52.920 --> 00:01:56.460
Now SVG's a graphics language,
which you all know from HTML5.

00:01:56.460 --> 00:01:59.750
And within SVG, there are
basic filter primitives.

00:01:59.750 --> 00:02:02.000
But these filter primitives are
like building blocks, so

00:02:02.000 --> 00:02:04.690
you kind of combine them all
together to end up with the

00:02:04.690 --> 00:02:06.050
effect that you want.

00:02:06.050 --> 00:02:09.310
So if you have a look at this
graphic at the top, we have a

00:02:09.310 --> 00:02:10.530
standard graphic on the left.

00:02:10.530 --> 00:02:12.330
And then we generate
a blur from that.

00:02:12.330 --> 00:02:15.680
So you take the blur, and then
the second filter offsets that

00:02:15.680 --> 00:02:16.950
blur a little bit.

00:02:16.950 --> 00:02:20.440
The third filter puts lighting
on the blur, which then gives

00:02:20.440 --> 00:02:22.560
you this kind of 3D effect.

00:02:22.560 --> 00:02:27.190
The next filter along the chain
clips the blurred lit

00:02:27.190 --> 00:02:29.980
piece to the original graphic
so that it only hits the

00:02:29.980 --> 00:02:31.410
original graphic.

00:02:31.410 --> 00:02:33.850
The next stage of that pipeline
combines the original

00:02:33.850 --> 00:02:37.270
graphic with the filtered piece
we just created, which

00:02:37.270 --> 00:02:40.750
gives you this nice little 3D
with the second last image.

00:02:40.750 --> 00:02:43.120
And then following that, we add
the drop shadow from the

00:02:43.120 --> 00:02:44.840
second stage again, and
we get this nice

00:02:44.840 --> 00:02:47.110
drop shadow 3D effect.

00:02:47.110 --> 00:02:49.120
And this is a whole lot of
individual steps which you

00:02:49.120 --> 00:02:50.780
have to write in SVG.

00:02:50.780 --> 00:02:54.110
So this bottom right image, of
course, is actual text, which

00:02:54.110 --> 00:02:56.260
is filtered using this
style of technique.

00:02:56.260 --> 00:02:58.450
So the beauty of doing something
like this is you get

00:02:58.450 --> 00:03:01.650
these incredible graphics, but
they're accessible, and

00:03:01.650 --> 00:03:02.400
they're real text.

00:03:02.400 --> 00:03:05.540
So you can select them, you
can do all sorts of stuff.

00:03:05.540 --> 00:03:08.370
So the thing about trying to do
something like this in SVG

00:03:08.370 --> 00:03:10.710
is you need quite
a lot of markup.

00:03:10.710 --> 00:03:14.880
So along came CSS filters, and
CSS filters are basically a

00:03:14.880 --> 00:03:17.190
beautiful little shorthand that
saves you a lot of pain

00:03:17.190 --> 00:03:18.130
and a lot of markup.

00:03:18.130 --> 00:03:20.170
And this is how easy
it is to use.

00:03:20.170 --> 00:03:21.630
So here we just have
a class selector.

00:03:21.630 --> 00:03:24.770
We're saying filter,
blur, 4 pixels.

00:03:24.770 --> 00:03:26.820
And so this takes the image
on the left and

00:03:26.820 --> 00:03:27.740
blurs it by 4 pixels.

00:03:27.740 --> 00:03:30.430
So that's all the markup you
have to do, whereas in SVG,

00:03:30.430 --> 00:03:33.610
that would have been a
whole ton of markup.

00:03:33.610 --> 00:03:35.500
Now, what's nice about
these primitives is

00:03:35.500 --> 00:03:36.390
you can combine them.

00:03:36.390 --> 00:03:39.240
You can actually put multiple
filters on your content.

00:03:39.240 --> 00:03:42.120
So, for example, you just
have to do something

00:03:42.120 --> 00:03:43.180
as simple as this.

00:03:43.180 --> 00:03:45.690
You just line them up
one after the other.

00:03:45.690 --> 00:03:49.270
So here we have a hue-rotate
followed by sepia.

00:03:49.270 --> 00:03:52.540
So we've taken a picture from
IO last year, and we've just

00:03:52.540 --> 00:03:54.010
applied two filters in order.

00:03:54.010 --> 00:03:56.880
Now, the thing to keep in mind
is that you can apply as many

00:03:56.880 --> 00:04:00.330
filters you like, and they'll be
applied from left to right,

00:04:00.330 --> 00:04:02.860
one after the other, which
is great, because

00:04:02.860 --> 00:04:03.920
order actually matters.

00:04:03.920 --> 00:04:05.365
So in this case, we've
shifted the hue and

00:04:05.365 --> 00:04:06.450
we've sepia toned it.

00:04:06.450 --> 00:04:10.000
But if we were to flip these
around the other way, we'd

00:04:10.000 --> 00:04:11.320
have something like that.

00:04:11.320 --> 00:04:13.240
So as you can see, the color
is actually different.

00:04:13.240 --> 00:04:15.240
They're exactly the
same filters, just

00:04:15.240 --> 00:04:16.320
in a different order.

00:04:16.320 --> 00:04:16.670
See?

00:04:16.670 --> 00:04:18.510
Sepia and blueish tinge.

00:04:21.420 --> 00:04:25.650
So the beauty of these CSS
shorthands are that, because

00:04:25.650 --> 00:04:28.410
people implementing browsers
spend all day hacking code,

00:04:28.410 --> 00:04:31.710
because that's what we love to
do, because there's a finite

00:04:31.710 --> 00:04:34.320
number of these shorthands, we
can actually optimize those

00:04:34.320 --> 00:04:35.090
inside the browser.

00:04:35.090 --> 00:04:37.590
So right now in Chrome, most
of these are hardware

00:04:37.590 --> 00:04:39.050
accelerated.

00:04:39.050 --> 00:04:40.990
So if you do a blur or
something, you don't get the

00:04:40.990 --> 00:04:42.760
penalty you would've
got 12 months ago.

00:04:42.760 --> 00:04:45.650
So there's only like 12
shorthands, and here is, of

00:04:45.650 --> 00:04:50.280
course, the definitive prefix
version with the normal markup

00:04:50.280 --> 00:04:54.930
of every single filter being
applied to something.

00:04:54.930 --> 00:04:55.820
Right.

00:04:55.820 --> 00:04:59.060
So, enough of my yakking.

00:04:59.060 --> 00:05:00.350
Let's just show you what
we've built first.

00:05:00.350 --> 00:05:03.940
We're going to start with the
desktop experience, because

00:05:03.940 --> 00:05:06.830
that, of course, is something
a bit special.

00:05:06.830 --> 00:05:08.450
And then we're going to show
you this all running on

00:05:08.450 --> 00:05:11.090
mobile, which hasn't been shown
before, by the way.

00:05:11.090 --> 00:05:13.470
So anyway, I'll pass it over
to Alexis, who will run you

00:05:13.470 --> 00:05:15.730
through the desktop
experience.

00:05:15.730 --> 00:05:17.330
ALEXIS DEVERIA: Thank
you, Alex.

00:05:17.330 --> 00:05:21.710
So this is the project that
Adobe developed using content

00:05:21.710 --> 00:05:22.810
from National Geographic.

00:05:22.810 --> 00:05:25.670
It's a really beautiful article
about the great

00:05:25.670 --> 00:05:28.110
sequoia trees.

00:05:28.110 --> 00:05:32.240
As I scroll down here, I'm
going to go through the

00:05:32.240 --> 00:05:34.710
different technologies that we
developed to create this next

00:05:34.710 --> 00:05:37.920
generation reading experience.

00:05:37.920 --> 00:05:40.210
So as I start here, the first
thing you see here

00:05:40.210 --> 00:05:43.500
is this drop cap.

00:05:43.500 --> 00:05:47.920
So what we use here to make this
text follow the contour

00:05:47.920 --> 00:05:52.660
of the letter O is something
called CSS shapes or CSS

00:05:52.660 --> 00:05:54.350
exclusions.

00:05:54.350 --> 00:05:57.000
And let me show you a little
bit about how that works by

00:05:57.000 --> 00:06:00.420
inspecting that.

00:06:00.420 --> 00:06:05.810
So we set here the
webkit-shape-outside property

00:06:05.810 --> 00:06:12.320
with an ellipse, and that's
what creates the shape.

00:06:12.320 --> 00:06:16.420
So this is a floated element,
and the inline text just kind

00:06:16.420 --> 00:06:19.520
of flows nicely around it,
which creates a great

00:06:19.520 --> 00:06:22.960
typographical look.

00:06:22.960 --> 00:06:26.250
As I scroll down, you see this
image comes into view.

00:06:26.250 --> 00:06:29.250
And whenever these images come
into view, and also this one I

00:06:29.250 --> 00:06:35.740
hover over, you can see how we
change both the saturation and

00:06:35.740 --> 00:06:36.690
also the sepia.

00:06:36.690 --> 00:06:39.230
So let me also take
a look at that.

00:06:39.230 --> 00:06:41.630
So just as Alex mentioned,
this is

00:06:41.630 --> 00:06:44.980
one of the CSS filters.

00:06:44.980 --> 00:06:49.130
So by default, this has a sepia
and a grayscale of 0.5.

00:06:49.130 --> 00:06:53.600
When we hover over that,
we change that to none.

00:06:53.600 --> 00:06:57.500
So this is a video that's about
the photoshoot that was

00:06:57.500 --> 00:06:58.350
done for this.

00:06:58.350 --> 00:07:02.320
As you can see, it went to
fullscreen HTML5 video.

00:07:10.740 --> 00:07:16.260
As I scroll down here, we see
this pull quote, and the pull

00:07:16.260 --> 00:07:18.740
quote uses something called
text balancing.

00:07:18.740 --> 00:07:22.860
Now, text balancing is still
a proposal, so this was

00:07:22.860 --> 00:07:25.980
implemented using a JavaScript
polyfill.

00:07:25.980 --> 00:07:30.130
And what it does is it ensures
that each line is roughly the

00:07:30.130 --> 00:07:31.380
same width.

00:07:31.380 --> 00:07:36.810
So instead of specifying where
you want your breaks, using

00:07:36.810 --> 00:07:40.010
text balancing, it will
automatically be formatted.

00:07:40.010 --> 00:07:45.990
So if I resize the window
enough, you'll see that now

00:07:45.990 --> 00:07:47.750
the text becomes three lines.

00:07:47.750 --> 00:07:51.340
Let me drag that here.

00:07:51.340 --> 00:07:54.320
So instead of where the browser
would normally move

00:07:54.320 --> 00:07:58.360
things over word by word using
text balancing, yours get this

00:07:58.360 --> 00:08:03.210
great formatted text regardless
of the width.

00:08:06.990 --> 00:08:08.940
Again, here, this image
comes into view.

00:08:08.940 --> 00:08:12.470
We change the opacity filter.

00:08:12.470 --> 00:08:14.350
I can click on it, put
it in full screen.

00:08:17.920 --> 00:08:20.340
And I'm going to talk a little
bit about CSS regions.

00:08:20.340 --> 00:08:24.390
So this is a technology that we
use here on the body text.

00:08:24.390 --> 00:08:27.490
And what CSS regions do is
they let you define your

00:08:27.490 --> 00:08:31.950
content in one area in the DOM,
but define the elements

00:08:31.950 --> 00:08:35.159
that the content flows
through elsewhere.

00:08:35.159 --> 00:08:40.159
So the author has complete
control over where the text

00:08:40.159 --> 00:08:44.410
will display without having to
modify the markup itself.

00:08:44.410 --> 00:08:47.240
So you can see that in action
here, where we've got these

00:08:47.240 --> 00:08:48.560
two columns.

00:08:48.560 --> 00:08:51.915
And if I select this text, you
can see it pretty good.

00:08:51.915 --> 00:08:53.910
I resize the window.

00:08:53.910 --> 00:08:58.410
As you can see, the text flows
from one to the next.

00:08:58.410 --> 00:09:01.200
So throughout this article, we
define all the different

00:09:01.200 --> 00:09:04.372
regions and different places to
position the text the way

00:09:04.372 --> 00:09:05.622
we want it to.

00:09:10.140 --> 00:09:11.985
Again, let's scroll this
image into view.

00:09:11.985 --> 00:09:17.540
As you see, it went from black
and white to color.

00:09:17.540 --> 00:09:19.815
Here we use another CSS shape.

00:09:19.815 --> 00:09:23.350
As you can see, the text
here roughly follows

00:09:23.350 --> 00:09:24.890
the background image.

00:09:24.890 --> 00:09:28.980
That just creates a very nice
look in combination with the

00:09:28.980 --> 00:09:30.230
photograph.

00:09:34.560 --> 00:09:37.370
So I can look at this
one real quick.

00:09:37.370 --> 00:09:41.250
This was done using

00:09:41.250 --> 00:09:44.410
webkit-shape-inside and a polygon.

00:09:44.410 --> 00:09:49.660
So that defined the CSS shape
that the text flows into.

00:09:53.650 --> 00:09:57.160
And now to scroll down
here, we get to--

00:09:57.160 --> 00:10:00.830
so here you see a thumbnail of
the tree that Alex mentioned,

00:10:00.830 --> 00:10:02.080
The President.

00:10:02.080 --> 00:10:05.520
And what we wanted to do is
create a visualization where

00:10:05.520 --> 00:10:09.580
you could actually see or kind
of get an idea of just how

00:10:09.580 --> 00:10:11.690
immense this tree is.

00:10:11.690 --> 00:10:15.190
And to talk a bit about the
technology behind that, I'm

00:10:15.190 --> 00:10:17.740
going to hand things
back over to Alex.

00:10:17.740 --> 00:10:19.070
ALEX DANILO: Thanks, Alexis.

00:10:19.070 --> 00:10:20.320
OK.

00:10:22.320 --> 00:10:22.510
Right.

00:10:22.510 --> 00:10:25.510
I just want to talk a little
bit about triangles now.

00:10:25.510 --> 00:10:28.920
Down at the bottom here, you see
a Delaunay triangulation.

00:10:28.920 --> 00:10:31.580
So normal filters are things
that operate on pixels.

00:10:31.580 --> 00:10:33.920
So the basic filters we showed
at the start-- things like

00:10:33.920 --> 00:10:35.930
saturation and the color,
the monochrome--

00:10:35.930 --> 00:10:37.720
those are pixel operations.

00:10:37.720 --> 00:10:40.870
When you get into the world of
WebGL and shaders, you have

00:10:40.870 --> 00:10:41.910
two types of shaders.

00:10:41.910 --> 00:10:44.370
You have per pixel things, which
are also called fragment

00:10:44.370 --> 00:10:46.770
shaders, but you also
have vertex shaders.

00:10:46.770 --> 00:10:50.150
And what they do is basically
take an object or polygon,

00:10:50.150 --> 00:10:52.170
chop it up into triangles, and
then you can write the shader

00:10:52.170 --> 00:10:55.710
program which manipulates
these triangle points.

00:10:55.710 --> 00:10:58.810
The beauty of that is it all
runs on the GPU, and so in

00:10:58.810 --> 00:11:02.570
this case, we're going to
introduce WebGL and a proposal

00:11:02.570 --> 00:11:05.230
called CSS custom filters.

00:11:05.230 --> 00:11:08.040
So a lot of people are already
familiar with WebGL, and we're

00:11:08.040 --> 00:11:10.410
going to show you WebGL in a
moment with one of these

00:11:10.410 --> 00:11:11.460
experiences.

00:11:11.460 --> 00:11:14.830
But also, CSS custom filters
are slightly different.

00:11:14.830 --> 00:11:18.960
The difference with CSS custom
filters are basically that CSS

00:11:18.960 --> 00:11:22.580
custom filters operate on any
arbitrary web page content.

00:11:22.580 --> 00:11:26.145
So you can take a normal web
page and effectively flatten

00:11:26.145 --> 00:11:28.040
it to a plane, and then
manipulate it

00:11:28.040 --> 00:11:29.880
using a shader program.

00:11:29.880 --> 00:11:32.430
Now, why would you want to do
this rather than use WebGL is

00:11:32.430 --> 00:11:34.600
a question people
have asked me.

00:11:34.600 --> 00:11:35.950
Because it's really easy.

00:11:35.950 --> 00:11:38.220
Because WebGL actually takes
quite a lot of JavaScript to

00:11:38.220 --> 00:11:41.270
set up, and also WebGL has no
access to the DOM or any of

00:11:41.270 --> 00:11:43.060
the content on the page.

00:11:43.060 --> 00:11:45.180
The thing about using something
like a CSS custom

00:11:45.180 --> 00:11:47.860
filter is that you can take
advantage of the really good

00:11:47.860 --> 00:11:49.900
typography that's inside
the browser.

00:11:49.900 --> 00:11:52.450
So most browsers these days
rasterize with subpixel

00:11:52.450 --> 00:11:55.810
anti-aliasing, and that doesn't
happen in WebGL or

00:11:55.810 --> 00:11:57.140
Canvas, for that matter.

00:11:57.140 --> 00:11:59.060
So by using a custom filter,
you can actually take

00:11:59.060 --> 00:12:00.060
advantage of that.

00:12:00.060 --> 00:12:02.080
So if you can imagine this page
here with text and a bit

00:12:02.080 --> 00:12:05.920
of SVG graphic, what you would
do is you would basically draw

00:12:05.920 --> 00:12:08.750
a triangle mesh over the top
of it, and then you would

00:12:08.750 --> 00:12:10.410
write a write a shader program
which would manipulate your

00:12:10.410 --> 00:12:11.410
web content.

00:12:11.410 --> 00:12:13.960
And if you took this and did
that, you'd end up with

00:12:13.960 --> 00:12:18.340
something that looks a
little bit like this.

00:12:18.340 --> 00:12:20.100
So here is a CSS shader.

00:12:20.100 --> 00:12:22.270
This is actually rendered
by the browser and being

00:12:22.270 --> 00:12:25.930
manipulated, and so it's the
content that's moving around.

00:12:25.930 --> 00:12:29.250
So you can do things like page
flips or deformations or

00:12:29.250 --> 00:12:31.575
things like that, which is kind
of a really nice effect.

00:12:34.960 --> 00:12:37.440
So in any case, why don't we
actually have a look at this?

00:12:37.440 --> 00:12:40.470
I would like you to pay
close attention.

00:12:40.470 --> 00:12:44.690
So here we have The President,
and we wanted to have the

00:12:44.690 --> 00:12:49.740
experience where we actually
brought forward the sheer size

00:12:49.740 --> 00:12:50.520
of this tree.

00:12:50.520 --> 00:12:52.910
And when they built this thing,
it was like, how do you

00:12:52.910 --> 00:12:54.570
actually represent an image?

00:12:54.570 --> 00:12:56.500
Like, the thumbnail here, you
don't actually get a feel for

00:12:56.500 --> 00:12:57.710
how big it is.

00:12:57.710 --> 00:13:00.400
So pay close attention.

00:13:00.400 --> 00:13:00.950
Look at the start.

00:13:00.950 --> 00:13:03.390
I want you to observe
something, and watch

00:13:03.390 --> 00:13:04.640
the tree fly in.

00:13:09.470 --> 00:13:12.830
So what's happening here is
there is a gigantic image of

00:13:12.830 --> 00:13:15.390
the tree that's been sliced
up into tiles, and

00:13:15.390 --> 00:13:15.980
they're all flying in.

00:13:15.980 --> 00:13:17.010
This is all WebGL.

00:13:17.010 --> 00:13:20.140
And as it comes in, you see at
the bottom that there's a

00:13:20.140 --> 00:13:21.830
person right there.

00:13:21.830 --> 00:13:22.380
And there it is.

00:13:22.380 --> 00:13:24.360
So it kind of gives you
a feel of how big

00:13:24.360 --> 00:13:26.113
this actual tree is.

00:13:26.113 --> 00:13:32.040
[APPLAUSE]

00:13:32.040 --> 00:13:34.190
ALEX DANILO: And as you can
see, of course, there are

00:13:34.190 --> 00:13:35.800
people up here in this
tree somewhere.

00:13:35.800 --> 00:13:36.770
And it pans around
beautifully.

00:13:36.770 --> 00:13:37.085
Look at that.

00:13:37.085 --> 00:13:40.010
It's basically nice and smooth,
and this is all WebGL

00:13:40.010 --> 00:13:41.790
accelerated.

00:13:41.790 --> 00:13:44.880
Now, the astute people in the
audience may have noticed,

00:13:44.880 --> 00:13:47.190
right at the start of that tree
flying in, there was a

00:13:47.190 --> 00:13:49.430
little graphic that appeared
for a fraction of a second.

00:13:49.430 --> 00:13:51.720
And what was happening there is
that we were trying to get

00:13:51.720 --> 00:13:54.960
the texture from CPU memory
over into GPU memory.

00:13:54.960 --> 00:13:57.960
So the way this has been built
is by constructing a giant

00:13:57.960 --> 00:14:01.720
texture, slicing it up into
rectangles, and then

00:14:01.720 --> 00:14:04.140
referencing them from
the WebGL context.

00:14:04.140 --> 00:14:07.130
But of course, this is one huge
texture, and that takes

00:14:07.130 --> 00:14:09.510
time to get across
into GPU RAM.

00:14:09.510 --> 00:14:12.110
So that little spinning thing
that you saw just before the

00:14:12.110 --> 00:14:16.350
tree appeared was actually
referencing the WebGL texture

00:14:16.350 --> 00:14:18.910
in a 1 by 1 pixel kind
of reference.

00:14:18.910 --> 00:14:21.380
So that 1 by 1 pixel reference
was enough to pull the whole

00:14:21.380 --> 00:14:23.770
texture across so that when
the tree flew in, it was

00:14:23.770 --> 00:14:25.860
actually nice and fluid.

00:14:25.860 --> 00:14:27.720
It's kind of a nice,
neat little trick.

00:14:27.720 --> 00:14:30.240
Now the other thing is also here
that this is very similar

00:14:30.240 --> 00:14:31.000
to DOM spriting.

00:14:31.000 --> 00:14:34.380
So people who have done DOM
spriting, you typically load

00:14:34.380 --> 00:14:36.350
one big image, because you don't
want to have all these

00:14:36.350 --> 00:14:38.200
HTTP fetchers.

00:14:38.200 --> 00:14:40.340
So it's a very similar
technique, except this is done

00:14:40.340 --> 00:14:41.590
with WebGL and textures.

00:14:44.310 --> 00:14:49.170
OK, so on that note, I will let
Alexis take over and show

00:14:49.170 --> 00:14:50.590
you a little bit more about
this experience.

00:14:50.590 --> 00:14:52.380
Now, this was WebGL.

00:14:52.380 --> 00:14:54.520
A little bit later on in the
experience, he'll show you CSS

00:14:54.520 --> 00:14:56.790
custom filters in action
on some of the content.

00:14:56.790 --> 00:14:58.250
So over to you.

00:14:58.250 --> 00:14:59.500
ALEXIS DEVERIA: OK,
thanks, Alex.

00:15:01.660 --> 00:15:05.720
So I scroll down through the
article, and once again, we

00:15:05.720 --> 00:15:07.080
see another image.

00:15:07.080 --> 00:15:11.130
We changed the opacity filter
once we scrolled into view.

00:15:11.130 --> 00:15:13.360
Here, once again, we see
another CSS shape.

00:15:13.360 --> 00:15:17.050
As you can see, this time the
text follows the contour of

00:15:17.050 --> 00:15:19.310
the base of these trees here.

00:15:19.310 --> 00:15:22.670
Again, looks great as
part of the image.

00:15:22.670 --> 00:15:24.575
Very hard to do without
this technology.

00:15:28.840 --> 00:15:32.780
Scrolling down to the
end of the article,

00:15:32.780 --> 00:15:34.620
I get to this map.

00:15:34.620 --> 00:15:37.230
And there's a couple of things
I want to show you here.

00:15:37.230 --> 00:15:40.350
First of all, we see yet
another CSS shape.

00:15:40.350 --> 00:15:45.720
This time, we follow the shape
of the state of California.

00:15:45.720 --> 00:15:49.680
And as you can imagine, if you
try to do this today, you

00:15:49.680 --> 00:15:54.090
would have to either do this
using an image, or by

00:15:54.090 --> 00:15:56.500
hand-coding every single
line here.

00:15:56.500 --> 00:15:59.690
And you can imagine the
problems with that.

00:15:59.690 --> 00:16:02.370
I mean, anytime you need to make
a change, you'd have to

00:16:02.370 --> 00:16:04.360
actually go in and change
the text and

00:16:04.360 --> 00:16:06.050
redo the entire graphic.

00:16:06.050 --> 00:16:09.560
You wouldn't get the indexing
or searching that you get by

00:16:09.560 --> 00:16:13.470
all this just being text, so
that just makes it a very

00:16:13.470 --> 00:16:17.720
useful technology to have for
any kind of typographical

00:16:17.720 --> 00:16:20.090
effect like this.

00:16:20.090 --> 00:16:23.080
We also have here
an infographic.

00:16:23.080 --> 00:16:24.480
Click here.

00:16:24.480 --> 00:16:28.020
This is a SVG graphic that shows
you the elevation range

00:16:28.020 --> 00:16:29.220
of the sequoias.

00:16:29.220 --> 00:16:33.710
We use more exclusions
here for this text.

00:16:33.710 --> 00:16:37.320
And now, to show you our CSS
filter in action here, once I

00:16:37.320 --> 00:16:41.870
click on this button, you can
see the page peels away to

00:16:41.870 --> 00:16:44.000
reveal this other content.

00:16:44.000 --> 00:16:47.940
And let me actually go back
and show that again.

00:16:47.940 --> 00:16:53.110
So you can see this is all just
HTML and CSS content, and

00:16:53.110 --> 00:16:56.960
we use a custom shader or a
custom filter or a CSS shader

00:16:56.960 --> 00:16:57.900
to do that.

00:16:57.900 --> 00:17:00.050
So this brings another
infographic.

00:17:00.050 --> 00:17:02.280
Here we can see the tree.

00:17:02.280 --> 00:17:07.119
I can click on these different
parts of it to reveal the

00:17:07.119 --> 00:17:08.680
different sections.

00:17:08.680 --> 00:17:10.759
We did this using 2D Canvas.

00:17:15.670 --> 00:17:20.069
And so that about wraps it up
for the desktop browser

00:17:20.069 --> 00:17:21.410
experience.

00:17:21.410 --> 00:17:23.980
And I'd like to mention
that actually,

00:17:23.980 --> 00:17:24.940
anybody can see this.

00:17:24.940 --> 00:17:26.200
We have it on GitHub.

00:17:26.200 --> 00:17:27.960
We'll share the link of
this with you later.

00:17:27.960 --> 00:17:30.670
But when you do--

00:17:30.670 --> 00:17:32.150
let's go back to the top here.

00:17:32.150 --> 00:17:34.830
At the bottom here, there's
a bar that says

00:17:34.830 --> 00:17:36.510
show editor's marks.

00:17:36.510 --> 00:17:41.090
If you click on that, that shows
this annotated view that

00:17:41.090 --> 00:17:43.615
actually highlights the
different technologies that

00:17:43.615 --> 00:17:47.700
I've just been through, so you
can see for yourself how we

00:17:47.700 --> 00:17:49.570
designed this page.

00:17:54.652 --> 00:17:55.120
Great.

00:17:55.120 --> 00:17:56.350
Back to you, Alex.

00:17:56.350 --> 00:17:57.880
ALEX DANILO: Thanks, Alexis.

00:17:57.880 --> 00:18:01.090
All righty.

00:18:01.090 --> 00:18:03.010
Now of course, we told you
we're going to talk about

00:18:03.010 --> 00:18:06.080
mobile, because this stuff was
shown last week at [? Max, ?]

00:18:06.080 --> 00:18:06.940
which is great.

00:18:06.940 --> 00:18:08.600
But today, we're actually going
to show you this running

00:18:08.600 --> 00:18:11.470
on a mobile device, and it blows
your mind to see how far

00:18:11.470 --> 00:18:13.460
this has come, and how fast it
is, and how beautiful the

00:18:13.460 --> 00:18:14.440
experience is.

00:18:14.440 --> 00:18:16.660
But of course, when you're
building stuff for mobile,

00:18:16.660 --> 00:18:19.020
performance really
matters, right?

00:18:19.020 --> 00:18:20.150
So nothing comes for free.

00:18:20.150 --> 00:18:24.180
So the most important thing is
to test on many, many devices,

00:18:24.180 --> 00:18:26.610
especially your target device.

00:18:26.610 --> 00:18:28.920
Really think about how much
memory you're using, both for

00:18:28.920 --> 00:18:30.950
RAM and texture memory,
if you're using

00:18:30.950 --> 00:18:32.910
WebGL or custom filters.

00:18:32.910 --> 00:18:34.275
There are a couple of
sessions coming up.

00:18:34.275 --> 00:18:35.640
I highly recommend
you see them.

00:18:35.640 --> 00:18:38.660
There's a session directly after
this one in this room,

00:18:38.660 --> 00:18:41.080
which is web page design
with the GPU in mind.

00:18:41.080 --> 00:18:44.030
I highly recommend you listen to
that one and a few others.

00:18:44.030 --> 00:18:48.020
So while these guys were
building the mobile

00:18:48.020 --> 00:18:51.000
experience, it came to how would
you actually deploy this

00:18:51.000 --> 00:18:52.330
on mobile today?

00:18:52.330 --> 00:18:54.720
And of course you can just take
Chrome on your mobile

00:18:54.720 --> 00:18:57.030
device and point it at that
website that we've just shown

00:18:57.030 --> 00:18:58.680
you, and it works great.

00:18:58.680 --> 00:19:01.300
The thing is that for a next
generation reading experience,

00:19:01.300 --> 00:19:03.450
people are used to the
whole app model.

00:19:03.450 --> 00:19:07.160
Maybe we download an app, it
gives me my little icon that I

00:19:07.160 --> 00:19:09.300
can tap on, and it's a
self-contained thing.

00:19:09.300 --> 00:19:12.400
I don't have to type a URL
or anything like that.

00:19:12.400 --> 00:19:14.660
So it gives you a few options.

00:19:14.660 --> 00:19:16.530
So there are options, whether
you want to go completely

00:19:16.530 --> 00:19:19.070
native, or whether you want
to have just a website, or

00:19:19.070 --> 00:19:21.360
whether you go to some
kind of packaged web

00:19:21.360 --> 00:19:22.430
container like PhoneGap.

00:19:22.430 --> 00:19:24.950
And so this experience we're
about to show you was built

00:19:24.950 --> 00:19:25.760
using PhoneGap.

00:19:25.760 --> 00:19:28.290
It's an experimental build that
enables a whole lot of

00:19:28.290 --> 00:19:31.670
features that currently aren't
in browsers, but it does show

00:19:31.670 --> 00:19:34.580
you the capability, and
it's pretty cool.

00:19:34.580 --> 00:19:38.460
So why don't we take a little
bit of a look at the National

00:19:38.460 --> 00:19:42.920
Geographic experience
on the Nexus 10?

00:19:42.920 --> 00:19:44.540
ALEXIS DEVERIA: OK,
thanks, Alex.

00:19:44.540 --> 00:19:47.620
So, just for those of you
unfamiliar with PhoneGap,

00:19:47.620 --> 00:19:52.150
PhoneGap is a framework that
lets you create applications

00:19:52.150 --> 00:19:56.230
using web technologies on
different platforms.

00:19:56.230 --> 00:19:59.840
It also gives you access to the
APIs that you would not

00:19:59.840 --> 00:20:01.910
normally have access
to in the browser.

00:20:01.910 --> 00:20:05.670
So we used that to
create this.

00:20:05.670 --> 00:20:08.260
And so I'm going to
launch this app.

00:20:08.260 --> 00:20:12.000
As you can see when it
starts, we start with

00:20:12.000 --> 00:20:15.900
the same WebGL animation.

00:20:15.900 --> 00:20:19.390
As you can see, it's very
smooth, very slick, looks

00:20:19.390 --> 00:20:20.640
beautiful on the device.

00:20:23.880 --> 00:20:28.280
And once that completes, that
brings us to this table of

00:20:28.280 --> 00:20:30.140
contents view.

00:20:30.140 --> 00:20:34.485
So here, I can select
our article.

00:20:38.150 --> 00:20:44.480
And so for the application
experience, we wanted to do

00:20:44.480 --> 00:20:48.110
something other than just have
some vertically scrolling page

00:20:48.110 --> 00:20:50.910
as users expect on the web.

00:20:50.910 --> 00:20:56.300
So in this case, we've got a
paginated reading experience

00:20:56.300 --> 00:20:57.170
where I can scroll

00:20:57.170 --> 00:20:59.580
horizontally through the content.

00:20:59.580 --> 00:21:02.740
So here we see the same content
that we saw in the

00:21:02.740 --> 00:21:08.840
browser, so we have the same
exclusion here around the

00:21:08.840 --> 00:21:12.390
letter O. We also have some
interactive elements.

00:21:12.390 --> 00:21:16.400
Here, I can use multi-touch
to take this

00:21:16.400 --> 00:21:17.780
picture and enlarge it.

00:21:22.400 --> 00:21:25.680
And as you can see here, it
makes a lot of sense to also

00:21:25.680 --> 00:21:31.840
use regions to define each
container for the

00:21:31.840 --> 00:21:33.490
text to flow through.

00:21:33.490 --> 00:21:37.530
So that gave us a lot of freedom
exactly to define how

00:21:37.530 --> 00:21:39.820
we wanted the content to appear
without having to

00:21:39.820 --> 00:21:45.650
modify the text that was
actually in the paragraphs

00:21:45.650 --> 00:21:46.700
that make up the content.

00:21:46.700 --> 00:21:51.350
So see here, again, we have text
balancing regions, and

00:21:51.350 --> 00:21:56.720
this brings us to our first use
of a CSS shader on mobile.

00:21:56.720 --> 00:22:00.020
So what you can see here, once
I put two fingers on this

00:22:00.020 --> 00:22:04.750
image, we flip to show the
other part of the image.

00:22:04.750 --> 00:22:09.250
I can move my fingers around, I
can open and close, and if I

00:22:09.250 --> 00:22:12.780
open them up, that shows this
image in full screen.

00:22:16.230 --> 00:22:18.400
As you can see, when I scroll,
you can also see how the

00:22:18.400 --> 00:22:19.950
lighting changes.

00:22:19.950 --> 00:22:23.210
So that's all done
using the GPU.

00:22:23.210 --> 00:22:29.570
It's a beautifully smooth, high
frame rate experience.

00:22:29.570 --> 00:22:33.420
You move through the content,
and we see another beautiful

00:22:33.420 --> 00:22:37.410
image-- again, the CSS shapes
that we were seeing before on

00:22:37.410 --> 00:22:40.270
the web experience.

00:22:40.270 --> 00:22:42.680
And once again, here's
another image.

00:22:42.680 --> 00:22:47.385
If I tap on that, it flips out
to show the full screen.

00:22:50.820 --> 00:22:51.840
And this one, too.

00:22:51.840 --> 00:22:57.750
I can use the multi-touch
to open and close.

00:22:57.750 --> 00:23:01.250
And so that creates a great
experience for the users that

00:23:01.250 --> 00:23:05.730
you'd normally only see on
native applications, and we're

00:23:05.730 --> 00:23:07.880
very happy to be able to
bring this to the web.

00:23:11.000 --> 00:23:14.930
Here we see another map that
we also saw on the desktop.

00:23:14.930 --> 00:23:19.520
This one has the same page curl
that you saw, except this

00:23:19.520 --> 00:23:21.970
one does something a little bit
different where if I move

00:23:21.970 --> 00:23:28.370
my finger, you can actually
see how the page curls

00:23:28.370 --> 00:23:30.180
depending on the position
of my finger.

00:23:30.180 --> 00:23:33.850
As you can see, it runs great.

00:23:33.850 --> 00:23:36.580
I let go, and this reveals
a Google Map.

00:23:36.580 --> 00:23:39.220
Because since we're using web
technologies, it means that we

00:23:39.220 --> 00:23:43.220
can use APIs like the
Google Map API.

00:23:43.220 --> 00:23:46.510
And now I can actually zoom in
and see the location of the

00:23:46.510 --> 00:23:49.700
national park where
the sequoias grow.

00:23:55.720 --> 00:23:59.830
And after that, I get
to our last page.

00:23:59.830 --> 00:24:02.510
We see the same infographic
before.

00:24:02.510 --> 00:24:05.300
I can use multi-touch to
make this one bigger.

00:24:05.300 --> 00:24:08.590
And we see that in fullscreen.

00:24:08.590 --> 00:24:11.250
So that about summarizes
the mobile experience.

00:24:11.250 --> 00:24:15.010
There's one more thing I'd like
to show here, which you

00:24:15.010 --> 00:24:15.980
might find interesting.

00:24:15.980 --> 00:24:19.220
And just to prove that these are
indeed web technologies,

00:24:19.220 --> 00:24:25.010
what we can do here is we're
going to plug the tablet into

00:24:25.010 --> 00:24:30.170
this computer and run an ADB
command, which lets us

00:24:30.170 --> 00:24:32.790
communicate with the
Android device.

00:24:39.940 --> 00:24:43.670
So if I switch back
to desktop--

00:24:43.670 --> 00:24:45.930
ALEX DANILO: OK, so we're just
going here to another tab,

00:24:45.930 --> 00:24:50.582
which we're going to point
at a local host, with--

00:24:50.582 --> 00:24:54.420
and hopefully, we'll
see the page.

00:24:54.420 --> 00:24:58.740
So what we actually see here is
a reference to the content

00:24:58.740 --> 00:25:00.090
that's actually running
on the tablet.

00:25:00.090 --> 00:25:04.120
So this lets us pull up all the
Chrome Developer Tools and

00:25:04.120 --> 00:25:05.900
actually debug the experience.

00:25:05.900 --> 00:25:09.150
So this is the huge advantage
of taking this approach for

00:25:09.150 --> 00:25:10.450
mobile applications.

00:25:10.450 --> 00:25:13.090
Because it's built on web
technology, you have all the

00:25:13.090 --> 00:25:14.390
tools at your fingertips.

00:25:14.390 --> 00:25:17.210
You can debug the entire
experience, and you've seen

00:25:17.210 --> 00:25:19.940
the performance, so you get
a really native style

00:25:19.940 --> 00:25:22.870
performance built with web
technology, and you can debug

00:25:22.870 --> 00:25:23.600
it properly.

00:25:23.600 --> 00:25:25.880
Like, no more [INAUDIBLE]
adb logcat.

00:25:25.880 --> 00:25:28.110
You can actually use
proper tools.

00:25:28.110 --> 00:25:30.620
So why don't I just flip
back and forth?

00:25:30.620 --> 00:25:33.490
Alexis will highlight a few
elements in this, and we'll

00:25:33.490 --> 00:25:36.110
just prove to you this
is a real thing.

00:25:36.110 --> 00:25:38.080
ALEXIS DEVERIA: So this is
me turning on and off the

00:25:38.080 --> 00:25:43.250
shape-inside property
here, for example.

00:25:43.250 --> 00:25:44.240
ALEX DANILO: So here you go.

00:25:44.240 --> 00:25:47.210
He'll play with the shape-inside
property, and

00:25:47.210 --> 00:25:49.120
we'll watch it change
live on the device.

00:25:52.100 --> 00:25:54.970
Go back?

00:25:54.970 --> 00:25:56.485
ALEXIS DEVERIA: So that
was that right there.

00:26:00.360 --> 00:26:02.030
ALEX DANILO: So this is a huge
advantage of using web

00:26:02.030 --> 00:26:05.370
technologies for this
kind of application.

00:26:05.370 --> 00:26:07.470
It's a really, really
nice way to do it.

00:26:07.470 --> 00:26:08.720
Now, let's just--

00:26:12.040 --> 00:26:13.630
you have to wait for that one.

00:26:13.630 --> 00:26:16.050
OK, so what's next?

00:26:16.050 --> 00:26:17.530
The next level of CSS filters?

00:26:17.530 --> 00:26:20.330
I've shown you the basic filters
that are already

00:26:20.330 --> 00:26:22.730
there, the custom filters which
are in development at

00:26:22.730 --> 00:26:24.130
the moment.

00:26:24.130 --> 00:26:26.600
Another thing that is already
in the browsers today but is

00:26:26.600 --> 00:26:29.950
improving rapidly
are SVG filters.

00:26:29.950 --> 00:26:32.590
And the reason they're really
improving rapidly is because

00:26:32.590 --> 00:26:34.170
they've been thrown
at the GPU.

00:26:34.170 --> 00:26:36.310
So right now, in the channels
of Chrome, there's hardware

00:26:36.310 --> 00:26:38.950
accelerated SVG filters
coming.

00:26:38.950 --> 00:26:41.030
They're actually implemented
now.

00:26:41.030 --> 00:26:43.060
They're just not finished
completely yet.

00:26:43.060 --> 00:26:45.480
However, what this means is
you can take all those

00:26:45.480 --> 00:26:47.170
building blocks I showed you
at the beginning of the

00:26:47.170 --> 00:26:50.040
presentation, and you can chain
them together any way

00:26:50.040 --> 00:26:52.730
you like, and it all runs on
the GPU, which is just

00:26:52.730 --> 00:26:53.300
sensational.

00:26:53.300 --> 00:26:56.270
So if you can imagine this
picture at the bottom-- this

00:26:56.270 --> 00:26:59.360
beautiful, clear picture-- this
is in actual fact a movie

00:26:59.360 --> 00:27:00.750
with a displacement
filter on it.

00:27:00.750 --> 00:27:03.050
And how do you do that?

00:27:03.050 --> 00:27:04.690
You do it with something
like this.

00:27:04.690 --> 00:27:06.930
So the markup is very simple.

00:27:06.930 --> 00:27:09.900
So here's an element selector
for video, and it's applying

00:27:09.900 --> 00:27:11.340
the filter with a
URL reference.

00:27:11.340 --> 00:27:14.070
And you can see it
references an ID.

00:27:14.070 --> 00:27:16.280
So that's basically how you
apply it to your content.

00:27:16.280 --> 00:27:20.620
And then in the SVG, which I
expect people will share

00:27:20.620 --> 00:27:22.250
filters between each other,
there are two

00:27:22.250 --> 00:27:22.890
filters shown here.

00:27:22.890 --> 00:27:25.050
One is a convolution filter--

00:27:25.050 --> 00:27:27.740
so you can basically use an
arbitrary convolution matrix

00:27:27.740 --> 00:27:29.160
and apply it to your content.

00:27:29.160 --> 00:27:31.700
The second filter applies
a blur followed by a

00:27:31.700 --> 00:27:33.090
convolution.

00:27:33.090 --> 00:27:36.260
And this is all runs in the
browser, hardware accelerated,

00:27:36.260 --> 00:27:39.600
and I will prove it to you
by showing you this.

00:27:39.600 --> 00:27:42.170
Here is a nice little movie
with no filter on it.

00:27:42.170 --> 00:27:45.050
But of course, if we were to
put a blur on it, it would

00:27:45.050 --> 00:27:46.120
look something like this.

00:27:46.120 --> 00:27:47.960
So there you have it.

00:27:47.960 --> 00:27:50.270
Full speed video with
blur, hardware

00:27:50.270 --> 00:27:52.440
accelerated, in the GPU.

00:27:52.440 --> 00:27:55.560
But of course, SVG has a whole
lot of primitives, so here is

00:27:55.560 --> 00:27:56.680
a point light filter.

00:27:56.680 --> 00:27:59.870
And what's nice about this
is there's a little event

00:27:59.870 --> 00:28:02.070
listener on mouse move here,
which actually moves the

00:28:02.070 --> 00:28:04.410
position of the light.

00:28:04.410 --> 00:28:08.210
So this is all happening in your
favorite browser, or my

00:28:08.210 --> 00:28:10.550
favorite browser, anyway.

00:28:10.550 --> 00:28:11.435
So there's also a spotlight.

00:28:11.435 --> 00:28:13.680
There are a few different
lighting primitives in SVG

00:28:13.680 --> 00:28:15.580
which are really quite
nice to do all

00:28:15.580 --> 00:28:17.760
sorts of amazing effects.

00:28:17.760 --> 00:28:19.760
We have a morphology
filter, which--

00:28:19.760 --> 00:28:22.190
I don't know if it's applicable
to video, but

00:28:22.190 --> 00:28:23.260
anyway, it works.

00:28:23.260 --> 00:28:25.140
You can flip the colors around,
you can play with the

00:28:25.140 --> 00:28:28.630
color channels, and do all
sorts of crazy things.

00:28:28.630 --> 00:28:30.290
Now, here's the convolution
filter that I showed in the

00:28:30.290 --> 00:28:31.040
previous slide.

00:28:31.040 --> 00:28:33.830
So this is actually a
convolution matrix that is

00:28:33.830 --> 00:28:35.390
doing edge detection.

00:28:35.390 --> 00:28:38.320
And so it gives you this
kind of lineart thing.

00:28:38.320 --> 00:28:41.070
And if we actually use the
second filter on the previous

00:28:41.070 --> 00:28:43.365
slide, there's the blur followed
by the convolution.

00:28:43.365 --> 00:28:45.345
It gives you this kind
of result-- so a

00:28:45.345 --> 00:28:48.840
blurry lineart thing.

00:28:48.840 --> 00:28:51.390
All right, so we can do offset,
so you can basically

00:28:51.390 --> 00:28:52.220
offset your graphics.

00:28:52.220 --> 00:28:54.630
So you don't even need to use
relative positioning.

00:28:54.630 --> 00:28:56.300
You could actually do it
with a filter, if you

00:28:56.300 --> 00:28:57.890
really felt like it.

00:28:57.890 --> 00:29:01.190
Then, of course, we can play
with a retro feel.

00:29:01.190 --> 00:29:02.910
We can go to black and white.

00:29:02.910 --> 00:29:05.170
Actually, that's kind
of cool, isn't it?

00:29:05.170 --> 00:29:06.800
But you can do anything with
the color channels.

00:29:06.800 --> 00:29:07.470
That's the beauty of it.

00:29:07.470 --> 00:29:08.950
You can do all sorts of stuff.

00:29:08.950 --> 00:29:11.710
So we could do, like, a noir
effect, which is kind of a

00:29:11.710 --> 00:29:14.980
funky old style thing,
or do a bit of blue.

00:29:14.980 --> 00:29:18.280
So you can imagine that
you're in the ocean.

00:29:18.280 --> 00:29:20.510
And of course, we'll finish up
with the displacement filter.

00:29:20.510 --> 00:29:23.990
So the displacement filter is
a really useful one, and I

00:29:23.990 --> 00:29:26.030
can't wait for you guys to get
out there and start playing

00:29:26.030 --> 00:29:28.400
with this one and build all
sorts of crazy sites.

00:29:28.400 --> 00:29:30.670
So if you can imagine, when
you're on your desktop, and

00:29:30.670 --> 00:29:34.150
you've got Windows up, you
iconize it, and you see the

00:29:34.150 --> 00:29:36.020
rectangular thing
go woosh, like a

00:29:36.020 --> 00:29:37.510
genie back into a bottle.

00:29:37.510 --> 00:29:39.920
Well, the displacement filter
lets you do things like that.

00:29:39.920 --> 00:29:43.330
So in effect, it's a warp, but
what it does is it takes an

00:29:43.330 --> 00:29:46.690
input image and uses one of
the R or G or B color

00:29:46.690 --> 00:29:49.900
channels, and uses the value
in the pixel as an offset

00:29:49.900 --> 00:29:51.400
that's applied to the content.

00:29:51.400 --> 00:29:53.660
And so this is an example.

00:29:53.660 --> 00:29:54.800
Actually, we should probably
go further

00:29:54.800 --> 00:29:56.800
forward in the video.

00:29:56.800 --> 00:29:57.910
Why don't I go somewhere--
there.

00:29:57.910 --> 00:29:58.730
That's better.

00:29:58.730 --> 00:30:01.990
So you can actually see the
content is really crazily

00:30:01.990 --> 00:30:03.900
warped around with this
input image with the

00:30:03.900 --> 00:30:06.780
displacement filter.

00:30:06.780 --> 00:30:11.270
OK, so what I really want
everybody in this room to do

00:30:11.270 --> 00:30:14.020
is go to their favorite site
and put CSS filters on it,

00:30:14.020 --> 00:30:16.680
because you can do some
incredible stuff, and we're

00:30:16.680 --> 00:30:18.860
hardware accelerating the
whole lot of it now.

00:30:18.860 --> 00:30:21.650
And so it means that your site
just gives you another piece

00:30:21.650 --> 00:30:24.000
of creative sugar to put on
top of your sites and make

00:30:24.000 --> 00:30:25.960
them beautiful.

00:30:25.960 --> 00:30:28.510
Now, this National Geographic
experience, which we showed

00:30:28.510 --> 00:30:29.780
you today-- the whole thing
is open source.

00:30:29.780 --> 00:30:33.270
So if you go to the URL at the
top, you can actually get a

00:30:33.270 --> 00:30:35.520
hold of all the content, so you
can see how it was built,

00:30:35.520 --> 00:30:38.030
see everything, use
the content.

00:30:38.030 --> 00:30:40.770
The second link there is a link
to the actual experience

00:30:40.770 --> 00:30:42.540
itself, so you can view it.

00:30:42.540 --> 00:30:44.540
I'd encourage everyone to start
playing with the stuff,

00:30:44.540 --> 00:30:46.460
looking at it, seeing
what they can do.

00:30:46.460 --> 00:30:47.220
Your browser's there.

00:30:47.220 --> 00:30:50.430
You can debug it on mobile
if you really want to.

00:30:50.430 --> 00:30:54.210
And with that, I think we're
pretty much done.

00:30:54.210 --> 00:30:54.830
What do you think, Alexis?

00:30:54.830 --> 00:30:55.130
ALEXIS DEVERIA: That's right.

00:30:55.130 --> 00:31:02.540
[APPLAUSE]

00:31:02.540 --> 00:31:03.540
ALEX DANILO: Thank you.

00:31:03.540 --> 00:31:05.320
OK, we've got plenty of
time for questions.

00:31:05.320 --> 00:31:06.220
So, do we have any--

00:31:06.220 --> 00:31:06.810
ALEXIS DEVERIA: One
other point.

00:31:06.810 --> 00:31:07.250
ALEX DANILO: Oh, yes.

00:31:07.250 --> 00:31:08.890
One other thing.

00:31:08.890 --> 00:31:11.320
We'll be up at the Chrome
Sandbox right after this talk,

00:31:11.320 --> 00:31:13.780
so if anybody has further
questions they don't want to

00:31:13.780 --> 00:31:15.530
ask now, come and visit us.

00:31:15.530 --> 00:31:18.220
And also, on level three at
the Adobe Sandbox, they're

00:31:18.220 --> 00:31:19.600
actually showing this
on the Nexus 10.

00:31:19.600 --> 00:31:21.670
So you can get your own fingers
on it, play with the

00:31:21.670 --> 00:31:23.550
mobile experience, and
see for yourselves.

00:31:23.550 --> 00:31:25.670
So anyway, questions.

00:31:25.670 --> 00:31:27.710
AUDIENCE: I got here late, so
I'm not sure if you already

00:31:27.710 --> 00:31:29.230
addressed it, but I
was wondering--

00:31:29.230 --> 00:31:33.830
I realized it's mostly taking
place on the GPU, but how is

00:31:33.830 --> 00:31:36.835
battery consumption with
all that animation?

00:31:36.835 --> 00:31:39.670
ALEX DANILO: Well, in fact,
battery consumption is reduced

00:31:39.670 --> 00:31:41.040
when you throw it on the GPU.

00:31:41.040 --> 00:31:45.260
So typically, the GPU uses a lot
less battery power to any

00:31:45.260 --> 00:31:46.340
of these kind of effects.

00:31:46.340 --> 00:31:48.230
So it's pretty cheap,
actually.

00:31:48.230 --> 00:31:50.560
AUDIENCE: But do you know what
the percent reduction is?

00:31:50.560 --> 00:31:52.860
Because I know that playing
video on a phone would be a

00:31:52.860 --> 00:31:55.500
lot of battery consumption.

00:31:55.500 --> 00:31:57.640
ALEX DANILO: Playing it on the
phone, I think you'll probably

00:31:57.640 --> 00:32:00.490
find a lot of battery
consumption is actually the

00:32:00.490 --> 00:32:03.320
radio being on and pulling the
content across, more than the

00:32:03.320 --> 00:32:04.113
GPU itself.

00:32:04.113 --> 00:32:04.880
AUDIENCE: OK.

00:32:04.880 --> 00:32:06.130
Thank you.

00:32:08.630 --> 00:32:09.950
ALEX DANILO: Yes?

00:32:09.950 --> 00:32:11.720
AUDIENCE: Is there any way to
determine how much texture

00:32:11.720 --> 00:32:14.380
memory the device that you're
on has for the WebGL stuff?

00:32:14.380 --> 00:32:17.420
Because I saw the image for
the tree was pretty large.

00:32:17.420 --> 00:32:19.720
Do you ever hit a maximum where
it just stops working,

00:32:19.720 --> 00:32:21.420
or it crashes?

00:32:21.420 --> 00:32:22.690
ALEX DANILO: That's why I
said test, test, test.

00:32:22.690 --> 00:32:25.250
We are actually looking at ways
to measure GPU memory.

00:32:25.250 --> 00:32:27.810
This has been asked quite a
number of times from a lot of

00:32:27.810 --> 00:32:30.450
mobile developers, and we don't
have a good answer for

00:32:30.450 --> 00:32:31.290
that just yet.

00:32:31.290 --> 00:32:33.620
But come to the next session,
and I'm sure they'll tell you

00:32:33.620 --> 00:32:35.230
all sorts of cool tricks.

00:32:35.230 --> 00:32:36.990
AUDIENCE: Cool, thanks.

00:32:36.990 --> 00:32:39.780
AUDIENCE: I have been playing
with CSS filters, and I've

00:32:39.780 --> 00:32:42.640
been surprised a few times
when some things are

00:32:42.640 --> 00:32:44.920
accelerated, and other
things aren't.

00:32:44.920 --> 00:32:47.240
Is there a rule of thumb that I
can follow that will help me

00:32:47.240 --> 00:32:50.602
decide whether or not this is
going to be GPU accelerated?

00:32:50.602 --> 00:32:51.600
ALEX DANILO: I don't know
that there's any

00:32:51.600 --> 00:32:53.120
clear rule of thumb.

00:32:53.120 --> 00:32:55.900
We accelerate all of them in
Chrome now, and I know that

00:32:55.900 --> 00:32:57.860
Mozilla have just rearchitected
the whole back

00:32:57.860 --> 00:32:59.810
end of their rendering pipeline,
and they'll be

00:32:59.810 --> 00:33:02.110
accelerating all
those as well.

00:33:02.110 --> 00:33:05.820
In general, if you're scared,
just don't use blur, because

00:33:05.820 --> 00:33:07.460
blur is the only one
that really hurts

00:33:07.460 --> 00:33:08.890
you in software rendering.

00:33:08.890 --> 00:33:11.530
The rest of the filters
are pretty good.

00:33:11.530 --> 00:33:14.380
Or if you really want to use
blur, because it's useful,

00:33:14.380 --> 00:33:17.665
make sure you keep the blur
small, because it's square.

00:33:17.665 --> 00:33:19.110
Like, it's an order n-squared.

00:33:19.110 --> 00:33:22.900
So if you do a 2 pixel blur or
a 4 pixel blur, the 4 pixel

00:33:22.900 --> 00:33:25.300
blur is 4 times the
2 pixel blur in

00:33:25.300 --> 00:33:27.800
terms of cost of rendering.

00:33:27.800 --> 00:33:30.590
AUDIENCE: Got it, thanks.

00:33:30.590 --> 00:33:31.070
ALEX DANILO: John?

00:33:31.070 --> 00:33:34.380
AUDIENCE: So what are the
requirements on mobile, in

00:33:34.380 --> 00:33:35.510
terms of WebKit?

00:33:35.510 --> 00:33:38.370
And can you talk a bit about
what you've actually

00:33:38.370 --> 00:33:41.870
contributed to PhoneGap
to make it all work?

00:33:41.870 --> 00:33:43.620
ALEX DANILO: In which respect?

00:33:43.620 --> 00:33:44.980
AUDIENCE: Actually, I"ll
ask a simpler question.

00:33:44.980 --> 00:33:47.660
What version of Android
is the minimum to run

00:33:47.660 --> 00:33:48.770
something like this on?

00:33:48.770 --> 00:33:49.880
ALEX DANILO: Well,
PhoneGap person--

00:33:49.880 --> 00:33:50.870
Alexis, can you tell
us, what's the

00:33:50.870 --> 00:33:54.480
minimum Android for PhoneGap?

00:33:54.480 --> 00:33:58.270
ALEXIS DEVERIA: I think the
basic PhoneGap should just run

00:33:58.270 --> 00:34:03.870
on, I believe, most Android
versions, including 2.x.

00:34:03.870 --> 00:34:07.580
But what we did here today that
we actually used this

00:34:07.580 --> 00:34:11.455
custom version of PhoneGap to
make this possible, so we

00:34:11.455 --> 00:34:13.889
could have the hardware
acceleration working as

00:34:13.889 --> 00:34:15.460
swiftly as possible.

00:34:15.460 --> 00:34:17.380
AUDIENCE: So does that need a
custom version of WebKit?

00:34:17.380 --> 00:34:19.170
Or are you using [INAUDIBLE]?

00:34:19.170 --> 00:34:22.600
ALEXIS DEVERIA: It's both a
custom version of PhoneGap and

00:34:22.600 --> 00:34:25.896
a custom version
of WebKit, yes.

00:34:25.896 --> 00:34:27.699
AUDIENCE: Can we get
that version?

00:34:27.699 --> 00:34:28.624
ALEXIS DEVERIA: Not yet.

00:34:28.624 --> 00:34:30.630
ALEX DANILO: The question was,
can you get that version?

00:34:30.630 --> 00:34:33.739
ALEXIS DEVERIA: So it's just a
very prototyped stage, so we

00:34:33.739 --> 00:34:37.390
hope eventually the code that
Adobe's been working on-- we

00:34:37.390 --> 00:34:40.590
hope that that might get into
Blink or WebKit eventually,

00:34:40.590 --> 00:34:43.174
but don't quite know
for sure, no.

00:34:43.174 --> 00:34:46.493
AUDIENCE: Was there any
timeline [INAUDIBLE]?

00:34:46.493 --> 00:34:46.836
ALEXIS DEVERIA: No.

00:34:46.836 --> 00:34:48.521
No time known yet.

00:34:51.748 --> 00:34:53.219
ALEX DANILO: Sir?

00:34:53.219 --> 00:34:55.510
AUDIENCE: So you mentioned
subpixel rendering and then

00:34:55.510 --> 00:34:57.240
applying filters, which
seems weird to me.

00:34:57.240 --> 00:35:00.390
Because once you've subpixeled
it, if you filter it, it no

00:35:00.390 --> 00:35:01.720
longer hits the subpixels.

00:35:01.720 --> 00:35:04.120
ALEX DANILO: Well, what I was
saying was that you could do

00:35:04.120 --> 00:35:07.070
the subpixel rendering, but
then you can do a vertex

00:35:07.070 --> 00:35:09.280
shader, which will manipulate
the content.

00:35:09.280 --> 00:35:12.960
So there's something like the
page flip, for example--

00:35:12.960 --> 00:35:14.730
the filter is only moving
the content around.

00:35:14.730 --> 00:35:15.050
AUDIENCE: Oh, I see.

00:35:15.050 --> 00:35:16.225
So not when it's static.

00:35:16.225 --> 00:35:16.530
ALEX DANILO: Yeah.

00:35:16.530 --> 00:35:19.300
So you still get the nice,
clean typography, so the

00:35:19.300 --> 00:35:21.940
filter's not actually messing
with how it looks.

00:35:21.940 --> 00:35:23.730
AUDIENCE: But you presumably
get sparkle when

00:35:23.730 --> 00:35:24.600
you do that, then?

00:35:24.600 --> 00:35:26.370
Because the subpixel?

00:35:26.370 --> 00:35:29.090
ALEX DANILO: Oh, well, the
subpixel rendering is there,

00:35:29.090 --> 00:35:32.170
right, so that as the page is
flipping, you don't suddenly

00:35:32.170 --> 00:35:35.670
see a flip from nice typography
to blocky gray

00:35:35.670 --> 00:35:38.090
anti-alias as the page
flips, right?

00:35:38.090 --> 00:35:38.850
So it stays nice.

00:35:38.850 --> 00:35:40.130
Do you understand?

00:35:40.130 --> 00:35:40.580
AUDIENCE: OK.

00:35:40.580 --> 00:35:40.840
Yep.

00:35:40.840 --> 00:35:41.720
Makes sense.

00:35:41.720 --> 00:35:44.210
Cool.

00:35:44.210 --> 00:35:45.205
ALEX DANILO: All right.

00:35:45.205 --> 00:35:45.520
AUDIENCE: Hey.

00:35:45.520 --> 00:35:48.670
I'm just wondering if you can
say anything about the

00:35:48.670 --> 00:35:51.830
designer experience of doing
a site like the National

00:35:51.830 --> 00:35:52.730
Geographic one.

00:35:52.730 --> 00:35:54.910
Did you have to design custom
tools, or was it done in a

00:35:54.910 --> 00:35:57.020
text editor for some of these
special effects, or how did

00:35:57.020 --> 00:35:59.260
you set that up?

00:35:59.260 --> 00:36:02.745
ALEXIS DEVERIA: So are
you just talking

00:36:02.745 --> 00:36:04.100
about the custom filters?

00:36:04.100 --> 00:36:06.520
AUDIENCE: Well, perhaps you
guys designed the pages

00:36:06.520 --> 00:36:08.820
yourselves, but I'm wondering
if maybe a regular graphic

00:36:08.820 --> 00:36:10.700
designer came in as well,
and [INAUDIBLE]

00:36:10.700 --> 00:36:11.630
visual layout tool.

00:36:11.630 --> 00:36:16.090
ALEXIS DEVERIA: No, it was
all designed by Adobe.

00:36:16.090 --> 00:36:18.560
National Geographic gave us
content, and gave us a little

00:36:18.560 --> 00:36:21.220
bit of idea of what kind of
layout they had in mind.

00:36:21.220 --> 00:36:26.325
But the whole design process and
implementation was done by

00:36:26.325 --> 00:36:28.590
us Adobe guys.

00:36:28.590 --> 00:36:33.390
And so the CSS filter
that we used--

00:36:33.390 --> 00:36:36.155
the one on the web
is actually--

00:36:36.155 --> 00:36:38.790
if you go to CSS Filter Lab, if
you just Google CSS Filter

00:36:38.790 --> 00:36:43.110
Lab, you can see a whole bunch
of filters that we actually

00:36:43.110 --> 00:36:46.305
developed at Adobe, and so the
page curl one is one of those,

00:36:46.305 --> 00:36:48.250
and that's what we
included there.

00:36:48.250 --> 00:36:50.990
So does that answer
your question?

00:36:50.990 --> 00:36:51.660
AUDIENCE: I guess so.

00:36:51.660 --> 00:36:56.550
I guess I'm just trying to think
about it in terms of, to

00:36:56.550 --> 00:37:00.880
address somebody who's not a
programmer, but who might want

00:37:00.880 --> 00:37:04.520
to say, oh, I really would like
to have this page pinch

00:37:04.520 --> 00:37:06.755
open right here, but I don't
know how to do that.

00:37:06.755 --> 00:37:08.560
ALEXIS DEVERIA: Well, because
this is still in very early

00:37:08.560 --> 00:37:12.960
stages, there's not a lot
of tooling for it yet.

00:37:12.960 --> 00:37:16.270
The spec is still
being developed.

00:37:16.270 --> 00:37:19.970
But I can promise you that Adobe
specifically will make

00:37:19.970 --> 00:37:23.020
sure that this will become
easier for developers.

00:37:23.020 --> 00:37:24.370
ALEX DANILO: I think you need
to follow the Adobe Web

00:37:24.370 --> 00:37:27.460
Platform blog, because they're
developing a ton of tools.

00:37:27.460 --> 00:37:30.406
They've got a whole suite of
tools, and more and more are

00:37:30.406 --> 00:37:30.820
being developed.

00:37:30.820 --> 00:37:34.310
So we're showing you leading
edge stuff that's still active

00:37:34.310 --> 00:37:36.300
in browser development and
standards development.

00:37:36.300 --> 00:37:39.340
And so once they're locked down,
they'll be producing

00:37:39.340 --> 00:37:40.710
tools for this stuff for sure.

00:37:40.710 --> 00:37:41.650
AUDIENCE: Oh, cool.

00:37:41.650 --> 00:37:43.870
Thank you very much.

00:37:43.870 --> 00:37:44.420
ALEX DANILO: Yes, sir.

00:37:44.420 --> 00:37:48.380
AUDIENCE: So my question
pertains to availability and

00:37:48.380 --> 00:37:49.370
compatibility.

00:37:49.370 --> 00:37:53.020
So I just gave the website that
you were demoing a try on

00:37:53.020 --> 00:38:00.640
Chrome 28 on my Pixel, and it
said I needed to turn on

00:38:00.640 --> 00:38:02.580
Experimental WebKit features.

00:38:02.580 --> 00:38:04.380
And I did, and it runs great,
and that's awesome.

00:38:04.380 --> 00:38:07.910
But do you happen to know the
timeline on when that will be

00:38:07.910 --> 00:38:10.550
in the general Chrome release?

00:38:10.550 --> 00:38:11.810
ALEX DANILO: Very
good question.

00:38:11.810 --> 00:38:14.040
I think that this is one of
those open ended questions,

00:38:14.040 --> 00:38:16.990
because some of the features,
like the simple filters and

00:38:16.990 --> 00:38:18.850
the SVG filters, all
work currently.

00:38:18.850 --> 00:38:19.820
They're all standardized.

00:38:19.820 --> 00:38:22.660
The custom filters and some of
that stuff, and the regions

00:38:22.660 --> 00:38:24.550
and exclusions are currently
going through the

00:38:24.550 --> 00:38:27.230
standardization process
in W3C.

00:38:27.230 --> 00:38:30.510
And so that's a kind of
open ended thing.

00:38:30.510 --> 00:38:32.450
I can't give you an answer
of exactly when.

00:38:32.450 --> 00:38:34.280
Hopefully soon.

00:38:34.280 --> 00:38:36.940
But for now, this is basically
an example of where the

00:38:36.940 --> 00:38:39.130
technology is being developed
in parallel to

00:38:39.130 --> 00:38:42.660
standardization, so that when
we go to the W3C and other

00:38:42.660 --> 00:38:44.700
browser vendors, you can
go, look, here's an

00:38:44.700 --> 00:38:45.055
implementation.

00:38:45.055 --> 00:38:46.640
It works, it's cool.

00:38:46.640 --> 00:38:49.230
And then everybody can argue
out the fine detail of how

00:38:49.230 --> 00:38:50.810
that will finish up.

00:38:50.810 --> 00:38:51.230
AUDIENCE: All right.

00:38:51.230 --> 00:38:51.890
Thank you very much.

00:38:51.890 --> 00:38:52.362
ALEX DANILO: Yep.

00:38:52.362 --> 00:38:53.780
Welcome.

00:38:53.780 --> 00:38:54.590
John, another question.

00:38:54.590 --> 00:38:55.430
AUDIENCE: My second question.

00:38:55.430 --> 00:38:58.270
I'm actually excited
about this.

00:38:58.270 --> 00:39:00.800
One of the issues I've had with
mobile web is having to

00:39:00.800 --> 00:39:02.480
deal with different
versions of WebKit

00:39:02.480 --> 00:39:04.550
on different platforms.

00:39:04.550 --> 00:39:10.080
So are your contributions to
Cordova, does that mean I can

00:39:10.080 --> 00:39:12.290
pick a version of WebKit
and deploy that?

00:39:12.290 --> 00:39:15.250
ALEXIS DEVERIA: No, for Cordova,
you're stuck with the

00:39:15.250 --> 00:39:17.255
WebKit that is on the device.

00:39:21.260 --> 00:39:23.570
I believe there's talk of
possibly changing that in the

00:39:23.570 --> 00:39:27.480
future, but that's the
way it is now.

00:39:27.480 --> 00:39:29.610
AUDIENCE: So my first question,
then-- doesn't that

00:39:29.610 --> 00:39:33.640
mean there'll be minimum
requirements for the mobile OS

00:39:33.640 --> 00:39:36.780
for me to use these features?

00:39:36.780 --> 00:39:39.001
ALEXIS DEVERIA: Yes,
that's correct.

00:39:39.001 --> 00:39:40.100
AUDIENCE: OK, thanks.

00:39:40.100 --> 00:39:42.979
I'm less excited.

00:39:42.979 --> 00:39:44.428
ALEX DANILO: Get excited, John.

00:39:44.428 --> 00:39:44.911
It's good.

00:39:44.911 --> 00:39:45.880
OK, yes sir.

00:39:45.880 --> 00:39:47.370
AUDIENCE: On mobile,
I understand

00:39:47.370 --> 00:39:48.770
that test, test, test.

00:39:48.770 --> 00:39:52.040
But I wonder if amongst the
different mobile graphics

00:39:52.040 --> 00:39:54.730
accelerators, you've noticed
that certain of these

00:39:54.730 --> 00:39:58.480
operations perhaps tend to work
well, and others maybe

00:39:58.480 --> 00:40:00.210
not so much?

00:40:00.210 --> 00:40:01.890
ALEX DANILO: Yes,
very good point.

00:40:01.890 --> 00:40:04.800
One of the things about the
mobile GPU to keep in mind--

00:40:04.800 --> 00:40:07.510
I mean, the next session will
dive deep into this stuff.

00:40:07.510 --> 00:40:11.140
But the technique of rendering
on a mobile GPU is completely

00:40:11.140 --> 00:40:12.480
different to a desktop.

00:40:12.480 --> 00:40:15.900
So on a desktop GPU, you
basically have a ton of

00:40:15.900 --> 00:40:19.182
parallel execution units, and so
your rendering goes blot in

00:40:19.182 --> 00:40:22.340
a huge wide thing, and happens
instantaneously.

00:40:22.340 --> 00:40:23.720
And it's brute force.

00:40:23.720 --> 00:40:25.420
Whereas on a mobile device,
because you want to keep the

00:40:25.420 --> 00:40:28.330
silicon small, they use this
kind of deferred rendering

00:40:28.330 --> 00:40:30.710
technique where they buffer up
all the things that are going

00:40:30.710 --> 00:40:33.120
to be drawn, and kind of build
display lists and a stack of

00:40:33.120 --> 00:40:35.530
stuff, and try to then eliminate
the things they

00:40:35.530 --> 00:40:37.230
don't need to draw,
and then draw it.

00:40:37.230 --> 00:40:39.260
So because of that, you actually
end up using a whole

00:40:39.260 --> 00:40:40.900
lot of memory in the process.

00:40:40.900 --> 00:40:44.010
But one little tip that's really
useful when doing this

00:40:44.010 --> 00:40:46.730
stuff for mobile is to try and
keep the pieces of your

00:40:46.730 --> 00:40:48.030
content small.

00:40:48.030 --> 00:40:51.570
So, for example, if you're doing
a long list, like an

00:40:51.570 --> 00:40:54.390
infinite list style of thing,
and you have a long, thin

00:40:54.390 --> 00:40:58.280
strip like this, if you go
put a translate-z hack or

00:40:58.280 --> 00:41:01.820
something like that to force
it into the GPU layer, the

00:41:01.820 --> 00:41:03.810
problem with doing that is that

00:41:03.810 --> 00:41:05.580
textures have to be square.

00:41:05.580 --> 00:41:07.420
So if you've got a long, thin
strip like this, maybe it

00:41:07.420 --> 00:41:10.200
consumes a megabyte, but
your square texture

00:41:10.200 --> 00:41:11.840
could be 100 megabytes.

00:41:11.840 --> 00:41:13.920
And so you've blown out
all your GPU memory.

00:41:13.920 --> 00:41:16.460
And I've seen really janky sites
where people have done

00:41:16.460 --> 00:41:20.730
this, and then simply by
changing the CSS selector to

00:41:20.730 --> 00:41:23.600
put that transform on the
little pieces of content

00:41:23.600 --> 00:41:26.020
within the strip, you would
think that would cost more

00:41:26.020 --> 00:41:29.040
time, because of all the
extra CSS [INAUDIBLE]

00:41:29.040 --> 00:41:29.820
recalculation.

00:41:29.820 --> 00:41:32.950
But in actual fact, what happens
is the tiles end up

00:41:32.950 --> 00:41:35.706
these little tiny tiles that
then go over to the GPU, and

00:41:35.706 --> 00:41:36.920
the thing flies.

00:41:36.920 --> 00:41:39.730
So as a general rule of thumb,
try and keep content that's

00:41:39.730 --> 00:41:40.590
accelerated small.

00:41:40.590 --> 00:41:44.520
And especially with the WebGL
tree, you saw it was all

00:41:44.520 --> 00:41:47.110
chopped into little squares
or little rectangles.

00:41:47.110 --> 00:41:48.890
That was a similar
kind of idea.

00:41:53.280 --> 00:41:56.980
AUDIENCE: So following up on
that, with the WebGL 3, you

00:41:56.980 --> 00:42:01.260
mentioned how difficult it is to
get the texture to the GPU,

00:42:01.260 --> 00:42:05.230
and that you put a little
spinner in there to make it a

00:42:05.230 --> 00:42:08.540
better user experience.

00:42:08.540 --> 00:42:11.880
Would you have this problem
with GPU accelerated CSS

00:42:11.880 --> 00:42:14.050
filters, or even
custom filters?

00:42:14.050 --> 00:42:16.380
And what can you do about it?

00:42:16.380 --> 00:42:21.550
Is there a lag due to the
texture going through the GPU

00:42:21.550 --> 00:42:24.510
when you use those pre-built
filters?

00:42:24.510 --> 00:42:25.930
ALEX DANILO: You would have that
problem with the custom

00:42:25.930 --> 00:42:27.310
filters, because it's
the same issue.

00:42:27.310 --> 00:42:29.710
You have to get the texture
of the rendered content.

00:42:29.710 --> 00:42:32.710
So effectively, your browser is
laying out, rendering, and

00:42:32.710 --> 00:42:35.790
then it's creating a bitmap,
which it then passes across to

00:42:35.790 --> 00:42:38.910
the GPU for it to
use a texture.

00:42:38.910 --> 00:42:41.960
So you will have that problem
for those filters.

00:42:41.960 --> 00:42:46.420
For the SVG filters, not
so much, because--

00:42:46.420 --> 00:42:47.906
well, I suppose you would.

00:42:47.906 --> 00:42:49.320
I guess it depends
on your content.

00:42:49.320 --> 00:42:51.260
But if you're playing video,
for example, where I showed

00:42:51.260 --> 00:42:54.570
the SVG accelerated filters
on the video, the video is

00:42:54.570 --> 00:42:56.270
already on the GPU.

00:42:56.270 --> 00:43:00.365
So that bitmap of the video is
never seen on the CPU side.

00:43:00.365 --> 00:43:02.190
It's decoded in hardware.

00:43:02.190 --> 00:43:05.740
That's sitting in the GPU
memory, and then when the SVG

00:43:05.740 --> 00:43:07.740
filter is applied, it's
all happening as a

00:43:07.740 --> 00:43:09.150
texture in GPU memory.

00:43:09.150 --> 00:43:11.200
So there's never a
read back to CPU.

00:43:11.200 --> 00:43:12.870
So you don't get the same

00:43:12.870 --> 00:43:15.470
flip-flop of textures happening.

00:43:15.470 --> 00:43:17.740
AUDIENCE: And so if you have
the issue with CSS custom

00:43:17.740 --> 00:43:21.440
filters, is there anything you
can do for displaying a

00:43:21.440 --> 00:43:24.450
spinner, for instance?

00:43:24.450 --> 00:43:26.250
ALEX DANILO: Probably
lots of things.

00:43:26.250 --> 00:43:27.950
Well, similar to displaying
the spinner.

00:43:27.950 --> 00:43:30.810
But I think that you probably
find that would just be an

00:43:30.810 --> 00:43:34.040
initial load, because if the
custom filter is sitting

00:43:34.040 --> 00:43:36.800
there, the browser already knows
it needs to put it in

00:43:36.800 --> 00:43:37.230
the texture.

00:43:37.230 --> 00:43:39.530
So the moment you see
it, it's ready to go

00:43:39.530 --> 00:43:41.020
to do its flip effect.

00:43:41.020 --> 00:43:42.940
It's just how quickly
that loads.

00:43:42.940 --> 00:43:46.080
I think in the actual National
Geographic one, because the

00:43:46.080 --> 00:43:48.400
custom shader was down the
bottom, the custom filter was

00:43:48.400 --> 00:43:51.040
right at the bottom of the page,
that was just loading in

00:43:51.040 --> 00:43:53.960
the background while you're
viewing the top.

00:43:53.960 --> 00:43:55.870
So your standard techniques--

00:43:55.870 --> 00:43:59.650
show something to the user as
the fancy content is loading

00:43:59.650 --> 00:44:01.490
in the background.

00:44:01.490 --> 00:44:02.250
AUDIENCE: OK, thanks.

00:44:02.250 --> 00:44:04.590
ALEX DANILO: OK.

00:44:04.590 --> 00:44:05.746
Yes?

00:44:05.746 --> 00:44:09.210
AUDIENCE: Are you tracking fine
grain abilities of what

00:44:09.210 --> 00:44:10.700
works on Can I Use for these?

00:44:10.700 --> 00:44:12.400
Which filters are on
which platforms?

00:44:15.470 --> 00:44:17.550
ALEXIS DEVERIA: Hopefully
filters is a feature

00:44:17.550 --> 00:44:19.560
that's on Can I Use.

00:44:19.560 --> 00:44:24.280
I think it's just basic filters
right now, but as that

00:44:24.280 --> 00:44:26.640
gets more complicated, then
I'll definitely add more

00:44:26.640 --> 00:44:30.070
subfeatures or whatever.

00:44:30.070 --> 00:44:31.450
ALEX DANILO: Yeah?

00:44:31.450 --> 00:44:33.100
AUDIENCE: So I don't know
whether this is just Moscone

00:44:33.100 --> 00:44:36.990
Wi-Fi being Moscone Wi-Fi, but
the website that you guys were

00:44:36.990 --> 00:44:39.350
using-- the GitHub
site to demo the

00:44:39.350 --> 00:44:41.580
National Geographic thing--

00:44:41.580 --> 00:44:42.490
stopped working.

00:44:42.490 --> 00:44:44.660
I refreshed the page, and it
says it can't connect to that.

00:44:44.660 --> 00:44:46.230
Do you know if that's a
connection problem, or is that

00:44:46.230 --> 00:44:47.010
being moved somewhere?

00:44:47.010 --> 00:44:48.460
ALEX DANILO: I think it's
a connection problem.

00:44:48.460 --> 00:44:51.616
So this is actually the page.

00:44:51.616 --> 00:44:52.550
AUDIENCE: OK.

00:44:52.550 --> 00:44:54.710
ALEX DANILO: I'll try
and reload it.

00:44:54.710 --> 00:44:56.420
Oh, then again, maybe
it's Moscone Wi-Fi.

00:44:56.420 --> 00:44:57.600
AUDIENCE: OK, thank you.

00:44:57.600 --> 00:45:01.450
ALEX DANILO: This is actually
a wired connection, so yes.

00:45:01.450 --> 00:45:01.850
AUDIENCE: Thank you.

00:45:01.850 --> 00:45:02.910
ALEX DANILO: Looks like the
network is down, folks.

00:45:02.910 --> 00:45:05.930
Sorry about that.

00:45:05.930 --> 00:45:07.610
OK, in that case, no
more questions?

00:45:07.610 --> 00:45:09.070
And anyone quick, one
last question?

00:45:09.070 --> 00:45:09.750
No one brave?

00:45:09.750 --> 00:45:11.270
All right, thanks, everyone,
for coming to this session.

00:45:11.270 --> 00:45:14.063
[APPLAUSE]

