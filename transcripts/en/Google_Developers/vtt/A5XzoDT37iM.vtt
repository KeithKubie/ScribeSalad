WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.916
[MUSIC PLAYING]

00:00:06.330 --> 00:00:09.330
ROB DODSON: Thank you
all for coming out today.

00:00:09.330 --> 00:00:12.390
Quickly, before I
start, I just want

00:00:12.390 --> 00:00:14.970
to point out that today is
Global Accessibility Awareness

00:00:14.970 --> 00:00:16.050
Day, May 18th.

00:00:16.050 --> 00:00:19.380
So thank you all for
coming out today.

00:00:19.380 --> 00:00:22.680
And if you want to use the #GAAD
hashtag as you are tweeting

00:00:22.680 --> 00:00:25.530
and things like that, that
would be very awesome.

00:00:25.530 --> 00:00:26.860
So yeah, my name is Rob Dodson.

00:00:26.860 --> 00:00:28.925
I'm a developer advocate
on the Chrome team,

00:00:28.925 --> 00:00:30.300
and today I'm
going to be talking

00:00:30.300 --> 00:00:33.550
about accessibility for teams.

00:00:33.550 --> 00:00:36.980
So this talk came about
because, I guess kind of

00:00:36.980 --> 00:00:38.620
at the beginning
of the quarter, I

00:00:38.620 --> 00:00:39.870
had a partner reach out to me.

00:00:39.870 --> 00:00:41.880
And they were like,
hey, Rob, our team

00:00:41.880 --> 00:00:43.950
is getting started
with accessibility

00:00:43.950 --> 00:00:46.980
and kind of wondering if I
had any material to help them

00:00:46.980 --> 00:00:48.519
get ramped up and get started.

00:00:48.519 --> 00:00:49.810
And I was like, oh, yeah, sure.

00:00:49.810 --> 00:00:52.685
And I sent them an email
with a front-end developer

00:00:52.685 --> 00:00:54.810
course that I put together
with a teammate of mine.

00:00:54.810 --> 00:00:58.410
And I sent them some automated
build tools and things

00:00:58.410 --> 00:00:59.017
like that.

00:00:59.017 --> 00:01:00.600
And they followed
up a few days later,

00:01:00.600 --> 00:01:02.975
and they were like, hey,
thanks, that was really helpful,

00:01:02.975 --> 00:01:05.190
but like, what about
your designers?

00:01:05.190 --> 00:01:07.200
And what about your
project managers

00:01:07.200 --> 00:01:08.859
and everybody else on the team?

00:01:08.859 --> 00:01:10.400
Do you have them
just do this course,

00:01:10.400 --> 00:01:12.930
or how are you teaching
the rest of the folks

00:01:12.930 --> 00:01:15.290
about accessibility?

00:01:15.290 --> 00:01:18.270
And it made me stop for a second
and realize that, oftentimes,

00:01:18.270 --> 00:01:19.895
when we're talking
about accessibility,

00:01:19.895 --> 00:01:22.290
it's easy to get really
laser-focused on one

00:01:22.290 --> 00:01:24.727
particular discipline or another
and only talk about, hey,

00:01:24.727 --> 00:01:26.560
here's what developers
need to know, or hey,

00:01:26.560 --> 00:01:28.610
here's what designers
need to know.

00:01:28.610 --> 00:01:31.470
But really, accessibility
is a team effort.

00:01:31.470 --> 00:01:34.830
No one person is responsible
for the overall design

00:01:34.830 --> 00:01:37.230
and experience and
implementation for a site.

00:01:37.230 --> 00:01:39.880
And accessibility touches
all of these things.

00:01:39.880 --> 00:01:42.300
So every person on
the team has some role

00:01:42.300 --> 00:01:45.960
to play in the process
of making the experience

00:01:45.960 --> 00:01:49.442
accessible and usable by
as many folks as possible.

00:01:49.442 --> 00:01:51.150
And so what I wanted
to do today was just

00:01:51.150 --> 00:01:54.900
go through three of the key
stakeholders in the creation

00:01:54.900 --> 00:01:57.630
of a project and discuss
some of the action items

00:01:57.630 --> 00:02:00.000
that I think each of
these folks can undertake

00:02:00.000 --> 00:02:01.770
and incorporate
into their process

00:02:01.770 --> 00:02:05.480
to make sure that accessibility
is a top line item for them.

00:02:05.480 --> 00:02:07.865
It's always on their
radar as they're working.

00:02:07.865 --> 00:02:09.990
So I want to start off by
talking about the project

00:02:09.990 --> 00:02:11.160
manager role.

00:02:11.160 --> 00:02:14.250
And I think the overriding
goal for a project

00:02:14.250 --> 00:02:16.710
manager in any project is
just to kind of make sure

00:02:16.710 --> 00:02:18.960
that accessibility
is incorporated

00:02:18.960 --> 00:02:24.840
into the major milestones
as folks are staging builds,

00:02:24.840 --> 00:02:26.700
as designers are showing
comps, and as we're

00:02:26.700 --> 00:02:29.081
moving through the process
of shipping our product,

00:02:29.081 --> 00:02:30.580
that we're always
thinking about it,

00:02:30.580 --> 00:02:32.955
that it's always on our radar,
and we're asking ourselves

00:02:32.955 --> 00:02:35.460
things like, where
can we be improving?

00:02:35.460 --> 00:02:37.620
How do we avoid regressing
and things like that?

00:02:37.620 --> 00:02:39.203
How do we check where
we currently are

00:02:39.203 --> 00:02:41.610
and how well we're doing?

00:02:41.610 --> 00:02:43.980
And so I wanted to come
up with a few key items

00:02:43.980 --> 00:02:45.840
that I think the
project manager needs

00:02:45.840 --> 00:02:49.330
to keep in mind as they're
working through their process.

00:02:49.330 --> 00:02:51.930
So I'm going to go through
each of these in more detail.

00:02:51.930 --> 00:02:54.030
But from a high
level, as a PM, I'd

00:02:54.030 --> 00:02:56.550
want to make sure that my
team is receiving training,

00:02:56.550 --> 00:02:58.170
that I'm identifying
the critical user

00:02:58.170 --> 00:03:00.300
journeys in my app,
I'm incorporating

00:03:00.300 --> 00:03:03.340
some sort of accessibility
checklist into our process,

00:03:03.340 --> 00:03:05.340
and I'm evaluating the
product with user studies

00:03:05.340 --> 00:03:07.040
if I have that opportunity.

00:03:07.040 --> 00:03:09.180
So let's dive into these
in more detail, starting

00:03:09.180 --> 00:03:11.471
with that first one-- making
sure everyone on your team

00:03:11.471 --> 00:03:12.930
receives training.

00:03:12.930 --> 00:03:15.090
Now, I have done
projects before where

00:03:15.090 --> 00:03:18.330
I have been the quote-unquote
"accessibility owner," meaning

00:03:18.330 --> 00:03:21.820
I was the only person
who had been trained

00:03:21.820 --> 00:03:24.024
or was versed in it at all.

00:03:24.024 --> 00:03:25.440
And that's a really
tough position

00:03:25.440 --> 00:03:27.940
to be in, because when you're
the only person working on it,

00:03:27.940 --> 00:03:30.420
you kind of have to keep
an eye on everybody, right?

00:03:30.420 --> 00:03:31.760
And it's very, very
difficult, because it's

00:03:31.760 --> 00:03:33.210
going to often feel like
the whole team is sort

00:03:33.210 --> 00:03:36.030
of racing ahead, implementing
features and shipping stuff,

00:03:36.030 --> 00:03:38.820
and you're just trying to
run behind them and throw

00:03:38.820 --> 00:03:41.779
some fixes over their shoulder
and hope that some things land.

00:03:41.779 --> 00:03:44.070
So I think it's good to have
an accessibility champion,

00:03:44.070 --> 00:03:45.450
or someone who's
driving that work.

00:03:45.450 --> 00:03:47.575
But I also think it's really
important to make sure

00:03:47.575 --> 00:03:50.550
that everyone on the team has
some training in this area

00:03:50.550 --> 00:03:52.790
and has some
fundamentals established.

00:03:52.790 --> 00:03:54.600
To give you an
analogy, we would never

00:03:54.600 --> 00:03:56.433
say, hey, everybody on
the team, you can all

00:03:56.433 --> 00:03:59.740
write whatever code you want,
and Lisa will make it run fast.

00:03:59.740 --> 00:04:00.240
Right?

00:04:00.240 --> 00:04:02.400
We would never treat,
like, performance that way,

00:04:02.400 --> 00:04:04.483
but oftentimes we do treat
accessibility that way.

00:04:04.483 --> 00:04:06.780
It's just that one person's job.

00:04:06.780 --> 00:04:09.354
And it doesn't really
work well that way.

00:04:09.354 --> 00:04:10.770
So there's a lot
of free resources

00:04:10.770 --> 00:04:13.530
out there for training your
team up on accessibility.

00:04:13.530 --> 00:04:15.330
Myself and a teammate
named Alice Boxhall,

00:04:15.330 --> 00:04:17.230
we put together
a Udacity course.

00:04:17.230 --> 00:04:20.459
So this is a free
online multi-week course

00:04:20.459 --> 00:04:22.680
to get any front-end
developer up and running.

00:04:22.680 --> 00:04:27.270
We cover topics like focus,
built-in semantics, ARIA,

00:04:27.270 --> 00:04:29.880
accessible styling
with CSS, a little bit

00:04:29.880 --> 00:04:32.927
of tooling and testing in there.

00:04:32.927 --> 00:04:35.010
We also have taken all of
this material and put it

00:04:35.010 --> 00:04:38.940
on developers.google.com/web
in written format,

00:04:38.940 --> 00:04:41.700
so if you prefer something
you can search around,

00:04:41.700 --> 00:04:42.960
this is a live doc set.

00:04:42.960 --> 00:04:44.020
We're always updating it.

00:04:44.020 --> 00:04:48.420
So we also have new guides that
we publish up there as well.

00:04:48.420 --> 00:04:51.720
And for your designers, we've
also got the Material Design

00:04:51.720 --> 00:04:52.829
Accessibility Guidelines.

00:04:52.829 --> 00:04:54.870
I really like this document,
because it has a lot

00:04:54.870 --> 00:04:59.520
of examples of dos and don'ts
and suggestions on how you can

00:04:59.520 --> 00:05:03.579
improve the accessibility from
a visual standpoint in your app.

00:05:03.579 --> 00:05:06.120
So that's just some resources
that you can give to your team.

00:05:06.120 --> 00:05:07.620
And what I would
encourage you to do

00:05:07.620 --> 00:05:10.620
is make sure that your team
has time during the work week

00:05:10.620 --> 00:05:11.590
to learn this, right?

00:05:11.590 --> 00:05:12.600
Don't just send them
off and be like,

00:05:12.600 --> 00:05:14.279
hey, learn this
on your free time.

00:05:14.279 --> 00:05:16.320
Carve out some time at
the beginning of a project

00:05:16.320 --> 00:05:20.334
to go through this training, and
make sure everyone's on board.

00:05:20.334 --> 00:05:21.750
The next thing I
would suggest is,

00:05:21.750 --> 00:05:24.810
as you're starting off your
app, identify the critical user

00:05:24.810 --> 00:05:26.920
journeys in your experience.

00:05:26.920 --> 00:05:28.920
So this is going to
help you kind of scope

00:05:28.920 --> 00:05:30.910
the work ahead, right?

00:05:30.910 --> 00:05:33.780
And to give you an example,
a critical or a primary user

00:05:33.780 --> 00:05:36.120
journey is going to be
something like a basic task

00:05:36.120 --> 00:05:38.610
that every user is going
to have to perform in order

00:05:38.610 --> 00:05:39.450
to use your app.

00:05:39.450 --> 00:05:42.030
Sort of a critical
thing, like if you're

00:05:42.030 --> 00:05:44.970
building an e-commerce
site, that the user can add

00:05:44.970 --> 00:05:46.290
an item to their shopping cart.

00:05:46.290 --> 00:05:48.873
That's something everybody's got
to do it in order to even use

00:05:48.873 --> 00:05:50.010
the experience, right?

00:05:50.010 --> 00:05:53.010
So you want to identify
these primary user journeys.

00:05:53.010 --> 00:05:55.620
And you can also identify your
secondary user journeys, things

00:05:55.620 --> 00:05:58.770
that might be infrequently
performed by everyday users,

00:05:58.770 --> 00:06:01.170
stuff that maybe only power
users are going to do,

00:06:01.170 --> 00:06:04.080
like being able to change your
avatar in the Settings menu

00:06:04.080 --> 00:06:06.240
or something like that.

00:06:06.240 --> 00:06:09.360
Once you have these primary and
secondary user journeys figured

00:06:09.360 --> 00:06:13.465
out, then you can actually start
to incorporate an accessibility

00:06:13.465 --> 00:06:15.840
checklist-- and I'll actually
show a few examples of this

00:06:15.840 --> 00:06:17.270
in a second--

00:06:17.270 --> 00:06:20.340
and start to kind of like us
see how your user journeys apply

00:06:20.340 --> 00:06:21.334
to that checklist.

00:06:21.334 --> 00:06:23.250
So the nice thing about
putting in a checklist

00:06:23.250 --> 00:06:25.110
is if you're retrofitting
accessibility

00:06:25.110 --> 00:06:27.930
onto a current site, using
a checklist will allow

00:06:27.930 --> 00:06:30.370
you to sort of audit
where you currently are,

00:06:30.370 --> 00:06:32.380
triage what work
needs to be done.

00:06:32.380 --> 00:06:33.870
If you're starting
a new project,

00:06:33.870 --> 00:06:35.745
then you can incorporate
that checklist early

00:06:35.745 --> 00:06:37.749
into your process and
make sure, as you're

00:06:37.749 --> 00:06:39.540
going through milestones,
that you're doing

00:06:39.540 --> 00:06:41.960
reviews against that checklist.

00:06:41.960 --> 00:06:43.680
So some example
checklists-- there

00:06:43.680 --> 00:06:50.250
is a wedding checklist for
WCAG 2.0 A. This is primarily

00:06:50.250 --> 00:06:52.920
geared towards web
developers, but it's

00:06:52.920 --> 00:06:55.406
a really nice distillation
of the WCAG guidelines

00:06:55.406 --> 00:06:56.530
in an easy-to-follow guide.

00:06:56.530 --> 00:07:00.090
You can just go through and
check those off real fast.

00:07:00.090 --> 00:07:02.340
If you prefer something
that's split up by discipline,

00:07:02.340 --> 00:07:05.800
the folks at Vox Media have also
produced a similar checklist.

00:07:05.800 --> 00:07:07.860
So this one, it's bucketed
by the different roles

00:07:07.860 --> 00:07:08.490
on the team.

00:07:08.490 --> 00:07:10.323
So here's what your
designer would be doing,

00:07:10.323 --> 00:07:12.390
here's what your QA
staff would be doing,

00:07:12.390 --> 00:07:15.566
here's what your editorial
folks will be doing.

00:07:15.566 --> 00:07:17.940
Either one of these is a great
choice for self-assessment

00:07:17.940 --> 00:07:18.520
of your project.

00:07:18.520 --> 00:07:19.728
There's other ones out there.

00:07:19.728 --> 00:07:21.690
If you just Google
"accessibility checklist,"

00:07:21.690 --> 00:07:23.040
there's a number of them.

00:07:23.040 --> 00:07:24.540
I would suggest,
just find whichever

00:07:24.540 --> 00:07:27.330
one fits your work style best.

00:07:27.330 --> 00:07:29.490
And then once you've
got that checklist,

00:07:29.490 --> 00:07:32.280
you can start to apply
it to those user journeys

00:07:32.280 --> 00:07:33.840
that you've identified.

00:07:33.840 --> 00:07:35.934
So by identifying
these user journeys,

00:07:35.934 --> 00:07:37.350
applying the
checklist to them, we

00:07:37.350 --> 00:07:39.480
can start to get
really, really tactical

00:07:39.480 --> 00:07:41.071
about our accessibility work.

00:07:41.071 --> 00:07:43.320
So something that I've seen
teams do before is they'll

00:07:43.320 --> 00:07:44.960
actually build a matrix.

00:07:44.960 --> 00:07:47.080
And they'll have their
primary use cases as rows,

00:07:47.080 --> 00:07:49.230
and their secondary
use cases as rows,

00:07:49.230 --> 00:07:51.510
and then those checklist
items as columns.

00:07:51.510 --> 00:07:52.864
So primary user journey--

00:07:52.864 --> 00:07:54.780
a user can add an item
to their shopping cart.

00:07:54.780 --> 00:07:56.660
OK, there's a lot of
steps involved there.

00:07:56.660 --> 00:07:58.410
For all of those steps
along that journey,

00:07:58.410 --> 00:08:00.900
can we assert that we
have good color contrast,

00:08:00.900 --> 00:08:03.822
that our controls are
labeled, and so on and so on?

00:08:03.822 --> 00:08:06.030
And so this way, you can be
really tactical about it.

00:08:06.030 --> 00:08:07.946
You can actually start
to give yourself goals.

00:08:07.946 --> 00:08:10.890
You can say, all
right, by Q2 of 2017,

00:08:10.890 --> 00:08:13.260
all of our basic
accessibility checks

00:08:13.260 --> 00:08:16.354
will pass for primary user
journeys, and things like that.

00:08:16.354 --> 00:08:18.270
So you actually score
your work and figure out

00:08:18.270 --> 00:08:22.980
if you're making progress
or if you're regressing.

00:08:22.980 --> 00:08:25.051
And I would encourage
you to don't just

00:08:25.051 --> 00:08:27.300
do this checklist once at
the beginning of the project

00:08:27.300 --> 00:08:28.476
and forget about it.

00:08:28.476 --> 00:08:29.850
Make sure you're
incorporating it

00:08:29.850 --> 00:08:31.840
into all the major milestones.

00:08:31.840 --> 00:08:34.980
So when you're seeing builds
from your developers or designs

00:08:34.980 --> 00:08:37.679
from your designer, run through
that checklist with your QA

00:08:37.679 --> 00:08:40.890
team and say, all right,
cool, did we make progress?

00:08:40.890 --> 00:08:42.276
Did we regress?

00:08:42.276 --> 00:08:43.650
Do we need to
improve some things

00:08:43.650 --> 00:08:45.582
before we launch this build?

00:08:45.582 --> 00:08:49.489
And that'll help you stay on
top of your overall progress.

00:08:49.489 --> 00:08:51.780
And then finally, I would
say, if you're retrofitting--

00:08:51.780 --> 00:08:54.270
or, sorry, if you have
the opportunity to,

00:08:54.270 --> 00:08:57.600
incorporate some user
studies into your process.

00:08:57.600 --> 00:09:00.900
Sit down with folks who maybe
use assistive technology.

00:09:00.900 --> 00:09:03.480
If you're retrofitting
accessibility onto an existing

00:09:03.480 --> 00:09:06.119
project, this will help you
identify some critical pain

00:09:06.119 --> 00:09:07.410
points for some of those users.

00:09:07.410 --> 00:09:09.052
If you're starting
a new project,

00:09:09.052 --> 00:09:11.260
then it's good because you
can start doing these user

00:09:11.260 --> 00:09:13.230
journeys early with
your prototypes,

00:09:13.230 --> 00:09:15.690
and you're going to
avoid having to redo work

00:09:15.690 --> 00:09:18.330
later down the line when someone
actually uses it and says,

00:09:18.330 --> 00:09:22.807
oh, maybe this thing doesn't
work as well as we think.

00:09:22.807 --> 00:09:24.390
I think it's entirely
possible to make

00:09:24.390 --> 00:09:27.900
something that is technically
accessible, but not very

00:09:27.900 --> 00:09:28.990
usable.

00:09:28.990 --> 00:09:31.680
And so sitting down and doing
some actual user journeys

00:09:31.680 --> 00:09:34.170
will help you identify
those situations.

00:09:34.170 --> 00:09:36.707
And that way, you can
catch those problems early,

00:09:36.707 --> 00:09:38.790
and you don't have to avoid
redoing that work over

00:09:38.790 --> 00:09:40.698
and over.

00:09:40.698 --> 00:09:42.269
So yeah, these are
the top-line items

00:09:42.269 --> 00:09:44.310
that I would encourage
every project manager just

00:09:44.310 --> 00:09:46.170
to have in their back
pocket as they're

00:09:46.170 --> 00:09:48.390
thinking about how they can
incorporate accessibility

00:09:48.390 --> 00:09:51.480
into their process a bit more.

00:09:51.480 --> 00:09:54.780
Moving on, I want to talk
about the UX designer.

00:09:54.780 --> 00:09:56.340
So I think that the
challenge for UX

00:09:56.340 --> 00:10:02.550
is that we tend to design
using our own biases.

00:10:02.550 --> 00:10:05.400
And so if you don't have a
disability or impairment,

00:10:05.400 --> 00:10:07.920
you don't have a colleague with
a disability or impairment,

00:10:07.920 --> 00:10:09.294
then it's easy to
forget that you

00:10:09.294 --> 00:10:12.000
might be designing in a bubble.

00:10:12.000 --> 00:10:14.370
And so you want to ask
yourself, as you're designing,

00:10:14.370 --> 00:10:16.620
who is my design excluding?

00:10:16.620 --> 00:10:20.310
And work through creating
different personas--

00:10:20.310 --> 00:10:22.530
folks who would see and
experience the world

00:10:22.530 --> 00:10:24.016
differently from you--

00:10:24.016 --> 00:10:25.890
and try and figure out,
how would these users

00:10:25.890 --> 00:10:28.210
engage with my experience?

00:10:28.210 --> 00:10:32.220
It's also important to remember
that our bodies are not static.

00:10:32.220 --> 00:10:34.200
We're constantly
changing all the time.

00:10:34.200 --> 00:10:36.570
As we age, we may
develop disabilities

00:10:36.570 --> 00:10:40.202
related to vision,
hearing, range of motion.

00:10:40.202 --> 00:10:42.210
I saw a stat recently
that said, by 2050,

00:10:42.210 --> 00:10:46.100
around two billion people
will be over the age of 60.

00:10:46.100 --> 00:10:47.490
And I'm going to
imagine, they're

00:10:47.490 --> 00:10:48.810
going to want to still
use the internet,

00:10:48.810 --> 00:10:50.601
and they're going to
still use their phones

00:10:50.601 --> 00:10:52.950
and whatever devices
we're using in 2050,

00:10:52.950 --> 00:10:55.722
but vision, range of motion
might not be what it is today.

00:10:55.722 --> 00:10:57.180
So keep in mind
that we're changing

00:10:57.180 --> 00:11:01.050
for the constant evolving
and changing human body

00:11:01.050 --> 00:11:03.220
and human experience.

00:11:03.220 --> 00:11:05.160
And also understand
that our context is also

00:11:05.160 --> 00:11:06.120
always changing.

00:11:06.120 --> 00:11:07.650
We take our computers
with us now.

00:11:07.650 --> 00:11:08.910
They're in our pocket.

00:11:08.910 --> 00:11:12.270
And so we're not always using
them in ideal scenarios.

00:11:12.270 --> 00:11:14.910
You might be using your phone
outside on a very bright

00:11:14.910 --> 00:11:17.310
sunny day like today, and you
might have a difficult time

00:11:17.310 --> 00:11:18.690
reading that screen.

00:11:18.690 --> 00:11:22.890
It might be useful for it to
have some additional contrast.

00:11:22.890 --> 00:11:25.920
So there are many reasons why
you might be situationally

00:11:25.920 --> 00:11:27.750
or temporarily impaired.

00:11:27.750 --> 00:11:29.990
And when we incorporate
that into our design process

00:11:29.990 --> 00:11:32.310
and we design
inclusively, we end up

00:11:32.310 --> 00:11:36.619
making a more satisfying
experience for many more users.

00:11:36.619 --> 00:11:38.910
So these are the key items
that I would want a designer

00:11:38.910 --> 00:11:41.940
to keep in mind as they are
going through their process--

00:11:41.940 --> 00:11:44.079
making sure that they've
got good color contrast,

00:11:44.079 --> 00:11:46.620
that tab order is identified--
and we'll talk about what that

00:11:46.620 --> 00:11:48.300
means in just a sec--

00:11:48.300 --> 00:11:50.460
that their controls
have good labels,

00:11:50.460 --> 00:11:53.519
and that you've got multiple
ways to interact with your UI.

00:11:53.519 --> 00:11:55.560
So let's dive into these
in more detail, starting

00:11:55.560 --> 00:11:58.450
with color contrast,
because this is a big one.

00:11:58.450 --> 00:12:00.930
I see a lot of sites
struggling with this.

00:12:00.930 --> 00:12:03.360
So the way that we
measure contrast

00:12:03.360 --> 00:12:04.702
is in terms of luminance.

00:12:04.702 --> 00:12:06.660
We're doing a comparison
between the foreground

00:12:06.660 --> 00:12:08.490
and the background color.

00:12:08.490 --> 00:12:10.860
And at a minimum, we
want a contrast ratio

00:12:10.860 --> 00:12:13.975
of about 4.5 to 1
for smaller text.

00:12:13.975 --> 00:12:17.310
So this is text that's smaller
than 14 point bold or smaller

00:12:17.310 --> 00:12:19.300
than 18 point.

00:12:19.300 --> 00:12:21.180
And for any text
that's above that,

00:12:21.180 --> 00:12:23.610
we can go to our
contrast ratio of 3 to 1.

00:12:23.610 --> 00:12:25.854
So I've got some examples here.

00:12:25.854 --> 00:12:27.270
Over there on the
right-hand side,

00:12:27.270 --> 00:12:29.100
you see some larger
text at the top

00:12:29.100 --> 00:12:32.040
that satisfies that larger
contrast ratio, some smaller

00:12:32.040 --> 00:12:33.025
text below that.

00:12:33.025 --> 00:12:34.900
And then next to it,
you see some fields here

00:12:34.900 --> 00:12:38.490
which aren't quite satisfying
that minimum ratio.

00:12:38.490 --> 00:12:39.990
And even for folks
in this room, I'm

00:12:39.990 --> 00:12:41.865
imagining that these
other fields, over here,

00:12:41.865 --> 00:12:43.729
are a little difficult
to read, right?

00:12:43.729 --> 00:12:45.270
And so there's a
number of good tools

00:12:45.270 --> 00:12:48.540
that we can use, as we're
doing our design process,

00:12:48.540 --> 00:12:52.480
to make sure we are nailing
those contrast ratios.

00:12:52.480 --> 00:12:55.170
So material design team have
made a very nice color palette

00:12:55.170 --> 00:12:56.030
tool.

00:12:56.030 --> 00:12:57.990
You can go through, you
can pick some colors.

00:12:57.990 --> 00:13:00.340
It'll actually lay them out
a little bit in your design.

00:13:00.340 --> 00:13:01.756
But what I think
is really awesome

00:13:01.756 --> 00:13:05.160
is this accessibility
tab, which will show you

00:13:05.160 --> 00:13:07.500
when it's safe to use
either light text or dark

00:13:07.500 --> 00:13:09.422
text on that background color.

00:13:09.422 --> 00:13:11.130
It'll throw little
warning signals at you

00:13:11.130 --> 00:13:14.160
to indicate, hey, you
maybe can't use dark text

00:13:14.160 --> 00:13:15.465
on this particular background.

00:13:15.465 --> 00:13:18.360
And it'll also indicate
minimum opacity levels

00:13:18.360 --> 00:13:21.630
that are safe for your text
and that satisfy those contrast

00:13:21.630 --> 00:13:22.189
requirements.

00:13:22.189 --> 00:13:24.480
And you can also go in and
drop in your own hex values,

00:13:24.480 --> 00:13:26.010
as well.

00:13:26.010 --> 00:13:27.660
Another tool that
I use all the time

00:13:27.660 --> 00:13:29.790
is this contrast ratio
tool by Lea Verou.

00:13:29.790 --> 00:13:33.220
This is great for doing quick
spot checks in your app.

00:13:33.220 --> 00:13:35.880
You just drop a background
color in, a foreground color,

00:13:35.880 --> 00:13:37.770
and it'll tell you
the contrast ratio.

00:13:37.770 --> 00:13:40.557
So you can very quickly identify
whether you're on the bubble,

00:13:40.557 --> 00:13:43.140
maybe you just need to tweak it
a little bit, or if things are

00:13:43.140 --> 00:13:45.306
way off and you've got to
go back and really address

00:13:45.306 --> 00:13:47.132
your color palette.

00:13:47.132 --> 00:13:48.840
Once you've get your
colors squared away,

00:13:48.840 --> 00:13:51.420
the next thing is to
tackle your tab order.

00:13:51.420 --> 00:13:52.800
So what do I mean by that?

00:13:52.800 --> 00:13:55.470
So your tab order is the
order in which elements

00:13:55.470 --> 00:13:58.650
are going to receive focus as
the user's pressing the Tab

00:13:58.650 --> 00:14:00.480
key on their keyboard.

00:14:00.480 --> 00:14:03.180
And ideally, your
tab order should

00:14:03.180 --> 00:14:06.487
be flowing from the top of
the page down to the bottom,

00:14:06.487 --> 00:14:08.070
starting in the top
left, flowing down

00:14:08.070 --> 00:14:09.510
on the bottom right.

00:14:09.510 --> 00:14:12.780
And we want it to follow the
visual layout of the page.

00:14:12.780 --> 00:14:15.570
And it's also nice if our
more important elements can

00:14:15.570 --> 00:14:17.790
be higher up in the tab order.

00:14:17.790 --> 00:14:20.210
So someone using a keyboard
primarily to navigate had

00:14:20.210 --> 00:14:21.550
s more efficient experience.

00:14:21.550 --> 00:14:22.980
They don't have to tab
through a million things

00:14:22.980 --> 00:14:24.570
to get down to the
important controls,

00:14:24.570 --> 00:14:28.060
like, add this item
to my shopping cart.

00:14:28.060 --> 00:14:30.060
Something to note here
is-- so this is something

00:14:30.060 --> 00:14:32.520
that a UX designer can
sit down that can actually

00:14:32.520 --> 00:14:34.980
indicate all of the
interactive controls in a comp.

00:14:34.980 --> 00:14:36.480
They can number
them to say, this

00:14:36.480 --> 00:14:38.438
is the order and the
sequence that these things

00:14:38.438 --> 00:14:40.140
should be focusable.

00:14:40.140 --> 00:14:42.510
In general, you only
want interactive controls

00:14:42.510 --> 00:14:43.800
to be part of your tab order.

00:14:43.800 --> 00:14:47.490
You don't need to focus images
or headers or text, or anything

00:14:47.490 --> 00:14:49.360
like that, just
stuff that a user

00:14:49.360 --> 00:14:52.140
is going to interact with,
provide input to, something

00:14:52.140 --> 00:14:54.600
like that.

00:14:54.600 --> 00:14:56.644
And you can hand that
off to your developer

00:14:56.644 --> 00:14:58.060
and make sure they
implement that.

00:14:58.060 --> 00:15:00.670
Now, there's a very cool
tool called ChromeLens.

00:15:00.670 --> 00:15:02.070
This is a Chrome extension.

00:15:02.070 --> 00:15:03.570
And what it'll do
is, it'll actually

00:15:03.570 --> 00:15:06.550
let you identify the
tab order in your site.

00:15:06.550 --> 00:15:07.830
So I'll show you here.

00:15:07.830 --> 00:15:09.330
You can trace your tab order.

00:15:09.330 --> 00:15:11.121
And as I'm tabbing
through this experience,

00:15:11.121 --> 00:15:12.540
it'll draw these
little red lines

00:15:12.540 --> 00:15:15.270
to show me where the
focus was and the tab

00:15:15.270 --> 00:15:16.355
order of this experience.

00:15:16.355 --> 00:15:17.730
And so what you're
looking for is

00:15:17.730 --> 00:15:20.442
something that's flowing down
the page in a nice fashion.

00:15:20.442 --> 00:15:21.900
You definitely want
to avoid things

00:15:21.900 --> 00:15:24.110
where it's like focus is
moving off screen and coming

00:15:24.110 --> 00:15:26.610
back, or going to the bottom
of the page and back to the top

00:15:26.610 --> 00:15:29.360
and bouncing around
like all bonkers.

00:15:29.360 --> 00:15:31.860
So this is something you can
also hand off to your developer

00:15:31.860 --> 00:15:33.568
and say, hey, this is
the flow that we're

00:15:33.568 --> 00:15:36.187
going for in our experience.

00:15:36.187 --> 00:15:37.770
Next is making sure
that your controls

00:15:37.770 --> 00:15:39.150
have accessible labels.

00:15:39.150 --> 00:15:41.616
And I consider this part
of the user experience,

00:15:41.616 --> 00:15:42.990
so I consider this
something that

00:15:42.990 --> 00:15:45.930
falls into the UX
designer's wheelhouse.

00:15:45.930 --> 00:15:49.200
So the idea with this is,
particularly for controls

00:15:49.200 --> 00:15:52.202
that we might not have
room to put text on screen,

00:15:52.202 --> 00:15:54.660
I want to figure out what that
control is going to announce

00:15:54.660 --> 00:15:56.520
for a screen reader user.

00:15:56.520 --> 00:15:59.020
And there's a few
key rules here.

00:15:59.020 --> 00:16:02.070
The first is that we want to be
succinct in the way we announce

00:16:02.070 --> 00:16:02.840
these controls.

00:16:02.840 --> 00:16:05.190
So it's very tedious to
listen to long descriptions

00:16:05.190 --> 00:16:09.210
if you're using a screen reader,
so say as little as you can

00:16:09.210 --> 00:16:11.520
that's still relevant
and super important.

00:16:11.520 --> 00:16:13.770
You don't need to include
things like the control type

00:16:13.770 --> 00:16:16.080
in the label, because
that will be announced.

00:16:16.080 --> 00:16:18.180
If the developer is using
the correct element,

00:16:18.180 --> 00:16:19.946
that should just be
announced implicitly.

00:16:19.946 --> 00:16:21.570
Instead, what you
really want to do is,

00:16:21.570 --> 00:16:23.730
you want to focus
on action verbs.

00:16:23.730 --> 00:16:25.434
So when we're going
through and we're

00:16:25.434 --> 00:16:27.100
identifying all the
controls on our page

00:16:27.100 --> 00:16:28.350
and the label that
should be announced,

00:16:28.350 --> 00:16:30.641
we want to do things like
say, hey, this button's going

00:16:30.641 --> 00:16:33.449
to say "Search"
instead of "Magnifying

00:16:33.449 --> 00:16:35.490
Glass," because "Magnifying
Glass" doesn't really

00:16:35.490 --> 00:16:36.260
tell me anything.

00:16:36.260 --> 00:16:37.860
"Search" tells me
the action that's

00:16:37.860 --> 00:16:40.350
about to happen when I
click on that control

00:16:40.350 --> 00:16:42.930
or interact with that
control using my keyboard.

00:16:42.930 --> 00:16:46.210
So go through, and as you're
doing the comps for your page,

00:16:46.210 --> 00:16:47.970
identify these
elements, figure out

00:16:47.970 --> 00:16:49.590
what those labels should be,
and then you can hand that off

00:16:49.590 --> 00:16:51.840
to your developer, who can
implement that using things

00:16:51.840 --> 00:16:53.869
like ARIA.

00:16:53.869 --> 00:16:55.410
Finally, I want to
make sure that I'm

00:16:55.410 --> 00:16:58.590
providing multiple ways
to interact with my UI.

00:16:58.590 --> 00:17:01.230
So in particular,
it's very easy to get

00:17:01.230 --> 00:17:04.680
into the habit of just designing
for a mouse-only or mouse-first

00:17:04.680 --> 00:17:07.510
interface and forget
that folks may

00:17:07.510 --> 00:17:09.940
be interacting with your
controls using a keyboard.

00:17:09.940 --> 00:17:13.260
And you need to plan all of the
various focus states that will

00:17:13.260 --> 00:17:14.650
be appearing in your design.

00:17:14.650 --> 00:17:16.369
So we've got a
drop-down widget here.

00:17:16.369 --> 00:17:18.785
What's it going to look like
when someone's hitting the Up

00:17:18.785 --> 00:17:20.700
and Down Arrow keys?

00:17:20.700 --> 00:17:22.470
Even though it seems
like, yeah, of course

00:17:22.470 --> 00:17:25.109
I would do that, I've worked
on a number of projects

00:17:25.109 --> 00:17:27.720
where many of the focus
states were not thought out

00:17:27.720 --> 00:17:30.080
by the designer in
the initial comps.

00:17:30.080 --> 00:17:32.895
And then you have your
developer filling that in,

00:17:32.895 --> 00:17:35.520
taking their best guess of what
they think a focus state should

00:17:35.520 --> 00:17:36.717
be for something.

00:17:36.717 --> 00:17:39.300
So if this is something that can
go into the actual initial UX

00:17:39.300 --> 00:17:40.675
design of the
project, that makes

00:17:40.675 --> 00:17:43.236
it a lot easier for everybody.

00:17:43.236 --> 00:17:44.610
And another thing
to keep in mind

00:17:44.610 --> 00:17:47.940
is that you want to avoid
conveying information using

00:17:47.940 --> 00:17:49.020
only one modality.

00:17:49.020 --> 00:17:52.440
So consider multiple ways
of conveying information

00:17:52.440 --> 00:17:53.100
to the users.

00:17:53.100 --> 00:17:56.120
So if I'm doing something
like validation--

00:17:56.120 --> 00:17:59.970
the example over here that's
just the red underline,

00:17:59.970 --> 00:18:02.470
if I'm a user with a
color vision deficiency,

00:18:02.470 --> 00:18:05.340
I might miss that as
being an invalid state.

00:18:05.340 --> 00:18:08.700
So if we use multiple modalities
for conveying information,

00:18:08.700 --> 00:18:11.010
we have the red underline
plus some helper

00:18:11.010 --> 00:18:14.220
text to tell the user, hey,
something's wrong here,

00:18:14.220 --> 00:18:17.790
then we're more likely to cover
our bases better and make sure

00:18:17.790 --> 00:18:22.140
that the user does get that
information conveyed to them.

00:18:22.140 --> 00:18:24.349
All right, so these are my
big items for the designer

00:18:24.349 --> 00:18:26.514
to keep in mind-- making
sure they've got good color

00:18:26.514 --> 00:18:28.730
contrast, tab order and
labeling is well-identified--

00:18:28.730 --> 00:18:30.820
you can hand that off
to your developer--

00:18:30.820 --> 00:18:32.236
and that you're
making sure you're

00:18:32.236 --> 00:18:35.300
planning for multiple ways to
interact with and understand

00:18:35.300 --> 00:18:37.650
the content on your site.

00:18:37.650 --> 00:18:39.710
Finally, we've
got our developer.

00:18:39.710 --> 00:18:42.320
And the idea with
the developer is,

00:18:42.320 --> 00:18:44.780
they're managing a
few different things.

00:18:44.780 --> 00:18:46.730
They're handling
focus in the page,

00:18:46.730 --> 00:18:48.650
they're handling
semantics, and they're

00:18:48.650 --> 00:18:50.309
handling good CSS styles.

00:18:50.309 --> 00:18:52.100
And we're combining
all this stuff together

00:18:52.100 --> 00:18:55.352
to create a really
nice, robust experience.

00:18:55.352 --> 00:18:57.310
I'm a front-end developer,
primarily, by trade.

00:18:57.310 --> 00:18:59.351
So while everybody else
got four checklist items,

00:18:59.351 --> 00:19:01.720
the developer gets six.

00:19:01.720 --> 00:19:03.751
So I'm just more
familiar with that.

00:19:03.751 --> 00:19:05.500
So making sure we've
got a good tab order,

00:19:05.500 --> 00:19:08.525
we're managing focus properly,
we've got good keyboard support

00:19:08.525 --> 00:19:10.400
throughout, we're using
ARIA and other things

00:19:10.400 --> 00:19:12.050
to convey semantics
where needed,

00:19:12.050 --> 00:19:14.750
and that finally, because
being lazy is good,

00:19:14.750 --> 00:19:17.780
we are automating as much
of our process as possible.

00:19:17.780 --> 00:19:19.250
So let me dive
into each of these,

00:19:19.250 --> 00:19:20.670
starting with the tab order.

00:19:20.670 --> 00:19:22.340
So the designer
hands us that comp

00:19:22.340 --> 00:19:24.380
and says, hey, this is
the order that I want

00:19:24.380 --> 00:19:26.150
things to flow in the document.

00:19:26.150 --> 00:19:28.130
Cool, how do we
actually implement that?

00:19:30.850 --> 00:19:32.356
There's a number
of HTML elements

00:19:32.356 --> 00:19:33.730
that you work with
every day that

00:19:33.730 --> 00:19:35.590
are implicitly in
the focus order--

00:19:35.590 --> 00:19:38.200
so button, input, select.

00:19:38.200 --> 00:19:40.240
Anyone can hit Tab,
land on these controls,

00:19:40.240 --> 00:19:42.820
and they have built-in keyboard
support, which is great.

00:19:42.820 --> 00:19:44.770
So wherever possible,
using native controls

00:19:44.770 --> 00:19:48.070
is going to get us a long way
towards nailing that good tab

00:19:48.070 --> 00:19:49.662
order.

00:19:49.662 --> 00:19:52.120
It's also important to note,
though, that not every element

00:19:52.120 --> 00:19:53.170
is focusable.

00:19:53.170 --> 00:19:57.400
So images and
paragraphs, divs, spans--

00:19:57.400 --> 00:19:59.260
these elements are not
automatically opted

00:19:59.260 --> 00:20:00.560
into the tab order.

00:20:00.560 --> 00:20:03.880
And so problems arise when we
use those elements to build

00:20:03.880 --> 00:20:06.580
custom controls and we
don't do the extra work

00:20:06.580 --> 00:20:09.226
needed to add proper
keyboard support to them.

00:20:09.226 --> 00:20:10.600
So I'll show you
an example here.

00:20:10.600 --> 00:20:13.900
This is one that I actually
took from a pretty popular UI

00:20:13.900 --> 00:20:15.110
framework.

00:20:15.110 --> 00:20:18.070
So this is your
classic hamburger menu,

00:20:18.070 --> 00:20:21.280
responsive-design button thing
for opening your side nav.

00:20:21.280 --> 00:20:24.490
And as implemented
right now, it's a div.

00:20:24.490 --> 00:20:26.590
And so if you're watching
my focus indicator up

00:20:26.590 --> 00:20:30.310
there as I'm trying to tab over
to that control, because it's

00:20:30.310 --> 00:20:32.270
just a div, and
because, to the browser,

00:20:32.270 --> 00:20:35.230
a div is just a generic
grouping element,

00:20:35.230 --> 00:20:36.859
that element is not focusable.

00:20:36.859 --> 00:20:38.650
And that means that a
user using a keyboard

00:20:38.650 --> 00:20:41.170
is just never going to be
able to open that side nav.

00:20:41.170 --> 00:20:46.060
And I see this on
a lot of websites.

00:20:46.060 --> 00:20:48.310
The trick here is to
use the proper element.

00:20:48.310 --> 00:20:50.600
Again, take advantage of
native HTML whenever you can,

00:20:50.600 --> 00:20:52.690
because the platform is
trying to help you out

00:20:52.690 --> 00:20:54.850
by doing implicit--
or opting elements

00:20:54.850 --> 00:20:56.110
into the tab order for you.

00:20:56.110 --> 00:20:59.185
So instead of a div,
we use a button.

00:20:59.185 --> 00:21:02.510
A button is totally stylable.

00:21:02.510 --> 00:21:04.831
It'll announce properly
to a screen reader.

00:21:04.831 --> 00:21:07.330
And now, my user can just tab
over to that control and press

00:21:07.330 --> 00:21:11.920
Spacebar, and it
opens the side nav.

00:21:11.920 --> 00:21:13.270
Notice, I said Spacebar there.

00:21:13.270 --> 00:21:16.120
So another side benefit of
using the button element

00:21:16.120 --> 00:21:19.360
is, if you add a click
handler to it in JavaScript,

00:21:19.360 --> 00:21:21.490
the button element has
this magical thing called

00:21:21.490 --> 00:21:22.870
synthetic click activation.

00:21:22.870 --> 00:21:25.210
So when you land on it and
you press Spacebar or Enter,

00:21:25.210 --> 00:21:27.250
it'll actually run your
click handler for you.

00:21:27.250 --> 00:21:29.410
So this is not something
that a div or a span

00:21:29.410 --> 00:21:30.340
can do out of the box.

00:21:30.340 --> 00:21:32.947
If you're making custom
controls with divs or span,

00:21:32.947 --> 00:21:34.780
you've got to listen
for the keyboard event,

00:21:34.780 --> 00:21:36.400
you've got to
check the key type.

00:21:36.400 --> 00:21:38.066
And button's just
going to give you that

00:21:38.066 --> 00:21:39.400
for free, which is really cool.

00:21:39.400 --> 00:21:40.570
I'm so obsessed with
this that I actually

00:21:40.570 --> 00:21:42.340
shot a video on it,
just called, "Just Use

00:21:42.340 --> 00:21:44.080
button," because there's
a lot of other cool things

00:21:44.080 --> 00:21:46.163
about buttons that I'm not
even talking about yet.

00:21:46.163 --> 00:21:48.850
And I feel like developers
have forgotten this tag exist,

00:21:48.850 --> 00:21:50.900
but it's super, super useful.

00:21:50.900 --> 00:21:53.080
So yeah, shameless
self-promotion.

00:21:53.080 --> 00:21:55.697
Go check out that YouTube video.

00:21:55.697 --> 00:21:57.280
The next thing to
cover is making sure

00:21:57.280 --> 00:21:59.680
that we're properly
managing focus

00:21:59.680 --> 00:22:01.600
and that it's
visible in the app.

00:22:01.600 --> 00:22:04.450
So what do I mean
by managing focus?

00:22:04.450 --> 00:22:08.810
Basically, when you're changing
the content of the page,

00:22:08.810 --> 00:22:10.960
it's important to
direct the user's focus

00:22:10.960 --> 00:22:11.950
to that new content.

00:22:11.950 --> 00:22:14.320
So for instance, if you're
opening a modal window

00:22:14.320 --> 00:22:16.270
or you're sliding
up a notification

00:22:16.270 --> 00:22:18.570
from the bottom of the screen,
or something like that,

00:22:18.570 --> 00:22:21.310
if the user is using
a screen reader,

00:22:21.310 --> 00:22:24.070
they may not get any indication
that, suddenly, there's

00:22:24.070 --> 00:22:25.330
new content on screen.

00:22:25.330 --> 00:22:27.510
But by directing focus
to that new content,

00:22:27.510 --> 00:22:29.440
we can tell that user about it.

00:22:29.440 --> 00:22:31.466
So I'll show you
an example here.

00:22:31.466 --> 00:22:33.340
This is another pretty
common one that I see.

00:22:33.340 --> 00:22:36.220
So here, I'm using
VoiceOver on mobile Safari,

00:22:36.220 --> 00:22:40.829
which is an extremely common
mobile screen reader, OS combo.

00:22:40.829 --> 00:22:42.370
And what I'm going
to do is I'm going

00:22:42.370 --> 00:22:45.010
to go click on that hamburger
menu button using my screen

00:22:45.010 --> 00:22:47.270
reader.

00:22:47.270 --> 00:22:49.534
So I double-tap to click on
it, it opens my side nav.

00:22:49.534 --> 00:22:50.950
It looks like I'm
in the side nav,

00:22:50.950 --> 00:22:52.824
but I'm actually still
in the hamburger menu.

00:22:52.824 --> 00:22:55.870
And as I'm swiping, now I'm
just interacting with the links

00:22:55.870 --> 00:22:57.850
behind the overlay,
which is not what

00:22:57.850 --> 00:22:59.350
we want in our user experience.

00:22:59.350 --> 00:23:02.560
But I see this on
sites all the time.

00:23:02.560 --> 00:23:04.330
If you have not done
anything to direct

00:23:04.330 --> 00:23:07.030
the user's focus
into that side nav,

00:23:07.030 --> 00:23:08.265
they're behind the overlay.

00:23:08.265 --> 00:23:09.640
They're interacting
with the page

00:23:09.640 --> 00:23:12.340
when they probably shouldn't be.

00:23:12.340 --> 00:23:14.170
So how do we fix this?

00:23:14.170 --> 00:23:17.030
This is my implementation
for my side nav right now.

00:23:17.030 --> 00:23:18.520
It's pretty simple.

00:23:18.520 --> 00:23:21.040
What I can do is I can take
something like this header

00:23:21.040 --> 00:23:24.260
element here, I can give it
a tabindex of negative 1,

00:23:24.260 --> 00:23:26.330
which means it's
programmatically focusable.

00:23:26.330 --> 00:23:28.496
So the user's not going to
reach it pressing the Tab

00:23:28.496 --> 00:23:30.830
key on their keyboard, but
I can call its focus method,

00:23:30.830 --> 00:23:33.680
I can direct focus
to this control.

00:23:33.680 --> 00:23:35.770
So now I can listen for
the transition event

00:23:35.770 --> 00:23:38.780
when my menu slides in, I
call focus on that control,

00:23:38.780 --> 00:23:41.707
and now I've directed the
user's focus into that.

00:23:41.707 --> 00:23:43.540
They can quickly get
to the navigation links

00:23:43.540 --> 00:23:44.980
that they wanted
to interact with.

00:23:44.980 --> 00:23:46.840
And I don't have them behind
the overlay, messing around

00:23:46.840 --> 00:23:48.381
with the page when
they shouldn't be.

00:23:50.710 --> 00:23:53.650
Another flip side
to this is sometimes

00:23:53.650 --> 00:23:56.429
we actually want to retain
focus in a particular area.

00:23:56.429 --> 00:23:57.220
We want to trap it.

00:23:57.220 --> 00:23:59.590
We want to make sure that
it doesn't break out.

00:23:59.590 --> 00:24:02.470
If you open a modal window, you
want the user to take action.

00:24:02.470 --> 00:24:04.330
You don't want them
to accidentally end up

00:24:04.330 --> 00:24:05.821
behind your overlay again.

00:24:05.821 --> 00:24:08.320
And there are also situations
when you want to prevent focus

00:24:08.320 --> 00:24:10.390
from entering an area.

00:24:10.390 --> 00:24:12.520
So I'll show you
another example, again,

00:24:12.520 --> 00:24:15.280
using the side nav, because
that's a very helpful example.

00:24:15.280 --> 00:24:17.974
So I want you to watch
my focus indicator here.

00:24:17.974 --> 00:24:19.390
And what's going
to happen is it's

00:24:19.390 --> 00:24:21.014
going to start on
the hamburger button,

00:24:21.014 --> 00:24:22.704
it'll disappear
for a little while,

00:24:22.704 --> 00:24:25.120
and then it'll appear again
on this anchor tag on the page

00:24:25.120 --> 00:24:26.830
that says "Click Me."

00:24:26.830 --> 00:24:29.740
So what's happening is because
my side nav is off-screen

00:24:29.740 --> 00:24:31.430
and it's full of
anchors, the user

00:24:31.430 --> 00:24:33.360
is actually tabbing off-screen.

00:24:33.360 --> 00:24:35.710
Focus is just moving
off-screen, and they're

00:24:35.710 --> 00:24:38.892
interacting with things that's
not even visible on the page.

00:24:38.892 --> 00:24:40.600
I see this on a lot
of websites, as well.

00:24:40.600 --> 00:24:42.610
They'll have modal windows
that are in the DOM,

00:24:42.610 --> 00:24:43.940
but are just
positioned off-screen

00:24:43.940 --> 00:24:45.610
because they haven't
displayed them yet.

00:24:45.610 --> 00:24:47.526
And they don't think the
user can get to them,

00:24:47.526 --> 00:24:49.540
but they absolutely can
using their keyboard.

00:24:49.540 --> 00:24:51.831
And someone using a screen
reader or someone navigating

00:24:51.831 --> 00:24:54.190
primarily using their
keyboard, they're

00:24:54.190 --> 00:24:55.810
hitting those
things all the time.

00:24:55.810 --> 00:24:58.210
So we want to prevent
focus from going

00:24:58.210 --> 00:25:00.130
into those off-screen elements.

00:25:00.130 --> 00:25:02.086
There's a couple of
ways you can do this.

00:25:02.086 --> 00:25:03.960
The most straightforward
is just to say, hey,

00:25:03.960 --> 00:25:05.334
if something's
off-screen, I make

00:25:05.334 --> 00:25:08.086
it display none or
visibility hidden.

00:25:08.086 --> 00:25:09.710
Now it's not in the
accessibility tree,

00:25:09.710 --> 00:25:11.142
now it's not in the tab order.

00:25:11.142 --> 00:25:13.600
But I want to talk about another
method, which is something

00:25:13.600 --> 00:25:15.730
that we're also
working on in Chrome,

00:25:15.730 --> 00:25:18.500
and this is the new
inert attribute.

00:25:18.500 --> 00:25:20.980
So this is a new,
global HTML attribute

00:25:20.980 --> 00:25:23.200
that will remove an
element and its descendants

00:25:23.200 --> 00:25:26.670
from the tab order and
the accessibility tree.

00:25:26.670 --> 00:25:29.000
Now, let me show you
why this is useful.

00:25:29.000 --> 00:25:31.810
So same scenario
here, except for,

00:25:31.810 --> 00:25:34.000
this time, my nav has
an inert attribute

00:25:34.000 --> 00:25:36.460
and my main body content
over there does not.

00:25:36.460 --> 00:25:39.280
So I'm tabbing,
and my focus only

00:25:39.280 --> 00:25:42.292
goes in between my main
content and the navigation bar

00:25:42.292 --> 00:25:44.500
in case the user wants to
leave the site or something

00:25:44.500 --> 00:25:44.980
like that.

00:25:44.980 --> 00:25:45.813
That's totally cool.

00:25:45.813 --> 00:25:47.360
We want to allow that.

00:25:47.360 --> 00:25:49.360
But so far, this doesn't
really give me anything

00:25:49.360 --> 00:25:50.770
different from display none.

00:25:50.770 --> 00:25:53.080
Well, let's say the
drawer is open now.

00:25:53.080 --> 00:25:53.680
OK, cool.

00:25:53.680 --> 00:25:55.700
So we just move inert
to the main content.

00:25:55.700 --> 00:25:58.570
So now, you can't interact with
the stuff behind the overlay,

00:25:58.570 --> 00:26:00.190
but you can interact
with the nav.

00:26:00.190 --> 00:26:02.650
In fact, you can only
interact with the nav.

00:26:02.650 --> 00:26:04.129
So now the user is
tabbing through,

00:26:04.129 --> 00:26:05.920
and they're only
interacting with the thing

00:26:05.920 --> 00:26:08.004
that they should be
interacting with at that time.

00:26:08.004 --> 00:26:09.628
So this is really
useful, for instance,

00:26:09.628 --> 00:26:11.560
if you a modal window
that you just opened.

00:26:11.560 --> 00:26:14.110
You direct the user focus
there, and you keep it there

00:26:14.110 --> 00:26:17.817
until the user has taken
an action of some kind.

00:26:17.817 --> 00:26:19.900
If you're interested in
playing around with inert,

00:26:19.900 --> 00:26:22.232
we actually have a polyfill
for this up on GitHub.

00:26:22.232 --> 00:26:24.190
So I'd love for folks to
try it out and tell us

00:26:24.190 --> 00:26:25.140
what they think.

00:26:25.140 --> 00:26:29.460
If it helps, if it
hurts, let us know.

00:26:29.460 --> 00:26:32.170
And hopefully, we're going to
try and ship this behind a flag

00:26:32.170 --> 00:26:34.850
in Chrome very soon.

00:26:34.850 --> 00:26:36.490
The other key point
here is making sure

00:26:36.490 --> 00:26:39.910
that we're managing focus
and that it's visible.

00:26:39.910 --> 00:26:43.240
So this is another issue
that I see on a lot of sites.

00:26:43.240 --> 00:26:45.540
Focus rings, or
focus indicators,

00:26:45.540 --> 00:26:51.010
in CSS, that can be a tough
situation sometimes, because it

00:26:51.010 --> 00:26:54.160
often feels like the browser
is displaying focus rings

00:26:54.160 --> 00:26:57.116
in a very haphazard
fashion, so to speak.

00:26:57.116 --> 00:26:58.490
So I'll show you
an example here.

00:26:58.490 --> 00:27:00.760
I've got an input
text field, I've

00:27:00.760 --> 00:27:02.440
got a regular native
button, and then

00:27:02.440 --> 00:27:06.370
I've got a button element that
I've just styled to look fancy.

00:27:06.370 --> 00:27:08.337
We'll say that's
our fancy button.

00:27:08.337 --> 00:27:10.420
So when I go and I click
these different controls,

00:27:10.420 --> 00:27:12.086
you can see that the
focus ring behavior

00:27:12.086 --> 00:27:13.292
is different for each one.

00:27:13.292 --> 00:27:14.750
So I see a focus
ring on the input,

00:27:14.750 --> 00:27:16.630
I don't see it on
the native button,

00:27:16.630 --> 00:27:18.990
and I do see it on
my fancy button,

00:27:18.990 --> 00:27:20.800
even though it's
the same element.

00:27:20.800 --> 00:27:22.860
Well, that's weird.

00:27:22.860 --> 00:27:24.905
And I see that a lot
of developers hit this,

00:27:24.905 --> 00:27:27.280
and they're like, I wasn't
expecting that blue focus ring

00:27:27.280 --> 00:27:28.610
on that last control.

00:27:28.610 --> 00:27:29.830
They go to Stack Overflow.

00:27:29.830 --> 00:27:31.960
They're like, how do I
get rid of the focus ring?

00:27:31.960 --> 00:27:34.376
And then someone's like, oh,
you just say, "outline none,"

00:27:34.376 --> 00:27:35.860
and you just remove all of them.

00:27:35.860 --> 00:27:37.600
And this is a huge anti-pattern.

00:27:37.600 --> 00:27:38.934
Please do not do this.

00:27:38.934 --> 00:27:40.600
Again, remember, if
someone's navigating

00:27:40.600 --> 00:27:42.670
with a keyboard, the
focus ring, that's

00:27:42.670 --> 00:27:44.530
like their mouse pointer.

00:27:44.530 --> 00:27:46.080
And if that thing
goes away, it'd

00:27:46.080 --> 00:27:47.830
be like if I took your
mouse pointer away.

00:27:47.830 --> 00:27:51.040
And you'd be like, I don't know
what I'm about to click on.

00:27:51.040 --> 00:27:52.600
So we want to avoid
that situation.

00:27:52.600 --> 00:27:54.141
But I also understand
why it happens,

00:27:54.141 --> 00:27:58.444
because it seems inconsistent
with what's going on here.

00:27:58.444 --> 00:28:00.860
So to help with this, we're
working on a new CSS selector.

00:28:00.860 --> 00:28:04.050
This has actually just landed
in CSS selectors level four.

00:28:04.050 --> 00:28:05.260
It's called focus-ring.

00:28:05.260 --> 00:28:06.850
It's a pseudo class.

00:28:06.850 --> 00:28:10.780
And focus-ring, today, will
help differentiate between mouse

00:28:10.780 --> 00:28:12.010
and keyboard focus.

00:28:12.010 --> 00:28:15.100
And the way that it works is it
matches whenever an element has

00:28:15.100 --> 00:28:19.510
focus, and based on an
underlying browser heuristic,

00:28:19.510 --> 00:28:22.310
the browser has decided it
should draw a focus ring.

00:28:22.310 --> 00:28:23.860
OK, what does that mean?

00:28:23.860 --> 00:28:26.350
Today, it means the
underlying browser here

00:28:26.350 --> 00:28:28.670
so just basically says, the
user's using a keyboard.

00:28:28.670 --> 00:28:30.460
So focus matches,
and I've determined

00:28:30.460 --> 00:28:31.924
the user is using a keyboard.

00:28:31.924 --> 00:28:33.340
Well, there's a
lot of cool things

00:28:33.340 --> 00:28:35.298
that we can do now that
we have the opportunity

00:28:35.298 --> 00:28:37.030
to opt into this heuristic.

00:28:37.030 --> 00:28:39.730
For instance, a site,
or maybe Chrome itself,

00:28:39.730 --> 00:28:42.400
could expose a user preference,
that someone could say,

00:28:42.400 --> 00:28:46.360
you know what, I always want to
see focus rings on everything

00:28:46.360 --> 00:28:47.210
that I click on.

00:28:47.210 --> 00:28:49.981
It helps me keep my context.

00:28:49.981 --> 00:28:51.730
It keeps me from getting
lost on the page.

00:28:51.730 --> 00:28:53.660
I'm going to check that
as user preference.

00:28:53.660 --> 00:28:54.160
Cool.

00:28:54.160 --> 00:28:56.900
OK, we'll just say that you now
have opted into the heuristic,

00:28:56.900 --> 00:28:58.204
and focus-ring will match.

00:28:58.204 --> 00:28:59.620
So there's a cool
opportunity here

00:28:59.620 --> 00:29:01.450
to start allowing
users to customize

00:29:01.450 --> 00:29:04.670
the experience for how
they see focus indicators.

00:29:04.670 --> 00:29:06.272
So thinking about
that fancy button

00:29:06.272 --> 00:29:08.230
that I was showing there,
we could do something

00:29:08.230 --> 00:29:09.938
like this, where we
could say, all right,

00:29:09.938 --> 00:29:12.250
let's override the
default focus style,

00:29:12.250 --> 00:29:16.540
because it's being
applied haphazardly.

00:29:16.540 --> 00:29:19.630
And instead, we'll make sure
we create an indicator for when

00:29:19.630 --> 00:29:21.400
focus-ring matches.

00:29:21.400 --> 00:29:22.870
So what that allows
us to do, then,

00:29:22.870 --> 00:29:24.975
is as the user is
clicking with their mouse

00:29:24.975 --> 00:29:26.350
between these
different elements,

00:29:26.350 --> 00:29:28.989
we get consistent behavior
between our two buttons.

00:29:28.989 --> 00:29:31.030
And when they're tabbing
through with a keyboard,

00:29:31.030 --> 00:29:34.310
we now have the focus indicator
on all of our controls.

00:29:34.310 --> 00:29:36.790
So this helps us differentiate
mouse and keyboard focus,

00:29:36.790 --> 00:29:41.140
and we get a more
consistent feel to our app.

00:29:41.140 --> 00:29:42.970
We also have a
polyfill for focus-ring

00:29:42.970 --> 00:29:44.320
that is also up on GitHub.

00:29:44.320 --> 00:29:46.780
So we'd love for folks to try
that out, as well, and let

00:29:46.780 --> 00:29:49.030
us know what they think.

00:29:49.030 --> 00:29:52.440
Yeah, any feedback here,
greatly appreciated.

00:29:52.440 --> 00:29:54.940
Next, we want to talk about how
we give interactive elements

00:29:54.940 --> 00:29:56.222
good keyboard support.

00:29:56.222 --> 00:29:58.180
So when I was first
getting into accessibility,

00:29:58.180 --> 00:30:00.013
I would build a custom
control, and then I'd

00:30:00.013 --> 00:30:02.560
be like, I'm not
quite sure everything

00:30:02.560 --> 00:30:04.990
I need to add to this
control to make sure I can

00:30:04.990 --> 00:30:06.811
say it's keyboard accessible.

00:30:06.811 --> 00:30:09.310
What's supposed to happen when
you hit different arrow keys?

00:30:09.310 --> 00:30:11.860
I felt like I was guessing.

00:30:11.860 --> 00:30:13.994
And I discovered this
awesome document.

00:30:13.994 --> 00:30:15.910
And it doesn't look like
an awesome document--

00:30:15.910 --> 00:30:17.380
it looks like a
boring document--

00:30:17.380 --> 00:30:19.180
but this is an
awesome document, OK?

00:30:19.180 --> 00:30:21.490
So this is the ARIA
Authoring Practices Guide.

00:30:21.490 --> 00:30:23.830
Yeah, I know it has the
classic spec look that

00:30:23.830 --> 00:30:26.950
makes every developer
just fall asleep.

00:30:26.950 --> 00:30:29.887
But what this does is it
lists a bunch of UI patterns.

00:30:29.887 --> 00:30:32.470
And you can pick a UI pattern,
and it'll take you to a section

00:30:32.470 --> 00:30:35.050
where it will just tell
you the expected keyboard

00:30:35.050 --> 00:30:38.021
support for that UI pattern.

00:30:38.021 --> 00:30:39.520
So if you're building
a radio group,

00:30:39.520 --> 00:30:42.400
it'll say, OK, cool, when the
user presses the Down Arrow,

00:30:42.400 --> 00:30:43.570
this is what should happen.

00:30:43.570 --> 00:30:45.945
When they press the Spacebar,
this is what should happen.

00:30:45.945 --> 00:30:47.830
When they press the Home
key or the End key--

00:30:47.830 --> 00:30:49.750
some of those keys that we
sometimes overlook or forget

00:30:49.750 --> 00:30:50.470
about--

00:30:50.470 --> 00:30:52.040
this is what should happen.

00:30:52.040 --> 00:30:56.140
So this is your cheat sheet
to component accessibility.

00:30:56.140 --> 00:30:57.400
I love this doc so much.

00:30:57.400 --> 00:30:59.690
If you take nothing
else from this talk,

00:30:59.690 --> 00:31:04.480
ARIA Authoring Practices
Guide-- yes, take that with you.

00:31:04.480 --> 00:31:06.730
A pattern that I use a lot
when I'm implementing these

00:31:06.730 --> 00:31:08.280
is called roving tabindex.

00:31:08.280 --> 00:31:12.670
So roving tabindex is a
good way to manage the focus

00:31:12.670 --> 00:31:14.530
at the component level.

00:31:14.530 --> 00:31:16.120
And the idea here is--

00:31:16.120 --> 00:31:17.840
let's say we're
building a list box.

00:31:17.840 --> 00:31:19.940
We might have 100
items in that list box,

00:31:19.940 --> 00:31:21.689
and it would be very
annoying for the user

00:31:21.689 --> 00:31:23.110
to have to tab
through every item.

00:31:23.110 --> 00:31:24.710
So instead, we want
the entire control

00:31:24.710 --> 00:31:26.491
just to be one tab stop.

00:31:26.491 --> 00:31:28.990
When the user lands on it, if
they want to interact with it,

00:31:28.990 --> 00:31:30.460
they can hit the
Up and Down Arrow

00:31:30.460 --> 00:31:32.401
key, or something like that.

00:31:32.401 --> 00:31:34.900
And so to handle those arrow
key presses, what we can do is,

00:31:34.900 --> 00:31:38.286
we can give every child here
a tabindex of negative 1,

00:31:38.286 --> 00:31:40.660
except for the
currently active child.

00:31:40.660 --> 00:31:42.160
We'll give that one
a tabindex of 0,

00:31:42.160 --> 00:31:45.700
which means it's in the
natural keyboard tabbing order.

00:31:45.700 --> 00:31:47.800
So someone tabbing will
tab to this control.

00:31:47.800 --> 00:31:50.040
They'll just land
right on that element.

00:31:50.040 --> 00:31:52.520
If they press the Down Arrow
key, we'll listen for that,

00:31:52.520 --> 00:31:54.144
and we'll just say,
oh, cool, I'll just

00:31:54.144 --> 00:31:55.690
move tabindex 0
to the next child

00:31:55.690 --> 00:31:57.510
and I'll call focus on it.

00:31:57.510 --> 00:31:59.480
And now, if they tab
out of the control

00:31:59.480 --> 00:32:01.240
and they Shift-Tab
back in, they're

00:32:01.240 --> 00:32:04.014
going to land right back on
the previous active item.

00:32:04.014 --> 00:32:06.180
So this is actually how I
implement keyboard support

00:32:06.180 --> 00:32:08.200
in almost all of my controls.

00:32:08.200 --> 00:32:10.570
I'm just listening for
certain arrow keys,

00:32:10.570 --> 00:32:13.630
I just find the child that
tabindex needs to move to,

00:32:13.630 --> 00:32:15.030
and I call focus on it.

00:32:15.030 --> 00:32:17.840
It's that straightforward.

00:32:17.840 --> 00:32:20.529
I actually shot a video on
this, if you're interested.

00:32:20.529 --> 00:32:23.070
I do this show on YouTube every
two weeks called "a11ycasts."

00:32:23.070 --> 00:32:24.410
I should have maybe
mentioned that before.

00:32:24.410 --> 00:32:26.140
But yeah, so we have an
episode on roving tabindex

00:32:26.140 --> 00:32:27.880
and how to build
your own radio group.

00:32:27.880 --> 00:32:29.200
If you're interested
in that, as well,

00:32:29.200 --> 00:32:30.408
definitely go check that out.

00:32:33.004 --> 00:32:33.670
All right, cool.

00:32:33.670 --> 00:32:35.400
So we've got keyboard
support squared away.

00:32:35.400 --> 00:32:37.441
The next thing is making
sure we've got good ARIA

00:32:37.441 --> 00:32:39.610
support in our custom
controls that we're building,

00:32:39.610 --> 00:32:42.330
making sure that they're
being announced properly

00:32:42.330 --> 00:32:45.940
by a user who's using
assistive technology.

00:32:45.940 --> 00:32:48.800
So again, the ARIA
Authoring Practices Guide--

00:32:48.800 --> 00:32:50.550
this is why I love
this document so much--

00:32:50.550 --> 00:32:53.160
it'll also, obviously,
as the name implies,

00:32:53.160 --> 00:32:56.520
tell you what ARIA attributes
and rules and states to apply

00:32:56.520 --> 00:32:58.290
and when to apply them.

00:32:58.290 --> 00:33:00.722
So going back to that doc,
if we're building a checkbox,

00:33:00.722 --> 00:33:02.930
it'll just say, OK, cool,
you're building a checkbox?

00:33:02.930 --> 00:33:04.490
It's got to have
rule equals checkbox.

00:33:04.490 --> 00:33:06.614
It's got to have aria-checked
equals true or false,

00:33:06.614 --> 00:33:07.770
depending on its state.

00:33:07.770 --> 00:33:10.129
It needs to have a label
via aria-labelledby,

00:33:10.129 --> 00:33:12.420
and we'll talk about how that
works a little bit later.

00:33:12.420 --> 00:33:14.128
But again, this is
just your cheat sheet.

00:33:14.128 --> 00:33:16.590
You go there-- if
you're new accessibility

00:33:16.590 --> 00:33:18.330
or you're just building
some components

00:33:18.330 --> 00:33:21.214
and you want to make sure
they're good, solid components,

00:33:21.214 --> 00:33:23.630
check them against the Authoring
Practices Guide patterns,

00:33:23.630 --> 00:33:25.629
make sure you're implementing
all of this stuff,

00:33:25.629 --> 00:33:28.309
and have a much happier time.

00:33:28.309 --> 00:33:29.850
So yeah, I mentioned
aria-labelledby.

00:33:29.850 --> 00:33:31.891
I want to talk about how
we label these controls,

00:33:31.891 --> 00:33:34.650
because labeling is
super, super important.

00:33:34.650 --> 00:33:37.020
Basically, labeling
of our controls

00:33:37.020 --> 00:33:39.354
helps the user really
understand the purpose

00:33:39.354 --> 00:33:40.770
of that particular
control, what's

00:33:40.770 --> 00:33:43.182
about to happen when
they interact with it.

00:33:43.182 --> 00:33:46.500
And there's a few ways that
we can go about doing this.

00:33:46.500 --> 00:33:50.160
If you are familiar with the
label element, which we often

00:33:50.160 --> 00:33:53.670
use inside of forms, that is
a good way to label controls.

00:33:53.670 --> 00:33:58.470
It primarily works just on form
elements, like input, select,

00:33:58.470 --> 00:34:00.460
button, things like that.

00:34:00.460 --> 00:34:03.180
So it's not going to help us if
we're building custom controls,

00:34:03.180 --> 00:34:05.388
like a web component or
something that hasn't existed

00:34:05.388 --> 00:34:07.860
in the browser
before, but if you're

00:34:07.860 --> 00:34:10.860
using any sort of built-in form
element, this is a great tool.

00:34:10.860 --> 00:34:13.020
So you can wrap
an element in it,

00:34:13.020 --> 00:34:15.630
you can reference an element,
using the for attribute

00:34:15.630 --> 00:34:17.010
of the label element.

00:34:17.010 --> 00:34:18.960
And then, up there
at the top, in green,

00:34:18.960 --> 00:34:21.480
I've got some text that my
screen reader would announce.

00:34:21.480 --> 00:34:23.639
So in this case, I'm
wrapping this input element.

00:34:23.639 --> 00:34:25.388
And my screen reader,
when it lands on it,

00:34:25.388 --> 00:34:27.929
is going to say, "First
name, edit text."

00:34:27.929 --> 00:34:28.562
Cool.

00:34:28.562 --> 00:34:31.020
All right, so this helps us if
we're using some native form

00:34:31.020 --> 00:34:33.060
inputs, but what if we're
doing something else?

00:34:33.060 --> 00:34:36.690
Maybe we don't have a place
to display text on screen.

00:34:36.690 --> 00:34:38.190
So the hamburger menu--

00:34:38.190 --> 00:34:39.555
great example of this.

00:34:39.555 --> 00:34:42.234
And I see a lot of websites
which don't do this.

00:34:42.234 --> 00:34:44.400
And so you land on that
thing using a screen reader,

00:34:44.400 --> 00:34:46.560
and it just says, "button."

00:34:46.560 --> 00:34:48.509
And I'm not inclined to
click on a button that

00:34:48.509 --> 00:34:50.550
just says "button" and
nothing else, because that

00:34:50.550 --> 00:34:53.400
could be the send you my
social security number button.

00:34:53.400 --> 00:34:55.244
So I'm not going to press that.

00:34:55.244 --> 00:34:57.660
So what we can do when we have
a control where there isn't

00:34:57.660 --> 00:35:00.270
a place to put text on
screen is we can give it

00:35:00.270 --> 00:35:04.200
its own little text alternative,
using the aria-label attribute.

00:35:04.200 --> 00:35:08.250
So this will override any
default labeling mechanism

00:35:08.250 --> 00:35:09.600
this control might have.

00:35:09.600 --> 00:35:11.914
It just allows us to create
a good text replacement.

00:35:11.914 --> 00:35:13.830
So for our hamburger
menu, we can just give it

00:35:13.830 --> 00:35:15.240
an aria-label of main menu.

00:35:15.240 --> 00:35:17.400
If the user lands on that
using a screen reader,

00:35:17.400 --> 00:35:19.830
it says, "Main menu, button."

00:35:19.830 --> 00:35:22.470
Awesome, we know what
we're interacting with.

00:35:22.470 --> 00:35:24.220
Finally, we've got
aria-labelledby.

00:35:24.220 --> 00:35:25.710
So this one's
pretty interesting.

00:35:25.710 --> 00:35:28.500
It basically lets an element
point at another element

00:35:28.500 --> 00:35:30.150
and say, hey, that
element over there,

00:35:30.150 --> 00:35:32.550
that element provides my label.

00:35:32.550 --> 00:35:36.180
So an example would be, I have
a button that says, "Shop Now."

00:35:36.180 --> 00:35:38.360
And if a user lands on
that, it says, "Shop Now."

00:35:38.360 --> 00:35:40.740
It's like, well, OK, but
which section of the store

00:35:40.740 --> 00:35:42.450
am I going to?

00:35:42.450 --> 00:35:44.070
If we want, we can
take that header

00:35:44.070 --> 00:35:46.280
up there that says
"Men's Outerwear,"

00:35:46.280 --> 00:35:48.000
we can use aria-labelledby
on our button,

00:35:48.000 --> 00:35:50.037
and we can point at
not only that element,

00:35:50.037 --> 00:35:51.495
but we can even
point at ourselves.

00:35:51.495 --> 00:35:55.760
You can actually have these
compound aria-labelledbys

00:35:55.760 --> 00:35:58.620
just by pointing to multiple
space-separated IDs,

00:35:58.620 --> 00:36:02.260
and you can build
this composite label.

00:36:02.260 --> 00:36:04.800
So I'm saying now, when
I land on that button,

00:36:04.800 --> 00:36:08.980
it says "Men's Outerwear,
Shop Now, button."

00:36:08.980 --> 00:36:10.289
Cool.

00:36:10.289 --> 00:36:11.580
So these are some useful tools.

00:36:11.580 --> 00:36:13.030
When you're building
custom controls,

00:36:13.030 --> 00:36:15.321
make sure you're labeling
them, so that way, the user's

00:36:15.321 --> 00:36:18.330
understanding the purpose of
that particular input widget

00:36:18.330 --> 00:36:20.190
that they're working with.

00:36:20.190 --> 00:36:22.840
Finally, you're
doing all this work,

00:36:22.840 --> 00:36:25.590
you want to make sure
that you're not regressing

00:36:25.590 --> 00:36:28.210
and missing errors,
or perhaps overlooking

00:36:28.210 --> 00:36:29.520
a part of your site.

00:36:29.520 --> 00:36:32.552
So this is where automation is
really going to help us out.

00:36:32.552 --> 00:36:34.260
So there's a number
of really great tools

00:36:34.260 --> 00:36:37.800
that will make it easier for you
to catch accessibility errors

00:36:37.800 --> 00:36:39.900
and fix them.

00:36:39.900 --> 00:36:42.870
One that I really like is a
tool called aXe by the folks

00:36:42.870 --> 00:36:43.890
at Dequeue.

00:36:43.890 --> 00:36:45.360
So it comes in various flavors.

00:36:45.360 --> 00:36:47.220
There is axe-core,
the node module.

00:36:47.220 --> 00:36:49.680
There's axe-cli, which you can
just run from your terminal

00:36:49.680 --> 00:36:51.180
and point at a URL.

00:36:51.180 --> 00:36:54.466
They have examples on using
aXe with Selenium WebDriver.

00:36:54.466 --> 00:36:56.340
Really, really cool
library, so definitely go

00:36:56.340 --> 00:36:58.890
check that out on GitHub--

00:36:58.890 --> 00:37:00.215
super useful.

00:37:00.215 --> 00:37:02.340
And this is the kind of
thing which, if you recall,

00:37:02.340 --> 00:37:03.900
I was talking about having
an accessibility checklist

00:37:03.900 --> 00:37:04.680
earlier.

00:37:04.680 --> 00:37:05.520
This is the sort
of thing where you

00:37:05.520 --> 00:37:07.380
can use that with your
checklist to automate

00:37:07.380 --> 00:37:08.130
some of those checks.

00:37:08.130 --> 00:37:09.963
So you don't have to
do everything manually,

00:37:09.963 --> 00:37:10.880
which is very helpful.

00:37:10.880 --> 00:37:13.546
Some of you may have also seen a
project that we are working on,

00:37:13.546 --> 00:37:14.460
called Lighthouse.

00:37:14.460 --> 00:37:17.330
So this is for auditing
a Progressive Web App,

00:37:17.330 --> 00:37:20.250
making sure it's performant and
doing all the best practices.

00:37:20.250 --> 00:37:23.360
Under the hood, Lighthouse
actually relies on axe-core.

00:37:23.360 --> 00:37:25.230
So when we generate
a report for you,

00:37:25.230 --> 00:37:26.785
we have an
accessibility section.

00:37:26.785 --> 00:37:28.819
We're going to hop down
there, and the tests

00:37:28.819 --> 00:37:30.360
that we're exposing
here are the ones

00:37:30.360 --> 00:37:32.447
that we're leveraging
the aXe library.

00:37:32.447 --> 00:37:34.280
So if you're already
using Lighthouse today,

00:37:34.280 --> 00:37:36.238
you're already using aXe,
which is really cool.

00:37:36.238 --> 00:37:39.020
And you can do something like
this to get a report card,

00:37:39.020 --> 00:37:40.970
get a little score, and
figure out, roughly,

00:37:40.970 --> 00:37:43.095
where you stand with
accessibility in your existing

00:37:43.095 --> 00:37:44.870
project.

00:37:44.870 --> 00:37:47.051
And finally, for
spot-checking things,

00:37:47.051 --> 00:37:49.550
it can be very tedious to have
to turn on your screen reader

00:37:49.550 --> 00:37:51.940
every time you want to check
just a particular control

00:37:51.940 --> 00:37:54.940
or see if changing
something is fixing it.

00:37:54.940 --> 00:37:57.350
So we're actually working
on some experimental, new

00:37:57.350 --> 00:37:58.980
accessibility DevTools.

00:37:58.980 --> 00:38:02.170
So these are available in
Chrome today behind a flag.

00:38:02.170 --> 00:38:05.570
So you can go into
chrome://flags/#enable devtools

00:38:05.570 --> 00:38:07.431
experiments.

00:38:07.431 --> 00:38:09.680
I'll also make these slides
available after the talks.

00:38:09.680 --> 00:38:11.960
You don't have to write
all these URLs down.

00:38:11.960 --> 00:38:15.380
But you can go here, turn on
Developer Tools Experiments.

00:38:15.380 --> 00:38:16.770
You'll have to restart Chrome.

00:38:16.770 --> 00:38:19.340
You go to your DevTools,
you go to the Settings,

00:38:19.340 --> 00:38:21.580
and you go to the
Experiments tab.

00:38:21.580 --> 00:38:23.937
You enable Accessibility
Inspection,

00:38:23.937 --> 00:38:25.520
and then you can
actually just go look

00:38:25.520 --> 00:38:27.950
at nodes in your Elements panel.

00:38:27.950 --> 00:38:30.920
And along with your styles
and your computer properties

00:38:30.920 --> 00:38:33.400
and everything, we now have
an Accessibility Inspector

00:38:33.400 --> 00:38:37.220
that'll tell you whether your
element has proper labeling

00:38:37.220 --> 00:38:39.700
or not, or what the screen
reader is about to announce.

00:38:39.700 --> 00:38:41.610
It shows you the name
computation algorithm,

00:38:41.610 --> 00:38:42.609
which is really helpful.

00:38:42.609 --> 00:38:45.380
It tells you the ARIA role, the
ARIA states that are currently

00:38:45.380 --> 00:38:47.254
applied to your elements,
so you can identify

00:38:47.254 --> 00:38:48.600
if you've got any issues there.

00:38:48.600 --> 00:38:50.350
Yeah, super useful stuff.

00:38:50.350 --> 00:38:52.910
So yeah, this is my checklist
for the developer-- logical tab

00:38:52.910 --> 00:38:56.870
order, properly managing focus,
good keyboard and ARIA support,

00:38:56.870 --> 00:38:59.330
and automate as much as
you can to catch any errors

00:38:59.330 --> 00:39:01.410
or regressions.

00:39:01.410 --> 00:39:04.010
So wrapping up, again, I
want to remind everyone,

00:39:04.010 --> 00:39:05.370
accessibly is a team effort.

00:39:05.370 --> 00:39:06.500
It's really, really
difficult if you only

00:39:06.500 --> 00:39:08.450
have one person doing
this on your team.

00:39:08.450 --> 00:39:10.580
It's so much better when
everybody is bought in,

00:39:10.580 --> 00:39:12.410
everybody has some
fundamentals and is

00:39:12.410 --> 00:39:15.516
able to contribute
to this together.

00:39:15.516 --> 00:39:18.140
These are, again, the high-level
goals for each of these folks.

00:39:18.140 --> 00:39:19.790
I want the Project
Manager to make sure

00:39:19.790 --> 00:39:22.610
that they're training the
team, that everyone has time

00:39:22.610 --> 00:39:25.670
to learn about this topic, that
you're identifying your use

00:39:25.670 --> 00:39:28.520
cases, that you're
incorporating a good checklist.

00:39:28.520 --> 00:39:31.310
Your Designer is understanding
the needs of the users

00:39:31.310 --> 00:39:33.770
and making sure that they're
designing inclusively.

00:39:33.770 --> 00:39:37.100
And that your Developer is
managing focus, managing focus

00:39:37.100 --> 00:39:39.100
indicators, got good
keyboard support,

00:39:39.100 --> 00:39:40.700
and you're handling
your semantics

00:39:40.700 --> 00:39:43.120
through things like ARIA.

00:39:43.120 --> 00:39:45.230
Again, quick refresh some
of the resources-- we

00:39:45.230 --> 00:39:47.420
have our accessibility course.

00:39:47.420 --> 00:39:48.920
This is on Udacity today.

00:39:48.920 --> 00:39:55.520
It is a free, multi-week
course at bit.ly/web-a11y.

00:39:55.520 --> 00:39:58.110
My YouTube series, "a11ycasts,"
if you want to check this out,

00:39:58.110 --> 00:40:00.800
comes out fortnightly,
every two weeks.

00:40:00.800 --> 00:40:02.960
We talk about not only
accessibility fundamentals,

00:40:02.960 --> 00:40:06.650
but also the cool stuff, the
bleeding-edge stuff, the hip,

00:40:06.650 --> 00:40:10.790
new specs and standards, and
what's around the corner.

00:40:10.790 --> 00:40:13.340
Also, check out our guides
on web fundamentals.

00:40:13.340 --> 00:40:16.040
And check out the material
design guidelines, as well.

00:40:16.040 --> 00:40:18.659
I think this is a really, really
good resource for designers.

00:40:18.659 --> 00:40:20.450
With that, I just want
to say, thank you so

00:40:20.450 --> 00:40:21.658
much for being with me today.

00:40:21.658 --> 00:40:24.424
And I hope you enjoy the rest
of your time here at I/O.

00:40:24.424 --> 00:40:29.083
[MUSIC PLAYING]

