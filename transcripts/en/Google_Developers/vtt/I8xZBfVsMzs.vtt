WEBVTT
Kind: captions
Language: en

00:00:07.173 --> 00:00:09.976
Hi, my name is Stephanie Liu,
and I work on the YouTube APIs

00:00:09.976 --> 00:00:11.177
and Tools team. 

00:00:11.177 --> 00:00:13.680
Today, I'll be going over some
simple examples using the new

00:00:13.680 --> 00:00:16.783
player APIs and the Chromeless
player. First, a little bit

00:00:16.783 --> 00:00:19.185
of background.  Before, if you
wanted to embed a YouTube

00:00:19.185 --> 00:00:21.688
video onto your site all you
could do is choose one of our

00:00:21.688 --> 00:00:24.791
standard embedder players, and
put it there. As a developer,

00:00:24.791 --> 00:00:26.493
you really didn't have any
insight about what was going

00:00:26.493 --> 00:00:30.426
on.  Now, you'll be able to do
much more. The JavaScript and

00:00:26.493 --> 00:00:31.898
Flash APIs that we've just
released, will allow you to

00:00:31.898 --> 00:00:34.968
control our embedded players.
Issue commands like play,

00:00:34.968 --> 00:00:38.371
pause, seek to a specific
position in a video, mute, set

00:00:38.371 --> 00:00:42.275
volume; get data, like current
time, and how far the video is

00:00:42.275 --> 00:00:44.377
buffered. You can also
subscribe to events like

00:00:44.377 --> 00:00:47.580
changes in the player state.
Now, the Chromeless player is a

00:00:47.580 --> 00:00:51.084
swf with no player controls.
So, no YouTube buttons or our

00:00:51.084 --> 00:00:53.586
progress bar. You can put in
your own buttons and customize

00:00:53.586 --> 00:00:57.290
it to fit in with the look and feel of
your site. OK, so, let's get

00:00:57.290 --> 00:01:00.894
started with what the
JavaScript player API can do.

00:01:00.894 --> 00:01:03.363
So, here we have the regular
YouTube embedded player. I

00:01:03.363 --> 00:01:06.966
think everyone's probably
pretty familiar with this.

00:01:06.966 --> 00:01:11.337
It plays and now I'm gonna
show you how to set up this

00:01:11.337 --> 00:01:14.841
embed so that we can make API
calls to it. The first thing

00:01:14.841 --> 00:01:19.045
you need to do is include
"swfobject.js". Now, I

00:01:19.045 --> 00:01:21.147
recommend using a swfobject
because it makes embedding 

00:01:21.147 --> 00:01:23.650
Flash content a lot easier.
It'll take care of things for

00:01:23.650 --> 00:01:27.053
you like detecting the user's
version of Flash. They're

00:01:27.053 --> 00:01:29.656
going to need version 8 or
above to be able to see your

00:01:29.656 --> 00:01:36.663
player correctly. Now here, is
the div that the embed is

00:01:36.663 --> 00:01:40.567
gonna to live in. You'll notice
we're calling it "ytapiplayer,"

00:01:40.567 --> 00:01:43.837
we're going to need that
later. And, if they don't have

00:01:43.837 --> 00:01:46.039
8 or above installed, they'll
just see this line of text

00:01:46.039 --> 00:01:50.043
instead of a broken player.
Now we're kinda getting into

00:01:50.043 --> 00:01:52.545
the meat of it. Here is where
we're actually going to set up

00:01:52.545 --> 00:01:58.251
the embed object. 

00:01:58.251 --> 00:02:00.854
You see here,
the parameters that we're

00:02:00.854 --> 00:02:02.922
gonna have in the embed object.
We need

00:02:02.922 --> 00:02:07.327
"allowScriptAccess: "always"".
This means the YouTube swf can

00:02:07.327 --> 00:02:10.330
make calls to your HTML page.
And your HTML page can make

00:02:10.330 --> 00:02:14.701
calls to the player swf. One
of the attributes we wanna set

00:02:14.701 --> 00:02:20.306
is id for "myytplayer". This
is gonna be the name of the

00:02:20.306 --> 00:02:24.010
embedded object. You can use
this to get a reference to the

00:02:24.010 --> 00:02:33.720
player via JavaScript using
get element by id later on.

00:02:33.720 --> 00:02:37.223
Now "swfobject.embedSWF" will
actually load the player from

00:02:37.223 --> 00:02:41.327
YouTube and embed it on your
HTML page. Let me just go over

00:02:41.327 --> 00:02:45.932
all the parameters that you
need here. The first parameter

00:02:45.932 --> 00:02:53.106
is the URL of the swf.
"enableksopi=1,"  just

00:02:53.106 --> 00:02:57.810
enables the player to
receive API calls. 

00:02:57.810 --> 00:03:02.081
Now "playerapiid" is the
parameter that's going to be

00:03:02.081 --> 00:03:05.785
passed to "onYouTubePlayerReady"
as the first argument

00:03:05.785 --> 00:03:09.189
when the player is loaded and
ready to go. Now you want to

00:03:09.189 --> 00:03:12.592
name the player because if you
are expecting multiple videos

00:03:12.592 --> 00:03:16.696
to be loaded on your page,
you'll want to know which one

00:03:16.696 --> 00:03:23.469
has just told you that it's
ready. The second parameter

00:03:23.469 --> 00:03:26.773
here is the id of the HTML div
that the embed is going to

00:03:26.773 --> 00:03:31.578
live in. As you'll notice,
this is "ytopiplayer," that we

00:03:31.578 --> 00:03:36.482
called up here. Then we got
width, height, and the

00:03:36.482 --> 00:03:41.187
required version of Flash that
the user needs. So remember

00:03:41.187 --> 00:03:43.590
that they need "8" or above to
be able to see your content

00:03:43.590 --> 00:03:48.294
correctly. And then a couple
of optional parameters we're

00:03:48.294 --> 00:03:51.097
not going to use. And the
parameters and attributes we

00:03:51.097 --> 00:03:55.068
set up here. Okay, now that
the embed is set up to receive

00:03:55.068 --> 00:03:57.470
API calls, let's do something
a little bit more interesting.

00:03:57.470 --> 00:03:58.871
Let's enter some commands.

00:03:58.871 --> 00:04:01.441
So here I've added
a couple of links

00:04:01.441 --> 00:04:03.543
We can control the player
using these instead of the

00:04:03.543 --> 00:04:12.252
buttons. I'll play and pause
it. Stop. Mute. Unmute. And

00:04:12.252 --> 00:04:15.355
so let me show you the really
simple calls that need to be

00:04:15.355 --> 00:04:18.658
made to set this up. As I was
saying before, once the player

00:04:18.658 --> 00:04:20.960
is loaded and ready to go, its
going to call

00:04:20.960 --> 00:04:23.062
"onYouTubePlayerReady."

00:04:23.062 --> 00:04:26.766
So here we're defining the
function. And we're just going

00:04:26.766 --> 00:04:29.435
to grab the reference to the
player and store it, so that we

00:04:29.435 --> 00:04:33.339
can issue API calls to it. With
that, we're ready to actually

00:04:33.339 --> 00:04:35.541
start making things happen.

00:04:35.541 --> 00:04:39.946
So this is how we set up those
links. This is really simple,

00:04:39.946 --> 00:04:44.651
just a link with an "onclick"
to this play function. And

00:04:44.651 --> 00:04:48.251
this is how we've defined it.
We're just doing a little

00:04:44.651 --> 00:04:50.256
error checking, making sure
it's not null, and then

00:04:50.256 --> 00:04:55.762
calling "ytplayer.playVideo."
It's that simple. Similarly,

00:04:55.762 --> 00:04:59.666
with pause we got
".pauseVideo," "stop,"

00:04:59.666 --> 00:05:05.505
"stopVideo," and then "mute"
and "unmute." It's as simple

00:05:05.505 --> 00:05:08.207
as that to issue these
commands to the player. Now

00:05:08.207 --> 00:05:10.910
that we've issued some basic
commands, let's try to take

00:05:10.910 --> 00:05:18.618
some input and seek to 90
seconds into this video.

00:05:18.618 --> 00:05:21.020
And this is just as easy as
the other commands, and I'll

00:05:21.020 --> 00:05:22.922
show you how to do that.

00:05:22.922 --> 00:05:27.527
So here's a little form we
made to get user input on how

00:05:27.527 --> 00:05:30.530
many seconds to seek to in the
video. We're calling the

00:05:30.530 --> 00:05:33.333
"seekTo" function here and
we're just grabbing the value

00:05:33.333 --> 00:05:36.402
in the text box. And here's
how we're defining the

00:05:36.402 --> 00:05:38.504
function, very similar to what
we did in before

00:05:38.504 --> 00:05:42.508
"ytplayer.seekTo." The
seconds we just passed in and

00:05:42.508 --> 00:05:46.012
whether or not we want to make
a new request to the server if

00:05:46.012 --> 00:05:52.218
the "seekTo" position is
beyond the loaded video. So

00:05:52.218 --> 00:05:54.220
now that we've issued commands
to the player, let's try to get

00:05:54.220 --> 00:05:58.324
some data from it. Useful data
to have is what the current

00:05:58.324 --> 00:06:01.794
time of the player is, how far
the user is in the video. So

00:06:01.794 --> 00:06:07.600
if we hit play here, you'll
see that the current time div

00:06:07.600 --> 00:06:10.269
here is updating.

00:06:10.269 --> 00:06:12.271
So to constantly display the
current time of the video, we

00:06:12.271 --> 00:06:13.673
are going to go back to

00:06:13.673 --> 00:06:18.678
"onYouTubePlayerReady." We're
going to add an interval for

00:06:18.678 --> 00:06:21.781
every 250 milliseconds. So
every 250 milliseconds is

00:06:21.781 --> 00:06:23.583
going to be called
"updateCurrentTime," which

00:06:23.583 --> 00:06:26.486
just calls
"ytplayer.getCurrentTime" and

00:06:26.486 --> 00:06:30.189
updates the HTML. You can also
get other data like the

00:06:30.189 --> 00:06:34.594
duration of the video, the URL
of the video, and the embed

00:06:34.594 --> 00:06:38.498
code.  So now that we've
issued commands to the player,

00:06:38.498 --> 00:06:41.768
gotten data from it. Let's see
how we can subscribe to events.

00:06:41.768 --> 00:06:46.172
In this case, let's have the
player tell us every time it

00:06:46.172 --> 00:06:49.275
changes it's state. So right
here you can see that the

00:06:49.275 --> 00:06:53.679
player is in state 5, which is
video queued. If I hit play,

00:06:53.679 --> 00:06:58.084
it goes into buffering and
then to 1, which is playing.

00:06:58.084 --> 00:07:01.254
I pause it, it goes into 2
and so on. So let me show you

00:07:01.254 --> 00:07:04.657
how to subscribe to an event.
Now if we want to constantly

00:07:04.657 --> 00:07:07.860
show the current player state,
we're going to go back to

00:07:07.860 --> 00:07:10.663
"onYouTubePlayerReady" and
we're going to add an event

00:07:10.663 --> 00:07:15.635
listener by saying
"ytplayer.addEventListener."

00:07:15.635 --> 00:07:19.238
We're going to subscribe to
the "onStateChange" event.

00:07:19.238 --> 00:07:22.942
And the "onStateChange" event
is going to use our callback

00:07:22.942 --> 00:07:28.347
function right here and pass
it the current state.

00:07:28.347 --> 00:07:33.352
And here we are just updating
the HTML. Now you know the

00:07:33.352 --> 00:07:36.055
basics of the JavaScript API.
How to issue commands, how to

00:07:36.055 --> 00:07:39.258
get data, and how to listen
for events. The Flash APIs

00:07:39.258 --> 00:07:41.961
have all the same calls and
the same functionality, but

00:07:41.961 --> 00:07:44.464
loading the YouTube players
swf into another swf is a

00:07:44.464 --> 00:07:47.366
little trickier. Because of
the architecture of the

00:07:47.366 --> 00:07:49.235
player's swf, using the action
script's built-in

00:07:49.235 --> 00:07:51.537
"MovieClipLoader" will not
give you accurate information

00:07:51.537 --> 00:07:52.839
about when the player is ready.

00:07:52.839 --> 00:07:55.141
So, here's a snippet of code
that loads the YouTube player

00:07:55.141 --> 00:08:01.414
into Flash. We create a new
"MovieClipLoader" here.

00:08:01.414 --> 00:08:07.320
Then we load a YouTube swf
into it and call it "ytPlayer."

00:08:07.320 --> 00:08:12.225
This listener will check every
250 milliseconds whether the

00:08:12.225 --> 00:08:16.429
player is loaded or not. Now
this is the extra call that is

00:08:16.429 --> 00:08:20.233
not in the JavaScript API.
"ytplayer.isPlayerLoaded" is

00:08:20.233 --> 00:08:22.502
what you should use in action
script to check if a player is

00:08:22.502 --> 00:08:27.807
loaded or not. Once this is
true, we can go ahead and do

00:08:27.807 --> 00:08:30.009
all the things I talked about
before with the JavaScript API,

00:08:30.009 --> 00:08:33.412
like addEventListeners.

00:08:33.412 --> 00:08:36.115
Now that you know all about
our Player APIs, let's talk

00:08:36.115 --> 00:08:37.817
about the Chromeless Player.

00:08:37.817 --> 00:08:40.219
As I was saying before, the
Chromeless Player is just a

00:08:40.219 --> 00:08:44.223
swf with no buttons. You can
customize it to look however

00:08:44.223 --> 00:08:48.227
you want. So for example, on
this site they're using the

00:08:48.227 --> 00:08:51.130
Chromeless Player. Using their

00:08:51.130 --> 00:09:03.075
own buttons, and then using
the player APIs to control it.

00:09:03.075 --> 00:09:05.378
So here's an example, very
similar to what we had before

00:09:05.378 --> 00:09:07.780
except that we're using the
Chromeless Player. You'll

00:09:07.780 --> 00:09:10.283
notice that the buttons are
gone and the progress bar.

00:09:10.283 --> 00:09:13.085
All that's left is the YouTube
logo here in the bottom right

00:09:13.085 --> 00:09:16.289
hand corner. It uses the same
JavaScript APIs that we've

00:09:16.289 --> 00:09:19.292
been talking about, so I can
control it with this links.

00:09:19.292 --> 00:09:23.696
Play. Pause And you already
pretty much know how to set this

00:09:23.696 --> 00:09:26.899
up, except that the swf URL is
different. So let me show you

00:09:26.899 --> 00:09:29.468
that right now. So one thing
that's different about the

00:09:29.468 --> 00:09:32.371
Chromeless Player from the
regular embedded player is

00:09:32.371 --> 00:09:35.074
that you need a developer key
to access it. So if you don't

00:09:35.074 --> 00:09:38.377
have a developer key, head
over to code.google.com and

00:09:38.377 --> 00:09:43.583
get one. It's free and really
easy to sign up. Now this code

00:09:43.583 --> 00:09:47.486
should look really familiar
to you. The only difference

00:09:47.486 --> 00:09:49.689
between embedding the
Chromeless Player in a page

00:09:49.689 --> 00:09:51.991
and embedding a regular
YouTube embedded player,

00:09:51.991 --> 00:09:55.795
is the swf URL. So you can
see here the URL for the

00:09:55.795 --> 00:10:00.900
Chromeless Player swf is
gdata.youtube.com/apiplayer.

00:10:00.900 --> 00:10:03.169
Here's where you put your
developer key.

00:10:03.169 --> 00:10:09.175
And then the other two
parameters are the same.

00:10:09.175 --> 00:10:11.377
So now that you know how to
load up the Chromeless Player,

00:10:11.377 --> 00:10:13.479
let me point out a few
differences from the regular

00:10:13.479 --> 00:10:16.782
JavaScript API. You'll see
here this is actual what the

00:10:16.782 --> 00:10:18.684
Chromeless swf looks like when
you first load it when you

00:10:18.684 --> 00:10:21.087
first load it cause it doesn't
have a video id in it yet.

00:10:21.087 --> 00:10:28.294
So there's a load video id
function that we can call.

00:10:28.294 --> 00:10:36.068
And there it goes. There's
also a queue video function

00:10:36.068 --> 00:10:40.373
that you can call. So this
just loads the thumbnail and

00:10:40.373 --> 00:10:44.877
grab the video, but doesn't
start playing. To load a new

00:10:44.877 --> 00:10:47.179
video into the Chromeless
Player, we just call a

00:10:47.179 --> 00:10:51.684
"ytplaer.loadVideoById," pass
it in "id," and optionally

00:10:51.684 --> 00:10:56.188
where in the player we want it
to start at. Similarly, for

00:10:56.188 --> 00:11:00.893
"cueNewVideo,"  we call
"ytplaer.cueVideoBGyId," pass

00:11:00.893 --> 00:11:04.964
the "id," and where in the
video we want it to start once

00:11:04.964 --> 00:11:09.935
the player has issues a play
command. Hopefully, this give

00:11:09.935 --> 00:11:12.138
you a good idea about what
these new tools are and what

00:11:12.138 --> 00:11:14.140
you can do with them. There
are a lot of things I didn't

00:11:14.140 --> 00:11:16.542
cover here, so be sure to
check out the documentation

00:11:16.542 --> 00:11:17.742
on code.google.com

