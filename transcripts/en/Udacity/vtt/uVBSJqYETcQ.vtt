WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.510
For these simple examples here, it's very easy to check

00:00:02.510 --> 00:00:06.410
if the program stops on a given input or does not stop.

00:00:06.410 --> 00:00:10.310
What if we had an algorithm that could solve the halting problem

00:00:10.310 --> 00:00:13.380
for any computer program and any input?

00:00:13.380 --> 00:00:15.550
That would actually be immensely useful.

00:00:15.550 --> 00:00:19.430
For example, in software testing or in debugging, you would just write your code

00:00:19.430 --> 00:00:23.850
and then ask the algorithm, "Does this code go into an infinite loop at some time?"

00:00:23.850 --> 00:00:26.400
And the algorithm would tell you if everything is okay.

00:00:26.400 --> 00:00:29.700
So, of course, there might be other errors, but at least you've eliminated

00:00:29.700 --> 00:00:32.619
1 very annoying way for a program to crash.

00:00:32.619 --> 00:00:34.760
So let's assume we had such an algorithm.

00:00:34.760 --> 00:00:38.890
So we had an algorithm, and that algorithm, or function, is called "halt,"

00:00:38.890 --> 00:00:43.120
and halt is called with 2 arguments: 1 is a program, the other is the input.

00:00:43.120 --> 00:00:46.840
And, of course, this here is a string, and this 1 over here is a string as well.

00:00:46.840 --> 00:00:50.620
And our specification will be "halt solves the halting problem."

00:00:50.620 --> 00:00:54.660
Notice that we do not say how long halt has time for this.

00:00:54.660 --> 00:00:59.070
So halt can be an amazingly, amazingly complicated algorithm.

00:00:59.070 --> 00:01:02.260
It basically has unlimited resources.

00:01:02.260 --> 00:01:04.950
This algorithm can solve NP-complete problems, it can solve

00:01:04.950 --> 00:01:07.270
verse problems, we don't really care.

00:01:07.270 --> 00:01:10.220
The only thing that we care about is that halt solves

00:01:10.220 --> 00:01:13.570
the halting problem in some finite amount of time.

00:01:13.570 --> 00:01:17.420
So even in 1,000 years, 2,000 years, we don't care.

00:01:17.420 --> 00:01:22.710
As long as halt is guaranteed to solve this problem for any program and for any input,

00:01:22.710 --> 00:01:27.610
then we're satisfied. No further requirements other then that, after a certain amount of time

00:01:27.610 --> 00:01:33.040
the algorithm either says "Yes. This problem stops on the input," or "No."

00:01:33.040 --> 00:01:35.040
And now comes the amazing part.

00:01:35.040 --> 00:01:39.870
I can prove to you that this algorithm cannot exist.

00:01:39.870 --> 00:01:46.880
There is no algorithm, no matter how clever, how sophisticated, that can solve the halting problem.

00:01:46.880 --> 00:01:51.080
The halting problem, in other words, is known as a problem that is undecidable,

00:01:51.080 --> 00:01:53.410
by which we mean that no computer program or algorithm

00:01:53.410 --> 00:02:00.520
can reliably decide the halting problem for all possible combinations of programs and inputs.

00:02:00.520 --> 00:02:04.560
So how do we show that? You might remember from our proof of NP-completeness

00:02:04.560 --> 00:02:08.870
that considering all possible algorithms for a problem can sometimes

00:02:08.870 --> 00:02:11.800
lead to very, very messy mathematical proofs.

00:02:11.800 --> 00:02:14.000
In this case, however, the proof is actually not that difficult.

00:02:14.000 --> 99:59:59.000
So we're going to go through it together.

