WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:04.990
 
[Music]

00:00:04.990 --> 00:00:05.000
[Music]
 

00:00:05.000 --> 00:00:09.169
[Music]
I work on the developer tools team hi my

00:00:09.169 --> 00:00:09.179
I work on the developer tools team hi my
 

00:00:09.179 --> 00:00:11.120
I work on the developer tools team hi my
name is Armas and I am from Android

00:00:11.120 --> 00:00:11.130
name is Armas and I am from Android
 

00:00:11.130 --> 00:00:13.549
name is Armas and I am from Android
toolkit team seems like everyone is very

00:00:13.549 --> 00:00:13.559
toolkit team seems like everyone is very
 

00:00:13.559 --> 00:00:15.200
toolkit team seems like everyone is very
awake which is great thanks for the

00:00:15.200 --> 00:00:15.210
awake which is great thanks for the
 

00:00:15.210 --> 00:00:17.750
awake which is great thanks for the
attention to you guys giving us anyway

00:00:17.750 --> 00:00:17.760
attention to you guys giving us anyway
 

00:00:17.760 --> 00:00:19.790
attention to you guys giving us anyway
so we're gonna be talking about building

00:00:19.790 --> 00:00:19.800
so we're gonna be talking about building
 

00:00:19.800 --> 00:00:21.980
so we're gonna be talking about building
bigger better from a perspective of a

00:00:21.980 --> 00:00:21.990
bigger better from a perspective of a
 

00:00:21.990 --> 00:00:24.800
bigger better from a perspective of a
big Gradle project Android X and as well

00:00:24.800 --> 00:00:24.810
big Gradle project Android X and as well
 

00:00:24.810 --> 00:00:26.870
big Gradle project Android X and as well
as Android studio we're here to

00:00:26.870 --> 00:00:26.880
as Android studio we're here to
 

00:00:26.880 --> 00:00:28.490
as Android studio we're here to
hopefully dispel the myth that you

00:00:28.490 --> 00:00:28.500
hopefully dispel the myth that you
 

00:00:28.500 --> 00:00:32.720
hopefully dispel the myth that you
cannot build big projects in Gradle so

00:00:32.720 --> 00:00:32.730
cannot build big projects in Gradle so
 

00:00:32.730 --> 00:00:34.940
cannot build big projects in Gradle so
every project starts simple but quickly

00:00:34.940 --> 00:00:34.950
every project starts simple but quickly
 

00:00:34.950 --> 00:00:36.500
every project starts simple but quickly
over as you add more and more features

00:00:36.500 --> 00:00:36.510
over as you add more and more features
 

00:00:36.510 --> 00:00:39.319
over as you add more and more features
it gets really complicated and for my

00:00:39.319 --> 00:00:39.329
it gets really complicated and for my
 

00:00:39.329 --> 00:00:41.990
it gets really complicated and for my
work on Chrome for Android and Android X

00:00:41.990 --> 00:00:42.000
work on Chrome for Android and Android X
 

00:00:42.000 --> 00:00:43.639
work on Chrome for Android and Android X
formerly known as support library I

00:00:43.639 --> 00:00:43.649
formerly known as support library I
 

00:00:43.649 --> 00:00:45.139
formerly known as support library I
learned that Android projects are just

00:00:45.139 --> 00:00:45.149
learned that Android projects are just
 

00:00:45.149 --> 00:00:47.029
learned that Android projects are just
the same they start as big monolithic

00:00:47.029 --> 00:00:47.039
the same they start as big monolithic
 

00:00:47.039 --> 00:00:50.180
the same they start as big monolithic
projects they grow over time and each

00:00:50.180 --> 00:00:50.190
projects they grow over time and each
 

00:00:50.190 --> 00:00:53.029
projects they grow over time and each
incremental change makes sense for some

00:00:53.029 --> 00:00:53.039
incremental change makes sense for some
 

00:00:53.039 --> 00:00:54.740
incremental change makes sense for some
context over the past 6 years

00:00:54.740 --> 00:00:54.750
context over the past 6 years
 

00:00:54.750 --> 00:00:58.430
context over the past 6 years
Android X drew from 5 to 240 Gradle

00:00:58.430 --> 00:00:58.440
Android X drew from 5 to 240 Gradle
 

00:00:58.440 --> 00:01:01.010
Android X drew from 5 to 240 Gradle
projects we went from 90 thousand lines

00:01:01.010 --> 00:01:01.020
projects we went from 90 thousand lines
 

00:01:01.020 --> 00:01:03.920
projects we went from 90 thousand lines
of code to over 400,000 we have an order

00:01:03.920 --> 00:01:03.930
of code to over 400,000 we have an order
 

00:01:03.930 --> 00:01:05.840
of code to over 400,000 we have an order
of magnitude more commits writing all

00:01:05.840 --> 00:01:05.850
of magnitude more commits writing all
 

00:01:05.850 --> 00:01:07.340
of magnitude more commits writing all
the cool libraries for you guys like

00:01:07.340 --> 00:01:07.350
the cool libraries for you guys like
 

00:01:07.350 --> 00:01:10.910
the cool libraries for you guys like
jetpack compose and others but as you

00:01:10.910 --> 00:01:10.920
jetpack compose and others but as you
 

00:01:10.920 --> 00:01:12.590
jetpack compose and others but as you
can imagine the initial Gradle config

00:01:12.590 --> 00:01:12.600
can imagine the initial Gradle config
 

00:01:12.600 --> 00:01:14.600
can imagine the initial Gradle config
just couldn't keep up with this it was

00:01:14.600 --> 00:01:14.610
just couldn't keep up with this it was
 

00:01:14.610 --> 00:01:16.429
just couldn't keep up with this it was
like not good enough of a setup so in

00:01:16.429 --> 00:01:16.439
like not good enough of a setup so in
 

00:01:16.439 --> 00:01:18.800
like not good enough of a setup so in
this talk we will focus on how we made

00:01:18.800 --> 00:01:18.810
this talk we will focus on how we made
 

00:01:18.810 --> 00:01:21.830
this talk we will focus on how we made
it better and how we improved so let me

00:01:21.830 --> 00:01:21.840
it better and how we improved so let me
 

00:01:21.840 --> 00:01:23.660
it better and how we improved so let me
state the obvious when it comes to

00:01:23.660 --> 00:01:23.670
state the obvious when it comes to
 

00:01:23.670 --> 00:01:27.050
state the obvious when it comes to
builds modularization is good you first

00:01:27.050 --> 00:01:27.060
builds modularization is good you first
 

00:01:27.060 --> 00:01:29.030
builds modularization is good you first
of all get more parallelism so you are

00:01:29.030 --> 00:01:29.040
of all get more parallelism so you are
 

00:01:29.040 --> 00:01:30.920
of all get more parallelism so you are
able to compile multiple projects at the

00:01:30.920 --> 00:01:30.930
able to compile multiple projects at the
 

00:01:30.930 --> 00:01:33.319
able to compile multiple projects at the
same time you also get more compilation

00:01:33.319 --> 00:01:33.329
same time you also get more compilation
 

00:01:33.329 --> 00:01:35.300
same time you also get more compilation
avoidance because Gradle is able to skip

00:01:35.300 --> 00:01:35.310
avoidance because Gradle is able to skip
 

00:01:35.310 --> 00:01:38.210
avoidance because Gradle is able to skip
certain libraries in cases for your

00:01:38.210 --> 00:01:38.220
certain libraries in cases for your
 

00:01:38.220 --> 00:01:40.580
certain libraries in cases for your
fetches you're often invalidating fewer

00:01:40.580 --> 00:01:40.590
fetches you're often invalidating fewer
 

00:01:40.590 --> 00:01:42.819
fetches you're often invalidating fewer
projects so you get more fewer cache

00:01:42.819 --> 00:01:42.829
projects so you get more fewer cache
 

00:01:42.829 --> 00:01:45.889
projects so you get more fewer cache
invalidations additionally you avoid

00:01:45.889 --> 00:01:45.899
invalidations additionally you avoid
 

00:01:45.899 --> 00:01:47.780
invalidations additionally you avoid
tangled dependencies that you get from

00:01:47.780 --> 00:01:47.790
tangled dependencies that you get from
 

00:01:47.790 --> 00:01:49.910
tangled dependencies that you get from
monolithic builds we definitely struggle

00:01:49.910 --> 00:01:49.920
monolithic builds we definitely struggle
 

00:01:49.920 --> 00:01:51.830
monolithic builds we definitely struggle
to that in android x4 libraries like

00:01:51.830 --> 00:01:51.840
to that in android x4 libraries like
 

00:01:51.840 --> 00:01:54.560
to that in android x4 libraries like
before we added a dozens of classes and

00:01:54.560 --> 00:01:54.570
before we added a dozens of classes and
 

00:01:54.570 --> 00:01:56.539
before we added a dozens of classes and
there was the dependencies Circulo a

00:01:56.539 --> 00:01:56.549
there was the dependencies Circulo a
 

00:01:56.549 --> 00:01:58.219
there was the dependencies Circulo a
so-called appendices but it made it

00:01:58.219 --> 00:01:58.229
so-called appendices but it made it
 

00:01:58.229 --> 00:01:59.690
so-called appendices but it made it
almost impossible to pull those

00:01:59.690 --> 00:01:59.700
almost impossible to pull those
 

00:01:59.700 --> 00:02:02.420
almost impossible to pull those
libraries apart into smaller pieces and

00:02:02.420 --> 00:02:02.430
libraries apart into smaller pieces and
 

00:02:02.430 --> 00:02:05.359
libraries apart into smaller pieces and
finally you get to test your libraries

00:02:05.359 --> 00:02:05.369
finally you get to test your libraries
 

00:02:05.369 --> 00:02:07.310
finally you get to test your libraries
easier because now your libraries live

00:02:07.310 --> 00:02:07.320
easier because now your libraries live
 

00:02:07.320 --> 00:02:09.680
easier because now your libraries live
the tests next to them so you exactly

00:02:09.680 --> 00:02:09.690
the tests next to them so you exactly
 

00:02:09.690 --> 00:02:13.550
the tests next to them so you exactly
know what to test when you make a change

00:02:13.550 --> 00:02:13.560
know what to test when you make a change
 

00:02:13.560 --> 00:02:15.380
know what to test when you make a change
in architecture components for example

00:02:15.380 --> 00:02:15.390
in architecture components for example
 

00:02:15.390 --> 00:02:16.940
in architecture components for example
we found that creating pure Java

00:02:16.940 --> 00:02:16.950
we found that creating pure Java
 

00:02:16.950 --> 00:02:18.650
we found that creating pure Java
libraries as a common layer between

00:02:18.650 --> 00:02:18.660
libraries as a common layer between
 

00:02:18.660 --> 00:02:21.080
libraries as a common layer between
other libraries was really helpful first

00:02:21.080 --> 00:02:21.090
other libraries was really helpful first
 

00:02:21.090 --> 00:02:22.340
other libraries was really helpful first
of all you get the separation from

00:02:22.340 --> 00:02:22.350
of all you get the separation from
 

00:02:22.350 --> 00:02:24.320
of all you get the separation from
Android API S which lets you run those

00:02:24.320 --> 00:02:24.330
Android API S which lets you run those
 

00:02:24.330 --> 00:02:26.570
Android API S which lets you run those
tests on a host which is really fast

00:02:26.570 --> 00:02:26.580
tests on a host which is really fast
 

00:02:26.580 --> 00:02:28.190
tests on a host which is really fast
it's now running on the phone

00:02:28.190 --> 00:02:28.200
it's now running on the phone
 

00:02:28.200 --> 00:02:29.900
it's now running on the phone
additionally you get faster builds

00:02:29.900 --> 00:02:29.910
additionally you get faster builds
 

00:02:29.910 --> 00:02:34.070
additionally you get faster builds
because by definition these Android non

00:02:34.070 --> 00:02:34.080
because by definition these Android non
 

00:02:34.080 --> 00:02:36.920
because by definition these Android non
Android Java and Kotlin projects are a

00:02:36.920 --> 00:02:36.930
Android Java and Kotlin projects are a
 

00:02:36.930 --> 00:02:37.850
Android Java and Kotlin projects are a
lot lighter

00:02:37.850 --> 00:02:37.860
lot lighter
 

00:02:37.860 --> 00:02:40.810
lot lighter
they don't hand variants they don't have

00:02:40.810 --> 00:02:40.820
they don't hand variants they don't have
 

00:02:40.820 --> 00:02:42.800
they don't hand variants they don't have
Android resources they don't have

00:02:42.800 --> 00:02:42.810
Android resources they don't have
 

00:02:42.810 --> 00:02:45.380
Android resources they don't have
manifest and so on so for your project

00:02:45.380 --> 00:02:45.390
manifest and so on so for your project
 

00:02:45.390 --> 00:02:46.970
manifest and so on so for your project
if you can pull out these kind of

00:02:46.970 --> 00:02:46.980
if you can pull out these kind of
 

00:02:46.980 --> 00:02:47.960
if you can pull out these kind of
projects I would highly recommend

00:02:47.960 --> 00:02:47.970
projects I would highly recommend
 

00:02:47.970 --> 00:02:50.210
projects I would highly recommend
starting with making them pure cotton or

00:02:50.210 --> 00:02:50.220
starting with making them pure cotton or
 

00:02:50.220 --> 00:02:53.420
starting with making them pure cotton or
Java Gradle plugin plugins can be great

00:02:53.420 --> 00:02:53.430
Java Gradle plugin plugins can be great
 

00:02:53.430 --> 00:02:55.700
Java Gradle plugin plugins can be great
but overusing them can cause you issues

00:02:55.700 --> 00:02:55.710
but overusing them can cause you issues
 

00:02:55.710 --> 00:02:58.130
but overusing them can cause you issues
and wasted work for example if you have

00:02:58.130 --> 00:02:58.140
and wasted work for example if you have
 

00:02:58.140 --> 00:02:59.930
and wasted work for example if you have
a greater plugin for publishing to maven

00:02:59.930 --> 00:02:59.940
a greater plugin for publishing to maven
 

00:02:59.940 --> 00:03:02.090
a greater plugin for publishing to maven
you really should be applying it to the

00:03:02.090 --> 00:03:02.100
you really should be applying it to the
 

00:03:02.100 --> 00:03:04.670
you really should be applying it to the
project that needs to publish to maven

00:03:04.670 --> 00:03:04.680
project that needs to publish to maven
 

00:03:04.680 --> 00:03:05.990
project that needs to publish to maven
otherwise you're creating all these

00:03:05.990 --> 00:03:06.000
otherwise you're creating all these
 

00:03:06.000 --> 00:03:08.030
otherwise you're creating all these
tasks and you will be wasting time

00:03:08.030 --> 00:03:08.040
tasks and you will be wasting time
 

00:03:08.040 --> 00:03:10.520
tasks and you will be wasting time
so modular ization here helps you to

00:03:10.520 --> 00:03:10.530
so modular ization here helps you to
 

00:03:10.530 --> 00:03:12.650
so modular ization here helps you to
apply these kind of plugins to a much

00:03:12.650 --> 00:03:12.660
apply these kind of plugins to a much
 

00:03:12.660 --> 00:03:14.900
apply these kind of plugins to a much
smaller scope so you're applying it to a

00:03:14.900 --> 00:03:14.910
smaller scope so you're applying it to a
 

00:03:14.910 --> 00:03:17.120
smaller scope so you're applying it to a
smaller project that you know leads to

00:03:17.120 --> 00:03:17.130
smaller project that you know leads to
 

00:03:17.130 --> 00:03:20.140
smaller project that you know leads to
faster builds similarly to the plugins

00:03:20.140 --> 00:03:20.150
faster builds similarly to the plugins
 

00:03:20.150 --> 00:03:22.190
faster builds similarly to the plugins
annotation processors can waste time

00:03:22.190 --> 00:03:22.200
annotation processors can waste time
 

00:03:22.200 --> 00:03:25.160
annotation processors can waste time
especially none on incremental type so

00:03:25.160 --> 00:03:25.170
especially none on incremental type so
 

00:03:25.170 --> 00:03:26.750
especially none on incremental type so
for example if you use Android X rule

00:03:26.750 --> 00:03:26.760
for example if you use Android X rule
 

00:03:26.760 --> 00:03:28.850
for example if you use Android X rule
library you should really pull the

00:03:28.850 --> 00:03:28.860
library you should really pull the
 

00:03:28.860 --> 00:03:31.190
library you should really pull the
libraries that need room into a separate

00:03:31.190 --> 00:03:31.200
libraries that need room into a separate
 

00:03:31.200 --> 00:03:33.110
libraries that need room into a separate
project and run the annotation processor

00:03:33.110 --> 00:03:33.120
project and run the annotation processor
 

00:03:33.120 --> 00:03:35.210
project and run the annotation processor
just on that project that way you

00:03:35.210 --> 00:03:35.220
just on that project that way you
 

00:03:35.220 --> 00:03:37.700
just on that project that way you
isolate on what the annotation processor

00:03:37.700 --> 00:03:37.710
isolate on what the annotation processor
 

00:03:37.710 --> 00:03:41.510
isolate on what the annotation processor
runs thus increasing your speed if your

00:03:41.510 --> 00:03:41.520
runs thus increasing your speed if your
 

00:03:41.520 --> 00:03:43.670
runs thus increasing your speed if your
project is an application you should

00:03:43.670 --> 00:03:43.680
project is an application you should
 

00:03:43.680 --> 00:03:45.500
project is an application you should
really consider running lint only in the

00:03:45.500 --> 00:03:45.510
really consider running lint only in the
 

00:03:45.510 --> 00:03:48.380
really consider running lint only in the
final project because Android while lint

00:03:48.380 --> 00:03:48.390
final project because Android while lint
 

00:03:48.390 --> 00:03:50.030
final project because Android while lint
is wireless amazing and finding bugs as

00:03:50.030 --> 00:03:50.040
is wireless amazing and finding bugs as
 

00:03:50.040 --> 00:03:51.800
is wireless amazing and finding bugs as
you do modularization you're going to be

00:03:51.800 --> 00:03:51.810
you do modularization you're going to be
 

00:03:51.810 --> 00:03:53.210
you do modularization you're going to be
running it on more and more projects

00:03:53.210 --> 00:03:53.220
running it on more and more projects
 

00:03:53.220 --> 00:03:56.000
running it on more and more projects
slowing it down however I want to note

00:03:56.000 --> 00:03:56.010
slowing it down however I want to note
 

00:03:56.010 --> 00:03:57.860
slowing it down however I want to note
if you do ship libraries I would highly

00:03:57.860 --> 00:03:57.870
if you do ship libraries I would highly
 

00:03:57.870 --> 00:03:59.630
if you do ship libraries I would highly
recommend continuing to run lint on

00:03:59.630 --> 00:03:59.640
recommend continuing to run lint on
 

00:03:59.640 --> 00:04:01.490
recommend continuing to run lint on
those libraries because things like

00:04:01.490 --> 00:04:01.500
those libraries because things like
 

00:04:01.500 --> 00:04:04.280
those libraries because things like
minimum SDK affect Howell endurance and

00:04:04.280 --> 00:04:04.290
minimum SDK affect Howell endurance and
 

00:04:04.290 --> 00:04:06.710
minimum SDK affect Howell endurance and
you will return different results and

00:04:06.710 --> 00:04:06.720
you will return different results and
 

00:04:06.720 --> 00:04:09.710
you will return different results and
help you catch bugs we introduced the

00:04:09.710 --> 00:04:09.720
help you catch bugs we introduced the
 

00:04:09.720 --> 00:04:11.660
help you catch bugs we introduced the
concept of API and implementation over

00:04:11.660 --> 00:04:11.670
concept of API and implementation over
 

00:04:11.670 --> 00:04:14.150
concept of API and implementation over
two years ago it allows you to specify

00:04:14.150 --> 00:04:14.160
two years ago it allows you to specify
 

00:04:14.160 --> 00:04:16.280
two years ago it allows you to specify
your dependencies as implementation

00:04:16.280 --> 00:04:16.290
your dependencies as implementation
 

00:04:16.290 --> 00:04:18.080
your dependencies as implementation
details which essentially helps the

00:04:18.080 --> 00:04:18.090
details which essentially helps the
 

00:04:18.090 --> 00:04:19.580
details which essentially helps the
compilation avoidance that I mentioned

00:04:19.580 --> 00:04:19.590
compilation avoidance that I mentioned
 

00:04:19.590 --> 00:04:21.349
compilation avoidance that I mentioned
before if you want to learn more about

00:04:21.349 --> 00:04:21.359
before if you want to learn more about
 

00:04:21.359 --> 00:04:23.879
before if you want to learn more about
that there's a recording from

00:04:23.879 --> 00:04:23.889
that there's a recording from
 

00:04:23.889 --> 00:04:26.189
that there's a recording from
from yesterday but Zab off the talk that

00:04:26.189 --> 00:04:26.199
from yesterday but Zab off the talk that
 

00:04:26.199 --> 00:04:30.390
from yesterday but Zab off the talk that
Jeb did so it's not all great there are

00:04:30.390 --> 00:04:30.400
Jeb did so it's not all great there are
 

00:04:30.400 --> 00:04:31.980
Jeb did so it's not all great there are
some downsides of doing the breakdown

00:04:31.980 --> 00:04:31.990
some downsides of doing the breakdown
 

00:04:31.990 --> 00:04:34.260
some downsides of doing the breakdown
and one of the obvious ones is you have

00:04:34.260 --> 00:04:34.270
and one of the obvious ones is you have
 

00:04:34.270 --> 00:04:37.559
and one of the obvious ones is you have
a large accordance II graph so Gradle

00:04:37.559 --> 00:04:37.569
a large accordance II graph so Gradle
 

00:04:37.569 --> 00:04:39.689
a large accordance II graph so Gradle
has to load up more built files that

00:04:39.689 --> 00:04:39.699
has to load up more built files that
 

00:04:39.699 --> 00:04:41.040
has to load up more built files that
figure out what's going on and what the

00:04:41.040 --> 00:04:41.050
figure out what's going on and what the
 

00:04:41.050 --> 00:04:43.980
figure out what's going on and what the
dependencies are but often these are

00:04:43.980 --> 00:04:43.990
dependencies are but often these are
 

00:04:43.990 --> 00:04:45.929
dependencies are but often these are
offset by the fact that you're doing a

00:04:45.929 --> 00:04:45.939
offset by the fact that you're doing a
 

00:04:45.939 --> 00:04:47.519
offset by the fact that you're doing a
lot of saving from all the things that I

00:04:47.519 --> 00:04:47.529
lot of saving from all the things that I
 

00:04:47.529 --> 00:04:49.050
lot of saving from all the things that I
described before

00:04:49.050 --> 00:04:49.060
described before
 

00:04:49.060 --> 00:04:51.059
described before
one thing that is not so easy and not so

00:04:51.059 --> 00:04:51.069
one thing that is not so easy and not so
 

00:04:51.069 --> 00:04:52.350
one thing that is not so easy and not so
obvious is that you have a lot more

00:04:52.350 --> 00:04:52.360
obvious is that you have a lot more
 

00:04:52.360 --> 00:04:54.869
obvious is that you have a lot more
build files now and this is one of the

00:04:54.869 --> 00:04:54.879
build files now and this is one of the
 

00:04:54.879 --> 00:04:58.429
build files now and this is one of the
things we struggled a lot in Android X

00:04:58.429 --> 00:04:58.439
things we struggled a lot in Android X
 

00:04:58.439 --> 00:05:01.950
things we struggled a lot in Android X
so a standard practice for in software

00:05:01.950 --> 00:05:01.960
so a standard practice for in software
 

00:05:01.960 --> 00:05:03.089
so a standard practice for in software
engineering is not to repeat yourself

00:05:03.089 --> 00:05:03.099
engineering is not to repeat yourself
 

00:05:03.099 --> 00:05:04.920
engineering is not to repeat yourself
and the same applies to build

00:05:04.920 --> 00:05:04.930
and the same applies to build
 

00:05:04.930 --> 00:05:07.860
and the same applies to build
configuration files less so less code is

00:05:07.860 --> 00:05:07.870
configuration files less so less code is
 

00:05:07.870 --> 00:05:10.830
configuration files less so less code is
simply easier to manage in Android X for

00:05:10.830 --> 00:05:10.840
simply easier to manage in Android X for
 

00:05:10.840 --> 00:05:12.420
simply easier to manage in Android X for
example if you wanted to bump to a new

00:05:12.420 --> 00:05:12.430
example if you wanted to bump to a new
 

00:05:12.430 --> 00:05:14.580
example if you wanted to bump to a new
version of espresso that meant touching

00:05:14.580 --> 00:05:14.590
version of espresso that meant touching
 

00:05:14.590 --> 00:05:16.709
version of espresso that meant touching
100 builder Gradle files and doing the

00:05:16.709 --> 00:05:16.719
100 builder Gradle files and doing the
 

00:05:16.719 --> 00:05:19.110
100 builder Gradle files and doing the
same manual change every place and it

00:05:19.110 --> 00:05:19.120
same manual change every place and it
 

00:05:19.120 --> 00:05:20.459
same manual change every place and it
was really error-prone when it was

00:05:20.459 --> 00:05:20.469
was really error-prone when it was
 

00:05:20.469 --> 00:05:23.550
was really error-prone when it was
really easy to make a mistake so these

00:05:23.550 --> 00:05:23.560
really easy to make a mistake so these
 

00:05:23.560 --> 00:05:25.140
really easy to make a mistake so these
kind of explicit versions made it

00:05:25.140 --> 00:05:25.150
kind of explicit versions made it
 

00:05:25.150 --> 00:05:27.239
kind of explicit versions made it
difficult to upgrade and also was

00:05:27.239 --> 00:05:27.249
difficult to upgrade and also was
 

00:05:27.249 --> 00:05:29.490
difficult to upgrade and also was
unclear of what versions are used across

00:05:29.490 --> 00:05:29.500
unclear of what versions are used across
 

00:05:29.500 --> 00:05:34.829
unclear of what versions are used across
the project so one option to kind of get

00:05:34.829 --> 00:05:34.839
the project so one option to kind of get
 

00:05:34.839 --> 00:05:37.499
the project so one option to kind of get
around that is to use Gradle extras as a

00:05:37.499 --> 00:05:37.509
around that is to use Gradle extras as a
 

00:05:37.509 --> 00:05:39.540
around that is to use Gradle extras as a
stash so it allows you to put strings on

00:05:39.540 --> 00:05:39.550
stash so it allows you to put strings on
 

00:05:39.550 --> 00:05:42.119
stash so it allows you to put strings on
this object and then you set it up in

00:05:42.119 --> 00:05:42.129
this object and then you set it up in
 

00:05:42.129 --> 00:05:45.629
this object and then you set it up in
your root builder Gradle file then to

00:05:45.629 --> 00:05:45.639
your root builder Gradle file then to
 

00:05:45.639 --> 00:05:47.579
your root builder Gradle file then to
utilize them you can put it in each

00:05:47.579 --> 00:05:47.589
utilize them you can put it in each
 

00:05:47.589 --> 00:05:50.010
utilize them you can put it in each
projects as builds the Gradle file and

00:05:50.010 --> 00:05:50.020
projects as builds the Gradle file and
 

00:05:50.020 --> 00:05:51.779
projects as builds the Gradle file and
then use it there this solves a

00:05:51.779 --> 00:05:51.789
then use it there this solves a
 

00:05:51.789 --> 00:05:53.639
then use it there this solves a
centralization problem and makes it

00:05:53.639 --> 00:05:53.649
centralization problem and makes it
 

00:05:53.649 --> 00:05:55.290
centralization problem and makes it
really easy to update so instead of

00:05:55.290 --> 00:05:55.300
really easy to update so instead of
 

00:05:55.300 --> 00:05:56.670
really easy to update so instead of
having to touch hundreds of files you

00:05:56.670 --> 00:05:56.680
having to touch hundreds of files you
 

00:05:56.680 --> 00:05:58.740
having to touch hundreds of files you
touch it on one place and now you have

00:05:58.740 --> 00:05:58.750
touch it on one place and now you have
 

00:05:58.750 --> 00:06:00.450
touch it on one place and now you have
updated version across throughout your

00:06:00.450 --> 00:06:00.460
updated version across throughout your
 

00:06:00.460 --> 00:06:03.059
updated version across throughout your
project it can be further extended to

00:06:03.059 --> 00:06:03.069
project it can be further extended to
 

00:06:03.069 --> 00:06:05.219
project it can be further extended to
use this kind of extra property for

00:06:05.219 --> 00:06:05.229
use this kind of extra property for
 

00:06:05.229 --> 00:06:07.740
use this kind of extra property for
other things as well so in Android X we

00:06:07.740 --> 00:06:07.750
other things as well so in Android X we
 

00:06:07.750 --> 00:06:09.089
other things as well so in Android X we
use this a lot and it was very helpful

00:06:09.089 --> 00:06:09.099
use this a lot and it was very helpful
 

00:06:09.099 --> 00:06:11.490
use this a lot and it was very helpful
but sadly you do not get things like

00:06:11.490 --> 00:06:11.500
but sadly you do not get things like
 

00:06:11.500 --> 00:06:13.499
but sadly you do not get things like
autocomplete and you do not get to click

00:06:13.499 --> 00:06:13.509
autocomplete and you do not get to click
 

00:06:13.509 --> 00:06:14.790
autocomplete and you do not get to click
through and see what the version you're

00:06:14.790 --> 00:06:14.800
through and see what the version you're
 

00:06:14.800 --> 00:06:17.550
through and see what the version you're
actually are setting so to get around

00:06:17.550 --> 00:06:17.560
actually are setting so to get around
 

00:06:17.560 --> 00:06:18.570
actually are setting so to get around
that there is a way

00:06:18.570 --> 00:06:18.580
that there is a way
 

00:06:18.580 --> 00:06:20.850
that there is a way
so Gradle offers you an implicit build

00:06:20.850 --> 00:06:20.860
so Gradle offers you an implicit build
 

00:06:20.860 --> 00:06:22.679
so Gradle offers you an implicit build
that gets automatically added to the

00:06:22.679 --> 00:06:22.689
that gets automatically added to the
 

00:06:22.689 --> 00:06:24.899
that gets automatically added to the
build class path what you need to do is

00:06:24.899 --> 00:06:24.909
build class path what you need to do is
 

00:06:24.909 --> 00:06:26.519
build class path what you need to do is
to create a build source directory and

00:06:26.519 --> 00:06:26.529
to create a build source directory and
 

00:06:26.529 --> 00:06:28.320
to create a build source directory and
ad builder Gradle in there and that

00:06:28.320 --> 00:06:28.330
ad builder Gradle in there and that
 

00:06:28.330 --> 00:06:29.760
ad builder Gradle in there and that
logic will automatically get built

00:06:29.760 --> 00:06:29.770
logic will automatically get built
 

00:06:29.770 --> 00:06:31.170
logic will automatically get built
before your real project

00:06:31.170 --> 00:06:31.180
before your real project
 

00:06:31.180 --> 00:06:32.699
before your real project
and you will get added to your build

00:06:32.699 --> 00:06:32.709
and you will get added to your build
 

00:06:32.709 --> 00:06:33.810
and you will get added to your build
class path

00:06:33.810 --> 00:06:33.820
class path
 

00:06:33.820 --> 00:06:36.180
class path
so solving the same dependencies for a

00:06:36.180 --> 00:06:36.190
so solving the same dependencies for a
 

00:06:36.190 --> 00:06:39.720
so solving the same dependencies for a
problem you can create a cotton file and

00:06:39.720 --> 00:06:39.730
problem you can create a cotton file and
 

00:06:39.730 --> 00:06:42.450
problem you can create a cotton file and
build source and just like in step one

00:06:42.450 --> 00:06:42.460
build source and just like in step one
 

00:06:42.460 --> 00:06:44.460
build source and just like in step one
you have the same thing but now you're

00:06:44.460 --> 00:06:44.470
you have the same thing but now you're
 

00:06:44.470 --> 00:06:46.470
you have the same thing but now you're
setting writing it all in cotton and

00:06:46.470 --> 00:06:46.480
setting writing it all in cotton and
 

00:06:46.480 --> 00:06:49.860
setting writing it all in cotton and
then similarly also refer to it in your

00:06:49.860 --> 00:06:49.870
then similarly also refer to it in your
 

00:06:49.870 --> 00:06:51.840
then similarly also refer to it in your
build our Gradle files we eventually

00:06:51.840 --> 00:06:51.850
build our Gradle files we eventually
 

00:06:51.850 --> 00:06:54.720
build our Gradle files we eventually
move to this style to specify all of our

00:06:54.720 --> 00:06:54.730
move to this style to specify all of our
 

00:06:54.730 --> 00:06:56.940
move to this style to specify all of our
dependencies in Android X it gives you

00:06:56.940 --> 00:06:56.950
dependencies in Android X it gives you
 

00:06:56.950 --> 00:06:58.770
dependencies in Android X it gives you
the same centralization benefits

00:06:58.770 --> 00:06:58.780
the same centralization benefits
 

00:06:58.780 --> 00:07:01.350
the same centralization benefits
you also get autocomplete and you get to

00:07:01.350 --> 00:07:01.360
you also get autocomplete and you get to
 

00:07:01.360 --> 00:07:03.840
you also get autocomplete and you get to
click through to see the versions that

00:07:03.840 --> 00:07:03.850
click through to see the versions that
 

00:07:03.850 --> 00:07:06.390
click through to see the versions that
you are actually using so we Android X

00:07:06.390 --> 00:07:06.400
you are actually using so we Android X
 

00:07:06.400 --> 00:07:07.230
you are actually using so we Android X
we found that there's way more

00:07:07.230 --> 00:07:07.240
we found that there's way more
 

00:07:07.240 --> 00:07:09.390
we found that there's way more
configuration that we found the same

00:07:09.390 --> 00:07:09.400
configuration that we found the same
 

00:07:09.400 --> 00:07:11.100
configuration that we found the same
from build file to build file to build

00:07:11.100 --> 00:07:11.110
from build file to build file to build
 

00:07:11.110 --> 00:07:12.750
from build file to build file to build
file and a lot of these who are coming

00:07:12.750 --> 00:07:12.760
file and a lot of these who are coming
 

00:07:12.760 --> 00:07:14.880
file and a lot of these who are coming
from Android Gradle plugin and that

00:07:14.880 --> 00:07:14.890
from Android Gradle plugin and that
 

00:07:14.890 --> 00:07:18.480
from Android Gradle plugin and that
Gradle the Android DSL so using extra

00:07:18.480 --> 00:07:18.490
Gradle the Android DSL so using extra
 

00:07:18.490 --> 00:07:19.740
Gradle the Android DSL so using extra
property like we did in the beginning

00:07:19.740 --> 00:07:19.750
property like we did in the beginning
 

00:07:19.750 --> 00:07:21.930
property like we did in the beginning
did not quite scale because you cannot

00:07:21.930 --> 00:07:21.940
did not quite scale because you cannot
 

00:07:21.940 --> 00:07:23.640
did not quite scale because you cannot
think create things like flavors and

00:07:23.640 --> 00:07:23.650
think create things like flavors and
 

00:07:23.650 --> 00:07:27.030
think create things like flavors and
stuff very easily at the root so brittle

00:07:27.030 --> 00:07:27.040
stuff very easily at the root so brittle
 

00:07:27.040 --> 00:07:29.070
stuff very easily at the root so brittle
handles configuration via plugins most

00:07:29.070 --> 00:07:29.080
handles configuration via plugins most
 

00:07:29.080 --> 00:07:30.420
handles configuration via plugins most
of the time and you can create one of

00:07:30.420 --> 00:07:30.430
of the time and you can create one of
 

00:07:30.430 --> 00:07:33.990
of the time and you can create one of
your own inbuilt source in Android X in

00:07:33.990 --> 00:07:34.000
your own inbuilt source in Android X in
 

00:07:34.000 --> 00:07:35.880
your own inbuilt source in Android X in
Android X we created one of them to set

00:07:35.880 --> 00:07:35.890
Android X we created one of them to set
 

00:07:35.890 --> 00:07:37.680
Android X we created one of them to set
the common properties that were common

00:07:37.680 --> 00:07:37.690
the common properties that were common
 

00:07:37.690 --> 00:07:40.590
the common properties that were common
across all the projects in in in this

00:07:40.590 --> 00:07:40.600
across all the projects in in in this
 

00:07:40.600 --> 00:07:42.000
across all the projects in in in this
slide the important part is to override

00:07:42.000 --> 00:07:42.010
slide the important part is to override
 

00:07:42.010 --> 00:07:44.130
slide the important part is to override
the apply method that's the one gets

00:07:44.130 --> 00:07:44.140
the apply method that's the one gets
 

00:07:44.140 --> 00:07:46.950
the apply method that's the one gets
called when you apply the plugin and

00:07:46.950 --> 00:07:46.960
called when you apply the plugin and
 

00:07:46.960 --> 00:07:49.950
called when you apply the plugin and
when you are applied you can react when

00:07:49.950 --> 00:07:49.960
when you are applied you can react when
 

00:07:49.960 --> 00:07:51.600
when you are applied you can react when
other plugins are added so for example

00:07:51.600 --> 00:07:51.610
other plugins are added so for example
 

00:07:51.610 --> 00:07:53.910
other plugins are added so for example
if Android Gradle plugin is added you

00:07:53.910 --> 00:07:53.920
if Android Gradle plugin is added you
 

00:07:53.920 --> 00:07:55.920
if Android Gradle plugin is added you
can react to it and then you can take

00:07:55.920 --> 00:07:55.930
can react to it and then you can take
 

00:07:55.930 --> 00:07:57.480
can react to it and then you can take
the extension which is essentially the

00:07:57.480 --> 00:07:57.490
the extension which is essentially the
 

00:07:57.490 --> 00:08:00.420
the extension which is essentially the
backing store that you can use in build

00:08:00.420 --> 00:08:00.430
backing store that you can use in build
 

00:08:00.430 --> 00:08:02.820
backing store that you can use in build
our Gradle files behind the Android DSL

00:08:02.820 --> 00:08:02.830
our Gradle files behind the Android DSL
 

00:08:02.830 --> 00:08:05.790
our Gradle files behind the Android DSL
and you can set things up so one thing

00:08:05.790 --> 00:08:05.800
and you can set things up so one thing
 

00:08:05.800 --> 00:08:07.680
and you can set things up so one thing
to note here you can have one custom

00:08:07.680 --> 00:08:07.690
to note here you can have one custom
 

00:08:07.690 --> 00:08:09.840
to note here you can have one custom
plug-in that you write that handles many

00:08:09.840 --> 00:08:09.850
plug-in that you write that handles many
 

00:08:09.850 --> 00:08:11.760
plug-in that you write that handles many
many external Pregnant's you don't need

00:08:11.760 --> 00:08:11.770
many external Pregnant's you don't need
 

00:08:11.770 --> 00:08:14.310
many external Pregnant's you don't need
to write one for each plug-in so in this

00:08:14.310 --> 00:08:14.320
to write one for each plug-in so in this
 

00:08:14.320 --> 00:08:16.140
to write one for each plug-in so in this
example this handles both Android

00:08:16.140 --> 00:08:16.150
example this handles both Android
 

00:08:16.150 --> 00:08:18.180
example this handles both Android
library plug-in and Android application

00:08:18.180 --> 00:08:18.190
library plug-in and Android application
 

00:08:18.190 --> 00:08:20.670
library plug-in and Android application
plugin and then as you get up you do

00:08:20.670 --> 00:08:20.680
plugin and then as you get up you do
 

00:08:20.680 --> 00:08:23.520
plugin and then as you get up you do
just get automatically set up so here

00:08:23.520 --> 00:08:23.530
just get automatically set up so here
 

00:08:23.530 --> 00:08:25.380
just get automatically set up so here
you have the same power as you had in

00:08:25.380 --> 00:08:25.390
you have the same power as you had in
 

00:08:25.390 --> 00:08:28.800
you have the same power as you had in
Android DSL in your build a cradle you

00:08:28.800 --> 00:08:28.810
Android DSL in your build a cradle you
 

00:08:28.810 --> 00:08:30.540
Android DSL in your build a cradle you
can set things like target SDK you can

00:08:30.540 --> 00:08:30.550
can set things like target SDK you can
 

00:08:30.550 --> 00:08:32.370
can set things like target SDK you can
set the default test run or enable

00:08:32.370 --> 00:08:32.380
set the default test run or enable
 

00:08:32.380 --> 00:08:34.710
set the default test run or enable
coverage and so on the two extensions

00:08:34.710 --> 00:08:34.720
coverage and so on the two extensions
 

00:08:34.720 --> 00:08:36.210
coverage and so on the two extensions
that you really care about our library

00:08:36.210 --> 00:08:36.220
that you really care about our library
 

00:08:36.220 --> 00:08:38.100
that you really care about our library
extension from the library plugin and

00:08:38.100 --> 00:08:38.110
extension from the library plugin and
 

00:08:38.110 --> 00:08:40.020
extension from the library plugin and
app extension from the application

00:08:40.020 --> 00:08:40.030
app extension from the application
 

00:08:40.030 --> 00:08:43.589
app extension from the application
plugin same is true for other plugins so

00:08:43.589 --> 00:08:43.599
plugin same is true for other plugins so
 

00:08:43.599 --> 00:08:44.880
plugin same is true for other plugins so
for example if you have a Java library

00:08:44.880 --> 00:08:44.890
for example if you have a Java library
 

00:08:44.890 --> 00:08:45.910
for example if you have a Java library
you

00:08:45.910 --> 00:08:45.920
you
 

00:08:45.920 --> 00:08:47.470
you
can also configure it in the same way

00:08:47.470 --> 00:08:47.480
can also configure it in the same way
 

00:08:47.480 --> 00:08:49.359
can also configure it in the same way
the only difference here that you have

00:08:49.359 --> 00:08:49.369
the only difference here that you have
 

00:08:49.369 --> 00:08:50.919
the only difference here that you have
to use a convention instead of an

00:08:50.919 --> 00:08:50.929
to use a convention instead of an
 

00:08:50.929 --> 00:08:54.789
to use a convention instead of an
extension it's very similar otherwise so

00:08:54.789 --> 00:08:54.799
extension it's very similar otherwise so
 

00:08:54.799 --> 00:08:56.229
extension it's very similar otherwise so
when you have this setup it's super easy

00:08:56.229 --> 00:08:56.239
when you have this setup it's super easy
 

00:08:56.239 --> 00:08:58.090
when you have this setup it's super easy
to apply and creating a new module

00:08:58.090 --> 00:08:58.100
to apply and creating a new module
 

00:08:58.100 --> 00:09:00.429
to apply and creating a new module
becomes trivial all your developers have

00:09:00.429 --> 00:09:00.439
becomes trivial all your developers have
 

00:09:00.439 --> 00:09:02.139
becomes trivial all your developers have
to do is throw in a few lines of code

00:09:02.139 --> 00:09:02.149
to do is throw in a few lines of code
 

00:09:02.149 --> 00:09:04.900
to do is throw in a few lines of code
and you and you're pretty much set so in

00:09:04.900 --> 00:09:04.910
and you and you're pretty much set so in
 

00:09:04.910 --> 00:09:07.150
and you and you're pretty much set so in
Android X specifically which you huge

00:09:07.150 --> 00:09:07.160
Android X specifically which you huge
 

00:09:07.160 --> 00:09:09.759
Android X specifically which you huge
gains of this we went to over from over

00:09:09.759 --> 00:09:09.769
gains of this we went to over from over
 

00:09:09.769 --> 00:09:12.429
gains of this we went to over from over
150 lines of code for build Gradle for

00:09:12.429 --> 00:09:12.439
150 lines of code for build Gradle for
 

00:09:12.439 --> 00:09:15.489
150 lines of code for build Gradle for
project to around 35 lines of code for

00:09:15.489 --> 00:09:15.499
project to around 35 lines of code for
 

00:09:15.499 --> 00:09:17.229
project to around 35 lines of code for
build our Gradle and considering we have

00:09:17.229 --> 00:09:17.239
build our Gradle and considering we have
 

00:09:17.239 --> 00:09:19.869
build our Gradle and considering we have
240 projects that's a huge savings

00:09:19.869 --> 00:09:19.879
240 projects that's a huge savings
 

00:09:19.879 --> 00:09:22.119
240 projects that's a huge savings
so in our plugin we set up things like

00:09:22.119 --> 00:09:22.129
so in our plugin we set up things like
 

00:09:22.129 --> 00:09:24.970
so in our plugin we set up things like
maven configuration for uploading we set

00:09:24.970 --> 00:09:24.980
maven configuration for uploading we set
 

00:09:24.980 --> 00:09:28.150
maven configuration for uploading we set
up Javadoc builds and and lint and other

00:09:28.150 --> 00:09:28.160
up Javadoc builds and and lint and other
 

00:09:28.160 --> 00:09:31.359
up Javadoc builds and and lint and other
uniform properties sadly we hit an issue

00:09:31.359 --> 00:09:31.369
uniform properties sadly we hit an issue
 

00:09:31.369 --> 00:09:33.309
uniform properties sadly we hit an issue
where if you want to do a custom

00:09:33.309 --> 00:09:33.319
where if you want to do a custom
 

00:09:33.319 --> 00:09:35.199
where if you want to do a custom
configuration just to one library for

00:09:35.199 --> 00:09:35.209
configuration just to one library for
 

00:09:35.209 --> 00:09:36.789
configuration just to one library for
example if one of your libraries has a

00:09:36.789 --> 00:09:36.799
example if one of your libraries has a
 

00:09:36.799 --> 00:09:40.030
example if one of your libraries has a
different minimum SDK version the set up

00:09:40.030 --> 00:09:40.040
different minimum SDK version the set up
 

00:09:40.040 --> 00:09:41.739
different minimum SDK version the set up
didn't really allow for that so we

00:09:41.739 --> 00:09:41.749
didn't really allow for that so we
 

00:09:41.749 --> 00:09:43.329
didn't really allow for that so we
needed to find a way to accommodate for

00:09:43.329 --> 00:09:43.339
needed to find a way to accommodate for
 

00:09:43.339 --> 00:09:46.299
needed to find a way to accommodate for
this kind of change so the first option

00:09:46.299 --> 00:09:46.309
this kind of change so the first option
 

00:09:46.309 --> 00:09:48.369
this kind of change so the first option
is just to set those custom values in

00:09:48.369 --> 00:09:48.379
is just to set those custom values in
 

00:09:48.379 --> 00:09:50.650
is just to set those custom values in
each library build a granule file in

00:09:50.650 --> 00:09:50.660
each library build a granule file in
 

00:09:50.660 --> 00:09:51.970
each library build a granule file in
this example we're setting a different

00:09:51.970 --> 00:09:51.980
this example we're setting a different
 

00:09:51.980 --> 00:09:54.429
this example we're setting a different
minimum SDK and different target Java

00:09:54.429 --> 00:09:54.439
minimum SDK and different target Java
 

00:09:54.439 --> 00:09:57.189
minimum SDK and different target Java
version in an Android X we did exactly

00:09:57.189 --> 00:09:57.199
version in an Android X we did exactly
 

00:09:57.199 --> 00:09:59.379
version in an Android X we did exactly
that so this is a real example from

00:09:59.379 --> 00:09:59.389
that so this is a real example from
 

00:09:59.389 --> 00:10:02.350
that so this is a real example from
lifecycle a runtime build up Gradle we

00:10:02.350 --> 00:10:02.360
lifecycle a runtime build up Gradle we
 

00:10:02.360 --> 00:10:04.659
lifecycle a runtime build up Gradle we
simply apply Android X plugin Android

00:10:04.659 --> 00:10:04.669
simply apply Android X plugin Android
 

00:10:04.669 --> 00:10:06.159
simply apply Android X plugin Android
library plugin we set up the

00:10:06.159 --> 00:10:06.169
library plugin we set up the
 

00:10:06.169 --> 00:10:08.769
library plugin we set up the
dependencies and just add some options

00:10:08.769 --> 00:10:08.779
dependencies and just add some options
 

00:10:08.779 --> 00:10:12.039
dependencies and just add some options
for Android DSL that are specific to

00:10:12.039 --> 00:10:12.049
for Android DSL that are specific to
 

00:10:12.049 --> 00:10:13.659
for Android DSL that are specific to
this library like this library actually

00:10:13.659 --> 00:10:13.669
this library like this library actually
 

00:10:13.669 --> 00:10:15.429
this library like this library actually
has ProGuard configs that we want to

00:10:15.429 --> 00:10:15.439
has ProGuard configs that we want to
 

00:10:15.439 --> 00:10:18.850
has ProGuard configs that we want to
ship inside of the AR one difference

00:10:18.850 --> 00:10:18.860
ship inside of the AR one difference
 

00:10:18.860 --> 00:10:21.460
ship inside of the AR one difference
here is we also created our own DSL that

00:10:21.460 --> 00:10:21.470
here is we also created our own DSL that
 

00:10:21.470 --> 00:10:23.319
here is we also created our own DSL that
allows us to tweak how our own plugin

00:10:23.319 --> 00:10:23.329
allows us to tweak how our own plugin
 

00:10:23.329 --> 00:10:26.049
allows us to tweak how our own plugin
works so when our plugin sets everything

00:10:26.049 --> 00:10:26.059
works so when our plugin sets everything
 

00:10:26.059 --> 00:10:27.939
works so when our plugin sets everything
up it reads these values and then we're

00:10:27.939 --> 00:10:27.949
up it reads these values and then we're
 

00:10:27.949 --> 00:10:31.029
up it reads these values and then we're
able to specify how our maven publishing

00:10:31.029 --> 00:10:31.039
able to specify how our maven publishing
 

00:10:31.039 --> 00:10:33.189
able to specify how our maven publishing
works so isn't it great to see all of

00:10:33.189 --> 00:10:33.199
works so isn't it great to see all of
 

00:10:33.199 --> 00:10:34.929
works so isn't it great to see all of
the configuration for one real

00:10:34.929 --> 00:10:34.939
the configuration for one real
 

00:10:34.939 --> 00:10:37.269
the configuration for one real
production library in two slides I sure

00:10:37.269 --> 00:10:37.279
production library in two slides I sure
 

00:10:37.279 --> 00:10:38.229
production library in two slides I sure
think so

00:10:38.229 --> 00:10:38.239
think so
 

00:10:38.239 --> 00:10:40.329
think so
and ZEB is gonna talk about how to set

00:10:40.329 --> 00:10:40.339
and ZEB is gonna talk about how to set
 

00:10:40.339 --> 00:10:49.000
and ZEB is gonna talk about how to set
up this custom Gradle DSL thank you

00:10:49.000 --> 00:10:49.010
 
 

00:10:49.010 --> 00:10:51.170
 
so let's say you want to configure your

00:10:51.170 --> 00:10:51.180
so let's say you want to configure your
 

00:10:51.180 --> 00:10:53.090
so let's say you want to configure your
own extension for your own plugin right

00:10:53.090 --> 00:10:53.100
own extension for your own plugin right
 

00:10:53.100 --> 00:10:54.940
own extension for your own plugin right
let's say let's take a very simple

00:10:54.940 --> 00:10:54.950
let's say let's take a very simple
 

00:10:54.950 --> 00:10:57.590
let's say let's take a very simple
example here you have your own plugin

00:10:57.590 --> 00:10:57.600
example here you have your own plugin
 

00:10:57.600 --> 00:10:59.360
example here you have your own plugin
and you just want to have my config with

00:10:59.360 --> 00:10:59.370
and you just want to have my config with
 

00:10:59.370 --> 00:11:01.730
and you just want to have my config with
one property in it so here I want to

00:11:01.730 --> 00:11:01.740
one property in it so here I want to
 

00:11:01.740 --> 00:11:04.070
one property in it so here I want to
proceed wanting to be a boolean notice

00:11:04.070 --> 00:11:04.080
proceed wanting to be a boolean notice
 

00:11:04.080 --> 00:11:07.130
proceed wanting to be a boolean notice
that there's no you know I'm using a

00:11:07.130 --> 00:11:07.140
that there's no you know I'm using a
 

00:11:07.140 --> 00:11:08.990
that there's no you know I'm using a
setter here and we're gonna see why in a

00:11:08.990 --> 00:11:09.000
setter here and we're gonna see why in a
 

00:11:09.000 --> 00:11:10.640
setter here and we're gonna see why in a
second so the first thing that you need

00:11:10.640 --> 00:11:10.650
second so the first thing that you need
 

00:11:10.650 --> 00:11:12.380
second so the first thing that you need
to do is to create an extension class

00:11:12.380 --> 00:11:12.390
to do is to create an extension class
 

00:11:12.390 --> 00:11:15.200
to do is to create an extension class
and this extension class is very basic

00:11:15.200 --> 00:11:15.210
and this extension class is very basic
 

00:11:15.210 --> 00:11:17.230
and this extension class is very basic
it doesn't need to extend anything and

00:11:17.230 --> 00:11:17.240
it doesn't need to extend anything and
 

00:11:17.240 --> 00:11:20.120
it doesn't need to extend anything and
so here I have it and I have my property

00:11:20.120 --> 00:11:20.130
so here I have it and I have my property
 

00:11:20.130 --> 00:11:22.700
so here I have it and I have my property
so notice two things the first one I'm

00:11:22.700 --> 00:11:22.710
so notice two things the first one I'm
 

00:11:22.710 --> 00:11:25.460
so notice two things the first one I'm
not declaring a boolean type I'm not

00:11:25.460 --> 00:11:25.470
not declaring a boolean type I'm not
 

00:11:25.470 --> 00:11:26.900
not declaring a boolean type I'm not
using a boolean type I'm using a

00:11:26.900 --> 00:11:26.910
using a boolean type I'm using a
 

00:11:26.910 --> 00:11:29.060
using a boolean type I'm using a
property boolean that is a new API in

00:11:29.060 --> 00:11:29.070
property boolean that is a new API in
 

00:11:29.070 --> 00:11:31.100
property boolean that is a new API in
greater that I introduced maybe about a

00:11:31.100 --> 00:11:31.110
greater that I introduced maybe about a
 

00:11:31.110 --> 00:11:34.670
greater that I introduced maybe about a
year ago and the second thing that you

00:11:34.670 --> 00:11:34.680
year ago and the second thing that you
 

00:11:34.680 --> 00:11:36.620
year ago and the second thing that you
can notice here is that I'm declaring

00:11:36.620 --> 00:11:36.630
can notice here is that I'm declaring
 

00:11:36.630 --> 00:11:38.960
can notice here is that I'm declaring
both the target the class and the

00:11:38.960 --> 00:11:38.970
both the target the class and the
 

00:11:38.970 --> 00:11:41.780
both the target the class and the
property as abstract so those property

00:11:41.780 --> 00:11:41.790
property as abstract so those property
 

00:11:41.790 --> 00:11:43.520
property as abstract so those property
object have to be instantiated in a very

00:11:43.520 --> 00:11:43.530
object have to be instantiated in a very
 

00:11:43.530 --> 00:11:45.800
object have to be instantiated in a very
special way and in order to do that

00:11:45.800 --> 00:11:45.810
special way and in order to do that
 

00:11:45.810 --> 00:11:47.930
special way and in order to do that
manually you have to inject a factory

00:11:47.930 --> 00:11:47.940
manually you have to inject a factory
 

00:11:47.940 --> 00:11:50.450
manually you have to inject a factory
into your class and it's really a lot of

00:11:50.450 --> 00:11:50.460
into your class and it's really a lot of
 

00:11:50.460 --> 00:11:51.800
into your class and it's really a lot of
boilerplate that you don't want to do so

00:11:51.800 --> 00:11:51.810
boilerplate that you don't want to do so
 

00:11:51.810 --> 00:11:54.440
boilerplate that you don't want to do so
studying ABI I think two versions of

00:11:54.440 --> 00:11:54.450
studying ABI I think two versions of
 

00:11:54.450 --> 00:11:56.720
studying ABI I think two versions of
greater ago if you declare your classes

00:11:56.720 --> 00:11:56.730
greater ago if you declare your classes
 

00:11:56.730 --> 00:11:57.860
greater ago if you declare your classes
as abstract

00:11:57.860 --> 00:11:57.870
as abstract
 

00:11:57.870 --> 00:11:59.120
as abstract
Grado is going to take care of it

00:11:59.120 --> 00:11:59.130
Grado is going to take care of it
 

00:11:59.130 --> 00:12:00.890
Grado is going to take care of it
because anyway what grader does is that

00:12:00.890 --> 00:12:00.900
because anyway what grader does is that
 

00:12:00.900 --> 00:12:03.770
because anyway what grader does is that
it never uses your type directly it'll

00:12:03.770 --> 00:12:03.780
it never uses your type directly it'll
 

00:12:03.780 --> 00:12:05.270
it never uses your type directly it'll
always extend your type and create a

00:12:05.270 --> 00:12:05.280
always extend your type and create a
 

00:12:05.280 --> 00:12:07.520
always extend your type and create a
decorated version of it and so here when

00:12:07.520 --> 00:12:07.530
decorated version of it and so here when
 

00:12:07.530 --> 00:12:08.960
decorated version of it and so here when
it creates that new type it's going to

00:12:08.960 --> 00:12:08.970
it creates that new type it's going to
 

00:12:08.970 --> 00:12:10.370
it creates that new type it's going to
take care of instance shading all the

00:12:10.370 --> 00:12:10.380
take care of instance shading all the
 

00:12:10.380 --> 00:12:13.910
take care of instance shading all the
property properties of type property

00:12:13.910 --> 00:12:13.920
property properties of type property
 

00:12:13.920 --> 00:12:16.720
property properties of type property
something so the way you instantiate it

00:12:16.720 --> 00:12:16.730
something so the way you instantiate it
 

00:12:16.730 --> 00:12:19.580
something so the way you instantiate it
is just this way called project

00:12:19.580 --> 00:12:19.590
is just this way called project
 

00:12:19.590 --> 00:12:22.220
is just this way called project
extension create or reverse this example

00:12:22.220 --> 00:12:22.230
extension create or reverse this example
 

00:12:22.230 --> 00:12:24.860
extension create or reverse this example
had a project extension get by type so

00:12:24.860 --> 00:12:24.870
had a project extension get by type so
 

00:12:24.870 --> 00:12:26.750
had a project extension get by type so
here we create it the string is called

00:12:26.750 --> 00:12:26.760
here we create it the string is called
 

00:12:26.760 --> 00:12:28.460
here we create it the string is called
my config this is what will show up on

00:12:28.460 --> 00:12:28.470
my config this is what will show up on
 

00:12:28.470 --> 00:12:30.590
my config this is what will show up on
your DSL and you provide the type the

00:12:30.590 --> 00:12:30.600
your DSL and you provide the type the
 

00:12:30.600 --> 00:12:33.410
your DSL and you provide the type the
instance that that method return is not

00:12:33.410 --> 00:12:33.420
instance that that method return is not
 

00:12:33.420 --> 00:12:35.630
instance that that method return is not
exactly my plug-in extension it's going

00:12:35.630 --> 00:12:35.640
exactly my plug-in extension it's going
 

00:12:35.640 --> 00:12:37.010
exactly my plug-in extension it's going
to be the decorated version but you

00:12:37.010 --> 00:12:37.020
to be the decorated version but you
 

00:12:37.020 --> 00:12:38.240
to be the decorated version but you
don't have to care you can just keep

00:12:38.240 --> 00:12:38.250
don't have to care you can just keep
 

00:12:38.250 --> 00:12:40.430
don't have to care you can just keep
manipulating your tasks all the things

00:12:40.430 --> 00:12:40.440
manipulating your tasks all the things
 

00:12:40.440 --> 00:12:41.900
manipulating your tasks all the things
that's added on top of it you don't

00:12:41.900 --> 00:12:41.910
that's added on top of it you don't
 

00:12:41.910 --> 00:12:45.560
that's added on top of it you don't
really have to worry about it so now you

00:12:45.560 --> 00:12:45.570
really have to worry about it so now you
 

00:12:45.570 --> 00:12:47.120
really have to worry about it so now you
want to use that you want to use that

00:12:47.120 --> 00:12:47.130
want to use that you want to use that
 

00:12:47.130 --> 00:12:50.810
want to use that you want to use that
value that you set in the DSL into a

00:12:50.810 --> 00:12:50.820
value that you set in the DSL into a
 

00:12:50.820 --> 00:12:53.660
value that you set in the DSL into a
task as an input and so here I'm

00:12:53.660 --> 00:12:53.670
task as an input and so here I'm
 

00:12:53.670 --> 00:12:55.220
task as an input and so here I'm
creating a task

00:12:55.220 --> 00:12:55.230
creating a task
 

00:12:55.230 --> 00:12:57.770
creating a task
I have a property and I'm also setting

00:12:57.770 --> 00:12:57.780
I have a property and I'm also setting
 

00:12:57.780 --> 00:12:59.570
I have a property and I'm also setting
the type of the property to be property

00:12:59.570 --> 00:12:59.580
the type of the property to be property
 

00:12:59.580 --> 00:13:02.270
the type of the property to be property
of boolean this is very important

00:13:02.270 --> 00:13:02.280
of boolean this is very important
 

00:13:02.280 --> 00:13:04.480
of boolean this is very important
I'm also declaring it as abstract and

00:13:04.480 --> 00:13:04.490
I'm also declaring it as abstract and
 

00:13:04.490 --> 00:13:07.670
I'm also declaring it as abstract and
the task also type instead of being just

00:13:07.670 --> 00:13:07.680
the task also type instead of being just
 

00:13:07.680 --> 00:13:09.350
the task also type instead of being just
a regular open type that you would have

00:13:09.350 --> 00:13:09.360
a regular open type that you would have
 

00:13:09.360 --> 00:13:11.570
a regular open type that you would have
to do I'm declaring it as abstract so

00:13:11.570 --> 00:13:11.580
to do I'm declaring it as abstract so
 

00:13:11.580 --> 00:13:13.070
to do I'm declaring it as abstract so
that greater can decorate it and do the

00:13:13.070 --> 00:13:13.080
that greater can decorate it and do the
 

00:13:13.080 --> 00:13:16.280
that greater can decorate it and do the
right thing for me next I want to

00:13:16.280 --> 00:13:16.290
right thing for me next I want to
 

00:13:16.290 --> 00:13:18.170
right thing for me next I want to
actually register my tasks using the

00:13:18.170 --> 00:13:18.180
actually register my tasks using the
 

00:13:18.180 --> 00:13:20.450
actually register my tasks using the
lazy API so register and a callback

00:13:20.450 --> 00:13:20.460
lazy API so register and a callback
 

00:13:20.460 --> 00:13:21.860
lazy API so register and a callback
that's a lambda that gets called

00:13:21.860 --> 00:13:21.870
that's a lambda that gets called
 

00:13:21.870 --> 00:13:24.110
that's a lambda that gets called
whenever your tasks get coffee good and

00:13:24.110 --> 00:13:24.120
whenever your tasks get coffee good and
 

00:13:24.120 --> 00:13:27.620
whenever your tasks get coffee good and
here I'm sitting onto my tasks property

00:13:27.620 --> 00:13:27.630
here I'm sitting onto my tasks property
 

00:13:27.630 --> 00:13:30.350
here I'm sitting onto my tasks property
the property coming from my extension

00:13:30.350 --> 00:13:30.360
the property coming from my extension
 

00:13:30.360 --> 00:13:32.270
the property coming from my extension
I'm not setting the value I'm not doing

00:13:32.270 --> 00:13:32.280
I'm not setting the value I'm not doing
 

00:13:32.280 --> 00:13:34.580
I'm not setting the value I'm not doing
my config dot super sleuth warning dot

00:13:34.580 --> 00:13:34.590
my config dot super sleuth warning dot
 

00:13:34.590 --> 00:13:36.710
my config dot super sleuth warning dot
yet if you do that you lose some of the

00:13:36.710 --> 00:13:36.720
yet if you do that you lose some of the
 

00:13:36.720 --> 00:13:39.770
yet if you do that you lose some of the
benefits and so by using the property

00:13:39.770 --> 00:13:39.780
benefits and so by using the property
 

00:13:39.780 --> 00:13:41.510
benefits and so by using the property
directly you're basically doing your

00:13:41.510 --> 00:13:41.520
directly you're basically doing your
 

00:13:41.520 --> 00:13:44.000
directly you're basically doing your
lazy binding between the two so what

00:13:44.000 --> 00:13:44.010
lazy binding between the two so what
 

00:13:44.010 --> 00:13:45.500
lazy binding between the two so what
happens is that this code here the

00:13:45.500 --> 00:13:45.510
happens is that this code here the
 

00:13:45.510 --> 00:13:47.690
happens is that this code here the
register really is likely to happen you

00:13:47.690 --> 00:13:47.700
register really is likely to happen you
 

00:13:47.700 --> 00:13:50.000
register really is likely to happen you
apply and your apply is at the very top

00:13:50.000 --> 00:13:50.010
apply and your apply is at the very top
 

00:13:50.010 --> 00:13:52.130
apply and your apply is at the very top
of your bill operator so if you change

00:13:52.130 --> 00:13:52.140
of your bill operator so if you change
 

00:13:52.140 --> 00:13:54.560
of your bill operator so if you change
the value later it's important that you

00:13:54.560 --> 00:13:54.570
the value later it's important that you
 

00:13:54.570 --> 00:13:56.270
the value later it's important that you
do not set the value in the apply

00:13:56.270 --> 00:13:56.280
do not set the value in the apply
 

00:13:56.280 --> 00:13:57.380
do not set the value in the apply
because then if you change the value

00:13:57.380 --> 00:13:57.390
because then if you change the value
 

00:13:57.390 --> 00:13:59.360
because then if you change the value
later then the task will have the old

00:13:59.360 --> 00:13:59.370
later then the task will have the old
 

00:13:59.370 --> 00:14:01.820
later then the task will have the old
value so by using properties you

00:14:01.820 --> 00:14:01.830
value so by using properties you
 

00:14:01.830 --> 00:14:04.310
value so by using properties you
guarantee that whenever you're actually

00:14:04.310 --> 00:14:04.320
guarantee that whenever you're actually
 

00:14:04.320 --> 00:14:05.960
guarantee that whenever you're actually
configuring your task or whenever you're

00:14:05.960 --> 00:14:05.970
configuring your task or whenever you're
 

00:14:05.970 --> 00:14:08.150
configuring your task or whenever you're
setting the last value in the DSL at the

00:14:08.150 --> 00:14:08.160
setting the last value in the DSL at the
 

00:14:08.160 --> 00:14:09.980
setting the last value in the DSL at the
end your task will have the letters

00:14:09.980 --> 00:14:09.990
end your task will have the letters
 

00:14:09.990 --> 00:14:13.370
end your task will have the letters
value anyway so this is a new feature of

00:14:13.370 --> 00:14:13.380
value anyway so this is a new feature of
 

00:14:13.380 --> 00:14:14.660
value anyway so this is a new feature of
Gradle and it's really efficient and

00:14:14.660 --> 00:14:14.670
Gradle and it's really efficient and
 

00:14:14.670 --> 00:14:18.260
Gradle and it's really efficient and
should really use property everywhere ok

00:14:18.260 --> 00:14:18.270
should really use property everywhere ok
 

00:14:18.270 --> 00:14:20.570
should really use property everywhere ok
let's look at other tips to really

00:14:20.570 --> 00:14:20.580
let's look at other tips to really
 

00:14:20.580 --> 00:14:21.950
let's look at other tips to really
configure your project in the most

00:14:21.950 --> 00:14:21.960
configure your project in the most
 

00:14:21.960 --> 00:14:25.640
configure your project in the most
efficient way possible so when we talk

00:14:25.640 --> 00:14:25.650
efficient way possible so when we talk
 

00:14:25.650 --> 00:14:27.800
efficient way possible so when we talk
about configuration you know the first

00:14:27.800 --> 00:14:27.810
about configuration you know the first
 

00:14:27.810 --> 00:14:29.630
about configuration you know the first
advice that I have is really do as

00:14:29.630 --> 00:14:29.640
advice that I have is really do as
 

00:14:29.640 --> 00:14:31.250
advice that I have is really do as
little as possible I see a lot of people

00:14:31.250 --> 00:14:31.260
little as possible I see a lot of people
 

00:14:31.260 --> 00:14:32.780
little as possible I see a lot of people
who do a lot of things in their bill

00:14:32.780 --> 00:14:32.790
who do a lot of things in their bill
 

00:14:32.790 --> 00:14:35.540
who do a lot of things in their bill
they have 150 line in their beloved

00:14:35.540 --> 00:14:35.550
they have 150 line in their beloved
 

00:14:35.550 --> 00:14:37.220
they have 150 line in their beloved
Gradle and they do crazy things in there

00:14:37.220 --> 00:14:37.230
Gradle and they do crazy things in there
 

00:14:37.230 --> 00:14:38.750
Gradle and they do crazy things in there
and this is the cost you're gonna pay

00:14:38.750 --> 00:14:38.760
and this is the cost you're gonna pay
 

00:14:38.760 --> 00:14:40.100
and this is the cost you're gonna pay
right every time you call integrator

00:14:40.100 --> 00:14:40.110
right every time you call integrator
 

00:14:40.110 --> 00:14:42.110
right every time you call integrator
whether you're thinking doing a build

00:14:42.110 --> 00:14:42.120
whether you're thinking doing a build
 

00:14:42.120 --> 00:14:44.240
whether you're thinking doing a build
querying for the list of tasks you're

00:14:44.240 --> 00:14:44.250
querying for the list of tasks you're
 

00:14:44.250 --> 00:14:45.740
querying for the list of tasks you're
going to pay that cost so it's important

00:14:45.740 --> 00:14:45.750
going to pay that cost so it's important
 

00:14:45.750 --> 00:14:47.980
going to pay that cost so it's important
that you do as little as possible

00:14:47.980 --> 00:14:47.990
that you do as little as possible
 

00:14:47.990 --> 00:14:51.710
that you do as little as possible
another advice is try to you know see

00:14:51.710 --> 00:14:51.720
another advice is try to you know see
 

00:14:51.720 --> 00:14:55.700
another advice is try to you know see
what you can do that in release but not

00:14:55.700 --> 00:14:55.710
what you can do that in release but not
 

00:14:55.710 --> 00:14:57.260
what you can do that in release but not
do it in debug right you have those bill

00:14:57.260 --> 00:14:57.270
do it in debug right you have those bill
 

00:14:57.270 --> 00:14:59.480
do it in debug right you have those bill
types by default we see a lot of people

00:14:59.480 --> 00:14:59.490
types by default we see a lot of people
 

00:14:59.490 --> 00:15:00.770
types by default we see a lot of people
doing way too much in debug that they

00:15:00.770 --> 00:15:00.780
doing way too much in debug that they
 

00:15:00.780 --> 00:15:03.020
doing way too much in debug that they
don't need to do don't do it and in on

00:15:03.020 --> 00:15:03.030
don't need to do don't do it and in on
 

00:15:03.030 --> 00:15:04.820
don't need to do don't do it and in on
CI make sure that you only build

00:15:04.820 --> 00:15:04.830
CI make sure that you only build
 

00:15:04.830 --> 00:15:07.040
CI make sure that you only build
whatever you actually need we see people

00:15:07.040 --> 00:15:07.050
whatever you actually need we see people
 

00:15:07.050 --> 00:15:08.290
whatever you actually need we see people
calling a Samba

00:15:08.290 --> 00:15:08.300
calling a Samba
 

00:15:08.300 --> 00:15:12.820
calling a Samba
and that builds way more than date so

00:15:12.820 --> 00:15:12.830
and that builds way more than date so
 

00:15:12.830 --> 00:15:15.100
and that builds way more than date so
around configuration of tasks you know I

00:15:15.100 --> 00:15:15.110
around configuration of tasks you know I
 

00:15:15.110 --> 00:15:17.020
around configuration of tasks you know I
just show you the tasks that register

00:15:17.020 --> 00:15:17.030
just show you the tasks that register
 

00:15:17.030 --> 00:15:19.750
just show you the tasks that register
and it's particularly important to use

00:15:19.750 --> 00:15:19.760
and it's particularly important to use
 

00:15:19.760 --> 00:15:22.450
and it's particularly important to use
the lazy API because in Android by

00:15:22.450 --> 00:15:22.460
the lazy API because in Android by
 

00:15:22.460 --> 00:15:24.070
the lazy API because in Android by
default you have five balance right for

00:15:24.070 --> 00:15:24.080
default you have five balance right for
 

00:15:24.080 --> 00:15:25.570
default you have five balance right for
each module you have debug release and

00:15:25.570 --> 00:15:25.580
each module you have debug release and
 

00:15:25.580 --> 00:15:27.400
each module you have debug release and
then three test violent so it creates a

00:15:27.400 --> 00:15:27.410
then three test violent so it creates a
 

00:15:27.410 --> 00:15:29.230
then three test violent so it creates a
lot of tasks here in the example that I

00:15:29.230 --> 00:15:29.240
lot of tasks here in the example that I
 

00:15:29.240 --> 00:15:31.030
lot of tasks here in the example that I
have hundred module it's nineteen

00:15:31.030 --> 00:15:31.040
have hundred module it's nineteen
 

00:15:31.040 --> 00:15:32.440
have hundred module it's nineteen
thousand tasks you don't want to create

00:15:32.440 --> 00:15:32.450
thousand tasks you don't want to create
 

00:15:32.450 --> 00:15:36.100
thousand tasks you don't want to create
and configure all of them so we're

00:15:36.100 --> 00:15:36.110
and configure all of them so we're
 

00:15:36.110 --> 00:15:37.870
and configure all of them so we're
already doing that what's important for

00:15:37.870 --> 00:15:37.880
already doing that what's important for
 

00:15:37.880 --> 00:15:39.610
already doing that what's important for
you is two things first when you create

00:15:39.610 --> 00:15:39.620
you is two things first when you create
 

00:15:39.620 --> 00:15:41.320
you is two things first when you create
your own tasks create them lazy D and

00:15:41.320 --> 00:15:41.330
your own tasks create them lazy D and
 

00:15:41.330 --> 00:15:43.810
your own tasks create them lazy D and
second when you use API is from Gradle

00:15:43.810 --> 00:15:43.820
second when you use API is from Gradle
 

00:15:43.820 --> 00:15:46.030
second when you use API is from Gradle
or from the android plug-in use the

00:15:46.030 --> 00:15:46.040
or from the android plug-in use the
 

00:15:46.040 --> 00:15:48.010
or from the android plug-in use the
proper API right there's a lot of legacy

00:15:48.010 --> 00:15:48.020
proper API right there's a lot of legacy
 

00:15:48.020 --> 00:15:50.500
proper API right there's a lot of legacy
API that returns a tasks instance and we

00:15:50.500 --> 00:15:50.510
API that returns a tasks instance and we
 

00:15:50.510 --> 00:15:52.390
API that returns a tasks instance and we
have them in a GPU like you know in your

00:15:52.390 --> 00:15:52.400
have them in a GPU like you know in your
 

00:15:52.400 --> 00:15:53.890
have them in a GPU like you know in your
variants you can do get compile that

00:15:53.890 --> 00:15:53.900
variants you can do get compile that
 

00:15:53.900 --> 00:15:55.330
variants you can do get compile that
returns the compiled tasks if you use

00:15:55.330 --> 00:15:55.340
returns the compiled tasks if you use
 

00:15:55.340 --> 00:15:56.890
returns the compiled tasks if you use
that it's gonna create them it's got a

00:15:56.890 --> 00:15:56.900
that it's gonna create them it's got a
 

00:15:56.900 --> 00:16:00.520
that it's gonna create them it's got a
first configure it crater lies near API

00:16:00.520 --> 00:16:00.530
first configure it crater lies near API
 

00:16:00.530 --> 00:16:02.350
first configure it crater lies near API
that's returned the task provider and we

00:16:02.350 --> 00:16:02.360
that's returned the task provider and we
 

00:16:02.360 --> 00:16:03.970
that's returned the task provider and we
have new API is written you know get

00:16:03.970 --> 00:16:03.980
have new API is written you know get
 

00:16:03.980 --> 00:16:05.800
have new API is written you know get
compiled provider that returns a test

00:16:05.800 --> 00:16:05.810
compiled provider that returns a test
 

00:16:05.810 --> 00:16:07.330
compiled provider that returns a test
provider that's a lazy object so you

00:16:07.330 --> 00:16:07.340
provider that's a lazy object so you
 

00:16:07.340 --> 00:16:10.960
provider that's a lazy object so you
should use that the second thing I want

00:16:10.960 --> 00:16:10.970
should use that the second thing I want
 

00:16:10.970 --> 00:16:13.780
should use that the second thing I want
to talk about is tasks wiring right if

00:16:13.780 --> 00:16:13.790
to talk about is tasks wiring right if
 

00:16:13.790 --> 00:16:15.370
to talk about is tasks wiring right if
you're creating a lot of custom tasks

00:16:15.370 --> 00:16:15.380
you're creating a lot of custom tasks
 

00:16:15.380 --> 00:16:17.670
you're creating a lot of custom tasks
you probably have to do some depends on

00:16:17.670 --> 00:16:17.680
you probably have to do some depends on
 

00:16:17.680 --> 00:16:20.470
you probably have to do some depends on
and that's very fragile and really you

00:16:20.470 --> 00:16:20.480
and that's very fragile and really you
 

00:16:20.480 --> 00:16:21.940
and that's very fragile and really you
shouldn't do it let's say you have a

00:16:21.940 --> 00:16:21.950
shouldn't do it let's say you have a
 

00:16:21.950 --> 00:16:23.800
shouldn't do it let's say you have a
depends on B and then later you change a

00:16:23.800 --> 00:16:23.810
depends on B and then later you change a
 

00:16:23.810 --> 00:16:25.540
depends on B and then later you change a
to actually dependency if you don't pay

00:16:25.540 --> 00:16:25.550
to actually dependency if you don't pay
 

00:16:25.550 --> 00:16:27.610
to actually dependency if you don't pay
attention you may depend on B and C and

00:16:27.610 --> 00:16:27.620
attention you may depend on B and C and
 

00:16:27.620 --> 00:16:29.380
attention you may depend on B and C and
that's not what you want so the old way

00:16:29.380 --> 00:16:29.390
that's not what you want so the old way
 

00:16:29.390 --> 00:16:31.360
that's not what you want so the old way
of doing this is you know you have two

00:16:31.360 --> 00:16:31.370
of doing this is you know you have two
 

00:16:31.370 --> 00:16:33.010
of doing this is you know you have two
tasks when the generate an output

00:16:33.010 --> 00:16:33.020
tasks when the generate an output
 

00:16:33.020 --> 00:16:34.720
tasks when the generate an output
directory right and the type of the

00:16:34.720 --> 00:16:34.730
directory right and the type of the
 

00:16:34.730 --> 00:16:36.880
directory right and the type of the
property is fine and attest to that

00:16:36.880 --> 00:16:36.890
property is fine and attest to that
 

00:16:36.890 --> 00:16:39.580
property is fine and attest to that
consumes that directory and it has a

00:16:39.580 --> 00:16:39.590
consumes that directory and it has a
 

00:16:39.590 --> 00:16:43.750
consumes that directory and it has a
property of type file as well and so the

00:16:43.750 --> 00:16:43.760
property of type file as well and so the
 

00:16:43.760 --> 00:16:45.970
property of type file as well and so the
way you configure those two tasks is on

00:16:45.970 --> 00:16:45.980
way you configure those two tasks is on
 

00:16:45.980 --> 00:16:48.220
way you configure those two tasks is on
the first one you do register output my

00:16:48.220 --> 00:16:48.230
the first one you do register output my
 

00:16:48.230 --> 00:16:51.220
the first one you do register output my
location on the second one you do in

00:16:51.220 --> 00:16:51.230
location on the second one you do in
 

00:16:51.230 --> 00:16:54.520
location on the second one you do in
pedir equal okay so normally before

00:16:54.520 --> 00:16:54.530
pedir equal okay so normally before
 

00:16:54.530 --> 00:16:56.680
pedir equal okay so normally before
right if it did not have lazy

00:16:56.680 --> 00:16:56.690
right if it did not have lazy
 

00:16:56.690 --> 00:16:58.870
right if it did not have lazy
configuration you could do task 1 dot

00:16:58.870 --> 00:16:58.880
configuration you could do task 1 dot
 

00:16:58.880 --> 00:17:00.760
configuration you could do task 1 dot
output here right you just link those

00:17:00.760 --> 00:17:00.770
output here right you just link those
 

00:17:00.770 --> 00:17:02.770
output here right you just link those
two locations directly you can't really

00:17:02.770 --> 00:17:02.780
two locations directly you can't really
 

00:17:02.780 --> 00:17:05.320
two locations directly you can't really
do that in lazy configuration so you

00:17:05.320 --> 00:17:05.330
do that in lazy configuration so you
 

00:17:05.330 --> 00:17:07.270
do that in lazy configuration so you
have to kind of either duplicate it or

00:17:07.270 --> 00:17:07.280
have to kind of either duplicate it or
 

00:17:07.280 --> 00:17:09.430
have to kind of either duplicate it or
use another class that you know

00:17:09.430 --> 00:17:09.440
use another class that you know
 

00:17:09.440 --> 00:17:11.410
use another class that you know
centralize all your location computation

00:17:11.410 --> 00:17:11.420
centralize all your location computation
 

00:17:11.420 --> 00:17:13.900
centralize all your location computation
which is something we used to do in a GP

00:17:13.900 --> 00:17:13.910
which is something we used to do in a GP
 

00:17:13.910 --> 00:17:15.850
which is something we used to do in a GP
a long time ago and then you do a manual

00:17:15.850 --> 00:17:15.860
a long time ago and then you do a manual
 

00:17:15.860 --> 00:17:17.740
a long time ago and then you do a manual
depends on right so the first thing is

00:17:17.740 --> 00:17:17.750
depends on right so the first thing is
 

00:17:17.750 --> 00:17:19.270
depends on right so the first thing is
not great then the second one is

00:17:19.270 --> 00:17:19.280
not great then the second one is
 

00:17:19.280 --> 00:17:20.569
not great then the second one is
definitely terrible you should

00:17:20.569 --> 00:17:20.579
definitely terrible you should
 

00:17:20.579 --> 00:17:22.340
definitely terrible you should
do that you might be thinking well it's

00:17:22.340 --> 00:17:22.350
do that you might be thinking well it's
 

00:17:22.350 --> 00:17:24.350
do that you might be thinking well it's
just next line so if I update the

00:17:24.350 --> 00:17:24.360
just next line so if I update the
 

00:17:24.360 --> 00:17:26.630
just next line so if I update the
location the value of input di I will

00:17:26.630 --> 00:17:26.640
location the value of input di I will
 

00:17:26.640 --> 00:17:29.060
location the value of input di I will
remember to change the depends on but

00:17:29.060 --> 00:17:29.070
remember to change the depends on but
 

00:17:29.070 --> 00:17:30.560
remember to change the depends on but
the reality is that it's more likely to

00:17:30.560 --> 00:17:30.570
the reality is that it's more likely to
 

00:17:30.570 --> 00:17:32.690
the reality is that it's more likely to
be somewhere else at leaning the greater

00:17:32.690 --> 00:17:32.700
be somewhere else at leaning the greater
 

00:17:32.700 --> 00:17:34.279
be somewhere else at leaning the greater
plug in it was definitely in a lot of

00:17:34.279 --> 00:17:34.289
plug in it was definitely in a lot of
 

00:17:34.289 --> 00:17:36.409
plug in it was definitely in a lot of
somewhere else and so we moved away from

00:17:36.409 --> 00:17:36.419
somewhere else and so we moved away from
 

00:17:36.419 --> 00:17:38.389
somewhere else and so we moved away from
all of that so great early in the last

00:17:38.389 --> 00:17:38.399
all of that so great early in the last
 

00:17:38.399 --> 00:17:39.950
all of that so great early in the last
year after they introduced the property

00:17:39.950 --> 00:17:39.960
year after they introduced the property
 

00:17:39.960 --> 00:17:43.880
year after they introduced the property
type they really improved a lot that so

00:17:43.880 --> 00:17:43.890
type they really improved a lot that so
 

00:17:43.890 --> 00:17:45.169
type they really improved a lot that so
let's see what it looks like and what's

00:17:45.169 --> 00:17:45.179
let's see what it looks like and what's
 

00:17:45.179 --> 00:17:48.289
let's see what it looks like and what's
the best practice today first your task

00:17:48.289 --> 00:17:48.299
the best practice today first your task
 

00:17:48.299 --> 00:17:50.029
the best practice today first your task
1 you're going to change it and the

00:17:50.029 --> 00:17:50.039
1 you're going to change it and the
 

00:17:50.039 --> 00:17:51.950
1 you're going to change it and the
property is not gonna be directory

00:17:51.950 --> 00:17:51.960
property is not gonna be directory
 

00:17:51.960 --> 00:17:55.909
property is not gonna be directory
property and also I mean you know I'm

00:17:55.909 --> 00:17:55.919
property and also I mean you know I'm
 

00:17:55.919 --> 00:17:57.440
property and also I mean you know I'm
using also directory property on the

00:17:57.440 --> 00:17:57.450
using also directory property on the
 

00:17:57.450 --> 00:18:00.230
using also directory property on the
second one and of course I use the

00:18:00.230 --> 00:18:00.240
second one and of course I use the
 

00:18:00.240 --> 00:18:02.330
second one and of course I use the
abstract way so that greater takes care

00:18:02.330 --> 00:18:02.340
abstract way so that greater takes care
 

00:18:02.340 --> 00:18:04.279
abstract way so that greater takes care
of instantiating all of those objects

00:18:04.279 --> 00:18:04.289
of instantiating all of those objects
 

00:18:04.289 --> 00:18:06.590
of instantiating all of those objects
for me so directory property is very

00:18:06.590 --> 00:18:06.600
for me so directory property is very
 

00:18:06.600 --> 00:18:08.000
for me so directory property is very
interesting it's it's actually a

00:18:08.000 --> 00:18:08.010
interesting it's it's actually a
 

00:18:08.010 --> 00:18:09.830
interesting it's it's actually a
property of directories similar to

00:18:09.830 --> 00:18:09.840
property of directories similar to
 

00:18:09.840 --> 00:18:11.980
property of directories similar to
property bull that I showed earlier

00:18:11.980 --> 00:18:11.990
property bull that I showed earlier
 

00:18:11.990 --> 00:18:14.960
property bull that I showed earlier
so it's you know dynamic and lazy in the

00:18:14.960 --> 00:18:14.970
so it's you know dynamic and lazy in the
 

00:18:14.970 --> 00:18:16.580
so it's you know dynamic and lazy in the
same way that the other one is but it

00:18:16.580 --> 00:18:16.590
same way that the other one is but it
 

00:18:16.590 --> 00:18:19.009
same way that the other one is but it
also include test dependency information

00:18:19.009 --> 00:18:19.019
also include test dependency information
 

00:18:19.019 --> 00:18:20.779
also include test dependency information
even though when you look at the type

00:18:20.779 --> 00:18:20.789
even though when you look at the type
 

00:18:20.789 --> 00:18:21.950
even though when you look at the type
hierarchy it doesn't really show

00:18:21.950 --> 00:18:21.960
hierarchy it doesn't really show
 

00:18:21.960 --> 00:18:24.110
hierarchy it doesn't really show
anything but the Javadoc says hey it

00:18:24.110 --> 00:18:24.120
anything but the Javadoc says hey it
 

00:18:24.120 --> 00:18:27.740
anything but the Javadoc says hey it
includes test dependency information so

00:18:27.740 --> 00:18:27.750
includes test dependency information so
 

00:18:27.750 --> 00:18:29.060
includes test dependency information so
let's see how I'm gonna use that oh and

00:18:29.060 --> 00:18:29.070
let's see how I'm gonna use that oh and
 

00:18:29.070 --> 00:18:30.019
let's see how I'm gonna use that oh and
by the way you see that it's actually

00:18:30.019 --> 00:18:30.029
by the way you see that it's actually
 

00:18:30.029 --> 00:18:31.940
by the way you see that it's actually
directory there is a matching regular

00:18:31.940 --> 00:18:31.950
directory there is a matching regular
 

00:18:31.950 --> 00:18:33.590
directory there is a matching regular
file properties so the European is a

00:18:33.590 --> 00:18:33.600
file properties so the European is a
 

00:18:33.600 --> 00:18:36.889
file properties so the European is a
more precise and you cannot link to task

00:18:36.889 --> 00:18:36.899
more precise and you cannot link to task
 

00:18:36.899 --> 00:18:38.389
more precise and you cannot link to task
one that generates a directory the other

00:18:38.389 --> 00:18:38.399
one that generates a directory the other
 

00:18:38.399 --> 00:18:39.950
one that generates a directory the other
one that we do file anymore because it's

00:18:39.950 --> 00:18:39.960
one that we do file anymore because it's
 

00:18:39.960 --> 00:18:44.090
one that we do file anymore because it's
it's type safely so setting up task 1

00:18:44.090 --> 00:18:44.100
it's type safely so setting up task 1
 

00:18:44.100 --> 00:18:46.220
it's type safely so setting up task 1
it's very similar I would put the offset

00:18:46.220 --> 00:18:46.230
it's very similar I would put the offset
 

00:18:46.230 --> 00:18:48.320
it's very similar I would put the offset
and then the value so no difference

00:18:48.320 --> 00:18:48.330
and then the value so no difference
 

00:18:48.330 --> 00:18:51.769
and then the value so no difference
there on a task 2 what I'm doing is the

00:18:51.769 --> 00:18:51.779
there on a task 2 what I'm doing is the
 

00:18:51.779 --> 00:18:53.210
there on a task 2 what I'm doing is the
same way I did with the tasks and the

00:18:53.210 --> 00:18:53.220
same way I did with the tasks and the
 

00:18:53.220 --> 00:18:55.009
same way I did with the tasks and the
extension earlier when I'm sitting on

00:18:55.009 --> 00:18:55.019
extension earlier when I'm sitting on
 

00:18:55.019 --> 00:18:57.350
extension earlier when I'm sitting on
one property the other property directly

00:18:57.350 --> 00:18:57.360
one property the other property directly
 

00:18:57.360 --> 00:18:59.480
one property the other property directly
to make a link between them I want to do

00:18:59.480 --> 00:18:59.490
to make a link between them I want to do
 

00:18:59.490 --> 00:19:01.820
to make a link between them I want to do
that too but here because I'm a lazy

00:19:01.820 --> 00:19:01.830
that too but here because I'm a lazy
 

00:19:01.830 --> 00:19:06.259
that too but here because I'm a lazy
task while the the abuse easy way or

00:19:06.259 --> 00:19:06.269
task while the the abuse easy way or
 

00:19:06.269 --> 00:19:08.840
task while the the abuse easy way or
lazy way to do it is to say well task 1

00:19:08.840 --> 00:19:08.850
lazy way to do it is to say well task 1
 

00:19:08.850 --> 00:19:12.049
lazy way to do it is to say well task 1
that get and then I get the profit well

00:19:12.049 --> 00:19:12.059
that get and then I get the profit well
 

00:19:12.059 --> 00:19:13.250
that get and then I get the profit well
it's not lazy at all actually because

00:19:13.250 --> 00:19:13.260
it's not lazy at all actually because
 

00:19:13.260 --> 00:19:14.480
it's not lazy at all actually because
it's gonna first configure your task

00:19:14.480 --> 00:19:14.490
it's gonna first configure your task
 

00:19:14.490 --> 00:19:16.580
it's gonna first configure your task
which is not something you want to do so

00:19:16.580 --> 00:19:16.590
which is not something you want to do so
 

00:19:16.590 --> 00:19:19.340
which is not something you want to do so
task 1 and test 2 our type of type tasks

00:19:19.340 --> 00:19:19.350
task 1 and test 2 our type of type tasks
 

00:19:19.350 --> 00:19:21.620
task 1 and test 2 our type of type tasks
provider and they have this thing called

00:19:21.620 --> 00:19:21.630
provider and they have this thing called
 

00:19:21.630 --> 00:19:24.740
provider and they have this thing called
flat map so what flat map does it

00:19:24.740 --> 00:19:24.750
flat map so what flat map does it
 

00:19:24.750 --> 00:19:27.139
flat map so what flat map does it
returns a provider of a directory

00:19:27.139 --> 00:19:27.149
returns a provider of a directory
 

00:19:27.149 --> 00:19:30.520
returns a provider of a directory
provider being the

00:19:30.520 --> 00:19:30.530
provider being the
 

00:19:30.530 --> 00:19:32.230
provider being the
parent type of property and it's a

00:19:32.230 --> 00:19:32.240
parent type of property and it's a
 

00:19:32.240 --> 00:19:35.500
parent type of property and it's a
read-only type and so this is lazy it's

00:19:35.500 --> 00:19:35.510
read-only type and so this is lazy it's
 

00:19:35.510 --> 00:19:38.500
read-only type and so this is lazy it's
gonna encapsulate the property of task 1

00:19:38.500 --> 00:19:38.510
gonna encapsulate the property of task 1
 

00:19:38.510 --> 00:19:41.230
gonna encapsulate the property of task 1
and it's going to propagate the value in

00:19:41.230 --> 00:19:41.240
and it's going to propagate the value in
 

00:19:41.240 --> 00:19:42.460
and it's going to propagate the value in
a lazy way but it's also going to

00:19:42.460 --> 00:19:42.470
a lazy way but it's also going to
 

00:19:42.470 --> 00:19:46.840
a lazy way but it's also going to
propagate the dependency lazy and so now

00:19:46.840 --> 00:19:46.850
propagate the dependency lazy and so now
 

00:19:46.850 --> 00:19:49.720
propagate the dependency lazy and so now
input the automatically depends on task

00:19:49.720 --> 00:19:49.730
input the automatically depends on task
 

00:19:49.730 --> 00:19:52.390
input the automatically depends on task
1 sorry touch 2 directly depend on task

00:19:52.390 --> 00:19:52.400
1 sorry touch 2 directly depend on task
 

00:19:52.400 --> 00:19:54.040
1 sorry touch 2 directly depend on task
1 I don't have to do anything if I

00:19:54.040 --> 00:19:54.050
1 I don't have to do anything if I
 

00:19:54.050 --> 00:19:56.680
1 I don't have to do anything if I
change input do to be set to a different

00:19:56.680 --> 00:19:56.690
change input do to be set to a different
 

00:19:56.690 --> 00:19:58.750
change input do to be set to a different
value then it will automatically change

00:19:58.750 --> 00:19:58.760
value then it will automatically change
 

00:19:58.760 --> 00:20:00.940
value then it will automatically change
my dependency so when you extract

00:20:00.940 --> 00:20:00.950
my dependency so when you extract
 

00:20:00.950 --> 00:20:04.240
my dependency so when you extract
flatmap into an artifact a value that's

00:20:04.240 --> 00:20:04.250
flatmap into an artifact a value that's
 

00:20:04.250 --> 00:20:05.830
flatmap into an artifact a value that's
very interesting because this thing now

00:20:05.830 --> 00:20:05.840
very interesting because this thing now
 

00:20:05.840 --> 00:20:07.720
very interesting because this thing now
represent the artifact and whatever's

00:20:07.720 --> 00:20:07.730
represent the artifact and whatever's
 

00:20:07.730 --> 00:20:09.580
represent the artifact and whatever's
needed to build it and you don't have to

00:20:09.580 --> 00:20:09.590
needed to build it and you don't have to
 

00:20:09.590 --> 00:20:11.800
needed to build it and you don't have to
care about the how which is you know

00:20:11.800 --> 00:20:11.810
care about the how which is you know
 

00:20:11.810 --> 00:20:13.540
care about the how which is you know
keeping track of task 1 so imagine you

00:20:13.540 --> 00:20:13.550
keeping track of task 1 so imagine you
 

00:20:13.550 --> 00:20:15.370
keeping track of task 1 so imagine you
have a task that output two things and

00:20:15.370 --> 00:20:15.380
have a task that output two things and
 

00:20:15.380 --> 00:20:18.070
have a task that output two things and
you have some code that use those two

00:20:18.070 --> 00:20:18.080
you have some code that use those two
 

00:20:18.080 --> 00:20:20.020
you have some code that use those two
things and then later you change that

00:20:20.020 --> 00:20:20.030
things and then later you change that
 

00:20:20.030 --> 00:20:22.030
things and then later you change that
task to actually the two tasks each that

00:20:22.030 --> 00:20:22.040
task to actually the two tasks each that
 

00:20:22.040 --> 00:20:23.740
task to actually the two tasks each that
generate one thing if you're already

00:20:23.740 --> 00:20:23.750
generate one thing if you're already
 

00:20:23.750 --> 00:20:25.960
generate one thing if you're already
using the provider of directory or

00:20:25.960 --> 00:20:25.970
using the provider of directory or
 

00:20:25.970 --> 00:20:27.730
using the provider of directory or
provide a regular file you don't have to

00:20:27.730 --> 00:20:27.740
provide a regular file you don't have to
 

00:20:27.740 --> 00:20:29.890
provide a regular file you don't have to
care you don't have to keep track of the

00:20:29.890 --> 00:20:29.900
care you don't have to keep track of the
 

00:20:29.900 --> 00:20:31.690
care you don't have to keep track of the
task you just keep track of this

00:20:31.690 --> 00:20:31.700
task you just keep track of this
 

00:20:31.700 --> 00:20:34.240
task you just keep track of this
artifact and then you just read it it

00:20:34.240 --> 00:20:34.250
artifact and then you just read it it
 

00:20:34.250 --> 00:20:35.800
artifact and then you just read it it
doesn't matter who create it and it's

00:20:35.800 --> 00:20:35.810
doesn't matter who create it and it's
 

00:20:35.810 --> 00:20:37.930
doesn't matter who create it and it's
updated this is something that's very

00:20:37.930 --> 00:20:37.940
updated this is something that's very
 

00:20:37.940 --> 00:20:39.850
updated this is something that's very
powerful and that make code much cleaner

00:20:39.850 --> 00:20:39.860
powerful and that make code much cleaner
 

00:20:39.860 --> 00:20:42.310
powerful and that make code much cleaner
this is something that internally in the

00:20:42.310 --> 00:20:42.320
this is something that internally in the
 

00:20:42.320 --> 00:20:43.990
this is something that internally in the
Gradle plugin we're moving to out and

00:20:43.990 --> 00:20:44.000
Gradle plugin we're moving to out and
 

00:20:44.000 --> 00:20:47.170
Gradle plugin we're moving to out and
that I think it will have we expose that

00:20:47.170 --> 00:20:47.180
that I think it will have we expose that
 

00:20:47.180 --> 00:20:52.210
that I think it will have we expose that
as a public API at some point okay so in

00:20:52.210 --> 00:20:52.220
as a public API at some point okay so in
 

00:20:52.220 --> 00:20:53.560
as a public API at some point okay so in
my previous talk yesterday we talked

00:20:53.560 --> 00:20:53.570
my previous talk yesterday we talked
 

00:20:53.570 --> 00:20:55.480
my previous talk yesterday we talked
about worker api jerome talked about it

00:20:55.480 --> 00:20:55.490
about worker api jerome talked about it
 

00:20:55.490 --> 00:20:58.840
about worker api jerome talked about it
explained how things are less efficient

00:20:58.840 --> 00:20:58.850
explained how things are less efficient
 

00:20:58.850 --> 00:21:00.130
explained how things are less efficient
if you have tasks that are not using

00:21:00.130 --> 00:21:00.140
if you have tasks that are not using
 

00:21:00.140 --> 00:21:01.750
if you have tasks that are not using
worker and tasks that are using worker

00:21:01.750 --> 00:21:01.760
worker and tasks that are using worker
 

00:21:01.760 --> 00:21:03.910
worker and tasks that are using worker
so please go look at the talk and the

00:21:03.910 --> 00:21:03.920
so please go look at the talk and the
 

00:21:03.920 --> 00:21:05.380
so please go look at the talk and the
message for you today is if you have

00:21:05.380 --> 00:21:05.390
message for you today is if you have
 

00:21:05.390 --> 00:21:07.570
message for you today is if you have
custom tasks please use the worker api

00:21:07.570 --> 00:21:07.580
custom tasks please use the worker api
 

00:21:07.580 --> 00:21:10.000
custom tasks please use the worker api
look at the api online on the greater

00:21:10.000 --> 00:21:10.010
look at the api online on the greater
 

00:21:10.010 --> 00:21:12.250
look at the api online on the greater
side it's not that difficult and you

00:21:12.250 --> 00:21:12.260
side it's not that difficult and you
 

00:21:12.260 --> 00:21:15.580
side it's not that difficult and you
should really do it another thing that i

00:21:15.580 --> 00:21:15.590
should really do it another thing that i
 

00:21:15.590 --> 00:21:17.080
should really do it another thing that i
wanna mention is you know when you

00:21:17.080 --> 00:21:17.090
wanna mention is you know when you
 

00:21:17.090 --> 00:21:19.300
wanna mention is you know when you
create tasks always create a custom type

00:21:19.300 --> 00:21:19.310
create tasks always create a custom type
 

00:21:19.310 --> 00:21:24.250
create tasks always create a custom type
it may seem like easier to use some of

00:21:24.250 --> 00:21:24.260
it may seem like easier to use some of
 

00:21:24.260 --> 00:21:26.830
it may seem like easier to use some of
the api rocket that Gradle has like you

00:21:26.830 --> 00:21:26.840
the api rocket that Gradle has like you
 

00:21:26.840 --> 00:21:28.090
the api rocket that Gradle has like you
could do something like that like hey I

00:21:28.090 --> 00:21:28.100
could do something like that like hey I
 

00:21:28.100 --> 00:21:30.220
could do something like that like hey I
have a task and I'm just configuring it

00:21:30.220 --> 00:21:30.230
have a task and I'm just configuring it
 

00:21:30.230 --> 00:21:33.070
have a task and I'm just configuring it
and saying here do this thing it looks

00:21:33.070 --> 00:21:33.080
and saying here do this thing it looks
 

00:21:33.080 --> 00:21:34.420
and saying here do this thing it looks
okay right you know and there's some

00:21:34.420 --> 00:21:34.430
okay right you know and there's some
 

00:21:34.430 --> 00:21:37.150
okay right you know and there's some
trick between the groovy DSL and the kts

00:21:37.150 --> 00:21:37.160
trick between the groovy DSL and the kts
 

00:21:37.160 --> 00:21:39.070
trick between the groovy DSL and the kts
DSL you know and you might be thinking

00:21:39.070 --> 00:21:39.080
DSL you know and you might be thinking
 

00:21:39.080 --> 00:21:40.510
DSL you know and you might be thinking
like there's the right thing but if you

00:21:40.510 --> 00:21:40.520
like there's the right thing but if you
 

00:21:40.520 --> 00:21:42.070
like there's the right thing but if you
were to actually use a

00:21:42.070 --> 00:21:42.080
were to actually use a
 

00:21:42.080 --> 00:21:44.019
were to actually use a
default typed from Gradle and try to

00:21:44.019 --> 00:21:44.029
default typed from Gradle and try to
 

00:21:44.029 --> 00:21:45.159
default typed from Gradle and try to
extend it you would realize that

00:21:45.159 --> 00:21:45.169
extend it you would realize that
 

00:21:45.169 --> 00:21:47.919
extend it you would realize that
actually you know you're doing expensive

00:21:47.919 --> 00:21:47.929
actually you know you're doing expensive
 

00:21:47.929 --> 00:21:49.899
actually you know you're doing expensive
code whatever it is directly in the

00:21:49.899 --> 00:21:49.909
code whatever it is directly in the
 

00:21:49.909 --> 00:21:51.310
code whatever it is directly in the
configuration so every time you build

00:21:51.310 --> 00:21:51.320
configuration so every time you build
 

00:21:51.320 --> 00:21:53.049
configuration so every time you build
you're actually going to do what your

00:21:53.049 --> 00:21:53.059
you're actually going to do what your
 

00:21:53.059 --> 00:21:54.489
you're actually going to do what your
task is supposed to do this is not good

00:21:54.489 --> 00:21:54.499
task is supposed to do this is not good
 

00:21:54.499 --> 00:21:54.909
task is supposed to do this is not good
right

00:21:54.909 --> 00:21:54.919
right
 

00:21:54.919 --> 00:21:57.879
right
so the real rocket would now be tasked

00:21:57.879 --> 00:21:57.889
so the real rocket would now be tasked
 

00:21:57.889 --> 00:21:59.469
so the real rocket would now be tasked
do last expensive and it so it doesn't

00:21:59.469 --> 00:21:59.479
do last expensive and it so it doesn't
 

00:21:59.479 --> 00:22:01.629
do last expensive and it so it doesn't
look as well anyway and then do last

00:22:01.629 --> 00:22:01.639
look as well anyway and then do last
 

00:22:01.639 --> 00:22:04.209
look as well anyway and then do last
cannot use workers you can't really

00:22:04.209 --> 00:22:04.219
cannot use workers you can't really
 

00:22:04.219 --> 00:22:06.609
cannot use workers you can't really
declare inputs or outputs and so the

00:22:06.609 --> 00:22:06.619
declare inputs or outputs and so the
 

00:22:06.619 --> 00:22:08.529
declare inputs or outputs and so the
best practice is always you know create

00:22:08.529 --> 00:22:08.539
best practice is always you know create
 

00:22:08.539 --> 00:22:10.570
best practice is always you know create
your own type declare input declare

00:22:10.570 --> 00:22:10.580
your own type declare input declare
 

00:22:10.580 --> 00:22:13.359
your own type declare input declare
outputs and use workers if you don't do

00:22:13.359 --> 00:22:13.369
outputs and use workers if you don't do
 

00:22:13.369 --> 00:22:15.849
outputs and use workers if you don't do
it you're basically not building as

00:22:15.849 --> 00:22:15.859
it you're basically not building as
 

00:22:15.859 --> 00:22:19.899
it you're basically not building as
efficiently as you should now talking

00:22:19.899 --> 00:22:19.909
efficiently as you should now talking
 

00:22:19.909 --> 00:22:21.099
efficiently as you should now talking
about doing things during configuration

00:22:21.099 --> 00:22:21.109
about doing things during configuration
 

00:22:21.109 --> 00:22:23.950
about doing things during configuration
that you shouldn't do really you know we

00:22:23.950 --> 00:22:23.960
that you shouldn't do really you know we
 

00:22:23.960 --> 00:22:25.329
that you shouldn't do really you know we
see a lot of people trying to do like a

00:22:25.329 --> 00:22:25.339
see a lot of people trying to do like a
 

00:22:25.339 --> 00:22:27.519
see a lot of people trying to do like a
lot of computation and it's really not

00:22:27.519 --> 00:22:27.529
lot of computation and it's really not
 

00:22:27.529 --> 00:22:28.690
lot of computation and it's really not
something that you should be doing now I

00:22:28.690 --> 00:22:28.700
something that you should be doing now I
 

00:22:28.700 --> 00:22:30.279
something that you should be doing now I
realize that we don't have awesome ideas

00:22:30.279 --> 00:22:30.289
realize that we don't have awesome ideas
 

00:22:30.289 --> 00:22:32.019
realize that we don't have awesome ideas
to let you do some of the things that

00:22:32.019 --> 00:22:32.029
to let you do some of the things that
 

00:22:32.029 --> 00:22:33.579
to let you do some of the things that
you want to do but I'm gonna run you

00:22:33.579 --> 00:22:33.589
you want to do but I'm gonna run you
 

00:22:33.589 --> 00:22:35.379
you want to do but I'm gonna run you
through a two example that kind of

00:22:35.379 --> 00:22:35.389
through a two example that kind of
 

00:22:35.389 --> 00:22:38.320
through a two example that kind of
explain some workarounds to do a better

00:22:38.320 --> 00:22:38.330
explain some workarounds to do a better
 

00:22:38.330 --> 00:22:41.289
explain some workarounds to do a better
job so the first one that is by far the

00:22:41.289 --> 00:22:41.299
job so the first one that is by far the
 

00:22:41.299 --> 00:22:43.269
job so the first one that is by far the
one that we see most people do is

00:22:43.269 --> 00:22:43.279
one that we see most people do is
 

00:22:43.279 --> 00:22:45.879
one that we see most people do is
putting get information into the Russian

00:22:45.879 --> 00:22:45.889
putting get information into the Russian
 

00:22:45.889 --> 00:22:48.399
putting get information into the Russian
code or version name so we see something

00:22:48.399 --> 00:22:48.409
code or version name so we see something
 

00:22:48.409 --> 00:22:50.979
code or version name so we see something
like that Russian code equal and then

00:22:50.979 --> 00:22:50.989
like that Russian code equal and then
 

00:22:50.989 --> 00:22:54.190
like that Russian code equal and then
call in to get and get the Hedgehog on

00:22:54.190 --> 00:22:54.200
call in to get and get the Hedgehog on
 

00:22:54.200 --> 00:22:57.129
call in to get and get the Hedgehog on
or whatever and it's just not efficient

00:22:57.129 --> 00:22:57.139
or whatever and it's just not efficient
 

00:22:57.139 --> 00:22:58.509
or whatever and it's just not efficient
at all again you're gonna do that every

00:22:58.509 --> 00:22:58.519
at all again you're gonna do that every
 

00:22:58.519 --> 00:22:59.680
at all again you're gonna do that every
time you think every time you call

00:22:59.680 --> 00:22:59.690
time you think every time you call
 

00:22:59.690 --> 00:23:02.049
time you think every time you call
greater just to do you know like hey

00:23:02.049 --> 00:23:02.059
greater just to do you know like hey
 

00:23:02.059 --> 00:23:03.609
greater just to do you know like hey
what's the list of tasks or what's my

00:23:03.609 --> 00:23:03.619
what's the list of tasks or what's my
 

00:23:03.619 --> 00:23:06.279
what's the list of tasks or what's my
dependency is it's just not efficient so

00:23:06.279 --> 00:23:06.289
dependency is it's just not efficient so
 

00:23:06.289 --> 00:23:07.599
dependency is it's just not efficient so
as I said we don't really have a better

00:23:07.599 --> 00:23:07.609
as I said we don't really have a better
 

00:23:07.609 --> 00:23:10.119
as I said we don't really have a better
way to do it or nice way but there are

00:23:10.119 --> 00:23:10.129
way to do it or nice way but there are
 

00:23:10.129 --> 00:23:12.430
way to do it or nice way but there are
some ways to do it so the answer should

00:23:12.430 --> 00:23:12.440
some ways to do it so the answer should
 

00:23:12.440 --> 00:23:14.529
some ways to do it so the answer should
always be I need to do it in a task so

00:23:14.529 --> 00:23:14.539
always be I need to do it in a task so
 

00:23:14.539 --> 00:23:17.709
always be I need to do it in a task so
here because it's not very easy the way

00:23:17.709 --> 00:23:17.719
here because it's not very easy the way
 

00:23:17.719 --> 00:23:20.139
here because it's not very easy the way
that I found is well the version code is

00:23:20.139 --> 00:23:20.149
that I found is well the version code is
 

00:23:20.149 --> 00:23:21.820
that I found is well the version code is
injected in the manifest merger so if at

00:23:21.820 --> 00:23:21.830
injected in the manifest merger so if at
 

00:23:21.830 --> 00:23:23.379
injected in the manifest merger so if at
the end of the manifest merger I go and

00:23:23.379 --> 00:23:23.389
the end of the manifest merger I go and
 

00:23:23.389 --> 00:23:26.049
the end of the manifest merger I go and
I inject the version it should work so

00:23:26.049 --> 00:23:26.059
I inject the version it should work so
 

00:23:26.059 --> 00:23:27.789
I inject the version it should work so
the solution looks like this I'm gonna

00:23:27.789 --> 00:23:27.799
the solution looks like this I'm gonna
 

00:23:27.799 --> 00:23:30.070
the solution looks like this I'm gonna
run you through it so the first thing is

00:23:30.070 --> 00:23:30.080
run you through it so the first thing is
 

00:23:30.080 --> 00:23:35.139
run you through it so the first thing is
that you're going to have to read the

00:23:35.139 --> 00:23:35.149
that you're going to have to read the
 

00:23:35.149 --> 00:23:39.909
that you're going to have to read the
version code and and put it in you're

00:23:39.909 --> 00:23:39.919
version code and and put it in you're
 

00:23:39.919 --> 00:23:40.959
version code and and put it in you're
going to read you have to read the

00:23:40.959 --> 00:23:40.969
going to read you have to read the
 

00:23:40.969 --> 00:23:42.909
going to read you have to read the
manifest file and so since I'm a little

00:23:42.909 --> 00:23:42.919
manifest file and so since I'm a little
 

00:23:42.919 --> 00:23:44.320
manifest file and so since I'm a little
bit lazy and I don't want to use a full

00:23:44.320 --> 00:23:44.330
bit lazy and I don't want to use a full
 

00:23:44.330 --> 00:23:46.659
bit lazy and I don't want to use a full
XML library and find the attributes I'm

00:23:46.659 --> 00:23:46.669
XML library and find the attributes I'm
 

00:23:46.669 --> 00:23:48.609
XML library and find the attributes I'm
just going to do a search on replace so

00:23:48.609 --> 00:23:48.619
just going to do a search on replace so
 

00:23:48.619 --> 00:23:50.380
just going to do a search on replace so
I said version code two

00:23:50.380 --> 00:23:50.390
I said version code two
 

00:23:50.390 --> 00:23:52.330
I said version code two
a lot of nines hopefully it's not a

00:23:52.330 --> 00:23:52.340
a lot of nines hopefully it's not a
 

00:23:52.340 --> 00:23:54.100
a lot of nines hopefully it's not a
string that is present multiple times in

00:23:54.100 --> 00:23:54.110
string that is present multiple times in
 

00:23:54.110 --> 00:23:57.130
string that is present multiple times in
my file the next thing is I need to loop

00:23:57.130 --> 00:23:57.140
my file the next thing is I need to loop
 

00:23:57.140 --> 00:23:59.080
my file the next thing is I need to loop
over all of my variants right you always

00:23:59.080 --> 00:23:59.090
over all of my variants right you always
 

00:23:59.090 --> 00:24:01.299
over all of my variants right you always
have to do if you did with test you have

00:24:01.299 --> 00:24:01.309
have to do if you did with test you have
 

00:24:01.309 --> 00:24:02.470
have to do if you did with test you have
multiple balance you have to deal with

00:24:02.470 --> 00:24:02.480
multiple balance you have to deal with
 

00:24:02.480 --> 00:24:05.230
multiple balance you have to deal with
them and then also the manifest merger

00:24:05.230 --> 00:24:05.240
them and then also the manifest merger
 

00:24:05.240 --> 00:24:08.230
them and then also the manifest merger
is part of the output because of multi

00:24:08.230 --> 00:24:08.240
is part of the output because of multi
 

00:24:08.240 --> 00:24:09.940
is part of the output because of multi
apk if you use splits and things like

00:24:09.940 --> 00:24:09.950
apk if you use splits and things like
 

00:24:09.950 --> 00:24:12.009
apk if you use splits and things like
that here I don't have any so I'm just

00:24:12.009 --> 00:24:12.019
that here I don't have any so I'm just
 

00:24:12.019 --> 00:24:13.149
that here I don't have any so I'm just
going to loop on them but I knew I would

00:24:13.149 --> 00:24:13.159
going to loop on them but I knew I would
 

00:24:13.159 --> 00:24:16.330
going to loop on them but I knew I would
only have one and then I use sorry I use

00:24:16.330 --> 00:24:16.340
only have one and then I use sorry I use
 

00:24:16.340 --> 00:24:18.279
only have one and then I use sorry I use
manifest merger provider right remember

00:24:18.279 --> 00:24:18.289
manifest merger provider right remember
 

00:24:18.289 --> 00:24:19.930
manifest merger provider right remember
earlier I said don't use the known

00:24:19.930 --> 00:24:19.940
earlier I said don't use the known
 

00:24:19.940 --> 00:24:22.000
earlier I said don't use the known
provider version so here I get manifest

00:24:22.000 --> 00:24:22.010
provider version so here I get manifest
 

00:24:22.010 --> 00:24:23.590
provider version so here I get manifest
provider rich on a test provider and I

00:24:23.590 --> 00:24:23.600
provider rich on a test provider and I
 

00:24:23.600 --> 00:24:26.080
provider rich on a test provider and I
can call configure which just register a

00:24:26.080 --> 00:24:26.090
can call configure which just register a
 

00:24:26.090 --> 00:24:28.419
can call configure which just register a
lambda to run whenever the task is

00:24:28.419 --> 00:24:28.429
lambda to run whenever the task is
 

00:24:28.429 --> 00:24:31.299
lambda to run whenever the task is
configured later so it's lazy so inside

00:24:31.299 --> 00:24:31.309
configured later so it's lazy so inside
 

00:24:31.309 --> 00:24:33.730
configured later so it's lazy so inside
that add a duelist so you know I said

00:24:33.730 --> 00:24:33.740
that add a duelist so you know I said
 

00:24:33.740 --> 00:24:35.529
that add a duelist so you know I said
earlier workers but I that's the only

00:24:35.529 --> 00:24:35.539
earlier workers but I that's the only
 

00:24:35.539 --> 00:24:37.750
earlier workers but I that's the only
solution I have right now and then

00:24:37.750 --> 00:24:37.760
solution I have right now and then
 

00:24:37.760 --> 00:24:39.279
solution I have right now and then
inside it's very easy right the first

00:24:39.279 --> 00:24:39.289
inside it's very easy right the first
 

00:24:39.289 --> 00:24:40.570
inside it's very easy right the first
thing I do is I read the manifest

00:24:40.570 --> 00:24:40.580
thing I do is I read the manifest
 

00:24:40.580 --> 00:24:42.940
thing I do is I read the manifest
so here the manifest merger actually has

00:24:42.940 --> 00:24:42.950
so here the manifest merger actually has
 

00:24:42.950 --> 00:24:45.100
so here the manifest merger actually has
a property which is a directory property

00:24:45.100 --> 00:24:45.110
a property which is a directory property
 

00:24:45.110 --> 00:24:48.039
a property which is a directory property
manifest output directory so it's a get

00:24:48.039 --> 00:24:48.049
manifest output directory so it's a get
 

00:24:48.049 --> 00:24:50.889
manifest output directory so it's a get
and then as fine and then I just read

00:24:50.889 --> 00:24:50.899
and then as fine and then I just read
 

00:24:50.899 --> 00:24:52.509
and then as fine and then I just read
the file I do a search and replace and

00:24:52.509 --> 00:24:52.519
the file I do a search and replace and
 

00:24:52.519 --> 00:24:54.669
the file I do a search and replace and
I've read it back and if you do that it

00:24:54.669 --> 00:24:54.679
I've read it back and if you do that it
 

00:24:54.679 --> 00:24:56.799
I've read it back and if you do that it
will actually work now there are some

00:24:56.799 --> 00:24:56.809
will actually work now there are some
 

00:24:56.809 --> 00:24:59.139
will actually work now there are some
things that you need to tweak a little

00:24:59.139 --> 00:24:59.149
things that you need to tweak a little
 

00:24:59.149 --> 00:25:01.200
things that you need to tweak a little
bit right like if you do a git commit

00:25:01.200 --> 00:25:01.210
bit right like if you do a git commit
 

00:25:01.210 --> 00:25:04.149
bit right like if you do a git commit
touching let's here with me file you're

00:25:04.149 --> 00:25:04.159
touching let's here with me file you're
 

00:25:04.159 --> 00:25:06.279
touching let's here with me file you're
get jhanas change your headshot - change

00:25:06.279 --> 00:25:06.289
get jhanas change your headshot - change
 

00:25:06.289 --> 00:25:08.379
get jhanas change your headshot - change
but your code hasn't so you need to

00:25:08.379 --> 00:25:08.389
but your code hasn't so you need to
 

00:25:08.389 --> 00:25:11.350
but your code hasn't so you need to
technically recompile caching also is

00:25:11.350 --> 00:25:11.360
technically recompile caching also is
 

00:25:11.360 --> 00:25:12.850
technically recompile caching also is
important to use the input so you need

00:25:12.850 --> 00:25:12.860
important to use the input so you need
 

00:25:12.860 --> 00:25:15.009
important to use the input so you need
to do a little bit more work and so on

00:25:15.009 --> 00:25:15.019
to do a little bit more work and so on
 

00:25:15.019 --> 00:25:17.320
to do a little bit more work and so on
greater on tests you can create new

00:25:17.320 --> 00:25:17.330
greater on tests you can create new
 

00:25:17.330 --> 00:25:20.230
greater on tests you can create new
inputs so here I declare a new input the

00:25:20.230 --> 00:25:20.240
inputs so here I declare a new input the
 

00:25:20.240 --> 00:25:21.610
inputs so here I declare a new input the
name has to be unique I put something

00:25:21.610 --> 00:25:21.620
name has to be unique I put something
 

00:25:21.620 --> 00:25:23.710
name has to be unique I put something
random here and then you pass the value

00:25:23.710 --> 00:25:23.720
random here and then you pass the value
 

00:25:23.720 --> 00:25:25.600
random here and then you pass the value
and again it has to be lazy so don't put

00:25:25.600 --> 00:25:25.610
and again it has to be lazy so don't put
 

00:25:25.610 --> 00:25:27.310
and again it has to be lazy so don't put
the actual value put a callable that

00:25:27.310 --> 00:25:27.320
the actual value put a callable that
 

00:25:27.320 --> 00:25:29.620
the actual value put a callable that
will do the value so that grader can

00:25:29.620 --> 00:25:29.630
will do the value so that grader can
 

00:25:29.630 --> 00:25:33.310
will do the value so that grader can
call that whenever you need that the

00:25:33.310 --> 00:25:33.320
call that whenever you need that the
 

00:25:33.320 --> 00:25:34.720
call that whenever you need that the
last thing here is that what I ended up

00:25:34.720 --> 00:25:34.730
last thing here is that what I ended up
 

00:25:34.730 --> 00:25:38.049
last thing here is that what I ended up
cutting compute value twice inside and

00:25:38.049 --> 00:25:38.059
cutting compute value twice inside and
 

00:25:38.059 --> 00:25:39.789
cutting compute value twice inside and
during input validation so you

00:25:39.789 --> 00:25:39.799
during input validation so you
 

00:25:39.799 --> 00:25:41.409
during input validation so you
technically should extract that into a

00:25:41.409 --> 00:25:41.419
technically should extract that into a
 

00:25:41.419 --> 00:25:44.379
technically should extract that into a
callable memorize it somehow and in fact

00:25:44.379 --> 00:25:44.389
callable memorize it somehow and in fact
 

00:25:44.389 --> 00:25:45.789
callable memorize it somehow and in fact
I should probably put that one above my

00:25:45.789 --> 00:25:45.799
I should probably put that one above my
 

00:25:45.799 --> 00:25:49.680
I should probably put that one above my
application loop because I need to I

00:25:49.680 --> 00:25:49.690
application loop because I need to I
 

00:25:49.690 --> 00:25:51.700
application loop because I need to I
don't want to do that for post debug and

00:25:51.700 --> 00:25:51.710
don't want to do that for post debug and
 

00:25:51.710 --> 00:25:56.139
don't want to do that for post debug and
release some caveats here you know the

00:25:56.139 --> 00:25:56.149
release some caveats here you know the
 

00:25:56.149 --> 00:25:57.580
release some caveats here you know the
model is not up to date so if you have

00:25:57.580 --> 00:25:57.590
model is not up to date so if you have
 

00:25:57.590 --> 00:25:58.870
model is not up to date so if you have
another plug-in that use version code

00:25:58.870 --> 00:25:58.880
another plug-in that use version code
 

00:25:58.880 --> 00:26:02.440
another plug-in that use version code
it's not gonna get the value but here I

00:26:02.440 --> 00:26:02.450
it's not gonna get the value but here I
 

00:26:02.450 --> 00:26:03.800
it's not gonna get the value but here I
use a value as an in

00:26:03.800 --> 00:26:03.810
use a value as an in
 

00:26:03.810 --> 00:26:06.530
use a value as an in
generally you want to use a file but the

00:26:06.530 --> 00:26:06.540
generally you want to use a file but the
 

00:26:06.540 --> 00:26:08.060
generally you want to use a file but the
input here should be the get index which

00:26:08.060 --> 00:26:08.070
input here should be the get index which
 

00:26:08.070 --> 00:26:09.650
input here should be the get index which
can be really big so do I want to do a

00:26:09.650 --> 00:26:09.660
can be really big so do I want to do a
 

00:26:09.660 --> 00:26:10.760
can be really big so do I want to do a
check sum of all of it

00:26:10.760 --> 00:26:10.770
check sum of all of it
 

00:26:10.770 --> 00:26:12.380
check sum of all of it
maybe using jiggy's I can get the value

00:26:12.380 --> 00:26:12.390
maybe using jiggy's I can get the value
 

00:26:12.390 --> 00:26:14.750
maybe using jiggy's I can get the value
faster so up to you figure it out

00:26:14.750 --> 00:26:14.760
faster so up to you figure it out
 

00:26:14.760 --> 00:26:17.150
faster so up to you figure it out
and then don't last do last don't use

00:26:17.150 --> 00:26:17.160
and then don't last do last don't use
 

00:26:17.160 --> 00:26:19.880
and then don't last do last don't use
worker in fact you know they don't use

00:26:19.880 --> 00:26:19.890
worker in fact you know they don't use
 

00:26:19.890 --> 00:26:21.560
worker in fact you know they don't use
worker and they don't work very well

00:26:21.560 --> 00:26:21.570
worker and they don't work very well
 

00:26:21.570 --> 00:26:23.330
worker and they don't work very well
with worker right so if you have your

00:26:23.330 --> 00:26:23.340
with worker right so if you have your
 

00:26:23.340 --> 00:26:24.740
with worker right so if you have your
tasks here and you add a worker at the

00:26:24.740 --> 00:26:24.750
tasks here and you add a worker at the
 

00:26:24.750 --> 00:26:29.360
tasks here and you add a worker at the
end if the task user worker the do last

00:26:29.360 --> 00:26:29.370
end if the task user worker the do last
 

00:26:29.370 --> 00:26:30.680
end if the task user worker the do last
doesn't that means that if and all the

00:26:30.680 --> 00:26:30.690
doesn't that means that if and all the
 

00:26:30.690 --> 00:26:32.540
doesn't that means that if and all the
tasks run in at the same time it can

00:26:32.540 --> 00:26:32.550
tasks run in at the same time it can
 

00:26:32.550 --> 00:26:34.340
tasks run in at the same time it can
move to last actually and schedule it a

00:26:34.340 --> 00:26:34.350
move to last actually and schedule it a
 

00:26:34.350 --> 00:26:36.200
move to last actually and schedule it a
bit later so if you look at earlier

00:26:36.200 --> 00:26:36.210
bit later so if you look at earlier
 

00:26:36.210 --> 00:26:39.380
bit later so if you look at earlier
scans the the time of the creation of

00:26:39.380 --> 00:26:39.390
scans the the time of the creation of
 

00:26:39.390 --> 00:26:42.020
scans the the time of the creation of
the the tasks might be bigger than it

00:26:42.020 --> 00:26:42.030
the the tasks might be bigger than it
 

00:26:42.030 --> 00:26:43.730
the the tasks might be bigger than it
seems but it but it is because of that

00:26:43.730 --> 00:26:43.740
seems but it but it is because of that
 

00:26:43.740 --> 00:26:45.470
seems but it but it is because of that
white space in the middle something to

00:26:45.470 --> 00:26:45.480
white space in the middle something to
 

00:26:45.480 --> 00:26:48.290
white space in the middle something to
think about okay so we have another

00:26:48.290 --> 00:26:48.300
think about okay so we have another
 

00:26:48.300 --> 00:26:49.760
think about okay so we have another
example which is you know we see people

00:26:49.760 --> 00:26:49.770
example which is you know we see people
 

00:26:49.770 --> 00:26:51.490
example which is you know we see people
passing data ya buildconfig

00:26:51.490 --> 00:26:51.500
passing data ya buildconfig
 

00:26:51.500 --> 00:26:53.660
passing data ya buildconfig
for example the computer value and they

00:26:53.660 --> 00:26:53.670
for example the computer value and they
 

00:26:53.670 --> 00:26:56.180
for example the computer value and they
put it there so here it's harder to hook

00:26:56.180 --> 00:26:56.190
put it there so here it's harder to hook
 

00:26:56.190 --> 00:26:58.430
put it there so here it's harder to hook
in to the end and actually you know add

00:26:58.430 --> 00:26:58.440
in to the end and actually you know add
 

00:26:58.440 --> 00:27:00.050
in to the end and actually you know add
to the class so you can generate your

00:27:00.050 --> 00:27:00.060
to the class so you can generate your
 

00:27:00.060 --> 00:27:01.940
to the class so you can generate your
own class so I know that to do that it's

00:27:01.940 --> 00:27:01.950
own class so I know that to do that it's
 

00:27:01.950 --> 00:27:04.880
own class so I know that to do that it's
very easy you create a task so some

00:27:04.880 --> 00:27:04.890
very easy you create a task so some
 

00:27:04.890 --> 00:27:06.830
very easy you create a task so some
input package name class name location

00:27:06.830 --> 00:27:06.840
input package name class name location
 

00:27:06.840 --> 00:27:10.100
input package name class name location
and then the value and then I mean the

00:27:10.100 --> 00:27:10.110
and then the value and then I mean the
 

00:27:10.110 --> 00:27:11.690
and then the value and then I mean the
generation is relatively easy right I'm

00:27:11.690 --> 00:27:11.700
generation is relatively easy right I'm
 

00:27:11.700 --> 00:27:13.550
generation is relatively easy right I'm
just generating a four line Java class

00:27:13.550 --> 00:27:13.560
just generating a four line Java class
 

00:27:13.560 --> 00:27:17.420
just generating a four line Java class
so it's not nothing to talk about the

00:27:17.420 --> 00:27:17.430
so it's not nothing to talk about the
 

00:27:17.430 --> 00:27:19.130
so it's not nothing to talk about the
part about that we wanna look at is how

00:27:19.130 --> 00:27:19.140
part about that we wanna look at is how
 

00:27:19.140 --> 00:27:20.930
part about that we wanna look at is how
I register it right so again I loop on

00:27:20.930 --> 00:27:20.940
I register it right so again I loop on
 

00:27:20.940 --> 00:27:21.560
I register it right so again I loop on
the variance

00:27:21.560 --> 00:27:21.570
the variance
 

00:27:21.570 --> 00:27:23.570
the variance
I create my task with a unique name

00:27:23.570 --> 00:27:23.580
I create my task with a unique name
 

00:27:23.580 --> 00:27:25.790
I create my task with a unique name
using the variant name and then I set

00:27:25.790 --> 00:27:25.800
using the variant name and then I set
 

00:27:25.800 --> 00:27:27.560
using the variant name and then I set
the value here again using something

00:27:27.560 --> 00:27:27.570
the value here again using something
 

00:27:27.570 --> 00:27:30.290
the value here again using something
lazy so provider a project that provider

00:27:30.290 --> 00:27:30.300
lazy so provider a project that provider
 

00:27:30.300 --> 00:27:32.000
lazy so provider a project that provider
which you know received a call able and

00:27:32.000 --> 00:27:32.010
which you know received a call able and
 

00:27:32.010 --> 00:27:34.250
which you know received a call able and
returned a provider object basically so

00:27:34.250 --> 00:27:34.260
returned a provider object basically so
 

00:27:34.260 --> 00:27:36.020
returned a provider object basically so
that it's lazy and it's gonna work out

00:27:36.020 --> 00:27:36.030
that it's lazy and it's gonna work out
 

00:27:36.030 --> 00:27:37.700
that it's lazy and it's gonna work out
of the box the last thing you need to do

00:27:37.700 --> 00:27:37.710
of the box the last thing you need to do
 

00:27:37.710 --> 00:27:40.510
of the box the last thing you need to do
is you need to set you need to tell us

00:27:40.510 --> 00:27:40.520
is you need to set you need to tell us
 

00:27:40.520 --> 00:27:42.890
is you need to set you need to tell us
that hey I have generated some Java code

00:27:42.890 --> 00:27:42.900
that hey I have generated some Java code
 

00:27:42.900 --> 00:27:46.130
that hey I have generated some Java code
please go and compile it pass it to

00:27:46.130 --> 00:27:46.140
please go and compile it pass it to
 

00:27:46.140 --> 00:27:48.200
please go and compile it pass it to
studio so that I don't have unreserved

00:27:48.200 --> 00:27:48.210
studio so that I don't have unreserved
 

00:27:48.210 --> 00:27:50.660
studio so that I don't have unreserved
symbols and suddenly your IP I to do

00:27:50.660 --> 00:27:50.670
symbols and suddenly your IP I to do
 

00:27:50.670 --> 00:27:52.820
symbols and suddenly your IP I to do
that receive tests and not test provider

00:27:52.820 --> 00:27:52.830
that receive tests and not test provider
 

00:27:52.830 --> 00:27:54.470
that receive tests and not test provider
so we need to update that to make that

00:27:54.470 --> 00:27:54.480
so we need to update that to make that
 

00:27:54.480 --> 00:27:57.620
so we need to update that to make that
lazy task compatible so you will have to

00:27:57.620 --> 00:27:57.630
lazy task compatible so you will have to
 

00:27:57.630 --> 00:27:59.000
lazy task compatible so you will have to
actually go and call on your test

00:27:59.000 --> 00:27:59.010
actually go and call on your test
 

00:27:59.010 --> 00:28:00.800
actually go and call on your test
provider to get which we configure it

00:28:00.800 --> 00:28:00.810
provider to get which we configure it
 

00:28:00.810 --> 00:28:02.360
provider to get which we configure it
right away which is not great but it's

00:28:02.360 --> 00:28:02.370
right away which is not great but it's
 

00:28:02.370 --> 00:28:05.680
right away which is not great but it's
better than doing the computation during

00:28:05.680 --> 00:28:05.690
better than doing the computation during
 

00:28:05.690 --> 00:28:10.820
better than doing the computation during
during the configuration

00:28:10.820 --> 00:28:10.830
 
 

00:28:10.830 --> 00:28:12.800
 
now walk you through a little bit of the

00:28:12.800 --> 00:28:12.810
now walk you through a little bit of the
 

00:28:12.810 --> 00:28:14.720
now walk you through a little bit of the
guided 2 investigations of how do you

00:28:14.720 --> 00:28:14.730
guided 2 investigations of how do you
 

00:28:14.730 --> 00:28:16.760
guided 2 investigations of how do you
want to go about profiling measuring and

00:28:16.760 --> 00:28:16.770
want to go about profiling measuring and
 

00:28:16.770 --> 00:28:19.670
want to go about profiling measuring and
optimizing your bills so bill scans is a

00:28:19.670 --> 00:28:19.680
optimizing your bills so bill scans is a
 

00:28:19.680 --> 00:28:21.470
optimizing your bills so bill scans is a
really great tool that is provided by

00:28:21.470 --> 00:28:21.480
really great tool that is provided by
 

00:28:21.480 --> 00:28:24.440
really great tool that is provided by
Gradle the company behind Grail it's

00:28:24.440 --> 00:28:24.450
Gradle the company behind Grail it's
 

00:28:24.450 --> 00:28:25.940
Gradle the company behind Grail it's
really simple to use you run the same

00:28:25.940 --> 00:28:25.950
really simple to use you run the same
 

00:28:25.950 --> 00:28:27.680
really simple to use you run the same
task to normally do you just simply add

00:28:27.680 --> 00:28:27.690
task to normally do you just simply add
 

00:28:27.690 --> 00:28:30.380
task to normally do you just simply add
- - scan at the end that will and it

00:28:30.380 --> 00:28:30.390
- - scan at the end that will and it
 

00:28:30.390 --> 00:28:32.270
- - scan at the end that will and it
will prompt you to accept a license and

00:28:32.270 --> 00:28:32.280
will prompt you to accept a license and
 

00:28:32.280 --> 00:28:33.620
will prompt you to accept a license and
then it will upload your results for

00:28:33.620 --> 00:28:33.630
then it will upload your results for
 

00:28:33.630 --> 00:28:36.230
then it will upload your results for
analysis the important caveat to note

00:28:36.230 --> 00:28:36.240
analysis the important caveat to note
 

00:28:36.240 --> 00:28:38.300
analysis the important caveat to note
here this does send the data to Gradle

00:28:38.300 --> 00:28:38.310
here this does send the data to Gradle
 

00:28:38.310 --> 00:28:40.190
here this does send the data to Gradle
servers so you should be comfortable

00:28:40.190 --> 00:28:40.200
servers so you should be comfortable
 

00:28:40.200 --> 00:28:41.810
servers so you should be comfortable
over doing that they do give you an

00:28:41.810 --> 00:28:41.820
over doing that they do give you an
 

00:28:41.820 --> 00:28:43.970
over doing that they do give you an
option to delete all the results after

00:28:43.970 --> 00:28:43.980
option to delete all the results after
 

00:28:43.980 --> 00:28:46.430
option to delete all the results after
you're done and now your analysis but

00:28:46.430 --> 00:28:46.440
you're done and now your analysis but
 

00:28:46.440 --> 00:28:47.630
you're done and now your analysis but
you should just be aware of them you're

00:28:47.630 --> 00:28:47.640
you should just be aware of them you're
 

00:28:47.640 --> 00:28:49.940
you should just be aware of them you're
doing this so the reason why this tool

00:28:49.940 --> 00:28:49.950
doing this so the reason why this tool
 

00:28:49.950 --> 00:28:51.410
doing this so the reason why this tool
is really helpful it helps you find

00:28:51.410 --> 00:28:51.420
is really helpful it helps you find
 

00:28:51.420 --> 00:28:53.780
is really helpful it helps you find
those non lazy tasks that as I was

00:28:53.780 --> 00:28:53.790
those non lazy tasks that as I was
 

00:28:53.790 --> 00:28:55.340
those non lazy tasks that as I was
talking about and as well

00:28:55.340 --> 00:28:55.350
talking about and as well
 

00:28:55.350 --> 00:28:57.080
talking about and as well
you can find where your dependencies

00:28:57.080 --> 00:28:57.090
you can find where your dependencies
 

00:28:57.090 --> 00:28:58.490
you can find where your dependencies
that get resolved during the

00:28:58.490 --> 00:28:58.500
that get resolved during the
 

00:28:58.500 --> 00:29:00.230
that get resolved during the
configuration time which is another big

00:29:00.230 --> 00:29:00.240
configuration time which is another big
 

00:29:00.240 --> 00:29:03.800
configuration time which is another big
no-no so in yesterday's talk if you saw

00:29:03.800 --> 00:29:03.810
no-no so in yesterday's talk if you saw
 

00:29:03.810 --> 00:29:06.650
no-no so in yesterday's talk if you saw
Sam was talking about a 100 module like

00:29:06.650 --> 00:29:06.660
Sam was talking about a 100 module like
 

00:29:06.660 --> 00:29:08.600
Sam was talking about a 100 module like
baseline build right and then this is

00:29:08.600 --> 00:29:08.610
baseline build right and then this is
 

00:29:08.610 --> 00:29:11.060
baseline build right and then this is
how it compares to Android X so this is

00:29:11.060 --> 00:29:11.070
how it compares to Android X so this is
 

00:29:11.070 --> 00:29:14.630
how it compares to Android X so this is
a real project that has 240 modules and

00:29:14.630 --> 00:29:14.640
a real project that has 240 modules and
 

00:29:14.640 --> 00:29:16.910
a real project that has 240 modules and
is able to configure it in 24

00:29:16.910 --> 00:29:16.920
is able to configure it in 24
 

00:29:16.920 --> 00:29:19.340
is able to configure it in 24
milliseconds for a project so if you're

00:29:19.340 --> 00:29:19.350
milliseconds for a project so if you're
 

00:29:19.350 --> 00:29:22.130
milliseconds for a project so if you're
seeing your builds of you know 45 you

00:29:22.130 --> 00:29:22.140
seeing your builds of you know 45 you
 

00:29:22.140 --> 00:29:24.470
seeing your builds of you know 45 you
know 50 modules taking 10 seconds 20

00:29:24.470 --> 00:29:24.480
know 50 modules taking 10 seconds 20
 

00:29:24.480 --> 00:29:26.390
know 50 modules taking 10 seconds 20
seconds there's definitely ways to

00:29:26.390 --> 00:29:26.400
seconds there's definitely ways to
 

00:29:26.400 --> 00:29:28.550
seconds there's definitely ways to
improve and make it better so all I'm

00:29:28.550 --> 00:29:28.560
improve and make it better so all I'm
 

00:29:28.560 --> 00:29:30.950
improve and make it better so all I'm
saying is get inspired right so this is

00:29:30.950 --> 00:29:30.960
saying is get inspired right so this is
 

00:29:30.960 --> 00:29:32.780
saying is get inspired right so this is
only 6 milliseconds worse than a

00:29:32.780 --> 00:29:32.790
only 6 milliseconds worse than a
 

00:29:32.790 --> 00:29:34.700
only 6 milliseconds worse than a
baseline project and one thing to note

00:29:34.700 --> 00:29:34.710
baseline project and one thing to note
 

00:29:34.710 --> 00:29:35.990
baseline project and one thing to note
here but you can see in the slides that

00:29:35.990 --> 00:29:36.000
here but you can see in the slides that
 

00:29:36.000 --> 00:29:37.760
here but you can see in the slides that
we're not even doing that many lazy task

00:29:37.760 --> 00:29:37.770
we're not even doing that many lazy task
 

00:29:37.770 --> 00:29:39.560
we're not even doing that many lazy task
configurations that just means we

00:29:39.560 --> 00:29:39.570
configurations that just means we
 

00:29:39.570 --> 00:29:40.940
configurations that just means we
haven't done the work to actually make

00:29:40.940 --> 00:29:40.950
haven't done the work to actually make
 

00:29:40.950 --> 00:29:44.540
haven't done the work to actually make
it as fast as it can be so in Android X

00:29:44.540 --> 00:29:44.550
it as fast as it can be so in Android X
 

00:29:44.550 --> 00:29:46.010
it as fast as it can be so in Android X
will actually use build scans in another

00:29:46.010 --> 00:29:46.020
will actually use build scans in another
 

00:29:46.020 --> 00:29:48.650
will actually use build scans in another
way we used it to investigate the

00:29:48.650 --> 00:29:48.660
way we used it to investigate the
 

00:29:48.660 --> 00:29:51.410
way we used it to investigate the
effects of JVM max memory limits we

00:29:51.410 --> 00:29:51.420
effects of JVM max memory limits we
 

00:29:51.420 --> 00:29:54.130
effects of JVM max memory limits we
wanted to see how does that affect our

00:29:54.130 --> 00:29:54.140
wanted to see how does that affect our
 

00:29:54.140 --> 00:29:56.900
wanted to see how does that affect our
project right and for our project it

00:29:56.900 --> 00:29:56.910
project right and for our project it
 

00:29:56.910 --> 00:29:58.370
project right and for our project it
turned out to be the biggest bang for

00:29:58.370 --> 00:29:58.380
turned out to be the biggest bang for
 

00:29:58.380 --> 00:30:01.100
turned out to be the biggest bang for
the buck potentially new studio projects

00:30:01.100 --> 00:30:01.110
the buck potentially new studio projects
 

00:30:01.110 --> 00:30:03.590
the buck potentially new studio projects
start with one and a half gig limit for

00:30:03.590 --> 00:30:03.600
start with one and a half gig limit for
 

00:30:03.600 --> 00:30:06.260
start with one and a half gig limit for
your Gradle JVM and that might not be

00:30:06.260 --> 00:30:06.270
your Gradle JVM and that might not be
 

00:30:06.270 --> 00:30:08.630
your Gradle JVM and that might not be
enough for your project so what you want

00:30:08.630 --> 00:30:08.640
enough for your project so what you want
 

00:30:08.640 --> 00:30:09.590
enough for your project so what you want
to do is you really want to run an

00:30:09.590 --> 00:30:09.600
to do is you really want to run an
 

00:30:09.600 --> 00:30:11.060
to do is you really want to run an
experiment where you try the different

00:30:11.060 --> 00:30:11.070
experiment where you try the different
 

00:30:11.070 --> 00:30:14.000
experiment where you try the different
values and see how that comes out in

00:30:14.000 --> 00:30:14.010
values and see how that comes out in
 

00:30:14.010 --> 00:30:16.040
values and see how that comes out in
terms of to get the optimal value of

00:30:16.040 --> 00:30:16.050
terms of to get the optimal value of
 

00:30:16.050 --> 00:30:18.770
terms of to get the optimal value of
speed versus memory usage the things you

00:30:18.770 --> 00:30:18.780
speed versus memory usage the things you
 

00:30:18.780 --> 00:30:20.990
speed versus memory usage the things you
want to do you want to run the - - rerun

00:30:20.990 --> 00:30:21.000
want to do you want to run the - - rerun
 

00:30:21.000 --> 00:30:22.860
want to do you want to run the - - rerun
tasks that forces you to run

00:30:22.860 --> 00:30:22.870
tasks that forces you to run
 

00:30:22.870 --> 00:30:24.630
tasks that forces you to run
the tasks otherwise you might be

00:30:24.630 --> 00:30:24.640
the tasks otherwise you might be
 

00:30:24.640 --> 00:30:26.460
the tasks otherwise you might be
skipping some tasks due to caching and

00:30:26.460 --> 00:30:26.470
skipping some tasks due to caching and
 

00:30:26.470 --> 00:30:27.600
skipping some tasks due to caching and
stuff like that and now we'll give you

00:30:27.600 --> 00:30:27.610
stuff like that and now we'll give you
 

00:30:27.610 --> 00:30:29.670
stuff like that and now we'll give you
incorrect results you want to kill

00:30:29.670 --> 00:30:29.680
incorrect results you want to kill
 

00:30:29.680 --> 00:30:31.320
incorrect results you want to kill
demons in between the runs because if

00:30:31.320 --> 00:30:31.330
demons in between the runs because if
 

00:30:31.330 --> 00:30:34.410
demons in between the runs because if
you don't the Gradle demon will stay

00:30:34.410 --> 00:30:34.420
you don't the Gradle demon will stay
 

00:30:34.420 --> 00:30:35.850
you don't the Gradle demon will stay
stick around and cause you memory

00:30:35.850 --> 00:30:35.860
stick around and cause you memory
 

00:30:35.860 --> 00:30:38.070
stick around and cause you memory
pressure also leading to incorrect

00:30:38.070 --> 00:30:38.080
pressure also leading to incorrect
 

00:30:38.080 --> 00:30:40.770
pressure also leading to incorrect
results another thing to run is you want

00:30:40.770 --> 00:30:40.780
results another thing to run is you want
 

00:30:40.780 --> 00:30:42.240
results another thing to run is you want
to run tasks that are common to your

00:30:42.240 --> 00:30:42.250
to run tasks that are common to your
 

00:30:42.250 --> 00:30:43.530
to run tasks that are common to your
developers so if your developer does

00:30:43.530 --> 00:30:43.540
developers so if your developer does
 

00:30:43.540 --> 00:30:45.360
developers so if your developer does
assemble debug all the time that's the

00:30:45.360 --> 00:30:45.370
assemble debug all the time that's the
 

00:30:45.370 --> 00:30:47.430
assemble debug all the time that's the
path you should optimize for and then

00:30:47.430 --> 00:30:47.440
path you should optimize for and then
 

00:30:47.440 --> 00:30:49.020
path you should optimize for and then
finally and probably more importantly is

00:30:49.020 --> 00:30:49.030
finally and probably more importantly is
 

00:30:49.030 --> 00:30:50.160
finally and probably more importantly is
you want to run it on a typical

00:30:50.160 --> 00:30:50.170
you want to run it on a typical
 

00:30:50.170 --> 00:30:51.990
you want to run it on a typical
developer machine if you're gonna test

00:30:51.990 --> 00:30:52.000
developer machine if you're gonna test
 

00:30:52.000 --> 00:30:53.250
developer machine if you're gonna test
it out on the beefy machine and then

00:30:53.250 --> 00:30:53.260
it out on the beefy machine and then
 

00:30:53.260 --> 00:30:54.750
it out on the beefy machine and then
developer is gonna rather run it on a

00:30:54.750 --> 00:30:54.760
developer is gonna rather run it on a
 

00:30:54.760 --> 00:30:55.919
developer is gonna rather run it on a
different one you're not gonna have the

00:30:55.919 --> 00:30:55.929
different one you're not gonna have the
 

00:30:55.929 --> 00:30:58.980
different one you're not gonna have the
same performance characteristics so as

00:30:58.980 --> 00:30:58.990
same performance characteristics so as
 

00:30:58.990 --> 00:31:00.930
same performance characteristics so as
you play around with JVM memory limit

00:31:00.930 --> 00:31:00.940
you play around with JVM memory limit
 

00:31:00.940 --> 00:31:02.700
you play around with JVM memory limit
you just want to use Bill scans and see

00:31:02.700 --> 00:31:02.710
you just want to use Bill scans and see
 

00:31:02.710 --> 00:31:04.560
you just want to use Bill scans and see
how the execution time and garbage

00:31:04.560 --> 00:31:04.570
how the execution time and garbage
 

00:31:04.570 --> 00:31:07.680
how the execution time and garbage
collection times what the ratio is so

00:31:07.680 --> 00:31:07.690
collection times what the ratio is so
 

00:31:07.690 --> 00:31:09.360
collection times what the ratio is so
here in Android X we did a scan and

00:31:09.360 --> 00:31:09.370
here in Android X we did a scan and
 

00:31:09.370 --> 00:31:12.299
here in Android X we did a scan and
takes five minutes to GC and the total

00:31:12.299 --> 00:31:12.309
takes five minutes to GC and the total
 

00:31:12.309 --> 00:31:13.770
takes five minutes to GC and the total
build of nine minutes that means we're

00:31:13.770 --> 00:31:13.780
build of nine minutes that means we're
 

00:31:13.780 --> 00:31:15.390
build of nine minutes that means we're
only doing like four minutes of valuable

00:31:15.390 --> 00:31:15.400
only doing like four minutes of valuable
 

00:31:15.400 --> 00:31:17.640
only doing like four minutes of valuable
work and the rest of it is just garbage

00:31:17.640 --> 00:31:17.650
work and the rest of it is just garbage
 

00:31:17.650 --> 00:31:19.799
work and the rest of it is just garbage
collecting and that's bad that's what

00:31:19.799 --> 00:31:19.809
collecting and that's bad that's what
 

00:31:19.809 --> 00:31:21.030
collecting and that's bad that's what
the state where we're in before we

00:31:21.030 --> 00:31:21.040
the state where we're in before we
 

00:31:21.040 --> 00:31:23.880
the state where we're in before we
started investigating there's obviously

00:31:23.880 --> 00:31:23.890
started investigating there's obviously
 

00:31:23.890 --> 00:31:25.980
started investigating there's obviously
like hard limits of how small the memory

00:31:25.980 --> 00:31:25.990
like hard limits of how small the memory
 

00:31:25.990 --> 00:31:27.900
like hard limits of how small the memory
can be if you try to build Android X or

00:31:27.900 --> 00:31:27.910
can be if you try to build Android X or
 

00:31:27.910 --> 00:31:30.540
can be if you try to build Android X or
one gig of memory allowed after 14

00:31:30.540 --> 00:31:30.550
one gig of memory allowed after 14
 

00:31:30.550 --> 00:31:32.250
one gig of memory allowed after 14
minutes of struggling it will just throw

00:31:32.250 --> 00:31:32.260
minutes of struggling it will just throw
 

00:31:32.260 --> 00:31:35.190
minutes of struggling it will just throw
out a memory exception so as we did the

00:31:35.190 --> 00:31:35.200
out a memory exception so as we did the
 

00:31:35.200 --> 00:31:37.470
out a memory exception so as we did the
test you can see in the graph 1 &amp; 2 gigs

00:31:37.470 --> 00:31:37.480
test you can see in the graph 1 &amp; 2 gigs
 

00:31:37.480 --> 00:31:39.090
test you can see in the graph 1 &amp; 2 gigs
we're simply just not a thing that you

00:31:39.090 --> 00:31:39.100
we're simply just not a thing that you
 

00:31:39.100 --> 00:31:41.370
we're simply just not a thing that you
can do and that four gigs were wasting a

00:31:41.370 --> 00:31:41.380
can do and that four gigs were wasting a
 

00:31:41.380 --> 00:31:43.560
can do and that four gigs were wasting a
lot of time garbage collecting we ended

00:31:43.560 --> 00:31:43.570
lot of time garbage collecting we ended
 

00:31:43.570 --> 00:31:45.450
lot of time garbage collecting we ended
up picking number eight gigabytes for us

00:31:45.450 --> 00:31:45.460
up picking number eight gigabytes for us
 

00:31:45.460 --> 00:31:47.310
up picking number eight gigabytes for us
because that was the best in terms of

00:31:47.310 --> 00:31:47.320
because that was the best in terms of
 

00:31:47.320 --> 00:31:48.750
because that was the best in terms of
but to developer machines that we had

00:31:48.750 --> 00:31:48.760
but to developer machines that we had
 

00:31:48.760 --> 00:31:50.700
but to developer machines that we had
available and the speed we were able to

00:31:50.700 --> 00:31:50.710
available and the speed we were able to
 

00:31:50.710 --> 00:31:52.200
available and the speed we were able to
achieve as you can see there's

00:31:52.200 --> 00:31:52.210
achieve as you can see there's
 

00:31:52.210 --> 00:31:54.210
achieve as you can see there's
diminishing returns as you give Gradle

00:31:54.210 --> 00:31:54.220
diminishing returns as you give Gradle
 

00:31:54.220 --> 00:31:55.890
diminishing returns as you give Gradle
more memory there will be less garbage

00:31:55.890 --> 00:31:55.900
more memory there will be less garbage
 

00:31:55.900 --> 00:31:57.780
more memory there will be less garbage
collection but there's a you should

00:31:57.780 --> 00:31:57.790
collection but there's a you should
 

00:31:57.790 --> 00:32:00.419
collection but there's a you should
really pick a value and note don't just

00:32:00.419 --> 00:32:00.429
really pick a value and note don't just
 

00:32:00.429 --> 00:32:01.980
really pick a value and note don't just
take heed gigabytes instead in your

00:32:01.980 --> 00:32:01.990
take heed gigabytes instead in your
 

00:32:01.990 --> 00:32:03.750
take heed gigabytes instead in your
project this is for our project you

00:32:03.750 --> 00:32:03.760
project this is for our project you
 

00:32:03.760 --> 00:32:05.280
project this is for our project you
should do your own experiment and kind

00:32:05.280 --> 00:32:05.290
should do your own experiment and kind
 

00:32:05.290 --> 00:32:08.640
should do your own experiment and kind
of run it yourself another leathery you

00:32:08.640 --> 00:32:08.650
of run it yourself another leathery you
 

00:32:08.650 --> 00:32:11.010
of run it yourself another leathery you
have to pull is number Gradle workers so

00:32:11.010 --> 00:32:11.020
have to pull is number Gradle workers so
 

00:32:11.020 --> 00:32:12.510
have to pull is number Gradle workers so
Gradle by default gives you in a number

00:32:12.510 --> 00:32:12.520
Gradle by default gives you in a number
 

00:32:12.520 --> 00:32:14.970
Gradle by default gives you in a number
of workers as you have processors and

00:32:14.970 --> 00:32:14.980
of workers as you have processors and
 

00:32:14.980 --> 00:32:16.770
of workers as you have processors and
that might be too many for you because

00:32:16.770 --> 00:32:16.780
that might be too many for you because
 

00:32:16.780 --> 00:32:18.690
that might be too many for you because
what happens is the more workers you

00:32:18.690 --> 00:32:18.700
what happens is the more workers you
 

00:32:18.700 --> 00:32:20.580
what happens is the more workers you
spin up the more memory is being used at

00:32:20.580 --> 00:32:20.590
spin up the more memory is being used at
 

00:32:20.590 --> 00:32:22.110
spin up the more memory is being used at
the same time and if you don't have

00:32:22.110 --> 00:32:22.120
the same time and if you don't have
 

00:32:22.120 --> 00:32:23.730
the same time and if you don't have
enough memory you port your computer to

00:32:23.730 --> 00:32:23.740
enough memory you port your computer to
 

00:32:23.740 --> 00:32:25.140
enough memory you port your computer to
go into garbage collection all the time

00:32:25.140 --> 00:32:25.150
go into garbage collection all the time
 

00:32:25.150 --> 00:32:27.450
go into garbage collection all the time
so potentially limiting the number of

00:32:27.450 --> 00:32:27.460
so potentially limiting the number of
 

00:32:27.460 --> 00:32:29.010
so potentially limiting the number of
workers I know it sounds kind of

00:32:29.010 --> 00:32:29.020
workers I know it sounds kind of
 

00:32:29.020 --> 00:32:30.720
workers I know it sounds kind of
intuitive but it might make your builds

00:32:30.720 --> 00:32:30.730
intuitive but it might make your builds
 

00:32:30.730 --> 00:32:32.430
intuitive but it might make your builds
faster and you essentially want to run

00:32:32.430 --> 00:32:32.440
faster and you essentially want to run
 

00:32:32.440 --> 00:32:34.380
faster and you essentially want to run
the same process of experimentation that

00:32:34.380 --> 00:32:34.390
the same process of experimentation that
 

00:32:34.390 --> 00:32:36.029
the same process of experimentation that
we did for max

00:32:36.029 --> 00:32:36.039
we did for max
 

00:32:36.039 --> 00:32:40.320
we did for max
memory and finally one thing do you want

00:32:40.320 --> 00:32:40.330
memory and finally one thing do you want
 

00:32:40.330 --> 00:32:42.269
memory and finally one thing do you want
to notice for your CI you probably

00:32:42.269 --> 00:32:42.279
to notice for your CI you probably
 

00:32:42.279 --> 00:32:43.919
to notice for your CI you probably
should be picking different values for

00:32:43.919 --> 00:32:43.929
should be picking different values for
 

00:32:43.929 --> 00:32:46.139
should be picking different values for
the maximum JVM limits as well for max

00:32:46.139 --> 00:32:46.149
the maximum JVM limits as well for max
 

00:32:46.149 --> 00:32:48.269
the maximum JVM limits as well for max
workers and the reasons are your CI

00:32:48.269 --> 00:32:48.279
workers and the reasons are your CI
 

00:32:48.279 --> 00:32:49.979
workers and the reasons are your CI
probably runs away more tasks in

00:32:49.979 --> 00:32:49.989
probably runs away more tasks in
 

00:32:49.989 --> 00:32:51.719
probably runs away more tasks in
different tasks your build machines do

00:32:51.719 --> 00:32:51.729
different tasks your build machines do
 

00:32:51.729 --> 00:32:53.820
different tasks your build machines do
and also you probably have maybe fewer

00:32:53.820 --> 00:32:53.830
and also you probably have maybe fewer
 

00:32:53.830 --> 00:32:56.340
and also you probably have maybe fewer
machines of a more CPU and more RAM and

00:32:56.340 --> 00:32:56.350
machines of a more CPU and more RAM and
 

00:32:56.350 --> 00:32:58.049
machines of a more CPU and more RAM and
Zab is gonna walk you through how to use

00:32:58.049 --> 00:32:58.059
Zab is gonna walk you through how to use
 

00:32:58.059 --> 00:32:59.669
Zab is gonna walk you through how to use
a tracer agent to do more debugging

00:32:59.669 --> 00:32:59.679
a tracer agent to do more debugging
 

00:32:59.679 --> 00:33:04.769
a tracer agent to do more debugging
thank you okay so yesterday I mentioned

00:33:04.769 --> 00:33:04.779
thank you okay so yesterday I mentioned
 

00:33:04.779 --> 00:33:07.680
thank you okay so yesterday I mentioned
that you should really profile your

00:33:07.680 --> 00:33:07.690
that you should really profile your
 

00:33:07.690 --> 00:33:09.210
that you should really profile your
configuration right especially if you

00:33:09.210 --> 00:33:09.220
configuration right especially if you
 

00:33:09.220 --> 00:33:10.469
configuration right especially if you
apply a lot of plugin now if you have

00:33:10.469 --> 00:33:10.479
apply a lot of plugin now if you have
 

00:33:10.479 --> 00:33:13.289
apply a lot of plugin now if you have
your own plugin so of course you can use

00:33:13.289 --> 00:33:13.299
your own plugin so of course you can use
 

00:33:13.299 --> 00:33:16.680
your own plugin so of course you can use
any Java profiler but we found that you

00:33:16.680 --> 00:33:16.690
any Java profiler but we found that you
 

00:33:16.690 --> 00:33:18.629
any Java profiler but we found that you
know that was probably a better way a

00:33:18.629 --> 00:33:18.639
know that was probably a better way a
 

00:33:18.639 --> 00:33:20.759
know that was probably a better way a
more user-friendly way to profile that

00:33:20.759 --> 00:33:20.769
more user-friendly way to profile that
 

00:33:20.769 --> 00:33:23.759
more user-friendly way to profile that
so we created this little tool called

00:33:23.759 --> 00:33:23.769
so we created this little tool called
 

00:33:23.769 --> 00:33:25.889
so we created this little tool called
tracer agent that you can go and

00:33:25.889 --> 00:33:25.899
tracer agent that you can go and
 

00:33:25.899 --> 00:33:27.599
tracer agent that you can go and
download from a repository you can

00:33:27.599 --> 00:33:27.609
download from a repository you can
 

00:33:27.609 --> 00:33:29.580
download from a repository you can
really look at the readme see everything

00:33:29.580 --> 00:33:29.590
really look at the readme see everything
 

00:33:29.590 --> 00:33:31.259
really look at the readme see everything
but basically it works two different

00:33:31.259 --> 00:33:31.269
but basically it works two different
 

00:33:31.269 --> 00:33:33.289
but basically it works two different
ways right one way is you can create

00:33:33.289 --> 00:33:33.299
ways right one way is you can create
 

00:33:33.299 --> 00:33:36.119
ways right one way is you can create
some custom events you know using the

00:33:36.119 --> 00:33:36.129
some custom events you know using the
 

00:33:36.129 --> 00:33:39.389
some custom events you know using the
API or you can just you know anybody to

00:33:39.389 --> 00:33:39.399
API or you can just you know anybody to
 

00:33:39.399 --> 00:33:42.119
API or you can just you know anybody to
attach it to your JVM it's gonna run

00:33:42.119 --> 00:33:42.129
attach it to your JVM it's gonna run
 

00:33:42.129 --> 00:33:44.639
attach it to your JVM it's gonna run
inside it and you provide it with a list

00:33:44.639 --> 00:33:44.649
inside it and you provide it with a list
 

00:33:44.649 --> 00:33:47.489
inside it and you provide it with a list
of things to instrument and then at the

00:33:47.489 --> 00:33:47.499
of things to instrument and then at the
 

00:33:47.499 --> 00:33:50.369
of things to instrument and then at the
end it's going to output a JSON file

00:33:50.369 --> 00:33:50.379
end it's going to output a JSON file
 

00:33:50.379 --> 00:33:51.810
end it's going to output a JSON file
that you can just load in the chrome

00:33:51.810 --> 00:33:51.820
that you can just load in the chrome
 

00:33:51.820 --> 00:33:53.129
that you can just load in the chrome
tracing tool and see everything that

00:33:53.129 --> 00:33:53.139
tracing tool and see everything that
 

00:33:53.139 --> 00:33:56.339
tracing tool and see everything that
happens so I did that with the little

00:33:56.339 --> 00:33:56.349
happens so I did that with the little
 

00:33:56.349 --> 00:33:58.229
happens so I did that with the little
plugin that I made for this demo about

00:33:58.229 --> 00:33:58.239
plugin that I made for this demo about
 

00:33:58.239 --> 00:34:00.359
plugin that I made for this demo about
like the manifest merger do last and the

00:34:00.359 --> 00:34:00.369
like the manifest merger do last and the
 

00:34:00.369 --> 00:34:02.039
like the manifest merger do last and the
little generate code for build config

00:34:02.039 --> 00:34:02.049
little generate code for build config
 

00:34:02.049 --> 00:34:04.710
little generate code for build config
and things like that so what I did here

00:34:04.710 --> 00:34:04.720
and things like that so what I did here
 

00:34:04.720 --> 00:34:07.349
and things like that so what I did here
is I set it up to instrument everything

00:34:07.349 --> 00:34:07.359
is I set it up to instrument everything
 

00:34:07.359 --> 00:34:09.119
is I set it up to instrument everything
in my custom package right and then I

00:34:09.119 --> 00:34:09.129
in my custom package right and then I
 

00:34:09.129 --> 00:34:11.369
in my custom package right and then I
added a couple of lines to instrument a

00:34:11.369 --> 00:34:11.379
added a couple of lines to instrument a
 

00:34:11.379 --> 00:34:14.909
added a couple of lines to instrument a
few method from Gradle to see some life

00:34:14.909 --> 00:34:14.919
few method from Gradle to see some life
 

00:34:14.919 --> 00:34:16.289
few method from Gradle to see some life
cycle between configuration and

00:34:16.289 --> 00:34:16.299
cycle between configuration and
 

00:34:16.299 --> 00:34:19.260
cycle between configuration and
execution and a few of our own methods

00:34:19.260 --> 00:34:19.270
execution and a few of our own methods
 

00:34:19.270 --> 00:34:21.599
execution and a few of our own methods
in order to also instrument and see

00:34:21.599 --> 00:34:21.609
in order to also instrument and see
 

00:34:21.609 --> 00:34:24.359
in order to also instrument and see
what's happening in the grader plugin so

00:34:24.359 --> 00:34:24.369
what's happening in the grader plugin so
 

00:34:24.369 --> 00:34:26.190
what's happening in the grader plugin so
you load that into Chrome and then you

00:34:26.190 --> 00:34:26.200
you load that into Chrome and then you
 

00:34:26.200 --> 00:34:27.990
you load that into Chrome and then you
see all the colors and you're wondering

00:34:27.990 --> 00:34:28.000
see all the colors and you're wondering
 

00:34:28.000 --> 00:34:30.869
see all the colors and you're wondering
what's happening so if we dig into the

00:34:30.869 --> 00:34:30.879
what's happening so if we dig into the
 

00:34:30.879 --> 00:34:33.180
what's happening so if we dig into the
configuration phase we see the green the

00:34:33.180 --> 00:34:33.190
configuration phase we see the green the
 

00:34:33.190 --> 00:34:34.710
configuration phase we see the green the
large green banner at the top is the

00:34:34.710 --> 00:34:34.720
large green banner at the top is the
 

00:34:34.720 --> 00:34:37.319
large green banner at the top is the
whole configuration phase and then you

00:34:37.319 --> 00:34:37.329
whole configuration phase and then you
 

00:34:37.329 --> 00:34:38.700
whole configuration phase and then you
can you know zoom in and you can see

00:34:38.700 --> 00:34:38.710
can you know zoom in and you can see
 

00:34:38.710 --> 00:34:40.889
can you know zoom in and you can see
that this tiny little line here is the

00:34:40.889 --> 00:34:40.899
that this tiny little line here is the
 

00:34:40.899 --> 00:34:43.589
that this tiny little line here is the
apply plugin of my own plugin right so I

00:34:43.589 --> 00:34:43.599
apply plugin of my own plugin right so I
 

00:34:43.599 --> 00:34:46.589
apply plugin of my own plugin right so I
do very little here great but then you

00:34:46.589 --> 00:34:46.599
do very little here great but then you
 

00:34:46.599 --> 00:34:47.760
do very little here great but then you
can see that you have those two lines

00:34:47.760 --> 00:34:47.770
can see that you have those two lines
 

00:34:47.770 --> 00:34:48.530
can see that you have those two lines
and if I

00:34:48.530 --> 00:34:48.540
and if I
 

00:34:48.540 --> 00:34:49.940
and if I
the name it says custom plugins out

00:34:49.940 --> 00:34:49.950
the name it says custom plugins out
 

00:34:49.950 --> 00:34:52.220
the name it says custom plugins out
something that's my code - in fact it's

00:34:52.220 --> 00:34:52.230
something that's my code - in fact it's
 

00:34:52.230 --> 00:34:54.470
something that's my code - in fact it's
whenever you do Android that application

00:34:54.470 --> 00:34:54.480
whenever you do Android that application
 

00:34:54.480 --> 00:34:56.210
whenever you do Android that application
Valiant at all you're just registering

00:34:56.210 --> 00:34:56.220
Valiant at all you're just registering
 

00:34:56.220 --> 00:34:58.070
Valiant at all you're just registering
callback to happen later whenever the

00:34:58.070 --> 00:34:58.080
callback to happen later whenever the
 

00:34:58.080 --> 00:34:59.870
callback to happen later whenever the
Gradle plugin create those variants and

00:34:59.870 --> 00:34:59.880
Gradle plugin create those variants and
 

00:34:59.880 --> 00:35:00.740
Gradle plugin create those variants and
then call you back

00:35:00.740 --> 00:35:00.750
then call you back
 

00:35:00.750 --> 00:35:03.050
then call you back
so it doesn't show up in my apply

00:35:03.050 --> 00:35:03.060
so it doesn't show up in my apply
 

00:35:03.060 --> 00:35:04.190
so it doesn't show up in my apply
plug-in it shows up somewhere else

00:35:04.190 --> 00:35:04.200
plug-in it shows up somewhere else
 

00:35:04.200 --> 00:35:05.900
plug-in it shows up somewhere else
that's why this tool is great because

00:35:05.900 --> 00:35:05.910
that's why this tool is great because
 

00:35:05.910 --> 00:35:08.660
that's why this tool is great because
you say show me where that method is you

00:35:08.660 --> 00:35:08.670
you say show me where that method is you
 

00:35:08.670 --> 00:35:10.310
you say show me where that method is you
know taking time wherever it is I don't

00:35:10.310 --> 00:35:10.320
know taking time wherever it is I don't
 

00:35:10.320 --> 00:35:11.720
know taking time wherever it is I don't
have to go and backtrack it where it's

00:35:11.720 --> 00:35:11.730
have to go and backtrack it where it's
 

00:35:11.730 --> 00:35:12.250
have to go and backtrack it where it's
coming from

00:35:12.250 --> 00:35:12.260
coming from
 

00:35:12.260 --> 00:35:15.680
coming from
so here it's got twice and it's the

00:35:15.680 --> 00:35:15.690
so here it's got twice and it's the
 

00:35:15.690 --> 00:35:20.150
so here it's got twice and it's the
method called you know generate create

00:35:20.150 --> 00:35:20.160
method called you know generate create
 

00:35:20.160 --> 00:35:21.860
method called you know generate create
generate code tasks so that's my second

00:35:21.860 --> 00:35:21.870
generate code tasks so that's my second
 

00:35:21.870 --> 00:35:24.130
generate code tasks so that's my second
example that I showed about and it's

00:35:24.130 --> 00:35:24.140
example that I showed about and it's
 

00:35:24.140 --> 00:35:26.810
example that I showed about and it's
taking a large amount of time compared

00:35:26.810 --> 00:35:26.820
taking a large amount of time compared
 

00:35:26.820 --> 00:35:28.640
taking a large amount of time compared
to like the whole pink line which is

00:35:28.640 --> 00:35:28.650
to like the whole pink line which is
 

00:35:28.650 --> 00:35:30.890
to like the whole pink line which is
create honorary tasks and it just for

00:35:30.890 --> 00:35:30.900
create honorary tasks and it just for
 

00:35:30.900 --> 00:35:32.780
create honorary tasks and it just for
one task right so what happens here is I

00:35:32.780 --> 00:35:32.790
one task right so what happens here is I
 

00:35:32.790 --> 00:35:35.810
one task right so what happens here is I
left a thread sleep 100 millisecond so

00:35:35.810 --> 00:35:35.820
left a thread sleep 100 millisecond so
 

00:35:35.820 --> 00:35:37.580
left a thread sleep 100 millisecond so
that it shows up there but basically you

00:35:37.580 --> 00:35:37.590
that it shows up there but basically you
 

00:35:37.590 --> 00:35:39.440
that it shows up there but basically you
can go and really look to see where your

00:35:39.440 --> 00:35:39.450
can go and really look to see where your
 

00:35:39.450 --> 00:35:42.470
can go and really look to see where your
code is another example this is during

00:35:42.470 --> 00:35:42.480
code is another example this is during
 

00:35:42.480 --> 00:35:43.910
code is another example this is during
execution phase and again you know you

00:35:43.910 --> 00:35:43.920
execution phase and again you know you
 

00:35:43.920 --> 00:35:45.170
execution phase and again you know you
don't really see anything else normally

00:35:45.170 --> 00:35:45.180
don't really see anything else normally
 

00:35:45.180 --> 00:35:47.000
don't really see anything else normally
it should be like a waterfall chart but

00:35:47.000 --> 00:35:47.010
it should be like a waterfall chart but
 

00:35:47.010 --> 00:35:48.410
it should be like a waterfall chart but
here it only shows you basically the end

00:35:48.410 --> 00:35:48.420
here it only shows you basically the end
 

00:35:48.420 --> 00:35:51.890
here it only shows you basically the end
and it's my computer version code so

00:35:51.890 --> 00:35:51.900
and it's my computer version code so
 

00:35:51.900 --> 00:35:53.330
and it's my computer version code so
what and I can see that it's called

00:35:53.330 --> 00:35:53.340
what and I can see that it's called
 

00:35:53.340 --> 00:35:53.930
what and I can see that it's called
three times

00:35:53.930 --> 00:35:53.940
three times
 

00:35:53.940 --> 00:35:56.510
three times
so I mentioned you know so turns out

00:35:56.510 --> 00:35:56.520
so I mentioned you know so turns out
 

00:35:56.520 --> 00:35:58.010
so I mentioned you know so turns out
that the first two are actually greater

00:35:58.010 --> 00:35:58.020
that the first two are actually greater
 

00:35:58.020 --> 00:35:59.750
that the first two are actually greater
doing up-to-date checks and coding the

00:35:59.750 --> 00:35:59.760
doing up-to-date checks and coding the
 

00:35:59.760 --> 00:36:01.250
doing up-to-date checks and coding the
method to be like hey what's the current

00:36:01.250 --> 00:36:01.260
method to be like hey what's the current
 

00:36:01.260 --> 00:36:02.990
method to be like hey what's the current
version compared to the old one and then

00:36:02.990 --> 00:36:03.000
version compared to the old one and then
 

00:36:03.000 --> 00:36:05.330
version compared to the old one and then
the third one is the execution and so

00:36:05.330 --> 00:36:05.340
the third one is the execution and so
 

00:36:05.340 --> 00:36:07.580
the third one is the execution and so
you know I mentioned during earlier

00:36:07.580 --> 00:36:07.590
you know I mentioned during earlier
 

00:36:07.590 --> 00:36:08.960
you know I mentioned during earlier
during my slide that you know you needed

00:36:08.960 --> 00:36:08.970
during my slide that you know you needed
 

00:36:08.970 --> 00:36:11.180
during my slide that you know you needed
to memorize it and here obviously I did

00:36:11.180 --> 00:36:11.190
to memorize it and here obviously I did
 

00:36:11.190 --> 00:36:12.710
to memorize it and here obviously I did
not do it and therefore I see to run

00:36:12.710 --> 00:36:12.720
not do it and therefore I see to run
 

00:36:12.720 --> 00:36:15.140
not do it and therefore I see to run
three times and so that's very useful so

00:36:15.140 --> 00:36:15.150
three times and so that's very useful so
 

00:36:15.150 --> 00:36:16.340
three times and so that's very useful so
the good thing here is that you can

00:36:16.340 --> 00:36:16.350
the good thing here is that you can
 

00:36:16.350 --> 00:36:17.990
the good thing here is that you can
basically instrument any plugin right if

00:36:17.990 --> 00:36:18.000
basically instrument any plugin right if
 

00:36:18.000 --> 00:36:19.970
basically instrument any plugin right if
you apply a bunch of plug-in go look at

00:36:19.970 --> 00:36:19.980
you apply a bunch of plug-in go look at
 

00:36:19.980 --> 00:36:21.470
you apply a bunch of plug-in go look at
their source you know just open the jar

00:36:21.470 --> 00:36:21.480
their source you know just open the jar
 

00:36:21.480 --> 00:36:22.970
their source you know just open the jar
see what the package name is just add

00:36:22.970 --> 00:36:22.980
see what the package name is just add
 

00:36:22.980 --> 00:36:24.260
see what the package name is just add
the package name it's going to

00:36:24.260 --> 00:36:24.270
the package name it's going to
 

00:36:24.270 --> 00:36:26.330
the package name it's going to
instrument all the plug-in and then you

00:36:26.330 --> 00:36:26.340
instrument all the plug-in and then you
 

00:36:26.340 --> 00:36:28.340
instrument all the plug-in and then you
can just run a regular build look at

00:36:28.340 --> 00:36:28.350
can just run a regular build look at
 

00:36:28.350 --> 00:36:30.410
can just run a regular build look at
just JSON file see where you're spending

00:36:30.410 --> 00:36:30.420
just JSON file see where you're spending
 

00:36:30.420 --> 00:36:32.360
just JSON file see where you're spending
a lot of time and figure out what your

00:36:32.360 --> 00:36:32.370
a lot of time and figure out what your
 

00:36:32.370 --> 00:36:34.610
a lot of time and figure out what your
configuration is way above the baseline

00:36:34.610 --> 00:36:34.620
configuration is way above the baseline
 

00:36:34.620 --> 00:36:37.070
configuration is way above the baseline
that you know RMS and I showed you right

00:36:37.070 --> 00:36:37.080
that you know RMS and I showed you right
 

00:36:37.080 --> 00:36:37.610
that you know RMS and I showed you right
right

00:36:37.610 --> 00:36:37.620
right
 

00:36:37.620 --> 00:36:39.770
right
I've talked to people telling me I have

00:36:39.770 --> 00:36:39.780
I've talked to people telling me I have
 

00:36:39.780 --> 00:36:43.730
I've talked to people telling me I have
like few dozen modules and I have thirty

00:36:43.730 --> 00:36:43.740
like few dozen modules and I have thirty
 

00:36:43.740 --> 00:36:46.430
like few dozen modules and I have thirty
per second configuration and this is not

00:36:46.430 --> 00:36:46.440
per second configuration and this is not
 

00:36:46.440 --> 00:36:48.230
per second configuration and this is not
normal right you should be way faster

00:36:48.230 --> 00:36:48.240
normal right you should be way faster
 

00:36:48.240 --> 00:36:50.510
normal right you should be way faster
than that so I highly recommend that you

00:36:50.510 --> 00:36:50.520
than that so I highly recommend that you
 

00:36:50.520 --> 00:36:52.850
than that so I highly recommend that you
use this tool or any other Java profiler

00:36:52.850 --> 00:36:52.860
use this tool or any other Java profiler
 

00:36:52.860 --> 00:36:54.560
use this tool or any other Java profiler
to really figure out why you're spending

00:36:54.560 --> 00:36:54.570
to really figure out why you're spending
 

00:36:54.570 --> 00:36:59.250
to really figure out why you're spending
so much time and with that thank you we

00:36:59.250 --> 00:36:59.260
so much time and with that thank you we
 

00:36:59.260 --> 00:37:01.020
so much time and with that thank you we
be at the sandbox if you have questions

00:37:01.020 --> 00:37:01.030
be at the sandbox if you have questions
 

00:37:01.030 --> 00:37:03.290
be at the sandbox if you have questions
and thank you for coming

00:37:03.290 --> 00:37:03.300
and thank you for coming
 

00:37:03.300 --> 00:37:06.410
and thank you for coming
[Applause]

00:37:06.410 --> 00:37:06.420
[Applause]
 

00:37:06.420 --> 00:37:26.599
[Applause]
[Music]

