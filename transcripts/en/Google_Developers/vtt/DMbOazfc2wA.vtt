WEBVTT
Kind: captions
Language: en

00:00:07.120 --> 00:00:08.370
JAREK WILKIEWICZ: All right.

00:00:10.720 --> 00:00:14.960
I think we're good to go,
so we'll get started.

00:00:14.960 --> 00:00:18.470
Thank you very much for coming
to this session.

00:00:18.470 --> 00:00:21.180
I know there's a lot of other
options that are exciting and

00:00:21.180 --> 00:00:24.410
interesting, but I think this
is going to be fun.

00:00:24.410 --> 00:00:25.660
My name is Jarek Wilkiewicz.

00:00:25.660 --> 00:00:27.010
I work for YouTube.

00:00:27.010 --> 00:00:31.370
And today we would like to talk
about the challenges and

00:00:31.370 --> 00:00:37.170
opportunities related to mobile
video game play uploads

00:00:37.170 --> 00:00:38.900
from your game.

00:00:38.900 --> 00:00:41.910
Today we'll have a couple
of speakers.

00:00:41.910 --> 00:00:48.550
Daniel Hermes, a colleague of
mine from Google, Kenji Arai

00:00:48.550 --> 00:00:49.450
from YouTube Biz Dev.

00:00:49.450 --> 00:00:53.940
He has made this talk possible
by amazing sponsorship and

00:00:53.940 --> 00:00:55.700
pulling strings.

00:00:55.700 --> 00:00:59.560
We have Jens Owen from LunarG.

00:00:59.560 --> 00:01:01.640
They build a pretty interesting
cloud-based

00:01:01.640 --> 00:01:04.019
rendering technology we
wanted to show you.

00:01:04.019 --> 00:01:07.350
We will have Wayne Karo
from Free Range Games.

00:01:07.350 --> 00:01:09.850
They make beautiful
mobile games, and

00:01:09.850 --> 00:01:11.250
he's an awesome gamer.

00:01:11.250 --> 00:01:13.720
And he will have a chance to
show off his skills right

00:01:13.720 --> 00:01:16.440
here, live on stage,
in five minutes.

00:01:16.440 --> 00:01:17.790
You ready?

00:01:17.790 --> 00:01:18.300
All right.

00:01:18.300 --> 00:01:23.050
And Amir Ebrahimi, who
is a Unity 3D guru.

00:01:23.050 --> 00:01:24.610
I would like to acknowledge
Unity.

00:01:24.610 --> 00:01:28.510
They have really helped us put
this presentation together and

00:01:28.510 --> 00:01:31.840
allowed us to access their
source code license which was

00:01:31.840 --> 00:01:34.370
required for some of the
approaches that we'll be

00:01:34.370 --> 00:01:35.640
describing.

00:01:35.640 --> 00:01:38.210
And last, but not least, we
have Coby Cotton from Dude

00:01:38.210 --> 00:01:42.090
Perfect who just flew in this
morning from Austin, Texas,

00:01:42.090 --> 00:01:44.920
where I hear it's quite
warm today.

00:01:44.920 --> 00:01:47.880
All right, so agenda
for today.

00:01:47.880 --> 00:01:50.060
We'll talk about why
this is important.

00:01:50.060 --> 00:01:53.370
Why we are here and why YouTube
cares, and why you

00:01:53.370 --> 00:01:54.650
should care.

00:01:54.650 --> 00:01:57.500
We'll talk about YouTube APIs
and various approaches in

00:01:57.500 --> 00:02:00.960
which you can enable video
uploads from your title.

00:02:00.960 --> 00:02:02.630
And then I'll give
you a couple of

00:02:02.630 --> 00:02:03.940
demos of awesome games.

00:02:03.940 --> 00:02:07.020
So let's get into it

00:02:07.020 --> 00:02:09.940
So first of all, let's just kind
of look at the industry,

00:02:09.940 --> 00:02:10.600
what's happening.

00:02:10.600 --> 00:02:15.400
And I'm using some stats
from Digi-Capital.

00:02:15.400 --> 00:02:18.490
They have allowed us to share
this with you today.

00:02:18.490 --> 00:02:21.200
So really what's happening to
the market, as you all know,

00:02:21.200 --> 00:02:25.100
it's kind of segmenting into two
areas-- value games, which

00:02:25.100 --> 00:02:28.260
is the traditional [INAUDIBLE]
titles, console games, and

00:02:28.260 --> 00:02:28.940
volume games.

00:02:28.940 --> 00:02:32.470
And you see a lot of the volume
gaming picking up in

00:02:32.470 --> 00:02:34.010
emerging markets.

00:02:34.010 --> 00:02:38.210
Also, markets such as Japan
and Korea are doing well.

00:02:38.210 --> 00:02:41.720
And these are social games,
mobile games.

00:02:41.720 --> 00:02:44.850
That market is actually
growing very fast.

00:02:44.850 --> 00:02:47.765
So as you see, the numbers,
it's actually

00:02:47.765 --> 00:02:49.720
a 14% growth rate.

00:02:49.720 --> 00:02:52.550
Most of that is actually
happening in Asia and Europe.

00:02:52.550 --> 00:02:55.900
So this is what's happening in
the mobile gaming space.

00:02:55.900 --> 00:02:58.510
And we like that.

00:02:58.510 --> 00:03:01.120
If you look at the United
States actually, the

00:03:01.120 --> 00:03:05.140
projection is by 2014,
we'll have 141

00:03:05.140 --> 00:03:06.560
million mobile gamers.

00:03:06.560 --> 00:03:10.530
So almost half of the country
will be playing mobile games,

00:03:10.530 --> 00:03:13.650
which is quite amazing.

00:03:13.650 --> 00:03:17.170
Now, what do gamers
like to do?

00:03:17.170 --> 00:03:18.540
Well, they like watching
videos.

00:03:18.540 --> 00:03:20.910
And when you ask them what type
of videos they like to

00:03:20.910 --> 00:03:22.890
watch, obviously they
like trailers.

00:03:22.890 --> 00:03:25.810
But then the second most popular
category is the actual

00:03:25.810 --> 00:03:26.570
user game play.

00:03:26.570 --> 00:03:31.000
So this is authentic
user-generated content that

00:03:31.000 --> 00:03:32.060
they like to watch.

00:03:32.060 --> 00:03:33.510
And I'm one of them.

00:03:33.510 --> 00:03:36.420
I am quite addicted to watching
game play videos.

00:03:36.420 --> 00:03:36.980
They are fun.

00:03:36.980 --> 00:03:39.170
But what's even more fun is
creating them, and this is

00:03:39.170 --> 00:03:40.420
what we'll talk about today.

00:03:43.480 --> 00:03:46.130
Which brings us to YouTube.

00:03:46.130 --> 00:03:48.680
Couple of questions
about YouTube.

00:03:48.680 --> 00:03:51.020
So I want to throw some numbers
at you and see if you

00:03:51.020 --> 00:03:53.500
can recognize what these
numbers mean.

00:03:53.500 --> 00:03:56.030
So first number is
200 million.

00:03:56.030 --> 00:03:58.390
Any guesses what this
number represents?

00:03:58.390 --> 00:03:59.640
Hint-- it's related to mobile.

00:04:05.020 --> 00:04:06.568
No guesses?

00:04:06.568 --> 00:04:07.032
[AUDIENCE]

00:04:07.032 --> 00:04:07.960
[INAUDIBLE].

00:04:07.960 --> 00:04:09.570
JAREK WILKIEWICZ:
Ah, somewhat.

00:04:09.570 --> 00:04:12.380
So this is how many mobile
YouTube views we had in 2010.

00:04:12.380 --> 00:04:14.370
I know, that was a difficult
question.

00:04:14.370 --> 00:04:20.372
So here's an easier question,
600 million?

00:04:20.372 --> 00:04:20.858
[AUDIENCE]

00:04:20.858 --> 00:04:22.320
[INAUDIBLE].

00:04:22.320 --> 00:04:25.730
JAREK WILKIEWICZ: Ah, yes.

00:04:25.730 --> 00:04:26.390
You win the T-shirt.

00:04:26.390 --> 00:04:29.670
Please come find me after the
talk, and we'll try to hook

00:04:29.670 --> 00:04:30.750
you up with one.

00:04:30.750 --> 00:04:34.230
So this is how many YouTube
mobile views we get in 2012.

00:04:34.230 --> 00:04:37.190
So the number has tripled.

00:04:37.190 --> 00:04:40.100
Finally, 800 million?

00:04:40.100 --> 00:04:41.350
Any guesses?

00:04:43.390 --> 00:04:46.310
One observant engineer colleague
of mine noticed that

00:04:46.310 --> 00:04:49.190
it's actually the sum
of 200 and 600.

00:04:49.190 --> 00:04:50.950
And it is the correct answer.

00:04:50.950 --> 00:04:54.680
But this is how many users
we have worldwide.

00:04:54.680 --> 00:04:57.020
So this is just to kind of give
you an idea of what's

00:04:57.020 --> 00:04:58.310
happening in the mobile
space and

00:04:58.310 --> 00:04:59.820
generally in the user space.

00:04:59.820 --> 00:05:04.630
So one thing about the users
that we found is that people

00:05:04.630 --> 00:05:08.250
that play video games, they like
watching YouTube videos.

00:05:08.250 --> 00:05:11.350
And if you ask them what they do
after they watch the video,

00:05:11.350 --> 00:05:16.210
a fair amount of them actually
goes and buys one.

00:05:16.210 --> 00:05:17.610
They buy the game.

00:05:17.610 --> 00:05:20.270
And this is the traditional
gaming market.

00:05:20.270 --> 00:05:22.350
And then a lot of them also
search for more information.

00:05:22.350 --> 00:05:26.870
So this content that is out
there-- and remember, trailers

00:05:26.870 --> 00:05:29.990
as well as user-generated
content generates user

00:05:29.990 --> 00:05:30.540
activities.

00:05:30.540 --> 00:05:33.030
So the people that are
interested in gaming, they'll

00:05:33.030 --> 00:05:34.490
actually go and find
more information

00:05:34.490 --> 00:05:36.140
thanks to that content.

00:05:36.140 --> 00:05:40.750
So one example of a game that
has very successfully

00:05:40.750 --> 00:05:43.500
integrated this functionality
is Talking Tom.

00:05:43.500 --> 00:05:46.170
Anybody with kids
in the audience?

00:05:46.170 --> 00:05:47.000
Quite a few people.

00:05:47.000 --> 00:05:50.000
You guys have that
on your phones?

00:05:50.000 --> 00:05:52.700
If you don't, you will
probably soon.

00:05:52.700 --> 00:05:56.320
So what they have done is they
integrated YouTube video

00:05:56.320 --> 00:05:58.250
uploads into their game.

00:05:58.250 --> 00:05:59.450
And it is basically
a virtual pet.

00:05:59.450 --> 00:06:00.470
You can talk to the cat.

00:06:00.470 --> 00:06:01.520
It talks back to you.

00:06:01.520 --> 00:06:03.340
You can pet it and so forth.

00:06:03.340 --> 00:06:05.560
They have 400 million
uploads--

00:06:05.560 --> 00:06:07.190
sorry, downloads to date.

00:06:07.190 --> 00:06:09.290
So it's a huge, huge success--

00:06:09.290 --> 00:06:14.550
100 million active users, over
750,000 videos uploaded by

00:06:14.550 --> 00:06:15.770
their users.

00:06:15.770 --> 00:06:19.100
And that content has generated
345 million views.

00:06:19.100 --> 00:06:21.360
And just to put it in
perspective, this is actually

00:06:21.360 --> 00:06:23.280
a very significant
number of views.

00:06:23.280 --> 00:06:26.250
So this is in the same category
as a lot of the

00:06:26.250 --> 00:06:29.920
YouTube stars are getting or
some of the popular viral

00:06:29.920 --> 00:06:30.920
videos are getting.

00:06:30.920 --> 00:06:33.970
So this is really an incredible
number, all through

00:06:33.970 --> 00:06:35.590
user--generated content.

00:06:35.590 --> 00:06:37.520
And what they've been able
to do is really to enable

00:06:37.520 --> 00:06:40.770
self-expression with their
application, their little

00:06:40.770 --> 00:06:44.040
game, and the rest is history.

00:06:44.040 --> 00:06:47.600
Now, if you don't do anything,
if you don't want to take

00:06:47.600 --> 00:06:51.540
advantage of the trends that
we're seeing, you'll miss out

00:06:51.540 --> 00:06:52.930
on a couple of things.

00:06:52.930 --> 00:06:55.860
We find our users that watch
these game play videos are

00:06:55.860 --> 00:06:57.780
very engaged.

00:06:57.780 --> 00:07:02.180
It actually creates great
community and all that other

00:07:02.180 --> 00:07:03.790
good stuff-- promotion,
analytics--

00:07:03.790 --> 00:07:05.280
that come with having
all that content.

00:07:05.280 --> 00:07:07.510
And you can also make a little
money on this through

00:07:07.510 --> 00:07:11.220
monetization, which will offset
your development costs.

00:07:11.220 --> 00:07:15.290
So next question is, now that we
look at the market and all

00:07:15.290 --> 00:07:17.510
the trends are heading in the
positive direction, we have

00:07:17.510 --> 00:07:20.360
these huge user populations,
well, really, how hard is it?

00:07:20.360 --> 00:07:24.530
People have done this on
consoles, on PC games, through

00:07:24.530 --> 00:07:25.730
multiple approaches.

00:07:25.730 --> 00:07:28.250
But we don't see that much of
that in the mobile space.

00:07:28.250 --> 00:07:31.080
And obviously at YouTube, we
would like that because we

00:07:31.080 --> 00:07:32.710
feel it's good for the users.

00:07:32.710 --> 00:07:35.750
It's good for the industry,
and it's good for us.

00:07:35.750 --> 00:07:39.880
So, this brings us
to YouTube APIs.

00:07:39.880 --> 00:07:41.590
Quick question, who in
the audience has

00:07:41.590 --> 00:07:43.740
used YouTube APIs?

00:07:43.740 --> 00:07:45.370
Fair amount of people.

00:07:45.370 --> 00:07:46.550
It's a nice community.

00:07:46.550 --> 00:07:49.430
For those of you that haven't,
we have data

00:07:49.430 --> 00:07:51.570
APIs and player APIs.

00:07:51.570 --> 00:07:54.410
Data APIs allow you to basically
integrate with our

00:07:54.410 --> 00:07:56.770
back end and do most of the
things you can do on

00:07:56.770 --> 00:07:59.950
youtube.com, including video
uploads programmatically

00:07:59.950 --> 00:08:01.250
directly from your game.

00:08:01.250 --> 00:08:03.670
Player APIs allow you to
incorporate YouTube video

00:08:03.670 --> 00:08:05.080
playback in your application.

00:08:05.080 --> 00:08:08.400
So whether it's a console--

00:08:08.400 --> 00:08:10.700
sorry, it's a web-based
game, a mobile

00:08:10.700 --> 00:08:12.690
game, you can do that.

00:08:12.690 --> 00:08:15.690
And data APIs are
based on REST.

00:08:15.690 --> 00:08:20.450
If you've worked with any other
Google APIs, really they

00:08:20.450 --> 00:08:22.210
are very easy to use.

00:08:22.210 --> 00:08:24.650
Player APIs, we have JavaScript
ActionScript.

00:08:24.650 --> 00:08:26.710
And we also have a
new thing coming.

00:08:26.710 --> 00:08:30.690
We will be previewing it at
Google I/O, which is a YouTube

00:08:30.690 --> 00:08:34.240
Android player API, which
allows you to integrate

00:08:34.240 --> 00:08:36.659
YouTube video playback directly
into your Android

00:08:36.659 --> 00:08:39.900
application using
Java-based API.

00:08:39.900 --> 00:08:42.559
There's a session about this
tomorrow afternoon.

00:08:42.559 --> 00:08:44.690
I'm encouraging you to see
that if you would like to

00:08:44.690 --> 00:08:49.520
incorporate the video playback
into your title as well.

00:08:49.520 --> 00:08:55.060
So there's actually a couple of
approaches to incorporating

00:08:55.060 --> 00:08:57.770
YouTube video uploads
into your game.

00:08:57.770 --> 00:09:00.450
And the way I look at it is,
I see three different

00:09:00.450 --> 00:09:02.790
approaches--

00:09:02.790 --> 00:09:06.390
the proven, relatively easy,
reliable approach; the one

00:09:06.390 --> 00:09:09.440
that is very promising but
kind of out there, more

00:09:09.440 --> 00:09:12.150
futuristic; and one that is
really a mix of the two.

00:09:12.150 --> 00:09:16.260
And to visualize it, I think
this is a good analogy.

00:09:16.260 --> 00:09:18.660
So we have a Volkswagen
Jetta--

00:09:18.660 --> 00:09:22.160
good solid engineering, not
super expensive, does the job

00:09:22.160 --> 00:09:22.670
really well.

00:09:22.670 --> 00:09:24.410
It's here today.

00:09:24.410 --> 00:09:27.070
And we have the Beamer.

00:09:27.070 --> 00:09:29.720
It's a wonderful car, but I
don't think you can buy that

00:09:29.720 --> 00:09:32.220
one in the stores just yet.

00:09:32.220 --> 00:09:34.720
It has a lot of potential.

00:09:34.720 --> 00:09:36.430
I would like to have one.

00:09:36.430 --> 00:09:40.820
And then we have the
Prius wagon.

00:09:40.820 --> 00:09:42.280
I mean, it's definitely
here today.

00:09:42.280 --> 00:09:44.880
It'll offer some of the
advantages of the previous

00:09:44.880 --> 00:09:48.200
two, not as expensive
as the middle.

00:09:48.200 --> 00:09:50.920
So this is really what we're
going to talk about today, is

00:09:50.920 --> 00:09:55.850
how do we incorporate video
uploads into a game using your

00:09:55.850 --> 00:09:59.350
device's resources within the
limitations of your device?

00:09:59.350 --> 00:10:02.730
Then how can you leverage the
cloud to actually offload some

00:10:02.730 --> 00:10:04.660
of the processing for you?

00:10:04.660 --> 00:10:08.240
And then finally, can you come
up with a balance between the

00:10:08.240 --> 00:10:12.820
two to kind of have a
mix of both works?

00:10:12.820 --> 00:10:17.050
So now we'll talk about
local video capture.

00:10:17.050 --> 00:10:21.610
And we will use a game from
Dude Perfect that

00:10:21.610 --> 00:10:23.530
was recently launched.

00:10:23.530 --> 00:10:25.110
First of all, a question
for you guys.

00:10:25.110 --> 00:10:28.460
Who likes basketball?

00:10:28.460 --> 00:10:29.680
Quite a few people.

00:10:29.680 --> 00:10:31.970
Anyone has heard about
Dude Perfect?

00:10:31.970 --> 00:10:35.080
OK, for those of you that
haven't, if you like

00:10:35.080 --> 00:10:37.930
basketball, you will
love Dude Perfect.

00:10:37.930 --> 00:10:40.960
So to give you an idea of
what they do, I have a

00:10:40.960 --> 00:10:42.150
little video here.

00:10:42.150 --> 00:10:44.000
And we'll play it for you.

00:10:44.000 --> 00:10:45.320
[VIDEO PLAYBACK]

00:10:45.320 --> 00:10:47.590
-This group of Texas A&amp;M
students have become a

00:10:47.590 --> 00:10:49.420
national sensation
with their--

00:10:49.420 --> 00:10:50.180
-Jaw-dropping.

00:10:50.180 --> 00:10:51.050
-Unbelievable.

00:10:51.050 --> 00:10:51.400
-Pretty good, right?

00:10:51.400 --> 00:10:52.450
-It's fun to watch.

00:10:52.450 --> 00:10:53.180
-Mind-blowing.

00:10:53.180 --> 00:10:53.720
-Very impressive.

00:10:53.720 --> 00:10:57.610
-amazing, incredible basketball
trick shots.

00:10:57.610 --> 00:11:00.630
-Take a look.

00:11:00.630 --> 00:11:02.140
-Welcome to Aggieland.

00:11:02.140 --> 00:11:04.128
This is the world's longest
basketball shot.

00:11:08.104 --> 00:11:10.589
-Yes!

00:11:10.589 --> 00:11:12.577
What?

00:11:12.577 --> 00:11:13.827
Oh my God!

00:11:17.547 --> 00:11:21.026
[CHEERING]

00:11:21.026 --> 00:11:30.966
[MUSIC PLAYIING]

00:11:30.966 --> 00:11:32.216
-Yeah!

00:11:47.864 --> 00:11:50.380
[LAUGHTER]

00:11:50.380 --> 00:11:51.981
-Fore!

00:11:51.981 --> 00:11:59.286
[LAUGHTER]

00:11:59.286 --> 00:12:00.270
-Yarrgh.

00:12:00.270 --> 00:12:01.820
-This is the Cowboy
Stadium shot.

00:12:09.660 --> 00:12:10.150
-Yeah!

00:12:10.150 --> 00:12:11.620
Ha-ha-ha!

00:12:11.620 --> 00:12:13.580
Woo!

00:12:13.580 --> 00:12:15.060
Cowboy Stadium!

00:12:15.060 --> 00:12:16.900
-We found these guys
on YouTube.

00:12:16.900 --> 00:12:18.080
-They call themselves

00:12:18.080 --> 00:12:18.960
-Dude Perfect.

00:12:18.960 --> 00:12:20.670
-Dude Perfect.

00:12:20.670 --> 00:12:21.380
-Dude Perfect.

00:12:21.380 --> 00:12:22.362
-Dude Perfect.

00:12:22.362 --> 00:12:22.853
-These are our buddies
from Dude Perfect.

00:12:22.853 --> 00:12:23.344
-Dude Perfect.

00:12:23.344 --> 00:12:26.790
-And their videos are tearing
up the Internet.

00:12:26.790 --> 00:12:27.150
-Burning up the Internet.

00:12:27.150 --> 00:12:29.520
-There's talk of a video
game based on this.

00:12:29.520 --> 00:12:30.690
-He made it!

00:12:30.690 --> 00:12:34.790
-Those deals are all still long
shots, but, of course,

00:12:34.790 --> 00:12:37.239
they've made those before.

00:12:37.239 --> 00:12:38.145
-Dude Perfect.

00:12:38.145 --> 00:12:39.960
[END VIDEO PLAYBACK]

00:12:39.960 --> 00:12:41.080
JAREK WILKIEWICZ: And with
that, I would like to

00:12:41.080 --> 00:12:43.933
introduce Coby Cotton
from Dude Perfect.

00:12:43.933 --> 00:12:49.620
[APPLAUSE]

00:12:49.620 --> 00:12:51.060
COBY COTTON: Thanks, Jarek,
I really appreciate it.

00:12:51.060 --> 00:12:51.920
Guys, it's good to be here.

00:12:51.920 --> 00:12:54.440
Like Jarek mentioned earlier,
I came from Austin, Texas.

00:12:54.440 --> 00:12:57.820
It was 104 yesterday, and it's
going to be 106 later in the

00:12:57.820 --> 00:13:00.180
week, so I'm pretty excited to
be in San Francisco even if

00:13:00.180 --> 00:13:01.960
only for a short time.

00:13:01.960 --> 00:13:04.160
As he mentioned, this has
obviously been an exciting

00:13:04.160 --> 00:13:04.980
journey for us.

00:13:04.980 --> 00:13:07.615
Dude Perfect's been around
for three years.

00:13:07.615 --> 00:13:10.200
We were formed early in 2009.

00:13:10.200 --> 00:13:13.240
These crazy guys that you saw
on the video are myself, I

00:13:13.240 --> 00:13:15.160
have a twin brother, and
then three other

00:13:15.160 --> 00:13:16.220
roommates in college.

00:13:16.220 --> 00:13:19.660
So we started in our backyard,
probably like a lot of other

00:13:19.660 --> 00:13:21.800
YouTube stories, just
goofing around.

00:13:21.800 --> 00:13:23.570
We're all incredibly
competitive, and one of the

00:13:23.570 --> 00:13:25.960
guys, Tyler, who's the one that
makes most of the long

00:13:25.960 --> 00:13:27.970
shots, he was standing
behind a tree.

00:13:27.970 --> 00:13:29.260
We'd just bought a
basketball goal.

00:13:29.260 --> 00:13:30.525
And of course, there's
a grass backyard.

00:13:30.525 --> 00:13:33.050
So we weren't playing your
standard pickup game.

00:13:33.050 --> 00:13:35.240
And so he said, all right, bet
you a Jimmy John's sandwich I

00:13:35.240 --> 00:13:37.410
can make a hook shot from
behind the tree.

00:13:37.410 --> 00:13:40.260
And, of course, like I did every
time, I was like, dude,

00:13:40.260 --> 00:13:41.000
I'll take that bet.

00:13:41.000 --> 00:13:41.640
You're not going to make it.

00:13:41.640 --> 00:13:42.810
And he drains it.

00:13:42.810 --> 00:13:45.130
Well, then we had to get the
video camera out to record it

00:13:45.130 --> 00:13:48.050
and show Garrett, who wasn't
there, and so we videoed Tyler

00:13:48.050 --> 00:13:49.080
'til he made it.

00:13:49.080 --> 00:13:50.210
And I said I can top that.

00:13:50.210 --> 00:13:51.770
So I made one from the roof.

00:13:51.770 --> 00:13:53.560
And one of the other guys said
let's put the goal in the back

00:13:53.560 --> 00:13:54.740
of the truck.

00:13:54.740 --> 00:13:57.520
So we just started making shot
after shot until we had enough

00:13:57.520 --> 00:13:59.290
for a video and loaded
it to show to

00:13:59.290 --> 00:14:00.590
our friends and family.

00:14:00.590 --> 00:14:03.860
Naturally, this was during
finals week at Texas A&amp;M. So

00:14:03.860 --> 00:14:05.750
we were procrastinating
a little bit.

00:14:05.750 --> 00:14:08.050
But fortunately for us, the
video started to spread.

00:14:08.050 --> 00:14:10.720
And two mornings later, Good
Morning America woke my

00:14:10.720 --> 00:14:12.970
brother up with a phone call and
asked if they could show

00:14:12.970 --> 00:14:13.560
it that morning.

00:14:13.560 --> 00:14:15.485
So everything took
off from there.

00:14:15.485 --> 00:14:19.110
And now three years later, we've
made over 100 videos,

00:14:19.110 --> 00:14:20.730
worked with a lot of
brands, like you

00:14:20.730 --> 00:14:21.770
guys saw in the video.

00:14:21.770 --> 00:14:25.680
GMC was a brand we worked with
on the airplane shot.

00:14:25.680 --> 00:14:29.890
But we now have over 250,000
subscribers on YouTube.

00:14:29.890 --> 00:14:32.000
We just recently crossed 80
million views, so that was

00:14:32.000 --> 00:14:33.630
exciting for us.

00:14:33.630 --> 00:14:36.920
Our slogan's always been "Go
Big." We just recently

00:14:36.920 --> 00:14:40.830
launched a book with that same
title, Go Big, so that's been

00:14:40.830 --> 00:14:43.470
really awesome as well.

00:14:43.470 --> 00:14:46.760
Ultimately, we want to have
a Go Big approach to life.

00:14:46.760 --> 00:14:50.150
So for us, it was really natural
to turn this whole

00:14:50.150 --> 00:14:51.380
concept into a game.

00:14:51.380 --> 00:14:53.650
It was one of our dreams from
the very beginning.

00:14:53.650 --> 00:14:56.080
We were like, how cool would
it be if we had kind of an

00:14:56.080 --> 00:14:58.860
Angry Birds-like experience
but with trick-shot

00:14:58.860 --> 00:14:59.840
basketball.

00:14:59.840 --> 00:15:03.580
And so a little over a year ago,
we launched our game, on

00:15:03.580 --> 00:15:06.110
the Apple platform was the first
way that we launched

00:15:06.110 --> 00:15:07.130
during March Madness.

00:15:07.130 --> 00:15:09.910
And then just recently, like
Jarek mentioned, we launched

00:15:09.910 --> 00:15:11.680
for Android during this
March Madness.

00:15:11.680 --> 00:15:15.040
And so, here's some of the
things that you guys just saw,

00:15:15.040 --> 00:15:16.770
some of the TV appearances.

00:15:16.770 --> 00:15:19.740
We were listed by Advertising
Age as one of the most

00:15:19.740 --> 00:15:21.950
in-demand brand stars on
YouTube which has been

00:15:21.950 --> 00:15:23.810
exciting as well.

00:15:23.810 --> 00:15:25.510
Some of the brands that we've
worked with, just

00:15:25.510 --> 00:15:27.930
to give you a taste.

00:15:27.930 --> 00:15:29.740
But our game, we've been
fortunate enough to be the

00:15:29.740 --> 00:15:32.510
number one sports game on the
iPhone and on the Android

00:15:32.510 --> 00:15:35.070
platform at different times
since the launch.

00:15:35.070 --> 00:15:37.690
One thing that's been really,
really cool is to take the

00:15:37.690 --> 00:15:40.500
brand that we've been able to
create on YouTube, and you

00:15:40.500 --> 00:15:42.260
have this loyal base
of followers.

00:15:42.260 --> 00:15:43.850
And so we didn't know if
it would work or not.

00:15:43.850 --> 00:15:45.890
We weren't confident one way or
the other, but we figured

00:15:45.890 --> 00:15:48.410
we would give it a try and
because these followers are so

00:15:48.410 --> 00:15:50.660
loyal, they were really
excited to jump on

00:15:50.660 --> 00:15:51.880
board with the game.

00:15:51.880 --> 00:15:54.010
And so that was one reason
that it took off.

00:15:54.010 --> 00:15:57.350
And it's been really fun to
expand that to Android now.

00:15:57.350 --> 00:15:58.940
As you can see, we're now
approaching a million

00:15:58.940 --> 00:16:01.810
downloads across those
platforms, and we're excited

00:16:01.810 --> 00:16:03.590
to continue to expand it.

00:16:03.590 --> 00:16:06.590
Today what we're excited to talk
about is a feature that

00:16:06.590 --> 00:16:07.940
has been our number one request

00:16:07.940 --> 00:16:09.220
since the very beginning.

00:16:09.220 --> 00:16:14.390
We've had kids that tweet us in
and G+ us comments and talk

00:16:14.390 --> 00:16:17.410
about how they would just love
to be able share their made

00:16:17.410 --> 00:16:18.960
shots with their friends.

00:16:18.960 --> 00:16:20.830
So right now, the way that it
works is if you make some

00:16:20.830 --> 00:16:24.360
crazy shot in the game, you can
watch your replay back.

00:16:24.360 --> 00:16:27.120
But as soon as you move on to
the next level, it's gone.

00:16:27.120 --> 00:16:28.830
We don't have any way of saving
it, and we definitely

00:16:28.830 --> 00:16:31.020
don't have any way of sharing
it to friends.

00:16:31.020 --> 00:16:33.410
So that's been a huge request
from our audience.

00:16:33.410 --> 00:16:35.830
And so when we were approached
with the opportunity to kind

00:16:35.830 --> 00:16:38.820
of expand this with the help
of some of the people that

00:16:38.820 --> 00:16:40.780
you've seen today and that
you're going to hear from, we

00:16:40.780 --> 00:16:43.180
were really excited to jump on
board with that because it's

00:16:43.180 --> 00:16:46.480
something that, like I said,
has been requested so much.

00:16:46.480 --> 00:16:49.290
For us, one thing that would be
so incredible about this is

00:16:49.290 --> 00:16:52.060
that, because these followers
are so engaged, they would do

00:16:52.060 --> 00:16:53.410
a lot of the marketing for us.

00:16:53.410 --> 00:16:56.100
So what we have is, as probably
a lot of YouTubers

00:16:56.100 --> 00:16:57.520
can attest, you end up
with some of these

00:16:57.520 --> 00:16:58.830
kind of super fans.

00:16:58.830 --> 00:17:01.980
And so they'll tweet you
100 times in a day.

00:17:01.980 --> 00:17:04.470
And so what's great about
something like this is if you

00:17:04.470 --> 00:17:09.180
get the ability into their hands
to share their videos to

00:17:09.180 --> 00:17:11.510
the cloud up to YouTube,
they'll

00:17:11.510 --> 00:17:13.119
probably do it 100 times.

00:17:13.119 --> 00:17:15.950
So, I mean, the more that we can
get people sharing videos

00:17:15.950 --> 00:17:16.380
the better.

00:17:16.380 --> 00:17:18.530
And I think, like Jarek
mentioned and may talk on a

00:17:18.530 --> 00:17:21.000
little bit later, there's an
opportunity for us to monetize

00:17:21.000 --> 00:17:21.849
those views as well.

00:17:21.849 --> 00:17:24.109
So we're really excited
about it.

00:17:24.109 --> 00:17:25.599
Thanks for having us
out here today.

00:17:25.599 --> 00:17:27.369
I believe we're going to move
forward with a little bit of a

00:17:27.369 --> 00:17:30.880
demo of how this is going
to work in our game.

00:17:30.880 --> 00:17:32.130
Thank you.

00:17:37.740 --> 00:17:40.730
JAREK WILKIEWICZ: So Amir
has actually worked on

00:17:40.730 --> 00:17:44.280
implementing the video capture
in Dude Perfect and

00:17:44.280 --> 00:17:45.720
integrating with our
YouTube APIs.

00:17:45.720 --> 00:17:50.880
And he's a Unity guru, so I'm
going to hand it over to Amir

00:17:50.880 --> 00:17:52.130
and let you to drive this.

00:17:55.050 --> 00:17:58.170
AMIR EBRAHIMI: So on-device
capture is a hard problem

00:17:58.170 --> 00:18:02.060
because you have to read
back from the buffer.

00:18:02.060 --> 00:18:05.120
You have to encode
on the device.

00:18:05.120 --> 00:18:08.130
But we'll start first with how
it works for Dude Perfect.

00:18:08.130 --> 00:18:12.080
So do we want to demo first or--
yeah, let's go ahead and

00:18:12.080 --> 00:18:15.010
demo first and then
we'll go through.

00:18:15.010 --> 00:18:21.535
Coby's going to laugh because
I am no Dude Perfect expert.

00:18:27.714 --> 00:18:28.201
[VIDEO PLAYBACK]

00:18:28.201 --> 00:18:29.662
[MUSIC PLAYING]

00:18:29.662 --> 00:18:30.912
-Dude Perfect.

00:18:36.970 --> 00:18:38.380
AMIR EBRAHIMI: So I'm going to
do the hardest level, of

00:18:38.380 --> 00:18:40.260
course, Level One.

00:18:40.260 --> 00:18:49.730
[PLAYING VIDEO GAME]

00:18:49.730 --> 00:18:51.390
AMIR EBRAHIMI: I was hoping I
was going to get that on the

00:18:51.390 --> 00:18:53.078
first shot.

00:18:53.078 --> 00:18:54.328
All right.

00:19:00.890 --> 00:19:02.140
No pressure.

00:19:05.588 --> 00:19:06.556
Ahhhh, man.

00:19:06.556 --> 00:19:09.460
All right, OK, let's
do this again.

00:19:16.720 --> 00:19:17.970
And still no.

00:19:36.810 --> 00:19:40.850
I guess this is the better
of this or a

00:19:40.850 --> 00:19:42.100
blue screen of death.

00:19:45.605 --> 00:19:47.030
There we go.

00:19:47.030 --> 00:19:49.880
[APPLAUSE]

00:19:49.880 --> 00:19:50.360
[END VIDEO PLAYBACK]

00:19:50.360 --> 00:19:50.670
AMIR EBRAHIMI: All right.

00:19:50.670 --> 00:19:54.960
So Dude Perfect already had a
replay theater built into the

00:19:54.960 --> 00:19:57.400
game where you can play
back your replay.

00:19:57.400 --> 00:20:00.390
So we'll go ahead and do that
just to watch that awesome

00:20:00.390 --> 00:20:04.240
shot all over again.

00:20:04.240 --> 00:20:07.200
What we did at Luminary is we
added the YouTube support.

00:20:07.200 --> 00:20:10.980
So now I'm going to run YouTube,
and I'll explain why

00:20:10.980 --> 00:20:14.470
we did the first shot and then
why we're going back and doing

00:20:14.470 --> 00:20:15.410
this again.

00:20:15.410 --> 00:20:17.330
So what we're doing now is we're
actually encoding the

00:20:17.330 --> 00:20:19.930
video frames on the device.

00:20:19.930 --> 00:20:23.040
We're encoding this at
15 frames a second.

00:20:23.040 --> 00:20:26.400
And you'll notice there's
no audio, and there's

00:20:26.400 --> 00:20:29.630
a reason for that.

00:20:29.630 --> 00:20:32.120
The first pass that we actually
played back, we

00:20:32.120 --> 00:20:33.490
recorded all the audio.

00:20:33.490 --> 00:20:35.640
And this--

00:20:35.640 --> 00:20:39.110
audio is a problem, and you'll
hear it through the other

00:20:39.110 --> 00:20:42.020
implementations when it
comes to encoding.

00:20:42.020 --> 00:20:44.850
So we had to record the
whole buffer of audio.

00:20:44.850 --> 00:20:47.620
And what we do is, as we encode
the video frames, we're

00:20:47.620 --> 00:20:51.630
giving a time slice of the
audio as well to FFmpeg.

00:20:51.630 --> 00:20:56.810
Once this is all encoded,
we'll be able to upload

00:20:56.810 --> 00:20:57.860
directly to YouTube.

00:20:57.860 --> 00:21:05.748
[MUSIC PLAYING]

00:21:05.748 --> 00:21:07.720
AMIR EBRAHIMI: Yeah,
demo fail.

00:21:07.720 --> 00:21:10.670
Well so, this is OAuth.

00:21:10.670 --> 00:21:11.920
This is how--

00:21:14.960 --> 00:21:17.040
this is something that
I was using for

00:21:17.040 --> 00:21:18.650
debug purposes, but--

00:21:22.410 --> 00:21:23.770
of course.

00:21:23.770 --> 00:21:26.220
So what we have to do is--

00:21:26.220 --> 00:21:27.920
should we just show
the video instead?

00:21:27.920 --> 00:21:29.010
Yeah, I'll get back to that.

00:21:29.010 --> 00:21:35.540
So in order to upload to
YouTube, you have to have

00:21:35.540 --> 00:21:37.040
authentication, of course.

00:21:37.040 --> 00:21:39.890
You can't just upload to this
person's account without

00:21:39.890 --> 00:21:42.800
having authorization.

00:21:42.800 --> 00:21:45.790
So that was a makeshift OAuth
implementation just to hook

00:21:45.790 --> 00:21:46.670
those things up.

00:21:46.670 --> 00:21:49.530
Those things aren't as
interesting as the encoding,

00:21:49.530 --> 00:21:54.820
which is why that'll be replaced
with a standard UI

00:21:54.820 --> 00:21:57.850
that you see for most apps
for authorization.

00:21:57.850 --> 00:22:01.500
So let's go into how
all this works.

00:22:01.500 --> 00:22:05.360
So Dude Perfect is
a Unity game.

00:22:05.360 --> 00:22:09.120
It was written in JavaScript,
and in Unity, you can write

00:22:09.120 --> 00:22:14.310
any other JavaScript or C#
as managed languages.

00:22:14.310 --> 00:22:18.930
The video frames are sent off
to FFmpeg, and those are

00:22:18.930 --> 00:22:23.230
encoded into VPA, the video part
is, and the audio frames

00:22:23.230 --> 00:22:26.230
are encoded into Vorbis.

00:22:26.230 --> 00:22:30.890
With that, inside of a WebM
container, you've got video

00:22:30.890 --> 00:22:33.020
that you can send to YouTube.

00:22:33.020 --> 00:22:35.970
And it's readily available
on YouTube.

00:22:35.970 --> 00:22:38.195
There's not much processing
that has to happen.

00:22:42.080 --> 00:22:44.110
So looking at the code.

00:22:44.110 --> 00:22:46.740
So on the left, we've got the
JavaScript for the game.

00:22:46.740 --> 00:22:49.590
They already had the
VCR capability.

00:22:49.590 --> 00:22:52.920
And what we hooked in is, if you
look at the FFmpeg part,

00:22:52.920 --> 00:22:56.370
we record audio on the first
pass and then record video on

00:22:56.370 --> 00:22:58.210
the second pass.

00:22:58.210 --> 00:23:04.580
On the C# side, where we've
written a plug-in, we yield to

00:23:04.580 --> 00:23:08.640
the end of the frame so that we
can read back the buffer.

00:23:08.640 --> 00:23:10.220
We then encode that
video frame.

00:23:10.220 --> 00:23:14.110
And we're using a buffering
mechanism of rendering to one

00:23:14.110 --> 00:23:17.180
render target, reading back
from that rendering to the

00:23:17.180 --> 00:23:17.960
other target.

00:23:17.960 --> 00:23:22.870
And we saw an improvement of
roughly 340 milliseconds to 41

00:23:22.870 --> 00:23:25.800
milliseconds by doing that.

00:23:25.800 --> 00:23:28.790
The actual encoding takes
about 200 milliseconds.

00:23:28.790 --> 00:23:32.030
A 100 of that is for the video
encoding, and then a 100 of

00:23:32.030 --> 00:23:35.080
that is for flipping a buffer.

00:23:35.080 --> 00:23:38.570
So this is the interface for
the managed part of this.

00:23:38.570 --> 00:23:42.380
These are all native functions
that come from FFmpeg or that

00:23:42.380 --> 00:23:48.190
are written in a native DOL and
then import it into Unity.

00:23:48.190 --> 00:23:50.880
So if we look at the actual
C code, we're

00:23:50.880 --> 00:23:54.570
registering the codex.

00:23:54.570 --> 00:23:58.850
We have call backs set.

00:23:58.850 --> 00:24:02.680
FFmpeg can guess the formats for
the video and audio parts

00:24:02.680 --> 00:24:05.660
of that if you just
hand it a file.

00:24:05.660 --> 00:24:08.670
And then we initialize the
video and audio streams.

00:24:08.670 --> 00:24:13.510
So for the actual video
encoding, we just use

00:24:13.510 --> 00:24:14.320
glReadPixels.

00:24:14.320 --> 00:24:18.440
Unity has the ability to read
back a buffer, and you can get

00:24:18.440 --> 00:24:20.470
that pixel data in your
managed code.

00:24:20.470 --> 00:24:24.000
But since we're using it for
FFmpeg, there's a lot of

00:24:24.000 --> 00:24:27.360
marshaling that would go on with
copying buffers and it's

00:24:27.360 --> 00:24:28.600
just not per-formant enough.

00:24:28.600 --> 00:24:32.650
So instead, we read it at the
native level, and then we pass

00:24:32.650 --> 00:24:37.090
that on to the encoding
process.

00:24:37.090 --> 00:24:40.400
The picture comes from gl
flipped upside down, so you

00:24:40.400 --> 00:24:43.510
have to set the buffer for the
very end, set the pitch to

00:24:43.510 --> 00:24:47.580
negative, and then you can
flip it using SWS scale.

00:24:47.580 --> 00:24:52.450
Additionally, with SWS scale,
you get RGBA to YUV

00:24:52.450 --> 00:24:57.380
conversion, which you need
for VPA encoding.

00:24:57.380 --> 00:25:01.370
And one more point that's worth
saying is that near the

00:25:01.370 --> 00:25:05.410
bottom, there is a point where
we rescale the time frame and

00:25:05.410 --> 00:25:07.620
set a presentation time stamp.

00:25:07.620 --> 00:25:11.220
And it's important to know that
for the video encoding,

00:25:11.220 --> 00:25:14.630
the audio encoding, you have
two different time bases.

00:25:14.630 --> 00:25:18.030
One is 1 over your capture
frame rate, the audio is

00:25:18.030 --> 00:25:21.360
usually 1 over your sample
rate for your audio.

00:25:21.360 --> 00:25:25.950
And then you need to scale each
of your timestamps to

00:25:25.950 --> 00:25:30.190
match that time base.

00:25:30.190 --> 00:25:33.960
And if you end up doing this
yourself, it's important to

00:25:33.960 --> 00:25:36.150
know that the audio and the
video don't have to use the

00:25:36.150 --> 00:25:38.450
same time base.

00:25:38.450 --> 00:25:43.160
So for the audio side, we're
filling up a buffer.

00:25:43.160 --> 00:25:47.210
We encode that audio and then
set a presentation time stamp

00:25:47.210 --> 00:25:48.700
for that as well.

00:25:48.700 --> 00:25:52.620
And finally, the data we send to
YouTube, you can-- and this

00:25:52.620 --> 00:25:56.180
is important too, so that the
videos get discovered.

00:25:56.180 --> 00:26:00.530
You can set your URLs and you
can set tags for the videos

00:26:00.530 --> 00:26:03.680
you're uploading, so that when
people search for videos, your

00:26:03.680 --> 00:26:05.680
video will show up.

00:26:05.680 --> 00:26:07.180
And that's all just--

00:26:07.180 --> 00:26:10.140
if you've used YouTube's API,
you're probably already well

00:26:10.140 --> 00:26:11.390
aware of that.

00:26:14.890 --> 00:26:18.440
So this is an example
game play video.

00:26:18.440 --> 00:26:22.490
But I don't know if we're
just going to--

00:26:22.490 --> 00:26:23.360
OK.

00:26:23.360 --> 00:26:28.330
The videos for a shot like this,
this is roughly 350K.

00:26:28.330 --> 00:26:31.240
So it's a very quick upload once
you've already compressed

00:26:31.240 --> 00:26:32.490
the frames on it.

00:26:35.416 --> 00:26:39.710
And with that, I think we'll
hand it over to Danny.

00:26:42.370 --> 00:26:43.810
[APPLAUSE]

00:26:43.810 --> 00:26:45.250
DANNY HERMES: Where's
the clicker?

00:26:45.250 --> 00:26:48.130
[APPLAUSE]

00:26:48.130 --> 00:26:50.070
DANNY HERMES: Is there
no clicker?

00:26:50.070 --> 00:26:51.760
DANNY HERMES: All right.

00:26:51.760 --> 00:26:55.920
So I'm Danny Hermes, the other
Googler, along with Jarek.

00:26:55.920 --> 00:26:59.750
And we worked on an approach
that's almost the opposite

00:26:59.750 --> 00:27:00.980
extreme of this.

00:27:00.980 --> 00:27:03.640
They did everything on the
device, and we did as little

00:27:03.640 --> 00:27:05.520
on the device as we
possibly could.

00:27:05.520 --> 00:27:08.240
But we still, at the end of the
day, are uploading video

00:27:08.240 --> 00:27:09.080
to YouTube.

00:27:09.080 --> 00:27:12.530
So before I get into the details
of how we do it, I'm

00:27:12.530 --> 00:27:15.400
going to let Jarek demo it, and
hopefully, the demo gods

00:27:15.400 --> 00:27:18.590
smile on us a bit more than
they did on Amir.

00:27:18.590 --> 00:27:19.840
So let's see it.

00:27:42.630 --> 00:27:43.880
Do we see it again?

00:27:46.140 --> 00:27:46.900
There we go.

00:27:46.900 --> 00:27:47.320
Wonderful.

00:27:47.320 --> 00:27:51.700
So this game that you see
it's called Platformer.

00:27:51.700 --> 00:27:56.663
It's a long-running open-source
game originally

00:27:56.663 --> 00:28:02.790
for XNA Platformer on dotNet and
ported over to the PlayN

00:28:02.790 --> 00:28:04.740
framework by us, where
we added our

00:28:04.740 --> 00:28:06.510
hooks to make it run.

00:28:06.510 --> 00:28:10.990
It ran on Android already, but
to do the hooks that make it

00:28:10.990 --> 00:28:11.930
perform in the cloud.

00:28:11.930 --> 00:28:15.560
So Jarek just jumped up on a
platform and fell and died

00:28:15.560 --> 00:28:16.990
because he's terrible.

00:28:16.990 --> 00:28:19.110
But hopefully, at the
end of my talk, we

00:28:19.110 --> 00:28:21.580
can see that on YouTube.

00:28:21.580 --> 00:28:25.460
So before I get into the
details, I just want to

00:28:25.460 --> 00:28:26.430
provide an overview.

00:28:26.430 --> 00:28:28.270
So first, obviously, they
start off on an

00:28:28.270 --> 00:28:30.060
Android client right?

00:28:30.060 --> 00:28:32.640
And then from there,
they play the game.

00:28:32.640 --> 00:28:36.350
And the game data gets sent to
cloud storage somewhere.

00:28:36.350 --> 00:28:37.950
So we're already
off the client.

00:28:37.950 --> 00:28:40.040
They finished playing, and we're
already off the client.

00:28:40.040 --> 00:28:41.900
Like I said, the
other extreme.

00:28:41.900 --> 00:28:46.290
Then from there, once the data
gets to the cloud, it goes

00:28:46.290 --> 00:28:47.980
through a render step.

00:28:47.980 --> 00:28:50.760
And after it gets rendered,
the frames and sounds and

00:28:50.760 --> 00:28:53.460
other assets get stored locally
on the machine doing

00:28:53.460 --> 00:28:54.340
the rendering.

00:28:54.340 --> 00:28:58.250
From there, they get encoded
into the final video that

00:28:58.250 --> 00:28:59.680
needs to go to YouTube.

00:28:59.680 --> 00:29:03.080
And that final video gets stored
back in the cloud.

00:29:03.080 --> 00:29:06.640
And then, of course, after it
gets to the cloud, we upload

00:29:06.640 --> 00:29:10.130
it to YouTube and possibly even
YouTube 3D, if that's

00:29:10.130 --> 00:29:11.450
something that we want.

00:29:11.450 --> 00:29:15.210
This video you see on the client
there could allow 3D.

00:29:15.210 --> 00:29:17.680
Our proof of concept didn't
get that far.

00:29:17.680 --> 00:29:20.560
We were more concentrating on
all these other steps, getting

00:29:20.560 --> 00:29:23.860
into the cloud, doing the
rendering and coding rather

00:29:23.860 --> 00:29:24.980
than the game itself.

00:29:24.980 --> 00:29:30.320
So, what were our requirements
to actually make this work?

00:29:30.320 --> 00:29:32.900
First, we needed Linux machines
to do our rendering.

00:29:32.900 --> 00:29:36.210
We needed to be able to use
libraries like FFmpeg to

00:29:36.210 --> 00:29:40.630
actually then take the rendered
code-- or excuse me,

00:29:40.630 --> 00:29:43.130
the rendered frames and
sound assets and

00:29:43.130 --> 00:29:44.040
turn them into video.

00:29:44.040 --> 00:29:47.710
We needed to be able to run
arbitrary binaries, right?

00:29:47.710 --> 00:29:50.210
In addition, we needed this
cloud storage mechanism.

00:29:50.210 --> 00:29:53.180
We needed a place to put things
that we could go back

00:29:53.180 --> 00:29:56.190
and grab later, and then, of
course, use to upload to

00:29:56.190 --> 00:29:59.310
YouTube after we stored it.

00:29:59.310 --> 00:30:02.150
And another piece, the final
piece, probably the most

00:30:02.150 --> 00:30:04.080
important piece, was
a controller.

00:30:04.080 --> 00:30:06.230
We needed a controller that
had as many arms as it

00:30:06.230 --> 00:30:10.640
possibly could have to be making
sure everybody was in

00:30:10.640 --> 00:30:12.700
the right place at the right
time, that storage was

00:30:12.700 --> 00:30:15.070
behaving how it was supposed to,
and that storage and the

00:30:15.070 --> 00:30:17.520
renderer were talking to each
other and all these other

00:30:17.520 --> 00:30:19.000
parts of the process.

00:30:19.000 --> 00:30:22.180
And, of course, we needed this
to be the most reliable piece

00:30:22.180 --> 00:30:25.890
of the system because it's
controlling the system.

00:30:25.890 --> 00:30:28.200
And finally, this isn't
actually a component.

00:30:28.200 --> 00:30:29.170
It's a feature.

00:30:29.170 --> 00:30:31.580
We needed all of these
components to be decoupled.

00:30:31.580 --> 00:30:34.160
Because if one went down and the
others didn't, we wanted

00:30:34.160 --> 00:30:36.540
the experience not to be
completely broken.

00:30:36.540 --> 00:30:38.760
And we were able to
accomplish this.

00:30:38.760 --> 00:30:42.420
So the first thing that we
satisfied was the controller.

00:30:42.420 --> 00:30:45.660
For the controller, we used
Google App Engine, obviously

00:30:45.660 --> 00:30:46.640
eating our own dog food.

00:30:46.640 --> 00:30:51.300
But it's a great use for this
because we were able to set up

00:30:51.300 --> 00:30:52.670
URL listeners.

00:30:52.670 --> 00:30:55.240
So when the client wanted to
do something or when the

00:30:55.240 --> 00:30:57.900
renderer wanted to do something,
it was able to make

00:30:57.900 --> 00:31:00.530
a post to the controller
and say, hey, I'm done.

00:31:00.530 --> 00:31:03.110
Or hey, I just started, or
do things like this.

00:31:03.110 --> 00:31:06.900
In addition, Google App Engine
has a great uptime SLA.

00:31:06.900 --> 00:31:09.430
So we didn't have to worry about
things like setting up

00:31:09.430 --> 00:31:11.970
an Apache config on some machine
and worrying if that

00:31:11.970 --> 00:31:13.980
machine would go down
or change addresses

00:31:13.980 --> 00:31:15.100
or things like this.

00:31:15.100 --> 00:31:17.720
We just pressed play,
and it worked.

00:31:17.720 --> 00:31:20.520
Another feature that we use with
App Engine that was huge

00:31:20.520 --> 00:31:22.230
for us was task queues.

00:31:22.230 --> 00:31:24.370
You can imagine as users--

00:31:24.370 --> 00:31:26.940
more and more users have
finished playing the game, and

00:31:26.940 --> 00:31:30.130
they're ready to have their game
play uploaded to YouTube.

00:31:30.130 --> 00:31:31.820
It needs to go into some
sort of queue.

00:31:31.820 --> 00:31:35.410
So we were able to use pull task
queues with Google App

00:31:35.410 --> 00:31:38.430
Engine to serve for
this function.

00:31:38.430 --> 00:31:42.350
And finally, the ability to
actually send requests with

00:31:42.350 --> 00:31:45.730
Linux machines, send data to
them and receive data from

00:31:45.730 --> 00:31:49.970
them, was a very big, important
part of App Engine.

00:31:49.970 --> 00:31:52.680
And then, of course, a nice
to have, maybe have the

00:31:52.680 --> 00:31:54.960
controller send messages
back to the client.

00:31:54.960 --> 00:31:59.300
So we use cloud-to-device
messaging within App Engine to

00:31:59.300 --> 00:32:02.240
send messages to Android
to say hey, your

00:32:02.240 --> 00:32:04.020
video finished uploading.

00:32:04.020 --> 00:32:06.920
So the next piece, for cloud
storage, we used

00:32:06.920 --> 00:32:09.750
Google cloud storage.

00:32:09.750 --> 00:32:14.330
Since we used App Engine as our
controller, it was great

00:32:14.330 --> 00:32:17.920
to have cloud storage because
through various libraries and

00:32:17.920 --> 00:32:21.360
features, there's a file
system-like integration with

00:32:21.360 --> 00:32:21.920
App Engine.

00:32:21.920 --> 00:32:24.980
I'm not going to get into that
today, but we could treat the

00:32:24.980 --> 00:32:28.210
cloud files as if they
were local files.

00:32:28.210 --> 00:32:31.170
In addition, for our Linux
machines that were doing the

00:32:31.170 --> 00:32:34.930
rendering, there was a command
line tool called GSUtil that

00:32:34.930 --> 00:32:39.450
we could use to again pretend
like our cloud file system can

00:32:39.450 --> 00:32:41.140
talk to the local file
system as if

00:32:41.140 --> 00:32:42.310
they're in the same place.

00:32:42.310 --> 00:32:46.110
So, for example, to copy our
video, our WebM video that

00:32:46.110 --> 00:32:48.810
we've rendered and encoded, it
was as simple as calling

00:32:48.810 --> 00:32:53.190
GSUtil CP using this library and
copying the local file--

00:32:53.190 --> 00:32:55.020
videofile.webm--

00:32:55.020 --> 00:32:59.590
up to this bucket GS://videos,
which represents a

00:32:59.590 --> 00:33:01.740
bucket in the cloud.

00:33:01.740 --> 00:33:04.960
And a bonus, after we started
working on this project,

00:33:04.960 --> 00:33:08.070
another great piece of
decoupling, there are post

00:33:08.070 --> 00:33:09.860
upload hooks in cloud storage.

00:33:09.860 --> 00:33:12.070
And this is something that's
recently been announced.

00:33:12.070 --> 00:33:15.000
And so rather than having to
have the renderer, or the

00:33:15.000 --> 00:33:18.950
client, or some other piece tell
the controller, hey, some

00:33:18.950 --> 00:33:23.020
upload is finished, we can just
set a hook on the actual

00:33:23.020 --> 00:33:26.180
storage bucket, and that hook
can then send a message off to

00:33:26.180 --> 00:33:26.870
the controller.

00:33:26.870 --> 00:33:28.960
So this component is really
self-contained.

00:33:28.960 --> 00:33:31.170
It's really, really
phenomenal.

00:33:31.170 --> 00:33:37.040
And finally, again, another
super important part but maybe

00:33:37.040 --> 00:33:39.900
not quite as specific was
our renderer machine.

00:33:39.900 --> 00:33:43.790
So this was just a number of
Linux machines, like I said,

00:33:43.790 --> 00:33:45.210
that we can run native
code on.

00:33:45.210 --> 00:33:47.890
We could run our game rendering
binaries, and we

00:33:47.890 --> 00:33:51.390
could run FFmpeg after the
fact to do other things.

00:33:51.390 --> 00:33:53.730
And, of course, we needed
scalable resources.

00:33:53.730 --> 00:33:56.350
So we needed to be able to have
more of these machines as

00:33:56.350 --> 00:33:58.010
we got more users.

00:33:58.010 --> 00:34:01.770
And of course, finally we needed
to upload the video to

00:34:01.770 --> 00:34:05.010
cloud storage after we were done
rendering and encoding.

00:34:05.010 --> 00:34:07.830
So how do we tie all these
pieces together?

00:34:07.830 --> 00:34:09.080
I went through the
requirements.

00:34:09.080 --> 00:34:10.920
I said how we satisfied them.

00:34:10.920 --> 00:34:11.679
Now what?

00:34:11.679 --> 00:34:16.505
So I mentioned we used PlayN,
the Platformer game, and added

00:34:16.505 --> 00:34:17.370
in our own hooks.

00:34:17.370 --> 00:34:18.810
So here are some of
our own hooks.

00:34:18.810 --> 00:34:22.659
We added a class, a Java class,
called ReplayStore.

00:34:22.659 --> 00:34:25.540
And this, among other things,
had an increment frame

00:34:25.540 --> 00:34:28.070
function, which knew if
it was actually doing

00:34:28.070 --> 00:34:29.620
the replay or live.

00:34:29.620 --> 00:34:32.120
And if it was not doing the
replay, it would capture the

00:34:32.120 --> 00:34:35.139
frame and set it to a place
where it would store it.

00:34:35.139 --> 00:34:36.370
It is a ReplayStore.

00:34:36.370 --> 00:34:38.760
It is what it says
it is, right?

00:34:38.760 --> 00:34:42.690
And then using that hook in the
actual update function for

00:34:42.690 --> 00:34:45.800
the game that's painting each
new frame as it comes, if we

00:34:45.800 --> 00:34:49.179
knew that we were replaying,
if we have this local

00:34:49.179 --> 00:34:50.610
replaystore object--

00:34:50.610 --> 00:34:53.050
replaystore with a
lower case r--

00:34:53.050 --> 00:34:57.010
if that was replaying, rather
than taking user input, we

00:34:57.010 --> 00:34:59.970
would take the input directly
from the store and substitute

00:34:59.970 --> 00:35:01.230
it for the user input.

00:35:01.230 --> 00:35:02.730
And this is how our
renderer worked.

00:35:02.730 --> 00:35:04.010
And, of course, we
would repaint the

00:35:04.010 --> 00:35:06.320
frame and capture it.

00:35:06.320 --> 00:35:09.020
So how did the rendering work?

00:35:09.020 --> 00:35:12.010
We're capturing these frames and
simulating the user with

00:35:12.010 --> 00:35:12.770
the ReplayStore.

00:35:12.770 --> 00:35:14.080
So then what?

00:35:14.080 --> 00:35:21.200
So the available machines of
our army of Linux machines

00:35:21.200 --> 00:35:23.840
were able to pull for new jobs
from the controller.

00:35:23.840 --> 00:35:25.220
I mentioned this task queue.

00:35:25.220 --> 00:35:27.190
They just say, hey, task queue,
do you have anything

00:35:27.190 --> 00:35:28.110
for me to do?

00:35:28.110 --> 00:35:30.610
And if it did, then they
would start rendering.

00:35:30.610 --> 00:35:33.350
They retrieved the game play
data, not from the controller,

00:35:33.350 --> 00:35:35.230
but from the decoupled
component,

00:35:35.230 --> 00:35:36.400
Google Cloud Storage.

00:35:36.400 --> 00:35:39.080
And again, we were able to use
this awesome command line tool

00:35:39.080 --> 00:35:42.830
GSUtil to just copy it from
the cloud bucket,

00:35:42.830 --> 00:35:46.990
gameplay_data.jason, to
the current directory.

00:35:46.990 --> 00:35:48.090
It's really that simple.

00:35:48.090 --> 00:35:51.500
Just pretend like they're
on the same file system.

00:35:51.500 --> 00:35:55.160
From there, we used our binary
to replay and capture each

00:35:55.160 --> 00:35:58.640
individual frame that gets
painted as just a

00:35:58.640 --> 00:36:00.570
single image file.

00:36:00.570 --> 00:36:04.430
From there, to do the encode
step on the rendered data, we

00:36:04.430 --> 00:36:07.280
stitched the frames together
with FFmpeg.

00:36:07.280 --> 00:36:10.960
We also know the frame
that each individual

00:36:10.960 --> 00:36:12.250
sound was played on.

00:36:12.250 --> 00:36:15.410
So using SoX, or Sound eXchange,
another open source

00:36:15.410 --> 00:36:18.270
tool, we were able to add
padding to the front of each

00:36:18.270 --> 00:36:22.000
of the sound assets and then
squish them together to have

00:36:22.000 --> 00:36:25.730
the rendered sound
file at the end.

00:36:25.730 --> 00:36:28.720
And then finally, we put the
video and audio pieces

00:36:28.720 --> 00:36:33.190
together, and we upload that
encoded video to YouTube,

00:36:33.190 --> 00:36:36.820
first by uploading to cloud
storage and then from there

00:36:36.820 --> 00:36:39.820
uploading to YouTube with
the controller.

00:36:39.820 --> 00:36:40.470
OK.

00:36:40.470 --> 00:36:43.820
So I'm pretty sure the video
is done uploading.

00:36:43.820 --> 00:36:46.960
But before we get to that,
I want to talk about some

00:36:46.960 --> 00:36:48.450
challenges we ran into.

00:36:48.450 --> 00:36:51.570
And there were many, but
there were a few that

00:36:51.570 --> 00:36:52.600
were mentioned earlier.

00:36:52.600 --> 00:36:55.540
Amir also mentioned
this with sound.

00:36:55.540 --> 00:36:57.040
So first, a challenging

00:36:57.040 --> 00:37:00.040
implementation is UX intrusion.

00:37:00.040 --> 00:37:03.850
For native games on an Android
client, you don't have to

00:37:03.850 --> 00:37:05.800
worry about an internet
connection most the time.

00:37:05.800 --> 00:37:08.370
And they're really fast, and
they're really great to use.

00:37:08.370 --> 00:37:11.440
But if then you need to add the
part where you send it off

00:37:11.440 --> 00:37:13.910
to the cloud, you don't want
to intrude and make this

00:37:13.910 --> 00:37:16.900
experience be completely
dissonant and just kind of

00:37:16.900 --> 00:37:20.840
terrible overall when you add
the video upload part.

00:37:20.840 --> 00:37:23.900
Another issue, which was
actually an implementation

00:37:23.900 --> 00:37:26.616
issue rather than a design
issue, was the inconsistent

00:37:26.616 --> 00:37:30.170
state from what the users saw
and then from what we were

00:37:30.170 --> 00:37:32.010
able to render.

00:37:32.010 --> 00:37:33.250
There are various issues.

00:37:33.250 --> 00:37:36.810
One, you have some sort of
concept of frame rate, but

00:37:36.810 --> 00:37:39.400
each individual frame
isn't really--

00:37:39.400 --> 00:37:42.270
whatever 60 frames per second
or whatever 30 frames per

00:37:42.270 --> 00:37:45.410
second comes out to, you know,
17 or 34 milliseconds or all

00:37:45.410 --> 00:37:46.480
these numbers, right?

00:37:46.480 --> 00:37:47.680
They actually vary slightly.

00:37:47.680 --> 00:37:51.710
And so as you go, you can
actually have things that can

00:37:51.710 --> 00:37:53.490
end up being a little
bit out of sync.

00:37:53.490 --> 00:37:55.670
But maybe if the game plays long
enough, there can be so

00:37:55.670 --> 00:37:58.530
much out of sync that when you
jump on the bad guy to die,

00:37:58.530 --> 00:38:00.700
he's no longer there, and
you don't die, right?

00:38:00.700 --> 00:38:03.050
So these are some issues that
we're still working out and we

00:38:03.050 --> 00:38:05.330
very much acknowledge.

00:38:05.330 --> 00:38:08.390
And like I said,
sound is hard.

00:38:08.390 --> 00:38:11.170
Just to give a little bit of an
example, all of our sound

00:38:11.170 --> 00:38:17.490
assets are sampled at 44.1
kilohertz, 44,100 Hertz.

00:38:17.490 --> 00:38:21.570
So when we were stitching with
FFmpeg, we actually had to

00:38:21.570 --> 00:38:23.080
feed it a frame length.

00:38:23.080 --> 00:38:26.160
And we fed it 17 milliseconds,
which comes out to about 60

00:38:26.160 --> 00:38:27.370
frames per second.

00:38:27.370 --> 00:38:32.680
And so 17 doesn't evenly
divide 44,100.

00:38:32.680 --> 00:38:33.950
What does that mean?

00:38:33.950 --> 00:38:37.340
So you have 44,100 samples.

00:38:37.340 --> 00:38:40.180
And if you cut off some fraction
every time you need

00:38:40.180 --> 00:38:43.200
to add a padding based on the
number of frames, then you're

00:38:43.200 --> 00:38:45.450
actually losing fractional
samples for each

00:38:45.450 --> 00:38:46.820
sound asset you pad.

00:38:46.820 --> 00:38:49.920
So you actually have another
piece of inconsistent state,

00:38:49.920 --> 00:38:51.860
and that's in the sound.

00:38:51.860 --> 00:38:57.010
Maybe you jump, and then like
100 milliseconds, but long

00:38:57.010 --> 00:38:59.220
enough for the human ear to
detect, you hear the guy

00:38:59.220 --> 00:39:02.540
actually going uuuhhh to
jump, things like that.

00:39:02.540 --> 00:39:04.160
And then finally, this
is something

00:39:04.160 --> 00:39:06.090
which is easy to overcome.

00:39:06.090 --> 00:39:10.610
This was specific to PlayN and
the platforms we were using.

00:39:10.610 --> 00:39:13.310
But we're hoping to open
source this and let the

00:39:13.310 --> 00:39:16.360
community let these problems
work themselves out.

00:39:16.360 --> 00:39:21.070
So Jarek, Did the demo
gods smile on us?

00:39:21.070 --> 00:39:22.320
JAREK WILKIEWICZ: Let's check.

00:39:27.190 --> 00:39:27.990
DANNY HERMES: Jarek's--

00:39:27.990 --> 00:39:28.745
OK.

00:39:28.745 --> 00:39:41.870
[GAME PLAYBACK]

00:39:41.870 --> 00:39:43.120
JAREK WILKIEWICZ: There we go.

00:39:51.060 --> 00:39:51.430
DANNY HERMES: There you go.

00:39:51.430 --> 00:39:53.880
And he's terrible.

00:39:53.880 --> 00:39:54.240
[END GAME PLAYBACK]

00:39:54.240 --> 00:39:56.836
DANNY HERMES: All right, with
that, I'll give the floor back

00:39:56.836 --> 00:39:59.490
to Jarek for a short bit
so he can introduce--

00:39:59.490 --> 00:39:59.760
JAREK WILKIEWICZ: All right.

00:39:59.760 --> 00:40:01.740
Thanks Dan.

00:40:01.740 --> 00:40:02.030
[APPLAUSE]

00:40:02.030 --> 00:40:03.280
JAREK WILKIEWICZ: I do
want my pointer back.

00:40:05.820 --> 00:40:08.030
Nice try, man.

00:40:08.030 --> 00:40:12.060
All right, so we talked about
the local approach and then

00:40:12.060 --> 00:40:13.110
the cloud-based approach.

00:40:13.110 --> 00:40:16.200
So now, let's talk about
something that is a little bit

00:40:16.200 --> 00:40:16.610
in the middle.

00:40:16.610 --> 00:40:19.185
But first I'd like to introduce
Wayne Karo from Free

00:40:19.185 --> 00:40:20.420
Range Games.

00:40:20.420 --> 00:40:22.840
They make wonderful mobile
games, and he will tell you

00:40:22.840 --> 00:40:25.010
more about Free Range and
play some games as well.

00:40:25.010 --> 00:40:28.800
WAYNE KARO: All right,
thank you very much.

00:40:28.800 --> 00:40:33.250
OK I'd like to just start off
by doing what I do best, or

00:40:33.250 --> 00:40:34.100
actually not really.

00:40:34.100 --> 00:40:37.390
I'm probably one of the
worst gamers, but I do

00:40:37.390 --> 00:40:38.640
like playing our games.

00:40:58.090 --> 00:41:01.130
I'll explain a little bit more
about this later, but this is

00:41:01.130 --> 00:41:07.640
the first mobile game that
our studio developed.

00:41:07.640 --> 00:41:09.390
We've had a lot of console
experience.

00:41:12.380 --> 00:41:14.400
That's great.

00:41:14.400 --> 00:41:15.830
And this is a snowboarding
game.

00:41:15.830 --> 00:41:19.760
And the object is to get as many
points as possible in a

00:41:19.760 --> 00:41:21.170
limited amount of time.

00:41:21.170 --> 00:41:22.776
You get points by--

00:41:22.776 --> 00:41:24.680
[GAME PLAYBACK]

00:41:24.680 --> 00:41:26.010
WAYNE KARO: --doing tricks.

00:41:26.010 --> 00:41:28.855
And you can get more points
by going off the jumps.

00:41:33.160 --> 00:41:35.900
I'm just going to go off this
one jump here and then get on

00:41:35.900 --> 00:41:38.186
with the rest of our
presentation.

00:41:48.720 --> 00:41:49.220
[END GAME PLAYBACK]

00:41:49.220 --> 00:41:51.010
WAYNE KARO: OK, so that
was just a little

00:41:51.010 --> 00:41:52.260
taste of the game.

00:42:05.960 --> 00:42:07.820
I'm Wayne Karo, the director
of products

00:42:07.820 --> 00:42:09.540
at Free Range games.

00:42:09.540 --> 00:42:12.850
Our core team has been together
for well over a

00:42:12.850 --> 00:42:18.230
decade, previously working at
Activision where we worked on

00:42:18.230 --> 00:42:21.870
a lot of AAA console titles.

00:42:21.870 --> 00:42:25.940
And a lot of our DNA is in
the skateboarding genre.

00:42:25.940 --> 00:42:29.480
We worked on Tony Hawk.

00:42:29.480 --> 00:42:33.230
And since 2009, we started our
own studio, Free Range Games,

00:42:33.230 --> 00:42:37.790
where we're developing both
mobile and web games, trying

00:42:37.790 --> 00:42:42.900
to bring that same console
quality to the mobile device.

00:42:42.900 --> 00:42:44.820
And we're doing all of
the development with

00:42:44.820 --> 00:42:47.330
the Unity 3D Engine.

00:42:47.330 --> 00:42:50.900
Because of that, it precluded
the solution that Danny was

00:42:50.900 --> 00:42:52.920
talking about.

00:42:52.920 --> 00:42:55.740
And then one of the big concerns
that we had was we

00:42:55.740 --> 00:42:59.310
were really pushing the mobile
devices to the edge of their

00:42:59.310 --> 00:43:01.770
performance with the
snowboarding game with some of

00:43:01.770 --> 00:43:05.050
the features that we were
trying to implement.

00:43:05.050 --> 00:43:10.565
So we really needed a solution
that would accommodate what we

00:43:10.565 --> 00:43:12.610
were trying to do.

00:43:12.610 --> 00:43:15.200
Now, before I get into that
though, I'd just like to give

00:43:15.200 --> 00:43:17.600
you a flavor of some of the
other games we're working on

00:43:17.600 --> 00:43:20.610
because we have many things
in the pipeline.

00:43:20.610 --> 00:43:23.330
One of the browser games that
we've just launched in open

00:43:23.330 --> 00:43:26.890
beta up on Kongregate is
FreeFall Tournament.

00:43:26.890 --> 00:43:30.580
This game is a space
marine shooter.

00:43:30.580 --> 00:43:33.680
It's pretty exciting,
very intense.

00:43:33.680 --> 00:43:35.650
And it quickly--

00:43:35.650 --> 00:43:39.830
despite all of the early bugs
that you would see in a beta

00:43:39.830 --> 00:43:43.960
build, it quickly rose to the
number one multiplayer game

00:43:43.960 --> 00:43:46.140
spot there on Kongregate.

00:43:46.140 --> 00:43:48.560
I really would appreciate any
feedback that you have.

00:43:48.560 --> 00:43:50.780
So if you play the game, please
leave a comment in the

00:43:50.780 --> 00:43:52.180
forums or something.

00:43:52.180 --> 00:43:53.660
And I'm the guy that's
personally

00:43:53.660 --> 00:43:54.910
responding to everybody.

00:43:57.280 --> 00:43:59.930
And we're making mobile
games as well.

00:43:59.930 --> 00:44:04.880
FreeFall Horizon is nothing
like FreeFall Tournament

00:44:04.880 --> 00:44:07.850
except we're leveraging some
of the same art style and

00:44:07.850 --> 00:44:11.750
trying to extend the brand
experience around this

00:44:11.750 --> 00:44:13.900
FreeFall universe.

00:44:13.900 --> 00:44:18.710
FreeFall Horizon is a very
familiar space theme game.

00:44:18.710 --> 00:44:22.660
I think that if you are a fan
of quite a few of the movies

00:44:22.660 --> 00:44:27.030
in the past, you'll recognize
some of the thematic elements.

00:44:27.030 --> 00:44:30.410
This is an endless run game
where you go in and blow up a

00:44:30.410 --> 00:44:34.030
reactor, and you're trying
to escape the shock wave.

00:44:34.030 --> 00:44:36.690
And there's some interesting
mechanics where you're tilting

00:44:36.690 --> 00:44:40.790
the device as well as missiles
and explosions.

00:44:40.790 --> 00:44:45.570
And we hope to be launching
this quite soon.

00:44:45.570 --> 00:44:47.890
And then of course, SummitX
Snowboarding, the very first

00:44:47.890 --> 00:44:52.160
game that we developed.

00:44:52.160 --> 00:44:54.510
What we're trying to do here is
leverage our experience in

00:44:54.510 --> 00:45:00.440
the extreme sports video games
and create the most majestic

00:45:00.440 --> 00:45:04.310
3D terrain possible as well very
realistic physics for the

00:45:04.310 --> 00:45:10.100
character and just see what
a mobile device could do.

00:45:10.100 --> 00:45:12.460
And then when we did something
that no other snowboarding

00:45:12.460 --> 00:45:15.620
game has tried to do as
well is to have--

00:45:15.620 --> 00:45:17.340
basically open up the mountain,
so you could have

00:45:17.340 --> 00:45:20.480
lots of different paths
that you can take.

00:45:20.480 --> 00:45:22.750
You can't completely carve
the entire mountain.

00:45:22.750 --> 00:45:28.020
But as far as the game goes,
it does feel like that.

00:45:28.020 --> 00:45:31.650
We were very fortunate that a
publisher out of Korea had

00:45:31.650 --> 00:45:36.270
come to us, picked
this up, and they

00:45:36.270 --> 00:45:38.970
launched it December 15.

00:45:38.970 --> 00:45:44.460
And the game was featured by
Google when it was on the

00:45:44.460 --> 00:45:47.960
Android market and very
prominently so.

00:45:47.960 --> 00:45:52.810
So we owe a lot of thanks and
gratitude to Google for that.

00:45:52.810 --> 00:45:54.930
And today, the game
has nearly a

00:45:54.930 --> 00:45:58.020
million and a half downloads.

00:45:58.020 --> 00:46:01.870
And so based off of that little
bit of success, we were

00:46:01.870 --> 00:46:06.140
trying to think, how can we
leverage it and do something

00:46:06.140 --> 00:46:08.160
that would be really cool
that our players

00:46:08.160 --> 00:46:09.530
would be excited about?

00:46:09.530 --> 00:46:12.725
So we started internally talking
about getting the game

00:46:12.725 --> 00:46:15.110
play videos up onto YouTube.

00:46:15.110 --> 00:46:18.420
And it just so happened the
timing was excellent.

00:46:18.420 --> 00:46:23.570
And I was introduced to Kenji
and Jarek to kind of see if we

00:46:23.570 --> 00:46:26.320
could do this for our
type of game.

00:46:26.320 --> 00:46:28.720
We thought that the video would
be really great because

00:46:28.720 --> 00:46:30.160
you'd be able to share
your awesome

00:46:30.160 --> 00:46:31.940
moments with your friends.

00:46:31.940 --> 00:46:34.740
And then a lot of our players
that are really into the game

00:46:34.740 --> 00:46:36.070
are competitive.

00:46:36.070 --> 00:46:39.750
And they want to see
not only how--

00:46:39.750 --> 00:46:42.960
they not only want to show off
how well they're doing, but

00:46:42.960 --> 00:46:45.320
they want to see how the other
guy has done and get some

00:46:45.320 --> 00:46:48.040
clues on how to get higher
scores from another guy's

00:46:48.040 --> 00:46:50.520
performance.

00:46:50.520 --> 00:46:54.190
And then from the business side,
we're always concerned

00:46:54.190 --> 00:46:55.150
about discovery--

00:46:55.150 --> 00:46:56.910
getting your game--

00:46:56.910 --> 00:46:59.170
1 in 10,000 a year--

00:46:59.170 --> 00:47:02.610
noticed today is a
big challenge.

00:47:02.610 --> 00:47:06.490
So if we can leverage YouTube
as a viral channel, maybe we

00:47:06.490 --> 00:47:11.240
can get a leg up in having
our games noticed.

00:47:11.240 --> 00:47:15.090
And then, like has been
mentioned also, monetization.

00:47:15.090 --> 00:47:20.160
We are hoping to launch all
free-to-play games going

00:47:20.160 --> 00:47:21.210
forward into the future.

00:47:21.210 --> 00:47:24.420
And we want to have some way to
ensure that we can continue

00:47:24.420 --> 00:47:28.790
maintaining the game and are
looking to a little bit of ad

00:47:28.790 --> 00:47:30.040
support for that.

00:47:32.680 --> 00:47:37.880
Although we've made games for
well over a decade, we've only

00:47:37.880 --> 00:47:41.450
been making mobile games
for under a year.

00:47:41.450 --> 00:47:43.290
And here's a few of the
things that we've

00:47:43.290 --> 00:47:44.790
learned in that time.

00:47:44.790 --> 00:47:50.320
That performance on the mobile
device is really critical if

00:47:50.320 --> 00:47:54.620
you're trying to do a game that
has these high-quality 3D

00:47:54.620 --> 00:47:56.420
graphics like ours.

00:47:56.420 --> 00:47:59.590
Selective use of shaders and
transparencies is something

00:47:59.590 --> 00:48:02.600
you should be well aware of.

00:48:02.600 --> 00:48:05.840
And then bundling assets so on
lower-end devices you don't

00:48:05.840 --> 00:48:12.290
put too high a resolution art
on to those devices to get a

00:48:12.290 --> 00:48:13.480
performance hit.

00:48:13.480 --> 00:48:15.420
And then if you try to do
anything new and innovative

00:48:15.420 --> 00:48:18.590
that requires background
processing, like getting the

00:48:18.590 --> 00:48:23.000
game play up on YouTube, you
have to be mindful of the rest

00:48:23.000 --> 00:48:24.530
of the game design.

00:48:24.530 --> 00:48:29.400
Because we're doing all of the
design on desktops but the

00:48:29.400 --> 00:48:31.750
game runs on a mobile device,
we just found that the best

00:48:31.750 --> 00:48:35.010
way that we can ensure that
we're having acceptable

00:48:35.010 --> 00:48:39.110
performance for the player is
just to continuously build and

00:48:39.110 --> 00:48:42.940
then test, build and
test on the device.

00:48:42.940 --> 00:48:46.570
And then the mobile system,
it's not like designing a

00:48:46.570 --> 00:48:47.200
console game.

00:48:47.200 --> 00:48:49.320
There's so many different
devices out there.

00:48:49.320 --> 00:48:53.240
We really had to work pretty
hard to build a flexible UI

00:48:53.240 --> 00:48:56.560
system into Unity so that we
could handle all the different

00:48:56.560 --> 00:49:00.770
screen dimensions for this
heterogeneous device mix.

00:49:00.770 --> 00:49:03.290
But the thing, above all, that
I'm really excited about in

00:49:03.290 --> 00:49:09.470
this space is that hardware is
continuing to advance very,

00:49:09.470 --> 00:49:13.300
very rapidly, opening new
possibilities for innovation,

00:49:13.300 --> 00:49:15.280
such as what we've
done today--

00:49:15.280 --> 00:49:17.750
getting the game play
up on YouTube.

00:49:17.750 --> 00:49:21.690
And as a business strategy,
we're trying to leverage these

00:49:21.690 --> 00:49:26.530
technological advances so that
people can find our games, get

00:49:26.530 --> 00:49:31.080
excited about them, because
they're going to be giving new

00:49:31.080 --> 00:49:37.930
play styles and other new
experiences to the consumer.

00:49:37.930 --> 00:49:41.800
All right, and I'll return
it to Jarek, thank you.

00:49:41.800 --> 00:49:43.780
JAREK WILKIEWICZ: Now, I would
like to introduce Jens--

00:49:43.780 --> 00:49:46.500
[APPLAUSE]

00:49:46.500 --> 00:49:49.670
JAREK WILKIEWICZ: --Owen from
SeeMeGaming to talk about

00:49:49.670 --> 00:49:52.830
their cloud-based rendering
solution.

00:49:52.830 --> 00:49:55.750
JENS OWEN: Thank you, Jarek.

00:49:55.750 --> 00:49:58.320
So we're 3D driver guys, and we
come at this from a little

00:49:58.320 --> 00:50:01.190
bit different perspective.

00:50:01.190 --> 00:50:02.370
We've done high-end

00:50:02.370 --> 00:50:04.790
workstation tuning for drivers--

00:50:04.790 --> 00:50:06.210
3D drivers--

00:50:06.210 --> 00:50:09.330
low cost laptops, desktops,
and we've gone into the

00:50:09.330 --> 00:50:11.630
low-power phones and
tablets space.

00:50:11.630 --> 00:50:15.250
And we've applied this to our
SeeMeGaming technology to take

00:50:15.250 --> 00:50:17.650
a different approach to
game play capture.

00:50:17.650 --> 00:50:22.360
What we do is we intercept the
3D command stream before it

00:50:22.360 --> 00:50:26.230
gets sent down to the
graphics subsystem.

00:50:26.230 --> 00:50:28.940
The advantage of taking this
approach, you don't need a

00:50:28.940 --> 00:50:32.380
replay capability in your game,
and it's much faster

00:50:32.380 --> 00:50:34.000
than waiting until it's rendered
and reading back

00:50:34.000 --> 00:50:36.010
those pixels.

00:50:36.010 --> 00:50:40.710
The other benefit to SeeMeGAMING
is we've added an

00:50:40.710 --> 00:50:44.270
in-game integration for sharing
with YouTube and your

00:50:44.270 --> 00:50:45.770
other social networks.

00:50:45.770 --> 00:50:48.800
So the dialogue you see here,
this screen, is something that

00:50:48.800 --> 00:50:49.920
you can integrate
in your game.

00:50:49.920 --> 00:50:52.120
It's under your game's
control.

00:50:52.120 --> 00:50:53.920
And finally, as Jarek mentioned,
we're a hybrid

00:50:53.920 --> 00:50:57.920
approach, so we can offload the
video conversion to the

00:50:57.920 --> 00:51:03.070
cloud, which saves time and
battery on your device.

00:51:03.070 --> 00:51:06.660
So in the demo that you saw
Wayne run earlier, we are

00:51:06.660 --> 00:51:09.900
actually capturing the entire
run, the entire level.

00:51:09.900 --> 00:51:15.720
And Amir instrumented that game
so that it would mark the

00:51:15.720 --> 00:51:18.980
best jump and capture
the previous 10

00:51:18.980 --> 00:51:21.110
seconds of that jump.

00:51:21.110 --> 00:51:25.090
At the end of that run, we were
sharing and basically

00:51:25.090 --> 00:51:26.560
popping up that dialogue.

00:51:26.560 --> 00:51:29.790
You didn't see it after
Wayne's run there.

00:51:29.790 --> 00:51:35.090
We worked with Unity and Amir
from Luminary Productions to

00:51:35.090 --> 00:51:38.010
enable the capture of that
command stream as it's emitted

00:51:38.010 --> 00:51:40.280
from the Unity engine.

00:51:40.280 --> 00:51:44.750
And then finally, after all of
this is done and captured in

00:51:44.750 --> 00:51:47.400
the 3D command stream again,
we're uploading that command

00:51:47.400 --> 00:51:49.680
stream up into the cloud.

00:51:49.680 --> 00:51:53.250
It's being converted there to
video, and that saves time and

00:51:53.250 --> 00:51:54.500
battery on the device.

00:51:57.270 --> 00:51:59.680
Amir provided us with these
code samples here.

00:51:59.680 --> 00:52:03.980
On your left, you see that with
a simple inclusion of a

00:52:03.980 --> 00:52:07.650
header file, we're able to
redirect that command stream

00:52:07.650 --> 00:52:10.640
by recompiling that engine
and send that out

00:52:10.640 --> 00:52:13.560
to our capture system.

00:52:13.560 --> 00:52:16.820
On the right here, a couple of
code changes that were made

00:52:16.820 --> 00:52:19.460
just to basically-- whenever
you're creating an open field

00:52:19.460 --> 00:52:21.290
context, say let's
start capturing

00:52:21.290 --> 00:52:22.640
this 3D command stream.

00:52:22.640 --> 00:52:24.170
And when you're done, let's
clean it up and stop.

00:52:26.850 --> 00:52:28.860
At the application level, there
was a couple changes

00:52:28.860 --> 00:52:30.640
that were made to
SummitX itself.

00:52:30.640 --> 00:52:34.140
Again, I mentioned that we
marked the best jump.

00:52:34.140 --> 00:52:37.200
So actually for every
jump, we do an SMG

00:52:37.200 --> 00:52:38.320
marked recording call.

00:52:38.320 --> 00:52:40.250
Then we give it the number
of seconds you need to go

00:52:40.250 --> 00:52:43.090
backwards in time, and
that's the part

00:52:43.090 --> 00:52:45.900
that's marked for sharing.

00:52:45.900 --> 00:52:48.480
And then the actual share
menu itself at

00:52:48.480 --> 00:52:49.960
the end of the level.

00:52:49.960 --> 00:52:54.260
And along with that call to SMG
Share Recording, we can

00:52:54.260 --> 00:52:56.700
put a string in there that
references back to your

00:52:56.700 --> 00:52:59.030
application, getting the viral
effect, the marketing effect

00:52:59.030 --> 00:53:02.630
you want to see with the
YouTube channel.

00:53:06.260 --> 00:53:08.320
The big difference we see in
this approach of capturing the

00:53:08.320 --> 00:53:11.550
command stream versus reading
back pixels is really in the

00:53:11.550 --> 00:53:14.530
sheer size of the number
of pixels.

00:53:14.530 --> 00:53:20.940
We have 3 gigabytes worth of
pixel data to read back versus

00:53:20.940 --> 00:53:23.830
in a very complex game like the
snowboarding game maybe

00:53:23.830 --> 00:53:27.940
100, 200 megabytes of data
for the entire level.

00:53:27.940 --> 00:53:35.060
For simpler games, we looked at
Dude Perfect, for example,

00:53:35.060 --> 00:53:38.030
cool graphics, but their stream
was a lot smaller.

00:53:38.030 --> 00:53:42.270
The whole 10 shots is about
a 30-megabyte file.

00:53:42.270 --> 00:53:43.520
So it's just a lot smaller.

00:53:43.520 --> 00:53:44.900
It's orders of magnitude
smaller than

00:53:44.900 --> 00:53:46.150
reading back the pixels.

00:53:50.730 --> 00:53:55.090
So that's the advantage of
reading the 3D command stream.

00:53:55.090 --> 00:53:59.290
And at this point, we have a
game play video that we can

00:53:59.290 --> 00:54:03.850
show you from the creation
of that.

00:54:03.850 --> 00:54:05.660
JAREK WILKIEWICZ: This
is a video of--

00:54:05.660 --> 00:54:09.130
was it Wayne playing?

00:54:09.130 --> 00:54:10.850
So this one that we
created earlier.

00:54:10.850 --> 00:54:11.830
This is what it looks like.

00:54:11.830 --> 00:54:24.280
[GAME PLAYBACK]

00:54:24.280 --> 00:54:24.780
[END GAME PLAYBACK]

00:54:24.780 --> 00:54:30.200
JAREK WILKIEWICZ: All right, and
then we did get the Dude

00:54:30.200 --> 00:54:32.310
Perfect video uploaded.

00:54:32.310 --> 00:54:37.090
I think Wi-Fi is a little
slow, but let's see, 26

00:54:37.090 --> 00:54:39.560
minutes ago.

00:54:39.560 --> 00:54:40.810
There's Amir's awesome shot.

00:54:43.590 --> 00:54:51.462
[GAME PLAYBACK]

00:54:51.462 --> 00:54:51.960
[END GAME PLAYBACK]

00:54:51.960 --> 00:54:53.210
JAREK WILKIEWICZ: All right.

00:54:56.050 --> 00:54:59.184
Thank you.

00:54:59.184 --> 00:55:01.674
Let's just switch back.

00:55:01.674 --> 00:55:06.160
[APPLAUSE]

00:55:06.160 --> 00:55:09.450
JAREK WILKIEWICZ: So at this
point, I'd like to summarize.

00:55:09.450 --> 00:55:12.630
If you have nice games, if you
throw in a little YouTube API

00:55:12.630 --> 00:55:15.650
integration, you'll make
your gamers happy.

00:55:15.650 --> 00:55:19.450
And we have a few minutes
left open for questions.

00:55:19.450 --> 00:55:22.610
I think our SummitX video
is still rendering.

00:55:22.610 --> 00:55:25.100
It might finish by the time
we're done talking.

00:55:25.100 --> 00:55:28.480
If not, Amir is going to
post it on his stream.

00:55:28.480 --> 00:55:31.550
Any questions for any
of the speakers?

00:55:39.430 --> 00:55:40.590
There's a question.

00:55:40.590 --> 00:55:44.620
Maybe you could use the
mic if possible.

00:55:44.620 --> 00:55:45.120
[AUDIENCE]

00:55:45.120 --> 00:55:47.120
[INAUDIBLE].

00:55:47.120 --> 00:55:49.340
JAREK WILKIEWICZ: OK, so the
question is about the audio

00:55:49.340 --> 00:55:49.970
processing.

00:55:49.970 --> 00:55:51.220
You want to take that, Amir?

00:56:00.800 --> 00:56:01.700
AMIR EBRAHIMI: Cool, thanks.

00:56:01.700 --> 00:56:05.780
So the audio on that one, just
using a fixed-size queue

00:56:05.780 --> 00:56:10.960
essentially for the 15 seconds
audio that we want.

00:56:10.960 --> 00:56:13.760
I mean, we're capturing
real time using a

00:56:13.760 --> 00:56:15.255
DSP filter and Unity.

00:56:15.255 --> 00:56:17.950
You can capture all the audio
that comes through.

00:56:17.950 --> 00:56:21.650
So we just capture the
last 15 seconds.

00:56:21.650 --> 00:56:25.290
And when we mark a point, we
send that buffer off as a copy

00:56:25.290 --> 00:56:31.660
and we keep recording the audio
in case there's a new

00:56:31.660 --> 00:56:32.910
mark point.

00:56:37.380 --> 00:56:38.630
JAREK WILKIEWICZ: Any
other questions?

00:56:42.390 --> 00:56:43.640
Going once, going twice.

00:56:47.250 --> 00:56:49.500
If not, then thank you very
much for coming to the

00:56:49.500 --> 00:56:52.350
session, and please get in
touch with us if you are

00:56:52.350 --> 00:56:56.750
planning on the integration
of your mobile game into--

00:56:56.750 --> 00:56:59.080
integration of YouTube API
into your mobile game.

00:56:59.080 --> 00:56:59.260
Have

00:56:59.260 --> 00:57:04.487
fun at I/O. [APPLAUSE]

