WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Let's move on to a new topic that we're promptly going to forget.

00:00:03.000 --> 00:00:05.000
This is called Joins.

00:00:05.000 --> 00:00:10.000
So this is a type of SQL query that you can use that involves multiple tables.

00:00:10.000 --> 00:00:12.000
Remember we have our Link table.

00:00:12.000 --> 00:00:15.000
We've been working with that this entire lecture.

00:00:15.000 --> 00:00:17.000
It looks something like this.

00:00:17.000 --> 00:00:21.000
It's got the columns--ID and Votes and the User ID Submitted,

00:00:21.000 --> 00:00:23.000
Data, Title, URL.

00:00:23.000 --> 00:00:25.000
So let's make up some values for these.

00:00:25.000 --> 00:00:29.000
Now, what I want to talk about right now is this User ID column.

00:00:29.000 --> 00:00:31.000
Remember I mentioned before

00:00:31.000 --> 00:00:34.000
that if we had another table called Users

00:00:34.000 --> 00:00:36.000
that looks something like this--

00:00:36.000 --> 00:00:41.000
it's got a column for ID and a column for Name and Password and Date--

00:00:41.000 --> 00:00:43.000
the User ID in the Links table

00:00:43.000 --> 00:00:47.000
refers to the ID column of the User table.

00:00:47.000 --> 00:00:49.000
This should always match up,

00:00:49.000 --> 00:00:54.000
because you want everything in your system to be consistent.

00:00:54.000 --> 00:00:57.000
So for every unique User ID in the Links table,

00:00:57.000 --> 00:01:00.000
there should be a valid user in the User table.

00:01:00.000 --> 00:01:03.000
Now, one of the things we can do in most SQL databases is something called a Join,

00:01:03.000 --> 00:01:07.000
which is a SQL statement that involves two tables.

00:01:07.000 --> 00:01:10.000
So we have a basic SQL statement that looks something like this.

00:01:10.000 --> 00:01:13.000
So select from the Link table,

00:01:13.000 --> 00:01:15.000
where user ID equals 22.

00:01:15.000 --> 00:01:18.000
So that would return all of the links submitted by this user,

00:01:18.000 --> 00:01:21.000
assuming there's more than one.

00:01:21.000 --> 00:01:23.000
What if we didn't know the user's ID?

00:01:23.000 --> 00:01:26.000
What if instead we wanted to select from the link table

00:01:26.000 --> 00:01:30.000
all of the links submitted by users with the name Spez?

00:01:30.000 --> 00:01:33.000
Well, there's a couple of ways you could do that.

00:01:33.000 --> 00:01:36.000
You could first do a lookup for

00:01:36.000 --> 00:01:40.000
what is the user ID of the person named Spez,

00:01:40.000 --> 00:01:43.000
grab this user ID, then run the SQL query.

00:01:43.000 --> 00:01:46.000
So you could do two queries. It might look something like this.

00:01:46.000 --> 00:01:51.000
So I could run one query to get the ID from the user table

00:01:51.000 --> 00:01:53.000
for the user whose name equals Spez,

00:01:53.000 --> 00:01:57.000
and then we can use that ID in a second query.

00:01:57.000 --> 00:02:00.000
But there's another way of doing this query.

00:02:00.000 --> 00:02:03.000
I could, instead of running two queries,

00:02:03.000 --> 00:02:05.000
combine this into one query.

00:02:05.000 --> 00:02:09.000
So instead of From Link, we can change this to Link, User--

00:02:09.000 --> 00:02:11.000
which will scan both tables.

00:02:11.000 --> 00:02:14.000
And we don't want to get all of the attributes.

00:02:14.000 --> 00:02:16.000
We want to preserve the same results from the query,

00:02:16.000 --> 00:02:18.000
so we don't want to select * from link, user--

00:02:18.000 --> 00:02:20.000
we want to select link.*,

00:02:20.000 --> 00:02:24.000
which will return just the columns from the link table.

00:02:24.000 --> 00:02:27.000
Then we want to change our Where clause

00:02:27.000 --> 00:02:29.000
to link these two tables.

00:02:29.000 --> 00:02:34.000
So where user_id=user.id.

00:02:34.000 --> 00:02:39.000
I could have also said link.user_id

00:02:39.000 --> 00:02:41.000
so we include the table names in all of our properties.

00:02:41.000 --> 00:02:43.000
That will make things more clear.

00:02:43.000 --> 00:02:46.000
I need to add another clause to this.

00:02:46.000 --> 00:02:49.000
And user.name = Spez.

00:02:49.000 --> 00:02:51.000
So what does this do?

00:02:51.000 --> 00:02:54.000
Select all of the columns from link--link.*--

00:02:54.000 --> 00:02:57.000
from the link table and the user table,

00:02:57.000 --> 00:03:00.000
where user.name=Spez

00:03:00.000 --> 00:03:04.000
and link.userid=user.id.

00:03:04.000 --> 00:03:07.000
And what this does is what's called a Join Query.

00:03:07.000 --> 00:03:10.000
And your SQL engine will decide

00:03:10.000 --> 00:03:13.000
which of these tables to scan first,

00:03:13.000 --> 00:03:16.000
and in this case, it will probably do the user table first.

00:03:16.000 --> 00:03:19.000
So it will find the username Spez, and then it will find all the links

00:03:19.000 --> 00:03:22.000
whose user_id property

00:03:22.000 --> 00:03:24.000
matches the ID field in the User table.

00:03:24.000 --> 00:03:26.000
So this is a handy thing.

00:03:26.000 --> 00:03:29.000
Now, the reason I said we were going to learn something we were promptly going to forget

00:03:29.000 --> 00:03:32.000
is because we don't use joins very often

00:03:32.000 --> 00:03:35.000
when writing web software.

00:03:35.000 --> 00:03:40.000
It's something you'll see in almost every SQL tutorial,

00:03:40.000 --> 00:03:44.000
but for reasons we'll explain later in this lecture,

00:03:44.000 --> 00:03:47.000
joins don't work very well for the types of problems we're going to be solving

00:03:47.000 --> 00:03:49.000
writing web stuff.

00:03:49.000 --> 00:03:52.000
But you should be familiar with them; you should know what they are.

00:03:52.000 --> 00:03:55.000
You may be writing something that requires this,

00:03:55.000 --> 00:03:58.000
but they're often--well, as I said,

00:03:58.000 --> 00:04:01.000
we'll get into this later in the lecture--why we don't want to use joins.

00:04:01.000 --> 00:04:05.000
Let's move on to something new.

