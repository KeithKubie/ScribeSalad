WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.419
 
so whereas in transfer learning you have

00:00:02.419 --> 00:00:02.429
so whereas in transfer learning you have
 

00:00:02.429 --> 00:00:04.400
so whereas in transfer learning you have
a sequential process we learn from toss

00:00:04.400 --> 00:00:04.410
a sequential process we learn from toss
 

00:00:04.410 --> 00:00:07.039
a sequential process we learn from toss
a and then transfer then to toss B in

00:00:07.039 --> 00:00:07.049
a and then transfer then to toss B in
 

00:00:07.049 --> 00:00:09.410
a and then transfer then to toss B in
multi toddler nning you start off

00:00:09.410 --> 00:00:09.420
multi toddler nning you start off
 

00:00:09.420 --> 00:00:11.180
multi toddler nning you start off
simultaneously trying to have one your

00:00:11.180 --> 00:00:11.190
simultaneously trying to have one your
 

00:00:11.190 --> 00:00:12.860
simultaneously trying to have one your
network do several things at the same

00:00:12.860 --> 00:00:12.870
network do several things at the same
 

00:00:12.870 --> 00:00:14.990
network do several things at the same
time and then each of these tasks calls

00:00:14.990 --> 00:00:15.000
time and then each of these tasks calls
 

00:00:15.000 --> 00:00:17.570
time and then each of these tasks calls
hopefully all of the other tasks let's

00:00:17.570 --> 00:00:17.580
hopefully all of the other tasks let's
 

00:00:17.580 --> 00:00:20.570
hopefully all of the other tasks let's
look at an example let's say you're

00:00:20.570 --> 00:00:20.580
look at an example let's say you're
 

00:00:20.580 --> 00:00:22.849
look at an example let's say you're
building an autonomous vehicle building

00:00:22.849 --> 00:00:22.859
building an autonomous vehicle building
 

00:00:22.859 --> 00:00:24.349
building an autonomous vehicle building
a self-driving car then your

00:00:24.349 --> 00:00:24.359
a self-driving car then your
 

00:00:24.359 --> 00:00:25.939
a self-driving car then your
self-driving car will need to detect

00:00:25.939 --> 00:00:25.949
self-driving car will need to detect
 

00:00:25.949 --> 00:00:27.880
self-driving car will need to detect
several different things such as

00:00:27.880 --> 00:00:27.890
several different things such as
 

00:00:27.890 --> 00:00:33.170
several different things such as
pedestrians detect other cars detect

00:00:33.170 --> 00:00:33.180
pedestrians detect other cars detect
 

00:00:33.180 --> 00:00:38.990
pedestrians detect other cars detect
stop signs and also detect traffic

00:00:38.990 --> 00:00:39.000
stop signs and also detect traffic
 

00:00:39.000 --> 00:00:43.819
stop signs and also detect traffic
lights and also other things so for

00:00:43.819 --> 00:00:43.829
lights and also other things so for
 

00:00:43.829 --> 00:00:45.319
lights and also other things so for
example in this example on the left

00:00:45.319 --> 00:00:45.329
example in this example on the left
 

00:00:45.329 --> 00:00:47.090
example in this example on the left
there is a stop sign in this summation

00:00:47.090 --> 00:00:47.100
there is a stop sign in this summation
 

00:00:47.100 --> 00:00:50.660
there is a stop sign in this summation
there is a car in this image but there

00:00:50.660 --> 00:00:50.670
there is a car in this image but there
 

00:00:50.670 --> 00:00:52.700
there is a car in this image but there
aren't any pedestrians or traffic lights

00:00:52.700 --> 00:00:52.710
aren't any pedestrians or traffic lights
 

00:00:52.710 --> 00:00:56.330
aren't any pedestrians or traffic lights
so if this image is an input for an

00:00:56.330 --> 00:00:56.340
so if this image is an input for an
 

00:00:56.340 --> 00:01:00.049
so if this image is an input for an
example X I then instead of having one

00:01:00.049 --> 00:01:00.059
example X I then instead of having one
 

00:01:00.059 --> 00:01:02.090
example X I then instead of having one
label Y I you would actually have four

00:01:02.090 --> 00:01:02.100
label Y I you would actually have four
 

00:01:02.100 --> 00:01:03.650
label Y I you would actually have four
labels in this example the no

00:01:03.650 --> 00:01:03.660
labels in this example the no
 

00:01:03.660 --> 00:01:05.840
labels in this example the no
pedestrians there is the car there is a

00:01:05.840 --> 00:01:05.850
pedestrians there is the car there is a
 

00:01:05.850 --> 00:01:07.880
pedestrians there is the car there is a
stop sign and there's no traffic lights

00:01:07.880 --> 00:01:07.890
stop sign and there's no traffic lights
 

00:01:07.890 --> 00:01:09.950
stop sign and there's no traffic lights
and if you try to check other things

00:01:09.950 --> 00:01:09.960
and if you try to check other things
 

00:01:09.960 --> 00:01:12.440
and if you try to check other things
then maybe Y I have even more dimensions

00:01:12.440 --> 00:01:12.450
then maybe Y I have even more dimensions
 

00:01:12.450 --> 00:01:14.539
then maybe Y I have even more dimensions
but so now let's take of these four so

00:01:14.539 --> 00:01:14.549
but so now let's take of these four so
 

00:01:14.549 --> 00:01:18.469
but so now let's take of these four so
my eye is a 4 by 1 vector and if you

00:01:18.469 --> 00:01:18.479
my eye is a 4 by 1 vector and if you
 

00:01:18.479 --> 00:01:21.020
my eye is a 4 by 1 vector and if you
look at the training set labels as a

00:01:21.020 --> 00:01:21.030
look at the training set labels as a
 

00:01:21.030 --> 00:01:23.600
look at the training set labels as a
whole then you know similar to before

00:01:23.600 --> 00:01:23.610
whole then you know similar to before
 

00:01:23.610 --> 00:01:26.770
whole then you know similar to before
we'll stack the training data labels

00:01:26.770 --> 00:01:26.780
we'll stack the training data labels
 

00:01:26.780 --> 00:01:31.670
we'll stack the training data labels
horizontally as follows y1 up to Y M

00:01:31.670 --> 00:01:31.680
horizontally as follows y1 up to Y M
 

00:01:31.680 --> 00:01:34.999
horizontally as follows y1 up to Y M
except that now Y is a 4 by 1 vector so

00:01:34.999 --> 00:01:35.009
except that now Y is a 4 by 1 vector so
 

00:01:35.009 --> 00:01:38.870
except that now Y is a 4 by 1 vector so
you should be z' is a tall column vector

00:01:38.870 --> 00:01:38.880
you should be z' is a tall column vector
 

00:01:38.880 --> 00:01:41.870
you should be z' is a tall column vector
and so Y this matrix capital Y is now a

00:01:41.870 --> 00:01:41.880
and so Y this matrix capital Y is now a
 

00:01:41.880 --> 00:01:45.740
and so Y this matrix capital Y is now a
4 by M matrix whereas previously when y

00:01:45.740 --> 00:01:45.750
4 by M matrix whereas previously when y
 

00:01:45.750 --> 00:01:47.719
4 by M matrix whereas previously when y
was a single real number this would have

00:01:47.719 --> 00:01:47.729
was a single real number this would have
 

00:01:47.729 --> 00:01:50.359
was a single real number this would have
been a 1 by n matrix so what you can do

00:01:50.359 --> 00:01:50.369
been a 1 by n matrix so what you can do
 

00:01:50.369 --> 00:01:52.490
been a 1 by n matrix so what you can do
is now train a new network to predict

00:01:52.490 --> 00:01:52.500
is now train a new network to predict
 

00:01:52.500 --> 00:01:55.700
is now train a new network to predict
these values of Y so you can have a

00:01:55.700 --> 00:01:55.710
these values of Y so you can have a
 

00:01:55.710 --> 00:01:58.340
these values of Y so you can have a
neural network equal x and output now a

00:01:58.340 --> 00:01:58.350
neural network equal x and output now a
 

00:01:58.350 --> 00:02:01.370
neural network equal x and output now a
4 dimensional value for y notice zero

00:02:01.370 --> 00:02:01.380
4 dimensional value for y notice zero
 

00:02:01.380 --> 00:02:03.289
4 dimensional value for y notice zero
for the output layer I've drawn four

00:02:03.289 --> 00:02:03.299
for the output layer I've drawn four
 

00:02:03.299 --> 00:02:06.319
for the output layer I've drawn four
nodes and so the first node when we try

00:02:06.319 --> 00:02:06.329
nodes and so the first node when we try
 

00:02:06.329 --> 00:02:09.139
nodes and so the first node when we try
to predict is there a pedestrian in this

00:02:09.139 --> 00:02:09.149
to predict is there a pedestrian in this
 

00:02:09.149 --> 00:02:11.869
to predict is there a pedestrian in this
picture the second output will predict

00:02:11.869 --> 00:02:11.879
picture the second output will predict
 

00:02:11.879 --> 00:02:13.400
picture the second output will predict
as there a car here

00:02:13.400 --> 00:02:13.410
as there a car here
 

00:02:13.410 --> 00:02:16.640
as there a car here
predictors there a stop sign and this

00:02:16.640 --> 00:02:16.650
predictors there a stop sign and this
 

00:02:16.650 --> 00:02:18.560
predictors there a stop sign and this
will predict maybe is there a traffic

00:02:18.560 --> 00:02:18.570
will predict maybe is there a traffic
 

00:02:18.570 --> 00:02:19.870
will predict maybe is there a traffic
light

00:02:19.870 --> 00:02:19.880
light
 

00:02:19.880 --> 00:02:26.180
light
so why hats here is four-dimensional so

00:02:26.180 --> 00:02:26.190
so why hats here is four-dimensional so
 

00:02:26.190 --> 00:02:27.350
so why hats here is four-dimensional so
to train this neural network

00:02:27.350 --> 00:02:27.360
to train this neural network
 

00:02:27.360 --> 00:02:29.630
to train this neural network
you now need to define the loss of the

00:02:29.630 --> 00:02:29.640
you now need to define the loss of the
 

00:02:29.640 --> 00:02:34.250
you now need to define the loss of the
neural network and so given a predictive

00:02:34.250 --> 00:02:34.260
neural network and so given a predictive
 

00:02:34.260 --> 00:02:37.460
neural network and so given a predictive
output Y hat I which is you know four by

00:02:37.460 --> 00:02:37.470
output Y hat I which is you know four by
 

00:02:37.470 --> 00:02:42.380
output Y hat I which is you know four by
one dimensional good loss average over

00:02:42.380 --> 00:02:42.390
one dimensional good loss average over
 

00:02:42.390 --> 00:02:45.470
one dimensional good loss average over
your entire training set would be one

00:02:45.470 --> 00:02:45.480
your entire training set would be one
 

00:02:45.480 --> 00:02:49.400
your entire training set would be one
over m sum from I equals 1 through m sum

00:02:49.400 --> 00:02:49.410
over m sum from I equals 1 through m sum
 

00:02:49.410 --> 00:02:52.460
over m sum from I equals 1 through m sum
from J equals 1 through 4 of the losses

00:02:52.460 --> 00:02:52.470
from J equals 1 through 4 of the losses
 

00:02:52.470 --> 00:02:59.360
from J equals 1 through 4 of the losses
of the individual predictions so it's

00:02:59.360 --> 00:02:59.370
of the individual predictions so it's
 

00:02:59.370 --> 00:03:01.640
of the individual predictions so it's
just summing over the four components of

00:03:01.640 --> 00:03:01.650
just summing over the four components of
 

00:03:01.650 --> 00:03:03.890
just summing over the four components of
pedestrian car stop sign traffic light

00:03:03.890 --> 00:03:03.900
pedestrian car stop sign traffic light
 

00:03:03.900 --> 00:03:10.790
pedestrian car stop sign traffic light
and this script L is the usual logistic

00:03:10.790 --> 00:03:10.800
and this script L is the usual logistic
 

00:03:10.800 --> 00:03:15.380
and this script L is the usual logistic
loss all right so just to write this out

00:03:15.380 --> 00:03:15.390
loss all right so just to write this out
 

00:03:15.390 --> 00:03:22.240
loss all right so just to write this out
this is negative Y J I log Y hat J I

00:03:22.240 --> 00:03:22.250
this is negative Y J I log Y hat J I
 

00:03:22.250 --> 00:03:31.699
this is negative Y J I log Y hat J I
minus 1 minus y log 1 minus y hat and

00:03:31.699 --> 00:03:31.709
minus 1 minus y log 1 minus y hat and
 

00:03:31.709 --> 00:03:33.620
minus 1 minus y log 1 minus y hat and
the main difference compared to the

00:03:33.620 --> 00:03:33.630
the main difference compared to the
 

00:03:33.630 --> 00:03:35.420
the main difference compared to the
earlier binary classification examples

00:03:35.420 --> 00:03:35.430
earlier binary classification examples
 

00:03:35.430 --> 00:03:38.000
earlier binary classification examples
is that you're now summing over J equals

00:03:38.000 --> 00:03:38.010
is that you're now summing over J equals
 

00:03:38.010 --> 00:03:41.210
is that you're now summing over J equals
1 through 4 and the main difference

00:03:41.210 --> 00:03:41.220
1 through 4 and the main difference
 

00:03:41.220 --> 00:03:43.550
1 through 4 and the main difference
between this and softmax regression is

00:03:43.550 --> 00:03:43.560
between this and softmax regression is
 

00:03:43.560 --> 00:03:46.720
between this and softmax regression is
that unlike softmax regression which

00:03:46.720 --> 00:03:46.730
that unlike softmax regression which
 

00:03:46.730 --> 00:03:49.460
that unlike softmax regression which
assigns a single label to a single

00:03:49.460 --> 00:03:49.470
assigns a single label to a single
 

00:03:49.470 --> 00:03:52.550
assigns a single label to a single
example this one image can have multiple

00:03:52.550 --> 00:03:52.560
example this one image can have multiple
 

00:03:52.560 --> 00:03:58.550
example this one image can have multiple
labels so you're not saying that each

00:03:58.550 --> 00:03:58.560
labels so you're not saying that each
 

00:03:58.560 --> 00:04:01.130
labels so you're not saying that each
image is either a picture of a

00:04:01.130 --> 00:04:01.140
image is either a picture of a
 

00:04:01.140 --> 00:04:02.600
image is either a picture of a
pedestrian or picture of a car features

00:04:02.600 --> 00:04:02.610
pedestrian or picture of a car features
 

00:04:02.610 --> 00:04:04.130
pedestrian or picture of a car features
also and pictures often quite traffic

00:04:04.130 --> 00:04:04.140
also and pictures often quite traffic
 

00:04:04.140 --> 00:04:05.900
also and pictures often quite traffic
light you're asking for each picture

00:04:05.900 --> 00:04:05.910
light you're asking for each picture
 

00:04:05.910 --> 00:04:08.360
light you're asking for each picture
because they're the pedestrian or car

00:04:08.360 --> 00:04:08.370
because they're the pedestrian or car
 

00:04:08.370 --> 00:04:10.280
because they're the pedestrian or car
stops on a traffic light and multiple

00:04:10.280 --> 00:04:10.290
stops on a traffic light and multiple
 

00:04:10.290 --> 00:04:11.840
stops on a traffic light and multiple
objects will appear in the same image in

00:04:11.840 --> 00:04:11.850
objects will appear in the same image in
 

00:04:11.850 --> 00:04:13.520
objects will appear in the same image in
fact in the example on the previous

00:04:13.520 --> 00:04:13.530
fact in the example on the previous
 

00:04:13.530 --> 00:04:16.880
fact in the example on the previous
slide we had both a car and a stop find

00:04:16.880 --> 00:04:16.890
slide we had both a car and a stop find
 

00:04:16.890 --> 00:04:18.710
slide we had both a car and a stop find
that image but no pedestrians and

00:04:18.710 --> 00:04:18.720
that image but no pedestrians and
 

00:04:18.720 --> 00:04:20.659
that image but no pedestrians and
traffic lights so you're not assigning a

00:04:20.659 --> 00:04:20.669
traffic lights so you're not assigning a
 

00:04:20.669 --> 00:04:22.850
traffic lights so you're not assigning a
single label to an image you're going

00:04:22.850 --> 00:04:22.860
single label to an image you're going
 

00:04:22.860 --> 00:04:24.560
single label to an image you're going
through the different classes in asking

00:04:24.560 --> 00:04:24.570
through the different classes in asking
 

00:04:24.570 --> 00:04:25.220
through the different classes in asking
you

00:04:25.220 --> 00:04:25.230
you
 

00:04:25.230 --> 00:04:26.900
you
putting each of the classes does that

00:04:26.900 --> 00:04:26.910
putting each of the classes does that
 

00:04:26.910 --> 00:04:29.240
putting each of the classes does that
class does that type of object appear in

00:04:29.240 --> 00:04:29.250
class does that type of object appear in
 

00:04:29.250 --> 00:04:33.020
class does that type of object appear in
the image so that's I'm saying that with

00:04:33.020 --> 00:04:33.030
the image so that's I'm saying that with
 

00:04:33.030 --> 00:04:35.800
the image so that's I'm saying that with
this setting one image can have multiple

00:04:35.800 --> 00:04:35.810
this setting one image can have multiple
 

00:04:35.810 --> 00:04:39.860
this setting one image can have multiple
labels if you train a neural network to

00:04:39.860 --> 00:04:39.870
labels if you train a neural network to
 

00:04:39.870 --> 00:04:42.320
labels if you train a neural network to
minimize this cost function you are

00:04:42.320 --> 00:04:42.330
minimize this cost function you are
 

00:04:42.330 --> 00:04:46.360
minimize this cost function you are
carrying out multi task learning because

00:04:46.360 --> 00:04:46.370
carrying out multi task learning because
 

00:04:46.370 --> 00:04:49.460
carrying out multi task learning because
what you're doing is building a single

00:04:49.460 --> 00:04:49.470
what you're doing is building a single
 

00:04:49.470 --> 00:04:51.350
what you're doing is building a single
neural network that is looking at

00:04:51.350 --> 00:04:51.360
neural network that is looking at
 

00:04:51.360 --> 00:04:53.210
neural network that is looking at
initial image and basically solving for

00:04:53.210 --> 00:04:53.220
initial image and basically solving for
 

00:04:53.220 --> 00:04:54.980
initial image and basically solving for
problems that's trying to tell you that

00:04:54.980 --> 00:04:54.990
problems that's trying to tell you that
 

00:04:54.990 --> 00:04:57.340
problems that's trying to tell you that
each image have each of these four

00:04:57.340 --> 00:04:57.350
each image have each of these four
 

00:04:57.350 --> 00:05:01.040
each image have each of these four
objects in it and one other thing you

00:05:01.040 --> 00:05:01.050
objects in it and one other thing you
 

00:05:01.050 --> 00:05:02.630
objects in it and one other thing you
could have done this just train four

00:05:02.630 --> 00:05:02.640
could have done this just train four
 

00:05:02.640 --> 00:05:04.160
could have done this just train four
separate neural networks instead of

00:05:04.160 --> 00:05:04.170
separate neural networks instead of
 

00:05:04.170 --> 00:05:06.740
separate neural networks instead of
train one network to do four things but

00:05:06.740 --> 00:05:06.750
train one network to do four things but
 

00:05:06.750 --> 00:05:09.290
train one network to do four things but
if some of the earlier features in your

00:05:09.290 --> 00:05:09.300
if some of the earlier features in your
 

00:05:09.300 --> 00:05:10.790
if some of the earlier features in your
network can be shared between these

00:05:10.790 --> 00:05:10.800
network can be shared between these
 

00:05:10.800 --> 00:05:13.070
network can be shared between these
different types of objects then you find

00:05:13.070 --> 00:05:13.080
different types of objects then you find
 

00:05:13.080 --> 00:05:15.020
different types of objects then you find
that training one neural network to do

00:05:15.020 --> 00:05:15.030
that training one neural network to do
 

00:05:15.030 --> 00:05:16.670
that training one neural network to do
four things results in better

00:05:16.670 --> 00:05:16.680
four things results in better
 

00:05:16.680 --> 00:05:19.130
four things results in better
performance then training for completely

00:05:19.130 --> 00:05:19.140
performance then training for completely
 

00:05:19.140 --> 00:05:20.930
performance then training for completely
separate neural network to do the four

00:05:20.930 --> 00:05:20.940
separate neural network to do the four
 

00:05:20.940 --> 00:05:24.010
separate neural network to do the four
tasks separately so that's the power of

00:05:24.010 --> 00:05:24.020
tasks separately so that's the power of
 

00:05:24.020 --> 00:05:28.250
tasks separately so that's the power of
multitask learning and one other detail

00:05:28.250 --> 00:05:28.260
multitask learning and one other detail
 

00:05:28.260 --> 00:05:30.560
multitask learning and one other detail
you know so far described as algorithm

00:05:30.560 --> 00:05:30.570
you know so far described as algorithm
 

00:05:30.570 --> 00:05:32.720
you know so far described as algorithm
as if every image has every single label

00:05:32.720 --> 00:05:32.730
as if every image has every single label
 

00:05:32.730 --> 00:05:35.270
as if every image has every single label
it turns out that multitasking also

00:05:35.270 --> 00:05:35.280
it turns out that multitasking also
 

00:05:35.280 --> 00:05:37.490
it turns out that multitasking also
works even if some of the images we

00:05:37.490 --> 00:05:37.500
works even if some of the images we
 

00:05:37.500 --> 00:05:39.950
works even if some of the images we
label on your some of the objects so the

00:05:39.950 --> 00:05:39.960
label on your some of the objects so the
 

00:05:39.960 --> 00:05:41.540
label on your some of the objects so the
first training example let's say someone

00:05:41.540 --> 00:05:41.550
first training example let's say someone
 

00:05:41.550 --> 00:05:43.730
first training example let's say someone
your neighbor had told you there's a

00:05:43.730 --> 00:05:43.740
your neighbor had told you there's a
 

00:05:43.740 --> 00:05:44.210
your neighbor had told you there's a
pedestrian

00:05:44.210 --> 00:05:44.220
pedestrian
 

00:05:44.220 --> 00:05:46.250
pedestrian
there's no car but they didn't bother to

00:05:46.250 --> 00:05:46.260
there's no car but they didn't bother to
 

00:05:46.260 --> 00:05:47.600
there's no car but they didn't bother to
label whether or not there's a stop sign

00:05:47.600 --> 00:05:47.610
label whether or not there's a stop sign
 

00:05:47.610 --> 00:05:49.190
label whether or not there's a stop sign
over a LAN this is traffic right and me

00:05:49.190 --> 00:05:49.200
over a LAN this is traffic right and me
 

00:05:49.200 --> 00:05:51.230
over a LAN this is traffic right and me
for the second example there is a

00:05:51.230 --> 00:05:51.240
for the second example there is a
 

00:05:51.240 --> 00:05:53.750
for the second example there is a
pedestrian there is a car but again the

00:05:53.750 --> 00:05:53.760
pedestrian there is a car but again the
 

00:05:53.760 --> 00:05:55.160
pedestrian there is a car but again the
laborer when they looked at that image

00:05:55.160 --> 00:05:55.170
laborer when they looked at that image
 

00:05:55.170 --> 00:05:57.380
laborer when they looked at that image
they just enable it with whether it has

00:05:57.380 --> 00:05:57.390
they just enable it with whether it has
 

00:05:57.390 --> 00:05:59.030
they just enable it with whether it has
a stop sign over the traffic light and

00:05:59.030 --> 00:05:59.040
a stop sign over the traffic light and
 

00:05:59.040 --> 00:06:01.340
a stop sign over the traffic light and
so on it may be some examples are fully

00:06:01.340 --> 00:06:01.350
so on it may be some examples are fully
 

00:06:01.350 --> 00:06:03.650
so on it may be some examples are fully
labeled and maybe some example they were

00:06:03.650 --> 00:06:03.660
labeled and maybe some example they were
 

00:06:03.660 --> 00:06:04.940
labeled and maybe some example they were
just labeling for the presence and

00:06:04.940 --> 00:06:04.950
just labeling for the presence and
 

00:06:04.950 --> 00:06:07.010
just labeling for the presence and
absence of cause so there's some you

00:06:07.010 --> 00:06:07.020
absence of cause so there's some you
 

00:06:07.020 --> 00:06:08.300
absence of cause so there's some you
know question marks and so on

00:06:08.300 --> 00:06:08.310
know question marks and so on
 

00:06:08.310 --> 00:06:11.270
know question marks and so on
so with data set like this you can still

00:06:11.270 --> 00:06:11.280
so with data set like this you can still
 

00:06:11.280 --> 00:06:13.520
so with data set like this you can still
train your learning algorithm to do four

00:06:13.520 --> 00:06:13.530
train your learning algorithm to do four
 

00:06:13.530 --> 00:06:15.710
train your learning algorithm to do four
tasks at the same time even when some

00:06:15.710 --> 00:06:15.720
tasks at the same time even when some
 

00:06:15.720 --> 00:06:17.750
tasks at the same time even when some
images have over your subset of the

00:06:17.750 --> 00:06:17.760
images have over your subset of the
 

00:06:17.760 --> 00:06:19.970
images have over your subset of the
labels and others are so a question mark

00:06:19.970 --> 00:06:19.980
labels and others are so a question mark
 

00:06:19.980 --> 00:06:21.890
labels and others are so a question mark
so don't cares and the way you train

00:06:21.890 --> 00:06:21.900
so don't cares and the way you train
 

00:06:21.900 --> 00:06:23.780
so don't cares and the way you train
your algorithm even when some of these

00:06:23.780 --> 00:06:23.790
your algorithm even when some of these
 

00:06:23.790 --> 00:06:25.280
your algorithm even when some of these
labels are question marks are really

00:06:25.280 --> 00:06:25.290
labels are question marks are really
 

00:06:25.290 --> 00:06:29.210
labels are question marks are really
unlabeled is that in this sum over j

00:06:29.210 --> 00:06:29.220
unlabeled is that in this sum over j
 

00:06:29.220 --> 00:06:34.450
unlabeled is that in this sum over j
from 1 to 4 you with some only over

00:06:34.450 --> 00:06:34.460
from 1 to 4 you with some only over
 

00:06:34.460 --> 00:06:37.120
from 1 to 4 you with some only over
values or j

00:06:37.120 --> 00:06:37.130
values or j
 

00:06:37.130 --> 00:06:42.260
values or j
with a zero or one label so whenever you

00:06:42.260 --> 00:06:42.270
with a zero or one label so whenever you
 

00:06:42.270 --> 00:06:44.450
with a zero or one label so whenever you
know there's a question mark you just

00:06:44.450 --> 00:06:44.460
know there's a question mark you just
 

00:06:44.460 --> 00:06:46.939
know there's a question mark you just
omit that term from summation but just

00:06:46.939 --> 00:06:46.949
omit that term from summation but just
 

00:06:46.949 --> 00:06:49.820
omit that term from summation but just
sum over only the values where there is

00:06:49.820 --> 00:06:49.830
sum over only the values where there is
 

00:06:49.830 --> 00:06:52.520
sum over only the values where there is
a label and so that allows you to use

00:06:52.520 --> 00:06:52.530
a label and so that allows you to use
 

00:06:52.530 --> 00:06:55.280
a label and so that allows you to use
data sets like this as well so when does

00:06:55.280 --> 00:06:55.290
data sets like this as well so when does
 

00:06:55.290 --> 00:06:57.740
data sets like this as well so when does
multitask learning make sense so when

00:06:57.740 --> 00:06:57.750
multitask learning make sense so when
 

00:06:57.750 --> 00:06:59.510
multitask learning make sense so when
there's multitask learning make sense I

00:06:59.510 --> 00:06:59.520
there's multitask learning make sense I
 

00:06:59.520 --> 00:07:00.379
there's multitask learning make sense I
think it makes sense

00:07:00.379 --> 00:07:00.389
think it makes sense
 

00:07:00.389 --> 00:07:03.560
think it makes sense
usually when three things are true one

00:07:03.560 --> 00:07:03.570
usually when three things are true one
 

00:07:03.570 --> 00:07:05.150
usually when three things are true one
is if you are training on set of tasks

00:07:05.150 --> 00:07:05.160
is if you are training on set of tasks
 

00:07:05.160 --> 00:07:06.740
is if you are training on set of tasks
that could benefit from having shared

00:07:06.740 --> 00:07:06.750
that could benefit from having shared
 

00:07:06.750 --> 00:07:09.379
that could benefit from having shared
low-level features so for the autonomous

00:07:09.379 --> 00:07:09.389
low-level features so for the autonomous
 

00:07:09.389 --> 00:07:11.900
low-level features so for the autonomous
driving example it makes sense that

00:07:11.900 --> 00:07:11.910
driving example it makes sense that
 

00:07:11.910 --> 00:07:14.180
driving example it makes sense that
recognizing traffic lights and cars and

00:07:14.180 --> 00:07:14.190
recognizing traffic lights and cars and
 

00:07:14.190 --> 00:07:16.129
recognizing traffic lights and cars and
pedestrians those should have similar

00:07:16.129 --> 00:07:16.139
pedestrians those should have similar
 

00:07:16.139 --> 00:07:17.690
pedestrians those should have similar
features that could also help you

00:07:17.690 --> 00:07:17.700
features that could also help you
 

00:07:17.700 --> 00:07:19.219
features that could also help you
recognize stop signs because these are

00:07:19.219 --> 00:07:19.229
recognize stop signs because these are
 

00:07:19.229 --> 00:07:24.590
recognize stop signs because these are
all features of roads second this is

00:07:24.590 --> 00:07:24.600
all features of roads second this is
 

00:07:24.600 --> 00:07:26.690
all features of roads second this is
less of a hard and fast rule so this

00:07:26.690 --> 00:07:26.700
less of a hard and fast rule so this
 

00:07:26.700 --> 00:07:28.909
less of a hard and fast rule so this
isn't always true but what I see for a

00:07:28.909 --> 00:07:28.919
isn't always true but what I see for a
 

00:07:28.919 --> 00:07:31.250
isn't always true but what I see for a
lot of successful multitask learning

00:07:31.250 --> 00:07:31.260
lot of successful multitask learning
 

00:07:31.260 --> 00:07:32.779
lot of successful multitask learning
settings is that the amount of data you

00:07:32.779 --> 00:07:32.789
settings is that the amount of data you
 

00:07:32.789 --> 00:07:34.730
settings is that the amount of data you
have the each size is quite similar so

00:07:34.730 --> 00:07:34.740
have the each size is quite similar so
 

00:07:34.740 --> 00:07:38.120
have the each size is quite similar so
if you recall from transfer learning you

00:07:38.120 --> 00:07:38.130
if you recall from transfer learning you
 

00:07:38.130 --> 00:07:39.950
if you recall from transfer learning you
learn from some toss a and transfer it

00:07:39.950 --> 00:07:39.960
learn from some toss a and transfer it
 

00:07:39.960 --> 00:07:43.640
learn from some toss a and transfer it
to some times B so if you have a million

00:07:43.640 --> 00:07:43.650
to some times B so if you have a million
 

00:07:43.650 --> 00:07:47.570
to some times B so if you have a million
examples for toss a then and 1000

00:07:47.570 --> 00:07:47.580
examples for toss a then and 1000
 

00:07:47.580 --> 00:07:49.370
examples for toss a then and 1000
examples so toss B then all the

00:07:49.370 --> 00:07:49.380
examples so toss B then all the
 

00:07:49.380 --> 00:07:50.659
examples so toss B then all the
knowledge you learn from that million

00:07:50.659 --> 00:07:50.669
knowledge you learn from that million
 

00:07:50.669 --> 00:07:53.300
knowledge you learn from that million
examples could really help augment the

00:07:53.300 --> 00:07:53.310
examples could really help augment the
 

00:07:53.310 --> 00:07:55.450
examples could really help augment the
much smaller data set you have a times B

00:07:55.450 --> 00:07:55.460
much smaller data set you have a times B
 

00:07:55.460 --> 00:07:58.430
much smaller data set you have a times B
well how about multi tailoring it

00:07:58.430 --> 00:07:58.440
well how about multi tailoring it
 

00:07:58.440 --> 00:08:00.379
well how about multi tailoring it
multitasking you usually have a lot more

00:08:00.379 --> 00:08:00.389
multitasking you usually have a lot more
 

00:08:00.389 --> 00:08:02.029
multitasking you usually have a lot more
tasks than just two so maybe you have

00:08:02.029 --> 00:08:02.039
tasks than just two so maybe you have
 

00:08:02.039 --> 00:08:04.400
tasks than just two so maybe you have
previously we had four tasks but let's

00:08:04.400 --> 00:08:04.410
previously we had four tasks but let's
 

00:08:04.410 --> 00:08:07.760
previously we had four tasks but let's
say you have a hundred tasks and you're

00:08:07.760 --> 00:08:07.770
say you have a hundred tasks and you're
 

00:08:07.770 --> 00:08:09.379
say you have a hundred tasks and you're
going to do multi table burning to try

00:08:09.379 --> 00:08:09.389
going to do multi table burning to try
 

00:08:09.389 --> 00:08:11.029
going to do multi table burning to try
to recognize a hundred different types

00:08:11.029 --> 00:08:11.039
to recognize a hundred different types
 

00:08:11.039 --> 00:08:13.100
to recognize a hundred different types
of objects at the same time so what you

00:08:13.100 --> 00:08:13.110
of objects at the same time so what you
 

00:08:13.110 --> 00:08:14.480
of objects at the same time so what you
will find is that you might have a

00:08:14.480 --> 00:08:14.490
will find is that you might have a
 

00:08:14.490 --> 00:08:19.129
will find is that you might have a
thousand examples Pro tasks and so if

00:08:19.129 --> 00:08:19.139
thousand examples Pro tasks and so if
 

00:08:19.139 --> 00:08:20.719
thousand examples Pro tasks and so if
you focus on the performance of just one

00:08:20.719 --> 00:08:20.729
you focus on the performance of just one
 

00:08:20.729 --> 00:08:22.370
you focus on the performance of just one
task let's focus in the performance on

00:08:22.370 --> 00:08:22.380
task let's focus in the performance on
 

00:08:22.380 --> 00:08:25.790
task let's focus in the performance on
the hundred stars you can call a 100 if

00:08:25.790 --> 00:08:25.800
the hundred stars you can call a 100 if
 

00:08:25.800 --> 00:08:27.469
the hundred stars you can call a 100 if
you had trained to do this final toss in

00:08:27.469 --> 00:08:27.479
you had trained to do this final toss in
 

00:08:27.479 --> 00:08:29.510
you had trained to do this final toss in
isolation you would have had just a

00:08:29.510 --> 00:08:29.520
isolation you would have had just a
 

00:08:29.520 --> 00:08:32.360
isolation you would have had just a
thousand examples to Train on this one

00:08:32.360 --> 00:08:32.370
thousand examples to Train on this one
 

00:08:32.370 --> 00:08:34.459
thousand examples to Train on this one
toss this one over a hundred times but

00:08:34.459 --> 00:08:34.469
toss this one over a hundred times but
 

00:08:34.469 --> 00:08:37.370
toss this one over a hundred times but
by trading on these 99 other tasks these

00:08:37.370 --> 00:08:37.380
by trading on these 99 other tasks these
 

00:08:37.380 --> 00:08:40.750
by trading on these 99 other tasks these
in aggregate have ninety nine thousand

00:08:40.750 --> 00:08:40.760
in aggregate have ninety nine thousand
 

00:08:40.760 --> 00:08:43.370
in aggregate have ninety nine thousand
training examples which could be a big

00:08:43.370 --> 00:08:43.380
training examples which could be a big
 

00:08:43.380 --> 00:08:44.540
training examples which could be a big
boost could give them all the knowledge

00:08:44.540 --> 00:08:44.550
boost could give them all the knowledge
 

00:08:44.550 --> 00:08:47.150
boost could give them all the knowledge
to augment this otherwise relatively

00:08:47.150 --> 00:08:47.160
to augment this otherwise relatively
 

00:08:47.160 --> 00:08:49.400
to augment this otherwise relatively
small one thousand example training set

00:08:49.400 --> 00:08:49.410
small one thousand example training set
 

00:08:49.410 --> 00:08:50.390
small one thousand example training set
that you have for the

00:08:50.390 --> 00:08:50.400
that you have for the
 

00:08:50.400 --> 00:08:53.540
that you have for the
so toss a 100 and symmetrically every

00:08:53.540 --> 00:08:53.550
so toss a 100 and symmetrically every
 

00:08:53.550 --> 00:08:56.030
so toss a 100 and symmetrically every
one of the other 99 tasks can provide

00:08:56.030 --> 00:08:56.040
one of the other 99 tasks can provide
 

00:08:56.040 --> 00:08:57.650
one of the other 99 tasks can provide
some data or provide some knowledge to

00:08:57.650 --> 00:08:57.660
some data or provide some knowledge to
 

00:08:57.660 --> 00:08:59.960
some data or provide some knowledge to
help every one of the other tosses in

00:08:59.960 --> 00:08:59.970
help every one of the other tosses in
 

00:08:59.970 --> 00:09:03.500
help every one of the other tosses in
this list of 100 toss so the second

00:09:03.500 --> 00:09:03.510
this list of 100 toss so the second
 

00:09:03.510 --> 00:09:05.230
this list of 100 toss so the second
bullet isn't a hard and fast rule but

00:09:05.230 --> 00:09:05.240
bullet isn't a hard and fast rule but
 

00:09:05.240 --> 00:09:08.420
bullet isn't a hard and fast rule but
what I tend to look at is if you focus

00:09:08.420 --> 00:09:08.430
what I tend to look at is if you focus
 

00:09:08.430 --> 00:09:11.360
what I tend to look at is if you focus
on any one task for that to get a big

00:09:11.360 --> 00:09:11.370
on any one task for that to get a big
 

00:09:11.370 --> 00:09:13.400
on any one task for that to get a big
boost for multi toss learning the other

00:09:13.400 --> 00:09:13.410
boost for multi toss learning the other
 

00:09:13.410 --> 00:09:15.710
boost for multi toss learning the other
task in aggregate need to have quite a

00:09:15.710 --> 00:09:15.720
task in aggregate need to have quite a
 

00:09:15.720 --> 00:09:18.230
task in aggregate need to have quite a
lot more data then for that one toss and

00:09:18.230 --> 00:09:18.240
lot more data then for that one toss and
 

00:09:18.240 --> 00:09:20.000
lot more data then for that one toss and
so one way to satisfy that is you can

00:09:20.000 --> 00:09:20.010
so one way to satisfy that is you can
 

00:09:20.010 --> 00:09:22.100
so one way to satisfy that is you can
while the toss like we have in this

00:09:22.100 --> 00:09:22.110
while the toss like we have in this
 

00:09:22.110 --> 00:09:24.050
while the toss like we have in this
example on the right and if the amount

00:09:24.050 --> 00:09:24.060
example on the right and if the amount
 

00:09:24.060 --> 00:09:25.579
example on the right and if the amount
of data you have a huge house is quite

00:09:25.579 --> 00:09:25.589
of data you have a huge house is quite
 

00:09:25.589 --> 00:09:28.610
of data you have a huge house is quite
similar but the key really is that if

00:09:28.610 --> 00:09:28.620
similar but the key really is that if
 

00:09:28.620 --> 00:09:30.740
similar but the key really is that if
you already have a thousand examples for

00:09:30.740 --> 00:09:30.750
you already have a thousand examples for
 

00:09:30.750 --> 00:09:33.200
you already have a thousand examples for
one toss then for all of the other tasks

00:09:33.200 --> 00:09:33.210
one toss then for all of the other tasks
 

00:09:33.210 --> 00:09:34.519
one toss then for all of the other tasks
you'd better have you know a lot more

00:09:34.519 --> 00:09:34.529
you'd better have you know a lot more
 

00:09:34.529 --> 00:09:37.070
you'd better have you know a lot more
than 1,000 examples if those other tasks

00:09:37.070 --> 00:09:37.080
than 1,000 examples if those other tasks
 

00:09:37.080 --> 00:09:39.260
than 1,000 examples if those other tasks
are meant to help you do better on this

00:09:39.260 --> 00:09:39.270
are meant to help you do better on this
 

00:09:39.270 --> 00:09:42.170
are meant to help you do better on this
final tools and finally multitask

00:09:42.170 --> 00:09:42.180
final tools and finally multitask
 

00:09:42.180 --> 00:09:44.030
final tools and finally multitask
learning tend to make more sense when

00:09:44.030 --> 00:09:44.040
learning tend to make more sense when
 

00:09:44.040 --> 00:09:45.230
learning tend to make more sense when
you can train and pick it up near a

00:09:45.230 --> 00:09:45.240
you can train and pick it up near a
 

00:09:45.240 --> 00:09:47.210
you can train and pick it up near a
network to do well on all the toss so

00:09:47.210 --> 00:09:47.220
network to do well on all the toss so
 

00:09:47.220 --> 00:09:49.519
network to do well on all the toss so
the alternative the multi toddler name

00:09:49.519 --> 00:09:49.529
the alternative the multi toddler name
 

00:09:49.529 --> 00:09:51.470
the alternative the multi toddler name
would be to train a separate neural

00:09:51.470 --> 00:09:51.480
would be to train a separate neural
 

00:09:51.480 --> 00:09:53.180
would be to train a separate neural
network with each toss so rather than

00:09:53.180 --> 00:09:53.190
network with each toss so rather than
 

00:09:53.190 --> 00:09:55.430
network with each toss so rather than
training one your net for pedestrian car

00:09:55.430 --> 00:09:55.440
training one your net for pedestrian car
 

00:09:55.440 --> 00:09:56.870
training one your net for pedestrian car
stop sign and traffic light detection

00:09:56.870 --> 00:09:56.880
stop sign and traffic light detection
 

00:09:56.880 --> 00:09:58.340
stop sign and traffic light detection
you could have trained one year a

00:09:58.340 --> 00:09:58.350
you could have trained one year a
 

00:09:58.350 --> 00:09:59.290
you could have trained one year a
network for pedestrian detection

00:09:59.290 --> 00:09:59.300
network for pedestrian detection
 

00:09:59.300 --> 00:10:01.130
network for pedestrian detection
wondering that were for college

00:10:01.130 --> 00:10:01.140
wondering that were for college
 

00:10:01.140 --> 00:10:03.110
wondering that were for college
detection one year network response and

00:10:03.110 --> 00:10:03.120
detection one year network response and
 

00:10:03.120 --> 00:10:04.550
detection one year network response and
detection and one year network for

00:10:04.550 --> 00:10:04.560
detection and one year network for
 

00:10:04.560 --> 00:10:06.949
detection and one year network for
traffic light detection so what a

00:10:06.949 --> 00:10:06.959
traffic light detection so what a
 

00:10:06.959 --> 00:10:09.320
traffic light detection so what a
researcher rich Khurana found many years

00:10:09.320 --> 00:10:09.330
researcher rich Khurana found many years
 

00:10:09.330 --> 00:10:10.870
researcher rich Khurana found many years
ago was that the only time that

00:10:10.870 --> 00:10:10.880
ago was that the only time that
 

00:10:10.880 --> 00:10:14.000
ago was that the only time that
multitasking hurts performance compared

00:10:14.000 --> 00:10:14.010
multitasking hurts performance compared
 

00:10:14.010 --> 00:10:15.949
multitasking hurts performance compared
to creating separate neural networks is

00:10:15.949 --> 00:10:15.959
to creating separate neural networks is
 

00:10:15.959 --> 00:10:18.590
to creating separate neural networks is
if your new network isn't big enough but

00:10:18.590 --> 00:10:18.600
if your new network isn't big enough but
 

00:10:18.600 --> 00:10:19.910
if your new network isn't big enough but
if you can train a big enough neural

00:10:19.910 --> 00:10:19.920
if you can train a big enough neural
 

00:10:19.920 --> 00:10:21.829
if you can train a big enough neural
network then multitask learning

00:10:21.829 --> 00:10:21.839
network then multitask learning
 

00:10:21.839 --> 00:10:24.530
network then multitask learning
certainly should not wash in very very

00:10:24.530 --> 00:10:24.540
certainly should not wash in very very
 

00:10:24.540 --> 00:10:27.050
certainly should not wash in very very
hurt performance but and hopefully it

00:10:27.050 --> 00:10:27.060
hurt performance but and hopefully it
 

00:10:27.060 --> 00:10:28.670
hurt performance but and hopefully it
will actually hope performance compared

00:10:28.670 --> 00:10:28.680
will actually hope performance compared
 

00:10:28.680 --> 00:10:31.220
will actually hope performance compared
to if you're training new networks to do

00:10:31.220 --> 00:10:31.230
to if you're training new networks to do
 

00:10:31.230 --> 00:10:33.650
to if you're training new networks to do
these different tools in isolation so

00:10:33.650 --> 00:10:33.660
these different tools in isolation so
 

00:10:33.660 --> 00:10:35.720
these different tools in isolation so
that's it so multitask learning in

00:10:35.720 --> 00:10:35.730
that's it so multitask learning in
 

00:10:35.730 --> 00:10:37.970
that's it so multitask learning in
practice multitask learning is use much

00:10:37.970 --> 00:10:37.980
practice multitask learning is use much
 

00:10:37.980 --> 00:10:40.550
practice multitask learning is use much
less often than transfer learning I see

00:10:40.550 --> 00:10:40.560
less often than transfer learning I see
 

00:10:40.560 --> 00:10:41.900
less often than transfer learning I see
a lot of applications of transfer

00:10:41.900 --> 00:10:41.910
a lot of applications of transfer
 

00:10:41.910 --> 00:10:44.390
a lot of applications of transfer
learning where you have a problem we

00:10:44.390 --> 00:10:44.400
learning where you have a problem we
 

00:10:44.400 --> 00:10:45.740
learning where you have a problem we
want to solve of a small amount of data

00:10:45.740 --> 00:10:45.750
want to solve of a small amount of data
 

00:10:45.750 --> 00:10:47.600
want to solve of a small amount of data
so you finally relate the problem we

00:10:47.600 --> 00:10:47.610
so you finally relate the problem we
 

00:10:47.610 --> 00:10:49.430
so you finally relate the problem we
have a model data to learn something and

00:10:49.430 --> 00:10:49.440
have a model data to learn something and
 

00:10:49.440 --> 00:10:51.829
have a model data to learn something and
transfer that to this new problem but

00:10:51.829 --> 00:10:51.839
transfer that to this new problem but
 

00:10:51.839 --> 00:10:54.320
transfer that to this new problem but
not eat our learning is just more rare

00:10:54.320 --> 00:10:54.330
not eat our learning is just more rare
 

00:10:54.330 --> 00:10:55.880
not eat our learning is just more rare
that you have a huge set of thoughts you

00:10:55.880 --> 00:10:55.890
that you have a huge set of thoughts you
 

00:10:55.890 --> 00:10:58.040
that you have a huge set of thoughts you
want to use you want to do well on using

00:10:58.040 --> 00:10:58.050
want to use you want to do well on using
 

00:10:58.050 --> 00:10:59.390
want to use you want to do well on using
trim than all of those thoughts at the

00:10:59.390 --> 00:10:59.400
trim than all of those thoughts at the
 

00:10:59.400 --> 00:11:01.220
trim than all of those thoughts at the
same time maybe the one example is

00:11:01.220 --> 00:11:01.230
same time maybe the one example is
 

00:11:01.230 --> 00:11:02.670
same time maybe the one example is
computer vision

00:11:02.670 --> 00:11:02.680
computer vision
 

00:11:02.680 --> 00:11:05.060
computer vision
detection I see more applications

00:11:05.060 --> 00:11:05.070
detection I see more applications
 

00:11:05.070 --> 00:11:07.380
detection I see more applications
multi-thousand learning where one neural

00:11:07.380 --> 00:11:07.390
multi-thousand learning where one neural
 

00:11:07.390 --> 00:11:08.850
multi-thousand learning where one neural
network traded to take whole bunch of

00:11:08.850 --> 00:11:08.860
network traded to take whole bunch of
 

00:11:08.860 --> 00:11:10.440
network traded to take whole bunch of
objects at the same time works better

00:11:10.440 --> 00:11:10.450
objects at the same time works better
 

00:11:10.450 --> 00:11:11.940
objects at the same time works better
than different neural networks trained

00:11:11.940 --> 00:11:11.950
than different neural networks trained
 

00:11:11.950 --> 00:11:14.010
than different neural networks trained
separately detecting objects but I would

00:11:14.010 --> 00:11:14.020
separately detecting objects but I would
 

00:11:14.020 --> 00:11:16.440
separately detecting objects but I would
say that on average transfer learning is

00:11:16.440 --> 00:11:16.450
say that on average transfer learning is
 

00:11:16.450 --> 00:11:18.480
say that on average transfer learning is
used much more today than multitask

00:11:18.480 --> 00:11:18.490
used much more today than multitask
 

00:11:18.490 --> 00:11:20.639
used much more today than multitask
learning but both are useful tools to

00:11:20.639 --> 00:11:20.649
learning but both are useful tools to
 

00:11:20.649 --> 00:11:21.900
learning but both are useful tools to
have in your arsenal

00:11:21.900 --> 00:11:21.910
have in your arsenal
 

00:11:21.910 --> 00:11:25.139
have in your arsenal
so to summarize multicolor nning enables

00:11:25.139 --> 00:11:25.149
so to summarize multicolor nning enables
 

00:11:25.149 --> 00:11:26.760
so to summarize multicolor nning enables
you to Train one neural network to do

00:11:26.760 --> 00:11:26.770
you to Train one neural network to do
 

00:11:26.770 --> 00:11:29.040
you to Train one neural network to do
many tasks and this can give you better

00:11:29.040 --> 00:11:29.050
many tasks and this can give you better
 

00:11:29.050 --> 00:11:31.050
many tasks and this can give you better
performance then eager to do the task in

00:11:31.050 --> 00:11:31.060
performance then eager to do the task in
 

00:11:31.060 --> 00:11:34.170
performance then eager to do the task in
isolation now one note of caution in

00:11:34.170 --> 00:11:34.180
isolation now one note of caution in
 

00:11:34.180 --> 00:11:36.600
isolation now one note of caution in
practice I see that transfer learning is

00:11:36.600 --> 00:11:36.610
practice I see that transfer learning is
 

00:11:36.610 --> 00:11:38.940
practice I see that transfer learning is
used much more often than multitask

00:11:38.940 --> 00:11:38.950
used much more often than multitask
 

00:11:38.950 --> 00:11:40.740
used much more often than multitask
learning so if you see a lot of tasks

00:11:40.740 --> 00:11:40.750
learning so if you see a lot of tasks
 

00:11:40.750 --> 00:11:42.360
learning so if you see a lot of tasks
where if you want to solve a machine

00:11:42.360 --> 00:11:42.370
where if you want to solve a machine
 

00:11:42.370 --> 00:11:43.590
where if you want to solve a machine
learning problem but you have a

00:11:43.590 --> 00:11:43.600
learning problem but you have a
 

00:11:43.600 --> 00:11:45.990
learning problem but you have a
relatively small data set then transfer

00:11:45.990 --> 00:11:46.000
relatively small data set then transfer
 

00:11:46.000 --> 00:11:47.340
relatively small data set then transfer
learning can really help where if you

00:11:47.340 --> 00:11:47.350
learning can really help where if you
 

00:11:47.350 --> 00:11:49.290
learning can really help where if you
find a related problem but you have a

00:11:49.290 --> 00:11:49.300
find a related problem but you have a
 

00:11:49.300 --> 00:11:50.880
find a related problem but you have a
much bigger data set you can train in

00:11:50.880 --> 00:11:50.890
much bigger data set you can train in
 

00:11:50.890 --> 00:11:52.769
much bigger data set you can train in
your network from there and transfer it

00:11:52.769 --> 00:11:52.779
your network from there and transfer it
 

00:11:52.779 --> 00:11:54.480
your network from there and transfer it
to the problem we have very little data

00:11:54.480 --> 00:11:54.490
to the problem we have very little data
 

00:11:54.490 --> 00:11:56.670
to the problem we have very little data
so transfer learning is used a lot today

00:11:56.670 --> 00:11:56.680
so transfer learning is used a lot today
 

00:11:56.680 --> 00:11:59.280
so transfer learning is used a lot today
there are some applications of transfer

00:11:59.280 --> 00:11:59.290
there are some applications of transfer
 

00:11:59.290 --> 00:12:01.949
there are some applications of transfer
of multi Tod learning as well but multi

00:12:01.949 --> 00:12:01.959
of multi Tod learning as well but multi
 

00:12:01.959 --> 00:12:03.389
of multi Tod learning as well but multi
table learning I think is use much less

00:12:03.389 --> 00:12:03.399
table learning I think is use much less
 

00:12:03.399 --> 00:12:06.480
table learning I think is use much less
often than transfer learning and maybe

00:12:06.480 --> 00:12:06.490
often than transfer learning and maybe
 

00:12:06.490 --> 00:12:08.250
often than transfer learning and maybe
the one exception is computer vision

00:12:08.250 --> 00:12:08.260
the one exception is computer vision
 

00:12:08.260 --> 00:12:09.990
the one exception is computer vision
object detection where I do see a lot of

00:12:09.990 --> 00:12:10.000
object detection where I do see a lot of
 

00:12:10.000 --> 00:12:12.210
object detection where I do see a lot of
applications of training the network to

00:12:12.210 --> 00:12:12.220
applications of training the network to
 

00:12:12.220 --> 00:12:13.710
applications of training the network to
detect lots of different objects and

00:12:13.710 --> 00:12:13.720
detect lots of different objects and
 

00:12:13.720 --> 00:12:15.780
detect lots of different objects and
that works better than training separate

00:12:15.780 --> 00:12:15.790
that works better than training separate
 

00:12:15.790 --> 00:12:17.280
that works better than training separate
neural networks to detect individual

00:12:17.280 --> 00:12:17.290
neural networks to detect individual
 

00:12:17.290 --> 00:12:20.130
neural networks to detect individual
objects but on average I think that even

00:12:20.130 --> 00:12:20.140
objects but on average I think that even
 

00:12:20.140 --> 00:12:21.510
objects but on average I think that even
though transfer learning and multi-touch

00:12:21.510 --> 00:12:21.520
though transfer learning and multi-touch
 

00:12:21.520 --> 00:12:24.300
though transfer learning and multi-touch
learning often you are presented in a

00:12:24.300 --> 00:12:24.310
learning often you are presented in a
 

00:12:24.310 --> 00:12:26.519
learning often you are presented in a
similar way in practice I've seen a lot

00:12:26.519 --> 00:12:26.529
similar way in practice I've seen a lot
 

00:12:26.529 --> 00:12:27.930
similar way in practice I've seen a lot
more applications of transfer and

00:12:27.930 --> 00:12:27.940
more applications of transfer and
 

00:12:27.940 --> 00:12:30.269
more applications of transfer and
learning than a multitasking I think

00:12:30.269 --> 00:12:30.279
learning than a multitasking I think
 

00:12:30.279 --> 00:12:32.490
learning than a multitasking I think
because often is just difficult to set

00:12:32.490 --> 00:12:32.500
because often is just difficult to set
 

00:12:32.500 --> 00:12:34.290
because often is just difficult to set
up what defines so many different tasks

00:12:34.290 --> 00:12:34.300
up what defines so many different tasks
 

00:12:34.300 --> 00:12:35.579
up what defines so many different tasks
that you would actually want to train a

00:12:35.579 --> 00:12:35.589
that you would actually want to train a
 

00:12:35.589 --> 00:12:37.500
that you would actually want to train a
single neural network for again with

00:12:37.500 --> 00:12:37.510
single neural network for again with
 

00:12:37.510 --> 00:12:39.240
single neural network for again with
some sort of computer vision object

00:12:39.240 --> 00:12:39.250
some sort of computer vision object
 

00:12:39.250 --> 00:12:41.310
some sort of computer vision object
detection example of being the most

00:12:41.310 --> 00:12:41.320
detection example of being the most
 

00:12:41.320 --> 00:12:43.680
detection example of being the most
notable exception so that's it for

00:12:43.680 --> 00:12:43.690
notable exception so that's it for
 

00:12:43.690 --> 00:12:46.230
notable exception so that's it for
multitasking or much not learning and

00:12:46.230 --> 00:12:46.240
multitasking or much not learning and
 

00:12:46.240 --> 00:12:48.000
multitasking or much not learning and
transfer learning are both important

00:12:48.000 --> 00:12:48.010
transfer learning are both important
 

00:12:48.010 --> 00:12:50.030
transfer learning are both important
tool to have in your tool bag and

00:12:50.030 --> 00:12:50.040
tool to have in your tool bag and
 

00:12:50.040 --> 00:12:52.800
tool to have in your tool bag and
finally I'd like to move on to discuss

00:12:52.800 --> 00:12:52.810
finally I'd like to move on to discuss
 

00:12:52.810 --> 00:12:55.170
finally I'd like to move on to discuss
end-to-end deep learning so let's go

00:12:55.170 --> 00:12:55.180
end-to-end deep learning so let's go
 

00:12:55.180 --> 00:12:56.610
end-to-end deep learning so let's go
onto the next video to discuss

00:12:56.610 --> 00:12:56.620
onto the next video to discuss
 

00:12:56.620 --> 00:12:59.670
onto the next video to discuss
end-to-end learning

