WEBVTT
Kind: captions
Language: en

00:00:01.700 --> 00:00:04.670
 
hey guys welcome to our talk on Android

00:00:04.670 --> 00:00:04.680
hey guys welcome to our talk on Android
 

00:00:04.680 --> 00:00:06.740
hey guys welcome to our talk on Android
testing api's and today we're going to

00:00:06.740 --> 00:00:06.750
testing api's and today we're going to
 

00:00:06.750 --> 00:00:08.660
testing api's and today we're going to
show you how you can write higher

00:00:08.660 --> 00:00:08.670
show you how you can write higher
 

00:00:08.670 --> 00:00:11.810
show you how you can write higher
quality apps using automated tests my

00:00:11.810 --> 00:00:11.820
quality apps using automated tests my
 

00:00:11.820 --> 00:00:14.240
quality apps using automated tests my
name is Jeff Allen sneh i'm jose alpha

00:00:14.240 --> 00:00:14.250
name is Jeff Allen sneh i'm jose alpha
 

00:00:14.250 --> 00:00:16.609
name is Jeff Allen sneh i'm jose alpha
raka and i'm yun felix mark I'd and via

00:00:16.609 --> 00:00:16.619
raka and i'm yun felix mark I'd and via
 

00:00:16.619 --> 00:00:19.040
raka and i'm yun felix mark I'd and via
developer programs engineer on the

00:00:19.040 --> 00:00:19.050
developer programs engineer on the
 

00:00:19.050 --> 00:00:20.779
developer programs engineer on the
developer platform team here at Google

00:00:20.779 --> 00:00:20.789
developer platform team here at Google
 

00:00:20.789 --> 00:00:22.429
developer platform team here at Google
and you might have seen some of the

00:00:22.429 --> 00:00:22.439
and you might have seen some of the
 

00:00:22.439 --> 00:00:23.810
and you might have seen some of the
sample coding some for libraries that

00:00:23.810 --> 00:00:23.820
sample coding some for libraries that
 

00:00:23.820 --> 00:00:25.670
sample coding some for libraries that
we've been working on in particular the

00:00:25.670 --> 00:00:25.680
we've been working on in particular the
 

00:00:25.680 --> 00:00:27.140
we've been working on in particular the
N draw testing support library is

00:00:27.140 --> 00:00:27.150
N draw testing support library is
 

00:00:27.150 --> 00:00:28.279
N draw testing support library is
something that they've worked on and

00:00:28.279 --> 00:00:28.289
something that they've worked on and
 

00:00:28.289 --> 00:00:30.529
something that they've worked on and
with that our lee ki-woo stefan who's

00:00:30.529 --> 00:00:30.539
with that our lee ki-woo stefan who's
 

00:00:30.539 --> 00:00:31.910
with that our lee ki-woo stefan who's
going to talk with more about how

00:00:31.910 --> 00:00:31.920
going to talk with more about how
 

00:00:31.920 --> 00:00:33.709
going to talk with more about how
Android testing has evolved over the

00:00:33.709 --> 00:00:33.719
Android testing has evolved over the
 

00:00:33.719 --> 00:00:37.970
Android testing has evolved over the
last few years thank you guys so almost

00:00:37.970 --> 00:00:37.980
last few years thank you guys so almost
 

00:00:37.980 --> 00:00:39.799
last few years thank you guys so almost
two years ago when we started thinking

00:00:39.799 --> 00:00:39.809
two years ago when we started thinking
 

00:00:39.809 --> 00:00:41.780
two years ago when we started thinking
about how we can make developers more

00:00:41.780 --> 00:00:41.790
about how we can make developers more
 

00:00:41.790 --> 00:00:44.600
about how we can make developers more
productive how can we enable you guys to

00:00:44.600 --> 00:00:44.610
productive how can we enable you guys to
 

00:00:44.610 --> 00:00:46.970
productive how can we enable you guys to
write higher-quality apps one thing that

00:00:46.970 --> 00:00:46.980
write higher-quality apps one thing that
 

00:00:46.980 --> 00:00:49.790
write higher-quality apps one thing that
repeatedly came up was automated testing

00:00:49.790 --> 00:00:49.800
repeatedly came up was automated testing
 

00:00:49.800 --> 00:00:52.220
repeatedly came up was automated testing
but if you look at the testing ap is

00:00:52.220 --> 00:00:52.230
but if you look at the testing ap is
 

00:00:52.230 --> 00:00:55.369
but if you look at the testing ap is
what you will find is some of them have

00:00:55.369 --> 00:00:55.379
what you will find is some of them have
 

00:00:55.379 --> 00:00:57.709
what you will find is some of them have
changed in API level 3 which was cupcake

00:00:57.709 --> 00:00:57.719
changed in API level 3 which was cupcake
 

00:00:57.719 --> 00:00:59.540
changed in API level 3 which was cupcake
and most of them have been around since

00:00:59.540 --> 00:00:59.550
and most of them have been around since
 

00:00:59.550 --> 00:01:03.920
and most of them have been around since
API level 1 so what that means is in the

00:01:03.920 --> 00:01:03.930
API level 1 so what that means is in the
 

00:01:03.930 --> 00:01:07.039
API level 1 so what that means is in the
meantime Android has evolved a lot right

00:01:07.039 --> 00:01:07.049
meantime Android has evolved a lot right
 

00:01:07.049 --> 00:01:08.810
meantime Android has evolved a lot right
and I'm I'm so proud of what we've

00:01:08.810 --> 00:01:08.820
and I'm I'm so proud of what we've
 

00:01:08.820 --> 00:01:10.850
and I'm I'm so proud of what we've
achieved in the last five or six years

00:01:10.850 --> 00:01:10.860
achieved in the last five or six years
 

00:01:10.860 --> 00:01:12.560
achieved in the last five or six years
in Android and I'm pretty sure everyone

00:01:12.560 --> 00:01:12.570
in Android and I'm pretty sure everyone
 

00:01:12.570 --> 00:01:15.410
in Android and I'm pretty sure everyone
in this room is but we haven't evolved

00:01:15.410 --> 00:01:15.420
in this room is but we haven't evolved
 

00:01:15.420 --> 00:01:17.330
in this room is but we haven't evolved
in a testing space and that's what we

00:01:17.330 --> 00:01:17.340
in a testing space and that's what we
 

00:01:17.340 --> 00:01:19.010
in a testing space and that's what we
wanted to change we wanted to make

00:01:19.010 --> 00:01:19.020
wanted to change we wanted to make
 

00:01:19.020 --> 00:01:21.770
wanted to change we wanted to make
testing easier and we wanted to have a

00:01:21.770 --> 00:01:21.780
testing easier and we wanted to have a
 

00:01:21.780 --> 00:01:24.530
testing easier and we wanted to have a
better testing experience across the

00:01:24.530 --> 00:01:24.540
better testing experience across the
 

00:01:24.540 --> 00:01:27.830
better testing experience across the
stack so since then we've made a lot of

00:01:27.830 --> 00:01:27.840
stack so since then we've made a lot of
 

00:01:27.840 --> 00:01:30.649
stack so since then we've made a lot of
progress on many levels of the stack and

00:01:30.649 --> 00:01:30.659
progress on many levels of the stack and
 

00:01:30.659 --> 00:01:33.440
progress on many levels of the stack and
we've created a new suite of tools and

00:01:33.440 --> 00:01:33.450
we've created a new suite of tools and
 

00:01:33.450 --> 00:01:35.660
we've created a new suite of tools and
frameworks to enable a better testing

00:01:35.660 --> 00:01:35.670
frameworks to enable a better testing
 

00:01:35.670 --> 00:01:38.120
frameworks to enable a better testing
experience and make it even fun to write

00:01:38.120 --> 00:01:38.130
experience and make it even fun to write
 

00:01:38.130 --> 00:01:40.490
experience and make it even fun to write
tests so we have Android studio in

00:01:40.490 --> 00:01:40.500
tests so we have Android studio in
 

00:01:40.500 --> 00:01:42.380
tests so we have Android studio in
Gradle which added amazing new features

00:01:42.380 --> 00:01:42.390
Gradle which added amazing new features
 

00:01:42.390 --> 00:01:45.139
Gradle which added amazing new features
like the new unit test report which

00:01:45.139 --> 00:01:45.149
like the new unit test report which
 

00:01:45.149 --> 00:01:47.210
like the new unit test report which
allows for faster development cycles and

00:01:47.210 --> 00:01:47.220
allows for faster development cycles and
 

00:01:47.220 --> 00:01:48.380
allows for faster development cycles and
makes you more productive

00:01:48.380 --> 00:01:48.390
makes you more productive
 

00:01:48.390 --> 00:01:51.370
makes you more productive
we have new ways to write and run tests

00:01:51.370 --> 00:01:51.380
we have new ways to write and run tests
 

00:01:51.380 --> 00:01:54.499
we have new ways to write and run tests
and we also now have compelling ways to

00:01:54.499 --> 00:01:54.509
and we also now have compelling ways to
 

00:01:54.509 --> 00:01:56.690
and we also now have compelling ways to
display test results and code coverage

00:01:56.690 --> 00:01:56.700
display test results and code coverage
 

00:01:56.700 --> 00:01:59.780
display test results and code coverage
reports in Android studio and now with

00:01:59.780 --> 00:01:59.790
reports in Android studio and now with
 

00:01:59.790 --> 00:02:02.899
reports in Android studio and now with
Android studio 2.0 you can even refactor

00:02:02.899 --> 00:02:02.909
Android studio 2.0 you can even refactor
 

00:02:02.909 --> 00:02:05.749
Android studio 2.0 you can even refactor
across unit and instrumentation tests

00:02:05.749 --> 00:02:05.759
across unit and instrumentation tests
 

00:02:05.759 --> 00:02:08.059
across unit and instrumentation tests
which is amazing but we went even

00:02:08.059 --> 00:02:08.069
which is amazing but we went even
 

00:02:08.069 --> 00:02:10.940
which is amazing but we went even
further so we ended up creating a full

00:02:10.940 --> 00:02:10.950
further so we ended up creating a full
 

00:02:10.950 --> 00:02:13.170
further so we ended up creating a full
support library for testing code

00:02:13.170 --> 00:02:13.180
support library for testing code
 

00:02:13.180 --> 00:02:14.970
support library for testing code
the Android testing support library this

00:02:14.970 --> 00:02:14.980
the Android testing support library this
 

00:02:14.980 --> 00:02:17.699
the Android testing support library this
library contains all of our testing

00:02:17.699 --> 00:02:17.709
library contains all of our testing
 

00:02:17.709 --> 00:02:21.000
library contains all of our testing
api's and you can just apply it to your

00:02:21.000 --> 00:02:21.010
api's and you can just apply it to your
 

00:02:21.010 --> 00:02:23.610
api's and you can just apply it to your
project and get easily started with

00:02:23.610 --> 00:02:23.620
project and get easily started with
 

00:02:23.620 --> 00:02:26.640
project and get easily started with
testing but even more importantly this

00:02:26.640 --> 00:02:26.650
testing but even more importantly this
 

00:02:26.650 --> 00:02:28.530
testing but even more importantly this
libraries unbundled from the platform

00:02:28.530 --> 00:02:28.540
libraries unbundled from the platform
 

00:02:28.540 --> 00:02:31.080
libraries unbundled from the platform
which means we can update it at any time

00:02:31.080 --> 00:02:31.090
which means we can update it at any time
 

00:02:31.090 --> 00:02:34.530
which means we can update it at any time
and we can iterate faster and we can fix

00:02:34.530 --> 00:02:34.540
and we can iterate faster and we can fix
 

00:02:34.540 --> 00:02:36.690
and we can iterate faster and we can fix
bugs more quickly which was a problem

00:02:36.690 --> 00:02:36.700
bugs more quickly which was a problem
 

00:02:36.700 --> 00:02:41.160
bugs more quickly which was a problem
before on top of that we also created a

00:02:41.160 --> 00:02:41.170
before on top of that we also created a
 

00:02:41.170 --> 00:02:43.920
before on top of that we also created a
new testing library called espresso and

00:02:43.920 --> 00:02:43.930
new testing library called espresso and
 

00:02:43.930 --> 00:02:45.929
new testing library called espresso and
this address is actually one of the

00:02:45.929 --> 00:02:45.939
this address is actually one of the
 

00:02:45.939 --> 00:02:47.250
this address is actually one of the
biggest pain points that we had in

00:02:47.250 --> 00:02:47.260
biggest pain points that we had in
 

00:02:47.260 --> 00:02:48.839
biggest pain points that we had in
Android testing for a while which is UI

00:02:48.839 --> 00:02:48.849
Android testing for a while which is UI
 

00:02:48.849 --> 00:02:51.990
Android testing for a while which is UI
testing and espresso you will see that

00:02:51.990 --> 00:02:52.000
testing and espresso you will see that
 

00:02:52.000 --> 00:02:54.089
testing and espresso you will see that
if you start using it has a really nice

00:02:54.089 --> 00:02:54.099
if you start using it has a really nice
 

00:02:54.099 --> 00:02:57.809
if you start using it has a really nice
beautiful concise and fluent API which

00:02:57.809 --> 00:02:57.819
beautiful concise and fluent API which
 

00:02:57.819 --> 00:03:01.140
beautiful concise and fluent API which
makes for frictionless testing and with

00:03:01.140 --> 00:03:01.150
makes for frictionless testing and with
 

00:03:01.150 --> 00:03:03.270
makes for frictionless testing and with
that I'm going to hand back to jf he's

00:03:03.270 --> 00:03:03.280
that I'm going to hand back to jf he's
 

00:03:03.280 --> 00:03:05.459
that I'm going to hand back to jf he's
going to talk about the codelab app that

00:03:05.459 --> 00:03:05.469
going to talk about the codelab app that
 

00:03:05.469 --> 00:03:07.979
going to talk about the codelab app that
we've built to show you how you can use

00:03:07.979 --> 00:03:07.989
we've built to show you how you can use
 

00:03:07.989 --> 00:03:10.080
we've built to show you how you can use
our testing API as an action in your

00:03:10.080 --> 00:03:10.090
our testing API as an action in your
 

00:03:10.090 --> 00:03:13.800
our testing API as an action in your
project cool Thank You Stefan so the app

00:03:13.800 --> 00:03:13.810
project cool Thank You Stefan so the app
 

00:03:13.810 --> 00:03:16.199
project cool Thank You Stefan so the app
I'm talking about here is actually part

00:03:16.199 --> 00:03:16.209
I'm talking about here is actually part
 

00:03:16.209 --> 00:03:17.789
I'm talking about here is actually part
of a code lab that we are going to be

00:03:17.789 --> 00:03:17.799
of a code lab that we are going to be
 

00:03:17.799 --> 00:03:18.930
of a code lab that we are going to be
referring to throughout this

00:03:18.930 --> 00:03:18.940
referring to throughout this
 

00:03:18.940 --> 00:03:20.670
referring to throughout this
presentation at the end I have some

00:03:20.670 --> 00:03:20.680
presentation at the end I have some
 

00:03:20.680 --> 00:03:22.020
presentation at the end I have some
links and resources you can actually

00:03:22.020 --> 00:03:22.030
links and resources you can actually
 

00:03:22.030 --> 00:03:23.369
links and resources you can actually
check it out and see exactly what we

00:03:23.369 --> 00:03:23.379
check it out and see exactly what we
 

00:03:23.379 --> 00:03:25.979
check it out and see exactly what we
have done so the app we wanted to build

00:03:25.979 --> 00:03:25.989
have done so the app we wanted to build
 

00:03:25.989 --> 00:03:28.409
have done so the app we wanted to build
was meant to be a you know must meant to

00:03:28.409 --> 00:03:28.419
was meant to be a you know must meant to
 

00:03:28.419 --> 00:03:30.449
was meant to be a you know must meant to
showcase the best practice for testing

00:03:30.449 --> 00:03:30.459
showcase the best practice for testing
 

00:03:30.459 --> 00:03:32.250
showcase the best practice for testing
today you know how you care how you

00:03:32.250 --> 00:03:32.260
today you know how you care how you
 

00:03:32.260 --> 00:03:33.719
today you know how you care how you
should be using testing in your android

00:03:33.719 --> 00:03:33.729
should be using testing in your android
 

00:03:33.729 --> 00:03:35.729
should be using testing in your android
application so what we have built is a

00:03:35.729 --> 00:03:35.739
application so what we have built is a
 

00:03:35.739 --> 00:03:38.339
application so what we have built is a
very simple very standard notetaking

00:03:38.339 --> 00:03:38.349
very simple very standard notetaking
 

00:03:38.349 --> 00:03:41.129
very simple very standard notetaking
application you can view a list of the

00:03:41.129 --> 00:03:41.139
application you can view a list of the
 

00:03:41.139 --> 00:03:42.780
application you can view a list of the
notes that you have in your app you can

00:03:42.780 --> 00:03:42.790
notes that you have in your app you can
 

00:03:42.790 --> 00:03:44.249
notes that you have in your app you can
add a new note which means you can also

00:03:44.249 --> 00:03:44.259
add a new note which means you can also
 

00:03:44.259 --> 00:03:45.960
add a new note which means you can also
take a photo attach it to your note you

00:03:45.960 --> 00:03:45.970
take a photo attach it to your note you
 

00:03:45.970 --> 00:03:48.390
take a photo attach it to your note you
can click on a node and it opens up and

00:03:48.390 --> 00:03:48.400
can click on a node and it opens up and
 

00:03:48.400 --> 00:03:50.280
can click on a node and it opens up and
you can see it's full content and you

00:03:50.280 --> 00:03:50.290
you can see it's full content and you
 

00:03:50.290 --> 00:03:51.659
you can see it's full content and you
have some navigation in there as well

00:03:51.659 --> 00:03:51.669
have some navigation in there as well
 

00:03:51.669 --> 00:03:54.780
have some navigation in there as well
and as you can see this is very much a

00:03:54.780 --> 00:03:54.790
and as you can see this is very much a
 

00:03:54.790 --> 00:03:56.640
and as you can see this is very much a
stock standard Android application

00:03:56.640 --> 00:03:56.650
stock standard Android application
 

00:03:56.650 --> 00:03:58.469
stock standard Android application
probably quite similar to the way you've

00:03:58.469 --> 00:03:58.479
probably quite similar to the way you've
 

00:03:58.479 --> 00:04:00.149
probably quite similar to the way you've
built an Android app before you're using

00:04:00.149 --> 00:04:00.159
built an Android app before you're using
 

00:04:00.159 --> 00:04:02.099
built an Android app before you're using
a recycler view to display the list of

00:04:02.099 --> 00:04:02.109
a recycler view to display the list of
 

00:04:02.109 --> 00:04:04.439
a recycler view to display the list of
notes we're using a system intent to

00:04:04.439 --> 00:04:04.449
notes we're using a system intent to
 

00:04:04.449 --> 00:04:06.330
notes we're using a system intent to
open the camera app to take a to take a

00:04:06.330 --> 00:04:06.340
open the camera app to take a to take a
 

00:04:06.340 --> 00:04:07.589
open the camera app to take a to take a
photo of using the system camera

00:04:07.589 --> 00:04:07.599
photo of using the system camera
 

00:04:07.599 --> 00:04:08.159
photo of using the system camera
application

00:04:08.159 --> 00:04:08.169
application
 

00:04:08.169 --> 00:04:10.770
application
and we have a and we have a navigation

00:04:10.770 --> 00:04:10.780
and we have a and we have a navigation
 

00:04:10.780 --> 00:04:12.689
and we have a and we have a navigation
drawer in there as well with the menu

00:04:12.689 --> 00:04:12.699
drawer in there as well with the menu
 

00:04:12.699 --> 00:04:15.240
drawer in there as well with the menu
options just remember the key here was

00:04:15.240 --> 00:04:15.250
options just remember the key here was
 

00:04:15.250 --> 00:04:17.849
options just remember the key here was
to create an application that shows you

00:04:17.849 --> 00:04:17.859
to create an application that shows you
 

00:04:17.859 --> 00:04:19.560
to create an application that shows you
how you can you know show you the best

00:04:19.560 --> 00:04:19.570
how you can you know show you the best
 

00:04:19.570 --> 00:04:22.140
how you can you know show you the best
practices friend we're testing today so

00:04:22.140 --> 00:04:22.150
practices friend we're testing today so
 

00:04:22.150 --> 00:04:23.670
practices friend we're testing today so
as part of that do you have mirror

00:04:23.670 --> 00:04:23.680
as part of that do you have mirror
 

00:04:23.680 --> 00:04:25.589
as part of that do you have mirror
thinking very carefully about the

00:04:25.589 --> 00:04:25.599
thinking very carefully about the
 

00:04:25.599 --> 00:04:27.060
thinking very carefully about the
architecture that you use for it

00:04:27.060 --> 00:04:27.070
architecture that you use for it
 

00:04:27.070 --> 00:04:30.450
architecture that you use for it
occasion let me be very clear here MVP

00:04:30.450 --> 00:04:30.460
occasion let me be very clear here MVP
 

00:04:30.460 --> 00:04:32.370
occasion let me be very clear here MVP
is mana bleep reside architecture

00:04:32.370 --> 00:04:32.380
is mana bleep reside architecture
 

00:04:32.380 --> 00:04:34.560
is mana bleep reside architecture
obviously but there are many other great

00:04:34.560 --> 00:04:34.570
obviously but there are many other great
 

00:04:34.570 --> 00:04:36.300
obviously but there are many other great
architectures out there and it really

00:04:36.300 --> 00:04:36.310
architectures out there and it really
 

00:04:36.310 --> 00:04:38.340
architectures out there and it really
depends on your use cases and your

00:04:38.340 --> 00:04:38.350
depends on your use cases and your
 

00:04:38.350 --> 00:04:40.020
depends on your use cases and your
application to select something that

00:04:40.020 --> 00:04:40.030
application to select something that
 

00:04:40.030 --> 00:04:42.540
application to select something that
works for you just remember the key part

00:04:42.540 --> 00:04:42.550
works for you just remember the key part
 

00:04:42.550 --> 00:04:45.300
works for you just remember the key part
for any architecture is that you can

00:04:45.300 --> 00:04:45.310
for any architecture is that you can
 

00:04:45.310 --> 00:04:46.980
for any architecture is that you can
separate the different parts of

00:04:46.980 --> 00:04:46.990
separate the different parts of
 

00:04:46.990 --> 00:04:48.960
separate the different parts of
different components of your application

00:04:48.960 --> 00:04:48.970
different components of your application
 

00:04:48.970 --> 00:04:50.640
different components of your application
from another so you can test them

00:04:50.640 --> 00:04:50.650
from another so you can test them
 

00:04:50.650 --> 00:04:52.770
from another so you can test them
independently and you can maintain them

00:04:52.770 --> 00:04:52.780
independently and you can maintain them
 

00:04:52.780 --> 00:04:55.800
independently and you can maintain them
independently as well so in our case for

00:04:55.800 --> 00:04:55.810
independently as well so in our case for
 

00:04:55.810 --> 00:04:57.690
independently as well so in our case for
our application that was the Model View

00:04:57.690 --> 00:04:57.700
our application that was the Model View
 

00:04:57.700 --> 00:04:59.700
our application that was the Model View
present architecture and the way this

00:04:59.700 --> 00:04:59.710
present architecture and the way this
 

00:04:59.710 --> 00:05:02.010
present architecture and the way this
works is that we have the data storage

00:05:02.010 --> 00:05:02.020
works is that we have the data storage
 

00:05:02.020 --> 00:05:04.560
works is that we have the data storage
the list of nodes at the model we have a

00:05:04.560 --> 00:05:04.570
the list of nodes at the model we have a
 

00:05:04.570 --> 00:05:06.210
the list of nodes at the model we have a
view this is where the actual Android

00:05:06.210 --> 00:05:06.220
view this is where the actual Android
 

00:05:06.220 --> 00:05:07.950
view this is where the actual Android
magic happens that's the V deal with

00:05:07.950 --> 00:05:07.960
magic happens that's the V deal with
 

00:05:07.960 --> 00:05:09.660
magic happens that's the V deal with
recycler view and display the actual

00:05:09.660 --> 00:05:09.670
recycler view and display the actual
 

00:05:09.670 --> 00:05:12.120
recycler view and display the actual
nodes so for example if you want to load

00:05:12.120 --> 00:05:12.130
nodes so for example if you want to load
 

00:05:12.130 --> 00:05:14.010
nodes so for example if you want to load
in a list of nodes and display them on

00:05:14.010 --> 00:05:14.020
in a list of nodes and display them on
 

00:05:14.020 --> 00:05:15.960
in a list of nodes and display them on
the screen the presenter talks to the

00:05:15.960 --> 00:05:15.970
the screen the presenter talks to the
 

00:05:15.970 --> 00:05:18.240
the screen the presenter talks to the
model loads in the list of nodes and

00:05:18.240 --> 00:05:18.250
model loads in the list of nodes and
 

00:05:18.250 --> 00:05:20.130
model loads in the list of nodes and
tells the view to display it and then

00:05:20.130 --> 00:05:20.140
tells the view to display it and then
 

00:05:20.140 --> 00:05:22.110
tells the view to display it and then
the view talk to the cycle of view and

00:05:22.110 --> 00:05:22.120
the view talk to the cycle of view and
 

00:05:22.120 --> 00:05:24.450
the view talk to the cycle of view and
then displays it so just remember the

00:05:24.450 --> 00:05:24.460
then displays it so just remember the
 

00:05:24.460 --> 00:05:26.430
then displays it so just remember the
key part here is to separate the

00:05:26.430 --> 00:05:26.440
key part here is to separate the
 

00:05:26.440 --> 00:05:28.140
key part here is to separate the
different areas and different components

00:05:28.140 --> 00:05:28.150
different areas and different components
 

00:05:28.150 --> 00:05:29.580
different areas and different components
of the application and it makes it

00:05:29.580 --> 00:05:29.590
of the application and it makes it
 

00:05:29.590 --> 00:05:30.960
of the application and it makes it
really easy and really useful for

00:05:30.960 --> 00:05:30.970
really easy and really useful for
 

00:05:30.970 --> 00:05:32.820
really easy and really useful for
testing now we're for say coming up next

00:05:32.820 --> 00:05:32.830
testing now we're for say coming up next
 

00:05:32.830 --> 00:05:34.650
testing now we're for say coming up next
telling with more about testing and

00:05:34.650 --> 00:05:34.660
telling with more about testing and
 

00:05:34.660 --> 00:05:38.520
telling with more about testing and
independent components thank you yes

00:05:38.520 --> 00:05:38.530
independent components thank you yes
 

00:05:38.530 --> 00:05:43.350
independent components thank you yes
so jf mentioned testing in isolation in

00:05:43.350 --> 00:05:43.360
so jf mentioned testing in isolation in
 

00:05:43.360 --> 00:05:45.780
so jf mentioned testing in isolation in
order to test in isolation you need to

00:05:45.780 --> 00:05:45.790
order to test in isolation you need to
 

00:05:45.790 --> 00:05:49.070
order to test in isolation you need to
be able to create a hermetic environment

00:05:49.070 --> 00:05:49.080
be able to create a hermetic environment
 

00:05:49.080 --> 00:05:52.770
be able to create a hermetic environment
so before talking about the types of

00:05:52.770 --> 00:05:52.780
so before talking about the types of
 

00:05:52.780 --> 00:05:55.790
so before talking about the types of
tests let's talk about hermetic testing

00:05:55.790 --> 00:05:55.800
tests let's talk about hermetic testing
 

00:05:55.800 --> 00:05:58.740
tests let's talk about hermetic testing
why do we need hermetic testing because

00:05:58.740 --> 00:05:58.750
why do we need hermetic testing because
 

00:05:58.750 --> 00:06:00.660
why do we need hermetic testing because
there's something worse than having no

00:06:00.660 --> 00:06:00.670
there's something worse than having no
 

00:06:00.670 --> 00:06:07.200
there's something worse than having no
tests that's having flaky tests I've

00:06:07.200 --> 00:06:07.210
tests that's having flaky tests I've
 

00:06:07.210 --> 00:06:08.580
tests that's having flaky tests I've
seen this lie so many times I do

00:06:08.580 --> 00:06:08.590
seen this lie so many times I do
 

00:06:08.590 --> 00:06:13.230
seen this lie so many times I do
remember was finding a test is flaky

00:06:13.230 --> 00:06:13.240
remember was finding a test is flaky
 

00:06:13.240 --> 00:06:16.020
remember was finding a test is flaky
when it fails sometimes so if a test

00:06:16.020 --> 00:06:16.030
when it fails sometimes so if a test
 

00:06:16.030 --> 00:06:19.740
when it fails sometimes so if a test
fails just 1% of the time you run it you

00:06:19.740 --> 00:06:19.750
fails just 1% of the time you run it you
 

00:06:19.750 --> 00:06:21.930
fails just 1% of the time you run it you
will submit your code so make your test

00:06:21.930 --> 00:06:21.940
will submit your code so make your test
 

00:06:21.940 --> 00:06:24.210
will submit your code so make your test
and in 3 weeks you'll get a call or you

00:06:24.210 --> 00:06:24.220
and in 3 weeks you'll get a call or you
 

00:06:24.220 --> 00:06:26.070
and in 3 weeks you'll get a call or you
get an email saying something went wrong

00:06:26.070 --> 00:06:26.080
get an email saying something went wrong
 

00:06:26.080 --> 00:06:27.800
get an email saying something went wrong
because this test failed

00:06:27.800 --> 00:06:27.810
because this test failed
 

00:06:27.810 --> 00:06:30.480
because this test failed
so you'll start your investigation you

00:06:30.480 --> 00:06:30.490
so you'll start your investigation you
 

00:06:30.490 --> 00:06:33.480
so you'll start your investigation you
login into your Jenkins instance if you

00:06:33.480 --> 00:06:33.490
login into your Jenkins instance if you
 

00:06:33.490 --> 00:06:36.930
login into your Jenkins instance if you
have one and after 15 minutes you said

00:06:36.930 --> 00:06:36.940
have one and after 15 minutes you said
 

00:06:36.940 --> 00:06:39.750
have one and after 15 minutes you said
you will say the famous last words

00:06:39.750 --> 00:06:39.760
you will say the famous last words
 

00:06:39.760 --> 00:06:40.950
you will say the famous last words
it's probably

00:06:40.950 --> 00:06:40.960
it's probably
 

00:06:40.960 --> 00:06:44.249
it's probably
just a flaky test that's something that

00:06:44.249 --> 00:06:44.259
just a flaky test that's something that
 

00:06:44.259 --> 00:06:45.990
just a flaky test that's something that
should that you should never have to say

00:06:45.990 --> 00:06:46.000
should that you should never have to say
 

00:06:46.000 --> 00:06:51.749
should that you should never have to say
or hear so in this code lab in this

00:06:51.749 --> 00:06:51.759
or hear so in this code lab in this
 

00:06:51.759 --> 00:06:55.529
or hear so in this code lab in this
project we decided to what we had an

00:06:55.529 --> 00:06:55.539
project we decided to what we had an
 

00:06:55.539 --> 00:06:58.110
project we decided to what we had an
objective to reduce flakiness as much as

00:06:58.110 --> 00:06:58.120
objective to reduce flakiness as much as
 

00:06:58.120 --> 00:07:01.200
objective to reduce flakiness as much as
possible so the first thing we did was

00:07:01.200 --> 00:07:01.210
possible so the first thing we did was
 

00:07:01.210 --> 00:07:03.890
possible so the first thing we did was
to isolate from external dependencies

00:07:03.890 --> 00:07:03.900
to isolate from external dependencies
 

00:07:03.900 --> 00:07:06.570
to isolate from external dependencies
external dependencies are one of the

00:07:06.570 --> 00:07:06.580
external dependencies are one of the
 

00:07:06.580 --> 00:07:09.029
external dependencies are one of the
most important sources of flakiness

00:07:09.029 --> 00:07:09.039
most important sources of flakiness
 

00:07:09.039 --> 00:07:11.360
most important sources of flakiness
especially the network for example

00:07:11.360 --> 00:07:11.370
especially the network for example
 

00:07:11.370 --> 00:07:15.600
especially the network for example
because the network can can fail in

00:07:15.600 --> 00:07:15.610
because the network can can fail in
 

00:07:15.610 --> 00:07:17.520
because the network can can fail in
network goals when you talk to your

00:07:17.520 --> 00:07:17.530
network goals when you talk to your
 

00:07:17.530 --> 00:07:20.730
network goals when you talk to your
back-end API can fail in many steps your

00:07:20.730 --> 00:07:20.740
back-end API can fail in many steps your
 

00:07:20.740 --> 00:07:24.300
back-end API can fail in many steps your
Wi-Fi your ISP connection the server has

00:07:24.300 --> 00:07:24.310
Wi-Fi your ISP connection the server has
 

00:07:24.310 --> 00:07:28.800
Wi-Fi your ISP connection the server has
to be on and working but also all the

00:07:28.800 --> 00:07:28.810
to be on and working but also all the
 

00:07:28.810 --> 00:07:30.839
to be on and working but also all the
external dependencies to our code like a

00:07:30.839 --> 00:07:30.849
external dependencies to our code like a
 

00:07:30.849 --> 00:07:34.980
external dependencies to our code like a
storage device all the devices sensors

00:07:34.980 --> 00:07:34.990
storage device all the devices sensors
 

00:07:34.990 --> 00:07:40.350
storage device all the devices sensors
the camera etc so what we're gonna what

00:07:40.350 --> 00:07:40.360
the camera etc so what we're gonna what
 

00:07:40.360 --> 00:07:41.969
the camera etc so what we're gonna what
we're going to do is replace the

00:07:41.969 --> 00:07:41.979
we're going to do is replace the
 

00:07:41.979 --> 00:07:44.540
we're going to do is replace the
components that talk to these external

00:07:44.540 --> 00:07:44.550
components that talk to these external
 

00:07:44.550 --> 00:07:47.310
components that talk to these external
dependencies weak with fake

00:07:47.310 --> 00:07:47.320
dependencies weak with fake
 

00:07:47.320 --> 00:07:49.379
dependencies weak with fake
implementations that are going to

00:07:49.379 --> 00:07:49.389
implementations that are going to
 

00:07:49.389 --> 00:07:52.620
implementations that are going to
intercept that and return fake data

00:07:52.620 --> 00:07:52.630
intercept that and return fake data
 

00:07:52.630 --> 00:07:55.350
intercept that and return fake data
immediately for that we could use

00:07:55.350 --> 00:07:55.360
immediately for that we could use
 

00:07:55.360 --> 00:07:57.420
immediately for that we could use
something like dependency injection

00:07:57.420 --> 00:07:57.430
something like dependency injection
 

00:07:57.430 --> 00:07:59.999
something like dependency injection
framework like dagger or dagger tube but

00:07:59.999 --> 00:08:00.009
framework like dagger or dagger tube but
 

00:08:00.009 --> 00:08:02.570
framework like dagger or dagger tube but
we found something that is simpler

00:08:02.570 --> 00:08:02.580
we found something that is simpler
 

00:08:02.580 --> 00:08:06.990
we found something that is simpler
flavors product flavors is a feature in

00:08:06.990 --> 00:08:07.000
flavors product flavors is a feature in
 

00:08:07.000 --> 00:08:09.360
flavors product flavors is a feature in
the Android Android Gradle plugin you

00:08:09.360 --> 00:08:09.370
the Android Android Gradle plugin you
 

00:08:09.370 --> 00:08:11.010
the Android Android Gradle plugin you
probably familiar with it because this

00:08:11.010 --> 00:08:11.020
probably familiar with it because this
 

00:08:11.020 --> 00:08:13.370
probably familiar with it because this
is what you use if you want to create

00:08:13.370 --> 00:08:13.380
is what you use if you want to create
 

00:08:13.380 --> 00:08:16.050
is what you use if you want to create
versions different versions of your app

00:08:16.050 --> 00:08:16.060
versions different versions of your app
 

00:08:16.060 --> 00:08:18.629
versions different versions of your app
sharing code base so it's very common to

00:08:18.629 --> 00:08:18.639
sharing code base so it's very common to
 

00:08:18.639 --> 00:08:23.399
sharing code base so it's very common to
see free versus paid dimension for

00:08:23.399 --> 00:08:23.409
see free versus paid dimension for
 

00:08:23.409 --> 00:08:25.439
see free versus paid dimension for
flavors in this case we have prod and

00:08:25.439 --> 00:08:25.449
flavors in this case we have prod and
 

00:08:25.449 --> 00:08:27.270
flavors in this case we have prod and
mock prod is your production version

00:08:27.270 --> 00:08:27.280
mock prod is your production version
 

00:08:27.280 --> 00:08:29.430
mock prod is your production version
what that that that you distribute and

00:08:29.430 --> 00:08:29.440
what that that that you distribute and
 

00:08:29.440 --> 00:08:32.730
what that that that you distribute and
mock is the one that is going to use

00:08:32.730 --> 00:08:32.740
mock is the one that is going to use
 

00:08:32.740 --> 00:08:35.850
mock is the one that is going to use
this fake data if you open the project

00:08:35.850 --> 00:08:35.860
this fake data if you open the project
 

00:08:35.860 --> 00:08:39.000
this fake data if you open the project
with under studio and you look at the

00:08:39.000 --> 00:08:39.010
with under studio and you look at the
 

00:08:39.010 --> 00:08:41.040
with under studio and you look at the
build variance window you'll see that we

00:08:41.040 --> 00:08:41.050
build variance window you'll see that we
 

00:08:41.050 --> 00:08:43.050
build variance window you'll see that we
have three variants that's because we

00:08:43.050 --> 00:08:43.060
have three variants that's because we
 

00:08:43.060 --> 00:08:45.750
have three variants that's because we
are filtering out mark release because

00:08:45.750 --> 00:08:45.760
are filtering out mark release because
 

00:08:45.760 --> 00:08:48.140
are filtering out mark release because
it makes no sense and we don't need it

00:08:48.140 --> 00:08:48.150
it makes no sense and we don't need it
 

00:08:48.150 --> 00:08:51.060
it makes no sense and we don't need it
if you look at the Gradle tasks list

00:08:51.060 --> 00:08:51.070
if you look at the Gradle tasks list
 

00:08:51.070 --> 00:08:53.310
if you look at the Gradle tasks list
you'll see that there's no install debug

00:08:53.310 --> 00:08:53.320
you'll see that there's no install debug
 

00:08:53.320 --> 00:08:54.120
you'll see that there's no install debug
anymore

00:08:54.120 --> 00:08:54.130
anymore
 

00:08:54.130 --> 00:08:55.800
anymore
so now we have to choose which version

00:08:55.800 --> 00:08:55.810
so now we have to choose which version
 

00:08:55.810 --> 00:08:58.949
so now we have to choose which version
we want to install we can install mock

00:08:58.949 --> 00:08:58.959
we want to install we can install mock
 

00:08:58.959 --> 00:09:02.939
we want to install we can install mock
debug or debug to run tests we usually

00:09:02.939 --> 00:09:02.949
debug or debug to run tests we usually
 

00:09:02.949 --> 00:09:05.699
debug or debug to run tests we usually
use connect instrumentation tests we

00:09:05.699 --> 00:09:05.709
use connect instrumentation tests we
 

00:09:05.709 --> 00:09:08.430
use connect instrumentation tests we
usually use connected Android tests but

00:09:08.430 --> 00:09:08.440
usually use connected Android tests but
 

00:09:08.440 --> 00:09:11.160
usually use connected Android tests but
we are we can now also choose what

00:09:11.160 --> 00:09:11.170
we are we can now also choose what
 

00:09:11.170 --> 00:09:14.160
we are we can now also choose what
version to test against with connected

00:09:14.160 --> 00:09:14.170
version to test against with connected
 

00:09:14.170 --> 00:09:15.870
version to test against with connected
mugdha but under test and connected

00:09:15.870 --> 00:09:15.880
mugdha but under test and connected
 

00:09:15.880 --> 00:09:19.740
mugdha but under test and connected
proudly above enderchest so let's see

00:09:19.740 --> 00:09:19.750
proudly above enderchest so let's see
 

00:09:19.750 --> 00:09:22.620
proudly above enderchest so let's see
how it's done first you create a source

00:09:22.620 --> 00:09:22.630
how it's done first you create a source
 

00:09:22.630 --> 00:09:24.960
how it's done first you create a source
set per flavor so we have prod and mock

00:09:24.960 --> 00:09:24.970
set per flavor so we have prod and mock
 

00:09:24.970 --> 00:09:28.139
set per flavor so we have prod and mock
and we also have another interesting

00:09:28.139 --> 00:09:28.149
and we also have another interesting
 

00:09:28.149 --> 00:09:30.629
and we also have another interesting
sources Android test Mach this is where

00:09:30.629 --> 00:09:30.639
sources Android test Mach this is where
 

00:09:30.639 --> 00:09:34.579
sources Android test Mach this is where
you put the tests that only make sense

00:09:34.579 --> 00:09:34.589
you put the tests that only make sense
 

00:09:34.589 --> 00:09:37.889
you put the tests that only make sense
for the mock version of your app check

00:09:37.889 --> 00:09:37.899
for the mock version of your app check
 

00:09:37.899 --> 00:09:42.689
for the mock version of your app check
out the code to see why we use that this

00:09:42.689 --> 00:09:42.699
out the code to see why we use that this
 

00:09:42.699 --> 00:09:45.530
out the code to see why we use that this
is where the actual replacement happens

00:09:45.530 --> 00:09:45.540
is where the actual replacement happens
 

00:09:45.540 --> 00:09:50.189
is where the actual replacement happens
the injection class lives in both mark

00:09:50.189 --> 00:09:50.199
the injection class lives in both mark
 

00:09:50.199 --> 00:09:53.370
the injection class lives in both mark
and prod sources so that is the class

00:09:53.370 --> 00:09:53.380
and prod sources so that is the class
 

00:09:53.380 --> 00:09:55.800
and prod sources so that is the class
that is going to be replaced depending

00:09:55.800 --> 00:09:55.810
that is going to be replaced depending
 

00:09:55.810 --> 00:09:58.829
that is going to be replaced depending
on the version that you're using also we

00:09:58.829 --> 00:09:58.839
on the version that you're using also we
 

00:09:58.839 --> 00:10:01.290
on the version that you're using also we
put the fake implementations in the milk

00:10:01.290 --> 00:10:01.300
put the fake implementations in the milk
 

00:10:01.300 --> 00:10:03.179
put the fake implementations in the milk
source said this is great because it's

00:10:03.179 --> 00:10:03.189
source said this is great because it's
 

00:10:03.189 --> 00:10:06.090
source said this is great because it's
actually going to hide this classes from

00:10:06.090 --> 00:10:06.100
actually going to hide this classes from
 

00:10:06.100 --> 00:10:08.249
actually going to hide this classes from
the production app so that you can't use

00:10:08.249 --> 00:10:08.259
the production app so that you can't use
 

00:10:08.259 --> 00:10:11.759
the production app so that you can't use
them by mistake zooming in a little bit

00:10:11.759 --> 00:10:11.769
them by mistake zooming in a little bit
 

00:10:11.769 --> 00:10:15.059
them by mistake zooming in a little bit
this is the injection class of the mock

00:10:15.059 --> 00:10:15.069
this is the injection class of the mock
 

00:10:15.069 --> 00:10:19.710
this is the injection class of the mock
flavor of the mock source set rather it

00:10:19.710 --> 00:10:19.720
flavor of the mock source set rather it
 

00:10:19.720 --> 00:10:21.780
flavor of the mock source set rather it
has two methods both injection classes

00:10:21.780 --> 00:10:21.790
has two methods both injection classes
 

00:10:21.790 --> 00:10:23.639
has two methods both injection classes
look the same from the outside it they

00:10:23.639 --> 00:10:23.649
look the same from the outside it they
 

00:10:23.649 --> 00:10:25.980
look the same from the outside it they
have the same public methods provide

00:10:25.980 --> 00:10:25.990
have the same public methods provide
 

00:10:25.990 --> 00:10:27.840
have the same public methods provide
image file is the method that we use

00:10:27.840 --> 00:10:27.850
image file is the method that we use
 

00:10:27.850 --> 00:10:30.689
image file is the method that we use
from the component that talks to the

00:10:30.689 --> 00:10:30.699
from the component that talks to the
 

00:10:30.699 --> 00:10:33.569
from the component that talks to the
camera so we're going to return a new

00:10:33.569 --> 00:10:33.579
camera so we're going to return a new
 

00:10:33.579 --> 00:10:35.819
camera so we're going to return a new
fake image file implementation that

00:10:35.819 --> 00:10:35.829
fake image file implementation that
 

00:10:35.829 --> 00:10:37.559
fake image file implementation that
class the only thing is doing is

00:10:37.559 --> 00:10:37.569
class the only thing is doing is
 

00:10:37.569 --> 00:10:41.999
class the only thing is doing is
returning a string a path to an image

00:10:41.999 --> 00:10:42.009
returning a string a path to an image
 

00:10:42.009 --> 00:10:44.400
returning a string a path to an image
file that we preload it so it's a fake

00:10:44.400 --> 00:10:44.410
file that we preload it so it's a fake
 

00:10:44.410 --> 00:10:48.290
file that we preload it so it's a fake
image really provide notes repository is

00:10:48.290 --> 00:10:48.300
image really provide notes repository is
 

00:10:48.300 --> 00:10:51.960
image really provide notes repository is
the method that we use to create the

00:10:51.960 --> 00:10:51.970
the method that we use to create the
 

00:10:51.970 --> 00:10:54.059
the method that we use to create the
repository so if you're using the mock

00:10:54.059 --> 00:10:54.069
repository so if you're using the mock
 

00:10:54.069 --> 00:10:56.939
repository so if you're using the mock
flavor it's going to create an actual

00:10:56.939 --> 00:10:56.949
flavor it's going to create an actual
 

00:10:56.949 --> 00:10:59.999
flavor it's going to create an actual
real in-memory repository but we're

00:10:59.999 --> 00:11:00.009
real in-memory repository but we're
 

00:11:00.009 --> 00:11:02.579
real in-memory repository but we're
going to inject a fake dependency in

00:11:02.579 --> 00:11:02.589
going to inject a fake dependency in
 

00:11:02.589 --> 00:11:04.110
going to inject a fake dependency in
this case the fake notes travel service

00:11:04.110 --> 00:11:04.120
this case the fake notes travel service
 

00:11:04.120 --> 00:11:06.240
this case the fake notes travel service
API implementation that's a very Java

00:11:06.240 --> 00:11:06.250
API implementation that's a very Java
 

00:11:06.250 --> 00:11:07.799
API implementation that's a very Java
name I know

00:11:07.799 --> 00:11:07.809
name I know
 

00:11:07.809 --> 00:11:11.939
name I know
is going not to start any HTTP

00:11:11.939 --> 00:11:11.949
is going not to start any HTTP
 

00:11:11.949 --> 00:11:13.529
is going not to start any HTTP
connections but it's just going to

00:11:13.529 --> 00:11:13.539
connections but it's just going to
 

00:11:13.539 --> 00:11:18.269
connections but it's just going to
return immediately JSON file in this

00:11:18.269 --> 00:11:18.279
return immediately JSON file in this
 

00:11:18.279 --> 00:11:24.169
return immediately JSON file in this
case and that's it that's how we set up

00:11:24.169 --> 00:11:24.179
case and that's it that's how we set up
 

00:11:24.179 --> 00:11:27.059
case and that's it that's how we set up
that's that that's how we set up our

00:11:27.059 --> 00:11:27.069
that's that that's how we set up our
 

00:11:27.069 --> 00:11:30.929
that's that that's how we set up our
Matic environment is it actually three

00:11:30.929 --> 00:11:30.939
Matic environment is it actually three
 

00:11:30.939 --> 00:11:34.379
Matic environment is it actually three
to twelve I'll be pretty cool yeah more

00:11:34.379 --> 00:11:34.389
to twelve I'll be pretty cool yeah more
 

00:11:34.389 --> 00:11:40.049
to twelve I'll be pretty cool yeah more
or less right this has some interesting

00:11:40.049 --> 00:11:40.059
or less right this has some interesting
 

00:11:40.059 --> 00:11:44.519
or less right this has some interesting
side effects NOC mode this I mean using

00:11:44.519 --> 00:11:44.529
side effects NOC mode this I mean using
 

00:11:44.529 --> 00:11:46.799
side effects NOC mode this I mean using
the the mock flavor is interesting if

00:11:46.799 --> 00:11:46.809
the the mock flavor is interesting if
 

00:11:46.809 --> 00:11:49.829
the the mock flavor is interesting if
you are developing your app you usually

00:11:49.829 --> 00:11:49.839
you are developing your app you usually
 

00:11:49.839 --> 00:11:51.809
you are developing your app you usually
do manual testing right if you're

00:11:51.809 --> 00:11:51.819
do manual testing right if you're
 

00:11:51.819 --> 00:11:55.019
do manual testing right if you're
developing you I specifically you change

00:11:55.019 --> 00:11:55.029
developing you I specifically you change
 

00:11:55.029 --> 00:11:58.319
developing you I specifically you change
something in UI you deploy and then you

00:11:58.319 --> 00:11:58.329
something in UI you deploy and then you
 

00:11:58.329 --> 00:12:01.289
something in UI you deploy and then you
you test manually that what you what

00:12:01.289 --> 00:12:01.299
you test manually that what you what
 

00:12:01.299 --> 00:12:05.879
you test manually that what you what
you've doing works if you use fake data

00:12:05.879 --> 00:12:05.889
you've doing works if you use fake data
 

00:12:05.889 --> 00:12:08.579
you've doing works if you use fake data
this iteration is going to be shorted so

00:12:08.579 --> 00:12:08.589
this iteration is going to be shorted so
 

00:12:08.589 --> 00:12:10.499
this iteration is going to be shorted so
your development is going to be faster

00:12:10.499 --> 00:12:10.509
your development is going to be faster
 

00:12:10.509 --> 00:12:12.239
your development is going to be faster
it's also good for concurrent

00:12:12.239 --> 00:12:12.249
it's also good for concurrent
 

00:12:12.249 --> 00:12:13.439
it's also good for concurrent
development so if you don't have a

00:12:13.439 --> 00:12:13.449
development so if you don't have a
 

00:12:13.449 --> 00:12:16.829
development so if you don't have a
back-end API yet you can use fake data

00:12:16.829 --> 00:12:16.839
back-end API yet you can use fake data
 

00:12:16.839 --> 00:12:21.599
back-end API yet you can use fake data
in the meantime we're not only going to

00:12:21.599 --> 00:12:21.609
in the meantime we're not only going to
 

00:12:21.609 --> 00:12:24.329
in the meantime we're not only going to
run instrumentation tests against the

00:12:24.329 --> 00:12:24.339
run instrumentation tests against the
 

00:12:24.339 --> 00:12:28.499
run instrumentation tests against the
product the mock flavor we can also use

00:12:28.499 --> 00:12:28.509
product the mock flavor we can also use
 

00:12:28.509 --> 00:12:31.259
product the mock flavor we can also use
the production app because it's going to

00:12:31.259 --> 00:12:31.269
the production app because it's going to
 

00:12:31.269 --> 00:12:34.289
the production app because it's going to
give us very nice end-to-end tests if we

00:12:34.289 --> 00:12:34.299
give us very nice end-to-end tests if we
 

00:12:34.299 --> 00:12:36.719
give us very nice end-to-end tests if we
want to test the whole project from the

00:12:36.719 --> 00:12:36.729
want to test the whole project from the
 

00:12:36.729 --> 00:12:39.719
want to test the whole project from the
backend to the app this test is going to

00:12:39.719 --> 00:12:39.729
backend to the app this test is going to
 

00:12:39.729 --> 00:12:41.759
backend to the app this test is going to
be obviously more flaky but you don't

00:12:41.759 --> 00:12:41.769
be obviously more flaky but you don't
 

00:12:41.769 --> 00:12:43.679
be obviously more flaky but you don't
have to run it very often you can run it

00:12:43.679 --> 00:12:43.689
have to run it very often you can run it
 

00:12:43.689 --> 00:12:45.479
have to run it very often you can run it
every 24 hours

00:12:45.479 --> 00:12:45.489
every 24 hours
 

00:12:45.489 --> 00:12:48.359
every 24 hours
or it's actually a very nice pre-release

00:12:48.359 --> 00:12:48.369
or it's actually a very nice pre-release
 

00:12:48.369 --> 00:12:51.899
or it's actually a very nice pre-release
check so before uploading to Google Play

00:12:51.899 --> 00:12:51.909
check so before uploading to Google Play
 

00:12:51.909 --> 00:12:54.359
check so before uploading to Google Play
or your distribution channel you run

00:12:54.359 --> 00:12:54.369
or your distribution channel you run
 

00:12:54.369 --> 00:12:56.999
or your distribution channel you run
this test against brought to make sure

00:12:56.999 --> 00:12:57.009
this test against brought to make sure
 

00:12:57.009 --> 00:13:00.209
this test against brought to make sure
that everything works well so now that

00:13:00.209 --> 00:13:00.219
that everything works well so now that
 

00:13:00.219 --> 00:13:04.409
that everything works well so now that
we have a hermetic environment we can

00:13:04.409 --> 00:13:04.419
we have a hermetic environment we can
 

00:13:04.419 --> 00:13:07.109
we have a hermetic environment we can
start talking about tests and the first

00:13:07.109 --> 00:13:07.119
start talking about tests and the first
 

00:13:07.119 --> 00:13:11.699
start talking about tests and the first
one the first type is unit tests they

00:13:11.699 --> 00:13:11.709
one the first type is unit tests they
 

00:13:11.709 --> 00:13:14.369
one the first type is unit tests they
are fundamental for a good testing

00:13:14.369 --> 00:13:14.379
are fundamental for a good testing
 

00:13:14.379 --> 00:13:17.219
are fundamental for a good testing
strategy that then can be completed with

00:13:17.219 --> 00:13:17.229
strategy that then can be completed with
 

00:13:17.229 --> 00:13:20.700
strategy that then can be completed with
integration and UI tests a small number

00:13:20.700 --> 00:13:20.710
integration and UI tests a small number
 

00:13:20.710 --> 00:13:24.030
integration and UI tests a small number
of end-to-end tests and other tests like

00:13:24.030 --> 00:13:24.040
of end-to-end tests and other tests like
 

00:13:24.040 --> 00:13:26.610
of end-to-end tests and other tests like
monkey runs robot rounds oven

00:13:26.610 --> 00:13:26.620
monkey runs robot rounds oven
 

00:13:26.620 --> 00:13:29.460
monkey runs robot rounds oven
performance tests that jf is going to

00:13:29.460 --> 00:13:29.470
performance tests that jf is going to
 

00:13:29.470 --> 00:13:32.760
performance tests that jf is going to
talk about later the unit tests also

00:13:32.760 --> 00:13:32.770
talk about later the unit tests also
 

00:13:32.770 --> 00:13:36.270
talk about later the unit tests also
called local tests because they they run

00:13:36.270 --> 00:13:36.280
called local tests because they they run
 

00:13:36.280 --> 00:13:39.120
called local tests because they they run
on your local workstation so they are

00:13:39.120 --> 00:13:39.130
on your local workstation so they are
 

00:13:39.130 --> 00:13:41.580
on your local workstation so they are
really fast but they're also fast

00:13:41.580 --> 00:13:41.590
really fast but they're also fast
 

00:13:41.590 --> 00:13:43.890
really fast but they're also fast
because they are small unit testing is

00:13:43.890 --> 00:13:43.900
because they are small unit testing is
 

00:13:43.900 --> 00:13:46.890
because they are small unit testing is
about making sure that the individual

00:13:46.890 --> 00:13:46.900
about making sure that the individual
 

00:13:46.900 --> 00:13:51.120
about making sure that the individual
parts of your code work as expected so

00:13:51.120 --> 00:13:51.130
parts of your code work as expected so
 

00:13:51.130 --> 00:13:54.960
parts of your code work as expected so
the unit tests must be small and you

00:13:54.960 --> 00:13:54.970
the unit tests must be small and you
 

00:13:54.970 --> 00:13:58.140
the unit tests must be small and you
should be able to run thousands of tests

00:13:58.140 --> 00:13:58.150
should be able to run thousands of tests
 

00:13:58.150 --> 00:14:01.200
should be able to run thousands of tests
in seconds the problem is that because

00:14:01.200 --> 00:14:01.210
in seconds the problem is that because
 

00:14:01.210 --> 00:14:04.260
in seconds the problem is that because
we are running on our workstation we

00:14:04.260 --> 00:14:04.270
we are running on our workstation we
 

00:14:04.270 --> 00:14:06.150
we are running on our workstation we
don't have access to the framework we

00:14:06.150 --> 00:14:06.160
don't have access to the framework we
 

00:14:06.160 --> 00:14:10.080
don't have access to the framework we
don't have access to Android so the

00:14:10.080 --> 00:14:10.090
don't have access to Android so the
 

00:14:10.090 --> 00:14:13.290
don't have access to Android so the
problem with Android is that we see

00:14:13.290 --> 00:14:13.300
problem with Android is that we see
 

00:14:13.300 --> 00:14:16.920
problem with Android is that we see
these a lot we just we just have huge

00:14:16.920 --> 00:14:16.930
these a lot we just we just have huge
 

00:14:16.930 --> 00:14:19.800
these a lot we just we just have huge
activities with all the code typed into

00:14:19.800 --> 00:14:19.810
activities with all the code typed into
 

00:14:19.810 --> 00:14:23.040
activities with all the code typed into
them or huge fragments so this is

00:14:23.040 --> 00:14:23.050
them or huge fragments so this is
 

00:14:23.050 --> 00:14:26.610
them or huge fragments so this is
horrible for unit testing don't be this

00:14:26.610 --> 00:14:26.620
horrible for unit testing don't be this
 

00:14:26.620 --> 00:14:32.160
horrible for unit testing don't be this
developer be this other guy he you need

00:14:32.160 --> 00:14:32.170
developer be this other guy he you need
 

00:14:32.170 --> 00:14:34.620
developer be this other guy he you need
tests his business logic and he's really

00:14:34.620 --> 00:14:34.630
tests his business logic and he's really
 

00:14:34.630 --> 00:14:39.750
tests his business logic and he's really
happy about it business logic means what

00:14:39.750 --> 00:14:39.760
happy about it business logic means what
 

00:14:39.760 --> 00:14:42.240
happy about it business logic means what
your app actually does so if you have a

00:14:42.240 --> 00:14:42.250
your app actually does so if you have a
 

00:14:42.250 --> 00:14:45.470
your app actually does so if you have a
filtering up sorry a photo filtering app

00:14:45.470 --> 00:14:45.480
filtering up sorry a photo filtering app
 

00:14:45.480 --> 00:14:48.600
filtering up sorry a photo filtering app
the business logic would probably be the

00:14:48.600 --> 00:14:48.610
the business logic would probably be the
 

00:14:48.610 --> 00:14:50.640
the business logic would probably be the
algorithms that you use to filter the

00:14:50.640 --> 00:14:50.650
algorithms that you use to filter the
 

00:14:50.650 --> 00:14:54.180
algorithms that you use to filter the
images only if you have small

00:14:54.180 --> 00:14:54.190
images only if you have small
 

00:14:54.190 --> 00:14:57.150
images only if you have small
dependencies with the framework you can

00:14:57.150 --> 00:14:57.160
dependencies with the framework you can
 

00:14:57.160 --> 00:14:59.280
dependencies with the framework you can
use this nice feature that we added to

00:14:59.280 --> 00:14:59.290
use this nice feature that we added to
 

00:14:59.290 --> 00:15:03.060
use this nice feature that we added to
the unit testing support in 1.1 the

00:15:03.060 --> 00:15:03.070
the unit testing support in 1.1 the
 

00:15:03.070 --> 00:15:05.220
the unit testing support in 1.1 the
mockable Android or the Android jar is a

00:15:05.220 --> 00:15:05.230
mockable Android or the Android jar is a
 

00:15:05.230 --> 00:15:07.140
mockable Android or the Android jar is a
file that you download with the SDK

00:15:07.140 --> 00:15:07.150
file that you download with the SDK
 

00:15:07.150 --> 00:15:10.050
file that you download with the SDK
manager and it looks like Android from

00:15:10.050 --> 00:15:10.060
manager and it looks like Android from
 

00:15:10.060 --> 00:15:11.970
manager and it looks like Android from
the outside it has all the public

00:15:11.970 --> 00:15:11.980
the outside it has all the public
 

00:15:11.980 --> 00:15:13.860
the outside it has all the public
methods and all the public classes but

00:15:13.860 --> 00:15:13.870
methods and all the public classes but
 

00:15:13.870 --> 00:15:18.480
methods and all the public classes but
it's actually empty so if you have a

00:15:18.480 --> 00:15:18.490
it's actually empty so if you have a
 

00:15:18.490 --> 00:15:20.640
it's actually empty so if you have a
small dependency on Android you can use

00:15:20.640 --> 00:15:20.650
small dependency on Android you can use
 

00:15:20.650 --> 00:15:25.710
small dependency on Android you can use
a mocking framework like mojito to to

00:15:25.710 --> 00:15:25.720
a mocking framework like mojito to to
 

00:15:25.720 --> 00:15:28.950
a mocking framework like mojito to to
mark this classes we have an example in

00:15:28.950 --> 00:15:28.960
mark this classes we have an example in
 

00:15:28.960 --> 00:15:31.350
mark this classes we have an example in
github that is mocking shared

00:15:31.350 --> 00:15:31.360
github that is mocking shared
 

00:15:31.360 --> 00:15:33.150
github that is mocking shared
preferences so if you don't want to wrap

00:15:33.150 --> 00:15:33.160
preferences so if you don't want to wrap
 

00:15:33.160 --> 00:15:34.030
preferences so if you don't want to wrap
that class

00:15:34.030 --> 00:15:34.040
that class
 

00:15:34.040 --> 00:15:37.449
that class
you can use mojito and on your unit

00:15:37.449 --> 00:15:37.459
you can use mojito and on your unit
 

00:15:37.459 --> 00:15:39.850
you can use mojito and on your unit
tests and running on your local

00:15:39.850 --> 00:15:39.860
tests and running on your local
 

00:15:39.860 --> 00:15:44.050
tests and running on your local
workstation so let's see how the tests

00:15:44.050 --> 00:15:44.060
workstation so let's see how the tests
 

00:15:44.060 --> 00:15:47.110
workstation so let's see how the tests
the unit tests look like they live in

00:15:47.110 --> 00:15:47.120
the unit tests look like they live in
 

00:15:47.120 --> 00:15:51.069
the unit tests look like they live in
the test folder we have five five

00:15:51.069 --> 00:15:51.079
the test folder we have five five
 

00:15:51.079 --> 00:15:53.650
the test folder we have five five
classes if you open well the first thing

00:15:53.650 --> 00:15:53.660
classes if you open well the first thing
 

00:15:53.660 --> 00:15:55.990
classes if you open well the first thing
you have to do is go to the build

00:15:55.990 --> 00:15:56.000
you have to do is go to the build
 

00:15:56.000 --> 00:15:59.199
you have to do is go to the build
variants window and choose unit test as

00:15:59.199 --> 00:15:59.209
variants window and choose unit test as
 

00:15:59.209 --> 00:16:02.199
variants window and choose unit test as
the test artifact this is going to

00:16:02.199 --> 00:16:02.209
the test artifact this is going to
 

00:16:02.209 --> 00:16:03.340
the test artifact this is going to
enable the unit test but also

00:16:03.340 --> 00:16:03.350
enable the unit test but also
 

00:16:03.350 --> 00:16:08.579
enable the unit test but also
refactorings and refactorings and

00:16:08.579 --> 00:16:08.589
refactorings and refactorings and
 

00:16:08.589 --> 00:16:11.530
refactorings and refactorings and
something else but this is actually

00:16:11.530 --> 00:16:11.540
something else but this is actually
 

00:16:11.540 --> 00:16:14.920
something else but this is actually
going away in Android studio 2.0 you

00:16:14.920 --> 00:16:14.930
going away in Android studio 2.0 you
 

00:16:14.930 --> 00:16:16.870
going away in Android studio 2.0 you
don't have to do this anymore because

00:16:16.870 --> 00:16:16.880
don't have to do this anymore because
 

00:16:16.880 --> 00:16:18.639
don't have to do this anymore because
both instrumentation and unit tests are

00:16:18.639 --> 00:16:18.649
both instrumentation and unit tests are
 

00:16:18.649 --> 00:16:20.439
both instrumentation and unit tests are
going to be active so you'll be able to

00:16:20.439 --> 00:16:20.449
going to be active so you'll be able to
 

00:16:20.449 --> 00:16:24.009
going to be active so you'll be able to
reflect across both test artifacts if

00:16:24.009 --> 00:16:24.019
reflect across both test artifacts if
 

00:16:24.019 --> 00:16:26.019
reflect across both test artifacts if
you know what I'm talking about you know

00:16:26.019 --> 00:16:26.029
you know what I'm talking about you know
 

00:16:26.029 --> 00:16:32.829
you know what I'm talking about you know
this is huge this is how normal unit

00:16:32.829 --> 00:16:32.839
this is huge this is how normal unit
 

00:16:32.839 --> 00:16:35.290
this is huge this is how normal unit
test looks like it's a J unit for test

00:16:35.290 --> 00:16:35.300
test looks like it's a J unit for test
 

00:16:35.300 --> 00:16:37.990
test looks like it's a J unit for test
it has the a presentation the name and

00:16:37.990 --> 00:16:38.000
it has the a presentation the name and
 

00:16:38.000 --> 00:16:40.960
it has the a presentation the name and
it's as simple as it gets the add new

00:16:40.960 --> 00:16:40.970
it's as simple as it gets the add new
 

00:16:40.970 --> 00:16:42.970
it's as simple as it gets the add new
node method is called on the real

00:16:42.970 --> 00:16:42.980
node method is called on the real
 

00:16:42.980 --> 00:16:44.800
node method is called on the real
presenter and then we're verifying that

00:16:44.800 --> 00:16:44.810
presenter and then we're verifying that
 

00:16:44.810 --> 00:16:47.500
presenter and then we're verifying that
the mocked view in this case was called

00:16:47.500 --> 00:16:47.510
the mocked view in this case was called
 

00:16:47.510 --> 00:16:49.780
the mocked view in this case was called
via that method show add node method

00:16:49.780 --> 00:16:49.790
via that method show add node method
 

00:16:49.790 --> 00:16:54.309
via that method show add node method
verify is a mojito API by the way in

00:16:54.309 --> 00:16:54.319
verify is a mojito API by the way in
 

00:16:54.319 --> 00:16:55.960
verify is a mojito API by the way in
order to execute it you can right click

00:16:55.960 --> 00:16:55.970
order to execute it you can right click
 

00:16:55.970 --> 00:16:57.879
order to execute it you can right click
on the method right click on the class

00:16:57.879 --> 00:16:57.889
on the method right click on the class
 

00:16:57.889 --> 00:16:59.620
on the method right click on the class
or right click on the file and

00:16:59.620 --> 00:16:59.630
or right click on the file and
 

00:16:59.630 --> 00:17:02.470
or right click on the file and
indirectly menu to just click on run

00:17:02.470 --> 00:17:02.480
indirectly menu to just click on run
 

00:17:02.480 --> 00:17:07.569
indirectly menu to just click on run
from Gradle we simply use test because

00:17:07.569 --> 00:17:07.579
from Gradle we simply use test because
 

00:17:07.579 --> 00:17:10.270
from Gradle we simply use test because
your unit tests are supposed to be fast

00:17:10.270 --> 00:17:10.280
your unit tests are supposed to be fast
 

00:17:10.280 --> 00:17:12.909
your unit tests are supposed to be fast
and they should pass really fast so you

00:17:12.909 --> 00:17:12.919
and they should pass really fast so you
 

00:17:12.919 --> 00:17:17.289
and they should pass really fast so you
don't need to filter one so we just run

00:17:17.289 --> 00:17:17.299
don't need to filter one so we just run
 

00:17:17.299 --> 00:17:21.549
don't need to filter one so we just run
all all of them all the time on the code

00:17:21.549 --> 00:17:21.559
all all of them all the time on the code
 

00:17:21.559 --> 00:17:24.370
all all of them all the time on the code
lab in the code lab we use a test-driven

00:17:24.370 --> 00:17:24.380
lab in the code lab we use a test-driven
 

00:17:24.380 --> 00:17:27.549
lab in the code lab we use a test-driven
development approach this is about

00:17:27.549 --> 00:17:27.559
development approach this is about
 

00:17:27.559 --> 00:17:31.870
development approach this is about
creating the unit tests first and the

00:17:31.870 --> 00:17:31.880
creating the unit tests first and the
 

00:17:31.880 --> 00:17:34.649
creating the unit tests first and the
unit tests will act as a contract it's

00:17:34.649 --> 00:17:34.659
unit tests will act as a contract it's
 

00:17:34.659 --> 00:17:37.240
unit tests will act as a contract it's
that is going to say how your app

00:17:37.240 --> 00:17:37.250
that is going to say how your app
 

00:17:37.250 --> 00:17:39.430
that is going to say how your app
behaves so the first thing you do you

00:17:39.430 --> 00:17:39.440
behaves so the first thing you do you
 

00:17:39.440 --> 00:17:41.500
behaves so the first thing you do you
create the unit test you see that it

00:17:41.500 --> 00:17:41.510
create the unit test you see that it
 

00:17:41.510 --> 00:17:44.919
create the unit test you see that it
fails when you implement the behavior on

00:17:44.919 --> 00:17:44.929
fails when you implement the behavior on
 

00:17:44.929 --> 00:17:47.590
fails when you implement the behavior on
your app until the test passes and

00:17:47.590 --> 00:17:47.600
your app until the test passes and
 

00:17:47.600 --> 00:17:50.500
your app until the test passes and
then you move on to the next test until

00:17:50.500 --> 00:17:50.510
then you move on to the next test until
 

00:17:50.510 --> 00:17:52.750
then you move on to the next test until
you have something like this a glorious

00:17:52.750 --> 00:17:52.760
you have something like this a glorious
 

00:17:52.760 --> 00:17:59.650
you have something like this a glorious
list of tests all passing so with all

00:17:59.650 --> 00:17:59.660
list of tests all passing so with all
 

00:17:59.660 --> 00:18:03.039
list of tests all passing so with all
that we've talked about the fact that we

00:18:03.039 --> 00:18:03.049
that we've talked about the fact that we
 

00:18:03.049 --> 00:18:04.930
that we've talked about the fact that we
have an architecture that in this case

00:18:04.930 --> 00:18:04.940
have an architecture that in this case
 

00:18:04.940 --> 00:18:08.190
have an architecture that in this case
is MVP but you can use whatever you want

00:18:08.190 --> 00:18:08.200
is MVP but you can use whatever you want
 

00:18:08.200 --> 00:18:10.840
is MVP but you can use whatever you want
they have the the fact we have the

00:18:10.840 --> 00:18:10.850
they have the the fact we have the
 

00:18:10.850 --> 00:18:13.360
they have the the fact we have the
Hermetic testing in place and that we

00:18:13.360 --> 00:18:13.370
Hermetic testing in place and that we
 

00:18:13.370 --> 00:18:16.000
Hermetic testing in place and that we
are using unit tests and TDD is going to

00:18:16.000 --> 00:18:16.010
are using unit tests and TDD is going to
 

00:18:16.010 --> 00:18:18.610
are using unit tests and TDD is going to
lead you to a very very healthy code

00:18:18.610 --> 00:18:18.620
lead you to a very very healthy code
 

00:18:18.620 --> 00:18:21.880
lead you to a very very healthy code
base we're adding new features is super

00:18:21.880 --> 00:18:21.890
base we're adding new features is super
 

00:18:21.890 --> 00:18:24.730
base we're adding new features is super
easy it's a matter of adding an unit

00:18:24.730 --> 00:18:24.740
easy it's a matter of adding an unit
 

00:18:24.740 --> 00:18:28.560
easy it's a matter of adding an unit
test a couple of methods in on a in a

00:18:28.560 --> 00:18:28.570
test a couple of methods in on a in a
 

00:18:28.570 --> 00:18:31.060
test a couple of methods in on a in a
interface and then Android studio is

00:18:31.060 --> 00:18:31.070
interface and then Android studio is
 

00:18:31.070 --> 00:18:33.669
interface and then Android studio is
actually going to tell you where to fill

00:18:33.669 --> 00:18:33.679
actually going to tell you where to fill
 

00:18:33.679 --> 00:18:35.799
actually going to tell you where to fill
in the gaps great for me interests as

00:18:35.799 --> 00:18:35.809
in the gaps great for me interests as
 

00:18:35.809 --> 00:18:39.430
in the gaps great for me interests as
well you don't need to be afraid of

00:18:39.430 --> 00:18:39.440
well you don't need to be afraid of
 

00:18:39.440 --> 00:18:40.990
well you don't need to be afraid of
refactorings anymore because you are

00:18:40.990 --> 00:18:41.000
refactorings anymore because you are
 

00:18:41.000 --> 00:18:44.860
refactorings anymore because you are
covered by by tests and you'll see that

00:18:44.860 --> 00:18:44.870
covered by by tests and you'll see that
 

00:18:44.870 --> 00:18:47.049
covered by by tests and you'll see that
instead of adding to your technical debt

00:18:47.049 --> 00:18:47.059
instead of adding to your technical debt
 

00:18:47.059 --> 00:18:50.710
instead of adding to your technical debt
every time you modify your code all the

00:18:50.710 --> 00:18:50.720
every time you modify your code all the
 

00:18:50.720 --> 00:18:55.120
every time you modify your code all the
pieces are going to fall into place so

00:18:55.120 --> 00:18:55.130
pieces are going to fall into place so
 

00:18:55.130 --> 00:18:56.980
pieces are going to fall into place so
to finish off I want to talk about a

00:18:56.980 --> 00:18:56.990
to finish off I want to talk about a
 

00:18:56.990 --> 00:18:59.919
to finish off I want to talk about a
hybrid type of tests these are the unit

00:18:59.919 --> 00:18:59.929
hybrid type of tests these are the unit
 

00:18:59.929 --> 00:19:02.710
hybrid type of tests these are the unit
tests that run on a device or an

00:19:02.710 --> 00:19:02.720
tests that run on a device or an
 

00:19:02.720 --> 00:19:05.230
tests that run on a device or an
emulator they are by definition

00:19:05.230 --> 00:19:05.240
emulator they are by definition
 

00:19:05.240 --> 00:19:07.810
emulator they are by definition
integration tests by the way so we call

00:19:07.810 --> 00:19:07.820
integration tests by the way so we call
 

00:19:07.820 --> 00:19:10.000
integration tests by the way so we call
them you need Android tests because we

00:19:10.000 --> 00:19:10.010
them you need Android tests because we
 

00:19:10.010 --> 00:19:15.070
them you need Android tests because we
are good at naming these tests allow you

00:19:15.070 --> 00:19:15.080
are good at naming these tests allow you
 

00:19:15.080 --> 00:19:19.600
are good at naming these tests allow you
to test things like like your possible

00:19:19.600 --> 00:19:19.610
to test things like like your possible
 

00:19:19.610 --> 00:19:21.850
to test things like like your possible
implementation or your sequel ID

00:19:21.850 --> 00:19:21.860
implementation or your sequel ID
 

00:19:21.860 --> 00:19:24.730
implementation or your sequel ID
integration and they're actually visible

00:19:24.730 --> 00:19:24.740
integration and they're actually visible
 

00:19:24.740 --> 00:19:27.460
integration and they're actually visible
sorry invisible you just upload the

00:19:27.460 --> 00:19:27.470
sorry invisible you just upload the
 

00:19:27.470 --> 00:19:29.919
sorry invisible you just upload the
tests you run them and then the results

00:19:29.919 --> 00:19:29.929
tests you run them and then the results
 

00:19:29.929 --> 00:19:31.990
tests you run them and then the results
come back so you don't actually see

00:19:31.990 --> 00:19:32.000
come back so you don't actually see
 

00:19:32.000 --> 00:19:33.640
come back so you don't actually see
anything because they don't open

00:19:33.640 --> 00:19:33.650
anything because they don't open
 

00:19:33.650 --> 00:19:36.850
anything because they don't open
activities they don't open fragments if

00:19:36.850 --> 00:19:36.860
activities they don't open fragments if
 

00:19:36.860 --> 00:19:39.850
activities they don't open fragments if
you want to test to test those UI

00:19:39.850 --> 00:19:39.860
you want to test to test those UI
 

00:19:39.860 --> 00:19:42.010
you want to test to test those UI
elements and the UI interactions as

00:19:42.010 --> 00:19:42.020
elements and the UI interactions as
 

00:19:42.020 --> 00:19:44.350
elements and the UI interactions as
Stephan is here to talk about UI testing

00:19:44.350 --> 00:19:44.360
Stephan is here to talk about UI testing
 

00:19:44.360 --> 00:19:51.770
Stephan is here to talk about UI testing
with espresso thanks thanks

00:19:51.770 --> 00:19:51.780
 
 

00:19:51.780 --> 00:19:54.300
 
yeah so let's talk a little bit about UI

00:19:54.300 --> 00:19:54.310
yeah so let's talk a little bit about UI
 

00:19:54.310 --> 00:19:58.020
yeah so let's talk a little bit about UI
testing so yeah I think the previous

00:19:58.020 --> 00:19:58.030
testing so yeah I think the previous
 

00:19:58.030 --> 00:20:00.540
testing so yeah I think the previous
part was great because it showed that we

00:20:00.540 --> 00:20:00.550
part was great because it showed that we
 

00:20:00.550 --> 00:20:02.760
part was great because it showed that we
can create that we can implement all our

00:20:02.760 --> 00:20:02.770
can create that we can implement all our
 

00:20:02.770 --> 00:20:04.980
can create that we can implement all our
business logic we can verify its

00:20:04.980 --> 00:20:04.990
business logic we can verify its
 

00:20:04.990 --> 00:20:08.610
business logic we can verify its
correctness using a unit test and then

00:20:08.610 --> 00:20:08.620
correctness using a unit test and then
 

00:20:08.620 --> 00:20:10.740
correctness using a unit test and then
we can move on to a higher level of

00:20:10.740 --> 00:20:10.750
we can move on to a higher level of
 

00:20:10.750 --> 00:20:13.350
we can move on to a higher level of
testing and write some UI tests for it

00:20:13.350 --> 00:20:13.360
testing and write some UI tests for it
 

00:20:13.360 --> 00:20:15.750
testing and write some UI tests for it
but the other thing that it shows and

00:20:15.750 --> 00:20:15.760
but the other thing that it shows and
 

00:20:15.760 --> 00:20:17.400
but the other thing that it shows and
you will actually see that if you do the

00:20:17.400 --> 00:20:17.410
you will actually see that if you do the
 

00:20:17.410 --> 00:20:20.130
you will actually see that if you do the
code lab which I by the way I hope you

00:20:20.130 --> 00:20:20.140
code lab which I by the way I hope you
 

00:20:20.140 --> 00:20:22.500
code lab which I by the way I hope you
all do right after this sessions go down

00:20:22.500 --> 00:20:22.510
all do right after this sessions go down
 

00:20:22.510 --> 00:20:26.280
all do right after this sessions go down
there downstairs is that we use the IDE

00:20:26.280 --> 00:20:26.290
there downstairs is that we use the IDE
 

00:20:26.290 --> 00:20:28.680
there downstairs is that we use the IDE
to generate it to generate most of the

00:20:28.680 --> 00:20:28.690
to generate it to generate most of the
 

00:20:28.690 --> 00:20:31.710
to generate it to generate most of the
code for us so because if you look at

00:20:31.710 --> 00:20:31.720
code for us so because if you look at
 

00:20:31.720 --> 00:20:34.650
code for us so because if you look at
the test as your specification and if

00:20:34.650 --> 00:20:34.660
the test as your specification and if
 

00:20:34.660 --> 00:20:37.110
the test as your specification and if
you do TDD you can use the IDE to

00:20:37.110 --> 00:20:37.120
you do TDD you can use the IDE to
 

00:20:37.120 --> 00:20:39.630
you do TDD you can use the IDE to
generate almost all the code for you and

00:20:39.630 --> 00:20:39.640
generate almost all the code for you and
 

00:20:39.640 --> 00:20:42.060
generate almost all the code for you and
you just fill in the gaps but it also

00:20:42.060 --> 00:20:42.070
you just fill in the gaps but it also
 

00:20:42.070 --> 00:20:44.040
you just fill in the gaps but it also
shows how you can use meaningful

00:20:44.040 --> 00:20:44.050
shows how you can use meaningful
 

00:20:44.050 --> 00:20:47.760
shows how you can use meaningful
abstractions and use a unit test to spec

00:20:47.760 --> 00:20:47.770
abstractions and use a unit test to spec
 

00:20:47.770 --> 00:20:50.130
abstractions and use a unit test to spec
the behavior of your system how your

00:20:50.130 --> 00:20:50.140
the behavior of your system how your
 

00:20:50.140 --> 00:20:52.380
the behavior of your system how your
objects interact how to send messages to

00:20:52.380 --> 00:20:52.390
objects interact how to send messages to
 

00:20:52.390 --> 00:20:55.050
objects interact how to send messages to
each other how they behave but we can

00:20:55.050 --> 00:20:55.060
each other how they behave but we can
 

00:20:55.060 --> 00:20:56.730
each other how they behave but we can
apply some of these same patterns to the

00:20:56.730 --> 00:20:56.740
apply some of these same patterns to the
 

00:20:56.740 --> 00:21:00.840
apply some of these same patterns to the
AI testing and we'll look at this now so

00:21:00.840 --> 00:21:00.850
AI testing and we'll look at this now so
 

00:21:00.850 --> 00:21:03.600
AI testing and we'll look at this now so
UI tests should be a crucial part of

00:21:03.600 --> 00:21:03.610
UI tests should be a crucial part of
 

00:21:03.610 --> 00:21:05.730
UI tests should be a crucial part of
your development strategy like

00:21:05.730 --> 00:21:05.740
your development strategy like
 

00:21:05.740 --> 00:21:08.220
your development strategy like
essentially they test your application

00:21:08.220 --> 00:21:08.230
essentially they test your application
 

00:21:08.230 --> 00:21:10.680
essentially they test your application
through its user interface it's already

00:21:10.680 --> 00:21:10.690
through its user interface it's already
 

00:21:10.690 --> 00:21:13.410
through its user interface it's already
in the world and what that also means is

00:21:13.410 --> 00:21:13.420
in the world and what that also means is
 

00:21:13.420 --> 00:21:15.990
in the world and what that also means is
that these tests have to run on an

00:21:15.990 --> 00:21:16.000
that these tests have to run on an
 

00:21:16.000 --> 00:21:19.470
that these tests have to run on an
actual emulator or device and the great

00:21:19.470 --> 00:21:19.480
actual emulator or device and the great
 

00:21:19.480 --> 00:21:21.510
actual emulator or device and the great
thing about them is they will give you a

00:21:21.510 --> 00:21:21.520
thing about them is they will give you a
 

00:21:21.520 --> 00:21:23.430
thing about them is they will give you a
lot of confidence in your application

00:21:23.430 --> 00:21:23.440
lot of confidence in your application
 

00:21:23.440 --> 00:21:26.010
lot of confidence in your application
because you can run on a wide variety of

00:21:26.010 --> 00:21:26.020
because you can run on a wide variety of
 

00:21:26.020 --> 00:21:28.800
because you can run on a wide variety of
configurations on emulators and you can

00:21:28.800 --> 00:21:28.810
configurations on emulators and you can
 

00:21:28.810 --> 00:21:31.440
configurations on emulators and you can
now even use cloud test lab to run on

00:21:31.440 --> 00:21:31.450
now even use cloud test lab to run on
 

00:21:31.450 --> 00:21:34.020
now even use cloud test lab to run on
real devices in the cloud and so for the

00:21:34.020 --> 00:21:34.030
real devices in the cloud and so for the
 

00:21:34.030 --> 00:21:35.640
real devices in the cloud and so for the
next release you can just sleep well

00:21:35.640 --> 00:21:35.650
next release you can just sleep well
 

00:21:35.650 --> 00:21:38.310
next release you can just sleep well
because you know your app is just going

00:21:38.310 --> 00:21:38.320
because you know your app is just going
 

00:21:38.320 --> 00:21:40.610
because you know your app is just going
to work across all these different

00:21:40.610 --> 00:21:40.620
to work across all these different
 

00:21:40.620 --> 00:21:45.540
to work across all these different
configurations but um I think I lied a

00:21:45.540 --> 00:21:45.550
configurations but um I think I lied a
 

00:21:45.550 --> 00:21:48.900
configurations but um I think I lied a
bit um because um it turns out that UI

00:21:48.900 --> 00:21:48.910
bit um because um it turns out that UI
 

00:21:48.910 --> 00:21:51.120
bit um because um it turns out that UI
testing is actually quite hard to do and

00:21:51.120 --> 00:21:51.130
testing is actually quite hard to do and
 

00:21:51.130 --> 00:21:54.090
testing is actually quite hard to do and
writing a reliable and non flaky UI

00:21:54.090 --> 00:21:54.100
writing a reliable and non flaky UI
 

00:21:54.100 --> 00:21:56.160
writing a reliable and non flaky UI
tests before espresso it was a challenge

00:21:56.160 --> 00:21:56.170
tests before espresso it was a challenge
 

00:21:56.170 --> 00:21:57.750
tests before espresso it was a challenge
and many of you I'm sure have

00:21:57.750 --> 00:21:57.760
and many of you I'm sure have
 

00:21:57.760 --> 00:22:01.080
and many of you I'm sure have
experienced this and this is essentially

00:22:01.080 --> 00:22:01.090
experienced this and this is essentially
 

00:22:01.090 --> 00:22:01.980
experienced this and this is essentially
why we

00:22:01.980 --> 00:22:01.990
why we
 

00:22:01.990 --> 00:22:04.350
why we
created espresso because we want you

00:22:04.350 --> 00:22:04.360
created espresso because we want you
 

00:22:04.360 --> 00:22:06.930
created espresso because we want you
guys to focus on being productive on

00:22:06.930 --> 00:22:06.940
guys to focus on being productive on
 

00:22:06.940 --> 00:22:10.049
guys to focus on being productive on
writing code implementing new features

00:22:10.049 --> 00:22:10.059
writing code implementing new features
 

00:22:10.059 --> 00:22:12.090
writing code implementing new features
maybe even focus on a test but we don't

00:22:12.090 --> 00:22:12.100
maybe even focus on a test but we don't
 

00:22:12.100 --> 00:22:14.400
maybe even focus on a test but we don't
want you to fix your flaky tests and

00:22:14.400 --> 00:22:14.410
want you to fix your flaky tests and
 

00:22:14.410 --> 00:22:17.400
want you to fix your flaky tests and
what espresso will give you is a nice

00:22:17.400 --> 00:22:17.410
what espresso will give you is a nice
 

00:22:17.410 --> 00:22:20.970
what espresso will give you is a nice
fluent and concise API which you can use

00:22:20.970 --> 00:22:20.980
fluent and concise API which you can use
 

00:22:20.980 --> 00:22:24.419
fluent and concise API which you can use
to hide all almost all of the complexity

00:22:24.419 --> 00:22:24.429
to hide all almost all of the complexity
 

00:22:24.429 --> 00:22:30.210
to hide all almost all of the complexity
that comes with writing UI tests so when

00:22:30.210 --> 00:22:30.220
that comes with writing UI tests so when
 

00:22:30.220 --> 00:22:33.180
that comes with writing UI tests so when
we started creating espresso we tried

00:22:33.180 --> 00:22:33.190
we started creating espresso we tried
 

00:22:33.190 --> 00:22:36.660
we started creating espresso we tried
off we try to look at UI testing from a

00:22:36.660 --> 00:22:36.670
off we try to look at UI testing from a
 

00:22:36.670 --> 00:22:38.970
off we try to look at UI testing from a
different angle right we didn't want it

00:22:38.970 --> 00:22:38.980
different angle right we didn't want it
 

00:22:38.980 --> 00:22:41.130
different angle right we didn't want it
to focus so much on implementation

00:22:41.130 --> 00:22:41.140
to focus so much on implementation
 

00:22:41.140 --> 00:22:43.590
to focus so much on implementation
details like activities and fragments

00:22:43.590 --> 00:22:43.600
details like activities and fragments
 

00:22:43.600 --> 00:22:46.020
details like activities and fragments
instead we you know we took a step back

00:22:46.020 --> 00:22:46.030
instead we you know we took a step back
 

00:22:46.030 --> 00:22:48.180
instead we you know we took a step back
and we thought okay what would a user do

00:22:48.180 --> 00:22:48.190
and we thought okay what would a user do
 

00:22:48.190 --> 00:22:50.220
and we thought okay what would a user do
and if you think about it what do you do

00:22:50.220 --> 00:22:50.230
and if you think about it what do you do
 

00:22:50.230 --> 00:22:51.419
and if you think about it what do you do
every day if you interact with your

00:22:51.419 --> 00:22:51.429
every day if you interact with your
 

00:22:51.429 --> 00:22:54.480
every day if you interact with your
device you pick it up you'll find some

00:22:54.480 --> 00:22:54.490
device you pick it up you'll find some
 

00:22:54.490 --> 00:22:56.880
device you pick it up you'll find some
view on the screen then you'll perform

00:22:56.880 --> 00:22:56.890
view on the screen then you'll perform
 

00:22:56.890 --> 00:22:58.650
view on the screen then you'll perform
some action on it you might click on a

00:22:58.650 --> 00:22:58.660
some action on it you might click on a
 

00:22:58.660 --> 00:23:00.990
some action on it you might click on a
button swipe and then you observe some

00:23:00.990 --> 00:23:01.000
button swipe and then you observe some
 

00:23:01.000 --> 00:23:04.919
button swipe and then you observe some
UI state change and this is essentially

00:23:04.919 --> 00:23:04.929
UI state change and this is essentially
 

00:23:04.929 --> 00:23:09.690
UI state change and this is essentially
how our API however a special API looks

00:23:09.690 --> 00:23:09.700
how our API however a special API looks
 

00:23:09.700 --> 00:23:10.169
how our API however a special API looks
like

00:23:10.169 --> 00:23:10.179
like
 

00:23:10.179 --> 00:23:12.330
like
so we have the on.you method as the main

00:23:12.330 --> 00:23:12.340
so we have the on.you method as the main
 

00:23:12.340 --> 00:23:14.760
so we have the on.you method as the main
entry point and then we can just use a

00:23:14.760 --> 00:23:14.770
entry point and then we can just use a
 

00:23:14.770 --> 00:23:16.950
entry point and then we can just use a
view matcher to tell us press o to find

00:23:16.950 --> 00:23:16.960
view matcher to tell us press o to find
 

00:23:16.960 --> 00:23:20.220
view matcher to tell us press o to find
us a view in the current view hierarchy

00:23:20.220 --> 00:23:20.230
us a view in the current view hierarchy
 

00:23:20.230 --> 00:23:22.560
us a view in the current view hierarchy
and then once we have that view we can

00:23:22.560 --> 00:23:22.570
and then once we have that view we can
 

00:23:22.570 --> 00:23:25.650
and then once we have that view we can
either perform a view action on it or we

00:23:25.650 --> 00:23:25.660
either perform a view action on it or we
 

00:23:25.660 --> 00:23:28.770
either perform a view action on it or we
can verify a view assertion like a state

00:23:28.770 --> 00:23:28.780
can verify a view assertion like a state
 

00:23:28.780 --> 00:23:30.720
can verify a view assertion like a state
change in a UI and a view action in this

00:23:30.720 --> 00:23:30.730
change in a UI and a view action in this
 

00:23:30.730 --> 00:23:32.610
change in a UI and a view action in this
case which would be something like a

00:23:32.610 --> 00:23:32.620
case which would be something like a
 

00:23:32.620 --> 00:23:36.330
case which would be something like a
click or a scroll the good news is that

00:23:36.330 --> 00:23:36.340
click or a scroll the good news is that
 

00:23:36.340 --> 00:23:39.120
click or a scroll the good news is that
we created all the view matters actions

00:23:39.120 --> 00:23:39.130
we created all the view matters actions
 

00:23:39.130 --> 00:23:41.730
we created all the view matters actions
and assertions for you and I'm pretty

00:23:41.730 --> 00:23:41.740
and assertions for you and I'm pretty
 

00:23:41.740 --> 00:23:43.950
and assertions for you and I'm pretty
sure the ones that we have covered like

00:23:43.950 --> 00:23:43.960
sure the ones that we have covered like
 

00:23:43.960 --> 00:23:46.560
sure the ones that we have covered like
90% of the cases but the great thing is

00:23:46.560 --> 00:23:46.570
90% of the cases but the great thing is
 

00:23:46.570 --> 00:23:48.870
90% of the cases but the great thing is
all these three are extension points and

00:23:48.870 --> 00:23:48.880
all these three are extension points and
 

00:23:48.880 --> 00:23:51.900
all these three are extension points and
they make espresso very customizable and

00:23:51.900 --> 00:23:51.910
they make espresso very customizable and
 

00:23:51.910 --> 00:23:54.240
they make espresso very customizable and
you can actually tailor it to your needs

00:23:54.240 --> 00:23:54.250
you can actually tailor it to your needs
 

00:23:54.250 --> 00:23:58.010
you can actually tailor it to your needs
by writing your own measures actions and

00:23:58.010 --> 00:23:58.020
by writing your own measures actions and
 

00:23:58.020 --> 00:24:01.799
by writing your own measures actions and
view assertions but now let's look at

00:24:01.799 --> 00:24:01.809
view assertions but now let's look at
 

00:24:01.809 --> 00:24:03.990
view assertions but now let's look at
how you would actually write an espresso

00:24:03.990 --> 00:24:04.000
how you would actually write an espresso
 

00:24:04.000 --> 00:24:06.330
how you would actually write an espresso
test for your application but before we

00:24:06.330 --> 00:24:06.340
test for your application but before we
 

00:24:06.340 --> 00:24:08.310
test for your application but before we
dive in the implementation let's have a

00:24:08.310 --> 00:24:08.320
dive in the implementation let's have a
 

00:24:08.320 --> 00:24:10.710
dive in the implementation let's have a
look at the add node feature from the

00:24:10.710 --> 00:24:10.720
look at the add node feature from the
 

00:24:10.720 --> 00:24:14.549
look at the add node feature from the
Notes app so this is a UI flow I'm going

00:24:14.549 --> 00:24:14.559
Notes app so this is a UI flow I'm going
 

00:24:14.559 --> 00:24:15.600
Notes app so this is a UI flow I'm going
to show you and we're

00:24:15.600 --> 00:24:15.610
to show you and we're
 

00:24:15.610 --> 00:24:18.180
to show you and we're
going to implement it afterwards so we

00:24:18.180 --> 00:24:18.190
going to implement it afterwards so we
 

00:24:18.190 --> 00:24:20.820
going to implement it afterwards so we
start on a main note screen then the

00:24:20.820 --> 00:24:20.830
start on a main note screen then the
 

00:24:20.830 --> 00:24:22.320
start on a main note screen then the
next thing one do is we want to click on

00:24:22.320 --> 00:24:22.330
next thing one do is we want to click on
 

00:24:22.330 --> 00:24:23.970
next thing one do is we want to click on
a button this will bring up the add

00:24:23.970 --> 00:24:23.980
a button this will bring up the add
 

00:24:23.980 --> 00:24:26.070
a button this will bring up the add
notes fragments where we can type in a

00:24:26.070 --> 00:24:26.080
notes fragments where we can type in a
 

00:24:26.080 --> 00:24:28.710
notes fragments where we can type in a
title and a description then we can save

00:24:28.710 --> 00:24:28.720
title and a description then we can save
 

00:24:28.720 --> 00:24:30.780
title and a description then we can save
the note and this will bring us back to

00:24:30.780 --> 00:24:30.790
the note and this will bring us back to
 

00:24:30.790 --> 00:24:33.840
the note and this will bring us back to
the previous screen and as you can see

00:24:33.840 --> 00:24:33.850
the previous screen and as you can see
 

00:24:33.850 --> 00:24:35.640
the previous screen and as you can see
the note is displayed the new one is

00:24:35.640 --> 00:24:35.650
the note is displayed the new one is
 

00:24:35.650 --> 00:24:38.820
the note is displayed the new one is
displayed on the main note screen and we

00:24:38.820 --> 00:24:38.830
displayed on the main note screen and we
 

00:24:38.830 --> 00:24:42.690
displayed on the main note screen and we
want to verify that in our UI test so

00:24:42.690 --> 00:24:42.700
want to verify that in our UI test so
 

00:24:42.700 --> 00:24:44.280
want to verify that in our UI test so
yeah let's write a test so the first

00:24:44.280 --> 00:24:44.290
yeah let's write a test so the first
 

00:24:44.290 --> 00:24:46.740
yeah let's write a test so the first
thing that you have to do is you have to

00:24:46.740 --> 00:24:46.750
thing that you have to do is you have to
 

00:24:46.750 --> 00:24:48.720
thing that you have to do is you have to
create the note screen test in your

00:24:48.720 --> 00:24:48.730
create the note screen test in your
 

00:24:48.730 --> 00:24:51.510
create the note screen test in your
Android test source set and then you

00:24:51.510 --> 00:24:51.520
Android test source set and then you
 

00:24:51.520 --> 00:24:53.340
Android test source set and then you
have to do two things the first thing is

00:24:53.340 --> 00:24:53.350
have to do two things the first thing is
 

00:24:53.350 --> 00:24:56.130
have to do two things the first thing is
you have to tell j-unit that you

00:24:56.130 --> 00:24:56.140
you have to tell j-unit that you
 

00:24:56.140 --> 00:24:57.900
you have to tell j-unit that you
actually want to want to use the Android

00:24:57.900 --> 00:24:57.910
actually want to want to use the Android
 

00:24:57.910 --> 00:25:00.690
actually want to want to use the Android
j-unit forerunner and then the second

00:25:00.690 --> 00:25:00.700
j-unit forerunner and then the second
 

00:25:00.700 --> 00:25:02.909
j-unit forerunner and then the second
thing is you have to assign a test to a

00:25:02.909 --> 00:25:02.919
thing is you have to assign a test to a
 

00:25:02.919 --> 00:25:05.159
thing is you have to assign a test to a
bucket this is something that you don't

00:25:05.159 --> 00:25:05.169
bucket this is something that you don't
 

00:25:05.169 --> 00:25:07.740
bucket this is something that you don't
have to do but we recommend to do it

00:25:07.740 --> 00:25:07.750
have to do but we recommend to do it
 

00:25:07.750 --> 00:25:09.659
have to do but we recommend to do it
because especially if you run on a build

00:25:09.659 --> 00:25:09.669
because especially if you run on a build
 

00:25:09.669 --> 00:25:11.250
because especially if you run on a build
server you don't want to run all the

00:25:11.250 --> 00:25:11.260
server you don't want to run all the
 

00:25:11.260 --> 00:25:13.260
server you don't want to run all the
tests at a time you just want to run

00:25:13.260 --> 00:25:13.270
tests at a time you just want to run
 

00:25:13.270 --> 00:25:15.180
tests at a time you just want to run
either the small the medium or the large

00:25:15.180 --> 00:25:15.190
either the small the medium or the large
 

00:25:15.190 --> 00:25:16.860
either the small the medium or the large
ones and this isn't particularly

00:25:16.860 --> 00:25:16.870
ones and this isn't particularly
 

00:25:16.870 --> 00:25:18.600
ones and this isn't particularly
important for the large ones because

00:25:18.600 --> 00:25:18.610
important for the large ones because
 

00:25:18.610 --> 00:25:22.740
important for the large ones because
they will run a long time so once we've

00:25:22.740 --> 00:25:22.750
they will run a long time so once we've
 

00:25:22.750 --> 00:25:25.440
they will run a long time so once we've
done that we need to set up the stage we

00:25:25.440 --> 00:25:25.450
done that we need to set up the stage we
 

00:25:25.450 --> 00:25:27.299
done that we need to set up the stage we
have to set up our test fixture and we

00:25:27.299 --> 00:25:27.309
have to set up our test fixture and we
 

00:25:27.309 --> 00:25:29.789
have to set up our test fixture and we
do that using a new API in the Android

00:25:29.789 --> 00:25:29.799
do that using a new API in the Android
 

00:25:29.799 --> 00:25:31.650
do that using a new API in the Android
testing support library called activity

00:25:31.650 --> 00:25:31.660
testing support library called activity
 

00:25:31.660 --> 00:25:34.919
testing support library called activity
test role and so you might have heard of

00:25:34.919 --> 00:25:34.929
test role and so you might have heard of
 

00:25:34.929 --> 00:25:37.409
test role and so you might have heard of
rules they're not a really new concept

00:25:37.409 --> 00:25:37.419
rules they're not a really new concept
 

00:25:37.419 --> 00:25:38.940
rules they're not a really new concept
they have been around a while enjoying

00:25:38.940 --> 00:25:38.950
they have been around a while enjoying
 

00:25:38.950 --> 00:25:42.240
they have been around a while enjoying
it for but they're essentially that this

00:25:42.240 --> 00:25:42.250
it for but they're essentially that this
 

00:25:42.250 --> 00:25:44.070
it for but they're essentially that this
nonsensical API you can use to create

00:25:44.070 --> 00:25:44.080
nonsensical API you can use to create
 

00:25:44.080 --> 00:25:46.860
nonsensical API you can use to create
reusable components which you can use in

00:25:46.860 --> 00:25:46.870
reusable components which you can use in
 

00:25:46.870 --> 00:25:48.780
reusable components which you can use in
all of your tests and they've reduced

00:25:48.780 --> 00:25:48.790
all of your tests and they've reduced
 

00:25:48.790 --> 00:25:51.180
all of your tests and they've reduced
boilerplate code and that's exactly what

00:25:51.180 --> 00:25:51.190
boilerplate code and that's exactly what
 

00:25:51.190 --> 00:25:53.190
boilerplate code and that's exactly what
we can see here so in order to use

00:25:53.190 --> 00:25:53.200
we can see here so in order to use
 

00:25:53.200 --> 00:25:54.930
we can see here so in order to use
activity tests rule the only thing that

00:25:54.930 --> 00:25:54.940
activity tests rule the only thing that
 

00:25:54.940 --> 00:25:56.340
activity tests rule the only thing that
you have to do is you have to create an

00:25:56.340 --> 00:25:56.350
you have to do is you have to create an
 

00:25:56.350 --> 00:25:59.190
you have to do is you have to create an
instance in a public field annotated

00:25:59.190 --> 00:25:59.200
instance in a public field annotated
 

00:25:59.200 --> 00:26:00.720
instance in a public field annotated
with the add rule annotation and then

00:26:00.720 --> 00:26:00.730
with the add rule annotation and then
 

00:26:00.730 --> 00:26:03.090
with the add rule annotation and then
what this will do is it will start the

00:26:03.090 --> 00:26:03.100
what this will do is it will start the
 

00:26:03.100 --> 00:26:04.919
what this will do is it will start the
activity before each test and will

00:26:04.919 --> 00:26:04.929
activity before each test and will
 

00:26:04.929 --> 00:26:07.710
activity before each test and will
finish it after after each test run

00:26:07.710 --> 00:26:07.720
finish it after after each test run
 

00:26:07.720 --> 00:26:10.890
finish it after after each test run
which is great and now we're we're

00:26:10.890 --> 00:26:10.900
which is great and now we're we're
 

00:26:10.900 --> 00:26:13.890
which is great and now we're we're
actually ready to exercise our UI and

00:26:13.890 --> 00:26:13.900
actually ready to exercise our UI and
 

00:26:13.900 --> 00:26:16.140
actually ready to exercise our UI and
here's how you do it with espresso if

00:26:16.140 --> 00:26:16.150
here's how you do it with espresso if
 

00:26:16.150 --> 00:26:18.150
here's how you do it with espresso if
you remember what I just showed you the

00:26:18.150 --> 00:26:18.160
you remember what I just showed you the
 

00:26:18.160 --> 00:26:19.560
you remember what I just showed you the
first thing that we want to do is we

00:26:19.560 --> 00:26:19.570
first thing that we want to do is we
 

00:26:19.570 --> 00:26:22.500
first thing that we want to do is we
want to click this button at the bottom

00:26:22.500 --> 00:26:22.510
want to click this button at the bottom
 

00:26:22.510 --> 00:26:24.780
want to click this button at the bottom
right of the screen so the way we do it

00:26:24.780 --> 00:26:24.790
right of the screen so the way we do it
 

00:26:24.790 --> 00:26:27.090
right of the screen so the way we do it
in espresso we ask a spresso to give us

00:26:27.090 --> 00:26:27.100
in espresso we ask a spresso to give us
 

00:26:27.100 --> 00:26:29.130
in espresso we ask a spresso to give us
the view for

00:26:29.130 --> 00:26:29.140
the view for
 

00:26:29.140 --> 00:26:31.860
the view for
responding at node ID from the current

00:26:31.860 --> 00:26:31.870
responding at node ID from the current
 

00:26:31.870 --> 00:26:34.530
responding at node ID from the current
view hierarchy and we do that by using a

00:26:34.530 --> 00:26:34.540
view hierarchy and we do that by using a
 

00:26:34.540 --> 00:26:37.980
view hierarchy and we do that by using a
with ID view matcher and espresso will

00:26:37.980 --> 00:26:37.990
with ID view matcher and espresso will
 

00:26:37.990 --> 00:26:40.020
with ID view matcher and espresso will
return us that view and then we want to

00:26:40.020 --> 00:26:40.030
return us that view and then we want to
 

00:26:40.030 --> 00:26:42.810
return us that view and then we want to
perform a click action on it an espresso

00:26:42.810 --> 00:26:42.820
perform a click action on it an espresso
 

00:26:42.820 --> 00:26:46.470
perform a click action on it an espresso
will get the view click on it and then

00:26:46.470 --> 00:26:46.480
will get the view click on it and then
 

00:26:46.480 --> 00:26:48.810
will get the view click on it and then
the add notes fragments will show up and

00:26:48.810 --> 00:26:48.820
the add notes fragments will show up and
 

00:26:48.820 --> 00:26:51.120
the add notes fragments will show up and
then we want to type a title enter

00:26:51.120 --> 00:26:51.130
then we want to type a title enter
 

00:26:51.130 --> 00:26:53.040
then we want to type a title enter
descriptions in the corresponding edit

00:26:53.040 --> 00:26:53.050
descriptions in the corresponding edit
 

00:26:53.050 --> 00:26:55.950
descriptions in the corresponding edit
text fields and again we use the same

00:26:55.950 --> 00:26:55.960
text fields and again we use the same
 

00:26:55.960 --> 00:26:59.160
text fields and again we use the same
entry point on view we use a with ID

00:26:59.160 --> 00:26:59.170
entry point on view we use a with ID
 

00:26:59.170 --> 00:27:01.830
entry point on view we use a with ID
matcher again to get ahold of the title

00:27:01.830 --> 00:27:01.840
matcher again to get ahold of the title
 

00:27:01.840 --> 00:27:04.380
matcher again to get ahold of the title
and description abuse from the view

00:27:04.380 --> 00:27:04.390
and description abuse from the view
 

00:27:04.390 --> 00:27:06.960
and description abuse from the view
hierarchy but this time we don't click

00:27:06.960 --> 00:27:06.970
hierarchy but this time we don't click
 

00:27:06.970 --> 00:27:09.630
hierarchy but this time we don't click
on it we just use a type text action to

00:27:09.630 --> 00:27:09.640
on it we just use a type text action to
 

00:27:09.640 --> 00:27:12.600
on it we just use a type text action to
type some text in the inner title and a

00:27:12.600 --> 00:27:12.610
type some text in the inner title and a
 

00:27:12.610 --> 00:27:14.760
type some text in the inner title and a
description and then we want to save the

00:27:14.760 --> 00:27:14.770
description and then we want to save the
 

00:27:14.770 --> 00:27:16.710
description and then we want to save the
note and this works pretty much the same

00:27:16.710 --> 00:27:16.720
note and this works pretty much the same
 

00:27:16.720 --> 00:27:18.780
note and this works pretty much the same
like the first step we get a whole of

00:27:18.780 --> 00:27:18.790
like the first step we get a whole of
 

00:27:18.790 --> 00:27:21.600
like the first step we get a whole of
the view using a with ID matcher and

00:27:21.600 --> 00:27:21.610
the view using a with ID matcher and
 

00:27:21.610 --> 00:27:25.770
the view using a with ID matcher and
then we perform a click action and the

00:27:25.770 --> 00:27:25.780
then we perform a click action and the
 

00:27:25.780 --> 00:27:27.240
then we perform a click action and the
last thing that we want to do is we want

00:27:27.240 --> 00:27:27.250
last thing that we want to do is we want
 

00:27:27.250 --> 00:27:29.280
last thing that we want to do is we want
to actually verify that the note that

00:27:29.280 --> 00:27:29.290
to actually verify that the note that
 

00:27:29.290 --> 00:27:31.280
to actually verify that the note that
we've just added to our model is

00:27:31.280 --> 00:27:31.290
we've just added to our model is
 

00:27:31.290 --> 00:27:34.440
we've just added to our model is
displayed on-screen and this time we're

00:27:34.440 --> 00:27:34.450
displayed on-screen and this time we're
 

00:27:34.450 --> 00:27:35.520
displayed on-screen and this time we're
going to do things a little bit

00:27:35.520 --> 00:27:35.530
going to do things a little bit
 

00:27:35.530 --> 00:27:37.380
going to do things a little bit
differently we use the on view method

00:27:37.380 --> 00:27:37.390
differently we use the on view method
 

00:27:37.390 --> 00:27:39.900
differently we use the on view method
but instead of matching a view by its ID

00:27:39.900 --> 00:27:39.910
but instead of matching a view by its ID
 

00:27:39.910 --> 00:27:42.960
but instead of matching a view by its ID
we can also use text and tell espresso

00:27:42.960 --> 00:27:42.970
we can also use text and tell espresso
 

00:27:42.970 --> 00:27:45.000
we can also use text and tell espresso
give me the view from the view hierarchy

00:27:45.000 --> 00:27:45.010
give me the view from the view hierarchy
 

00:27:45.010 --> 00:27:47.430
give me the view from the view hierarchy
which contains these text and then we

00:27:47.430 --> 00:27:47.440
which contains these text and then we
 

00:27:47.440 --> 00:27:49.620
which contains these text and then we
can use the check method to verify that

00:27:49.620 --> 00:27:49.630
can use the check method to verify that
 

00:27:49.630 --> 00:27:51.440
can use the check method to verify that
the view is actually displayed on-screen

00:27:51.440 --> 00:27:51.450
the view is actually displayed on-screen
 

00:27:51.450 --> 00:27:54.870
the view is actually displayed on-screen
so if you if you look at this this UI

00:27:54.870 --> 00:27:54.880
so if you if you look at this this UI
 

00:27:54.880 --> 00:27:58.020
so if you if you look at this this UI
flow it's not an easy UI flow but if you

00:27:58.020 --> 00:27:58.030
flow it's not an easy UI flow but if you
 

00:27:58.030 --> 00:27:59.640
flow it's not an easy UI flow but if you
look at the code it looks really easy

00:27:59.640 --> 00:27:59.650
look at the code it looks really easy
 

00:27:59.650 --> 00:28:02.370
look at the code it looks really easy
it's really readable and there's no

00:28:02.370 --> 00:28:02.380
it's really readable and there's no
 

00:28:02.380 --> 00:28:03.810
it's really readable and there's no
implementation details

00:28:03.810 --> 00:28:03.820
implementation details
 

00:28:03.820 --> 00:28:06.600
implementation details
there's no activities no fragments you

00:28:06.600 --> 00:28:06.610
there's no activities no fragments you
 

00:28:06.610 --> 00:28:08.460
there's no activities no fragments you
essentially don't have to deal with

00:28:08.460 --> 00:28:08.470
essentially don't have to deal with
 

00:28:08.470 --> 00:28:10.560
essentially don't have to deal with
those details anymore and and in fact

00:28:10.560 --> 00:28:10.570
those details anymore and and in fact
 

00:28:10.570 --> 00:28:13.560
those details anymore and and in fact
espresso only cares about views and

00:28:13.560 --> 00:28:13.570
espresso only cares about views and
 

00:28:13.570 --> 00:28:14.610
espresso only cares about views and
windows

00:28:14.610 --> 00:28:14.620
windows
 

00:28:14.620 --> 00:28:16.560
windows
that's all it cares about and it hides

00:28:16.560 --> 00:28:16.570
that's all it cares about and it hides
 

00:28:16.570 --> 00:28:19.200
that's all it cares about and it hides
most of the complexity and most of the

00:28:19.200 --> 00:28:19.210
most of the complexity and most of the
 

00:28:19.210 --> 00:28:23.430
most of the complexity and most of the
UI synchronization from you and now of

00:28:23.430 --> 00:28:23.440
UI synchronization from you and now of
 

00:28:23.440 --> 00:28:24.960
UI synchronization from you and now of
course you want to run your tests

00:28:24.960 --> 00:28:24.970
course you want to run your tests
 

00:28:24.970 --> 00:28:27.510
course you want to run your tests
um this works pretty much the same like

00:28:27.510 --> 00:28:27.520
um this works pretty much the same like
 

00:28:27.520 --> 00:28:29.730
um this works pretty much the same like
Jose showed you with the unit tests so

00:28:29.730 --> 00:28:29.740
Jose showed you with the unit tests so
 

00:28:29.740 --> 00:28:31.320
Jose showed you with the unit tests so
you can either right-click on a test

00:28:31.320 --> 00:28:31.330
you can either right-click on a test
 

00:28:31.330 --> 00:28:34.500
you can either right-click on a test
class and click on the play button or

00:28:34.500 --> 00:28:34.510
class and click on the play button or
 

00:28:34.510 --> 00:28:36.210
class and click on the play button or
you can also do it on a method level

00:28:36.210 --> 00:28:36.220
you can also do it on a method level
 

00:28:36.220 --> 00:28:38.490
you can also do it on a method level
from the test class but what this will

00:28:38.490 --> 00:28:38.500
from the test class but what this will
 

00:28:38.500 --> 00:28:40.980
from the test class but what this will
do is it'll create two apks for you a

00:28:40.980 --> 00:28:40.990
do is it'll create two apks for you a
 

00:28:40.990 --> 00:28:42.290
do is it'll create two apks for you a
test APK

00:28:42.290 --> 00:28:42.300
test APK
 

00:28:42.300 --> 00:28:45.230
test APK
and an app apk it'll deploy both of them

00:28:45.230 --> 00:28:45.240
and an app apk it'll deploy both of them
 

00:28:45.240 --> 00:28:48.260
and an app apk it'll deploy both of them
to your device and then the test apk

00:28:48.260 --> 00:28:48.270
to your device and then the test apk
 

00:28:48.270 --> 00:28:50.920
to your device and then the test apk
will instrument the app using

00:28:50.920 --> 00:28:50.930
will instrument the app using
 

00:28:50.930 --> 00:28:54.710
will instrument the app using
instrumentation and exercise its UI so

00:28:54.710 --> 00:28:54.720
instrumentation and exercise its UI so
 

00:28:54.720 --> 00:28:57.620
instrumentation and exercise its UI so
you can of course do this from Gradle

00:28:57.620 --> 00:28:57.630
you can of course do this from Gradle
 

00:28:57.630 --> 00:28:59.690
you can of course do this from Gradle
this is something that you wouldn't use

00:28:59.690 --> 00:28:59.700
this is something that you wouldn't use
 

00:28:59.700 --> 00:29:01.970
this is something that you wouldn't use
in your local development flow but it's

00:29:01.970 --> 00:29:01.980
in your local development flow but it's
 

00:29:01.980 --> 00:29:03.860
in your local development flow but it's
something that comes in very handy if

00:29:03.860 --> 00:29:03.870
something that comes in very handy if
 

00:29:03.870 --> 00:29:06.500
something that comes in very handy if
you actually run from a build server and

00:29:06.500 --> 00:29:06.510
you actually run from a build server and
 

00:29:06.510 --> 00:29:08.810
you actually run from a build server and
if you use as the I server which is

00:29:08.810 --> 00:29:08.820
if you use as the I server which is
 

00:29:08.820 --> 00:29:10.370
if you use as the I server which is
something that I think most of you guys

00:29:10.370 --> 00:29:10.380
something that I think most of you guys
 

00:29:10.380 --> 00:29:16.910
something that I think most of you guys
do anyways so and now at this point we

00:29:16.910 --> 00:29:16.920
do anyways so and now at this point we
 

00:29:16.920 --> 00:29:20.780
do anyways so and now at this point we
need to wire up our Android code with

00:29:20.780 --> 00:29:20.790
need to wire up our Android code with
 

00:29:20.790 --> 00:29:24.050
need to wire up our Android code with
our architecture right and the good news

00:29:24.050 --> 00:29:24.060
our architecture right and the good news
 

00:29:24.060 --> 00:29:25.520
our architecture right and the good news
about this is because we already

00:29:25.520 --> 00:29:25.530
about this is because we already
 

00:29:25.530 --> 00:29:27.230
about this is because we already
implemented all the logic in the

00:29:27.230 --> 00:29:27.240
implemented all the logic in the
 

00:29:27.240 --> 00:29:29.480
implemented all the logic in the
presenter our Android implementation

00:29:29.480 --> 00:29:29.490
presenter our Android implementation
 

00:29:29.490 --> 00:29:31.550
presenter our Android implementation
will be much simpler often it's just

00:29:31.550 --> 00:29:31.560
will be much simpler often it's just
 

00:29:31.560 --> 00:29:34.370
will be much simpler often it's just
setting some text on a text view field

00:29:34.370 --> 00:29:34.380
setting some text on a text view field
 

00:29:34.380 --> 00:29:37.610
setting some text on a text view field
and often it's very simple and the other

00:29:37.610 --> 00:29:37.620
and often it's very simple and the other
 

00:29:37.620 --> 00:29:39.430
and often it's very simple and the other
good thing is because we know that

00:29:39.430 --> 00:29:39.440
good thing is because we know that
 

00:29:39.440 --> 00:29:41.810
good thing is because we know that
everything already works because we have

00:29:41.810 --> 00:29:41.820
everything already works because we have
 

00:29:41.820 --> 00:29:45.350
everything already works because we have
the UI tests for the presenter this is a

00:29:45.350 --> 00:29:45.360
the UI tests for the presenter this is a
 

00:29:45.360 --> 00:29:47.960
the UI tests for the presenter this is a
great approach to attempt testing

00:29:47.960 --> 00:29:47.970
great approach to attempt testing
 

00:29:47.970 --> 00:29:50.390
great approach to attempt testing
general and combine the unit testing

00:29:50.390 --> 00:29:50.400
general and combine the unit testing
 

00:29:50.400 --> 00:29:53.210
general and combine the unit testing
with the UI testing and at one point

00:29:53.210 --> 00:29:53.220
with the UI testing and at one point
 

00:29:53.220 --> 00:29:56.210
with the UI testing and at one point
you'll actually go green your tests will

00:29:56.210 --> 00:29:56.220
you'll actually go green your tests will
 

00:29:56.220 --> 00:29:58.520
you'll actually go green your tests will
pass and then you will see something

00:29:58.520 --> 00:29:58.530
pass and then you will see something
 

00:29:58.530 --> 00:30:00.080
pass and then you will see something
like you can see your on the right and

00:30:00.080 --> 00:30:00.090
like you can see your on the right and
 

00:30:00.090 --> 00:30:02.780
like you can see your on the right and
I've been working on this since many

00:30:02.780 --> 00:30:02.790
I've been working on this since many
 

00:30:02.790 --> 00:30:05.300
I've been working on this since many
years now and I'm still fascinated if I

00:30:05.300 --> 00:30:05.310
years now and I'm still fascinated if I
 

00:30:05.310 --> 00:30:08.090
years now and I'm still fascinated if I
see those tests run on a device and you

00:30:08.090 --> 00:30:08.100
see those tests run on a device and you
 

00:30:08.100 --> 00:30:09.740
see those tests run on a device and you
should really try it out because it's

00:30:09.740 --> 00:30:09.750
should really try it out because it's
 

00:30:09.750 --> 00:30:12.410
should really try it out because it's
it's a lot of fun to write UI tests with

00:30:12.410 --> 00:30:12.420
it's a lot of fun to write UI tests with
 

00:30:12.420 --> 00:30:14.740
it's a lot of fun to write UI tests with
that presser so let me summarize

00:30:14.740 --> 00:30:14.750
that presser so let me summarize
 

00:30:14.750 --> 00:30:17.360
that presser so let me summarize
espresso gives you frictionless UI

00:30:17.360 --> 00:30:17.370
espresso gives you frictionless UI
 

00:30:17.370 --> 00:30:20.720
espresso gives you frictionless UI
testing espresso is really reliable you

00:30:20.720 --> 00:30:20.730
testing espresso is really reliable you
 

00:30:20.730 --> 00:30:22.820
testing espresso is really reliable you
will see that if you switch to espresso

00:30:22.820 --> 00:30:22.830
will see that if you switch to espresso
 

00:30:22.830 --> 00:30:25.760
will see that if you switch to espresso
if you start using it you will see your

00:30:25.760 --> 00:30:25.770
if you start using it you will see your
 

00:30:25.770 --> 00:30:28.520
if you start using it you will see your
test will be much more reliable they're

00:30:28.520 --> 00:30:28.530
test will be much more reliable they're
 

00:30:28.530 --> 00:30:31.340
test will be much more reliable they're
also more readable they're almost like a

00:30:31.340 --> 00:30:31.350
also more readable they're almost like a
 

00:30:31.350 --> 00:30:34.400
also more readable they're almost like a
UI spec so think about onboarding a new

00:30:34.400 --> 00:30:34.410
UI spec so think about onboarding a new
 

00:30:34.410 --> 00:30:36.110
UI spec so think about onboarding a new
member to your team you can just point

00:30:36.110 --> 00:30:36.120
member to your team you can just point
 

00:30:36.120 --> 00:30:38.180
member to your team you can just point
them to the test they can read through

00:30:38.180 --> 00:30:38.190
them to the test they can read through
 

00:30:38.190 --> 00:30:40.070
them to the test they can read through
the test they can almost figure out the

00:30:40.070 --> 00:30:40.080
the test they can almost figure out the
 

00:30:40.080 --> 00:30:42.010
the test they can almost figure out the
whole UI flow just from your test and

00:30:42.010 --> 00:30:42.020
whole UI flow just from your test and
 

00:30:42.020 --> 00:30:44.690
whole UI flow just from your test and
maybe they get excited when they see how

00:30:44.690 --> 00:30:44.700
maybe they get excited when they see how
 

00:30:44.700 --> 00:30:47.360
maybe they get excited when they see how
easy it is to write a UI test and it's

00:30:47.360 --> 00:30:47.370
easy it is to write a UI test and it's
 

00:30:47.370 --> 00:30:49.760
easy it is to write a UI test and it's
easier to onboard them to write to write

00:30:49.760 --> 00:30:49.770
easier to onboard them to write to write
 

00:30:49.770 --> 00:30:51.770
easier to onboard them to write to write
UI tests in the first place the last

00:30:51.770 --> 00:30:51.780
UI tests in the first place the last
 

00:30:51.780 --> 00:30:54.020
UI tests in the first place the last
thing I want to mention is espresso is

00:30:54.020 --> 00:30:54.030
thing I want to mention is espresso is
 

00:30:54.030 --> 00:30:55.620
thing I want to mention is espresso is
blazing fast

00:30:55.620 --> 00:30:55.630
blazing fast
 

00:30:55.630 --> 00:30:57.510
blazing fast
you do all the synchronization for you

00:30:57.510 --> 00:30:57.520
you do all the synchronization for you
 

00:30:57.520 --> 00:31:00.510
you do all the synchronization for you
and we know when to execute the next

00:31:00.510 --> 00:31:00.520
and we know when to execute the next
 

00:31:00.520 --> 00:31:03.030
and we know when to execute the next
view action immediately after the

00:31:03.030 --> 00:31:03.040
view action immediately after the
 

00:31:03.040 --> 00:31:05.670
view action immediately after the
previous one has finished and you will

00:31:05.670 --> 00:31:05.680
previous one has finished and you will
 

00:31:05.680 --> 00:31:08.250
previous one has finished and you will
you will immediately notice this if you

00:31:08.250 --> 00:31:08.260
you will immediately notice this if you
 

00:31:08.260 --> 00:31:10.110
you will immediately notice this if you
have a lot of tests and if you switch

00:31:10.110 --> 00:31:10.120
have a lot of tests and if you switch
 

00:31:10.120 --> 00:31:13.320
have a lot of tests and if you switch
over to espresso so to summarize the

00:31:13.320 --> 00:31:13.330
over to espresso so to summarize the
 

00:31:13.330 --> 00:31:15.420
over to espresso so to summarize the
spresso makes for non flaky tests and

00:31:15.420 --> 00:31:15.430
spresso makes for non flaky tests and
 

00:31:15.430 --> 00:31:16.830
spresso makes for non flaky tests and
you should really try it out because

00:31:16.830 --> 00:31:16.840
you should really try it out because
 

00:31:16.840 --> 00:31:18.930
you should really try it out because
it's amazing framework and it's a step

00:31:18.930 --> 00:31:18.940
it's amazing framework and it's a step
 

00:31:18.940 --> 00:31:21.660
it's amazing framework and it's a step
forward in UI testing on Android and

00:31:21.660 --> 00:31:21.670
forward in UI testing on Android and
 

00:31:21.670 --> 00:31:24.210
forward in UI testing on Android and
with that I'm very excited to have J to

00:31:24.210 --> 00:31:24.220
with that I'm very excited to have J to
 

00:31:24.220 --> 00:31:26.160
with that I'm very excited to have J to
talk about some of the newer stuff that

00:31:26.160 --> 00:31:26.170
talk about some of the newer stuff that
 

00:31:26.170 --> 00:31:28.080
talk about some of the newer stuff that
we've been working on because now that

00:31:28.080 --> 00:31:28.090
we've been working on because now that
 

00:31:28.090 --> 00:31:29.820
we've been working on because now that
we have all the low-level API is we

00:31:29.820 --> 00:31:29.830
we have all the low-level API is we
 

00:31:29.830 --> 00:31:31.590
we have all the low-level API is we
really want to take a smarter approach

00:31:31.590 --> 00:31:31.600
really want to take a smarter approach
 

00:31:31.600 --> 00:31:33.330
really want to take a smarter approach
to testing and we want to build the

00:31:33.330 --> 00:31:33.340
to testing and we want to build the
 

00:31:33.340 --> 00:31:35.100
to testing and we want to build the
higher-level tools which sits on the

00:31:35.100 --> 00:31:35.110
higher-level tools which sits on the
 

00:31:35.110 --> 00:31:37.680
higher-level tools which sits on the
low-level API is to enable more powerful

00:31:37.680 --> 00:31:37.690
low-level API is to enable more powerful
 

00:31:37.690 --> 00:31:39.900
low-level API is to enable more powerful
use cases cool thank you very much the

00:31:39.900 --> 00:31:39.910
use cases cool thank you very much the
 

00:31:39.910 --> 00:31:46.119
use cases cool thank you very much the
fun

00:31:46.119 --> 00:31:46.129
 
 

00:31:46.129 --> 00:31:49.639
 
so we've had Jose talking about unit

00:31:49.639 --> 00:31:49.649
so we've had Jose talking about unit
 

00:31:49.649 --> 00:31:51.830
so we've had Jose talking about unit
testing as the fundamental way we should

00:31:51.830 --> 00:31:51.840
testing as the fundamental way we should
 

00:31:51.840 --> 00:31:53.899
testing as the fundamental way we should
be testing our applications then we had

00:31:53.899 --> 00:31:53.909
be testing our applications then we had
 

00:31:53.909 --> 00:31:56.240
be testing our applications then we had
Stephan talking about integration into

00:31:56.240 --> 00:31:56.250
Stephan talking about integration into
 

00:31:56.250 --> 00:31:58.460
Stephan talking about integration into
eye tests being able to test the actual

00:31:58.460 --> 00:31:58.470
eye tests being able to test the actual
 

00:31:58.470 --> 00:32:00.950
eye tests being able to test the actual
Android part of application and as

00:32:00.950 --> 00:32:00.960
Android part of application and as
 

00:32:00.960 --> 00:32:02.450
Android part of application and as
you've probably all realized by now this

00:32:02.450 --> 00:32:02.460
you've probably all realized by now this
 

00:32:02.460 --> 00:32:04.100
you've probably all realized by now this
testing tool that my team have matured

00:32:04.100 --> 00:32:04.110
testing tool that my team have matured
 

00:32:04.110 --> 00:32:06.529
testing tool that my team have matured
quite a bit over the last few years so

00:32:06.529 --> 00:32:06.539
quite a bit over the last few years so
 

00:32:06.539 --> 00:32:08.779
quite a bit over the last few years so
now is the time to start thinking beyond

00:32:08.779 --> 00:32:08.789
now is the time to start thinking beyond
 

00:32:08.789 --> 00:32:10.639
now is the time to start thinking beyond
simply verifying the functionality of

00:32:10.639 --> 00:32:10.649
simply verifying the functionality of
 

00:32:10.649 --> 00:32:12.680
simply verifying the functionality of
our of our application let's think about

00:32:12.680 --> 00:32:12.690
our of our application let's think about
 

00:32:12.690 --> 00:32:14.600
our of our application let's think about
performance testing and this very much

00:32:14.600 --> 00:32:14.610
performance testing and this very much
 

00:32:14.610 --> 00:32:16.669
performance testing and this very much
sits at the top of our testing permit

00:32:16.669 --> 00:32:16.679
sits at the top of our testing permit
 

00:32:16.679 --> 00:32:18.499
sits at the top of our testing permit
you know we take advantage of all the

00:32:18.499 --> 00:32:18.509
you know we take advantage of all the
 

00:32:18.509 --> 00:32:20.539
you know we take advantage of all the
all the great testing tools and all the

00:32:20.539 --> 00:32:20.549
all the great testing tools and all the
 

00:32:20.549 --> 00:32:21.769
all the great testing tools and all the
platform features that are already out

00:32:21.769 --> 00:32:21.779
platform features that are already out
 

00:32:21.779 --> 00:32:25.490
platform features that are already out
there to build our performance tests so

00:32:25.490 --> 00:32:25.500
there to build our performance tests so
 

00:32:25.500 --> 00:32:27.769
there to build our performance tests so
performance testing today I'm sure many

00:32:27.769 --> 00:32:27.779
performance testing today I'm sure many
 

00:32:27.779 --> 00:32:30.110
performance testing today I'm sure many
of you have experiences yourself is very

00:32:30.110 --> 00:32:30.120
of you have experiences yourself is very
 

00:32:30.120 --> 00:32:32.360
of you have experiences yourself is very
painful traditionally you have a few

00:32:32.360 --> 00:32:32.370
painful traditionally you have a few
 

00:32:32.370 --> 00:32:34.460
painful traditionally you have a few
lower spec devices for example you have

00:32:34.460 --> 00:32:34.470
lower spec devices for example you have
 

00:32:34.470 --> 00:32:36.980
lower spec devices for example you have
a QA team that has access to those maybe

00:32:36.980 --> 00:32:36.990
a QA team that has access to those maybe
 

00:32:36.990 --> 00:32:38.899
a QA team that has access to those maybe
you have a slower network at home that

00:32:38.899 --> 00:32:38.909
you have a slower network at home that
 

00:32:38.909 --> 00:32:40.519
you have a slower network at home that
you just try to run the application and

00:32:40.519 --> 00:32:40.529
you just try to run the application and
 

00:32:40.529 --> 00:32:43.129
you just try to run the application and
see if it performs okay or if anything

00:32:43.129 --> 00:32:43.139
see if it performs okay or if anything
 

00:32:43.139 --> 00:32:44.539
see if it performs okay or if anything
is a bit slower than it should be and

00:32:44.539 --> 00:32:44.549
is a bit slower than it should be and
 

00:32:44.549 --> 00:32:47.149
is a bit slower than it should be and
the problem with that is you can't

00:32:47.149 --> 00:32:47.159
the problem with that is you can't
 

00:32:47.159 --> 00:32:48.950
the problem with that is you can't
really easily reproduce any of this it's

00:32:48.950 --> 00:32:48.960
really easily reproduce any of this it's
 

00:32:48.960 --> 00:32:50.779
really easily reproduce any of this it's
really hard for you to make tuna to

00:32:50.779 --> 00:32:50.789
really hard for you to make tuna to
 

00:32:50.789 --> 00:32:52.850
really hard for you to make tuna to
track trends to see how your application

00:32:52.850 --> 00:32:52.860
track trends to see how your application
 

00:32:52.860 --> 00:32:55.159
track trends to see how your application
is performing right and especially if

00:32:55.159 --> 00:32:55.169
is performing right and especially if
 

00:32:55.169 --> 00:32:56.720
is performing right and especially if
you're already or if you've automated

00:32:56.720 --> 00:32:56.730
you're already or if you've automated
 

00:32:56.730 --> 00:32:58.249
you're already or if you've automated
the rest of your tests already

00:32:58.249 --> 00:32:58.259
the rest of your tests already
 

00:32:58.259 --> 00:33:00.259
the rest of your tests already
why can't you automate our performance

00:33:00.259 --> 00:33:00.269
why can't you automate our performance
 

00:33:00.269 --> 00:33:02.119
why can't you automate our performance
tests and why can't you take advantage

00:33:02.119 --> 00:33:02.129
tests and why can't you take advantage
 

00:33:02.129 --> 00:33:03.680
tests and why can't you take advantage
of the existing tests that you have

00:33:03.680 --> 00:33:03.690
of the existing tests that you have
 

00:33:03.690 --> 00:33:06.049
of the existing tests that you have
already written for our for this

00:33:06.049 --> 00:33:06.059
already written for our for this
 

00:33:06.059 --> 00:33:09.529
already written for our for this
particular part let me introduce the

00:33:09.529 --> 00:33:09.539
particular part let me introduce the
 

00:33:09.539 --> 00:33:11.600
particular part let me introduce the
performance testing harness this is

00:33:11.600 --> 00:33:11.610
performance testing harness this is
 

00:33:11.610 --> 00:33:13.369
performance testing harness this is
actually power of a great code lab that

00:33:13.369 --> 00:33:13.379
actually power of a great code lab that
 

00:33:13.379 --> 00:33:14.930
actually power of a great code lab that
we've put together that I highly

00:33:14.930 --> 00:33:14.940
we've put together that I highly
 

00:33:14.940 --> 00:33:16.730
we've put together that I highly
encourage you to check out after our

00:33:16.730 --> 00:33:16.740
encourage you to check out after our
 

00:33:16.740 --> 00:33:19.970
encourage you to check out after our
talk the way this works is that we have

00:33:19.970 --> 00:33:19.980
talk the way this works is that we have
 

00:33:19.980 --> 00:33:22.340
talk the way this works is that we have
a new custom Gradle plugin that contains

00:33:22.340 --> 00:33:22.350
a new custom Gradle plugin that contains
 

00:33:22.350 --> 00:33:25.430
a new custom Gradle plugin that contains
a task that you can run which is used to

00:33:25.430 --> 00:33:25.440
a task that you can run which is used to
 

00:33:25.440 --> 00:33:27.499
a task that you can run which is used to
around your performance tests the trick

00:33:27.499 --> 00:33:27.509
around your performance tests the trick
 

00:33:27.509 --> 00:33:30.320
around your performance tests the trick
comes from a special test listener that

00:33:30.320 --> 00:33:30.330
comes from a special test listener that
 

00:33:30.330 --> 00:33:34.070
comes from a special test listener that
sits in your test apk the basic idea is

00:33:34.070 --> 00:33:34.080
sits in your test apk the basic idea is
 

00:33:34.080 --> 00:33:36.259
sits in your test apk the basic idea is
that we capture some additional

00:33:36.259 --> 00:33:36.269
that we capture some additional
 

00:33:36.269 --> 00:33:38.180
that we capture some additional
statistics and some additional log files

00:33:38.180 --> 00:33:38.190
statistics and some additional log files
 

00:33:38.190 --> 00:33:40.669
statistics and some additional log files
as you are executing the tests so for

00:33:40.669 --> 00:33:40.679
as you are executing the tests so for
 

00:33:40.679 --> 00:33:42.710
as you are executing the tests so for
example we can we can track the

00:33:42.710 --> 00:33:42.720
example we can we can track the
 

00:33:42.720 --> 00:33:44.480
example we can we can track the
rendering performance the Lochhead

00:33:44.480 --> 00:33:44.490
rendering performance the Lochhead
 

00:33:44.490 --> 00:33:46.490
rendering performance the Lochhead
output for each of the tests as you're

00:33:46.490 --> 00:33:46.500
output for each of the tests as you're
 

00:33:46.500 --> 00:33:48.830
output for each of the tests as you're
running it captured on the device copy

00:33:48.830 --> 00:33:48.840
running it captured on the device copy
 

00:33:48.840 --> 00:33:50.330
running it captured on the device copy
it back to your development development

00:33:50.330 --> 00:33:50.340
it back to your development development
 

00:33:50.340 --> 00:33:53.830
it back to your development development
machine and then do some analysis on it

00:33:53.830 --> 00:33:53.840
machine and then do some analysis on it
 

00:33:53.840 --> 00:33:57.379
machine and then do some analysis on it
the key part of this are some custom J

00:33:57.379 --> 00:33:57.389
the key part of this are some custom J
 

00:33:57.389 --> 00:33:59.260
the key part of this are some custom J
unit test rules that we have added

00:33:59.260 --> 00:33:59.270
unit test rules that we have added
 

00:33:59.270 --> 00:34:01.270
unit test rules that we have added
and Stefan talked about rules already

00:34:01.270 --> 00:34:01.280
and Stefan talked about rules already
 

00:34:01.280 --> 00:34:02.919
and Stefan talked about rules already
these allow you to add some additional

00:34:02.919 --> 00:34:02.929
these allow you to add some additional
 

00:34:02.929 --> 00:34:06.190
these allow you to add some additional
functionality to your existing tests so

00:34:06.190 --> 00:34:06.200
functionality to your existing tests so
 

00:34:06.200 --> 00:34:08.369
functionality to your existing tests so
here we have three rules the first one

00:34:08.369 --> 00:34:08.379
here we have three rules the first one
 

00:34:08.379 --> 00:34:11.169
here we have three rules the first one
basically runs the dancer's graphics

00:34:11.169 --> 00:34:11.179
basically runs the dancer's graphics
 

00:34:11.179 --> 00:34:12.520
basically runs the dancer's graphics
info command which you might have

00:34:12.520 --> 00:34:12.530
info command which you might have
 

00:34:12.530 --> 00:34:13.899
info command which you might have
already used if you've tried to track

00:34:13.899 --> 00:34:13.909
already used if you've tried to track
 

00:34:13.909 --> 00:34:15.520
already used if you've tried to track
down some jank issues in the application

00:34:15.520 --> 00:34:15.530
down some jank issues in the application
 

00:34:15.530 --> 00:34:17.440
down some jank issues in the application
it allows you to gather some statistics

00:34:17.440 --> 00:34:17.450
it allows you to gather some statistics
 

00:34:17.450 --> 00:34:19.090
it allows you to gather some statistics
on you know for example the number of

00:34:19.090 --> 00:34:19.100
on you know for example the number of
 

00:34:19.100 --> 00:34:20.800
on you know for example the number of
janky frames that you had and the

00:34:20.800 --> 00:34:20.810
janky frames that you had and the
 

00:34:20.810 --> 00:34:22.659
janky frames that you had and the
rendering performance you can do exactly

00:34:22.659 --> 00:34:22.669
rendering performance you can do exactly
 

00:34:22.669 --> 00:34:25.030
rendering performance you can do exactly
the same for the net stats command which

00:34:25.030 --> 00:34:25.040
the same for the net stats command which
 

00:34:25.040 --> 00:34:26.560
the same for the net stats command which
allows you to track your network

00:34:26.560 --> 00:34:26.570
allows you to track your network
 

00:34:26.570 --> 00:34:28.330
allows you to track your network
performance number of received and sent

00:34:28.330 --> 00:34:28.340
performance number of received and sent
 

00:34:28.340 --> 00:34:30.820
performance number of received and sent
packets for example and you can also

00:34:30.820 --> 00:34:30.830
packets for example and you can also
 

00:34:30.830 --> 00:34:33.010
packets for example and you can also
capture the logcat output individually

00:34:33.010 --> 00:34:33.020
capture the logcat output individually
 

00:34:33.020 --> 00:34:35.770
capture the logcat output individually
so just remember these rules are applied

00:34:35.770 --> 00:34:35.780
so just remember these rules are applied
 

00:34:35.780 --> 00:34:38.139
so just remember these rules are applied
to each test as it's being executed so

00:34:38.139 --> 00:34:38.149
to each test as it's being executed so
 

00:34:38.149 --> 00:34:40.210
to each test as it's being executed so
for each test we can now capture the

00:34:40.210 --> 00:34:40.220
for each test we can now capture the
 

00:34:40.220 --> 00:34:42.159
for each test we can now capture the
graphics performance Network performance

00:34:42.159 --> 00:34:42.169
graphics performance Network performance
 

00:34:42.169 --> 00:34:43.810
graphics performance Network performance
and the Lockett output and this is

00:34:43.810 --> 00:34:43.820
and the Lockett output and this is
 

00:34:43.820 --> 00:34:46.090
and the Lockett output and this is
pretty powerful and this is all being

00:34:46.090 --> 00:34:46.100
pretty powerful and this is all being
 

00:34:46.100 --> 00:34:48.369
pretty powerful and this is all being
executed through this new test listener

00:34:48.369 --> 00:34:48.379
executed through this new test listener
 

00:34:48.379 --> 00:34:50.560
executed through this new test listener
that gets added to our test apk on the

00:34:50.560 --> 00:34:50.570
that gets added to our test apk on the
 

00:34:50.570 --> 00:34:52.690
that gets added to our test apk on the
device and that's what we can capture

00:34:52.690 --> 00:34:52.700
device and that's what we can capture
 

00:34:52.700 --> 00:34:54.460
device and that's what we can capture
some additional statistics as well such

00:34:54.460 --> 00:34:54.470
some additional statistics as well such
 

00:34:54.470 --> 00:34:56.350
some additional statistics as well such
as a systrace output if you want to

00:34:56.350 --> 00:34:56.360
as a systrace output if you want to
 

00:34:56.360 --> 00:34:57.310
as a systrace output if you want to
track down in any other performance

00:34:57.310 --> 00:34:57.320
track down in any other performance
 

00:34:57.320 --> 00:35:00.490
track down in any other performance
issues this is what it looks like if

00:35:00.490 --> 00:35:00.500
issues this is what it looks like if
 

00:35:00.500 --> 00:35:02.320
issues this is what it looks like if
you're actually running it on if you're

00:35:02.320 --> 00:35:02.330
you're actually running it on if you're
 

00:35:02.330 --> 00:35:03.940
you're actually running it on if you're
actually running the test first of all

00:35:03.940 --> 00:35:03.950
actually running the test first of all
 

00:35:03.950 --> 00:35:06.670
actually running the test first of all
we have to run our new custom tasks run

00:35:06.670 --> 00:35:06.680
we have to run our new custom tasks run
 

00:35:06.680 --> 00:35:09.099
we have to run our new custom tasks run
local perf test and then as the test is

00:35:09.099 --> 00:35:09.109
local perf test and then as the test is
 

00:35:09.109 --> 00:35:11.620
local perf test and then as the test is
being executed our listener captures to

00:35:11.620 --> 00:35:11.630
being executed our listener captures to
 

00:35:11.630 --> 00:35:13.750
being executed our listener captures to
lock the locks for each of the tests in

00:35:13.750 --> 00:35:13.760
lock the locks for each of the tests in
 

00:35:13.760 --> 00:35:15.280
lock the locks for each of the tests in
our case we only had one test we have

00:35:15.280 --> 00:35:15.290
our case we only had one test we have
 

00:35:15.290 --> 00:35:17.470
our case we only had one test we have
executed here but you can see that for

00:35:17.470 --> 00:35:17.480
executed here but you can see that for
 

00:35:17.480 --> 00:35:19.720
executed here but you can see that for
each test we have now a locked file we

00:35:19.720 --> 00:35:19.730
each test we have now a locked file we
 

00:35:19.730 --> 00:35:22.230
each test we have now a locked file we
can go back to and then analyze further

00:35:22.230 --> 00:35:22.240
can go back to and then analyze further
 

00:35:22.240 --> 00:35:25.330
can go back to and then analyze further
and of course there's the systrace file

00:35:25.330 --> 00:35:25.340
and of course there's the systrace file
 

00:35:25.340 --> 00:35:26.830
and of course there's the systrace file
as well that gets captured for the

00:35:26.830 --> 00:35:26.840
as well that gets captured for the
 

00:35:26.840 --> 00:35:28.840
as well that gets captured for the
entire test run and this all happens

00:35:28.840 --> 00:35:28.850
entire test run and this all happens
 

00:35:28.850 --> 00:35:30.340
entire test run and this all happens
automatically for you and I think is

00:35:30.340 --> 00:35:30.350
automatically for you and I think is
 

00:35:30.350 --> 00:35:33.099
automatically for you and I think is
very powerful so here's an example where

00:35:33.099 --> 00:35:33.109
very powerful so here's an example where
 

00:35:33.109 --> 00:35:35.620
very powerful so here's an example where
our test actually failed and you can see

00:35:35.620 --> 00:35:35.630
our test actually failed and you can see
 

00:35:35.630 --> 00:35:37.750
our test actually failed and you can see
that we had an excessive number of janky

00:35:37.750 --> 00:35:37.760
that we had an excessive number of janky
 

00:35:37.760 --> 00:35:40.540
that we had an excessive number of janky
frames 91% and this is clearly a problem

00:35:40.540 --> 00:35:40.550
frames 91% and this is clearly a problem
 

00:35:40.550 --> 00:35:42.370
frames 91% and this is clearly a problem
this was one of our existing tests that

00:35:42.370 --> 00:35:42.380
this was one of our existing tests that
 

00:35:42.380 --> 00:35:44.320
this was one of our existing tests that
we had and he simply marked it as a perf

00:35:44.320 --> 00:35:44.330
we had and he simply marked it as a perf
 

00:35:44.330 --> 00:35:46.330
we had and he simply marked it as a perf
test and ran our test harness over it

00:35:46.330 --> 00:35:46.340
test and ran our test harness over it
 

00:35:46.340 --> 00:35:48.550
test and ran our test harness over it
and captures all these statistics so we

00:35:48.550 --> 00:35:48.560
and captures all these statistics so we
 

00:35:48.560 --> 00:35:51.670
and captures all these statistics so we
had 91% of janky frames janky frame

00:35:51.670 --> 00:35:51.680
had 91% of janky frames janky frame
 

00:35:51.680 --> 00:35:54.430
had 91% of janky frames janky frame
means that the the frame took longer to

00:35:54.430 --> 00:35:54.440
means that the the frame took longer to
 

00:35:54.440 --> 00:35:56.170
means that the the frame took longer to
render on the device so it appeared a

00:35:56.170 --> 00:35:56.180
render on the device so it appeared a
 

00:35:56.180 --> 00:35:58.359
render on the device so it appeared a
bit janky on the on the device so our

00:35:58.359 --> 00:35:58.369
bit janky on the on the device so our
 

00:35:58.369 --> 00:36:00.640
bit janky on the on the device so our
test failed instead of having to go back

00:36:00.640 --> 00:36:00.650
test failed instead of having to go back
 

00:36:00.650 --> 00:36:02.530
test failed instead of having to go back
getting the device out having to

00:36:02.530 --> 00:36:02.540
getting the device out having to
 

00:36:02.540 --> 00:36:04.120
getting the device out having to
reproduce it and trying to see what's

00:36:04.120 --> 00:36:04.130
reproduce it and trying to see what's
 

00:36:04.130 --> 00:36:05.710
reproduce it and trying to see what's
going on there we have captured all the

00:36:05.710 --> 00:36:05.720
going on there we have captured all the
 

00:36:05.720 --> 00:36:07.510
going on there we have captured all the
log files already we have the systrace

00:36:07.510 --> 00:36:07.520
log files already we have the systrace
 

00:36:07.520 --> 00:36:09.340
log files already we have the systrace
file there as well so we can go straight

00:36:09.340 --> 00:36:09.350
file there as well so we can go straight
 

00:36:09.350 --> 00:36:11.560
file there as well so we can go straight
back to the locks you have captured to

00:36:11.560 --> 00:36:11.570
back to the locks you have captured to
 

00:36:11.570 --> 00:36:13.030
back to the locks you have captured to
see what the problem was I made

00:36:13.030 --> 00:36:13.040
see what the problem was I made
 

00:36:13.040 --> 00:36:15.310
see what the problem was I made
fix it straightaway and this is a great

00:36:15.310 --> 00:36:15.320
fix it straightaway and this is a great
 

00:36:15.320 --> 00:36:16.720
fix it straightaway and this is a great
way to scale as the scale up your

00:36:16.720 --> 00:36:16.730
way to scale as the scale up your
 

00:36:16.730 --> 00:36:17.920
way to scale as the scale up your
performance testing if you think about

00:36:17.920 --> 00:36:17.930
performance testing if you think about
 

00:36:17.930 --> 00:36:21.880
performance testing if you think about
it just imagine where you can take it

00:36:21.880 --> 00:36:21.890
it just imagine where you can take it
 

00:36:21.890 --> 00:36:23.680
it just imagine where you can take it
from here right running it on one device

00:36:23.680 --> 00:36:23.690
from here right running it on one device
 

00:36:23.690 --> 00:36:25.240
from here right running it on one device
yeah that's okay you can probably

00:36:25.240 --> 00:36:25.250
yeah that's okay you can probably
 

00:36:25.250 --> 00:36:27.430
yeah that's okay you can probably
already do that but imagine scaling this

00:36:27.430 --> 00:36:27.440
already do that but imagine scaling this
 

00:36:27.440 --> 00:36:28.990
already do that but imagine scaling this
up and running this as part of you

00:36:28.990 --> 00:36:29.000
up and running this as part of you
 

00:36:29.000 --> 00:36:31.090
up and running this as part of you
continuous integration tests right what

00:36:31.090 --> 00:36:31.100
continuous integration tests right what
 

00:36:31.100 --> 00:36:32.680
continuous integration tests right what
if you can run all these performance

00:36:32.680 --> 00:36:32.690
if you can run all these performance
 

00:36:32.690 --> 00:36:34.960
if you can run all these performance
tests as part of your you know for each

00:36:34.960 --> 00:36:34.970
tests as part of your you know for each
 

00:36:34.970 --> 00:36:36.250
tests as part of your you know for each
commit or for each build that you're

00:36:36.250 --> 00:36:36.260
commit or for each build that you're
 

00:36:36.260 --> 00:36:37.900
commit or for each build that you're
creating and this is very powerful

00:36:37.900 --> 00:36:37.910
creating and this is very powerful
 

00:36:37.910 --> 00:36:40.390
creating and this is very powerful
because this now allows you to capture

00:36:40.390 --> 00:36:40.400
because this now allows you to capture
 

00:36:40.400 --> 00:36:42.430
because this now allows you to capture
statistics and trends as they develop

00:36:42.430 --> 00:36:42.440
statistics and trends as they develop
 

00:36:42.440 --> 00:36:44.260
statistics and trends as they develop
you might even be able to go back all

00:36:44.260 --> 00:36:44.270
you might even be able to go back all
 

00:36:44.270 --> 00:36:46.240
you might even be able to go back all
the way to one commit they introduced

00:36:46.240 --> 00:36:46.250
the way to one commit they introduced
 

00:36:46.250 --> 00:36:47.920
the way to one commit they introduced
ten performance issues that didn't come

00:36:47.920 --> 00:36:47.930
ten performance issues that didn't come
 

00:36:47.930 --> 00:36:50.500
ten performance issues that didn't come
up until later on so no longer you have

00:36:50.500 --> 00:36:50.510
up until later on so no longer you have
 

00:36:50.510 --> 00:36:52.000
up until later on so no longer you have
to rely on just simple manual

00:36:52.000 --> 00:36:52.010
to rely on just simple manual
 

00:36:52.010 --> 00:36:54.100
to rely on just simple manual
performance testing you can use our

00:36:54.100 --> 00:36:54.110
performance testing you can use our
 

00:36:54.110 --> 00:36:56.200
performance testing you can use our
testing harness to automate some of the

00:36:56.200 --> 00:36:56.210
testing harness to automate some of the
 

00:36:56.210 --> 00:36:58.990
testing harness to automate some of the
work for you and I would like you to

00:36:58.990 --> 00:36:59.000
work for you and I would like you to
 

00:36:59.000 --> 00:37:00.760
work for you and I would like you to
think about you know this is just the

00:37:00.760 --> 00:37:00.770
think about you know this is just the
 

00:37:00.770 --> 00:37:02.560
think about you know this is just the
beginning right there's so much more we

00:37:02.560 --> 00:37:02.570
beginning right there's so much more we
 

00:37:02.570 --> 00:37:04.210
beginning right there's so much more we
can do with this right now that our

00:37:04.210 --> 00:37:04.220
can do with this right now that our
 

00:37:04.220 --> 00:37:06.370
can do with this right now that our
testing tools have matured we can start

00:37:06.370 --> 00:37:06.380
testing tools have matured we can start
 

00:37:06.380 --> 00:37:08.320
testing tools have matured we can start
thinking about other ways we can test

00:37:08.320 --> 00:37:08.330
thinking about other ways we can test
 

00:37:08.330 --> 00:37:09.430
thinking about other ways we can test
and improve our performance and

00:37:09.430 --> 00:37:09.440
and improve our performance and
 

00:37:09.440 --> 00:37:11.080
and improve our performance and
applications you can look at battery

00:37:11.080 --> 00:37:11.090
applications you can look at battery
 

00:37:11.090 --> 00:37:12.700
applications you can look at battery
usage for example you can look at the

00:37:12.700 --> 00:37:12.710
usage for example you can look at the
 

00:37:12.710 --> 00:37:14.590
usage for example you can look at the
network performance as well this is very

00:37:14.590 --> 00:37:14.600
network performance as well this is very
 

00:37:14.600 --> 00:37:17.950
network performance as well this is very
much just the beginning so my point here

00:37:17.950 --> 00:37:17.960
much just the beginning so my point here
 

00:37:17.960 --> 00:37:20.740
much just the beginning so my point here
is really that we should now be starting

00:37:20.740 --> 00:37:20.750
is really that we should now be starting
 

00:37:20.750 --> 00:37:23.590
is really that we should now be starting
to think about smarter testing smarter

00:37:23.590 --> 00:37:23.600
to think about smarter testing smarter
 

00:37:23.600 --> 00:37:25.600
to think about smarter testing smarter
testing performance testing and then

00:37:25.600 --> 00:37:25.610
testing performance testing and then
 

00:37:25.610 --> 00:37:28.030
testing performance testing and then
many other ways we can we can automate

00:37:28.030 --> 00:37:28.040
many other ways we can we can automate
 

00:37:28.040 --> 00:37:29.650
many other ways we can we can automate
some of these some of you things we're

00:37:29.650 --> 00:37:29.660
some of these some of you things we're
 

00:37:29.660 --> 00:37:31.450
some of these some of you things we're
currently doing manually to build better

00:37:31.450 --> 00:37:31.460
currently doing manually to build better
 

00:37:31.460 --> 00:37:33.340
currently doing manually to build better
apps make it much easier for us to

00:37:33.340 --> 00:37:33.350
apps make it much easier for us to
 

00:37:33.350 --> 00:37:35.620
apps make it much easier for us to
verify and test our applications to

00:37:35.620 --> 00:37:35.630
verify and test our applications to
 

00:37:35.630 --> 00:37:37.420
verify and test our applications to
delight our users and give them a great

00:37:37.420 --> 00:37:37.430
delight our users and give them a great
 

00:37:37.430 --> 00:37:39.100
delight our users and give them a great
great experience as we work on our

00:37:39.100 --> 00:37:39.110
great experience as we work on our
 

00:37:39.110 --> 00:37:42.580
great experience as we work on our
applications with that I highly

00:37:42.580 --> 00:37:42.590
applications with that I highly
 

00:37:42.590 --> 00:37:44.890
applications with that I highly
encourage you to check out our code labs

00:37:44.890 --> 00:37:44.900
encourage you to check out our code labs
 

00:37:44.900 --> 00:37:47.050
encourage you to check out our code labs
they are great first of all the Android

00:37:47.050 --> 00:37:47.060
they are great first of all the Android
 

00:37:47.060 --> 00:37:48.880
they are great first of all the Android
testing code lab this is the one that

00:37:48.880 --> 00:37:48.890
testing code lab this is the one that
 

00:37:48.890 --> 00:37:49.900
testing code lab this is the one that
you've seen throughout this entire

00:37:49.900 --> 00:37:49.910
you've seen throughout this entire
 

00:37:49.910 --> 00:37:52.240
you've seen throughout this entire
presentation so we have a great code up

00:37:52.240 --> 00:37:52.250
presentation so we have a great code up
 

00:37:52.250 --> 00:37:53.800
presentation so we have a great code up
that we've put together that shows you

00:37:53.800 --> 00:37:53.810
that we've put together that shows you
 

00:37:53.810 --> 00:37:55.750
that we've put together that shows you
how we've used the MVP architecture

00:37:55.750 --> 00:37:55.760
how we've used the MVP architecture
 

00:37:55.760 --> 00:37:57.160
how we've used the MVP architecture
however using test-driven development

00:37:57.160 --> 00:37:57.170
however using test-driven development
 

00:37:57.170 --> 00:37:59.590
however using test-driven development
and how we have how we're doing the unit

00:37:59.590 --> 00:37:59.600
and how we have how we're doing the unit
 

00:37:59.600 --> 00:38:02.080
and how we have how we're doing the unit
testing and the UI testing in a great

00:38:02.080 --> 00:38:02.090
testing and the UI testing in a great
 

00:38:02.090 --> 00:38:04.480
testing and the UI testing in a great
concise application you can check this

00:38:04.480 --> 00:38:04.490
concise application you can check this
 

00:38:04.490 --> 00:38:06.100
concise application you can check this
out in the code lab area downstairs and

00:38:06.100 --> 00:38:06.110
out in the code lab area downstairs and
 

00:38:06.110 --> 00:38:08.680
out in the code lab area downstairs and
there online as well if you're more

00:38:08.680 --> 00:38:08.690
there online as well if you're more
 

00:38:08.690 --> 00:38:10.240
there online as well if you're more
curious about the automated performance

00:38:10.240 --> 00:38:10.250
curious about the automated performance
 

00:38:10.250 --> 00:38:11.800
curious about the automated performance
testing that I've talked about and you

00:38:11.800 --> 00:38:11.810
testing that I've talked about and you
 

00:38:11.810 --> 00:38:13.390
testing that I've talked about and you
want to see it in action and ever play

00:38:13.390 --> 00:38:13.400
want to see it in action and ever play
 

00:38:13.400 --> 00:38:15.010
want to see it in action and ever play
with it to see how you could use it to

00:38:15.010 --> 00:38:15.020
with it to see how you could use it to
 

00:38:15.020 --> 00:38:17.020
with it to see how you could use it to
actually track down a performance issue

00:38:17.020 --> 00:38:17.030
actually track down a performance issue
 

00:38:17.030 --> 00:38:19.350
actually track down a performance issue
check out the automated testing

00:38:19.350 --> 00:38:19.360
check out the automated testing
 

00:38:19.360 --> 00:38:22.050
check out the automated testing
automatic performance testing code lab

00:38:22.050 --> 00:38:22.060
automatic performance testing code lab
 

00:38:22.060 --> 00:38:24.460
automatic performance testing code lab
here are some amazing resources we've

00:38:24.460 --> 00:38:24.470
here are some amazing resources we've
 

00:38:24.470 --> 00:38:26.260
here are some amazing resources we've
put together the code labs are all

00:38:26.260 --> 00:38:26.270
put together the code labs are all
 

00:38:26.270 --> 00:38:26.799
put together the code labs are all
available

00:38:26.799 --> 00:38:26.809
available
 

00:38:26.809 --> 00:38:28.749
available
online for you to try out at home or

00:38:28.749 --> 00:38:28.759
online for you to try out at home or
 

00:38:28.759 --> 00:38:30.459
online for you to try out at home or
later on your laptop as well if you like

00:38:30.459 --> 00:38:30.469
later on your laptop as well if you like
 

00:38:30.469 --> 00:38:32.949
later on your laptop as well if you like
we also have some great samples out

00:38:32.949 --> 00:38:32.959
we also have some great samples out
 

00:38:32.959 --> 00:38:34.419
we also have some great samples out
there that show you everything from

00:38:34.419 --> 00:38:34.429
there that show you everything from
 

00:38:34.429 --> 00:38:36.549
there that show you everything from
basic unit testing to much more

00:38:36.549 --> 00:38:36.559
basic unit testing to much more
 

00:38:36.559 --> 00:38:38.380
basic unit testing to much more
complicated espresso testing so

00:38:38.380 --> 00:38:38.390
complicated espresso testing so
 

00:38:38.390 --> 00:38:41.259
complicated espresso testing so
definitely check this out on github we

00:38:41.259 --> 00:38:41.269
definitely check this out on github we
 

00:38:41.269 --> 00:38:43.839
definitely check this out on github we
also have a great project called the

00:38:43.839 --> 00:38:43.849
also have a great project called the
 

00:38:43.849 --> 00:38:46.149
also have a great project called the
Android testing blueprint and that shows

00:38:46.149 --> 00:38:46.159
Android testing blueprint and that shows
 

00:38:46.159 --> 00:38:47.769
Android testing blueprint and that shows
you how you can integrate many different

00:38:47.769 --> 00:38:47.779
you how you can integrate many different
 

00:38:47.779 --> 00:38:50.019
you how you can integrate many different
ways of testing into one great project

00:38:50.019 --> 00:38:50.029
ways of testing into one great project
 

00:38:50.029 --> 00:38:52.089
ways of testing into one great project
for example the unit and the UI testing

00:38:52.089 --> 00:38:52.099
for example the unit and the UI testing
 

00:38:52.099 --> 00:38:54.549
for example the unit and the UI testing
that you've seen today and of course we

00:38:54.549 --> 00:38:54.559
that you've seen today and of course we
 

00:38:54.559 --> 00:38:56.469
that you've seen today and of course we
have the ADSL the Android testing

00:38:56.469 --> 00:38:56.479
have the ADSL the Android testing
 

00:38:56.479 --> 00:38:58.120
have the ADSL the Android testing
support library that we've all been

00:38:58.120 --> 00:38:58.130
support library that we've all been
 

00:38:58.130 --> 00:38:59.739
support library that we've all been
working on so definitely check out our

00:38:59.739 --> 00:38:59.749
working on so definitely check out our
 

00:38:59.749 --> 00:39:02.109
working on so definitely check out our
check out the great documentation for

00:39:02.109 --> 00:39:02.119
check out the great documentation for
 

00:39:02.119 --> 00:39:04.929
check out the great documentation for
that as well and with that I would like

00:39:04.929 --> 00:39:04.939
that as well and with that I would like
 

00:39:04.939 --> 00:39:06.399
that as well and with that I would like
to thank you very much it's great to see

00:39:06.399 --> 00:39:06.409
to thank you very much it's great to see
 

00:39:06.409 --> 00:39:07.839
to thank you very much it's great to see
so many people interested in testing

00:39:07.839 --> 00:39:07.849
so many people interested in testing
 

00:39:07.849 --> 00:39:10.179
so many people interested in testing
here we'll be around in the office hours

00:39:10.179 --> 00:39:10.189
here we'll be around in the office hours
 

00:39:10.189 --> 00:39:12.279
here we'll be around in the office hours
area and we have stuff on joining the

00:39:12.279 --> 00:39:12.289
area and we have stuff on joining the
 

00:39:12.289 --> 00:39:14.949
area and we have stuff on joining the
Android tools panel the fireside chat

00:39:14.949 --> 00:39:14.959
Android tools panel the fireside chat
 

00:39:14.959 --> 00:39:16.479
Android tools panel the fireside chat
this afternoon as well so you can

00:39:16.479 --> 00:39:16.489
this afternoon as well so you can
 

00:39:16.489 --> 00:39:17.529
this afternoon as well so you can
definitely find us if you have any

00:39:17.529 --> 00:39:17.539
definitely find us if you have any
 

00:39:17.539 --> 00:39:19.329
definitely find us if you have any
questions and I think with that it's

00:39:19.329 --> 00:39:19.339
questions and I think with that it's
 

00:39:19.339 --> 00:39:19.959
questions and I think with that it's
time for lunch

00:39:19.959 --> 00:39:19.969
time for lunch
 

00:39:19.969 --> 00:39:23.019
time for lunch
so happy testing

