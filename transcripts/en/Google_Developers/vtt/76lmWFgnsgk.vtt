WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.980
&gt;&gt; HEARNDEN: So this--this class is called
a participant's view builder. It's the UiBuilder

00:00:06.980 --> 00:00:11.920
for the participant panel that you see at
the top of a conversation and you see it implements

00:00:11.920 --> 00:00:17.200
UiBuilder. There's a bunch of stuff in there
for styles and it's all GWT stuff. The main

00:00:17.200 --> 00:00:24.860
thing I want to point out is the UiBuilder
just has one method which is to output its

00:00:24.860 --> 00:00:31.289
HTML string and this here is just outputting
HTML strings. These static methods are just

00:00:31.289 --> 00:00:37.600
helper methods to keep the HTML well-formed
but this code here is just spitting out HTML.

00:00:37.600 --> 00:00:42.890
And before I continue too much further I just
wanted to point out a recent addition to the

00:00:42.890 --> 00:00:48.180
build file in wave protocol. There's a new
target now called waveharness_hosted and when

00:00:48.180 --> 00:00:55.950
you run that it fires up a GWT hosted mode
with the URL there. When you run it, it runs

00:00:55.950 --> 00:01:04.509
this test page called the Undercurrent Test
Harness, and it's just a wave panel on a page

00:01:04.509 --> 00:01:12.500
with a fake wave on it. So, if anyone wants
to help develop features in the wave panel

00:01:12.500 --> 00:01:17.060
then this test harness is the best place to
do it. And while that's loading I will resume

00:01:17.060 --> 00:01:23.520
the talk. So, a UiBuilder is just an HTML
closure. Now to every UiBuilder, there's another

00:01:23.520 --> 00:01:29.820
view implementation called a DomImpl. And
a DomImpl reveals the HTML that a UiBuilder

00:01:29.820 --> 00:01:35.710
produces and it reveals it using DOM API.
So these two, the DomImpls and the UiBuilders

00:01:35.710 --> 00:01:41.299
collaborate quite closely, they both know
each other's structure, and the reason we

00:01:41.299 --> 00:01:48.200
have these two--two different view implementations
will become apparent in the next few slides.

00:01:48.200 --> 00:01:52.630
So I'll show you--this is the view builder
that outputs a bunch of HTML. In particular,

00:01:52.630 --> 00:01:59.421
there are some parts of the HTML that we care
about, like this particular part here is a

00:01:59.421 --> 00:02:03.390
component within the view, which is the element
which participant views get attached. That's

00:02:03.390 --> 00:02:12.709
in the view builder in the equivalent DomImpl.
So here is a--this is the DomImpl of the participant

00:02:12.709 --> 00:02:17.960
panel treated in terms of DOM elements. And
here we see an accessor for that element that

00:02:17.960 --> 00:02:20.470
was identified in that string building process.
I don't have time to go into the details but

00:02:20.470 --> 00:02:24.140
you'll--if you start looking at the DomImpls
in view builder you'll see this correspondence

00:02:24.140 --> 00:02:28.940
between accesses in the DomImpl and particularly
identified parts in the UiBuilders. What happened?

00:02:28.940 --> 00:02:34.080
So from these view implementations, from there
we can build the renderers. So we distinguish

00:02:34.080 --> 00:02:37.220
between static renderers that produce views
from live renderers that update views. So

00:02:37.220 --> 00:02:43.310
if you're looking in the code, the main renderer
in undercurrent that renders any part of a

00:02:43.310 --> 00:02:47.590
conversation is called FullDomWaveRendererImpl.
You can take any part of them all, push it

00:02:47.590 --> 00:02:55.320
through this thing and it will produce a view
object. As a cooperating sibling of this renderer

00:02:55.320 --> 00:03:01.779
is its live version. And the live renderer
maps changes in the conversation to changes

00:03:01.779 --> 00:03:09.010
in the views by attaching to views and updating
them. So this is where the two view implementations

00:03:09.010 --> 00:03:16.530
come in. We use the UiBuilders in the static
renderers to build up renderings because it's

00:03:16.530 --> 00:03:20.280
the fastest way to do it and then in live
renderer we attached onto existing renderings

00:03:20.280 --> 00:03:28.659
using DomImpls. So I'll just briefly show
what this code looks like. So, for example,

00:03:28.659 --> 00:03:33.990
this is the live conversation view renderer
and you can see all its contents are handling

00:03:33.990 --> 00:03:38.519
conversation events, blips being added, threads
being added, participants being added. So

00:03:38.519 --> 00:03:40.940
it's listening to model events and in response
to them it's attaching on to existing views

00:03:40.940 --> 00:03:44.220
and updating them. So when a blip gets added
we'd find it's containing threads and attached

00:03:44.220 --> 00:03:49.010
to it with the view and put in new views as
a sibling, that's all. The other thing I wanted

00:03:49.010 --> 00:03:52.220
to point out is that the live views, sort
of the live renderers, everything is done

00:03:52.220 --> 00:03:59.200
behind these abstract view interfaces so that's
all clean separable and testable. So that's

00:03:59.200 --> 00:04:05.140
the bulk of the talk. That was all about the
rendering path. The other part that's--were

00:04:05.140 --> 00:04:08.992
undercurrent has a unique approach is the
UI control path, which is how we handle browser

00:04:08.992 --> 00:04:15.639
events. And like I mentioned we don't used
GWT widgets. GWT widgets are the usual mechanism

00:04:15.639 --> 00:04:18.669
for handling events in a GWT application but
GWT widgets are heavyweight, they're expensive,

00:04:18.669 --> 00:04:22.490
they require linear setup cost. We want a
constant time setup cost so in undercurrent

00:04:22.490 --> 00:04:27.830
there's a single browser event listener at
the top of the panel, or you can put it at

00:04:27.830 --> 00:04:31.669
the top of the page if you want, it receives
all the browser events that occur in the panel

00:04:31.669 --> 00:04:35.969
and there's a registry of event handlers which
are based on clients. I'll just quickly show

00:04:35.969 --> 00:04:45.830
you what clients are. So this is
the test harness, it's now loaded; it's running

00:04:45.830 --> 00:04:50.789
just a fake in-memory wave. You can interact
with it, edit reply and do everything. But

00:04:50.789 --> 00:04:56.490
if we look at the DOM briefly--I'm not sure
how well this is going to come out. But let's

00:04:56.490 --> 00:05:02.479
see, where are we? So this--this HTML tree
here, this is for the rendering of that blip

00:05:02.479 --> 00:05:08.449
that's highlighted. You can see that it has
an attribute on it called kind and its value

00:05:08.449 --> 00:05:13.050
is B, and that tells you this piece of UI
is a blip. I want to--all the significant

00:05:13.050 --> 00:05:18.139
bits of the HTML are annotated with these
kinds, this thing here has kind equals S.

00:05:18.139 --> 00:05:23.820
Now, this is the participant's panel. The
values of these things can be anything. We

00:05:23.820 --> 00:05:32.380
just keep them short to keep the DOM small.
But it means that as you're looking at the

00:05:32.380 --> 00:05:41.169
DOM you can see where all of the objects are.
In particular, this is what we use for event

00:05:41.169 --> 00:05:46.229
dispatch. So there's a top-level event handler,
it receives a browser event, it finds the

00:05:46.229 --> 00:05:52.330
source of the elem--source of the event, traces
up the DOM, finding the nearest answers to

00:05:52.330 --> 00:05:56.879
with the kind and it looks for any event handler
that any feature might have registered for

00:05:56.879 --> 00:06:04.210
handling events on that kind and it dispatches
the event that way. Okay. I need two more

00:06:04.210 --> 00:06:09.389
things to talk about I'm just going to pay
lip service to these. Undercurrent uses a

00:06:09.389 --> 00:06:16.020
staged loading architecture. What this is
designed for is so that from a completely

00:06:16.020 --> 00:06:23.550
cold start of visiting--visiting the client
for the first time were you got nothing cached,

00:06:23.550 --> 00:06:28.219
you've never used the app before, we were
still aiming for 150, 200 odd milliseconds

00:06:28.219 --> 00:06:37.479
startup time. So, the code is all structured
so that you load--you get a static rendering

00:06:37.479 --> 00:06:42.999
from the server, some minimal java scripts
gets downloaded which gives you the abilities

00:06:42.999 --> 00:06:49.999
to read it and move around in it and then
JavaScript to start editing. That's all delayed

00:06:49.999 --> 00:06:55.669
until later and there's a stage pipeline.
The only reason I mentioned it is because

00:06:55.669 --> 00:07:03.069
the top-level entry point into the undercurrent
code is dealing with all these stages so the

00:07:03.069 --> 00:07:09.589
search is not unfamiliar if you see these
stages. So lastly, this entire architecture

00:07:09.589 --> 00:07:16.789
for undercurrent is designed for load latency
startup and the key component that provides

00:07:16.789 --> 00:07:29.880
load latency is server-side rendering so that
the HTML that has a rendering of the wave

00:07:29.880 --> 00:07:36.009
could embed on the initial download page before
any JavaScript, before the app is even loaded.

00:07:36.009 --> 00:07:44.330
So this kind of raises the question, "How
do you render things on the server?" So there's

00:07:44.330 --> 00:07:49.239
two levels to doing server-side rendering.
The first one is rendering the contents of

00:07:49.239 --> 00:07:55.990
individual documents. And the way we do that
is the editor, which is open source, we just

00:07:55.990 --> 00:08:03.590
use the plain old editor but we've run it
in a server environment that fakes out GWT.

00:08:03.590 --> 00:08:11.639
This is called GWT JVM. Joseph is the best
person to ask too if you got questions about

00:08:11.639 --> 00:08:18.669
GWT JVM. But basically, the editor runs, does
its thing, thinks it's in the GWT application

00:08:18.669 --> 00:08:24.050
but this GWT JVM mocks out GWT, saves what
happens and has a--just an in-memory DOM for

00:08:24.050 --> 00:08:29.569
it. The next level up which is stitching these
documents together into a wave, while as you

00:08:29.569 --> 00:08:34.089
saw undercurrent defines all its renderings
just as plain string functions so there's

00:08:34.089 --> 00:08:43.199
no magic here and we just run these functions
on the server just as Java and we get wave

00:08:43.199 --> 00:08:56.290
renderings. So anything on these--if you have
a server that runs these things it only needs

00:08:56.290 --> 00:09:05.389
to provide a little bit of extra data along
with this rendering. It needs to provide that

00:09:05.389 --> 00:09:11.779
ID mapping state that you saw at the start
that maps between the long model IDs and the

00:09:11.779 --> 00:09:15.569
short IDs which you can use to figure out
what these view IDs all referring to. It needs

00:09:15.569 --> 00:09:19.620
to talk, it needs to inject into rendering
metadata what the version of the wave was

00:09:19.620 --> 00:09:26.670
so the client can connect to that version
and it needs some extra metadata if you start

00:09:26.670 --> 00:09:36.060
doing fancy stuff like paging or not rendering
all the blips in the server. But the key thing

00:09:36.060 --> 00:09:46.500
is this server-side rendering is very fast.
It's at least twice as fast, if not five,

00:09:46.500 --> 00:09:54.600
ten times faster than doing this rendering
on the client. It's paralyzable out so that

00:09:54.600 --> 00:10:00.089
you're really only limited by the size of
the largest document in the wave. And most

00:10:00.089 --> 00:10:01.519
importantly, this rendering could even be
pre-computed. So you can prepare a rendering

00:10:01.519 --> 00:10:06.540
while you're indexing waves or respond to
changes so that next time a client request

00:10:06.540 --> 00:10:11.790
a wave you can give them the HTML straightaway,
no processing. I should mention--there's no

00:10:11.790 --> 00:10:19.889
server-side rendering hooked up in Wave in
a Box yet. It's a key--it's a key part for

00:10:19.889 --> 00:10:27.600
a fast client that anyone who wants to get
their hands dirty is more than welcome to

00:10:27.600 --> 00:10:36.240
dive in. We're very happy to help you get
started for that. So I just want to finish

00:10:36.240 --> 00:10:41.300
up by saying what undercurrent currently has
and what we plan to have in the near future.

00:10:41.300 --> 00:10:46.580
So currently, I think in terms of feature
parity with the Google Wave client, all our

00:10:46.580 --> 00:10:51.040
rendering stuff is all the same. The rich
content, all the different reply types: inline,

00:10:51.040 --> 00:10:54.149
non-inline, private replies, collapse content,
all that, it's all there and it's all live.

00:10:54.149 --> 00:10:57.320
In terms of reading, there's a focus frame.
We track read/unread state. There's a small

00:10:57.320 --> 00:11:03.380
patch which we're going very soon where once
you read waves in Wave in a Box, next time

00:11:03.380 --> 00:11:08.959
you come back all that read state is preserved,
collapsing threads and so on. Editing, you

00:11:08.959 --> 00:11:13.769
can edit, reply, delete, you can continue
threads. Continue is grade up because we don't

00:11:13.769 --> 00:11:28.411
have a UI for it other than keyboard shortcuts.
There's an edit toolbar gadgets now work and

00:11:28.411 --> 00:11:30.480
so it's definitely got some momentum getting
all those features in. The next features that

00:11:30.480 --> 00:11:37.689
are coming--there's a few small pieces lurking
through it. Anyone who wants to dive in and,

00:11:37.689 --> 00:11:45.660
you know, start working on the wave panel,
these are the kinds of things that are perfect

00:11:45.660 --> 00:11:51.740
to get started with. Please come and talk
to me if you're interested. The blue reply

00:11:51.740 --> 00:11:56.360
indicators that you see in the wave panel
in Google Wave you can get them hooked up

00:11:56.360 --> 00:12:02.510
with a reply box, participants profile cards,
typing carets, there's a bit of polish for

00:12:02.510 --> 00:12:08.079
IE, these are all great places to get started.
There's some medium features which we may

00:12:08.079 --> 00:12:14.560
or may not get done before the end of the
year, which is to our view port-based rendering

00:12:14.560 --> 00:12:18.060
of content which is something that the Google
Wave client does which significantly reduces

00:12:18.060 --> 00:12:27.399
startup latency, and your blip counters counting
how many blips are in threads. And large scale

00:12:27.399 --> 00:12:34.509
features which the engineers in Google might--we
won't have time to do any of these but if

00:12:34.509 --> 00:12:40.930
anyone wants to take on this, this is a big
meaty project, then we can tell you all about

00:12:40.930 --> 00:12:49.690
how it works in Google Wave to give you ideas
on how to get started: playback, diff-on-open

00:12:49.690 --> 00:12:54.980
and how to write on a rendering server for
server-side rendering. Alright, has anyone

00:12:54.980 --> 00:13:03.240
got any questions about any part of what I've
talked about? I know you've all been bamboozled

00:13:03.240 --> 00:13:18.829
with plenty of information today. Yes, question?
&gt;&gt; In exactly in ToolBot, is that part--can

00:13:18.829 --> 00:13:42.950
you render the blips if you don't render them
as editors in the first place? So I have to

00:13:42.950 --> 00:13:55.070
click on edit first, is that by decision or
is it technically slow to make everything

00:13:55.070 --> 00:14:00.750
process editable write on that?
&gt;&gt; HEARNDEN: Right. So the question is when

00:14:00.750 --> 00:14:21.050
we render blips, we don't render them as editable
things immediately. There's a combination

00:14:21.050 --> 00:14:33.640
of efficiency reasons and product reasons.
I guess the main one is the efficiency reason,

00:14:33.640 --> 00:14:44.389
this rendering a blip versus attaching an
edit it to it. Rendering is significantly

00:14:44.389 --> 00:14:49.850
faster than rendering plus attaching edit
ability. Also from a product standpoint often

00:14:49.850 --> 00:15:02.050
like reading is a far more frequent action
than editing so paying a latency cost from

00:15:02.050 --> 00:15:11.379
your initial download to get the editor code
just to view content is probably not worth

00:15:11.379 --> 00:15:26.089
it. And also, we do have in undercurrent it
does have what we call full wave edit mode,

00:15:26.089 --> 00:15:32.839
which is when you're in the edit mode, as
you click around blips you stay in edit mode.

00:15:32.839 --> 00:15:44.709
This wasn't the way that the Google Wave client
originally was so I guess the code is kind

00:15:44.709 --> 00:15:49.990
of written with that original mindset just
with how the original product respects itself.

00:15:49.990 --> 00:15:56.750
Yes, does that answer your question?
&gt;&gt; Yes. You said attaching an editor's expensive,

00:15:56.750 --> 00:16:12.399
that's essentially browser backend which is
the--attaching its control editor or is it

00:16:12.399 --> 00:16:14.740
the JavaScript [INDISTINCT]?
&gt;&gt; HEARNDEN: No, Google like--yeah, the rich

00:16:14.740 --> 00:16:20.690
text editor. If--but we could just set all
the documents into content editable mode but

00:16:20.690 --> 00:16:27.269
that wouldn't work too well with the editor.
There's two talks tomorrow on the editor,

00:16:27.269 --> 00:16:41.930
I'll be describing some things about content
editable. And, yes, for reasons that will

00:16:41.930 --> 00:16:49.809
be explained tomorrow, it wouldn't be beneficial
to do that. So--yes, yes. Okay. No other questions?

00:16:49.809 --> 00:16:55.230
Alright, one other question, yes?
&gt;&gt; Do you use local storage--special storage

00:16:55.230 --> 00:17:03.829
for anything in the device?
&gt;&gt; HEARNDEN: In undercurrent, no, we don't.

00:17:03.829 --> 00:17:11.299
No.
&gt;&gt; [INDISTINCT] is that the client's attributes?

00:17:11.299 --> 00:17:14.919
&gt;&gt; HEARNDEN: Yes.
&gt;&gt; Is that from a standard HTML?

00:17:14.919 --> 00:17:17.350
&gt;&gt; HEARNDEN: That's true.
&gt;&gt; Thank you.

00:17:17.350 --> 00:18:02.740
&gt;&gt; HEARNDEN: Yeah, the question was, is
the client attribute standard HTML,

00:18:02.740 --> 00:18:39.580
and no it

00:18:39.580 --> 00:19:20.419
is not.
&gt;&gt; You going to [INDISTINCT]?

00:19:20.419 --> 00:20:26.820
&gt;&gt; HEARNDEN: Possibly. Like it works in
all browsers right now and if and when it

00:20:26.820 --> 00:20:59.799
becomes an issue that it's not well-formed
or anything then, yes, I'm sure we can fix

00:20:59.799 --> 00:21:25.740
it

00:21:25.740 --> 00:21:28.590
up. Yes. Alright, thanks everyone.

00:21:28.590 --> 00:22:27.610
current, no, we don't. No.
&gt;&gt; [INDISTINCT] is

00:22:27.610 --> 00:22:31.480
that the client's attributes?
&gt;&gt; HEARNDEN: Yes.

00:22:31.480 --> 00:22:35.840
&gt;&gt; Is that from a standard HTML?
&gt;&gt; HEARNDEN: That's true.

00:22:35.840 --> 00:22:51.960
&gt;&gt; Thank you.
&gt;&gt; HEARNDEN: Yeah, the question was,

00:22:51.960 --> 00:23:15.740
is the client attribute standard HTML, and
no it is not.

00:23:15.740 --> 00:23:29.179
&gt;&gt; You going to [INDISTINCT]?
&gt;&gt; HEARNDEN: Possibly. Like it works in

00:23:29.179 --> 00:24:00.019
all browsers right now and

00:24:00.019 --> 00:24:21.850
if

00:24:21.850 --> 00:25:11.770
and when i

