WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.600
[MUSIC PLAYING]

00:00:02.600 --> 00:00:05.480
Did you know that Android
has over 70 standard views

00:00:05.480 --> 00:00:07.770
built into the operating system?

00:00:07.770 --> 00:00:09.770
But no matter how many
standard views there are,

00:00:09.770 --> 00:00:11.930
sooner or later, you're
going to want something

00:00:11.930 --> 00:00:14.840
that the built-in
components just can't do.

00:00:14.840 --> 00:00:18.320
Luckily, Android has great
support for custom views.

00:00:18.320 --> 00:00:21.360
It's easy to make a view that
changes built-in behavior

00:00:21.360 --> 00:00:23.350
or does something
new altogether.

00:00:23.350 --> 00:00:27.720
What can be hard is making
that custom view perform well.

00:00:27.720 --> 00:00:29.650
My name is Ian
Ni-Lewis, and I'll

00:00:29.650 --> 00:00:32.619
show you how to avoid some
of the performance pitfalls

00:00:32.619 --> 00:00:34.740
that come with
making a custom view.

00:00:34.740 --> 00:00:37.440
See, the standard views
that come with the framework

00:00:37.440 --> 00:00:39.180
have been around a long time.

00:00:39.180 --> 00:00:40.650
And the Android
team has had plenty

00:00:40.650 --> 00:00:43.760
of opportunities to make
these views better and faster.

00:00:43.760 --> 00:00:45.760
When you use those
built-in views,

00:00:45.760 --> 00:00:49.000
you get the benefit of all
those years of tuning for free,

00:00:49.000 --> 00:00:51.760
but when you create a view that
does its own custom drawing,

00:00:51.760 --> 00:00:53.430
you're on your own.

00:00:53.430 --> 00:00:54.800
Let me give you an example.

00:00:54.800 --> 00:00:56.630
I noticed that some
of my coworkers

00:00:56.630 --> 00:00:58.340
are way too productive,
so I'm going

00:00:58.340 --> 00:00:59.800
to write them a
game of solitaire

00:00:59.800 --> 00:01:01.330
to keep them occupied.

00:01:01.330 --> 00:01:03.180
And naturally,
that playing field

00:01:03.180 --> 00:01:05.080
is going to be a custom view.

00:01:05.080 --> 00:01:07.550
So there's three main
categories of mistake

00:01:07.550 --> 00:01:10.160
I could make with this
view, performance wise.

00:01:10.160 --> 00:01:12.320
First, I could waste
time drawing things

00:01:12.320 --> 00:01:13.770
that haven't changed.

00:01:13.770 --> 00:01:17.152
Second, I could waste time
and bandwidth drawing pixels

00:01:17.152 --> 00:01:19.360
that will never be visible
because they're covered up

00:01:19.360 --> 00:01:20.610
by something else.

00:01:20.610 --> 00:01:24.670
And third, I could spend too
long running code in onDraw.

00:01:24.670 --> 00:01:27.310
So let's start with drawing
things that haven't changed.

00:01:27.310 --> 00:01:31.490
Remember, all drawing starts
with a call to View.invalidate.

00:01:31.490 --> 00:01:34.950
The first rule of custom views
is to never call invalidate

00:01:34.950 --> 00:01:36.410
when you don't have to.

00:01:36.410 --> 00:01:38.400
If nothing in the
view has changed,

00:01:38.400 --> 00:01:40.220
then doesn't need to be redrawn.

00:01:40.220 --> 00:01:42.000
And the second rule
of custom views

00:01:42.000 --> 00:01:44.740
is to always pass a
rectangle to invalidate.

00:01:44.740 --> 00:01:47.030
Now, that rectangle is
called the dirty Rect.

00:01:47.030 --> 00:01:49.770
It's a hint to the system to
tell it which part of the view

00:01:49.770 --> 00:01:50.790
has changed.

00:01:50.790 --> 00:01:52.210
So the system uses
that rectangle

00:01:52.210 --> 00:01:54.430
to help it decide
when to call onDraw.

00:01:54.430 --> 00:01:56.905
For instance, if your dirty
Rect is behind another view,

00:01:56.905 --> 00:02:00.140
then there's no point
in redrawing anything.

00:02:00.140 --> 00:02:02.110
So being smart about
when and how we

00:02:02.110 --> 00:02:04.810
call invalidate means
that onDraw gets

00:02:04.810 --> 00:02:06.530
called less frequently.

00:02:06.530 --> 00:02:09.340
But sooner or later,
it does get called.

00:02:09.340 --> 00:02:11.070
So that's when things
get interesting.

00:02:11.070 --> 00:02:13.420
See, the performance
of onDraw is

00:02:13.420 --> 00:02:17.080
what determines whether an app
is a fluid, magical experience,

00:02:17.080 --> 00:02:19.450
or an irretrievable jank fest.

00:02:19.450 --> 00:02:22.580
And the easiest way to destroy
your onDraw performance,

00:02:22.580 --> 00:02:25.410
at least on some
devices, is overdraw.

00:02:25.410 --> 00:02:27.030
Let me show you what I mean.

00:02:27.030 --> 00:02:29.830
You see, check out
these overlapping cards.

00:02:29.830 --> 00:02:32.930
You can't see it, but
every card in that view

00:02:32.930 --> 00:02:35.900
is being drawn completely,
even the parts that are going

00:02:35.900 --> 00:02:38.040
to be hidden by the card above.

00:02:38.040 --> 00:02:41.220
And because you can't see
it in the final product,

00:02:41.220 --> 00:02:42.850
it's wasted work.

00:02:42.850 --> 00:02:45.870
Now, in another video, we talked
about the debug GPU overdraw

00:02:45.870 --> 00:02:48.820
feature that's built in into
the Android developer options.

00:02:48.820 --> 00:02:51.440
If you turn that on,
almost all of these cards

00:02:51.440 --> 00:02:53.030
are going to turn red.

00:02:53.030 --> 00:02:55.150
That's thousands
of wasted pixels,

00:02:55.150 --> 00:02:57.880
and every single one of
them costs in two ways.

00:02:57.880 --> 00:03:00.300
First, when the bitmap
is read from memory.

00:03:00.300 --> 00:03:02.810
And second, when the
frame buffer is written.

00:03:02.810 --> 00:03:05.260
So how can we get rid
of all that waste?

00:03:05.260 --> 00:03:09.370
Well in this example, I know
I've got overlapping views,

00:03:09.370 --> 00:03:12.280
so I want to tell
the GPU to only draw

00:03:12.280 --> 00:03:15.000
the visible part
of each element.

00:03:15.000 --> 00:03:17.880
I can do that by setting
the clip rectangle.

00:03:17.880 --> 00:03:20.840
The clip rectangle is the
area of the screen that

00:03:20.840 --> 00:03:22.980
is affected by a draw call.

00:03:22.980 --> 00:03:25.520
The pixels outside of the
rectangle don't get touched.

00:03:25.520 --> 00:03:27.100
They don't cost anything.

00:03:27.100 --> 00:03:31.430
The method that lets me do
that is Canvas.clipRect.

00:03:31.430 --> 00:03:34.780
When you call this method, the
output of every subsequent draw

00:03:34.780 --> 00:03:38.490
call is limited on the
GPU to that rectangle,

00:03:38.490 --> 00:03:41.790
and that lasts until the
next call to clipRect.

00:03:41.790 --> 00:03:44.610
Now, the performance
gain we see from clipRect

00:03:44.610 --> 00:03:49.100
is going to vary some, based
on the GPU you're targeting.

00:03:49.100 --> 00:03:52.400
On lower end GPU,
gain is dramatic.

00:03:52.400 --> 00:03:54.560
But if you're targeting
higher end GPUs,

00:03:54.560 --> 00:03:57.145
you might not see much
benefit at all from clipping.

00:03:57.145 --> 00:03:58.820
You know, I tested
my solitaire code

00:03:58.820 --> 00:04:02.730
on a Nexus 9, which has got
a relatively powerful GPU.

00:04:02.730 --> 00:04:05.370
And I found that I was
actually spending more time

00:04:05.370 --> 00:04:08.200
on the CPU calculating
the clipRects than I

00:04:08.200 --> 00:04:11.250
saved on the GPU by
eliminating overdraw.

00:04:11.250 --> 00:04:14.200
Which brings us to the most
difficult and most important

00:04:14.200 --> 00:04:18.740
part of custom views, reducing
the CPU cost on onDraw.

00:04:18.740 --> 00:04:21.019
Here's a few tips to
help you with that.

00:04:21.019 --> 00:04:24.320
One, don't draw anything
you don't have to.

00:04:24.320 --> 00:04:28.010
A clipRect is going to prevent
the GPU from drawing offscreen

00:04:28.010 --> 00:04:31.680
pixels, but it can't reduce
the CPU cost of a draw call.

00:04:31.680 --> 00:04:34.430
And some drawing calls do
need to use a lot of CPU.

00:04:34.430 --> 00:04:37.400
That's especially true when
you're laying out text.

00:04:37.400 --> 00:04:41.450
So call Canvas.quickReject
to identify elements that

00:04:41.450 --> 00:04:43.210
aren't currently on screen.

00:04:43.210 --> 00:04:46.760
If quickReject returns true,
don't draw that element.

00:04:46.760 --> 00:04:49.930
And quickReject won't return
true for drawing elements that

00:04:49.930 --> 00:04:52.560
are partially unseen,
only for elements

00:04:52.560 --> 00:04:54.740
that are completely invisible.

00:04:54.740 --> 00:04:58.310
And then hint number two,
don't use draw methods that

00:04:58.310 --> 00:05:00.160
aren't hardware accelerated.

00:05:00.160 --> 00:05:01.390
Check out this handy guide.

00:05:01.390 --> 00:05:04.050
It shows you everything
that's hardware accelerated

00:05:04.050 --> 00:05:07.891
and everything that isn't
on each version of Android.

00:05:07.891 --> 00:05:09.890
Now, hardware accelerated
means that the drawing

00:05:09.890 --> 00:05:11.830
happens on the GPU.

00:05:11.830 --> 00:05:14.120
Now, if a method isn't
hardware accelerated,

00:05:14.120 --> 00:05:16.590
that means it needs to
use the CPU to draw.

00:05:16.590 --> 00:05:19.290
And then it has to send
the results to the GPU

00:05:19.290 --> 00:05:21.740
to get composited with
the rest of the view.

00:05:21.740 --> 00:05:23.770
Compared to accelerated
drawing, this

00:05:23.770 --> 00:05:26.080
is horribly, horribly slow.

00:05:26.080 --> 00:05:28.719
So if the method you
want isn't accelerated,

00:05:28.719 --> 00:05:31.010
you might want to see if you
could find a different way

00:05:31.010 --> 00:05:32.960
to draw your view.

00:05:32.960 --> 00:05:36.180
Finally, don't make
allocations in onDraw.

00:05:36.180 --> 00:05:38.300
Don't make allocations
in any code

00:05:38.300 --> 00:05:40.110
that gets called from onDraw.

00:05:40.110 --> 00:05:42.400
Allocations cost two ways.

00:05:42.400 --> 00:05:43.830
First, there's
the immediate cost

00:05:43.830 --> 00:05:45.920
of allocating and
initializing an object.

00:05:45.920 --> 00:05:49.160
And then later, there's the
cost of garbage collection.

00:05:49.160 --> 00:05:51.380
Either one of those costs
can be enough to cause

00:05:51.380 --> 00:05:53.220
a dropped frame.

00:05:53.220 --> 00:05:55.250
Now, a lot of this
advice might seem

00:05:55.250 --> 00:05:58.150
like nit-picking over
relatively small perf gains.

00:05:58.150 --> 00:06:01.010
But keep in mind when
your view is animating,

00:06:01.010 --> 00:06:03.570
onDraw gets called
60 times a second.

00:06:03.570 --> 00:06:07.530
And unlike most other code, it
has to run on the UI thread.

00:06:07.530 --> 00:06:10.910
So bad performance in onDraw
is going to translate directly

00:06:10.910 --> 00:06:12.740
into jank in your app.

00:06:12.740 --> 00:06:17.400
You've got 16 milliseconds,
at most, to draw the screen.

00:06:17.400 --> 00:06:19.920
Realistically, once
you factor in overhead

00:06:19.920 --> 00:06:23.480
from other parts of your app
and potential GCE pauses,

00:06:23.480 --> 00:06:25.440
you've probably got half that.

00:06:25.440 --> 00:06:27.800
Every millisecond counts.

00:06:27.800 --> 00:06:30.301
And if you like counting
milliseconds as much as we do,

00:06:30.301 --> 00:06:32.800
you'll definitely want to check
out all the other great info

00:06:32.800 --> 00:06:35.190
on the Android Performance
Patterns homepage.

00:06:35.190 --> 00:06:37.040
Don't forget to join
our Google+ community.

00:06:37.040 --> 00:06:40.620
And remember, keep
calm, profile your code,

00:06:40.620 --> 00:06:42.670
and as always, perf matters.

00:06:42.670 --> 00:06:45.720
[MUSIC PLAYING]

