WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.700
If you recall our story about you debugging late in the night,

00:00:03.700 --> 00:00:09.000
with your significant other calling you, and you not knowing what to do,

00:00:09.000 --> 00:00:12.000
let me now come up with a way to avoid all of this.

00:00:12.000 --> 00:00:16.000
The answer here is Explicit Debugging.

00:00:16.000 --> 00:00:19.500
What does Explicit Debugging mean? It's simple.

00:00:19.500 --> 00:00:22.000
When you're debugging late in the night,

00:00:22.000 --> 00:00:26.500
it's usually because you try to keep everything in your head.

00:00:26.500 --> 00:00:30.000
You're making the hypothesis in your head, you're running the experiment,

00:00:30.000 --> 00:00:33.200
and you're keeping the results of the experiment in your head.

00:00:33.200 --> 00:00:36.500
This is okay for 5 minutes,

00:00:36.500 --> 00:00:41.500
but the longer this goes on, the harder it becomes to actually memorize all of this.

00:00:41.500 --> 00:00:44.000
And this is why everything gets so intense.

00:00:44.000 --> 00:00:48.000
You're so concentrated on trying to figure out what is going on,

00:00:48.000 --> 00:00:52.000
and this is why nobody can disturb you--because then you'd get out of your trance.

00:00:52.000 --> 00:00:56.500
And the alternative to this implicit debugging where you're keeping

00:00:56.500 --> 00:01:00.000
everything in your head, of course, is explicit debugging.

00:01:00.000 --> 00:01:06.000
Explicit debugging at first simply means to write down what you're doing,

00:01:06.000 --> 00:01:10.500
make notes of what you see, make notes of what you expect,

00:01:10.500 --> 00:01:13.500
and make notes of what your current hypothesis is.

00:01:13.500 --> 00:01:17.000
A common format for this, for instance, is to write down

00:01:17.000 --> 00:01:20.700
what the input was or generally what the experiment is,

00:01:20.700 --> 00:01:24.500
what you expected to see, and what you got instead.

00:01:24.500 --> 00:01:28.300
You may even want to write down the current hypothesis you're working on

00:01:28.300 --> 00:01:31.800
and whether this hypothesis is confirmed or rejected.

00:01:31.800 --> 00:01:39.000
This way you keep a log of your actions, and this log gives you multiple advantages.

00:01:39.000 --> 00:01:45.000
To start, you can always revise what you actually did and what the result was,

00:01:45.000 --> 00:01:49.000
so you don't have to memorize it, and you don't have to repeat it.

00:01:49.000 --> 00:01:52.000
Secondly, you can resume the session at any time

00:01:52.000 --> 00:01:54.700
because everything is already written down.

00:01:54.700 --> 00:01:57.100
You don't have to store this in your head.

00:01:57.100 --> 00:02:01.300
When your significant other calls you and asks you out for a nice dinner--

00:02:01.300 --> 00:02:05.000
well, everything is written down, and you can resume the next morning

00:02:05.000 --> 00:02:08.000
with a fresh mind and a nice dinner on top.

00:02:08.000 --> 00:02:14.200
The third advantage, however, is that when you write things down and see them again--

00:02:14.200 --> 00:02:20.300
this often already bears the solution at hand because forcing you to become explicit

00:02:20.300 --> 00:02:26.000
frequently makes it clear to you what the problem actually is,

00:02:26.000 --> 00:02:30.600
so it structures your thinking, and it helps you organize your thinking

00:02:30.600 --> 00:02:32.600
towards successful debugging.

