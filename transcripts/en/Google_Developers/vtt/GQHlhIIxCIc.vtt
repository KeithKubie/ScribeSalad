WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:05.460
The way we do that is, the GWT compiler takes
your Java source code and cross-compiles it

00:00:05.460 --> 00:00:10.080
into highly optimized JavaScript that downloads
quickly, it runs quickly in all the popular

00:00:10.080 --> 00:00:12.510
Web browsers that your users are likely to
use.

00:00:12.510 --> 00:00:14.740
But, of course, you know, you have seen that
before.

00:00:14.740 --> 00:00:17.070
It works great.
No problem.

00:00:17.070 --> 00:00:20.660
The question is, where do you get that Java
source code in the first place?

00:00:20.660 --> 00:00:25.270
For a really huge Java app, sometimes a lot
of the code can be sort of boilerplate code,

00:00:25.270 --> 00:00:29.220
the sort that connects your browser to the
data store in the back-end.

00:00:29.220 --> 00:00:31.610
That's the sort of code that you don't really
want to have to write.

00:00:31.610 --> 00:00:36.429
And so when we started working with VMWare,
we said, hey, you know, this -- what about

00:00:36.429 --> 00:00:39.639
this?
And they said, "We have a tool that does exactly

00:00:39.639 --> 00:00:41.980
this.
It saves you a whole bunch of time writing

00:00:41.980 --> 00:00:44.600
the code that you don't want to automatically
on your behalf."

00:00:44.600 --> 00:00:50.789
So we used Google Wave to coordinate the engineering
teams between Sydney, Germany, Atlanta, Mountain

00:00:50.789 --> 00:00:53.629
View, and San Francisco.
We used it all the time, around the clock,

00:00:53.629 --> 00:00:59.949
every day, working together.
And we made GWT and Spring Roo work together.

00:00:59.949 --> 00:01:03.350
The tool I was talking about is Roo.
And we are lucky to have the father of Roo,

00:01:03.350 --> 00:01:06.821
Ben Alex, here to tell you more about Roo
and to show you Roo in action.

00:01:06.821 --> 00:01:10.909
&gt;&gt;Ben Alex: Thanks, Bruce.
As we were thinking about what to do for you,

00:01:10.909 --> 00:01:15.189
we thought what better way than to build you
an application live on stage.

00:01:15.189 --> 00:01:19.090
It occurred to us that there's something that's
very near and dear to most of our hearts in

00:01:19.090 --> 00:01:22.690
this room: Expense reports.
We're all probably going to go home and log

00:01:22.690 --> 00:01:25.829
expense reports.
We thought, let's build you an application

00:01:25.829 --> 00:01:31.219
that stores these.
We're going to build this for and you have

00:01:31.219 --> 00:01:35.190
a GWT front-end, the back-end with Roo, with
all the Spring goodness, and we're going to

00:01:35.190 --> 00:01:40.450
do this in less than 200 keystrokes.
So let's get started.

00:01:40.450 --> 00:01:44.380
So I have here an empty directory.
And we load up Roo.

00:01:44.380 --> 00:01:46.990
Roo's an open source tool that you can go
and download.

00:01:46.990 --> 00:01:50.899
It has a text mode.
There's also a graphical version which I will

00:01:50.899 --> 00:01:52.960
show you a little bit later.
But Roo loads up.

00:01:52.960 --> 00:01:55.719
It looks like this.
You can get full command help with Roo by

00:01:55.719 --> 00:01:58.310
typing "hint" at any time.
Let's start our project.

00:01:58.310 --> 00:02:06.210
Here I specified my Java top-level package.
We need some databases.

00:02:06.210 --> 00:02:08.310
Let's go do that.
Persistence setup.

00:02:08.310 --> 00:02:11.459
Notice the tab is working.
We have data nucleus, which is great if you're

00:02:11.459 --> 00:02:15.230
going to be deploying to the Google App Engine.
But we're going to deploy to hypersonic in

00:02:15.230 --> 00:02:19.840
memory for now.
So now that we have our persistence layer,

00:02:19.840 --> 00:02:22.190
let's create entities.
This database is going to have two tables

00:02:22.190 --> 00:02:25.319
to start with, an employee table and a report
table.

00:02:25.319 --> 00:02:36.069
Let's make the tables and let's put some items
into the -- put some columns into them.

00:02:36.069 --> 00:02:40.340
So here I've used the GWT conventions of specifying
that this is a server of class, so, therefore,

00:02:40.340 --> 00:02:46.980
don't compile it down to JavaScript.
Let's add some fields.

00:02:46.980 --> 00:02:48.360
And we can use the up arrow to save a little
bit of time.

00:02:48.360 --> 00:02:57.650
Let's go and get a report.
And for something different, let's add a date

00:02:57.650 --> 00:03:00.160
field.
So it's going to be the created date for our

00:03:00.160 --> 00:03:04.620
expense report.
And I think we'll take a Java date for that.

00:03:04.620 --> 00:03:07.511
We have the Java back-end taken care of.
We could run this up.

00:03:07.511 --> 00:03:12.069
But let's get a GWT front-end.
As a result of the integration work we have

00:03:12.069 --> 00:03:15.650
been doing, it's super easy to do that.
All I have to do is type "GWT," press tab

00:03:15.650 --> 00:03:17.989
and press enter.
What's happening now is Roo is going to have

00:03:17.989 --> 00:03:22.019
a look at our domain model.
It's going to turn this into a GWT application.

00:03:22.019 --> 00:03:26.519
It looks at all of our columns, all of our
entities, and does that for us very quickly.

00:03:26.519 --> 00:03:29.469
You can run this up in the development mode,
just like you normally would if you're familiar

00:03:29.469 --> 00:03:31.390
with GWT.
To save a little bit of time, I have done

00:03:31.390 --> 00:03:34.370
that for you already.
This is what the resulting scaffolded application

00:03:34.370 --> 00:03:36.849
looks like.
It's very simple at the moment.

00:03:36.849 --> 00:03:45.269
We have the tables that we promised.
We can go and create a new employee.

00:03:45.269 --> 00:03:50.360
And it goes and stores it as we'd expect.
All the normal sort of cruddy stuff.

00:03:50.360 --> 00:03:53.940
What if we wanted a comment column?
How do we do that?

00:03:53.940 --> 00:03:58.680
The good thing is Roo supports full round-tripping.
We have a tool called Springsource Tool Suite.

00:03:58.680 --> 00:04:02.829
This is our free IDE, which you can also download.
And it has comprehensive Roo integration,

00:04:02.829 --> 00:04:08.500
as illustrated by this "Roo" logo at the bottom.
In order to add an extra column to our database,

00:04:08.500 --> 00:04:12.200
you just edit in a normal Java fashion, string
comment.

00:04:12.200 --> 00:04:15.519
And I haven't saved yet, but when I click
the "save" button, I'd like you to look in

00:04:15.519 --> 00:04:20.240
this area down at the bottom of the screen.
What's happened is, Roo has automatically

00:04:20.240 --> 00:04:25.390
detected I've changed my Java class and it's
gone and updated all the necessary GWT user

00:04:25.390 --> 00:04:28.760
bits and pieces.
In order to see this in action, I go to development

00:04:28.760 --> 00:04:31.920
mode, click refresh.
It's a very fast refresh, only takes about

00:04:31.920 --> 00:04:36.120
two seconds, which is unbelievably fast.
Now if we have a look at data browser, and

00:04:36.120 --> 00:04:42.610
we have refreshed the browser, employees,
and there we have it, we now have a comment

00:04:42.610 --> 00:04:52.420
field.
Just to show you that it works, and it persists

00:04:52.420 --> 00:04:55.290
fine.
So what we've done in just a couple of minutes

00:04:55.290 --> 00:04:58.610
is, we've gone from an empty directory, we've
typed less than 200 characters, and we've

00:04:58.610 --> 00:05:02.630
ended up with a GWT front-end scaffolded for
us with full round-tripping capability.

00:05:02.630 --> 00:05:05.600
This is a great way of saving time as you're
building new GWT applications.

00:05:05.600 --> 00:05:09.000
At this point, I am going to hand you back
to Bruce, who will cover some other integrations

00:05:09.000 --> 00:05:17.310
we have added to STS.
&gt;&gt;Bruce Johnson: Thank you, Ben.

00:05:17.310 --> 00:05:23.140
So 200 keystrokes later, we have the basics
of an application, a scaffolding app that

00:05:23.140 --> 00:05:25.880
we can build on.
You saw STS, the IDE experience.

00:05:25.880 --> 00:05:30.790
We have also integrated Google plug-in for
Eclipse in GWT and (inaudible) right there

00:05:30.790 --> 00:05:34.440
in STS so you have all the tools that you
need right there at your fingertips.

00:05:34.440 --> 00:05:39.350
We used that environment to continue iterating
on the app, using GWT and Roo to continue

00:05:39.350 --> 00:05:43.750
to add new features and so on.
And after a couple of days, turned it into

00:05:43.750 --> 00:05:49.680
a pretty real expense reporting app.
So, you know, added a little bit of UI polish.

00:05:49.680 --> 00:05:55.000
And, you know, it's a nice, rich Web application.
So I keep saying "rich Web application."

00:05:55.000 --> 00:05:58.880
What's exciting about that?
Well, it's a much better user experience.

00:05:58.880 --> 00:06:02.250
So let me point out a couple of things.
First of all, it's very fast.

00:06:02.250 --> 00:06:05.340
So I'll refresh just to show you how fast
it starts.

00:06:05.340 --> 00:06:08.630
Ready, one, two, three, refresh.
Refresh.

00:06:08.630 --> 00:06:09.800
Refresh.
Refresh.

00:06:09.800 --> 00:06:14.120
That's drawing the UI and that's getting the
data, and it's up and running.

00:06:14.120 --> 00:06:16.680
That's about 500 milliseconds.
Not bad.

00:06:16.680 --> 00:06:20.890
It's -- part of the reason for that, by the
way, is that the app is only 100K.

00:06:20.890 --> 00:06:25.590
It's optimized JavaScript, as I mentioned,
that includes even the CSS and the image resources

00:06:25.590 --> 00:06:29.930
encoded as data URLs.
Another nice thing about this style of rich

00:06:29.930 --> 00:06:33.490
Web application that runs heavily inside the
browser is that you don't have that sort of

00:06:33.490 --> 00:06:38.840
stuttery Web 1.0 click and wait kind of feel.
For example, when I want to drill down on

00:06:38.840 --> 00:06:42.530
one of these expense reports, I don't have
to wait for a new page to come up.

00:06:42.530 --> 00:06:47.520
I'm going to click this, and you'll see it
animates and transitions very fluidly.

00:06:47.520 --> 00:06:51.090
Right, one, two, three, click.
And there I have the details.

00:06:51.090 --> 00:06:55.430
So this is the way you want to work.
It keeps users engaged and it helps you speed

00:06:55.430 --> 00:07:00.401
 -- basically, speed things up.
One other nice thing about a rich Web application

00:07:00.401 --> 00:07:03.550
is, it gets exactly the data you need right
when you need it.

00:07:03.550 --> 00:07:08.931
In traditional HTML server-side applications,
you tend to spit out a lot of HTML with data

00:07:08.931 --> 00:07:11.960
intermingled, because you're not sure what
the user might want to see.

00:07:11.960 --> 00:07:14.750
But when I have an interactive application,
I know what the user wants.

00:07:14.750 --> 00:07:18.800
So, for example, if I want to see the number
of people in the engineering department, I'll

00:07:18.800 --> 00:07:22.770
click on this triangle and right when I click,
it will fetch exactly the data that I need

00:07:22.770 --> 00:07:27.160
to answer that one user action.
Click, and then, actually, the network round

00:07:27.160 --> 00:07:31.140
trip found two employees, populated the UI,
and showed them.

00:07:31.140 --> 00:07:35.030
And we think that's fantastic.
It really speeds up the app and makes it feel

00:07:35.030 --> 00:07:39.860
more responsive to what you're actually doing.
Now, if you've been using GWT for a while

00:07:39.860 --> 00:07:45.110
 -- and we hope you have -- probably nothing
I'm saying here, aside from Roo, is actually

00:07:45.110 --> 00:07:47.140
new to you.
You know that you can build these sort of

00:07:47.140 --> 00:07:53.390
rich Web applications pretty easily.
What is still a problem, though, once you

00:07:53.390 --> 00:07:57.180
get your app up and working, is how do you
make sure that it performs well?

00:07:57.180 --> 00:08:01.210
Some of these apps get really large and there
can be bottlenecks inside the browser that

00:08:01.210 --> 00:08:05.910
are hard to diagnose.
So to address this, we created a tool called

00:08:05.910 --> 00:08:09.270
Speed Tracer.
We launched Speed Tracer in December as part

00:08:09.270 --> 00:08:13.150
of GWT 2.0.
And I'll turn on Speed Tracer here.

00:08:13.150 --> 00:08:17.180
It's a Chrome extension.
I'll continue to use the app.

00:08:17.180 --> 00:08:20.650
And Speed Tracer is in the background paying
attention to what I'm doing and recording

00:08:20.650 --> 00:08:24.180
information.
So here I will pause it.

00:08:24.180 --> 00:08:28.181
I'm going to zoom out.
You see this is a nice HTML5 WUSI UI, all

00:08:28.181 --> 00:08:31.800
built in GWT, of course.
I look at the sluggishness graph.

00:08:31.800 --> 00:08:34.750
I see a peak.
That's an area I could optimize if I want

00:08:34.750 --> 00:08:36.839
to.
I'll drill down, and Speed Tracer shows me

00:08:36.839 --> 00:08:41.509
this bar which has a lot of stuff going on.
It tells me down to the millisecond where

00:08:41.509 --> 00:08:44.830
time is going.
So I see that a lot of the time is script

00:08:44.830 --> 00:08:51.170
evaluation, but it's also parsing HTML, recalculating
styles due to CSS changes, doing layout, you

00:08:51.170 --> 00:08:55.990
can even see things like garbage collection.
Basically, there's not even a single millisecond

00:08:55.990 --> 00:09:00.780
of time that happens within the browser that
you cannot find out about in Speed Tracer.

00:09:00.780 --> 00:09:03.420
It's like an x-ray machine for your browser's
guts; right.

00:09:03.420 --> 00:09:08.240
But that's not where all the time goes in
an application.

00:09:08.240 --> 00:09:13.579
Sometimes the server is what's actually slow.
So we realized what we need is a tool that's

00:09:13.579 --> 00:09:19.079
sort of like Speed Tracer, but for the server.
Well, it turns out that tool exists also.

00:09:19.079 --> 00:09:22.519
And Springsource had it.
It's called Spring Insight.

00:09:22.519 --> 00:09:28.100
And that tells you on a request-by-request
basis the timings of various things in the

00:09:28.100 --> 00:09:30.829
server.
As I was using this app, I was gathering Spring

00:09:30.829 --> 00:09:34.980
Insight data.
Here you can drill in and see there was an

00:09:34.980 --> 00:09:40.329
HTTP post that did a JDBC select, and I can
drill down to see even more details.

00:09:40.329 --> 00:09:45.420
So if you think it would be neat to combine
that information with Speed Tracer, we think

00:09:45.420 --> 00:09:50.529
alike, because that's exactly what we did.
And so I'll go back to the network tab here.

00:09:50.529 --> 00:09:54.410
And I can see a pretty traditional-looking
network view, like you might have seen in

00:09:54.410 --> 00:09:59.610
Firefox or Webkit Inspector, except now I
have this nifty icons here that say, hey,

00:09:59.610 --> 00:10:03.540
for this request, I have data about timings
on the server side as well.

