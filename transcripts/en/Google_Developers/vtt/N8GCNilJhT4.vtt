WEBVTT
Kind: captions
Language: en

00:00:08.850 --> 00:00:09.990
BRETT MORGAN: Hello,
and welcome to

00:00:09.990 --> 00:00:11.940
this week's Map Studio.

00:00:11.940 --> 00:00:14.650
I'm Brett Morgan, one of the
developer relations engineers

00:00:14.650 --> 00:00:17.070
working with the maps
team here in Sydney.

00:00:17.070 --> 00:00:19.140
This week, I'd like to take you
on a tour of using Google

00:00:19.140 --> 00:00:20.252
Maps with Dart.

00:00:20.252 --> 00:00:21.055
What is Dart?

00:00:21.055 --> 00:00:22.530
I hear you say.

00:00:22.530 --> 00:00:24.760
Dart is a new programming
language from Google designed

00:00:24.760 --> 00:00:26.600
to bring structured
programming to web

00:00:26.600 --> 00:00:27.850
applications.

00:00:27.850 --> 00:00:31.160
This includes things like
classes, libraries, package

00:00:31.160 --> 00:00:33.790
management, and tooling.

00:00:33.790 --> 00:00:35.430
Here you can see the most
visible tool in the Dart

00:00:35.430 --> 00:00:39.830
project, the Dart editor,
available at dartlang.org.

00:00:39.830 --> 00:00:41.800
This tool is based on
[INAUDIBLE] frame work, and is

00:00:41.800 --> 00:00:44.220
also available cross platform.

00:00:44.220 --> 00:00:47.270
To get started, let's create
a new application.

00:00:47.270 --> 00:00:50.865
I'm going to call this
one MapsApp.

00:00:54.820 --> 00:00:58.145
First thing I always do when
starting a new project is make

00:00:58.145 --> 00:01:00.260
the darn thing actually runs.

00:01:00.260 --> 00:01:05.890
So here we go, launching it up,
and making sure it reacts.

00:01:05.890 --> 00:01:06.630
That looks good to me.

00:01:06.630 --> 00:01:10.630
We have a working tool chain.

00:01:10.630 --> 00:01:13.850
So the next step, and one of
the things I mentioned that

00:01:13.850 --> 00:01:16.470
was great about Dart is
that it has packages.

00:01:16.470 --> 00:01:20.040
In this case, I went to
pub.dartlang.org and found

00:01:20.040 --> 00:01:23.330
that there was a package that
wraps the JavaScript Google

00:01:23.330 --> 00:01:28.190
Maps API up in a nice and
Dart-friendly way.

00:01:28.190 --> 00:01:31.660
So once I save this pubspec.yaml
file, you'll

00:01:31.660 --> 00:01:34.320
actually see the packages
included in this application

00:01:34.320 --> 00:01:37.330
will grow to include Google Maps
and all the things that

00:01:37.330 --> 00:01:39.970
Google Maps depends on.

00:01:39.970 --> 00:01:43.910
So now we can actually go ahead
and start writing a maps

00:01:43.910 --> 00:01:46.270
application.

00:01:46.270 --> 00:01:51.602
The first thing to do is put a
div on the screen, this one

00:01:51.602 --> 00:01:53.900
here, that will include
the map.

00:01:53.900 --> 00:01:56.970
The second thing is to make
sure that we include the

00:01:56.970 --> 00:02:00.340
Google JavaScript
API for maps.

00:02:00.340 --> 00:02:01.650
Next--

00:02:01.650 --> 00:02:04.360
and this is something I keep
forgetting to do-- is to make

00:02:04.360 --> 00:02:06.670
sure the map canvas actually
has a height.

00:02:06.670 --> 00:02:10.250
What I'm doing here on both the
body and the map canvas is

00:02:10.250 --> 00:02:14.220
making sure that we take
100% of the screen.

00:02:14.220 --> 00:02:19.166
Next, let's write
some Dart code.

00:02:23.990 --> 00:02:25.850
As I was mentioning
before, it has

00:02:25.850 --> 00:02:27.910
tools, and it has packages.

00:02:27.910 --> 00:02:32.740
So what we have here is the
first one, Dart HTML, gives us

00:02:32.740 --> 00:02:36.070
the ability to reach into the
dom and use CSS selectives to

00:02:36.070 --> 00:02:40.730
pull nodes out of the dom,
or elements in this case.

00:02:40.730 --> 00:02:45.680
The next thing is the Google
Maps dot dart file.

00:02:45.680 --> 00:02:49.120
It includes object wrappers for
things like map options.

00:02:49.120 --> 00:02:51.830
So traditionally in JavaScript,
this map options

00:02:51.830 --> 00:02:54.810
is a bare JavaScript object
with key value pairs.

00:02:54.810 --> 00:02:57.740
In the Dart version, we actually
have typed setters

00:02:57.740 --> 00:03:01.140
and getters for each of these
attributes of map options.

00:03:01.140 --> 00:03:03.310
So we know that zoom
takes a number.

00:03:03.310 --> 00:03:08.030
Map type ID takes a map type ID
object, so on and so forth.

00:03:08.030 --> 00:03:10.300
And we wrap that all up,
throw it into a Google

00:03:10.300 --> 00:03:11.550
map, and off we run.

00:03:14.440 --> 00:03:18.110
And we have a working map.

00:03:18.110 --> 00:03:22.330
Now, the next step is that I
like my maps to be on the

00:03:22.330 --> 00:03:27.160
screen and be nicely visible,
but I'm not quite sure what

00:03:27.160 --> 00:03:30.030
numbers to put in here
to pull out the

00:03:30.030 --> 00:03:31.710
specific detail I want.

00:03:31.710 --> 00:03:35.400
So what I'm going to do now is
I've added a pair of changed

00:03:35.400 --> 00:03:39.110
list nodes to the map, one
for the zoom level

00:03:39.110 --> 00:03:40.410
and one for the center.

00:03:40.410 --> 00:03:44.030
So now what I'm going to do is
when I rerun the project, I

00:03:44.030 --> 00:03:51.480
can turn around and center the
map where I want it, zoom in,

00:03:51.480 --> 00:03:54.130
get the location in Sydney
that looks--

00:03:54.130 --> 00:03:55.735
how about there?

00:03:55.735 --> 00:03:57.470
Maybe a little bit further in.

00:03:57.470 --> 00:03:59.490
That looks good to me.

00:03:59.490 --> 00:04:02.160
OK, now I have some
magic numbers.

00:04:02.160 --> 00:04:05.740
Now that I have these magic
numbers, printed so

00:04:05.740 --> 00:04:08.150
beautifully in the console here
by Dart, we can put them

00:04:08.150 --> 00:04:15.240
back in the source code and
rerun the application.

00:04:18.410 --> 00:04:19.829
That looks a whole lot better.

00:04:19.829 --> 00:04:22.610
Now I can actually see a chunk
of Sydney that I'm interested

00:04:22.610 --> 00:04:23.860
in walking around.

00:04:26.860 --> 00:04:31.400
If you're watching our Google
I/O announcements, either live

00:04:31.400 --> 00:04:34.690
at the venue or online
afterwards, you'll know that

00:04:34.690 --> 00:04:37.560
we released a new set
of map tiles.

00:04:37.560 --> 00:04:39.720
How do we get to these
from Dart?

00:04:39.720 --> 00:04:42.230
Well, this is the JavaScript
package that I was talking

00:04:42.230 --> 00:04:43.250
about up here.

00:04:43.250 --> 00:04:47.530
This allows us to reach into the
JavaScript context and set

00:04:47.530 --> 00:04:51.790
true to this part of
the tree here.

00:04:51.790 --> 00:04:55.220
And this will turn around and
allow for a new set of tiles

00:04:55.220 --> 00:04:57.670
to be pulled in by the
Google Maps API.

00:04:57.670 --> 00:05:00.720
As you can see, a much better
set of colors, and I think a

00:05:00.720 --> 00:05:01.972
much more readable map.

00:05:04.810 --> 00:05:06.220
The next step is--

00:05:06.220 --> 00:05:08.450
of course, with any map-- is
to put a whole bunch of red

00:05:08.450 --> 00:05:09.870
dots on it.

00:05:09.870 --> 00:05:13.120
So I have a data.json file
I prepared earlier.

00:05:13.120 --> 00:05:18.170
This data file is care of the
places API, which you can look

00:05:18.170 --> 00:05:20.110
up on Google Maps.

00:05:20.110 --> 00:05:26.140
And what we have here is a set
of lat longs and a bunch of

00:05:26.140 --> 00:05:27.330
restaurant names.

00:05:27.330 --> 00:05:32.870
So what I want to do now is
to put this on the map.

00:05:32.870 --> 00:05:35.230
First thing is first, let's
head into the Dart.

00:05:35.230 --> 00:05:38.785
And you can probably guess
what comes next.

00:05:38.785 --> 00:05:42.210
We're including a package that
allows us to turn JSON objects

00:05:42.210 --> 00:05:44.380
into native Dart objects.

00:05:44.380 --> 00:05:46.490
The next thing we're going to
do is we're going to write a

00:05:46.490 --> 00:05:50.300
function that works at Dart
structure and pulls out what

00:05:50.300 --> 00:05:54.050
we're interested in, ie, the
lat long and the name.

00:05:54.050 --> 00:05:55.470
So what's happening here?

00:05:55.470 --> 00:05:58.770
We're making a request back
to the server to get the

00:05:58.770 --> 00:06:01.830
data.json file, this one here.

00:06:01.830 --> 00:06:04.840
And then, once that is
successfully retrieved, we run

00:06:04.840 --> 00:06:06.700
this inline function--

00:06:06.700 --> 00:06:09.550
it's a nice inline anonymous
function, for those of you

00:06:09.550 --> 00:06:11.230
keeping score at home--

00:06:11.230 --> 00:06:15.320
to actually parse the data, walk
through, and then create

00:06:15.320 --> 00:06:18.580
a set of markers to
put on the map.

00:06:18.580 --> 00:06:21.490
Now, the most important step
when creating something like

00:06:21.490 --> 00:06:24.150
this is to actually
go look at it.

00:06:24.150 --> 00:06:26.510
So there we go.

00:06:26.510 --> 00:06:29.640
Hopefully I've lined everything
up correctly and

00:06:29.640 --> 00:06:31.680
will now have the map.

00:06:31.680 --> 00:06:33.370
Look at that, a map
with red markers.

00:06:33.370 --> 00:06:38.320
So I can zoom in here a bit,
hover over things.

00:06:38.320 --> 00:06:42.240
And we'll see titles of pizza
places around Sydney.

00:06:42.240 --> 00:06:43.540
What have I shown you here?

00:06:43.540 --> 00:06:47.000
I've shown you how to easily
use Google Maps from Dart.

00:06:47.000 --> 00:06:50.130
Just a handful of lines of code
has us visualizing JSON

00:06:50.130 --> 00:06:51.690
data on a map.

00:06:51.690 --> 00:06:53.770
Please reach out to
me on Google + if

00:06:53.770 --> 00:06:55.010
you have any questions.

00:06:55.010 --> 00:06:56.400
Thank you.

