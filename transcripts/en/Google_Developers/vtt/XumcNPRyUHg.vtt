WEBVTT
Kind: captions
Language: en

00:00:13.552 --> 00:00:15.260
JEFFREY POSNICK:
Hey, everybody.

00:00:15.260 --> 00:00:18.660
Welcome to this week's YouTube
Developers Live.

00:00:18.660 --> 00:00:21.970
I'm Jeff Posnick, broadcasting
from New York.

00:00:21.970 --> 00:00:24.410
We don't have any of our
Mountain View colleagues

00:00:24.410 --> 00:00:25.170
joining us today.

00:00:25.170 --> 00:00:26.400
We have lots of folks
traveling to

00:00:26.400 --> 00:00:28.100
really exciting events.

00:00:28.100 --> 00:00:30.670
So I'm going to be emceeing
the show.

00:00:30.670 --> 00:00:33.990
But we do have some awesome
guests joining us remotely

00:00:33.990 --> 00:00:35.140
from Zurich.

00:00:35.140 --> 00:00:39.680
And those are Ted Hamilton, who
is the product manager for

00:00:39.680 --> 00:00:43.280
YouTube Analytics, and Christoph
Schwab-Ganser, who

00:00:43.280 --> 00:00:47.180
is the lead engineer for the
YouTube Analytics API.

00:00:47.180 --> 00:00:50.070
And as you might imagine based
on the guests that we have

00:00:50.070 --> 00:00:52.780
today, we're going to be really
doing a nice deep dive

00:00:52.780 --> 00:00:55.250
on the YouTube Analytics API.

00:00:55.250 --> 00:01:00.120
This is a fairly new API that
we announced for the first

00:01:00.120 --> 00:01:02.470
time back at Google
I/O in July.

00:01:02.470 --> 00:01:04.910
And ever since then,
we've been slowly

00:01:04.910 --> 00:01:06.480
adding on some features.

00:01:06.480 --> 00:01:08.890
It's been publicly accessible
for a few weeks now.

00:01:08.890 --> 00:01:10.940
And hopefully, folks have had
a chance to play around with

00:01:10.940 --> 00:01:11.390
it already.

00:01:11.390 --> 00:01:14.400
If you haven't, you'll learn a
lot more today and hopefully

00:01:14.400 --> 00:01:16.070
get started soon.

00:01:16.070 --> 00:01:21.980
So I just want to say hi
to Ted and Christoph.

00:01:21.980 --> 00:01:22.300
TED HAMILTON: Hello.

00:01:22.300 --> 00:01:23.154
CHRISTOPH SCHWAB-GANSER: Hi.

00:01:23.154 --> 00:01:24.370
Hi there.

00:01:24.370 --> 00:01:25.960
JEFFREY POSNICK: And thanks
so much for joining us.

00:01:25.960 --> 00:01:28.630
So I kind of want to just dive
right in with some questions

00:01:28.630 --> 00:01:29.630
for you guys.

00:01:29.630 --> 00:01:33.620
And first of all, for folks
who maybe have not played

00:01:33.620 --> 00:01:36.410
around with the type of
Analytics data that we

00:01:36.410 --> 00:01:39.900
previously offered before
rolling out this YouTube

00:01:39.900 --> 00:01:43.580
Analytics API, there was
something called the Insight

00:01:43.580 --> 00:01:48.470
Report that you could retrieve
using the older version 2 of

00:01:48.470 --> 00:01:50.380
the YouTube GData API.

00:01:50.380 --> 00:01:54.610
And this would basically give
you back a really big .zip

00:01:54.610 --> 00:01:57.330
file, and the .zip file would
contain a whole bunch of

00:01:57.330 --> 00:02:01.350
comma-separated value files
and within those files had

00:02:01.350 --> 00:02:04.240
some useful YouTube
Analytics data.

00:02:04.240 --> 00:02:08.669
But kind of the whole process
of doing that .zip file

00:02:08.669 --> 00:02:12.480
extraction and CSV parsing maybe
wasn't every developer's

00:02:12.480 --> 00:02:16.680
favorite way of interacting
with the API.

00:02:16.680 --> 00:02:19.830
So I'm curious if you guys could
talk a little bit about

00:02:19.830 --> 00:02:23.060
how this new YouTube Analytics
API is different from what we

00:02:23.060 --> 00:02:26.470
used to offer with Insight
and what's the developer

00:02:26.470 --> 00:02:30.220
experience like if you're
using the Analytics API.

00:02:30.220 --> 00:02:32.800
CHRISTOPH SCHWAB-GANSER: So the
new Analytics API allows

00:02:32.800 --> 00:02:36.490
you to basically ask precise
questions and then get really

00:02:36.490 --> 00:02:41.410
a precise answer, unlike the old
system, which just had a

00:02:41.410 --> 00:02:44.550
zip file full of answers, and
you had to find the one which

00:02:44.550 --> 00:02:46.130
you were really interested in.

00:02:46.130 --> 00:02:49.300
So for example, now we can ask,
what are the views, for

00:02:49.300 --> 00:02:51.400
example, for my videos
from Italy.

00:02:51.400 --> 00:02:52.650
And you just get this number.

00:02:52.650 --> 00:02:55.960
Or you can ask, where was my
video [INAUDIBLE] to, for

00:02:55.960 --> 00:02:57.960
example, in what page.

00:02:57.960 --> 00:03:00.610
So this is another example
of a query.

00:03:00.610 --> 00:03:02.770
So it's really a lot more--

00:03:02.770 --> 00:03:05.190
it allows you to make a precise
query, and you get

00:03:05.190 --> 00:03:07.480
just the data that
you asked for.

00:03:07.480 --> 00:03:12.720
It also allows you to develop
applications like from the web

00:03:12.720 --> 00:03:16.270
pages, whereas with a .zip file,
it's not really possible

00:03:16.270 --> 00:03:19.520
to pull this from JavaScript.

00:03:19.520 --> 00:03:21.240
So that's another advantage.

00:03:21.240 --> 00:03:22.790
TED HAMILTON: Yeah, I mean
previously, it would have been

00:03:22.790 --> 00:03:27.170
impossible, basically, to make
a dashboard or an app where

00:03:27.170 --> 00:03:29.200
you're just looking
up point data.

00:03:29.200 --> 00:03:33.490
You'd have to basically download
a CSV, cache it

00:03:33.490 --> 00:03:34.960
locally somewhere so
that you could

00:03:34.960 --> 00:03:36.510
actually have quick lookups.

00:03:36.510 --> 00:03:38.260
But now you can get exactly
the data that

00:03:38.260 --> 00:03:39.540
you're looking for.

00:03:39.540 --> 00:03:44.010
An Android app, an Android
widget, or iOS, all of that

00:03:44.010 --> 00:03:47.380
becomes a whole lot simpler.

00:03:47.380 --> 00:03:47.750
JEFFREY POSNICK: Awesome.

00:03:47.750 --> 00:03:51.700
And I know that what you
describe with the YouTube

00:03:51.700 --> 00:03:54.410
Analytics API's approach, that's
very much in keeping

00:03:54.410 --> 00:03:57.000
with something we've talked
about previously in this show,

00:03:57.000 --> 00:04:00.920
the new version of the Data
API, where it's a very

00:04:00.920 --> 00:04:03.820
targeted set of information that
gets returned, especially

00:04:03.820 --> 00:04:07.150
compared to the older Atom
XML response format

00:04:07.150 --> 00:04:08.420
that it used to get.

00:04:08.420 --> 00:04:13.070
The older version of the Data
API, so kind of using the same

00:04:13.070 --> 00:04:16.050
analogy, you're getting exactly
what you want for.

00:04:16.050 --> 00:04:19.860
That's obviously better for us
in terms of not having to run

00:04:19.860 --> 00:04:22.960
reports and generate metrics
that you don't care about, and

00:04:22.960 --> 00:04:27.020
it makes for more responsive
applications.

00:04:27.020 --> 00:04:31.700
Also worth pointing out that
it's built on the same sort of

00:04:31.700 --> 00:04:34.970
back end that the Data
API is using.

00:04:34.970 --> 00:04:37.150
So for folks out there who have
already started their

00:04:37.150 --> 00:04:41.170
Data API integration, using
the Analytics API should

00:04:41.170 --> 00:04:43.260
hopefully be straightforward
for you guys.

00:04:43.260 --> 00:04:48.190
Same set of client libraries,
OAuth 2.0 type of flow.

00:04:48.190 --> 00:04:50.830
And hopefully you can build some
really cool applications

00:04:50.830 --> 00:04:54.680
that use both of those
APIs together.

00:04:54.680 --> 00:04:59.270
So I've noticed that there's
still some statistics that

00:04:59.270 --> 00:05:01.450
developers can get
via the YouTube

00:05:01.450 --> 00:05:03.190
Analytics web interface.

00:05:03.190 --> 00:05:08.540
And those aren't yet exposed via
the API, or weren't until

00:05:08.540 --> 00:05:09.750
recently exposed.

00:05:09.750 --> 00:05:11.860
I mean, we do have a few
announcements to make

00:05:11.860 --> 00:05:14.620
regarding some new
statistics today.

00:05:14.620 --> 00:05:17.730
So what's the long-term plan
for the API in terms of

00:05:17.730 --> 00:05:21.780
catching up with what you can
get through the web interface?

00:05:21.780 --> 00:05:24.550
TED HAMILTON: So basically, the
API should be every bit as

00:05:24.550 --> 00:05:28.550
powerful as the web UI.

00:05:28.550 --> 00:05:30.950
As a general rule, we want to
enable you to do anything that

00:05:30.950 --> 00:05:36.110
you can do on YTA, you can do
analytics through the API,

00:05:36.110 --> 00:05:40.010
with the slight exception that
we might be able to put more

00:05:40.010 --> 00:05:41.770
experimental data or something
like that on the UI.

00:05:41.770 --> 00:05:43.760
But when we put something in
the API, we want it to be

00:05:43.760 --> 00:05:44.980
around for a while.

00:05:44.980 --> 00:05:46.370
So there might be a
slight lag there.

00:05:46.370 --> 00:05:50.070
But for instance, we hear all
the time that earnings data is

00:05:50.070 --> 00:05:52.630
missing or audience retention
data is missing.

00:05:52.630 --> 00:05:56.456
And we want to find a way to
provide that data so we can

00:05:56.456 --> 00:06:00.752
give you everything that you
need to have a complete data

00:06:00.752 --> 00:06:01.656
set, basically.

00:06:01.656 --> 00:06:02.110
JEFFREY POSNICK: OK.

00:06:02.110 --> 00:06:05.220
So definitely patience is
recommended for developers out

00:06:05.220 --> 00:06:06.960
there who are waiting for their

00:06:06.960 --> 00:06:08.850
specific favorite metric.

00:06:08.850 --> 00:06:10.150
TED HAMILTON: Yeah, exactly.

00:06:10.150 --> 00:06:13.370
It's not easy to wait, but we
want you to have it as much as

00:06:13.370 --> 00:06:15.220
you want to have it.

00:06:15.220 --> 00:06:15.750
JEFFREY POSNICK: Absolutely.

00:06:15.750 --> 00:06:17.330
Cool.

00:06:17.330 --> 00:06:20.300
Another thing that I know that
developers out there have

00:06:20.300 --> 00:06:22.680
probably noticed and might have
questions about is the

00:06:22.680 --> 00:06:26.200
fact that the Analytics API is
currently marked as being

00:06:26.200 --> 00:06:30.710
experimental, which has
a very specific set of

00:06:30.710 --> 00:06:32.130
connotations around it.

00:06:32.130 --> 00:06:35.200
So what does being an
experimental API mean for

00:06:35.200 --> 00:06:37.840
developers, and can you talk
a little bit about what the

00:06:37.840 --> 00:06:39.890
process might be for leaving
experimental?

00:06:42.700 --> 00:06:44.410
CHRISTOPH SCHWAB-GANSER:
Experimental means that we

00:06:44.410 --> 00:06:46.190
still can make changes
to the API.

00:06:46.190 --> 00:06:49.240
So basically, you're not bound
to the terms of services that

00:06:49.240 --> 00:06:51.640
the other APIs are.

00:06:51.640 --> 00:06:56.490
And so we should mention that
we didn't make any breaking

00:06:56.490 --> 00:07:01.240
change since we entered
like trusted testing.

00:07:01.240 --> 00:07:03.700
And basically, I think the
criteria for leaving

00:07:03.700 --> 00:07:06.870
experimental is that we have
confidence in the structure of

00:07:06.870 --> 00:07:10.540
the API and basically that we
have enough positive feedback

00:07:10.540 --> 00:07:14.130
from partners and developers
that the API's

00:07:14.130 --> 00:07:16.620
really what they want.

00:07:16.620 --> 00:07:18.760
JEFFREY POSNICK: Yeah, so I
guess there might be some

00:07:18.760 --> 00:07:21.200
developers out there who see
experimental and say, I don't

00:07:21.200 --> 00:07:24.200
even want to bother developing
anything or trying out this

00:07:24.200 --> 00:07:27.030
API until that experimental
label goes away.

00:07:27.030 --> 00:07:30.130
And it sounds, based on what
you're saying, that would kind

00:07:30.130 --> 00:07:34.740
of be a negative reinforcement
cycle where we're looking for

00:07:34.740 --> 00:07:37.720
the feedback that we only get
when developers are using

00:07:37.720 --> 00:07:38.330
these APIs.

00:07:38.330 --> 00:07:40.240
So if they just wait,
we're never

00:07:40.240 --> 00:07:41.380
going to get that feedback.

00:07:41.380 --> 00:07:43.700
And that might actually delay
the process of removing the

00:07:43.700 --> 00:07:46.310
experimental label.

00:07:46.310 --> 00:07:50.130
If I can kind of interpret what
you're saying and have

00:07:50.130 --> 00:07:54.420
the main takeaway that please,
if you are doing anything with

00:07:54.420 --> 00:07:58.060
Analytics, and you're doing
stuff that might use the older

00:07:58.060 --> 00:08:02.380
Insight Report in particular,
please start using the YouTube

00:08:02.380 --> 00:08:03.660
Analytics API.

00:08:03.660 --> 00:08:07.780
It's definitely what the future
of Analytics will be

00:08:07.780 --> 00:08:09.030
for YouTube.

00:08:11.290 --> 00:08:14.390
It has all the benefits that
we talked about before, and

00:08:14.390 --> 00:08:16.480
we're always interested in
getting the feedback while

00:08:16.480 --> 00:08:17.280
we're in the experimental
phase.

00:08:17.280 --> 00:08:20.470
And even when we leave the
experimental phase, we

00:08:20.470 --> 00:08:23.690
obviously still want to hear
what developers have to say

00:08:23.690 --> 00:08:25.600
about the API.

00:08:25.600 --> 00:08:27.170
TED HAMILTON: I want to
emphasize what Christoph

00:08:27.170 --> 00:08:30.320
already said is that
it has been stable.

00:08:30.320 --> 00:08:31.310
We have not changed it.

00:08:31.310 --> 00:08:33.775
We have to mark it as
experimental because we need

00:08:33.775 --> 00:08:37.230
to reserve the right, if we get
feedback from you guys, to

00:08:37.230 --> 00:08:37.980
make a slight change.

00:08:37.980 --> 00:08:40.440
But this is basically
the model that we

00:08:40.440 --> 00:08:41.900
use for our own app.

00:08:41.900 --> 00:08:46.910
So we expect it to kind of
stay the way that it is.

00:08:46.910 --> 00:08:50.270
And yeah, people, please
do use it.

00:08:50.270 --> 00:08:52.630
And if something does change,
it's not going to change

00:08:52.630 --> 00:08:53.350
significantly.

00:08:53.350 --> 00:08:58.600
So the more feedback that you
can proactively provide, the

00:08:58.600 --> 00:09:01.120
better sense that we get for
whether things are working

00:09:01.120 --> 00:09:01.980
well or not working.

00:09:01.980 --> 00:09:05.555
And of course, we're monitoring
the usage just to

00:09:05.555 --> 00:09:07.660
know how that's ramping up.

00:09:07.660 --> 00:09:08.530
JEFFREY POSNICK: Cool.

00:09:08.530 --> 00:09:10.730
Definitely makes sense.

00:09:10.730 --> 00:09:14.000
Can you guys, either of you,
speak to some of the specific

00:09:14.000 --> 00:09:18.330
limitations that are currently
in the API around generating

00:09:18.330 --> 00:09:22.310
very large reports, maybe
running specific report types

00:09:22.310 --> 00:09:25.680
against channels that
have thousands and

00:09:25.680 --> 00:09:27.960
thousands of videos?

00:09:27.960 --> 00:09:30.560
What's that experience like
today, and what kind of

00:09:30.560 --> 00:09:32.770
limitations are in place?

00:09:32.770 --> 00:09:36.540
TED HAMILTON: Well, so it's
basically limited by how fast

00:09:36.540 --> 00:09:38.060
you can iterate through
the data and of

00:09:38.060 --> 00:09:39.850
course your rate limit.

00:09:39.850 --> 00:09:43.740
It's not designed to basically
be a data import

00:09:43.740 --> 00:09:46.410
functionality, where we
basically just export all of

00:09:46.410 --> 00:09:49.070
the data that we have
in our back end, and

00:09:49.070 --> 00:09:50.450
you can ingest it.

00:09:50.450 --> 00:09:53.510
It's meant to be much more
like precise point lookup

00:09:53.510 --> 00:09:54.900
dashboarding type of thing.

00:09:54.900 --> 00:09:59.070
And then if you have a
manageable amount of videos,

00:09:59.070 --> 00:10:00.620
it works quite well.

00:10:00.620 --> 00:10:05.160
But on the far end of the
spectrum, some of our partners

00:10:05.160 --> 00:10:07.970
have literally thousands of
channels, and each one of

00:10:07.970 --> 00:10:09.460
those has many, many videos.

00:10:09.460 --> 00:10:14.580
And so we'll work on a solution
for that type of user

00:10:14.580 --> 00:10:17.860
where they can basically
download the data, ingest it

00:10:17.860 --> 00:10:20.850
into their data warehouse,
so they can

00:10:20.850 --> 00:10:22.330
perform analysis on it.

00:10:22.330 --> 00:10:24.110
We're working on that
type of thing.

00:10:24.110 --> 00:10:27.850
And that we'd expect to be
probably in the first

00:10:27.850 --> 00:10:30.190
half of next year.

00:10:30.190 --> 00:10:32.850
So if you have immense data
needs and literally just want

00:10:32.850 --> 00:10:38.430
to ingest the data to merge with
your other internal data

00:10:38.430 --> 00:10:41.860
or data from other networks or
whatever, that might be a

00:10:41.860 --> 00:10:42.620
solution for you.

00:10:42.620 --> 00:10:45.120
But it's still a ways off.

00:10:45.120 --> 00:10:45.310
JEFFREY POSNICK: OK.

00:10:45.310 --> 00:10:46.200
That definitely makes sense.

00:10:46.200 --> 00:10:49.760
And I know that I've heard
questions from developers

00:10:49.760 --> 00:10:52.800
specifically who weren't
necessarily aware of that

00:10:52.800 --> 00:10:53.580
limitation.

00:10:53.580 --> 00:10:54.920
We try to spell it
out in the docs.

00:10:54.920 --> 00:10:57.650
But for instance, if you are
running certain types of

00:10:57.650 --> 00:11:01.740
reports, you could only retrieve
the actual metrics

00:11:01.740 --> 00:11:06.700
for the top 10 videos in a
given channel sorted by

00:11:06.700 --> 00:11:08.490
decreasing views,
for instance.

00:11:08.490 --> 00:11:11.030
So that's the type of limitation
that is in place.

00:11:11.030 --> 00:11:13.080
You can't say I want
every single video.

00:11:13.080 --> 00:11:15.070
But you can still
run a report.

00:11:15.070 --> 00:11:17.850
It's just that it's kind of
limited to the top 10 videos

00:11:17.850 --> 00:11:19.550
in your channel.

00:11:19.550 --> 00:11:21.410
TED HAMILTON: You can
individually request the data

00:11:21.410 --> 00:11:22.590
for every single video.

00:11:22.590 --> 00:11:22.850
JEFFREY POSNICK: Absolutely.

00:11:22.850 --> 00:11:25.940
TED HAMILTON: But you can't get
a sort of list of beyond

00:11:25.940 --> 00:11:29.560
the top 10 for most
things right now.

00:11:29.560 --> 00:11:29.960
JEFFREY POSNICK: Right.

00:11:29.960 --> 00:11:30.360
OK.

00:11:30.360 --> 00:11:34.370
And that's just something we
want developers to know that's

00:11:34.370 --> 00:11:37.070
intentional right now, and it's
for all the reasons that

00:11:37.070 --> 00:11:38.790
Ted mentioned.

00:11:38.790 --> 00:11:42.410
So just be aware of that
limitation for right now.

00:11:42.410 --> 00:11:46.820
And we talked a little bit about
this having to do with

00:11:46.820 --> 00:11:49.020
how expensive certain
reports could be.

00:11:49.020 --> 00:11:52.475
What should developers know
about the way quota works with

00:11:52.475 --> 00:11:54.130
the Analytics API?

00:11:54.130 --> 00:11:56.990
I know that quota is always a
big topic when we talk about

00:11:56.990 --> 00:11:57.700
the Data API.

00:11:57.700 --> 00:12:02.390
And people will want to know
what types of calls are more

00:12:02.390 --> 00:12:03.340
expensive than others.

00:12:03.340 --> 00:12:04.880
How can they kind of optimize
their usage?

00:12:04.880 --> 00:12:06.720
Because we obviously do need
to place some limit on the

00:12:06.720 --> 00:12:09.720
type of API traffic
that we receive.

00:12:09.720 --> 00:12:12.185
So if you could go into a little
more detail publicly, I

00:12:12.185 --> 00:12:16.250
know our developers would be
really happy to hear that.

00:12:16.250 --> 00:12:19.820
CHRISTOPH SCHWAB-GANSER: Yeah,
basically, our API server does

00:12:19.820 --> 00:12:22.520
a variable amount of work
depending on your query.

00:12:22.520 --> 00:12:24.930
Basically, it's going to fetch
more or less data on

00:12:24.930 --> 00:12:26.585
processes for you.

00:12:26.585 --> 00:12:29.275
And basically, this is also
reflected in the amount of

00:12:29.275 --> 00:12:32.396
quota that we deduct from
your develop quota.

00:12:32.396 --> 00:12:35.590
And we have something documented
on our public

00:12:35.590 --> 00:12:36.920
documentation.

00:12:36.920 --> 00:12:41.330
And basically, you can say the
more columns or metrics that

00:12:41.330 --> 00:12:44.370
you add to your report,
the more expensive the

00:12:44.370 --> 00:12:45.750
request will be.

00:12:45.750 --> 00:12:49.110
And also, when you get, for
example, for top videos, when

00:12:49.110 --> 00:12:52.090
you get a top video report, and
you add many metrics, it's

00:12:52.090 --> 00:12:55.620
going to be more like
exponentially

00:12:55.620 --> 00:12:57.570
expensive as we look up.

00:12:57.570 --> 00:13:01.280
Every value in this table
represents a separate lookup,

00:13:01.280 --> 00:13:05.010
and this is reflected in
the quota deduction.

00:13:05.010 --> 00:13:08.150
So as a general guideline, it's
good if you just request

00:13:08.150 --> 00:13:11.720
only the data that you really
need, of course.

00:13:11.720 --> 00:13:16.260
And that you also, if you're
ingesting data in a database,

00:13:16.260 --> 00:13:19.860
that you then prepare it for
quota errors, limitations, and

00:13:19.860 --> 00:13:24.200
that you have an exponential
backoff based as you rate

00:13:24.200 --> 00:13:27.212
limit your request to our API.

00:13:27.212 --> 00:13:27.660
JEFFREY POSNICK: Yeah.

00:13:27.660 --> 00:13:31.960
And I'm sure folks might run
into that, people who despite

00:13:31.960 --> 00:13:34.950
our disclaimer about this not
really being a data dump, who

00:13:34.950 --> 00:13:38.990
do try to do a data dump and get
individual reports one by

00:13:38.990 --> 00:13:43.500
one for each video ID in their
channel, let's say.

00:13:43.500 --> 00:13:46.370
That's a really easy way to
trigger quota errors if you

00:13:46.370 --> 00:13:48.850
keep doing that quickly enough
and you have enough videos.

00:13:48.850 --> 00:13:53.840
So do be prepared to kind of
back off in that case using,

00:13:53.840 --> 00:13:57.310
ideally, an exponential
backoff.

00:13:57.310 --> 00:13:58.530
CHRISTOPH SCHWAB-GANSER: You
can also give us feedback

00:13:58.530 --> 00:14:00.230
based on the quota
limitations.

00:14:00.230 --> 00:14:03.470
Just tell us if they
are too narrow.

00:14:03.470 --> 00:14:06.980
[INAUDIBLE] we are still open,
of course, to your feedback.

00:14:06.980 --> 00:14:08.290
JEFFREY POSNICK: Yeah, I know
that while we're in

00:14:08.290 --> 00:14:11.840
experimental mode, we have a
default amount of quota units

00:14:11.840 --> 00:14:13.040
that we're giving people.

00:14:13.040 --> 00:14:16.827
And I don't want to speak for
you guys, but I'm assuming we

00:14:16.827 --> 00:14:21.250
could kind of be a little bit
reactive in terms of upping

00:14:21.250 --> 00:14:25.140
that in general as a default
if things look like

00:14:25.140 --> 00:14:26.940
it was set too low.

00:14:26.940 --> 00:14:29.210
So that's one of the things I
want to hear about, and I'll

00:14:29.210 --> 00:14:33.990
pass it along to the relevant
you guys on the team.

00:14:33.990 --> 00:14:37.030
So those are the main questions
that I had.

00:14:37.030 --> 00:14:39.910
And we're going to answer some
questions a little bit later

00:14:39.910 --> 00:14:41.240
from the Google Moderator
link.

00:14:41.240 --> 00:14:45.390
For those who are watching
this live on YouTube, you

00:14:45.390 --> 00:14:47.870
should see in the comments a
link to the Google Moderator

00:14:47.870 --> 00:14:48.940
queue for any questions.

00:14:48.940 --> 00:14:50.050
So this is your chance to ask

00:14:50.050 --> 00:14:52.620
questions of Ted and Christoph.

00:14:52.620 --> 00:14:54.400
But we'll get to that
in a little bit.

00:14:54.400 --> 00:14:57.530
Before we do, I wanted to show
off some of the cool new

00:14:57.530 --> 00:15:00.180
things using the Google
APIs Explorer.

00:15:00.180 --> 00:15:02.940
So both show off how you can
use the API Explorer to run

00:15:02.940 --> 00:15:05.560
Analytics reports, because
not everybody knows that.

00:15:05.560 --> 00:15:08.920
And that, in and of itself,
is very cool.

00:15:08.920 --> 00:15:12.040
But I also wanted to show off
some of the new metrics that

00:15:12.040 --> 00:15:15.100
are now available via
YouTube Analytics.

00:15:15.100 --> 00:15:18.100
And I think this is available
as of earlier

00:15:18.100 --> 00:15:19.620
today or as of yesterday.

00:15:19.620 --> 00:15:21.695
Is that right, Christoph,
some of these things?

00:15:21.695 --> 00:15:22.890
CHRISTOPH SCHWAB-GANSER:
Hours ago.

00:15:22.890 --> 00:15:23.240
JEFFREY POSNICK: Yeah.

00:15:23.240 --> 00:15:28.850
So, they're so fresh that our
tech writer is working very,

00:15:28.850 --> 00:15:31.250
very diligently to try to get
everything documented.

00:15:31.250 --> 00:15:32.900
But you won't necessarily
see these things in

00:15:32.900 --> 00:15:34.760
the docs quite yet.

00:15:34.760 --> 00:15:36.390
That should come shortly.

00:15:36.390 --> 00:15:39.160
But nice little perk for tuning,
and you get a sneak

00:15:39.160 --> 00:15:43.000
preview of what we're about to
add to the API, or what we

00:15:43.000 --> 00:15:44.030
just added to the API.

00:15:44.030 --> 00:15:45.846
TED HAMILTON: Hopefully
it works.

00:15:45.846 --> 00:15:47.470
JEFFREY POSNICK: Yeah, hopefully
it does work.

00:15:47.470 --> 00:15:48.660
I think I'm going--

00:15:48.660 --> 00:15:49.820
yeah.

00:15:49.820 --> 00:15:53.790
So if you take a look at what I
have on my screen right now,

00:15:53.790 --> 00:15:56.890
I am using the Google
APIs Explorer.

00:15:56.890 --> 00:16:00.490
And this is something that,
it's a public tool that

00:16:00.490 --> 00:16:01.990
anybody can go and use.

00:16:01.990 --> 00:16:06.690
It takes advantage of being able
to do a nice OAuth 2.0 in

00:16:06.690 --> 00:16:07.480
the browser flow.

00:16:07.480 --> 00:16:11.430
So I've already authorized
access to this test account

00:16:11.430 --> 00:16:12.660
using OAuth 2.0.

00:16:12.660 --> 00:16:15.620
But if you go to this for the
first time, you have a chance

00:16:15.620 --> 00:16:17.350
to authorize access.

00:16:17.350 --> 00:16:18.400
You don't have to put
in your username

00:16:18.400 --> 00:16:19.320
and password anywhere.

00:16:19.320 --> 00:16:24.050
It integrates nicely
in that regard.

00:16:24.050 --> 00:16:27.080
Actually, folks might not be
able to see what the URL is.

00:16:27.080 --> 00:16:29.850
But if you go to
developers.google.com, I think

00:16:29.850 --> 00:16:33.040
there's a link to the APIs
Explorer at the bottom.

00:16:33.040 --> 00:16:35.055
But the main URL is
developers.googl

00:16:35.055 --> 00:16:39.270
e.com/apis-explorer.

00:16:39.270 --> 00:16:41.740
And you can get there
from here.

00:16:41.740 --> 00:16:45.760
So I'm going to show off a
couple of new reports.

00:16:45.760 --> 00:16:49.410
These reports are kind of run
against a test content owner

00:16:49.410 --> 00:16:51.580
account that we have set up.

00:16:51.580 --> 00:16:53.300
This is actually something I
wanted to point out because

00:16:53.300 --> 00:16:56.280
this came up recently
in Stack Overflow.

00:16:56.280 --> 00:16:57.880
Somebody was asking a question,
and they weren't

00:16:57.880 --> 00:17:03.370
quite sure what the syntax was
to use for the IDs parameters

00:17:03.370 --> 00:17:06.160
that you see over here--
let me make it

00:17:06.160 --> 00:17:08.869
a little bit bigger--

00:17:08.869 --> 00:17:10.700
the IDs parameter that's over
here when you're doing a

00:17:10.700 --> 00:17:12.310
content owner.

00:17:12.310 --> 00:17:15.480
So basically, the way it looks
like is content owner equals

00:17:15.480 --> 00:17:18.760
equals and then the name
of the content owner.

00:17:18.760 --> 00:17:21.970
It's not a alphanumeric ID.

00:17:21.970 --> 00:17:23.884
It's the actual name of
the content owner.

00:17:23.884 --> 00:17:26.810
So that's what we're
doing in this case.

00:17:26.810 --> 00:17:30.150
We are doing a normal month-long
report with a start

00:17:30.150 --> 00:17:31.690
date and end date.

00:17:31.690 --> 00:17:38.430
We're making use, in this case,
of some of the new watch

00:17:38.430 --> 00:17:41.520
time data that is now available
in the API.

00:17:41.520 --> 00:17:44.470
So we're asking for the
estimated minutes watched, the

00:17:44.470 --> 00:17:47.380
average view duration,
and the average

00:17:47.380 --> 00:17:49.960
view percentage metric.

00:17:49.960 --> 00:17:52.730
This is something that people
have been really asking about

00:17:52.730 --> 00:17:54.170
since we announced the
Analytics API.

00:17:54.170 --> 00:17:56.360
You can now do it,
which is great.

00:17:56.360 --> 00:17:59.700
And the dimension in
this case is video.

00:17:59.700 --> 00:18:03.440
And we have a filter here to the
videos that we uploaded.

00:18:03.440 --> 00:18:05.350
And over here is 10 results.

00:18:05.350 --> 00:18:07.900
And we are sorting by decreasing
estimated minutes

00:18:07.900 --> 00:18:10.250
watch, in this case.

00:18:10.250 --> 00:18:12.350
This is another thing to
point out for folks.

00:18:12.350 --> 00:18:14.250
Not everybody--

00:18:14.250 --> 00:18:18.010
this also came up on Stack
Overflow once, where somebody

00:18:18.010 --> 00:18:21.280
missed that minus sign
that was at the

00:18:21.280 --> 00:18:22.880
start of a sort order.

00:18:22.880 --> 00:18:24.470
That lets you sort
by decreasing.

00:18:24.470 --> 00:18:27.240
So for instance, if you're
doing certain types of

00:18:27.240 --> 00:18:29.510
reports, you need to sort
by decreasing views.

00:18:29.510 --> 00:18:30.620
So be sure--

00:18:30.620 --> 00:18:34.340
that minus sign actually
is really important.

00:18:34.340 --> 00:18:38.560
And I actually already executed
this report, that we

00:18:38.560 --> 00:18:41.890
could click Execute if you
want to run it yourself.

00:18:41.890 --> 00:18:43.570
And what you get back
is your standard

00:18:43.570 --> 00:18:45.890
YouTube Analytics response.

00:18:45.890 --> 00:18:48.870
For folks who haven't actually
tried the Analytics API

00:18:48.870 --> 00:18:51.170
before, you get back
JSON data.

00:18:51.170 --> 00:18:52.380
It's pretty easy to parse.

00:18:52.380 --> 00:18:57.710
I think you can also request CSV
data, if I'm not mistaken.

00:18:57.710 --> 00:19:01.070
I like working with JSON, so
that's the default, and that's

00:19:01.070 --> 00:19:03.270
what I'm showing off here.

00:19:03.270 --> 00:19:06.250
You get back something that
describes the headers for each

00:19:06.250 --> 00:19:06.750
of the columns.

00:19:06.750 --> 00:19:07.860
And then you just
get back rows.

00:19:07.860 --> 00:19:11.220
So it's kind of like a
serialized version of a report

00:19:11.220 --> 00:19:13.090
table, more or less.

00:19:13.090 --> 00:19:17.590
Each row, in this case, has the
video ID, the estimated

00:19:17.590 --> 00:19:21.270
minutes watched, view duration,
and the average view

00:19:21.270 --> 00:19:24.190
percentage, which shows, I
believe, what the average

00:19:24.190 --> 00:19:27.200
viewer has viewed of the video,
whether they've viewed

00:19:27.200 --> 00:19:29.440
100% or 75% or so on.

00:19:29.440 --> 00:19:34.970
So in this particular
case, 48.669%, which

00:19:34.970 --> 00:19:36.850
isn't bad at all.

00:19:36.850 --> 00:19:39.830
So this is really useful data
for folks who are curious

00:19:39.830 --> 00:19:43.940
about how many minutes watched
their videos have had, what

00:19:43.940 --> 00:19:46.270
the most popular videos are on
their accounts, according to

00:19:46.270 --> 00:19:49.510
minutes watched over a certain
period of time.

00:19:49.510 --> 00:19:51.810
And something you couldn't do
before, and something I would

00:19:51.810 --> 00:19:54.920
imagine would have been very,
very difficult using the

00:19:54.920 --> 00:19:56.680
Insight API.

00:19:56.680 --> 00:19:58.790
You certainly couldn't just have
run a report and asked

00:19:58.790 --> 00:20:01.330
for those specific
types of metrics.

00:20:01.330 --> 00:20:05.350
You would've had to parse a
really big CSV file and kind

00:20:05.350 --> 00:20:08.500
of interpret the results
yourself.

00:20:08.500 --> 00:20:10.140
So that's pretty cool that
you can do that now.

00:20:10.140 --> 00:20:12.620
A couple other things that
I wanted to show off.

00:20:12.620 --> 00:20:18.480
This one is making use of the
playback location dimension,

00:20:18.480 --> 00:20:24.440
which is now available on the
API for a specific video ID.

00:20:24.440 --> 00:20:30.260
And what this will let us do
is get the top 10 videos

00:20:30.260 --> 00:20:32.600
sorted by decreasing views--

00:20:32.600 --> 00:20:35.640
sorry, get the top 10 locations
for playback sorted

00:20:35.640 --> 00:20:41.120
by decreasing values, based on
where they were played back.

00:20:41.120 --> 00:20:43.560
So in this case, this is a video
that has presumably been

00:20:43.560 --> 00:20:49.160
embedded a few places, embed
over here on Facebook, on

00:20:49.160 --> 00:20:52.526
YouTube.com, a few
other sites.

00:20:52.526 --> 00:20:55.340
It gives you a real
interesting way of

00:20:55.340 --> 00:20:56.360
looking at your data.

00:20:56.360 --> 00:20:58.556
You might have embedding enabled
for your videos, and

00:20:58.556 --> 00:21:00.630
you want to see where they're
being played back.

00:21:00.630 --> 00:21:02.415
It's pretty awesome that
you can do that now.

00:21:05.600 --> 00:21:09.080
One other report to show
off, this is a

00:21:09.080 --> 00:21:13.800
source of your playbacks.

00:21:13.800 --> 00:21:16.100
And I believe if I just scroll
down over here--

00:21:16.100 --> 00:21:19.340
OK, the source for traffic
to your videos.

00:21:19.340 --> 00:21:22.180
So over here, you can see which
playbacks came from

00:21:22.180 --> 00:21:25.720
YouTube channels, people went to
your videos via the channel

00:21:25.720 --> 00:21:30.820
versus via search on YouTube
versus via just like organic

00:21:30.820 --> 00:21:34.420
Google search versus related
videos versus just

00:21:34.420 --> 00:21:36.630
clicking on the URL .

00:21:36.630 --> 00:21:41.880
So also really super useful, if
you care about how people

00:21:41.880 --> 00:21:43.880
are finding your videos, you
want to see what the top

00:21:43.880 --> 00:21:48.300
sources are for people who are
discovering your content so

00:21:48.300 --> 00:21:50.710
you could maybe focus a little
bit more on that.

00:21:50.710 --> 00:21:53.230
And that's also something there
that you can now do

00:21:53.230 --> 00:21:55.255
using the API.

00:21:55.255 --> 00:21:56.980
So I'm personally pretty
excited to see

00:21:56.980 --> 00:21:59.700
that new stuff added.

00:21:59.700 --> 00:22:04.130
Is there anything else that is
notable that I didn't cover in

00:22:04.130 --> 00:22:07.750
these demos that you guys wanted
to bring up in terms of

00:22:07.750 --> 00:22:09.720
new types of metrics
that are available?

00:22:13.320 --> 00:22:15.920
CHRISTOPH SCHWAB-GANSER: These
are the main two features

00:22:15.920 --> 00:22:17.640
[INAUDIBLE], so yes.

00:22:17.640 --> 00:22:18.340
JEFFREY POSNICK: OK.

00:22:18.340 --> 00:22:22.240
And people have been asking us
for that for a while, so it's

00:22:22.240 --> 00:22:24.650
really exciting to
see those there.

00:22:24.650 --> 00:22:26.050
OK.

00:22:26.050 --> 00:22:27.610
So play around with
those demos.

00:22:27.610 --> 00:22:30.290
That's a great way to get
familiar with the API without

00:22:30.290 --> 00:22:31.600
having to write any
code yourself.

00:22:31.600 --> 00:22:36.430
I mean, you obviously can make
all these requests in an

00:22:36.430 --> 00:22:39.050
automated fashion using
pretty much any

00:22:39.050 --> 00:22:40.785
language of your choosing.

00:22:40.785 --> 00:22:45.600
We have other client libraries
that support most of the

00:22:45.600 --> 00:22:47.830
popular programming languages
out there.

00:22:47.830 --> 00:22:51.720
And if you're running into
questions, either using the

00:22:51.720 --> 00:22:56.640
client library or maybe just
something about the Analytics

00:22:56.640 --> 00:22:59.620
API is not really clear, and
you're just running into any

00:22:59.620 --> 00:23:01.960
sort of issues, I want to make
sure that folks know the right

00:23:01.960 --> 00:23:06.180
place to go for any sort of
questions that you have.

00:23:06.180 --> 00:23:09.250
And the best place to ask
questions is on Stack

00:23:09.250 --> 00:23:13.220
Overflow, which is generic.

00:23:13.220 --> 00:23:16.280
It's a good programming
website that folks are

00:23:16.280 --> 00:23:17.390
hopefully familiar with.

00:23:17.390 --> 00:23:23.320
And if you tag your thing with
YouTube API, YouTube-API, you

00:23:23.320 --> 00:23:25.750
should be able to post
a question that

00:23:25.750 --> 00:23:26.600
we'll see pretty easily.

00:23:26.600 --> 00:23:28.910
So even though this is for the
Analytics API, if you just use

00:23:28.910 --> 00:23:33.140
the standard YouTube-API tag,
that would help a lot in terms

00:23:33.140 --> 00:23:35.020
of us finding your question.

00:23:35.020 --> 00:23:39.530
And we'll answer pretty much
anything that you guys ask.

00:23:39.530 --> 00:23:42.210
But there are some things that
are not really questions, and

00:23:42.210 --> 00:23:45.010
they might be bug reports or
feature requests, and that

00:23:45.010 --> 00:23:48.930
sort of thing is best posted
on our standard

00:23:48.930 --> 00:23:50.355
YouTube issue tracker.

00:23:50.355 --> 00:23:53.450
So please make use
of that for the

00:23:53.450 --> 00:23:55.580
appropriate types of things.

00:23:55.580 --> 00:23:58.540
And we do have some resources
for folks who want to get

00:23:58.540 --> 00:24:00.600
started with the API.

00:24:00.600 --> 00:24:03.200
Lots of people like having
sample code.

00:24:03.200 --> 00:24:05.210
So if you go to our
documentation,

00:24:05.210 --> 00:24:09.930
developers.googl
e.com/youtube/analytics,

00:24:09.930 --> 00:24:11.520
you'll come to this main page.

00:24:11.520 --> 00:24:13.900
And over here, on the left hand
side, there's a sample

00:24:13.900 --> 00:24:15.440
application.

00:24:15.440 --> 00:24:19.270
I must admit that some of
the items in the sample

00:24:19.270 --> 00:24:22.170
application are not completely
up to date.

00:24:22.170 --> 00:24:24.750
So you'll take a look, and
you'll see step one

00:24:24.750 --> 00:24:26.510
through step five.

00:24:26.510 --> 00:24:30.040
There are few changes actually
specific not to the Analytics

00:24:30.040 --> 00:24:34.580
API but to some of the other
APIs that this uses, namely

00:24:34.580 --> 00:24:38.870
the Data API, that were recently
made, which we didn't

00:24:38.870 --> 00:24:40.560
have a chance to reflect
yet in the step

00:24:40.560 --> 00:24:42.380
by steps over here.

00:24:42.380 --> 00:24:45.855
But what we do have at the very
bottom of the page is a

00:24:45.855 --> 00:24:50.760
full sample application that's
kind of the full version if

00:24:50.760 --> 00:24:52.370
you were to go through all
the steps yourself.

00:24:52.370 --> 00:24:55.830
And this has been updated
to be something

00:24:55.830 --> 00:24:58.700
that's fully working.

00:24:58.700 --> 00:25:01.310
Feel free to take this code,
this JavaScript code.

00:25:01.310 --> 00:25:04.690
It gives a pretty cool sample
application that lets you do

00:25:04.690 --> 00:25:09.530
real time requesting of data for
specific videos over the

00:25:09.530 --> 00:25:12.990
past month and then uses the
Charts API for charting the

00:25:12.990 --> 00:25:15.900
view count information
for those videos.

00:25:15.900 --> 00:25:20.120
So it's something that we want
to make available just as a

00:25:20.120 --> 00:25:21.915
very basic starting place.

00:25:21.915 --> 00:25:23.680
There's going to be more sample
code that you should

00:25:23.680 --> 00:25:27.940
see over the next few
days slash weeks.

00:25:27.940 --> 00:25:31.790
It's definitely our goal to get
as many languages covered

00:25:31.790 --> 00:25:35.580
and make sure that people have
a good starting place,

00:25:35.580 --> 00:25:38.010
regardless of what language
you're coding in.

00:25:38.010 --> 00:25:40.260
So please check that out.

00:25:40.260 --> 00:25:43.000
And at this point, I think I
kind of wanted to switch

00:25:43.000 --> 00:25:46.070
things over to the Google
Moderator to see if anybody

00:25:46.070 --> 00:25:48.220
has any questions from there.

00:25:48.220 --> 00:25:50.035
So let's do a refresh.

00:25:53.690 --> 00:26:01.066
And OK, so there's one question
over here which I do

00:26:01.066 --> 00:26:04.870
not think is specific to the
Analytics API, per se.

00:26:04.870 --> 00:26:07.660
But it's kind of a meta-question
about the best

00:26:07.660 --> 00:26:12.370
way of going about interacting
with us during these live

00:26:12.370 --> 00:26:14.230
broadcasts, let's say.

00:26:14.230 --> 00:26:17.410
So it's, "I want to know if
people are broadcasting live

00:26:17.410 --> 00:26:18.977
via Hangouts can see the
comments that are posted in

00:26:18.977 --> 00:26:20.976
the live message feed.

00:26:20.976 --> 00:26:22.880
It would be nice to interact
with the viewers that aren't

00:26:22.880 --> 00:26:26.060
included in the Hangout
itself."

00:26:26.060 --> 00:26:28.660
So we're actually a little bit
different than a lot of the

00:26:28.660 --> 00:26:31.130
other Google Developer live
shows, in that we tend not to

00:26:31.130 --> 00:26:33.580
have public Hangouts.

00:26:33.580 --> 00:26:39.190
Christoph and Ted are joining us
via Hangout right now, but

00:26:39.190 --> 00:26:42.000
it's not just random
audience members.

00:26:42.000 --> 00:26:44.460
So we do ask people to interact
with us via this

00:26:44.460 --> 00:26:47.450
Google Moderator that's embedded
at the bottom of

00:26:47.450 --> 00:26:48.940
every show listing.

00:26:48.940 --> 00:26:50.700
So you found it.

00:26:50.700 --> 00:26:52.670
That was from Ollie.

00:26:52.670 --> 00:26:53.480
You obviously found it.

00:26:53.480 --> 00:26:56.470
That's the way to get our
attention during a show.

00:26:56.470 --> 00:26:59.370
I know that there is a live
comments feed that you can

00:26:59.370 --> 00:27:03.120
post on YouTube.com if you're
watching the video there.

00:27:03.120 --> 00:27:06.410
That tends to be watched by our
fearless producer who's

00:27:06.410 --> 00:27:07.270
running the whole show.

00:27:07.270 --> 00:27:09.920
And if the audio isn't working
or something along those

00:27:09.920 --> 00:27:12.370
lines, that's a good thing to
post in the comments feed of

00:27:12.370 --> 00:27:13.110
the YouTube video.

00:27:13.110 --> 00:27:15.610
But in general, the people who
are on the air don't get to

00:27:15.610 --> 00:27:18.540
see anything that's
raised there.

00:27:18.540 --> 00:27:21.000
So use the Google Moderator.

00:27:21.000 --> 00:27:22.720
TED HAMILTON: That's where you
can call us idiots and stuff,

00:27:22.720 --> 00:27:24.120
and then we don't get
distracted by

00:27:24.120 --> 00:27:25.020
that during the show.

00:27:25.020 --> 00:27:26.270
JEFFREY POSNICK: Exactly.

00:27:26.270 --> 00:27:29.990
So fortunately, none of the two
questions that are there

00:27:29.990 --> 00:27:32.440
actually call us idiots in
this particular case.

00:27:32.440 --> 00:27:36.930
But we have a pretty--

00:27:36.930 --> 00:27:40.570
I'm trying to interpret
this question here.

00:27:40.570 --> 00:27:45.450
It's kind of about publishing
YouTube videos to a website.

00:27:45.450 --> 00:27:50.400
And it's asking whether you
can use Analytics data to

00:27:50.400 --> 00:27:51.510
analyze things.

00:27:51.510 --> 00:27:55.980
I'm not entirely sure what the
question refers to other than

00:27:55.980 --> 00:27:58.340
just the basic fact that, yes,
you can use the YouTube

00:27:58.340 --> 00:28:02.590
Analytics API to, for any video,
regardless of where

00:28:02.590 --> 00:28:05.070
it's played back, get
information about who's

00:28:05.070 --> 00:28:05.670
watching your video.

00:28:05.670 --> 00:28:09.040
So take a look at the
documentation, use the API

00:28:09.040 --> 00:28:12.950
Explorer, and I think that will
give you, hopefully, what

00:28:12.950 --> 00:28:14.330
you need to get started.

00:28:14.330 --> 00:28:16.070
TED HAMILTON: I think he might
be asking if you can upload

00:28:16.070 --> 00:28:17.270
through the API.

00:28:17.270 --> 00:28:18.420
JEFFREY POSNICK: OK.

00:28:18.420 --> 00:28:20.610
Yeah, if you're asking about
uploading, that definitely is

00:28:20.610 --> 00:28:23.130
part of the Data API.

00:28:23.130 --> 00:28:26.070
So that's not necessarily part
of the Analytics API, which

00:28:26.070 --> 00:28:29.140
we're talking about today, but
it's part of either the older

00:28:29.140 --> 00:28:32.980
Google Data version of the API
or the newer version of the

00:28:32.980 --> 00:28:36.830
API which we are calling Version
3, and we recently

00:28:36.830 --> 00:28:38.240
also launched.

00:28:38.240 --> 00:28:41.260
You can definitely automate the
uploading of videos into

00:28:41.260 --> 00:28:42.050
your own channel.

00:28:42.050 --> 00:28:43.090
So yep.

00:28:43.090 --> 00:28:44.600
TED HAMILTON: And once you do,
you can definitely get the

00:28:44.600 --> 00:28:45.360
data for it.

00:28:45.360 --> 00:28:46.240
JEFFREY POSNICK: Absolutely.

00:28:46.240 --> 00:28:49.960
So we want everything
to be as automated

00:28:49.960 --> 00:28:52.300
as possible, ideally.

00:28:52.300 --> 00:28:55.610
So a couple of other questions
came in recently.

00:28:55.610 --> 00:28:58.410
Can you package OAuth for two
different YouTube APIs in a

00:28:58.410 --> 00:29:00.660
single prompt, and the
answer is yes.

00:29:00.660 --> 00:29:04.160
So I assume, specifically, the
question has to do with

00:29:04.160 --> 00:29:07.880
whether you could ask for both
Analytics permission and

00:29:07.880 --> 00:29:11.410
YouTube Data API permission
within a single OAuth 2.0

00:29:11.410 --> 00:29:12.220
approval flow.

00:29:12.220 --> 00:29:14.890
And that's a really nice
thing about OAuth 2.0.

00:29:14.890 --> 00:29:17.240
You can specify as
many, it's called

00:29:17.240 --> 00:29:19.600
scopes, OAuth 2.0 scopes.

00:29:19.600 --> 00:29:21.360
So you can specify as
many scopes as you

00:29:21.360 --> 00:29:23.360
want in a single request.

00:29:23.360 --> 00:29:26.440
And you don't have to have the
user see a pop up multiple

00:29:26.440 --> 00:29:28.370
times where they say, OK,
yes, I do want to

00:29:28.370 --> 00:29:29.465
give Data API access.

00:29:29.465 --> 00:29:31.720
Yes, I want to give Analytics
API access,

00:29:31.720 --> 00:29:33.220
that sort of thing.

00:29:33.220 --> 00:29:36.580
And that actually applies to
any of the Google APIs.

00:29:36.580 --> 00:29:40.290
So let's say, I don't know, in
addition to doing YouTube

00:29:40.290 --> 00:29:42.390
Analytics, you're also doing
Google Analytics and using the

00:29:42.390 --> 00:29:44.190
separate Google Analytics API.

00:29:44.190 --> 00:29:47.510
You could put the Google
Analytics API scope in the

00:29:47.510 --> 00:29:52.960
same OAuth 2.0 request flow and
do all of that at once.

00:29:52.960 --> 00:29:55.370
And there was a question about
where you could download the

00:29:55.370 --> 00:29:57.230
example code.

00:29:57.230 --> 00:30:01.400
So right now, the sample that
we had on the site is just

00:30:01.400 --> 00:30:03.560
linked to from the
main YouTube--

00:30:03.560 --> 00:30:07.710
sorry, developers.googl
e.com/youtube/analytics, and

00:30:07.710 --> 00:30:11.690
going there, and then going to
the left hand side to Sample

00:30:11.690 --> 00:30:13.540
Application.

00:30:13.540 --> 00:30:17.440
What we've been doing for the
Data API and we've been

00:30:17.440 --> 00:30:20.780
actually kind of successful,
I think, in getting that

00:30:20.780 --> 00:30:23.320
started, and I can pull that up
and show what we're doing

00:30:23.320 --> 00:30:27.200
there, is trying to do inline
code samples when you look at

00:30:27.200 --> 00:30:29.060
the different API methods.

00:30:29.060 --> 00:30:32.640
So I believe this is
one that has it.

00:30:32.640 --> 00:30:33.500
Yes.

00:30:33.500 --> 00:30:35.100
So this is for the Data API.

00:30:35.100 --> 00:30:40.940
And you can see that we have
inline PHP and Python samples

00:30:40.940 --> 00:30:43.920
right within the page
that documents

00:30:43.920 --> 00:30:46.400
the search.list method.

00:30:46.400 --> 00:30:50.510
So we're going to first of all
work on expanding our Data API

00:30:50.510 --> 00:30:51.330
code samples.

00:30:51.330 --> 00:30:52.950
But I think we're going to
also start doing the same

00:30:52.950 --> 00:30:55.150
thing for the Analytics API.

00:30:55.150 --> 00:31:00.120
And when you go to the page,
that's referenced.

00:31:00.120 --> 00:31:01.880
This is a little bit different
because there's really only

00:31:01.880 --> 00:31:04.532
one reference page for
the Analytics API.

00:31:04.532 --> 00:31:07.960
But ideally, we'll have some
code samples right here on

00:31:07.960 --> 00:31:10.030
this page in all the different
languages that you need.

00:31:10.030 --> 00:31:13.360
And that's something that we're
hard at work on and

00:31:13.360 --> 00:31:14.790
hopefully will make available
pretty soon.

00:31:17.290 --> 00:31:18.160
OK.

00:31:18.160 --> 00:31:19.870
So we are actually
out of time.

00:31:19.870 --> 00:31:22.150
This was a really
fun, full show.

00:31:22.150 --> 00:31:25.810
And I just want to thank both
Ted and Christophe.

00:31:25.810 --> 00:31:27.830
It's fairly late in Zurich.

00:31:27.830 --> 00:31:31.150
And thanks so much for sticking
around and dialing in

00:31:31.150 --> 00:31:32.560
and talking about the API.

00:31:32.560 --> 00:31:35.110
And hopefully, we'll get some
folks going out there and

00:31:35.110 --> 00:31:37.510
writing some code now that makes
use of this cool stuff.

00:31:37.510 --> 00:31:37.850
TED HAMILTON: Absolutely.

00:31:37.850 --> 00:31:39.380
Thanks for having us on, and
I can't wait to see what

00:31:39.380 --> 00:31:41.375
everyone does with the data.

00:31:41.375 --> 00:31:43.895
I think this will unlock some
great new possibilities.

00:31:43.895 --> 00:31:46.770
So have at it.

00:31:46.770 --> 00:31:47.560
JEFFREY POSNICK: Very cool.

00:31:47.560 --> 00:31:51.370
OK, until next week,
bye, everybody.

00:31:51.370 --> 00:31:51.970
CHRISTOPH SCHWAB-GANSER:
See you.

00:31:51.970 --> 00:31:53.220
TED HAMILTON: Bye.

