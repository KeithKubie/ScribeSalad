WEBVTT
Kind: captions
Language: en

00:00:02.420 --> 00:00:06.300
So you finish writing your app
and it's ready to go, right?

00:00:06.300 --> 00:00:07.419
It might not be.

00:00:07.419 --> 00:00:08.960
Have you heard of
performance theory,

00:00:08.960 --> 00:00:11.780
and how to check that
your app is at its best?

00:00:11.780 --> 00:00:13.330
My name is Joanna Smith.

00:00:13.330 --> 00:00:16.100
And I'm here to introduce
you to the performance tuning

00:00:16.100 --> 00:00:18.440
lifecycle, so that
you will know when,

00:00:18.440 --> 00:00:20.920
and how, to optimize your app.

00:00:20.920 --> 00:00:23.120
The truth is that
most developers

00:00:23.120 --> 00:00:25.830
don't think about performance
until it has already

00:00:25.830 --> 00:00:27.510
become a problem.

00:00:27.510 --> 00:00:29.510
Which, of course, usually
happens when you're up

00:00:29.510 --> 00:00:32.390
against a deadline,
the coffee is gone,

00:00:32.390 --> 00:00:37.320
and there's a weird man smell
lingering in the office.

00:00:37.320 --> 00:00:40.850
But in times like
these, keep calm.

00:00:40.850 --> 00:00:42.430
Don't panic.

00:00:42.430 --> 00:00:44.350
Because fixing
performance problems

00:00:44.350 --> 00:00:47.620
is straightforward with the
performance tuning lifecycle.

00:00:47.620 --> 00:00:49.350
There's only three steps.

00:00:49.350 --> 00:00:53.270
Gather, insight, and action.

00:00:53.270 --> 00:00:55.640
Even if you've found
your performance problem,

00:00:55.640 --> 00:00:59.140
it may not be immediately
clear what is triggering it.

00:00:59.140 --> 00:01:03.004
And that brings us to phase
1, gathering information.

00:01:03.004 --> 00:01:04.420
The easiest way
for you to do that

00:01:04.420 --> 00:01:08.210
is to use a tool that
gathers the data for you.

00:01:08.210 --> 00:01:10.860
Now most tools are built
for a specific purpose.

00:01:10.860 --> 00:01:14.000
Some are specialized for memory
information or GPU performance

00:01:14.000 --> 00:01:15.060
or battery usage.

00:01:15.060 --> 00:01:17.200
All this means is that
you'll most likely

00:01:17.200 --> 00:01:20.000
need to run several different
tools in order to figure out

00:01:20.000 --> 00:01:22.120
what's really going on.

00:01:22.120 --> 00:01:24.600
The key to success here
is knowing which tool

00:01:24.600 --> 00:01:26.280
to use to understand what data.

00:01:26.280 --> 00:01:27.970
So you know where in
your app to look so

00:01:27.970 --> 00:01:30.686
that you can fix your problem.

00:01:30.686 --> 00:01:33.000
But once you have
all of that data,

00:01:33.000 --> 00:01:34.882
do you know how to read it?

00:01:34.882 --> 00:01:36.590
Most of the time you're
going to be stuck

00:01:36.590 --> 00:01:38.540
with a bunch of
numbers or lines,

00:01:38.540 --> 00:01:40.860
or just junk that
looks like Greek.

00:01:40.860 --> 00:01:44.280
So now comes phase
2, gaining insight.

00:01:44.280 --> 00:01:46.250
When it comes down
to it, you're trying

00:01:46.250 --> 00:01:51.200
to identify your problem out
of a whole bunch of nonsense.

00:01:51.200 --> 00:01:53.950
So you might rely on these tools
to help you format the data

00:01:53.950 --> 00:01:55.250
and make it readable.

00:01:55.250 --> 00:01:58.230
But even then, you need to
understand what it means.

00:01:58.230 --> 00:02:01.200
And how it applies to your app.

00:02:01.200 --> 00:02:05.510
For example, Heap Viewer may
look really intimidating.

00:02:05.510 --> 00:02:08.009
But knowing how to read it
will help you realize that all

00:02:08.009 --> 00:02:09.650
you're seeing here
are bitmap objects

00:02:09.650 --> 00:02:12.160
lingering on the heap
across activity transitions.

00:02:12.160 --> 00:02:14.820
And now you've got
something you can work on.

00:02:14.820 --> 00:02:17.980
Now unfortunately, steps
1 and 2 aren't linear.

00:02:17.980 --> 00:02:19.910
They're circular.

00:02:19.910 --> 00:02:22.900
This means that sometimes you'll
open a tool, grab some data,

00:02:22.900 --> 00:02:26.950
interpret it, and that'll
just lead you to another tool.

00:02:26.950 --> 00:02:28.940
Consider Traceview,
which may show you

00:02:28.940 --> 00:02:32.060
a horde of garbage
collection events occurring

00:02:32.060 --> 00:02:33.224
during your scroll event.

00:02:33.224 --> 00:02:34.640
The insight here
is that something

00:02:34.640 --> 00:02:36.936
is going crazy with memory.

00:02:36.936 --> 00:02:39.560
Which means that you can switch
over to the Allocation Tracker,

00:02:39.560 --> 00:02:42.830
and see what's
causing all the fuss.

00:02:42.830 --> 00:02:46.940
So by the time you reach phase
3, you might be kind of tired.

00:02:46.940 --> 00:02:47.800
But take a breath.

00:02:50.620 --> 00:02:53.790
Because this step is
often the hardest.

00:02:53.790 --> 00:02:55.720
Taking action.

00:02:55.720 --> 00:02:57.690
This is where you
will move past all

00:02:57.690 --> 00:03:02.480
of those numbers and insights
to actually go fix your problem.

00:03:02.480 --> 00:03:05.220
But be careful.

00:03:05.220 --> 00:03:07.930
Performance fixes
aren't just about code.

00:03:07.930 --> 00:03:11.210
Of the three stages,
this the most human.

00:03:11.210 --> 00:03:13.970
Because solving the
problem isn't enough.

00:03:13.970 --> 00:03:15.690
You need to solve
it in a way that

00:03:15.690 --> 00:03:18.650
meets your coding standards
and your design constraints,

00:03:18.650 --> 00:03:20.970
and can be done
under a deadline.

00:03:20.970 --> 00:03:24.580
So make sure that you have
a plan before you run off

00:03:24.580 --> 00:03:26.250
and fix things.

00:03:26.250 --> 00:03:28.065
But now you're done.

00:03:28.065 --> 00:03:29.800
Congrats!

00:03:29.800 --> 00:03:30.880
JK, you guys.

00:03:30.880 --> 00:03:32.770
Because as long as
your application

00:03:32.770 --> 00:03:36.170
is even a bit wonky, you'll be
going through this lifecycle

00:03:36.170 --> 00:03:40.410
over and over and over again
on various parts of your code

00:03:40.410 --> 00:03:41.240
base.

00:03:41.240 --> 00:03:44.180
To get your app
truly running smooth,

00:03:44.180 --> 00:03:48.542
every single piece needs to
be optimized for performance.

00:03:48.542 --> 00:03:51.000
And that's why you should check
out the rest of the Android

00:03:51.000 --> 00:03:52.780
Performance Patterns
resources to help

00:03:52.780 --> 00:03:55.290
you know what tools to
use, what they mean,

00:03:55.290 --> 00:03:57.710
and how to solve your problems.

00:03:57.710 --> 00:04:00.050
And don't forget to join the
Google+ community, as well.

00:04:00.050 --> 00:04:02.508
Because you can get insight
from other folks who've already

00:04:02.508 --> 00:04:04.560
had these problems.

00:04:04.560 --> 00:04:07.070
So keep calm.

00:04:07.070 --> 00:04:08.200
Profile your code.

00:04:08.200 --> 00:04:11.740
And always remember,
perf matters.

