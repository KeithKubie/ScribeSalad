WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.590
Hello there.

00:00:01.590 --> 00:00:05.025
My name is Subir, and I lead the
cloud messaging team at Google.

00:00:05.025 --> 00:00:08.109
Today, I'm going to talk
about some of the awesome APIs

00:00:08.109 --> 00:00:11.370
that Google Cloud
Messaging or GCM provides.

00:00:11.370 --> 00:00:14.000
GCM provides a root set
of APIs to send messages

00:00:14.000 --> 00:00:17.692
from a server to an application
efficiently and reliably.

00:00:17.692 --> 00:00:19.900
I want to thank all the
developers using Google Cloud

00:00:19.900 --> 00:00:21.495
Messaging, because
it really helps

00:00:21.495 --> 00:00:24.850
the ecosystem by minimizing
the impact your application has

00:00:24.850 --> 00:00:28.660
on battery life, radio wake
ups, and network signaling.

00:00:28.660 --> 00:00:32.240
Let's quickly look at some of
the APIs required to use GCM.

00:00:32.240 --> 00:00:35.570
To use GCM, an application
needs a Registration ID.

00:00:35.570 --> 00:00:37.490
Use this Registration
ID to send messages

00:00:37.490 --> 00:00:39.130
to a particular device.

00:00:39.130 --> 00:00:42.350
Multicast lets you send messages
to up to 1,000 recipients

00:00:42.350 --> 00:00:44.160
with a single request.

00:00:44.160 --> 00:00:46.420
And you can set Time
To Live on each request

00:00:46.420 --> 00:00:49.960
to tell GCM went to
expire the message.

00:00:49.960 --> 00:00:52.090
So what's new in 2014?

00:00:52.090 --> 00:00:53.590
Today, I'll cover
three key features

00:00:53.590 --> 00:00:57.040
that GCM provides--
XMPP-based Cloud Connection

00:00:57.040 --> 00:01:01.200
Server, Upstream Messaging,
and User Notifications.

00:01:01.200 --> 00:01:05.050
In 2013, we opened these APIs
to a limited set of developers.

00:01:05.050 --> 00:01:08.320
Since then, we've added a bunch
of new features with these APIs

00:01:08.320 --> 00:01:11.000
and made them faster
and more robust.

00:01:11.000 --> 00:01:13.920
We saw a tremendous response
and interest from developers

00:01:13.920 --> 00:01:15.190
around these APIs.

00:01:15.190 --> 00:01:16.950
And I'm really
excited to announce

00:01:16.950 --> 00:01:20.470
that these services are now
open for all developers.

00:01:20.470 --> 00:01:22.530
Let's talk about
GCM's XMPP point,

00:01:22.530 --> 00:01:25.380
also known as Cloud
Connection Server.

00:01:25.380 --> 00:01:27.810
Cloud Connection
Server, or CCS, provides

00:01:27.810 --> 00:01:31.310
a persistent, asynchronous,
bidirectional connection

00:01:31.310 --> 00:01:33.760
to our GCM servers.

00:01:33.760 --> 00:01:36.210
This is a very powerful
service as it provides

00:01:36.210 --> 00:01:39.310
a virtual connection between
your server and your user's UCM

00:01:39.310 --> 00:01:40.900
connected devices.

00:01:40.900 --> 00:01:43.750
This connection can be used
to reliably send and receive

00:01:43.750 --> 00:01:45.170
messages.

00:01:45.170 --> 00:01:47.760
Here's how you can
connect to CCS.

00:01:47.760 --> 00:01:50.410
I'm using the simple
XMPP library in Python

00:01:50.410 --> 00:01:52.300
to connect to CCS.

00:01:52.300 --> 00:01:56.820
As you can see,
gcm.goobleapis.com is the URL

00:01:56.820 --> 00:01:59.100
and 5235 is the port.

00:01:59.100 --> 00:02:01.210
You simply need to
connect to this end point

00:02:01.210 --> 00:02:04.880
and authenticate using
your project's API key.

00:02:04.880 --> 00:02:07.210
The next step is to
start sending messages.

00:02:07.210 --> 00:02:09.160
These messages
include a JSON payload

00:02:09.160 --> 00:02:12.190
that contains a target,
application data, and a Message

00:02:12.190 --> 00:02:13.350
ID.

00:02:13.350 --> 00:02:16.240
Since sending via
XMPP is asynchronous,

00:02:16.240 --> 00:02:19.500
this ID uniquely identifies
an XMPP connection.

00:02:19.500 --> 00:02:22.410
So when CCS sends an
ACK back to your server,

00:02:22.410 --> 00:02:25.890
it will use this Message
ID to identify the message.

00:02:25.890 --> 00:02:28.550
Therefore it is important
that this Message ID is not

00:02:28.550 --> 00:02:32.250
only unique, but also
present in the request.

00:02:32.250 --> 00:02:34.860
Let's take a look at what an
ACK or a NACK for this message

00:02:34.860 --> 00:02:36.190
looks like.

00:02:36.190 --> 00:02:39.320
Message Type would
indicate an ACK a NACK.

00:02:39.320 --> 00:02:41.680
In case of a NACK,
there's an error code

00:02:41.680 --> 00:02:44.010
to describe what went wrong.

00:02:44.010 --> 00:02:46.410
So when implementing
a CCS connection,

00:02:46.410 --> 00:02:48.080
here is what you need to know.

00:02:48.080 --> 00:02:51.690
We allow a maximum of 100
connections per sender,

00:02:51.690 --> 00:02:53.930
and the maximum outstanding
messages per connection

00:02:53.930 --> 00:02:55.200
is also 100.

00:02:55.200 --> 00:02:57.072
Our improved error
handling lets you

00:02:57.072 --> 00:02:59.920
know more precisely
what went wrong.

00:02:59.920 --> 00:03:02.460
Here is an example of a
control message describing

00:03:02.460 --> 00:03:04.760
that a connection is draining.

00:03:04.760 --> 00:03:07.770
What this message means is
that the sender should not

00:03:07.770 --> 00:03:10.710
send any more messages
on this connection.

00:03:10.710 --> 00:03:12.220
Any new messages
on this connection

00:03:12.220 --> 00:03:14.300
will get back a NACK
with an error code

00:03:14.300 --> 00:03:17.199
indicating that the
connection is draining.

00:03:17.199 --> 00:03:19.490
We have also added new codes
for other types of errors,

00:03:19.490 --> 00:03:22.220
like JSON parsing, et cetera.

00:03:22.220 --> 00:03:25.500
So what we learned so far
is that with XMPP end point,

00:03:25.500 --> 00:03:28.900
GCM provides the ability to
have a persistent, bidirectional

00:03:28.900 --> 00:03:30.770
connection to your servers.

00:03:30.770 --> 00:03:33.230
We also saw how to
send messages down

00:03:33.230 --> 00:03:35.610
to a device using
this connection.

00:03:35.610 --> 00:03:38.330
Next, we will take a look at
an awesome Upstream Messaging

00:03:38.330 --> 00:03:41.650
API that lets you send
messages from the application

00:03:41.650 --> 00:03:44.060
on a device to your server.

00:03:44.060 --> 00:03:45.610
We have made a lot
of changes to make

00:03:45.610 --> 00:03:47.550
Upstream Messaging
fast and reliable.

00:03:47.550 --> 00:03:51.110
And I'm happy to say that it's
now open to all developers.

00:03:51.110 --> 00:03:52.880
So let's take a look.

00:03:52.880 --> 00:03:56.320
Since the connection between the
device and GCM already exists,

00:03:56.320 --> 00:03:59.740
its a low latency send, as
no new handshake is needed.

00:03:59.740 --> 00:04:02.480
These messages are saved locally
if the device is offline,

00:04:02.480 --> 00:04:04.910
and are sent when we
have a connection.

00:04:04.910 --> 00:04:07.460
We use the same Reliable
Message Queue technology

00:04:07.460 --> 00:04:09.260
that we use for
Downstream Messages.

00:04:09.260 --> 00:04:11.290
So if we lose a
connection to your server,

00:04:11.290 --> 00:04:13.460
we will deliver the
messages once the connection

00:04:13.460 --> 00:04:15.230
is re-established.

00:04:15.230 --> 00:04:17.029
We will delete your
messages once we

00:04:17.029 --> 00:04:19.600
get an ACK from your server.

00:04:19.600 --> 00:04:21.310
A order to receive
an Upstream Message,

00:04:21.310 --> 00:04:24.500
your server should
be connected to CCS.

00:04:24.500 --> 00:04:27.970
Here's an example on how to send
the message using Google Cloud

00:04:27.970 --> 00:04:29.670
Messaging APIs.

00:04:29.670 --> 00:04:32.870
Just set the Project
ID as the destination,

00:04:32.870 --> 00:04:36.080
and we will deliver the
message to your server.

00:04:36.080 --> 00:04:39.970
You can send and also set
Time To Live in the API call.

00:04:39.970 --> 00:04:41.870
This is what an ACK looks like.

00:04:41.870 --> 00:04:44.840
Once again, since the
response is asynchronous,

00:04:44.840 --> 00:04:47.881
Message ID is used to
identify the message.

00:04:47.881 --> 00:04:49.380
Here are some things
to keep in mind

00:04:49.380 --> 00:04:51.420
when using Upstream Messaging.

00:04:51.420 --> 00:04:54.750
No pending messages on a
connection more than 100.

00:04:54.750 --> 00:04:57.070
We will delete your messages
if your server fails

00:04:57.070 --> 00:04:59.340
to connect for
more than 24 hours.

00:04:59.340 --> 00:05:03.040
We will also allow a maximum
of 20 unACKed Upstream Messages

00:05:03.040 --> 00:05:04.390
from a single device.

00:05:04.390 --> 00:05:06.310
So ACKing is required.

00:05:06.310 --> 00:05:07.890
And similar to
Downstream Messages,

00:05:07.890 --> 00:05:13.180
the maximum payload size
allowed for upstream is 4K.

00:05:13.180 --> 00:05:16.160
Here's a lot of my favorite
new APIs in GCM-- Delivery

00:05:16.160 --> 00:05:17.390
Receipts.

00:05:17.390 --> 00:05:19.480
When sending
messages to a device,

00:05:19.480 --> 00:05:21.310
a common request
from developers is

00:05:21.310 --> 00:05:23.870
to get more insight into
the state of the message

00:05:23.870 --> 00:05:26.240
and to know if the
message was delivered.

00:05:26.240 --> 00:05:28.340
For example, you are
writing a messaging app

00:05:28.340 --> 00:05:29.889
and would like to
show your sender

00:05:29.889 --> 00:05:31.180
if their message was delivered.

00:05:31.180 --> 00:05:34.100
With CCS, you can do that now.

00:05:34.100 --> 00:05:38.084
We are adding this new feature
called Delivery Receipts.

00:05:38.084 --> 00:05:39.750
Here's an example on
how you can request

00:05:39.750 --> 00:05:41.420
a receipt for a message.

00:05:41.420 --> 00:05:43.000
In the JSON payload
of the message,

00:05:43.000 --> 00:05:45.630
you just set the new
field Delivery Receipt

00:05:45.630 --> 00:05:47.110
Requested to True.

00:05:47.110 --> 00:05:50.710
By default, the value is False.

00:05:50.710 --> 00:05:51.950
Here is a Receipt Message.

00:05:51.950 --> 00:05:54.470
This message will
have a new Message ID.

00:05:54.470 --> 00:05:57.800
From will be set to
gcm.google.apis.com,

00:05:57.800 --> 00:05:59.820
and type as Receipt.

00:05:59.820 --> 00:06:02.510
There are four fields that
we add in the response data--

00:06:02.510 --> 00:06:05.870
message status, original
Message ID, time of send,

00:06:05.870 --> 00:06:10.530
and the Registration ID
of the original message.

00:06:10.530 --> 00:06:12.550
Nowadays, users have
multiple devices

00:06:12.550 --> 00:06:15.890
and hence receive
notifications multiple times.

00:06:15.890 --> 00:06:18.240
This can reduce notifications
from a useful feature

00:06:18.240 --> 00:06:19.830
to an annoyance.

00:06:19.830 --> 00:06:22.460
Thankfully, GCM provides
a convenient way

00:06:22.460 --> 00:06:26.200
called User Notifications to
reach all devices for a user

00:06:26.200 --> 00:06:28.390
and help you synchronize
notifications, including

00:06:28.390 --> 00:06:29.380
dismissals.

00:06:29.380 --> 00:06:33.090
I'll talk more about
dismissals in a bit.

00:06:33.090 --> 00:06:35.720
With User Notifications you
can target it all devices

00:06:35.720 --> 00:06:38.330
belonging to a user
with a single request.

00:06:38.330 --> 00:06:40.790
This is a very
powerful API and allows

00:06:40.790 --> 00:06:43.510
you to be smarter about
your notifications.

00:06:43.510 --> 00:06:45.720
I'll give you a
couple of examples.

00:06:45.720 --> 00:06:48.490
You can set a short TTL so
the notification will only

00:06:48.490 --> 00:06:51.520
be sent to a device that
is currently connected.

00:06:51.520 --> 00:06:54.900
Another example is to use
option of Delay While Idle.

00:06:54.900 --> 00:06:57.170
Imagine your user
has a phone that they

00:06:57.170 --> 00:07:00.430
use all day and a tablet
that sits idle at home.

00:07:00.430 --> 00:07:02.750
By setting the Delay
While Idle and a TTL,

00:07:02.750 --> 00:07:04.510
you can send the
notification only

00:07:04.510 --> 00:07:06.580
to the phone that
is actively used.

00:07:06.580 --> 00:07:08.360
Pretty useful, right?

00:07:08.360 --> 00:07:11.210
To send messages to
all devices for a user,

00:07:11.210 --> 00:07:12.970
you need a Notification Key.

00:07:12.970 --> 00:07:14.970
The Application
Server can get a key

00:07:14.970 --> 00:07:16.435
by adding or
removing registration

00:07:16.435 --> 00:07:18.790
to the Notification Key name.

00:07:18.790 --> 00:07:21.660
Let's see how you can
get a Notification Key.

00:07:21.660 --> 00:07:24.960
Here is the endpoint to get
a key and the HTTP header.

00:07:24.960 --> 00:07:29.249
The request is authenticated
using your project's API key.

00:07:29.249 --> 00:07:31.540
So first thing, we add a
registration to a Notification

00:07:31.540 --> 00:07:33.460
Key, you can do a Create.

00:07:33.460 --> 00:07:35.900
And then if the user stores
the app on another device,

00:07:35.900 --> 00:07:37.480
you can use an Add.

00:07:37.480 --> 00:07:40.600
And important field is
the Notification Key Name.

00:07:40.600 --> 00:07:42.590
For us, it's just
a unique identifier

00:07:42.590 --> 00:07:44.960
that you use to
identify this user.

00:07:44.960 --> 00:07:47.150
The actual username
is not relevant.

00:07:47.150 --> 00:07:48.670
So please use a hash.

00:07:48.670 --> 00:07:52.119
It needs to be
unique for an user.

00:07:52.119 --> 00:07:53.660
Here's an example
of how you can send

00:07:53.660 --> 00:07:55.830
a message to all
devices for a user.

00:07:55.830 --> 00:07:58.750
The only difference is that
instead of sending a message

00:07:58.750 --> 00:08:03.000
to a Registration ID, we now
send it to a Notification Key.

00:08:03.000 --> 00:08:05.226
Now let's assume a
user on one device acts

00:08:05.226 --> 00:08:07.810
on the notification, and
we want to dismiss this

00:08:07.810 --> 00:08:09.330
from all other devices.

00:08:09.330 --> 00:08:10.670
How do we do it?

00:08:10.670 --> 00:08:13.220
With Upstream Messaging,
we can send a message

00:08:13.220 --> 00:08:16.570
to a Notification Key and
GCM will deliver the message

00:08:16.570 --> 00:08:19.390
to all of other
registrations in this key.

00:08:19.390 --> 00:08:21.960
This way, you can
tell other devices

00:08:21.960 --> 00:08:24.120
to dismiss a notification
as it is already

00:08:24.120 --> 00:08:26.449
handled on one device.

00:08:26.449 --> 00:08:28.240
In addition, you can
also send this message

00:08:28.240 --> 00:08:30.230
to your Application
Server by sending

00:08:30.230 --> 00:08:34.659
Get to a Project ID in a
separate Upstream Message.

00:08:34.659 --> 00:08:35.470
Here is an example.

00:08:35.470 --> 00:08:37.720
As you can see, the two
fields in the Upstream Message

00:08:37.720 --> 00:08:40.000
is set to a Notification Key.

00:08:40.000 --> 00:08:41.620
This will make GCM
send this message

00:08:41.620 --> 00:08:44.800
to all other devices that
are part of this key.

00:08:44.800 --> 00:08:49.160
User Notifications is available
on both HTTP and XMPP.

00:08:49.160 --> 00:08:51.200
It allows a max of
20 registrations

00:08:51.200 --> 00:08:52.470
per Notification Key.

00:08:52.470 --> 00:08:54.500
And of course, the key
name in the request

00:08:54.500 --> 00:08:56.990
should be unique to a user.

00:08:56.990 --> 00:08:59.750
Before we end, I'd like you to
please check out our updated

00:08:59.750 --> 00:09:02.940
documentation for all
GCM APIs and services.

00:09:02.940 --> 00:09:06.382
As always, it's available
at this link here.

00:09:06.382 --> 00:09:07.340
Thank you for watching.

00:09:07.340 --> 00:09:09.760
And I hope you are excited
to use these new APIs

00:09:09.760 --> 00:09:12.840
and services, and
enjoyed this video.

