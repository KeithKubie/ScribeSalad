WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:01.390
FERGUS HURLEY: Hi.

00:00:01.390 --> 00:00:03.730
I'm Fergus Hurley, a
product manager at Google.

00:00:03.730 --> 00:00:05.440
Thorough testing is
an essential part

00:00:05.440 --> 00:00:07.330
of building a
high-quality app or game.

00:00:07.330 --> 00:00:10.750
But the process can be time
consuming and frustrating.

00:00:10.750 --> 00:00:12.310
That's why we've
added new features

00:00:12.310 --> 00:00:16.480
to our pre-launch report to
make basic app testing a breeze.

00:00:16.480 --> 00:00:18.130
So what is the
pre-launch report?

00:00:18.130 --> 00:00:20.620
It's a helpful dashboard
within the Google Play Console

00:00:20.620 --> 00:00:23.470
that alerts you of any
quality concerns in your app

00:00:23.470 --> 00:00:25.680
before it affects your users.

00:00:25.680 --> 00:00:28.710
Whenever you upload an app
to the closed or open testing

00:00:28.710 --> 00:00:30.270
tracks in the
Google Play Console,

00:00:30.270 --> 00:00:33.570
you'll automatically
generate this free report.

00:00:33.570 --> 00:00:36.950
The report is created from an
automated crawl of your app,

00:00:36.950 --> 00:00:39.096
using the tools and
infrastructure of Firebase Test

00:00:39.096 --> 00:00:39.716
Lab.

00:00:39.716 --> 00:00:43.340
The crawler, which we call
Robo, explores your app

00:00:43.340 --> 00:00:46.590
by inputting taps,
swipes, and text.

00:00:46.590 --> 00:00:49.770
Tests are run on a wide
range of devices of varying

00:00:49.770 --> 00:00:51.690
specs and price points.

00:00:51.690 --> 00:00:54.190
Once your app has been
crawled, within an hour,

00:00:54.190 --> 00:00:56.460
the pre-launch report
flags any crashes,

00:00:56.460 --> 00:00:58.830
security vulnerabilities,
startup time issues,

00:00:58.830 --> 00:01:01.570
or other problems.

00:01:01.570 --> 00:01:04.390
On the Overview page, you'll
find clear recommendations

00:01:04.390 --> 00:01:06.880
on how to address the results.

00:01:06.880 --> 00:01:10.830
You'll also see a summary of
the issues found by the crawler.

00:01:10.830 --> 00:01:12.630
It even offers
suggestions of taking

00:01:12.630 --> 00:01:14.910
advantage of the report's
more advanced features.

00:01:14.910 --> 00:01:16.710
We'll come back to
that in a moment.

00:01:16.710 --> 00:01:19.230
Below that, you'll see the
full details of everything

00:01:19.230 --> 00:01:21.600
the crawler found, including
screenshots and videos

00:01:21.600 --> 00:01:23.130
taken during the crawl.

00:01:23.130 --> 00:01:25.400
These are great for
spotting UX issues

00:01:25.400 --> 00:01:29.480
by seeing what the crawler was
doing when your app crashed.

00:01:29.480 --> 00:01:31.490
We've also added information
about accessibility

00:01:31.490 --> 00:01:34.010
and usability issues,
like small-touch targets,

00:01:34.010 --> 00:01:37.650
poor contrast, and missing or
confusing voice annotations.

00:01:37.650 --> 00:01:41.030
While the pre-launch report is
useful in its default state,

00:01:41.030 --> 00:01:43.250
you can easily customize
it to focus on the things

00:01:43.250 --> 00:01:45.770
that matter most to your app.

00:01:45.770 --> 00:01:48.820
For example, while Robo
can crawl any app built

00:01:48.820 --> 00:01:51.220
on the Android framework,
what if your app or game

00:01:51.220 --> 00:01:52.650
uses OpenGL?

00:01:52.650 --> 00:01:57.110
In that case, you can use
demo loops or monkey actions.

00:01:57.110 --> 00:02:00.270
A demo loop lets you
create automated journeys

00:02:00.270 --> 00:02:01.960
through your app.

00:02:01.960 --> 00:02:03.580
So if you're testing
a game, you might

00:02:03.580 --> 00:02:07.450
configure it to focus on a
particular level or character.

00:02:07.450 --> 00:02:10.449
To run a demo loop, first
add the loop to your game,

00:02:10.449 --> 00:02:13.630
then modify your game to
launch and run the demo loop.

00:02:13.630 --> 00:02:17.370
Finally, declare the demo
loop in your apps manifesto.

00:02:17.370 --> 00:02:21.280
Now, when you run a test, the
crawler will use the demo loop.

00:02:21.280 --> 00:02:22.780
When the crawler
is finished, you'll

00:02:22.780 --> 00:02:24.950
see both the
standard test results

00:02:24.950 --> 00:02:28.690
and any rendering issues so you
can investigate any problems

00:02:28.690 --> 00:02:30.440
with frame rates.

00:02:30.440 --> 00:02:32.330
A monkey action let's
the crawler test

00:02:32.330 --> 00:02:35.480
actions in places where you
haven't provided demo loop.

00:02:35.480 --> 00:02:38.810
In this case, when the crawler
reaches an OpenGL canvas,

00:02:38.810 --> 00:02:41.950
it'll perform random
taps and swipes.

00:02:41.950 --> 00:02:44.540
While it doesn't have the
sophistication of a demo loop,

00:02:44.540 --> 00:02:48.630
it can detect issues you
didn't encounter in your test.

00:02:48.630 --> 00:02:51.630
And what if your app asks
for users to sign in?

00:02:51.630 --> 00:02:52.630
No problem.

00:02:52.630 --> 00:02:55.805
The crawler can test the
logged in experience too.

00:02:55.805 --> 00:02:57.430
If you Sign-in with
Google, the crawler

00:02:57.430 --> 00:02:59.325
can locate the
log-in button and use

00:02:59.325 --> 00:03:00.700
the Google account
that's already

00:03:00.700 --> 00:03:02.800
included on the test device.

00:03:02.800 --> 00:03:05.140
If your app uses a
custom sign-in mechanism,

00:03:05.140 --> 00:03:08.360
just configure the pre-launch
report with a test account.

00:03:08.360 --> 00:03:11.680
Go to Settings and enter the
resources used for the username

00:03:11.680 --> 00:03:14.540
and password fields as
well as the log-in button.

00:03:14.540 --> 00:03:17.825
You'll also enter the test
username and password.

00:03:17.825 --> 00:03:19.950
Now when the crawler
encounters your log-in button,

00:03:19.950 --> 00:03:24.420
you'll enter the test account
details and keep testing.

00:03:24.420 --> 00:03:27.980
The pre-launch report can also
test up to three deep links.

00:03:27.980 --> 00:03:30.650
Deep links take users right
to the specific feature

00:03:30.650 --> 00:03:33.990
in your app, skipping
the usual entry flow.

00:03:33.990 --> 00:03:37.760
To specify which deep links you
want to test, go to Settings

00:03:37.760 --> 00:03:40.440
and just add the URLs.

00:03:40.440 --> 00:03:42.520
The crawler will run
for about five minutes,

00:03:42.520 --> 00:03:44.800
then close your app and
visit each deep link

00:03:44.800 --> 00:03:46.770
for about 30 seconds each.

00:03:46.770 --> 00:03:51.160
If it finds any issues,
you'll see them in the report.

00:03:51.160 --> 00:03:53.300
What if you want
even more control?

00:03:53.300 --> 00:03:55.280
Maybe your app has a
sign-up screen early

00:03:55.280 --> 00:03:57.745
in the onboarding flow
that you need to test

00:03:57.745 --> 00:03:59.120
or you want the
crawler to access

00:03:59.120 --> 00:04:00.890
a specific part of your app.

00:04:00.890 --> 00:04:02.930
That's where robo
scripts come in.

00:04:02.930 --> 00:04:06.770
Robo scripts are a sequence of
actions recorded in JSON file.

00:04:06.770 --> 00:04:10.130
To record a script, open
Android Studio, go to Tools,

00:04:10.130 --> 00:04:11.600
and open Firebase.

00:04:11.600 --> 00:04:16.040
Click Record Robo Script and
use it to guide robo test, then

00:04:16.040 --> 00:04:17.720
Record Robo Script.

00:04:17.720 --> 00:04:19.670
Select the test device
and record the steps

00:04:19.670 --> 00:04:21.860
you want the crawler
to follow and save

00:04:21.860 --> 00:04:23.790
the robo script to file.

00:04:23.790 --> 00:04:26.240
Now go to the pre-launch
report and upload your script

00:04:26.240 --> 00:04:27.170
under Settings.

00:04:27.170 --> 00:04:28.820
The next time you
run the crawler,

00:04:28.820 --> 00:04:31.160
it'll open your robo script
and follow the sequence

00:04:31.160 --> 00:04:33.440
of steps you recorded
before returning

00:04:33.440 --> 00:04:36.650
to its default crawling pattern.

00:04:36.650 --> 00:04:38.970
The pre-launch report
can also be configured

00:04:38.970 --> 00:04:40.710
to test in any language.

00:04:40.710 --> 00:04:43.270
By default, it will test
the most popular languages

00:04:43.270 --> 00:04:44.580
among your users.

00:04:44.580 --> 00:04:48.120
But you may want to test out a
new version before launching it

00:04:48.120 --> 00:04:49.518
with a new language.

00:04:49.518 --> 00:04:51.810
To test in another language,
open the pre-launch report

00:04:51.810 --> 00:04:54.850
settings anytime after the
initial crawl of your app.

00:04:54.850 --> 00:04:56.430
You can define up
to five languages

00:04:56.430 --> 00:04:59.180
to test when you
upload a new version.

00:04:59.180 --> 00:05:01.050
The pre-launch
report is a great way

00:05:01.050 --> 00:05:04.200
to do a final quality check
after your own QA testing,

00:05:04.200 --> 00:05:08.110
helping you deliver higher
quality apps and games.

00:05:08.110 --> 00:05:10.770
Everyone who publishes APKs
to the closed or open testing

00:05:10.770 --> 00:05:12.840
tracks can get a
pre-launch report.

00:05:12.840 --> 00:05:14.280
Just open the
Google Play Console

00:05:14.280 --> 00:05:16.230
to get your free report.

00:05:16.230 --> 00:05:19.120
Check it out next time you're
uploading a pre-production app.

00:05:19.120 --> 00:05:20.840
Thanks for watching.

