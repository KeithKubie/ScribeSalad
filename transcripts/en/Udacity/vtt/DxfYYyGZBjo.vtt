WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:01.340
Before we dive in,

00:00:01.340 --> 00:00:04.510
let me explain how I've organized
the topics of this course.

00:00:04.510 --> 00:00:06.960
There are three major parts, or units.

00:00:06.960 --> 00:00:10.840
These units reflect three different
ideas about what a computer looks like.

00:00:10.840 --> 00:00:13.950
Now, to explain what that means,
let's go back to CS 101.

00:00:13.950 --> 00:00:18.368
There you probably learned about a
machine model called the sequential, or

00:00:18.368 --> 00:00:19.481
serial RAM model.

00:00:19.481 --> 00:00:21.823
&gt;&gt; [MUSIC]
&gt;&gt; There's a single serial processor

00:00:21.823 --> 00:00:23.033
connected to memory.

00:00:23.033 --> 00:00:27.143
This processor issues instructions
that operate on data.

00:00:27.143 --> 00:00:27.724
&gt;&gt; Still computing.

00:00:27.724 --> 00:00:28.584
&gt;&gt; [MUSIC]

00:00:28.584 --> 00:00:31.578
&gt;&gt; The operands of these
instructions always live in memory.

00:00:31.578 --> 00:00:34.559
When you analyze the cost
of a serial ram algorithm,

00:00:34.559 --> 00:00:39.051
you assume that all instructions have
a cost that is bounded by some constant.

00:00:39.051 --> 00:00:40.444
Now from that starting point,

00:00:40.444 --> 00:00:42.920
you do a big O style analysis
in terms of the input size.

00:00:44.010 --> 00:00:45.605
So, that's the serial ram model.

00:00:45.605 --> 00:00:48.375
I hope you already know it by heart,
and maybe even love it a little?

00:00:48.375 --> 00:00:53.785
Now, what are the alternatives
to the serial RAM model?

00:00:53.785 --> 00:00:58.315
Well, a first alternative is
the Parallel RAM or PRAM model.

00:00:58.315 --> 00:01:01.235
Instead of one processor,
there may be many.

00:01:01.235 --> 00:01:03.285
They all see the same memory, and

00:01:03.285 --> 00:01:07.010
you still assume a bounded
constant cost per operation.

00:01:07.010 --> 00:01:09.300
But you get to work with
more than one processor.

00:01:10.520 --> 00:01:14.534
And since the processors all see
the same memory, they can coordinate and

00:01:14.534 --> 00:01:17.074
communicate by modifying
shared variables.

00:01:17.074 --> 00:01:22.086
Now in this model, your algorithmic
analysis will involve big O as before,

00:01:22.086 --> 00:01:26.077
but you'll try to reduce the total
cost by up to a factor of P,

00:01:26.077 --> 00:01:27.902
the number of processors.

00:01:27.902 --> 00:01:32.254
A PRAM style model is arguably
the simplest one that you might use on,

00:01:32.254 --> 00:01:36.698
say, a shared user multi-core
machine with uniform memory access.

00:01:36.698 --> 00:01:38.114
Using a what's it?

00:01:38.114 --> 00:01:40.436
Don't worry, you'll get there.

00:01:40.436 --> 00:01:41.759
So that was one alternative.

00:01:41.759 --> 00:01:46.230
Here's another,
a distributive memory network model.

00:01:46.230 --> 00:01:49.430
It's basically just
an interconnected network of RAMS.

00:01:49.430 --> 00:01:52.160
That is,
you start with multiple RAM computers.

00:01:52.160 --> 00:01:55.380
Each computer has a processor
with its own private memory.

00:01:55.380 --> 00:01:58.360
No processor can read or
write the memory of any other.

00:01:58.360 --> 00:02:02.940
Instead, they join forces connecting
to one another over a network.

00:02:02.940 --> 00:02:06.460
They coordinate by sending and
receiving messages over this network.

00:02:06.460 --> 00:02:09.919
Now, in this model, your analysis will
count the number of messages, and

00:02:09.919 --> 00:02:11.510
the total volume of communication.

00:02:13.050 --> 00:02:16.368
Okay, now here's a third alternative
that we'll consider in this class.

00:02:16.368 --> 00:02:19.970
It's a two-level input output,
or ("I/O") Model.

00:02:20.970 --> 00:02:24.550
In this model, there are one or more
processors connected to a main memory.

00:02:24.550 --> 00:02:28.980
It's sort of like RAM or PRAM, but you
assume that there's at least one level

00:02:28.980 --> 00:02:33.560
of fast memory that sits in between the
processors and the slower main memory.

00:02:34.600 --> 00:02:37.660
This model forces you to think
about the following question.

00:02:37.660 --> 00:02:41.810
How much data needs to move from memory
to the processor using this small,

00:02:41.810 --> 00:02:44.440
but fast,
intermediate memory as scratch space?

00:02:45.690 --> 00:02:47.600
Now, if you know about
things like caches or

00:02:47.600 --> 00:02:51.600
virtual memory, then you might
already know this basic model.

00:02:51.600 --> 00:02:52.910
But even if that's the case,

00:02:52.910 --> 00:02:55.870
do you also know how to design
algorithms that exploit it?

00:02:57.370 --> 00:02:59.030
So, to recap,

00:02:59.030 --> 00:03:03.420
we will discover the big ideas of this
course using three machine models.

00:03:03.420 --> 00:03:07.921
PRAM, the distributive memory, or
network model, and the two-level, or

00:03:07.921 --> 00:03:09.800
I/O, model.

00:03:09.800 --> 00:03:13.050
So, with that as background,
I think we're finally ready to start.

00:03:13.050 --> 00:03:13.610
Woot!

