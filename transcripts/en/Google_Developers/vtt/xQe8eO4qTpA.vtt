WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.610
MANDY WAITE: Could you provide
us with state-of-the-art

00:00:01.610 --> 00:00:02.860
database model designs?

00:00:02.860 --> 00:00:03.824
Oh, OK.

00:00:03.824 --> 00:00:05.270
That's a big ask.

00:00:05.270 --> 00:00:08.890
Things like CRM database model,
a Bookshelf, an eBay

00:00:08.890 --> 00:00:10.360
kind of application.

00:00:10.360 --> 00:00:12.720
FRED SAUER: OK.

00:00:12.720 --> 00:00:16.200
It sounds to me like the person
asking the question is

00:00:16.200 --> 00:00:24.510
kind of looking for sample
model, sample applications.

00:00:24.510 --> 00:00:27.110
And I hear kind of the question
behind the question,

00:00:27.110 --> 00:00:31.085
which is, how do I go about
modeling an e-commerce site, a

00:00:31.085 --> 00:00:36.770
CRM site, in this
non-relational, NoSQL world?

00:00:36.770 --> 00:00:38.670
I want to build an application
that can handle tremendous

00:00:38.670 --> 00:00:41.550
scale, but you've kind of
swapped the tools out for me.

00:00:41.550 --> 00:00:46.220
I'm used to doing development on
a SQL database, relational.

00:00:46.220 --> 00:00:48.680
I know how that works, but I
know that that doesn't scale.

00:00:48.680 --> 00:00:51.740
So help me switch.

00:00:51.740 --> 00:00:56.450
I think it's difficult to come
up with samples that fit every

00:00:56.450 --> 00:00:59.410
single vertical, but there are
some general things that we

00:00:59.410 --> 00:01:03.080
can say about the way you
do data modeling.

00:01:03.080 --> 00:01:07.950
And really, it's sort of
changing some of your habits

00:01:07.950 --> 00:01:10.440
and some of the things that you
were taught, maybe from

00:01:10.440 --> 00:01:13.140
the beginning, working with
relational databases.

00:01:13.140 --> 00:01:16.010
So one of the first tenets
when you're building a

00:01:16.010 --> 00:01:18.950
relational database model is
everything needs to be

00:01:18.950 --> 00:01:22.700
normalized, no data
duplicated.

00:01:22.700 --> 00:01:27.640
It's typical in an order entry
system to have 5, 6, 7, 10, 12

00:01:27.640 --> 00:01:30.000
different tables, that every
time you want to do a query

00:01:30.000 --> 00:01:32.520
and find out what the orders
are, you have to join all

00:01:32.520 --> 00:01:35.810
these tables at run time and
select your results.

00:01:35.810 --> 00:01:38.890
So you might have a table that
has items in it, and it has

00:01:38.890 --> 00:01:43.130
item description, item price,
and some other information.

00:01:43.130 --> 00:01:44.970
Then you have an order
lines, which

00:01:44.970 --> 00:01:46.260
connects to an order header.

00:01:46.260 --> 00:01:47.735
You have order line details.

00:01:47.735 --> 00:01:50.170
It goes on and on.

00:01:50.170 --> 00:01:54.710
And this is a really good way of
allowing you, at run time,

00:01:54.710 --> 00:01:57.820
the flexibility to really join
any amount of data with any

00:01:57.820 --> 00:01:59.750
other amount of data, which
is what relational

00:01:59.750 --> 00:02:01.790
databases were built for.

00:02:01.790 --> 00:02:07.530
But in a very scalable world,
what you want is actually that

00:02:07.530 --> 00:02:09.830
if you and I both make a request
to our website and

00:02:09.830 --> 00:02:12.870
we're both interacting with the
service, what we want is

00:02:12.870 --> 00:02:15.910
for your queries and my queries
to essentially be able

00:02:15.910 --> 00:02:18.750
to be handled by different parts
of the infrastructure.

00:02:18.750 --> 00:02:21.730
So it's a distributed platform,
and the way to do

00:02:21.730 --> 00:02:25.500
that is to sort of isolate
your data from my data.

00:02:25.500 --> 00:02:30.370
And that means what we don't
want is, if I'm pulling up a

00:02:30.370 --> 00:02:32.390
list of my orders and you're
pulling up a list of your

00:02:32.390 --> 00:02:35.440
orders, we don't want to both be
going to the same table and

00:02:35.440 --> 00:02:37.470
kind of running into
each other.

00:02:37.470 --> 00:02:40.570
We also don't want to take a lot
of time at run time kind

00:02:40.570 --> 00:02:43.670
of collecting the data.

00:02:43.670 --> 00:02:47.270
In a distributed system, what
you like to do is kind of

00:02:47.270 --> 00:02:51.370
amortize the cost, spread out
the costs, and do the cost at

00:02:51.370 --> 00:02:52.340
write time.

00:02:52.340 --> 00:02:56.530
So when we write the data, we
might do some deduplication,

00:02:56.530 --> 00:02:59.340
so what you would call
denormalization.

00:02:59.340 --> 00:03:05.340
So it's quite common in App
Engine apps for entities to

00:03:05.340 --> 00:03:08.130
have properties with
string values.

00:03:08.130 --> 00:03:12.420
So rather than have an item key
on your item details page,

00:03:12.420 --> 00:03:15.550
you would actually have, like,
the actual item code or the

00:03:15.550 --> 00:03:16.970
actual description.

00:03:16.970 --> 00:03:23.450
If you're putting together,
let's say, countries, you have

00:03:23.450 --> 00:03:27.140
a kind that stores addresses
and you need countries.

00:03:27.140 --> 00:03:29.110
In App Engine, you would
actually just put the country

00:03:29.110 --> 00:03:32.460
code or even the full country
name in every single entity.

00:03:32.460 --> 00:03:36.360
And you should kind of resist
that urge to say, oh, I don't

00:03:36.360 --> 00:03:37.500
want the duplication of data.

00:03:37.500 --> 00:03:39.120
I don't want to pay for
the extra storage.

00:03:39.120 --> 00:03:42.200
What you're really doing is
you're separating your data

00:03:42.200 --> 00:03:45.970
and my data and making it very
efficient to handle a very

00:03:45.970 --> 00:03:48.370
large number of requests.

00:03:48.370 --> 00:03:51.084
There's more best practices,
but the first one that you

00:03:51.084 --> 00:03:53.840
kind of want to think about
is denormalization

00:03:53.840 --> 00:03:55.110
is not a bad thing.

00:03:55.110 --> 00:03:57.205
It's actually something you
should really just embrace.

00:04:00.580 --> 00:04:03.030
Just pick two users and imagine
that they're both

00:04:03.030 --> 00:04:05.430
doing kind of the same thing
in your application.

00:04:05.430 --> 00:04:07.970
How can you make it so that
the entities that you're

00:04:07.970 --> 00:04:10.710
touching and the entities that
I'm touching are different?

00:04:10.710 --> 00:04:12.890
Because as soon as they're
separated from each other,

00:04:12.890 --> 00:04:15.370
then the Google App Engine
infrastructure, the datastore,

00:04:15.370 --> 00:04:19.000
can put those entities on
different physical hardware,

00:04:19.000 --> 00:04:22.670
different machines, and now we
can add a third user, a fourth

00:04:22.670 --> 00:04:23.840
user, a fifth user.

00:04:23.840 --> 00:04:25.270
We can have 100,000 users.

00:04:25.270 --> 00:04:28.450
It really doesn't matter how big
we scale up because each

00:04:28.450 --> 00:04:32.020
user's accessing a different
part of the system.

00:04:32.020 --> 00:04:34.820
So it's kind of a lot to grasp
if you're coming from a SQL

00:04:34.820 --> 00:04:35.460
environment.

00:04:35.460 --> 00:04:37.450
But once you play around with
it for a little while, it's

00:04:37.450 --> 00:04:40.770
really framed to say, I really
don't care how many users show

00:04:40.770 --> 00:04:42.120
up on my doorstep tomorrow.

00:04:42.120 --> 00:04:44.110
I can handle 1,000
users, a million

00:04:44.110 --> 00:04:46.280
users, a billion users.

00:04:46.280 --> 00:04:47.970
It's really independent
of the scale.

00:04:47.970 --> 00:04:51.400
And that's what the App Engine
datastore provides is

00:04:51.400 --> 00:04:54.020
performance that's independent
of the amount

00:04:54.020 --> 00:04:55.824
of data that's stored.

00:04:55.824 --> 00:04:56.708
MANDY WAITE: Excellent.

00:04:56.708 --> 00:04:58.946
That's really good advice.

00:04:58.946 --> 00:04:59.360
FRED SAUER: All right.

00:04:59.360 --> 00:05:01.970
So, sorry for the long
answer there.

00:05:01.970 --> 00:05:03.750
MANDY WAITE: No, I think it's
the kind of question that

00:05:03.750 --> 00:05:04.550
deserves a long answer.

00:05:04.550 --> 00:05:05.110
FRED SAUER: Yeah.

00:05:05.110 --> 00:05:07.410
It's a common question,
so it's fair to spend

00:05:07.410 --> 00:05:07.765
a little more time.

00:05:07.765 --> 00:05:09.970
MANDY WAITE: A lot of people
moving from the traditional,

00:05:09.970 --> 00:05:12.830
relational database over to
the NoSQL type of work.

00:05:12.830 --> 00:05:13.020
FRED SAUER: Oh.

00:05:13.020 --> 00:05:16.590
And we should say if you do
want a relational system--

00:05:16.590 --> 00:05:18.640
you have a limited number of
users, you're building a

00:05:18.640 --> 00:05:22.410
corporate application, you
only know you'll need the

00:05:22.410 --> 00:05:25.450
existing performance-- you
can use Google Cloud SQL.

00:05:25.450 --> 00:05:28.450
It's a MySQL database,
runs in the cloud,

00:05:28.450 --> 00:05:30.890
managed for you, no headaches.

00:05:30.890 --> 00:05:33.010
And you can get all the
traditional kind of

00:05:33.010 --> 00:05:34.830
performance trade-offs
and benefits.

00:05:34.830 --> 00:05:36.250
So that's still an option.

00:05:36.250 --> 00:05:37.500
MANDY WAITE: Yeah.

