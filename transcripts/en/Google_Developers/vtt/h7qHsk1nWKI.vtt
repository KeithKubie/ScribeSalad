WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.925
[MUSIC PLAYING]

00:00:02.220 --> 00:00:03.720
COLT MCANLIS: One
of the best things

00:00:03.720 --> 00:00:06.740
about writing applications using
Android's Runtime is that it's

00:00:06.740 --> 00:00:09.780
a managed memory environment,
which means you don't have

00:00:09.780 --> 00:00:12.240
to worry about all the extra
overhead of when objects are

00:00:12.240 --> 00:00:13.530
created and destroyed.

00:00:13.530 --> 00:00:14.780
But be careful here.

00:00:14.780 --> 00:00:16.610
Even in a managed
memory language,

00:00:16.610 --> 00:00:18.440
you can still end
up leaking memory.

00:00:18.440 --> 00:00:19.530
My name is Colt McAnlis.

00:00:19.530 --> 00:00:22.550
And memory leaks are a common
issue in complex code bases.

00:00:22.550 --> 00:00:24.610
And if not handled
properly, can easily

00:00:24.610 --> 00:00:27.860
lead to some nasty performance
problems in your apps.

00:00:27.860 --> 00:00:30.780
As you might recall, memory
heaps in Android's Runtime

00:00:30.780 --> 00:00:33.970
are segmented into spaces
based on the type of allocation

00:00:33.970 --> 00:00:36.640
and how the system can best
organize those allocations

00:00:36.640 --> 00:00:38.420
for future GC events.

00:00:38.420 --> 00:00:40.910
As new objects are allocated,
these characteristics

00:00:40.910 --> 00:00:42.890
are taken into
account to best fit

00:00:42.890 --> 00:00:44.830
what space it should
be placed into,

00:00:44.830 --> 00:00:47.620
depending on what version
of Android's Runtime

00:00:47.620 --> 00:00:48.740
you are using.

00:00:48.740 --> 00:00:50.320
And here's the important part.

00:00:50.320 --> 00:00:52.370
Each space has a set size.

00:00:52.370 --> 00:00:54.150
Now, as objects
are allocated, we

00:00:54.150 --> 00:00:56.370
keep track of the
combined sizes.

00:00:56.370 --> 00:00:58.370
And as the space starts
to grow, the system

00:00:58.370 --> 00:01:00.160
will need to execute
a garbage collection

00:01:00.160 --> 00:01:03.670
event in an attempt to free up
memory for future allocations.

00:01:03.670 --> 00:01:07.100
These GC events aren't
generally a noticeable problem

00:01:07.100 --> 00:01:07.812
for performance.

00:01:07.812 --> 00:01:09.770
However, a lot of them,
occurring over and over

00:01:09.770 --> 00:01:12.910
and over and over again, can
quickly eat up your frame time.

00:01:12.910 --> 00:01:14.540
The more time you're
spending doing GCs

00:01:14.540 --> 00:01:16.831
the less time you have to do
other stuff like rendering

00:01:16.831 --> 00:01:17.940
or streaming audio.

00:01:17.940 --> 00:01:20.860
Now, a common issue that can
cause a cascade of GC events

00:01:20.860 --> 00:01:23.220
to occur is a memory leak.

00:01:23.220 --> 00:01:25.260
Memory leaks are objects
which the application

00:01:25.260 --> 00:01:26.370
is no longer using.

00:01:26.370 --> 00:01:29.605
But the garbage collector fails
to recognize them as unused.

00:01:29.605 --> 00:01:31.730
The result is that they
stay resident in your heap,

00:01:31.730 --> 00:01:35.040
taking up valuable space that's
never freed for other objects.

00:01:35.040 --> 00:01:36.970
Now, as you start
leaking more memory,

00:01:36.970 --> 00:01:39.120
the available space
in your heaps space

00:01:39.120 --> 00:01:40.550
continues to get smaller.

00:01:40.550 --> 00:01:42.360
Which means that
GCs will be executed

00:01:42.360 --> 00:01:45.350
more often to try to free
up space for normal program

00:01:45.350 --> 00:01:46.300
execution.

00:01:46.300 --> 00:01:48.785
Which doesn't really work if
large portions of your heap

00:01:48.785 --> 00:01:50.650
are never actually being freed.

00:01:50.650 --> 00:01:53.437
Finding and fixing leaks
is really tricky business.

00:01:53.437 --> 00:01:55.770
Now, effectively, you have
to have a clear understanding

00:01:55.770 --> 00:01:57.900
of your code and be able
to validate that things

00:01:57.900 --> 00:02:01.100
work the way they should during
critical actions in your code

00:02:01.100 --> 00:02:01.780
base.

00:02:01.780 --> 00:02:03.290
To confirm this
type of behavior,

00:02:03.290 --> 00:02:05.540
however, requires
a bit of scrutiny.

00:02:05.540 --> 00:02:07.050
Now, for example,
let's say you want

00:02:07.050 --> 00:02:08.729
to ensure that
when a user leaves

00:02:08.729 --> 00:02:10.750
an activity in your
application, that all

00:02:10.750 --> 00:02:13.800
of the memory for that activity
is properly cleaned up.

00:02:13.800 --> 00:02:15.320
How would you go
about doing this?

00:02:15.320 --> 00:02:17.610
Well, firstly, you
should use the Heap tool

00:02:17.610 --> 00:02:19.720
to grab a snapshot of
what memory looks like

00:02:19.720 --> 00:02:21.890
while your activity
is front most.

00:02:21.890 --> 00:02:24.210
And secondly, you need to
create some blank activity

00:02:24.210 --> 00:02:27.250
with known or
low-memory allocations

00:02:27.250 --> 00:02:31.000
that you can transition into
from the activity in question.

00:02:31.000 --> 00:02:33.570
And thirdly, when you transition
from one to the other,

00:02:33.570 --> 00:02:35.850
force a garbage
collection event to occur.

00:02:35.850 --> 00:02:37.810
Which, if everything
is destroyed properly,

00:02:37.810 --> 00:02:40.760
should remove all the
activities allocations.

00:02:40.760 --> 00:02:43.650
If you see anything suspect
in that second heap dump, that

00:02:43.650 --> 00:02:45.910
is memory that shouldn't
actually be there,

00:02:45.910 --> 00:02:48.870
then it's a smart idea to switch
over to the Allocation Tracker

00:02:48.870 --> 00:02:51.000
tool and dig a little
deeper with what

00:02:51.000 --> 00:02:52.920
allocations are occurring.

00:02:52.920 --> 00:02:55.060
Using this tool, you can
start tracking allocations

00:02:55.060 --> 00:02:58.080
from before the activity
loads until it's unloaded

00:02:58.080 --> 00:03:00.932
and you've transitioned it
back into the blank activity.

00:03:00.932 --> 00:03:02.640
The allocation tracker
tool will give you

00:03:02.640 --> 00:03:05.170
a list of all objects
that were created,

00:03:05.170 --> 00:03:06.950
the order in which
they were created,

00:03:06.950 --> 00:03:08.332
and where they were created.

00:03:08.332 --> 00:03:10.790
So that you can track down
these types of rogue allocations

00:03:10.790 --> 00:03:13.690
and figure out why they
aren't being freed.

00:03:13.690 --> 00:03:15.850
Even though you're in a
managed memory environment,

00:03:15.850 --> 00:03:18.700
you still have a lot of
manual memory management

00:03:18.700 --> 00:03:21.100
to do yourself in order to
keep your app performant.

00:03:21.100 --> 00:03:23.224
So make sure to check out
the rest of the resources

00:03:23.224 --> 00:03:25.110
at Android Performance
Pattern Change.

00:03:25.110 --> 00:03:27.960
And don't forget to check out
the Google+ community for other

00:03:27.960 --> 00:03:30.450
great tips and tricks as well.

00:03:30.450 --> 00:03:33.340
So keep calm, profile your
code, and always remember,

00:03:33.340 --> 00:03:33.940
perf matters.

00:03:33.940 --> 00:03:36.390
[MUSIC PLAYING]

