WEBVTT
Kind: captions
Language: en

00:00:04.734 --> 00:00:06.334
Hi, my name is John Travis.

00:00:06.334 --> 00:00:08.100
I'm the principal
software engineer

00:00:08.100 --> 00:00:09.267
at Hyperic Software.

00:00:09.267 --> 00:00:12.100
Um, we are a management
and monitoring company

00:00:12.100 --> 00:00:14.601
that specializes
in web-based infrastructure.

00:00:14.601 --> 00:00:16.601
Recently, we've got a lot
of requests

00:00:16.601 --> 00:00:19.234
to expand our offering
to provide a visibility

00:00:19.234 --> 00:00:21.834
to users who are using

00:00:21.834 --> 00:00:23.200
the App Engine application
framework.

00:00:23.200 --> 00:00:26.133
And cloudstatus.com is the way
that we can give

00:00:26.133 --> 00:00:28.767
our users information
about how their application

00:00:28.767 --> 00:00:31.000
will perform in App Engine.

00:00:31.000 --> 00:00:32.334
Let me show it to you now.

00:00:32.334 --> 00:00:34.901
The first thing
when you get to cloudstatus.com

00:00:34.901 --> 00:00:37.067
you'll see
is our outage dashboard.

00:00:37.067 --> 00:00:38.968
The outage dashboard shows

00:00:38.968 --> 00:00:41.601
the most recent seven days'
worth of service health

00:00:41.601 --> 00:00:43.801
and some key performance
metrics

00:00:43.801 --> 00:00:46.400
across a number
of the web-based services.

00:00:46.400 --> 00:00:49.133
In the case of App Engine
we're showing data storage,

00:00:49.133 --> 00:00:50.834
delete time,
some read time,

00:00:50.834 --> 00:00:53.934
and some memcache access
right on the dashboard.

00:00:53.934 --> 00:00:55.601
If there's
any availability problems,

00:00:55.601 --> 00:00:58.534
though, these green bars
will turn red

00:00:58.534 --> 00:01:00.934
and you'll have more specific
information and links

00:01:00.934 --> 00:01:03.234
to form details.

00:01:03.234 --> 00:01:05.334
So the four key services
that we're monitoring

00:01:05.334 --> 00:01:08.367
for App Engine are
the core engine itself,

00:01:08.367 --> 00:01:10.100
the Python runtime,

00:01:10.100 --> 00:01:13.234
we're monitoring the datastore,
which is a Python abstraction

00:01:13.234 --> 00:01:15.467
on top of the big table access,

00:01:15.467 --> 00:01:17.467
memcache service,

00:01:17.467 --> 00:01:19.601
and finally,
the URLFetch service,

00:01:19.601 --> 00:01:22.367
which shows the performance
and response time

00:01:22.367 --> 00:01:24.534
between App Engine,
applications,

00:01:24.534 --> 00:01:26.434
and various web service
providers,

00:01:26.434 --> 00:01:29.534
including open
social networkers.

00:01:29.534 --> 00:01:33.200
So if we dive into the actual
engine-detailed data screen,

00:01:33.200 --> 00:01:34.868
we'll see a few things.

00:01:34.868 --> 00:01:37.601
The first thing you'll notice
is that this green bar engine

00:01:37.601 --> 00:01:40.467
indicates that the service has
been healthy for the past week

00:01:40.467 --> 00:01:43.334
and there has been
no service outages.

00:01:43.334 --> 00:01:45.334
In addition you'll see
that the Python runtime

00:01:45.334 --> 00:01:49.267
has maintained
a pretty constant performance.

00:01:49.267 --> 00:01:50.868
So it's about a 1/4
of a second

00:01:50.868 --> 00:01:55.133
to calculate
the 27th Fibonacci number.

00:01:55.133 --> 00:01:57.467
Moving on, we can take
a look at the datastore.

00:01:57.467 --> 00:02:01.200
And how we've monitored this
is decided to create

00:02:01.200 --> 00:02:03.734
a typical blog kind of model
where we have a user,

00:02:03.734 --> 00:02:07.334
some profile data,
as well as some blog posts.

00:02:07.334 --> 00:02:10.000
So what this screen represents
is the amount of time

00:02:10.000 --> 00:02:12.400
it takes to perform
various actions

00:02:12.400 --> 00:02:14.501
on those models,
such as creating, deleting,

00:02:14.501 --> 00:02:15.934
reading.

00:02:15.934 --> 00:02:17.267
You can see
that, over the past week,

00:02:17.267 --> 00:02:18.634
it's taken longer
and longer

00:02:18.634 --> 00:02:20.934
for random reads to occur
in the big table.

00:02:20.934 --> 00:02:22.634
This can occur
for a variety of reason,

00:02:22.634 --> 00:02:23.767
but it's been fairly constant

00:02:23.767 --> 00:02:26.067
ever since we've been
monitoring.

00:02:26.067 --> 00:02:29.667
Finally, I'd like to show you
the URLFetch service.

00:02:29.667 --> 00:02:33.634
URLFetch is App Engine's
only means of communicating

00:02:33.634 --> 00:02:35.400
with external entities.

00:02:35.400 --> 00:02:37.667
And this is important
for App Engine developers

00:02:37.667 --> 00:02:39.234
who want to integrate
with web services

00:02:39.234 --> 00:02:42.400
provided by Paypal, Facebook,
hi5,

00:02:42.400 --> 00:02:45.300
any of this open social
networking providers.

00:02:45.300 --> 00:02:46.868
The reason this screen
is important

00:02:46.868 --> 00:02:48.534
is it shows you
how long it takes

00:02:48.534 --> 00:02:51.968
to make web services' requests
to the different providers.

00:02:51.968 --> 00:02:56.667
And finally, this page shows
an aggregate across access

00:02:56.667 --> 00:02:58.834
that any App Engine user
can expect.

00:02:58.834 --> 00:03:01.834
And we provide a plug-in
for Hyperic HQ,

00:03:01.834 --> 00:03:02.968
our flagship product,

00:03:02.968 --> 00:03:05.033
which allows you
to monitor custom data

00:03:05.033 --> 00:03:07.133
that is specific
to your application,

00:03:07.133 --> 00:03:09.767
such as how many new users
you've logged in today,

00:03:09.767 --> 00:03:12.300
how many dollars you've made,

00:03:12.300 --> 00:03:14.901
and those metrics can be trended
and alerted on

00:03:14.901 --> 00:03:16.734
with Hyperic HQ.

00:03:16.734 --> 00:03:18.801
I learned two great things
when creating

00:03:18.801 --> 00:03:21.701
CloudStatus integration
for Google App Engine.

00:03:21.701 --> 00:03:24.634
The first was, there's a ton
of documentation out there.

00:03:24.634 --> 00:03:26.534
And I would advise
anyone who wants

00:03:26.534 --> 00:03:28.100
to write an App Engine
application

00:03:28.100 --> 00:03:30.200
to take a look at either
the Google tech talks,

00:03:30.200 --> 00:03:31.400
their I/O talks,

00:03:31.400 --> 00:03:33.400
or read some
of their White Papers,

00:03:33.400 --> 00:03:37.033
such as the GFS
or big table papers

00:03:37.033 --> 00:03:38.567
to get an even deeper
understanding

00:03:38.567 --> 00:03:40.667
of the infrastructure.

00:03:40.667 --> 00:03:43.634
The second thing I learned
was we have to report

00:03:43.634 --> 00:03:45.000
a service as available

00:03:45.000 --> 00:03:46.968
as available
when it's actually available

00:03:46.968 --> 00:03:48.534
and down when it's down.

00:03:48.534 --> 00:03:51.334
And this means responding
correctly to service outages,

00:03:51.334 --> 00:03:53.701
as well
as scheduled service outages.

00:03:53.701 --> 00:03:57.534
To make your application robust
against scheduled maintenance,

00:03:57.534 --> 00:04:00.200
simply catch
the capability disabler

00:04:00.200 --> 00:04:02.501
and route your users
accordingly.

00:04:02.501 --> 00:04:05.000
CloudStatus is gonna be adding
new services

00:04:05.000 --> 00:04:07.734
along App Engine.

00:04:07.734 --> 00:04:09.534
As soon as App Engine adds them,
you can be sure

00:04:09.534 --> 00:04:13.033
that you'll see them soon appear
on cloudstatus.com.

