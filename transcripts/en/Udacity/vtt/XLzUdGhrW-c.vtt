WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay. Here we are in our get coords function.

00:00:02.000 --> 00:00:06.000
If we get content back from that URL we run this code.

00:00:06.000 --> 00:00:09.000
Now, I don't have the return statement here, because I want to change this just a little bit.

00:00:09.000 --> 00:00:11.000
In the quiz, I had you return lat, long.

00:00:11.000 --> 00:00:14.000
What I want to return here is db.GeoPt(lat, long),

00:00:14.000 --> 00:00:18.000
which I have learned is a part of Google App Engine.

00:00:18.000 --> 00:00:21.000
It's a data type for storing a latitude and longitude.

00:00:21.000 --> 00:00:23.000
We could just store a tuple here.

00:00:23.000 --> 00:00:28.000
I figure if Google gives us a data type specifically for a location, that's what we should use.

00:00:28.000 --> 00:00:32.000
I'm going to use one of these, and that's what we're going to return out of our function.

00:00:32.000 --> 00:00:35.000
Let's test that this function is working.

00:00:35.000 --> 00:00:38.000
A quick way we can do that is just toss in a line right here.

00:00:38.000 --> 00:00:48.000
We're going to say self.write(repr(get<u>coords(self.request.remote</u>addr))).

00:00:48.000 --> 00:00:51.000
What I've added here is just a quick little hacky thing in our get( ) function.

00:00:51.000 --> 00:00:56.000
First we're just going to call this function write( ), which--if you recall--I added up here,

00:00:56.000 --> 00:00:59.000
and it calls self.response.out.write( ), so I don't have to type so much.

00:00:59.000 --> 00:01:01.000
I can just say .write. Then we're going to call repr( ).

00:01:01.000 --> 00:01:04.000
Now, this is a handy little trick when you're printing Python objects in HTML.

00:01:04.000 --> 00:01:08.000
Because when you print a Python object, it has angle brackets around it,

00:01:08.000 --> 00:01:13.000
which the browser will interpret as a tag, and then it won't actually print what you're trying to print.

00:01:13.000 --> 00:01:17.000
If you print repr around it, you'll get some extra quotes, and it'll print properly.

00:01:17.000 --> 00:01:19.000
Then I'm just going to call our function get_coords( ),

00:01:19.000 --> 00:01:22.000
and I'm going to call it with the requesting IP address,

00:01:22.000 --> 00:01:27.000
which is the remote_addr attribute of the request object.

00:01:27.000 --> 00:01:30.000
I learned how to do this just by looking in the App Engine docs.

00:01:30.000 --> 00:01:33.000
Almost every web framer will give you access to the requesting IP.

00:01:33.000 --> 00:01:36.000
I knew what I was kind of looking for and just found that in docs.

00:01:36.000 --> 00:01:39.000
Let's give this a shot. I reloaded the page, and I see None up here.

00:01:39.000 --> 00:01:44.000
That's better than an exception. We didn't get a location.

00:01:44.000 --> 00:01:46.000
So let's do some investigating.

00:01:46.000 --> 00:01:49.000
The first thing I want to do is I want to see what the IP was,

00:01:49.000 --> 00:01:51.000
so we can kind of debug this service.

00:01:51.000 --> 00:01:54.000
Let's say self.write( ). We'll print the IP as well. Let's give that a shot.

00:01:54.000 --> 00:01:59.000
Ah. Okay. 127.0.0.1. That means we're running this locally.

00:01:59.000 --> 00:02:03.000
It's not surprising that a service on the internet doesn't know what our local IP is.

00:02:03.000 --> 00:02:08.000
Let's verify that. We'll go to their API. We'll put in the API by hand, and we'll run it.

00:02:08.000 --> 00:02:10.000
And, yes, it's a private address.

00:02:10.000 --> 00:02:15.000
For those of you who don't know, every machine's local IP address is 127.0.0.1.

00:02:15.000 --> 00:02:17.000
This is called the loop-back address.

00:02:17.000 --> 00:02:20.000
This is how a machine refers to itself.

00:02:20.000 --> 00:02:22.000
It's not a public IP address on the internet.

00:02:22.000 --> 00:02:26.000
Local host--what we're accessing here--generally refers to that IP.

00:02:26.000 --> 00:02:28.000
Let's cheat a little bit and see if we can fix this.

00:02:28.000 --> 00:02:30.000
This is something that's going to come up during development.

00:02:30.000 --> 00:02:33.000
For our period here, I'm just going to overwrite the IP we send in this function

00:02:33.000 --> 00:02:36.000
to be an IP that I know is real--4.2.2.2.

00:02:36.000 --> 00:02:41.000
This is a big-name server than helps you resolve TNS names into IPs.

00:02:41.000 --> 00:02:44.000
We'll just hardcode the IP in this function to be this for now,

00:02:44.000 --> 00:02:46.000
so we have something to actually test against.

00:02:46.000 --> 00:02:49.000
Let's go back in our browser, give this page as reload, and see if we get anything useful.

00:02:49.000 --> 00:02:53.000
Ah-ha. So we are now seeing the coordinates of that IP address

00:02:53.000 --> 00:02:57.000
where that machine is located, or at least where this free service claims

00:02:57.000 --> 00:03:00.000
that machine is located, which is fine for us.

00:03:00.000 --> 00:03:03.000
We're not trying to be too accurate here. We just want to draw a pretty map.

00:03:03.000 --> 00:03:05.000
Our get IP function is working.

00:03:05.000 --> 00:03:08.000
We also conveniently tested the error case, which you should always do.

00:03:08.000 --> 00:03:10.682
We're in good shape there. Undo those hacks, and let's check back to our to-do list.

