WEBVTT
Kind: captions
Language: en

00:00:05.556 --> 00:00:06.200
CHET HAASE: Hi.

00:00:06.200 --> 00:00:09.250
I'm Chet Haase, an engineer on
the Android team at Google.

00:00:09.250 --> 00:00:11.580
I work on graphics and
animation, and today I wanted

00:00:11.580 --> 00:00:13.910
to talk about drawable
animation.

00:00:13.910 --> 00:00:15.480
Specifically, I want
to talk about the

00:00:15.480 --> 00:00:17.170
transition in drawable.

00:00:17.170 --> 00:00:20.860
This is a way to provide a
capability for you to cross

00:00:20.860 --> 00:00:26.720
fade between representations
of graphics in your views.

00:00:26.720 --> 00:00:29.370
So let's take a quick look
at the demo which I call

00:00:29.370 --> 00:00:30.640
CrossFading.

00:00:30.640 --> 00:00:33.050
It's a fascinating demo that's
going to cross fade between

00:00:33.050 --> 00:00:35.800
two colored rectangles, exactly
the kind of activity

00:00:35.800 --> 00:00:37.130
that you probably want
to write and

00:00:37.130 --> 00:00:38.650
sell on the Play store.

00:00:38.650 --> 00:00:41.140
So here we have a red rectangle,
and when I click on

00:00:41.140 --> 00:00:42.980
it, we're going to see
a green rectangle.

00:00:42.980 --> 00:00:44.790
And when we click on the green
one, we're going to see the

00:00:44.790 --> 00:00:46.560
red one, and back and forth.

00:00:46.560 --> 00:00:49.210
And if we click in the middle,
it'll stop the animation and

00:00:49.210 --> 00:00:50.980
go in reverse.

00:00:50.980 --> 00:00:53.390
So, not terribly interesting--
the code is slightly more

00:00:53.390 --> 00:00:54.130
interesting.

00:00:54.130 --> 00:00:56.070
Let's take a look at that now.

00:00:56.070 --> 00:00:58.330
So we have this class
called CrossFading.

00:00:58.330 --> 00:00:59.350
It's an activity.

00:00:59.350 --> 00:01:01.510
It keeps track of the current
drawables so that it knows

00:01:01.510 --> 00:01:03.490
which one to transition to.

00:01:03.490 --> 00:01:06.740
And so we can go in here
and see how we do that.

00:01:06.740 --> 00:01:08.390
First, we get the image view.

00:01:08.390 --> 00:01:10.600
Then we create a couple
of bit maps.

00:01:10.600 --> 00:01:13.780
We're going to create a red
bitmap and a green bitmap and

00:01:13.780 --> 00:01:15.500
put them in the image view.

00:01:15.500 --> 00:01:18.450
But instead of just installing
it as the drawable in the

00:01:18.450 --> 00:01:20.520
image view, we're actually going
to create this different

00:01:20.520 --> 00:01:23.350
kind of drawable called
a transition drawable.

00:01:23.350 --> 00:01:26.060
And this one takes an array of
objects, these drawables

00:01:26.060 --> 00:01:28.040
that's we've created, these
bit map drawables that now

00:01:28.040 --> 00:01:30.650
hold the red and the
green bitmaps.

00:01:30.650 --> 00:01:33.210
So we create the transition
drawable with those, and you

00:01:33.210 --> 00:01:36.500
can think of this as being
layers in that drawable.

00:01:36.500 --> 00:01:38.570
So it's a transition drawable
that's actually a set of

00:01:38.570 --> 00:01:41.630
drawables consisting of two.

00:01:41.630 --> 00:01:44.010
The red one is the first one
that we created, so that's

00:01:44.010 --> 00:01:46.380
going to be in back, and the
green one is in front.

00:01:46.380 --> 00:01:50.850
But the green one is not visible
by default, so it's

00:01:50.850 --> 00:01:53.330
kind of an invisible layer
sitting on top of the first

00:01:53.330 --> 00:01:54.510
one that you loaded there.

00:01:54.510 --> 00:01:58.560
And then when we click, we're
going to fade between these.

00:01:58.560 --> 00:02:01.200
So we go down here and
we listen for clicks

00:02:01.200 --> 00:02:02.270
on the image views.

00:02:02.270 --> 00:02:04.460
If the current drawable is 0,
which means we're now looking

00:02:04.460 --> 00:02:06.940
at the red one, that first one
loaded, then we must need to

00:02:06.940 --> 00:02:08.570
start the transition so
that we can see the

00:02:08.570 --> 00:02:09.750
green one on top.

00:02:09.750 --> 00:02:12.230
So we say start transition and
we give it a duration.

00:02:12.230 --> 00:02:14.930
So this time it's going to run
for 500 milliseconds and then

00:02:14.930 --> 00:02:16.780
it will fade in the green
one over the red.

00:02:16.780 --> 00:02:18.270
So it's not really doing
a cross fade.

00:02:18.270 --> 00:02:21.310
Instead, you see the red one,
and then we basically fade in

00:02:21.310 --> 00:02:23.360
the green one on top of it.

00:02:23.360 --> 00:02:26.310
And then we set the current
drawable so that we can track

00:02:26.310 --> 00:02:29.640
that so that we know next time
we click which one are we

00:02:29.640 --> 00:02:31.290
going to transition to.

00:02:31.290 --> 00:02:33.800
If you want to go in reverse,
you don't start the transition

00:02:33.800 --> 00:02:37.040
because start transition
always fades in the

00:02:37.040 --> 00:02:37.930
one that's on top.

00:02:37.930 --> 00:02:40.100
So if we did that every time,
you would always see the fade

00:02:40.100 --> 00:02:42.900
into green, which is probably
not the kind of cross fade

00:02:42.900 --> 00:02:43.910
effect that you're
looking for.

00:02:43.910 --> 00:02:46.440
Instead, if we want to go into
reverse, we need to fade out

00:02:46.440 --> 00:02:49.790
the one on top, and to do that
you call reverse transition.

00:02:49.790 --> 00:02:52.350
So reverse transition will
basically fade out the one

00:02:52.350 --> 00:02:55.650
that's on top, and then you
see the one, the first one

00:02:55.650 --> 00:02:57.300
that was loaded, the one
that's on the bottom.

00:02:57.300 --> 00:02:59.850
So we start transition, we fade
in the green, reverse

00:02:59.850 --> 00:03:01.560
transition, we fade
out to red.

00:03:01.560 --> 00:03:03.640
If we do it in the middle,
that's fine.

00:03:03.640 --> 00:03:05.250
If we're in the middle of
start transition, we're

00:03:05.250 --> 00:03:07.790
halfway there and then we click
on it, then we know that

00:03:07.790 --> 00:03:10.120
we need to go back to red and
we call reverse transition.

00:03:10.120 --> 00:03:12.430
It just stops and reverses
on the fly.

00:03:12.430 --> 00:03:14.150
This is kind of a useful effect
if you want to do

00:03:14.150 --> 00:03:17.490
something really simple
to cross fade between

00:03:17.490 --> 00:03:19.860
representations of
two drawables.

00:03:19.860 --> 00:03:22.390
It's not really good for a
general cross fading system.

00:03:22.390 --> 00:03:24.740
If you have a picture viewer,
let's say, where you're going

00:03:24.740 --> 00:03:26.720
between several different
images, there'd be a little

00:03:26.720 --> 00:03:29.210
bit more tracking to say OK,
now these are my two

00:03:29.210 --> 00:03:31.250
drawables, now these are
my two drawables.

00:03:31.250 --> 00:03:33.810
There's probably a better way of
doing this, which we'll see

00:03:33.810 --> 00:03:38.030
in a future episode, using a
more robust animation system.

00:03:38.030 --> 00:03:41.100
But for doing really simple
cross fades between two bitmap

00:03:41.100 --> 00:03:44.920
drawable representations, this
is a pretty easy class to use.

00:03:44.920 --> 00:03:45.890
And that's it for today.

00:03:45.890 --> 00:03:47.140
Thanks.

