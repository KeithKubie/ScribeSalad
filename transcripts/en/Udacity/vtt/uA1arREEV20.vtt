WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
But now I would like to talk a little bit about the art of reporting bugs.

00:00:02.000 --> 00:00:05.000
So let's assume that you're successful in creating some sort of really nice

00:00:05.000 --> 00:00:07.000
random tester that starts crashing utilities.

00:00:07.000 --> 00:00:09.000
Let's say for example that you want to do your own fuzzing study.

00:00:09.000 --> 00:00:13.000
So if you recall a fuzzing paper was written in 1990, one was written in 1995,

00:00:13.000 --> 00:00:15.000
then another in 2000, another in 2006.

00:00:15.000 --> 00:00:17.000
So now it's 2012 and is basically time for a new one.

00:00:17.000 --> 00:00:21.000
You do it and so what you do is go take whatever operating system you choose,

00:00:21.000 --> 00:00:23.000
and you start crashing software and hopefully

00:00:23.000 --> 00:00:26.000
instead of just being happy about what a successful effort you've had,

00:00:26.000 --> 00:00:28.000
you'll report the bugs to the maintainers so they can start

00:00:28.000 --> 00:00:31.000
improving the robustness of the software. Let's talk about how to do that.

00:00:31.000 --> 00:00:35.000
The first rule and it's really simple is don't report a duplicate bug.

00:00:35.000 --> 00:00:39.000
To avoid reporting duplicate bugs is to go to a bug reporting systems that most open source projects

00:00:39.000 --> 00:00:43.000
maintain and search on some symptom of the bug that you've found and see if it's been reported.

00:00:43.000 --> 00:00:46.000
Let's say we've found a way to get a segmentation fault

00:00:46.000 --> 00:00:49.000
out of all the m and we'll see if anybody else has that way.

00:00:49.000 --> 00:00:52.000
Well okay, so we only have one reported here and so it's really nice.

00:00:52.000 --> 00:00:55.000
What we would do then if we want to report a new segmentation fault to an LVM is

00:00:55.000 --> 00:00:58.000
we'll go ahead and look at this and see if the new one that we're going to report

00:00:58.000 --> 00:01:01.000
seems to be sufficiently different and if it is, we'll probably go ahead and report it.

00:01:01.000 --> 00:01:06.000
The next golden rule for reporting bugs is to respect whatever the local conventions are

00:01:06.000 --> 00:01:09.000
of the community that you're reporting to and so the best thing to do here is just look for some bugs

00:01:09.000 --> 00:01:13.000
that have been reported and see what kind of discussions they generate and try to take sort of a

00:01:13.000 --> 00:01:15.000
similar tone to what people have already done.

00:01:15.000 --> 00:01:20.000
The third thing is to report a small test case. I'm going to say here a small stand alone test case.

00:01:20.000 --> 00:01:25.000
The test case manipulation stuff that we have talked about a little bit earlier is really important

00:01:25.000 --> 00:01:29.000
for purposes of bug reporting and that kind of a process should always be a part of

00:01:29.000 --> 00:01:33.000
your bug reporting and the second cause here a stand alone test case is also really important.

00:01:33.000 --> 00:01:37.000
This means for example, don't report a bug that depends on some other file

00:01:37.000 --> 00:01:41.000
that only exists in your machine because that's not very useful to the people who are going to try to

00:01:41.000 --> 00:01:43.000
reproduce the bug because of course they don't have the other file.

00:01:43.000 --> 00:01:46.000
Do what you can to make a bug report stand alone.

00:01:46.000 --> 00:01:51.000
The next rule is when we report valid test cases and so this referring back

00:01:51.000 --> 00:01:54.000
exactly to the input validity problem that we've been talking about

00:01:54.000 --> 00:01:59.000
that I'd talked about a number of times in the material in random testing and if the software

00:01:59.000 --> 00:02:03.000
to which your reporting bugs isn't supposed to programmatically reject invalid inputs

00:02:03.000 --> 00:02:07.000
then you shouldn't report any valid inputs and so an example of this system is for example

00:02:07.000 --> 00:02:13.000
a C compiler isn't suppose to reject invalid inputs and another example might be something like

00:02:13.000 --> 00:02:16.000
internal communication between the JavaScript engine and a web browser

00:02:16.000 --> 00:02:20.000
there may not be total input checking on some sort of an internal interface like that,

00:02:20.000 --> 00:02:23.000
and so basically, we just want to be sensitive to the fact that some systems can't do

00:02:23.000 --> 00:02:27.000
or aren't equipped to do full validity check of their input and for those systems

00:02:27.000 --> 00:02:30.000
we often need to make sure the input is valid ourselves by hand.

00:02:30.000 --> 00:02:33.000
Now of course other systems and we've talked about things like Acrobat reader or whatever.

00:02:33.000 --> 00:02:36.000
These are suppose to reject invalid input and they are not suppose to crash

00:02:36.000 --> 00:02:39.000
in some sort a buffer overflow even on invalid inputs.

00:02:39.000 --> 00:02:41.000
For those kind of programs, this issue doesn't really exist.

00:02:41.000 --> 00:02:45.000
The next thing you need to do is tell the people who are the recipients for your bug report

00:02:45.000 --> 00:02:48.000
what the expected output of the system was that is what you hope would happen

00:02:48.000 --> 00:02:51.000
if the system wasn't buggy and what the actual output was.

00:02:51.000 --> 00:02:55.000
That is to say what really happen on your system and so the temptation is to not supply these things

00:02:55.000 --> 00:02:58.000
because you think it was insulting or you think that's really obvious, but in general

00:02:58.000 --> 00:03:01.000
it's a good idea to err on this side of caution and include these things.

00:03:01.000 --> 00:03:05.000
So you might include a bug report to the Python maintainers saying that when I added 1 + 1,

00:03:05.000 --> 00:03:07.000
I was really expected to but then this implementation,

00:03:07.000 --> 00:03:10.000
this particular version of the implementation printed 3.

00:03:10.000 --> 00:03:13.000
The next thing you need is to make the failure reproducible because nothing will get a bug report

00:03:13.000 --> 00:03:19.000
ignored faster than the incompletely irreducible and so you need to include things like platform details.

00:03:19.000 --> 00:03:22.000
For example this probably crucial information that your running Firefox on windows

00:03:22.000 --> 00:03:25.000
as oppose to Linux if you are trying to report some sort of Firefox crash.

00:03:25.000 --> 00:03:28.000
The exact version of the software under test is important

00:03:28.000 --> 00:03:31.000
and of course, if this is some sort of an open source project where you've hacked yourself

00:03:31.000 --> 00:03:35.000
before compiling you will definitely need to include details about that in the bug report.

00:03:35.000 --> 00:03:39.000
But if this little bug is your fault, then you don't want to waste people's time trying to track in down.

00:03:39.000 --> 00:03:43.000
So in summary, if we're able to come up with good solid answers to all of these requirements,

00:03:43.000 --> 00:03:46.000
that's a great idea to report a bug and so let's go ahead and do that right now.

