WEBVTT
Kind: captions
Language: en

00:00:02.616 --> 00:00:03.990
Building a performant
application

00:00:03.990 --> 00:00:05.614
has everything to do
with understanding

00:00:05.614 --> 00:00:06.867
how the hardware is working.

00:00:06.867 --> 00:00:08.700
So you know the best
way is to work with it.

00:00:08.700 --> 00:00:10.366
And at the core of
rendering performance

00:00:10.366 --> 00:00:12.430
sits an easily misunderstood
hardware process

00:00:12.430 --> 00:00:14.740
that governs how fast your
application can actually

00:00:14.740 --> 00:00:15.240
render.

00:00:15.240 --> 00:00:16.823
My name is Colt
McAnlis, and if you're

00:00:16.823 --> 00:00:19.080
looking to improve your
app's rendering performance,

00:00:19.080 --> 00:00:21.690
you need to become familiar
with a term known as VSYNC.

00:00:21.690 --> 00:00:24.140
But first, let's actually
take a step back.

00:00:24.140 --> 00:00:26.060
Understanding VSYNC
starts with understanding

00:00:26.060 --> 00:00:27.670
two other simple terms.

00:00:27.670 --> 00:00:30.300
The first is refresh rate, and
it represents how many times

00:00:30.300 --> 00:00:32.750
a screen can update
its display per second.

00:00:32.750 --> 00:00:34.450
This value is specified
in hertz and is

00:00:34.450 --> 00:00:36.680
constant based on the hardware.

00:00:36.680 --> 00:00:38.900
The second term is
frame rate, which

00:00:38.900 --> 00:00:42.340
measures how many times your GPU
can draw a frame per second--

00:00:42.340 --> 00:00:45.720
for example, 30 frames per
second or 60 frames per second.

00:00:45.720 --> 00:00:47.820
In this case, higher
is always better.

00:00:47.820 --> 00:00:49.950
Now, refresh rate and
frame rate both need

00:00:49.950 --> 00:00:52.190
to work together in order
to get your images drawn

00:00:52.190 --> 00:00:53.110
to your screen.

00:00:53.110 --> 00:00:55.160
The GPU will take in
your data, draw it,

00:00:55.160 --> 00:00:57.610
and then the hardware will
push the output of that

00:00:57.610 --> 00:00:58.580
to the screen.

00:00:58.580 --> 00:01:00.650
This will happen over
and over and over again

00:01:00.650 --> 00:01:02.565
during the lifetime
of your application.

00:01:02.565 --> 00:01:04.690
But the problem is that
refresh rate and frame rate

00:01:04.690 --> 00:01:07.230
aren't actually guaranteed to
occur at the same frequency.

00:01:07.230 --> 00:01:08.660
Say if your frame
rate is actually

00:01:08.660 --> 00:01:10.230
faster than your
refresh rate, then

00:01:10.230 --> 00:01:12.650
you're going to be seeing
a few visual problems.

00:01:12.650 --> 00:01:14.662
For example, imagine
taking a picture

00:01:14.662 --> 00:01:16.620
and then rotating the
camera about five degrees

00:01:16.620 --> 00:01:18.430
and taking another picture.

00:01:18.430 --> 00:01:20.710
Now, cut that
second photo in half

00:01:20.710 --> 00:01:22.587
and glue it on top
of the first one.

00:01:22.587 --> 00:01:24.420
The two images would
be similar, but there'd

00:01:24.420 --> 00:01:26.390
be a noticeable difference
between the top half

00:01:26.390 --> 00:01:28.670
and the bottom half
along the cut seam.

00:01:28.670 --> 00:01:30.454
This is known as
tearing, and this

00:01:30.454 --> 00:01:31.870
is what occurs in
your application

00:01:31.870 --> 00:01:34.550
if the frame rate and the
refresh rate are not lining up.

00:01:34.550 --> 00:01:37.260
The issue is that your graphics
card uses one region of memory

00:01:37.260 --> 00:01:38.890
to draw its frames into.

00:01:38.890 --> 00:01:41.130
Each new frame will
overwrite the previous frame,

00:01:41.130 --> 00:01:44.610
outputting data one line at
a time, starting at the top.

00:01:44.610 --> 00:01:46.690
Now, when the screen
comes along to refresh,

00:01:46.690 --> 00:01:49.630
it doesn't know what state
that buffer is actually in.

00:01:49.630 --> 00:01:52.030
As such, it can grab a
frame from the GPU that's

00:01:52.030 --> 00:01:53.850
not entirely
finished yet, meaning

00:01:53.850 --> 00:01:55.460
it's got half of
the previous frame

00:01:55.460 --> 00:01:56.850
and half of the current frame.

00:01:56.850 --> 00:01:59.050
A solution to this is
known as double buffering.

00:01:59.050 --> 00:02:02.430
Effectively, when the GPU is
done drawing a frame to memory,

00:02:02.430 --> 00:02:04.620
known as the back
buffer, it will copy it

00:02:04.620 --> 00:02:07.930
to a secondary area of memory
known as the frame buffer.

00:02:07.930 --> 00:02:09.440
When it draws the
next frame, it'll

00:02:09.440 --> 00:02:12.240
begin filling in the back buffer
while the frame buffer remains

00:02:12.240 --> 00:02:13.120
untouched.

00:02:13.120 --> 00:02:15.260
Now, when the screen
comes along to refresh,

00:02:15.260 --> 00:02:17.330
it'll do so from the
frame buffer, which

00:02:17.330 --> 00:02:19.720
isn't in the middle
of a draw operation.

00:02:19.720 --> 00:02:21.390
This is where VSYNC comes in.

00:02:21.390 --> 00:02:23.440
VSYNC, or vertical
synchronization,

00:02:23.440 --> 00:02:26.180
will basically keep this copy
operation from back buffer

00:02:26.180 --> 00:02:28.500
to frame buffer from
happening if the screen is

00:02:28.500 --> 00:02:31.137
in the middle of
refreshing from it.

00:02:31.137 --> 00:02:33.470
Having a frame rate higher
than a refresh rate is ideal,

00:02:33.470 --> 00:02:36.120
since your GPU is refreshing
faster than your screen

00:02:36.120 --> 00:02:36.900
is reading.

00:02:36.900 --> 00:02:39.690
In this scenario, after a
successful screen refresh,

00:02:39.690 --> 00:02:42.970
your GPU will be VSYNCed,
waiting for the next screen

00:02:42.970 --> 00:02:44.136
refresh to occur.

00:02:44.136 --> 00:02:45.510
In this scenario,
your frame rate

00:02:45.510 --> 00:02:48.710
has been effectively capped
at your device refresh rate.

00:02:48.710 --> 00:02:50.700
But what happens if your
screen is refreshing

00:02:50.700 --> 00:02:53.690
twice as fast as
your GPU is drawing?

00:02:53.690 --> 00:02:56.740
For example, the GPU is only
outputting 30 frames a second,

00:02:56.740 --> 00:02:59.380
but the screen is actually
refreshing at 60 hertz.

00:02:59.380 --> 00:03:01.000
This means that
every other refresh

00:03:01.000 --> 00:03:02.590
will be sampling
from the same frame.

00:03:02.590 --> 00:03:06.510
Or rather, the screen will be
displaying the same GPU frame

00:03:06.510 --> 00:03:07.696
twice in a row.

00:03:07.696 --> 00:03:09.070
When this happens
intermittently,

00:03:09.070 --> 00:03:09.779
you get problems.

00:03:09.779 --> 00:03:11.195
For example, if
your frame rate is

00:03:11.195 --> 00:03:13.140
higher than refresh
rate but suddenly dips,

00:03:13.140 --> 00:03:15.530
then the user will see a
smooth animation broke up

00:03:15.530 --> 00:03:17.580
with sudden pauses,
followed by the rest

00:03:17.580 --> 00:03:19.080
of the smooth animation.

00:03:19.080 --> 00:03:21.260
This exact effect
manifests itself

00:03:21.260 --> 00:03:23.890
to the user in a less than
smooth animated experience,

00:03:23.890 --> 00:03:27.724
which is often described as jank
or hitching or lag or stutter.

00:03:27.724 --> 00:03:29.140
And trust me, these
are the things

00:03:29.140 --> 00:03:30.520
that you actually want to avoid.

00:03:30.520 --> 00:03:33.390
Your application should strive
to remove these sudden dips

00:03:33.390 --> 00:03:36.080
in frame rate by always
ensuring that your GPU gets

00:03:36.080 --> 00:03:37.780
its data quickly
and has time to draw

00:03:37.780 --> 00:03:40.590
the contents by the
next screen refresh.

00:03:40.590 --> 00:03:42.946
But understanding VSYNC
is just the start.

00:03:42.946 --> 00:03:44.570
Building a high-performance
application

00:03:44.570 --> 00:03:45.960
requires you to
know what's going

00:03:45.960 --> 00:03:48.190
on under the hood of
your Android device.

00:03:48.190 --> 00:03:50.052
And to make sure that
you're doing that,

00:03:50.052 --> 00:03:51.510
check out the rest
of the resources

00:03:51.510 --> 00:03:53.370
on the Android
Performance Patterns page.

00:03:53.370 --> 00:03:57.180
Oh, and don't forget to join
our Google+ community to start

00:03:57.180 --> 00:03:58.880
building something amazing.

00:03:58.880 --> 00:04:01.700
So keep calm, profile your
code, and always remember,

00:04:01.700 --> 00:04:02.730
perf matters.

00:04:02.730 --> 00:04:06.080
[MUSIC PLAYING]

