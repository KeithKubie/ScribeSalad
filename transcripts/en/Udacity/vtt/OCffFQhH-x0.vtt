WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So for this quiz, I want to see if you can figure out

00:00:03.000 --> 00:00:07.000
a sensible way to do this. So we've got some pool of randomness...

00:00:07.000 --> 00:00:11.000
and one approach would be to extract a seed from that pool,

00:00:11.000 --> 00:00:14.000
use our Encryption function,

00:00:14.000 --> 00:00:16.000
we'll make the Seed the Message,

00:00:16.000 --> 00:00:19.000
we'll select the Key as Zero,

00:00:19.000 --> 00:00:21.000
we'll get an output from that,

00:00:21.000 --> 00:00:27.000
and we'll make a copy of the output. That's going to be our first random value.

00:00:27.000 --> 00:00:33.000
Then we'll encrypt again, using the previous Output as the new Input,

00:00:33.000 --> 00:00:38.000
using the key Zero again and extracting the next random number.

00:00:38.000 --> 00:00:41.000
So the second option: we're going to extract

00:00:41.000 --> 00:00:44.000
the seed from our random pool,

00:00:44.000 --> 00:00:48.000
we'll use that as the key to encrypt

00:00:48.000 --> 00:00:52.000
and for the first random output, we'll get the result of encrypting Zero with that key.

00:00:52.000 --> 00:00:55.000
For the next one, we'll get the result of encrypting One with that key.

00:00:55.000 --> 00:00:59.000
We'll keep using the same key, encrypting and getting a new random value

00:00:59.000 --> 00:01:02.000
as our output.

00:01:02.000 --> 00:01:07.000
And for our third option, we'll extract new values from the random pool each time,

00:01:07.000 --> 00:01:10.000
we'll encrypt a message, selected from the random pool,

00:01:10.000 --> 00:01:12.000
with the key selected from the random pool,

00:01:12.000 --> 00:01:13.000
to get X&lt;u&gt;0.&lt;/u&gt;

00:01:13.000 --> 00:01:17.000
To get the next random number, we'll extract a new message from the random pool,

00:01:17.000 --> 00:01:19.000
and a new key, and do that encryption.

00:01:19.000 --> 00:01:22.000
So which one of these options makes the most sense

00:01:22.000 --> 00:01:24.000
for a pseudo-random number generator?

00:01:24.000 --> 00:01:30.000
And let's assume our encryption function behaves well--it provides a mapping

00:01:30.000 --> 00:01:34.000
between keys and message that's hard to invert

00:01:34.000 --> 00:01:35.000
if you don't have the key.

00:01:35.000 --> 99:59:59.000
And that we have a random pool that provides a limited, but good, source of randomness.

