WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Well, let's go through them together.

00:00:03.000 --> 00:00:06.000
We could rename "javascript output" to anything as long as we're consistent.

00:00:06.000 --> 00:00:08.000
This is very tempting.

00:00:08.000 --> 00:00:11.000
Why don't I change this ugly space to an underscore.

00:00:11.000 --> 00:00:18.000
Well, the reason is that if the user knew that, in their embedded JavaScript fragment,

00:00:18.000 --> 00:00:22.000
they could assign to the variable "javascript_output"

00:00:22.000 --> 00:00:25.000
and because we're piggybacking on our environment,

00:00:25.000 --> 00:00:27.000
they'd find it, and they'd collide with it.

00:00:27.000 --> 00:00:30.000
So rather than printing out the right answer,

00:00:30.000 --> 00:00:34.000
we'd print out whatever the value was for this variable "javascript output."

00:00:34.000 --> 00:00:39.000
It's super unlikely, very unlikely that the user would happen to name a variable

00:00:39.000 --> 00:00:45.000
"javascript_output," but it's a security problem and officially there exists at least

00:00:45.000 --> 00:00:48.000
a few programs that won't compute the right answer

00:00:48.000 --> 00:00:52.000
if we change it to a variable that the user can collide with.

00:00:52.000 --> 00:00:54.000
So we can't actually rename it to anything.

00:00:54.000 --> 00:00:55.000
We have to be careful.

00:00:55.000 --> 00:00:58.000
When this feeds into the second one, "javascript output" is a good choice

00:00:58.000 --> 00:01:00.000
because it has a space in it--yes!

00:01:00.000 --> 00:01:04.000
If you think back to our lexer rule for identifiers,

00:01:04.000 --> 00:01:05.000
it looks something like this.

00:01:05.000 --> 00:01:10.000
Every javascript identifier contains upper or lowercase letters and possibly an underscore

00:01:10.000 --> 00:01:11.000
but can't contain a space.

00:01:11.000 --> 00:01:17.000
So this means there is no way for the user to have a variable name that has a space in it,

00:01:17.000 --> 00:01:20.000
so no way for them to collide with the rest of the environment.

00:01:20.000 --> 00:01:23.000
We could also have made a different design decision and had some global variable

00:01:23.000 --> 00:01:27.000
that's stored the "javascript output," but this approach, first, piggybacks on something

00:01:27.000 --> 00:01:31.000
you've already done, and second, illuminates cool issues like this.

00:01:31.000 --> 00:01:36.000
Finally, "javascript output" starts empty to support 0 calls to write.

00:01:36.000 --> 00:01:37.000
That does end up working out.

00:01:37.000 --> 00:01:39.000
Imagine that trees is the empty list.

00:01:39.000 --> 00:01:43.000
They just said begin Javascript, end JavaScript and didn't do any work.

00:01:43.000 --> 00:01:48.000
We would want to return a real value rather than having some sort of exception

00:01:48.000 --> 00:01:49.000
or look-up error problem.

00:01:49.000 --> 00:01:53.000
If I didn't initialize "javascript output" to the empty string,

00:01:53.000 --> 09:59:59.000
when we went to look it up here, there might not be anything there.

