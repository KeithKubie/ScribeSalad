WEBVTT
Kind: captions
Language: en

00:00:03.679 --> 00:00:04.720
JEROMY CARRIERE: Welcome.

00:00:05.960 --> 00:00:09.165
Before I get started, I want
to kind of do a quick question.

00:00:10.126 --> 00:00:10.625
Developers?

00:00:13.021 --> 00:00:13.520
OK.

00:00:14.550 --> 00:00:16.910
Sort of management types?

00:00:16.910 --> 00:00:19.220
Which I can say
without any slight,

00:00:19.220 --> 00:00:20.321
since I am such a thing.

00:00:20.321 --> 00:00:20.820
Oh, good.

00:00:20.820 --> 00:00:21.320
OK.

00:00:21.320 --> 00:00:24.290
Anybody I didn't get
with those two categories

00:00:24.290 --> 00:00:25.630
that's willing to admit it?

00:00:25.630 --> 00:00:26.130
No.

00:00:26.130 --> 00:00:26.700
OK.

00:00:26.700 --> 00:00:27.930
Fair enough.

00:00:27.930 --> 00:00:29.840
So, as Tom said,
I'm Jeromy Carriere.

00:00:29.840 --> 00:00:33.610
I'm an engineering director
here at Google in New York.

00:00:33.610 --> 00:00:37.480
I'm responsible for all of
Google's monitoring, logging,

00:00:37.480 --> 00:00:40.880
alerting, sort of
operational systems,

00:00:40.880 --> 00:00:43.690
both facing Google's
internal users

00:00:43.690 --> 00:00:45.120
and facing our cloud customers.

00:00:45.120 --> 00:00:46.869
So if you've seen
Google Cloud Monitoring,

00:00:46.869 --> 00:00:48.055
that's my team's project.

00:00:49.590 --> 00:00:53.010
I was told to offer a little
bit of human interest,

00:00:53.010 --> 00:00:55.440
so my human interest is my
daughter's joining us today.

00:00:55.440 --> 00:00:58.990
She brought me to a One
Direction concert last night,

00:00:58.990 --> 00:01:01.080
so this is payback.

00:01:05.700 --> 00:01:06.240
Yeah.

00:01:06.240 --> 00:01:07.739
She's going to have
to stay all day.

00:01:08.560 --> 00:01:11.566
So, does anybody-- I was
going through these slides.

00:01:11.566 --> 00:01:13.190
I'm thinking, like,
does anybody really

00:01:13.190 --> 00:01:15.760
need to be sold on
why cloud is a thing?

00:01:15.760 --> 00:01:18.030
Does anybody need to be sold
on why cloud is a thing?

00:01:18.030 --> 00:01:19.370
Does anybody not believe it?

00:01:19.370 --> 00:01:19.580
OK.

00:01:19.580 --> 00:01:20.079
Good.

00:01:20.079 --> 00:01:20.860
Anyway.

00:01:20.860 --> 00:01:22.360
I'm forced to go
through the slides.

00:01:23.980 --> 00:01:24.510
CEOs.

00:01:24.510 --> 00:01:25.790
We've talked to lots of CEOs.

00:01:25.790 --> 00:01:28.250
They see technology change
as driving their business.

00:01:28.250 --> 00:01:30.020
That's likely been
truth for all time.

00:01:30.020 --> 00:01:31.710
But right now, the
key thing that's

00:01:31.710 --> 00:01:37.207
driving businesses
globally is the cloud.

00:01:37.207 --> 00:01:39.290
Again, I probably don't
need to sell you too much.

00:01:39.290 --> 00:01:41.980
There are a few key elements
to that, things that are really

00:01:41.980 --> 00:01:45.620
pushing cloud as a thing today.

00:01:45.620 --> 00:01:47.740
Mobile, obviously,
is a huge one, right?

00:01:47.740 --> 00:01:49.950
People are using their own
devices in the workplace.

00:01:49.950 --> 00:01:52.369
Common pattern, 53%,
I think, is the number

00:01:52.369 --> 00:01:54.160
of people bringing
their own mobile devices

00:01:54.160 --> 00:01:54.951
into the workplace.

00:01:56.120 --> 00:01:56.750
Any time.

00:01:56.750 --> 00:02:00.200
We need to be able to access
data wherever you are,

00:02:00.200 --> 00:02:00.840
whenever.

00:02:00.840 --> 00:02:01.940
Any time of day.

00:02:01.940 --> 00:02:03.320
From anywhere in the world.

00:02:03.320 --> 00:02:04.050
We need people.

00:02:04.050 --> 00:02:05.030
We need collaboration.

00:02:05.030 --> 00:02:06.560
That's a huge driver today.

00:02:08.620 --> 00:02:11.120
The key thing that I like to
focus on is this idea of speed.

00:02:11.120 --> 00:02:11.620
Right?

00:02:11.620 --> 00:02:13.420
So I'm sort of subscribed
to the philosophy

00:02:13.420 --> 00:02:15.790
that velocity is paramount.

00:02:15.790 --> 00:02:19.260
Everything else you can fix
if you can deliver quickly.

00:02:19.260 --> 00:02:22.310
So spending time,
as most enterprises

00:02:22.310 --> 00:02:25.740
do-- 67% of
engineering effort goes

00:02:25.740 --> 00:02:27.700
into maintaining
existing systems-- that

00:02:27.700 --> 00:02:28.924
just saps velocity.

00:02:28.924 --> 00:02:29.840
So how do we fix that?

00:02:29.840 --> 00:02:31.700
What is it that we
can do about it?

00:02:31.700 --> 00:02:32.620
And that's where we
come-- ah, sorry.

00:02:32.620 --> 00:02:33.890
One more motivational slide.

00:02:33.890 --> 00:02:34.880
Mobile.

00:02:34.880 --> 00:02:36.790
People don't really
even appreciate

00:02:36.790 --> 00:02:39.680
that cloud services are
part of their daily lives.

00:02:39.680 --> 00:02:44.490
Whether it's iCloud or pick
your favorite start up.

00:02:44.490 --> 00:02:47.390
It's likely running on
our cloud or on AWS.

00:02:47.390 --> 00:02:48.050
Not a surprise.

00:02:48.050 --> 00:02:50.790
So it's in everybody's
lives all the time.

00:02:50.790 --> 00:02:52.970
A vast majority of
the workload that's

00:02:52.970 --> 00:02:54.710
running on Google's
Cloud Platform today

00:02:54.710 --> 00:02:56.710
is actually being driven
by mobile applications.

00:02:59.540 --> 00:03:02.960
IT trends are the sort of
fundamental building blocks

00:03:02.960 --> 00:03:04.680
that are pushing
this momentum today.

00:03:04.680 --> 00:03:07.110
So the first is
affordable capacity.

00:03:07.110 --> 00:03:09.420
Today-- this is a stat I
didn't even actually know

00:03:09.420 --> 00:03:11.130
until I read these
slides-- $600 can buy

00:03:11.130 --> 00:03:13.830
enough storage for
the world's music.

00:03:13.830 --> 00:03:15.710
That's pretty neat.

00:03:15.710 --> 00:03:18.330
$500-$600.

00:03:18.330 --> 00:03:18.950
On demand.

00:03:18.950 --> 00:03:22.420
You can get compute
capacity when you need it,

00:03:22.420 --> 00:03:24.280
with basically no ramp, right?

00:03:24.280 --> 00:03:25.110
There's no time.

00:03:25.110 --> 00:03:26.735
You don't have to
wait to get capacity.

00:03:27.680 --> 00:03:29.810
As a startup, as
any enterprise, you

00:03:29.810 --> 00:03:33.200
can get going with zero
capital expenditure.

00:03:33.200 --> 00:03:35.260
You can rent your
way to massive scale.

00:03:36.430 --> 00:03:39.020
And then, finally,
global networks

00:03:39.020 --> 00:03:42.070
in their current state--
Google having one of the best--

00:03:42.070 --> 00:03:45.130
is we can deliver information,
anywhere in the world,

00:03:45.130 --> 00:03:47.580
to any device,
extremely quickly.

00:03:47.580 --> 00:03:50.920
So these are the trends that
are pushing all this together.

00:03:52.530 --> 00:03:55.544
In case that you're not
sold, I found this also

00:03:55.544 --> 00:03:56.210
very compelling.

00:03:57.860 --> 00:04:01.330
In 1957, the average age of
a company joining the S&amp;P 500

00:04:01.330 --> 00:04:02.790
was 75 years.

00:04:02.790 --> 00:04:04.920
In 2013, it was 10 years.

00:04:04.920 --> 00:04:08.520
So if you don't believe that
the enterprise is changing,

00:04:08.520 --> 00:04:10.040
I think this should
be compelling.

00:04:11.590 --> 00:04:12.090
Google.

00:04:12.090 --> 00:04:13.840
Everyone knows Google's
mission statement.

00:04:13.840 --> 00:04:15.050
We're forced to memorize it.

00:04:15.050 --> 00:04:15.549
Tattoo it.

00:04:16.446 --> 00:04:18.779
Organize the world's information
and make it universally

00:04:18.779 --> 00:04:20.190
accessible and useful.

00:04:20.190 --> 00:04:22.010
Of course, this
started with Search.

00:04:22.010 --> 00:04:25.500
Google Search was
Sergey and Larry

00:04:25.500 --> 00:04:27.404
in their, whatever,
dorm at Stanford.

00:04:27.404 --> 00:04:28.570
That was where Google began.

00:04:30.220 --> 00:04:33.230
And that required a
lot of infrastructure.

00:04:33.230 --> 00:04:37.174
Over the years
since Google began,

00:04:37.174 --> 00:04:39.590
there has been an enormous
amount of infrastructure built,

00:04:39.590 --> 00:04:44.041
rebuilt, rebuilt again, globally
to deliver on that mission

00:04:44.041 --> 00:04:44.540
statement.

00:04:46.260 --> 00:04:49.070
That means that we are running
some of the largest distributed

00:04:49.070 --> 00:04:50.959
systems in the
world, with extremely

00:04:50.959 --> 00:04:52.750
stringent requirements
in terms of latency,

00:04:52.750 --> 00:04:53.750
in terms of reliability.

00:04:56.010 --> 00:04:58.450
Doing this required solving
a lot of problems, right?

00:04:58.450 --> 00:05:01.740
How do you actually not
just store multiple copies

00:05:01.740 --> 00:05:04.836
of the web, which is one thing--
you can put it on a hard drive

00:05:04.836 --> 00:05:06.210
and stick in the
closet, right?--

00:05:06.210 --> 00:05:09.765
but making it accessible
globally with low latency.

00:05:11.010 --> 00:05:13.150
Making it queryable
in rich ways.

00:05:13.150 --> 00:05:15.350
Applying the Knowledge
Graph to overlay

00:05:15.350 --> 00:05:17.002
the raw index of the web.

00:05:17.002 --> 00:05:18.460
And then expanding
that, of course,

00:05:18.460 --> 00:05:20.359
into the rest of our
product portfolio.

00:05:20.359 --> 00:05:22.900
That's required us to solve some
really interesting problems.

00:05:22.900 --> 00:05:25.400
And just to look at
one-- networking.

00:05:25.400 --> 00:05:29.370
So Google has a
fantastic global network

00:05:29.370 --> 00:05:32.692
in terms of reliability,
in terms of latency,

00:05:32.692 --> 00:05:34.650
in terms of raw throughput,
spanning the globe.

00:05:36.020 --> 00:05:37.730
To get there,
Google actually had

00:05:37.730 --> 00:05:41.050
to reinvent the way
telecom was done.

00:05:41.050 --> 00:05:46.029
For the most part, we actually
have our own dedicated fiber

00:05:46.029 --> 00:05:46.820
spanning the globe.

00:05:47.980 --> 00:05:50.760
That's kind of one aspect of
the sort of physical plant

00:05:50.760 --> 00:05:51.521
side of things.

00:05:51.521 --> 00:05:53.270
But there's a lot of
software here, right?

00:05:53.270 --> 00:05:55.500
Google engineers are
exceptionally smart.

00:05:57.680 --> 00:05:59.055
Some examples are shown here.

00:05:59.055 --> 00:06:00.430
And these are the
ones that we've

00:06:00.430 --> 00:06:02.820
talked about most publicly.

00:06:02.820 --> 00:06:04.320
And you see, as you
go to the right,

00:06:04.320 --> 00:06:08.300
you're moving toward more public
offerings like Compute Engine.

00:06:08.300 --> 00:06:10.800
But back in 2002, the
problem was, how do you

00:06:10.800 --> 00:06:13.790
store multiple copies of the
web and make them accessible?

00:06:13.790 --> 00:06:14.980
So the Google File System.

00:06:16.480 --> 00:06:19.667
Then, how do you actually
process that much data?

00:06:19.667 --> 00:06:20.375
That's MapReduce.

00:06:21.410 --> 00:06:23.370
And then how do
you actually make

00:06:23.370 --> 00:06:26.076
it queryable in
an online fashion?

00:06:26.076 --> 00:06:27.700
Building a storage
system is one thing,

00:06:27.700 --> 00:06:31.510
but then actually making it
queryable for online access

00:06:31.510 --> 00:06:32.950
is another thing.

00:06:32.950 --> 00:06:34.210
That's Bigtable.

00:06:34.210 --> 00:06:35.910
But how do you
make it expressive?

00:06:35.910 --> 00:06:38.070
How do you actually
allow users that

00:06:38.070 --> 00:06:41.010
want to ask questions
of that data--

00:06:41.010 --> 00:06:42.520
how do we make them productive?

00:06:42.520 --> 00:06:44.603
Well, that's Dremel, or
otherwise known externally

00:06:44.603 --> 00:06:45.104
as BigQuery.

00:06:45.104 --> 00:06:46.520
And then another
interesting point

00:06:46.520 --> 00:06:49.360
here is that Colossus is the
replacement for Google File

00:06:49.360 --> 00:06:49.870
System.

00:06:49.870 --> 00:06:52.130
So even in this one
slide, there are already

00:06:52.130 --> 00:06:56.340
cycles of wax and wane
of a given technology.

00:06:56.340 --> 00:06:58.217
So as we learned about
GFS, it taught us

00:06:58.217 --> 00:07:00.050
what we needed to do
in the next generation.

00:07:00.050 --> 00:07:01.040
That's Colossus.

00:07:01.040 --> 00:07:03.140
And then you see
Spanner, which is

00:07:03.140 --> 00:07:06.310
a strongly consistent global
database-- which sort of flies

00:07:06.310 --> 00:07:10.120
in the face of much of the
accumulated wisdom of software

00:07:10.120 --> 00:07:12.230
engineering these
days, which counsels

00:07:12.230 --> 00:07:14.910
us to relax
consistency constraints

00:07:14.910 --> 00:07:16.750
and favor availability
over consistency.

00:07:16.750 --> 00:07:18.740
And that's the Bigtable model.

00:07:18.740 --> 00:07:22.050
But as we observed how
Googlers build applications,

00:07:22.050 --> 00:07:24.870
we discovered that
actually finding a way

00:07:24.870 --> 00:07:27.520
to build a global,
consistent database

00:07:27.520 --> 00:07:29.290
makes many problems
easier to solve.

00:07:29.290 --> 00:07:30.720
And that's embodied in Spanner.

00:07:30.720 --> 00:07:32.220
And then, finally,
taking everything

00:07:32.220 --> 00:07:34.820
we've learned about building
global compute infrastructures,

00:07:34.820 --> 00:07:36.880
global physical
compute clusters,

00:07:36.880 --> 00:07:39.080
has led us to Compute Engine,
Google Compute Engine.

00:07:41.522 --> 00:07:42.980
So that's all well
and good, right?

00:07:42.980 --> 00:07:44.200
That's fun for us.

00:07:44.200 --> 00:07:45.540
But what does it mean to you?

00:07:45.540 --> 00:07:47.815
Well, the good news is that
the Google Cloud Platform,

00:07:47.815 --> 00:07:50.023
the compute engine I mentioned
in the previous slide,

00:07:50.023 --> 00:07:50.720
is one example.

00:07:50.720 --> 00:07:52.750
It's actually built on
the same infrastructure

00:07:52.750 --> 00:07:54.350
that powers Google itself.

00:07:54.350 --> 00:07:57.810
So underneath, as I
said, BigQuery is Dremel.

00:07:57.810 --> 00:08:00.929
Underneath another-- just quick
example-- underneath Google

00:08:00.929 --> 00:08:02.970
Cloud Storage is a product
that we use internally

00:08:02.970 --> 00:08:03.678
called Blobstore.

00:08:04.560 --> 00:08:07.440
And I can sort of repeat this
pattern over and over again.

00:08:09.920 --> 00:08:11.010
So the portfolio.

00:08:11.010 --> 00:08:13.260
The products that we offer
as part of the Google Cloud

00:08:13.260 --> 00:08:14.480
Platform.

00:08:14.480 --> 00:08:16.250
Loosely, in three large buckets.

00:08:16.250 --> 00:08:18.620
Compute, that's
hosting applications.

00:08:18.620 --> 00:08:20.120
App Engine and
Compute Engine, which

00:08:20.120 --> 00:08:21.350
we'll get into in a second.

00:08:21.350 --> 00:08:23.516
And you'll hear more, of
course, throughout the rest

00:08:23.516 --> 00:08:25.490
of the afternoon on
these things in depth.

00:08:25.490 --> 00:08:26.730
The storage products.

00:08:26.730 --> 00:08:29.010
Cloud Storage, Cloud
SQL, Cloud Datastore.

00:08:29.010 --> 00:08:31.300
So Datastore, with an
affinity to App Engine.

00:08:31.300 --> 00:08:33.360
Cloud SQL, hosted SQL offering.

00:08:33.360 --> 00:08:36.390
Cloud Storage, the Blobstore
I mentioned a second ago.

00:08:36.390 --> 00:08:38.260
And then high-level
application services.

00:08:38.260 --> 00:08:39.059
Cloud Endpoints.

00:08:39.059 --> 00:08:41.490
This is the facility we
have for allowing you

00:08:41.490 --> 00:08:45.310
developers to build APIs
hosted by App Engine.

00:08:45.310 --> 00:08:50.990
And BigQuery, again, is our
SQL-like large data query

00:08:50.990 --> 00:08:51.660
capability.

00:08:51.660 --> 00:08:55.890
Sort of a columnar-inspired
query system.

00:08:55.890 --> 00:08:58.785
So that's the quickest possible
pass through the platform.

00:09:00.480 --> 00:09:05.130
Just to reflect on how Google
Cloud Platform is evolving.

00:09:05.130 --> 00:09:08.070
So I've only been
at Google 18 months.

00:09:08.070 --> 00:09:11.340
So 18 months ago, coming into
Google, Cloud, in all honesty,

00:09:11.340 --> 00:09:12.940
seemed like a bit
of a novelty to me.

00:09:12.940 --> 00:09:17.740
It didn't seem like it was
really core to our business.

00:09:17.740 --> 00:09:19.930
That, I can swear, has changed.

00:09:19.930 --> 00:09:22.710
We have as an organization, as
an engineering organization,

00:09:22.710 --> 00:09:26.010
as a business, have applied
an enormous amount of energy

00:09:26.010 --> 00:09:27.200
to the cloud platform.

00:09:27.200 --> 00:09:30.570
And you can see that reflected
in just this small slice

00:09:30.570 --> 00:09:32.360
of the products that
we've delivered just

00:09:32.360 --> 00:09:35.300
in the last year.

00:09:35.300 --> 00:09:36.400
Since last August.

00:09:36.400 --> 00:09:38.810
Everything from
Encryption at Rest,

00:09:38.810 --> 00:09:40.740
which seems like kind
of a table-stakes thing,

00:09:40.740 --> 00:09:42.340
all the way through stuff
that we were talking about.

00:09:42.340 --> 00:09:45.390
Tom mentioned before Containers,
Google Cloud Monitoring, which

00:09:45.390 --> 00:09:47.420
I'll talk about, I
think, on the next slide.

00:09:47.420 --> 00:09:51.570
And all through this, there's
been a consistent theme

00:09:51.570 --> 00:09:55.650
of reducing prices to better
reflect the costs that we

00:09:55.650 --> 00:09:59.900
actually incur at Google, which
I'll get into in a second.

00:09:59.900 --> 00:10:02.220
So developers are
moving to Cloud,

00:10:02.220 --> 00:10:04.460
because it's always
going to be lower cost.

00:10:04.460 --> 00:10:07.330
We can always, as a
company like Google,

00:10:07.330 --> 00:10:11.760
run it more inexpensively
than you, an enterprise, can.

00:10:11.760 --> 00:10:13.722
And that sounds like
it's easy to say.

00:10:13.722 --> 00:10:14.680
But it's actually true.

00:10:14.680 --> 00:10:17.460
The economics are fundamentally
different for an organization

00:10:17.460 --> 00:10:17.960
like Google.

00:10:17.960 --> 00:10:20.040
And I'll come back
to that in a second.

00:10:20.040 --> 00:10:22.430
Then there's a question of
flexibility and adaptability.

00:10:22.430 --> 00:10:24.830
We are striving to build
a cloud platform that

00:10:24.830 --> 00:10:25.930
eliminates lock-in.

00:10:25.930 --> 00:10:28.050
Now, there's only so
far you can go, right?

00:10:28.050 --> 00:10:30.320
If you believe me,
and I said everything

00:10:30.320 --> 00:10:33.940
you build a Google
platform is 100% portable,

00:10:33.940 --> 00:10:35.830
you'd be right in
questioning that.

00:10:35.830 --> 00:10:39.450
But we are striving to not
just adhere to standards,

00:10:39.450 --> 00:10:43.000
but drive standards
to make that true.

00:10:43.000 --> 00:10:46.990
And then finally, we want
to allow you, the developer,

00:10:46.990 --> 00:10:48.930
to focus on customers.

00:10:48.930 --> 00:10:52.530
Energy you spend constructing,
managing, monitoring,

00:10:52.530 --> 00:10:54.660
and maintaining
infrastructure is

00:10:54.660 --> 00:10:57.062
time you're not
spending building value

00:10:57.062 --> 00:10:57.770
to your business.

00:10:57.770 --> 00:10:59.160
Something that your
customers are going to love.

00:10:59.160 --> 00:11:00.780
And we want to obviate that.

00:11:02.649 --> 00:11:03.315
Cloud economics.

00:11:04.720 --> 00:11:07.370
So-- this is the point I made
a second ago-- even if you were

00:11:07.370 --> 00:11:08.690
sort of thinking
cloud-wise, and you're

00:11:08.690 --> 00:11:11.280
building a private cloud, unless
you had an extremely diverse

00:11:11.280 --> 00:11:13.800
workload, if you're a
very large enterprise,

00:11:13.800 --> 00:11:17.810
you can imagine how you
could drive that curve down

00:11:17.810 --> 00:11:19.700
towards the public cloud curve.

00:11:19.700 --> 00:11:22.310
But we, as a cloud provider,
have the opportunity

00:11:22.310 --> 00:11:26.220
to optimize in terms
of economies of scale.

00:11:26.220 --> 00:11:30.540
We have the opportunity to hire
in a way that is really just

00:11:30.540 --> 00:11:33.720
not possible unless you're
running a cloud platform.

00:11:33.720 --> 00:11:37.900
And we have an opportunity
to multiplex workloads.

00:11:37.900 --> 00:11:40.390
And this is a really
interesting and subtle and rich

00:11:40.390 --> 00:11:41.030
topic of study.

00:11:41.030 --> 00:11:44.110
But we have an opportunity
to multiplex workloads

00:11:44.110 --> 00:11:46.270
across this global
infrastructure in a way that

00:11:46.270 --> 00:11:49.300
lets us pass on cost
savings to our customers.

00:11:51.610 --> 00:11:55.820
As an example, there are a few
of many potential computing

00:11:55.820 --> 00:11:56.560
patterns, right?

00:11:56.560 --> 00:11:59.090
There's the on-off sort
of batch every night.

00:11:59.090 --> 00:12:02.720
Once a week, run this job.

00:12:02.720 --> 00:12:04.660
You have the pattern
of growth, right?

00:12:04.660 --> 00:12:07.200
Which is of course what we
all want in our businesses.

00:12:07.200 --> 00:12:08.460
Up and to the right.

00:12:08.460 --> 00:12:10.150
That means you
need more capacity.

00:12:10.150 --> 00:12:13.600
And then there's a
third workload type--

00:12:13.600 --> 00:12:14.530
this idea of burst.

00:12:14.530 --> 00:12:18.180
And every workload, generally,
that's continuously on

00:12:18.180 --> 00:12:20.900
is going to have
some pattern, right?

00:12:20.900 --> 00:12:25.000
Absent any other capability, you
have to provision for the peak.

00:12:25.000 --> 00:12:26.990
Or, if you're
optimistic, you provision

00:12:26.990 --> 00:12:29.270
for some multiple
of the peak, right,

00:12:29.270 --> 00:12:34.380
to avoid problems when you have
an unexpected spike in demand.

00:12:34.380 --> 00:12:38.950
So all of these things, all
of these computing patterns,

00:12:38.950 --> 00:12:41.070
if you have to manage
them yourselves,

00:12:41.070 --> 00:12:44.142
you have to take on either
dramatic overprovisioning,

00:12:44.142 --> 00:12:46.100
or provisioning for a
certain amount of growth,

00:12:46.100 --> 00:12:50.520
or overprovisioning for these
batch periodic workloads.

00:12:50.520 --> 00:12:53.160
With Google Cloud
Platform, you can

00:12:53.160 --> 00:12:55.860
pass on all of that
complexity to Google.

00:12:55.860 --> 00:13:00.680
You no longer need to plan
for every cycle of capacity

00:13:00.680 --> 00:13:01.930
you need to run your business.

00:13:01.930 --> 00:13:03.846
I'm not saying you don't
have to do some work,

00:13:03.846 --> 00:13:06.110
but we are striving to take
away as much of that work

00:13:06.110 --> 00:13:06.610
as possible.

00:13:08.930 --> 00:13:15.370
Concretely, since 2006, we've
seen 6% to 8% price decreases

00:13:15.370 --> 00:13:17.825
in public cloud
offerings annually.

00:13:19.080 --> 00:13:24.500
But we don't think that's fair,
because the underlying costs

00:13:24.500 --> 00:13:28.850
that actually drive the business
have been dropping at 20%

00:13:28.850 --> 00:13:29.350
to 30% .

00:13:31.200 --> 00:13:34.640
So that remaining red
area there is just

00:13:34.640 --> 00:13:37.360
profit for the cloud provider.

00:13:37.360 --> 00:13:41.630
Our intent is to actually
drive that red line

00:13:41.630 --> 00:13:44.230
much closer to the blue line,
and pass on those savings

00:13:44.230 --> 00:13:45.300
to our customers.

00:13:45.300 --> 00:13:49.580
And you had seen that recently
as we announced new pricing.

00:13:49.580 --> 00:13:55.070
And one concrete example
of that is our switch

00:13:55.070 --> 00:13:57.550
in Compute Engine
pricing for On Demand.

00:13:57.550 --> 00:13:59.710
Historically, you had to choose.

00:13:59.710 --> 00:14:03.440
You had to choose between On
Demand and reserved compute

00:14:03.440 --> 00:14:04.420
instances.

00:14:04.420 --> 00:14:06.350
And generally, you
do that, if you're

00:14:06.350 --> 00:14:09.980
running a complex enterprise,
you hire a capacity engineer.

00:14:09.980 --> 00:14:12.750
You have to hire a person--
or more than one person--

00:14:12.750 --> 00:14:16.640
to actually plan for that
capacity and optimize.

00:14:16.640 --> 00:14:20.650
How much do I run on demand,
which is more expensive,

00:14:20.650 --> 00:14:22.611
versus how much
do I run reserved,

00:14:22.611 --> 00:14:24.360
which is less expensive,
but I'm committed

00:14:24.360 --> 00:14:25.360
for some period of time.

00:14:26.430 --> 00:14:29.580
So what we've done with
our new On Demand pricing

00:14:29.580 --> 00:14:35.420
is as its usage increases
towards 100%, prices decrease.

00:14:36.450 --> 00:14:39.380
So without you having to do
any specific engineering,

00:14:39.380 --> 00:14:40.410
you just buy On Demand.

00:14:40.410 --> 00:14:40.910
Right?

00:14:40.910 --> 00:14:43.510
You buy On Demand instances,
and if you use them

00:14:43.510 --> 00:14:45.350
like reserved
instances, they become

00:14:45.350 --> 00:14:47.220
priced like reserve instances.

00:14:47.220 --> 00:14:50.310
And that is just
sort of one data

00:14:50.310 --> 00:14:54.834
point to hopefully give you
some feeling for how Google

00:14:54.834 --> 00:14:56.875
is thinking about pricing
for the cloud platform.

00:15:01.280 --> 00:15:02.800
But cloud is still too hard.

00:15:04.040 --> 00:15:05.710
We want to price
it so you love it.

00:15:05.710 --> 00:15:07.470
We want to make
it easy to get at.

00:15:07.470 --> 00:15:10.730
But actually building
applications for the cloud

00:15:10.730 --> 00:15:12.970
is still particularly
difficult in many ways.

00:15:14.360 --> 00:15:17.830
Specifically developers need to
make trade-offs to get around

00:15:17.830 --> 00:15:20.330
the way cloud
platforms in general--

00:15:20.330 --> 00:15:23.470
not just ours-- are deficient
in a variety of ways.

00:15:23.470 --> 00:15:25.890
And here are three kind
of classical trade-offs

00:15:25.890 --> 00:15:27.530
that we see today.

00:15:27.530 --> 00:15:29.810
A trade-off between time
to market or scalability.

00:15:29.810 --> 00:15:33.580
Do I build my application, as
a startup, as a new project,

00:15:33.580 --> 00:15:35.444
on day one to
scale, when I don't

00:15:35.444 --> 00:15:36.610
know if it's going to scale?

00:15:36.610 --> 00:15:40.419
Or do I build it so I get
to market most quickly?

00:15:40.419 --> 00:15:42.710
And then deal with, ugh,
maybe it's not going to scale.

00:15:42.710 --> 00:15:43.620
I'll do it later.

00:15:43.620 --> 00:15:46.470
And often you have to step
in one of those two buckets--

00:15:46.470 --> 00:15:51.030
either build it quick or build
it so it's going to scale.

00:15:52.120 --> 00:15:55.720
Second example is flexibility
or automatic management.

00:15:55.720 --> 00:15:58.520
So this, back to something
Tom said before, we believe

00:15:58.520 --> 00:16:01.929
that the line between
infrastructure as a service

00:16:01.929 --> 00:16:04.220
and platform as a service--
infrastructure as a service

00:16:04.220 --> 00:16:06.220
being maximum flexibility,
platform as a service

00:16:06.220 --> 00:16:08.620
being minimal
management-- we believe

00:16:08.620 --> 00:16:10.290
that that line is blurring.

00:16:10.290 --> 00:16:13.030
And Julia is going to talk
about that in a little while.

00:16:14.230 --> 00:16:17.060
And then, finally, we
also have to often choose

00:16:17.060 --> 00:16:20.470
between big data--
store it efficiently,

00:16:20.470 --> 00:16:24.190
make it cost-effective
to ingest and process--

00:16:24.190 --> 00:16:28.666
or make it easy to access in
an ad hoc, real-time fashion.

00:16:28.666 --> 00:16:30.290
Another trade-off
that's commonly made.

00:16:31.620 --> 00:16:33.780
But we think in
most of these cases,

00:16:33.780 --> 00:16:35.730
we can change that
"or" to an "and."

00:16:35.730 --> 00:16:37.935
We can obviate the
trade-off in many cases.

00:16:39.719 --> 00:16:40.260
So first one.

00:16:40.260 --> 00:16:41.470
Time to market versus scale.

00:16:42.480 --> 00:16:44.610
How do you smash those
two things together?

00:16:44.610 --> 00:16:47.310
Well, we want to make
it possible to use

00:16:47.310 --> 00:16:49.820
the tools that you as
developers know and love.

00:16:49.820 --> 00:16:53.710
Make deployments fast, reliable.

00:16:53.710 --> 00:16:56.500
And then make it easy to
fix problems in production.

00:16:56.500 --> 00:16:59.750
And one big component of that
is Google Cloud Monitoring.

00:16:59.750 --> 00:17:01.333
This is my team's
project, so I'm just

00:17:01.333 --> 00:17:03.249
going to leave this slide
up here for a while.

00:17:03.249 --> 00:17:05.990
Let you bask in its glow
of those nice graphs.

00:17:07.010 --> 00:17:10.910
So the idea here is to
have a single pane of glass

00:17:10.910 --> 00:17:13.626
for monitoring all
of your workload

00:17:13.626 --> 00:17:14.834
on the Google Cloud Platform.

00:17:15.920 --> 00:17:18.390
Give you rich
dashboards, alerting,

00:17:18.390 --> 00:17:22.500
provide custom metrics, give you
an instant management facility,

00:17:22.500 --> 00:17:25.670
make it possible to quickly
find and solve problems

00:17:25.670 --> 00:17:26.910
in production systems.

00:17:26.910 --> 00:17:28.720
Whether they're running on
App Engine or Compute Engine,

00:17:28.720 --> 00:17:30.060
you have Cloud SQL databases.

00:17:31.350 --> 00:17:34.090
You've got stuff deployed
globally across our network.

00:17:35.430 --> 00:17:37.870
Stack Driver is the company
that we acquired back

00:17:37.870 --> 00:17:41.870
in May that is the
foundation of this offering.

00:17:41.870 --> 00:17:44.220
Another super-compelling
piece of this

00:17:44.220 --> 00:17:47.650
is recognizing that if you're
making that trade-off, right?

00:17:47.650 --> 00:17:51.100
Either I have super-flexible
or I have completely managed.

00:17:51.100 --> 00:17:54.170
One of the common
complaints there

00:17:54.170 --> 00:17:57.070
is that if I go to
the super-managed end

00:17:57.070 --> 00:17:59.200
of the spectrum,
I lose visibility.

00:17:59.200 --> 00:18:01.450
I lose the ability to debug
my application, right?

00:18:01.450 --> 00:18:04.510
We've all typed gdb
binary core file.

00:18:04.510 --> 00:18:07.110
Like, go in there, find
out, like, stack trace.

00:18:07.110 --> 00:18:11.200
See which pointer id
reference is null.

00:18:11.200 --> 00:18:13.642
You lose that, in most cases,
in a cloud environment.

00:18:13.642 --> 00:18:14.850
You're running on App Engine.

00:18:14.850 --> 00:18:17.084
You're running on
managed VMs, which

00:18:17.084 --> 00:18:18.250
I'll talk about in a second.

00:18:19.810 --> 00:18:22.090
You've got your processes
running wherever.

00:18:22.090 --> 00:18:23.590
You don't have any
idea where it is.

00:18:23.590 --> 00:18:26.090
You can't log into the box and
attach to the running process

00:18:26.090 --> 00:18:27.930
and inspect the stack.

00:18:30.370 --> 00:18:32.250
Cloud Debugger
offers the ability

00:18:32.250 --> 00:18:35.944
to do exactly that in a
globally deployed application.

00:18:35.944 --> 00:18:37.360
So you fire up the
Cloud Debugger.

00:18:37.360 --> 00:18:39.840
If we have your source,
you set a breakpoint.

00:18:39.840 --> 00:18:42.021
And we catch when
the breakpoint is

00:18:42.021 --> 00:18:43.520
hit by the process
running, wherever

00:18:43.520 --> 00:18:45.880
it happens to be
on our platform.

00:18:45.880 --> 00:18:46.380
You see it.

00:18:46.380 --> 00:18:48.200
You can inspect the stack.

00:18:49.360 --> 00:18:52.272
Incredibly, incredibly
compelling capability.

00:18:52.272 --> 00:18:53.730
And this was also
announced at I/O.

00:18:53.730 --> 00:18:55.230
This is not generally
available yet.

00:18:56.390 --> 00:18:59.230
And then another, final
example is Cloud Trace.

00:18:59.230 --> 00:19:02.300
So we've all wanted
look at traces.

00:19:02.300 --> 00:19:04.390
A hierarchical
decomposition of a request.

00:19:04.390 --> 00:19:06.890
So we have an offering-- again,
not yet generally available,

00:19:06.890 --> 00:19:09.520
but will be soon--
called Cloud Trace,

00:19:09.520 --> 00:19:14.840
that lets you inspect for
a given App Engine request.

00:19:14.840 --> 00:19:17.180
Inspect its complete trace
of calls into Datastore,

00:19:17.180 --> 00:19:19.630
calls into memcache
to look for latency,

00:19:19.630 --> 00:19:22.460
to look for deviant behavior
in your application.

00:19:23.880 --> 00:19:25.710
And compare from
release to release.

00:19:25.710 --> 00:19:28.360
Had release four, release five.

00:19:28.360 --> 00:19:31.430
Release five seems to be
relatively less performant

00:19:31.430 --> 00:19:32.180
than release four.

00:19:32.180 --> 00:19:32.971
Where is the delta?

00:19:32.971 --> 00:19:34.070
This tool will tell you.

00:19:35.240 --> 00:19:35.740
OK.

00:19:35.740 --> 00:19:39.150
The next trade-off that
we want to make go away--

00:19:39.150 --> 00:19:41.114
that, again, Julia
will dig into--

00:19:41.114 --> 00:19:43.280
is the trade-off between
flexibility and management.

00:19:43.280 --> 00:19:48.275
Making it easy to manage
your application, right?

00:19:48.275 --> 00:19:50.400
The App Engine kind of
platform as a service model.

00:19:50.400 --> 00:19:52.890
Versus run whatever you
want, however you want,

00:19:52.890 --> 00:19:54.820
but you lose the
management facility.

00:19:55.880 --> 00:19:57.730
Again, we want to
make that go away

00:19:57.730 --> 00:20:00.537
and blend together these two
models, the Turnkey App Engine

00:20:00.537 --> 00:20:02.870
platform and the fully flexible
Compute Engine platform.

00:20:05.650 --> 00:20:08.210
This is kind of
the conceptual view

00:20:08.210 --> 00:20:09.627
of how this might
be accomplished.

00:20:09.627 --> 00:20:11.335
At the bottom, you've
got Compute Engine.

00:20:11.335 --> 00:20:12.676
We manage your infrastructure.

00:20:12.676 --> 00:20:14.550
Then you get the idea
of replica pools, which

00:20:14.550 --> 00:20:19.080
is a new facility in our Compute
Engine offering, where we take

00:20:19.080 --> 00:20:21.500
care of multiple instances
sort of stamped out

00:20:21.500 --> 00:20:22.970
of the same virtual
machine image.

00:20:22.970 --> 00:20:25.702
And you can tell us to scale it.

00:20:25.702 --> 00:20:27.910
We'll make sure that there
are n healthy at any given

00:20:27.910 --> 00:20:29.840
point in time, by
doing health checks.

00:20:29.840 --> 00:20:31.760
That's one additional
level of management.

00:20:31.760 --> 00:20:34.580
Then up another
level is managed VMs,

00:20:34.580 --> 00:20:36.409
where you give us
your App Engine app.

00:20:36.409 --> 00:20:37.700
We run it in a virtual machine.

00:20:38.700 --> 00:20:40.700
You don't have to log
into that virtual machine.

00:20:40.700 --> 00:20:42.480
You don't have to
install software on it.

00:20:42.480 --> 00:20:43.900
We take care of that for you.

00:20:43.900 --> 00:20:46.655
But it's got your App
Engine app deployed in it.

00:20:46.655 --> 00:20:48.030
And then at the
top of the stack,

00:20:48.030 --> 00:20:49.180
we have so-called
managed runtimes.

00:20:49.180 --> 00:20:51.030
This is the classic
App Engine model.

00:20:51.030 --> 00:20:52.800
So in each of these
layers, you have

00:20:52.800 --> 00:20:55.190
to have-- maybe not less code.

00:20:55.190 --> 00:20:57.530
To me that's not quite
the right representation--

00:20:57.530 --> 00:21:00.150
but you have to do less
management at each level.

00:21:00.150 --> 00:21:03.570
One more plug for
my team's project.

00:21:03.570 --> 00:21:06.330
We will provide logging and
monitoring across the spectrum.

00:21:06.330 --> 00:21:08.820
So, regardless of whether
you're running a raw VM

00:21:08.820 --> 00:21:11.250
or running on top of App
Engine, or anywhere in between,

00:21:11.250 --> 00:21:13.340
we will give you visibility
into your complete application

00:21:13.340 --> 00:21:13.840
portfolio.

00:21:15.620 --> 00:21:17.420
So managed VMs, which
I mentioned before,

00:21:17.420 --> 00:21:21.050
so this is the idea
that we can offer you

00:21:21.050 --> 00:21:24.308
a virtual machine that is
managed like an App Engine app.

00:21:26.060 --> 00:21:26.890
Containers.

00:21:26.890 --> 00:21:29.380
This is one of the
newest things that we've

00:21:29.380 --> 00:21:32.470
been doing in Google
Cloud Platform,

00:21:32.470 --> 00:21:35.760
is offering
facilities to make it

00:21:35.760 --> 00:21:38.680
easy to run containerized
applications on the Cloud

00:21:38.680 --> 00:21:41.450
platform, by offering
special VM images that

00:21:41.450 --> 00:21:43.420
are tuned for
running containers.

00:21:43.420 --> 00:21:46.150
And, at the richest
end of the spectrum,

00:21:46.150 --> 00:21:48.410
offering this new system
called Kubernetes,

00:21:48.410 --> 00:21:53.240
which is a sort of miniaturized
cluster management system that

00:21:53.240 --> 00:21:55.920
reflects on the lessons
that Google has learned

00:21:55.920 --> 00:22:00.060
over many years of running
a large-scale cluster,

00:22:00.060 --> 00:22:01.760
global managed cluster system.

00:22:01.760 --> 00:22:04.480
So this lets us offer
better predictability.

00:22:04.480 --> 00:22:06.950
Lets us do things with
resource allocation

00:22:06.950 --> 00:22:11.220
that increase efficiency,
give you visibility

00:22:11.220 --> 00:22:12.897
into how your resources
are being used.

00:22:12.897 --> 00:22:14.480
So this I think is
extremely exciting,

00:22:14.480 --> 00:22:18.610
an extremely exciting
offering from GCP.

00:22:18.610 --> 00:22:20.330
And, perhaps more
importantly-- and you

00:22:20.330 --> 00:22:22.840
might have seen this in
the press-- we're actually

00:22:22.840 --> 00:22:25.580
working with a consortium of
tech companies-- including

00:22:25.580 --> 00:22:27.510
Microsoft, somewhat
surprisingly--

00:22:27.510 --> 00:22:30.804
to make this a
portable offering.

00:22:30.804 --> 00:22:32.470
So that it operates
the same, regardless

00:22:32.470 --> 00:22:34.219
of which cloud platform
you're running on.

00:22:34.219 --> 00:22:39.030
So you can take your
containerized Kubernetes

00:22:39.030 --> 00:22:42.784
application and run it in
any cloud with minimal pain.

00:22:44.316 --> 00:22:44.815
Networking.

00:22:45.819 --> 00:22:47.860
I think I went through
this a little bit already.

00:22:47.860 --> 00:22:48.818
Our networks are great.

00:22:48.818 --> 00:22:50.740
I won't dwell on it too much.

00:22:50.740 --> 00:22:53.495
But I think this is generally
self-evident in the data.

00:22:54.710 --> 00:22:55.930
Finally, big data.

00:22:55.930 --> 00:22:59.750
So, again, trade-off between
big and fast, big and ad hoc

00:22:59.750 --> 00:23:00.290
real time.

00:23:03.446 --> 00:23:05.820
There's a variety of reasons
why big data is hard, right?

00:23:07.270 --> 00:23:09.667
On one side of the coin, you
need specialized expertise.

00:23:09.667 --> 00:23:11.500
You need complex
distributed infrastructure.

00:23:12.530 --> 00:23:15.190
It takes a lot of energy to
build an efficient big data

00:23:15.190 --> 00:23:16.060
system.

00:23:16.060 --> 00:23:17.220
And then it's expensive.

00:23:17.220 --> 00:23:19.600
The people that you have to hire
that have specialized expertise

00:23:19.600 --> 00:23:20.183
are expensive.

00:23:21.430 --> 00:23:22.690
Storage is expensive.

00:23:22.690 --> 00:23:24.140
Compute is expensive.

00:23:24.140 --> 00:23:26.870
So what we've decided to do
is, to the best of our ability,

00:23:26.870 --> 00:23:30.340
make this easy and
affordable by bringing

00:23:30.340 --> 00:23:33.359
to market a number of tools,
again based on the things

00:23:33.359 --> 00:23:34.900
that we've done
internally at Google.

00:23:34.900 --> 00:23:37.620
Based on our expertise
with MapReduce,

00:23:37.620 --> 00:23:42.470
with large-scale SQL-like
systems like Spanner.

00:23:42.470 --> 00:23:45.170
Data Flow, which is an evolution
of an internal system that

00:23:45.170 --> 00:23:48.550
has largely supplanted
a raw MapReduce

00:23:48.550 --> 00:23:50.860
for our internal
application workloads.

00:23:50.860 --> 00:23:55.160
And, at the same time, make it
easy to run open-source systems

00:23:55.160 --> 00:23:56.785
like Hadoop on Google
Cloud Platform.

00:23:57.830 --> 00:24:01.070
So we're trying to put together
a portfolio of building blocks

00:24:01.070 --> 00:24:05.135
to make big data accessible
to our customers.

00:24:07.760 --> 00:24:10.140
Last point on this
is we're also working

00:24:10.140 --> 00:24:13.940
on a fusion of
streaming computation--

00:24:13.940 --> 00:24:16.920
that's the thing I mentioned
before Data Flow-- batch,

00:24:16.920 --> 00:24:19.360
typical kind of
MapReduce-like applications,

00:24:19.360 --> 00:24:21.890
and graph analysis,
graph databases.

00:24:21.890 --> 00:24:24.307
Putting those together into a
portfolio that, again, gives

00:24:24.307 --> 00:24:25.848
you the building
blocks that you need

00:24:25.848 --> 00:24:27.280
to build the kinds
of applications

00:24:27.280 --> 00:24:28.385
your business requires.

00:24:29.710 --> 00:24:31.049
So, in summary, cloud's real.

00:24:31.049 --> 00:24:33.340
I didn't have to sell that
one too hard, which is good.

00:24:34.570 --> 00:24:36.220
The idea of the
Google Cloud Platform

00:24:36.220 --> 00:24:39.090
is harnessing the
technology that we at Google

00:24:39.090 --> 00:24:42.020
have used to build Google.

00:24:42.020 --> 00:24:44.990
And, finally, all of these
software and infrastructure

00:24:44.990 --> 00:24:46.605
innovations are
really coming of age.

00:24:46.605 --> 00:24:47.980
And the Google
Cloud Platform has

00:24:47.980 --> 00:24:50.180
as its mission to bring
those to our customers.

00:24:51.260 --> 00:24:53.640
And to put our money
where our mouth is,

00:24:53.640 --> 00:24:57.380
we have a so-called starter
pack credit available now

00:24:57.380 --> 00:25:02.610
with this promotion code
applying at the URL there.

00:25:02.610 --> 00:25:07.350
And get $500 to begin working
with the Cloud platform out

00:25:07.350 --> 00:25:10.850
of the gate without
any upfront expense.

00:25:10.850 --> 00:25:12.580
Thank you.

