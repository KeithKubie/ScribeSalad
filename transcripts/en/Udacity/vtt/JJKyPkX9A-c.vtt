WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:03.460
To build up this List Item,
we created a horizontal linear layout

00:00:03.460 --> 00:00:07.056
with three children.
The first child is an image view.

00:00:07.056 --> 00:00:09.262
The second child
is a vertical linear layout

00:00:09.262 --> 00:00:11.980
composed of two text views
stacked on top of each other.

00:00:11.980 --> 00:00:14.520
The third child is the same.
It's a vertical linear layout

00:00:14.520 --> 00:00:17.660
composed of the two temperature text views
stacked on top of each other.

00:00:17.660 --> 00:00:20.370
Now, you might be wondering
why we didn't use a relative layout.

00:00:20.370 --> 00:00:23.004
Because that would give us
less layers of hierarchy.

00:00:23.004 --> 00:00:26.717
Well, relative layouts are good
if you want to specify that one view

00:00:26.717 --> 00:00:30.650
should be to the right of another,
or on top of another view.

00:00:30.650 --> 00:00:33.545
Relative layouts are also good
if you want a view to be aligned

00:00:33.545 --> 00:00:38.013
to the parent's left, top, right,
or bottom. But it's harder, in this case,

00:00:38.013 --> 00:00:41.152
to center these two text views
within the vertical height

00:00:41.152 --> 00:00:45.440
allocated by this image view. It's easier
with the linear layout here and here,

00:00:45.440 --> 00:00:47.886
so if the image was any taller,
these two text views

00:00:47.886 --> 00:00:50.012
would still stay vertically centered.

00:00:50.012 --> 00:00:53.860
And this is what it looks like in
the Device Preview within Android Studio.

00:00:53.860 --> 00:00:56.530
I want to point out one thing
about this horizontal linear layout,

00:00:56.530 --> 00:00:59.880
which has three children: the image view,
the vertical linear layout,

00:00:59.880 --> 00:01:03.053
and the other vertical linear layout.
The second child actually has

00:01:03.053 --> 00:01:08.400
a width of 0DP but a weight of 1.
That means that any horizontal space

00:01:08.400 --> 00:01:12.390
that's not taken up by other children
will be distributed among views

00:01:12.390 --> 00:01:16.270
that have assigned weights.
So, if we look at this third child,

00:01:16.270 --> 00:01:19.763
it has a width of wrap_content
and a weight of 0.

00:01:19.763 --> 00:01:22.856
If we gave it a weight of 1,
then it would stretch out like this.

00:01:23.196 --> 00:01:26.510
Basically, the icon is a fixed width,
and then the remaining horizontal space

00:01:26.510 --> 00:01:28.560
is divided among these two children.

00:01:28.560 --> 00:01:31.390
Since they both have a weight 1,
it's distributed equally.

00:01:31.390 --> 00:01:34.400
But if you look at the wire frames,
these temperature views are actually

00:01:34.400 --> 00:01:38.456
aligned to the right. So, all we need
is for the width to be wrap_content,

00:01:38.456 --> 00:01:39.942
and for the weight to be 0.

00:01:39.942 --> 00:01:43.690
Then, any remaining horizontal space
will be assigned to this middle element,

00:01:43.690 --> 00:01:45.046
with a weight of 1.

00:01:45.046 --> 00:01:46.762
And this is the code for the XML layout.

00:01:46.762 --> 00:01:49.520
We have a linear layout
in horizontal orientation.

00:01:49.520 --> 00:01:52.396
The width is match_parent
to match the width of the screen,

00:01:52.396 --> 00:01:55.022
and each list item has
wrap_content on its height.

00:01:55.022 --> 00:01:58.230
But it does have a minimum height
at least of this attribute,

00:01:58.230 --> 00:02:01.770
listPreferredItemHeight.
We specify gravity to be center_vertical

00:02:01.770 --> 00:02:04.750
so that all of its children are
vertically centered within it.

00:02:04.750 --> 00:02:08.570
We also specify a little bit of padding.
Inside of it, we add an ImageView,

00:02:08.570 --> 00:02:10.923
which has wrap_content
for height and width,

00:02:10.923 --> 00:02:14.596
and we specify the source
as this placeholder drawable.

00:02:14.596 --> 00:02:16.788
Next, we have the vertical LinearLayout,

00:02:16.788 --> 00:02:19.020
where the width is 0dp
and the weight is 1.

00:02:19.020 --> 00:02:22.633
We specify a little bit of padding
between this view and the icon beside it.

00:02:22.993 --> 00:02:25.760
Within the linear layout,
we have the date_textview

00:02:25.760 --> 00:02:27.900
as well as the forecast_textview.

00:02:27.900 --> 00:02:30.190
Beside that, we have another
vertical linear layout

00:02:30.190 --> 00:02:33.490
with the high temperature_textview
and the low temperature_textview.

00:02:33.490 --> 00:02:35.000
And that's it.

