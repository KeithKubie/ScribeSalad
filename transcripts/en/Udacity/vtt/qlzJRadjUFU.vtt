WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:03.920
Let's look at the answer to
our temporal locality quiz.

00:00:03.920 --> 00:00:07.650
In this code, the question was which
of these memory locations have temporal

00:00:07.650 --> 00:00:12.350
locality, and the choices were J,
sum, and the elements of arr.

00:00:13.480 --> 00:00:17.920
Temporal locality says that once
we access a memory location,

00:00:17.920 --> 00:00:19.370
were likely to access it again.

00:00:20.500 --> 00:00:25.376
For the variable J, this is true,
we are using it here, here,

00:00:25.376 --> 00:00:28.700
here in every iteration of the loop.

00:00:28.700 --> 00:00:30.096
So the first time we access it,

00:00:30.096 --> 00:00:34.550
if we conclude that it will be
accessed again soon, we will be right.

00:00:34.550 --> 00:00:38.712
Actually, once we begin accessing
its going to be accessed a lot.

00:00:38.712 --> 00:00:42.820
It's going to be accessed to initialize
it, to check if it's less then a 1000,

00:00:42.820 --> 00:00:47.510
to access the RA, to increment it,
to check, to access, to increment many,

00:00:47.510 --> 00:00:48.880
many times.

00:00:48.880 --> 00:00:52.780
So this variable definitely
does have temporal locality.

00:00:54.400 --> 00:00:57.360
The variable sum, same thing.

00:00:57.360 --> 00:01:01.050
It is being initialized and
then in every duration of this loop,

00:01:01.050 --> 00:01:03.770
it is going to be red, so

00:01:03.770 --> 00:01:08.570
that we can add something to it,
and then written back to memory.

00:01:08.570 --> 00:01:12.360
So this definitely also
has temporal locality.

00:01:12.360 --> 00:01:16.050
Once we access it, we can conclude
that it will be accessed soon again.

00:01:17.110 --> 00:01:21.040
For each element of the array arr,
however, and note that the array has

00:01:21.040 --> 00:01:25.510
many, many memory locations,
we do not have temporal locality.

00:01:25.510 --> 00:01:26.500
Element arr of 0,

00:01:26.500 --> 00:01:32.230
once it's accessed in the loop, that's
the only time we access in this loop.

00:01:32.230 --> 00:01:35.470
We will access out of one,
out of two etc., but for

00:01:35.470 --> 00:01:37.260
each element it's accessed only once.

00:01:37.260 --> 00:01:41.270
So, if we conclude that when it's
accessed it's going to be accessed again

00:01:41.270 --> 00:01:43.930
soon, we would not be correct.

00:01:43.930 --> 00:01:47.570
So, this choice should not be selected.

00:01:47.570 --> 00:01:51.350
This variable does not have
temporal locality in this code.

