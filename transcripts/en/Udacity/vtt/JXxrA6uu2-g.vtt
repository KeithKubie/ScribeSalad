WEBVTT
Kind: captions
Language: en

00:00:00.850 --> 00:00:03.240
Now, for a long time, I've been in proponent of saying

00:00:03.240 --> 00:00:05.360
that it doesn't matter what your language is or what your

00:00:05.360 --> 00:00:10.080
platform is. If you follow the memory, you'll find performance problems.

00:00:10.080 --> 00:00:13.860
And believe it or not, JavaScripts and HTML5 is no different. That's

00:00:13.860 --> 00:00:16.190
why I want to point you at this final option down here

00:00:16.190 --> 00:00:19.680
on your Profiles tab called Record Heap Allocations. Now, what this

00:00:19.680 --> 00:00:22.000
is going to do? This is actually going to make a log of

00:00:22.000 --> 00:00:26.300
all the allocations that occur. While your web application is running. So

00:00:26.300 --> 00:00:28.060
I'm going to turn this on and play through the game a little bit

00:00:28.060 --> 00:00:35.116
so you can see how the memories reacting to the game

00:00:35.116 --> 00:00:42.713
play. [NOISE]

00:00:43.810 --> 00:00:44.870
Now of course with that one alien

00:00:44.870 --> 00:00:48.020
destroyed, I've now saved the universe. Now, sizing

00:00:48.020 --> 00:00:49.510
up this window a little bit actually gives

00:00:49.510 --> 00:00:51.300
us a lot of information about what was

00:00:51.300 --> 00:00:54.780
allocated during that small time playing. So first off you can

00:00:54.780 --> 00:00:57.640
see that we have the types of objects that were allocated

00:00:57.640 --> 00:01:01.710
in this column. The distance is not necessarily as important as

00:01:01.710 --> 00:01:04.010
you would need it to be right now, so let's ignore that.

00:01:04.010 --> 00:01:06.630
Most important is actually this shallow size measure because it actually

00:01:06.630 --> 00:01:09.750
shows you the number of bytes allocated to this type of object

00:01:09.750 --> 00:01:12.600
so you can see here that the compiled code object is

00:01:12.600 --> 00:01:16.930
roughly taking about 2 megabytes or 28% of our overall frame heap.

00:01:16.930 --> 00:01:21.270
Expanding compiled code actually gives us locations in executable memory that

00:01:21.270 --> 00:01:23.880
tells us what type of data is being allocated. Now, this

00:01:23.880 --> 00:01:26.750
is code information, so it's actually not going to be that important

00:01:26.750 --> 00:01:29.040
to you unless you're be doing a lot of script injection.

00:01:29.040 --> 00:01:31.230
Now, probably a lot more useful to you is actually going

00:01:31.230 --> 00:01:34.920
to be a little bit lower in the stack. This object

00:01:34.920 --> 00:01:37.720
header you see here. This is actually going to list all of

00:01:37.720 --> 00:01:42.010
the class types or object definitions that have been created during our

00:01:42.010 --> 00:01:45.910
little playback. Expanding this actually gives us a bunch of pointers into

00:01:45.910 --> 00:01:50.200
the memory heap. Clicking on one shows us the retaining tree for

00:01:50.200 --> 00:01:52.460
the object. So if we bring this up a little bit. We

00:01:52.460 --> 00:01:55.520
can see that there was a module that was called from IG, and

00:01:55.520 --> 00:01:57.680
you can see that there was a lot of little global functions

00:01:57.680 --> 00:02:00.450
that kind of came into play. So clicking through this list a

00:02:00.450 --> 00:02:04.870
little bit more, we can find probably some interesting data. So here

00:02:04.870 --> 00:02:07.620
you can see that this one was actually an allocation of a collision

00:02:07.620 --> 00:02:10.250
map object. So somewhere while these objects

00:02:10.250 --> 00:02:12.780
were falling or debris was occurring The collision

00:02:12.780 --> 00:02:16.610
map was called and you can see a lot of the object information listed here.

