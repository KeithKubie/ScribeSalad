WEBVTT
Kind: captions
Language: en

00:00:03.140 --> 00:00:05.960
This episode is brought to you by CuriosityStream.

00:00:05.960 --> 00:00:08.630
Hi, I’m Carrie Anne and welcome to CrashCourse
Computer Science!

00:00:08.630 --> 00:00:12.520
So far, for most of this series, we’ve focused
on hardware -- the physical components of

00:00:12.530 --> 00:00:17.580
computing -- things like: electricity and
circuits, registers and RAM, ALUs and CPUs.

00:00:17.580 --> 00:00:21.390
But programming at the hardware level is cumbersome
and inflexible, so programmers wanted a more

00:00:21.390 --> 00:00:24.849
versatile way to program computers - what
you might call a “softer” medium.

00:00:24.849 --> 00:00:27.440
That’s right, we’re going to talk about
Software!

00:00:27.440 --> 00:00:36.640
INTRO

00:00:36.650 --> 00:00:40.230
In episode 8, we walked through a simple program
for the CPU we designed.

00:00:40.230 --> 00:00:46.290
The very first instruction to be executed,
the one at memory address 0, was 0010 1110.

00:00:46.290 --> 00:00:50.800
As we discussed, the first four bits of an
instruction is the operation code, or OPCODE

00:00:50.800 --> 00:00:51.800
for short.

00:00:51.800 --> 00:00:57.210
On our hypothetical CPU, 0010 indicated a
LOAD_A instruction -- which moves a value

00:00:57.210 --> 00:00:59.170
from memory into Register A.

00:00:59.170 --> 00:01:04.830
The second set of four bits defines the memory
location, in this case, 1110, which is 14

00:01:04.830 --> 00:01:05.830
in decimal.

00:01:05.830 --> 00:01:09.840
So what these eight numbers really mean is
“LOAD Address 14 into Register A”.

00:01:09.840 --> 00:01:11.860
We’re just using two different languages.

00:01:11.860 --> 00:01:14.100
You can think of it like English and Morse
Code.

00:01:14.100 --> 00:01:19.140
“Hello” and “.... . .-.. .-.. ---” mean
the same thing -- hello! -- they’re just

00:01:19.140 --> 00:01:20.570
encoded differently.

00:01:20.570 --> 00:01:23.500
English and Morse Code also have different
levels of complexity.

00:01:23.500 --> 00:01:28.080
English has 26 different letters in its alphabet
and way more possible sounds.

00:01:28.080 --> 00:01:29.710
Morse only has dots and dashes.

00:01:29.710 --> 00:01:33.900
But, they can convey the same information,
and computer languages are similar.

00:01:33.900 --> 00:01:37.570
As we've seen, computer hardware can only
handle raw, binary instructions.

00:01:37.570 --> 00:01:40.830
This is the “language” computer processors
natively speak.

00:01:40.830 --> 00:01:43.290
In fact, it’s the only language they’re
able to speak.

00:01:43.290 --> 00:01:45.900
It’s called Machine Language or Machine
Code.

00:01:45.900 --> 00:01:49.840
In the early days of computing, people had
to write entire programs in machine code.

00:01:49.850 --> 00:01:53.500
More specifically, they’d first write a
high-level version of a program on paper,

00:01:53.510 --> 00:01:55.510
in English, for example...

00:01:55.510 --> 00:01:59.310
“retrieve the next sale from memory, then
add this to the running total for the day,

00:01:59.310 --> 00:02:02.040
week and year, then calculate any tax to be
added”

00:02:02.040 --> 00:02:03.120
...and so on.

00:02:03.120 --> 00:02:06.680
An informal, high-level description of a program
like this is called Pseudo-Code.

00:02:06.680 --> 00:02:10.729
Then, when the program was all figured out
on paper, they’d painstakingly expand and

00:02:10.729 --> 00:02:15.110
translate it into binary machine code by hand,
using things like opcode tables.

00:02:15.110 --> 00:02:19.150
After the translation was complete, the program
could be fed into the computer and run.

00:02:19.150 --> 00:02:21.700
As you might imagine, people quickly got fed
up with this process.

00:02:21.700 --> 00:02:26.819
So, by the late 1940s and into the 50s, programmers
had developed slightly higher-level languages

00:02:26.820 --> 00:02:28.540
that were more human-readable.

00:02:28.540 --> 00:02:33.720
Opcodes were given simple names, called mnemonics,
which were followed by operands, to form instructions.

00:02:33.720 --> 00:02:37.760
So instead of having to write instructions
as a bunch of 1’s and 0’s, programmers

00:02:37.760 --> 00:02:40.240
could write something like “LOAD_A 14”.

00:02:40.240 --> 00:02:43.840
We used this mnemonic in Episode 8 because
it’s so much easier to understand!

00:02:43.840 --> 00:02:46.880
Of course, a CPU has no idea what “LOAD_A
14” is.

00:02:46.880 --> 00:02:49.510
It doesn’t understand text-based language,
only binary.

00:02:49.510 --> 00:02:51.419
And so programmers came up with a clever trick.

00:02:51.419 --> 00:02:56.330
They created reusable helper programs, in
binary, that read in text-based instructions,

00:02:56.330 --> 00:03:00.060
and assemble them into the corresponding binary
instructions automatically.

00:03:00.060 --> 00:03:02.909
This program is called -- you guessed it -- an
Assembler.

00:03:02.909 --> 00:03:07.020
It reads in a program written in an Assembly
Language and converts it to native machine

00:03:07.020 --> 00:03:07.520
code.

00:03:07.520 --> 00:03:10.500
“LOAD_A 14” is one example of an assembly
instruction.

00:03:10.500 --> 00:03:14.840
Over time, Assemblers gained new features
that made programming even easier.

00:03:14.840 --> 00:03:18.100
One nifty feature is automatically figuring
out JUMP addresses.

00:03:18.110 --> 00:03:22.279
This was an example program I used in episode
8:Notice how our JUMP NEGATIVE instruction

00:03:22.279 --> 00:03:25.700
jumps to address 5, and our regular JUMP goes
to address 2.

00:03:25.700 --> 00:03:29.459
The problem is, if we add more code to the
beginning of this program, all of the addresses

00:03:29.459 --> 00:03:30.459
would change.

00:03:30.459 --> 00:03:32.919
That’s a huge pain if you ever want to update
your program!

00:03:32.919 --> 00:03:37.139
And so an assembler does away with raw jump
addresses, and lets you insert little labels

00:03:37.139 --> 00:03:38.139
that can be jumped to.

00:03:38.139 --> 00:03:41.480
When this program is passed into the assembler,
it does the work of figuring out all of the

00:03:41.480 --> 00:03:42.699
jump addresses.

00:03:42.700 --> 00:03:46.320
Now the programmer can focus more on programming
and less on the underlying mechanics under

00:03:46.320 --> 00:03:51.480
the hood enabling more sophisticated things
to be built by hiding unnecessary complexity.

00:03:51.520 --> 00:03:55.279
As we’ve done many times in this series,
we’re once again moving up another level

00:03:55.279 --> 00:03:56.499
of abstraction.

00:03:56.500 --> 00:04:02.380
A NEW LEVEL OF ABSTRACTION!

00:04:02.380 --> 00:04:07.280
However, even with nifty assembler features
like auto-linking JUMPs to labels, Assembly

00:04:07.290 --> 00:04:09.769
Languages are still a thin veneer over machine
code.

00:04:09.769 --> 00:04:14.200
In general, each assembly language instruction
converts directly to a corresponding machine

00:04:14.200 --> 00:04:18.840
instruction – a one-to-one mapping – so
it’s inherently tied to the underlying hardware.

00:04:18.840 --> 00:04:22.400
And the assembler still forces programmers
to think about which registers and memory

00:04:22.400 --> 00:04:24.139
locations they will use.

00:04:24.139 --> 00:04:27.810
If you suddenly needed an extra value, you
might have to change a lot of code to fit

00:04:27.810 --> 00:04:28.810
it in.

00:04:28.810 --> 00:04:29.909
Let’s go to the Thought Bubble.

00:04:29.909 --> 00:04:32.360
This problem did not escape Dr. Grace Hopper.

00:04:32.360 --> 00:04:37.060
As a US naval officer, she was one of the
first programmers on the Harvard Mark 1 computer,

00:04:37.060 --> 00:04:38.800
which we talked about in Episode 2.

00:04:38.800 --> 00:04:44.120
This was a colossal, electro-mechanical beast completed in 1944 as part of the allied war effort.

00:04:44.160 --> 00:04:47.480
Programs were stored and fed into the computer
on punched paper tape.

00:04:47.480 --> 00:04:51.840
By the way, as you can see, they “patched”
some bugs in this program by literally putting

00:04:51.840 --> 00:04:54.560
patches of paper over the holes on the punch
tape.

00:04:54.560 --> 00:04:58.870
The Mark 1’s instruction set was so primitive,
there weren’t even JUMP instructions.

00:04:58.870 --> 00:05:02.889
To create code that repeated the same operation
multiple times, you’d tape the two ends

00:05:02.889 --> 00:05:05.830
of the punched tape together, creating a physical
loop.

00:05:05.830 --> 00:05:08.910
In other words, programming the Mark 1 was
kind of a nightmare!

00:05:08.910 --> 00:05:12.169
After the war, Hopper continued to work at
the forefront of computing.

00:05:12.169 --> 00:05:15.770
To unleash the potential of computers, she
designed a high-level programming language

00:05:15.770 --> 00:05:19.580
called “Arithmetic Language Version 0”,
or A-0 for short.

00:05:19.580 --> 00:05:23.380
Assembly languages have direct, one-to-one
mapping to machine instructions.

00:05:23.389 --> 00:05:27.580
But, a single line of a high-level programming
language might result in dozens of instructions

00:05:27.590 --> 00:05:29.419
being executed by the CPU.

00:05:29.419 --> 00:05:34.060
To perform this complex translation, Hopper
built the first compiler in 1952.

00:05:34.060 --> 00:05:38.409
This is a specialized program that transforms
“source” code written in a programming

00:05:38.409 --> 00:05:42.750
language into a low-level language, like assembly
or the binary “machine code” that the

00:05:42.750 --> 00:05:44.410
CPU can directly process.

00:05:44.410 --> 00:05:45.720
Thanks, Thought Bubble.

00:05:45.720 --> 00:05:50.430
So, despite the promise of easier programming,
many people were skeptical of Hopper’s idea.

00:05:50.430 --> 00:05:54.000
She once said, “I had a running compiler
and nobody would touch it.

00:05:54.000 --> 00:05:58.120
… they carefully told me, computers could
only do arithmetic; they could not do programs.”

00:05:58.120 --> 00:06:03.080
But the idea was a good one, and soon many
efforts were underway to craft new programming

00:06:03.080 --> 00:06:04.970
languages -- today there are hundreds!

00:06:04.970 --> 00:06:09.520
Sadly, there are no surviving examples of
A-0 code, so we’ll use Python, a modern

00:06:09.520 --> 00:06:10.960
programming language, as an example.

00:06:10.960 --> 00:06:14.260
Let’s say we want to add two numbers and
save that value.

00:06:14.260 --> 00:06:18.320
Remember, in assembly code, we had to fetch
values from memory, deal with registers, and

00:06:18.320 --> 00:06:19.320
other low-level details.

00:06:19.320 --> 00:06:22.219
But this same program can be written in python
like so:

00:06:22.219 --> 00:06:25.940
Notice how there are no registers or memory
locations to deal with -- the compiler takes

00:06:25.940 --> 00:06:29.970
care of that stuff, abstracting away a lot
of low-level and unnecessary complexity.

00:06:29.970 --> 00:06:34.599
The programmer just creates abstractions for
needed memory locations, known as variables,

00:06:34.599 --> 00:06:35.669
and gives them names.

00:06:35.669 --> 00:06:40.370
So now we can just take our two numbers, store
them in variables we give names to -- in this

00:06:40.370 --> 00:06:45.110
case, I picked a and b but those variables
could be anything - and then add those together,

00:06:45.110 --> 00:06:47.770
saving the result in c, another variable I
created.

00:06:47.770 --> 00:06:52.060
It might be that the compiler assigns Register
A under the hood to store the value in a,

00:06:52.060 --> 00:06:54.490
but I don’t need to know about it!

00:06:54.490 --> 00:06:55.629
Out of sight, out of mind!

00:06:55.629 --> 00:07:01.020
It was an important historical milestone,
but A-0 and its later variants weren’t widely used.

00:07:01.120 --> 00:07:06.100
FORTRAN, derived from "Formula Translation",
was released by IBM a few years later, in

00:07:06.100 --> 00:07:08.900
1957, and came to dominate early computer
programming.

00:07:08.919 --> 00:07:12.949
John Backus, the FORTRAN project director,
said: "Much of my work has come from being

00:07:12.949 --> 00:07:13.949
lazy.

00:07:13.949 --> 00:07:17.760
I didn't like writing programs, and so ... I
started work on a programming system to make

00:07:17.760 --> 00:07:19.419
it easier to write programs."

00:07:19.419 --> 00:07:21.030
You know, typical lazy person.

00:07:21.030 --> 00:07:23.550
They’re always creating their own programming
systems.

00:07:23.550 --> 00:07:27.919
Anyway, on average, programs written in FORTRAN
were 20 times shorter than equivalent handwritten

00:07:27.919 --> 00:07:28.919
assembly code.

00:07:28.919 --> 00:07:32.949
Then the FORTRAN Compiler would translate
and expand that into native machine code.

00:07:32.949 --> 00:07:36.740
The community was skeptical that the performance
would be as good as hand written code, but

00:07:36.740 --> 00:07:40.469
the fact that programmers could write more
code more quickly, made it an easy choice

00:07:40.469 --> 00:07:45.090
economically: trading a small increase in
computation time for a significant decrease

00:07:45.090 --> 00:07:46.219
in programmer time.

00:07:46.219 --> 00:07:50.259
Of course, IBM was in the business of selling
computers, and so initially, FORTRAN code

00:07:50.259 --> 00:07:53.039
could only be compiled and run on IBM computers.

00:07:53.039 --> 00:07:57.169
And most programing languages and compilers
of the 1950s could only run on a single type

00:07:57.169 --> 00:07:58.169
of computer.

00:07:58.169 --> 00:08:02.620
So, if you upgraded your computer, you’d
often have to re-write all the code too!

00:08:02.620 --> 00:08:06.249
In response, computer experts from industry,
academia and government formed a consortium

00:08:06.249 --> 00:08:12.110
in 1959 -- the Committee on Data Systems Languages,
advised by our friend Grace Hopper -- to guide

00:08:12.110 --> 00:08:15.999
the development of a common programming language
that could be used across different machines.

00:08:16.000 --> 00:08:20.460
The result was the high-level, easy to use,
Common Business-Oriented Language, or COBOL

00:08:20.460 --> 00:08:21.160
for short.

00:08:21.160 --> 00:08:24.840
To deal with different underlying hardware,
each computing architecture needed its own

00:08:24.960 --> 00:08:25.900
COBOL compiler.

00:08:25.900 --> 00:08:30.460
But critically, these compilers could all
accept the same COBOL source code, no matter

00:08:30.480 --> 00:08:31.800
what computer it was run on.

00:08:31.800 --> 00:08:33.890
This notion is called write once, run anywhere.

00:08:33.890 --> 00:08:37.960
It’s true of most programming languages
today, a benefit of moving away from assembly

00:08:37.960 --> 00:08:40.200
and machine code, which is still CPU specific.

00:08:40.200 --> 00:08:44.100
The biggest impact of all this was reducing
computing’s barrier to entry.

00:08:44.100 --> 00:08:48.780
Before high level programming languages existed,
it was a realm exclusive to computer experts

00:08:48.780 --> 00:08:49.780
and enthusiasts.

00:08:49.780 --> 00:08:51.820
And it was often their full time profession.

00:08:51.820 --> 00:08:56.840
But now, scientists, engineers, doctors, economists,
teachers, and many others could incorporate

00:08:56.850 --> 00:08:58.300
computation into their work .

00:08:58.300 --> 00:09:02.050
Thanks to these languages, computing went
from a cumbersome and esoteric discipline

00:09:02.050 --> 00:09:04.130
to a general purpose and accessible tool.

00:09:04.130 --> 00:09:08.990
At the same time, abstraction in programming
allowed those computer experts – now “professional

00:09:08.990 --> 00:09:12.880
programmers” – to create increasingly
sophisticated programs, which would have taken

00:09:12.880 --> 00:09:16.110
millions, tens of millions, or even more lines
of assembly code.

00:09:16.110 --> 00:09:18.480
Now, this history didn’t end in 1959.

00:09:18.480 --> 00:09:22.940
In fact, a golden era in programming language
design jump started, evolving in lockstep

00:09:22.940 --> 00:09:25.230
with dramatic advances in computer hardware.

00:09:25.230 --> 00:09:28.810
In the 1960s, we had languages like ALGOL,
LISP and BASIC.

00:09:28.810 --> 00:09:31.590
In the 70’s: Pascal, C and Smalltalk were
released.

00:09:31.590 --> 00:09:34.280
The 80s gave us C++, Objective-C, and Perl.

00:09:34.280 --> 00:09:36.650
And the 90’s: python, ruby, and Java.

00:09:36.650 --> 00:09:40.760
And the new millennium has seen the rise of
Swift, C#, and Go - not to be confused with

00:09:40.760 --> 00:09:42.650
Let it Go and Pokemon Go.

00:09:42.650 --> 00:09:45.940
Anyway, some of these might sound familiar
-- many are still around today.

00:09:45.940 --> 00:09:49.800
It’s extremely likely that the web browser
you’re using right now was written in C++

00:09:49.800 --> 00:09:50.800
or Objective-C.

00:09:50.800 --> 00:09:53.600
That list I just gave is the tip of the iceberg.

00:09:53.600 --> 00:09:56.540
And languages with fancy, new features are
proposed all the time.

00:09:56.540 --> 00:10:00.040
Each new language attempts to leverage new
and clever abstractions to make some aspect

00:10:00.050 --> 00:10:03.830
of programming easier or more powerful, or
take advantage of emerging technologies and

00:10:03.830 --> 00:10:07.700
platforms, so that more people can do more
amazing things, more quickly.

00:10:07.700 --> 00:10:10.690
Many consider the holy grail of programming
to be the use of “plain ol’ English”,

00:10:10.690 --> 00:10:14.670
where you can literally just speak what you
want the computer to do, it figures it out,

00:10:14.670 --> 00:10:15.670
and executes it.

00:10:15.670 --> 00:10:18.530
This kind of intelligent system is science
fiction… for now.

00:10:18.530 --> 00:10:21.990
And fans of 2001: A Space Odyssey may be okay
with that.

00:10:21.990 --> 00:10:25.370
Now that you know all about programming languages,
we’re going to deep dive for the next couple

00:10:25.370 --> 00:10:29.950
of episodes, and we’ll continue to build
your understanding of how programming languages,

00:10:29.950 --> 00:10:33.590
and the software they create, are used to
do cool and unbelievable things.

00:10:33.590 --> 00:10:34.790
See you next week.

00:10:34.790 --> 00:10:39.110
Hey guys, this week’s episode was brought
to you by CuriosityStream which is a streaming

00:10:39.110 --> 00:10:43.990
service full of documentaries and non­fiction
titles from some really great filmmakers,

00:10:43.990 --> 00:10:45.660
including exclusive originals.

00:10:45.660 --> 00:10:49.300
I just watched a great series called “Digits”
hosted by our friend Derek Muller.

00:10:49.300 --> 00:10:53.899
It’s all about the Internet - from its origins,
to the proliferation of the Internet of Things,

00:10:53.899 --> 00:10:55.990
to ethical, or white hat, hacking.

00:10:55.990 --> 00:11:00.330
And it even includes some special guest appearances…
like that John Green guy you keep mentioning

00:11:00.330 --> 00:11:01.420
in the comments.

00:11:01.420 --> 00:11:07.090
And Curiosity Stream offers unlimited access
starting at $2.99 a month, and for you guys,

00:11:07.090 --> 00:11:12.300
the first two months are free if you sign
up at curiositystream.com/crashcourse

00:11:12.320 --> 00:11:15.900
and use the promo code "crash course" during the sign-up process.

