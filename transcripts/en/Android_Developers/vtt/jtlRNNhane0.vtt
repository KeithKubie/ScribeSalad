WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.616
[MUSIC PLAYING]

00:00:01.616 --> 00:00:03.800
COLE MCCANDLESS:
Oh, AsyncTask, how

00:00:03.800 --> 00:00:06.560
we have a love/hate
relationship with you.

00:00:06.560 --> 00:00:08.330
On the one hand, you
make it really easy

00:00:08.330 --> 00:00:09.740
to get work off the main thread.

00:00:09.740 --> 00:00:11.656
But on the other hand,
you make it really easy

00:00:11.656 --> 00:00:14.017
to do a bunch of
really bad stuff.

00:00:14.017 --> 00:00:16.350
My name is Cole McCandless,
and while AsyncTask provides

00:00:16.350 --> 00:00:18.300
some easy interfaces,
if you're not careful,

00:00:18.300 --> 00:00:19.950
it can hurt your
app's performance

00:00:19.950 --> 00:00:22.080
and end up causing memory leaks.

00:00:22.080 --> 00:00:23.867
So here is a familiar situation.

00:00:23.867 --> 00:00:25.450
The user wipes the
screen, kicking off

00:00:25.450 --> 00:00:27.490
some bitmap decoding to occur.

00:00:27.490 --> 00:00:29.632
And because that work is
going to take a long time,

00:00:29.632 --> 00:00:31.340
you need to hand it
off to another thread

00:00:31.340 --> 00:00:33.496
so you don't cause hitching
in your animations.

00:00:33.496 --> 00:00:35.120
But once the bitmaps
have been decoded,

00:00:35.120 --> 00:00:37.110
you need to get them
back to the UI thread

00:00:37.110 --> 00:00:38.870
so that you can
update your views.

00:00:38.870 --> 00:00:40.781
If this happens a lot
in your application,

00:00:40.781 --> 00:00:42.780
then it's not worth writing
all the one-off code

00:00:42.780 --> 00:00:44.640
snippets to make this
happen the right way.

00:00:44.640 --> 00:00:47.220
This is exactly why
AsyncTask was created.

00:00:47.220 --> 00:00:49.870
It wraps up all of this
gnarliness with three

00:00:49.870 --> 00:00:51.370
simple function calls.

00:00:51.370 --> 00:00:53.381
Basically, the
OnPreExecute function

00:00:53.381 --> 00:00:55.630
will happen on the main
thread and allow you to set up

00:00:55.630 --> 00:00:57.070
the work you are about to do.

00:00:57.070 --> 00:00:59.630
Then the DoInBackground
function will execute on

00:00:59.630 --> 00:01:02.550
a worker thread, actually
doing the computation.

00:01:02.550 --> 00:01:04.650
And finally,
OnPostExecute is called

00:01:04.650 --> 00:01:06.900
on the main thread, along
with the results of the work

00:01:06.900 --> 00:01:08.130
that you've just completed.

00:01:08.130 --> 00:01:10.480
Simply overload these three
functions in your own class,

00:01:10.480 --> 00:01:12.550
and AsyncTask will do the rest.

00:01:12.550 --> 00:01:15.250
Now, while this seems
like an ideal solution,

00:01:15.250 --> 00:01:16.470
you need to be cautious.

00:01:16.470 --> 00:01:18.600
There are some
nuances with AsyncTask

00:01:18.600 --> 00:01:20.070
that can get you into trouble.

00:01:20.070 --> 00:01:22.530
Firstly, all AsyncTasks
that are created

00:01:22.530 --> 00:01:24.840
will share the same
thread and thus will

00:01:24.840 --> 00:01:28.660
execute in a serial fashion
from a single message queue.

00:01:28.660 --> 00:01:30.240
So if you kick
off 20 work orders

00:01:30.240 --> 00:01:32.520
and the third one takes
an hour, the other 17

00:01:32.520 --> 00:01:34.490
will block and wait
until it's done.

00:01:34.490 --> 00:01:36.770
This is especially
dangerous if you kick off

00:01:36.770 --> 00:01:39.910
some work that's got a long
running while loop in it.

00:01:39.910 --> 00:01:41.870
Basically, it'll just
freeze that thread

00:01:41.870 --> 00:01:43.810
from doing any future work.

00:01:43.810 --> 00:01:46.360
Now, to be fair, there is a way
to force AsyncTask to execute

00:01:46.360 --> 00:01:47.870
in a thread-pooled fashion.

00:01:47.870 --> 00:01:50.290
But in reality, if you're
venturing into that area,

00:01:50.290 --> 00:01:52.873
you might just want to use the
thread pool primitive directly,

00:01:52.873 --> 00:01:55.100
instead of all that madness.

00:01:55.100 --> 00:01:56.900
Anyhow, the second
big problem might

00:01:56.900 --> 00:01:59.040
be a little bit more
familiar; how do you actually

00:01:59.040 --> 00:02:00.530
cancel a block of work?

00:02:00.530 --> 00:02:03.690
I mean, AsyncTask has this
handy Cancel function,

00:02:03.690 --> 00:02:05.240
but what does that really do?

00:02:05.240 --> 00:02:07.140
Well, remember that
threads don't directly

00:02:07.140 --> 00:02:10.100
contain the ability to
interrupt the current code being

00:02:10.100 --> 00:02:10.870
executed.

00:02:10.870 --> 00:02:12.640
If you want a
threaded block of work

00:02:12.640 --> 00:02:16.230
to be able to terminate early,
you have to do two things.

00:02:16.230 --> 00:02:17.940
Number one, add
some logic to check

00:02:17.940 --> 00:02:20.470
for a flag that says the
work has been canceled.

00:02:20.470 --> 00:02:23.260
And number two, once the
block of work is finished,

00:02:23.260 --> 00:02:25.800
let the other functions know
that this packet's results are

00:02:25.800 --> 00:02:26.480
invalid.

00:02:26.480 --> 00:02:29.550
And this is exactly what the
Cancel function in AsyncTask

00:02:29.550 --> 00:02:30.050
does.

00:02:30.050 --> 00:02:33.290
It will set a flag and allow the
IsCanceled function to return

00:02:33.290 --> 00:02:36.000
true so your code can
check that regularly

00:02:36.000 --> 00:02:37.810
to see if it should exit early.

00:02:37.810 --> 00:02:40.440
In addition, after doing
background returns,

00:02:40.440 --> 00:02:44.680
a canceled AsyncTask will call
on canceled on the UI thread

00:02:44.680 --> 00:02:47.380
instead of on PostExecute.

00:02:47.380 --> 00:02:49.190
This is so you can
properly update your UI

00:02:49.190 --> 00:02:51.830
or destroy specific memory
allocations that you might not

00:02:51.830 --> 00:02:53.480
need any more,
yadda, yadda, yadda.

00:02:53.480 --> 00:02:57.310
And finally, be aware that
it's really, really easy

00:02:57.310 --> 00:02:59.580
to leak memory with AsyncTask.

00:02:59.580 --> 00:03:02.680
Check out this very common
seen-all-the-time code pattern

00:03:02.680 --> 00:03:05.570
in Android apps, where
an AsyncTask is declared

00:03:05.570 --> 00:03:08.160
as an inner class
of some activity.

00:03:08.160 --> 00:03:10.290
This is a really big problem.

00:03:10.290 --> 00:03:12.880
Having AsyncTask declared
as an inner class

00:03:12.880 --> 00:03:16.350
creates an implicit reference
to the outer activity, which

00:03:16.350 --> 00:03:18.540
can then result in
leaked memory, which

00:03:18.540 --> 00:03:20.920
means it won't be destroyed
until the AsyncTask

00:03:20.920 --> 00:03:22.200
work completes.

00:03:22.200 --> 00:03:23.780
Obviously, this
is less than ideal

00:03:23.780 --> 00:03:25.570
if you're trying to
load a new activity

00:03:25.570 --> 00:03:28.150
and you still have several
destroyed activities in memory

00:03:28.150 --> 00:03:30.350
since their work
hasn't been completed.

00:03:30.350 --> 00:03:34.330
The gist here is that while
AsyncTask makes it really easy

00:03:34.330 --> 00:03:36.589
to move work off
the UI thread, it's

00:03:36.589 --> 00:03:37.880
far from being a silver bullet.

00:03:37.880 --> 00:03:39.030
So don't be afraid
to check out some

00:03:39.030 --> 00:03:41.090
of the other threading
primitives in Android

00:03:41.090 --> 00:03:43.900
in case you need a little
different use case.

00:03:43.900 --> 00:03:46.250
For example, HandlerThreads
are great when

00:03:46.250 --> 00:03:48.980
you need a dedicated thread
for callbacks to land on.

00:03:48.980 --> 00:03:50.540
ThreadPools work
best when you've

00:03:50.540 --> 00:03:53.330
got a mountain of small
work objects to do.

00:03:53.330 --> 00:03:56.610
And IntentServices are really
ideal for background tasks

00:03:56.610 --> 00:03:59.530
or when you need to get intent
work off of the UI thread.

00:03:59.530 --> 00:04:01.752
And see, that's the
whole thing when

00:04:01.752 --> 00:04:03.210
it comes to
performance coding; you

00:04:03.210 --> 00:04:05.150
have to understand enough
about the primitives to know

00:04:05.150 --> 00:04:07.560
how they might help you and
how they might hurt you.

00:04:07.560 --> 00:04:10.420
And if it's not working, move
on to a better pattern, which

00:04:10.420 --> 00:04:12.340
is why you should check out the
rest of the Android Performance

00:04:12.340 --> 00:04:13.006
Patterns videos.

00:04:13.006 --> 00:04:16.010
And don't forget to ask your
hard threading questions

00:04:16.010 --> 00:04:18.010
in the Google+
community as well.

00:04:18.010 --> 00:04:20.759
So keep calm, profile your
code, and always remember

00:04:20.759 --> 00:04:21.300
perf matters.

00:04:21.300 --> 00:04:26.450
[MUSIC PLAYING]

