WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.124
ANATOLY PULYAEVSKIY: Right.

00:00:01.124 --> 00:00:02.289
Hi, everyone.

00:00:02.289 --> 00:00:03.080
My name is Anatoly.

00:00:03.080 --> 00:00:07.250
And just a fun fact--

00:00:07.250 --> 00:00:11.210
I just double-checked the
list of all the talks in this

00:00:11.210 --> 00:00:14.210
conference, and it looks like
this one is the only one that

00:00:14.210 --> 00:00:17.695
has "server-side" in the title.

00:00:17.695 --> 00:00:21.500
[APPLAUSE]

00:00:21.500 --> 00:00:27.090
Just a precious five
minutes for server-side.

00:00:27.090 --> 00:00:29.900
So this is about
server-side Dart on NodeJS,

00:00:29.900 --> 00:00:34.350
or how people in
Portland like to say it,

00:00:34.350 --> 00:00:36.130
putting a bird on it.

00:00:36.130 --> 00:00:38.410
[LAUGHTER]

00:00:38.410 --> 00:00:42.340
So first of all, why NodeJS?

00:00:42.340 --> 00:00:44.090
Why not Dart VM?

00:00:44.090 --> 00:00:48.520
And as much as I like
Dart VM, the only place

00:00:48.520 --> 00:00:51.960
I can be sure it's always
installed on is on my laptop.

00:00:51.960 --> 00:00:54.190
That's not really anywhere yet.

00:00:54.190 --> 00:00:58.030
And on the contrary,
with NodeJS,

00:00:58.030 --> 00:01:02.020
you can actually see it
very much everywhere.

00:01:02.020 --> 00:01:06.100
For instance, in Firebase,
there is a good chance

00:01:06.100 --> 00:01:09.640
that some of you are going
to build a Flutter or web

00:01:09.640 --> 00:01:11.420
app that uses Firebase.

00:01:11.420 --> 00:01:15.400
And in Firebase, they
have this service

00:01:15.400 --> 00:01:18.230
called Firebase Functions.

00:01:18.230 --> 00:01:20.860
Have any one of you used it?

00:01:20.860 --> 00:01:22.550
All right, quite a few.

00:01:22.550 --> 00:01:24.610
So this is basically a
way to run your JavaScript

00:01:24.610 --> 00:01:27.310
in the cloud in a
JavaScript function.

00:01:27.310 --> 00:01:29.935
So why not try this
function in Dart,

00:01:29.935 --> 00:01:34.210
and compile it in JavaScript,
and run it in the cloud?

00:01:34.210 --> 00:01:38.840
Some other interesting
reasons would be code sharing,

00:01:38.840 --> 00:01:41.620
as was mentioned
many times before me,

00:01:41.620 --> 00:01:44.780
and cohering a
development environment.

00:01:44.780 --> 00:01:52.150
So what it means how to build
a Dart application for NodeJS?

00:01:52.150 --> 00:01:55.795
So it's basically very much,
how would you build it for web?

00:01:55.795 --> 00:01:58.120
It's basically, you
need some Dart code.

00:01:58.120 --> 00:02:01.300
Then you just add
some more Dart code

00:02:01.300 --> 00:02:03.900
in the form of JS bindings.

00:02:03.900 --> 00:02:06.460
And then you just
compile it with Dart2js

00:02:06.460 --> 00:02:08.080
and get a JavaScript file.

00:02:08.080 --> 00:02:09.789
And the only one
missing bit here

00:02:09.789 --> 00:02:15.460
is you just need a special
header, node_preamble.

00:02:15.460 --> 00:02:16.962
This is not my
creation, by the way.

00:02:16.962 --> 00:02:18.670
This package has been
around for a while.

00:02:18.670 --> 00:02:20.980
You just prepend
a special snippet

00:02:20.980 --> 00:02:25.510
in front of this JS file,
and it just works in Node.

00:02:25.510 --> 00:02:27.520
So what's possible?

00:02:27.520 --> 00:02:30.050
I have two demos today.

00:02:30.050 --> 00:02:33.070
One is the Firebase
Cloud Functions.

00:02:33.070 --> 00:02:38.540
And I just need to switch
to my code editor here.

00:02:38.540 --> 00:02:45.810
So this is an example HTTP
Firebase cloud function.

00:02:45.810 --> 00:02:48.140
Can you see this
code, by the way?

00:02:48.140 --> 00:02:49.706
Whoops.

00:02:49.706 --> 00:02:50.655
Is it better?

00:02:50.655 --> 00:02:51.280
AUDIENCE: Yeah.

00:02:51.280 --> 00:02:51.905
AUDIENCE: Yeah.

00:02:51.905 --> 00:02:54.250
ANATOLY PULYAEVSKIY:
OK, so I have a date

00:02:54.250 --> 00:02:58.510
function here, which is
an HTTP function that

00:02:58.510 --> 00:03:02.910
accepts incoming HTTP requests
and replies with some response

00:03:02.910 --> 00:03:03.870
to it.

00:03:03.870 --> 00:03:08.480
And the way you register it is
by using this built-in Firebase

00:03:08.480 --> 00:03:09.360
functions object.

00:03:09.360 --> 00:03:13.880
You set a key on it
with your function.

00:03:13.880 --> 00:03:16.280
Now, what you can
notice here is basically

00:03:16.280 --> 00:03:19.390
there is not much
about Node here.

00:03:19.390 --> 00:03:21.230
That's my preference.

00:03:21.230 --> 00:03:24.950
I don't like having require
calls in my Dart code.

00:03:24.950 --> 00:03:28.040
It's more like idiomatic Dart.

00:03:28.040 --> 00:03:30.350
And it actually works.

00:03:30.350 --> 00:03:33.160
I'm not going to go
through the deploy process

00:03:33.160 --> 00:03:34.660
here because it takes a while.

00:03:34.660 --> 00:03:37.030
But I have this link here.

00:03:37.030 --> 00:03:41.170
This is this same function
deployed to the cloud.

00:03:41.170 --> 00:03:43.670
It might take a while
first time to load.

00:03:43.670 --> 00:03:45.520
But this is it.

00:03:45.520 --> 00:03:48.310
And I'm refreshing it, and
it just shows me the date.

00:03:48.310 --> 00:03:52.160
I mean, this is an intentionally
very basic example.

00:03:52.160 --> 00:03:54.070
You can do quite a
bit more than that.

00:03:54.070 --> 00:03:56.710
You can store that data
in real-time database,

00:03:56.710 --> 00:04:00.520
in Fire Store, send push
notifications, whatever

00:04:00.520 --> 00:04:04.360
Firebase services
you want to use.

00:04:04.360 --> 00:04:07.370
The other example is
not about Firebase.

00:04:07.370 --> 00:04:10.000
It's just I wanted
to try and explore

00:04:10.000 --> 00:04:14.930
what else can we do with
this combination with Dart

00:04:14.930 --> 00:04:16.180
and NodeJS.

00:04:16.180 --> 00:04:20.440
And here's an example
script I have here.

00:04:20.440 --> 00:04:25.870
This is a very basic HTTP server
which is powered by Dart VM.

00:04:25.870 --> 00:04:26.760
Right?

00:04:26.760 --> 00:04:30.790
We bind to a host and port,
and we listen for requests,

00:04:30.790 --> 00:04:32.660
and we just return some--

00:04:32.660 --> 00:04:34.510
write some responses.

00:04:34.510 --> 00:04:38.740
And actually, here, I'm
using the HTTP package

00:04:38.740 --> 00:04:43.960
to call this same date function
in the cloud that I showed you.

00:04:43.960 --> 00:04:48.070
And it brings out the result.

00:04:48.070 --> 00:04:50.790
So I can actually run this code.

00:04:58.000 --> 00:05:00.700
And it shows me--
this is Dart VM.

00:05:00.700 --> 00:05:01.930
No surprises here.

00:05:01.930 --> 00:05:05.320
But what if we can do
this, something like this?

00:05:05.320 --> 00:05:09.004
We can just replace
Dart with Node here?

00:05:09.004 --> 00:05:10.420
Obviously, we
cannot do this here,

00:05:10.420 --> 00:05:16.040
but I can try and do it
a little bit differently.

00:05:16.040 --> 00:05:22.550
I just want to replace Dart
VM I/O with Node I/O. And here

00:05:22.550 --> 00:05:25.560
it would be the same--

00:05:30.063 --> 00:05:31.420
like this.

00:05:31.420 --> 00:05:35.560
Now we just need to
compile it with Pub.

00:05:39.190 --> 00:05:41.681
This is basically the
same Dart2js compilation.

00:05:53.225 --> 00:05:57.370
All right, so now
I'm using Node to run

00:05:57.370 --> 00:06:01.350
the same application that was
using the Dart I/O before.

00:06:06.980 --> 00:06:08.065
And as you see, it works.

00:06:08.065 --> 00:06:10.280
It basically uses
the same interfaces.

00:06:10.280 --> 00:06:13.556
[APPLAUSE]

00:06:13.556 --> 00:06:14.056
Thanks.

00:06:16.900 --> 00:06:20.290
So we can really get
a very Darty feel

00:06:20.290 --> 00:06:21.980
when working with NodeJS.

00:06:21.980 --> 00:06:23.520
That's what I
wanted to show you.

00:06:23.520 --> 00:06:24.420
Thanks.

00:06:24.420 --> 00:06:27.759
[APPLAUSE]

