WEBVTT
Kind: captions
Language: en

00:00:03.000 --> 00:00:04.080
&gt;&gt;Daniels Lee: Hello everybody.

00:00:04.080 --> 00:00:09.780
My name – well before we get started, I
just wanted to take a moment and as people

00:00:09.780 --> 00:00:13.450
are still filing in, I want to welcome everybody
to Google I O.

00:00:13.450 --> 00:00:21.430
This is our very first Geo session of I O
and so I feel very privileged to be up here.

00:00:21.430 --> 00:00:27.380
I'm very excited to deliver to you guys some
information about some really important stuff

00:00:27.380 --> 00:00:30.170
that's happening around our Google Maps API's.

00:00:30.170 --> 00:00:35.191
And this particular session is going to primarily
focus on giving you a lot of information and

00:00:35.191 --> 00:00:42.030
incentive and motivation to really start thinking
about migrating over your Version 2 map applications

00:00:42.030 --> 00:00:43.559
over to use Version 3.

00:00:43.559 --> 00:00:49.610
And I'm going to cover a lot of information
and topics around this.

00:00:49.610 --> 00:00:52.211
So my name is Daniels Lee.

00:00:52.211 --> 00:01:03.309
I work on the Developer Relations Team here
at Google and I'm one of the fortunate few

00:01:03.309 --> 00:01:16.360
who are happy to support our Google Maps API's
and this includes not just V-2 and V-3 but

00:01:16.360 --> 00:01:25.500
Flash and Static and Maps and our Geocoding
services as well.

00:01:25.500 --> 00:01:30.700
So before we begin, I do want to note and
I'm sure you guys may be aware of this – there

00:01:30.700 --> 00:01:43.520
was a slide that was displaying a link to
the Google Wave sessions for every session

00:01:43.520 --> 00:01:45.299
at I-O.

00:01:45.299 --> 00:01:59.180
So I would encourage you as the session goes
on to go ahead and you can open up your laptops

00:01:59.180 --> 00:02:11.790
and you can look at this wave and submit some
questions as we go along as you have them.

00:02:11.790 --> 00:02:22.520
There'll also be a live note taker which will
be taking place as I speak and so this is

00:02:22.520 --> 00:02:32.401
just a link that you guys can go to and feel
free to submit questions and I'll – at the

00:02:32.401 --> 00:02:44.989
end of the session, I'll be – I'll try to
be mindful of the time and, and answer them.

00:02:44.989 --> 00:02:46.599
[pause]

00:02:46.599 --> 00:02:51.400
What am I gonna talk about today?

00:02:51.400 --> 00:02:58.269
So here's some session – here's the agenda
for my session.

00:02:58.269 --> 00:03:04.910
So first I'm gonna talk about some session
goals.

00:03:04.910 --> 00:03:07.860
Why are we here?

00:03:07.860 --> 00:03:10.920
What are you here to learn?

00:03:10.920 --> 00:03:23.340
And what is some information that I want to
leave you with when you go?

00:03:23.340 --> 00:03:33.239
And then I want to dive into a brief – a
really brief summary of V2 because I think

00:03:33.239 --> 00:03:41.860
it's important to understand the contrast
and give perspective on why – what the differences

00:03:41.860 --> 00:03:45.599
are between V2 and V3.

00:03:45.599 --> 00:03:50.420
And then I'm gonna jump into V3.

00:03:50.420 --> 00:03:52.010
Why V3?

00:03:52.010 --> 00:03:55.970
Why did we build it?

00:03:55.970 --> 00:03:59.080
Why would you want to migrate?

00:03:59.080 --> 00:04:06.180
And then we'll go into some, some tips and
tricks and things to think of ahead of time

00:04:06.180 --> 00:04:08.010
to start this migration.

00:04:08.010 --> 00:04:22.570
And then the last portion of the, of the session
will be a little bit more of a technical dive

00:04:22.570 --> 00:04:32.759
into this and I'll show you some codes and
bits and some very specific parts which I

00:04:32.759 --> 00:04:37.090
think would help with the migration overall.

00:04:37.090 --> 00:04:46.530
So before I begin, I actually wanted to share
a quote that is actually meaningful to me

00:04:46.530 --> 00:04:59.180
and I think it's relative to this talk which
is, "Knowledge is the antidote to fear" and

00:04:59.180 --> 00:05:09.350
basically I think change can be scary and
anytime you upgrade from an old system to

00:05:09.350 --> 00:05:15.770
a new system, there can be – it can be a
little bit intimidating, right?

00:05:15.770 --> 00:05:32.539
There's a new software API, there's a new
API they have to learn or there's, there's

00:05:32.539 --> 00:05:40.669
things that may break along the way and, and
there's all this information you have to learn.

00:05:40.669 --> 00:05:51.690
So hopefully by providing you with a lot of
information and knowledge about this migration

00:05:51.690 --> 00:06:02.860
that it'll help remove some of this fear in
getting this process started.

00:06:02.860 --> 00:06:17.800
I think the hardest part is getting started
but I'm assuming by being here in this session,

00:06:17.800 --> 00:06:21.880
you've already sort of begun that process.

00:06:21.880 --> 00:06:24.389
So what are my session goals?

00:06:24.389 --> 00:06:33.740
I want to provide you guys with an incentive
to migrate, give you guys some advice and

00:06:33.740 --> 00:06:37.840
insight around how to migrate your version
2 apps over to V3.

00:06:37.840 --> 00:06:40.569
Start thinking about migration sooner rather
than later.

00:06:40.569 --> 00:06:46.270
It'll help save on development costs in the
future.

00:06:46.270 --> 00:06:54.090
If you have a very large V2 app already and
you're thinking about adding new features

00:06:54.090 --> 00:07:05.560
to it, you're, you're using that development
time to build those features for an API that,

00:07:05.560 --> 00:07:23.080
that is sort of an older system and you may
have to migrate later on anyway.

00:07:23.080 --> 00:07:28.800
So I want you to understand the benefits of,
of why you'd want to migrate.

00:07:28.800 --> 00:07:38.640
And lastly, I do want to reiterate what you,
what you guys want to expect – what do you

00:07:38.640 --> 00:07:42.810
expect to happen as you migrate?

00:07:42.810 --> 00:07:48.860
What are some of the challenges involved in
doing that?

00:07:48.860 --> 00:07:56.710
So again, just to reiterate why you'd want
to attend this session.

00:07:56.710 --> 00:08:08.030
I do want to make it clear that there are
some assumptions I have about the people who

00:08:08.030 --> 00:08:15.160
are attending this and I'm assuming you are
a V2 developer or at some point have used

00:08:15.160 --> 00:08:19.980
the Google Maps API's and you are familiar
with certain basic maps concepts like maps

00:08:19.980 --> 00:08:23.130
and overlays and controls and so forth.

00:08:23.130 --> 00:08:30.240
Anyone who's interested in building a map
application in the future or has that in mind,

00:08:30.240 --> 00:08:45.160
if you want to learn more about V3 and what
some of the differences are, you're all, you're

00:08:45.160 --> 00:08:51.360
all here for the right reasons then.

00:08:51.360 --> 00:08:59.510
Next I want to really quickly show up a Geo
landscape sort of diagram because I realize

00:08:59.510 --> 00:09:13.120
as our Google Maps, as Geo in general has
grown significantly over the past years or

00:09:13.120 --> 00:09:26.000
so at Google – at Developed Products, we've
begun to have so many that it's hard to keep

00:09:26.000 --> 00:09:27.610
track of.

00:09:27.610 --> 00:09:40.620
And so here's a diagram that just quickly
shows where the Maps API for V3 – where

00:09:40.620 --> 00:09:49.410
that sort of lies in correlation to all the
rest.

00:09:49.410 --> 00:09:50.410
[pause]

00:09:50.410 --> 00:09:51.410
Okay.

00:09:51.410 --> 00:09:56.570
So next moving on, I want to really briefly
go over a summary of V2.

00:09:56.570 --> 00:10:06.720
I'm assuming a lot of you already have experience
in working with V2 so I will try to make this

00:10:06.720 --> 00:10:17.589
quick but I do think it's important to go
over what things about V2 currently exist

00:10:17.589 --> 00:10:18.589
today.

00:10:18.589 --> 00:10:24.110
So V2 has a very strong browser support.

00:10:24.110 --> 00:10:31.500
It supports even older browsers such as IE6
and Firefox2 and even Safari3.

00:10:31.500 --> 00:10:35.200
It's got extremely strong developer community.

00:10:35.200 --> 00:10:46.880
We have over 350,000 active sites today which
is a true testament to how much [bad audio]

00:10:46.880 --> 00:10:49.900
the product really is.

00:10:49.900 --> 00:10:58.350
It's a core part, it's a core part of many
people's businesses, business models.

00:10:58.350 --> 00:11:04.220
In order to do that, V2 also has a versioning
system which allows you to specify a stable

00:11:04.220 --> 00:11:10.860
version if you want your app to continue – to
not really change much.

00:11:10.860 --> 00:11:22.170
But you can also choose to load in an experimental
version as well if you want to stay at the

00:11:22.170 --> 00:11:23.170
cutting edge and get these new features and
new bugs are getting fixed.

00:11:23.170 --> 00:11:29.310
V2 also has a bunch of utility libraries which
are all open sourced meaning anyone including

00:11:29.310 --> 00:11:30.780
you guys – anyone can contribute to this
project.

00:11:30.780 --> 00:11:40.900
And utility libraries are basically – essentially,
they are extensions of the core API – stuff

00:11:40.900 --> 00:11:54.630
that for a variety of reasons were not able
to be included in the core and, and people

00:11:54.630 --> 00:11:57.800
have built on top of that.

00:11:57.800 --> 00:12:06.839
There's different ways you can interact with
the UI and create in different ways.

00:12:06.839 --> 00:12:10.370
V2 also has a really strong developer community
like I said.

00:12:10.370 --> 00:12:20.410
We have about 43,000 members currently and
the developer community has some really, really

00:12:20.410 --> 00:12:32.250
advanced apps and API developers – people
who really have a lot of experience with mapping

00:12:32.250 --> 00:12:41.009
software in general and it's an incredibly,
incredibly great resource to have as a tech

00:12:41.009 --> 00:12:49.010
 – for technical support if you have questions
or there are certain discussions that you

00:12:49.010 --> 00:12:51.270
want to talk about.

00:12:51.270 --> 00:13:03.790
I would encourage everyone if you're not part
of that community yet – I would encourage

00:13:03.790 --> 00:13:11.370
you to go visit the groups on Groups dot Google
dot com.

00:13:11.370 --> 00:13:12.370
[pause]

00:13:12.370 --> 00:13:27.250
So really quickly I want to list out some
of the really big and core features of V2

00:13:27.250 --> 00:13:34.920
because that is probably one of its strongest
assets – it's get an incredibly strong feature

00:13:34.920 --> 00:13:36.399
set, right?

00:13:36.399 --> 00:13:49.910
So Google Maps API at V2 has Street View,
it has traffic overlays and has even a Google

00:13:49.910 --> 00:13:57.779
Earth Plug-in which allows users to view Google
Maps in 3D directly within a browser which

00:13:57.779 --> 00:13:59.920
is pretty incredible.

00:13:59.920 --> 00:14:13.170
In addition to these, you may be familiar
with all the other ones, right?

00:14:13.170 --> 00:14:23.760
So we have KML overlays and Tile Overlays
 – you can create a really customizable

00:14:23.760 --> 00:14:27.200
mapping experience for your users.

00:14:27.200 --> 00:14:38.440
If you have a website and your branding is
very important to you, you can re-brand the

00:14:38.440 --> 00:14:51.829
map and, and use custom markers and custom
controls to have it suit the same UI and stylize

00:14:51.829 --> 00:14:53.850
your website.

00:14:53.850 --> 00:15:06.430
One of the other main points I want to bring
up -- with V2, you can also monit—it also

00:15:06.430 --> 00:15:09.389
has monetization features.

00:15:09.389 --> 00:15:20.449
So if you wanted to have – you wanted to
generate revenue from your website which is

00:15:20.449 --> 00:15:27.380
drawing in a lot of traffic basically – you
got really good content on there.

00:15:27.380 --> 00:15:30.209
Users want to come back.

00:15:30.209 --> 00:15:40.519
You can monetize your map applications either
by using what we call GoogleBar or MapsAdUnit

00:15:40.519 --> 00:15:51.579
and it's basically displaying ads based on
search or based on content which your map

00:15:51.579 --> 00:15:55.269
view point is currently displaying.

00:15:55.269 --> 00:16:00.149
And the last big launch of V2 was aerial imagery.

00:16:00.149 --> 00:16:09.770
And this was – this sort of angled perspective
that you have instead of this bird's eye,

00:16:09.770 --> 00:16:11.079
top-down view of the map.

00:16:11.079 --> 00:16:13.829
So that was really cool.

00:16:13.829 --> 00:16:23.389
But you guys know this already.

00:16:23.389 --> 00:16:32.690
You guys already have experience using V2
so let's move on to why we're here.

00:16:32.690 --> 00:16:36.649
Let's talk about V3 a little bit.

00:16:36.649 --> 00:16:45.709
Before we start that off I wanted to show
really 2 demos.

00:16:45.709 --> 00:16:58.459
The first demo is more for you guys to explore
on your own.

00:16:58.459 --> 00:17:14.510
With mobile phones, one of the biggest reasons
why V2 was, was designed and released is to

00:17:14.510 --> 00:17:30.210
focus on mobile performance, to create a Maps
API that was fast and lightweight enough to

00:17:30.210 --> 00:17:34.450
be able to run well on mobile browsers.

00:17:34.450 --> 00:17:46.440
So you can load up those 2 links which basically
points to just a simple map – no features

00:17:46.440 --> 00:17:59.320
added to it and you can load that map on your
mobile phone and compare what the performance

00:17:59.320 --> 00:18:01.240
difference is like.

00:18:01.240 --> 00:18:10.850
Meanwhile, I'm gonna switch over to one of
my first demos which is basically displaying

00:18:10.850 --> 00:18:26.200
a – the performance of adding a bunch of
markers on using the V2 API and then I'm gonna

00:18:26.200 --> 00:18:37.050
compare that speed – how long that took
and compare that using the V3.

00:18:37.050 --> 00:18:51.260
So here's a map that has nothing on it yet
but if I can click on these links, then I

00:18:51.260 --> 00:18:59.250
can say load a hundred markers on it and I
can time that operation.

00:18:59.250 --> 00:19:06.789
You can see here that it takes about roughly
250 milliseconds to do that.

00:19:06.789 --> 00:19:09.580
There may be – that's kind of an estimate.

00:19:09.580 --> 00:19:16.419
If I move that up to 300, the time's gonna
get longer.

00:19:16.419 --> 00:19:26.540
And it's gonna get longer if I go 500 – takes
a little bit over a second, right.

00:19:26.540 --> 00:19:31.169
And I can go on to maybe 750, a thousand will
take probably significantly longer.

00:19:31.169 --> 00:19:36.390
So I guess I'll leave it at that.

00:19:36.390 --> 00:19:48.820
Seven hundred fifty markers – it took about
2.2 seconds to load on V2.

00:19:48.820 --> 00:19:59.530
If I switch over to V3 and I run the same
tests, you can already tell that the markers,

00:19:59.530 --> 00:20:06.200
the operation is taking much quicker – it's
taking less time for it to load.

00:20:06.200 --> 00:20:16.740
So if I load 500 markers, it's taking 700
milliseconds and if I go to that same stopping

00:20:16.740 --> 00:20:22.000
point – 750 – it takes roughly about 1.3
seconds in comparison.

00:20:22.000 --> 00:20:24.720
And contrast that to V2.

00:20:24.720 --> 00:20:34.220
So that's one sort of illustration of the
performance benefits that you'll have if you

00:20:34.220 --> 00:20:38.660
use V3 as an API instead of V2.

00:20:38.660 --> 00:20:47.450
This test also uses one of our utility libraries
which is called Market Clusterer because realistically

00:20:47.450 --> 00:21:06.670
when would you ever want to display a thousand
markers and if you are going to do that, I

00:21:06.670 --> 00:21:15.820
would probably encourage you guys to use some
sort of a clustering library.

00:21:15.820 --> 00:21:29.350
So I can enable clustering here and rerun
these, these tests and you can see that it's

00:21:29.350 --> 00:21:30.350
significantly faster.

00:21:30.350 --> 00:21:38.620
So this is one of the benefits of using a
clustering library for example which is a

00:21:38.620 --> 00:21:42.210
utility library and not part of the core.

00:21:42.210 --> 00:21:47.820
Again pointing out how useful they actually
are.

00:21:47.820 --> 00:21:56.490
So loading a thousand markers using a cluster
takes less than half of a second and that's

00:21:56.490 --> 00:21:57.790
in V2.

00:21:57.790 --> 00:22:04.290
In V3, it's – oh, let me enable Market Clusterer
first.

00:22:04.290 --> 00:22:11.080
So loading 500 – it's incredibly fast and
takes a fraction of a second compared to V2.

00:22:11.080 --> 00:22:18.799
So 380 milliseconds versus 30 – that's,
that's pretty significant.

00:22:18.799 --> 00:22:30.760
So going back – what are some of the problems
that, with V2 that I wanted to highlight?

00:22:30.760 --> 00:22:45.320
And I think the demo helped me lead up to
what we wanted to talk about – I wanted

00:22:45.320 --> 00:22:48.049
to talk about performance.

00:22:48.049 --> 00:23:01.450
Performance is one of the biggest reasons
why V2 exists today – what we really focused

00:23:01.450 --> 00:23:07.101
on when we rebuilt it from the ground up.

00:23:07.101 --> 00:23:12.929
And V2 is not really optimized for mobile.

00:23:12.929 --> 00:23:23.860
It's not optimized because we don't really
test fully in the browser, in mobile browsers

00:23:23.860 --> 00:23:25.309
for V2.

00:23:25.309 --> 00:23:33.730
It's not really meant to run in a mobile browser.

00:23:33.730 --> 00:23:44.850
You can but performance will be pretty slow.

00:23:44.850 --> 00:23:46.010
It's also got an older design.

00:23:46.010 --> 00:23:53.870
It has these obscure class names like GMap2
or GLatLng or GMarker which exist in the global

00:23:53.870 --> 00:23:55.279
name space.

00:23:55.279 --> 00:24:03.110
And one of the things you may have noticed
about V2 is that the Gmap 2 object is constantly

00:24:03.110 --> 00:24:14.840
growing or has grown to be extremely big and
it's this giant, giant object with all of

00:24:14.840 --> 00:24:16.961
these methods in it.

00:24:16.961 --> 00:24:33.320
So it's really bloated with these methods
and that's because of the architecture – the

00:24:33.320 --> 00:24:36.240
way V2 was designed.

00:24:36.240 --> 00:24:48.850
It also had larger Java script download sizes
and this, this impacts performance, right?

00:24:48.850 --> 00:24:58.390
This impacts – if you're on a – the difference
between downloading an 85K file or a bunch

00:24:58.390 --> 00:25:09.039
of files to initialize your map – that versus
let's say a 30K is going to be pretty significant

00:25:09.039 --> 00:25:15.919
when you're browsing on your mobile phone.

00:25:15.919 --> 00:25:32.860
And lastly the Maps API Version 2 also required
a Maps API key which was a unique key which

00:25:32.860 --> 00:25:39.210
is generated based on your domain.

00:25:39.210 --> 00:25:41.900
And I've had support issues with this.

00:25:41.900 --> 00:25:48.450
I've had people who had trouble identifying
what is the correct domain to generate against

00:25:48.450 --> 00:25:52.590
because they have sub-domains and like they
have questions.

00:25:52.590 --> 00:25:59.600
"If I generate from the parent, is that going
to traverse through and be valid for all domains

00:25:59.600 --> 00:26:00.600
beneath it?"

00:26:00.600 --> 00:26:06.620
So those are some of the things about V2 which
I think can be seen as problematic.

00:26:06.620 --> 00:26:14.419
And really quickly I want to show the performance
table chart which basically takes apart the

00:26:14.419 --> 00:26:17.700
initial download and it really is split up
into 3 files.

00:26:17.700 --> 00:26:30.170
It's the loader which then loads in a main
dot js which defines all of your core objects

00:26:30.170 --> 00:26:32.870
in the Maps API.

00:26:32.870 --> 00:26:37.390
And then it has the tiles.

00:26:37.390 --> 00:26:46.110
The tiles are the images that you see which
make up the visualization of the map.

00:26:46.110 --> 00:26:52.039
And in V2, it takes about, it's about 85K
in a Gzip file.

00:26:52.039 --> 00:27:03.340
So let's talk a little bit similarly about
V3 now and what V3 offers in contrast to V2.

00:27:03.340 --> 00:27:13.000
So V3 has mobile browser support meaning we
test, we rigorously test in every release

00:27:13.000 --> 00:27:26.510
that we have in V3 against popular mobile
browser phones which includes Android and

00:27:26.510 --> 00:27:27.510
IPhone.

00:27:27.510 --> 00:27:31.610
So V3 is very performance oriented.

00:27:31.610 --> 00:27:46.570
We're always thinking is this going to run
well in mobile and if not, how can we get

00:27:46.570 --> 00:27:48.029
it to be?

00:27:48.029 --> 00:27:49.640
So it's lightweight.

00:27:49.640 --> 00:28:03.340
It's got a smaller initial download size and
a lot of the ways that makes this, that makes

00:28:03.340 --> 00:28:09.240
this possible to improve the performance in
this way is because of the MVC architecture

00:28:09.240 --> 00:28:11.010
that, that V3 uses.

00:28:11.010 --> 00:28:18.020
M-V-C stands for Model View Controller and
it's a UI framework which really promotes

00:28:18.020 --> 00:28:24.190
and allows you to create a modular, more robose,
more robust design for an API.

00:28:24.190 --> 00:28:40.010
It's got a cleaner name space as well so you
don't have these obscure Gmap 2 objects anymore.

00:28:40.010 --> 00:28:53.350
You'll have a Google dot maps dot so-and-so
so your global name space will stay freer.

00:28:53.350 --> 00:29:04.480
And we also have new features and that are
exclusive to the V3 API which are not available

00:29:04.480 --> 00:29:05.649
in V2.

00:29:05.649 --> 00:29:10.790
And some of these are biking directions and
elevation service.

00:29:10.790 --> 00:29:11.870
Excuse me.

00:29:11.870 --> 00:29:19.840
So the same chart for V3 in terms of the initial
download size.

00:29:19.840 --> 00:29:26.690
You can see it's cut down from 85K to 30K.

00:29:26.690 --> 00:29:48.590
That's, that's about a third of the size that
it takes to initialize a map in V2 which,

00:29:48.590 --> 00:29:59.150
which is actually a significant difference
when you're browsing a map on your mobile

00:29:59.150 --> 00:30:00.150
phones.

00:30:00.150 --> 00:30:12.130
Part of how this is possible too with V3 talking
about the MVC architecture, making it more

00:30:12.130 --> 00:30:20.159
modular, you can actually have these features
that are loaded more incrementally.

00:30:20.159 --> 00:30:30.649
And they're loaded as they're needed so this
will help keep that initial download size

00:30:30.649 --> 00:30:32.049
really small.

00:30:32.049 --> 00:30:34.610
So looking back.

00:30:34.610 --> 00:30:45.190
I think it's been a really, really exciting,
exciting year for V3 and it's, it's experienced

00:30:45.190 --> 00:30:54.899
a tremendous, tremendous growth and is still
growing and has an incredible forward momentum

00:30:54.899 --> 00:31:19.799
right now which is why I think it's an extremely
exciting time for the V3 API.

00:31:19.799 --> 00:31:32.620
And I really do want to commend the API engineers
in Sydney for working to make this possible.

00:31:32.620 --> 00:31:40.309
They really cranked out a lot of features
in just over a year.

00:31:40.309 --> 00:31:53.210
V3 – Google had launched V3 into Code Labs
last year at Google I O in 2009 and since

00:31:53.210 --> 00:32:03.780
then, we've been moving this forward direction
to ultimately reach full feature parity with

00:32:03.780 --> 00:32:18.370
V2 – have every feature that's available
in V2 and make it available in V3 plus more.

00:32:18.370 --> 00:32:26.390
So the red highlighted features on this, this
diagram indicates the ones that are actually

00:32:26.390 --> 00:32:36.539
exclusive to V3 and are not available in V2
right now – so things like Elevation Service

00:32:36.539 --> 00:32:44.159
like I mentioned before and more recently
Bicycling Layers and Bicycling Directions.

00:32:44.159 --> 00:32:54.130
So these are some – this is just a really
cool way to just look back at a year and see

00:32:54.130 --> 00:32:58.940
the amount of progress that we made.

00:32:58.940 --> 00:33:10.049
And so you may be wondering – like what's
the next step?

00:33:10.049 --> 00:33:16.320
What is the next step from here?

00:33:16.320 --> 00:33:26.059
I have a really, really important announcement
to make and it's an extremely exciting announcement.

00:33:26.059 --> 00:33:31.090
And I'm dying to tell everybody about it.

00:33:31.090 --> 00:33:43.090
So I'm really happy and I feel privileged
to be able to tell all you guys about it and

00:33:43.090 --> 00:33:45.900
maybe you can guess what that is.

00:33:45.900 --> 00:33:49.630
But yeah, we even have shirts, right?

00:33:49.630 --> 00:33:51.230
[audience voice] [inaudible]

00:33:51.230 --> 00:33:52.230
Yeah.

00:33:52.230 --> 00:34:03.670
So as you may have guessed – Google Maps
 – the Version 3 of Google Maps API is graduating

00:34:03.670 --> 00:34:06.840
from Google Code Labs.

00:34:06.840 --> 00:34:09.220
This is huge.

00:34:09.220 --> 00:34:11.599
This is huge.

00:34:11.599 --> 00:34:12.599
[applause]

00:34:12.599 --> 00:34:24.720
We have our engineers over there and really
want to commend them on, on the incredible

00:34:24.720 --> 00:34:33.460
work that they've done over the past year
to make this possible.

00:34:33.460 --> 00:34:34.829
So what does this mean?

00:34:34.829 --> 00:34:46.240
If you're not familiar with Google Code Labs,
Google Code Labs is basically a developer

00:34:46.240 --> 00:34:52.240
market, a developer place where we can – it
allows Google to put up developer products

00:34:52.240 --> 00:35:05.500
that are still early, that are still in their
early stages of development – so not ready

00:35:05.500 --> 00:35:06.960
for full usage yet.

00:35:06.960 --> 00:35:08.800
It's a place for innovation.

00:35:08.800 --> 00:35:17.800
It's great for both Google engineers and for
you, external developers, because it allows

00:35:17.800 --> 00:35:27.380
you to really test out these new and amazing
technologies that people have these ideas

00:35:27.380 --> 00:35:36.310
for and allow to, allow you guys to experiment
with it.

00:35:36.310 --> 00:35:44.800
So what is significant, what are some of the
changes that's gonna happen?

00:35:44.800 --> 00:35:46.060
How's this gonna impact V3?

00:35:46.060 --> 00:35:50.240
Well, there's a lot of really good stuff here.

00:35:50.240 --> 00:35:58.430
Because V3 has now graduated from Labs, it
shows a long term commitment for this product.

00:35:58.430 --> 00:36:06.609
We have a really dedicated team, an amazing
team, a very bright, innovative team that

00:36:06.609 --> 00:36:16.079
has a lot of focus that will be moving all
that focus to making V3 be even better.

00:36:16.079 --> 00:36:20.160
So there's going to be increased attention
and support for this product.

00:36:20.160 --> 00:36:27.140
We've also reorganized and revamped our documentation
to reflect these changes and which you will

00:36:27.140 --> 00:36:28.800
be able to see.

00:36:28.800 --> 00:36:31.900
It should be up by the end of the day.

00:36:31.900 --> 00:36:37.460
And we will also be including a new versioning
system because how can you have a full product

00:36:37.460 --> 00:36:42.740
if you don't allow people to view the stable
version of it.

00:36:42.740 --> 00:36:43.740
And so this is going to be our primary Maps
APIs from now on.

00:36:43.740 --> 00:36:56.440
Also, it's kind of bittersweet but this also
means that V2 is going to be deprecated.

00:36:56.440 --> 00:37:05.540
Now what does it mean for V2 to be deprecated?
Well it's not going anywhere.

00:37:05.540 --> 00:37:09.920
Your V2 apps are still going to be, be working,
right?

00:37:09.920 --> 00:37:12.309
So we have a deprecation policy.

00:37:12.309 --> 00:37:18.050
It will be working for at least the next 3
years.

00:37:18.050 --> 00:37:22.970
And what kind of support will we have for
it?

00:37:22.970 --> 00:37:31.540
Well, we'll definitely gonna be continuing
to fix bugs as they come up but we won't be

00:37:31.540 --> 00:37:41.930
introducing any new features in V2 and you
may have already noticed a slower growth that

00:37:41.930 --> 00:37:57.200
V3 has been launching new features – it's
been on this upward curve and V2 has been

00:37:57.200 --> 00:38:01.430
kind of on a flat line.

00:38:01.430 --> 00:38:08.220
And that's because the team's focus is gonna
be on V3 now.

00:38:08.220 --> 00:38:23.339
And one other thing you may have noticed – all
the Geo sessions here at Google I O this year

00:38:23.339 --> 00:38:26.950
will be focusing on V3.

00:38:26.950 --> 00:38:36.470
So there's lots more opportunities for you
guys to learn more information about this.

00:38:36.470 --> 00:38:49.320
But overall, this is a really, really exciting
announcement and happy to share with all of

00:38:49.320 --> 00:38:50.320
you.

00:38:50.320 --> 00:38:59.200
Moving on to – so now you have reasons why,
you understand some of the incentives – clearly

00:38:59.200 --> 00:39:04.900
I've been, I've been talking a lot about performance.

00:39:04.900 --> 00:39:16.089
V3 is faster; it's more lightweight; it's
better for mobile and now it's, it's out of

00:39:16.089 --> 00:39:34.079
Google code labs and so really, really there's
no time better than now to start migrating

00:39:34.079 --> 00:39:36.560
your apps.

00:39:36.560 --> 00:39:46.770
And so let's look at some of the V3 features
that currently exist today.

00:39:46.770 --> 00:39:50.130
Well talking about browser support.

00:39:50.130 --> 00:39:58.869
V3 supports all the major browsers but it
also includes mobile browsers, right?

00:39:58.869 --> 00:39:59.910
It includes Android for example.

00:39:59.910 --> 00:40:06.790
You'll notice that we don't have IE6 and Firefox2
or Safari3 on this list which doesn't mean

00:40:06.790 --> 00:40:12.109
it won't work or it'll stop working.

00:40:12.109 --> 00:40:23.930
It just means we'll be focusing most of our
support towards these major browsers and we'll

00:40:23.930 --> 00:40:37.230
try our best to make it work in IE6 as well
but there are some things about just technology

00:40:37.230 --> 00:40:48.020
in general where you kind of have to draw
a line at some point.

00:40:48.020 --> 00:40:54.220
In terms of the versioning scheme, if you
want to learn more about the versioning scheme,

00:40:54.220 --> 00:41:02.390
there's, there's more of this on the documentation
which will be published by the end of today.

00:41:02.390 --> 00:41:15.670
But basically you'll be able to specify similarly
to V2 a way to get the bleeding edge, the

00:41:15.670 --> 00:41:24.390
latest version that's currently been released
which includes the latest bug fixes and the

00:41:24.390 --> 00:41:31.790
latest feature releases but it's going to
be more experimental, right?

00:41:31.790 --> 00:41:37.440
It's going to be – it might have more bugs
in it.

00:41:37.440 --> 00:41:42.110
Your application may not always work or may
break something.

00:41:42.110 --> 00:41:50.150
We might have regression bugs but it will
also give you the ability to specify an older

00:41:50.150 --> 00:42:00.589
version if you do want a more frozen version
that changes less frequently.

00:42:00.589 --> 00:42:10.569
V3 also has a growing utility library – Open
Source Project – similar to V2 and we are

00:42:10.569 --> 00:42:18.300
 -- expect this to grow much more over the
next few months.

00:42:18.300 --> 00:42:34.370
There's going to be a lot more features that
we're going to try to push out to this.

00:42:34.370 --> 00:42:46.100
So lastly, there's a developer community which
is also growing rapidly in my opinion and

00:42:46.100 --> 00:42:51.140
it currently has 15,000 members today.

00:42:51.140 --> 00:42:58.060
And so i you guys are not part of that, I
would also encourage you guys to please join

00:42:58.060 --> 00:42:59.060
as well.

00:42:59.060 --> 00:43:12.270
Some of the, what are some of the features
that V3 has?

00:43:12.270 --> 00:43:22.460
Well, we're almost – I wouldn't say we were
100% full feature parity up but we're really

00:43:22.460 --> 00:43:23.460
close.

00:43:23.460 --> 00:43:24.460
We're almost there.

00:43:24.460 --> 00:43:31.060
We have a lot of all the big features that
have been carried over from V2.

00:43:31.060 --> 00:43:33.770
So things like markers and overlays and custom
controls, and, and custom map types.

00:43:33.770 --> 00:43:38.080
We have a client site Geo coder, a Direction
Service.

00:43:38.080 --> 00:43:46.690
We have all the stuff that's already, that
has been ported over from V2 and in that porting

00:43:46.690 --> 00:43:57.390
over, we've also done a lot of redesign and
made it much more intuitive.

00:43:57.390 --> 00:44:05.869
We've really taken everything and sort of
took a step back.

00:44:05.869 --> 00:44:15.630
We redesigned it, reevaluated it, seen what
the use cases are and ported them over.

00:44:15.630 --> 00:44:25.300
So more recently we've also had a few more
launches with features which includes ground

00:44:25.300 --> 00:44:31.339
overlays, KML layers, GeoRSS feeds, and traffic
layers.

00:44:31.339 --> 00:44:52.800
And I talked about features that didn't exist
yet in V3 and these, some of these are bicycling

00:44:52.800 --> 00:44:54.500
layers.

00:44:54.500 --> 00:45:05.869
We have a new Elevation Service which allows
you to create elevation data on a map.

00:45:05.869 --> 00:45:20.300
We also have Rectangle and Circle overlays
which are not available in V2.

00:45:20.300 --> 00:45:27.109
And lastly, we have these things called MVC
objects and I'm going to be talking about

00:45:27.109 --> 00:45:36.819
this a little later on and what you can do
with them but it's a very powerful way to

00:45:36.819 --> 00:45:44.250
really create some very clean, efficient code
for your application.

00:45:44.250 --> 00:45:59.080
And so what are some of the challenges that
exist when you're trying to port over your,

00:45:59.080 --> 00:46:03.070
your V2 app over to V3?

00:46:03.070 --> 00:46:12.920
These are just some points I think in my experience
 – because I also as a developer had to

00:46:12.920 --> 00:46:23.589
learn the V3 API back at one point and I remember
some of the difficulties that I ran into.

00:46:23.589 --> 00:46:31.430
Well, obviously you are going to have feature
parity issues.

00:46:31.430 --> 00:46:34.510
We're, we're almost there.

00:46:34.510 --> 00:46:40.280
However, there are these very intricate use
cases that sometimes come up.

00:46:40.280 --> 00:46:47.990
People have found some very interesting ways
to use the V2 API and even in ways that it

00:46:47.990 --> 00:46:51.520
wasn't necessarily meant or designed to be
used.

00:46:51.520 --> 00:46:59.490
So one example is, a more recent example came
up as I was supporting someone on line in

00:46:59.490 --> 00:47:02.040
the, in the discussion group.

00:47:02.040 --> 00:47:12.670
He had an issue where he wanted – in V2,
he took a hybrid map type and applied – he

00:47:12.670 --> 00:47:15.619
wanted to apply an opaque background to it.

00:47:15.619 --> 00:47:24.680
He wanted to put a black or a white background
which created this really nice effect and

00:47:24.680 --> 00:47:31.309
it really highlighted the font, the, the full
color of the text that's being displayed.

00:47:31.309 --> 00:47:38.380
He wanted to do this in V3 but in V2 we gave
you direct access to these tile layers.

00:47:38.380 --> 00:47:47.411
So you can get the hybrid map type, access
the tile layer, change the background of it

00:47:47.411 --> 00:47:48.780
and so forth.

00:47:48.780 --> 00:47:52.599
But in V3, you don't, you don't, you don't
have this access yet.

00:47:52.599 --> 00:48:00.070
So there's interesting use cases like this
which sometimes come up and this will happen

00:48:00.070 --> 00:48:06.859
as you have more of these different things
that you're doing in your V2 app, right?

00:48:06.859 --> 00:48:10.190
So there'll be some of that.

00:48:10.190 --> 00:48:15.270
You guys already know about the syntactical
changes.

00:48:15.270 --> 00:48:19.310
There's basically a new Google dot Maps dot
Namespace and all the different class names

00:48:19.310 --> 00:48:20.800
is something that you're going to have to
learn.

00:48:20.800 --> 00:48:27.099
But this is something that's relatively easy
to pick up, right?

00:48:27.099 --> 00:48:34.270
It's just like sort of re-branding.

00:48:34.270 --> 00:48:38.160
It's learning how to call certain functions
differently in V3.

00:48:38.160 --> 00:48:47.980
And the API reference on our documentation
is incredibly useful for this.

00:48:47.980 --> 00:48:58.950
And one thing I wanted to reiterate is that
V3, with V3 – that many times you look at

00:48:58.950 --> 00:49:13.410
code and in V2, it is very easy to make a
lot with just a few lines of code.

00:49:13.410 --> 00:49:21.930
And in V3, it may initially seem like, well
I have so many more lines here.

00:49:21.930 --> 00:49:26.880
However, sometimes less code is not always
better, right?

00:49:26.880 --> 00:49:33.270
Sometimes you have more structure – and
your code is more readable and so it's designed

00:49:33.270 --> 00:49:35.810
in a better way.

00:49:35.810 --> 00:49:36.819
It's more robust.

00:49:36.819 --> 00:49:43.359
Another big change and a conceptual difference
which I think is really important to understand

00:49:43.359 --> 00:49:50.119
is how overlays work differently in V3 versus
how they used to work in V2.

00:49:50.119 --> 00:49:58.280
So overlays in V3 are basically – the way
it used to work in V2 you would have to have

00:49:58.280 --> 00:50:07.589
the map add every overlay onto itself so that's
why you have all these add functions within

00:50:07.589 --> 00:50:09.559
your map object.

00:50:09.559 --> 00:50:19.319
You have an add overlay, you have add control,
you have an add map type, right?

00:50:19.319 --> 00:50:26.340
And so every time you introduced a new feature
like this, that's why the map object had to

00:50:26.340 --> 00:50:31.630
get really big and so there's this conceptual
difference where in V3 your overlays are no

00:50:31.630 --> 00:50:41.360
longer being added to the map by the map – it's
adding themselves to the map.

00:50:41.360 --> 00:50:49.730
It's essentially binding itself to a map that
you give it.

00:50:49.730 --> 00:50:58.550
And so this, this, this prevents that problem
with your map object growing very big.

00:50:58.550 --> 00:51:10.060
The last 2 points I want to, that you may
notice is there's just some differences with

00:51:10.060 --> 00:51:16.780
the object specification request and response
specification in your Geo coding service,

00:51:16.780 --> 00:51:19.020
in your Direction Service.

00:51:19.020 --> 00:51:24.859
Elevation service is new so that's gonna be
a new topic.

00:51:24.859 --> 00:51:40.079
But for those 2, expect those to be slightly
different and you need – there will be some

00:51:40.079 --> 00:51:43.880
learning involved.

00:51:43.880 --> 00:51:53.020
So some things to really quickly think about
when you're trying to port over your V2 app.

00:51:53.020 --> 00:51:57.750
I think it's a great idea just to list out
whether in your head – probably better to

00:51:57.750 --> 00:52:05.490
write it down a list of what features – what
big features that it currently uses.

00:52:05.490 --> 00:52:08.810
Does it use street view?

00:52:08.810 --> 00:52:13.090
Does it use Direction Service?

00:52:13.090 --> 00:52:20.760
Does it use the Geo coding service?

00:52:20.760 --> 00:52:32.799
And then think about all your intricate use
cases and, and you're gonna have to find out

00:52:32.799 --> 00:52:36.839
 – is this possible in V3, right?

00:52:36.839 --> 00:52:40.890
Can I do this in V3?

00:52:40.890 --> 00:52:48.990
And if not, what are you going to, what can
you do about that?

00:52:48.990 --> 00:52:57.660
And this is, this is where I would encourage
you guys, well, if you don't see a feature

00:52:57.660 --> 00:53:06.619
that's currently available in V3, we would
not have as much of a tremendous growth rate

00:53:06.619 --> 00:53:15.369
as we've had over the last year if you guys
weren't as diligent about filing feature requests

00:53:15.369 --> 00:53:28.040
and filing these bugs in our issue tracker
to let us know what is not working, to let

00:53:28.040 --> 00:53:34.210
us know what features that you do want to
see.

00:53:34.210 --> 00:53:39.430
So that's very important for you guys to do.

00:53:39.430 --> 00:53:48.540
And then lastly, just take baby steps – start
with how you started building your V2 app.

00:53:48.540 --> 00:53:59.150
Start with a map, then add a marker, then
place an Info Window, add some Geo coding

00:53:59.150 --> 00:54:00.150
for example.

00:54:00.150 --> 00:54:07.680
So I talked about getting, filing feature
requests and bugs and I think these are probably

00:54:07.680 --> 00:54:25.670
going to be very important, 2 very important
places for you guys to know where to go.

00:54:25.670 --> 00:54:29.800
You need to know where to go to get help and
you need to know where to file these feature

00:54:29.800 --> 00:54:30.800
requests and bugs.

00:54:30.800 --> 00:54:32.940
So these are the 2 locations – they are
in our Google groups –our discussion group

00:54:32.940 --> 00:54:34.540
and our external issue tracker.

00:54:34.540 --> 00:54:35.540
Okay.

00:54:35.540 --> 00:54:38.460
So let's go into a little bit more technical
stuff.

00:54:38.460 --> 00:54:45.690
There is no way I am going to be able to cover
every intricate use case or every feature

00:54:45.690 --> 00:54:49.119
that we have in V3 in just one session.

00:54:49.119 --> 00:54:59.500
V3 is just too big and there's too many things
you can do with it.

00:54:59.500 --> 00:55:13.190
So I'm going to cover the ones that I think
are important to note and will help get you

00:55:13.190 --> 00:55:16.280
started on this process.

00:55:16.280 --> 00:55:17.930
Starting with the basics.

00:55:17.930 --> 00:55:19.291
V2 API required a maps API key for you to
use your map.

00:55:19.291 --> 00:55:20.291
V3 we got rid of this.

00:55:20.291 --> 00:55:21.291
We realized we don't need this.

00:55:21.291 --> 00:55:48.079
So in order to track usage for our services,
for our Geo coding for example, we use a client

00:55:48.079 --> 00:55:53.210
IP address now and we don't, we don't need
you to go onto a site and figure out what

00:55:53.210 --> 00:55:58.310
domain you have to use to generate this key
for.

00:55:58.310 --> 00:56:01.430
So this is really good.

00:56:01.430 --> 00:56:04.540
This is actually really useful.

00:56:04.540 --> 00:56:13.900
There are some cases that I've seen where
people want – people are hosting their map

00:56:13.900 --> 00:56:18.650
applications behind multiple domains and they
had to create this sort of Java script work

00:56:18.650 --> 00:56:29.260
around to detect the domain that it's being
loaded on and then dynamically load the correct

00:56:29.260 --> 00:56:30.260
API key, right?

00:56:30.260 --> 00:56:33.579
So you don't have any problems like that anymore
in V3.

00:56:33.579 --> 00:56:35.920
Second, I want to really briefly talk about
the sensor parameter.

00:56:35.920 --> 00:56:40.670
This comes up once in awhile in a discussion
group and that's why – where it stops people

00:56:40.670 --> 00:56:41.670
in its track.

00:56:41.670 --> 00:57:05.460
Well, in our documentation we have this snippet
which allows – you love to copy and paste

00:57:05.460 --> 00:57:08.350
but the sensor parameter, just make sure to
put in an actual value of either 'true' or

00:57:08.350 --> 00:57:17.640
'false' because if not, then your Java script
library is not going to load and your app,

00:57:17.640 --> 00:57:19.869
your objects will be undefined.

00:57:19.869 --> 00:57:23.760
So make sure to do that.

00:57:23.760 --> 00:57:24.760
Okay.

00:57:24.760 --> 00:57:27.650
Really quickly – or maybe not.

00:57:27.650 --> 00:57:35.380
Maybe you can take a moment and just try to
observe the difference here between V2 and

00:57:35.380 --> 00:57:38.170
V3 – what does the code look like?

00:57:38.170 --> 00:57:54.950
There's not so much of it here but this is
really all you need to display a simple map

00:57:54.950 --> 00:57:59.391
with nothing on it.

00:57:59.391 --> 00:58:01.880
Okay.

00:58:01.880 --> 00:58:16.330
What are some of the differences that you
may have noticed?

00:58:16.330 --> 00:58:22.530
So in V3, we have this options object – we
have an options specification which you'll

00:58:22.530 --> 00:58:33.510
see is commonly used everywhere in the V3
API, with a lot of objects, with our maps,

00:58:33.510 --> 00:58:35.330
with our markers, our Info Windows.

00:58:35.330 --> 00:58:47.049
With our [ ] Geo coding you're going to have
this constructor with this object that has

00:58:47.049 --> 00:58:56.619
a bunch of properties in it which will help
you, which will configure this object to do

00:58:56.619 --> 00:59:01.720
different things, initialize it with different,
with different values.

00:59:01.720 --> 00:59:06.760
So you'll expect to see that everywhere.

00:59:06.760 --> 00:59:11.369
It's also got the name space.

00:59:11.369 --> 00:59:19.660
It's got the google dot maps dot map object
instead of something like Gmap2 for example.

00:59:19.660 --> 00:59:23.490
And lastly, the 3 required properties to get
nothing but a simple map up is a mapTypeId

00:59:23.490 --> 00:59:26.990
which specifies your map type, a zoom level,
and a LatLng for your center point.

00:59:26.990 --> 00:59:27.990
[pause]

00:59:27.990 --> 00:59:28.990
Let's talk about overlays.

00:59:28.990 --> 00:59:31.880
I said overlays were conceptually kind of
different in V3 versus V2 and they are and

00:59:31.880 --> 00:59:36.480
I think it actually does make a lot of sense
and there are reasons why I also think it's

00:59:36.480 --> 00:59:37.480
a better design as well.

00:59:37.480 --> 00:59:38.480
So maps don't add overlays, right?

00:59:38.480 --> 00:59:39.480
Not in V3.

00:59:39.480 --> 00:59:40.530
The overlays are responsible for adding themselves
to the map.

00:59:40.530 --> 00:59:58.231
So they're going to bind themselves to the
map by calling this setMap function and in

00:59:58.231 --> 01:00:14.100
the set mapping, you're going to pass it the
map object that you want the marker to bind

01:00:14.100 --> 01:00:15.100
itself to.

01:00:15.100 --> 01:00:20.470
So this is just a really quick comparison
between what those functions – what were

01:00:20.470 --> 01:00:23.559
the two functions that you had to call in
V2 to add, add a marker overlay to a map,

01:00:23.559 --> 01:00:24.559
and then how does that look in V3.

01:00:24.559 --> 01:00:25.750
The reason I have InfoWindow up here as well
is because in V3, InfoWindows are nothing

01:00:25.750 --> 01:00:30.700
more than, than lightweight overlays.

01:00:30.700 --> 01:00:40.540
Actually, they are overlays and I'll talk
about InfoWindows after this.

01:00:40.540 --> 01:00:43.339
And so that's why you see them here as well.

01:00:43.339 --> 01:00:56.450
So some of the, some of the things about overlays
before I show just a little snippet.

01:00:56.450 --> 01:00:57.450
Well, overlays help to keep the initial – well
because it's binding itself to the map, right,

01:00:57.450 --> 01:00:58.450
the map doesn't have to keep track of these
overlays and doesn't have to add more methods

01:00:58.450 --> 01:00:59.450
every time it adds a new feature like this.

01:00:59.450 --> 01:01:00.450
So it's better to keep the initial download
size – you can keep the core initial download

01:01:00.450 --> 01:01:02.201
size low which is in the end also great for
mobile.

01:01:02.201 --> 01:01:05.480
It's great for performance.

01:01:05.480 --> 01:01:11.500
So this is actually what – this is just
an actual example of what a code snippet looks

01:01:11.500 --> 01:01:22.640
like to add an overlay marker on to a map.

01:01:22.640 --> 01:01:27.810
And also how to open up an InfoWindow in a
map.

01:01:27.810 --> 01:01:34.120
As you can see in Version 2, that, the map
 – it's the map object which is calling

01:01:34.120 --> 01:01:35.460
an add overlay function or an open Info Window
function to open up these overlays onto itself.

01:01:35.460 --> 01:01:37.710
Whereas in V3, these markers are adding themselves
to the map and the Info Window is opening

01:01:37.710 --> 01:01:38.830
itself on to the map.

01:01:38.830 --> 01:01:43.420
Well you know how to add overlays now.

01:01:43.420 --> 01:01:45.849
How do you, how do you remove them?

01:01:45.849 --> 01:01:50.000
Removing them is, is essentially the same
concept as just calling the setMap function

01:01:50.000 --> 01:01:54.609
and unbinding it from the map that you had
binded it to previously.

01:01:54.609 --> 01:01:59.650
You can do that by calling a setMap and passing
a null or passing a nothing in there.

01:01:59.650 --> 01:02:01.210
And the Info Window has a close method as
you can here.

01:02:01.210 --> 01:02:03.289
There's one interesting, there's one interesting
challenge though that came up in V3 because

01:02:03.289 --> 01:02:07.840
the map no longer has a collection, right,
of overlay objects that it knows has been

01:02:07.840 --> 01:02:08.840
added onto itself because it's not doing the
work anymore.

01:02:08.840 --> 01:02:09.840
And so I challenge you guys.

01:02:09.840 --> 01:02:10.840
There's this problem, right?

01:02:10.840 --> 01:02:11.840
How do you remove all overlays from a map?

01:02:11.840 --> 01:02:12.840
In V2, you had this clear overlays function
which people used and people wanted so badly

01:02:12.840 --> 01:02:13.840
and they still want it.

01:02:13.840 --> 01:02:14.840
However, I do want to give you guys the answer
 – at least my answer which is pretty simple.

01:02:14.840 --> 01:02:15.840
Well you can maintain your own collection
of overlays, right?

01:02:15.840 --> 01:02:16.840
You guys, you know Java script.

01:02:16.840 --> 01:02:17.840
You can create a global object and every time
you add an overlay on to a map, you add it

01:02:17.840 --> 01:02:19.559
to the collection as well.

01:02:19.559 --> 01:02:25.740
So maintaining means every time you add it,
you push it on.

01:02:25.740 --> 01:02:29.680
Every time you remove it from the map, you
pop it off.

01:02:29.680 --> 01:02:41.359
So maintaining – there's a few steps that's
involved to maintain this collection and lastly,

01:02:41.359 --> 01:02:44.180
once you have this collection – well at
any moment, any user action, you can, you

01:02:44.180 --> 01:02:45.180
can just iterate through this collection,
go through every overlay, and then unbind

01:02:45.180 --> 01:02:46.180
every overlay from the map.

01:02:46.180 --> 01:02:47.180
And that's essentially what we're doing here.

01:02:47.180 --> 01:02:48.180
So you have an overlays collection which is
in the form of an array and it's sitting in

01:02:48.180 --> 01:02:49.180
the global name space so it's accessible anywhere.

01:02:49.180 --> 01:02:50.180
And as you add a marker, you're always pushing
a marker onto this collection.

01:02:50.180 --> 01:02:51.180
Once you have that collection, you can iterate
through it and then call setMap and set its

01:02:51.180 --> 01:02:52.180
map property to null.

01:02:52.180 --> 01:02:53.180
And that'll remove the overlay –all overlays
from the map.

01:02:53.180 --> 01:02:54.180
So talking really briefly, talking about Info
Windows quickly.

01:02:54.180 --> 01:02:55.180
I did want to show one example of – well,
here's an Info Window demo.

01:02:55.180 --> 01:02:56.180
It's not doing anything special here.

01:02:56.180 --> 01:02:57.180
Every time I register an event listener on
the map.

01:02:57.180 --> 01:02:58.180
So every time I click, it's going to create
an Info Window object and display it.

01:02:58.180 --> 01:02:59.180
You guys – this is familiar to you.

01:02:59.180 --> 01:03:00.180
You've seen this before in V2.

01:03:00.180 --> 01:03:01.180
What you haven't seen is this, though – right
 – where you can add an infinite number

01:03:01.180 --> 01:03:02.180
of Info Windows onto a map.

01:03:02.180 --> 01:03:03.180
In Version 2, you were limited to only have
one.

01:03:03.180 --> 01:03:04.180
And Info Windows are a much more heavyweight
object back then – or in V2.

01:03:04.180 --> 01:03:05.180
So Info Windows are essentially overlays in
V3 and they're lightweight; they're really

01:03:05.180 --> 01:03:06.180
fast and you can have more than one of them.

01:03:06.180 --> 01:03:07.180
However I've learned that sometimes too much
freedom is – can be overbearing and, and

01:03:07.180 --> 01:03:08.180
so we have this new problem.

01:03:08.180 --> 01:03:09.180
We have another problem here.

01:03:09.180 --> 01:03:10.180
Well what if I want only a single Info Window?

01:03:10.180 --> 01:03:11.180
And developers that come to us will be like,
'Wait. I didn't want this freedom. I only

01:03:11.180 --> 01:03:12.180
want one Info Window.'

01:03:12.180 --> 01:03:13.180
So how do you do this?

01:03:13.180 --> 01:03:14.180
Well similarly to our overlays thing – I
think it's somewhat similar.

01:03:14.180 --> 01:03:15.180
You can create a single Info Window object
which is accessible in the global name space

01:03:15.180 --> 01:03:16.180
and then every time you want to open up an
Info Window, you basically can just update

01:03:16.180 --> 01:03:17.180
 – that Info Window's position, its content
and then you can even update its, its map

01:03:17.180 --> 01:03:18.180
whichever map it's binded to.

01:03:18.180 --> 01:03:19.180
So if you have multiple maps, you can swap
them out very easily.

01:03:19.180 --> 01:03:20.180
So this is the answer to that problem.

01:03:20.180 --> 01:03:21.180
If you want one, if you only want one Info
Window, create only one Info Window object.

01:03:21.180 --> 01:03:22.180
The next thing I want to talk about is custom
controls really quick.

01:03:22.180 --> 01:03:23.180
So what's different about custom controls
and how can you create a custom control V3?

01:03:23.180 --> 01:03:24.180
How did you used to do it in V2?

01:03:24.180 --> 01:03:25.180
In V2, you had to extend – you had to, you
had to extend this G control class and do

01:03:25.180 --> 01:03:26.180
some things with that.

01:03:26.180 --> 01:03:27.180
In V3, it's much, much more simpler.

01:03:27.180 --> 01:03:28.180
In V3, it's basically – you're essentially
 – your custom control is essentially an

01:03:28.180 --> 01:03:29.180
HTML Element.

01:03:29.180 --> 01:03:30.180
So the document dot createElement – you're
just creating a 'div' element and that 'div'

01:03:30.180 --> 01:03:31.180
element is being placed into one of the control
positions on your map.

01:03:31.180 --> 01:03:32.180
So this is already a familiar concept to you
guys, right?

01:03:32.180 --> 01:03:33.180
Creating an HTML node and then setting poppies,
setting up in HTML, attaching some dom listeners.

01:03:33.180 --> 01:03:34.180
So here's an example where I create a – I'm
creating a home custom control button, right?

01:03:34.180 --> 01:03:35.180
So I'm just essentially, like I said before,
I'm creating a single Div element.

01:03:35.180 --> 01:03:36.180
And I'm giving it some text and then I'm also
registering a dom event listener that when

01:03:36.180 --> 01:03:37.180
I click on this div element, I want to set
the map center point to this home LatLng which

01:03:37.180 --> 01:03:38.180
is some base, some, some, some hard coded
position.

01:03:38.180 --> 01:03:39.180
In terms of positioning, so you have your
custom control created.

01:03:39.180 --> 01:03:40.559
Now you want to position it.

01:03:40.559 --> 01:03:44.589
Well, in V3, we don't really have a way for
you to absolutely position it anywhere although

01:03:44.589 --> 01:03:45.589
you could try doing it by setting your, your
coordinates in your Div element.

01:03:45.589 --> 01:03:46.589
But the way you do it with our API, well you
specify 2 things.

01:03:46.589 --> 01:03:47.589
You specify the control position and then
you specify the index.

01:03:47.589 --> 01:03:48.589
And so – the control position as you can
see in the diagram – there's different control

01:03:48.589 --> 01:03:49.589
positions on the map where you can lay out.

01:03:49.589 --> 01:03:50.589
There's these regions on the map which can
have these, these sets of controls.

01:03:50.589 --> 01:03:51.589
And so for example, in this one on the top
right control position, we already have our

01:03:51.589 --> 01:03:52.589
existing map type controls which is part of
the default map type which is one of our default

01:03:52.589 --> 01:03:53.589
controls.

01:03:53.589 --> 01:03:54.589
And so let's say you wanna, you wanna append
this home control there.

01:03:54.589 --> 01:03:55.589
And then you specify an index.

01:03:55.589 --> 01:03:56.589
You give the custom control an index.

01:03:56.589 --> 01:03:57.589
Do I want it to be slotted at the zero position
or do I want it to be slotted to the left

01:03:57.589 --> 01:03:58.589
after the existing control?

01:03:58.589 --> 01:03:59.589
And so that's what -- it's doing it over here.

01:03:59.589 --> 01:04:00.589
I'm placing my home button to the left of
my existing map type controls by setting its

01:04:00.589 --> 01:04:01.589
index property to 1.

01:04:01.589 --> 01:04:02.589
Next I want to talk about Directions.

01:04:02.589 --> 01:04:03.589
Directions were completely revamped and there
was a huge overhaul in the way Directions

01:04:03.589 --> 01:04:04.589
work in V3.

01:04:04.589 --> 01:04:05.589
And in my opinion, there's a lot more structure
and it may seem like it's a lot more than

01:04:05.589 --> 01:04:06.589
V2 but like I was saying before, sometimes
less code isn't more.

01:04:06.589 --> 01:04:07.589
It's, it's more intuitive and it separates
your data from your presentation.

01:04:07.589 --> 01:04:08.589
So here's how it was done in V2, right?

01:04:08.589 --> 01:04:09.589
We had – you could only assign Map or HTML
container only once per any GDirections object,

01:04:09.589 --> 01:04:10.589
right?

01:04:10.589 --> 01:04:11.589
And then there's this really long request
string which has actually multiple pieces

01:04:11.589 --> 01:04:12.589
of information in it, right?

01:04:12.589 --> 01:04:13.589
It has your, your from point, your, your origin
and then it has your destination all in one

01:04:13.589 --> 01:04:14.589
long string and that's just, that gets kind
of messy after awhile.

01:04:14.589 --> 01:04:15.589
And then lastly in order to know when your
Direction Service returns back with a result,

01:04:15.589 --> 01:04:16.589
you have to register an event listener that
listens to the subscure load event and that

01:04:16.589 --> 01:04:17.589
just didn't seem very intuitive.

01:04:17.589 --> 01:04:18.589
So in V3, we kind of redesigned everything
and we separated the various components of

01:04:18.589 --> 01:04:19.589
directions into classes and so now you have
an actual start and end point which are properties

01:04:19.589 --> 01:04:20.589
in object specification which you pass into
a constructor.

01:04:20.589 --> 01:04:21.589
It also separates data from rendering.

01:04:21.589 --> 01:04:22.589
We have 2 classes called Direction Service
and a Directions Renderer and one is simply

01:04:22.589 --> 01:04:23.589
responsible for fetching data back and forth
from our API back end servers and the other

01:04:23.589 --> 01:04:24.589
is responsible for taking that result and
then rendering it on a map or on the side

01:04:24.589 --> 01:04:25.589
of a map in an HTML container.

01:04:25.589 --> 01:04:26.589
So here's the really quick flow chart of what
a directions request – what that whole thing

01:04:26.589 --> 01:04:27.589
might look like, right?

01:04:27.589 --> 01:04:28.589
So we have this Direction Service object and
a Directions Renderer object.

01:04:28.589 --> 01:04:29.589
The service takes through various properties,
through an object, it's a directions request

01:04:29.589 --> 01:04:30.589
 – it has – the request object can have
your origin, your destination point.

01:04:30.589 --> 01:04:31.589
It can have your travel mode, your units and
so forth.

01:04:31.589 --> 01:04:32.589
And that's going to kick off a request off
to our back end servers.

01:04:32.589 --> 01:04:33.589
It's going to return back to you guys the
Directions Result object.

01:04:33.589 --> 01:04:34.589
There's a junction point at that point.

01:04:34.589 --> 01:04:35.589
With that result object, you can either choose
to parse it manually and go through – it's

01:04:35.589 --> 01:04:36.589
a Jayson object – you can go through and
iterate the results and the routes yourself.

01:04:36.589 --> 01:04:37.589
Or you can take that results object and say,
'You know what? I just want to put it on a

01:04:37.589 --> 01:04:38.589
map and show it.

01:04:38.589 --> 01:04:39.589
I want to give it to the Directions Renderer
object, pass it into there.

01:04:39.589 --> 01:04:40.589
And if you assign your Directions Renderer
object an HTML element, it'll generate this

01:04:40.589 --> 01:04:41.589
uniform UI – this list view of the directions.

01:04:41.589 --> 01:04:42.589
Or if you give it a map object, it'll do everything
and it'll add poly lines and it'll add Info

01:04:42.589 --> 01:04:43.589
Windows and add a marker for your start destination
point.

01:04:43.589 --> 01:04:44.589
It'll do all that for you.

01:04:44.589 --> 01:04:45.589
So that's what I mean when we separated the
data from the presentation.

01:04:45.589 --> 01:04:46.589
So here's a, here's a quick example of what
 - breaking down the steps even further – what

01:04:46.589 --> 01:04:47.589
that looks like.

01:04:47.589 --> 01:04:48.589
So here we have a Direction Service and you
can see the request options object is the

01:04:48.589 --> 01:04:49.589
options object which has a bunch of properties
that you can configure your Direction Service

01:04:49.589 --> 01:04:50.589
with.

01:04:50.589 --> 01:04:51.589
So this will include – like I said – your
origin, your destination, whether to avoid

01:04:51.589 --> 01:04:52.589
highways, if you want to avoid tolls.

01:04:52.589 --> 01:04:53.589
You can specify a region that you want to
search against.

01:04:53.589 --> 01:04:54.589
So you're passing that into Direction Service
and then you're calling this route function

01:04:54.589 --> 01:04:55.589
and route is going to kick off this request
to our back end.

01:04:55.589 --> 01:04:56.589
Back end is going to return back to you a
directions result object.

01:04:56.589 --> 01:04:57.589
With this result object, you can, like I said,
do 2 things.

01:04:57.589 --> 01:04:58.589
In this example, you're going to pass it into
the Directions Renderer object right?

01:04:58.589 --> 01:04:59.589
And then you're going to give, you're going
to assign the renderer a map to visualize

01:04:59.589 --> 01:05:00.589
this data on and you're going to assign it
an HTML container to visualize this data in

01:05:00.589 --> 01:05:01.589
a list form.

01:05:01.589 --> 01:05:02.589
And it's going to produce these results.

01:05:02.589 --> 01:05:03.589
The other option, like I said, you can parse
it manually, right?

01:05:03.589 --> 01:05:04.589
So let's say sometimes you don't want to,
you don't actually wanna, you just want to

01:05:04.589 --> 01:05:05.589
extract some, some information from that Directions
Result.

01:05:05.589 --> 01:05:06.589
So in this example, you can calculate for
example your first, your total distance of

01:05:06.589 --> 01:05:07.589
the very first route that's returned in your
Directions Request and this doesn't involve

01:05:07.589 --> 01:05:08.589
any UI at all.

01:05:08.589 --> 01:05:09.589
So this is just you retrieving certain data
from that result.

01:05:09.589 --> 01:05:10.589
[pause]

01:05:10.589 --> 01:05:11.589
Okay so the last topic that I wanted to talk
about is actually I think the most fascinating

01:05:11.589 --> 01:05:12.589
and interesting which is talking about MVC
objects and, and MVC framework and how you

01:05:12.589 --> 01:05:13.589
can utilize this to really empower your applications
to go beyond and, and write more efficient

01:05:13.589 --> 01:05:14.589
code.

01:05:14.589 --> 01:05:15.589
So MVC is a UI framework which allows you
to isolate data from your input and presentation,

01:05:15.589 --> 01:05:16.589
right?

01:05:16.589 --> 01:05:17.589
So when I'm talking about data, I'm talking
about like your map and markers but not your

01:05:17.589 --> 01:05:18.589
map, plotted on a map, right?

01:05:18.589 --> 01:05:19.589
So that's like your view and you have this
concept where you bind your data to your views

01:05:19.589 --> 01:05:20.589
and so forth.

01:05:20.589 --> 01:05:21.589
So really quickly, what are – there's a
lot of objects in V3 that are basically extensions

01:05:21.589 --> 01:05:22.589
of an MVC object.

01:05:22.589 --> 01:05:23.589
And what is the significance behind that?

01:05:23.589 --> 01:05:24.589
Well, if your object is an extension of MVC,
then it contains MVC properties which are

01:05:24.589 --> 01:05:25.589
bindable.

01:05:25.589 --> 01:05:26.589
What does it mean for a property to be bindable?

01:05:26.589 --> 01:05:27.589
Well, if you have 2 MVC objects that are binding
one property – it's binding one property

01:05:27.589 --> 01:05:28.589
of itself to the other MVC object property
 – any time one of the values – any time

01:05:28.589 --> 01:05:29.589
that property value changes, it's going to
automatically change the value of the other

01:05:29.589 --> 01:05:30.589
property – of any properties that are binded
to it.

01:05:30.589 --> 01:05:31.589
So, for example, if you have a marker and
it has a position property and you bind another

01:05:31.589 --> 01:05:32.589
marker's position property to that and you
update the very first marker's position, it's

01:05:32.589 --> 01:05:33.589
gonna, it's gonna update the second marker's
position as well.

01:05:33.589 --> 01:05:34.589
So that might not seem very useful but I'll
show you an example of some ways – some

01:05:34.589 --> 01:05:35.589
cool things you can do in MVC.

01:05:35.589 --> 01:05:36.589
[pause]

01:05:36.589 --> 01:05:37.589
So here's one example.

01:05:37.589 --> 01:05:38.589
Let's say you have a circle overlay that you
want to bind to a marker.

01:05:38.589 --> 01:05:39.589
And why would you want to do that?

01:05:39.589 --> 01:05:40.589
Well, a circle overlay isn't draggable but
you know a marker is, right?

01:05:40.589 --> 01:05:41.589
So if you want to make a draggable circle
for example, why not create a marker and then

01:05:41.589 --> 01:05:42.589
have the circle overlay bind its center points
to the marker's position?

01:05:42.589 --> 01:05:43.589
So anytime the marker's position gets updated,
the circle's centerpoint will automatically

01:05:43.589 --> 01:05:44.589
get updated with it, right?

01:05:44.589 --> 01:05:45.589
So the solution to this is, is to use an MVC
bind.

01:05:45.589 --> 01:05:46.589
You can imagine what this looks like without
MVC.

01:05:46.589 --> 01:05:47.589
You can do without it, right?

01:05:47.589 --> 01:05:48.589
You can register an event listener that listens
for a marker drag event and every time the

01:05:48.589 --> 01:05:49.589
marker gets dragged, you can update the circle
centerpoint.

01:05:49.589 --> 01:05:50.589
And you can do that like this.

01:05:50.589 --> 01:05:51.589
However, it's -- with MVC, all you need is
a single method, you need a single bind to

01:05:51.589 --> 01:05:52.589
which says 'I want to bind this circle's center
property to the marker's position property'

01:05:52.589 --> 01:05:53.589
and once you have that, I will show you what
this looks like.

01:05:53.589 --> 01:05:54.589
You have a circle that now, when you drag
the marker, the circle's centerpoint will,

01:05:54.589 --> 01:05:55.589
will be updated with it so you have this draggable
circle marker.

01:05:55.589 --> 01:05:56.589
And you can imagine some use case where you
can, you can create a radius search bounding

01:05:56.589 --> 01:05:57.589
box or something like that.

01:05:57.589 --> 01:05:58.589
And that's kind of useful with this.

01:05:58.589 --> 01:05:59.589
[pause]

01:05:59.589 --> 01:06:00.589
So that was the first demo.

01:06:00.589 --> 01:06:01.589
I did want to show another demo which I wrote
which included – I'm not sure there is a

01:06:01.589 --> 01:06:02.589
practical use case to it but it does show
a little bit more about what you can bind

01:06:02.589 --> 01:06:03.589
to and what are some of the effects you can
do, right?

01:06:03.589 --> 01:06:04.589
So here we have a normal map.

01:06:04.589 --> 01:06:05.589
And this map is highlighted – it's bordered
with red because I have a map here, I have

01:06:05.589 --> 01:06:06.589
a circle here and I have a marker here.

01:06:06.589 --> 01:06:07.589
And these are the head elements – head as
in the sense that I'm going to be adding new

01:06:07.589 --> 01:06:08.589
markers and I'm going to be binding those
markers to this head marker.

01:06:08.589 --> 01:06:09.589
Or I'm going to have new maps and then I'm
going to binding those maps to the head maps.

01:06:09.589 --> 01:06:10.589
So it's going to be following whatever this
is doing.

01:06:10.589 --> 01:06:11.589
So this is, this is nothing special.

01:06:11.589 --> 01:06:12.589
You can see a marker that's being dragged
around.

01:06:12.589 --> 01:06:13.589
If I add more circles, these are all draggable
as well.

01:06:13.589 --> 01:06:14.589
But it gets more interesting when I add more
maps to it, right?

01:06:14.589 --> 01:06:15.589
And in V3, I can add maps really quickly.

01:06:15.589 --> 01:06:16.589
So let's see.

01:06:16.589 --> 01:06:17.589
So within this map object, I'm – with every
map object that I create, I'm binding 3 things

01:06:17.589 --> 01:06:18.589
to each other.

01:06:18.589 --> 01:06:19.589
I'm binding 3 things to the head map.

01:06:19.589 --> 01:06:20.589
I'm binding the zoom level so that when I
change the zoom level on any of them, it's

01:06:20.589 --> 01:06:21.589
going to change the zoom level for all of
them.

01:06:21.589 --> 01:06:22.589
If I change the map type, it's going to change
the map type for all of them as well.

01:06:22.589 --> 01:06:23.589
And I've also binded, as my last property,
the center – the map centerpoint – so

01:06:23.589 --> 01:06:24.589
that if I drag a map, it's going to drag the
map with it as well.

01:06:24.589 --> 01:06:25.589
I've also registered a click listener on every
map so that when I click on it, it's going

01:06:25.589 --> 01:06:26.589
to update only the head marker – only the
very first marker that was on here before.

01:06:26.589 --> 01:06:27.589
It's going to update that map property so
that – there was the set map which, which

01:06:27.589 --> 01:06:28.589
indicated which map your marker was binded
to but by updating that property, I can easily

01:06:28.589 --> 01:06:29.589
switch between maps that my marker's gonna
be living on.

01:06:29.589 --> 01:06:30.589
And because every new marker that I add, I'm
also binding that map property to the head

01:06:30.589 --> 01:06:31.589
marker's map property, it's following – the
head – it's just following everywhere it's

01:06:31.589 --> 01:06:32.589
going.

01:06:32.589 --> 01:06:33.589
So this is another example of using MVC to
do something cool.

01:06:33.589 --> 01:06:34.589
I'll leave it to you to figure out how you
can do this in V2.

01:06:34.589 --> 01:06:35.589
It would be pretty messy.

01:06:35.589 --> 01:06:36.589
And we don't have time to go over to the Twitter
search demo but if you want to see it, I can

01:06:36.589 --> 01:06:37.589
show you afterwards.

01:06:37.589 --> 01:06:38.589
So I did wanna really talk about what topics
that I haven't covered.

01:06:38.589 --> 01:06:39.589
These are some of the things I haven't covered.

01:06:39.589 --> 01:06:40.589
Like I said, there's a lot of V3 that is very
big and it's too – the session is too short

01:06:40.589 --> 01:06:41.589
and I would love to talk to you guys for more
hours [laughs] about stuff but –

01:06:41.589 --> 01:06:42.589
These are some of the topics that I haven't
covered.

01:06:42.589 --> 01:06:43.589
And if you want to talk about them, you can
come see me afterwards and I will be happy

01:06:43.589 --> 01:06:44.589
to tell you about them.

01:06:44.589 --> 01:06:45.589
Then I want to talk – I guess so there's
other Geo sessions that are at Google I O

01:06:45.589 --> 01:06:46.589
and I do want to encourage you guys to do
attend these interesting sessions.

01:06:46.589 --> 01:06:47.589
So these are the ones that are happening today.

01:06:47.589 --> 01:06:48.589
The 3:00 one is to be announced – there's
something exciting there so I would encourage

01:06:48.589 --> 01:06:49.589
you guys to check that out.

01:06:49.589 --> 01:06:50.589
Tomorrow, Thursday, we actually have our first
2 sessions are going to be focused on 3D mapping

01:06:50.589 --> 01:06:51.589
and then 3:30 is a great session for you guys
if you are a V3 developer or you're a V2 developer.

01:06:51.589 --> 01:06:52.589
3:30 session – Moving Beyond Markers – they're
going to talk about much more advanced topics

01:06:52.589 --> 01:06:53.589
and what more advanced things you can do with
the Maps API.

01:06:53.589 --> 01:06:54.589
And then there's a tech talk at 4:45 which
isn't very – isn't specific to map applications

01:06:54.589 --> 01:06:55.589
but it's a general talk on how to develop
the cross platform API for both desktop and

01:06:55.589 --> 01:06:56.589
mobile.

01:06:56.589 --> 01:06:57.589
So lastly, I did have one last announcement.

01:06:57.589 --> 01:06:58.589
And I did want to bring up that this is the
session that you want to go to if you want

01:06:58.589 --> 01:06:59.589
to find out more information about this exciting
announcement and maybe you can guess what

01:06:59.589 --> 01:07:00.589
that is.

01:07:00.589 --> 01:07:01.589
[laughs]

01:07:01.589 --> 01:07:02.589
Aerial?

01:07:02.589 --> 01:07:03.589
Close.

01:07:03.589 --> 01:07:04.589
Street View is now available for V3.

01:07:04.589 --> 01:07:05.589
Yes so this is actually really big exciting
news.

01:07:05.589 --> 01:07:06.589
[applause]

01:07:06.589 --> 01:07:07.589
I know you guys have been waiting for this
for a while so thank you for your patience

01:07:07.589 --> 01:07:08.589
and I would say that one of the reasons why
it took so long was because – well, it's

01:07:08.589 --> 01:07:09.589
an amazing technology that's behind it.

01:07:09.589 --> 01:07:10.589
This is completely a native browser support,
native browser technology which is being implemented

01:07:10.589 --> 01:07:11.589
to implement Street View.

01:07:11.589 --> 01:07:12.589
So there's no Flash Player involved or required
to run Street View.

01:07:12.589 --> 01:07:13.589
And one of the reasons we decided to do this
is not because we're against Flash.

01:07:13.589 --> 01:07:14.589
No, Flash is gonna be around, right?

01:07:14.589 --> 01:07:15.589
It's because we know mobile browsers don't
support Flash, right?

01:07:15.589 --> 01:07:16.589
So like the IPhone for example doesn't have
Flash installed.

01:07:16.589 --> 01:07:17.589
So we want to be able to outreach and really
focus on, on bringing this experience to mobile,

01:07:17.589 --> 01:07:18.589
to mobile phone and so – exactly.

01:07:18.589 --> 01:07:19.589
HTML 5 canvas.

01:07:19.589 --> 01:07:20.589
[applause]

01:07:20.589 --> 01:07:21.589
Yes.

01:07:21.589 --> 01:07:22.589
So lastly there's a developer qualification
 – if you don't know about this, I did want

01:07:22.589 --> 01:07:23.589
to just briefly mention it and say that if
you're interested in becoming a distinguished

01:07:23.589 --> 01:07:24.589
expert in specifically the Maps API technology,
go to code dot google dot com slash qualify.

01:07:24.589 --> 01:07:25.589
There's various ways to get qualified.

01:07:25.589 --> 01:07:26.589
There's different things you can do to accumulate
points.

01:07:26.589 --> 01:07:27.589
Some of the benefits of it I'd say, well you
get featured in our developer directory .

01:07:27.589 --> 01:07:28.589
We have a developer directory on code dot
google dot com.

01:07:28.589 --> 01:07:29.589
And it's really great for self promotion.

01:07:29.589 --> 01:07:30.589
You can, you can promote yourself and you
can use the Google Qualified Developer badge

01:07:30.589 --> 01:07:31.589
to do this and sometimes there's a preferred
or advanced invitation to some of our developer

01:07:31.589 --> 01:07:32.589
events that we throw every year.

01:07:32.589 --> 01:07:33.589
So check that out.

01:07:33.589 --> 01:07:34.589
And lastly I wanted to remind everybody about
the notes that we've been taking on Google

01:07:34.589 --> 01:07:35.589
Wave.

01:07:35.589 --> 01:07:36.589
I'm going to be bringing them up now and I
will open it up for questions.

01:07:36.589 --> 01:07:37.589
And if you do have a question, please use
the mic in the middle.

01:07:37.589 --> 01:07:38.589
[pause]

01:07:38.589 --> 01:07:39.589
&gt;&gt;Male Audience Member #1: I asked this question
yesterday…

01:07:39.589 --> 01:07:40.589
&gt;&gt;Daniels Lee: Sure

01:07:40.589 --> 01:07:41.589
&gt;&gt;Male Audience Member #1: about supports
for Sprites, for icons and mikers, and markers.

01:07:41.589 --> 01:07:42.589
&gt;&gt;Daniels Lee: So Image Sprites are actually
already supported in your custom marker images.

01:07:42.589 --> 01:07:43.589
We have a marker image class, class which
already allows you to specify an image sprite

01:07:43.589 --> 01:07:44.589
to do that.

01:07:44.589 --> 01:07:45.589
Yes and it's in the documentation.

01:07:45.589 --> 01:07:46.589
[pause]

01:07:46.589 --> 01:07:47.589
&gt;&gt;Male Audience Member #2: Hi and…

01:07:47.589 --> 01:07:48.589
&gt;&gt;Daniels Lee: Hello.

01:07:48.589 --> 01:07:49.589
&gt;&gt;Male Audience Member #2: congratulations
on Street View.

01:07:49.589 --> 01:07:50.589
&gt;&gt;Daniels Lee: Thank you and you can congratulate
these guys up front.

01:07:50.589 --> 01:07:51.589
&gt;.Male Audience Member #2: Congratulations
you guys.

01:07:51.589 --> 01:07:52.589
Does it work Flashless in IE?

01:07:52.589 --> 01:07:53.589
&gt;&gt;Daniels Lee: Does..I'm sorry.

01:07:53.589 --> 01:07:54.589
&gt;&gt;Male Audience Member #2: Does it work in
IE?

01:07:54.589 --> 01:07:55.589
&gt;&gt;Daniels Lee: Street View?

01:07:55.589 --> 01:07:56.589
&gt;&gt;Male Audience Member #2: Yes. Flashless.

01:07:56.589 --> 01:07:57.589
&gt;&gt;Daniels Lee: Yes.

01:07:57.589 --> 01:07:58.589
It should.

01:07:58.589 --> 01:07:59.589
&gt;&gt;Voice in Audience: HTML 4?

01:07:59.589 --> 01:08:00.589
&gt;&gt;Male Audience Member #2: HTML 4.

01:08:00.589 --> 01:08:01.589
&gt;&gt;Daniels Lee: So Street View attempts to
use HTML canvas and SVG operations but if

01:08:01.589 --> 01:08:02.589
it's not supported by the browser, it'll fall
back to HTML 4 which is supported by older…

01:08:02.589 --> 01:08:03.589
&gt;.Male Audience Member #2: There are questions
in Google Moderator and the Wave I was looking

01:08:03.589 --> 01:08:04.589
at.

01:08:04.589 --> 01:08:05.589
&gt;&gt;Daniels Lee: Hmm.

01:08:05.589 --> 01:08:06.589
[pause]

01:08:06.589 --> 01:08:07.589
Scroll up.

01:08:07.589 --> 01:08:08.589
&gt;&gt;Male Audience Member #2: But it says nothing
there.

01:08:08.589 --> 01:08:09.589
Oh well.

01:08:09.589 --> 01:08:10.589
&gt;&gt;Daniels Lee: Oh, I have to refresh?

01:08:10.589 --> 01:08:11.589
[audience laughter]

01:08:11.589 --> 01:08:12.589
[pause]

01:08:12.589 --> 01:08:13.589
[laughs]

01:08:13.589 --> 01:08:14.589
[pause]

01:08:14.589 --> 01:08:15.589
So the question was will Flash be supported
moving forward and the answer is yes.

01:08:15.589 --> 01:08:16.589
You're talking about the Google Maps API for
Flash, right?

01:08:16.589 --> 01:08:17.589
Over Street View, in V2 it will be.

01:08:17.589 --> 01:08:18.589
In V3 we don't have an existing Flash version
of Street View.

01:08:18.589 --> 01:08:19.589
So this will be the Street View for V3.

01:08:19.589 --> 01:08:20.589
&gt;&gt;Male Audience Member #3: Can you post to
your URL your map demos?

01:08:20.589 --> 01:08:21.589
&gt;&gt;Daniels Lee: Yes.

01:08:21.589 --> 01:08:22.589
I will post them on this Wave after the session
ends.

01:08:22.589 --> 01:08:23.589
Okay.

01:08:23.589 --> 01:08:24.589
I'll take a question from Moderator then.

01:08:24.589 --> 01:08:25.589
So here's one.

01:08:25.589 --> 01:08:26.589
Will the maps overlay from V2 also find their
way into V3?

01:08:26.589 --> 01:08:27.589
[pause]

01:08:27.589 --> 01:08:28.589
I'm not sure what – is the person who asked
the question in the room?

01:08:28.589 --> 01:08:29.589
Hmm.

01:08:29.589 --> 01:08:30.589
[voice from the audience] [bad audio]

01:08:30.589 --> 01:08:31.589
&gt;&gt;Daniels Lee: Oh I see.

01:08:31.589 --> 01:08:32.589
You're talking about layers, right?

01:08:32.589 --> 01:08:33.589
The Wikipedia layers.

01:08:33.589 --> 01:08:34.589
Umm.

01:08:34.589 --> 01:08:35.589
[pause]

01:08:35.589 --> 01:08:36.589
Hmm.

01:08:36.589 --> 01:08:37.589
I believe we do plan eventually on supporting
layers which includes the Wikipedia layers

01:08:37.589 --> 01:08:38.589
which is available in V2.

01:08:38.589 --> 01:08:39.589
Yes.

01:08:39.589 --> 01:08:40.589
[voice from the audience] [bad audio]

01:08:40.589 --> 01:08:41.589
&gt;&gt;Daniels Lee: We do have some layers, right.

01:08:41.589 --> 01:08:42.589
So yes.

01:08:42.589 --> 01:08:43.589
Okay.

01:08:43.589 --> 01:08:44.589
Are there still limitations to polygon rendering
and how has it been improved?

01:08:44.589 --> 01:08:45.589
Hmm.

01:08:45.589 --> 01:08:46.589
As far as I know, we are trying to constantly
improve the performance of polygon and polygon

01:08:46.589 --> 01:08:47.589
rendering and so I'd imagine this being an
improvement.

01:08:47.589 --> 01:08:48.589
Yes.

01:08:48.589 --> 01:08:49.589
[laughs]

01:08:49.589 --> 01:08:50.589
&gt;&gt;Ben: Speak into your mic?

01:08:50.589 --> 01:08:51.589
&gt;&gt;Daniels Lee: Sure.

01:08:51.589 --> 01:08:52.589
If you wanna.

01:08:52.589 --> 01:08:53.589
&gt;&gt;Ben: It's gonna get weird.

01:08:53.589 --> 01:08:54.589
Hi.

01:08:54.589 --> 01:08:55.589
I'm Ben.

01:08:55.589 --> 01:08:56.589
A Manager [ ]

01:08:56.589 --> 01:08:57.589
I ported over the polygon code from V2 to
V3.

01:08:57.589 --> 01:08:58.589
We've rewritten…

01:08:58.589 --> 01:08:59.589
&gt;&gt;Audience member: Louder, louder.

01:08:59.589 --> 01:09:00.589
&gt;&gt;Ben: Yeah.

01:09:00.589 --> 01:09:01.589
Take it off.

01:09:01.589 --> 01:09:02.589
[mic noises]

01:09:02.589 --> 01:09:03.589
[voices from audience] [inaudible]

01:09:03.589 --> 01:09:04.589
&gt;&gt;Ben: Much better.

01:09:04.589 --> 01:09:05.589
Testing, testing.

01:09:05.589 --> 01:09:06.589
Yes.

01:09:06.589 --> 01:09:07.589
Okay.

01:09:07.589 --> 01:09:08.589
So when we ported the polygon code from V2
to V3, we essentially rewrote a lot of it.

01:09:08.589 --> 01:09:09.589
We now support many more polygons and more
complicated polygons.

01:09:09.589 --> 01:09:10.589
We do client site level of detail.

01:09:10.589 --> 01:09:11.589
If you have a really complicated polygon,
we'll figure out what vertices we don't need

01:09:11.589 --> 01:09:12.589
to show up on the same level you're looking
at.

01:09:12.589 --> 01:09:13.589
So it renders faster.

01:09:13.589 --> 01:09:14.589
I think it's generally faster – a few niceties
as well.

01:09:14.589 --> 01:09:15.589
Geodesics are now much smoother.

01:09:15.589 --> 01:09:16.589
We now support polygons that include the North
Pole, the South Pole.

01:09:16.589 --> 01:09:17.589
Yeah.

01:09:17.589 --> 01:09:18.589
Let us know if you see bugs or performance
problems but we're pretty happy with it now

01:09:18.589 --> 01:09:19.589
 – the implementation of them.

01:09:19.589 --> 01:09:20.589
&gt;&gt;Daniels Lee: Great.

01:09:20.589 --> 01:09:21.589
Thank you.

01:09:21.589 --> 01:09:22.589
Anybody in the audience have any questions
or…

01:09:22.589 --> 01:09:23.589
I guess maybe I'll take time to take one more
from Moderator.

01:09:23.589 --> 01:09:24.589
[pause]

01:09:24.589 --> 01:09:25.589
&gt;&gt;Male Audience Member #4: Can you ask a show
of hands how many people are using V2 and

01:09:25.589 --> 01:09:26.589
V3 in the audience?

01:09:26.589 --> 01:09:27.589
&gt;&gt;Daniels Lee: Yes.

01:09:27.589 --> 01:09:28.589
So the question – can I get a show of hands
of everyone in the audience that are using

01:09:28.589 --> 01:09:29.589
V2?

01:09:29.589 --> 01:09:30.589
[pause]

01:09:30.589 --> 01:09:31.589
And how many of you guys are using V3?

01:09:31.589 --> 01:09:32.589
Oh awesome.

01:09:32.589 --> 01:09:33.589
How many of you guys will migrate to V3?

01:09:33.589 --> 01:09:34.589
[laughs]

01:09:34.589 --> 01:09:35.589
Great answer, great answer.

01:09:35.589 --> 01:09:36.589
Thank you.

01:09:36.589 --> 01:09:37.589
Okay.

01:09:37.589 --> 01:09:38.589
I'll take one last question from Moderator
and then we'll conclude the session.

01:09:38.589 --> 01:09:39.589
Umm.

01:09:39.589 --> 01:09:40.589
Let's see.

01:09:40.589 --> 01:09:41.589
[pause]

01:09:41.589 --> 01:09:42.589
I guess we'll –

01:09:42.589 --> 01:09:43.589
'What can I do to improve pan zoom performance
in, on V3 in mobile?'

01:09:43.589 --> 01:09:44.589
Hmm.

01:09:44.589 --> 01:09:45.589
It's an interesting question.

01:09:45.589 --> 01:09:46.589
I'd like to know what is slow about it first
but I guess..

01:09:46.589 --> 01:09:47.589
[pause]

01:09:47.589 --> 01:09:48.589
Is that you?

01:09:48.589 --> 01:09:49.589
&gt;&gt;Male Audience Member: That was my question.

01:09:49.589 --> 01:09:50.589
&gt;&gt;Daniels Lee: Oh great.

01:09:50.589 --> 01:09:51.589
&gt;&gt;Male Audience Member: So for example, if
you fire it up on an Ipad and you compare

01:09:51.589 --> 01:09:52.589
it versus the Ipad native app and you pan
zoom in and out…

01:09:52.589 --> 01:09:53.589
&gt;&gt;Daniels Lee: Oh I see.

01:09:53.589 --> 01:09:54.589
&gt;&gt;Male Audience Member: It's really apparent.

01:09:54.589 --> 01:09:55.589
One of them is going 'gunk, gunk, gunk, gunk'
and the other one's going 'zzzz, zzzz' .

01:09:55.589 --> 01:09:56.589
&gt;&gt;Daniels Lee: So you're comparing the native..

01:09:56.589 --> 01:09:57.589
&gt;&gt;Male Audience Member: It actually makes
those sounds.

01:09:57.589 --> 01:09:58.589
&gt;&gt;Daniels Lee: You're talking about the native
app.

01:09:58.589 --> 01:09:59.589
The map kit.

01:09:59.589 --> 01:10:00.589
&gt;&gt;Male Audience Member: No.

01:10:00.589 --> 01:10:01.589
I'm talking about…

01:10:01.589 --> 01:10:02.589
I'm comparing and contrasting against the
native app.

01:10:02.589 --> 01:10:03.589
But I wonder how – what can I do to help
my performance in the V3 browser version?

01:10:03.589 --> 01:10:04.589
&gt;&gt;Daniels Lee: Hmm.

01:10:04.589 --> 01:10:05.589
&gt;&gt;Male Audience Member: I want to make it
as close to native as I can make it.

01:10:05.589 --> 01:10:06.589
As fast as I can go.

01:10:06.589 --> 01:10:07.589
&gt;&gt;Daniels Lee: I would say that's a job for
our core API engineers.

01:10:07.589 --> 01:10:08.589
[laughs]

01:10:08.589 --> 01:10:09.589
I'm trying to think of techniques because
we don't really – in your own implementation

01:10:09.589 --> 01:10:10.589
of your, of the application, it's not like
you're implementing the pan or the zoom effect,

01:10:10.589 --> 01:10:11.589
right?

01:10:11.589 --> 01:10:12.589
You're calling a Pan 2 or a Pan by function
or you're calling set center to relocate it.

01:10:12.589 --> 01:10:13.589
Or on the drag, right, you're not doing, you're
not registering any or firing off any listeners

01:10:13.589 --> 01:10:14.589
like that.

01:10:14.589 --> 01:10:15.589
So really, it comes down to the core, just
the core UI interaction of how to pan and

01:10:15.589 --> 01:10:16.589
the way the tiles are loading and so forth.

01:10:16.589 --> 01:10:17.589
&gt;&gt;Male Audience Member: I have overlays also.

01:10:17.589 --> 01:10:18.589
What effect do those have?

01:10:18.589 --> 01:10:19.589
Like can I minify?

01:10:19.589 --> 01:10:20.589
What sorts of things can I do?

01:10:20.589 --> 01:10:21.589
&gt;&gt;Daniels Lee: So there will be some cost
in adding the overlays, right?

01:10:21.589 --> 01:10:22.589
And creating the overlays.

01:10:22.589 --> 01:10:23.589
But once the overlays are actually binded
to the map, that really wouldn't affect the

01:10:23.589 --> 01:10:24.589
pan or zoom performance, in my opinion.

01:10:24.589 --> 01:10:25.589
Unless on drag or unless on reposition, right?

01:10:25.589 --> 01:10:26.589
Let's say you're listening for an idle event
which fires any time the map state changes

01:10:26.589 --> 01:10:27.589
or if you zoom or if you change the center
location and you have that do something else

01:10:27.589 --> 01:10:28.589
and add more overlays and that's going to
slow it down a little bit.

01:10:28.589 --> 01:10:29.589
But just talking sheerly just about the pan
and zoom effect, there's not much you can

01:10:29.589 --> 01:10:30.589
really do there.

01:10:30.589 --> 01:10:31.589
But like you said, if you're adding overlays
and you do operations that are happening based

01:10:31.589 --> 01:10:32.589
on that action, based on a pan, there's a
[inaudible] there.

01:10:32.589 --> 01:10:33.589
There's ways to preload your overlays where
you can catch them or you can, or you can

01:10:33.589 --> 01:10:34.589
be smarter about when you load them.

01:10:34.589 --> 01:10:35.589
Or when not to.

01:10:35.589 --> 01:10:36.589
&gt;&gt;Male Audience Member: Thanks.

01:10:36.589 --> 01:10:37.589
&gt;&gt;Daniels Lee: Does that make any sense?

01:10:37.589 --> 01:10:38.589
&gt;&gt;Male Audience Member: Mmm.

01:10:38.589 --> 01:10:39.589
&gt;&gt;Daniels Lee: A little bit.

01:10:39.589 --> 01:10:40.589
Okay.

01:10:40.589 --> 01:10:41.589
Okay.

01:10:41.589 --> 01:10:42.589
Well thank you guys for coming and I really,
really want you guys to enjoy the rest of

01:10:42.589 --> 01:10:43.589
your time at Google I O.

01:10:43.589 --> 01:10:44.589
I look forward to seeing you guys around.

01:10:44.589 --> 01:10:45.589
I will be hanging out on the Geo Developer
sandbox area or in the office hours so definitely

01:10:45.589 --> 01:10:46.589
come talk to us.

01:10:46.589 --> 01:10:47.589
Come meet us.

01:10:47.589 --> 01:10:48.589
Thank you.

01:10:48.589 --> 01:10:48.590
[applause]

