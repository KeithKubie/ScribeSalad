WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
As your problem database fills up with more and more problem reports

00:00:04.000 --> 00:00:08.000
over time you'll want to do some housekeeping.

00:00:08.000 --> 00:00:15.000
Because as these databases fill up, there are a number of issues that pile up as well.

00:00:15.000 --> 00:00:17.000
The first one is duplicates.

00:00:17.000 --> 00:00:20.000
If you have one user who's reporting a problem

00:00:20.000 --> 00:00:24.000
chances are that other users will be reporting just the same problem.

00:00:24.000 --> 00:00:29.000
That is, you have multiple problem reports that all relate to the same class of failures.

00:00:29.000 --> 00:00:32.000
These problem reports are call duplicates.

00:00:32.000 --> 00:00:35.000
As a manager, your task is to identify such duplicates.

00:00:35.000 --> 00:00:40.000
You want to do so in order to avoid them cluttering the statistics,

00:00:40.000 --> 00:00:44.000
but you also want the duplicates to refer to each other.

00:00:44.000 --> 00:00:47.000
This way when you come across a problem report,

00:00:47.000 --> 00:00:52.000
you will find, hey, this is a duplicate of this original bug report,

00:00:52.000 --> 00:00:55.000
and all of these others are also duplicates.

00:00:55.000 --> 00:00:59.000
You like to keep the duplicates, though, in your database,

00:00:59.000 --> 00:01:02.000
because all of these may report on different angles of the problem

00:01:02.000 --> 00:01:06.000
and these angles may all be helpful for resolving the problem.

00:01:06.000 --> 00:01:11.000
Note that automatic diagnosis mechanisms, such as statistical debugging

00:01:11.000 --> 00:01:15.000
or delta debugging, are great tools for identifying duplicates

00:01:15.000 --> 00:01:21.000
because they'll find commonalities between all the individual bug reports

00:01:21.000 --> 00:01:27.000
with respect to similar features in the input or in the execution.

00:01:27.000 --> 00:01:29.000
Next up is obsolete problems.

00:01:29.000 --> 00:01:34.000
Over time your database will fill up with unresolved problem reports--

00:01:34.000 --> 00:01:39.000
problems could not reproduced or problems that may have been fixed in some later version

00:01:39.000 --> 00:01:41.000
and low-priority problems.

00:01:41.000 --> 00:01:45.000
Having thousands of unresolved problems will drag developers down.

00:01:45.000 --> 00:01:48.000
They clutter up searches in the database,

00:01:48.000 --> 00:01:50.000
and they are bad for the morale.

00:01:50.000 --> 00:01:54.000
A problem database that has plenty of obsolete problems is like

00:01:54.000 --> 00:01:57.000
an overflowing drawer of socks.

00:01:57.000 --> 00:02:01.000
You don't find the socks you need, and the drawer makes you feel guilty

00:02:01.000 --> 00:02:04.000
for not throwing away your old socks.

00:02:04.000 --> 00:02:11.000
What you should do is over time simply declare problem reports obsolete

00:02:11.000 --> 00:02:16.000
and thus get rid of socks you don't want anymore.

00:02:16.000 --> 00:02:18.000
When is a problem obsolete?

00:02:18.000 --> 00:02:21.000
A problem is obsolete if it will never be fixed.

00:02:21.000 --> 00:02:24.000
For instance, because the program is no longer supported

00:02:24.000 --> 00:02:28.000
or the problem is old and occurred only once

00:02:28.000 --> 00:02:31.000
or the problem is old and occurred only internally.

00:02:31.000 --> 00:02:34.000
You don't want to actually delete these problems,

00:02:34.000 --> 00:02:37.000
but you can tag them with an appropriate resolution.

00:02:37.000 --> 00:02:44.000
In Bugzilla, for instance, there is a special WONTFIX resolution for such obsolete problems.

00:02:44.000 --> 00:02:48.000
Finally, problems are not only stored in the problem database,

00:02:48.000 --> 00:02:53.000
but that may also be test cases, which reproduce the exact problem.

00:02:53.000 --> 00:02:56.000
As a rule of thumb, as soon as you do have a test case

00:02:56.000 --> 00:03:02.000
that reproduces the problem, the test case makes the problem report obsolete.

00:03:02.000 --> 00:03:08.000
That is, as soon as you have a test case you can actually put a special flag

00:03:08.000 --> 00:03:10.000
on the problem database that the problem is now being addressed by the test.

