WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.309 align:start position:0%
 
when<00:00:00.240><c> you</c><00:00:00.329><c> train</c><00:00:00.480><c> your</c><00:00:00.630><c> neural</c><00:00:00.840><c> network</c><00:00:00.870><c> is</c>

00:00:01.309 --> 00:00:01.319 align:start position:0%
when you train your neural network is
 

00:00:01.319 --> 00:00:02.530 align:start position:0%
when you train your neural network is
important<00:00:01.829><c> to</c><00:00:01.949><c> initialize</c><00:00:02.310><c> the</c><00:00:02.340><c> weights</c>

00:00:02.530 --> 00:00:02.540 align:start position:0%
important to initialize the weights
 

00:00:02.540 --> 00:00:05.539 align:start position:0%
important to initialize the weights
randomly<00:00:03.540><c> for</c><00:00:04.230><c> logistic</c><00:00:04.710><c> regression</c><00:00:04.770><c> it</c><00:00:05.400><c> was</c>

00:00:05.539 --> 00:00:05.549 align:start position:0%
randomly for logistic regression it was
 

00:00:05.549 --> 00:00:07.430 align:start position:0%
randomly for logistic regression it was
okay<00:00:05.879><c> to</c><00:00:05.940><c> initialize</c><00:00:06.480><c> the</c><00:00:06.690><c> weights</c><00:00:06.720><c> to</c><00:00:07.109><c> zero</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
okay to initialize the weights to zero
 

00:00:07.440 --> 00:00:09.799 align:start position:0%
okay to initialize the weights to zero
but<00:00:08.189><c> for</c><00:00:08.460><c> a</c><00:00:08.490><c> neural</c><00:00:08.670><c> network</c><00:00:08.940><c> of</c><00:00:09.330><c> initializer</c>

00:00:09.799 --> 00:00:09.809 align:start position:0%
but for a neural network of initializer
 

00:00:09.809 --> 00:00:12.169 align:start position:0%
but for a neural network of initializer
wastes<00:00:10.170><c> the</c><00:00:10.500><c> parameters</c><00:00:11.040><c> to</c><00:00:11.250><c> all</c><00:00:11.400><c> 0</c><00:00:11.849><c> and</c><00:00:12.090><c> then</c>

00:00:12.169 --> 00:00:12.179 align:start position:0%
wastes the parameters to all 0 and then
 

00:00:12.179 --> 00:00:14.450 align:start position:0%
wastes the parameters to all 0 and then
apply<00:00:12.450><c> gradient</c><00:00:12.719><c> descent</c><00:00:13.259><c> it</c><00:00:13.500><c> won't</c><00:00:14.009><c> work</c>

00:00:14.450 --> 00:00:14.460 align:start position:0%
apply gradient descent it won't work
 

00:00:14.460 --> 00:00:19.880 align:start position:0%
apply gradient descent it won't work
let's<00:00:14.969><c> see</c><00:00:15.179><c> why</c><00:00:15.830><c> so</c><00:00:16.830><c> you</c><00:00:16.890><c> have</c><00:00:17.840><c> here</c><00:00:18.840><c> two</c><00:00:19.500><c> input</c>

00:00:19.880 --> 00:00:19.890 align:start position:0%
let's see why so you have here two input
 

00:00:19.890 --> 00:00:22.720 align:start position:0%
let's see why so you have here two input
features<00:00:20.279><c> so</c><00:00:20.789><c> n</c><00:00:21.060><c> 0</c><00:00:21.539><c> is</c><00:00:21.600><c> equal</c><00:00:21.900><c> to</c><00:00:21.930><c> 2</c><00:00:22.320><c> and</c><00:00:22.529><c> 2</c>

00:00:22.720 --> 00:00:22.730 align:start position:0%
features so n 0 is equal to 2 and 2
 

00:00:22.730 --> 00:00:27.320 align:start position:0%
features so n 0 is equal to 2 and 2
hidden<00:00:23.730><c> units</c><00:00:24.210><c> so</c><00:00:24.359><c> N</c><00:00:24.539><c> 1</c><00:00:24.869><c> is</c><00:00:25.590><c> equal</c><00:00:25.859><c> to</c><00:00:25.890><c> 2</c><00:00:26.130><c> and</c><00:00:26.369><c> so</c>

00:00:27.320 --> 00:00:27.330 align:start position:0%
hidden units so N 1 is equal to 2 and so
 

00:00:27.330 --> 00:00:30.650 align:start position:0%
hidden units so N 1 is equal to 2 and so
the<00:00:27.810><c> matrix</c><00:00:28.800><c> associated</c><00:00:29.760><c> with</c><00:00:30.210><c> a</c><00:00:30.359><c> hidden</c>

00:00:30.650 --> 00:00:30.660 align:start position:0%
the matrix associated with a hidden
 

00:00:30.660 --> 00:00:35.690 align:start position:0%
the matrix associated with a hidden
layer<00:00:30.810><c> or</c><00:00:31.140><c> W</c><00:00:31.980><c> 1</c><00:00:32.189><c> is</c><00:00:32.850><c> going</c><00:00:33.120><c> to</c><00:00:33.239><c> be</c><00:00:33.360><c> 2</c><00:00:33.630><c> by</c><00:00:33.809><c> 2</c><00:00:34.700><c> let's</c>

00:00:35.690 --> 00:00:35.700 align:start position:0%
layer or W 1 is going to be 2 by 2 let's
 

00:00:35.700 --> 00:00:38.500 align:start position:0%
layer or W 1 is going to be 2 by 2 let's
say<00:00:35.820><c> that</c><00:00:36.000><c> you</c><00:00:36.300><c> initialize</c><00:00:36.719><c> it</c><00:00:36.989><c> to</c><00:00:37.200><c> all</c><00:00:37.860><c> zeros</c>

00:00:38.500 --> 00:00:38.510 align:start position:0%
say that you initialize it to all zeros
 

00:00:38.510 --> 00:00:42.799 align:start position:0%
say that you initialize it to all zeros
0<00:00:39.510><c> 0</c><00:00:39.719><c> 0</c><00:00:39.930><c> 0</c><00:00:39.989><c> 2</c><00:00:40.350><c> by</c><00:00:40.379><c> 2</c><00:00:40.559><c> matrix</c><00:00:41.129><c> and</c><00:00:41.390><c> let's</c><00:00:42.390><c> say</c><00:00:42.540><c> P</c><00:00:42.780><c> 1</c>

00:00:42.799 --> 00:00:42.809 align:start position:0%
0 0 0 0 2 by 2 matrix and let's say P 1
 

00:00:42.809 --> 00:00:46.459 align:start position:0%
0 0 0 0 2 by 2 matrix and let's say P 1
is<00:00:43.200><c> also</c><00:00:43.379><c> equal</c><00:00:43.559><c> to</c><00:00:44.100><c> 0</c><00:00:44.969><c> 0</c><00:00:45.300><c> turns</c><00:00:46.289><c> out</c>

00:00:46.459 --> 00:00:46.469 align:start position:0%
is also equal to 0 0 turns out
 

00:00:46.469 --> 00:00:49.700 align:start position:0%
is also equal to 0 0 turns out
initializing<00:00:47.219><c> the</c><00:00:47.850><c> bias</c><00:00:48.149><c> terms</c><00:00:48.570><c> B</c><00:00:48.960><c> to</c><00:00:49.230><c> 0</c><00:00:49.530><c> is</c>

00:00:49.700 --> 00:00:49.710 align:start position:0%
initializing the bias terms B to 0 is
 

00:00:49.710 --> 00:00:52.549 align:start position:0%
initializing the bias terms B to 0 is
actually<00:00:49.980><c> okay</c><00:00:50.309><c> but</c><00:00:51.149><c> initializing</c><00:00:51.960><c> W</c><00:00:52.320><c> to</c><00:00:52.440><c> all</c>

00:00:52.549 --> 00:00:52.559 align:start position:0%
actually okay but initializing W to all
 

00:00:52.559 --> 00:00:55.670 align:start position:0%
actually okay but initializing W to all
zeros<00:00:52.590><c> is</c><00:00:53.129><c> a</c><00:00:53.160><c> problem</c><00:00:53.930><c> so</c><00:00:54.930><c> the</c><00:00:55.079><c> problem</c><00:00:55.530><c> with</c>

00:00:55.670 --> 00:00:55.680 align:start position:0%
zeros is a problem so the problem with
 

00:00:55.680 --> 00:00:58.010 align:start position:0%
zeros is a problem so the problem with
this<00:00:55.860><c> formal</c><00:00:56.190><c> initialization</c><00:00:56.910><c> is</c><00:00:57.120><c> that</c><00:00:57.420><c> for</c>

00:00:58.010 --> 00:00:58.020 align:start position:0%
this formal initialization is that for
 

00:00:58.020 --> 00:01:02.139 align:start position:0%
this formal initialization is that for
any<00:00:58.199><c> example</c><00:00:58.859><c> you</c><00:00:59.190><c> give</c><00:00:59.489><c> it</c><00:00:59.670><c> you</c><00:01:00.480><c> have</c><00:01:00.870><c> that</c><00:01:01.410><c> a</c>

00:01:02.139 --> 00:01:02.149 align:start position:0%
any example you give it you have that a
 

00:01:02.149 --> 00:01:09.590 align:start position:0%
any example you give it you have that a
1<00:01:03.149><c> 1</c><00:01:03.420><c> and</c><00:01:04.040><c> a</c><00:01:05.270><c> 1</c><00:01:06.270><c> 2</c><00:01:07.100><c> will</c><00:01:08.100><c> be</c><00:01:08.220><c> equal</c><00:01:08.430><c> all</c><00:01:09.270><c> right</c><00:01:09.390><c> so</c>

00:01:09.590 --> 00:01:09.600 align:start position:0%
1 1 and a 1 2 will be equal all right so
 

00:01:09.600 --> 00:01:11.750 align:start position:0%
1 1 and a 1 2 will be equal all right so
this<00:01:09.810><c> activation</c><00:01:10.530><c> and</c><00:01:10.740><c> this</c><00:01:11.280><c> activation</c>

00:01:11.750 --> 00:01:11.760 align:start position:0%
this activation and this activation
 

00:01:11.760 --> 00:01:13.640 align:start position:0%
this activation and this activation
would<00:01:12.390><c> be</c><00:01:12.570><c> sync</c><00:01:12.810><c> because</c><00:01:12.990><c> both</c><00:01:13.409><c> of</c><00:01:13.439><c> these</c>

00:01:13.640 --> 00:01:13.650 align:start position:0%
would be sync because both of these
 

00:01:13.650 --> 00:01:15.530 align:start position:0%
would be sync because both of these
hidden<00:01:13.920><c> units</c><00:01:14.310><c> are</c><00:01:14.400><c> computing</c><00:01:14.880><c> exactly</c><00:01:15.000><c> the</c>

00:01:15.530 --> 00:01:15.540 align:start position:0%
hidden units are computing exactly the
 

00:01:15.540 --> 00:01:18.590 align:start position:0%
hidden units are computing exactly the
same<00:01:15.750><c> function</c><00:01:16.200><c> and</c><00:01:16.400><c> then</c><00:01:17.400><c> when</c><00:01:18.150><c> you</c><00:01:18.240><c> compute</c>

00:01:18.590 --> 00:01:18.600 align:start position:0%
same function and then when you compute
 

00:01:18.600 --> 00:01:22.880 align:start position:0%
same function and then when you compute
back<00:01:18.810><c> propagation</c><00:01:19.350><c> it</c><00:01:20.070><c> turns</c><00:01:20.400><c> out</c><00:01:20.610><c> that</c><00:01:20.970><c> D</c><00:01:21.869><c> Z</c><00:01:22.590><c> 1</c>

00:01:22.880 --> 00:01:22.890 align:start position:0%
back propagation it turns out that D Z 1
 

00:01:22.890 --> 00:01:28.999 align:start position:0%
back propagation it turns out that D Z 1
1<00:01:23.130><c> and</c><00:01:23.930><c> D</c><00:01:24.930><c> Z</c><00:01:25.380><c> 1</c><00:01:26.220><c> 2</c><00:01:27.049><c> will</c><00:01:28.049><c> also</c><00:01:28.229><c> be</c><00:01:28.680><c> the</c><00:01:28.799><c> same</c>

00:01:28.999 --> 00:01:29.009 align:start position:0%
1 and D Z 1 2 will also be the same
 

00:01:29.009 --> 00:01:30.649 align:start position:0%
1 and D Z 1 2 will also be the same
color<00:01:29.310><c> by</c><00:01:29.460><c> symmetry</c><00:01:29.850><c> all</c><00:01:30.240><c> right</c><00:01:30.420><c> both</c><00:01:30.630><c> of</c>

00:01:30.649 --> 00:01:30.659 align:start position:0%
color by symmetry all right both of
 

00:01:30.659 --> 00:01:32.149 align:start position:0%
color by symmetry all right both of
these<00:01:30.930><c> settings</c><00:01:31.259><c> units</c><00:01:31.619><c> will</c><00:01:31.710><c> initialize</c><00:01:32.100><c> the</c>

00:01:32.149 --> 00:01:32.159 align:start position:0%
these settings units will initialize the
 

00:01:32.159 --> 00:01:36.050 align:start position:0%
these settings units will initialize the
same<00:01:32.490><c> way</c><00:01:33.740><c> technically</c><00:01:34.740><c> for</c><00:01:35.040><c> what</c><00:01:35.189><c> I'm</c><00:01:35.310><c> saying</c>

00:01:36.050 --> 00:01:36.060 align:start position:0%
same way technically for what I'm saying
 

00:01:36.060 --> 00:01:38.030 align:start position:0%
same way technically for what I'm saying
I'm<00:01:36.329><c> assuming</c><00:01:36.840><c> that</c><00:01:37.110><c> the</c><00:01:37.290><c> outgoing</c><00:01:37.770><c> weights</c>

00:01:38.030 --> 00:01:38.040 align:start position:0%
I'm assuming that the outgoing weights
 

00:01:38.040 --> 00:01:42.740 align:start position:0%
I'm assuming that the outgoing weights
are<00:01:38.310><c> also</c><00:01:38.520><c> identical</c><00:01:39.150><c> so</c><00:01:39.920><c> that</c><00:01:40.920><c> W</c><00:01:41.369><c> 2</c><00:01:41.850><c> is</c><00:01:42.329><c> equal</c>

00:01:42.740 --> 00:01:42.750 align:start position:0%
are also identical so that W 2 is equal
 

00:01:42.750 --> 00:01:48.139 align:start position:0%
are also identical so that W 2 is equal
to<00:01:42.990><c> 0</c><00:01:43.680><c> 0</c><00:01:44.450><c> but</c><00:01:45.450><c> if</c><00:01:46.140><c> you</c><00:01:46.740><c> initialize</c><00:01:47.220><c> the</c><00:01:47.880><c> neural</c>

00:01:48.139 --> 00:01:48.149 align:start position:0%
to 0 0 but if you initialize the neural
 

00:01:48.149 --> 00:01:51.469 align:start position:0%
to 0 0 but if you initialize the neural
network<00:01:48.479><c> this</c><00:01:48.630><c> way</c><00:01:48.869><c> then</c><00:01:49.259><c> this</c><00:01:50.189><c> hidden</c><00:01:51.119><c> unit</c>

00:01:51.469 --> 00:01:51.479 align:start position:0%
network this way then this hidden unit
 

00:01:51.479 --> 00:01:53.389 align:start position:0%
network this way then this hidden unit
and<00:01:51.750><c> this</c><00:01:51.899><c> hidden</c><00:01:52.229><c> unit</c><00:01:52.560><c> are</c><00:01:52.829><c> completely</c>

00:01:53.389 --> 00:01:53.399 align:start position:0%
and this hidden unit are completely
 

00:01:53.399 --> 00:01:54.770 align:start position:0%
and this hidden unit are completely
identical<00:01:53.520><c> so</c><00:01:54.240><c> they're</c><00:01:54.390><c> completely</c>

00:01:54.770 --> 00:01:54.780 align:start position:0%
identical so they're completely
 

00:01:54.780 --> 00:01:56.510 align:start position:0%
identical so they're completely
sometimes<00:01:55.740><c> you</c><00:01:55.799><c> say</c><00:01:55.950><c> they're</c><00:01:56.130><c> completely</c>

00:01:56.510 --> 00:01:56.520 align:start position:0%
sometimes you say they're completely
 

00:01:56.520 --> 00:01:57.920 align:start position:0%
sometimes you say they're completely
symmetric<00:01:57.180><c> which</c><00:01:57.329><c> just</c><00:01:57.509><c> means</c><00:01:57.719><c> that</c><00:01:57.780><c> the</c>

00:01:57.920 --> 00:01:57.930 align:start position:0%
symmetric which just means that the
 

00:01:57.930 --> 00:02:00.440 align:start position:0%
symmetric which just means that the
computing<00:01:58.490><c> exactly</c><00:01:59.490><c> the</c><00:01:59.640><c> same</c><00:01:59.820><c> function</c><00:02:00.240><c> and</c>

00:02:00.440 --> 00:02:00.450 align:start position:0%
computing exactly the same function and
 

00:02:00.450 --> 00:02:04.580 align:start position:0%
computing exactly the same function and
by<00:02:01.409><c> kind</c><00:02:01.799><c> of</c><00:02:01.920><c> a</c><00:02:02.009><c> proof</c><00:02:02.280><c> by</c><00:02:02.460><c> induction</c><00:02:03.290><c> it</c><00:02:04.290><c> turns</c>

00:02:04.580 --> 00:02:04.590 align:start position:0%
by kind of a proof by induction it turns
 

00:02:04.590 --> 00:02:07.100 align:start position:0%
by kind of a proof by induction it turns
out<00:02:04.799><c> that</c><00:02:05.100><c> after</c><00:02:05.369><c> every</c><00:02:06.060><c> single</c><00:02:06.270><c> iteration</c><00:02:06.570><c> of</c>

00:02:07.100 --> 00:02:07.110 align:start position:0%
out that after every single iteration of
 

00:02:07.110 --> 00:02:09.050 align:start position:0%
out that after every single iteration of
training<00:02:07.560><c> you're</c><00:02:08.039><c> two</c><00:02:08.280><c> hidden</c><00:02:08.459><c> units</c><00:02:08.610><c> are</c>

00:02:09.050 --> 00:02:09.060 align:start position:0%
training you're two hidden units are
 

00:02:09.060 --> 00:02:10.729 align:start position:0%
training you're two hidden units are
still<00:02:09.270><c> confusing</c><00:02:09.810><c> exactly</c><00:02:10.379><c> the</c><00:02:10.530><c> same</c>

00:02:10.729 --> 00:02:10.739 align:start position:0%
still confusing exactly the same
 

00:02:10.739 --> 00:02:11.660 align:start position:0%
still confusing exactly the same
function

00:02:11.660 --> 00:02:11.670 align:start position:0%
function
 

00:02:11.670 --> 00:02:15.230 align:start position:0%
function
since<00:02:12.210><c> also</c><00:02:12.540><c> the</c><00:02:12.630><c> show</c><00:02:12.840><c> that</c><00:02:13.170><c> DW</c><00:02:13.760><c> will</c><00:02:14.760><c> be</c><00:02:14.940><c> a</c>

00:02:15.230 --> 00:02:15.240 align:start position:0%
since also the show that DW will be a
 

00:02:15.240 --> 00:02:18.140 align:start position:0%
since also the show that DW will be a
matrix<00:02:15.930><c> that</c><00:02:16.020><c> looks</c><00:02:16.140><c> like</c><00:02:16.440><c> this</c><00:02:16.790><c> where</c><00:02:17.790><c> every</c>

00:02:18.140 --> 00:02:18.150 align:start position:0%
matrix that looks like this where every
 

00:02:18.150 --> 00:02:21.290 align:start position:0%
matrix that looks like this where every
row<00:02:18.560><c> takes</c><00:02:19.560><c> on</c><00:02:19.710><c> the</c><00:02:19.830><c> same</c><00:02:19.980><c> value</c><00:02:20.150><c> so</c><00:02:21.150><c> we</c>

00:02:21.290 --> 00:02:21.300 align:start position:0%
row takes on the same value so we
 

00:02:21.300 --> 00:02:23.540 align:start position:0%
row takes on the same value so we
perform<00:02:21.750><c> a</c><00:02:21.840><c> weight</c><00:02:22.050><c> update</c><00:02:22.500><c> so</c><00:02:23.130><c> you</c><00:02:23.160><c> perform</c>

00:02:23.540 --> 00:02:23.550 align:start position:0%
perform a weight update so you perform
 

00:02:23.550 --> 00:02:26.420 align:start position:0%
perform a weight update so you perform
when<00:02:23.970><c> you</c><00:02:24.060><c> perform</c><00:02:24.390><c> a</c><00:02:24.450><c> weight</c><00:02:24.630><c> update</c><00:02:24.990><c> w1</c><00:02:25.650><c> gets</c>

00:02:26.420 --> 00:02:26.430 align:start position:0%
when you perform a weight update w1 gets
 

00:02:26.430 --> 00:02:30.410 align:start position:0%
when you perform a weight update w1 gets
updated<00:02:26.970><c> as</c><00:02:27.120><c> w1</c><00:02:27.750><c> minus</c><00:02:27.990><c> alpha</c><00:02:28.830><c> times</c><00:02:29.130><c> DW</c><00:02:29.880><c> you</c>

00:02:30.410 --> 00:02:30.420 align:start position:0%
updated as w1 minus alpha times DW you
 

00:02:30.420 --> 00:02:33.650 align:start position:0%
updated as w1 minus alpha times DW you
find<00:02:30.750><c> that</c><00:02:30.930><c> w1</c><00:02:31.530><c> after</c><00:02:32.160><c> every</c><00:02:32.430><c> iteration</c><00:02:32.660><c> will</c>

00:02:33.650 --> 00:02:33.660 align:start position:0%
find that w1 after every iteration will
 

00:02:33.660 --> 00:02:36.980 align:start position:0%
find that w1 after every iteration will
have<00:02:33.900><c> you</c><00:02:34.530><c> know</c><00:02:34.620><c> the</c><00:02:34.770><c> first</c><00:02:35.040><c> row</c><00:02:35.690><c> equal</c><00:02:36.690><c> to</c><00:02:36.870><c> the</c>

00:02:36.980 --> 00:02:36.990 align:start position:0%
have you know the first row equal to the
 

00:02:36.990 --> 00:02:39.110 align:start position:0%
have you know the first row equal to the
second<00:02:37.350><c> row</c><00:02:37.590><c> so</c><00:02:37.980><c> it's</c><00:02:38.160><c> possible</c><00:02:38.370><c> to</c><00:02:38.640><c> construct</c>

00:02:39.110 --> 00:02:39.120 align:start position:0%
second row so it's possible to construct
 

00:02:39.120 --> 00:02:41.180 align:start position:0%
second row so it's possible to construct
a<00:02:39.540><c> proof</c><00:02:39.840><c> by</c><00:02:40.080><c> induction</c><00:02:40.260><c> that</c><00:02:40.920><c> if</c><00:02:41.070><c> you</c>

00:02:41.180 --> 00:02:41.190 align:start position:0%
a proof by induction that if you
 

00:02:41.190 --> 00:02:43.580 align:start position:0%
a proof by induction that if you
initialize<00:02:41.520><c> all</c><00:02:41.790><c> the</c><00:02:41.970><c> ways</c><00:02:42.150><c> all</c><00:02:42.480><c> the</c><00:02:42.690><c> values</c>

00:02:43.580 --> 00:02:43.590 align:start position:0%
initialize all the ways all the values
 

00:02:43.590 --> 00:02:47.480 align:start position:0%
initialize all the ways all the values
of<00:02:43.770><c> W</c><00:02:44.100><c> to</c><00:02:44.250><c> 0</c><00:02:44.580><c> then</c><00:02:45.330><c> because</c><00:02:46.020><c> both</c><00:02:46.770><c> hidden</c><00:02:47.010><c> units</c>

00:02:47.480 --> 00:02:47.490 align:start position:0%
of W to 0 then because both hidden units
 

00:02:47.490 --> 00:02:49.430 align:start position:0%
of W to 0 then because both hidden units
start<00:02:47.970><c> off</c><00:02:48.150><c> computing</c><00:02:48.690><c> the</c><00:02:48.810><c> same</c><00:02:48.990><c> function</c>

00:02:49.430 --> 00:02:49.440 align:start position:0%
start off computing the same function
 

00:02:49.440 --> 00:02:51.560 align:start position:0%
start off computing the same function
and<00:02:49.620><c> both</c><00:02:49.890><c> hidden</c><00:02:50.190><c> units</c><00:02:50.550><c> have</c><00:02:51.120><c> the</c><00:02:51.330><c> same</c>

00:02:51.560 --> 00:02:51.570 align:start position:0%
and both hidden units have the same
 

00:02:51.570 --> 00:02:55.040 align:start position:0%
and both hidden units have the same
influence<00:02:52.020><c> on</c><00:02:52.470><c> the</c><00:02:53.040><c> output</c><00:02:53.400><c> unit</c><00:02:53.790><c> then</c><00:02:54.540><c> after</c>

00:02:55.040 --> 00:02:55.050 align:start position:0%
influence on the output unit then after
 

00:02:55.050 --> 00:02:57.590 align:start position:0%
influence on the output unit then after
one<00:02:55.230><c> iteration</c><00:02:55.700><c> that</c><00:02:56.700><c> same</c><00:02:57.060><c> statement</c><00:02:57.510><c> is</c>

00:02:57.590 --> 00:02:57.600 align:start position:0%
one iteration that same statement is
 

00:02:57.600 --> 00:02:59.330 align:start position:0%
one iteration that same statement is
still<00:02:57.870><c> true</c><00:02:58.170><c> the</c><00:02:58.410><c> two</c><00:02:58.620><c> hidden</c><00:02:58.800><c> units</c><00:02:58.950><c> are</c>

00:02:59.330 --> 00:02:59.340 align:start position:0%
still true the two hidden units are
 

00:02:59.340 --> 00:03:01.160 align:start position:0%
still true the two hidden units are
still<00:02:59.550><c> symmetric</c><00:03:00.180><c> and</c><00:03:00.420><c> therefore</c><00:03:00.989><c> by</c>

00:03:01.160 --> 00:03:01.170 align:start position:0%
still symmetric and therefore by
 

00:03:01.170 --> 00:03:02.990 align:start position:0%
still symmetric and therefore by
induction<00:03:01.620><c> after</c><00:03:02.130><c> two</c><00:03:02.310><c> iterations</c><00:03:02.489><c> three</c>

00:03:02.990 --> 00:03:03.000 align:start position:0%
induction after two iterations three
 

00:03:03.000 --> 00:03:05.090 align:start position:0%
induction after two iterations three
iterations<00:03:03.150><c> and</c><00:03:03.600><c> so</c><00:03:03.750><c> on</c><00:03:03.900><c> no</c><00:03:04.500><c> matter</c><00:03:04.709><c> how</c><00:03:04.950><c> long</c>

00:03:05.090 --> 00:03:05.100 align:start position:0%
iterations and so on no matter how long
 

00:03:05.100 --> 00:03:07.250 align:start position:0%
iterations and so on no matter how long
you<00:03:05.250><c> train</c><00:03:05.459><c> in</c><00:03:05.610><c> your</c><00:03:05.730><c> network</c><00:03:06.120><c> both</c><00:03:06.930><c> hidden</c>

00:03:07.250 --> 00:03:07.260 align:start position:0%
you train in your network both hidden
 

00:03:07.260 --> 00:03:09.500 align:start position:0%
you train in your network both hidden
units<00:03:07.620><c> are</c><00:03:07.800><c> still</c><00:03:08.100><c> computing</c><00:03:08.700><c> exactly</c><00:03:09.360><c> the</c>

00:03:09.500 --> 00:03:09.510 align:start position:0%
units are still computing exactly the
 

00:03:09.510 --> 00:03:11.750 align:start position:0%
units are still computing exactly the
same<00:03:09.690><c> function</c><00:03:10.170><c> and</c><00:03:10.350><c> so</c><00:03:10.800><c> in</c><00:03:11.370><c> this</c><00:03:11.550><c> case</c>

00:03:11.750 --> 00:03:11.760 align:start position:0%
same function and so in this case
 

00:03:11.760 --> 00:03:14.090 align:start position:0%
same function and so in this case
there's<00:03:12.060><c> really</c><00:03:12.120><c> no</c><00:03:12.480><c> point</c><00:03:12.750><c> to</c><00:03:13.050><c> having</c><00:03:13.380><c> more</c>

00:03:14.090 --> 00:03:14.100 align:start position:0%
there's really no point to having more
 

00:03:14.100 --> 00:03:15.650 align:start position:0%
there's really no point to having more
than<00:03:14.130><c> one</c><00:03:14.310><c> hidden</c><00:03:14.760><c> unit</c><00:03:15.180><c> because</c><00:03:15.450><c> they're</c><00:03:15.570><c> all</c>

00:03:15.650 --> 00:03:15.660 align:start position:0%
than one hidden unit because they're all
 

00:03:15.660 --> 00:03:17.870 align:start position:0%
than one hidden unit because they're all
computing<00:03:16.110><c> the</c><00:03:16.200><c> same</c><00:03:16.380><c> thing</c><00:03:16.620><c> and</c><00:03:16.980><c> of</c><00:03:17.610><c> course</c>

00:03:17.870 --> 00:03:17.880 align:start position:0%
computing the same thing and of course
 

00:03:17.880 --> 00:03:20.449 align:start position:0%
computing the same thing and of course
for<00:03:18.450><c> larger</c><00:03:18.810><c> neural</c><00:03:19.049><c> networks</c><00:03:19.470><c> less</c><00:03:20.190><c> you</c><00:03:20.340><c> have</c>

00:03:20.449 --> 00:03:20.459 align:start position:0%
for larger neural networks less you have
 

00:03:20.459 --> 00:03:22.640 align:start position:0%
for larger neural networks less you have
three<00:03:20.670><c> features</c><00:03:20.880><c> and</c><00:03:21.420><c> maybe</c><00:03:21.900><c> a</c><00:03:22.019><c> very</c><00:03:22.350><c> large</c>

00:03:22.640 --> 00:03:22.650 align:start position:0%
three features and maybe a very large
 

00:03:22.650 --> 00:03:24.800 align:start position:0%
three features and maybe a very large
number<00:03:22.980><c> of</c><00:03:23.010><c> hidden</c><00:03:23.190><c> units</c><00:03:23.340><c> a</c><00:03:23.970><c> similar</c>

00:03:24.800 --> 00:03:24.810 align:start position:0%
number of hidden units a similar
 

00:03:24.810 --> 00:03:28.280 align:start position:0%
number of hidden units a similar
argument<00:03:24.989><c> works</c><00:03:25.530><c> to</c><00:03:26.370><c> show</c><00:03:26.610><c> that</c><00:03:27.140><c> we're</c><00:03:28.140><c> gonna</c>

00:03:28.280 --> 00:03:28.290 align:start position:0%
argument works to show that we're gonna
 

00:03:28.290 --> 00:03:31.430 align:start position:0%
argument works to show that we're gonna
network<00:03:28.860><c> like</c><00:03:29.070><c> this</c><00:03:29.959><c> because</c><00:03:30.959><c> I</c><00:03:31.049><c> won't</c><00:03:31.230><c> drawn</c>

00:03:31.430 --> 00:03:31.440 align:start position:0%
network like this because I won't drawn
 

00:03:31.440 --> 00:03:33.860 align:start position:0%
network like this because I won't drawn
all<00:03:31.590><c> the</c><00:03:31.709><c> edges</c><00:03:32.010><c> if</c><00:03:32.730><c> you</c><00:03:33.090><c> initialize</c><00:03:33.510><c> the</c><00:03:33.720><c> ways</c>

00:03:33.860 --> 00:03:33.870 align:start position:0%
all the edges if you initialize the ways
 

00:03:33.870 --> 00:03:35.900 align:start position:0%
all the edges if you initialize the ways
to<00:03:34.049><c> zero</c><00:03:34.350><c> then</c><00:03:34.680><c> all</c><00:03:34.860><c> of</c><00:03:34.920><c> your</c><00:03:35.250><c> hidden</c><00:03:35.459><c> units</c>

00:03:35.900 --> 00:03:35.910 align:start position:0%
to zero then all of your hidden units
 

00:03:35.910 --> 00:03:38.750 align:start position:0%
to zero then all of your hidden units
are<00:03:36.180><c> symmetric</c><00:03:36.930><c> and</c><00:03:37.140><c> no</c><00:03:38.010><c> matter</c><00:03:38.220><c> how</c><00:03:38.430><c> long</c><00:03:38.580><c> you</c>

00:03:38.750 --> 00:03:38.760 align:start position:0%
are symmetric and no matter how long you
 

00:03:38.760 --> 00:03:40.039 align:start position:0%
are symmetric and no matter how long you
run<00:03:38.940><c> gradient</c><00:03:39.090><c> descent</c><00:03:39.360><c> they'll</c><00:03:39.810><c> all</c>

00:03:40.039 --> 00:03:40.049 align:start position:0%
run gradient descent they'll all
 

00:03:40.049 --> 00:03:42.500 align:start position:0%
run gradient descent they'll all
continue<00:03:40.890><c> to</c><00:03:41.040><c> compute</c><00:03:41.459><c> exactly</c><00:03:42.180><c> the</c><00:03:42.330><c> same</c>

00:03:42.500 --> 00:03:42.510 align:start position:0%
continue to compute exactly the same
 

00:03:42.510 --> 00:03:45.710 align:start position:0%
continue to compute exactly the same
function<00:03:43.190><c> so</c><00:03:44.190><c> that's</c><00:03:44.430><c> not</c><00:03:44.640><c> helpful</c><00:03:45.060><c> because</c>

00:03:45.710 --> 00:03:45.720 align:start position:0%
function so that's not helpful because
 

00:03:45.720 --> 00:03:47.660 align:start position:0%
function so that's not helpful because
you<00:03:46.230><c> want</c><00:03:46.440><c> two</c><00:03:46.560><c> different</c><00:03:46.680><c> hidden</c><00:03:47.040><c> units</c><00:03:47.459><c> to</c>

00:03:47.660 --> 00:03:47.670 align:start position:0%
you want two different hidden units to
 

00:03:47.670 --> 00:03:50.240 align:start position:0%
you want two different hidden units to
compute<00:03:48.120><c> different</c><00:03:48.780><c> functions</c><00:03:49.230><c> the</c><00:03:49.410><c> solution</c>

00:03:50.240 --> 00:03:50.250 align:start position:0%
compute different functions the solution
 

00:03:50.250 --> 00:03:52.460 align:start position:0%
compute different functions the solution
to<00:03:50.400><c> this</c><00:03:50.549><c> is</c><00:03:50.850><c> to</c><00:03:50.910><c> initialize</c><00:03:51.600><c> your</c><00:03:51.630><c> parameters</c>

00:03:52.460 --> 00:03:52.470 align:start position:0%
to this is to initialize your parameters
 

00:03:52.470 --> 00:03:56.360 align:start position:0%
to this is to initialize your parameters
randomly<00:03:53.220><c> so</c><00:03:53.970><c> here's</c><00:03:54.239><c> what</c><00:03:54.420><c> you</c><00:03:54.570><c> do</c><00:03:55.130><c> you</c><00:03:56.130><c> can</c>

00:03:56.360 --> 00:03:56.370 align:start position:0%
randomly so here's what you do you can
 

00:03:56.370 --> 00:04:02.180 align:start position:0%
randomly so here's what you do you can
set<00:03:57.260><c> W</c><00:03:58.260><c> 1</c><00:03:58.440><c> equals</c><00:03:59.220><c> NP</c><00:03:59.750><c> about</c><00:04:00.750><c> random</c><00:04:01.410><c> dot</c><00:04:01.920><c> R</c><00:04:01.950><c> and</c>

00:04:02.180 --> 00:04:02.190 align:start position:0%
set W 1 equals NP about random dot R and
 

00:04:02.190 --> 00:04:04.850 align:start position:0%
set W 1 equals NP about random dot R and
n<00:04:02.810><c> this</c><00:04:03.810><c> generates</c><00:04:04.260><c> a</c><00:04:04.380><c> Gaussian</c><00:04:04.830><c> random</c>

00:04:04.850 --> 00:04:04.860 align:start position:0%
n this generates a Gaussian random
 

00:04:04.860 --> 00:04:08.900 align:start position:0%
n this generates a Gaussian random
variable<00:04:05.750><c> to</c><00:04:06.750><c> 2</c><00:04:07.019><c> and</c><00:04:07.290><c> then</c><00:04:08.190><c> usually</c><00:04:08.459><c> you</c>

00:04:08.900 --> 00:04:08.910 align:start position:0%
variable to 2 and then usually you
 

00:04:08.910 --> 00:04:10.699 align:start position:0%
variable to 2 and then usually you
multiply<00:04:09.540><c> this</c><00:04:09.600><c> by</c><00:04:09.989><c> a</c><00:04:10.019><c> very</c><00:04:10.320><c> small</c><00:04:10.440><c> number</c>

00:04:10.699 --> 00:04:10.709 align:start position:0%
multiply this by a very small number
 

00:04:10.709 --> 00:04:13.520 align:start position:0%
multiply this by a very small number
such<00:04:11.400><c> as</c><00:04:11.430><c> 0.01</c><00:04:12.299><c> so</c><00:04:12.780><c> you</c><00:04:12.840><c> initialize</c><00:04:13.260><c> it</c><00:04:13.500><c> to</c>

00:04:13.520 --> 00:04:13.530 align:start position:0%
such as 0.01 so you initialize it to
 

00:04:13.530 --> 00:04:17.170 align:start position:0%
such as 0.01 so you initialize it to
very<00:04:13.860><c> small</c><00:04:13.980><c> random</c><00:04:14.400><c> values</c><00:04:14.940><c> and</c><00:04:15.239><c> then</c><00:04:16.169><c> be</c><00:04:16.470><c> um</c>

00:04:17.170 --> 00:04:17.180 align:start position:0%
very small random values and then be um
 

00:04:17.180 --> 00:04:20.659 align:start position:0%
very small random values and then be um
it<00:04:18.180><c> turns</c><00:04:18.540><c> out</c><00:04:18.810><c> that</c><00:04:19.109><c> B</c><00:04:19.650><c> does</c><00:04:19.979><c> not</c><00:04:20.010><c> have</c><00:04:20.459><c> this</c>

00:04:20.659 --> 00:04:20.669 align:start position:0%
it turns out that B does not have this
 

00:04:20.669 --> 00:04:22.610 align:start position:0%
it turns out that B does not have this
symmetry<00:04:21.120><c> problem</c><00:04:21.930><c> what's</c><00:04:22.349><c> called</c><00:04:22.560><c> the</c>

00:04:22.610 --> 00:04:22.620 align:start position:0%
symmetry problem what's called the
 

00:04:22.620 --> 00:04:24.620 align:start position:0%
symmetry problem what's called the
symmetry<00:04:23.039><c> breaking</c><00:04:23.190><c> problem</c>

00:04:24.620 --> 00:04:24.630 align:start position:0%
symmetry breaking problem
 

00:04:24.630 --> 00:04:29.540 align:start position:0%
symmetry breaking problem
so<00:04:24.780><c> is</c><00:04:25.110><c> okay</c><00:04:25.890><c> to</c><00:04:25.950><c> initialize</c><00:04:26.610><c> B</c><00:04:27.570><c> to</c><00:04:28.470><c> just</c><00:04:28.830><c> zeros</c>

00:04:29.540 --> 00:04:29.550 align:start position:0%
so is okay to initialize B to just zeros
 

00:04:29.550 --> 00:04:31.670 align:start position:0%
so is okay to initialize B to just zeros
because<00:04:30.120><c> so</c><00:04:30.330><c> long</c><00:04:30.480><c> as</c><00:04:30.540><c> WS</c><00:04:31.200><c> initialize</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
because so long as WS initialize
 

00:04:31.680 --> 00:04:33.950 align:start position:0%
because so long as WS initialize
randomly<00:04:32.280><c> you</c><00:04:32.790><c> start</c><00:04:33.120><c> top</c><00:04:33.330><c> of</c><00:04:33.540><c> the</c><00:04:33.630><c> different</c>

00:04:33.950 --> 00:04:33.960 align:start position:0%
randomly you start top of the different
 

00:04:33.960 --> 00:04:36.050 align:start position:0%
randomly you start top of the different
hidden<00:04:34.110><c> units</c><00:04:34.560><c> computing</c><00:04:35.460><c> different</c><00:04:35.820><c> things</c>

00:04:36.050 --> 00:04:36.060 align:start position:0%
hidden units computing different things
 

00:04:36.060 --> 00:04:38.030 align:start position:0%
hidden units computing different things
and<00:04:36.330><c> so</c><00:04:36.600><c> you</c><00:04:36.630><c> no</c><00:04:36.900><c> longer</c><00:04:36.960><c> have</c><00:04:37.590><c> this</c><00:04:37.740><c> some</c>

00:04:38.030 --> 00:04:38.040 align:start position:0%
and so you no longer have this some
 

00:04:38.040 --> 00:04:40.490 align:start position:0%
and so you no longer have this some
symmetry<00:04:38.670><c> breaking</c><00:04:38.940><c> problem</c><00:04:39.570><c> and</c><00:04:39.930><c> then</c>

00:04:40.490 --> 00:04:40.500 align:start position:0%
symmetry breaking problem and then
 

00:04:40.500 --> 00:04:43.340 align:start position:0%
symmetry breaking problem and then
similarly<00:04:40.920><c> for</c><00:04:41.220><c> w2</c><00:04:42.210><c> you</c><00:04:42.540><c> can</c><00:04:42.660><c> initialize</c><00:04:43.110><c> that</c>

00:04:43.340 --> 00:04:43.350 align:start position:0%
similarly for w2 you can initialize that
 

00:04:43.350 --> 00:04:48.320 align:start position:0%
similarly for w2 you can initialize that
randomly<00:04:43.800><c> and</c><00:04:44.990><c> b2</c><00:04:46.460><c> you</c><00:04:47.460><c> can</c><00:04:47.610><c> initialize</c><00:04:48.030><c> that</c>

00:04:48.320 --> 00:04:48.330 align:start position:0%
randomly and b2 you can initialize that
 

00:04:48.330 --> 00:04:51.950 align:start position:0%
randomly and b2 you can initialize that
to<00:04:49.010><c> zero</c><00:04:50.010><c> so</c><00:04:50.820><c> you</c><00:04:50.850><c> might</c><00:04:51.150><c> be</c><00:04:51.300><c> wondering</c><00:04:51.510><c> you</c>

00:04:51.950 --> 00:04:51.960 align:start position:0%
to zero so you might be wondering you
 

00:04:51.960 --> 00:04:53.570 align:start position:0%
to zero so you might be wondering you
know<00:04:51.990><c> where</c><00:04:52.350><c> did</c><00:04:52.470><c> this</c><00:04:52.620><c> constant</c><00:04:53.190><c> come</c><00:04:53.340><c> from</c>

00:04:53.570 --> 00:04:53.580 align:start position:0%
know where did this constant come from
 

00:04:53.580 --> 00:04:56.570 align:start position:0%
know where did this constant come from
and<00:04:53.760><c> why</c><00:04:53.880><c> is</c><00:04:53.940><c> it</c><00:04:54.110><c> 0.01</c><00:04:55.110><c> why</c><00:04:55.800><c> not</c><00:04:56.010><c> put</c><00:04:56.460><c> the</c>

00:04:56.570 --> 00:04:56.580 align:start position:0%
and why is it 0.01 why not put the
 

00:04:56.580 --> 00:04:59.990 align:start position:0%
and why is it 0.01 why not put the
number<00:04:56.910><c> 100</c><00:04:57.810><c> or</c><00:04:57.990><c> 1000</c><00:04:58.740><c> turns</c><00:04:59.400><c> out</c><00:04:59.580><c> that</c><00:04:59.790><c> we</c>

00:04:59.990 --> 00:05:00.000 align:start position:0%
number 100 or 1000 turns out that we
 

00:05:00.000 --> 00:05:02.420 align:start position:0%
number 100 or 1000 turns out that we
usually<00:05:00.210><c> prefer</c><00:05:00.990><c> to</c><00:05:01.320><c> initialize</c><00:05:01.830><c> the</c><00:05:02.010><c> ways</c><00:05:02.190><c> to</c>

00:05:02.420 --> 00:05:02.430 align:start position:0%
usually prefer to initialize the ways to
 

00:05:02.430 --> 00:05:06.470 align:start position:0%
usually prefer to initialize the ways to
get<00:05:02.610><c> very</c><00:05:02.940><c> small</c><00:05:03.060><c> random</c><00:05:03.630><c> values</c><00:05:05.210><c> because</c><00:05:06.210><c> um</c>

00:05:06.470 --> 00:05:06.480 align:start position:0%
get very small random values because um
 

00:05:06.480 --> 00:05:09.800 align:start position:0%
get very small random values because um
if<00:05:06.810><c> you're</c><00:05:06.960><c> using</c><00:05:07.230><c> a</c><00:05:07.650><c> satanic</c><00:05:08.640><c> or</c><00:05:09.060><c> sigmoid</c>

00:05:09.800 --> 00:05:09.810 align:start position:0%
if you're using a satanic or sigmoid
 

00:05:09.810 --> 00:05:11.360 align:start position:0%
if you're using a satanic or sigmoid
activation<00:05:09.960><c> function</c><00:05:10.380><c> or</c><00:05:11.040><c> if</c><00:05:11.160><c> you</c><00:05:11.220><c> have</c><00:05:11.340><c> a</c>

00:05:11.360 --> 00:05:11.370 align:start position:0%
activation function or if you have a
 

00:05:11.370 --> 00:05:14.060 align:start position:0%
activation function or if you have a
sigmoid<00:05:11.850><c> even</c><00:05:12.390><c> just</c><00:05:12.570><c> at</c><00:05:12.690><c> the</c><00:05:12.810><c> output</c><00:05:13.170><c> layer</c><00:05:13.320><c> if</c>

00:05:14.060 --> 00:05:14.070 align:start position:0%
sigmoid even just at the output layer if
 

00:05:14.070 --> 00:05:17.810 align:start position:0%
sigmoid even just at the output layer if
the<00:05:14.640><c> weights</c><00:05:14.850><c> are</c><00:05:15.060><c> too</c><00:05:15.090><c> large</c><00:05:15.510><c> then</c><00:05:16.730><c> when</c><00:05:17.730><c> you</c>

00:05:17.810 --> 00:05:17.820 align:start position:0%
the weights are too large then when you
 

00:05:17.820 --> 00:05:20.180 align:start position:0%
the weights are too large then when you
compute<00:05:18.150><c> the</c><00:05:18.300><c> activation</c><00:05:18.990><c> values</c><00:05:19.500><c> remember</c>

00:05:20.180 --> 00:05:20.190 align:start position:0%
compute the activation values remember
 

00:05:20.190 --> 00:05:28.000 align:start position:0%
compute the activation values remember
that<00:05:20.570><c> Z</c><00:05:21.570><c> 1</c><00:05:22.260><c> is</c><00:05:22.560><c> equal</c><00:05:23.100><c> to</c><00:05:23.450><c> W</c><00:05:24.450><c> 1</c><00:05:24.530><c> X</c><00:05:25.530><c> plus</c><00:05:26.540><c> B</c><00:05:27.540><c> and</c>

00:05:28.000 --> 00:05:28.010 align:start position:0%
that Z 1 is equal to W 1 X plus B and
 

00:05:28.010 --> 00:05:31.670 align:start position:0%
that Z 1 is equal to W 1 X plus B and
then<00:05:29.010><c> on</c><00:05:29.250><c> a</c><00:05:29.520><c> 1</c><00:05:30.180><c> is</c><00:05:30.720><c> the</c><00:05:31.020><c> activation</c><00:05:31.650><c> function</c>

00:05:31.670 --> 00:05:31.680 align:start position:0%
then on a 1 is the activation function
 

00:05:31.680 --> 00:05:37.670 align:start position:0%
then on a 1 is the activation function
applied<00:05:32.310><c> to</c><00:05:33.650><c> Z</c><00:05:34.650><c> 1</c><00:05:34.890><c> so</c><00:05:35.610><c> if</c><00:05:35.850><c> W</c><00:05:36.300><c> is</c><00:05:36.420><c> very</c><00:05:36.630><c> big</c><00:05:36.960><c> Z</c>

00:05:37.670 --> 00:05:37.680 align:start position:0%
applied to Z 1 so if W is very big Z
 

00:05:37.680 --> 00:05:40.010 align:start position:0%
applied to Z 1 so if W is very big Z
will<00:05:37.950><c> be</c><00:05:38.040><c> very</c><00:05:38.280><c> big</c><00:05:38.550><c> or</c><00:05:39.060><c> at</c><00:05:39.150><c> least</c><00:05:39.330><c> some</c><00:05:39.660><c> values</c>

00:05:40.010 --> 00:05:40.020 align:start position:0%
will be very big or at least some values
 

00:05:40.020 --> 00:05:42.520 align:start position:0%
will be very big or at least some values
of<00:05:40.170><c> Z</c><00:05:40.350><c> will</c><00:05:40.560><c> be</c><00:05:40.590><c> either</c><00:05:41.310><c> very</c><00:05:41.790><c> large</c><00:05:42.060><c> or</c><00:05:42.450><c> very</c>

00:05:42.520 --> 00:05:42.530 align:start position:0%
of Z will be either very large or very
 

00:05:42.530 --> 00:05:45.860 align:start position:0%
of Z will be either very large or very
small<00:05:43.530><c> and</c><00:05:43.860><c> so</c><00:05:44.520><c> in</c><00:05:45.000><c> that</c><00:05:45.240><c> case</c><00:05:45.510><c> you're</c><00:05:45.720><c> more</c>

00:05:45.860 --> 00:05:45.870 align:start position:0%
small and so in that case you're more
 

00:05:45.870 --> 00:05:48.770 align:start position:0%
small and so in that case you're more
likely<00:05:46.080><c> to</c><00:05:46.410><c> end</c><00:05:46.560><c> up</c><00:05:46.740><c> at</c><00:05:46.980><c> these</c><00:05:47.490><c> flat</c><00:05:48.000><c> parts</c><00:05:48.540><c> of</c>

00:05:48.770 --> 00:05:48.780 align:start position:0%
likely to end up at these flat parts of
 

00:05:48.780 --> 00:05:52.160 align:start position:0%
likely to end up at these flat parts of
the<00:05:49.320><c> 10h</c><00:05:50.040><c> function</c><00:05:50.670><c> or</c><00:05:50.850><c> the</c><00:05:51.060><c> sigmoid</c><00:05:51.750><c> function</c>

00:05:52.160 --> 00:05:52.170 align:start position:0%
the 10h function or the sigmoid function
 

00:05:52.170 --> 00:05:54.530 align:start position:0%
the 10h function or the sigmoid function
where<00:05:53.010><c> the</c><00:05:53.040><c> slope</c><00:05:53.490><c> of</c><00:05:53.610><c> the</c><00:05:53.730><c> gradient</c><00:05:54.150><c> is</c><00:05:54.330><c> very</c>

00:05:54.530 --> 00:05:54.540 align:start position:0%
where the slope of the gradient is very
 

00:05:54.540 --> 00:05:57.200 align:start position:0%
where the slope of the gradient is very
small<00:05:55.380><c> meaning</c><00:05:56.220><c> that</c><00:05:56.250><c> gradient</c><00:05:56.880><c> descent</c>

00:05:57.200 --> 00:05:57.210 align:start position:0%
small meaning that gradient descent
 

00:05:57.210 --> 00:05:59.180 align:start position:0%
small meaning that gradient descent
would<00:05:57.570><c> be</c><00:05:57.750><c> very</c><00:05:57.960><c> slow</c><00:05:58.320><c> and</c><00:05:58.350><c> so</c><00:05:58.650><c> learning</c><00:05:59.070><c> was</c>

00:05:59.180 --> 00:05:59.190 align:start position:0%
would be very slow and so learning was
 

00:05:59.190 --> 00:06:02.960 align:start position:0%
would be very slow and so learning was
very<00:05:59.460><c> slow</c><00:06:00.020><c> so</c><00:06:01.020><c> just</c><00:06:01.260><c> a</c><00:06:01.320><c> recap</c><00:06:01.500><c> if</c><00:06:02.010><c> W</c><00:06:02.550><c> is</c><00:06:02.700><c> too</c>

00:06:02.960 --> 00:06:02.970 align:start position:0%
very slow so just a recap if W is too
 

00:06:02.970 --> 00:06:05.510 align:start position:0%
very slow so just a recap if W is too
large<00:06:03.210><c> you're</c><00:06:04.050><c> more</c><00:06:04.230><c> likely</c><00:06:04.440><c> to</c><00:06:04.650><c> end</c><00:06:04.800><c> up</c><00:06:05.100><c> even</c>

00:06:05.510 --> 00:06:05.520 align:start position:0%
large you're more likely to end up even
 

00:06:05.520 --> 00:06:07.100 align:start position:0%
large you're more likely to end up even
at<00:06:05.670><c> the</c><00:06:05.730><c> very</c><00:06:05.910><c> start</c><00:06:06.000><c> of</c><00:06:06.360><c> training</c><00:06:06.630><c> with</c><00:06:06.960><c> very</c>

00:06:07.100 --> 00:06:07.110 align:start position:0%
at the very start of training with very
 

00:06:07.110 --> 00:06:10.130 align:start position:0%
at the very start of training with very
large<00:06:07.320><c> values</c><00:06:07.800><c> of</c><00:06:07.830><c> Z</c><00:06:08.220><c> which</c><00:06:08.940><c> causes</c><00:06:09.510><c> your</c><00:06:09.780><c> 10</c><00:06:10.110><c> a</c>

00:06:10.130 --> 00:06:10.140 align:start position:0%
large values of Z which causes your 10 a
 

00:06:10.140 --> 00:06:12.050 align:start position:0%
large values of Z which causes your 10 a
to<00:06:10.380><c> a</c><00:06:10.410><c> sigmoid</c><00:06:10.860><c> activation</c><00:06:10.980><c> function</c><00:06:11.430><c> to</c><00:06:11.970><c> be</c>

00:06:12.050 --> 00:06:12.060 align:start position:0%
to a sigmoid activation function to be
 

00:06:12.060 --> 00:06:15.140 align:start position:0%
to a sigmoid activation function to be
saturated<00:06:12.300><c> on</c><00:06:13.070><c> the</c><00:06:14.070><c> slowing</c><00:06:14.490><c> down</c><00:06:14.640><c> learning</c>

00:06:15.140 --> 00:06:15.150 align:start position:0%
saturated on the slowing down learning
 

00:06:15.150 --> 00:06:17.720 align:start position:0%
saturated on the slowing down learning
if<00:06:16.140><c> you</c><00:06:16.230><c> don't</c><00:06:16.440><c> have</c><00:06:16.590><c> any</c><00:06:16.710><c> Sigma</c><00:06:17.190><c> naught</c><00:06:17.340><c> NH</c>

00:06:17.720 --> 00:06:17.730 align:start position:0%
if you don't have any Sigma naught NH
 

00:06:17.730 --> 00:06:19.130 align:start position:0%
if you don't have any Sigma naught NH
activation<00:06:18.360><c> functions</c><00:06:18.750><c> throughout</c><00:06:19.050><c> your</c>

00:06:19.130 --> 00:06:19.140 align:start position:0%
activation functions throughout your
 

00:06:19.140 --> 00:06:21.440 align:start position:0%
activation functions throughout your
neural<00:06:19.410><c> network</c><00:06:19.770><c> this</c><00:06:20.490><c> is</c><00:06:20.550><c> less</c><00:06:21.090><c> of</c><00:06:21.120><c> an</c><00:06:21.330><c> issue</c>

00:06:21.440 --> 00:06:21.450 align:start position:0%
neural network this is less of an issue
 

00:06:21.450 --> 00:06:23.690 align:start position:0%
neural network this is less of an issue
but<00:06:22.020><c> if</c><00:06:22.260><c> you're</c><00:06:22.380><c> doing</c><00:06:22.680><c> binary</c><00:06:22.890><c> consultation</c>

00:06:23.690 --> 00:06:23.700 align:start position:0%
but if you're doing binary consultation
 

00:06:23.700 --> 00:06:25.640 align:start position:0%
but if you're doing binary consultation
and<00:06:23.970><c> your</c><00:06:24.180><c> output</c><00:06:24.420><c> unit</c><00:06:24.930><c> is</c><00:06:25.110><c> a</c><00:06:25.140><c> sigmoid</c>

00:06:25.640 --> 00:06:25.650 align:start position:0%
and your output unit is a sigmoid
 

00:06:25.650 --> 00:06:27.620 align:start position:0%
and your output unit is a sigmoid
function<00:06:26.070><c> then</c><00:06:26.730><c> you</c><00:06:27.000><c> know</c><00:06:27.150><c> you</c><00:06:27.270><c> just</c><00:06:27.420><c> don't</c>

00:06:27.620 --> 00:06:27.630 align:start position:0%
function then you know you just don't
 

00:06:27.630 --> 00:06:29.600 align:start position:0%
function then you know you just don't
want<00:06:27.870><c> the</c><00:06:28.020><c> initial</c><00:06:28.410><c> parameters</c><00:06:29.070><c> to</c><00:06:29.280><c> be</c><00:06:29.400><c> too</c>

00:06:29.600 --> 00:06:29.610 align:start position:0%
want the initial parameters to be too
 

00:06:29.610 --> 00:06:33.200 align:start position:0%
want the initial parameters to be too
large<00:06:29.820><c> so</c><00:06:30.240><c> that's</c><00:06:31.020><c> why</c><00:06:31.260><c> multiplying</c><00:06:31.860><c> by</c><00:06:32.210><c> 0.01</c>

00:06:33.200 --> 00:06:33.210 align:start position:0%
large so that's why multiplying by 0.01
 

00:06:33.210 --> 00:06:35.719 align:start position:0%
large so that's why multiplying by 0.01
would<00:06:33.810><c> be</c><00:06:33.960><c> something</c><00:06:34.200><c> reasonable</c><00:06:34.979><c> to</c><00:06:35.130><c> try</c><00:06:35.310><c> or</c>

00:06:35.719 --> 00:06:35.729 align:start position:0%
would be something reasonable to try or
 

00:06:35.729 --> 00:06:38.780 align:start position:0%
would be something reasonable to try or
any<00:06:35.880><c> other</c><00:06:36.090><c> small</c><00:06:36.540><c> number</c><00:06:37.110><c> and</c><00:06:37.290><c> same</c><00:06:37.830><c> for</c><00:06:37.860><c> W</c><00:06:38.340><c> 2</c>

00:06:38.780 --> 00:06:38.790 align:start position:0%
any other small number and same for W 2
 

00:06:38.790 --> 00:06:44.000 align:start position:0%
any other small number and same for W 2
it<00:06:38.820><c> can</c><00:06:39.240><c> be</c><00:06:39.480><c> a</c><00:06:40.130><c> random</c><00:06:41.330><c> random</c><00:06:42.330><c> I</c><00:06:42.800><c> guess</c><00:06:43.800><c> this</c>

00:06:44.000 --> 00:06:44.010 align:start position:0%
it can be a random random I guess this
 

00:06:44.010 --> 00:06:47.390 align:start position:0%
it can be a random random I guess this
would<00:06:44.220><c> be</c><00:06:44.250><c> 1</c><00:06:44.880><c> by</c><00:06:45.240><c> 2</c><00:06:45.270><c> in</c><00:06:45.840><c> this</c><00:06:45.960><c> example</c><00:06:46.400><c> times</c>

00:06:47.390 --> 00:06:47.400 align:start position:0%
would be 1 by 2 in this example times
 

00:06:47.400 --> 00:06:54.530 align:start position:0%
would be 1 by 2 in this example times
0.01<00:06:49.010><c> Sigma</c><00:06:50.010><c> s</c><00:06:50.700><c> there</c><00:06:51.170><c> so</c><00:06:52.170><c> finally</c><00:06:53.180><c> it</c><00:06:54.180><c> turns</c>

00:06:54.530 --> 00:06:54.540 align:start position:0%
0.01 Sigma s there so finally it turns
 

00:06:54.540 --> 00:06:56.900 align:start position:0%
0.01 Sigma s there so finally it turns
out<00:06:54.750><c> that</c><00:06:55.050><c> sometimes</c><00:06:55.800><c> they</c><00:06:56.250><c> can</c><00:06:56.520><c> be</c><00:06:56.550><c> better</c>

00:06:56.900 --> 00:06:56.910 align:start position:0%
out that sometimes they can be better
 

00:06:56.910 --> 00:07:01.430 align:start position:0%
out that sometimes they can be better
constants<00:06:57.660><c> than</c><00:06:59.000><c> 0.01</c><00:07:00.050><c> when</c><00:07:01.050><c> you're</c><00:07:01.200><c> training</c>

00:07:01.430 --> 00:07:01.440 align:start position:0%
constants than 0.01 when you're training
 

00:07:01.440 --> 00:07:04.460 align:start position:0%
constants than 0.01 when you're training
a<00:07:01.890><c> neural</c><00:07:02.790><c> network</c><00:07:03.210><c> with</c><00:07:03.450><c> just</c><00:07:03.690><c> one</c><00:07:04.230><c> hidden</c>

00:07:04.460 --> 00:07:04.470 align:start position:0%
a neural network with just one hidden
 

00:07:04.470 --> 00:07:06.890 align:start position:0%
a neural network with just one hidden
layer<00:07:04.620><c> this</c><00:07:05.190><c> is</c><00:07:05.310><c> a</c><00:07:05.370><c> relatively</c><00:07:05.820><c> shallow</c><00:07:06.180><c> you</c>

00:07:06.890 --> 00:07:06.900 align:start position:0%
layer this is a relatively shallow you
 

00:07:06.900 --> 00:07:08.570 align:start position:0%
layer this is a relatively shallow you
know<00:07:06.990><c> network</c><00:07:07.410><c> without</c><00:07:07.740><c> too</c><00:07:08.160><c> many</c><00:07:08.310><c> hidden</c>

00:07:08.570 --> 00:07:08.580 align:start position:0%
know network without too many hidden
 

00:07:08.580 --> 00:07:11.690 align:start position:0%
know network without too many hidden
layers<00:07:08.930><c> set</c><00:07:09.930><c> into</c><00:07:10.230><c> 0.01</c><00:07:11.040><c> will</c><00:07:11.250><c> probably</c><00:07:11.580><c> work</c>

00:07:11.690 --> 00:07:11.700 align:start position:0%
layers set into 0.01 will probably work
 

00:07:11.700 --> 00:07:14.240 align:start position:0%
layers set into 0.01 will probably work
ok<00:07:12.180><c> but</c><00:07:12.900><c> when</c><00:07:13.050><c> you're</c><00:07:13.170><c> training</c><00:07:13.410><c> a</c><00:07:13.740><c> very</c><00:07:13.980><c> very</c>

00:07:14.240 --> 00:07:14.250 align:start position:0%
ok but when you're training a very very
 

00:07:14.250 --> 00:07:16.700 align:start position:0%
ok but when you're training a very very
deep<00:07:14.520><c> neural</c><00:07:14.760><c> network</c><00:07:15.270><c> then</c><00:07:16.050><c> you</c><00:07:16.290><c> might</c><00:07:16.470><c> want</c>

00:07:16.700 --> 00:07:16.710 align:start position:0%
deep neural network then you might want
 

00:07:16.710 --> 00:07:19.010 align:start position:0%
deep neural network then you might want
to<00:07:16.770><c> pick</c><00:07:17.040><c> a</c><00:07:17.100><c> different</c><00:07:17.340><c> constant</c><00:07:18.030><c> in</c><00:07:18.180><c> 0.001</c>

00:07:19.010 --> 00:07:19.020 align:start position:0%
to pick a different constant in 0.001
 

00:07:19.020 --> 00:07:21.950 align:start position:0%
to pick a different constant in 0.001
and<00:07:19.230><c> in</c><00:07:20.220><c> next</c><00:07:20.610><c> week's</c><00:07:20.790><c> material</c><00:07:21.360><c> we'll</c><00:07:21.630><c> talk</c><00:07:21.930><c> a</c>

00:07:21.950 --> 00:07:21.960 align:start position:0%
and in next week's material we'll talk a
 

00:07:21.960 --> 00:07:24.320 align:start position:0%
and in next week's material we'll talk a
little<00:07:22.110><c> bit</c><00:07:22.350><c> about</c><00:07:22.530><c> how</c><00:07:23.310><c> and</c><00:07:23.610><c> when</c><00:07:23.850><c> you</c><00:07:24.150><c> might</c>

00:07:24.320 --> 00:07:24.330 align:start position:0%
little bit about how and when you might
 

00:07:24.330 --> 00:07:26.210 align:start position:0%
little bit about how and when you might
want<00:07:24.390><c> to</c><00:07:24.720><c> choose</c><00:07:24.960><c> a</c><00:07:25.020><c> different</c><00:07:25.530><c> constant</c><00:07:26.010><c> than</c>

00:07:26.210 --> 00:07:26.220 align:start position:0%
want to choose a different constant than
 

00:07:26.220 --> 00:07:29.840 align:start position:0%
want to choose a different constant than
0.01<00:07:27.150><c> but</c><00:07:28.140><c> either</c><00:07:28.350><c> way</c><00:07:28.620><c> it</c><00:07:28.980><c> will</c><00:07:29.160><c> usually</c><00:07:29.430><c> end</c>

00:07:29.840 --> 00:07:29.850 align:start position:0%
0.01 but either way it will usually end
 

00:07:29.850 --> 00:07:32.630 align:start position:0%
0.01 but either way it will usually end
up<00:07:30.000><c> being</c><00:07:30.330><c> a</c><00:07:30.420><c> relatively</c><00:07:30.960><c> small</c><00:07:31.350><c> number</c><00:07:31.640><c> so</c>

00:07:32.630 --> 00:07:32.640 align:start position:0%
up being a relatively small number so
 

00:07:32.640 --> 00:07:34.850 align:start position:0%
up being a relatively small number so
that's<00:07:33.000><c> it</c><00:07:33.240><c> so</c><00:07:33.480><c> this</c><00:07:33.690><c> week</c><00:07:33.960><c> videos</c><00:07:34.380><c> you</c><00:07:34.710><c> now</c>

00:07:34.850 --> 00:07:34.860 align:start position:0%
that's it so this week videos you now
 

00:07:34.860 --> 00:07:38.000 align:start position:0%
that's it so this week videos you now
know<00:07:35.040><c> how</c><00:07:35.070><c> to</c><00:07:35.330><c> set</c><00:07:36.330><c> up</c><00:07:36.480><c> a</c><00:07:36.690><c> neural</c><00:07:37.410><c> network</c><00:07:37.560><c> of</c><00:07:37.920><c> a</c>

00:07:38.000 --> 00:07:38.010 align:start position:0%
know how to set up a neural network of a
 

00:07:38.010 --> 00:07:38.540 align:start position:0%
know how to set up a neural network of a
hidden<00:07:38.280><c> layer</c>

00:07:38.540 --> 00:07:38.550 align:start position:0%
hidden layer
 

00:07:38.550 --> 00:07:40.610 align:start position:0%
hidden layer
initialize<00:07:39.360><c> the</c><00:07:39.510><c> parameters</c><00:07:40.050><c> make</c>

00:07:40.610 --> 00:07:40.620 align:start position:0%
initialize the parameters make
 

00:07:40.620 --> 00:07:42.620 align:start position:0%
initialize the parameters make
predictions<00:07:41.100><c> using</c><00:07:41.220><c> forward</c><00:07:41.670><c> prop</c><00:07:41.940><c> as</c><00:07:42.150><c> well</c>

00:07:42.620 --> 00:07:42.630 align:start position:0%
predictions using forward prop as well
 

00:07:42.630 --> 00:07:44.150 align:start position:0%
predictions using forward prop as well
as<00:07:42.720><c> compute</c><00:07:43.110><c> derivatives</c><00:07:43.230><c> and</c><00:07:43.890><c> it's</c><00:07:44.010><c> been</c>

00:07:44.150 --> 00:07:44.160 align:start position:0%
as compute derivatives and it's been
 

00:07:44.160 --> 00:07:46.670 align:start position:0%
as compute derivatives and it's been
gradient<00:07:44.520><c> descent</c><00:07:44.820><c> using</c><00:07:45.120><c> back</c><00:07:45.330><c> prop</c><00:07:45.600><c> so</c><00:07:46.350><c> that</c>

00:07:46.670 --> 00:07:46.680 align:start position:0%
gradient descent using back prop so that
 

00:07:46.680 --> 00:07:49.220 align:start position:0%
gradient descent using back prop so that
you<00:07:47.010><c> should</c><00:07:47.070><c> be</c><00:07:47.430><c> able</c><00:07:47.520><c> to</c><00:07:47.700><c> do</c><00:07:48.210><c> the</c><00:07:48.510><c> quizzes</c><00:07:48.870><c> as</c>

00:07:49.220 --> 00:07:49.230 align:start position:0%
you should be able to do the quizzes as
 

00:07:49.230 --> 00:07:50.920 align:start position:0%
you should be able to do the quizzes as
well<00:07:49.260><c> as</c><00:07:49.440><c> disease</c><00:07:49.860><c> programming</c><00:07:50.370><c> exercises</c>

00:07:50.920 --> 00:07:50.930 align:start position:0%
well as disease programming exercises
 

00:07:50.930 --> 00:07:53.210 align:start position:0%
well as disease programming exercises
best<00:07:51.930><c> of</c><00:07:52.080><c> luck</c><00:07:52.230><c> with</c><00:07:52.260><c> that</c><00:07:52.440><c> I</c><00:07:52.830><c> hope</c><00:07:53.040><c> you</c><00:07:53.130><c> have</c>

00:07:53.210 --> 00:07:53.220 align:start position:0%
best of luck with that I hope you have
 

00:07:53.220 --> 00:07:55.490 align:start position:0%
best of luck with that I hope you have
fun<00:07:53.580><c> with</c><00:07:53.850><c> pro</c><00:07:54.000><c> exercise</c><00:07:54.450><c> and</c><00:07:54.720><c> look</c><00:07:55.290><c> forward</c>

00:07:55.490 --> 00:07:55.500 align:start position:0%
fun with pro exercise and look forward
 

00:07:55.500 --> 00:07:56.870 align:start position:0%
fun with pro exercise and look forward
to<00:07:55.620><c> seeing</c><00:07:55.980><c> you</c><00:07:56.130><c> in</c><00:07:56.340><c> the</c><00:07:56.370><c> week</c><00:07:56.670><c> school</c>

00:07:56.870 --> 00:07:56.880 align:start position:0%
to seeing you in the week school
 

00:07:56.880 --> 00:07:59.420 align:start position:0%
to seeing you in the week school
materials

