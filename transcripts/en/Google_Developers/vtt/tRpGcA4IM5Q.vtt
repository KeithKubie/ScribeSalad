WEBVTT
Kind: captions
Language: en

00:00:00.436 --> 00:00:01.810
When selling online
content, it's

00:00:01.810 --> 00:00:05.120
important to deliver the correct
content to the right user

00:00:05.120 --> 00:00:07.380
and to help you do
this, Google has

00:00:07.380 --> 00:00:09.930
designed its best
process and guidelines

00:00:09.930 --> 00:00:11.801
for secure transactions.

00:00:11.801 --> 00:00:14.690
Hi, I'm Neto Marin, and I'm
going to show you some tips

00:00:14.690 --> 00:00:17.929
and best practice to make
our transactions safer.

00:00:17.929 --> 00:00:20.220
If you're looking for an
introduction to in-app billing

00:00:20.220 --> 00:00:22.940
or how to use in-app
billing API in your app,

00:00:22.940 --> 00:00:26.870
don't miss our two
previous episodes.

00:00:26.870 --> 00:00:30.750
Some attackers or pirates can
try to hack the user's device

00:00:30.750 --> 00:00:33.530
or pretend to be
a trusted source

00:00:33.530 --> 00:00:36.350
and then provide wrong
responses to requests

00:00:36.350 --> 00:00:39.870
and get your content and
items but there are three best

00:00:39.870 --> 00:00:41.740
practices you can
follow to keep attackers

00:00:41.740 --> 00:00:45.430
from stealing your content
and other users' items.

00:00:45.430 --> 00:00:48.600
First, use the
developer payload, two,

00:00:48.600 --> 00:00:50.880
signature verification,
and three,

00:00:50.880 --> 00:00:52.750
server-side verification.

00:00:52.750 --> 00:00:55.440
Let's take a closer
look at each.

00:00:55.440 --> 00:00:57.900
The developer payload
is an arbitrary string

00:00:57.900 --> 00:01:01.200
you can set to handle making
the purchase request call

00:01:01.200 --> 00:01:03.170
and when the purchase
is completed,

00:01:03.170 --> 00:01:06.900
or whenever you make a
call to get users purchase,

00:01:06.900 --> 00:01:10.430
Google Play will return the
data of the same string.

00:01:10.430 --> 00:01:13.635
So you should use some strings
to identify users' ownership

00:01:13.635 --> 00:01:16.540
like Google Play ID or email.

00:01:16.540 --> 00:01:19.520
Secondly, when you are using
the in-app billing API,

00:01:19.520 --> 00:01:22.460
all responses from
Google Play are signed.

00:01:22.460 --> 00:01:25.500
Remember, you can find your
public key in the developer

00:01:25.500 --> 00:01:28.490
console and you should
check every request

00:01:28.490 --> 00:01:31.390
to make sure they get
purchases and subscriptions

00:01:31.390 --> 00:01:32.960
against that key.

00:01:32.960 --> 00:01:34.850
With a few lines
of code, you can

00:01:34.850 --> 00:01:38.560
check if the response was
signed using your verification

00:01:38.560 --> 00:01:41.490
private key that
only Google has.

00:01:41.490 --> 00:01:44.940
You can find a complete on
how to do this in the CQ Java

00:01:44.940 --> 00:01:48.380
class of the Trivial
Drive simple app.

00:01:48.380 --> 00:01:51.330
Another precaution you can take
if difficult attackers should

00:01:51.330 --> 00:01:53.800
break the verification
process in the phone

00:01:53.800 --> 00:01:57.230
is do the signature
verification on the server-side.

00:01:57.230 --> 00:02:00.070
To do this, after getting the
response from Google Play,

00:02:00.070 --> 00:02:03.860
you can send it to be
verified on the server-side.

00:02:03.860 --> 00:02:06.390
These three best practices
will make your app safer

00:02:06.390 --> 00:02:10.070
and avoid the major kinds of
attacks your app could suffer.

00:02:10.070 --> 00:02:12.400
If you use at least a
client-side signature

00:02:12.400 --> 00:02:15.730
verification, it's enough to
avoid the man-in-the-middle

00:02:15.730 --> 00:02:20.470
attack but if you add the unique
developer payload [INAUDIBLE],

00:02:20.470 --> 00:02:23.290
you can also be sure
about item ownership.

00:02:23.290 --> 00:02:26.410
And if you also implement
the server-side verification,

00:02:26.410 --> 00:02:31.216
your app will be safer even if
the framework is compromised.

00:02:31.216 --> 00:02:33.090
In addition to these
security best practices,

00:02:33.090 --> 00:02:35.030
you can take some
actions with your code

00:02:35.030 --> 00:02:37.160
and content to
increase even more

00:02:37.160 --> 00:02:39.110
of this security in your app.

00:02:39.110 --> 00:02:41.810
For example, build the system to
distribute the content offered

00:02:41.810 --> 00:02:45.530
by your app instead of packing
everything into your APK.

00:02:45.530 --> 00:02:48.280
This protects against people
that try to open your APK

00:02:48.280 --> 00:02:51.190
and steal resources and content.

00:02:51.190 --> 00:02:54.145
The most basic precaution you
should take with your code

00:02:54.145 --> 00:02:57.300
is obfuscate your in-app
billing implementation

00:02:57.300 --> 00:02:58.890
so that it's difficult
for attackers

00:02:58.890 --> 00:03:01.030
to reverse engineer
your security protocols

00:03:01.030 --> 00:03:03.200
and modifications components.

00:03:03.200 --> 00:03:05.880
In addition to running
an obfuscation program,

00:03:05.880 --> 00:03:08.670
we recommend that you use
the following techniques

00:03:08.670 --> 00:03:10.950
to obfuscate your
in-app billing code.

00:03:10.950 --> 00:03:13.090
Inline methods
into other methods,

00:03:13.090 --> 00:03:16.710
construct strings on the
fly instead of defining them

00:03:16.710 --> 00:03:20.357
as constants, and use Java
reflection to call methods.

00:03:20.357 --> 00:03:21.940
The in-app building
sample application

00:03:21.940 --> 00:03:25.350
is publicly distributed and
can be downloaded by anyone,

00:03:25.350 --> 00:03:27.040
so it's quite easy
for an attacker

00:03:27.040 --> 00:03:29.160
to reverse engineer
your application

00:03:29.160 --> 00:03:31.760
if you're using the
sample code exactly

00:03:31.760 --> 00:03:34.280
as it is published
so don't do it.

00:03:34.280 --> 00:03:36.210
If you use any part of
the simple application,

00:03:36.210 --> 00:03:38.820
you must modify it
before you publish

00:03:38.820 --> 00:03:42.230
or at least as part of a
[INAUDIBLE] application.

00:03:42.230 --> 00:03:45.202
And you must protect your
Google Play public key.

00:03:45.202 --> 00:03:47.960
To keep your public key
safe from malicious users

00:03:47.960 --> 00:03:52.180
and hackers, do not embed it
any code as a literal string.

00:03:52.180 --> 00:03:55.550
Instead, construct the
string at runtime from pieces

00:03:55.550 --> 00:03:57.440
or use a bit of manipulation.

00:03:57.440 --> 00:04:01.510
For example, XOR with another
string to hide the actual key

00:04:01.510 --> 00:04:03.980
or download it
from your backhand.

00:04:03.980 --> 00:04:07.330
In this case, make sure to
have a secure connection

00:04:07.330 --> 00:04:10.770
and cryptographic before
storing in a Drive device.

00:04:10.770 --> 00:04:14.190
For more tips about security
on Android in-app billing,

00:04:14.190 --> 00:04:16.110
check the Security
and Design guidelines

00:04:16.110 --> 00:04:20.220
on developer.android.com and
if you have any questions,

00:04:20.220 --> 00:04:22.390
check our documentation
and training guides

00:04:22.390 --> 00:04:26.490
anytime you need
and in our sample,

00:04:26.490 --> 00:04:28.870
you can find the
convenience class to help

00:04:28.870 --> 00:04:32.370
you validate signature
to make your app safer.

00:04:32.370 --> 00:04:36.100
And don't forget--
security is very important.

00:04:36.100 --> 00:04:37.100
Thanks for watching.

00:04:37.100 --> 00:04:38.000
Bye-bye.

00:04:38.000 --> 00:04:40.450
[MUSIC PLAYING]

