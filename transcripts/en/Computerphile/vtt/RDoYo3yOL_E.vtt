WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.310
As part of doing bits and bytes and
fairly low-level stuff, we have mentioned

00:00:05.310 --> 00:00:10.920
the possibility of a thing called 'binary
coded decimal' and that, effectively, IBM

00:00:10.920 --> 00:00:16.529
in their mainframe days, led the charge
on this. Now I've done a video on this and how

00:00:16.529 --> 00:00:20.699
it led, eventually, to extended binary
coded decimal (EBCDIC). I would like to talk about

00:00:20.699 --> 00:00:26.910
what is BCD, why is it necessary and in
particular that's to answer a question

00:00:26.910 --> 00:00:33.960
that I did, vaguely, think about in my
early days of doing heavyweight, macho

00:00:33.960 --> 00:00:39.629
calculations [on a computer] overnight. It's 
effectively: "How does this stuff ever get printed out?"

00:00:39.629 --> 00:00:47.550
I thought, well, what's the biggest ratio
between actual computation and fairly

00:00:47.550 --> 00:00:52.199
quick printout that I can think of. Not my
quantum calculations, they're

00:00:52.199 --> 00:00:56.160
minor-league. Those of you who are familiar
with Douglas Adams and "Hitchhiker's

00:00:56.160 --> 00:01:01.890
Guide to the Galaxy", which was made into
a BBC series here and also became a

00:01:01.890 --> 00:01:08.010
movie, I think, will know that Douglas,
who was a very far-seeing guy, had this

00:01:08.010 --> 00:01:17.460
idea of the ultimate computer called
Deep Thought. It was [an idea] years ahead of its

00:01:17.460 --> 00:01:22.860
time, because I'm pretty sure that Deep
Blue - IBM's chess machine; Deep Mind - the AI

00:01:22.860 --> 00:01:27.750
machine that's doing GO, is it, and so on.
And you know Deep Learning,Deep

00:01:27.750 --> 00:01:33.420
everything. I'm not at all sure it isn't all
down to Douglas Adams! 
&gt;&gt; Sean: I just have to

00:01:33.420 --> 00:01:38.070
point out here that the ultimate
computer was the Earth!
&gt;&gt; DFB: Oh in the very end ... ?

00:01:38.070 --> 00:01:44.369
&gt;&gt; Sean: And there will be some fans pointing out...I
&gt;&gt; DFB: Oh! I see. Nevertheless, Deep Thought

00:01:44.369 --> 00:01:48.600
was asked: "Deep Thought: what is the
answer to Life the Universe and

00:01:48.600 --> 00:01:53.100
Everything?: And several million years
later, presumably even with quantum assistance.

00:01:53.100 --> 00:01:57.020
[Music]
&gt;&gt; Deep Thought: "You're really not going to like it!"
&gt;&gt; High Priests: "Tell us!"

00:01:57.020 --> 00:02:09.530
The answer to Life the Universe and Everything is: 
[voices on film]
42 42 42
&gt;&gt; DFB: 42 ! And my first thought

00:02:09.530 --> 00:02:14.990
when I was laughing out loud at that was, I
thought: "What's 42 in binary ?!" Is there

00:02:14.990 --> 00:02:20.510
something special about it? And, yeah, how
would you convert the binary string for 42

00:02:20.510 --> 00:02:26.180
into being literally 4 and 2 on a
piece of line-printer output?  42 in

00:02:26.180 --> 00:02:36.380
binary is 101010.
How do we know that that's 42?

00:02:36.380 --> 00:02:40.760
Well, starting at the right its powers of two.
So, 2^0 is units ,then 2s

00:02:40.760 --> 00:02:46.550
then 4s then 8s then 16s and 32s.
Armed with that knowledge we say OK

00:02:46.550 --> 00:02:53.269
it's a 2 plus an 8 which is 10 plus a 32
is 42. Pretty good look! A six-bit

00:02:53.269 --> 00:03:00.620
representation for a 2-digit decimal
number. But if you feed that into a

00:03:00.620 --> 00:03:05.390
printer you're not going to get 42
printed out, because by and large they do

00:03:05.390 --> 00:03:12.860
not interpret binary. So, where does the
printable form of '42' come from? And the

00:03:12.860 --> 00:03:18.500
answer is it goes way back to the fact
that IBM and their computing machines -

00:03:18.500 --> 00:03:25.430
way back at the start of the 20th
century they were the Hollerith company. You

00:03:25.430 --> 00:03:32.540
know, doing census details; controlling
elections from punch cards and some IBM

00:03:32.540 --> 00:03:37.370
early electronic computers I think - the
IBM 650 was it? -  actually did work

00:03:37.370 --> 00:03:42.019
internally on decimal. Just like Tommy Flowers 
[and Colossus]. I think they both used bi-quin.

00:03:42.019 --> 00:03:49.640
But the pressure was on, from binary-based 
hardware to say: "This [binary] is more

00:03:49.640 --> 00:03:56.480
efficient by far. You'd be mad not to use
it". OK?,says IBM, but although it's got

00:03:56.480 --> 00:04:02.180
to be a binary representation we want to
directly link it to the decimal that

00:04:02.180 --> 00:04:07.400
will ultimately be printed out.
Now think about it, that's easy to do but

00:04:07.400 --> 00:04:14.569
what would this binary-coded decimal be
for 42? Every decimal position can range

00:04:14.569 --> 00:04:23.539
from 0 to 9. So, how many bits do we
need to represent 9? Well, we know that 3

00:04:23.539 --> 00:04:29.000
bits isn't enough.  3 bits goes up to 111,
which is 7, but you need a 8 and 9. So

00:04:29.000 --> 00:04:33.350
you've got to go to that 4th bit. And you
end up, of course, with 8 being 1000

00:04:33.350 --> 00:04:40.880
and 9 being 1001. Ah! - I hear several
of you saying - but you don't stop there, you

00:04:40.880 --> 00:04:45.350
can go on to hexadecimal?!  And this is
precisely the thing with BCD. You must

00:04:45.350 --> 00:04:54.740
*not* let it go over into the hexadecimal range
from 10 - 16 [correction: 10 - 15] because the average

00:04:54.740 --> 00:05:01.850
person wants their answers out in decimal - not in
hexadecimal. So, here we go then. Look 0100

00:05:01.850 --> 00:05:09.050
taken as a grouping of bits, on its
own, that's nothing in the units column;

00:05:09.050 --> 00:05:14.050
0 in the 2's column; 1 in the 4s
column; 0 in the 8s column. That

00:05:14.050 --> 00:05:20.030
represents decimal 4. Right next door to
it, is a separate 4-bit entity. If I write

00:05:20.030 --> 00:05:27.740
down 0010 that represents a 2. In
its simplest form that is what binary

00:05:27.740 --> 00:05:32.930
coded decimal is. And you just use them
in four-bit nibbles. Now we all know a

00:05:32.930 --> 00:05:39.020
nibble is half a bite. A byte equals 8
bits - well it does in the modern world.

00:05:39.020 --> 00:05:43.340
So half a bite? Well, the name 'nibble' caught on for

00:05:43.340 --> 00:05:49.099
obvious reasons. A nibble being a small
bite and I'll use an 'i',  but some people

00:05:49.099 --> 00:05:53.360
like to extend the joke as much as
possible and actually spell nybble with

00:05:53.360 --> 00:05:58.370
a 'y'. I don't mind! And then a nibble can
hold a hex digit. You might say: Oh! well -

00:05:58.370 --> 00:06:05.599
that's it then - 
if I fed 0100 down a serial line, into

00:06:05.599 --> 00:06:11.780
a printer, it would cough into life and
print 4 ?"  No. Not quite. But we're getting

00:06:11.780 --> 00:06:15.479
close. Because what we've got to ask
ourselves is ...

00:06:15.479 --> 00:06:22.680
this whole print-out thing is treating
decimal digits as characters. They're not

00:06:22.680 --> 00:06:26.699
being thought of in their numeric sense
at all. It's just any other character. It's

00:06:26.699 --> 00:06:31.439
like an 'A', a 'B', a'Z', a '!'
or whatever. The ASCII committee in the

00:06:31.439 --> 00:06:37.650
1960s didn't just work in a
vacuum. They knew what IBM - who they loved

00:06:37.650 --> 00:06:42.569
and hated - had been doing for years. And
it basically said: "It is so much easier

00:06:42.569 --> 00:06:51.870
if you base what's printed ultimately on
a BCD representation, but put a special

00:06:51.870 --> 00:06:57.900
marker at the front of the BCD to pad it
out to an 8-bit byte. But do it in such

00:06:57.900 --> 00:07:07.649
a way that, in a sense, the codes that are
going to do 0 - 9 are in a 'sensible' place.

00:07:07.649 --> 00:07:11.310
Now, what does that mean. Well, let's do
ASCII first, even though historically

00:07:11.310 --> 00:07:23.490
it was second. In ASCII the digits occupy
from 30 (hexadecimal) to 39 (hexadecimal)

00:07:23.490 --> 00:07:27.839
What it means is, if you have

00:07:27.839 --> 00:07:37.949
got, shall we say this 4 (0100). That
is your hex nibble for 4. All you have

00:07:37.949 --> 00:07:44.419
to do, to make it printable, as an ASCII
4, is to glue on the left hand end

00:07:44.419 --> 00:07:53.149
hexadecimal three (which is the same as
decimal three) which  is 0011. So 0011

00:07:53.149 --> 00:07:59.759
prepended to 0100 gives you an 8-bit
entity which, if you fire that down at a

00:07:59.759 --> 00:08:02.550
line printer it'll cough into action and 
print a 4.

00:08:02.550 --> 00:08:07.199
Notice that when I say "glue on at the
front", in order for it to be efficient

00:08:07.199 --> 00:08:12.749
you don't want to be adding on something
that will cause carries, if you see

00:08:12.749 --> 00:08:17.550
what I mean. You need to park it [the ASCII 
boundary where digits start] on a multiple of 16,

00:08:17.550 --> 00:08:24.329
and then what will happen is that
whatever way you convert your 4 into

00:08:24.329 --> 00:08:31.639
being 34 (hex) it will not cause ripple
carries, which are inefficient. OK, say the

00:08:31.639 --> 00:08:37.849
IBM mainframe types. Why not (historically)
tell the youth of today what IBM did originally?

00:08:37.849 --> 00:08:41.120
Same idea! ASCII learned a lot from what

00:08:41.120 --> 00:08:47.839
IBM did. In IBM EBCDIC you don't prepend
a 3 (0011 hex), you prepend an F (1111 hex)

00:08:47.839 --> 00:08:53.960
But the principle is the same.
Yeah? it's cleanly on that boundary.

00:08:53.960 --> 00:09:01.640
So, that's an absolute crucial fact in making 
BCD-to-printed-out-results be fast and

00:09:01.640 --> 00:09:05.839
efficient. You need to be able to put
something in there that's low cost

00:09:05.839 --> 00:09:12.110
because you're going to be doing
millions of these BCD to ASCII/EBCDIC

00:09:12.110 --> 00:09:17.120
conversions. So that is a very sort of
crucial fact to get hold of to try and

00:09:17.120 --> 00:09:23.589
reduce the conversion burden before
print out. So, in many ways then that's

00:09:23.589 --> 00:09:29.630
much of the story.
If you once got it into BCD then both

00:09:29.630 --> 00:09:34.220
ASCII or (if you're still on IBM
mainframes) EBCDIC, do make it easy for

00:09:34.220 --> 00:09:38.750
you to get into a printable form very
quickly. And of course the I/O routines

00:09:38.750 --> 00:09:44.120
hidden underneath Fortran and C will be
well aware of this. Converting from pure

00:09:44.120 --> 00:09:58.040
binary 101010 to 42 BCD (0100  0010),
they look very different! When you get

00:09:58.040 --> 00:10:02.480
onto telling us how to do it, it's not
going to be a cheap operation is it?

00:10:02.480 --> 00:10:06.830
Because that's the hard bit. It's all
very well saying [that] getting from BCD to ASCIIk

00:10:06.830 --> 00:10:11.660
is a piece of cake, but what about getting
from binary to BCD? And the answer is

00:10:11.660 --> 00:10:15.110
there's bound to be overheads there and
it's bound to be something that you

00:10:15.110 --> 00:10:22.550
probably want to eliminate?
And to that effect, some people in the

00:10:22.550 --> 00:10:27.290
commercial computing set-up said:
"Look, binary to BCD will turn out to be

00:10:27.290 --> 00:10:32.930
expensive. Tell you what - If what we do is totally 
trivial [arithmetically] and really isn't rocket

00:10:32.930 --> 00:10:38.209
science, wouldn't we be better off to try
and devise software, or

00:10:38.209 --> 00:10:46.369
even hardware assistance circuits, to do
all the arithmetic on a BCD notation?

00:10:46.369 --> 00:10:50.689
Never convert it into pure binary! Because
if all you're doing is adding up how

00:10:50.689 --> 00:10:56.540
many voters in, y'know, Norwalk County
or something, have voted for such-and-such,

00:10:56.540 --> 00:11:02.990
you don't need all these huge great
binary things that numerical analysts use

00:11:02.990 --> 00:11:07.670
You're just counting numbers. And even
if you're looking at somebody's balance,

00:11:07.670 --> 00:11:13.369
in dollars and cents, surely that's
simple enough arithmetic. It's better to

00:11:13.369 --> 00:11:19.100
perhaps pay a little penalty for doing
BCD arithmetic because you can overcome

00:11:19.100 --> 00:11:24.410
that penalty, a bit, by having specialized
hardware. Why not do it all in BCD and

00:11:24.410 --> 00:11:31.100
then you don't have the binary to BCD
overhead? All you have to do after you've

00:11:31.100 --> 00:11:35.329
done your BCD arithmetic is slip a FFFF
[correction: 1111] on the front end if it's EBCDIC

00:11:35.329 --> 00:11:40.490
a 3 (hexadecimal) if its ASCII, and that's it.
[It] prints out. There is one

00:11:40.490 --> 00:11:45.679
classic one where you really can pick up
that it's very advantageous to do it in

00:11:45.679 --> 00:11:52.790
BCD. If you think about the number 0.10,
which might represent ten

00:11:52.790 --> 00:11:56.569
cents shall we say. You know, your 
bank account's been drained down. It's

00:11:56.569 --> 00:12:02.209
down to its last 10 cents. So here
you've got 0.10.

00:12:02.209 --> 00:12:09.139
That's .1 (in decimal). What is it in
binary?  Oh dear!

00:12:09.139 --> 00:12:17.149
You look at what it is in binary:
[looks at notes] 0.000110011001100 .... 

00:12:17.149 --> 00:12:24.410
And it goes on for ever! There is no
exact representation of .1 (decimal)

00:12:24.410 --> 00:12:30.499
as a binary expansion. It just doesn't
stop. And accountants and actuaries get

00:12:30.499 --> 00:12:36.819
paranoid about that: "Oh! I know it'll
never happen but I hate the idea that

00:12:36.819 --> 00:12:42.949
the rounding might go wrong and
imy client's balance might drop to

00:12:42.949 --> 00:12:47.329
9 cents instead of 10 cents (!) 
How about some other examples of things that use

00:12:47.329 --> 00:12:51.649
BCD, just to finish off with? I don't know
if I've got it here ...

00:12:51.649 --> 00:12:56.990
to dig it out of there, Sean. eventually
[reaches for desk drawer] 
It's a little [electronic] hand calculator. What better

00:12:56.990 --> 00:13:03.410
place to use BCD? It's utterly display-
dominated. Apart from things like square

00:13:03.410 --> 00:13:07.040
root - that's probably about the most
complex thing that you can ask a simple

00:13:07.040 --> 00:13:11.679
four-function calculator to do. But
mostly it's additions, subtractions

00:13:11.679 --> 00:13:20.119
simple divides and so on. They
use BCD! Another example of simple

00:13:20.119 --> 00:13:24.949
devices [that] you see in a shopping mall, or
whatever, that could use BCD. Digital

00:13:24.949 --> 00:13:28.069
clocks. It makes eminent sense to use BCD

00:13:28.069 --> 00:13:33.019
because it's the display, and the change
in the display, is happening all the

00:13:33.019 --> 00:13:39.259
time - every second = but the actual
incrementing is trivial. You don't need

00:13:39.259 --> 00:13:44.089
to convert into binary to add one second
to a digital display,

00:13:44.089 --> 00:13:49.579
you really don't. Live with the BCD. Focus
on the display, because that's what

00:13:49.579 --> 00:13:54.860
matters above all else. i

