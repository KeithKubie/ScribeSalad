WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:02.201
COLT MCANLIS: For many
game devs out there,

00:00:02.201 --> 00:00:05.900
PNG image files are a backbone
of their development process,

00:00:05.900 --> 00:00:08.690
but they also come with some
unintended side effects.

00:00:08.690 --> 00:00:09.960
My name is Colt McAnlis.

00:00:09.960 --> 00:00:12.650
And for savvy developers who are
concerned with user bandwidth

00:00:12.650 --> 00:00:14.980
and download times,
PNG files may not

00:00:14.980 --> 00:00:17.180
be the best choice
for your game assets.

00:00:17.180 --> 00:00:20.000
And the truth is that
PNG files are everywhere

00:00:20.000 --> 00:00:21.060
in mobile development.

00:00:21.060 --> 00:00:24.240
After analyzing 1,000 of the
top games on Google Play,

00:00:24.240 --> 00:00:28.470
it was discovered that PNG files
accounted for more than 75%

00:00:28.470 --> 00:00:32.610
of all textures for those
games, which makes sense, right?

00:00:32.610 --> 00:00:33.960
Developers are busy people.

00:00:33.960 --> 00:00:37.600
And PNG files are easy to use,
support transparency, provide

00:00:37.600 --> 00:00:39.940
some compression savings,
and they're available

00:00:39.940 --> 00:00:41.640
cross platform.

00:00:41.640 --> 00:00:44.020
But in a world with restricted
download times, customer

00:00:44.020 --> 00:00:47.800
acquisition woes, and harsh
data caps, the size of your app

00:00:47.800 --> 00:00:49.110
does matter.

00:00:49.110 --> 00:00:51.920
And PNG files just
aren't going to cut it.

00:00:51.920 --> 00:00:54.010
For developers looking
to reduce texture asset

00:00:54.010 --> 00:00:55.650
footprint in their
game distribution,

00:00:55.650 --> 00:00:58.620
the WebP image format
is a perfect replacement

00:00:58.620 --> 00:01:00.230
for PNG files.

00:01:00.230 --> 00:01:01.990
WebP supports most
of what game devs

00:01:01.990 --> 00:01:05.440
love about PNG, that is,
transparency, cross platform

00:01:05.440 --> 00:01:07.370
support, and
lossless compression.

00:01:07.370 --> 00:01:10.180
But it also supports
lossy compression,

00:01:10.180 --> 00:01:13.190
meaning you can get
even smaller file sizes.

00:01:13.190 --> 00:01:15.960
And WebP fits into your
existing production pipeline

00:01:15.960 --> 00:01:19.200
with plug-ins for Adobe
Photoshop, GIMP, ImageMagick,

00:01:19.200 --> 00:01:20.110
and more.

00:01:20.110 --> 00:01:23.150
Plus, the command line converter
allows you to batch convert

00:01:23.150 --> 00:01:26.140
your asset chain during your
build phase, which is always

00:01:26.140 --> 00:01:28.740
helpful for
programmers on the go.

00:01:28.740 --> 00:01:32.200
Using WebP is easy in your
game, as it's accessible through

00:01:32.200 --> 00:01:35.530
a C++ library that you can drop
into your existing code base,

00:01:35.530 --> 00:01:38.770
allowing you to use it on
mobile and desktop platforms.

00:01:38.770 --> 00:01:41.907
And it's also available
for the web as well.

00:01:41.907 --> 00:01:44.240
To get a better sense of the
type of compression savings

00:01:44.240 --> 00:01:46.640
available, the WebP
team ran some tests

00:01:46.640 --> 00:01:49.520
to see how the format stacked
up against PNG, testing

00:01:49.520 --> 00:01:52.090
1,000 images in a test corpus.

00:01:52.090 --> 00:01:54.640
This graph shows the
normalized results.

00:01:54.640 --> 00:01:56.220
You can see that
the optimized PNG

00:01:56.220 --> 00:01:59.100
files are listed as the
1.0 green line there.

00:01:59.100 --> 00:02:02.530
And it's direct to see that both
for lossy and lossless modes,

00:02:02.530 --> 00:02:06.280
WebP files are consistently
smaller in size.

00:02:06.280 --> 00:02:08.000
That odd little
spike at the end,

00:02:08.000 --> 00:02:11.280
though, is caused by
one-by-one pixel images, which

00:02:11.280 --> 00:02:14.320
you'd expect some weird
spikes to go on there.

00:02:14.320 --> 00:02:16.210
Anyhow, this is a perfect
time to remind you

00:02:16.210 --> 00:02:19.189
of a couple of tips of
getting the most out of WebP.

00:02:19.189 --> 00:02:21.230
It's important to understand
that one compression

00:02:21.230 --> 00:02:23.630
level doesn't work for
all images in your game.

00:02:23.630 --> 00:02:25.922
Diffuse maps are different
than normal maps, which

00:02:25.922 --> 00:02:28.130
are different than alpha
maps, which are specifically

00:02:28.130 --> 00:02:30.934
different than highly
transparent UI images, which

00:02:30.934 --> 00:02:33.350
means that finding the right
balance between image quality

00:02:33.350 --> 00:02:35.880
and size means finding the
right types of compression

00:02:35.880 --> 00:02:38.029
settings for each image.

00:02:38.029 --> 00:02:39.820
But doing that for
every image in your game

00:02:39.820 --> 00:02:41.490
could be impractical.

00:02:41.490 --> 00:02:44.300
Instead, try to classify your
images based on their usage

00:02:44.300 --> 00:02:47.710
type as this generally describes
their visual properties.

00:02:47.710 --> 00:02:50.810
From here, you can
associate each usage bucket

00:02:50.810 --> 00:02:52.990
with a specific set of
compression settings.

00:02:52.990 --> 00:02:54.510
These settings can
easily be found

00:02:54.510 --> 00:02:56.240
by your artists who
have a few hours

00:02:56.240 --> 00:02:57.880
to kill on a Thursday afternoon.

00:02:57.880 --> 00:03:01.620
Oh, and make sure to provide
a file that lists overrides

00:03:01.620 --> 00:03:04.950
for specific images which may
require specific compression

00:03:04.950 --> 00:03:07.480
settings that are different
than the bucket they actually

00:03:07.480 --> 00:03:08.350
fall into.

00:03:08.350 --> 00:03:10.190
Trust me, your
artists will love you

00:03:10.190 --> 00:03:12.650
for this simple, little feature.

00:03:12.650 --> 00:03:16.200
Now it's worth pointing out
that PNG and WebP files are not

00:03:16.200 --> 00:03:17.280
GPU formats.

00:03:17.280 --> 00:03:19.460
That is, when you decompress
them into main memory,

00:03:19.460 --> 00:03:23.150
they will be in full 32-bits
per pixel and reside on the GPU

00:03:23.150 --> 00:03:24.010
as such.

00:03:24.010 --> 00:03:26.160
There's a whole set of
GPU compressed formats

00:03:26.160 --> 00:03:31.940
out there, like DXT, ETC, PVR,
and ASTC, which exist on disk

00:03:31.940 --> 00:03:34.916
and on GPU in
compressed format, which

00:03:34.916 --> 00:03:36.790
means that you should
consider supporting GPU

00:03:36.790 --> 00:03:40.850
formats alongside WebP ones for
textures that may support it.

00:03:40.850 --> 00:03:42.960
This way, you can optimize
both your distribution

00:03:42.960 --> 00:03:45.820
and GPU residency sizes.

00:03:45.820 --> 00:03:47.420
Anyhow, to get
started with WebP,

00:03:47.420 --> 00:03:50.700
hop on over to the development
page and grab the C++ SDK

00:03:50.700 --> 00:03:53.130
for your game, or
read the docs online.

00:03:53.130 --> 00:03:55.510
And make sure you check
out more information

00:03:55.510 --> 00:03:57.900
on alpha blending that can
cause problems in your game

00:03:57.900 --> 00:04:01.010
by checking out my other video,
"Don't Alpha That Pixel."

00:04:01.010 --> 00:04:03.470
WebP is a perfect
replacement for bloated PNG

00:04:03.470 --> 00:04:04.404
files in your app.

00:04:04.404 --> 00:04:06.070
So go out there,
compress your textures,

00:04:06.070 --> 00:04:08.550
and build better games.

