WEBVTT
Kind: captions
Language: en

00:00:00.750 --> 00:00:02.090
DAN GALPIN: Hello, I'm Dan.

00:00:02.090 --> 00:00:04.350
I'm a games developer
advocate here at Google.

00:00:04.350 --> 00:00:06.766
KRISTAN UCCELLO: And I'm Krispy,
also a developer advocate

00:00:06.766 --> 00:00:08.140
at Google, focused on games.

00:00:08.140 --> 00:00:09.556
DAN GALPIN: In
this video, we will

00:00:09.556 --> 00:00:11.880
discuss the high-level
aspects of building games

00:00:11.880 --> 00:00:13.100
for the big screen.

00:00:13.100 --> 00:00:14.800
KRISTAN UCCELLO:
Not that big screen.

00:00:14.800 --> 00:00:16.750
TVs, more like this one.

00:00:16.750 --> 00:00:18.530
We're going to talk
about what to avoid,

00:00:18.530 --> 00:00:21.400
what to strive towards, and how
Google APIs can help support

00:00:21.400 --> 00:00:23.995
bringing your apps to
the really big screen.

00:00:23.995 --> 00:00:25.870
DAN GALPIN: Much of what
we are about to show

00:00:25.870 --> 00:00:28.410
you will apply in the broader
context of the Android

00:00:28.410 --> 00:00:30.080
ecosystem surrounding games.

00:00:30.080 --> 00:00:32.920
In particular, when you consider
how many Android devices are

00:00:32.920 --> 00:00:34.660
able to connect to
large displays using

00:00:34.660 --> 00:00:36.810
MiraCast, DisplayPort,
docking hardware,

00:00:36.810 --> 00:00:38.980
as well as TVs with
Android built in,

00:00:38.980 --> 00:00:41.280
you have at your disposal
a full suite of technology

00:00:41.280 --> 00:00:44.560
that can put you in front of an
engaged and growing audience.

00:00:44.560 --> 00:00:46.500
There are a lot of mobile
gamers in the world,

00:00:46.500 --> 00:00:48.290
and they're looking to expand
their gaming experience

00:00:48.290 --> 00:00:50.156
onto the biggest
screen in their home.

00:00:50.156 --> 00:00:51.530
We hope that after
watching this,

00:00:51.530 --> 00:00:54.210
you will be inspired to make
sure your users get the best

00:00:54.210 --> 00:00:56.300
gaming experience
on the big screen.

00:00:56.300 --> 00:00:58.290
Android TVs are going
to be coming soon

00:00:58.290 --> 00:01:00.440
to a family room near
you, and you'd better

00:01:00.440 --> 00:01:02.596
make sure your games
look good on it.

00:01:02.596 --> 00:01:03.970
KRISTAN UCCELLO:
With Android TV,

00:01:03.970 --> 00:01:06.136
you get to build on your
existing mobile development

00:01:06.136 --> 00:01:06.850
experience.

00:01:06.850 --> 00:01:09.290
You can now take full
advantage of modern Android,

00:01:09.290 --> 00:01:12.100
including NDK support,
to craft your gaming

00:01:12.100 --> 00:01:14.430
worlds in unimaginable ways.

00:01:14.430 --> 00:01:17.030
It's even possible to
extend the gaming experience

00:01:17.030 --> 00:01:18.779
through second-screen
interactions.

00:01:18.779 --> 00:01:20.320
DAN GALPIN: TV game
development might

00:01:20.320 --> 00:01:21.900
seem to be
overwhelming at first,

00:01:21.900 --> 00:01:24.591
considering how many different
aspects are involved.

00:01:24.591 --> 00:01:26.840
In practice, though, it's
not very different from what

00:01:26.840 --> 00:01:29.300
you were already doing with
your mobile game development.

00:01:29.300 --> 00:01:31.530
Your projects can be
managed in the same way.

00:01:31.530 --> 00:01:33.989
You just need to factor in a
few additional considerations.

00:01:33.989 --> 00:01:35.363
KRISTAN UCCELLO:
Let's start with

00:01:35.363 --> 00:01:37.610
my personal favorite--
game controllers.

00:01:37.610 --> 00:01:39.560
Many mobile games
use gestures whereby

00:01:39.560 --> 00:01:42.290
the user touches the sleek,
glass screen in front of them

00:01:42.290 --> 00:01:43.740
to interact with it.

00:01:43.740 --> 00:01:47.051
This works fine on a phone,
but not so much for TV screens.

00:01:47.051 --> 00:01:49.050
DAN GALPIN: My arms
certainly aren't long enough

00:01:49.050 --> 00:01:50.580
to reach across my living room.

00:01:50.580 --> 00:01:52.450
KRISTAN UCCELLO: Mine either.

00:01:52.450 --> 00:01:54.959
On TV, mobile on-screen
controls become useless.

00:01:54.959 --> 00:01:57.000
DAN GALPIN: And even if
my arms were long enough,

00:01:57.000 --> 00:02:01.157
touching most TVs would just
result in a messy screen.

00:02:01.157 --> 00:02:02.740
KRISTAN UCCELLO:
Yeah, not many people

00:02:02.740 --> 00:02:04.550
have touchscreen
TVs, which is why

00:02:04.550 --> 00:02:06.130
you need to add
touchscreen required

00:02:06.130 --> 00:02:08.940
equal false in your
application manifest.

00:02:08.940 --> 00:02:12.129
It's implicit, which means you
need to make the distinction.

00:02:12.129 --> 00:02:13.670
DAN GALPIN: Luckily,
every Android TV

00:02:13.670 --> 00:02:16.525
will have a controller capable
of producing directional pad

00:02:16.525 --> 00:02:19.795
input, thus allowing the
user to interact with the TV.

00:02:19.795 --> 00:02:20.670
KRISTAN UCCELLO: Yup.

00:02:20.670 --> 00:02:22.660
The Android reference
controller is definitely

00:02:22.660 --> 00:02:24.021
a developer's best friend.

00:02:24.021 --> 00:02:26.270
It has exactly what you would
expect a game controller

00:02:26.270 --> 00:02:30.106
to have-- two analog sticks,
D-pad, B, A, X, Y buttons,

00:02:30.106 --> 00:02:31.730
left and right
triggers, left and right

00:02:31.730 --> 00:02:34.615
bumpers, Back
button, Home button.

00:02:34.615 --> 00:02:35.990
DAN GALPIN: It
can also be paired

00:02:35.990 --> 00:02:38.280
with any Bluetooth-capable
Android device, which

00:02:38.280 --> 00:02:40.330
means you can play
controller-enabled games

00:02:40.330 --> 00:02:42.359
on your phone or tablet as well.

00:02:42.359 --> 00:02:44.900
KRISTAN UCCELLO: That's a very
useful thing to do in general.

00:02:44.900 --> 00:02:46.970
I'm always a little
surprised and saddened

00:02:46.970 --> 00:02:49.270
when I find a game that
would be great to play

00:02:49.270 --> 00:02:52.230
with a paired controller, only
to discover it doesn't accept

00:02:52.230 --> 00:02:53.480
the controller as valid input.

00:02:53.480 --> 00:02:57.160
Even worse, some of these games
have onscreen, simulated game

00:02:57.160 --> 00:02:57.950
controllers.

00:02:57.950 --> 00:02:58.196
DAN GALPIN: Yeah.

00:02:58.196 --> 00:03:00.570
It makes me sad, too, because
the developers have already

00:03:00.570 --> 00:03:02.910
done the work of mapping
to the same kinds of input,

00:03:02.910 --> 00:03:05.650
but did not include the button
mappings to the hardware.

00:03:05.650 --> 00:03:07.230
KRISTAN UCCELLO: With all
the game controller support

00:03:07.230 --> 00:03:08.957
that exists with
Android now, I don't

00:03:08.957 --> 00:03:10.290
feel there's an excuse for that.

00:03:10.290 --> 00:03:12.290
DAN GALPIN: Maybe they
just don't know about it.

00:03:12.290 --> 00:03:13.800
KRISTAN UCCELLO: Fair point.

00:03:13.800 --> 00:03:17.190
But if you're watching
this, you know about it.

00:03:17.190 --> 00:03:19.669
DAN GALPIN: And knowing
is half the battle.

00:03:19.669 --> 00:03:21.460
KRISTAN UCCELLO: There's
a few other things

00:03:21.460 --> 00:03:22.490
to know too, though.

00:03:22.490 --> 00:03:25.220
For instance, Android KitKat
now supports the enumeration

00:03:25.220 --> 00:03:26.090
of controllers.

00:03:26.090 --> 00:03:27.840
And the game controllers
that support this

00:03:27.840 --> 00:03:29.020
will light up accordingly.

00:03:29.020 --> 00:03:30.520
DAN GALPIN: In your
application, you

00:03:30.520 --> 00:03:32.310
make a call to
getControllerNumber

00:03:32.310 --> 00:03:34.750
to determine the controller
driving the input event being

00:03:34.750 --> 00:03:35.425
dealt with.

00:03:35.425 --> 00:03:37.800
You can use this feature to
make sure your little brother

00:03:37.800 --> 00:03:40.301
or sister is playing
as player two.

00:03:40.301 --> 00:03:42.175
KRISTAN UCCELLO: You
can now tell Google Play

00:03:42.175 --> 00:03:44.510
that your game requires
a game controller.

00:03:44.510 --> 00:03:47.907
This could be used to stand out
in the Android TV Play Store.

00:03:47.907 --> 00:03:50.490
DAN GALPIN: You add the details
to the application's manifest.

00:03:50.490 --> 00:03:52.210
This example indicates
that your game

00:03:52.210 --> 00:03:54.490
must be used with a controller.

00:03:54.490 --> 00:03:56.220
You can also list all
the supported types

00:03:56.220 --> 00:03:57.970
of controls for your game.

00:03:57.970 --> 00:04:00.140
If you require either a
multi-touch touchscreen

00:04:00.140 --> 00:04:02.420
in gyro, or will work
with a game controller,

00:04:02.420 --> 00:04:05.294
then you can use feature groups
to define it in the manifest.

00:04:05.294 --> 00:04:07.210
KRISTAN UCCELLO: Now
that you've added support

00:04:07.210 --> 00:04:10.810
in the manifest and in game
play, you aren't finished yet.

00:04:10.810 --> 00:04:12.670
You need to think about
how the players will

00:04:12.670 --> 00:04:15.579
make menu selections, and
provide non-game play input.

00:04:15.579 --> 00:04:17.120
DAN GALPIN: One of
the hardest things

00:04:17.120 --> 00:04:18.529
that game developers
have to deal

00:04:18.529 --> 00:04:20.260
with is focus and selection.

00:04:20.260 --> 00:04:22.320
Many games designed
for touch just

00:04:22.320 --> 00:04:23.652
don't yet have that concept.

00:04:23.652 --> 00:04:25.110
KRISTAN UCCELLO:
One place to start

00:04:25.110 --> 00:04:27.666
would be to change the
color of the selected text.

00:04:27.666 --> 00:04:29.040
This alone is not
enough, though.

00:04:29.040 --> 00:04:30.430
In this example,
you really can't

00:04:30.430 --> 00:04:34.240
tell whether the Start Game or
Settings is currently selected.

00:04:34.240 --> 00:04:35.910
DAN GALPIN: This
is a bit better.

00:04:35.910 --> 00:04:37.130
KRISTAN UCCELLO: It
would be even better

00:04:37.130 --> 00:04:37.963
if it were animated.

00:04:37.963 --> 00:04:40.210
You know, use motion
to convey context.

00:04:40.210 --> 00:04:41.396
DAN GALPIN: Done.

00:04:41.396 --> 00:04:43.270
KRISTAN UCCELLO: A lot
of games have buttons,

00:04:43.270 --> 00:04:46.000
to connect to social
services, et cetera.

00:04:46.000 --> 00:04:48.400
These buttons are often
in non-obvious places

00:04:48.400 --> 00:04:49.830
for navigation.

00:04:49.830 --> 00:04:52.506
DAN GALPIN: So this is
easier to follow, right?

00:04:52.506 --> 00:04:53.880
KRISTAN UCCELLO:
Yeah, but you're

00:04:53.880 --> 00:04:55.990
clearly not a UX designer.

00:04:55.990 --> 00:04:59.519
BOTH: Remember, hire
a good designer.

00:04:59.519 --> 00:05:01.310
DAN GALPIN: One of my
favorite recent games

00:05:01.310 --> 00:05:03.550
did a great job with
bringing their game to the TV

00:05:03.550 --> 00:05:05.069
and navigating
menus, except that it

00:05:05.069 --> 00:05:07.610
was near impossible to actually
purchase anything in the game

00:05:07.610 --> 00:05:09.420
without touching the screen.

00:05:09.420 --> 00:05:11.957
KRISTAN UCCELLO: It fell down
when it came to purchases?

00:05:11.957 --> 00:05:13.790
DAN GALPIN: No one had
tried buying anything

00:05:13.790 --> 00:05:14.820
with the controller.

00:05:14.820 --> 00:05:17.760
Google Play in-app payment
supports D-pad navigation out

00:05:17.760 --> 00:05:20.360
of the box, with a UI
that looks great on TV.

00:05:20.360 --> 00:05:23.010
But you have to make sure
the user can get there.

00:05:23.010 --> 00:05:25.420
Making your navigation
clear and understandable

00:05:25.420 --> 00:05:28.160
is just as important
outside of your main menu.

00:05:28.160 --> 00:05:30.635
Make sure that your TV
players aren't missing out.

00:05:30.635 --> 00:05:32.260
KRISTAN UCCELLO:
Let's shift gears now,

00:05:32.260 --> 00:05:34.720
and discuss another essential
item on the TV development

00:05:34.720 --> 00:05:35.400
checklist.

00:05:35.400 --> 00:05:36.440
Networking.

00:05:36.440 --> 00:05:38.510
DAN GALPIN: So you're
probably thinking

00:05:38.510 --> 00:05:41.110
that you know about network
detection on Android.

00:05:41.110 --> 00:05:44.400
However, many developers forget
to consider the possibility

00:05:44.400 --> 00:05:47.456
of ethernet network connectivity
when building for TV.

00:05:47.456 --> 00:05:48.830
KRISTAN UCCELLO:
Android TVs have

00:05:48.830 --> 00:05:51.420
wired Ethernet ports to
allow fast networking.

00:05:51.420 --> 00:05:53.380
This means that Wi-Fi
may be turned off,

00:05:53.380 --> 00:05:55.960
but it's still connected
to the internet.

00:05:55.960 --> 00:05:58.130
Mobile developers have
not had to worry much

00:05:58.130 --> 00:05:59.982
about fixed, stationary devices.

00:05:59.982 --> 00:06:01.440
It's not been common
for developers

00:06:01.440 --> 00:06:02.939
to build their
network checking code

00:06:02.939 --> 00:06:06.187
to consider connectivity
beyond cellular or Wi-Fi.

00:06:06.187 --> 00:06:08.270
DAN GALPIN: The good news
is that it's really easy

00:06:08.270 --> 00:06:11.100
to test for network connectivity
without caring about the type,

00:06:11.100 --> 00:06:13.360
using this snippet of code.

00:06:13.360 --> 00:06:16.210
But if you really want to test
whether wired networking is

00:06:16.210 --> 00:06:18.790
active, you can check to
see if the active network is

00:06:18.790 --> 00:06:20.290
of type Ethernet.

00:06:20.290 --> 00:06:21.870
Understanding the
active hardware

00:06:21.870 --> 00:06:23.550
allows your game to
make good decisions

00:06:23.550 --> 00:06:25.460
about using bandwidth.

00:06:25.460 --> 00:06:27.970
Speaking of
hardware, Android TVs

00:06:27.970 --> 00:06:31.220
have graphics hardware exposed
to the power of OpenGL ES.

00:06:31.220 --> 00:06:34.476
You can draw out the full
resolution of your TV.

00:06:34.476 --> 00:06:35.850
KRISTAN UCCELLO:
With many pixels

00:06:35.850 --> 00:06:38.350
comes fillrate responsibility.

00:06:38.350 --> 00:06:41.200
Use your pixel power wisely.

00:06:41.200 --> 00:06:42.120
DAN GALPIN: Right.

00:06:42.120 --> 00:06:43.550
It turns out that
we're not quite

00:06:43.550 --> 00:06:45.980
ready to draw graphically
intense 4K scenes

00:06:45.980 --> 00:06:47.930
with mobile GPUs.

00:06:47.930 --> 00:06:48.850
Yet.

00:06:48.850 --> 00:06:50.700
But there's an easy
way to tell Android

00:06:50.700 --> 00:06:52.840
that you want to render
at a lower resolution.

00:06:52.840 --> 00:06:54.620
If you're using
Java, you can call

00:06:54.620 --> 00:06:56.900
SurfaceHolder.setFixedSize,
and that

00:06:56.900 --> 00:06:59.300
will tell our composite
engine to scale your smaller

00:06:59.300 --> 00:07:01.662
window to the size
of the screen.

00:07:01.662 --> 00:07:03.870
KRISTAN UCCELLO: And if
you're like almost every game

00:07:03.870 --> 00:07:06.600
developer out there, and not
implementing your graphics

00:07:06.600 --> 00:07:10.634
in Java, you can change the size
attribute of the target window.

00:07:10.634 --> 00:07:12.050
DAN GALPIN: Hey,
you can still use

00:07:12.050 --> 00:07:14.070
GLSurfaceView with
a native renderer.

00:07:14.070 --> 00:07:16.304
The contexts are shared.

00:07:16.304 --> 00:07:17.720
The key thing is,
you want to make

00:07:17.720 --> 00:07:20.830
sure your games look
beautiful on a large screen.

00:07:20.830 --> 00:07:23.100
Many of the shortcuts
taken in mobile look

00:07:23.100 --> 00:07:25.510
glaring on a large screen.

00:07:25.510 --> 00:07:27.600
KRISTAN UCCELLO: Low-res
textures, low poly count

00:07:27.600 --> 00:07:30.269
models, geometry rounding
errors, poor bit mappings.

00:07:30.269 --> 00:07:32.060
Look, you know what
I'm talking about here.

00:07:32.060 --> 00:07:33.430
DAN GALPIN: Amen, brother.

00:07:33.430 --> 00:07:34.510
KRISTAN UCCELLO: So with
all this cool rendering,

00:07:34.510 --> 00:07:36.260
there's another thing
you have to consider

00:07:36.260 --> 00:07:38.160
when developing
for the TV screen.

00:07:38.160 --> 00:07:40.137
DAN GALPIN: Other
than epic sizeness?

00:07:40.137 --> 00:07:41.220
KRISTAN UCCELLO: Overscan.

00:07:41.220 --> 00:07:43.370
It's something that
still inexplicably exists

00:07:43.370 --> 00:07:44.595
on modern TVs.

00:07:44.595 --> 00:07:46.660
Effectively, this means
that some of your content

00:07:46.660 --> 00:07:49.240
may be pushed beyond the
visible edge of the display.

00:07:49.240 --> 00:07:51.380
DAN GALPIN: So people
should letterbox content

00:07:51.380 --> 00:07:52.507
and have borders?

00:07:52.507 --> 00:07:53.340
KRISTAN UCCELLO: No.

00:07:53.340 --> 00:07:54.970
Just make sure you
fill the screen.

00:07:54.970 --> 00:07:56.960
But keep the
important information

00:07:56.960 --> 00:07:59.160
out of the outer
3% of the display.

00:07:59.160 --> 00:08:01.330
DAN GALPIN: Like what kind
of important information?

00:08:01.330 --> 00:08:02.710
KRISTAN UCCELLO:
HUDs, for example.

00:08:02.710 --> 00:08:04.668
It's kind of important
for people to see those.

00:08:04.668 --> 00:08:07.280
It can become very annoying
for the user to fiddle

00:08:07.280 --> 00:08:10.660
with their TV settings trying
to see the full UI of your game,

00:08:10.660 --> 00:08:13.490
only to discover that no matter
what settings they play with,

00:08:13.490 --> 00:08:15.530
they still can't
see the whole thing.

00:08:15.530 --> 00:08:18.590
Keep the edges of your game
free of critical information.

00:08:18.590 --> 00:08:21.030
DAN GALPIN: I wish every
developer knew about overscan,

00:08:21.030 --> 00:08:23.450
and didn't have to
know about overscan.

00:08:23.450 --> 00:08:25.620
Let's move on to what
developers can do with Google

00:08:25.620 --> 00:08:26.881
Play game services.

00:08:26.881 --> 00:08:28.630
KRISTAN UCCELLO: Google
Play game services

00:08:28.630 --> 00:08:32.049
have been optimized for
Android TV with easy navigation

00:08:32.049 --> 00:08:34.040
and a great new look and feel.

00:08:34.040 --> 00:08:36.539
DAN GALPIN: You can also utilize
achievement, leader boards,

00:08:36.539 --> 00:08:37.969
quests, and more.

00:08:37.969 --> 00:08:40.010
KRISTAN UCCELLO: More
being multi-player support.

00:08:40.010 --> 00:08:40.676
DAN GALPIN: Yes.

00:08:40.676 --> 00:08:42.330
You can utilize
turn-based multi-player

00:08:42.330 --> 00:08:44.890
and real-time multi-player
from Play Services.

00:08:44.890 --> 00:08:47.317
There's even C++ support
for turn-based multi-player.

00:08:47.317 --> 00:08:49.650
KRISTAN UCCELLO: I want to
see some awesome multi-player

00:08:49.650 --> 00:08:51.680
experiences with people
playing on their tablets

00:08:51.680 --> 00:08:54.190
in the same room so I
can hear them groan.

00:08:54.190 --> 00:08:56.330
Second-screen experiences
in the living room

00:08:56.330 --> 00:08:58.220
are growing in number.

00:08:58.220 --> 00:09:01.287
Game saves could be a great tool
for keeping your users engaged.

00:09:01.287 --> 00:09:03.370
Part of extending the
mobile experiences to the TV

00:09:03.370 --> 00:09:05.570
means being able
to continue playing

00:09:05.570 --> 00:09:07.850
on the biggest,
baddest, most overscan

00:09:07.850 --> 00:09:08.940
prone screen in my house.

00:09:08.940 --> 00:09:10.440
DAN GALPIN: Cooperative
multi-player

00:09:10.440 --> 00:09:11.910
is also worthwhile.

00:09:11.910 --> 00:09:14.700
Play games has a great API
for peer-to-peer multi-player

00:09:14.700 --> 00:09:16.140
with up to eight players.

00:09:16.140 --> 00:09:19.639
It's so much cooler if
some of them can be on TVs.

00:09:19.639 --> 00:09:21.430
KRISTAN UCCELLO:
Everything's better on TV.

00:09:21.430 --> 00:09:23.440
You know, you can unlock
your RTFM achievement.

00:09:23.440 --> 00:09:25.357
DAN GALPIN: Wait, what
achievement was that?

00:09:25.357 --> 00:09:26.940
KRISTAN UCCELLO:
Read the full manual.

00:09:26.940 --> 00:09:29.410
It's not exactly a manual,
but rather, a website.

00:09:29.410 --> 00:09:31.060
We're always trying
to make it better.

00:09:31.060 --> 00:09:34.050
DAN GALPIN: And on that note,
help us make TV games better.

00:09:34.050 --> 00:09:36.320
In this short talk, we
covered a lot of ground,

00:09:36.320 --> 00:09:38.527
but there is always
more to explore.

00:09:38.527 --> 00:09:40.110
KRISTAN UCCELLO: In
summary, we looked

00:09:40.110 --> 00:09:42.570
at game controllers, and the
importance of navigation,

00:09:42.570 --> 00:09:44.310
focus, and selection.

00:09:44.310 --> 00:09:46.780
Networking, and why it's
not sufficient to just

00:09:46.780 --> 00:09:48.150
look for Wi-Fi.

00:09:48.150 --> 00:09:50.280
Graphics rendering on
the TV and the challenges

00:09:50.280 --> 00:09:52.260
that overscan can present.

00:09:52.260 --> 00:09:54.840
And finally, Google Play
services, and how it can help

00:09:54.840 --> 00:09:57.360
bring about the best game
experiences for your users

00:09:57.360 --> 00:09:58.636
on TV.

00:09:58.636 --> 00:10:01.010
DAN GALPIN: More details about
how to get your game ready

00:10:01.010 --> 00:10:05.080
for TV can be found on the new
developer site for Android TV,

00:10:05.080 --> 00:10:07.080
including important
manifest changes

00:10:07.080 --> 00:10:09.810
to work with our new
lean-back experience.

00:10:09.810 --> 00:10:13.310
You can get in touch with us
at +DanGalpin and @dagalpin.

00:10:13.310 --> 00:10:17.000
KRISTAN UCCELLO: And
+KristanUccello, or @_krispy_.

00:10:17.000 --> 00:10:21.240
BOTH: Now go build something
fun, engaging, and big for us

00:10:21.240 --> 00:10:23.530
to play on TV!

