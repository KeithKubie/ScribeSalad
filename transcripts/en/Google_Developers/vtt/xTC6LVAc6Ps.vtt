WEBVTT
Kind: captions
Language: en

00:00:07.033 --> 00:00:09.701
Bini: Hello.
Welcome everybody.

00:00:09.701 --> 00:00:11.334
Oh, wow, this is echo.

00:00:11.334 --> 00:00:14.701
Um, okay, so this is
the last talk of the day.

00:00:14.701 --> 00:00:16.734
So I'm very happy that
so many of you showed up.

00:00:16.734 --> 00:00:20.200
This is also pretty much
of a niche, uh, talk.

00:00:20.200 --> 00:00:22.567
And it's also
slightly schizophrenic

00:00:22.567 --> 00:00:25.968
because, basically, I've been
doing several different things

00:00:25.968 --> 00:00:28.467
on App Engine, and this talk
is gonna be what--

00:00:28.467 --> 00:00:30.868
about what I've done,
basically.

00:00:30.868 --> 00:00:33.400
The main focus
is gonna be JRuby,

00:00:33.400 --> 00:00:36.901
but I'm also gonna talk a little
bit about something called Ioke.

00:00:36.901 --> 00:00:40.567
And that's about it
for introductions.

00:00:40.567 --> 00:00:42.834
Well, actually, I'm gonna keep
this a little bit short,

00:00:42.834 --> 00:00:46.767
so we have lots of time
for questions afterwards.

00:00:46.767 --> 00:00:50.267
And I'm also informed that this
is the last talk of the day,

00:00:50.267 --> 00:00:53.167
so the shorter this talk is,
the sooner people can get

00:00:53.167 --> 00:00:56.667
to their beers.

00:00:56.667 --> 00:00:58.467
I work for a company
called ThoughtWorks,

00:00:58.467 --> 00:01:01.434
as a consultant, programming
language geek, whatever.

00:01:01.434 --> 00:01:04.868
I spend
lots of time with JRuby.

00:01:04.868 --> 00:01:06.767
I'm one of the core developers
for JRuby,

00:01:06.767 --> 00:01:10.367
and I'm gonna be talking more
about what JRuby is soon.

00:01:10.367 --> 00:01:13.968
I'm Swedish, so if I pronounce
something very weirdly,

00:01:13.968 --> 00:01:17.834
that's because I'm not
a native English speaker,

00:01:17.834 --> 00:01:20.567
so, um, just so you know.

00:01:20.567 --> 00:01:23.367
Anyway, um, I've written
a book about JRuby

00:01:23.367 --> 00:01:24.534
a few years back,

00:01:24.534 --> 00:01:25.968
and I've been
spending lots of time 

00:01:25.968 --> 00:01:29.667
in Java and Ruby communities,
especially the last few years.

00:01:29.667 --> 00:01:30.834
And that's about it.

00:01:30.834 --> 00:01:33.501
ThoughtWorks is
a global consulting firm.

00:01:33.501 --> 00:01:35.100
We have offices
all over the place,

00:01:35.100 --> 00:01:38.067
including
here in San Francisco...

00:01:38.067 --> 00:01:40.300
about 1,100 people.

00:01:40.300 --> 00:01:45.033
We have invested quite a lot
of time and money in Ruby,

00:01:45.033 --> 00:01:50.100
and we actually did
a lot of Ruby work in 2007.

00:01:50.100 --> 00:01:52.567
We're the largest Ruby company
in the world, actually,

00:01:52.567 --> 00:01:55.334
so that explains a little bit
our interest in Ruby

00:01:55.334 --> 00:01:58.400
and other kinds of technologies
like that.

00:01:58.400 --> 00:02:00.200
We also are famous for Agile.

00:02:00.200 --> 00:02:01.868
We spend lots of time
on Open Source.

00:02:01.868 --> 00:02:05.334
Chances are if you have used
any Open Source tool,

00:02:05.334 --> 00:02:06.501
you've probably used code

00:02:06.501 --> 00:02:09.534
that someone from ThoughtWorks
has contributed.

00:02:09.534 --> 00:02:12.100
Martin Fowler is
our chief scientist,

00:02:12.100 --> 00:02:14.801
and that's actually 
the main reason we're famous

00:02:14.801 --> 00:02:17.000
in many circles.

00:02:17.000 --> 00:02:18.501
We have
something called Studios,

00:02:18.501 --> 00:02:21.067
which is a product division,

00:02:21.067 --> 00:02:22.701
and these products
are all really cool.

00:02:22.701 --> 00:02:26.133
They solve problems
for most development teams,

00:02:26.133 --> 00:02:29.467
so I urge you
to check them out.

00:02:29.467 --> 00:02:35.234
Okay, so how many 
in this audience know Ruby?

00:02:35.234 --> 00:02:37.000
Oh, wow.
That's perfect.

00:02:37.000 --> 00:02:40.400
That's almost everyone, so
I'm sorry for the rest of you.

00:02:40.400 --> 00:02:42.567
If you don't know Ruby,
try to--

00:02:42.567 --> 00:02:44.534
[chuckles]
try to follow along anyway.

00:02:44.534 --> 00:02:46.667
I'm not gonna--I have--
I think I have--

00:02:46.667 --> 00:02:51.968
If you wanna know what Ruby is,
read this slide really quickly.

00:02:51.968 --> 00:02:54.234
Or, rather--well,
it's pretty interesting.

00:02:54.234 --> 00:02:56.133
The one thing that
I find interesting

00:02:56.133 --> 00:03:01.467
about Ruby as a language is that
it's actually older than Java,

00:03:01.467 --> 00:03:05.400
but it sprung out on the scene
of common knowledge

00:03:05.400 --> 00:03:07.100
the last few years,
thanks to Rails

00:03:07.100 --> 00:03:09.634
and other things like that.

00:03:09.634 --> 00:03:13.200
There are some features of Ruby
that you should know about,

00:03:13.200 --> 00:03:15.467
if you--if you
don't know Ruby.

00:03:15.467 --> 00:03:18.000
These are the main ones
in my mind,

00:03:18.000 --> 00:03:21.334
compared to Java for example.

00:03:21.334 --> 00:03:24.000
And...let's see.

00:03:24.000 --> 00:03:27.167
These are--these are basically
some of the main things

00:03:27.167 --> 00:03:28.300
that I'm
gonna be talking about.

00:03:28.300 --> 00:03:30.167
Just so you don't
get totally lost,

00:03:30.167 --> 00:03:32.601
RubyGems is
the package management tool.

00:03:32.601 --> 00:03:34.300
Rake is the build tool,

00:03:34.300 --> 00:03:36.534
and you can also use Rake 
for doing lots of other things.

00:03:36.534 --> 00:03:39.400
RSpec is one of the standard
testing tools.

00:03:39.400 --> 00:03:41.601
Rails and Merb--
web application frameworks.

00:03:41.601 --> 00:03:44.667
Ramaze and Sinatra--
also web application frameworks.

00:03:44.667 --> 00:03:47.701
And that's it
about pure Ruby.

00:03:47.701 --> 00:03:51.234
How many here
have played with JRuby?

00:03:51.234 --> 00:03:53.334
Okay, so that's
about 30%, 40%.

00:03:53.334 --> 00:03:57.067
So I'm gonna spend some
more time introducing JRuby.

00:03:57.067 --> 00:04:00.300
Basically, JRuby is
an implementation of Ruby.

00:04:00.300 --> 00:04:04.334
It's as compatible as we can
make it on top of Java.

00:04:04.334 --> 00:04:07.067
It runs on Java 1.5.
and upwards.

00:04:07.067 --> 00:04:08.400
It's an
Open Source project,

00:04:08.400 --> 00:04:12.868
and it's compatible with
Ruby 1.8.6, specifically.

00:04:12.868 --> 00:04:17.267
We're adding Ruby 1.9 features.
They're not complete yet.

00:04:17.267 --> 00:04:20.601
But we're trying to add them
as good as possible.

00:04:20.601 --> 00:04:22.767
The current version of JRuby
is 1.2,

00:04:22.767 --> 00:04:25.300
and we actually
just yesterday released

00:04:25.300 --> 00:04:28.434
our second release candidate
of 1.3.

00:04:28.434 --> 00:04:30.767
And 1.3 is gonna be
the JRuby version

00:04:30.767 --> 00:04:34.033
you should be using
if you want to use JRuby

00:04:34.033 --> 00:04:37.534
on Google App Engine,
for example.

00:04:37.534 --> 00:04:40.100
We are gonna release
the final version of 1.3

00:04:40.100 --> 00:04:43.434
next week at Java 1.

00:04:43.434 --> 00:04:48.000
So one thing I want to spend
some time on is why JRuby,

00:04:48.000 --> 00:04:50.267
especially since
almost everyone in the audience

00:04:50.267 --> 00:04:52.267
actually knows Ruby.

00:04:52.267 --> 00:04:55.167
This question is a little bit
more pertinent.

00:04:55.167 --> 00:04:58.167
What's wrong with
the regular Ruby interpreter?

00:04:58.167 --> 00:05:01.334
And I'm not gonna say
everything is wrong

00:05:01.334 --> 00:05:02.701
with the regular
Ruby interpreter,

00:05:02.701 --> 00:05:05.133
but there are many things
that could have been better,

00:05:05.133 --> 00:05:07.100
and things that actually
cause lots of problems

00:05:07.100 --> 00:05:12.267
for people, uh,
trying to do things on MRI.

00:05:12.267 --> 00:05:14.334
The first one
is threading.

00:05:14.334 --> 00:05:16.601
So MRI is
green-threaded,

00:05:16.601 --> 00:05:18.000
which means that
all threads

00:05:18.000 --> 00:05:21.033
belong to one, um,
operating system process,

00:05:21.033 --> 00:05:23.601
which means that you can't
really use any cores

00:05:23.601 --> 00:05:24.868
if you have that
in your system.

00:05:24.868 --> 00:05:27.968
You have to spawn new threads,
uh, new processes

00:05:27.968 --> 00:05:30.267
to actually use
new cores.

00:05:30.267 --> 00:05:33.234
In JRuby, we solve this
by using Java threads.

00:05:33.234 --> 00:05:35.067
So a Ruby thread
is a Java thread,

00:05:35.067 --> 00:05:36.767
and that's basically it.

00:05:36.767 --> 00:05:39.767
So threads are
a little bit cheaper on MRI,

00:05:39.767 --> 00:05:43.367
but threads actually
can help you scale on JRuby.

00:05:43.367 --> 00:05:46.400
That's kind of
the trade-off.

00:05:46.400 --> 00:05:48.567
Ruby has traditionally been
very patchy

00:05:48.567 --> 00:05:50.434
in its support for Unicode,

00:05:50.434 --> 00:05:53.067
and if you want to use Unicode,
and do some kind of

00:05:53.067 --> 00:05:54.334
multilingualization,

00:05:54.334 --> 00:05:57.567
or--or anything that
works outside of the U.S.,

00:05:57.567 --> 00:06:00.734
you're gonna have to use some
pretty hairy techniques

00:06:00.734 --> 00:06:01.934
in many cases.

00:06:01.934 --> 00:06:03.434
And they don't work
all over the place,

00:06:03.434 --> 00:06:05.634
so the implementation
has been patchy at best.

00:06:05.634 --> 00:06:09.767
In JRuby, we--
to be compatible with Ruby,

00:06:09.767 --> 00:06:12.901
we had to actually mimic
all those bad things.

00:06:12.901 --> 00:06:15.501
But we also give you
access to Java strings,

00:06:15.501 --> 00:06:18.968
so you can actually use Unicode
the way Java allows

00:06:18.968 --> 00:06:24.801
you to do that, um, from JRuby
by using Java strings instead.

00:06:24.801 --> 00:06:30.834
Ruby and 2C/S generally say
that Ruby is fast enough,

00:06:30.834 --> 00:06:33.634
and fast enough,
in that definition, is still

00:06:33.634 --> 00:06:35.901
enough to put you
at the slowest place

00:06:35.901 --> 00:06:37.400
in the
comparisons between

00:06:37.400 --> 00:06:39.767
different dynamic
programming languages.

00:06:39.767 --> 00:06:42.968
JRuby is between
two and ten times faster,

00:06:42.968 --> 00:06:44.934
depending on
how you measure.

00:06:44.934 --> 00:06:48.467
In average, you're seeing
between four and five times

00:06:48.467 --> 00:06:51.667
the same, um,
compared to MRI.

00:06:51.667 --> 00:06:54.100
Compared to 1.9 we are,
in most benchmarks,

00:06:54.100 --> 00:06:56.634
a little bit faster,
in some benchmarks slower,

00:06:56.634 --> 00:06:59.234
and in some benchmarks
very much faster.

00:06:59.234 --> 00:07:03.968
So we are actually setting
our goals against 1.9 right now.

00:07:03.968 --> 00:07:07.267
The reasons we are faster--there
are several reasons for this.

00:07:07.267 --> 00:07:10.000
The first one is that JRuby
has both an interpreter

00:07:10.000 --> 00:07:11.834
and a byte code
compiler.

00:07:11.834 --> 00:07:14.634
And we actually switched
from interpretive mode

00:07:14.634 --> 00:07:16.100
to compiled mode
per method,

00:07:16.100 --> 00:07:18.267
so if you have a method
that really gets called a lot

00:07:18.267 --> 00:07:20.734
we compile that down
to Java byte code.

00:07:20.734 --> 00:07:24.734
And then Java takes the--
Java HotSpot basically

00:07:24.734 --> 00:07:26.567
takes those byte codes
and profiles them

00:07:26.567 --> 00:07:29.968
and turns them into
very efficient Native code

00:07:29.968 --> 00:07:31.701
where it's needed.

00:07:31.701 --> 00:07:36.601
So we get pretty good
performance, actually.

00:07:36.601 --> 00:07:40.167
Any medium to large
Ruby application

00:07:40.167 --> 00:07:41.767
will leak memory

00:07:41.767 --> 00:07:43.701
because
the MRI Garbage Collector

00:07:43.701 --> 00:07:47.334
is a very naive implementation,
and it leaks memory.

00:07:47.334 --> 00:07:48.901
That's basically fact.

00:07:48.901 --> 00:07:52.434
JRuby uses all the
Garbage Collectors in the Java--

00:07:52.434 --> 00:07:53.834
on the Java implementation.

00:07:53.834 --> 00:07:56.067
So that means that, basically,
we just get the same kind

00:07:56.067 --> 00:07:58.467
of performance as Java
applications get from the--

00:07:58.467 --> 00:08:00.334
uh, and the same kind of
memory benefits.

00:08:00.334 --> 00:08:03.000
You can also use the same way
you tune a Java application

00:08:03.000 --> 00:08:07.367
to tune your, uh,
Ruby Garbage Collection.

00:08:07.367 --> 00:08:09.734
There are four algorithms
in Java right now,

00:08:09.734 --> 00:08:11.801
and there's gonna be
a new one in Java 7

00:08:11.801 --> 00:08:16.100
that makes Garbage Collection
really, really

00:08:16.100 --> 00:08:19.834
even better than
it is right now.

00:08:19.834 --> 00:08:21.234
If you can see
the trend here,

00:08:21.234 --> 00:08:23.567
the trend is basically that
we use the Java ecosystem.

00:08:23.567 --> 00:08:24.767
We use the JVM.

00:08:24.767 --> 00:08:27.701
We don't really do
anything extra in JRuby

00:08:27.701 --> 00:08:29.267
to support these features.

00:08:29.267 --> 00:08:33.868
They're just there because
we're on the top of the JVM.

00:08:33.868 --> 00:08:37.300
C Extensions are really annoying
to write for Ruby.

00:08:37.300 --> 00:08:42.467
So in JRuby, you basically
write a Java extension instead.

00:08:42.467 --> 00:08:45.968
A Java extension avoids
many of the problems

00:08:45.968 --> 00:08:49.067
that you had when you wrote
the C extension for Ruby.

00:08:49.067 --> 00:08:51.434
A few of the examples
of things that can go wrong

00:08:51.434 --> 00:08:53.234
when you write C extensions is
that, first of all,

00:08:53.234 --> 00:08:55.934
you can bring down
the whole interpreter.

00:08:55.934 --> 00:08:58.434
Secondly, there's no
well-defined API

00:08:58.434 --> 00:09:02.100
for how you work with
the MRI interpreter from C.

00:09:02.100 --> 00:09:06.000
So the C extensions can do,
basically, whatever they want.

00:09:06.000 --> 00:09:09.567
That's really powerful, but it's
also very, uh, very harmful

00:09:09.567 --> 00:09:11.667
because the interpreter
can't really be safe,

00:09:11.667 --> 00:09:17.000
that anything in its internal
systems is gonna be unchanged.

00:09:17.000 --> 00:09:21.133
So with JRuby we basically just
allow you to use Java classes.

00:09:21.133 --> 00:09:24.300
And since we
implemented JRuby

00:09:24.300 --> 00:09:25.634
in the [indistinct]
or in the system,

00:09:25.634 --> 00:09:29.968
we get encapsulation
and interfaces for free,

00:09:29.968 --> 00:09:32.033
and additionally,
in JRuby,

00:09:32.033 --> 00:09:35.501
you generally don't need
to write Java extensions.

00:09:35.501 --> 00:09:37.501
It's basically
one case in ten

00:09:37.501 --> 00:09:40.000
of the cases where you write
C extensions

00:09:40.000 --> 00:09:42.434
where you in JRuby need
to write a Java extension,

00:09:42.434 --> 00:09:45.033
because in most cases you could
just use Java code

00:09:45.033 --> 00:09:47.601
directly from Ruby.

00:09:47.601 --> 00:09:51.634
So JRuby allows you access
to any Java Library out there.

00:09:51.634 --> 00:09:55.000
We can use anything,
and it's very nicely integrated.

00:09:55.000 --> 00:09:58.133
So you just use it.
It works.

00:09:58.133 --> 00:10:00.133
I'm gonna
skip over those.

00:10:00.133 --> 00:10:03.267
So it's very easy
to get started with JRuby.

00:10:03.267 --> 00:10:04.634
You have to have Java
installed.

00:10:04.634 --> 00:10:07.467
I guess that's pretty common
in this audience.

00:10:07.467 --> 00:10:11.300
You download the tarball,
and then you get JRuby.

00:10:11.300 --> 00:10:12.567
You get the Ruby
standard library.

00:10:12.567 --> 00:10:15.133
You get the RubyGems,
and you get Rake.

00:10:15.133 --> 00:10:16.367
And then
you unpack it.

00:10:16.367 --> 00:10:20.367
You can have multiple copies
anywhere you want.

00:10:20.367 --> 00:10:21.767
And the only thing
you need to do

00:10:21.767 --> 00:10:24.200
if you want to be using
your JRuby from anywhere

00:10:24.200 --> 00:10:27.467
is to have the bin directory
on the PATH.

00:10:27.467 --> 00:10:30.734
Then you can start
installing gems, for example.

00:10:30.734 --> 00:10:32.334
If you only have JRuby
on your system,

00:10:32.334 --> 00:10:33.701
you can do
gem install RSpec,

00:10:33.701 --> 00:10:36.067
but if you have several
different Ruby implementations,

00:10:36.067 --> 00:10:38.501
you should use
JRuby-S

00:10:38.501 --> 00:10:42.434
to specify that you want
the gem version for JRuby

00:10:42.434 --> 00:10:44.267
and nothing else.

00:10:44.267 --> 00:10:47.601
You can also call out to Ruby
from Java, if you want to.

00:10:47.601 --> 00:10:50.968
This is with the Java 6
Script Engine Manager,

00:10:50.968 --> 00:10:53.734
and it's basically
very, very simple code.

00:10:53.734 --> 00:10:56.601
You get the engine by name,
and then you evaluate it,

00:10:56.601 --> 00:10:58.200
and that's about it.

00:10:58.200 --> 00:11:00.367
It's not that hard,
actually.

00:11:00.367 --> 00:11:03.133
There are also support in
the bin scripting foundation

00:11:03.133 --> 00:11:05.267
to do these things,

00:11:05.267 --> 00:11:07.934
and you can call out to
the JRuby engine directly

00:11:07.934 --> 00:11:09.100
if you want to.

00:11:09.100 --> 00:11:11.934
Depending on your needs,
these three versions

00:11:11.934 --> 00:11:13.901
solve different problems.

00:11:13.901 --> 00:11:17.367
So JRuby, as I mentioned,
allows you access

00:11:17.367 --> 00:11:19.367
to any Java libraries.

00:11:19.367 --> 00:11:21.367
We call that feature
Java Integration.

00:11:21.367 --> 00:11:24.901
Basically, Java types
look like they are Ruby types.

00:11:24.901 --> 00:11:27.667
You can do--anything you can
do in a Ruby type,

00:11:27.667 --> 00:11:30.300
you can do
on the Java type.

00:11:30.300 --> 00:11:32.634
So you can call methods,
you can construct instances,

00:11:32.634 --> 00:11:34.834
you can pass those
objects around, et cetera.

00:11:34.834 --> 00:11:39.467
We also--since Ruby uses
snake_case in this library,

00:11:39.467 --> 00:11:41.901
we, uh,
and Java uses camelCase,

00:11:41.901 --> 00:11:45.734
um, so we try to switch.

00:11:45.734 --> 00:11:48.367
So when you code against
the Java library,

00:11:48.367 --> 00:11:51.167
you can use
either snake_case or camelCase.

00:11:51.167 --> 00:11:52.968
The transformation
is canonical,

00:11:52.968 --> 00:11:55.968
and we won't do it if there are
existing methods with that name.

00:11:55.968 --> 00:11:57.734
But this actually makes
your Java code,

00:11:57.734 --> 00:12:01.501
or the code using Java,
look much more like Ruby,

00:12:01.501 --> 00:12:03.968
which is sometimes
a good thing.

00:12:03.968 --> 00:12:08.767
JRuby can implement interfaces
and also inherit from classes.

00:12:08.767 --> 00:12:10.901
We have something
called closure conversion.

00:12:10.901 --> 00:12:12.534
In many of those cases
where you have

00:12:12.534 --> 00:12:14.467
an anonymous
class implementation in Java,

00:12:14.467 --> 00:12:17.567
you basically just want to have
that implementation,

00:12:17.567 --> 00:12:19.267
send it
in to something.

00:12:19.267 --> 00:12:21.400
In that case,
it's just boiler plate

00:12:21.400 --> 00:12:24.667
to have to write the name
of the class or interface,

00:12:24.667 --> 00:12:27.701
the name of the method,
and all that stuff around it.

00:12:27.701 --> 00:12:31.334
So with JRuby,
if you send in a block

00:12:31.334 --> 00:12:34.100
to one of those methods
that takes something like this,

00:12:34.100 --> 00:12:35.901
it will basically just
turn the block

00:12:35.901 --> 00:12:38.734
into an implementation
of that interface

00:12:38.734 --> 00:12:41.067
or an extension
of the classing question.

00:12:41.067 --> 00:12:43.133
This makes some code
very, very terse

00:12:43.133 --> 00:12:45.934
compared, to--
to the general case.

00:12:45.934 --> 00:12:49.467
I'm gonna show how these--
what these features look like.

00:12:49.467 --> 00:12:51.601
We also have added
some extra features

00:12:51.601 --> 00:12:53.167
to Java classes
and interfaces

00:12:53.167 --> 00:12:55.334
to make them
much easier to work with.

00:12:55.334 --> 00:12:58.801
We can add any kind of--
since Ruby has open classes,

00:12:58.801 --> 00:13:01.234
we can add anything
to Ruby classes.

00:13:01.234 --> 00:13:04.067
That means also that we can
add any new method we want

00:13:04.067 --> 00:13:05.534
to a Java class too.

00:13:05.534 --> 00:13:08.801
So I'm gonna show you
a little bit

00:13:08.801 --> 00:13:13.167
what our Java Integration
looks like.

00:13:13.167 --> 00:13:16.701
And I'm gonna be using--
let's see.

00:13:16.701 --> 00:13:18.067
Here we are.

00:13:18.067 --> 00:13:19.968
Uh, "jirb,"

00:13:19.968 --> 00:13:23.234
which is the interactive
Ruby prompt for JRuby.

00:13:23.234 --> 00:13:25.634
And it's basically the same
as the interactive prompt

00:13:25.634 --> 00:13:27.267
for regular Ruby.

00:13:27.267 --> 00:13:30.067
Can everyone see this?

00:13:30.067 --> 00:13:33.100
Is there someone
who can't see it?

00:13:33.100 --> 00:13:36.467
Okay, uh,
no answer at all.

00:13:36.467 --> 00:13:38.300
I can do 1 plus 1, et cetera.

00:13:38.300 --> 00:13:42.067
I can also
use the Java class...

00:13:44.400 --> 00:13:50.534
and say, "Hello World,"
in a slightly more verbose way.

00:13:50.534 --> 00:13:54.701
I can import classes,
but importing a class

00:13:54.701 --> 00:13:57.033
doesn't really do exactly
what it does in Java.

00:13:57.033 --> 00:14:00.334
In Ruby, import basically
does exactly the same thing

00:14:00.334 --> 00:14:04.067
as doing
HashMap=java.util.HashMap.

00:14:04.067 --> 00:14:09.133
So it just sets the name
in the local scope.

00:14:09.133 --> 00:14:12.667
I can use, oops.
I can use the HashMaps.

00:14:12.667 --> 00:14:14.901
So I can create a new Hash
by doing--

00:14:14.901 --> 00:14:21.234
calling that new,
and I can add stuff to it.

00:14:21.234 --> 00:14:24.868
This, uh,
as you can see,

00:14:24.868 --> 00:14:27.767
we have added index,
or the--the square brackets

00:14:27.767 --> 00:14:30.801
so you can work
with these, um--

00:14:30.801 --> 00:14:34.067
with the Hash
like it was a Ruby Hash,

00:14:34.067 --> 00:14:36.801
while it actually is
a Java Hash in this case.

00:14:36.801 --> 00:14:38.167
As you can see,
if we'd printed,

00:14:38.167 --> 00:14:40.367
you can see that it says
that it's a Java,

00:14:40.367 --> 00:14:42.400
JavaUtil HashMap,

00:14:42.400 --> 00:14:44.067
And--and the name
on the left-hand side,

00:14:44.067 --> 00:14:47.133
that's the canonical way
we refer to Java classes.

00:14:47.133 --> 00:14:48.267
In most, whoa--

00:14:48.267 --> 00:14:50.701
in most cases, it is easier
to refer to them

00:14:50.701 --> 00:14:52.767
in other ways,

00:14:52.767 --> 00:14:54.033
but if you really want
to understand what we're doing

00:14:54.033 --> 00:14:55.267
with the
Java integration features,

00:14:55.267 --> 00:14:58.334
that's the--the way
you get access to it.

00:14:58.334 --> 00:15:00.200
We can see that this is still
a Java object,

00:15:00.200 --> 00:15:01.701
and if we call
to_s to it,

00:15:01.701 --> 00:15:05.701
we can see that we get a HashMap
way of printing this stuff.

00:15:05.701 --> 00:15:12.267
So we can work with this,
just like it was any Ruby class.

00:15:12.267 --> 00:15:13.601
And we have added
lots of other stuff.

00:15:13.601 --> 00:15:15.834
So, for example,
JavaUtil list.

00:15:15.834 --> 00:15:17.167
It's innumerable.

00:15:17.167 --> 00:15:20.300
So you can use all innumerable
methods on Java lists

00:15:20.300 --> 00:15:21.367
and so on.

00:15:21.367 --> 00:15:24.067
You can also get access
to other APIs.

00:15:24.067 --> 00:15:26.000
So Java Security,
for example,

00:15:26.000 --> 00:15:30.100
has this funny method called
get_algorithms.

00:15:30.100 --> 00:15:32.167
Now, I did something interesting
a few years back,

00:15:32.167 --> 00:15:36.133
when I was--
I was working on creating

00:15:36.133 --> 00:15:39.334
a Java-based implementation
of OpenSSL

00:15:39.334 --> 00:15:42.234
using the Java security APIs

00:15:42.234 --> 00:15:44.534
instead of the primitives
on OpenSSL.

00:15:44.534 --> 00:15:45.968
And I needed this
get_algorithms method

00:15:45.968 --> 00:15:47.000
all the time.

00:15:47.000 --> 00:15:48.300
And the problem with it is

00:15:48.300 --> 00:15:50.601
that get_algorithms doesn't
really describe,

00:15:50.601 --> 00:15:53.133
how, what,
the result looks like,

00:15:53.133 --> 00:15:56.868
so I have to basically create
lots of, whoops--

00:15:56.868 --> 00:16:00.467
lots of small test classes
to see what I get back

00:16:00.467 --> 00:16:04.767
from calling this
in different ways.

00:16:04.767 --> 00:16:07.434
So instead of creating
those small classes,

00:16:07.434 --> 00:16:11.000
I instead open up
Java and JRuby's IRB,

00:16:11.000 --> 00:16:12.467
and I call the method
from it here,

00:16:12.467 --> 00:16:15.334
and I can just see that,
in this case,

00:16:15.334 --> 00:16:17.267
I get algorithms
that look like this.

00:16:17.267 --> 00:16:19.334
And I can modify them
and work with them

00:16:19.334 --> 00:16:21.434
like I could with any
in the Ruby class.

00:16:21.434 --> 00:16:24.667
I can sort them, I can grep
for a specific algorithm,

00:16:24.667 --> 00:16:26.701
and so on.

00:16:26.701 --> 00:16:29.133
This is mostly useful
for Java APIs that have

00:16:29.133 --> 00:16:31.200
bad documentation
or documentation that doesn't

00:16:31.200 --> 00:16:33.133
tell you anything.

00:16:33.133 --> 00:16:35.033
Like, for example,
if you wanna check

00:16:35.033 --> 00:16:37.667
for corner cases in their
regular expression APIs

00:16:37.667 --> 00:16:38.767
for Java,

00:16:38.767 --> 00:16:40.701
this is the perfect place
of handling it.

00:16:40.701 --> 00:16:42.734
I used to have
a Spikes directory,

00:16:42.734 --> 00:16:44.901
where I had, like,
a hundred Java classes

00:16:44.901 --> 00:16:47.334
that were just five lines long
to do stuff.

00:16:47.334 --> 00:16:50.601
I don't do that anymore because
I have--I can--I can

00:16:50.601 --> 00:16:53.133
test all those things in the
interactive prompt and stuff.

00:16:53.133 --> 00:16:57.167
Now, those examples were
a little bit useful.

00:16:57.167 --> 00:17:02.767
So I'm gonna finish by showing
a slightly more useless example.

00:17:02.767 --> 00:17:06.234
But it's very flashy, or
a little bit flashy, at least.

00:17:06.234 --> 00:17:08.734
Since I can work with
any Java APIs,

00:17:08.734 --> 00:17:10.868
that means that I can,
for example,

00:17:10.868 --> 00:17:13.801
work with Swing.

00:17:13.801 --> 00:17:15.567
Let's see.
Create a new frame here.

00:17:15.567 --> 00:17:16.834
This is gonna
take some time,

00:17:16.834 --> 00:17:18.367
because I'm running
[indistinct],

00:17:18.367 --> 00:17:21.200
so it needs to start X11 in
the background the first time.

00:17:21.200 --> 00:17:22.534
Sorry about that.

00:17:22.534 --> 00:17:24.300
And there we get X11,

00:17:24.300 --> 00:17:28.634
and now we can
set the size

00:17:28.634 --> 00:17:30.701
and we can show it.

00:17:30.701 --> 00:17:34.167
And here I have a Swing frame
that I've created dynamically.

00:17:34.167 --> 00:17:35.767
Now, everything
is not over.

00:17:35.767 --> 00:17:37.200
I can actually
work with the Swing frames.

00:17:37.200 --> 00:17:39.334
I can create a new JButton,
for example,

00:17:39.334 --> 00:17:42.767
that says,
"Hello World."

00:17:42.767 --> 00:17:44.501
And then I add that
to the frame,

00:17:44.501 --> 00:17:45.901
and then I show
the frame again,

00:17:45.901 --> 00:17:47.334
and you can see

00:17:47.334 --> 00:17:49.367
we have this beautiful button
that covers the whole thing.

00:17:49.367 --> 00:17:51.834
It doesn't really
do anything,

00:17:51.834 --> 00:17:52.968
but that's okay,

00:17:52.968 --> 00:17:54.834
because we can add behavior
after the fact.

00:17:54.834 --> 00:17:55.968
This is not static, right?

00:17:55.968 --> 00:18:00.167
So we can add
an action_listener.

00:18:00.167 --> 00:18:03.133
And my problem here
is that I never remember

00:18:03.133 --> 00:18:04.601
what the interface
is called.

00:18:04.601 --> 00:18:06.901
And--and I don't really
believe in IDs

00:18:06.901 --> 00:18:08.701
that remember stuff
for me.

00:18:08.701 --> 00:18:10.501
Because
if it remembers for me,

00:18:10.501 --> 00:18:11.834
it can write
the stuff for me,

00:18:11.834 --> 00:18:14.534
and that means that I will be
writing lots of code

00:18:14.534 --> 00:18:16.834
that I haven't
actually been typing,

00:18:16.834 --> 00:18:19.033
which means that I will
have to read that code later on,

00:18:19.033 --> 00:18:21.968
and that's the stuff
that I really dislike.

00:18:21.968 --> 00:18:24.167
So since I don't
remember the interface,

00:18:24.167 --> 00:18:25.601
or actually,
I think I do remember it,

00:18:25.601 --> 00:18:28.767
but anyway, the code for
implementing this interface

00:18:28.767 --> 00:18:30.133
would be a little bit
annoying.

00:18:30.133 --> 00:18:31.267
And I don't really care.

00:18:31.267 --> 00:18:33.801
The only thing I want to do
is do something

00:18:33.801 --> 00:18:36.501
when someone
pushes this button.

00:18:36.501 --> 00:18:38.400
So in this case,
I'm just gonna say,

00:18:38.400 --> 00:18:39.400
"Give it a block."

00:18:39.400 --> 00:18:43.267
And I say,
"button pressed."

00:18:43.267 --> 00:18:46.067
And, "end."
And then I go here.

00:18:46.067 --> 00:18:48.501
And we can see that
we're triggering Ruby code

00:18:48.501 --> 00:18:51.400
from a
Java Swing interface here.

00:18:51.400 --> 00:18:53.834
Um, I can also add
a new action_listener

00:18:53.834 --> 00:18:56.200
that can do
some stuff here.

00:18:56.200 --> 00:18:57.567
"E" is the Event,

00:18:57.567 --> 00:19:00.901
and Event has this, um,
method called Source.

00:19:00.901 --> 00:19:04.534
Actually, the method name
is Get Source.

00:19:04.534 --> 00:19:06.634
But since this is Ruby,
and the Ruby convention

00:19:06.634 --> 00:19:08.300
is not to use Get
in the names,

00:19:08.300 --> 00:19:10.968
uh, JRuby actually
adds aliases.

00:19:10.968 --> 00:19:13.334
So just doing that source
will get--

00:19:13.334 --> 00:19:15.734
will evoke
the method called Get Source.

00:19:15.734 --> 00:19:17.834
The same thing
is done with text

00:19:17.834 --> 00:19:19.868
with setters.

00:19:19.868 --> 00:19:22.400
So there is no method
called text =

00:19:22.400 --> 00:19:24.434
on the--on the button.

00:19:24.434 --> 00:19:26.167
Instead, there's a method
called setText.

00:19:26.167 --> 00:19:28.367
But this does exactly
the same thing.

00:19:28.367 --> 00:19:32.434
So I can modify this interface
and I can go back here.

00:19:32.434 --> 00:19:37.133
And when I press it now,
the text changes.

00:19:37.133 --> 00:19:38.467
So that's
a very, very small example

00:19:38.467 --> 00:19:41.300
of how you can work
with Ruby code and Java code,

00:19:41.300 --> 00:19:44.434
and just mix and match,
and do whatever you--you--

00:19:44.434 --> 00:19:46.868
in different pieces,
exactly what you want to do.

00:19:46.868 --> 00:19:51.734
The key thing to remember
is that you can do--

00:19:51.734 --> 00:19:57.501
anything you can do from Java,
you can really do from Ruby

00:19:57.501 --> 00:20:00.534
as long as it makes sense
so to speak.

00:20:00.534 --> 00:20:01.868
There are a--
[laughs]

00:20:01.868 --> 00:20:03.834
There are
a few caveats to that.

00:20:03.834 --> 00:20:06.267
The thing is, some of the things
that you you want to do--

00:20:06.267 --> 00:20:08.434
uh, that you want to do
in Java

00:20:08.434 --> 00:20:10.534
doesn't really make sense
to do in Ruby.

00:20:10.534 --> 00:20:12.634
A typical example
is annotations.

00:20:12.634 --> 00:20:14.734
Now, annotations
are really useful,

00:20:14.734 --> 00:20:17.000
but they're
a static feature.

00:20:17.000 --> 00:20:18.667
And since Ruby is running,

00:20:18.667 --> 00:20:20.133
JRuby is running at runtime.

00:20:20.133 --> 00:20:24.667
Uh, it's already too late
to add those static features

00:20:24.667 --> 00:20:26.400
when the Ruby program
is running.

00:20:26.400 --> 00:20:28.000
So annotations
doesn't actually make sense

00:20:28.000 --> 00:20:29.300
for a Ruby program,

00:20:29.300 --> 00:20:31.167
or at least Java annotation
doesn't make sense

00:20:31.167 --> 00:20:32.367
for a Ruby program.

00:20:32.367 --> 00:20:36.767
Another typical thing
is generics.

00:20:36.767 --> 00:20:38.734
Ruby doesn't have
generics,

00:20:38.734 --> 00:20:41.434
and the JVM doesn't have
generics either.

00:20:41.434 --> 00:20:45.133
It's just the Java language
that has generics.

00:20:45.133 --> 00:20:47.767
So there is no syntax
for working with generics

00:20:47.767 --> 00:20:49.801
because it doesn't really
make sense to, uh,

00:20:49.801 --> 00:20:52.567
to work with the APIs
at runtime with generics

00:20:52.567 --> 00:20:55.968
since they don't exist
at runtime in Java.

00:20:55.968 --> 00:20:59.467
Okay, so let's switch over
to Rails a little bit.

00:20:59.467 --> 00:21:02.067
I assume that everyone here
who knew Ruby

00:21:02.067 --> 00:21:03.667
actually knows Rails too,

00:21:03.667 --> 00:21:08.501
so I'm gonna just, uh,
skip over this...really.

00:21:08.501 --> 00:21:10.801
But this one is
a little bit more interesting.

00:21:10.801 --> 00:21:14.534
So Rails works perfectly
on the JRuby.

00:21:14.534 --> 00:21:16.033
It's very easy
to get started and set up.

00:21:16.033 --> 00:21:19.267
It's basically the same thing as
starting out a Rails application

00:21:19.267 --> 00:21:20.534
with regular Ruby.

00:21:20.534 --> 00:21:22.167
The only thing
you need to do differently

00:21:22.167 --> 00:21:24.934
is to use a different
ActiveRecord driver

00:21:24.934 --> 00:21:27.601
for the database because you
can't really use ActiveRecord.

00:21:27.601 --> 00:21:29.267
Instead, you need to use
something called

00:21:29.267 --> 00:21:33.234
ActiveRecord JRubyC
that allows you to use JRubyC

00:21:33.234 --> 00:21:36.000
to back
your Rails application.

00:21:36.000 --> 00:21:37.334
We have
very good performance

00:21:37.334 --> 00:21:40.267
and lots of deployments
of JRuby.

00:21:40.267 --> 00:21:42.033
And you get access
to all the libraries in Java.

00:21:42.033 --> 00:21:44.133
You can create
a Rails application

00:21:44.133 --> 00:21:48.634
they use in CJBs and so on,
if you really feel perverse.

00:21:48.634 --> 00:21:49.968
It's very easy
to deploy.

00:21:49.968 --> 00:21:52.934
The Rails deployment story
has for a long time been

00:21:52.934 --> 00:21:55.067
a little bit, uh,
annoying.

00:21:55.067 --> 00:21:59.133
This is getting better,
but in the JRuby world,

00:21:59.133 --> 00:22:00.667
it's very, very easy
to deploy.

00:22:00.667 --> 00:22:03.501
Basically you just package
your Rails application

00:22:03.501 --> 00:22:04.601
into a WAR file.

00:22:04.601 --> 00:22:06.200
And then you deploy
that WAR file

00:22:06.200 --> 00:22:10.033
exactly like you would
any Java web application.

00:22:10.033 --> 00:22:13.033
JRubyC allows much better
database support

00:22:13.033 --> 00:22:16.601
than, uh, than Rails does
in general,

00:22:16.601 --> 00:22:19.601
and it's also
totally platform independent.

00:22:19.601 --> 00:22:20.901
So you can run--

00:22:20.901 --> 00:22:23.133
this is one of the examples
that we have.

00:22:23.133 --> 00:22:25.634
I find this
pretty nice, actually.

00:22:25.634 --> 00:22:29.567
I'm sure you couldn't do that
with regular Ruby.

00:22:33.300 --> 00:22:38.000
Okay, I said earlier that
JRuby is compatible with Ruby.

00:22:38.000 --> 00:22:40.133
Uh, that was a lie.

00:22:40.133 --> 00:22:43.434
Or, a truth
with modification.

00:22:43.434 --> 00:22:47.033
Basically, there are a few
things that doesn't really work,

00:22:47.033 --> 00:22:48.267
or that we have changed.

00:22:48.267 --> 00:22:51.400
The obvious one is that
you can use Java classes.

00:22:51.400 --> 00:22:54.567
But that is no real change
in lib--in syntax.

00:22:54.567 --> 00:22:56.434
The only change there
is in libraries.

00:22:56.434 --> 00:22:57.701
And you could--

00:22:57.701 --> 00:23:00.467
if you really want to,
you can, you can use, uh,

00:23:00.467 --> 00:23:03.667
the Ruby-Java Bridge,
and implement the same API,

00:23:03.667 --> 00:23:04.901
for example.

00:23:04.901 --> 00:23:06.133
But JRuby is still
the most compatible

00:23:06.133 --> 00:23:07.868
alternative implementation,

00:23:07.868 --> 00:23:11.934
and it's the only one that runs
basically all Ruby applications.

00:23:11.934 --> 00:23:13.901
Native threads
versus green threads

00:23:13.901 --> 00:23:15.667
generally doesn't
make a difference

00:23:15.667 --> 00:23:18.567
except for in a few
special cases.

00:23:18.567 --> 00:23:23.200
Many Ruby libraries
depend on unsafe things,

00:23:23.200 --> 00:23:24.968
and the reason they do that
is because

00:23:24.968 --> 00:23:27.234
it's safe to do them
when you have green threads

00:23:27.234 --> 00:23:30.868
because they have
the deterministic scheduler.

00:23:30.868 --> 00:23:32.868
We can never guarantee
that kind of thing

00:23:32.868 --> 00:23:34.133
with native threads.

00:23:34.133 --> 00:23:36.901
So some of the libraries--
for example, Timeout

00:23:36.901 --> 00:23:41.400
is a library that is
a little bit evil to use at all.

00:23:41.400 --> 00:23:44.634
C extensions
are not supported right now.

00:23:44.634 --> 00:23:45.834
We're working on that,

00:23:45.834 --> 00:23:49.067
and we should have support
for it in a while.

00:23:49.067 --> 00:23:50.901
It's a little bit tricky
to provide support

00:23:50.901 --> 00:23:53.601
for C extensions
from JRuby

00:23:53.601 --> 00:23:55.834
because--not because
it's hard to call out to C,

00:23:55.834 --> 00:23:57.901
but the thing is
about the C extensions

00:23:57.901 --> 00:23:59.601
is that they--
as I mentioned earlier,

00:23:59.601 --> 00:24:02.033
since the Ruby MRI interpreter
doesn't really have

00:24:02.033 --> 00:24:04.100
any good interface
to its internals,

00:24:04.100 --> 00:24:05.434
these C extensions,

00:24:05.434 --> 00:24:08.067
they do all kinds
of really nasty things,

00:24:08.067 --> 00:24:10.167
which means that for us
to be able to support them,

00:24:10.167 --> 00:24:12.434
we need to fake out
those things

00:24:12.434 --> 00:24:15.667
so that the JRuby stuff
looks like they have

00:24:15.667 --> 00:24:20.100
the same internal structure
as the Ruby implementation.

00:24:20.100 --> 00:24:22.534
That's not entirely trivial,

00:24:22.534 --> 00:24:25.100
but we're working on that.

00:24:25.100 --> 00:24:28.601
We don't support
full continuations.

00:24:28.601 --> 00:24:32.067
No one has really
complained about that.

00:24:32.067 --> 00:24:34.701
We don't support fork.

00:24:34.701 --> 00:24:36.400
Well, actually
we have fork.

00:24:36.400 --> 00:24:38.167
Fork is working.

00:24:38.167 --> 00:24:40.434
But we have turned it off
because it's not really

00:24:40.434 --> 00:24:43.734
a good thing to fork
your web sphere or whatever

00:24:43.734 --> 00:24:45.334
in production.

00:24:45.334 --> 00:24:47.968
I think that people
is gonna be a little bit mad

00:24:47.968 --> 00:24:49.667
if some library does that.

00:24:49.667 --> 00:24:52.100
ObjectSpace is turned off
by default.

00:24:52.100 --> 00:24:53.601
You can turn it on
if you want to.

00:24:53.601 --> 00:24:56.834
It's gonna cost you
about half your performance

00:24:56.834 --> 00:24:58.467
if you do it.

00:24:58.467 --> 00:25:01.334
And there generally
better ways of doing stuff.

00:25:01.334 --> 00:25:03.734
Okay, so I mentioned
it's very easy

00:25:03.734 --> 00:25:05.067
to package things.

00:25:05.067 --> 00:25:08.000
Basically, you need something
called Warbler.

00:25:08.000 --> 00:25:09.701
It's a self-contained thing

00:25:09.701 --> 00:25:11.901
that includes JRuby
and a servlet adapter.

00:25:11.901 --> 00:25:14.367
And you do
gem install warbler,

00:25:14.367 --> 00:25:15.901
then inside of your
Rails application,

00:25:15.901 --> 00:25:17.534
you do warble config.

00:25:17.534 --> 00:25:19.200
And then finally,
you do warble.

00:25:19.200 --> 00:25:24.267
And at that point
you have a WAR file.

00:25:24.267 --> 00:25:27.067
Rack is one of those APIs

00:25:27.067 --> 00:25:28.767
that people are using

00:25:28.767 --> 00:25:31.067
to provide
uniform access

00:25:31.067 --> 00:25:32.834
to different
web application APIs.

00:25:32.834 --> 00:25:35.000
How many here
knows about Rack?

00:25:35.000 --> 00:25:36.901
Okay, so that's about 50%.

00:25:36.901 --> 00:25:39.234
That's pretty good too.

00:25:39.234 --> 00:25:42.234
Basically all Ruby web
frameworks support Rack now.

00:25:42.234 --> 00:25:44.300
And we have something
called JRuby-rack,

00:25:44.300 --> 00:25:46.834
which is a RackServlet.

00:25:46.834 --> 00:25:49.467
It's basically a servlet
that dispatches to Rack.

00:25:49.467 --> 00:25:51.534
So that means
that any web framework

00:25:51.534 --> 00:25:52.801
that supports Rack

00:25:52.801 --> 00:25:56.434
can be used
with JRuby-rack.

00:25:56.434 --> 00:26:01.033
And it handles pooling
and stuff like that too.

00:26:01.033 --> 00:26:04.133
Okay, so I have spoken
for a while

00:26:04.133 --> 00:26:06.400
without coming into
the Google App Engine stuff.

00:26:06.400 --> 00:26:08.968
That should
hopefully change now.

00:26:08.968 --> 00:26:13.701
So JRuby works fine
under Google App Engine.

00:26:13.701 --> 00:26:15.934
People have tested several
different web frameworks

00:26:15.934 --> 00:26:17.200
and so on.

00:26:17.200 --> 00:26:18.400
It's still a little bit--

00:26:18.400 --> 00:26:20.000
There are still
a few things

00:26:20.000 --> 00:26:22.167
that makes this
not totally trivial.

00:26:22.167 --> 00:26:24.701
It works more or less
as you would expect it,

00:26:24.701 --> 00:26:27.200
but it's a few things
you need to keep in mind.

00:26:27.200 --> 00:26:29.901
Some of these things--

00:26:29.901 --> 00:26:32.367
So Reggae is basically
a library that tries

00:26:32.367 --> 00:26:34.567
to take care
of some of these things.

00:26:34.567 --> 00:26:36.734
It stands for
Ruby Enabled Google App Engine,

00:26:36.734 --> 00:26:39.701
and it provides simple
support for configuration,

00:26:39.701 --> 00:26:43.934
packaging
Gems into Jar files,

00:26:43.934 --> 00:26:47.167
simplify the running
of Rack applications

00:26:47.167 --> 00:26:49.000
on the local
development server.

00:26:49.000 --> 00:26:52.601
The local development server
is...

00:26:52.601 --> 00:26:54.734
I think I have a slide
for the problems,

00:26:54.734 --> 00:26:56.200
but the local
development server

00:26:56.200 --> 00:26:57.400
is a problem in general

00:26:57.400 --> 00:26:59.834
because it doesn't
really mimic exactly

00:26:59.834 --> 00:27:01.934
the Google App Engine
that you upload stuff to.

00:27:01.934 --> 00:27:04.434
So if you run
your unit test locally

00:27:04.434 --> 00:27:05.767
on the dev server,

00:27:05.767 --> 00:27:07.467
that doesn't really mean
that it will run the same

00:27:07.467 --> 00:27:09.167
on the Google
App Engine stuff.

00:27:09.167 --> 00:27:10.701
So in principle,

00:27:10.701 --> 00:27:13.434
you should be able to use
the local dev server.

00:27:13.434 --> 00:27:15.734
In practice,
I stopped doing that

00:27:15.734 --> 00:27:17.901
because it didn't
really work.

00:27:17.901 --> 00:27:20.934
So that makes it
a little bit annoying to--

00:27:20.934 --> 00:27:22.968
You don't really have
the quick turnaround

00:27:22.968 --> 00:27:24.901
that you would expect
from a Rails application.

00:27:24.901 --> 00:27:29.067
So you need to deploy it
to test basically.

00:27:29.067 --> 00:27:31.033
Reggae tries to fix
some of these problems.

00:27:31.033 --> 00:27:32.968
I don't know how far
they've come to that.

00:27:32.968 --> 00:27:34.934
It's supposed to also help
with deployment,

00:27:34.934 --> 00:27:37.167
but it's not really
done that yet.

00:27:37.167 --> 00:27:39.734
And it could--probably needs
some really good Ruby hackers

00:27:39.734 --> 00:27:43.267
to help out.

00:27:43.267 --> 00:27:46.501
For interacting with
the Google App Engine APIs,

00:27:46.501 --> 00:27:50.234
we have--for example,
we have DataMapper.

00:27:50.234 --> 00:27:52.601
DataMapper is a Ruby ORM

00:27:52.601 --> 00:27:54.767
that has support for lots
of different back ends.

00:27:54.767 --> 00:27:58.934
And it actually
has an adapter for BigTable.

00:27:58.934 --> 00:28:01.701
It's called
dm-datastore-adapter.

00:28:01.701 --> 00:28:05.467
It doesn't support everything
DataMapper supports, of course,

00:28:05.467 --> 00:28:11.100
because basically
DataMapper is a full ORM tool

00:28:11.100 --> 00:28:13.667
that's supposed to support
everything you can do

00:28:13.667 --> 00:28:15.567
to an RDBMS.

00:28:15.567 --> 00:28:18.167
That can't--you can't do that
on Google App Engine.

00:28:18.167 --> 00:28:20.133
So it only supports
the kind of things

00:28:20.133 --> 00:28:24.300
that you actually can do
with BigTable.

00:28:24.300 --> 00:28:26.367
Another one
of those libraries--

00:28:26.367 --> 00:28:27.901
and this is a specific one.

00:28:27.901 --> 00:28:30.133
This is just, like,
10, 20 lines of code,

00:28:30.133 --> 00:28:31.601
but it's enough.

00:28:31.601 --> 00:28:32.934
It's a library called BeeU

00:28:32.934 --> 00:28:35.667
that allows you to integrate
your Rails application

00:28:35.667 --> 00:28:37.501
with the UserService.

00:28:37.501 --> 00:28:40.267
Basically, you get
person and admin status

00:28:40.267 --> 00:28:42.234
automatically set.

00:28:42.234 --> 00:28:43.834
It's very, very
easy to use.

00:28:43.834 --> 00:28:45.400
I'm actually gonna
show this code later

00:28:45.400 --> 00:28:48.334
because, yeah,
I have a Rails application

00:28:48.334 --> 00:28:50.701
that I'm gonna show you.

00:28:54.901 --> 00:28:56.234
Oh, let's see.

00:28:56.234 --> 00:28:59.834
Okay, let's kill X11.

00:28:59.834 --> 00:29:03.567
Sorry.

00:29:03.567 --> 00:29:08.467
Okay, so the actual
application, first of all,

00:29:08.467 --> 00:29:09.834
looks like this.

00:29:09.834 --> 00:29:14.000
It's a very, very, very simple
blog post thingy.

00:29:14.000 --> 00:29:15.501
And, um...

00:29:15.501 --> 00:29:20.801
Let's see if I can--
if it actually responds to me.

00:29:20.801 --> 00:29:22.868
The first request
is kind of slow sometimes.

00:29:22.868 --> 00:29:24.801
So I can create
a new blog here.

00:29:24.801 --> 00:29:28.367
I can go in and--and
add new posts, for example.

00:29:28.367 --> 00:29:31.100
And look here at--at the fact
that I'm logged in here.

00:29:31.100 --> 00:29:32.467
I can log out.

00:29:32.467 --> 00:29:35.167
And the way this works is that
if you're logged in

00:29:35.167 --> 00:29:38.767
but not an administrator,
uh, you can add comments.

00:29:38.767 --> 00:29:41.667
If you are logged in,
but as an administrator

00:29:41.667 --> 00:29:42.934
for the appspot stuff,

00:29:42.934 --> 00:29:45.067
you're able--you're able
to post new posts

00:29:45.067 --> 00:29:46.634
and--and remove stuff
and so on.

00:29:46.634 --> 00:29:49.000
And this is all using the--
my Gmail account

00:29:49.000 --> 00:29:53.300
so the integration is...
dead simple, really.

00:29:53.300 --> 00:29:54.934
Let's see...

00:29:54.934 --> 00:29:57.067
if this...

00:29:57.067 --> 00:29:59.601
Okay, this takes time.
Sorry about that.

00:29:59.601 --> 00:30:01.634
This is basically just
the, um, the, um,

00:30:01.634 --> 00:30:02.901
single sign-on stuff.

00:30:02.901 --> 00:30:04.934
And now I'm back
at the start again,

00:30:04.934 --> 00:30:08.501
so I can go back to the front
and so on.

00:30:08.501 --> 00:30:09.868
And you can see here
that I don't have

00:30:09.868 --> 00:30:11.434
access to remove stuff,
and so on.

00:30:11.434 --> 00:30:13.834
This code is
very, very simple.

00:30:13.834 --> 00:30:15.167
It's more of a proof of concept
than anything else,

00:30:15.167 --> 00:30:16.400
and it's actually--

00:30:16.400 --> 00:30:19.534
You can download the code
from my GitHub account.

00:30:19.534 --> 00:30:22.000
And--but I'm gonna show you
a few of the pieces

00:30:22.000 --> 00:30:26.901
that actually, uh--the things
you need to do

00:30:26.901 --> 00:30:29.667
to make
a Rails application run.

00:30:29.667 --> 00:30:32.300
So first of all,
it's--it's pretty simple.

00:30:32.300 --> 00:30:35.200
You need
App Engine XML

00:30:35.200 --> 00:30:37.601
and you need
a datastore indexes.

00:30:37.601 --> 00:30:39.667
to be able to...
to do joins.

00:30:39.667 --> 00:30:45.167
This stuff is all pretty much--
pretty much documented.

00:30:45.167 --> 00:30:46.667
This one
set some properties.

00:30:46.667 --> 00:30:48.934
Actually, these are--
except for these two,

00:30:48.934 --> 00:30:50.334
these two are
the only properties

00:30:50.334 --> 00:30:52.901
that you need to do
for JRuby right now.

00:30:52.901 --> 00:30:57.267
The rest of them are actually
the default ones, I think.

00:30:57.267 --> 00:30:59.467
But this is just basically
exactly the same thing

00:30:59.467 --> 00:31:04.701
as it works in the, um,
uh, for the Java stuff.

00:31:04.701 --> 00:31:07.801
Warbler, um, you need
to specifically include

00:31:07.801 --> 00:31:08.834
the App Engine web,

00:31:08.834 --> 00:31:10.534
and the datastore
indexes files.

00:31:10.534 --> 00:31:14.200
And you need to...

00:31:14.200 --> 00:31:16.300
actually--
you can actually set this down

00:31:16.300 --> 00:31:19.601
because you're never gonna get
more than one runtime, anyway.

00:31:19.601 --> 00:31:23.167
And you need to make sure that
no Java libraries are included,

00:31:23.167 --> 00:31:24.801
uh, in this way,

00:31:24.801 --> 00:31:28.100
because you need to add all your
Java libraries yourself.

00:31:28.100 --> 00:31:30.868
So in this case you
need to have App Engine API,

00:31:30.868 --> 00:31:34.000
and, uh,
you need to have JRuby

00:31:34.000 --> 00:31:36.534
and you need to have
JRuby Rack.

00:31:36.534 --> 00:31:39.267
And those--all of them
can be found on the net

00:31:39.267 --> 00:31:40.501
in a pretty simple--

00:31:40.501 --> 00:31:43.834
with a--with one of those
very nice search engines

00:31:43.834 --> 00:31:47.234
we--we probably know
all about.

00:31:47.234 --> 00:31:49.934
Okay, so
configuration_vice--

00:31:49.934 --> 00:31:52.033
this application
is pretty simple too.

00:31:52.033 --> 00:31:55.434
The one thing that it does here
is that it actually requires

00:31:55.434 --> 00:31:56.868
big_table_servlet_store.

00:31:56.868 --> 00:32:00.300
I created my own servlet_store
to store, uh, sessions

00:32:00.300 --> 00:32:03.100
in--in big_tables there

00:32:03.100 --> 00:32:05.868
because I found that
the way sessions worked--

00:32:05.868 --> 00:32:10.567
are a little bit tricky
on Google App Engine.

00:32:10.567 --> 00:32:13.267
I'm taking and removing
active_record.

00:32:13.267 --> 00:32:15.667
I don't need active_record
at all.

00:32:15.667 --> 00:32:18.601
And then finally--
let's see, what do I do here?

00:32:18.601 --> 00:32:21.067
I set the
big_table_servlet_store,

00:32:21.067 --> 00:32:23.000
and I require something
called bumble.

00:32:23.000 --> 00:32:25.267
Bumble is also
a very small project,

00:32:25.267 --> 00:32:28.100
to basically give you something
that looks like active_record

00:32:28.100 --> 00:32:31.100
but uses, uh
big_table underneath.

00:32:31.100 --> 00:32:35.200
So let's take a look
at the actual

00:32:35.200 --> 00:32:36.567
model files first.

00:32:36.567 --> 00:32:39.701
These ones
all use bumble,

00:32:39.701 --> 00:32:41.734
and this is the way
you work with them.

00:32:41.734 --> 00:32:48.667
Ds describes the, the, the
properties you want to be using.

00:32:48.667 --> 00:32:50.834
You need to do this to get

00:32:50.834 --> 00:32:52.267
automatically generated
properties,

00:32:52.267 --> 00:32:53.400
so you can work
with this.

00:32:53.400 --> 00:32:55.501
You can still
add new stuff to this

00:32:55.501 --> 00:32:58.100
exactly like you--exactly like
you would with big_table,

00:32:58.100 --> 00:32:59.801
with the core APIs,

00:32:59.801 --> 00:33:02.267
but this is how you get
some nice accessories.

00:33:02.267 --> 00:33:06.200
You can say, belongs_to
and has_many.

00:33:06.200 --> 00:33:09.868
This one says that
the order should be inverted:

00:33:09.868 --> 00:33:11.400
created_at,
for example.

00:33:11.400 --> 00:33:12.667
And see--

00:33:12.667 --> 00:33:14.834
a person has a given_name,
a sur_name; 

00:33:14.834 --> 00:33:17.367
an email
has_many blogs.

00:33:17.367 --> 00:33:21.534
And finally, a post has a title,
content, created_at and blog_id.

00:33:21.534 --> 00:33:22.734
And that's basically it.

00:33:22.734 --> 00:33:25.067
It's a very,
very simple model.

00:33:25.067 --> 00:33:27.234
So when I go into
the BlogsController here,

00:33:27.234 --> 00:33:28.767
you can see

00:33:28.767 --> 00:33:31.467
this looks more or less
the same as you would do

00:33:31.467 --> 00:33:33.200
in--in
regular active_record.

00:33:33.200 --> 00:33:35.934
The start action
fetches all the posts

00:33:35.934 --> 00:33:38.167
by doing Post.all

00:33:38.167 --> 00:33:42.367
and limiting to 15 and
inverted order from created_at.

00:33:42.367 --> 00:33:45.000
This--what gets
all the blogs.

00:33:45.000 --> 00:33:48.067
This one gets
a specific blog by ID.

00:33:48.067 --> 00:33:51.367
This one gets a specific post,
et cetera, et cetera.

00:33:51.367 --> 00:33:53.734
And you see that we can
refer to the blog, et cetera,

00:33:53.734 --> 00:33:56.100
just like you would accept,
uh, expect.

00:33:56.100 --> 00:33:58.501
Creating new things
you can do

00:33:58.501 --> 00:34:01.534
in the same manner as an
active_record with blog.create.

00:34:01.534 --> 00:34:04.167
Nothing really fancy there,
actually.

00:34:04.167 --> 00:34:06.400
All of this stuff
more or less works

00:34:06.400 --> 00:34:08.167
like you would expect
it to do, actually.

00:34:08.167 --> 00:34:12.567
Uh, post.delete,
post.all.each, et cetera.

00:34:12.567 --> 00:34:15.501
Uh, BeeU--

00:34:15.501 --> 00:34:19.534
as you saw the whole way
when I used Log In and so on--

00:34:19.534 --> 00:34:21.767
that was actually
provided by BeeU,

00:34:21.767 --> 00:34:24.300
and I use it
by using include BeeU here

00:34:24.300 --> 00:34:26.767
and then I assign user
and admin status

00:34:26.767 --> 00:34:28.467
and they will set
instance variables

00:34:28.467 --> 00:34:29.801
with these values.

00:34:29.801 --> 00:34:32.934
And then I also have this
assign_person filter

00:34:32.934 --> 00:34:34.467
that will, um--

00:34:34.467 --> 00:34:37.901
if a user exists, will try to
find that person in big_table,

00:34:37.901 --> 00:34:41.000
and if we don't
find a matching person

00:34:41.000 --> 00:34:42.501
for the user,

00:34:42.501 --> 00:34:45.367
we'll create a new one based on
the information from the user.

00:34:45.367 --> 00:34:47.367
This is actually
the user interface,

00:34:47.367 --> 00:34:50.601
so this is actually
Java code I'm calling out here,

00:34:50.601 --> 00:34:54.367
but you can't see it because
it looks exactly like Ruby code.

00:34:54.367 --> 00:34:59.534
And in the blogs,
I can have security

00:34:59.534 --> 00:35:01.601
by saying recruit--
require_admin,

00:35:01.601 --> 00:35:05.000
and just name the actions
that need admin security.

00:35:05.000 --> 00:35:07.434
And that's all I need to do
to make sure that these

00:35:07.434 --> 00:35:09.634
don't show up
and so on.

00:35:09.634 --> 00:35:13.834
Um, so this application is
really, really, really simple.

00:35:13.834 --> 00:35:15.734
This is really
all it does.

00:35:15.734 --> 00:35:17.300
It could do
some more stuff.

00:35:17.300 --> 00:35:19.567
I have some, uh--
I have a test controller

00:35:19.567 --> 00:35:20.567
where I added
some new stuff.

00:35:20.567 --> 00:35:21.767
This is actually
commented out.

00:35:21.767 --> 00:35:24.234
I have a rendering
of some simple stuff,

00:35:24.234 --> 00:35:26.801
and I also have
this Ruby action

00:35:26.801 --> 00:35:30.534
that actually will
instance_eval new stuff.

00:35:30.534 --> 00:35:32.968
So you can test anything
in the server.

00:35:32.968 --> 00:35:35.234
Finally, I have something
called run_tests

00:35:35.234 --> 00:35:38.033
because I created a
small, small, small, small

00:35:38.033 --> 00:35:39.667
test framework
called yak_test.

00:35:39.667 --> 00:35:44.501
And yak_test allows me to, uh,
first publish the application

00:35:44.501 --> 00:35:47.767
to the server, and then
run tests on the server instance

00:35:47.767 --> 00:35:51.567
and then get the report back,
uh, into it.

00:35:51.567 --> 00:35:53.367
The reason I needed that
was basically because

00:35:53.367 --> 00:35:55.701
I needed to do
unit testing on the server.

00:35:55.701 --> 00:35:58.000
And none of the RSpec
or test/unit for those

00:35:58.000 --> 00:36:01.868
had support for doing
that kind of thing.

00:36:01.868 --> 00:36:06.000
And I think that's really,
really all I'm gonna show

00:36:06.000 --> 00:36:08.767
from this application
right now.

00:36:08.767 --> 00:36:11.033
Yep, okay.

00:36:11.033 --> 00:36:12.968
So that was
the Rails application running.

00:36:12.968 --> 00:36:15.067
Um, as I mentioned,
it's just--

00:36:15.067 --> 00:36:18.767
take a look at my GitHub account
if you want to see the code.

00:36:18.767 --> 00:36:24.667
It's nothing complicated
at all.

00:36:24.667 --> 00:36:26.467
There we are.

00:36:26.467 --> 00:36:29.667
Okay, so I mentioned
that Sinatra works.

00:36:29.667 --> 00:36:32.734
It's a very small DSL for
writing Ruby web applications.

00:36:32.734 --> 00:36:34.434
And the simplest, simplest
thing you can do

00:36:34.434 --> 00:36:36.200
looks like this.

00:36:36.200 --> 00:36:38.534
Using Warbler,
you can package this up

00:36:38.534 --> 00:36:41.300
using JRuby rack,
and you can just use it.

00:36:41.300 --> 00:36:47.501
And it's gonna work more or less
exactly like running it locally.

00:36:47.501 --> 00:36:51.200
Ramaze is also a very nice
web framework

00:36:51.200 --> 00:36:54.701
that runs on Rack
and works with DataMapper.

00:36:54.701 --> 00:36:57.033
Right now there is
this problem with threads.

00:36:57.033 --> 00:36:59.434
As you might know,
Google App Engine

00:36:59.434 --> 00:37:02.133
actually restricts you,
so you can't really use threads.

00:37:02.133 --> 00:37:05.067
So any library that needs
to use threads

00:37:05.067 --> 00:37:07.701
needs to be patched.

00:37:07.701 --> 00:37:10.167
There are some other limits
that you need to keep in mind

00:37:10.167 --> 00:37:11.501
when doing
a Ruby application.

00:37:11.501 --> 00:37:15.167
The first one--
there are a few limits on files.

00:37:15.167 --> 00:37:18.601
You can't have more than
1,000 files in your application.

00:37:18.601 --> 00:37:20.901
Of course, this sounds like--
well, of course.

00:37:20.901 --> 00:37:22.501
That's not gonna be
any problem, right?

00:37:22.501 --> 00:37:26.534
Until you freeze all the Rails
gems into your application.

00:37:26.534 --> 00:37:28.300
Since you need to freeze
these gems,

00:37:28.300 --> 00:37:31.033
you will actually end up with,
like, 800 files

00:37:31.033 --> 00:37:33.467
just from freezing those gems
into your--

00:37:33.467 --> 00:37:35.033
into your vendor library.

00:37:35.033 --> 00:37:37.200
And then you get
a few more files after that.

00:37:37.200 --> 00:37:40.000
So that 1,000 files,
you need to use a specific--

00:37:40.000 --> 00:37:44.634
there's a gem for packaging
gems into JAR files

00:37:44.634 --> 00:37:46.067
that you can use.

00:37:46.067 --> 00:37:49.467
And you also have a restriction
on how large JAR files can be.

00:37:49.467 --> 00:37:53.067
And especially in the last
version of JRuby,

00:37:53.067 --> 00:37:56.133
the JRuby complete JAR file
was actually larger

00:37:56.133 --> 00:37:57.300
than ten megs,

00:37:57.300 --> 00:37:59.934
so you need to split
that one.

00:37:59.934 --> 00:38:05.467
Reggae is supposed to help you
with those kind of things.

00:38:05.467 --> 00:38:08.300
We don't
really support, uh--

00:38:08.300 --> 00:38:10.400
[laughs]
Image API.

00:38:10.400 --> 00:38:12.467
There is something called
Image Google App Engine

00:38:12.467 --> 00:38:13.767
that you can use
to get around

00:38:13.767 --> 00:38:16.634
because there are Image APIs
in Google App Engine,

00:38:16.634 --> 00:38:18.000
but they are not really
standardized

00:38:18.000 --> 00:38:20.334
and they don't really
work with JRuby out of the box.

00:38:20.334 --> 00:38:22.133
Well, you can use them
as Java libraries,

00:38:22.133 --> 00:38:24.400
but there is no Ruby support
to do it.

00:38:24.400 --> 00:38:26.501
As I mentioned,
no threads.

00:38:26.501 --> 00:38:28.701
This is gonna be problematic
in some cases

00:38:28.701 --> 00:38:30.334
because Ruby
actually uses threads

00:38:30.334 --> 00:38:32.567
in some
very strange places.

00:38:32.567 --> 00:38:35.567
As I mentioned, Timeout
uses threads by default.

00:38:35.567 --> 00:38:37.901
Actually, JRuby
has replaced that

00:38:37.901 --> 00:38:39.200
so we don't do that
anymore,

00:38:39.200 --> 00:38:41.033
but there are thread users
all over the place.

00:38:41.033 --> 00:38:44.100
So if you get strange errors
or exceptions in your logs

00:38:44.100 --> 00:38:46.534
that complain about threads,

00:38:46.534 --> 00:38:49.901
that's because you can't
use threads, basically.

00:38:49.901 --> 00:38:51.968
You can't even
write to files either.

00:38:51.968 --> 00:38:54.300
So if you have anything that
depends on being able

00:38:54.300 --> 00:38:55.467
to write to file,

00:38:55.467 --> 00:38:56.968
you're gonna have
some trouble with that.

00:38:56.968 --> 00:39:00.567
One of the things that bit--
that will bite you in JRuby

00:39:00.567 --> 00:39:02.901
is that reflection doesn't work
in everything.

00:39:02.901 --> 00:39:04.234
So, for example,

00:39:04.234 --> 00:39:08.100
you can't call specific methods
on object, for example.

00:39:08.100 --> 00:39:11.834
You can't do set_accessible on
unprotected methods, and so on.

00:39:11.834 --> 00:39:14.167
So if you--if you want
to do really weird stuff,

00:39:14.167 --> 00:39:16.100
and, uh, you--

00:39:16.100 --> 00:39:19.000
some of the weird stuff you
might be able to do with JRuby.

00:39:19.000 --> 00:39:22.667
You will hit in some limitations
because of the reflection stuff.

00:39:22.667 --> 00:39:25.934
The biggest problem of them all,
though, is the start-up time

00:39:25.934 --> 00:39:28.701
because right now, the--
the combined start-up time

00:39:28.701 --> 00:39:31.501
of JRuby on Rails
is actually pretty large.

00:39:31.501 --> 00:39:33.701
It's like--
the first request

00:39:33.701 --> 00:39:37.334
to start up a new JRuby runtime
takes almost 15 seconds.

00:39:37.334 --> 00:39:38.834
There are ways
to get around that,

00:39:38.834 --> 00:39:40.968
to get that down to something
like 7 or 6,

00:39:40.968 --> 00:39:42.234
but it's still
a problem

00:39:42.234 --> 00:39:44.767
and--and we are actually--
I've been talking

00:39:44.767 --> 00:39:46.300
to--to several
Google engineers

00:39:46.300 --> 00:39:49.234
and we're trying to figure out
a way of solving this.

00:39:49.234 --> 00:39:51.501
The problem is that the way
the Google App Engine

00:39:51.501 --> 00:39:53.200
architecture works is that,

00:39:53.200 --> 00:39:55.434
well, basically you have
no shared state, of course,

00:39:55.434 --> 00:39:56.767
so you can't share engines.

00:39:56.767 --> 00:39:59.300
So every concurrent request is--
is gonna need its own--

00:39:59.300 --> 00:40:02.634
its own
JRuby runtime.

00:40:02.634 --> 00:40:05.567
I don't really have a solution
to how to solve that right now.

00:40:05.567 --> 00:40:07.334
One of the ways you can
get around it right now

00:40:07.334 --> 00:40:08.901
is to use something
that is not Rails.

00:40:08.901 --> 00:40:12.234
If you use Ramaze or Sinatra,
they're gonna be much smaller,

00:40:12.234 --> 00:40:15.300
so they're gonna load
much faster.

00:40:15.300 --> 00:40:18.000
Testing is really problematic,
as I mentioned.

00:40:18.000 --> 00:40:21.801
Local testing--I have had
no success at all

00:40:21.801 --> 00:40:23.701
with local testing,
actually.

00:40:23.701 --> 00:40:25.834
You can do unit tests
of your implementations

00:40:25.834 --> 00:40:27.934
if you--if you disregard
all the, um,

00:40:27.934 --> 00:40:30.133
uh, all the
Google App Engine stuff.

00:40:30.133 --> 00:40:33.334
But, uh, basically you
need to run the functional tests

00:40:33.334 --> 00:40:35.467
on, uh,
on Google App Engine

00:40:35.467 --> 00:40:37.934
to be sure.

00:40:37.934 --> 00:40:39.234
So one of the ways
you can do that

00:40:39.234 --> 00:40:41.701
in building in testing triggers
into your application,

00:40:41.701 --> 00:40:43.367
like I showed you
with the yak_test stuff--

00:40:43.367 --> 00:40:44.567
you can do that,

00:40:44.567 --> 00:40:46.200
or you can use
something like Selenium

00:40:46.200 --> 00:40:48.701
to do just,
uh, black-box testing

00:40:48.701 --> 00:40:52.267
of the
user interface.

00:40:52.267 --> 00:40:54.434
One of the ways
that you can do--

00:40:54.434 --> 00:40:55.901
to make this happen--

00:40:55.901 --> 00:40:57.167
one of the good things
about Google App Engine

00:40:57.167 --> 00:40:58.801
is that you can have
several versions running

00:40:58.801 --> 00:41:00.033
at the same time,

00:41:00.033 --> 00:41:04.133
and they will be totally
separate from each other.

00:41:04.133 --> 00:41:06.300
So you can deploy
to a test version

00:41:06.300 --> 00:41:08.267
that you will never
make the default version,

00:41:08.267 --> 00:41:09.901
and then you can test
against that.

00:41:09.901 --> 00:41:11.300
And you can also have
different staging environments,

00:41:11.300 --> 00:41:12.801
and so on.

00:41:12.801 --> 00:41:15.300
That's one of the good things
of having an--

00:41:15.300 --> 00:41:16.901
having an environment
where you, um--

00:41:16.901 --> 00:41:18.567
where you basically
can start up

00:41:18.567 --> 00:41:21.100
new things
and spread them around.

00:41:21.100 --> 00:41:23.100
So that's very good,
and that makes it possible

00:41:23.100 --> 00:41:25.133
to test these things remotely,

00:41:25.133 --> 00:41:27.334
even if you don't get the
same kind of instant feedback

00:41:27.334 --> 00:41:31.634
that you want if you do
local unit testing.

00:41:31.634 --> 00:41:35.167
So Ruby right now runs on--
on Google App Engine.

00:41:35.167 --> 00:41:37.767
It's, uh--there are
some caveats,

00:41:37.767 --> 00:41:39.200
but it runs,

00:41:39.200 --> 00:41:40.868
and there are efforts on the way
to make it even easier

00:41:40.868 --> 00:41:43.200
to use it.

00:41:43.200 --> 00:41:47.968
Ioke is something totally
different from Ruby, actually.

00:41:47.968 --> 00:41:49.300
The only thing it shares
in common

00:41:49.300 --> 00:41:51.400
is that it's, uh,
it's an implementation

00:41:51.400 --> 00:41:53.000
or, actually,
it's a programming language

00:41:53.000 --> 00:41:57.534
that runs on top of, um,
that runs of top of the JVM.

00:41:57.534 --> 00:41:59.367
It's an experiment.

00:41:59.367 --> 00:42:01.567
It's dynamically
strongly typed,

00:42:01.567 --> 00:42:04.167
prototype based
object orientation,

00:42:04.167 --> 00:42:06.100
homoiconic language,

00:42:06.100 --> 00:42:09.467
inspired by several
different languages.

00:42:09.467 --> 00:42:10.634
Let's see--
um,

00:42:10.634 --> 00:42:12.267
and that's basically it.

00:42:12.267 --> 00:42:14.501
Ioke is
a pretty different language.

00:42:14.501 --> 00:42:17.567
I'm gonna very, very quickly
show you what it looks like

00:42:17.567 --> 00:42:22.667
so you get
a feeling for it.

00:42:22.667 --> 00:42:27.834
Well,
let's see, here.

00:42:27.834 --> 00:42:31.834
Sorry,
I'm just gonna...

00:42:35.934 --> 00:42:38.734
Okay.

00:42:38.734 --> 00:42:40.033
So as I mentioned,
Ioke--

00:42:40.033 --> 00:42:43.267
it's really--
it's an interesting thing.

00:42:43.267 --> 00:42:46.400
It's an experiment to see how
expressive a language can be.

00:42:46.400 --> 00:42:50.767
And one of the ways that it's
working against other things

00:42:50.767 --> 00:42:52.400
is the fact that
if you make something

00:42:52.400 --> 00:42:53.767
more and more
expressive,

00:42:53.767 --> 00:42:55.934
your language is
gonna get slower and slower.

00:42:55.934 --> 00:42:57.434
So Ioke is
a pretty slow language

00:42:57.434 --> 00:42:58.934
compared to
any other language.

00:42:58.934 --> 00:43:02.167
But it's--
it's pretty nice, so.

00:43:02.167 --> 00:43:05.734
Basically, the main difference
between other languages

00:43:05.734 --> 00:43:10.267
is that Ioke uses spaces
for calling, uh, methods,

00:43:10.267 --> 00:43:12.300
so the above would have been
the equivalent

00:43:12.300 --> 00:43:16.534
of doing
hello.println, instead.

00:43:16.534 --> 00:43:18.834
The dot in Ioke is actually
the statement separator,

00:43:18.834 --> 00:43:21.167
so, uh, the equivalent
of semicolons.

00:43:21.167 --> 00:43:23.534
You can do most of the things
you can do in other languages:

00:43:23.534 --> 00:43:25.100
1 + 2.

00:43:25.100 --> 00:43:26.734
You can create a new method
called foo,

00:43:26.734 --> 00:43:29.100
that takes an element
called x,

00:43:29.100 --> 00:43:32.667
and then return
x*x, for example.

00:43:32.667 --> 00:43:36.767
And I can call that
by doing...

00:43:36.767 --> 00:43:38.334
something like that.

00:43:38.334 --> 00:43:40.167
I have, um,
decimal numbers

00:43:40.167 --> 00:43:43.634
and fractions.

00:43:43.634 --> 00:43:45.067
Fractions that
are exact.

00:43:45.067 --> 00:43:47.300
I don't have floats
because if--

00:43:47.300 --> 00:43:49.968
if you want to use stuff
that needs floating numbers

00:43:49.968 --> 00:43:52.634
you just--you should use
a faster language, anyway,

00:43:52.634 --> 00:43:53.834
uh, basically.

00:43:53.834 --> 00:43:55.334
[laughs]
It's, uh--

00:43:55.334 --> 00:43:57.868
having floats in the language
is one of those things

00:43:57.868 --> 00:43:59.567
that really,
really bugs me

00:43:59.567 --> 00:44:02.234
because most programs
use them the wrong way.

00:44:02.234 --> 00:44:05.234
I just decided
to take them away.

00:44:05.234 --> 00:44:08.767
Okay, so I haven't really
shown you much of the language,

00:44:08.767 --> 00:44:10.267
but the main thing
to remember is

00:44:10.267 --> 00:44:12.334
it's a very
uniform language.

00:44:12.334 --> 00:44:16.601
It allows you to work
with the Ast,

00:44:16.601 --> 00:44:19.300
so you can actually
change the running code

00:44:19.300 --> 00:44:20.767
while it's running,

00:44:20.767 --> 00:44:22.501
so you have macros
of different kinds

00:44:22.501 --> 00:44:24.467
syntactic macros,
and so on.

00:44:24.467 --> 00:44:28.834
This gives language--
makes the language very, uh,

00:44:28.834 --> 00:44:30.634
interesting to understand,
in some cases,

00:44:30.634 --> 00:44:33.934
but it also makes it
very, very powerful.

00:44:33.934 --> 00:44:38.434
Okay, so...
let's see.

00:44:38.434 --> 00:44:41.133
IKanServe is something
very, very small.

00:44:41.133 --> 00:44:43.100
It's basically
an Ioke equivalent of Rack.

00:44:43.100 --> 00:44:44.968
It's a small, small, small
IokeServlet

00:44:44.968 --> 00:44:47.434
that dispatches
to Ioke code.

00:44:47.434 --> 00:44:51.534
You create a file called
iks, iks_application.ik,

00:44:51.534 --> 00:44:53.868
and then you define
your actions there.

00:44:53.868 --> 00:44:55.567
It looks very much
like Sinatra,

00:44:55.567 --> 00:44:59.400
but it's not
as fully featured.

00:44:59.400 --> 00:45:00.734
A typical example here--

00:45:00.734 --> 00:45:03.100
uh, actually this is
an HTML Builder

00:45:03.100 --> 00:45:05.968
that just allows you
to output HTML

00:45:05.968 --> 00:45:07.501
by writing Ioke code.

00:45:07.501 --> 00:45:10.534
I'm gonna
be using that too.

00:45:10.534 --> 00:45:16.000
Okay, so Ioke runs
on top of Google App Engine,

00:45:16.000 --> 00:45:17.734
uh, with the
IKanServe stuff.

00:45:17.734 --> 00:45:22.267
Basically, it looks--
let's see if it's still up.

00:45:22.267 --> 00:45:24.367
You never know.

00:45:24.367 --> 00:45:25.734
Okay, here we go.

00:45:25.734 --> 00:45:30.367
So Ioke from
the appspot.com

00:45:30.367 --> 00:45:32.267
basically has
three different actions.

00:45:32.267 --> 00:45:35.000
If you go somewhere
it doesn't know about,

00:45:35.000 --> 00:45:37.334
it will just say
really nothing here.

00:45:37.334 --> 00:45:43.133
If you go to foo,
it will say...

00:45:43.133 --> 00:45:45.634
yeah, exactly,
that's what it says.

00:45:45.634 --> 00:45:48.868
[laughs]
Sorry about that.

00:45:48.868 --> 00:45:50.767
Let's just skip that
and look at the code

00:45:50.767 --> 00:45:53.634
for--for the actions instead.

00:45:53.634 --> 00:45:55.334
[laughs]

00:45:55.334 --> 00:45:57.701
Of course, of course...

00:45:57.701 --> 00:46:00.033
So basically, the--
the only thing I need here

00:46:00.033 --> 00:46:02.968
is the
IKS application thingy.

00:46:02.968 --> 00:46:04.634
And here
is an actionForPath,

00:46:04.634 --> 00:46:05.834
and then I give
a regular expression

00:46:05.834 --> 00:46:07.167
that starts with foo.

00:46:07.167 --> 00:46:08.801
And then I say,
"hello world!!"

00:46:08.801 --> 00:46:10.234
Actually, you know what
I'm gonna do?

00:46:10.234 --> 00:46:12.501
I'm gonna do something that
I probably shouldn't do,

00:46:12.501 --> 00:46:15.968
but let's try it.

00:46:15.968 --> 00:46:19.667
I'm gonna try to deploy
this thing...again,

00:46:19.667 --> 00:46:21.501
and see if that solves
the problem.

00:46:21.501 --> 00:46:26.400
But I'm gonna do it
in the background.

00:46:26.400 --> 00:46:28.133
Uh, uh, uh.

00:46:28.133 --> 00:46:31.834
This should take
exactly two more seconds...

00:46:31.834 --> 00:46:36.000
something like that.

00:46:36.000 --> 00:46:39.601
Now we can see a full,
live deployed of--

00:46:39.601 --> 00:46:41.300
that should be
very exciting for you.

00:46:41.300 --> 00:46:45.000
Anyway, so basically what
you give to actionForPath

00:46:45.000 --> 00:46:48.501
are just methods,
stuff that you can execute.

00:46:48.501 --> 00:46:50.000
Ioke is very--

00:46:50.000 --> 00:46:51.801
it's expression-based,

00:46:51.801 --> 00:46:53.000
so everything
returns a value.

00:46:53.000 --> 00:46:54.601
And when you call
the method "method,"

00:46:54.601 --> 00:46:56.200
you get a new
method object

00:46:56.200 --> 00:46:59.000
that you can work with,
right?

00:46:59.000 --> 00:47:01.033
And in this case,
actionForPath foo

00:47:01.033 --> 00:47:03.367
will just return--

00:47:03.367 --> 00:47:05.300
basically,
what this code returns

00:47:05.300 --> 00:47:07.400
is what is gonna be
rendered.

00:47:07.400 --> 00:47:10.467
So this one will return
"hello world!!"

00:47:10.467 --> 00:47:12.734
This one will return
"you requested this,"

00:47:12.734 --> 00:47:15.033
and then take
the request pathInfo.

00:47:15.033 --> 00:47:20.267
And, finally, this one
will create an HTML interface

00:47:20.267 --> 00:47:21.567
with title("nada!")

00:47:21.567 --> 00:47:23.667
and then, uh, in bold,
"...really nothing here..."

00:47:23.667 --> 00:47:25.801
and you saw that earlier.

00:47:25.801 --> 00:47:27.300
Uh, sorry about that.

00:47:27.300 --> 00:47:29.801
I need to switch JDK.

00:47:29.801 --> 00:47:31.701
I was very close
to showing you my--

00:47:31.701 --> 00:47:33.601
my password for everyone.

00:47:33.601 --> 00:47:36.334
If you're using Java 1.5
to deploy stuff,

00:47:36.334 --> 00:47:39.901
you can't really
hide the password.

00:47:39.901 --> 00:47:43.200
That would have been
perfect.

00:47:43.200 --> 00:47:46.434
Okay, so I think this--

00:47:46.434 --> 00:47:49.501
I've done many bad things while
doing live demonstrations,

00:47:49.501 --> 00:47:52.801
but I think that that would
really have taken the prize.

00:47:52.801 --> 00:47:56.133
Okay, so let's see if this one
comes up now.

00:48:03.734 --> 00:48:05.734
Ah, "Hello world!!"

00:48:05.734 --> 00:48:07.501
Okay, uh--

00:48:07.501 --> 00:48:09.701
And here this one
is the one that actually

00:48:09.701 --> 00:48:11.167
generates the HTML.

00:48:11.167 --> 00:48:12.667
So you can see that
there is a connection

00:48:12.667 --> 00:48:16.801
between what happens here and
what I have running over here.

00:48:16.801 --> 00:48:17.968
It's nothing fancy.

00:48:17.968 --> 00:48:19.200
It was
more of a proof concept

00:48:19.200 --> 00:48:21.901
that you can actually
take another language

00:48:21.901 --> 00:48:24.133
that doesn't have
a mature infrastructure

00:48:24.133 --> 00:48:26.334
and you can just, uh,
deploy it,

00:48:26.334 --> 00:48:27.968
and it works.

00:48:27.968 --> 00:48:30.467
Okay, so, uh,

00:48:30.467 --> 00:48:34.634
that's--that was supposed to be
very close to the end.

00:48:34.634 --> 00:48:36.167
I didn't have
any more demonstrations,

00:48:36.167 --> 00:48:39.133
but then
as it happens, uh,

00:48:39.133 --> 00:48:42.300
a friend of mine at Google,
uh, [indistinct],

00:48:42.300 --> 00:48:46.667
uh, managed to get me
an account at Google Wave

00:48:46.667 --> 00:48:48.801
earlier today.

00:48:48.801 --> 00:48:55.267
So I decided to create
something with that.

00:48:55.267 --> 00:48:57.400
Let's see
if this one works.

00:48:57.400 --> 00:49:01.133
Okay, so here we have
my Wave account.

00:49:01.133 --> 00:49:03.334
Let's see if
I can resize it, so...

00:49:03.334 --> 00:49:04.801
okay, so.

00:49:04.801 --> 00:49:09.234
Down here I have something
called Iokebot@appspot.com.

00:49:09.234 --> 00:49:11.501
That is a robot.

00:49:11.501 --> 00:49:13.267
In the keynote,
you saw that they were talking

00:49:13.267 --> 00:49:14.968
about robots for Wave.

00:49:14.968 --> 00:49:18.534
A robot is basically just
something that can, um,

00:49:18.534 --> 00:49:23.267
that can go in and participate
in the conversation with you.

00:49:23.267 --> 00:49:27.000
So in this case, I can create
a new Wave to the Iokebot.

00:49:27.000 --> 00:49:29.300
Can say, "Hello."

00:49:29.300 --> 00:49:34.868
And what--this takes a
little time before it gets back.

00:49:36.534 --> 00:49:40.467
[hums]
Ah!

00:49:40.467 --> 00:49:42.968
And here we get--
let's see if I can resize this

00:49:42.968 --> 00:49:44.300
so I can
get it larger.

00:49:44.300 --> 00:49:46.133
"Hi from Ioke."

00:49:46.133 --> 00:49:47.467
So this one
is actually live.

00:49:47.467 --> 00:49:49.067
It's running on
appspot right now,

00:49:49.067 --> 00:49:52.934
and it's running Ioke code that
can interact with Google Wave.

00:49:52.934 --> 00:49:55.100
I'm almost certain
this is the first--

00:49:55.100 --> 00:49:58.934
first third-party robot
anyone has created for Google--

00:49:58.934 --> 00:50:00.234
for Google Wave,

00:50:00.234 --> 00:50:03.567
because I spent some
very interesting hours earlier

00:50:03.567 --> 00:50:05.434
trying to get
this working.

00:50:05.434 --> 00:50:08.767
It's actually very, very
simple to do it, though.

00:50:08.767 --> 00:50:11.434
There are a few
things you need.

00:50:11.434 --> 00:50:15.801
Basically, uh,
you need a directory url file,

00:50:15.801 --> 00:50:17.334
uh, underscore wave

00:50:17.334 --> 00:50:20.567
that includes
capabilities.xml.

00:50:20.567 --> 00:50:23.734
This one says that
we only, oops--

00:50:23.734 --> 00:50:27.234
We only want to know
when participants change.

00:50:27.234 --> 00:50:29.234
That's the only one
we're interested in.

00:50:29.234 --> 00:50:32.634
And the profile name
should be IokeBot.

00:50:32.634 --> 00:50:37.667
Then the code itself--
actually let's go into--

00:50:37.667 --> 00:50:43.133
appengine-web
looks like this.

00:50:43.133 --> 00:50:44.968
And IokeBot is

00:50:44.968 --> 00:50:47.667
org.thoughtworks.iokebot.
IokebotServlet.

00:50:47.667 --> 00:50:51.767
And I basically just map that
to this specific url,

00:50:51.767 --> 00:50:55.000
which is the url
where--where, um,

00:50:55.000 --> 00:50:58.033
Google Wave
will look for robots.

00:50:58.033 --> 00:51:01.801
And you can actually see that
if you go to this url

00:51:01.801 --> 00:51:04.634
on, um,
let's see, where...

00:51:04.634 --> 00:51:06.133
IokeBot.

00:51:06.133 --> 00:51:07.334
And we can go
to that url,

00:51:07.334 --> 00:51:08.868
and you can see that,
in this case,

00:51:08.868 --> 00:51:12.667
we're gonna get an--
this network is really terrible.

00:51:12.667 --> 00:51:15.667
You will get "inappropriate"
because it always expects posts,

00:51:15.667 --> 00:51:18.801
and I don't really know
the binary format for it anyway.

00:51:18.801 --> 00:51:20.701
But, anyway,
so this IokeBot

00:51:20.701 --> 00:51:22.567
is extremely simple.

00:51:22.567 --> 00:51:28.767
What it does...is that it just
gets an Ioke application,

00:51:28.767 --> 00:51:32.133
evaluates, uh,
it loads Ioke code,

00:51:32.133 --> 00:51:35.701
and then sets, injects
the robot message bundle,

00:51:35.701 --> 00:51:38.534
and then calls dispatch.

00:51:38.534 --> 00:51:41.167
So if we look
at the IokeBot code,

00:51:41.167 --> 00:51:43.100
can see
what's happening here.

00:51:43.100 --> 00:51:44.801
Dispatch is basically
a method--

00:51:44.801 --> 00:51:46.868
first logs
to the servletContext.

00:51:46.868 --> 00:51:48.434
It logs
"dispatched."

00:51:48.434 --> 00:51:52.133
And then we check if events
wasParticipantAddedToWave,

00:51:52.133 --> 00:51:53.534
and then our name.

00:51:53.534 --> 00:51:55.300
This basically just
checks that, okay--

00:51:55.300 --> 00:51:56.968
the only time
we want to do something

00:51:56.968 --> 00:52:00.901
is when--when this robot
is added to our conversation.

00:52:00.901 --> 00:52:04.000
Then we get the wavelet,
append a new Blip,

00:52:04.000 --> 00:52:05.868
and get a textView
for that blip,

00:52:05.868 --> 00:52:09.167
and finally we say,
"Hi from Ioke."

00:52:09.167 --> 00:52:12.634
And that was
exactly what happened here.

00:52:12.634 --> 00:52:14.467
So that's actually
the whole story.

00:52:14.467 --> 00:52:17.167
It's very simple
to do this,

00:52:17.167 --> 00:52:19.767
and I was very happy
when I managed

00:52:19.767 --> 00:52:23.767
to get that working,
actually.

00:52:23.767 --> 00:52:27.334
I'm one of those persons
that likes shiny things.

00:52:27.334 --> 00:52:29.467
Another thing
about shiny things,

00:52:29.467 --> 00:52:32.534
I'm not sure if you noticed,
but the, the Google Wave team

00:52:32.534 --> 00:52:34.801
seems to be, uh, have
a good, healthy knowledge

00:52:34.801 --> 00:52:36.267
of the &lt;i&gt;Firefly&lt;/i&gt; series.

00:52:36.267 --> 00:52:37.734
Uh, you can see it
all over their documentation

00:52:37.734 --> 00:52:39.367
and in their
error messages.

00:52:39.367 --> 00:52:40.467
It's really cool,
actually.

00:52:40.467 --> 00:52:42.033
I'm a fan of &lt;i&gt;Firefly,&lt;/i&gt;
myself.

00:52:42.033 --> 00:52:46.334
Okay, so--alternative languages
on the Google App Engine.

00:52:46.334 --> 00:52:48.734
I think that the important thing
about Google App Engine

00:52:48.734 --> 00:52:49.968
and the Java support
for it

00:52:49.968 --> 00:52:51.334
is not the Java language

00:52:51.334 --> 00:52:54.634
because, uh, the Java language
doesn't really give you

00:52:54.634 --> 00:52:58.601
as many possibilities as you can
do in all these other languages.

00:52:58.601 --> 00:53:00.033
You get automatic scaling,
of course,

00:53:00.033 --> 00:53:01.868
but they get
harder to test.

00:53:01.868 --> 00:53:04.234
Some of the languages
work pretty bad

00:53:04.234 --> 00:53:06.534
because of the
security restrictions.

00:53:06.534 --> 00:53:08.601
Reflection and threads
are the main ones,

00:53:08.601 --> 00:53:10.133
file system too,

00:53:10.133 --> 00:53:12.300
but they still work
pretty good anyway.

00:53:12.300 --> 00:53:14.601
We've done experiments
with several languages

00:53:14.601 --> 00:53:16.467
including Closure and Scala

00:53:16.467 --> 00:53:18.400
and also
the regular Java stuff.

00:53:18.400 --> 00:53:23.534
And they are all viable ways
of getting stuff uh, out,

00:53:23.534 --> 00:53:26.167
very, very quickly.

00:53:26.167 --> 00:53:27.634
It's really well suited
for it.

00:53:27.634 --> 00:53:29.267
And it's funny,
the Ruby web frameworks--

00:53:29.267 --> 00:53:31.067
there are several people,
actually,

00:53:31.067 --> 00:53:34.133
deploying and thinking
about deploying

00:53:34.133 --> 00:53:36.834
Rail applications, uh,
in production,

00:53:36.834 --> 00:53:38.467
uh, on top of
Google App Engine,

00:53:38.467 --> 00:53:40.601
which is pretty nice.

00:53:40.601 --> 00:53:41.767
It's also interesting
to note

00:53:41.767 --> 00:53:44.934
that the JDO and JPA--
uh, things that

00:53:44.934 --> 00:53:47.234
Google has put on top
of DataStore--

00:53:47.234 --> 00:53:48.968
actually doesn't really
mesh that well

00:53:48.968 --> 00:53:51.133
with the way
big_table works.

00:53:51.133 --> 00:53:52.634
And that's
one of the reasons

00:53:52.634 --> 00:53:54.734
that I didn't
use the DataMapper APIs

00:53:54.734 --> 00:53:57.200
for these, um--
for these examples

00:53:57.200 --> 00:53:59.133
because I feel that
a lower level,

00:53:59.133 --> 00:54:02.534
closer to big_table way
of working with the data

00:54:02.534 --> 00:54:04.601
is actually
much better,

00:54:04.601 --> 00:54:06.367
because a dynamic language
like Ruby

00:54:06.367 --> 00:54:08.434
allows you to work
with dynamic new keys,

00:54:08.434 --> 00:54:10.501
and that's exactly what
big_table allows you to do.

00:54:10.501 --> 00:54:13.734
So I find that the mesh
of a dynamic language

00:54:13.734 --> 00:54:15.534
with big_table
is actually much better than

00:54:15.534 --> 00:54:18.267
the--the--
the Java versions.

00:54:18.267 --> 00:54:19.934
So since you can use
any language,

00:54:19.934 --> 00:54:22.467
that--there are about 200
different languages

00:54:22.467 --> 00:54:23.667
for the JVM.

00:54:23.667 --> 00:54:25.634
You can use most of them,
as far as I know,

00:54:25.634 --> 00:54:27.534
on
Google App Engine.

00:54:27.534 --> 00:54:30.501
Google App Engine allows you
to do polyglot programming,

00:54:30.501 --> 00:54:32.200
where you have several different
things implemented

00:54:32.200 --> 00:54:33.400
in different
languages.

00:54:33.400 --> 00:54:35.801
And I think that's
really, really nice.

00:54:35.801 --> 00:54:38.701
And it also allows you to think
in a more service-oriented way.

00:54:38.701 --> 00:54:41.801
I definitely don't recommend
people to put all their stuff

00:54:41.801 --> 00:54:43.634
in one application
on Google App Engine.

00:54:43.634 --> 00:54:47.200
I mean, decide
what things you want to scale

00:54:47.200 --> 00:54:49.200
in the way Google App Engine
allows you to scale,

00:54:49.200 --> 00:54:50.868
and put that
in Google App Engine.

00:54:50.868 --> 00:54:52.167
And then maybe you can
put other things

00:54:52.167 --> 00:54:53.868
on Easy Tour,
whatever,

00:54:53.868 --> 00:54:55.601
or in your own
local system,

00:54:55.601 --> 00:54:58.367
and then combine them
to get the, uh--the uh--

00:54:58.367 --> 00:55:01.334
a more interesting
result.

00:55:01.334 --> 00:55:04.000
It's very easy
to get started.

00:55:04.000 --> 00:55:09.167
And it's really a very p--
very powerful platform,

00:55:09.167 --> 00:55:12.667
and, uh, it's been fun
playing around with it.

00:55:12.667 --> 00:55:14.801
And as far as I know,
everyone is free

00:55:14.801 --> 00:55:15.968
to get an account now.

00:55:15.968 --> 00:55:17.934
So it's just
go ahead and play with it

00:55:17.934 --> 00:55:21.534
and create something
really interesting.

00:55:21.534 --> 00:55:24.968
And now I think
I can take questions.

00:55:24.968 --> 00:55:27.367
Are there any questions?
Yes.

00:55:27.367 --> 00:55:29.501
There are, sorry,
there are microphones

00:55:29.501 --> 00:55:30.868
in the aisles--
uh, uh, aisles.

00:55:30.868 --> 00:55:32.267
I can--
I can repeat your question

00:55:32.267 --> 00:55:35.167
if you really don't feel like,
uh, like going there,

00:55:35.167 --> 00:55:37.834
but, uh, we need
to get it recorded.

00:55:37.834 --> 00:55:40.567
So...yes.

00:55:40.567 --> 00:55:42.634
man: What should we
be using Ioke for

00:55:42.634 --> 00:55:46.267
today in our application
development?

00:55:46.267 --> 00:55:48.234
Bini: You should use it
for fun.

00:55:48.234 --> 00:55:49.367
[laughter]

00:55:49.367 --> 00:55:50.767
It's not
production ready.

00:55:50.767 --> 00:55:51.901
It's an experiment.

00:55:51.901 --> 00:55:55.300
It's, um, I aim for it
to be able to do

00:55:55.300 --> 00:55:56.434
real production stuff,

00:55:56.434 --> 00:55:57.701
uh, sometime
in the future,

00:55:57.701 --> 00:55:59.501
but right now,
what it's really good at

00:55:59.501 --> 00:56:01.267
is--is real expressibility.

00:56:01.267 --> 00:56:03.367
When you need to do
internal DSLs

00:56:03.367 --> 00:56:05.033
and stuff like that,
for example,

00:56:05.033 --> 00:56:06.701
it's pretty good at.

00:56:06.701 --> 00:56:11.133
But it's more of, um--
right now it's more of the...

00:56:11.133 --> 00:56:13.000
proof of concept stage
where I hope

00:56:13.000 --> 00:56:14.534
that other language designers

00:56:14.534 --> 00:56:15.801
might use
some of the features

00:56:15.801 --> 00:56:18.067
that I have designed
into Ioke.

00:56:18.067 --> 00:56:19.767
Yes?

00:56:19.767 --> 00:56:22.667
man: In summary,

00:56:22.667 --> 00:56:26.934
you can use Ruby on Rails
with JRuby, right?

00:56:26.934 --> 00:56:30.100
So in summary,
what are the pieces,

00:56:30.100 --> 00:56:33.367
all the pieces I need
to use Ruby

00:56:33.367 --> 00:56:35.367
with Ruby on Rails?

00:56:35.367 --> 00:56:38.334
I'm a little unclear on that.

00:56:38.334 --> 00:56:40.200
Bini: What are the pieces
you need to use Ruby on Rails?

00:56:40.200 --> 00:56:42.701
man: Yeah, are there
any other pieces?

00:56:42.701 --> 00:56:47.000
Bini: Well, on Google App Engine
or in general?

00:56:47.000 --> 00:56:50.100
man: Um, I create
a Ruby on Rails application

00:56:50.100 --> 00:56:51.534
on my hard drive.

00:56:51.534 --> 00:56:54.701
Bingo, that's where it's at
using JRuby.

00:56:54.701 --> 00:56:58.567
Okay, at that point
what do I have to do

00:56:58.567 --> 00:57:02.000
to make it all
run in the cloud?

00:57:02.000 --> 00:57:04.400
Bini: Well, basically
you need to download the STK

00:57:04.400 --> 00:57:06.868
from Google App Engine.

00:57:06.868 --> 00:57:10.367
And you can--
And you also need Warble.

00:57:10.367 --> 00:57:13.434
And I think that's
the only things that--

00:57:13.434 --> 00:57:15.901
those are the only things
that you really need.

00:57:15.901 --> 00:57:18.234
man: Okay, and I've got
about 200 megabytes

00:57:18.234 --> 00:57:20.167
to play with
in terms of file size.

00:57:20.167 --> 00:57:21.434
Is that it?

00:57:21.434 --> 00:57:22.934
Bini: Sorry, 200 megabytes?

00:57:22.934 --> 00:57:25.467
man: You say
that Rails, of course,

00:57:25.467 --> 00:57:29.033
takes up about 800 files,
right?

00:57:29.033 --> 00:57:32.634
So I've got about 200
to play with?

00:57:32.634 --> 00:57:33.968
Bini: There are ways
around that.

00:57:33.968 --> 00:57:35.834
You can--your--
the gem files.

00:57:35.834 --> 00:57:39.234
So you won't get up to those
high numbers immediately.

00:57:39.234 --> 00:57:42.267
And you'll also get better speed
if you JAR them up.

00:57:42.267 --> 00:57:44.033
So that's definitely
the recommended way.

00:57:44.033 --> 00:57:46.801
You basically
just package the gems--

00:57:46.801 --> 00:57:50.901
the Rails files
into JAR files,

00:57:50.901 --> 00:57:53.300
and then they won't take up
as many numbers.

00:57:53.300 --> 00:57:55.601
man: Okay.

00:57:55.601 --> 00:57:56.801
Bini: Yes?

00:57:56.801 --> 00:58:00.634
man: If JRuby
is really a, you know,

00:58:00.634 --> 00:58:04.300
more powerful and quicker
implementation of Ruby,

00:58:04.300 --> 00:58:06.234
why in general--
not necessarily

00:58:06.234 --> 00:58:07.734
in the scope
of Google App Engine--

00:58:07.734 --> 00:58:10.801
why would you not ever deploy
an application on JRuby--

00:58:10.801 --> 00:58:14.100
a Rails application
on JRuby?

00:58:14.100 --> 00:58:16.834
Bini: Why you would not
deploy a Rails application

00:58:16.834 --> 00:58:19.100
on JRuby?

00:58:19.100 --> 00:58:22.400
I have no good answer
to that one.

00:58:22.400 --> 00:58:24.534
In general--
No, actually--

00:58:24.534 --> 00:58:26.734
That sounds very glib,
but the thing is

00:58:26.734 --> 00:58:30.667
that JRuby is really the best
deployment platform for Rails.

00:58:30.667 --> 00:58:32.000
Period.

00:58:32.000 --> 00:58:33.968
What does Rich say?
Rich has--

00:58:33.968 --> 00:58:35.934
Rich has one of
the longest-running

00:58:35.934 --> 00:58:38.000
JRuby on Rails
applications around.

00:58:38.000 --> 00:58:40.934
[Rich speaking indistinctly]

00:58:51.601 --> 00:58:53.400
Okay, so for the record--

00:58:53.400 --> 00:58:55.334
So what Rich is saying,
one of the main reasons

00:58:55.334 --> 00:58:58.200
is that there are some gems
that don't exist for JRuby,

00:58:58.200 --> 00:59:02.100
specifically those gems that
depend on native extensions

00:59:02.100 --> 00:59:04.367
need to be ported
in some way

00:59:04.367 --> 00:59:06.901
to use equivalent
Java features.

00:59:06.901 --> 00:59:09.501
man: I'm also
gonna answer this one.

00:59:09.501 --> 00:59:13.701
It is the best deployment
platform, but if Google--

00:59:13.701 --> 00:59:17.334
Like, for instance a lot
of the very goofy ways

00:59:17.334 --> 00:59:19.501
of doing things you have
to kind of change the way...

00:59:19.501 --> 00:59:23.434
[continues indistinctly]

00:59:23.434 --> 00:59:25.367
So no more globals.

00:59:25.367 --> 00:59:27.634
No more globals.
Ruby people love globals.

00:59:27.634 --> 00:59:28.968
Don't do it.

00:59:28.968 --> 00:59:31.901
[continues indistinctly]

00:59:36.400 --> 00:59:37.868
Bini: Yes?

00:59:37.868 --> 00:59:40.434
man: So you had mentioned
that running C extensions

00:59:40.434 --> 00:59:42.968
isn't currently possible.

00:59:42.968 --> 00:59:45.501
And Charles Nutter
in his Rails comp talk

00:59:45.501 --> 00:59:47.567
talked about ways
that you might be able

00:59:47.567 --> 00:59:49.501
to eventually deal with that.

00:59:49.501 --> 00:59:53.000
But I like to look at that
as an opportunity

00:59:53.000 --> 00:59:55.534
to rewrite those extensions
in Java.

00:59:55.534 --> 00:59:57.367
And I was hoping that
certain things

00:59:57.367 --> 00:59:58.801
that I've run into
in the past,

00:59:58.801 --> 01:00:01.534
for example running Mechanize
and then Hpricot comes

01:00:01.534 --> 01:00:03.334
and it starts parsing it
and it does a seg fault,

01:00:03.334 --> 01:00:05.267
and I can't catch it,
I can't log it,

01:00:05.267 --> 01:00:07.033
I have no idea what happened,
and my server dies.

01:00:07.033 --> 01:00:08.934
I'm hoping I can
catch those exceptions

01:00:08.934 --> 01:00:10.300
and do more logging.

01:00:10.300 --> 01:00:12.901
And isn't creating
Java extensions actually

01:00:12.901 --> 01:00:14.868
a solution to the problem?

01:00:14.868 --> 01:00:16.267
Bini:
You are absolutely right,

01:00:16.267 --> 01:00:19.634
except that--
It's a question of scale.

01:00:19.634 --> 01:00:22.400
Most people that create
C extensions nowadays

01:00:22.400 --> 01:00:25.901
actually have started
to provide Java equivalents

01:00:25.901 --> 01:00:27.767
for JRuby too.

01:00:27.767 --> 01:00:30.167
But the problem
is all those, like,

01:00:30.167 --> 01:00:32.033
I don't know, we're talking
probably thousands

01:00:32.033 --> 01:00:34.734
of C extensions
that existed before JRuby.

01:00:34.734 --> 01:00:37.133
And no one is really
in their right mind

01:00:37.133 --> 01:00:39.100
trying to port
all of them to Java.

01:00:39.100 --> 01:00:40.767
But for the ones
that are used,

01:00:40.767 --> 01:00:42.067
we try to port them.

01:00:42.067 --> 01:00:43.534
I mean, Hpricot
is a good example

01:00:43.534 --> 01:00:45.868
of a place where
we have ported it

01:00:45.868 --> 01:00:49.834
to use the, um...
use Java instead.

01:00:49.834 --> 01:00:51.300
Yes?

01:00:51.300 --> 01:00:53.767
man: Does Rake test work on
the local development server?

01:00:53.767 --> 01:00:55.234
Bini: Sorry?

01:00:55.234 --> 01:00:58.167
man: Does Rake test command
work on the local--

01:00:58.167 --> 01:01:00.100
Bini:
See, that's a good question.

01:01:00.100 --> 01:01:01.968
I've heard that it works.

01:01:01.968 --> 01:01:03.567
I never got it working.

01:01:03.567 --> 01:01:05.167
I basically never got JRuby

01:01:05.167 --> 01:01:08.968
running Rails locally
working very well.

01:01:08.968 --> 01:01:11.067
man: And you were
talking about

01:01:11.067 --> 01:01:15.334
running the actual test
on the App Engine proper.

01:01:15.334 --> 01:01:20.634
How do you go around
the lack of production test

01:01:20.634 --> 01:01:22.300
and development datastore?

01:01:22.300 --> 01:01:24.334
So you'll be--
While you're running your test,

01:01:24.334 --> 01:01:26.901
you'll be basically using
the datastore

01:01:26.901 --> 01:01:29.334
that's in Google,

01:01:29.334 --> 01:01:31.334
which would be the same
as production.

01:01:31.334 --> 01:01:33.534
Bini:
There is not one datastore.

01:01:33.534 --> 01:01:35.000
The datastore is versioned

01:01:35.000 --> 01:01:36.801
exactly like
all the other stuff.

01:01:36.801 --> 01:01:39.367
So if you deploy to one
version of App Engine,

01:01:39.367 --> 01:01:42.334
you will actually
get a specific--

01:01:42.334 --> 01:01:44.133
I mean, all the keys
and all the stuff

01:01:44.133 --> 01:01:45.767
you can reach,
from that instance,

01:01:45.767 --> 01:01:47.501
will only be those
that you can reach

01:01:47.501 --> 01:01:49.167
from the same version.

01:01:49.167 --> 01:01:52.000
So if you deploy to test,
you'll only have--

01:01:52.000 --> 01:01:56.801
Basically it's like having
totally separate datastores.

01:01:56.801 --> 01:01:58.901
No more questions?
Okay.

01:01:58.901 --> 01:02:00.701
Thanks for your attention.

01:02:00.701 --> 01:02:02.634
[applause]

