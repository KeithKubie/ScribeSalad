WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.720
[GOOGLE LOGO MUSIC]

00:00:01.720 --> 00:00:06.180
NICOLAS ROARD: I want to go
back a little bit on why did we

00:00:06.180 --> 00:00:07.720
create ConstraintLayout.

00:00:07.720 --> 00:00:09.900
So if you look at
ConstraintLayout one,

00:00:09.900 --> 00:00:12.780
we wanted to have something
that was a very flexible layout

00:00:12.780 --> 00:00:16.140
manager, something that
would allow you to specify

00:00:16.140 --> 00:00:20.070
the way your UI should be
laid out and behave in as much

00:00:20.070 --> 00:00:22.540
of a declarative as possible.

00:00:22.540 --> 00:00:26.130
And in order to do that, we
created a really rich model

00:00:26.130 --> 00:00:27.130
of constraints.

00:00:27.130 --> 00:00:29.310
So you could position
your widgets relatively

00:00:29.310 --> 00:00:31.740
to one another, you
could central them

00:00:31.740 --> 00:00:33.190
in between each other.

00:00:33.190 --> 00:00:36.060
With bias, you have
central positioning,

00:00:36.060 --> 00:00:38.940
dimension constraint
and ratio, and chains,

00:00:38.940 --> 00:00:40.940
which is a pretty interesting
way of positioning

00:00:40.940 --> 00:00:43.600
a group of widgets together.

00:00:43.600 --> 00:00:47.430
So all of that comes
with a lot of power.

00:00:47.430 --> 00:00:50.460
And to help you
create those layouts,

00:00:50.460 --> 00:00:53.430
we also had this idea of
having helper objects.

00:00:53.430 --> 00:00:56.010
And the helper
objects are objects

00:00:56.010 --> 00:00:58.920
that are not resulting
automatically

00:00:58.920 --> 00:01:02.140
in a visual difference
by themselves,

00:01:02.140 --> 00:01:06.510
but they will allow you to set
up your UI in an easier way.

00:01:06.510 --> 00:01:08.910
The typical example
is Guideline,

00:01:08.910 --> 00:01:13.440
where you can create those
guidelines that your designers

00:01:13.440 --> 00:01:17.160
are so fond of and just align
the widgets to that, which

00:01:17.160 --> 00:01:19.930
is nice because,
often, before that,

00:01:19.930 --> 00:01:23.130
you would have to
translate what they meant

00:01:23.130 --> 00:01:25.290
by guidelines in your layout.

00:01:25.290 --> 00:01:29.040
Well here, you can simply create
the guideline as in the mock

00:01:29.040 --> 00:01:31.200
and add things to it.

00:01:31.200 --> 00:01:34.600
In a similar way, we
introduced the Barrier Helper

00:01:34.600 --> 00:01:37.440
in the ConstraintLayout
1.1 that gives you

00:01:37.440 --> 00:01:40.320
some interesting
behavior, where you

00:01:40.320 --> 00:01:46.950
could decide of a set of widgets
where to position yourself.

00:01:46.950 --> 00:01:49.770
The other important aspect
on ConstraintLayout,

00:01:49.770 --> 00:01:52.290
and you'll see that's
going to come in very handy

00:01:52.290 --> 00:01:55.170
for the rest of this
talk, it's this notion

00:01:55.170 --> 00:01:58.890
of trying to keep the
view hierarchy flat.

00:01:58.890 --> 00:02:01.410
So there is some
performance reason for that,

00:02:01.410 --> 00:02:03.630
but more interestingly,
it's really

00:02:03.630 --> 00:02:07.710
this idea of decoupling
the layout information,

00:02:07.710 --> 00:02:12.300
the layout rules to the view
with the view hierarchy itself.

00:02:12.300 --> 00:02:16.050
And the nice thing with this is
that we have an object called

00:02:16.050 --> 00:02:19.650
ConstraintSet that can
encapsulate all those rules,

00:02:19.650 --> 00:02:23.940
and you can create multiple
instances of the subject,

00:02:23.940 --> 00:02:26.890
swap them in or out
your ConstraintLayout.

00:02:26.890 --> 00:02:29.220
So that gives you a
lot of flexibility

00:02:29.220 --> 00:02:31.740
not only to lay out
and create your UI

00:02:31.740 --> 00:02:36.580
but also at the time when
you want to change your UI.

00:02:36.580 --> 00:02:39.310
And, finally, it's
an unbundled library.

00:02:39.310 --> 00:02:42.390
We also from the get
go created this layout

00:02:42.390 --> 00:02:44.190
to be supported in
the design tools,

00:02:44.190 --> 00:02:48.820
so we have a pretty
nice UI builder.

00:02:48.820 --> 00:02:51.000
And that brings us to
ConstraintLayout two.

00:02:51.000 --> 00:02:53.550
Why did we create
ConstraintLayout two?

00:02:53.550 --> 00:02:56.100
Well, the key element
here is really

00:02:56.100 --> 00:03:00.450
to try to create a layout
that is even more flexible.

00:03:00.450 --> 00:03:04.520
We wanted to give you
back even more power.

00:03:04.520 --> 00:03:06.760
And we did that in a few ways.

00:03:06.760 --> 00:03:10.320
One, we added the concept
of Virtual Layouts, which

00:03:10.320 --> 00:03:13.500
are helpers that will
do essentially a lot

00:03:13.500 --> 00:03:15.630
of the groundwork for you.

00:03:15.630 --> 00:03:19.020
So you don't have to manually
set the constraint one by one,

00:03:19.020 --> 00:03:20.830
you could apply a
set of constraints

00:03:20.830 --> 00:03:24.000
via this kind of
virtual layouts.

00:03:24.000 --> 00:03:28.050
We have helpers and
decorators, and also we

00:03:28.050 --> 00:03:32.040
exposed a lot more of the
internals of ConstraintLayout

00:03:32.040 --> 00:03:32.580
for you.

00:03:32.580 --> 00:03:36.000
And that means that you can
do runtime a lot more stuff

00:03:36.000 --> 00:03:38.010
in ConstraintLayout two.

00:03:38.010 --> 00:03:40.620
We also did a lot of
work in optimization,

00:03:40.620 --> 00:03:44.940
and of course a big highlight
of ConstraintLayout two

00:03:44.940 --> 00:03:46.380
is MotionLayout.

00:03:46.380 --> 00:03:48.870
It's really the
more flexible way

00:03:48.870 --> 00:03:51.210
you can think of for
UI is introducing

00:03:51.210 --> 00:03:53.970
motion and animation.

00:03:53.970 --> 00:03:57.420
We still continue to strongly
support design tooling,

00:03:57.420 --> 00:04:01.320
and specifically we are in the
process of building a motion

00:04:01.320 --> 00:04:03.330
editor in Android
Studio, and we'll

00:04:03.330 --> 00:04:05.890
talk a little bit about that.

00:04:05.890 --> 00:04:08.760
And in order to use
it, it's very easy.

00:04:08.760 --> 00:04:11.130
Just add this dependency
to your [INAUDIBLE] file,

00:04:11.130 --> 00:04:14.190
and if you're using
AndroidX, similar things,

00:04:14.190 --> 00:04:15.600
just different naming.

00:04:15.600 --> 00:04:19.720
Notice we just
released 2.0 beta one.

00:04:19.720 --> 00:04:23.052
[APPLAUSE]

00:04:24.960 --> 00:04:26.910
So check it out.

00:04:26.910 --> 00:04:29.700
We are pretty happy where we
are standing in terms of API,

00:04:29.700 --> 00:04:32.010
and yes, we are
really looking forward

00:04:32.010 --> 00:04:35.730
to what kind of feedback
you can give us.

00:04:35.730 --> 00:04:39.810
So to kind of present
things a little,

00:04:39.810 --> 00:04:42.450
here is the overall architecture
of ConstraintLayout.

00:04:42.450 --> 00:04:44.730
We are starting with this
very generic solver that

00:04:44.730 --> 00:04:47.340
can do a lot of
competition for us

00:04:47.340 --> 00:04:50.880
and express your layouts
in a very complex way.

00:04:50.880 --> 00:04:52.410
But we don't expose
that directly.

00:04:52.410 --> 00:04:54.720
What we expose is
this Constraint Model.

00:04:54.720 --> 00:04:57.930
The nice thing with this
is that we can in between

00:04:57.930 --> 00:05:02.310
add an optimizer that takes
care of a lot of situations

00:05:02.310 --> 00:05:05.650
that are very unambiguous and
don't need a linear solver.

00:05:05.650 --> 00:05:10.410
So that gives us a lot more
speed in ConstraintLayout two.

00:05:10.410 --> 00:05:13.590
On top of that, we have
the helpers objects

00:05:13.590 --> 00:05:15.780
and the virtual layout
that are kind of using

00:05:15.780 --> 00:05:18.360
this construct model for you.

00:05:18.360 --> 00:05:20.400
And above all of this,
we have MotionLayout

00:05:20.400 --> 00:05:24.640
that takes advantage of
this entire foundation.

00:05:24.640 --> 00:05:27.760
Let me cover a little bit
the ConstraintHelpers.

00:05:27.760 --> 00:05:30.670
So as I explained,
we did have helpers

00:05:30.670 --> 00:05:32.140
in ConstraintLayout one.

00:05:32.140 --> 00:05:34.930
In ConstraintLayout two,
we expose that class.

00:05:34.930 --> 00:05:38.870
So not only we can continue
to create helpers for you,

00:05:38.870 --> 00:05:41.850
but you can actually
create your own helpers.

00:05:41.850 --> 00:05:44.370
So the thing that's important
to notice with the helpers

00:05:44.370 --> 00:05:46.430
is that they are
not of your group.

00:05:46.430 --> 00:05:51.550
We are not adding an extra
layer of hierarchy there.

00:05:51.550 --> 00:05:58.480
All we do is we essentially tag
the widgets with that helper.

00:05:58.480 --> 00:06:01.060
And the nice property
is that you can actually

00:06:01.060 --> 00:06:05.410
have multiple helpers
tagging the same widgets.

00:06:05.410 --> 00:06:07.510
So one widget can
actually have its behavior

00:06:07.510 --> 00:06:09.490
changed by multiple helpers.

00:06:09.490 --> 00:06:12.370
But the general idea is that, if
you have a repeatable behavior,

00:06:12.370 --> 00:06:15.610
you can encapsulate it and just
use it in a declarative way

00:06:15.610 --> 00:06:18.220
the next time and you don't
have to do code after that.

00:06:18.220 --> 00:06:21.070
A basic example is
a circular reveal.

00:06:21.070 --> 00:06:23.530
Nothing too fancy here,
I'm just having a reveal

00:06:23.530 --> 00:06:26.080
pointing to the different
widget that appears.

00:06:26.080 --> 00:06:29.340
What's interesting
is the actual code.

00:06:29.340 --> 00:06:31.090
We are not
reinventing the wheel.

00:06:31.090 --> 00:06:33.340
It's just a few
animation [INAUDIBLE],,

00:06:33.340 --> 00:06:35.650
but we are encapsulate
it into a helper,

00:06:35.650 --> 00:06:38.470
and therefore we can simply
use it in your XML file

00:06:38.470 --> 00:06:41.610
without having to
do any programming.

00:06:41.610 --> 00:06:44.590
VirtualLayout is
another type of helpers.

00:06:44.590 --> 00:06:46.960
And as I mentioned
before, the idea

00:06:46.960 --> 00:06:49.370
is to still keep
the hierarchy flat.

00:06:49.370 --> 00:06:51.140
It will position
the widget for you.

00:06:51.140 --> 00:06:53.560
What's nice is,
because we still are

00:06:53.560 --> 00:06:55.960
the same level of
the hierarchy, you

00:06:55.960 --> 00:07:00.610
can reference widgets that
are inside the VirtualLayout

00:07:00.610 --> 00:07:01.730
and vise versa.

00:07:01.730 --> 00:07:07.960
So you can also do a lot more
runtime changes on the fly.

00:07:07.960 --> 00:07:11.770
And let me cover Flow, which is
a virtual layout we introduced

00:07:11.770 --> 00:07:13.180
recently.

00:07:13.180 --> 00:07:15.820
Flow supports multiple
modes on helping

00:07:15.820 --> 00:07:18.790
you layout your objects.

00:07:18.790 --> 00:07:22.840
The first mode is essentially
creating a chain for you,

00:07:22.840 --> 00:07:25.150
either horizontal or vertical.

00:07:25.150 --> 00:07:29.890
And we can also support
different wrap modes.

00:07:29.890 --> 00:07:32.170
The first one is essentially
still using chains.

00:07:32.170 --> 00:07:35.380
As we go along, user one is
doing a little more interesting

00:07:35.380 --> 00:07:36.500
behavior.

00:07:36.500 --> 00:07:38.180
So this is what it looks like.

00:07:38.180 --> 00:07:40.120
It looks like a normal widget.

00:07:40.120 --> 00:07:42.860
We reference other widgets.

00:07:42.860 --> 00:07:44.470
It's a helper.

00:07:44.470 --> 00:07:48.700
As a normal widget, you can set
its dimensions, wrap content,

00:07:48.700 --> 00:07:50.260
and et cetera.

00:07:50.260 --> 00:07:52.180
And you can constrain
it like any other widget

00:07:52.180 --> 00:07:53.270
in ConstraintLayout.

00:07:53.270 --> 00:07:56.320
So it's a very familiar pattern.

00:07:56.320 --> 00:07:58.190
You can even set
up the background,

00:07:58.190 --> 00:08:00.850
which is kind of handy
in some situations.

00:08:00.850 --> 00:08:04.280
And the default behavior, as
I said, is to create a chain.

00:08:04.280 --> 00:08:07.030
So we do support all the type
of chain-- spread chain, spread

00:08:07.030 --> 00:08:10.210
inside, backed, and that
allows you very quickly

00:08:10.210 --> 00:08:12.760
to set up this behavior.

00:08:12.760 --> 00:08:15.370
What's new is the wrap behavior.

00:08:15.370 --> 00:08:18.560
It's akin to Flexbox
layout, where

00:08:18.560 --> 00:08:21.790
if you don't have
the space, before you

00:08:21.790 --> 00:08:24.170
can offer another space or
you can't do anything else.

00:08:24.170 --> 00:08:26.830
But, now, we will
create automatically

00:08:26.830 --> 00:08:29.860
an extra chain for you.

00:08:29.860 --> 00:08:32.230
By default, we are
using the same type

00:08:32.230 --> 00:08:34.002
of chain for all the
different chains,

00:08:34.002 --> 00:08:35.919
but you can actually
specify a different chain

00:08:35.919 --> 00:08:39.789
between your first chain
and the rest of the chains.

00:08:39.789 --> 00:08:42.700
You can also set
up a max element

00:08:42.700 --> 00:08:45.970
before you decide to wrap,
which is kind of handy to create

00:08:45.970 --> 00:08:48.130
a table like behavior.

00:08:48.130 --> 00:08:48.940
Or is it?

00:08:48.940 --> 00:08:52.540
Well, the problem here
is, if the elements don't

00:08:52.540 --> 00:08:54.220
have the same size,
you're not going

00:08:54.220 --> 00:08:58.750
to have a grid, because
we'll still have a chain.

00:08:58.750 --> 00:09:00.760
And that's where the
last mode comes in,

00:09:00.760 --> 00:09:02.647
where we will align the
elements in the rows

00:09:02.647 --> 00:09:03.480
and columns for you.

00:09:06.930 --> 00:09:11.820
So here's an actual
example on how to use it.

00:09:11.820 --> 00:09:15.870
I'm going to take a UI that
definitely looks like something

00:09:15.870 --> 00:09:19.500
that could use flow,
a basic calculator,

00:09:19.500 --> 00:09:22.840
and I want to create the body
of that calculator like that.

00:09:22.840 --> 00:09:25.880
And the first step is I'm
going to set up the flow,

00:09:25.880 --> 00:09:29.430
make it wrap content,
center it in the parent,

00:09:29.430 --> 00:09:32.280
reference the element,
add a couple of attributes

00:09:32.280 --> 00:09:34.870
to define how it's
going to behave,

00:09:34.870 --> 00:09:36.760
and we end up with this result.

00:09:36.760 --> 00:09:37.450
Very easy.

00:09:37.450 --> 00:09:39.270
You don't have to create
all the changes by hand,

00:09:39.270 --> 00:09:40.437
all the constraints by hand.

00:09:40.437 --> 00:09:42.390
You just reference them.

00:09:42.390 --> 00:09:45.040
What's nice is it's
a normal widget,

00:09:45.040 --> 00:09:48.210
as it's a normal child
of ConstraintLayout,

00:09:48.210 --> 00:09:51.030
so you can here
constrain another widget

00:09:51.030 --> 00:09:54.480
to that flow element
in exactly the same way

00:09:54.480 --> 00:09:56.310
as you would do normally.

00:09:56.310 --> 00:09:59.460
But what's even better is
that you can do the same

00:09:59.460 --> 00:10:02.470
for the inside elements.

00:10:02.470 --> 00:10:04.860
So, here, you have
this other text view

00:10:04.860 --> 00:10:09.120
that I actually constrained
on those internal buttons.

00:10:11.670 --> 00:10:15.570
The other step that we took
to bring more flexibility

00:10:15.570 --> 00:10:20.100
in ConstraintLayout two is
adding more APIs for you

00:10:20.100 --> 00:10:22.350
to use.

00:10:22.350 --> 00:10:24.360
We have the constraint
set API, which

00:10:24.360 --> 00:10:29.950
is this way of basically
getting the state of the layout.

00:10:29.950 --> 00:10:32.790
And you can change it and
reapply it to ConstraintLayout.

00:10:32.790 --> 00:10:35.910
We have a new API, that instead
of you having to manually

00:10:35.910 --> 00:10:39.898
go and modify the params, we
provide this fluent API that

00:10:39.898 --> 00:10:41.940
lets you change them and
will do the right things

00:10:41.940 --> 00:10:44.610
in an efficient way.

00:10:44.610 --> 00:10:45.560
And there is more.

00:10:45.560 --> 00:10:47.893
And there is more stuff I'm
not going to cover too much,

00:10:47.893 --> 00:10:50.960
but we the resize on the
fly, resize handling, state

00:10:50.960 --> 00:10:54.290
management, we even added
margins on barrier recently.

00:10:54.290 --> 00:10:55.880
So there is a lot more stuff.

00:10:55.880 --> 00:10:58.700
But really here what
I'd like to talk about,

00:10:58.700 --> 00:11:01.599
and I'm going to hand over
to John, is MotionLayout.

00:11:01.599 --> 00:11:05.591
[APPLAUSE]

00:11:08.590 --> 00:11:11.180
JOHN HOFORD: So for
those who don't know,

00:11:11.180 --> 00:11:15.395
MotionLayout is a subclass
of ConstraintLayout.

00:11:15.395 --> 00:11:20.050
It has a separate XML
file for the constraints

00:11:20.050 --> 00:11:25.330
and the motion elements
called a MotionScene file.

00:11:25.330 --> 00:11:27.940
And it allows you
to directly animate

00:11:27.940 --> 00:11:30.630
between two complete
constraint sets.

00:11:33.290 --> 00:11:37.760
So the way it basically works
is you have constraint sets,

00:11:37.760 --> 00:11:40.970
we call them states
internally, and you

00:11:40.970 --> 00:11:45.140
can transition between them.

00:11:45.140 --> 00:11:49.310
You can also manipulate the
transition with a key frame,

00:11:49.310 --> 00:11:51.200
and those can be in a
lot of different areas,

00:11:51.200 --> 00:11:53.630
and I'll show more.

00:11:53.630 --> 00:11:55.520
One of the unique
things about the system

00:11:55.520 --> 00:12:00.350
is it has a few different
coordinate systems.

00:12:00.350 --> 00:12:04.130
Very important, because
in this sort of situation,

00:12:04.130 --> 00:12:07.280
you're moving between
two undefined states.

00:12:07.280 --> 00:12:08.610
The phone could be different.

00:12:08.610 --> 00:12:10.730
It could be in
landscape, whatever.

00:12:10.730 --> 00:12:13.860
You need to have a coordinate
system that can handle that.

00:12:13.860 --> 00:12:16.280
So one of them is
parent relative,

00:12:16.280 --> 00:12:19.640
another one of them is delta
relative, which is actually

00:12:19.640 --> 00:12:26.090
the default. It allows you to
move in x and y separately.

00:12:26.090 --> 00:12:27.740
The other one is
path relative, so

00:12:27.740 --> 00:12:30.440
if you're deforming
around the path, that

00:12:30.440 --> 00:12:32.970
allows you to do that.

00:12:32.970 --> 00:12:37.340
The other thing that we build
is a lot of clever on swipe

00:12:37.340 --> 00:12:39.230
and on click behaviors.

00:12:39.230 --> 00:12:41.000
And, actually, in
the beta, there's

00:12:41.000 --> 00:12:45.870
some new stuff in there
that's quite exciting.

00:12:45.870 --> 00:12:48.080
So how is it basically laid out?

00:12:48.080 --> 00:12:51.470
In your layout file, you'll
have your views, your helpers,

00:12:51.470 --> 00:12:54.980
your virtual layouts,
and it'll point

00:12:54.980 --> 00:13:02.870
to the transitions, the
constraint sets, essentially

00:13:02.870 --> 00:13:05.960
the MotionScene file.

00:13:05.960 --> 00:13:08.005
So let's do an example.

00:13:11.115 --> 00:13:12.490
NICOLAS ROARD: So
the basic stuff

00:13:12.490 --> 00:13:16.000
on how you can use MotionLayout
is you need two states.

00:13:16.000 --> 00:13:19.840
So here, I'm having my little
sun and moving from one state

00:13:19.840 --> 00:13:21.480
to the other.

00:13:21.480 --> 00:13:23.140
It's also not super realistic.

00:13:23.140 --> 00:13:25.430
Typically your sun would
go a little higher.

00:13:25.430 --> 00:13:28.570
So that's one of the nice
things in ConstraintLayout 2

00:13:28.570 --> 00:13:31.720
and MotionLayout is that
you can tweak how you

00:13:31.720 --> 00:13:33.790
get from the state to the end.

00:13:33.790 --> 00:13:36.430
It's not just enough to
define those two states,

00:13:36.430 --> 00:13:42.470
because, often, you want to do
a transition that is not linear.

00:13:42.470 --> 00:13:45.880
So here, I just want to add,
for example, an arc motion.

00:13:45.880 --> 00:13:49.240
And I can simply do that
by adding a key position

00:13:49.240 --> 00:13:52.180
like a key frame that's
going to control the position

00:13:52.180 --> 00:13:54.550
at the middle of the animation.

00:13:54.550 --> 00:13:56.470
In a similar way,
often you want to do

00:13:56.470 --> 00:13:57.730
more than just positioning.

00:13:57.730 --> 00:14:00.670
You want to change other
types of attributes

00:14:00.670 --> 00:14:02.680
like here the color.

00:14:02.680 --> 00:14:04.130
And we can do that as well.

00:14:04.130 --> 00:14:06.010
So that's where
MotionLayout goes much

00:14:06.010 --> 00:14:09.640
beyond the pure
layout capabilities.

00:14:09.640 --> 00:14:17.270
We can charge and interpolate
across a lot of attributes.

00:14:17.270 --> 00:14:19.760
We have a couple
of extra features

00:14:19.760 --> 00:14:24.770
that are interesting
with cycles, that's just

00:14:24.770 --> 00:14:26.520
by separate [INAUDIBLE]
animation as well,

00:14:26.520 --> 00:14:28.370
you notice that here
the animation is still

00:14:28.370 --> 00:14:33.290
playing even though we are in
the middle of the transition.

00:14:33.290 --> 00:14:38.460
And to cover all of that
in more details, John?

00:14:38.460 --> 00:14:42.770
JOHN HOFORD: So we'll just
go through the main tags.

00:14:42.770 --> 00:14:43.980
There's KeyPosition position.

00:14:43.980 --> 00:14:46.890
And, essentially, it
just deforms your path

00:14:46.890 --> 00:14:49.300
using the coordinate system.

00:14:49.300 --> 00:14:57.180
And in this case, I pin it to
the complete delta x equal one.

00:14:57.180 --> 00:14:58.890
Next one is KeyAttributes.

00:14:58.890 --> 00:15:02.310
You can manipulate rotation,
any of the post layout

00:15:02.310 --> 00:15:06.450
transforms, you can
do custom attributes

00:15:06.450 --> 00:15:10.905
with which will reflectively
call all the different APIs.

00:15:13.680 --> 00:15:18.240
So one of the more complex
things we add is KeyCycles.

00:15:18.240 --> 00:15:27.060
They allow interactive
animations in space.

00:15:27.060 --> 00:15:32.070
So, as that the object
progresses, it will animate,

00:15:32.070 --> 00:15:37.080
and it will just simply provide
a delta in the position.

00:15:37.080 --> 00:15:41.160
Now, you can apply
KeyCycles to any attributes,

00:15:41.160 --> 00:15:43.410
so it can be
rotation, and you'll

00:15:43.410 --> 00:15:47.890
see a whole bunch of
them as we go along.

00:15:47.890 --> 00:15:52.060
So in this case, as the
animation progresses,

00:15:52.060 --> 00:15:55.880
it's animating across
the entire scene, which

00:15:55.880 --> 00:15:58.580
is very different
from KeyTimeCycles,

00:15:58.580 --> 00:16:02.930
where the animation is
independent of the position.

00:16:02.930 --> 00:16:05.900
It's sort of setting the
frequency of the animation.

00:16:05.900 --> 00:16:08.300
And of course, you can
deform these things

00:16:08.300 --> 00:16:10.850
with lots of clever
shapes and paths

00:16:10.850 --> 00:16:12.590
and produce lots of
interesting effects.

00:16:16.890 --> 00:16:21.300
So one of the other things that
we don't really talk about much

00:16:21.300 --> 00:16:26.420
and I want to mention is
programmatic control here.

00:16:26.420 --> 00:16:31.280
Essentially, as we animate, we
can make a programmatic change

00:16:31.280 --> 00:16:33.750
in direction in real time.

00:16:33.750 --> 00:16:36.860
So what will happen is
you're in an undefined state,

00:16:36.860 --> 00:16:39.510
because you're halfway
between two states that

00:16:39.510 --> 00:16:41.300
start in the end.

00:16:41.300 --> 00:16:46.520
If you issue a command
transition to a new state,

00:16:46.520 --> 00:16:49.550
it will sort of
recreate a transition

00:16:49.550 --> 00:16:53.000
between where you were
at that point in time

00:16:53.000 --> 00:16:56.360
and the new position
that you've requested.

00:16:56.360 --> 00:17:00.350
So it can be
relatively interactive

00:17:00.350 --> 00:17:02.580
with your application.

00:17:02.580 --> 00:17:04.160
We also have commands
that allow you

00:17:04.160 --> 00:17:06.319
to get the constraints
set involve,

00:17:06.319 --> 00:17:07.910
and then it's a constraint set.

00:17:07.910 --> 00:17:11.510
It's an API we've had since 1.0.

00:17:11.510 --> 00:17:15.890
You can go and change values and
apply it back into the system

00:17:15.890 --> 00:17:17.730
and rebuild the scene.

00:17:17.730 --> 00:17:22.160
You can also actually point
to a completely new scene,

00:17:22.160 --> 00:17:25.280
another XML layout file,
a MotionScene file,

00:17:25.280 --> 00:17:29.180
and it will just naturally
adapt to that new one.

00:17:29.180 --> 00:17:32.510
So there are actually a
lot of little APIs in it

00:17:32.510 --> 00:17:35.420
to allow you to control
things dynamically

00:17:35.420 --> 00:17:38.660
based on your application.

00:17:38.660 --> 00:17:40.570
So one of the other
things I want to show

00:17:40.570 --> 00:17:43.310
is that we can
integrate with helpers.

00:17:43.310 --> 00:17:47.870
So this is FlowLayout,
as we just talked about.

00:17:47.870 --> 00:17:50.750
And in fact, all of
these views are in it.

00:17:50.750 --> 00:17:52.390
But within the
constraints set, you

00:17:52.390 --> 00:17:56.590
can set the IDs of all the
views that are inside the flow

00:17:56.590 --> 00:17:59.980
so that you can
change on the fly,

00:17:59.980 --> 00:18:03.980
and it will animate between
the two layouts dynamically.

00:18:03.980 --> 00:18:08.880
So you can pop out
views, things like that.

00:18:08.880 --> 00:18:11.960
So one of the other things
that is pretty important

00:18:11.960 --> 00:18:14.180
is Touch Handing.

00:18:14.180 --> 00:18:17.780
It tracks your
velocity of your finger

00:18:17.780 --> 00:18:21.680
and matches the velocity of
the object you tagged to it.

00:18:21.680 --> 00:18:24.770
If you leave out an
object to anchor to it,

00:18:24.770 --> 00:18:30.050
it will just be a percentage
of the screen size.

00:18:30.050 --> 00:18:32.840
And you can change a
lot of parameters on it

00:18:32.840 --> 00:18:36.950
about the velocity, how you
want it to terminate, things

00:18:36.950 --> 00:18:37.480
like that.

00:18:37.480 --> 00:18:40.700
There are actually quite a few
parameters on the system there.

00:18:44.230 --> 00:18:46.680
So let's talk a little bit
about the Motion Editor

00:18:46.680 --> 00:18:52.860
and why we needed to do marble.

00:18:52.860 --> 00:18:57.540
If you look at what you see
here, in the Motion Editor,

00:18:57.540 --> 00:19:03.130
you're going to drive
Android Studio crazy.

00:19:03.130 --> 00:19:07.290
It beats up on in Android Studio
like you wouldn't believe.

00:19:07.290 --> 00:19:09.840
And unlike, let's say,
a mouse interaction

00:19:09.840 --> 00:19:12.510
where you're dragging,
you drag and you stop.

00:19:12.510 --> 00:19:15.930
Someone could leave this
running and go to lunch,

00:19:15.930 --> 00:19:18.320
and they're stuck.

00:19:18.320 --> 00:19:21.210
The system has to
be able to handle

00:19:21.210 --> 00:19:27.030
60 frames per second
continuous over and over again.

00:19:27.030 --> 00:19:29.070
And this is something
I just built

00:19:29.070 --> 00:19:31.750
to show off what it looks
like, what you can do,

00:19:31.750 --> 00:19:35.910
and here is it in crazy,
because I thought I'd

00:19:35.910 --> 00:19:37.160
throw it in because it's cute.

00:19:40.360 --> 00:19:44.880
So now let's actually go through
a little bit about the Editor.

00:19:44.880 --> 00:19:47.880
We're not going
to release it yet.

00:19:47.880 --> 00:19:53.160
We're still working on it,
but it's my main job from now

00:19:53.160 --> 00:19:56.028
until it releases.

00:19:56.028 --> 00:19:59.451
[APPLAUSE]

00:20:01.410 --> 00:20:05.790
So this is a copy of
what's right now in Master,

00:20:05.790 --> 00:20:08.100
and we're running it.

00:20:08.100 --> 00:20:12.360
So what you'll do is you'll
take a ConstraintLayout,

00:20:12.360 --> 00:20:14.160
and you'll just right
click and you say

00:20:14.160 --> 00:20:17.400
convert to MotionLayout, and
then this is what you'll see.

00:20:17.400 --> 00:20:21.570
You can go ahead and select
a set of constraints,

00:20:21.570 --> 00:20:24.270
create a collection
of constraint sets

00:20:24.270 --> 00:20:27.040
for the starting and ending.

00:20:27.040 --> 00:20:29.380
And then make some
changes on the ending.

00:20:29.380 --> 00:20:32.670
And, in this case, I just
shorten one of the values,

00:20:32.670 --> 00:20:34.470
and it animates.

00:20:34.470 --> 00:20:35.640
That's pretty much it.

00:20:35.640 --> 00:20:39.657
You can go ahead and
change all the attributes.

00:20:39.657 --> 00:20:42.471
[APPLAUSE]

00:20:44.820 --> 00:20:46.370
So it's coming.

00:20:46.370 --> 00:20:48.090
We are working on it.

00:20:48.090 --> 00:20:54.600
And I'm hoping, within
the next few months,

00:20:54.600 --> 00:20:58.310
you'll start to see
versions in alpha.

00:20:58.310 --> 00:21:00.590
Don't know when.

00:21:00.590 --> 00:21:05.293
OK, so Nicholas?

00:21:05.293 --> 00:21:06.710
NICOLAS ROARD:
Yeah, so let's talk

00:21:06.710 --> 00:21:09.560
a little bit on how you can
actually use MotionLayout

00:21:09.560 --> 00:21:10.800
in your applications.

00:21:10.800 --> 00:21:13.700
First of all, all
of these examples

00:21:13.700 --> 00:21:18.440
are on the GitHub repository
we set up, so check it out.

00:21:18.440 --> 00:21:20.280
It should be very
straightforward,

00:21:20.280 --> 00:21:23.730
you have all the examples, all
the XMLs, and all of the code.

00:21:23.730 --> 00:21:28.970
So how to integrate MotionLayout
with your application?

00:21:28.970 --> 00:21:33.050
The basic thing to think
of is that you don't have

00:21:33.050 --> 00:21:36.080
to start from the ground zero.

00:21:36.080 --> 00:21:39.380
You can start to use
MotionLayout today

00:21:39.380 --> 00:21:42.980
and integrate it
in your current UI.

00:21:42.980 --> 00:21:45.480
So here's a couple of examples.

00:21:45.480 --> 00:21:48.140
If you have a Coordinator Layout
and you have a Collapsible

00:21:48.140 --> 00:21:56.270
Toolbar, and if you want to have
this kind of animated toolbar,

00:21:56.270 --> 00:22:00.080
right now it's pretty difficult.
You have to do a lot of code.

00:22:00.080 --> 00:22:02.810
Or what you can do is
simply take a MotionLayout

00:22:02.810 --> 00:22:05.490
and use it as a
collapsible toolbar.

00:22:05.490 --> 00:22:08.090
And you can see on
the GitHub repository,

00:22:08.090 --> 00:22:09.940
it's really straightforward.

00:22:09.940 --> 00:22:13.465
You just one little bit
of code to pass over

00:22:13.465 --> 00:22:15.090
the progress of the
Coordinator Layout,

00:22:15.090 --> 00:22:17.880
and MotionLayout is
going to do the rest.

00:22:17.880 --> 00:22:21.790
So that's really democratized
this type of motion.

00:22:21.790 --> 00:22:24.710
In a very similar way
and very similar pattern,

00:22:24.710 --> 00:22:28.250
you can go crazy
with a DrawerLayout,

00:22:28.250 --> 00:22:32.550
or you can make your view
page a little more fancy.

00:22:32.550 --> 00:22:34.460
Pardon my design skills.

00:22:34.460 --> 00:22:39.510
And you can use MotionLayout
in a lot of different ways.

00:22:39.510 --> 00:22:41.990
JOHN HOFORD: So one of the ways
I wanted to highlight today

00:22:41.990 --> 00:22:47.720
is building a custom components.

00:22:47.720 --> 00:22:50.940
This actually came from someone
asking about can I do this,

00:22:50.940 --> 00:22:52.820
and it's like, yeah,
of course you can.

00:22:52.820 --> 00:22:54.690
So starting really simple.

00:22:54.690 --> 00:22:57.230
Let's say you just wanted
to have a button that

00:22:57.230 --> 00:23:00.200
had a little flash to it.

00:23:00.200 --> 00:23:04.370
You can build a button out of
MotionLayout, do the animation,

00:23:04.370 --> 00:23:06.680
and decide how it reacts
when you click on it

00:23:06.680 --> 00:23:08.590
and when you don't click on it.

00:23:08.590 --> 00:23:11.620
And all these examples
are in just pure XML.

00:23:11.620 --> 00:23:13.610
There is no code behind
this one in terms

00:23:13.610 --> 00:23:17.840
of from a user perspective.

00:23:17.840 --> 00:23:21.090
But you can get fancy in
a bunch of different ways.

00:23:21.090 --> 00:23:23.660
These are three
different examples I just

00:23:23.660 --> 00:23:25.680
built up by a few of them.

00:23:25.680 --> 00:23:29.120
The top one is
interesting in that

00:23:29.120 --> 00:23:33.320
what's happening there is there
are five different states it

00:23:33.320 --> 00:23:34.400
can be in.

00:23:34.400 --> 00:23:36.210
Five different constraint sets.

00:23:36.210 --> 00:23:38.390
And we have ways to
make it very easy

00:23:38.390 --> 00:23:41.910
to build a derived constraint
set from another constraint

00:23:41.910 --> 00:23:42.410
set.

00:23:42.410 --> 00:23:45.690
So you can derive and
derive and derive.

00:23:45.690 --> 00:23:48.920
And what you're seeing here
is that the swipe handling

00:23:48.920 --> 00:23:52.750
is going across all of
the constraint sets,

00:23:52.750 --> 00:23:55.370
because there is a swipe
that moves you from one

00:23:55.370 --> 00:23:57.120
to the next to the next.

00:23:57.120 --> 00:23:59.300
And it all happens smoothly.

00:23:59.300 --> 00:24:02.540
The second one is simply
a swipe left right,

00:24:02.540 --> 00:24:04.940
but I added a key
cycle to make it look

00:24:04.940 --> 00:24:07.160
like the object is rotating.

00:24:07.160 --> 00:24:10.610
And the third one is
adding some cycles

00:24:10.610 --> 00:24:12.440
to give you that bouncy effect.

00:24:12.440 --> 00:24:17.150
I assume you've seen
something like that

00:24:17.150 --> 00:24:19.400
if you have liked
anything in the past.

00:24:22.330 --> 00:24:25.920
So I showed you a little
bit of the multi-state.

00:24:25.920 --> 00:24:28.760
I wanted to
highlight that notice

00:24:28.760 --> 00:24:33.420
there are five states here,
the one in the center.

00:24:33.420 --> 00:24:36.000
And I'm swiping across
them or clicking

00:24:36.000 --> 00:24:38.250
on buttons which transfer them.

00:24:38.250 --> 00:24:43.050
So you can actually transfer
between all the states,

00:24:43.050 --> 00:24:45.180
and it all happens
seamlessly, and you'll

00:24:45.180 --> 00:24:49.620
see that to the extreme
in a later example.

00:24:49.620 --> 00:24:52.350
So it allows you to have
many different states

00:24:52.350 --> 00:24:55.920
and do many things very
flexibly with them.

00:24:55.920 --> 00:24:59.390
It's way too much to actually
go into all the little details

00:24:59.390 --> 00:25:04.260
that are involved here, all
the different possibilities,

00:25:04.260 --> 00:25:09.322
but we'll go into that.

00:25:09.322 --> 00:25:10.780
NICOLAS ROARD:
Yeah, so another way

00:25:10.780 --> 00:25:14.340
that you can use MotionLayout is
by driving all the components.

00:25:14.340 --> 00:25:16.090
Like what we've seen
so far is essentially

00:25:16.090 --> 00:25:20.160
taking MotionLayout and
animating stuff inside it,

00:25:20.160 --> 00:25:22.570
but kind of like
terminal widgets, right?

00:25:22.570 --> 00:25:25.960
Well, you can also think about
MotionLayout as something

00:25:25.960 --> 00:25:28.030
to do Coordinator
Layout would do.

00:25:28.030 --> 00:25:30.430
And here in that example,
MotionLayout is actually

00:25:30.430 --> 00:25:32.870
handling the
scrolling of the image

00:25:32.870 --> 00:25:35.590
but driving this
custom view that's

00:25:35.590 --> 00:25:41.620
going to get this line going
into a circle like that.

00:25:41.620 --> 00:25:44.840
So you can easily
drive your own custom

00:25:44.840 --> 00:25:47.020
views that would have a
specific type of animation

00:25:47.020 --> 00:25:52.960
and having MotionLayout
act as a scene coordinator.

00:25:52.960 --> 00:25:56.800
In a similar way, you can
take MotionLayout and put it

00:25:56.800 --> 00:25:58.300
into another MotionLayout.

00:25:58.300 --> 00:26:01.420
So we've seen this
at the same example,

00:26:01.420 --> 00:26:03.670
essentially, with
Coordinator Layout,

00:26:03.670 --> 00:26:07.780
but that example actually
does the same behavior purely

00:26:07.780 --> 00:26:10.300
in MotionLayout.

00:26:10.300 --> 00:26:12.460
And how it works is very basic.

00:26:12.460 --> 00:26:15.250
You have one MotionLayout,
the outer one,

00:26:15.250 --> 00:26:18.640
labeled one with
start and end states

00:26:18.640 --> 00:26:24.310
simply containing a MotionLayout
for the collapsible bar.

00:26:24.310 --> 00:26:27.290
And we set the progress of
that second MotionLayout

00:26:27.290 --> 00:26:29.290
from the first one.

00:26:29.290 --> 00:26:32.192
And the key here is
not so much like we

00:26:32.192 --> 00:26:33.900
are about to replicate
Coordinate Layout.

00:26:33.900 --> 00:26:38.170
The key is that we don't know
what your designers are going

00:26:38.170 --> 00:26:41.560
to come up as crazy
ideas for UI next year

00:26:41.560 --> 00:26:42.830
or the year after that.

00:26:42.830 --> 00:26:45.640
So by essentially
having the power

00:26:45.640 --> 00:26:48.180
of expressing these
type of things,

00:26:48.180 --> 00:26:53.110
we should be much
more future proof.

00:26:53.110 --> 00:26:58.390
The other thing is all of
that has absolutely zero code.

00:26:58.390 --> 00:27:02.140
It's pure declarative
in XML, which

00:27:02.140 --> 00:27:04.330
is very handy when
you can do that,

00:27:04.330 --> 00:27:06.090
because it's a lot
easier to change.

00:27:06.090 --> 00:27:10.470
There's a lot less side effect
to think about than code.

00:27:10.470 --> 00:27:13.890
But sometimes, code
and programming

00:27:13.890 --> 00:27:18.400
can be quite handy when you want
to do some runtime behaviors.

00:27:18.400 --> 00:27:21.270
So let's see how we can
integrate RecyclerView

00:27:21.270 --> 00:27:23.420
with MotionLayout or take
advantage of MotionLayout

00:27:23.420 --> 00:27:25.740
in RecyclerView.

00:27:25.740 --> 00:27:29.850
So I've got my screen
with a basic RecyclerView.

00:27:29.850 --> 00:27:33.840
And I'd like to be able to
have this kind of motion.

00:27:33.840 --> 00:27:37.500
I take my element and
just make it full screen.

00:27:37.500 --> 00:27:43.090
So we can define that absolutely
trivially in MotionLayout,

00:27:43.090 --> 00:27:44.620
and I define the two states.

00:27:44.620 --> 00:27:45.940
Very easy.

00:27:45.940 --> 00:27:48.820
Of course, the issue
is that the position

00:27:48.820 --> 00:27:52.570
of that element that I'm
animating changes all the time.

00:27:52.570 --> 00:27:54.410
I don't know where
it is on screen.

00:27:54.410 --> 00:27:59.320
So you can basically in
the transition listener,

00:27:59.320 --> 00:28:02.770
you can basically hook that,
get the current constraint set,

00:28:02.770 --> 00:28:08.530
clear the item,
calculate the new bounds,

00:28:08.530 --> 00:28:10.780
pass it back, and reapply it.

00:28:10.780 --> 00:28:13.810
And that's enough for
you to then apply that,

00:28:13.810 --> 00:28:16.740
and we can use MotionLayout
to animate that element.

00:28:16.740 --> 00:28:19.000
There's a little more
magic around here,

00:28:19.000 --> 00:28:20.890
because remember it's
computer graphics.

00:28:20.890 --> 00:28:23.330
We do tricks all the time.

00:28:23.330 --> 00:28:25.600
What I'm doing here
is I'm actually

00:28:25.600 --> 00:28:28.240
making the element
of the RecyclerView

00:28:28.240 --> 00:28:31.705
being invisible,
recreating the element,

00:28:31.705 --> 00:28:35.050
putting it in the MotionLayout,
and animating that one.

00:28:35.050 --> 00:28:37.420
That would ordinarily
be not that simple

00:28:37.420 --> 00:28:42.480
to do other than the fact that
RecyclerView does exactly that.

00:28:42.480 --> 00:28:46.430
An adapter in RecyclerView
does just that.

00:28:46.430 --> 00:28:50.110
It knows how to create a new
view, how to populate it,

00:28:50.110 --> 00:28:53.950
and it's simply in that
example what we are using.

00:28:53.950 --> 00:28:55.750
Now, the thing
that is really cool

00:28:55.750 --> 00:28:58.180
here is not so much
that we can do that,

00:28:58.180 --> 00:29:00.860
because we could have done
it in a different way.

00:29:00.860 --> 00:29:03.670
Notice so that I'm
driving that by my finger.

00:29:03.670 --> 00:29:06.040
So it's not a fire and forget.

00:29:06.040 --> 00:29:08.690
I'm actually dragging
that element.

00:29:08.690 --> 00:29:11.590
But because now that animation
is done in MotionLayout

00:29:11.590 --> 00:29:15.070
in a motion scene XML
file, I can go and tweak

00:29:15.070 --> 00:29:17.140
it absolutely trivially.

00:29:17.140 --> 00:29:19.720
So, instead of this
basic animation,

00:29:19.720 --> 00:29:22.240
let's say that I would
like to delay a little bit

00:29:22.240 --> 00:29:26.770
the position of that element.

00:29:26.770 --> 00:29:29.680
I'm just adding this element
in the MotionScene file,

00:29:29.680 --> 00:29:33.780
and it will just do that.

00:29:33.780 --> 00:29:36.380
So again, the advantage
of being declarative

00:29:36.380 --> 00:29:39.830
like that, it gives you a
lot more power and a lot more

00:29:39.830 --> 00:29:42.693
flexible way of
tweaking your design.

00:29:42.693 --> 00:29:44.360
And you don't have
to look at your code.

00:29:44.360 --> 00:29:46.800
It's completely isolated.

00:29:46.800 --> 00:29:47.900
We can go even crazier.

00:29:47.900 --> 00:29:50.900
Let's say that I'm adding a
rotation here, because why not.

00:29:50.900 --> 00:29:59.425
And then you can get this kind
of effect where it's really--

00:29:59.425 --> 00:30:02.550
I'm not a good
designer, bear with me.

00:30:02.550 --> 00:30:03.870
But you get the idea.

00:30:03.870 --> 00:30:07.260
You have all the features and
capabilities of MotionLayout

00:30:07.260 --> 00:30:11.700
at your fingertips,
and just go with it.

00:30:11.700 --> 00:30:14.940
So that example was
interesting, but there

00:30:14.940 --> 00:30:18.710
is a pattern that
is very common in UI

00:30:18.710 --> 00:30:22.300
with this kind of infinite list.

00:30:22.300 --> 00:30:25.330
And for that pattern, we
have an interesting solution.

00:30:25.330 --> 00:30:28.140
So, when you have a
carousel like that,

00:30:28.140 --> 00:30:30.570
you actually know
exactly how many elements

00:30:30.570 --> 00:30:31.770
you have on screen.

00:30:31.770 --> 00:30:33.270
Typically, you have one.

00:30:33.270 --> 00:30:36.300
And you may have one
element that comes in,

00:30:36.300 --> 00:30:37.543
one amount that comes out.

00:30:37.543 --> 00:30:39.210
But, essentially, the
number of elements

00:30:39.210 --> 00:30:41.490
that you're playing
with is limited,

00:30:41.490 --> 00:30:44.065
and more importantly,
you know about them.

00:30:44.065 --> 00:30:47.820
RecyclerView does that, of
course, but it does a lot more.

00:30:47.820 --> 00:30:50.100
RecyclerView is going to
compute how many elements you

00:30:50.100 --> 00:30:53.260
need, it's going to lay them
out, et cetera, et cetera.

00:30:53.260 --> 00:30:55.390
So I'm not saying don't
choose RecyclerView.

00:30:55.390 --> 00:30:57.570
But if you have this
type of pattern,

00:30:57.570 --> 00:31:00.330
we could do something a
little more interesting

00:31:00.330 --> 00:31:02.160
purely in MotionLayout.

00:31:02.160 --> 00:31:03.630
So let's do that.

00:31:03.630 --> 00:31:07.800
If that's my
starting position, I

00:31:07.800 --> 00:31:12.660
may want to go and swipe on
the right or swipe on the left.

00:31:12.660 --> 00:31:15.360
And essentially, I
can translate that

00:31:15.360 --> 00:31:18.150
as different states
in MotionLayout.

00:31:18.150 --> 00:31:21.590
I have a start state, next
state, previous states.

00:31:21.590 --> 00:31:23.340
MotionLayout supports
multi states,

00:31:23.340 --> 00:31:26.170
and we can take
advantage of that.

00:31:26.170 --> 00:31:28.140
So what do we do with this?

00:31:28.140 --> 00:31:31.940
The trick here is this
little bit of code.

00:31:31.940 --> 00:31:34.230
And specifically, that stuff.

00:31:34.230 --> 00:31:37.650
When I reach the state
next, what I'm doing,

00:31:37.650 --> 00:31:41.550
I reset the progress to
zero to the start state,

00:31:41.550 --> 00:31:43.510
and I'm updating my images.

00:31:43.510 --> 00:31:46.060
So visually, this is
what it looks like.

00:31:46.060 --> 00:31:49.820
We get that, we go
to the next state,

00:31:49.820 --> 00:31:52.490
and then moving back
the progress to zero

00:31:52.490 --> 00:31:54.950
and dating many images.

00:31:54.950 --> 00:31:57.740
So that's what
happens internally.

00:31:57.740 --> 00:32:01.820
What you see as the user
is a little more seamless.

00:32:01.820 --> 00:32:06.420
You have this, you swipe,
and essentially, it

00:32:06.420 --> 00:32:10.410
looks like the element gets
added back to the new cue.

00:32:10.410 --> 00:32:12.010
So it's a little bit of magic.

00:32:12.010 --> 00:32:13.720
But it works really well.

00:32:13.720 --> 00:32:16.420
And here's a quick example.

00:32:16.420 --> 00:32:22.140
I have something that looks
very much like a RecyclerView.

00:32:22.140 --> 00:32:24.900
You notice a couple
of decorators playing

00:32:24.900 --> 00:32:27.210
in the background, and
you notice that I can just

00:32:27.210 --> 00:32:28.720
scroll like that.

00:32:28.720 --> 00:32:30.780
But you've got MotionLayout,
so you can go crazy

00:32:30.780 --> 00:32:31.770
on the transformation.

00:32:31.770 --> 00:32:36.180
You can go and add
many more states to it.

00:32:36.180 --> 00:32:41.930
Here's a quick
other example where

00:32:41.930 --> 00:32:44.940
it does the same
type of idea but just

00:32:44.940 --> 00:32:47.020
in a different pattern.

00:32:47.020 --> 00:32:49.740
So really, what I'm
trying to say here

00:32:49.740 --> 00:32:54.370
is that you can go much
beyond what we as the Android

00:32:54.370 --> 00:32:56.020
framework defined for you.

00:32:56.020 --> 00:32:58.230
MotionLayout is really
a tool box for you

00:32:58.230 --> 00:33:03.280
to experiment and come
up with something new.

00:33:03.280 --> 00:33:08.910
So to wrap up this presentation.

00:33:08.910 --> 00:33:11.510
First, there is a lot of
documentation we put out there.

00:33:11.510 --> 00:33:16.128
There is the documentation
on developer.android.com.

00:33:16.128 --> 00:33:18.080
There's various Medium
articles, and we

00:33:18.080 --> 00:33:21.330
are going to continue to
publish those articles as well.

00:33:21.330 --> 00:33:23.960
I highly recommend you to check
out the GitHub repository,

00:33:23.960 --> 00:33:25.950
because there's
tons of examples.

00:33:25.950 --> 00:33:28.250
And I don't know about
you, but as a programmer,

00:33:28.250 --> 00:33:32.690
I love seeing examples and
kind of riff off of that.

00:33:32.690 --> 00:33:36.170
And essentially,
the MotionLayout

00:33:36.170 --> 00:33:37.868
as part of
ConstraintLayout two, we

00:33:37.868 --> 00:33:39.410
are pretty happy
with where it stands

00:33:39.410 --> 00:33:43.710
in terms of the features, which
is why we reached beta one.

00:33:43.710 --> 00:33:48.050
So I encourage you to check
out beta one, play with it,

00:33:48.050 --> 00:33:51.410
and give us feedback.

00:33:51.410 --> 00:33:54.020
We really cannot wait to see
what you are going to come up

00:33:54.020 --> 00:33:56.900
with that.

00:33:56.900 --> 00:33:58.800
And again, important feedback.

00:33:58.800 --> 00:34:00.860
We have a bug tracker,
we look at all bugs,

00:34:00.860 --> 00:34:03.310
we try to go through them.

00:34:03.310 --> 00:34:06.380
And the final stuff I wanted
to say about the MotionLayout,

00:34:06.380 --> 00:34:09.500
as John said, we
put the top priority

00:34:09.500 --> 00:34:11.750
to walk on Android's
Studio Module

00:34:11.750 --> 00:34:16.730
to ensure that actually we
have the performances to do

00:34:16.730 --> 00:34:18.949
a good MotionEditor,
but we are very much

00:34:18.949 --> 00:34:22.190
intent on shaping that editor
in the next few months.

00:34:24.699 --> 00:34:28.969
JOHN HOFORD: So if you guys
build any cool examples,

00:34:28.969 --> 00:34:32.760
share them on Twitter so we all
could see them and enjoy them.

00:34:32.760 --> 00:34:36.210
I look on Twitter every
day looking for them.

00:34:36.210 --> 00:34:39.960
So I hope to see some pretty
examples from you guys.

00:34:39.960 --> 00:34:40.860
Thanks.

00:34:40.860 --> 00:34:42.660
[APPLAUSE]

00:34:42.660 --> 00:34:46.310
[GOOGLE LOGO MUSIC]

