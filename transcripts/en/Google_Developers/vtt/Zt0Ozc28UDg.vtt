WEBVTT
Kind: captions
Language: en

00:00:07.961 --> 00:00:09.460
JEFFREY POSNICK:
Hey everybody, this

00:00:09.460 --> 00:00:12.520
is Jeff Posnick from the YouTube
Developer Relations Team.

00:00:12.520 --> 00:00:16.230
We're continuing a series of
videos talking about migration

00:00:16.230 --> 00:00:20.620
that developers might have going
from Version 2 of the YouTube

00:00:20.620 --> 00:00:22.970
Data API, to Version 3.

00:00:22.970 --> 00:00:25.000
We strongly encourage
all developers

00:00:25.000 --> 00:00:28.670
to start that migration if
they haven't done so yet.

00:00:28.670 --> 00:00:32.386
Today we're going to be talking
about a way of subscribing

00:00:32.386 --> 00:00:34.010
to a user's channel
and show how that's

00:00:34.010 --> 00:00:38.760
changed between Version 2
and Version 3 of the API.

00:00:38.760 --> 00:00:42.080
So let's first talk a little bit
about how you would subscribe

00:00:42.080 --> 00:00:45.470
to a given YouTube channel
in Version 2 of the API.

00:00:45.470 --> 00:00:47.840
I just have a page
in the documentation

00:00:47.840 --> 00:00:51.900
up here, to just
give an overview

00:00:51.900 --> 00:00:53.320
for folks who aren't familiar.

00:00:53.320 --> 00:00:57.460
This is the actual RESTful API
call that you use in Version 2.

00:00:57.460 --> 00:00:59.670
Everything, again,
is Atom XML base,

00:00:59.670 --> 00:01:02.900
so you have this
pretty big XML document

00:01:02.900 --> 00:01:05.780
that you would pass in,
in a post request that's

00:01:05.780 --> 00:01:09.540
been authenticated, obviously.

00:01:09.540 --> 00:01:12.080
And this will end up
subscribing to a given channel.

00:01:12.080 --> 00:01:13.920
So that does work,
but let's talk

00:01:13.920 --> 00:01:17.250
about how you do that in
the more modern Version

00:01:17.250 --> 00:01:19.970
3 of the YouTube Data API.

00:01:19.970 --> 00:01:25.570
So, to start, in
Version 3 we operate

00:01:25.570 --> 00:01:29.980
on channel IDs, rather
than legacy user names.

00:01:29.980 --> 00:01:31.910
And this is
particularly important,

00:01:31.910 --> 00:01:35.620
because there are not legacy
user names for every given

00:01:35.620 --> 00:01:36.340
YouTube channel.

00:01:36.340 --> 00:01:37.750
There are channels
out there that

00:01:37.750 --> 00:01:40.500
just have channel IDs
associated with them.

00:01:40.500 --> 00:01:43.980
So using a channel
ID consistently

00:01:43.980 --> 00:01:47.090
throughout Version
3 of the API means

00:01:47.090 --> 00:01:50.530
you can deal the exact same
way, with any type of channel,

00:01:50.530 --> 00:01:52.030
even using these
newer channels that

00:01:52.030 --> 00:01:54.190
don't have legacy user names.

00:01:54.190 --> 00:01:56.560
But that also means that
if we do have a channel,

00:01:56.560 --> 00:01:59.130
and we know what the
legacy user name is,

00:01:59.130 --> 00:02:02.300
we need to first translate that
legacy user name into a channel

00:02:02.300 --> 00:02:03.140
ID.

00:02:03.140 --> 00:02:06.590
So let's do that using the V3
API Call youtube.channels.list.

00:02:09.270 --> 00:02:11.550
I'm going to show an
example of making this API

00:02:11.550 --> 00:02:14.500
call from within the API
Explorer, which is just

00:02:14.500 --> 00:02:17.810
a web-based harness
for making API calls,

00:02:17.810 --> 00:02:20.240
and just kind of
simplifies things.

00:02:20.240 --> 00:02:23.570
It's a great way to
play around with the API

00:02:23.570 --> 00:02:26.250
before you actually
start writing code

00:02:26.250 --> 00:02:27.970
using our client libraries.

00:02:27.970 --> 00:02:31.540
If you wanted to experiment with
what different API parameters

00:02:31.540 --> 00:02:35.650
do, I really highly encourage
that you check it out.

00:02:35.650 --> 00:02:37.760
So in this particular
case, we want

00:02:37.760 --> 00:02:43.440
to translate a user
name into a Channel ID.

00:02:43.440 --> 00:02:46.350
In V3 there's this concept
of a part parameter,

00:02:46.350 --> 00:02:51.690
that most of our
operations take.

00:02:51.690 --> 00:02:55.710
In this particular case, I
want the ID part returned.

00:02:55.710 --> 00:02:59.130
Think of this as a way of
limiting the response that you

00:02:59.130 --> 00:03:01.460
get back from the
API, so that it only

00:03:01.460 --> 00:03:04.730
contains the information that
you specifically asked for.

00:03:04.730 --> 00:03:07.970
Instead of receiving a
really large document that

00:03:07.970 --> 00:03:11.620
has all the details about
a channel, I'm saying here

00:03:11.620 --> 00:03:14.030
all I want back is the ID.

00:03:14.030 --> 00:03:17.450
So this is going to
result in fast response.

00:03:17.450 --> 00:03:19.980
It's great for
contexts where you

00:03:19.980 --> 00:03:23.280
might have limited
bandwidth, or just don't

00:03:23.280 --> 00:03:26.560
want to deal with processing
a whole big response document.

00:03:26.560 --> 00:03:28.070
So I'm going to
say I want the ID,

00:03:28.070 --> 00:03:32.325
and the channel that I want the
ID for is Google Developers.

00:03:32.325 --> 00:03:36.790
It's kind of our standard
subscription channel.

00:03:36.790 --> 00:03:39.530
I'm going to go down here, and
I'm going to click Execute.

00:03:39.530 --> 00:03:42.970
This is making the
V3 API Call for me.

00:03:42.970 --> 00:03:48.120
And I'm going to get back this
very small response in JSON,

00:03:48.120 --> 00:03:50.700
and it contains this ID value.

00:03:50.700 --> 00:03:52.652
So let me copy
that, and I'm going

00:03:52.652 --> 00:03:55.760
to use it in my next API Call.

00:03:55.760 --> 00:03:59.670
The actual way of concerning a
subscription in V3 of the API

00:03:59.670 --> 00:04:02.960
is with a
 youtube.subscriptions.insertcall.

00:04:02.960 --> 00:04:07.230
I have here the documentation
for that particular API call.

00:04:07.230 --> 00:04:10.480
If you haven't looked through
the V3 API documentation yet,

00:04:10.480 --> 00:04:14.350
I'd recommend that you pour
through it a little bit.

00:04:14.350 --> 00:04:15.810
It looks a little
daunting in that

00:04:15.810 --> 00:04:21.339
there's a whole bunch of
different methods listed over

00:04:21.339 --> 00:04:23.720
here, on the left hand side
that you navigate through.

00:04:23.720 --> 00:04:27.810
But I think you'll find
that all of the methods

00:04:27.810 --> 00:04:30.890
follow a very, very
consistent interface,

00:04:30.890 --> 00:04:33.440
and naming conventions
that are used throughout.

00:04:33.440 --> 00:04:36.710
Once you get familiar
with making API calls,

00:04:36.710 --> 00:04:39.610
against one particular
service, using methods

00:04:39.610 --> 00:04:42.410
and other services should
become second nature.

00:04:42.410 --> 00:04:46.292
So hopefully you'll find
it's a really consistent API.

00:04:46.292 --> 00:04:47.820
So, again, in this
particular case

00:04:47.820 --> 00:04:51.650
I have the documentation for
the Subscriptions Insert Method

00:04:51.650 --> 00:04:53.990
open, and you'll learn
a little bit more

00:04:53.990 --> 00:04:55.880
about what's different
parameters are.

00:04:55.880 --> 00:04:59.190
And you'll learn about what
you can set in the request body

00:04:59.190 --> 00:05:02.881
when you're making your
YouTube API V3 request.

00:05:02.881 --> 00:05:04.380
In this particular
case, it's saying

00:05:04.380 --> 00:05:10.100
that I need to specify something
for snippet.resource ID.

00:05:10.100 --> 00:05:12.970
One of the other nice things
about the V3 documentation

00:05:12.970 --> 00:05:16.950
is that we have these
live snippets of code,

00:05:16.950 --> 00:05:19.460
that demonstrate how
to make the API call,

00:05:19.460 --> 00:05:22.410
using the client library
selected over here.

00:05:22.410 --> 00:05:27.070
So Java, PHP, Python, and Ruby
for this particular API call.

00:05:27.070 --> 00:05:29.680
So if you were doing
pipeline code, for instance,

00:05:29.680 --> 00:05:34.000
you could pretty much just copy
this, and do it straightaway

00:05:34.000 --> 00:05:36.090
without having to
change too much.

00:05:36.090 --> 00:05:38.270
But I want to show
how you would make

00:05:38.270 --> 00:05:40.545
that API call in a little
bit more of an agnostic way.

00:05:40.545 --> 00:05:42.170
So we have, pretty
much, the equivalent

00:05:42.170 --> 00:05:45.130
of this other page,
this API explorer,

00:05:45.130 --> 00:05:47.070
embedded inline in
our documentation,

00:05:47.070 --> 00:05:48.730
at the very bottom of this page.

00:05:48.730 --> 00:05:53.080
And it's going to allow
me to make this API call.

00:05:53.080 --> 00:05:54.830
The other nice thing
that allows me to do,

00:05:54.830 --> 00:05:59.120
is go through the OAuth2
flow, for authorizing access

00:05:59.120 --> 00:06:01.640
to my particular channel.

00:06:01.640 --> 00:06:04.280
It has to know who
I am before it'll

00:06:04.280 --> 00:06:06.790
let me subscribe
to a given channel.

00:06:06.790 --> 00:06:10.090
So this simplifies things
for testing purposes.

00:06:10.090 --> 00:06:14.470
I'm just going click
Authorize down here.

00:06:14.470 --> 00:06:17.410
When you're running
your own code,

00:06:17.410 --> 00:06:22.601
you're going to want make use
of your own OAuth2 registration.

00:06:22.601 --> 00:06:24.100
We have some other
training material

00:06:24.100 --> 00:06:27.540
out there that talks you through
the whole process of getting up

00:06:27.540 --> 00:06:29.075
to speed with OAauth2.

00:06:29.075 --> 00:06:33.280
But for these purposes, we
could just test, using that.

00:06:33.280 --> 00:06:35.970
I'm going to put in
part equals snippet,

00:06:35.970 --> 00:06:38.540
because I know, from
reading up here,

00:06:38.540 --> 00:06:42.880
that I need to set a value
for snippet.resource ID.

00:06:42.880 --> 00:06:46.830
So this is my way, even though
this is doing an insert call,

00:06:46.830 --> 00:06:48.480
it's saying what
fields I'm going

00:06:48.480 --> 00:06:51.150
to be setting in
the request body.

00:06:51.150 --> 00:06:55.770
And this API explorer has a
really nice interface over here

00:06:55.770 --> 00:07:00.250
for choosing what I'm
sending in the request body.

00:07:00.250 --> 00:07:02.800
It's a way of
programmatically building up

00:07:02.800 --> 00:07:04.420
my request body for me.

00:07:04.420 --> 00:07:05.910
Again, if you're
writing real code,

00:07:05.910 --> 00:07:07.870
you're gonna probably be
using a client library.

00:07:07.870 --> 00:07:09.494
There's gonna be a
equivalents of doing

00:07:09.494 --> 00:07:11.080
this in each client library.

00:07:11.080 --> 00:07:13.370
And refer to our documentation.

00:07:13.370 --> 00:07:16.360
You can also refer to
github.com/youtube,

00:07:16.360 --> 00:07:20.940
where we have all these examples
that are in-line in the docs.

00:07:20.940 --> 00:07:23.400
We have a standalone
version there.

00:07:23.400 --> 00:07:25.410
So check that out.

00:07:25.410 --> 00:07:27.210
But for illustrative
purposes, I'm

00:07:27.210 --> 00:07:28.820
going to just do this over here.

00:07:28.820 --> 00:07:31.370
So I'm setting Snippet
Resource ID, Channel ID,

00:07:31.370 --> 00:07:34.070
and I'm going to be
pasting in the channel ID

00:07:34.070 --> 00:07:36.160
that I got from
the previous call.

00:07:36.160 --> 00:07:38.020
And I'm going to click Execute.

00:07:38.020 --> 00:07:42.990
At this point, I will have a
subscription to that channel.

00:07:42.990 --> 00:07:43.980
So that's great.

00:07:43.980 --> 00:07:45.560
It just gives me
some information

00:07:45.560 --> 00:07:47.770
about the channel
that I just subscribed

00:07:47.770 --> 00:07:49.620
to, over here in the response.

00:07:49.620 --> 00:07:53.430
And it looks like everything
worked as expected.

00:07:53.430 --> 00:07:57.540
So that gives you an example
of how you could make a YouTube

00:07:57.540 --> 00:08:03.010
Data API Version 3
subscription insertion.

00:08:03.010 --> 00:08:06.152
Once you get familiar with that
basic way of doing subscription

00:08:06.152 --> 00:08:07.610
insertions, you'll
find that things

00:08:07.610 --> 00:08:11.840
like inserting a new playlist
or adding items to a playlist

00:08:11.840 --> 00:08:14.190
or doing a number
of other operations,

00:08:14.190 --> 00:08:17.800
all follow the very
same principle.

00:08:17.800 --> 00:08:20.530
Hopefully it'll be a
straightforward migration

00:08:20.530 --> 00:08:25.400
for you, moving your code
from V2 to the V3 equivalent.

00:08:25.400 --> 00:08:27.590
Thanks very much taking
the time to watch this.

00:08:27.590 --> 00:08:30.090
Again, I'm Jeff Posnick from
the YouTube Developer Relations

00:08:30.090 --> 00:08:32.686
Team, and happy migrating.

