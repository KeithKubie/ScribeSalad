WEBVTT
Kind: captions
Language: en

00:00:01.500 --> 00:00:05.050
 
[Music]

00:00:05.050 --> 00:00:05.060
[Music]
 

00:00:05.060 --> 00:00:08.059
[Music]
hello everyone welcome to this morning's

00:00:08.059 --> 00:00:08.069
hello everyone welcome to this morning's
 

00:00:08.069 --> 00:00:10.009
hello everyone welcome to this morning's
session on test-driven development for

00:00:10.009 --> 00:00:10.019
session on test-driven development for
 

00:00:10.019 --> 00:00:12.320
session on test-driven development for
the Android platform my name is Jonathan

00:00:12.320 --> 00:00:12.330
the Android platform my name is Jonathan
 

00:00:12.330 --> 00:00:14.799
the Android platform my name is Jonathan
garish and I'm part of the mobile ninjas

00:00:14.799 --> 00:00:14.809
garish and I'm part of the mobile ninjas
 

00:00:14.809 --> 00:00:17.180
garish and I'm part of the mobile ninjas
we're a small team within Google who are

00:00:17.180 --> 00:00:17.190
we're a small team within Google who are
 

00:00:17.190 --> 00:00:19.240
we're a small team within Google who are
passionate about software testing and

00:00:19.240 --> 00:00:19.250
passionate about software testing and
 

00:00:19.250 --> 00:00:21.560
passionate about software testing and
can I get a quick show of hands in the

00:00:21.560 --> 00:00:21.570
can I get a quick show of hands in the
 

00:00:21.570 --> 00:00:22.790
can I get a quick show of hands in the
audience how many of you are actually

00:00:22.790 --> 00:00:22.800
audience how many of you are actually
 

00:00:22.800 --> 00:00:24.529
audience how many of you are actually
writing tests as part of your normal

00:00:24.529 --> 00:00:24.539
writing tests as part of your normal
 

00:00:24.539 --> 00:00:26.570
writing tests as part of your normal
software development practice that's

00:00:26.570 --> 00:00:26.580
software development practice that's
 

00:00:26.580 --> 00:00:27.670
software development practice that's
fantastic

00:00:27.670 --> 00:00:27.680
fantastic
 

00:00:27.680 --> 00:00:31.880
fantastic
okay so if you've written tests for

00:00:31.880 --> 00:00:31.890
okay so if you've written tests for
 

00:00:31.890 --> 00:00:33.950
okay so if you've written tests for
Android before you probably use some of

00:00:33.950 --> 00:00:33.960
Android before you probably use some of
 

00:00:33.960 --> 00:00:36.729
Android before you probably use some of
our tools we developed the Android

00:00:36.729 --> 00:00:36.739
our tools we developed the Android
 

00:00:36.739 --> 00:00:38.840
our tools we developed the Android
testing support library which includes

00:00:38.840 --> 00:00:38.850
testing support library which includes
 

00:00:38.850 --> 00:00:41.119
testing support library which includes
the J unit for test run own rules

00:00:41.119 --> 00:00:41.129
the J unit for test run own rules
 

00:00:41.129 --> 00:00:44.000
the J unit for test run own rules
the espresso UI testing framework and

00:00:44.000 --> 00:00:44.010
the espresso UI testing framework and
 

00:00:44.010 --> 00:00:46.010
the espresso UI testing framework and
were also active contributors to

00:00:46.010 --> 00:00:46.020
were also active contributors to
 

00:00:46.020 --> 00:00:48.229
were also active contributors to
robolectric the open-source Android unit

00:00:48.229 --> 00:00:48.239
robolectric the open-source Android unit
 

00:00:48.239 --> 00:00:52.220
robolectric the open-source Android unit
testing framework so everyone's telling

00:00:52.220 --> 00:00:52.230
testing framework so everyone's telling
 

00:00:52.230 --> 00:00:54.020
testing framework so everyone's telling
you to write tests but why should you

00:00:54.020 --> 00:00:54.030
you to write tests but why should you
 

00:00:54.030 --> 00:00:56.420
you to write tests but why should you
really do it it's true that tests take

00:00:56.420 --> 00:00:56.430
really do it it's true that tests take
 

00:00:56.430 --> 00:00:58.580
really do it it's true that tests take
time to write they're adding code to

00:00:58.580 --> 00:00:58.590
time to write they're adding code to
 

00:00:58.590 --> 00:01:00.439
time to write they're adding code to
your codebase and perhaps you've been in

00:01:00.439 --> 00:01:00.449
your codebase and perhaps you've been in
 

00:01:00.449 --> 00:01:02.330
your codebase and perhaps you've been in
a situation before where your manager or

00:01:02.330 --> 00:01:02.340
a situation before where your manager or
 

00:01:02.340 --> 00:01:04.640
a situation before where your manager or
client has been telling you that they're

00:01:04.640 --> 00:01:04.650
client has been telling you that they're
 

00:01:04.650 --> 00:01:05.410
client has been telling you that they're
slowing you down

00:01:05.410 --> 00:01:05.420
slowing you down
 

00:01:05.420 --> 00:01:07.969
slowing you down
but there's so many compelling reasons

00:01:07.969 --> 00:01:07.979
but there's so many compelling reasons
 

00:01:07.979 --> 00:01:10.910
but there's so many compelling reasons
to write tests tests give you rapid

00:01:10.910 --> 00:01:10.920
to write tests tests give you rapid
 

00:01:10.920 --> 00:01:14.179
to write tests tests give you rapid
feedback on failures so failures that

00:01:14.179 --> 00:01:14.189
feedback on failures so failures that
 

00:01:14.189 --> 00:01:15.620
feedback on failures so failures that
are spotted earlier on in the

00:01:15.620 --> 00:01:15.630
are spotted earlier on in the
 

00:01:15.630 --> 00:01:17.780
are spotted earlier on in the
development cycle a far easier to fix

00:01:17.780 --> 00:01:17.790
development cycle a far easier to fix
 

00:01:17.790 --> 00:01:20.749
development cycle a far easier to fix
than once they've gone live secondly

00:01:20.749 --> 00:01:20.759
than once they've gone live secondly
 

00:01:20.759 --> 00:01:23.780
than once they've gone live secondly
tests give you a safety net you're free

00:01:23.780 --> 00:01:23.790
tests give you a safety net you're free
 

00:01:23.790 --> 00:01:25.520
tests give you a safety net you're free
with a good suite of tests you're free

00:01:25.520 --> 00:01:25.530
with a good suite of tests you're free
 

00:01:25.530 --> 00:01:27.950
with a good suite of tests you're free
to refactor clean up and optimize your

00:01:27.950 --> 00:01:27.960
to refactor clean up and optimize your
 

00:01:27.960 --> 00:01:29.719
to refactor clean up and optimize your
code safe in the knowledge that you're

00:01:29.719 --> 00:01:29.729
code safe in the knowledge that you're
 

00:01:29.729 --> 00:01:32.080
code safe in the knowledge that you're
not going to break existing behavior

00:01:32.080 --> 00:01:32.090
not going to break existing behavior
 

00:01:32.090 --> 00:01:34.219
not going to break existing behavior
tests are really the backbone of

00:01:34.219 --> 00:01:34.229
tests are really the backbone of
 

00:01:34.229 --> 00:01:36.710
tests are really the backbone of
sustainable software development you'll

00:01:36.710 --> 00:01:36.720
sustainable software development you'll
 

00:01:36.720 --> 00:01:38.510
sustainable software development you'll
be able to maintain a stable velocity

00:01:38.510 --> 00:01:38.520
be able to maintain a stable velocity
 

00:01:38.520 --> 00:01:40.280
be able to maintain a stable velocity
throughout the lifetime of your project

00:01:40.280 --> 00:01:40.290
throughout the lifetime of your project
 

00:01:40.290 --> 00:01:42.289
throughout the lifetime of your project
and you're going to avoid the boom-bust

00:01:42.289 --> 00:01:42.299
and you're going to avoid the boom-bust
 

00:01:42.299 --> 00:01:46.609
and you're going to avoid the boom-bust
cycles of crunch feature time and the

00:01:46.609 --> 00:01:46.619
cycles of crunch feature time and the
 

00:01:46.619 --> 00:01:51.469
cycles of crunch feature time and the
aggregation of technical debt so in

00:01:51.469 --> 00:01:51.479
aggregation of technical debt so in
 

00:01:51.479 --> 00:01:53.660
aggregation of technical debt so in
software testing there exists the

00:01:53.660 --> 00:01:53.670
software testing there exists the
 

00:01:53.670 --> 00:01:55.310
software testing there exists the
concept of the pyramid the testing

00:01:55.310 --> 00:01:55.320
concept of the pyramid the testing
 

00:01:55.320 --> 00:01:57.319
concept of the pyramid the testing
pyramid and this is made up of a number

00:01:57.319 --> 00:01:57.329
pyramid and this is made up of a number
 

00:01:57.329 --> 00:01:59.810
pyramid and this is made up of a number
of layers and each layer brings with it

00:01:59.810 --> 00:01:59.820
of layers and each layer brings with it
 

00:01:59.820 --> 00:02:01.399
of layers and each layer brings with it
its own trade-offs that you're going to

00:02:01.399 --> 00:02:01.409
its own trade-offs that you're going to
 

00:02:01.409 --> 00:02:05.780
its own trade-offs that you're going to
have to weigh at the lowest layer is the

00:02:05.780 --> 00:02:05.790
have to weigh at the lowest layer is the
 

00:02:05.790 --> 00:02:08.660
have to weigh at the lowest layer is the
small tests or the unit tests and these

00:02:08.660 --> 00:02:08.670
small tests or the unit tests and these
 

00:02:08.670 --> 00:02:10.609
small tests or the unit tests and these
need to be very fast and highly focused

00:02:10.609 --> 00:02:10.619
need to be very fast and highly focused
 

00:02:10.619 --> 00:02:12.800
need to be very fast and highly focused
that's why we recommended you

00:02:12.800 --> 00:02:12.810
that's why we recommended you
 

00:02:12.810 --> 00:02:14.600
that's why we recommended you
these kind of tests is what is known as

00:02:14.600 --> 00:02:14.610
these kind of tests is what is known as
 

00:02:14.610 --> 00:02:16.940
these kind of tests is what is known as
local unit tests and these are going to

00:02:16.940 --> 00:02:16.950
local unit tests and these are going to
 

00:02:16.950 --> 00:02:19.210
local unit tests and these are going to
run on your local desktop machine and

00:02:19.210 --> 00:02:19.220
run on your local desktop machine and
 

00:02:19.220 --> 00:02:21.350
run on your local desktop machine and
the trade-off you're making with these

00:02:21.350 --> 00:02:21.360
the trade-off you're making with these
 

00:02:21.360 --> 00:02:23.990
the trade-off you're making with these
kind of tests is infidelity because

00:02:23.990 --> 00:02:24.000
kind of tests is infidelity because
 

00:02:24.000 --> 00:02:25.190
kind of tests is infidelity because
you're not running on a realistic

00:02:25.190 --> 00:02:25.200
you're not running on a realistic
 

00:02:25.200 --> 00:02:26.690
you're not running on a realistic
environment and you're probably

00:02:26.690 --> 00:02:26.700
environment and you're probably
 

00:02:26.700 --> 00:02:28.940
environment and you're probably
substituting in a bunch of marks and

00:02:28.940 --> 00:02:28.950
substituting in a bunch of marks and
 

00:02:28.950 --> 00:02:34.130
substituting in a bunch of marks and
fakes as we move up the pyramid we're

00:02:34.130 --> 00:02:34.140
fakes as we move up the pyramid we're
 

00:02:34.140 --> 00:02:35.479
fakes as we move up the pyramid we're
now into the realms of integration

00:02:35.479 --> 00:02:35.489
now into the realms of integration
 

00:02:35.489 --> 00:02:37.640
now into the realms of integration
testing and end-to-end testing and the

00:02:37.640 --> 00:02:37.650
testing and end-to-end testing and the
 

00:02:37.650 --> 00:02:39.470
testing and end-to-end testing and the
key with these kind of tests is to bring

00:02:39.470 --> 00:02:39.480
key with these kind of tests is to bring
 

00:02:39.480 --> 00:02:42.170
key with these kind of tests is to bring
in fidelity that's why we recommend that

00:02:42.170 --> 00:02:42.180
in fidelity that's why we recommend that
 

00:02:42.180 --> 00:02:44.030
in fidelity that's why we recommend that
you run these kind of tests on a real

00:02:44.030 --> 00:02:44.040
you run these kind of tests on a real
 

00:02:44.040 --> 00:02:47.330
you run these kind of tests on a real
device or an emulator these are the kind

00:02:47.330 --> 00:02:47.340
device or an emulator these are the kind
 

00:02:47.340 --> 00:02:48.920
device or an emulator these are the kind
of tests that are going to tell you that

00:02:48.920 --> 00:02:48.930
of tests that are going to tell you that
 

00:02:48.930 --> 00:02:51.009
of tests that are going to tell you that
your software actually works

00:02:51.009 --> 00:02:51.019
your software actually works
 

00:02:51.019 --> 00:02:54.020
your software actually works
however they are less focused so a

00:02:54.020 --> 00:02:54.030
however they are less focused so a
 

00:02:54.030 --> 00:02:55.820
however they are less focused so a
failure in one of these kind of tests

00:02:55.820 --> 00:02:55.830
failure in one of these kind of tests
 

00:02:55.830 --> 00:02:58.130
failure in one of these kind of tests
might take a little longer to track down

00:02:58.130 --> 00:02:58.140
might take a little longer to track down
 

00:02:58.140 --> 00:03:00.770
might take a little longer to track down
that it would in a unit test and one of

00:03:00.770 --> 00:03:00.780
that it would in a unit test and one of
 

00:03:00.780 --> 00:03:02.600
that it would in a unit test and one of
the big trade-offs you're making is in

00:03:02.600 --> 00:03:02.610
the big trade-offs you're making is in
 

00:03:02.610 --> 00:03:05.420
the big trade-offs you're making is in
test execution speed because you're

00:03:05.420 --> 00:03:05.430
test execution speed because you're
 

00:03:05.430 --> 00:03:07.070
test execution speed because you're
assembling multiple components they all

00:03:07.070 --> 00:03:07.080
assembling multiple components they all
 

00:03:07.080 --> 00:03:08.990
assembling multiple components they all
have to be built and then package

00:03:08.990 --> 00:03:09.000
have to be built and then package
 

00:03:09.000 --> 00:03:10.820
have to be built and then package
shipped to a device where the tests are

00:03:10.820 --> 00:03:10.830
shipped to a device where the tests are
 

00:03:10.830 --> 00:03:13.130
shipped to a device where the tests are
run and the results elected back that's

00:03:13.130 --> 00:03:13.140
run and the results elected back that's
 

00:03:13.140 --> 00:03:16.550
run and the results elected back that's
going to take extra time so there's no

00:03:16.550 --> 00:03:16.560
going to take extra time so there's no
 

00:03:16.560 --> 00:03:18.470
going to take extra time so there's no
single layer in this testing pyramid

00:03:18.470 --> 00:03:18.480
single layer in this testing pyramid
 

00:03:18.480 --> 00:03:21.380
single layer in this testing pyramid
that can suffice so what you need to do

00:03:21.380 --> 00:03:21.390
that can suffice so what you need to do
 

00:03:21.390 --> 00:03:23.599
that can suffice so what you need to do
is to blend in tests at each different

00:03:23.599 --> 00:03:23.609
is to blend in tests at each different
 

00:03:23.609 --> 00:03:26.120
is to blend in tests at each different
tier leveraging the strengths of one

00:03:26.120 --> 00:03:26.130
tier leveraging the strengths of one
 

00:03:26.130 --> 00:03:28.640
tier leveraging the strengths of one
category to way off the trade-offs in

00:03:28.640 --> 00:03:28.650
category to way off the trade-offs in
 

00:03:28.650 --> 00:03:31.819
category to way off the trade-offs in
another there's no real hard and fast

00:03:31.819 --> 00:03:31.829
another there's no real hard and fast
 

00:03:31.829 --> 00:03:34.610
another there's no real hard and fast
rule here but Google's own internal

00:03:34.610 --> 00:03:34.620
rule here but Google's own internal
 

00:03:34.620 --> 00:03:37.340
rule here but Google's own internal
testing experts recommend the 70-20-10

00:03:37.340 --> 00:03:37.350
testing experts recommend the 70-20-10
 

00:03:37.350 --> 00:03:40.250
testing experts recommend the 70-20-10
rule of thumb as the ratio between small

00:03:40.250 --> 00:03:40.260
rule of thumb as the ratio between small
 

00:03:40.260 --> 00:03:43.430
rule of thumb as the ratio between small
medium and large tests let's take a look

00:03:43.430 --> 00:03:43.440
medium and large tests let's take a look
 

00:03:43.440 --> 00:03:47.960
medium and large tests let's take a look
at our workflow so and with test-driven

00:03:47.960 --> 00:03:47.970
at our workflow so and with test-driven
 

00:03:47.970 --> 00:03:49.819
at our workflow so and with test-driven
development the idea is that you start

00:03:49.819 --> 00:03:49.829
development the idea is that you start
 

00:03:49.829 --> 00:03:51.620
development the idea is that you start
by writing your tests then you implement

00:03:51.620 --> 00:03:51.630
by writing your tests then you implement
 

00:03:51.630 --> 00:03:53.780
by writing your tests then you implement
a code to make those tests pass and then

00:03:53.780 --> 00:03:53.790
a code to make those tests pass and then
 

00:03:53.790 --> 00:03:55.120
a code to make those tests pass and then
when your tests a green you can submit

00:03:55.120 --> 00:03:55.130
when your tests a green you can submit
 

00:03:55.130 --> 00:03:58.190
when your tests a green you can submit
again a quick show of hands who out

00:03:58.190 --> 00:03:58.200
again a quick show of hands who out
 

00:03:58.200 --> 00:04:01.520
again a quick show of hands who out
there has test-driven their code tried

00:04:01.520 --> 00:04:01.530
there has test-driven their code tried
 

00:04:01.530 --> 00:04:04.759
there has test-driven their code tried
test-driven development in the past okay

00:04:04.759 --> 00:04:04.769
test-driven development in the past okay
 

00:04:04.769 --> 00:04:07.370
test-driven development in the past okay
cool so we like test-driven development

00:04:07.370 --> 00:04:07.380
cool so we like test-driven development
 

00:04:07.380 --> 00:04:10.129
cool so we like test-driven development
because it makes you to think about the

00:04:10.129 --> 00:04:10.139
because it makes you to think about the
 

00:04:10.139 --> 00:04:12.410
because it makes you to think about the
design of your application up front it

00:04:12.410 --> 00:04:12.420
design of your application up front it
 

00:04:12.420 --> 00:04:14.900
design of your application up front it
gives you consideration to api's and the

00:04:14.900 --> 00:04:14.910
gives you consideration to api's and the
 

00:04:14.910 --> 00:04:17.690
gives you consideration to api's and the
structure of your code with test-driven

00:04:17.690 --> 00:04:17.700
structure of your code with test-driven
 

00:04:17.700 --> 00:04:19.039
structure of your code with test-driven
development you're also going to be

00:04:19.039 --> 00:04:19.049
development you're also going to be
 

00:04:19.049 --> 00:04:21.620
development you're also going to be
writing less code because you only write

00:04:21.620 --> 00:04:21.630
writing less code because you only write
 

00:04:21.630 --> 00:04:24.310
writing less code because you only write
the code necessary to satisfy your tests

00:04:24.310 --> 00:04:24.320
the code necessary to satisfy your tests
 

00:04:24.320 --> 00:04:26.740
the code necessary to satisfy your tests
this will enable you to release

00:04:26.740 --> 00:04:26.750
this will enable you to release
 

00:04:26.750 --> 00:04:29.080
this will enable you to release
and often as you constantly green you'll

00:04:29.080 --> 00:04:29.090
and often as you constantly green you'll
 

00:04:29.090 --> 00:04:30.370
and often as you constantly green you'll
be able to deploy a working application

00:04:30.370 --> 00:04:30.380
be able to deploy a working application
 

00:04:30.380 --> 00:04:32.310
be able to deploy a working application
at a moment's notice

00:04:32.310 --> 00:04:32.320
at a moment's notice
 

00:04:32.320 --> 00:04:36.010
at a moment's notice
if we're following the test pyramid the

00:04:36.010 --> 00:04:36.020
if we're following the test pyramid the
 

00:04:36.020 --> 00:04:37.420
if we're following the test pyramid the
workflow is going to look something like

00:04:37.420 --> 00:04:37.430
workflow is going to look something like
 

00:04:37.430 --> 00:04:42.160
workflow is going to look something like
this first of all we have a larger outer

00:04:42.160 --> 00:04:42.170
this first of all we have a larger outer
 

00:04:42.170 --> 00:04:43.900
this first of all we have a larger outer
iteration that's concerned with feature

00:04:43.900 --> 00:04:43.910
iteration that's concerned with feature
 

00:04:43.910 --> 00:04:47.230
iteration that's concerned with feature
development and here is started it's

00:04:47.230 --> 00:04:47.240
development and here is started it's
 

00:04:47.240 --> 00:04:50.710
development and here is started it's
driven by a UI test and the mantra with

00:04:50.710 --> 00:04:50.720
driven by a UI test and the mantra with
 

00:04:50.720 --> 00:04:52.930
driven by a UI test and the mantra with
test-driven development is red green

00:04:52.930 --> 00:04:52.940
test-driven development is red green
 

00:04:52.940 --> 00:04:55.060
test-driven development is red green
refactor we start off with a failing

00:04:55.060 --> 00:04:55.070
refactor we start off with a failing
 

00:04:55.070 --> 00:04:57.280
refactor we start off with a failing
test we implement the code to make that

00:04:57.280 --> 00:04:57.290
test we implement the code to make that
 

00:04:57.290 --> 00:05:02.260
test we implement the code to make that
test pass and then we refactor inside

00:05:02.260 --> 00:05:02.270
test pass and then we refactor inside
 

00:05:02.270 --> 00:05:04.270
test pass and then we refactor inside
the larger iteration are a series of

00:05:04.270 --> 00:05:04.280
the larger iteration are a series of
 

00:05:04.280 --> 00:05:05.830
the larger iteration are a series of
smaller iterations and these are

00:05:05.830 --> 00:05:05.840
smaller iterations and these are
 

00:05:05.840 --> 00:05:08.290
smaller iterations and these are
concerned with the unit tests here that

00:05:08.290 --> 00:05:08.300
concerned with the unit tests here that
 

00:05:08.300 --> 00:05:10.150
concerned with the unit tests here that
you're assembling the building the units

00:05:10.150 --> 00:05:10.160
you're assembling the building the units
 

00:05:10.160 --> 00:05:12.040
you're assembling the building the units
required to make the feature pass and

00:05:12.040 --> 00:05:12.050
required to make the feature pass and
 

00:05:12.050 --> 00:05:15.250
required to make the feature pass and
again you use the same mantra here red

00:05:15.250 --> 00:05:15.260
again you use the same mantra here red
 

00:05:15.260 --> 00:05:18.280
again you use the same mantra here red
green refactor red green refactor so

00:05:18.280 --> 00:05:18.290
green refactor red green refactor so
 

00:05:18.290 --> 00:05:22.260
green refactor red green refactor so
let's take a look an example application

00:05:22.260 --> 00:05:22.270
 
 

00:05:22.270 --> 00:05:24.610
 
so the feature going to implement today

00:05:24.610 --> 00:05:24.620
so the feature going to implement today
 

00:05:24.620 --> 00:05:27.070
so the feature going to implement today
is the add notes flow to a sample note

00:05:27.070 --> 00:05:27.080
is the add notes flow to a sample note
 

00:05:27.080 --> 00:05:29.380
is the add notes flow to a sample note
taking application if we take a look at

00:05:29.380 --> 00:05:29.390
taking application if we take a look at
 

00:05:29.390 --> 00:05:31.900
taking application if we take a look at
our mock-ups we can see that we start on

00:05:31.900 --> 00:05:31.910
our mock-ups we can see that we start on
 

00:05:31.910 --> 00:05:33.430
our mock-ups we can see that we start on
a notes list screen full of some

00:05:33.430 --> 00:05:33.440
a notes list screen full of some
 

00:05:33.440 --> 00:05:35.469
a notes list screen full of some
existing notes there's a floating action

00:05:35.469 --> 00:05:35.479
existing notes there's a floating action
 

00:05:35.479 --> 00:05:37.750
existing notes there's a floating action
button down at the bottom and the user

00:05:37.750 --> 00:05:37.760
button down at the bottom and the user
 

00:05:37.760 --> 00:05:39.580
button down at the bottom and the user
will click this taking them on to the

00:05:39.580 --> 00:05:39.590
will click this taking them on to the
 

00:05:39.590 --> 00:05:42.580
will click this taking them on to the
new add notes screen here they can enter

00:05:42.580 --> 00:05:42.590
new add notes screen here they can enter
 

00:05:42.590 --> 00:05:44.409
new add notes screen here they can enter
a title and a description for their note

00:05:44.409 --> 00:05:44.419
a title and a description for their note
 

00:05:44.419 --> 00:05:46.450
a title and a description for their note
before clicking save the node will be

00:05:46.450 --> 00:05:46.460
before clicking save the node will be
 

00:05:46.460 --> 00:05:48.370
before clicking save the node will be
persisted and then never turned back to

00:05:48.370 --> 00:05:48.380
persisted and then never turned back to
 

00:05:48.380 --> 00:05:50.260
persisted and then never turned back to
the notes list screen where they can see

00:05:50.260 --> 00:05:50.270
the notes list screen where they can see
 

00:05:50.270 --> 00:05:51.850
the notes list screen where they can see
their newly added note along with any

00:05:51.850 --> 00:05:51.860
their newly added note along with any
 

00:05:51.860 --> 00:05:56.020
their newly added note along with any
other notes that previously existed so

00:05:56.020 --> 00:05:56.030
other notes that previously existed so
 

00:05:56.030 --> 00:05:57.600
other notes that previously existed so
coming back to our workflow for a moment

00:05:57.600 --> 00:05:57.610
coming back to our workflow for a moment
 

00:05:57.610 --> 00:05:59.830
coming back to our workflow for a moment
remember that we start with a failing UI

00:05:59.830 --> 00:05:59.840
remember that we start with a failing UI
 

00:05:59.840 --> 00:06:03.280
remember that we start with a failing UI
test so let's take a look at how this

00:06:03.280 --> 00:06:03.290
test so let's take a look at how this
 

00:06:03.290 --> 00:06:05.440
test so let's take a look at how this
test would look like using espresso the

00:06:05.440 --> 00:06:05.450
test would look like using espresso the
 

00:06:05.450 --> 00:06:09.940
test would look like using espresso the
UI testing framework the first step is

00:06:09.940 --> 00:06:09.950
UI testing framework the first step is
 

00:06:09.950 --> 00:06:14.409
UI testing framework the first step is
to click on the add node button then we

00:06:14.409 --> 00:06:14.419
to click on the add node button then we
 

00:06:14.419 --> 00:06:16.780
to click on the add node button then we
enter the title and description and

00:06:16.780 --> 00:06:16.790
enter the title and description and
 

00:06:16.790 --> 00:06:19.690
enter the title and description and
click Save before returning to the notes

00:06:19.690 --> 00:06:19.700
click Save before returning to the notes
 

00:06:19.700 --> 00:06:20.950
click Save before returning to the notes
list screen and here we're going to

00:06:20.950 --> 00:06:20.960
list screen and here we're going to
 

00:06:20.960 --> 00:06:22.900
list screen and here we're going to
verify that the note that we just added

00:06:22.900 --> 00:06:22.910
verify that the note that we just added
 

00:06:22.910 --> 00:06:27.190
verify that the note that we just added
actually shows up now remember with

00:06:27.190 --> 00:06:27.200
actually shows up now remember with
 

00:06:27.200 --> 00:06:28.240
actually shows up now remember with
test-driven development

00:06:28.240 --> 00:06:28.250
test-driven development
 

00:06:28.250 --> 00:06:29.800
test-driven development
we're not implement the code just yet

00:06:29.800 --> 00:06:29.810
we're not implement the code just yet
 

00:06:29.810 --> 00:06:32.409
we're not implement the code just yet
and all we have to do is implement

00:06:32.409 --> 00:06:32.419
and all we have to do is implement
 

00:06:32.419 --> 00:06:34.839
and all we have to do is implement
enough of the application to satisfy the

00:06:34.839 --> 00:06:34.849
enough of the application to satisfy the
 

00:06:34.849 --> 00:06:37.390
enough of the application to satisfy the
specification of our tests so an empty

00:06:37.390 --> 00:06:37.400
specification of our tests so an empty
 

00:06:37.400 --> 00:06:39.279
specification of our tests so an empty
activity and just the resources that we

00:06:39.279 --> 00:06:39.289
activity and just the resources that we
 

00:06:39.289 --> 00:06:40.060
activity and just the resources that we
need will

00:06:40.060 --> 00:06:40.070
need will
 

00:06:40.070 --> 00:06:43.120
need will
fyz once we have that we can run our

00:06:43.120 --> 00:06:43.130
fyz once we have that we can run our
 

00:06:43.130 --> 00:06:45.520
fyz once we have that we can run our
test and we'll see it'll fail now we

00:06:45.520 --> 00:06:45.530
test and we'll see it'll fail now we
 

00:06:45.530 --> 00:06:50.070
test and we'll see it'll fail now we
have to implement this feature so

00:06:50.070 --> 00:06:50.080
 
 

00:06:50.080 --> 00:06:52.420
 
applications are built up of many small

00:06:52.420 --> 00:06:52.430
applications are built up of many small
 

00:06:52.430 --> 00:06:55.330
applications are built up of many small
units these are small highly focused

00:06:55.330 --> 00:06:55.340
units these are small highly focused
 

00:06:55.340 --> 00:06:58.180
units these are small highly focused
specialized components that do one thing

00:06:58.180 --> 00:06:58.190
specialized components that do one thing
 

00:06:58.190 --> 00:07:00.760
specialized components that do one thing
and they do it well collections these

00:07:00.760 --> 00:07:00.770
and they do it well collections these
 

00:07:00.770 --> 00:07:02.380
and they do it well collections these
small units are then assembled together

00:07:02.380 --> 00:07:02.390
small units are then assembled together
 

00:07:02.390 --> 00:07:04.360
small units are then assembled together
so that they're collaborations will

00:07:04.360 --> 00:07:04.370
so that they're collaborations will
 

00:07:04.370 --> 00:07:10.210
so that they're collaborations will
satisfy our feature let's take a moment

00:07:10.210 --> 00:07:10.220
satisfy our feature let's take a moment
 

00:07:10.220 --> 00:07:12.130
satisfy our feature let's take a moment
to summarize the key characteristics of

00:07:12.130 --> 00:07:12.140
to summarize the key characteristics of
 

00:07:12.140 --> 00:07:16.780
to summarize the key characteristics of
make up a good unit test as well as the

00:07:16.780 --> 00:07:16.790
make up a good unit test as well as the
 

00:07:16.790 --> 00:07:18.580
make up a good unit test as well as the
normal conditions you wanting to start

00:07:18.580 --> 00:07:18.590
normal conditions you wanting to start
 

00:07:18.590 --> 00:07:20.770
normal conditions you wanting to start
you wanting to test your failure

00:07:20.770 --> 00:07:20.780
you wanting to test your failure
 

00:07:20.780 --> 00:07:23.770
you wanting to test your failure
conditions invalid inputs and boundary

00:07:23.770 --> 00:07:23.780
conditions invalid inputs and boundary
 

00:07:23.780 --> 00:07:26.080
conditions invalid inputs and boundary
conditions you can end up writing a lot

00:07:26.080 --> 00:07:26.090
conditions you can end up writing a lot
 

00:07:26.090 --> 00:07:31.060
conditions you can end up writing a lot
of unit tests unit tests must always

00:07:31.060 --> 00:07:31.070
of unit tests unit tests must always
 

00:07:31.070 --> 00:07:33.340
of unit tests unit tests must always
give you the same result every time so

00:07:33.340 --> 00:07:33.350
give you the same result every time so
 

00:07:33.350 --> 00:07:35.140
give you the same result every time so
avoid depending on things that might

00:07:35.140 --> 00:07:35.150
avoid depending on things that might
 

00:07:35.150 --> 00:07:38.140
avoid depending on things that might
change for example an external server or

00:07:38.140 --> 00:07:38.150
change for example an external server or
 

00:07:38.150 --> 00:07:40.240
change for example an external server or
the current time of date because this is

00:07:40.240 --> 00:07:40.250
the current time of date because this is
 

00:07:40.250 --> 00:07:41.980
the current time of date because this is
going to bring flakiness into your unit

00:07:41.980 --> 00:07:41.990
going to bring flakiness into your unit
 

00:07:41.990 --> 00:07:46.840
going to bring flakiness into your unit
tests unit tests should exercise one

00:07:46.840 --> 00:07:46.850
tests unit tests should exercise one
 

00:07:46.850 --> 00:07:49.960
tests unit tests should exercise one
specific aspect of your code at a time

00:07:49.960 --> 00:07:49.970
specific aspect of your code at a time
 

00:07:49.970 --> 00:07:52.540
specific aspect of your code at a time
you wanting to see that a failure in a

00:07:52.540 --> 00:07:52.550
you wanting to see that a failure in a
 

00:07:52.550 --> 00:07:54.160
you wanting to see that a failure in a
unit test will lead you very quickly to

00:07:54.160 --> 00:07:54.170
unit test will lead you very quickly to
 

00:07:54.170 --> 00:07:58.300
unit test will lead you very quickly to
an actual bug in your code and when you

00:07:58.300 --> 00:07:58.310
an actual bug in your code and when you
 

00:07:58.310 --> 00:08:00.340
an actual bug in your code and when you
write unit tests avoid making too many

00:08:00.340 --> 00:08:00.350
write unit tests avoid making too many
 

00:08:00.350 --> 00:08:01.660
write unit tests avoid making too many
assumptions on the actual implementation

00:08:01.660 --> 00:08:01.670
assumptions on the actual implementation
 

00:08:01.670 --> 00:08:04.600
assumptions on the actual implementation
of your code you want your unit has to

00:08:04.600 --> 00:08:04.610
of your code you want your unit has to
 

00:08:04.610 --> 00:08:06.280
of your code you want your unit has to
test behavior that way you avoid

00:08:06.280 --> 00:08:06.290
test behavior that way you avoid
 

00:08:06.290 --> 00:08:07.780
test behavior that way you avoid
rewriting your tests when your

00:08:07.780 --> 00:08:07.790
rewriting your tests when your
 

00:08:07.790 --> 00:08:13.060
rewriting your tests when your
implementations changing and one of the

00:08:13.060 --> 00:08:13.070
implementations changing and one of the
 

00:08:13.070 --> 00:08:14.590
implementations changing and one of the
most important aspects of unit test is

00:08:14.590 --> 00:08:14.600
most important aspects of unit test is
 

00:08:14.600 --> 00:08:16.210
most important aspects of unit test is
they've got to be fast especially

00:08:16.210 --> 00:08:16.220
they've got to be fast especially
 

00:08:16.220 --> 00:08:17.740
they've got to be fast especially
because you're writing so many of them

00:08:17.740 --> 00:08:17.750
because you're writing so many of them
 

00:08:17.750 --> 00:08:20.590
because you're writing so many of them
and you're in TDD workflow running them

00:08:20.590 --> 00:08:20.600
and you're in TDD workflow running them
 

00:08:20.600 --> 00:08:23.560
and you're in TDD workflow running them
rapidly and it would it would be

00:08:23.560 --> 00:08:23.570
rapidly and it would it would be
 

00:08:23.570 --> 00:08:25.240
rapidly and it would it would be
terrible if they were you were

00:08:25.240 --> 00:08:25.250
terrible if they were you were
 

00:08:25.250 --> 00:08:27.130
terrible if they were you were
discouraged from writing tests or

00:08:27.130 --> 00:08:27.140
discouraged from writing tests or
 

00:08:27.140 --> 00:08:29.200
discouraged from writing tests or
refactoring your code because of the

00:08:29.200 --> 00:08:29.210
refactoring your code because of the
 

00:08:29.210 --> 00:08:32.290
refactoring your code because of the
pain in the execution time of those

00:08:32.290 --> 00:08:32.300
pain in the execution time of those
 

00:08:32.300 --> 00:08:36.850
pain in the execution time of those
tests and finally unit tests are an

00:08:36.850 --> 00:08:36.860
tests and finally unit tests are an
 

00:08:36.860 --> 00:08:38.409
tests and finally unit tests are an
excellent source of documentation and

00:08:38.409 --> 00:08:38.419
excellent source of documentation and
 

00:08:38.419 --> 00:08:40.240
excellent source of documentation and
the way that's constantly evolving with

00:08:40.240 --> 00:08:40.250
the way that's constantly evolving with
 

00:08:40.250 --> 00:08:42.580
the way that's constantly evolving with
your code as it changes unlike static

00:08:42.580 --> 00:08:42.590
your code as it changes unlike static
 

00:08:42.590 --> 00:08:48.420
your code as it changes unlike static
documents that will stagnate over time

00:08:48.420 --> 00:08:48.430
 
 

00:08:48.430 --> 00:08:50.560
 
let's write a unit test for our add

00:08:50.560 --> 00:08:50.570
let's write a unit test for our add
 

00:08:50.570 --> 00:08:53.230
let's write a unit test for our add
notes activity this activity is going to

00:08:53.230 --> 00:08:53.240
notes activity this activity is going to
 

00:08:53.240 --> 00:08:53.800
notes activity this activity is going to
take in

00:08:53.800 --> 00:08:53.810
take in
 

00:08:53.810 --> 00:08:54.940
take in
user input and then we're going to

00:08:54.940 --> 00:08:54.950
user input and then we're going to
 

00:08:54.950 --> 00:08:56.530
user input and then we're going to
persist it to local storage on the

00:08:56.530 --> 00:08:56.540
persist it to local storage on the
 

00:08:56.540 --> 00:09:01.060
persist it to local storage on the
device okay so we're going to create the

00:09:01.060 --> 00:09:01.070
device okay so we're going to create the
 

00:09:01.070 --> 00:09:03.040
device okay so we're going to create the
add note activity class and the select

00:09:03.040 --> 00:09:03.050
add note activity class and the select
 

00:09:03.050 --> 00:09:04.930
add note activity class and the select
stand activity which is an android

00:09:04.930 --> 00:09:04.940
stand activity which is an android
 

00:09:04.940 --> 00:09:07.780
stand activity which is an android
framework class it has a view which is

00:09:07.780 --> 00:09:07.790
framework class it has a view which is
 

00:09:07.790 --> 00:09:09.329
framework class it has a view which is
going to be inflated with a layout and

00:09:09.329 --> 00:09:09.339
going to be inflated with a layout and
 

00:09:09.339 --> 00:09:11.710
going to be inflated with a layout and
the user will enter their data here and

00:09:11.710 --> 00:09:11.720
the user will enter their data here and
 

00:09:11.720 --> 00:09:13.090
the user will enter their data here and
then we're going to persist that note

00:09:13.090 --> 00:09:13.100
then we're going to persist that note
 

00:09:13.100 --> 00:09:15.310
then we're going to persist that note
into Android shared preferences

00:09:15.310 --> 00:09:15.320
into Android shared preferences
 

00:09:15.320 --> 00:09:21.010
into Android shared preferences
mechanism so it's conceivable that as

00:09:21.010 --> 00:09:21.020
mechanism so it's conceivable that as
 

00:09:21.020 --> 00:09:22.600
mechanism so it's conceivable that as
our application evolves so does our

00:09:22.600 --> 00:09:22.610
our application evolves so does our
 

00:09:22.610 --> 00:09:25.060
our application evolves so does our
requirement and perhaps our storage

00:09:25.060 --> 00:09:25.070
requirement and perhaps our storage
 

00:09:25.070 --> 00:09:27.490
requirement and perhaps our storage
requirements evolve to persist the notes

00:09:27.490 --> 00:09:27.500
requirements evolve to persist the notes
 

00:09:27.500 --> 00:09:30.040
requirements evolve to persist the notes
on to cloud storage and we have to build

00:09:30.040 --> 00:09:30.050
on to cloud storage and we have to build
 

00:09:30.050 --> 00:09:32.980
on to cloud storage and we have to build
some kind of synchronization mechanism

00:09:32.980 --> 00:09:32.990
some kind of synchronization mechanism
 

00:09:32.990 --> 00:09:35.079
some kind of synchronization mechanism
for local storage for the offline use

00:09:35.079 --> 00:09:35.089
for local storage for the offline use
 

00:09:35.089 --> 00:09:38.050
for local storage for the offline use
case and in these cases we see

00:09:38.050 --> 00:09:38.060
case and in these cases we see
 

00:09:38.060 --> 00:09:40.030
case and in these cases we see
opportunities for abstraction we might

00:09:40.030 --> 00:09:40.040
opportunities for abstraction we might
 

00:09:40.040 --> 00:09:42.579
opportunities for abstraction we might
in this example see that we can extract

00:09:42.579 --> 00:09:42.589
in this example see that we can extract
 

00:09:42.589 --> 00:09:45.700
in this example see that we can extract
a notes repository and however one of

00:09:45.700 --> 00:09:45.710
a notes repository and however one of
 

00:09:45.710 --> 00:09:47.290
a notes repository and however one of
the key aspects of test-driven

00:09:47.290 --> 00:09:47.300
the key aspects of test-driven
 

00:09:47.300 --> 00:09:49.840
the key aspects of test-driven
development is that we only start by

00:09:49.840 --> 00:09:49.850
development is that we only start by
 

00:09:49.850 --> 00:09:51.610
development is that we only start by
writing the simplest case first and then

00:09:51.610 --> 00:09:51.620
writing the simplest case first and then
 

00:09:51.620 --> 00:09:53.500
writing the simplest case first and then
we iterate so we're going to resist the

00:09:53.500 --> 00:09:53.510
we iterate so we're going to resist the
 

00:09:53.510 --> 00:09:57.640
we iterate so we're going to resist the
temptation to do this early let's take a

00:09:57.640 --> 00:09:57.650
temptation to do this early let's take a
 

00:09:57.650 --> 00:10:01.360
temptation to do this early let's take a
look at a sample of what an idealized

00:10:01.360 --> 00:10:01.370
look at a sample of what an idealized
 

00:10:01.370 --> 00:10:03.490
look at a sample of what an idealized
unit test would look like they're

00:10:03.490 --> 00:10:03.500
unit test would look like they're
 

00:10:03.500 --> 00:10:07.240
unit test would look like they're
generally built up into three stages so

00:10:07.240 --> 00:10:07.250
generally built up into three stages so
 

00:10:07.250 --> 00:10:09.280
generally built up into three stages so
the first stage is you're setting the

00:10:09.280 --> 00:10:09.290
the first stage is you're setting the
 

00:10:09.290 --> 00:10:11.020
the first stage is you're setting the
conditions for the test and this

00:10:11.020 --> 00:10:11.030
conditions for the test and this
 

00:10:11.030 --> 00:10:12.810
conditions for the test and this
includes preparing the environment

00:10:12.810 --> 00:10:12.820
includes preparing the environment
 

00:10:12.820 --> 00:10:15.160
includes preparing the environment
setting up your dependencies with a

00:10:15.160 --> 00:10:15.170
setting up your dependencies with a
 

00:10:15.170 --> 00:10:18.280
setting up your dependencies with a
required state and preparing an input

00:10:18.280 --> 00:10:18.290
required state and preparing an input
 

00:10:18.290 --> 00:10:19.350
required state and preparing an input
data

00:10:19.350 --> 00:10:19.360
data
 

00:10:19.360 --> 00:10:21.910
data
next we'll exercise the code under test

00:10:21.910 --> 00:10:21.920
next we'll exercise the code under test
 

00:10:21.920 --> 00:10:24.850
next we'll exercise the code under test
before finally making assertions on the

00:10:24.850 --> 00:10:24.860
before finally making assertions on the
 

00:10:24.860 --> 00:10:28.090
before finally making assertions on the
results or the state so I like to

00:10:28.090 --> 00:10:28.100
results or the state so I like to
 

00:10:28.100 --> 00:10:29.790
results or the state so I like to
clearly separate each of these three

00:10:29.790 --> 00:10:29.800
clearly separate each of these three
 

00:10:29.800 --> 00:10:32.500
clearly separate each of these three
stages of the tests and bring the

00:10:32.500 --> 00:10:32.510
stages of the tests and bring the
 

00:10:32.510 --> 00:10:35.110
stages of the tests and bring the
pertinent aspects of each test like

00:10:35.110 --> 00:10:35.120
pertinent aspects of each test like
 

00:10:35.120 --> 00:10:36.670
pertinent aspects of each test like
front and center to make for really

00:10:36.670 --> 00:10:36.680
front and center to make for really
 

00:10:36.680 --> 00:10:42.880
front and center to make for really
readable test so up until now with the

00:10:42.880 --> 00:10:42.890
readable test so up until now with the
 

00:10:42.890 --> 00:10:44.949
readable test so up until now with the
Android platform you're writing your

00:10:44.949 --> 00:10:44.959
Android platform you're writing your
 

00:10:44.959 --> 00:10:47.020
Android platform you're writing your
unit tests using the mockable jar in

00:10:47.020 --> 00:10:47.030
unit tests using the mockable jar in
 

00:10:47.030 --> 00:10:48.760
unit tests using the mockable jar in
conjunction with a marking library such

00:10:48.760 --> 00:10:48.770
conjunction with a marking library such
 

00:10:48.770 --> 00:10:51.970
conjunction with a marking library such
as mojito and let's take a look at an

00:10:51.970 --> 00:10:51.980
as mojito and let's take a look at an
 

00:10:51.980 --> 00:10:55.800
as mojito and let's take a look at an
example of our test written with mojito

00:10:55.800 --> 00:10:55.810
example of our test written with mojito
 

00:10:55.810 --> 00:11:00.530
example of our test written with mojito
okay wow that's a lot of code

00:11:00.530 --> 00:11:00.540
okay wow that's a lot of code
 

00:11:00.540 --> 00:11:03.230
okay wow that's a lot of code
okay so because of we have so many

00:11:03.230 --> 00:11:03.240
okay so because of we have so many
 

00:11:03.240 --> 00:11:04.760
okay so because of we have so many
interactions with the android framework

00:11:04.760 --> 00:11:04.770
interactions with the android framework
 

00:11:04.770 --> 00:11:06.980
interactions with the android framework
and we're going to need to provide

00:11:06.980 --> 00:11:06.990
and we're going to need to provide
 

00:11:06.990 --> 00:11:09.350
and we're going to need to provide
stubbing behavior for all of them in

00:11:09.350 --> 00:11:09.360
stubbing behavior for all of them in
 

00:11:09.360 --> 00:11:11.810
stubbing behavior for all of them in
order just to make just to satisfy the

00:11:11.810 --> 00:11:11.820
order just to make just to satisfy the
 

00:11:11.820 --> 00:11:14.380
order just to make just to satisfy the
execution paths of our tests and

00:11:14.380 --> 00:11:14.390
execution paths of our tests and
 

00:11:14.390 --> 00:11:17.420
execution paths of our tests and
furthermore because Android uses a lot

00:11:17.420 --> 00:11:17.430
furthermore because Android uses a lot
 

00:11:17.430 --> 00:11:19.160
furthermore because Android uses a lot
of static methods we're forced to

00:11:19.160 --> 00:11:19.170
of static methods we're forced to
 

00:11:19.170 --> 00:11:21.290
of static methods we're forced to
introduce a second mocking library power

00:11:21.290 --> 00:11:21.300
introduce a second mocking library power
 

00:11:21.300 --> 00:11:23.180
introduce a second mocking library power
mark that will handle this special case

00:11:23.180 --> 00:11:23.190
mark that will handle this special case
 

00:11:23.190 --> 00:11:26.420
mark that will handle this special case
for us and there are also some pretty

00:11:26.420 --> 00:11:26.430
for us and there are also some pretty
 

00:11:26.430 --> 00:11:29.770
for us and there are also some pretty
bad code smells here let's take a look

00:11:29.770 --> 00:11:29.780
bad code smells here let's take a look
 

00:11:29.780 --> 00:11:32.590
bad code smells here let's take a look
you see we're forced to spy on the

00:11:32.590 --> 00:11:32.600
you see we're forced to spy on the
 

00:11:32.600 --> 00:11:35.720
you see we're forced to spy on the
activity under test and we're needing to

00:11:35.720 --> 00:11:35.730
activity under test and we're needing to
 

00:11:35.730 --> 00:11:37.760
activity under test and we're needing to
do this to modify its behavior and

00:11:37.760 --> 00:11:37.770
do this to modify its behavior and
 

00:11:37.770 --> 00:11:39.680
do this to modify its behavior and
stubbing it out and providing some no

00:11:39.680 --> 00:11:39.690
stubbing it out and providing some no
 

00:11:39.690 --> 00:11:42.050
stubbing it out and providing some no
ops so we're moving out of the realms of

00:11:42.050 --> 00:11:42.060
ops so we're moving out of the realms of
 

00:11:42.060 --> 00:11:46.220
ops so we're moving out of the realms of
blackbox testing here and finally at the

00:11:46.220 --> 00:11:46.230
blackbox testing here and finally at the
 

00:11:46.230 --> 00:11:48.380
blackbox testing here and finally at the
end we're making assertions about the

00:11:48.380 --> 00:11:48.390
end we're making assertions about the
 

00:11:48.390 --> 00:11:51.260
end we're making assertions about the
implementation details and if these

00:11:51.260 --> 00:11:51.270
implementation details and if these
 

00:11:51.270 --> 00:11:54.730
implementation details and if these
change our tests will need to change too

00:11:54.730 --> 00:11:54.740
change our tests will need to change too
 

00:11:54.740 --> 00:11:58.100
change our tests will need to change too
so remembering the characteristics of a

00:11:58.100 --> 00:11:58.110
so remembering the characteristics of a
 

00:11:58.110 --> 00:11:59.900
so remembering the characteristics of a
good unit test let's take a moment to

00:11:59.900 --> 00:11:59.910
good unit test let's take a moment to
 

00:11:59.910 --> 00:12:03.080
good unit test let's take a moment to
score this particular test well it is

00:12:03.080 --> 00:12:03.090
score this particular test well it is
 

00:12:03.090 --> 00:12:04.970
score this particular test well it is
very focused we're just testing the

00:12:04.970 --> 00:12:04.980
very focused we're just testing the
 

00:12:04.980 --> 00:12:07.120
very focused we're just testing the
happy path of our add notes flow and

00:12:07.120 --> 00:12:07.130
happy path of our add notes flow and
 

00:12:07.130 --> 00:12:10.190
happy path of our add notes flow and
it's certainly fast because it's running

00:12:10.190 --> 00:12:10.200
it's certainly fast because it's running
 

00:12:10.200 --> 00:12:13.850
it's certainly fast because it's running
on the local JVM however we were making

00:12:13.850 --> 00:12:13.860
on the local JVM however we were making
 

00:12:13.860 --> 00:12:15.470
on the local JVM however we were making
rather a lot of assumptions about the

00:12:15.470 --> 00:12:15.480
rather a lot of assumptions about the
 

00:12:15.480 --> 00:12:19.490
rather a lot of assumptions about the
implementation in that test and and with

00:12:19.490 --> 00:12:19.500
implementation in that test and and with
 

00:12:19.500 --> 00:12:21.170
implementation in that test and and with
this if any of our implementation

00:12:21.170 --> 00:12:21.180
this if any of our implementation
 

00:12:21.180 --> 00:12:23.240
this if any of our implementation
changes it's likely we'll need to

00:12:23.240 --> 00:12:23.250
changes it's likely we'll need to
 

00:12:23.250 --> 00:12:26.140
changes it's likely we'll need to
rewrite that test substantially and

00:12:26.140 --> 00:12:26.150
rewrite that test substantially and
 

00:12:26.150 --> 00:12:29.450
rewrite that test substantially and
finally all that excess boilerplate

00:12:29.450 --> 00:12:29.460
finally all that excess boilerplate
 

00:12:29.460 --> 00:12:31.490
finally all that excess boilerplate
stubbing is really distracting it's

00:12:31.490 --> 00:12:31.500
stubbing is really distracting it's
 

00:12:31.500 --> 00:12:33.500
stubbing is really distracting it's
distracting away from the key aspects of

00:12:33.500 --> 00:12:33.510
distracting away from the key aspects of
 

00:12:33.510 --> 00:12:35.630
distracting away from the key aspects of
the test the conditions the tests that

00:12:35.630 --> 00:12:35.640
the test the conditions the tests that
 

00:12:35.640 --> 00:12:41.390
the test the conditions the tests that
you're trying to document well luckily

00:12:41.390 --> 00:12:41.400
you're trying to document well luckily
 

00:12:41.400 --> 00:12:43.160
you're trying to document well luckily
there's a tool that helps address some

00:12:43.160 --> 00:12:43.170
there's a tool that helps address some
 

00:12:43.170 --> 00:12:46.430
there's a tool that helps address some
of these issues so introducing Robo

00:12:46.430 --> 00:12:46.440
of these issues so introducing Robo
 

00:12:46.440 --> 00:12:49.760
of these issues so introducing Robo
electric robolectric is an Android unit

00:12:49.760 --> 00:12:49.770
electric robolectric is an Android unit
 

00:12:49.770 --> 00:12:52.370
electric robolectric is an Android unit
testing tool that's open source that we

00:12:52.370 --> 00:12:52.380
testing tool that's open source that we
 

00:12:52.380 --> 00:12:55.550
testing tool that's open source that we
are actively contributing to and to tell

00:12:55.550 --> 00:12:55.560
are actively contributing to and to tell
 

00:12:55.560 --> 00:12:57.290
are actively contributing to and to tell
you more about how you can write great

00:12:57.290 --> 00:12:57.300
you more about how you can write great
 

00:12:57.300 --> 00:12:59.390
you more about how you can write great
tests with robolectric i'm going to hand

00:12:59.390 --> 00:12:59.400
tests with robolectric i'm going to hand
 

00:12:59.400 --> 00:13:00.890
tests with robolectric i'm going to hand
you over to christian williams the

00:13:00.890 --> 00:13:00.900
you over to christian williams the
 

00:13:00.900 --> 00:13:08.020
you over to christian williams the
original author of robolectric

00:13:08.020 --> 00:13:08.030
 
 

00:13:08.030 --> 00:13:10.850
 
thanks Jonathan it's awesome to see so

00:13:10.850 --> 00:13:10.860
thanks Jonathan it's awesome to see so
 

00:13:10.860 --> 00:13:13.640
thanks Jonathan it's awesome to see so
many people who are into Android testing

00:13:13.640 --> 00:13:13.650
many people who are into Android testing
 

00:13:13.650 --> 00:13:17.270
many people who are into Android testing
and TDD so yeah rub electric is this a

00:13:17.270 --> 00:13:17.280
and TDD so yeah rub electric is this a
 

00:13:17.280 --> 00:13:19.400
and TDD so yeah rub electric is this a
scrappy little open-source project that

00:13:19.400 --> 00:13:19.410
scrappy little open-source project that
 

00:13:19.410 --> 00:13:21.740
scrappy little open-source project that
I started hacking on back in the early

00:13:21.740 --> 00:13:21.750
I started hacking on back in the early
 

00:13:21.750 --> 00:13:23.420
I started hacking on back in the early
days of Android testing because I was

00:13:23.420 --> 00:13:23.430
days of Android testing because I was
 

00:13:23.430 --> 00:13:25.700
days of Android testing because I was
just super annoyed at how long it took

00:13:25.700 --> 00:13:25.710
just super annoyed at how long it took
 

00:13:25.710 --> 00:13:28.130
just super annoyed at how long it took
to to deploy and run tests on an

00:13:28.130 --> 00:13:28.140
to to deploy and run tests on an
 

00:13:28.140 --> 00:13:31.490
to to deploy and run tests on an
emulator and it's kind of been a side

00:13:31.490 --> 00:13:31.500
emulator and it's kind of been a side
 

00:13:31.500 --> 00:13:32.840
emulator and it's kind of been a side
project of a bunch of different people

00:13:32.840 --> 00:13:32.850
project of a bunch of different people
 

00:13:32.850 --> 00:13:34.940
project of a bunch of different people
until last year when I had the privilege

00:13:34.940 --> 00:13:34.950
until last year when I had the privilege
 

00:13:34.950 --> 00:13:37.400
until last year when I had the privilege
of joining my friend Jonathan at Google

00:13:37.400 --> 00:13:37.410
of joining my friend Jonathan at Google
 

00:13:37.410 --> 00:13:38.720
of joining my friend Jonathan at Google
where he was already working on

00:13:38.720 --> 00:13:38.730
where he was already working on
 

00:13:38.730 --> 00:13:40.040
where he was already working on
improving robolectric

00:13:40.040 --> 00:13:40.050
improving robolectric
 

00:13:40.050 --> 00:13:42.980
improving robolectric
for Google's of internal test Suites and

00:13:42.980 --> 00:13:42.990
for Google's of internal test Suites and
 

00:13:42.990 --> 00:13:45.140
for Google's of internal test Suites and
since then we've been we've been really

00:13:45.140 --> 00:13:45.150
since then we've been we've been really
 

00:13:45.150 --> 00:13:46.970
since then we've been we've been really
beefing up for electric and contributing

00:13:46.970 --> 00:13:46.980
beefing up for electric and contributing
 

00:13:46.980 --> 00:13:51.080
beefing up for electric and contributing
back to the open source project today

00:13:51.080 --> 00:13:51.090
back to the open source project today
 

00:13:51.090 --> 00:13:52.370
back to the open source project today
robolectric isn't an officially

00:13:52.370 --> 00:13:52.380
robolectric isn't an officially
 

00:13:52.380 --> 00:13:54.820
robolectric isn't an officially
supported part of the android plus

00:13:54.820 --> 00:13:54.830
supported part of the android plus
 

00:13:54.830 --> 00:13:57.890
supported part of the android plus
testing platform but we found that when

00:13:57.890 --> 00:13:57.900
testing platform but we found that when
 

00:13:57.900 --> 00:13:59.030
testing platform but we found that when
it's used correctly it can be a really

00:13:59.030 --> 00:13:59.040
it's used correctly it can be a really
 

00:13:59.040 --> 00:14:00.710
it's used correctly it can be a really
useful part of your testing strategy and

00:14:00.710 --> 00:14:00.720
useful part of your testing strategy and
 

00:14:00.720 --> 00:14:01.790
useful part of your testing strategy and
i'm going to show you a little bit about

00:14:01.790 --> 00:14:01.800
i'm going to show you a little bit about
 

00:14:01.800 --> 00:14:04.130
i'm going to show you a little bit about
how you can how you can do that too so

00:14:04.130 --> 00:14:04.140
how you can how you can do that too so
 

00:14:04.140 --> 00:14:05.480
how you can how you can do that too so
let's go back to our note student test

00:14:05.480 --> 00:14:05.490
let's go back to our note student test
 

00:14:05.490 --> 00:14:07.040
let's go back to our note student test
and see how we might approach it with

00:14:07.040 --> 00:14:07.050
and see how we might approach it with
 

00:14:07.050 --> 00:14:08.950
and see how we might approach it with
robolectric

00:14:08.950 --> 00:14:08.960
robolectric
 

00:14:08.960 --> 00:14:13.220
robolectric
so since rubb electric runs as a local

00:14:13.220 --> 00:14:13.230
so since rubb electric runs as a local
 

00:14:13.230 --> 00:14:14.840
so since rubb electric runs as a local
unit test it'll still be running in your

00:14:14.840 --> 00:14:14.850
unit test it'll still be running in your
 

00:14:14.850 --> 00:14:17.480
unit test it'll still be running in your
workstation rather than an emulator but

00:14:17.480 --> 00:14:17.490
workstation rather than an emulator but
 

00:14:17.490 --> 00:14:18.890
workstation rather than an emulator but
robolectric provides kind of a little

00:14:18.890 --> 00:14:18.900
robolectric provides kind of a little
 

00:14:18.900 --> 00:14:21.110
robolectric provides kind of a little
Android sandbox next to your test where

00:14:21.110 --> 00:14:21.120
Android sandbox next to your test where
 

00:14:21.120 --> 00:14:25.040
Android sandbox next to your test where
the actual SDK code is running you'll

00:14:25.040 --> 00:14:25.050
the actual SDK code is running you'll
 

00:14:25.050 --> 00:14:26.540
the actual SDK code is running you'll
have access to your activities your

00:14:26.540 --> 00:14:26.550
have access to your activities your
 

00:14:26.550 --> 00:14:29.120
have access to your activities your
layouts and views and resources and you

00:14:29.120 --> 00:14:29.130
layouts and views and resources and you
 

00:14:29.130 --> 00:14:31.070
layouts and views and resources and you
can generally just call most Android

00:14:31.070 --> 00:14:31.080
can generally just call most Android
 

00:14:31.080 --> 00:14:32.330
can generally just call most Android
methods and they'll kind of work like

00:14:32.330 --> 00:14:32.340
methods and they'll kind of work like
 

00:14:32.340 --> 00:14:35.180
methods and they'll kind of work like
you'd expect there are parts of the

00:14:35.180 --> 00:14:35.190
you'd expect there are parts of the
 

00:14:35.190 --> 00:14:37.730
you'd expect there are parts of the
android framework that rely on on native

00:14:37.730 --> 00:14:37.740
android framework that rely on on native
 

00:14:37.740 --> 00:14:41.510
android framework that rely on on native
code or call it hardware or interact

00:14:41.510 --> 00:14:41.520
code or call it hardware or interact
 

00:14:41.520 --> 00:14:43.370
code or call it hardware or interact
with external system services so for

00:14:43.370 --> 00:14:43.380
with external system services so for
 

00:14:43.380 --> 00:14:45.440
with external system services so for
that robolectric provides a sort of test

00:14:45.440 --> 00:14:45.450
that robolectric provides a sort of test
 

00:14:45.450 --> 00:14:48.560
that robolectric provides a sort of test
double that we call shadows and those

00:14:48.560 --> 00:14:48.570
double that we call shadows and those
 

00:14:48.570 --> 00:14:51.230
double that we call shadows and those
provide alternative limitations of that

00:14:51.230 --> 00:14:51.240
provide alternative limitations of that
 

00:14:51.240 --> 00:14:53.260
provide alternative limitations of that
code that's appropriate for unit testing

00:14:53.260 --> 00:14:53.270
code that's appropriate for unit testing
 

00:14:53.270 --> 00:14:56.720
code that's appropriate for unit testing
so remember that that test that we just

00:14:56.720 --> 00:14:56.730
so remember that that test that we just
 

00:14:56.730 --> 00:14:59.270
so remember that that test that we just
saw if it had like 20 lines of code of

00:14:59.270 --> 00:14:59.280
saw if it had like 20 lines of code of
 

00:14:59.280 --> 00:15:01.850
saw if it had like 20 lines of code of
like mock set up code let's see how that

00:15:01.850 --> 00:15:01.860
like mock set up code let's see how that
 

00:15:01.860 --> 00:15:05.030
like mock set up code let's see how that
looks in robolectric so that's a lot

00:15:05.030 --> 00:15:05.040
looks in robolectric so that's a lot
 

00:15:05.040 --> 00:15:06.110
looks in robolectric so that's a lot
less we've gotten rid of all the

00:15:06.110 --> 00:15:06.120
less we've gotten rid of all the
 

00:15:06.120 --> 00:15:07.540
less we've gotten rid of all the
boilerplate

00:15:07.540 --> 00:15:07.550
boilerplate
 

00:15:07.550 --> 00:15:10.280
boilerplate
the test is about half the size and much

00:15:10.280 --> 00:15:10.290
the test is about half the size and much
 

00:15:10.290 --> 00:15:12.440
the test is about half the size and much
more concise we're not forced to think

00:15:12.440 --> 00:15:12.450
more concise we're not forced to think
 

00:15:12.450 --> 00:15:13.760
more concise we're not forced to think
about the implementation details as

00:15:13.760 --> 00:15:13.770
about the implementation details as
 

00:15:13.770 --> 00:15:15.000
about the implementation details as
we're writing the test

00:15:15.000 --> 00:15:15.010
we're writing the test
 

00:15:15.010 --> 00:15:17.939
we're writing the test
which is quite nice Reb logic is going

00:15:17.939 --> 00:15:17.949
which is quite nice Reb logic is going
 

00:15:17.949 --> 00:15:19.290
which is quite nice Reb logic is going
to set up your application according to

00:15:19.290 --> 00:15:19.300
to set up your application according to
 

00:15:19.300 --> 00:15:21.840
to set up your application according to
your manifest and here we're asking it

00:15:21.840 --> 00:15:21.850
your manifest and here we're asking it
 

00:15:21.850 --> 00:15:23.550
your manifest and here we're asking it
to set up our activity it runs it

00:15:23.550 --> 00:15:23.560
to set up our activity it runs it
 

00:15:23.560 --> 00:15:25.620
to set up our activity it runs it
through the appropriate life cycle to

00:15:25.620 --> 00:15:25.630
through the appropriate life cycle to
 

00:15:25.630 --> 00:15:27.600
through the appropriate life cycle to
get it into the right state inflates

00:15:27.600 --> 00:15:27.610
get it into the right state inflates
 

00:15:27.610 --> 00:15:31.019
get it into the right state inflates
views all that stuff it that we expect

00:15:31.019 --> 00:15:31.029
views all that stuff it that we expect
 

00:15:31.029 --> 00:15:33.269
views all that stuff it that we expect
from on a device so we can just interact

00:15:33.269 --> 00:15:33.279
from on a device so we can just interact
 

00:15:33.279 --> 00:15:37.079
from on a device so we can just interact
with it as if you're on the device so we

00:15:37.079 --> 00:15:37.089
with it as if you're on the device so we
 

00:15:37.089 --> 00:15:39.509
with it as if you're on the device so we
add some texts and fields click on it

00:15:39.509 --> 00:15:39.519
add some texts and fields click on it
 

00:15:39.519 --> 00:15:42.180
add some texts and fields click on it
and assert that it adds the note to the

00:15:42.180 --> 00:15:42.190
and assert that it adds the note to the
 

00:15:42.190 --> 00:15:44.160
and assert that it adds the note to the
repository now notice that we're not

00:15:44.160 --> 00:15:44.170
repository now notice that we're not
 

00:15:44.170 --> 00:15:46.379
repository now notice that we're not
actually going as far as the UI test

00:15:46.379 --> 00:15:46.389
actually going as far as the UI test
 

00:15:46.389 --> 00:15:47.550
actually going as far as the UI test
that we saw that we wrote at the very

00:15:47.550 --> 00:15:47.560
that we saw that we wrote at the very
 

00:15:47.560 --> 00:15:48.840
that we saw that we wrote at the very
beginning

00:15:48.840 --> 00:15:48.850
beginning
 

00:15:48.850 --> 00:15:50.910
beginning
we're not asserting that the new note

00:15:50.910 --> 00:15:50.920
we're not asserting that the new note
 

00:15:50.920 --> 00:15:54.060
we're not asserting that the new note
appears on a view screen that would be

00:15:54.060 --> 00:15:54.070
appears on a view screen that would be
 

00:15:54.070 --> 00:15:58.009
appears on a view screen that would be
the job of another unit test

00:15:58.009 --> 00:15:58.019
 
 

00:15:58.019 --> 00:16:01.680
 
now I mentioned robolectric shadows they

00:16:01.680 --> 00:16:01.690
now I mentioned robolectric shadows they
 

00:16:01.690 --> 00:16:05.009
now I mentioned robolectric shadows they
actually give extended testing api's to

00:16:05.009 --> 00:16:05.019
actually give extended testing api's to
 

00:16:05.019 --> 00:16:07.980
actually give extended testing api's to
some Android classes that let us let us

00:16:07.980 --> 00:16:07.990
some Android classes that let us let us
 

00:16:07.990 --> 00:16:09.720
some Android classes that let us let us
query internal state and sometimes

00:16:09.720 --> 00:16:09.730
query internal state and sometimes
 

00:16:09.730 --> 00:16:11.870
query internal state and sometimes
change your behavior in this example

00:16:11.870 --> 00:16:11.880
change your behavior in this example
 

00:16:11.880 --> 00:16:14.550
change your behavior in this example
we're asking the application if any of

00:16:14.550 --> 00:16:14.560
we're asking the application if any of
 

00:16:14.560 --> 00:16:17.610
we're asking the application if any of
our activities requested that an intent

00:16:17.610 --> 00:16:17.620
our activities requested that an intent
 

00:16:17.620 --> 00:16:19.620
our activities requested that an intent
be launched during the test we could use

00:16:19.620 --> 00:16:19.630
be launched during the test we could use
 

00:16:19.630 --> 00:16:21.960
be launched during the test we could use
that twister that after saving a note to

00:16:21.960 --> 00:16:21.970
that twister that after saving a note to
 

00:16:21.970 --> 00:16:25.170
that twister that after saving a note to
the repository we're going to go to the

00:16:25.170 --> 00:16:25.180
the repository we're going to go to the
 

00:16:25.180 --> 00:16:28.410
the repository we're going to go to the
to the view notes activity similar

00:16:28.410 --> 00:16:28.420
to the view notes activity similar
 

00:16:28.420 --> 00:16:32.490
to the view notes activity similar
testing api's exists for simulating

00:16:32.490 --> 00:16:32.500
testing api's exists for simulating
 

00:16:32.500 --> 00:16:35.160
testing api's exists for simulating
Hardware responses or external services

00:16:35.160 --> 00:16:35.170
Hardware responses or external services
 

00:16:35.170 --> 00:16:39.150
Hardware responses or external services
things like that so at this point we

00:16:39.150 --> 00:16:39.160
things like that so at this point we
 

00:16:39.160 --> 00:16:41.910
things like that so at this point we
have a failing unit test and now we get

00:16:41.910 --> 00:16:41.920
have a failing unit test and now we get
 

00:16:41.920 --> 00:16:44.100
have a failing unit test and now we get
to we're ready for the easy part writing

00:16:44.100 --> 00:16:44.110
to we're ready for the easy part writing
 

00:16:44.110 --> 00:16:49.019
to we're ready for the easy part writing
the production code in the spirit of TDD

00:16:49.019 --> 00:16:49.029
the production code in the spirit of TDD
 

00:16:49.029 --> 00:16:51.870
the production code in the spirit of TDD
we're only going to write exactly as

00:16:51.870 --> 00:16:51.880
we're only going to write exactly as
 

00:16:51.880 --> 00:16:53.790
we're only going to write exactly as
much as as is needed to make the test

00:16:53.790 --> 00:16:53.800
much as as is needed to make the test
 

00:16:53.800 --> 00:16:57.720
much as as is needed to make the test
pass no more no speculative coding so we

00:16:57.720 --> 00:16:57.730
pass no more no speculative coding so we
 

00:16:57.730 --> 00:17:00.750
pass no more no speculative coding so we
inflate a layout at acetic Handler and

00:17:00.750 --> 00:17:00.760
inflate a layout at acetic Handler and
 

00:17:00.760 --> 00:17:02.790
inflate a layout at acetic Handler and
when the click happens we like for you

00:17:02.790 --> 00:17:02.800
when the click happens we like for you
 

00:17:02.800 --> 00:17:03.510
when the click happens we like for you
to note an editor

00:17:03.510 --> 00:17:03.520
to note an editor
 

00:17:03.520 --> 00:17:09.120
to note an editor
repository so now we can run the test

00:17:09.120 --> 00:17:09.130
repository so now we can run the test
 

00:17:09.130 --> 00:17:12.360
repository so now we can run the test
see a pass if there's some improvement

00:17:12.360 --> 00:17:12.370
see a pass if there's some improvement
 

00:17:12.370 --> 00:17:13.470
see a pass if there's some improvement
we can make to the code we'll go back

00:17:13.470 --> 00:17:13.480
we can make to the code we'll go back
 

00:17:13.480 --> 00:17:15.600
we can make to the code we'll go back
and refactor and then we repeat this is

00:17:15.600 --> 00:17:15.610
and refactor and then we repeat this is
 

00:17:15.610 --> 00:17:17.550
and refactor and then we repeat this is
where you get the thoroughness and Rev

00:17:17.550 --> 00:17:17.560
where you get the thoroughness and Rev
 

00:17:17.560 --> 00:17:18.900
where you get the thoroughness and Rev
electric is super handy for this because

00:17:18.900 --> 00:17:18.910
electric is super handy for this because
 

00:17:18.910 --> 00:17:20.970
electric is super handy for this because
it gives you like nice fast test runs

00:17:20.970 --> 00:17:20.980
it gives you like nice fast test runs
 

00:17:20.980 --> 00:17:26.970
it gives you like nice fast test runs
you can get into a comfy cycle so we

00:17:26.970 --> 00:17:26.980
you can get into a comfy cycle so we
 

00:17:26.980 --> 00:17:29.480
you can get into a comfy cycle so we
want to not discuss the happy path here

00:17:29.480 --> 00:17:29.490
want to not discuss the happy path here
 

00:17:29.490 --> 00:17:31.770
want to not discuss the happy path here
we're going to test all the different

00:17:31.770 --> 00:17:31.780
we're going to test all the different
 

00:17:31.780 --> 00:17:33.780
we're going to test all the different
cases we can there are codes likely to

00:17:33.780 --> 00:17:33.790
cases we can there are codes likely to
 

00:17:33.790 --> 00:17:35.820
cases we can there are codes likely to
encounter so for example input

00:17:35.820 --> 00:17:35.830
encounter so for example input
 

00:17:35.830 --> 00:17:38.790
encounter so for example input
validation and external conditions like

00:17:38.790 --> 00:17:38.800
validation and external conditions like
 

00:17:38.800 --> 00:17:43.130
validation and external conditions like
the network being down stuff like that

00:17:43.130 --> 00:17:43.140
 
 

00:17:43.140 --> 00:17:44.880
 
Rob let you can also help with

00:17:44.880 --> 00:17:44.890
Rob let you can also help with
 

00:17:44.890 --> 00:17:48.450
Rob let you can also help with
simulating device conditions that you'll

00:17:48.450 --> 00:17:48.460
simulating device conditions that you'll
 

00:17:48.460 --> 00:17:50.790
simulating device conditions that you'll
encounter for example you can specify

00:17:50.790 --> 00:17:50.800
encounter for example you can specify
 

00:17:50.800 --> 00:17:53.730
encounter for example you can specify
qualifiers at the notes or that the test

00:17:53.730 --> 00:17:53.740
qualifiers at the notes or that the test
 

00:17:53.740 --> 00:17:55.590
qualifiers at the notes or that the test
should run with here we're saying like a

00:17:55.590 --> 00:17:55.600
should run with here we're saying like a
 

00:17:55.600 --> 00:17:57.150
should run with here we're saying like a
certain screen size and orientation

00:17:57.150 --> 00:17:57.160
certain screen size and orientation
 

00:17:57.160 --> 00:18:00.300
certain screen size and orientation
which might change the layout a bit you

00:18:00.300 --> 00:18:00.310
which might change the layout a bit you
 

00:18:00.310 --> 00:18:02.400
which might change the layout a bit you
can ask your lecturer to run your test

00:18:02.400 --> 00:18:02.410
can ask your lecturer to run your test
 

00:18:02.410 --> 00:18:06.150
can ask your lecturer to run your test
under a specific SDK so we'll say jelly

00:18:06.150 --> 00:18:06.160
under a specific SDK so we'll say jelly
 

00:18:06.160 --> 00:18:08.970
under a specific SDK so we'll say jelly
bean here and it actually uses the SDK

00:18:08.970 --> 00:18:08.980
bean here and it actually uses the SDK
 

00:18:08.980 --> 00:18:13.140
bean here and it actually uses the SDK
code from that version and you can also

00:18:13.140 --> 00:18:13.150
code from that version and you can also
 

00:18:13.150 --> 00:18:14.730
code from that version and you can also
tell Rob Electric I want to run this

00:18:14.730 --> 00:18:14.740
tell Rob Electric I want to run this
 

00:18:14.740 --> 00:18:16.980
tell Rob Electric I want to run this
test under every SDK that you support or

00:18:16.980 --> 00:18:16.990
test under every SDK that you support or
 

00:18:16.990 --> 00:18:19.140
test under every SDK that you support or
some some range of them that you're

00:18:19.140 --> 00:18:19.150
some some range of them that you're
 

00:18:19.150 --> 00:18:21.810
some some range of them that you're
interested in and we support jelly bean

00:18:21.810 --> 00:18:21.820
interested in and we support jelly bean
 

00:18:21.820 --> 00:18:27.060
interested in and we support jelly bean
through oh right now so at Google we

00:18:27.060 --> 00:18:27.070
through oh right now so at Google we
 

00:18:27.070 --> 00:18:28.980
through oh right now so at Google we
rely really heavily on robolectric and

00:18:28.980 --> 00:18:28.990
rely really heavily on robolectric and
 

00:18:28.990 --> 00:18:31.020
rely really heavily on robolectric and
we're investing making it better

00:18:31.020 --> 00:18:31.030
we're investing making it better
 

00:18:31.030 --> 00:18:32.850
we're investing making it better
we've got dozens of apps including these

00:18:32.850 --> 00:18:32.860
we've got dozens of apps including these
 

00:18:32.860 --> 00:18:34.950
we've got dozens of apps including these
that have hundreds of thousands of unit

00:18:34.950 --> 00:18:34.960
that have hundreds of thousands of unit
 

00:18:34.960 --> 00:18:36.960
that have hundreds of thousands of unit
tests running internally so it's well

00:18:36.960 --> 00:18:36.970
tests running internally so it's well
 

00:18:36.970 --> 00:18:39.990
tests running internally so it's well
battle tested and we've also recently

00:18:39.990 --> 00:18:40.000
battle tested and we've also recently
 

00:18:40.000 --> 00:18:42.360
battle tested and we've also recently
started running the Android CTS which is

00:18:42.360 --> 00:18:42.370
started running the Android CTS which is
 

00:18:42.370 --> 00:18:44.970
started running the Android CTS which is
a dandy official Android test suite

00:18:44.970 --> 00:18:44.980
a dandy official Android test suite
 

00:18:44.980 --> 00:18:46.950
a dandy official Android test suite
again strobe electric and we're about 70

00:18:46.950 --> 00:18:46.960
again strobe electric and we're about 70
 

00:18:46.960 --> 00:18:48.420
again strobe electric and we're about 70
percent passing right now getting better

00:18:48.420 --> 00:18:48.430
percent passing right now getting better
 

00:18:48.430 --> 00:18:51.630
percent passing right now getting better
with every release so if you've used our

00:18:51.630 --> 00:18:51.640
with every release so if you've used our
 

00:18:51.640 --> 00:18:53.610
with every release so if you've used our
electric in the past and found that it's

00:18:53.610 --> 00:18:53.620
electric in the past and found that it's
 

00:18:53.620 --> 00:18:55.770
electric in the past and found that it's
come up short or if you're stuck in an

00:18:55.770 --> 00:18:55.780
come up short or if you're stuck in an
 

00:18:55.780 --> 00:18:57.510
come up short or if you're stuck in an
old version definitely recommend that

00:18:57.510 --> 00:18:57.520
old version definitely recommend that
 

00:18:57.520 --> 00:19:00.120
old version definitely recommend that
you you get up to the latest because

00:19:00.120 --> 00:19:00.130
you you get up to the latest because
 

00:19:00.130 --> 00:19:05.100
you you get up to the latest because
it's been a long way we've been working

00:19:05.100 --> 00:19:05.110
it's been a long way we've been working
 

00:19:05.110 --> 00:19:07.590
it's been a long way we've been working
on reducing friction and then in

00:19:07.590 --> 00:19:07.600
on reducing friction and then in
 

00:19:07.600 --> 00:19:08.850
on reducing friction and then in
integrating Rev electric with Android

00:19:08.850 --> 00:19:08.860
integrating Rev electric with Android
 

00:19:08.860 --> 00:19:09.510
integrating Rev electric with Android
toolchain

00:19:09.510 --> 00:19:09.520
toolchain
 

00:19:09.520 --> 00:19:11.320
toolchain
it works now very well with

00:19:11.320 --> 00:19:11.330
it works now very well with
 

00:19:11.330 --> 00:19:13.450
it works now very well with
with Android studio with Gradle and

00:19:13.450 --> 00:19:13.460
with Android studio with Gradle and
 

00:19:13.460 --> 00:19:16.390
with Android studio with Gradle and
we've got support for Basile Google's

00:19:16.390 --> 00:19:16.400
we've got support for Basile Google's
 

00:19:16.400 --> 00:19:18.520
we've got support for Basile Google's
into Google's own open-source build

00:19:18.520 --> 00:19:18.530
into Google's own open-source build
 

00:19:18.530 --> 00:19:23.410
into Google's own open-source build
system coming soon so robolectric isn't

00:19:23.410 --> 00:19:23.420
system coming soon so robolectric isn't
 

00:19:23.420 --> 00:19:26.110
system coming soon so robolectric isn't
a one-size-fits-all testing tool it's

00:19:26.110 --> 00:19:26.120
a one-size-fits-all testing tool it's
 

00:19:26.120 --> 00:19:27.700
a one-size-fits-all testing tool it's
fast but it's not a hundred percent

00:19:27.700 --> 00:19:27.710
fast but it's not a hundred percent
 

00:19:27.710 --> 00:19:29.590
fast but it's not a hundred percent
identical to Android in every way so you

00:19:29.590 --> 00:19:29.600
identical to Android in every way so you
 

00:19:29.600 --> 00:19:33.490
identical to Android in every way so you
want to use it judiciously as we said

00:19:33.490 --> 00:19:33.500
want to use it judiciously as we said
 

00:19:33.500 --> 00:19:35.800
want to use it judiciously as we said
before avoid writing unit tests that

00:19:35.800 --> 00:19:35.810
before avoid writing unit tests that
 

00:19:35.810 --> 00:19:37.780
before avoid writing unit tests that
link multiple activities together that's

00:19:37.780 --> 00:19:37.790
link multiple activities together that's
 

00:19:37.790 --> 00:19:39.490
link multiple activities together that's
not so much a unit test that's much

00:19:39.490 --> 00:19:39.500
not so much a unit test that's much
 

00:19:39.500 --> 00:19:42.010
not so much a unit test that's much
better for espresso if you find yourself

00:19:42.010 --> 00:19:42.020
better for espresso if you find yourself
 

00:19:42.020 --> 00:19:43.090
better for espresso if you find yourself
dealing with multiple threads

00:19:43.090 --> 00:19:43.100
dealing with multiple threads
 

00:19:43.100 --> 00:19:45.600
dealing with multiple threads
synchronization issues stuff like that

00:19:45.600 --> 00:19:45.610
synchronization issues stuff like that
 

00:19:45.610 --> 00:19:47.680
synchronization issues stuff like that
you're also probably not writing a unit

00:19:47.680 --> 00:19:47.690
you're also probably not writing a unit
 

00:19:47.690 --> 00:19:50.370
you're also probably not writing a unit
test so not good for electric and

00:19:50.370 --> 00:19:50.380
test so not good for electric and
 

00:19:50.380 --> 00:19:53.530
test so not good for electric and
particularly avoid using robolectric to

00:19:53.530 --> 00:19:53.540
particularly avoid using robolectric to
 

00:19:53.540 --> 00:19:57.940
particularly avoid using robolectric to
test reintegration with with android api

00:19:57.940 --> 00:19:57.950
test reintegration with with android api
 

00:19:57.950 --> 00:20:00.210
test reintegration with with android api
s and things like Google Play services

00:20:00.210 --> 00:20:00.220
s and things like Google Play services
 

00:20:00.220 --> 00:20:02.980
s and things like Google Play services
you really need to have higher level

00:20:02.980 --> 00:20:02.990
you really need to have higher level
 

00:20:02.990 --> 00:20:04.720
you really need to have higher level
tests to give you confidence that that's

00:20:04.720 --> 00:20:04.730
tests to give you confidence that that's
 

00:20:04.730 --> 00:20:07.600
tests to give you confidence that that's
working so now that we've got some

00:20:07.600 --> 00:20:07.610
working so now that we've got some
 

00:20:07.610 --> 00:20:09.430
working so now that we've got some
passing unit tests I'm going to have you

00:20:09.430 --> 00:20:09.440
passing unit tests I'm going to have you
 

00:20:09.440 --> 00:20:11.500
passing unit tests I'm going to have you
over to my colleague Stephan to talk

00:20:11.500 --> 00:20:11.510
over to my colleague Stephan to talk
 

00:20:11.510 --> 00:20:19.819
over to my colleague Stephan to talk
about our level testing

00:20:19.819 --> 00:20:19.829
 
 

00:20:19.829 --> 00:20:24.269
 
Thank You Christian so let's go back to

00:20:24.269 --> 00:20:24.279
Thank You Christian so let's go back to
 

00:20:24.279 --> 00:20:27.209
Thank You Christian so let's go back to
our developer workflow diagram and so at

00:20:27.209 --> 00:20:27.219
our developer workflow diagram and so at
 

00:20:27.219 --> 00:20:29.039
our developer workflow diagram and so at
this point we hopefully have a ton of

00:20:29.039 --> 00:20:29.049
this point we hopefully have a ton of
 

00:20:29.049 --> 00:20:31.049
this point we hopefully have a ton of
unit tests and they thoroughly test all

00:20:31.049 --> 00:20:31.059
unit tests and they thoroughly test all
 

00:20:31.059 --> 00:20:33.989
unit tests and they thoroughly test all
our business logic but let's switch

00:20:33.989 --> 00:20:33.999
our business logic but let's switch
 

00:20:33.999 --> 00:20:36.029
our business logic but let's switch
gears and try to see how we can actually

00:20:36.029 --> 00:20:36.039
gears and try to see how we can actually
 

00:20:36.039 --> 00:20:38.190
gears and try to see how we can actually
write some integration tests to see how

00:20:38.190 --> 00:20:38.200
write some integration tests to see how
 

00:20:38.200 --> 00:20:40.440
write some integration tests to see how
these units integrate and how they

00:20:40.440 --> 00:20:40.450
these units integrate and how they
 

00:20:40.450 --> 00:20:42.119
these units integrate and how they
actually integrate with Android and how

00:20:42.119 --> 00:20:42.129
actually integrate with Android and how
 

00:20:42.129 --> 00:20:45.869
actually integrate with Android and how
they run in a real environment so on

00:20:45.869 --> 00:20:45.879
they run in a real environment so on
 

00:20:45.879 --> 00:20:48.359
they run in a real environment so on
Android these tests are usually referred

00:20:48.359 --> 00:20:48.369
Android these tests are usually referred
 

00:20:48.369 --> 00:20:50.549
Android these tests are usually referred
to as instrumentation tests and I'm

00:20:50.549 --> 00:20:50.559
to as instrumentation tests and I'm
 

00:20:50.559 --> 00:20:52.199
to as instrumentation tests and I'm
pretty sure most of you have written an

00:20:52.199 --> 00:20:52.209
pretty sure most of you have written an
 

00:20:52.209 --> 00:20:54.629
pretty sure most of you have written an
instrumentation test before and even

00:20:54.629 --> 00:20:54.639
instrumentation test before and even
 

00:20:54.639 --> 00:20:57.119
instrumentation test before and even
though they look super simple on the

00:20:57.119 --> 00:20:57.129
though they look super simple on the
 

00:20:57.129 --> 00:20:59.999
though they look super simple on the
surface there's actually a lot going on

00:20:59.999 --> 00:21:00.009
surface there's actually a lot going on
 

00:21:00.009 --> 00:21:02.190
surface there's actually a lot going on
under the hood if you think about it you

00:21:02.190 --> 00:21:02.200
under the hood if you think about it you
 

00:21:02.200 --> 00:21:03.719
under the hood if you think about it you
have to compile the code you have to

00:21:03.719 --> 00:21:03.729
have to compile the code you have to
 

00:21:03.729 --> 00:21:05.729
have to compile the code you have to
process your resources you have to bring

00:21:05.729 --> 00:21:05.739
process your resources you have to bring
 

00:21:05.739 --> 00:21:08.339
process your resources you have to bring
up a full system image and then run your

00:21:08.339 --> 00:21:08.349
up a full system image and then run your
 

00:21:08.349 --> 00:21:11.489
up a full system image and then run your
tests and there's a lot of things that

00:21:11.489 --> 00:21:11.499
tests and there's a lot of things that
 

00:21:11.499 --> 00:21:13.589
tests and there's a lot of things that
go on on various levels of the Android

00:21:13.589 --> 00:21:13.599
go on on various levels of the Android
 

00:21:13.599 --> 00:21:17.849
go on on various levels of the Android
stack so these tests give you high

00:21:17.849 --> 00:21:17.859
stack so these tests give you high
 

00:21:17.859 --> 00:21:20.339
stack so these tests give you high
fidelity but as John was mentioning they

00:21:20.339 --> 00:21:20.349
fidelity but as John was mentioning they
 

00:21:20.349 --> 00:21:23.159
fidelity but as John was mentioning they
come at a cost which is they're slower

00:21:23.159 --> 00:21:23.169
come at a cost which is they're slower
 

00:21:23.169 --> 00:21:26.999
come at a cost which is they're slower
and sometimes they're more flaky than

00:21:26.999 --> 00:21:27.009
and sometimes they're more flaky than
 

00:21:27.009 --> 00:21:30.569
and sometimes they're more flaky than
unit tests so let's actually see how

00:21:30.569 --> 00:21:30.579
unit tests so let's actually see how
 

00:21:30.579 --> 00:21:31.469
unit tests so let's actually see how
this works in your day-to-day

00:21:31.469 --> 00:21:31.479
this works in your day-to-day
 

00:21:31.479 --> 00:21:34.409
this works in your day-to-day
development flow so let's say you're in

00:21:34.409 --> 00:21:34.419
development flow so let's say you're in
 

00:21:34.419 --> 00:21:36.930
development flow so let's say you're in
Android studio you've just written your

00:21:36.930 --> 00:21:36.940
Android studio you've just written your
 

00:21:36.940 --> 00:21:39.479
Android studio you've just written your
you know new espresso test and you hit

00:21:39.479 --> 00:21:39.489
you know new espresso test and you hit
 

00:21:39.489 --> 00:21:42.690
you know new espresso test and you hit
the Run button to run the test so the

00:21:42.690 --> 00:21:42.700
the Run button to run the test so the
 

00:21:42.700 --> 00:21:44.069
the Run button to run the test so the
first thing that Android studio is going

00:21:44.069 --> 00:21:44.079
first thing that Android studio is going
 

00:21:44.079 --> 00:21:46.109
first thing that Android studio is going
to do is it's going to install two apks

00:21:46.109 --> 00:21:46.119
to do is it's going to install two apks
 

00:21:46.119 --> 00:21:48.989
to do is it's going to install two apks
for you the test apk and the app under

00:21:48.989 --> 00:21:48.999
for you the test apk and the app under
 

00:21:48.999 --> 00:21:52.649
for you the test apk and the app under
test so now the test APK contains

00:21:52.649 --> 00:21:52.659
test so now the test APK contains
 

00:21:52.659 --> 00:21:54.479
test so now the test APK contains
Android JUnit runner it contains the

00:21:54.479 --> 00:21:54.489
Android JUnit runner it contains the
 

00:21:54.489 --> 00:21:57.349
Android JUnit runner it contains the
test cases and your test manifest and

00:21:57.349 --> 00:21:57.359
test cases and your test manifest and
 

00:21:57.359 --> 00:22:00.389
test cases and your test manifest and
then in order to run the test Android

00:22:00.389 --> 00:22:00.399
then in order to run the test Android
 

00:22:00.399 --> 00:22:02.759
then in order to run the test Android
studio calls under the hood adb shell am

00:22:02.759 --> 00:22:02.769
studio calls under the hood adb shell am
 

00:22:02.769 --> 00:22:05.099
studio calls under the hood adb shell am
instrument and then Android Jade runner

00:22:05.099 --> 00:22:05.109
instrument and then Android Jade runner
 

00:22:05.109 --> 00:22:08.310
instrument and then Android Jade runner
will use instrumentation to control your

00:22:08.310 --> 00:22:08.320
will use instrumentation to control your
 

00:22:08.320 --> 00:22:12.539
will use instrumentation to control your
app under test so what is

00:22:12.539 --> 00:22:12.549
app under test so what is
 

00:22:12.549 --> 00:22:15.659
app under test so what is
instrumentation and I think you guys may

00:22:15.659 --> 00:22:15.669
instrumentation and I think you guys may
 

00:22:15.669 --> 00:22:18.149
instrumentation and I think you guys may
have you guys may have noticed this it's

00:22:18.149 --> 00:22:18.159
have you guys may have noticed this it's
 

00:22:18.159 --> 00:22:20.999
have you guys may have noticed this it's
a top-level tag in your manifest and why

00:22:20.999 --> 00:22:21.009
a top-level tag in your manifest and why
 

00:22:21.009 --> 00:22:23.190
a top-level tag in your manifest and why
is that instrumentation is actually

00:22:23.190 --> 00:22:23.200
is that instrumentation is actually
 

00:22:23.200 --> 00:22:25.979
is that instrumentation is actually
something that you know it's used deeply

00:22:25.979 --> 00:22:25.989
something that you know it's used deeply
 

00:22:25.989 --> 00:22:28.079
something that you know it's used deeply
inside the android framework and it's

00:22:28.079 --> 00:22:28.089
inside the android framework and it's
 

00:22:28.089 --> 00:22:31.079
inside the android framework and it's
used to control the life cycle of your

00:22:31.079 --> 00:22:31.089
used to control the life cycle of your
 

00:22:31.089 --> 00:22:32.130
used to control the life cycle of your
activities for end

00:22:32.130 --> 00:22:32.140
activities for end
 

00:22:32.140 --> 00:22:35.360
activities for end
so if you think about it it's a perfect

00:22:35.360 --> 00:22:35.370
so if you think about it it's a perfect
 

00:22:35.370 --> 00:22:38.370
so if you think about it it's a perfect
interception point that we can use to

00:22:38.370 --> 00:22:38.380
interception point that we can use to
 

00:22:38.380 --> 00:22:40.350
interception point that we can use to
inject the test runner and that's why

00:22:40.350 --> 00:22:40.360
inject the test runner and that's why
 

00:22:40.360 --> 00:22:42.450
inject the test runner and that's why
Android drainage runner is not nothing

00:22:42.450 --> 00:22:42.460
Android drainage runner is not nothing
 

00:22:42.460 --> 00:22:46.919
Android drainage runner is not nothing
more or less than an instrumentation so

00:22:46.919 --> 00:22:46.929
more or less than an instrumentation so
 

00:22:46.929 --> 00:22:48.930
more or less than an instrumentation so
let's go a little bit deeper and see

00:22:48.930 --> 00:22:48.940
let's go a little bit deeper and see
 

00:22:48.940 --> 00:22:50.279
let's go a little bit deeper and see
what happens when Android studio

00:22:50.279 --> 00:22:50.289
what happens when Android studio
 

00:22:50.289 --> 00:22:54.029
what happens when Android studio
actually runs your tests so it runs adb

00:22:54.029 --> 00:22:54.039
actually runs your tests so it runs adb
 

00:22:54.039 --> 00:22:56.009
actually runs your tests so it runs adb
shell am instrument which will end up

00:22:56.009 --> 00:22:56.019
shell am instrument which will end up
 

00:22:56.019 --> 00:22:59.009
shell am instrument which will end up
calling out to activity manager activity

00:22:59.009 --> 00:22:59.019
calling out to activity manager activity
 

00:22:59.019 --> 00:23:01.139
calling out to activity manager activity
manager will then call at one point on

00:23:01.139 --> 00:23:01.149
manager will then call at one point on
 

00:23:01.149 --> 00:23:05.159
manager will then call at one point on
create on your instrumentation so now

00:23:05.159 --> 00:23:05.169
create on your instrumentation so now
 

00:23:05.169 --> 00:23:06.810
create on your instrumentation so now
that we know that Android Jayne Runner

00:23:06.810 --> 00:23:06.820
that we know that Android Jayne Runner
 

00:23:06.820 --> 00:23:09.769
that we know that Android Jayne Runner
is our instrumentation

00:23:09.769 --> 00:23:09.779
is our instrumentation
 

00:23:09.779 --> 00:23:12.450
is our instrumentation
at this point it will call on create on

00:23:12.450 --> 00:23:12.460
at this point it will call on create on
 

00:23:12.460 --> 00:23:15.360
at this point it will call on create on
the on the runner and then the runner is

00:23:15.360 --> 00:23:15.370
the on the runner and then the runner is
 

00:23:15.370 --> 00:23:17.970
the on the runner and then the runner is
gonna do a few things for you it's going

00:23:17.970 --> 00:23:17.980
gonna do a few things for you it's going
 

00:23:17.980 --> 00:23:20.250
gonna do a few things for you it's going
to collect all your tasks then it's

00:23:20.250 --> 00:23:20.260
to collect all your tasks then it's
 

00:23:20.260 --> 00:23:21.600
to collect all your tasks then it's
going to run all these tests

00:23:21.600 --> 00:23:21.610
going to run all these tests
 

00:23:21.610 --> 00:23:24.029
going to run all these tests
sequentially and then it's reporting

00:23:24.029 --> 00:23:24.039
sequentially and then it's reporting
 

00:23:24.039 --> 00:23:26.820
sequentially and then it's reporting
back the results one thing to note here

00:23:26.820 --> 00:23:26.830
back the results one thing to note here
 

00:23:26.830 --> 00:23:28.950
back the results one thing to note here
is that Android JUnit runner and you may

00:23:28.950 --> 00:23:28.960
is that Android JUnit runner and you may
 

00:23:28.960 --> 00:23:30.779
is that Android JUnit runner and you may
have noticed this runs in the same

00:23:30.779 --> 00:23:30.789
have noticed this runs in the same
 

00:23:30.789 --> 00:23:34.169
have noticed this runs in the same
process than your application and more

00:23:34.169 --> 00:23:34.179
process than your application and more
 

00:23:34.179 --> 00:23:36.330
process than your application and more
importantly if you usually use Android

00:23:36.330 --> 00:23:36.340
importantly if you usually use Android
 

00:23:36.340 --> 00:23:38.970
importantly if you usually use Android
join runner it runs all the tests in one

00:23:38.970 --> 00:23:38.980
join runner it runs all the tests in one
 

00:23:38.980 --> 00:23:41.389
join runner it runs all the tests in one
single instrumentation invocation

00:23:41.389 --> 00:23:41.399
single instrumentation invocation
 

00:23:41.399 --> 00:23:44.370
single instrumentation invocation
Android join each runner is heavily used

00:23:44.370 --> 00:23:44.380
Android join each runner is heavily used
 

00:23:44.380 --> 00:23:47.580
Android join each runner is heavily used
inside Google we run billions of tests

00:23:47.580 --> 00:23:47.590
inside Google we run billions of tests
 

00:23:47.590 --> 00:23:49.740
inside Google we run billions of tests
each month using Android JUnit runner

00:23:49.740 --> 00:23:49.750
each month using Android JUnit runner
 

00:23:49.750 --> 00:23:52.889
each month using Android JUnit runner
and while doing so we saw some

00:23:52.889 --> 00:23:52.899
and while doing so we saw some
 

00:23:52.899 --> 00:23:55.139
and while doing so we saw some
challenges that would that we face than

00:23:55.139 --> 00:23:55.149
challenges that would that we face than
 

00:23:55.149 --> 00:23:59.639
challenges that would that we face than
if we had to solve one thing that we see

00:23:59.639 --> 00:23:59.649
if we had to solve one thing that we see
 

00:23:59.649 --> 00:24:03.060
if we had to solve one thing that we see
a lot is shared state and I'm not

00:24:03.060 --> 00:24:03.070
a lot is shared state and I'm not
 

00:24:03.070 --> 00:24:04.620
a lot is shared state and I'm not
talking about the kind of like shared

00:24:04.620 --> 00:24:04.630
talking about the kind of like shared
 

00:24:04.630 --> 00:24:06.659
talking about the kind of like shared
state that you control and you that you

00:24:06.659 --> 00:24:06.669
state that you control and you that you
 

00:24:06.669 --> 00:24:08.759
state that you control and you that you
code in your app I'm talking about the

00:24:08.759 --> 00:24:08.769
code in your app I'm talking about the
 

00:24:08.769 --> 00:24:10.590
code in your app I'm talking about the
shared state that builds up on memory

00:24:10.590 --> 00:24:10.600
shared state that builds up on memory
 

00:24:10.600 --> 00:24:13.680
shared state that builds up on memory
builds up on disk and makes you it has

00:24:13.680 --> 00:24:13.690
builds up on disk and makes you it has
 

00:24:13.690 --> 00:24:16.440
builds up on disk and makes you it has
fail for you know no reason or you know

00:24:16.440 --> 00:24:16.450
fail for you know no reason or you know
 

00:24:16.450 --> 00:24:19.289
fail for you know no reason or you know
unpredictable conditions and this among

00:24:19.289 --> 00:24:19.299
unpredictable conditions and this among
 

00:24:19.299 --> 00:24:21.779
unpredictable conditions and this among
other things well at one point lead to

00:24:21.779 --> 00:24:21.789
other things well at one point lead to
 

00:24:21.789 --> 00:24:24.810
other things well at one point lead to
crashes but in the previous model that I

00:24:24.810 --> 00:24:24.820
crashes but in the previous model that I
 

00:24:24.820 --> 00:24:27.750
crashes but in the previous model that I
just showed you if if one of your tests

00:24:27.750 --> 00:24:27.760
just showed you if if one of your tests
 

00:24:27.760 --> 00:24:29.610
just showed you if if one of your tests
crashes your instrumentation it will

00:24:29.610 --> 00:24:29.620
crashes your instrumentation it will
 

00:24:29.620 --> 00:24:32.009
crashes your instrumentation it will
take the whole instrument the whole app

00:24:32.009 --> 00:24:32.019
take the whole instrument the whole app
 

00:24:32.019 --> 00:24:34.500
take the whole instrument the whole app
process with it and all the subsequent

00:24:34.500 --> 00:24:34.510
process with it and all the subsequent
 

00:24:34.510 --> 00:24:36.990
process with it and all the subsequent
tests will not run anymore and this is

00:24:36.990 --> 00:24:37.000
tests will not run anymore and this is
 

00:24:37.000 --> 00:24:38.789
tests will not run anymore and this is
obviously a problem for large test

00:24:38.789 --> 00:24:38.799
obviously a problem for large test
 

00:24:38.799 --> 00:24:41.039
obviously a problem for large test
suites similarly if you think about

00:24:41.039 --> 00:24:41.049
suites similarly if you think about
 

00:24:41.049 --> 00:24:43.110
suites similarly if you think about
debugging if you run a couple of

00:24:43.110 --> 00:24:43.120
debugging if you run a couple of
 

00:24:43.120 --> 00:24:45.390
debugging if you run a couple of
thousand tests in one invocation

00:24:45.390 --> 00:24:45.400
thousand tests in one invocation
 

00:24:45.400 --> 00:24:47.130
thousand tests in one invocation
think about what your Lochhead will look

00:24:47.130 --> 00:24:47.140
think about what your Lochhead will look
 

00:24:47.140 --> 00:24:49.680
think about what your Lochhead will look
like and when you have to go for it for

00:24:49.680 --> 00:24:49.690
like and when you have to go for it for
 

00:24:49.690 --> 00:24:53.940
like and when you have to go for it for
debugging so that's why inside of Google

00:24:53.940 --> 00:24:53.950
debugging so that's why inside of Google
 

00:24:53.950 --> 00:24:56.370
debugging so that's why inside of Google
we have taken a different approach so

00:24:56.370 --> 00:24:56.380
we have taken a different approach so
 

00:24:56.380 --> 00:24:58.890
we have taken a different approach so
inside of Google every test runs in

00:24:58.890 --> 00:24:58.900
inside of Google every test runs in
 

00:24:58.900 --> 00:25:01.280
inside of Google every test runs in
every test method runs in its own

00:25:01.280 --> 00:25:01.290
every test method runs in its own
 

00:25:01.290 --> 00:25:05.880
every test method runs in its own
instrumentation invocation so now you

00:25:05.880 --> 00:25:05.890
instrumentation invocation so now you
 

00:25:05.890 --> 00:25:07.770
instrumentation invocation so now you
can do this today right you can you know

00:25:07.770 --> 00:25:07.780
can do this today right you can you know
 

00:25:07.780 --> 00:25:09.900
can do this today right you can you know
make multiple adb calls you can use a

00:25:09.900 --> 00:25:09.910
make multiple adb calls you can use a
 

00:25:09.910 --> 00:25:11.670
make multiple adb calls you can use a
runner arc and maintain your custom

00:25:11.670 --> 00:25:11.680
runner arc and maintain your custom
 

00:25:11.680 --> 00:25:13.920
runner arc and maintain your custom
script but the problem is it might not

00:25:13.920 --> 00:25:13.930
script but the problem is it might not
 

00:25:13.930 --> 00:25:15.570
script but the problem is it might not
really integrate well with your

00:25:15.570 --> 00:25:15.580
really integrate well with your
 

00:25:15.580 --> 00:25:19.740
really integrate well with your
development environment so that's why

00:25:19.740 --> 00:25:19.750
development environment so that's why
 

00:25:19.750 --> 00:25:21.990
development environment so that's why
today I'm happy to announce the Android

00:25:21.990 --> 00:25:22.000
today I'm happy to announce the Android
 

00:25:22.000 --> 00:25:24.540
today I'm happy to announce the Android
test Orchestrator and the Android test

00:25:24.540 --> 00:25:24.550
test Orchestrator and the Android test
 

00:25:24.550 --> 00:25:26.910
test Orchestrator and the Android test
Orchestrator is a way that allows you to

00:25:26.910 --> 00:25:26.920
Orchestrator is a way that allows you to
 

00:25:26.920 --> 00:25:29.490
Orchestrator is a way that allows you to
run tests like we do in Google it's a

00:25:29.490 --> 00:25:29.500
run tests like we do in Google it's a
 

00:25:29.500 --> 00:25:31.650
run tests like we do in Google it's a
service ivk that runs in a background

00:25:31.650 --> 00:25:31.660
service ivk that runs in a background
 

00:25:31.660 --> 00:25:34.370
service ivk that runs in a background
and runs each test in a single

00:25:34.370 --> 00:25:34.380
and runs each test in a single
 

00:25:34.380 --> 00:25:38.850
and runs each test in a single
instrumentation invocation and this

00:25:38.850 --> 00:25:38.860
instrumentation invocation and this
 

00:25:38.860 --> 00:25:42.960
instrumentation invocation and this
obviously has benefits right there's no

00:25:42.960 --> 00:25:42.970
obviously has benefits right there's no
 

00:25:42.970 --> 00:25:44.190
obviously has benefits right there's no
shirt slate anymore

00:25:44.190 --> 00:25:44.200
shirt slate anymore
 

00:25:44.200 --> 00:25:45.780
shirt slate anymore
and in fact the Android test

00:25:45.780 --> 00:25:45.790
and in fact the Android test
 

00:25:45.790 --> 00:25:48.480
and in fact the Android test
Orchestrator runs p.m. clear before it

00:25:48.480 --> 00:25:48.490
Orchestrator runs p.m. clear before it
 

00:25:48.490 --> 00:25:52.950
Orchestrator runs p.m. clear before it
runs its test more so crashes are now

00:25:52.950 --> 00:25:52.960
runs its test more so crashes are now
 

00:25:52.960 --> 00:25:57.300
runs its test more so crashes are now
completely isolated because we have

00:25:57.300 --> 00:25:57.310
completely isolated because we have
 

00:25:57.310 --> 00:25:59.790
completely isolated because we have
single instrumentation invocations if a

00:25:59.790 --> 00:25:59.800
single instrumentation invocations if a
 

00:25:59.800 --> 00:26:02.220
single instrumentation invocations if a
crash happens all the subsequent tests

00:26:02.220 --> 00:26:02.230
crash happens all the subsequent tests
 

00:26:02.230 --> 00:26:05.250
crash happens all the subsequent tests
will still run and similarly for

00:26:05.250 --> 00:26:05.260
will still run and similarly for
 

00:26:05.260 --> 00:26:07.620
will still run and similarly for
debugging all the debugging information

00:26:07.620 --> 00:26:07.630
debugging all the debugging information
 

00:26:07.630 --> 00:26:09.180
debugging all the debugging information
that you collect and pull off the device

00:26:09.180 --> 00:26:09.190
that you collect and pull off the device
 

00:26:09.190 --> 00:26:11.510
that you collect and pull off the device
is now scoped to a particular test and

00:26:11.510 --> 00:26:11.520
is now scoped to a particular test and
 

00:26:11.520 --> 00:26:16.140
is now scoped to a particular test and
this is great and this is great and we

00:26:16.140 --> 00:26:16.150
this is great and this is great and we
 

00:26:16.150 --> 00:26:18.050
this is great and this is great and we
benefit a lot from it inside of Google

00:26:18.050 --> 00:26:18.060
benefit a lot from it inside of Google
 

00:26:18.060 --> 00:26:21.780
benefit a lot from it inside of Google
so let's see how it actually works so on

00:26:21.780 --> 00:26:21.790
so let's see how it actually works so on
 

00:26:21.790 --> 00:26:24.030
so let's see how it actually works so on
top of installing the test apk and upon

00:26:24.030 --> 00:26:24.040
top of installing the test apk and upon
 

00:26:24.040 --> 00:26:27.060
top of installing the test apk and upon
our test what we do now is we install a

00:26:27.060 --> 00:26:27.070
our test what we do now is we install a
 

00:26:27.070 --> 00:26:29.910
our test what we do now is we install a
third apk on the device and it's a

00:26:29.910 --> 00:26:29.920
third apk on the device and it's a
 

00:26:29.920 --> 00:26:31.850
third apk on the device and it's a
service apk running in the background

00:26:31.850 --> 00:26:31.860
service apk running in the background
 

00:26:31.860 --> 00:26:34.950
service apk running in the background
containing the orchestrator and then

00:26:34.950 --> 00:26:34.960
containing the orchestrator and then
 

00:26:34.960 --> 00:26:37.380
containing the orchestrator and then
instead of running multiple adb commands

00:26:37.380 --> 00:26:37.390
instead of running multiple adb commands
 

00:26:37.390 --> 00:26:40.200
instead of running multiple adb commands
we run a single ATB command but we don't

00:26:40.200 --> 00:26:40.210
we run a single ATB command but we don't
 

00:26:40.210 --> 00:26:42.300
we run a single ATB command but we don't
instrument the app under test we

00:26:42.300 --> 00:26:42.310
instrument the app under test we
 

00:26:42.310 --> 00:26:44.250
instrument the app under test we
instrument the orchestrator directly and

00:26:44.250 --> 00:26:44.260
instrument the orchestrator directly and
 

00:26:44.260 --> 00:26:46.380
instrument the orchestrator directly and
then the orchestrator is going to do all

00:26:46.380 --> 00:26:46.390
then the orchestrator is going to do all
 

00:26:46.390 --> 00:26:50.010
then the orchestrator is going to do all
its work on the device so it's going to

00:26:50.010 --> 00:26:50.020
its work on the device so it's going to
 

00:26:50.020 --> 00:26:51.570
its work on the device so it's going to
use android change runner to collect

00:26:51.570 --> 00:26:51.580
use android change runner to collect
 

00:26:51.580 --> 00:26:53.010
use android change runner to collect
your tests but then it's going to run

00:26:53.010 --> 00:26:53.020
your tests but then it's going to run
 

00:26:53.020 --> 00:26:55.310
your tests but then it's going to run
each of those tests in its own

00:26:55.310 --> 00:26:55.320
each of those tests in its own
 

00:26:55.320 --> 00:26:56.930
each of those tests in its own
invocation

00:26:56.930 --> 00:26:56.940
invocation
 

00:26:56.940 --> 00:27:01.399
invocation
and it's amazing and I'm pretty sure you

00:27:01.399 --> 00:27:01.409
and it's amazing and I'm pretty sure you
 

00:27:01.409 --> 00:27:03.259
and it's amazing and I'm pretty sure you
will you will like this a lot and it

00:27:03.259 --> 00:27:03.269
will you will like this a lot and it
 

00:27:03.269 --> 00:27:04.969
will you will like this a lot and it
will be available in the next Android

00:27:04.969 --> 00:27:04.979
will be available in the next Android
 

00:27:04.979 --> 00:27:07.609
will be available in the next Android
testing support library release and more

00:27:07.609 --> 00:27:07.619
testing support library release and more
 

00:27:07.619 --> 00:27:09.229
testing support library release and more
importantly we will have integration

00:27:09.229 --> 00:27:09.239
importantly we will have integration
 

00:27:09.239 --> 00:27:11.899
importantly we will have integration
with Android studio it will be available

00:27:11.899 --> 00:27:11.909
with Android studio it will be available
 

00:27:11.909 --> 00:27:13.700
with Android studio it will be available
in Gradle and we will also have

00:27:13.700 --> 00:27:13.710
in Gradle and we will also have
 

00:27:13.710 --> 00:27:15.560
in Gradle and we will also have
integration with firebase test lab

00:27:15.560 --> 00:27:15.570
integration with firebase test lab
 

00:27:15.570 --> 00:27:19.820
integration with firebase test lab
coming later this year so now that we

00:27:19.820 --> 00:27:19.830
coming later this year so now that we
 

00:27:19.830 --> 00:27:22.399
coming later this year so now that we
know how to run our tests let's actually

00:27:22.399 --> 00:27:22.409
know how to run our tests let's actually
 

00:27:22.409 --> 00:27:24.649
know how to run our tests let's actually
look at how we can write these

00:27:24.649 --> 00:27:24.659
look at how we can write these
 

00:27:24.659 --> 00:27:27.529
look at how we can write these
integration tests and usually if you

00:27:27.529 --> 00:27:27.539
integration tests and usually if you
 

00:27:27.539 --> 00:27:29.899
integration tests and usually if you
write a UI test on Android you're using

00:27:29.899 --> 00:27:29.909
write a UI test on Android you're using
 

00:27:29.909 --> 00:27:32.269
write a UI test on Android you're using
the espresso testing framework and as

00:27:32.269 --> 00:27:32.279
the espresso testing framework and as
 

00:27:32.279 --> 00:27:34.009
the espresso testing framework and as
you can see espresso has this like nice

00:27:34.009 --> 00:27:34.019
you can see espresso has this like nice
 

00:27:34.019 --> 00:27:37.369
you can see espresso has this like nice
and simple API and it actually works

00:27:37.369 --> 00:27:37.379
and simple API and it actually works
 

00:27:37.379 --> 00:27:40.279
and simple API and it actually works
pretty simple what it does is you give

00:27:40.279 --> 00:27:40.289
pretty simple what it does is you give
 

00:27:40.289 --> 00:27:42.619
pretty simple what it does is you give
us a view matcher and we find a view in

00:27:42.619 --> 00:27:42.629
us a view matcher and we find a view in
 

00:27:42.629 --> 00:27:44.119
us a view matcher and we find a view in
the hierarchy that matches that matcher

00:27:44.119 --> 00:27:44.129
the hierarchy that matches that matcher
 

00:27:44.129 --> 00:27:46.519
the hierarchy that matches that matcher
and then we either perform a view action

00:27:46.519 --> 00:27:46.529
and then we either perform a view action
 

00:27:46.529 --> 00:27:49.460
and then we either perform a view action
or check a view assertion and because

00:27:49.460 --> 00:27:49.470
or check a view assertion and because
 

00:27:49.470 --> 00:27:51.499
or check a view assertion and because
this API is so simple it's the perfect

00:27:51.499 --> 00:27:51.509
this API is so simple it's the perfect
 

00:27:51.509 --> 00:27:56.119
this API is so simple it's the perfect
tool to for fast TDD prototyping of UI

00:27:56.119 --> 00:27:56.129
tool to for fast TDD prototyping of UI
 

00:27:56.129 --> 00:27:59.509
tool to for fast TDD prototyping of UI
tests but in order to provide you such a

00:27:59.509 --> 00:27:59.519
tests but in order to provide you such a
 

00:27:59.519 --> 00:28:01.999
tests but in order to provide you such a
simple API there's a lot of things that

00:28:01.999 --> 00:28:02.009
simple API there's a lot of things that
 

00:28:02.009 --> 00:28:06.289
simple API there's a lot of things that
need to go on under the hood so let's

00:28:06.289 --> 00:28:06.299
need to go on under the hood so let's
 

00:28:06.299 --> 00:28:08.089
need to go on under the hood so let's
actually look how espresso let's look at

00:28:08.089 --> 00:28:08.099
actually look how espresso let's look at
 

00:28:08.099 --> 00:28:09.019
actually look how espresso let's look at
how spresso works

00:28:09.019 --> 00:28:09.029
how spresso works
 

00:28:09.029 --> 00:28:11.269
how spresso works
so when you call on view and give us

00:28:11.269 --> 00:28:11.279
so when you call on view and give us
 

00:28:11.279 --> 00:28:13.159
so when you call on view and give us
your matcher the first thing that we're

00:28:13.159 --> 00:28:13.169
your matcher the first thing that we're
 

00:28:13.169 --> 00:28:14.539
your matcher the first thing that we're
going to do is we're going to create a

00:28:14.539 --> 00:28:14.549
going to do is we're going to create a
 

00:28:14.549 --> 00:28:18.349
going to do is we're going to create a
view interaction for you and then the

00:28:18.349 --> 00:28:18.359
view interaction for you and then the
 

00:28:18.359 --> 00:28:20.839
view interaction for you and then the
next thing is we make sure that your app

00:28:20.839 --> 00:28:20.849
next thing is we make sure that your app
 

00:28:20.849 --> 00:28:23.570
next thing is we make sure that your app
is in an idle insane state before we are

00:28:23.570 --> 00:28:23.580
is in an idle insane state before we are
 

00:28:23.580 --> 00:28:25.609
is in an idle insane state before we are
ready to interact with it and this is

00:28:25.609 --> 00:28:25.619
ready to interact with it and this is
 

00:28:25.619 --> 00:28:27.139
ready to interact with it and this is
you can think of it this is at the core

00:28:27.139 --> 00:28:27.149
you can think of it this is at the core
 

00:28:27.149 --> 00:28:29.509
you can think of it this is at the core
of espresso and espresso is well-known

00:28:29.509 --> 00:28:29.519
of espresso and espresso is well-known
 

00:28:29.519 --> 00:28:31.159
of espresso and espresso is well-known
for it like synchronization guarantees

00:28:31.159 --> 00:28:31.169
for it like synchronization guarantees
 

00:28:31.169 --> 00:28:33.889
for it like synchronization guarantees
and the way we do it is we loop the

00:28:33.889 --> 00:28:33.899
and the way we do it is we loop the
 

00:28:33.899 --> 00:28:36.200
and the way we do it is we loop the
message queue until there are no

00:28:36.200 --> 00:28:36.210
message queue until there are no
 

00:28:36.210 --> 00:28:38.169
message queue until there are no
messages for a reasonable amount of time

00:28:38.169 --> 00:28:38.179
messages for a reasonable amount of time
 

00:28:38.179 --> 00:28:41.060
messages for a reasonable amount of time
we look at all your Eiling resources and

00:28:41.060 --> 00:28:41.070
we look at all your Eiling resources and
 

00:28:41.070 --> 00:28:43.519
we look at all your Eiling resources and
make sure they're idle and we also look

00:28:43.519 --> 00:28:43.529
make sure they're idle and we also look
 

00:28:43.529 --> 00:28:46.460
make sure they're idle and we also look
at async tasks to make sure there is no

00:28:46.460 --> 00:28:46.470
at async tasks to make sure there is no
 

00:28:46.470 --> 00:28:48.859
at async tasks to make sure there is no
background work running and only if we

00:28:48.859 --> 00:28:48.869
background work running and only if we
 

00:28:48.869 --> 00:28:50.539
background work running and only if we
know that your app is in a sane and

00:28:50.539 --> 00:28:50.549
know that your app is in a sane and
 

00:28:50.549 --> 00:28:52.330
know that your app is in a sane and
stable State and we're ready to interact

00:28:52.330 --> 00:28:52.340
stable State and we're ready to interact
 

00:28:52.340 --> 00:28:55.399
stable State and we're ready to interact
we're going to move on and then we're

00:28:55.399 --> 00:28:55.409
we're going to move on and then we're
 

00:28:55.409 --> 00:28:56.989
we're going to move on and then we're
going to traverse the view hierarchy and

00:28:56.989 --> 00:28:56.999
going to traverse the view hierarchy and
 

00:28:56.999 --> 00:28:58.489
going to traverse the view hierarchy and
find the view that matches your matcher

00:28:58.489 --> 00:28:58.499
find the view that matches your matcher
 

00:28:58.499 --> 00:29:01.879
find the view that matches your matcher
and once we have the view we then going

00:29:01.879 --> 00:29:01.889
and once we have the view we then going
 

00:29:01.889 --> 00:29:04.729
and once we have the view we then going
to perform a view action or a view

00:29:04.729 --> 00:29:04.739
to perform a view action or a view
 

00:29:04.739 --> 00:29:05.440
to perform a view action or a view
certian

00:29:05.440 --> 00:29:05.450
certian
 

00:29:05.450 --> 00:29:10.420
certian
and this is great so now let's circle

00:29:10.420 --> 00:29:10.430
and this is great so now let's circle
 

00:29:10.430 --> 00:29:12.370
and this is great so now let's circle
back to the test that we showed you in

00:29:12.370 --> 00:29:12.380
back to the test that we showed you in
 

00:29:12.380 --> 00:29:14.800
back to the test that we showed you in
the beginning and have a closer look now

00:29:14.800 --> 00:29:14.810
the beginning and have a closer look now
 

00:29:14.810 --> 00:29:16.960
the beginning and have a closer look now
that we know how its pressure works so

00:29:16.960 --> 00:29:16.970
that we know how its pressure works so
 

00:29:16.970 --> 00:29:19.990
that we know how its pressure works so
in the first line as you may remember we

00:29:19.990 --> 00:29:20.000
in the first line as you may remember we
 

00:29:20.000 --> 00:29:21.610
in the first line as you may remember we
try to click on the add node button and

00:29:21.610 --> 00:29:21.620
try to click on the add node button and
 

00:29:21.620 --> 00:29:23.980
try to click on the add node button and
here we just going to use a width ID

00:29:23.980 --> 00:29:23.990
here we just going to use a width ID
 

00:29:23.990 --> 00:29:26.380
here we just going to use a width ID
matter which is a simple matter that is

00:29:26.380 --> 00:29:26.390
matter which is a simple matter that is
 

00:29:26.390 --> 00:29:28.290
matter which is a simple matter that is
matching a view in the view hierarchy

00:29:28.290 --> 00:29:28.300
matching a view in the view hierarchy
 

00:29:28.300 --> 00:29:31.660
matching a view in the view hierarchy
according to its ID and next thing we

00:29:31.660 --> 00:29:31.670
according to its ID and next thing we
 

00:29:31.670 --> 00:29:33.430
according to its ID and next thing we
want to do is we want to click on the

00:29:33.430 --> 00:29:33.440
want to do is we want to click on the
 

00:29:33.440 --> 00:29:35.380
want to do is we want to click on the
view and we use a click view action for

00:29:35.380 --> 00:29:35.390
view and we use a click view action for
 

00:29:35.390 --> 00:29:39.460
view and we use a click view action for
this so now where it gets interesting is

00:29:39.460 --> 00:29:39.470
this so now where it gets interesting is
 

00:29:39.470 --> 00:29:42.820
this so now where it gets interesting is
the next line because on this line we

00:29:42.820 --> 00:29:42.830
the next line because on this line we
 

00:29:42.830 --> 00:29:43.990
the next line because on this line we
want to type the title and description

00:29:43.990 --> 00:29:44.000
want to type the title and description
 

00:29:44.000 --> 00:29:46.810
want to type the title and description
and we want to use a type text action

00:29:46.810 --> 00:29:46.820
and we want to use a type text action
 

00:29:46.820 --> 00:29:49.720
and we want to use a type text action
for that but here all the espresso

00:29:49.720 --> 00:29:49.730
for that but here all the espresso
 

00:29:49.730 --> 00:29:51.730
for that but here all the espresso
synchronisation guarantees will kick in

00:29:51.730 --> 00:29:51.740
synchronisation guarantees will kick in
 

00:29:51.740 --> 00:29:53.980
synchronisation guarantees will kick in
and only if we know that we're ready to

00:29:53.980 --> 00:29:53.990
and only if we know that we're ready to
 

00:29:53.990 --> 00:29:57.460
and only if we know that we're ready to
interact with your implication we're

00:29:57.460 --> 00:29:57.470
interact with your implication we're
 

00:29:57.470 --> 00:30:00.180
interact with your implication we're
going to invoke the type test action and

00:30:00.180 --> 00:30:00.190
going to invoke the type test action and
 

00:30:00.190 --> 00:30:01.810
going to invoke the type test action and
this is great

00:30:01.810 --> 00:30:01.820
this is great
 

00:30:01.820 --> 00:30:03.850
this is great
because it frees you from adding you

00:30:03.850 --> 00:30:03.860
because it frees you from adding you
 

00:30:03.860 --> 00:30:05.380
because it frees you from adding you
know additional boilerplate code and

00:30:05.380 --> 00:30:05.390
know additional boilerplate code and
 

00:30:05.390 --> 00:30:08.230
know additional boilerplate code and
additional slipping code to your test so

00:30:08.230 --> 00:30:08.240
additional slipping code to your test so
 

00:30:08.240 --> 00:30:10.540
additional slipping code to your test so
similarly we're going to save the node

00:30:10.540 --> 00:30:10.550
similarly we're going to save the node
 

00:30:10.550 --> 00:30:12.880
similarly we're going to save the node
and then we're going to verify that it's

00:30:12.880 --> 00:30:12.890
and then we're going to verify that it's
 

00:30:12.890 --> 00:30:15.310
and then we're going to verify that it's
displayed on screen and this is great

00:30:15.310 --> 00:30:15.320
displayed on screen and this is great
 

00:30:15.320 --> 00:30:18.040
displayed on screen and this is great
now we know how espresso works and we

00:30:18.040 --> 00:30:18.050
now we know how espresso works and we
 

00:30:18.050 --> 00:30:19.720
now we know how espresso works and we
know how it's a great tool to do

00:30:19.720 --> 00:30:19.730
know how it's a great tool to do
 

00:30:19.730 --> 00:30:23.290
know how it's a great tool to do
test-driven development and now I'm

00:30:23.290 --> 00:30:23.300
test-driven development and now I'm
 

00:30:23.300 --> 00:30:24.940
test-driven development and now I'm
going to hand over to Nick to talk a

00:30:24.940 --> 00:30:24.950
going to hand over to Nick to talk a
 

00:30:24.950 --> 00:30:26.560
going to hand over to Nick to talk a
little bit more on how you can improve

00:30:26.560 --> 00:30:26.570
little bit more on how you can improve
 

00:30:26.570 --> 00:30:29.860
little bit more on how you can improve
your UI test and how to improve your

00:30:29.860 --> 00:30:29.870
your UI test and how to improve your
 

00:30:29.870 --> 00:30:36.610
your UI test and how to improve your
large and medium testing strategy thank

00:30:36.610 --> 00:30:36.620
large and medium testing strategy thank
 

00:30:36.620 --> 00:30:37.870
large and medium testing strategy thank
you so fun

00:30:37.870 --> 00:30:37.880
you so fun
 

00:30:37.880 --> 00:30:40.960
you so fun
so one good attribute of a UI test is a

00:30:40.960 --> 00:30:40.970
so one good attribute of a UI test is a
 

00:30:40.970 --> 00:30:43.630
so one good attribute of a UI test is a
test that never sleeps so let's go back

00:30:43.630 --> 00:30:43.640
test that never sleeps so let's go back
 

00:30:43.640 --> 00:30:45.130
test that never sleeps so let's go back
to our example to illustrate this point

00:30:45.130 --> 00:30:45.140
to our example to illustrate this point
 

00:30:45.140 --> 00:30:47.830
to our example to illustrate this point
a little bit further so in our examples

00:30:47.830 --> 00:30:47.840
a little bit further so in our examples
 

00:30:47.840 --> 00:30:50.650
a little bit further so in our examples
you remember we have a note that we save

00:30:50.650 --> 00:30:50.660
you remember we have a note that we save
 

00:30:50.660 --> 00:30:52.360
you remember we have a note that we save
into memory which is pretty fast and

00:30:52.360 --> 00:30:52.370
into memory which is pretty fast and
 

00:30:52.370 --> 00:30:53.289
into memory which is pretty fast and
pretty reliable

00:30:53.289 --> 00:30:53.299
pretty reliable
 

00:30:53.299 --> 00:30:56.740
pretty reliable
however reliably reality as your app

00:30:56.740 --> 00:30:56.750
however reliably reality as your app
 

00:30:56.750 --> 00:30:58.299
however reliably reality as your app
grows you probably want to extend this

00:30:58.299 --> 00:30:58.309
grows you probably want to extend this
 

00:30:58.309 --> 00:31:00.850
grows you probably want to extend this
functionality and save your note to the

00:31:00.850 --> 00:31:00.860
functionality and save your note to the
 

00:31:00.860 --> 00:31:03.640
functionality and save your note to the
cloud or Google Drive for example so

00:31:03.640 --> 00:31:03.650
cloud or Google Drive for example so
 

00:31:03.650 --> 00:31:05.860
cloud or Google Drive for example so
when running our large end-to-end test

00:31:05.860 --> 00:31:05.870
when running our large end-to-end test
 

00:31:05.870 --> 00:31:07.750
when running our large end-to-end test
we want to use a real environment where

00:31:07.750 --> 00:31:07.760
we want to use a real environment where
 

00:31:07.760 --> 00:31:10.390
we want to use a real environment where
we hit the real server and depending on

00:31:10.390 --> 00:31:10.400
we hit the real server and depending on
 

00:31:10.400 --> 00:31:12.250
we hit the real server and depending on
your network connection this may take a

00:31:12.250 --> 00:31:12.260
your network connection this may take a
 

00:31:12.260 --> 00:31:14.230
your network connection this may take a
long time so you probably want to do is

00:31:14.230 --> 00:31:14.240
long time so you probably want to do is
 

00:31:14.240 --> 00:31:16.510
long time so you probably want to do is
in the background now the problem is now

00:31:16.510 --> 00:31:16.520
in the background now the problem is now
 

00:31:16.520 --> 00:31:18.340
in the background now the problem is now
is that espresso synchronization is not

00:31:18.340 --> 00:31:18.350
is that espresso synchronization is not
 

00:31:18.350 --> 00:31:20.320
is that espresso synchronization is not
aware of any of your long-running tasks

00:31:20.320 --> 00:31:20.330
aware of any of your long-running tasks
 

00:31:20.330 --> 00:31:24.340
aware of any of your long-running tasks
so this is somewhere that some where

00:31:24.340 --> 00:31:24.350
so this is somewhere that some where
 

00:31:24.350 --> 00:31:25.840
so this is somewhere that some where
developers will probably do something as

00:31:25.840 --> 00:31:25.850
developers will probably do something as
 

00:31:25.850 --> 00:31:27.250
developers will probably do something as
ugly as putting a thread sleep in their

00:31:27.250 --> 00:31:27.260
ugly as putting a thread sleep in their
 

00:31:27.260 --> 00:31:29.470
ugly as putting a thread sleep in their
code but what this presser is not

00:31:29.470 --> 00:31:29.480
code but what this presser is not
 

00:31:29.480 --> 00:31:31.000
code but what this presser is not
actually required because you can write

00:31:31.000 --> 00:31:31.010
actually required because you can write
 

00:31:31.010 --> 00:31:33.490
actually required because you can write
an idling resource where an idling

00:31:33.490 --> 00:31:33.500
an idling resource where an idling
 

00:31:33.500 --> 00:31:36.070
an idling resource where an idling
resource is a simple interface for you

00:31:36.070 --> 00:31:36.080
resource is a simple interface for you
 

00:31:36.080 --> 00:31:37.750
resource is a simple interface for you
as a developer to implement to teach

00:31:37.750 --> 00:31:37.760
as a developer to implement to teach
 

00:31:37.760 --> 00:31:39.549
as a developer to implement to teach
espresso synchronization of any of your

00:31:39.549 --> 00:31:39.559
espresso synchronization of any of your
 

00:31:39.559 --> 00:31:44.470
espresso synchronization of any of your
custom long running tasks of your app so

00:31:44.470 --> 00:31:44.480
custom long running tasks of your app so
 

00:31:44.480 --> 00:31:46.570
custom long running tasks of your app so
with this ionic resource we made our

00:31:46.570 --> 00:31:46.580
with this ionic resource we made our
 

00:31:46.580 --> 00:31:50.380
with this ionic resource we made our
large end-to-end test more reliable so

00:31:50.380 --> 00:31:50.390
large end-to-end test more reliable so
 

00:31:50.390 --> 00:31:51.669
large end-to-end test more reliable so
let's see how we can add some more

00:31:51.669 --> 00:31:51.679
let's see how we can add some more
 

00:31:51.679 --> 00:31:55.330
let's see how we can add some more
medium-sized stats to your test suite so

00:31:55.330 --> 00:31:55.340
medium-sized stats to your test suite so
 

00:31:55.340 --> 00:31:57.010
medium-sized stats to your test suite so
for a medium-sized test we want to keep

00:31:57.010 --> 00:31:57.020
for a medium-sized test we want to keep
 

00:31:57.020 --> 00:31:58.870
for a medium-sized test we want to keep
them small and focused on a single UI

00:31:58.870 --> 00:31:58.880
them small and focused on a single UI
 

00:31:58.880 --> 00:32:01.390
them small and focused on a single UI
component whereas single UI component

00:32:01.390 --> 00:32:01.400
component whereas single UI component
 

00:32:01.400 --> 00:32:04.120
component whereas single UI component
may be like a specific view fragment or

00:32:04.120 --> 00:32:04.130
may be like a specific view fragment or
 

00:32:04.130 --> 00:32:06.730
may be like a specific view fragment or
an activity so let's go back to our

00:32:06.730 --> 00:32:06.740
an activity so let's go back to our
 

00:32:06.740 --> 00:32:09.580
an activity so let's go back to our
example to see how we can isolate our

00:32:09.580 --> 00:32:09.590
example to see how we can isolate our
 

00:32:09.590 --> 00:32:11.740
example to see how we can isolate our
large end-to-end test to more isolated

00:32:11.740 --> 00:32:11.750
large end-to-end test to more isolated
 

00:32:11.750 --> 00:32:14.590
large end-to-end test to more isolated
components so here in this example again

00:32:14.590 --> 00:32:14.600
components so here in this example again
 

00:32:14.600 --> 00:32:16.450
components so here in this example again
you may have noticed that there are two

00:32:16.450 --> 00:32:16.460
you may have noticed that there are two
 

00:32:16.460 --> 00:32:19.180
you may have noticed that there are two
activities the list activity on the left

00:32:19.180 --> 00:32:19.190
activities the list activity on the left
 

00:32:19.190 --> 00:32:21.419
activities the list activity on the left
and the add node activity on the right

00:32:21.419 --> 00:32:21.429
and the add node activity on the right
 

00:32:21.429 --> 00:32:24.370
and the add node activity on the right
so until now we wrote a large end-to-end

00:32:24.370 --> 00:32:24.380
so until now we wrote a large end-to-end
 

00:32:24.380 --> 00:32:25.659
so until now we wrote a large end-to-end
test that gives us a lot of confidence

00:32:25.659 --> 00:32:25.669
test that gives us a lot of confidence
 

00:32:25.669 --> 00:32:27.820
test that gives us a lot of confidence
because it touches upon a lot of your

00:32:27.820 --> 00:32:27.830
because it touches upon a lot of your
 

00:32:27.830 --> 00:32:30.549
because it touches upon a lot of your
code in your app which is great for

00:32:30.549 --> 00:32:30.559
code in your app which is great for
 

00:32:30.559 --> 00:32:32.620
code in your app which is great for
large intent test but it's not so great

00:32:32.620 --> 00:32:32.630
large intent test but it's not so great
 

00:32:32.630 --> 00:32:34.419
large intent test but it's not so great
for an iterative test-driven development

00:32:34.419 --> 00:32:34.429
for an iterative test-driven development
 

00:32:34.429 --> 00:32:40.270
for an iterative test-driven development
cycle so so let's see how we can isolate

00:32:40.270 --> 00:32:40.280
cycle so so let's see how we can isolate
 

00:32:40.280 --> 00:32:43.360
cycle so so let's see how we can isolate
these and have isolated tests for each

00:32:43.360 --> 00:32:43.370
these and have isolated tests for each
 

00:32:43.370 --> 00:32:46.870
these and have isolated tests for each
activity in isolation to isolate the

00:32:46.870 --> 00:32:46.880
activity in isolation to isolate the
 

00:32:46.880 --> 00:32:49.090
activity in isolation to isolate the
left-hand side the list activity we can

00:32:49.090 --> 00:32:49.100
left-hand side the list activity we can
 

00:32:49.100 --> 00:32:50.440
left-hand side the list activity we can
use espresso intense

00:32:50.440 --> 00:32:50.450
use espresso intense
 

00:32:50.450 --> 00:32:53.320
use espresso intense
we're espresso intense is a simple API

00:32:53.320 --> 00:32:53.330
we're espresso intense is a simple API
 

00:32:53.330 --> 00:32:55.419
we're espresso intense is a simple API
that allows you to intercept any of you

00:32:55.419 --> 00:32:55.429
that allows you to intercept any of you
 

00:32:55.429 --> 00:32:57.879
that allows you to intercept any of you
are going a tense verify their content

00:32:57.879 --> 00:32:57.889
are going a tense verify their content
 

00:32:57.889 --> 00:33:02.639
are going a tense verify their content
and provide back a mock activity result

00:33:02.639 --> 00:33:02.649
and provide back a mock activity result
 

00:33:02.649 --> 00:33:05.499
and provide back a mock activity result
great so let's see how that API actually

00:33:05.499 --> 00:33:05.509
great so let's see how that API actually
 

00:33:05.509 --> 00:33:07.779
great so let's see how that API actually
looks like so as you can see it's very

00:33:07.779 --> 00:33:07.789
looks like so as you can see it's very
 

00:33:07.789 --> 00:33:09.279
looks like so as you can see it's very
straightforward you have an intent

00:33:09.279 --> 00:33:09.289
straightforward you have an intent
 

00:33:09.289 --> 00:33:09.820
straightforward you have an intent
matcher

00:33:09.820 --> 00:33:09.830
matcher
 

00:33:09.830 --> 00:33:12.609
matcher
that will match your going intent and

00:33:12.609 --> 00:33:12.619
that will match your going intent and
 

00:33:12.619 --> 00:33:14.919
that will match your going intent and
you can provide a version of your

00:33:14.919 --> 00:33:14.929
you can provide a version of your
 

00:33:14.929 --> 00:33:17.009
you can provide a version of your
activity result back to the caller

00:33:17.009 --> 00:33:17.019
activity result back to the caller
 

00:33:17.019 --> 00:33:20.259
activity result back to the caller
okay so let's use this API to write our

00:33:20.259 --> 00:33:20.269
okay so let's use this API to write our
 

00:33:20.269 --> 00:33:24.009
okay so let's use this API to write our
first isolated test so in this test you

00:33:24.009 --> 00:33:24.019
first isolated test so in this test you
 

00:33:24.019 --> 00:33:26.409
first isolated test so in this test you
can see on the first line we do exactly

00:33:26.409 --> 00:33:26.419
can see on the first line we do exactly
 

00:33:26.419 --> 00:33:29.950
can see on the first line we do exactly
that we intercept our intent and we

00:33:29.950 --> 00:33:29.960
that we intercept our intent and we
 

00:33:29.960 --> 00:33:31.570
that we intercept our intent and we
provide a stub version of our activity

00:33:31.570 --> 00:33:31.580
provide a stub version of our activity
 

00:33:31.580 --> 00:33:34.060
provide a stub version of our activity
result now on the second line when we

00:33:34.060 --> 00:33:34.070
result now on the second line when we
 

00:33:34.070 --> 00:33:36.700
result now on the second line when we
perform click instead of starting a new

00:33:36.700 --> 00:33:36.710
perform click instead of starting a new
 

00:33:36.710 --> 00:33:38.830
perform click instead of starting a new
activity espresso will intercept this

00:33:38.830 --> 00:33:38.840
activity espresso will intercept this
 

00:33:38.840 --> 00:33:41.739
activity espresso will intercept this
intent and provide a subjective result

00:33:41.739 --> 00:33:41.749
intent and provide a subjective result
 

00:33:41.749 --> 00:33:45.369
intent and provide a subjective result
which we can then use on the last line

00:33:45.369 --> 00:33:45.379
which we can then use on the last line
 

00:33:45.379 --> 00:33:48.220
which we can then use on the last line
to verify that our UI was updated

00:33:48.220 --> 00:33:48.230
to verify that our UI was updated
 

00:33:48.230 --> 00:33:51.869
to verify that our UI was updated
accordingly now we have an isolated test

00:33:51.869 --> 00:33:51.879
accordingly now we have an isolated test
 

00:33:51.879 --> 00:33:54.609
accordingly now we have an isolated test
okay so let's go back to our example and

00:33:54.609 --> 00:33:54.619
okay so let's go back to our example and
 

00:33:54.619 --> 00:33:56.769
okay so let's go back to our example and
see how we can isolate the second part

00:33:56.769 --> 00:33:56.779
see how we can isolate the second part
 

00:33:56.779 --> 00:33:59.560
see how we can isolate the second part
right so when you write when usually

00:33:59.560 --> 00:33:59.570
right so when you write when usually
 

00:33:59.570 --> 00:34:01.389
right so when you write when usually
write tests you end up in a position

00:34:01.389 --> 00:34:01.399
write tests you end up in a position
 

00:34:01.399 --> 00:34:04.180
write tests you end up in a position
where you may have some external

00:34:04.180 --> 00:34:04.190
where you may have some external
 

00:34:04.190 --> 00:34:06.549
where you may have some external
dependencies in play that can check that

00:34:06.549 --> 00:34:06.559
dependencies in play that can check that
 

00:34:06.559 --> 00:34:09.159
dependencies in play that can check that
are outside of your control so in our

00:34:09.159 --> 00:34:09.169
are outside of your control so in our
 

00:34:09.169 --> 00:34:12.010
are outside of your control so in our
example right as I showed before we have

00:34:12.010 --> 00:34:12.020
example right as I showed before we have
 

00:34:12.020 --> 00:34:15.010
example right as I showed before we have
I know that we save and it hits the real

00:34:15.010 --> 00:34:15.020
I know that we save and it hits the real
 

00:34:15.020 --> 00:34:17.139
I know that we save and it hits the real
server now even though we have an

00:34:17.139 --> 00:34:17.149
server now even though we have an
 

00:34:17.149 --> 00:34:18.879
server now even though we have an
auditing resource now that makes it more

00:34:18.879 --> 00:34:18.889
auditing resource now that makes it more
 

00:34:18.889 --> 00:34:20.919
auditing resource now that makes it more
reliable your tests can still fail

00:34:20.919 --> 00:34:20.929
reliable your tests can still fail
 

00:34:20.929 --> 00:34:22.690
reliable your tests can still fail
because your server may crash for some

00:34:22.690 --> 00:34:22.700
because your server may crash for some
 

00:34:22.700 --> 00:34:25.440
because your server may crash for some
reason so your test will fail so

00:34:25.440 --> 00:34:25.450
reason so your test will fail so
 

00:34:25.450 --> 00:34:27.789
reason so your test will fail so
wouldn't be better if we completely

00:34:27.789 --> 00:34:27.799
wouldn't be better if we completely
 

00:34:27.799 --> 00:34:29.680
wouldn't be better if we completely
isolate ourselves from these conditions

00:34:29.680 --> 00:34:29.690
isolate ourselves from these conditions
 

00:34:29.690 --> 00:34:31.690
isolate ourselves from these conditions
and run our tests in a hermetic

00:34:31.690 --> 00:34:31.700
and run our tests in a hermetic
 

00:34:31.700 --> 00:34:34.329
and run our tests in a hermetic
environment this will not only make your

00:34:34.329 --> 00:34:34.339
environment this will not only make your
 

00:34:34.339 --> 00:34:36.639
environment this will not only make your
test run much faster but it will also

00:34:36.639 --> 00:34:36.649
test run much faster but it will also
 

00:34:36.649 --> 00:34:39.940
test run much faster but it will also
eliminate any flakiness and beyond this

00:34:39.940 --> 00:34:39.950
eliminate any flakiness and beyond this
 

00:34:39.950 --> 00:34:41.770
eliminate any flakiness and beyond this
specific example you further want to

00:34:41.770 --> 00:34:41.780
specific example you further want to
 

00:34:41.780 --> 00:34:43.419
specific example you further want to
isolate yourself from any external

00:34:43.419 --> 00:34:43.429
isolate yourself from any external
 

00:34:43.429 --> 00:34:46.059
isolate yourself from any external
dependencies so for example you don't

00:34:46.059 --> 00:34:46.069
dependencies so for example you don't
 

00:34:46.069 --> 00:34:48.639
dependencies so for example you don't
want to test any Android system UI or

00:34:48.639 --> 00:34:48.649
want to test any Android system UI or
 

00:34:48.649 --> 00:34:50.980
want to test any Android system UI or
any other UI components that you don't

00:34:50.980 --> 00:34:50.990
any other UI components that you don't
 

00:34:50.990 --> 00:34:53.770
any other UI components that you don't
own because they probably already tested

00:34:53.770 --> 00:34:53.780
own because they probably already tested
 

00:34:53.780 --> 00:34:55.569
own because they probably already tested
and they can also change without your

00:34:55.569 --> 00:34:55.579
and they can also change without your
 

00:34:55.579 --> 00:34:58.349
and they can also change without your
knowing so your tests will actually fail

00:34:58.349 --> 00:34:58.359
knowing so your tests will actually fail
 

00:34:58.359 --> 00:35:01.030
knowing so your tests will actually fail
so let's see how our second isolated

00:35:01.030 --> 00:35:01.040
so let's see how our second isolated
 

00:35:01.040 --> 00:35:02.430
so let's see how our second isolated
test will look like in code

00:35:02.430 --> 00:35:02.440
test will look like in code
 

00:35:02.440 --> 00:35:05.430
test will look like in code
so here we see the main point here is

00:35:05.430 --> 00:35:05.440
so here we see the main point here is
 

00:35:05.440 --> 00:35:08.250
so here we see the main point here is
that we no longer use the real server

00:35:08.250 --> 00:35:08.260
that we no longer use the real server
 

00:35:08.260 --> 00:35:12.000
that we no longer use the real server
and instead you know we set up a

00:35:12.000 --> 00:35:12.010
and instead you know we set up a
 

00:35:12.010 --> 00:35:13.829
and instead you know we set up a
hermetic repository now there's many

00:35:13.829 --> 00:35:13.839
hermetic repository now there's many
 

00:35:13.839 --> 00:35:15.420
hermetic repository now there's many
different ways of you to do this and

00:35:15.420 --> 00:35:15.430
different ways of you to do this and
 

00:35:15.430 --> 00:35:18.120
different ways of you to do this and
this is just one way so then you can use

00:35:18.120 --> 00:35:18.130
this is just one way so then you can use
 

00:35:18.130 --> 00:35:20.400
this is just one way so then you can use
this harmonic repository in order to

00:35:20.400 --> 00:35:20.410
this harmonic repository in order to
 

00:35:20.410 --> 00:35:22.140
this harmonic repository in order to
verify that your note is actually saved

00:35:22.140 --> 00:35:22.150
verify that your note is actually saved
 

00:35:22.150 --> 00:35:24.420
verify that your note is actually saved
without ever leaving the context of your

00:35:24.420 --> 00:35:24.430
without ever leaving the context of your
 

00:35:24.430 --> 00:35:27.779
without ever leaving the context of your
app or hitting the network so at this

00:35:27.779 --> 00:35:27.789
app or hitting the network so at this
 

00:35:27.789 --> 00:35:30.150
app or hitting the network so at this
point if you think about it you have two

00:35:30.150 --> 00:35:30.160
point if you think about it you have two
 

00:35:30.160 --> 00:35:34.620
point if you think about it you have two
smaller tests that run much more they

00:35:34.620 --> 00:35:34.630
smaller tests that run much more they
 

00:35:34.630 --> 00:35:36.990
smaller tests that run much more they
are way more reliable and run much

00:35:36.990 --> 00:35:37.000
are way more reliable and run much
 

00:35:37.000 --> 00:35:39.480
are way more reliable and run much
faster but at the same time you maintain

00:35:39.480 --> 00:35:39.490
faster but at the same time you maintain
 

00:35:39.490 --> 00:35:41.490
faster but at the same time you maintain
the same amount of test coverage as your

00:35:41.490 --> 00:35:41.500
the same amount of test coverage as your
 

00:35:41.500 --> 00:35:44.430
the same amount of test coverage as your
large end-to-end test and this is why we

00:35:44.430 --> 00:35:44.440
large end-to-end test and this is why we
 

00:35:44.440 --> 00:35:46.559
large end-to-end test and this is why we
want to have more of these smaller

00:35:46.559 --> 00:35:46.569
want to have more of these smaller
 

00:35:46.569 --> 00:35:48.920
want to have more of these smaller
isolated tests compared to the large

00:35:48.920 --> 00:35:48.930
isolated tests compared to the large
 

00:35:48.930 --> 00:35:52.890
isolated tests compared to the large
end-to-end tests we showed before okay

00:35:52.890 --> 00:35:52.900
end-to-end tests we showed before okay
 

00:35:52.900 --> 00:35:56.160
end-to-end tests we showed before okay
so at this point we iterated through our

00:35:56.160 --> 00:35:56.170
so at this point we iterated through our
 

00:35:56.170 --> 00:35:58.589
so at this point we iterated through our
developer cycle a few times and we

00:35:58.589 --> 00:35:58.599
developer cycle a few times and we
 

00:35:58.599 --> 00:36:00.390
developer cycle a few times and we
should see all of our tests start

00:36:00.390 --> 00:36:00.400
should see all of our tests start
 

00:36:00.400 --> 00:36:02.430
should see all of our tests start
turning green and we should be confident

00:36:02.430 --> 00:36:02.440
turning green and we should be confident
 

00:36:02.440 --> 00:36:05.220
turning green and we should be confident
to release our feature however before we

00:36:05.220 --> 00:36:05.230
to release our feature however before we
 

00:36:05.230 --> 00:36:09.029
to release our feature however before we
conclude let's jump into the future for

00:36:09.029 --> 00:36:09.039
conclude let's jump into the future for
 

00:36:09.039 --> 00:36:09.510
conclude let's jump into the future for
a second

00:36:09.510 --> 00:36:09.520
a second
 

00:36:09.520 --> 00:36:12.660
a second
as your app grows and your team grows

00:36:12.660 --> 00:36:12.670
as your app grows and your team grows
 

00:36:12.670 --> 00:36:14.400
as your app grows and your team grows
you continue adding more and more

00:36:14.400 --> 00:36:14.410
you continue adding more and more
 

00:36:14.410 --> 00:36:16.349
you continue adding more and more
features to your app and you may find

00:36:16.349 --> 00:36:16.359
features to your app and you may find
 

00:36:16.359 --> 00:36:18.539
features to your app and you may find
yourself in a position where you may

00:36:18.539 --> 00:36:18.549
yourself in a position where you may
 

00:36:18.549 --> 00:36:21.059
yourself in a position where you may
have UI running in multiple processes

00:36:21.059 --> 00:36:21.069
have UI running in multiple processes
 

00:36:21.069 --> 00:36:23.010
have UI running in multiple processes
which is exactly what happened at Google

00:36:23.010 --> 00:36:23.020
which is exactly what happened at Google
 

00:36:23.020 --> 00:36:25.890
which is exactly what happened at Google
so if you go to our notes example this

00:36:25.890 --> 00:36:25.900
so if you go to our notes example this
 

00:36:25.900 --> 00:36:27.839
so if you go to our notes example this
may look something like this you have a

00:36:27.839 --> 00:36:27.849
may look something like this you have a
 

00:36:27.849 --> 00:36:29.400
may look something like this you have a
first activity that runs in your main

00:36:29.400 --> 00:36:29.410
first activity that runs in your main
 

00:36:29.410 --> 00:36:32.069
first activity that runs in your main
process on the left-hand side and now

00:36:32.069 --> 00:36:32.079
process on the left-hand side and now
 

00:36:32.079 --> 00:36:35.849
process on the left-hand side and now
the second activity will run in us in a

00:36:35.849 --> 00:36:35.859
the second activity will run in us in a
 

00:36:35.859 --> 00:36:37.440
the second activity will run in us in a
private process and in this case we're

00:36:37.440 --> 00:36:37.450
private process and in this case we're
 

00:36:37.450 --> 00:36:39.480
private process and in this case we're
going to call it add notes so how do we

00:36:39.480 --> 00:36:39.490
going to call it add notes so how do we
 

00:36:39.490 --> 00:36:42.809
going to call it add notes so how do we
test that well before Android oh it was

00:36:42.809 --> 00:36:42.819
test that well before Android oh it was
 

00:36:42.819 --> 00:36:46.710
test that well before Android oh it was
impossible to test but with Android oh

00:36:46.710 --> 00:36:46.720
impossible to test but with Android oh
 

00:36:46.720 --> 00:36:49.349
impossible to test but with Android oh
there is a new instrumentation attribute

00:36:49.349 --> 00:36:49.359
there is a new instrumentation attribute
 

00:36:49.359 --> 00:36:51.480
there is a new instrumentation attribute
that you can use in order to define

00:36:51.480 --> 00:36:51.490
that you can use in order to define
 

00:36:51.490 --> 00:36:53.420
that you can use in order to define
which process you want to instrument

00:36:53.420 --> 00:36:53.430
which process you want to instrument
 

00:36:53.430 --> 00:36:56.220
which process you want to instrument
while instrumenting and running tests

00:36:56.220 --> 00:36:56.230
while instrumenting and running tests
 

00:36:56.230 --> 00:36:57.990
while instrumenting and running tests
against each process in isolation is a

00:36:57.990 --> 00:36:58.000
against each process in isolation is a
 

00:36:58.000 --> 00:37:00.150
against each process in isolation is a
great idea and you should do it you may

00:37:00.150 --> 00:37:00.160
great idea and you should do it you may
 

00:37:00.160 --> 00:37:01.920
great idea and you should do it you may
find yourself in a position where you

00:37:01.920 --> 00:37:01.930
find yourself in a position where you
 

00:37:01.930 --> 00:37:03.809
find yourself in a position where you
want to cross process boundaries within

00:37:03.809 --> 00:37:03.819
want to cross process boundaries within
 

00:37:03.819 --> 00:37:06.930
want to cross process boundaries within
one test so you would probably want to

00:37:06.930 --> 00:37:06.940
one test so you would probably want to
 

00:37:06.940 --> 00:37:08.970
one test so you would probably want to
write an espresso test like looks like

00:37:08.970 --> 00:37:08.980
write an espresso test like looks like
 

00:37:08.980 --> 00:37:13.079
write an espresso test like looks like
this while this was not only possible in

00:37:13.079 --> 00:37:13.089
this while this was not only possible in
 

00:37:13.089 --> 00:37:15.000
this while this was not only possible in
a framework level before Android oh this

00:37:15.000 --> 00:37:15.010
a framework level before Android oh this
 

00:37:15.010 --> 00:37:16.170
a framework level before Android oh this
was also impossible

00:37:16.170 --> 00:37:16.180
was also impossible
 

00:37:16.180 --> 00:37:18.270
was also impossible
on this first level because in this

00:37:18.270 --> 00:37:18.280
on this first level because in this
 

00:37:18.280 --> 00:37:20.549
on this first level because in this
specific example Express is not even

00:37:20.549 --> 00:37:20.559
specific example Express is not even
 

00:37:20.559 --> 00:37:22.950
specific example Express is not even
aware of your secondary process nor can

00:37:22.950 --> 00:37:22.960
aware of your secondary process nor can
 

00:37:22.960 --> 00:37:24.720
aware of your secondary process nor can
it maintain any of the synchronization

00:37:24.720 --> 00:37:24.730
it maintain any of the synchronization
 

00:37:24.730 --> 00:37:28.020
it maintain any of the synchronization
guarantees we all know and love so today

00:37:28.020 --> 00:37:28.030
guarantees we all know and love so today
 

00:37:28.030 --> 00:37:30.210
guarantees we all know and love so today
I'm happy to announce multi-process

00:37:30.210 --> 00:37:30.220
I'm happy to announce multi-process
 

00:37:30.220 --> 00:37:34.140
I'm happy to announce multi-process
espresso support without changing any of

00:37:34.140 --> 00:37:34.150
espresso support without changing any of
 

00:37:34.150 --> 00:37:35.849
espresso support without changing any of
your test code or your app code this

00:37:35.849 --> 00:37:35.859
your test code or your app code this
 

00:37:35.859 --> 00:37:37.260
your test code or your app code this
will allow you to seamlessly interact

00:37:37.260 --> 00:37:37.270
will allow you to seamlessly interact
 

00:37:37.270 --> 00:37:39.690
will allow you to seamlessly interact
with UI cross process while maintaining

00:37:39.690 --> 00:37:39.700
with UI cross process while maintaining
 

00:37:39.700 --> 00:37:41.819
with UI cross process while maintaining
all of us presto synchronization

00:37:41.819 --> 00:37:41.829
all of us presto synchronization
 

00:37:41.829 --> 00:37:45.809
all of us presto synchronization
guarantees and it will be able available

00:37:45.809 --> 00:37:45.819
guarantees and it will be able available
 

00:37:45.819 --> 00:37:47.579
guarantees and it will be able available
in the next version of Android test

00:37:47.579 --> 00:37:47.589
in the next version of Android test
 

00:37:47.589 --> 00:37:50.609
in the next version of Android test
support library release so let's have a

00:37:50.609 --> 00:37:50.619
support library release so let's have a
 

00:37:50.619 --> 00:37:52.589
support library release so let's have a
quick overview of how it actually works

00:37:52.589 --> 00:37:52.599
quick overview of how it actually works
 

00:37:52.599 --> 00:37:54.930
quick overview of how it actually works
so traditionally as you know in our

00:37:54.930 --> 00:37:54.940
so traditionally as you know in our
 

00:37:54.940 --> 00:38:00.030
so traditionally as you know in our
example we start in one process where we

00:38:00.030 --> 00:38:00.040
example we start in one process where we
 

00:38:00.040 --> 00:38:01.500
example we start in one process where we
have an instance of an original runner

00:38:01.500 --> 00:38:01.510
have an instance of an original runner
 

00:38:01.510 --> 00:38:04.620
have an instance of an original runner
and espresso in this case now if you

00:38:04.620 --> 00:38:04.630
and espresso in this case now if you
 

00:38:04.630 --> 00:38:06.120
and espresso in this case now if you
remember from our example when you click

00:38:06.120 --> 00:38:06.130
remember from our example when you click
 

00:38:06.130 --> 00:38:08.700
remember from our example when you click
the add node button there will be a new

00:38:08.700 --> 00:38:08.710
the add node button there will be a new
 

00:38:08.710 --> 00:38:10.819
the add node button there will be a new
activity and now we have a new process

00:38:10.819 --> 00:38:10.829
activity and now we have a new process
 

00:38:10.829 --> 00:38:15.180
activity and now we have a new process
so the problem now is that we have two

00:38:15.180 --> 00:38:15.190
so the problem now is that we have two
 

00:38:15.190 --> 00:38:17.309
so the problem now is that we have two
processes with two different instances

00:38:17.309 --> 00:38:17.319
processes with two different instances
 

00:38:17.319 --> 00:38:19.620
processes with two different instances
of an original runner and espresso and

00:38:19.620 --> 00:38:19.630
of an original runner and espresso and
 

00:38:19.630 --> 00:38:21.569
of an original runner and espresso and
they're not aware of each other so the

00:38:21.569 --> 00:38:21.579
they're not aware of each other so the
 

00:38:21.579 --> 00:38:23.370
they're not aware of each other so the
first thing that we want to do is we

00:38:23.370 --> 00:38:23.380
first thing that we want to do is we
 

00:38:23.380 --> 00:38:25.680
first thing that we want to do is we
want to establish communication between

00:38:25.680 --> 00:38:25.690
want to establish communication between
 

00:38:25.690 --> 00:38:28.319
want to establish communication between
the two and regenerate runner and now

00:38:28.319 --> 00:38:28.329
the two and regenerate runner and now
 

00:38:28.329 --> 00:38:31.380
the two and regenerate runner and now
that we have this communication we can

00:38:31.380 --> 00:38:31.390
that we have this communication we can
 

00:38:31.390 --> 00:38:34.230
that we have this communication we can
use it to establish the communication

00:38:34.230 --> 00:38:34.240
use it to establish the communication
 

00:38:34.240 --> 00:38:36.270
use it to establish the communication
video to espresso instances and the way

00:38:36.270 --> 00:38:36.280
video to espresso instances and the way
 

00:38:36.280 --> 00:38:39.210
video to espresso instances and the way
we do that is by having an ability in

00:38:39.210 --> 00:38:39.220
we do that is by having an ability in
 

00:38:39.220 --> 00:38:41.490
we do that is by having an ability in
hydrogen as runner to register any

00:38:41.490 --> 00:38:41.500
hydrogen as runner to register any
 

00:38:41.500 --> 00:38:44.430
hydrogen as runner to register any
testing frameworks like espresso with an

00:38:44.430 --> 00:38:44.440
testing frameworks like espresso with an
 

00:38:44.440 --> 00:38:47.370
testing frameworks like espresso with an
original runner and then the runner will

00:38:47.370 --> 00:38:47.380
original runner and then the runner will
 

00:38:47.380 --> 00:38:48.960
original runner and then the runner will
then facilitate all the handshaking

00:38:48.960 --> 00:38:48.970
then facilitate all the handshaking
 

00:38:48.970 --> 00:38:50.819
then facilitate all the handshaking
required in order to establish

00:38:50.819 --> 00:38:50.829
required in order to establish
 

00:38:50.829 --> 00:38:52.260
required in order to establish
communication between the two espresso

00:38:52.260 --> 00:38:52.270
communication between the two espresso
 

00:38:52.270 --> 00:38:55.380
communication between the two espresso
instances now that the two inspiration

00:38:55.380 --> 00:38:55.390
instances now that the two inspiration
 

00:38:55.390 --> 00:38:58.020
instances now that the two inspiration
instances can talk to each other it can

00:38:58.020 --> 00:38:58.030
instances can talk to each other it can
 

00:38:58.030 --> 00:38:59.940
instances can talk to each other it can
then use it in order to enable cross

00:38:59.940 --> 00:38:59.950
then use it in order to enable cross
 

00:38:59.950 --> 00:39:02.190
then use it in order to enable cross
process testing and maintaining all the

00:39:02.190 --> 00:39:02.200
process testing and maintaining all the
 

00:39:02.200 --> 00:39:04.440
process testing and maintaining all the
synchronization guarantees that we had

00:39:04.440 --> 00:39:04.450
synchronization guarantees that we had
 

00:39:04.450 --> 00:39:09.690
synchronization guarantees that we had
before okay so with that we're reaching

00:39:09.690 --> 00:39:09.700
before okay so with that we're reaching
 

00:39:09.700 --> 00:39:11.700
before okay so with that we're reaching
the end of our developer workflow and we

00:39:11.700 --> 00:39:11.710
the end of our developer workflow and we
 

00:39:11.710 --> 00:39:13.109
the end of our developer workflow and we
showed you all the tools that you can

00:39:13.109 --> 00:39:13.119
showed you all the tools that you can
 

00:39:13.119 --> 00:39:15.480
showed you all the tools that you can
use across each step of the way in order

00:39:15.480 --> 00:39:15.490
use across each step of the way in order
 

00:39:15.490 --> 00:39:17.930
use across each step of the way in order
to make TDD happen and on Android and

00:39:17.930 --> 00:39:17.940
to make TDD happen and on Android and
 

00:39:17.940 --> 00:39:20.609
to make TDD happen and on Android and
with that said even if you don't follow

00:39:20.609 --> 00:39:20.619
with that said even if you don't follow
 

00:39:20.619 --> 00:39:23.640
with that said even if you don't follow
this flow exactly hopefully you know how

00:39:23.640 --> 00:39:23.650
this flow exactly hopefully you know how
 

00:39:23.650 --> 00:39:25.319
this flow exactly hopefully you know how
to use every single tool and how to

00:39:25.319 --> 00:39:25.329
to use every single tool and how to
 

00:39:25.329 --> 00:39:27.599
to use every single tool and how to
write good tests in order to bring your

00:39:27.599 --> 00:39:27.609
write good tests in order to bring your
 

00:39:27.609 --> 00:39:29.989
write good tests in order to bring your
app quality to the next level

00:39:29.989 --> 00:39:29.999
app quality to the next level
 

00:39:29.999 --> 00:39:33.269
app quality to the next level
so if you like to write tests and you

00:39:33.269 --> 00:39:33.279
so if you like to write tests and you
 

00:39:33.279 --> 00:39:35.700
so if you like to write tests and you
want to write an on test like we do at

00:39:35.700 --> 00:39:35.710
want to write an on test like we do at
 

00:39:35.710 --> 00:39:37.230
want to write an on test like we do at
Google here are some resources to get

00:39:37.230 --> 00:39:37.240
Google here are some resources to get
 

00:39:37.240 --> 00:39:40.859
Google here are some resources to get
you started but I want to thank you and

00:39:40.859 --> 00:39:40.869
you started but I want to thank you and
 

00:39:40.869 --> 00:39:42.839
you started but I want to thank you and
I think we have some time for questions

00:39:42.839 --> 00:39:42.849
I think we have some time for questions
 

00:39:42.849 --> 00:39:49.079
I think we have some time for questions
and if not we we have office hours at

00:39:49.079 --> 00:39:49.089
and if not we we have office hours at
 

00:39:49.089 --> 00:39:51.809
and if not we we have office hours at
3:30 today so hopefully you see that

00:39:51.809 --> 00:39:51.819
3:30 today so hopefully you see that
 

00:39:51.819 --> 00:39:52.740
3:30 today so hopefully you see that
thank you

00:39:52.740 --> 00:39:52.750
thank you
 

00:39:52.750 --> 00:39:56.270
thank you
[Applause]

00:39:56.270 --> 00:39:56.280
[Applause]
 

00:39:56.280 --> 00:40:10.209
[Applause]
[Music]

