WEBVTT
Kind: captions
Language: en

00:00:00.662 --> 00:00:01.370
GEORGE MOUNT: Hi.

00:00:01.370 --> 00:00:03.940
I'm George Mount from the
Android UI Toolkit Team,

00:00:03.940 --> 00:00:06.430
and I'm here to tell you about
the new Activity Transitions

00:00:06.430 --> 00:00:09.500
API that we're releasing
in the L Developer preview.

00:00:09.500 --> 00:00:11.680
But before we get to
Activity Transitions,

00:00:11.680 --> 00:00:14.760
let's talk a little
bit about transitions.

00:00:14.760 --> 00:00:17.210
Transitions help give
continuity to the user.

00:00:17.210 --> 00:00:20.159
In this app, I have buttons
on the left and on the right.

00:00:20.159 --> 00:00:22.700
And when the user clicks on a
button, something is happening,

00:00:22.700 --> 00:00:24.900
but it isn't clear what.

00:00:24.900 --> 00:00:27.424
Now using the Transitions
API, released in KitKat,

00:00:27.424 --> 00:00:28.840
it only takes a
few lines of code,

00:00:28.840 --> 00:00:31.020
and it becomes clear to
the user that the buttons

00:00:31.020 --> 00:00:33.340
are moving between the columns.

00:00:33.340 --> 00:00:35.930
The Transitions API is great
when working with layouts,

00:00:35.930 --> 00:00:39.650
but what can we do
between activities?

00:00:39.650 --> 00:00:43.110
The default Activity Transition
has a scale and fade effect.

00:00:43.110 --> 00:00:44.960
I slowed down the
transitions on my phone

00:00:44.960 --> 00:00:47.967
so that they are easier to see.

00:00:47.967 --> 00:00:50.300
We can customize Activity
Transitions with, for example,

00:00:50.300 --> 00:00:51.970
a fade.

00:00:51.970 --> 00:00:54.896
We can also do a scale,
slide, or rotate,

00:00:54.896 --> 00:00:56.520
but they work against
the entire window

00:00:56.520 --> 00:00:59.570
and don't give the user the
continuity we really want.

00:00:59.570 --> 00:01:02.090
For the new Activity
Transitions API,

00:01:02.090 --> 00:01:03.770
if we wanted this
continuity, we had

00:01:03.770 --> 00:01:06.860
to create this transition
all on our own.

00:01:06.860 --> 00:01:09.070
Here we have an
activity, Activity A,

00:01:09.070 --> 00:01:11.570
with a little yellow view
that we want to transition

00:01:11.570 --> 00:01:13.870
into the new activity.

00:01:13.870 --> 00:01:15.470
Now, in the old way
of doing things,

00:01:15.470 --> 00:01:18.070
the first thing we had to do was
capture the size and position

00:01:18.070 --> 00:01:19.770
of the shared element.

00:01:19.770 --> 00:01:22.230
Next, we started the
activity, passing the location

00:01:22.230 --> 00:01:23.700
in the intent.

00:01:23.700 --> 00:01:26.020
Our new activity,
Activity B, had

00:01:26.020 --> 00:01:30.130
to start as a translucent window
with a transparent background.

00:01:30.130 --> 00:01:32.460
It also had to prevent
the default scale

00:01:32.460 --> 00:01:34.570
and fade transition.

00:01:34.570 --> 00:01:37.340
The shared element view
was then sized and placed

00:01:37.340 --> 00:01:39.350
in the position
passed in the intent.

00:01:39.350 --> 00:01:42.525
The background
was then faded in,

00:01:42.525 --> 00:01:43.900
and the shared
element could then

00:01:43.900 --> 00:01:46.020
transition to its
final location.

00:01:46.020 --> 00:01:48.370
And then the rest of
our UI could come in.

00:01:48.370 --> 00:01:49.040
Wow.

00:01:49.040 --> 00:01:50.370
That's a lot of work.

00:01:50.370 --> 00:01:54.380
Let's see how we do it with the
new Activity Transitions API.

00:01:54.380 --> 00:01:58.010
Here I have contact group with
all of my handsome coworkers.

00:01:58.010 --> 00:02:00.890
When I click on an
image, it will bring up

00:02:00.890 --> 00:02:04.100
the detailed contact
information in another activity.

00:02:04.100 --> 00:02:06.380
I'd like to share
the contact image

00:02:06.380 --> 00:02:09.789
to draw the user between
the two activities.

00:02:09.789 --> 00:02:13.230
Because I can have any
number of shared elements,

00:02:13.230 --> 00:02:15.470
I need to name each
of them in my contract

00:02:15.470 --> 00:02:17.150
between my activities.

00:02:17.150 --> 00:02:18.840
I only have one,
and I have given it

00:02:18.840 --> 00:02:20.824
the name "Contact Image."

00:02:20.824 --> 00:02:23.240
To tell the framework which
view is going to be the shared

00:02:23.240 --> 00:02:26.124
element, I give the
image a name also.

00:02:26.124 --> 00:02:27.540
I've named it the
same thing, so I

00:02:27.540 --> 00:02:30.180
don't need any code to glue
the contract name to my shared

00:02:30.180 --> 00:02:31.680
element.

00:02:31.680 --> 00:02:34.890
I also want the shared element
coming back to the grid,

00:02:34.890 --> 00:02:37.270
so I name that element as well.

00:02:37.270 --> 00:02:40.052
I then just launch it with
an activity options bundle.

00:02:40.052 --> 00:02:41.260
Let's see what it looks like.

00:02:44.044 --> 00:02:46.030
It looks nice,
and we didn't have

00:02:46.030 --> 00:02:48.520
to do any of that hard work.

00:02:48.520 --> 00:02:50.840
When the orientation
changes, the shared element

00:02:50.840 --> 00:02:53.570
picks up the final position
from the calling activity

00:02:53.570 --> 00:02:56.590
and restores it to
the right place.

00:02:56.590 --> 00:02:57.090
Amazing.

00:02:59.740 --> 00:03:02.470
My activities were doing a
subtle fade-in of the views

00:03:02.470 --> 00:03:04.095
other than the shared element.

00:03:04.095 --> 00:03:06.500
I'd like something a
little more dramatic.

00:03:06.500 --> 00:03:08.010
Let's set the
entering transition

00:03:08.010 --> 00:03:10.880
to use a nice slide effect
so all the other views enter

00:03:10.880 --> 00:03:12.770
from the bottom.

00:03:12.770 --> 00:03:15.257
Previously, the calling
activity didn't have any effect.

00:03:15.257 --> 00:03:17.340
I like to have the views
around the shared element

00:03:17.340 --> 00:03:20.360
leave with an explode animation.

00:03:20.360 --> 00:03:22.060
Let's see what it looks like.

00:03:22.060 --> 00:03:23.910
The views from the
calling activity

00:03:23.910 --> 00:03:25.690
push out from the
scene, while the views

00:03:25.690 --> 00:03:28.366
from the entering
activity slide up.

00:03:28.366 --> 00:03:31.270
I can also make the
transition even more dramatic

00:03:31.270 --> 00:03:34.300
by having the entering activity
wait for the calling activity

00:03:34.300 --> 00:03:37.005
to finish before it slides in.

00:03:37.005 --> 00:03:38.880
Now that you've
seen how easy it is

00:03:38.880 --> 00:03:41.046
to add continuity
between your activities,

00:03:41.046 --> 00:03:42.420
I know that you
are going to want

00:03:42.420 --> 00:03:45.090
to add activity transitions
to your applications.

00:03:45.090 --> 00:03:47.510
Make sure to check out
more of our DevBytes

00:03:47.510 --> 00:03:49.660
and the rest of our I/O videos.

00:03:49.660 --> 00:03:51.870
Thanks very much for watching.

