WEBVTT
Kind: captions
Language: en

00:00:05.500 --> 00:00:07.640
Hi, I'm Chet Haase,
an engineer on the

00:00:07.640 --> 00:00:09.290
Android team at Google.

00:00:09.290 --> 00:00:12.590
Today I'm going to do another
show in a series I like to

00:00:12.590 --> 00:00:14.440
call "You're Doing It Wrong."

00:00:14.440 --> 00:00:16.610
Now, the demo you're going to
see is not code that I would

00:00:16.610 --> 00:00:18.070
like you to copy and paste.

00:00:18.070 --> 00:00:19.680
In fact, it is code that
I would like you to

00:00:19.680 --> 00:00:21.090
not copy and paste.

00:00:21.090 --> 00:00:22.740
Don't do what I'm doing today.

00:00:22.740 --> 00:00:27.230
Instead, it's a hacked up demo
to show an egregious example

00:00:27.230 --> 00:00:30.640
of something that I have
seen commonly in other

00:00:30.640 --> 00:00:31.440
applications.

00:00:31.440 --> 00:00:34.920
And usually, the effect
is more subtle.

00:00:34.920 --> 00:00:37.980
And being subtle, it takes a
long time for me to track down

00:00:37.980 --> 00:00:38.430
the problem.

00:00:38.430 --> 00:00:42.000
But it all boils down to one
single problem that a lot of

00:00:42.000 --> 00:00:46.620
applications share, which is,
don't call Request Layout

00:00:46.620 --> 00:00:48.240
during layout.

00:00:48.240 --> 00:00:49.840
And let's take a look
at the demo.

00:00:49.840 --> 00:00:52.150
And then I'll talk a little bit
about why this is a really

00:00:52.150 --> 00:00:55.080
bad thing for your application
to do and a good thing for

00:00:55.080 --> 00:00:57.050
your application to avoid.

00:00:57.050 --> 00:00:59.030
So first of all, we
have this demo.

00:00:59.030 --> 00:01:00.980
I have three simple
buttons there.

00:01:00.980 --> 00:01:02.720
There's an Add and a
Remove button, and

00:01:02.720 --> 00:01:04.330
then a Layout button.

00:01:04.330 --> 00:01:05.880
When I click Add, it's
going to add a

00:01:05.880 --> 00:01:07.610
button to the container.

00:01:07.610 --> 00:01:08.930
So that button should
appear below.

00:01:08.930 --> 00:01:12.670
When I Remove, it's going to
remove the first button in

00:01:12.670 --> 00:01:15.990
that container if said
button exists.

00:01:15.990 --> 00:01:18.170
And the Layout call
requests layout on

00:01:18.170 --> 00:01:18.980
the container itself.

00:01:18.980 --> 00:01:20.830
So it basically forces
a layout.

00:01:20.830 --> 00:01:22.200
So first, I'll click Add.

00:01:22.200 --> 00:01:24.400
And nothing happened.

00:01:24.400 --> 00:01:26.510
But you'll see, actually
something did happen.

00:01:26.510 --> 00:01:29.170
It's just that there was no
visual change to the activity.

00:01:29.170 --> 00:01:32.190
So if I call Request Layout
forcibly on the container, you

00:01:32.190 --> 00:01:35.070
can now see, oh, well that
button actually was there.

00:01:35.070 --> 00:01:36.460
We just weren't seeing it.

00:01:36.460 --> 00:01:38.640
Again, I can call Add again,
add another button.

00:01:38.640 --> 00:01:41.680
And in fact I have to call
Request Layout to actually see

00:01:41.680 --> 00:01:42.160
the button.

00:01:42.160 --> 00:01:45.030
I can keep doing this
over and over again.

00:01:45.030 --> 00:01:48.800
And each time we actually add a
button, but nothing happens.

00:01:48.800 --> 00:01:51.000
Similarly, I can click
on the Remove.

00:01:51.000 --> 00:01:52.580
And a button disappears.

00:01:52.580 --> 00:01:55.470
But the container actually
should have shrunk around it.

00:01:55.470 --> 00:01:56.780
And that simply didn't happen.

00:01:56.780 --> 00:01:58.890
So if I call Request Layout,
the right thing happens.

00:01:58.890 --> 00:02:00.640
Again, click Remove, the
button goes away.

00:02:00.640 --> 00:02:04.340
But the right visual thing
didn't happen.

00:02:04.340 --> 00:02:06.150
So let's take a look
at the code.

00:02:06.150 --> 00:02:08.789
And then let's chat about what's
actually going on.

00:02:08.789 --> 00:02:11.090
So here's my hacked up demo.

00:02:11.090 --> 00:02:14.410
And again, this is not
necessarily the instantiation

00:02:14.410 --> 00:02:16.140
of what I have seen
in applications.

00:02:16.140 --> 00:02:19.890
But they all boil down to
essentially this logic, which

00:02:19.890 --> 00:02:22.740
is, request layouts are getting
called somewhere--

00:02:22.740 --> 00:02:24.610
either directly or
indirectly--

00:02:24.610 --> 00:02:26.350
during the middle of
the layout process.

00:02:26.350 --> 00:02:28.060
And that is the root
of the problem.

00:02:28.060 --> 00:02:31.500
So in this particular hackey
demo, we have click listeners

00:02:31.500 --> 00:02:33.530
on the buttons for the
Add View button.

00:02:33.530 --> 00:02:36.350
We set a flag that says, hey,
I'd like you to add a view.

00:02:36.350 --> 00:02:38.860
And then we call Request Layout
on that layout where

00:02:38.860 --> 00:02:39.900
we're going to add the view.

00:02:39.900 --> 00:02:42.390
Remove button-- similarly, we
set a flag that says, hey, I'd

00:02:42.390 --> 00:02:44.240
like to remove one
of your views.

00:02:44.240 --> 00:02:46.820
And then we call
Request Layout.

00:02:46.820 --> 00:02:51.350
And then finally, the Layout
button forces a layout by

00:02:51.350 --> 00:02:53.140
calling Request Layout
on that container.

00:02:53.140 --> 00:02:55.950
And that restores the state that
we thought the container

00:02:55.950 --> 00:02:57.960
should have been in when we
did the Add and Remove

00:02:57.960 --> 00:02:59.240
operations.

00:02:59.240 --> 00:03:00.730
Here's a custom container.

00:03:00.730 --> 00:03:02.660
It has those couple
of flags in it.

00:03:02.660 --> 00:03:04.850
And then it has this
On Layout override.

00:03:04.850 --> 00:03:08.280
So On Layout is a standard
override from the View class.

00:03:08.280 --> 00:03:09.630
So if you would like
to do something

00:03:09.630 --> 00:03:11.200
special in your layout--

00:03:11.200 --> 00:03:14.350
for instance, Linear Layout
overrides On Layout.

00:03:14.350 --> 00:03:16.070
And that's where it actually
lays out its children

00:03:16.070 --> 00:03:19.750
horizontally or vertically to
position them appropriately on

00:03:19.750 --> 00:03:22.470
the screen before returning
from On Layout.

00:03:22.470 --> 00:03:25.610
So in here, we say, OK, if
there's a Remove request

00:03:25.610 --> 00:03:27.880
pending, then we're going to
call this method that says,

00:03:27.880 --> 00:03:28.950
remove button.

00:03:28.950 --> 00:03:31.570
And then, all we're going to do
is remove the first child,

00:03:31.570 --> 00:03:33.270
if that child exists.

00:03:33.270 --> 00:03:35.980
And if there's an Add request
pending, then we're going to

00:03:35.980 --> 00:03:37.000
add a button.

00:03:37.000 --> 00:03:39.800
And then we're going
to reset the flag.

00:03:39.800 --> 00:03:42.140
And adding a button simply
creates this button along the

00:03:42.140 --> 00:03:45.650
way, sets the layout parameters
accordingly, sets

00:03:45.650 --> 00:03:47.820
some text on there so we know
which button it is.

00:03:47.820 --> 00:03:48.930
And then we add the view.

00:03:48.930 --> 00:03:53.330
So the actual code to remove
and add these views and set

00:03:53.330 --> 00:03:56.690
the properties and the layout
params on all the views--

00:03:56.690 --> 00:03:57.640
all of that's correct.

00:03:57.640 --> 00:04:01.020
The problem is that we're
doing it in On Layout.

00:04:01.020 --> 00:04:03.440
We're basically in the middle of
laying out the entire view

00:04:03.440 --> 00:04:07.060
hierarchy, or some subset of it
that needed to be laid out.

00:04:07.060 --> 00:04:11.900
And that's the time when we
actually call functions to add

00:04:11.900 --> 00:04:14.240
and remove views, which
are going to

00:04:14.240 --> 00:04:15.530
affect the layout itself.

00:04:15.530 --> 00:04:18.720
So it's kind of a recursive
problem where we're in the

00:04:18.720 --> 00:04:22.400
middle of doing something, and
we change properties that will

00:04:22.400 --> 00:04:24.910
side effect the thing that
we are trying to do.

00:04:24.910 --> 00:04:28.130
In particular, and here's the
crux of the problem, we're in

00:04:28.130 --> 00:04:30.510
the middle of laying
out the container.

00:04:30.510 --> 00:04:33.450
And so, for instance, we
call super.onLayout.

00:04:33.450 --> 00:04:36.000
That's going to call up into the
code in Linear Layout that

00:04:36.000 --> 00:04:38.030
figures out where all the
children should be.

00:04:38.030 --> 00:04:40.840
And then, we're going to go
ahead and add or remove

00:04:40.840 --> 00:04:42.610
children after that call.

00:04:42.610 --> 00:04:45.626
And when layout is done for
any particular node in the

00:04:45.626 --> 00:04:48.360
view hierarchy, it's going to
clear some flag saying, I'm

00:04:48.360 --> 00:04:49.510
done with layout.

00:04:49.510 --> 00:04:52.040
So what's going to happen is,
we're going to either add or

00:04:52.040 --> 00:04:54.610
remove views in this code.

00:04:54.610 --> 00:04:58.360
And then we're going to return
back to the superclass, the

00:04:58.360 --> 00:04:59.860
actual Layout call
on the view.

00:04:59.860 --> 00:05:02.190
And the view's going to say,
OK, I'm done with layout.

00:05:02.190 --> 00:05:04.280
And then, it continues
along with its life.

00:05:04.280 --> 00:05:06.340
Meanwhile, these guys have
been added here.

00:05:06.340 --> 00:05:09.370
And they have not had the proper
side effect on the

00:05:09.370 --> 00:05:12.060
sizing and positioning
information of that view.

00:05:12.060 --> 00:05:14.860
So they have requested Layout,
which is a side effect of

00:05:14.860 --> 00:05:16.620
calling Add or Remove view.

00:05:16.620 --> 00:05:18.700
But that request didn't
propagate, because we're

00:05:18.700 --> 00:05:21.380
already in the middle of doing
layout and figured we were

00:05:21.380 --> 00:05:24.320
done when we finished
that Layout call.

00:05:24.320 --> 00:05:29.240
So there are many different
ways to do this.

00:05:29.240 --> 00:05:31.480
I have, in this demo,
picked probably the

00:05:31.480 --> 00:05:33.110
worst way to do it.

00:05:33.110 --> 00:05:35.860
The easiest way for you to
actually do this correctly in

00:05:35.860 --> 00:05:40.010
this particularly hackey demo
is, instead of actually

00:05:40.010 --> 00:05:42.130
setting a flag and then forcing
this thing to happen

00:05:42.130 --> 00:05:45.590
within layout, the correct thing
to do would actually be,

00:05:45.590 --> 00:05:49.770
for example, to call
myLayout.addButton

00:05:49.770 --> 00:05:52.130
directly in that code.

00:05:52.130 --> 00:05:54.860
Get rid of these horribly
offensive lines of code.

00:05:54.860 --> 00:05:56.530
Similarly, remove button--
you could call

00:05:56.530 --> 00:06:03.930
myLayout.removeButton and
get rid of this hackey

00:06:03.930 --> 00:06:04.950
approach to doing it.

00:06:04.950 --> 00:06:06.160
Now, this is rather obvious.

00:06:06.160 --> 00:06:09.310
As I said, this is a hackey
demo that shows the most

00:06:09.310 --> 00:06:10.920
obvious example of this.

00:06:10.920 --> 00:06:13.130
But we've seen other things that
are quite similar to this

00:06:13.130 --> 00:06:15.840
where, in the middle of
someone's measurement or

00:06:15.840 --> 00:06:18.750
layout code, someone goes ahead
and does things that are

00:06:18.750 --> 00:06:21.740
side effecting the stuff that
the entire view hierarchy is

00:06:21.740 --> 00:06:24.590
in the middle of dealing with.

00:06:24.590 --> 00:06:27.360
You will see an approach to this
in list view and adapter

00:06:27.360 --> 00:06:28.920
view and some of the
internal classes.

00:06:28.920 --> 00:06:32.760
And I've seen some custom
classes that do things

00:06:32.760 --> 00:06:35.650
similarly externally, where the
correct approach, if you

00:06:35.650 --> 00:06:37.900
really, for some reason, need
to do this in the middle of

00:06:37.900 --> 00:06:39.470
that code, say you're
a list view and

00:06:39.470 --> 00:06:40.880
you're recycling views.

00:06:40.880 --> 00:06:43.560
And things do get added and
removed during layout.

00:06:43.560 --> 00:06:47.680
One of the things you should
keep in mind is that there are

00:06:47.680 --> 00:06:50.070
Add View in layout and Remove
View in layout.

00:06:50.070 --> 00:06:52.600
These are the methods to call if
you're actually doing these

00:06:52.600 --> 00:06:54.120
things during the middle
of layout.

00:06:54.120 --> 00:06:56.270
But the most important thing
to remember is, when you

00:06:56.270 --> 00:06:58.960
finish layout, all of the
measurement and layout

00:06:58.960 --> 00:07:02.390
information for that container
should be done.

00:07:02.390 --> 00:07:03.180
It should be complete.

00:07:03.180 --> 00:07:05.390
Which means, if you're adding
children during the middle of

00:07:05.390 --> 00:07:08.390
layout, you need to make sure
that your measurement

00:07:08.390 --> 00:07:11.510
information and that of your
children is all correct by the

00:07:11.510 --> 00:07:12.950
time you return from layout.

00:07:12.950 --> 00:07:15.930
Because that's what the rest of
the view hierarchy expects.

00:07:15.930 --> 00:07:18.180
So don't do it like I did it.

00:07:18.180 --> 00:07:19.790
Actually do it correctly
instead.

00:07:19.790 --> 00:07:21.330
And don't do this stuff
during layout.

00:07:21.330 --> 00:07:23.670
Or if you do, do it
the correct way.

00:07:23.670 --> 00:07:25.970
And make sure that when your
layout for your container

00:07:25.970 --> 00:07:29.770
finishes, everything below it
is handled correctly so that

00:07:29.770 --> 00:07:31.360
the view hierarchy is
in a consistent

00:07:31.360 --> 00:07:33.090
state with your container.

00:07:33.090 --> 00:07:34.340
Thanks.

