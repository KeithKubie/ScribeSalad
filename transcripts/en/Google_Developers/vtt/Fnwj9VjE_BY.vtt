WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.916
[MUSIC PLAYING]

00:00:07.707 --> 00:00:08.748
JAMES DANIELS: Thank you.

00:00:08.748 --> 00:00:10.220
[APPLAUSE]

00:00:10.220 --> 00:00:14.660
Firebase applications--
we've written an SDK for you

00:00:14.660 --> 00:00:19.910
in iOS Android, mobile web,
lots of other frameworks.

00:00:19.910 --> 00:00:25.550
And that SDK communicates
to the Firebase service.

00:00:25.550 --> 00:00:28.650
There is no
intermediary gatekeeper.

00:00:28.650 --> 00:00:30.860
There's no servers.

00:00:30.860 --> 00:00:32.659
Google handles all
of that for you

00:00:32.659 --> 00:00:36.980
with a suite of tools that are
called directly from the SDK

00:00:36.980 --> 00:00:40.280
itself, very powerful
managed services that

00:00:40.280 --> 00:00:43.820
allow you to focus
on building an app

00:00:43.820 --> 00:00:46.350
rather than working on
all of the boilerplate.

00:00:46.350 --> 00:00:50.300
So we have authentication, we
have our Realtime Database,

00:00:50.300 --> 00:00:54.680
we have Cloud messages, and
lots more products there.

00:00:54.680 --> 00:00:59.330
And really, it's to empower
you to deliver products faster

00:00:59.330 --> 00:01:02.780
without worrying about all the
DevOps and stuff like that.

00:01:07.930 --> 00:01:10.410
There's also the
Realtime Database.

00:01:10.410 --> 00:01:14.070
How this is differentiated
from a traditional database

00:01:14.070 --> 00:01:17.280
is the Realtime Database
synchronizes changes

00:01:17.280 --> 00:01:20.130
to all the listening
clients, all the clients that

00:01:20.130 --> 00:01:22.950
are interested in a specific
spot on the database

00:01:22.950 --> 00:01:24.540
in milliseconds.

00:01:24.540 --> 00:01:29.400
And this allows you to
build very rich applications

00:01:29.400 --> 00:01:32.100
for free with
Firebase, none of this

00:01:32.100 --> 00:01:35.850
having to spin up servers
and juggle sockets

00:01:35.850 --> 00:01:37.890
and lots of complicated things.

00:01:37.890 --> 00:01:41.730
So it's a nice little addition
to the Firebase product.

00:01:41.730 --> 00:01:43.650
And if you were to
build your own servers,

00:01:43.650 --> 00:01:46.890
you'd have to build
all of that as well.

00:01:46.890 --> 00:01:51.060
But there are problems
in this thick client

00:01:51.060 --> 00:01:53.520
model promoted by Firebase.

00:01:53.520 --> 00:01:56.190
It's not without its
disadvantages, right?

00:01:56.190 --> 00:02:02.430
So while Firebase gives
you a very powerful tool

00:02:02.430 --> 00:02:05.730
to validate the data
coming into your database,

00:02:05.730 --> 00:02:09.690
to validate the users'
writing, reading files--

00:02:09.690 --> 00:02:11.730
this is our rules engine--

00:02:11.730 --> 00:02:13.770
there are things
that you can't quite

00:02:13.770 --> 00:02:18.210
do in Firebase without
Cloud Functions.

00:02:18.210 --> 00:02:21.810
So say you wanted to perform
an expensive operation.

00:02:21.810 --> 00:02:27.030
You want to resize a image
or transcode a video.

00:02:27.030 --> 00:02:29.190
This is something
that would burn up

00:02:29.190 --> 00:02:32.970
your user's battery, very likely
to uninstall your application

00:02:32.970 --> 00:02:34.530
if you do that.

00:02:34.530 --> 00:02:36.780
And just, you know,
it's going to make

00:02:36.780 --> 00:02:38.490
your application slower.

00:02:38.490 --> 00:02:40.800
And again, it's just
a lot of complexity.

00:02:40.800 --> 00:02:44.560
It's just shifting that
complexity to the clients.

00:02:44.560 --> 00:02:47.820
So now you need to know how
to resize an image on iOS,

00:02:47.820 --> 00:02:49.680
Android, and then
you're going to have

00:02:49.680 --> 00:02:54.030
to do it on the web for
all kinds of trickery.

00:02:54.030 --> 00:02:57.510
So say you didn't want
to trust the client.

00:02:57.510 --> 00:03:00.720
The Realtime Database has
a very powerful rules set,

00:03:00.720 --> 00:03:04.350
but you can't encapsulate
everything in there.

00:03:04.350 --> 00:03:06.600
Say you wanted to
moderate images.

00:03:06.600 --> 00:03:09.705
Say you wanted to filter
out adult language.

00:03:12.800 --> 00:03:14.190
What if you have secrets?

00:03:14.190 --> 00:03:18.180
What if you have private
keys, API tokens, things

00:03:18.180 --> 00:03:20.230
that you don't
want on the client?

00:03:20.230 --> 00:03:22.800
Clients cannot be
trusted, right?

00:03:22.800 --> 00:03:26.400
That's just an application
on their phone.

00:03:26.400 --> 00:03:27.600
It could be cracked open.

00:03:27.600 --> 00:03:28.808
They can look at the secrets.

00:03:28.808 --> 00:03:29.810
They can grab those.

00:03:29.810 --> 00:03:33.600
So they don't want to put things
like your push notification

00:03:33.600 --> 00:03:37.590
gateway secrets in there to
allow peer-to-peer messaging.

00:03:37.590 --> 00:03:40.620
That would be leaking those,
and someone could actually

00:03:40.620 --> 00:03:43.390
crack the application,
grab that secret,

00:03:43.390 --> 00:03:45.840
and message your users en masse.

00:03:45.840 --> 00:03:47.830
That's no good.

00:03:47.830 --> 00:03:50.040
Say you have a proprietary
algorithm, interact

00:03:50.040 --> 00:03:53.100
with a third party, or,
for whatever reason,

00:03:53.100 --> 00:03:57.270
you need to expose a
classic HTTP end point.

00:03:57.270 --> 00:04:03.070
These are all things that
are hard to do on Firebase.

00:04:03.070 --> 00:04:08.500
So in the good old days,
you'll say, this was easier.

00:04:08.500 --> 00:04:10.630
My server, it's mine.

00:04:10.630 --> 00:04:12.100
I control it.

00:04:12.100 --> 00:04:14.260
I can make whatever APIs I want.

00:04:14.260 --> 00:04:17.170
I can do whatever I
want to do on there.

00:04:17.170 --> 00:04:19.200
So why don't we combine them?

00:04:22.490 --> 00:04:27.910
So say we attach generic compute
to Firebase just using it

00:04:27.910 --> 00:04:29.980
as a regular old client.

00:04:29.980 --> 00:04:32.800
So it's listening to
changes to the database.

00:04:32.800 --> 00:04:35.570
It's then writing
into the database.

00:04:35.570 --> 00:04:37.240
In fact, until
recently, this was

00:04:37.240 --> 00:04:39.760
pushed as a best practice
by the Firebase team

00:04:39.760 --> 00:04:41.495
with tools like
Firebase Q, where

00:04:41.495 --> 00:04:45.460
you would write into a
part of the database things

00:04:45.460 --> 00:04:49.930
that you wanted these listening
clients to do, these workers.

00:04:49.930 --> 00:04:54.370
But now you have
this problem again.

00:04:54.370 --> 00:04:57.160
Now you have these workers,
these generic compute.

00:04:57.160 --> 00:04:58.870
You have to scale them.

00:04:58.870 --> 00:05:01.974
You have to pay for
the excess capacity.

00:05:01.974 --> 00:05:04.390
And then you're going to have
all kinds of troubles coming

00:05:04.390 --> 00:05:10.150
around where, oh, what if two
workers are doing the same job?

00:05:10.150 --> 00:05:13.330
Then you're going to have a lot
of bikeshedding about the way

00:05:13.330 --> 00:05:15.370
that the Firebase
Realtime Database is,

00:05:15.370 --> 00:05:19.040
and why aren't we using MySQL?

00:05:19.040 --> 00:05:22.450
And wasn't Firebase supposed
to make all of this easy

00:05:22.450 --> 00:05:23.890
after all?

00:05:23.890 --> 00:05:28.130
It promised to make us
deliver applications faster.

00:05:28.130 --> 00:05:30.460
And now we're here
bikeshedding, talking

00:05:30.460 --> 00:05:33.310
about how to scale
these workers,

00:05:33.310 --> 00:05:35.935
and now we need to
spin up a DevOps team.

00:05:35.935 --> 00:05:37.630
It's no good.

00:05:37.630 --> 00:05:40.840
So that's why, recently,
the Firebase team

00:05:40.840 --> 00:05:43.840
launched Cloud Functions
for Firebase into beta.

00:05:46.420 --> 00:05:49.090
So how Cloud Functions
for Firebase works

00:05:49.090 --> 00:05:52.480
is, instead of spinning
up general compute

00:05:52.480 --> 00:05:56.530
and attaching it to Firebase,
we have event-driven code

00:05:56.530 --> 00:05:57.820
execution.

00:05:57.820 --> 00:06:01.120
It will scale up with
your usage and then

00:06:01.120 --> 00:06:03.760
down to zero when not in use.

00:06:03.760 --> 00:06:06.970
And you're only paying for
those milliseconds that you use.

00:06:06.970 --> 00:06:10.000
This allows us to provide
a minimal glue that

00:06:10.000 --> 00:06:13.690
allows you to stitch all of
Firebase's products together.

00:06:16.330 --> 00:06:18.490
So I mentioned event-driven.

00:06:18.490 --> 00:06:22.870
So what this is is you
actually write snippets of code

00:06:22.870 --> 00:06:25.300
that listen to an event.

00:06:25.300 --> 00:06:27.460
This is Node.js code.

00:06:27.460 --> 00:06:30.490
Those functions
are each isolated.

00:06:30.490 --> 00:06:32.950
They're all running separately,
so if one of them crashes,

00:06:32.950 --> 00:06:34.910
it doesn't take down the other.

00:06:34.910 --> 00:06:37.990
And when those events
come in through Pub/Sub,

00:06:37.990 --> 00:06:41.350
it will execute
that code, and it'll

00:06:41.350 --> 00:06:46.300
either write back
to the database

00:06:46.300 --> 00:06:48.890
or trigger some other action.

00:06:48.890 --> 00:06:51.460
So you can do things
like listen to a database

00:06:51.460 --> 00:06:55.150
write, then the code
can sanitize the input

00:06:55.150 --> 00:06:57.814
and write to another
spot on the database.

00:06:57.814 --> 00:06:58.980
So let's see this in action.

00:07:03.610 --> 00:07:06.720
So here's a very
minimal example.

00:07:06.720 --> 00:07:09.760
This is probably the
basis example every time

00:07:09.760 --> 00:07:10.760
you see something.

00:07:10.760 --> 00:07:12.950
You have a helloWord
function here.

00:07:12.950 --> 00:07:14.660
So this is an HTTP function.

00:07:14.660 --> 00:07:18.310
This allows us to
spin up an API.

00:07:18.310 --> 00:07:20.770
So this HTTP
function is actually

00:07:20.770 --> 00:07:23.740
in the Express.js style.

00:07:23.740 --> 00:07:25.900
And then it sends,
"Hello world!"

00:07:25.900 --> 00:07:27.430
So this is an HTTP request.

00:07:27.430 --> 00:07:29.110
It is synchronous.

00:07:29.110 --> 00:07:32.150
We don't want to be doing
a sync work on this.

00:07:32.150 --> 00:07:37.150
We want to send a response
as quick as we can.

00:07:37.150 --> 00:07:41.390
So let's jump to a more
complicated example.

00:07:41.390 --> 00:07:43.030
So here's one where
we're actually

00:07:43.030 --> 00:07:44.830
listening to the database.

00:07:44.830 --> 00:07:48.940
So up here, we're actually
initialising Firebase functions

00:07:48.940 --> 00:07:53.070
and the admin SDK for Firebase.

00:07:53.070 --> 00:07:56.980
We're pulling in
the configuration

00:07:56.980 --> 00:07:59.770
and initializing Firebase admin.

00:07:59.770 --> 00:08:05.080
We're then listening on
the database, this ref.

00:08:05.080 --> 00:08:06.940
And those are wildcards.

00:08:06.940 --> 00:08:09.790
Those'll be parsed
into our parameters.

00:08:09.790 --> 00:08:15.010
And then onCreate means it's
a database insert rather than

00:08:15.010 --> 00:08:17.710
an update or destroy.

00:08:17.710 --> 00:08:20.260
It sends an event object.

00:08:20.260 --> 00:08:22.870
We pull the current value.

00:08:22.870 --> 00:08:27.130
We pull the username from
that, the text, title body,

00:08:27.130 --> 00:08:32.049
and we send it to the
room ID on an FCM topic.

00:08:32.049 --> 00:08:35.419
So what does this do?

00:08:35.419 --> 00:08:38.650
When a message is
posted to a chat room,

00:08:38.650 --> 00:08:41.039
it will notify,
through FCM, push

00:08:41.039 --> 00:08:45.550
notifications, all subscribers,
regardless of platform.

00:08:45.550 --> 00:08:46.434
This could be iOS.

00:08:46.434 --> 00:08:47.350
This could be Android.

00:08:47.350 --> 00:08:49.270
This could be the web.

00:08:49.270 --> 00:08:53.560
And magically, they're going to
get this and very little code.

00:08:53.560 --> 00:08:54.430
We run this.

00:08:54.430 --> 00:08:56.050
This is an independent function.

00:08:56.050 --> 00:08:57.430
We just deploy this.

00:08:57.430 --> 00:09:00.250
And Google is going to
handle all of the scaling

00:09:00.250 --> 00:09:02.230
up and scaling down as needed.

00:09:04.910 --> 00:09:06.790
So what type of
things do we have?

00:09:06.790 --> 00:09:09.610
You already saw
the HTTPS function.

00:09:09.610 --> 00:09:13.210
That allows you to send
an Express.js response.

00:09:13.210 --> 00:09:16.630
This Express.js
object, it doesn't

00:09:16.630 --> 00:09:19.780
have to be as simple as
just that response send.

00:09:19.780 --> 00:09:23.240
You can actually create
an Express.js application.

00:09:23.240 --> 00:09:26.020
It could be your full JSON API.

00:09:26.020 --> 00:09:28.900
So where I had that
"Hello world!",

00:09:28.900 --> 00:09:32.080
that will match
any path on there.

00:09:32.080 --> 00:09:36.460
So you could just have
exports API and then give it

00:09:36.460 --> 00:09:41.690
an Express application that
has your entire JSON API.

00:09:41.690 --> 00:09:44.800
There is also Cloud
Pub/Sub triggers.

00:09:44.800 --> 00:09:48.610
So Cloud Pub/Sub
allows you to do

00:09:48.610 --> 00:09:51.400
durable publish and subscribe.

00:09:51.400 --> 00:09:53.500
This would allow you to take--

00:09:53.500 --> 00:09:56.590
say, if you do have a
server, you could actually

00:09:56.590 --> 00:09:59.260
be writing to a
Pub/Sub queue, and then

00:09:59.260 --> 00:10:06.000
have Node.js executed whenever
anything triggers on that.

00:10:06.000 --> 00:10:10.050
Cloud Storage for Firebase--
so when files are uploaded,

00:10:10.050 --> 00:10:14.290
you can perform
operations on them.

00:10:14.290 --> 00:10:17.610
Firebase Hosting--
so this integration

00:10:17.610 --> 00:10:21.750
allows you, when you're
using Firebase static website

00:10:21.750 --> 00:10:25.620
hosting, to write proxy calls.

00:10:25.620 --> 00:10:30.330
So you can put in URL pattern
matches that will redirect you

00:10:30.330 --> 00:10:33.420
to a specified Cloud Function.

00:10:33.420 --> 00:10:35.620
So I mentioned the API case.

00:10:35.620 --> 00:10:36.810
There we go.

00:10:36.810 --> 00:10:39.780
That allows you to
take our static hosting

00:10:39.780 --> 00:10:42.540
and make it dynamic.

00:10:42.540 --> 00:10:46.680
There's also the Firebase
Realtime Database, as you saw,

00:10:46.680 --> 00:10:48.660
and there's Firebase
authentication.

00:10:48.660 --> 00:10:52.680
So when users are created,
you can trigger code.

00:10:52.680 --> 00:10:55.140
So a good use case for
this is, say, you're

00:10:55.140 --> 00:11:00.030
storing user settings in
your Realtime Database,

00:11:00.030 --> 00:11:03.060
and you want to set
some defaults there,

00:11:03.060 --> 00:11:05.730
or you want to interact
with a third party

00:11:05.730 --> 00:11:10.290
and, say, set up a
customer record in Stripe,

00:11:10.290 --> 00:11:14.490
or subscribe them to your
mailing list on SendGrid.

00:11:14.490 --> 00:11:16.650
You could actually
do this with that.

00:11:16.650 --> 00:11:19.110
And you can actually pull in
those third-party libraries.

00:11:19.110 --> 00:11:21.420
I mentioned these are Node.js.

00:11:21.420 --> 00:11:24.420
So you can actually pull
in these dependencies

00:11:24.420 --> 00:11:27.315
if they have a Node.js
module available on NPM.

00:11:29.910 --> 00:11:32.520
And then there's Google
Analytics for Firebase.

00:11:32.520 --> 00:11:36.030
So those great Google
Analytics conversion events,

00:11:36.030 --> 00:11:39.420
you can actually listen
for them and trigger code.

00:11:39.420 --> 00:11:43.380
So say a user does
an in-app purchase.

00:11:43.380 --> 00:11:46.410
You could send them an
FCM saying thank you.

00:11:46.410 --> 00:11:48.960
Or you could write somewhere
in the database marking them

00:11:48.960 --> 00:11:51.600
as a VIP customer.

00:11:51.600 --> 00:11:54.270
And there's many
more coming soon.

00:11:54.270 --> 00:11:56.850
If you're interested in the
additional triggers that are

00:11:56.850 --> 00:11:59.610
coming with Cloud
Functions for Firebase,

00:11:59.610 --> 00:12:03.720
I recommend that you
join our alpha program,

00:12:03.720 --> 00:12:08.830
so firebase.google.com/alpha.

00:12:08.830 --> 00:12:13.472
So I'm asking you to take Cloud
Functions to your customers.

00:12:13.472 --> 00:12:15.930
It wouldn't really be fair if
I wasn't willing to embarrass

00:12:15.930 --> 00:12:17.440
myself on stage.

00:12:17.440 --> 00:12:18.900
So time for a live demo.

00:12:32.320 --> 00:12:35.170
So what I've created
here is actually

00:12:35.170 --> 00:12:37.420
an integration with Twilio.

00:12:37.420 --> 00:12:41.150
So praying to the live demo
gods that this will work.

00:12:44.630 --> 00:12:47.225
So let's start, actually,
by saying hello.

00:12:53.058 --> 00:12:53.560
Hm.

00:12:53.560 --> 00:12:56.160
It wants me to send it pictures.

00:12:56.160 --> 00:12:57.870
Let's grab one
from my web camera.

00:13:14.768 --> 00:13:16.035
Now, let's see what it says.

00:13:21.090 --> 00:13:22.070
It's analyzing.

00:13:22.070 --> 00:13:23.303
That's promising.

00:13:28.140 --> 00:13:31.017
"Awesome hair," that's
what it picked up.

00:13:31.017 --> 00:13:32.100
Let's send it another one.

00:13:53.570 --> 00:13:55.410
Analyzing.

00:13:55.410 --> 00:13:56.980
Dah-da-da, dah-da-da, da-da!

00:13:56.980 --> 00:13:57.660
"Music."

00:13:57.660 --> 00:13:58.280
Hm.

00:13:58.280 --> 00:14:02.900
Cloud Vision didn't quite know
what to think of Doc Brown.

00:14:02.900 --> 00:14:05.550
So how did I accomplish this?

00:14:05.550 --> 00:14:08.250
Let's show you the code.

00:14:08.250 --> 00:14:13.340
So here, I actually have my
Twilio messaging callback.

00:14:13.340 --> 00:14:18.530
So what I've done here is
create an HTTPS trigger, Twilio

00:14:18.530 --> 00:14:20.450
messaging callback.

00:14:20.450 --> 00:14:25.160
I glanced on this, but that is
actually the root of the URL.

00:14:25.160 --> 00:14:29.240
So it'll be my Cloud
Function's domain slash

00:14:29.240 --> 00:14:32.380
Twilio messaging callback
will actually be the URL.

00:14:32.380 --> 00:14:34.730
And that, of course, will
pattern match on anything

00:14:34.730 --> 00:14:37.340
after that part.

00:14:37.340 --> 00:14:39.680
So this would be, where if
you are setting up an API,

00:14:39.680 --> 00:14:43.860
you could just do flash API,
pass in an Express application.

00:14:43.860 --> 00:14:46.410
But in this case, I'm just
going to define it all here.

00:14:46.410 --> 00:14:50.510
So I have an HTTPS on
request, Express.js.

00:14:50.510 --> 00:14:53.340
So this is-- actually,
a lot of this code

00:14:53.340 --> 00:14:57.350
here is just dealing
with the format

00:14:57.350 --> 00:15:01.060
that Twilio is
sending me the MMS in.

00:15:01.060 --> 00:15:03.010
So I'm looking at the
number of pictures.

00:15:03.010 --> 00:15:06.160
If it's zero, I say,
"Send me pictures!

00:15:06.160 --> 00:15:07.870
Nom nom."

00:15:07.870 --> 00:15:12.790
Else, I'm going to create
a payload because, well,

00:15:12.790 --> 00:15:15.850
maybe the MMSes were batched.

00:15:15.850 --> 00:15:19.040
Maybe it sent more than
one at the same time.

00:15:19.040 --> 00:15:22.130
So I'm going to insert these
into the Realtime Database.

00:15:22.130 --> 00:15:22.990
So here I go.

00:15:22.990 --> 00:15:27.010
I loop over them, add
to this update payload,

00:15:27.010 --> 00:15:29.870
and then I insert
into the database.

00:15:29.870 --> 00:15:34.830
So I do an update, then
I'm sending Twilio ML.

00:15:34.830 --> 00:15:37.085
So this is actually an XML API.

00:15:42.130 --> 00:15:45.070
And here you can actually
see, I have a little helper.

00:15:45.070 --> 00:15:45.790
down here.

00:15:45.790 --> 00:15:52.560
Send TwiML, response type XML,
send, and then the XML there.

00:15:57.990 --> 00:16:00.670
So that is actually
inserting into the database.

00:16:00.670 --> 00:16:05.340
So I'll actually show you
where those are coming in.

00:16:05.340 --> 00:16:08.340
So there we have
the inbound MMS.

00:16:08.340 --> 00:16:11.430
You can see them
coming to the database.

00:16:11.430 --> 00:16:13.650
And I have a couple
extra parameters

00:16:13.650 --> 00:16:18.510
here that were not for, from
and to, and URL, which I set.

00:16:18.510 --> 00:16:24.780
So those are coming in from
these pair of functions.

00:16:24.780 --> 00:16:28.660
So these functions here are
independent of each other.

00:16:28.660 --> 00:16:30.305
They're running in parallel.

00:16:30.305 --> 00:16:31.680
They don't know
about each other.

00:16:31.680 --> 00:16:33.210
They're isolated.

00:16:33.210 --> 00:16:37.630
So here they're both listening
to the inbound MMS push ID,

00:16:37.630 --> 00:16:39.960
and they're listening
for that insert.

00:16:39.960 --> 00:16:43.180
So what this is doing is
grabbing the image URL,

00:16:43.180 --> 00:16:45.400
and it's using the
Cloud Vision API.

00:16:45.400 --> 00:16:49.440
So that's just an NPM
module that I initialized.

00:16:49.440 --> 00:16:51.600
And it's doing label
detection on those.

00:16:51.600 --> 00:16:56.845
I send it the image URI in
the format that the API wants,

00:16:56.845 --> 00:16:57.720
and that's a promise.

00:16:57.720 --> 00:17:01.810
So I listen for the
result of that, parse it,

00:17:01.810 --> 00:17:04.839
and then I write
it to the database.

00:17:04.839 --> 00:17:07.859
So this event data admin ref--

00:17:07.859 --> 00:17:11.640
so these database
writes, by default,

00:17:11.640 --> 00:17:16.569
are coming in as the user who
inserted it into the database.

00:17:16.569 --> 00:17:20.339
So the Firebase
Realtime Database rules

00:17:20.339 --> 00:17:21.930
will respect that.

00:17:21.930 --> 00:17:25.079
If I use admin ref,
then it's saying

00:17:25.079 --> 00:17:27.390
I want to bypass these rules.

00:17:27.390 --> 00:17:29.940
This works in the context
of Cloud Functions

00:17:29.940 --> 00:17:31.930
where we're admin initialized.

00:17:31.930 --> 00:17:34.620
So here, I can actually
bypass the rules.

00:17:34.620 --> 00:17:36.960
So my database
rules, if I wanted,

00:17:36.960 --> 00:17:42.750
I could actually make it so that
label annotations was actually

00:17:42.750 --> 00:17:47.310
not writeable, but the admin
ref would short-circuit that.

00:17:47.310 --> 00:17:51.000
And then again, so that's
grabbing the label annotations.

00:17:51.000 --> 00:17:54.070
This is also a
SafeSearch annotation.

00:17:54.070 --> 00:17:57.180
So what I'm doing there
is parsing whether or not

00:17:57.180 --> 00:17:58.420
it's safe for work.

00:18:01.470 --> 00:18:04.080
So if I go back to
my Realtime Database,

00:18:04.080 --> 00:18:08.400
we have our label annotations--

00:18:08.400 --> 00:18:14.500
so music, that's
where that came from.

00:18:14.500 --> 00:18:18.730
Performing arts,
performance-- well,

00:18:18.730 --> 00:18:21.400
I guess that is performing
arts and a performance, right?

00:18:24.976 --> 00:18:27.660
Now let's look at our
SafeSearch annotation.

00:18:27.660 --> 00:18:29.480
So it's not very
likely to be adult

00:18:29.480 --> 00:18:33.970
content and unlikely
to be violent.

00:18:33.970 --> 00:18:39.816
So how did we actually then send
a response back to the user?

00:18:39.816 --> 00:18:43.880
So let's take a
look at our code.

00:18:43.880 --> 00:18:44.740
So here we go.

00:18:44.740 --> 00:18:48.700
We're actually responding
to the MMS with labels.

00:18:48.700 --> 00:18:51.790
So [? an isolated ?]
function-- so we're

00:18:51.790 --> 00:18:56.420
listening to the database, this
inbound MMS push ID on update.

00:18:56.420 --> 00:18:59.410
So here we're not just
listening for the insert.

00:18:59.410 --> 00:19:03.240
We're listening for whenever
this node in the database

00:19:03.240 --> 00:19:05.870
is actually updated.

00:19:05.870 --> 00:19:07.780
So we're pulling in
the current value.

00:19:07.780 --> 00:19:11.180
We're also pulling in
the previous value,

00:19:11.180 --> 00:19:12.380
label annotations.

00:19:12.380 --> 00:19:16.250
And what I'm looking for is that
the label annotations are not

00:19:16.250 --> 00:19:20.780
null and that it
didn't previously

00:19:20.780 --> 00:19:22.640
have label annotations.

00:19:22.640 --> 00:19:25.820
So what I'm doing there is
listening for the inserts

00:19:25.820 --> 00:19:28.580
of the label annotations.

00:19:28.580 --> 00:19:31.850
From and to, I put
together the body,

00:19:31.850 --> 00:19:35.930
and then the Twilio client
messages create to/from body.

00:19:39.580 --> 00:19:45.610
And here I'm actually returning,
because the database ones allow

00:19:45.610 --> 00:19:48.680
for asynchronous responses.

00:19:48.680 --> 00:19:51.970
So it expects either a
promise returned, hence

00:19:51.970 --> 00:19:55.130
the return the Twilio
client messages create,

00:19:55.130 --> 00:19:58.380
which is a promise,
or an object.

00:19:58.380 --> 00:19:59.680
That's the return null.

00:19:59.680 --> 00:20:01.570
If it doesn't return
either one of these,

00:20:01.570 --> 00:20:04.930
it's going to be treated
as an error condition.

00:20:04.930 --> 00:20:10.610
So that is sent by
the Twilio client API,

00:20:10.610 --> 00:20:14.030
which is just an NPM library.

00:20:14.030 --> 00:20:16.820
And I actually initialize
it with functions.config.

00:20:16.820 --> 00:20:18.710
So there's actually
Runtime Config

00:20:18.710 --> 00:20:23.690
that you can set so that your
secrets are not in your code.

00:20:28.440 --> 00:20:31.890
So we have this
SafeSearch annotation.

00:20:31.890 --> 00:20:34.620
Where does that come into play?

00:20:34.620 --> 00:20:37.380
That's this last function here.

00:20:37.380 --> 00:20:41.810
So here I'm also listening.

00:20:41.810 --> 00:20:45.350
And what I'm looking for
is, again, the insertion

00:20:45.350 --> 00:20:46.790
of the SafeSearch annotation.

00:20:46.790 --> 00:20:48.200
It's not an update.

00:20:48.200 --> 00:20:50.100
I'm looking at the
previous value.

00:20:50.100 --> 00:20:54.290
So label annotations is
null, SafeSearch null,

00:20:54.290 --> 00:20:55.805
then we're going to return null.

00:20:55.805 --> 00:21:01.680
Else, look for it being
unlikely or very unlikely.

00:21:01.680 --> 00:21:03.890
If it's either one of
those, it short-circuits

00:21:03.890 --> 00:21:05.270
and goes back here.

00:21:05.270 --> 00:21:10.650
So then it actually writes
to a public images ref.

00:21:10.650 --> 00:21:20.160
And there, I've made a static
website where you can actually

00:21:20.160 --> 00:21:20.790
see these.

00:21:26.620 --> 00:21:29.280
So it's very fast
to respond here.

00:21:29.280 --> 00:21:33.610
That's actually because
it's through Firebase

00:21:33.610 --> 00:21:36.305
static hosting, so it's
behind our global CDN.

00:21:38.960 --> 00:21:41.180
And to prove that it's
static, I can actually

00:21:41.180 --> 00:21:43.070
look at the source code.

00:21:43.070 --> 00:21:45.590
And there you can actually
see all those responses.

00:21:45.590 --> 00:21:49.160
So before in
Firebase Hosting, you

00:21:49.160 --> 00:21:52.320
couldn't have these
dynamic type responses.

00:21:52.320 --> 00:21:56.540
And this is a node
application through Express.

00:22:00.060 --> 00:22:02.580
So here I'm actually
using fastbootMiddleware.

00:22:02.580 --> 00:22:04.460
This is an Ember.js application.

00:22:07.300 --> 00:22:10.870
I'm putting it on matching
star, and then I'm

00:22:10.870 --> 00:22:13.750
exporting app as this.

00:22:19.550 --> 00:22:27.860
And if I go to my
Firebase configuration,

00:22:27.860 --> 00:22:31.970
I'm actually rewriting
the entire site

00:22:31.970 --> 00:22:34.970
to go to that Cloud Function.

00:22:34.970 --> 00:22:37.420
So star star goes to
that Cloud Function.

00:22:44.400 --> 00:22:46.580
All right, back to the slides.

00:22:53.630 --> 00:22:57.980
Well, before we had Cloud
Functions for Firebase,

00:22:57.980 --> 00:23:01.610
Firebase developers, in order to
get any of this functionality,

00:23:01.610 --> 00:23:04.880
would have had to spin
up their own servers.

00:23:04.880 --> 00:23:06.290
That's a lot of cost.

00:23:06.290 --> 00:23:08.650
You'd have to have DevOps.

00:23:08.650 --> 00:23:11.750
You'd have to worry
about excess capacity.

00:23:11.750 --> 00:23:15.770
And you'd have to worry about
how to connect to this API.

00:23:15.770 --> 00:23:18.530
And you'd have to
respond with JSON.

00:23:18.530 --> 00:23:22.760
You'd have to worry about
down network or slow network

00:23:22.760 --> 00:23:25.640
connections, whereas
the Firebase SDKs take

00:23:25.640 --> 00:23:27.740
care of all of this for you.

00:23:27.740 --> 00:23:32.030
As a result, you would have
a lot, a lot of complexity.

00:23:34.640 --> 00:23:37.330
Now, with Cloud
Functions for Firebase,

00:23:37.330 --> 00:23:39.350
this is no longer the case.

00:23:39.350 --> 00:23:43.330
You can actually spin
up a robust Node.js code

00:23:43.330 --> 00:23:46.400
to listen to writes
on the database.

00:23:46.400 --> 00:23:49.150
You can use the
Pub/Sub integration

00:23:49.150 --> 00:23:52.810
to respond to any traditional
workers you might have.

00:23:52.810 --> 00:23:55.585
And we have the
HTTPS, which take

00:23:55.585 --> 00:23:58.390
in full Express applications.

00:23:58.390 --> 00:24:01.060
And they can pull in any
of the powerful libraries

00:24:01.060 --> 00:24:03.130
available to you on NPM.

00:24:03.130 --> 00:24:07.570
So I hope I was
able to convince you

00:24:07.570 --> 00:24:09.850
that with Cloud
Functions for Firebase,

00:24:09.850 --> 00:24:13.150
you can do all of the things,
and you don't need a server.

00:24:13.150 --> 00:24:15.250
[APPLAUSE]

00:24:19.150 --> 00:24:22.200
[MUSIC PLAYING]

