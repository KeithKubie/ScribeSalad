WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.100
KEVIN WINTER: Hi everyone.

00:00:01.100 --> 00:00:02.955
As I was introduced, my
name is Kevin Winter.

00:00:02.955 --> 00:00:05.560
I am a developer programs
engineer here at Google on the

00:00:05.560 --> 00:00:07.100
developer relations team.

00:00:07.100 --> 00:00:09.405
And I support the AdWords API.

00:00:09.405 --> 00:00:12.450
I am going to be talking
about some updates to

00:00:12.450 --> 00:00:14.980
reporting for v201109.

00:00:14.980 --> 00:00:18.610
To start off with, the v13
Report Service was introduced

00:00:18.610 --> 00:00:20.190
a while ago, also
pretty limited.

00:00:20.190 --> 00:00:22.520
v13 Report Service
is fairly old.

00:00:22.520 --> 00:00:24.110
It has been around
for a while now.

00:00:24.110 --> 00:00:27.850
It was originally intended to
be sunset in August of 2011.

00:00:27.850 --> 00:00:31.330
So starting with v201109, we're
using kind of a new

00:00:31.330 --> 00:00:34.720
paradigm, a new way of
approaching reports.

00:00:34.720 --> 00:00:35.650
Calls to the API

00:00:35.650 --> 00:00:38.170
ReportDownload Service are free.

00:00:38.170 --> 00:00:39.710
We have a number of improvements
we have been

00:00:39.710 --> 00:00:44.360
making to v201109 to make it a
very suitable replacement for

00:00:44.360 --> 00:00:48.160
running lots of reports and
removing some of the downsides

00:00:48.160 --> 00:00:49.280
of v201101.

00:00:49.280 --> 00:00:51.600
And making it a much more viable
alternative to v13

00:00:51.600 --> 00:00:55.310
cross client reports than
v201101 ever was.

00:00:55.310 --> 00:00:57.560
So to give you a quick example,
this is what a

00:00:57.560 --> 00:01:00.900
v201109 Report Definition
looks like.

00:01:00.900 --> 00:01:01.930
It's fairly straightforward.

00:01:01.930 --> 00:01:04.129
As I mentioned before,
you have a selector.

00:01:04.129 --> 00:01:06.280
Which in this case, only
has a list of fields.

00:01:06.280 --> 00:01:09.670
You can add predicates to the
selector to specify, I only

00:01:09.670 --> 00:01:12.630
want to get my active
campaigns.

00:01:12.630 --> 00:01:15.400
Your report name is mostly for
your own use at this point.

00:01:15.400 --> 00:01:17.470
You can still specify
the Report type.

00:01:17.470 --> 00:01:19.970
Your Date Range type, which
will be using one of these

00:01:19.970 --> 00:01:22.950
dynamic date ranges we
added in v201101.

00:01:22.950 --> 00:01:26.290
Or you can use a Custom Date
Range, and specify them on the

00:01:26.290 --> 00:01:29.950
fly for three quarters ago,
which is something the current

00:01:29.950 --> 00:01:31.005
dynamic date ranges
don't support.

00:01:31.005 --> 00:01:34.110
When making an AdHoc Report
Request, as mentioned, you

00:01:34.110 --> 00:01:37.930
actually send the report
definition as the HTTP request

00:01:37.930 --> 00:01:40.680
body when downloading
the report.

00:01:40.680 --> 00:01:43.800
You can make an HTTP POST
Request, or you can make an

00:01:43.800 --> 00:01:47.100
HTTP GET Request. And I'll go
to that in a few seconds.

00:01:47.100 --> 00:01:49.250
But when you make these
requests, you need to still

00:01:49.250 --> 00:01:52.525
specify authentication and
ClientCustomerID headers.

00:01:52.525 --> 00:01:56.290
As I'll get into later, you're
going to only be able to use

00:01:56.290 --> 00:02:00.240
ClientCustomerID in 201109
and forward.

00:02:00.240 --> 00:02:03.660
The body of the requests will
need to be URL encoded.

00:02:03.660 --> 00:02:05.230
In the previous example,
when I showed you the

00:02:05.230 --> 00:02:08.080
ReportDefinitionXML, it was
not simply for clarity.

00:02:08.080 --> 00:02:11.290
But when you're making this
request, you will need to URL

00:02:11.290 --> 00:02:12.610
encode the body.

00:02:12.610 --> 00:02:15.570
This is just in case you
have any non-URL safe

00:02:15.570 --> 00:02:16.190
characters in this.

00:02:16.190 --> 00:02:17.850
And when we interpret
the request, we know

00:02:17.850 --> 00:02:20.480
exactly what you mean.

00:02:20.480 --> 00:02:28.730
You're going to want to use a
name parameter, __rdxml, to

00:02:28.730 --> 00:02:30.570
reference the report
definition.

00:02:30.570 --> 00:02:34.990
So when you send your Report
Request, you can use the

00:02:34.990 --> 00:02:37.360
content type of form URL
encoded, which is a very

00:02:37.360 --> 00:02:40.770
common content type.

00:02:40.770 --> 00:02:45.060
This is supported by many HTTP
libraries in many languages.

00:02:45.060 --> 00:02:47.240
And all you need to do is just
make sure that you do URL

00:02:47.240 --> 00:02:49.290
encode the body and use
the request parameter.

00:02:49.290 --> 00:02:50.540
It is going to be __rdmxl.

00:02:53.800 --> 00:02:56.870
So when you're making report
downloads, you still need to

00:02:56.870 --> 00:03:00.500
specify some form of
authentication.

00:03:00.500 --> 00:03:03.040
A lot of times when you're
managing a lot of reports, we

00:03:03.040 --> 00:03:06.620
strongly recommend that you use
an MCC account to manage

00:03:06.620 --> 00:03:07.630
these accounts.

00:03:07.630 --> 00:03:10.660
And you use an Auth Token
requested for

00:03:10.660 --> 00:03:12.080
that specific MCC.

00:03:12.080 --> 00:03:14.390
So when you download your
report, the only thing that's

00:03:14.390 --> 00:03:17.260
changing every time is the
ClientCustomerID header.

00:03:17.260 --> 00:03:20.530
The other option you now have is
OAuth authentication, which

00:03:20.530 --> 00:03:22.350
is new for 201109.

00:03:22.350 --> 00:03:25.980
You can now use OAuth to access
the MCC, or even the

00:03:25.980 --> 00:03:28.490
individual accounts, if that's
the way you'd want to do it.

00:03:28.490 --> 00:03:30.910
And you can sign each individual
group or download

00:03:30.910 --> 00:03:35.140
request using the OAuth access
token and still specify the

00:03:35.140 --> 00:03:37.783
ClientCustomerID to identify
which account the

00:03:37.783 --> 00:03:39.050
report will be for.

00:03:39.050 --> 00:03:42.716
So here's an example of how a
Report Request will look.

00:03:42.716 --> 00:03:46.360
You have your URL, which as you
may note, is now version.

00:03:46.360 --> 00:03:52.170
You now have adwords.google.c
om/api/adwords/reportdownload

00:03:52.170 --> 00:03:53.510
which was your normal URL.

00:03:53.510 --> 00:03:56.010
And it's now /v201109.

00:03:56.010 --> 00:03:58.480
This is also new for 201109.

00:03:58.480 --> 00:04:00.930
The key benefit of this is
that now we can start

00:04:00.930 --> 00:04:02.560
versioning report downloads.

00:04:02.560 --> 00:04:05.040
So instead of having us make a
change that changes the way

00:04:05.040 --> 00:04:08.260
the reports return, we can now
make them in a version change

00:04:08.260 --> 00:04:10.260
without having you worried
about your code instantly

00:04:10.260 --> 00:04:12.570
breaking because we have to fix
a bug or make some change

00:04:12.570 --> 00:04:14.890
that, when your code is relying
on a slightly older

00:04:14.890 --> 00:04:16.730
version of the API.

00:04:16.730 --> 00:04:19.010
You're still going to use your
HTTP POST Request header, such

00:04:19.010 --> 00:04:20.779
as ClientCustomerID.

00:04:20.779 --> 00:04:23.810
Your authorization, which will
have the Auth token specified

00:04:23.810 --> 00:04:25.110
at the Google login.

00:04:25.110 --> 00:04:27.560
And your content type
is form URL encoded.

00:04:27.560 --> 00:04:29.930
And the request body would look
very similar to this,

00:04:29.930 --> 00:04:32.450
except that, as I keep
mentioning, it does need to be

00:04:32.450 --> 00:04:35.300
URL encoded, just to make sure
that we can correctly

00:04:35.300 --> 00:04:39.410
interpret your request.

00:04:39.410 --> 00:04:42.470
So now we're going to show you
in Java how you can download

00:04:42.470 --> 00:04:46.950
that report using a very
simple library.

00:04:46.950 --> 00:04:49.355
So we're defining a very simple
interface here, where

00:04:49.355 --> 00:04:52.035
you are specifying the Auth
token, the CID, and the

00:04:52.035 --> 00:04:54.775
ReportDefinitionXML, which are
the three key components.

00:04:54.775 --> 00:04:57.000
If you're downloading for a lot
of accounts with an MCC's

00:04:57.000 --> 00:04:59.210
Auth token, the only thing that
will be changing when you

00:04:59.210 --> 00:05:01.650
make this request will be the
CID for each of these

00:05:01.650 --> 00:05:03.390
subserver requests.

00:05:03.390 --> 00:05:06.650
In our case, we're using an HTTP
URL connection, which is

00:05:06.650 --> 00:05:08.950
built into the Java JPK.

00:05:08.950 --> 00:05:11.460
It's also supported on App
Engine, if you ever decide to

00:05:11.460 --> 00:05:13.770
develop for App Engine.

00:05:13.770 --> 00:05:16.970
And what we do is we open a
connection to our Report

00:05:16.970 --> 00:05:18.740
Service URL.

00:05:18.740 --> 00:05:21.230
We then set DoOutput, which is
basically saying we're going

00:05:21.230 --> 00:05:23.630
to be putting stuff in
the request body.

00:05:23.630 --> 00:05:25.720
We set our request
properties, ie.

00:05:25.720 --> 00:05:29.200
HTTP headers, for our
ClientCustomerID, the

00:05:29.200 --> 00:05:31.050
authorization, and
content type.

00:05:31.050 --> 00:05:33.205
And we set the RequestMethod
at the POST. Because we're

00:05:33.205 --> 00:05:35.530
going to be posting the
message to them.

00:05:35.530 --> 00:05:38.750
Then we're going to just obtain
a OutputStream Writer.

00:05:38.750 --> 00:05:42.240
And wrap that around the
OutputStream for the HTTP URL

00:05:42.240 --> 00:05:47.090
connection, so we can write
directly to the request body.

00:05:47.090 --> 00:05:49.510
Next, we write our parameter,
__rdxml.

00:05:52.210 --> 00:05:55.010
And then we URL encode our
ReportDefinitionXml.

00:05:55.010 --> 00:05:57.020
As I said, so we can interpret
it properly.

00:05:57.020 --> 00:05:59.300
Then we simply get the response
code, which actually

00:05:59.300 --> 00:06:01.740
makes the request and interprets
the response, and

00:06:01.740 --> 00:06:04.490
gets to know what
the result is.

00:06:04.490 --> 00:06:06.412
I'll get into what these status
codes will mean for you

00:06:06.412 --> 00:06:08.080
in a little bit.

00:06:08.080 --> 00:06:11.420
But in our case, we're simply
checking is the response OK?

00:06:11.420 --> 00:06:14.430
Which means that the report
download was successful.

00:06:14.430 --> 00:06:17.440
And in this case, we're simply
creating a temporary file.

00:06:17.440 --> 00:06:22.120
We are copying function body
omitted from the input stream

00:06:22.120 --> 00:06:24.860
of the connection to the output
stream of the file.

00:06:24.860 --> 00:06:26.653
And we're just closing that
and returning back in

00:06:26.653 --> 00:06:27.680
reference to the file.

00:06:27.680 --> 00:06:29.470
There are a lot of things
you could do right here.

00:06:29.470 --> 00:06:32.810
You could write it into
database, do some later

00:06:32.810 --> 00:06:34.040
processing, what have you.

00:06:34.040 --> 00:06:36.100
But in this example, this
is all we're doing.

00:06:36.100 --> 00:06:39.740
So when the Report Request
finishes and you get your HTTP

00:06:39.740 --> 00:06:42.290
response code, these codes will
mean different things.

00:06:42.290 --> 00:06:43.520
200 is OK.

00:06:43.520 --> 00:06:45.310
It means your report downloaded
successfully.

00:06:45.310 --> 00:06:49.410
The response body will contain
your report as requested.

00:06:49.410 --> 00:06:51.690
400 indicates a BAD_REQUEST.
It means that there was

00:06:51.690 --> 00:06:54.450
something wrong about the
request that you made.

00:06:54.450 --> 00:06:57.430
Maybe you forgot to URL encode
the report definition.

00:06:57.430 --> 00:06:59.000
Maybe you're missing a header.

00:06:59.000 --> 00:07:01.940
Maybe you didn't specify the
content-type properly.

00:07:01.940 --> 00:07:04.720
These will return as 400.

00:07:04.720 --> 00:07:06.320
500 is an INTERNAL_SERVER_ERROR.

00:07:06.320 --> 00:07:08.190
This covers any number
of things.

00:07:08.190 --> 00:07:10.530
It could be a transient
temporary failure.

00:07:10.530 --> 00:07:14.790
It could be some other sort
of internal problem.

00:07:14.790 --> 00:07:17.750
But generally, this is the type
of issue that shouldn't

00:07:17.750 --> 00:07:19.430
normally be happening.

00:07:19.430 --> 00:07:22.410
You should be able to retry
after a short wait

00:07:22.410 --> 00:07:23.480
just to make sure.

00:07:23.480 --> 00:07:26.900
Another thing is, we will get
RATE_EXCEEDED_ERRORs if you

00:07:26.900 --> 00:07:29.300
make too many report requests
too quickly from here.

00:07:29.300 --> 00:07:30.890
So you definitely want
to double check this.

00:07:30.890 --> 00:07:33.540
And if you get this, you want to
delay before making another

00:07:33.540 --> 00:07:36.390
request just so that you don't
hit our servers too much and

00:07:36.390 --> 00:07:37.560
get blocked.

00:07:37.560 --> 00:07:39.900
The other thing to mention is
that when you do get anything

00:07:39.900 --> 00:07:43.860
other than a 200, the response
body will contain some text

00:07:43.860 --> 00:07:46.010
that will tell you a little
bit more about why you

00:07:46.010 --> 00:07:46.670
received this error.

00:07:46.670 --> 00:07:49.330
It will tell you that your
report definition was invalid.

00:07:49.330 --> 00:07:52.680
Or it might say that just the
request itself was wrong.

00:07:52.680 --> 00:07:55.520
But it will give you some
more information.

00:07:55.520 --> 00:07:58.740
We also have an explicit flag
for getting Rows with Zero

00:07:58.740 --> 00:07:59.410
Impressions.

00:07:59.410 --> 00:08:02.960
In v201109, we will not include
Zero Impression Rows

00:08:02.960 --> 00:08:07.690
unless you explicitly add this
header and set it to True.

00:08:07.690 --> 00:08:10.850
So we also added a new
CRITERIA_PERFORMANCE_REPORT.

00:08:10.850 --> 00:08:12.230
A lot of people have
asked for this.

00:08:12.230 --> 00:08:15.010
We previously had our
KEYWORDS_PERFORMANCE_REPORT,

00:08:15.010 --> 00:08:16.100
URL_PERFORMANCE_REPORT.

00:08:16.100 --> 00:08:18.420
Now there's a simple
CRITERIA_PERFORMANCE_REPORT

00:08:18.420 --> 00:08:20.165
that includes all of
these types of

00:08:20.165 --> 00:08:21.810
criteria in a single report.

00:08:21.810 --> 00:08:24.630
So you can get consistent
statistics across all of your

00:08:24.630 --> 00:08:27.170
criteria in a single report,
instead of requiring several

00:08:27.170 --> 00:08:29.960
reports or relying on special
behavior and the

00:08:29.960 --> 00:08:31.210
KEYWORD_PERFORMANCE_REPORT.

