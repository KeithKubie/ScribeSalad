WEBVTT
Kind: captions
Language: en

00:00:03.232 --> 00:00:05.690
LAURENS FEENSTRA: I now see
there's many more of these tool

00:00:05.690 --> 00:00:06.340
boxes here.

00:00:06.340 --> 00:00:07.730
I was just walking
down the hall,

00:00:07.730 --> 00:00:10.390
and I hadn't been given one of
these conference tool boxes.

00:00:10.390 --> 00:00:12.430
So I was like, are
people bringing cats

00:00:12.430 --> 00:00:14.950
to this conference?

00:00:14.950 --> 00:00:15.470
Anyway, hi.

00:00:15.470 --> 00:00:16.219
I'm Laurens.

00:00:16.219 --> 00:00:18.940
I'm a product manager for
both Brillo and Weave.

00:00:18.940 --> 00:00:21.950
I'm going to talk a bit
about Google services

00:00:21.950 --> 00:00:23.550
for building devices at scale.

00:00:23.550 --> 00:00:25.900
If you were here
the last sesh, you

00:00:25.900 --> 00:00:28.250
would have heard Andrew
talk about Weave,

00:00:28.250 --> 00:00:31.490
one of these services, and
our communication protocol

00:00:31.490 --> 00:00:35.690
for devices-- and Sam, who
talked about Brillo DOS base

00:00:35.690 --> 00:00:37.120
on Android.

00:00:37.120 --> 00:00:39.510
So this session, I'm going
to go a bit more in-depth

00:00:39.510 --> 00:00:43.180
about these Google services
and our philosophy behind it.

00:00:43.180 --> 00:00:47.580
So these Google services
have three goals.

00:00:47.580 --> 00:00:51.620
First of all, to help you build
a better device experience

00:00:51.620 --> 00:00:52.900
for your end-user.

00:00:52.900 --> 00:00:58.220
Weave is a good example, as it
is primarily end-user phasing.

00:00:58.220 --> 00:00:59.680
I'll give an
example in a second.

00:00:59.680 --> 00:01:04.260
Second, help you get
to market faster.

00:01:04.260 --> 00:01:07.300
A lot of these services
provide core functionality

00:01:07.300 --> 00:01:10.050
for your devices that everybody
will need, like Metrics,

00:01:10.050 --> 00:01:11.260
like crash reporting.

00:01:11.260 --> 00:01:13.640
So instead of you having to
build these things yourself,

00:01:13.640 --> 00:01:15.650
we just include it
in the platform,

00:01:15.650 --> 00:01:17.760
so that you have it
right out of the box.

00:01:17.760 --> 00:01:21.610
And third, help you
operate at scale.

00:01:21.610 --> 00:01:25.335
Over-the-air update service
is a good example of that.

00:01:25.335 --> 00:01:27.960
It's very different if you're a
hobbyist and have only a couple

00:01:27.960 --> 00:01:30.400
of devices versus having
millions of devices out there

00:01:30.400 --> 00:01:32.360
and having to update
them in the field.

00:01:32.360 --> 00:01:35.449
So for one, a device
experience for a user.

00:01:35.449 --> 00:01:37.740
You may have, if you were
here in the previous session,

00:01:37.740 --> 00:01:39.640
you may have seen this.

00:01:39.640 --> 00:01:42.600
This is the set-up
flow for Weave.

00:01:42.600 --> 00:01:45.140
A common problem that
we heard from developers

00:01:45.140 --> 00:01:47.510
for devices right
now is, well, you

00:01:47.510 --> 00:01:49.910
ship a device to your customer.

00:01:49.910 --> 00:01:53.150
Your customer unbox the
device, plugs it in, but then

00:01:53.150 --> 00:01:55.860
has to go to the app store
for his or her mobile phone

00:01:55.860 --> 00:01:56.870
to find your app.

00:01:56.870 --> 00:01:59.200
And let's imagine we're
building a camera, right?

00:01:59.200 --> 00:02:04.200
So I go to the app store, and
I search for a camera app.

00:02:04.200 --> 00:02:08.280
Some of your customers
will find the wrong app,

00:02:08.280 --> 00:02:09.500
and you will drop them there.

00:02:09.500 --> 00:02:13.260
So this is why we included
with Weave a device set-up

00:02:13.260 --> 00:02:19.220
flow, where the moment the user
plugs in the device for Android

00:02:19.220 --> 00:02:23.910
phones, the user says, OK,
Google, set up my device.

00:02:23.910 --> 00:02:26.640
The device will show
up, and the flow

00:02:26.640 --> 00:02:30.150
will guide them through
getting the Wi-Fi credentials,

00:02:30.150 --> 00:02:33.830
assigning an owner, and
then right there installing

00:02:33.830 --> 00:02:36.690
the right app that
you, as a developer,

00:02:36.690 --> 00:02:40.030
told Weave to install.

00:02:40.030 --> 00:02:42.400
So for the next of
the talk-- for rest

00:02:42.400 --> 00:02:45.690
of the talk-- I'll still be
talking about services, and not

00:02:45.690 --> 00:02:49.930
necessarily user facing, but
for you as a developer, starting

00:02:49.930 --> 00:02:53.910
with how do I configure
these Google services?

00:02:53.910 --> 00:02:57.260
So let's stick with
Weave for a second.

00:02:57.260 --> 00:02:59.090
Or, let's talk first
about the process.

00:02:59.090 --> 00:03:01.870
So you're developing
your device.

00:03:01.870 --> 00:03:08.220
And at first, you want to find
the services that you want

00:03:08.220 --> 00:03:09.930
and integrate them to devices.

00:03:09.930 --> 00:03:12.800
Then you launch, these
devices become active,

00:03:12.800 --> 00:03:16.180
and the services help
you iterate at scale.

00:03:16.180 --> 00:03:19.740
First, monitor to
understand what's going on.

00:03:19.740 --> 00:03:21.690
Second, improve.

00:03:21.690 --> 00:03:25.970
If you find issues, to debug
them, find where they are,

00:03:25.970 --> 00:03:27.190
and so you can fix them.

00:03:27.190 --> 00:03:31.730
And thirdly, to
update your fleet.

00:03:31.730 --> 00:03:34.400
Now the tool that
we're using for this

00:03:34.400 --> 00:03:37.400
is the Brillo and Weave
Developer Console.

00:03:37.400 --> 00:03:42.090
This helps you find those
services and integrate them.

00:03:42.090 --> 00:03:43.680
This is a tool-- you
can find the tool

00:03:43.680 --> 00:03:49.800
at weave.google.com/console,
if you're part of the developer

00:03:49.800 --> 00:03:52.530
program.

00:03:52.530 --> 00:03:53.520
So how does this work?

00:03:53.520 --> 00:03:56.120
Configuring the Weave service.

00:03:56.120 --> 00:04:00.230
If you go to the Configure
tab on the Developer Console,

00:04:00.230 --> 00:04:01.920
you'll see the
Weave configuration.

00:04:01.920 --> 00:04:04.730
And this will work
similarly for many services.

00:04:04.730 --> 00:04:10.065
So the first thing that we'll
do is we'll ask you, hey,

00:04:10.065 --> 00:04:11.690
what sort of device
are you developing?

00:04:11.690 --> 00:04:14.560
In this case, as an example,
we're developing a camera.

00:04:14.560 --> 00:04:17.519
So once you've told us, hey,
I'm developing a camera,

00:04:17.519 --> 00:04:21.140
we'll give you the configuration
and give you an option

00:04:21.140 --> 00:04:24.100
to download the templates
given that we know what type

00:04:24.100 --> 00:04:25.590
of device you have.

00:04:25.590 --> 00:04:28.640
Second, we help you find
additional documentation

00:04:28.640 --> 00:04:30.620
and testing tools.

00:04:30.620 --> 00:04:35.220
And thirdly, generate the
API keys and OAuth tokens,

00:04:35.220 --> 00:04:37.660
for the service it
lists on the device

00:04:37.660 --> 00:04:39.385
to communicate with our server.

00:04:42.300 --> 00:04:45.120
Now, a little bit more
information about the tools

00:04:45.120 --> 00:04:45.831
that we provide.

00:04:45.831 --> 00:04:54.600
So, if you're using the Weave
service, one of the tools

00:04:54.600 --> 00:04:58.000
is testing with
prototype devices.

00:04:58.000 --> 00:04:59.820
Again, in the Weave
Developer Console,

00:04:59.820 --> 00:05:02.610
in a tab called Your
Devices, the moment

00:05:02.610 --> 00:05:06.200
you plug in a device that has
the Weave service enabled,

00:05:06.200 --> 00:05:08.250
the device will show up.

00:05:08.250 --> 00:05:10.500
And it allows you to
see its current state.

00:05:10.500 --> 00:05:12.250
And it allows you to
send commands to it.

00:05:12.250 --> 00:05:14.840
So if you have a camera,
and you've just implemented,

00:05:14.840 --> 00:05:18.040
let's say, turn on the
flashlight function,

00:05:18.040 --> 00:05:21.050
you can send that command to
the device and debug and test

00:05:21.050 --> 00:05:24.560
whether it actually works.

00:05:24.560 --> 00:05:27.620
Then let me talk a bit about
other services besides Weave.

00:05:27.620 --> 00:05:31.190
First, metrics
from field devices.

00:05:31.190 --> 00:05:35.000
So if you're using
Weave out of the box,

00:05:35.000 --> 00:05:40.640
there's a lot of out of the
box metrics that we give you.

00:05:40.640 --> 00:05:43.770
So for devices, they
retain an active connection

00:05:43.770 --> 00:05:46.110
to the Weave server, providing
it with state updates

00:05:46.110 --> 00:05:47.830
and receiving commands
from client app.

00:05:47.830 --> 00:05:51.370
And over this service data,
we collect aggregated steps.

00:05:51.370 --> 00:05:54.380
So we can show you graphs
for online devices--

00:05:54.380 --> 00:05:57.620
as you see here-- top
versions, top device

00:05:57.620 --> 00:06:03.040
models, new registrations,
the number of commands

00:06:03.040 --> 00:06:04.200
sent per hour.

00:06:04.200 --> 00:06:06.820
So if you see those
tank, you know

00:06:06.820 --> 00:06:08.570
there is something
wrong with your device.

00:06:08.570 --> 00:06:09.944
And a command
distribution, which

00:06:09.944 --> 00:06:12.300
gives you an idea of how
are my devices being used,

00:06:12.300 --> 00:06:16.300
what sort of commands are being
sent, and in what proportion?

00:06:16.300 --> 00:06:19.430
So, of course,
over these metrics,

00:06:19.430 --> 00:06:21.910
consumer privacy
is very important.

00:06:21.910 --> 00:06:26.060
So we never track a single
device, always an aggregation.

00:06:26.060 --> 00:06:30.260
And for launch devices,
there is a 50 device minimum

00:06:30.260 --> 00:06:32.890
that we track.

00:06:32.890 --> 00:06:37.340
Then, the second
service, OTA updates.

00:06:37.340 --> 00:06:40.630
So OTA updates is one of
the most important services

00:06:40.630 --> 00:06:41.214
that we offer.

00:06:41.214 --> 00:06:43.296
And you may have heard
other people talk about it.

00:06:43.296 --> 00:06:44.480
And it's for two reasons.

00:06:44.480 --> 00:06:46.580
One, we would love
for device makers

00:06:46.580 --> 00:06:50.080
to continuously update your
devices, both for fixes

00:06:50.080 --> 00:06:51.660
and for new functionality.

00:06:51.660 --> 00:06:54.120
And the second is security.

00:06:54.120 --> 00:06:57.280
If you want your devices
to have the latest security

00:06:57.280 --> 00:07:00.030
features from Brillo and,
perhaps more importantly,

00:07:00.030 --> 00:07:03.310
if you do discover that there
is an issue with your device,

00:07:03.310 --> 00:07:05.910
you want to be able to send
an update to your devices

00:07:05.910 --> 00:07:06.860
immediately.

00:07:06.860 --> 00:07:09.250
So this is one of the
challenges I think we

00:07:09.250 --> 00:07:10.770
face as an industry as a whole.

00:07:10.770 --> 00:07:14.100
And if you read outside articles
from the press about IOT,

00:07:14.100 --> 00:07:16.920
one of the things that
always comes up is security.

00:07:16.920 --> 00:07:21.320
So Paul Cavell, that's another
product manager on Brillo,

00:07:21.320 --> 00:07:24.954
will have a talk tomorrow
specifically about security.

00:07:24.954 --> 00:07:27.370
Right now, I'm going to talk
a little more in-depth about,

00:07:27.370 --> 00:07:29.820
what is the OTA update.

00:07:29.820 --> 00:07:31.630
How does it work?

00:07:31.630 --> 00:07:34.437
For now, it's
Brillo-specific, so you

00:07:34.437 --> 00:07:36.270
have to build your
device on Brillo in order

00:07:36.270 --> 00:07:38.920
to get our OTA update service.

00:07:38.920 --> 00:07:41.940
So how does it work-- to push
an update to your devices

00:07:41.940 --> 00:07:43.610
securely in five steps.

00:07:43.610 --> 00:07:47.650
First, you use the
Brillo tools to create

00:07:47.650 --> 00:07:49.590
a production build and sign it.

00:07:49.590 --> 00:07:52.420
We have tools that allow
you to generate a key,

00:07:52.420 --> 00:07:54.300
and then sign your
image using that key.

00:07:54.300 --> 00:07:56.670
The second step that you do,
you go to the Brillo Weave

00:07:56.670 --> 00:07:59.580
developer console and
you upload this binary.

00:07:59.580 --> 00:08:02.680
What we do is then, once
we receive this binary,

00:08:02.680 --> 00:08:07.440
is we look what are the
other versions out there.

00:08:07.440 --> 00:08:10.810
And for the most common
versions out there, we generate,

00:08:10.810 --> 00:08:12.730
delta so that your
devices don't have

00:08:12.730 --> 00:08:16.300
to download the entire payload
every time, but instead

00:08:16.300 --> 00:08:20.730
can download just the
things, just the deltas,

00:08:20.730 --> 00:08:23.540
that is needed for this update.

00:08:23.540 --> 00:08:27.760
We generate the payloads
that your devices

00:08:27.760 --> 00:08:31.120
will be downloading and sign
it using a server-side key.

00:08:31.120 --> 00:08:34.000
This is to verify
that for the device,

00:08:34.000 --> 00:08:35.870
that this download,
this payload indeed

00:08:35.870 --> 00:08:37.980
came from the Google
update servers and not

00:08:37.980 --> 00:08:39.630
some malicious other servers.

00:08:39.630 --> 00:08:42.360
So once you've
uploaded your binary

00:08:42.360 --> 00:08:46.370
and the payloads are there,
you select a release channel.

00:08:46.370 --> 00:08:48.230
So the release channel
for Brillo and Weave

00:08:48.230 --> 00:08:50.870
works just like it
works on Chrome,

00:08:50.870 --> 00:08:53.200
if you've ever
changed the release

00:08:53.200 --> 00:08:54.380
channel for your browser.

00:08:54.380 --> 00:08:56.190
Namely, at start,
we'll have three.

00:08:56.190 --> 00:08:58.080
We'll have a stable
release channel.

00:08:58.080 --> 00:09:01.080
This is where most of
your users will be on.

00:09:01.080 --> 00:09:03.630
We have a beta release
channel, which is, you can see,

00:09:03.630 --> 00:09:05.220
is a trusted tester channel.

00:09:05.220 --> 00:09:07.110
And we have a developer
release channel,

00:09:07.110 --> 00:09:10.470
which your team will use.

00:09:10.470 --> 00:09:14.260
So each device knows
what channel it's on,

00:09:14.260 --> 00:09:18.700
and in that case gets
a separate build.

00:09:21.360 --> 00:09:24.580
So once you select
your release channel,

00:09:24.580 --> 00:09:25.680
you schedule your push.

00:09:25.680 --> 00:09:27.300
You select your version.

00:09:27.300 --> 00:09:30.100
Select a percentage
of users that you'll

00:09:30.100 --> 00:09:31.480
want to receive your build.

00:09:31.480 --> 00:09:33.400
For instance, especially for
the stable release channel,

00:09:33.400 --> 00:09:35.400
you probably don't want
to push out your release

00:09:35.400 --> 00:09:36.650
to everybody at once.

00:09:36.650 --> 00:09:39.060
So you select 1%
of my stable users,

00:09:39.060 --> 00:09:41.410
I want to get this build first.

00:09:41.410 --> 00:09:44.200
And you select your date.

00:09:44.200 --> 00:09:47.750
Once you press Save,
step five is watching

00:09:47.750 --> 00:09:49.640
your fleet update itself.

00:09:49.640 --> 00:09:52.920
So as you can see
here, right now

00:09:52.920 --> 00:09:57.180
we've pushed something
to the Dev channel,

00:09:57.180 --> 00:09:59.910
the development build.

00:09:59.910 --> 00:10:04.290
We've scheduled it for
November 24 at 12:00 AM.

00:10:04.290 --> 00:10:09.150
So the process now is,
once this date is hit,

00:10:09.150 --> 00:10:13.000
a device will check in, by
default, every five hours.

00:10:13.000 --> 00:10:15.820
And it will send to the
Google Update server

00:10:15.820 --> 00:10:19.210
its product ID, what product
am I, what version am I on,

00:10:19.210 --> 00:10:20.984
and what channel am I on.

00:10:20.984 --> 00:10:23.150
Then the server, if there
is a new download-- which,

00:10:23.150 --> 00:10:26.410
in this case, there is--
will give it a download link.

00:10:26.410 --> 00:10:29.340
The device starts
downloading the update,

00:10:29.340 --> 00:10:31.080
verifies the payload,
that it indeed

00:10:31.080 --> 00:10:32.700
came from the Google server.

00:10:32.700 --> 00:10:35.680
And for Brillo devices, there's
two partitions, A partition

00:10:35.680 --> 00:10:36.699
and B partition.

00:10:36.699 --> 00:10:38.990
Let's say the device is now
running on the A partition,

00:10:38.990 --> 00:10:41.380
and will start applying
the update on the B

00:10:41.380 --> 00:10:44.330
partition in the background
while the device is still

00:10:44.330 --> 00:10:45.940
active.

00:10:45.940 --> 00:10:47.870
It applies the update.

00:10:47.870 --> 00:10:53.550
And now it has to
decide when to reboot.

00:10:53.550 --> 00:10:58.440
You may have seen that there's
1% left on older versions.

00:10:58.440 --> 00:10:59.870
You may have
wondered why that is.

00:10:59.870 --> 00:11:03.660
So for each product
category, there

00:11:03.660 --> 00:11:05.650
may be a different
reboot process.

00:11:05.650 --> 00:11:08.070
For instance, for
Chromebooks, the user

00:11:08.070 --> 00:11:09.530
gets to decide when to reboot.

00:11:09.530 --> 00:11:11.960
Even if the update
has been applied

00:11:11.960 --> 00:11:13.790
on the other partition
in the background,

00:11:13.790 --> 00:11:16.634
the user still wants to decide
themselves when to reboot.

00:11:16.634 --> 00:11:18.300
So it could be that
some of the devices,

00:11:18.300 --> 00:11:20.420
even though the update
is there, they simply

00:11:20.420 --> 00:11:24.040
haven't rebooted to
the other version yet.

00:11:24.040 --> 00:11:26.810
Another example is routers.

00:11:26.810 --> 00:11:28.850
For routers, you
do not want to give

00:11:28.850 --> 00:11:32.197
the user a notification when
there's a new update available.

00:11:32.197 --> 00:11:34.530
But instead, you probably
want to have some heuristics--

00:11:34.530 --> 00:11:37.390
between midnight
and 5:00 AM, if you

00:11:37.390 --> 00:11:39.960
see very little traffic
on a network, that

00:11:39.960 --> 00:11:41.640
is your moment to reboot.

00:11:41.640 --> 00:11:43.780
This is important
because imagine

00:11:43.780 --> 00:11:46.620
coming home from a night out,
having to go to the restroom,

00:11:46.620 --> 00:11:49.090
you're at your door,
and at that moment

00:11:49.090 --> 00:11:51.240
your smart door
lock decides that it

00:11:51.240 --> 00:11:52.530
wants to apply and reboot.

00:11:52.530 --> 00:11:54.040
That is not the optimal moment.

00:11:54.040 --> 00:11:57.490
So for you as a developer,
we provide you tools

00:11:57.490 --> 00:12:02.550
to decide the rebooting logic.

00:12:02.550 --> 00:12:03.540
Crash reporting.

00:12:03.540 --> 00:12:06.360
So imagine the situation
that we just saw.

00:12:06.360 --> 00:12:09.730
You are pushing an update to
1% of your stable channel.

00:12:09.730 --> 00:12:13.030
One of the metrics that
you want to be watching

00:12:13.030 --> 00:12:15.900
is crashiness of your device.

00:12:15.900 --> 00:12:18.560
What is the number of
crashes per hour that we're

00:12:18.560 --> 00:12:21.110
seeing coming from your device?

00:12:21.110 --> 00:12:24.800
That's someone you're
seeing here, the crashiness.

00:12:24.800 --> 00:12:27.980
Old Brillo devices, by default,
come with a crash reporting

00:12:27.980 --> 00:12:36.840
service, made with the open
source daemon called Breakpad.

00:12:36.840 --> 00:12:39.000
These are open source
crash reporting tools.

00:12:39.000 --> 00:12:44.400
So when you upload a new build
to our auto-update service,

00:12:44.400 --> 00:12:47.020
with it, is uploaded
Symbol files, which

00:12:47.020 --> 00:12:48.610
get sent to our crash server.

00:12:48.610 --> 00:12:51.040
The moment one of
these devices crashes,

00:12:51.040 --> 00:12:52.270
it will generate a mini-dump.

00:12:52.270 --> 00:12:53.830
And when it comes
back online, it

00:12:53.830 --> 00:12:56.240
will send the mini-dump
to our crash servers.

00:12:56.240 --> 00:13:00.810
On our crash server, the
mini-dump and the Symbol files

00:13:00.810 --> 00:13:03.290
are combined, and a
stack trace is generated,

00:13:03.290 --> 00:13:04.730
and included in the report.

00:13:04.730 --> 00:13:06.438
And that's what you're
seeing right here,

00:13:06.438 --> 00:13:10.550
the number of reports that come
in with those stack traces,

00:13:10.550 --> 00:13:13.210
which will help you
triage the problem.

00:13:13.210 --> 00:13:16.990
Like if you suddenly see a
spike in the number of crashes,

00:13:16.990 --> 00:13:19.090
we'll show you here,
what are the top 10

00:13:19.090 --> 00:13:21.760
crashes that you received
in the last seven days.

00:13:21.760 --> 00:13:25.210
Or you can minimize
that time window

00:13:25.210 --> 00:13:27.490
to see, OK, what
are the top crashes

00:13:27.490 --> 00:13:31.200
from this particular version
that I just uploaded?

00:13:31.200 --> 00:13:33.960
And we'll show
you, in this case,

00:13:33.960 --> 00:13:37.950
if you look at the
top two, the top crash

00:13:37.950 --> 00:13:40.620
has 30% of the total crashes.

00:13:40.620 --> 00:13:42.940
The second cluster--
a cluster of four--

00:13:42.940 --> 00:13:44.540
is 15% of each of the crashes.

00:13:44.540 --> 00:13:48.880
So if you solve
those two issues,

00:13:48.880 --> 00:13:52.330
you've already solved 45%
of your total crashes.

00:13:52.330 --> 00:13:55.170
And the final column
is, what is the delta

00:13:55.170 --> 00:13:57.390
with the previous time period.

00:13:57.390 --> 00:14:01.370
So with this, you can decide,
OK, these are my top issues.

00:14:01.370 --> 00:14:04.220
And then dive into an
individual report within one

00:14:04.220 --> 00:14:06.950
of these clusters showing
you the stack trace,

00:14:06.950 --> 00:14:10.360
and some meta data of what
was going on on that device

00:14:10.360 --> 00:14:13.440
at the moment of crash.

00:14:13.440 --> 00:14:15.460
The final service I
want to talk about that

00:14:15.460 --> 00:14:18.320
is included with Brillo and
Weave are performance graphs.

00:14:22.460 --> 00:14:24.050
These come from a
metric reporting

00:14:24.050 --> 00:14:30.060
service that periodically
gathers data from the device.

00:14:30.060 --> 00:14:35.470
For instance, in this case, it
is what is the data partition

00:14:35.470 --> 00:14:36.940
usage in megabytes?

00:14:36.940 --> 00:14:41.480
Other examples are CPU usage,
memory usage, or page faults.

00:14:41.480 --> 00:14:43.930
Because this is data
generated from a device,

00:14:43.930 --> 00:14:47.170
like crash reports,
privacy is important.

00:14:47.170 --> 00:14:52.270
No PAI is collected
in these histograms.

00:14:52.270 --> 00:14:56.170
And an opt-in is required
from the end-user

00:14:56.170 --> 00:15:00.010
during device setup before this
metric service becomes active.

00:15:00.010 --> 00:15:03.490
This is useful, and we can track
over time and over versions,

00:15:03.490 --> 00:15:05.870
like what is my data
partition usage?

00:15:05.870 --> 00:15:09.100
And does my CPU usage
go up over time?

00:15:09.100 --> 00:15:11.710
And if a lot of
users complain, hey,

00:15:11.710 --> 00:15:14.050
my device is
starting to act slow,

00:15:14.050 --> 00:15:17.740
you can use this to figure out,
hey, what causes these field

00:15:17.740 --> 00:15:21.400
devices to act slow.

00:15:21.400 --> 00:15:26.490
Over the course of this year, we
will start adding more services

00:15:26.490 --> 00:15:29.690
to Brillo and Weave devices.

00:15:29.690 --> 00:15:31.450
We'd like to get
your input as well.

00:15:31.450 --> 00:15:35.154
What sort of itches do you
have that you'd like scratched?

00:15:35.154 --> 00:15:36.820
And what sort of
functionality would you

00:15:36.820 --> 00:15:39.370
like to see in the
Brillo and Weave platform

00:15:39.370 --> 00:15:42.710
that we could help
provide for you?

00:15:42.710 --> 00:15:46.050
So tomorrow, there
will be office hours

00:15:46.050 --> 00:15:48.780
from 12:00 PM to 2:00 PM.

00:15:48.780 --> 00:15:51.510
So come ask your
questions there.

00:15:51.510 --> 00:15:54.890
There's CodeLabs going on,
on enabling Google services

00:15:54.890 --> 00:15:58.140
and pushing OTA updates, if you
want to get your hands dirty

00:15:58.140 --> 00:15:59.260
and play around with this.

00:15:59.260 --> 00:16:01.600
I'm Laurens Feenstra,
I'm a product manager,

00:16:01.600 --> 00:16:02.811
and I hope to see you there.

00:16:02.811 --> 00:16:03.310
Thank you.

00:16:09.650 --> 00:16:14.090
Any questions for Google
services, for devices to scale?

00:16:14.090 --> 00:16:16.140
There's two
microphones to decide,

00:16:16.140 --> 00:16:18.050
and there's one
microphone up there,

00:16:18.050 --> 00:16:21.008
if anybody has a question
they'd like to ask.

00:16:26.884 --> 00:16:28.050
AUDIENCE: I have a question.

00:16:28.050 --> 00:16:30.840
For OTA updates, do
you have to allocate

00:16:30.840 --> 00:16:35.950
a double the size of memory
for the original code

00:16:35.950 --> 00:16:38.270
and in the updated code?

00:16:38.270 --> 00:16:40.080
And then you can swap
one for the other

00:16:40.080 --> 00:16:41.770
when you've finished the update?

00:16:41.770 --> 00:16:43.936
LAURENS FEENSTRA: Can we
put the volume up a little?

00:16:43.936 --> 00:16:45.590
I've had trouble
hearing the question.

00:16:45.590 --> 00:16:48.860
AUDIENCE: I was asking--
oh, that's louder.

00:16:48.860 --> 00:16:54.650
Do you need twice as much
code space for OTA updates

00:16:54.650 --> 00:16:57.530
in order to hold both the
original code and the updated

00:16:57.530 --> 00:16:58.280
code?

00:16:58.280 --> 00:17:01.550
LAURENS FEENSTRA: No, it
will update on the fly.

00:17:01.550 --> 00:17:04.015
So you do need
twice as much space,

00:17:04.015 --> 00:17:05.640
because you have two
partitions, right?

00:17:05.640 --> 00:17:06.790
Brillo has two
partitions by default.

00:17:06.790 --> 00:17:08.130
But it will update on the fly.

00:17:08.130 --> 00:17:09.670
This update's smart about that.

00:17:09.670 --> 00:17:09.849
AUDIENCE: OK.

00:17:09.849 --> 00:17:10.349
Thanks.

00:17:13.660 --> 00:17:16.369
LAURENS FEENSTRA: Hi.

00:17:16.369 --> 00:17:17.880
Yes, up there.

00:17:17.880 --> 00:17:19.260
AUDIENCE: If the
customer decides

00:17:19.260 --> 00:17:23.030
not to register with
Google, their Brillo device,

00:17:23.030 --> 00:17:25.319
can the customer
still receive updates?

00:17:25.319 --> 00:17:27.069
LAURENS FEENSTRA:
That's a great question.

00:17:27.069 --> 00:17:28.140
Yes, it can.

00:17:28.140 --> 00:17:29.890
The update service is
separate from Weave.

00:17:29.890 --> 00:17:33.127
As in, it would require an
active internet connection,

00:17:33.127 --> 00:17:34.710
of course, but the
update server still

00:17:34.710 --> 00:17:37.640
pings in even if the customer
decides not to register

00:17:37.640 --> 00:17:40.169
the device with Weave.

00:17:40.169 --> 00:17:42.460
Basically, the fact that it
is Google in the background

00:17:42.460 --> 00:17:46.019
is opaque to the end-user and
the end-user shouldn't care.

00:17:46.019 --> 00:17:46.560
AUDIENCE: OK.

00:17:50.604 --> 00:17:51.770
LAURENS FEENSTRA: All right?

00:17:51.770 --> 00:17:53.060
Oh, there's one question there.

00:17:53.060 --> 00:17:53.560
Hi.

00:17:53.560 --> 00:17:54.299
AUDIENCE: Hi.

00:17:54.299 --> 00:17:56.590
I would like to know how does
it compare with platforms

00:17:56.590 --> 00:17:59.440
like openHAB that tries to
integrate all the smart home

00:17:59.440 --> 00:18:02.140
automation systems, like,
for example, SmartThings Hub,

00:18:02.140 --> 00:18:06.750
and like Philips Hue or Insteon.

00:18:06.750 --> 00:18:08.890
So, do you have something
like that for integrating

00:18:08.890 --> 00:18:12.530
all these smart home systems?

00:18:12.530 --> 00:18:16.200
LAURENS FEENSTRA: That will be
a great question for Andrew,

00:18:16.200 --> 00:18:18.000
who is the PM for Weave.

00:18:18.000 --> 00:18:20.427
So if you come to
our office tomorrow,

00:18:20.427 --> 00:18:21.760
you could ask him that question.

00:18:21.760 --> 00:18:23.176
AUDIENCE: Yeah,
the reason I asked

00:18:23.176 --> 00:18:25.380
was, you were talking
about number of crashes.

00:18:25.380 --> 00:18:27.380
I was thinking like, if
you could have something

00:18:27.380 --> 00:18:30.390
like that in your system that
supports them, you could say,

00:18:30.390 --> 00:18:33.220
OK, this SmartThings
is better than,

00:18:33.220 --> 00:18:34.740
for example, Insteon smart--

00:18:34.740 --> 00:18:35.740
LAURENS FEENSTRA: Right.

00:18:35.740 --> 00:18:37.780
So you can use a
peer comparison.

00:18:37.780 --> 00:18:39.620
Like how crashy is this?

00:18:39.620 --> 00:18:42.394
Yeah, so for our crash
servers, of course

00:18:42.394 --> 00:18:43.810
you can only see
the crash reports

00:18:43.810 --> 00:18:44.865
for your specific device.

00:18:47.480 --> 00:18:50.180
By default, we don't give
you access to other devices.

00:18:50.180 --> 00:18:51.740
It is interesting
idea, though, to do

00:18:51.740 --> 00:18:52.950
a bit of a peer comparison.

00:18:52.950 --> 00:18:56.880
Of all the cameras, which
camera is the most crashy?

00:18:56.880 --> 00:18:58.670
But, yeah.

00:18:58.670 --> 00:18:59.407
For now, no.

00:18:59.407 --> 00:19:00.240
AUDIENCE: All right.

00:19:00.240 --> 00:19:01.984
Thank you.

00:19:01.984 --> 00:19:03.150
LAURENS FEENSTRA: All right.

00:19:03.150 --> 00:19:05.300
Thanks for listening, everybody.

