WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:11.740
&gt;&gt; 
SANDHOLM: My name is Anders, Anders Sandholm,

00:00:11.740 --> 00:00:19.470
I'm a member of the Chrome team and so is
Pavel Feldman who will join me in a bit in

00:00:19.470 --> 00:00:26.439
talking about Chrome Development Tools. We're
both very excited to be here and to be able

00:00:26.439 --> 00:00:32.169
to talk about some of the work we've been
doing over the past year. And in fact, we

00:00:32.169 --> 00:00:37.380
came here all the way from Europe to be with
you today to talk about this. We'll go through

00:00:37.380 --> 00:00:47.420
some of the new exciting features in the Chrome
Development Tools. Just--before we get started,

00:00:47.420 --> 00:00:55.399
I wanted to get a feel for, you know, to what
extent we're barking up the wrong tree. So

00:00:55.399 --> 00:00:58.530
amongst you when you, you know, when you're
developing web apps just let me see, like,

00:00:58.530 --> 00:01:05.790
a show of hands, you know, how many of you
are using Firebug on a regular basis for doing

00:01:05.790 --> 00:01:15.179
that? Okay. So that's a fair share. How many
of you know Web Inspector and the Chrome Developer

00:01:15.179 --> 00:01:16.179
Tools?
&gt;&gt; Yeah

00:01:16.179 --> 00:01:21.630
&gt;&gt; SANDHOLM: Yeah. How many of you use it
on a regular basis when debugging web apps?

00:01:21.630 --> 00:01:27.009
&gt;&gt; Yeah
&gt;&gt; SANDHOLM: Okay. So it's some. Okay. So

00:01:27.009 --> 00:01:33.690
if nothing else, I hope that at least, you
know, after this session, you have seen some

00:01:33.690 --> 00:01:40.530
exciting features in Chrome Developer Tools
and maybe want to try it out and give it a

00:01:40.530 --> 00:01:44.470
spin. One more thing before we get started,
as you can see at the bottom of the screen,

00:01:44.470 --> 00:01:51.849
there's a link. You might want to note that
down. There'll be live notes and you can ask

00:01:51.849 --> 00:02:01.020
questions for this session. It's a wave that's
specific to this session. Also at the end,

00:02:01.020 --> 00:02:08.530
obviously, we will have some time for questions.
And I will--we'll take questions here from

00:02:08.530 --> 00:02:14.739
the audience as well. Right, so let me talk
a little bit about what we're going to cover

00:02:14.739 --> 00:02:20.641
in the session. Essentially, this is going
to be about, you know, tools that you can

00:02:20.641 --> 00:02:27.630
use for debugging and optimizing your web
apps. The structures are as follows--I'll

00:02:27.630 --> 00:02:34.010
talk a bit about what Chrome Developer Tools
is and give you a bit of a brief background

00:02:34.010 --> 00:02:39.550
of the history of the project what we've been
doing over the past year or so, and then I'll

00:02:39.550 --> 00:02:48.690
pass on the floor to Pavel, who'll talk in
more detail about the tools itself. A quick

00:02:48.690 --> 00:02:55.650
walkthrough of the panels or the overall features
available in the tool, and then after that,

00:02:55.650 --> 00:03:02.900
a few developer stories if you want or issues
that--when you think you find familiar if

00:03:02.900 --> 00:03:07.530
you've been developing web servers. And we'll
show how the Developer Tools in Chrome can

00:03:07.530 --> 00:03:15.180
help you or support you in those tasks. If
time permits, we can cover a little bit also

00:03:15.180 --> 00:03:21.750
the internal design of Dev Tools. And then
obviously at the end, we'll have a time for

00:03:21.750 --> 00:03:29.010
questions. So again, as you've guessed maybe
from the title or from the questions I asked

00:03:29.010 --> 00:03:35.640
before. If you think about what Chrome Developer
Tools is or what this session is going to

00:03:35.640 --> 00:03:41.040
be about, it is--you can think of it essentially--since
so many know and use Firebug, you can think

00:03:41.040 --> 00:03:46.480
of it essentially as, you know, Chrome Dev
Tools being to Chrome where Firebug is to

00:03:46.480 --> 00:03:54.380
Firefox? It's not a part of Firebug, but rather
it's something based on the Web Inspector

00:03:54.380 --> 00:04:02.560
in WebKit. It is not something you have to
download if you're using Chrome as part of

00:04:02.560 --> 00:04:07.790
the standard Chrome distributions. So it's
right there and you can use it with the browser.

00:04:07.790 --> 00:04:13.210
And one way to think about it if you're familiar
with the Inspector is the--one way to think

00:04:13.210 --> 00:04:19.590
about if you're familiar with the Inspector
is essentially is the Web Inspector running

00:04:19.590 --> 00:04:26.630
with the JavaScript engine specific to Chrome,
namely V8 underneath, plus supporting Chromes

00:04:26.630 --> 00:04:33.260
multi-process architecture. This allows us
to develop new features so that they'll be

00:04:33.260 --> 00:04:37.630
available in all WebKit browsers or in some
cases where we're utilizing features that

00:04:37.630 --> 00:04:42.460
are specific to V8. We've been able to launch
features that are available as part of the

00:04:42.460 --> 00:04:56.090
Inspector but, for a start, may only be available
in Chrome. Right, so let me continue with

00:04:56.090 --> 00:05:01.370
a brief background of the history of the Dev
Tools in Chrome. So essentially, you know,

00:05:01.370 --> 00:05:08.190
Chrome launch a little over--or about a year
and half ago. And at the very beginning, there

00:05:08.190 --> 00:05:14.240
was only a rudimentary support for developers.
So, it's a--basically a command line debugger

00:05:14.240 --> 00:05:21.960
and the ability to do some inspection of the
DOM. And what I wanted to show with this page

00:05:21.960 --> 00:05:28.520
is essentially two things. What you see in
each line is a panel. So you can think that

00:05:28.520 --> 00:05:33.840
there's a group of features available in the
tool. And as you can see with newer Chrome

00:05:33.840 --> 00:05:41.100
releases, we keep adding more stuff and the
panels are mentioned again because we actually

00:05:41.100 --> 00:05:46.919
keep improving on the stuff that's already
in there as well. The major thing happened

00:05:46.919 --> 00:05:54.790
about a year ago, if you look at the first
release which is the first Chrome version,

00:05:54.790 --> 00:05:58.610
there was rudimentary support. Chrome 2 is
not even mentioned because somewhere between

00:05:58.610 --> 00:06:05.830
Chrome 2 and 3 is when Pavel and his team
got started actively working on this out of

00:06:05.830 --> 00:06:10.800
our St. Petersburg office. And that meant
that with Chrome 3 and onwards, we've been

00:06:10.800 --> 00:06:18.470
able to keep adding new features so that we
are what we are today and, in fact, some of

00:06:18.470 --> 00:06:21.840
the later features that were added, Pavel's
going to talk about in more detail and how

00:06:21.840 --> 00:06:29.139
they'll be useful in your data work hopefully,
so with that, over to you Pavel to talk more

00:06:29.139 --> 00:06:32.860
about the actual tool.
&gt;&gt; FELDMAN: Okay, thank you Anders. My name

00:06:32.860 --> 00:06:37.130
is Pavel Feldman and I'm a software engineer
working on Chrome Developer Tools and WebKit

00:06:37.130 --> 00:06:42.230
Web Inspector. Today, I'll be doing a quick
overview of the Chrome Developer Tools functionality

00:06:42.230 --> 00:06:47.050
for you and continue it with the--a number
of developer stories that I'm sure you'll

00:06:47.050 --> 00:06:52.940
find interesting. During these stories, I'll
show you some previews of new features that

00:06:52.940 --> 00:06:58.500
we have recently added into the Chrome Developer
Tools. But before we go there, I want to mention

00:06:58.500 --> 00:07:03.199
that since Chrome Developer Tools is heavily
base on WebKit Web Inspector, it's essentially

00:07:03.199 --> 00:07:08.810
a single source. All--everything I'm going
to talk about is available in any WebKit-based

00:07:08.810 --> 00:07:15.850
browser that has Developer Tools enabled.
So--however, the developer stories I'm going

00:07:15.850 --> 00:07:22.860
to talk about are full of the functionality
that is base on the V8 engine capabilities

00:07:22.860 --> 00:07:28.040
that are not necessarily a V8 in other JavaScript
engines. So that functionality will only be

00:07:28.040 --> 00:07:34.139
available in Chrome, at least for now. I won't
have too much slides for you today, so it'll

00:07:34.139 --> 00:07:39.199
be all live demos pretty much. So the Developer
Tools overview is just a walkthrough to the

00:07:39.199 --> 00:07:46.460
existing panels and the perspectives of Developer
Tools. And the stories are the real world

00:07:46.460 --> 00:07:53.620
of--real stories about debugging of your JavaScript
applications, memory profiling them, performance

00:07:53.620 --> 00:07:59.830
profiling them. With that, let me actually
switch to running Chrome instance. And I'm

00:07:59.830 --> 00:08:05.300
running a Chrome full screen here. Let me
start with bringing the Developer Tools on

00:08:05.300 --> 00:08:10.330
the screen. So I'm using shortcut command
"Option+I" on Mac or "Ctrl+Shift+I" on Windows

00:08:10.330 --> 00:08:16.889
and Linux. And here it is. The Developer Tools
Window is opened in the docked note. Let me

00:08:16.889 --> 00:08:22.790
undock it. So I'm using a status bar button
to undock it. Here it is. Now we start with

00:08:22.790 --> 00:08:26.830
the Elements panel. That's the first in the
row and the Elements panel is where you spend

00:08:26.830 --> 00:08:31.770
your time designing your app visually, tweaking
its lay-out, its style, working with the CSS,

00:08:31.770 --> 00:08:39.200
with the DOM notes. You can see that the big
part of the screen is a DOM tree. And this

00:08:39.200 --> 00:08:43.229
DOM tree is, in fact, live. So whenever a
document object model over your webpage is

00:08:43.229 --> 00:08:47.630
changing, these changes are reflected in the
screen. Now we can not only traverse through

00:08:47.630 --> 00:08:53.800
the element here, you could mutate your DOM.
I can double click to edit attributes, I can

00:08:53.800 --> 00:08:58.590
tap through them, I can tap to create a new
element--a new attribute place holder. I can

00:08:58.590 --> 00:09:06.250
even rename the tag name. I can also use context
menu to edit these HTML. And editing as HTML

00:09:06.250 --> 00:09:12.050
is as flexible as it could be, so you can
add tags there, you could paste or create

00:09:12.050 --> 00:09:16.810
HTML snippets there. Do whatever you want.
Now for each of these notes we have a number

00:09:16.810 --> 00:09:22.329
of properties inspected to the right. What
are these? These are the computer style. And

00:09:22.329 --> 00:09:28.259
the computer style is a number of styles as
the rendering engine perceives it. So that's

00:09:28.259 --> 00:09:34.519
how it is going to render your element. Now
that one is read-only. Then there is this

00:09:34.519 --> 00:09:39.610
styles pane. And the styles pane is a number
of styles that are applied to your element

00:09:39.610 --> 00:09:45.150
as they are defined in the model, in the DOM
model. Now, it contains the element style

00:09:45.150 --> 00:09:51.959
attributes or width and height attributes
as well as match CSS rules based on the selectors

00:09:51.959 --> 00:09:58.149
here. Some styles inherited from the container
elements such as font size and font family,

00:09:58.149 --> 00:10:05.350
and the--two of the element styles that are
missing on this page. Now this one is editable,

00:10:05.350 --> 00:10:11.949
so you can double click to edit the style.
Also, I can traverse using tab key. I can

00:10:11.949 --> 00:10:19.170
create new ones using tab keys. I can double
click an empty space to create a new property.

00:10:19.170 --> 00:10:23.660
And I can also edit the selector itself so
that I make the rule applicable to a more

00:10:23.660 --> 00:10:30.579
or a less elements. Now it's a google.com
page. So it's highly optimized. So all of

00:10:30.579 --> 00:10:35.129
the styles are in line, but in case they are
define on a separate CSS file, you'll have

00:10:35.129 --> 00:10:42.899
a link here navigating to a particular resource,
to the CSS source itself. Now this next one

00:10:42.899 --> 00:10:47.980
is the metrics. And that's the box model for
your element. It shows you the dimensions

00:10:47.980 --> 00:10:51.980
of the element as well as padding, margins,
and borders. This thing is editable. Double

00:10:51.980 --> 00:10:58.420
click and edit it. We have properties for
DOM elements. Well in fact, DOM elements have

00:10:58.420 --> 00:11:02.739
JavaScript wrappers and that's actually how
you talk to the DOM elements from your JavaScript

00:11:02.739 --> 00:11:08.529
world. And -these Java Script wrappers are
just JavaScript objects. So you can put arbitrary

00:11:08.529 --> 00:11:12.490
properties to those. And that's the place
to inspect them. So we have all the JavaScript

00:11:12.490 --> 00:11:17.119
properties in here. We can expand them and
explore more. You see the nice prototype chain

00:11:17.119 --> 00:11:22.809
of the select divElement, so that you try
the inheritance here. And the last one is

00:11:22.809 --> 00:11:28.110
the Element Listeners. And let me show it
what it does. I'm using--I'm docking it back

00:11:28.110 --> 00:11:33.920
and I'm using an inspect tool to inspect the
search field. Now we can see that there are

00:11:33.920 --> 00:11:41.329
three types of event listeners registered
to that field. So we've got two blur listeners,

00:11:41.329 --> 00:11:47.119
one KeyDown, and a KeyUp. Now for each of
those, I can navigate those sources where

00:11:47.119 --> 00:11:51.339
a handler is located, although, google.com
is minified. So you won't see anything good

00:11:51.339 --> 00:11:58.101
here but your page is not until--unless it
is deployed. So apart from the source code

00:11:58.101 --> 00:12:02.819
navigation, we have event listener properties.
Now the interesting thing about this panel

00:12:02.819 --> 00:12:10.619
is that the event handlers are sorted in a
capturing and bubbling order. So they are

00:12:10.619 --> 00:12:19.209
displayed exactly as the rendering engine
is going to propagate events through it. That's

00:12:19.209 --> 00:12:24.230
what we can see on the screen when I bring
it up. Now let me mention that console is

00:12:24.230 --> 00:12:30.189
also a very powerful tool, especially in combination
with the elements panel. So I undocked the

00:12:30.189 --> 00:12:35.850
Developer Tools window again and press escape
to bring the console up. Now in the console,

00:12:35.850 --> 00:12:41.809
we do support the command line API that is
called the Firebug command line API. And it

00:12:41.809 --> 00:12:48.059
includes things like shortcuts for currently
selected elements and that's the "$0" or previously

00:12:48.059 --> 00:12:55.160
selected element, it's a "$1." I can dump
properties of the particular of a selected

00:12:55.160 --> 00:13:06.970
note, and I can expand it in here. Or I can
navigate my UI to a particular element. I

00:13:06.970 --> 00:13:11.999
can monitor events and you can see a nice
code suggestion here "Better registered to

00:13:11.999 --> 00:13:17.019
a particular node." So all of these are part
of the Firebug command line API. And you should

00:13:17.019 --> 00:13:22.730
make sure that you know how it works because
it's very useful. I think that's all that

00:13:22.730 --> 00:13:28.179
I want to tell about the elements panel. And
with that, let me move to the next one, to

00:13:28.179 --> 00:13:35.829
the resources panel. I'll be--demo it on the
Gmail sites. So let me navigate to gmail.com

00:13:35.829 --> 00:13:43.079
real quick. And let's see what we have here.
Now the resources panel, resources is something

00:13:43.079 --> 00:13:47.089
you're spending your time when you're dealing
with network. All the network request against

00:13:47.089 --> 00:13:51.999
your web server are going to be registered
here. Let's try to explore what happens when

00:13:51.999 --> 00:13:58.139
we are navigating to gmail.com. So the first
entry here is gmail.com and it only has headers

00:13:58.139 --> 00:14:04.760
available and we can see that it's a redirect.
We can see a 301 move permanently and--oh,

00:14:04.760 --> 00:14:10.819
the response headers. And we've been redirected
to the mail.google.com/mail. Well, it turns

00:14:10.819 --> 00:14:15.189
out that the second one is also redirect,
it is PO2. And the reason for that, that I

00:14:15.189 --> 00:14:21.149
had missing cookies so I was not log-in and
I'm being redirected to a log-in page. Well,

00:14:21.149 --> 00:14:26.470
the next one, the ServiceLogin page. And that's
actually the first page that has been served

00:14:26.470 --> 00:14:31.859
with the content. I can see the content preview
in here. I can, of course, see the headers

00:14:31.859 --> 00:14:38.420
for this page as well and it's 200. So it
was served okay. Now talking about the previews,

00:14:38.420 --> 00:14:43.959
we will support previews for various mime
types such as images, scripts, and styles,

00:14:43.959 --> 00:14:49.529
and HTML, and even web fonts. And we are going
to pride it with a nice syntax highlighting

00:14:49.529 --> 00:14:57.410
there too. Let me go back to the timeline
view. Now the timeline is something we open

00:14:57.410 --> 00:15:03.449
by default and that's the time perspective
from the resource loading. We can see the

00:15:03.449 --> 00:15:07.959
latency here. So that's a semi-transferring
part of the bar. That's the time we've been

00:15:07.959 --> 00:15:12.749
waiting for response from a server. We can
see a solid part and that's actually time-consumed

00:15:12.749 --> 00:15:18.290
for data to be transmitted over the network.
And that's a timeline view on to that. We

00:15:18.290 --> 00:15:23.430
also support a size centric view to that.
And those two different sizes are the cell

00:15:23.430 --> 00:15:28.779
size of a resource and the size of a resource
transmitted over the network. And they are

00:15:28.779 --> 00:15:34.850
different because we are using jZip encoding.
Now it's really simple. It has a several sorting

00:15:34.850 --> 00:15:39.989
algorithms in here for size and several sorting
algorithms for resources. We have some basic

00:15:39.989 --> 00:15:45.769
filters. So that you could filter resources
from a particular type and that's it. It's

00:15:45.769 --> 00:15:53.470
very simple but very useful when you're dealing
with the resources and latency and redirects.

00:15:53.470 --> 00:15:58.529
With that, let me move to the scripts. And
in fact, scripts is for debugging. And we

00:15:58.529 --> 00:16:02.920
have a dedicated story about Debugging. So
I'm going to skip it right now and I'm doing

00:16:02.920 --> 00:16:07.639
the same with the timeline and profiles. We're
going to have a dedicated story for each of

00:16:07.639 --> 00:16:13.459
those. And it brings me to a storage. Now
the storage panel is where you manage the

00:16:13.459 --> 00:16:19.499
offline content of your application. And the
offline content is for us, HTML5 databases,

00:16:19.499 --> 00:16:24.999
we support those. It's a local storage, session
storage, and its cookies. So while we are

00:16:24.999 --> 00:16:28.769
in the google.com domain, let me show you
the view of the cookies. You can sort them

00:16:28.769 --> 00:16:33.339
here. It's a complete detailed view. It's
not what you're getting while calling the

00:16:33.339 --> 00:16:37.720
document cookies. It's a real complete view
on the cookies as they persist in the cookie

00:16:37.720 --> 00:16:42.549
manager within Chrome. You can delete them
from here too and you can see the markers

00:16:42.549 --> 00:16:55.269
on the HTTP secure cookies too. Now the database
is supported as a SQL command line. It--we

00:16:55.269 --> 00:17:02.459
can show you the number of tables that are--that
exist in your database. And that's it. The

00:17:02.459 --> 00:17:08.050
local session storages are just the tables
where you can edit things in place. I can

00:17:08.050 --> 00:17:16.830
actually show you the HTML5 database sample
on the--one of the notes demo. So the notes

00:17:16.830 --> 00:17:24.760
demo is one of the HTML5 database demos, the
very simple ones. I bring it up, and I can

00:17:24.760 --> 00:17:30.750
see a table in the database list. I can select
the table and I will see its content. Besides

00:17:30.750 --> 00:17:36.860
I can issue a query in here and you can see
a nice suggest. It even suggests, you know,

00:17:36.860 --> 00:17:42.520
table names. So I can do search queries in
here. It'll report me if I have any SQL errors

00:17:42.520 --> 00:17:49.050
here with a detailed information of those.
So storage is where HTML5 more than stuff

00:17:49.050 --> 00:17:52.990
is. And we are going to add even more here.
We are currently working on support for app

00:17:52.990 --> 00:18:02.910
cache instrumentation in here. Now going further
to the audits panel and the audits panel is

00:18:02.910 --> 00:18:07.700
something that we've recently added. It's
a number of signature checks that you are

00:18:07.700 --> 00:18:13.270
running against your page. We are currently
checking your network for the--your page for

00:18:13.270 --> 00:18:17.770
being fine with the network utilization and
web page performance. But those--it is base

00:18:17.770 --> 00:18:22.010
on the rules engine and those rules are fairly
simple. So we check whether you are not doing

00:18:22.010 --> 00:18:27.270
too many requests against the same domain,
that you are not serving images from the domains

00:18:27.270 --> 00:18:32.320
with too much cookies, that you are using
caching aggressively, and et cetera. So I

00:18:32.320 --> 00:18:38.900
can actually run it against one of the pages.
Let me dock it back and run it against the

00:18:38.900 --> 00:18:44.020
Google front page. So its reloading a page
and it is coming up with some hints for me

00:18:44.020 --> 00:18:50.890
that, for instance, I should be setting the
cache expiration or cache info for the images,

00:18:50.890 --> 00:18:55.100
or I should minimize my cookie sizes because
you've seen there are a lot of cookies on

00:18:55.100 --> 00:18:59.890
google.com domain or the wrong use of CSS
rules. So these are new CSS rules, or probably

00:18:59.890 --> 00:19:05.790
these ones. They could have been lazy or they'll
audit.. Now we've designed the audits panel

00:19:05.790 --> 00:19:10.860
to be extensible and we want third parties
to be able to contribute audit suites into

00:19:10.860 --> 00:19:15.251
that. And those audit suites could be random.
It could be mobile readiness, it could be

00:19:15.251 --> 00:19:19.050
something related to the network utilization
or something more aggressive that we aren't

00:19:19.050 --> 00:19:24.830
currently providing. So we are looking forward
to your feedback on that one and we are open

00:19:24.830 --> 00:19:33.770
to adding new stuff into that. Going further,
and that's last panel, but not the least one.

00:19:33.770 --> 00:19:38.380
It's a dedicated console panel. That something
our users were asking us to do for a long

00:19:38.380 --> 00:19:42.600
time. Before that we are able to open a panel
on the--in the given context using an escape

00:19:42.600 --> 00:19:49.460
key. Now we can have a full-blown console
functionality here. You can do Multilang entry

00:19:49.460 --> 00:19:55.830
using "Alt+Enter". And console is really a
powerful tool. I find myself spending most

00:19:55.830 --> 00:20:03.030
of my time there. Now that's it for the overview.
It's real quick. Again, we'll be touching

00:20:03.030 --> 00:20:08.810
scripts and timeline and profiles a bit later.
And once again, this is all available in majority

00:20:08.810 --> 00:20:17.380
of WebKit-based browsers should they have
Developer Tools enabled. Now we've talked

00:20:17.380 --> 00:20:22.010
about our overview and currently switching
to a completely different thing. We'll be

00:20:22.010 --> 00:20:28.160
going through the development stories. And
we'll start with the debugging because I personally

00:20:28.160 --> 00:20:41.230
do debugging a lot. And let me start with
a demo. I navigate it to a "goog.ui.HoverCard"

00:20:41.230 --> 00:20:45.980
component. That's a UI primitive from the
closure JavaScript library. And what it is

00:20:45.980 --> 00:20:52.010
doing? It is providing enrich HTML tool tips
for the elements. So I'm hovering my mouse

00:20:52.010 --> 00:20:56.170
over an element and I can see a tool [INDISTINCT]
find it from here, because it is there in

00:20:56.170 --> 00:21:03.370
the Gmail. Now, let me try and debug it. For
that, I'm switching to the scripts panel.

00:21:03.370 --> 00:21:08.420
And I happen to know that the main functionality
of this thing resides in the HoverCard JS

00:21:08.420 --> 00:21:13.640
file. So I typed "HoverCard" and I navigate
to that file. Well, in fact, I even know where

00:21:13.640 --> 00:21:19.030
the interesting function is. It's somewhere
around on line 200. And let me set a breakpoint

00:21:19.030 --> 00:21:28.570
here, undock it, and let's talk about the
UI that we have. Now that's a debugging environment.

00:21:28.570 --> 00:21:34.320
And the center of the screen is your JavaScript
file. And you can choose the JavaScript file

00:21:34.320 --> 00:21:40.230
that you are looking at using the file selector.
Now I am currently on a breakpoint and I am

00:21:40.230 --> 00:21:45.870
having a stack to the right. And the stack
consists of the frames. Now these stack frames

00:21:45.870 --> 00:21:50.900
are the functions that have been called. So
the handle event has called, handle trigger

00:21:50.900 --> 00:21:56.330
MouseOver and that one has called trigger
for element. So I can see the complete stack

00:21:56.330 --> 00:22:05.010
starting from the event handler. Now all of
these stack frames have friendly names. And

00:22:05.010 --> 00:22:10.890
if you look at these trigger for element function
that we are currently in, it is an anonymous

00:22:10.890 --> 00:22:17.290
function. It has no name. But we know what
the name is and the reason for that is the

00:22:17.290 --> 00:22:23.000
function name inferring that we have embedded
into the weak JavaScript engine. Now for each

00:22:23.000 --> 00:22:28.710
of the stack frames, we can see the local
variables. Those are variables available within

00:22:28.710 --> 00:22:36.000
the function scope. We can see closure variables
and the global variables. Opening console

00:22:36.000 --> 00:22:40.900
will even suggest you the names of this properties
so that it can dump them and that's the state

00:22:40.900 --> 00:22:47.060
of this object on this particular call frame.
So you can really get a lot of information

00:22:47.060 --> 00:22:56.770
on a suspended state of your JavaScript engine.
Now let me release it from the breakpoint,

00:22:56.770 --> 00:23:00.730
given all the view of the rest of the UI.
So we have watch expressions here, you can

00:23:00.730 --> 00:23:07.380
enter a watch expression and it'll be re-evaluated
everytime you step through the execution.

00:23:07.380 --> 00:23:16.610
We have breakpoints manager and that's about
it. Let me stop on the breakpoint again and

00:23:16.610 --> 00:23:20.410
show you something else. And something else
is the on-hover evaluation. That's something

00:23:20.410 --> 00:23:24.660
that we have recently added. It can render
primitive values when you're hovering over

00:23:24.660 --> 00:23:29.400
them. It will also render complex JavaScript
objects and you'll be able to explore them

00:23:29.400 --> 00:23:34.720
on the fly. And for functions, you'll see
there bodies. Like in closure, UI is a name

00:23:34.720 --> 00:23:38.510
space and you can see all the classes in this
name space. But it's really a JavaScript,

00:23:38.510 --> 00:23:46.310
generic JavaScript functionality. Now that's
pretty standard. Let's talk about something

00:23:46.310 --> 00:23:51.000
new. I mentioned that we have been debugging
your application. And you came to a point

00:23:51.000 --> 00:23:55.851
in the UI where you know that something is
wrong. And you'd like to fix it. What you

00:23:55.851 --> 00:24:02.430
currently do is you'll stop your app, you
go to the sources, you change the sources,

00:24:02.430 --> 00:24:07.530
you deploy the app, reload the page, go to
the same place in the UI complete all the

00:24:07.530 --> 00:24:13.800
steps that you've done and see whether it
has fixed or not. Now wouldn't it be great

00:24:13.800 --> 00:24:19.600
if you could just skip all of that and make
the change in place at this very moment, right

00:24:19.600 --> 00:24:24.860
in the JavaScript engine. And in fact, we
now support that. So I'm double clicking on

00:24:24.860 --> 00:24:31.160
a line here and it becomes editable. Let me
revert the condition and check if the page

00:24:31.160 --> 00:24:38.350
is working. Well, I'm having no HoverCards
anymore. So the page has changed at runtime.

00:24:38.350 --> 00:24:43.750
Let me set a breakpoint and see what is wrong.
So I'm hitting this line, I'm trying to step

00:24:43.750 --> 00:24:49.760
through it and I'm returning from a function
early. So something is wrong now and the app

00:24:49.760 --> 00:24:56.140
is not working. Let me actually fix it back
and do something more complex. I'm adding

00:24:56.140 --> 00:25:03.560
a line with a logging here. So I'll be logging
the value of the optional parameter here.

00:25:03.560 --> 00:25:13.820
You see the [INDISTINCT] highlighting, so
we did parse the source and we've got a new

00:25:13.820 --> 00:25:19.580
content here. Let's see if the app is working
now. Yes, it is back to life. Let's see the

00:25:19.580 --> 00:25:25.850
console. We're getting the console entries
for the hover event here. So we are actually

00:25:25.850 --> 00:25:32.200
changing the page on the fly. Now, how does
it work? Unlike other JavaScript engines,

00:25:32.200 --> 00:25:37.450
V8 is running a highly optimized machine code
even when you're debugging it or profiling

00:25:37.450 --> 00:25:42.460
your app. So to change the code on the fly,
we need to actually find the function object

00:25:42.460 --> 00:25:47.610
in the VM, patch the machine code for it and
make sure all the other objects are referencing

00:25:47.610 --> 00:25:53.200
the new function. If that function is a constructor,
then all newly creation--created objects are

00:25:53.200 --> 00:25:59.530
going to use the new code. Now, can you change
the function while you're running it? Let's

00:25:59.530 --> 00:26:06.510
try it out. I'm sitting--I'm standing on a
breakpoint in here and I'm doing, yet, another

00:26:06.510 --> 00:26:13.620
modification here, some safe one. So what
has happened? I can't continue the execution

00:26:13.620 --> 00:26:17.770
of the function that I'm modifying, right?
So what we do is we're kicking it from the

00:26:17.770 --> 00:26:23.680
stack and returning back in time to a point
just before calling into that function and

00:26:23.680 --> 00:26:29.250
that's the trigger for element. And now if
I step into it, I will have a new body here

00:26:29.250 --> 00:26:35.240
with a three equal sign in here. So you can
skip all the hassle and change your application

00:26:35.240 --> 00:26:41.460
on the fly, add conditional logging, add whatever
you want into the function bodies and see

00:26:41.460 --> 00:26:47.480
it work at runtime. You could also modify
a function to get back to a place before the

00:26:47.480 --> 00:26:52.610
function call if you're debugging and seeing
that something went wrong. So we find it pretty

00:26:52.610 --> 00:26:58.420
exciting and it's just a preview. We are currently
editing lines and blocks only. But the underlying

00:26:58.420 --> 00:27:08.700
V8 capabilities allow us to patch entire sources
to arbitrary changes to a source code on the

00:27:08.700 --> 00:27:11.520
fly and we are willing... Oops... Sorry. Are
we okay now? And we are willing to explore

00:27:11.520 --> 00:27:19.730
it. Now that's the debugging story and we
have something... Check, check. Is it okay?

00:27:19.730 --> 00:27:25.690
Okay. So--and we are--that's the debugging
story and we have added something new to it

00:27:25.690 --> 00:27:32.150
that we believe exist only in our app so far.
With that, let me switch to the next story.

00:27:32.150 --> 00:27:38.970
And the next story is going to be about performance.
Now, we have our app working properly and

00:27:38.970 --> 00:27:44.230
we debugged it well, but it might be slow.
What do we do in that case? Well, what we

00:27:44.230 --> 00:27:53.540
do is we start profiling it. Let me open a
canvass DNA model. And go to the profiles

00:27:53.540 --> 00:28:01.470
tab and start recording. And while I'm speaking,
it is capturing the stacks from the V8 execution

00:28:01.470 --> 00:28:07.610
and sampling them at a rate of 1,000 per second.
When I stop, it'll provide me with the aggregated

00:28:07.610 --> 00:28:13.990
information on that profile. Let's explore
it in a bit more detail. I will start with

00:28:13.990 --> 00:28:20.180
the top view on the profile. And I can see
here that in this anonymous function, the

00:28:20.180 --> 00:28:27.150
animate method has been consuming 96% of time
while I was measuring. Now I can explore it

00:28:27.150 --> 00:28:34.470
further and see that it has been rendering
something. And it has been mostly permit lining--drawing

00:28:34.470 --> 00:28:42.650
lines and points. Now for each of those, I
can dive in to source and see what's happening

00:28:42.650 --> 00:28:49.330
there. Some of those though do not have source
lines associated with them. Let's find out

00:28:49.330 --> 00:28:54.610
what are these functions. Well in fact, these
are the functions begin path, move to line

00:28:54.610 --> 00:28:58.950
to--and these are native functions defined
on the canvass context. So they are native.

00:28:58.950 --> 00:29:04.490
They are implemented by a browser. And you
can't really optimize though--them. However,

00:29:04.490 --> 00:29:11.240
you can see what percentage of time or milliseconds
of time we are consuming, and you can minimize

00:29:11.240 --> 00:29:17.370
the number of calls into them. Now, these
functions are native. They can even be not

00:29:17.370 --> 00:29:22.880
functions but setters, but we are still capturing
the amount of time that has been spent there.

00:29:22.880 --> 00:29:29.100
I can switch to the heavy view and heavy view
is just the flat view when the functions are

00:29:29.100 --> 00:29:34.350
sorted by their self time, so the more expensive
ones get into the top. And we can see here

00:29:34.350 --> 00:29:39.130
that the most expensive ones in this demo
is fill strokes out of strokes, so we can't

00:29:39.130 --> 00:29:46.940
really optimize the canvass rendering of the
DNA. But we could cache some strokes--cache

00:29:46.940 --> 00:29:56.010
some styles, reiterate over cycles and do
something there. So that's our profiling story.

00:29:56.010 --> 00:29:59.830
But that's a JavaScript profiling story. And
the JavaScript is not the only thing that

00:29:59.830 --> 00:30:05.090
is happening inside of your browser. There
are other CPU expansive operations consuming

00:30:05.090 --> 00:30:10.550
memory and such. And those operations are
calculating CSS styles, primarily dealing

00:30:10.550 --> 00:30:16.600
with network, repainting fragments on the
screen, re-flooring your page. All of these

00:30:16.600 --> 00:30:24.830
things are taking time and we have a tool
to capture that. And this tool is called Timeline.

00:30:24.830 --> 00:30:29.790
Let me show you how it works. I'm docking
Developer Tools back and we'll be exploring

00:30:29.790 --> 00:30:35.730
a search result. So I'm looking for purple
flowers. Let me start recording and reload

00:30:35.730 --> 00:30:43.890
a page real quick and stop recording. So the
timeline UI, you have an overview on the top

00:30:43.890 --> 00:30:49.130
with its three major categories of events
that are happening inside your browser. These

00:30:49.130 --> 00:30:53.850
are loading, scripting, and rendering. And
for each of these--could arrays, you have

00:30:53.850 --> 00:30:59.900
detailed record list at above. I can zoom
in to a narrow of interest using an overview

00:30:59.900 --> 00:31:05.650
panel. I just dragged it and I can see what
has been happening in this timeframe. Now

00:31:05.650 --> 00:31:11.820
we can see several send requests. I'm seeing
several event dispatchers. I'm seeing paint

00:31:11.820 --> 00:31:16.841
events and even garbage collection there.
Now how do we do that? Well, in fact, we added

00:31:16.841 --> 00:31:22.980
a lot of native instrumentation into the WebKit
rendering engine into WebCore. And we are

00:31:22.980 --> 00:31:28.850
propagating that information and visualizing
by means of the timeline fountain. Now, if

00:31:28.850 --> 00:31:34.480
I expand this evaluate script that has been
happening on google.com, so we were searching

00:31:34.480 --> 00:31:40.620
for purple flowers, this script has been downloaded.
It has been executed; the execution is actually

00:31:40.620 --> 00:31:47.890
taken about 50 to 70 milliseconds. Now let's
see what was happening inside that script

00:31:47.890 --> 00:31:52.320
evaluation. And we can see a number of style
recalculations happening here. Unfortunately,

00:31:52.320 --> 00:31:57.380
I'm navigating to a minified source one view
as watch information but we know that they've

00:31:57.380 --> 00:32:03.010
been happening here. And we know that we could
optimize it. For instance, we could do some

00:32:03.010 --> 00:32:08.740
primitive authorization such as remove an
object from a rendered tree, making some changes

00:32:08.740 --> 00:32:13.679
to it, cache them and bring it back, so that
the style was recalculated only once. In this

00:32:13.679 --> 00:32:20.110
case, we can see that it's been calculated
several times. And some of them were taking

00:32:20.110 --> 00:32:28.660
actual time in CPU. Now we've build this tool
primarily for the performance analysis, however,

00:32:28.660 --> 00:32:35.090
we've learned that is a great tool for learning
what your program is about and how it is functioning.

00:32:35.090 --> 00:32:43.080
And let me show it to you. I'll be showing
it on the Zippy example. And Zippy is another

00:32:43.080 --> 00:32:49.470
closure component that is implementing the
animation of expandable compartments in a

00:32:49.470 --> 00:32:55.440
cross-browser manner. Now let's try to find
out how it works using the timeline panel.

00:32:55.440 --> 00:33:00.179
For that, I'm starting recording and I'm doing
a single expansion and I'm start-stopping

00:33:00.179 --> 00:33:06.770
recording. So let's explore it. There are
random events. And I can see a single large

00:33:06.770 --> 00:33:14.590
event click, let me expand it. So I click
a Zippy header. What happened, it called a

00:33:14.590 --> 00:33:23.490
function. What that function did, it installed
a timer in the register animation and upon

00:33:23.490 --> 00:33:32.080
fire, this timer called cycle animations.
They can see that the cycle animations method,

00:33:32.080 --> 00:33:39.450
is its first line removing the timer and is
its last line re-adding the timer. A-ha, so

00:33:39.450 --> 00:33:43.740
we are seeing a recursion here based on the
timers. And that essentially what you do when

00:33:43.740 --> 00:33:49.430
you want to make a cross-browser animation.
Now, let's see what it ended up with. We're

00:33:49.430 --> 00:33:57.530
scrolling down for a second or something and
we can see a latest entry that is clearing

00:33:57.530 --> 00:34:02.770
timeout in the unregistered animation. And
that's where the animation stopped. Now let

00:34:02.770 --> 00:34:08.339
me remove all the messages in full and putting
up the filter that it removes all the events

00:34:08.339 --> 00:34:14.530
less than 15 milliseconds and collapse it.
Now what has happened? From the bird's view,

00:34:14.530 --> 00:34:20.599
it's just a single event click. And in fact,
if you were using classical JavaScript debugging

00:34:20.599 --> 00:34:25.200
and other techniques, it will tell that the
event click has taken zero milliseconds because

00:34:25.200 --> 00:34:31.960
that event click was not possessed anyhow
other than setting up a timer. However, it

00:34:31.960 --> 00:34:38.929
has implications that were happening for a
second. Your browser was calculating something.

00:34:38.929 --> 00:34:45.700
In fact, it was not only doing JavaScript,
it was also recalculating styles so that the

00:34:45.700 --> 00:34:52.859
expandable compartments are animating. Now
how do we do that? Those timers were happening

00:34:52.859 --> 00:34:57.930
asynchronously and we are capturing them all
under a single event handler umbrella. So

00:34:57.930 --> 00:35:03.470
what we do is for all these synchronous events
in the browser we bind them together. For

00:35:03.470 --> 00:35:08.970
instance, the timer fire would be bound under
the install timer so that you knew that the

00:35:08.970 --> 00:35:14.630
timer fire has been caused by the timer installed.
And we do the same for resource loading, and

00:35:14.630 --> 00:35:20.510
we do the same for exe charts. So we can check
really complex control flows that are happening

00:35:20.510 --> 00:35:27.410
asynchronously in your page through that.
And in fact, if I collapse it back you all

00:35:27.410 --> 00:35:37.329
see that--let me go back to the google.com
page, get the results. You can see that some

00:35:37.329 --> 00:35:43.200
of these were actually happening simultaneously,
which is kind of impossible since the JavaScript

00:35:43.200 --> 00:35:47.460
is single-threaded. Oh, the reason for that
is we are tricking not the synchronous execution

00:35:47.460 --> 00:35:51.859
time but we are tricking the accusation (ph)
analysis. And if you implement the kind of

00:35:51.859 --> 00:35:56.400
a control flow based on timers, you can actually
have several processes happening at the same

00:35:56.400 --> 00:36:02.460
time. One process was pulling the surf for
notifications and another was withdrawing

00:36:02.460 --> 00:36:09.849
something. So that's our performance and understanding
your code story. It is primarily based on

00:36:09.849 --> 00:36:16.550
the profiles and timeline panels. And with
that, we now knew how the page works and we

00:36:16.550 --> 00:36:21.130
knew that it was working fast. We even know
that we are beyond JavaScript checking the

00:36:21.130 --> 00:36:27.859
native performance of the application. However,
it is not enough. Even if your program is

00:36:27.859 --> 00:36:32.839
correct, even if it is fast, if you have a
memory leak, sooner or later it will start

00:36:32.839 --> 00:36:39.650
lagging or even make browser do strange things.
So you need to understand how is memory behaving

00:36:39.650 --> 00:36:46.782
in your Web application. For that, we have
a memory profiler. I'll be showing--I'll be

00:36:46.782 --> 00:36:53.059
demo-ing it based on the Hover card demo.
I'm switching that to the profiles panel.

00:36:53.059 --> 00:36:59.569
And I'm clicking this I that is taking a snapshot
of my heap. Before I explain what it means,

00:36:59.569 --> 00:37:08.280
let me move my mouse around in here and take
another snapshot. Okay. So the heap, you have

00:37:08.280 --> 00:37:12.700
a lot of JavaScript code running inside your
app. And the JavaScript code is creating a

00:37:12.700 --> 00:37:17.849
lot of objects and these objects are having
references to each other. So they are retaining

00:37:17.849 --> 00:37:24.499
the, all the objects and preventing them from
garbage collected. And what we have here is

00:37:24.499 --> 00:37:31.319
object in your heap aggregated by their class.
It allows us to understand that that's class

00:37:31.319 --> 00:37:36.999
of a JavaScript object. So we have code objects
from here, some are bit re-objects, closures,

00:37:36.999 --> 00:37:44.489
strings, arrays, and we have size in bytes
occupied in the JavaScript virtual machine.

00:37:44.489 --> 00:37:51.569
Now we have 95 arrays here, let me expand
it. What it shows when I expand the node is

00:37:51.569 --> 00:37:56.380
the classes of the objects that are retaining
arrays. So what this picture is telling me

00:37:56.380 --> 00:38:02.039
is that there have been 95 arrays created
in the app and there are objects of these

00:38:02.039 --> 00:38:07.989
types downloading the simple pool map logger,
et cetera that have references to these arrays

00:38:07.989 --> 00:38:14.109
and prevent these arrays from being collected.
I can expand further and sooner or later,

00:38:14.109 --> 00:38:18.739
I'll go to the garbage collection route or
a global property. So if you store a reference

00:38:18.739 --> 00:38:25.849
into a window, object it will be there forever
and the property will be preventing the object

00:38:25.849 --> 00:38:30.559
from being collected. Now, I've taken two
snapshots; and I've done something in between.

00:38:30.559 --> 00:38:36.499
And I make sure you what it tells me. I'm
doing a dip between these two snapshots and

00:38:36.499 --> 00:38:41.609
I can see that the snapshot that has been
taken after it has 46 more elements of type

00:38:41.609 --> 00:38:47.749
development, has some more strings, et cetera.
Let's try to see who is retaining those. Okay,

00:38:47.749 --> 00:38:52.460
so these are objects of type deep (ph) console
and hover card. And these are objects that

00:38:52.460 --> 00:38:56.509
have references to these new deeps (ph) preventing
them from being collected. Let's try to find

00:38:56.509 --> 00:39:02.350
out in the UI what are these 46 new objects.
Well in fact, that's this event log that is

00:39:02.350 --> 00:39:10.289
growing when I'm moving my mouse. So that's
the classical scenario of evaluating your

00:39:10.289 --> 00:39:15.749
memory, fighting the memory leaks. You do
something, you take a snapshot, you do something,

00:39:15.749 --> 00:39:20.210
you take another snapshot, we compare those.
If you think that no new objects should be

00:39:20.210 --> 00:39:24.480
retained, it should have zero difference.
If you want something to be collected, it

00:39:24.480 --> 00:39:31.289
should be negative. So that's how our memory
store it. It's also pretty unique to be it

00:39:31.289 --> 00:39:37.819
rendering engine. And the JavaScript engine
and the--with that, are we talking about internal

00:39:37.819 --> 00:39:43.509
design? No? Okay. We're skipping the internal
design unless you guys want to hear about

00:39:43.509 --> 00:39:51.099
the internal design. For what--okay. We can
spend 2 minutes. I'll do it real quick. So

00:39:51.099 --> 00:39:57.589
before the internal design, the trusted development,
we are implementing Chromium Chrome, right?

00:39:57.589 --> 00:40:02.910
But we are also contributing to V8 and WebKit
to make this function all available. So we

00:40:02.910 --> 00:40:08.390
are all WebKit commuters for year, et cetera.
Now these are open source projects and they

00:40:08.390 --> 00:40:13.660
are all combined together. The way they are
combined is on a daily basis. Chrome is picking

00:40:13.660 --> 00:40:21.700
up the tip of the tree of a WebKit browser.
Then we regularly pick V8 as well, roughly

00:40:21.700 --> 00:40:27.029
twice a week. And what it means to you is
that we are having a nice in integration build

00:40:27.029 --> 00:40:32.519
pretty much on the weekly basis and they are
available on the dev channel. So if you are

00:40:32.519 --> 00:40:37.130
a Web developer and if you want to have latest
and greatest of developer tools, you should

00:40:37.130 --> 00:40:40.729
stick with developers' channels, they are
fairly stable at least for doing your Web

00:40:40.729 --> 00:40:47.849
development and they have a lot of tools there
that might be missing in this table or beta.

00:40:47.849 --> 00:40:54.299
Now, talking about the internal design itself,
the majority of code, source code, is in the

00:40:54.299 --> 00:40:59.720
WebKit and basically has a back-end and a
front-end. And the front-end that we've been

00:40:59.720 --> 00:41:04.400
seeing here, well, you know what it is implemented
with. What do you think it is implemented

00:41:04.400 --> 00:41:16.880
with? This UI, is it a--two options here,
three options. So HTML5, native Python here.

00:41:16.880 --> 00:41:23.910
Anything else? So, yeah, right. So it's HTML
JavaScript. And in fact you can even inspected

00:41:23.910 --> 00:41:28.470
by its all means. So you just inspect element
on one of the front-end objects and you see

00:41:28.470 --> 00:41:33.229
it running. So that's just a web app the front-end
to the right is just web app. It is talking

00:41:33.229 --> 00:41:39.349
to a back-end over an IPC and Chrome. So it
is crossing the process boundary, making requests,

00:41:39.349 --> 00:41:43.701
getting responses. And this transport isn't
implemented in the Chrome level. Now we will

00:41:43.701 --> 00:41:47.479
like it because it allows us doing remote
debugging as well and that's something actually

00:41:47.479 --> 00:41:52.080
that we are proud and do working on. With
that, back to Anders.

00:41:52.080 --> 00:41:57.299
&gt;&gt; SANDHOLM: Yeah. Thanks very much, Pavel.
So just before we wrap up, I wanted to give

00:41:57.299 --> 00:42:03.839
a few pointers. The main place to go if you
want information on the Developer Tools in

00:42:03.839 --> 00:42:10.779
Chrome is on the chromium.org site, chromium.org\devtools.
There's a, you know, videos showing how to

00:42:10.779 --> 00:42:17.609
get started. There's a full tutorial and so
on. And as Pavel just explained, the bit about

00:42:17.609 --> 00:42:23.900
the internal design and how this is all open
source, parts of different open source projects.

00:42:23.900 --> 00:42:28.849
We're very much encourage you to contribute
either through, you know, future requests,

00:42:28.849 --> 00:42:33.720
the place to go is crbug, or if you want to
find it directly in the WebKit there's a URL

00:42:33.720 --> 00:42:39.200
for that as well. Or, you know, if you have
questions about the Inspector or the Development

00:42:39.200 --> 00:42:46.109
Tools in Chrome, there's a recent IRC Channel
as well. There'll be people there, as my experience,

00:42:46.109 --> 00:42:52.119
pretty much around the clock. There's people
sitting here in California, working on the

00:42:52.119 --> 00:42:55.970
inspection and obviously Pavel and his team
in St. Petersburgh is also there. So please,

00:42:55.970 --> 00:43:01.140
please go and check it out if we manage to
get you interested in that through this session.

00:43:01.140 --> 00:43:09.260
That's it from our side. Thanks very much
for showing interest and I hope you found

00:43:09.260 --> 00:43:16.099
some of this exciting. And there's still time
for questions. If any of you have questions,

00:43:16.099 --> 00:43:20.010
we're happy to try to answer them. So, thanks.

