WEBVTT
Kind: captions
Language: en

00:00:04.880 --> 00:00:08.500
JAREK WILKIEWICZ: YouTube Live
is all about the scale at

00:00:08.500 --> 00:00:10.720
which we can reach
our audience and

00:00:10.720 --> 00:00:12.600
really make an impact.

00:00:12.600 --> 00:00:16.620
A couple of other events that
were recently conducted on

00:00:16.620 --> 00:00:17.500
YouTube Live--

00:00:17.500 --> 00:00:21.320
we did an event with Indian
Premier League.

00:00:21.320 --> 00:00:25.140
So for those of you that have
heard of cricket, it's a sport

00:00:25.140 --> 00:00:26.580
extremely popular in India.

00:00:26.580 --> 00:00:28.700
It was a very successful
event.

00:00:28.700 --> 00:00:31.660
72 matches, over 72
million views.

00:00:31.660 --> 00:00:34.390
For those of you that follow
the royal family, we were

00:00:34.390 --> 00:00:36.480
actually live streaming
the royal wedding.

00:00:36.480 --> 00:00:40.225
And on April 29, there were 72
million live streams. So 72

00:00:40.225 --> 00:00:44.800
million people tuned in from
over 180 countries.

00:00:44.800 --> 00:00:50.690
So virtually the entire globe
was represented watching the

00:00:50.690 --> 00:00:51.790
royal wedding.

00:00:51.790 --> 00:00:53.920
And then one of my favorites,
Coachella.

00:00:53.920 --> 00:00:56.900
It's a music festival with a lot
of cool bands in the US.

00:00:56.900 --> 00:01:01.130
And we got over 4 million
streams, 61 acts, concerts.

00:01:01.130 --> 00:01:04.500
And one of the interesting
features that we implemented

00:01:04.500 --> 00:01:07.837
as a part of this was the
ability to actually view live

00:01:07.837 --> 00:01:10.110
streams from multiple
camera angles.

00:01:10.110 --> 00:01:14.290
And I'll show you how that
works a little later.

00:01:14.290 --> 00:01:16.650
So what's involved in
live streaming?

00:01:16.650 --> 00:01:19.740
So I have my little reference
architecture diagram here.

00:01:19.740 --> 00:01:23.150
And, really, it highlights the
steps that one has to take in

00:01:23.150 --> 00:01:27.630
order to take content from a
live event and stream it to a

00:01:27.630 --> 00:01:29.400
wide audience over
the internet.

00:01:29.400 --> 00:01:31.410
So first, event production.

00:01:31.410 --> 00:01:33.050
This is not something
that we do.

00:01:33.050 --> 00:01:36.020
This is what our content
partners do.

00:01:36.020 --> 00:01:39.330
Then capture, so audio video
equipment will actually

00:01:39.330 --> 00:01:41.230
capture the live stream,
the video

00:01:41.230 --> 00:01:43.190
stream, the audio stream.

00:01:43.190 --> 00:01:45.510
Next, after capturing,
is encoding.

00:01:45.510 --> 00:01:47.580
Encoding is a very
important step.

00:01:47.580 --> 00:01:50.530
For those of you that have done
computer science, you can

00:01:50.530 --> 00:01:51.790
relate to that.

00:01:51.790 --> 00:01:54.970
The fundamental issue is
time versus space.

00:01:54.970 --> 00:01:57.940
We're trying to compress the
data stream as efficiently as

00:01:57.940 --> 00:02:00.850
possible, and that is very
computationally intensive.

00:02:00.850 --> 00:02:03.830
So therefore, encoding is
typically done by hardware

00:02:03.830 --> 00:02:05.790
devices, so specialized
hardware.

00:02:05.790 --> 00:02:08.860
But there are also software
encoders available.

00:02:08.860 --> 00:02:10.639
Our machines are getting
more and more powerful.

00:02:10.639 --> 00:02:11.930
And I will give you a couple of

00:02:11.930 --> 00:02:14.750
examples in the demo session.

00:02:14.750 --> 00:02:16.850
Next, content delivery
network and player.

00:02:16.850 --> 00:02:19.300
So CDN is really what optimizes
the delivery to the

00:02:19.300 --> 00:02:20.630
edge of the network.

00:02:20.630 --> 00:02:24.340
And then YouTube player is how
the audience can actually

00:02:24.340 --> 00:02:26.050
consume the video content.

00:02:26.050 --> 00:02:27.900
So this is our little reference
architecture.

00:02:27.900 --> 00:02:31.920
And I will describe the steps
involved in all the pieces and

00:02:31.920 --> 00:02:35.830
how our APIs fit into
this architecture.

00:02:35.830 --> 00:02:38.780
So in the recap, we won't talk
about event production and

00:02:38.780 --> 00:02:40.910
capture, because this is not
something that we do.

00:02:40.910 --> 00:02:42.560
We'll touch upon the encoding.

00:02:42.560 --> 00:02:44.500
At YouTube we don't actually
deal with that.

00:02:44.500 --> 00:02:49.390
This is something that whoever
wants to live stream would do,

00:02:49.390 --> 00:02:54.190
either by using the hardware
device or software device.

00:02:54.190 --> 00:02:56.870
Content delivery networks-- so
delivery is very important to

00:02:56.870 --> 00:02:59.270
really optimize the
stream quality.

00:02:59.270 --> 00:03:01.010
And we'll talk about
it a little bit.

00:03:01.010 --> 00:03:03.560
And then the YouTube player.

00:03:03.560 --> 00:03:05.740
So encoding.

00:03:05.740 --> 00:03:10.650
If you have dealt with audio
video compression before, this

00:03:10.650 --> 00:03:13.340
will be fairly familiar
to you.

00:03:13.340 --> 00:03:15.930
If you haven't, I just wanted
to highlight some of the

00:03:15.930 --> 00:03:19.000
important pieces, in case you
want to integrate with our

00:03:19.000 --> 00:03:22.730
platforms. You will see this.

00:03:22.730 --> 00:03:25.230
As I mentioned, encoding is
computationally expensive.

00:03:25.230 --> 00:03:29.700
And for high-quality streams,
typically you will actually

00:03:29.700 --> 00:03:31.110
have a hardware encoder.

00:03:31.110 --> 00:03:33.480
But we do support software
encoding, as well.

00:03:33.480 --> 00:03:35.290
We don't really have
a preference.

00:03:35.290 --> 00:03:37.610
And Flash Media Live Encoder is
something you can get for

00:03:37.610 --> 00:03:38.860
free and try it out.

00:03:41.660 --> 00:03:44.080
Once the encoding is completed,
we actually use

00:03:44.080 --> 00:03:47.680
RTMP, real-time messaging
protocol, as a transport

00:03:47.680 --> 00:03:52.330
protocol to actually
use as a transport

00:03:52.330 --> 00:03:53.920
to ingest to YouTube.

00:03:53.920 --> 00:03:57.130
So once the stream is encoded,
it's actually send over RTMP

00:03:57.130 --> 00:03:59.160
up to our servers.

00:03:59.160 --> 00:04:00.820
And from there it's distributed
through the

00:04:00.820 --> 00:04:02.950
content delivery network to the
edge of the network and to

00:04:02.950 --> 00:04:05.040
the devices.

00:04:05.040 --> 00:04:09.090
We use FLV containers,
so Flash video.

00:04:09.090 --> 00:04:13.060
We are in the process of
supporting HLS, as well.

00:04:13.060 --> 00:04:15.500
So HLS live streaming
is coming.

00:04:15.500 --> 00:04:19.800
And then we use H264 for the
video encoding and AAC audio

00:04:19.800 --> 00:04:20.959
for audio encoding.

00:04:20.959 --> 00:04:24.920
And for H264, there are many
options, so you can balance

00:04:24.920 --> 00:04:27.280
stream quality versus the
bandwidth required.

00:04:27.280 --> 00:04:30.810
So anything from 400 kbps, which
will give you about 240p

00:04:30.810 --> 00:04:35.600
quality, to 720p
or even 1080p.

00:04:35.600 --> 00:04:36.400
OK.

00:04:36.400 --> 00:04:38.940
So this slide is just
a recap of how

00:04:38.940 --> 00:04:40.900
these terms fit together.

00:04:40.900 --> 00:04:44.680
So you have the RTMP transport,
FLV container

00:04:44.680 --> 00:04:47.530
within which there is an audio
stream and a video stream.

00:04:47.530 --> 00:04:49.950
The video stream obviously
takes a lot more space.

00:04:49.950 --> 00:04:54.260
It's encoded using H264, just
standard technology.

00:04:54.260 --> 00:04:56.960
And the audio stream is encoded
using AAC, and that's

00:04:56.960 --> 00:04:58.610
what we ingest at YouTube.

00:04:58.610 --> 00:05:02.720
And then we actually use our
platform to broadcast it out

00:05:02.720 --> 00:05:04.610
to our users.

00:05:04.610 --> 00:05:09.190
So what's the experience like
from the perspective of a

00:05:09.190 --> 00:05:10.800
YouTube partner?

00:05:13.380 --> 00:05:16.260
One can schedule a live
event on YouTube.

00:05:16.260 --> 00:05:19.720
One important note is, today,
this functionality is only

00:05:19.720 --> 00:05:21.950
available to our content
partners.

00:05:21.950 --> 00:05:24.505
We have more and more of these
partners enabled for live

00:05:24.505 --> 00:05:29.260
streaming functionality in
most parts of the world.

00:05:29.260 --> 00:05:31.630
We are working on extending
the reach of this

00:05:31.630 --> 00:05:32.350
functionality.

00:05:32.350 --> 00:05:34.390
So this is kind of a preview
for you guys.

00:05:34.390 --> 00:05:36.480
If you work for one of the
content partners, then you

00:05:36.480 --> 00:05:39.130
should be able to get
access to it.

00:05:39.130 --> 00:05:41.830
If you don't and you want to
build tools for these content

00:05:41.830 --> 00:05:44.000
partners, then we have
some mechanisms to

00:05:44.000 --> 00:05:46.070
help you try it out.

00:05:46.070 --> 00:05:49.200
And then we hope to extend the
ability to actually stream to

00:05:49.200 --> 00:05:51.620
a larger audience
a little later.

00:05:51.620 --> 00:05:53.730
There's still a lot
of work remaining.

00:05:53.730 --> 00:05:54.810
And this is a very
new product.

00:05:54.810 --> 00:05:57.390
We only started working on
that product last year.

00:05:59.990 --> 00:06:02.150
So once the stream
is scheduled, one

00:06:02.150 --> 00:06:03.490
can discover it.

00:06:03.490 --> 00:06:06.690
We have a landing page,
youtube.com/live, where we

00:06:06.690 --> 00:06:08.300
feature certain events.

00:06:08.300 --> 00:06:10.890
We have events that are showing
at this moment, as

00:06:10.890 --> 00:06:13.220
well as events that
are scheduled and

00:06:13.220 --> 00:06:14.860
those that have completed.

00:06:14.860 --> 00:06:17.110
You can also go to a channel
of a partner that has been

00:06:17.110 --> 00:06:20.000
enabled for live streaming and
see what events they have

00:06:20.000 --> 00:06:23.310
scheduled, if you would
like to see it.

00:06:23.310 --> 00:06:24.420
And then finally playback.

00:06:24.420 --> 00:06:27.160
So we use the regular
YouTube player to do

00:06:27.160 --> 00:06:28.720
the live stream playback.

00:06:28.720 --> 00:06:29.410
It's the same player.

00:06:29.410 --> 00:06:31.570
You don't have to do
anything special.

00:06:31.570 --> 00:06:35.590
So let's look at what's up on
YouTube Live right now.

00:06:38.110 --> 00:06:40.250
OK.

00:06:40.250 --> 00:06:43.020
So as you see, we have a bunch
of featured events.

00:06:43.020 --> 00:06:46.160
Austin City Limits, that's
a cool music festival.

00:06:46.160 --> 00:06:48.630
But let's look to see if
there's something else

00:06:48.630 --> 00:06:49.856
interesting.

00:06:49.856 --> 00:06:51.060
OK, let's try this one.

00:06:51.060 --> 00:06:53.330
America's Cup, live racing.

00:06:53.330 --> 00:06:57.310
So if you're into sailing, that
might be interesting.

00:06:57.310 --> 00:06:59.082
Let's bring it up.

00:06:59.082 --> 00:07:10.890
[VIDEO PLAYBACK]

00:07:10.890 --> 00:07:14.162
JAREK WILKIEWICZ: OK, so this
is a live streaming sailing

00:07:14.162 --> 00:07:16.928
competition from Plymouth,
England.

00:07:16.928 --> 00:07:19.310
Now, notice one cool feature.

00:07:19.310 --> 00:07:22.250
You can actually select
a camera.

00:07:22.250 --> 00:07:25.680
So this is one of the live
streams that is available.

00:07:25.680 --> 00:07:30.590
But what if I want to check
out a different boat?

00:07:30.590 --> 00:07:32.660
So this live stream is coming
from another team, from

00:07:32.660 --> 00:07:33.770
another boat.

00:07:33.770 --> 00:07:38.125
So you can actually decide what
you want to watch, and

00:07:38.125 --> 00:07:41.230
select the perspective,
and see it.

00:07:41.230 --> 00:07:45.230
This one is also interesting,
because it's actually a live

00:07:45.230 --> 00:07:47.270
representation of
who is where.

00:07:47.270 --> 00:07:50.390
So this is a geo version
with a flag

00:07:50.390 --> 00:07:51.550
representing which country.

00:07:51.550 --> 00:07:55.500
So you can start watching this
event by orienting yourself,

00:07:55.500 --> 00:07:59.040
and then decide, oh, I want to
follow the Korean team, and

00:07:59.040 --> 00:08:03.260
then pick from one of the
available views to actually

00:08:03.260 --> 00:08:05.530
enjoy the experience the way
you want to enjoy it.

00:08:05.530 --> 00:08:07.890
So as you can tell, this is
very different from your

00:08:07.890 --> 00:08:10.780
traditional TV experience,
where somebody makes the

00:08:10.780 --> 00:08:12.150
decisions for you.

00:08:12.150 --> 00:08:13.840
It's a lot more interactive.

00:08:13.840 --> 00:08:17.650
And it's being streamed in
real life in real time.

00:08:17.650 --> 00:08:21.470
This is coming in from abroad,
and I have a very nice

00:08:21.470 --> 00:08:25.730
experience watching
it here in Brazil.

00:08:25.730 --> 00:08:28.930
So this is what it looks like.

00:08:28.930 --> 00:08:32.000
OK, so this is all good, but
we're here to talk about the

00:08:32.000 --> 00:08:33.510
APIs, because we are
all developers.

00:08:33.510 --> 00:08:37.740
So how can I use the APIs to
actually interact with our

00:08:37.740 --> 00:08:38.679
live streaming platform?

00:08:38.679 --> 00:08:41.169
What's available to
us as developers?

00:08:41.169 --> 00:08:44.690
So we have several types
of APIs, starting

00:08:44.690 --> 00:08:46.100
with scheduling APIs.

00:08:46.100 --> 00:08:49.570
So these are the APIs that a
content producer might use to

00:08:49.570 --> 00:08:53.130
schedule events, modify the
event metadata, start events,

00:08:53.130 --> 00:08:54.170
end events.

00:08:54.170 --> 00:08:57.240
We have discovery API,
which will let you

00:08:57.240 --> 00:08:58.800
discover what's on live.

00:08:58.800 --> 00:09:02.440
So we have a RESTful API, which
allows you to fetch what

00:09:02.440 --> 00:09:04.510
are the streams that are
scheduled, what are the events

00:09:04.510 --> 00:09:07.870
that are live right now, what
are the archive events?

00:09:07.870 --> 00:09:11.890
And we have APIs for YouTube
player, which allows you to

00:09:11.890 --> 00:09:14.650
actually customize the playback
experience using the

00:09:14.650 --> 00:09:16.710
same API as we have for regular

00:09:16.710 --> 00:09:19.690
video on demand playback.

00:09:19.690 --> 00:09:21.910
So let's look at the discovery
APIs, because

00:09:21.910 --> 00:09:24.210
these are easy to grasp.

00:09:24.210 --> 00:09:27.500
We represent the live
events as feeds,

00:09:27.500 --> 00:09:29.220
and our API is RESTful.

00:09:29.220 --> 00:09:31.900
So for those of you that have
used any Google APIs, it

00:09:31.900 --> 00:09:33.640
should be very familiar.

00:09:33.640 --> 00:09:36.410
For those of you that haven't,
really the idea here is they

00:09:36.410 --> 00:09:37.340
run over HTTP.

00:09:37.340 --> 00:09:38.960
They're very easy to use.

00:09:38.960 --> 00:09:40.870
So here I have actually
four feeds.

00:09:40.870 --> 00:09:44.000
And we call them live
event charts.

00:09:44.000 --> 00:09:46.260
Featured events-- so these are
the ones that we think are

00:09:46.260 --> 00:09:47.730
interesting.

00:09:47.730 --> 00:09:50.030
Live now-- so those are events
that are being broadcast at

00:09:50.030 --> 00:09:51.130
this moment.

00:09:51.130 --> 00:09:53.110
Upcoming, scheduled
in the future.

00:09:53.110 --> 00:09:57.370
And then recently broadcasted
feed contains video recordings

00:09:57.370 --> 00:09:59.330
for events that have
completed.

00:09:59.330 --> 00:10:01.750
So if you missed an event, you
can actually go back to that

00:10:01.750 --> 00:10:05.095
feed and fetch a video, if the
content owner configured the

00:10:05.095 --> 00:10:07.570
event to archive off
videos, which is

00:10:07.570 --> 00:10:09.180
enabled by default, actually.

00:10:09.180 --> 00:10:10.490
You'll be able to actually
get a video

00:10:10.490 --> 00:10:11.930
recording of the past event.

00:10:11.930 --> 00:10:15.630
So if we want to access one of
these feeds, I can just issue

00:10:15.630 --> 00:10:19.160
an HTTP GET request. And
as you see, I get an

00:10:19.160 --> 00:10:21.590
XML document feed.

00:10:21.590 --> 00:10:23.750
Each feed has entries.

00:10:23.750 --> 00:10:25.920
Entries correspond to the
individual events.

00:10:25.920 --> 00:10:29.240
So really what I just showed you
is an API access example.

00:10:29.240 --> 00:10:31.650
And our API is RESTful.

00:10:31.650 --> 00:10:34.180
It runs on top of HTTP.

00:10:34.180 --> 00:10:36.620
You can parse the response
yourself in your code.

00:10:36.620 --> 00:10:37.700
We support XML.

00:10:37.700 --> 00:10:40.950
We also support JSON, or you
can use client libraries to

00:10:40.950 --> 00:10:48.080
access some of that YouTube
API backend.

00:10:48.080 --> 00:10:51.770
So here's just a recap
of what the live

00:10:51.770 --> 00:10:53.410
events feed looks like.

00:10:53.410 --> 00:10:54.870
So this is a live events
feed that I

00:10:54.870 --> 00:10:56.480
have in my test account.

00:10:56.480 --> 00:10:58.250
As you see, I have five
events scheduled.

00:10:58.250 --> 00:10:59.670
So there are five entries.

00:10:59.670 --> 00:11:02.880
Each entry will look something
like this.

00:11:02.880 --> 00:11:05.820
We'll have an event
identifier.

00:11:05.820 --> 00:11:09.410
It will have a video ID
corresponding to the stream.

00:11:09.410 --> 00:11:13.070
So while the stream
is live, that will

00:11:13.070 --> 00:11:14.470
actually be a live stream.

00:11:14.470 --> 00:11:18.310
Once the stream is archived,
it'll be a video on demand ID.

00:11:18.310 --> 00:11:19.400
So the ID doesn't change.

00:11:19.400 --> 00:11:20.870
So it's the same video ID.

00:11:20.870 --> 00:11:22.140
You can use it to watch
a live stream.

00:11:22.140 --> 00:11:25.710
But if the content has been
archived off because the event

00:11:25.710 --> 00:11:28.470
completed, you can actually use
it in your YouTube embed,

00:11:28.470 --> 00:11:31.240
just as a regular video ID.

00:11:31.240 --> 00:11:34.230
And then we maintain a
small state machine

00:11:34.230 --> 00:11:35.450
associated with the event.

00:11:35.450 --> 00:11:38.120
So in this case, the event
is in the pending state.

00:11:38.120 --> 00:11:40.020
So when I create an event,
it will be pending.

00:11:40.020 --> 00:11:43.190
Then events transition state
as I start the event and I

00:11:43.190 --> 00:11:44.400
complete the event.

00:11:44.400 --> 00:11:46.550
And I also have a start date,
so I know when this event is

00:11:46.550 --> 00:11:48.660
scheduled to start.

00:11:48.660 --> 00:11:50.800
OK, so that was the
discovery API.

00:11:50.800 --> 00:11:52.850
Now let's talk a little bit
about the scheduling API.

00:11:52.850 --> 00:11:57.450
So we offer the ability to
actually interact with the

00:11:57.450 --> 00:11:59.390
backend using this API.

00:11:59.390 --> 00:12:01.920
So rather than using the user
interface on youtube.com that

00:12:01.920 --> 00:12:04.860
I showed you a screenshot of a
little earlier, I can actually

00:12:04.860 --> 00:12:06.820
use the API to do
the same thing.

00:12:06.820 --> 00:12:09.790
And as you would expect, I can
create an event, start and

00:12:09.790 --> 00:12:10.840
stop an event.

00:12:10.840 --> 00:12:12.820
I can change the metadata
about the event

00:12:12.820 --> 00:12:14.070
and delete an event.

00:12:14.070 --> 00:12:18.660
So let's quickly walk through
the syntax for these API

00:12:18.660 --> 00:12:20.410
operations.

00:12:20.410 --> 00:12:22.960
As I mentioned, the API is
RESTful, so here's an example

00:12:22.960 --> 00:12:26.710
request that will actually
insert a new event into a live

00:12:26.710 --> 00:12:31.050
events feed of the currently
authorized user.

00:12:31.050 --> 00:12:33.320
I supply the authorization
token.

00:12:33.320 --> 00:12:36.150
So the syntax here should be
familiar to you, if you've

00:12:36.150 --> 00:12:37.440
used OAuth.

00:12:37.440 --> 00:12:39.920
If you haven't, probably a
good idea to look at it,

00:12:39.920 --> 00:12:43.720
because this is how a lot
of the web APIs are

00:12:43.720 --> 00:12:45.190
evolving, to use OAuth.

00:12:45.190 --> 00:12:47.860
OAuth, too, is particularly
nice because it's a

00:12:47.860 --> 00:12:50.120
lot easier to use.

00:12:50.120 --> 00:12:54.890
And what that allows you to
do is basically allow your

00:12:54.890 --> 00:12:56.730
application to act
on user's behalf.

00:12:56.730 --> 00:12:59.540
So we have a scope defined
for YouTube APIs.

00:12:59.540 --> 00:13:02.930
If you obtain authorization from
the user to access their

00:13:02.930 --> 00:13:06.050
data within that scope, you'll
be able to basically invoke

00:13:06.050 --> 00:13:08.350
all these operations
on the user behalf.

00:13:08.350 --> 00:13:11.370
Developer key is important,
because this is how we can

00:13:11.370 --> 00:13:15.050
identify your application and
we can offer you the ability

00:13:15.050 --> 00:13:17.810
to actually track your
application usage, monitor

00:13:17.810 --> 00:13:19.420
your quotas, and so forth.

00:13:19.420 --> 00:13:22.300
And then a couple of metadata
fields which are required--

00:13:22.300 --> 00:13:25.130
title, summary, and
start date.

00:13:25.130 --> 00:13:26.600
Pretty straightforward.

00:13:26.600 --> 00:13:29.386
Once the event is scheduled,
it can be started.

00:13:29.386 --> 00:13:32.730
It triggers a state transition
from pending to active.

00:13:32.730 --> 00:13:34.220
And then the fields--

00:13:34.220 --> 00:13:36.020
this is an example of
a partial update.

00:13:36.020 --> 00:13:39.480
I'm using the HTTP patch
request, which allows the

00:13:39.480 --> 00:13:41.370
request to be a lot more
compact, because I only

00:13:41.370 --> 00:13:44.470
specify fields that I want to
modify and their values.

00:13:44.470 --> 00:13:46.130
So in this case, I
am modifying the

00:13:46.130 --> 00:13:48.210
start date, so ytwhen.

00:13:48.210 --> 00:13:49.960
And then start value is now.

00:13:49.960 --> 00:13:51.400
And that will trigger the
state transition.

00:13:51.400 --> 00:13:52.930
The event will be started.

00:13:52.930 --> 00:13:57.240
Ending an event, similar
to the previous slide.

00:13:57.240 --> 00:14:00.450
Patch request, and I
set the end to now.

00:14:00.450 --> 00:14:02.470
And that will basically
transition the event from

00:14:02.470 --> 00:14:04.050
active to completed.

00:14:04.050 --> 00:14:06.000
Updating, as I mentioned
before--

00:14:06.000 --> 00:14:07.280
if you want to change
the metadata

00:14:07.280 --> 00:14:08.720
programmatically, you can.

00:14:08.720 --> 00:14:11.390
Again, a patch request. I
specify the fields that I want

00:14:11.390 --> 00:14:13.750
to modify, in this case,
title, summary,

00:14:13.750 --> 00:14:16.240
and the start date.

00:14:16.240 --> 00:14:18.360
And I supply the new values,
and I'm done.

00:14:18.360 --> 00:14:19.820
And then finally deleting
an event.

00:14:19.820 --> 00:14:22.600
And this one is the simplest.
It's just a basic HTTP

00:14:22.600 --> 00:14:28.670
request. Submit it to the feed
against an event ID.

00:14:28.670 --> 00:14:30.030
OK, one note.

00:14:30.030 --> 00:14:34.000
I mentioned that earlier, by
default, the live streams are

00:14:34.000 --> 00:14:36.950
actually archived off to YouTube
and recorded as video

00:14:36.950 --> 00:14:38.790
so they can be watched later.

00:14:38.790 --> 00:14:41.630
If you want to disable that in
your application, you can.

00:14:41.630 --> 00:14:43.070
So there's a YT archive flag.

00:14:43.070 --> 00:14:44.540
You can set it to false.

00:14:44.540 --> 00:14:47.760
And then another thing that
is interesting is you can

00:14:47.760 --> 00:14:50.640
actually discover the linkage
between the live event that

00:14:50.640 --> 00:14:53.460
was scheduled and the video that
will be used to actually

00:14:53.460 --> 00:14:54.900
archive the content
and vice versa.

00:14:54.900 --> 00:14:57.780
So if somebody missed an event
and in your application, you

00:14:57.780 --> 00:14:59.840
want to give them the ability
to watch the video for the

00:14:59.840 --> 00:15:02.320
event that they have missed, you
can actually discover that

00:15:02.320 --> 00:15:03.870
relationship through the API.

00:15:06.440 --> 00:15:07.950
OK, player API.

00:15:07.950 --> 00:15:11.320
As I mentioned before,
our player API--

00:15:11.320 --> 00:15:13.290
for those of you that
have used it, it

00:15:13.290 --> 00:15:14.030
will be very familiar.

00:15:14.030 --> 00:15:17.200
It works pretty much the same
way, with some exceptions.

00:15:17.200 --> 00:15:18.690
Some operations are
not supported.

00:15:18.690 --> 00:15:20.300
I will mention a
couple of them.

00:15:20.300 --> 00:15:23.230
And then for those of you that
haven't used the player API,

00:15:23.230 --> 00:15:28.300
this is the Flash or HTML5 embed
that we have. So today,

00:15:28.300 --> 00:15:30.300
we recommend using the
iframe embed, and we

00:15:30.300 --> 00:15:31.290
have API around it.

00:15:31.290 --> 00:15:33.850
So you can customize
the experience.

00:15:33.850 --> 00:15:36.410
And here's an example of a
player API invocation.

00:15:36.410 --> 00:15:40.620
So what this code example will
do-- it will actually load the

00:15:40.620 --> 00:15:42.750
YouTube API player library.

00:15:42.750 --> 00:15:45.520
It's a JavaScript wrapper.

00:15:45.520 --> 00:15:47.170
It will load a video ID.

00:15:47.170 --> 00:15:48.580
And this video could
be a live stream.

00:15:48.580 --> 00:15:49.920
It doesn't have to be
video on demand or

00:15:49.920 --> 00:15:51.380
regular YouTube video.

00:15:51.380 --> 00:15:53.540
It will register a couple
of event listeners--

00:15:53.540 --> 00:15:56.150
so [? OnPlayerReady ?] and
[? PlayerStateChange. ?]

00:15:56.150 --> 00:16:01.750
And here, what I'm doing upon
the event [? OnReady-- ?]

00:16:01.750 --> 00:16:04.510
I invoke my event handler,
[? OnPlayerReady, ?]

00:16:04.510 --> 00:16:10.700
and I invoke the YouTube API
player invocation, a method

00:16:10.700 --> 00:16:11.430
called [? playVideo. ?]

00:16:11.430 --> 00:16:14.700
So what that will do is it will
actually start a video

00:16:14.700 --> 00:16:17.250
immediately as soon as somebody
navigates to a page

00:16:17.250 --> 00:16:18.900
which includes this script.

00:16:18.900 --> 00:16:19.780
So this is a way to

00:16:19.780 --> 00:16:21.910
programmatically trigger the player.

00:16:21.910 --> 00:16:24.360
You can start and stop, and
there's a lot of other

00:16:24.360 --> 00:16:24.880
operations.

00:16:24.880 --> 00:16:26.530
You can change the volume
and all that stuff.

00:16:26.530 --> 00:16:29.000
So this is important if you want
to build your own user

00:16:29.000 --> 00:16:31.130
experience around the
YouTube player.

00:16:31.130 --> 00:16:33.030
If you don't want our controls,
you want your own

00:16:33.030 --> 00:16:35.400
controls, you can do that
through the player API.

00:16:35.400 --> 00:16:38.230
As I mentioned, some of the
operations are not supported.

00:16:38.230 --> 00:16:42.620
For example, seekTo allows you
to actually go to a specific

00:16:42.620 --> 00:16:44.230
point in the video.

00:16:44.230 --> 00:16:48.480
So with live streams, you can't
actually seekTo, because

00:16:48.480 --> 00:16:51.330
it is a little difficult to
seek into the future.

00:16:51.330 --> 00:16:53.330
And this is something that
we are still working on.

00:16:56.030 --> 00:16:57.280
So demos.

00:16:59.980 --> 00:17:02.820
We have a couple of
examples here.

00:17:02.820 --> 00:17:05.740
Watchme is a little
application that

00:17:05.740 --> 00:17:07.490
we wrote for Android.

00:17:07.490 --> 00:17:11.480
PyLive is a piece of code
running on App Engine, written

00:17:11.480 --> 00:17:14.770
in Python, that implements the
event management APIs that I

00:17:14.770 --> 00:17:15.770
showed you.

00:17:15.770 --> 00:17:17.960
WireCast is a software
encoder.

00:17:17.960 --> 00:17:21.410
And this is a partner
application from a company

00:17:21.410 --> 00:17:22.440
called Telestream.

00:17:22.440 --> 00:17:25.369
And Squrl is a constant
discovery and sharing

00:17:25.369 --> 00:17:26.609
application.

00:17:26.609 --> 00:17:30.470
So let's transition into
the demos part.

00:17:36.820 --> 00:17:41.380
So I'm going to bring
up Watchme.

00:17:41.380 --> 00:17:43.380
And I have it installed
on my Android device.

00:17:50.440 --> 00:17:51.690
First I need Wi-Fi.

00:18:01.810 --> 00:18:03.120
OK.

00:18:03.120 --> 00:18:04.796
Looks like I'm on Wi-Fi.

00:18:23.148 --> 00:18:26.140
OK.

00:18:26.140 --> 00:18:30.420
So I'm going to pick an event
that I have previously created

00:18:30.420 --> 00:18:32.170
and hit Start Streaming.

00:18:38.570 --> 00:18:39.820
And then I'm going
to go to YouTube.

00:18:42.980 --> 00:18:51.410
So this is my channel, which has
a bunch of YouTube events.

00:18:56.570 --> 00:19:04.471
[VIDEO PLAYBACK]

00:19:04.471 --> 00:19:06.292
JAREK WILKIEWICZ: As you
can tell, there is a

00:19:06.292 --> 00:19:07.542
little bit of delay.

00:19:14.090 --> 00:19:15.340
And I'm going to--

00:19:44.214 --> 00:19:45.464
Smile, you're on YouTube.

00:19:54.390 --> 00:19:58.530
OK, so that was our little
Android application demo.

00:19:58.530 --> 00:20:03.110
Let me tell you a little bit
about how it's built.

00:20:03.110 --> 00:20:07.230
So what we did is we used the
YouTube API to retrieve the

00:20:07.230 --> 00:20:09.330
event list. This application
also allows you to

00:20:09.330 --> 00:20:10.200
create a new event.

00:20:10.200 --> 00:20:12.180
You can start an
event as well.

00:20:12.180 --> 00:20:14.180
And that's a RESTful API.

00:20:14.180 --> 00:20:16.380
And then the part that is a
little tricky is the part that

00:20:16.380 --> 00:20:20.080
takes care of the stream
encoding and actually

00:20:20.080 --> 00:20:23.250
transmitting over to our YouTube
live streaming server.

00:20:23.250 --> 00:20:28.180
So for that, we use a native
application called FFmpeg.

00:20:28.180 --> 00:20:31.400
For those of you that have
actually done any video

00:20:31.400 --> 00:20:33.480
processing, transcoding, FFmpeg

00:20:33.480 --> 00:20:35.190
should be very familiar.

00:20:35.190 --> 00:20:40.255
And we use FFmpeg's ability to
actually encode the video and

00:20:40.255 --> 00:20:44.000
the audio stream, wrap it in the
FLV container, and stream

00:20:44.000 --> 00:20:46.710
it over RTMP to our YouTube
live server.

00:20:46.710 --> 00:20:50.100
We access the FFmpeg using
a JNI wrapper.

00:20:50.100 --> 00:20:53.140
So that's the Java native
interface wrapper.

00:20:53.140 --> 00:20:56.800
And a couple of interesting
notes about this

00:20:56.800 --> 00:20:57.640
implementation.

00:20:57.640 --> 00:21:02.290
We use a YUV byte
array for video.

00:21:02.290 --> 00:21:05.260
So YUV is a way to represent
uncompressed video.

00:21:05.260 --> 00:21:09.880
And for mono, we have 16-bit
pulse code modulation--

00:21:09.880 --> 00:21:10.920
PCM--

00:21:10.920 --> 00:21:13.010
audio stream.

00:21:13.010 --> 00:21:17.340
And we encode that as well, wrap
it in an FLV container,

00:21:17.340 --> 00:21:19.880
ship it up to our live
servers over RTMP.

00:21:22.640 --> 00:21:25.300
So that concludes the
Android demo.

00:21:25.300 --> 00:21:28.510
Let's look at this other
application that I wrote.

00:21:28.510 --> 00:21:31.730
As I mentioned, I was literally
finishing this thing

00:21:31.730 --> 00:21:34.280
up on the plane.

00:21:34.280 --> 00:21:37.520
So what I did is I wrote a
Python application which

00:21:37.520 --> 00:21:40.330
allows you to basically retrieve
a list of events.

00:21:40.330 --> 00:21:41.950
You can view events, you
can create events.

00:21:44.660 --> 00:21:45.520
This is what it looks like.

00:21:45.520 --> 00:21:47.080
I can just look at
the event that we

00:21:47.080 --> 00:21:48.170
used for live streaming.

00:21:48.170 --> 00:21:51.330
I'm retrieving all the
information from the YouTube

00:21:51.330 --> 00:21:56.440
backend using the
RESTful APIs.

00:21:56.440 --> 00:21:58.400
And what I can also do
is I can actually

00:21:58.400 --> 00:22:00.230
create a new event.

00:22:00.230 --> 00:22:08.190
So let me just create one.

00:22:16.690 --> 00:22:17.840
OK, that works.

00:22:17.840 --> 00:22:20.540
I'm actually running the
local app engine

00:22:20.540 --> 00:22:22.070
instance on my machine.

00:22:22.070 --> 00:22:24.600
So this is the Python code
that is executing as I am

00:22:24.600 --> 00:22:27.950
invoking the API operations.

00:22:27.950 --> 00:22:28.250
OK.

00:22:28.250 --> 00:22:30.590
So I have an event already
scheduled.

00:22:30.590 --> 00:22:34.030
And then what I would like to
do is I would like to--

00:22:36.690 --> 00:22:37.940
let me just close some
of these windows.

00:22:43.670 --> 00:22:51.310
I would like to live
stream to my event.

00:22:51.310 --> 00:22:53.690
So as you see, because I
scheduled the event, it

00:22:53.690 --> 00:23:00.920
actually now shows up in the
live events panel for my user

00:23:00.920 --> 00:23:03.720
account on YouTube.

00:23:03.720 --> 00:23:08.970
So what I'm going to do now is
switch to WireCast, which is a

00:23:08.970 --> 00:23:09.800
software application.

00:23:09.800 --> 00:23:11.500
It's a software encoder.

00:23:11.500 --> 00:23:18.430
So what I can do is I can select
Broadcast Settings, and

00:23:18.430 --> 00:23:21.760
select YouTube from the list
of available stream

00:23:21.760 --> 00:23:23.010
destinations.

00:23:25.530 --> 00:23:26.922
Log in.

00:23:26.922 --> 00:23:28.886
And let me just pick--

00:23:37.250 --> 00:23:38.050
OK.

00:23:38.050 --> 00:23:42.550
So what happened is WireCast
logged in.

00:23:42.550 --> 00:23:46.830
And using the API, it retrieved
the event list for

00:23:46.830 --> 00:23:49.890
events that are currently
pending.

00:23:49.890 --> 00:23:50.550
Hello, Brazil.

00:23:50.550 --> 00:23:51.890
Let me select this one.

00:23:51.890 --> 00:24:01.170
I'll hit Save. And now WireCast
is configured.

00:24:01.170 --> 00:24:03.390
So I don't have to type stream
destination or any of the

00:24:03.390 --> 00:24:06.120
stuff that would typically
be involved in

00:24:06.120 --> 00:24:07.560
doing the live streaming.

00:24:07.560 --> 00:24:10.190
Let me go back to my little
live event manager.

00:24:10.190 --> 00:24:13.430
And as you see, the event right
now is in pending state.

00:24:13.430 --> 00:24:15.970
So let's start it.

00:24:15.970 --> 00:24:18.350
And what that will do--

00:24:18.350 --> 00:24:20.050
and I gave you an
example of that.

00:24:20.050 --> 00:24:21.940
That will actually issue the
patch request and the

00:24:21.940 --> 00:24:24.680
transition of state from
pending to active.

00:24:24.680 --> 00:24:29.870
And that's what I'm showing
here, is an active event.

00:24:29.870 --> 00:24:31.890
So let me go to WireCast
now and hit

00:24:31.890 --> 00:24:36.720
Broadcast to start streaming.

00:24:36.720 --> 00:24:44.940
I go back to my live event
feed, see what's active.

00:24:44.940 --> 00:24:48.920
Oh, it shows now that Hello,
Brazil is an active event.

00:24:48.920 --> 00:24:50.170
Let's click on it.

00:24:57.620 --> 00:24:59.980
And this is me.

00:24:59.980 --> 00:25:06.160
So what you see happen is
WireCast was able to retrieve

00:25:06.160 --> 00:25:09.890
the live event list
from our backend.

00:25:09.890 --> 00:25:12.250
I used my little Python
application to actually

00:25:12.250 --> 00:25:13.880
transition the event state.

00:25:13.880 --> 00:25:17.610
And then right now, WireCast
is actually encoding the

00:25:17.610 --> 00:25:21.070
stream coming in from my webcam,
streaming it out to

00:25:21.070 --> 00:25:24.070
YouTube, and making
it available for

00:25:24.070 --> 00:25:25.320
our users to see.

00:25:28.270 --> 00:25:39.050
So a little note about the
PyLive, which is what I called

00:25:39.050 --> 00:25:42.210
my little Python
implementation.

00:25:42.210 --> 00:25:45.710
It's an App Engine application
running with Python.

00:25:45.710 --> 00:25:47.490
I used OAuth2 authorization.

00:25:47.490 --> 00:25:50.810
And for that, I chose the
OAuth2 client library.

00:25:50.810 --> 00:25:54.250
If you're thinking about using
OAuth for your application, I

00:25:54.250 --> 00:25:55.190
highly recommend it.

00:25:55.190 --> 00:25:57.700
It makes OAuth with
Python super easy.

00:25:57.700 --> 00:26:00.750
So I had to write very little
code to handle OAuth.

00:26:00.750 --> 00:26:06.530
All I needed to do is decorate
some of my handlers using the

00:26:06.530 --> 00:26:12.140
OAuth2-required decorator
and annotation.

00:26:12.140 --> 00:26:13.120
And that was it.

00:26:13.120 --> 00:26:17.580
So it makes the OAuth2
processing very easy.

00:26:17.580 --> 00:26:22.340
And then I am using urllib2 to
actually make the RESTful API

00:26:22.340 --> 00:26:22.990
invocations.

00:26:22.990 --> 00:26:26.630
So this stuff is
all very easy.

00:26:26.630 --> 00:26:30.200
WireCast is a software
application.

00:26:30.200 --> 00:26:32.370
It's written by a partner.

00:26:32.370 --> 00:26:34.090
They were able to actually
pull this functionality

00:26:34.090 --> 00:26:35.820
together in a very short
amount of time.

00:26:35.820 --> 00:26:39.680
It literally took them a couple
of days to get it into

00:26:39.680 --> 00:26:41.880
their app, right before
this event.

00:26:41.880 --> 00:26:45.770
So I'm very excited that I was
able to bring it here and show

00:26:45.770 --> 00:26:46.760
you, so that you have
a little better

00:26:46.760 --> 00:26:48.930
idea of what's involved.

00:26:48.930 --> 00:26:51.850
And then another application
that is kind of cool--

00:26:51.850 --> 00:26:55.010
it's a content curation
application from a company

00:26:55.010 --> 00:26:56.340
called Squrl.

00:26:56.340 --> 00:26:59.950
And what they do is, it's an
application that lets you

00:26:59.950 --> 00:27:01.310
discover video content.

00:27:01.310 --> 00:27:03.950
It's on YouTube video content,
but not only YouTube.

00:27:03.950 --> 00:27:05.330
The web is a big place.

00:27:05.330 --> 00:27:06.510
There's other video sources.

00:27:06.510 --> 00:27:11.080
So they pull in video sources
from multiple streams. And

00:27:11.080 --> 00:27:15.200
they basically let users
organize it and share it.

00:27:15.200 --> 00:27:18.280
So let's see what
it looks like.

00:27:21.950 --> 00:27:23.180
OK.

00:27:23.180 --> 00:27:26.240
This is my Squrl account.

00:27:26.240 --> 00:27:32.010
And in my account, I actually
subscribe to a feed called

00:27:32.010 --> 00:27:33.470
Featured Live Playlists.

00:27:33.470 --> 00:27:36.890
So if I click on that feed,
what you see is they are

00:27:36.890 --> 00:27:43.150
actually retrieving, using the
API, the feed entries for the

00:27:43.150 --> 00:27:45.540
feeds that I showed you earlier
in this presentation.

00:27:45.540 --> 00:27:50.430
So I'm actually looking at the
live events happening now,

00:27:50.430 --> 00:27:53.200
those that are scheduled, those
that have been broadcast

00:27:53.200 --> 00:27:55.530
already, and those that
are featured.

00:27:55.530 --> 00:27:59.400
So let me look at upcoming
live events.

00:27:59.400 --> 00:28:00.790
OK.

00:28:00.790 --> 00:28:02.380
See if there's something
interesting here.

00:28:02.380 --> 00:28:05.440
Oh, Austin City Limits
music festival.

00:28:05.440 --> 00:28:08.790
So this is going to
be pretty cool.

00:28:08.790 --> 00:28:12.800
So let's see if I can
subscribe to it.

00:28:12.800 --> 00:28:16.670
So Squrl uses this concept
of a squirrel.

00:28:16.670 --> 00:28:19.600
Squirrels grab stuff and
take it back home.

00:28:19.600 --> 00:28:22.240
And that's their user
interface metaphor.

00:28:22.240 --> 00:28:24.630
So as you browse content and you
discover things that are

00:28:24.630 --> 00:28:27.120
interesting, you can just
take it with you.

00:28:27.120 --> 00:28:33.960
So I will Squrl this channel,
and I'll save it in my live

00:28:33.960 --> 00:28:36.200
connection, and create
a new playlist for

00:28:36.200 --> 00:28:37.290
this type of content.

00:28:37.290 --> 00:28:38.540
I will call it Music.

00:28:42.890 --> 00:28:44.170
OK.

00:28:44.170 --> 00:28:46.610
It was Squrled.

00:28:46.610 --> 00:28:55.770
So if I go back to my channel,
you see I have my live

00:28:55.770 --> 00:28:59.640
collection, I have Music.

00:28:59.640 --> 00:29:04.320
And this event is currently
in my collection.

00:29:04.320 --> 00:29:10.160
One thing that they also do is
they actually keep track of

00:29:10.160 --> 00:29:13.560
events that are coming up that
you haven't seen yet.

00:29:13.560 --> 00:29:15.800
And they show you a little count
of how many new ones

00:29:15.800 --> 00:29:21.360
were created, so you can see if
somebody added a new event.

00:29:21.360 --> 00:29:27.440
And another nice thing is this
account here is actually a

00:29:27.440 --> 00:29:32.270
curator, representing
somebody that is

00:29:32.270 --> 00:29:34.280
curating YouTube content.

00:29:34.280 --> 00:29:39.030
And you can actually
see what else they

00:29:39.030 --> 00:29:42.490
have curated as well.

00:29:42.490 --> 00:29:46.380
So what they are able to do
is use the discovery APIs.

00:29:46.380 --> 00:29:49.350
And this is something that
you can use today

00:29:49.350 --> 00:29:50.510
if you would like.

00:29:50.510 --> 00:29:54.460
And they consume the streams.
They wrap the very nice user

00:29:54.460 --> 00:29:55.700
interface around it.

00:29:55.700 --> 00:29:58.220
And they also give the user the
ability to keep track of

00:29:58.220 --> 00:29:59.130
what is new.

00:29:59.130 --> 00:30:02.000
If they missed an event, because
the API exposes the

00:30:02.000 --> 00:30:04.850
linkage between the event and
the video ID, you can actually

00:30:04.850 --> 00:30:08.420
consume the archive event as
well using the same user

00:30:08.420 --> 00:30:09.670
experience.

00:30:13.500 --> 00:30:14.260
OK.

00:30:14.260 --> 00:30:18.330
So finally, a couple of notes
about what's coming up on

00:30:18.330 --> 00:30:19.410
YouTube live.

00:30:19.410 --> 00:30:22.760
So I am personally very happy
that Rock in Rio will be live

00:30:22.760 --> 00:30:24.470
streamed on YouTube.

00:30:24.470 --> 00:30:28.190
Not in Brazil, because here you
have to watch it on TV.

00:30:28.190 --> 00:30:31.080
But when I get back home, I'll
be able to see it live on

00:30:31.080 --> 00:30:34.960
YouTube, since it'll be actually
broadcast in a lot of

00:30:34.960 --> 00:30:36.120
other countries.

00:30:36.120 --> 00:30:39.020
And then Trama, if you're into
indie music, is another

00:30:39.020 --> 00:30:41.800
interesting channel.

00:30:41.800 --> 00:30:45.420
It's a partner, and I know they
will have live events on

00:30:45.420 --> 00:30:47.120
their channel as well.

00:30:47.120 --> 00:30:51.350
America's Cup is something that
I showed you previously,

00:30:51.350 --> 00:30:53.840
as a part of the demo.

00:30:53.840 --> 00:30:59.050
Let me just play a promo video
that shows the type of

00:30:59.050 --> 00:31:03.085
functionality that they have
implemented just as a recap.

00:31:03.085 --> 00:31:06.474
[VIDEO PLAYBACK]

00:31:06.474 --> 00:31:09.897
-A new dimension to
the America's Cup.

00:31:09.897 --> 00:31:12.342
-Just sheer, raw carbon-fiber
power.

00:31:12.342 --> 00:31:17.606
-This is where they start
to get serious.

00:31:17.606 --> 00:31:20.361
-We've got these boats
that are going to

00:31:20.361 --> 00:31:22.285
blow people's minds.

00:31:22.285 --> 00:31:25.180
-These guys are hanging on
at the back of the boat.

00:31:25.180 --> 00:31:28.050
-It's a hard time physically
for these sailors.

00:31:31.375 --> 00:31:31.850
-25 knots.

00:31:31.850 --> 00:31:32.325
Wow.

00:31:32.325 --> 00:31:34.240
That's just unheard of.

00:31:34.240 --> 00:31:35.285
-Three, two, one.

00:31:35.285 --> 00:31:36.770
Here we go.

00:31:36.770 --> 00:31:37.760
- [INAUDIBLE]

00:31:37.760 --> 00:31:40.730
100-meter-plus lead here.

00:31:40.730 --> 00:31:44.525
-The heart rate's up around
about 150 to 180 beats a

00:31:44.525 --> 00:31:44.690
minute.

00:31:44.690 --> 00:31:46.670
-This is speedboat speed.

00:31:49.640 --> 00:31:50.630
This is speedboat speed.

00:31:50.630 --> 00:31:53.105
I mean, this is crazy stuff.

00:31:53.105 --> 00:31:56.075
[UNINTELLIGIBLE]

00:31:56.075 --> 00:31:58.550
-This one slip could
be catastrophic.

00:32:03.030 --> 00:32:07.058
-The America's Cup sails
into a new era.

00:32:07.058 --> 00:32:10.520
[END VIDEO PLAYBACK]

00:32:10.520 --> 00:32:10.850
JAREK WILKIEWICZ: OK.

00:32:10.850 --> 00:32:16.690
So in recap, why is this useful
or relevant to you?

00:32:16.690 --> 00:32:19.270
We have over 20,000 content
partners worldwide.

00:32:19.270 --> 00:32:22.687
And we are enabling more and
more of them for live

00:32:22.687 --> 00:32:24.060
streaming support.

00:32:24.060 --> 00:32:27.950
And those are the type of
customers that will be

00:32:27.950 --> 00:32:30.540
interested in encoding
solutions, event management

00:32:30.540 --> 00:32:32.190
solutions, content
management system

00:32:32.190 --> 00:32:33.920
integration, and so forth.

00:32:33.920 --> 00:32:37.940
We have a user interface on
youtube.com, but developers

00:32:37.940 --> 00:32:41.110
can be a little more innovative
than what we can

00:32:41.110 --> 00:32:42.670
do, I'm sure.

00:32:42.670 --> 00:32:44.930
I'm always pleasantly surprised
by what people are

00:32:44.930 --> 00:32:46.240
able to put together.

00:32:46.240 --> 00:32:48.850
And then for our users, content
discovery, curation--

00:32:48.850 --> 00:32:50.810
we get over 3 billion
views per day.

00:32:50.810 --> 00:32:52.590
And there are a lot of
interesting YouTube

00:32:52.590 --> 00:32:54.810
applications that actually
present a different user

00:32:54.810 --> 00:32:56.940
experience around our content.

00:32:56.940 --> 00:32:57.760
And we support that.

00:32:57.760 --> 00:33:00.160
We would like to see
more of that.

00:33:00.160 --> 00:33:02.270
Here's a link of a couple
of resources.

00:33:02.270 --> 00:33:06.116
The usual-- we have a blog,
documentation is pretty good.

00:33:06.116 --> 00:33:07.900
We have a Twitter account
if you'd like to

00:33:07.900 --> 00:33:09.170
reach us through Twitter.

00:33:09.170 --> 00:33:10.670
The user forum.

00:33:10.670 --> 00:33:11.920
And that's pretty much it.

00:33:11.920 --> 00:33:16.210
So if you have any questions,
we have a couple

00:33:16.210 --> 00:33:17.120
more minutes left.

00:33:17.120 --> 00:33:21.880
And then again I'll be around
in the YouTube lobby most of

00:33:21.880 --> 00:33:22.970
the day today.

00:33:22.970 --> 00:33:25.420
So if you don't get a chance
to ask me now, you can just

00:33:25.420 --> 00:33:27.780
come by and chat with
me afterwards.

00:33:27.780 --> 00:33:30.719
Any questions?

00:33:30.719 --> 00:33:31.969
MALE SPEAKER: [INAUDIBLE]

00:33:35.549 --> 00:33:36.040
JAREK WILKIEWICZ: Yeah.

00:33:36.040 --> 00:33:38.650
So the question was, what's the
minimum required to be a

00:33:38.650 --> 00:33:39.370
content partner?

00:33:39.370 --> 00:33:42.800
So I don't have a very good
answer to that, because I work

00:33:42.800 --> 00:33:44.670
on the engineering side,
on the API side.

00:33:44.670 --> 00:33:51.520
And the content partner team is
a team that evaluates the

00:33:51.520 --> 00:33:52.780
quality of the content.

00:33:52.780 --> 00:33:55.290
Typically what they look
for is, do you

00:33:55.290 --> 00:33:56.250
produce good content?

00:33:56.250 --> 00:33:58.250
Do you have an audience?

00:33:58.250 --> 00:34:00.630
Do you already have a YouTube
presence with a lot of

00:34:00.630 --> 00:34:02.020
subscribers?

00:34:02.020 --> 00:34:04.450
So that typically
is important.

00:34:04.450 --> 00:34:07.780
So they want folks who will
produce original content.

00:34:07.780 --> 00:34:11.139
They have rights to that
content, in order to be a

00:34:11.139 --> 00:34:12.310
content partner.

00:34:12.310 --> 00:34:15.199
Now for application developers,
some of the

00:34:15.199 --> 00:34:17.060
partners that I showed
you here--

00:34:17.060 --> 00:34:19.340
if you are developing an
application for content

00:34:19.340 --> 00:34:21.530
partners-- so if you're
going to be targeting

00:34:21.530 --> 00:34:23.880
that group of people--

00:34:23.880 --> 00:34:27.830
then contact us and we'll help
you get access to the platform

00:34:27.830 --> 00:34:29.230
for testing purposes.

00:34:29.230 --> 00:34:31.320
So for API partners, this is
something that we've been

00:34:31.320 --> 00:34:34.340
working on to make sure that our
developers can actually do

00:34:34.340 --> 00:34:36.600
the testing, much like what
I showed you today.

00:34:36.600 --> 00:34:39.510
So you could do your testing
before you roll out your

00:34:39.510 --> 00:34:41.080
product to the partners.

00:34:41.080 --> 00:34:45.280
For more information, if you
go to youtube.com/partner,

00:34:45.280 --> 00:34:46.530
there's a lot of information
there.

00:34:49.030 --> 00:34:50.150
OK.

00:34:50.150 --> 00:34:51.400
Another question?

00:34:54.150 --> 00:34:56.530
MALE SPEAKER: I saw that you
have a lot of simultaneous

00:34:56.530 --> 00:35:00.860
cameras available on the stream
and they have titles.

00:35:00.860 --> 00:35:05.200
Is it possible to change the
title using the API?

00:35:05.200 --> 00:35:06.450
JAREK WILKIEWICZ: Yeah.

00:35:10.370 --> 00:35:13.900
Each stream is a video.

00:35:13.900 --> 00:35:19.530
And the video metadata
associated with that stream is

00:35:19.530 --> 00:35:22.800
very similar to the regular
metadata that you see for

00:35:22.800 --> 00:35:23.990
regular videos.

00:35:23.990 --> 00:35:28.620
So the streams in the event
are treated as a playlist.

00:35:28.620 --> 00:35:32.240
Each playlist has
a video entry.

00:35:32.240 --> 00:35:35.170
And that metadata corresponds
to what you'll

00:35:35.170 --> 00:35:36.240
see with the video.

00:35:36.240 --> 00:35:38.420
Yeah.

00:35:38.420 --> 00:35:44.630
MALE SPEAKER:
[SPEAKING FOREIGN LANGUAGE]

00:35:44.630 --> 00:35:46.166
JAREK WILKIEWICZ: OK.

00:35:46.166 --> 00:35:52.858
So I think I'm waiting
for translation.

00:35:52.858 --> 00:35:54.108
FEMALE SPEAKER: [INAUDIBLE]

00:35:57.840 --> 00:35:58.110
JAREK WILKIEWICZ: Yes.

00:35:58.110 --> 00:36:01.730
So the question was, the
multiple camera view, is that

00:36:01.730 --> 00:36:02.770
available for partners?

00:36:02.770 --> 00:36:06.830
So that's a feature
of the player.

00:36:06.830 --> 00:36:10.270
So if the stream actually has
multiple cameras, then the

00:36:10.270 --> 00:36:12.510
player will be able
to display it.

00:36:12.510 --> 00:36:16.370
So this is something that
a partner can schedule.

00:36:16.370 --> 00:36:18.650
And if they actually have
multiple video streams, then

00:36:18.650 --> 00:36:20.780
our player detects that
through the metadata.

00:36:20.780 --> 00:36:22.455
And it will actually show
the multiple cameras.

00:36:25.430 --> 00:36:28.190
OK, I guess we have time
for one more question.

00:36:28.190 --> 00:36:29.650
So let's take one
last question.

00:36:29.650 --> 00:36:33.180
And then after this, I'll
be available outside.

00:36:33.180 --> 00:36:40.480
MALE SPEAKER: I just wanted to
know about if there is any

00:36:40.480 --> 00:36:46.580
time frame or plans to support
VP8 streaming instead of H264?

00:36:46.580 --> 00:36:47.580
[INTERPOSING VOICES]

00:36:47.580 --> 00:36:48.940
JAREK WILKIEWICZ: Yeah, that's
a good question.

00:36:48.940 --> 00:36:54.610
So I don't have the time
frame for that.

00:36:54.610 --> 00:36:56.710
But yeah, that is something that
the team is working on,

00:36:56.710 --> 00:36:59.590
because that question
has come up before.

00:36:59.590 --> 00:37:02.560
So I'm pretty sure that this is
going to come, but I don't

00:37:02.560 --> 00:37:03.810
have the exact time frame.

00:37:06.850 --> 00:37:07.180
OK.

00:37:07.180 --> 00:37:08.780
So I think we ran out of time.

00:37:08.780 --> 00:37:10.990
Thank you very much for coming
to this YouTube session.

00:37:10.990 --> 00:37:12.100
I hope that was useful.

00:37:12.100 --> 00:37:15.480
And please come by and say hello
after the presentation.

00:37:15.480 --> 00:37:16.730
Thank you.

