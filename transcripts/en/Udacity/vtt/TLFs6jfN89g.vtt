WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:03.800
Because all of these things can happen every cycle,

00:00:03.800 --> 00:00:08.000
there are some interesting things that we need to consider. And those are,

00:00:08.000 --> 00:00:12.510
can we do same cycle issue of an instruction and then immediately dispatch that

00:00:12.510 --> 00:00:17.300
instruction in the same cycle if it doesn't need to capture any results?

00:00:17.300 --> 00:00:22.670
Typically the answer here is no. Why? Well because while

00:00:22.670 --> 00:00:27.270
issuing the instruction, we are putting stuff in it's reservation station, and

00:00:27.270 --> 00:00:31.440
usually to dispatch when into test what's in the reservation station. So during

00:00:31.440 --> 00:00:35.660
the issue cycle we are writing to the reservation station, and that reservation

00:00:35.660 --> 00:00:40.800
station is not ready yet to be recognized as a dispatchable instruction. So,

00:00:40.800 --> 00:00:44.210
pretty much, the reservation station is treated as empty during this cycle

00:00:44.210 --> 00:00:48.360
while we are dispatching the instruction. And only starting in the next cycle,

00:00:48.360 --> 00:00:52.760
that instruction becomes eligible for dispatch. But it is possible to

00:00:52.760 --> 00:00:58.260
design the processor in a way that allows same cycle issue in dispatch. The next

00:00:58.260 --> 00:01:03.000
thing is whether it's possible to do same cycle capture and then dispatch. So

00:01:03.000 --> 00:01:06.440
if an instruction is sitting in a reservation station after being issued, and

00:01:06.440 --> 00:01:12.530
it captures its last missing operand in this cycle can it also dispatch in this

00:01:12.530 --> 00:01:18.590
cycle. Typically the answer to this question is also no. And that is because,

00:01:18.590 --> 00:01:24.580
again, the reservation station here updates it's status from operands missing to

00:01:24.580 --> 00:01:30.250
operands available during the cycle when it is doing the capture and next cycle,

00:01:30.250 --> 00:01:34.490
this reservation station looks like it is something that might dispatch, but

00:01:34.490 --> 00:01:39.630
it is, again, possible to capture operands. And consider this instruction for

00:01:39.630 --> 00:01:43.920
dispatch. It just needs more hardware for that. And finally can we

00:01:43.920 --> 00:01:48.490
update the RAT entry for both issue and write result in the same cycle?

00:01:49.740 --> 00:01:54.660
What's happening here is that an instruction that is being issued might need to

00:01:54.660 --> 00:02:00.520
update the RAT. To change the entry that belongs to it's destination operand.

00:02:01.570 --> 00:02:07.850
Meanwhile the instruction that is broadcasting, also needs to update the RAT

00:02:07.850 --> 00:02:11.830
that corresponds to it's destination operand. So if the instruction is being

00:02:11.830 --> 00:02:18.400
issued and the one that is writing it's result. Have the same register that

00:02:18.400 --> 00:02:24.240
is their destination, then this RAT entry needs to be sort of updated twice.

00:02:24.240 --> 00:02:29.740
So can we do that? And the answer to this is typically yes,

00:02:29.740 --> 00:02:34.650
because this is not something where the entry needs to be written once and

00:02:34.650 --> 00:02:39.160
then written again. What we need to ensure is that the instruction that is

00:02:39.160 --> 00:02:44.990
issuing, ends up being the one whose value is kept in the RAT.

00:02:44.990 --> 00:02:48.500
So pretty much these two write to the same entry in the RAT.

00:02:48.500 --> 00:02:54.020
The end result of that should be, the thing that the issuing instruction wrote.

00:02:55.020 --> 00:02:59.440
Why? Well, because the right result instruction is trying to point others who

00:02:59.440 --> 00:03:04.920
need to read this register, to the registers that it's going to write.

00:03:04.920 --> 00:03:08.210
Meanwhile, the issuing instruction, which is later in the program order,

00:03:09.330 --> 00:03:12.370
is telling the instructions that are going to issue after it,

00:03:12.370 --> 00:03:15.620
that they need to look at it's reservation station for

00:03:15.620 --> 00:03:21.180
the result. And because the instructions who will read the RAT are the ones

00:03:21.180 --> 00:03:25.760
that issue even later, they need to see the latest value of the register,

00:03:25.760 --> 00:03:31.780
which means they need to see the value that the issue instruction is producing.

00:03:31.780 --> 00:03:36.700
And because this is a simple decision, here, you just write this one and

00:03:36.700 --> 00:03:41.400
not this one, if both need to be written. We can do that in the same cycle.

