WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.820
[MUSIC PLAYING]

00:00:05.640 --> 00:00:07.640
CARMEN JACKSON: Hey, everyone.

00:00:07.640 --> 00:00:10.564
My name is Carmen, and I'm on
the Android Performance Team.

00:00:10.564 --> 00:00:12.980
And today I'm going to show
you some examples of analyzing

00:00:12.980 --> 00:00:15.560
performance using systrace.

00:00:15.560 --> 00:00:19.270
Before I do, want to remind you
that your app is not an island.

00:00:19.270 --> 00:00:21.100
It's running on top
of several layers.

00:00:21.100 --> 00:00:23.380
You know, the phone hardware,
the Android framework,

00:00:23.380 --> 00:00:25.630
libraries that you're
incorporating, AB tests.

00:00:25.630 --> 00:00:28.450
So you might think you know
what your code is doing.

00:00:28.450 --> 00:00:31.420
But the reality might
actually surprise you.

00:00:31.420 --> 00:00:33.160
And this is where this
systrace comes in.

00:00:33.160 --> 00:00:35.920
So systrace is a tool that
lets you collect precise timing

00:00:35.920 --> 00:00:38.230
information about what's
going on your device

00:00:38.230 --> 00:00:39.610
and then visualize it.

00:00:39.610 --> 00:00:42.839
It records down to the
individual CPU time slice.

00:00:42.839 --> 00:00:44.380
On the Android
Performance Team, it's

00:00:44.380 --> 00:00:46.755
the most important tool we
have for debugging performance

00:00:46.755 --> 00:00:47.447
issues.

00:00:47.447 --> 00:00:49.030
Tim Murray and I
have given some talks

00:00:49.030 --> 00:00:50.800
about how to use
systrace in the past.

00:00:50.800 --> 00:00:53.550
And if you want to know more
about that, Google for his I/O

00:00:53.550 --> 00:00:54.340
talk.

00:00:54.340 --> 00:00:56.964
But today I'm going to focus on
showing you what kind of issues

00:00:56.964 --> 00:00:59.350
you can find in your app
when you use systrace.

00:00:59.350 --> 00:01:01.900
So I took traces of three
apps that I don't work on.

00:01:01.900 --> 00:01:04.569
But I could still quickly
find potential improvements

00:01:04.569 --> 00:01:06.040
to their startup time.

00:01:06.040 --> 00:01:07.480
So let's jump in.

00:01:07.480 --> 00:01:10.810
With the first app, when
I look at the trace,

00:01:10.810 --> 00:01:14.320
three different activity starts
jumped out at me right away.

00:01:14.320 --> 00:01:17.380
There are a lot of reasons
to use trampoline activities.

00:01:17.380 --> 00:01:18.880
I see them a lot
when developers are

00:01:18.880 --> 00:01:21.970
trying to show a splash screen,
or do a permissions check,

00:01:21.970 --> 00:01:23.110
something like that.

00:01:23.110 --> 00:01:24.944
But they definitely
impact your launch time.

00:01:24.944 --> 00:01:26.693
And depending on what
you're trying to do,

00:01:26.693 --> 00:01:27.967
there might be a better way.

00:01:27.967 --> 00:01:29.800
So if you're trying to
make a splash screen,

00:01:29.800 --> 00:01:31.890
you could set up a
special launch theme.

00:01:31.890 --> 00:01:33.910
Or for permissions, you
could refactor your code

00:01:33.910 --> 00:01:35.701
so that you only open
the separate activity

00:01:35.701 --> 00:01:36.880
if you need to.

00:01:36.880 --> 00:01:39.130
I don't know why this
app has these activities.

00:01:39.130 --> 00:01:40.640
And maybe there are critical.

00:01:40.640 --> 00:01:45.051
But if they don't, that's a
160 millisecond opportunity.

00:01:45.051 --> 00:01:47.760
In the same app, I also browse
through the names of the views

00:01:47.760 --> 00:01:49.130
being inflated by this app.

00:01:49.130 --> 00:01:50.880
Based on the name of
this highlighted view

00:01:50.880 --> 00:01:53.445
in the second row, it looks
like it's a drawer view.

00:01:53.445 --> 00:01:55.320
Drawer views are always
a bit of a conundrum.

00:01:55.320 --> 00:01:57.528
Because they often have a
lot of child views and they

00:01:57.528 --> 00:01:59.100
take a long time to inflate.

00:01:59.100 --> 00:02:02.670
But sometimes we need them
immediately for UX reasons.

00:02:02.670 --> 00:02:04.290
If this app can pull
this inflate out

00:02:04.290 --> 00:02:05.831
of the critical path
of startup, they

00:02:05.831 --> 00:02:09.271
could save 42 more milliseconds.

00:02:09.271 --> 00:02:11.770
So this second app is following
the pattern for app startups

00:02:11.770 --> 00:02:12.670
that I would expect.

00:02:12.670 --> 00:02:15.100
In the top level there's no
extra activities or services

00:02:15.100 --> 00:02:16.029
being started.

00:02:16.029 --> 00:02:18.070
I dug in a little more,
clicked on the views that

00:02:18.070 --> 00:02:20.230
were being inflated, and
the names of the widgets

00:02:20.230 --> 00:02:23.110
that I could see matched
up with what was visible

00:02:23.110 --> 00:02:24.410
when the app started.

00:02:24.410 --> 00:02:25.850
So far so good.

00:02:25.850 --> 00:02:27.520
But then I saw this
gap in activity

00:02:27.520 --> 00:02:30.526
inside bind application that
takes up 30 milliseconds.

00:02:30.526 --> 00:02:31.900
When I click on
that trace point,

00:02:31.900 --> 00:02:33.483
I'll see that it's
monitor contention.

00:02:33.483 --> 00:02:35.290
And I get more information.

00:02:35.290 --> 00:02:39.310
So monitor contention is another
way of saying lock contention,

00:02:39.310 --> 00:02:42.160
where the owner of the lock
is the thread pool-3-thread-1.

00:02:42.160 --> 00:02:43.910
So that's in the top row.

00:02:43.910 --> 00:02:44.920
And so I scroll down.

00:02:44.920 --> 00:02:48.040
And I did, in fact, see activity
in pool-3-thread-1 during this

00:02:48.040 --> 00:02:49.194
time.

00:02:49.194 --> 00:02:51.110
And then it's given me
a pointer to the stack.

00:02:51.110 --> 00:02:53.410
So I wasn't familiar with
Realm so I looked it up.

00:02:53.410 --> 00:02:55.630
And it's like a mobile
database library like SQL.

00:02:55.630 --> 00:02:58.350
So the function names
kind of make sense here.

00:02:58.350 --> 00:03:00.220
And this one may or
may not be something

00:03:00.220 --> 00:03:01.900
that you can fix as
an app developer.

00:03:01.900 --> 00:03:03.399
Because you might
need to coordinate

00:03:03.399 --> 00:03:04.420
with the Realm library.

00:03:04.420 --> 00:03:06.711
But if you had a monitor
contention between two threads

00:03:06.711 --> 00:03:10.230
that you wrote in your say
map, it would look the same.

00:03:10.230 --> 00:03:11.890
Either way this is
another potential 30

00:03:11.890 --> 00:03:13.600
millisecond opportunity
for this app where

00:03:13.600 --> 00:03:15.683
they could get a start up
improvement by resolving

00:03:15.683 --> 00:03:18.138
this lock contention.

00:03:18.138 --> 00:03:21.010
In this app there are two
activities being started.

00:03:21.010 --> 00:03:23.417
But there is another potential
improvement here, too.

00:03:23.417 --> 00:03:25.250
You see that I included
the thread name over

00:03:25.250 --> 00:03:26.500
on the left in the screenshot.

00:03:26.500 --> 00:03:27.482
This is the UI thread.

00:03:27.482 --> 00:03:28.940
So if we scroll
down and see what's

00:03:28.940 --> 00:03:31.010
going on in the other
threads in this app,

00:03:31.010 --> 00:03:34.140
we can see these background
threads running, CPU1, CPU1,

00:03:34.140 --> 00:03:35.134
CPU2.

00:03:35.134 --> 00:03:36.800
And it's awesome that
the app developers

00:03:36.800 --> 00:03:38.870
made background threads
to do some of their work.

00:03:38.870 --> 00:03:41.360
But there's a potential
performance issue here

00:03:41.360 --> 00:03:42.569
that jumps out at me as well.

00:03:42.569 --> 00:03:44.318
Which is that these
background threads are

00:03:44.318 --> 00:03:45.860
doing a lot of blocking I/O.

00:03:45.860 --> 00:03:48.440
So that's the orange sections
in the CPU activity bars

00:03:48.440 --> 00:03:49.010
on the trace.

00:03:49.010 --> 00:03:50.680
They're kind of hard to see.

00:03:50.680 --> 00:03:53.090
So you can see there's some
I/O happening on all three

00:03:53.090 --> 00:03:54.370
of these threads.

00:03:54.370 --> 00:03:56.120
Now it turns out that
on a lot of devices

00:03:56.120 --> 00:03:58.460
we have to be concerned
about I/O contention.

00:03:58.460 --> 00:04:00.830
There's not necessarily
more than one I/O channel

00:04:00.830 --> 00:04:03.034
to use to access
the disk at once.

00:04:03.034 --> 00:04:04.700
So these background
threads may actually

00:04:04.700 --> 00:04:08.202
be slowing down the I/O
requests from the UI thread.

00:04:08.202 --> 00:04:10.780
So that section is highlighted
down below, we scroll up,

00:04:10.780 --> 00:04:12.870
we see the busy four
10 milliseconds.

00:04:12.870 --> 00:04:15.030
It overlaps with
these activity starts.

00:04:15.030 --> 00:04:17.160
By viewing the thread
time slices in aggregate,

00:04:17.160 --> 00:04:20.070
we can see that in this section
we spend 107 milliseconds

00:04:20.070 --> 00:04:22.102
in blocking I/O. We
could potentially

00:04:22.102 --> 00:04:24.060
shorten this amount of
time significantly if we

00:04:24.060 --> 00:04:27.990
move that background activity
to overlap with something else.

00:04:27.990 --> 00:04:29.910
All I needed to do to
collect these traces

00:04:29.910 --> 00:04:31.530
was to clone the
catapult git repo

00:04:31.530 --> 00:04:33.300
and run the systrace command.

00:04:33.300 --> 00:04:35.850
You can just open the output
HTML file in your browser

00:04:35.850 --> 00:04:38.410
and see everything that
I showed you today.

00:04:38.410 --> 00:04:39.960
And this barely
scratches the surface

00:04:39.960 --> 00:04:41.520
of what you can
do with systrace.

00:04:41.520 --> 00:04:44.250
I was able to identify these
potential opportunities

00:04:44.250 --> 00:04:47.310
in apps I don't work on using
only the trace points provided

00:04:47.310 --> 00:04:48.450
by the system.

00:04:48.450 --> 00:04:50.940
When you look at a trace of
your own app with the expertise

00:04:50.940 --> 00:04:53.790
you already have, it's going
to make 100 times more sense

00:04:53.790 --> 00:04:54.760
to you.

00:04:54.760 --> 00:04:56.910
And you can even add
your own trace points

00:04:56.910 --> 00:04:58.530
inside your app
code so you can see

00:04:58.530 --> 00:05:02.776
the context of what's running in
your app from within the trace.

00:05:02.776 --> 00:05:04.150
Thank you.

00:05:04.150 --> 00:05:06.900
[MUSIC PLAYING]

