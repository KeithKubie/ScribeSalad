WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.690
&gt;&gt; The goal was to add support for Web in
a Box for browsers that didn't have native

00:00:10.690 --> 00:00:20.600
WebSockets and I had a couple of options and
I chose Socket.IO because it had the--is basically

00:00:20.600 --> 00:00:25.590
designed to add a API that's very similar
to WebSockets. Web support over transports

00:00:25.590 --> 00:00:31.781
that weren't WebSockets. So, the API is very
similar. It has the same semantics; a little

00:00:31.781 --> 00:00:38.480
bit different functioning though. The data
transport is very similar but there's some

00:00:38.480 --> 00:00:46.239
additional support in that right now with
WebSockets, if you login, you have no activity,

00:00:46.239 --> 00:00:52.749
it'll just disconnect you after, say, five
minutes or less. With Socket.IO there's some

00:00:52.749 --> 00:00:58.109
heartbeats going back and forth so that the
connection will not drop due to inactivity.

00:00:58.109 --> 00:01:03.859
Right now, there's three server implementations;
the Node.JS implementation which is officially

00:01:03.859 --> 00:01:08.020
associated with Socket.IO JavaScript. And
then someone wrote it in a server in Go and

00:01:08.020 --> 00:01:13.780
another one wrote a server in Ruby. None of
those, of course, would work for us. So, I

00:01:13.780 --> 00:01:20.820
created the Socket.IO-java project. It's a
J2E Servlet based implementation using the

00:01:20.820 --> 00:01:28.780
jetty on a WebSocket component and the jetty
continuations which was needed to do an efficient

00:01:28.780 --> 00:01:33.000
non-multithreaded method of communication
because if you've got, like, 10,000 clients,

00:01:33.000 --> 00:01:37.680
you don't want 10,00 threads. You want 10,000
socket connections in the number of those

00:01:37.680 --> 00:01:41.800
needed to support whatever it is that you're
actually doing, otherwise, it's not scalable.

00:01:41.800 --> 00:01:47.100
So, I did make some diff--I did fork the original
Socket.IO project because I need to make some

00:01:47.100 --> 00:01:53.170
changes to really make it work well with Wave
in a Box. I changed the message encoding slightly

00:01:53.170 --> 00:01:57.030
to support some other semantics. I should
also mention that I created this as a separate

00:01:57.030 --> 00:02:01.250
project because it has applicability outside
of the Wave in a Box. I want to make sure

00:02:01.250 --> 00:02:04.970
it would work with Web in a Box but I also
wanted it to be an external project so other

00:02:04.970 --> 00:02:12.220
people can use it for other purposes. I added
a clean close semantic because with the original

00:02:12.220 --> 00:02:16.370
Socket.IO implementation, you'd call disconnect
and you had no way of knowing if the last

00:02:16.370 --> 00:02:21.980
message you sent actually arrived at the server
without implementing your own acknowledgement

00:02:21.980 --> 00:02:26.420
step on top. With this, even when you'd call
a close, you'll get a disconnect message indicating

00:02:26.420 --> 00:02:30.530
exactly what kind of close was achieved, whether
that was a clean close or whether not your

00:02:30.530 --> 00:02:35.760
connection dropped somewhere along the way.
It's not as good as true acknowledgments but

00:02:35.760 --> 00:02:40.780
at least you'll know whether or not your close
was successful or not. I also added more detailed

00:02:40.780 --> 00:02:43.450
information to your disconnect, so you know
what kind of disconnect occurred, whether

00:02:43.450 --> 00:02:46.900
or not the server an--issued a disconnect
or if you just lost your connection entirely

00:02:46.900 --> 00:02:54.630
or if there was some unknown error. And I
did some minor bug fixes and changes as well.

00:02:54.630 --> 00:02:59.490
And unfortunately right now, it is not compatible
with the official Socket.IO implementation

00:02:59.490 --> 00:03:04.770
so you can't use this JavaScript with my server.
You have to use this JavaScript that's served

00:03:04.770 --> 00:03:13.430
from my server. Socket.IO supports six transports.
There's the raw WebSockets, there's a Flash-based

00:03:13.430 --> 00:03:20.790
WebSocket implementation, htmlfile, XHR which
stands for XML HttpRequest multipart, long

00:03:20.790 --> 00:03:29.200
polling, and jsonp long polling. For the WebSocket,
obviously, you've got Chrome 6+ support, Safari

00:03:29.200 --> 00:03:36.370
5, I think, outside of the iPhone universe
because they went with the version just prior

00:03:36.370 --> 00:03:42.250
to the addition of WebSockets, and I don't
know if Firefox 4 works with raw WebSockets.

00:03:42.250 --> 00:03:50.630
I think some people managed to make that work.
Now, the Flash-based WebSocket will not work

00:03:50.630 --> 00:03:59.510
behind a proxy. There is--in the Flash implementation,
there is a way to tell it what proxy to use

00:03:59.510 --> 00:04:04.900
and what username and password to use but
it's not really usable in a generic environment

00:04:04.900 --> 00:04:09.570
because the browser needs to know about the
proxy information and that basically requires

00:04:09.570 --> 00:04:16.519
prompting the user for the information and
most users don't know what that is--most non-techno

00:04:16.519 --> 00:04:22.031
users, anyway. See on the server side, the
WebSocket implementation on the server side

00:04:22.031 --> 00:04:26.040
is basically the same, although it does go
though a different URL and the server serves

00:04:26.040 --> 00:04:34.820
up those, the Flash component. Htmlfile is
really for--there's two classes of non WebSocket

00:04:34.820 --> 00:04:38.490
transports. There is a persistent connection
and a non-persistent connection. Unfortunately,

00:04:38.490 --> 00:04:45.250
non of them have persistent send, but they
all have persistent GET, so with htmlfile,

00:04:45.250 --> 00:04:51.260
you're basically implementing the client calls
"get" and then the server just strings messages

00:04:51.260 --> 00:04:57.560
over them as required and the connection doesn't
close until the end--session ends. So, this--with

00:04:57.560 --> 00:05:02.990
this reason, the chunked transfer encoding
which is basically the amount of bytes and

00:05:02.990 --> 00:05:08.820
then the bytes being sent, you know, repeatedly,
is a little bit overhead in the messages in

00:05:08.820 --> 00:05:14.660
that what's being sent is actually a script
tag on the client's side, though it cleans

00:05:14.660 --> 00:05:18.720
them up so you only have one script tag at
a time in the html documents that doesn't

00:05:18.720 --> 00:05:24.570
max out your memory over time. Going from
client to server, it's a simple POST message

00:05:24.570 --> 00:05:30.490
where you can have one or more messages encoded
in the block and then pushed. And because

00:05:30.490 --> 00:05:35.420
it's a plain text, there's not a lot of extra
rigmarole you have to go through to translate

00:05:35.420 --> 00:05:43.420
from a client side to server side. XML H--the
multipart on Firefox, the XML HttpRequest

00:05:43.420 --> 00:05:48.290
supports multipart transport, so the server
is basically expressing a content type of

00:05:48.290 --> 00:05:52.880
"multipart/x-mixed-replace" which I'm not
completely familiar with, but basically means

00:05:52.880 --> 00:05:56.550
that each multipart replaces the previous
multipart, so you don't end up growing your

00:05:56.550 --> 00:06:03.700
document over time. So, the different coding,
the boundary that's specified is, right now,

00:06:03.700 --> 00:06:10.420
is a random 20-character string. So, there
is a small chance that random--that that random

00:06:10.420 --> 00:06:14.449
20-character string plus previous two dashes
is going to appear in actual content. If that

00:06:14.449 --> 00:06:19.090
happens, that message won't make it through,
but because it's a random 20-character string,

00:06:19.090 --> 00:06:23.790
the chances of that happening are fairly small.
We would need--in order for absolute bulletproofness,

00:06:23.790 --> 00:06:30.290
we'd have to add some sort of a encode-decode
for that one rare case. Right now, that's

00:06:30.290 --> 00:06:36.759
not deal with. And again, the server--the
client to server is POST and in the JavaScript,

00:06:36.759 --> 00:06:41.250
if an existing--if a POST is active, then
the messages are queued up until the next--until

00:06:41.250 --> 00:06:44.760
the POST completes then it pushes an entire
block of messages. So if you're just cramming

00:06:44.760 --> 00:06:52.130
messages down the pipe, each POST will contain
multiple messages. Long polling, this is the

00:06:52.130 --> 00:06:58.490
most common transport we're familiar with
before. The GET will time out eventually;

00:06:58.490 --> 00:07:02.990
right now, the time out is 20 seconds because
most browsers have a request timeout of 30

00:07:02.990 --> 00:07:11.150
seconds. We want to make sure that we get
an empty reply versus a connection timed out.

00:07:11.150 --> 00:07:17.210
And there's no need for any sort of special
encoding, so it just sends the message box

00:07:17.210 --> 00:07:25.530
plain and again, the server side is POST messages.
And then jsonp-polling, I'm told is really

00:07:25.530 --> 00:07:30.540
only needed for doing cross domain in IE.
I'm not sure what other browsers might require

00:07:30.540 --> 00:07:40.120
it. The client is basically pushing JavaScript
method calls and posting apparently requires

00:07:40.120 --> 00:07:48.630
using a form in an--in a iFrame and the data
has to go through those "form-urlencoded"

00:07:48.630 --> 00:07:56.250
stuff so some decoding has to happen on the
server side. The messages are encoded in a

00:07:56.250 --> 00:08:00.290
block. We use a little [INDISTINCT] between
the pieces. You got the message type, message

00:08:00.290 --> 00:08:04.780
size and then the data. Message types--the
very first message the client gets when he

00:08:04.780 --> 00:08:10.350
connects the session ID and it uses that for
further connections. So, the--a spe--for WebSockets,

00:08:10.350 --> 00:08:14.600
it won't matter, but for all the others, the
server needs to know which session the connection

00:08:14.600 --> 00:08:20.170
is associated with as a close message. Ping-Pong
is for your--keeping your session liveness

00:08:20.170 --> 00:08:24.009
so that the server will pair out. It will
send a Ping and then a client has to reply

00:08:24.009 --> 00:08:27.800
with a Pong within a certain time. Otherwise,
their connections drop. And then you've got

00:08:27.800 --> 00:08:39.289
your data blocks. The API does support the
idea of a message base on interlinking message

00:08:39.289 --> 00:08:43.430
types so that you can--makes it easier for
you to have multiple message types going back

00:08:43.430 --> 00:08:47.130
from clients sever that the software itself
doesn't need to know about but your client's

00:08:47.130 --> 00:08:53.460
software can switch on. For the future, playing
on standardizing the client/server protocol,

00:08:53.460 --> 00:08:57.040
because right now it's all you have to look
at the code to figure out what they're doing

00:08:57.040 --> 00:09:00.310
but I'd like to at least have a document,
so that anybody can implement a server or

00:09:00.310 --> 00:09:09.011
a client based on that standard. And we want
to--I want to separate the handshake for a

00:09:09.011 --> 00:09:12.190
session from the actual connection to make
it a little bit easier to implement some alternative

00:09:12.190 --> 00:09:17.920
authentication forms. And right now, the server
has intimate knowledge of how the client's

00:09:17.920 --> 00:09:24.149
JavaScript is implemented, and I want to separate
it out. There's a document written by a Michael

00:09:24.149 --> 00:09:27.710
Carter describing something he called a Comet
Session Protocol and one of the ideas he had

00:09:27.710 --> 00:09:32.970
in there was this ability for the client to
specify what the preamble and pre and post

00:09:32.970 --> 00:09:37.850
block stuff was. So, for example, that script
tag stuff for htmlfile, the client would say,

00:09:37.850 --> 00:09:42.080
"Here is what I expect before and after the
actual message data," and then the server

00:09:42.080 --> 00:09:49.260
just passes that. It doesn't even know what
it's dealing with. So, that the client has--the

00:09:49.260 --> 00:09:52.260
server becomes independent from the client
in terms of implementation, so if the client

00:09:52.260 --> 00:09:56.350
decides to change the name of the method that's
in the script tag, the server doesn't even

00:09:56.350 --> 00:09:59.430
know that. The client just tells it during
the session establishment and then the server

00:09:59.430 --> 00:10:07.220
just feeds those pieces around a block of
data. And then there's also plans to converge

00:10:07.220 --> 00:10:12.970
the existing Socket.IO project, the core project
and the stuff that I've done, so that you

00:10:12.970 --> 00:10:20.970
can pick up the improvements, but we're still
on discussion on that. Those who like to--there's

00:10:20.970 --> 00:10:26.570
no test cases right now. I've got some simple
test applications to make. Example applications

00:10:26.570 --> 00:10:32.580
I can use for testing like a chat at a echo
and broadcast but I'd like to--I need to add

00:10:32.580 --> 00:10:35.920
some formal test cases so that you can do
a lot of unit testing without having to start

00:10:35.920 --> 00:10:41.019
something up and type in it. Same--browser
test should be a lot more difficult but I

00:10:41.019 --> 00:10:44.110
do want to have something so you can just
basically point your browser to a URL and

00:10:44.110 --> 00:10:47.190
have it run the tests and tell you which ones
passed and which ones failed. Make it a lot

00:10:47.190 --> 00:10:54.090
easier to go through all of your browser tests.
And I believe it's also going to be possible

00:10:54.090 --> 00:10:59.100
to add support for extra--other [INDISTINCT]
containers. For right now, I do know that

00:10:59.100 --> 00:11:08.690
this code should work in Tomcat 6, the latest
version without--but the WebSocket won't all

00:11:08.690 --> 00:11:15.333
work, but the other stuff will. I think that's--and
here is the projects that are involved. Got

00:11:15.333 --> 00:11:21.800
the original Socket.IO project. He's got his
own Socket.IO webpage and the github source

00:11:21.800 --> 00:11:28.860
code project. And you could add a "–node"
here to get to the Node.JS project and he

00:11:28.860 --> 00:11:36.540
has links to it in there, so it's easy to
find. WebSocket.JS is the Flash-based WebSocket

00:11:36.540 --> 00:11:41.260
project. I should point out that right now,
he doesn't--he only supports version 76 of

00:11:41.260 --> 00:11:47.240
the WebSocket protocol. The new IETF draft
3 isn't supported. Jetty added support for

00:11:47.240 --> 00:11:55.920
that in their 7.2 version but I don't support
that yet either because they changed the APIs.

00:11:55.920 --> 00:12:00.570
I've--here--the next one, the Socket.IO-fork,
that's the forked version of the Socket.IO

00:12:00.570 --> 00:12:06.360
code to post the changes I've made and then
Socket.IO-java is the Google code project

00:12:06.360 --> 00:12:15.720
to host the java site. And the Flash and the
Socket.IO-JavaScript, that search in the server

00:12:15.720 --> 00:12:20.899
is contained in this project as well, so you
don't have to get the project to make them

00:12:20.899 --> 00:12:35.550
work together. Any questions? Yes.
&gt;&gt; On the proxy, you had said you forgot to

00:12:35.550 --> 00:12:36.980
do that so [INDISTINCT]...
&gt;&gt; The Flash base doesn't work through a proxy

00:12:36.980 --> 00:12:40.200
but everything else does.
&gt;&gt; All except Flash?

00:12:40.200 --> 00:12:45.870
&gt;&gt; Yeah. Just Flash because the difficulty
is that there's no way programmatically for

00:12:45.870 --> 00:12:54.350
JavaScript or a Flash component to query the
browser for proxy information. The bro--no

00:12:54.350 --> 00:13:00.089
browser provides that information to you.
You can't ask what proxy are you talking to,

00:13:00.089 --> 00:13:02.709
you know, what's the user name and password
do I need to use. None of that's available,

00:13:02.709 --> 00:13:08.230
so in order for the Flash to get though a
proxy, you have to explicitly tell it in code,

00:13:08.230 --> 00:13:11.410
"Here is the proxy, here is the user name,
and here is the password you have to use."

00:13:11.410 --> 00:13:15.839
In order to dot hat though, you have to query
the user to get that information. So, the

00:13:15.839 --> 00:13:20.250
Flash-based WebSocket won't work through a
proxy without a lot of rigmarole that it's

00:13:20.250 --> 00:13:26.399
not really not appropriate in a--on a generic
user environment. Now, in a speci--in a fixed

00:13:26.399 --> 00:13:33.750
enterprise environment where that information
is--can be hard coded into your--into the

00:13:33.750 --> 00:13:37.700
code, then you can prompt the user for their
username and password again and then that

00:13:37.700 --> 00:13:43.089
would work but that won't work for most cases.
Everything else, though, does work through

00:13:43.089 --> 00:13:44.089
a proxy. I've tested it.
&gt;&gt; Sorry if you had mentioned this. Does it

00:13:44.089 --> 00:13:49.510
automatically--so if you got--if it's not
working, you kind of establish a connection

00:13:49.510 --> 00:13:55.570
through your Flash, will it just automatically
basically be created?

00:13:55.570 --> 00:13:59.980
&gt;&gt; Yeah, it will fall through. Usually, if
things are poorly configured, it will fall

00:13:59.980 --> 00:14:02.040
through to the XHR-Polling.
&gt;&gt; Okay. Does it take a while to do that?

00:14:02.040 --> 00:14:07.640
Perhaps a...
&gt;&gt; It--in Chrome, things connect right away.

00:14:07.640 --> 00:14:13.820
In Firefox, it does take--it seems to take,
you know, three to ten seconds to establish

00:14:13.820 --> 00:14:17.760
a connection. I don't know if there's any
way to speed that up. If you know for a fact

00:14:17.760 --> 00:14:23.830
that you're never going to use the Flash type,
you can modify the project to just tell it

00:14:23.830 --> 00:14:27.610
not to even consider Flash, just skip right
on through and then the connection should

00:14:27.610 --> 00:14:34.360
happen a little bit quicker. But it does--it
does work through. It checks--it checks to

00:14:34.360 --> 00:14:40.000
see which transports it can--should work based
on whether or not you each--even have the

00:14:40.000 --> 00:14:43.760
WebSocket API and it'll try those first. But
it doesn't find them or--I think in the case

00:14:43.760 --> 00:14:48.740
of WebSocket, WebSocket fails, it won't--it
won't fall trough but in the case of Flash,

00:14:48.740 --> 00:14:52.380
it will fall through. Any other questions?
Okay.

00:14:52.380 --> 00:14:53.500
just tell it not to even consider Flash, just
skip right on through and then the connection

00:14:53.500 --> 00:14:54.500
should happen a little bit quicker. But it
does--it does work through. It checks--it

00:14:54.500 --> 00:14:54.505
checks to see which tran

