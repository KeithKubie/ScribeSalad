WEBVTT
Kind: captions
Language: en

00:00:05.149 --> 00:00:06.440
ANDREW BROGDON: Hey, everybody.

00:00:06.440 --> 00:00:09.430
I'm Andrew Brogdon and welcome
back to the Mobile Ads Garage.

00:00:09.430 --> 00:00:12.650
Today, with the help of
Gary the graphics guy,

00:00:12.650 --> 00:00:14.300
I'm going to cover
the ad lifecycle.

00:00:14.300 --> 00:00:15.970
I'm going to show
you what events occur

00:00:15.970 --> 00:00:18.837
in the life of an ad, how to use
listeners and delegates to tap

00:00:18.837 --> 00:00:20.920
into them, and then I'll
have a real world example

00:00:20.920 --> 00:00:22.514
that puts it all together.

00:00:22.514 --> 00:00:24.430
If you're not already
familiar with ad events,

00:00:24.430 --> 00:00:26.800
they are a fundamental
piece of the mobile ads SDK.

00:00:26.800 --> 00:00:28.800
They can tell you what's
going on with your ads,

00:00:28.800 --> 00:00:32.080
like when they're done loading,
when they've opened, and so on.

00:00:32.080 --> 00:00:34.930
Every format has them, so if
you're using the SDK at all,

00:00:34.930 --> 00:00:37.280
this is an important
thing to know about.

00:00:37.280 --> 00:00:40.450
So here are the basic events
in the life of an AdMob ad.

00:00:40.450 --> 00:00:42.430
Now, some formats
have some extra stuff.

00:00:42.430 --> 00:00:44.840
Reward a Video has a
reward event, for example.

00:00:44.840 --> 00:00:46.270
But these are the big five.

00:00:46.270 --> 00:00:47.990
Let's drill down.

00:00:47.990 --> 00:00:49.680
When you make an
ad request, the ad

00:00:49.680 --> 00:00:51.270
either loads or fails to load.

00:00:51.270 --> 00:00:53.390
So those are the
first two events.

00:00:53.390 --> 00:00:55.780
If the ad does load
successfully, you move on.

00:00:55.780 --> 00:00:58.959
First up is presenting, also
called opening, on Android.

00:00:58.959 --> 00:01:00.750
This means that the ad
has caused something

00:01:00.750 --> 00:01:03.410
to appear on screen that
covers your interface.

00:01:03.410 --> 00:01:05.940
When an interstitial or rewarded
video ad gets displayed,

00:01:05.940 --> 00:01:07.760
for example, this event happens.

00:01:07.760 --> 00:01:09.600
It's a way for the
SDK to say, heads up,

00:01:09.600 --> 00:01:12.340
I just covered your
UI with something.

00:01:12.340 --> 00:01:13.950
The opposite of
opening, of course,

00:01:13.950 --> 00:01:16.500
is closing, or
dismissing, the ad.

00:01:16.500 --> 00:01:18.170
And last, we have
leaving the app.

00:01:18.170 --> 00:01:20.180
When the user taps
on an ad, and the SDK

00:01:20.180 --> 00:01:22.410
opens a browser or
another app in response,

00:01:22.410 --> 00:01:23.335
you get this event.

00:01:23.335 --> 00:01:25.100
And it's actually the
best one, because it

00:01:25.100 --> 00:01:27.558
means the user and the ad were
a good match for each other,

00:01:27.558 --> 00:01:30.050
and you get credit
for a clickthrough.

00:01:30.050 --> 00:01:30.600
All right.

00:01:30.600 --> 00:01:31.975
So those are the
big five events,

00:01:31.975 --> 00:01:33.280
but how do you tap into them?

00:01:33.280 --> 00:01:35.760
For that, the SDK offers
listeners on Android

00:01:35.760 --> 00:01:37.160
and delegates on iOS.

00:01:37.160 --> 00:01:39.330
There's actually a
few different kinds.

00:01:39.330 --> 00:01:40.600
There you go.

00:01:40.600 --> 00:01:42.430
It's a scary big list,
but the good news

00:01:42.430 --> 00:01:44.310
is, you don't have
to memorize it.

00:01:44.310 --> 00:01:45.680
The ad object will tell you.

00:01:45.680 --> 00:01:48.490
If you're on iOS, just look
for a delegate property.

00:01:48.490 --> 00:01:50.887
And on Android, look for
a set listener method.

00:01:50.887 --> 00:01:52.470
You find that, and
you know which type

00:01:52.470 --> 00:01:55.380
of listener or delegate
goes with the object.

00:01:55.380 --> 00:01:57.877
For example, here's the set
listener method for an ad view.

00:01:57.877 --> 00:02:00.210
I can see from the signature
that it takes an AdListener

00:02:00.210 --> 00:02:01.030
object.

00:02:01.030 --> 00:02:02.780
And for iOS, it's the same deal.

00:02:02.780 --> 00:02:05.880
Just look for a delegate
property on the ad object.

00:02:05.880 --> 00:02:08.820
There you go,
GADBannerViewDelegate.

00:02:08.820 --> 00:02:11.210
Once you've got that, make
your own implementation

00:02:11.210 --> 00:02:13.910
and add methods for the
events you're interested in.

00:02:13.910 --> 00:02:15.830
Loading, for
example, on Android,

00:02:15.830 --> 00:02:18.670
you can override the
onAdLoaded method, and, on iOS,

00:02:18.670 --> 00:02:20.760
you implement DidReceiveAd.

00:02:20.760 --> 00:02:22.540
When an ad fails
to load, there's

00:02:22.540 --> 00:02:26.360
onAdFailedToLoad, and
DidFailToReceiveAdWithError.

00:02:26.360 --> 00:02:29.320
These include an error code
that describes the problem.

00:02:29.320 --> 00:02:31.590
For an ad opening,
there's onAdOpened and

00:02:31.590 --> 00:02:33.110
willPresentScreen.

00:02:33.110 --> 00:02:34.860
And for dismissing
or closing, you

00:02:34.860 --> 00:02:37.280
have onAdClosed on
Android, and two methods

00:02:37.280 --> 00:02:40.300
on iOS, willDismissScreen,
and didDismissScreen.

00:02:40.300 --> 00:02:43.530
So you can get notified
before and after the event.

00:02:43.530 --> 00:02:45.170
And finally, if a
clickthrough opens

00:02:45.170 --> 00:02:48.640
a browser or external app, there
is willLeaveApplication on iOS,

00:02:48.640 --> 00:02:51.170
and onAdLeft
application on Android.

00:02:51.170 --> 00:02:52.950
One last little detail,
and it's actually

00:02:52.950 --> 00:02:55.350
a difference between the
platforms-- on Android,

00:02:55.350 --> 00:02:57.930
leaving the app also
counts as opening the ad

00:02:57.930 --> 00:02:59.280
if it's not already open.

00:02:59.280 --> 00:03:01.980
So if your user taps on
a banner, for example,

00:03:01.980 --> 00:03:04.960
you'll get onAdOpened,
then onAdLeftApplication,

00:03:04.960 --> 00:03:08.110
and, when the user comes back,
you'll see onAdClose get fired.

00:03:08.110 --> 00:03:11.840
So that's a little extra info
you get from the Android SDK.

00:03:11.840 --> 00:03:13.424
All right, so we've
covered the events

00:03:13.424 --> 00:03:14.840
and how to find
the right listener

00:03:14.840 --> 00:03:15.900
or delegate and use it.

00:03:15.900 --> 00:03:18.572
Let's put it all
together with an example.

00:03:18.572 --> 00:03:20.780
Say you've got an Android
app that plays music videos

00:03:20.780 --> 00:03:23.470
and have monetized it
with a Native Express ad.

00:03:23.470 --> 00:03:24.437
There's the interface.

00:03:24.437 --> 00:03:26.770
There's a bunch of ways that
ad events can help me here.

00:03:26.770 --> 00:03:29.120
But first, I need
to get wired up.

00:03:29.120 --> 00:03:30.370
Here are the steps.

00:03:30.370 --> 00:03:32.869
First, I'm going to set an ad
listener for my Native Express

00:03:32.869 --> 00:03:33.470
ad.

00:03:33.470 --> 00:03:35.803
Now I'm going to add individual
methods for the events I

00:03:35.803 --> 00:03:38.082
care about, and then rock out.

00:03:38.082 --> 00:03:40.470
So step one, setting
the listener.

00:03:40.470 --> 00:03:43.530
Native Express Ad view objects
accept the ad listener class.

00:03:43.530 --> 00:03:46.694
So I can call set ad listener
and my activities onCreate,

00:03:46.694 --> 00:03:49.110
and give it an instance, just
like I would with an onClick

00:03:49.110 --> 00:03:51.100
listener for a button.

00:03:51.100 --> 00:03:52.850
And that's it, listener set.

00:03:52.850 --> 00:03:56.200
Now I can add individual methods
for the events I care about.

00:03:56.200 --> 00:03:58.020
Let's say my ad view
starts out hidden,

00:03:58.020 --> 00:04:00.090
and I want to show it
once the ad is loaded.

00:04:00.090 --> 00:04:03.260
All I need to do is
override onAdLoaded and put

00:04:03.260 --> 00:04:05.270
in the code to make it visible.

00:04:05.270 --> 00:04:08.000
So I get something like this.

00:04:08.000 --> 00:04:09.560
How about when the
ad fails to load?

00:04:09.560 --> 00:04:11.757
Maybe I'd like to try
again, just in case.

00:04:11.757 --> 00:04:13.340
All I have to do is
add another method

00:04:13.340 --> 00:04:15.780
to my listener for
onAdFailedToLoad.

00:04:15.780 --> 00:04:17.600
It's good to put some
kind of flag or count

00:04:17.600 --> 00:04:19.010
in place, though, to
make sure you don't keep

00:04:19.010 --> 00:04:21.176
trying to load an ad over
and over again, if there's

00:04:21.176 --> 00:04:22.270
no internet connection.

00:04:22.270 --> 00:04:24.200
Otherwise, the SDK
will keep dutifully

00:04:24.200 --> 00:04:26.466
trying to load forever.

00:04:26.466 --> 00:04:28.090
Now this app is all
about playing music

00:04:28.090 --> 00:04:32.570
videos, which is great, because
Gary rocks like no other.

00:04:32.570 --> 00:04:35.260
Ironically, that's
actually true.

00:04:35.260 --> 00:04:37.260
But if my user taps on
an ad and leaves the app

00:04:37.260 --> 00:04:40.740
to go to a browser, I probably
want to stop video playback.

00:04:40.740 --> 00:04:43.030
I can do that by adding a
listener method override

00:04:43.030 --> 00:04:45.550
for on ad left application,
and then some code

00:04:45.550 --> 00:04:48.160
to stop playback.

00:04:48.160 --> 00:04:50.750
That way, when a user taps
on an ad, the video gets

00:04:50.750 --> 00:04:55.140
paused, just as they leave for
a browser or the Play Store.

00:04:55.140 --> 00:04:57.620
And onAdClose tells me
the user has come back

00:04:57.620 --> 00:04:59.150
from leaving the
app, so it's time

00:04:59.150 --> 00:05:01.500
to crank the party back up.

00:05:01.500 --> 00:05:03.352
All right, so that's
our real-world example.

00:05:03.352 --> 00:05:04.810
I've got a Native
Express ad that's

00:05:04.810 --> 00:05:06.480
shown when it's done
loading, and an app

00:05:06.480 --> 00:05:08.050
that smart enough
to pause playback

00:05:08.050 --> 00:05:09.450
when there's a click through.

00:05:09.450 --> 00:05:11.200
This is the power that
ad events give you,

00:05:11.200 --> 00:05:13.800
and they're a great tool
to have in your belt.

00:05:13.800 --> 00:05:16.000
I used Android for
this video, but if you

00:05:16.000 --> 00:05:18.740
code in Swift or Objective C,
we've got an example for you

00:05:18.740 --> 00:05:19.740
up on GitHub.

00:05:19.740 --> 00:05:21.490
I'll also sneak in
our Android example

00:05:21.490 --> 00:05:23.250
for anybody who's interested.

00:05:23.250 --> 00:05:26.295
I've got guides that I can
point you to for both platforms.

00:05:26.295 --> 00:05:28.920
And as always, you're welcome to
bring your technical questions

00:05:28.920 --> 00:05:29.796
to our support forum.

00:05:29.796 --> 00:05:31.711
And if you've got a
question about this video,

00:05:31.711 --> 00:05:33.550
or an idea for something
we should cover,

00:05:33.550 --> 00:05:37.570
leave a comment below, and Gary
and I will see you next time.

