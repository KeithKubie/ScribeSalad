WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:04.340
Let's look at the solution to our
virtual index physically tagged cache,

00:00:04.340 --> 00:00:06.000
aliasing avoidance quiz.

00:00:06.000 --> 00:00:07.430
We won't know aliasing,

00:00:07.430 --> 00:00:12.183
which means the index bits have
to come from the page offset.

00:00:12.183 --> 00:00:19.073
The page, has 2 to the 13th bytes,
so the page offset has 13 bits.

00:00:19.073 --> 00:00:22.698
In the address breakdown for
accessing the cache,

00:00:22.698 --> 00:00:28.592
that means that the index and offsets
for the cache need to fit in 13 bits.

00:00:28.592 --> 00:00:34.640
The 16-byte block size means that
the cache block offset is 4 bits.

00:00:34.640 --> 00:00:38.910
That's how many bits we need to tell
us where in the 16 bytes we are, and

00:00:38.910 --> 00:00:42.370
that means that we have 9 bits for
the index.

00:00:42.370 --> 00:00:45.500
We can use fewer, but
that would make the cache even smaller.

00:00:45.500 --> 00:00:48.590
We cannot use more,
because then we will get aliasing.

00:00:48.590 --> 00:00:53.520
So the maximum cache size will be
when it has 2 to the 9th sets.

00:00:53.520 --> 00:01:00.396
So we have 2 to the 9th sets times
2 to the 4th bytes in each block,

00:01:00.396 --> 00:01:05.585
times it's a four-way
set-associative cache,

00:01:05.585 --> 00:01:10.800
so we have 2 to the 2nd,
four blocks in a set.

00:01:10.800 --> 00:01:15.670
So this is basically bytes per block,
blocks per set, how many sets?

00:01:15.670 --> 00:01:20.180
And that amounts to 2 to
the 15th bytes in the cache, so

00:01:20.180 --> 00:01:24.580
the answer here is 32 kilobytes,
which is 2 to the 15th bytes.

00:01:24.580 --> 00:01:29.510
So we cannot have a cache that is
larger than 32 kilobytes and yet

00:01:29.510 --> 00:01:32.420
it avoids aliasing
with these parameters.

00:01:32.420 --> 00:01:37.270
Note that really these two have
to be equal to the page size

00:01:37.270 --> 00:01:41.520
because 2 to this number of bits
times 2 to this number of bits,

00:01:42.600 --> 00:01:45.180
has to be equal to 2 to
this number of bits.

00:01:45.180 --> 00:01:48.520
So really, the maximum size of
the cache here is the page size

00:01:48.520 --> 00:01:50.340
times the associativity.

00:01:50.340 --> 00:01:53.170
And the only way to avoid
aliasing in a cache,

00:01:53.170 --> 00:01:55.930
while making it larger,
is to increase associativity.

