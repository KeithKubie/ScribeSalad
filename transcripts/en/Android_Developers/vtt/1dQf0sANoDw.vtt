WEBVTT
Kind: captions
Language: en

00:00:00.510 --> 00:00:02.300
JUSTIN: Hi, my
name is Justin Koh

00:00:02.300 --> 00:00:04.730
and I'm an engineer on
the Android Wear team.

00:00:04.730 --> 00:00:06.230
I'm here today to
tell you about how

00:00:06.230 --> 00:00:10.220
you can make your app ready for
the wrist with Android Wear.

00:00:10.220 --> 00:00:12.520
Let's take a look at how
developing for Android Wear

00:00:12.520 --> 00:00:15.510
is different than developing
traditional Android apps.

00:00:15.510 --> 00:00:18.550
One key benefit of Android
Wear is giving people

00:00:18.550 --> 00:00:21.120
the information they need
right when they need it.

00:00:21.120 --> 00:00:23.360
We realize that your
Android device already

00:00:23.360 --> 00:00:25.400
does a lot of this
through notifications,

00:00:25.400 --> 00:00:26.940
so we decided to
start by bringing

00:00:26.940 --> 00:00:29.180
those same notifications
to your wrist.

00:00:29.180 --> 00:00:31.100
I'll show you what I mean.

00:00:31.100 --> 00:00:32.920
Here I have my Nexus 5.

00:00:32.920 --> 00:00:35.390
I've installed the Android
Wear preview app on it,

00:00:35.390 --> 00:00:37.800
and I've paired it to
my emulated device.

00:00:37.800 --> 00:00:39.980
I have a small app which
creates notifications

00:00:39.980 --> 00:00:41.580
with different styles.

00:00:41.580 --> 00:00:43.730
Notice how the notification
appears on Android

00:00:43.730 --> 00:00:45.480
Wear automatically.

00:00:45.480 --> 00:00:47.630
I can update the
notification, and the changes

00:00:47.630 --> 00:00:50.190
are immediately bridged over.

00:00:50.190 --> 00:00:53.190
Even better, I can dismiss the
notification from my Android

00:00:53.190 --> 00:00:56.070
Wear device and it'll
disappear from my phone.

00:00:56.070 --> 00:00:58.100
This is a really
powerful concept.

00:00:58.100 --> 00:01:01.100
This means that if your app
posts notifications today it's

00:01:01.100 --> 00:01:02.534
already on your wrist.

00:01:02.534 --> 00:01:03.950
It's worth noting
that all of this

00:01:03.950 --> 00:01:07.040
is possible thanks to the
Notification Listener API

00:01:07.040 --> 00:01:10.127
that was added in Android 4.3.

00:01:10.127 --> 00:01:11.710
So let's talk about
how to get started

00:01:11.710 --> 00:01:13.810
developing for Android Wear.

00:01:13.810 --> 00:01:15.940
First go to
developer.android.com

00:01:15.940 --> 00:01:18.140
where you can sign up
for the developer preview

00:01:18.140 --> 00:01:20.002
and browse the documentation.

00:01:20.002 --> 00:01:21.710
You should also download
the system image

00:01:21.710 --> 00:01:25.240
from the SDK manager to create
an Android virtual device

00:01:25.240 --> 00:01:27.060
with Android Wear.

00:01:27.060 --> 00:01:29.520
Finally, install the
Android Wear preview app

00:01:29.520 --> 00:01:31.200
and run it on your
Android phone that

00:01:31.200 --> 00:01:32.831
is connected to your emulator.

00:01:32.831 --> 00:01:35.080
At this point you'll have
your development environment

00:01:35.080 --> 00:01:37.630
set up and ready to go.

00:01:37.630 --> 00:01:39.880
Let's look at some code for
an app that invites people

00:01:39.880 --> 00:01:40.910
to events.

00:01:40.910 --> 00:01:43.210
It probably looks
really familiar right?

00:01:43.210 --> 00:01:46.140
There isn't anything specific
to Android Wear here.

00:01:46.140 --> 00:01:48.600
I'm just using the
NotificationCompat class

00:01:48.600 --> 00:01:51.900
from the Android support
library to show a notification.

00:01:51.900 --> 00:01:54.390
I've also added an
action to my notification

00:01:54.390 --> 00:01:57.560
so I can tell my app that
I'll be attending the event.

00:01:57.560 --> 00:01:59.752
This action becomes
available on my wrist

00:01:59.752 --> 00:02:01.460
so I don't even have
to take my phone out

00:02:01.460 --> 00:02:03.220
of my pocket to respond.

00:02:03.220 --> 00:02:06.405
Instead I just swipe over to
the right and tap the action.

00:02:06.405 --> 00:02:08.370
That starts a
service on the phone

00:02:08.370 --> 00:02:10.120
that can add the
event to my calendar

00:02:10.120 --> 00:02:12.290
and then remove
the notification.

00:02:12.290 --> 00:02:15.130
Note that I could have used the
notification styles introduced

00:02:15.130 --> 00:02:18.210
in Android 4.1 such
as Big Picture style

00:02:18.210 --> 00:02:21.710
to show a photo alongside
the notification text.

00:02:21.710 --> 00:02:24.160
So that's really cool,
but with great power

00:02:24.160 --> 00:02:26.110
comes great responsibility.

00:02:26.110 --> 00:02:29.180
Automatically bridging
notifications to your wrist

00:02:29.180 --> 00:02:31.420
means it's extremely
important that you

00:02:31.420 --> 00:02:35.360
be considerate of when and
how you notify the user.

00:02:35.360 --> 00:02:38.110
First, note that Android
Wear devices will not

00:02:38.110 --> 00:02:39.700
vibrate for every notification.

00:02:39.700 --> 00:02:42.150
That would get annoying
really quickly.

00:02:42.150 --> 00:02:44.440
Only notifications which
would vibrate or make

00:02:44.440 --> 00:02:47.440
a sound on the phone
will buzz your wrist.

00:02:47.440 --> 00:02:49.500
Next, it's important
that notifications

00:02:49.500 --> 00:02:51.970
be as contextually
relevant as possible.

00:02:51.970 --> 00:02:55.200
For example, you can use the
API's in Google Play services

00:02:55.200 --> 00:02:58.050
to set up a geofence and
only post a notification when

00:02:58.050 --> 00:02:59.370
the user is at home.

00:02:59.370 --> 00:03:02.230
Or you could use the Activity
Detection API to only send

00:03:02.230 --> 00:03:04.585
notifications when
the user is biking.

00:03:04.585 --> 00:03:05.960
If you have an
app that generates

00:03:05.960 --> 00:03:09.200
a lot of notifications,
like a chat or email client,

00:03:09.200 --> 00:03:11.000
you should give
your user control

00:03:11.000 --> 00:03:15.050
over when your notifications
will make a sound or vibrate.

00:03:15.050 --> 00:03:17.400
Finally, you should take
advantage of the notification

00:03:17.400 --> 00:03:18.760
priority field.

00:03:18.760 --> 00:03:23.450
There are several buckets, max,
high, default, low, and min.

00:03:23.450 --> 00:03:25.150
Setting the proper
priority helps

00:03:25.150 --> 00:03:27.290
the system show the most
relevant information

00:03:27.290 --> 00:03:28.670
at the right time.

00:03:28.670 --> 00:03:30.940
For more on what makes
a good notification

00:03:30.940 --> 00:03:34.876
see the design guidelines
on developer.android.com.

00:03:34.876 --> 00:03:36.500
So that's one way
you can begin getting

00:03:36.500 --> 00:03:38.980
your app ready for the
wrist with Android Wear.

00:03:38.980 --> 00:03:41.230
By optimizing your
app's notifications

00:03:41.230 --> 00:03:43.030
you'll be taking the
first step to making

00:03:43.030 --> 00:03:45.280
your app more wrist friendly.

00:03:45.280 --> 00:03:47.480
There are more API's in
the developer preview that

00:03:47.480 --> 00:03:49.160
will help you
customize notifications

00:03:49.160 --> 00:03:51.280
when they appear on
Android Wear devices.

00:03:51.280 --> 00:03:54.050
So check out the documentation
in other DevBytes episodes

00:03:54.050 --> 00:03:55.410
for more on that.

00:03:55.410 --> 00:03:58.150
And make sure to look at the
sample code in the developer

00:03:58.150 --> 00:04:01.870
preview and the UX guidelines
on developer.android.com.

00:04:01.870 --> 00:04:04.250
Thanks and happy coding.

