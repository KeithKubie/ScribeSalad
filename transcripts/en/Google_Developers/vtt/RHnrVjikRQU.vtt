WEBVTT
Kind: captions
Language: en

00:00:03.970 --> 00:00:04.680
Hi.

00:00:04.680 --> 00:00:05.977
My name is Daniel Rodriguez.

00:00:05.977 --> 00:00:07.560
And today I will
show you how to build

00:00:07.560 --> 00:00:08.976
games and interactive
applications

00:00:08.976 --> 00:00:12.760
for the living room using Google
Cast and the Game Manager APIs.

00:00:12.760 --> 00:00:14.410
There are millions
of Cast devices

00:00:14.410 --> 00:00:15.960
ready for your amazing games.

00:00:15.960 --> 00:00:18.707
The Cast model introduces a
new exciting game experience.

00:00:18.707 --> 00:00:21.040
Players can use their phones
as dynamic game controllers

00:00:21.040 --> 00:00:22.350
with the TV.

00:00:22.350 --> 00:00:24.570
There's a lot of opportunity
for innovation here.

00:00:24.570 --> 00:00:27.090
Mobile devices have powerful
sensors and touch screens

00:00:27.090 --> 00:00:28.842
that we can use
to our advantage.

00:00:28.842 --> 00:00:31.300
Just imagine advancing through
a dungeon with your friends,

00:00:31.300 --> 00:00:34.151
using your phone screen to draw
arcane symbols to cast spells

00:00:34.151 --> 00:00:36.400
while your body physically
runs around the living room

00:00:36.400 --> 00:00:38.770
to cast a protective
shield around you.

00:00:38.770 --> 00:00:40.600
In order to build that
kind of experience,

00:00:40.600 --> 00:00:42.700
all the devices need
to share information.

00:00:42.700 --> 00:00:44.670
Thankfully, you won't
have to spend your time

00:00:44.670 --> 00:00:46.545
writing and testing code
to synchronize them.

00:00:46.545 --> 00:00:49.230
The Game Manager API helps
you with this, particularly

00:00:49.230 --> 00:00:50.730
in the case where
the Cast device is

00:00:50.730 --> 00:00:52.620
responsible for
rendering on the TV

00:00:52.620 --> 00:00:55.686
and hosting the majority
of the game logic.

00:00:55.686 --> 00:00:57.310
Getting your game
ready for Google Cast

00:00:57.310 --> 00:01:00.280
means understanding three
parts of the Game Manager API.

00:01:00.280 --> 00:01:01.770
First we have Senders.

00:01:01.770 --> 00:01:04.739
These are the player's mobile
phones, tablets, or laptops.

00:01:04.739 --> 00:01:07.440
Android, iOS, and Chrome
are all supported.

00:01:07.440 --> 00:01:09.190
Next, we have the Cast Receiver.

00:01:09.190 --> 00:01:12.630
That's the TV connected with a
Cast device, like a Chromecast.

00:01:12.630 --> 00:01:15.370
Finally, there is information
exchange between the senders

00:01:15.370 --> 00:01:17.112
and the receivers.

00:01:17.112 --> 00:01:18.820
There are a bunch of
different game types

00:01:18.820 --> 00:01:21.180
that can take advantage
of the Game Manager API,

00:01:21.180 --> 00:01:23.460
from turn based to real
time game play, which

00:01:23.460 --> 00:01:25.010
is why we support
the ability to have

00:01:25.010 --> 00:01:27.370
multiple players on a
single sender device.

00:01:27.370 --> 00:01:28.880
And all of these
APIs can be used

00:01:28.880 --> 00:01:30.910
in combination with
Google Play game services

00:01:30.910 --> 00:01:34.420
to implement features like
leaderboards and achievements.

00:01:34.420 --> 00:01:36.186
So here's how it works.

00:01:36.186 --> 00:01:37.810
All the synchronization
between players

00:01:37.810 --> 00:01:39.670
is handled through
the Cast receiver.

00:01:39.670 --> 00:01:41.999
You know, like a Chromecast
connected to your TV.

00:01:41.999 --> 00:01:43.540
This acts like a
server for the match

00:01:43.540 --> 00:01:45.227
and will store the
game state, and will

00:01:45.227 --> 00:01:46.810
take the role of
pushing notifications

00:01:46.810 --> 00:01:49.962
to devices once the
information is available.

00:01:49.962 --> 00:01:51.920
Players can make requests
to change their state

00:01:51.920 --> 00:01:54.570
and send game messages
to the receiver.

00:01:54.570 --> 00:01:56.570
Player's state can be
used to implement features

00:01:56.570 --> 00:01:57.826
like a lobby system.

00:01:57.826 --> 00:02:00.450
It is also used to indicate that
a player has been disconnected

00:02:00.450 --> 00:02:02.740
and to reconnect that player.

00:02:02.740 --> 00:02:05.790
Let's look at the APIs
for sender devices.

00:02:05.790 --> 00:02:09.000
The sender APIs are available
on Android, iOS, and Chrome,

00:02:09.000 --> 00:02:11.020
and work the same
across platforms.

00:02:11.020 --> 00:02:13.430
All request operations
performed by the sender device

00:02:13.430 --> 00:02:15.440
are asynchronous.

00:02:15.440 --> 00:02:17.360
To connect the sender
and register a player,

00:02:17.360 --> 00:02:19.930
first, you must
initialize the Cast SDK.

00:02:19.930 --> 00:02:22.700
Check out our dev site
to get more information.

00:02:22.700 --> 00:02:25.530
Once this is done, you'll be
ready to request a Game Manager

00:02:25.530 --> 00:02:26.740
Client instance.

00:02:26.740 --> 00:02:29.580
It contains a copy of the entire
state on the receiver device

00:02:29.580 --> 00:02:32.230
and will be updated
automatically.

00:02:32.230 --> 00:02:34.610
From this point on, you
can read the current state,

00:02:34.610 --> 00:02:37.410
send game messages, and
make player requests.

00:02:37.410 --> 00:02:40.630
A player request is a message
used to register new players

00:02:40.630 --> 00:02:42.710
and change their player state.

00:02:42.710 --> 00:02:44.840
A game message represents
player's actions.

00:02:44.840 --> 00:02:47.465
Its contents are
entirely up to your game.

00:02:47.465 --> 00:02:49.460
The Game Manager
Client always has

00:02:49.460 --> 00:02:50.870
a snapshot of the
receiver state,

00:02:50.870 --> 00:02:52.425
and it's updated automatically.

00:02:52.425 --> 00:02:54.700
This means you can query
any value at any time,

00:02:54.700 --> 00:02:57.900
like the number of players
or the lobby state.

00:02:57.900 --> 00:03:00.690
You can attach a listener to get
notified when something changes

00:03:00.690 --> 00:03:03.160
or when a game
message is received.

00:03:03.160 --> 00:03:06.920
Now let's look at the receiver
APIs for the HTML5 game running

00:03:06.920 --> 00:03:08.901
on the Google Cast device.

00:03:08.901 --> 00:03:10.400
This is my favorite
part, since this

00:03:10.400 --> 00:03:12.500
is where the majority
of the game code lives.

00:03:12.500 --> 00:03:14.654
To get started, follow
instructions on our dev site

00:03:14.654 --> 00:03:17.070
about how to set up a receiver
and then construct the Game

00:03:17.070 --> 00:03:18.400
Manager object.

00:03:18.400 --> 00:03:21.210
Unlike the sender APIs,
all operations you perform

00:03:21.210 --> 00:03:24.640
are synchronous since everything
happens on the same device.

00:03:24.640 --> 00:03:26.930
When you update any piece
of Game Manager state,

00:03:26.930 --> 00:03:28.590
a message will be
sent automatically

00:03:28.590 --> 00:03:32.200
to all connected senders
letting them know of the change.

00:03:32.200 --> 00:03:33.940
Much like on the
sender APIs, you

00:03:33.940 --> 00:03:36.550
can set up listeners to get
notified of state changes

00:03:36.550 --> 00:03:38.080
and game messages.

00:03:38.080 --> 00:03:40.140
To send messages to
players, you just

00:03:40.140 --> 00:03:42.790
have to specify the
player ID and the message.

00:03:42.790 --> 00:03:44.740
We'll take care of the rest.

00:03:44.740 --> 00:03:48.160
But we can't write perfect
code every time, right?

00:03:48.160 --> 00:03:50.750
To debug your game, you can
connect the Chrome Remote

00:03:50.750 --> 00:03:53.700
Debugger just like with
any other Cast application.

00:03:53.700 --> 00:03:56.150
You can enable a debug UI
that is displayed on top

00:03:56.150 --> 00:03:58.080
of your game on the TV screen.

00:03:58.080 --> 00:03:59.820
We also provide you
with a debugging app

00:03:59.820 --> 00:04:01.570
for Android and
iOS that allows you

00:04:01.570 --> 00:04:04.100
to see the game state and
messages being passed around,

00:04:04.100 --> 00:04:07.080
as well as connect new
players and update them.

00:04:07.080 --> 00:04:09.860
To help you get started, we
have open source game samples

00:04:09.860 --> 00:04:11.360
that you can use for reference.

00:04:11.360 --> 00:04:13.170
Make sure to check them out.

00:04:13.170 --> 00:04:17.220
In summary, we provide you with
the Receiver SDK, the Sender

00:04:17.220 --> 00:04:19.700
SDKs for Android,
iOS, and Chrome,

00:04:19.700 --> 00:04:21.880
sample games that
help you get started,

00:04:21.880 --> 00:04:24.750
game debugger apps, and a
debug UI for the receiver,

00:04:24.750 --> 00:04:27.470
UX guidelines for Cast
games, and all of the SDK

00:04:27.470 --> 00:04:29.760
documentation and reference.

00:04:29.760 --> 00:04:32.000
There are other ways you
can use to create games

00:04:32.000 --> 00:04:33.562
with the power of Google Cast.

00:04:33.562 --> 00:04:36.020
If you want to have a phone or
a tablet host the game logic

00:04:36.020 --> 00:04:38.300
and push content
to a TV, check out

00:04:38.300 --> 00:04:41.687
the DevBytes video about
Remote Display for Google Cast.

00:04:41.687 --> 00:04:43.770
We're excited to see what
kind of innovative games

00:04:43.770 --> 00:04:46.492
you'll build using the Game
Manager APIs for Google Cast.

00:04:46.492 --> 00:04:48.950
Don't forget to check our dev
site to get more information.

00:04:48.950 --> 00:04:49.840
See you soon.

00:04:49.840 --> 00:04:52.890
[MUSIC PLAYING]

