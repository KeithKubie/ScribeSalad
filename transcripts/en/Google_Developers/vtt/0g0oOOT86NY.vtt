WEBVTT
Kind: captions
Language: en

00:00:02.100 --> 00:00:03.100
&gt;&gt;Alex Komoroske: Hi.

00:00:03.100 --> 00:00:04.100
Welcome.

00:00:04.100 --> 00:00:05.100
Thanks for coming back after lunch.

00:00:05.100 --> 00:00:06.660
We'll get started.

00:00:06.660 --> 00:00:07.770
I'm Alex Komoroske.

00:00:07.770 --> 00:00:09.350
&gt;&gt;Matthew McNulty: And I'm Matt McNulty.

00:00:09.350 --> 00:00:13.000
&gt;&gt;Alex Komoroske: And we both work on Chrome
on the Open Web Platform team.

00:00:13.000 --> 00:00:16.850
Now, before we get really started I just want
to reiterate that this is an intermediate

00:00:16.850 --> 00:00:21.110
level talk, so if you saw Eric's talk just
before this, before lunch, you're probably

00:00:21.110 --> 00:00:22.110
all set.

00:00:22.110 --> 00:00:25.720
If not, there are going to be a lot of points
where you're just scratching your head, and

00:00:25.720 --> 00:00:29.430
what you want to do is review some of the
other specs and tutorials on some of these

00:00:29.430 --> 00:00:30.900
emerging web standards afterwards.

00:00:30.900 --> 00:00:33.969
&gt;&gt;Matthew McNulty: And all children should
leave the room as well.

00:00:33.969 --> 00:00:37.390
[ Laughter ]
&gt;&gt;Alex Komoroske: So if you saw Eric's talk,

00:00:37.390 --> 00:00:42.579
you're probably thinking to yourself, you
know, "Wow, web components sounds really cool.

00:00:42.579 --> 00:00:44.390
Specifications are being finalized.

00:00:44.390 --> 00:00:45.890
Browsers are starting to implement them."

00:00:45.890 --> 00:00:47.260
But...

00:00:47.260 --> 00:00:52.389
&gt;&gt;Matthew McNulty: But if you're a web developer,
you're thinking, "I probably can't use these

00:00:52.389 --> 00:00:53.389
things.

00:00:53.389 --> 00:00:56.469
Call me in a few years when I actually can
and when this is actually relevant to me."

00:00:56.469 --> 00:01:00.739
&gt;&gt;Alex Komoroske: So the good news for you
is actually that this stuff works in all modern

00:01:00.739 --> 00:01:02.409
browsers today.

00:01:02.409 --> 00:01:07.180
&gt;&gt;Matthew McNulty: So here I have a version
of TODOMDC.

00:01:07.180 --> 00:01:12.299
&gt;&gt;Alex Komoroske: And if you don't know what
TODOMDC is, it's just a reference application.

00:01:12.299 --> 00:01:16.930
It's something that people use to write this
application again in their framework to compare

00:01:16.930 --> 00:01:19.430
it and see how it feels compared to other
frameworks.

00:01:19.430 --> 00:01:28.090
&gt;&gt;Matthew McNulty: But the interesting thing
about this one, if I inspect elements, is

00:01:28.090 --> 00:01:29.090
it uses web components.

00:01:29.090 --> 00:01:32.840
So you see the entire thing is wrapped up
in a TD dash app tag.

00:01:32.840 --> 00:01:46.979
And if I go into settings, I can click show
Shadow DOM, leave, reinspect, and you'll see

00:01:46.979 --> 00:01:50.940
now I can actually open that node and the
grayed-out document fragment is actually a

00:01:50.940 --> 00:01:52.770
sign that you're in Shadow DOM now.

00:01:52.770 --> 00:01:57.950
So this entire little world inside this tag
is encapsulated from the outside world.

00:01:57.950 --> 00:01:59.380
There's a hard border at the edge.

00:01:59.380 --> 00:02:00.380
&gt;&gt;Alex Komoroske: Okay.

00:02:00.380 --> 00:02:02.319
But so that's easy because that's Chrome,
so what about something harder?

00:02:02.319 --> 00:02:03.479
&gt;&gt;Matthew McNulty: All right.

00:02:03.479 --> 00:02:07.490
In this VM which I've paused, because that
seems to be the best way to get Windows to

00:02:07.490 --> 00:02:09.320
stay up for this period of time --
[ Laughter ]

00:02:09.320 --> 00:02:15.450
&gt;&gt;Matthew McNulty: -- for purposes of this
presentation I've got it here in IE as well

00:02:15.450 --> 00:02:17.740
in Windows 8.

00:02:17.740 --> 00:02:23.400
&gt;&gt;Alex Komoroske: So it's the same code using,
again, these concepts of Shadow DOM web components

00:02:23.400 --> 00:02:24.830
that's working in IE.

00:02:24.830 --> 00:02:26.090
So how did we do this?

00:02:26.090 --> 00:02:27.310
How did we make this happen?

00:02:27.310 --> 00:02:29.420
Well, the answer is that we're impatient.

00:02:29.420 --> 00:02:33.460
We're really excited about web components
but we didn't want to wait to use them until

00:02:33.460 --> 00:02:35.840
they were in every modern browser.

00:02:35.840 --> 00:02:39.500
The other important thing is we work on the
Chrome team where some of the folks who are

00:02:39.500 --> 00:02:43.850
actively standardizing the web components
stuff in the standards bodies, and when you're

00:02:43.850 --> 00:02:47.870
designing new web standards, it's really important
to experiment with them, especially if they're

00:02:47.870 --> 00:02:48.870
very complex.

00:02:48.870 --> 00:02:53.030
What you don't want is you work on a specification
for a while, you build consensus, you implement

00:02:53.030 --> 00:02:57.800
it, you ship it, and then you use it and you
go, "Oooh, wow, that's really hard to use."

00:02:57.800 --> 00:03:02.700
And so you want to experiment with this stuff
and feed that feedback directly back into

00:03:02.700 --> 00:03:05.620
the standardization process before it gets
locked in.

00:03:05.620 --> 00:03:11.430
So you want to, you know, improve these standards
and not just work around them.

00:03:11.430 --> 00:03:14.990
So we started what was kind of a crazy experiment
to see if we could make this stuff work in

00:03:14.990 --> 00:03:16.330
modern browsers.

00:03:16.330 --> 00:03:20.770
We started a project a number of months ago
on Github doing everything fully in public.

00:03:20.770 --> 00:03:24.560
We called it Toolkitchen until a few days
ago when we renamed it Polymer.

00:03:24.560 --> 00:03:25.834
&gt;&gt;Matthew McNulty: We renamed it a few times,
actually.

00:03:25.834 --> 00:03:31.310
&gt;&gt;Alex Komoroske: If you were working on it
closely, there were two renames in short succession.

00:03:31.310 --> 00:03:34.810
We've already gotten some really good community
participation from folks who have found out

00:03:34.810 --> 00:03:36.880
about it and provided feedback.

00:03:36.880 --> 00:03:37.960
We're really happy about that.

00:03:37.960 --> 00:03:42.020
And we've also been able to provide feedback
back into the specification process to help

00:03:42.020 --> 00:03:47.790
identify some areas in the specs that we thought
needed to change.

00:03:47.790 --> 00:03:52.490
&gt;&gt;Matthew McNulty: So we're focused on modern
browsers for a couple of reasons.

00:03:52.490 --> 00:03:56.510
Older browsers, you just can't polyfill some
of this stuff.

00:03:56.510 --> 00:03:58.250
And really it's -- you know, it's time for
a break.

00:03:58.250 --> 00:03:59.250
We want to move forward.

00:03:59.250 --> 00:04:02.090
And we don't want anyone who is using this
stuff to be left behind, kind of like the

00:04:02.090 --> 00:04:04.610
current older browsers that don't update.

00:04:04.610 --> 00:04:09.570
You know, you're headed for trouble if all
do you is stare in the rearview mirror.

00:04:09.570 --> 00:04:11.170
So this approach is hard.

00:04:11.170 --> 00:04:12.930
We didn't know it would work.

00:04:12.930 --> 00:04:16.410
We actually didn't really know it would work
for the first six months or so, whether we

00:04:16.410 --> 00:04:20.070
could actually get this stuff working in a
way that really emulated the future platform

00:04:20.070 --> 00:04:23.290
in a way that we could work together and form
a coherent system.

00:04:23.290 --> 00:04:27.410
We've been working with all the different
standards bodies and providing feedback, as

00:04:27.410 --> 00:04:28.410
Alex said.

00:04:28.410 --> 00:04:29.410
Yeah.

00:04:29.410 --> 00:04:32.270
&gt;&gt;Alex Komoroske: But the point is actually
that it does work today and it brings you

00:04:32.270 --> 00:04:35.380
the future and allows you to build on top
of it today.

00:04:35.380 --> 00:04:39.530
So the way I think about this is what's actually
implemented in browsers today is like the

00:04:39.530 --> 00:04:40.530
bedrock.

00:04:40.530 --> 00:04:43.990
It's a solid foundation but it's kind of uneven
because different browsers have different

00:04:43.990 --> 00:04:46.160
support for different things.

00:04:46.160 --> 00:04:48.350
The answer to this is polyfills.

00:04:48.350 --> 00:04:49.930
Not a new concept.

00:04:49.930 --> 00:04:54.620
A polyfill is a JavaScript library that basically
mocks out a future standard so that you can

00:04:54.620 --> 00:04:58.320
use it before it actually is deployed in all
modern browsers.

00:04:58.320 --> 00:05:03.310
The goal with polyfills is to have really
high fidelity, so that way, later you don't

00:05:03.310 --> 00:05:04.310
even need it.

00:05:04.310 --> 00:05:07.639
&gt;&gt;Matthew McNulty: So perfect fidelity is
not always possible in some of these things.

00:05:07.639 --> 00:05:11.340
Everyone always goes, "Oh, but what about"
and they're usually right.

00:05:11.340 --> 00:05:16.690
So things like styling scoping, encapsulation
in any real significant way, are just not

00:05:16.690 --> 00:05:19.080
possible in JavaScript but we've gotten pretty
close.

00:05:19.080 --> 00:05:22.430
&gt;&gt;Alex Komoroske: So we'll go over these polyfills
very briefly.

00:05:22.430 --> 00:05:26.650
These are each -- almost all of these are
emerging standards so we only have a chance

00:05:26.650 --> 00:05:28.240
to say about a sentence about each one.

00:05:28.240 --> 00:05:32.320
If you are wondering what these are, check
out the specs, check out the tutorials to

00:05:32.320 --> 00:05:33.790
learn more about these.

00:05:33.790 --> 00:05:40.450
&gt;&gt;Matthew McNulty: So mutation observers allow
for the efficient observations of DOM, so

00:05:40.450 --> 00:05:43.130
when new nodes are added or attributes are
changed.

00:05:43.130 --> 00:05:45.200
This one is actually already shipping in most
modern browsers.

00:05:45.200 --> 00:05:47.810
&gt;&gt;Alex Komoroske: So the next one is pointer
events.

00:05:47.810 --> 00:05:52.510
This is a specification that unifies the event
models for touch and mouse.

00:05:52.510 --> 00:05:56.980
It allows you to write the same code and have
it run on mobile devices and desktop devices

00:05:56.980 --> 00:05:57.980
as well.

00:05:57.980 --> 00:06:00.880
In fact, everything we're showing you here
today works both on desktop and on mobile

00:06:00.880 --> 00:06:01.880
devices.

00:06:01.880 --> 00:06:06.460
&gt;&gt;Matthew McNulty: So Shadow DOM is a pillar
of web components.

00:06:06.460 --> 00:06:09.780
This brings encapsulation to the platform
for the first time.

00:06:09.780 --> 00:06:13.280
Which is really, really, really big and we'll
show that to you a little bit.

00:06:13.280 --> 00:06:17.680
It's also incredibly complicated, especially
to grasp right away, but the big -- the big

00:06:17.680 --> 00:06:22.240
point is it gives you the ability to encapsulate
things within a tag.

00:06:22.240 --> 00:06:24.960
And so if you need to know more about that,
I refer you to Eric's talk that happened just

00:06:24.960 --> 00:06:26.610
before this one, or just before lunch.

00:06:26.610 --> 00:06:28.840
&gt;&gt;Alex Komoroske: The next one is custom elements.

00:06:28.840 --> 00:06:30.980
This is another pillar of web components.

00:06:30.980 --> 00:06:35.680
It allows you to define your own tags and
have them operate just like any other tags

00:06:35.680 --> 00:06:37.220
in the browser.

00:06:37.220 --> 00:06:41.010
It allows you to create these elements and
put whatever you want inside of them, even

00:06:41.010 --> 00:06:45.050
ones of arbitrary complexity, and have them
treated just like any other tag that you're

00:06:45.050 --> 00:06:47.600
familiar with, like the video tag or Canvas
or whatever.

00:06:47.600 --> 00:06:49.370
&gt;&gt;Matthew McNulty: HTML imports.

00:06:49.370 --> 00:06:52.050
This one was known as a few different things.

00:06:52.050 --> 00:06:56.730
Link rel imports, web components itself briefly
for a little bit, but now it's HTML imports.

00:06:56.730 --> 00:07:00.650
And the big thing with this one, it allows
you to package CSS, JavaScript, HTML, into

00:07:00.650 --> 00:07:05.460
a single module and import it into your app
and it allows reusability across multiple

00:07:05.460 --> 00:07:07.600
applications or multiple parts of your application.

00:07:07.600 --> 00:07:11.270
&gt;&gt;Alex Komoroske: So this next one is MDV,
which stands for "model driven views."

00:07:11.270 --> 00:07:15.650
This is the only one in this list that isn't
really an emerging standard yet although hopefully

00:07:15.650 --> 00:07:17.260
one day it will be.

00:07:17.260 --> 00:07:20.840
It's something that allows you to do data
binding directly in HTML.

00:07:20.840 --> 00:07:24.240
And as we've been playing with all of these,
this is one that really allows us to eliminate

00:07:24.240 --> 00:07:27.310
a lot of boilerplate code in practice.

00:07:27.310 --> 00:07:33.930
&gt;&gt;Matthew McNulty: So web animations unifies
CSS and SVG animations and exposes the primitives

00:07:33.930 --> 00:07:39.300
beneath those and allows you to create really
complex animation sequences separate from

00:07:39.300 --> 00:07:40.480
the things you want to animate.

00:07:40.480 --> 00:07:42.800
It's actually a really, really cool project.

00:07:42.800 --> 00:07:46.270
It predates when we started working on toolkitchen,
now polymer.

00:07:46.270 --> 00:07:50.960
And actually Mozilla, Google, Adobe, were
all collaborated on that polyfill and it's

00:07:50.960 --> 00:07:51.960
included.

00:07:51.960 --> 00:07:55.050
&gt;&gt;Alex Komoroske: So together, these form
a stable foundation that allows you to pretend

00:07:55.050 --> 00:07:58.330
like you're living in the future and build
there.

00:07:58.330 --> 00:08:02.520
So the cool thing about polyfills is that
over time as the -- as browser vendors implement

00:08:02.520 --> 00:08:07.340
these features, the need for them goes away,
and so ultimately at some point in the future

00:08:07.340 --> 00:08:10.419
you wouldn't even need this layer at all.

00:08:10.419 --> 00:08:14.430
&gt;&gt;Matthew McNulty: So and one of the other
great things about this is we designed this

00:08:14.430 --> 00:08:15.680
to be a la carte.

00:08:15.680 --> 00:08:21.400
So you can use each individual -- each individual
polyfill or you can combine a couple together

00:08:21.400 --> 00:08:26.020
or you can take the entire thing, and if you
want, actually, to take the entire platform

00:08:26.020 --> 00:08:31.370
and minimize a gzip version of that, it's
actually only 31K.

00:08:31.370 --> 00:08:32.370
So think about that.

00:08:32.370 --> 00:08:36.269
That's actually the entire future of the web
platform for about the size of an icon.

00:08:36.269 --> 00:08:38.309
&gt;&gt;Alex Komoroske: Most of the future of the
web platform.

00:08:38.309 --> 00:08:39.769
So we've been talking about modern browsers.

00:08:39.769 --> 00:08:41.229
Let me define that real quick.

00:08:41.229 --> 00:08:44.169
This is our compatibility chart for our polyfills.

00:08:44.169 --> 00:08:50.050
It includes Chrome, Firefox, IE, Safari, also
their mobile variants.

00:08:50.050 --> 00:08:52.040
We call these the evergreen browsers.

00:08:52.040 --> 00:08:53.740
These are browsers that are modern.

00:08:53.740 --> 00:08:57.250
They support, many of them, the new standards.

00:08:57.250 --> 00:09:01.290
They also importantly keep their users updated
by default.

00:09:01.290 --> 00:09:04.170
So users don't have to do anything unusual
just to stay on the newest one.

00:09:04.170 --> 00:09:06.550
So the users aren't going to live in the past
for long.

00:09:06.550 --> 00:09:09.389
When there's a new version, they'll just come
along to the new version, which is really

00:09:09.389 --> 00:09:10.389
important.

00:09:10.389 --> 00:09:11.389
Okay.

00:09:11.389 --> 00:09:15.180
So web components provides -- this foundation
layer provides a lot like a utility belt that

00:09:15.180 --> 00:09:18.369
allows you to build apps but it's not everything
you need.

00:09:18.369 --> 00:09:21.720
You need some higher-level stack pieces to
fit them together and really make them work

00:09:21.720 --> 00:09:22.720
together.

00:09:22.720 --> 00:09:26.589
&gt;&gt;Matthew McNulty: We realized we needed to
build a toolkit.

00:09:26.589 --> 00:09:32.009
So this toolkit, which we call polymer, it
weaves together all of the lower level pieces

00:09:32.009 --> 00:09:35.240
of the platform into a whole cloth for building
applications.

00:09:35.240 --> 00:09:37.680
It's also where we express our opinion on
top of that.

00:09:37.680 --> 00:09:41.970
&gt;&gt;Alex Komoroske: So this layer, unlike the
layer below it which will disappear over time,

00:09:41.970 --> 00:09:44.839
this layer will continue to exist because
it's not part of any spec.

00:09:44.839 --> 00:09:48.100
It's our opinion on how to use these things
productively together.

00:09:48.100 --> 00:09:52.180
Although hopefully maybe if these kinds of
patterns become popular and other libraries

00:09:52.180 --> 00:09:57.760
use them too, maybe this is something that
could be specified in a web standard in the

00:09:57.760 --> 00:09:59.680
future, maybe.

00:09:59.680 --> 00:10:04.709
&gt;&gt;Matthew McNulty: So we started out with
some core principles to build a new kind of

00:10:04.709 --> 00:10:05.709
toolkit, right?

00:10:05.709 --> 00:10:07.380
One with the future in mind.

00:10:07.380 --> 00:10:09.309
So this is -- you know, we're leaving behind
the past.

00:10:09.309 --> 00:10:11.139
We've got these new toys to play with.

00:10:11.139 --> 00:10:14.790
What can we do if we actually had all of these
things and does it actually work?

00:10:14.790 --> 00:10:20.279
&gt;&gt;Alex Komoroske: So these principles are
use the platform, eliminate boilerplate, and

00:10:20.279 --> 00:10:21.279
everything is an element.

00:10:21.279 --> 00:10:23.459
&gt;&gt;Matthew McNulty: So use the platform.

00:10:23.459 --> 00:10:28.439
So this is a big change, at least for me and
others who have built JavaScript frameworks

00:10:28.439 --> 00:10:29.439
before.

00:10:29.439 --> 00:10:33.040
You know, for the most part, the web has been
not particularly great -- a great spot to

00:10:33.040 --> 00:10:34.220
build Webapps.

00:10:34.220 --> 00:10:38.860
The platform, like Alex said -- right? -- it's
rocky, it's uneven on the bottom of the.

00:10:38.860 --> 00:10:43.189
And, you know, as a result, a lot of really,
really talented JavaScript developers have

00:10:43.189 --> 00:10:47.339
spent their time building frameworks and building
these entire worlds and separate render trees

00:10:47.339 --> 00:10:52.529
and doing really kind of crazy amazing things
like using iFrames to force rendering behavior

00:10:52.529 --> 00:10:58.440
in the browser, you know, just to get around
problems -- problems on the platform.

00:10:58.440 --> 00:11:03.699
So, you know, we were tasked very specifically,
you know, no tricks.

00:11:03.699 --> 00:11:08.199
So if you hit a problem and, you know, something
doesn't work well, you know, we're on the

00:11:08.199 --> 00:11:11.720
Chrome team so we're actually allowed to go
to the guy around the corner in the next cube

00:11:11.720 --> 00:11:13.029
and say, "Hey, can you fix this?"

00:11:13.029 --> 00:11:14.029
&gt;&gt;Alex Komoroske: "Let's file a bug.

00:11:14.029 --> 00:11:15.029
Let's get that fixed."

00:11:15.029 --> 00:11:16.029
&gt;&gt;Matthew McNulty: A bug, yeah.

00:11:16.029 --> 00:11:19.260
So we wanted to use the platform, not just
the existing platform but this new platform.

00:11:19.260 --> 00:11:21.939
We have all these new toys that we're being
given.

00:11:21.939 --> 00:11:23.100
We wanted to see what we could do with them.

00:11:23.100 --> 00:11:25.319
&gt;&gt;Alex Komoroske: The next one is to eliminate
boilerplate.

00:11:25.319 --> 00:11:30.899
So on this team we're very, very adamant about
that, that you should only write the code

00:11:30.899 --> 00:11:32.899
that's unique to your app and nothing more.

00:11:32.899 --> 00:11:36.079
You shouldn't have to be recreating these
things every single time you're writing an

00:11:36.079 --> 00:11:37.079
app.

00:11:37.079 --> 00:11:38.929
&gt;&gt;Matthew McNulty: And everything is an element.

00:11:38.929 --> 00:11:42.120
This one is really, really important but I'm
going to hammer it home about a hundred more

00:11:42.120 --> 00:11:45.939
times so you can not pay attention to this
one.

00:11:45.939 --> 00:11:48.430
So the idea is every single thing is a module,
right?

00:11:48.430 --> 00:11:49.440
And you use an element.

00:11:49.440 --> 00:11:53.999
And you build applications out of bigger and
bigger elements made -- made of more and more

00:11:53.999 --> 00:11:57.110
elements, up to and including an actual app.

00:11:57.110 --> 00:11:59.889
By doing this, you've got all these reasonable
little portions.

00:11:59.889 --> 00:12:03.139
You keep the developer's context really local.

00:12:03.139 --> 00:12:04.559
You reduce bugs.

00:12:04.559 --> 00:12:09.079
And it makes it so that, you know, from the
perspective of a developer at any given time,

00:12:09.079 --> 00:12:13.540
an application can be arbitrarily -- sorry,
arbitrarily simple and complex at the same

00:12:13.540 --> 00:12:16.829
time.

00:12:16.829 --> 00:12:25.739
So we wanted a system that weaves together
the platform to enable component-based apps.

00:12:25.739 --> 00:12:29.970
So everything is an element and every -- and
all elements have Shadow DOM encapsulating

00:12:29.970 --> 00:12:31.639
them.

00:12:31.639 --> 00:12:35.959
Polymer makes building elements easier, and
from the outside -- you know, from the inside,

00:12:35.959 --> 00:12:37.279
you're building your own in polymer.

00:12:37.279 --> 00:12:38.399
From the outside, it's just an element.

00:12:38.399 --> 00:12:39.850
It looks like every other DOM element.

00:12:39.850 --> 00:12:43.149
&gt;&gt;Alex Komoroske: So just like every other
DOM element, the way you pass in configuration

00:12:43.149 --> 00:12:47.629
is via attributes and the way you pass things
out of it is via element, so from the outside

00:12:47.629 --> 00:12:49.509
perspective, it's just an element.

00:12:49.509 --> 00:12:53.709
&gt;&gt;Matthew McNulty: So this is an example of
polymer JS element.

00:12:53.709 --> 00:12:58.769
This one is a polymer panels element, so all
custom elements need to have a dash in the

00:12:58.769 --> 00:12:59.769
name.

00:12:59.769 --> 00:13:00.769
That's the only requirement.

00:13:00.769 --> 00:13:02.129
It used to be an X dash.

00:13:02.129 --> 00:13:07.499
But this allows for different vendors to provide
their own prefix to things, and namespace

00:13:07.499 --> 00:13:10.610
to things, and it's important to note this
is not XML namespacing.

00:13:10.610 --> 00:13:13.089
There's, you know, no collision detection
or things like that.

00:13:13.089 --> 00:13:16.499
People just have to be on good behavior.

00:13:16.499 --> 00:13:21.230
So in this case, it's a polymer panels app
that would provide like say a series of sliding

00:13:21.230 --> 00:13:25.970
panels or a carousel or something like that.

00:13:25.970 --> 00:13:30.879
So one of the first big features that we add
is declarative mapping of custom and DOM events

00:13:30.879 --> 00:13:32.430
to methods within the element.

00:13:32.430 --> 00:13:37.160
So in this case when a select event is fired,
the panel select handler element with that

00:13:37.160 --> 00:13:43.600
method name -- this is not code that's executed
-- will be rerun on the actual element.

00:13:43.600 --> 00:13:47.529
&gt;&gt;Alex Komoroske: So again, this makes it
easy to behave just like any other element

00:13:47.529 --> 00:13:49.360
and pass things out via events.

00:13:49.360 --> 00:13:50.360
&gt;&gt;Matthew McNulty: Yeah.

00:13:50.360 --> 00:13:53.290
And one of the nice things we like about this
is rather than like what's currently in vogue

00:13:53.290 --> 00:14:00.529
with add event listener and for security reasons,
we've reestablished a way of doing it in declarative.

00:14:00.529 --> 00:14:03.569
Kind of the whole thing we're doing here -- you
know, every single thing we do, we can also

00:14:03.569 --> 00:14:09.569
do imperatively but we like the idea of the,
you know, declarative renaissance.

00:14:09.569 --> 00:14:11.249
So the next thing is custom attributes.

00:14:11.249 --> 00:14:13.890
So you've got custom elements, you need custom
attributes.

00:14:13.890 --> 00:14:17.629
This is the API that your element exposes
to the world.

00:14:17.629 --> 00:14:21.549
And then one of the big things we add is data
binding and this is powered by MDV.

00:14:21.549 --> 00:14:23.549
This radically reduces code complexity.

00:14:23.549 --> 00:14:27.730
We'll -- we're going to demo this in a little
bit so we'll get into it more.

00:14:27.730 --> 00:14:32.291
And there's a whole bunch more, but this is
the big picture, and if you combine all of

00:14:32.291 --> 00:14:35.480
this with all the new platform bits, you end
up with something pretty awesome.

00:14:35.480 --> 00:14:39.369
&gt;&gt;Alex Komoroske: So as we're using this,
this already made it much easier to build

00:14:39.369 --> 00:14:43.170
apps but we weren't satisfied because we were
realizing that we were rebuilding the same

00:14:43.170 --> 00:14:45.139
kind of UI widgets again and again.

00:14:45.139 --> 00:14:48.101
And, you know, every framework that wants
to make an easy-to-build app, they should

00:14:48.101 --> 00:14:49.869
help you build UIs as well.

00:14:49.869 --> 00:14:53.999
We really need to build a set of really great
widgets, and so we've just begun that a few

00:14:53.999 --> 00:14:57.290
weeks ago.

00:14:57.290 --> 00:15:00.439
So I want to -- this is a -- this is the -- sort
of completing this diagram.

00:15:00.439 --> 00:15:03.209
I want to take a moment to reflect really
quickly on our approach.

00:15:03.209 --> 00:15:08.549
So a lot of other frameworks are sort of forced
to do everything in script.

00:15:08.549 --> 00:15:13.279
They have to do very, very, very clever engineering
to replace the pot from below them because

00:15:13.279 --> 00:15:14.619
it doesn't do the things they need.

00:15:14.619 --> 00:15:18.499
So they end up building their own parallel
universes that don't inter-operate very well

00:15:18.499 --> 00:15:21.579
because they've created their own worlds.

00:15:21.579 --> 00:15:25.209
What we were trying to do is fix the platform
and actually provide feedback back to the

00:15:25.209 --> 00:15:27.769
platform, use the emerging standards.

00:15:27.769 --> 00:15:31.920
And we -- actually, one thing that's cool
about web components is that your interoperability

00:15:31.920 --> 00:15:35.749
layer is just the DOM because an element is
an element, you know how to work it.

00:15:35.749 --> 00:15:40.459
And that means that for the first time actually
it's possible for UI elements to be interoperable.

00:15:40.459 --> 00:15:43.639
So you'll see in this diagram -- it's actually
very, very hard to see here -- there's other

00:15:43.639 --> 00:15:49.089
boxes to the right of this, because other
UI elements could be built on top of some

00:15:49.089 --> 00:15:51.369
of these layers or the foundation and inter-operate
with them.

00:15:51.369 --> 00:15:53.889
And we'll show you a little bit more about
that later.

00:15:53.889 --> 00:15:58.129
They're -- also in polymer, we've taken a
layered approach to everything.

00:15:58.129 --> 00:16:01.230
So if you want to use our UI elements, great,
you get the whole stack.

00:16:01.230 --> 00:16:05.549
If you just want to use a single polyfill
by itself, cool, just take that one.

00:16:05.549 --> 00:16:06.730
Or anything in between.

00:16:06.730 --> 00:16:10.300
So you can sort of figure out exactly how
much of this stuff you want to use.

00:16:10.300 --> 00:16:12.429
So we've been talking a whole lot about this.

00:16:12.429 --> 00:16:15.530
Let's -- but rather than continue to just
talk about it, let's show you how all this

00:16:15.530 --> 00:16:17.249
stuff works.

00:16:17.249 --> 00:16:23.069
&gt;&gt;Matthew McNulty: All right.

00:16:23.069 --> 00:16:24.329
So here we have a code editor.

00:16:24.329 --> 00:16:27.699
This is actually just the ace code editor
that we threw in a browser with some other

00:16:27.699 --> 00:16:32.160
fancy stuff, and this is an element definition.

00:16:32.160 --> 00:16:34.679
So if you saw this from Eric's talk, it should
be somewhat familiar.

00:16:34.679 --> 00:16:37.940
This one is, you know, ever so slightly different
because it's a polymer element.

00:16:37.940 --> 00:16:39.059
But the basics are still there.

00:16:39.059 --> 00:16:40.749
So you've got an element tag.

00:16:40.749 --> 00:16:43.290
In this case, the name attribute says it's
my dash element.

00:16:43.290 --> 00:16:45.040
That means that's the tag we're going to create.

00:16:45.040 --> 00:16:49.110
So whenever this element definition is around,
the tag that says "my element" will include

00:16:49.110 --> 00:16:50.430
all of this stuff.

00:16:50.430 --> 00:16:54.750
The template tag is the DOM that you want
to stamp out when this -- when this tag is

00:16:54.750 --> 00:16:55.750
used.

00:16:55.750 --> 00:16:58.399
There's actually a whole bunch of really cool
things you can do with template and iterate

00:16:58.399 --> 00:16:59.399
and all these other things.

00:16:59.399 --> 00:17:03.160
I'd encourage you to go look that up after
this.

00:17:03.160 --> 00:17:08.260
And then there's the script tag which provides
the prototype for the element and various

00:17:08.260 --> 00:17:09.980
behaviors, if you want to add.

00:17:09.980 --> 00:17:15.420
So in this case we'll just start out really
simple and I'll add a div, "hello world."

00:17:15.420 --> 00:17:19.079
&gt;&gt;Alex Komoroske: So if you can't see it -- I
know this is a big room.

00:17:19.079 --> 00:17:25.079
Back there, if you can't see it, we can zoom
it a little bit maybe, but check it out.

00:17:25.079 --> 00:17:27.240
All this stuff is in the repo afterwards.

00:17:27.240 --> 00:17:33.820
We can provide the you the link.

00:17:33.820 --> 00:17:36.639
Sorry about that.

00:17:36.639 --> 00:17:39.741
&gt;&gt;Matthew McNulty: There you go.

00:17:39.741 --> 00:17:40.741
So now for previews.

00:17:40.741 --> 00:17:41.741
Look at that.

00:17:41.741 --> 00:17:42.741
"Hello world."

00:17:42.741 --> 00:17:43.741
&gt;&gt;Alex Komoroske: That is amazing.

00:17:43.741 --> 00:17:44.741
Absolutely mind blowing.

00:17:44.741 --> 00:17:46.049
[ Laughter ]
&gt;&gt;Matthew McNulty: But if I look inside it,

00:17:46.049 --> 00:17:49.230
you can see here's our element definition
that we created and right next to it is an

00:17:49.230 --> 00:17:51.000
actual instance of my element.

00:17:51.000 --> 00:17:53.960
And inside that is Shadow DOM, so everything
is encapsulated.

00:17:53.960 --> 00:17:55.340
And inside that, you can see our div.

00:17:55.340 --> 00:17:58.000
&gt;&gt;Alex Komoroske: So if you're scratching
your head, this is the point where we remind

00:17:58.000 --> 00:18:02.370
you this is an intermediate level talk and
if this confuses you, you should check out

00:18:02.370 --> 00:18:04.309
-- learn more about Shadow DOM.

00:18:04.309 --> 00:18:08.550
So in fact, to see this stuff, Shadow DOM
inspector, you actually have to check an option

00:18:08.550 --> 00:18:09.550
to see it.

00:18:09.550 --> 00:18:12.120
It's not available by default because it's
encapsulation.

00:18:12.120 --> 00:18:14.320
&gt;&gt;Matthew McNulty: All right.

00:18:14.320 --> 00:18:19.640
So one of the cool things is you don't actually
have to use just normal DOM elements in here.

00:18:19.640 --> 00:18:23.380
You can have custom elements that include
other custom elements.

00:18:23.380 --> 00:18:28.170
So in this case, I'm going to switch it to
one of our custom elements, G ratings.

00:18:28.170 --> 00:18:31.040
And this element is cool for a few reasons.

00:18:31.040 --> 00:18:33.190
It's very easy to type, so I can't mistype
it here.

00:18:33.190 --> 00:18:36.030
It doesn't need any properties or attributes
by default.

00:18:36.030 --> 00:18:38.380
And what it gives you is a bunch of stars
you can click on.

00:18:38.380 --> 00:18:39.720
It's like a star rating thing.

00:18:39.720 --> 00:18:42.470
Preview it, and look at that.

00:18:42.470 --> 00:18:43.990
We've got stars.

00:18:43.990 --> 00:18:47.299
&gt;&gt;Alex Komoroske: So these are just custom
elements, so if you're looking at this in

00:18:47.299 --> 00:18:49.630
the DOM as another library, it's just an element.

00:18:49.630 --> 00:18:50.630
You know how to work it.

00:18:50.630 --> 00:18:51.850
Attributes in, events out.

00:18:51.850 --> 00:18:53.130
&gt;&gt;Matthew McNulty: Yeah.

00:18:53.130 --> 00:18:57.080
There it is still in my element, and then
here you can start to see Shadow DOM within

00:18:57.080 --> 00:18:59.450
Shadow DOM and all of the markup within.

00:18:59.450 --> 00:19:00.450
All right.

00:19:00.450 --> 00:19:03.540
So this is pretty cool but you're like, "Oh,
you've got your own little tool."

00:19:03.540 --> 00:19:05.779
&gt;&gt;Alex Komoroske: "Your own little universe
that you've built."

00:19:05.779 --> 00:19:07.590
&gt;&gt;Matthew McNulty: "You're probably, you know,
cheating somehow."

00:19:07.590 --> 00:19:16.059
So we can take the source for that document
we're creating, bring it over to JS bin, and

00:19:16.059 --> 00:19:17.059
it's the same thing.

00:19:17.059 --> 00:19:19.049
&gt;&gt;Alex Komoroske: It looks like a little bit
of boilerplate here.

00:19:19.049 --> 00:19:22.809
There is only a couple of pieces that make
are actually crucial to make this work.

00:19:22.809 --> 00:19:26.809
So the point is it is very easy to use this
within other contexts.

00:19:26.809 --> 00:19:27.929
So we believe you.

00:19:27.929 --> 00:19:29.250
By the way, this is all HTML.

00:19:29.250 --> 00:19:31.929
But let's go a little bit faster so we don't
bore them.

00:19:31.929 --> 00:19:35.389
&gt;&gt;Matthew McNulty: So it would be boring to
sit here and watch me write HTML.

00:19:35.389 --> 00:19:38.720
So we did something to make it a little bit
faster and more interesting.

00:19:38.720 --> 00:19:40.450
We built an element builder.

00:19:40.450 --> 00:19:43.419
So this is just the product of the last few
weeks.

00:19:43.419 --> 00:19:47.179
We know we are not really planning on shipping
a tool any time soon.

00:19:47.179 --> 00:19:51.590
It allows you to build elements and bind them
together into new elements and really explore

00:19:51.590 --> 00:19:52.590
it.

00:19:52.590 --> 00:19:54.560
It is a nice little showcase for what we have
built so far and the technology underneath.

00:19:54.560 --> 00:19:55.799
&gt;&gt;Alex Komoroske: So I am going to reiterate
that.

00:19:55.799 --> 00:19:56.991
This is just a demo tool.

00:19:56.991 --> 00:19:58.539
It is not an ID.

00:19:58.539 --> 00:20:00.269
You don't need to use this to use polymer.

00:20:00.269 --> 00:20:03.150
It is just for playing around with the stuff
and getting a feel for it.

00:20:03.150 --> 00:20:05.049
&gt;&gt;Matthew McNulty: So we can rate Alex so
far.

00:20:05.049 --> 00:20:06.700
&gt;&gt;Alex Komoroske: Oh, thank you.

00:20:06.700 --> 00:20:08.679
&gt;&gt;Matthew McNulty: We can change it.

00:20:08.679 --> 00:20:09.770
&gt;&gt;Alex Komoroske: Not so nice.

00:20:09.770 --> 00:20:10.770
Thank you.

00:20:10.770 --> 00:20:14.390
&gt;&gt;Matthew McNulty: You can see I'm changing
things in here, the number of stars selected,

00:20:14.390 --> 00:20:17.169
the values are changing over here in the property
inspector.

00:20:17.169 --> 00:20:20.960
This tool should be -- this kind of tool is
pretty familiar for a lot of people.

00:20:20.960 --> 00:20:22.620
You have got a palette down the left-hand
side.

00:20:22.620 --> 00:20:26.280
You have got a tool bar across the top and
then a property inspector down the right-hand

00:20:26.280 --> 00:20:27.280
side.

00:20:27.280 --> 00:20:28.280
&gt;&gt;Alex Komoroske: Can you flip to the code
real quick?

00:20:28.280 --> 00:20:31.450
&gt;&gt;Matthew McNulty: So it is not doing anything.

00:20:31.450 --> 00:20:35.470
It actually just changes the attribute in
the tag.

00:20:35.470 --> 00:20:38.370
&gt;&gt;Alex Komoroske: Basically all this tool
is doing is just a convenience for piping

00:20:38.370 --> 00:20:40.520
in those attributes to save you typing yourself.

00:20:40.520 --> 00:20:42.350
It is not doing anything magic.

00:20:42.350 --> 00:20:44.700
&gt;&gt;Matthew McNulty: All right.

00:20:44.700 --> 00:20:47.610
So that's the tool to begin with.

00:20:47.610 --> 00:20:50.730
Let's do something more interesting with MDV.

00:20:50.730 --> 00:20:57.250
So if I pull out a few other widgets, let's
do some tabs and a menu and a caption.

00:20:57.250 --> 00:21:00.990
This won't make any sense, but it will show
something really kind of interesting.

00:21:00.990 --> 00:21:04.929
So I can tap around on these things.

00:21:04.929 --> 00:21:06.559
Tap around on them independently.

00:21:06.559 --> 00:21:10.620
If I come over to the code, you can see that
when I inserted that, I actually just inserted

00:21:10.620 --> 00:21:14.270
a bunch of custom tags and even some normal
native DOM tags.

00:21:14.270 --> 00:21:16.320
So the tabs takes a bunch of spans.

00:21:16.320 --> 00:21:18.840
The menu takes a bunch of menu items.

00:21:18.840 --> 00:21:22.480
And then the caption is actually just a div.

00:21:22.480 --> 00:21:26.630
So one of the really cool features of this
toolkit is MDV.

00:21:26.630 --> 00:21:34.360
MDV allows you to bind elements together and
attributes together without any actual code.

00:21:34.360 --> 00:21:41.259
So at first I'm actually going to add a variable
to the prototype of the element here.

00:21:41.259 --> 00:21:43.770
&gt;&gt;Alex Komoroske: A property you would be
able to use just like any other JavaScript

00:21:43.770 --> 00:21:44.770
object.

00:21:44.770 --> 00:21:51.380
&gt;&gt;Matthew McNulty: I can add however many
I want.

00:21:51.380 --> 00:21:56.429
And then if I come up to any attribute within
the element, in this case "selected," I can

00:21:56.429 --> 00:21:59.769
use this double mustache syntax which is MDV
and say --

00:21:59.769 --> 00:22:05.980
&gt;&gt;Matthew McNulty: So with this G menu, the
way you specify which one is selected again

00:22:05.980 --> 00:22:07.990
is with an attribute just like any other element.

00:22:07.990 --> 00:22:11.740
&gt;&gt;Matthew McNulty: So now the tabs and the
menu in this case both have a selected attribute.

00:22:11.740 --> 00:22:13.260
That is not at all required.

00:22:13.260 --> 00:22:17.600
It is because they both have the concept of
what's selected in the selected index.

00:22:17.600 --> 00:22:20.100
I come back to the code now, except for that
one.

00:22:20.100 --> 00:22:21.100
(Chuckles.)

00:22:21.100 --> 00:22:22.100
There we go.

00:22:22.100 --> 00:22:23.299
Just had to clear the CSS.

00:22:23.299 --> 00:22:27.300
You can see them connected together.

00:22:27.300 --> 00:22:33.950
And you can actually do this right in the
tool as well.

00:22:33.950 --> 00:22:42.549
So instead of just a caption, I can click
this little linked and put in the same thing.

00:22:42.549 --> 00:22:44.000
And now they're all tied together.

00:22:44.000 --> 00:22:52.830
Now, I can take this entire thing and say
"publish," clear the canvas, and now the whole

00:22:52.830 --> 00:22:59.690
thing is itself a custom element that I can
drag off the palette and it still goes together.

00:22:59.690 --> 00:23:03.850
And not only that, you can see the myselected
property that I added to the prototype and

00:23:03.850 --> 00:23:06.029
even the foo one, even though it doesn't actually
do anything.

00:23:06.029 --> 00:23:07.059
All right.

00:23:07.059 --> 00:23:12.110
So we built a custom element and all without
doing any JavaScript actually.

00:23:12.110 --> 00:23:13.200
&gt;&gt;Alex Komoroske: It is actually kind of cool,
right?

00:23:13.200 --> 00:23:14.200
We tie these things together.

00:23:14.200 --> 00:23:17.740
If you look in the code view for this one
as well, you will see that this is just now

00:23:17.740 --> 00:23:18.799
a my element.

00:23:18.799 --> 00:23:20.940
The stuff inside is sort of hidden away.

00:23:20.940 --> 00:23:24.700
You pass the myselected that we defined in
the prototype just there as an attribute.

00:23:24.700 --> 00:23:28.500
It wires all this stuff up together for you
so you don't have to write any script to get

00:23:28.500 --> 00:23:29.500
this kind of behavior.

00:23:29.500 --> 00:23:30.500
It is pretty cool.

00:23:30.500 --> 00:23:34.429
&gt;&gt;Matthew McNulty: One of the other really
cool things is you can make your own custom

00:23:34.429 --> 00:23:35.429
elements.

00:23:35.429 --> 00:23:38.010
And one of the other uses for that is you
can wrap up existing functionality on the

00:23:38.010 --> 00:23:40.380
Web and put it in a single tag.

00:23:40.380 --> 00:23:45.150
And it is encapsulated from the rest of your
page, so you don't have any conflicts or system-level

00:23:45.150 --> 00:23:47.000
dependencies that you're creating.

00:23:47.000 --> 00:23:52.649
In which case, we'll show you one -- really
crazy one from our friends at Mozilla actually.

00:23:52.649 --> 00:23:56.700
They built a one megabyte PDF Viewer entirely
in JavaScript.

00:23:56.700 --> 00:23:58.799
&gt;&gt;Alex Komoroske: Which is crazy but awesome.

00:23:58.799 --> 00:24:01.460
&gt;&gt;Matthew McNulty: We have the complete works
of Chaucer in here.

00:24:01.460 --> 00:24:05.169
If you go to the code, you can see it is actually
just a single tag.

00:24:05.169 --> 00:24:06.909
&gt;&gt;Alex Komoroske: This is kind of crazy, right?

00:24:06.909 --> 00:24:09.879
Like, you are used to including all these
scripts and having these weird dependencies

00:24:09.879 --> 00:24:10.879
and stuff.

00:24:10.879 --> 00:24:14.320
You just write a few characters, one include,
write a few characters, and you have a PDF

00:24:14.320 --> 00:24:15.889
Viewer directly in your page.

00:24:15.889 --> 00:24:18.210
It really changes how you think about architecting
your applications.

00:24:18.210 --> 00:24:21.700
&gt;&gt;Matthew McNulty: We have got other ones
in here that we just threw again in the last

00:24:21.700 --> 00:24:22.700
few weeks.

00:24:22.700 --> 00:24:23.700
We've got charts and things like that.

00:24:23.700 --> 00:24:25.929
&gt;&gt;Alex Komoroske: These are just open source
libraries other people have built.

00:24:25.929 --> 00:24:28.720
&gt;&gt;Matthew McNulty: Again, they are just all
wrapped into a single tag.

00:24:28.720 --> 00:24:32.320
It gives you this almost module pattern that
you can use to combine things from different

00:24:32.320 --> 00:24:34.940
vendors.

00:24:34.940 --> 00:24:37.450
One the other neat things you can to do is
use Web animations, which we talked about

00:24:37.450 --> 00:24:38.450
earlier.

00:24:38.450 --> 00:24:43.549
I can actually bring out a few slightly fancier
widgets.

00:24:43.549 --> 00:24:50.990
Let's do a clock.

00:24:50.990 --> 00:24:54.710
So just for the demo, like, you know, tags
don't actually have to have UI, right.

00:24:54.710 --> 00:24:57.320
Like, a script tag doesn't have anything visual
about it.

00:24:57.320 --> 00:25:04.230
But just for this demo, we came over -- actually
we'll do flip -- and made it so these things

00:25:04.230 --> 00:25:08.460
have a UI so we can click on them in the canvas
and do interesting things.

00:25:08.460 --> 00:25:09.990
In this case, it is a flip animation.

00:25:09.990 --> 00:25:12.750
And we can say, you know, let's flip the clock.

00:25:12.750 --> 00:25:14.830
Let's do it for a second.

00:25:14.830 --> 00:25:17.250
Now, if I come back here and click on it.

00:25:17.250 --> 00:25:18.269
Clock flips.

00:25:18.269 --> 00:25:21.620
&gt;&gt;Alex Komoroske: So behind the scenes, this
is just using Web animations.

00:25:21.620 --> 00:25:23.629
Again, another emerging standard.

00:25:23.629 --> 00:25:29.409
But the cool thing about thinking about animations
configured via these non-visible elements

00:25:29.409 --> 00:25:33.470
is that you can separate the animation that
you're defining from the element itself and

00:25:33.470 --> 00:25:35.650
just sort of point at the other one.

00:25:35.650 --> 00:25:37.659
The elements don't have to be visual.

00:25:37.659 --> 00:25:39.680
That's one of the cool things when everything
is an element.

00:25:39.680 --> 00:25:43.340
&gt;&gt;Matthew McNulty: Yeah, so -- and one of
the other really cool things that Web animations

00:25:43.340 --> 00:25:49.410
gives you is the ability to do really long,
really complex, intricate animations and separate

00:25:49.410 --> 00:25:50.710
from what their target is, right?

00:25:50.710 --> 00:25:53.669
And you can just define this and drag it out
however you want.

00:25:53.669 --> 00:25:55.210
You reuse it and all of that.

00:25:55.210 --> 00:25:56.980
So, in this case, we have a whole group.

00:25:56.980 --> 00:26:02.409
So you can say let's bounce the clock this
time.

00:26:02.409 --> 00:26:06.220
Let's flip the weather because it is not that
nice out.

00:26:06.220 --> 00:26:11.120
And let's change up the market because I have
run out of puns.

00:26:11.120 --> 00:26:14.299
Now if I do it, you can see they do one after
the other.

00:26:14.299 --> 00:26:17.629
Or I can actually make it happen in parallel.

00:26:17.629 --> 00:26:24.149
So just a little taste of what you can do
with Web animations.

00:26:24.149 --> 00:26:27.820
Another thing we're doing is experimenting
with responsive design and building it directly

00:26:27.820 --> 00:26:28.880
into the widgets.

00:26:28.880 --> 00:26:31.230
I can come over here.

00:26:31.230 --> 00:26:36.820
This is another version of the Sandbox, not
full screen, so I can actually change the

00:26:36.820 --> 00:26:38.460
window size.

00:26:38.460 --> 00:26:41.330
If I come in here and I start shrinking this
down, you can see it has got a toolbar across

00:26:41.330 --> 00:26:43.440
the top of the drop-down menu.

00:26:43.440 --> 00:26:47.389
And if I shrink it small enough, hey, it drops
down to the bottom and splits because it says,

00:26:47.389 --> 00:26:53.600
Hey, it is phone or tablet size now and automatically
flips to be a little menu that pops up that's

00:26:53.600 --> 00:26:57.600
more of a phone size, full-screen, full-bleed
kind of treatment.

00:26:57.600 --> 00:27:01.440
So this is not just theoretical, but we really
just got it started -- just getting started

00:27:01.440 --> 00:27:03.200
with this kind of element.

00:27:03.200 --> 00:27:08.769
And, in fact, everything you see here works
on mobile, especially because we're using

00:27:08.769 --> 00:27:10.220
pointer events.

00:27:10.220 --> 00:27:12.429
So we're not going to put this on the camera
or anything.

00:27:12.429 --> 00:27:17.840
But you can actually on my iPad, if I can
hold it straight -- drag stuff out on the

00:27:17.840 --> 00:27:20.490
palette from my iPad and it just works.

00:27:20.490 --> 00:27:22.090
&gt;&gt;Alex Komoroske: All this stuff is really
early.

00:27:22.090 --> 00:27:23.529
We just started playing around with this.

00:27:23.529 --> 00:27:27.669
We are approaching this entire project with
a very mobile-first perspective.

00:27:27.669 --> 00:27:31.559
The ideal we're working towards is that as
a developer, you write your code once, you

00:27:31.559 --> 00:27:35.409
define, okay, this is a menu or what have
you and then it automatically adjusts across

00:27:35.409 --> 00:27:39.249
mobile or desktop or tablet to do the right
thing for you.

00:27:39.249 --> 00:27:41.539
&gt;&gt;Matthew McNulty: All right.

00:27:41.539 --> 00:27:44.840
So we've shown that you can drag a bunch of
elements out to make other elements.

00:27:44.840 --> 00:27:46.419
You can bind them together arbitrarily.

00:27:46.419 --> 00:27:48.770
You can use third-party code.

00:27:48.770 --> 00:27:51.460
Let's actually try to put all of this together
into something fun.

00:27:51.460 --> 00:27:54.179
So we have a YouTube widget.

00:27:54.179 --> 00:27:57.909
We call this the "I'm feeling lucky" YouTube
widget because all it does is take the very

00:27:57.909 --> 00:28:03.929
first query and play it.

00:28:03.929 --> 00:28:07.690
See the little Chrome commercial.

00:28:07.690 --> 00:28:11.159
I also call it the "I'm feeling risky" demo
widget.

00:28:11.159 --> 00:28:14.169
&gt;&gt;Alex Komoroske: That's a wholesome commercial,
though, so we're okay.

00:28:14.169 --> 00:28:18.140
&gt;&gt;Matthew McNulty: This is a cat video I was
using earlier in which I discovered last night

00:28:18.140 --> 00:28:19.539
the people in the background were cursing.

00:28:19.539 --> 00:28:21.100
I never had the sound on.

00:28:21.100 --> 00:28:23.700
So that one went out the window.

00:28:23.700 --> 00:28:25.179
Let's give this one a border.

00:28:25.179 --> 00:28:29.499
&gt;&gt;Alex Komoroske: It is just a normal element
so you can do whatever you want.

00:28:29.499 --> 00:28:31.090
&gt;&gt;Matthew McNulty: Yeah, just a normal element.

00:28:31.090 --> 00:28:38.430
And we can actually use the speech input in
here.

00:28:38.430 --> 00:28:45.889
And we combine the YouTube query instead of
using this plain Chrome commercial query to

00:28:45.889 --> 00:28:50.789
the input's value.

00:28:50.789 --> 00:29:03.649
Now if I come here and the sound system and
demo gods are in alignment, I can go "cats."

00:29:03.649 --> 00:29:05.950
And we've got all the cats.

00:29:05.950 --> 00:29:13.190
[ Applause ]
&gt;&gt;Alex Komoroske: Again, if you check out

00:29:13.190 --> 00:29:17.140
this code, there is -- great, now we have
distracting cats on the screen.

00:29:17.140 --> 00:29:18.140
Thank you, Matt.

00:29:18.140 --> 00:29:19.289
[ Laughter ]
&gt;&gt;Alex Komoroske: If you check out that code,

00:29:19.289 --> 00:29:23.210
it is just using that MDV syntax to plug those
things together.

00:29:23.210 --> 00:29:25.080
The magic isn't from the Sandbox app.

00:29:25.080 --> 00:29:30.009
The magic is from the platform and that layer
-- that sugar layer that we call polymer.

00:29:30.009 --> 00:29:36.220
&gt;&gt;Matthew McNulty: We can do multiple cats
across the screen and really annoy Alex.

00:29:36.220 --> 00:29:39.840
&gt;&gt;Alex Komoroske: So all this stuff is great.

00:29:39.840 --> 00:29:41.289
But you have seen this kind of thing before.

00:29:41.289 --> 00:29:44.370
Other frameworks have done similar kinds of
things.

00:29:44.370 --> 00:29:48.139
What is cool about this Web components approach
where you have actual encapsulation between

00:29:48.139 --> 00:29:53.830
them is it allows for the first time the potential
for components from of different sets to intermingle

00:29:53.830 --> 00:29:56.390
seamlessly.

00:29:56.390 --> 00:29:59.039
So in this world, interoperability layer is
the DOM.

00:29:59.039 --> 00:30:02.440
And everyone knows how to use the DOM, how
to pass an attribute to receive events out.

00:30:02.440 --> 00:30:07.010
Again, the polyfill -- the polymer library
as well is layered, so you can take just the

00:30:07.010 --> 00:30:08.029
parts you want.

00:30:08.029 --> 00:30:11.090
&gt;&gt;Matthew McNulty: So one of the cool things
we have been doing lately is our friends at

00:30:11.090 --> 00:30:15.879
Mozilla have been building X tags in their
X tags library which is similar in concept

00:30:15.879 --> 00:30:20.419
to the polymer widgets on top of the same
foundation layer that we showed you before.

00:30:20.419 --> 00:30:23.770
&gt;&gt;Alex Komoroske: They are experimenting with
using one of our polyfills in their system

00:30:23.770 --> 00:30:24.770
as well.

00:30:24.770 --> 00:30:25.770
&gt;&gt;Matthew McNulty: Yeah.

00:30:25.770 --> 00:30:28.090
So it took us no time at all to put them in
the palette, and I can actually drag out some

00:30:28.090 --> 00:30:29.090
of their widgets here.

00:30:29.090 --> 00:30:30.759
&gt;&gt;Alex Komoroske: So let me just emphasize
this.

00:30:30.759 --> 00:30:33.950
These are widgets that come from a separate,
a different framework that are also built

00:30:33.950 --> 00:30:35.960
on top of Web components.

00:30:35.960 --> 00:30:40.289
So we can just seamlessly use them in the
same environment, in the same app.

00:30:40.289 --> 00:30:41.350
This is kind of mind blowing, right?

00:30:41.350 --> 00:30:42.350
This is very new.

00:30:42.350 --> 00:30:45.490
&gt;&gt;Matthew McNulty: And one of the really cool
things is because this is just Web components

00:30:45.490 --> 00:30:49.379
and these are just elements and you can bind
them together just like any other DOM elements,

00:30:49.379 --> 00:30:59.909
we can take our toggle button and we combine
its value to the X tag switch.

00:30:59.909 --> 00:31:01.710
Check property.

00:31:01.710 --> 00:31:03.289
And now it will actually play together.

00:31:03.289 --> 00:31:08.270
&gt;&gt;Alex Komoroske: So that's two separate libraries
playing together seamlessly.

00:31:08.270 --> 00:31:13.090
So we think that this interoperability potential
for Web components is a really big deal.

00:31:13.090 --> 00:31:17.351
If you think about everything as an element,
you can have small building blocks, package

00:31:17.351 --> 00:31:19.619
them up into larger building blocks.

00:31:19.619 --> 00:31:23.399
Before you know it, you have entire reusable
applications all in one tag.

00:31:23.399 --> 00:31:27.530
&gt;&gt;Matthew McNulty: So up to and including
this entire Sandbox application, which was

00:31:27.530 --> 00:31:29.059
built using polymer.

00:31:29.059 --> 00:31:34.049
And as a result, we put it in the palette.

00:31:34.049 --> 00:31:38.710
[ Laughter ]
And we can pull it out.

00:31:38.710 --> 00:31:43.369
[ Applause ]
&gt;&gt;Alex Komoroske: That's cool, but we must

00:31:43.369 --> 00:31:44.369
go deeper.

00:31:44.369 --> 00:31:45.369
&gt;&gt;Matthew McNulty: All right.

00:31:45.369 --> 00:31:46.369
Everyone get your totems ready.

00:31:46.369 --> 00:31:48.570
We have had an inception reference.

00:31:48.570 --> 00:31:55.429
&gt;&gt;Alex Komoroske: That's pretty cool.

00:31:55.429 --> 00:31:59.419
This, in the past, would have required very
careful planning, following all the rules,

00:31:59.419 --> 00:32:01.129
all this kind of stuff.

00:32:01.129 --> 00:32:05.559
With Web components and polymer, you just
get this kind of encapsulation for free.

00:32:05.559 --> 00:32:10.299
It actually -- so we've started building this
app just a few weeks ago actually as the foundation

00:32:10.299 --> 00:32:12.390
layers got pretty solid.

00:32:12.390 --> 00:32:15.940
We were amazed how quickly we could build
it because when you are using these concepts

00:32:15.940 --> 00:32:20.320
to build elements and then larger elements
out of them, you are so much more productive.

00:32:20.320 --> 00:32:21.809
It is like a whole new world.

00:32:21.809 --> 00:32:22.940
It is really cool.

00:32:22.940 --> 00:32:27.669
&gt;&gt;Matthew McNulty: So that's polymer and Sandbox
as it exists right now.

00:32:27.669 --> 00:32:31.200
If you are adventurous and unafraid of living
on the bleeding edge -- and I would like to

00:32:31.200 --> 00:32:37.570
emphasize "bleeding edge" -- this is a particular
version of Canary that is working right now.

00:32:37.570 --> 00:32:38.700
We encourage you to check it out.

00:32:38.700 --> 00:32:39.730
It is all on Github.

00:32:39.730 --> 00:32:41.120
It is all open right now.

00:32:41.120 --> 00:32:44.840
&gt;&gt;Alex Komoroske: We started this as an experiment
at the beginning to see what we could do.

00:32:44.840 --> 00:32:48.440
But the deeper we've gone, the more and more
excited we've gotten, the more that we feel

00:32:48.440 --> 00:32:52.309
like this is sort on the cusp of something
big with Web components.

00:32:52.309 --> 00:32:56.639
We really believe that with Web components,
developers will be in order of magnitude more

00:32:56.639 --> 00:33:00.749
productive building more and better apps.

00:33:00.749 --> 00:33:04.100
So we pulled together a video that we think
-- that we hope will get you as excited about

00:33:04.100 --> 00:33:13.210
this future we are going towards as we are.

00:33:13.210 --> 00:33:27.789
[ Video playing.

00:33:27.789 --> 00:33:35.080
]
[ Music ]

00:33:35.080 --> 00:33:50.590
&gt;&gt;Alex Komoroske: So that's what we've got.

00:33:50.590 --> 00:33:54.690
You can find all this stuff at our Web site,
polymer-project.org.

00:33:54.690 --> 00:33:57.020
Learn more, provide feedback, please, please,
please.

00:33:57.020 --> 00:33:58.280
Ask us questions.

00:33:58.280 --> 00:33:59.280
Provide comments.

00:33:59.280 --> 00:34:00.280
File bugs.

00:34:00.280 --> 00:34:01.419
We'd love to get your participation.

00:34:01.419 --> 00:34:02.419
Thanks.

00:34:02.419 --> 00:34:08.760
[ Applause ]
Now we got time for questions.

00:34:08.760 --> 00:34:09.760
So...

00:34:09.760 --> 00:34:13.640
&gt;&gt;&gt; I'm curious, I'm looking at what you have
here.

00:34:13.640 --> 00:34:17.910
And I'm thinking back to MooTools and Jquery
and how we got query selector all standardized

00:34:17.910 --> 00:34:19.120
out of that.

00:34:19.120 --> 00:34:23.520
And I'm wondering when you look at something
like Angular that has a lot of similar concepts,

00:34:23.520 --> 00:34:24.520
how this interplays.

00:34:24.520 --> 00:34:30.030
If you see Angular in the future as being
another sugar layer on top of something like

00:34:30.030 --> 00:34:31.030
polymer?

00:34:31.030 --> 00:34:33.070
Or if it Web components replaces Angular?

00:34:33.070 --> 00:34:34.391
&gt;&gt;Alex Komoroske: So we aren't from the Angular
team.

00:34:34.391 --> 00:34:36.100
There might be a few folks from that team
in the audience.

00:34:36.100 --> 00:34:38.490
They are aware of this stuff.

00:34:38.490 --> 00:34:42.370
They have been playing around with Web components,
providing feedback back to the standardization

00:34:42.370 --> 00:34:43.510
process as well.

00:34:43.510 --> 00:34:47.490
Again, one of the approaches with polymer
that's really important is the layered approach.

00:34:47.490 --> 00:34:51.350
That means that other frameworks could take
just one polyfill or all of them or what have

00:34:51.350 --> 00:34:52.350
you.

00:34:52.350 --> 00:34:55.270
So I imagine that, you know, maybe that's
something that other frameworks might want

00:34:55.270 --> 00:34:57.950
to experiment with, is building on top of
those layers, if they want.

00:34:57.950 --> 00:34:58.950
I mean...

00:34:58.950 --> 00:35:04.410
&gt;&gt;&gt; Do you see the Web components specifications
replacing the need for a lot of the -- the

00:35:04.410 --> 00:35:07.110
Embers and the Angulars and things that are
popular now?

00:35:07.110 --> 00:35:08.670
&gt;&gt;Alex Komoroske: I think that's the wrong
way of thinking about it.

00:35:08.670 --> 00:35:12.810
I think that the Web components provides a
lot of the utility belt.

00:35:12.810 --> 00:35:16.620
There is always that need for sort of that
opinion to weave all that stuff together.

00:35:16.620 --> 00:35:20.700
And I think that frameworks will always have
a place in this world because you are going

00:35:20.700 --> 00:35:22.600
to need it to help you build your apps.

00:35:22.600 --> 00:35:23.600
&gt;&gt;&gt; Okay.

00:35:23.600 --> 00:35:25.100
&gt;&gt;Alex Komoroske: It brings you far but not
all the way.

00:35:25.100 --> 00:35:28.280
&gt;&gt;Matthew McNulty: I mean, It is extremely
likely that they will have to use less code

00:35:28.280 --> 00:35:31.810
to do what they're doing, which is great for
them, great for everyone else.

00:35:31.810 --> 00:35:32.810
But yeah.

00:35:32.810 --> 00:35:36.720
&gt;&gt;Alex Komoroske: I guess we got one in the
back there.

00:35:36.720 --> 00:35:40.260
&gt;&gt;&gt; Actually, I was going to ask about Angular,
too, but I think it got answered.

00:35:40.260 --> 00:35:44.300
So my other question would be, then, is this
something that you can -- I mean, obviously

00:35:44.300 --> 00:35:47.150
you're using Canary, you're using a very advanced
build.

00:35:47.150 --> 00:35:51.590
Is this something that you expect we'll need
to use only when we can tightly control the

00:35:51.590 --> 00:35:53.700
environment in which it is running?

00:35:53.700 --> 00:35:55.272
I came in a little late.

00:35:55.272 --> 00:35:56.380
So backwards compatibility is my question.

00:35:56.380 --> 00:36:00.720
&gt;&gt;Alex Komoroske: Just to reiterate actually,
the whole approach we're taking is building

00:36:00.720 --> 00:36:03.870
a layer of polyfills that sort of mocks out
the future.

00:36:03.870 --> 00:36:07.600
Matt's using Canary so we can show you real
Shadow DOM being used.

00:36:07.600 --> 00:36:14.000
But this stuff should work across all modern
browsers, IE, Safari, Firefox, Chrome.

00:36:14.000 --> 00:36:17.770
And over time as they implement these standards,
that sort of foundation layer will get thinner

00:36:17.770 --> 00:36:18.770
and thinner.

00:36:18.770 --> 00:36:22.610
&gt;&gt;&gt; So when you say "modern browsers," I assume
there will be a level that we will need to

00:36:22.610 --> 00:36:24.830
test for and then --
&gt;&gt;Alex Komoroske: That's correct.

00:36:24.830 --> 00:36:27.890
One of the goals here is to really live like
we are in the future.

00:36:27.890 --> 00:36:31.100
And if you are staring in the rearview mirror
you aren't headed for trouble.

00:36:31.100 --> 00:36:36.109
We want to make sure we can actually assimilate
the future in a high fidelity way.

00:36:36.109 --> 00:36:43.920
&gt;&gt;&gt; When you pulled up the X code bits from
the Mozilla team, you said --

00:36:43.920 --> 00:36:44.920
&gt;&gt;Alex Komoroske: X tags.

00:36:44.920 --> 00:36:45.920
&gt;&gt;&gt; Sorry?

00:36:45.920 --> 00:36:46.920
&gt;&gt;Alex Komoroske: X tags.

00:36:46.920 --> 00:36:47.920
&gt;&gt;&gt; X tags.

00:36:47.920 --> 00:36:50.341
You said it was significant because you are
pulling that in from a third-party, you know,

00:36:50.341 --> 00:36:51.770
another vendor.

00:36:51.770 --> 00:36:56.280
Where's the actual technical significance
there if they're kind of just doing the same

00:36:56.280 --> 00:36:57.280
thing?

00:36:57.280 --> 00:37:03.370
I didn't see, like, a threshold between polymer
and X tags.

00:37:03.370 --> 00:37:07.370
&gt;&gt;Matthew McNulty: So, generally, if you wanted
two libraries to play together previously,

00:37:07.370 --> 00:37:13.250
they had to either be built very specifically
to do that and not introduced system-level

00:37:13.250 --> 00:37:18.790
dependencies or they would collide and you
would just have to get lucky, right?

00:37:18.790 --> 00:37:22.700
The idea is with these things being encapsulated
is that you don't have those system-level

00:37:22.700 --> 00:37:27.390
dependencies and really the world inside of
that element, which is what's using Mozilla's

00:37:27.390 --> 00:37:30.230
code, is completely separate from the world
outside of that element.

00:37:30.230 --> 00:37:33.860
So you can mix and match these together things
a lot easier without having to dealing with

00:37:33.860 --> 00:37:34.860
those collisions.

00:37:34.860 --> 00:37:37.670
&gt;&gt;Alex Komoroske: Before Web components, you
had to make everything in script.

00:37:37.670 --> 00:37:41.130
So you had conventions for what it means to
be a component.

00:37:41.130 --> 00:37:43.860
Everyone's conventions have to align for them
to be interoperable.

00:37:43.860 --> 00:37:48.580
With Web components, people can align their
conventions on Web components, the standards,

00:37:48.580 --> 00:37:50.860
and then that makes them interoperable much
more easily.

00:37:50.860 --> 00:37:54.230
&gt;&gt;&gt; So did you have another library you pulled
in to use those X tags?

00:37:54.230 --> 00:37:59.520
And they just co-exist then because they are
creating DOM elements that are all happy together.

00:37:59.520 --> 00:38:01.390
&gt;&gt;Alex Komoroske: Theoretically, you could
just have it as an include.

00:38:01.390 --> 00:38:04.670
You can include a component -- in the future,
you can include a component from polymer's

00:38:04.670 --> 00:38:05.670
UI library.

00:38:05.670 --> 00:38:06.990
You can include a component from X tags.

00:38:06.990 --> 00:38:11.400
You could intermingle the two or a third-party
-- or a framework that's yet to be created.

00:38:11.400 --> 00:38:14.310
&gt;&gt;Matthew McNulty: It is all in that HTML
import.

00:38:14.310 --> 00:38:19.280
&gt;&gt;&gt; So you lie an aspect that's above polymer
and everything else that was significant in

00:38:19.280 --> 00:38:22.490
that respect to X tag versus your components?

00:38:22.490 --> 00:38:24.730
&gt;&gt;Alex Komoroske: Yep.

00:38:24.730 --> 00:38:25.730
&gt;&gt;&gt; Gotcha.

00:38:25.730 --> 00:38:26.960
Thank you.

00:38:26.960 --> 00:38:30.560
&gt;&gt;&gt; So I would confirm a simple question.

00:38:30.560 --> 00:38:34.420
This polymer also works with Chrome Packaged
Apps?

00:38:34.420 --> 00:38:35.560
&gt;&gt;Matthew McNulty: Mm-hmm.

00:38:35.560 --> 00:38:38.860
&gt;&gt;Alex Komoroske: Does it work right now?

00:38:38.860 --> 00:38:43.550
&gt;&gt;Matthew McNulty: Right now it does not work.

00:38:43.550 --> 00:38:45.710
The way we did the polyfill violates the SP.

00:38:45.710 --> 00:38:46.710
&gt;&gt;&gt; I see.

00:38:46.710 --> 00:38:50.160
&gt;&gt;Matthew McNulty: So Chrome apps is very
specific about that.

00:38:50.160 --> 00:38:51.160
&gt;&gt;&gt; Yeah, yeah, yeah.

00:38:51.160 --> 00:38:55.510
&gt;&gt;Matthew McNulty: But in the very near future,
once the HTML Imports feature, which is the

00:38:55.510 --> 00:38:59.530
thing that's loading things from across domains,
is done natively, which is pretty soon, then

00:38:59.530 --> 00:39:00.530
it will work.

00:39:00.530 --> 00:39:04.200
&gt;&gt;Alex Komoroske: HTML imports is be -- just
started being implemented in Chrome.

00:39:04.200 --> 00:39:05.200
&gt;&gt;&gt; (inaudible).

00:39:05.200 --> 00:39:06.240
(Speaker off microphone.)

00:39:06.240 --> 00:39:10.631
&gt;&gt;Alex Komoroske: So you can still use -- as
(saying name) was pointing out, you can use

00:39:10.631 --> 00:39:15.450
document.register even if you can't use some
of these other pieces like HTML imports.

00:39:15.450 --> 00:39:16.450
&gt;&gt;&gt; Thanks.

00:39:16.450 --> 00:39:19.349
&gt;&gt;Alex Komoroske: We got one in the back.

00:39:19.349 --> 00:39:20.349
&gt;&gt;&gt; Yeah.

00:39:20.349 --> 00:39:24.530
You were talking about modern browsers.

00:39:24.530 --> 00:39:28.560
I was wondering if you could elaborate on
mobile support.

00:39:28.560 --> 00:39:34.600
&gt;&gt;Matthew McNulty: So mobile, it is mobile
Safari and Chrome, Chrome for Android.

00:39:34.600 --> 00:39:35.600
&gt;&gt;&gt; And Android browser?

00:39:35.600 --> 00:39:37.400
&gt;&gt;Alex Komoroske: Chrome for Android.

00:39:37.400 --> 00:39:42.640
&gt;&gt;Matthew McNulty: Chrome for Android at the
moment is the only one we're testing out.

00:39:42.640 --> 00:39:43.640
&gt;&gt;&gt; Okay, thanks.

00:39:43.640 --> 00:39:45.670
&gt;&gt;Alex Komoroske: Again, it is very early
days.

00:39:45.670 --> 00:39:56.420
&gt;&gt;&gt; Several years ago there was actually a
similar technique that was to achieve the

00:39:56.420 --> 00:40:02.910
similar level of encapsulation, which is XML
plus XSLT.

00:40:02.910 --> 00:40:10.910
The essential of that is -- the picture of
that is essentially you will create a heavy

00:40:10.910 --> 00:40:20.270
element-focused, say, Web interface instead
of having to take care of all the underlayers.

00:40:20.270 --> 00:40:22.950
What would you compare that to Web components?

00:40:22.950 --> 00:40:27.570
&gt;&gt;Alex Komoroske: I think there's been a number
of things that are similar to Web components

00:40:27.570 --> 00:40:28.570
in the past.

00:40:28.570 --> 00:40:31.100
None of them have really stuck around for
various reasons.

00:40:31.100 --> 00:40:35.630
There is the things like XBL, which is still
used actually in parts of Gecko.

00:40:35.630 --> 00:40:39.182
You've got things like the HTC stuff for Microsoft.

00:40:39.182 --> 00:40:44.830
You have got a bunch of other things that
aims to solve all similar kinds of problems.

00:40:44.830 --> 00:40:47.990
Web components is now like an emerging set
of specs that is --

00:40:47.990 --> 00:40:52.760
&gt;&gt;Matthew McNulty: So the difference here
is that you're using the same technologies

00:40:52.760 --> 00:40:54.140
you already use on the Web today.

00:40:54.140 --> 00:40:55.140
&gt;&gt;Alex Komoroske: Yes.

00:40:55.140 --> 00:40:56.350
&gt;&gt;Matthew McNulty: You are using HTML, CSS
and JavaScript.

00:40:56.350 --> 00:41:01.760
There is actually nothing new here, whereas
XSLT, I did a whole framework in XSLT years

00:41:01.760 --> 00:41:02.760
ago.

00:41:02.760 --> 00:41:08.070
And that was -- to debug that was one of the
more insane things I have ever done in my

00:41:08.070 --> 00:41:09.070
life.

00:41:09.070 --> 00:41:10.070
&gt;&gt;&gt; Great, thank you.

00:41:10.070 --> 00:41:11.370
&gt;&gt;Alex Komoroske: We're actually out of time,
I believe.

00:41:11.370 --> 00:41:14.890
If you have more questions, you can come find
us up here after the talk.

00:41:14.890 --> 00:41:15.890
Thanks.

00:41:15.890 --> 00:41:16.070
[ Applause ]

