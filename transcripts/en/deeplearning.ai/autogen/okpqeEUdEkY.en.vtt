WEBVTT
Kind: captions
Language: en

00:00:00.979 --> 00:00:03.110 align:start position:0%
 
we've<00:00:01.979><c> talked</c><00:00:02.220><c> about</c><00:00:02.370><c> how</c><00:00:02.639><c> vectorization</c>

00:00:03.110 --> 00:00:03.120 align:start position:0%
we've talked about how vectorization
 

00:00:03.120 --> 00:00:04.610 align:start position:0%
we've talked about how vectorization
lets<00:00:03.750><c> you</c><00:00:03.870><c> speed</c><00:00:04.140><c> up</c><00:00:04.170><c> your</c><00:00:04.380><c> code</c>

00:00:04.610 --> 00:00:04.620 align:start position:0%
lets you speed up your code
 

00:00:04.620 --> 00:00:06.889 align:start position:0%
lets you speed up your code
significantly<00:00:05.339><c> in</c><00:00:05.940><c> this</c><00:00:06.240><c> video</c><00:00:06.540><c> we'll</c><00:00:06.750><c> talk</c>

00:00:06.889 --> 00:00:06.899 align:start position:0%
significantly in this video we'll talk
 

00:00:06.899 --> 00:00:08.240 align:start position:0%
significantly in this video we'll talk
about<00:00:06.960><c> how</c><00:00:07.170><c> you</c><00:00:07.379><c> can</c><00:00:07.560><c> vectorize</c><00:00:07.740><c> your</c>

00:00:08.240 --> 00:00:08.250 align:start position:0%
about how you can vectorize your
 

00:00:08.250 --> 00:00:10.820 align:start position:0%
about how you can vectorize your
implementation<00:00:08.940><c> of</c><00:00:09.090><c> logistic</c><00:00:09.840><c> regression</c><00:00:10.320><c> so</c>

00:00:10.820 --> 00:00:10.830 align:start position:0%
implementation of logistic regression so
 

00:00:10.830 --> 00:00:12.620 align:start position:0%
implementation of logistic regression so
they<00:00:10.950><c> can</c><00:00:11.099><c> process</c><00:00:11.400><c> the</c><00:00:11.700><c> entire</c><00:00:12.059><c> training</c><00:00:12.360><c> set</c>

00:00:12.620 --> 00:00:12.630 align:start position:0%
they can process the entire training set
 

00:00:12.630 --> 00:00:15.110 align:start position:0%
they can process the entire training set
that<00:00:13.230><c> is</c><00:00:13.410><c> implemented</c><00:00:14.130><c> a</c><00:00:14.190><c> single</c><00:00:14.580><c> iteration</c>

00:00:15.110 --> 00:00:15.120 align:start position:0%
that is implemented a single iteration
 

00:00:15.120 --> 00:00:16.910 align:start position:0%
that is implemented a single iteration
of<00:00:15.210><c> gradient</c><00:00:15.269><c> descent</c><00:00:15.599><c> with</c><00:00:16.350><c> respect</c><00:00:16.740><c> to</c><00:00:16.859><c> an</c>

00:00:16.910 --> 00:00:16.920 align:start position:0%
of gradient descent with respect to an
 

00:00:16.920 --> 00:00:19.460 align:start position:0%
of gradient descent with respect to an
entire<00:00:17.310><c> training</c><00:00:17.609><c> set</c><00:00:17.910><c> without</c><00:00:18.510><c> using</c><00:00:19.080><c> even</c><00:00:19.410><c> a</c>

00:00:19.460 --> 00:00:19.470 align:start position:0%
entire training set without using even a
 

00:00:19.470 --> 00:00:22.820 align:start position:0%
entire training set without using even a
single<00:00:19.710><c> explicit</c><00:00:20.490><c> for</c><00:00:20.760><c> you</c><00:00:21.230><c> I'm</c><00:00:22.230><c> super</c>

00:00:22.820 --> 00:00:22.830 align:start position:0%
single explicit for you I'm super
 

00:00:22.830 --> 00:00:24.500 align:start position:0%
single explicit for you I'm super
excited<00:00:22.890><c> of</c><00:00:23.220><c> this</c><00:00:23.340><c> technique</c><00:00:23.730><c> and</c><00:00:23.970><c> when</c><00:00:24.420><c> we</c>

00:00:24.500 --> 00:00:24.510 align:start position:0%
excited of this technique and when we
 

00:00:24.510 --> 00:00:26.630 align:start position:0%
excited of this technique and when we
talk<00:00:24.689><c> about</c><00:00:24.720><c> neural</c><00:00:25.170><c> network</c><00:00:25.529><c> later</c><00:00:25.830><c> without</c>

00:00:26.630 --> 00:00:26.640 align:start position:0%
talk about neural network later without
 

00:00:26.640 --> 00:00:29.320 align:start position:0%
talk about neural network later without
using<00:00:27.060><c> even</c><00:00:27.330><c> a</c><00:00:27.599><c> single</c><00:00:27.900><c> exclusive</c><00:00:28.710><c> full</c><00:00:29.039><c> loop</c>

00:00:29.320 --> 00:00:29.330 align:start position:0%
using even a single exclusive full loop
 

00:00:29.330 --> 00:00:32.389 align:start position:0%
using even a single exclusive full loop
let's<00:00:30.330><c> get</c><00:00:30.510><c> started</c><00:00:30.900><c> let's</c><00:00:31.189><c> first</c><00:00:32.189><c> examine</c>

00:00:32.389 --> 00:00:32.399 align:start position:0%
let's get started let's first examine
 

00:00:32.399 --> 00:00:35.120 align:start position:0%
let's get started let's first examine
the<00:00:33.030><c> forward</c><00:00:33.450><c> propagation</c><00:00:33.899><c> step</c><00:00:34.410><c> of</c><00:00:34.649><c> logistic</c>

00:00:35.120 --> 00:00:35.130 align:start position:0%
the forward propagation step of logistic
 

00:00:35.130 --> 00:00:37.010 align:start position:0%
the forward propagation step of logistic
regression<00:00:35.640><c> so</c><00:00:36.090><c> if</c><00:00:36.360><c> you</c><00:00:36.450><c> have</c><00:00:36.570><c> M</c><00:00:36.780><c> training</c>

00:00:37.010 --> 00:00:37.020 align:start position:0%
regression so if you have M training
 

00:00:37.020 --> 00:00:39.619 align:start position:0%
regression so if you have M training
examples<00:00:37.260><c> then</c><00:00:38.040><c> to</c><00:00:38.670><c> make</c><00:00:38.879><c> a</c><00:00:38.910><c> prediction</c><00:00:39.420><c> on</c>

00:00:39.619 --> 00:00:39.629 align:start position:0%
examples then to make a prediction on
 

00:00:39.629 --> 00:00:41.360 align:start position:0%
examples then to make a prediction on
the<00:00:39.690><c> first</c><00:00:39.960><c> example</c><00:00:40.290><c> you</c><00:00:40.680><c> need</c><00:00:40.829><c> to</c><00:00:41.010><c> compute</c>

00:00:41.360 --> 00:00:41.370 align:start position:0%
the first example you need to compute
 

00:00:41.370 --> 00:00:44.630 align:start position:0%
the first example you need to compute
that<00:00:41.610><c> and</c><00:00:42.030><c> compute</c><00:00:42.629><c> Z</c><00:00:43.020><c> on</c><00:00:43.520><c> using</c><00:00:44.520><c> this</c>

00:00:44.630 --> 00:00:44.640 align:start position:0%
that and compute Z on using this
 

00:00:44.640 --> 00:00:46.310 align:start position:0%
that and compute Z on using this
familiar<00:00:44.910><c> formula</c><00:00:45.450><c> then</c><00:00:45.899><c> compute</c><00:00:46.289><c> the</c>

00:00:46.310 --> 00:00:46.320 align:start position:0%
familiar formula then compute the
 

00:00:46.320 --> 00:00:48.560 align:start position:0%
familiar formula then compute the
activation<00:00:47.100><c> to</c><00:00:47.399><c> compute</c><00:00:47.730><c> y</c><00:00:47.879><c> hat</c><00:00:48.120><c> in</c><00:00:48.300><c> the</c><00:00:48.360><c> first</c>

00:00:48.560 --> 00:00:48.570 align:start position:0%
activation to compute y hat in the first
 

00:00:48.570 --> 00:00:51.319 align:start position:0%
activation to compute y hat in the first
example<00:00:48.890><c> then</c><00:00:49.890><c> to</c><00:00:50.190><c> make</c><00:00:50.430><c> a</c><00:00:50.460><c> prediction</c><00:00:50.730><c> on</c><00:00:51.180><c> the</c>

00:00:51.319 --> 00:00:51.329 align:start position:0%
example then to make a prediction on the
 

00:00:51.329 --> 00:00:53.180 align:start position:0%
example then to make a prediction on the
second<00:00:51.719><c> training</c><00:00:51.870><c> example</c><00:00:51.989><c> you</c><00:00:52.920><c> need</c><00:00:53.100><c> to</c>

00:00:53.180 --> 00:00:53.190 align:start position:0%
second training example you need to
 

00:00:53.190 --> 00:00:55.700 align:start position:0%
second training example you need to
compute<00:00:53.489><c> that</c><00:00:53.809><c> then</c><00:00:54.809><c> to</c><00:00:54.989><c> make</c><00:00:55.110><c> a</c><00:00:55.140><c> prediction</c>

00:00:55.700 --> 00:00:55.710 align:start position:0%
compute that then to make a prediction
 

00:00:55.710 --> 00:00:57.619 align:start position:0%
compute that then to make a prediction
on<00:00:56.039><c> the</c><00:00:56.129><c> third</c><00:00:56.340><c> example</c><00:00:56.850><c> you</c><00:00:57.030><c> need</c><00:00:57.210><c> to</c><00:00:57.329><c> compute</c>

00:00:57.619 --> 00:00:57.629 align:start position:0%
on the third example you need to compute
 

00:00:57.629 --> 00:01:00.049 align:start position:0%
on the third example you need to compute
that<00:00:57.899><c> and</c><00:00:58.230><c> so</c><00:00:58.739><c> on</c><00:00:58.949><c> and</c><00:00:59.160><c> you</c><00:00:59.219><c> might</c><00:00:59.489><c> need</c><00:00:59.730><c> to</c><00:00:59.910><c> do</c>

00:01:00.049 --> 00:01:00.059 align:start position:0%
that and so on and you might need to do
 

00:01:00.059 --> 00:01:03.009 align:start position:0%
that and so on and you might need to do
this<00:01:00.210><c> M</c><00:01:00.420><c> times</c><00:01:00.809><c> of</c><00:01:01.079><c> your</c><00:01:01.260><c> M</c><00:01:01.469><c> training</c><00:01:02.100><c> examples</c>

00:01:03.009 --> 00:01:03.019 align:start position:0%
this M times of your M training examples
 

00:01:03.019 --> 00:01:06.620 align:start position:0%
this M times of your M training examples
so<00:01:04.019><c> it</c><00:01:04.140><c> turns</c><00:01:04.350><c> out</c><00:01:04.589><c> that</c><00:01:04.860><c> in</c><00:01:05.129><c> order</c><00:01:05.339><c> to</c><00:01:05.850><c> carry</c>

00:01:06.620 --> 00:01:06.630 align:start position:0%
so it turns out that in order to carry
 

00:01:06.630 --> 00:01:08.780 align:start position:0%
so it turns out that in order to carry
out<00:01:06.840><c> the</c><00:01:07.170><c> forward</c><00:01:07.530><c> propagation</c><00:01:07.979><c> step</c><00:01:08.400><c> that</c><00:01:08.610><c> is</c>

00:01:08.780 --> 00:01:08.790 align:start position:0%
out the forward propagation step that is
 

00:01:08.790 --> 00:01:11.780 align:start position:0%
out the forward propagation step that is
to<00:01:09.060><c> compute</c><00:01:09.510><c> these</c><00:01:10.010><c> predictions</c><00:01:11.010><c> on</c><00:01:11.250><c> all</c><00:01:11.549><c> M</c>

00:01:11.780 --> 00:01:11.790 align:start position:0%
to compute these predictions on all M
 

00:01:11.790 --> 00:01:14.420 align:start position:0%
to compute these predictions on all M
training<00:01:12.270><c> examples</c><00:01:12.590><c> there</c><00:01:13.590><c> is</c><00:01:13.740><c> a</c><00:01:13.770><c> way</c><00:01:14.010><c> to</c><00:01:14.070><c> do</c>

00:01:14.420 --> 00:01:14.430 align:start position:0%
training examples there is a way to do
 

00:01:14.430 --> 00:01:17.469 align:start position:0%
training examples there is a way to do
so<00:01:14.700><c> without</c><00:01:15.060><c> needing</c><00:01:15.720><c> an</c><00:01:15.900><c> explicit</c><00:01:16.590><c> for</c><00:01:17.009><c> loop</c>

00:01:17.469 --> 00:01:17.479 align:start position:0%
so without needing an explicit for loop
 

00:01:17.479 --> 00:01:20.630 align:start position:0%
so without needing an explicit for loop
let's<00:01:18.479><c> see</c><00:01:18.659><c> how</c><00:01:18.780><c> you</c><00:01:18.840><c> can</c><00:01:19.020><c> do</c><00:01:19.170><c> it</c><00:01:19.640><c> first</c>

00:01:20.630 --> 00:01:20.640 align:start position:0%
let's see how you can do it first
 

00:01:20.640 --> 00:01:22.789 align:start position:0%
let's see how you can do it first
remember<00:01:21.210><c> that</c><00:01:21.659><c> we</c><00:01:21.869><c> define</c><00:01:22.290><c> the</c><00:01:22.500><c> matrix</c>

00:01:22.789 --> 00:01:22.799 align:start position:0%
remember that we define the matrix
 

00:01:22.799 --> 00:01:26.870 align:start position:0%
remember that we define the matrix
capital<00:01:23.640><c> X</c><00:01:23.939><c> to</c><00:01:24.299><c> be</c><00:01:24.479><c> your</c><00:01:25.110><c> training</c><00:01:25.530><c> inputs</c><00:01:26.100><c> you</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
capital X to be your training inputs you
 

00:01:26.880 --> 00:01:29.359 align:start position:0%
capital X to be your training inputs you
will<00:01:26.970><c> stack</c><00:01:27.240><c> together</c><00:01:27.720><c> in</c><00:01:28.110><c> different</c><00:01:28.770><c> columns</c>

00:01:29.359 --> 00:01:29.369 align:start position:0%
will stack together in different columns
 

00:01:29.369 --> 00:01:33.429 align:start position:0%
will stack together in different columns
like<00:01:29.610><c> this</c><00:01:29.720><c> all</c><00:01:30.720><c> right</c><00:01:30.810><c> so</c><00:01:31.110><c> this</c><00:01:31.320><c> is</c><00:01:31.530><c> a</c><00:01:31.700><c> matrix</c>

00:01:33.429 --> 00:01:33.439 align:start position:0%
like this all right so this is a matrix
 

00:01:33.439 --> 00:01:39.080 align:start position:0%
like this all right so this is a matrix
that<00:01:34.439><c> is</c><00:01:34.500><c> a</c><00:01:35.070><c> n</c><00:01:35.280><c> X</c><00:01:36.090><c> by</c><00:01:36.930><c> M</c><00:01:37.200><c> matrix</c><00:01:38.100><c> so</c><00:01:38.579><c> I'm</c><00:01:38.670><c> writing</c>

00:01:39.080 --> 00:01:39.090 align:start position:0%
that is a n X by M matrix so I'm writing
 

00:01:39.090 --> 00:01:42.230 align:start position:0%
that is a n X by M matrix so I'm writing
this<00:01:39.210><c> as</c><00:01:39.570><c> a</c><00:01:39.710><c> Python</c><00:01:40.710><c> numpy</c><00:01:41.070><c> shape</c><00:01:41.759><c> but</c><00:01:42.030><c> this</c>

00:01:42.230 --> 00:01:42.240 align:start position:0%
this as a Python numpy shape but this
 

00:01:42.240 --> 00:01:46.219 align:start position:0%
this as a Python numpy shape but this
just<00:01:42.420><c> means</c><00:01:42.630><c> that</c><00:01:42.869><c> you</c><00:01:43.079><c> know</c><00:01:43.170><c> X</c><00:01:43.380><c> is</c><00:01:43.590><c> a</c><00:01:43.790><c> and</c><00:01:44.790><c> X</c><00:01:45.450><c> by</c>

00:01:46.219 --> 00:01:46.229 align:start position:0%
just means that you know X is a and X by
 

00:01:46.229 --> 00:01:51.050 align:start position:0%
just means that you know X is a and X by
M<00:01:47.119><c> dimensional</c><00:01:48.119><c> matrix</c><00:01:49.460><c> now</c><00:01:50.460><c> the</c><00:01:50.520><c> first</c><00:01:50.939><c> thing</c>

00:01:51.050 --> 00:01:51.060 align:start position:0%
M dimensional matrix now the first thing
 

00:01:51.060 --> 00:01:53.660 align:start position:0%
M dimensional matrix now the first thing
I<00:01:51.149><c> want</c><00:01:51.270><c> to</c><00:01:51.360><c> do</c><00:01:51.479><c> is</c><00:01:51.780><c> show</c><00:01:52.649><c> how</c><00:01:52.890><c> you</c><00:01:52.950><c> can</c><00:01:53.220><c> compute</c>

00:01:53.660 --> 00:01:53.670 align:start position:0%
I want to do is show how you can compute
 

00:01:53.670 --> 00:01:58.580 align:start position:0%
I want to do is show how you can compute
Z<00:01:54.000><c> 1</c><00:01:54.180><c> Z</c><00:01:54.600><c> 2</c><00:01:54.630><c> Z</c><00:01:54.840><c> 3</c><00:01:55.229><c> and</c><00:01:55.560><c> so</c><00:01:55.979><c> on</c><00:01:56.189><c> all</c><00:01:56.460><c> in</c><00:01:57.270><c> one</c><00:01:57.990><c> step</c><00:01:58.320><c> is</c>

00:01:58.580 --> 00:01:58.590 align:start position:0%
Z 1 Z 2 Z 3 and so on all in one step is
 

00:01:58.590 --> 00:02:02.090 align:start position:0%
Z 1 Z 2 Z 3 and so on all in one step is
act<00:01:58.979><c> with</c><00:01:59.310><c> one</c><00:01:59.729><c> line</c><00:02:00.000><c> of</c><00:02:00.030><c> code</c><00:02:00.500><c> so</c><00:02:01.500><c> I'm</c><00:02:01.799><c> going</c>

00:02:02.090 --> 00:02:02.100 align:start position:0%
act with one line of code so I'm going
 

00:02:02.100 --> 00:02:08.499 align:start position:0%
act with one line of code so I'm going
to<00:02:03.469><c> construct</c><00:02:04.469><c> a</c><00:02:05.630><c> 1</c><00:02:06.630><c> by</c><00:02:06.869><c> M</c>

00:02:08.499 --> 00:02:08.509 align:start position:0%
to construct a 1 by M
 

00:02:08.509 --> 00:02:11.740 align:start position:0%
to construct a 1 by M
matrix<00:02:09.110><c> is</c><00:02:09.530><c> really</c><00:02:09.860><c> a</c><00:02:09.890><c> row</c><00:02:10.189><c> vector</c><00:02:10.689><c> where</c><00:02:11.689><c> I'm</c>

00:02:11.740 --> 00:02:11.750 align:start position:0%
matrix is really a row vector where I'm
 

00:02:11.750 --> 00:02:15.880 align:start position:0%
matrix is really a row vector where I'm
going<00:02:11.900><c> to</c><00:02:11.989><c> compute</c><00:02:12.319><c> Z</c><00:02:12.620><c> 1</c><00:02:12.829><c> Z</c><00:02:13.310><c> 2</c><00:02:13.340><c> and</c><00:02:13.790><c> so</c><00:02:14.569><c> on</c><00:02:14.890><c> down</c>

00:02:15.880 --> 00:02:15.890 align:start position:0%
going to compute Z 1 Z 2 and so on down
 

00:02:15.890 --> 00:02:19.809 align:start position:0%
going to compute Z 1 Z 2 and so on down
to<00:02:15.950><c> ZM</c><00:02:16.549><c> o</c><00:02:16.849><c> at</c><00:02:17.510><c> the</c><00:02:17.599><c> same</c><00:02:17.810><c> time</c><00:02:18.220><c> it</c><00:02:19.220><c> turns</c><00:02:19.579><c> out</c>

00:02:19.809 --> 00:02:19.819 align:start position:0%
to ZM o at the same time it turns out
 

00:02:19.819 --> 00:02:22.869 align:start position:0%
to ZM o at the same time it turns out
that<00:02:20.030><c> this</c><00:02:20.209><c> can</c><00:02:20.450><c> be</c><00:02:20.629><c> expressed</c><00:02:20.930><c> as</c><00:02:21.879><c> W</c>

00:02:22.869 --> 00:02:22.879 align:start position:0%
that this can be expressed as W
 

00:02:22.879 --> 00:02:26.830 align:start position:0%
that this can be expressed as W
transpose<00:02:23.379><c> the</c><00:02:24.379><c> capital</c><00:02:24.920><c> matrix</c><00:02:25.310><c> X</c><00:02:25.579><c> plus</c><00:02:26.510><c> an</c>

00:02:26.830 --> 00:02:26.840 align:start position:0%
transpose the capital matrix X plus an
 

00:02:26.840 --> 00:02:32.440 align:start position:0%
transpose the capital matrix X plus an
in<00:02:27.530><c> this</c><00:02:27.739><c> vector</c><00:02:28.220><c> B</c><00:02:28.849><c> B</c><00:02:29.390><c> and</c><00:02:30.200><c> so</c><00:02:30.530><c> on</c><00:02:30.670><c> beware</c><00:02:31.670><c> this</c>

00:02:32.440 --> 00:02:32.450 align:start position:0%
in this vector B B and so on beware this
 

00:02:32.450 --> 00:02:36.809 align:start position:0%
in this vector B B and so on beware this
thing<00:02:33.110><c> this</c><00:02:33.609><c> bbbbb</c><00:02:34.609><c> thing</c><00:02:34.909><c> is</c><00:02:35.180><c> a</c><00:02:35.239><c> 1</c><00:02:35.750><c> by</c><00:02:35.959><c> m</c>

00:02:36.809 --> 00:02:36.819 align:start position:0%
thing this bbbbb thing is a 1 by m
 

00:02:36.819 --> 00:02:41.670 align:start position:0%
thing this bbbbb thing is a 1 by m
vector<00:02:37.819><c> or</c><00:02:38.290><c> 1</c><00:02:39.290><c> by</c><00:02:39.439><c> m</c><00:02:39.620><c> matrix</c><00:02:40.400><c> or</c><00:02:40.970><c> that</c><00:02:41.180><c> is</c><00:02:41.329><c> is</c><00:02:41.540><c> a</c>

00:02:41.670 --> 00:02:41.680 align:start position:0%
vector or 1 by m matrix or that is is a
 

00:02:41.680 --> 00:02:48.099 align:start position:0%
vector or 1 by m matrix or that is is a
M<00:02:42.680><c> dimensional</c><00:02:43.659><c> row</c><00:02:44.659><c> vector</c><00:02:45.970><c> so</c><00:02:47.109><c> developable</c>

00:02:48.099 --> 00:02:48.109 align:start position:0%
M dimensional row vector so developable
 

00:02:48.109 --> 00:02:50.680 align:start position:0%
M dimensional row vector so developable
you<00:02:48.349><c> are</c><00:02:48.500><c> with</c><00:02:48.739><c> matrix</c><00:02:49.280><c> multiplication</c><00:02:49.690><c> you</c>

00:02:50.680 --> 00:02:50.690 align:start position:0%
you are with matrix multiplication you
 

00:02:50.690 --> 00:02:57.460 align:start position:0%
you are with matrix multiplication you
might<00:02:51.099><c> see</c><00:02:52.099><c> that</c><00:02:52.400><c> w</c><00:02:53.030><c> transpose</c><00:02:53.239><c> x</c><00:02:54.609><c> 1</c><00:02:55.840><c> x</c><00:02:56.840><c> 2</c><00:02:57.049><c> and</c>

00:02:57.460 --> 00:02:57.470 align:start position:0%
might see that w transpose x 1 x 2 and
 

00:02:57.470 --> 00:03:04.149 align:start position:0%
might see that w transpose x 1 x 2 and
so<00:02:57.560><c> on</c><00:03:00.280><c> through</c><00:03:01.280><c> XM</c><00:03:01.760><c> that</c><00:03:02.690><c> W</c><00:03:03.470><c> transpose</c><00:03:03.950><c> would</c>

00:03:04.149 --> 00:03:04.159 align:start position:0%
so on through XM that W transpose would
 

00:03:04.159 --> 00:03:06.339 align:start position:0%
so on through XM that W transpose would
then<00:03:04.310><c> be</c><00:03:04.459><c> a</c><00:03:04.489><c> row</c><00:03:04.790><c> vector</c><00:03:04.819><c> right</c><00:03:05.750><c> so</c><00:03:05.989><c> this</c><00:03:06.170><c> you</c>

00:03:06.339 --> 00:03:06.349 align:start position:0%
then be a row vector right so this you
 

00:03:06.349 --> 00:03:08.699 align:start position:0%
then be a row vector right so this you
know<00:03:06.379><c> W</c><00:03:06.709><c> transpose</c><00:03:07.099><c> will</c><00:03:07.340><c> be</c><00:03:07.370><c> a</c><00:03:07.519><c> row</c><00:03:07.609><c> vector</c>

00:03:08.699 --> 00:03:08.709 align:start position:0%
know W transpose will be a row vector
 

00:03:08.709 --> 00:03:13.509 align:start position:0%
know W transpose will be a row vector
like<00:03:09.709><c> that</c><00:03:09.920><c> and</c><00:03:10.250><c> so</c><00:03:11.180><c> this</c><00:03:11.810><c> first</c><00:03:12.200><c> term</c><00:03:12.530><c> will</c>

00:03:13.509 --> 00:03:13.519 align:start position:0%
like that and so this first term will
 

00:03:13.519 --> 00:03:19.360 align:start position:0%
like that and so this first term will
evaluate<00:03:13.910><c> to</c><00:03:15.280><c> W</c><00:03:16.280><c> transpose</c><00:03:16.849><c> X</c><00:03:17.120><c> 1</c><00:03:17.889><c> W</c><00:03:18.889><c> transpose</c>

00:03:19.360 --> 00:03:19.370 align:start position:0%
evaluate to W transpose X 1 W transpose
 

00:03:19.370 --> 00:03:25.119 align:start position:0%
evaluate to W transpose X 1 W transpose
X<00:03:19.810><c> 2</c><00:03:20.810><c> and</c><00:03:21.139><c> so</c><00:03:21.169><c> on</c><00:03:22.129><c> dot</c><00:03:23.090><c> dot</c><00:03:23.120><c> dot</c><00:03:23.349><c> W</c><00:03:24.349><c> transpose</c><00:03:24.859><c> X</c>

00:03:25.119 --> 00:03:25.129 align:start position:0%
X 2 and so on dot dot dot W transpose X
 

00:03:25.129 --> 00:03:29.439 align:start position:0%
X 2 and so on dot dot dot W transpose X
M<00:03:25.970><c> and</c><00:03:26.680><c> then</c><00:03:27.680><c> when</c><00:03:27.829><c> you</c><00:03:27.919><c> add</c><00:03:28.099><c> this</c><00:03:28.489><c> second</c><00:03:29.269><c> term</c>

00:03:29.439 --> 00:03:29.449 align:start position:0%
M and then when you add this second term
 

00:03:29.449 --> 00:03:32.710 align:start position:0%
M and then when you add this second term
bbbb<00:03:30.230><c> and</c><00:03:30.440><c> so</c><00:03:30.590><c> on</c><00:03:30.769><c> you</c><00:03:30.980><c> end</c><00:03:31.099><c> up</c><00:03:31.250><c> adding</c><00:03:31.430><c> B</c><00:03:31.849><c> to</c>

00:03:32.710 --> 00:03:32.720 align:start position:0%
bbbb and so on you end up adding B to
 

00:03:32.720 --> 00:03:35.199 align:start position:0%
bbbb and so on you end up adding B to
each<00:03:32.870><c> element</c><00:03:33.410><c> so</c><00:03:33.709><c> you</c><00:03:33.769><c> end</c><00:03:34.010><c> up</c><00:03:34.190><c> with</c><00:03:34.250><c> another</c>

00:03:35.199 --> 00:03:35.209 align:start position:0%
each element so you end up with another
 

00:03:35.209 --> 00:03:38.470 align:start position:0%
each element so you end up with another
1<00:03:35.930><c> by</c><00:03:36.139><c> n</c><00:03:36.379><c> vector</c><00:03:36.879><c> where</c><00:03:37.879><c> that's</c><00:03:38.150><c> the</c><00:03:38.269><c> first</c>

00:03:38.470 --> 00:03:38.480 align:start position:0%
1 by n vector where that's the first
 

00:03:38.480 --> 00:03:40.270 align:start position:0%
1 by n vector where that's the first
element<00:03:38.660><c> that's</c><00:03:39.139><c> the</c><00:03:39.290><c> second</c><00:03:39.590><c> element</c><00:03:39.709><c> and</c><00:03:40.069><c> so</c>

00:03:40.270 --> 00:03:40.280 align:start position:0%
element that's the second element and so
 

00:03:40.280 --> 00:03:41.379 align:start position:0%
element that's the second element and so
on<00:03:40.489><c> and</c><00:03:40.699><c> that's</c><00:03:40.879><c> the</c><00:03:41.000><c> end</c>

00:03:41.379 --> 00:03:41.389 align:start position:0%
on and that's the end
 

00:03:41.389 --> 00:03:43.960 align:start position:0%
on and that's the end
element<00:03:41.870><c> and</c><00:03:42.220><c> if</c><00:03:43.220><c> you</c><00:03:43.340><c> refer</c><00:03:43.699><c> to</c><00:03:43.730><c> the</c>

00:03:43.960 --> 00:03:43.970 align:start position:0%
element and if you refer to the
 

00:03:43.970 --> 00:03:47.939 align:start position:0%
element and if you refer to the
definitions<00:03:44.720><c> above</c><00:03:45.139><c> this</c><00:03:46.040><c> first</c><00:03:46.609><c> element</c><00:03:47.150><c> is</c>

00:03:47.939 --> 00:03:47.949 align:start position:0%
definitions above this first element is
 

00:03:47.949 --> 00:03:51.819 align:start position:0%
definitions above this first element is
exactly<00:03:48.949><c> the</c><00:03:49.609><c> definition</c><00:03:50.120><c> of</c><00:03:50.180><c> Z</c><00:03:50.389><c> 1</c><00:03:50.599><c> the</c><00:03:51.379><c> second</c>

00:03:51.819 --> 00:03:51.829 align:start position:0%
exactly the definition of Z 1 the second
 

00:03:51.829 --> 00:03:54.759 align:start position:0%
exactly the definition of Z 1 the second
element<00:03:51.980><c> is</c><00:03:52.489><c> exactly</c><00:03:53.239><c> the</c><00:03:53.930><c> direction</c><00:03:54.109><c> of</c><00:03:54.409><c> Z</c><00:03:54.560><c> 2</c>

00:03:54.759 --> 00:03:54.769 align:start position:0%
element is exactly the direction of Z 2
 

00:03:54.769 --> 00:03:59.379 align:start position:0%
element is exactly the direction of Z 2
and<00:03:54.980><c> so</c><00:03:55.760><c> on</c><00:03:56.470><c> so</c><00:03:57.470><c> just</c><00:03:57.799><c> as</c><00:03:58.040><c> X</c><00:03:58.400><c> was</c><00:03:59.060><c> what</c><00:03:59.269><c> you</c>

00:03:59.379 --> 00:03:59.389 align:start position:0%
and so on so just as X was what you
 

00:03:59.389 --> 00:04:01.960 align:start position:0%
and so on so just as X was what you
obtained<00:03:59.810><c> when</c><00:04:00.230><c> you</c><00:04:00.440><c> took</c><00:04:01.280><c> your</c><00:04:01.340><c> training</c>

00:04:01.960 --> 00:04:01.970 align:start position:0%
obtained when you took your training
 

00:04:01.970 --> 00:04:04.360 align:start position:0%
obtained when you took your training
examples<00:04:02.419><c> and</c><00:04:02.690><c> stack</c><00:04:03.169><c> them</c><00:04:03.440><c> next</c><00:04:04.280><c> to</c><00:04:04.340><c> each</c>

00:04:04.360 --> 00:04:04.370 align:start position:0%
examples and stack them next to each
 

00:04:04.370 --> 00:04:04.990 align:start position:0%
examples and stack them next to each
other

00:04:04.990 --> 00:04:05.000 align:start position:0%
other
 

00:04:05.000 --> 00:04:07.809 align:start position:0%
other
stack<00:04:05.209><c> them</c><00:04:05.389><c> horizontally</c><00:04:05.750><c> I'm</c><00:04:06.729><c> going</c><00:04:07.729><c> to</c>

00:04:07.809 --> 00:04:07.819 align:start position:0%
stack them horizontally I'm going to
 

00:04:07.819 --> 00:04:11.319 align:start position:0%
stack them horizontally I'm going to
define<00:04:08.180><c> capital</c><00:04:09.139><c> Z</c><00:04:09.519><c> to</c><00:04:10.519><c> be</c><00:04:10.549><c> this</c><00:04:10.940><c> where</c><00:04:11.209><c> you</c>

00:04:11.319 --> 00:04:11.329 align:start position:0%
define capital Z to be this where you
 

00:04:11.329 --> 00:04:13.780 align:start position:0%
define capital Z to be this where you
take<00:04:11.510><c> the</c><00:04:11.569><c> little</c><00:04:12.319><c> lowercase</c><00:04:12.590><c> Z's</c><00:04:13.099><c> and</c><00:04:13.370><c> stack</c>

00:04:13.780 --> 00:04:13.790 align:start position:0%
take the little lowercase Z's and stack
 

00:04:13.790 --> 00:04:17.379 align:start position:0%
take the little lowercase Z's and stack
them<00:04:14.000><c> horizontally</c><00:04:15.400><c> okay</c><00:04:16.400><c> so</c><00:04:16.519><c> we</c><00:04:16.789><c> stack</c><00:04:17.150><c> the</c>

00:04:17.379 --> 00:04:17.389 align:start position:0%
them horizontally okay so we stack the
 

00:04:17.389 --> 00:04:19.420 align:start position:0%
them horizontally okay so we stack the
lowercase<00:04:17.690><c> XS</c><00:04:18.320><c> corresponding</c><00:04:18.979><c> to</c><00:04:19.130><c> different</c>

00:04:19.420 --> 00:04:19.430 align:start position:0%
lowercase XS corresponding to different
 

00:04:19.430 --> 00:04:22.430 align:start position:0%
lowercase XS corresponding to different
training<00:04:20.090><c> examples</c><00:04:21.010><c> horizontally</c>

00:04:22.430 --> 00:04:22.440 align:start position:0%
training examples horizontally
 

00:04:22.440 --> 00:04:24.740 align:start position:0%
training examples horizontally
this<00:04:22.650><c> variable</c><00:04:23.310><c> capital</c><00:04:23.850><c> X</c><00:04:23.940><c> in</c><00:04:24.300><c> the</c><00:04:24.390><c> same</c><00:04:24.570><c> way</c>

00:04:24.740 --> 00:04:24.750 align:start position:0%
this variable capital X in the same way
 

00:04:24.750 --> 00:04:26.330 align:start position:0%
this variable capital X in the same way
when<00:04:24.960><c> you</c><00:04:25.020><c> take</c><00:04:25.230><c> these</c><00:04:25.350><c> lowercase</c><00:04:26.310><c> Z</c>

00:04:26.330 --> 00:04:26.340 align:start position:0%
when you take these lowercase Z
 

00:04:26.340 --> 00:04:28.490 align:start position:0%
when you take these lowercase Z
variables<00:04:27.090><c> and</c><00:04:27.360><c> stack</c><00:04:27.570><c> them</c><00:04:27.750><c> horizontally</c>

00:04:28.490 --> 00:04:28.500 align:start position:0%
variables and stack them horizontally
 

00:04:28.500 --> 00:04:32.060 align:start position:0%
variables and stack them horizontally
you<00:04:29.130><c> get</c><00:04:29.960><c> this</c><00:04:30.960><c> variable</c><00:04:31.440><c> which</c><00:04:31.710><c> I'm</c><00:04:31.860><c> going</c><00:04:31.980><c> to</c>

00:04:32.060 --> 00:04:32.070 align:start position:0%
you get this variable which I'm going to
 

00:04:32.070 --> 00:04:35.150 align:start position:0%
you get this variable which I'm going to
know<00:04:32.250><c> by</c><00:04:32.490><c> capital</c><00:04:33.450><c> Z</c><00:04:33.630><c> and</c><00:04:33.840><c> it</c><00:04:34.410><c> turns</c><00:04:34.710><c> out</c><00:04:34.860><c> that</c>

00:04:35.150 --> 00:04:35.160 align:start position:0%
know by capital Z and it turns out that
 

00:04:35.160 --> 00:04:38.420 align:start position:0%
know by capital Z and it turns out that
in<00:04:35.340><c> order</c><00:04:35.580><c> to</c><00:04:35.820><c> implement</c><00:04:36.330><c> this</c><00:04:36.780><c> the</c><00:04:37.770><c> numpy</c>

00:04:38.420 --> 00:04:38.430 align:start position:0%
in order to implement this the numpy
 

00:04:38.430 --> 00:04:44.500 align:start position:0%
in order to implement this the numpy
command<00:04:38.880><c> is</c><00:04:39.120><c> capital</c><00:04:39.810><c> Z</c><00:04:40.020><c> equals</c><00:04:40.470><c> MP</c><00:04:41.570><c> dot</c><00:04:43.340><c> W</c><00:04:44.340><c> dot</c>

00:04:44.500 --> 00:04:44.510 align:start position:0%
command is capital Z equals MP dot W dot
 

00:04:44.510 --> 00:04:51.260 align:start position:0%
command is capital Z equals MP dot W dot
t<00:04:45.510><c> w</c><00:04:46.200><c> transpose</c><00:04:46.350><c> x</c><00:04:46.890><c> and</c><00:04:47.850><c> then</c><00:04:48.390><c> plus</c><00:04:48.770><c> B</c><00:04:50.270><c> now</c>

00:04:51.260 --> 00:04:51.270 align:start position:0%
t w transpose x and then plus B now
 

00:04:51.270 --> 00:04:53.960 align:start position:0%
t w transpose x and then plus B now
there<00:04:51.660><c> is</c><00:04:51.750><c> a</c><00:04:51.780><c> subtlety</c><00:04:52.590><c> in</c><00:04:52.890><c> Python</c><00:04:53.610><c> which</c><00:04:53.790><c> is</c>

00:04:53.960 --> 00:04:53.970 align:start position:0%
there is a subtlety in Python which is
 

00:04:53.970 --> 00:04:56.660 align:start position:0%
there is a subtlety in Python which is
that<00:04:54.150><c> here</c><00:04:54.450><c> B</c><00:04:54.900><c> is</c><00:04:54.930><c> a</c><00:04:55.230><c> row</c><00:04:55.620><c> number</c><00:04:56.160><c> or</c><00:04:56.370><c> if</c><00:04:56.550><c> you</c>

00:04:56.660 --> 00:04:56.670 align:start position:0%
that here B is a row number or if you
 

00:04:56.670 --> 00:04:59.120 align:start position:0%
that here B is a row number or if you
want<00:04:56.880><c> to</c><00:04:57.060><c> say</c><00:04:57.240><c> you</c><00:04:57.780><c> know</c><00:04:57.870><c> one</c><00:04:58.560><c> by</c><00:04:58.710><c> one</c><00:04:58.920><c> matrix</c>

00:04:59.120 --> 00:04:59.130 align:start position:0%
want to say you know one by one matrix
 

00:04:59.130 --> 00:05:01.940 align:start position:0%
want to say you know one by one matrix
was<00:04:59.580><c> just</c><00:04:59.790><c> a</c><00:04:59.850><c> normal</c><00:05:00.060><c> real</c><00:05:00.450><c> number</c><00:05:00.870><c> but</c><00:05:01.590><c> when</c>

00:05:01.940 --> 00:05:01.950 align:start position:0%
was just a normal real number but when
 

00:05:01.950 --> 00:05:05.870 align:start position:0%
was just a normal real number but when
you<00:05:02.160><c> add</c><00:05:02.430><c> this</c><00:05:03.360><c> vector</c><00:05:04.350><c> to</c><00:05:05.040><c> this</c><00:05:05.190><c> real</c><00:05:05.460><c> number</c>

00:05:05.870 --> 00:05:05.880 align:start position:0%
you add this vector to this real number
 

00:05:05.880 --> 00:05:08.240 align:start position:0%
you add this vector to this real number
Python<00:05:06.840><c> automatically</c><00:05:07.500><c> takes</c><00:05:07.800><c> this</c><00:05:08.010><c> real</c>

00:05:08.240 --> 00:05:08.250 align:start position:0%
Python automatically takes this real
 

00:05:08.250 --> 00:05:11.150 align:start position:0%
Python automatically takes this real
number<00:05:08.550><c> B</c><00:05:08.760><c> and</c><00:05:08.970><c> expand</c><00:05:09.450><c> it</c><00:05:09.630><c> out</c><00:05:09.780><c> to</c><00:05:10.470><c> this</c><00:05:10.680><c> 1</c><00:05:10.950><c> by</c>

00:05:11.150 --> 00:05:11.160 align:start position:0%
number B and expand it out to this 1 by
 

00:05:11.160 --> 00:05:14.750 align:start position:0%
number B and expand it out to this 1 by
M<00:05:11.430><c> row</c><00:05:11.730><c> vector</c><00:05:12.410><c> so</c><00:05:13.410><c> in</c><00:05:13.560><c> case</c><00:05:13.770><c> this</c><00:05:14.040><c> operation</c>

00:05:14.750 --> 00:05:14.760 align:start position:0%
M row vector so in case this operation
 

00:05:14.760 --> 00:05:17.470 align:start position:0%
M row vector so in case this operation
seems<00:05:15.120><c> will</c><00:05:15.330><c> be</c><00:05:15.450><c> mysterious</c><00:05:16.080><c> this</c><00:05:16.680><c> is</c><00:05:16.860><c> called</c>

00:05:17.470 --> 00:05:17.480 align:start position:0%
seems will be mysterious this is called
 

00:05:17.480 --> 00:05:21.080 align:start position:0%
seems will be mysterious this is called
broadcasting<00:05:18.480><c> in</c><00:05:18.990><c> Python</c><00:05:19.770><c> and</c><00:05:20.010><c> you</c><00:05:20.880><c> don't</c>

00:05:21.080 --> 00:05:21.090 align:start position:0%
broadcasting in Python and you don't
 

00:05:21.090 --> 00:05:22.580 align:start position:0%
broadcasting in Python and you don't
have<00:05:21.240><c> worry</c><00:05:21.540><c> about</c><00:05:21.600><c> the</c><00:05:21.870><c> for</c><00:05:22.020><c> now</c><00:05:22.140><c> we'll</c><00:05:22.410><c> talk</c>

00:05:22.580 --> 00:05:22.590 align:start position:0%
have worry about the for now we'll talk
 

00:05:22.590 --> 00:05:25.000 align:start position:0%
have worry about the for now we'll talk
about<00:05:22.740><c> this</c><00:05:22.980><c> some</c><00:05:23.190><c> more</c><00:05:23.220><c> in</c><00:05:23.580><c> the</c><00:05:23.910><c> next</c><00:05:23.940><c> video</c>

00:05:25.000 --> 00:05:25.010 align:start position:0%
about this some more in the next video
 

00:05:25.010 --> 00:05:27.650 align:start position:0%
about this some more in the next video
but<00:05:26.010><c> the</c><00:05:26.130><c> takeaway</c><00:05:26.430><c> is</c><00:05:26.550><c> that</c><00:05:27.060><c> with</c><00:05:27.240><c> just</c><00:05:27.450><c> one</c>

00:05:27.650 --> 00:05:27.660 align:start position:0%
but the takeaway is that with just one
 

00:05:27.660 --> 00:05:29.240 align:start position:0%
but the takeaway is that with just one
line<00:05:27.840><c> of</c><00:05:27.870><c> code</c><00:05:28.050><c> with</c><00:05:28.380><c> this</c><00:05:28.530><c> line</c><00:05:28.740><c> of</c><00:05:28.770><c> code</c><00:05:29.040><c> you</c>

00:05:29.240 --> 00:05:29.250 align:start position:0%
line of code with this line of code you
 

00:05:29.250 --> 00:05:32.930 align:start position:0%
line of code with this line of code you
can<00:05:29.400><c> can</c><00:05:29.610><c> calculate</c><00:05:30.270><c> capital</c><00:05:30.540><c> Z</c><00:05:31.400><c> and</c><00:05:32.400><c> capital</c>

00:05:32.930 --> 00:05:32.940 align:start position:0%
can can calculate capital Z and capital
 

00:05:32.940 --> 00:05:35.150 align:start position:0%
can can calculate capital Z and capital
Z<00:05:33.150><c> is</c><00:05:33.240><c> going</c><00:05:33.390><c> to</c><00:05:33.480><c> be</c><00:05:33.630><c> a</c><00:05:33.660><c> 1</c><00:05:34.080><c> by</c><00:05:34.200><c> n</c><00:05:34.410><c> matrix</c><00:05:34.890><c> that</c>

00:05:35.150 --> 00:05:35.160 align:start position:0%
Z is going to be a 1 by n matrix that
 

00:05:35.160 --> 00:05:37.280 align:start position:0%
Z is going to be a 1 by n matrix that
contains<00:05:35.340><c> all</c><00:05:35.820><c> of</c><00:05:35.850><c> the</c><00:05:36.150><c> lowercase</c><00:05:36.600><c> disease</c>

00:05:37.280 --> 00:05:37.290 align:start position:0%
contains all of the lowercase disease
 

00:05:37.290 --> 00:05:41.840 align:start position:0%
contains all of the lowercase disease
lowercase<00:05:37.980><c> Z</c><00:05:38.010><c> 1</c><00:05:38.430><c> through</c><00:05:38.790><c> lowercase</c><00:05:39.630><c> Z</c><00:05:39.840><c> M</c><00:05:40.850><c> so</c>

00:05:41.840 --> 00:05:41.850 align:start position:0%
lowercase Z 1 through lowercase Z M so
 

00:05:41.850 --> 00:05:44.720 align:start position:0%
lowercase Z 1 through lowercase Z M so
that<00:05:42.000><c> was</c><00:05:42.150><c> the</c><00:05:42.330><c> hub</c><00:05:42.660><c> of</c><00:05:42.720><c> these</c><00:05:43.020><c> on</c><00:05:43.400><c> values</c><00:05:44.400><c> you</c>

00:05:44.720 --> 00:05:44.730 align:start position:0%
that was the hub of these on values you
 

00:05:44.730 --> 00:05:48.260 align:start position:0%
that was the hub of these on values you
know<00:05:44.880><c> a</c><00:05:45.620><c> write</c><00:05:46.620><c> what</c><00:05:46.860><c> we</c><00:05:47.010><c> like</c><00:05:47.460><c> to</c><00:05:47.490><c> do</c><00:05:47.790><c> next</c><00:05:48.000><c> is</c>

00:05:48.260 --> 00:05:48.270 align:start position:0%
know a write what we like to do next is
 

00:05:48.270 --> 00:05:55.460 align:start position:0%
know a write what we like to do next is
find<00:05:49.140><c> a</c><00:05:49.230><c> way</c><00:05:49.380><c> to</c><00:05:50.280><c> compute</c><00:05:50.790><c> a</c><00:05:51.710><c> 1</c><00:05:52.710><c> a</c><00:05:52.980><c> 2</c><00:05:53.820><c> and</c><00:05:54.419><c> so</c><00:05:54.470><c> on</c>

00:05:55.460 --> 00:05:55.470 align:start position:0%
find a way to compute a 1 a 2 and so on
 

00:05:55.470 --> 00:05:58.600 align:start position:0%
find a way to compute a 1 a 2 and so on
through<00:05:56.340><c> a.m.</c><00:05:56.820><c> or</c><00:05:57.120><c> at</c><00:05:57.750><c> the</c><00:05:57.870><c> same</c><00:05:58.050><c> time</c><00:05:58.320><c> and</c>

00:05:58.600 --> 00:05:58.610 align:start position:0%
through a.m. or at the same time and
 

00:05:58.610 --> 00:06:02.720 align:start position:0%
through a.m. or at the same time and
just<00:05:59.610><c> as</c><00:05:59.760><c> stacking</c><00:06:00.390><c> lowercase</c><00:06:00.840><c> X's</c><00:06:01.730><c> resulted</c>

00:06:02.720 --> 00:06:02.730 align:start position:0%
just as stacking lowercase X's resulted
 

00:06:02.730 --> 00:06:05.810 align:start position:0%
just as stacking lowercase X's resulted
in<00:06:02.970><c> capital</c><00:06:03.930><c> X</c><00:06:04.050><c> and</c><00:06:04.380><c> stacking</c><00:06:04.740><c> means</c><00:06:05.460><c> back</c><00:06:05.700><c> in</c>

00:06:05.810 --> 00:06:05.820 align:start position:0%
in capital X and stacking means back in
 

00:06:05.820 --> 00:06:08.270 align:start position:0%
in capital X and stacking means back in
horizontally<00:06:06.510><c> locate</c><00:06:07.050><c> these</c><00:06:07.290><c> 2,000</c><00:06:07.890><c> Capital</c>

00:06:08.270 --> 00:06:08.280 align:start position:0%
horizontally locate these 2,000 Capital
 

00:06:08.280 --> 00:06:11.090 align:start position:0%
horizontally locate these 2,000 Capital
Z<00:06:08.630><c> stacking</c><00:06:09.630><c> lowercase</c><00:06:10.200><c> J's</c><00:06:10.410><c> is</c><00:06:10.770><c> going</c><00:06:10.980><c> to</c>

00:06:11.090 --> 00:06:11.100 align:start position:0%
Z stacking lowercase J's is going to
 

00:06:11.100 --> 00:06:12.800 align:start position:0%
Z stacking lowercase J's is going to
result<00:06:11.550><c> in</c><00:06:11.669><c> a</c><00:06:11.790><c> new</c><00:06:11.970><c> variable</c><00:06:12.300><c> which</c><00:06:12.450><c> we</c><00:06:12.690><c> will</c>

00:06:12.800 --> 00:06:12.810 align:start position:0%
result in a new variable which we will
 

00:06:12.810 --> 00:06:17.510 align:start position:0%
result in a new variable which we will
define<00:06:13.080><c> as</c><00:06:13.340><c> capital</c><00:06:14.340><c> A</c><00:06:14.550><c> and</c><00:06:15.110><c> in</c><00:06:16.110><c> the</c><00:06:16.530><c> program</c>

00:06:17.510 --> 00:06:17.520 align:start position:0%
define as capital A and in the program
 

00:06:17.520 --> 00:06:19.610 align:start position:0%
define as capital A and in the program
assignment<00:06:18.000><c> you</c><00:06:18.180><c> see</c><00:06:18.419><c> how</c><00:06:18.750><c> to</c><00:06:18.810><c> implement</c><00:06:19.169><c> a</c>

00:06:19.610 --> 00:06:19.620 align:start position:0%
assignment you see how to implement a
 

00:06:19.620 --> 00:06:23.090 align:start position:0%
assignment you see how to implement a
vector-valued<00:06:21.200><c> sigmoid</c><00:06:22.200><c> function</c><00:06:22.620><c> so</c><00:06:22.919><c> that</c>

00:06:23.090 --> 00:06:23.100 align:start position:0%
vector-valued sigmoid function so that
 

00:06:23.100 --> 00:06:27.740 align:start position:0%
vector-valued sigmoid function so that
the<00:06:23.220><c> sigmoid</c><00:06:23.580><c> function</c><00:06:24.050><c> inputs</c><00:06:25.190><c> this</c><00:06:26.750><c> capital</c>

00:06:27.740 --> 00:06:27.750 align:start position:0%
the sigmoid function inputs this capital
 

00:06:27.750 --> 00:06:29.750 align:start position:0%
the sigmoid function inputs this capital
Z<00:06:27.990><c> as</c><00:06:28.260><c> a</c><00:06:28.290><c> variable</c><00:06:28.650><c> and</c><00:06:28.919><c> very</c><00:06:29.190><c> efficiently</c>

00:06:29.750 --> 00:06:29.760 align:start position:0%
Z as a variable and very efficiently
 

00:06:29.760 --> 00:06:33.680 align:start position:0%
Z as a variable and very efficiently
opus<00:06:30.690><c> capital</c><00:06:31.470><c> aids</c><00:06:31.760><c> so</c><00:06:32.760><c> you</c><00:06:32.820><c> see</c><00:06:33.180><c> the</c><00:06:33.300><c> details</c>

00:06:33.680 --> 00:06:33.690 align:start position:0%
opus capital aids so you see the details
 

00:06:33.690 --> 00:06:36.010 align:start position:0%
opus capital aids so you see the details
of<00:06:33.810><c> that</c><00:06:33.930><c> in</c><00:06:33.990><c> the</c><00:06:34.200><c> program</c><00:06:34.530><c> design</c>

00:06:36.010 --> 00:06:36.020 align:start position:0%
of that in the program design
 

00:06:36.020 --> 00:06:39.590 align:start position:0%
of that in the program design
so<00:06:37.020><c> just</c><00:06:37.260><c> a</c><00:06:37.350><c> recap</c><00:06:37.500><c> what</c><00:06:38.490><c> we've</c><00:06:38.640><c> seen</c><00:06:38.880><c> on</c><00:06:39.180><c> this</c>

00:06:39.590 --> 00:06:39.600 align:start position:0%
so just a recap what we've seen on this
 

00:06:39.600 --> 00:06:42.080 align:start position:0%
so just a recap what we've seen on this
slide<00:06:39.840><c> is</c><00:06:40.080><c> that</c><00:06:40.320><c> instead</c><00:06:40.680><c> of</c><00:06:40.830><c> needing</c><00:06:41.280><c> to</c><00:06:41.490><c> loop</c>

00:06:42.080 --> 00:06:42.090 align:start position:0%
slide is that instead of needing to loop
 

00:06:42.090 --> 00:06:45.200 align:start position:0%
slide is that instead of needing to loop
over<00:06:42.300><c> M</c><00:06:42.800><c> training</c><00:06:43.800><c> examples</c><00:06:43.920><c> to</c><00:06:44.580><c> compute</c><00:06:45.060><c> the</c>

00:06:45.200 --> 00:06:45.210 align:start position:0%
over M training examples to compute the
 

00:06:45.210 --> 00:06:48.020 align:start position:0%
over M training examples to compute the
lowercase<00:06:45.360><c> V</c><00:06:46.290><c> and</c><00:06:46.470><c> lowercase</c><00:06:46.800><c> a</c><00:06:47.220><c> one</c><00:06:47.790><c> at</c><00:06:47.940><c> a</c>

00:06:48.020 --> 00:06:48.030 align:start position:0%
lowercase V and lowercase a one at a
 

00:06:48.030 --> 00:06:48.470 align:start position:0%
lowercase V and lowercase a one at a
time

00:06:48.470 --> 00:06:48.480 align:start position:0%
time
 

00:06:48.480 --> 00:06:51.950 align:start position:0%
time
you<00:06:49.050><c> can</c><00:06:49.260><c> implement</c><00:06:49.970><c> this</c><00:06:50.970><c> one</c><00:06:51.360><c> line</c><00:06:51.570><c> of</c><00:06:51.750><c> code</c>

00:06:51.950 --> 00:06:51.960 align:start position:0%
you can implement this one line of code
 

00:06:51.960 --> 00:06:53.690 align:start position:0%
you can implement this one line of code
to<00:06:52.140><c> compute</c><00:06:52.500><c> all</c><00:06:52.680><c> the</c><00:06:52.860><c> Z's</c><00:06:53.070><c> at</c><00:06:53.220><c> the</c><00:06:53.310><c> same</c><00:06:53.490><c> time</c>

00:06:53.690 --> 00:06:53.700 align:start position:0%
to compute all the Z's at the same time
 

00:06:53.700 --> 00:06:57.620 align:start position:0%
to compute all the Z's at the same time
and<00:06:54.000><c> then</c><00:06:54.780><c> this</c><00:06:55.590><c> one</c><00:06:55.980><c> line</c><00:06:56.220><c> of</c><00:06:56.250><c> code</c><00:06:56.450><c> with</c><00:06:57.450><c> them</c>

00:06:57.620 --> 00:06:57.630 align:start position:0%
and then this one line of code with them
 

00:06:57.630 --> 00:06:59.510 align:start position:0%
and then this one line of code with them
appropriate<00:06:58.440><c> implementation</c><00:06:58.620><c> of</c><00:06:59.250><c> lowercase</c>

00:06:59.510 --> 00:06:59.520 align:start position:0%
appropriate implementation of lowercase
 

00:06:59.520 --> 00:07:02.750 align:start position:0%
appropriate implementation of lowercase
Sigma<00:06:59.850><c> to</c><00:07:00.600><c> compute</c><00:07:00.990><c> all</c><00:07:01.230><c> the</c><00:07:01.470><c> lowercase</c><00:07:01.950><c> s</c><00:07:02.430><c> all</c>

00:07:02.750 --> 00:07:02.760 align:start position:0%
Sigma to compute all the lowercase s all
 

00:07:02.760 --> 00:07:04.940 align:start position:0%
Sigma to compute all the lowercase s all
at<00:07:03.030><c> the</c><00:07:03.120><c> same</c><00:07:03.270><c> time</c><00:07:03.330><c> so</c><00:07:04.260><c> this</c><00:07:04.560><c> is</c><00:07:04.710><c> how</c><00:07:04.890><c> you</c>

00:07:04.940 --> 00:07:04.950 align:start position:0%
at the same time so this is how you
 

00:07:04.950 --> 00:07:07.700 align:start position:0%
at the same time so this is how you
implement<00:07:05.730><c> a</c><00:07:05.970><c> vectorized</c><00:07:06.570><c> implementation</c><00:07:07.530><c> of</c>

00:07:07.700 --> 00:07:07.710 align:start position:0%
implement a vectorized implementation of
 

00:07:07.710 --> 00:07:09.410 align:start position:0%
implement a vectorized implementation of
the<00:07:07.800><c> forward</c><00:07:08.130><c> propagation</c><00:07:08.580><c> for</c><00:07:09.030><c> all</c><00:07:09.210><c> M</c>

00:07:09.410 --> 00:07:09.420 align:start position:0%
the forward propagation for all M
 

00:07:09.420 --> 00:07:11.750 align:start position:0%
the forward propagation for all M
training<00:07:09.780><c> examples</c><00:07:09.900><c> at</c><00:07:10.440><c> the</c><00:07:10.530><c> same</c><00:07:10.710><c> time</c><00:07:10.950><c> so</c><00:07:11.700><c> to</c>

00:07:11.750 --> 00:07:11.760 align:start position:0%
training examples at the same time so to
 

00:07:11.760 --> 00:07:13.400 align:start position:0%
training examples at the same time so to
summarize<00:07:12.210><c> you've</c><00:07:12.480><c> just</c><00:07:12.690><c> seen</c><00:07:12.870><c> how</c><00:07:13.140><c> you</c><00:07:13.200><c> can</c>

00:07:13.400 --> 00:07:13.410 align:start position:0%
summarize you've just seen how you can
 

00:07:13.410 --> 00:07:16.220 align:start position:0%
summarize you've just seen how you can
use<00:07:13.770><c> vectorization</c><00:07:14.430><c> to</c><00:07:15.270><c> very</c><00:07:15.690><c> efficiently</c>

00:07:16.220 --> 00:07:16.230 align:start position:0%
use vectorization to very efficiently
 

00:07:16.230 --> 00:07:18.350 align:start position:0%
use vectorization to very efficiently
compute<00:07:16.830><c> all</c><00:07:17.010><c> the</c><00:07:17.310><c> activations</c><00:07:17.970><c> all</c><00:07:18.180><c> the</c>

00:07:18.350 --> 00:07:18.360 align:start position:0%
compute all the activations all the
 

00:07:18.360 --> 00:07:21.250 align:start position:0%
compute all the activations all the
lowercase<00:07:18.930><c> a's</c><00:07:19.410><c> so</c><00:07:20.220><c> that</c><00:07:20.370><c> at</c><00:07:20.550><c> the</c><00:07:20.790><c> same</c><00:07:20.940><c> time</c>

00:07:21.250 --> 00:07:21.260 align:start position:0%
lowercase a's so that at the same time
 

00:07:21.260 --> 00:07:23.570 align:start position:0%
lowercase a's so that at the same time
next<00:07:22.260><c> it</c><00:07:22.440><c> turns</c><00:07:22.650><c> out</c><00:07:22.830><c> you</c><00:07:22.950><c> can</c><00:07:23.100><c> also</c><00:07:23.250><c> use</c>

00:07:23.570 --> 00:07:23.580 align:start position:0%
next it turns out you can also use
 

00:07:23.580 --> 00:07:25.280 align:start position:0%
next it turns out you can also use
vectorization<00:07:24.000><c> to</c><00:07:24.510><c> very</c><00:07:24.750><c> efficiently</c>

00:07:25.280 --> 00:07:25.290 align:start position:0%
vectorization to very efficiently
 

00:07:25.290 --> 00:07:27.980 align:start position:0%
vectorization to very efficiently
compute<00:07:26.070><c> the</c><00:07:26.490><c> backward</c><00:07:27.150><c> propagation</c><00:07:27.810><c> to</c>

00:07:27.980 --> 00:07:27.990 align:start position:0%
compute the backward propagation to
 

00:07:27.990 --> 00:07:30.050 align:start position:0%
compute the backward propagation to
compute<00:07:28.020><c> the</c><00:07:28.650><c> gradient</c><00:07:29.160><c> let's</c><00:07:29.730><c> see</c><00:07:29.850><c> how</c><00:07:30.000><c> you</c>

00:07:30.050 --> 00:07:30.060 align:start position:0%
compute the gradient let's see how you
 

00:07:30.060 --> 00:07:33.440 align:start position:0%
compute the gradient let's see how you
can<00:07:30.240><c> do</c><00:07:30.360><c> that</c><00:07:30.510><c> in</c><00:07:30.750><c> the</c><00:07:30.960><c> next</c><00:07:31.140><c> video</c>

