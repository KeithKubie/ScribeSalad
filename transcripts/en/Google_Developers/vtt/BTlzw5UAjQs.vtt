WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.890
JAKE ARCHIBALD: So fans
of the old Android browser

00:00:03.890 --> 00:00:06.170
will be disappointed
to hear that it's not

00:00:06.170 --> 00:00:08.776
in the latest version
of Android anymore.

00:00:08.776 --> 00:00:09.400
The Chrome is--

00:00:09.400 --> 00:00:09.920
[APPLAUSE]

00:00:09.920 --> 00:00:11.086
JAKE ARCHIBALD: Yeah, great.

00:00:14.701 --> 00:00:15.200
Yeah.

00:00:15.200 --> 00:00:16.670
Sorry about that.

00:00:16.670 --> 00:00:20.180
The default browser
is now Chrome in 4.4.

00:00:20.180 --> 00:00:21.750
But not only that,
but the WebView

00:00:21.750 --> 00:00:23.990
that's used by native
applications-- that's

00:00:23.990 --> 00:00:25.090
now Chrome, as well.

00:00:25.090 --> 00:00:27.880
So you can make native
applications using

00:00:27.880 --> 00:00:30.720
a mixture of the best
of native and mix that

00:00:30.720 --> 00:00:33.190
with the best of the web.

00:00:33.190 --> 00:00:35.310
But what is the
best way to do that?

00:00:35.310 --> 00:00:37.710
And the answers, I
believe, are going

00:00:37.710 --> 00:00:42.030
to vomit out of the mouth
of our next speaker.

00:00:42.030 --> 00:00:43.046
Are you ready to go?

00:00:43.046 --> 00:00:44.170
MATT GAUNT: I hope so, yes.

00:00:44.170 --> 00:00:44.750
JAKE ARCHIBALD: Excellent.

00:00:44.750 --> 00:00:45.250
OK.

00:00:45.250 --> 00:00:46.369
Welcome our next speaker.

00:00:46.369 --> 00:00:47.866
It's Matt Gaunt!

00:00:47.866 --> 00:00:50.361
[APPLAUSE]

00:00:50.361 --> 00:00:51.880
MATT GAUNT: Thank you, everyone.

00:00:51.880 --> 00:00:52.380
Wow.

00:00:52.380 --> 00:00:56.200
What an entrance into a talk--
vomiting out of my mouth.

00:00:56.200 --> 00:00:58.120
Thank you, Jake.

00:00:58.120 --> 00:00:59.620
So yeah, this session
is going to be

00:00:59.620 --> 00:01:03.870
about building mobile apps with
the brand-new Chrome WebView.

00:01:03.870 --> 00:01:05.730
My name is Matthew Gaunt.

00:01:05.730 --> 00:01:10.121
If my clicker would
work-- there we go.

00:01:10.121 --> 00:01:12.120
I'm a developer advocate
from the London office.

00:01:12.120 --> 00:01:13.745
Generally, there
seems to be this trend

00:01:13.745 --> 00:01:15.620
of having stupid
photos of yourself.

00:01:15.620 --> 00:01:17.305
If you've ever seen
Paul Kinlan or Paul

00:01:17.305 --> 00:01:19.920
Lewis doing a
presentation-- yeah.

00:01:19.920 --> 00:01:21.790
I don't know what this face is.

00:01:21.790 --> 00:01:23.510
I wish it didn't exist.

00:01:23.510 --> 00:01:27.569
So I have to publicize
it, apparently.

00:01:27.569 --> 00:01:30.110
Before I start giving this talk,
I have to give a disclaimer.

00:01:30.110 --> 00:01:31.776
I feel like the minute
you start talking

00:01:31.776 --> 00:01:34.310
about bringing web technologies
into a native stack,

00:01:34.310 --> 00:01:36.400
there's instantly
kind of a flame war.

00:01:36.400 --> 00:01:37.810
I don't want to go into that.

00:01:37.810 --> 00:01:39.530
But ultimately, I am
a native developer.

00:01:39.530 --> 00:01:42.300
Before I joined Google, I
largely focused on Android.

00:01:42.300 --> 00:01:45.630
But I did iOS, BlackBerry,
Nokia [? Cube ?].

00:01:45.630 --> 00:01:49.110
And towards kind of the end when
I was working at that company,

00:01:49.110 --> 00:01:52.320
we were doing a lot of stuff
with bringing web technologies

00:01:52.320 --> 00:01:53.690
into our native apps.

00:01:53.690 --> 00:01:56.470
We were using JavaScript
as the back end.

00:01:56.470 --> 00:01:59.050
And then as we started
moving more and more forward,

00:01:59.050 --> 00:02:01.175
we kind of got to this
point where some companies--

00:02:01.175 --> 00:02:03.340
they couldn't do native
apps, things like gambling.

00:02:03.340 --> 00:02:05.340
You're not allowed in the
apps stores with that.

00:02:05.340 --> 00:02:07.280
And our designers were kind
of excited by this point

00:02:07.280 --> 00:02:09.738
because at that point it was
like, well, cool, HTML5, CSS3.

00:02:09.738 --> 00:02:11.230
This is awesome.

00:02:11.230 --> 00:02:14.090
And seeing them, where they've
had years of experience doing

00:02:14.090 --> 00:02:16.170
[? Jatomi ?] and all
these different apps,

00:02:16.170 --> 00:02:19.140
they just ran with
HTML5 and CSS3.

00:02:19.140 --> 00:02:21.797
And for me, I loved
what they were doing.

00:02:21.797 --> 00:02:23.880
The biggest problem that
I had was it's just like,

00:02:23.880 --> 00:02:25.445
well, you're still in the web.

00:02:25.445 --> 00:02:27.153
If you want a presence
in the app store--

00:02:27.153 --> 00:02:29.500
which many people
did-- how do you

00:02:29.500 --> 00:02:31.820
bring this web
stack into an app?

00:02:31.820 --> 00:02:36.270
Because normally, the WebViews,
they kind of are a bit rubbish.

00:02:36.270 --> 00:02:37.770
And that's why I
was really excited,

00:02:37.770 --> 00:02:40.760
because if you didn't hear-- and
Jake's kind of announced it--

00:02:40.760 --> 00:02:43.750
we actually swapped out the
Android WebView with the Chrome

00:02:43.750 --> 00:02:44.620
WebView.

00:02:44.620 --> 00:02:48.650
So we've got M30 now in
KitKat, which is awesome.

00:02:48.650 --> 00:02:53.170
It means that we get this kind
of slightly disappointing score

00:02:53.170 --> 00:02:59.200
of 284, and it gets bumped
up to 424, which is awesome.

00:02:59.200 --> 00:03:00.850
And it's not just
the fact that we

00:03:00.850 --> 00:03:04.330
get HTML5 and CSS3 features
that we didn't have before.

00:03:04.330 --> 00:03:07.060
We've also got the
V8 JavaScript engine,

00:03:07.060 --> 00:03:10.190
which is much faster
than the older WebView.

00:03:10.190 --> 00:03:12.130
But even the more
important thing

00:03:12.130 --> 00:03:16.170
is going to be the DevTools
that you will know and love.

00:03:16.170 --> 00:03:17.605
One of the questions
I always get

00:03:17.605 --> 00:03:19.420
is features that kind
of come with this.

00:03:19.420 --> 00:03:23.430
So it means you get indexedDB,
request animation frame--

00:03:23.430 --> 00:03:27.560
insanely important when it comes
to performance-- SVG filters

00:03:27.560 --> 00:03:28.530
and effects.

00:03:28.530 --> 00:03:31.612
Jake Archibald has done a
fantastic blog post on SVGs,

00:03:31.612 --> 00:03:33.320
and I've seen a number
of things come out

00:03:33.320 --> 00:03:36.030
of it that are awesome.

00:03:36.030 --> 00:03:38.920
Web sockets-- you may not
really think about this,

00:03:38.920 --> 00:03:44.240
but I love this for live
reload, like insanely, a lot.

00:03:44.240 --> 00:03:46.990
And then there's more, but I'm
not going to talk about them.

00:03:46.990 --> 00:03:52.990
So for me, when it comes
to developing mobile web

00:03:52.990 --> 00:03:55.957
apps using the WebView,
it kind of comes down

00:03:55.957 --> 00:03:57.040
to three different things.

00:03:57.040 --> 00:03:58.820
There's the workflow,
which for me

00:03:58.820 --> 00:04:03.780
is really different between
native and web apps.

00:04:03.780 --> 00:04:05.327
I'm going to go
into it in a minute.

00:04:05.327 --> 00:04:07.660
Native features, that's
probably one of the main reasons

00:04:07.660 --> 00:04:09.285
why you're using the
WebView in an app,

00:04:09.285 --> 00:04:11.340
is because you want
access to something more.

00:04:11.340 --> 00:04:13.632
And then you've got,
obviously, the design.

00:04:13.632 --> 00:04:15.090
I don't know if
any of you guys had

00:04:15.090 --> 00:04:16.860
some of the really
early Android devices.

00:04:16.860 --> 00:04:19.410
But if you saw the design
of some of those apps,

00:04:19.410 --> 00:04:21.610
they were kind of cringy.

00:04:21.610 --> 00:04:24.306
And I think one of the
major things that most

00:04:24.306 --> 00:04:25.680
of the mobile
platforms have done

00:04:25.680 --> 00:04:27.520
is they've done
design guidelines.

00:04:27.520 --> 00:04:30.200
And the developers have gone,
OK, cool, I'll follow these

00:04:30.200 --> 00:04:31.610
and produced beautiful apps.

00:04:31.610 --> 00:04:34.710
So how does that apply
in this scenario?

00:04:34.710 --> 00:04:38.320
So let's start with workflow.

00:04:38.320 --> 00:04:41.290
Generally, if you see a
native developer coding,

00:04:41.290 --> 00:04:43.530
they will do this cycle.

00:04:43.530 --> 00:04:46.520
Code, compile, repeat.

00:04:46.520 --> 00:04:48.830
You can arguably say
that we all do the same.

00:04:48.830 --> 00:04:50.955
In the very, very early
days, where we'd sit there,

00:04:50.955 --> 00:04:52.484
we'd write some
code in HTML CSS.

00:04:52.484 --> 00:04:53.900
We go to our
browser, hit refresh.

00:04:53.900 --> 00:04:56.760
And that's our first
web page, done.

00:04:56.760 --> 00:04:58.322
But in the web, we
have live reload.

00:04:58.322 --> 00:05:00.530
And it's insanely helpful
because you just sit there.

00:05:00.530 --> 00:05:03.180
You code away, hit Save,
and then you're done.

00:05:03.180 --> 00:05:08.060
You just watch the effects
just happen before you.

00:05:08.060 --> 00:05:10.770
So who here is
familiar with Gradle?

00:05:10.770 --> 00:05:11.770
Not Gradle, Grunt.

00:05:11.770 --> 00:05:13.770
Start with Grunt.

00:05:13.770 --> 00:05:14.270
OK.

00:05:14.270 --> 00:05:16.010
So about 50%.

00:05:16.010 --> 00:05:19.600
So Grunt is a
JavaScript task runner.

00:05:19.600 --> 00:05:22.959
So you can basically pull
in third-party modules that

00:05:22.959 --> 00:05:24.750
basically will perform
some action for you.

00:05:24.750 --> 00:05:26.291
So you can imagine
you want something

00:05:26.291 --> 00:05:27.970
where when you say,
start my server,

00:05:27.970 --> 00:05:29.620
it will just start
the server for you.

00:05:29.620 --> 00:05:30.810
It will compile your SAS.

00:05:30.810 --> 00:05:33.810
It will minify your
JavaScript, your HTML,

00:05:33.810 --> 00:05:38.640
and just basically take care of
a lot of housekeeping for you.

00:05:38.640 --> 00:05:42.000
So when you come to
native, at the moment,

00:05:42.000 --> 00:05:46.040
we've got Gradle, which is
new in the Android Studio.

00:05:46.040 --> 00:05:49.260
And Gradle is kind of
similar in many respects.

00:05:49.260 --> 00:05:52.590
You pull in plug-ins that
do a particular task.

00:05:52.590 --> 00:05:55.052
So one of the things
that I wanted to do

00:05:55.052 --> 00:05:56.510
was join these two
things together.

00:05:56.510 --> 00:05:58.607
I didn't want to have
to sit there and have

00:05:58.607 --> 00:05:59.440
different workflows.

00:05:59.440 --> 00:06:02.940
I didn't want to compile and
wait for this stuff to happen.

00:06:02.940 --> 00:06:08.800
So with the new WebView, we can
actually get a nice flow going.

00:06:08.800 --> 00:06:19.475
So if I show you
what we've got-- so

00:06:19.475 --> 00:06:20.670
I'll get away from this.

00:06:23.810 --> 00:06:26.160
Oh, stop it.

00:06:26.160 --> 00:06:26.830
There we go.

00:06:26.830 --> 00:06:30.720
So this is a
standard build file.

00:06:30.720 --> 00:06:33.552
So we've got things like
just the Android task, which

00:06:33.552 --> 00:06:35.010
the Android team
have put together.

00:06:35.010 --> 00:06:38.304
And basically, that is
your Android build step.

00:06:38.304 --> 00:06:39.720
Now you might
notice down here, we

00:06:39.720 --> 00:06:43.410
have this notion
of product flavors.

00:06:43.410 --> 00:06:45.610
Now the way you can think
of product flavors--

00:06:45.610 --> 00:06:48.170
the canonical example is someone
has a free and a paid app.

00:06:48.170 --> 00:06:50.500
Free app might pull in adverts.

00:06:50.500 --> 00:06:54.084
The paid one, you
don't get them.

00:06:54.084 --> 00:06:55.500
In this scenario,
well, I want one

00:06:55.500 --> 00:06:56.958
that is going to
be a static build.

00:06:56.958 --> 00:06:59.921
I want all the HTML, JavaScript,
CSS to be in the app.

00:06:59.921 --> 00:07:01.420
And then the other
one, I want to be

00:07:01.420 --> 00:07:02.810
able to do this live reload.

00:07:02.810 --> 00:07:06.370
I want it to be just
running off of my machine.

00:07:06.370 --> 00:07:12.510
So if I show you a
scenario here-- you

00:07:12.510 --> 00:07:14.370
need to see the actual thing.

00:07:14.370 --> 00:07:17.180
So here we've got two
applications, one on the left,

00:07:17.180 --> 00:07:18.790
which is just a static build.

00:07:18.790 --> 00:07:20.623
And then we've got
another one on the right,

00:07:20.623 --> 00:07:23.320
which is my live server.

00:07:23.320 --> 00:07:25.610
And all things willing and
the network playing nice,

00:07:25.610 --> 00:07:28.400
this will work.

00:07:28.400 --> 00:07:30.110
Yeah, there we go.

00:07:30.110 --> 00:07:39.710
So all I have to do
is just hit Save.

00:07:39.710 --> 00:07:43.075
And that will go and update
itself on the other side.

00:07:54.588 --> 00:07:56.550
There we go.

00:07:56.550 --> 00:07:58.530
Now the really nice
thing with this

00:07:58.530 --> 00:08:01.180
is it's surprisingly
simple just to get set up.

00:08:01.180 --> 00:08:02.780
You don't have to do anything.

00:08:02.780 --> 00:08:05.357
You are essentially defining
this product flavor,

00:08:05.357 --> 00:08:06.940
and then you're
switching out the URL.

00:08:06.940 --> 00:08:08.504
There's nothing
else beyond that.

00:08:08.504 --> 00:08:09.920
And the nice thing
with the static

00:08:09.920 --> 00:08:13.720
build is that when
I come to say,

00:08:13.720 --> 00:08:17.700
I want you to build me
a brand-new project.

00:08:17.700 --> 00:08:21.044
Down the bottom, there's just
these small couple of tasks.

00:08:21.044 --> 00:08:22.460
And basically,
what we've got here

00:08:22.460 --> 00:08:26.271
is this little beautiful
piece of code here.

00:08:26.271 --> 00:08:28.270
It's basically saying,
when Android Studio goes,

00:08:28.270 --> 00:08:29.936
I'm going to build
your Android app now.

00:08:29.936 --> 00:08:32.360
Is there anything you want
me to do before I do that?

00:08:32.360 --> 00:08:33.818
It will say, well,
actually, I want

00:08:33.818 --> 00:08:35.518
you to copy my web application.

00:08:35.518 --> 00:08:37.809
And then before it does that,
what you can actually say

00:08:37.809 --> 00:08:40.240
is, well, before you
copy my web application,

00:08:40.240 --> 00:08:45.730
could you actually maybe build
it and run it with Grunt?

00:08:45.730 --> 00:08:50.817
And essentially, that's what
these two steps here are doing.

00:08:50.817 --> 00:08:52.400
And they're really
simple little tasks

00:08:52.400 --> 00:08:55.039
that just say, Grunt, build.

00:08:55.039 --> 00:08:56.330
It goes and performs that task.

00:08:56.330 --> 00:08:58.620
And afterwards, it will
copy it over and give you

00:08:58.620 --> 00:09:00.203
a brand-new build
of your application.

00:09:02.610 --> 00:09:06.370
So for me, this was an insanely
useful workflow because I've

00:09:06.370 --> 00:09:07.921
seen a number of
Cordova applications

00:09:07.921 --> 00:09:09.920
and the workflow with the
command-line interface

00:09:09.920 --> 00:09:13.980
where you kind of just say,
Cordova, build or run Android.

00:09:13.980 --> 00:09:15.790
And it does an entire
compilation step.

00:09:18.770 --> 00:09:21.450
So then once you
start combining this

00:09:21.450 --> 00:09:25.685
with DevTools, which
I'm going to need

00:09:25.685 --> 00:09:31.590
to plug my phone in
for-- there we go.

00:09:42.690 --> 00:09:47.270
So the minute I
plug in my device,

00:09:47.270 --> 00:09:49.030
you notice that
in Chrome Inspect,

00:09:49.030 --> 00:09:53.816
we start seeing my device
turn up with these two blocks.

00:09:53.816 --> 00:09:55.690
Now basically, what this
application is doing

00:09:55.690 --> 00:09:57.430
is displaying
WebView side by side

00:09:57.430 --> 00:09:58.850
because the
performance is better

00:09:58.850 --> 00:10:00.330
for horizontal scrolling.

00:10:00.330 --> 00:10:06.010
But what's really nice is as I
start scrolling my device left

00:10:06.010 --> 00:10:08.460
and right, you'll notice that
the blocks very helpfully

00:10:08.460 --> 00:10:10.990
start moving backwards
and forwards as well.

00:10:13.640 --> 00:10:15.503
So a nice thing with
this is now not only

00:10:15.503 --> 00:10:18.520
are you getting exactly the
same experience that you'd

00:10:18.520 --> 00:10:22.660
get on Desktop, but you are
getting the full features.

00:10:22.660 --> 00:10:24.590
So there's the
office example that I

00:10:24.590 --> 00:10:28.320
could do where I can sit
there and edit slides.

00:10:28.320 --> 00:10:32.540
But the main thing that I think
is slightly more impressive

00:10:32.540 --> 00:10:35.980
is if I go in here and
start saying FPS meter.

00:10:35.980 --> 00:10:38.821
And you can start
seeing there that we're

00:10:38.821 --> 00:10:40.570
getting a similar sort
of thing that we're

00:10:40.570 --> 00:10:43.200
used to across varying
browsers-- well,

00:10:43.200 --> 00:10:46.220
for Chrome DevTools,
should I say--

00:10:46.220 --> 00:10:48.680
which is insanely powerful.

00:10:48.680 --> 00:10:52.140
But what's even more impressive
is as I start going through,

00:10:52.140 --> 00:10:55.650
and I start wanting to
combine different features,

00:10:55.650 --> 00:10:57.910
you'll realize that
DevTools actually

00:10:57.910 --> 00:11:00.245
starts becoming much,
much more useful.

00:11:04.280 --> 00:11:06.396
This whole build step
process-- it still

00:11:06.396 --> 00:11:07.520
works with the old WebView.

00:11:07.520 --> 00:11:08.450
There's no difference.

00:11:08.450 --> 00:11:10.616
The main thing is you can't
get live reload, because

00:11:10.616 --> 00:11:13.180
of the lack of web sockets.

00:11:13.180 --> 00:11:16.300
So the way that I can get round
that is by basically saying,

00:11:16.300 --> 00:11:18.300
I'm going to add
a refresh button,

00:11:18.300 --> 00:11:22.370
exactly the same that I would
do with basically swapping out

00:11:22.370 --> 00:11:23.420
the URLs.

00:11:23.420 --> 00:11:28.660
So yeah.

00:11:28.660 --> 00:11:30.260
There is no DevTools support.

00:11:30.260 --> 00:11:33.195
Unfortunately, the old WebView
is still going to exist.

00:11:33.195 --> 00:11:36.030
And it's still not
going to have DevTools.

00:11:36.030 --> 00:11:39.660
How many of you have heard
of Weinre, of interest?

00:11:39.660 --> 00:11:41.750
Surprisingly, a large
number of hands.

00:11:41.750 --> 00:11:44.510
I feel sorry for you all.

00:11:44.510 --> 00:11:47.390
It is a very, very simple way of
basically debugging in browsers

00:11:47.390 --> 00:11:49.590
that don't have
remote debugging.

00:11:49.590 --> 00:11:54.130
You can get it through MPM
and just add in a script.

00:11:54.130 --> 00:11:57.700
It's not ideal, but it does
give you at least something.

00:11:57.700 --> 00:11:59.590
And then there's JSHybugger.

00:11:59.590 --> 00:12:01.650
Now, if you're using
Cordova application,

00:12:01.650 --> 00:12:04.030
this is basically you can
just have a plug-in that

00:12:04.030 --> 00:12:06.324
will give you
access to DevTools.

00:12:06.324 --> 00:12:07.990
And basically what
it does is it rigs up

00:12:07.990 --> 00:12:11.570
the older WebView in
Android and basically

00:12:11.570 --> 00:12:13.012
makes it appear
in Chrome Inspect

00:12:13.012 --> 00:12:14.470
and works with the
Chrome DevTools.

00:12:14.470 --> 00:12:16.790
So you start getting a
wider support of features

00:12:16.790 --> 00:12:19.610
that Weinre doesn't have.

00:12:19.610 --> 00:12:25.810
So we have our live
reload, which is awesome.

00:12:25.810 --> 00:12:28.000
So the next step is
going to be, well,

00:12:28.000 --> 00:12:31.075
how do I start adding features
into my web application?

00:12:33.631 --> 00:12:34.130
Oh, useful.

00:12:37.470 --> 00:12:40.670
So there's two main methods when
it comes to using the WebView

00:12:40.670 --> 00:12:43.987
and integrating native features.

00:12:43.987 --> 00:12:46.070
If you want to inject
JavaScript into the WebView,

00:12:46.070 --> 00:12:49.570
there's this method,
evaluateJavascript.

00:12:49.570 --> 00:12:51.440
And that's just
basically the same

00:12:51.440 --> 00:12:53.540
as what you'd do if you
were in a normal browser

00:12:53.540 --> 00:12:58.610
and you put JavaScript, colon,
inject or whatever you will.

00:12:58.610 --> 00:13:00.915
To get stuff out of the
WebView, so from JavaScript

00:13:00.915 --> 00:13:03.470
to call out into native
code, you have this method,

00:13:03.470 --> 00:13:04.428
addJavascriptInterface.

00:13:07.040 --> 00:13:15.730
Now, the way this
works is you have

00:13:15.730 --> 00:13:20.016
something similar
to this method here.

00:13:20.016 --> 00:13:21.390
Basically,
addJavascriptInterface

00:13:21.390 --> 00:13:24.359
takes two methods, this
NotificationBindObject,

00:13:24.359 --> 00:13:25.900
which is something
that I've written.

00:13:25.900 --> 00:13:28.700
And it's a really bare-bones
JavaScript object.

00:13:28.700 --> 00:13:30.920
And I'll show you
it in a minute.

00:13:30.920 --> 00:13:33.780
And this name,
NotificationInterface--

00:13:33.780 --> 00:13:37.130
and it's this name that you
will use from JavaScript

00:13:37.130 --> 00:13:38.220
to access it.

00:13:38.220 --> 00:13:48.020
So if I go into
DevTools for my device,

00:13:48.020 --> 00:13:53.223
I can-- let's start again.

00:13:53.223 --> 00:13:55.070
Stop it.

00:13:55.070 --> 00:13:58.760
So if I go
window.NotificationInterface,

00:13:58.760 --> 00:14:02.410
this is where it's been injected
into the WebView itself.

00:14:02.410 --> 00:14:04.630
And this is how the
JavaScript would access it.

00:14:04.630 --> 00:14:07.260
So it's just a plain
old object, and you

00:14:07.260 --> 00:14:10.740
don't get any more
information than that.

00:14:10.740 --> 00:14:13.625
Now if I go into the
NotificationBindObject,

00:14:13.625 --> 00:14:18.000
you notice there's no
extending, no inheritance.

00:14:18.000 --> 00:14:21.990
But the important part is this
method here, showNotification,

00:14:21.990 --> 00:14:26.250
and the annotation just above
it, @JavascriptInterface.

00:14:26.250 --> 00:14:29.550
Now the reason for that
annotation is basically to say,

00:14:29.550 --> 00:14:33.070
I want JavaScript to be
able to call this method.

00:14:33.070 --> 00:14:34.990
It came in for Jelly Bean MR2.

00:14:37.701 --> 00:14:39.450
Essentially, you have
to be a bit mindful.

00:14:39.450 --> 00:14:41.440
Because before that,
technically JavaScript

00:14:41.440 --> 00:14:45.140
could call random methods
you're not intending it to.

00:14:45.140 --> 00:14:47.850
So this method,
showNotification,

00:14:47.850 --> 00:14:49.400
takes a string and a message.

00:14:49.400 --> 00:14:53.900
And the main idea
behind this is--

00:14:53.900 --> 00:15:00.690
if I get rid of my beautiful FPS
meter-- so the idea with this

00:15:00.690 --> 00:15:06.100
is that when I hit this Show
Notification button, which you

00:15:06.100 --> 00:15:09.480
can just about see, you'll
notice there's a little Chrome

00:15:09.480 --> 00:15:12.210
icon that's just
appeared up in the top.

00:15:12.210 --> 00:15:13.710
And it just says,
Chrome Dev Summit.

00:15:13.710 --> 00:15:15.930
You're awesome.

00:15:15.930 --> 00:15:19.470
So the really nice thing with
what we're got in DevTools

00:15:19.470 --> 00:15:22.770
is I don't actually have
to have the JavaScript be

00:15:22.770 --> 00:15:24.070
executing these native methods.

00:15:24.070 --> 00:15:26.740
I can do it directly from here.

00:15:40.051 --> 00:15:43.074
And there is the
new notification.

00:15:43.074 --> 00:15:45.490
Now, that's a really nice way
of working because if you've

00:15:45.490 --> 00:15:48.240
got essentially one part
of your team building

00:15:48.240 --> 00:15:50.650
the native component, and
you're focusing on the website.

00:15:50.650 --> 00:15:52.120
And they can kind of
turn around and go, hey,

00:15:52.120 --> 00:15:52.280
I've just done this.

00:15:52.280 --> 00:15:53.160
This is cool.

00:15:53.160 --> 00:15:54.890
Can you check this out?

00:15:54.890 --> 00:15:57.029
You don't need to be
worrying about whether you've

00:15:57.029 --> 00:15:58.070
got a script to run this.

00:15:58.070 --> 00:15:59.810
You can basically just sit
there and do it there and then

00:15:59.810 --> 00:16:00.393
from DevTools.

00:16:00.393 --> 00:16:02.860
The only thing you need
is the WebView running.

00:16:12.700 --> 00:16:16.170
Covered it.

00:16:16.170 --> 00:16:20.830
In terms of the old WebView--
I keep on clicking this.

00:16:20.830 --> 00:16:23.040
In terms of the
old WebView, there

00:16:23.040 --> 00:16:25.870
is no evaluateJavascript method.

00:16:25.870 --> 00:16:28.312
So you have to use
loadUrl, JavaScript, colon.

00:16:28.312 --> 00:16:30.770
The main reason you'd want to
use evaluateJavascript rather

00:16:30.770 --> 00:16:33.380
than the old method in the new
WebView, it's actually faster.

00:16:33.380 --> 00:16:36.880
Because basically, the WebView
is expecting JavaScript.

00:16:36.880 --> 00:16:39.470
It's going to parse it
slightly differently.

00:16:39.470 --> 00:16:41.689
Kind of think of
it as a fast path.

00:16:41.689 --> 00:16:43.480
And the other one is
obviously-- the minute

00:16:43.480 --> 00:16:46.414
you start using native features,
it needs to be pointed out,

00:16:46.414 --> 00:16:48.080
the fact that you're
going to be running

00:16:48.080 --> 00:16:49.500
on different
versions of Android.

00:16:49.500 --> 00:16:51.599
Stuff comes and goes.

00:16:51.599 --> 00:16:53.140
So you just need to
be aware of that.

00:16:53.140 --> 00:16:54.610
Android Studio is
very good at just

00:16:54.610 --> 00:16:57.390
pointing these
kind of things out.

00:16:57.390 --> 00:16:59.540
As well as that, there's
also WebView samples

00:16:59.540 --> 00:17:01.710
that I've just put a link
down at the bottom for.

00:17:01.710 --> 00:17:03.530
And that has examples
of doing all of this

00:17:03.530 --> 00:17:06.301
as well as shimming out
the loading of JavaScript,

00:17:06.301 --> 00:17:06.800
et cetera.

00:17:12.470 --> 00:17:18.000
So we have a workflow where
we've got live reload working.

00:17:18.000 --> 00:17:20.250
And we have access
to native features,

00:17:20.250 --> 00:17:21.680
and we have access to DevTools.

00:17:21.680 --> 00:17:23.138
So now we've got
a nice environment

00:17:23.138 --> 00:17:26.250
where I can sit and
code in my text editor.

00:17:26.250 --> 00:17:28.610
I can then debug
it with DevTools,

00:17:28.610 --> 00:17:29.900
and it's quite a nice flow.

00:17:29.900 --> 00:17:33.500
We've got similar to what
we'd have on Desktop.

00:17:33.500 --> 00:17:35.010
So the next step
is, what should we

00:17:35.010 --> 00:17:38.210
be concerned about when
it comes to design?

00:17:38.210 --> 00:17:41.210
Generally, each native
platform, one way or the other,

00:17:41.210 --> 00:17:43.725
is going to have a set
of native components.

00:17:47.671 --> 00:17:49.670
And generally, they range
from the small things,

00:17:49.670 --> 00:17:54.080
like check box buttons, to the
much larger composite views.

00:17:54.080 --> 00:17:57.024
And for me, the biggest
risk with web apps

00:17:57.024 --> 00:17:59.190
is generally that they fall
into that uncanny valley

00:17:59.190 --> 00:18:01.648
approach of, well, I'm going
to imitate the native platform

00:18:01.648 --> 00:18:03.650
because that's where I'm living.

00:18:03.650 --> 00:18:06.880
That's what I'm trying to do.

00:18:06.880 --> 00:18:09.370
And generally, I kind
of go down the route of,

00:18:09.370 --> 00:18:11.655
if you want to have native
components or native look

00:18:11.655 --> 00:18:14.500
and feel, then try and
use the native components.

00:18:14.500 --> 00:18:16.746
And don't imitate them.

00:18:16.746 --> 00:18:18.370
If you can't use the
native components,

00:18:18.370 --> 00:18:20.070
then do something different.

00:18:20.070 --> 00:18:21.570
Even if it's something
similar, just

00:18:21.570 --> 00:18:24.105
don't try and copy
it straight out.

00:18:24.105 --> 00:18:26.230
Try and do the fact that
the reason you're using it

00:18:26.230 --> 00:18:27.360
is because it's a nice UX.

00:18:31.279 --> 00:18:33.070
Generally, the main
things that I point out

00:18:33.070 --> 00:18:34.528
that I think web
apps are generally

00:18:34.528 --> 00:18:38.200
going to use-- action
bar as well as tabs.

00:18:38.200 --> 00:18:40.020
And realistically,
it's dead simple

00:18:40.020 --> 00:18:43.650
to actually add this
for Android and iOS.

00:18:43.650 --> 00:18:45.410
You can imagine a
simple case where

00:18:45.410 --> 00:18:49.360
you can have something
similar on both platforms.

00:18:49.360 --> 00:18:51.350
The view pager--
this is essentially

00:18:51.350 --> 00:18:54.424
a way of having full-screen
views either side

00:18:54.424 --> 00:18:55.840
and then swipe
from left to right.

00:18:55.840 --> 00:18:57.339
That's I was using
in DevTools where

00:18:57.339 --> 00:19:02.450
I had the images moving
in Chrome Inspect.

00:19:02.450 --> 00:19:04.952
And then the other common
one is navigation drawer.

00:19:04.952 --> 00:19:07.410
If any of you have checked out
Paul Lewis's weight tracker,

00:19:07.410 --> 00:19:09.222
he's got a similar thing.

00:19:09.222 --> 00:19:10.930
And the main reason
I point this out is I

00:19:10.930 --> 00:19:12.888
think the Android team
have spent a lot of time

00:19:12.888 --> 00:19:15.520
ensuring that certain
paradigms are met with this.

00:19:15.520 --> 00:19:18.141
You'd be surprised the
number of different versions

00:19:18.141 --> 00:19:19.140
of the same thing exist.

00:19:23.260 --> 00:19:28.490
So who here kind of
feels like just creating

00:19:28.490 --> 00:19:30.360
a button on the web
is nice and easy,

00:19:30.360 --> 00:19:33.850
and there shouldn't really be
any kind of thought behind it?

00:19:33.850 --> 00:19:35.630
Everyone?

00:19:35.630 --> 00:19:39.030
So one of the
common things I tend

00:19:39.030 --> 00:19:45.640
to find when it
comes to this is when

00:19:45.640 --> 00:19:48.970
I start touching
these buttons, I just

00:19:48.970 --> 00:19:52.820
start getting this weird blue
state that comes up over it.

00:19:52.820 --> 00:19:54.647
So this one at the
top is an anchor tag.

00:19:54.647 --> 00:19:56.480
The one at the bottom
is just a HTML button.

00:19:56.480 --> 00:20:01.129
I get this weird orange
online on the bottom one.

00:20:01.129 --> 00:20:02.920
And I see this come up
time and time again.

00:20:02.920 --> 00:20:04.700
And to be honest,
depending on the design,

00:20:04.700 --> 00:20:06.140
it can either kind of blend in.

00:20:06.140 --> 00:20:09.350
Or it just really stands out.

00:20:09.350 --> 00:20:16.430
So I'm going to
change these buttons.

00:20:16.430 --> 00:20:20.490
So to get rid of this
blue tap highlight color,

00:20:20.490 --> 00:20:22.740
the main thing you need is
webkit-tap-highlight-color.

00:20:29.330 --> 00:20:30.760
Hit Save.

00:20:30.760 --> 00:20:33.750
And then if I want to get rid
of the orange outline as well,

00:20:33.750 --> 00:20:35.702
we just need to set
outline to zero.

00:20:39.560 --> 00:20:40.430
Go on, update.

00:20:48.040 --> 00:20:51.740
So-- ah.

00:20:51.740 --> 00:20:52.700
I know why.

00:21:05.151 --> 00:21:05.650
All right.

00:21:05.650 --> 00:21:06.780
This time, live reload.

00:21:06.780 --> 00:21:08.930
Go.

00:21:08.930 --> 00:21:12.030
So it's just two simple things.

00:21:12.030 --> 00:21:14.690
But now you can see
that the state just-- it

00:21:14.690 --> 00:21:18.020
just does nothing, which
is exactly what we want.

00:21:18.020 --> 00:21:25.660
From that, you just need to
do-- no-state-button, active.

00:21:25.660 --> 00:21:28.080
So the key here is
just the active state.

00:21:28.080 --> 00:21:29.380
Set background color.

00:21:29.380 --> 00:21:30.698
We're going to go for blue.

00:21:33.510 --> 00:21:40.542
So come on.

00:21:40.542 --> 00:21:41.630
Oh, of course.

00:21:46.991 --> 00:21:47.490
Yep.

00:21:47.490 --> 00:21:49.270
So Grunt should be
taking care of SAS.

00:21:49.270 --> 00:21:51.890
There we go.

00:21:51.890 --> 00:21:52.937
So we've got state.

00:21:52.937 --> 00:21:54.020
Now who thinks we're done?

00:21:56.930 --> 00:22:00.510
Who can say what's missing?

00:22:00.510 --> 00:22:02.370
Anyone?

00:22:02.370 --> 00:22:09.450
So the trick here is if I go and
touch this button and hold it,

00:22:09.450 --> 00:22:12.660
I get that beautiful
little nugget.

00:22:12.660 --> 00:22:15.854
Now, I won't say you should
blanket disable user select,

00:22:15.854 --> 00:22:17.270
because there's a
number of cases,

00:22:17.270 --> 00:22:20.990
like if that was a phone number,
copy and paste is kind of cool.

00:22:20.990 --> 00:22:24.710
It's a text button that I really
wouldn't want that to be there.

00:22:24.710 --> 00:22:32.950
So the simple fix for
that is user-select, none.

00:22:32.950 --> 00:22:37.580
So when that
updates, there we go.

00:22:37.580 --> 00:22:39.910
Nothing.

00:22:39.910 --> 00:22:46.980
Now I don't know about you
guys, but that kind of makes

00:22:46.980 --> 00:22:48.650
me a bit sad, the
fact that I have

00:22:48.650 --> 00:22:52.570
to disable one prefix
thing, one outline,

00:22:52.570 --> 00:22:55.800
and then implement something
completely different

00:22:55.800 --> 00:22:58.210
and then also handle the fact
that I don't want the user

00:22:58.210 --> 00:23:01.230
to copy and paste it
to basically match

00:23:01.230 --> 00:23:02.136
a native button.

00:23:05.112 --> 00:23:07.430
But at the same time,
it kind of sounds

00:23:07.430 --> 00:23:10.220
a bit laborious to pay this
amount of minute detail

00:23:10.220 --> 00:23:11.066
to something.

00:23:11.066 --> 00:23:12.559
But you do it once.

00:23:12.559 --> 00:23:13.100
You're there.

00:23:13.100 --> 00:23:14.639
You're good.

00:23:14.639 --> 00:23:16.180
And you only do it
for the components

00:23:16.180 --> 00:23:17.430
that you have in your web app.

00:23:17.430 --> 00:23:18.961
And ultimately,
I want frameworks

00:23:18.961 --> 00:23:21.210
to start just basically
implementing exactly this kind

00:23:21.210 --> 00:23:24.419
of same thing because
it's essentially really,

00:23:24.419 --> 00:23:25.960
really small little
nuggets of things

00:23:25.960 --> 00:23:29.130
that I see a number
of developers do.

00:23:29.130 --> 00:23:30.320
And it's quite a simple fix.

00:23:33.689 --> 00:23:35.980
And the other thing that I
kind of wanted to talk about

00:23:35.980 --> 00:23:37.880
was to kind of
reinforce this notion

00:23:37.880 --> 00:23:40.470
of not trying to imitate native.

00:23:40.470 --> 00:23:42.451
We've all seen web trends.

00:23:42.451 --> 00:23:43.950
It's kind of one
of the great things

00:23:43.950 --> 00:23:45.042
about the web in general.

00:23:45.042 --> 00:23:47.000
If someone comes up with
this beautiful design,

00:23:47.000 --> 00:23:49.416
and then we start seeing other
designers be inspired by it

00:23:49.416 --> 00:23:53.450
and producing similar kind
of things-- and for me,

00:23:53.450 --> 00:23:57.130
native apps don't move in terms
of trends as fast as the web.

00:23:57.130 --> 00:23:58.650
So why try and imitate native?

00:23:58.650 --> 00:24:01.850
Why not just keep this
going but actually bring it

00:24:01.850 --> 00:24:04.380
to native platforms?

00:24:04.380 --> 00:24:06.590
For me, this is what I
want to see web apps do,

00:24:06.590 --> 00:24:11.240
take the things that
work and make sense

00:24:11.240 --> 00:24:14.540
and then bring them into mobile
apps and show native apps

00:24:14.540 --> 00:24:16.698
the kind of things that
the web is great at.

00:24:20.450 --> 00:24:24.020
So that's kind of what
I wanted to talk about,

00:24:24.020 --> 00:24:26.800
was this notion of having
a nice build process

00:24:26.800 --> 00:24:28.780
where you can have live reload.

00:24:28.780 --> 00:24:30.405
You don't have to
sit in Android Studio

00:24:30.405 --> 00:24:33.340
and constantly
keep on compiling.

00:24:33.340 --> 00:24:37.670
You can have native features
using the injectJavascript as

00:24:37.670 --> 00:24:40.140
well as addJavascriptInterface.

00:24:42.940 --> 00:24:45.030
And then we've kind
of covered design.

00:24:45.030 --> 00:24:48.560
And for me, it's one of things
that from those three things,

00:24:48.560 --> 00:24:50.310
it should be simple
enough to actually get

00:24:50.310 --> 00:24:52.920
going something that didn't
exist with the old WebView.

00:24:52.920 --> 00:24:53.900
You couldn't do this.

00:24:56.840 --> 00:25:01.369
So if you go away from
this talk not really

00:25:01.369 --> 00:25:02.910
remembering any of
this talk, there's

00:25:02.910 --> 00:25:06.120
two things that I want
you to really remember.

00:25:06.120 --> 00:25:10.750
The first one is this uses-sdk
android targetSdkVersion

00:25:10.750 --> 00:25:12.480
equals 19.

00:25:12.480 --> 00:25:16.210
Now the reason for this
is 19 is Android KitKat.

00:25:16.210 --> 00:25:18.380
And if you set it to
anything lower than 19,

00:25:18.380 --> 00:25:22.140
you've basically put the WebView
into a compatibility mode.

00:25:22.140 --> 00:25:25.180
So to avoid any of
the web applications

00:25:25.180 --> 00:25:28.720
from breaking from
Jelly Bean to KitKat,

00:25:28.720 --> 00:25:31.750
we emulated some behavior that
existed in the old WebView,

00:25:31.750 --> 00:25:34.430
so things like
target density DPI.

00:25:34.430 --> 00:25:36.390
It's been dead for a
very, very long time.

00:25:36.390 --> 00:25:38.390
But there are
still apps using it

00:25:38.390 --> 00:25:40.540
and kind of relying
on it for their UI.

00:25:40.540 --> 00:25:44.809
So to rip it out would mean
breaking a load of apps.

00:25:44.809 --> 00:25:47.100
Unfortunately, though, if
you are following everything,

00:25:47.100 --> 00:25:48.900
this can still have
adverse effects

00:25:48.900 --> 00:25:50.790
if it's lingering around.

00:25:50.790 --> 00:25:52.670
You start seeing
differences between the two.

00:25:52.670 --> 00:25:55.765
So make sure you add
targetSdkVersion 19.

00:25:58.840 --> 00:26:00.710
The other thing is
you will want to do

00:26:00.710 --> 00:26:04.090
this
setWebContentsDebuggingEnabled

00:26:04.090 --> 00:26:06.150
to true.

00:26:06.150 --> 00:26:08.649
The main reason for this is
if you don't call this method,

00:26:08.649 --> 00:26:10.690
you won't have access to
DevTools in the WebView.

00:26:10.690 --> 00:26:13.261
It's basically it.

00:26:13.261 --> 00:26:14.510
You don't have to leave it on.

00:26:14.510 --> 00:26:16.020
You can basically
switch this on and off

00:26:16.020 --> 00:26:18.145
depending on whether it's
a debug build of your app

00:26:18.145 --> 00:26:19.729
or whether it's a release build.

00:26:19.729 --> 00:26:22.020
But one way or another, when
you're first starting out,

00:26:22.020 --> 00:26:23.395
you're going to
want to use this.

00:26:27.600 --> 00:26:32.500
So in terms of what the future
looks like for the WebView,

00:26:32.500 --> 00:26:34.590
the old WebView is still
going to be important

00:26:34.590 --> 00:26:36.732
one way or the other.

00:26:36.732 --> 00:26:38.190
It's still the
predominant version,

00:26:38.190 --> 00:26:40.490
like Jelly Bean is the
predominant version of Android

00:26:40.490 --> 00:26:40.990
devices.

00:26:43.710 --> 00:26:46.020
So unfortunately, you still
have to kind of support it,

00:26:46.020 --> 00:26:48.460
unless you're happy to go
for KitKat onwards, which

00:26:48.460 --> 00:26:51.120
I wouldn't blame you if you did.

00:26:51.120 --> 00:26:53.280
And I think at the
moment, updates

00:26:53.280 --> 00:26:56.110
are still tied to Android
releases with the new WebView.

00:26:56.110 --> 00:26:58.710
And generally,
everyone in the team

00:26:58.710 --> 00:27:02.070
wants this to move
to auto-updating.

00:27:02.070 --> 00:27:04.150
We kind of see it as
kind of the one thing

00:27:04.150 --> 00:27:05.870
that we really want to change.

00:27:05.870 --> 00:27:07.370
We just need to
figure out how we're

00:27:07.370 --> 00:27:09.710
going to do it because
basically the WebView is

00:27:09.710 --> 00:27:10.960
part of the Android framework.

00:27:10.960 --> 00:27:13.450
And nothing, at the
moment, changes itself.

00:27:13.450 --> 00:27:18.760
So we're trying to figure
out how we can do it.

00:27:18.760 --> 00:27:21.190
And the other thing is
the Chrome Apps team--

00:27:21.190 --> 00:27:24.770
we're actually bringing in a
lot of the Chrome Apps APIs

00:27:24.770 --> 00:27:27.740
to Cordova as plug-ins.

00:27:27.740 --> 00:27:29.890
So it'll be
interesting to see what

00:27:29.890 --> 00:27:31.920
happens with the usage of that.

00:27:31.920 --> 00:27:33.695
If you've got a
Chrome app already

00:27:33.695 --> 00:27:36.510
that you're relying on native
features that are coming in

00:27:36.510 --> 00:27:40.770
through Chrome Apps API, you can
now start getting it on mobile.

00:27:40.770 --> 00:27:44.020
So there are three talks
I'd say go and check out--

00:27:44.020 --> 00:27:46.600
perfmatters, which
is Tom and Nat.

00:27:46.600 --> 00:27:49.430
They'll be covering things that
basically should help you write

00:27:49.430 --> 00:27:53.330
60 frames per second
apps for the WebView.

00:27:53.330 --> 00:27:55.050
Paul Kinlan will
be covering best UX

00:27:55.050 --> 00:27:56.630
patterns for the mobile web.

00:27:56.630 --> 00:27:58.457
And that's generally
just the things

00:27:58.457 --> 00:28:00.040
that you should be
thinking about when

00:28:00.040 --> 00:28:02.209
you're developing
mobile web apps.

00:28:02.209 --> 00:28:04.000
And then Joe Marini is
going to be covering

00:28:04.000 --> 00:28:07.380
develop Chrome apps
for desktop and mobile.

00:28:07.380 --> 00:28:09.120
So thank you, everyone.

00:28:09.120 --> 00:28:13.895
I've got a set of links,
Chrome docs, Android docs,

00:28:13.895 --> 00:28:15.250
some samples.

00:28:15.250 --> 00:28:17.905
And if you've got a web
application already out there,

00:28:17.905 --> 00:28:19.530
there's a migration
doc which basically

00:28:19.530 --> 00:28:21.460
covers a lot of the
common gotchas when you're

00:28:21.460 --> 00:28:24.470
moving from the old
WebView to the new one.

00:28:24.470 --> 00:28:24.970
So yeah.

00:28:24.970 --> 00:28:25.960
Thank you, everyone.

00:28:25.960 --> 00:28:30.510
[APPLAUSE]

