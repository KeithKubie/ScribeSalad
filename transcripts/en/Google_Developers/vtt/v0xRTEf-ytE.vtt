WEBVTT
Kind: captions
Language: en

00:00:01.180 --> 00:00:02.680
RYAN SCHOEN: Good
morning, everyone.

00:00:02.680 --> 00:00:06.320
My name is Ryan Schoen,
and I'm the product manager

00:00:06.320 --> 00:00:08.320
working on Chrome performance.

00:00:08.320 --> 00:00:10.770
As Darren told you,
the Chrome team

00:00:10.770 --> 00:00:13.830
is dedicated to making a
first class user and developer

00:00:13.830 --> 00:00:15.149
experience on the web.

00:00:15.149 --> 00:00:16.940
And we think that a
very large part of that

00:00:16.940 --> 00:00:18.730
is performance,
enabling you to make

00:00:18.730 --> 00:00:20.860
those really efficient,
really performant, really

00:00:20.860 --> 00:00:23.790
smooth mobile web applications,
so-- I should probably put that

00:00:23.790 --> 00:00:24.789
up.

00:00:24.789 --> 00:00:26.580
What I'm going to do
in the next 20 minutes

00:00:26.580 --> 00:00:29.350
is tell you a
little bit about how

00:00:29.350 --> 00:00:30.720
we're so committed to this goal.

00:00:30.720 --> 00:00:32.340
We have teams
dedicated to making

00:00:32.340 --> 00:00:34.700
that goal a reality for
all developers in a very

00:00:34.700 --> 00:00:35.200
natural way.

00:00:35.200 --> 00:00:36.658
And I want to tell
you a little bit

00:00:36.658 --> 00:00:38.300
about what they've
been working on.

00:00:38.300 --> 00:00:39.716
So I'm going to
start out and talk

00:00:39.716 --> 00:00:42.150
about traditional performance,
in the sense of JavaScript

00:00:42.150 --> 00:00:44.050
operations, and
DOM manipulations.

00:00:44.050 --> 00:00:45.640
And then I want to
spend a lot of time

00:00:45.640 --> 00:00:48.160
talking about rendering
performance, and that 60 frames

00:00:48.160 --> 00:00:49.535
per second goal
that you're going

00:00:49.535 --> 00:00:51.460
to hear a lot about today.

00:00:51.460 --> 00:00:53.470
I want to touch on
energy efficiency,

00:00:53.470 --> 00:00:55.780
and what we're doing to
improve your battery life.

00:00:55.780 --> 00:00:58.239
And then, finally, talk a little
bit about perceived speed,

00:00:58.239 --> 00:00:59.738
because that's
really the experience

00:00:59.738 --> 00:01:01.580
that your users are
going to end up getting.

00:01:04.165 --> 00:01:06.540
So I said I wanted to talk
about traditional performance.

00:01:06.540 --> 00:01:08.950
And usually, when you have
somebody from the Chrome team

00:01:08.950 --> 00:01:10.750
on a stage talking
about performance,

00:01:10.750 --> 00:01:13.870
we talk about JavaScript
operations, DOM manipulation,

00:01:13.870 --> 00:01:16.730
and synthetic benchmarks--
things like Octane, and Kraken.

00:01:16.730 --> 00:01:18.880
And we do want to be
really, really good at that.

00:01:18.880 --> 00:01:21.280
We want to do it really fast.

00:01:21.280 --> 00:01:23.710
But any synthetic
benchmark always

00:01:23.710 --> 00:01:26.210
has pieces of it that
aren't really realistic.

00:01:26.210 --> 00:01:28.922
It's not the experience
that the user gets.

00:01:28.922 --> 00:01:30.380
And earlier this
year, you may have

00:01:30.380 --> 00:01:32.040
heard about a new
benchmark that was

00:01:32.040 --> 00:01:34.560
released called Speedometer.

00:01:34.560 --> 00:01:37.330
And what Speedometer does is
it takes a real world app,

00:01:37.330 --> 00:01:39.830
like a to do list, writes it
up in a bunch of frameworks--

00:01:39.830 --> 00:01:43.096
so Angular, and jQuery, and
React, and a couple others.

00:01:43.096 --> 00:01:45.470
And then runs through it--
adds items to the to do lists,

00:01:45.470 --> 00:01:47.490
checks them off,
removes them-- and tries

00:01:47.490 --> 00:01:49.760
to do that as fast as possible.

00:01:49.760 --> 00:01:51.852
Like I said, all
benchmarks are synthetic,

00:01:51.852 --> 00:01:54.310
but there are parts of this
benchmark that we really liked.

00:01:54.310 --> 00:01:56.700
It was a real app that was
going to be in front of users,

00:01:56.700 --> 00:01:59.760
and so we wanted it to be fast.

00:01:59.760 --> 00:02:02.260
And when we took a look at it,
it was a little embarrassing,

00:02:02.260 --> 00:02:03.920
because Chrome
really wasn't good.

00:02:03.920 --> 00:02:05.336
And you may have
seen some numbers

00:02:05.336 --> 00:02:07.930
in the press that hinted that.

00:02:07.930 --> 00:02:10.780
And so we put a team on
it, and we dedicated work

00:02:10.780 --> 00:02:13.970
to that over the
past six months.

00:02:13.970 --> 00:02:16.570
And obviously, they're allowing
me to be up here talking

00:02:16.570 --> 00:02:18.180
about it, so there's
some good news.

00:02:18.180 --> 00:02:22.090
I'm going to put up a
graph of Speedometer.

00:02:22.090 --> 00:02:24.500
And on the y-axis,
here, you have the time

00:02:24.500 --> 00:02:26.380
that it takes to
complete the benchmark.

00:02:26.380 --> 00:02:29.100
And then on the x-axis is
Chromium revision, essentially,

00:02:29.100 --> 00:02:31.092
as it progresses through time.

00:02:31.092 --> 00:02:32.800
You can see that about
six months ago, we

00:02:32.800 --> 00:02:35.830
were up at-- what is that--
14,000 milliseconds, 14 seconds

00:02:35.830 --> 00:02:37.240
to complete the benchmark.

00:02:37.240 --> 00:02:39.790
And through a couple
of pretty large drops,

00:02:39.790 --> 00:02:41.830
we're now at around
6,000 milliseconds,

00:02:41.830 --> 00:02:43.850
six seconds to complete
that benchmark--

00:02:43.850 --> 00:02:45.990
an improvement of over 2x.

00:02:45.990 --> 00:02:48.530
I think this is on a Mac, but
you have the same performance

00:02:48.530 --> 00:02:50.715
improvement across
every platform.

00:02:50.715 --> 00:02:52.340
And so we're really
excited about this,

00:02:52.340 --> 00:02:54.770
because if your
JavaScript is anything

00:02:54.770 --> 00:02:56.610
like the type of
JavaScript you see

00:02:56.610 --> 00:02:58.110
in those frameworks--
or better yet,

00:02:58.110 --> 00:02:59.190
you take advantage
of one of those

00:02:59.190 --> 00:03:01.475
frameworks-- you're going
to get that performance

00:03:01.475 --> 00:03:02.100
boost for free.

00:03:02.100 --> 00:03:04.600
Your users are going to get
that performance boost for free.

00:03:04.600 --> 00:03:07.220
So we think that's really great.

00:03:07.220 --> 00:03:09.535
But as I hinted at earlier,
this is only really

00:03:09.535 --> 00:03:10.910
one part of the
performance gain.

00:03:10.910 --> 00:03:12.340
And from talking
to a lot of you,

00:03:12.340 --> 00:03:13.690
we know that what
you really care about

00:03:13.690 --> 00:03:14.965
is that 60 frames per second.

00:03:14.965 --> 00:03:17.130
I think Darren mentioned it,
I'm going to mention it a bunch.

00:03:17.130 --> 00:03:19.713
You're going to keep hearing it
throughout today and tomorrow.

00:03:19.713 --> 00:03:22.460
And I want to be really
precise about that.

00:03:22.460 --> 00:03:25.180
Because while 60 frames
per second is a number,

00:03:25.180 --> 00:03:27.426
it's not always clear
what web content we're

00:03:27.426 --> 00:03:29.800
talking about when we say 60
frames per second, and doing

00:03:29.800 --> 00:03:31.820
what operations, and
on what mobile devices,

00:03:31.820 --> 00:03:33.530
or what devices at all.

00:03:33.530 --> 00:03:36.116
Reading Wikipedia
on a Nexus 6 is

00:03:36.116 --> 00:03:37.740
going to be a very
different experience

00:03:37.740 --> 00:03:39.750
from playing a 3D
game on something

00:03:39.750 --> 00:03:43.250
like a Galaxy Nexus
or a lower-end device.

00:03:43.250 --> 00:03:45.350
And so to be
explicit, our goal is

00:03:45.350 --> 00:03:48.310
to make 60 frames per second
a reality on all content

00:03:48.310 --> 00:03:50.060
and on all devices.

00:03:50.060 --> 00:03:51.867
And that's a pretty
large goal for Chrome.

00:03:51.867 --> 00:03:54.200
We're on a lot of devices,
with a lot of different GPUs,

00:03:54.200 --> 00:03:55.330
and a lot of
different processors.

00:03:55.330 --> 00:03:57.250
And so we know that
that's an ambitious goal,

00:03:57.250 --> 00:03:58.340
and I hope that
you'll excuse me when

00:03:58.340 --> 00:04:00.030
I say that we're not there yet.

00:04:00.030 --> 00:04:03.570
But we are making pretty
incredible progress.

00:04:03.570 --> 00:04:07.320
So to help frame this problem
a little bit easier for Chrome

00:04:07.320 --> 00:04:09.480
developers-- the
engineers who work

00:04:09.480 --> 00:04:10.840
on Chrome-- we flip it around.

00:04:10.840 --> 00:04:12.423
And we don't say 60
frames per second,

00:04:12.423 --> 00:04:14.950
but we talk about frame
time-- how much time

00:04:14.950 --> 00:04:16.899
does it take the CPU
to generate everything

00:04:16.899 --> 00:04:19.845
that it has to do for a frame
and get it out onto the screen?

00:04:19.845 --> 00:04:21.220
And so 60 frames
per second-- you

00:04:21.220 --> 00:04:23.490
do the math-- that works
out to 16.6 milliseconds.

00:04:23.490 --> 00:04:25.830
That's the budget that
we have to do whatever

00:04:25.830 --> 00:04:30.920
we have to do to get that
next frame on screen.

00:04:30.920 --> 00:04:32.670
So using this way of
thinking about it,

00:04:32.670 --> 00:04:35.755
we collected 27
different websites,

00:04:35.755 --> 00:04:37.630
different effects that
we wanted to make sure

00:04:37.630 --> 00:04:39.140
were really good
on the mobile web,

00:04:39.140 --> 00:04:40.890
but that traditionally
had been very, very

00:04:40.890 --> 00:04:42.880
hard to do in a performant way.

00:04:42.880 --> 00:04:44.654
These are things
like a slide drawer

00:04:44.654 --> 00:04:46.570
that sticks to your
thumb, or pull to refresh.

00:04:46.570 --> 00:04:48.910
These are effects that we know
that you, as developers, like

00:04:48.910 --> 00:04:50.410
to do, and want to
put in your apps,

00:04:50.410 --> 00:04:52.464
and we want to see that happen.

00:04:52.464 --> 00:04:53.880
And so with the
goal that in order

00:04:53.880 --> 00:04:55.320
to be at 60 frames
per second, we

00:04:55.320 --> 00:04:58.270
have to be under
16.6 milliseconds,

00:04:58.270 --> 00:05:00.550
we ran through all
27 of these effects

00:05:00.550 --> 00:05:03.420
on a Nexus 5, a relatively
powerful device,

00:05:03.420 --> 00:05:08.100
and came to 129 milliseconds
on average to generate a frame.

00:05:08.100 --> 00:05:09.870
Luckily, I'm not fired yet.

00:05:09.870 --> 00:05:11.790
This is January.

00:05:11.790 --> 00:05:13.790
So we ran this again,
after all the improvements

00:05:13.790 --> 00:05:15.748
that we've been making,
and I'm happy to report

00:05:15.748 --> 00:05:19.320
that as of this week, we are
finally at 16 milliseconds.

00:05:19.320 --> 00:05:24.390
[APPLAUSE]

00:05:24.390 --> 00:05:27.930
16 milliseconds for these
really, really tough effects

00:05:27.930 --> 00:05:31.780
that we wanted to make
sure were enabled.

00:05:31.780 --> 00:05:33.680
And so this is a
pretty big jump.

00:05:33.680 --> 00:05:35.255
This is 10X.

00:05:35.255 --> 00:05:36.630
And so you're
probably wondering,

00:05:36.630 --> 00:05:39.201
how was that even a
thing that's possible?

00:05:39.201 --> 00:05:40.950
So I told you at the
beginning of the talk

00:05:40.950 --> 00:05:42.825
that we had several
teams that were dedicated

00:05:42.825 --> 00:05:47.420
to making this a reasonable
thing that could be done.

00:05:47.420 --> 00:05:50.270
And one of those teams was a
task force called Project Silk.

00:05:50.270 --> 00:05:53.570
It was a cross-cutting team
between Chrome and Blink,

00:05:53.570 --> 00:05:55.630
and was really enabled
by the tight integration

00:05:55.630 --> 00:05:57.270
between those two.

00:05:57.270 --> 00:05:59.376
They worked on an
immense amount of things.

00:05:59.376 --> 00:06:01.750
I'm going to throw a bunch of
words up here on the slide.

00:06:01.750 --> 00:06:03.510
I think Darren had a
slide like this too.

00:06:03.510 --> 00:06:05.150
And I don't expect you to
understand all these things--

00:06:05.150 --> 00:06:07.108
I'm certainly not going
to talk about them all.

00:06:07.108 --> 00:06:09.990
But just I just want to
demonstrate the real breadth

00:06:09.990 --> 00:06:11.850
of what they were working on.

00:06:11.850 --> 00:06:14.350
To highlight a few,
Darren this morning

00:06:14.350 --> 00:06:15.850
mentioned the
will-change attribute.

00:06:15.850 --> 00:06:18.790
And we think of this as
really, really powerful.

00:06:18.790 --> 00:06:21.360
It enables you, as a developer,
who probably knows more

00:06:21.360 --> 00:06:24.730
about your app than Chrome
does, to label certain content,

00:06:24.730 --> 00:06:25.840
and say, this will change.

00:06:25.840 --> 00:06:28.110
This will animate in some way.

00:06:28.110 --> 00:06:30.974
That lets us do a lot of
the prep work ahead of time,

00:06:30.974 --> 00:06:32.640
so that as soon as
you start to animate,

00:06:32.640 --> 00:06:33.540
we don't have to do anything.

00:06:33.540 --> 00:06:34.630
It's going to be
responsive, and it's

00:06:34.630 --> 00:06:35.910
going to be smooth right away.

00:06:35.910 --> 00:06:39.100
All the prep work has been done.

00:06:39.100 --> 00:06:43.190
Another project is garbage
collection during idle time.

00:06:43.190 --> 00:06:45.730
In JavaScript, or in several
programming languages,

00:06:45.730 --> 00:06:47.220
garbage collection
is the process

00:06:47.220 --> 00:06:50.960
of reclaiming memory
that's not used anymore,

00:06:50.960 --> 00:06:53.050
so that it can be useful again.

00:06:53.050 --> 00:06:55.520
And historically, this
has been totally unlinked

00:06:55.520 --> 00:06:57.110
from the Chrome
rendering engine.

00:06:57.110 --> 00:07:00.296
So if you're trying to get
that 16 milliseconds, 60

00:07:00.296 --> 00:07:02.670
frames per second, and then
Chrome was going to say, nah,

00:07:02.670 --> 00:07:04.211
it's time to do a
garbage collection,

00:07:04.211 --> 00:07:05.600
you're kind of screwed.

00:07:05.600 --> 00:07:07.580
And your animation will
just screech to a halt.

00:07:07.580 --> 00:07:09.580
So we've hooked it up
with the rendering system.

00:07:09.580 --> 00:07:11.913
So now, if you take a look
at that frame budget, that 16

00:07:11.913 --> 00:07:14.470
milliseconds, maybe there's
six seconds left at the end

00:07:14.470 --> 00:07:17.170
that you have time
to do things with.

00:07:17.170 --> 00:07:20.160
And so we can fit in
garbage collection there,

00:07:20.160 --> 00:07:22.640
and so you can keep running
at that 60 frames per second,

00:07:22.640 --> 00:07:24.960
but still get the
useful memory reclaimed.

00:07:27.500 --> 00:07:29.957
And then another
project that I want

00:07:29.957 --> 00:07:32.290
to talk about, that Darren
also touched on this morning,

00:07:32.290 --> 00:07:35.310
is a project called hardware
accelerated rasterization.

00:07:35.310 --> 00:07:36.893
And that's a lot of
words that I don't

00:07:36.893 --> 00:07:38.559
want to have to say
over and over again,

00:07:38.559 --> 00:07:40.950
so I'm going to call it
by our code word, Ganesh.

00:07:40.950 --> 00:07:42.560
And before I go
into what Ganesh is,

00:07:42.560 --> 00:07:44.070
I want to explain
a little bit more

00:07:44.070 --> 00:07:47.080
about the Chrome
rendering pipeline.

00:07:47.080 --> 00:07:49.880
If you've ever profiled your
website in Chrome dev tools,

00:07:49.880 --> 00:07:52.700
you've probably seen little
chunks of time called painting.

00:07:52.700 --> 00:07:55.250
And part of painting is a
process called rasterization.

00:07:55.250 --> 00:07:57.708
And all that means is that
we're taking the draw commands--

00:07:57.708 --> 00:08:01.870
like put text 12 point here,
draw a rectangle that's

00:08:01.870 --> 00:08:04.990
200 pixels by 300 pixels and
put it here-- and take that

00:08:04.990 --> 00:08:08.360
into actual pixels that are
going to appear on your screen.

00:08:08.360 --> 00:08:11.030
So historically, that process
has looked something like this.

00:08:11.030 --> 00:08:13.820
This is a vast simplification,
but the draw commands

00:08:13.820 --> 00:08:16.360
go into the CPU, where that
rasterization takes place,

00:08:16.360 --> 00:08:19.360
and actual pixels-- the pixels
in the form of a texture--

00:08:19.360 --> 00:08:21.780
are uploaded to
the GPU, which then

00:08:21.780 --> 00:08:23.690
puts those pixels
onto the screen.

00:08:23.690 --> 00:08:26.330
It's pretty simple, but there
are a couple issues with it,

00:08:26.330 --> 00:08:27.651
as well.

00:08:27.651 --> 00:08:29.150
As Darren said this
morning, the CPU

00:08:29.150 --> 00:08:32.700
is not really optimized
for that type of work.

00:08:32.700 --> 00:08:34.240
The GPU, after all,
is for graphics.

00:08:34.240 --> 00:08:36.890
And so it would be much
more efficient to do it

00:08:36.890 --> 00:08:40.590
on the GPU, which is tuned
for those sort of operations.

00:08:40.590 --> 00:08:42.340
There's also that
really expensive upload,

00:08:42.340 --> 00:08:44.557
of the texture from
the CPU to the GPU.

00:08:44.557 --> 00:08:46.390
And if you're doing
that every single frame,

00:08:46.390 --> 00:08:49.855
that's really, really
going to slow things down.

00:08:49.855 --> 00:08:52.230
In addition, we're not just
doing this process for what's

00:08:52.230 --> 00:08:54.347
on screen on your
mobile device, we're

00:08:54.347 --> 00:08:55.930
doing it for everything
that's around.

00:08:55.930 --> 00:08:57.750
We're rasterizing
everything around there,

00:08:57.750 --> 00:08:59.470
so that when the
user scrolls, they're

00:08:59.470 --> 00:09:00.860
going to get those
pixels right away.

00:09:00.860 --> 00:09:02.980
We're not confident in our own
rasterization ability to say,

00:09:02.980 --> 00:09:04.521
yeah, we can get it
up there on time.

00:09:04.521 --> 00:09:05.957
So we do it ahead of time.

00:09:05.957 --> 00:09:07.790
So that's really an
extra burden on the CPU,

00:09:07.790 --> 00:09:11.330
and it costs a lot of memory.

00:09:11.330 --> 00:09:12.960
Even if you didn't
know how this works,

00:09:12.960 --> 00:09:14.200
you've probably
feel the effects,

00:09:14.200 --> 00:09:16.510
if you've ever tried to do
a JavaScript-based animation

00:09:16.510 --> 00:09:20.130
with something like
requestanimationframe.

00:09:20.130 --> 00:09:22.040
There are these
weird rules like, oh,

00:09:22.040 --> 00:09:23.750
yeah, [? passity, ?]
you can change that.

00:09:23.750 --> 00:09:26.140
But left and top-- like,
no, you can't touch those.

00:09:26.140 --> 00:09:28.220
That'll just ruin
your animation.

00:09:28.220 --> 00:09:30.140
And that's ridiculous, right?

00:09:30.140 --> 00:09:32.060
We don't believe that
you as developers should

00:09:32.060 --> 00:09:34.560
have to have in your head these
rules that don't make sense,

00:09:34.560 --> 00:09:36.351
but it's just the way
it is, because that's

00:09:36.351 --> 00:09:38.300
how the rendering engine works.

00:09:38.300 --> 00:09:40.750
And so that's where
Ganesh comes in.

00:09:40.750 --> 00:09:42.970
We can largely throw
away this pipeline

00:09:42.970 --> 00:09:46.050
that I was talking about-- and
again, vast simplification.

00:09:46.050 --> 00:09:48.680
But the draw commands can
come in, for the most part,

00:09:48.680 --> 00:09:50.350
skip the CPU, and
all the hardware

00:09:50.350 --> 00:09:52.517
can be done on the GPU.

00:09:52.517 --> 00:09:54.600
We're working hard to
enable this kind of pipeline

00:09:54.600 --> 00:09:57.119
for all content and
for all devices.

00:09:57.119 --> 00:09:59.160
Right now, it's just a
handful of modern devices,

00:09:59.160 --> 00:10:01.330
and about 15% of web content.

00:10:01.330 --> 00:10:03.539
Because it's actually really
hard, with the many GPUs

00:10:03.539 --> 00:10:05.246
that we have, and the
many platforms that

00:10:05.246 --> 00:10:06.780
we're working on,
to get this going.

00:10:06.780 --> 00:10:10.150
But it's really, really
a huge improvement.

00:10:10.150 --> 00:10:13.880
And to motivate that, I
want to show a quick video.

00:10:13.880 --> 00:10:15.690
So this is The Verge's website.

00:10:15.690 --> 00:10:17.550
On the left, you have Chrome 32.

00:10:17.550 --> 00:10:20.210
And on the right, you have
the latest Canary, Chrome 41,

00:10:20.210 --> 00:10:21.734
and that has Ganesh enabled.

00:10:21.734 --> 00:10:23.650
And in a minute, I'm
going to start the video.

00:10:23.650 --> 00:10:26.997
And simultaneously,
I'll fling the two sites

00:10:26.997 --> 00:10:28.580
to scroll through
The Verge's website.

00:10:28.580 --> 00:10:30.120
A very, very fast scroll.

00:10:30.120 --> 00:10:32.330
So fast that I slow down
the video by four times,

00:10:32.330 --> 00:10:33.750
so you can see what's going on.

00:10:33.750 --> 00:10:35.430
And you'll notice two things.

00:10:35.430 --> 00:10:38.420
Even though I scroll both
of them at the same time,

00:10:38.420 --> 00:10:40.240
Chrome 32 takes a very
long time to start,

00:10:40.240 --> 00:10:42.420
because it's thinking
really hard at the beginning

00:10:42.420 --> 00:10:43.650
of that animation.

00:10:43.650 --> 00:10:46.070
And the second thing you'll
see is that without Ganesh,

00:10:46.070 --> 00:10:47.737
the rasterization
just cannot keep up.

00:10:47.737 --> 00:10:49.820
And it'll be very apparent
once I start the video.

00:10:49.820 --> 00:10:52.320
So let's take a look.

00:10:52.320 --> 00:10:53.420
There's the fling.

00:10:53.420 --> 00:10:55.740
41 is off and running.

00:10:55.740 --> 00:10:58.520
And there's the scroll on
32, can't even keep up.

00:10:58.520 --> 00:11:01.330
But 41 rasters all the
content, and gets it

00:11:01.330 --> 00:11:03.440
on screen in that super
fast scroll, which

00:11:03.440 --> 00:11:05.080
on here is four times slower.

00:11:05.080 --> 00:11:07.510
So we think this is
incredible progress.

00:11:07.510 --> 00:11:08.995
[APPLAUSE] Thank you.

00:11:13.460 --> 00:11:16.160
And just because I want to end
this section on a low note,

00:11:16.160 --> 00:11:19.877
we do recognize that even
16 milliseconds is not

00:11:19.877 --> 00:11:20.710
the golden standard.

00:11:20.710 --> 00:11:22.370
We still have a
lot of work to do,

00:11:22.370 --> 00:11:24.540
because if there's anything
else happening on your phone--

00:11:24.540 --> 00:11:25.800
or heaven forbid,
you as a developer

00:11:25.800 --> 00:11:28.100
want to do something besides
just rendering frames-- that's

00:11:28.100 --> 00:11:29.980
going to blow that
frame budget right away.

00:11:29.980 --> 00:11:32.271
And so we're going to continue
working on Project Silk,

00:11:32.271 --> 00:11:35.950
and I expect we'll have some
more good results for you soon.

00:11:35.950 --> 00:11:37.210
OK.

00:11:37.210 --> 00:11:40.265
So far I've talked about
speed, and that's great.

00:11:40.265 --> 00:11:41.890
But there's another
part of performance

00:11:41.890 --> 00:11:43.890
that we're starting to
realize is equally important,

00:11:43.890 --> 00:11:44.960
and that's efficiency.

00:11:44.960 --> 00:11:48.279
Specifically, energy
efficiency and battery life.

00:11:48.279 --> 00:11:49.820
When we started
thinking about-- when

00:11:49.820 --> 00:11:52.450
I started thinking
about energy efficiency,

00:11:52.450 --> 00:11:54.420
I had sort of this very
naive approach to it.

00:11:54.420 --> 00:11:57.300
It was like, well, we're
already optimizing CPU and GPU,

00:11:57.300 --> 00:11:59.444
so let's just do
less work on those,

00:11:59.444 --> 00:12:01.360
and then we'll use less
energy, and we'll just

00:12:01.360 --> 00:12:02.818
get the energy
efficiency for free.

00:12:02.818 --> 00:12:05.640
Why do we even need to think
about energy efficiency?

00:12:05.640 --> 00:12:07.120
And that's partially true.

00:12:07.120 --> 00:12:08.620
That does improve
energy efficiency.

00:12:08.620 --> 00:12:10.200
But there's a lot more
than we can be doing there,

00:12:10.200 --> 00:12:11.680
and it's not always intuitive.

00:12:11.680 --> 00:12:14.570
And to motivate this
with a concrete example,

00:12:14.570 --> 00:12:17.470
this was what I thought
energy usage looked like.

00:12:17.470 --> 00:12:20.130
When you're doing work on
the CPU, you're using energy.

00:12:20.130 --> 00:12:21.610
When you're not doing work,
you're not doing energy.

00:12:21.610 --> 00:12:23.610
So again, just do what
you have to do, and do it

00:12:23.610 --> 00:12:26.540
as fast as possible,
and get back to idle.

00:12:26.540 --> 00:12:28.050
This is not quite how it is.

00:12:28.050 --> 00:12:30.320
And this is still an
oversimplification,

00:12:30.320 --> 00:12:32.840
but you have a little bit
of a warm up and a cool down

00:12:32.840 --> 00:12:35.840
period any time that you use the
CPU, where you're using energy,

00:12:35.840 --> 00:12:37.780
but you're not getting
efficient work done--

00:12:37.780 --> 00:12:39.590
or you're not getting
useful work done,

00:12:39.590 --> 00:12:41.025
you're just burning energy.

00:12:41.025 --> 00:12:42.400
And so in this
contrived example,

00:12:42.400 --> 00:12:44.483
you're going to use about
two times as much energy

00:12:44.483 --> 00:12:46.944
as you would in
my naive approach.

00:12:46.944 --> 00:12:49.110
And so what you want to do
instead is take this work

00:12:49.110 --> 00:12:50.822
and nudge it by
just microseconds,

00:12:50.822 --> 00:12:52.530
and coalesce it all
together, so that you

00:12:52.530 --> 00:12:54.780
have a single warm up and
a single cool down period.

00:12:54.780 --> 00:12:57.030
And you get an energy
savings of about 2x

00:12:57.030 --> 00:12:59.730
here, again, in this example.

00:12:59.730 --> 00:13:01.820
And so I don't want to
imply that we're always

00:13:01.820 --> 00:13:04.374
going to wait as long as
we can to do this work,

00:13:04.374 --> 00:13:06.790
but it becomes an engineering
trade-off of how much energy

00:13:06.790 --> 00:13:09.770
savings can you squeeze
out of your work

00:13:09.770 --> 00:13:12.430
just by those little nudges
that aren't going to,

00:13:12.430 --> 00:13:15.550
in reality, affect the
user-perceived performance

00:13:15.550 --> 00:13:16.180
of your app.

00:13:16.180 --> 00:13:17.680
So we're taking
learnings like this,

00:13:17.680 --> 00:13:20.507
and going back, and taking a
look at Chrome's energy usage.

00:13:20.507 --> 00:13:22.090
And we started with
the worst offender

00:13:22.090 --> 00:13:24.640
of this, which was
Chrome for Windows.

00:13:24.640 --> 00:13:26.719
And I've happy report
that at idle-- so

00:13:26.719 --> 00:13:28.260
when you're reading
a Wikipedia page,

00:13:28.260 --> 00:13:30.570
or when you're just
reading a news article,

00:13:30.570 --> 00:13:32.300
or something--
Chrome for Windows

00:13:32.300 --> 00:13:34.220
is now using only a
quarter of the energy

00:13:34.220 --> 00:13:35.550
that it was six months ago.

00:13:35.550 --> 00:13:37.040
So we think that's a
fantastic improvement,

00:13:37.040 --> 00:13:38.930
and we're really looking forward
to taking those same learnings

00:13:38.930 --> 00:13:40.695
and applying it to
other platforms.

00:13:43.350 --> 00:13:44.150
OK.

00:13:44.150 --> 00:13:46.090
The last thing I want
to talk about today

00:13:46.090 --> 00:13:48.069
is perception of speed.

00:13:48.069 --> 00:13:49.610
Because at the end
of the day, that's

00:13:49.610 --> 00:13:51.430
really what you guys
probably care about,

00:13:51.430 --> 00:13:53.714
is the experience that you
can deliver to your users.

00:13:53.714 --> 00:13:56.130
And so I'm not going to talk
about graphs, and tech specs,

00:13:56.130 --> 00:13:59.710
and percentage
improvements anymore.

00:13:59.710 --> 00:14:03.100
If you've been following the
release of Android Lollipop,

00:14:03.100 --> 00:14:06.480
you may have heard about
an API that they're

00:14:06.480 --> 00:14:08.400
working on called
activity transitions.

00:14:08.400 --> 00:14:13.770
And it enables what you're
going to see behind me here.

00:14:13.770 --> 00:14:16.320
When you transition between two
activities in Android, which

00:14:16.320 --> 00:14:19.360
is essentially a page
navigation in Android,

00:14:19.360 --> 00:14:22.267
it lets you transition
smoothly, and keep some elements

00:14:22.267 --> 00:14:22.850
on the screen.

00:14:22.850 --> 00:14:26.210
So you can see in this example,
you click on the album art,

00:14:26.210 --> 00:14:28.530
smoothly transitions over
to the next activity.

00:14:28.530 --> 00:14:31.760
And there was no break
in the user experience.

00:14:31.760 --> 00:14:34.660
Not only is this a smooth and
beautiful user experience,

00:14:34.660 --> 00:14:36.200
but it also hides
any latency that's

00:14:36.200 --> 00:14:40.750
involved in creating
that new activity.

00:14:40.750 --> 00:14:44.570
If you were to do an A/B test
with users, and on one hand,

00:14:44.570 --> 00:14:47.040
you take just the activity
that as soon as it's ready,

00:14:47.040 --> 00:14:50.050
you throw it up on screen, no
transition, and on the other,

00:14:50.050 --> 00:14:52.560
you do this smooth animation
to the new activity.

00:14:52.560 --> 00:14:54.310
Even if the clock time
is exactly the same

00:14:54.310 --> 00:14:56.340
between the two,
the user will always

00:14:56.340 --> 00:14:59.040
say that the one with
the smooth transition

00:14:59.040 --> 00:15:01.280
was objectively faster,
even though the time was

00:15:01.280 --> 00:15:03.010
exactly the same.

00:15:03.010 --> 00:15:06.830
So this is the kind of thing
that we want to do on the web.

00:15:06.830 --> 00:15:08.890
But today, if you do
absolutely nothing,

00:15:08.890 --> 00:15:11.740
your navigation is going to have
that horrid white flash that

00:15:11.740 --> 00:15:14.239
is sort of like the signature
of the web today, that reminds

00:15:14.239 --> 00:15:16.320
the user that
they're on the web.

00:15:16.320 --> 00:15:19.140
If you have something like
a single page web app,

00:15:19.140 --> 00:15:20.390
you can make this work, right?

00:15:20.390 --> 00:15:23.290
You can do Ajax calls, you
can manage your URL state,

00:15:23.290 --> 00:15:27.400
so that this is still a thing
that's even possible, certainly

00:15:27.400 --> 00:15:28.754
not easy.

00:15:28.754 --> 00:15:30.670
And if you want to
transition between origins,

00:15:30.670 --> 00:15:32.640
then we need to start
talking about iFrames,

00:15:32.640 --> 00:15:34.227
and things just
get really complex.

00:15:34.227 --> 00:15:35.810
And that's not how
it should be right?

00:15:35.810 --> 00:15:37.360
You're just
transitioning an element.

00:15:37.360 --> 00:15:39.443
You shouldn't have to jump
through all these hoops

00:15:39.443 --> 00:15:43.620
to avoid this legacy
piece of the browser.

00:15:43.620 --> 00:15:46.470
And so we've been working
on this experiment.

00:15:46.470 --> 00:15:48.134
It's a new API,
new prototype API,

00:15:48.134 --> 00:15:50.300
that we've been calling
Navigation Transitions, that

00:15:50.300 --> 00:15:52.664
enables this sort
of thing on the web.

00:15:52.664 --> 00:15:54.580
And so I want to show
you how that would work.

00:15:54.580 --> 00:15:56.630
If we can switch to
the podium camera.

00:16:01.570 --> 00:16:02.070
Please?

00:16:06.010 --> 00:16:06.510
All right.

00:16:06.510 --> 00:16:07.010
Cool.

00:16:10.120 --> 00:16:12.900
So I have here a prototype
that is Google web

00:16:12.900 --> 00:16:14.514
search-- obviously, not live.

00:16:14.514 --> 00:16:16.180
And what you're going
to see in a second

00:16:16.180 --> 00:16:18.189
is I'm going to click
on the Search button.

00:16:18.189 --> 00:16:20.480
And we're going to navigate
to the Search Results page,

00:16:20.480 --> 00:16:21.800
but we're going
to keep the Google

00:16:21.800 --> 00:16:23.180
logo, we're going to
keep the search bar,

00:16:23.180 --> 00:16:25.850
because those elements are also
present on the Search Results

00:16:25.850 --> 00:16:27.660
page.

00:16:27.660 --> 00:16:28.370
So am I here?

00:16:28.370 --> 00:16:29.370
Yep.

00:16:29.370 --> 00:16:32.254
You can click,
smooth navigation,

00:16:32.254 --> 00:16:33.420
and the results just fly in.

00:16:33.420 --> 00:16:39.890
There was no break in the user
experience. [APPLAUSE] Thanks.

00:16:39.890 --> 00:16:42.820
So if we can switch back
to the slides for a second.

00:16:42.820 --> 00:16:45.610
Like I said, this is
still an experimental API,

00:16:45.610 --> 00:16:47.430
so everything is
likely to change,

00:16:47.430 --> 00:16:49.846
and I don't want to go into
the specifics of how it works.

00:16:49.846 --> 00:16:52.080
But I do want to call your
attention to two things.

00:16:52.080 --> 00:16:53.830
First one is that
this is pretty simple.

00:16:53.830 --> 00:16:55.570
We have a meta tag
that identifies

00:16:55.570 --> 00:16:58.300
the elements you want to
transition, a link header that

00:16:58.300 --> 00:17:03.390
tells the browser where the
CSS animations are, and then

00:17:03.390 --> 00:17:06.230
whatever CSS animations you
want for those elements.

00:17:06.230 --> 00:17:07.619
Really dead simple to implement.

00:17:07.619 --> 00:17:09.660
The second thing I want
to call your attention to

00:17:09.660 --> 00:17:12.335
is that a browser that
chooses to implement this,

00:17:12.335 --> 00:17:13.710
in whatever final
form it ends up

00:17:13.710 --> 00:17:17.139
looking like, you'll get
those great transitions.

00:17:17.139 --> 00:17:18.680
And if you have a
legacy browser that

00:17:18.680 --> 00:17:20.300
doesn't understand
this stuff, you're

00:17:20.300 --> 00:17:21.780
going to have the same
transitions that you would have

00:17:21.780 --> 00:17:22.079
anyway.

00:17:22.079 --> 00:17:23.550
So it's fully
backward compatible,

00:17:23.550 --> 00:17:29.480
and it'll continue to have those
navigations everywhere else.

00:17:29.480 --> 00:17:34.450
So I started out motivating
this with the Android activity

00:17:34.450 --> 00:17:37.120
transitions API,
which I said lets

00:17:37.120 --> 00:17:41.640
you do these smooth transitions
between native Android apps.

00:17:41.640 --> 00:17:44.480
Chrome on Android is just
a native app on Android.

00:17:44.480 --> 00:17:47.260
So what happens if we hook
up activity transitions API

00:17:47.260 --> 00:17:49.057
with the navigation
transitions API?

00:17:49.057 --> 00:17:50.640
So let me show you
another demo, if we

00:17:50.640 --> 00:17:52.970
can go back to
the podium camera.

00:17:58.640 --> 00:18:01.740
So I have here-- it's a little
washed out, but it's all right,

00:18:01.740 --> 00:18:05.060
you'll still get it--
this is just a web page.

00:18:05.060 --> 00:18:07.520
And has some thumbnails on it.

00:18:07.520 --> 00:18:10.380
And I also have
this toy native app

00:18:10.380 --> 00:18:12.140
that we just have
for an example.

00:18:12.140 --> 00:18:13.230
And it has some
pictures, and you'll

00:18:13.230 --> 00:18:15.021
see that some of the
pictures are the same,

00:18:15.021 --> 00:18:18.350
and then there's
some text there.

00:18:18.350 --> 00:18:23.010
If I open up my web app, and I
want to now smoothly transition

00:18:23.010 --> 00:18:27.000
into that native app, all I
do, click on one of the images,

00:18:27.000 --> 00:18:34.320
and you're inside the
native app. [APPLAUSE]

00:18:34.320 --> 00:18:35.864
So as you can see,
this really starts

00:18:35.864 --> 00:18:38.030
to blur the line-- if we
can go back to the slides--

00:18:38.030 --> 00:18:40.720
really starts to blur the line
between native apps and web

00:18:40.720 --> 00:18:42.430
apps, and we think
that that's great.

00:18:42.430 --> 00:18:45.320
We want you as developers to use
whatever development experience

00:18:45.320 --> 00:18:47.772
you think is right for you
and your users and your app,

00:18:47.772 --> 00:18:49.980
and really deliver that
great experience to the user.

00:18:49.980 --> 00:18:51.730
The user doesn't
need to be concerned

00:18:51.730 --> 00:18:54.420
with what tool chain you used
to get that experience in front

00:18:54.420 --> 00:18:54.920
of them.

00:18:54.920 --> 00:18:57.560
They can just enjoy and be
immersed in your experience.

00:18:57.560 --> 00:19:00.870
So we think that
that's really great.

00:19:00.870 --> 00:19:03.351
So that's all I have
prepared to talk about today.

00:19:03.351 --> 00:19:05.850
Just to quickly recap, I touched
on traditional performance,

00:19:05.850 --> 00:19:07.635
and the work that
we've been doing there.

00:19:07.635 --> 00:19:10.010
I spent a lot more time going
into rendering performance,

00:19:10.010 --> 00:19:12.509
and all the projects that we've
been working on there to get

00:19:12.509 --> 00:19:15.690
a great, nearly 10x improvement
on some of those tough cases.

00:19:15.690 --> 00:19:18.040
Talked a bit about battery
life and energy efficiency,

00:19:18.040 --> 00:19:20.040
and how we're thinking
about optimization there.

00:19:20.040 --> 00:19:22.091
And then finally, talked
about perceived speed,

00:19:22.091 --> 00:19:24.340
and this new prototype API
that we've been working on,

00:19:24.340 --> 00:19:26.339
that we think can really
make a large difference

00:19:26.339 --> 00:19:28.064
for navigations on the web.

00:19:28.064 --> 00:19:30.730
But if nothing else, what I want
you to take away from this talk

00:19:30.730 --> 00:19:31.670
was what I said
at the beginning.

00:19:31.670 --> 00:19:32.990
Which is like, we care.

00:19:32.990 --> 00:19:33.560
We get it.

00:19:33.560 --> 00:19:35.580
We know that performance
on the web is painful,

00:19:35.580 --> 00:19:36.996
and we're doing
everything that we

00:19:36.996 --> 00:19:38.700
can to make that a
better situation.

00:19:38.700 --> 00:19:40.824
We've come a long way with
some of the improvements

00:19:40.824 --> 00:19:43.670
that I talked about today, but
there's still a lot more to do.

00:19:43.670 --> 00:19:46.810
And so if I have my way, I'll be
back up here on stage one year

00:19:46.810 --> 00:19:49.577
from today with as much
good news, if not more.

00:19:49.577 --> 00:19:50.410
Thank you very much.

00:19:50.410 --> 00:19:51.936
[APPLAUSE]

