WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.654
JAMES KELLY: Good
afternoon, everybody.

00:00:01.654 --> 00:00:03.870
[WHISTLE FROM AUDIENCE]

00:00:03.870 --> 00:00:05.020
Thank you.

00:00:05.020 --> 00:00:07.660
Whether it's corporate
email, collaboration tools

00:00:07.660 --> 00:00:11.490
for remote workers, barcode
scanners for logistics workers,

00:00:11.490 --> 00:00:15.030
or stock market tickers
for finance types,

00:00:15.030 --> 00:00:17.700
there's a whole world of
apps for work out there.

00:00:17.700 --> 00:00:19.620
Now with Android
for Work you can

00:00:19.620 --> 00:00:21.780
focus on making great
apps for business.

00:00:21.780 --> 00:00:23.510
And with Google
Play for Work, you

00:00:23.510 --> 00:00:26.470
can make apps available
to the whole workforce.

00:00:26.470 --> 00:00:28.920
So with your apps at work,
we can all be productive

00:00:28.920 --> 00:00:30.620
while we're mobile.

00:00:30.620 --> 00:00:32.820
My name is James Kelly,
and I'm a product manager

00:00:32.820 --> 00:00:34.370
on the Android team.

00:00:34.370 --> 00:00:37.020
Last year we launched
Android for Work as a way

00:00:37.020 --> 00:00:41.380
for IT admins to deploy devices
and apps to their employees,

00:00:41.380 --> 00:00:44.060
and keep corporate
data safe and secure.

00:00:44.060 --> 00:00:46.040
Now, today we're
announcing we're

00:00:46.040 --> 00:00:47.800
expanding Android
for Work, to cover

00:00:47.800 --> 00:00:50.440
new kinds of devices and apps.

00:00:50.440 --> 00:00:52.920
And make it simpler to grow
the audience for your apps

00:00:52.920 --> 00:00:54.755
to all kinds of businesses.

00:00:54.755 --> 00:00:57.130
MATT GOODRIDGE: And I'm Matt
Goodridge, a product manager

00:00:57.130 --> 00:00:58.600
on the Google Play team.

00:00:58.600 --> 00:01:00.600
At Google Play for
Work, our mission

00:01:00.600 --> 00:01:04.090
is to reduce the barriers for
developers such as yourselves,

00:01:04.090 --> 00:01:07.330
to get innovative apps
discovered and used

00:01:07.330 --> 00:01:09.280
by businesses while
keeping the business's

00:01:09.280 --> 00:01:10.905
data safe and secure.

00:01:10.905 --> 00:01:11.780
RICHARD HYNDMAN: Hey.

00:01:11.780 --> 00:01:14.080
And I'm Richard Hyndman,
developer advocate

00:01:14.080 --> 00:01:15.064
on the Android team.

00:01:15.064 --> 00:01:17.230
Helping to make sure you
guys have all the materials

00:01:17.230 --> 00:01:18.950
you need to build
great applications,

00:01:18.950 --> 00:01:20.360
but also taking
feedback from you

00:01:20.360 --> 00:01:22.276
and taking it to the
guys making the products,

00:01:22.276 --> 00:01:23.210
like James and Matt.

00:01:23.210 --> 00:01:25.501
MATT GOODRIDGE: Did you know
that according to Gartner,

00:01:25.501 --> 00:01:30.770
businesses globally spent $143
billion on application software

00:01:30.770 --> 00:01:35.400
in 2015, across
desktop and mobile.

00:01:35.400 --> 00:01:36.960
Just to put that in
perspective, that

00:01:36.960 --> 00:01:41.510
is 25% bigger than the entire
global spend on video games

00:01:41.510 --> 00:01:44.350
across all platforms
in the same year.

00:01:44.350 --> 00:01:46.530
And apps targeted
at mobile devices

00:01:46.530 --> 00:01:53.470
are by far the fastest growing
business segment that there is.

00:01:53.470 --> 00:01:55.920
But compared to the
gaming industry,

00:01:55.920 --> 00:01:58.360
business apps are
much further behind

00:01:58.360 --> 00:02:00.920
in moving to mobile devices.

00:02:00.920 --> 00:02:04.200
In part, that is because of
the lack of developers taking

00:02:04.200 --> 00:02:06.850
advantage of this opportunity.

00:02:06.850 --> 00:02:10.600
In fact, Gartner says that
demand for business apps

00:02:10.600 --> 00:02:14.690
will outstrip development
reach by five to one.

00:02:14.690 --> 00:02:17.550
That's going to be pretty
exciting news for you guys.

00:02:17.550 --> 00:02:20.580
It means we're early in an
exciting revolution in business

00:02:20.580 --> 00:02:22.230
software, and
developers are already

00:02:22.230 --> 00:02:24.150
starting to see success.

00:02:24.150 --> 00:02:26.890
Let's look at some examples.

00:02:26.890 --> 00:02:29.560
DocuSign launched its
e-signature business

00:02:29.560 --> 00:02:32.730
knowing it would need to appeal
to both consumers, who needed

00:02:32.730 --> 00:02:36.050
to sign and return
documents on the go,

00:02:36.050 --> 00:02:39.170
and businesses who saw
tremendous value in making

00:02:39.170 --> 00:02:42.020
every decision,
approval, workflow,

00:02:42.020 --> 00:02:44.950
and signature, 100% digital.

00:02:44.950 --> 00:02:48.460
They recently said that
99% of mobile revenue

00:02:48.460 --> 00:02:50.710
comes from businesses
sending documents

00:02:50.710 --> 00:02:53.890
to obtain approvals and
signatures to transact business

00:02:53.890 --> 00:02:55.430
faster.

00:02:55.430 --> 00:02:58.590
And consumers help expose
businesses to DocuSign

00:02:58.590 --> 00:03:02.530
because signing and returning
a document is always free.

00:03:02.530 --> 00:03:06.720
It's an incredible viral network
that drives revenue growth.

00:03:06.720 --> 00:03:10.170
Dropbox started as a file
sync and share solution

00:03:10.170 --> 00:03:11.670
for consumers.

00:03:11.670 --> 00:03:14.090
But the number of Dropbox
business customers

00:03:14.090 --> 00:03:18.700
has grown globally 3 and 1/2
times in the past two years.

00:03:18.700 --> 00:03:21.480
There were 200 million
unique mobile devices

00:03:21.480 --> 00:03:24.550
connected to Dropbox last year.

00:03:24.550 --> 00:03:25.300
JAMES KELLY: Cool.

00:03:25.300 --> 00:03:26.090
Thanks, Matt.

00:03:26.090 --> 00:03:29.390
So it's clear there's a huge
opportunity in business app

00:03:29.390 --> 00:03:30.720
development.

00:03:30.720 --> 00:03:32.620
So why develop on Android?

00:03:32.620 --> 00:03:37.360
Let's look at this from the
perspective of an IT admin.

00:03:37.360 --> 00:03:39.280
Now often businesses
require a range

00:03:39.280 --> 00:03:42.090
of both internally and
externally developed apps.

00:03:42.090 --> 00:03:45.170
And those apps have to work
across multiple platforms.

00:03:45.170 --> 00:03:47.280
So to manage all
of that complexity,

00:03:47.280 --> 00:03:50.420
IT will often partner with
a supplier of the Enterprise

00:03:50.420 --> 00:03:54.180
Mobility Management or an EMM.

00:03:54.180 --> 00:03:56.200
With Android for Work,
we work with some

00:03:56.200 --> 00:03:59.070
of the top EMM partners
like those you see here.

00:03:59.070 --> 00:04:02.740
And we've worked with other
developers, OEMs, and carriers,

00:04:02.740 --> 00:04:05.340
to make their products
great for business.

00:04:05.340 --> 00:04:08.140
Now businesses can choose the
solution that's right for them.

00:04:08.140 --> 00:04:10.400
Because Android is
an open platform,

00:04:10.400 --> 00:04:14.570
these solutions cover a wide
range of business needs.

00:04:14.570 --> 00:04:17.149
So in addition to
this variety of apps,

00:04:17.149 --> 00:04:19.720
IT also need to offer
different kinds of devices

00:04:19.720 --> 00:04:21.410
for different use cases.

00:04:21.410 --> 00:04:25.640
Now since Android supports a
really diverse range of devices

00:04:25.640 --> 00:04:28.250
at all kinds of price
points, as a platform

00:04:28.250 --> 00:04:32.710
it's a great tool to give IT the
choices they need to mobilize

00:04:32.710 --> 00:04:33.770
the entire workforce.

00:04:36.670 --> 00:04:39.990
So I know many of you will be
familiar with Android for Work.

00:04:39.990 --> 00:04:42.770
But for those of you that
aren't, let's describe

00:04:42.770 --> 00:04:44.240
a little bit about what we do.

00:04:44.240 --> 00:04:47.120
So first there's BYOD, Android
for Work's great option

00:04:47.120 --> 00:04:49.400
for Bringing Your Own Device.

00:04:49.400 --> 00:04:51.350
Now, organizations
allow employees

00:04:51.350 --> 00:04:55.220
to bring their favorite Android
device for work to work.

00:04:55.220 --> 00:04:58.120
With Android for Work, employees
can use the devices they want,

00:04:58.120 --> 00:05:00.490
but get the apps they need.

00:05:00.490 --> 00:05:03.350
This works by the business is
able to create a secure work

00:05:03.350 --> 00:05:06.930
profile on the device, where
work apps and data reside.

00:05:06.930 --> 00:05:10.240
And these are securely
managed by the IT department.

00:05:10.240 --> 00:05:13.260
Data in the work profile
is kept safe and separate,

00:05:13.260 --> 00:05:16.090
so the business can
protect against data loss.

00:05:16.090 --> 00:05:18.630
But at the same
time, the employee

00:05:18.630 --> 00:05:20.630
can be confident that
their company can't access

00:05:20.630 --> 00:05:22.600
personal data or activity.

00:05:25.150 --> 00:05:29.750
Now next, Android for Work has
a model we call Device Owner.

00:05:29.750 --> 00:05:33.160
If a business prefers
to give employees

00:05:33.160 --> 00:05:35.400
fully managed
devices with access

00:05:35.400 --> 00:05:37.840
to the most secure
corporate systems,

00:05:37.840 --> 00:05:40.490
that's what Device Owner is for.

00:05:40.490 --> 00:05:42.870
In DO, the company
owns the whole device

00:05:42.870 --> 00:05:46.000
and manages the data on it.

00:05:46.000 --> 00:05:48.860
IT has complete control over
the entire device, which

00:05:48.860 --> 00:05:51.490
may mean, for example,
that the user can only use

00:05:51.490 --> 00:05:55.120
apps that are approved by IT.

00:05:55.120 --> 00:05:58.930
And finally, there's COSU,
Corporate Owned Single-Use

00:05:58.930 --> 00:06:01.150
Devices.

00:06:01.150 --> 00:06:04.120
This is a very diverse
range of business needs.

00:06:04.120 --> 00:06:06.070
You may want to manage
a fleet of devices that

00:06:06.070 --> 00:06:07.320
are used for a single purpose.

00:06:07.320 --> 00:06:10.100
For example, like a kiosk.

00:06:10.100 --> 00:06:12.760
COSU devices are
typically deployed

00:06:12.760 --> 00:06:16.130
where the device is locked to
a single, or a small number,

00:06:16.130 --> 00:06:17.510
of apps.

00:06:17.510 --> 00:06:20.240
And this mode gives the company
confidence the device cannot be

00:06:20.240 --> 00:06:23.600
used for anything else,
even if, for example,

00:06:23.600 --> 00:06:25.100
it's a kiosk in a public place.

00:06:28.680 --> 00:06:31.180
MATT GOODRIDGE: We've built
comprehensive data policy

00:06:31.180 --> 00:06:35.360
controls into Android that
ensure company data is safe,

00:06:35.360 --> 00:06:37.550
while it's on the mobile device.

00:06:37.550 --> 00:06:40.150
For example, blocking
screen capture,

00:06:40.150 --> 00:06:42.570
or stopping content
being copied from a work

00:06:42.570 --> 00:06:44.840
app into a personal app.

00:06:44.840 --> 00:06:47.320
You can find out more
about all of these controls

00:06:47.320 --> 00:06:50.300
at developer.android.com/work.

00:06:50.300 --> 00:06:53.910
We're sending the link
to the event space now.

00:06:53.910 --> 00:06:57.520
Security is a critical
aspect of any mobile platform

00:06:57.520 --> 00:06:58.780
in the workplace.

00:06:58.780 --> 00:07:00.740
The Android security
team is raising

00:07:00.740 --> 00:07:03.170
the bar on Android security.

00:07:03.170 --> 00:07:05.590
You can see more details
in the year-end review

00:07:05.590 --> 00:07:07.870
that we published back in April.

00:07:07.870 --> 00:07:09.700
And if you missed
Adrian Ludwig's talk

00:07:09.700 --> 00:07:12.730
on Android security
this morning,

00:07:12.730 --> 00:07:14.915
you can catch up
with it on YouTube.

00:07:19.100 --> 00:07:22.860
Android security is
pushing the boundaries

00:07:22.860 --> 00:07:26.420
with things like Android's
monthly security patch updates

00:07:26.420 --> 00:07:27.930
and much, much more.

00:07:27.930 --> 00:07:30.540
We're posting the link to
the video and the reports

00:07:30.540 --> 00:07:33.190
to the event space right now.

00:07:33.190 --> 00:07:36.830
And finally, at management,
Google Play for Work

00:07:36.830 --> 00:07:41.010
enables an administrator to
authorize employees to use apps

00:07:41.010 --> 00:07:43.860
on their work device
or work profile,

00:07:43.860 --> 00:07:48.630
or push install those apps
remotely, and configure them.

00:07:48.630 --> 00:07:50.810
These controls are exposed
to the administrator

00:07:50.810 --> 00:07:54.620
through the business's EMM
Console, and to the user

00:07:54.620 --> 00:07:57.270
through the Play Store
app on the device.

00:07:57.270 --> 00:07:59.120
We'll see examples
of these shortly,

00:07:59.120 --> 00:08:00.890
but let's go back
to James to find out

00:08:00.890 --> 00:08:02.670
what's new in Android N.

00:08:02.670 --> 00:08:03.420
JAMES KELLY: Cool.

00:08:03.420 --> 00:08:04.000
Thanks, Matt.

00:08:04.000 --> 00:08:06.916
So I think we're all clear on
what Android for Work is now.

00:08:06.916 --> 00:08:08.290
And as you know,
we're constantly

00:08:08.290 --> 00:08:11.890
making improvements and
investments in the platform.

00:08:11.890 --> 00:08:15.670
So last year, businesses told
us they wanted better security,

00:08:15.670 --> 00:08:18.540
and more controls for IT admins.

00:08:18.540 --> 00:08:21.680
And users told us they wanted
a better user experience,

00:08:21.680 --> 00:08:24.780
and a better work-life balance.

00:08:24.780 --> 00:08:27.940
So in the N Developer Preview,
we've expanded on those themes

00:08:27.940 --> 00:08:32.159
with a range of new
capabilities in Android.

00:08:32.159 --> 00:08:35.880
First off, if you were at
the What's New in Android N

00:08:35.880 --> 00:08:39.299
talk yesterday, you'll have seen
Chet talk about this feature.

00:08:39.299 --> 00:08:42.650
It's a great feature to
enhance security and control

00:08:42.650 --> 00:08:43.840
over corporate data.

00:08:43.840 --> 00:08:46.070
We call it the work challenge.

00:08:46.070 --> 00:08:48.560
So work challenge is
a separate passcode

00:08:48.560 --> 00:08:52.140
that protects work apps
and data on a BYOD device.

00:08:52.140 --> 00:08:56.050
So this means that IT no longer
needs to set complex password

00:08:56.050 --> 00:08:59.350
requirements for the device lock
screen which get in the way.

00:08:59.350 --> 00:09:02.680
Instead they can set
a passcode requirement

00:09:02.680 --> 00:09:04.425
that only applies to work apps.

00:09:04.425 --> 00:09:06.050
And they have policies
around how often

00:09:06.050 --> 00:09:09.120
they can show that password
requirement, and so on and so

00:09:09.120 --> 00:09:10.190
forth.

00:09:10.190 --> 00:09:12.890
We also added
file-based encryption

00:09:12.890 --> 00:09:16.310
and fast secure wipe
on supported devices.

00:09:16.310 --> 00:09:18.580
So when an employee
switches devices,

00:09:18.580 --> 00:09:22.410
corporate data is
never compromised.

00:09:22.410 --> 00:09:25.720
Another long requested
feature is always-on VPN.

00:09:25.720 --> 00:09:28.240
So we've added always-on
VPN to the platform.

00:09:28.240 --> 00:09:31.100
Incidentally, this works for
both consumer and business

00:09:31.100 --> 00:09:32.320
apps.

00:09:32.320 --> 00:09:35.840
So now a business can route
all data traffic from work apps

00:09:35.840 --> 00:09:39.830
to their VPN from
boot-up to shutdown.

00:09:39.830 --> 00:09:42.400
Now because the system can
directly bind VPN services

00:09:42.400 --> 00:09:45.700
without interaction, VPN clients
need to handle some new entry

00:09:45.700 --> 00:09:47.250
points on the device.

00:09:47.250 --> 00:09:49.280
For example, at boot-up,
the system service

00:09:49.280 --> 00:09:50.680
will start the VPN.

00:09:50.680 --> 00:09:53.932
So if you build a VPN app,
you need to bear this in mind.

00:09:53.932 --> 00:09:55.390
You'll also need
to ensure that you

00:09:55.390 --> 00:09:58.550
can support user configuration
of the always-on capability

00:09:58.550 --> 00:10:00.670
in your app's UI.

00:10:00.670 --> 00:10:04.930
To help you with that, there are
some open source examples using

00:10:04.930 --> 00:10:06.840
OpenVPN available on GitHub.

00:10:06.840 --> 00:10:09.690
And we're going to add a link
to that in the event space now.

00:10:12.560 --> 00:10:14.910
So alongside
always-on VPN, we've

00:10:14.910 --> 00:10:17.540
made some additional
improvements into work contacts

00:10:17.540 --> 00:10:20.745
to better integrate them into
the system dialer, messenger,

00:10:20.745 --> 00:10:23.050
and contacts app.

00:10:23.050 --> 00:10:25.910
So this lets you search across
work and personal contacts

00:10:25.910 --> 00:10:28.419
seamlessly from those apps.

00:10:28.419 --> 00:10:29.960
And for example, if
you've got a call

00:10:29.960 --> 00:10:31.700
from a colleague
in the call log,

00:10:31.700 --> 00:10:33.825
that will resolve and show
you the colleague's name

00:10:33.825 --> 00:10:35.790
rather than just a number.

00:10:35.790 --> 00:10:39.370
We've also improved
transparency in the system UI

00:10:39.370 --> 00:10:41.920
so you always know when your
device might be affected

00:10:41.920 --> 00:10:44.210
by your IT department's policy.

00:10:44.210 --> 00:10:47.190
We also allow, for example,
IT to set a support message

00:10:47.190 --> 00:10:49.990
directly in the
system UI to provide

00:10:49.990 --> 00:10:53.450
links to support resources.

00:10:53.450 --> 00:10:55.990
Now, users often
tell us they love

00:10:55.990 --> 00:10:58.110
having the option
of separate apps

00:10:58.110 --> 00:11:00.730
for work and personal tasks.

00:11:00.730 --> 00:11:04.560
But aren't there times when you
would love to detach from work?

00:11:04.560 --> 00:11:08.310
So we've added a feature we
call Work Mode to Android.

00:11:08.310 --> 00:11:12.300
Now Work Mode lets you control
work apps from Quick Settings.

00:11:12.300 --> 00:11:14.860
You can shut them all down
at the tap of the briefcase

00:11:14.860 --> 00:11:17.340
icon in Quick Settings.

00:11:17.340 --> 00:11:20.000
When you're in Work Mode,
work and personal apps

00:11:20.000 --> 00:11:21.890
run side by side.

00:11:21.890 --> 00:11:25.790
But outside of Work mode,
work apps don't run,

00:11:25.790 --> 00:11:27.560
they don't generate
interruptions,

00:11:27.560 --> 00:11:30.720
they don't consume battery,
and they don't consume data.

00:11:30.720 --> 00:11:32.940
So it's like an
off-switch for work.

00:11:32.940 --> 00:11:35.320
How cool is that?

00:11:35.320 --> 00:11:37.780
And there's a full list of
features in the N Developer

00:11:37.780 --> 00:11:40.010
Preview documentation.

00:11:40.010 --> 00:11:42.676
We have added over 20
features into the Android N

00:11:42.676 --> 00:11:45.300
Release for Business, and we're
adding a link to those features

00:11:45.300 --> 00:11:47.990
into the event space now.

00:11:47.990 --> 00:11:50.720
If you need to evaluate the
full range of capabilities

00:11:50.720 --> 00:11:53.090
in Android, we encourage
you to download

00:11:53.090 --> 00:11:57.690
our EMM developer focused app
called Test DPC from Play.

00:11:57.690 --> 00:12:00.520
So Test Device Policy
Client functions

00:12:00.520 --> 00:12:02.540
as a profile owner
or device owner

00:12:02.540 --> 00:12:05.150
with local controls over policy.

00:12:05.150 --> 00:12:08.070
So this lets you set policy
and restrictions locally

00:12:08.070 --> 00:12:09.845
without needing like
an enterprise server

00:12:09.845 --> 00:12:12.890
up in the cloud to
configure the device.

00:12:12.890 --> 00:12:15.280
And if you'd like to test
your app for compatibility

00:12:15.280 --> 00:12:17.810
with Android for Work, it's
a really great tool for that.

00:12:20.370 --> 00:12:23.160
So by listening to
feedback from IT

00:12:23.160 --> 00:12:25.560
and making these
improvements in Android N,

00:12:25.560 --> 00:12:27.940
we hope we've made Android
an even better solution

00:12:27.940 --> 00:12:29.600
for business.

00:12:29.600 --> 00:12:31.436
Be sure to install
the N Developer

00:12:31.436 --> 00:12:33.310
Preview if you haven't
already, and check out

00:12:33.310 --> 00:12:35.140
features like Work Mode.

00:12:35.140 --> 00:12:37.020
So you can enjoy that
vacation on the beach

00:12:37.020 --> 00:12:41.100
free of interruptions
from the office.

00:12:41.100 --> 00:12:45.500
So how can you get started
with Android for Work?

00:12:45.500 --> 00:12:48.590
As a developer, you need to
know that your app will work

00:12:48.590 --> 00:12:50.340
for all kinds of businesses.

00:12:50.340 --> 00:12:52.630
So to do that, we're
going to give you

00:12:52.630 --> 00:12:55.600
a sneak peek of a new way
to get set up with a fully

00:12:55.600 --> 00:12:57.470
functioning work profile.

00:12:57.470 --> 00:12:59.940
So you can test apps for
work on your own device,

00:12:59.940 --> 00:13:02.450
or you can use this
to set up a work

00:13:02.450 --> 00:13:04.780
profile for a clean
separation between your work

00:13:04.780 --> 00:13:07.660
and personal lives.

00:13:07.660 --> 00:13:09.770
Now in our example,
I want you to imagine

00:13:09.770 --> 00:13:14.480
I'm a marketing manager at an
aquatic supply company called

00:13:14.480 --> 00:13:16.690
Happy Guppy.

00:13:16.690 --> 00:13:20.400
Alongside the productivity
apps, I want my sales team

00:13:20.400 --> 00:13:24.800
to use Showpad to show a glossy,
interactive, magazine style

00:13:24.800 --> 00:13:27.200
brochure to
prospective customers.

00:13:27.200 --> 00:13:29.580
I want all my sales
team to have it.

00:13:29.580 --> 00:13:31.784
And I want them up
and running quickly,

00:13:31.784 --> 00:13:33.200
and not have to
search for an app,

00:13:33.200 --> 00:13:35.940
and maybe configure
it, or log into it.

00:13:35.940 --> 00:13:39.310
Let's switch to the
Chromebook please.

00:13:39.310 --> 00:13:42.950
First, let's get
set up on the web.

00:13:42.950 --> 00:13:46.340
Now Play for Work allows
IT to pre-approve apps,

00:13:46.340 --> 00:13:50.610
or make a range of optional
apps available on your device.

00:13:50.610 --> 00:13:52.820
So Rich, let's go ahead
and approve Showpad.

00:13:58.990 --> 00:13:59.510
Cool.

00:13:59.510 --> 00:14:00.010
That's done.

00:14:03.020 --> 00:14:08.850
Now, Showpad's approved--
approving, approved.

00:14:08.850 --> 00:14:13.460
We need to switch to--
now we need to set up

00:14:13.460 --> 00:14:15.640
users in our new business.

00:14:15.640 --> 00:14:17.310
Think of this as
just like IT would

00:14:17.310 --> 00:14:20.790
do when onboarding a new
employee, for example.

00:14:20.790 --> 00:14:24.700
So Rich is going to go
ahead and create a user.

00:14:24.700 --> 00:14:26.570
Now, after Rich
does this, we'll be

00:14:26.570 --> 00:14:29.090
prompted to switch to our
device and download an app that

00:14:29.090 --> 00:14:30.510
will be used to manage it.

00:14:30.510 --> 00:14:32.480
We're going to do that in a sec.

00:14:32.480 --> 00:14:34.250
But here's the cool thing.

00:14:34.250 --> 00:14:37.940
We've simplified
setup into one step.

00:14:37.940 --> 00:14:40.010
Trying out Android for
Work on your device

00:14:40.010 --> 00:14:44.490
is as simple as
scanning a QR code.

00:14:44.490 --> 00:14:47.480
Don't scan it, it won't work.

00:14:47.480 --> 00:14:48.966
So now, let's switch
to our device.

00:14:52.980 --> 00:14:54.110
All right.

00:14:54.110 --> 00:14:56.912
So first, Matt's going to
find the Android for Work app

00:14:56.912 --> 00:14:58.370
which will guide
us through set up.

00:15:01.010 --> 00:15:02.800
See there's a wizard
in here, and he's

00:15:02.800 --> 00:15:04.350
going to scan the QR code.

00:15:04.350 --> 00:15:08.070
Now after scanning the
QR code, a work profile

00:15:08.070 --> 00:15:11.020
is set up for work
apps and data.

00:15:11.020 --> 00:15:14.380
Now, just as a reminder,
the work profile

00:15:14.380 --> 00:15:18.360
is a secure space that's
managed by your employer.

00:15:18.360 --> 00:15:21.510
But of course, in this
case, the employer is you.

00:15:21.510 --> 00:15:26.400
So you're kind of
self-employed, I guess.

00:15:26.400 --> 00:15:28.650
So apps that are
available to employees

00:15:28.650 --> 00:15:32.740
are shown in a separate
Play for Work store.

00:15:32.740 --> 00:15:36.250
As well as push install
of pre-approved apps,

00:15:36.250 --> 00:15:40.020
admins are able to put
a range of optional apps

00:15:40.020 --> 00:15:43.530
into the Play for Work store for
an employee to install later.

00:15:47.140 --> 00:15:53.640
Now finally, on a BYOD device,
we place a badge on work apps.

00:15:53.640 --> 00:15:55.610
Notifications as
well are badged,

00:15:55.610 --> 00:15:59.120
and recents are badged
with the briefcase logo.

00:15:59.120 --> 00:16:01.996
This is to help distinguish
them from your personal apps.

00:16:07.250 --> 00:16:09.590
The point is here, is that
all of the setup for Android

00:16:09.590 --> 00:16:12.990
for Work has been simplified
into that single step.

00:16:12.990 --> 00:16:15.910
No more having to enter obscure
usernames and passwords,

00:16:15.910 --> 00:16:18.260
or navigate through
confusing screens.

00:16:18.260 --> 00:16:21.570
In this case, we built a
setup token into the QR code.

00:16:21.570 --> 00:16:23.580
But other mechanisms
are possible.

00:16:23.580 --> 00:16:26.030
For example, if there's no
QR reader on the device,

00:16:26.030 --> 00:16:29.500
it will fall back to
a one-time auth code.

00:16:29.500 --> 00:16:31.890
So hopefully, after
a few moments,

00:16:31.890 --> 00:16:34.580
our work profile is set up.

00:16:34.580 --> 00:16:38.876
This work profile is a separate
space for work apps and data.

00:16:38.876 --> 00:16:41.000
And the key here is that
in a real Android for Work

00:16:41.000 --> 00:16:44.650
deployment, IT only
controls the space and not

00:16:44.650 --> 00:16:47.734
the entire device.

00:16:47.734 --> 00:16:49.150
So after setup is
complete, you'll

00:16:49.150 --> 00:16:51.880
see work apps on the
device in a work profile.

00:16:51.880 --> 00:16:54.450
Initially it contains a
few badged system utilities

00:16:54.450 --> 00:16:56.007
in the Play for Work store.

00:16:56.007 --> 00:16:57.590
The work apps are
badged and organized

00:16:57.590 --> 00:17:00.310
into a Work Folder in
the Google Launcher.

00:17:00.310 --> 00:17:03.580
And the Showpad app
that we approved

00:17:03.580 --> 00:17:06.560
is being automatically
installed now from the cloud

00:17:06.560 --> 00:17:08.730
from Google Play for Work.

00:17:08.730 --> 00:17:13.058
While that's happening, let's
hope the Wi-Fi holds up.

00:17:13.058 --> 00:17:14.349
Switch back two slides, please.

00:17:17.130 --> 00:17:19.900
So we're going to be
launching this new way

00:17:19.900 --> 00:17:23.599
to set up Android for Work on
your device later this year.

00:17:23.599 --> 00:17:26.740
You'll be able to create
a fully functioning work

00:17:26.740 --> 00:17:30.430
profile with Play for Work in
it on supported devices, which

00:17:30.430 --> 00:17:31.920
include those
running Marshmallow,

00:17:31.920 --> 00:17:34.900
and of course, the
N Developer Preview.

00:17:34.900 --> 00:17:37.140
You can use the web
console to simulate

00:17:37.140 --> 00:17:40.440
the way an IT department
would deploy and manage apps,

00:17:40.440 --> 00:17:43.510
and set policies on your device.

00:17:43.510 --> 00:17:45.880
It's a great way for
developers and IT

00:17:45.880 --> 00:17:48.930
admins to evaluate Android for
Work for their organization

00:17:48.930 --> 00:17:50.960
with no extra set up required.

00:17:50.960 --> 00:17:53.190
You just can use this.

00:17:53.190 --> 00:17:55.940
So for now, you can
visit our sandbox area

00:17:55.940 --> 00:17:58.250
where we've got some of
these devices set up.

00:17:58.250 --> 00:18:00.780
And some of our
engineering team is on hand

00:18:00.780 --> 00:18:04.690
to show you this and other
demos in some more detail.

00:18:07.560 --> 00:18:09.360
MATT GOODRIDGE:
So, how does Google

00:18:09.360 --> 00:18:11.500
help you get your
app to businesses?

00:18:11.500 --> 00:18:13.910
By publishing your app
through Google Play,

00:18:13.910 --> 00:18:15.630
your app is
automatically enrolled

00:18:15.630 --> 00:18:19.490
to be distributed to businesses
through Google Play for Work.

00:18:19.490 --> 00:18:22.310
As you just saw in the demo,
when an administrator wants

00:18:22.310 --> 00:18:25.030
to deploy your app at
scale to their users,

00:18:25.030 --> 00:18:28.040
the administrator makes sure
that the users are set up

00:18:28.040 --> 00:18:31.450
for mobile management, selects
your app in the management

00:18:31.450 --> 00:18:34.830
console, and the group of users
they want to deploy it to,

00:18:34.830 --> 00:18:36.820
and in one click your
app gets deployed

00:18:36.820 --> 00:18:39.640
to one of those users' devices.

00:18:39.640 --> 00:18:41.670
This gives you another
route to getting

00:18:41.670 --> 00:18:44.350
users, versus trying to
get them one by one as

00:18:44.350 --> 00:18:46.640
if they were consumers.

00:18:46.640 --> 00:18:50.550
Now let's move on to how
to make your app really

00:18:50.550 --> 00:18:52.452
awesome for businesses.

00:18:52.452 --> 00:18:54.160
Some of the biggest
challenges that we've

00:18:54.160 --> 00:18:57.260
heard from business
customers and developers,

00:18:57.260 --> 00:19:00.190
are app customization,
configuration,

00:19:00.190 --> 00:19:02.190
and single sign-on.

00:19:02.190 --> 00:19:04.430
How do you make your
app behave differently

00:19:04.430 --> 00:19:08.510
for different customers,
and still maintain one APK?

00:19:08.510 --> 00:19:12.270
How do you enable business users
to get started with your app,

00:19:12.270 --> 00:19:14.960
with minimum manual
configuration?

00:19:14.960 --> 00:19:18.530
How do you ensure that business
customers incur minimum support

00:19:18.530 --> 00:19:21.890
costs when running your app?

00:19:21.890 --> 00:19:23.520
We're going to cover
two things that

00:19:23.520 --> 00:19:25.450
will help you address that.

00:19:25.450 --> 00:19:29.020
First of all, customization
and configuration of your app,

00:19:29.020 --> 00:19:32.380
and then secondly, integrating
business single sign-on

00:19:32.380 --> 00:19:34.840
with your app.

00:19:34.840 --> 00:19:37.820
You can allow administrators
to remotely customize

00:19:37.820 --> 00:19:40.190
and configure your app
in Android for Work

00:19:40.190 --> 00:19:42.390
by allowing a
configuration bundle

00:19:42.390 --> 00:19:45.790
to be sent down to your app in a
schema that you, the developer,

00:19:45.790 --> 00:19:47.400
define.

00:19:47.400 --> 00:19:50.260
What's really unique about
Android for Work is the way

00:19:50.260 --> 00:19:53.750
we deliver that configuration
down to the device.

00:19:53.750 --> 00:19:56.250
Later on this year, we're going
to be allowing configuration

00:19:56.250 --> 00:19:58.340
to be sent through
Google Play for Work,

00:19:58.340 --> 00:20:01.780
rather than via EMM
directly on the device.

00:20:01.780 --> 00:20:04.100
Google Play ensures
that that configuration

00:20:04.100 --> 00:20:06.620
bundle lands on the
device at the same time

00:20:06.620 --> 00:20:09.630
as install, in an
atomic operation,

00:20:09.630 --> 00:20:12.580
ensuring a seamless
experience for the user,

00:20:12.580 --> 00:20:14.570
and that the schema
of the config bundle

00:20:14.570 --> 00:20:17.580
matches the version of the
app that's being installed.

00:20:17.580 --> 00:20:20.160
So let's start looking at
how managed configuration

00:20:20.160 --> 00:20:22.340
can help you.

00:20:22.340 --> 00:20:24.580
Let's say you're the
developer of the TODOING app

00:20:24.580 --> 00:20:26.640
which you distribute
to individual users

00:20:26.640 --> 00:20:28.500
through Google Play.

00:20:28.500 --> 00:20:31.190
You only want to
maintain one APK,

00:20:31.190 --> 00:20:33.980
but your customers want
to customize your app.

00:20:33.980 --> 00:20:37.060
For example, they want to
make it corporate colors,

00:20:37.060 --> 00:20:39.640
or put their logo on it,
including in the loading

00:20:39.640 --> 00:20:41.080
screen.

00:20:41.080 --> 00:20:44.000
You can set up
configuration parameters

00:20:44.000 --> 00:20:48.470
for foreground and background
colors, a URL for the logo.

00:20:48.470 --> 00:20:50.790
And if your app loads
without the config,

00:20:50.790 --> 00:20:53.540
e.g. on individual's device
downloaded on the consumer

00:20:53.540 --> 00:20:58.280
Play Store, your app defaults
to your regular experience.

00:20:58.280 --> 00:21:02.280
If the config is available, you
can customize the experience

00:21:02.280 --> 00:21:04.380
from the first time
the app launches.

00:21:04.380 --> 00:21:06.504
You still maintain just one APK.

00:21:09.070 --> 00:21:11.690
RICHARD HYNDMAN: So
what is this magic?

00:21:11.690 --> 00:21:13.465
For app developers,
app configurations

00:21:13.465 --> 00:21:17.039
are just like app restrictions
that came in Jelly Bean.

00:21:17.039 --> 00:21:18.455
Although this time,
it's IT admins

00:21:18.455 --> 00:21:21.480
doing the configuration
and not parents.

00:21:21.480 --> 00:21:24.410
Your app can support any
configurations that you want.

00:21:24.410 --> 00:21:27.350
You just have to define them
in an XML file like this.

00:21:27.350 --> 00:21:29.200
The restriction type
that we have is string,

00:21:29.200 --> 00:21:30.741
but there's lots of
different options

00:21:30.741 --> 00:21:34.065
of integer, multiple choice,
Boolean, other things.

00:21:34.065 --> 00:21:35.690
And then you refer
to that restrictions

00:21:35.690 --> 00:21:37.550
file with all the
separate restrictions you

00:21:37.550 --> 00:21:41.210
want to specify in
your Android manifest.

00:21:41.210 --> 00:21:42.660
And it's pretty much that easy.

00:21:42.660 --> 00:21:44.540
It's easier than adding
a preferences screen

00:21:44.540 --> 00:21:47.520
into your application, because
the rest of the heavy lifting

00:21:47.520 --> 00:21:50.740
is done by the EMMs and
the Google Play APIs.

00:21:50.740 --> 00:21:52.790
The EMMs go and read
these configurations

00:21:52.790 --> 00:21:55.430
using the APIs
straight from your XML

00:21:55.430 --> 00:21:57.650
files from our servers.

00:21:57.650 --> 00:22:00.450
And then the EMMs offer
up configuration screens

00:22:00.450 --> 00:22:02.120
to IT admins.

00:22:02.120 --> 00:22:03.660
The IT admins can
then go and set

00:22:03.660 --> 00:22:07.910
in corporate logos, logon
hints, whatever they need to do.

00:22:07.910 --> 00:22:10.300
And then in your
application, you just

00:22:10.300 --> 00:22:12.190
use the restrictions
manager just

00:22:12.190 --> 00:22:14.180
like you would with app
restrictions, and call

00:22:14.180 --> 00:22:16.314
Get Application Restrictions.

00:22:16.314 --> 00:22:18.730
When you call this, you'll get
that bundle of restrictions

00:22:18.730 --> 00:22:21.790
down that the IT admins
have set through the EMM

00:22:21.790 --> 00:22:23.997
consoles that they're
used to using anyway.

00:22:23.997 --> 00:22:26.330
So it really is easier than
putting a preferences screen

00:22:26.330 --> 00:22:28.840
in your application, and you
can move all that logic out

00:22:28.840 --> 00:22:33.870
and let IT admins set
preferences for users instead.

00:22:33.870 --> 00:22:35.850
Also, you're going
to want to listen out

00:22:35.850 --> 00:22:37.140
for a broadcast on the system.

00:22:37.140 --> 00:22:39.340
There's a broadcast action
applications restriction

00:22:39.340 --> 00:22:42.790
changed, which is harder
to say than [INAUDIBLE],

00:22:42.790 --> 00:22:45.170
but IT admins can change
these things at any time.

00:22:45.170 --> 00:22:47.420
So you listen for the
broadcast, and if they change it

00:22:47.420 --> 00:22:48.960
once your apps
already installed,

00:22:48.960 --> 00:22:51.030
you'll get that broadcast
with the new bundle

00:22:51.030 --> 00:22:53.150
and you can change
whatever the IT

00:22:53.150 --> 00:22:57.517
admins changed-- whether it's
the VPN location or anything.

00:22:57.517 --> 00:22:58.600
MATT GOODRIDGE: All right.

00:22:58.600 --> 00:23:00.970
Thanks, Rich.

00:23:00.970 --> 00:23:03.870
Let's move on now to
look at single sign-on.

00:23:03.870 --> 00:23:07.200
So many companies use Web Single
Sign-on, allowing their users

00:23:07.200 --> 00:23:10.400
to access all company
software and resources using

00:23:10.400 --> 00:23:12.690
a single username and password.

00:23:12.690 --> 00:23:16.560
Single sign-on has long been a
feature of web-based services,

00:23:16.560 --> 00:23:19.650
but getting it to work
on a mobile device

00:23:19.650 --> 00:23:22.240
has been pretty
challenging until now.

00:23:22.240 --> 00:23:23.560
Architectures vary.

00:23:23.560 --> 00:23:25.670
But let's focus on
the most common case

00:23:25.670 --> 00:23:28.760
where you have a SAS backend
for your app, which might also

00:23:28.760 --> 00:23:30.380
have a web component.

00:23:30.380 --> 00:23:33.250
And that your customer is using
an enterprise authorization

00:23:33.250 --> 00:23:35.880
server to manage all of
their single sign-on and app

00:23:35.880 --> 00:23:38.550
authorization.

00:23:38.550 --> 00:23:42.020
What typically happens today,
is that the user is first

00:23:42.020 --> 00:23:47.320
prompted to identify themselves
with some type of identifier.

00:23:47.320 --> 00:23:49.480
This is often the
company email address,

00:23:49.480 --> 00:23:52.450
but it could also
be the company name.

00:23:52.450 --> 00:23:55.560
This helps the app resolve
the identity provider

00:23:55.560 --> 00:23:59.600
that the company is using
via its SAS backend.

00:23:59.600 --> 00:24:02.100
And then the app then
presents the login screen

00:24:02.100 --> 00:24:05.140
for the identity provider,
where the user enters

00:24:05.140 --> 00:24:07.800
the username again,
and their password,

00:24:07.800 --> 00:24:10.260
before getting to the app.

00:24:10.260 --> 00:24:12.350
And then if I
install another app,

00:24:12.350 --> 00:24:14.570
I have to go through
the same thing again.

00:24:14.570 --> 00:24:15.910
And again.

00:24:15.910 --> 00:24:16.410
Ouch.

00:24:18.940 --> 00:24:23.340
Wouldn't it be great
if SSO on mobile

00:24:23.340 --> 00:24:25.330
just worked like
it did on the web?

00:24:25.330 --> 00:24:28.510
If the user has already logged
in with their SSO credentials

00:24:28.510 --> 00:24:30.530
on their device,
then all they have

00:24:30.530 --> 00:24:33.832
to do is accept an OAuth
permissions prompt once,

00:24:33.832 --> 00:24:36.290
and even then they don't have
to do that if they've already

00:24:36.290 --> 00:24:39.530
accepted it on another device.

00:24:39.530 --> 00:24:42.880
We're going to go through
how to get this ideal SSO

00:24:42.880 --> 00:24:44.400
flow in your app.

00:24:44.400 --> 00:24:46.480
There are two stages.

00:24:46.480 --> 00:24:49.170
Firstly, we're going to
use managed configuration

00:24:49.170 --> 00:24:53.320
to tell your app which SSO
provider to use, and then

00:24:53.320 --> 00:24:55.780
pre-populate the username.

00:24:55.780 --> 00:24:58.880
Secondly, we're going to use a
new feature in Android called

00:24:58.880 --> 00:25:02.910
Chrome Custom Tabs together
with the AppAuth library

00:25:02.910 --> 00:25:07.080
to persist the user's
login state across apps.

00:25:07.080 --> 00:25:09.380
Let's start with a
managed configuration.

00:25:09.380 --> 00:25:12.760
You need to create a field in
managed configuration called

00:25:12.760 --> 00:25:15.560
login_hint which
your app can send

00:25:15.560 --> 00:25:18.570
to its SAS backend which will
help it resolve the identity

00:25:18.570 --> 00:25:20.240
provider.

00:25:20.240 --> 00:25:22.530
If you've implemented
WebSSO, then this

00:25:22.530 --> 00:25:25.010
should sound pretty familiar.

00:25:25.010 --> 00:25:28.550
Let's see how this login_hint
field should be used.

00:25:28.550 --> 00:25:32.570
So the administrator is going
to be using the EMM console

00:25:32.570 --> 00:25:35.100
to configure your Android app.

00:25:35.100 --> 00:25:38.590
It will send the Logon Hint in
the configuration bundle down.

00:25:38.590 --> 00:25:42.200
When your app first loads,
it sends the OAuth request

00:25:42.200 --> 00:25:46.950
to your SAS backend, it also
sends down that login hint,

00:25:46.950 --> 00:25:51.030
so the SAS backend can then
resolve which enterprise

00:25:51.030 --> 00:25:54.070
authentication server to use.

00:25:54.070 --> 00:25:55.530
Then, depending on
which technology

00:25:55.530 --> 00:25:58.380
you've used, whether it's
OAuth, whether it's SAML,

00:25:58.380 --> 00:26:00.610
or whether it's
OpenID Connect, you

00:26:00.610 --> 00:26:03.780
can communicate
to the auth server

00:26:03.780 --> 00:26:08.700
and then present the
login screen to the user.

00:26:08.700 --> 00:26:11.550
So that's the
initial sign up flow.

00:26:11.550 --> 00:26:13.580
Now let's use a
persistent login session

00:26:13.580 --> 00:26:15.770
with Chrome Custom Tabs.

00:26:15.770 --> 00:26:19.930
First of all, let's take a look
at what Chrome Custom Tabs are.

00:26:19.930 --> 00:26:23.750
It's a secure context where
you can show any web page.

00:26:23.750 --> 00:26:27.190
But the host app can't
inspect the contents.

00:26:27.190 --> 00:26:29.270
The user can see
the server address,

00:26:29.270 --> 00:26:31.490
but they can't edit it.

00:26:31.490 --> 00:26:34.700
And the cookie state is shared
with any other custom tab

00:26:34.700 --> 00:26:37.120
and Chrome browser itself.

00:26:37.120 --> 00:26:40.660
This is what's going to give
you that persistent login state.

00:26:40.660 --> 00:26:44.830
It's a system browser activity
presented in the app context.

00:26:44.830 --> 00:26:47.570
So you don't need to worry
about users being redirected

00:26:47.570 --> 00:26:49.640
between different contexts.

00:26:49.640 --> 00:26:53.220
It shipped in Chrome 45, and
it supports all devices back

00:26:53.220 --> 00:26:55.750
to Jelly Bean.

00:26:55.750 --> 00:26:58.260
Chrome ships with every
device with the Play Store.

00:26:58.260 --> 00:27:01.080
So it will be there.

00:27:01.080 --> 00:27:04.730
If your user's device defaults
to a different browser that

00:27:04.730 --> 00:27:07.870
doesn't support Custom
Tabs, then Chrome

00:27:07.870 --> 00:27:10.370
may still be available.

00:27:10.370 --> 00:27:13.110
You don't actually need to
integrate with Google Accounts.

00:27:13.110 --> 00:27:15.890
This is just an
example, by the way.

00:27:15.890 --> 00:27:20.210
So using the AppAuth
library from OpenID,

00:27:20.210 --> 00:27:23.730
you can very quickly build your
auth step, which will directly

00:27:23.730 --> 00:27:26.400
show the customer's
identity provider

00:27:26.400 --> 00:27:31.360
login screen if the user is not
yet signed in on the device.

00:27:31.360 --> 00:27:33.130
The enterprise auth
server is configured

00:27:33.130 --> 00:27:37.750
to pass the username from the
login_hint to the identity

00:27:37.750 --> 00:27:41.310
provider, then it will
be pre-populated as well.

00:27:41.310 --> 00:27:44.270
And if the user has already
signed into their account,

00:27:44.270 --> 00:27:47.820
then they go straight in-- no
username and password at all.

00:27:47.820 --> 00:27:48.960
How easy is that?

00:27:48.960 --> 00:27:51.010
Really easy.

00:27:51.010 --> 00:27:51.610
Rich.

00:27:51.610 --> 00:27:53.680
RICHARD HYNDMAN:
Thanks very much.

00:27:53.680 --> 00:27:56.460
So you can simplify the
SSO in your application,

00:27:56.460 --> 00:27:59.300
making lives easier for
users and IT admins.

00:27:59.300 --> 00:28:01.040
And the best bit
about it, is there's

00:28:01.040 --> 00:28:03.450
a library available for
both Android and iOS

00:28:03.450 --> 00:28:06.170
that's going to do all
the heavy lifting for you.

00:28:06.170 --> 00:28:09.360
It speaks both OAuth
2 and OpenID Connect,

00:28:09.360 --> 00:28:11.800
and has convenience methods
to assist with common tasks

00:28:11.800 --> 00:28:14.760
like performing actions
with a fresh token.

00:28:14.760 --> 00:28:17.030
As Matt says, it'll use
Chrome Custom Tabs which

00:28:17.030 --> 00:28:18.980
has access to that
shared cookie jar,

00:28:18.980 --> 00:28:20.350
so it's just going to work.

00:28:20.350 --> 00:28:22.100
And if Chrome Custom
Tabs isn't available,

00:28:22.100 --> 00:28:24.070
it falls back to
the system browser.

00:28:24.070 --> 00:28:26.600
You just lose that in-app
branding that you'd get.

00:28:26.600 --> 00:28:30.290
So you can head over
to github.com/openid

00:28:30.290 --> 00:28:33.024
and there's an AAR there
for Android so you can drop

00:28:33.024 --> 00:28:33.690
in your project.

00:28:33.690 --> 00:28:35.664
But it's also in Maven Central.

00:28:35.664 --> 00:28:37.330
So you can stick it
in your Gradle file,

00:28:37.330 --> 00:28:39.205
you've got the dependency,
and you can get up

00:28:39.205 --> 00:28:41.660
and running with the
new SSO flows embedded

00:28:41.660 --> 00:28:43.790
inside your applications.

00:28:43.790 --> 00:28:45.540
Also as Matt
mentioned, you're going

00:28:45.540 --> 00:28:46.831
to want to use that login_hint.

00:28:46.831 --> 00:28:48.620
Are people already
doing SSO flows

00:28:48.620 --> 00:28:51.080
and OAuth with login_hints?

00:28:51.080 --> 00:28:52.140
People nodding, one, two.

00:28:52.140 --> 00:28:52.890
Yeah, quite a few.

00:28:52.890 --> 00:28:54.600
OK so, for the app
restriction for login_hints,

00:28:54.600 --> 00:28:55.990
it's exactly the same as before.

00:28:55.990 --> 00:29:00.400
Just give the IT admins
that item in their console

00:29:00.400 --> 00:29:03.770
by putting this XML in your
application so they can add

00:29:03.770 --> 00:29:06.180
a login_hint that gets driven
down to your application,

00:29:06.180 --> 00:29:10.854
and then your auth flow
is much more simple.

00:29:10.854 --> 00:29:11.770
MATT GOODRIDGE: Great.

00:29:11.770 --> 00:29:12.920
Thanks, Rich.

00:29:12.920 --> 00:29:14.820
So that's the theory.

00:29:14.820 --> 00:29:18.551
But let's have a look at it on
a real app in a real device.

00:29:18.551 --> 00:29:19.550
So let's watch the demo.

00:29:19.550 --> 00:29:20.930
Thank you.

00:29:20.930 --> 00:29:23.030
So we're going to
go back to Showpad

00:29:23.030 --> 00:29:24.510
which we installed earlier.

00:29:24.510 --> 00:29:26.000
But first of all
I'm going to you

00:29:26.000 --> 00:29:29.640
Showpad running in
a consumer profile,

00:29:29.640 --> 00:29:32.790
so you can see the
difference in the experience.

00:29:32.790 --> 00:29:38.970
So I've already
installed Showpad here,

00:29:38.970 --> 00:29:40.700
just from the
consumer Play Store.

00:29:40.700 --> 00:29:43.590
It launches with a
warm welcome, telling

00:29:43.590 --> 00:29:45.590
me which features it's got.

00:29:45.590 --> 00:29:48.390
And then I can either
log in, or try a demo.

00:29:48.390 --> 00:29:50.220
I'm going to log in.

00:29:50.220 --> 00:29:52.980
It first asked me for
my organization name.

00:29:52.980 --> 00:29:56.140
So this is this identifier
that I mentioned before.

00:29:56.140 --> 00:29:58.710
So I'm going to
type in "Google."

00:29:58.710 --> 00:30:01.410
Let's hope my fat fingers work.

00:30:01.410 --> 00:30:03.800
And then I've got
my email address,

00:30:03.800 --> 00:30:05.200
so I need to put that in.

00:30:08.320 --> 00:30:10.518
And that's probably wrong.

00:30:10.518 --> 00:30:11.930
So never mind.

00:30:11.930 --> 00:30:12.430
Right.

00:30:12.430 --> 00:30:13.972
We'll just do that.

00:30:13.972 --> 00:30:16.430
Make sure you're close enough
[INAUDIBLE] and the password.

00:30:16.430 --> 00:30:17.070
Right?

00:30:17.070 --> 00:30:17.990
Yep.

00:30:17.990 --> 00:30:20.080
But if I'm a busy
sales guy, I don't

00:30:20.080 --> 00:30:23.039
want to have to set up
every app like this.

00:30:23.039 --> 00:30:24.580
So let's take a look
at what it looks

00:30:24.580 --> 00:30:28.590
like if it's preconfigured
with managed configuration.

00:30:28.590 --> 00:30:31.240
So I'm going to go back
to the version of Showpad

00:30:31.240 --> 00:30:34.700
that we pre-installed earlier,
which is in the work profile.

00:30:34.700 --> 00:30:38.420
I start off with the same
warm welcome showing me

00:30:38.420 --> 00:30:39.650
what features.

00:30:39.650 --> 00:30:42.380
But once I'm through that, the
only thing I can do is log in.

00:30:42.380 --> 00:30:44.580
So I'm going to go and log in.

00:30:44.580 --> 00:30:50.550
And then it's automatically
seeing the company name,

00:30:50.550 --> 00:30:53.420
and it's showing me my
username there as well.

00:30:53.420 --> 00:30:56.060
So I know which username
I'm logging in as,

00:30:56.060 --> 00:30:59.950
and then I can recall which
passwords to get started with.

00:30:59.950 --> 00:31:00.450
OK.

00:31:00.450 --> 00:31:01.834
Back to slides, please.

00:31:01.834 --> 00:31:02.333
Sweet.

00:31:06.080 --> 00:31:10.220
So, I've had the app pushed
to my sales team's devices

00:31:10.220 --> 00:31:12.530
and preconfigured
for them, saving them

00:31:12.530 --> 00:31:15.740
time and brainpower, and
giving them more time

00:31:15.740 --> 00:31:17.800
to spend with our customers.

00:31:17.800 --> 00:31:21.080
As a developer, you can alter
the behavior of your app

00:31:21.080 --> 00:31:22.900
based on the
configuration that can

00:31:22.900 --> 00:31:25.790
be customized on a
per-customer, per-user,

00:31:25.790 --> 00:31:27.495
or even a per-device basis.

00:31:30.580 --> 00:31:33.110
You should also be aware of
an industry standardization

00:31:33.110 --> 00:31:36.260
effort called AppConfig
Community which

00:31:36.260 --> 00:31:39.250
is initiated by a group of
leading enterprise mobility

00:31:39.250 --> 00:31:41.420
management partners.

00:31:41.420 --> 00:31:44.700
AppConfig is working with
developers and mobile platforms

00:31:44.700 --> 00:31:47.190
and others in the
ecosystem, to come up

00:31:47.190 --> 00:31:49.700
with some common best
practices on configuring

00:31:49.700 --> 00:31:51.980
apps in a business environment.

00:31:51.980 --> 00:31:55.180
Google is working with
AppConfig to further evolve

00:31:55.180 --> 00:31:57.530
the app configuration
for the benefit

00:31:57.530 --> 00:31:59.270
of the entire ecosystem.

00:31:59.270 --> 00:32:02.340
And they've recently unveiled
their initial Android guidance

00:32:02.340 --> 00:32:03.870
in collaboration with Google.

00:32:03.870 --> 00:32:05.070
So check it out.

00:32:05.070 --> 00:32:07.316
We're posting a link
to the event space now.

00:32:11.227 --> 00:32:12.310
JAMES KELLY: Thanks, Matt.

00:32:12.310 --> 00:32:13.685
I hope you're all
going to go off

00:32:13.685 --> 00:32:17.060
and provision manage
configuration.

00:32:17.060 --> 00:32:19.670
Now we're all
familiar with the kind

00:32:19.670 --> 00:32:21.980
of devices we carry every day.

00:32:21.980 --> 00:32:25.800
They're great for fun, and
productivity, and selfies.

00:32:25.800 --> 00:32:29.040
But beyond that, there is a
huge range of Android devices

00:32:29.040 --> 00:32:32.840
suitable for a diverse
range of workplaces.

00:32:32.840 --> 00:32:35.000
So just look in the
world around you.

00:32:35.000 --> 00:32:36.980
And wherever you
see a clipboard,

00:32:36.980 --> 00:32:41.370
there's actually an amazing
opportunity for a good Android

00:32:41.370 --> 00:32:44.260
app experience.

00:32:44.260 --> 00:32:48.860
Now, we partnered with a group
of OEMs including Honeywell,

00:32:48.860 --> 00:32:53.690
Zebra, or Zebra,
Kyocera, and Panasonic

00:32:53.690 --> 00:32:55.820
to bring a range of
these Android devices

00:32:55.820 --> 00:32:58.000
to the wider workplace.

00:32:58.000 --> 00:33:01.140
All these devices feature
tough external cases,

00:33:01.140 --> 00:33:03.600
and a barcode-scanning
capability.

00:33:03.600 --> 00:33:06.720
So they're perfect
for use in the field.

00:33:06.720 --> 00:33:08.520
And we have heard
from many customers

00:33:08.520 --> 00:33:13.180
that they want to deploy managed
Android devices in logistics,

00:33:13.180 --> 00:33:15.690
retail, construction sectors.

00:33:15.690 --> 00:33:17.570
And so we've invested
in making Android

00:33:17.570 --> 00:33:21.090
for Work a really great
platform to do that.

00:33:21.090 --> 00:33:23.220
And now we're asking
our developers

00:33:23.220 --> 00:33:25.250
to build amazing app
experiences for what

00:33:25.250 --> 00:33:29.150
we call COSU-- corporate
owned single-use devices.

00:33:29.150 --> 00:33:33.690
So what could a
COSU app look like?

00:33:33.690 --> 00:33:35.910
Here's one possibility.

00:33:35.910 --> 00:33:38.210
Now, we all love the convenience
of shopping from home.

00:33:38.210 --> 00:33:40.050
And if you're
anything like me, you

00:33:40.050 --> 00:33:41.740
order everything from
groceries to gifts

00:33:41.740 --> 00:33:44.150
from the comfort of your couch.

00:33:44.150 --> 00:33:48.350
In fact, Matt told me his guppy
fish was feeling a bit down.

00:33:50.950 --> 00:33:54.410
And as this real screenshot
from Matt's house shows,

00:33:54.410 --> 00:33:57.660
he decided to order
his guppy a new pal.

00:33:57.660 --> 00:34:00.470
Now I'm sure most of us don't
think about how our latest

00:34:00.470 --> 00:34:03.980
purchase makes its way to us.

00:34:03.980 --> 00:34:06.140
Android for Work
makes it a breeze

00:34:06.140 --> 00:34:09.719
for companies like Happy
Guppy to set up and manage

00:34:09.719 --> 00:34:13.500
a fleet of devices so all
of their delivery drivers

00:34:13.500 --> 00:34:17.739
have the apps they need
in the palm of their hand.

00:34:17.739 --> 00:34:22.480
First, IT will setup the
fleet of COSU devices.

00:34:22.480 --> 00:34:24.600
And there are a number
of ways to do this.

00:34:24.600 --> 00:34:27.690
But from a brand new
out-of-the-box device,

00:34:27.690 --> 00:34:31.960
setting up Android for Work
is as simple as an NFC bump.

00:34:31.960 --> 00:34:34.520
And in the N Developer
Preview, we've

00:34:34.520 --> 00:34:39.480
added fast setup using QR codes
into the setup wizard too.

00:34:39.480 --> 00:34:41.250
Once the devices
have been set up,

00:34:41.250 --> 00:34:44.780
they can be locked down so
that only apps authorized by IT

00:34:44.780 --> 00:34:47.320
are accessible in the launcher.

00:34:47.320 --> 00:34:54.340
So in this way, by combining
apps for barcode scanning,

00:34:54.340 --> 00:35:02.070
with apps for scheduling, and
apps like Maps for navigation,

00:35:02.070 --> 00:35:06.000
with their employee and
delivery database in the cloud,

00:35:06.000 --> 00:35:10.910
Happy Guppy drivers can use a
single COSU device for the job.

00:35:10.910 --> 00:35:14.190
And when the driver
reaches Matt's house,

00:35:14.190 --> 00:35:15.760
they can use the
barcode scanning app

00:35:15.760 --> 00:35:18.090
to record the delivery.

00:35:18.090 --> 00:35:20.630
They can get a signature,
or maybe even a photo

00:35:20.630 --> 00:35:25.650
if they left the package in a
safe place, or unsafe place.

00:35:25.650 --> 00:35:29.700
And make Matt a happy
Happy Guppy customer.

00:35:29.700 --> 00:35:32.740
So whether it's running a single
app on a dedicated device,

00:35:32.740 --> 00:35:35.630
or optimizing the entire
end-to-end experience

00:35:35.630 --> 00:35:38.610
for a mobile workforce,
you can develop great apps

00:35:38.610 --> 00:35:40.040
for mobile workers.

00:35:40.040 --> 00:35:43.625
IT can use Play for Work to
keep them up-to-date as well.

00:35:43.625 --> 00:35:45.500
You know, Matt, I'd have
gone a different way

00:35:45.500 --> 00:35:48.140
with the interior.

00:35:48.140 --> 00:35:51.850
But it looks like Matt's
guppy loves his new pal.

00:35:51.850 --> 00:35:54.261
So how would you build
a great COSU app?

00:35:54.261 --> 00:35:56.135
To give you some pointers,
let's welcome back

00:35:56.135 --> 00:35:58.127
Rich to show you how.

00:35:58.127 --> 00:35:58.960
RICHARD HYNDMAN: OK.

00:35:58.960 --> 00:36:02.670
So for a COSU app, you've
got three main points.

00:36:02.670 --> 00:36:04.460
First of all, you've
got the device owner.

00:36:04.460 --> 00:36:06.293
The device owner's going
to go on the device

00:36:06.293 --> 00:36:09.182
and allow IT admins to
remotely own that device.

00:36:09.182 --> 00:36:10.640
That's really
important because you

00:36:10.640 --> 00:36:12.190
don't want the
user of the device

00:36:12.190 --> 00:36:13.970
to have to configure it at all.

00:36:13.970 --> 00:36:16.370
Then you're going to have
an NFC provisioning app.

00:36:16.370 --> 00:36:18.160
The NFC provisioning
app, you bump

00:36:18.160 --> 00:36:20.270
with the device when
it's in its setup wizard,

00:36:20.270 --> 00:36:22.980
and it transfers the data
for that device owner

00:36:22.980 --> 00:36:23.789
to be installed.

00:36:23.789 --> 00:36:25.580
And then you've got
your single-use device,

00:36:25.580 --> 00:36:29.350
in this case the Happy Guppy
delivery driver's application.

00:36:29.350 --> 00:36:32.880
So here-- I'll show you how to
get the NFC app on the device

00:36:32.880 --> 00:36:34.480
owner app in a minute.

00:36:34.480 --> 00:36:35.980
But once you've got
the NFC app, you

00:36:35.980 --> 00:36:37.170
give it some configurations.

00:36:37.170 --> 00:36:39.900
And these configurations,
when you bump it

00:36:39.900 --> 00:36:43.790
with the single-use
device, are the things

00:36:43.790 --> 00:36:45.690
that are sent over
to the setup wizard.

00:36:45.690 --> 00:36:50.180
So in our case, we've got
this list of URLs, checksums,

00:36:50.180 --> 00:36:52.600
and package names.

00:36:52.600 --> 00:36:55.354
They're going to go over during
the NFC bump onto the device.

00:36:55.354 --> 00:36:56.770
And the device in
the setup wizard

00:36:56.770 --> 00:37:00.210
is going to download the
device owner, install it,

00:37:00.210 --> 00:37:04.116
and the device owner will
set policies on that device.

00:37:04.116 --> 00:37:05.490
The first thing
it's going to do,

00:37:05.490 --> 00:37:08.060
is go and find our COSU app,
which is also passed in here.

00:37:08.060 --> 00:37:09.580
This is our Happy
Guppy lucky app,

00:37:09.580 --> 00:37:13.260
and it will then also
install that application.

00:37:13.260 --> 00:37:15.700
It then adds it to a
whitelist of applications

00:37:15.700 --> 00:37:17.920
that can run as kiosk
applications, which

00:37:17.920 --> 00:37:20.120
is why I've got the
package name at the bottom.

00:37:22.750 --> 00:37:24.500
So if you want to try
it out for yourself,

00:37:24.500 --> 00:37:26.590
I will show you the demo
of this in a second.

00:37:26.590 --> 00:37:28.510
You can just go into
either Android Studio,

00:37:28.510 --> 00:37:29.970
and go to Import
Samples, and type

00:37:29.970 --> 00:37:32.386
in "device admin" and you'll
see you've got a few samples.

00:37:32.386 --> 00:37:34.840
But the bottom two,
NfcProvisioning and Device

00:37:34.840 --> 00:37:36.434
Owner are the ones we're using.

00:37:36.434 --> 00:37:38.350
So you've actually got
the NfcProvisioning app

00:37:38.350 --> 00:37:39.950
for creating a COSU device.

00:37:39.950 --> 00:37:42.410
And the Device Owner app
which goes on as the policy

00:37:42.410 --> 00:37:45.190
client, which owns the device.

00:37:45.190 --> 00:37:47.510
You can also go to a Google
Samples GitHub [INAUDIBLE].

00:37:47.510 --> 00:37:51.260
They're always, always
available there as well.

00:37:51.260 --> 00:37:53.830
So in the Happy
Guppy case, you need

00:37:53.830 --> 00:37:56.640
to set your kiosk app,
the delivery driver app,

00:37:56.640 --> 00:37:58.330
into full screen mode.

00:37:58.330 --> 00:38:00.980
And to do that, you've got the
startlockTask and stoplockTask

00:38:00.980 --> 00:38:02.970
APIs that came in.

00:38:02.970 --> 00:38:04.870
Before, I think they came in--

00:38:04.870 --> 00:38:05.140
JAMES KELLY: Marshmallow?

00:38:05.140 --> 00:38:05.580
RICHARD HYNDMAN:
Maybe Jelly Bean?

00:38:05.580 --> 00:38:05.840
Marshmallow?

00:38:05.840 --> 00:38:06.300
JAMES KELLY: Marshmallow.

00:38:06.300 --> 00:38:07.670
RICHARD HYNDMAN: OK.

00:38:07.670 --> 00:38:09.620
If you use those,
it pins the app

00:38:09.620 --> 00:38:11.780
to the device in full
screen, but there's

00:38:11.780 --> 00:38:14.530
user consent dialogs and
the user can back out.

00:38:14.530 --> 00:38:17.360
With Device Owner, if you're
on this locked task whitelist,

00:38:17.360 --> 00:38:19.650
it will go into full screen
and the user can never

00:38:19.650 --> 00:38:20.880
get back out of it again.

00:38:20.880 --> 00:38:23.600
You'll see those demo kiosks
we've got over on the Android

00:38:23.600 --> 00:38:24.660
for Work sandbox.

00:38:24.660 --> 00:38:27.710
And it's just a full
screen kiosk device.

00:38:27.710 --> 00:38:30.446
So you're going to want to
build a backdoor for yourself

00:38:30.446 --> 00:38:32.446
whilst you're developing,
or else you may end up

00:38:32.446 --> 00:38:35.061
with a very single-use device,
you can never get back out of.

00:38:35.061 --> 00:38:36.810
JAMES KELLY: That's
expensive development.

00:38:36.810 --> 00:38:37.530
RICHARD HYNDMAN: That
could be expensive.

00:38:37.530 --> 00:38:38.930
JAMES KELLY: $500 device. $500--

00:38:38.930 --> 00:38:40.330
RICHARD HYNDMAN: In our case,
when we were developing,

00:38:40.330 --> 00:38:42.770
we've got this barcode
scanner from Honeywell.

00:38:42.770 --> 00:38:45.870
We have an admin barcode, and
if you scan that admin barcode,

00:38:45.870 --> 00:38:48.350
it drops back out of single-use
mode, called stoplockTask.

00:38:48.350 --> 00:38:50.920
It drops out, and then
you can reset your device,

00:38:50.920 --> 00:38:53.002
or do what you
need to do with it.

00:38:53.002 --> 00:38:54.460
So as a developer,
there's a couple

00:38:54.460 --> 00:38:57.310
of things to consider
for single-use devices.

00:38:57.310 --> 00:38:58.810
First of all, you're
going to want--

00:38:58.810 --> 00:39:00.360
sorry, single-use applications.

00:39:00.360 --> 00:39:02.200
you're going to want
your application

00:39:02.200 --> 00:39:03.990
to be entirely self-contained.

00:39:03.990 --> 00:39:06.180
You're going to want to
own that user journey.

00:39:06.180 --> 00:39:07.800
If you're a hotel
kiosk app, you're

00:39:07.800 --> 00:39:10.550
going to not want to let the
user somehow click a link,

00:39:10.550 --> 00:39:12.050
and get into a web
browser, and then

00:39:12.050 --> 00:39:14.370
just start browsing the
web on your hotel kiosk.

00:39:14.370 --> 00:39:15.745
You're going to
want to keep them

00:39:15.745 --> 00:39:18.510
in the room booking system.

00:39:18.510 --> 00:39:21.390
So you have a website
you want to link

00:39:21.390 --> 00:39:23.660
to-- put it in a webview
or a Chrome Custom Tab

00:39:23.660 --> 00:39:25.732
and own the entire experience.

00:39:25.732 --> 00:39:27.440
If you do need to link
out to other apps,

00:39:27.440 --> 00:39:30.199
you're defining kind of
a multi-app COSU system,

00:39:30.199 --> 00:39:32.490
and you'll have to figure
out the entry points and exit

00:39:32.490 --> 00:39:32.740
points.

00:39:32.740 --> 00:39:33.940
Or maybe just decide
that you're going

00:39:33.940 --> 00:39:36.106
to want to have a launcher,
and have a slightly more

00:39:36.106 --> 00:39:36.930
complex system.

00:39:36.930 --> 00:39:39.260
You can still have launchers
on single-use devices

00:39:39.260 --> 00:39:40.660
if you want to.

00:39:40.660 --> 00:39:43.984
So we have that Test DPC app
that James mentioned earlier,

00:39:43.984 --> 00:39:45.650
and you can go to
Google Samples as well

00:39:45.650 --> 00:39:48.610
and get the Test DPC app to
test all the Android for Work

00:39:48.610 --> 00:39:50.269
features out.

00:39:50.269 --> 00:39:52.060
But [INAUDIBLE] is not
all that complicated

00:39:52.060 --> 00:39:54.090
if you're just getting
into the mindset of being

00:39:54.090 --> 00:39:57.237
a single-use
application developer.

00:39:57.237 --> 00:39:58.320
So let's see it in action.

00:40:05.380 --> 00:40:08.610
JAMES KELLY: So
here is an example

00:40:08.610 --> 00:40:10.770
of a device from
Honeywell that's

00:40:10.770 --> 00:40:12.930
great for a mobile workforce.

00:40:12.930 --> 00:40:16.470
It's a rugged device, running
Marshmallow, that features

00:40:16.470 --> 00:40:18.570
a built-in laser scanner.

00:40:18.570 --> 00:40:22.960
And it's just what we need
to get our guppy his new pal.

00:40:22.960 --> 00:40:25.755
How could this work for
real, using an app for work?

00:40:25.755 --> 00:40:26.255
Rich?

00:40:26.255 --> 00:40:27.421
We'd better get [INAUDIBLE].

00:40:27.421 --> 00:40:29.869
RICHARD HYNDMAN:
[INAUDIBLE] that one, James.

00:40:29.869 --> 00:40:31.660
Can we get the WolfVision
in the projector?

00:40:31.660 --> 00:40:33.940
JAMES KELLY: Yeah let's
go to the WolfVision.

00:40:33.940 --> 00:40:34.773
RICHARD HYNDMAN: OK.

00:40:34.773 --> 00:40:37.100
So this is the laser scanning,
ruggedized, Honeywell

00:40:37.100 --> 00:40:39.460
Marshmallow machine that
we'll be using today.

00:40:39.460 --> 00:40:42.080
And it's just factory
reset on the setup wizard.

00:40:42.080 --> 00:40:45.670
So to show how easy
it is to jinx a demo,

00:40:45.670 --> 00:40:48.850
I'm going to NFC bump it, and
turn it into a delivery driver

00:40:48.850 --> 00:40:49.517
application now.

00:40:49.517 --> 00:40:51.141
JAMES KELLY: Now this
is just like what

00:40:51.141 --> 00:40:53.130
the IT team would do
when they're setting up

00:40:53.130 --> 00:40:54.342
devices for their workforce.

00:40:54.342 --> 00:40:56.050
RICHARD HYNDMAN: Just
so you can-- sorry.

00:40:56.050 --> 00:40:57.040
JAMES KELLY: Oh, sorry.

00:40:57.040 --> 00:41:03.530
During setup, on the left here,
we have the programming device.

00:41:03.530 --> 00:41:06.240
Now, once set up of the
Honeywell device is completed,

00:41:06.240 --> 00:41:09.378
you'll see we're landed right
into our starting screen.

00:41:11.910 --> 00:41:14.170
Now during setup,
device owner is set.

00:41:14.170 --> 00:41:15.970
And this is an important
step, because it

00:41:15.970 --> 00:41:19.580
means the device can
only be managed by IT.

00:41:19.580 --> 00:41:22.230
And IT can set appropriate
security policies

00:41:22.230 --> 00:41:25.132
to govern device and app usage.

00:41:25.132 --> 00:41:27.090
So you'll see we're all
set up and ready to go.

00:41:27.090 --> 00:41:28.170
As simple as that.

00:41:28.170 --> 00:41:30.590
Wasn't that fast?

00:41:30.590 --> 00:41:36.440
Now, we need to, I think,
load up on packages.

00:41:36.440 --> 00:41:39.500
And hit the streets.

00:41:39.500 --> 00:41:40.770
RICHARD HYNDMAN: Right.

00:41:40.770 --> 00:41:43.120
Getting my delivery
driver gown on.

00:41:43.120 --> 00:41:45.616
I should've turned it
inside out beforehand.

00:41:45.616 --> 00:41:48.680
JAMES KELLY: Now what will
happen first in our demo app,

00:41:48.680 --> 00:41:54.837
is that Rich will scan
his employee ID badge.

00:41:54.837 --> 00:41:55.670
RICHARD HYNDMAN: OK.

00:41:55.670 --> 00:41:58.370
So, I scan this with a
lovely laser scanner.

00:41:58.370 --> 00:41:59.480
And it logged me in.

00:41:59.480 --> 00:42:00.521
JAMES KELLY: There we go.

00:42:00.521 --> 00:42:03.320
We've got delivery details
for his various packages.

00:42:03.320 --> 00:42:06.220
In the demo app, we've
integrated navigation

00:42:06.220 --> 00:42:09.410
using Google Maps right
into the launcher app.

00:42:09.410 --> 00:42:12.470
So that he can use a Google
Maps to safely navigate along

00:42:12.470 --> 00:42:14.120
the optimal route.

00:42:14.120 --> 00:42:17.560
Now devices like this are
now shipping with Google Apps

00:42:17.560 --> 00:42:19.610
like Maps installed.

00:42:19.610 --> 00:42:21.450
So as a developer,
you can be sure

00:42:21.450 --> 00:42:24.999
that navigation is
available on the device.

00:42:24.999 --> 00:42:27.040
Oh, look his delivery is
right on the Googleplex.

00:42:27.040 --> 00:42:27.905
How about that.

00:42:31.030 --> 00:42:34.430
Now once Rich arrives, he
can drop off his package

00:42:34.430 --> 00:42:36.182
and get a signature.

00:42:36.182 --> 00:42:37.390
RICHARD HYNDMAN: Happy Guppy.

00:42:37.390 --> 00:42:39.170
There we go.

00:42:39.170 --> 00:42:40.460
JAMES KELLY: Wow, cool.

00:42:40.460 --> 00:42:43.300
As an employee, Rich can't
break out of this mode.

00:42:43.300 --> 00:42:48.055
So there's no risk of confusion,
and support costs are reduced.

00:42:48.055 --> 00:42:49.680
The device can be
remotely administered

00:42:49.680 --> 00:42:52.820
by IT using a wide range
of Android APIs, such as,

00:42:52.820 --> 00:42:55.200
for example, being able to
remotely reboot or manage

00:42:55.200 --> 00:42:57.020
the device.

00:42:57.020 --> 00:42:58.685
So you're going to
scan for delivery?

00:42:58.685 --> 00:42:59.560
RICHARD HYNDMAN: Yep.

00:42:59.560 --> 00:43:03.330
So if I go and scan the
package-- thank you.

00:43:03.330 --> 00:43:05.886
Can I get a signature?

00:43:05.886 --> 00:43:06.430
There you go.

00:43:06.430 --> 00:43:06.950
You can all see Matt's--

00:43:06.950 --> 00:43:07.940
JAMES KELLY: Oh,
Matt looks so happy.

00:43:07.940 --> 00:43:09.190
RICHARD HYNDMAN: There you go.

00:43:09.190 --> 00:43:11.700
JAMES KELLY: As you can see,
we've got the signature.

00:43:11.700 --> 00:43:15.270
And Matt's guppy has
a cool new friend.

00:43:15.270 --> 00:43:16.320
Using Android.

00:43:16.320 --> 00:43:18.832
[APPLAUSE]

00:43:18.832 --> 00:43:20.540
RICHARD HYNDMAN: And
I want to reiterate,

00:43:20.540 --> 00:43:23.040
that was provisioning an entire
single-use device from start

00:43:23.040 --> 00:43:24.081
to end during a delivery.

00:43:24.081 --> 00:43:25.420
JAMES KELLY: In about a minute.

00:43:25.420 --> 00:43:27.740
Now this is just one
example of an app for work,

00:43:27.740 --> 00:43:29.690
optimized for COSU devices.

00:43:29.690 --> 00:43:33.670
But there are many, many more--
from retail to hospitality

00:43:33.670 --> 00:43:34.750
to health care.

00:43:34.750 --> 00:43:36.530
We're only just getting started.

00:43:36.530 --> 00:43:40.030
MATT GOODRIDGE: So, are you all
ready to seize the opportunity

00:43:40.030 --> 00:43:42.530
to make a difference
to an entire workforce?

00:43:42.530 --> 00:43:45.520
Remember how Google and
Android can help you.

00:43:45.520 --> 00:43:48.220
Android is easy to
set up for businesses.

00:43:48.220 --> 00:43:51.460
It's fast for businesses
to deploy your app at scale

00:43:51.460 --> 00:43:53.370
with Google Play for Work.

00:43:53.370 --> 00:43:55.720
And you can make apps
awesome for businesses

00:43:55.720 --> 00:43:59.680
by allowing them to be
customized, and configured,

00:43:59.680 --> 00:44:02.950
and use SSO as
slickly as on the web.

00:44:02.950 --> 00:44:04.750
Android is ready for business.

00:44:04.750 --> 00:44:06.560
Now let's go build apps for it.

00:44:06.560 --> 00:44:08.530
Join us for the public
launch of our Android

00:44:08.530 --> 00:44:10.450
for Work Developer
Community called

00:44:10.450 --> 00:44:13.740
DevHub where there are loads
of resources for work app

00:44:13.740 --> 00:44:14.890
developers.

00:44:14.890 --> 00:44:15.430
Thank you.

00:44:15.430 --> 00:44:16.030
[APPLAUSE]

00:44:16.030 --> 00:44:19.380
[MUSIC PLAYING]

