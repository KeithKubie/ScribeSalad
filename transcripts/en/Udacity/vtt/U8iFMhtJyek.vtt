WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
The last thing I want to tell you before we go into programming

00:00:02.000 --> 00:00:05.000
is why this makes any sense.

00:00:05.000 --> 00:00:08.000
Suppose you fill the matrix, which I call omega [Ω],

00:00:08.000 --> 00:00:12.000
and the vector, which I give the Greek name of xi [ξ].

00:00:12.000 --> 00:00:15.000
My apologies to my non-Greek students here.

00:00:15.000 --> 00:00:17.000
You Greek students should be very proud.

00:00:17.000 --> 00:00:19.000
You'll always have a special place in my mathematical heart.

00:00:19.000 --> 00:00:26.000
Then I can find the best solution for all the landmark positions or the world positions

00:00:26.000 --> 00:00:28.000
by a very simple mathematical trick that is completely counterintuitive.

00:00:28.000 --> 00:00:37.000
I invert the omega, I right multiply with xi, and out comes a vector mu [µ],

00:00:37.000 --> 00:00:43.000
which gives me the best estimates for all the robot locations and the landmark locations.

00:00:43.000 --> 00:00:48.000
Now, that is quite amazing, because all it means in Graph SLAM is

00:00:48.000 --> 00:00:52.000
that you keep adding numbers to these matrices every time you see a constraint.

00:00:52.000 --> 00:00:55.000
When you're done with it, you run a very simple procedure

00:00:55.000 --> 00:00:57.000
and out comes the best places for your robot.

00:00:57.000 --> 00:01:00.000
Let's go and try it. I'm now going to ask you to program this.

00:01:00.000 --> 00:01:04.000
I'm giving you my matrix class, so you can do this easily.

00:01:04.000 --> 00:01:09.000
What I'm asking you to do is to build a 3 x 3 matrix and, of course, a 3 x 1 vector

00:01:09.000 --> 00:01:14.000
about which you shall state that our initial location is -3.

00:01:14.000 --> 00:01:23.000
X1 in exportation is obtained by adding 5 to x0 and x2 is obtained by adding 3 to x1.

00:01:23.000 --> 00:01:26.000
In exportation what we should get out when we run

00:01:26.000 --> 00:01:31.000
the mu equals omega minus 1 times xi trick is that x0 becomes -3,

00:01:31.000 --> 00:01:36.000
x1 becomes 2, and x2 becomes 5.

00:01:36.000 --> 00:01:40.000
Diving straight into our programming environment,

00:01:40.000 --> 00:01:44.000
I'm giving you a matrix class--you might want to take a moment to look over it.

00:01:44.000 --> 00:01:47.000
It's a little bit augmented to what I've given you before,

00:01:47.000 --> 00:01:52.000
and I fixed a bug with the inversion code, which is quite essential.

00:01:52.000 --> 00:01:56.000
If I run it, I construct an omega matrix piece-by-piece--

00:01:56.000 --> 00:01:58.000
that's the one that you should come out with--

00:01:58.000 --> 00:02:04.000
a xi vector, and then I run and print out, using the "show" command,

00:02:04.000 --> 00:02:08.000
the result of omega to the -1 times c.

00:02:08.000 --> 00:02:11.000
You can see -3, 2, and 5 are the correct results

00:02:11.000 --> 00:02:14.000
that result from the omega matrix and the xi vector.

00:02:14.000 --> 00:02:18.000
What I want you to do is write code that incrementally step-by-step constructs

00:02:18.000 --> 00:02:24.000
the omega vector and the xi function and then returns to me those results over here.

00:02:24.000 --> 00:02:27.000
There is an empty function in your code that accepts as parameter

00:02:27.000 --> 09:59:59.000
the initial position, -3, and the two motion values, 5 and 3.

