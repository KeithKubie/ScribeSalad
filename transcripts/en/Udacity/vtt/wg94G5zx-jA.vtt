WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.680
So, we've seen that functions are extremely important in JavaScript and

00:00:03.680 --> 00:00:06.950
they create the core of JavaScript classes.

00:00:06.950 --> 00:00:11.020
As you described earlier, a JavaScript class is really just a function that's

00:00:11.020 --> 00:00:13.380
capable of creating many similar objects.

00:00:13.380 --> 00:00:13.980
&gt;&gt; Exactly.

00:00:13.980 --> 00:00:18.180
Anytime a function produces objects that all conform to roughly the same

00:00:18.180 --> 00:00:20.570
Interface of methods and properties.

00:00:20.570 --> 00:00:24.130
I would call that function a class, but it is important to know that this

00:00:24.130 --> 00:00:27.600
definition draws some controversy, because there are good arguments out there,

00:00:27.600 --> 00:00:30.780
that classes really shouldn't be boiled down so simply.

00:00:30.780 --> 00:00:33.160
In other languages, this is certainly the case, but

00:00:33.160 --> 00:00:38.580
in JavaScript at least I think that this definition provides us the most value.

00:00:38.580 --> 00:00:41.780
So, if we do broaden our definition of the word class, to

00:00:41.780 --> 00:00:46.690
mean any construct that's capable of producing a fleet of very similar objects.

00:00:46.690 --> 00:00:49.400
We should really examine every technique we can think of,

00:00:49.400 --> 00:00:52.040
that will satisfy writing, such a class.

00:00:52.040 --> 00:00:55.400
We'll do this by starting with our decorator code that we just wrote, and

00:00:55.400 --> 00:00:57.980
refactoring it into the functional class pattern.

00:00:57.980 --> 00:01:01.930
And from there, we'll move on to the prototypal and pseudo-classical patterns.

00:01:01.930 --> 00:01:04.680
And along the way, we can talk about the pros and cons of each technique.

