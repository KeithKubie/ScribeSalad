WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.226
LEON NICHOLLS: Do you
want to get your Android

00:00:02.226 --> 00:00:03.210
apps on the big screen?

00:00:03.210 --> 00:00:06.190
Well, we've made it
easier than ever before.

00:00:06.190 --> 00:00:06.870
Hi.

00:00:06.870 --> 00:00:09.080
I'm Leon Nicholls from the
Google Developer Relations

00:00:09.080 --> 00:00:12.650
Team, and I'm going to tell
you about the Google Cast SDK

00:00:12.650 --> 00:00:14.750
Version 3 for Android.

00:00:14.750 --> 00:00:19.250
In June 2016, we launched
the new version 3 API

00:00:19.250 --> 00:00:21.530
for the Google Cast SDK.

00:00:21.530 --> 00:00:24.400
The new Cast SDK
simplifies several parts

00:00:24.400 --> 00:00:27.330
of the previous SDK and
addresses the major pain

00:00:27.330 --> 00:00:30.270
point identified by content
partners and developers

00:00:30.270 --> 00:00:31.700
like you.

00:00:31.700 --> 00:00:34.710
The new Cast SDK significantly
reduces the amount

00:00:34.710 --> 00:00:38.480
of code needed by
providing UI widgets that

00:00:38.480 --> 00:00:42.700
fully comply to the Cast
UX design checklist.

00:00:42.700 --> 00:00:47.030
First, here is some terminology
about how casting works.

00:00:47.030 --> 00:00:49.680
The Cast sender application
refers to an app

00:00:49.680 --> 00:00:51.620
on a mobile device or a laptop.

00:00:51.620 --> 00:00:54.970
And a receiver application
case and refer to an HTMI

00:00:54.970 --> 00:00:58.890
application running on
Chromecast or other Google Cast

00:00:58.890 --> 00:01:01.350
receiver devices.

00:01:01.350 --> 00:01:05.970
Let's take a look at the typical
lifecycle of a cast sender app.

00:01:05.970 --> 00:01:09.490
When the sender app is
launched, Cast receiver devices

00:01:09.490 --> 00:01:12.480
need to be discovered
on the local network.

00:01:12.480 --> 00:01:15.460
Once the user selects
a device, a sender app

00:01:15.460 --> 00:01:19.430
will connect to their device
and launch the receiver app.

00:01:19.430 --> 00:01:21.840
The sender app then
creates a message channel

00:01:21.840 --> 00:01:23.820
to the receiver.

00:01:23.820 --> 00:01:28.730
The user can also disconnect
from their device at any time.

00:01:28.730 --> 00:01:31.470
The new SDK is based on the
design of the Cast companion

00:01:31.470 --> 00:01:35.190
library and implements
these new features.

00:01:35.190 --> 00:01:37.850
First, the UI widgets that
comply with the Google Cast

00:01:37.850 --> 00:01:42.980
design checklist, notification
and lock screen controls,

00:01:42.980 --> 00:01:44.800
automatic device
discovery so you

00:01:44.800 --> 00:01:47.660
don't have to manage
that in your code,

00:01:47.660 --> 00:01:51.190
centralized Cast system
state management,

00:01:51.190 --> 00:01:54.050
and a reconnection service
that automatically handles

00:01:54.050 --> 00:01:56.470
network issues to
keep your sender app

00:01:56.470 --> 00:01:58.070
connected to the receiver.

00:01:58.070 --> 00:02:00.040
So even when the
user leaves the room,

00:02:00.040 --> 00:02:01.890
goes out of the
range of the network,

00:02:01.890 --> 00:02:04.320
the system will be
automatically reconnected

00:02:04.320 --> 00:02:07.080
when the user returns.

00:02:07.080 --> 00:02:09.669
The Google Cast SDK is still
part of Android's Google Play

00:02:09.669 --> 00:02:13.330
services and is shared
across all Cast apps.

00:02:13.330 --> 00:02:16.620
The minimum Android SDK level
that the Cast SDK supports

00:02:16.620 --> 00:02:19.670
is level 9 or Gingerbread.

00:02:19.670 --> 00:02:22.530
In Android Studio, make sure
these necessary libraries

00:02:22.530 --> 00:02:25.120
are installed.

00:02:25.120 --> 00:02:29.080
Let's take a look at how
to add Cast to your app.

00:02:29.080 --> 00:02:31.540
The Cast framework has a
global singleton object,

00:02:31.540 --> 00:02:33.680
the Cast Context
which coordinates

00:02:33.680 --> 00:02:36.080
all the Cast's interactions.

00:02:36.080 --> 00:02:37.790
You must implement
the options provide

00:02:37.790 --> 00:02:41.670
interface to supply Cast options
needed to initialize the Cast

00:02:41.670 --> 00:02:43.140
Context singleton.

00:02:43.140 --> 00:02:45.460
The most important
option is to receive

00:02:45.460 --> 00:02:48.250
application ID, which you get
from the Google Cast Developer

00:02:48.250 --> 00:02:50.340
Console.

00:02:50.340 --> 00:02:52.480
You can get to the
Cast Context instance

00:02:52.480 --> 00:02:56.400
by using the static
getSharedInstance method.

00:02:56.400 --> 00:03:00.130
If you've used to v2 SDK
before, you must be wondering,

00:03:00.130 --> 00:03:02.710
where is the Google API client?

00:03:02.710 --> 00:03:05.330
That's not needed
anymore to use Cast.

00:03:05.330 --> 00:03:10.250
Everything is done for
you by the v3 framework.

00:03:10.250 --> 00:03:13.420
For your app's UI, the first
step in supporting Cast

00:03:13.420 --> 00:03:15.680
is to add the Cast button.

00:03:15.680 --> 00:03:18.340
The SDK provides a
Cast button widget

00:03:18.340 --> 00:03:21.270
that automatically manages
its visibility and state

00:03:21.270 --> 00:03:23.810
and provides all the
necessary dialogs for users

00:03:23.810 --> 00:03:27.200
to select and
disconnect devices.

00:03:27.200 --> 00:03:29.680
The Cast button is implemented
by the media route button

00:03:29.680 --> 00:03:32.970
from media route of
version 7 support library.

00:03:32.970 --> 00:03:34.860
Like any action
icon that you can

00:03:34.860 --> 00:03:38.080
add to your activity-- using
an action bar or a tool bar--

00:03:38.080 --> 00:03:40.150
you first need to add
the corresponding item

00:03:40.150 --> 00:03:42.120
to your main you.

00:03:42.120 --> 00:03:46.080
Once you've done that, override
the onCreateOptionsMenu method

00:03:46.080 --> 00:03:49.410
of each of your activities by
using the Cast button factory

00:03:49.410 --> 00:03:54.050
to wire up the media add
button to the Cast framework.

00:03:54.050 --> 00:03:56.930
When the user selects a Cast
device using the Cast button

00:03:56.930 --> 00:04:00.000
menu, the new Cast session
is started automatically

00:04:00.000 --> 00:04:01.690
by the framework.

00:04:01.690 --> 00:04:03.530
All the user
interactions, including

00:04:03.530 --> 00:04:07.100
backing out of this menu,
are handled by the widget.

00:04:07.100 --> 00:04:08.840
The list of devices
is [INAUDIBLE]

00:04:08.840 --> 00:04:11.830
based on the app ID
configuration in the Google

00:04:11.830 --> 00:04:14.250
Cast Developer Console.

00:04:14.250 --> 00:04:16.500
For the Cast framework,
a Cast session

00:04:16.500 --> 00:04:19.060
encapsulates the
connection to a device,

00:04:19.060 --> 00:04:21.170
managing the
receiver application,

00:04:21.170 --> 00:04:26.000
and initializing a media
control channel for media apps.

00:04:26.000 --> 00:04:28.770
Cast sessions are managed by
the system manager which can be

00:04:28.770 --> 00:04:31.820
accessed via the Cast context.

00:04:31.820 --> 00:04:33.720
The system manager
listener callbacks

00:04:33.720 --> 00:04:36.780
can be used to monitor session
and main status, creation,

00:04:36.780 --> 00:04:41.490
suspension, resumption, and
termination of the session.

00:04:41.490 --> 00:04:43.930
To play media on the
receiver, the send app

00:04:43.930 --> 00:04:48.270
has to provide media
metadata of the media stream.

00:04:48.270 --> 00:04:51.890
Here you can see how to set the
media type, title, and images

00:04:51.890 --> 00:04:55.250
using the media metadata class.

00:04:55.250 --> 00:04:58.100
Here you can see how to
set the media URL, stream

00:04:58.100 --> 00:05:03.410
type, and other metadata using
the MediaInfo Builder class.

00:05:03.410 --> 00:05:05.290
The remote media
client class is then

00:05:05.290 --> 00:05:09.300
used to load that media
stream on the receiver.

00:05:09.300 --> 00:05:10.850
The send app then
invokes commands

00:05:10.850 --> 00:05:15.910
such as play and pause using the
remote media client instance.

00:05:15.910 --> 00:05:18.500
The send app can use the system
manager listener callbacks

00:05:18.500 --> 00:05:21.020
to track the session
state and determine

00:05:21.020 --> 00:05:25.300
when to enable and disable
the local media player.

00:05:25.300 --> 00:05:30.140
Playing media on the
receiver is now a breeze.

00:05:30.140 --> 00:05:33.030
The Cast SDK provides a widget
called the Mini Controller that

00:05:33.030 --> 00:05:36.180
appears when the user navigates
away from the current content

00:05:36.180 --> 00:05:38.800
page to another part of the app.

00:05:38.800 --> 00:05:41.320
The Mimi Controller
provides instant access

00:05:41.320 --> 00:05:46.010
and is a visible reminder
for the current Cast session.

00:05:46.010 --> 00:05:49.990
The Cast SDK provides a custom
view Mini Controller fragment

00:05:49.990 --> 00:05:51.640
which can be added
to the app layout

00:05:51.640 --> 00:05:53.790
file of the activities
in which you want

00:05:53.790 --> 00:05:56.370
to show the Mini Controller.

00:05:56.370 --> 00:05:59.410
This is so much
easier than the v2 SDK

00:05:59.410 --> 00:06:03.340
where you had to create the
Mini Controller yourself.

00:06:03.340 --> 00:06:05.820
The Google Cast design
checklist requires a send app

00:06:05.820 --> 00:06:08.890
to implement media controls
from a notification

00:06:08.890 --> 00:06:10.790
and the lock screen.

00:06:10.790 --> 00:06:12.350
This is allows
users to always be

00:06:12.350 --> 00:06:15.010
in control of the media session
with convenient playback

00:06:15.010 --> 00:06:16.920
control buttons.

00:06:16.920 --> 00:06:20.300
The Cast SDK provides a
media notification service

00:06:20.300 --> 00:06:23.530
to help the sender build these
controls for the notification

00:06:23.530 --> 00:06:25.400
and lock screen.

00:06:25.400 --> 00:06:28.350
The media notification service
will run in the background

00:06:28.350 --> 00:06:31.550
when the sender is Casting
and will show a notification

00:06:31.550 --> 00:06:33.830
with an image
thumbnail, metadata

00:06:33.830 --> 00:06:37.650
about the current Casting item,
a Play/Pause button, and a Stop

00:06:37.650 --> 00:06:40.210
button.

00:06:40.210 --> 00:06:42.990
Here you can see how the
notification and lock screen

00:06:42.990 --> 00:06:45.730
controls can be enabled
with the Cast options

00:06:45.730 --> 00:06:48.610
when initializing
the Cast context.

00:06:48.610 --> 00:06:51.090
Notifications are then
managed for your app

00:06:51.090 --> 00:06:52.210
by the Cast framework.

00:06:52.210 --> 00:06:54.770
It's that easy.

00:06:54.770 --> 00:06:57.220
The Google Cast design
checklist requires the sender

00:06:57.220 --> 00:06:59.090
to provide an
expanded controller

00:06:59.090 --> 00:07:00.710
for the media being Cast.

00:07:00.710 --> 00:07:03.340
The expanded controller is kind
of like a full-screen version

00:07:03.340 --> 00:07:06.210
of the Mini Controller.

00:07:06.210 --> 00:07:09.320
The Cast SDK provides a widget
for the expanded controller

00:07:09.320 --> 00:07:11.770
called the Expanded
Control Activity,

00:07:11.770 --> 00:07:15.040
which is implemented
as an abstract class.

00:07:15.040 --> 00:07:17.370
To add an expanded
controller, subclass

00:07:17.370 --> 00:07:21.500
ExpandedControllerActivity
and add a Cast button.

00:07:21.500 --> 00:07:23.930
After you've done that, edit
the Cast options provider

00:07:23.930 --> 00:07:27.460
and change the notification
options and Cast media options

00:07:27.460 --> 00:07:31.160
to set the target activity to
your subclass of the Expanded

00:07:31.160 --> 00:07:32.890
Control Activity.

00:07:32.890 --> 00:07:35.630
The expanded controller widget
will save you a lot of code

00:07:35.630 --> 00:07:38.880
if you've used
the v2 SDK before.

00:07:38.880 --> 00:07:41.110
Now that you've integrated
Cast with your app,

00:07:41.110 --> 00:07:43.320
how do you tell
your users about it?

00:07:43.320 --> 00:07:46.020
Well, the Cast SDK
provides a custom view

00:07:46.020 --> 00:07:48.340
called Introductory Overlay.

00:07:48.340 --> 00:07:51.760
That can be used to highlight
the Cast button when it's first

00:07:51.760 --> 00:07:54.166
shown to the user.

00:07:54.166 --> 00:07:56.415
This code shows you how to
use the IntroductoryOverlay

00:07:56.415 --> 00:08:01.560
Builder to show the
overlay in your activities.

00:08:01.560 --> 00:08:05.850
That's everything you need to
Cast enable your sender app.

00:08:05.850 --> 00:08:08.660
You can get a lot more details
about the Google Cast SDK

00:08:08.660 --> 00:08:11.810
at developers.google.com/cast.

00:08:11.810 --> 00:08:14.840
We've also open sourced
several sample Cast apps

00:08:14.840 --> 00:08:17.090
that you can use as a reference.

00:08:17.090 --> 00:08:19.030
If you have any
developer questions,

00:08:19.030 --> 00:08:22.160
post those on Stack Overflow.

00:08:22.160 --> 00:08:26.110
Join our Google Cast developers
community on Google+ to keep up

00:08:26.110 --> 00:08:28.820
to date with the
new SDK features.

00:08:28.820 --> 00:08:30.270
Happy Casting.

00:08:30.270 --> 00:08:33.320
[MUSIC PLAYING]

