WEBVTT
Kind: captions
Language: en

00:00:04.460 --> 00:00:04.900
Hi.

00:00:04.900 --> 00:00:07.720
Welcome to the introduction to
the Google Maps API tutorial.

00:00:07.720 --> 00:00:08.870
My name is Mano Marks.

00:00:08.870 --> 00:00:11.680
I'm a Developer Advocate on
the Google Maps team.

00:00:11.680 --> 00:00:14.060
In this tutorial, I will teach
you the basics of using the

00:00:14.060 --> 00:00:17.040
Google Maps API in your
web applications.

00:00:17.040 --> 00:00:19.530
To fully take advantage of the
content in this presentation,

00:00:19.530 --> 00:00:21.840
you should have a basic
understanding of JavaScript

00:00:21.840 --> 00:00:25.600
and HTML and access
to a text editor.

00:00:25.600 --> 00:00:28.080
In this tutorial, you'll be
constructing a map that has

00:00:28.080 --> 00:00:29.490
these basic features--

00:00:29.490 --> 00:00:32.570
a basic map, a map marker, which
when clicked, has an

00:00:32.570 --> 00:00:36.290
InfoWindow pop-up, an auto
complete form, and current

00:00:36.290 --> 00:00:37.900
weather forecasts.

00:00:37.900 --> 00:00:39.360
We've set up a site to
walk you through

00:00:39.360 --> 00:00:40.500
each of these steps.

00:00:40.500 --> 00:00:42.200
Go to this URL for
the tutorial.

00:00:45.270 --> 00:00:45.580
OK.

00:00:45.580 --> 00:00:50.310
So you see this URL, click
on Your first map.

00:00:50.310 --> 00:00:52.880
You'll see there's some
instructions on the left, and

00:00:52.880 --> 00:00:54.780
some code on the right.

00:00:54.780 --> 00:00:59.050
Click on the HTML tag
on the right, here.

00:00:59.050 --> 00:01:02.600
And you'll see that we
have a script tag

00:01:02.600 --> 00:01:04.920
with a source attribute.

00:01:04.920 --> 00:01:06.490
This script tag loads
the Google Maps

00:01:06.490 --> 00:01:08.270
API JavaScript loader.

00:01:08.270 --> 00:01:11.600
You'll see that the loader adds
a sensor parameter, which

00:01:11.600 --> 00:01:15.340
in turn takes a value
of true or false.

00:01:15.340 --> 00:01:18.110
Now one of the most common Maps
API mistakes is to not

00:01:18.110 --> 00:01:20.150
set this parameter correctly.

00:01:20.150 --> 00:01:23.430
Developers often leave it off
or leave it with the value

00:01:23.430 --> 00:01:28.270
true or false, which is one,
big, string value, which is in

00:01:28.270 --> 00:01:29.820
some of the documentation.

00:01:29.820 --> 00:01:32.180
Unless your application is
getting location information

00:01:32.180 --> 00:01:36.650
from your device, say a GPS on
a phone or HTML5 geolocation

00:01:36.650 --> 00:01:38.640
from your browser, use false.

00:01:38.640 --> 00:01:40.230
Otherwise, use true.

00:01:40.230 --> 00:01:42.100
Once it's set, you don't
have to worry about it.

00:01:42.100 --> 00:01:42.960
It doesn't impact your

00:01:42.960 --> 00:01:45.180
application one way or another.

00:01:45.180 --> 00:01:48.360
It's a tracking mechanism
for us.

00:01:48.360 --> 00:01:49.950
Next you see that there's
a development

00:01:49.950 --> 00:01:51.510
with the idea of map.

00:01:51.510 --> 00:01:54.090
This is where our JavaScript
will place the

00:01:54.090 --> 00:01:55.340
map, once it's loaded.

00:01:57.420 --> 00:01:57.870
OK.

00:01:57.870 --> 00:01:59.450
Let's add in a basic map.

00:01:59.450 --> 00:02:00.950
Click over to the
JavaScript tab.

00:02:00.950 --> 00:02:03.220
It has all the code
that you need.

00:02:03.220 --> 00:02:04.980
First create an options
object, in

00:02:04.980 --> 00:02:06.395
this case, map options.

00:02:09.070 --> 00:02:11.830
You have to select at least
three options--

00:02:11.830 --> 00:02:13.710
zoom, center, and
the map type.

00:02:13.710 --> 00:02:15.380
Your basic map type options are

00:02:15.380 --> 00:02:18.120
roadmap, terrain, or satellite.

00:02:18.120 --> 00:02:22.140
Then create a new Google Maps
map object and pass the map

00:02:22.140 --> 00:02:24.700
div and the options object.

00:02:24.700 --> 00:02:26.360
There, you should have
a map right?

00:02:26.360 --> 00:02:28.080
Actually, if you click
Run, you'll see

00:02:28.080 --> 00:02:30.320
that nothing happens.

00:02:30.320 --> 00:02:32.840
This brings us to the second
most common mistake in Maps

00:02:32.840 --> 00:02:34.180
API applications--

00:02:34.180 --> 00:02:37.050
failure to properly set
the CSS for your page.

00:02:37.050 --> 00:02:40.050
Click on the CSS tab, and remove
the slashes before the

00:02:40.050 --> 00:02:42.455
line that says pound map.

00:02:47.230 --> 00:02:48.420
Then hit Run again.

00:02:48.420 --> 00:02:50.640
You'll see that it now works.

00:02:50.640 --> 00:02:53.440
And we have this nice map.

00:02:53.440 --> 00:02:55.150
OK.

00:02:55.150 --> 00:02:57.360
So now click the Next button
on the tutorial.

00:03:02.830 --> 00:03:03.130
All right.

00:03:03.130 --> 00:03:06.300
So now let's add a marker
to the map.

00:03:06.300 --> 00:03:08.160
Map marker is a familiar
sight on maps.

00:03:08.160 --> 00:03:11.210
You've probably seen this red
marker on many websites.

00:03:11.210 --> 00:03:14.520
To add a basic marker, add a few
lines of code after you've

00:03:14.520 --> 00:03:15.930
created the map.

00:03:15.930 --> 00:03:18.190
First, create another options
object, in this

00:03:18.190 --> 00:03:19.490
case, marker options.

00:03:22.470 --> 00:03:25.860
And add a position option
that uses the Google

00:03:25.860 --> 00:03:28.230
Maps LatLong object.

00:03:28.230 --> 00:03:31.470
This should create a lat/long
object, which we used in the

00:03:31.470 --> 00:03:34.350
first bit of code for the
center of the map.

00:03:34.350 --> 00:03:36.490
This is a basic building
block of the Maps API.

00:03:36.490 --> 00:03:39.950
Each lat/long object
has a latitude

00:03:39.950 --> 00:03:41.800
and longitude property.

00:03:41.800 --> 00:03:44.740
Next you create a
marker object.

00:03:44.740 --> 00:03:51.370
Finally, add it to the map
by running set map.

00:03:51.370 --> 00:03:53.646
And then you click Run.

00:03:53.646 --> 00:03:58.330
You should see the map now
has a marker on it.

00:03:58.330 --> 00:03:59.930
Let's move on to the
next section.

00:03:59.930 --> 00:04:03.980
Here we're going to create a
InfoWindow and attach it to

00:04:03.980 --> 00:04:04.850
the marker.

00:04:04.850 --> 00:04:09.100
An InfoWindow is an overlay,
like the marker object.

00:04:09.100 --> 00:04:10.640
It is used to display
information in

00:04:10.640 --> 00:04:13.360
plain text or HTML.

00:04:13.360 --> 00:04:16.260
Going to modify your
code a bit here.

00:04:16.260 --> 00:04:19.420
Create another options object.

00:04:19.420 --> 00:04:22.880
So here you see InfoWindow
options.

00:04:22.880 --> 00:04:26.250
And you're giving it a content
property, which you are going

00:04:26.250 --> 00:04:28.720
to assign some basic text.

00:04:28.720 --> 00:04:30.400
Next create the InfoWindow
object.

00:04:32.960 --> 00:04:37.850
Finally, we're going to add an
event listener, which will

00:04:37.850 --> 00:04:40.840
cause the InfoWindow to open
when you click on the map.

00:04:40.840 --> 00:04:47.570
To do this, just use
Google.maps.event.addlistener,

00:04:47.570 --> 00:04:50.200
pass in the objects to be
listened to, in this case, the

00:04:50.200 --> 00:04:53.990
marker, the type of event, in
this case, a click, and a

00:04:53.990 --> 00:04:56.980
function, which executes when
the event is triggered.

00:04:56.980 --> 00:04:59.220
In this case, the InfoWindow
opens on the

00:04:59.220 --> 00:05:00.480
marker in the map.

00:05:03.850 --> 00:05:04.270
OK.

00:05:04.270 --> 00:05:06.430
Now click Run.

00:05:06.430 --> 00:05:08.190
You should see a map that
looks like this.

00:05:08.190 --> 00:05:13.050
And when you click on the
marker, the InfoWindow opens.

00:05:13.050 --> 00:05:17.670
Click on the Next button to
move to the next section.

00:05:17.670 --> 00:05:21.000
Now we're going to add in
AutoComplete to your map.

00:05:21.000 --> 00:05:23.600
AutoComplete is part of the
Places Library of the Google

00:05:23.600 --> 00:05:26.880
Maps API, which lets you take
advantage of Google's data

00:05:26.880 --> 00:05:29.685
store of tens of millions of
places around the world.

00:05:29.685 --> 00:05:33.580
A place is anything from an
address to a landmark, a

00:05:33.580 --> 00:05:35.940
restaurant, a place
of worship, or

00:05:35.940 --> 00:05:37.780
a government building.

00:05:37.780 --> 00:05:40.230
We have, in fact, over
125 different

00:05:40.230 --> 00:05:42.170
categories of places.

00:05:42.170 --> 00:05:45.370
AutoComplete lets you put one
input box on your page, and

00:05:45.370 --> 00:05:47.970
users can type in
their requests.

00:05:47.970 --> 00:05:51.450
In real time, as they are
typing, Google will then try

00:05:51.450 --> 00:05:52.860
to match their requests.

00:05:52.860 --> 00:05:54.700
Let's take a look at the code.

00:05:54.700 --> 00:05:57.180
First thing we'd need to
change is the HTML.

00:05:57.180 --> 00:06:00.540
We need to add in an input
element with type text and an

00:06:00.540 --> 00:06:03.220
ID, in this case,
AutoComplete.

00:06:03.220 --> 00:06:06.480
Click on the HTML
tab to see this.

00:06:06.480 --> 00:06:12.540
Notice, too, that we added in
a libraries parameter to the

00:06:12.540 --> 00:06:14.110
JavaScript loader.

00:06:14.110 --> 00:06:18.840
This one is libraries
equals places.

00:06:18.840 --> 00:06:21.460
Google Maps API libraries are
integrated libraries with the

00:06:21.460 --> 00:06:24.660
Maps API code, but they are
loaded separately and only

00:06:24.660 --> 00:06:26.100
when needed.

00:06:26.100 --> 00:06:26.350
OK.

00:06:26.350 --> 00:06:29.290
Click on back over to
the JavaScript tab.

00:06:29.290 --> 00:06:31.860
You're going to create
an options object.

00:06:31.860 --> 00:06:37.190
In this case, we're just going
to limit the type of responses

00:06:37.190 --> 00:06:38.640
to establishments.

00:06:38.640 --> 00:06:42.300
So here we have AC options.

00:06:42.300 --> 00:06:44.625
And then you see types,
establishments.

00:06:47.430 --> 00:06:50.350
Establishments are not
geocodeable addresses, but

00:06:50.350 --> 00:06:52.060
they're basically places
of business.

00:06:52.060 --> 00:06:55.600
So cafes, restaurants, whatever,
shopping malls.

00:06:55.600 --> 00:06:59.810
Next you create the AutoComplete
object itself.

00:06:59.810 --> 00:07:03.530
And pass in the AutoComplete
elements.

00:07:03.530 --> 00:07:06.700
And then we bind that
AutoComplete

00:07:06.700 --> 00:07:10.690
object to the map.

00:07:10.690 --> 00:07:12.650
That means it will just show
results that are within the

00:07:12.650 --> 00:07:16.090
current bounds of the map.

00:07:16.090 --> 00:07:24.450
Finally, we're going to create a
listener, an event listener,

00:07:24.450 --> 00:07:26.220
on the AutoComplete object.

00:07:26.220 --> 00:07:28.660
And this basically
just listens for

00:07:28.660 --> 00:07:30.640
changes in the selection.

00:07:30.640 --> 00:07:35.850
It then places a marker on the
map and opens an InfoWindow

00:07:35.850 --> 00:07:39.870
with the name of the place.

00:07:39.870 --> 00:07:40.170
All right.

00:07:40.170 --> 00:07:43.930
So now click Run.

00:07:43.930 --> 00:07:52.600
And you'll see here that there
is a map, and as I type in SF,

00:07:52.600 --> 00:07:56.100
you'll see San Francisco-related
places

00:07:56.100 --> 00:07:56.830
showing up.

00:07:56.830 --> 00:07:58.190
So I'm going to click one.

00:07:58.190 --> 00:08:02.810
And clicking in SFO, which is
the airport, and you'll see it

00:08:02.810 --> 00:08:06.660
opens up, a pop-up
with the name.

00:08:06.660 --> 00:08:07.130
All right.

00:08:07.130 --> 00:08:11.800
Let's click over to
the next section.

00:08:11.800 --> 00:08:15.130
And lastly, we're going to add
a weather layer to your

00:08:15.130 --> 00:08:16.560
application.

00:08:16.560 --> 00:08:19.060
There's a number of different
layer types available to you

00:08:19.060 --> 00:08:22.690
in the Google Maps API,
including Panoramio, KML

00:08:22.690 --> 00:08:27.400
layers, traffic, bicycling,
and more.

00:08:27.400 --> 00:08:30.500
Most of them take only a few
lines of code to add to a map.

00:08:30.500 --> 00:08:33.419
So first off, we just create the
weather layer object and

00:08:33.419 --> 00:08:37.130
pass it a new options object.

00:08:37.130 --> 00:08:39.799
In this case, we're setting the
temperature unit type to

00:08:39.799 --> 00:08:41.120
Fahrenheit.

00:08:41.120 --> 00:08:45.140
This is North America, but
you can also do Celsius.

00:08:45.140 --> 00:08:48.770
Then we are going to set the
weather layer to the map,

00:08:48.770 --> 00:08:50.020
weatherlayer.setmap.

00:08:51.520 --> 00:08:56.030
Then we are going to finally
create a cloud layer and set

00:08:56.030 --> 00:08:57.470
that on the map.

00:08:57.470 --> 00:09:04.450
You click Run, and you'll see
that you have basic weather

00:09:04.450 --> 00:09:05.050
showing up.

00:09:05.050 --> 00:09:07.120
And if I clicked on one, I'll
get a forecast for that

00:09:07.120 --> 00:09:08.420
particular point.

00:09:08.420 --> 00:09:10.430
You don't see any clouds,
because currently it's not

00:09:10.430 --> 00:09:11.800
cloudy in San Francisco.

00:09:11.800 --> 00:09:18.990
So I'm going to just zoom out,
and then you see there are

00:09:18.990 --> 00:09:21.160
actually clouds there.

00:09:21.160 --> 00:09:27.100
So this weather layer produces
weather that is--

00:09:27.100 --> 00:09:32.000
forecasts that are available up
to 15 minutes ago, and then

00:09:32.000 --> 00:09:36.250
clouds that are within
the last three hours.

00:09:36.250 --> 00:09:39.610
So now you have up and running
basic Google Maps API

00:09:39.610 --> 00:09:40.230
applications.

00:09:40.230 --> 00:09:41.190
And you're good to go.

00:09:41.190 --> 00:09:43.630
If you want any more information
on the Google Maps

00:09:43.630 --> 00:09:45.790
API, check out the
documentation on

00:09:45.790 --> 00:09:48.540
developers.google.com/maps.

00:09:48.540 --> 00:09:49.790
Thank you very much.

