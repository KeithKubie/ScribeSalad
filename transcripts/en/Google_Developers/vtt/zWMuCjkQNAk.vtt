WEBVTT
Kind: captions
Language: en

00:00:02.600 --> 00:00:03.050
LOUIS GRAY: Good afternoon.

00:00:03.050 --> 00:00:05.710
Louis Gray here from Google
Developers Live in Mountain

00:00:05.710 --> 00:00:07.110
View, Googleplex.

00:00:07.110 --> 00:00:08.650
I want to talk here
with JJ Behrens.

00:00:08.650 --> 00:00:11.030
He's a developer advocate
for YouTube APIs.

00:00:11.030 --> 00:00:11.850
Welcome, JJ.

00:00:11.850 --> 00:00:12.155
JJ BEHRENS: Thanks.

00:00:12.155 --> 00:00:13.420
Nice to see you, Louis.

00:00:13.420 --> 00:00:13.910
LOUIS GRAY: Good to see you.

00:00:13.910 --> 00:00:14.425
I love this new studio.

00:00:14.425 --> 00:00:15.830
We're just kicking off today.

00:00:15.830 --> 00:00:16.355
JJ BEHRENS: It's pretty
exciting.

00:00:16.355 --> 00:00:18.350
LOUIS GRAY: So you're the first
one to talk about this.

00:00:18.350 --> 00:00:20.975
We're getting prepped for Google
I/O next week, running

00:00:20.975 --> 00:00:21.970
through our tutorials.

00:00:21.970 --> 00:00:25.000
And you went ahead and did a
talk on Ruby on Rails, and

00:00:25.000 --> 00:00:27.800
specifically how it applied
to YouTube and education.

00:00:27.800 --> 00:00:28.460
JJ BEHRENS: That's right.

00:00:28.460 --> 00:00:29.450
LOUIS GRAY: So what I want to
do is go ahead and have a

00:00:29.450 --> 00:00:32.530
quick conversation with you and
explain, how does Ruby on

00:00:32.530 --> 00:00:35.240
Rails involve with YouTube
and education?

00:00:35.240 --> 00:00:37.010
Maybe you can walk through
that for us.

00:00:37.010 --> 00:00:39.760
JJ BEHRENS: Yeah, so I talked
about this a little bit in the

00:00:39.760 --> 00:00:41.370
talk itself.

00:00:41.370 --> 00:00:42.820
It's a little bit strange
talking about

00:00:42.820 --> 00:00:44.490
Ruby on Rails at Google.

00:00:44.490 --> 00:00:47.860
Because if you look at our
jobs postings, oftentimes

00:00:47.860 --> 00:00:50.130
they'll mention Java
or C++ or Python.

00:00:50.130 --> 00:00:51.920
But not very often will
they mention Ruby.

00:00:51.920 --> 00:00:53.390
And definitely, I don't
think I've ever seen

00:00:53.390 --> 00:00:54.780
them mention Rails.

00:00:54.780 --> 00:00:57.960
And then, if you look at Ruby
on Rails talks, oftentimes

00:00:57.960 --> 00:01:00.900
they're talking about Heroku
and Amazon EC2.

00:01:00.900 --> 00:01:03.000
But they don't spend as
much time talking

00:01:03.000 --> 00:01:04.610
about Google APIs.

00:01:04.610 --> 00:01:07.510
And since I kind of straddle
the fence--

00:01:07.510 --> 00:01:10.480
I do a little bit of Python, a
little bit of Ruby on Rails--

00:01:10.480 --> 00:01:11.960
I wanted to change that.

00:01:11.960 --> 00:01:16.050
I know that our YouTube APIs
work perfectly well in Ruby.

00:01:16.050 --> 00:01:19.310
And so I wanted to show
people how it's done.

00:01:19.310 --> 00:01:20.556
LOUIS GRAY: Now, one of the
questions I know a lot of

00:01:20.556 --> 00:01:22.520
people run into with YouTube,
because they have a certain

00:01:22.520 --> 00:01:24.450
expectation of what that
site represents--

00:01:24.450 --> 00:01:26.850
people look at it as for
entertainment or for news.

00:01:26.850 --> 00:01:28.350
What does it have to
do with education?

00:01:28.350 --> 00:01:31.150
Because you took a very specific
approach to this.

00:01:31.150 --> 00:01:34.910
JJ BEHRENS: Yeah, well,
strangely enough, YouTube

00:01:34.910 --> 00:01:38.340
actually can be used for things
other than just cats.

00:01:38.340 --> 00:01:38.910
LOUIS GRAY: Although we
like the cat videos.

00:01:38.910 --> 00:01:39.710
JJ BEHRENS: Not that
cats aren't--

00:01:39.710 --> 00:01:40.980
yeah, we like the cats.

00:01:40.980 --> 00:01:42.190
The cats are important.

00:01:42.190 --> 00:01:44.860
Those are a staple
of our business.

00:01:44.860 --> 00:01:47.510
But education's important.

00:01:47.510 --> 00:01:49.080
I actually have six kids.

00:01:49.080 --> 00:01:52.720
And so education is really
important to me and especially

00:01:52.720 --> 00:01:53.880
scalable education.

00:01:53.880 --> 00:01:56.880
I want good, high-quality,
scalable education.

00:01:56.880 --> 00:02:01.130
And I think that video makes
that possible, scalable.

00:02:01.130 --> 00:02:02.380
You have a great lecture.

00:02:02.380 --> 00:02:03.840
You get it on video.

00:02:03.840 --> 00:02:06.650
And you know you can reuse
it over and over again.

00:02:06.650 --> 00:02:13.540
One of my favorite examples are
the lectures by the MIT

00:02:13.540 --> 00:02:14.250
guys, Structure and

00:02:14.250 --> 00:02:15.970
Interpretation of Computer Programs.

00:02:15.970 --> 00:02:20.140
These are like a staple of
good computer science

00:02:20.140 --> 00:02:21.260
from the MIT guys.

00:02:21.260 --> 00:02:24.120
And I watched those videos
all the way through.

00:02:24.120 --> 00:02:27.565
And I feel like I got just a
little bit of an MIT education

00:02:27.565 --> 00:02:28.630
out of those.

00:02:28.630 --> 00:02:29.270
LOUIS GRAY: And that's
something--

00:02:29.270 --> 00:02:31.060
I don't know if you can
put it on the resume--

00:02:31.060 --> 00:02:32.990
but it sounds like a good place
to find out [INAUDIBLE]

00:02:32.990 --> 00:02:34.390
[? education ?] and expand
your [? world ?]

00:02:34.390 --> 00:02:35.760
knowledge.

00:02:35.760 --> 00:02:37.570
What do you think about TDD?

00:02:37.570 --> 00:02:38.720
When we went through
your talk, you

00:02:38.720 --> 00:02:39.850
talked a lot about TDD.

00:02:39.850 --> 00:02:41.560
And I know people are
curious about this.

00:02:41.560 --> 00:02:42.700
Does Google use it?

00:02:42.700 --> 00:02:43.960
How does it get involved?

00:02:43.960 --> 00:02:46.580
JJ BEHRENS: So test-driven
development is a way of

00:02:46.580 --> 00:02:49.650
developing software in which
you write the test first.

00:02:49.650 --> 00:02:51.230
And then you watch it fail.

00:02:51.230 --> 00:02:54.290
And then you try to write
the code so that it

00:02:54.290 --> 00:02:55.710
makes the test pass.

00:02:55.710 --> 00:02:58.320
And then, once you're passing,
then you refactor the code so

00:02:58.320 --> 00:03:00.030
that it works better.

00:03:00.030 --> 00:03:01.370
And Google's a big place.

00:03:01.370 --> 00:03:04.260
And we have a lot
of engineers.

00:03:04.260 --> 00:03:06.920
We have the saying that, you
get two Googlers in a room,

00:03:06.920 --> 00:03:08.100
and you'll have three
opinions.

00:03:08.100 --> 00:03:11.070
And so of course, not all of
them are going to agree on one

00:03:11.070 --> 00:03:13.460
particular way to develop
software.

00:03:13.460 --> 00:03:16.560
But testing at Google is
incredibly important.

00:03:16.560 --> 00:03:19.010
And so a lot of people do use
test-driven development.

00:03:19.010 --> 00:03:21.110
And even those people who
don't use test-driven

00:03:21.110 --> 00:03:24.990
development find that writing
comprehensive tests is an

00:03:24.990 --> 00:03:27.120
incredibly important
part of their job.

00:03:27.120 --> 00:03:29.810
And so I wanted to talk about
how to do test-driven

00:03:29.810 --> 00:03:31.360
development with web APIs.

00:03:31.360 --> 00:03:32.690
Because that's hard.

00:03:32.690 --> 00:03:36.640
If you've ever used the YouTube
API, the responses

00:03:36.640 --> 00:03:38.430
that it gives you are
very complex.

00:03:38.430 --> 00:03:39.270
They're large.

00:03:39.270 --> 00:03:42.670
And so it's hard to figure
out, what response

00:03:42.670 --> 00:03:43.490
am I going to get?

00:03:43.490 --> 00:03:45.940
I don't know ahead of time
until I actually try it.

00:03:45.940 --> 00:03:49.310
And so a part of the talk
is showing people

00:03:49.310 --> 00:03:51.600
how to get the response.

00:03:51.600 --> 00:03:54.280
So that they can play with it
and then integrate it into

00:03:54.280 --> 00:03:55.140
their tests.

00:03:55.140 --> 00:03:57.190
So that they can do test-driven
development with

00:03:57.190 --> 00:03:59.850
realistic responses from YouTube
without actually

00:03:59.850 --> 00:04:03.160
requiring a network connection
in order to run your tests,

00:04:03.160 --> 00:04:04.930
LOUIS GRAY: Test-driven
development sounds a lot like

00:04:04.930 --> 00:04:06.760
Google's approach to launching
and iterating.

00:04:06.760 --> 00:04:10.440
Yeah, you get it out the door,
and you continue to improve.

00:04:10.440 --> 00:04:12.000
For me, at least, when
I took something

00:04:12.000 --> 00:04:13.210
resembling computer science--

00:04:13.210 --> 00:04:15.810
I didn't get the kind of BS
degree that most of us have

00:04:15.810 --> 00:04:16.820
around here--

00:04:16.820 --> 00:04:18.990
but my tests always
seemed to fail.

00:04:18.990 --> 00:04:20.089
And I couldn't ever
understand.

00:04:20.089 --> 00:04:23.950
You would look at creating
content and creating code.

00:04:23.950 --> 00:04:25.650
And writing it on a sheet of
paper didn't make sense.

00:04:25.650 --> 00:04:27.460
It was always about putting it
in the machine, and trying and

00:04:27.460 --> 00:04:29.740
trying, and seeing where
did it break.

00:04:29.740 --> 00:04:31.970
Is that something that you see
fits in with the corporate

00:04:31.970 --> 00:04:35.900
culture in terms of testing and
iterating and accepting

00:04:35.900 --> 00:04:39.250
something that needs some
iteration going forward?

00:04:39.250 --> 00:04:41.140
JJ BEHRENS: Well, it's funny
that you mention that your

00:04:41.140 --> 00:04:44.050
tests always fail because I
have the opposite problem.

00:04:44.050 --> 00:04:46.710
I like to spend tons of
time writing code.

00:04:46.710 --> 00:04:48.100
And then I code review it.

00:04:48.100 --> 00:04:49.580
And it's perfectly polished.

00:04:49.580 --> 00:04:50.910
All my tests pass.

00:04:50.910 --> 00:04:54.050
And then the first time I give
it to a user, it blows up in

00:04:54.050 --> 00:04:54.960
front of me.

00:04:54.960 --> 00:04:59.700
And so definitely, test-driven
development is a way so that--

00:04:59.700 --> 00:05:02.170
the programmer who's writing
the software codes

00:05:02.170 --> 00:05:03.300
it to be one way.

00:05:03.300 --> 00:05:05.660
And the tests verify that
it behaves that way.

00:05:05.660 --> 00:05:08.260
But then when you need to change
it, the tests protect

00:05:08.260 --> 00:05:10.770
you from breaking software
that used to work.

00:05:10.770 --> 00:05:14.045
And when you get code that's as
large as it is at Google,

00:05:14.045 --> 00:05:15.450
that becomes really important.

00:05:15.450 --> 00:05:17.960
We have just a couple engineers
around here.

00:05:17.960 --> 00:05:20.810
And so we have to be able
to work together.

00:05:20.810 --> 00:05:23.790
And so we have to be able to
extend software written by

00:05:23.790 --> 00:05:26.546
someone else without
breaking it.

00:05:26.546 --> 00:05:27.710
LOUIS GRAY: Absolutely.

00:05:27.710 --> 00:05:30.130
Now, when you were talking, you
mentioned version 3 of the

00:05:30.130 --> 00:05:31.300
YouTube APIs.

00:05:31.300 --> 00:05:33.390
What can you tell us
about version 3?

00:05:33.390 --> 00:05:34.225
Why is it significant?

00:05:34.225 --> 00:05:36.790
I know a lot of times you look
at iterations and they have

00:05:36.790 --> 00:05:38.170
point releases.

00:05:38.170 --> 00:05:40.510
What's going on in version 3
that made this the one you

00:05:40.510 --> 00:05:41.080
want to talk about?

00:05:41.080 --> 00:05:42.980
JJ BEHRENS: Oh, well, you're
always trying to get me to

00:05:42.980 --> 00:05:43.880
leak information.

00:05:43.880 --> 00:05:45.800
That's how we make these
videos sell, isn't it?

00:05:45.800 --> 00:05:47.340
LOUIS GRAY: Absolutely.

00:05:47.340 --> 00:05:53.350
JJ BEHRENS: So currently, the
YouTube API is at version 2.1.

00:05:53.350 --> 00:05:58.050
And version 2.x has been
out for a long time.

00:05:58.050 --> 00:06:01.980
But we have some interesting
talks going on at Google I/O.

00:06:01.980 --> 00:06:04.260
I will say that much.

00:06:04.260 --> 00:06:07.510
And another thing that's kind of
interesting is that if you

00:06:07.510 --> 00:06:10.020
look at a lot of the newer
Google APIs, such as the

00:06:10.020 --> 00:06:17.140
Google+ APIs, they have this
very, very nice client API.

00:06:17.140 --> 00:06:18.230
What do you call that?

00:06:18.230 --> 00:06:19.810
A driver, whatever--

00:06:19.810 --> 00:06:22.590
client library that's really
nice and that the client

00:06:22.590 --> 00:06:27.000
library automatically updates
itself to match the API so

00:06:27.000 --> 00:06:29.580
that the client libraries
don't go out of date.

00:06:29.580 --> 00:06:32.880
And so this is a problem that
we've had in the YouTube world

00:06:32.880 --> 00:06:33.630
for a long time.

00:06:33.630 --> 00:06:37.190
And that sometimes we'll make
changes in our API, and the

00:06:37.190 --> 00:06:41.110
REST API will be very
well-documented, very, very

00:06:41.110 --> 00:06:43.100
functional, super,
super stable.

00:06:43.100 --> 00:06:45.900
But the client libraries
sometimes lag a little bit

00:06:45.900 --> 00:06:48.050
behind, especially since we
have to support so many

00:06:48.050 --> 00:06:49.520
programming languages.

00:06:49.520 --> 00:06:52.130
So this problem kind of
goes away with the

00:06:52.130 --> 00:06:54.860
newer client libraries.

00:06:54.860 --> 00:06:59.200
They will automatically adjust
themselves to whatever the API

00:06:59.200 --> 00:07:00.080
currently is.

00:07:00.080 --> 00:07:05.870
And so I really look forward
to a future with up-to-date

00:07:05.870 --> 00:07:07.460
client libraries.

00:07:07.460 --> 00:07:08.860
LOUIS GRAY: [? Now, Jerek ?]
actually had a question.

00:07:08.860 --> 00:07:10.830
You were getting close
to this issue.

00:07:10.830 --> 00:07:12.995
We were talking about dynamic
languages a little bit ago.

00:07:12.995 --> 00:07:15.610
So [? Jerek ?] was saying, he's
told the time save with

00:07:15.610 --> 00:07:19.250
dynamic languages such as Ruby
can be invested in better test

00:07:19.250 --> 00:07:22.170
coverages, which leads
to better software.

00:07:22.170 --> 00:07:23.250
Do you think that that's true?

00:07:23.250 --> 00:07:25.300
Or do developers usually take
that time savings and just go

00:07:25.300 --> 00:07:27.060
watch more YouTube videos?

00:07:27.060 --> 00:07:30.020
JJ BEHRENS: Well, it's tough
because I try to do a little

00:07:30.020 --> 00:07:32.150
bit of both.

00:07:32.150 --> 00:07:34.890
I do want to watch those
YouTube videos, but--

00:07:34.890 --> 00:07:40.800
yeah, this is a way of thinking
that's been popular

00:07:40.800 --> 00:07:42.740
in the programming world
for a while.

00:07:42.740 --> 00:07:45.060
I think it was Bruce Eckel.

00:07:45.060 --> 00:07:45.760
I forget.

00:07:45.760 --> 00:07:47.790
The guy who wrote Thinking
in Java, who first

00:07:47.790 --> 00:07:49.130
pointed this out.

00:07:49.130 --> 00:07:53.090
And I think that this idea is
popular in the Python world,

00:07:53.090 --> 00:07:56.990
but it's even more popular in
the Ruby on Rails world.

00:07:56.990 --> 00:07:58.910
The Ruby on Rails world--

00:07:58.910 --> 00:08:01.120
of all the programming
communities out there, they

00:08:01.120 --> 00:08:04.640
seem to be the most devoted
to testing and test-driven

00:08:04.640 --> 00:08:05.640
development.

00:08:05.640 --> 00:08:07.750
And so Ruby on Rails
lets you program

00:08:07.750 --> 00:08:10.190
software incredibly quickly.

00:08:10.190 --> 00:08:14.490
And yet it could turn to mush
pretty quickly if you don't

00:08:14.490 --> 00:08:15.330
keep a hold of it.

00:08:15.330 --> 00:08:19.110
And so using test-driven
development with a very, very

00:08:19.110 --> 00:08:22.610
strong test suite is how you
keep the wheels from coming

00:08:22.610 --> 00:08:24.020
off the cart that's flying
down the road

00:08:24.020 --> 00:08:25.320
at 70 miles an hour.

00:08:25.320 --> 00:08:26.685
LOUIS GRAY: And is that why you
use a debugger to code how

00:08:26.685 --> 00:08:28.210
to do this?

00:08:28.210 --> 00:08:30.780
JJ BEHRENS: So the debugging
trick is

00:08:30.780 --> 00:08:32.080
kind of a funny trick.

00:08:32.080 --> 00:08:34.970
And I did this even before I was
a Ruby on Rails developer.

00:08:34.970 --> 00:08:40.370
When you're coding in a very
dynamic programming language,

00:08:40.370 --> 00:08:43.049
there's so much stuff that's
going on at runtime, you just

00:08:43.049 --> 00:08:46.390
can't statically analyze the
code in order to figure out

00:08:46.390 --> 00:08:47.900
what's going on.

00:08:47.900 --> 00:08:51.440
So much stuff is being injected
and metaclasses, and

00:08:51.440 --> 00:08:52.950
all kinds of funky stuff--

00:08:52.950 --> 00:08:55.060
metaprogramming happening
at runtime.

00:08:55.060 --> 00:08:58.400
And so sometimes the only way,
the only source of truth, is

00:08:58.400 --> 00:08:59.920
the actual running program.

00:08:59.920 --> 00:09:02.770
And so I discovered years ago
that the best way to write

00:09:02.770 --> 00:09:05.810
software is fire up the program,
get it going, and

00:09:05.810 --> 00:09:08.530
then dump yourself into the
debugger in the middle of the

00:09:08.530 --> 00:09:09.640
running program.

00:09:09.640 --> 00:09:10.510
And then look around.

00:09:10.510 --> 00:09:13.390
Play around with what
variables you have.

00:09:13.390 --> 00:09:18.070
And the debuggers for Python
and Ruby aren't like the

00:09:18.070 --> 00:09:20.080
debuggers for C, where
it's just a way

00:09:20.080 --> 00:09:21.760
to inspect the state.

00:09:21.760 --> 00:09:23.460
Rather, they're shells.

00:09:23.460 --> 00:09:25.390
So you could write
code in them.

00:09:25.390 --> 00:09:28.780
And I use this trick to write
lots of code in the debugger,

00:09:28.780 --> 00:09:30.370
get it all working,
and then copy and

00:09:30.370 --> 00:09:32.550
paste it into my program.

00:09:32.550 --> 00:09:33.830
Great trick.

00:09:33.830 --> 00:09:35.980
LOUIS GRAY: Now, I'm going to
get you back to version 3.

00:09:35.980 --> 00:09:37.450
See, I was trying to get you
to leak stuff before.

00:09:37.450 --> 00:09:40.020
But if I continue to ask you,
you'll keep leaking.

00:09:40.020 --> 00:09:42.870
And so we were talking about
client libraries before.

00:09:42.870 --> 00:09:45.310
What do the client libraries
have to do with version 3 of

00:09:45.310 --> 00:09:46.250
the YouTube API?

00:09:46.250 --> 00:09:50.290
JJ BEHRENS: So the big key
here is we're going to be

00:09:50.290 --> 00:09:52.970
talking about version
3 coming out.

00:09:52.970 --> 00:09:55.350
And it's based on the new
API infrastructure.

00:09:55.350 --> 00:09:59.510
And Google has this new API
infrastructure that's used by

00:09:59.510 --> 00:10:01.550
some of the newer Google APIs.

00:10:01.550 --> 00:10:04.770
And because we now have this
common API infrastructure, we

00:10:04.770 --> 00:10:08.350
have things like consolidated
developer keys.

00:10:08.350 --> 00:10:11.260
But this new API infrastructure
is also what

00:10:11.260 --> 00:10:14.390
makes it possible for all
the APIs at Google

00:10:14.390 --> 00:10:15.560
to behave the same.

00:10:15.560 --> 00:10:19.510
We'd like it if we could get to
the point where a developer

00:10:19.510 --> 00:10:21.800
knows how to develop
with Google APIs.

00:10:21.800 --> 00:10:25.050
And when he needs to use
a new API, it just

00:10:25.050 --> 00:10:25.670
kind of makes sense.

00:10:25.670 --> 00:10:26.900
Because it works like
everything else.

00:10:26.900 --> 00:10:28.640
And he doesn't need a
new client library

00:10:28.640 --> 00:10:30.030
for every new API.

00:10:30.030 --> 00:10:32.400
He could just use his existing
client library because that

00:10:32.400 --> 00:10:35.200
client library should just
automatically know how to work

00:10:35.200 --> 00:10:36.170
with that API.

00:10:36.170 --> 00:10:37.440
And that's the goal.

00:10:37.440 --> 00:10:39.790
It's slowly taking
place at Google.

00:10:39.790 --> 00:10:42.210
Some of the products have
already moved over, and I

00:10:42.210 --> 00:10:44.110
think we're going to see
a lot more of that.

00:10:44.110 --> 00:10:44.930
LOUIS GRAY: Now,
[? C Truman ?]

00:10:44.930 --> 00:10:47.980
from LA was having a question,
fired it over the moderator.

00:10:47.980 --> 00:10:51.440
Beyond education, what are
some other app ideas that

00:10:51.440 --> 00:10:53.350
could be implemented
using YouTube APIs

00:10:53.350 --> 00:10:54.940
with Ruby on Rails?

00:10:54.940 --> 00:10:56.490
JJ BEHRENS: Oh, that's
a great question.

00:10:56.490 --> 00:10:59.000
So it's funny.

00:10:59.000 --> 00:11:01.510
When I first did this talk,
it's like I had this goal.

00:11:01.510 --> 00:11:04.600
I wanted to talk about education
because I wanted to

00:11:04.600 --> 00:11:07.230
spend a little while devoted
to education.

00:11:07.230 --> 00:11:09.230
And I wanted to talk about
Ruby on Rails.

00:11:09.230 --> 00:11:12.380
And I was like, how the heck
do I do these two things at

00:11:12.380 --> 00:11:13.430
the same time?

00:11:13.430 --> 00:11:17.220
Because I only have a fixed
amount of time to write some

00:11:17.220 --> 00:11:18.550
software, give some talks.

00:11:18.550 --> 00:11:20.090
How do I do these things
at the same time?

00:11:20.090 --> 00:11:21.100
So I was like, whatever.

00:11:21.100 --> 00:11:22.780
I'll just do both of them
at the same time.

00:11:22.780 --> 00:11:25.580
But the fact of the matter is,
you could write educational

00:11:25.580 --> 00:11:26.760
apps in Python.

00:11:26.760 --> 00:11:29.230
And you could write
non-educational

00:11:29.230 --> 00:11:30.250
apps in Ruby on Rails.

00:11:30.250 --> 00:11:32.570
It doesn't matter.

00:11:32.570 --> 00:11:34.790
By having the one talk, I
address the two different

00:11:34.790 --> 00:11:35.840
things at the same time.

00:11:35.840 --> 00:11:37.500
But mix and match.

00:11:37.500 --> 00:11:39.910
There's lots of different ways
to do education and lots of

00:11:39.910 --> 00:11:42.340
different programming
languages.

00:11:42.340 --> 00:11:44.240
And there's lots of different
things that you could do with

00:11:44.240 --> 00:11:46.430
Ruby on Rails other
than education.

00:11:46.430 --> 00:11:47.820
LOUIS GRAY: I'm going to ask
you a different question.

00:11:47.820 --> 00:11:49.980
Now, you've been at YouTube
for about a year.

00:11:49.980 --> 00:11:52.100
How would you say YouTube is
a little bit different,

00:11:52.100 --> 00:11:53.670
possibly, than the
rest of Google?

00:11:53.670 --> 00:11:56.093
What's really unique about being
a developer there and a

00:11:56.093 --> 00:11:56.780
developer here?

00:11:56.780 --> 00:11:58.490
JJ BEHRENS: It's funny.

00:11:58.490 --> 00:11:59.460
It's a subtle thing.

00:11:59.460 --> 00:12:04.420
We like to say that it's a
ghetto in the good way.

00:12:04.420 --> 00:12:07.270
My grandmother came from
a Russian ghetto.

00:12:07.270 --> 00:12:10.500
And it was a nice place for
her, according to her.

00:12:10.500 --> 00:12:12.690
She says, everyone
knew each other.

00:12:12.690 --> 00:12:14.150
Everyone liked each other.

00:12:14.150 --> 00:12:15.680
YouTube, that's definitely
the case.

00:12:15.680 --> 00:12:18.230
We are a little bit
of a niche.

00:12:18.230 --> 00:12:19.980
My key card does still
work in all the

00:12:19.980 --> 00:12:21.240
different places in Google.

00:12:21.240 --> 00:12:23.700
And that's good because
I like to eat at all

00:12:23.700 --> 00:12:25.920
the different cafes.

00:12:25.920 --> 00:12:28.160
We do have a lot of the same--

00:12:28.160 --> 00:12:29.860
we have pretty much all
the same process.

00:12:29.860 --> 00:12:32.450
We use all the same tools.

00:12:32.450 --> 00:12:38.150
But there's a little bit
of a different focus.

00:12:38.150 --> 00:12:43.250
I watch a couple videos
a day at Google.

00:12:43.250 --> 00:12:45.890
I don't know if it's as
well-accepted in other parts

00:12:45.890 --> 00:12:48.170
of Google to just chill
out for 20 minutes

00:12:48.170 --> 00:12:48.900
and watch some YouTube.

00:12:48.900 --> 00:12:50.410
But it's definitely the case--

00:12:50.410 --> 00:12:51.710
LOUIS GRAY: You can chill out,
watch some YouTube videos, and

00:12:51.710 --> 00:12:52.600
say, no, I'm working.

00:12:52.600 --> 00:12:54.315
In case the boss comes by, you
say, I'm troubleshooting.

00:12:54.315 --> 00:12:55.490
JJ BEHRENS: Oh, yeah, that's
definitely like--

00:12:55.490 --> 00:12:58.750
although the normal trick of
being a software engineer and

00:12:58.750 --> 00:13:02.270
saying, my code's compiling,
that does not work at YouTube.

00:13:02.270 --> 00:13:04.360
Because most of our software
is written in Python.

00:13:04.360 --> 00:13:05.370
So there's no compiling.

00:13:05.370 --> 00:13:06.340
LOUIS GRAY: That's too bad.

00:13:06.340 --> 00:13:07.750
JJ BEHRENS: Yeah, really.

00:13:07.750 --> 00:13:07.950
So.

00:13:07.950 --> 00:13:09.690
LOUIS GRAY: Well, anything else
we should tell everybody

00:13:09.690 --> 00:13:12.400
before we head off and start
working to get ready for I/O?

00:13:12.400 --> 00:13:13.890
JJ BEHRENS: Oh, jeez.

00:13:13.890 --> 00:13:15.090
Is it time to go to sleep yet?

00:13:15.090 --> 00:13:16.075
I mean, I'm exhausted.

00:13:16.075 --> 00:13:16.330
LOUIS GRAY: I know.

00:13:16.330 --> 00:13:17.190
There's time for that.

00:13:17.190 --> 00:13:18.100
That's the July 4
week, I believe.

00:13:18.100 --> 00:13:19.270
JJ BEHRENS: Oh, is that right?

00:13:19.270 --> 00:13:21.430
Yeah, this Google
I/O stuff, wow.

00:13:21.430 --> 00:13:22.370
It's a busy time.

00:13:22.370 --> 00:13:23.570
I'm super excited about it.

00:13:23.570 --> 00:13:27.040
I know we have a lot of great
talks coming up at Google I/O.

00:13:27.040 --> 00:13:30.560
A lot of great YouTube talks
because I've been watching all

00:13:30.560 --> 00:13:31.420
the rehearsals.

00:13:31.420 --> 00:13:34.440
And I know that we're leaking as
many things as we possibly

00:13:34.440 --> 00:13:36.080
can to get people excited
about it.

00:13:36.080 --> 00:13:37.240
LOUIS GRAY: So there's lots
of news coming up.

00:13:37.240 --> 00:13:38.090
I'm sure we don't have time
to cover all of it.

00:13:38.090 --> 00:13:38.940
JJ BEHRENS: I know.

00:13:38.940 --> 00:13:39.900
I know.

00:13:39.900 --> 00:13:41.200
But I'm super excited.

00:13:41.200 --> 00:13:42.880
I'm excited to see that
[? keynote ?]

00:13:42.880 --> 00:13:45.560
because even I don't know
what's going to happen.

00:13:45.560 --> 00:13:46.870
LOUIS GRAY: I won't tell you.

00:13:46.870 --> 00:13:47.040
All right.

00:13:47.040 --> 00:13:47.850
Well, thanks a lot, JJ.

00:13:47.850 --> 00:13:48.530
JJ BEHRENS: Thanks
a lot, Louis.

00:13:48.530 --> 00:13:48.800
LOUIS GRAY: Thanks for spending
time with us.

00:13:48.800 --> 00:13:49.730
I appreciate it.

00:13:49.730 --> 00:13:50.480
JJ BEHRENS: Very nice.

00:13:50.480 --> 00:13:51.730
LOUIS GRAY: Thanks.

