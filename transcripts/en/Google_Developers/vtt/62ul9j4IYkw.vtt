WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.810
MANDY WAITE: So for GAE
Java there is detailed

00:00:03.810 --> 00:00:06.350
documentation for low-level
data store API.

00:00:06.350 --> 00:00:09.175
However, fewer, and incomplete
documentation, for how to map

00:00:09.175 --> 00:00:12.020
entity relationships
with JDO JPA.

00:00:12.020 --> 00:00:15.700
DataNucleus is detailed, however
no easy way to tell if

00:00:15.700 --> 00:00:18.515
GAE supports a feature.

00:00:18.515 --> 00:00:19.830
So, there's a question
there somewhere.

00:00:19.830 --> 00:00:22.350
FRED SAUER: Yeah, so the
question is really I think

00:00:22.350 --> 00:00:27.520
around getting to the full
details and capabilities of

00:00:27.520 --> 00:00:30.870
JDO and JPA on App Engine.

00:00:30.870 --> 00:00:33.110
Maybe I should put this a
little bit in context.

00:00:33.110 --> 00:00:38.680
When we launched the Java
runtime on App Engine, we

00:00:38.680 --> 00:00:41.990
looked at the active frameworks
and abstractions

00:00:41.990 --> 00:00:43.310
that people were using.

00:00:43.310 --> 00:00:45.750
JDO and JPA were very popular.

00:00:45.750 --> 00:00:48.190
And so we did a lot of work to
make sure that those were

00:00:48.190 --> 00:00:50.460
properly supported
in App Engine.

00:00:50.460 --> 00:00:55.930
We also felt like users really
benefited from SQL-like

00:00:55.930 --> 00:01:03.390
language, and so we launched GQL
as a way of accessing the

00:01:03.390 --> 00:01:04.430
data store.

00:01:04.430 --> 00:01:09.770
And what we found over time,
actually, is that developers,

00:01:09.770 --> 00:01:12.370
after a little while, feel
much more productive when

00:01:12.370 --> 00:01:15.800
they're working much closer with
the low-level APIs of App

00:01:15.800 --> 00:01:18.570
Engine, or some abstraction
that sits on top of those

00:01:18.570 --> 00:01:21.160
low-level APIs.

00:01:21.160 --> 00:01:24.480
So in the case of Python,
we had the

00:01:24.480 --> 00:01:27.310
low-level Python data store.

00:01:27.310 --> 00:01:32.860
We've now iterated on that and
we have NDB, the new database

00:01:32.860 --> 00:01:35.950
one, which is sort of the way
that we wish we had written it

00:01:35.950 --> 00:01:41.160
the first time with Memcache
built in, and just usability

00:01:41.160 --> 00:01:43.790
is a lot better.

00:01:43.790 --> 00:01:46.750
On the Java side, we've actually
had the community

00:01:46.750 --> 00:01:51.880
step up and produce an ORM
framework called Objectify.

00:01:51.880 --> 00:01:52.720
And there's others out there.

00:01:52.720 --> 00:01:55.710
There's a developer in
Japan who created

00:01:55.710 --> 00:01:57.690
something called Slim3.

00:01:57.690 --> 00:02:00.370
It's another abstraction
layer for Java.

00:02:00.370 --> 00:02:05.780
And they do a really good job of
sort of abstracting the way

00:02:05.780 --> 00:02:08.930
of the data store a little bit,
but still staying very

00:02:08.930 --> 00:02:12.240
close to the native performance
characteristics,

00:02:12.240 --> 00:02:14.110
doing things kind of
the right way.

00:02:14.110 --> 00:02:18.470
Objectify, I know, also
has Memcache built in.

00:02:18.470 --> 00:02:20.960
And it just lets you
work with POJOs, so

00:02:20.960 --> 00:02:22.520
Plain Old Java Objects.

00:02:22.520 --> 00:02:25.280
So you have a Java object with a
bunch of properties, getters

00:02:25.280 --> 00:02:26.200
and setters.

00:02:26.200 --> 00:02:28.150
You can just take that object
and you push it in the data

00:02:28.150 --> 00:02:29.810
store, get it right back out.

00:02:29.810 --> 00:02:34.550
And that really feels a lot more
natural working in App

00:02:34.550 --> 00:02:36.730
Engine than the JDO and JPA.

00:02:36.730 --> 00:02:39.770
And so the way to kind of look
at those technologies right

00:02:39.770 --> 00:02:44.880
now is, if you're a big JDO and
JPA fan, or you just use

00:02:44.880 --> 00:02:47.810
those in your environment, and
you'd like to, please continue

00:02:47.810 --> 00:02:48.310
to use them.

00:02:48.310 --> 00:02:49.980
They're there for you.

00:02:49.980 --> 00:02:52.370
But if you're kind of new to App
Engine, or you're at all

00:02:52.370 --> 00:02:56.570
unfamiliar about JDO and JPA,
by all means use either the

00:02:56.570 --> 00:03:01.140
low-level APIs, or something
like Objectify in Java,

00:03:01.140 --> 00:03:03.650
because you'll just have a
much better experience.

00:03:03.650 --> 00:03:07.480
And those were written from the
ground up for App Engine.

00:03:07.480 --> 00:03:10.950
Whereas JDO and JPA were
written in a world

00:03:10.950 --> 00:03:13.280
where SQL was king.

00:03:13.280 --> 00:03:16.610
And it's a little bit
of an unnatural fit.

00:03:16.610 --> 00:03:20.040
We got that square peg into the
round hole, but we had to

00:03:20.040 --> 00:03:23.080
use a hammer a little bit, and
so the corners are a little

00:03:23.080 --> 00:03:24.140
bit rounded off.

00:03:24.140 --> 00:03:24.580
MANDY WAITE: OK.

00:03:24.580 --> 00:03:27.086
I come from a Java EE
background, so I used to have

00:03:27.086 --> 00:03:28.336
a very big hammer.

