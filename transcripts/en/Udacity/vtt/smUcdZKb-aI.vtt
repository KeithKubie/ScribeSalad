WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.350
So virtual networks have various design goals. It

00:00:03.350 --> 00:00:06.790
should be flexible, able to support different topologies,

00:00:06.790 --> 00:00:10.720
routing and forwarding architectures and independent configurations. They

00:00:10.720 --> 00:00:13.290
should be manageable, in other words, they should separate

00:00:13.290 --> 00:00:15.260
the policy that a network operator is trying

00:00:15.260 --> 00:00:18.330
to specify from the mechanisms of how those policies

00:00:18.330 --> 00:00:21.910
are implemented. They should be scalable, maximizing the

00:00:21.910 --> 00:00:25.840
number or coexisting virtual networks. They should be secure

00:00:25.840 --> 00:00:27.970
by isolating the different logical networks from

00:00:27.970 --> 00:00:31.050
one another. They should be programmable and

00:00:31.050 --> 00:00:33.380
they should be heterogenious in the sense

00:00:33.380 --> 00:00:36.930
that they should support different technologies. So virtual

00:00:36.930 --> 00:00:41.050
networks have two components, nodes and edges.

00:00:41.050 --> 00:00:44.560
The physical nodes themselves must be virtualized. One

00:00:44.560 --> 00:00:46.630
possible way virtualizing a node is a

00:00:46.630 --> 00:00:51.310
virtual machine. A more lightweight way of virtualizing

00:00:51.310 --> 00:00:56.210
a node is using a virtual environment such as a VServer or a Jail.

00:00:56.210 --> 00:00:59.245
The hypervisor or whatever technology is enabling

00:00:59.245 --> 00:01:02.670
the virtual environment can effectively slice the

00:01:02.670 --> 00:01:06.210
underlying physical hardware to provide the allusion

00:01:06.210 --> 00:01:09.390
of multiple guest nodes or multiple virtual

00:01:09.390 --> 00:01:13.910
nodes. Examples of node virtualization include, virtual

00:01:13.910 --> 00:01:16.890
machine environment such as Xen or VMware or

00:01:16.890 --> 00:01:20.540
what's called OS level virtualization or virtual environments,

00:01:20.540 --> 00:01:23.580
such as Linux Vservers. Now, in a virtual network,

00:01:23.580 --> 00:01:26.590
we need to connect these virtual machines. Each

00:01:26.590 --> 00:01:30.060
virtual machine or virtual environment has its own view

00:01:30.060 --> 00:01:32.250
of the network stack. And we may want

00:01:32.250 --> 00:01:35.330
to provide the appearance that these nodes are connected

00:01:35.330 --> 00:01:38.890
to one another over a Layer two topology,

00:01:38.890 --> 00:01:42.380
even if they are in fact separated by multiple

00:01:42.380 --> 00:01:49.210
IP hops. One possible way of doing that is to encapsulate the Ethernet packet as

00:01:49.210 --> 00:01:54.740
it leaves the VM on the left in an IP packet. The IP packet can then be destined

00:01:54.740 --> 00:01:56.650
for the IP address of the machine on

00:01:56.650 --> 00:01:59.870
the right, and when the packet arrives at this

00:01:59.870 --> 00:02:03.920
machine, the host can decapsulate the packet and

00:02:03.920 --> 00:02:07.800
pass the original Ethernet packet to the VM or

00:02:07.800 --> 00:02:10.820
the virtual environment that's residing on that physical

00:02:10.820 --> 00:02:13.450
node. Each of one these physical hosts, may

00:02:13.450 --> 00:02:16.695
in fact, host multiple virtual machines or virtual

00:02:16.695 --> 00:02:19.030
environments, which creates the need for a virtual

00:02:19.030 --> 00:02:22.020
switch that resides on a physical host. This

00:02:22.020 --> 00:02:26.090
virtual switch provides the function of networking virtual

00:02:26.090 --> 00:02:30.570
machines together over a virtual layer two topology.

00:02:30.570 --> 00:02:32.850
The Linux bridge is an example of a software

00:02:32.850 --> 00:02:35.620
switch that can perform this type of function.

00:02:35.620 --> 00:02:40.160
Open Vswitch is another example of software that performs

00:02:40.160 --> 00:02:42.940
this type of glue function. You can see more

00:02:42.940 --> 00:02:47.430
information about Open Vswitch on the URL provided here.

