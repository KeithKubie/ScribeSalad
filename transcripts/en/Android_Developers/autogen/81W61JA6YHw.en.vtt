WEBVTT
Kind: captions
Language: en

00:00:02.105 --> 00:00:05.988
 One of the unique features of mobile applications is site recognition. 

00:00:06.080 --> 00:00:08.340
 Mobile users take their devices everywhere 

00:00:08.340 --> 00:00:12.837
 Adding site awareness to your app gives users a more engaging experience. 

00:00:13.010 --> 00:00:14.133
 My name is Colt McCannless, 

00:00:14.134 --> 00:00:17.494
 While this attractive location data makes your app more useful, 

00:00:17.630 --> 00:00:20.462
 , Abuse can cost you a lot with respect to battery life. 

00:00:20.782 --> 00:00:24.442
 Now, the standard site request seems like something like this. 

00:00:24.450 --> 00:00:25.778
 On behalf of performance, 

00:00:25.779 --> 00:00:29.805
 Let's take a look at the first two values, the two API intervals. 

00:00:29.950 --> 00:00:32.497
 SetInterval sets the rate in milliseconds 

00:00:32.514 --> 00:00:35.436
 Where your app prefers to receive site updates. 

00:00:35.540 --> 00:00:37.972
 The lower the number, the more updates you get, 

00:00:38.012 --> 00:00:40.334
 Of course the more you consume the battery as a result, 

00:00:40.460 --> 00:00:44.410
 Which means finding the right value to use as a time interval is an important balance. 

00:00:44.410 --> 00:00:47.687
 If it is too fast, a lot of battery will be consumed for GPS requests. 

00:00:47.920 --> 00:00:52.096
 If it's too slow, your app will not update quickly enough to be useful to the user. 

00:00:52.340 --> 00:00:54.380
 Eventually you want to reach the state 

00:00:54.380 --> 00:00:57.790
 So you can be more dynamic in terms of how you interact with this device. 

00:00:57.790 --> 00:01:01.222
 For example, if you notice that the site has stayed the same for a while, 

00:01:01.333 --> 00:01:04.861
 There is a high probability that the user will be fixed for a long time. 

00:01:05.000 --> 00:01:09.250
 So try to reduce the sampling interval in order to reduce battery depletion 

00:01:09.250 --> 00:01:10.740
 Resulting from this process. 

00:01:11.020 --> 00:01:13.063
 But it should also be noted that other applications 

00:01:13.102 --> 00:01:16.967
 Also affects the rate of updates sent to your app. 

00:01:16.967 --> 00:01:20.760
 In fact, the platform will send updates at a faster rate 

00:01:20.761 --> 00:01:24.975
 Of any application requests updates with the Setinterval API 

00:01:25.053 --> 00:01:26.629
 Across the entire system, 

00:01:26.840 --> 00:01:29.497
 This means that your app can eventually receive site events 

00:01:29.529 --> 00:01:33.075
 Faster than the required frequency of your application, 

00:01:33.149 --> 00:01:35.480
 It may flood you with a torrent of site information 

00:01:35.480 --> 00:01:38.054
 It does a lot of other things that you do not really need to do. 

00:01:38.271 --> 00:01:42.077
 This is why the SetFastestInterval API is used. 

00:01:42.086 --> 00:01:43.460
 Basically, this lets you minimize 

00:01:43.461 --> 00:01:47.381
 The frequency at which you receive updates that you may not be interested in or are ready for. 

00:01:47.382 --> 00:01:50.715
 So that your application does not waste time updating and processing site events 

00:01:50.715 --> 00:01:52.383
 When it is not needed. 

00:01:52.720 --> 00:01:55.836
 Now let's take a look at setPriority. 

00:01:56.271 --> 00:02:00.561
 You have to remember that the prevailing way that your computer analyzes its physical location on Earth 

00:02:00.700 --> 00:02:03.672
 Are assisted by GPS devices. 

00:02:03.783 --> 00:02:08.970
 Basically, there is a series of satellites flying high outside the Earth's atmosphere 

00:02:09.060 --> 00:02:12.448
 Whose function is to deliver topical information to your device 

00:02:12.680 --> 00:02:13.980
 Based on your movements. 

00:02:13.980 --> 00:02:16.688
 Simply put, the GPS device in your phone 

00:02:16.689 --> 00:02:19.870
 Exchange signals between satellite and data tower 

00:02:19.870 --> 00:02:22.549
 To determine your position in space and time, 

00:02:22.597 --> 00:02:26.456
 Which as you imagine, is a very intense process on the battery. 

00:02:26.740 --> 00:02:29.919
 But this is not the only way you can get your site data. 

00:02:29.965 --> 00:02:33.401
 In addition to GPS expensive, there is also a network provider, 

00:02:33.402 --> 00:02:38.367
 Which determines the location based on the availability of the cellular tower and Wi-Fi access points. 

00:02:38.549 --> 00:02:41.511
 The result will provide you with less accurate results, 

00:02:41.710 --> 00:02:46.251
 But it uses only part of the battery compared to the GPS version. 

00:02:46.460 --> 00:02:50.720
 Of course, there is an anonymous provider, which is probably the most effective for the battery. 

00:02:50.720 --> 00:02:53.181
 When some other applications request the site, 

00:02:53.330 --> 00:02:56.219
 Results will also move through your app. 

00:02:56.394 --> 00:02:59.455
 This way your device does not send multiple queries to the site 

00:02:59.498 --> 00:03:01.775
 It can save battery for longer time. 

00:03:02.129 --> 00:03:05.835
 Now, in order to make all this accessible to the API needs of the site, 

00:03:05.836 --> 00:03:09.405
 You can control the types of networks and battery consumption you want 

00:03:09.528 --> 00:03:12.979
 Using the setPriority option to request the location. 

00:03:13.050 --> 00:03:15.510
 If you are already using an activity ID 

00:03:15.510 --> 00:03:18.765
 To determine what device or application it is or when it is not being used, 

00:03:18.766 --> 00:03:22.590
 You can take advantage of this data to turn off the site inquiry request 

00:03:22.590 --> 00:03:24.802
 Or you can reduce it when it is not needed. 

00:03:25.040 --> 00:03:28.802
 But in fact, the balance and gain for each API depends on the situation 

00:03:28.826 --> 00:03:30.879
 The process is indeed cumbersome, 

00:03:31.060 --> 00:03:33.672
 Which is why Android has made it much easier. 

00:03:33.890 --> 00:03:36.600
 By using the FusedLocationProvider API, 

00:03:36.600 --> 00:03:39.530
 Where you get a simplified interface for all this madness, 

00:03:39.530 --> 00:03:43.247
 Android will deal with all the chaotic details on your behalf, 

00:03:43.440 --> 00:03:46.340
 Saving you both battery as well as sanity based on code. 

00:03:46.564 --> 00:03:50.010
 Now, if you are puzzled about how the battery is consumed, 

00:03:50.012 --> 00:03:53.249
 Always make sure to take a closer look at the dated battery tool. 

00:03:53.440 --> 00:03:55.978
 It will gladly remind you of all the things you do wrong 

00:03:56.010 --> 00:03:57.955
 And give you hints on how to fix it. 

00:03:58.142 --> 00:04:00.692
 So as not to waste in the world of battery performance. 

00:04:00.728 --> 00:04:03.756
 Check out the rest of the video clips of Android performance patterns 

00:04:03.757 --> 00:04:08.151
 Join our Google+ forum to ask questions to great performance experts. 

00:04:08.480 --> 00:04:11.880
 So stay calm, type your code, and always remember, performance is important. 

