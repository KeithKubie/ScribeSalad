WEBVTT
Kind: captions
Language: en

00:00:03.120 --> 00:00:05.959
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.959 --> 00:00:09.179
Over the past two episodes, we’ve talked
a lot about computer security.

00:00:09.179 --> 00:00:14.080
But the fact is, there’s no such thing as
a perfectly, 100% secure, computer system.

00:00:14.080 --> 00:00:17.140
There will always be bugs and security experts
know that.

00:00:17.140 --> 00:00:21.340
So system architects employ a strategy called
defence in depth, which uses many layers of

00:00:21.340 --> 00:00:23.780
varying security mechanisms to frustrate attackers.

00:00:23.780 --> 00:00:27.980
It’s a bit like how castles are designed
– first you’ve got to dodge the archers,

00:00:27.980 --> 00:00:32.540
then cross the moat, scale the walls, avoid
the hot oil, get over the ramparts, and defeat

00:00:32.540 --> 00:00:36.449
the guards before you get to the throne room,
but in this case we’re talking about one

00:00:36.449 --> 00:00:39.860
of the most common forms of computer security
- Cryptography.

00:00:39.860 --> 00:00:49.060
INTRO

00:00:49.060 --> 00:00:53.120
The word cryptography comes from the roots
‘crypto’ and ‘graphy’, roughly translating

00:00:53.120 --> 00:00:54.780
to “secret writing”.

00:00:54.780 --> 00:00:58.879
In order to make information secret, you use
a cipher – an algorithm that converts plain

00:00:58.879 --> 00:01:03.949
text into ciphertext, which is gibberish unless
you have a key that lets you undo the cipher.

00:01:03.949 --> 00:01:08.430
The process of making text secret is called
encryption, and the reverse process is called

00:01:08.430 --> 00:01:09.300
decryption.

00:01:09.300 --> 00:01:11.580
Ciphers have been used long before computers
showed up.

00:01:11.580 --> 00:01:15.890
Julius Caesar used what’s now called a Caesar
cipher, to encrypt private correspondence.

00:01:15.890 --> 00:01:18.440
He would shift the letters in a message forward
by three places.

00:01:18.440 --> 00:01:21.760
So, A became D, and the word "brutus" became
this: "euxwxv".

00:01:21.760 --> 00:01:25.090
To decipher the message, recipients had to
know both the algorithm and the number to

00:01:25.090 --> 00:01:27.360
shift by, which acted as the key.

00:01:27.360 --> 00:01:32.260
The Caesar cipher is one example of a larger
class of techniques called substitution ciphers.

00:01:32.260 --> 00:01:35.940
These replace every letter in a message with
something else according to a translation.

00:01:35.940 --> 00:01:40.500
A big drawback of basic substitution ciphers
is that letter frequencies are preserved.

00:01:40.500 --> 00:01:44.820
For example, E is the most common letter in
English, so if your cipher translates E to

00:01:44.820 --> 00:01:48.270
an X, then X will show up the most frequently
in the ciphertext.

00:01:48.270 --> 00:01:51.960
A skilled cryptanalyst can work backwards
from these kinds of statistics to figure out

00:01:51.960 --> 00:01:52.960
the message.

00:01:52.960 --> 00:01:56.450
Indeed, it was the breaking of a substitution
cipher that led to the execution of Mary,

00:01:56.450 --> 00:02:00.140
Queen of Scots, in 1587 for plotting to kill
Queen Elizabeth.

00:02:00.140 --> 00:02:02.750
Another fundamental class of techniques are
permutation ciphers.

00:02:02.750 --> 00:02:06.720
Let’s look at a simple example, called a
columnar transposition cipher.

00:02:06.720 --> 00:02:09.819
Here, we take a message, and fill the letters
into a grid.

00:02:09.819 --> 00:02:11.890
In this case, we’ve chosen 5 by 5.

00:02:11.890 --> 00:02:15.980
To encrypt our message, we read out the characters
in a different order, let’s say from the

00:02:15.980 --> 00:02:19.129
bottom left, working upwards, one column at
a time.

00:02:19.129 --> 00:02:23.459
The new letter ordering, what’s called a
permutation, is the encrypted message.

00:02:23.459 --> 00:02:27.769
The ordering direction, as well as the 5 by
5 grid size, serves as the key.

00:02:27.769 --> 00:02:31.959
Like before, if the cipher and key are known,
a recipient can reverse the process to reveal

00:02:31.959 --> 00:02:33.180
the original message.

00:02:33.180 --> 00:02:37.349
By the 1900s, cryptography was mechanized
in the form of encryption machines.

00:02:37.349 --> 00:02:42.159
The most famous was the German Enigma, used
by the Nazis to encrypt their wartime communications.

00:02:42.159 --> 00:02:46.410
As we discussed back in Episode 15, the Enigma
was a typewriter-like machine, with a keyboard

00:02:46.410 --> 00:02:48.680
and lampboard, both showing the full alphabet.

00:02:48.680 --> 00:02:52.980
Above that, there was a series of configurable
rotors that were the key to the Enigma’s

00:02:52.980 --> 00:02:53.980
encryption capability.

00:02:53.980 --> 00:02:56.400
First, let’s look at just one rotor.

00:02:56.400 --> 00:02:59.529
One side had electrical contacts for all 26
letters.

00:02:59.529 --> 00:03:03.370
These connected to the other side of the rotor
using cross-crossing wires that swapped one

00:03:03.370 --> 00:03:04.420
letter for another.

00:03:04.420 --> 00:03:07.319
If ‘H’ went in, ‘K’ might come out
the other side.

00:03:07.319 --> 00:03:09.799
If “K’ went in, ‘F’ might come out,
and so on.

00:03:09.799 --> 00:03:14.379
This letter swapping behavior should sound
familiar: it’s a substitution cipher!

00:03:14.379 --> 00:03:19.319
But, the Enigma was more sophisticated because
it used three or more rotors in a row, each

00:03:19.320 --> 00:03:20.940
feeding into the next.

00:03:20.940 --> 00:03:25.580
Rotors could also be rotated to one of 26
possible starting positions, and they could

00:03:25.580 --> 00:03:29.640
be inserted in different orders, providing
a lot of different substitution mappings.

00:03:29.640 --> 00:03:32.489
Following the rotors was a special circuit
called a reflector.

00:03:32.489 --> 00:03:37.200
Instead of passing the signal on to another
rotor, it connected every pin to another,

00:03:37.200 --> 00:03:39.469
and sent the electrical signal back through
the rotors.

00:03:39.469 --> 00:03:42.519
Finally, there was a plugboard at the front
of the machine that allowed letters coming

00:03:42.519 --> 00:03:46.370
from the keyboard to be optionally swapped,
adding another level of complexity.

00:03:46.370 --> 00:03:51.419
With our simplified circuit, let’s encrypt
a letter on this example enigma configuration.

00:03:51.419 --> 00:03:56.159
If we press the ‘H’ key, electricity flows
through the plugboard, then the rotors, hits

00:03:56.159 --> 00:03:59.560
the reflector, comes back through the rotors
and plugboard, and illuminates the letter

00:03:59.560 --> 00:04:00.560
‘L’ on the lampboard.

00:04:00.560 --> 00:04:01.930
So H is encrypted to L.

00:04:01.930 --> 00:04:05.989
Note that the circuit can flow both ways – so
if we typed the letter ‘L’, ‘H’ would

00:04:05.989 --> 00:04:06.989
light up.

00:04:06.989 --> 00:04:10.959
In other words, it’s the same process for
encrypting and decrypting; you just have to

00:04:10.959 --> 00:04:14.569
make sure the sending and receiving machines
have the same initial configuration.

00:04:14.569 --> 00:04:19.130
If you look carefully at this circuit, you’ll
notice it’s impossible for a letter to be

00:04:19.130 --> 00:04:22.200
encrypted as itself, which turned out to be
a fatal cryptographic weakness.

00:04:22.200 --> 00:04:26.580
Finally, to prevent the Enigma from being
a simple substitution cipher, every single

00:04:26.580 --> 00:04:31.200
time a letter was entered, the rotors advanced
by one spot, sort of like an odometer in a

00:04:31.200 --> 00:04:31.960
car.

00:04:31.960 --> 00:04:36.620
So if you entered the text A-A-A, it might
come out as B-D-K, where the substitution

00:04:36.620 --> 00:04:38.500
mapping changed with every key press.

00:04:38.509 --> 00:04:40.789
The Enigma was a tough cookie to crack, for
sure.

00:04:40.789 --> 00:04:45.020
But as we discussed in Episode 15, Alan Turing
and his colleagues at Bletchley Park were

00:04:45.020 --> 00:04:47.860
able to break Enigma codes and largely automate
the process.

00:04:47.860 --> 00:04:52.400
But with the advent of computers, cryptography
moved from hardware into software.

00:04:52.400 --> 00:04:56.400
One of the earliest software ciphers to become
widespread was the Data Encryption Standard

00:04:56.400 --> 00:04:59.920
developed by IBM and the NSA in 1977.

00:04:59.920 --> 00:05:05.039
DES, as it was known, originally used binary
keys that were 56 bits long, which means that

00:05:05.039 --> 00:05:09.190
there are 2 to the 56, or about 72 quadrillion
different keys.

00:05:09.190 --> 00:05:14.159
Back in 1977, that meant that nobody – except
perhaps the NSA – had enough computing power

00:05:14.159 --> 00:05:16.150
to brute-force all possible keys.

00:05:16.150 --> 00:05:21.970
But, by 1999, a quarter-million dollar computer
could try every possible DES key in just two

00:05:21.970 --> 00:05:24.190
days, rendering the cipher insecure.

00:05:24.190 --> 00:05:29.060
So, in 2001, the Advanced Encryption Standard
(AES) was finalized and published.

00:05:29.060 --> 00:05:37.030
AES is designed to use much bigger keys – 128,
192 or 256 bits in size – making brute force

00:05:37.030 --> 00:05:38.090
attacks much, much harder.

00:05:38.090 --> 00:05:44.210
For a 128-bit keys, you'd need trillions of
years to try every combination, even if you

00:05:44.210 --> 00:05:46.880
used every single computer on the planet today.

00:05:46.880 --> 00:05:48.039
So you better get started!

00:05:48.039 --> 00:05:53.490
AES chops data up into 16-byte blocks, and
then applies a series of substitutions and

00:05:53.490 --> 00:05:58.050
permutations, based on the key value, plus
some other operations to obscure the message,

00:05:58.050 --> 00:06:01.569
and this process is repeated ten or more times
for each block.

00:06:01.569 --> 00:06:03.840
You might be wondering: why only ten rounds?

00:06:03.840 --> 00:06:07.229
Or why only 128 bit keys, and not ten thousand
bit keys?

00:06:07.229 --> 00:06:09.720
Well, it’s a performance tradeoff.

00:06:09.720 --> 00:06:13.910
If it took hours to encrypt and send an email,
or minutes to connect to a secure website,

00:06:13.910 --> 00:06:15.160
people wouldn't use it.

00:06:15.160 --> 00:06:19.020
AES balances performance and security to provide
practical cryptography.

00:06:19.020 --> 00:06:23.789
Today, AES is used everywhere, from encrypting
files on iPhones and transmitting data over

00:06:23.789 --> 00:06:27.830
WiFi with WPA2, to accessing websites using HTTPS.

00:06:27.830 --> 00:06:32.490
So far, the cryptographic techniques we’ve
discussed rely on keys that are known by both

00:06:32.490 --> 00:06:34.099
sender and recipient.

00:06:34.100 --> 00:06:38.880
The sender encrypts a message using a key, and the recipient decrypts it using the same key.

00:06:38.880 --> 00:06:43.680
In the old days, keys would be shared by voice,
or physically; for example, the Germans distributed

00:06:43.680 --> 00:06:46.520
codebooks with daily settings for their Enigma
machines.

00:06:46.520 --> 00:06:49.650
But this strategy could never work in the
internet era.

00:06:49.650 --> 00:06:52.710
Imagine having to crack open a codebook to
connect to youtube!

00:06:52.710 --> 00:06:56.620
What’s needed is a way for a server to send
a secret key over the public internet to a

00:06:56.620 --> 00:06:59.020
user wishing to connect securely.

00:06:59.020 --> 00:07:02.960
It seems like that wouldn’t be secure, because
if the key is sent in the open and intercepted

00:07:02.960 --> 00:07:06.990
by a hacker, couldn’t they use that to decrypt
all communication between the two?

00:07:06.990 --> 00:07:09.129
The solution is key exchange!

00:07:09.129 --> 00:07:13.100
– An algorithm that lets two computers agree
on a key without ever sending one.

00:07:13.100 --> 00:07:17.960
We can do this with one-way functions – mathematical
operations that are very easy to do in one

00:07:17.960 --> 00:07:19.879
direction, but hard to reverse.

00:07:19.879 --> 00:07:23.990
To show you how one-way functions work, let’s
use paint colors as an analogy.

00:07:23.990 --> 00:07:27.990
It’s easy to mix paint colors together,
but it’s not so easy to figure out the constituent

00:07:27.990 --> 00:07:30.509
colors that were used to make a mixed paint
color.

00:07:30.509 --> 00:07:33.389
You’d have to test a lot of possibilities
to figure it out.

00:07:33.389 --> 00:07:36.550
In this metaphor, our secret key is a unique
shade of paint.

00:07:36.550 --> 00:07:39.380
First, there’s a public paint color that
everyone can see.

00:07:39.380 --> 00:07:41.830
Then, John and I each pick a secret paint
color.

00:07:41.830 --> 00:07:45.919
To exchange keys, I mix my secret paint color
with the public paint color.

00:07:45.919 --> 00:07:50.449
Then, I send that mixed color to John by any
means – mail, carrier pigeon, whatever.

00:07:50.449 --> 00:07:54.520
John does the same – mixing his secret paint
color with the public color, then sending

00:07:54.520 --> 00:07:55.520
that to me.

00:07:55.520 --> 00:07:58.949
When I receive John’s color, I simply add
my private color to create a blend of all

00:07:58.949 --> 00:07:59.949
three paints.

00:07:59.949 --> 00:08:01.909
John does the same with my mixed color.

00:08:01.909 --> 00:08:02.909
And Voila!

00:08:02.909 --> 00:08:04.699
We both end up with the same paint color!

00:08:04.699 --> 00:08:09.599
We can use this as a shared secret, even though
we never sent each other our individual secret

00:08:09.599 --> 00:08:10.599
colors.

00:08:10.599 --> 00:08:14.889
A snooping outside observer would know partial
information, but they’d find it very difficult

00:08:14.889 --> 00:08:16.930
to figure out our shared secret color.

00:08:16.930 --> 00:08:20.240
Of course, sending and mixing paint colors
isn’t going to work well for transmitting

00:08:20.240 --> 00:08:21.500
computer data.

00:08:21.500 --> 00:08:25.590
But luckily, mathematical one-way functions
are perfect, and this is what Diffie-Hellman

00:08:25.590 --> 00:08:26.940
Key Exchange uses.

00:08:26.940 --> 00:08:30.560
In Diffie-Hellman, the one-way function is
modular exponentiation.

00:08:30.560 --> 00:08:34.610
This means taking one number, the base, to
the power of another number, the exponent,

00:08:34.610 --> 00:08:37.899
and taking the remainder when dividing by
a third number, the modulus.

00:08:37.899 --> 00:08:43.709
So, for example, if we wanted to calculate
3 to the 5th power, modulo 31, we would calculate

00:08:43.709 --> 00:08:50.459
3 to the 5th, which is 243, then take the
remainder when divided by 31, which is 26.

00:08:50.459 --> 00:08:54.209
The hard part is figuring out the exponent
given only the result and the base.

00:08:54.209 --> 00:08:59.389
If I tell you I raised 3 to some secret number,
modulo 31, and got 7 as the remainder, you'd

00:08:59.389 --> 00:09:02.200
have to test a lot of exponents to know which
one I picked.

00:09:02.200 --> 00:09:06.810
If we make these numbers big, say hundreds
of digits long, then finding the secret exponent

00:09:06.810 --> 00:09:08.220
is nearly impossible.

00:09:08.220 --> 00:09:12.300
Now let’s talk about how Diffie-Hellman
uses modular exponentiation to calculate a

00:09:12.300 --> 00:09:13.300
shared key.

00:09:13.300 --> 00:09:17.839
First, there's a set of public values – the
base and the modulus, that, like our public

00:09:17.839 --> 00:09:21.230
paint color, everyone gets to know... even
the bad guys!

00:09:21.230 --> 00:09:24.890
To send a message securely to John, I would
pick a secret exponent: X.

00:09:24.890 --> 00:09:28.279
Then, I’d calculate B to the power of X,
modulo M.

00:09:28.279 --> 00:09:30.540
I send this big number over to John.

00:09:30.540 --> 00:09:35.470
John does the same, picking a secret exponent
Y, and sending me B to the Y modulo M.

00:09:35.470 --> 00:09:40.279
To create a shared secret key, I take what
John sent me, and take it to the power of

00:09:40.279 --> 00:09:42.089
X, my secret exponent.

00:09:42.089 --> 00:09:45.720
This is mathematically equivalent to B to
the XY modulus M.

00:09:45.720 --> 00:09:49.750
John does the same, taking what I sent to
him to the power of Y, and we both end up

00:09:49.750 --> 00:09:51.530
with the exact same number!

00:09:51.530 --> 00:09:56.200
It’s a secret shared key, even though we
never sent each other our secret number.

00:09:56.200 --> 00:10:00.590
We can use this big number as a shared key
for encrypted communication, using something

00:10:00.590 --> 00:10:02.500
like AES for encryption.

00:10:02.500 --> 00:10:06.350
Diffie-Hellman key exchange is one method
for establishing a shared key.

00:10:06.350 --> 00:10:10.480
These keys that can be used by both sender
and receiver, to encrypt and decrypt messages,

00:10:10.480 --> 00:10:14.670
are called symmetric keys because the key
is the same on both sides.

00:10:14.670 --> 00:10:18.399
The Caesar Cipher, Enigma and AES are all
symmetric encryption.

00:10:18.399 --> 00:10:23.079
There’s also asymmetric encryption, where
there are two different keys, most often one

00:10:23.079 --> 00:10:24.660
that’s public and another that’s private.

00:10:24.660 --> 00:10:29.480
So, people can encrypt a message using a public
key that only the recipient, with their private

00:10:29.480 --> 00:10:30.810
key, can decrypt.

00:10:30.810 --> 00:10:35.279
In other words, knowing the public key only
lets you encrypt, but not decrypt – it’s

00:10:35.279 --> 00:10:36.279
asymmetric!

00:10:36.279 --> 00:10:39.410
So, think about boxes with padlocks that you
can open with a key.

00:10:39.410 --> 00:10:43.010
To receive a secure message, I can give a
sender a box and padlock.

00:10:43.010 --> 00:10:45.089
They put their message in it and lock it shut.

00:10:45.089 --> 00:10:49.760
Now, they can send that box back to me and
only I can open it, with my private key.

00:10:49.760 --> 00:10:54.120
After locking the box, neither the sender,
nor anyone else who finds the box, can open

00:10:54.130 --> 00:10:55.500
it without brute force.

00:10:55.510 --> 00:10:59.400
In the same way, a digital public key can
encrypt something that can only be decrypted

00:10:59.400 --> 00:11:00.400
with a private key.

00:11:00.400 --> 00:11:04.980
The reverse is possible too: encrypting something
with a private key that can be decrypted with

00:11:04.980 --> 00:11:05.980
a public key.

00:11:05.980 --> 00:11:10.460
This is used for signing, where a server encrypts
data using their private key.

00:11:10.460 --> 00:11:13.360
Anyone can decrypt it using the server's public
key.

00:11:13.360 --> 00:11:17.860
This acts like an unforgeable signature, as
only the owner, using their private key, can

00:11:17.860 --> 00:11:19.050
encrypt.

00:11:19.050 --> 00:11:22.970
It proves that you're getting data from the
right server or person, and not an imposter.

00:11:22.970 --> 00:11:28.060
The most popular asymmetric encryption technique
used today is RSA, named after its inventors:

00:11:28.060 --> 00:11:30.060
Rivest, Shamir and Adleman.

00:11:30.060 --> 00:11:34.339
So, now you know all the “key” parts of
modern cryptography: symmetric encryption,

00:11:34.339 --> 00:11:36.399
key exchange and public-key cryptography.

00:11:36.399 --> 00:11:40.380
When you connect to a secure website, like
your bank, that little padlock icon means

00:11:40.380 --> 00:11:45.490
that your computer has used public key cryptography
to verify the server, key exchange to establish

00:11:45.490 --> 00:11:50.259
a secret temporary key, and symmetric encryption
to protect all the back-and-forth communication

00:11:50.259 --> 00:11:51.300
from prying eyes.

00:11:51.300 --> 00:11:56.230
Whether you're buying something online, sending
emails to BFFs, or just browsing cat videos,

00:11:56.240 --> 00:11:58.520
cryptography keeps all that safe, private
and secure.

00:11:58.520 --> 00:12:00.640
Thanks cryptography!

