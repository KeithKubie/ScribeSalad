WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:02.860
WOJTEK KALICINSKI: I love
well-optimized apps, especially

00:00:02.860 --> 00:00:06.250
apps with small APK size, which
makes downloads and updates

00:00:06.250 --> 00:00:07.930
faster for users.

00:00:07.930 --> 00:00:09.850
That's why I was
very excited when

00:00:09.850 --> 00:00:12.160
a new tool for
analyzing APK issues

00:00:12.160 --> 00:00:14.350
was added in Android Studio.

00:00:14.350 --> 00:00:17.380
It's called the APK Analyzer,
and you can launch it

00:00:17.380 --> 00:00:20.050
by clicking Analyze
APK in the Build menu,

00:00:20.050 --> 00:00:23.000
or by dragging an
APK into the editor.

00:00:23.000 --> 00:00:24.820
These can be files
built from your project,

00:00:24.820 --> 00:00:28.060
or even APKs that you
don't have the sources for.

00:00:28.060 --> 00:00:31.690
When selecting an APK file, make
sure you open a release build

00:00:31.690 --> 00:00:35.270
or a debug build without
Instant Run instrumentation,

00:00:35.270 --> 00:00:38.890
which you can obtain by going
through Build, Build APK.

00:00:38.890 --> 00:00:42.370
You can check if an APK contains
Instant Run instrumentation

00:00:42.370 --> 00:00:45.220
by confirming the presence
of an Instant Run zip

00:00:45.220 --> 00:00:47.320
file in the archive.

00:00:47.320 --> 00:00:50.410
Now let's go through the
main screen of the analyzer.

00:00:50.410 --> 00:00:52.960
On the top here, you can
see some basic information

00:00:52.960 --> 00:00:56.290
about your app, such as the
package name and version,

00:00:56.290 --> 00:01:00.580
along with the raw APK size
and an estimated download size.

00:01:00.580 --> 00:01:03.470
This may be smaller, thanks to
compression applied by the Play

00:01:03.470 --> 00:01:05.110
Store in transit.

00:01:05.110 --> 00:01:07.720
Below, you can see a
list of files and folders

00:01:07.720 --> 00:01:11.950
in the APK, sorted in descending
order according to size.

00:01:11.950 --> 00:01:13.450
This is extremely
useful when you're

00:01:13.450 --> 00:01:16.240
trying to track down low-hanging
fruit for optimizing your app

00:01:16.240 --> 00:01:18.400
size, such as
unoptimized drawables

00:01:18.400 --> 00:01:20.710
or uncompressed audio files.

00:01:20.710 --> 00:01:22.630
You can also see the
relative percentage

00:01:22.630 --> 00:01:25.510
of total download size
of each asset or folder

00:01:25.510 --> 00:01:27.800
in the rightmost column.

00:01:27.800 --> 00:01:30.850
The APK Analyzer also
has a detail view that's

00:01:30.850 --> 00:01:33.010
used for showing file contents.

00:01:33.010 --> 00:01:35.110
It works with several
types of files.

00:01:35.110 --> 00:01:37.770
You can preview XML
resources, such as layouts,

00:01:37.770 --> 00:01:40.480
in their original,
human-readable form.

00:01:40.480 --> 00:01:42.370
This also includes
the Android manifests,

00:01:42.370 --> 00:01:44.500
so you can check out
exactly what values were

00:01:44.500 --> 00:01:46.400
used when building the app.

00:01:46.400 --> 00:01:48.070
You can also browse
the full resource

00:01:48.070 --> 00:01:52.260
table that was compiled into
the resources.arsc file.

00:01:52.260 --> 00:01:54.730
This contains a list
of strings and styles

00:01:54.730 --> 00:01:58.400
for all resource configurations
defined in the app.

00:01:58.400 --> 00:02:01.870
And finally, the analyzer
contains a dex file browser,

00:02:01.870 --> 00:02:05.290
letting you inspect packages,
classes, and method signatures

00:02:05.290 --> 00:02:08.050
to check for any errors
resulting from using ProGuard

00:02:08.050 --> 00:02:09.880
or MultiDex.

00:02:09.880 --> 00:02:12.160
And speaking of
MultiDex, every dex file

00:02:12.160 --> 00:02:14.320
also shows a handy
reference counter

00:02:14.320 --> 00:02:18.880
that tells you how close you
are to the 64k limit per file.

00:02:18.880 --> 00:02:20.980
The APK Analyzer
is a great source

00:02:20.980 --> 00:02:22.870
of actionable
information when trying

00:02:22.870 --> 00:02:26.100
to decide where to start
optimizing your app size.

00:02:26.100 --> 00:02:27.820
And after you make
your changes, you

00:02:27.820 --> 00:02:29.860
can compare the new
version of your APK

00:02:29.860 --> 00:02:33.070
with a previous one using
the Compare With action.

00:02:33.070 --> 00:02:35.110
So you can check how
much space you gain

00:02:35.110 --> 00:02:37.210
and if there are
any regressions.

00:02:37.210 --> 00:02:39.400
I strongly recommend you
check out our article

00:02:39.400 --> 00:02:42.580
on reducing APK size on
developersandroid.com,

00:02:42.580 --> 00:02:46.030
and give the analyzer a spin.

00:02:46.030 --> 00:02:46.960
Thanks, for watching.

00:02:46.960 --> 00:02:48.751
And if you want to
learn more about Android

00:02:48.751 --> 00:02:51.990
Studio and Android development,
click on one of the videos

00:02:51.990 --> 00:02:52.490
here.

00:02:52.490 --> 00:02:54.940
[MUSIC PLAYING]

