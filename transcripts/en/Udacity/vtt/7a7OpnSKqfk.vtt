WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Let's go ahead and I'll walk you through the templates--all the different HTML I used there,

00:00:03.000 --> 00:00:05.000
and we'll be done.

00:00:05.000 --> 00:00:07.000
Front.html--this is the template for the front of the blog.

00:00:07.000 --> 00:00:09.000
I'm using some more advanced template features.

00:00:09.000 --> 00:00:13.000
Again, you don't have to do this. We didn't teach it, but this is how I did it.

00:00:13.000 --> 00:00:15.000
There's something to learn from here, I think.

00:00:15.000 --> 00:00:17.000
This extends base.html.

00:00:18.000 --> 00:00:20.000
The template language we're using, Jinja 2, allows you to have this kind of template

00:00:20.000 --> 00:00:23.000
inheritance, so you don't have to write the same HTML over and over again.

00:00:23.000 --> 00:00:26.000
I'll show you base.html. This has the main structure of our document.

00:00:26.000 --> 00:00:29.000
It's got our doc type and our head with our title,

00:00:29.000 --> 00:00:33.000
and it includes the CSS I've been using to make the blog look a little prettier.

00:00:33.000 --> 00:00:37.000
Then it's got the main body, which basically draws a title.

00:00:37.000 --> 00:00:40.000
This is the main text at the top of the page that I've been clicking on.

00:00:40.000 --> 00:00:42.000
This just links to the front.

00:00:42.000 --> 00:00:45.000
Then we've got this div for our content.

00:00:45.000 --> 00:00:48.000
Inside here we can create a block, and this is what the other templates override.

00:00:48.000 --> 00:00:53.000
All of our templates that extend from base html can use this main wrapper html

00:00:53.000 --> 00:00:55.000
for the actual document.

00:00:55.000 --> 00:01:00.000
Front says replace that content and base html with this content.

00:01:00.000 --> 00:01:03.000
This is some basic Python code inside this template, which says,

00:01:03.000 --> 00:01:09.000
for p in posts, call p.render--remember we say that function in blog.

00:01:09.000 --> 00:01:14.000
Every post has a render function, which renders post html with that blog entry.

00:01:14.000 --> 00:01:18.000
That gets put here. Jinja has a syntax called "safe."

00:01:18.000 --> 00:01:21.000
Normally, all of the HTML is automatically escaped.

00:01:21.000 --> 00:01:25.000
If I didn't have this safe here, Jinja 2 would automatically--because of the way I configured it

00:01:25.000 --> 00:01:27.000
when we set it up--would escape everything.

00:01:27.000 --> 00:01:31.000
If I were to get rid of this piece of code here, and we were to reload our blog,

00:01:31.000 --> 00:01:34.000
it would look something like this--a bunch of escaped HTML blog entries.

00:01:34.000 --> 00:01:39.000
So in the escape syntax, what we're telling Jinja is we know what this HTML is.

00:01:39.000 --> 00:01:41.000
It's safe. You can just include it verbatim.

00:01:41.000 --> 00:01:44.000
That makes our blog entry look like actual rendered HTML and not this.

00:01:44.000 --> 00:01:47.000
If we were to look at the source for this page, you can see what we typed in

00:01:47.000 --> 00:01:52.000
has all been escaped using HTML escaping, which is not exactly what we intended.

00:01:52.000 --> 00:01:56.000
We can tell Jinja this is safe. You can include it verbatim, and it will render fine.

00:01:56.000 --> 00:01:59.000
That's the front HTML. This is basically the front page.

00:01:59.000 --> 00:02:02.000
For a particular blog entry, we use post.html.

00:02:02.000 --> 00:02:05.000
This is the HTML for a particular post.

00:02:05.000 --> 00:02:08.000
I have a class that wraps the whole thing called post.

00:02:08.000 --> 00:02:11.000
I have a div, rather, whose class is post wrapping the whole thing.

00:02:11.000 --> 00:02:14.000
I have another div, which is just the heading.

00:02:14.000 --> 00:02:18.000
This includes the subject of the post in a div.

00:02:18.000 --> 00:02:22.000
That also includes the date the post was written in another div.

00:02:22.000 --> 00:02:26.000
Using the strftime is a handy function when you have a data-time object in Python,

00:02:26.000 --> 00:02:30.000
and you want to print a human readable version of it, you can use strftime.

00:02:30.000 --> 00:02:34.000
This is a format string--if you Google for "Python strftime" you can see

00:02:34.000 --> 00:02:37.000
all the different types of format strings you can use for printing dates.

00:02:37.000 --> 00:02:40.000
That's really handy. This won't be the last time you use strftime in this class.

00:02:40.000 --> 00:02:42.000
I suggest you give that a peek.

00:02:42.000 --> 00:02:44.000
Then we have the actual content.

00:02:44.000 --> 00:02:48.000
The content is included--I remember I called it render_text on the object.

00:02:48.000 --> 00:02:50.000
I did that so I could replace the new lines with the breaks

00:02:50.000 --> 00:02:52.000
without actually modifying the object.

00:02:52.000 --> 00:02:54.000
This is included with pipe safe.

00:02:54.000 --> 00:02:56.000
That means we can enter HTML in our blog entries,

00:02:56.000 --> 00:02:59.000
but we want to be able to include HTML in our blog, so you can type in

00:02:59.000 --> 00:03:03.000
lists and have links and images--all of your fancy HTML formatting.

00:03:03.000 --> 00:03:05.000
Generally you want to escape content when we don't trust it.

00:03:05.000 --> 00:03:08.000
In the case of a blog users would have to register,

00:03:08.000 --> 00:03:11.000
or maybe it's only your blog and you're the only one who can submit,

00:03:11.000 --> 00:03:13.000
you generally trust the content.

00:03:13.000 --> 00:03:16.000
What a lot of sites do is they only trust certain types of HTML.

00:03:16.000 --> 00:03:20.000
They may say list and links are okay, but background colors

00:03:20.000 --> 00:03:22.000
and marques and that stuff is not okay.

00:03:22.000 --> 00:03:25.000
I didn't want to get into that sort of parsing and stuff, so I just made it all safe,

00:03:25.000 --> 00:03:30.000
which allows you guys to enter in all sorts of junk on my blog, which is fine.

00:03:30.000 --> 00:03:34.000
Our next template is for a permalink. This was the page that showed just one blog entry.

00:03:34.000 --> 00:03:39.000
It inherits some base HTML, and it redefines the content block to basically render one blog.

00:03:39.000 --> 00:03:45.000
Post.render--that calls that function we defined in Python and include it on escaped.

