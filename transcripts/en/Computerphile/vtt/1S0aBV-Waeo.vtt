WEBVTT
Kind: captions
Language: en-GB

00:00:00.060 --> 00:00:04.660
So, we'll talk about something very different today; very different to my normal image filtering videos -

00:00:04.660 --> 00:00:09.760
- and that is "buffer overflow exploits" and what they are and how you do them.

00:00:09.760 --> 00:00:11.480
Which is kinda fun

00:00:11.480 --> 00:00:16.400
I'm obviously somewhat of a geek, I quite like these sort of things - low level memory exploits.

00:00:20.180 --> 00:00:23.500
A buffer overflow exploit is a situation where -

00:00:23.500 --> 00:00:26.880
- we're using some, probably low-level C function or something to write a string -

00:00:26.880 --> 00:00:30.800
- or some other variable - into a piece of memory that is only a certain length.

00:00:30.800 --> 00:00:33.560
But we're trying to write something in that's longer than that -

00:00:33.560 --> 00:00:38.300
- and it then overwrites the later memory addresses, and that can cause all kinds of problems.

00:00:38.300 --> 00:00:44.520
The first thing we should talk about, probably, is roughly what happens in memory with a program when it's run.

00:00:44.520 --> 00:00:51.080
Now, we're talking about C programmes in Linux today, just because I happen to have a Linux VM running here and it's easier.

00:00:51.080 --> 00:00:55.240
But this will apply to many different languages and many different operating systems.

00:00:55.240 --> 00:01:01.600
So, when a programme is run by the operating system... so we're in some shell and we type in a command to run a programme

00:01:01.600 --> 00:01:08.860
The operating system will effectively call, as a function, the main method of your code.

00:01:08.860 --> 00:01:14.700
But your actual process, your executable, will be held in memory in a very specific way.

00:01:14.700 --> 00:01:17.280
And it's consistent between different processes.

00:01:17.280 --> 00:01:22.460
So, we have a big block of RAM. We don't know how big our RAM is because it can be varied, but -

00:01:22.460 --> 00:01:25.980
- we use something called Virtual Memory Address Translation to say that -

00:01:25.980 --> 00:01:29.940
- everything in here, this is 0. 0x000...

00:01:29.940 --> 00:01:32.060
This is the bottom of the memory, as it were

00:01:32.060 --> 00:01:38.820
And up here is 0xFFF. So, this is the equivalent of "11111111" memory address -

00:01:38.820 --> 00:01:42.040
- all the way up to 32 or 64 bits, and this is 0.

00:01:42.040 --> 00:01:47.700
Now, when you use this, there are certain areas of this memory that are always allocated to certain things.

00:01:47.700 --> 00:01:53.640
So, up here we have kernel things. So, this will be command line parameters that we can pass to our programme -

00:01:53.640 --> 00:01:55.640
- and environment variables and so on.

00:01:55.640 --> 00:01:59.860
Down here we have something called the text. That's the actual code of our programme.

00:01:59.860 --> 00:02:03.540
The machine instructions that we've compiled get loaded in there.

00:02:03.540 --> 00:02:06.420
Now that's read-only, because we don't want to be messing about down there.

00:02:06.420 --> 00:02:11.300
In here we have data. So, uninitialised and initialised variables get held here.

00:02:11.300 --> 00:02:15.200
And then we have the heap. Now, the heap may have been mentioned from time to time.

00:02:15.200 --> 00:02:17.520
It's where you allocate large things in your memory.

00:02:17.520 --> 00:02:21.440
Big area of memory that you can allocate huge chunks on to do various things.

00:02:21.440 --> 00:02:23.540
What you do with that is, of course, up to your programme.

00:02:23.540 --> 00:02:28.160
And then up here, perhaps the most important bit, in some ways anyway, is the stack.

00:02:28.160 --> 00:02:31.620
Now the stack holds the local variables for each of your functions -

00:02:31.620 --> 00:02:36.480
- and when you call a new function like, let's say you say "printf" and then some parameters -

00:02:36.480 --> 00:02:38.200
- that gets put on the end of the stack.

00:02:38.200 --> 00:02:43.540
So, the heap grows in this direction as you add memory, and the stack grows in this direction.

00:02:43.540 --> 00:02:51.380
Now that I've laid that out, we won't talk about it any more; we'll just focus on the stack, because that's where a lot of these buffer overflows happen.

00:02:51.380 --> 00:02:54.220
You can have overflows in other areas, but we're not going to be dealing with them today.

00:02:54.220 --> 00:03:00.520
I'm going to turn this sideways, because I think it's a little bit easier to understand. At least that's how I tend to look at it.

00:03:01.860 --> 00:03:07.560
This is our memory again, nice and big. This is now our stack area (excuse my programmer's writing).

00:03:07.680 --> 00:03:12.960
Up here we have the high memory addresses (0xff...) So, something up here is high...

00:03:12.960 --> 00:03:18.480
... and this is 0x000. Now, of course, the stack won't be taking up this whole region but it doesn't matter.

00:03:18.480 --> 00:03:20.780
So, there are high memory addresses and low memory addresses.

00:03:20.780 --> 00:03:27.760
And the stack grows downwards, so when we add something onto the end of the stack it gets put on this side and moves in this direction.

00:03:27.760 --> 00:03:30.200
Of course, I'm talking about a stack without telling you what a stack is.

00:03:30.200 --> 00:03:33.760
Professor Brailsford has already talked about this and has probably done a much better job of explaining it than I would!

00:03:33.820 --> 00:03:41.120
Brailsford: There's a lot of computer science that depends on stacks. I sometimes think stacks and trees are just about all computer science is about.

00:03:41.120 --> 00:03:44.740
So we'll just say that you know how a stack works and then we'll move on!

00:03:44.740 --> 00:03:51.420
We have some programme that's calling a function. A function is some area of code that does something and then returns back to where it was before.

00:03:51.420 --> 00:03:53.720
So, this is our calling function here..

00:03:53.720 --> 00:04:00.260
When the calling function wants to make use of something, it adds its parameters that it's passing onto the stack.

00:04:00.260 --> 00:04:06.200
This will be parameter A and this will be parameter B, and they will be added into the stack in reverse order.

00:04:06.200 --> 00:04:09.940
And then the Assembler code for this function will make something called a "call" -

00:04:09.940 --> 00:04:13.860
- and that will jump to somewhere else in memory and work with these two things.

00:04:13.860 --> 00:04:17.100
And it's the nature of this stack that causes us to have problems.

00:04:17.100 --> 00:04:19.840
Let's look at some code and then we'll see how it works.

00:04:19.840 --> 00:04:23.140
I've got myself here a program that isn't very good. I wrote it.

00:04:23.140 --> 00:04:25.260
So, it's a piece of C code, so if we look at it...

00:04:25.260 --> 00:04:31.560
It's a very simple C code that allocates some memory on the stack and then copies a string into it from the command line.

00:04:31.560 --> 00:04:40.120
So up here we've got the main function for C that takes the number of parameters given and a pointer to those variables that you've got.

00:04:40.120 --> 00:04:42.380
And they'll be held in kernel area of our memory.

00:04:42.380 --> 00:04:48.080
We've allocated a buffer that's 500 characters long and then we call a function called "string copy" (strcopy) -

00:04:48.380 --> 00:04:53.100
- which will copy our command line parameter from argv into our buffer.

00:04:53.100 --> 00:04:59.160
Our function puts on a return address which is replacing the code we need to go back to once we've done strcopy.

00:04:59.160 --> 00:05:02.040
So that's how main knows where to go after it's finished.

00:05:02.040 --> 00:05:09.700
And then we put on a reference to the base pointer in our previous function. We won't worry about that too much because it's not relevant particularly to this video.

00:05:09.700 --> 00:05:12.580
This is just going to be our EBP base pointer.

00:05:12.580 --> 00:05:16.660
This is our allocated space for our buffer, and it's 500 long.

00:05:16.660 --> 00:05:25.220
If we write into it something that's longer than 500, we're going to go straight past the buffer, over this, and crucially over our return variable.

00:05:25.220 --> 00:05:28.640
And that's where we point back to something we shouldn't be doing.

00:05:29.620 --> 00:05:34.820
What I'm going to do is walk through it in the code and then let's see if it works.

00:05:34.820 --> 00:05:41.780
So this is my Kali Linux distribution, which has all kinds of slightly dubious password cracking tools and other penetration testing tools.

00:05:41.780 --> 00:05:43.340
It's meant for ethical hacking, let's just make that clear!

00:05:43.340 --> 00:05:47.740
I've written here a small function that does our copy from the command line.

00:05:47.740 --> 00:05:52.040
Now I've compiled it and I can run it. So I can run my vulnerable code with "Hello".

00:05:52.040 --> 00:05:56.200
And that will copy "Hello" into this buffer and then simply return, so nothing happens.

00:05:56.200 --> 00:05:57.920
It's the most boring programme ever!

00:05:57.920 --> 00:06:03.380
[Sean Riley offscreen] Another program might do something like copy "Hello" in there and now it's in the buffer they can go off and process it?

00:06:03.380 --> 00:06:06.520
Yeah, I mean maybe you've got a function that makes things all uppercase.

00:06:06.520 --> 00:06:11.460
So you copy "Hello" off and then you change this new copy to be all uppercase, and then you output it to the screen.

00:06:11.460 --> 00:06:14.000
And this doesn't have to be "main()", this could be any function.

00:06:14.100 --> 00:06:18.280
We're going to run something called GDB, which is the Linux command line debugger.

00:06:18.360 --> 00:06:19.260
Erm...

00:06:19.700 --> 00:06:24.640
I wouldn't advice using GDB unless you really like seeing lots of Assembly and doing really low-level Linux things.

00:06:24.640 --> 00:06:26.900
[Sean Riley offscreen] There's a lot of text on the screen now so we don't have to worry about - [cut off]

00:06:26.900 --> 00:06:29.300
No, this text here is just warranty information.

00:06:29.300 --> 00:06:32.100
So now I'm going to type in "list" -

00:06:32.100 --> 00:06:37.020
- and it shows use the code for our function. So we can see it's just a compiled function.

00:06:37.140 --> 00:06:41.080
It knows this because the compiler included this information along with the executable.

00:06:41.220 --> 00:06:47.760
We can also show the machine code for this so we can say "disas main" and we can see the code for "main()".

00:06:47.760 --> 00:06:50.240
[Sean Riley offscreen] So they're the instructions that would actually go to the CPU?

00:06:50.240 --> 00:06:52.820
These are the actual CPU instructions that will be run.

00:06:52.820 --> 00:06:58.560
Now we won't dwell on much of this, because Assembly is perhaps a whole series of talks by someone other than me!

00:06:58.560 --> 00:07:00.180
Steve Bagley knows a lot about Assembler.

00:07:00.180 --> 00:07:02.660
However, a couple of really important things are:

00:07:02.660 --> 00:07:09.320
This line here, sub of 0x1f4 from %esp, that's allocating the 500 for the buffer.

00:07:09.320 --> 00:07:13.020
That is we're here and we go 500 in this direction and that's where our buffer goes.

00:07:13.020 --> 00:07:17.980
So buffer's sitting to the left in this image but is lower in memory than the rest of our variables.

00:07:18.420 --> 00:07:18.920
Now...

00:07:19.260 --> 00:07:25.480
We can run this programme from GDB- and if it crashes, we can look at the registers and find out what's happened

00:07:25.480 --> 00:07:32.100
So we can say "run Hello" and it will start the programme and say "Hello".

00:07:32.100 --> 00:07:33.400
And it's exited normally.

00:07:33.400 --> 00:07:36.820
Now, we can pass something in a little bit longer than "Hello".

00:07:36.820 --> 00:07:44.380
If we pass something that's over 500, then this buffer will go over this base pointer and this return value, and break the code.

00:07:44.380 --> 00:07:45.700
[Sean Riley offscreen] So that will just crash your-

00:07:45.700 --> 00:07:51.240
It should just crash it. Python, for example, can produce strings based on simple scripts on the command line

00:07:51.240 --> 00:08:02.120
So what we do is we say "run" and then we pass it a Python script of print... 41 (that's the "a" character"), let's say 506 times.

00:08:02.120 --> 00:08:07.340
Just a little bit more than 500 so it's going to cause somewhat of a problem but not a catastrophe. [Chuckling] Okay?

00:08:07.340 --> 00:08:08.620
And then we run that.

00:08:08.620 --> 00:08:16.240
And it's received a segmentation fault. Now a segmentation fault is what a CPU will send back to you when you're trying to access something in memory you shouldn't be doing.

00:08:16.240 --> 00:08:24.400
Now that's not actually happened because we overwrote somewhere we shouldn't; what's happened is the return address was half overwritten with these 41s.

00:08:24.400 --> 00:08:25.300
[Sean Riley offscreen] So it doesn't know what it is?

00:08:25.300 --> 00:08:32.840
Yeah, there is nothing in memory at 0xb7004141, and if there is, it doesn't belong to this process. It's not allowed, so it gets a segmentation fault.

00:08:32.840 --> 00:08:41.200
So if we change this to 508, we're going two bytes further along, which means we're now overwriting the entirety of our return address.

00:08:41.200 --> 00:08:51.240
We're overwriting this "ret" here with 41s. Now if there were some virus code at 414141, that's a big problem. So that's where we're going with this.

00:08:51.240 --> 00:08:57.500
So we run this, and you can see the return address is now 0x414141.

00:08:57.580 --> 00:09:04.580
I can actually show you the registers and you can see that the construction pointer is now trying to point to 0x414141.

00:09:04.580 --> 00:09:11.120
So that means that it's read this return value and tried to return to that place in the code and run it, and of course it can't.

00:09:11.120 --> 00:09:15.920
Now we can have a little bit more fun. We've broken our code, what can we do now?

00:09:15.920 --> 00:09:23.060
Well, what we need to do is change this return value to somewhere where we've got some payload we're trying to give- we're trying to produce. Okay?

00:09:23.060 --> 00:09:30.280
So luckily, if I quit this debugger, I have some pre-prepared payload just for this occassion!

00:09:30.280 --> 00:09:40.680
Now in fact this payload is just a simple, very short programme in Assembler, that puts some variables on the stack and then executes a system call to tell it to run a shell -

00:09:40.680 --> 00:09:43.260
- to run a new command line.

00:09:43.260 --> 00:09:52.520
If I show this code, our shell code, this code will depend on the Linux operating system and whether you're using an Intel CPU or something else.

00:09:52.520 --> 00:10:02.640
This is just a string of different commands. Crucially, this xcd / x80 is throwing a system interrupt, which means that it's going to run the system call.

00:10:02.640 --> 00:10:10.700
That's all we're going to do about this. What this will actually do is run something called ZSH, which is an old shell that doesn't have a lot of protections involved.

00:10:10.700 --> 00:10:12.980
Let's go back to our debugger.

00:10:12.980 --> 00:10:19.720
And... we're going to run again but this time we're going to run a slightly more malicious piece of code.

00:10:19.720 --> 00:10:29.640
We're going to put in our \x41s timesed by 508 - and then we're going to put in our shell code. There we go, okay?

00:10:29.640 --> 00:10:37.740
So now we're doing all 41s and then a bunch of malicious code. Now that's actually too long; we've gone too far. But we'll fix that in a minute, okay?

00:10:37.740 --> 00:10:43.560
And finally, the last thing we want to add in is our return address, which we'll customise in a moment.

00:10:43.560 --> 00:10:49.840
To craft an exploit from this, what we need to do is remember the fact that strcopy is going to copy into our buffer.

00:10:49.840 --> 00:10:59.540
So we're going to start here. We want to overwrite the memory of this return address with somewhere pointing to our malicious code.

00:10:59.540 --> 00:11:05.800
Now, we can't necessarily know for sure where our malicious code might be stored elsewhere on the disc, so we don't worry about that or memory.

00:11:05.800 --> 00:11:11.640
We want to put it in this buffer. So we're going to put some malicious code in here and then we're going to have a return address that points back into it.

00:11:11.640 --> 00:11:13.220
Okay... now...

00:11:13.220 --> 00:11:21.360
Memory moves around slightly. When you run these programmes, things change slightly, environment variables are added and removed, things move around.

00:11:21.360 --> 00:11:24.820
So, we want to try and hedge our bets and get the rough area that this will go in.

00:11:24.820 --> 00:11:30.500
In here, we put in something called a No-Op sled. Or, y'know, there's various other words for it.

00:11:30.500 --> 00:11:37.780
So this is simply \x90. That is a machine instruction for "just move to the next one". So that's good.

00:11:37.780 --> 00:11:41.940
Anywhere we land in that No-Op is going to tick along to our malicious code.

00:11:41.940 --> 00:11:48.820
So we have a load of \x90s here... then we have our shell code, right?

00:11:48.820 --> 00:11:51.400
That's our malicious payload that runs our shell.

00:11:51.400 --> 00:11:58.220
And then we have the return address, right in the right place, that points back right smack in the middle of these \x90s.

00:11:58.220 --> 00:12:00.800
And what that means is, even if these move a bit, it'll still work.

00:12:00.800 --> 00:12:03.020
[Sean Riley offscreen] So it's like having a slope almost, is it?

00:12:03.020 --> 00:12:06.300
It's exactly like that, yes. Anywhere where we land in here is going to cause a real problem for the computer-

00:12:06.300 --> 00:12:11.220
[Sean Riley offscreen] So we've got our bomb, or our... I dunno... pit of lava [laughs]

00:12:11.220 --> 00:12:17.840
Yep, it's a Sarlacc pit isn't it and your No-Op sled takes you in and you get digested over 10,000 years or whatever it is.

00:12:17.840 --> 00:12:25.360
So we've got three things we need to do. We need to put in some \x90s, we need to put in our shell code, which I've already got, and we need to put in our return address.

00:12:25.360 --> 00:12:28.500
Worry about the return address last, okay? So...

00:12:28.500 --> 00:12:37.160
If we go back to my code: we change the first \x41s that we were putting in, and we change to 90. We're putting in a load of No-Op operations.

00:12:37.160 --> 00:12:41.980
Then we've got our shell code and then we've got what will eventually be our return address.

00:12:41.980 --> 00:12:48.620
And we'll put in 10 of those because it's just to have a little bit of padding between our shell code and our stack that's moving about.

00:12:48.620 --> 00:12:54.560
This 508 here, people will have noticed, now this is too big, because we're putting in extra information.

00:12:54.560 --> 00:12:59.540
So, if we write 508 bytes, it goes exactly where we want: over our return address.

00:12:59.540 --> 00:13:06.520
But we've now got 43 bytes of shell code and we've got 40 bytes of return address.

00:13:06.520 --> 00:13:21.740
So... -40... -43... is 425. We'll change this 508 to 425, and so now this exploit here that we're looking at is exactly what I hoped it would be here.

00:13:21.740 --> 00:13:28.720
Some \x90 no operation sleds, the shell code and then we've got our return address, which is 10 times four bytes.

00:13:28.720 --> 00:13:35.040
We run this and we've got a segmentation fault, which is exactly what we hoped we'd get because our return address hasn't been changed yet.

00:13:35.040 --> 00:13:38.560
So now let's look at our memory and work out where our return address should go.

00:13:38.560 --> 00:13:51.120
So in GDB, it's paused the programme after the segmentation fault, so we can say "list the registers", let's say about 200 of them, at the stack point of -550.

00:13:51.120 --> 00:13:56.840
So that's going to be right at the beginning of our buffer. And what we're seeing here is a load of 90s in a row.

00:13:56.840 --> 00:14:03.800
So we just need to pick a memory address right in the middle of them, so let's pick this one, let's say 0xbffffaba -

00:14:03.800 --> 00:14:06.540
- and write that down so I don't forget it.

00:14:06.540 --> 00:14:13.000
Now, there's a nice quirk in this, which is that Intel CPUs are little ednian, which means I have to put it in backwards.

00:14:13.000 --> 00:14:14.700
It's yet more things we have to learn, but it's fine!

00:14:14.840 --> 00:14:23.640
b-f... f-f... f-a... Oops, put my caps-lock on... Can't type with people watching! Errrrm... and er, b-a.

00:14:25.380 --> 00:14:31.380
Theoretically when I run this, what will happen is string copy will do its thing: it'll copy a string in.

00:14:31.380 --> 00:14:38.400
And then, when it tries to return, it will load this return value and execute that instruction, which will be somewhere in this buffer.

00:14:38.400 --> 00:14:42.820
Then it will read off and run our shell code, so we should get a shell.

00:14:42.820 --> 00:14:43.780
Okay?

00:14:43.780 --> 00:14:44.520
[tappity tappity]

00:14:45.140 --> 00:14:47.060
And we did!

00:14:47.060 --> 00:14:53.000
So that's a good start, right? We know our program works. Albeit in a debugger with very little side effect.

00:14:53.000 --> 00:14:57.840
The question now is: can I take this and use it on a command line to gain access to this machine?

00:14:57.840 --> 00:14:59.400
Now...

00:14:59.400 --> 00:15:09.300
Linux has quite restrictive policies on what can and can't be done from certain programmes, but some programmes, such as changing your password, are run using something called SUID.

00:15:09.300 --> 00:15:16.300
So what that means is that, for the sake of running that programme, you have complete root access to that machine.

00:15:16.300 --> 00:15:21.220
Because otherwise, how could you change the password file? You're not normally allowed to even read it.

00:15:21.220 --> 00:15:22.880
The shadow file. So...

00:15:22.920 --> 00:15:29.920
If you find a vulnerability in that kind of programme, and there's more than I think there should be, then that's when there's a real problem.

00:15:29.920 --> 00:15:34.660
Now obviously these vulnerabilities are getting rarer, but it's catastrophic if you get one.

00:15:34.660 --> 00:15:41.520
So, let's leave this debugger and back to our nice clear command line environment.

00:15:41.520 --> 00:15:47.040
If I list the files we've got, this vulnerable programme here is shown in red, that shows that it's SUID root.

00:15:47.040 --> 00:15:52.440
Which means that when we run it, it will be running as root, which is not great for security.

00:15:52.440 --> 00:15:55.800
That and my shoddy programming, which means it's vulnerable to a buffer overflow.

00:15:55.800 --> 00:16:02.000
So, if I copy my exploit... here we go, this is a big moment of truth, where this whole video is going to work.

00:16:02.000 --> 00:16:07.260
I've put my code in just like it was in the debugger. I've tried to make it exactly the same so that the memory doesn't move around.

00:16:07.260 --> 00:16:12.400
Let's just say "whoami" on Linux, so we can see I am myself. I don't have root access.

00:16:12.400 --> 00:16:18.100
So can I, for example, look at the password file? So I can say "cat /etc/shadow".

00:16:18.100 --> 00:16:22.780
"Permission denied". No dice, okay. Fair enough. I'm not supposed to be looking at that.

00:16:22.780 --> 00:16:29.320
Now I'm on my exploit, so "./envexec", then my vulnerability, with the right address... now we've got a shell.

00:16:29.320 --> 00:16:31.120
"whoami"?

00:16:31.120 --> 00:16:32.500
Root.

00:16:32.500 --> 00:16:36.700
So now can I look at my shadow file? [Sean Riley offscreen] So root is like God for this system?

00:16:36.700 --> 00:16:39.660
In Linux, there is nothing you can't do with root.

00:16:39.660 --> 00:16:45.420
So I've got my root shell and I'm root, so I can "cat /etc/shadow", and I can see what's in the shadow file.

00:16:45.420 --> 00:16:49.260
But the point is that there's nothing I can't do now, I can wipe the machine, or do anything like that myself.

00:16:49.260 --> 00:16:55.720
And then I can quit this and then my programme just gracefully exits. Because it now returns to normal code.

00:16:55.720 --> 00:16:58.700
And, hopefully, no-one is any the wiser that anything's gone on.

00:16:58.700 --> 00:17:08.320
Now there are things that the operating system does to try and stop this from happening: randomising your memory layout and no executing of stacks and stuff.

00:17:08.320 --> 00:17:11.880
There are ways around this; they're obviously for a different video.

00:17:11.880 --> 00:17:14.060
But... at least things are getting definitely better.

