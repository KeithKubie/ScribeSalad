WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.870
[MUSIC PLAYING]

00:00:08.870 --> 00:00:10.320
Hi, my name is Daniel
Olshansky.

00:00:10.320 --> 00:00:11.860
I'm an intern on the
Android team.

00:00:11.860 --> 00:00:14.080
And today, I'll be talking
about image pixelization.

00:00:14.080 --> 00:00:16.100
I'll discuss a couple different
variations of how

00:00:16.100 --> 00:00:18.790
you can achieve an image
pixelization effect, using

00:00:18.790 --> 00:00:20.760
some built-in operations
and using some custom

00:00:20.760 --> 00:00:22.210
operations as well.

00:00:22.210 --> 00:00:25.210
Furthermore, I'll discuss the
use of AsyncTask, which is an

00:00:25.210 --> 00:00:28.780
object you can use to offload
work off of the UI thread onto

00:00:28.780 --> 00:00:29.570
a background thread.

00:00:29.570 --> 00:00:31.910
And then you can keep
your UI complete and

00:00:31.910 --> 00:00:33.970
responsive while doing so.

00:00:33.970 --> 00:00:37.030
One of the tricks that you'll
see, while you're doing the

00:00:37.030 --> 00:00:40.200
image pixelization effect, is
the fact that when we want to

00:00:40.200 --> 00:00:42.360
use some built-in operations,
what you can actually do is

00:00:42.360 --> 00:00:44.900
downscale a bitmap and
upscale it back up.

00:00:44.900 --> 00:00:48.280
And you'll see the use of a flag
called filter, which we

00:00:48.280 --> 00:00:53.380
can use to vary between bilinear
filtering and point

00:00:53.380 --> 00:00:56.140
sampling when we're actually
doing the pixelization effect.

00:00:56.140 --> 00:00:58.520
So let's jump straight
to demo right here.

00:00:58.520 --> 00:01:01.170
And we just have an image of
a couple of jellyfish.

00:01:01.170 --> 00:01:06.020
And as we move the SeekBar bar
from left to right, you can

00:01:06.020 --> 00:01:09.230
see that the image is getting
pixelized more or less.

00:01:09.230 --> 00:01:12.130
But you can also tell that as
my finger's moving, the

00:01:12.130 --> 00:01:16.050
SeekBar is behind where
my actual finger is.

00:01:16.050 --> 00:01:18.110
So there's a significant
lag here.

00:01:18.110 --> 00:01:23.540
If we use AsyncTask, you
can see that the image

00:01:23.540 --> 00:01:25.860
pixelization is exactly the
same as it was before.

00:01:25.860 --> 00:01:27.450
It takes the same
amount of time.

00:01:27.450 --> 00:01:29.470
But the UI remains completely
responsive.

00:01:29.470 --> 00:01:33.310
And the SeekBar never
lags behind.

00:01:33.310 --> 00:01:36.360
If you look here, we can also
use the built-in pixelization

00:01:36.360 --> 00:01:38.840
effect, which is significantly
faster.

00:01:38.840 --> 00:01:41.490
And even though it's still on
the UI thread and not on

00:01:41.490 --> 00:01:43.240
background thread, you can tell
that it's still keeping

00:01:43.240 --> 00:01:46.160
up to my finger, exactly
where it needs to be.

00:01:46.160 --> 00:01:50.780
So then jumping straight into
the code and going down, there

00:01:50.780 --> 00:01:54.370
is some boilerplate code, which
you can look over later.

00:01:54.370 --> 00:01:58.900
And a simple SeekBar listener to
make sure that every single

00:01:58.900 --> 00:02:01.720
time that the value changes, we
pixelate the image to get a

00:02:01.720 --> 00:02:06.540
new pixelized image
on the screen.

00:02:06.540 --> 00:02:12.880
Scrolling down further more,
we get to where the actual

00:02:12.880 --> 00:02:15.180
custom pixelization begins.

00:02:15.180 --> 00:02:18.350
So for custom pixelization,
all we're going to do is

00:02:18.350 --> 00:02:19.930
implement this algorithm where
you're going to loop through

00:02:19.930 --> 00:02:21.210
all the pixels in the image.

00:02:21.210 --> 00:02:23.355
You're going to average the
values of the red, green, and

00:02:23.355 --> 00:02:26.990
blue channels within every
single pixel to some value.

00:02:26.990 --> 00:02:29.860
And then you're going to set
that same pixel value to all

00:02:29.860 --> 00:02:31.680
the pixels within that region.

00:02:31.680 --> 00:02:34.530
The key thing to note here is
the fact that when you're

00:02:34.530 --> 00:02:37.960
retrieving, we're setting
pixel values.

00:02:37.960 --> 00:02:41.563
You never want to use SetPixel
or GetPixel if you know that

00:02:41.563 --> 00:02:43.220
you're going to use
more than those.

00:02:43.220 --> 00:02:46.100
There's a few methods available
in the bitmap class,

00:02:46.100 --> 00:02:48.550
such as GetPixels or SetPixels,
where you can

00:02:48.550 --> 00:02:50.400
immediately set an array
of pixels or

00:02:50.400 --> 00:02:51.820
get an array of pixels.

00:02:51.820 --> 00:02:53.720
And they'll be significantly
faster.

00:02:53.720 --> 00:02:55.060
So here we're getting
the pixels.

00:02:55.060 --> 00:02:57.010
We're averaging everything
out.

00:02:57.010 --> 00:03:00.440
And at the end, we set the
pixels in that bitmap.

00:03:00.440 --> 00:03:02.210
We then return to
BitmapDrawable.

00:03:02.210 --> 00:03:04.860
And then this BitmapDrawable is
applied to the ImageView,

00:03:04.860 --> 00:03:08.030
which you see on the
screen afterwards.

00:03:08.030 --> 00:03:10.000
Now scrolling down farther
more, we move into the

00:03:10.000 --> 00:03:11.860
built-in pixelization effect.

00:03:11.860 --> 00:03:15.530
And like I said before, all this
does here is we do a few

00:03:15.530 --> 00:03:17.560
simple calculations to determine
what the downscaled

00:03:17.560 --> 00:03:19.890
width and height should be
in order to achieve that

00:03:19.890 --> 00:03:21.620
pixelization effect.

00:03:21.620 --> 00:03:24.600
But the important thing is
here, when we create a

00:03:24.600 --> 00:03:27.560
downscaled bitmap, we have to
set the filter value to false.

00:03:27.560 --> 00:03:30.910
So what this does is
use point sampling

00:03:30.910 --> 00:03:32.320
instead of bilinear filtering.

00:03:32.320 --> 00:03:35.460
So it doesn't actually average
out the values of the pixel

00:03:35.460 --> 00:03:36.420
values around it.

00:03:36.420 --> 00:03:38.790
But it achieves this very
blocky, pixely effect that

00:03:38.790 --> 00:03:40.310
we're looking for.

00:03:40.310 --> 00:03:41.740
Going down here--

00:03:41.740 --> 00:03:46.430
so after we downscale it, we
know that we need to upscale

00:03:46.430 --> 00:03:47.620
it back up.

00:03:47.620 --> 00:03:50.590
So before JellyBean MR1, the
way we do this is simply

00:03:50.590 --> 00:03:53.590
create a scaled bitmap and
upscale it back to the

00:03:53.590 --> 00:03:56.830
original width and height with
that filter value to false.

00:03:56.830 --> 00:04:00.170
However, after JellyBean MR1,
what you can actually do is

00:04:00.170 --> 00:04:03.620
create a BitmapDrawable with
that image and set the filter

00:04:03.620 --> 00:04:05.080
bitmap to false.

00:04:05.080 --> 00:04:08.880
The thing is that before JB MR1,
we always had the filter

00:04:08.880 --> 00:04:12.040
bitmap set to true for some
optimization purposes.

00:04:12.040 --> 00:04:14.200
But what this lets you do here
is not actually upscale the

00:04:14.200 --> 00:04:15.770
bitmap, simply set the filter.

00:04:15.770 --> 00:04:20.180
And then, given that the image
use scale type is fit xy, when

00:04:20.180 --> 00:04:23.110
we apply this BitmapDrawable
to the ImageView what will

00:04:23.110 --> 00:04:26.100
happen is that it will upscale
it in a much more efficient

00:04:26.100 --> 00:04:28.180
manner to fit the
whole screen.

00:04:28.180 --> 00:04:30.780
So here in invoke
pixelization--

00:04:30.780 --> 00:04:33.020
this is the method that gets
invoked every single time the

00:04:33.020 --> 00:04:34.550
SeekBar is moved.

00:04:34.550 --> 00:04:36.590
And there's two different
things that you can do.

00:04:36.590 --> 00:04:39.450
If the check box is checked,
use AsyncTask.

00:04:39.450 --> 00:04:41.990
What we're going to do is
initialize this pixelized

00:04:41.990 --> 00:04:45.290
image AsyncTask object and
call execute with the

00:04:45.290 --> 00:04:49.250
appropriate parameters, which
is the value of the SeekBar

00:04:49.250 --> 00:04:51.430
and the bitmap that
we're pixelizing.

00:04:51.430 --> 00:04:53.880
Moving into pixelize image
AsyncTask, we can see that

00:04:53.880 --> 00:04:57.970
there's two key methods
that you want to note.

00:04:57.970 --> 00:05:00.690
There's doInBackground and
there's OnPostExecute.

00:05:00.690 --> 00:05:04.340
So what happens-- when you
call execute with the

00:05:04.340 --> 00:05:07.230
appropriate parameters,
doInBackground is called on

00:05:07.230 --> 00:05:08.660
the background thread.

00:05:08.660 --> 00:05:11.960
It does the operations you
can see performed here.

00:05:11.960 --> 00:05:13.690
And when this operation
completes on the background

00:05:13.690 --> 00:05:17.250
thread, it calls OnPostExecute
back on the UI thread, where

00:05:17.250 --> 00:05:20.530
we simply set the drawable
to what we want.

00:05:20.530 --> 00:05:24.890
On the other hand, if the check
box was not checked,

00:05:24.890 --> 00:05:27.020
then we simply set the
image drawable.

00:05:27.020 --> 00:05:29.350
And this is done directly in the
UI thread, which is why we

00:05:29.350 --> 00:05:32.900
were seeing the laggy experience
while scrolling the

00:05:32.900 --> 00:05:34.990
SeekBar as before.

00:05:34.990 --> 00:05:35.890
So that's pretty much it.

00:05:35.890 --> 00:05:38.530
And that's how you can do image
pixelization and move

00:05:38.530 --> 00:05:40.090
things onto a background thread
when you need to.

00:05:40.090 --> 00:05:41.340
Thanks.

