WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:05.830
Remember the goal is performance efficient implementation of RVM.

00:00:05.830 --> 00:00:10.740
The restricted semantics of transaction help a lot in making sure

00:00:10.740 --> 00:00:15.570
that what we are designing as a reliable virtual memory is

00:00:15.570 --> 00:00:20.840
not very heavyweight. But the implementation of that

00:00:20.840 --> 00:00:25.800
used semantic, as to be efficient as well, and that's part of the reason

00:00:25.800 --> 00:00:28.020
why this is called light weight reliable virtual

00:00:28.020 --> 00:00:30.840
memory to indicate that it's light weight in

00:00:30.840 --> 00:00:33.540
terms of transaction properties. Now how to make

00:00:33.540 --> 00:00:36.690
it really perform well? The first thing is

00:00:36.690 --> 00:00:39.970
the strategy that they use for recording changes

00:00:39.970 --> 00:00:43.470
to the persistent portion of the virtual memory.

00:00:43.470 --> 00:00:46.435
The logging strategy is what is called no

00:00:46.435 --> 00:00:51.140
undo/redo value logging. No undo, meaning that we

00:00:51.140 --> 00:00:54.360
are creating an undo record of the changes that we're

00:00:54.360 --> 00:00:57.500
going to make to virtual memory, but it is not a log

00:00:57.500 --> 00:01:00.380
that is persistent on the disk. It is just an in-memory

00:01:00.380 --> 00:01:03.720
copy that is kept only for the duration of the transaction,

00:01:03.720 --> 00:01:06.510
and at the end of the transaction either it commits or

00:01:06.510 --> 00:01:10.350
aborts. We throw away that undo copy that we created. On

00:01:10.350 --> 00:01:13.750
the other hand, redo is the log that you create. First

00:01:13.750 --> 00:01:17.100
of all, in memory of the data structure in RBM, and

00:01:17.100 --> 00:01:19.680
we commit those data structure to memory, and

00:01:19.680 --> 00:01:23.080
in committing the changes of the redo logs, we

00:01:23.080 --> 00:01:26.830
are only writing the new value records of committed

00:01:26.830 --> 00:01:30.160
transactions to the log. So, even though the redo

00:01:30.160 --> 00:01:33.590
log. Consists of a transaction start and the

00:01:33.590 --> 00:01:36.850
changes that you're making, only new value records of

00:01:36.850 --> 00:01:39.290
commuter transactions are written to the log. Now this

00:01:39.290 --> 00:01:42.160
is the reason you have forward displacements, that a

00:01:42.160 --> 00:01:45.690
that we know where to append to the log segment

00:01:45.690 --> 00:01:47.910
on the disk there is a in memory version of

00:01:47.910 --> 00:01:50.580
the log segment too which you are writing the redo

00:01:50.580 --> 00:01:54.090
logs. And once you've written the redo logs, you're flushing

00:01:54.090 --> 00:01:57.135
it to the disk. On the disk, you have a

00:01:57.135 --> 00:02:00.600
on-disk version of this redo log record for this particular

00:02:00.600 --> 00:02:03.960
process, and what you're doing at a commit point is

00:02:03.960 --> 00:02:07.880
only writing the new value records of the committed transactions.

00:02:07.880 --> 00:02:13.030
A detail of the log segment. So we are only appending to that log segment the

00:02:13.030 --> 00:02:15.470
new changes that have been made within this

00:02:15.470 --> 00:02:19.430
transaction. So upon commit, what we need to do

00:02:19.430 --> 00:02:23.110
is we have to replace the old value

00:02:23.110 --> 00:02:25.740
records in the virtual memory with the new value

00:02:25.740 --> 00:02:29.210
records. But this is automatic because the way

00:02:29.210 --> 00:02:32.950
LRVM works is that it is created an undo

00:02:32.950 --> 00:02:35.770
record of the old value records of that

00:02:35.770 --> 00:02:37.810
portion of the virtual address base and all

00:02:37.810 --> 00:02:40.810
the changes that the developers making to the

00:02:40.810 --> 00:02:46.150
persistence data structures in memory are happening in memory

00:02:46.150 --> 00:02:49.510
and therefore replacing the old value records by

00:02:49.510 --> 00:02:51.890
the new value records in the virtual memory is

00:02:51.890 --> 00:02:54.660
automatic. Only if you abort, you have to

00:02:54.660 --> 00:02:57.990
undo the changes. But if you're committing then your

00:02:57.990 --> 00:03:00.090
virtual memory is already ready to go in

00:03:00.090 --> 00:03:03.260
terms of the changes that are being made

00:03:03.260 --> 00:03:05.450
within the transaction. At that point you have

00:03:05.450 --> 00:03:08.240
to force the redo log records to the

00:03:08.240 --> 00:03:12.980
log on the disc, and as I mentioned earlier, the optimization that's

00:03:12.980 --> 00:03:18.490
available in the implementation is to get transactions on the cheap.

00:03:18.490 --> 00:03:23.770
In particular, the no restore optimization allows implementation not

00:03:23.770 --> 00:03:27.400
to create an in memory undo record. That's

00:03:27.400 --> 00:03:30.470
time saved in terms of copying. And that

00:03:30.470 --> 00:03:34.660
means better performance for the application. And similarly,

00:03:34.660 --> 00:03:38.410
no flush, a commit point tells RBM that

00:03:38.410 --> 00:03:43.940
it can write the redo log to the disk lazily. It does not have to block

00:03:43.940 --> 00:03:46.510
the process that is making that call, the

00:03:46.510 --> 00:03:49.190
end transaction call. And that is an opportunity

00:03:49.190 --> 00:03:53.090
again to make that implementation more performance-conscious. So

00:03:53.090 --> 00:03:56.330
this lazy commitment of course has its downside,

00:03:56.330 --> 00:03:58.550
there is this window of vulnerability that I

00:03:58.550 --> 00:04:01.770
mentioned, and that is, there is a time window

00:04:01.770 --> 00:04:05.680
between n transaction and the point at which

00:04:05.680 --> 00:04:08.360
the redo log has been forced to the disc

00:04:08.360 --> 00:04:10.690
and this is the window of vulnerability and

00:04:10.690 --> 00:04:14.260
if The system caches within this time, then we

00:04:14.260 --> 00:04:19.220
have lost the redo records that we wrote to in memory. And that is important to

00:04:19.220 --> 00:04:21.320
understand, that there is a price you pay,

00:04:21.320 --> 00:04:24.600
in order to get this flexibility and performance

00:04:24.600 --> 00:04:26.960
in the implementation. You can see that this,

00:04:26.960 --> 00:04:30.490
redo log data structure, allows traversal in both

00:04:30.490 --> 00:04:34.890
directions. And this is for flexibility in implementing

00:04:34.890 --> 00:04:39.930
the RVM runtime. In particular writing to the

00:04:39.930 --> 00:04:42.520
on disk version of this redo log,

00:04:42.520 --> 00:04:45.190
having these forward displacements allows you to know

00:04:45.190 --> 00:04:47.330
where exactly you want to append to

00:04:47.330 --> 00:04:50.790
the existing redo log record from the changes

00:04:50.790 --> 00:04:52.800
that are being done in this particular

00:04:52.800 --> 00:04:55.430
transaction, and being committed at this point in

00:04:55.430 --> 00:04:58.470
time. And similarly the diverse displacements are

00:04:58.470 --> 00:05:02.280
helpful in traversing the log record during recovery.

