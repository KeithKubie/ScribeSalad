WEBVTT
Kind: captions
Language: en

00:00:00.244 --> 00:00:00.910
WESLEY CHUN: Hi.

00:00:00.910 --> 00:00:02.100
This is Wesley Chun.

00:00:02.100 --> 00:00:04.430
You know how uploading and
downloading files is pretty

00:00:04.430 --> 00:00:06.090
easy for Google Drive users?

00:00:06.090 --> 00:00:07.590
Well, today, we're
going to show you

00:00:07.590 --> 00:00:10.344
that it's just as easy for
developers using the Drive API.

00:00:10.344 --> 00:00:13.010
As a bonus, we'll also introduce
the latest and greatest version

00:00:13.010 --> 00:00:15.330
of the API, so
let's start there.

00:00:15.330 --> 00:00:19.100
The Drive API was launched along
with Google Drive back in 2012.

00:00:19.100 --> 00:00:21.450
Since then, the team has
been innovating and improving

00:00:21.450 --> 00:00:24.010
the API along with
listening to user feedback.

00:00:24.010 --> 00:00:27.510
In the newest version, v3, we
changed to more sensible method

00:00:27.510 --> 00:00:30.400
and field names, removed
duplicate functionality,

00:00:30.400 --> 00:00:33.130
and reduced the amount of
data returned from API calls.

00:00:33.130 --> 00:00:36.194
As a result, v3 is
leaner and faster.

00:00:36.194 --> 00:00:38.610
I caught up with Steve Bazyl,
who's the developer platform

00:00:38.610 --> 00:00:41.120
engineer for Google Drive, to
help me introduce developers

00:00:41.120 --> 00:00:42.190
to v3.

00:00:42.190 --> 00:00:44.789
So I gave a quick intro to
the new version of the API

00:00:44.789 --> 00:00:46.330
at the top of the
show, but maybe you

00:00:46.330 --> 00:00:49.070
could tell us what was the
team specifically trying

00:00:49.070 --> 00:00:50.640
to accomplish with this release?

00:00:50.640 --> 00:00:51.390
STEVE BAZYL: Sure.

00:00:51.390 --> 00:00:53.430
So when we launched the
API a couple years ago,

00:00:53.430 --> 00:00:55.040
we did what we
thought was right.

00:00:55.040 --> 00:00:57.120
But after a few
years of seeing how

00:00:57.120 --> 00:01:00.380
the API was used in production
and talking to developers

00:01:00.380 --> 00:01:02.130
about what they were
trying to accomplish,

00:01:02.130 --> 00:01:04.088
we found that there's a
really good opportunity

00:01:04.088 --> 00:01:07.810
to simplify the API and focus
on speed and performance.

00:01:07.810 --> 00:01:10.250
WESLEY CHUN: So in addition
to the space and time

00:01:10.250 --> 00:01:14.562
savings, were some things
made easier for developers?

00:01:14.562 --> 00:01:15.770
STEVE BAZYL: Definitely, yes.

00:01:15.770 --> 00:01:17.394
I think one of the
biggest improvements

00:01:17.394 --> 00:01:19.070
was around downloading files.

00:01:19.070 --> 00:01:22.904
In the older version of the
API, downloading and exporting

00:01:22.904 --> 00:01:25.070
Google Docs and Sheets was
a little bit complicated,

00:01:25.070 --> 00:01:27.250
and having to deal
with export links.

00:01:27.250 --> 00:01:29.400
So we created a new
API method explicitly

00:01:29.400 --> 00:01:33.010
for exporting documentation,
and downloads in general

00:01:33.010 --> 00:01:34.305
are a lot simpler in the API.

00:01:34.305 --> 00:01:35.680
WESLEY CHUN: So
one of the things

00:01:35.680 --> 00:01:38.600
that developers are concerned
with when a new API comes out

00:01:38.600 --> 00:01:40.400
is that the old one
or the current one

00:01:40.400 --> 00:01:41.760
is immediately obsolete.

00:01:41.760 --> 00:01:43.216
Is that the case with this one?

00:01:43.216 --> 00:01:44.340
STEVE BAZYL: Not this time.

00:01:44.340 --> 00:01:47.030
Normally that would be the
case when we release a new API,

00:01:47.030 --> 00:01:50.050
but for now, we're going to
keep both versions of the API

00:01:50.050 --> 00:01:51.230
running.

00:01:51.230 --> 00:01:53.560
V3 doesn't really
add any new features.

00:01:53.560 --> 00:01:56.910
It's primarily focused
on simplifying the API,

00:01:56.910 --> 00:01:59.460
making it faster out of
the box, and it's really

00:01:59.460 --> 00:02:03.160
targeted for new developers
getting started with the API.

00:02:03.160 --> 00:02:06.920
So for those who have existing
projects, no need to panic.

00:02:06.920 --> 00:02:10.860
V2 is going to continue
to work for really

00:02:10.860 --> 00:02:11.974
the next couple years.

00:02:11.974 --> 00:02:12.640
WESLEY CHUN: OK.

00:02:12.640 --> 00:02:13.140
Well, cool.

00:02:13.140 --> 00:02:14.880
So let's say I do
have an existing

00:02:14.880 --> 00:02:18.140
app using the current
version, which is v2.

00:02:18.140 --> 00:02:21.260
Is it possible for me
to start a new component

00:02:21.260 --> 00:02:22.832
to that app using v3?

00:02:22.832 --> 00:02:24.290
Can they kind of
live side by side?

00:02:24.290 --> 00:02:26.498
STEVE BAZYL: Of course, and
that's a really great way

00:02:26.498 --> 00:02:27.560
to get started with v3.

00:02:27.560 --> 00:02:30.320
Just pick something that
is new, maybe some code

00:02:30.320 --> 00:02:31.740
that you want to refactor.

00:02:31.740 --> 00:02:35.040
That's a great opportunity
to dip your toes into v3,

00:02:35.040 --> 00:02:37.560
understand what changed,
how it would benefit you.

00:02:37.560 --> 00:02:39.760
And if that goes
well, those people

00:02:39.760 --> 00:02:41.960
might find out that the
rest of their application

00:02:41.960 --> 00:02:43.550
would benefit from moving to v3.

00:02:43.550 --> 00:02:45.450
But there's no rush to do it.

00:02:45.450 --> 00:02:46.980
People feel like
they have the time

00:02:46.980 --> 00:02:49.470
and they think they
would benefit, go for it.

00:02:49.470 --> 00:02:51.300
There's a lot of gains
that they'll get.

00:02:51.300 --> 00:02:53.230
But again, no need to panic.

00:02:53.230 --> 00:02:54.520
Really just take it easy.

00:02:54.520 --> 00:02:55.240
WESLEY CHUN: OK.

00:02:55.240 --> 00:02:56.090
Cool.

00:02:56.090 --> 00:02:58.590
So there's a lot of developers
out there using Google Drive,

00:02:58.590 --> 00:03:00.690
but they may all be using
different development

00:03:00.690 --> 00:03:01.420
environments.

00:03:01.420 --> 00:03:04.244
What languages are
supported by the Drive API?

00:03:04.244 --> 00:03:05.910
STEVE BAZYL: So we
have client libraries

00:03:05.910 --> 00:03:08.270
for most of the common
languages out there.

00:03:08.270 --> 00:03:14.852
So if you're java.net, you do
Objective-C or Swift for iOS,

00:03:14.852 --> 00:03:16.226
PHP, Python--

00:03:16.226 --> 00:03:17.120
WESLEY CHUN: Python.

00:03:17.120 --> 00:03:18.354
Oh, that's my favorite.

00:03:18.354 --> 00:03:19.270
STEVE BAZYL: Python 2.

00:03:19.270 --> 00:03:22.827
There's client libraries for
most languages, Node.js, even

00:03:22.827 --> 00:03:24.550
a client-side
JavaScript library,

00:03:24.550 --> 00:03:26.690
and they all work with the API.

00:03:26.690 --> 00:03:28.840
Some of them are easier
to use than others,

00:03:28.840 --> 00:03:30.830
but really, all
of them are going

00:03:30.830 --> 00:03:32.960
to get you a lot
closer to having

00:03:32.960 --> 00:03:35.460
your code ready than if you
just wrote your own client.

00:03:35.460 --> 00:03:37.110
And of course,
these are REST APIs.

00:03:37.110 --> 00:03:39.730
So if you are more
comfortable dealing

00:03:39.730 --> 00:03:41.780
with just whatever
HttpClient you

00:03:41.780 --> 00:03:45.290
have or some other
REST library that you

00:03:45.290 --> 00:03:47.860
happen to be using, go
ahead and use those.

00:03:47.860 --> 00:03:49.430
It's going to work
just the same.

00:03:49.430 --> 00:03:51.805
You might have to do a little
bit more work, particularly

00:03:51.805 --> 00:03:53.820
for uploads and
downloads and some

00:03:53.820 --> 00:03:57.370
of the more complicated parts,
but the vast majority of it

00:03:57.370 --> 00:04:00.472
is pretty easy to use
pretty much on any platform.

00:04:00.472 --> 00:04:01.430
WESLEY CHUN: OK, great.

00:04:01.430 --> 00:04:04.350
So that's good news that a
lot of developers out there

00:04:04.350 --> 00:04:05.545
could use the Drive API.

00:04:05.545 --> 00:04:06.670
STEVE BAZYL: Exactly, yeah.

00:04:06.670 --> 00:04:06.980
WESLEY CHUN: All right.

00:04:06.980 --> 00:04:09.140
Well, Steve, that was
really useful information.

00:04:09.140 --> 00:04:11.640
I think developers have
all they need to know.

00:04:11.640 --> 00:04:13.660
All we need to do is get
them started with it.

00:04:13.660 --> 00:04:14.960
Thanks for stopping by today.

00:04:14.960 --> 00:04:15.340
STEVE BAZYL: OK.

00:04:15.340 --> 00:04:16.230
Thanks for having me.

00:04:16.230 --> 00:04:18.230
WESLEY CHUN: Now let's
help you start using v3.

00:04:18.230 --> 00:04:20.271
We're going to walk through
a simple code snippet

00:04:20.271 --> 00:04:22.440
that uploads and downloads
files with the API,

00:04:22.440 --> 00:04:24.330
including converting
to Google Apps format

00:04:24.330 --> 00:04:26.060
and exporting as PDF.

00:04:26.060 --> 00:04:28.880
We'll do this first using
the current version, v2, then

00:04:28.880 --> 00:04:31.170
show you how we
improved things for v3.

00:04:31.170 --> 00:04:35.570
So put on your coding hat, and
let's go to the computer now.

00:04:35.570 --> 00:04:37.070
As in previous
episodes, we're going

00:04:37.070 --> 00:04:38.700
to do it in Python
for brevity, and it

00:04:38.700 --> 00:04:40.200
makes for great
pseudocode if you're

00:04:40.200 --> 00:04:41.820
using something else
as your dev tool.

00:04:41.820 --> 00:04:43.780
To see all the Google
API's client library

00:04:43.780 --> 00:04:45.870
supported languages,
click the link onscreen

00:04:45.870 --> 00:04:49.080
or down in the video description
below if you're on mobile.

00:04:49.080 --> 00:04:50.510
Now, the first 20
or so lines are

00:04:50.510 --> 00:04:52.410
nearly identical to
the auth boilerplate

00:04:52.410 --> 00:04:54.990
we covered in depth at the
beginning of the video series.

00:04:54.990 --> 00:04:56.740
Check out those videos,
especially the one

00:04:56.740 --> 00:04:58.590
on the common code
walkthrough if you

00:04:58.590 --> 00:05:01.520
missed these to understand what
it does and why it's needed.

00:05:01.520 --> 00:05:04.140
There are some differences
in this modernized version.

00:05:04.140 --> 00:05:05.950
The one you should
note are there's

00:05:05.950 --> 00:05:08.320
an import of the print
function on line 1.

00:05:08.320 --> 00:05:11.600
That will allow your script
to run in Python 2 or 3.

00:05:11.600 --> 00:05:14.280
Then there's this import
block for the argparse module

00:05:14.280 --> 00:05:18.510
in lines 20 and 21 so that your
script uses the new run flow

00:05:18.510 --> 00:05:20.940
function from
oauth2client.tools, which

00:05:20.940 --> 00:05:23.750
succeeds the run function
but falls back to the latter

00:05:23.750 --> 00:05:26.410
if argparse is not available,
meaning you're using an older

00:05:26.410 --> 00:05:27.319
version of Python.

00:05:27.319 --> 00:05:29.110
Visit the link to the
blog post to find out

00:05:29.110 --> 00:05:31.260
more info about this change.

00:05:31.260 --> 00:05:33.790
Since we're using the Drive
API, we need the correct scope,

00:05:33.790 --> 00:05:36.360
and that's on line 14.

00:05:36.360 --> 00:05:38.300
Use the most restrictive
scope you can.

00:05:38.300 --> 00:05:39.960
Here it's drive.file
because we're

00:05:39.960 --> 00:05:41.911
creating files on Google Drive.

00:05:41.911 --> 00:05:44.160
The more restrictive your
scope, the fewer permissions

00:05:44.160 --> 00:05:46.020
you need to ask of your
users, and the safer

00:05:46.020 --> 00:05:47.330
your code will be.

00:05:47.330 --> 00:05:48.440
Now the first step.

00:05:48.440 --> 00:05:50.690
Create a service
endpoint to Google Drive,

00:05:50.690 --> 00:05:52.730
as you can see on line 22.

00:05:52.730 --> 00:05:55.520
As mentioned earlier, we're
going to do this in v2 first,

00:05:55.520 --> 00:05:57.880
then show you how the
code changes for v3.

00:05:57.880 --> 00:06:00.850
Lines 24 to 27 are
the files to upload.

00:06:00.850 --> 00:06:02.350
You can see that
they're two tuples,

00:06:02.350 --> 00:06:04.790
with file names and a flag
for converting to Google Apps

00:06:04.790 --> 00:06:06.940
format, a yes or a
no, and you can also

00:06:06.940 --> 00:06:09.210
see that we're uploading
the same file twice--

00:06:09.210 --> 00:06:13.540
first as is in plain text, then
convert to Google Apps format.

00:06:13.540 --> 00:06:16.250
For the plain text
conversion, it's Google Docs.

00:06:16.250 --> 00:06:18.280
But you can imagine
that for CSV files,

00:06:18.280 --> 00:06:19.790
it'll be Google Sheets, right?

00:06:19.790 --> 00:06:21.460
Now to the main
part of the script.

00:06:21.460 --> 00:06:24.010
We're going to start with
the section to do uploads.

00:06:24.010 --> 00:06:27.340
The for loop calls the
files.insert command

00:06:27.340 --> 00:06:29.900
for each upload with parameters.

00:06:29.900 --> 00:06:31.840
The first is the
convert flag, the body

00:06:31.840 --> 00:06:34.740
is the file metadata, which
is just the file name.

00:06:34.740 --> 00:06:36.850
The media body is
also the file name,

00:06:36.850 --> 00:06:38.110
but it's slightly different.

00:06:38.110 --> 00:06:40.007
This is where the data
is going to come from,

00:06:40.007 --> 00:06:41.840
meaning that this file
is going to be opened

00:06:41.840 --> 00:06:43.940
and the content sent to the API.

00:06:43.940 --> 00:06:46.630
Finally, you should pass in
the fields you want returned.

00:06:46.630 --> 00:06:48.460
Why is this important?

00:06:48.460 --> 00:06:50.540
If not specified, you
get back a payload

00:06:50.540 --> 00:06:52.130
with more than 30 fields.

00:06:52.130 --> 00:06:54.130
Why waste all that network
traffic when you only

00:06:54.130 --> 00:06:55.380
need a couple of them?

00:06:55.380 --> 00:06:57.040
I just want the
MIMETYPE to confirm

00:06:57.040 --> 00:06:58.800
how the file was
stored in Drive,

00:06:58.800 --> 00:07:00.450
and I also want
the export links.

00:07:00.450 --> 00:07:01.720
More on that soon.

00:07:01.720 --> 00:07:04.065
On lines 33 and 34, if
the call is successful,

00:07:04.065 --> 00:07:05.690
we're going to
display the file was

00:07:05.690 --> 00:07:08.444
uploaded to the user,
including the MIMETYPE.

00:07:08.444 --> 00:07:09.860
The final section
of the script is

00:07:09.860 --> 00:07:13.170
where we wrap up our poor man's
plain text PDF conversion.

00:07:13.170 --> 00:07:15.560
That is, to export and
download the Google Docs

00:07:15.560 --> 00:07:17.170
version of the file as PDF.

00:07:17.170 --> 00:07:19.040
Note that we still
have the result

00:07:19.040 --> 00:07:22.690
from the second upload, which is
the Google Docs converted file.

00:07:22.690 --> 00:07:24.470
Back to the export links.

00:07:24.470 --> 00:07:26.440
We requested that
field because it

00:07:26.440 --> 00:07:30.200
has the download links that we
need, specifically the PDF one.

00:07:30.200 --> 00:07:31.420
How do we use it?

00:07:31.420 --> 00:07:34.690
Well, we need to issue an
authorized HTTP get request

00:07:34.690 --> 00:07:37.840
because there's no API call
for this, at least not in v2.

00:07:37.840 --> 00:07:40.460
After the call completes,
check if we got the data.

00:07:40.460 --> 00:07:42.620
If so, save to disk and display.

00:07:42.620 --> 00:07:43.831
Success.

00:07:43.831 --> 00:07:44.330
OK.

00:07:44.330 --> 00:07:45.840
Let's save it and run it.

00:07:45.840 --> 00:07:47.790
If you didn't already
know, the first time

00:07:47.790 --> 00:07:50.470
you run a command-line script
like this, a browser window

00:07:50.470 --> 00:07:53.110
is going to pop open with
the OAuth2 prompt, where

00:07:53.110 --> 00:07:56.620
you have to authorize this
script to be able to get access

00:07:56.620 --> 00:07:58.310
to the files in
your Google Drive,

00:07:58.310 --> 00:08:00.250
or your users' Google Drive.

00:08:00.250 --> 00:08:01.880
When you opt in,
the credentials are

00:08:01.880 --> 00:08:04.380
going to be downloaded and
stored in this storage.json

00:08:04.380 --> 00:08:06.250
file, so you only
need to do it once

00:08:06.250 --> 00:08:07.830
unless you delete this file.

00:08:07.830 --> 00:08:10.747
Anyway, let's just pretend that
all that has happened already,

00:08:10.747 --> 00:08:13.330
and so we're just going to run
the script as if we didn't have

00:08:13.330 --> 00:08:15.860
to worry about authorization.

00:08:15.860 --> 00:08:19.730
We should see output for the
plain text version-- there

00:08:19.730 --> 00:08:22.780
it is-- and in the Google Docs
converted version, and finally,

00:08:22.780 --> 00:08:24.690
the download into PDF.

00:08:24.690 --> 00:08:26.665
Now let's check the
Drive UI, web or mobile--

00:08:26.665 --> 00:08:28.290
since I'm on a
computer, obviously it's

00:08:28.290 --> 00:08:29.915
the web version-- to
confirm that we've

00:08:29.915 --> 00:08:32.412
got two versions of the
Hello file uploaded.

00:08:32.412 --> 00:08:33.620
So here's the plain text one.

00:08:33.620 --> 00:08:34.820
You can get a preview of it.

00:08:34.820 --> 00:08:35.640
There it is.

00:08:35.640 --> 00:08:37.890
And then you can also get
a preview of the Google Doc

00:08:37.890 --> 00:08:40.230
converted one,
and there that is.

00:08:40.230 --> 00:08:43.059
The last thing we need to do is
check that we have a PDF file,

00:08:43.059 --> 00:08:45.350
and we can do that pretty
easily from the command line,

00:08:45.350 --> 00:08:49.340
confirm that it actually is
a PDF file, and then open it.

00:08:49.340 --> 00:08:52.570
And there we are--
helloworld.pdf.

00:08:52.570 --> 00:08:53.080
Great.

00:08:53.080 --> 00:08:56.370
Now let's do the same thing,
but use v3 of the API instead.

00:08:56.370 --> 00:08:59.260
So first, change the
API version to v3.

00:08:59.260 --> 00:09:00.740
Now, one key change.

00:09:00.740 --> 00:09:03.062
There's not going to be
a convert flag anymore.

00:09:03.062 --> 00:09:05.270
The problem is that a Boolean
variable only gives you

00:09:05.270 --> 00:09:08.280
two choices-- Google Apps
conversion or not at all.

00:09:08.280 --> 00:09:11.190
There's no option to specify
what format you want.

00:09:11.190 --> 00:09:13.610
If MIMETYPEs was used
instead of Booleans,

00:09:13.610 --> 00:09:16.450
there's more flexibility for
conversion, either uploads

00:09:16.450 --> 00:09:17.430
or downloads.

00:09:17.430 --> 00:09:20.600
So in the first case, let's
change the false to none, which

00:09:20.600 --> 00:09:23.379
is Python's null object,
meaning no conversion.

00:09:23.379 --> 00:09:25.920
And in the second case, we need
the MIMETYPE for Google Docs,

00:09:25.920 --> 00:09:27.640
and that's easily found.

00:09:27.640 --> 00:09:29.810
Now we need to change
this convert variable

00:09:29.810 --> 00:09:32.510
to reflect this change of data.

00:09:32.510 --> 00:09:34.760
Now, we mentioned that v3
has better and more sensible

00:09:34.760 --> 00:09:35.420
naming.

00:09:35.420 --> 00:09:38.620
Here, the title field changes
to name, more accurately

00:09:38.620 --> 00:09:41.370
reflecting that a file's
name is not its title,

00:09:41.370 --> 00:09:43.494
but hello, its name.

00:09:43.494 --> 00:09:45.410
Another change with using
the MIMETYPE instead

00:09:45.410 --> 00:09:48.030
of the convert flag is that
instead of being a parameter,

00:09:48.030 --> 00:09:50.240
it's actually going to be
part of the file metadata,

00:09:50.240 --> 00:09:53.380
so we need to add that
if doing conversion.

00:09:53.380 --> 00:09:55.840
Another improved
name change in v3

00:09:55.840 --> 00:09:58.600
is that instead of
insert, create is actually

00:09:58.600 --> 00:10:00.230
a better name or verb.

00:10:00.230 --> 00:10:02.320
So that's what we're
going to change this to.

00:10:02.320 --> 00:10:04.070
We have to get rid
of the convert flag,

00:10:04.070 --> 00:10:07.410
the body stays the same, the
media body stays the same.

00:10:07.410 --> 00:10:11.380
Lastly, fields is no longer
required, as v3 is more nimble,

00:10:11.380 --> 00:10:13.590
returning much
less data than v2.

00:10:13.590 --> 00:10:15.450
Fortunately, the things
that are returned

00:10:15.450 --> 00:10:17.420
are actually the ones we need.

00:10:17.420 --> 00:10:20.210
Finally, if successful, display
the uploaded file message

00:10:20.210 --> 00:10:21.700
to the user.

00:10:21.700 --> 00:10:24.520
Now let's see how export and
downloads are simplified.

00:10:24.520 --> 00:10:26.300
First, another v3 change.

00:10:26.300 --> 00:10:27.750
No more download links.

00:10:27.750 --> 00:10:30.070
In other words, we don't
need to look for export links

00:10:30.070 --> 00:10:31.850
and make an HTTP call.

00:10:31.850 --> 00:10:34.760
Instead, both steps have been
simplified to a single API

00:10:34.760 --> 00:10:37.630
request to the
files.export method.

00:10:37.630 --> 00:10:40.630
If successful, the call will
yield the data we need to save.

00:10:40.630 --> 00:10:44.150
So write it to disk and output
to the user just as before,

00:10:44.150 --> 00:10:45.240
and that's it.

00:10:45.240 --> 00:10:47.340
Now let's save and
run the v3 version.

00:10:47.340 --> 00:10:51.820
The output should be
exactly the same as v2.

00:10:51.820 --> 00:10:54.390
There's the plain text, there's
the Google Doc conversion,

00:10:54.390 --> 00:10:56.180
and a download to PDF.

00:10:56.180 --> 00:10:58.740
Now double check in your drive
UI that you got another two

00:10:58.740 --> 00:11:02.730
files, and there they are.

00:11:02.730 --> 00:11:05.360
I'll let you confirm that
the PDF was downloaded again

00:11:05.360 --> 00:11:06.560
successfully.

00:11:06.560 --> 00:11:07.580
And that's it.

00:11:07.580 --> 00:11:09.860
Now you know how to upload
files to Google Drive using

00:11:09.860 --> 00:11:13.300
v2 and v3 with or without
conversion to Google Apps

00:11:13.300 --> 00:11:14.258
format.

00:11:14.258 --> 00:11:17.190
Awesome.

00:11:17.190 --> 00:11:19.960
So as you can see, it's not
too bad if you're using v2.

00:11:19.960 --> 00:11:22.070
But better yet, if you
use the newest version,

00:11:22.070 --> 00:11:24.640
you can take advantage of all
the improvements that we made.

00:11:24.640 --> 00:11:26.810
Either way, we hope
this sample inspires

00:11:26.810 --> 00:11:30.502
you to write your own
app using the Drive API.

00:11:30.502 --> 00:11:31.960
To get started,
click the link that

00:11:31.960 --> 00:11:33.490
takes you right to our docs.

00:11:33.490 --> 00:11:35.910
Want a deeper look at the
code covered in this video?

00:11:35.910 --> 00:11:38.050
Well, jump to the blog
post at the second link.

00:11:38.050 --> 00:11:40.640
And to see other DevBytes in
our developer video series,

00:11:40.640 --> 00:11:42.580
check out the links
at the bottom.

00:11:42.580 --> 00:11:44.680
Now that you know how to
upload and download files

00:11:44.680 --> 00:11:46.570
with and without
conversion, we hope

00:11:46.570 --> 00:11:49.060
this jumpstarts your next
project using the Google Drive

00:11:49.060 --> 00:11:49.962
API.

00:11:49.962 --> 00:11:51.920
If you like this video,
subscribe and check out

00:11:51.920 --> 00:11:52.797
our other DevBytes.

00:11:52.797 --> 00:11:54.380
I'm Wesley Chun from
Google, and we'll

00:11:54.380 --> 00:11:57.080
see you the next time
on the Launchpad Online.

00:11:57.080 --> 00:11:58.630
[MUSIC PLAYING]

