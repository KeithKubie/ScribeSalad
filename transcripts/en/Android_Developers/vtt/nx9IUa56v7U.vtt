WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.870
BEN CLAYTON: Hi, I'm Ben.

00:00:01.870 --> 00:00:04.170
I'm the TO of GAPID.

00:00:04.170 --> 00:00:07.660
This is Pascal, who's also
been working on it almost

00:00:07.660 --> 00:00:09.750
as long as I have.

00:00:09.750 --> 00:00:13.590
So this slide's probably a
little bit irrelevant now.

00:00:13.590 --> 00:00:16.690
GAPID, it's an open
source, developed

00:00:16.690 --> 00:00:20.740
in the open, trace and replay
tool for GL ES and Vulkan.

00:00:23.470 --> 00:00:25.860
It's currently a debugger.

00:00:25.860 --> 00:00:28.030
It can be used to diagnose
and fix many graphics

00:00:28.030 --> 00:00:31.060
issues when developing games.

00:00:31.060 --> 00:00:34.690
We've been using it in the field
and have found some very stupid

00:00:34.690 --> 00:00:37.300
things that some of
the games' engines

00:00:37.300 --> 00:00:40.840
are doing that otherwise
would be completely hidden

00:00:40.840 --> 00:00:43.570
from the developer.

00:00:43.570 --> 00:00:45.220
It is cross-platform.

00:00:45.220 --> 00:00:48.070
It runs Windows,
Mac Linux, and we

00:00:48.070 --> 00:00:54.800
can use it to trace any
debuggable Android application.

00:00:54.800 --> 00:00:57.590
For Vulkan we actually
also support desktop,

00:00:57.590 --> 00:01:01.040
so you can trace any Vulkan
application on Windows

00:01:01.040 --> 00:01:05.570
or Linux, obviously not Mac.

00:01:05.570 --> 00:01:08.160
And yes, you can go and
download it right now.

00:01:08.160 --> 00:01:11.850
It's on GitHub, So
github.com/google/gapid,

00:01:11.850 --> 00:01:15.280
and then you can take
a look at the releases.

00:01:15.280 --> 00:01:18.470
So instead of just
talking about it,

00:01:18.470 --> 00:01:20.090
it's graphics
after all, we might

00:01:20.090 --> 00:01:23.210
as well show you some stuff.

00:01:23.210 --> 00:01:27.317
So I'll take it over to Pascal.

00:01:27.317 --> 00:01:29.400
PASCAL MUETSCHARD: OK, so
when we first launch it,

00:01:29.400 --> 00:01:31.570
you will see this
welcome dialog that

00:01:31.570 --> 00:01:34.650
lets you quickly do your most
common actions, like capturing

00:01:34.650 --> 00:01:35.250
and tracing.

00:01:35.250 --> 00:01:36.666
Let me see if I
can see the mouse.

00:01:39.120 --> 00:01:41.010
The capture, trace dialog.

00:01:41.010 --> 00:01:44.640
You choose which API
you'd like to trace.

00:01:44.640 --> 00:01:46.512
And you trace over GL.

00:01:46.512 --> 00:01:47.970
You can choose your
Android device.

00:01:47.970 --> 00:01:49.720
And because we are
running out of USB ports,

00:01:49.720 --> 00:01:51.386
we are not going to
actually do a trace.

00:01:51.386 --> 00:01:53.100
It's also pretty boring.

00:01:53.100 --> 00:01:55.450
You choose your APK.

00:01:55.450 --> 00:01:56.580
You have some options.

00:01:56.580 --> 00:01:57.600
And you can trace file.

00:01:57.600 --> 00:02:07.100
But instead, I'll just open
trace we've taken previously.

00:02:07.100 --> 00:02:11.690
This is a trace of one of
Google's only games, Sushi,

00:02:11.690 --> 00:02:13.910
on Android.

00:02:13.910 --> 00:02:17.275
Up the top, you can see the
frames that were captured.

00:02:17.275 --> 00:02:19.350
We see some frame
previews of the frames.

00:02:19.350 --> 00:02:20.870
This is mostly just a menu.

00:02:20.870 --> 00:02:24.690
Let's see if we can find
something more interesting.

00:02:24.690 --> 00:02:27.360
The beginning of
the application.

00:02:27.360 --> 00:02:30.120
On the bottom on the left
side, you see all the commands.

00:02:30.120 --> 00:02:33.660
And we grouped them nicely
by frames and draw calls.

00:02:33.660 --> 00:02:36.040
And if you include debug
markers in your application.

00:02:36.040 --> 00:02:39.110
You'll see debug markers,
which you will see right here.

00:02:39.110 --> 00:02:42.460
We can see all the groupings.

00:02:42.460 --> 00:02:44.930
This is tiny for me to see.

00:02:44.930 --> 00:02:49.610
For example, you can
step through your frame

00:02:49.610 --> 00:02:51.280
and see how it get both up.

00:02:51.280 --> 00:02:53.810
You see all the draw calls
that are grouped here.

00:02:53.810 --> 00:02:57.760
Of course, you can see the
actual draw calls as well.

00:02:57.760 --> 00:03:01.060
But I might need
to just draw call.

00:03:01.060 --> 00:03:03.510
But obviously, we
want to also show

00:03:03.510 --> 00:03:08.250
you the rest of the
state of the GL drivers.

00:03:08.250 --> 00:03:09.990
For example, we can
look at the geometry

00:03:09.990 --> 00:03:11.160
that was rendered here.

00:03:11.160 --> 00:03:12.390
This is just some leaves.

00:03:12.390 --> 00:03:15.890
Let me pick the
shrimp sushi here.

00:03:15.890 --> 00:03:19.310
You can see a little more
interesting geometry.

00:03:19.310 --> 00:03:21.430
And you can, for example,
debug your normals

00:03:21.430 --> 00:03:23.450
if they don't look OK.

00:03:23.450 --> 00:03:25.190
You can inspect the geometry.

00:03:25.190 --> 00:03:27.360
There was one in this draw call.

00:03:27.360 --> 00:03:31.340
And we also allow you to
inspect all your textures.

00:03:31.340 --> 00:03:34.080
So we see some textures
that were used.

00:03:37.650 --> 00:03:40.020
And this also will
show you contents

00:03:40.020 --> 00:03:44.040
of textures that are rendered
targets, which is really nice.

00:03:44.040 --> 00:03:46.380
You normally would need
to render your shadow

00:03:46.380 --> 00:03:47.190
map on the screen.

00:03:47.190 --> 00:03:49.860
You can just inspect it here.

00:03:49.860 --> 00:03:52.000
And we have some
image tools, like you

00:03:52.000 --> 00:03:55.440
can disable channels, which is
again helpful for shadow maps.

00:03:55.440 --> 00:03:59.260
You have different values
for different channels.

00:03:59.260 --> 00:04:01.800
You can zoom in and inspect it.

00:04:05.280 --> 00:04:08.550
Of course, we also
show you shaders.

00:04:08.550 --> 00:04:11.820
And one of the things
we'd like to be able to do

00:04:11.820 --> 00:04:15.440
is rapid prototyping.

00:04:15.440 --> 00:04:17.579
Whenever you have an
issue to shade in.

00:04:17.579 --> 00:04:19.320
You're adding a shade.

00:04:19.320 --> 00:04:19.860
You save it.

00:04:19.860 --> 00:04:21.436
You have to rebuild
the application.

00:04:21.436 --> 00:04:23.810
Then you have to package it
up, deploy it to your device,

00:04:23.810 --> 00:04:27.750
only just to find out that you
forgot that dot 0 or whatever.

00:04:27.750 --> 00:04:30.700
So we allow you to edit
the shaders in place here.

00:04:30.700 --> 00:04:35.730
So let me just paste something
in here that I've saved before.

00:04:35.730 --> 00:04:37.800
You push your changes.

00:04:37.800 --> 00:04:42.000
And in a few seconds,
you can see the changes

00:04:42.000 --> 00:04:47.520
that happen and changing our
Skybox here to be a nice sunset

00:04:47.520 --> 00:04:48.630
red.

00:04:48.630 --> 00:04:51.030
You can see that it has
changed on all frames.

00:04:51.030 --> 00:04:55.920
We've changed our little
sky box to be nice and red.

00:04:55.920 --> 00:04:58.770
We tracked the entire
state of the GL drivers,

00:04:58.770 --> 00:05:02.040
so you can inspect at
any point in your trace.

00:05:02.040 --> 00:05:04.214
If you see an
issue, and you want

00:05:04.214 --> 00:05:06.505
to know what was the plan
state at this point in trace,

00:05:06.505 --> 00:05:11.782
you can go in and
inspect the trace.

00:05:11.782 --> 00:05:13.490
You can see the plane
state, for example,

00:05:13.490 --> 00:05:16.450
right here for frame box here.

00:05:16.450 --> 00:05:18.780
You can see all the
values that you've set.

00:05:18.780 --> 00:05:24.050
Oh, this should be
something different.

00:05:24.050 --> 00:05:26.580
We also have the beginning
of a reporting system

00:05:26.580 --> 00:05:29.190
that tracks errors, for example.

00:05:29.190 --> 00:05:31.970
Jail errors-- it does a
jail error doing a trace.

00:05:31.970 --> 00:05:33.780
We'll show it here, for example.

00:05:33.780 --> 00:05:35.190
You can quickly
go to the command

00:05:35.190 --> 00:05:41.300
and see this get integer has
an interesting identifier that

00:05:41.300 --> 00:05:42.710
doesn't exist.

00:05:42.710 --> 00:05:44.760
And we're also planning
on other things

00:05:44.760 --> 00:05:47.550
that we can detect in
your trace and give you

00:05:47.550 --> 00:05:52.130
actionable feedback on how
you can improve your day.

00:05:52.130 --> 00:05:55.820
I think that covers
about most of it.

00:05:55.820 --> 00:05:58.180
BEN CLAYTON: Did
you try the memory?

00:05:58.180 --> 00:06:01.655
PASCAL MUETSCHARD: Obviously,
for some commands, like--

00:06:01.655 --> 00:06:07.790
let's just find something
like GL uniform.

00:06:11.720 --> 00:06:15.870
It's not exactly very
interesting to see the memory

00:06:15.870 --> 00:06:16.370
pointer.

00:06:16.370 --> 00:06:17.990
So we also obviously
track the memory.

00:06:17.990 --> 00:06:20.990
And you can see what
memory was passed.

00:06:20.990 --> 00:06:23.780
And you can format it
in the [INAUDIBLE]..

00:06:23.780 --> 00:06:25.310
So here, you can
see the matrix that

00:06:25.310 --> 00:06:28.557
was passed into this uniform.

00:06:28.557 --> 00:06:30.640
BEN CLAYTON: The memory
is the sort of power tool.

00:06:30.640 --> 00:06:33.520
But for any particular
command that you select,

00:06:33.520 --> 00:06:35.199
you can see all
of the memory that

00:06:35.199 --> 00:06:36.615
was read or written
by the command

00:06:36.615 --> 00:06:38.310
at that point in the trace.

00:06:38.310 --> 00:06:41.640
Just being handy for sort
of off-by-one errors.

00:06:41.640 --> 00:06:44.530
So yeah, that's pretty much
the tool at the moment.

00:06:44.530 --> 00:06:46.050
A couple of other things.

00:06:46.050 --> 00:06:48.870
He's put multiple
context for GL.

00:06:48.870 --> 00:06:51.300
The bar at the top,
it, by default,

00:06:51.300 --> 00:06:55.110
selects what we consider
the most relevant context

00:06:55.110 --> 00:06:58.060
for the particular game.

00:06:58.060 --> 00:07:00.210
But for a lot of
the engines, there's

00:07:00.210 --> 00:07:02.250
multiple contexts
that are spun up.

00:07:02.250 --> 00:07:05.130
So you can look between them.

00:07:05.130 --> 00:07:08.070
As an option as well for an
interleaved context mode,

00:07:08.070 --> 00:07:09.630
so that you can
see how the context

00:07:09.630 --> 00:07:12.300
of talking to each of them.

00:07:12.300 --> 00:07:15.809
But yeah, that's pretty
much what we have right now.

00:07:15.809 --> 00:07:17.350
If there's any
questions, by the way,

00:07:17.350 --> 00:07:19.229
please feel free to interrupt.

00:07:19.229 --> 00:07:20.187
PASCAL MUETSCHARD: Yes.

00:07:25.730 --> 00:07:32.320
AUDIENCE: Is there a high
resolution CPU timestamp

00:07:32.320 --> 00:07:32.820
on this?

00:07:32.820 --> 00:07:37.490
Sometimes it's nice to know what
your codes are doing CPU side

00:07:37.490 --> 00:07:38.990
when it's building the frame.

00:07:38.990 --> 00:07:40.550
BEN CLAYTON: Currently, no.

00:07:40.550 --> 00:07:45.080
We did want to put extra
metadata in, like, time stamp

00:07:45.080 --> 00:07:46.250
information.

00:07:46.250 --> 00:07:48.740
We're kind of on the fence
about the usefulness of that.

00:07:48.740 --> 00:07:51.560
Because when you do take
trace, times are skewed.

00:07:51.560 --> 00:07:57.170
So having real-time information
can be a little bit deceptive.

00:07:57.170 --> 00:07:59.180
But things like stack
trace information

00:07:59.180 --> 00:08:00.770
would be particularly useful.

00:08:00.770 --> 00:08:02.990
Just seeing a particular
draw call is bad.

00:08:02.990 --> 00:08:05.810
Where did that come from?

00:08:05.810 --> 00:08:06.820
So yes.

00:08:06.820 --> 00:08:08.720
AUDIENCE: [INAUDIBLE]

00:08:08.720 --> 00:08:11.150
BEN CLAYTON: Again, if you
have these suggestions,

00:08:11.150 --> 00:08:12.680
please forward them to us.

00:08:12.680 --> 00:08:14.811
And we will act upon them.

00:08:18.500 --> 00:08:21.800
AUDIENCE: Does the frame rate
view show the current render

00:08:21.800 --> 00:08:24.140
target that's bound,
or is it showing what's

00:08:24.140 --> 00:08:25.632
going to be the back buffer?

00:08:25.632 --> 00:08:27.590
The frame buffer we use
shows what is currently

00:08:27.590 --> 00:08:30.132
abound at that point in a trace.

00:08:30.132 --> 00:08:32.340
BEN CLAYTON: If you have
post effects and things that

00:08:32.340 --> 00:08:34.704
are going on off screen,
you can debug all of them.

00:08:41.434 --> 00:08:42.600
AUDIENCE: Maybe I missed it.

00:08:42.600 --> 00:08:46.960
What's the requirement
for GPU and the Android OS

00:08:46.960 --> 00:08:48.480
supported now?

00:08:48.480 --> 00:08:52.430
Does it work on all GPUs,
which Android versions?

00:08:52.430 --> 00:08:57.025
BEN CLAYTON: OK, so in theory,
it shouldn't really matter.

00:08:57.025 --> 00:08:58.650
The way that we
intercept at the moment

00:08:58.650 --> 00:09:01.010
is by patching the driver.

00:09:01.010 --> 00:09:04.440
And there are some limitations
on what we can patch.

00:09:04.440 --> 00:09:07.170
So we require a
certain number of bytes

00:09:07.170 --> 00:09:12.210
of instruction per function
we're trying to tamper with.

00:09:12.210 --> 00:09:15.450
And on certain
drivers, there are

00:09:15.450 --> 00:09:18.445
functions that are too short.

00:09:18.445 --> 00:09:23.160
Coming up in a new version of
Android and coming to you soon

00:09:23.160 --> 00:09:24.780
is [INAUDIBLE] OS support.

00:09:24.780 --> 00:09:29.190
So we won't be doing this
nasty driver patching.

00:09:29.190 --> 00:09:31.340
We will actually
have hooks in the OS.

00:09:31.340 --> 00:09:32.550
So we can trace anything.

00:09:38.430 --> 00:09:39.130
AUDIENCE: Hello.

00:09:39.130 --> 00:09:42.670
Is frame buffer [INAUDIBLE]
on pixel [INAUDIBLE] extension

00:09:42.670 --> 00:09:44.380
support for--

00:09:44.380 --> 00:09:46.750
BEN CLAYTON: We can examine
depth at the moment.

00:09:46.750 --> 00:09:48.230
We haven't got a
view for stencil.

00:09:48.230 --> 00:09:50.890
But we'll be working
on that soon.

00:09:50.890 --> 00:09:52.640
AUDIENCE: That's
pretty useful for us.

00:09:56.200 --> 00:09:59.560
BEN CLAYTON: So speaking
of what we're doing--

00:09:59.560 --> 00:10:03.790
before that, just to
mention that the tool

00:10:03.790 --> 00:10:05.360
is pretty modular.

00:10:05.360 --> 00:10:08.740
We have all of the
bulk of the smarts

00:10:08.740 --> 00:10:10.300
in one particular process.

00:10:10.300 --> 00:10:13.750
And the UI isn't actually
tied into that at all.

00:10:13.750 --> 00:10:19.880
We have an RPC interface, the
UI users to talk to the server.

00:10:19.880 --> 00:10:21.640
And we have another
tool that we actually

00:10:21.640 --> 00:10:23.080
ship when you download it.

00:10:23.080 --> 00:10:25.200
It's called GAPID.

00:10:25.200 --> 00:10:29.400
And it actually exposes a lot
of the same functionality.

00:10:29.400 --> 00:10:32.060
It's been really useful
for us developing.

00:10:32.060 --> 00:10:35.690
You can use it to examine
commands, states, frames,

00:10:35.690 --> 00:10:40.890
and use that to try and find
GL errors or Vulkan issues.

00:10:40.890 --> 00:10:45.770
And we see a lot of value in
this in automated testing.

00:10:45.770 --> 00:10:46.970
You can take trace.

00:10:46.970 --> 00:10:48.770
You can use the
command line tools

00:10:48.770 --> 00:10:52.580
as part of your nightly
builds, for example, and find

00:10:52.580 --> 00:10:56.470
issues in your application that
would otherwise go missing.

00:10:56.470 --> 00:10:58.400
So just to an
example, I'm not going

00:10:58.400 --> 00:10:59.600
to type up the command line.

00:10:59.600 --> 00:11:03.700
But given the same trace
that we were just demoing,

00:11:03.700 --> 00:11:06.260
you can get a screenshot
at any particular point.

00:11:06.260 --> 00:11:09.680
We also have the ability
to create an MP4 video

00:11:09.680 --> 00:11:12.060
of whatever you have.

00:11:12.060 --> 00:11:13.850
There's also another
mode that we have,

00:11:13.850 --> 00:11:18.140
where we will capture the frame
buffer while we're tracing.

00:11:18.140 --> 00:11:22.070
And then when we come
to do a validate,

00:11:22.070 --> 00:11:24.605
we can actually check
that the replay matched.

00:11:24.605 --> 00:11:26.505
When we have one
device replay going,

00:11:26.505 --> 00:11:30.200
that can be particularly useful
for variations between drivers,

00:11:30.200 --> 00:11:32.840
for example.

00:11:32.840 --> 00:11:34.040
And my slide failed.

00:11:34.040 --> 00:11:35.870
Yay.

00:11:35.870 --> 00:11:39.050
So the current work that
we're doing at the moment,

00:11:39.050 --> 00:11:40.550
for those of you
that may have tried

00:11:40.550 --> 00:11:43.000
GAPID already, you may
have been disappointed

00:11:43.000 --> 00:11:45.470
with performance of the tool.

00:11:45.470 --> 00:11:48.680
We are fully aware that it
isn't as fast as it should be.

00:11:48.680 --> 00:11:50.260
And it takes up too much memory.

00:11:50.260 --> 00:11:52.010
So this is our number
one thing that we're

00:11:52.010 --> 00:11:54.020
working on right now--

00:11:54.020 --> 00:11:54.980
make it faster.

00:11:54.980 --> 00:11:58.320
Make it less resource-hungry.

00:11:58.320 --> 00:12:01.580
Mid-execution
capture for GL ES is

00:12:01.580 --> 00:12:04.010
what we've heard people
want lots and lots.

00:12:04.010 --> 00:12:06.780
So we're going to try and
get that out very soon.

00:12:06.780 --> 00:12:09.320
And on device replay--

00:12:09.320 --> 00:12:10.550
as we briefly mentioned.

00:12:10.550 --> 00:12:13.520
I've virtually used up all
the USB ports on this machine.

00:12:13.520 --> 00:12:16.790
The replay for GL ES is
being done on this machine.

00:12:16.790 --> 00:12:21.140
So we translate from GL ES
to desktop GL for replay.

00:12:21.140 --> 00:12:24.590
We've taken that about
as far as we can.

00:12:24.590 --> 00:12:29.340
Apple refused to push GL drivers
any further than they are.

00:12:29.340 --> 00:12:32.090
We're now at the state
that GL ES is actually

00:12:32.090 --> 00:12:37.820
exceeding desktop GL, the base
port, so on desktop replay,

00:12:37.820 --> 00:12:40.640
just through translation,
is actually becoming

00:12:40.640 --> 00:12:42.860
difficult to impossible.

00:12:42.860 --> 00:12:45.340
For Vulkan, same thing--

00:12:45.340 --> 00:12:46.970
performance.

00:12:46.970 --> 00:12:49.330
We also want to get
the validation there

00:12:49.330 --> 00:12:50.630
as part of the report.

00:12:50.630 --> 00:12:53.162
So you don't have to
have the layers in when

00:12:53.162 --> 00:12:53.870
you take a trace.

00:12:53.870 --> 00:12:56.980
And you get the same
information out.

00:12:56.980 --> 00:13:01.730
And the final one is an improved
UI for visualizing Vulkan data.

00:13:01.730 --> 00:13:05.160
Vulkan is a very different
beast from GL ES.

00:13:05.160 --> 00:13:06.200
Is not immediate mode.

00:13:06.200 --> 00:13:07.940
You've got command buffers.

00:13:07.940 --> 00:13:12.620
Trying to display things as
a linear sequence of calls

00:13:12.620 --> 00:13:14.270
is one way of doing it.

00:13:14.270 --> 00:13:16.854
But it isn't the best
way that we feel.

00:13:16.854 --> 00:13:18.770
So we're doing a lot of
research at the moment

00:13:18.770 --> 00:13:22.880
in how to better visualize
these new graphics

00:13:22.880 --> 00:13:29.470
APIs, where you have more of
a graph representation maybe.

00:13:29.470 --> 00:13:35.740
So after that, we have a large
collection of ideas of things

00:13:35.740 --> 00:13:37.300
that we want to do.

00:13:37.300 --> 00:13:39.822
But we want to get
feedback from you

00:13:39.822 --> 00:13:41.530
on where we should be
investing our time.

00:13:45.250 --> 00:13:49.150
I've been leading this project
for a number of years now.

00:13:49.150 --> 00:13:53.830
And as a teenager, I always used
to play RTS games for too much.

00:13:53.830 --> 00:13:56.050
So tech trees are
kind of the way

00:13:56.050 --> 00:14:00.340
that I visualize my job in
that there are many things

00:14:00.340 --> 00:14:02.710
that I could be doing
and certain things unlock

00:14:02.710 --> 00:14:03.550
other things.

00:14:03.550 --> 00:14:06.280
And so the rest of
these slides are

00:14:06.280 --> 00:14:09.130
going to be going through some
of the things that we can do

00:14:09.130 --> 00:14:12.050
and how I categorize them
in my crazy gamey brain.

00:14:14.800 --> 00:14:17.680
There is a questionnaire
that you can fill in

00:14:17.680 --> 00:14:19.420
as we're going through this.

00:14:19.420 --> 00:14:22.630
It might be helpful
to play along,

00:14:22.630 --> 00:14:24.790
just so that you'd
know what I'm talking

00:14:24.790 --> 00:14:27.070
about when you have a question.

00:14:27.070 --> 00:14:29.270
If you don't want
to, that's fine.

00:14:29.270 --> 00:14:30.810
Won't hold it against me.

00:14:30.810 --> 00:14:35.570
But if you can open
that, please go ahead.

00:14:35.570 --> 00:14:37.870
And the slides will
relate to the questions

00:14:37.870 --> 00:14:38.620
that come through.

00:14:43.021 --> 00:14:44.488
Cool.

00:14:44.488 --> 00:14:46.444
PASCAL MUETSCHARD:
There's a question.

00:14:46.444 --> 00:14:47.360
BEN CLAYTON: Question?

00:14:58.200 --> 00:15:00.930
AUDIENCE: Is there any timeline
for a graphics profiler

00:15:00.930 --> 00:15:03.820
for the GPU?

00:15:03.820 --> 00:15:06.040
PASCAL MUETSCHARD: Timeline?

00:15:06.040 --> 00:15:08.676
We'll see what the
feedback is from today.

00:15:08.676 --> 00:15:10.550
We might be able to get
a timeline from that.

00:15:14.446 --> 00:15:17.370
Cool.

00:15:17.370 --> 00:15:21.490
So the first group
is statistics.

00:15:21.490 --> 00:15:26.200
I classify things that
don't involve profiling

00:15:26.200 --> 00:15:29.580
but still have meaningful
values under this group.

00:15:29.580 --> 00:15:33.670
So the simplest one, which we
probably should have by now,

00:15:33.670 --> 00:15:35.410
is the sort of x per y stuff.

00:15:35.410 --> 00:15:38.120
So this is number of
draw calls per frame

00:15:38.120 --> 00:15:40.560
is the most obvious one.

00:15:40.560 --> 00:15:43.530
Doing 2,000 draw
calls on a device that

00:15:43.530 --> 00:15:45.610
can only cope with
a few hundred,

00:15:45.610 --> 00:15:48.580
you're going to have a bad time.

00:15:48.580 --> 00:15:52.900
Examples of this are
obviously draws per frame,

00:15:52.900 --> 00:15:59.380
vertices per draw,
triangles per whatever,

00:15:59.380 --> 00:16:02.160
estimates of memory
usage as well, like,

00:16:02.160 --> 00:16:04.520
number of makes of
textures that you have.

00:16:07.210 --> 00:16:11.470
We also want to come up with
some sort of device budgets.

00:16:11.470 --> 00:16:12.970
Part of my work
over the last year

00:16:12.970 --> 00:16:15.220
has been going out
to games' companies

00:16:15.220 --> 00:16:18.935
and trying to help them
get the games reaching 60.

00:16:21.580 --> 00:16:25.000
Based on the x per
y thing, the number

00:16:25.000 --> 00:16:26.950
of titles that are
being developed

00:16:26.950 --> 00:16:30.580
without any kind of
reasonable guidelines

00:16:30.580 --> 00:16:32.260
on how many draw
call that you should

00:16:32.260 --> 00:16:34.650
be making for a
particular device

00:16:34.650 --> 00:16:37.620
is a little bit depressing.

00:16:37.620 --> 00:16:40.170
We could offer up
some sort of data

00:16:40.170 --> 00:16:43.620
that, for a particular
flagship device,

00:16:43.620 --> 00:16:47.750
we recommend that you submit x
number of vertices per frame,

00:16:47.750 --> 00:16:50.030
for example.

00:16:50.030 --> 00:16:54.760
We could have inside
GAPID automatic knowledge

00:16:54.760 --> 00:16:56.890
of a collection of
different devices

00:16:56.890 --> 00:17:00.130
and give you warnings if
it notices that you're

00:17:00.130 --> 00:17:03.600
way outside those budgets.

00:17:03.600 --> 00:17:06.210
FrameBuffer
visualizations-- these

00:17:06.210 --> 00:17:10.530
are things like number of
overdraws that you're doing.

00:17:10.530 --> 00:17:12.480
We can also include
things in here

00:17:12.480 --> 00:17:18.180
like highlighting the fragments
that may have failed a depth

00:17:18.180 --> 00:17:19.740
test, which could
be a good thing

00:17:19.740 --> 00:17:24.900
or displaying the frame
by shader program,

00:17:24.900 --> 00:17:27.300
for example, which is
a great way of knowing

00:17:27.300 --> 00:17:29.730
where you should be looking
at optimizing your shaders.

00:17:34.076 --> 00:17:38.540
AUDIENCE: [INAUDIBLE]

00:17:38.540 --> 00:17:41.936
PASCAL MUETSCHARD: Yeah,
overdraw is part of that.

00:17:41.936 --> 00:17:43.760
AUDIENCE: [INAUDIBLE]

00:17:43.760 --> 00:17:46.666
PASCAL MUETSCHARD: It's coming.

00:17:46.666 --> 00:17:50.564
Shader static analysis--
this is a tricky one.

00:17:50.564 --> 00:17:52.730
It would have to be a sort
of finger in the air one.

00:17:52.730 --> 00:17:55.490
Because there's
many different GPUs

00:17:55.490 --> 00:17:58.630
out there, many intermediate
layers between your shader code

00:17:58.630 --> 00:18:02.799
and actually what the shader is
doing, the hardware is doing.

00:18:02.799 --> 00:18:05.340
But, yeah, we can come up with
some rough estimates of number

00:18:05.340 --> 00:18:08.400
of ALU ops through
text, for example,

00:18:08.400 --> 00:18:12.129
which can be helpful in just
getting a hand-wavy estimate

00:18:12.129 --> 00:18:13.420
of what your shaders are doing.

00:18:16.280 --> 00:18:19.690
Profiling-- big
feature request here.

00:18:23.120 --> 00:18:27.380
First thing that people think
of is frame and draw, counters,

00:18:27.380 --> 00:18:28.410
I've said.

00:18:28.410 --> 00:18:32.870
But frame and draw
time would be great.

00:18:32.870 --> 00:18:35.810
Unfortunately, tiled
architectures make draw

00:18:35.810 --> 00:18:39.050
call times very difficult.
We've got a few ideas on we

00:18:39.050 --> 00:18:43.200
might be able to come up with
some data that would be useful.

00:18:43.200 --> 00:18:46.930
But knowing what your
frame rate is like,

00:18:46.930 --> 00:18:54.670
or knowing how long
certain things are taking

00:18:54.670 --> 00:18:57.130
is definitely something
that we want to do.

00:18:57.130 --> 00:19:01.120
If we can also get hardware
counters from the IHVs,

00:19:01.120 --> 00:19:05.020
we would like to try and massage
those huge seas of hardware

00:19:05.020 --> 00:19:07.270
counters that nobody really
understands into something

00:19:07.270 --> 00:19:11.260
meaningful, so that we can
tell you how much time you're

00:19:11.260 --> 00:19:13.840
spending doing [INAUDIBLE]
fetches, how much time you're

00:19:13.840 --> 00:19:17.130
cache messing, for example.

00:19:17.130 --> 00:19:18.990
Something that a
lot of the IHV tools

00:19:18.990 --> 00:19:24.750
offer over things like draw call
times is relative shader costs.

00:19:24.750 --> 00:19:28.500
So while their tools may not
be able to tell you exactly how

00:19:28.500 --> 00:19:32.050
long a single draw call took,
they take more of the approach

00:19:32.050 --> 00:19:35.400
that these are all the shader
programs that you have.

00:19:35.400 --> 00:19:38.640
And this particular one
actually takes 30% of your time.

00:19:38.640 --> 00:19:41.190
So it's where you
should be optimizing.

00:19:41.190 --> 00:19:43.230
This is something that
I think is very valuable

00:19:43.230 --> 00:19:46.490
and we should definitely have.

00:19:46.490 --> 00:19:50.630
Assuming that we get
the first two done,

00:19:50.630 --> 00:19:53.710
we would love to have
metrics-driven suggestions.

00:19:53.710 --> 00:19:58.600
So if you've used other
tools before in the past,

00:19:58.600 --> 00:20:01.300
they often suggest,
have you thought

00:20:01.300 --> 00:20:04.735
about changing you vertex
format so that you [INAUDIBLE]

00:20:04.735 --> 00:20:07.540
as opposed to having
them separate?

00:20:07.540 --> 00:20:09.570
These are things that
we would like the tool

00:20:09.570 --> 00:20:12.370
to actually go and do for you.

00:20:12.370 --> 00:20:15.940
If we have a bunch of patterns
that the tool can actually

00:20:15.940 --> 00:20:19.660
detect, apply them to
your trace and time them,

00:20:19.660 --> 00:20:23.170
we can offer a
sorted list of things

00:20:23.170 --> 00:20:27.370
that you could do to optimize
your gain ordered by impact.

00:20:27.370 --> 00:20:29.110
I understand that
games' developers,

00:20:29.110 --> 00:20:30.302
their time is precious.

00:20:30.302 --> 00:20:32.260
You don't want to be
spending three days trying

00:20:32.260 --> 00:20:35.870
to optimize something to get
half a percent improvement.

00:20:35.870 --> 00:20:38.560
If we can show you that
doing this one thing

00:20:38.560 --> 00:20:43.490
will save you 10% of your
time, we should do it.

00:20:43.490 --> 00:20:45.950
Another thing that's
often forgotten

00:20:45.950 --> 00:20:49.340
is power usage and thermals.

00:20:49.340 --> 00:20:51.360
It's really important.

00:20:51.360 --> 00:20:53.210
So if we're going to
give you any profiling

00:20:53.210 --> 00:20:55.580
information about
timing, we should also

00:20:55.580 --> 00:20:58.905
be looking at how much
power you are using

00:20:58.905 --> 00:21:00.530
and see if there's
anything that we can

00:21:00.530 --> 00:21:03.050
do to suggest reducing them.

00:21:05.910 --> 00:21:13.880
Shader debugging-- being able to
click on a vertex or a fragment

00:21:13.880 --> 00:21:17.780
in your FrameBuffer and
have single-line stepping.

00:21:17.780 --> 00:21:19.340
So this is pretty bug basic.

00:21:22.500 --> 00:21:25.360
We want to be able to let you
step forwards and backwards,

00:21:25.360 --> 00:21:30.290
have a watch window, see all
the values as you go along.

00:21:30.290 --> 00:21:32.380
There's a big question
here as well about

00:21:32.380 --> 00:21:35.590
whether you would
value more a simulation

00:21:35.590 --> 00:21:38.150
versus real hardware.

00:21:38.150 --> 00:21:39.880
There are pros and cons to both.

00:21:39.880 --> 00:21:41.950
If you're trying
to debug something,

00:21:41.950 --> 00:21:45.640
and you're getting black pixel,
and it's a driver or hardware

00:21:45.640 --> 00:21:52.030
issue, then, obviously, having
a reference form of that

00:21:52.030 --> 00:21:56.140
might prove to you that there
actually is a hardware issue.

00:21:56.140 --> 00:21:58.570
Whereas, trying to pull back
from the actual hardware

00:21:58.570 --> 00:22:03.210
might give you skewed
results in the same way.

00:22:03.210 --> 00:22:06.116
Pixel history-- it's kind
of part of the debugging,

00:22:06.116 --> 00:22:07.740
but clicking on the
FrameBuffer, seeing

00:22:07.740 --> 00:22:12.030
all of the draws that
influence the color,

00:22:12.030 --> 00:22:14.360
or depth, or stencil.

00:22:14.360 --> 00:22:17.890
I may be including or
excluding ones that

00:22:17.890 --> 00:22:22.010
have since been overwritten.

00:22:22.010 --> 00:22:23.740
A table of shader
ins and outs-- this

00:22:23.740 --> 00:22:26.920
is more common for vertex forms.

00:22:26.920 --> 00:22:30.610
If you've got one
crazy vertex that's

00:22:30.610 --> 00:22:33.400
half a mile across
the screen, you

00:22:33.400 --> 00:22:36.550
can identify that single thing,
and then go and debug it,

00:22:36.550 --> 00:22:39.964
and figure out why you've
got [INAUDIBLE] or something.

00:22:39.964 --> 00:22:41.380
And something else
that we thought

00:22:41.380 --> 00:22:43.470
about it would be very
nice is, if you're

00:22:43.470 --> 00:22:46.750
debugging a particular shader,
highlighting the inputs

00:22:46.750 --> 00:22:47.620
and outputs.

00:22:47.620 --> 00:22:49.349
So if you've got
textures, for example,

00:22:49.349 --> 00:22:50.890
that you're sampling
in your shaders,

00:22:50.890 --> 00:22:52.660
actually highlighting
the fragments that

00:22:52.660 --> 00:22:56.749
are involved in that
particular shader [INAUDIBLE]..

00:22:56.749 --> 00:22:58.790
Assuming we can do it, it
would also be very nice

00:22:58.790 --> 00:23:01.910
if you had an isotropic
filtering showing

00:23:01.910 --> 00:23:05.410
all of the fragments that
are actually being used.

00:23:05.410 --> 00:23:08.320
And then finally, we come
onto the reference restorizer.

00:23:08.320 --> 00:23:10.210
So touching a
problem of our saying

00:23:10.210 --> 00:23:15.040
that we have taken the
desktop replay about as

00:23:15.040 --> 00:23:17.080
far as I think we can take it.

00:23:17.080 --> 00:23:19.390
We're now looking
at alternatives.

00:23:19.390 --> 00:23:22.660
So a reference restorizer
could be very useful

00:23:22.660 --> 00:23:25.900
for other things, as well as
having a guaranteed replay

00:23:25.900 --> 00:23:30.040
that you can do on
your host machine.

00:23:30.040 --> 00:23:32.050
Now the first one
is that we know

00:23:32.050 --> 00:23:34.930
the devices do have issues.

00:23:34.930 --> 00:23:36.130
Drivers can be buggy.

00:23:36.130 --> 00:23:39.940
Hardware can actually be faulty.

00:23:39.940 --> 00:23:43.030
We really want to
hear about this.

00:23:43.030 --> 00:23:45.820
We can't stress enough
how much we want

00:23:45.820 --> 00:23:48.910
to hear about broken drivers.

00:23:48.910 --> 00:23:52.940
We know that people
are having a bad time.

00:23:52.940 --> 00:23:59.680
But we have to go out and ask
you a lot about your stories.

00:23:59.680 --> 00:24:06.260
So if you had a trace, and
you take it, and you are idle,

00:24:06.260 --> 00:24:09.350
we think that we could do
a replay in the background

00:24:09.350 --> 00:24:11.140
with the reference restorizer.

00:24:11.140 --> 00:24:12.740
And after, you
checked that what you

00:24:12.740 --> 00:24:15.110
are getting replayed
on the device

00:24:15.110 --> 00:24:17.630
matches what we
think it should be.

00:24:17.630 --> 00:24:21.020
And if they are not the
same, we can offer you

00:24:21.020 --> 00:24:23.510
a one-click reporter bug.

00:24:23.510 --> 00:24:26.480
That gives us an exact repro
that we can give to the driver

00:24:26.480 --> 00:24:28.550
teams to fix that.

00:24:28.550 --> 00:24:33.320
So it would be a nice way
for the Android ecosystem

00:24:33.320 --> 00:24:34.320
to be better all around.

00:24:37.200 --> 00:24:40.160
GL ES and Vulkan,
they are specs that

00:24:40.160 --> 00:24:44.700
have hand-wavy aspects to it,
especially around floating

00:24:44.700 --> 00:24:47.430
point precision and sampling.

00:24:47.430 --> 00:24:49.560
If we have a
reference restorizer,

00:24:49.560 --> 00:24:51.480
we think that
there'll be value here

00:24:51.480 --> 00:24:54.150
in having some knobs
that you can fiddle with

00:24:54.150 --> 00:24:57.160
to basically compare
how things would look

00:24:57.160 --> 00:24:59.910
on different hardware specs.

00:24:59.910 --> 00:25:03.030
So the floating point
precision is the classic one.

00:25:03.030 --> 00:25:05.200
If you load your
floating point precision,

00:25:05.200 --> 00:25:08.640
do your shaders then suddenly
start dividing by zero.

00:25:08.640 --> 00:25:11.400
This is something that
happens and something

00:25:11.400 --> 00:25:13.520
that maybe we could catch
for you automatically

00:25:13.520 --> 00:25:16.270
in a [INAUDIBLE].

00:25:16.270 --> 00:25:19.750
On-host replay-- we've
got it for GL ES.

00:25:19.750 --> 00:25:23.290
We would like it
for Vulkan as well.

00:25:23.290 --> 00:25:25.630
Reference restorizer makes
that definitely possible

00:25:25.630 --> 00:25:28.840
and more solid than what
we have at the moment.

00:25:28.840 --> 00:25:30.910
And then finally, the
automated testing things.

00:25:30.910 --> 00:25:34.600
This kind of goes back
to the GAPID tool.

00:25:34.600 --> 00:25:37.330
If you have a ref
rest, and you've

00:25:37.330 --> 00:25:40.630
got, say, nightly builds
that you're doing,

00:25:40.630 --> 00:25:42.850
you could just basically
have GAPID automatically

00:25:42.850 --> 00:25:44.680
take a trace of your game.

00:25:47.260 --> 00:25:54.670
Make sure that you've got no
bad usage of the graphics' APIs.

00:25:54.670 --> 00:25:58.900
And you can also use
it to get a reference

00:25:58.900 --> 00:26:01.542
video of what the game
should be looking like.

00:26:01.542 --> 00:26:03.250
And also use the
toolings to actually get

00:26:03.250 --> 00:26:06.950
videos across the different
devices that you care about

00:26:06.950 --> 00:26:11.020
and potentially flag them
as issues as they pop up,

00:26:11.020 --> 00:26:12.934
as opposed to in the
last week of getting

00:26:12.934 --> 00:26:13.850
the game out the door.

00:26:16.457 --> 00:26:18.040
So that was a lot
of stuff that I just

00:26:18.040 --> 00:26:21.320
covered very, very quickly.

00:26:21.320 --> 00:26:24.020
If there were things that
I've missed here and you think

00:26:24.020 --> 00:26:27.060
are very valuable, please,
please, please, let us know.

00:26:29.862 --> 00:26:30.930
And that's it.

00:26:30.930 --> 00:26:32.433
Any questions?

00:26:32.433 --> 00:26:34.900
AUDIENCE: You talked
about the power profiling.

00:26:34.900 --> 00:26:36.587
BEN CLAYTON: Sorry, mic for him.

00:26:40.325 --> 00:26:42.200
AUDIENCE: You just
mentioned power profiling.

00:26:42.200 --> 00:26:45.850
Could you elaborate?

00:26:45.850 --> 00:26:49.380
BEN CLAYTON: It's still very
much in research at the moment.

00:26:49.380 --> 00:26:52.890
But the idea is that we
could have the ability

00:26:52.890 --> 00:26:56.010
to replay the same
frame repeatedly.

00:26:56.010 --> 00:27:00.070
And if we had hardware support
for actually seeing the drain

00:27:00.070 --> 00:27:02.460
and monitoring the
thermals, we can at least

00:27:02.460 --> 00:27:05.760
come up with a, if you keep
on having your game render

00:27:05.760 --> 00:27:07.907
something similar to this
particular frame, this

00:27:07.907 --> 00:27:10.240
is the kind of characteristics
that you're going to have

00:27:10.240 --> 00:27:11.406
on the battery and thermals.

00:27:14.650 --> 00:27:17.470
And any of the heuristics
that we have for optimization,

00:27:17.470 --> 00:27:19.194
we can also try that as well.

00:27:19.194 --> 00:27:21.610
It might be something that you
would have to run overnight

00:27:21.610 --> 00:27:23.260
to try and get stable results.

00:27:23.260 --> 00:27:26.170
But it's better
than weeks and weeks

00:27:26.170 --> 00:27:27.836
of poking around yourself.

00:27:35.130 --> 00:27:38.682
AUDIENCE: Can you put the URL
back up for the questionnaire?

00:27:38.682 --> 00:27:39.432
BEN CLAYTON: Sure.

00:27:48.070 --> 00:27:48.838
There we go.

00:28:05.974 --> 00:28:07.890
AUDIENCE: For the power
and thermals, is there

00:28:07.890 --> 00:28:09.390
going to be any way
to tie that back

00:28:09.390 --> 00:28:12.610
to the core frequencies
and the CPU usage,

00:28:12.610 --> 00:28:14.730
so you can see
whether or not there's

00:28:14.730 --> 00:28:18.000
a trade-off between your
submission of the call

00:28:18.000 --> 00:28:20.880
time versus the actual GPU time?

00:28:20.880 --> 00:28:23.530
BEN CLAYTON: Great suggestion.

00:28:23.530 --> 00:28:27.360
Yeah, maybe.

00:28:27.360 --> 00:28:30.204
These are things that we
have briefly looked at.

00:28:30.204 --> 00:28:31.620
We haven't started
development on.

00:28:31.620 --> 00:28:34.680
So yeah, if that's valuable.

