WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:04.162
Functionally homogeneous architectures
can be characterized as follows.

00:00:04.162 --> 00:00:08.000
Any node can process any type
of reques,t and can do any of

00:00:08.000 --> 00:00:12.520
the processing actions that are required
in the end to end request processing.

00:00:12.520 --> 00:00:15.130
Again, this resembles
the basic boss worker model.

00:00:15.130 --> 00:00:17.670
The front end component is the boss,
responsible for

00:00:17.670 --> 00:00:19.860
pushing requests onto the workers.

00:00:19.860 --> 00:00:23.970
And, all the workers can perform all
of the required steps for a request.

00:00:23.970 --> 00:00:26.890
The benefit of this is that
the front-end can be made

00:00:26.890 --> 00:00:28.380
kept fairly simple.

00:00:28.380 --> 00:00:31.000
It doesn't have to keep
track which one of the nodes

00:00:31.000 --> 00:00:35.910
can perform which particular action,
or can service which types of request.

00:00:35.910 --> 00:00:39.340
Instead, the front end can
simply in a round robin manner,

00:00:39.340 --> 00:00:42.460
send requests onto
the next available node.

00:00:42.460 --> 00:00:46.832
Or, the front end could be enhanced
in some simple way in which it keeps

00:00:46.832 --> 00:00:50.983
some information regarding the CPU
loads, the CPU utilization,

00:00:50.983 --> 00:00:53.077
on the other nodes in the system.

00:00:53.077 --> 00:00:53.711
And then,

00:00:53.711 --> 00:00:58.320
it can use that type of information to
direct requests onto the worker nodes.

00:00:58.320 --> 00:01:02.700
This design doesn't mean that every
single one of the nodes has to store

00:01:02.700 --> 00:01:07.440
all of the data, all of the state
that's needed for the internet service.

00:01:07.440 --> 00:01:12.030
Instead, data may be somehow replicated,
or distributed across these nodes.

00:01:12.030 --> 00:01:17.450
But, with the homogeneous design,
every single one of the nodes knows how

00:01:17.450 --> 00:01:22.600
to get, how to access any type of
information that may be necessary for

00:01:22.600 --> 00:01:24.350
the execution of the service.

00:01:24.350 --> 00:01:27.230
One downside of this approach
is that there is little

00:01:27.230 --> 00:01:29.920
opportunity to benefit from caching.

00:01:29.920 --> 00:01:31.410
If the front end is simple,

00:01:31.410 --> 00:01:35.810
and it just passes requests round
robin onto the other nodes.

00:01:35.810 --> 00:01:40.528
It may not be able, and in fact, it will
not be able to explore opportunities

00:01:40.528 --> 00:01:44.880
like, this particular node,
already serviced some state, and

00:01:44.880 --> 00:01:47.795
therefore it's likely
present in its cache.

00:01:47.795 --> 00:01:51.480
And, it will not need to perform
a remote access in order to access that

00:01:51.480 --> 00:01:52.920
particular information.

