WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.195
[BLANK_AUDIO]

00:00:03.195 --> 00:00:05.340
Hi, guys.

00:00:05.340 --> 00:00:06.650
Welcome to Webcast.

00:00:06.650 --> 00:00:11.590
Today, we're going to be talking
about stage two tips and tricks.

00:00:11.590 --> 00:00:13.930
And my name's Rahul,
I'm a Udacity coach.

00:00:13.930 --> 00:00:14.450
&gt;&gt; I'm Anthony.

00:00:15.780 --> 00:00:16.920
&gt;&gt; Also a Udacity coach.

00:00:16.920 --> 00:00:23.140
And yeah, so
today we want to address some issues

00:00:23.140 --> 00:00:27.570
that you guys might have been having
with the code your own quiz project.

00:00:27.570 --> 00:00:32.640
And by the end of this webcast hopefully
you'll have an idea of not only how

00:00:32.640 --> 00:00:37.500
to approach this particular programming
problem posed by stage two but

00:00:37.500 --> 00:00:40.500
also programming problems in general,

00:00:40.500 --> 00:00:43.878
is being able to identify a problem and
break it down.

00:00:43.878 --> 00:00:49.020
&gt;&gt; Yeah definitely, so before this
webcast we looked into some of that

00:00:49.020 --> 00:00:54.570
common reasons why students do not meet
specifications on the stage two project.

00:00:54.570 --> 00:01:00.660
And the top reasons we're not commenting
at the beginning of functions,

00:01:02.120 --> 00:01:07.780
not using functions appropriately to
repeat, to automate repeated tasks or

00:01:07.780 --> 00:01:11.740
having functions that are longer
than 18 lines of code.

00:01:11.740 --> 00:01:16.050
&gt;&gt; And there are some smaller issues,
like prompting the users to try again

00:01:16.050 --> 00:01:19.350
and printing the quiz
after you replace a blank.

00:01:19.350 --> 00:01:25.380
But overall almost all these problems
that have one commonality and

00:01:25.380 --> 00:01:29.960
that is that they all have to do
it properly defining functions.

00:01:29.960 --> 00:01:35.410
And because of that, we're going to
be focusing almost entirely today

00:01:36.460 --> 00:01:41.220
how to read a problem,
break down the problem in such

00:01:41.220 --> 00:01:45.370
a way that it makes it easy to develop
functions when the time comes forth.

00:01:46.580 --> 00:01:49.245
&gt;&gt; So, one of the first places,
one of them or

00:01:49.245 --> 00:01:53.392
one of the great way to start off
approaching this type of problem is

00:01:53.392 --> 00:01:57.190
you've got you've got this
a much larger problem, right?

00:01:57.190 --> 00:01:58.970
Say, the Series 2 project.

00:01:58.970 --> 00:02:03.955
Yet it's a huge problem, that it's
create a film the blanks quits.

00:02:03.955 --> 00:02:07.180
Now, that's going to be involving
a lot of different tasks,

00:02:07.180 --> 00:02:12.670
a lot of different steps and really one
of the first things you want to do is,

00:02:12.670 --> 00:02:16.640
not think about it at
that large scale problem.

00:02:16.640 --> 00:02:18.860
You want to think about it
as these individual tasks.

00:02:20.600 --> 00:02:26.160
&gt;&gt; And for that, we're not going to
kind of break down the whole problem for

00:02:26.160 --> 00:02:28.221
you because that is-
&gt;&gt; It's your job.

00:02:28.221 --> 00:02:29.950
[LAUGH]
&gt;&gt; It's your job [LAUGH] and

00:02:29.950 --> 00:02:32.980
that's why you're taking this course,
but

00:02:32.980 --> 00:02:35.960
we're going to try to use,
provide an analogous problem and

00:02:35.960 --> 00:02:40.910
kind of show you how we need go step
by step to break down this problem.

00:02:40.910 --> 00:02:44.010
And most importantly how
we break down this problem

00:02:44.010 --> 00:02:48.290
can inform the way that we code
a solution to this problem.

00:02:48.290 --> 00:02:53.900
So, today I'm going to share
this following problem with you.

00:02:53.900 --> 00:02:57.920
It's very simple one, but
the idea is to just get you thinking

00:02:57.920 --> 00:03:02.810
about how to extract away the big
parts of what you're being asked.

00:03:02.810 --> 00:03:06.070
So, let's open up supply over here.

00:03:06.070 --> 00:03:06.920
&gt;&gt; Gotta screen share.

00:03:06.920 --> 00:03:10.495
&gt;&gt; Yeah.
I'm just pasting it here first,

00:03:10.495 --> 00:03:16.630
one second, promise that I'll
actually doing something.

00:03:16.630 --> 00:03:18.360
And let's share sublime.

00:03:19.420 --> 00:03:23.080
Okay, because that shift up there.

00:03:23.080 --> 00:03:25.890
Okay, so the problem that we're
going to be working on today is,

00:03:25.890 --> 00:03:30.790
show user three different
people drinking Coke.

00:03:30.790 --> 00:03:34.770
I think that's a sufficiently ambiguous
problem and some of you might be

00:03:34.770 --> 00:03:39.410
approaching the Stage 2 project as
sufficiently ambiguous problem as well.

00:03:39.410 --> 00:03:41.110
So for that reason,

00:03:41.110 --> 00:03:44.780
let's just break down what it
is where Trying to talk about.

00:03:44.780 --> 00:03:47.240
So, what does show mean here?

00:03:48.430 --> 00:03:53.880
Well because there's sometimes like
no one we can ask to kind of clarify

00:03:53.880 --> 00:03:55.960
the certain parts of a problem.

00:03:55.960 --> 00:04:00.370
We sometimes have to make a reasonable
assumption about what's meant.

00:04:00.370 --> 00:04:02.390
And try to move forward like that.

00:04:02.390 --> 00:04:06.600
So, let's assume that in this
case show means print, it may or

00:04:06.600 --> 00:04:07.920
may not mean it but for

00:04:07.920 --> 00:04:11.770
our purposes in moving forward, we're
going to say that show means print.

00:04:11.770 --> 00:04:13.620
Now, the second part of this problem is

00:04:15.010 --> 00:04:19.435
show users three different
people drinking Coke.

00:04:19.435 --> 00:04:22.195
[LAUGH] What does that mean?

00:04:22.195 --> 00:04:25.007
&gt;&gt; [LAUGH]
&gt;&gt; Well I think that here we can

00:04:25.007 --> 00:04:29.620
also make another assumption
that show means printing.

00:04:29.620 --> 00:04:32.980
So you might want to print
three different people.

00:04:32.980 --> 00:04:36.730
Because we're not given the people
like we're told to print out,

00:04:36.730 --> 00:04:39.350
we can assume that we
can just make them up.

00:04:39.350 --> 00:04:44.020
So, we can also assume
that drinking Coke could

00:04:44.020 --> 00:04:48.940
also be like just a word, a string, you
know, some sentence that we print out.

00:04:48.940 --> 00:04:53.990
So here, we've kind of broken
down the problem logically.

00:04:53.990 --> 00:04:59.620
And with that we've kind of talked
out what it is you wanted to say.

00:04:59.620 --> 00:05:05.050
And this is kind of
what we just went over.

00:05:05.050 --> 00:05:06.790
We said that we want to
have three people,

00:05:06.790 --> 00:05:10.350
we want a print ready to be printed.

00:05:10.350 --> 00:05:12.330
And we want to take the first person.

00:05:12.330 --> 00:05:14.980
Print the first person drinking Coke.

00:05:14.980 --> 00:05:18.910
Taking the second person, print
the second person drinking Coke, and

00:05:18.910 --> 00:05:22.240
taking the third person, and
print that person drinking Coke as well.

00:05:23.420 --> 00:05:27.520
It seems kind of silly, but what we've
done here is just really kind of broken

00:05:27.520 --> 00:05:32.700
down this ambiguous question,
and given ourselves in comments.

00:05:34.420 --> 00:05:38.239
Direction to actually go forward and
code something.

00:05:38.239 --> 00:05:38.972
&gt;&gt; Yeah.
And

00:05:38.972 --> 00:05:44.600
this goes back to one of the reasons why
a lot of students don't past Stage 2.

00:05:44.600 --> 00:05:46.860
Is not commenting at
the start of functions.

00:05:46.860 --> 00:05:47.540
&gt;&gt; Right.
&gt;&gt; And

00:05:47.540 --> 00:05:50.260
that's a huge reason why
the requirement exists.

00:05:50.260 --> 00:05:54.200
We want you to start your functions with
the comment explaining what the inputs,

00:05:54.200 --> 00:05:57.010
outputs and tasks of your function are.

00:05:57.010 --> 00:06:01.450
&gt;&gt; It's a great way, actually not to do,
not only to verify that's what your

00:06:01.450 --> 00:06:04.660
functions doing when you
are finished writing it.

00:06:04.660 --> 00:06:06.580
But actually do it before
you even write it and

00:06:06.580 --> 00:06:08.690
start thinking about those questions.

00:06:08.690 --> 00:06:09.680
What are my functions input?

00:06:09.680 --> 00:06:14.775
What are its outputs and
what tasks did it actually complete?

00:06:14.775 --> 00:06:17.850
&gt;&gt; Right, I noticed here that we've
need noted what our function needs to,

00:06:17.850 --> 00:06:20.920
well function.

00:06:20.920 --> 00:06:25.670
We've noted the input here,
we've taken a first person and

00:06:25.670 --> 00:06:27.780
we know the output what this
function is intended to do.

00:06:27.780 --> 00:06:30.760
We prompt the first
person drinking Coke.

00:06:30.760 --> 00:06:32.690
So let's go ahead and

00:06:32.690 --> 00:06:37.410
just try and code in accordance
with what it is we commented.

00:06:37.410 --> 00:06:41.060
I kind of like made this
in [LAUGH] beforehand.

00:06:41.060 --> 00:06:43.510
But here we've noted that we
want to have three people,

00:06:43.510 --> 00:06:46.770
we want to have want to print,
ready to be printed.

00:06:46.770 --> 00:06:50.440
And I've chosen Susie who's
a fictitional character here and

00:06:50.440 --> 00:06:51.060
me and Anthony.

00:06:52.220 --> 00:06:54.970
And-
&gt;&gt; Those could also be fictional people.

00:06:54.970 --> 00:06:56.200
&gt;&gt; Yes.
&gt;&gt; If we want them to be.

00:06:56.200 --> 00:06:56.753
&gt;&gt; You never know.

00:06:56.753 --> 00:07:01.180
[LAUGH] There might be
a second row out there.

00:07:01.180 --> 00:07:05.360
But that being said,
we're in a good place to kind of

00:07:05.360 --> 00:07:09.250
fill out this skeleton that we've
developed here [INAUDIBLE].

00:07:09.250 --> 00:07:12.570
So, here we have a first
function that kind of defines

00:07:13.680 --> 00:07:14.990
as you see drinking coke.

00:07:14.990 --> 00:07:19.328
Here is a second function
with me drinking Coke and

00:07:19.328 --> 00:07:23.577
here's a function with
Anthony drinking Coke.

00:07:23.577 --> 00:07:27.579
And one thing that we kind of didn't
write was that we have to call each

00:07:27.579 --> 00:07:29.860
one of these functions individually.

00:07:31.000 --> 00:07:34.960
So that's-
&gt;&gt; I see some issues with this

00:07:34.960 --> 00:07:35.760
code already.

00:07:35.760 --> 00:07:39.630
And I'm assuming that maybe some
students are saying this too.

00:07:39.630 --> 00:07:43.000
You might remember from the class
that we talk about a lot.

00:07:44.170 --> 00:07:47.530
Big thing with functions is that
they help you avoid repetition.

00:07:48.720 --> 00:07:53.129
But I'm seeing and we're hoping
some students see this as well,

00:07:53.129 --> 00:07:56.668
these three functions look
really really similar.

00:07:56.668 --> 00:07:57.648
&gt;&gt; Right.

00:07:57.648 --> 00:08:02.068
&gt;&gt; Susie drinks Coke,
Rahul drinks Coke, Anthony drinks Coke.

00:08:02.068 --> 00:08:05.488
What this is not doing is it's
not abstracting the problem.

00:08:05.488 --> 00:08:10.620
It's making it very specific to
a very specific type of problem.

00:08:10.620 --> 00:08:12.040
Does Susie drink Coke?

00:08:12.040 --> 00:08:13.710
Does Rahul drink Coke?

00:08:13.710 --> 00:08:15.510
Does Anthony drink Coke?

00:08:15.510 --> 00:08:17.235
&gt;&gt; Right.
So, like Anthony's saying,

00:08:17.235 --> 00:08:20.880
we've kind of repeated exactly
what it is that we're doing.

00:08:20.880 --> 00:08:25.809
So, the thing that we went wrong
after we kind of broke down this

00:08:25.809 --> 00:08:31.017
problem into comments is that we
didn't really group together and

00:08:31.017 --> 00:08:36.138
identify what it is that is repeating
in the task that we created.

00:08:36.138 --> 00:08:39.740
So we created this task that
we gotta show three people and

00:08:39.740 --> 00:08:42.892
you gotta show them drinking,
but we didn't kind

00:08:42.892 --> 00:08:47.038
of ask ourselves like what does it
mean for a person to drink Coke?

00:08:47.038 --> 00:08:51.190
What does it mean for
a single instance of our problem?

00:08:51.190 --> 00:08:55.680
And in that way we could've
grouped together the three

00:08:55.680 --> 00:09:00.461
functionalities here, and
what we could have done is just

00:09:00.461 --> 00:09:04.281
summarized these comments
into one comment.

00:09:04.281 --> 00:09:08.186
And I'm going to write underneath,
and that is takes as input a string,

00:09:08.186 --> 00:09:10.888
a person, and
prints that person drinking Coke.

00:09:10.888 --> 00:09:15.796
&gt;&gt; What's really key here as I'm
looking at Rahul's code here is

00:09:15.796 --> 00:09:17.378
he saying a person.

00:09:17.378 --> 00:09:21.190
He's not talking about the first
person or the second person.

00:09:23.040 --> 00:09:28.070
For hint, hint, your stage two project,
you might want to be thinking about

00:09:28.070 --> 00:09:32.850
all right, not how do I make the easy
level work or the medium level, but

00:09:32.850 --> 00:09:35.280
how do I make a level work?

00:09:35.280 --> 00:09:35.780
Any level work.

00:09:37.760 --> 00:09:38.900
&gt;&gt; Right.
&gt;&gt; That's going to be really,

00:09:38.900 --> 00:09:42.280
really key to you
succeeding at this project.

00:09:42.280 --> 00:09:45.190
&gt;&gt; Right, so
how do I pin just a single person?

00:09:45.190 --> 00:09:49.810
Well, I do this with the belief that
once I find a way to assess for

00:09:49.810 --> 00:09:56.240
a single person, then it's just a matter
of doing this thing x number of times.

00:09:56.240 --> 00:10:01.050
So one way that we can kind of simplify
this problem that we have here is that

00:10:01.050 --> 00:10:06.670
we're really just taking a person's
name and just adding drinks Coke to it.

00:10:06.670 --> 00:10:11.280
So, in a way we just kind of written
out all of our code here first and

00:10:11.280 --> 00:10:13.290
now we're trying to optimize for that.

00:10:13.290 --> 00:10:17.890
So say that we have like
person drinks Coke and

00:10:17.890 --> 00:10:23.250
instead of Susie, we just have drinks
Coke, and we pass on a person.

00:10:23.250 --> 00:10:27.132
So in this way,
we can pass in whatever we want for

00:10:27.132 --> 00:10:31.418
the input person, and
just have person drinks Coke.

00:10:31.418 --> 00:10:32.536
So one way that I've optimized that.

00:10:32.536 --> 00:10:33.850
&gt;&gt; You want to change that?

00:10:33.850 --> 00:10:37.060
So that we can actually print
the person's name as well?

00:10:37.060 --> 00:10:37.600
&gt;&gt; Yes.

00:10:37.600 --> 00:10:39.710
That's what I was just about to do.

00:10:39.710 --> 00:10:40.290
&gt;&gt; Cool.

00:10:40.290 --> 00:10:46.310
&gt;&gt; So, so here we've kind of,
in this function that have now

00:10:46.310 --> 00:10:50.910
written out here on line 22 here,
you see that we've take in drinks,

00:10:50.910 --> 00:10:55.590
we take in person and drinks Coke and
we print out person plus drinks Coke.

00:10:56.880 --> 00:11:02.060
I'm not going to build into this
because it's a pretty simple problem.

00:11:02.060 --> 00:11:07.580
But I think that you can very obviously
see how we've just really condensed

00:11:07.580 --> 00:11:10.980
these three functions into
one by simply thinking about

00:11:10.980 --> 00:11:15.800
like a person versus the three
people that we have to print out.

00:11:15.800 --> 00:11:20.670
So we can get rid of that and
we just lost like

00:11:20.670 --> 00:11:26.060
maybe 18 lines of code which
is surprisingly the number

00:11:26.060 --> 00:11:31.800
of lines that it takes to
not pass a submission.

00:11:31.800 --> 00:11:34.690
So you can see that just
by this little exercise,

00:11:34.690 --> 00:11:40.960
we've been able to eliminate a huge
portion of repeated unnecessary code.

00:11:40.960 --> 00:11:46.040
And with that, you'll be able to kind
of kill two birds with one stone by

00:11:46.040 --> 00:11:50.260
making a proper function and
not having it so

00:11:50.260 --> 00:11:52.270
long that it doesn't
pass our requirements.

00:11:54.000 --> 00:11:56.680
And you'll see that the functionality
is essentially the same,

00:11:56.680 --> 00:12:00.270
we've just really just taken
a person and drinks Coke.

00:12:00.270 --> 00:12:03.210
So you might be asking
yourself like what

00:12:05.410 --> 00:12:10.320
does this have to do with
her stage two project?

00:12:10.320 --> 00:12:16.576
And I think that we've kind of,
we've really

00:12:16.576 --> 00:12:22.210
just own down on the ideas that
we want to kind of get you guys

00:12:22.210 --> 00:12:27.120
to instill within yourselves after
doing this programming problem.

00:12:27.120 --> 00:12:31.690
So after you finish a stage two problem,
we're hoping that you will now

00:12:31.690 --> 00:12:36.560
abstract parts of the problem to make it
easier to understand how we can code it.

00:12:36.560 --> 00:12:39.670
We want you to kind of
realize that by doing this,

00:12:39.670 --> 00:12:43.330
you've avoided repeating
yourself in the future and

00:12:43.330 --> 00:12:46.052
you prevented the development of really
long code from the very beginning.

00:12:46.052 --> 00:12:52.820
You've also prevented yourselves from
repeating your code unnecessarily

00:12:52.820 --> 00:12:56.350
by really kind of breaking down
the problem from the very beginning.

00:12:56.350 --> 00:13:01.300
And you refine your comments
as you kind of go through

00:13:01.300 --> 00:13:06.210
this process of eliminating extra code,
because you'll see that I took

00:13:06.210 --> 00:13:10.600
those three original comments
that I had in passages here, and

00:13:10.600 --> 00:13:13.900
I just condensed it into one in
the proper format that we expect.

00:13:13.900 --> 00:13:18.072
Which I not only say what
the input to the function is,

00:13:18.072 --> 00:13:19.438
I also say what function does.

00:13:19.438 --> 00:13:23.960
So that in a nutshell
is kind of what it is

00:13:23.960 --> 00:13:27.930
that you want to take from
this particular example here.

00:13:30.300 --> 00:13:35.218
And again, in regards to what
it is this is supposed to do

00:13:35.218 --> 00:13:39.718
in your program problem,
we want you to think about

00:13:39.718 --> 00:13:43.708
the concept of a level
in the abstract sense.

00:13:43.708 --> 00:13:46.062
&gt;&gt; Right, don't focus in so

00:13:46.062 --> 00:13:51.635
much on how do I make my specific
construction of a level work?

00:13:51.635 --> 00:13:56.835
How do I make my specific
construction of the easy level work?

00:13:56.835 --> 00:13:59.827
When you have completed this project and

00:13:59.827 --> 00:14:03.523
you've done it in a way
that uses functions well,

00:14:03.523 --> 00:14:08.891
that uses functions that are generally
short and avoiding repetition,

00:14:08.891 --> 00:14:13.907
what you'll find is actually that
your code will work on any level,

00:14:13.907 --> 00:14:18.586
constructed in the way,
constructed in the expected format.

00:14:18.586 --> 00:14:24.042
So if your code works such that
blanks are defined as underscore,

00:14:24.042 --> 00:14:29.001
underscore, one, underscore,
underscore, and so on,

00:14:29.001 --> 00:14:34.478
it will work on any string that
people construct In that fashion.

00:14:34.478 --> 00:14:38.508
I could give you a random fill-in-the
blank quiz that I built and

00:14:38.508 --> 00:14:41.891
it should work in your code
as long as it's done right.

00:14:41.891 --> 00:14:47.170
&gt;&gt; Right, so that's probably a source
of a lot of problems that we have.

00:14:47.170 --> 00:14:51.350
And remember that in the skeleton
code that you received,

00:14:51.350 --> 00:14:55.890
that the sample that you're
given is an example a.

00:14:55.890 --> 00:15:00.650
&gt;&gt; We have a question here as long
as you have your code with you.

00:15:00.650 --> 00:15:01.528
&gt;&gt; Okay.

00:15:01.528 --> 00:15:05.178
&gt;&gt; Asking about lines 12, 13, and 14.

00:15:05.178 --> 00:15:10.470
So 12, 13, and 14, right, so Rahul,
can you show us your screen again and

00:15:10.470 --> 00:15:14.566
actually show how you would call
these functions rather than.

00:15:14.566 --> 00:15:17.276
So these functions that Rahul has at 12,
13, and

00:15:17.276 --> 00:15:20.951
14 are obviously no longer in our code
we no longer have a Susie drinks,

00:15:20.951 --> 00:15:22.776
Rahul drinks or an Anthony drinks.

00:15:22.776 --> 00:15:23.816
&gt;&gt; Great point.

00:15:23.816 --> 00:15:28.036
&gt;&gt; And so what we actually want to
do is just drinks_coffee on person1.

00:15:28.036 --> 00:15:28.571
All right, sorry.
&gt;&gt; [LAUGH]

00:15:28.571 --> 00:15:30.169
&gt;&gt; Drinks_coke on person1,

00:15:30.169 --> 00:15:33.368
drinks_coke on person2,
drinks_coke on person3.

00:15:33.368 --> 00:15:37.430
Rahul, why don't you actually run this
code so you can see what happens here?

00:15:37.430 --> 00:15:41.330
So if we run it we can see in the output
Susie drink Coke, Rahul drinks Coke,

00:15:41.330 --> 00:15:43.280
Anthony drinks Coke.

00:15:43.280 --> 00:15:45.800
Again, all off of one function.

00:15:45.800 --> 00:15:51.242
We do have to call functions for
each individual

00:15:51.242 --> 00:15:58.328
time we want to like identify
does a single person drink Coke.

00:15:58.328 --> 00:16:00.908
That's a result of our
construction of the function.

00:16:00.908 --> 00:16:06.048
Our function only knows if one
single person drinks Coke.

00:16:06.048 --> 00:16:10.241
I suppose you could construct a function
that could take in a list of people and

00:16:10.241 --> 00:16:14.670
tell us who among them drinks Coke,
but that's a more complicated example.

00:16:14.670 --> 00:16:16.690
Maybe that's something for
you to try at home.

00:16:16.690 --> 00:16:20.990
&gt;&gt; Yeah, it might be something that you
want to implement for your CH2 projects.

00:16:20.990 --> 00:16:23.850
But the idea here is to

00:16:23.850 --> 00:16:28.290
kind of just simplify your thinking when
you're trying to approach this problem.

00:16:28.290 --> 00:16:34.104
And yeah, you look at it and
said, we could probably

00:16:34.104 --> 00:16:39.128
have something like person2 or
person3 and

00:16:39.128 --> 00:16:45.888
then kind of adjust the inputs
here to person1, person2.

00:16:45.888 --> 00:16:52.782
But the idea here is to simply
extract away what needs to be done so

00:16:52.782 --> 00:16:59.805
that we're working with something
sufficient enough to pass and

00:16:59.805 --> 00:17:05.430
pass like all the requirements
that we have.

00:17:05.430 --> 00:17:07.836
So let's stop sharing this for a sec.

00:17:07.836 --> 00:17:08.762
And yeah, so

00:17:08.762 --> 00:17:13.328
those are things that we wanted
you guys to kind of come out with.

00:17:13.328 --> 00:17:17.710
Think about a level in the abstract
sense, not three levels.

00:17:17.710 --> 00:17:20.250
Identify what a function needs.

00:17:21.270 --> 00:17:23.993
What needs a function?

00:17:23.993 --> 00:17:28.375
Yeah, sorry, [LAUGH] identify what
needs a function after you've kind of

00:17:28.375 --> 00:17:33.110
broken down the individual tasks that
you have for this problem in comments.

00:17:33.110 --> 00:17:37.050
&gt;&gt; Yeah, a really great tip
that I tell a lot of students.

00:17:37.050 --> 00:17:39.060
When you're writing a function,

00:17:39.060 --> 00:17:42.480
really a function is like going to
perform some task for you, right?

00:17:42.480 --> 00:17:44.710
So when you're thinking
about the big problem and

00:17:44.710 --> 00:17:48.890
you identify the smaller tasks within
that and you figure out, okay,

00:17:48.890 --> 00:17:53.470
I want a function that does this
particular task within the project,

00:17:54.520 --> 00:17:58.050
think about two things before
you write any of the code.

00:17:58.050 --> 00:18:03.322
And those two things are, what should I
expect the result of my function to be?

00:18:03.322 --> 00:18:07.980
That's going to be your output,
what comes at the return value, and

00:18:07.980 --> 00:18:13.960
the second piece is what
information do I need to get there?

00:18:13.960 --> 00:18:17.970
What information am I giving,
such that I can achieve that result.

00:18:17.970 --> 00:18:19.370
And those are your inputs or

00:18:19.370 --> 00:18:23.220
your parameters,
what goes in the parentheses.

00:18:23.220 --> 00:18:28.140
Those are what's going to make
things generalizable and abstracted,

00:18:28.140 --> 00:18:32.896
so that you're able to write your
code such that it works on a abstract

00:18:32.896 --> 00:18:35.278
input rather than a specific one.

00:18:35.278 --> 00:18:40.326
&gt;&gt; Yeah, so that being said,
some last minute tips for

00:18:40.326 --> 00:18:45.145
some things Anthony and
I noticed, and they may or

00:18:45.145 --> 00:18:48.890
may not be things that you have to do.

00:18:48.890 --> 00:18:54.116
If it doesn't help your thinking,
then you can ignore it.

00:18:54.116 --> 00:18:59.156
[LAUGH] So one of the things I
do suggest you use is the exact

00:18:59.156 --> 00:19:05.503
MADlib code that you've kind of
worked through in the work sessions.

00:19:05.503 --> 00:19:10.870
The idea of kind of taking the MADlib's

00:19:10.870 --> 00:19:15.860
code design is what you want to
retain from those exercises.

00:19:15.860 --> 00:19:21.960
And that design is the replacement
of words within a log restring.

00:19:21.960 --> 00:19:25.670
That again is the essence
of this project.

00:19:25.670 --> 00:19:30.620
But you need to kind of find
a way to do that without,

00:19:32.480 --> 00:19:37.257
best without like using the while loop
and extra stuff that, sorry, I shouldn't

00:19:37.257 --> 00:19:41.067
say without using the while loop,
I don't want to get you guys confused.

00:19:41.067 --> 00:19:44.900
And don't use the exact code that you

00:19:44.900 --> 00:19:49.080
used before because that
can really add up in lines.

00:19:49.080 --> 00:19:55.420
And not only that, it kind of gets
away from the problem at hand.

00:19:55.420 --> 00:19:59.600
You want previous problems to inform
the designer of your new problems, but

00:19:59.600 --> 00:20:02.790
generally like when you're approaching
a programming problem, you want to

00:20:02.790 --> 00:20:07.860
break it down without any interference
from other things that you've learned.

00:20:07.860 --> 00:20:11.541
And that's really important because the
problem that you're looking at may not

00:20:11.541 --> 00:20:14.536
have anything to do with previous
problems you've seen before.

00:20:14.536 --> 00:20:17.836
So make sure that you've first
written down the problem and

00:20:17.836 --> 00:20:21.408
you have those comments where you
have exactly what you want do.

00:20:21.408 --> 00:20:25.588
And then you can think about what it is
you did in MADlibs that might help you

00:20:25.588 --> 00:20:27.420
in this particular situation.

00:20:28.620 --> 00:20:34.105
&gt;&gt; We have a question that popped
up in the general chat from

00:20:34.105 --> 00:20:42.180
Stefan saying the feedback he's
received on this project says that he

00:20:42.180 --> 00:20:45.000
shouldn't be using while loops to
cycle through the four questions.

00:20:46.010 --> 00:20:51.368
So it's hard to say without seeing
your code and I'm not fully

00:20:51.368 --> 00:20:57.245
understanding your interpretation
of the reviewer's feedback,

00:20:57.245 --> 00:21:01.486
but I'll try to answer
that as best as possible.

00:21:01.486 --> 00:21:02.526
I would imagine, so

00:21:02.526 --> 00:21:05.960
part of the specification rate is
that the user can select a level.

00:21:07.410 --> 00:21:11.600
You might run into issues if you're

00:21:11.600 --> 00:21:17.320
having the user select a level and
then using

00:21:17.320 --> 00:21:22.150
a while loop to go through that because
then you might not really be selecting.

00:21:24.540 --> 00:21:27.630
If your while loop is always
starting from the easy question, yet

00:21:27.630 --> 00:21:31.360
I'm selecting medium,
then that's a dissociation between what

00:21:31.360 --> 00:21:34.070
the user input is and
what your code is doing.

00:21:35.210 --> 00:21:39.380
So again, really difficult question to
address here without seeing the code,

00:21:39.380 --> 00:21:42.750
without seeing the reviewer feedback.

00:21:42.750 --> 00:21:47.808
Essentially, I think it's more
this issue sounds like it might be

00:21:47.808 --> 00:21:53.516
more specific to your code rather than
to the concept of using while loops.

00:21:53.516 --> 00:21:56.456
There certainly is a place for
while loops in this problem.

00:21:56.456 --> 00:22:04.528
In fact, it would be quite difficult to
do it without any to any looping there.

00:22:04.528 --> 00:22:09.015
What I would suggest you doing,
what I suggest you to do, again,

00:22:09.015 --> 00:22:10.658
think about the tasks.

00:22:10.658 --> 00:22:17.022
So if there is a task which is select a
level, maybe you want to a function that

00:22:17.022 --> 00:22:22.694
manages all the code that goes into
having the user select a level.

00:22:22.694 --> 00:22:25.514
[BLANK_AUDIO]

00:22:25.514 --> 00:22:27.120
&gt;&gt; I'm just answering Paul's question.

00:22:27.120 --> 00:22:30.540
I don't know if you guys had trouble
seeing the lower left corner of

00:22:30.540 --> 00:22:34.630
the sublime text but
it was just printing out the output.

00:22:34.630 --> 00:22:38.380
And I just posted that in the event
chat if you were wondering about that.

00:22:38.380 --> 00:22:46.845
But exactly what Anthony's saying,
it's not about kind of,

00:22:46.845 --> 00:22:51.750
not using a while loop here and
not using like a while loop there.

00:22:51.750 --> 00:22:56.560
Also, it's really about kind
of breaking down a problem.

00:22:56.560 --> 00:23:00.530
And I can't really stress this
enough because it's fundamental to

00:23:01.570 --> 00:23:02.160
coding before.

00:23:02.160 --> 00:23:06.768
Because I'm sure you guys either
have a firm grasp of the concepts or

00:23:06.768 --> 00:23:12.290
can hop on 101 and then get a firm
grasp of the programming concepts.

00:23:12.290 --> 00:23:16.721
But just problem solving in itself is
a different animal and we also want to

00:23:16.721 --> 00:23:21.437
kind of help you guys get a mindset for
that because that's important moving on

00:23:21.437 --> 00:23:25.387
when you see other sorts of problems
that you might be faced with.

00:23:25.387 --> 00:23:30.429
But yeah, so we have time for
a lot more questions,

00:23:30.429 --> 00:23:34.560
[LAUGH] any questions
that you might have.

00:23:34.560 --> 00:23:37.400
&gt;&gt; Yeah, so we'll stick around for
a little while.

00:23:37.400 --> 00:23:39.130
Q and A's open, the chat is open.

00:23:40.170 --> 00:23:43.138
Feel free to chat at us,
ask us questions.

00:23:43.138 --> 00:23:46.603
There'll also be a quick
survey sent out on the chat,

00:23:46.603 --> 00:23:51.688
asking about how you felt about this new
service that we're testing out here.

00:23:51.688 --> 00:23:54.959
We're hoping it's an improvement over

00:23:54.959 --> 00:23:59.394
Google Hangouts which we've
been using previously.

00:23:59.394 --> 00:24:01.868
So the survey was just
posted in the chat.

00:24:01.868 --> 00:24:05.208
Please, please take that.

00:24:05.208 --> 00:24:07.340
If you have time now,

00:24:07.340 --> 00:24:13.800
feel free to use the Q&amp;A to ask
any questions that you have.

00:24:13.800 --> 00:24:17.880
Rodeo do you have many last tips that
you can think of while we're waiting for

00:24:17.880 --> 00:24:19.260
questions to come in?

00:24:19.260 --> 00:24:21.690
I actually, I guess the one
that we didn't talk about.

00:24:23.890 --> 00:24:25.510
There's a huge thing.

00:24:25.510 --> 00:24:28.650
In lesson 2.7 Dave talks
about this a little bit.

00:24:28.650 --> 00:24:33.230
With the days between dates problem.

00:24:33.230 --> 00:24:38.460
And one of the things he [INAUDIBLE]
again he breaks that down to several

00:24:38.460 --> 00:24:41.890
tests and he talks about you know
the functions that we should use for

00:24:41.890 --> 00:24:44.840
it and what, what goes into that.

00:24:46.310 --> 00:24:49.360
I'll finish up my thought here and
then address the question.

00:24:51.060 --> 00:24:53.870
One of the things he mentions
is that one of the tasks is

00:24:53.870 --> 00:24:56.640
identifying is a year a leap year.

00:24:56.640 --> 00:25:00.620
And he mentions that that's a very,
actually a very easy problem to solve

00:25:00.620 --> 00:25:04.940
in the scope of a larger problem.

00:25:04.940 --> 00:25:10.295
But he actually saves that for
the last thing that he does.

00:25:10.295 --> 00:25:14.885
And the reason why he does that is
because evaluating whether a year is

00:25:14.885 --> 00:25:21.185
a leap year, well that problem
in itself is a little easy.

00:25:21.185 --> 00:25:23.930
It complicates the larger problem

00:25:23.930 --> 00:25:26.690
that makes writing the rest
of the code more difficult.

00:25:28.380 --> 00:25:32.350
To me that's very analogous
to the stage two project and

00:25:32.350 --> 00:25:36.350
the idea of having the user pick a level
and one thing that I see a lot of

00:25:36.350 --> 00:25:40.130
students do is that's the first thing
they do, is they write some code,

00:25:40.130 --> 00:25:44.690
they write some function that allows
the user to select one of three levels.

00:25:44.690 --> 00:25:45.870
And honestly,

00:25:45.870 --> 00:25:49.520
that's probably one of the easier
functions to write in this assignment.

00:25:49.520 --> 00:25:52.530
I don't recommend starting there for
the same reason that Dave does not

00:25:52.530 --> 00:25:56.360
start with the leap year,
it complicates the rest of your code.

00:25:56.360 --> 00:26:00.440
Because now all of a sudden you're
thinking about three different levels

00:26:00.440 --> 00:26:04.175
and you might start falling into that
mistake that we talked about earlier

00:26:04.175 --> 00:26:09.290
whereby you're thinking about my
specific levels rather than a level.

00:26:09.290 --> 00:26:11.580
So I really recommend you select,

00:26:11.580 --> 00:26:16.650
you create one example level to run your
code on and get your code to work on

00:26:16.650 --> 00:26:21.560
that single level first in
a generalizable way, in an abstract way.

00:26:21.560 --> 00:26:25.050
And then once you've done that then you
can start thinking, okay, so now how do

00:26:25.050 --> 00:26:30.380
I get my user to, you to have three
different levels available to them.

00:26:30.380 --> 00:26:36.560
You'll actually find that's very, very
easy to do if it can work on a level.

00:26:36.560 --> 00:26:38.520
So a couple questions here in the chat.

00:26:40.990 --> 00:26:44.440
Dan's asking how much does
the raw input part of the quiz

00:26:44.440 --> 00:26:46.070
affect the complexity of my code?

00:26:46.070 --> 00:26:47.445
&gt;&gt; I already answered that.

00:26:47.445 --> 00:26:49.730
[LAUGH]
&gt;&gt; I'm just going to answer it out

00:26:49.730 --> 00:26:54.540
loud here for
people who maybe aren't on Q and A.

00:26:54.540 --> 00:26:58.040
So yeah, as Rahul said it's
a necessary part of the program.

00:26:58.040 --> 00:26:59.110
It's just one line of code.

00:26:59.110 --> 00:27:01.580
That's what's going to
allow the user to respond.

00:27:01.580 --> 00:27:08.280
The syntax for
raw input is simply you assign raw input

00:27:08.280 --> 00:27:13.830
to some variable in parentheses for
raw input you have a string.

00:27:13.830 --> 00:27:16.420
That string is what
displays to the user, and

00:27:16.420 --> 00:27:20.374
then what they type next and hit
enter gets saved to the variable, and

00:27:20.374 --> 00:27:22.707
then you can manage
that how you see fit.

00:27:22.707 --> 00:27:26.374
Evaluate if the answer's correct,

00:27:26.374 --> 00:27:31.230
do whatever you need to do for
the problem.

00:27:31.230 --> 00:27:35.526
&gt;&gt; Sure, let's take a look at Paul's
question, which is, which I like,

00:27:35.526 --> 00:27:39.160
he's asking, can you show us how to
use comments to plan out your code.

00:27:39.160 --> 00:27:42.520
I'm having trouble figuring
out what functions to make.

00:27:42.520 --> 00:27:45.912
I'm glad that you kind of made
the analogy between comments and

00:27:45.912 --> 00:27:50.850
functions because that's what we were
trying to hope for with this webcast.

00:27:50.850 --> 00:27:54.250
But to use comments
to plan out the code.

00:27:54.250 --> 00:27:59.325
The way I generally do it using
comments to clear out the code

00:27:59.325 --> 00:28:04.311
is that I use the task that I'm
given to form the comments.

00:28:04.311 --> 00:28:09.153
And, I hope you guys saw that when I
kind of broke down the question that I

00:28:09.153 --> 00:28:13.937
gave myself which is show user three
different people drinking coke.

00:28:13.937 --> 00:28:19.604
I basically, literally,
took the words from the task and

00:28:19.604 --> 00:28:24.577
put it in comments in certain
places in order to kind

00:28:24.577 --> 00:28:29.260
of identify directly
what it is I have to do.

00:28:29.260 --> 00:28:32.760
Because if I take a look at the very
question that I'm being asked,

00:28:32.760 --> 00:28:37.930
I can really, like, just on it's
face answer the question right away.

00:28:37.930 --> 00:28:42.780
And after I've kind of written out
code and written out comments and

00:28:42.780 --> 00:28:46.600
got a basic functionality down,
then I can kind of go back.

00:28:46.600 --> 00:28:47.700
And at least argue that,

00:28:47.700 --> 00:28:50.270
you know, I literally took
the problem that I was given.

00:28:50.270 --> 00:28:51.670
And answered it.

00:28:51.670 --> 00:28:54.920
&gt;&gt; A great place to start would
be the project specification.

00:28:54.920 --> 00:28:58.240
That tells you what you're supposed
to do for this project and

00:28:58.240 --> 00:29:01.620
that's going to lay out essentially
the rules of the game, right.

00:29:01.620 --> 00:29:06.696
So, it's going to say it has to
display the question first and

00:29:06.696 --> 00:29:09.670
it has to ask the user for
input and should evaluate.

00:29:09.670 --> 00:29:13.580
Those are maybe things that you want
to think about making functions and

00:29:13.580 --> 00:29:17.359
you might want to think okay so
which of these are tasks that belong to,

00:29:17.359 --> 00:29:21.485
that I might have to repeat and that
should appear in a function in some way.

00:29:21.485 --> 00:29:25.340
&gt;&gt; Yeah I'm really glad you mentioned
that because I think that we give a lot

00:29:25.340 --> 00:29:28.312
of information that sometimes
might seem convoluted in

00:29:28.312 --> 00:29:30.095
the sample code that we give you.

00:29:30.095 --> 00:29:35.579
So what I suggest is kind of
just erasing parts of prompt

00:29:35.579 --> 00:29:41.554
that we give you and
only leaving like little action items.

00:29:41.554 --> 00:29:45.982
&gt;&gt; Like literally break it down into
steps, step one, step two, step three.

00:29:45.982 --> 00:29:47.890
&gt;&gt; Yeah.
&gt;&gt; And then go forth.

00:29:47.890 --> 00:29:50.806
&gt;&gt; And they're literally in comments
already so, right then there.

00:29:50.806 --> 00:29:53.015
[LAUGH] You already have like your task.

00:29:53.015 --> 00:29:57.510
&gt;&gt; Comments are great way to store those
like, some people call it pseudocode.

00:29:57.510 --> 00:30:01.499
Essentially it's like a step by
step process in algorithm towards

00:30:01.499 --> 00:30:05.780
solving a problem but not written
in a computer programming language.

00:30:07.870 --> 00:30:09.670
Jennifer also has a question.

00:30:09.670 --> 00:30:12.340
So as far as asking the user
to choose a level in our quiz,

00:30:12.340 --> 00:30:15.720
is it appropriate to use if
else statements for level?

00:30:15.720 --> 00:30:19.200
Yes, in fact that's probably
one of the best ways to do it.

00:30:22.100 --> 00:30:24.840
It kind of goes on programming style.

00:30:24.840 --> 00:30:29.060
But essentially I guess two
ways you could do this.

00:30:29.060 --> 00:30:31.200
Is one you could do it
at the global level.

00:30:31.200 --> 00:30:33.280
Meaning not inside of any function.

00:30:33.280 --> 00:30:38.320
And just that code is run immediately
upon when you run the file, or

00:30:38.320 --> 00:30:40.500
you could do it in a function itself.

00:30:42.170 --> 00:30:46.560
I personally am a proponent of thinking
that code shouldn't be written up at

00:30:46.560 --> 00:30:50.850
the global level, but
that's going to be up to you and

00:30:50.850 --> 00:30:54.520
your personal preference and
style to decide that.

00:30:54.520 --> 00:30:55.930
But really.

00:30:55.930 --> 00:30:58.310
I mean you can think about it like this,
right?

00:30:58.310 --> 00:31:02.990
So you have some prompt saying please
select a level, you're going to get

00:31:02.990 --> 00:31:08.120
that user's response, and then you
want to find out if they said easy,

00:31:08.120 --> 00:31:12.170
if they said medium, if they said hard,
or if they said something else.

00:31:14.070 --> 00:31:18.967
If you start to think or say problems
like that out loud to yourself, they

00:31:18.967 --> 00:31:25.170
kind of give you hints about what coding
techniques you might find helpful here.

00:31:25.170 --> 00:31:28.653
&gt;&gt; Yeah I mean are-
&gt;&gt; Use these keywords and

00:31:28.653 --> 00:31:34.540
it's like if is a keyword in
Python because it means something.

00:31:34.540 --> 00:31:36.583
It's not like it's just some weird word.

00:31:36.583 --> 00:31:42.380
It's always like if this condition then
do something else, that's English.

00:31:42.380 --> 00:31:43.920
&gt;&gt; So I think that we're.

00:31:45.930 --> 00:31:48.834
Well, unless anyone has
any more questions,

00:31:48.834 --> 00:31:51.071
we can kind of wrap this up right now.

00:31:51.071 --> 00:31:55.779
But, it seems like you guys have
been asking some great questions and

00:31:55.779 --> 00:32:00.244
from the questions that you've
been asking it seems that you have

00:32:00.244 --> 00:32:05.356
hopefully gained a better mindset of
how to tackle not only this problem but

00:32:05.356 --> 00:32:09.658
other problems that you might face,
not only in this area but,

00:32:09.658 --> 00:32:12.608
in the future of your
programming career.

00:32:12.608 --> 00:32:21.150
If that's the last question I think
that we can kind of end this webcast.

00:32:21.150 --> 00:32:22.130
&gt;&gt; Yeah sounds good to me.

00:32:22.130 --> 00:32:24.340
&gt;&gt; Awesome.
&gt;&gt; Also thanks for coming in today.

00:32:24.340 --> 00:32:26.170
Fill out the survey.

00:32:26.170 --> 00:32:28.950
Good luck with stage two.

00:32:28.950 --> 00:32:30.332
We're here to help you
if you need more help.

00:32:30.332 --> 00:32:31.075
&gt;&gt; Eat your vegetables.

00:32:31.075 --> 00:32:33.595
&gt;&gt; {LAUGH] Yeah, eat your vegetables.

00:32:33.595 --> 00:32:36.910
&gt;&gt; See you guys.
&gt;&gt; All right, see you.

