WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The next kind of software testing that I want to talk about is integration testing.

00:00:03.000 --> 00:00:07.000
Integration testing refers to taking multiple software modules

00:00:07.000 --> 00:00:11.000
that have already been unit tested and testing them in combination with each other.

00:00:11.000 --> 00:00:13.000
At this point often what we're really testing

00:00:13.000 --> 00:00:15.000
are the interfaces between modules, 

00:00:15.000 --> 00:00:17.000
and the question is did we define them tightly enough

00:00:17.000 --> 00:00:20.000
and specify them tightly enough that the different people 

00:00:20.000 --> 00:00:23.000
or the different groups of people implementing the different modules

00:00:23.000 --> 00:00:26.000
were able to make compatible assumptions,

00:00:26.000 --> 00:00:31.000
which are necessary for the software modules to all actually work together.

00:00:31.000 --> 00:00:33.000
And it often turns out that during integration testing

00:00:33.000 --> 00:00:35.000
we find substantial differences of assumption

00:00:35.000 --> 00:00:38.000
that have to be resolved before we can create a reliable 

00:00:38.000 --> 00:00:40.000
integration of the individual parts.

00:00:40.000 --> 00:00:42.000
And so as a computer science professor, what I find

00:00:42.000 --> 00:00:46.000
is that groups of students are almost always successful

00:00:46.000 --> 00:00:50.000
at creating well-tested, reliable software modules,

00:00:50.000 --> 00:00:53.000
but that separate groups of students who individually 

00:00:53.000 --> 00:00:56.000
create software modules, even when implementing to a fairly tight specification,

00:00:56.000 --> 00:00:59.000
often create software modules that fail under integration testing.

00:00:59.000 --> 00:01:02.000
It's really something that's quite a lot harder to do.

00:01:02.000 --> 00:01:04.000
Coming up with a software module that survives integration testing

00:01:04.000 --> 00:01:08.000
is really quite a lot harder often than creating reliable small units.

