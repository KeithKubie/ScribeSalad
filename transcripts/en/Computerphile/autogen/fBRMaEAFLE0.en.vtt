WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:08.309
We're going to talk about going from
Galois fields to Reed-Solomon codes.

00:00:08.309 --> 00:00:15.299
We must be mad, Sean. Really, I mean, so many
of you have said: "Just do Reed-Solomon,

00:00:15.299 --> 00:00:23.810
y' know. You've done Hamming codes. They [Reed-Solomon]
can't be that much more complex?"  Oh yes they can!

00:00:24.289 --> 00:00:30.119
The stuff we have done earlier - and we've done a
fair bit on Hamming codes, which if you

00:00:30.119 --> 00:00:35.969
remember are basically going to correct a
... put right a single error. That all

00:00:35.969 --> 00:00:43.020
happened in the 1960s. And in two of the
videos out there, which we'll put the

00:00:43.020 --> 00:00:47.550
links out for you, I did a thing called
Multi-Dimensional Error Correction where

00:00:47.550 --> 00:00:53.190
I had two bits of information (which was
a San Francisco state of weather). So

00:00:53.190 --> 00:00:57.870
there was two bits for the state of the
weather, like I think it was '11' for "sunny",

00:00:57.870 --> 00:01:02.670
or something like that. But in
order to protect those bits against a

00:01:02.670 --> 00:01:09.060
1-bit damage, I had to add no fewer
than 3 extra bits. I had to make it into

00:01:09.060 --> 00:01:14.729
a 5-bit code. But it was OK, because
checking up whether it had been damaged

00:01:14.729 --> 00:01:20.610
was easy. It was a simple parity check. It
was effectively saying : "Look, here's the

00:01:20.610 --> 00:01:25.290
3 parity-check bits at the end". I've
made the rule that overall it must be

00:01:25.290 --> 00:01:31.170
even parity. I know that one of them says
'1' Another one says '0' but this [third] bit I

00:01:31.170 --> 00:01:35.009
don't know. But it's got to be even
parity overall so if I've only got a single

00:01:35.009 --> 00:01:39.180
'1'and a '0',  I need another '1' to
make that grouping be even parity.

00:01:39.180 --> 00:01:43.890
Now that's the easy error correction. How did
it advance from that?  What changed? 

00:01:43.890 --> 00:01:49.860
Well, we're talking about 10 years hence. I
mean Richard Hamming was very definitely

00:01:49.860 --> 00:01:56.670
late '50s / early '60s. The next
phase of this or, this "big jump forward"

00:01:56.670 --> 00:02:01.649
thst we would want to do, was by Reed and Solomon [and]
was 10 years later. It was late '60s / early '70s.

00:02:01.649 --> 00:02:05.250
O!h and big surprise:  Were Reed and

00:02:05.250 --> 00:02:11.039
Solomon at Bell Labs ?! No! For a change.
Everybody else seemed to be at Bell Labs

00:02:11.039 --> 00:02:16.489
[but] Reed and Solomon were,
I think, at  MIT's Lincoln Laboratory. But there

00:02:16.489 --> 00:02:21.290
was a realization that if you wanted
more powerful error correction there

00:02:21.290 --> 00:02:25.580
were several things you could do but, the
more they looked into it, the more they

00:02:25.580 --> 00:02:31.459
found themselves having to learn about
Pure Mathematics concepts called Galois

00:02:31.459 --> 00:02:37.849
Fields. And this is finite field
arithmetic where you've got to be able

00:02:37.849 --> 00:02:43.760
to find a multiplicative and an additive
inverse. We've tried to prepare you for

00:02:43.760 --> 00:02:49.400
this by doing ISBN book codes, which is a
very simple manifestation of those two

00:02:49.400 --> 00:02:55.190
things. We thought in our early things [i.e. videos]
where a code word became a string of bits.

00:02:55.190 --> 00:03:00.709
And some of those are information bits.
And interleaved with them, or parked at

00:03:00.709 --> 00:03:06.590
the right-hand end very often, were
parity check bits. What we're now going

00:03:06.590 --> 00:03:13.209
to try and do is instead of just having
one great long string of bits, linearly,

00:03:13.209 --> 00:03:18.680
we're going to try and make it be almost
two-dimensional. Think of every one of

00:03:18.680 --> 00:03:24.650
these positions in your code-word now
as not being a single bit but a column

00:03:24.650 --> 00:03:29.150
of bits. Let's say it's an 8 bit column.
If you're doing something like Reed-Solomon

00:03:29.150 --> 00:03:34.190
correction in a CD context, y'know,
how big is the bucket size of

00:03:34.190 --> 00:03:38.989
these columns? I think it's something
like 40-odd bits but then even that

00:03:38.989 --> 00:03:44.239
couldn't cope. They had, like, two layers
of Reed-Solomon encoding - one backing up

00:03:44.239 --> 00:03:47.930
the other. So, if you like, the filling up
of these things, instead of linearly

00:03:47.930 --> 00:03:54.049
going like that - and then at the very far
end you put a few parity check bits - what

00:03:54.049 --> 00:03:58.609
we now do is we declare that every one
of these positions isn't a *bit* position

00:03:58.609 --> 00:04:06.139
it's a *symbol* position but a symbol can
be multiple bits, OK? For the sake of

00:04:06.139 --> 00:04:11.480
argument let's say it's an 8-bit symbol,
a byte. The way they get filled up is the

00:04:11.480 --> 00:04:16.370
bit stream comes in and it fills up a
column of 8, and then it fills up a next

00:04:16.370 --> 00:04:21.409
column 8 and a next column of 8. So it's
almost like we've got a 2-dimensional

00:04:21.409 --> 00:04:25.440
array of bits - and symbols in that direction- 

00:04:25.440 --> 00:04:31.740
but every symbol is composed of 'n' bits, as
it goes along. What's the advantage of

00:04:31.740 --> 00:04:35.490
doing that?  Well, you can see one
advantage, when you think about it,

00:04:35.490 --> 00:04:41.669
straight away. Hamming codes, for example,
the old way, tended to presume you've got

00:04:41.669 --> 00:04:48.210
the occasional error, now and then, wide
apart. What this is anticipating - if you

00:04:48.210 --> 00:04:54.690
can fill up symbol positions - is you
might get 'burst errors'. Yeah, you might

00:04:54.690 --> 00:05:00.930
get - here we go - bits coming off a CD, 
trying to play your music.

00:05:00.930 --> 00:05:07.259
It's encoded music. Now, if
they're filling up a bucket in a column,

00:05:07.259 --> 00:05:10.020
in some sense, and then moving on to the
next one

00:05:10.020 --> 00:05:16.919
there is just a chance that a localized
scratch will get all its 'bit-clobbering'

00:05:16.919 --> 00:05:23.190
over and done with, within two symbols
shall we say. So,  we know that we can

00:05:23.190 --> 00:05:28.560
devise codes that will can detect and
potentially correct a certain number of

00:05:28.560 --> 00:05:34.349
errors but if we can make it so that
those errors are not [only] bit errors within

00:05:34.349 --> 00:05:37.650
the symbol but just the symbol itself ...
something's wrong with it! Right?

00:05:37.650 --> 00:05:45.599
You then might stand a chance if
you've got, again, parity-check *symbols* at

00:05:45.599 --> 00:05:49.770
the far right-hand end -  not [just] parity-check
bits, if they've got enough information

00:05:49.770 --> 00:05:54.000
in them, you might be able to say:
"Something went wrong. I got a burst error

00:05:54.000 --> 00:06:02.370
there, as a scratch on that CD. Can I put
it right?" Yes, but it's not going to be

00:06:02.370 --> 00:06:09.650
simple-minded parity checking; it's gonna
be serious hardcore stuff. Because those

00:06:09.650 --> 00:06:18.090
check symbols at the end will normally
be arranged so that if the information

00:06:18.090 --> 00:06:23.610
is correct and nothing's got damaged
there'll be zeros. If something gets

00:06:23.610 --> 00:06:27.900
damaged,  the first thing you know about
it is that the parity-check symbols at

00:06:27.900 --> 00:06:33.419
the end are nonzero. You're getting [perhaps]
3, 5, 12, 15. What does that mean?

00:06:33.419 --> 00:06:38.640
well the answer is using
lots and lots of detective work - by the

00:06:38.640 --> 00:06:42.510
way those symbols that you put on the
far right-hand end - revel in the name of

00:06:42.510 --> 00:06:46.680
"syndrome", which i think is a wonderful
word. And my first thought was what on

00:06:46.680 --> 00:06:50.820
earth are pure mathematicians, or
communications engineers, doing with

00:06:50.820 --> 00:06:55.320
syndromes? They're medical aren' they?! Well, I
looked up in the dictionary and as far

00:06:55.320 --> 00:07:01.110
as I can make out it all makes sense. If
you have a certain syndrome it means you

00:07:01.110 --> 00:07:05.580
are exhibiting symptoms of an underlying problem

00:07:05.580 --> 00:07:10.170
So the grouping of symptoms that's
caused by an underlying problem is often

00:07:10.170 --> 00:07:14.670
called a syndrome. [There's] something like the
Guillain-Barre syndrome isn't there? I don't know what

00:07:14.670 --> 00:07:18.420
it is but I'm no doubt you'll all put me
right on that. But you can see it makes

00:07:18.420 --> 00:07:22.710
sense. The signal that something has gone
wrong is you get all of these

00:07:22.710 --> 00:07:27.780
information bytes or even bigger columns,
multiple bytes, whatever. But right at the

00:07:27.780 --> 00:07:36.390
end is now a "checksum from hell". You have
got a syndrome a set of remainders if

00:07:36.390 --> 00:07:41.490
you like, that are not zeros. Given only
that information, how can you work

00:07:41.490 --> 00:07:46.170
backwards and find out which of these
columns got hit and where in the column

00:07:46.170 --> 00:07:51.870
it got hit? And the answer is: By using Galois
Field theory over finite fields and

00:07:51.870 --> 00:07:57.660
doing lots and lots of long divisions
and additions. So, the bottom line is that

00:07:57.660 --> 00:08:04.680
for this work and particularly if you're
using, as we are of course now, powers of

00:08:04.680 --> 00:08:12.420
two, Galois said: "I can liberate you from
it having to be primes all the time,

00:08:12.420 --> 00:08:17.310
I can do powers of primes. And for all of
you future computer scientists that I'm

00:08:17.310 --> 00:08:22.500
not even aware of, you'll love this because
your beloved 2 comes into the real

00:08:22.500 --> 00:08:26.880
world because where you say '4'  and I
say: Don't think of it as 2 x 2

00:08:26.880 --> 00:08:33.780
Think of it as 2 ^ 2."
And so he said: "Yeah, I can do powers of

00:08:33.780 --> 00:08:38.790
any prime, including two, but what he
didn't say is: Here are the rules

00:08:38.790 --> 00:08:43.950
if you you light on 2 and say you want
to use my methods, here's rule number 1.

00:08:43.950 --> 00:08:50.830
Everything must be done modulo 2
Not modulo your bigger number - like 256 -

00:08:50.830 --> 00:08:54.400
that's different.
Modulo 2. So, for addition what do we know

00:08:54.400 --> 00:08:58.830
about addition modulo 2, from Bletchley
Park Sean? What do the 

00:08:58.830 --> 00:09:03.430
mathematical logicians call 'addition
modulo 2' ?
&gt;&gt; Sean:  This is exclusive OR

00:09:03.430 --> 00:09:09.750
&gt;&gt; DFB: It's Exclusive OR! So, no sweat for computer
scientists. All our additions of these

00:09:09.750 --> 00:09:13.720
numbers, represented in bytes or whatever,
are going to be done

00:09:13.720 --> 00:09:19.450
with Exclusive OR. Worse still - as we
found out in the ISBN previous example -

00:09:19.450 --> 00:09:24.310
you've got to be able to find
multiplicative inverses.  And that's going

00:09:24.310 --> 00:09:33.130
to lead us into doing long divisions
modulo 2 in a Galois Finite Field. Now

00:09:33.130 --> 00:09:38.320
that is a bit hair-raising but not too
terrifying. But if you're prepared in the

00:09:38.320 --> 00:09:46.690
end to do all of that work then fine.
You can use your 'syndrome' and analyze

00:09:46.690 --> 00:09:51.520
it to tell you where the errors went. That's
a lot of equation solving. For those of

00:09:51.520 --> 00:09:55.180
you into these things it's like solving
lots of simultaneous equations saying [for example]:

00:09:55.180 --> 00:10:01.150
"The only logical solution to this damage
is it absolutely must be column 3 and

00:10:01.150 --> 00:10:07.870
column 13. That's where the damage has
come. Does that syndrome always work back

00:10:07.870 --> 00:10:13.900
to getting your precisely one answer? 
Yes - it's just magic the way that this

00:10:13.900 --> 00:10:19.960
error correction works but it is complex
because the brute force way to do it is

00:10:19.960 --> 00:10:23.950
to get a set of simultaneous equations
and - some of you will know this - get lots

00:10:23.950 --> 00:10:28.870
of simultaneous equations to solve you use
'matrix inversion'. That is computationally

00:10:28.870 --> 00:10:35.020
a very heavy undertaking. And so you're
looking all the time for simplifications

00:10:35.020 --> 00:10:38.860
because, if you don't, you're sitting
there, like Sean and I were in the early

00:10:38.860 --> 00:10:45.160
'80s, thinking: " ... this error correction [for CDs]
this is in real time! How is this thing

00:10:45.160 --> 00:10:49.690
solving sets of matrix equations in real
time to make sure I can listen to this

00:10:49.690 --> 00:10:55.540
CD without hearing the scratches? Where's
our supercomputer free with every CD - a

00:10:55.540 --> 00:11:04.069
Cray XMP [in those days] - to solve your syndrome
equations?  Nope! what's the answer? You shake

00:11:04.069 --> 00:11:07.429
head and think: 
it's those hardware types! It's custom

00:11:07.429 --> 00:11:15.859
hardware! Yes, custom hardware can fairly
easily attain supercomputer capabilities

00:11:15.859 --> 00:11:20.539
so long as it's in a tightly defined
field. And it turns out, thank heavens,

00:11:20.539 --> 00:11:26.959
that error correction in Reed-Solomon
schemes lends itself very nicely indeed

00:11:26.959 --> 00:11:33.249
to things that computer engineers love
like "shift registers" [and pipelining]
and all sorts of

00:11:33.249 --> 00:11:38.000
hardware 'specials'. 

