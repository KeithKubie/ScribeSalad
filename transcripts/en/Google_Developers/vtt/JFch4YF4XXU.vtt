WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.910
&gt;&gt; BRAY: Hello.
&gt;&gt; Hello.

00:00:05.910 --> 00:00:19.330
&gt;&gt; BRAY: Welcome to the Android Track at the
GDD Brazil 2010. My name is Tim Bray. I'm

00:00:19.330 --> 00:00:20.930
the developer advocate at Android group at
Google. Yesterday, I came to Brazil for the

00:00:20.930 --> 00:00:22.609
first time. I've never been here before. I
found that it's actually quite difficult for

00:00:22.609 --> 00:00:31.659
a Canadian to get a Brazil VISA. But on the
other hand, they gave to me a five-year VISA

00:00:31.659 --> 00:00:42.019
so it should be easy for me to come back.
Today is more or less the introductory session

00:00:42.019 --> 00:00:49.269
to the Android Track; what Android is, how
it looks to a programmer, why it's interesting,

00:00:49.269 --> 00:00:55.019
and what directions we're taking it to. So
I'm going to spend a certain amount of time

00:00:55.019 --> 00:00:58.859
talking to this slide. Let me see, is it big
enough? Can the people at the back see it?

00:00:58.859 --> 00:01:03.600
Yes. Okay, good. So I'm going to spend sometime
talking about this because there's a lot of

00:01:03.600 --> 00:01:13.750
material on it. So Android is not a specification.
It's not a standard. It's a great big chunk

00:01:13.750 --> 00:01:20.180
of software. There's no separate definition.
This Android software is the definition of

00:01:20.180 --> 00:01:26.140
Android. And so here's what's in that Android
software. Essentially, it's a reasonably current

00:01:26.140 --> 00:01:33.680
Linux computer system underneath with the
Linux kernel but without a huge amount of

00:01:33.680 --> 00:01:38.860
the other stuff that goes into Linux. A lot
of libraries, the utilities, and the subsystems,

00:01:38.860 --> 00:01:43.950
and the user interfaces, and X Windows, and
all that stuff is just gone. It's a pretty

00:01:43.950 --> 00:01:51.110
naked kernel. And then on top of that, the
next really big piece that we add is Dalvik.

00:01:51.110 --> 00:01:58.780
Dalvik is the virtual machine that runs most
of the Android application code. It's a non-Java

00:01:58.780 --> 00:02:04.360
VM. It's architecturally very, very different
from a Java VM. And it's optimized to run

00:02:04.360 --> 00:02:11.840
programs on mobile devices. It runs its own
bytecodes, which we call DEX bytecodes, after

00:02:11.840 --> 00:02:17.600
the program that generates them. The next
big piece is the Android application framework.

00:02:17.600 --> 00:02:22.340
And if you're going to write an Android application
you really have to go through the Android

00:02:22.340 --> 00:02:28.570
app framework. There's no other way to do
it. Now, the framework itself runs on the

00:02:28.570 --> 00:02:34.770
native machine and the Android app framework
contains both a lot of code that runs on the

00:02:34.770 --> 00:02:40.920
virtual machine and code that just runs natively.
And we'll talk about some of that in detail.

00:02:40.920 --> 00:02:48.160
It's quite possible for Dalvik code and the
native code to call each other. That's done

00:02:48.160 --> 00:02:52.670
using the JNI protocol that was developed
in the Java community. And you can go both

00:02:52.670 --> 00:02:58.170
ways. Java code can call native code and you
can have native code that calls into a Java

00:02:58.170 --> 00:03:07.440
application into the codes that runs on Dalvik.
Some apps have a lot of native code in them

00:03:07.440 --> 00:03:14.860
as well. This is almost entirely games, most
commercial and straightforward apps that run

00:03:14.860 --> 00:03:19.100
entirely on Dalvik. But you can't have apps
that have native code. I think that's all

00:03:19.100 --> 00:03:26.510
the important--oh, of course, then also inside
Android is also the Harmony, the Harmony libraries.

00:03:26.510 --> 00:03:33.099
This is the library that was produced by the
Apache project to be a replacement for the

00:03:33.099 --> 00:03:38.069
Java SE libraries. Now, it's not the complete
set of Harmony libraries because Swing, and

00:03:38.069 --> 00:03:44.010
AWT, and CORBA, and lots of other pieces that
are interesting in a phone are not there so

00:03:44.010 --> 00:03:52.200
it's a substantial subset of the Harmony libraries.
So those are the big pieces that go into Android.

00:03:52.200 --> 00:03:58.980
Now, probably the biggest single piece isn't
the Dalvik. It's the Harmony--it's the Android

00:03:58.980 --> 00:04:04.239
application framework. So let's look at and
see what you find inside the application framework

00:04:04.239 --> 00:04:11.290
when you look. So the green boxes are things
that run mostly on Dalvik written in Java,

00:04:11.290 --> 00:04:18.900
and the brown ones are things that are substantially
written in C and run in native code, although

00:04:18.900 --> 00:04:24.879
they may have a Dalvik API to them. So a lot
of them are just things that managed pieces

00:04:24.879 --> 00:04:31.090
of the Android application framework. So there's
an activity manager, and a window manager,

00:04:31.090 --> 00:04:36.719
and a view systems, and those are the things
that collectively take care of the screen

00:04:36.719 --> 00:04:42.180
of an Android device, what's being displayed
on the screen of an Android device, and how

00:04:42.180 --> 00:04:46.650
you interact with it and things like that.
There's content providers which is database

00:04:46.650 --> 00:04:50.449
interface. There's a package manager that
takes care of, actually, running applications.

00:04:50.449 --> 00:04:53.199
Hey, it's a telephone, there's a telephony
manager so that you can make phone calls and

00:04:53.199 --> 00:04:58.659
do SMS and things like that. There's a resource
manager for taking care of all the binaries,

00:04:58.659 --> 00:05:08.090
the audio, video, the--and that kind of stuff.
Location, every Android device has a GPS in

00:05:08.090 --> 00:05:12.229
it and a location subsystem so there's a lot
of code in there to take care of that. There's

00:05:12.229 --> 00:05:15.499
a thing for taking care of your notifications.
These are just some of the big pieces. One

00:05:15.499 --> 00:05:20.520
of those things that has, "..." to say that
there are lots of other pieces in it. Over

00:05:20.520 --> 00:05:27.139
on the native code side, there's a reasonably
large subset of OpenGL ES. They're mostly

00:05:27.139 --> 00:05:32.789
for use by game designers, for people who
really want to do immersive, animated things.

00:05:32.789 --> 00:05:39.599
SGL and Surface Manager are related to that.
There's a free type so there's a fairly complete

00:05:39.599 --> 00:05:46.559
font handling subsystem in there. Every Android
device includes the SQLite database manager.

00:05:46.559 --> 00:05:51.589
You know what, fairly early on in my relationship
with Android, I found myself, you know, setup

00:05:51.589 --> 00:05:57.659
with a debugger typing SQL code into my phone.
And this was not exactly the future that I

00:05:57.659 --> 00:06:02.009
had imagined that--there's a media framework,
once again, for doing little of the media

00:06:02.009 --> 00:06:06.889
stuff. There's a complete--there's a big chunk
of lib C, Secure Sockets Layer. The point

00:06:06.889 --> 00:06:14.169
I'm trying to make is that Android's big.
I mean, it's really a very, very large comprehensive

00:06:14.169 --> 00:06:19.469
software suite. It wasn't built in a day.
They have been working on Android for years.

00:06:19.469 --> 00:06:24.569
Many of the people who built Android had previously
worked at Danger and had previously worked

00:06:24.569 --> 00:06:30.589
at B. So for a lot of them, it's sort of their
third go-around to building an operating system.

00:06:30.589 --> 00:06:37.550
So it represents the culmination of a huge
amount of experience. So at the end of the

00:06:37.550 --> 00:06:46.020
day as a developer, what we produce are applications.
So if you look inside an Android application,

00:06:46.020 --> 00:06:54.180
which is an APK file, there's really three
things. The Android manifest is the part that

00:06:54.180 --> 00:06:58.969
represents the bridge between an Android app
and the rest of the system. And it contains

00:06:58.969 --> 00:07:02.909
all of these things the system needs to know
in order to run the app, like what permissions

00:07:02.909 --> 00:07:07.419
it requires, what hardware it accesses, what
the various pieces of the application are.

00:07:07.419 --> 00:07:14.559
Then you have the actual Dalvik classes, the
DEX bytecodes that actually make up the logic

00:07:14.559 --> 00:07:18.629
of the application. And you have a bundle
of resources. These would be things like the

00:07:18.629 --> 00:07:26.139
strings, and the audio files, the video files,
the images, whatever you want. So by and large

00:07:26.139 --> 00:07:33.589
today, these things are produced in Java.
And as a result, they're actually written

00:07:33.589 --> 00:07:38.249
with Java although they're, you know, they're--it's
not Java at run time, and as a result, we

00:07:38.249 --> 00:07:42.809
get to inherent a large part of the Java tool
chain. And the tooling for doing this stuff

00:07:42.809 --> 00:07:49.089
is excellent. There's a first-rate plug-in
for Eclipse. There are also somewhat lesser

00:07:49.089 --> 00:07:55.460
evolved plug-ins for NetBeans and IntelliJ.
There are, you know, debuggers, and monitors,

00:07:55.460 --> 00:08:01.830
and profilers, and all the different pieces
that you would typically expect in a modern

00:08:01.830 --> 00:08:07.809
software development chain. It's not an official
Google project. But I'm happy to report that

00:08:07.809 --> 00:08:15.669
for those people who don't like Java so much,
there is work in progress to make Python,

00:08:15.669 --> 00:08:23.270
and Ruby, and Scala, all first class citizens,
so that you can program Android in a variety

00:08:23.270 --> 00:08:29.639
of different languages. So this is the mainstream
of Android application development that probably

00:08:29.639 --> 00:08:36.050
most of you would end up seeing and working
in. Now recently, we're seeing a lot of apps

00:08:36.050 --> 00:08:42.509
that are what we call NDK apps as opposed
to SDK apps. NDK stands for Native Development

00:08:42.509 --> 00:08:48.980
Toolkit and, basically, there are just the
same inside except they also contain some

00:08:48.980 --> 00:08:55.750
binary libraries and JNI, the glue that you
need to connect back and forth between the

00:08:55.750 --> 00:09:04.930
Dalvik stuff and the native stuff. These are
basically used by game programmers and only

00:09:04.930 --> 00:09:10.579
by game programmers. Now from our point of
view in the Android group, we're not 100%

00:09:10.579 --> 00:09:15.990
convinced that you really need to use C to
write a game. There are some actually quite

00:09:15.990 --> 00:09:21.880
high-performance games on Android that run
100% on Dalvik. They were written in Java,

00:09:21.880 --> 00:09:27.172
they work just fine. But a lot of game designers,
they don't even want to hear you talk about

00:09:27.172 --> 00:09:31.579
that. As soon as you say Java, they go, "Oh,
oh, oh, I can't--I can't do that." These guys

00:09:31.579 --> 00:09:38.650
want to live entirely in C and C++. Now if
you're going to do this, the tools aren't

00:09:38.650 --> 00:09:43.860
as sophisticated. You don't get the nice IDE.
You don't get a lot of tools. You have to,

00:09:43.860 --> 00:09:48.330
you know, have your own Ant-based build system
and so on. But, you know, game developers

00:09:48.330 --> 00:09:55.810
are tough anyhow. They're used to pain so
they do okay with this. So suppose--so how

00:09:55.810 --> 00:10:01.779
many of you are all ready Android developers?
How many people have--oh, excellent. So less

00:10:01.779 --> 00:10:07.330
than half. So, good. So this talk will still
be valuable to you. So suppose you want to

00:10:07.330 --> 00:10:13.620
become an Android developer. Here's what you
have to do. And let me start this by telling

00:10:13.620 --> 00:10:20.769
you my own personal Android story. I've always
wanted to program phones and I--but I'm a

00:10:20.769 --> 00:10:26.500
very strong believer in open source and in
nonproprietary approaches. And so when Android

00:10:26.500 --> 00:10:32.360
was announced in 2008, I was very interested
in it. So I went and I bought one of the first

00:10:32.360 --> 00:10:39.540
Android phones, the G1, and I got it in 2008
the day before Christmas vacation. So I was

00:10:39.540 --> 00:10:46.649
going off to spend Christmas with my mother.
And so I got my new phone and I took a resolution

00:10:46.649 --> 00:10:51.860
that I was going to write my first application
by New Year's Day, so in about two weeks.

00:10:51.860 --> 00:11:00.209
And I made it. I succeeded in doing that by
about four hours. And it was astounding to

00:11:00.209 --> 00:11:08.180
me how easy it is for somebody who is already
a Java or a C# programmer to learn Android.

00:11:08.180 --> 00:11:13.500
This is one of the biggest, biggest advantages
to Android because it's very, very easy to

00:11:13.500 --> 00:11:19.569
pick up. So how many people in the room are
already programmers in Java and C#? Okay.

00:11:19.569 --> 00:11:25.850
You can all be Android developers by tomorrow.
I'm serious. It's--there's really nothing

00:11:25.850 --> 00:11:30.940
to it. So what do you do? So the steps are
all here. Let me see. Are there any of them

00:11:30.940 --> 00:11:36.641
not obvious? You just go to developer.android.com.
You get it. You--for most of--most people

00:11:36.641 --> 00:11:41.420
would prefer to use the Eclipse plug-in although
some people prefer to use VI and Emacs. There's

00:11:41.420 --> 00:11:47.259
lots of tools in there to help you debug and
profile and so on and so forth. One thing

00:11:47.259 --> 00:11:52.210
that a lot of people don't do and they should,
Android is open source and you should use

00:11:52.210 --> 00:12:00.970
it. "Use--use the source, Luke." You should
definitely go and get the Android source code

00:12:00.970 --> 00:12:06.660
and download it. And here's why. Because the
documentation for Android is pretty good but

00:12:06.660 --> 00:12:11.870
no software documentation is ever complete.
So sometimes you're looking at some API and

00:12:11.870 --> 00:12:15.569
you can't figure out, "Well, how do I use
this location provider? This doesn't seem

00:12:15.569 --> 00:12:21.029
clear to me." So don't guess. Just go into
the source code because the source code for

00:12:21.029 --> 00:12:26.439
the operating system and the source code for
all the Google apps is there. Well, all except

00:12:26.439 --> 00:12:30.459
one or two, most of the Google Apps is there.
And you can go and see how other people use

00:12:30.459 --> 00:12:39.569
this. So don't guess, just copy. Absolutely
use the source. And then it cost $25 to register

00:12:39.569 --> 00:12:44.399
as a developer. And then you finished your
application, then you go and you upload it

00:12:44.399 --> 00:12:49.600
into the Android market and it's published,
you're finished. There's no review step. The

00:12:49.600 --> 00:12:55.399
latency, the amount of time it takes to publish
an Android application is just a few seconds.

00:12:55.399 --> 00:13:01.519
Now, that's nice but it's especially nice
when you've already published your application

00:13:01.519 --> 00:13:06.519
and you find an embarrassing bug and you need
to fix the bug. So, "Oops." So you fix the

00:13:06.519 --> 00:13:13.110
bug and you update it in the same day. No
waiting. That's a really, really big advantage.

00:13:13.110 --> 00:13:18.570
So becoming an Android developer is very easy.
So what I'm going to do now is I'm going to

00:13:18.570 --> 00:13:23.629
spend the next few minutes talking about the
pieces of the system that a developer sees.

00:13:23.629 --> 00:13:30.329
So here's a list of the concepts that really
define Android. Now, if you go and look at,

00:13:30.329 --> 00:13:35.399
you know, the suite of Android documentation,
there's lots more stuff than you see here.

00:13:35.399 --> 00:13:40.370
But these are the parts that are really distinctive
about Android, that are making Android different

00:13:40.370 --> 00:13:45.810
from other approaches to writing software.
And if you're going to ship something that's

00:13:45.810 --> 00:13:52.740
worth having, you're going to need this stuff,
okay? So let's dive into this and introduce

00:13:52.740 --> 00:13:59.290
the concepts that you're going to need to
know to be an Android developer. So an activity

00:13:59.290 --> 00:14:05.240
is sort of the equivalent of a screen or a
Web page. It has some layouts where you show

00:14:05.240 --> 00:14:09.560
things on the screen. This is where you display
text on the screen, where you display graphics,

00:14:09.560 --> 00:14:13.820
where you animate things. It's where you receive
the events when somebody taps on the screen,

00:14:13.820 --> 00:14:18.740
when somebody shakes the phone, when you had
moved location. It's where you play movies.

00:14:18.740 --> 00:14:24.629
It's where you record audio. It's where you
play audio. All this stuff happens in activities.

00:14:24.629 --> 00:14:32.910
And each application has a main activity that
this is the first one to be started. And when

00:14:32.910 --> 00:14:37.560
you are finished with one screen, you move
to the next screen to the next activity, okay?

00:14:37.560 --> 00:14:43.629
You move from activity to activity. So I have
a couple of screenshots here that show Android

00:14:43.629 --> 00:14:49.319
activities. So here's, it's a music player
and here--boy--the projectors kind of overloading

00:14:49.319 --> 00:14:54.360
the block. So the first screen is the list
of songs in the music player and the next

00:14:54.360 --> 00:14:58.709
screen is shows, you know, the music playing
a song with, you know, you can vote it up,

00:14:58.709 --> 00:15:03.490
you can vote it down, you can pause it and
so on and so forth. So these are two activity

00:15:03.490 --> 00:15:09.620
screens you launch from one to the other.
Now, the life of an activity is a little bit

00:15:09.620 --> 00:15:15.430
complex. And that's because--remember, you
are not in control. The user is in control.

00:15:15.430 --> 00:15:21.370
The user can start your activity at any time.
The user can switch to a different program

00:15:21.370 --> 00:15:25.910
at any time without telling you so you can
be suddenly stopped. The operating system

00:15:25.910 --> 00:15:32.389
might destroy you because it's short of memory.
You know, Android apps, they're not like a

00:15:32.389 --> 00:15:37.870
program running on a Web server where your
program will, in principle, run forever until

00:15:37.870 --> 00:15:43.490
you stop or you have an error or something.
In Android, you have to be prepared to be

00:15:43.490 --> 00:15:48.730
destroyed at any time because if the system
gets short of memory, your program is gone,

00:15:48.730 --> 00:15:55.809
okay? So you have to be prepared to start
and stop. There's a lifecycle here you have

00:15:55.809 --> 00:16:01.589
to learn and understand, and these are the
names of the programs that the callbacks they

00:16:01.589 --> 00:16:07.600
get called. When your application is created,
you get the onCreate callback. When it gets

00:16:07.600 --> 00:16:11.680
started for the first time, you get onStart
and onResume called together and then you're

00:16:11.680 --> 00:16:16.259
running. You are the front. You are in control
of the screen. It's you and the user talking

00:16:16.259 --> 00:16:21.889
to each other. Now, it's possible that a pop-up
comes up in front of you, you know, something

00:16:21.889 --> 00:16:26.100
else in the system puts up a dialogue, then
that would come onPause because it means that,

00:16:26.100 --> 00:16:30.160
you know, you're still--some of your materials
is still displayed but you're not in control

00:16:30.160 --> 00:16:34.990
anymore. And then if they switch in another
application, that's onStop because, you know,

00:16:34.990 --> 00:16:40.420
you're in background now. You're gone. And
then eventually, the phone is shut down or

00:16:40.420 --> 00:16:45.309
the system shuts you down and that will be
onDestroy. So, you have to have code to handle

00:16:45.309 --> 00:16:49.829
some or all of this. In the typical life of
an application, you know, you will be started,

00:16:49.829 --> 00:16:54.069
you will be on the front for awhile. He will
put you away. They'll usually be talking to

00:16:54.069 --> 00:16:57.980
somebody else. They'll bring you back then
it goes through onRestart and so on and so

00:16:57.980 --> 00:17:05.199
forth. So what that means is that if your
application has any state you need to keep

00:17:05.199 --> 00:17:09.680
track of, you know, you have to make sure
that you save that state during the onPause

00:17:09.680 --> 00:17:13.570
or onStop and make sure that that you can
bring it back when you're brought up. And

00:17:13.570 --> 00:17:18.080
it also means that people don't want to wait
so you have to be very fast about doing these

00:17:18.080 --> 00:17:25.500
things. So activities are sort of the knit
of the Android user interface. Now, Android

00:17:25.500 --> 00:17:31.410
is just a Linux system so you can do a fork
at any point, create a new process. You can

00:17:31.410 --> 00:17:36.050
spin up threads any time and they will run
in the background. But remember, the system

00:17:36.050 --> 00:17:40.680
can always just kill it. When the system gets
short of memory--and these devices, you know,

00:17:40.680 --> 00:17:45.070
they really don't have very much memory. If
the system gets short of memory, it'll just

00:17:45.070 --> 00:17:51.020
kill your process for you. But sometimes,
you need to run in the background and you're

00:17:51.020 --> 00:17:56.070
doing some important or useful work for the
user and you really don't want to be killed.

00:17:56.070 --> 00:18:01.380
So for example, suppose you are playing music,
okay? Or suppose you are tracking the user's

00:18:01.380 --> 00:18:05.700
location to keep a diary of where the user's
been or something like that. So in that case,

00:18:05.700 --> 00:18:09.640
you want to be in the background but you want
to say to the system, "Please, please, don't

00:18:09.640 --> 00:18:19.640
kill me." And for this purpose you use a service.
So a service is really a lot like an activity

00:18:19.640 --> 00:18:25.040
but the system will try very hard to keep
it alive. Now sometimes the system will kill

00:18:25.040 --> 00:18:30.380
a service but then it will make a big effort
to bring it back again soon if it has to kill

00:18:30.380 --> 00:18:38.450
it for awhile, it will bring it back. So here,
we have some examples of services. So the

00:18:38.450 --> 00:18:41.910
first one shows the music player, the same
one we were looking at before. So then we

00:18:41.910 --> 00:18:46.660
go to another application and the music player
runs as a service. And if you look at the

00:18:46.660 --> 00:18:50.410
notice bar--you can't really see it in this
projector--up in the notice bar, there where

00:18:50.410 --> 00:18:53.541
the red circle is, there's a little glyph
saying, "Oh, by the way, there's a service

00:18:53.541 --> 00:18:57.370
running in the background," and that's one
of the rules. If you are a service in the

00:18:57.370 --> 00:19:00.490
background doing useful work you should really
let the user know that you exist so you should

00:19:00.490 --> 00:19:07.930
put a small notice in the notice bar. And
if the user, you know, pulls down a task manager

00:19:07.930 --> 00:19:11.940
or the notification bar, you can see that
it will tell the user that, you know, the

00:19:11.940 --> 00:19:16.440
service is running. Services are very interesting.
They're quite a bit less complex in their

00:19:16.440 --> 00:19:21.430
lifecycle than an activity because they don't
have this issue of coming to background and

00:19:21.430 --> 00:19:27.590
powered so much. There's really only--there's
only two methods--three methods that you really

00:19:27.590 --> 00:19:34.190
have to worry about; onCreate, onStart, and
onDestroy. And most of the time you can assume

00:19:34.190 --> 00:19:38.400
that you're running. Typically, if you look
at a typical Android device, there will always

00:19:38.400 --> 00:19:44.680
be a few services running. The system has
some of its own and there will be others running,

00:19:44.680 --> 00:19:53.130
okay? So the vast majority of your application
code will either go into an activity or a

00:19:53.130 --> 00:19:58.200
service. This slide is a little bit of an
oversimplification. I discovered when writing

00:19:58.200 --> 00:20:00.740
services that there's actually quite a lot
of other bookkeeping code you have to do to

00:20:00.740 --> 00:20:05.490
set it up. It seems to me that it's a little
bit more complex than it needs to be. But

00:20:05.490 --> 00:20:12.180
it's not too bad. Now, the next really important
thing about Android is intents. And intents

00:20:12.180 --> 00:20:17.400
are one of the really new ideas in Android
and one of the things that make Android really

00:20:17.400 --> 00:20:23.680
unique. So an intent is actually a fairly
complex object. So when you want to start

00:20:23.680 --> 00:20:28.240
an activity or start a service, you always
give it an intent as the argument, okay? Say,

00:20:28.240 --> 00:20:29.391
"Here's--go start an activity using this intent."
So the intent has quite a few things in it.

00:20:29.391 --> 00:20:38.400
It has a target, which I'll talk about that
in a minute. It has an action that's well

00:20:38.400 --> 00:20:45.720
sort of, there's a well-known--there's a set
of well-known actions in the system. Things

00:20:45.720 --> 00:20:52.360
like display, and open, make a phone call,
and things like that. And then it also has

00:20:52.360 --> 00:20:54.470
a Mime type. It's a same kind of Mime type
that goes with a Web page, so image/jpeg or

00:20:54.470 --> 00:20:58.430
text/html or something like that. And you
can also have a category of optional extra

00:20:58.430 --> 00:21:05.310
data. So suppose I want to start a service
to move from the music--listen to the music

00:21:05.310 --> 00:21:09.960
player, so I use the target--the target for
that. So you give the service a target which

00:21:09.960 --> 00:21:13.960
is basically a class, the class name, you
say go start a new activity with this class

00:21:13.960 --> 00:21:18.380
name or start a new service with this class
name and that's saying, I want you to run

00:21:18.380 --> 00:21:23.110
this various specific code for me, okay? Not
that's easy to understand. What's actually

00:21:23.110 --> 00:21:28.020
much more interesting is you can leave the
target out and you can just say, "I want to

00:21:28.020 --> 00:21:35.140
launch a service to play this music, to open
this webpage, to--oh, what was the other things?

00:21:35.140 --> 00:21:40.410
To--I have some ideas in here, open webpage
or to make a phone call." Here's the phone

00:21:40.410 --> 00:21:43.080
number, call that number. So you can make
an intent to do those things and just give

00:21:43.080 --> 00:21:48.160
it to the system and say go start a service.
And, then the system will go and find the

00:21:48.160 --> 00:21:53.270
best match with what you said, and this can
really produce some magic. So let me show

00:21:53.270 --> 00:21:58.820
you some of the magic this can produce. So
here's a very common example of the kind of

00:21:58.820 --> 00:22:02.730
thing that happens with an Android user. So
in the first screen, you see is a Twitter

00:22:02.730 --> 00:22:07.100
client, so we were watching Twitter and this
is the tweet screen of Pat Chanezon, one of

00:22:07.100 --> 00:22:11.290
the guys who's speaking maybe now, actually.
So when he came to the airport yesterday,

00:22:11.290 --> 00:22:16.010
he lost his luggage and he did a tweet yesterday
about how I lost my luggage and he did it

00:22:16.010 --> 00:22:21.840
with Foursquare. So there's a URL in the Twitter
thing, so I tapped the URL and the Twitter

00:22:21.840 --> 00:22:26.650
client just sent an intent saying open the
webpage and that opened up the browser on

00:22:26.650 --> 00:22:32.430
the Foursquare site saying, here's Pat's thing.
And on the browser window, there's a map so

00:22:32.430 --> 00:22:37.950
you click the map and you go to a map of Sao
Paulo showing the airport, okay? And this

00:22:37.950 --> 00:22:43.400
is done by Intent. And the system keeps a
stack of all the activities and this is the

00:22:43.400 --> 00:22:49.740
reason that in Android, the back button works.
Okay. So every time the user presses the back

00:22:49.740 --> 00:22:55.170
button, you just go back to the previous activity.
This is something that a lot of other operating

00:22:55.170 --> 00:23:01.770
systems don't have and it's an immense huge
benefit to the usability of Android. Okay?

00:23:01.770 --> 00:23:06.370
So that's one thing that you get for free
from Intents, here's another one. In the first

00:23:06.370 --> 00:23:11.740
picture, this is the gallery app and it's
showing a picture I took of some clouds and

00:23:11.740 --> 00:23:19.660
if I tap on the share button, a list of things
pop-up and that is a list of all the things

00:23:19.660 --> 00:23:25.590
that our--prepared to ham--handle the data
type, image less JPEG. So you can query the

00:23:25.590 --> 00:23:31.720
system to say which applications are in the
system that are able to handle image JPEG

00:23:31.720 --> 00:23:37.820
and, then you can create a list. Now the way
this works is that an application can register

00:23:37.820 --> 00:23:44.000
what's called an Intent Filter. And an Intent
Filter says, "I can do the following actions

00:23:44.000 --> 00:23:49.240
on the following data types." And so there's
also an API, so an application can go and

00:23:49.240 --> 00:23:54.370
see, you know, which app--which other applications
are ready. So here's a sharing menu, and what

00:23:54.370 --> 00:24:01.320
that means is that anybody who is willing
to handle image/JPEG can be put on the sharing

00:24:01.320 --> 00:24:08.280
menu for the gallery application. So on Android,
it's really, really, really easy to integrate

00:24:08.280 --> 00:24:14.800
different applications. And there's an important
philosophical point here. Oh, I don't want

00:24:14.800 --> 00:24:21.120
to talk about that yet, sorry. There's an
important philosophical point here which is

00:24:21.120 --> 00:24:29.690
that Google does not believe that one website
should sort of provide all the services for

00:24:29.690 --> 00:24:34.660
a user. And we don't believe that one application
should provide all the services on the phone.

00:24:34.660 --> 00:24:39.090
So the Google website is famous for sending
you away quickly, right. We come here, you

00:24:39.090 --> 00:24:42.590
find what you want, you go somewhere else.
And we--our vision for the phone is having

00:24:42.590 --> 00:24:46.730
a bunch of applications that do a bunch of
different things and using Intents or able

00:24:46.730 --> 00:24:53.400
to cooperate to provide the user with the
maximally full experience. Okay? So Intents,

00:24:53.400 --> 00:24:57.930
you really, really, really have to learn about
Intents and understand them well if you want

00:24:57.930 --> 00:25:04.190
to be an Android developer. Okay, the next
piece of apparatus that you need to understand

00:25:04.190 --> 00:25:09.030
is a Broadcast Receiver. This is--this is
sort of like a service, it's--when you need

00:25:09.030 --> 00:25:13.400
to be able to respond when something happens
but you don't need to be running. For example,

00:25:13.400 --> 00:25:18.650
you need to know if they plug-in the headsets
or you need to know if the battery is low,

00:25:18.650 --> 00:25:22.200
or you need to know that, you know, the screen
was dark but it was turned on. You don't need

00:25:22.200 --> 00:25:26.310
to be running, you just need to be notified.
So you use this also an Intent receiver, this

00:25:26.310 --> 00:25:33.300
is also done with Intents. So, you register
an Intent--an Intent broadcast receiver with

00:25:33.300 --> 00:25:37.550
the system and when this event happens, the
system will deliver you an Intent to your

00:25:37.550 --> 00:25:42.860
broadcast receiver and you can do whatever
is necessary. One special rule with broadcast

00:25:42.860 --> 00:25:47.630
receivers is they have to complete quickly,
you're not allowed to take control of the

00:25:47.630 --> 00:25:51.450
phone. If you spend more than five seconds,
the system will kill you, okay? So maybe the

00:25:51.450 --> 00:25:56.410
right thing to do is to launch a service or
something like that. Okay. But here's an example,

00:25:56.410 --> 00:26:02.090
this is actually a bad example, I realize
just today. This is an example of a music

00:26:02.090 --> 00:26:08.011
player and he has a broadcast receiver for
plugging in the headphones, okay. So when

00:26:08.011 --> 00:26:14.790
you plug-in the headphones, the music starts.
Bad idea. The other side is good, when they

00:26:14.790 --> 00:26:21.120
unplug the headphones, the music should stop,
right? But that's the idea of how a broadcast

00:26:21.120 --> 00:26:28.950
receiver works. Very simple lifecycle, you
start, you run, you exit, you almost certainly

00:26:28.950 --> 00:26:38.920
won't be killed and that's all there is to
it. You get unreceive and way you go. Okay.

00:26:38.920 --> 00:26:46.990
Another important part of the Android system
is content providers. So, as I said, the Android

00:26:46.990 --> 00:26:52.740
framework includes the SQLite three database,
and if you go looking around the insides of

00:26:52.740 --> 00:26:57.280
an Android device, you'll probably discover
that there are a lot of different databases

00:26:57.280 --> 00:27:02.930
probably, you know, hundreds of different
databases. And typically, everything in the

00:27:02.930 --> 00:27:08.250
system, every serious data that you want to
store on an Android is living--is most often

00:27:08.250 --> 00:27:13.770
living in a SQLite database. Now, you can
use the database directly in your program.

00:27:13.770 --> 00:27:18.660
There are some database helper classes, so
you can use it in your Java code or in your

00:27:18.660 --> 00:27:29.420
C code. But more often, it's designed to be
wrapped around with the content provider.

00:27:29.420 --> 00:27:34.590
And once you've wrapped data in a content
provider, then it's accessible to other applications.

00:27:34.590 --> 00:27:38.960
So that is how, for example, if you want to
read the list of contacts out of the person's

00:27:38.960 --> 00:27:45.660
address book or the list of songs out of the
music application or the list of phone calls

00:27:45.660 --> 00:27:52.530
that the person has made or that kind of thing,
those are all done by content providers. It's

00:27:52.530 --> 00:27:58.710
tremendously useful. Now, in theory, they
say that a content provider can be used to

00:27:58.710 --> 00:28:04.170
wrap any kind of a data source. In practice,
it seems that it's always SQLite inside a

00:28:04.170 --> 00:28:11.130
content provider if you look. My personal
opinion is that compared to the rest of Android,

00:28:11.130 --> 00:28:16.540
these are a little bit difficult, and awkward,
and clumsy. They're not the nicest part of

00:28:16.540 --> 00:28:22.361
Android. But they have pretty high performance
and they work pretty fine. Using content providers

00:28:22.361 --> 00:28:29.490
is really quite easy. Writing a content provider
I found actually to be quite difficult and

00:28:29.490 --> 00:28:34.610
tricky to get working. But they are tremendously
useful. So, you know, an obvious example,

00:28:34.610 --> 00:28:42.260
of course, is the music. You know, the music
inside and--is stored inside the content provider.

00:28:42.260 --> 00:28:45.450
And so you have a database, you have the content
provider and you can write a program easily

00:28:45.450 --> 00:28:51.240
to find all the music on a phone and play
it. So almost certainly, you'll have to use

00:28:51.240 --> 00:28:59.400
some content providers for any kind of a non-trivial
Android application. One good practice that

00:28:59.400 --> 00:29:09.200
I'm going to mention now that is also going
to come up in the talk on--really, it's going

00:29:09.200 --> 00:29:13.690
to come up in the talk on performance is I
think there's probably a little bit too much

00:29:13.690 --> 00:29:18.710
use of SQLite. I think many people could just
be very happy just storing their data in the

00:29:18.710 --> 00:29:22.200
file system and they use the database because
it's there so, you know, it doesn't mean you

00:29:22.200 --> 00:29:29.350
have to use it. Okay, so threading is a very
central to Android apps. The threads on an

00:29:29.350 --> 00:29:35.720
Android system are just ordinary Linux threads
and the API looks very--is the java.lang.thread

00:29:35.720 --> 00:29:41.240
API. Now the reason that you have to know
about threads is that there's one special

00:29:41.240 --> 00:29:47.070
thread in every application and that's the
thread that owns the user interface, okay?

00:29:47.070 --> 00:29:54.950
And it's very, very important that you shouldn't
be doing network stuff or database stuff on

00:29:54.950 --> 00:29:59.880
the user interface thread because it will
be instantly noticed by the user, that suddenly

00:29:59.880 --> 00:30:04.580
the phone will become slow. So really, to
do any serious work in an Android Apps, you

00:30:04.580 --> 00:30:09.290
have to put it on a different thread. So that
means you have to learn a little bit about

00:30:09.290 --> 00:30:15.830
threads and how to use them. We have a couple
of nice helper routines to package up a thread

00:30:15.830 --> 00:30:20.760
to help you avoid some of the details. But
I think most Android programmers do eventually

00:30:20.760 --> 00:30:25.530
end up writing some threading code. I'm going
to actually show you some code here from an

00:30:25.530 --> 00:30:30.660
application just to give you a feel for how
it looks. In this code here--I'll come over

00:30:30.660 --> 00:30:35.440
to this side for a change. In this code, it's
reading some data out of a content provider

00:30:35.440 --> 00:30:40.640
and it's writing it onto the disk using print
line and it's updating a progress bar, okay?

00:30:40.640 --> 00:30:44.380
So the progress bar goes across the screen.
Now since the progress bar is part of the

00:30:44.380 --> 00:30:50.800
user interface it has to be in the user interface
thread. But the code that reads the content

00:30:50.800 --> 00:30:54.420
provider and does the printing cannot possibly
be one the user interface thread because it

00:30:54.420 --> 00:30:59.020
might make the phone freeze, okay? So the
way it works is, first of all, we have a thing

00:30:59.020 --> 00:31:02.880
called a handler we create. I'll show you
that in a minute. And then, so here's the

00:31:02.880 --> 00:31:09.741
main method of the activity to onCreate. And
so we make a progress bar, okay? And then

00:31:09.741 --> 00:31:13.970
I make a new thread based on the copy and
class to do the actual reading and copying.

00:31:13.970 --> 00:31:21.070
So copyEnd is a runnable. And so the calls
variable there, that is a content provider.

00:31:21.070 --> 00:31:26.330
So one of the methods in content provider
is move to next so use move to next of the

00:31:26.330 --> 00:31:32.430
content provider. And so we go and we move
to next and then we pull the current data

00:31:32.430 --> 00:31:37.750
out of calls with one of our own private routines
I haven't showed you. We print it and then

00:31:37.750 --> 00:31:42.670
we say, "as call progress that set progress,"
do we actually call a method on the progress

00:31:42.670 --> 00:31:47.960
bar to update itself. And that's a little
tricky because that actually sends a message

00:31:47.960 --> 00:31:51.060
to the progress bar and then updates in the
other thread, in the user interface thread.

00:31:51.060 --> 00:31:56.700
Now when I originally wrote this code, I had
a horrible race condition bug because of the

00:31:56.700 --> 00:32:02.230
different threads and it took me a while to
find it. And then finally, there's this thing

00:32:02.230 --> 00:32:05.880
called the handler and the handler is a way
of sending a message to another thread. And

00:32:05.880 --> 00:32:12.240
in this case, I am going to use the handler
to put a title on the page saying how many

00:32:12.240 --> 00:32:16.480
things I read and how many things I saved.
So I give the handler a runnable and send

00:32:16.480 --> 00:32:21.400
that and it will run on the UI thread. So
you see a lot of this kind of code in Android.

00:32:21.400 --> 00:32:29.160
And in my experience, most of the actual tricky
bugs and irritating problems that programmers

00:32:29.160 --> 00:32:35.680
have come from threading because, you know,
threading has shared immutable state. It's

00:32:35.680 --> 00:32:39.350
got the potential for race conditions, for
deadlocks, there's--you know, it's tricky.

00:32:39.350 --> 00:32:46.761
So watch out for that stuff. Okay, another
piece of the system that I want to spend some

00:32:46.761 --> 00:32:54.050
time on is the Android Manifest. So the Android
Manifest is an XML file that you have to create

00:32:54.050 --> 00:32:59.360
and it is basically the declaration of the
app to the system. And it names any special

00:32:59.360 --> 00:33:03.650
libraries, for example, the Google Maps library
that you might want to use. It declares all

00:33:03.650 --> 00:33:07.760
the activities, the services, the intent to
filters are just there in the application

00:33:07.760 --> 00:33:12.190
manifest. They're--they don't exist in your
Java code. They're just right there in the

00:33:12.190 --> 00:33:17.240
XML. All that stuff is declared there. It's
terribly important to declare all the permissions

00:33:17.240 --> 00:33:22.760
so when you install the application it asks
the person, you know, "This application needs

00:33:22.760 --> 00:33:27.990
this permission, is that okay?" And if you
try and use, for example, the telephone without

00:33:27.990 --> 00:33:33.360
having the telephone permission, your application
will blow up, okay? It also identifies the

00:33:33.360 --> 00:33:36.900
hardware that you need. For example, suppose
you have an application that really needs

00:33:36.900 --> 00:33:43.670
a camera. You say, "Okay, I use the camera."
Or it also declares which versions of the--of

00:33:43.670 --> 00:33:48.450
Android this application can run on, and that's
very important because that's used by Android

00:33:48.450 --> 00:33:57.730
Market. So the Market looks at the Manifest
and when the phone comes to look at applications

00:33:57.730 --> 00:34:01.930
in the Market, the phone sends a message saying,
"Hi, I'm Milestone." You know, "I have these

00:34:01.930 --> 00:34:07.110
pictures. I run this version. I have a camera.
I have no camera." And as a basis of this,

00:34:07.110 --> 00:34:16.120
the phone will not see any applications that
he can't run. That's really important because

00:34:16.120 --> 00:34:19.490
there's--there are a lot of different Android
devices and there are more different kinds

00:34:19.490 --> 00:34:24.179
of Android devices coming all the time and
the Android Manifest is how we make sure that

00:34:24.179 --> 00:34:30.280
nobody will ever see an app that they can't
run, okay? I could easily spend this whole

00:34:30.280 --> 00:34:35.560
talk talking about Android Manifest but I
won't because that would be boring. There's

00:34:35.560 --> 00:34:45.100
a bunch of other bits and pieces in the system.
I mean, the--you know, there's APIs for like

00:34:45.100 --> 00:34:50.860
the camera, and the accelerometer, and the
GPS and all that stuff. Most of them are actually

00:34:50.860 --> 00:34:56.399
pretty easy to use. And the good thing is
that you don't really have to learn how to

00:34:56.399 --> 00:35:00.530
use them because Android's open source, and
because the world of Android Developer is

00:35:00.530 --> 00:35:06.720
so big, you know, just type "GPS Android Example"
into Google and go on steal somebody else's

00:35:06.720 --> 00:35:12.080
code. It's really the right way to do it.
And all of our code at this level is Apache-licensed.

00:35:12.080 --> 00:35:20.010
So we explicitly are saying, "Please," you
know, "take this code. Use it." The way that

00:35:20.010 --> 00:35:26.590
the screen is laid out, the screen layout,
is all done with some XML subsystem. There's

00:35:26.590 --> 00:35:30.310
others. There's a way to provide versions
of your strings in all sorts of languages,

00:35:30.310 --> 00:35:37.750
there's utilities for interprocess communication
and there's lots more of this stuff in here.

00:35:37.750 --> 00:35:42.580
Okay, so I think those are really the big
pieces of Android that you will be exposed

00:35:42.580 --> 00:35:49.400
to as a developer. Let me talk about where
we stand with Android. This is a picture--oh,

00:35:49.400 --> 00:35:54.830
so dark--of a building on the Google Campus
called building--the number doesn't matter--it's

00:35:54.830 --> 00:35:58.960
a building on the Google Campus and most of
the Android work is done inside this building.

00:35:58.960 --> 00:36:07.810
And when I'm at the headquarters, my office
is right behind the green guy there. The releases

00:36:07.810 --> 00:36:13.050
of Android are named after desserts and they
come out in alphabetical order. So here, you

00:36:13.050 --> 00:36:21.560
can see the history of the releases of Android;
Cupcake, Donut, Éclair, Froyo. And I just

00:36:21.560 --> 00:36:24.030
want to play you a movie here that came on
YouTube last week. Audio.

00:36:24.030 --> 00:36:25.030
&gt;&gt; That's it.
&gt;&gt; It must have tranquilized because I heard

00:36:25.030 --> 00:36:51.350
this duty is hard to catch up with.
&gt;&gt; Got it. Watch it, watch it.

00:36:51.350 --> 00:37:16.270
&gt;&gt; BRAY: These are the Android engineers by
the way. They all came out to do it.

00:37:16.270 --> 00:37:37.730
&gt;&gt; I'll just get a rope one.
&gt;&gt; There it is.

00:37:37.730 --> 00:37:45.230
&gt;&gt; BRAY: So the next release of Android is
called Gingerbread and it's coming out pretty

00:37:45.230 --> 00:37:49.730
soon because we put the statue up last week.
So you know, it has to come out pretty soon.

00:37:49.730 --> 00:37:56.710
And I can't talk in detail about what's going
to be in Gingerbread but I will give you the

00:37:56.710 --> 00:38:02.580
rough information on what we're working on.
So the thing that we care about probably more

00:38:02.580 --> 00:38:06.570
than anything else is performance, performance,
performance. Every release of Android has

00:38:06.570 --> 00:38:13.460
to be faster. And the reason we care about
performance so much is one word, "games."

00:38:13.460 --> 00:38:18.120
People really like to play games on their
phones. And all the game developers are saying,

00:38:18.120 --> 00:38:22.270
"Faster, faster, faster, faster." Of course,
as soon as we make it faster, they make the

00:38:22.270 --> 00:38:30.820
game bigger and slower so, you know, you never
win. As a result--the other thing is that,

00:38:30.820 --> 00:38:35.880
you know, here's the Samsung Galaxy Tab, and
there are many other Android devices coming

00:38:35.880 --> 00:38:42.490
that are going to be bigger than this including
the Google TV. So we're making some improvements

00:38:42.490 --> 00:38:46.210
to the software to make it, you know, easier
to work with a lot of different sizes. There's

00:38:46.210 --> 00:38:51.640
a whole speech in the Android Track this afternoon
about different Android form factors. We're

00:38:51.640 --> 00:38:56.530
putting some stuff in the framework to make
it easier for programmers. And this isn't

00:38:56.530 --> 00:39:00.770
a Google thing, but there's some community
projects going underway to make Python, and

00:39:00.770 --> 00:39:05.380
Ruby, and other languages available. But,
you know, that's only half of it. The other

00:39:05.380 --> 00:39:11.670
area where we're really doing a lot of work
is the Android Market. And we want the Android

00:39:11.670 --> 00:39:14.590
Market to be on the Web. Right now, you can
only see it from a phone. So we really want

00:39:14.590 --> 00:39:18.640
the Android Market to be available in a browser.
We want it to be a lot bigger. We want more

00:39:18.640 --> 00:39:22.350
apps and we want more countries. And we want
you. We want you to go and write more apps.

00:39:22.350 --> 00:39:27.320
Please do it. And we want to make it easier
to handle the money. We want to make it easier

00:39:27.320 --> 00:39:32.750
to search, easier to buy, easier to track.
Standby, I think there's going to be some

00:39:32.750 --> 00:39:37.990
very interesting announcements in the immediate
future on the Android Market. So I'm done

00:39:37.990 --> 00:39:45.090
now. I want to close with why I picked Android.
Occasionally, I am criticized because they

00:39:45.090 --> 00:39:49.530
say, "Well, you're always," you know, "you're
always saying good things about Android because

00:39:49.530 --> 00:39:53.090
you're such a Google fan boy." And that's
actually the reverse of the true--reverse

00:39:53.090 --> 00:39:56.790
to the truth. I fell in love with Android
two years ago and I joined Google so I could

00:39:56.790 --> 00:40:04.001
work on Android. So here's why I like Android
myself. First of all, I think that open source

00:40:04.001 --> 00:40:09.630
software is better software. I believe that
100%. I don't think it's controversial anymore.

00:40:09.630 --> 00:40:15.080
This is open source software and it's better
software. Secondly, the market is not--have

00:40:15.080 --> 00:40:19.770
a policeman, you know? Well, we have a policeman;
we don't have a guard at the gate. So anybody

00:40:19.770 --> 00:40:23.700
can put anything in the market. If it's illegal,
we'll take it down again but you can put anything

00:40:23.700 --> 00:40:28.100
in. It's accessible. You don't have to learn
any new languages. Almost everybody already

00:40:28.100 --> 00:40:34.450
knows either Java or C#, you can be a developer
in 15 minutes. The Android API is really nice.

00:40:34.450 --> 00:40:38.760
It's not like the big enterprise APIs where
you have factory, factory, factory methods

00:40:38.760 --> 00:40:45.030
and lots of abstractions. The intents, and
activities, and services are really well-designed.

00:40:45.030 --> 00:40:50.690
They're slick. They're easy. They're beautiful.
They're nice to work with. And maybe most

00:40:50.690 --> 00:40:57.080
important, nothing is hidden. Anything the
phone can do is accessible via the API. And

00:40:57.080 --> 00:41:01.310
the reason for that is we trust the market.
If people do something with the phone that

00:41:01.310 --> 00:41:04.760
is stupid and something in the application
that is stupid or dangerous, the word will

00:41:04.760 --> 00:41:09.080
get around very quickly and people won't buy
it. The market is much smarter than Google.

00:41:09.080 --> 00:41:13.650
Wherever you work, most of the smart people
are somewhere else. So the whole idea of Android

00:41:13.650 --> 00:41:18.490
is to open it up, make it free, make it open
source, unleash the full power of the phone,

00:41:18.490 --> 00:41:22.840
and trust the people to do smart stuff with
it. So thank you very much and I hope you

00:41:22.840 --> 00:41:24.930
come to some more of the Android talks this
afternoon. Thank you for coming out.

