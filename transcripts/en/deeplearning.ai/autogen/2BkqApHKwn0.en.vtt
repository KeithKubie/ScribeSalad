WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.060 align:start position:0%
 
in<00:00:00.329><c> the</c><00:00:00.510><c> previous</c><00:00:00.870><c> video</c><00:00:01.230><c> you</c><00:00:01.500><c> saw</c><00:00:01.770><c> how</c><00:00:01.800><c> you</c>

00:00:02.060 --> 00:00:02.070 align:start position:0%
in the previous video you saw how you
 

00:00:02.070 --> 00:00:03.800 align:start position:0%
in the previous video you saw how you
can<00:00:02.370><c> use</c><00:00:02.480><c> vectorization</c>

00:00:03.800 --> 00:00:03.810 align:start position:0%
can use vectorization
 

00:00:03.810 --> 00:00:05.960 align:start position:0%
can use vectorization
to<00:00:04.080><c> compute</c><00:00:04.560><c> the</c><00:00:04.799><c> predictions</c><00:00:05.370><c> the</c><00:00:05.640><c> lowercase</c>

00:00:05.960 --> 00:00:05.970 align:start position:0%
to compute the predictions the lowercase
 

00:00:05.970 --> 00:00:10.040 align:start position:0%
to compute the predictions the lowercase
A's<00:00:06.589><c> for</c><00:00:07.589><c> an</c><00:00:07.830><c> entire</c><00:00:08.309><c> training</c><00:00:08.610><c> set</c><00:00:08.940><c> all</c><00:00:09.210><c> sort</c>

00:00:10.040 --> 00:00:10.050 align:start position:0%
A's for an entire training set all sort
 

00:00:10.050 --> 00:00:12.350 align:start position:0%
A's for an entire training set all sort
of<00:00:10.110><c> at</c><00:00:10.290><c> the</c><00:00:10.559><c> same</c><00:00:10.769><c> time</c><00:00:11.099><c> in</c><00:00:11.550><c> this</c><00:00:11.940><c> video</c><00:00:12.269><c> you</c>

00:00:12.350 --> 00:00:12.360 align:start position:0%
of at the same time in this video you
 

00:00:12.360 --> 00:00:14.270 align:start position:0%
of at the same time in this video you
see<00:00:12.780><c> how</c><00:00:12.990><c> you</c><00:00:13.049><c> can</c><00:00:13.259><c> use</c><00:00:13.410><c> vectorization</c><00:00:13.799><c> to</c>

00:00:14.270 --> 00:00:14.280 align:start position:0%
see how you can use vectorization to
 

00:00:14.280 --> 00:00:17.060 align:start position:0%
see how you can use vectorization to
also<00:00:14.730><c> perform</c><00:00:15.210><c> the</c><00:00:15.660><c> gradient</c><00:00:16.350><c> computations</c>

00:00:17.060 --> 00:00:17.070 align:start position:0%
also perform the gradient computations
 

00:00:17.070 --> 00:00:19.760 align:start position:0%
also perform the gradient computations
for<00:00:17.520><c> all</c><00:00:17.699><c> M</c><00:00:17.910><c> training</c><00:00:18.420><c> examples</c><00:00:18.529><c> again</c><00:00:19.529><c> all</c>

00:00:19.760 --> 00:00:19.770 align:start position:0%
for all M training examples again all
 

00:00:19.770 --> 00:00:22.130 align:start position:0%
for all M training examples again all
sort<00:00:20.189><c> of</c><00:00:20.250><c> at</c><00:00:20.369><c> the</c><00:00:20.400><c> same</c><00:00:20.490><c> time</c><00:00:20.910><c> and</c><00:00:21.180><c> then</c><00:00:21.840><c> at</c><00:00:22.020><c> the</c>

00:00:22.130 --> 00:00:22.140 align:start position:0%
sort of at the same time and then at the
 

00:00:22.140 --> 00:00:23.540 align:start position:0%
sort of at the same time and then at the
end<00:00:22.289><c> of</c><00:00:22.380><c> this</c><00:00:22.470><c> video</c><00:00:22.800><c> we'll</c><00:00:23.039><c> pull</c><00:00:23.340><c> all</c>

00:00:23.540 --> 00:00:23.550 align:start position:0%
end of this video we'll pull all
 

00:00:23.550 --> 00:00:26.240 align:start position:0%
end of this video we'll pull all
together<00:00:23.760><c> and</c><00:00:24.210><c> show</c><00:00:24.689><c> how</c><00:00:25.019><c> you</c><00:00:25.050><c> can</c><00:00:25.380><c> derive</c><00:00:25.980><c> a</c>

00:00:26.240 --> 00:00:26.250 align:start position:0%
together and show how you can derive a
 

00:00:26.250 --> 00:00:28.000 align:start position:0%
together and show how you can derive a
very<00:00:26.550><c> efficient</c><00:00:27.150><c> implementation</c><00:00:27.930><c> of</c>

00:00:28.000 --> 00:00:28.010 align:start position:0%
very efficient implementation of
 

00:00:28.010 --> 00:00:30.800 align:start position:0%
very efficient implementation of
logistic<00:00:29.010><c> regression</c><00:00:29.460><c> so</c><00:00:29.880><c> you</c><00:00:29.939><c> remember</c><00:00:30.779><c> that</c>

00:00:30.800 --> 00:00:30.810 align:start position:0%
logistic regression so you remember that
 

00:00:30.810 --> 00:00:33.080 align:start position:0%
logistic regression so you remember that
for<00:00:31.170><c> the</c><00:00:31.260><c> gradient</c><00:00:31.560><c> computation</c><00:00:32.430><c> what</c><00:00:32.730><c> we</c><00:00:32.850><c> did</c>

00:00:33.080 --> 00:00:33.090 align:start position:0%
for the gradient computation what we did
 

00:00:33.090 --> 00:00:35.810 align:start position:0%
for the gradient computation what we did
was<00:00:33.329><c> we</c><00:00:33.360><c> computed</c><00:00:34.079><c> DZ</c><00:00:35.010><c> one</c><00:00:35.250><c> for</c><00:00:35.520><c> the</c><00:00:35.610><c> first</c>

00:00:35.810 --> 00:00:35.820 align:start position:0%
was we computed DZ one for the first
 

00:00:35.820 --> 00:00:40.549 align:start position:0%
was we computed DZ one for the first
example<00:00:36.570><c> riskily</c><00:00:37.410><c> a</c><00:00:37.649><c> one</c><00:00:38.250><c> minus</c><00:00:39.120><c> y</c><00:00:40.050><c> one</c><00:00:40.350><c> and</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
example riskily a one minus y one and
 

00:00:40.559 --> 00:00:50.049 align:start position:0%
example riskily a one minus y one and
then<00:00:41.430><c> DZ</c><00:00:41.969><c> 2</c><00:00:42.590><c> equals</c><00:00:43.590><c> a</c><00:00:43.860><c> 2</c><00:00:46.010><c> minus</c><00:00:47.010><c> y</c><00:00:47.250><c> 2</c><00:00:48.030><c> and</c><00:00:48.710><c> so</c><00:00:49.710><c> on</c>

00:00:50.049 --> 00:00:50.059 align:start position:0%
then DZ 2 equals a 2 minus y 2 and so on
 

00:00:50.059 --> 00:00:54.920 align:start position:0%
then DZ 2 equals a 2 minus y 2 and so on
so<00:00:51.059><c> on</c><00:00:51.390><c> and</c><00:00:52.579><c> so</c><00:00:53.579><c> on</c><00:00:53.610><c> for</c><00:00:53.969><c> all</c><00:00:54.000><c> my</c><00:00:54.629><c> training</c>

00:00:54.920 --> 00:00:54.930 align:start position:0%
so on and so on for all my training
 

00:00:54.930 --> 00:00:57.650 align:start position:0%
so on and so on for all my training
examples<00:00:55.550><c> so</c><00:00:56.550><c> what</c><00:00:56.910><c> we're</c><00:00:57.000><c> going</c><00:00:57.090><c> to</c><00:00:57.210><c> do</c><00:00:57.390><c> is</c>

00:00:57.650 --> 00:00:57.660 align:start position:0%
examples so what we're going to do is
 

00:00:57.660 --> 00:01:01.520 align:start position:0%
examples so what we're going to do is
define<00:00:57.870><c> a</c><00:00:58.140><c> new</c><00:00:59.039><c> variable</c><00:00:59.070><c> D</c><00:00:59.969><c> capital</c><00:01:00.449><c> Z</c><00:01:00.809><c> is</c>

00:01:01.520 --> 00:01:01.530 align:start position:0%
define a new variable D capital Z is
 

00:01:01.530 --> 00:01:10.520 align:start position:0%
define a new variable D capital Z is
going<00:01:01.800><c> to</c><00:01:01.920><c> be</c><00:01:02.539><c> DZ</c><00:01:03.539><c> 1</c><00:01:04.129><c> DZ</c><00:01:05.129><c> 2</c><00:01:06.409><c> right</c><00:01:07.409><c> DZ</c><00:01:08.010><c> m</c><00:01:09.530><c> again</c>

00:01:10.520 --> 00:01:10.530 align:start position:0%
going to be DZ 1 DZ 2 right DZ m again
 

00:01:10.530 --> 00:01:12.920 align:start position:0%
going to be DZ 1 DZ 2 right DZ m again
all<00:01:10.770><c> the</c><00:01:10.920><c> D</c><00:01:11.189><c> lowercase</c><00:01:11.850><c> D</c><00:01:12.060><c> variables</c><00:01:12.540><c> stacked</c>

00:01:12.920 --> 00:01:12.930 align:start position:0%
all the D lowercase D variables stacked
 

00:01:12.930 --> 00:01:15.940 align:start position:0%
all the D lowercase D variables stacked
horizontally<00:01:13.110><c> so</c><00:01:13.920><c> this</c><00:01:14.100><c> would</c><00:01:14.250><c> be</c><00:01:14.400><c> a</c><00:01:14.430><c> 1</c><00:01:15.330><c> by</c><00:01:15.570><c> M</c>

00:01:15.940 --> 00:01:15.950 align:start position:0%
horizontally so this would be a 1 by M
 

00:01:15.950 --> 00:01:19.580 align:start position:0%
horizontally so this would be a 1 by M
matrix<00:01:16.950><c> or</c><00:01:17.210><c> alternative</c><00:01:18.210><c> VA</c><00:01:18.420><c> M</c><00:01:19.049><c> dimensional</c>

00:01:19.580 --> 00:01:19.590 align:start position:0%
matrix or alternative VA M dimensional
 

00:01:19.590 --> 00:01:22.789 align:start position:0%
matrix or alternative VA M dimensional
real<00:01:19.799><c> vector</c><00:01:20.330><c> now</c><00:01:21.330><c> recall</c><00:01:21.840><c> that</c><00:01:21.869><c> from</c><00:01:22.590><c> the</c>

00:01:22.789 --> 00:01:22.799 align:start position:0%
real vector now recall that from the
 

00:01:22.799 --> 00:01:24.530 align:start position:0%
real vector now recall that from the
previous<00:01:23.040><c> slide</c><00:01:23.430><c> we'd</c><00:01:23.700><c> already</c><00:01:23.850><c> figured</c><00:01:24.119><c> out</c>

00:01:24.530 --> 00:01:24.540 align:start position:0%
previous slide we'd already figured out
 

00:01:24.540 --> 00:01:26.719 align:start position:0%
previous slide we'd already figured out
how<00:01:24.810><c> to</c><00:01:24.869><c> compute</c><00:01:25.320><c> capital</c><00:01:25.890><c> a</c><00:01:25.979><c> which</c><00:01:26.310><c> was</c><00:01:26.520><c> this</c>

00:01:26.719 --> 00:01:26.729 align:start position:0%
how to compute capital a which was this
 

00:01:26.729 --> 00:01:32.359 align:start position:0%
how to compute capital a which was this
a<00:01:26.939><c> 1</c><00:01:27.290><c> through</c><00:01:28.290><c> am</c><00:01:28.829><c> and</c><00:01:30.470><c> we</c><00:01:31.470><c> had</c><00:01:31.740><c> defined</c>

00:01:32.359 --> 00:01:32.369 align:start position:0%
a 1 through am and we had defined
 

00:01:32.369 --> 00:01:37.399 align:start position:0%
a 1 through am and we had defined
Capital<00:01:33.000><c> y</c><00:01:33.180><c> as</c><00:01:33.560><c> y</c><00:01:34.560><c> 1</c><00:01:34.759><c> through</c><00:01:35.759><c> ym</c><00:01:36.270><c> also</c><00:01:37.140><c> you</c>

00:01:37.399 --> 00:01:37.409 align:start position:0%
Capital y as y 1 through ym also you
 

00:01:37.409 --> 00:01:40.609 align:start position:0%
Capital y as y 1 through ym also you
know<00:01:37.560><c> stacked</c><00:01:37.860><c> horizontally</c><00:01:38.570><c> so</c><00:01:39.570><c> based</c><00:01:40.470><c> on</c>

00:01:40.609 --> 00:01:40.619 align:start position:0%
know stacked horizontally so based on
 

00:01:40.619 --> 00:01:44.270 align:start position:0%
know stacked horizontally so based on
these<00:01:40.920><c> definitions</c><00:01:41.340><c> um</c><00:01:42.500><c> maybe</c><00:01:43.500><c> you</c><00:01:43.710><c> could</c><00:01:43.770><c> see</c>

00:01:44.270 --> 00:01:44.280 align:start position:0%
these definitions um maybe you could see
 

00:01:44.280 --> 00:01:46.670 align:start position:0%
these definitions um maybe you could see
for<00:01:44.490><c> yourself</c><00:01:44.520><c> that</c><00:01:44.939><c> DZ</c><00:01:45.540><c> can</c><00:01:45.840><c> be</c><00:01:45.990><c> computed</c><00:01:46.470><c> as</c>

00:01:46.670 --> 00:01:46.680 align:start position:0%
for yourself that DZ can be computed as
 

00:01:46.680 --> 00:01:49.670 align:start position:0%
for yourself that DZ can be computed as
just<00:01:46.979><c> a</c><00:01:47.329><c> minus</c><00:01:48.329><c> y</c><00:01:48.509><c> because</c><00:01:48.990><c> this</c><00:01:49.350><c> is</c><00:01:49.409><c> going</c><00:01:49.560><c> to</c>

00:01:49.670 --> 00:01:49.680 align:start position:0%
just a minus y because this is going to
 

00:01:49.680 --> 00:01:52.999 align:start position:0%
just a minus y because this is going to
be<00:01:49.770><c> equal</c><00:01:50.070><c> to</c><00:01:50.100><c> now</c><00:01:51.060><c> a</c><00:01:51.299><c> 1</c><00:01:51.540><c> minus</c><00:01:51.930><c> y1</c><00:01:52.500><c> through</c><00:01:52.890><c> the</c>

00:01:52.999 --> 00:01:53.009 align:start position:0%
be equal to now a 1 minus y1 through the
 

00:01:53.009 --> 00:01:56.660 align:start position:0%
be equal to now a 1 minus y1 through the
first<00:01:53.310><c> element</c><00:01:53.759><c> a2</c><00:01:54.479><c> minus</c><00:01:55.200><c> y2</c><00:01:55.439><c> in</c><00:01:56.189><c> the</c><00:01:56.310><c> second</c>

00:01:56.660 --> 00:01:56.670 align:start position:0%
first element a2 minus y2 in the second
 

00:01:56.670 --> 00:02:00.950 align:start position:0%
first element a2 minus y2 in the second
element<00:01:56.790><c> and</c><00:01:57.240><c> so</c><00:01:57.960><c> on</c><00:01:58.170><c> and</c><00:01:58.740><c> so</c><00:01:59.430><c> and</c><00:01:59.759><c> so</c><00:02:00.659><c> this</c>

00:02:00.950 --> 00:02:00.960 align:start position:0%
element and so on and so and so this
 

00:02:00.960 --> 00:02:04.219 align:start position:0%
element and so on and so and so this
first<00:02:01.200><c> elements</c><00:02:01.829><c> a</c><00:02:01.950><c> 1</c><00:02:02.310><c> minus</c><00:02:02.579><c> y1</c><00:02:03.060><c> is</c><00:02:03.299><c> exactly</c>

00:02:04.219 --> 00:02:04.229 align:start position:0%
first elements a 1 minus y1 is exactly
 

00:02:04.229 --> 00:02:06.530 align:start position:0%
first elements a 1 minus y1 is exactly
the<00:02:04.680><c> definition</c><00:02:04.829><c> of</c><00:02:05.280><c> DZ</c><00:02:05.610><c> 1</c><00:02:05.850><c> the</c><00:02:06.180><c> second</c>

00:02:06.530 --> 00:02:06.540 align:start position:0%
the definition of DZ 1 the second
 

00:02:06.540 --> 00:02:10.369 align:start position:0%
the definition of DZ 1 the second
element<00:02:06.689><c> is</c><00:02:07.110><c> exactly</c><00:02:08.179><c> definitely</c><00:02:09.179><c> Z</c><00:02:09.360><c> 2</c><00:02:09.539><c> and</c><00:02:09.810><c> so</c>

00:02:10.369 --> 00:02:10.379 align:start position:0%
element is exactly definitely Z 2 and so
 

00:02:10.379 --> 00:02:11.690 align:start position:0%
element is exactly definitely Z 2 and so
on

00:02:11.690 --> 00:02:11.700 align:start position:0%
on
 

00:02:11.700 --> 00:02:14.240 align:start position:0%
on
so<00:02:12.150><c> with</c><00:02:12.450><c> just</c><00:02:12.750><c> one</c><00:02:13.260><c> line</c><00:02:13.440><c> of</c><00:02:13.470><c> code</c><00:02:13.620><c> you</c><00:02:14.099><c> can</c>

00:02:14.240 --> 00:02:14.250 align:start position:0%
so with just one line of code you can
 

00:02:14.250 --> 00:02:20.180 align:start position:0%
so with just one line of code you can
compute<00:02:14.700><c> all</c><00:02:14.880><c> of</c><00:02:15.450><c> this</c><00:02:17.300><c> at</c><00:02:18.300><c> the</c><00:02:18.480><c> same</c><00:02:18.630><c> time</c><00:02:19.190><c> now</c>

00:02:20.180 --> 00:02:20.190 align:start position:0%
compute all of this at the same time now
 

00:02:20.190 --> 00:02:24.350 align:start position:0%
compute all of this at the same time now
in<00:02:20.550><c> the</c><00:02:21.739><c> previous</c><00:02:22.739><c> implementation</c><00:02:23.360><c> we've</c>

00:02:24.350 --> 00:02:24.360 align:start position:0%
in the previous implementation we've
 

00:02:24.360 --> 00:02:26.420 align:start position:0%
in the previous implementation we've
gotten<00:02:24.750><c> rid</c><00:02:24.900><c> of</c><00:02:24.959><c> one</c><00:02:25.080><c> for</c><00:02:25.530><c> loop</c><00:02:25.709><c> already</c><00:02:26.099><c> but</c>

00:02:26.420 --> 00:02:26.430 align:start position:0%
gotten rid of one for loop already but
 

00:02:26.430 --> 00:02:30.530 align:start position:0%
gotten rid of one for loop already but
we<00:02:26.550><c> still</c><00:02:26.849><c> had</c><00:02:27.569><c> this</c><00:02:29.030><c> second</c><00:02:30.030><c> for</c><00:02:30.239><c> loop</c><00:02:30.390><c> over</c>

00:02:30.530 --> 00:02:30.540 align:start position:0%
we still had this second for loop over
 

00:02:30.540 --> 00:02:31.550 align:start position:0%
we still had this second for loop over
training<00:02:30.870><c> examples</c>

00:02:31.550 --> 00:02:31.560 align:start position:0%
training examples
 

00:02:31.560 --> 00:02:34.010 align:start position:0%
training examples
so<00:02:31.709><c> we</c><00:02:31.890><c> initialize</c><00:02:32.370><c> DW</c><00:02:33.000><c> to</c><00:02:33.180><c> zero</c><00:02:33.600><c> to</c><00:02:33.900><c> the</c>

00:02:34.010 --> 00:02:34.020 align:start position:0%
so we initialize DW to zero to the
 

00:02:34.020 --> 00:02:36.199 align:start position:0%
so we initialize DW to zero to the
vector<00:02:34.230><c> of</c><00:02:34.410><c> zeros</c><00:02:34.950><c> but</c><00:02:35.670><c> then</c><00:02:35.790><c> we</c><00:02:35.910><c> still</c><00:02:36.150><c> have</c>

00:02:36.199 --> 00:02:36.209 align:start position:0%
vector of zeros but then we still have
 

00:02:36.209 --> 00:02:38.720 align:start position:0%
vector of zeros but then we still have
to<00:02:36.510><c> loop</c><00:02:36.720><c> over</c><00:02:36.930><c> training</c><00:02:37.860><c> examples</c><00:02:38.400><c> where</c><00:02:38.670><c> we</c>

00:02:38.720 --> 00:02:38.730 align:start position:0%
to loop over training examples where we
 

00:02:38.730 --> 00:02:43.280 align:start position:0%
to loop over training examples where we
have<00:02:38.760><c> PW</c><00:02:39.450><c> plus</c><00:02:39.480><c> equals</c><00:02:40.260><c> x1</c><00:02:40.769><c> times</c><00:02:41.510><c> d</c><00:02:42.510><c> z1</c><00:02:42.780><c> for</c>

00:02:43.280 --> 00:02:43.290 align:start position:0%
have PW plus equals x1 times d z1 for
 

00:02:43.290 --> 00:02:46.370 align:start position:0%
have PW plus equals x1 times d z1 for
the<00:02:43.650><c> first</c><00:02:43.830><c> training</c><00:02:44.010><c> example</c><00:02:44.840><c> DW</c><00:02:45.840><c> plus</c>

00:02:46.370 --> 00:02:46.380 align:start position:0%
the first training example DW plus
 

00:02:46.380 --> 00:02:51.050 align:start position:0%
the first training example DW plus
equals<00:02:46.860><c> x2</c><00:02:47.959><c> DZ</c><00:02:48.959><c> 2</c><00:02:49.230><c> and</c><00:02:49.620><c> so</c><00:02:50.100><c> on</c><00:02:50.130><c> so</c><00:02:50.340><c> we</c><00:02:50.640><c> do</c><00:02:50.790><c> the</c><00:02:50.910><c> M</c>

00:02:51.050 --> 00:02:51.060 align:start position:0%
equals x2 DZ 2 and so on so we do the M
 

00:02:51.060 --> 00:02:54.350 align:start position:0%
equals x2 DZ 2 and so on so we do the M
times<00:02:51.390><c> and</c><00:02:51.690><c> then</c><00:02:51.810><c> you</c><00:02:52.380><c> know</c><00:02:52.440><c> DW</c><00:02:53.040><c> 2y</c><00:02:53.400><c> equals</c><00:02:53.880><c> by</c>

00:02:54.350 --> 00:02:54.360 align:start position:0%
times and then you know DW 2y equals by
 

00:02:54.360 --> 00:02:57.470 align:start position:0%
times and then you know DW 2y equals by
M<00:02:54.569><c> and</c><00:02:54.870><c> similarly</c><00:02:55.860><c> for</c><00:02:56.160><c> B</c><00:02:56.370><c> write</c><00:02:56.819><c> DP</c><00:02:57.150><c> was</c>

00:02:57.470 --> 00:02:57.480 align:start position:0%
M and similarly for B write DP was
 

00:02:57.480 --> 00:03:01.340 align:start position:0%
M and similarly for B write DP was
initialized<00:02:57.959><c> as</c><00:02:58.230><c> 0</c><00:02:58.709><c> and</c><00:02:59.160><c> then</c><00:02:59.610><c> DB</c><00:03:00.060><c> plus</c><00:03:00.900><c> equals</c>

00:03:01.340 --> 00:03:01.350 align:start position:0%
initialized as 0 and then DB plus equals
 

00:03:01.350 --> 00:03:08.660 align:start position:0%
initialized as 0 and then DB plus equals
V<00:03:01.470><c> Z</c><00:03:02.220><c> 1</c><00:03:02.900><c> DP</c><00:03:03.900><c> plus</c><00:03:04.230><c> equals</c><00:03:04.680><c> D</c><00:03:05.100><c> Z</c><00:03:05.340><c> 2</c><00:03:06.150><c> down</c><00:03:07.080><c> to</c><00:03:07.670><c> you</c>

00:03:08.660 --> 00:03:08.670 align:start position:0%
V Z 1 DP plus equals D Z 2 down to you
 

00:03:08.670 --> 00:03:12.590 align:start position:0%
V Z 1 DP plus equals D Z 2 down to you
know<00:03:08.819><c> DZ</c><00:03:09.630><c> m</c><00:03:10.230><c> and</c><00:03:10.950><c> then</c><00:03:11.310><c> D</c><00:03:11.489><c> be</c><00:03:11.700><c> divided</c><00:03:12.239><c> equally</c>

00:03:12.590 --> 00:03:12.600 align:start position:0%
know DZ m and then D be divided equally
 

00:03:12.600 --> 00:03:15.350 align:start position:0%
know DZ m and then D be divided equally
M<00:03:12.989><c> so</c><00:03:13.500><c> that's</c><00:03:13.709><c> what</c><00:03:13.860><c> we</c><00:03:13.980><c> had</c><00:03:14.190><c> in</c><00:03:14.220><c> the</c><00:03:14.730><c> previous</c>

00:03:15.350 --> 00:03:15.360 align:start position:0%
M so that's what we had in the previous
 

00:03:15.360 --> 00:03:17.810 align:start position:0%
M so that's what we had in the previous
implementation<00:03:16.040><c> we'd</c><00:03:17.040><c> already</c><00:03:17.220><c> gotten</c><00:03:17.670><c> rid</c>

00:03:17.810 --> 00:03:17.820 align:start position:0%
implementation we'd already gotten rid
 

00:03:17.820 --> 00:03:20.690 align:start position:0%
implementation we'd already gotten rid
of<00:03:17.970><c> one</c><00:03:18.060><c> for</c><00:03:18.450><c> loop</c><00:03:18.630><c> so</c><00:03:18.660><c> le</c><00:03:19.260><c> is</c><00:03:19.320><c> now</c><00:03:19.549><c> DW</c><00:03:20.549><c> is</c><00:03:20.670><c> a</c>

00:03:20.690 --> 00:03:20.700 align:start position:0%
of one for loop so le is now DW is a
 

00:03:20.700 --> 00:03:23.140 align:start position:0%
of one for loop so le is now DW is a
vector<00:03:21.150><c> and</c><00:03:21.180><c> we</c><00:03:21.510><c> went</c><00:03:21.750><c> separately</c><00:03:22.260><c> you</c><00:03:22.980><c> know</c>

00:03:23.140 --> 00:03:23.150 align:start position:0%
vector and we went separately you know
 

00:03:23.150 --> 00:03:27.080 align:start position:0%
vector and we went separately you know
updating<00:03:24.150><c> DW</c><00:03:24.660><c> 1</c><00:03:24.840><c> DW</c><00:03:25.380><c> 2</c><00:03:25.530><c> and</c><00:03:25.739><c> so</c><00:03:25.859><c> on</c><00:03:25.970><c> so</c><00:03:26.970><c> we've</c>

00:03:27.080 --> 00:03:27.090 align:start position:0%
updating DW 1 DW 2 and so on so we've
 

00:03:27.090 --> 00:03:29.780 align:start position:0%
updating DW 1 DW 2 and so on so we've
gotten<00:03:27.420><c> rid</c><00:03:27.540><c> of</c><00:03:27.600><c> that</c><00:03:27.720><c> already</c><00:03:28.430><c> but</c><00:03:29.430><c> we</c><00:03:29.549><c> still</c>

00:03:29.780 --> 00:03:29.790 align:start position:0%
gotten rid of that already but we still
 

00:03:29.790 --> 00:03:32.420 align:start position:0%
gotten rid of that already but we still
have<00:03:29.970><c> a</c><00:03:30.000><c> for</c><00:03:30.269><c> loop</c><00:03:30.420><c> over</c><00:03:30.630><c> the</c><00:03:30.900><c> m</c><00:03:31.260><c> examples</c><00:03:32.250><c> in</c>

00:03:32.420 --> 00:03:32.430 align:start position:0%
have a for loop over the m examples in
 

00:03:32.430 --> 00:03:34.310 align:start position:0%
have a for loop over the m examples in
the<00:03:32.519><c> training</c><00:03:32.850><c> set</c><00:03:33.060><c> so</c><00:03:33.750><c> let's</c><00:03:34.019><c> think</c><00:03:34.140><c> these</c>

00:03:34.310 --> 00:03:34.320 align:start position:0%
the training set so let's think these
 

00:03:34.320 --> 00:03:37.039 align:start position:0%
the training set so let's think these
operations<00:03:34.950><c> in</c><00:03:35.160><c> vectorize</c><00:03:35.640><c> them</c><00:03:35.900><c> here's</c><00:03:36.900><c> what</c>

00:03:37.039 --> 00:03:37.049 align:start position:0%
operations in vectorize them here's what
 

00:03:37.049 --> 00:03:38.930 align:start position:0%
operations in vectorize them here's what
we<00:03:37.140><c> can</c><00:03:37.260><c> do</c><00:03:37.470><c> for</c><00:03:38.340><c> the</c><00:03:38.489><c> vectorized</c>

00:03:38.930 --> 00:03:38.940 align:start position:0%
we can do for the vectorized
 

00:03:38.940 --> 00:03:41.270 align:start position:0%
we can do for the vectorized
implementation<00:03:39.810><c> of</c><00:03:39.989><c> DB</c><00:03:40.440><c> what</c><00:03:40.829><c> is</c><00:03:40.890><c> doing</c><00:03:41.190><c> is</c>

00:03:41.270 --> 00:03:41.280 align:start position:0%
implementation of DB what is doing is
 

00:03:41.280 --> 00:03:43.430 align:start position:0%
implementation of DB what is doing is
basically<00:03:41.579><c> summing</c><00:03:42.060><c> up</c><00:03:42.329><c> all</c><00:03:43.019><c> of</c><00:03:43.320><c> these</c>

00:03:43.430 --> 00:03:43.440 align:start position:0%
basically summing up all of these
 

00:03:43.440 --> 00:03:48.830 align:start position:0%
basically summing up all of these
disease<00:03:44.430><c> and</c><00:03:44.730><c> then</c><00:03:44.850><c> dividing</c><00:03:45.390><c> by</c><00:03:46.140><c> M</c><00:03:46.459><c> so</c><00:03:47.540><c> DB</c><00:03:48.540><c> is</c>

00:03:48.830 --> 00:03:48.840 align:start position:0%
disease and then dividing by M so DB is
 

00:03:48.840 --> 00:03:52.370 align:start position:0%
disease and then dividing by M so DB is
basically<00:03:49.260><c> 1</c><00:03:50.130><c> over</c><00:03:50.370><c> m</c><00:03:50.519><c> sum</c><00:03:51.480><c> from</c><00:03:51.720><c> I</c><00:03:51.900><c> equals</c><00:03:52.290><c> 1</c>

00:03:52.370 --> 00:03:52.380 align:start position:0%
basically 1 over m sum from I equals 1
 

00:03:52.380 --> 00:03:57.259 align:start position:0%
basically 1 over m sum from I equals 1
through<00:03:52.560><c> m</c><00:03:53.100><c> of</c><00:03:53.510><c> DZ</c><00:03:54.510><c> I</c><00:03:54.540><c> and</c><00:03:55.910><c> well</c><00:03:56.910><c> all</c><00:03:57.090><c> the</c>

00:03:57.259 --> 00:03:57.269 align:start position:0%
through m of DZ I and well all the
 

00:03:57.269 --> 00:04:01.699 align:start position:0%
through m of DZ I and well all the
disease<00:03:57.720><c> are</c><00:03:58.049><c> in</c><00:03:58.260><c> that</c><00:03:58.590><c> a</c><00:03:59.269><c> row</c><00:04:00.269><c> vector</c><00:04:00.720><c> and</c><00:04:00.930><c> so</c>

00:04:01.699 --> 00:04:01.709 align:start position:0%
disease are in that a row vector and so
 

00:04:01.709 --> 00:04:04.490 align:start position:0%
disease are in that a row vector and so
in<00:04:02.040><c> Python</c><00:04:02.670><c> what</c><00:04:03.209><c> you</c><00:04:03.359><c> do</c><00:04:03.600><c> is</c><00:04:03.750><c> in</c><00:04:03.900><c> Flynn</c><00:04:04.170><c> you</c>

00:04:04.490 --> 00:04:04.500 align:start position:0%
in Python what you do is in Flynn you
 

00:04:04.500 --> 00:04:11.840 align:start position:0%
in Python what you do is in Flynn you
know<00:04:04.590><c> 1</c><00:04:05.010><c> over</c><00:04:05.220><c> m</c><00:04:05.420><c> times</c><00:04:06.420><c> n</c><00:04:06.810><c> P</c><00:04:07.700><c> dot</c><00:04:08.810><c> sum</c><00:04:09.810><c> of</c><00:04:10.170><c> D</c><00:04:10.980><c> Z</c>

00:04:11.840 --> 00:04:11.850 align:start position:0%
know 1 over m times n P dot sum of D Z
 

00:04:11.850 --> 00:04:14.210 align:start position:0%
know 1 over m times n P dot sum of D Z
right<00:04:12.209><c> so</c><00:04:12.420><c> just</c><00:04:12.600><c> take</c><00:04:12.780><c> the</c><00:04:12.810><c> variable</c><00:04:13.410><c> and</c><00:04:13.620><c> call</c>

00:04:14.210 --> 00:04:14.220 align:start position:0%
right so just take the variable and call
 

00:04:14.220 --> 00:04:17.810 align:start position:0%
right so just take the variable and call
the<00:04:14.370><c> NP</c><00:04:14.819><c> but</c><00:04:15.329><c> some</c><00:04:15.919><c> function</c><00:04:16.919><c> on</c><00:04:17.070><c> it</c><00:04:17.250><c> and</c><00:04:17.489><c> that</c>

00:04:17.810 --> 00:04:17.820 align:start position:0%
the NP but some function on it and that
 

00:04:17.820 --> 00:04:19.870 align:start position:0%
the NP but some function on it and that
would<00:04:17.970><c> give</c><00:04:18.150><c> you</c><00:04:18.299><c> DB</c>

00:04:19.870 --> 00:04:19.880 align:start position:0%
would give you DB
 

00:04:19.880 --> 00:04:23.710 align:start position:0%
would give you DB
how<00:04:20.000><c> about</c><00:04:20.150><c> DW</c><00:04:20.840><c> I'll</c><00:04:21.620><c> just</c><00:04:21.830><c> write</c><00:04:22.190><c> out</c><00:04:22.720><c> the</c>

00:04:23.710 --> 00:04:23.720 align:start position:0%
how about DW I'll just write out the
 

00:04:23.720 --> 00:04:25.510 align:start position:0%
how about DW I'll just write out the
correct<00:04:24.020><c> equations</c><00:04:24.560><c> you</c><00:04:24.740><c> can</c><00:04:24.890><c> verify</c><00:04:25.280><c> the</c>

00:04:25.510 --> 00:04:25.520 align:start position:0%
correct equations you can verify the
 

00:04:25.520 --> 00:04:28.350 align:start position:0%
correct equations you can verify the
right<00:04:25.880><c> thing</c><00:04:26.060><c> to</c><00:04:26.150><c> do</c><00:04:26.300><c> DW</c><00:04:26.900><c> x</c><00:04:27.050><c> will</c><00:04:27.260><c> be</c><00:04:27.410><c> one</c><00:04:27.620><c> of</c><00:04:27.770><c> M</c>

00:04:28.350 --> 00:04:28.360 align:start position:0%
right thing to do DW x will be one of M
 

00:04:28.360 --> 00:04:33.040 align:start position:0%
right thing to do DW x will be one of M
times<00:04:29.360><c> the</c><00:04:29.600><c> matrix</c><00:04:29.720><c> x</c><00:04:30.200><c> times</c><00:04:30.620><c> DZ</c><00:04:32.050><c> transpose</c>

00:04:33.040 --> 00:04:33.050 align:start position:0%
times the matrix x times DZ transpose
 

00:04:33.050 --> 00:04:37.020 align:start position:0%
times the matrix x times DZ transpose
and<00:04:34.120><c> to</c><00:04:35.120><c> kind</c><00:04:35.420><c> of</c><00:04:35.450><c> see</c><00:04:35.870><c> why</c><00:04:36.080><c> that's</c><00:04:36.350><c> the</c><00:04:36.530><c> case</c>

00:04:37.020 --> 00:04:37.030 align:start position:0%
and to kind of see why that's the case
 

00:04:37.030 --> 00:04:40.720 align:start position:0%
and to kind of see why that's the case
this<00:04:38.030><c> is</c><00:04:38.090><c> equal</c><00:04:38.660><c> to</c><00:04:38.690><c> one</c><00:04:39.620><c> of</c><00:04:39.650><c> M</c><00:04:40.010><c> then</c><00:04:40.550><c> the</c>

00:04:40.720 --> 00:04:40.730 align:start position:0%
this is equal to one of M then the
 

00:04:40.730 --> 00:04:44.350 align:start position:0%
this is equal to one of M then the
matrix<00:04:40.910><c> X</c><00:04:41.360><c> is</c><00:04:41.540><c> X</c><00:04:41.840><c> 1</c><00:04:42.110><c> through</c><00:04:43.100><c> X</c><00:04:43.340><c> M</c><00:04:43.610><c> right</c>

00:04:44.350 --> 00:04:44.360 align:start position:0%
matrix X is X 1 through X M right
 

00:04:44.360 --> 00:04:48.280 align:start position:0%
matrix X is X 1 through X M right
stacked<00:04:44.810><c> up</c><00:04:45.050><c> in</c><00:04:45.370><c> columns</c><00:04:46.370><c> like</c><00:04:46.520><c> that</c><00:04:46.760><c> and</c><00:04:47.290><c> DZ</c>

00:04:48.280 --> 00:04:48.290 align:start position:0%
stacked up in columns like that and DZ
 

00:04:48.290 --> 00:04:52.980 align:start position:0%
stacked up in columns like that and DZ
transpose<00:04:48.890><c> is</c><00:04:49.070><c> going</c><00:04:49.100><c> to</c><00:04:49.310><c> be</c><00:04:49.600><c> DZ</c><00:04:50.600><c> one</c><00:04:51.040><c> down</c><00:04:52.040><c> to</c>

00:04:52.980 --> 00:04:52.990 align:start position:0%
transpose is going to be DZ one down to
 

00:04:52.990 --> 00:04:57.310 align:start position:0%
transpose is going to be DZ one down to
DZ<00:04:53.990><c> m</c><00:04:54.230><c> like</c><00:04:55.220><c> so</c><00:04:55.460><c> and</c><00:04:55.760><c> so</c><00:04:56.690><c> if</c><00:04:56.870><c> you</c><00:04:56.960><c> figure</c><00:04:57.170><c> out</c>

00:04:57.310 --> 00:04:57.320 align:start position:0%
DZ m like so and so if you figure out
 

00:04:57.320 --> 00:05:00.370 align:start position:0%
DZ m like so and so if you figure out
what<00:04:57.560><c> this</c><00:04:57.770><c> matrix</c><00:04:58.190><c> times</c><00:04:58.550><c> this</c><00:04:58.850><c> vector</c><00:04:59.380><c> works</c>

00:05:00.370 --> 00:05:00.380 align:start position:0%
what this matrix times this vector works
 

00:05:00.380 --> 00:05:01.990 align:start position:0%
what this matrix times this vector works
out<00:05:00.560><c> to</c><00:05:00.710><c> be</c><00:05:00.740><c> this</c><00:05:01.100><c> turns</c><00:05:01.310><c> out</c><00:05:01.490><c> to</c><00:05:01.550><c> be</c><00:05:01.700><c> one</c><00:05:01.970><c> over</c>

00:05:01.990 --> 00:05:02.000 align:start position:0%
out to be this turns out to be one over
 

00:05:02.000 --> 00:05:10.260 align:start position:0%
out to be this turns out to be one over
m<00:05:02.390><c> times</c><00:05:04.000><c> X</c><00:05:05.000><c> 1</c><00:05:05.390><c> DZ</c><00:05:05.990><c> 1</c><00:05:07.390><c> plus</c><00:05:08.390><c> dot</c><00:05:08.720><c> dot</c><00:05:08.750><c> dot</c><00:05:08.930><c> plus</c>

00:05:10.260 --> 00:05:10.270 align:start position:0%
m times X 1 DZ 1 plus dot dot dot plus
 

00:05:10.270 --> 00:05:16.720 align:start position:0%
m times X 1 DZ 1 plus dot dot dot plus
XM<00:05:12.010><c> DZ</c><00:05:13.010><c> m</c><00:05:13.480><c> right</c><00:05:14.480><c> and</c><00:05:14.660><c> so</c><00:05:14.870><c> this</c><00:05:15.170><c> is</c><00:05:15.440><c> a</c><00:05:15.470><c> n</c><00:05:16.070><c> by</c><00:05:16.400><c> 1</c>

00:05:16.720 --> 00:05:16.730 align:start position:0%
XM DZ m right and so this is a n by 1
 

00:05:16.730 --> 00:05:20.890 align:start position:0%
XM DZ m right and so this is a n by 1
vector<00:05:17.140><c> and</c><00:05:18.160><c> this</c><00:05:19.160><c> is</c><00:05:19.220><c> what</c><00:05:19.670><c> you</c><00:05:20.330><c> actually</c><00:05:20.540><c> end</c>

00:05:20.890 --> 00:05:20.900 align:start position:0%
vector and this is what you actually end
 

00:05:20.900 --> 00:05:23.560 align:start position:0%
vector and this is what you actually end
up<00:05:21.050><c> with</c><00:05:21.320><c> what</c><00:05:21.620><c> DW</c><00:05:22.190><c> because</c><00:05:22.460><c> DW</c><00:05:23.000><c> was</c><00:05:23.210><c> taking</c>

00:05:23.560 --> 00:05:23.570 align:start position:0%
up with what DW because DW was taking
 

00:05:23.570 --> 00:05:26.170 align:start position:0%
up with what DW because DW was taking
these<00:05:23.720><c> you</c><00:05:24.470><c> know</c><00:05:24.530><c> x</c><00:05:24.740><c> ID</c><00:05:25.040><c> zi</c><00:05:25.460><c> and</c><00:05:25.760><c> adding</c><00:05:26.030><c> them</c>

00:05:26.170 --> 00:05:26.180 align:start position:0%
these you know x ID zi and adding them
 

00:05:26.180 --> 00:05:27.930 align:start position:0%
these you know x ID zi and adding them
up<00:05:26.210><c> and</c><00:05:26.570><c> so</c><00:05:26.690><c> that's</c><00:05:26.870><c> what</c><00:05:27.110><c> exactly</c><00:05:27.200><c> this</c>

00:05:27.930 --> 00:05:27.940 align:start position:0%
up and so that's what exactly this
 

00:05:27.940 --> 00:05:30.940 align:start position:0%
up and so that's what exactly this
matrix<00:05:28.940><c> vector</c><00:05:29.600><c> multiplication</c><00:05:30.260><c> is</c><00:05:30.680><c> doing</c>

00:05:30.940 --> 00:05:30.950 align:start position:0%
matrix vector multiplication is doing
 

00:05:30.950 --> 00:05:33.520 align:start position:0%
matrix vector multiplication is doing
and<00:05:31.100><c> so</c><00:05:31.760><c> again</c><00:05:32.090><c> with</c><00:05:32.450><c> one</c><00:05:32.750><c> line</c><00:05:32.960><c> of</c><00:05:32.990><c> code</c><00:05:33.170><c> you</c>

00:05:33.520 --> 00:05:33.530 align:start position:0%
and so again with one line of code you
 

00:05:33.530 --> 00:05:36.730 align:start position:0%
and so again with one line of code you
can<00:05:33.710><c> compute</c><00:05:34.100><c> G</c><00:05:34.310><c> W</c><00:05:35.140><c> so</c><00:05:36.140><c> the</c><00:05:36.290><c> vectorized</c>

00:05:36.730 --> 00:05:36.740 align:start position:0%
can compute G W so the vectorized
 

00:05:36.740 --> 00:05:38.440 align:start position:0%
can compute G W so the vectorized
implementation<00:05:37.520><c> of</c><00:05:37.820><c> the</c><00:05:38.030><c> difference</c>

00:05:38.440 --> 00:05:38.450 align:start position:0%
implementation of the difference
 

00:05:38.450 --> 00:05:40.510 align:start position:0%
implementation of the difference
calculations<00:05:39.140><c> is</c><00:05:39.290><c> just</c><00:05:39.530><c> this</c><00:05:39.710><c> you</c><00:05:39.980><c> use</c><00:05:40.280><c> this</c>

00:05:40.510 --> 00:05:40.520 align:start position:0%
calculations is just this you use this
 

00:05:40.520 --> 00:05:44.920 align:start position:0%
calculations is just this you use this
line<00:05:40.820><c> to</c><00:05:41.690><c> implement</c><00:05:42.200><c> DB</c><00:05:42.800><c> and</c><00:05:43.450><c> use</c><00:05:44.450><c> this</c><00:05:44.660><c> line</c>

00:05:44.920 --> 00:05:44.930 align:start position:0%
line to implement DB and use this line
 

00:05:44.930 --> 00:05:48.850 align:start position:0%
line to implement DB and use this line
to<00:05:44.960><c> influence</c><00:05:45.950><c> DW</c><00:05:46.730><c> and</c><00:05:46.910><c> notice</c><00:05:47.780><c> that</c><00:05:47.860><c> without</c>

00:05:48.850 --> 00:05:48.860 align:start position:0%
to influence DW and notice that without
 

00:05:48.860 --> 00:05:50.620 align:start position:0%
to influence DW and notice that without
a<00:05:48.890><c> for</c><00:05:49.310><c> loop</c><00:05:49.490><c> over</c><00:05:49.640><c> the</c><00:05:49.820><c> training</c><00:05:50.210><c> sites</c><00:05:50.450><c> you</c>

00:05:50.620 --> 00:05:50.630 align:start position:0%
a for loop over the training sites you
 

00:05:50.630 --> 00:05:53.290 align:start position:0%
a for loop over the training sites you
can<00:05:50.810><c> now</c><00:05:50.930><c> compute</c><00:05:51.350><c> the</c><00:05:51.650><c> updates</c><00:05:52.070><c> you</c><00:05:52.640><c> want</c><00:05:52.910><c> to</c>

00:05:53.290 --> 00:05:53.300 align:start position:0%
can now compute the updates you want to
 

00:05:53.300 --> 00:05:56.500 align:start position:0%
can now compute the updates you want to
your<00:05:53.450><c> parameters</c><00:05:54.730><c> so</c><00:05:55.730><c> now</c><00:05:55.910><c> let's</c><00:05:56.240><c> put</c><00:05:56.450><c> all</c>

00:05:56.500 --> 00:05:56.510 align:start position:0%
your parameters so now let's put all
 

00:05:56.510 --> 00:05:58.660 align:start position:0%
your parameters so now let's put all
together<00:05:56.780><c> into</c><00:05:57.440><c> how</c><00:05:57.890><c> you</c><00:05:57.950><c> would</c><00:05:58.280><c> actually</c>

00:05:58.660 --> 00:05:58.670 align:start position:0%
together into how you would actually
 

00:05:58.670 --> 00:06:01.660 align:start position:0%
together into how you would actually
implement<00:05:58.970><c> logistic</c><00:05:59.900><c> regression</c><00:06:00.380><c> so</c><00:06:01.310><c> this</c><00:06:01.520><c> is</c>

00:06:01.660 --> 00:06:01.670 align:start position:0%
implement logistic regression so this is
 

00:06:01.670 --> 00:06:03.850 align:start position:0%
implement logistic regression so this is
our<00:06:01.790><c> original</c><00:06:01.910><c> highly</c><00:06:02.810><c> inefficient</c><00:06:03.080><c> non</c>

00:06:03.850 --> 00:06:03.860 align:start position:0%
our original highly inefficient non
 

00:06:03.860 --> 00:06:08.200 align:start position:0%
our original highly inefficient non
vectorized<00:06:04.460><c> implementation</c><00:06:05.240><c> where</c><00:06:06.140><c> um</c><00:06:07.210><c> so</c>

00:06:08.200 --> 00:06:08.210 align:start position:0%
vectorized implementation where um so
 

00:06:08.210 --> 00:06:09.460 align:start position:0%
vectorized implementation where um so
the<00:06:08.360><c> first</c><00:06:08.600><c> thing</c><00:06:08.750><c> we've</c><00:06:08.900><c> done</c><00:06:09.080><c> in</c><00:06:09.350><c> the</c>

00:06:09.460 --> 00:06:09.470 align:start position:0%
the first thing we've done in the
 

00:06:09.470 --> 00:06:10.960 align:start position:0%
the first thing we've done in the
previous<00:06:09.590><c> video</c><00:06:10.160><c> was</c><00:06:10.340><c> get</c><00:06:10.550><c> rid</c><00:06:10.670><c> of</c><00:06:10.760><c> this</c>

00:06:10.960 --> 00:06:10.970 align:start position:0%
previous video was get rid of this
 

00:06:10.970 --> 00:06:13.270 align:start position:0%
previous video was get rid of this
volume<00:06:11.300><c> right</c><00:06:11.720><c> so</c><00:06:11.930><c> instead</c><00:06:12.230><c> of</c><00:06:12.410><c> looping</c><00:06:12.980><c> over</c>

00:06:13.270 --> 00:06:13.280 align:start position:0%
volume right so instead of looping over
 

00:06:13.280 --> 00:06:16.600 align:start position:0%
volume right so instead of looping over
DW<00:06:14.060><c> 1</c><00:06:14.210><c> DW</c><00:06:14.450><c> 2</c><00:06:14.870><c> and</c><00:06:15.080><c> so</c><00:06:15.200><c> on</c><00:06:15.380><c> we</c><00:06:16.070><c> have</c><00:06:16.340><c> replaced</c>

00:06:16.600 --> 00:06:16.610 align:start position:0%
DW 1 DW 2 and so on we have replaced
 

00:06:16.610 --> 00:06:20.110 align:start position:0%
DW 1 DW 2 and so on we have replaced
this<00:06:17.000><c> with</c><00:06:17.060><c> a</c><00:06:17.660><c> vector</c><00:06:18.500><c> value</c><00:06:18.860><c> DW</c><00:06:19.490><c> and</c><00:06:19.730><c> just</c><00:06:20.030><c> say</c>

00:06:20.110 --> 00:06:20.120 align:start position:0%
this with a vector value DW and just say
 

00:06:20.120 --> 00:06:24.430 align:start position:0%
this with a vector value DW and just say
this<00:06:20.330><c> is</c><00:06:20.450><c> DW</c><00:06:21.020><c> +</c><00:06:21.830><c> equals</c><00:06:22.360><c> X</c><00:06:23.360><c> I</c><00:06:23.780><c> which</c><00:06:24.140><c> is</c><00:06:24.170><c> now</c><00:06:24.410><c> a</c>

00:06:24.430 --> 00:06:24.440 align:start position:0%
this is DW + equals X I which is now a
 

00:06:24.440 --> 00:06:30.280 align:start position:0%
this is DW + equals X I which is now a
vector<00:06:24.820><c> times</c><00:06:26.260><c> DZ</c><00:06:27.260><c> I</c><00:06:28.180><c> but</c><00:06:29.180><c> now</c><00:06:29.330><c> we'll</c><00:06:29.690><c> see</c><00:06:29.900><c> that</c>

00:06:30.280 --> 00:06:30.290 align:start position:0%
vector times DZ I but now we'll see that
 

00:06:30.290 --> 00:06:32.590 align:start position:0%
vector times DZ I but now we'll see that
we<00:06:30.500><c> can</c><00:06:30.620><c> also</c><00:06:30.770><c> get</c><00:06:31.340><c> rid</c><00:06:31.460><c> of</c><00:06:31.610><c> not</c><00:06:31.850><c> just</c><00:06:32.150><c> a</c><00:06:32.360><c> for</c>

00:06:32.590 --> 00:06:32.600 align:start position:0%
we can also get rid of not just a for
 

00:06:32.600 --> 00:06:33.709 align:start position:0%
we can also get rid of not just a for
loop<00:06:32.750><c> below</c><00:06:32.960><c> but</c><00:06:33.320><c> also</c>

00:06:33.709 --> 00:06:33.719 align:start position:0%
loop below but also
 

00:06:33.719 --> 00:06:37.249 align:start position:0%
loop below but also
get<00:06:34.589><c> rid</c><00:06:34.769><c> of</c><00:06:34.860><c> this</c><00:06:35.369><c> volume</c><00:06:35.869><c> so</c><00:06:36.869><c> here's</c><00:06:37.110><c> how</c><00:06:37.229><c> you</c>

00:06:37.249 --> 00:06:37.259 align:start position:0%
get rid of this volume so here's how you
 

00:06:37.259 --> 00:06:41.629 align:start position:0%
get rid of this volume so here's how you
do<00:06:37.529><c> it</c><00:06:38.089><c> so</c><00:06:39.739><c> using</c><00:06:40.739><c> what</c><00:06:40.979><c> we</c><00:06:41.129><c> had</c><00:06:41.339><c> from</c><00:06:41.549><c> the</c>

00:06:41.629 --> 00:06:41.639 align:start position:0%
do it so using what we had from the
 

00:06:41.639 --> 00:06:45.909 align:start position:0%
do it so using what we had from the
previous<00:06:42.179><c> slides</c><00:06:42.419><c> you</c><00:06:43.110><c> would</c><00:06:43.289><c> say</c><00:06:43.819><c> Capital</c><00:06:44.819><c> Z</c>

00:06:45.909 --> 00:06:45.919 align:start position:0%
previous slides you would say Capital Z
 

00:06:45.919 --> 00:06:51.189 align:start position:0%
previous slides you would say Capital Z
is<00:06:46.919><c> equal</c><00:06:47.459><c> to</c><00:06:47.669><c> W</c><00:06:48.119><c> transpose</c><00:06:48.659><c> X</c><00:06:48.899><c> plus</c><00:06:49.459><c> B</c><00:06:50.459><c> and</c>

00:06:51.189 --> 00:06:51.199 align:start position:0%
is equal to W transpose X plus B and
 

00:06:51.199 --> 00:06:55.149 align:start position:0%
is equal to W transpose X plus B and
code<00:06:52.199><c> you</c><00:06:52.379><c> write</c><00:06:52.589><c> is</c><00:06:52.939><c> capital</c><00:06:53.939><c> Z</c><00:06:54.089><c> equals</c><00:06:54.569><c> NP</c>

00:06:55.149 --> 00:06:55.159 align:start position:0%
code you write is capital Z equals NP
 

00:06:55.159 --> 00:07:02.529 align:start position:0%
code you write is capital Z equals NP
dot<00:06:56.389><c> W</c><00:06:57.389><c> transpose</c><00:06:58.199><c> X</c><00:06:58.499><c> plus</c><00:06:59.719><c> B</c><00:07:00.719><c> and</c><00:07:01.319><c> then</c><00:07:02.309><c> a</c>

00:07:02.529 --> 00:07:02.539 align:start position:0%
dot W transpose X plus B and then a
 

00:07:02.539 --> 00:07:07.699 align:start position:0%
dot W transpose X plus B and then a
equals<00:07:03.769><c> sigmoid</c><00:07:04.769><c> of</c><00:07:05.039><c> capital</c><00:07:05.759><c> T</c><00:07:06.529><c> so</c><00:07:07.529><c> you've</c>

00:07:07.699 --> 00:07:07.709 align:start position:0%
equals sigmoid of capital T so you've
 

00:07:07.709 --> 00:07:09.469 align:start position:0%
equals sigmoid of capital T so you've
now<00:07:07.889><c> computes</c><00:07:08.339><c> it</c><00:07:08.429><c> all</c><00:07:08.579><c> of</c><00:07:08.729><c> this</c><00:07:08.879><c> and</c><00:07:09.209><c> all</c><00:07:09.329><c> of</c>

00:07:09.469 --> 00:07:09.479 align:start position:0%
now computes it all of this and all of
 

00:07:09.479 --> 00:07:13.429 align:start position:0%
now computes it all of this and all of
this<00:07:09.689><c> for</c><00:07:10.559><c> all</c><00:07:11.159><c> the</c><00:07:11.309><c> values</c><00:07:11.459><c> of</c><00:07:11.669><c> iron</c><00:07:12.089><c> mix</c><00:07:13.050><c> on</c>

00:07:13.429 --> 00:07:13.439 align:start position:0%
this for all the values of iron mix on
 

00:07:13.439 --> 00:07:15.469 align:start position:0%
this for all the values of iron mix on
the<00:07:13.800><c> previous</c><00:07:14.279><c> line</c><00:07:14.369><c> we</c><00:07:14.849><c> said</c><00:07:15.119><c> you</c><00:07:15.329><c> would</c>

00:07:15.469 --> 00:07:15.479 align:start position:0%
the previous line we said you would
 

00:07:15.479 --> 00:07:19.790 align:start position:0%
the previous line we said you would
compute<00:07:16.189><c> DZ</c><00:07:17.189><c> equals</c><00:07:17.999><c> capital</c><00:07:18.360><c> A</c><00:07:18.800><c> minus</c>

00:07:19.790 --> 00:07:19.800 align:start position:0%
compute DZ equals capital A minus
 

00:07:19.800 --> 00:07:22.639 align:start position:0%
compute DZ equals capital A minus
capital<00:07:20.279><c> y</c><00:07:20.429><c> so</c><00:07:21.300><c> now</c><00:07:21.329><c> you</c><00:07:21.539><c> compute</c><00:07:21.989><c> all</c><00:07:22.229><c> of</c><00:07:22.529><c> this</c>

00:07:22.639 --> 00:07:22.649 align:start position:0%
capital y so now you compute all of this
 

00:07:22.649 --> 00:07:27.529 align:start position:0%
capital y so now you compute all of this
for<00:07:22.860><c> all</c><00:07:23.009><c> the</c><00:07:23.189><c> values</c><00:07:23.489><c> of</c><00:07:23.519><c> I</c><00:07:24.139><c> then</c><00:07:25.139><c> finally</c><00:07:26.539><c> DW</c>

00:07:27.529 --> 00:07:27.539 align:start position:0%
for all the values of I then finally DW
 

00:07:27.539 --> 00:07:35.569 align:start position:0%
for all the values of I then finally DW
equals<00:07:28.219><c> 1</c><00:07:29.219><c> over</c><00:07:29.249><c> M</c><00:07:29.669><c> X</c><00:07:31.009><c> D</c><00:07:32.009><c> Z</c><00:07:32.849><c> transpose</c><00:07:33.659><c> and</c><00:07:34.579><c> DB</c>

00:07:35.569 --> 00:07:35.579 align:start position:0%
equals 1 over M X D Z transpose and DB
 

00:07:35.579 --> 00:07:42.819 align:start position:0%
equals 1 over M X D Z transpose and DB
equals<00:07:36.919><c> one</c><00:07:37.919><c> of</c><00:07:38.039><c> em</c><00:07:38.449><c> you</c><00:07:39.449><c> know</c><00:07:39.569><c> and</c><00:07:39.779><c> P</c><00:07:40.110><c> dot</c><00:07:40.379><c> some</c>

00:07:42.819 --> 00:07:42.829 align:start position:0%
 
 

00:07:42.829 --> 00:07:47.479 align:start position:0%
 
DZ<00:07:44.509><c> so</c><00:07:45.509><c> you've</c><00:07:45.749><c> just</c><00:07:45.779><c> done</c><00:07:46.409><c> for</c><00:07:46.679><c> propagation</c>

00:07:47.479 --> 00:07:47.489 align:start position:0%
DZ so you've just done for propagation
 

00:07:47.489 --> 00:07:50.119 align:start position:0%
DZ so you've just done for propagation
and<00:07:47.699><c> back</c><00:07:47.759><c> propagation</c><00:07:48.559><c> really</c><00:07:49.559><c> computing</c>

00:07:50.119 --> 00:07:50.129 align:start position:0%
and back propagation really computing
 

00:07:50.129 --> 00:07:51.799 align:start position:0%
and back propagation really computing
the<00:07:50.249><c> predictions</c><00:07:50.729><c> and</c><00:07:51.059><c> computing</c><00:07:51.629><c> the</c>

00:07:51.799 --> 00:07:51.809 align:start position:0%
the predictions and computing the
 

00:07:51.809 --> 00:07:54.459 align:start position:0%
the predictions and computing the
derivatives<00:07:52.379><c> on</c><00:07:52.589><c> all</c><00:07:53.159><c> M</c><00:07:53.399><c> training</c><00:07:53.819><c> examples</c>

00:07:54.459 --> 00:07:54.469 align:start position:0%
derivatives on all M training examples
 

00:07:54.469 --> 00:07:58.189 align:start position:0%
derivatives on all M training examples
without<00:07:55.469><c> using</c><00:07:56.279><c> a</c><00:07:56.369><c> for</c><00:07:56.550><c> loop</c><00:07:56.579><c> and</c><00:07:57.059><c> so</c><00:07:57.959><c> the</c>

00:07:58.189 --> 00:07:58.199 align:start position:0%
without using a for loop and so the
 

00:07:58.199 --> 00:07:59.929 align:start position:0%
without using a for loop and so the
gradient<00:07:58.469><c> descent</c><00:07:58.949><c> update</c><00:07:59.099><c> then</c><00:07:59.519><c> would</c><00:07:59.759><c> be</c>

00:07:59.929 --> 00:07:59.939 align:start position:0%
gradient descent update then would be
 

00:07:59.939 --> 00:08:03.019 align:start position:0%
gradient descent update then would be
you<00:08:00.209><c> know</c><00:08:00.300><c> W</c><00:08:00.719><c> gets</c><00:08:01.019><c> updated</c><00:08:01.439><c> as</c><00:08:01.739><c> W</c><00:08:02.189><c> minus</c><00:08:02.759><c> the</c>

00:08:03.019 --> 00:08:03.029 align:start position:0%
you know W gets updated as W minus the
 

00:08:03.029 --> 00:08:05.929 align:start position:0%
you know W gets updated as W minus the
learning<00:08:03.360><c> rate</c><00:08:03.539><c> times</c><00:08:03.949><c> DW</c><00:08:04.949><c> is</c><00:08:05.159><c> just</c><00:08:05.489><c> computed</c>

00:08:05.929 --> 00:08:05.939 align:start position:0%
learning rate times DW is just computed
 

00:08:05.939 --> 00:08:09.350 align:start position:0%
learning rate times DW is just computed
above<00:08:06.179><c> and</c><00:08:06.479><c> B</c><00:08:06.779><c> is</c><00:08:07.469><c> updated</c><00:08:08.129><c> as</c><00:08:08.309><c> B</c><00:08:08.669><c> minus</c><00:08:08.939><c> a</c>

00:08:09.350 --> 00:08:09.360 align:start position:0%
above and B is updated as B minus a
 

00:08:09.360 --> 00:08:13.100 align:start position:0%
above and B is updated as B minus a
learning<00:08:09.719><c> rate</c><00:08:09.929><c> times</c><00:08:10.789><c> DB</c><00:08:11.789><c> so</c><00:08:12.509><c> sometimes</c><00:08:12.959><c> it's</c>

00:08:13.100 --> 00:08:13.110 align:start position:0%
learning rate times DB so sometimes it's
 

00:08:13.110 --> 00:08:14.959 align:start position:0%
learning rate times DB so sometimes it's
really<00:08:13.259><c> cool</c><00:08:13.619><c> inserted</c><00:08:14.219><c> it</c><00:08:14.339><c> notices</c><00:08:14.819><c> on</c>

00:08:14.959 --> 00:08:14.969 align:start position:0%
really cool inserted it notices on
 

00:08:14.969 --> 00:08:18.769 align:start position:0%
really cool inserted it notices on
assignment<00:08:16.909><c> but</c><00:08:17.909><c> I</c><00:08:17.939><c> guess</c><00:08:18.209><c> I</c><00:08:18.239><c> haven't</c><00:08:18.479><c> been</c>

00:08:18.769 --> 00:08:18.779 align:start position:0%
assignment but I guess I haven't been
 

00:08:18.779 --> 00:08:22.669 align:start position:0%
assignment but I guess I haven't been
totally<00:08:19.349><c> consistent</c><00:08:20.009><c> to</c><00:08:20.099><c> that</c><00:08:20.249><c> notation</c><00:08:21.679><c> but</c>

00:08:22.669 --> 00:08:22.679 align:start position:0%
totally consistent to that notation but
 

00:08:22.679 --> 00:08:25.519 align:start position:0%
totally consistent to that notation but
with<00:08:22.949><c> this</c><00:08:23.449><c> you</c><00:08:24.449><c> have</c><00:08:24.539><c> just</c><00:08:24.719><c> implemented</c><00:08:25.379><c> a</c>

00:08:25.519 --> 00:08:25.529 align:start position:0%
with this you have just implemented a
 

00:08:25.529 --> 00:08:27.859 align:start position:0%
with this you have just implemented a
single<00:08:25.889><c> iteration</c><00:08:26.039><c> of</c><00:08:26.669><c> gradient</c><00:08:26.789><c> descent</c><00:08:27.360><c> for</c>

00:08:27.859 --> 00:08:27.869 align:start position:0%
single iteration of gradient descent for
 

00:08:27.869 --> 00:08:31.309 align:start position:0%
single iteration of gradient descent for
logistic<00:08:28.439><c> regression</c><00:08:28.669><c> now</c><00:08:29.669><c> I</c><00:08:30.059><c> know</c><00:08:30.749><c> I</c><00:08:30.929><c> said</c>

00:08:31.309 --> 00:08:31.319 align:start position:0%
logistic regression now I know I said
 

00:08:31.319 --> 00:08:32.689 align:start position:0%
logistic regression now I know I said
that<00:08:31.349><c> we</c><00:08:31.589><c> should</c><00:08:31.769><c> get</c><00:08:31.949><c> rid</c><00:08:32.069><c> of</c><00:08:32.189><c> explicit</c>

00:08:32.689 --> 00:08:32.699 align:start position:0%
that we should get rid of explicit
 

00:08:32.699 --> 00:08:35.059 align:start position:0%
that we should get rid of explicit
folders<00:08:33.059><c> whenever</c><00:08:33.479><c> you</c><00:08:33.689><c> can</c><00:08:33.930><c> but</c><00:08:34.589><c> if</c><00:08:34.740><c> you</c><00:08:34.829><c> want</c>

00:08:35.059 --> 00:08:35.069 align:start position:0%
folders whenever you can but if you want
 

00:08:35.069 --> 00:08:38.179 align:start position:0%
folders whenever you can but if you want
to<00:08:35.219><c> implement</c><00:08:36.079><c> multiple</c><00:08:37.079><c> iterations</c><00:08:37.529><c> of</c>

00:08:38.179 --> 00:08:38.189 align:start position:0%
to implement multiple iterations of
 

00:08:38.189 --> 00:08:40.159 align:start position:0%
to implement multiple iterations of
gradient<00:08:38.250><c> descent</c><00:08:38.639><c> then</c><00:08:39.180><c> you</c><00:08:39.329><c> still</c><00:08:39.659><c> need</c><00:08:39.689><c> a</c>

00:08:40.159 --> 00:08:40.169 align:start position:0%
gradient descent then you still need a
 

00:08:40.169 --> 00:08:42.799 align:start position:0%
gradient descent then you still need a
for<00:08:40.949><c> loop</c><00:08:41.099><c> over</c><00:08:41.309><c> the</c><00:08:41.639><c> number</c><00:08:42.209><c> of</c><00:08:42.240><c> iterations</c>

00:08:42.799 --> 00:08:42.809 align:start position:0%
for loop over the number of iterations
 

00:08:42.809 --> 00:08:45.379 align:start position:0%
for loop over the number of iterations
so<00:08:42.959><c> you</c><00:08:43.110><c> if</c><00:08:43.469><c> you</c><00:08:43.559><c> want</c><00:08:43.740><c> to</c><00:08:43.800><c> have</c><00:08:44.009><c> a</c><00:08:44.389><c> thousand</c>

00:08:45.379 --> 00:08:45.389 align:start position:0%
so you if you want to have a thousand
 

00:08:45.389 --> 00:08:47.550 align:start position:0%
so you if you want to have a thousand
iterations<00:08:45.509><c> of</c><00:08:46.230><c> gradient</c>

00:08:47.550 --> 00:08:47.560 align:start position:0%
iterations of gradient
 

00:08:47.560 --> 00:08:52.019 align:start position:0%
iterations of gradient
you<00:08:48.040><c> might</c><00:08:48.249><c> still</c><00:08:48.610><c> need</c><00:08:48.819><c> a</c><00:08:49.740><c> full</c><00:08:50.740><c> loop</c><00:08:51.029><c> over</c>

00:08:52.019 --> 00:08:52.029 align:start position:0%
you might still need a full loop over
 

00:08:52.029 --> 00:08:54.269 align:start position:0%
you might still need a full loop over
the<00:08:52.060><c> iteration</c><00:08:52.779><c> number</c><00:08:52.810><c> because</c><00:08:53.800><c> and</c><00:08:53.980><c> also</c>

00:08:54.269 --> 00:08:54.279 align:start position:0%
the iteration number because and also
 

00:08:54.279 --> 00:08:56.220 align:start position:0%
the iteration number because and also
most<00:08:54.430><c> folders</c><00:08:54.910><c> like</c><00:08:55.120><c> that</c><00:08:55.300><c> and</c><00:08:55.600><c> I</c><00:08:55.779><c> don't</c><00:08:56.050><c> think</c>

00:08:56.220 --> 00:08:56.230 align:start position:0%
most folders like that and I don't think
 

00:08:56.230 --> 00:08:57.720 align:start position:0%
most folders like that and I don't think
there's<00:08:56.410><c> any</c><00:08:56.529><c> way</c><00:08:56.680><c> to</c><00:08:56.740><c> get</c><00:08:57.040><c> rid</c><00:08:57.189><c> of</c><00:08:57.310><c> that</c><00:08:57.490><c> for</c>

00:08:57.720 --> 00:08:57.730 align:start position:0%
there's any way to get rid of that for
 

00:08:57.730 --> 00:09:01.110 align:start position:0%
there's any way to get rid of that for
loop<00:08:58.920><c> but</c><00:08:59.920><c> I</c><00:08:59.949><c> do</c><00:09:00.040><c> think</c><00:09:00.310><c> it's</c><00:09:00.490><c> incredibly</c><00:09:00.910><c> cool</c>

00:09:01.110 --> 00:09:01.120 align:start position:0%
loop but I do think it's incredibly cool
 

00:09:01.120 --> 00:09:03.030 align:start position:0%
loop but I do think it's incredibly cool
that<00:09:01.389><c> you</c><00:09:01.449><c> can</c><00:09:01.569><c> implement</c><00:09:01.870><c> at</c><00:09:02.529><c> least</c><00:09:02.800><c> one</c>

00:09:03.030 --> 00:09:03.040 align:start position:0%
that you can implement at least one
 

00:09:03.040 --> 00:09:04.980 align:start position:0%
that you can implement at least one
iteration<00:09:03.610><c> of</c><00:09:03.699><c> gradient</c><00:09:03.759><c> descent</c><00:09:04.120><c> without</c>

00:09:04.980 --> 00:09:04.990 align:start position:0%
iteration of gradient descent without
 

00:09:04.990 --> 00:09:07.949 align:start position:0%
iteration of gradient descent without
needing<00:09:05.319><c> to</c><00:09:05.350><c> use</c><00:09:05.470><c> a</c><00:09:05.620><c> full</c><00:09:05.920><c> loop</c><00:09:06.449><c> so</c><00:09:07.449><c> that's</c><00:09:07.779><c> it</c>

00:09:07.949 --> 00:09:07.959 align:start position:0%
needing to use a full loop so that's it
 

00:09:07.959 --> 00:09:09.869 align:start position:0%
needing to use a full loop so that's it
you<00:09:08.199><c> now</c><00:09:08.319><c> have</c><00:09:08.559><c> a</c><00:09:08.589><c> highly</c><00:09:09.220><c> vectorize</c><00:09:09.670><c> and</c>

00:09:09.869 --> 00:09:09.879 align:start position:0%
you now have a highly vectorize and
 

00:09:09.879 --> 00:09:11.340 align:start position:0%
you now have a highly vectorize and
highly<00:09:10.180><c> efficient</c><00:09:10.600><c> implementation</c><00:09:11.319><c> of</c>

00:09:11.340 --> 00:09:11.350 align:start position:0%
highly efficient implementation of
 

00:09:11.350 --> 00:09:14.040 align:start position:0%
highly efficient implementation of
gradient<00:09:12.220><c> descent</c><00:09:12.459><c> or</c><00:09:12.999><c> register</c><00:09:13.600><c> direction</c>

00:09:14.040 --> 00:09:14.050 align:start position:0%
gradient descent or register direction
 

00:09:14.050 --> 00:09:16.829 align:start position:0%
gradient descent or register direction
there's<00:09:14.889><c> just</c><00:09:15.189><c> some</c><00:09:15.430><c> one</c><00:09:15.939><c> more</c><00:09:16.120><c> detail</c><00:09:16.540><c> that</c><00:09:16.809><c> I</c>

00:09:16.829 --> 00:09:16.839 align:start position:0%
there's just some one more detail that I
 

00:09:16.839 --> 00:09:18.720 align:start position:0%
there's just some one more detail that I
want<00:09:17.019><c> to</c><00:09:17.199><c> talk</c><00:09:17.470><c> about</c><00:09:17.709><c> in</c><00:09:18.069><c> the</c><00:09:18.220><c> next</c><00:09:18.249><c> video</c>

00:09:18.720 --> 00:09:18.730 align:start position:0%
want to talk about in the next video
 

00:09:18.730 --> 00:09:20.699 align:start position:0%
want to talk about in the next video
which<00:09:18.970><c> is</c><00:09:18.999><c> in</c><00:09:19.540><c> our</c><00:09:19.749><c> description</c><00:09:20.079><c> here</c><00:09:20.499><c> I</c>

00:09:20.699 --> 00:09:20.709 align:start position:0%
which is in our description here I
 

00:09:20.709 --> 00:09:22.769 align:start position:0%
which is in our description here I
briefly<00:09:21.279><c> alluded</c><00:09:21.879><c> to</c><00:09:22.029><c> this</c><00:09:22.149><c> technique</c><00:09:22.540><c> called</c>

00:09:22.769 --> 00:09:22.779 align:start position:0%
briefly alluded to this technique called
 

00:09:22.779 --> 00:09:25.679 align:start position:0%
briefly alluded to this technique called
broadcasting<00:09:23.939><c> broadcasting</c><00:09:24.939><c> turns</c><00:09:25.240><c> out</c><00:09:25.449><c> to</c>

00:09:25.679 --> 00:09:25.689 align:start position:0%
broadcasting broadcasting turns out to
 

00:09:25.689 --> 00:09:28.499 align:start position:0%
broadcasting broadcasting turns out to
be<00:09:25.720><c> a</c><00:09:25.839><c> technique</c><00:09:26.350><c> that</c><00:09:27.029><c> pison</c><00:09:28.029><c> an</c><00:09:28.149><c> umpire</c>

00:09:28.499 --> 00:09:28.509 align:start position:0%
be a technique that pison an umpire
 

00:09:28.509 --> 00:09:30.780 align:start position:0%
be a technique that pison an umpire
allows<00:09:28.930><c> you</c><00:09:29.199><c> to</c><00:09:29.379><c> use</c><00:09:29.589><c> to</c><00:09:29.860><c> make</c><00:09:30.009><c> certain</c><00:09:30.490><c> parts</c>

00:09:30.780 --> 00:09:30.790 align:start position:0%
allows you to use to make certain parts
 

00:09:30.790 --> 00:09:33.150 align:start position:0%
allows you to use to make certain parts
of<00:09:30.850><c> your</c><00:09:30.939><c> code</c><00:09:31.149><c> also</c><00:09:31.420><c> much</c><00:09:31.930><c> more</c><00:09:32.139><c> efficient</c><00:09:32.559><c> so</c>

00:09:33.150 --> 00:09:33.160 align:start position:0%
of your code also much more efficient so
 

00:09:33.160 --> 00:09:34.710 align:start position:0%
of your code also much more efficient so
let's<00:09:33.430><c> see</c><00:09:33.610><c> what</c><00:09:33.790><c> some</c><00:09:33.939><c> more</c><00:09:34.120><c> details</c><00:09:34.480><c> of</c>

00:09:34.710 --> 00:09:34.720 align:start position:0%
let's see what some more details of
 

00:09:34.720 --> 00:09:38.790 align:start position:0%
let's see what some more details of
broadcasting<00:09:35.680><c> in</c><00:09:35.860><c> the</c><00:09:36.249><c> next</c><00:09:36.519><c> video</c>

