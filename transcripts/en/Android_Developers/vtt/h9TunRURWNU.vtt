WEBVTT
Kind: captions
Language: en

00:00:00.740 --> 00:00:02.580
This little icon means sharing.

00:00:02.580 --> 00:00:04.400
And it's awesome on Android.

00:00:04.400 --> 00:00:06.330
You can build an
action_send intent yourself,

00:00:06.330 --> 00:00:09.260
but I prefer using ShareCompat,
and share text with just

00:00:09.260 --> 00:00:10.707
a single command.

00:00:10.707 --> 00:00:12.290
I mean like-- and
I'll go through what

00:00:12.290 --> 00:00:15.080
it takes to correctly share
content to other apps,

00:00:15.080 --> 00:00:17.110
as well as receive that content.

00:00:17.110 --> 00:00:18.330
What kinds of content?

00:00:18.330 --> 00:00:21.690
We saw text, but how
about HTML formatted text,

00:00:21.690 --> 00:00:25.210
files, images, is such
a thing even possible?

00:00:25.210 --> 00:00:26.750
Yes, it is.

00:00:26.750 --> 00:00:27.840
So let's just do it.

00:00:27.840 --> 00:00:28.960
Share some text.

00:00:28.960 --> 00:00:32.290
ShareCompat does the hard work
of constructing our intent.

00:00:32.290 --> 00:00:34.660
We just have to make sure
to set the MIME type.

00:00:34.660 --> 00:00:37.440
This is how apps filter
what type of content

00:00:37.440 --> 00:00:38.930
they can receive.

00:00:38.930 --> 00:00:40.770
Then, call startActivity.

00:00:40.770 --> 00:00:42.830
We wrap it in resolveActivity.

00:00:42.830 --> 00:00:45.560
This prevents activity not
found exceptions for cases

00:00:45.560 --> 00:00:47.390
where there is
actually no app that

00:00:47.390 --> 00:00:49.060
can handle what we're sharing.

00:00:49.060 --> 00:00:51.080
Better safe than sorry.

00:00:51.080 --> 00:00:52.400
That was too easy, though.

00:00:52.400 --> 00:00:56.340
Let's do HTML text--
ooh, as in email.

00:00:56.340 --> 00:00:57.790
Well, not much more to it.

00:00:57.790 --> 00:01:00.340
HTML text uses setHtmlText.

00:01:00.340 --> 00:01:01.670
Makes sense.

00:01:01.670 --> 00:01:05.000
We added a subject and we
can add multiple to, cc,

00:01:05.000 --> 00:01:07.090
or bcc email addresses.

00:01:07.090 --> 00:01:09.690
They only apply to email
apps, but that's fine.

00:01:09.690 --> 00:01:11.610
Receiving apps can
ignore them if they want.

00:01:11.610 --> 00:01:14.060
You just give it all you've got.

00:01:14.060 --> 00:01:16.120
But talking about
the sending side,

00:01:16.120 --> 00:01:18.311
without talking about
the receiving side,

00:01:18.311 --> 00:01:20.560
is like talking about peanut
butter without mentioning

00:01:20.560 --> 00:01:23.470
jelly, or something that.

00:01:23.470 --> 00:01:26.100
The receiving activity
would need an intent filter

00:01:26.100 --> 00:01:27.880
with the appropriate MIME type.

00:01:27.880 --> 00:01:30.740
We'll note, we add
the category.DEFAULT.

00:01:30.740 --> 00:01:33.430
You won't get any of our
startActivity implicit intents

00:01:33.430 --> 00:01:35.200
we've created without it.

00:01:35.200 --> 00:01:37.485
Category.BROWSABLE is
what allows websites

00:01:37.485 --> 00:01:40.300
to directly share into the app.

00:01:40.300 --> 00:01:43.100
Then, whether the sender
used sharedCompat or not,

00:01:43.100 --> 00:01:45.510
you can use
intentReader to extract

00:01:45.510 --> 00:01:47.590
the information you need.

00:01:47.590 --> 00:01:50.860
But text, formatted or
not, is a bit basic.

00:01:50.860 --> 00:01:54.660
Let's move on to the cool part--
sharing, say, ooh, an image.

00:01:54.660 --> 00:01:56.320
Now, we're getting somewhere.

00:01:56.320 --> 00:01:59.400
OK, so setStream is new.

00:01:59.400 --> 00:02:02.750
Except where do we
get that uriToImage?

00:02:02.750 --> 00:02:04.080
Here's the interesting part.

00:02:04.080 --> 00:02:07.710
You'd think this could be a
file path to the image itself.

00:02:07.710 --> 00:02:09.943
That's actually a
really bad idea.

00:02:09.943 --> 00:02:12.360
That means you need to write
the file somewhere accessible

00:02:12.360 --> 00:02:14.120
to other apps,
potentially needing

00:02:14.120 --> 00:02:16.970
the WRITE_STORAGE permission,
and the receiving app

00:02:16.970 --> 00:02:20.010
would definitely need the
READ_STORAGE permission.

00:02:20.010 --> 00:02:22.110
With Android 6.0
Marshmallow, those

00:02:22.110 --> 00:02:24.120
are dangerous
permissions that need

00:02:24.120 --> 00:02:26.140
to be requested at runtime.

00:02:26.140 --> 00:02:27.840
Don't be that app.

00:02:27.840 --> 00:02:29.875
Instead, we have a
whole training doc

00:02:29.875 --> 00:02:33.200
on correctly sharing files in
a way that requires no storage

00:02:33.200 --> 00:02:36.180
permission using FileProvider.

00:02:36.180 --> 00:02:39.920
Check out our blog post and docs
for how to set it all up first.

00:02:39.920 --> 00:02:42.020
So what does our
code look like now?

00:02:42.020 --> 00:02:44.720
We've used file
provider's getUriForFile

00:02:44.720 --> 00:02:48.576
to get a sharable URI, suitable
for passing to another app.

00:02:48.576 --> 00:02:49.075
Awesome.

00:02:49.075 --> 00:02:52.400
We even get a way of determining
the type automatically

00:02:52.400 --> 00:02:53.750
from the file.

00:02:53.750 --> 00:02:55.780
Under the hood, this
approach uses what's

00:02:55.780 --> 00:02:58.420
called URI based permissions.

00:02:58.420 --> 00:03:00.400
The sending app
grants permission

00:03:00.400 --> 00:03:03.180
to just the single URI.

00:03:03.180 --> 00:03:06.510
We grant permission by
calling setData with our URI,

00:03:06.510 --> 00:03:09.930
and then adding the
FLAG_GRANT_READ_URI_PERMISSION.

00:03:09.930 --> 00:03:11.550
That's it.

00:03:11.550 --> 00:03:15.220
Now, the receiving side
can use getContentResolver

00:03:15.220 --> 00:03:18.680
openInputStream
to get the image.

00:03:18.680 --> 00:03:21.890
So we know how to share text
and files to other apps,

00:03:21.890 --> 00:03:24.000
as well as receive
those files, all

00:03:24.000 --> 00:03:26.100
without dangerous permissions.

00:03:26.100 --> 00:03:28.680
Hope this helps you
play well with others

00:03:28.680 --> 00:03:30.770
and build better apps.

00:03:30.770 --> 00:03:35.320
[MUSIC PLAYING]

