WEBVTT
Kind: captions
Language: en

00:00:46.350 --> 00:00:51.460
Something akin to passwords have seemingly
been used for at least as long as humans have

00:00:51.460 --> 00:00:52.969
been recording history.

00:00:52.969 --> 00:00:57.630
For example, one of the earliest references
to something like a password is mentioned

00:00:57.630 --> 00:01:03.190
in the Book of Judges, which was first written
down sometime around the 6th or 7th century

00:01:03.190 --> 00:01:04.190
BC.

00:01:04.190 --> 00:01:05.190
Specifically, it states in Judges 12:

00:01:05.190 --> 00:01:08.920
And the Gileadites took the passages of Jordan
before the Ephraimites: and it was so, that

00:01:08.920 --> 00:01:13.500
when those Ephraimites which were escaped
said, Let me go over; that the men of Gilead

00:01:13.500 --> 00:01:16.020
said unto him, Art thou an Ephraimite?

00:01:16.020 --> 00:01:17.520
If he said, Nay;

00:01:17.520 --> 00:01:22.110
Then said they unto him, Say now Shibboleth:
and he said Sibboleth: for he could not frame

00:01:22.110 --> 00:01:23.490
to pronounce it right.

00:01:23.490 --> 00:01:26.530
Then they took him, and slew him at the passages
of Jordan…

00:01:26.530 --> 00:01:31.570
Fast-forwarding a bit in history and Roman
legionaries are known to have used a simple

00:01:31.570 --> 00:01:35.979
system of passphrases to discern whether a
stranger was friend or foe.

00:01:35.979 --> 00:01:40.280
Second century BC Greek historian, Polybius,
even describes in detail how the password

00:01:40.280 --> 00:01:44.190
system worked in terms of making sure everyone
knew what the current password was:

00:01:44.190 --> 00:01:48.840
…from the tenth maniple of each class of
infantry and cavalry, the maniple which is

00:01:48.840 --> 00:01:54.210
encamped at the lower end of the street, a
man is chosen who is relieved from guard duty,

00:01:54.210 --> 00:01:58.540
and he attends every day at sunset at the
tent of the tribune, and receiving from him

00:01:58.540 --> 00:02:03.619
the watchword—that is a wooden tablet with
the word inscribed on it – takes his leave,

00:02:03.619 --> 00:02:07.539
and on returning to his quarters passes on
the watchword and tablet before witnesses

00:02:07.539 --> 00:02:12.100
to the commander of the next maniple, who
in turn passes it to the one next him.

00:02:12.100 --> 00:02:16.130
All do the same until it reaches the first
maniples, those encamped near the tents of

00:02:16.130 --> 00:02:17.130
the tribunes.

00:02:17.130 --> 00:02:20.370
These latter are obliged to deliver the tablet
to the tribunes before dark.

00:02:20.370 --> 00:02:25.310
So that if all those issued are returned,
the tribune knows that the watchword has been

00:02:25.310 --> 00:02:29.980
given to all the maniples, and has passed
through all on its way back to him.

00:02:29.980 --> 00:02:34.000
If any one of them is missing, he makes inquiry
at once, as he knows by the marks from what

00:02:34.000 --> 00:02:39.320
quarter the tablet has not returned, and whoever
is responsible for the stoppage meets with

00:02:39.320 --> 00:02:41.350
the punishment he merits.

00:02:41.350 --> 00:02:46.340
Roman historian Suetonius even mentions Caesar
using a simple cipher which required the recipient

00:02:46.340 --> 00:02:50.700
to know a key, in this case the correct number
of times to shift the alphabet, to decipher

00:02:50.700 --> 00:02:51.700
the message.

00:02:51.700 --> 00:02:55.280
As for more modern times, the first known
instance of a password system on an electronic

00:02:55.280 --> 00:03:00.600
computer was implemented by now retired professor
of computer science at the Massachusetts Institute

00:03:00.600 --> 00:03:03.390
of Technology, Fernando Corbato.

00:03:03.390 --> 00:03:08.610
In 1961, MIT had a giant time-sharing computer
called the Compatible Time-Sharing System

00:03:08.610 --> 00:03:10.049
(CTSS).

00:03:10.049 --> 00:03:15.360
Corbato would state in a 2012 interview: “The
key problem [with the CTSS] was that we were

00:03:15.360 --> 00:03:20.280
setting up multiple terminals, which were
to be used by multiple persons but with each

00:03:20.280 --> 00:03:23.209
person having his own private set of files.

00:03:23.209 --> 00:03:27.760
Putting a password on for each individual
user as a lock seemed like a very straightforward

00:03:27.760 --> 00:03:28.760
solution.”

00:03:28.760 --> 00:03:33.260
Something we should mention before continuing
is that Corbota is hesitant to take credit

00:03:33.260 --> 00:03:36.700
for being the first to implement a computer
password system.

00:03:36.700 --> 00:03:42.640
He suggests that a device built in 1960 by
IBM called the Semi-Automatic Business Research

00:03:42.640 --> 00:03:47.650
Environment (Sabre), which was (and still
is in an upgraded form) used for making and

00:03:47.650 --> 00:03:51.030
maintaining travel reservations, probably
used passwords.

00:03:51.030 --> 00:03:55.610
However, when IBM was contacted about this,
they were unsure if the system originally

00:03:55.610 --> 00:03:57.459
had any such security.

00:03:57.459 --> 00:04:01.880
And as nobody seems to have any surviving
record of whether it did, Corbato is seemingly

00:04:01.880 --> 00:04:07.359
universally given credit for being the first
to put such a system on an electronic computer.

00:04:07.359 --> 00:04:11.540
Of course, an issue with these early proto-passwords
is that all of them were stored in plain text

00:04:11.540 --> 00:04:13.530
despite the gaping security hole this introduces.

00:04:13.530 --> 00:04:20.480
On that note, in 1962, a PHD student called
Allan Scherr managed to get the CTSS to print

00:04:20.480 --> 00:04:22.229
off all of the computer’s passwords.

00:04:22.229 --> 00:04:23.229
Scherr notes,

00:04:23.229 --> 00:04:27.810
There was a way to request files to be printed
offline, by submitting a punched card with

00:04:27.810 --> 00:04:29.910
the account number and file name.

00:04:29.910 --> 00:04:34.380
Late one Friday night, I submitted a request
to print the password files and very early

00:04:34.380 --> 00:04:37.660
Saturday morning went to the file cabinet
where printouts were placed…

00:04:37.660 --> 00:04:40.979
I could then continue my larceny of machine
time.

00:04:40.979 --> 00:04:44.750
This “larceny” was simply getting more
than the four hours of allotted daily computer

00:04:44.750 --> 00:04:46.150
time he’d been granted.

00:04:46.150 --> 00:04:50.520
Scherr then shared the password list to obfuscate
his involvement in the data breech.

00:04:50.520 --> 00:04:54.509
System admins at the time simply thought there
must have been a bug in the password system

00:04:54.509 --> 00:04:56.970
somewhere and Scherr was never caught.

00:04:56.970 --> 00:05:01.360
We only know that he was responsible because
he sheepishly admitted almost a half century

00:05:01.360 --> 00:05:02.360
later that it was he who did it.

00:05:02.360 --> 00:05:06.760
This little data breach made him the first
known person to steal computer passwords,

00:05:06.760 --> 00:05:10.010
something the computer pioneer seems quite
proud of today.

00:05:10.010 --> 00:05:13.880
Hilariously, according to Scherr, while some
people used the passwords to get more time

00:05:13.880 --> 00:05:18.200
on the machine to run simulations and the
like, others decided to use them to log into

00:05:18.200 --> 00:05:21.790
the accounts of people they didn’t like
just to leave insulting messages.

00:05:21.790 --> 00:05:27.360
Which just goes to show that while computers
may have changed a lot in the last half century,

00:05:27.360 --> 00:05:29.490
people sure haven’t.

00:05:29.490 --> 00:05:35.280
In any event, around 5 years later, in 1966,
CTSS once again experience a massive data

00:05:35.280 --> 00:05:39.630
breach when a random administrator accidentally
mixed up the files that displayed a welcome

00:05:39.630 --> 00:05:43.160
message to each user and the master password
file…

00:05:43.160 --> 00:05:47.790
This mistake saw every password stored on
the machine being displayed to any user who

00:05:47.790 --> 00:05:49.750
attempted to log into CTSS.

00:05:49.750 --> 00:05:55.370
In a paper commemorating the fiftieth anniversary
of CTSS engineer Tom Van Vleck fondly recalled

00:05:55.370 --> 00:05:59.880
the “Password Incident” and jokingly noted
of it: “Naturally this happened at 5 PM

00:05:59.880 --> 00:06:05.210
on a Friday, and I had to spend several unplanned
hours changing people’s passwords.”

00:06:05.210 --> 00:06:10.260
As a way to get around the whole plain text
password problem, Robert Morris created a

00:06:10.260 --> 00:06:15.190
one-way encryption system for UNIX which at
least made it so in theory even if someone

00:06:15.190 --> 00:06:20.220
could access the password database, they wouldn’t
be able to tell what any of the passwords

00:06:20.220 --> 00:06:21.220
were.

00:06:21.220 --> 00:06:25.960
Of course, with advancements in computing
power and clever algorithms, even more clever

00:06:25.960 --> 00:06:30.290
encryption schemes have had to be developed…
and the battle between white and black hat

00:06:30.290 --> 00:06:34.850
security experts has pretty much been waging
back and forth ever since.

00:06:34.850 --> 00:06:39.661
This has all led to Bill Gates famously stating
in 2004, “[Passwords] just don’t meet

00:06:39.661 --> 00:06:42.980
the challenge for anything you really want
to secure.”

00:06:42.980 --> 00:06:49.440
Of course, the biggest security hole is generally
not the algorithms and software used, but

00:06:49.440 --> 00:06:51.740
the users themselves.

00:06:51.740 --> 00:06:57.370
As famed creator of XKCD, Randall Munroe,
once so poignantly put it, “Through 20 years

00:06:57.370 --> 00:07:02.220
of effort, we’ve successfully trained everyone
to use passwords that are hard for humans

00:07:02.220 --> 00:07:05.639
to remember, but easy for computers to guess.”

00:07:05.639 --> 00:07:09.440
On this note of training people to make bad
passwords, the blame for this can be traced

00:07:09.440 --> 00:07:14.530
back to widely disseminated recommendations
by the National Institute of Standards and

00:07:14.530 --> 00:07:20.110
Technology, published in the page turner that
was the eight page NIST Special Publication

00:07:20.110 --> 00:07:21.669
800-63.

00:07:21.669 --> 00:07:26.139
Appendix A, written by Bill Burr in 2003.

00:07:26.139 --> 00:07:30.090
Among other things, Burr recommended the use
of words with random characters substituted

00:07:30.090 --> 00:07:34.530
in, including requiring capital letters and
numbers, and that system admins have people

00:07:34.530 --> 00:07:38.250
change their passwords regularly for maximal
security…

00:07:38.250 --> 00:07:44.310
Of these seemingly universally adopted recommendations,
the now retired Burr stated in an interview

00:07:44.310 --> 00:07:49.060
with the Wall Street Journal, “Much of what
I did I now regret…”

00:07:49.060 --> 00:07:53.840
To be fair to Burr, studies concerning the
human psychology aspect of passwords were

00:07:53.840 --> 00:07:58.640
largely non-existent at the time he wrote
these recommendations and in theory certainly

00:07:58.640 --> 00:08:02.680
his suggestions at the least should have been
very slightly more secure from a computational

00:08:02.680 --> 00:08:06.110
perspective than using regular words.

00:08:06.110 --> 00:08:09.210
The problem with these recommendations is
pointed out by the British National Cyber

00:08:09.210 --> 00:08:15.199
Security Centre (NCSC) who state, “this
proliferation of password use, and increasingly

00:08:15.199 --> 00:08:20.380
complex password requirements, places an unrealistic
demand on most users.

00:08:20.380 --> 00:08:25.400
Inevitably, users will devise their own coping
mechanisms to cope with ‘password overload’.

00:08:25.400 --> 00:08:30.610
This includes writing down passwords, re-using
the same password across different systems,

00:08:30.610 --> 00:08:34.639
or using simple and predictable password creation
strategies.”

00:08:34.639 --> 00:08:39.419
To this point, in 2013 Google performed a
quick little study on people’s passwords

00:08:39.419 --> 00:08:44.190
and noted that most people use one of the
following in their password scheme: The name

00:08:44.190 --> 00:08:49.490
or birthday of a pet, family member or partner;
an anniversary or other significant date;

00:08:49.490 --> 00:08:54.050
birthplace; favorite holiday; something to
do with a favorite sports team; and, inexplicable,

00:08:54.050 --> 00:08:55.880
the word password…

00:08:55.880 --> 00:09:00.330
So, bottom line, most people choose passwords
that are based on information that is easily

00:09:00.330 --> 00:09:06.000
accessible to hackers, who then can in turn
relatively easily create a brute force algorithm

00:09:06.000 --> 00:09:07.889
to crack the password.

00:09:07.889 --> 00:09:11.800
Thankfully, while you might not know it from
the ubiquity of systems out there that still

00:09:11.800 --> 00:09:16.210
require you to do your best impression of
Will Hunting to set a password, most security

00:09:16.210 --> 00:09:21.149
advisory entities have drastically changed
their recommendations in the last few years.

00:09:21.149 --> 00:09:26.050
For example, the aforementioned NCSC now recommends,
among other things, system administrators

00:09:26.050 --> 00:09:31.100
stop making people change passwords unless
there is a known password breach within the

00:09:31.100 --> 00:09:37.480
system as, “This imposes burdens on the
user (who is likely to choose new passwords

00:09:37.480 --> 00:09:41.269
that are only minor variations of the old)
and carries no real benefits…”

00:09:41.269 --> 00:09:45.149
Further noting that studies have shown that
“Regular password changing harms rather

00:09:45.149 --> 00:09:46.949
than improves security…”

00:09:46.949 --> 00:09:51.509
Or as Physicists and noted Computer Scientist
Dr. Alan Woodward of the University of Surrey

00:09:51.509 --> 00:09:56.470
notes, “the more often you ask someone to
change their password, the weaker the passwords

00:09:56.470 --> 00:09:57.860
they typically choose.”

00:09:57.860 --> 00:10:02.300
Similarly, even a completely random set of
characters at typical password requirement

00:10:02.300 --> 00:10:07.160
lengths is relatively susceptible to brute
force attacks without further security measures.

00:10:07.160 --> 00:10:11.269
As such, the National Institute of Standards
and Technology has likewise updated their

00:10:11.269 --> 00:10:16.740
recommendations, now encouraging admins to
have people focus on lengthy, but simple,

00:10:16.740 --> 00:10:17.740
passwords.

00:10:17.740 --> 00:10:21.170
For example, a password like “My password
is pretty easy to remember.”

00:10:21.170 --> 00:10:27.390
is generally going to be orders of magnitude
more secure than “D@ught3rsN@m3!1” or

00:10:27.390 --> 00:10:28.490
even “*^sg5!J8H8*@#!^”

00:10:28.490 --> 00:10:33.860
Of course, while using such phrases makes
things easy to remember, it still doesn’t

00:10:33.860 --> 00:10:39.519
get around the problem of the seemingly weekly
occurrence of some major service having their

00:10:39.519 --> 00:10:44.279
database hacked, with said systems sometimes
using weak encryption or even none at all

00:10:44.279 --> 00:10:51.629
in their storing of private data and passwords,
such as the recent Equifax hack that saw 145.5

00:10:51.629 --> 00:10:56.959
million people in the U.S. have their personal
data exposed, including full names, Social

00:10:56.959 --> 00:10:59.699
Security Numbers, birth dates, and addresses.

00:10:59.699 --> 00:11:04.970
(Across the pond, Equifax also noted about
15 million UK citizens had their records stolen

00:11:04.970 --> 00:11:06.350
in the breach as well.)

00:11:06.350 --> 00:11:10.519
In shades of the first ever password hack
mentioned previously which required Scherr

00:11:10.519 --> 00:11:14.980
to just request that the password file be
printed, it turns out to get access to the

00:11:14.980 --> 00:11:20.040
vast amount of personal data Equifax stores
on people, an anonymous computer security

00:11:20.040 --> 00:11:24.070
expert told Motherboard, “All you had to
do was put in a search term and get millions

00:11:24.070 --> 00:11:29.070
of results, just instantly—in cleartext,
through a web app.”

00:11:29.070 --> 00:11:30.399
Yep…

00:11:30.399 --> 00:11:33.519
Because of this sort of thing, the National
Cyber Security Centre also now recommends

00:11:33.519 --> 00:11:38.740
admins encourage people to use password manager
software in order to help increase the likelihood

00:11:38.740 --> 00:13:21.449
that people use different passwords for different
systems.

00:13:21.449 --> 00:13:32.519
In 
the age of everyone’s lives being stored

00:13:32.519 --> 00:13:37.009
online on various companies’ servers- generally
all protected by passwords, the University

00:13:37.009 --> 00:13:41.999
of London noted in a recent study that about
10% of people are now putting a list of their

00:13:41.999 --> 00:13:46.779
common passwords in their wills to make sure
people can access their data and accounts

00:13:46.779 --> 00:13:47.779
after they die.

00:13:47.779 --> 00:13:52.449
Interestingly, the problem of people not doing
this actually is noted as having caused a

00:13:52.449 --> 00:13:54.989
major problem after the 9/11 attacks.

00:13:54.989 --> 00:14:00.360
For example, Howard Lutnick, a one time executive
at Cantor Fitzgerald, noted his rather unenviable

00:14:00.360 --> 00:14:05.269
task of having to track down the passwords
of almost 700 employees who’d died in the

00:14:05.269 --> 00:14:06.269
attack.

00:14:06.269 --> 00:14:09.630
Because of how critical it was for the company
to have access to their files right away before

00:14:09.630 --> 00:14:14.269
the evening bond markets opened, he and his
staff had to call loved ones of the dead to

00:14:14.269 --> 00:14:18.860
ask for the passwords or what the passwords
might be that same day…

00:14:18.860 --> 00:14:23.079
Thankfully for the company, most of the employees’
passwords were based on the aforementioned

00:14:23.079 --> 00:14:27.360
flawed recommendations by Bill Burr- the “J3r3my!”
variety.

00:14:27.360 --> 00:14:32.610
This, in combination with specific personal
information from loved ones Lutnick collected,

00:14:32.610 --> 00:14:37.470
allowed a team dispatched by Microsoft to
relatively easily crack the unknown passwords

00:14:37.470 --> 00:14:49.629
via brute force in short order.

