WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.494
[MUSIC PLAYING]

00:00:04.769 --> 00:00:07.060
JAMES SMITH: Welcome to this
talk about Google Play App

00:00:07.060 --> 00:00:08.430
Signing.

00:00:08.430 --> 00:00:10.770
This is a really
exciting moment for us.

00:00:10.770 --> 00:00:13.150
We've been working on this
product for nearly a year,

00:00:13.150 --> 00:00:15.750
so it's great to be able
to talk to you about it.

00:00:15.750 --> 00:00:18.300
I'm James, I'm the product
manager for App Signing,

00:00:18.300 --> 00:00:19.080
and this is--

00:00:19.080 --> 00:00:20.413
ANTHONY MORRIS: Hi, I'm Anthony.

00:00:20.413 --> 00:00:23.910
I'm the engineering lead
for Google Play App Signing.

00:00:23.910 --> 00:00:26.790
JAMES SMITH: So let's start
by outlining the problem

00:00:26.790 --> 00:00:30.260
that we're trying to solve.

00:00:30.260 --> 00:00:34.310
Android requires that all
APKs be digitally signed

00:00:34.310 --> 00:00:36.800
with an app signing
key and a certificate

00:00:36.800 --> 00:00:39.020
before they can be installed.

00:00:39.020 --> 00:00:41.360
When you sign an
APK, the signing tool

00:00:41.360 --> 00:00:44.120
attaches a certificate
to the APK.

00:00:44.120 --> 00:00:46.490
The certificate serves
as a fingerprint,

00:00:46.490 --> 00:00:49.970
which uniquely associates
your APK with you

00:00:49.970 --> 00:00:53.000
and your corresponding
private app signing key.

00:00:53.000 --> 00:00:57.890
This helps Android ensure that
any future updates to your APK

00:00:57.890 --> 00:01:01.880
are authentic and come
from the original author.

00:01:01.880 --> 00:01:05.510
You must use the same app
signing key and certificate

00:01:05.510 --> 00:01:09.260
throughout the lifetime of
your app in order for users

00:01:09.260 --> 00:01:11.900
to be able to install
new versions of your app.

00:01:14.440 --> 00:01:16.690
Maintaining the
security of your key

00:01:16.690 --> 00:01:19.300
is therefore of
critical importance,

00:01:19.300 --> 00:01:22.390
both to you and your users.

00:01:22.390 --> 00:01:24.550
If a third party
should be able to take

00:01:24.550 --> 00:01:27.010
your key without your
knowledge or permission,

00:01:27.010 --> 00:01:30.760
that person could sign and
distribute apps maliciously

00:01:30.760 --> 00:01:34.450
that replace your authentic
apps or corrupt them.

00:01:34.450 --> 00:01:37.420
Such a person could also
sign and distribute apps

00:01:37.420 --> 00:01:38.570
under your identity.

00:01:41.920 --> 00:01:45.180
Your private key is required
for signing all future versions

00:01:45.180 --> 00:01:45.900
of your app.

00:01:45.900 --> 00:01:48.420
If you lose or
misplace your key,

00:01:48.420 --> 00:01:52.260
you will not be able to publish
updates to an existing app.

00:01:52.260 --> 00:01:56.160
You cannot generate a
previously generated key.

00:01:56.160 --> 00:01:57.750
Your only options,
then, would be

00:01:57.750 --> 00:02:01.140
to publish a new app
under a new package name

00:02:01.140 --> 00:02:03.960
and ask all of your
users to move across.

00:02:03.960 --> 00:02:07.290
This would obviously be
a terrible experience.

00:02:07.290 --> 00:02:10.800
Developers who take such
care in grafting great apps

00:02:10.800 --> 00:02:13.170
and wonderful
experiences for users

00:02:13.170 --> 00:02:16.080
shouldn't need to be
experts in security.

00:02:16.080 --> 00:02:18.630
You shouldn't ever
be in the situation

00:02:18.630 --> 00:02:20.880
that the president
of RV AppStudios

00:02:20.880 --> 00:02:24.410
had to face when they
were getting started.

00:02:24.410 --> 00:02:26.920
So that's why we've been
working on a solution,

00:02:26.920 --> 00:02:30.595
and you may have heard that
we launched this product.

00:02:30.595 --> 00:02:32.960
App Signing is an
optional program

00:02:32.960 --> 00:02:36.290
for developers that provides
a secure means of handling

00:02:36.290 --> 00:02:38.540
your APK signing key.

00:02:38.540 --> 00:02:41.600
Previously, the burden for
signing and protecting keys

00:02:41.600 --> 00:02:44.610
was entirely on each
individual app developer,

00:02:44.610 --> 00:02:47.981
and we've seen instances of
keys being lost or compromised.

00:02:47.981 --> 00:02:49.730
And in those situations,
there was nothing

00:02:49.730 --> 00:02:52.450
that we could do to help.

00:02:52.450 --> 00:02:54.580
With Google Play App
Signing, developers' keys

00:02:54.580 --> 00:02:57.580
are stored on infrastructure,
Google's infrastructure,

00:02:57.580 --> 00:03:00.410
and developers benefit from
Google's ongoing investment

00:03:00.410 --> 00:03:03.690
in technical security.

00:03:03.690 --> 00:03:06.620
So let me run through
how this works.

00:03:06.620 --> 00:03:12.710
Today, a developer signs their
APK with an app signing key.

00:03:12.710 --> 00:03:17.790
The signature gets
attached to the APK,

00:03:17.790 --> 00:03:19.580
and the app is uploaded
to Google Play.

00:03:22.110 --> 00:03:26.520
Play sends an exact copy of
the APK, signature and all,

00:03:26.520 --> 00:03:29.000
to the user, and the
user gets the app

00:03:29.000 --> 00:03:31.260
signed by the original key.

00:03:31.260 --> 00:03:35.100
All subsequent updates
follow the same path.

00:03:35.100 --> 00:03:38.870
With Google Play App Signing,
things look a little different.

00:03:38.870 --> 00:03:45.570
Now, the developer signs
their APK with an upload key.

00:03:45.570 --> 00:03:50.510
The upload key signature
is attached to the APK,

00:03:50.510 --> 00:03:54.640
and the developer
uploads that APK to Play.

00:03:54.640 --> 00:03:58.870
The upload key is used by Google
to authenticate the developer,

00:03:58.870 --> 00:04:01.030
and that's its only purpose.

00:04:01.030 --> 00:04:02.980
The upload key can
therefore be reset.

00:04:05.600 --> 00:04:11.790
Play re-signs the APK with
the original app signing key,

00:04:11.790 --> 00:04:15.390
and the user gets an APK
signed with the original key,

00:04:15.390 --> 00:04:17.620
just like in the
scenario that is today.

00:04:20.230 --> 00:04:23.220
So how does this
solve your problem?

00:04:23.220 --> 00:04:26.790
Well, we've had several
partners using Google Play App

00:04:26.790 --> 00:04:29.040
Signing for a while
now, and the feedback

00:04:29.040 --> 00:04:30.610
has been really positive.

00:04:30.610 --> 00:04:33.420
Here, Robinhood speaks
to the layer of safety

00:04:33.420 --> 00:04:36.690
that we've added, while at the
same time all but eliminating

00:04:36.690 --> 00:04:42.100
the worry of having
lost or stolen keys.

00:04:42.100 --> 00:04:44.330
And it's really
easy to get started.

00:04:44.330 --> 00:04:47.140
You just upload your
key, create a new one,

00:04:47.140 --> 00:04:49.400
and then you're done.

00:04:49.400 --> 00:04:51.980
In fact, it's so easy,
I'm going to walk you

00:04:51.980 --> 00:04:56.240
through the entire
process right now.

00:04:56.240 --> 00:04:59.320
So log in to the new
look Play console.

00:04:59.320 --> 00:05:01.720
You've seen the
material design, right?

00:05:01.720 --> 00:05:03.430
Find the App Signing page.

00:05:03.430 --> 00:05:07.840
It's under Release Management
in our new material design menu.

00:05:07.840 --> 00:05:10.980
You need to read and
agree to the terms.

00:05:10.980 --> 00:05:12.920
The change to go
into App Signing

00:05:12.920 --> 00:05:15.150
is for the lifetime
of your app, so please

00:05:15.150 --> 00:05:17.790
be sure that you want to
continue before you begin.

00:05:17.790 --> 00:05:20.880
We don't intend to allow
withdrawal from the program.

00:05:20.880 --> 00:05:23.130
If you wanted to change
the app signing key

00:05:23.130 --> 00:05:25.590
or go back to
signing yourself, you

00:05:25.590 --> 00:05:27.450
would need to create
a new package name

00:05:27.450 --> 00:05:29.760
and release a new
app and migrate

00:05:29.760 --> 00:05:33.490
all your users across similar
to losing your key today.

00:05:33.490 --> 00:05:37.930
So please be sure that you want
to continue before you begin.

00:05:37.930 --> 00:05:41.380
Next, you've got to find
your current key store file.

00:05:41.380 --> 00:05:42.820
Here are some of
the common places

00:05:42.820 --> 00:05:45.430
that developers have told us
that they keep their key--

00:05:45.430 --> 00:05:48.010
your local development
machine, your CI server,

00:05:48.010 --> 00:05:50.800
your code repository, or
maybe even a secure server.

00:05:54.050 --> 00:05:57.150
Then you're going to download
our tool to encrypt your app

00:05:57.150 --> 00:05:58.240
signing key.

00:05:58.240 --> 00:06:01.850
This tool uses Google's
public key to encrypt your key

00:06:01.850 --> 00:06:04.160
prior to network transfer.

00:06:04.160 --> 00:06:06.470
If you want to inspect the
source code for this key,

00:06:06.470 --> 00:06:10.090
this tool, you can.

00:06:10.090 --> 00:06:13.210
Now select your
encrypted app signing key

00:06:13.210 --> 00:06:17.370
and upload it to play
through the form.

00:06:17.370 --> 00:06:21.300
Now you're going to
generate the new upload key.

00:06:21.300 --> 00:06:23.520
This will be used to
authenticate your APK

00:06:23.520 --> 00:06:25.670
uploads with Google.

00:06:25.670 --> 00:06:29.080
We remove the signature and
re-sign with the original key

00:06:29.080 --> 00:06:30.700
before distributing the app.

00:06:30.700 --> 00:06:33.460
And you generate a new
key really simply using

00:06:33.460 --> 00:06:34.030
the key tool.

00:06:36.730 --> 00:06:39.550
Finally, you're ready
to register the upload

00:06:39.550 --> 00:06:42.790
key with Google and
then enroll your app.

00:06:42.790 --> 00:06:45.670
Once you click enroll, your
app has enrolled permanently,

00:06:45.670 --> 00:06:48.760
and Play Console will
only accept uploads signed

00:06:48.760 --> 00:06:50.740
with the upload
key, so please be

00:06:50.740 --> 00:06:54.450
sure that you're ready
to transfer over.

00:06:54.450 --> 00:06:55.320
And that's it.

00:06:55.320 --> 00:06:56.070
You're done.

00:06:56.070 --> 00:06:58.800
Hopefully the transition
is seamless and smooth,

00:06:58.800 --> 00:06:59.995
just like it was for Roblox.

00:07:03.180 --> 00:07:05.580
For new apps, it's even simpler.

00:07:05.580 --> 00:07:09.840
We'll create and use a new app
signing key to sign your app

00:07:09.840 --> 00:07:12.570
before it's deployed to users.

00:07:12.570 --> 00:07:15.210
The key that you use to sign
your APK before uploading

00:07:15.210 --> 00:07:19.490
to Play Console becomes
your upload key.

00:07:19.490 --> 00:07:20.760
And that's it.

00:07:20.760 --> 00:07:22.760
Now, Anthony is going to
talk about the security

00:07:22.760 --> 00:07:24.520
aspects of this product.

00:07:24.520 --> 00:07:27.300
ANTHONY MORRIS: Thanks, James.

00:07:27.300 --> 00:07:29.730
So when we were
designing this product,

00:07:29.730 --> 00:07:32.670
security was our
number one priority.

00:07:32.670 --> 00:07:35.700
Google has a long history of
strong and ongoing investment

00:07:35.700 --> 00:07:36.930
in security.

00:07:36.930 --> 00:07:39.480
We have over 750
engineers at Google

00:07:39.480 --> 00:07:42.090
working on our security systems.

00:07:42.090 --> 00:07:44.370
And so we have built
upon that investment

00:07:44.370 --> 00:07:46.410
in building this product.

00:07:46.410 --> 00:07:47.970
So let me go into
some more detail

00:07:47.970 --> 00:07:53.050
on some of the security features
of Google Play App Signing.

00:07:53.050 --> 00:07:54.850
So I want to first
talk about the security

00:07:54.850 --> 00:07:58.630
considerations involved with
importing your private keys.

00:07:58.630 --> 00:08:00.580
In designing this
process, we wanted

00:08:00.580 --> 00:08:04.440
to make sure it was
as secure as possible.

00:08:04.440 --> 00:08:06.380
So James has explained
that in order

00:08:06.380 --> 00:08:09.380
to encrypt your app signing
private key for transfer,

00:08:09.380 --> 00:08:11.150
we provide you with
a simple command line

00:08:11.150 --> 00:08:14.690
tool called the PEPK tool.

00:08:14.690 --> 00:08:16.220
I like to call it Pepk.

00:08:16.220 --> 00:08:19.440
It stands for Play
Encrypt Private Key.

00:08:19.440 --> 00:08:22.680
So this tool exports your app
signing private key from a Java

00:08:22.680 --> 00:08:25.280
key store, and then
encrypts it immediately,

00:08:25.280 --> 00:08:28.100
ensuring that your private key
is never left in plain text

00:08:28.100 --> 00:08:29.990
during this operation.

00:08:29.990 --> 00:08:32.840
And if your keys are not
stored in a Java key store,

00:08:32.840 --> 00:08:35.570
then we also provide the
source code of the tool

00:08:35.570 --> 00:08:39.289
so you can write your own code
to export and encrypt your keys

00:08:39.289 --> 00:08:41.570
from wherever they are stored.

00:08:41.570 --> 00:08:44.660
The encryption we use is
public key hybrid encryption

00:08:44.660 --> 00:08:46.640
based on Shoup's ISO standard.

00:08:46.640 --> 00:08:50.570
Specifically, we use P256
elliptic curve asymmetric

00:08:50.570 --> 00:08:53.960
encryption with AES
symmetric encryption.

00:08:53.960 --> 00:08:57.590
And because we use asymmetric
encryption, once encrypted,

00:08:57.590 --> 00:08:59.990
your App Signing
private key can only

00:08:59.990 --> 00:09:03.290
be accessed by our internal
secure a key management system.

00:09:03.290 --> 00:09:06.310
So intermediate servers along
the way can't access the key.

00:09:09.540 --> 00:09:12.880
Now let's talk about our
secure a key management system,

00:09:12.880 --> 00:09:16.970
a specific, dedicated service
for managing private keys.

00:09:16.970 --> 00:09:20.810
And in managing these keys, we
follow industry best practices.

00:09:20.810 --> 00:09:23.860
So in more detail,
the keys are never

00:09:23.860 --> 00:09:26.560
exposed outside of the
system, and these keys

00:09:26.560 --> 00:09:31.150
can only be used to sign the
APKs that you have uploaded.

00:09:31.150 --> 00:09:33.650
And in particular, when
we go to sign an APK,

00:09:33.650 --> 00:09:36.260
the signing operation is
performed within this system,

00:09:36.260 --> 00:09:37.780
so the keys don't
leave the system

00:09:37.780 --> 00:09:40.180
in order to sign your APK.

00:09:40.180 --> 00:09:41.860
Furthermore, all
signing operations

00:09:41.860 --> 00:09:43.840
performed are logged and
internally auditable,

00:09:43.840 --> 00:09:47.480
and access to this system
is tightly restricted.

00:09:47.480 --> 00:09:49.790
Now to protect the case
within this system,

00:09:49.790 --> 00:09:53.090
we store the keys such that they
are strongly encrypted at rest.

00:09:53.090 --> 00:09:55.700
The keys are never
stored in plain text.

00:09:55.700 --> 00:09:58.760
And to prevent key loss, we
make very frequent backups

00:09:58.760 --> 00:10:00.200
of our primary storage.

00:10:00.200 --> 00:10:02.840
These backups are themselves
strongly encrypted,

00:10:02.840 --> 00:10:06.650
and we regularly test
restoring from those backups.

00:10:06.650 --> 00:10:08.120
You can find out
more information

00:10:08.120 --> 00:10:11.060
about Google's security
practices in our public Google

00:10:11.060 --> 00:10:13.120
security white papers
published online.

00:10:15.800 --> 00:10:18.240
Finally, I want to talk
to you about this new key

00:10:18.240 --> 00:10:21.830
we have introduced into the
process called the upload key.

00:10:21.830 --> 00:10:24.195
As James has explained,
the upload key

00:10:24.195 --> 00:10:28.340
is used by Google Play to verify
that the uploaded APK comes

00:10:28.340 --> 00:10:30.200
from the correct developer.

00:10:30.200 --> 00:10:33.020
We verify the validity of
the upload key signature

00:10:33.020 --> 00:10:36.080
prior to signing with
the App Signing key.

00:10:36.080 --> 00:10:38.640
Now unlike the App
Signing key, the upload

00:10:38.640 --> 00:10:42.260
is only verified by Google Play
and not the Android framework,

00:10:42.260 --> 00:10:44.790
and that means it's
possible to reset it in case

00:10:44.790 --> 00:10:48.210
the developer loses
it or is compromised.

00:10:48.210 --> 00:10:50.270
So if, in the
unfortunate situation

00:10:50.270 --> 00:10:53.360
the upload key does become
lost or compromised,

00:10:53.360 --> 00:10:56.110
you can contact Google
Play developer operations

00:10:56.110 --> 00:10:58.990
and request that your upload
key be reset to a new upload

00:10:58.990 --> 00:11:00.620
key that you generate.

00:11:00.620 --> 00:11:02.620
This process will
take a couple of days,

00:11:02.620 --> 00:11:05.450
as we will need to securely
verify your identity,

00:11:05.450 --> 00:11:08.300
and then you can resume
uploading APKs by signing them

00:11:08.300 --> 00:11:10.890
with your new upload key.

00:11:10.890 --> 00:11:13.660
Now over to James to talk about
what enrolling in Google Play

00:11:13.660 --> 00:11:16.425
App Signing enables
us to do for your app.

00:11:16.425 --> 00:11:19.480
JAMES SMITH: Thanks, Anthony.

00:11:19.480 --> 00:11:23.510
So, once Google
Play signs your app,

00:11:23.510 --> 00:11:25.550
you can probably
guess what's coming.

00:11:25.550 --> 00:11:28.334
We can also start to provide
optimization services

00:11:28.334 --> 00:11:29.000
at your request.

00:11:31.660 --> 00:11:33.990
So how is this possible?

00:11:33.990 --> 00:11:37.410
You provide us an APK
signed with the upload key.

00:11:37.410 --> 00:11:41.040
We verify your identity and
then remove that signature.

00:11:41.040 --> 00:11:42.750
There is now a
window of opportunity

00:11:42.750 --> 00:11:46.300
before that APK is signed
with your app signing key

00:11:46.300 --> 00:11:49.415
where we can apply
optimizations to your app.

00:11:49.415 --> 00:11:51.540
We want to use this
opportunity to provide services

00:11:51.540 --> 00:11:52.680
to developers.

00:11:52.680 --> 00:11:55.740
Think about it as applying the
power of Google and tech's best

00:11:55.740 --> 00:11:58.800
practices to your app.

00:11:58.800 --> 00:12:01.700
So the first optimization
we decided to focus on

00:12:01.700 --> 00:12:03.560
is making apps smaller.

00:12:03.560 --> 00:12:05.900
We think we can have
a great impact here.

00:12:05.900 --> 00:12:08.330
We know that developers
care about APK size

00:12:08.330 --> 00:12:09.710
because users do.

00:12:09.710 --> 00:12:13.070
Download cancellations are
correlated with app size.

00:12:13.070 --> 00:12:16.240
If a user attempts to download
an app and it takes too long

00:12:16.240 --> 00:12:17.990
or it looks like it's
going to be too big,

00:12:17.990 --> 00:12:20.690
it's more susceptible
to getting canceled.

00:12:20.690 --> 00:12:22.520
And we know that
larger apps are more

00:12:22.520 --> 00:12:25.490
likely to be uninstalled by
a user looking to free up

00:12:25.490 --> 00:12:27.860
space on that device.

00:12:27.860 --> 00:12:29.960
If you're interested
in what you can

00:12:29.960 --> 00:12:32.570
do to make your
apps smaller, make

00:12:32.570 --> 00:12:34.580
sure you check out the
video from the slimming

00:12:34.580 --> 00:12:36.770
down your APK talk which
happened this morning.

00:12:40.910 --> 00:12:43.640
ANTHONY MORRIS: So in looking
at how we could reduce app size,

00:12:43.640 --> 00:12:45.470
we started by looking
at what takes up

00:12:45.470 --> 00:12:47.990
the most space inside an APK.

00:12:47.990 --> 00:12:50.330
So we analyzed all the
apps in the Play Store

00:12:50.330 --> 00:12:53.120
and looked at the proportion
of space taken up by each file

00:12:53.120 --> 00:12:55.540
type inside the average APK.

00:12:55.540 --> 00:12:57.320
And the chart on
this slide shows you

00:12:57.320 --> 00:12:59.330
the results of this analysis.

00:12:59.330 --> 00:13:02.990
What you can say is that the
top contributors to APK size are

00:13:02.990 --> 00:13:08.510
.so files, or native libraries,
and PNG files, images.

00:13:08.510 --> 00:13:12.320
And together these take up
roughly 40% of an APK's size

00:13:12.320 --> 00:13:15.310
on average.

00:13:15.310 --> 00:13:17.610
Now if we look
inside some APKs, we

00:13:17.610 --> 00:13:21.060
can see why these file
types take up so much space.

00:13:21.060 --> 00:13:23.310
Here we have an
example APK where

00:13:23.310 --> 00:13:25.200
we visualized the
contents of the APK

00:13:25.200 --> 00:13:28.890
by size, the size of the boxes
indicating the relative size

00:13:28.890 --> 00:13:30.310
of each component.

00:13:30.310 --> 00:13:34.130
I'm sure many of your apps
would look similar to this.

00:13:34.130 --> 00:13:37.010
What we see is that because
of the diversity of devices

00:13:37.010 --> 00:13:40.010
in the Android ecosystem,
developers include native

00:13:40.010 --> 00:13:43.910
libraries for different
architectures, so ARM, x86,

00:13:43.910 --> 00:13:47.330
MIPS, sometimes the
64-bit variants as well,

00:13:47.330 --> 00:13:49.790
and durables for different
screen densities--

00:13:49.790 --> 00:13:52.910
Low density, medium
density, high density,

00:13:52.910 --> 00:13:57.350
extra-high extra-extra high,
extra-extra-extra high.

00:13:57.350 --> 00:13:59.660
We got really creative
at the end there.

00:13:59.660 --> 00:14:01.760
And this is a good
thing, because it

00:14:01.760 --> 00:14:04.730
means that apps run at
their best on each device.

00:14:04.730 --> 00:14:07.460
They have images at the right
density and native libraries

00:14:07.460 --> 00:14:10.385
compiled for the correct
architecture for that device.

00:14:13.000 --> 00:14:16.400
But the consequence of this
is that for a specific device,

00:14:16.400 --> 00:14:20.450
a lot of the content of
an APK is unnecessary.

00:14:20.450 --> 00:14:23.380
So if I have a phone with
a 32-bit ARM architecture

00:14:23.380 --> 00:14:25.930
and an HDPI screen,
then I only need

00:14:25.930 --> 00:14:28.990
the contents of the boxes in
blue, and the boxes in green

00:14:28.990 --> 00:14:32.930
are completely unnecessary and
unused for that specific phone.

00:14:32.930 --> 00:14:37.860
But if I had a tablet with an
x86 architecture and an XXHDPI

00:14:37.860 --> 00:14:40.600
screen, then I would need a
completely different subset

00:14:40.600 --> 00:14:42.780
of the boxes.

00:14:42.780 --> 00:14:44.640
Now you could in
the past manually

00:14:44.640 --> 00:14:48.860
create device-specific APKs
by generating multiple APKs,

00:14:48.860 --> 00:14:52.080
each with only one density
and one native architecture.

00:14:52.080 --> 00:14:54.240
But it's a lot of
effort, and in fact we

00:14:54.240 --> 00:14:57.430
recommended you didn't do this
because it's so complicated.

00:14:57.430 --> 00:15:00.510
And so we found that less than
1% of apps on the Play Store

00:15:00.510 --> 00:15:02.530
actually do this.

00:15:02.530 --> 00:15:06.750
But now, as James explained,
with Google Play App Signing,

00:15:06.750 --> 00:15:09.840
we can automatically
generate these APKs for you

00:15:09.840 --> 00:15:15.100
and deliver to each device
only what that device needs.

00:15:15.100 --> 00:15:18.340
So how does this
work in more detail?

00:15:18.340 --> 00:15:22.020
So you, a developer,
uploads a universal APK

00:15:22.020 --> 00:15:24.540
that contains drawables
for multiple densities

00:15:24.540 --> 00:15:27.720
and native libraries for
multiple architectures.

00:15:27.720 --> 00:15:31.920
Then from that universal APK,
we generate multiple APKs

00:15:31.920 --> 00:15:35.080
that are optimized
for specific devices.

00:15:35.080 --> 00:15:37.200
So for native
libraries, what we'll do

00:15:37.200 --> 00:15:40.140
is we'll remove all the libs
directories except for the one

00:15:40.140 --> 00:15:43.330
corresponding to the device's
preferred architecture.

00:15:43.330 --> 00:15:45.410
So if you have an
x86 device, we will

00:15:45.410 --> 00:15:48.900
remove the ARM and the MIPS
directories from the APK

00:15:48.900 --> 00:15:51.420
that we will deliver
to that device.

00:15:51.420 --> 00:15:54.900
For drawables we will remove
all the drawable resources

00:15:54.900 --> 00:15:58.590
that would not be loaded for
that device's screen density.

00:15:58.590 --> 00:16:01.200
So if you have
included an MDPI, HDPI,

00:16:01.200 --> 00:16:04.800
and XHDPI version of
an image in your APK,

00:16:04.800 --> 00:16:07.260
then for an MDPI
device, we will only

00:16:07.260 --> 00:16:10.170
keep the MDPI
resource in the APK

00:16:10.170 --> 00:16:12.810
that we deliver to that device.

00:16:12.810 --> 00:16:15.030
And then after removing
these drawables,

00:16:15.030 --> 00:16:17.530
we modify the resource
table accordingly

00:16:17.530 --> 00:16:21.090
to no longer reference
these removed files.

00:16:21.090 --> 00:16:24.090
Now because we only removed
native libraries and resources

00:16:24.090 --> 00:16:26.400
that would not have been
loaded on that device

00:16:26.400 --> 00:16:28.770
in the first place,
and keep the ones that

00:16:28.770 --> 00:16:30.510
would have been
loaded by that device,

00:16:30.510 --> 00:16:33.300
you should see no difference
in the behavior of your app,

00:16:33.300 --> 00:16:36.540
except, of course, that
it would be smaller.

00:16:36.540 --> 00:16:39.480
Now we call these APKs that
we generate derived APKs,

00:16:39.480 --> 00:16:43.080
because as they are derived
from your uploaded APK.

00:16:43.080 --> 00:16:46.290
Each of these derived APKs
will have the same version code

00:16:46.290 --> 00:16:48.780
as the version code
in the uploaded APK,

00:16:48.780 --> 00:16:51.690
and we add an extra
field in the manifest

00:16:51.690 --> 00:16:54.980
that we call the derived APK ID
in order to distinguish them.

00:16:58.212 --> 00:16:59.670
So then what does
this mean for you

00:16:59.670 --> 00:17:01.620
if you are enrolled in
Google Play App Signing

00:17:01.620 --> 00:17:04.754
and have enabled
these optimizations?

00:17:04.754 --> 00:17:06.420
So it firstly and
most importantly means

00:17:06.420 --> 00:17:08.400
that the APKs we
deliver to your users

00:17:08.400 --> 00:17:13.380
are smaller, saving users'
bandwidth and space on disk.

00:17:13.380 --> 00:17:16.470
It also means that if you were
previously reluctant to add

00:17:16.470 --> 00:17:19.109
support for new architectures
or screen densities

00:17:19.109 --> 00:17:22.560
because you worried about
bloating you APK, then now

00:17:22.560 --> 00:17:24.450
you don't need to worry.

00:17:24.450 --> 00:17:26.730
We've had developers
in the past tell us

00:17:26.730 --> 00:17:29.790
they don't want to add support
for 64-bit architectures

00:17:29.790 --> 00:17:33.210
because it will result in a
significant increase in the APK

00:17:33.210 --> 00:17:36.120
size, but now since
we will only include

00:17:36.120 --> 00:17:39.330
the necessary architectures
for each device in the APK

00:17:39.330 --> 00:17:43.020
we send down, you can add
support for new architectures

00:17:43.020 --> 00:17:46.430
without affecting
APK size for users.

00:17:46.430 --> 00:17:49.540
Finally, if you were previously
building multiple APKs

00:17:49.540 --> 00:17:52.330
for different densities or
different native architectures,

00:17:52.330 --> 00:17:54.100
you won't need to anymore.

00:17:54.100 --> 00:17:56.500
So instead of uploading
four different APKs

00:17:56.500 --> 00:17:58.690
for different native
architectures or six

00:17:58.690 --> 00:18:01.690
different APKs for different
screen densities, or maybe

00:18:01.690 --> 00:18:04.590
you were really diligent
and had 24 different APKs,

00:18:04.590 --> 00:18:06.820
each for a specific native
architecture and screen

00:18:06.820 --> 00:18:08.920
density, now you
don't need to do that.

00:18:08.920 --> 00:18:12.310
Now you can just upload
a single universal APK,

00:18:12.310 --> 00:18:15.259
and Google Play will
do the work for you.

00:18:15.259 --> 00:18:17.800
I'll hand back to James now to
talk about some of the results

00:18:17.800 --> 00:18:20.512
we've seen with some
of our early partners.

00:18:20.512 --> 00:18:22.720
JAMES SMITH: So hopefully
this is pretty cool, right?

00:18:22.720 --> 00:18:25.480
Hopefully for you if
you are using multi APK,

00:18:25.480 --> 00:18:28.210
this is going to change how
you build, how you do things,

00:18:28.210 --> 00:18:31.420
hopefully make
things a lot better.

00:18:31.420 --> 00:18:34.510
So we're just getting
started exploring this area,

00:18:34.510 --> 00:18:36.370
and it's really
early, but we tried it

00:18:36.370 --> 00:18:39.880
out with some apps that are
in our Early Access program,

00:18:39.880 --> 00:18:43.900
and we expect the average
savings to be about 15%.

00:18:43.900 --> 00:18:46.840
However, some apps see
even better results.

00:18:46.840 --> 00:18:51.160
Deliveroo was 33% smaller
after optimizations,

00:18:51.160 --> 00:18:54.280
and the 7 Minute Workout app was
nearly a half smaller at 48%.

00:18:57.369 --> 00:18:59.410
When we talked to developers
about these changes,

00:18:59.410 --> 00:19:00.820
they got really excited.

00:19:00.820 --> 00:19:04.030
One developer said, "We just
put things in the right place

00:19:04.030 --> 00:19:05.860
and Google does
the heavy lifting,"

00:19:05.860 --> 00:19:07.900
and that's exactly
what we're going for.

00:19:07.900 --> 00:19:10.780
You can do this yourself,
but it's complicated,

00:19:10.780 --> 00:19:12.460
and we want to
offer services that

00:19:12.460 --> 00:19:17.470
apply best practices
automatically for developers.

00:19:17.470 --> 00:19:20.460
So how do you try this out?

00:19:20.460 --> 00:19:24.750
Now to get started testing,
the first thing you should know

00:19:24.750 --> 00:19:28.470
is that you can enable app
optimizations for specific APKs

00:19:28.470 --> 00:19:30.750
when you upload them to Play.

00:19:30.750 --> 00:19:32.940
That means that,
for example, you

00:19:32.940 --> 00:19:35.770
could enable optimizations
for a specific app--

00:19:35.770 --> 00:19:38.290
APK, excuse me,
and then try it out

00:19:38.290 --> 00:19:41.020
in your Alpha or Beta channel.

00:19:41.020 --> 00:19:44.860
You are using Alpha and
Beta channels, right?

00:19:44.860 --> 00:19:48.460
We have over 250,000
developers using Alpha Beta,

00:19:48.460 --> 00:19:51.410
and if you aren't already using
it then you probably should be.

00:19:51.410 --> 00:19:53.530
They're a great way to
test out new features

00:19:53.530 --> 00:19:58.570
on a subset of your users before
releasing the APK to everyone.

00:19:58.570 --> 00:20:01.990
Once you're satisfied the
optimizations make sense

00:20:01.990 --> 00:20:06.730
for your app, you can enable
APK optimizations for all APKs

00:20:06.730 --> 00:20:09.550
that you upload.

00:20:09.550 --> 00:20:11.590
If you want to
download and inspect

00:20:11.590 --> 00:20:14.830
an APK that is signed by Play,
you can do this at any time

00:20:14.830 --> 00:20:20.030
once they're generated, before
or after they're released.

00:20:20.030 --> 00:20:22.760
After you upload an APK
to the Play console,

00:20:22.760 --> 00:20:24.620
it generally takes
less than five minutes

00:20:24.620 --> 00:20:27.020
to generate all of
the derived APKs,

00:20:27.020 --> 00:20:28.790
and then you can go
into the new artifact

00:20:28.790 --> 00:20:30.510
library in the Play console.

00:20:30.510 --> 00:20:32.750
You're going to select
the APK that you uploaded

00:20:32.750 --> 00:20:36.200
and click on the Download
button to get this pop up.

00:20:36.200 --> 00:20:39.050
Now you can download
the original APK,

00:20:39.050 --> 00:20:42.860
you can download a derived APK
by entering in the derived ID,

00:20:42.860 --> 00:20:45.350
or you can type in
a specific device

00:20:45.350 --> 00:20:47.795
to get the APK that Play
would send to that device.

00:20:51.729 --> 00:20:54.270
ANTHONY MORRIS: You might also
want to try things out locally

00:20:54.270 --> 00:20:57.180
during development without
uploading to the Play console

00:20:57.180 --> 00:21:02.099
to see how your app will
perform when optimized.

00:21:02.099 --> 00:21:03.890
So there are two ways
you can go about this

00:21:03.890 --> 00:21:05.840
and simulate the
optimizations that we'll

00:21:05.840 --> 00:21:10.260
do on the server side while you
are doing local development.

00:21:10.260 --> 00:21:13.760
One way is you can temporarily
modify your Gradle config

00:21:13.760 --> 00:21:17.150
to output the density and native
architecture optimized APKs,

00:21:17.150 --> 00:21:19.740
just by adding the
line shown here.

00:21:19.740 --> 00:21:21.800
What this will do is it
will cause your Gradle

00:21:21.800 --> 00:21:24.590
build to output multiple
APKs, each targeted

00:21:24.590 --> 00:21:28.370
to a single screen density
and native architecture.

00:21:28.370 --> 00:21:31.340
Or you can build
your universal APK

00:21:31.340 --> 00:21:33.204
that you would upload
to Play, and then

00:21:33.204 --> 00:21:34.620
run a new command
that we've added

00:21:34.620 --> 00:21:38.450
in aapt2 that would
generate the optimized APKs

00:21:38.450 --> 00:21:40.357
from the universal APK.

00:21:40.357 --> 00:21:42.440
This command is actually
what we run on the server

00:21:42.440 --> 00:21:45.890
to generate the optimized APKs
from the APK that you upload.

00:21:49.010 --> 00:21:52.700
One other important thing
to note for local testing

00:21:52.700 --> 00:21:54.860
is that many APIs
and services require

00:21:54.860 --> 00:21:57.500
that you register your signing
certificate of your app

00:21:57.500 --> 00:21:59.090
in order for them to work.

00:21:59.090 --> 00:22:02.450
For example, the Firebase
SDK, the Google Maps API,

00:22:02.450 --> 00:22:06.164
and the Facebook SDK
all require this.

00:22:06.164 --> 00:22:07.830
Now if you're testing
locally and you've

00:22:07.830 --> 00:22:10.970
enrolled in Google Apps signing,
you will likely no longer

00:22:10.970 --> 00:22:12.750
have access to the
app signing key,

00:22:12.750 --> 00:22:14.930
as it will be managed
by Google Play.

00:22:14.930 --> 00:22:17.030
So you're going to be
signing your local builds

00:22:17.030 --> 00:22:19.580
with the upload
key or another key.

00:22:19.580 --> 00:22:22.280
Remember to register this
local key in addition

00:22:22.280 --> 00:22:25.670
to your app signing key with all
the relevant APIs and services

00:22:25.670 --> 00:22:28.610
that your app users
in order to ensure

00:22:28.610 --> 00:22:30.680
that your app will continue
to function correctly

00:22:30.680 --> 00:22:32.820
when testing locally.

00:22:32.820 --> 00:22:36.135
Finally, one other thing is
that we've also updated how

00:22:36.135 --> 00:22:40.970
our in-app purchases
check against--

00:22:40.970 --> 00:22:42.690
checks-- sorry.

00:22:42.690 --> 00:22:45.030
We've also updated our
in-app purchase checks

00:22:45.030 --> 00:22:47.280
to skip the certificate
check for users

00:22:47.280 --> 00:22:49.440
that are registered
as licensed testers

00:22:49.440 --> 00:22:53.435
to make local testing of
in-app purchases easier.

00:22:53.435 --> 00:22:55.810
So if you want to test in-app
purchases without uploading

00:22:55.810 --> 00:22:58.690
an APK to the Play console
or without having it signed

00:22:58.690 --> 00:23:01.270
with the app signing
key, all you need to do

00:23:01.270 --> 00:23:03.970
is register your account as a
licensed tester in the Google

00:23:03.970 --> 00:23:06.270
Play console.

00:23:06.270 --> 00:23:09.714
So over to James now
to wrap things up.

00:23:09.714 --> 00:23:10.380
JAMES SMITH: OK.

00:23:10.380 --> 00:23:12.750
So when can you get
Google Play App Signing?

00:23:12.750 --> 00:23:15.300
Well, it's available today.

00:23:15.300 --> 00:23:17.880
App Optimizations,
we're trialing in beta

00:23:17.880 --> 00:23:19.320
with a few partners
at the moment,

00:23:19.320 --> 00:23:22.720
and we're hoping to widen
the beta in the near future.

00:23:22.720 --> 00:23:24.780
So if you're interested
in Optimizations,

00:23:24.780 --> 00:23:26.730
please go ahead and
sign up for App Signing

00:23:26.730 --> 00:23:27.563
as soon as possible.

00:23:30.050 --> 00:23:32.170
So thank you very
much for listening.

00:23:32.170 --> 00:23:36.250
You can come and see us later
in the Sandbox C across the way,

00:23:36.250 --> 00:23:39.160
but we'll also take questions
just now if you have any.

00:23:39.160 --> 00:23:42.010
There's mics here and
here in the audience.

00:23:42.010 --> 00:23:43.530
Thanks very much.

00:23:43.530 --> 00:23:46.100
[MUSIC PLAYING]

