WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.089 align:start position:0%
 
[Music]

00:00:07.089 --> 00:00:07.099 align:start position:0%
[Music]
 

00:00:07.099 --> 00:00:10.970 align:start position:0%
[Music]
we're<00:00:08.099><c> gonna</c><00:00:08.189><c> talk</c><00:00:08.460><c> about</c><00:00:08.490><c> trash</c><00:00:09.260><c> so</c><00:00:10.260><c> why</c><00:00:10.679><c> are</c>

00:00:10.970 --> 00:00:10.980 align:start position:0%
we're gonna talk about trash so why are
 

00:00:10.980 --> 00:00:13.220 align:start position:0%
we're gonna talk about trash so why are
we<00:00:11.070><c> gonna</c><00:00:11.250><c> talk</c><00:00:11.460><c> about</c><00:00:11.519><c> trash</c><00:00:12.000><c> here</c><00:00:12.840><c> why</c><00:00:13.080><c> don't</c>

00:00:13.220 --> 00:00:13.230 align:start position:0%
we gonna talk about trash here why don't
 

00:00:13.230 --> 00:00:15.289 align:start position:0%
we gonna talk about trash here why don't
we<00:00:13.290><c> yeah</c><00:00:13.769><c> let</c><00:00:13.950><c> me</c><00:00:13.980><c> hear</c><00:00:14.910><c> it</c>

00:00:15.289 --> 00:00:15.299 align:start position:0%
we yeah let me hear it
 

00:00:15.299 --> 00:00:17.269 align:start position:0%
we yeah let me hear it
alright<00:00:15.570><c> so</c><00:00:15.990><c> there's</c><00:00:16.500><c> a</c><00:00:16.560><c> common</c><00:00:16.859><c> phrase</c><00:00:17.070><c> and</c>

00:00:17.269 --> 00:00:17.279 align:start position:0%
alright so there's a common phrase and
 

00:00:17.279 --> 00:00:18.950 align:start position:0%
alright so there's a common phrase and
software<00:00:17.640><c> garbage</c><00:00:18.060><c> in</c><00:00:18.210><c> garbage</c><00:00:18.240><c> out</c><00:00:18.720><c> but</c>

00:00:18.950 --> 00:00:18.960 align:start position:0%
software garbage in garbage out but
 

00:00:18.960 --> 00:00:22.400 align:start position:0%
software garbage in garbage out but
nobody<00:00:19.230><c> ever</c><00:00:19.710><c> says</c><00:00:20.160><c> how</c><00:00:20.609><c> fast</c><00:00:21.240><c> so</c><00:00:22.170><c> we're</c><00:00:22.320><c> gonna</c>

00:00:22.400 --> 00:00:22.410 align:start position:0%
nobody ever says how fast so we're gonna
 

00:00:22.410 --> 00:00:24.320 align:start position:0%
nobody ever says how fast so we're gonna
talk<00:00:22.619><c> about</c><00:00:22.769><c> that</c><00:00:22.949><c> today</c><00:00:23.279><c> and</c><00:00:23.490><c> why</c><00:00:23.699><c> because</c>

00:00:24.320 --> 00:00:24.330 align:start position:0%
talk about that today and why because
 

00:00:24.330 --> 00:00:27.140 align:start position:0%
talk about that today and why because
back<00:00:25.199><c> at</c><00:00:25.410><c> i/o</c><00:00:25.619><c> we</c><00:00:26.070><c> had</c><00:00:26.220><c> this</c><00:00:26.340><c> talk</c><00:00:26.640><c> that</c><00:00:26.939><c> we</c>

00:00:27.140 --> 00:00:27.150 align:start position:0%
back at i/o we had this talk that we
 

00:00:27.150 --> 00:00:28.640 align:start position:0%
back at i/o we had this talk that we
gave<00:00:27.330><c> called</c><00:00:27.570><c> modern</c><00:00:27.869><c> Android</c><00:00:28.199><c> development</c><00:00:28.529><c> I</c>

00:00:28.640 --> 00:00:28.650 align:start position:0%
gave called modern Android development I
 

00:00:28.650 --> 00:00:30.470 align:start position:0%
gave called modern Android development I
have<00:00:28.769><c> to</c><00:00:28.859><c> apologize</c><00:00:29.340><c> for</c><00:00:29.369><c> the</c><00:00:29.640><c> sunglasses</c><00:00:29.849><c> the</c>

00:00:30.470 --> 00:00:30.480 align:start position:0%
have to apologize for the sunglasses the
 

00:00:30.480 --> 00:00:33.049 align:start position:0%
have to apologize for the sunglasses the
Sun<00:00:30.689><c> was</c><00:00:30.900><c> right</c><00:00:31.260><c> there</c><00:00:31.500><c> right</c><00:00:31.679><c> there</c><00:00:32.550><c> really</c>

00:00:33.049 --> 00:00:33.059 align:start position:0%
Sun was right there right there really
 

00:00:33.059 --> 00:00:34.430 align:start position:0%
Sun was right there right there really
annoying<00:00:33.480><c> couldn't</c><00:00:33.809><c> see</c><00:00:33.960><c> a</c><00:00:33.989><c> thing</c>

00:00:34.430 --> 00:00:34.440 align:start position:0%
annoying couldn't see a thing
 

00:00:34.440 --> 00:00:36.590 align:start position:0%
annoying couldn't see a thing
sunglasses<00:00:35.070><c> didn't</c><00:00:35.489><c> actually</c><00:00:35.670><c> help</c><00:00:36.090><c> nor</c><00:00:36.360><c> did</c>

00:00:36.590 --> 00:00:36.600 align:start position:0%
sunglasses didn't actually help nor did
 

00:00:36.600 --> 00:00:40.340 align:start position:0%
sunglasses didn't actually help nor did
they<00:00:36.690><c> make</c><00:00:37.500><c> us</c><00:00:37.649><c> look</c><00:00:37.920><c> any</c><00:00:38.129><c> better</c><00:00:38.840><c> so</c><00:00:39.840><c> we</c>

00:00:40.340 --> 00:00:40.350 align:start position:0%
they make us look any better so we
 

00:00:40.350 --> 00:00:41.600 align:start position:0%
they make us look any better so we
talked<00:00:40.590><c> about</c><00:00:40.680><c> many</c><00:00:41.010><c> things</c><00:00:41.309><c> you</c><00:00:41.579><c> know</c>

00:00:41.600 --> 00:00:41.610 align:start position:0%
talked about many things you know
 

00:00:41.610 --> 00:00:43.850 align:start position:0%
talked about many things you know
Android<00:00:42.210><c> had</c><00:00:43.020><c> certain</c><00:00:43.379><c> development</c>

00:00:43.850 --> 00:00:43.860 align:start position:0%
Android had certain development
 

00:00:43.860 --> 00:00:46.490 align:start position:0%
Android had certain development
practices<00:00:44.370><c> way</c><00:00:44.579><c> back</c><00:00:44.789><c> then</c><00:00:45.059><c> and</c><00:00:45.420><c> Android</c><00:00:46.230><c> has</c>

00:00:46.490 --> 00:00:46.500 align:start position:0%
practices way back then and Android has
 

00:00:46.500 --> 00:00:48.049 align:start position:0%
practices way back then and Android has
changed<00:00:46.950><c> and</c><00:00:47.070><c> devices</c><00:00:47.520><c> have</c><00:00:47.670><c> changed</c><00:00:48.000><c> and</c>

00:00:48.049 --> 00:00:48.059 align:start position:0%
changed and devices have changed and
 

00:00:48.059 --> 00:00:49.639 align:start position:0%
changed and devices have changed and
ecosystems<00:00:48.719><c> has</c><00:00:48.870><c> changed</c><00:00:49.170><c> and</c><00:00:49.289><c> now</c><00:00:49.379><c> we</c><00:00:49.440><c> are</c>

00:00:49.639 --> 00:00:49.649 align:start position:0%
ecosystems has changed and now we are
 

00:00:49.649 --> 00:00:51.740 align:start position:0%
ecosystems has changed and now we are
recommending<00:00:49.980><c> different</c><00:00:50.489><c> practices</c><00:00:51.030><c> all</c><00:00:51.270><c> the</c>

00:00:51.740 --> 00:00:51.750 align:start position:0%
recommending different practices all the
 

00:00:51.750 --> 00:00:52.850 align:start position:0%
recommending different practices all the
stuff<00:00:51.960><c> that</c><00:00:52.110><c> you</c><00:00:52.170><c> may</c><00:00:52.379><c> have</c><00:00:52.500><c> known</c><00:00:52.680><c> about</c>

00:00:52.850 --> 00:00:52.860 align:start position:0%
stuff that you may have known about
 

00:00:52.860 --> 00:00:54.529 align:start position:0%
stuff that you may have known about
Android<00:00:53.340><c> development</c><00:00:53.370><c> may</c><00:00:54.090><c> not</c><00:00:54.300><c> necessarily</c>

00:00:54.529 --> 00:00:54.539 align:start position:0%
Android development may not necessarily
 

00:00:54.539 --> 00:00:56.540 align:start position:0%
Android development may not necessarily
be<00:00:55.079><c> true</c><00:00:55.199><c> today</c><00:00:55.649><c> one</c><00:00:55.980><c> of</c><00:00:56.010><c> the</c><00:00:56.129><c> things</c><00:00:56.340><c> that</c><00:00:56.489><c> we</c>

00:00:56.540 --> 00:00:56.550 align:start position:0%
be true today one of the things that we
 

00:00:56.550 --> 00:00:58.610 align:start position:0%
be true today one of the things that we
talked<00:00:56.760><c> about</c><00:00:56.820><c> in</c><00:00:57.059><c> particular</c><00:00:57.510><c> was</c><00:00:58.140><c> a</c><00:00:58.440><c> lot</c>

00:00:58.610 --> 00:00:58.620 align:start position:0%
talked about in particular was a lot
 

00:00:58.620 --> 00:01:01.130 align:start position:0%
talked about in particular was a lot
about<00:00:58.829><c> memory</c><00:00:59.219><c> and</c><00:00:59.600><c> garbage</c><00:01:00.600><c> collection</c><00:01:00.780><c> we</c>

00:01:01.130 --> 00:01:01.140 align:start position:0%
about memory and garbage collection we
 

00:01:01.140 --> 00:01:04.039 align:start position:0%
about memory and garbage collection we
had<00:01:01.289><c> certain</c><00:01:01.680><c> recommendations</c><00:01:01.890><c> there</c><00:01:02.780><c> so</c><00:01:03.780><c> for</c>

00:01:04.039 --> 00:01:04.049 align:start position:0%
had certain recommendations there so for
 

00:01:04.049 --> 00:01:06.340 align:start position:0%
had certain recommendations there so for
example<00:01:04.530><c> we</c><00:01:04.710><c> said</c><00:01:04.949><c> back</c><00:01:05.250><c> in</c><00:01:05.430><c> the</c><00:01:05.519><c> dalvik</c><00:01:05.700><c> days</c>

00:01:06.340 --> 00:01:06.350 align:start position:0%
example we said back in the dalvik days
 

00:01:06.350 --> 00:01:08.929 align:start position:0%
example we said back in the dalvik days
dalvik<00:01:07.350><c> was</c><00:01:07.530><c> optimized</c><00:01:08.070><c> for</c><00:01:08.310><c> size</c><00:01:08.549><c> it</c><00:01:08.820><c> was</c>

00:01:08.929 --> 00:01:08.939 align:start position:0%
dalvik was optimized for size it was
 

00:01:08.939 --> 00:01:10.700 align:start position:0%
dalvik was optimized for size it was
meant<00:01:09.119><c> to</c><00:01:09.180><c> fit</c><00:01:09.450><c> in</c><00:01:09.659><c> a</c><00:01:09.810><c> very</c><00:01:10.020><c> small</c><00:01:10.320><c> area</c><00:01:10.650><c> it</c>

00:01:10.700 --> 00:01:10.710 align:start position:0%
meant to fit in a very small area it
 

00:01:10.710 --> 00:01:12.350 align:start position:0%
meant to fit in a very small area it
didn't<00:01:10.950><c> have</c><00:01:11.100><c> a</c><00:01:11.130><c> lot</c><00:01:11.310><c> of</c><00:01:11.369><c> area</c><00:01:11.729><c> to</c><00:01:11.820><c> do</c><00:01:12.090><c> things</c>

00:01:12.350 --> 00:01:12.360 align:start position:0%
didn't have a lot of area to do things
 

00:01:12.360 --> 00:01:14.420 align:start position:0%
didn't have a lot of area to do things
like<00:01:12.540><c> äôt</c><00:01:13.110><c> didn't</c><00:01:13.470><c> have</c><00:01:13.560><c> plates</c><00:01:13.799><c> to</c><00:01:13.950><c> stash</c><00:01:14.189><c> the</c>

00:01:14.420 --> 00:01:14.430 align:start position:0%
like äôt didn't have plates to stash the
 

00:01:14.430 --> 00:01:16.190 align:start position:0%
like äôt didn't have plates to stash the
code<00:01:14.670><c> really</c><00:01:15.180><c> needed</c><00:01:15.540><c> to</c><00:01:15.570><c> constrain</c><00:01:15.930><c> memory</c>

00:01:16.190 --> 00:01:16.200 align:start position:0%
code really needed to constrain memory
 

00:01:16.200 --> 00:01:17.840 align:start position:0%
code really needed to constrain memory
the<00:01:16.320><c> optimizations</c><00:01:17.009><c> were</c><00:01:17.189><c> not</c><00:01:17.369><c> optimal</c>

00:01:17.840 --> 00:01:17.850 align:start position:0%
the optimizations were not optimal
 

00:01:17.850 --> 00:01:20.060 align:start position:0%
the optimizations were not optimal
allocations<00:01:18.780><c> collections</c><00:01:19.320><c> unbelievably</c>

00:01:20.060 --> 00:01:20.070 align:start position:0%
allocations collections unbelievably
 

00:01:20.070 --> 00:01:22.070 align:start position:0%
allocations collections unbelievably
expensive<00:01:20.340><c> to</c><00:01:20.759><c> get</c><00:01:20.880><c> GC</c><00:01:21.240><c> for</c><00:01:21.420><c> alloc</c><00:01:21.479><c> all</c><00:01:21.930><c> the</c>

00:01:22.070 --> 00:01:22.080 align:start position:0%
expensive to get GC for alloc all the
 

00:01:22.080 --> 00:01:24.230 align:start position:0%
expensive to get GC for alloc all the
time<00:01:22.290><c> causing</c><00:01:23.070><c> jank</c><00:01:23.310><c> all</c><00:01:23.490><c> over</c><00:01:23.700><c> the</c><00:01:23.820><c> place</c>

00:01:24.230 --> 00:01:24.240 align:start position:0%
time causing jank all over the place
 

00:01:24.240 --> 00:01:26.090 align:start position:0%
time causing jank all over the place
heap<00:01:24.600><c> fragmentation</c><00:01:25.439><c> was</c><00:01:25.590><c> a</c><00:01:25.619><c> problem</c><00:01:25.950><c> so</c>

00:01:26.090 --> 00:01:26.100 align:start position:0%
heap fragmentation was a problem so
 

00:01:26.100 --> 00:01:27.679 align:start position:0%
heap fragmentation was a problem so
really<00:01:26.400><c> the</c><00:01:26.520><c> recommendation</c><00:01:27.150><c> was</c><00:01:27.270><c> to</c><00:01:27.330><c> not</c>

00:01:27.679 --> 00:01:27.689 align:start position:0%
really the recommendation was to not
 

00:01:27.689 --> 00:01:30.140 align:start position:0%
really the recommendation was to not
really<00:01:28.020><c> allocate</c><00:01:28.590><c> anything</c><00:01:29.009><c> ever</c><00:01:29.549><c> if</c><00:01:30.000><c> you</c>

00:01:30.140 --> 00:01:30.150 align:start position:0%
really allocate anything ever if you
 

00:01:30.150 --> 00:01:33.319 align:start position:0%
really allocate anything ever if you
could<00:01:30.329><c> possibly</c><00:01:30.840><c> help</c><00:01:31.140><c> it</c><00:01:31.350><c> and</c><00:01:32.280><c> use</c><00:01:32.909><c> primitive</c>

00:01:33.319 --> 00:01:33.329 align:start position:0%
could possibly help it and use primitive
 

00:01:33.329 --> 00:01:34.880 align:start position:0%
could possibly help it and use primitive
types<00:01:33.540><c> everywhere</c><00:01:33.990><c> because</c><00:01:34.170><c> objects</c><00:01:34.740><c> are</c>

00:01:34.880 --> 00:01:34.890 align:start position:0%
types everywhere because objects are
 

00:01:34.890 --> 00:01:36.260 align:start position:0%
types everywhere because objects are
expensive<00:01:35.280><c> because</c><00:01:35.400><c> you're</c><00:01:35.610><c> allocating</c><00:01:36.000><c> them</c>

00:01:36.260 --> 00:01:36.270 align:start position:0%
expensive because you're allocating them
 

00:01:36.270 --> 00:01:38.870 align:start position:0%
expensive because you're allocating them
avoid<00:01:36.810><c> auto</c><00:01:37.110><c> boxing</c><00:01:37.590><c> all</c><00:01:37.740><c> this</c><00:01:37.890><c> stuff</c><00:01:38.100><c> yes</c><00:01:38.430><c> so</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
avoid auto boxing all this stuff yes so
 

00:01:38.880 --> 00:01:40.399 align:start position:0%
avoid auto boxing all this stuff yes so
I<00:01:38.909><c> need</c><00:01:39.329><c> to</c><00:01:39.420><c> correct</c><00:01:39.659><c> you</c><00:01:39.750><c> once</c><00:01:39.930><c> again</c><00:01:40.079><c> you</c><00:01:40.290><c> say</c>

00:01:40.399 --> 00:01:40.409 align:start position:0%
I need to correct you once again you say
 

00:01:40.409 --> 00:01:41.630 align:start position:0%
I need to correct you once again you say
avoid<00:01:40.590><c> the</c><00:01:40.710><c> locations</c><00:01:41.159><c> whenever</c><00:01:41.430><c> possible</c>

00:01:41.630 --> 00:01:41.640 align:start position:0%
avoid the locations whenever possible
 

00:01:41.640 --> 00:01:44.780 align:start position:0%
avoid the locations whenever possible
unions<00:01:42.329><c> they</c><00:01:42.990><c> don't</c><00:01:43.170><c> yeah</c><00:01:43.619><c> ok</c><00:01:44.250><c> well</c><00:01:44.430><c> it's</c><00:01:44.670><c> the</c>

00:01:44.780 --> 00:01:44.790 align:start position:0%
unions they don't yeah ok well it's the
 

00:01:44.790 --> 00:01:48.230 align:start position:0%
unions they don't yeah ok well it's the
whole<00:01:44.909><c> point</c><00:01:45.180><c> but</c><00:01:45.570><c> but</c><00:01:45.840><c> but</c><00:01:46.259><c> but</c><00:01:46.470><c> but</c><00:01:46.979><c> but</c><00:01:47.240><c> but</c>

00:01:48.230 --> 00:01:48.240 align:start position:0%
whole point but but but but but but but
 

00:01:48.240 --> 00:01:50.660 align:start position:0%
whole point but but but but but but but
they<00:01:48.360><c> take</c><00:01:48.540><c> up</c><00:01:48.689><c> space</c><00:01:48.990><c> right</c><00:01:49.710><c> so</c><00:01:50.100><c> that's</c><00:01:50.490><c> what</c>

00:01:50.660 --> 00:01:50.670 align:start position:0%
they take up space right so that's what
 

00:01:50.670 --> 00:01:53.719 align:start position:0%
they take up space right so that's what
1<00:01:50.939><c> to</c><00:01:51.090><c> 2</c><00:01:51.270><c> K</c><00:01:51.509><c> you</c><00:01:51.750><c> can't</c><00:01:51.960><c> say</c><00:01:52.740><c> video</c><00:01:53.009><c> all</c><00:01:53.549><c> right</c>

00:01:53.719 --> 00:01:53.729 align:start position:0%
1 to 2 K you can't say video all right
 

00:01:53.729 --> 00:01:58.550 align:start position:0%
1 to 2 K you can't say video all right
anyway<00:01:54.329><c> it's</c><00:01:55.049><c> it's</c><00:01:55.380><c> memory</c><00:01:55.829><c> related</c><00:01:57.200><c> so</c><00:01:58.200><c> the</c>

00:01:58.550 --> 00:01:58.560 align:start position:0%
anyway it's it's memory related so the
 

00:01:58.560 --> 00:02:01.249 align:start position:0%
anyway it's it's memory related so the
recommendation<00:01:59.159><c> instead</c><00:01:59.520><c> was</c><00:01:59.820><c> pay</c><00:02:00.810><c> attention</c>

00:02:01.249 --> 00:02:01.259 align:start position:0%
recommendation instead was pay attention
 

00:02:01.259 --> 00:02:02.780 align:start position:0%
recommendation instead was pay attention
to<00:02:01.350><c> art</c><00:02:01.530><c> because</c><00:02:01.799><c> it</c><00:02:01.920><c> turns</c><00:02:02.100><c> out</c><00:02:02.280><c> art</c><00:02:02.549><c> is</c>

00:02:02.780 --> 00:02:02.790 align:start position:0%
to art because it turns out art is
 

00:02:02.790 --> 00:02:04.219 align:start position:0%
to art because it turns out art is
optimized<00:02:03.390><c> for</c><00:02:03.600><c> performance</c><00:02:03.659><c> actually</c>

00:02:04.219 --> 00:02:04.229 align:start position:0%
optimized for performance actually
 

00:02:04.229 --> 00:02:05.510 align:start position:0%
optimized for performance actually
getting<00:02:04.619><c> faster</c><00:02:04.979><c> with</c><00:02:05.130><c> every</c><00:02:05.159><c> release</c>

00:02:05.510 --> 00:02:05.520 align:start position:0%
getting faster with every release
 

00:02:05.520 --> 00:02:07.639 align:start position:0%
getting faster with every release
because<00:02:05.759><c> the</c><00:02:05.880><c> whole</c><00:02:06.030><c> platform</c><00:02:06.299><c> was</c><00:02:06.750><c> built</c><00:02:06.780><c> to</c>

00:02:07.639 --> 00:02:07.649 align:start position:0%
because the whole platform was built to
 

00:02:07.649 --> 00:02:10.190 align:start position:0%
because the whole platform was built to
be<00:02:07.770><c> able</c><00:02:08.039><c> to</c><00:02:08.220><c> optimize</c><00:02:08.729><c> more</c><00:02:09.239><c> and</c><00:02:09.390><c> more</c><00:02:09.569><c> the</c>

00:02:10.190 --> 00:02:10.200 align:start position:0%
be able to optimize more and more the
 

00:02:10.200 --> 00:02:11.960 align:start position:0%
be able to optimize more and more the
more<00:02:10.319><c> the</c><00:02:10.379><c> team</c><00:02:10.619><c> works</c><00:02:10.860><c> on</c><00:02:11.039><c> it</c><00:02:11.220><c> we're</c><00:02:11.879><c> doing</c>

00:02:11.960 --> 00:02:11.970 align:start position:0%
more the team works on it we're doing
 

00:02:11.970 --> 00:02:13.850 align:start position:0%
more the team works on it we're doing
JIT<00:02:12.360><c> as</c><00:02:12.510><c> well</c><00:02:12.750><c> as</c><00:02:12.930><c> a</c><00:02:13.110><c> OT</c><00:02:13.500><c> so</c>

00:02:13.850 --> 00:02:13.860 align:start position:0%
JIT as well as a OT so
 

00:02:13.860 --> 00:02:15.770 align:start position:0%
JIT as well as a OT so
we<00:02:13.980><c> compile</c><00:02:14.610><c> this</c><00:02:14.850><c> code</c><00:02:14.910><c> we</c><00:02:15.300><c> find</c><00:02:15.540><c> out</c><00:02:15.660><c> where</c>

00:02:15.770 --> 00:02:15.780 align:start position:0%
we compile this code we find out where
 

00:02:15.780 --> 00:02:17.540 align:start position:0%
we compile this code we find out where
the<00:02:15.900><c> hot</c><00:02:16.050><c> spots</c><00:02:16.080><c> are</c><00:02:16.530><c> and</c><00:02:16.770><c> we</c><00:02:16.830><c> stash</c><00:02:17.100><c> this</c><00:02:17.310><c> code</c>

00:02:17.540 --> 00:02:17.550 align:start position:0%
the hot spots are and we stash this code
 

00:02:17.550 --> 00:02:19.730 align:start position:0%
the hot spots are and we stash this code
somewhere<00:02:17.820><c> so</c><00:02:18.660><c> we</c><00:02:18.780><c> can</c><00:02:18.900><c> run</c><00:02:19.020><c> that</c><00:02:19.140><c> faster</c><00:02:19.560><c> next</c>

00:02:19.730 --> 00:02:19.740 align:start position:0%
somewhere so we can run that faster next
 

00:02:19.740 --> 00:02:21.310 align:start position:0%
somewhere so we can run that faster next
time<00:02:19.920><c> you</c><00:02:20.010><c> go</c><00:02:20.100><c> through</c><00:02:20.130><c> that</c><00:02:20.460><c> loop</c>

00:02:21.310 --> 00:02:21.320 align:start position:0%
time you go through that loop
 

00:02:21.320 --> 00:02:23.150 align:start position:0%
time you go through that loop
allocations<00:02:22.320><c> and</c><00:02:22.470><c> collections</c><00:02:22.890><c> are</c><00:02:23.010><c> much</c>

00:02:23.150 --> 00:02:23.160 align:start position:0%
allocations and collections are much
 

00:02:23.160 --> 00:02:24.620 align:start position:0%
allocations and collections are much
much<00:02:23.340><c> faster</c><00:02:23.550><c> we'll</c><00:02:23.820><c> go</c><00:02:23.940><c> into</c><00:02:24.150><c> details</c><00:02:24.510><c> about</c>

00:02:24.620 --> 00:02:24.630 align:start position:0%
much faster we'll go into details about
 

00:02:24.630 --> 00:02:26.660 align:start position:0%
much faster we'll go into details about
this<00:02:24.960><c> where</c><00:02:25.800><c> we</c><00:02:26.040><c> have</c><00:02:26.160><c> the</c><00:02:26.250><c> ability</c><00:02:26.370><c> to</c>

00:02:26.660 --> 00:02:26.670 align:start position:0%
this where we have the ability to
 

00:02:26.670 --> 00:02:28.460 align:start position:0%
this where we have the ability to
defragment<00:02:27.300><c> the</c><00:02:27.390><c> heap</c><00:02:27.540><c> and</c><00:02:27.660><c> actually</c><00:02:28.020><c> compact</c>

00:02:28.460 --> 00:02:28.470 align:start position:0%
defragment the heap and actually compact
 

00:02:28.470 --> 00:02:30.320 align:start position:0%
defragment the heap and actually compact
as<00:02:28.650><c> we</c><00:02:28.770><c> go</c><00:02:28.920><c> now</c><00:02:29.130><c> and</c><00:02:29.340><c> there's</c><00:02:29.790><c> a</c><00:02:29.880><c> large</c><00:02:30.120><c> object</c>

00:02:30.320 --> 00:02:30.330 align:start position:0%
as we go now and there's a large object
 

00:02:30.330 --> 00:02:32.300 align:start position:0%
as we go now and there's a large object
heap<00:02:30.690><c> which</c><00:02:30.900><c> means</c><00:02:31.170><c> some</c><00:02:31.590><c> of</c><00:02:31.680><c> the</c><00:02:31.740><c> allocations</c>

00:02:32.300 --> 00:02:32.310 align:start position:0%
heap which means some of the allocations
 

00:02:32.310 --> 00:02:34.610 align:start position:0%
heap which means some of the allocations
amazingly<00:02:32.880><c> faster</c><00:02:33.480><c> and</c><00:02:33.660><c> simpler</c><00:02:34.230><c> than</c><00:02:34.500><c> they</c>

00:02:34.610 --> 00:02:34.620 align:start position:0%
amazingly faster and simpler than they
 

00:02:34.620 --> 00:02:36.170 align:start position:0%
amazingly faster and simpler than they
used<00:02:34.800><c> to</c><00:02:34.860><c> be</c><00:02:34.980><c> so</c><00:02:35.190><c> the</c><00:02:35.310><c> new</c><00:02:35.460><c> recommendations</c>

00:02:36.170 --> 00:02:36.180 align:start position:0%
used to be so the new recommendations
 

00:02:36.180 --> 00:02:38.870 align:start position:0%
used to be so the new recommendations
are<00:02:36.560><c> go</c><00:02:37.560><c> ahead</c><00:02:37.590><c> and</c><00:02:37.980><c> allocate</c><00:02:38.160><c> it's</c><00:02:38.550><c> really</c>

00:02:38.870 --> 00:02:38.880 align:start position:0%
are go ahead and allocate it's really
 

00:02:38.880 --> 00:02:41.150 align:start position:0%
are go ahead and allocate it's really
not<00:02:39.000><c> that</c><00:02:39.060><c> big</c><00:02:39.390><c> a</c><00:02:39.450><c> deal</c><00:02:39.660><c> anymore</c><00:02:40.010><c> still</c><00:02:41.010><c> be</c>

00:02:41.150 --> 00:02:41.160 align:start position:0%
not that big a deal anymore still be
 

00:02:41.160 --> 00:02:43.580 align:start position:0%
not that big a deal anymore still be
concerned<00:02:41.640><c> for</c><00:02:41.790><c> inner</c><00:02:42.209><c> loop</c><00:02:42.480><c> situations</c><00:02:43.170><c> and</c>

00:02:43.580 --> 00:02:43.590 align:start position:0%
concerned for inner loop situations and
 

00:02:43.590 --> 00:02:46.070 align:start position:0%
concerned for inner loop situations and
be<00:02:44.340><c> aware</c><00:02:44.640><c> that</c><00:02:44.700><c> you</c><00:02:44.970><c> are</c><00:02:45.000><c> actually</c><00:02:45.480><c> causing</c>

00:02:46.070 --> 00:02:46.080 align:start position:0%
be aware that you are actually causing
 

00:02:46.080 --> 00:02:47.800 align:start position:0%
be aware that you are actually causing
the<00:02:46.260><c> device</c><00:02:46.530><c> to</c><00:02:46.740><c> do</c><00:02:46.860><c> stuff</c><00:02:47.100><c> you</c><00:02:47.280><c> are</c><00:02:47.400><c> causing</c>

00:02:47.800 --> 00:02:47.810 align:start position:0%
the device to do stuff you are causing
 

00:02:47.810 --> 00:02:50.720 align:start position:0%
the device to do stuff you are causing
battery<00:02:48.810><c> and</c><00:02:48.990><c> CPU</c><00:02:49.440><c> usage</c><00:02:49.860><c> so</c><00:02:50.130><c> you</c><00:02:50.190><c> still</c><00:02:50.550><c> want</c>

00:02:50.720 --> 00:02:50.730 align:start position:0%
battery and CPU usage so you still want
 

00:02:50.730 --> 00:02:52.820 align:start position:0%
battery and CPU usage so you still want
to<00:02:50.820><c> be</c><00:02:50.910><c> aware</c><00:02:51.180><c> of</c><00:02:51.240><c> these</c><00:02:51.480><c> things</c><00:02:51.680><c> but</c><00:02:52.680><c> maybe</c>

00:02:52.820 --> 00:02:52.830 align:start position:0%
to be aware of these things but maybe
 

00:02:52.830 --> 00:02:54.110 align:start position:0%
to be aware of these things but maybe
they're<00:02:53.040><c> not</c><00:02:53.070><c> such</c><00:02:53.459><c> a</c><00:02:53.489><c> big</c><00:02:53.700><c> deal</c><00:02:53.820><c> that</c><00:02:53.880><c> they</c>

00:02:54.110 --> 00:02:54.120 align:start position:0%
they're not such a big deal that they
 

00:02:54.120 --> 00:02:55.670 align:start position:0%
they're not such a big deal that they
should<00:02:54.300><c> affect</c><00:02:54.600><c> your</c><00:02:54.750><c> API</c><00:02:55.140><c> and</c><00:02:55.590><c> your</c>

00:02:55.670 --> 00:02:55.680 align:start position:0%
should affect your API and your
 

00:02:55.680 --> 00:02:57.199 align:start position:0%
should affect your API and your
development<00:02:56.220><c> patterns</c><00:02:56.550><c> the</c><00:02:56.730><c> way</c><00:02:56.880><c> that</c><00:02:57.090><c> they</c>

00:02:57.199 --> 00:02:57.209 align:start position:0%
development patterns the way that they
 

00:02:57.209 --> 00:02:59.750 align:start position:0%
development patterns the way that they
used<00:02:57.420><c> to</c><00:02:57.540><c> however</c><00:02:57.780><c> that</c><00:02:58.650><c> was</c><00:02:58.830><c> like</c><00:02:59.190><c> a</c><00:02:59.370><c> lot</c><00:02:59.730><c> of</c>

00:02:59.750 --> 00:02:59.760 align:start position:0%
used to however that was like a lot of
 

00:02:59.760 --> 00:03:02.330 align:start position:0%
used to however that was like a lot of
really<00:03:00.720><c> terse</c><00:03:01.080><c> information</c><00:03:01.770><c> stuffed</c><00:03:02.070><c> into</c><00:03:02.250><c> a</c>

00:03:02.330 --> 00:03:02.340 align:start position:0%
really terse information stuffed into a
 

00:03:02.340 --> 00:03:03.979 align:start position:0%
really terse information stuffed into a
very<00:03:02.610><c> short</c><00:03:02.880><c> amount</c><00:03:03.120><c> of</c><00:03:03.180><c> time</c><00:03:03.239><c> so</c><00:03:03.630><c> we</c><00:03:03.750><c> thought</c>

00:03:03.979 --> 00:03:03.989 align:start position:0%
very short amount of time so we thought
 

00:03:03.989 --> 00:03:05.630 align:start position:0%
very short amount of time so we thought
maybe<00:03:04.230><c> we</c><00:03:04.380><c> should</c><00:03:04.410><c> do</c><00:03:04.680><c> this</c><00:03:04.860><c> talk</c><00:03:05.100><c> to</c><00:03:05.310><c> actually</c>

00:03:05.630 --> 00:03:05.640 align:start position:0%
maybe we should do this talk to actually
 

00:03:05.640 --> 00:03:07.190 align:start position:0%
maybe we should do this talk to actually
explain<00:03:05.970><c> ourselves</c><00:03:06.120><c> a</c><00:03:06.570><c> little</c><00:03:06.959><c> more</c>

00:03:07.190 --> 00:03:07.200 align:start position:0%
explain ourselves a little more
 

00:03:07.200 --> 00:03:09.680 align:start position:0%
explain ourselves a little more
completely<00:03:07.590><c> and</c><00:03:07.860><c> say</c><00:03:08.070><c> why</c><00:03:08.730><c> is</c><00:03:08.790><c> this</c><00:03:09.030><c> the</c><00:03:09.450><c> case</c>

00:03:09.680 --> 00:03:09.690 align:start position:0%
completely and say why is this the case
 

00:03:09.690 --> 00:03:12.710 align:start position:0%
completely and say why is this the case
maybe<00:03:10.530><c> talk</c><00:03:11.040><c> about</c><00:03:11.310><c> what</c><00:03:11.910><c> art</c><00:03:12.150><c> has</c><00:03:12.390><c> done</c><00:03:12.600><c> to</c>

00:03:12.710 --> 00:03:12.720 align:start position:0%
maybe talk about what art has done to
 

00:03:12.720 --> 00:03:14.330 align:start position:0%
maybe talk about what art has done to
make<00:03:12.840><c> life</c><00:03:13.050><c> better</c><00:03:13.080><c> the</c><00:03:13.500><c> original</c><00:03:13.920><c> idea</c><00:03:14.280><c> for</c>

00:03:14.330 --> 00:03:14.340 align:start position:0%
make life better the original idea for
 

00:03:14.340 --> 00:03:16.460 align:start position:0%
make life better the original idea for
the<00:03:14.580><c> talk</c><00:03:14.760><c> was</c><00:03:14.970><c> actually</c><00:03:15.360><c> okay</c><00:03:15.930><c> well</c><00:03:16.140><c> we</c><00:03:16.290><c> said</c>

00:03:16.460 --> 00:03:16.470 align:start position:0%
the talk was actually okay well we said
 

00:03:16.470 --> 00:03:17.540 align:start position:0%
the talk was actually okay well we said
all<00:03:16.590><c> this</c><00:03:16.739><c> stuff</c><00:03:16.800><c> but</c><00:03:17.130><c> wouldn't</c><00:03:17.310><c> it</c><00:03:17.340><c> be</c><00:03:17.400><c> nice</c>

00:03:17.540 --> 00:03:17.550 align:start position:0%
all this stuff but wouldn't it be nice
 

00:03:17.550 --> 00:03:19.100 align:start position:0%
all this stuff but wouldn't it be nice
if<00:03:17.610><c> we</c><00:03:17.790><c> could</c><00:03:17.910><c> just</c><00:03:18.000><c> write</c><00:03:18.360><c> a</c><00:03:18.390><c> bunch</c><00:03:18.630><c> of</c><00:03:18.780><c> demo</c>

00:03:19.100 --> 00:03:19.110 align:start position:0%
if we could just write a bunch of demo
 

00:03:19.110 --> 00:03:21.380 align:start position:0%
if we could just write a bunch of demo
applications<00:03:19.739><c> and</c><00:03:19.920><c> show</c><00:03:20.489><c> benchmarks</c><00:03:21.120><c> and</c><00:03:21.239><c> say</c>

00:03:21.380 --> 00:03:21.390 align:start position:0%
applications and show benchmarks and say
 

00:03:21.390 --> 00:03:23.509 align:start position:0%
applications and show benchmarks and say
this<00:03:21.780><c> is</c><00:03:22.080><c> why</c><00:03:22.350><c> and</c><00:03:22.739><c> these</c><00:03:22.920><c> are</c><00:03:23.070><c> the</c><00:03:23.160><c> canonical</c>

00:03:23.509 --> 00:03:23.519 align:start position:0%
this is why and these are the canonical
 

00:03:23.519 --> 00:03:26.780 align:start position:0%
this is why and these are the canonical
results<00:03:24.239><c> that</c><00:03:24.660><c> prove</c><00:03:25.019><c> our</c><00:03:25.500><c> premise</c><00:03:26.070><c> and</c><00:03:26.250><c> turns</c>

00:03:26.780 --> 00:03:26.790 align:start position:0%
results that prove our premise and turns
 

00:03:26.790 --> 00:03:29.870 align:start position:0%
results that prove our premise and turns
out<00:03:27.000><c> that</c><00:03:27.420><c> is</c><00:03:27.600><c> really</c><00:03:28.140><c> hard</c><00:03:28.500><c> because</c><00:03:29.250><c> garbage</c>

00:03:29.870 --> 00:03:29.880 align:start position:0%
out that is really hard because garbage
 

00:03:29.880 --> 00:03:32.000 align:start position:0%
out that is really hard because garbage
collection<00:03:30.390><c> by</c><00:03:30.570><c> its</c><00:03:30.780><c> nature</c><00:03:31.019><c> especially</c><00:03:31.500><c> in</c>

00:03:32.000 --> 00:03:32.010 align:start position:0%
collection by its nature especially in
 

00:03:32.010 --> 00:03:34.009 align:start position:0%
collection by its nature especially in
art<00:03:32.310><c> is</c><00:03:32.519><c> concurrent</c><00:03:33.299><c> there's</c><00:03:33.720><c> stuff</c>

00:03:34.009 --> 00:03:34.019 align:start position:0%
art is concurrent there's stuff
 

00:03:34.019 --> 00:03:35.720 align:start position:0%
art is concurrent there's stuff
happening<00:03:34.440><c> in</c><00:03:34.650><c> the</c><00:03:34.799><c> background</c><00:03:35.220><c> all</c><00:03:35.400><c> the</c><00:03:35.549><c> time</c>

00:03:35.720 --> 00:03:35.730 align:start position:0%
happening in the background all the time
 

00:03:35.730 --> 00:03:37.160 align:start position:0%
happening in the background all the time
and<00:03:35.910><c> if</c><00:03:36.000><c> you</c><00:03:36.090><c> want</c><00:03:36.120><c> to</c><00:03:36.510><c> trigger</c><00:03:36.720><c> that</c><00:03:36.900><c> thing</c>

00:03:37.160 --> 00:03:37.170 align:start position:0%
and if you want to trigger that thing
 

00:03:37.170 --> 00:03:40.520 align:start position:0%
and if you want to trigger that thing
right<00:03:37.350><c> now</c><00:03:37.560><c> you</c><00:03:38.459><c> will</c><00:03:38.640><c> not</c><00:03:38.820><c> be</c><00:03:38.880><c> able</c><00:03:39.330><c> to</c><00:03:39.480><c> so</c><00:03:40.200><c> we</c>

00:03:40.520 --> 00:03:40.530 align:start position:0%
right now you will not be able to so we
 

00:03:40.530 --> 00:03:41.870 align:start position:0%
right now you will not be able to so we
made<00:03:40.709><c> an</c><00:03:40.830><c> attempt</c><00:03:41.160><c> to</c><00:03:41.220><c> write</c><00:03:41.430><c> some</c><00:03:41.670><c> demo</c>

00:03:41.870 --> 00:03:41.880 align:start position:0%
made an attempt to write some demo
 

00:03:41.880 --> 00:03:43.310 align:start position:0%
made an attempt to write some demo
applications<00:03:42.540><c> you</c><00:03:42.660><c> will</c><00:03:42.780><c> see</c><00:03:42.959><c> some</c><00:03:43.170><c> of</c><00:03:43.200><c> the</c>

00:03:43.310 --> 00:03:43.320 align:start position:0%
applications you will see some of the
 

00:03:43.320 --> 00:03:45.410 align:start position:0%
applications you will see some of the
results<00:03:43.709><c> here</c><00:03:43.920><c> but</c><00:03:44.310><c> we</c><00:03:44.430><c> realized</c><00:03:44.820><c> we</c><00:03:45.299><c> don't</c>

00:03:45.410 --> 00:03:45.420 align:start position:0%
results here but we realized we don't
 

00:03:45.420 --> 00:03:47.140 align:start position:0%
results here but we realized we don't
really<00:03:45.720><c> have</c><00:03:45.959><c> enough</c><00:03:45.989><c> canonical</c>

00:03:47.140 --> 00:03:47.150 align:start position:0%
really have enough canonical
 

00:03:47.150 --> 00:03:49.250 align:start position:0%
really have enough canonical
deterministic<00:03:48.150><c> data</c><00:03:48.390><c> to</c><00:03:48.600><c> show</c><00:03:48.780><c> you</c><00:03:48.840><c> so</c>

00:03:49.250 --> 00:03:49.260 align:start position:0%
deterministic data to show you so
 

00:03:49.260 --> 00:03:50.390 align:start position:0%
deterministic data to show you so
instead<00:03:49.560><c> we're</c><00:03:49.739><c> going</c><00:03:49.860><c> to</c><00:03:49.920><c> tell</c><00:03:50.130><c> you</c><00:03:50.160><c> the</c>

00:03:50.390 --> 00:03:50.400 align:start position:0%
instead we're going to tell you the
 

00:03:50.400 --> 00:03:52.340 align:start position:0%
instead we're going to tell you the
background<00:03:50.580><c> of</c><00:03:51.000><c> why</c><00:03:51.570><c> it's</c><00:03:51.840><c> difficult</c><00:03:52.049><c> to</c>

00:03:52.340 --> 00:03:52.350 align:start position:0%
background of why it's difficult to
 

00:03:52.350 --> 00:03:53.900 align:start position:0%
background of why it's difficult to
write<00:03:52.500><c> these</c><00:03:52.650><c> things</c><00:03:52.890><c> because</c><00:03:53.400><c> everything</c><00:03:53.670><c> is</c>

00:03:53.900 --> 00:03:53.910 align:start position:0%
write these things because everything is
 

00:03:53.910 --> 00:03:55.280 align:start position:0%
write these things because everything is
happening<00:03:54.150><c> magically</c><00:03:54.750><c> for</c><00:03:54.930><c> you</c><00:03:55.080><c> in</c><00:03:55.200><c> the</c>

00:03:55.280 --> 00:03:55.290 align:start position:0%
happening magically for you in the
 

00:03:55.290 --> 00:03:57.590 align:start position:0%
happening magically for you in the
background<00:03:55.700><c> so</c><00:03:56.700><c> first</c><00:03:57.060><c> of</c><00:03:57.180><c> all</c><00:03:57.269><c> let's</c><00:03:57.480><c> talk</c>

00:03:57.590 --> 00:03:57.600 align:start position:0%
background so first of all let's talk
 

00:03:57.600 --> 00:03:59.750 align:start position:0%
background so first of all let's talk
about<00:03:57.900><c> memory</c><00:03:58.260><c> we</c><00:03:58.920><c> see</c><00:03:59.100><c> a</c><00:03:59.130><c> couple</c><00:03:59.489><c> of</c><00:03:59.580><c> simple</c>

00:03:59.750 --> 00:03:59.760 align:start position:0%
about memory we see a couple of simple
 

00:03:59.760 --> 00:04:01.580 align:start position:0%
about memory we see a couple of simple
lines<00:04:00.060><c> of</c><00:04:00.269><c> code</c><00:04:00.480><c> here</c><00:04:00.780><c> we</c><00:04:00.959><c> have</c><00:04:01.110><c> a</c><00:04:01.140><c> primitive</c>

00:04:01.580 --> 00:04:01.590 align:start position:0%
lines of code here we have a primitive
 

00:04:01.590 --> 00:04:03.259 align:start position:0%
lines of code here we have a primitive
type<00:04:01.799><c> here</c><00:04:02.280><c> is</c><00:04:02.310><c> foo</c><00:04:02.610><c> we're</c><00:04:02.820><c> gonna</c><00:04:02.910><c> set</c><00:04:03.150><c> it</c>

00:04:03.259 --> 00:04:03.269 align:start position:0%
type here is foo we're gonna set it
 

00:04:03.269 --> 00:04:04.699 align:start position:0%
type here is foo we're gonna set it
equal<00:04:03.360><c> to</c><00:04:03.600><c> five</c><00:04:03.810><c> and</c><00:04:04.140><c> then</c><00:04:04.200><c> we're</c><00:04:04.380><c> going</c><00:04:04.500><c> to</c>

00:04:04.699 --> 00:04:04.709 align:start position:0%
equal to five and then we're going to
 

00:04:04.709 --> 00:04:06.350 align:start position:0%
equal to five and then we're going to
allocate<00:04:05.130><c> an</c><00:04:05.340><c> object</c><00:04:05.700><c> here</c><00:04:05.880><c> well</c><00:04:06.030><c> there</c><00:04:06.269><c> are</c>

00:04:06.350 --> 00:04:06.360 align:start position:0%
allocate an object here well there are
 

00:04:06.360 --> 00:04:07.850 align:start position:0%
allocate an object here well there are
different<00:04:06.690><c> kinds</c><00:04:07.019><c> of</c><00:04:07.080><c> memory</c><00:04:07.350><c> in</c><00:04:07.440><c> the</c><00:04:07.530><c> system</c>

00:04:07.850 --> 00:04:07.860 align:start position:0%
different kinds of memory in the system
 

00:04:07.860 --> 00:04:10.009 align:start position:0%
different kinds of memory in the system
and<00:04:08.010><c> different</c><00:04:08.100><c> implications</c><00:04:08.610><c> so</c><00:04:09.570><c> if</c><00:04:09.870><c> we're</c>

00:04:10.009 --> 00:04:10.019 align:start position:0%
and different implications so if we're
 

00:04:10.019 --> 00:04:11.479 align:start position:0%
and different implications so if we're
going<00:04:10.140><c> to</c><00:04:10.260><c> have</c><00:04:10.380><c> a</c><00:04:10.410><c> primitive</c><00:04:10.860><c> type</c><00:04:11.070><c> that</c><00:04:11.310><c> may</c>

00:04:11.479 --> 00:04:11.489 align:start position:0%
going to have a primitive type that may
 

00:04:11.489 --> 00:04:13.699 align:start position:0%
going to have a primitive type that may
show<00:04:11.730><c> up</c><00:04:11.910><c> in</c><00:04:12.090><c> the</c><00:04:12.299><c> stack</c><00:04:12.570><c> or</c><00:04:12.810><c> it</c><00:04:13.230><c> may</c><00:04:13.350><c> show</c><00:04:13.530><c> up</c>

00:04:13.699 --> 00:04:13.709 align:start position:0%
show up in the stack or it may show up
 

00:04:13.709 --> 00:04:17.259 align:start position:0%
show up in the stack or it may show up
in<00:04:13.860><c> registers</c><00:04:14.370><c> dalvik</c><00:04:15.329><c> was</c><00:04:15.510><c> a</c><00:04:15.720><c> register</c><00:04:16.229><c> based</c>

00:04:17.259 --> 00:04:17.269 align:start position:0%
in registers dalvik was a register based
 

00:04:17.269 --> 00:04:19.130 align:start position:0%
in registers dalvik was a register based
allocation<00:04:18.269><c> system</c><00:04:18.660><c> so</c><00:04:18.810><c> it</c><00:04:18.870><c> would</c><00:04:18.959><c> actually</c>

00:04:19.130 --> 00:04:19.140 align:start position:0%
allocation system so it would actually
 

00:04:19.140 --> 00:04:21.170 align:start position:0%
allocation system so it would actually
pop<00:04:19.470><c> it</c><00:04:19.650><c> in</c><00:04:19.739><c> over</c><00:04:19.979><c> there</c><00:04:20.100><c> but</c><00:04:20.669><c> whether</c><00:04:20.970><c> it</c>

00:04:21.170 --> 00:04:21.180 align:start position:0%
pop it in over there but whether it
 

00:04:21.180 --> 00:04:22.610 align:start position:0%
pop it in over there but whether it
shows<00:04:21.359><c> up</c><00:04:21.570><c> in</c><00:04:21.660><c> the</c><00:04:21.720><c> stack</c><00:04:21.989><c> or</c><00:04:22.169><c> the</c><00:04:22.260><c> register</c>

00:04:22.610 --> 00:04:22.620 align:start position:0%
shows up in the stack or the register
 

00:04:22.620 --> 00:04:24.080 align:start position:0%
shows up in the stack or the register
you<00:04:22.650><c> can</c><00:04:22.800><c> think</c><00:04:23.099><c> of</c><00:04:23.160><c> it</c><00:04:23.250><c> as</c><00:04:23.280><c> essentially</c><00:04:23.849><c> free</c>

00:04:24.080 --> 00:04:24.090 align:start position:0%
you can think of it as essentially free
 

00:04:24.090 --> 00:04:25.969 align:start position:0%
you can think of it as essentially free
it's<00:04:24.270><c> kind</c><00:04:24.479><c> of</c><00:04:24.510><c> allocated</c><00:04:25.169><c> at</c><00:04:25.320><c> compile</c><00:04:25.830><c> time</c>

00:04:25.969 --> 00:04:25.979 align:start position:0%
it's kind of allocated at compile time
 

00:04:25.979 --> 00:04:27.629 align:start position:0%
it's kind of allocated at compile time
and<00:04:26.460><c> says</c><00:04:26.880><c> when</c><00:04:27.090><c> I</c><00:04:27.120><c> run</c><00:04:27.390><c> this</c>

00:04:27.629 --> 00:04:27.639 align:start position:0%
and says when I run this
 

00:04:27.639 --> 00:04:28.800 align:start position:0%
and says when I run this
line<00:04:27.729><c> of</c><00:04:27.849><c> code</c><00:04:27.999><c> here's</c><00:04:28.330><c> where</c><00:04:28.509><c> I'm</c><00:04:28.629><c> gonna</c>

00:04:28.800 --> 00:04:28.810 align:start position:0%
line of code here's where I'm gonna
 

00:04:28.810 --> 00:04:30.629 align:start position:0%
line of code here's where I'm gonna
stick<00:04:29.080><c> this</c><00:04:29.110><c> thing</c><00:04:29.439><c> it</c><00:04:29.860><c> didn't</c><00:04:30.159><c> need</c><00:04:30.249><c> to</c><00:04:30.310><c> find</c>

00:04:30.629 --> 00:04:30.639 align:start position:0%
stick this thing it didn't need to find
 

00:04:30.639 --> 00:04:32.369 align:start position:0%
stick this thing it didn't need to find
space<00:04:30.939><c> for</c><00:04:30.999><c> it</c><00:04:31.270><c> anywhere</c><00:04:31.569><c> it</c><00:04:31.780><c> knows</c><00:04:32.050><c> that</c><00:04:32.080><c> it</c>

00:04:32.369 --> 00:04:32.379 align:start position:0%
space for it anywhere it knows that it
 

00:04:32.379 --> 00:04:34.619 align:start position:0%
space for it anywhere it knows that it
has<00:04:32.409><c> space</c><00:04:32.860><c> on</c><00:04:33.069><c> the</c><00:04:33.610><c> stack</c><00:04:33.849><c> sort</c><00:04:34.270><c> of</c><00:04:34.360><c> you</c><00:04:34.509><c> can</c>

00:04:34.619 --> 00:04:34.629 align:start position:0%
has space on the stack sort of you can
 

00:04:34.629 --> 00:04:36.390 align:start position:0%
has space on the stack sort of you can
think<00:04:34.840><c> of</c><00:04:34.900><c> that</c><00:04:34.990><c> it's</c><00:04:35.169><c> kind</c><00:04:35.349><c> of</c><00:04:35.409><c> limited</c>

00:04:36.390 --> 00:04:36.400 align:start position:0%
think of that it's kind of limited
 

00:04:36.400 --> 00:04:39.689 align:start position:0%
think of that it's kind of limited
sorry<00:04:37.029><c> limitless</c><00:04:37.599><c> storage</c><00:04:38.379><c> space</c><00:04:39.039><c> as</c><00:04:39.279><c> well</c><00:04:39.490><c> as</c>

00:04:39.689 --> 00:04:39.699 align:start position:0%
sorry limitless storage space as well as
 

00:04:39.699 --> 00:04:41.459 align:start position:0%
sorry limitless storage space as well as
the<00:04:39.819><c> registers</c><00:04:40.210><c> it'll</c><00:04:40.509><c> basically</c><00:04:40.810><c> find</c><00:04:41.349><c> a</c>

00:04:41.459 --> 00:04:41.469 align:start position:0%
the registers it'll basically find a
 

00:04:41.469 --> 00:04:43.260 align:start position:0%
the registers it'll basically find a
copy<00:04:41.680><c> hole</c><00:04:41.919><c> to</c><00:04:42.039><c> stash</c><00:04:42.249><c> that</c><00:04:42.490><c> thing</c><00:04:42.729><c> it's</c><00:04:42.999><c> free</c>

00:04:43.260 --> 00:04:43.270 align:start position:0%
copy hole to stash that thing it's free
 

00:04:43.270 --> 00:04:46.140 align:start position:0%
copy hole to stash that thing it's free
however<00:04:43.779><c> when</c><00:04:44.349><c> you</c><00:04:44.499><c> allocate</c><00:04:44.710><c> any</c><00:04:45.279><c> other</c><00:04:45.610><c> sort</c>

00:04:46.140 --> 00:04:46.150 align:start position:0%
however when you allocate any other sort
 

00:04:46.150 --> 00:04:48.510 align:start position:0%
however when you allocate any other sort
of<00:04:46.210><c> thing</c><00:04:46.479><c> when</c><00:04:46.659><c> you</c><00:04:46.749><c> say</c><00:04:46.960><c> new</c><00:04:47.229><c> object</c><00:04:47.889><c> then</c><00:04:48.430><c> it</c>

00:04:48.510 --> 00:04:48.520 align:start position:0%
of thing when you say new object then it
 

00:04:48.520 --> 00:04:50.489 align:start position:0%
of thing when you say new object then it
needs<00:04:48.699><c> to</c><00:04:48.789><c> find</c><00:04:49.120><c> space</c><00:04:49.389><c> for</c><00:04:49.659><c> it</c><00:04:49.749><c> in</c><00:04:49.900><c> the</c><00:04:50.050><c> heap</c>

00:04:50.489 --> 00:04:50.499 align:start position:0%
needs to find space for it in the heap
 

00:04:50.499 --> 00:04:52.409 align:start position:0%
needs to find space for it in the heap
which<00:04:50.889><c> means</c><00:04:51.129><c> it</c><00:04:51.310><c> needs</c><00:04:51.490><c> to</c><00:04:51.639><c> figure</c><00:04:51.909><c> out</c><00:04:52.120><c> where</c>

00:04:52.409 --> 00:04:52.419 align:start position:0%
which means it needs to figure out where
 

00:04:52.419 --> 00:04:54.809 align:start position:0%
which means it needs to figure out where
it's<00:04:52.689><c> going</c><00:04:52.960><c> to</c><00:04:52.990><c> fit</c><00:04:53.319><c> among</c><00:04:53.949><c> the</c><00:04:54.279><c> other</c><00:04:54.490><c> things</c>

00:04:54.809 --> 00:04:54.819 align:start position:0%
it's going to fit among the other things
 

00:04:54.819 --> 00:04:56.760 align:start position:0%
it's going to fit among the other things
that<00:04:54.999><c> already</c><00:04:55.150><c> occupy</c><00:04:55.749><c> the</c><00:04:55.810><c> heap</c><00:04:56.139><c> then</c><00:04:56.499><c> it'll</c>

00:04:56.760 --> 00:04:56.770 align:start position:0%
that already occupy the heap then it'll
 

00:04:56.770 --> 00:04:58.080 align:start position:0%
that already occupy the heap then it'll
find<00:04:56.919><c> space</c><00:04:57.219><c> down</c><00:04:57.430><c> there</c><00:04:57.639><c> so</c><00:04:57.849><c> that's</c><00:04:58.029><c> the</c>

00:04:58.080 --> 00:04:58.090 align:start position:0%
find space down there so that's the
 

00:04:58.090 --> 00:05:00.839 align:start position:0%
find space down there so that's the
basic<00:04:58.539><c> memory</c><00:04:59.169><c> system</c><00:04:59.770><c> of</c><00:04:59.919><c> the</c><00:05:00.189><c> runtime</c><00:05:00.610><c> and</c>

00:05:00.839 --> 00:05:00.849 align:start position:0%
basic memory system of the runtime and
 

00:05:00.849 --> 00:05:04.529 align:start position:0%
basic memory system of the runtime and
the<00:05:01.270><c> computer</c><00:05:01.870><c> overall</c><00:05:02.490><c> so</c><00:05:03.490><c> the</c><00:05:04.150><c> idea</c><00:05:04.479><c> of</c>

00:05:04.529 --> 00:05:04.539 align:start position:0%
the computer overall so the idea of
 

00:05:04.539 --> 00:05:06.779 align:start position:0%
the computer overall so the idea of
garbage<00:05:04.990><c> collection</c><00:05:05.279><c> well</c><00:05:06.279><c> we've</c><00:05:06.610><c> all</c><00:05:06.759><c> been</c>

00:05:06.779 --> 00:05:06.789 align:start position:0%
garbage collection well we've all been
 

00:05:06.789 --> 00:05:08.249 align:start position:0%
garbage collection well we've all been
doing<00:05:07.120><c> garbage</c><00:05:07.509><c> question</c><00:05:07.840><c> even</c><00:05:08.020><c> before</c>

00:05:08.249 --> 00:05:08.259 align:start position:0%
doing garbage question even before
 

00:05:08.259 --> 00:05:10.379 align:start position:0%
doing garbage question even before
higher-level<00:05:08.949><c> languages</c><00:05:09.520><c> like</c><00:05:09.819><c> Java</c><00:05:10.240><c> and</c>

00:05:10.379 --> 00:05:10.389 align:start position:0%
higher-level languages like Java and
 

00:05:10.389 --> 00:05:13.559 align:start position:0%
higher-level languages like Java and
Kotlin<00:05:10.870><c> if</c><00:05:11.259><c> you're</c><00:05:11.439><c> writing</c><00:05:11.620><c> C++</c><00:05:12.340><c> code</c><00:05:12.610><c> then</c>

00:05:13.559 --> 00:05:13.569 align:start position:0%
Kotlin if you're writing C++ code then
 

00:05:13.569 --> 00:05:15.480 align:start position:0%
Kotlin if you're writing C++ code then
you<00:05:13.870><c> can</c><00:05:14.020><c> do</c><00:05:14.139><c> an</c><00:05:14.259><c> allocation</c><00:05:14.680><c> like</c><00:05:15.009><c> this</c><00:05:15.250><c> and</c>

00:05:15.480 --> 00:05:15.490 align:start position:0%
you can do an allocation like this and
 

00:05:15.490 --> 00:05:17.339 align:start position:0%
you can do an allocation like this and
then<00:05:15.879><c> you</c><00:05:16.000><c> can</c><00:05:16.180><c> use</c><00:05:16.479><c> you</c><00:05:16.750><c> can</c><00:05:16.810><c> write</c><00:05:17.020><c> the</c><00:05:17.139><c> code</c>

00:05:17.339 --> 00:05:17.349 align:start position:0%
then you can use you can write the code
 

00:05:17.349 --> 00:05:18.779 align:start position:0%
then you can use you can write the code
that<00:05:17.529><c> actually</c><00:05:17.860><c> uses</c><00:05:18.069><c> that</c><00:05:18.250><c> object</c><00:05:18.759><c> that</c>

00:05:18.779 --> 00:05:18.789 align:start position:0%
that actually uses that object that
 

00:05:18.789 --> 00:05:21.300 align:start position:0%
that actually uses that object that
you've<00:05:18.969><c> allocated</c><00:05:19.509><c> and</c><00:05:20.319><c> then</c><00:05:20.529><c> if</c><00:05:20.860><c> you</c><00:05:21.039><c> don't</c>

00:05:21.300 --> 00:05:21.310 align:start position:0%
you've allocated and then if you don't
 

00:05:21.310 --> 00:05:23.010 align:start position:0%
you've allocated and then if you don't
do<00:05:21.580><c> anything</c><00:05:21.879><c> else</c><00:05:22.210><c> you've</c><00:05:22.449><c> just</c><00:05:22.629><c> leaked</c><00:05:22.900><c> an</c>

00:05:23.010 --> 00:05:23.020 align:start position:0%
do anything else you've just leaked an
 

00:05:23.020 --> 00:05:25.350 align:start position:0%
do anything else you've just leaked an
object<00:05:23.379><c> you're</c><00:05:23.529><c> taking</c><00:05:23.949><c> up</c><00:05:24.069><c> space</c><00:05:24.250><c> in</c><00:05:24.729><c> memory</c>

00:05:25.350 --> 00:05:25.360 align:start position:0%
object you're taking up space in memory
 

00:05:25.360 --> 00:05:27.420 align:start position:0%
object you're taking up space in memory
somewhere<00:05:26.050><c> that</c><00:05:26.439><c> eventually</c><00:05:27.189><c> is</c><00:05:27.249><c> going</c><00:05:27.370><c> to</c>

00:05:27.420 --> 00:05:27.430 align:start position:0%
somewhere that eventually is going to
 

00:05:27.430 --> 00:05:29.339 align:start position:0%
somewhere that eventually is going to
cause<00:05:27.639><c> you</c><00:05:27.819><c> to</c><00:05:27.849><c> run</c><00:05:28.120><c> out</c><00:05:28.300><c> of</c><00:05:28.330><c> memory</c><00:05:28.629><c> right</c><00:05:29.199><c> so</c>

00:05:29.339 --> 00:05:29.349 align:start position:0%
cause you to run out of memory right so
 

00:05:29.349 --> 00:05:31.019 align:start position:0%
cause you to run out of memory right so
what<00:05:29.499><c> you</c><00:05:29.589><c> need</c><00:05:29.740><c> to</c><00:05:29.800><c> do</c><00:05:29.979><c> is</c><00:05:30.129><c> actually</c><00:05:30.339><c> free</c><00:05:30.849><c> the</c>

00:05:31.019 --> 00:05:31.029 align:start position:0%
what you need to do is actually free the
 

00:05:31.029 --> 00:05:32.879 align:start position:0%
what you need to do is actually free the
object<00:05:31.419><c> so</c><00:05:31.569><c> you</c><00:05:31.599><c> delete</c><00:05:31.990><c> the</c><00:05:32.139><c> thing</c><00:05:32.349><c> you</c>

00:05:32.879 --> 00:05:32.889 align:start position:0%
object so you delete the thing you
 

00:05:32.889 --> 00:05:34.290 align:start position:0%
object so you delete the thing you
reclaim<00:05:33.279><c> that</c><00:05:33.310><c> memory</c><00:05:33.759><c> so</c><00:05:33.879><c> you're</c><00:05:33.969><c> basically</c>

00:05:34.290 --> 00:05:34.300 align:start position:0%
reclaim that memory so you're basically
 

00:05:34.300 --> 00:05:36.839 align:start position:0%
reclaim that memory so you're basically
doing<00:05:34.569><c> manual</c><00:05:35.020><c> garbage</c><00:05:35.379><c> collection</c><00:05:35.860><c> here</c><00:05:36.129><c> but</c>

00:05:36.839 --> 00:05:36.849 align:start position:0%
doing manual garbage collection here but
 

00:05:36.849 --> 00:05:38.969 align:start position:0%
doing manual garbage collection here but
sometimes<00:05:37.330><c> you</c><00:05:37.839><c> forget</c><00:05:38.050><c> that</c><00:05:38.319><c> you</c><00:05:38.439><c> freed</c><00:05:38.800><c> that</c>

00:05:38.969 --> 00:05:38.979 align:start position:0%
sometimes you forget that you freed that
 

00:05:38.979 --> 00:05:40.439 align:start position:0%
sometimes you forget that you freed that
over<00:05:39.279><c> there</c><00:05:39.460><c> and</c><00:05:39.759><c> then</c><00:05:39.909><c> in</c><00:05:40.060><c> this</c><00:05:40.150><c> other</c><00:05:40.389><c> place</c>

00:05:40.439 --> 00:05:40.449 align:start position:0%
over there and then in this other place
 

00:05:40.449 --> 00:05:42.240 align:start position:0%
over there and then in this other place
over<00:05:40.930><c> there</c><00:05:41.020><c> you</c><00:05:41.259><c> continue</c><00:05:41.740><c> using</c><00:05:41.949><c> that</c>

00:05:42.240 --> 00:05:42.250 align:start position:0%
over there you continue using that
 

00:05:42.250 --> 00:05:46.800 align:start position:0%
over there you continue using that
object<00:05:42.430><c> and</c><00:05:42.819><c> then</c><00:05:43.360><c> you</c><00:05:43.509><c> crash</c><00:05:44.129><c> may</c><00:05:45.129><c> be</c><00:05:45.330><c> so</c><00:05:46.330><c> very</c>

00:05:46.800 --> 00:05:46.810 align:start position:0%
object and then you crash may be so very
 

00:05:46.810 --> 00:05:48.540 align:start position:0%
object and then you crash may be so very
non<00:05:47.110><c> deterministic</c><00:05:47.680><c> system</c><00:05:48.189><c> you</c><00:05:48.399><c> are</c>

00:05:48.540 --> 00:05:48.550 align:start position:0%
non deterministic system you are
 

00:05:48.550 --> 00:05:50.129 align:start position:0%
non deterministic system you are
responsible<00:05:49.240><c> for</c><00:05:49.389><c> managing</c><00:05:49.539><c> your</c><00:05:49.870><c> own</c>

00:05:50.129 --> 00:05:50.139 align:start position:0%
responsible for managing your own
 

00:05:50.139 --> 00:05:52.260 align:start position:0%
responsible for managing your own
garbage<00:05:50.860><c> your</c><00:05:51.279><c> own</c><00:05:51.399><c> allocations</c><00:05:52.089><c> and</c>

00:05:52.260 --> 00:05:52.270 align:start position:0%
garbage your own allocations and
 

00:05:52.270 --> 00:05:54.600 align:start position:0%
garbage your own allocations and
collections<00:05:52.839><c> tends</c><00:05:53.469><c> to</c><00:05:53.649><c> be</c><00:05:53.770><c> tedious</c><00:05:54.009><c> tends</c><00:05:54.460><c> to</c>

00:05:54.600 --> 00:05:54.610 align:start position:0%
collections tends to be tedious tends to
 

00:05:54.610 --> 00:05:57.540 align:start position:0%
collections tends to be tedious tends to
be<00:05:54.729><c> very</c><00:05:54.939><c> error-prone</c><00:05:55.649><c> and</c><00:05:56.649><c> so</c><00:05:56.949><c> higher-level</c>

00:05:57.540 --> 00:05:57.550 align:start position:0%
be very error-prone and so higher-level
 

00:05:57.550 --> 00:06:00.029 align:start position:0%
be very error-prone and so higher-level
languages<00:05:58.089><c> came</c><00:05:58.330><c> along</c><00:05:58.599><c> so</c><00:05:58.629><c> we</c><00:05:58.960><c> have</c><00:05:59.139><c> language</c>

00:06:00.029 --> 00:06:00.039 align:start position:0%
languages came along so we have language
 

00:06:00.039 --> 00:06:02.010 align:start position:0%
languages came along so we have language
like<00:06:00.310><c> Java</c><00:06:00.639><c> where</c><00:06:00.939><c> you</c><00:06:01.149><c> allocate</c><00:06:01.539><c> an</c><00:06:01.629><c> object</c>

00:06:02.010 --> 00:06:02.020 align:start position:0%
like Java where you allocate an object
 

00:06:02.020 --> 00:06:02.999 align:start position:0%
like Java where you allocate an object
and<00:06:02.199><c> then</c><00:06:02.319><c> you</c><00:06:02.379><c> write</c><00:06:02.680><c> the</c><00:06:02.710><c> code</c><00:06:02.979><c> that</c>

00:06:02.999 --> 00:06:03.009 align:start position:0%
and then you write the code that
 

00:06:03.009 --> 00:06:04.920 align:start position:0%
and then you write the code that
actually<00:06:03.219><c> uses</c><00:06:03.699><c> that</c><00:06:04.000><c> thing</c><00:06:04.270><c> and</c><00:06:04.449><c> then</c>

00:06:04.920 --> 00:06:04.930 align:start position:0%
actually uses that thing and then
 

00:06:04.930 --> 00:06:06.899 align:start position:0%
actually uses that thing and then
eventually<00:06:05.199><c> it</c><00:06:05.649><c> is</c><00:06:05.800><c> freed</c><00:06:06.129><c> and</c><00:06:06.430><c> if</c><00:06:06.789><c> you</c>

00:06:06.899 --> 00:06:06.909 align:start position:0%
eventually it is freed and if you
 

00:06:06.909 --> 00:06:09.240 align:start position:0%
eventually it is freed and if you
continue<00:06:07.479><c> using</c><00:06:07.689><c> it</c><00:06:07.990><c> then</c><00:06:08.649><c> you</c><00:06:08.830><c> still</c><00:06:09.039><c> have</c><00:06:09.069><c> a</c>

00:06:09.240 --> 00:06:09.250 align:start position:0%
continue using it then you still have a
 

00:06:09.250 --> 00:06:10.829 align:start position:0%
continue using it then you still have a
reference<00:06:09.610><c> to</c><00:06:09.759><c> this</c><00:06:09.909><c> object</c><00:06:10.149><c> which</c><00:06:10.569><c> means</c>

00:06:10.829 --> 00:06:10.839 align:start position:0%
reference to this object which means
 

00:06:10.839 --> 00:06:12.990 align:start position:0%
reference to this object which means
it's<00:06:11.620><c> going</c><00:06:11.949><c> to</c><00:06:12.039><c> eventually</c><00:06:12.250><c> be</c><00:06:12.669><c> freed</c>

00:06:12.990 --> 00:06:13.000 align:start position:0%
it's going to eventually be freed
 

00:06:13.000 --> 00:06:14.999 align:start position:0%
it's going to eventually be freed
without<00:06:13.419><c> freeing</c><00:06:13.719><c> it</c><00:06:13.899><c> too</c><00:06:14.080><c> soon</c><00:06:14.379><c> right</c><00:06:14.860><c> the</c>

00:06:14.999 --> 00:06:15.009 align:start position:0%
without freeing it too soon right the
 

00:06:15.009 --> 00:06:16.800 align:start position:0%
without freeing it too soon right the
system<00:06:15.370><c> knows</c><00:06:15.610><c> what's</c><00:06:15.909><c> going</c><00:06:16.210><c> on</c><00:06:16.330><c> you</c><00:06:16.659><c> don't</c>

00:06:16.800 --> 00:06:16.810 align:start position:0%
system knows what's going on you don't
 

00:06:16.810 --> 00:06:18.450 align:start position:0%
system knows what's going on you don't
have<00:06:16.960><c> to</c><00:06:17.110><c> manage</c><00:06:17.289><c> this</c><00:06:17.560><c> thing</c><00:06:17.620><c> it</c><00:06:17.949><c> does</c><00:06:18.129><c> it</c><00:06:18.250><c> for</c>

00:06:18.450 --> 00:06:18.460 align:start position:0%
have to manage this thing it does it for
 

00:06:18.460 --> 00:06:20.670 align:start position:0%
have to manage this thing it does it for
you<00:06:18.520><c> however</c><00:06:19.240><c> if</c><00:06:19.689><c> it's</c><00:06:19.870><c> doing</c><00:06:20.199><c> it</c><00:06:20.319><c> for</c><00:06:20.529><c> you</c>

00:06:20.670 --> 00:06:20.680 align:start position:0%
you however if it's doing it for you
 

00:06:20.680 --> 00:06:23.820 align:start position:0%
you however if it's doing it for you
several<00:06:21.069><c> questions</c><00:06:21.550><c> occur</c><00:06:22.020><c> and</c><00:06:23.020><c> there's</c><00:06:23.680><c> no</c>

00:06:23.820 --> 00:06:23.830 align:start position:0%
several questions occur and there's no
 

00:06:23.830 --> 00:06:28.050 align:start position:0%
several questions occur and there's no
crash<00:06:24.099><c> yay</c><00:06:24.659><c> well</c><00:06:25.659><c> ideally</c><00:06:26.219><c> so</c><00:06:27.219><c> there</c><00:06:27.729><c> are</c><00:06:27.849><c> some</c>

00:06:28.050 --> 00:06:28.060 align:start position:0%
crash yay well ideally so there are some
 

00:06:28.060 --> 00:06:30.209 align:start position:0%
crash yay well ideally so there are some
things<00:06:28.419><c> that</c><00:06:28.569><c> naturally</c><00:06:29.379><c> occur</c><00:06:29.710><c> to</c><00:06:29.770><c> you</c><00:06:29.889><c> such</c>

00:06:30.209 --> 00:06:30.219 align:start position:0%
things that naturally occur to you such
 

00:06:30.219 --> 00:06:32.159 align:start position:0%
things that naturally occur to you such
as<00:06:30.460><c> okay</c><00:06:30.879><c> well</c><00:06:31.060><c> how</c><00:06:31.240><c> long</c><00:06:31.419><c> does</c><00:06:31.629><c> it</c><00:06:31.689><c> take</c><00:06:31.960><c> for</c>

00:06:32.159 --> 00:06:32.169 align:start position:0%
as okay well how long does it take for
 

00:06:32.169 --> 00:06:33.689 align:start position:0%
as okay well how long does it take for
the<00:06:32.259><c> system</c><00:06:32.560><c> to</c><00:06:32.710><c> do</c><00:06:32.830><c> this</c><00:06:32.919><c> like</c><00:06:33.129><c> I</c><00:06:33.310><c> know</c><00:06:33.399><c> how</c>

00:06:33.689 --> 00:06:33.699 align:start position:0%
the system to do this like I know how
 

00:06:33.699 --> 00:06:35.309 align:start position:0%
the system to do this like I know how
long<00:06:33.879><c> my</c><00:06:33.909><c> malloc</c><00:06:34.449><c> statement</c><00:06:34.839><c> was</c><00:06:34.990><c> going</c><00:06:35.229><c> to</c>

00:06:35.309 --> 00:06:35.319 align:start position:0%
long my malloc statement was going to
 

00:06:35.319 --> 00:06:37.889 align:start position:0%
long my malloc statement was going to
take<00:06:35.529><c> in</c><00:06:35.740><c> C++</c><00:06:36.669><c> but</c><00:06:37.149><c> how</c><00:06:37.300><c> long</c><00:06:37.419><c> is</c><00:06:37.569><c> it</c><00:06:37.599><c> going</c><00:06:37.779><c> to</c>

00:06:37.889 --> 00:06:37.899 align:start position:0%
take in C++ but how long is it going to
 

00:06:37.899 --> 00:06:39.689 align:start position:0%
take in C++ but how long is it going to
take<00:06:38.139><c> for</c><00:06:38.199><c> the</c><00:06:38.680><c> system</c><00:06:39.039><c> to</c><00:06:39.190><c> automatically</c>

00:06:39.689 --> 00:06:39.699 align:start position:0%
take for the system to automatically
 

00:06:39.699 --> 00:06:41.490 align:start position:0%
take for the system to automatically
find<00:06:40.089><c> space</c><00:06:40.389><c> in</c><00:06:40.419><c> the</c><00:06:40.690><c> heap</c><00:06:40.870><c> for</c><00:06:41.169><c> me</c>

00:06:41.490 --> 00:06:41.500 align:start position:0%
find space in the heap for me
 

00:06:41.500 --> 00:06:43.290 align:start position:0%
find space in the heap for me
how<00:06:41.680><c> is</c><00:06:41.830><c> it</c><00:06:41.980><c> take</c><00:06:42.130><c> to</c><00:06:42.160><c> walk</c><00:06:42.460><c> the</c><00:06:42.700><c> heap</c><00:06:42.880><c> find</c><00:06:43.180><c> the</c>

00:06:43.290 --> 00:06:43.300 align:start position:0%
how is it take to walk the heap find the
 

00:06:43.300 --> 00:06:45.360 align:start position:0%
how is it take to walk the heap find the
appropriate<00:06:43.780><c> spot</c><00:06:43.960><c> to</c><00:06:44.110><c> put</c><00:06:44.260><c> this</c><00:06:44.410><c> thing</c><00:06:44.590><c> and</c>

00:06:45.360 --> 00:06:45.370 align:start position:0%
appropriate spot to put this thing and
 

00:06:45.370 --> 00:06:47.070 align:start position:0%
appropriate spot to put this thing and
then<00:06:45.520><c> allocate</c><00:06:46.000><c> that</c><00:06:46.180><c> space</c><00:06:46.450><c> how</c><00:06:46.840><c> long</c><00:06:46.960><c> does</c>

00:06:47.070 --> 00:06:47.080 align:start position:0%
then allocate that space how long does
 

00:06:47.080 --> 00:06:48.270 align:start position:0%
then allocate that space how long does
it<00:06:47.140><c> take</c><00:06:47.410><c> to</c><00:06:47.530><c> actually</c><00:06:47.560><c> collect</c><00:06:48.100><c> these</c>

00:06:48.270 --> 00:06:48.280 align:start position:0%
it take to actually collect these
 

00:06:48.280 --> 00:06:50.430 align:start position:0%
it take to actually collect these
objects<00:06:48.730><c> when</c><00:06:48.880><c> a</c><00:06:48.910><c> reference</c><00:06:49.300><c> goes</c><00:06:49.510><c> away</c><00:06:49.780><c> when</c>

00:06:50.430 --> 00:06:50.440 align:start position:0%
objects when a reference goes away when
 

00:06:50.440 --> 00:06:52.110 align:start position:0%
objects when a reference goes away when
will<00:06:50.680><c> it</c><00:06:50.710><c> be</c><00:06:50.950><c> collected</c><00:06:51.430><c> and</c><00:06:51.580><c> how</c><00:06:51.670><c> long</c><00:06:51.910><c> does</c>

00:06:52.110 --> 00:06:52.120 align:start position:0%
will it be collected and how long does
 

00:06:52.120 --> 00:06:53.880 align:start position:0%
will it be collected and how long does
it<00:06:52.180><c> take</c><00:06:52.480><c> to</c><00:06:52.660><c> actually</c><00:06:52.840><c> collect</c><00:06:53.380><c> these</c><00:06:53.590><c> things</c>

00:06:53.880 --> 00:06:53.890 align:start position:0%
it take to actually collect these things
 

00:06:53.890 --> 00:06:57.690 align:start position:0%
it take to actually collect these things
and<00:06:54.760><c> what</c><00:06:55.300><c> impact</c><00:06:55.660><c> is</c><00:06:55.840><c> there</c><00:06:56.020><c> system-wide</c><00:06:56.980><c> so</c>

00:06:57.690 --> 00:06:57.700 align:start position:0%
and what impact is there system-wide so
 

00:06:57.700 --> 00:06:59.550 align:start position:0%
and what impact is there system-wide so
if<00:06:58.150><c> we're</c><00:06:58.420><c> running</c><00:06:58.600><c> this</c><00:06:58.930><c> sort</c><00:06:59.170><c> of</c><00:06:59.200><c> garbage</c>

00:06:59.550 --> 00:06:59.560 align:start position:0%
if we're running this sort of garbage
 

00:06:59.560 --> 00:07:01.230 align:start position:0%
if we're running this sort of garbage
collector<00:06:59.980><c> thread</c><00:07:00.280><c> this</c><00:07:00.460><c> heavy</c><00:07:00.730><c> weight</c><00:07:00.910><c> thing</c>

00:07:01.230 --> 00:07:01.240 align:start position:0%
collector thread this heavy weight thing
 

00:07:01.240 --> 00:07:02.910 align:start position:0%
collector thread this heavy weight thing
in<00:07:01.390><c> the</c><00:07:01.480><c> background</c><00:07:01.900><c> they</c><00:07:02.350><c> don't</c><00:07:02.530><c> want</c><00:07:02.650><c> it</c>

00:07:02.910 --> 00:07:02.920 align:start position:0%
in the background they don't want it
 

00:07:02.920 --> 00:07:04.770 align:start position:0%
in the background they don't want it
what<00:07:03.160><c> impact</c><00:07:03.520><c> does</c><00:07:03.640><c> that</c><00:07:03.700><c> have</c><00:07:03.850><c> on</c><00:07:04.090><c> you</c><00:07:04.690><c> know</c>

00:07:04.770 --> 00:07:04.780 align:start position:0%
what impact does that have on you know
 

00:07:04.780 --> 00:07:07.440 align:start position:0%
what impact does that have on you know
jank<00:07:05.050><c> on</c><00:07:05.200><c> the</c><00:07:05.320><c> UI</c><00:07:05.500><c> thread</c><00:07:05.620><c> or</c><00:07:06.160><c> whatever</c><00:07:06.550><c> and</c>

00:07:07.440 --> 00:07:07.450 align:start position:0%
jank on the UI thread or whatever and
 

00:07:07.450 --> 00:07:09.600 align:start position:0%
jank on the UI thread or whatever and
when<00:07:07.870><c> do</c><00:07:08.020><c> these</c><00:07:08.140><c> things</c><00:07:08.470><c> actually</c><00:07:08.770><c> happen</c><00:07:09.370><c> and</c>

00:07:09.600 --> 00:07:09.610 align:start position:0%
when do these things actually happen and
 

00:07:09.610 --> 00:07:11.700 align:start position:0%
when do these things actually happen and
also<00:07:10.150><c> how</c><00:07:10.330><c> efficient</c><00:07:10.780><c> is</c><00:07:10.870><c> that</c><00:07:11.050><c> heap</c><00:07:11.260><c> usage</c>

00:07:11.700 --> 00:07:11.710 align:start position:0%
also how efficient is that heap usage
 

00:07:11.710 --> 00:07:13.860 align:start position:0%
also how efficient is that heap usage
right<00:07:12.220><c> it's</c><00:07:12.400><c> not</c><00:07:12.520><c> just</c><00:07:12.790><c> going</c><00:07:12.940><c> to</c><00:07:13.030><c> malloc</c>

00:07:13.860 --> 00:07:13.870 align:start position:0%
right it's not just going to malloc
 

00:07:13.870 --> 00:07:15.390 align:start position:0%
right it's not just going to malloc
these<00:07:14.050><c> little</c><00:07:14.380><c> tiny</c><00:07:14.560><c> chunks</c><00:07:14.950><c> for</c><00:07:15.070><c> your</c><00:07:15.190><c> things</c>

00:07:15.390 --> 00:07:15.400 align:start position:0%
these little tiny chunks for your things
 

00:07:15.400 --> 00:07:17.070 align:start position:0%
these little tiny chunks for your things
is<00:07:15.580><c> probably</c><00:07:15.730><c> allocating</c><00:07:16.450><c> a</c><00:07:16.510><c> large</c><00:07:16.720><c> amount</c><00:07:17.020><c> of</c>

00:07:17.070 --> 00:07:17.080 align:start position:0%
is probably allocating a large amount of
 

00:07:17.080 --> 00:07:18.960 align:start position:0%
is probably allocating a large amount of
space<00:07:17.320><c> and</c><00:07:17.590><c> then</c><00:07:18.010><c> putting</c><00:07:18.280><c> things</c><00:07:18.610><c> in</c><00:07:18.790><c> there</c>

00:07:18.960 --> 00:07:18.970 align:start position:0%
space and then putting things in there
 

00:07:18.970 --> 00:07:20.909 align:start position:0%
space and then putting things in there
and<00:07:19.090><c> sorting</c><00:07:19.480><c> them</c><00:07:19.540><c> around</c><00:07:19.780><c> and</c><00:07:20.380><c> certainly</c><00:07:20.740><c> on</c>

00:07:20.909 --> 00:07:20.919 align:start position:0%
and sorting them around and certainly on
 

00:07:20.919 --> 00:07:22.800 align:start position:0%
and sorting them around and certainly on
Dalva<00:07:21.130><c> because</c><00:07:21.430><c> we'll</c><00:07:21.610><c> see</c><00:07:21.850><c> its</c><00:07:22.180><c> fragmenting</c>

00:07:22.800 --> 00:07:22.810 align:start position:0%
Dalva because we'll see its fragmenting
 

00:07:22.810 --> 00:07:24.330 align:start position:0%
Dalva because we'll see its fragmenting
the<00:07:22.840><c> heap</c><00:07:23.110><c> over</c><00:07:23.380><c> time</c><00:07:23.620><c> which</c><00:07:23.830><c> means</c><00:07:24.010><c> you</c><00:07:24.250><c> may</c>

00:07:24.330 --> 00:07:24.340 align:start position:0%
the heap over time which means you may
 

00:07:24.340 --> 00:07:26.070 align:start position:0%
the heap over time which means you may
have<00:07:24.370><c> a</c><00:07:24.520><c> lot</c><00:07:24.730><c> of</c><00:07:24.820><c> memory</c><00:07:25.060><c> available</c><00:07:25.600><c> but</c><00:07:26.050><c> you</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
have a lot of memory available but you
 

00:07:26.080 --> 00:07:27.930 align:start position:0%
have a lot of memory available but you
can't<00:07:26.350><c> necessarily</c><00:07:26.470><c> even</c><00:07:27.130><c> access</c><00:07:27.550><c> it</c><00:07:27.730><c> anymore</c>

00:07:27.930 --> 00:07:27.940 align:start position:0%
can't necessarily even access it anymore
 

00:07:27.940 --> 00:07:30.150 align:start position:0%
can't necessarily even access it anymore
so<00:07:28.840><c> how</c><00:07:29.110><c> efficient</c><00:07:29.560><c> is</c><00:07:29.680><c> that</c><00:07:29.710><c> and</c><00:07:30.010><c> how</c><00:07:30.100><c> much</c>

00:07:30.150 --> 00:07:30.160 align:start position:0%
so how efficient is that and how much
 

00:07:30.160 --> 00:07:31.800 align:start position:0%
so how efficient is that and how much
memory<00:07:30.610><c> you're</c><00:07:30.760><c> taking</c><00:07:31.060><c> up</c><00:07:31.150><c> in</c><00:07:31.270><c> the</c><00:07:31.330><c> system</c><00:07:31.510><c> to</c>

00:07:31.800 --> 00:07:31.810 align:start position:0%
memory you're taking up in the system to
 

00:07:31.810 --> 00:07:34.320 align:start position:0%
memory you're taking up in the system to
do<00:07:31.930><c> all</c><00:07:32.080><c> this</c><00:07:32.230><c> stuff</c><00:07:32.610><c> so</c><00:07:33.610><c> we're</c><00:07:33.940><c> gonna</c><00:07:34.060><c> start</c>

00:07:34.320 --> 00:07:34.330 align:start position:0%
do all this stuff so we're gonna start
 

00:07:34.330 --> 00:07:36.600 align:start position:0%
do all this stuff so we're gonna start
by<00:07:34.390><c> taking</c><00:07:34.570><c> a</c><00:07:34.840><c> look</c><00:07:34.900><c> at</c><00:07:35.140><c> how</c><00:07:35.500><c> dalvik</c><00:07:36.010><c> collects</c>

00:07:36.600 --> 00:07:36.610 align:start position:0%
by taking a look at how dalvik collects
 

00:07:36.610 --> 00:07:39.270 align:start position:0%
by taking a look at how dalvik collects
garbage<00:07:37.350><c> dalvik</c><00:07:38.350><c> was</c><00:07:38.560><c> the</c><00:07:38.740><c> runtime</c><00:07:39.100><c> we</c><00:07:39.220><c> are</c>

00:07:39.270 --> 00:07:39.280 align:start position:0%
garbage dalvik was the runtime we are
 

00:07:39.280 --> 00:07:40.830 align:start position:0%
garbage dalvik was the runtime we are
using<00:07:39.520><c> until</c><00:07:39.940><c> android</c><00:07:40.330><c> kitkat</c>

00:07:40.830 --> 00:07:40.840 align:start position:0%
using until android kitkat
 

00:07:40.840 --> 00:07:43.710 align:start position:0%
using until android kitkat
it<00:07:41.110><c> was</c><00:07:41.260><c> replaced</c><00:07:41.650><c> in</c><00:07:41.770><c> lollipop</c><00:07:42.220><c> with</c><00:07:42.520><c> art</c><00:07:42.910><c> so</c>

00:07:43.710 --> 00:07:43.720 align:start position:0%
it was replaced in lollipop with art so
 

00:07:43.720 --> 00:07:45.540 align:start position:0%
it was replaced in lollipop with art so
this<00:07:44.169><c> is</c><00:07:44.350><c> a</c><00:07:44.380><c> picture</c><00:07:44.740><c> of</c><00:07:44.800><c> the</c><00:07:44.919><c> heap</c><00:07:45.130><c> everything</c>

00:07:45.540 --> 00:07:45.550 align:start position:0%
this is a picture of the heap everything
 

00:07:45.550 --> 00:07:47.040 align:start position:0%
this is a picture of the heap everything
that's<00:07:45.729><c> in</c><00:07:45.880><c> white</c><00:07:46.090><c> has</c><00:07:46.240><c> been</c><00:07:46.419><c> allocated</c><00:07:46.570><c> and</c>

00:07:47.040 --> 00:07:47.050 align:start position:0%
that's in white has been allocated and
 

00:07:47.050 --> 00:07:48.570 align:start position:0%
that's in white has been allocated and
we<00:07:47.169><c> have</c><00:07:47.260><c> a</c><00:07:47.290><c> few</c><00:07:47.500><c> holes</c><00:07:47.680><c> and</c><00:07:48.130><c> we're</c><00:07:48.280><c> trying</c><00:07:48.490><c> to</c>

00:07:48.570 --> 00:07:48.580 align:start position:0%
we have a few holes and we're trying to
 

00:07:48.580 --> 00:07:51.030 align:start position:0%
we have a few holes and we're trying to
allocate<00:07:48.729><c> this</c><00:07:49.030><c> blue</c><00:07:49.270><c> object</c><00:07:49.690><c> so</c><00:07:50.620><c> a</c><00:07:50.650><c> dalvik</c><00:07:50.979><c> is</c>

00:07:51.030 --> 00:07:51.040 align:start position:0%
allocate this blue object so a dalvik is
 

00:07:51.040 --> 00:07:52.260 align:start position:0%
allocate this blue object so a dalvik is
gonna<00:07:51.190><c> do</c><00:07:51.310><c> is</c><00:07:51.400><c> just</c><00:07:51.520><c> gonna</c><00:07:51.700><c> walk</c><00:07:51.970><c> through</c><00:07:52.180><c> the</c>

00:07:52.260 --> 00:07:52.270 align:start position:0%
gonna do is just gonna walk through the
 

00:07:52.270 --> 00:07:54.240 align:start position:0%
gonna do is just gonna walk through the
heap<00:07:52.479><c> and</c><00:07:52.720><c> find</c><00:07:53.290><c> a</c><00:07:53.350><c> spot</c><00:07:53.590><c> where</c><00:07:53.830><c> the</c><00:07:53.979><c> object</c>

00:07:54.240 --> 00:07:54.250 align:start position:0%
heap and find a spot where the object
 

00:07:54.250 --> 00:07:56.730 align:start position:0%
heap and find a spot where the object
fits<00:07:54.460><c> when</c><00:07:54.729><c> it</c><00:07:54.850><c> finds</c><00:07:55.090><c> one</c><00:07:55.300><c> pretty</c><00:07:56.229><c> easy</c><00:07:56.530><c> just</c>

00:07:56.730 --> 00:07:56.740 align:start position:0%
fits when it finds one pretty easy just
 

00:07:56.740 --> 00:07:59.880 align:start position:0%
fits when it finds one pretty easy just
slot<00:07:57.400><c> it</c><00:07:57.490><c> there</c><00:07:57.750><c> things</c><00:07:58.750><c> becomes</c><00:07:59.110><c> become</c><00:07:59.860><c> a</c>

00:07:59.880 --> 00:07:59.890 align:start position:0%
slot it there things becomes become a
 

00:07:59.890 --> 00:08:01.890 align:start position:0%
slot it there things becomes become a
lot<00:08:00.100><c> more</c><00:08:00.340><c> complicated</c><00:08:00.580><c> when</c><00:08:01.000><c> it</c><00:08:01.120><c> comes</c><00:08:01.419><c> time</c>

00:08:01.890 --> 00:08:01.900 align:start position:0%
lot more complicated when it comes time
 

00:08:01.900 --> 00:08:04.710 align:start position:0%
lot more complicated when it comes time
to<00:08:01.960><c> collect</c><00:08:02.550><c> objects</c><00:08:03.550><c> so</c><00:08:04.210><c> there's</c><00:08:04.450><c> four</c>

00:08:04.710 --> 00:08:04.720 align:start position:0%
to collect objects so there's four
 

00:08:04.720 --> 00:08:07.260 align:start position:0%
to collect objects so there's four
phases<00:08:04.930><c> the</c><00:08:05.229><c> first</c><00:08:05.500><c> one</c><00:08:05.740><c> dalvik</c><00:08:06.550><c> has</c><00:08:06.820><c> to</c><00:08:07.000><c> pause</c>

00:08:07.260 --> 00:08:07.270 align:start position:0%
phases the first one dalvik has to pause
 

00:08:07.270 --> 00:08:09.120 align:start position:0%
phases the first one dalvik has to pause
all<00:08:07.690><c> the</c><00:08:07.900><c> threads</c><00:08:08.200><c> in</c><00:08:08.320><c> your</c><00:08:08.440><c> application</c><00:08:09.010><c> to</c>

00:08:09.120 --> 00:08:09.130 align:start position:0%
all the threads in your application to
 

00:08:09.130 --> 00:08:11.460 align:start position:0%
all the threads in your application to
find<00:08:09.490><c> a</c><00:08:09.610><c> route</c><00:08:09.820><c> set</c><00:08:10.060><c> so</c><00:08:10.690><c> route</c><00:08:10.930><c> sets</c><00:08:11.200><c> are</c>

00:08:11.460 --> 00:08:11.470 align:start position:0%
find a route set so route sets are
 

00:08:11.470 --> 00:08:14.790 align:start position:0%
find a route set so route sets are
typically<00:08:12.160><c> local</c><00:08:12.490><c> variables</c><00:08:13.080><c> threads</c><00:08:14.080><c> static</c>

00:08:14.790 --> 00:08:14.800 align:start position:0%
typically local variables threads static
 

00:08:14.800 --> 00:08:17.730 align:start position:0%
typically local variables threads static
variables<00:08:15.720><c> they're</c><00:08:16.720><c> just</c><00:08:16.930><c> the</c><00:08:17.320><c> roots</c><00:08:17.500><c> of</c><00:08:17.680><c> all</c>

00:08:17.730 --> 00:08:17.740 align:start position:0%
variables they're just the roots of all
 

00:08:17.740 --> 00:08:19.200 align:start position:0%
variables they're just the roots of all
the<00:08:17.979><c> allocations</c><00:08:18.310><c> that</c><00:08:18.490><c> can</c><00:08:18.700><c> be</c><00:08:18.820><c> reached</c><00:08:19.060><c> in</c>

00:08:19.200 --> 00:08:19.210 align:start position:0%
the allocations that can be reached in
 

00:08:19.210 --> 00:08:20.880 align:start position:0%
the allocations that can be reached in
your<00:08:19.360><c> application</c><00:08:19.870><c> so</c><00:08:20.320><c> that</c><00:08:20.350><c> takes</c><00:08:20.590><c> a</c><00:08:20.740><c> bit</c><00:08:20.860><c> of</c>

00:08:20.880 --> 00:08:20.890 align:start position:0%
your application so that takes a bit of
 

00:08:20.890 --> 00:08:22.440 align:start position:0%
your application so that takes a bit of
time<00:08:21.190><c> and</c><00:08:21.490><c> during</c><00:08:21.940><c> that</c><00:08:22.030><c> time</c><00:08:22.300><c> your</c>

00:08:22.440 --> 00:08:22.450 align:start position:0%
time and during that time your
 

00:08:22.450 --> 00:08:24.360 align:start position:0%
time and during that time your
application<00:08:22.870><c> cannot</c><00:08:23.050><c> do</c><00:08:23.260><c> anything</c><00:08:23.530><c> the</c>

00:08:24.360 --> 00:08:24.370 align:start position:0%
application cannot do anything the
 

00:08:24.370 --> 00:08:26.580 align:start position:0%
application cannot do anything the
second<00:08:24.729><c> phase</c><00:08:24.940><c> is</c><00:08:24.970><c> concurrent</c><00:08:25.690><c> your</c><00:08:26.229><c> app</c><00:08:26.410><c> is</c>

00:08:26.580 --> 00:08:26.590 align:start position:0%
second phase is concurrent your app is
 

00:08:26.590 --> 00:08:28.500 align:start position:0%
second phase is concurrent your app is
running<00:08:26.740><c> again</c><00:08:27.160><c> so</c><00:08:27.760><c> from</c><00:08:28.060><c> those</c><00:08:28.240><c> routes</c>

00:08:28.500 --> 00:08:28.510 align:start position:0%
running again so from those routes
 

00:08:28.510 --> 00:08:30.360 align:start position:0%
running again so from those routes
dalvik<00:08:29.080><c> will</c><00:08:29.260><c> find</c><00:08:29.500><c> all</c><00:08:29.650><c> the</c><00:08:29.919><c> objects</c><00:08:30.310><c> that</c>

00:08:30.360 --> 00:08:30.370 align:start position:0%
dalvik will find all the objects that
 

00:08:30.370 --> 00:08:32.930 align:start position:0%
dalvik will find all the objects that
can<00:08:30.550><c> be</c><00:08:30.580><c> reached</c><00:08:31.060><c> and</c><00:08:31.390><c> marks</c><00:08:31.810><c> them</c><00:08:31.900><c> as</c><00:08:32.020><c> such</c>

00:08:32.930 --> 00:08:32.940 align:start position:0%
can be reached and marks them as such
 

00:08:32.940 --> 00:08:35.909 align:start position:0%
can be reached and marks them as such
unfortunately<00:08:34.050><c> since</c><00:08:35.050><c> that</c><00:08:35.229><c> that</c><00:08:35.560><c> second</c>

00:08:35.909 --> 00:08:35.919 align:start position:0%
unfortunately since that that second
 

00:08:35.919 --> 00:08:38.700 align:start position:0%
unfortunately since that that second
phase<00:08:36.099><c> is</c><00:08:36.310><c> concurrent</c><00:08:37.409><c> allocations</c><00:08:38.409><c> could</c><00:08:38.620><c> be</c>

00:08:38.700 --> 00:08:38.710 align:start position:0%
phase is concurrent allocations could be
 

00:08:38.710 --> 00:08:40.589 align:start position:0%
phase is concurrent allocations could be
triggered<00:08:39.070><c> during</c><00:08:39.789><c> that</c><00:08:40.030><c> time</c><00:08:40.210><c> so</c><00:08:40.360><c> you</c><00:08:40.419><c> see</c>

00:08:40.589 --> 00:08:40.599 align:start position:0%
triggered during that time so you see
 

00:08:40.599 --> 00:08:41.370 align:start position:0%
triggered during that time so you see
here<00:08:40.780><c> like</c><00:08:40.930><c> for</c><00:08:41.020><c> instance</c><00:08:41.110><c> which</c><00:08:41.349><c> is</c>

00:08:41.370 --> 00:08:41.380 align:start position:0%
here like for instance which is
 

00:08:41.380 --> 00:08:43.529 align:start position:0%
here like for instance which is
educating<00:08:41.589><c> sorry</c><00:08:42.460><c> which</c><00:08:42.969><c> is</c><00:08:43.089><c> you</c><00:08:43.360><c> just</c>

00:08:43.529 --> 00:08:43.539 align:start position:0%
educating sorry which is you just
 

00:08:43.539 --> 00:08:45.900 align:start position:0%
educating sorry which is you just
allocated<00:08:43.990><c> another</c><00:08:44.290><c> object</c><00:08:44.530><c> so</c><00:08:45.520><c> we</c><00:08:45.640><c> need</c><00:08:45.760><c> to</c>

00:08:45.900 --> 00:08:45.910 align:start position:0%
allocated another object so we need to
 

00:08:45.910 --> 00:08:48.060 align:start position:0%
allocated another object so we need to
pass<00:08:46.120><c> the</c><00:08:46.330><c> application</c><00:08:46.450><c> again</c><00:08:46.900><c> and</c><00:08:47.260><c> find</c><00:08:47.950><c> the</c>

00:08:48.060 --> 00:08:48.070 align:start position:0%
pass the application again and find the
 

00:08:48.070 --> 00:08:50.430 align:start position:0%
pass the application again and find the
reachable<00:08:48.460><c> objects</c><00:08:48.880><c> again</c><00:08:49.360><c> and</c><00:08:49.660><c> all</c><00:08:50.140><c> your</c>

00:08:50.430 --> 00:08:50.440 align:start position:0%
reachable objects again and all your
 

00:08:50.440 --> 00:08:51.840 align:start position:0%
reachable objects again and all your
threads<00:08:50.650><c> are</c><00:08:50.800><c> passed</c><00:08:51.040><c> so</c><00:08:51.280><c> your</c><00:08:51.430><c> application</c>

00:08:51.840 --> 00:08:51.850 align:start position:0%
threads are passed so your application
 

00:08:51.850 --> 00:08:53.880 align:start position:0%
threads are passed so your application
stutters<00:08:52.300><c> a</c><00:08:52.330><c> little</c><00:08:52.600><c> bit</c><00:08:52.720><c> again</c><00:08:52.990><c> and</c><00:08:53.320><c> finally</c>

00:08:53.880 --> 00:08:53.890 align:start position:0%
stutters a little bit again and finally
 

00:08:53.890 --> 00:08:55.230 align:start position:0%
stutters a little bit again and finally
we<00:08:54.339><c> can</c><00:08:54.459><c> mark</c><00:08:54.670><c> all</c><00:08:54.820><c> the</c>

00:08:55.230 --> 00:08:55.240 align:start position:0%
we can mark all the
 

00:08:55.240 --> 00:08:56.670 align:start position:0%
we can mark all the
that<00:08:55.360><c> are</c><00:08:55.480><c> not</c><00:08:55.630><c> reachable</c><00:08:55.990><c> and</c><00:08:56.320><c> there</c><00:08:56.560><c> are</c>

00:08:56.670 --> 00:08:56.680 align:start position:0%
that are not reachable and there are
 

00:08:56.680 --> 00:08:59.370 align:start position:0%
that are not reachable and there are
candidates<00:08:57.220><c> for</c><00:08:57.370><c> garbage</c><00:08:57.640><c> collection</c><00:08:58.290><c> so</c><00:08:59.290><c> the</c>

00:08:59.370 --> 00:08:59.380 align:start position:0%
candidates for garbage collection so the
 

00:08:59.380 --> 00:09:00.660 align:start position:0%
candidates for garbage collection so the
collection<00:08:59.680><c> itself</c><00:08:59.920><c> just</c><00:09:00.190><c> gets</c><00:09:00.339><c> rid</c><00:09:00.430><c> of</c><00:09:00.550><c> the</c>

00:09:00.660 --> 00:09:00.670 align:start position:0%
collection itself just gets rid of the
 

00:09:00.670 --> 00:09:04.019 align:start position:0%
collection itself just gets rid of the
objects<00:09:01.000><c> in</c><00:09:01.089><c> the</c><00:09:01.149><c> heap</c><00:09:01.830><c> so</c><00:09:02.830><c> now</c><00:09:03.040><c> if</c><00:09:03.430><c> we</c><00:09:03.730><c> want</c><00:09:03.940><c> to</c>

00:09:04.019 --> 00:09:04.029 align:start position:0%
objects in the heap so now if we want to
 

00:09:04.029 --> 00:09:05.820 align:start position:0%
objects in the heap so now if we want to
allocate<00:09:04.240><c> something</c><00:09:04.930><c> in</c><00:09:05.020><c> the</c><00:09:05.110><c> heap</c><00:09:05.350><c> and</c><00:09:05.589><c> the</c>

00:09:05.820 --> 00:09:05.830 align:start position:0%
allocate something in the heap and the
 

00:09:05.830 --> 00:09:07.740 align:start position:0%
allocate something in the heap and the
heap<00:09:06.070><c> is</c><00:09:06.250><c> pretty</c><00:09:06.520><c> much</c><00:09:06.610><c> full</c><00:09:06.910><c> and</c><00:09:07.270><c> we</c><00:09:07.510><c> have</c>

00:09:07.740 --> 00:09:07.750 align:start position:0%
heap is pretty much full and we have
 

00:09:07.750 --> 00:09:09.360 align:start position:0%
heap is pretty much full and we have
objects<00:09:08.110><c> that</c><00:09:08.200><c> have</c><00:09:08.350><c> been</c><00:09:09.100><c> marked</c><00:09:09.339><c> for</c>

00:09:09.360 --> 00:09:09.370 align:start position:0%
objects that have been marked for
 

00:09:09.370 --> 00:09:11.610 align:start position:0%
objects that have been marked for
allocation<00:09:09.810><c> dalvik</c><00:09:10.810><c> will</c><00:09:11.050><c> go</c><00:09:11.380><c> through</c><00:09:11.529><c> the</c>

00:09:11.610 --> 00:09:11.620 align:start position:0%
allocation dalvik will go through the
 

00:09:11.620 --> 00:09:13.440 align:start position:0%
allocation dalvik will go through the
heap<00:09:11.830><c> realize</c><00:09:12.610><c> that</c><00:09:12.760><c> there's</c><00:09:12.940><c> no</c><00:09:13.120><c> memory</c>

00:09:13.440 --> 00:09:13.450 align:start position:0%
heap realize that there's no memory
 

00:09:13.450 --> 00:09:15.810 align:start position:0%
heap realize that there's no memory
available<00:09:13.630><c> and</c><00:09:14.290><c> then</c><00:09:14.950><c> it</c><00:09:15.100><c> will</c><00:09:15.279><c> trigger</c><00:09:15.670><c> a</c>

00:09:15.810 --> 00:09:15.820 align:start position:0%
available and then it will trigger a
 

00:09:15.820 --> 00:09:17.880 align:start position:0%
available and then it will trigger a
garbage<00:09:16.300><c> collection</c><00:09:16.570><c> for</c><00:09:17.080><c> the</c><00:09:17.260><c> specific</c><00:09:17.680><c> use</c>

00:09:17.880 --> 00:09:17.890 align:start position:0%
garbage collection for the specific use
 

00:09:17.890 --> 00:09:19.560 align:start position:0%
garbage collection for the specific use
case<00:09:18.070><c> of</c><00:09:18.100><c> an</c><00:09:18.250><c> allocation</c><00:09:18.580><c> that's</c><00:09:18.940><c> the</c><00:09:19.089><c> GC</c><00:09:19.450><c> for</c>

00:09:19.560 --> 00:09:19.570 align:start position:0%
case of an allocation that's the GC for
 

00:09:19.570 --> 00:09:21.300 align:start position:0%
case of an allocation that's the GC for
alloc<00:09:19.630><c> and</c><00:09:20.080><c> every</c><00:09:20.440><c> time</c><00:09:20.620><c> this</c><00:09:20.770><c> happens</c><00:09:21.160><c> you</c>

00:09:21.300 --> 00:09:21.310 align:start position:0%
alloc and every time this happens you
 

00:09:21.310 --> 00:09:24.329 align:start position:0%
alloc and every time this happens you
see<00:09:21.490><c> a</c><00:09:21.520><c> log</c><00:09:21.820><c> on</c><00:09:22.149><c> KitKat</c><00:09:22.660><c> doing</c><00:09:23.290><c> adb</c><00:09:23.890><c> logcat</c><00:09:24.010><c> you</c>

00:09:24.329 --> 00:09:24.339 align:start position:0%
see a log on KitKat doing adb logcat you
 

00:09:24.339 --> 00:09:27.060 align:start position:0%
see a log on KitKat doing adb logcat you
can<00:09:24.490><c> see</c><00:09:24.670><c> those</c><00:09:24.820><c> GC</c><00:09:25.149><c> for</c><00:09:25.270><c> alloc</c><00:09:25.330><c> messages</c><00:09:26.070><c> so</c>

00:09:27.060 --> 00:09:27.070 align:start position:0%
can see those GC for alloc messages so
 

00:09:27.070 --> 00:09:28.889 align:start position:0%
can see those GC for alloc messages so
it<00:09:27.130><c> will</c><00:09:27.279><c> you</c><00:09:27.490><c> know</c><00:09:27.580><c> run</c><00:09:28.060><c> the</c><00:09:28.089><c> collection</c><00:09:28.570><c> gets</c>

00:09:28.889 --> 00:09:28.899 align:start position:0%
it will you know run the collection gets
 

00:09:28.899 --> 00:09:30.660 align:start position:0%
it will you know run the collection gets
rid<00:09:29.080><c> get</c><00:09:29.290><c> rid</c><00:09:29.440><c> of</c><00:09:29.470><c> this</c><00:09:29.709><c> memory</c><00:09:30.040><c> then</c><00:09:30.399><c> we</c><00:09:30.520><c> can</c>

00:09:30.660 --> 00:09:30.670 align:start position:0%
rid get rid of this memory then we can
 

00:09:30.670 --> 00:09:32.460 align:start position:0%
rid get rid of this memory then we can
run<00:09:30.850><c> through</c><00:09:31.000><c> the</c><00:09:31.089><c> typical</c><00:09:31.630><c> allocation</c>

00:09:32.460 --> 00:09:32.470 align:start position:0%
run through the typical allocation
 

00:09:32.470 --> 00:09:36.870 align:start position:0%
run through the typical allocation
mechanism<00:09:34.860><c> however</c><00:09:35.860><c> sometimes</c><00:09:36.250><c> your</c><00:09:36.580><c> hip</c><00:09:36.760><c> is</c>

00:09:36.870 --> 00:09:36.880 align:start position:0%
mechanism however sometimes your hip is
 

00:09:36.880 --> 00:09:38.880 align:start position:0%
mechanism however sometimes your hip is
full<00:09:37.120><c> there</c><00:09:38.020><c> are</c><00:09:38.050><c> no</c><00:09:38.200><c> objects</c><00:09:38.560><c> that</c><00:09:38.680><c> can</c><00:09:38.830><c> be</c>

00:09:38.880 --> 00:09:38.890 align:start position:0%
full there are no objects that can be
 

00:09:38.890 --> 00:09:41.760 align:start position:0%
full there are no objects that can be
collected<00:09:39.040><c> every</c><00:09:39.910><c> object</c><00:09:40.270><c> is</c><00:09:40.360><c> reachable</c><00:09:40.870><c> so</c><00:09:41.170><c> W</c>

00:09:41.760 --> 00:09:41.770 align:start position:0%
collected every object is reachable so W
 

00:09:41.770 --> 00:09:43.320 align:start position:0%
collected every object is reachable so W
over<00:09:41.950><c> and</c><00:09:42.130><c> through</c><00:09:42.279><c> the</c><00:09:42.310><c> heap</c><00:09:42.550><c> can't</c><00:09:43.120><c> find</c>

00:09:43.320 --> 00:09:43.330 align:start position:0%
over and through the heap can't find
 

00:09:43.330 --> 00:09:46.590 align:start position:0%
over and through the heap can't find
anything<00:09:43.720><c> and</c><00:09:44.790><c> only</c><00:09:45.790><c> two</c><00:09:45.970><c> things</c><00:09:46.149><c> can</c><00:09:46.390><c> happen</c>

00:09:46.590 --> 00:09:46.600 align:start position:0%
anything and only two things can happen
 

00:09:46.600 --> 00:09:49.680 align:start position:0%
anything and only two things can happen
either<00:09:46.990><c> the</c><00:09:47.740><c> heap</c><00:09:48.010><c> will</c><00:09:48.190><c> grow</c><00:09:48.430><c> or</c><00:09:48.690><c> your</c>

00:09:49.680 --> 00:09:49.690 align:start position:0%
either the heap will grow or your
 

00:09:49.690 --> 00:09:52.019 align:start position:0%
either the heap will grow or your
application<00:09:50.110><c> will</c><00:09:50.260><c> crash</c><00:09:50.500><c> and</c><00:09:50.800><c> is</c><00:09:51.010><c> the</c><00:09:51.730><c> it's</c>

00:09:52.019 --> 00:09:52.029 align:start position:0%
application will crash and is the it's
 

00:09:52.029 --> 00:09:53.790 align:start position:0%
application will crash and is the it's
the<00:09:52.240><c> out</c><00:09:52.360><c> of</c><00:09:52.510><c> memory</c><00:09:52.779><c> error</c><00:09:53.050><c> that</c><00:09:53.380><c> you've</c><00:09:53.529><c> seen</c>

00:09:53.790 --> 00:09:53.800 align:start position:0%
the out of memory error that you've seen
 

00:09:53.800 --> 00:09:55.430 align:start position:0%
the out of memory error that you've seen
I'm<00:09:53.980><c> sure</c><00:09:54.010><c> in</c><00:09:54.520><c> a</c><00:09:54.580><c> lot</c><00:09:54.760><c> of</c><00:09:54.790><c> real</c><00:09:55.089><c> applications</c>

00:09:55.430 --> 00:09:55.440 align:start position:0%
I'm sure in a lot of real applications
 

00:09:55.440 --> 00:09:58.380 align:start position:0%
I'm sure in a lot of real applications
especially<00:09:56.440><c> on</c><00:09:56.890><c> other</c><00:09:57.130><c> devices</c><00:09:57.550><c> this</c>

00:09:58.380 --> 00:09:58.390 align:start position:0%
especially on other devices this
 

00:09:58.390 --> 00:09:59.819 align:start position:0%
especially on other devices this
typically<00:09:58.839><c> happens</c><00:09:59.260><c> when</c><00:09:59.350><c> you're</c><00:09:59.529><c> allocating</c>

00:09:59.819 --> 00:09:59.829 align:start position:0%
typically happens when you're allocating
 

00:09:59.829 --> 00:10:01.790 align:start position:0%
typically happens when you're allocating
large<00:10:00.190><c> objects</c><00:10:00.640><c> I</c><00:10:00.850><c> remember</c><00:10:01.329><c> a</c><00:10:01.360><c> lot</c><00:10:01.600><c> of</c>

00:10:01.790 --> 00:10:01.800 align:start position:0%
large objects I remember a lot of
 

00:10:01.800 --> 00:10:03.840 align:start position:0%
large objects I remember a lot of
developers<00:10:02.800><c> in</c><00:10:02.980><c> the</c><00:10:03.100><c> early</c><00:10:03.279><c> days</c><00:10:03.430><c> of</c><00:10:03.459><c> then</c><00:10:03.700><c> of</c>

00:10:03.840 --> 00:10:03.850 align:start position:0%
developers in the early days of then of
 

00:10:03.850 --> 00:10:06.449 align:start position:0%
developers in the early days of then of
Android<00:10:04.270><c> felt</c><00:10:05.020><c> bugs</c><00:10:05.380><c> against</c><00:10:05.890><c> bitmap</c><00:10:06.250><c> factory</c>

00:10:06.449 --> 00:10:06.459 align:start position:0%
Android felt bugs against bitmap factory
 

00:10:06.459 --> 00:10:08.910 align:start position:0%
Android felt bugs against bitmap factory
because<00:10:07.149><c> out</c><00:10:07.329><c> of</c><00:10:07.360><c> memory</c><00:10:07.750><c> error</c><00:10:07.990><c> happened</c><00:10:08.529><c> 10</c>

00:10:08.910 --> 00:10:08.920 align:start position:0%
because out of memory error happened 10
 

00:10:08.920 --> 00:10:11.610 align:start position:0%
because out of memory error happened 10
tended<00:10:09.399><c> to</c><00:10:09.490><c> happen</c><00:10:09.820><c> during</c><00:10:10.029><c> a</c><00:10:10.440><c> decoding</c><00:10:11.440><c> of</c>

00:10:11.610 --> 00:10:11.620 align:start position:0%
tended to happen during a decoding of
 

00:10:11.620 --> 00:10:13.470 align:start position:0%
tended to happen during a decoding of
bitmaps<00:10:11.829><c> and</c><00:10:12.190><c> they</c><00:10:13.000><c> thought</c><00:10:13.180><c> there</c><00:10:13.300><c> was</c><00:10:13.450><c> a</c>

00:10:13.470 --> 00:10:13.480 align:start position:0%
bitmaps and they thought there was a
 

00:10:13.480 --> 00:10:15.480 align:start position:0%
bitmaps and they thought there was a
memory<00:10:13.810><c> leak</c><00:10:13.959><c> in</c><00:10:14.110><c> bitmap</c><00:10:14.440><c> factory</c><00:10:14.560><c> the</c><00:10:15.250><c> main</c>

00:10:15.480 --> 00:10:15.490 align:start position:0%
memory leak in bitmap factory the main
 

00:10:15.490 --> 00:10:18.180 align:start position:0%
memory leak in bitmap factory the main
reason<00:10:15.850><c> was</c><00:10:16.029><c> bitmap</c><00:10:16.870><c> objects</c><00:10:17.260><c> are</c><00:10:17.410><c> big</c><00:10:17.770><c> and</c><00:10:18.040><c> it</c>

00:10:18.180 --> 00:10:18.190 align:start position:0%
reason was bitmap objects are big and it
 

00:10:18.190 --> 00:10:20.579 align:start position:0%
reason was bitmap objects are big and it
was<00:10:18.220><c> hard</c><00:10:18.550><c> to</c><00:10:18.610><c> find</c><00:10:18.850><c> space</c><00:10:19.540><c> for</c><00:10:19.600><c> them</c><00:10:19.899><c> there</c>

00:10:20.579 --> 00:10:20.589 align:start position:0%
was hard to find space for them there
 

00:10:20.589 --> 00:10:23.810 align:start position:0%
was hard to find space for them there
was<00:10:20.649><c> no</c><00:10:20.709><c> leaking</c><00:10:21.130><c> bitmap</c><00:10:21.430><c> factory</c><00:10:21.550><c> whatsoever</c>

00:10:23.810 --> 00:10:23.820 align:start position:0%
was no leaking bitmap factory whatsoever
 

00:10:23.820 --> 00:10:27.720 align:start position:0%
was no leaking bitmap factory whatsoever
so<00:10:24.820><c> we</c><00:10:25.510><c> wrote</c><00:10:25.720><c> a</c><00:10:26.110><c> simple</c><00:10:26.560><c> demo</c><00:10:26.860><c> application</c><00:10:27.579><c> to</c>

00:10:27.720 --> 00:10:27.730 align:start position:0%
so we wrote a simple demo application to
 

00:10:27.730 --> 00:10:29.490 align:start position:0%
so we wrote a simple demo application to
show<00:10:27.760><c> off</c><00:10:28.089><c> how</c><00:10:28.720><c> some</c><00:10:28.990><c> of</c><00:10:29.020><c> the</c><00:10:29.140><c> stuff</c><00:10:29.320><c> with</c>

00:10:29.490 --> 00:10:29.500 align:start position:0%
show off how some of the stuff with
 

00:10:29.500 --> 00:10:32.040 align:start position:0%
show off how some of the stuff with
heaps<00:10:29.740><c> fragmentation</c><00:10:30.550><c> works</c><00:10:30.760><c> so</c><00:10:31.390><c> in</c><00:10:31.720><c> the</c><00:10:31.870><c> demo</c>

00:10:32.040 --> 00:10:32.050 align:start position:0%
heaps fragmentation works so in the demo
 

00:10:32.050 --> 00:10:35.100 align:start position:0%
heaps fragmentation works so in the demo
we<00:10:32.339><c> allocates</c><00:10:33.339><c> chunks</c><00:10:34.149><c> of</c><00:10:34.360><c> memory</c><00:10:34.630><c> all</c><00:10:34.959><c> the</c>

00:10:35.100 --> 00:10:35.110 align:start position:0%
we allocates chunks of memory all the
 

00:10:35.110 --> 00:10:37.110 align:start position:0%
we allocates chunks of memory all the
way<00:10:35.230><c> up</c><00:10:35.380><c> to</c><00:10:35.560><c> max</c><00:10:35.890><c> heap</c><00:10:36.160><c> so</c><00:10:36.399><c> your</c><00:10:36.610><c> heap</c><00:10:36.790><c> starts</c>

00:10:37.110 --> 00:10:37.120 align:start position:0%
way up to max heap so your heap starts
 

00:10:37.120 --> 00:10:38.790 align:start position:0%
way up to max heap so your heap starts
out<00:10:37.270><c> very</c><00:10:37.480><c> small</c><00:10:37.810><c> and</c><00:10:38.020><c> then</c><00:10:38.140><c> if</c><00:10:38.410><c> you</c><00:10:38.529><c> can't</c>

00:10:38.790 --> 00:10:38.800 align:start position:0%
out very small and then if you can't
 

00:10:38.800 --> 00:10:40.650 align:start position:0%
out very small and then if you can't
allocate<00:10:39.160><c> an</c><00:10:39.310><c> object</c><00:10:39.640><c> it's</c><00:10:39.790><c> it's</c><00:10:40.240><c> gonna</c><00:10:40.420><c> grow</c>

00:10:40.650 --> 00:10:40.660 align:start position:0%
allocate an object it's it's gonna grow
 

00:10:40.660 --> 00:10:42.240 align:start position:0%
allocate an object it's it's gonna grow
that<00:10:40.959><c> over</c><00:10:41.260><c> and</c><00:10:41.380><c> over</c><00:10:41.440><c> and</c><00:10:41.680><c> over</c><00:10:41.829><c> until</c><00:10:41.950><c> it</c>

00:10:42.240 --> 00:10:42.250 align:start position:0%
that over and over and over until it
 

00:10:42.250 --> 00:10:43.860 align:start position:0%
that over and over and over until it
reaches<00:10:42.550><c> the</c><00:10:42.579><c> max</c><00:10:42.910><c> possible</c><00:10:43.420><c> so</c><00:10:43.630><c> for</c><00:10:43.779><c> this</c>

00:10:43.860 --> 00:10:43.870 align:start position:0%
reaches the max possible so for this
 

00:10:43.870 --> 00:10:45.810 align:start position:0%
reaches the max possible so for this
demo<00:10:44.200><c> we</c><00:10:44.560><c> allocate</c><00:10:44.890><c> these</c><00:10:45.010><c> 1</c><00:10:45.250><c> Meg</c><00:10:45.430><c> chunks</c>

00:10:45.810 --> 00:10:45.820 align:start position:0%
demo we allocate these 1 Meg chunks
 

00:10:45.820 --> 00:10:47.490 align:start position:0%
demo we allocate these 1 Meg chunks
press<00:10:46.360><c> this</c><00:10:46.510><c> button</c><00:10:46.750><c> it</c><00:10:46.930><c> says</c><00:10:47.079><c> there's</c><00:10:47.290><c> four</c>

00:10:47.490 --> 00:10:47.500 align:start position:0%
press this button it says there's four
 

00:10:47.500 --> 00:10:48.810 align:start position:0%
press this button it says there's four
hundred<00:10:47.740><c> Meg's</c><00:10:47.890><c> free</c><00:10:48.100><c> you</c><00:10:48.250><c> press</c><00:10:48.459><c> the</c><00:10:48.579><c> button</c>

00:10:48.810 --> 00:10:48.820 align:start position:0%
hundred Meg's free you press the button
 

00:10:48.820 --> 00:10:50.190 align:start position:0%
hundred Meg's free you press the button
it's<00:10:48.940><c> gonna</c><00:10:49.029><c> allocate</c><00:10:49.329><c> all</c><00:10:49.720><c> these</c><00:10:49.870><c> 1</c><00:10:50.020><c> Meg</c>

00:10:50.190 --> 00:10:50.200 align:start position:0%
it's gonna allocate all these 1 Meg
 

00:10:50.200 --> 00:10:52.079 align:start position:0%
it's gonna allocate all these 1 Meg
chunks<00:10:50.529><c> all</c><00:10:50.800><c> the</c><00:10:51.100><c> way</c><00:10:51.220><c> until</c><00:10:51.490><c> it</c><00:10:51.640><c> grows</c><00:10:51.850><c> the</c>

00:10:52.079 --> 00:10:52.089 align:start position:0%
chunks all the way until it grows the
 

00:10:52.089 --> 00:10:54.120 align:start position:0%
chunks all the way until it grows the
heap<00:10:52.240><c> until</c><00:10:52.420><c> it</c><00:10:52.660><c> cannot</c><00:10:52.959><c> anymore</c><00:10:53.230><c> you</c><00:10:53.860><c> get</c><00:10:54.010><c> an</c>

00:10:54.120 --> 00:10:54.130 align:start position:0%
heap until it cannot anymore you get an
 

00:10:54.130 --> 00:10:55.620 align:start position:0%
heap until it cannot anymore you get an
error<00:10:54.339><c> we</c><00:10:54.610><c> catch</c><00:10:54.760><c> the</c><00:10:54.970><c> error</c><00:10:55.120><c> and</c><00:10:55.360><c> that</c><00:10:55.480><c> we</c>

00:10:55.620 --> 00:10:55.630 align:start position:0%
error we catch the error and that we
 

00:10:55.630 --> 00:10:57.420 align:start position:0%
error we catch the error and that we
know<00:10:55.779><c> the</c><00:10:55.990><c> heap</c><00:10:56.170><c> is</c><00:10:56.320><c> full</c><00:10:56.529><c> there's</c><00:10:56.770><c> no</c><00:10:56.890><c> this</c><00:10:57.279><c> is</c>

00:10:57.420 --> 00:10:57.430 align:start position:0%
know the heap is full there's no this is
 

00:10:57.430 --> 00:10:58.740 align:start position:0%
know the heap is full there's no this is
pretty<00:10:57.579><c> much</c><00:10:57.700><c> the</c><00:10:57.880><c> only</c><00:10:57.940><c> situation</c><00:10:58.510><c> where</c><00:10:58.690><c> you</c>

00:10:58.740 --> 00:10:58.750 align:start position:0%
pretty much the only situation where you
 

00:10:58.750 --> 00:11:00.389 align:start position:0%
pretty much the only situation where you
should<00:10:58.899><c> do</c><00:10:58.990><c> a</c><00:10:59.020><c> try-catch</c><00:10:59.500><c> on</c><00:10:59.709><c> another</c><00:11:00.010><c> memory</c>

00:11:00.389 --> 00:11:00.399 align:start position:0%
should do a try-catch on another memory
 

00:11:00.399 --> 00:11:03.829 align:start position:0%
should do a try-catch on another memory
error<00:11:00.640><c> don't</c><00:11:01.149><c> do</c><00:11:01.240><c> that</c><00:11:01.390><c> in</c><00:11:01.510><c> your</c><00:11:01.630><c> application</c>

00:11:03.829 --> 00:11:03.839 align:start position:0%
 
 

00:11:03.839 --> 00:11:07.050 align:start position:0%
 
and<00:11:04.839><c> then</c><00:11:05.500><c> we</c><00:11:06.100><c> say</c><00:11:06.250><c> ok</c><00:11:06.520><c> well</c><00:11:06.670><c> there's</c><00:11:06.820><c> only</c><00:11:06.940><c> one</c>

00:11:07.050 --> 00:11:07.060 align:start position:0%
and then we say ok well there's only one
 

00:11:07.060 --> 00:11:08.560 align:start position:0%
and then we say ok well there's only one
Meg<00:11:07.390><c> free</c><00:11:07.690><c> so</c>

00:11:08.560 --> 00:11:08.570 align:start position:0%
Meg free so
 

00:11:08.570 --> 00:11:09.760 align:start position:0%
Meg free so
gonna<00:11:08.660><c> go</c><00:11:08.840><c> ahead</c><00:11:09.050><c> and</c><00:11:09.170><c> fragment</c><00:11:09.530><c> the</c><00:11:09.590><c> heap</c>

00:11:09.760 --> 00:11:09.770 align:start position:0%
gonna go ahead and fragment the heap
 

00:11:09.770 --> 00:11:12.310 align:start position:0%
gonna go ahead and fragment the heap
we're<00:11:10.610><c> going</c><00:11:10.820><c> to</c><00:11:10.910><c> free</c><00:11:11.180><c> a</c><00:11:11.210><c> bunch</c><00:11:11.810><c> of</c><00:11:11.930><c> trunks</c><00:11:12.200><c> so</c>

00:11:12.310 --> 00:11:12.320 align:start position:0%
we're going to free a bunch of trunks so
 

00:11:12.320 --> 00:11:13.480 align:start position:0%
we're going to free a bunch of trunks so
we're<00:11:12.650><c> basically</c><00:11:12.890><c> going</c><00:11:13.100><c> to</c><00:11:13.190><c> go</c><00:11:13.280><c> through</c>

00:11:13.480 --> 00:11:13.490 align:start position:0%
we're basically going to go through
 

00:11:13.490 --> 00:11:14.800 align:start position:0%
we're basically going to go through
everything<00:11:13.820><c> we've</c><00:11:14.090><c> allocated</c><00:11:14.240><c> and</c><00:11:14.660><c> free</c>

00:11:14.800 --> 00:11:14.810 align:start position:0%
everything we've allocated and free
 

00:11:14.810 --> 00:11:17.500 align:start position:0%
everything we've allocated and free
every<00:11:15.230><c> other</c><00:11:15.410><c> one</c><00:11:15.710><c> through</c><00:11:16.340><c> the</c><00:11:16.490><c> entire</c><00:11:16.760><c> just</c>

00:11:17.500 --> 00:11:17.510 align:start position:0%
every other one through the entire just
 

00:11:17.510 --> 00:11:19.630 align:start position:0%
every other one through the entire just
go<00:11:17.630><c> through</c><00:11:17.810><c> every</c><00:11:18.170><c> other</c><00:11:18.320><c> reference</c><00:11:18.890><c> city</c><00:11:19.430><c> to</c>

00:11:19.630 --> 00:11:19.640 align:start position:0%
go through every other reference city to
 

00:11:19.640 --> 00:11:21.310 align:start position:0%
go through every other reference city to
know<00:11:19.820><c> then</c><00:11:20.240><c> force</c><00:11:20.510><c> did</c><00:11:20.690><c> you</c><00:11:20.810><c> see</c><00:11:20.960><c> a</c><00:11:21.020><c> couple</c>

00:11:21.310 --> 00:11:21.320 align:start position:0%
know then force did you see a couple
 

00:11:21.320 --> 00:11:22.840 align:start position:0%
know then force did you see a couple
times<00:11:21.500><c> to</c><00:11:21.650><c> make</c><00:11:21.800><c> sure</c><00:11:21.920><c> that</c><00:11:22.100><c> that</c><00:11:22.310><c> memory</c><00:11:22.640><c> goes</c>

00:11:22.840 --> 00:11:22.850 align:start position:0%
times to make sure that that memory goes
 

00:11:22.850 --> 00:11:25.240 align:start position:0%
times to make sure that that memory goes
away<00:11:23.060><c> and</c><00:11:23.630><c> then</c><00:11:24.140><c> we</c><00:11:24.230><c> get</c><00:11:24.350><c> this</c><00:11:24.530><c> result</c><00:11:24.950><c> it</c><00:11:25.070><c> says</c>

00:11:25.240 --> 00:11:25.250 align:start position:0%
away and then we get this result it says
 

00:11:25.250 --> 00:11:27.460 align:start position:0%
away and then we get this result it says
okay<00:11:25.580><c> the</c><00:11:25.730><c> fragmented</c><00:11:26.120><c> heap</c><00:11:26.270><c> size</c><00:11:26.450><c> is</c><00:11:26.690><c> now</c><00:11:26.810><c> 200</c>

00:11:27.460 --> 00:11:27.470 align:start position:0%
okay the fragmented heap size is now 200
 

00:11:27.470 --> 00:11:27.850 align:start position:0%
okay the fragmented heap size is now 200
Meg's

00:11:27.850 --> 00:11:27.860 align:start position:0%
Meg's
 

00:11:27.860 --> 00:11:30.610 align:start position:0%
Meg's
so<00:11:28.670><c> we</c><00:11:28.850><c> should</c><00:11:29.030><c> have</c><00:11:29.180><c> plenty</c><00:11:29.390><c> of</c><00:11:29.510><c> space</c><00:11:29.750><c> to</c><00:11:30.050><c> go</c>

00:11:30.610 --> 00:11:30.620 align:start position:0%
so we should have plenty of space to go
 

00:11:30.620 --> 00:11:32.680 align:start position:0%
so we should have plenty of space to go
ahead<00:11:30.740><c> and</c><00:11:31.010><c> allocate</c><00:11:31.190><c> a</c><00:11:31.490><c> two</c><00:11:31.820><c> megabyte</c><00:11:32.210><c> object</c>

00:11:32.680 --> 00:11:32.690 align:start position:0%
ahead and allocate a two megabyte object
 

00:11:32.690 --> 00:11:34.540 align:start position:0%
ahead and allocate a two megabyte object
so<00:11:32.840><c> that</c><00:11:32.870><c> blue</c><00:11:33.170><c> object</c><00:11:33.620><c> there</c><00:11:33.800><c> it's</c><00:11:34.070><c> only</c><00:11:34.280><c> two</c>

00:11:34.540 --> 00:11:34.550 align:start position:0%
so that blue object there it's only two
 

00:11:34.550 --> 00:11:36.370 align:start position:0%
so that blue object there it's only two
Meg's<00:11:34.760><c> we've</c><00:11:34.970><c> got</c><00:11:35.150><c> 200</c><00:11:35.660><c> we've</c><00:11:35.930><c> got</c><00:11:36.110><c> two</c>

00:11:36.370 --> 00:11:36.380 align:start position:0%
Meg's we've got 200 we've got two
 

00:11:36.380 --> 00:11:39.040 align:start position:0%
Meg's we've got 200 we've got two
hundred<00:11:36.470><c> Meg's</c><00:11:36.800><c> free</c><00:11:37.070><c> so</c><00:11:37.940><c> what</c><00:11:38.270><c> can</c><00:11:38.360><c> be</c><00:11:38.420><c> the</c>

00:11:39.040 --> 00:11:39.050 align:start position:0%
hundred Meg's free so what can be the
 

00:11:39.050 --> 00:11:41.260 align:start position:0%
hundred Meg's free so what can be the
problem<00:11:39.230><c> so</c><00:11:40.220><c> we</c><00:11:40.340><c> press</c><00:11:40.490><c> the</c><00:11:40.640><c> button</c><00:11:40.670><c> and</c><00:11:41.150><c> it</c>

00:11:41.260 --> 00:11:41.270 align:start position:0%
problem so we press the button and it
 

00:11:41.270 --> 00:11:43.570 align:start position:0%
problem so we press the button and it
says<00:11:41.540><c> nope</c><00:11:42.140><c> we</c><00:11:42.440><c> can't</c><00:11:42.680><c> fit</c><00:11:42.860><c> that</c><00:11:42.980><c> in</c><00:11:43.160><c> there</c><00:11:43.340><c> and</c>

00:11:43.570 --> 00:11:43.580 align:start position:0%
says nope we can't fit that in there and
 

00:11:43.580 --> 00:11:45.310 align:start position:0%
says nope we can't fit that in there and
if<00:11:44.120><c> you</c><00:11:44.270><c> look</c><00:11:44.480><c> at</c><00:11:44.540><c> the</c><00:11:44.630><c> log</c><00:11:44.810><c> you</c><00:11:45.080><c> get</c><00:11:45.230><c> these</c>

00:11:45.310 --> 00:11:45.320 align:start position:0%
if you look at the log you get these
 

00:11:45.320 --> 00:11:46.720 align:start position:0%
if you look at the log you get these
depressing<00:11:45.830><c> things</c><00:11:46.070><c> here</c><00:11:46.400><c> where</c><00:11:46.610><c> it</c><00:11:46.700><c> says</c>

00:11:46.720 --> 00:11:46.730 align:start position:0%
depressing things here where it says
 

00:11:46.730 --> 00:11:49.000 align:start position:0%
depressing things here where it says
special<00:11:47.240><c> -</c><00:11:47.420><c> error</c><00:11:47.570><c> message</c><00:11:48.080><c> in</c><00:11:48.590><c> all</c><00:11:48.800><c> of</c>

00:11:49.000 --> 00:11:49.010 align:start position:0%
special - error message in all of
 

00:11:49.010 --> 00:11:51.040 align:start position:0%
special - error message in all of
computer<00:11:49.340><c> science</c><00:11:49.730><c> yes</c><00:11:49.880><c> right</c><00:11:50.510><c> here</c><00:11:50.720><c> this</c><00:11:50.930><c> is</c>

00:11:51.040 --> 00:11:51.050 align:start position:0%
computer science yes right here this is
 

00:11:51.050 --> 00:11:53.110 align:start position:0%
computer science yes right here this is
this<00:11:51.230><c> is</c><00:11:51.350><c> beautiful</c><00:11:51.500><c> it</c><00:11:51.860><c> says</c><00:11:52.010><c> okay</c><00:11:52.280><c> you</c><00:11:52.880><c> have</c>

00:11:53.110 --> 00:11:53.120 align:start position:0%
this is beautiful it says okay you have
 

00:11:53.120 --> 00:11:55.810 align:start position:0%
this is beautiful it says okay you have
free<00:11:54.110><c> two</c><00:11:54.380><c> hundred</c><00:11:54.680><c> Meg's</c><00:11:54.860><c> free</c><00:11:55.130><c> out</c><00:11:55.370><c> of</c><00:11:55.400><c> four</c>

00:11:55.810 --> 00:11:55.820 align:start position:0%
free two hundred Meg's free out of four
 

00:11:55.820 --> 00:11:58.420 align:start position:0%
free two hundred Meg's free out of four
hundred<00:11:56.000><c> and</c><00:11:56.410><c> we're</c><00:11:57.410><c> forcing</c><00:11:57.740><c> a</c><00:11:57.920><c> collection</c>

00:11:58.420 --> 00:11:58.430 align:start position:0%
hundred and we're forcing a collection
 

00:11:58.430 --> 00:12:00.010 align:start position:0%
hundred and we're forcing a collection
so<00:11:58.580><c> that</c><00:11:58.610><c> we</c><00:11:58.790><c> can</c><00:11:58.940><c> make</c><00:11:59.090><c> room</c><00:11:59.300><c> for</c><00:11:59.360><c> a</c><00:11:59.600><c> two</c><00:11:59.840><c> Meg</c>

00:12:00.010 --> 00:12:00.020 align:start position:0%
so that we can make room for a two Meg
 

00:12:00.020 --> 00:12:02.590 align:start position:0%
so that we can make room for a two Meg
chunk<00:12:00.350><c> and</c><00:12:00.620><c> we're</c><00:12:01.370><c> trying</c><00:12:01.700><c> really</c><00:12:02.000><c> hard</c><00:12:02.150><c> to</c><00:12:02.480><c> do</c>

00:12:02.590 --> 00:12:02.600 align:start position:0%
chunk and we're trying really hard to do
 

00:12:02.600 --> 00:12:04.750 align:start position:0%
chunk and we're trying really hard to do
that<00:12:02.840><c> and</c><00:12:03.080><c> we</c><00:12:03.590><c> ran</c><00:12:03.800><c> out</c><00:12:03.980><c> of</c><00:12:04.010><c> memory</c><00:12:04.250><c> so</c><00:12:04.640><c> we</c>

00:12:04.750 --> 00:12:04.760 align:start position:0%
that and we ran out of memory so we
 

00:12:04.760 --> 00:12:06.700 align:start position:0%
that and we ran out of memory so we
cannot<00:12:05.030><c> find</c><00:12:05.300><c> space</c><00:12:05.540><c> for</c><00:12:05.570><c> two</c><00:12:05.960><c> Meg's</c><00:12:06.200><c> out</c><00:12:06.440><c> of</c>

00:12:06.700 --> 00:12:06.710 align:start position:0%
cannot find space for two Meg's out of
 

00:12:06.710 --> 00:12:09.010 align:start position:0%
cannot find space for two Meg's out of
200<00:12:07.250><c> because</c><00:12:07.760><c> apparently</c><00:12:08.120><c> dalvik</c><00:12:08.570><c> was</c><00:12:08.690><c> really</c>

00:12:09.010 --> 00:12:09.020 align:start position:0%
200 because apparently dalvik was really
 

00:12:09.020 --> 00:12:11.590 align:start position:0%
200 because apparently dalvik was really
bad<00:12:09.170><c> at</c><00:12:09.380><c> math</c><00:12:09.650><c> the</c><00:12:10.400><c> problem</c><00:12:10.790><c> was</c><00:12:10.970><c> of</c><00:12:11.210><c> course</c><00:12:11.360><c> if</c>

00:12:11.590 --> 00:12:11.600 align:start position:0%
bad at math the problem was of course if
 

00:12:11.600 --> 00:12:13.540 align:start position:0%
bad at math the problem was of course if
we<00:12:11.660><c> couldn't</c><00:12:11.900><c> find</c><00:12:12.080><c> 2</c><00:12:12.350><c> Meg's</c><00:12:12.590><c> contiguous</c><00:12:13.370><c> and</c>

00:12:13.540 --> 00:12:13.550 align:start position:0%
we couldn't find 2 Meg's contiguous and
 

00:12:13.550 --> 00:12:15.550 align:start position:0%
we couldn't find 2 Meg's contiguous and
dalvik<00:12:14.060><c> net</c><00:12:14.390><c> I'll</c><00:12:14.510><c> have</c><00:12:14.690><c> the</c><00:12:14.870><c> ability</c><00:12:15.530><c> to</c>

00:12:15.550 --> 00:12:15.560 align:start position:0%
dalvik net I'll have the ability to
 

00:12:15.560 --> 00:12:17.440 align:start position:0%
dalvik net I'll have the ability to
compact<00:12:16.100><c> the</c><00:12:16.280><c> heap</c><00:12:16.430><c> you</c><00:12:16.700><c> get</c><00:12:16.940><c> what</c><00:12:17.120><c> you</c><00:12:17.240><c> get</c>

00:12:17.440 --> 00:12:17.450 align:start position:0%
compact the heap you get what you get
 

00:12:17.450 --> 00:12:19.390 align:start position:0%
compact the heap you get what you get
once<00:12:17.690><c> we</c><00:12:17.870><c> put</c><00:12:18.110><c> the</c><00:12:18.230><c> thing</c><00:12:18.410><c> there</c><00:12:18.620><c> it</c><00:12:18.800><c> was</c><00:12:19.220><c> not</c>

00:12:19.390 --> 00:12:19.400 align:start position:0%
once we put the thing there it was not
 

00:12:19.400 --> 00:12:20.620 align:start position:0%
once we put the thing there it was not
going<00:12:19.580><c> to</c><00:12:19.640><c> move</c><00:12:19.820><c> so</c><00:12:20.090><c> we</c><00:12:20.180><c> couldn't</c><00:12:20.450><c> actually</c>

00:12:20.620 --> 00:12:20.630 align:start position:0%
going to move so we couldn't actually
 

00:12:20.630 --> 00:12:22.900 align:start position:0%
going to move so we couldn't actually
shove<00:12:21.050><c> stuff</c><00:12:21.230><c> to</c><00:12:21.530><c> the</c><00:12:21.650><c> side</c><00:12:21.830><c> to</c><00:12:22.490><c> make</c><00:12:22.670><c> a</c><00:12:22.700><c> room</c>

00:12:22.900 --> 00:12:22.910 align:start position:0%
shove stuff to the side to make a room
 

00:12:22.910 --> 00:12:27.550 align:start position:0%
shove stuff to the side to make a room
for<00:12:23.150><c> a</c><00:12:23.180><c> larger</c><00:12:23.570><c> object</c><00:12:25.390><c> so</c><00:12:26.390><c> art</c><00:12:26.720><c> came</c><00:12:26.990><c> along</c><00:12:27.290><c> in</c>

00:12:27.550 --> 00:12:27.560 align:start position:0%
for a larger object so art came along in
 

00:12:27.560 --> 00:12:30.460 align:start position:0%
for a larger object so art came along in
lollipop<00:12:28.130><c> as</c><00:12:28.970><c> I</c><00:12:29.180><c> said</c><00:12:29.360><c> it's</c><00:12:29.510><c> a</c><00:12:29.600><c> platform</c><00:12:30.260><c> for</c>

00:12:30.460 --> 00:12:30.470 align:start position:0%
lollipop as I said it's a platform for
 

00:12:30.470 --> 00:12:32.170 align:start position:0%
lollipop as I said it's a platform for
optimizations<00:12:31.250><c> it</c><00:12:31.460><c> no</c><00:12:31.670><c> longer</c><00:12:31.970><c> had</c><00:12:32.150><c> the</c>

00:12:32.170 --> 00:12:32.180 align:start position:0%
optimizations it no longer had the
 

00:12:32.180 --> 00:12:33.700 align:start position:0%
optimizations it no longer had the
memory<00:12:32.420><c> constraints</c><00:12:33.020><c> that</c><00:12:33.050><c> dalvik</c><00:12:33.440><c> did</c><00:12:33.590><c> so</c>

00:12:33.700 --> 00:12:33.710 align:start position:0%
memory constraints that dalvik did so
 

00:12:33.710 --> 00:12:34.960 align:start position:0%
memory constraints that dalvik did so
they<00:12:33.830><c> could</c><00:12:33.950><c> sort</c><00:12:34.130><c> of</c><00:12:34.190><c> build</c><00:12:34.400><c> in</c><00:12:34.550><c> a</c><00:12:34.640><c> lot</c><00:12:34.790><c> of</c><00:12:34.820><c> the</c>

00:12:34.960 --> 00:12:34.970 align:start position:0%
they could sort of build in a lot of the
 

00:12:34.970 --> 00:12:36.550 align:start position:0%
they could sort of build in a lot of the
fundamentals<00:12:35.480><c> that</c><00:12:35.600><c> they've</c><00:12:35.780><c> been</c><00:12:35.930><c> improving</c>

00:12:36.550 --> 00:12:36.560 align:start position:0%
fundamentals that they've been improving
 

00:12:36.560 --> 00:12:39.040 align:start position:0%
fundamentals that they've been improving
over<00:12:37.010><c> time</c><00:12:37.040><c> but</c><00:12:37.580><c> out</c><00:12:37.760><c> of</c><00:12:37.790><c> the</c><00:12:38.030><c> box</c><00:12:38.270><c> it</c><00:12:38.900><c> came</c>

00:12:39.040 --> 00:12:39.050 align:start position:0%
over time but out of the box it came
 

00:12:39.050 --> 00:12:41.080 align:start position:0%
over time but out of the box it came
with<00:12:39.260><c> much</c><00:12:39.530><c> faster</c><00:12:39.950><c> allocation</c><00:12:40.520><c> times</c><00:12:40.760><c> must</c>

00:12:41.080 --> 00:12:41.090 align:start position:0%
with much faster allocation times must
 

00:12:41.090 --> 00:12:43.510 align:start position:0%
with much faster allocation times must
faster<00:12:41.660><c> much</c><00:12:42.230><c> faster</c><00:12:42.590><c> collections</c><00:12:43.130><c> as</c><00:12:43.310><c> well</c>

00:12:43.510 --> 00:12:43.520 align:start position:0%
faster much faster collections as well
 

00:12:43.520 --> 00:12:45.250 align:start position:0%
faster much faster collections as well
as<00:12:43.640><c> a</c><00:12:43.670><c> faster</c><00:12:43.940><c> runtime</c><00:12:44.510><c> the</c><00:12:44.660><c> ability</c><00:12:45.020><c> to</c><00:12:45.050><c> do</c>

00:12:45.250 --> 00:12:45.260 align:start position:0%
as a faster runtime the ability to do
 

00:12:45.260 --> 00:12:47.650 align:start position:0%
as a faster runtime the ability to do
ahead<00:12:45.710><c> of</c><00:12:45.890><c> time</c><00:12:46.390><c> compilations</c><00:12:47.390><c> who</c><00:12:47.540><c> are</c>

00:12:47.650 --> 00:12:47.660 align:start position:0%
ahead of time compilations who are
 

00:12:47.660 --> 00:12:49.660 align:start position:0%
ahead of time compilations who are
actually<00:12:47.960><c> like</c><00:12:48.140><c> running</c><00:12:48.500><c> binary</c><00:12:49.250><c> code</c><00:12:49.490><c> all</c>

00:12:49.660 --> 00:12:49.670 align:start position:0%
actually like running binary code all
 

00:12:49.670 --> 00:12:51.460 align:start position:0%
actually like running binary code all
the<00:12:49.700><c> time</c><00:12:50.030><c> we're</c><00:12:50.270><c> not</c><00:12:50.420><c> constantly</c><00:12:50.810><c> getting</c>

00:12:51.460 --> 00:12:51.470 align:start position:0%
the time we're not constantly getting
 

00:12:51.470 --> 00:12:53.200 align:start position:0%
the time we're not constantly getting
things<00:12:51.710><c> to</c><00:12:51.980><c> find</c><00:12:52.400><c> how</c><00:12:52.580><c> we</c><00:12:52.640><c> can</c><00:12:52.850><c> speed</c><00:12:53.090><c> things</c>

00:12:53.200 --> 00:12:53.210 align:start position:0%
things to find how we can speed things
 

00:12:53.210 --> 00:12:54.850 align:start position:0%
things to find how we can speed things
everything<00:12:53.630><c> everything</c><00:12:54.170><c> faster</c><00:12:54.530><c> one</c><00:12:54.680><c> thing</c>

00:12:54.850 --> 00:12:54.860 align:start position:0%
everything everything faster one thing
 

00:12:54.860 --> 00:12:56.140 align:start position:0%
everything everything faster one thing
you<00:12:54.980><c> we</c><00:12:55.190><c> need</c><00:12:55.310><c> to</c><00:12:55.400><c> make</c><00:12:55.550><c> clear</c><00:12:55.670><c> is</c><00:12:55.850><c> when</c><00:12:56.030><c> we</c>

00:12:56.140 --> 00:12:56.150 align:start position:0%
you we need to make clear is when we
 

00:12:56.150 --> 00:12:57.910 align:start position:0%
you we need to make clear is when we
talk<00:12:56.300><c> about</c><00:12:56.330><c> education</c><00:12:56.690><c> and</c><00:12:57.500><c> faster</c>

00:12:57.910 --> 00:12:57.920 align:start position:0%
talk about education and faster
 

00:12:57.920 --> 00:12:59.920 align:start position:0%
talk about education and faster
allocation<00:12:58.370><c> in</c><00:12:58.520><c> this</c><00:12:58.640><c> talk</c><00:12:58.850><c> we</c><00:12:59.060><c> mean</c><00:12:59.240><c> just</c><00:12:59.840><c> the</c>

00:12:59.920 --> 00:12:59.930 align:start position:0%
allocation in this talk we mean just the
 

00:12:59.930 --> 00:13:01.870 align:start position:0%
allocation in this talk we mean just the
time<00:13:00.110><c> it</c><00:13:00.140><c> takes</c><00:13:00.350><c> for</c><00:13:00.470><c> the</c><00:13:00.560><c> runtime</c><00:13:01.190><c> to</c><00:13:01.580><c> reserve</c>

00:13:01.870 --> 00:13:01.880 align:start position:0%
time it takes for the runtime to reserve
 

00:13:01.880 --> 00:13:03.070 align:start position:0%
time it takes for the runtime to reserve
the<00:13:02.060><c> memory</c><00:13:02.330><c> we're</c><00:13:02.540><c> not</c><00:13:02.660><c> talking</c><00:13:02.900><c> about</c><00:13:02.930><c> the</c>

00:13:03.070 --> 00:13:03.080 align:start position:0%
the memory we're not talking about the
 

00:13:03.080 --> 00:13:04.930 align:start position:0%
the memory we're not talking about the
time<00:13:03.230><c> it</c><00:13:03.380><c> takes</c><00:13:03.410><c> to</c><00:13:03.830><c> run</c><00:13:03.950><c> the</c><00:13:04.100><c> Constructors</c><00:13:04.730><c> it</c>

00:13:04.930 --> 00:13:04.940 align:start position:0%
time it takes to run the Constructors it
 

00:13:04.940 --> 00:13:06.340 align:start position:0%
time it takes to run the Constructors it
has<00:13:05.060><c> nothing</c><00:13:05.390><c> to</c><00:13:05.420><c> do</c><00:13:05.570><c> with</c><00:13:05.600><c> your</c><00:13:05.960><c> code</c><00:13:06.170><c> it's</c>

00:13:06.340 --> 00:13:06.350 align:start position:0%
has nothing to do with your code it's
 

00:13:06.350 --> 00:13:10.300 align:start position:0%
has nothing to do with your code it's
only<00:13:06.560><c> in</c><00:13:06.680><c> the</c><00:13:06.770><c> runtime</c><00:13:07.100><c> itself</c><00:13:09.040><c> alright</c><00:13:10.040><c> so</c>

00:13:10.300 --> 00:13:10.310 align:start position:0%
only in the runtime itself alright so
 

00:13:10.310 --> 00:13:13.000 align:start position:0%
only in the runtime itself alright so
how<00:13:10.550><c> did</c><00:13:10.730><c> our</c><00:13:10.850><c> allocation</c><00:13:11.840><c> work</c><00:13:12.110><c> so</c><00:13:12.350><c> in</c><00:13:12.680><c> our</c><00:13:12.860><c> to</c>

00:13:13.000 --> 00:13:13.010 align:start position:0%
how did our allocation work so in our to
 

00:13:13.010 --> 00:13:14.350 align:start position:0%
how did our allocation work so in our to
introduce<00:13:13.400><c> the</c><00:13:13.520><c> new</c><00:13:13.640><c> educator</c><00:13:14.000><c> called</c><00:13:14.270><c> the</c>

00:13:14.350 --> 00:13:14.360 align:start position:0%
introduce the new educator called the
 

00:13:14.360 --> 00:13:16.030 align:start position:0%
introduce the new educator called the
Ross<00:13:14.600><c> Alec</c><00:13:15.020><c> and</c><00:13:15.320><c> I</c><00:13:15.560><c> don't</c><00:13:15.620><c> know</c><00:13:15.800><c> what</c><00:13:15.950><c> it</c>

00:13:16.030 --> 00:13:16.040 align:start position:0%
Ross Alec and I don't know what it
 

00:13:16.040 --> 00:13:18.490 align:start position:0%
Ross Alec and I don't know what it
stands<00:13:16.340><c> for</c><00:13:16.460><c> actually</c><00:13:17.030><c> but</c><00:13:17.840><c> it</c><00:13:17.930><c> replaces</c>

00:13:18.490 --> 00:13:18.500 align:start position:0%
stands for actually but it replaces
 

00:13:18.500 --> 00:13:20.230 align:start position:0%
stands for actually but it replaces
something<00:13:18.710><c> called</c><00:13:19.010><c> DL</c><00:13:19.310><c> malloc</c><00:13:19.640><c> so</c><00:13:19.940><c> the</c><00:13:20.120><c> L</c>

00:13:20.230 --> 00:13:20.240 align:start position:0%
something called DL malloc so the L
 

00:13:20.240 --> 00:13:21.920 align:start position:0%
something called DL malloc so the L
stands<00:13:20.840><c> for</c><00:13:20.870><c> Doug</c><00:13:21.200><c> Lee</c>

00:13:21.920 --> 00:13:21.930 align:start position:0%
stands for Doug Lee
 

00:13:21.930 --> 00:13:23.540 align:start position:0%
stands for Doug Lee
was<00:13:22.230><c> also</c><00:13:22.410><c> the</c><00:13:22.680><c> person</c><00:13:23.070><c> who</c><00:13:23.100><c> wrote</c><00:13:23.339><c> I</c><00:13:23.520><c> believe</c>

00:13:23.540 --> 00:13:23.550 align:start position:0%
was also the person who wrote I believe
 

00:13:23.550 --> 00:13:26.210 align:start position:0%
was also the person who wrote I believe
Java<00:13:24.149><c> dot</c><00:13:24.360><c> util</c><00:13:24.660><c> dot</c><00:13:24.720><c> concurrent</c><00:13:25.350><c> that</c><00:13:25.950><c> that's</c>

00:13:26.210 --> 00:13:26.220 align:start position:0%
Java dot util dot concurrent that that's
 

00:13:26.220 --> 00:13:27.680 align:start position:0%
Java dot util dot concurrent that that's
what<00:13:26.370><c> happens</c><00:13:26.640><c> if</c><00:13:26.700><c> you</c><00:13:26.790><c> write</c><00:13:27.000><c> a</c><00:13:27.029><c> really</c><00:13:27.270><c> nice</c>

00:13:27.680 --> 00:13:27.690 align:start position:0%
what happens if you write a really nice
 

00:13:27.690 --> 00:13:30.170 align:start position:0%
what happens if you write a really nice
algorithm<00:13:28.170><c> then</c><00:13:28.589><c> people</c><00:13:28.770><c> name</c><00:13:29.339><c> the</c><00:13:29.700><c> algorithm</c>

00:13:30.170 --> 00:13:30.180 align:start position:0%
algorithm then people name the algorithm
 

00:13:30.180 --> 00:13:31.940 align:start position:0%
algorithm then people name the algorithm
yeah<00:13:30.300><c> it's</c><00:13:31.020><c> the</c><00:13:31.140><c> kind</c><00:13:31.320><c> of</c><00:13:31.380><c> person</c><00:13:31.560><c> that</c><00:13:31.770><c> makes</c>

00:13:31.940 --> 00:13:31.950 align:start position:0%
yeah it's the kind of person that makes
 

00:13:31.950 --> 00:13:34.540 align:start position:0%
yeah it's the kind of person that makes
me<00:13:32.279><c> feel</c><00:13:32.730><c> very</c><00:13:32.760><c> inadequate</c><00:13:33.270><c> as</c><00:13:33.750><c> an</c><00:13:33.839><c> engineer</c>

00:13:34.540 --> 00:13:34.550 align:start position:0%
me feel very inadequate as an engineer
 

00:13:34.550 --> 00:13:36.560 align:start position:0%
me feel very inadequate as an engineer
really<00:13:35.550><c> smart</c>

00:13:36.560 --> 00:13:36.570 align:start position:0%
really smart
 

00:13:36.570 --> 00:13:38.630 align:start position:0%
really smart
anyway<00:13:36.990><c> the</c><00:13:37.200><c> omec</c><00:13:37.470><c> is</c><00:13:37.830><c> basically</c><00:13:38.430><c> the</c>

00:13:38.630 --> 00:13:38.640 align:start position:0%
anyway the omec is basically the
 

00:13:38.640 --> 00:13:40.699 align:start position:0%
anyway the omec is basically the
algorithm<00:13:39.089><c> behind</c><00:13:39.630><c> the</c><00:13:39.779><c> malloc</c><00:13:40.140><c> function</c>

00:13:40.699 --> 00:13:40.709 align:start position:0%
algorithm behind the malloc function
 

00:13:40.709 --> 00:13:43.160 align:start position:0%
algorithm behind the malloc function
called<00:13:41.180><c> native</c><00:13:42.180><c> code</c><00:13:42.390><c> so</c><00:13:42.570><c> this</c><00:13:42.720><c> is</c><00:13:42.839><c> what</c><00:13:42.990><c> you</c>

00:13:43.160 --> 00:13:43.170 align:start position:0%
called native code so this is what you
 

00:13:43.170 --> 00:13:44.840 align:start position:0%
called native code so this is what you
use<00:13:43.350><c> when</c><00:13:43.560><c> you</c><00:13:43.620><c> call</c><00:13:43.770><c> malloc</c><00:13:43.950><c> or</c><00:13:44.279><c> call</c><00:13:44.520><c> new</c><00:13:44.730><c> in</c>

00:13:44.840 --> 00:13:44.850 align:start position:0%
use when you call malloc or call new in
 

00:13:44.850 --> 00:13:46.940 align:start position:0%
use when you call malloc or call new in
C<00:13:45.060><c> or</c><00:13:45.149><c> C++</c><00:13:45.300><c> this</c><00:13:46.110><c> is</c><00:13:46.290><c> the</c><00:13:46.380><c> algorithm</c><00:13:46.620><c> we're</c>

00:13:46.940 --> 00:13:46.950 align:start position:0%
C or C++ this is the algorithm we're
 

00:13:46.950 --> 00:13:49.040 align:start position:0%
C or C++ this is the algorithm we're
using<00:13:47.160><c> so</c><00:13:47.700><c> dalvik</c><00:13:48.330><c> was</c><00:13:48.450><c> relying</c><00:13:48.750><c> on</c><00:13:48.870><c> that</c>

00:13:49.040 --> 00:13:49.050 align:start position:0%
using so dalvik was relying on that
 

00:13:49.050 --> 00:13:51.410 align:start position:0%
using so dalvik was relying on that
actually<00:13:49.950><c> replaced</c><00:13:50.339><c> it</c><00:13:50.490><c> with</c><00:13:50.520><c> its</c><00:13:50.850><c> own</c><00:13:50.970><c> Cobras</c>

00:13:51.410 --> 00:13:51.420 align:start position:0%
actually replaced it with its own Cobras
 

00:13:51.420 --> 00:13:54.019 align:start position:0%
actually replaced it with its own Cobras
so<00:13:52.260><c> the</c><00:13:52.410><c> main</c><00:13:52.589><c> benefit</c><00:13:53.070><c> of</c><00:13:53.100><c> Rostock</c><00:13:53.730><c> is</c><00:13:53.880><c> that</c>

00:13:54.019 --> 00:13:54.029 align:start position:0%
so the main benefit of Rostock is that
 

00:13:54.029 --> 00:13:56.150 align:start position:0%
so the main benefit of Rostock is that
thread<00:13:54.540><c> aware</c><00:13:54.959><c> so</c><00:13:55.560><c> it's</c><00:13:55.680><c> able</c><00:13:55.800><c> to</c><00:13:55.950><c> do</c>

00:13:56.150 --> 00:13:56.160 align:start position:0%
thread aware so it's able to do
 

00:13:56.160 --> 00:13:57.470 align:start position:0%
thread aware so it's able to do
allocations<00:13:56.670><c> that</c><00:13:56.730><c> are</c><00:13:56.820><c> specific</c><00:13:57.330><c> to</c><00:13:57.360><c> a</c>

00:13:57.470 --> 00:13:57.480 align:start position:0%
allocations that are specific to a
 

00:13:57.480 --> 00:13:59.030 align:start position:0%
allocations that are specific to a
thread<00:13:57.810><c> and</c><00:13:57.959><c> we're</c><00:13:58.140><c> going</c><00:13:58.290><c> to</c><00:13:58.320><c> we're</c><00:13:58.830><c> going</c><00:13:58.980><c> to</c>

00:13:59.030 --> 00:13:59.040 align:start position:0%
thread and we're going to we're going to
 

00:13:59.040 --> 00:14:00.949 align:start position:0%
thread and we're going to we're going to
look<00:13:59.190><c> at</c><00:13:59.370><c> additional</c><00:13:59.610><c> detail</c><00:14:00.209><c> and</c><00:14:00.870><c> you</c>

00:14:00.949 --> 00:14:00.959 align:start position:0%
look at additional detail and you
 

00:14:00.959 --> 00:14:02.510 align:start position:0%
look at additional detail and you
understand<00:14:01.380><c> why</c><00:14:01.529><c> it</c><00:14:01.589><c> brings</c><00:14:02.250><c> a</c><00:14:02.339><c> lot</c><00:14:02.459><c> of</c>

00:14:02.510 --> 00:14:02.520 align:start position:0%
understand why it brings a lot of
 

00:14:02.520 --> 00:14:04.610 align:start position:0%
understand why it brings a lot of
benefits<00:14:02.839><c> there's</c><00:14:03.839><c> also</c><00:14:03.959><c> a</c><00:14:04.080><c> lot</c><00:14:04.290><c> of</c><00:14:04.320><c> lis</c><00:14:04.529><c> or</c>

00:14:04.610 --> 00:14:04.620 align:start position:0%
benefits there's also a lot of lis or
 

00:14:04.620 --> 00:14:06.139 align:start position:0%
benefits there's also a lot of lis or
twigs<00:14:04.890><c> that</c><00:14:04.950><c> have</c><00:14:05.130><c> been</c><00:14:05.250><c> done</c><00:14:05.430><c> so</c><00:14:05.640><c> small</c>

00:14:06.139 --> 00:14:06.149 align:start position:0%
twigs that have been done so small
 

00:14:06.149 --> 00:14:07.820 align:start position:0%
twigs that have been done so small
allocations<00:14:06.540><c> are</c><00:14:06.810><c> grouped</c><00:14:06.990><c> together</c><00:14:07.140><c> to</c>

00:14:07.820 --> 00:14:07.830 align:start position:0%
allocations are grouped together to
 

00:14:07.830 --> 00:14:10.130 align:start position:0%
allocations are grouped together to
reduce<00:14:08.220><c> fragmentation</c><00:14:08.490><c> we</c><00:14:09.390><c> online</c><00:14:09.899><c> large</c>

00:14:10.130 --> 00:14:10.140 align:start position:0%
reduce fragmentation we online large
 

00:14:10.140 --> 00:14:12.620 align:start position:0%
reduce fragmentation we online large
locations<00:14:10.709><c> on</c><00:14:10.830><c> pages</c><00:14:11.330><c> typically</c><00:14:12.330><c> four</c>

00:14:12.620 --> 00:14:12.630 align:start position:0%
locations on pages typically four
 

00:14:12.630 --> 00:14:15.290 align:start position:0%
locations on pages typically four
kilobytes<00:14:13.110><c> on</c><00:14:13.680><c> modern</c><00:14:14.010><c> Oasis</c><00:14:14.490><c> and</c><00:14:14.670><c> gives</c><00:14:15.209><c> you</c>

00:14:15.290 --> 00:14:15.300 align:start position:0%
kilobytes on modern Oasis and gives you
 

00:14:15.300 --> 00:14:17.930 align:start position:0%
kilobytes on modern Oasis and gives you
better<00:14:15.450><c> performance</c><00:14:16.310><c> also</c><00:14:17.310><c> final</c><00:14:17.610><c> grain</c><00:14:17.760><c> lock</c>

00:14:17.930 --> 00:14:17.940 align:start position:0%
better performance also final grain lock
 

00:14:17.940 --> 00:14:19.460 align:start position:0%
better performance also final grain lock
because<00:14:18.180><c> the</c><00:14:18.360><c> garbage</c><00:14:18.600><c> collector</c><00:14:18.990><c> has</c><00:14:19.260><c> to</c>

00:14:19.460 --> 00:14:19.470 align:start position:0%
because the garbage collector has to
 

00:14:19.470 --> 00:14:21.440 align:start position:0%
because the garbage collector has to
acquire<00:14:19.649><c> locks</c><00:14:20.070><c> because</c><00:14:20.880><c> you</c><00:14:20.970><c> know</c><00:14:21.089><c> we</c><00:14:21.330><c> have</c><00:14:21.420><c> a</c>

00:14:21.440 --> 00:14:21.450 align:start position:0%
acquire locks because you know we have a
 

00:14:21.450 --> 00:14:23.960 align:start position:0%
acquire locks because you know we have a
lot<00:14:21.660><c> of</c><00:14:21.690><c> threads</c><00:14:21.959><c> running</c><00:14:22.170><c> they</c><00:14:22.890><c> used</c><00:14:23.070><c> to</c><00:14:23.220><c> they</c>

00:14:23.960 --> 00:14:23.970 align:start position:0%
lot of threads running they used to they
 

00:14:23.970 --> 00:14:25.910 align:start position:0%
lot of threads running they used to they
used<00:14:24.000><c> to</c><00:14:24.209><c> protect</c><00:14:24.510><c> a</c><00:14:24.600><c> lot</c><00:14:24.779><c> more</c><00:14:24.959><c> code</c><00:14:25.200><c> so</c><00:14:25.770><c> now</c>

00:14:25.910 --> 00:14:25.920 align:start position:0%
used to protect a lot more code so now
 

00:14:25.920 --> 00:14:27.769 align:start position:0%
used to protect a lot more code so now
it<00:14:26.070><c> for</c><00:14:26.339><c> Tech's</c><00:14:26.490><c> less</c><00:14:26.670><c> code</c><00:14:26.880><c> inference</c><00:14:27.420><c> faster</c>

00:14:27.769 --> 00:14:27.779 align:start position:0%
it for Tech's less code inference faster
 

00:14:27.779 --> 00:14:29.780 align:start position:0%
it for Tech's less code inference faster
and<00:14:28.080><c> overall</c><00:14:28.589><c> allocations</c><00:14:29.400><c> with</c><00:14:29.610><c> ross</c>

00:14:29.780 --> 00:14:29.790 align:start position:0%
and overall allocations with ross
 

00:14:29.790 --> 00:14:31.699 align:start position:0%
and overall allocations with ross
murdock<00:14:30.000><c> are</c><00:14:30.330><c> four</c><00:14:31.020><c> to</c><00:14:31.200><c> five</c><00:14:31.410><c> times</c><00:14:31.560><c> faster</c>

00:14:31.699 --> 00:14:31.709 align:start position:0%
murdock are four to five times faster
 

00:14:31.709 --> 00:14:34.010 align:start position:0%
murdock are four to five times faster
than<00:14:32.610><c> they</c><00:14:32.820><c> were</c><00:14:32.880><c> with</c><00:14:33.150><c> double</c><00:14:33.450><c> again</c><00:14:33.750><c> this</c><00:14:33.870><c> is</c>

00:14:34.010 --> 00:14:34.020 align:start position:0%
than they were with double again this is
 

00:14:34.020 --> 00:14:36.079 align:start position:0%
than they were with double again this is
just<00:14:34.260><c> about</c><00:14:34.529><c> the</c><00:14:34.770><c> act</c><00:14:35.100><c> of</c><00:14:35.459><c> allocating</c><00:14:36.000><c> the</c>

00:14:36.079 --> 00:14:36.089 align:start position:0%
just about the act of allocating the
 

00:14:36.089 --> 00:14:37.610 align:start position:0%
just about the act of allocating the
memory<00:14:36.420><c> there's</c><00:14:36.660><c> nothing</c><00:14:36.930><c> to</c><00:14:37.050><c> do</c><00:14:37.170><c> with</c><00:14:37.440><c> your</c>

00:14:37.610 --> 00:14:37.620 align:start position:0%
memory there's nothing to do with your
 

00:14:37.620 --> 00:14:38.990 align:start position:0%
memory there's nothing to do with your
code<00:14:37.800><c> you</c><00:14:38.160><c> could</c><00:14:38.370><c> do</c><00:14:38.430><c> something</c><00:14:38.670><c> really</c>

00:14:38.990 --> 00:14:39.000 align:start position:0%
code you could do something really
 

00:14:39.000 --> 00:14:40.910 align:start position:0%
code you could do something really
really<00:14:39.690><c> really</c><00:14:39.870><c> expensive</c><00:14:40.110><c> in</c><00:14:40.470><c> your</c><00:14:40.589><c> in</c><00:14:40.860><c> your</c>

00:14:40.910 --> 00:14:40.920 align:start position:0%
really really expensive in your in your
 

00:14:40.920 --> 00:14:42.500 align:start position:0%
really really expensive in your in your
constructor<00:14:41.490><c> and</c><00:14:41.730><c> we</c><00:14:41.940><c> would</c><00:14:42.060><c> not</c><00:14:42.150><c> be</c><00:14:42.209><c> five</c>

00:14:42.500 --> 00:14:42.510 align:start position:0%
constructor and we would not be five
 

00:14:42.510 --> 00:14:46.220 align:start position:0%
constructor and we would not be five
times<00:14:42.630><c> faster</c><00:14:43.020><c> than</c><00:14:43.140><c> phthalic</c><00:14:44.839><c> all</c><00:14:45.839><c> right</c><00:14:45.930><c> so</c>

00:14:46.220 --> 00:14:46.230 align:start position:0%
times faster than phthalic all right so
 

00:14:46.230 --> 00:14:47.720 align:start position:0%
times faster than phthalic all right so
let's<00:14:46.440><c> take</c><00:14:46.589><c> a</c><00:14:46.620><c> look</c><00:14:46.770><c> at</c><00:14:46.890><c> how</c><00:14:47.010><c> allocations</c>

00:14:47.720 --> 00:14:47.730 align:start position:0%
let's take a look at how allocations
 

00:14:47.730 --> 00:14:50.329 align:start position:0%
let's take a look at how allocations
work<00:14:47.910><c> on</c><00:14:48.089><c> art</c><00:14:48.300><c> in</c><00:14:48.480><c> this</c><00:14:48.660><c> new</c><00:14:48.839><c> system</c><00:14:49.110><c> so</c><00:14:49.800><c> oh</c>

00:14:50.329 --> 00:14:50.339 align:start position:0%
work on art in this new system so oh
 

00:14:50.339 --> 00:14:53.120 align:start position:0%
work on art in this new system so oh
sorry<00:14:51.270><c> the</c><00:14:51.450><c> the</c><00:14:51.690><c> other</c><00:14:51.900><c> very</c><00:14:52.410><c> very</c><00:14:52.650><c> important</c>

00:14:53.120 --> 00:14:53.130 align:start position:0%
sorry the the other very very important
 

00:14:53.130 --> 00:14:54.710 align:start position:0%
sorry the the other very very important
thing<00:14:53.250><c> with</c><00:14:53.370><c> art</c><00:14:53.580><c> was</c><00:14:53.820><c> the</c><00:14:54.029><c> ability</c><00:14:54.240><c> to</c><00:14:54.570><c> deal</c>

00:14:54.710 --> 00:14:54.720 align:start position:0%
thing with art was the ability to deal
 

00:14:54.720 --> 00:14:56.300 align:start position:0%
thing with art was the ability to deal
with<00:14:54.870><c> large</c><00:14:55.140><c> objects</c><00:14:55.620><c> in</c><00:14:55.709><c> a</c><00:14:55.770><c> much</c><00:14:55.920><c> better</c><00:14:56.070><c> way</c>

00:14:56.300 --> 00:14:56.310 align:start position:0%
with large objects in a much better way
 

00:14:56.310 --> 00:14:59.150 align:start position:0%
with large objects in a much better way
so<00:14:56.520><c> you've</c><00:14:57.180><c> got</c><00:14:57.360><c> this</c><00:14:57.510><c> normal</c><00:14:58.350><c> sized</c><00:14:58.589><c> objects</c>

00:14:59.150 --> 00:14:59.160 align:start position:0%
so you've got this normal sized objects
 

00:14:59.160 --> 00:15:00.440 align:start position:0%
so you've got this normal sized objects
it's<00:14:59.279><c> going</c><00:14:59.459><c> to</c><00:14:59.520><c> find</c><00:14:59.700><c> a</c><00:14:59.790><c> space</c><00:14:59.970><c> for</c><00:15:00.000><c> it</c><00:15:00.240><c> and</c>

00:15:00.440 --> 00:15:00.450 align:start position:0%
it's going to find a space for it and
 

00:15:00.450 --> 00:15:03.710 align:start position:0%
it's going to find a space for it and
the<00:15:00.510><c> heap</c><00:15:00.660><c> over</c><00:15:00.900><c> here</c><00:15:01.200><c> and</c><00:15:02.240><c> what</c><00:15:03.240><c> happens</c><00:15:03.630><c> if</c>

00:15:03.710 --> 00:15:03.720 align:start position:0%
the heap over here and what happens if
 

00:15:03.720 --> 00:15:05.180 align:start position:0%
the heap over here and what happens if
you<00:15:03.870><c> have</c><00:15:04.020><c> this</c><00:15:04.170><c> large</c><00:15:04.380><c> open</c><00:15:04.740><c> by</c><00:15:04.890><c> a</c><00:15:04.920><c> large</c>

00:15:05.180 --> 00:15:05.190 align:start position:0%
you have this large open by a large
 

00:15:05.190 --> 00:15:08.150 align:start position:0%
you have this large open by a large
object<00:15:05.400><c> we</c><00:15:05.820><c> mean</c><00:15:06.029><c> an</c><00:15:06.240><c> array</c><00:15:06.810><c> of</c><00:15:06.839><c> primitives</c><00:15:07.500><c> or</c>

00:15:08.150 --> 00:15:08.160 align:start position:0%
object we mean an array of primitives or
 

00:15:08.160 --> 00:15:10.910 align:start position:0%
object we mean an array of primitives or
string<00:15:08.640><c> and</c><00:15:09.450><c> these</c><00:15:10.020><c> are</c><00:15:10.200><c> the</c><00:15:10.380><c> the</c><00:15:10.620><c> types</c>

00:15:10.910 --> 00:15:10.920 align:start position:0%
string and these are the the types
 

00:15:10.920 --> 00:15:12.319 align:start position:0%
string and these are the the types
chosen<00:15:11.339><c> because</c><00:15:11.459><c> we</c><00:15:11.700><c> can</c><00:15:11.820><c> guarantee</c><00:15:12.300><c> that</c>

00:15:12.319 --> 00:15:12.329 align:start position:0%
chosen because we can guarantee that
 

00:15:12.329 --> 00:15:13.699 align:start position:0%
chosen because we can guarantee that
these<00:15:12.600><c> objects</c><00:15:13.050><c> and</c><00:15:13.140><c> will</c><00:15:13.290><c> not</c><00:15:13.470><c> have</c><00:15:13.680><c> a</c>

00:15:13.699 --> 00:15:13.709 align:start position:0%
these objects and will not have a
 

00:15:13.709 --> 00:15:15.230 align:start position:0%
these objects and will not have a
reference<00:15:14.160><c> to</c><00:15:14.339><c> something</c><00:15:14.640><c> else</c><00:15:14.940><c> they</c><00:15:15.120><c> can</c>

00:15:15.230 --> 00:15:15.240 align:start position:0%
reference to something else they can
 

00:15:15.240 --> 00:15:16.730 align:start position:0%
reference to something else they can
live<00:15:15.450><c> completely</c><00:15:16.020><c> and</c><00:15:16.170><c> it's</c><00:15:16.290><c> from</c><00:15:16.440><c> the</c><00:15:16.529><c> array</c>

00:15:16.730 --> 00:15:16.740 align:start position:0%
live completely and it's from the array
 

00:15:16.740 --> 00:15:19.310 align:start position:0%
live completely and it's from the array
of<00:15:16.829><c> achlys</c><00:15:17.070><c> twelve</c><00:15:17.370><c> kilobytes</c><00:15:17.790><c> yes</c><00:15:18.120><c> and</c><00:15:18.899><c> that</c>

00:15:19.310 --> 00:15:19.320 align:start position:0%
of achlys twelve kilobytes yes and that
 

00:15:19.320 --> 00:15:20.810 align:start position:0%
of achlys twelve kilobytes yes and that
is<00:15:19.350><c> the</c><00:15:19.680><c> heuristic</c><00:15:19.890><c> for</c><00:15:20.310><c> now</c><00:15:20.459><c> that</c><00:15:20.670><c> could</c>

00:15:20.810 --> 00:15:20.820 align:start position:0%
is the heuristic for now that could
 

00:15:20.820 --> 00:15:22.160 align:start position:0%
is the heuristic for now that could
change<00:15:20.970><c> over</c><00:15:21.149><c> time</c><00:15:21.420><c> but</c><00:15:21.600><c> right</c><00:15:21.779><c> now</c><00:15:21.930><c> it's</c>

00:15:22.160 --> 00:15:22.170 align:start position:0%
change over time but right now it's
 

00:15:22.170 --> 00:15:24.590 align:start position:0%
change over time but right now it's
twelve<00:15:22.440><c> K</c><00:15:22.649><c> primitive</c><00:15:23.190><c> types</c><00:15:23.399><c> are</c><00:15:23.579><c> string</c><00:15:23.850><c> so</c>

00:15:24.590 --> 00:15:24.600 align:start position:0%
twelve K primitive types are string so
 

00:15:24.600 --> 00:15:25.970 align:start position:0%
twelve K primitive types are string so
you<00:15:24.660><c> got</c><00:15:24.870><c> this</c><00:15:24.990><c> huge</c><00:15:25.170><c> object</c><00:15:25.649><c> where</c><00:15:25.829><c> are</c><00:15:25.920><c> we</c>

00:15:25.970 --> 00:15:25.980 align:start position:0%
you got this huge object where are we
 

00:15:25.980 --> 00:15:28.220 align:start position:0%
you got this huge object where are we
going<00:15:26.160><c> to</c><00:15:26.220><c> put</c><00:15:26.370><c> it</c><00:15:26.459><c> well</c><00:15:26.640><c> in</c><00:15:26.880><c> dalvik</c><00:15:27.149><c> we</c><00:15:27.959><c> would</c>

00:15:28.220 --> 00:15:28.230 align:start position:0%
going to put it well in dalvik we would
 

00:15:28.230 --> 00:15:30.620 align:start position:0%
going to put it well in dalvik we would
put<00:15:28.529><c> it</c><00:15:28.680><c> where</c><00:15:29.220><c> exactly</c><00:15:29.610><c> right</c><00:15:30.089><c> you</c><00:15:30.360><c> can</c><00:15:30.480><c> see</c>

00:15:30.620 --> 00:15:30.630 align:start position:0%
put it where exactly right you can see
 

00:15:30.630 --> 00:15:31.910 align:start position:0%
put it where exactly right you can see
in<00:15:30.750><c> this</c><00:15:30.839><c> fragmented</c><00:15:31.170><c> heap</c><00:15:31.470><c> that</c><00:15:31.650><c> may</c><00:15:31.770><c> there</c>

00:15:31.910 --> 00:15:31.920 align:start position:0%
in this fragmented heap that may there
 

00:15:31.920 --> 00:15:34.069 align:start position:0%
in this fragmented heap that may there
may<00:15:32.070><c> not</c><00:15:32.220><c> be</c><00:15:32.310><c> space</c><00:15:32.640><c> for</c><00:15:32.880><c> it</c><00:15:33.000><c> in</c><00:15:33.120><c> art</c><00:15:33.720><c> it's</c><00:15:33.959><c> a</c>

00:15:34.069 --> 00:15:34.079 align:start position:0%
may not be space for it in art it's a
 

00:15:34.079 --> 00:15:35.540 align:start position:0%
may not be space for it in art it's a
little<00:15:34.290><c> bit</c><00:15:34.410><c> simpler</c><00:15:34.890><c> the</c>

00:15:35.540 --> 00:15:35.550 align:start position:0%
little bit simpler the
 

00:15:35.550 --> 00:15:38.000 align:start position:0%
little bit simpler the
complicated<00:15:36.060><c> mechanism</c><00:15:36.570><c> looks</c><00:15:36.750><c> like</c><00:15:36.990><c> this</c><00:15:37.230><c> we</c>

00:15:38.000 --> 00:15:38.010 align:start position:0%
complicated mechanism looks like this we
 

00:15:38.010 --> 00:15:40.370 align:start position:0%
complicated mechanism looks like this we
just<00:15:38.040><c> put</c><00:15:38.490><c> it</c><00:15:38.610><c> somewhere</c><00:15:38.760><c> we</c><00:15:39.480><c> just</c><00:15:39.690><c> Malecha</c>

00:15:40.370 --> 00:15:40.380 align:start position:0%
just put it somewhere we just Malecha
 

00:15:40.380 --> 00:15:41.960 align:start position:0%
just put it somewhere we just Malecha
space<00:15:40.589><c> for</c><00:15:40.860><c> it</c><00:15:40.980><c> and</c><00:15:41.160><c> shove</c><00:15:41.399><c> it</c><00:15:41.490><c> in</c><00:15:41.610><c> there</c><00:15:41.790><c> it's</c>

00:15:41.960 --> 00:15:41.970 align:start position:0%
space for it and shove it in there it's
 

00:15:41.970 --> 00:15:44.150 align:start position:0%
space for it and shove it in there it's
not<00:15:42.149><c> even</c><00:15:42.360><c> in</c><00:15:42.480><c> a</c><00:15:42.570><c> large</c><00:15:42.750><c> object</c><00:15:42.990><c> bucket</c><00:15:43.980><c> that</c>

00:15:44.150 --> 00:15:44.160 align:start position:0%
not even in a large object bucket that
 

00:15:44.160 --> 00:15:46.070 align:start position:0%
not even in a large object bucket that
holds<00:15:44.339><c> all</c><00:15:44.610><c> of</c><00:15:44.670><c> them</c><00:15:44.910><c> we</c><00:15:45.120><c> just</c><00:15:45.300><c> allocate</c><00:15:46.050><c> a</c>

00:15:46.070 --> 00:15:46.080 align:start position:0%
holds all of them we just allocate a
 

00:15:46.080 --> 00:15:47.900 align:start position:0%
holds all of them we just allocate a
space<00:15:46.380><c> for</c><00:15:46.589><c> it</c><00:15:46.649><c> somewhere</c><00:15:47.130><c> in</c><00:15:47.250><c> there</c><00:15:47.399><c> and</c><00:15:47.790><c> we</c>

00:15:47.900 --> 00:15:47.910 align:start position:0%
space for it somewhere in there and we
 

00:15:47.910 --> 00:15:49.340 align:start position:0%
space for it somewhere in there and we
say<00:15:48.060><c> okay</c><00:15:48.330><c> you</c><00:15:48.390><c> are</c><00:15:48.540><c> now</c><00:15:48.779><c> part</c><00:15:48.990><c> of</c><00:15:49.110><c> the</c><00:15:49.200><c> heat</c>

00:15:49.340 --> 00:15:49.350 align:start position:0%
say okay you are now part of the heat
 

00:15:49.350 --> 00:15:50.720 align:start position:0%
say okay you are now part of the heat
but<00:15:49.529><c> really</c><00:15:49.769><c> it's</c><00:15:49.890><c> just</c><00:15:50.070><c> living</c><00:15:50.250><c> on</c><00:15:50.459><c> its</c><00:15:50.610><c> own</c>

00:15:50.720 --> 00:15:50.730 align:start position:0%
but really it's just living on its own
 

00:15:50.730 --> 00:15:54.560 align:start position:0%
but really it's just living on its own
somewhere<00:15:51.060><c> very</c><00:15:51.330><c> fast</c><00:15:51.660><c> very</c><00:15:51.870><c> easy</c><00:15:53.390><c> it's</c><00:15:54.390><c> also</c>

00:15:54.560 --> 00:15:54.570 align:start position:0%
somewhere very fast very easy it's also
 

00:15:54.570 --> 00:15:56.420 align:start position:0%
somewhere very fast very easy it's also
a<00:15:54.750><c> moving</c><00:15:55.320><c> collector</c><00:15:55.800><c> so</c><00:15:55.980><c> we</c><00:15:56.070><c> can</c><00:15:56.190><c> actually</c>

00:15:56.420 --> 00:15:56.430 align:start position:0%
a moving collector so we can actually
 

00:15:56.430 --> 00:15:59.060 align:start position:0%
a moving collector so we can actually
compact<00:15:57.120><c> things</c><00:15:57.390><c> so</c><00:15:58.290><c> we</c><00:15:58.440><c> no</c><00:15:58.560><c> longer</c><00:15:58.589><c> have</c><00:15:58.980><c> the</c>

00:15:59.060 --> 00:15:59.070 align:start position:0%
compact things so we no longer have the
 

00:15:59.070 --> 00:16:02.210 align:start position:0%
compact things so we no longer have the
fragmentation<00:15:59.550><c> problem</c><00:16:00.230><c> however</c><00:16:01.230><c> it</c><00:16:01.800><c> does</c>

00:16:02.210 --> 00:16:02.220 align:start position:0%
fragmentation problem however it does
 

00:16:02.220 --> 00:16:07.610 align:start position:0%
fragmentation problem however it does
this<00:16:02.399><c> in</c><00:16:02.790><c> the</c><00:16:03.300><c> background</c><00:16:04.279><c> so</c><00:16:06.260><c> actually</c><00:16:07.260><c> it's</c>

00:16:07.610 --> 00:16:07.620 align:start position:0%
this in the background so actually it's
 

00:16:07.620 --> 00:16:08.750 align:start position:0%
this in the background so actually it's
a<00:16:07.680><c> little</c><00:16:07.769><c> more</c><00:16:08.010><c> complicated</c><00:16:08.310><c> my</c>

00:16:08.750 --> 00:16:08.760 align:start position:0%
a little more complicated my
 

00:16:08.760 --> 00:16:11.420 align:start position:0%
a little more complicated my
understanding<00:16:09.390><c> originally</c><00:16:10.110><c> was</c><00:16:10.350><c> well</c><00:16:10.920><c> if</c>

00:16:11.420 --> 00:16:11.430 align:start position:0%
understanding originally was well if
 

00:16:11.430 --> 00:16:13.280 align:start position:0%
understanding originally was well if
your<00:16:11.760><c> application</c><00:16:12.570><c> goes</c><00:16:12.839><c> into</c><00:16:13.170><c> the</c>

00:16:13.280 --> 00:16:13.290 align:start position:0%
your application goes into the
 

00:16:13.290 --> 00:16:15.410 align:start position:0%
your application goes into the
background<00:16:13.769><c> then</c><00:16:14.490><c> eventually</c><00:16:14.820><c> this</c><00:16:15.120><c> very</c>

00:16:15.410 --> 00:16:15.420 align:start position:0%
background then eventually this very
 

00:16:15.420 --> 00:16:17.120 align:start position:0%
background then eventually this very
expensive<00:16:15.720><c> operation</c><00:16:16.410><c> it</c><00:16:16.529><c> could</c><00:16:16.620><c> take</c><00:16:16.800><c> up</c><00:16:16.980><c> to</c>

00:16:17.120 --> 00:16:17.130 align:start position:0%
expensive operation it could take up to
 

00:16:17.130 --> 00:16:19.220 align:start position:0%
expensive operation it could take up to
100<00:16:17.490><c> milliseconds</c><00:16:18.060><c> may</c><00:16:18.510><c> run</c><00:16:18.779><c> that's</c><00:16:18.959><c> going</c><00:16:19.170><c> to</c>

00:16:19.220 --> 00:16:19.230 align:start position:0%
100 milliseconds may run that's going to
 

00:16:19.230 --> 00:16:20.870 align:start position:0%
100 milliseconds may run that's going to
compact<00:16:19.560><c> the</c><00:16:19.680><c> heap</c><00:16:19.829><c> obviously</c><00:16:20.490><c> we</c><00:16:20.610><c> don't</c><00:16:20.730><c> want</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
compact the heap obviously we don't want
 

00:16:20.880 --> 00:16:22.130 align:start position:0%
compact the heap obviously we don't want
to<00:16:21.120><c> run</c><00:16:21.240><c> that</c><00:16:21.360><c> in</c><00:16:21.420><c> the</c><00:16:21.600><c> foreground</c><00:16:21.930><c> because</c>

00:16:22.130 --> 00:16:22.140 align:start position:0%
to run that in the foreground because
 

00:16:22.140 --> 00:16:23.630 align:start position:0%
to run that in the foreground because
we're<00:16:22.380><c> gonna</c><00:16:22.500><c> Jack</c><00:16:22.829><c> your</c><00:16:23.010><c> app</c><00:16:23.160><c> all</c><00:16:23.339><c> over</c><00:16:23.550><c> the</c>

00:16:23.630 --> 00:16:23.640 align:start position:0%
we're gonna Jack your app all over the
 

00:16:23.640 --> 00:16:25.250 align:start position:0%
we're gonna Jack your app all over the
place<00:16:23.790><c> we're</c><00:16:23.970><c> gonna</c><00:16:24.060><c> wait</c><00:16:24.329><c> till</c><00:16:24.870><c> it's</c><00:16:25.019><c> sitting</c>

00:16:25.250 --> 00:16:25.260 align:start position:0%
place we're gonna wait till it's sitting
 

00:16:25.260 --> 00:16:26.840 align:start position:0%
place we're gonna wait till it's sitting
there<00:16:25.290><c> in</c><00:16:25.529><c> the</c><00:16:25.589><c> background</c><00:16:25.740><c> user</c><00:16:26.279><c> is</c><00:16:26.519><c> doing</c>

00:16:26.840 --> 00:16:26.850 align:start position:0%
there in the background user is doing
 

00:16:26.850 --> 00:16:27.889 align:start position:0%
there in the background user is doing
something<00:16:27.180><c> else</c><00:16:27.300><c> they're</c><00:16:27.510><c> not</c><00:16:27.570><c> paying</c>

00:16:27.889 --> 00:16:27.899 align:start position:0%
something else they're not paying
 

00:16:27.899 --> 00:16:29.840 align:start position:0%
something else they're not paying
attention<00:16:28.350><c> so</c><00:16:28.380><c> you're</c><00:16:28.740><c> we're</c><00:16:29.310><c> compacting</c><00:16:29.820><c> the</c>

00:16:29.840 --> 00:16:29.850 align:start position:0%
attention so you're we're compacting the
 

00:16:29.850 --> 00:16:31.370 align:start position:0%
attention so you're we're compacting the
heap<00:16:30.029><c> for</c><00:16:30.209><c> you</c><00:16:30.329><c> that's</c><00:16:30.540><c> awesome</c><00:16:30.779><c> so</c><00:16:31.170><c> I</c><00:16:31.200><c> said</c>

00:16:31.370 --> 00:16:31.380 align:start position:0%
heap for you that's awesome so I said
 

00:16:31.380 --> 00:16:32.870 align:start position:0%
heap for you that's awesome so I said
okay<00:16:31.589><c> well</c><00:16:31.740><c> I'm</c><00:16:31.829><c> gonna</c><00:16:31.920><c> demonstrate</c><00:16:32.190><c> this</c><00:16:32.640><c> and</c>

00:16:32.870 --> 00:16:32.880 align:start position:0%
okay well I'm gonna demonstrate this and
 

00:16:32.880 --> 00:16:36.290 align:start position:0%
okay well I'm gonna demonstrate this and
show<00:16:33.329><c> that</c><00:16:33.480><c> same</c><00:16:33.839><c> defragmentation</c><00:16:34.800><c> a</c><00:16:35.579><c> crash</c>

00:16:36.290 --> 00:16:36.300 align:start position:0%
show that same defragmentation a crash
 

00:16:36.300 --> 00:16:38.150 align:start position:0%
show that same defragmentation a crash
error<00:16:36.690><c> that</c><00:16:37.019><c> we</c><00:16:37.079><c> saw</c><00:16:37.230><c> earlier</c><00:16:37.649><c> I'm</c><00:16:37.829><c> gonna</c><00:16:38.010><c> show</c>

00:16:38.150 --> 00:16:38.160 align:start position:0%
error that we saw earlier I'm gonna show
 

00:16:38.160 --> 00:16:41.120 align:start position:0%
error that we saw earlier I'm gonna show
how<00:16:38.339><c> it</c><00:16:38.459><c> crashes</c><00:16:38.910><c> on</c><00:16:39.029><c> on</c><00:16:39.300><c> KitKat</c><00:16:40.020><c> using</c><00:16:40.770><c> dalvik</c>

00:16:41.120 --> 00:16:41.130 align:start position:0%
how it crashes on on KitKat using dalvik
 

00:16:41.130 --> 00:16:43.190 align:start position:0%
how it crashes on on KitKat using dalvik
and<00:16:41.310><c> it</c><00:16:41.610><c> will</c><00:16:41.880><c> also</c><00:16:42.120><c> crash</c><00:16:42.570><c> and</c><00:16:42.839><c> all</c><00:16:42.990><c> of</c><00:16:43.140><c> the</c>

00:16:43.190 --> 00:16:43.200 align:start position:0%
and it will also crash and all of the
 

00:16:43.200 --> 00:16:44.960 align:start position:0%
and it will also crash and all of the
releases<00:16:43.529><c> until</c><00:16:44.190><c> we're</c><00:16:44.339><c> able</c><00:16:44.490><c> to</c><00:16:44.670><c> do</c><00:16:44.820><c> it</c><00:16:44.910><c> in</c>

00:16:44.960 --> 00:16:44.970 align:start position:0%
releases until we're able to do it in
 

00:16:44.970 --> 00:16:46.400 align:start position:0%
releases until we're able to do it in
the<00:16:45.029><c> foreground</c><00:16:45.329><c> on</c><00:16:45.600><c> the</c><00:16:45.660><c> later</c><00:16:45.839><c> release</c><00:16:46.200><c> and</c>

00:16:46.400 --> 00:16:46.410 align:start position:0%
the foreground on the later release and
 

00:16:46.410 --> 00:16:49.460 align:start position:0%
the foreground on the later release and
oh<00:16:46.760><c> and</c><00:16:47.760><c> this</c><00:16:48.300><c> will</c><00:16:48.450><c> be</c><00:16:48.570><c> a</c><00:16:48.600><c> cool</c><00:16:48.839><c> demo</c><00:16:49.050><c> and</c><00:16:49.320><c> then</c>

00:16:49.460 --> 00:16:49.470 align:start position:0%
oh and this will be a cool demo and then
 

00:16:49.470 --> 00:16:52.130 align:start position:0%
oh and this will be a cool demo and then
I<00:16:49.500><c> ran</c><00:16:49.740><c> it</c><00:16:49.860><c> on</c><00:16:49.980><c> L</c><00:16:50.220><c> and</c><00:16:50.490><c> it</c><00:16:50.970><c> didn't</c><00:16:51.240><c> crash</c><00:16:51.510><c> and</c>

00:16:52.130 --> 00:16:52.140 align:start position:0%
I ran it on L and it didn't crash and
 

00:16:52.140 --> 00:16:54.650 align:start position:0%
I ran it on L and it didn't crash and
the<00:16:52.709><c> thing</c><00:16:52.890><c> is</c><00:16:53.100><c> yes</c><00:16:53.670><c> it</c><00:16:53.820><c> will</c><00:16:53.910><c> defragment</c><00:16:54.540><c> in</c>

00:16:54.650 --> 00:16:54.660 align:start position:0%
the thing is yes it will defragment in
 

00:16:54.660 --> 00:16:56.660 align:start position:0%
the thing is yes it will defragment in
the<00:16:54.779><c> backgrounds</c><00:16:55.350><c> but</c><00:16:55.770><c> it</c><00:16:55.890><c> will</c><00:16:55.980><c> also</c><00:16:56.220><c> do</c><00:16:56.520><c> it</c>

00:16:56.660 --> 00:16:56.670 align:start position:0%
the backgrounds but it will also do it
 

00:16:56.670 --> 00:16:58.760 align:start position:0%
the backgrounds but it will also do it
in<00:16:56.760><c> the</c><00:16:56.850><c> foreground</c><00:16:57.180><c> if</c><00:16:57.480><c> it</c><00:16:57.870><c> has</c><00:16:58.200><c> to</c><00:16:58.410><c> which</c><00:16:58.649><c> is</c>

00:16:58.760 --> 00:16:58.770 align:start position:0%
in the foreground if it has to which is
 

00:16:58.770 --> 00:17:00.530 align:start position:0%
in the foreground if it has to which is
really<00:16:58.800><c> what</c><00:16:59.190><c> you</c><00:16:59.310><c> want</c><00:16:59.550><c> so</c><00:17:00.089><c> if</c><00:17:00.209><c> you</c><00:17:00.240><c> actually</c>

00:17:00.530 --> 00:17:00.540 align:start position:0%
really what you want so if you actually
 

00:17:00.540 --> 00:17:03.380 align:start position:0%
really what you want so if you actually
need<00:17:01.020><c> that</c><00:17:01.230><c> memory</c><00:17:01.440><c> now</c><00:17:02.029><c> wouldn't</c><00:17:03.029><c> it</c><00:17:03.149><c> be</c><00:17:03.209><c> nice</c>

00:17:03.380 --> 00:17:03.390 align:start position:0%
need that memory now wouldn't it be nice
 

00:17:03.390 --> 00:17:05.030 align:start position:0%
need that memory now wouldn't it be nice
if<00:17:03.420><c> you</c><00:17:03.630><c> didn't</c><00:17:03.899><c> crash</c><00:17:04.140><c> that's</c><00:17:04.589><c> a</c><00:17:04.650><c> clean</c><00:17:04.890><c> the</c>

00:17:05.030 --> 00:17:05.040 align:start position:0%
if you didn't crash that's a clean the
 

00:17:05.040 --> 00:17:06.710 align:start position:0%
if you didn't crash that's a clean the
compaction<00:17:05.400><c> is</c><00:17:05.640><c> almost</c><00:17:05.850><c> a</c><00:17:06.030><c> replacement</c><00:17:06.390><c> for</c>

00:17:06.710 --> 00:17:06.720 align:start position:0%
compaction is almost a replacement for
 

00:17:06.720 --> 00:17:09.679 align:start position:0%
compaction is almost a replacement for
the<00:17:06.839><c> GC</c><00:17:07.169><c> for</c><00:17:07.350><c> our</c><00:17:07.439><c> look</c><00:17:07.650><c> yeah</c><00:17:07.949><c> from</c><00:17:08.100><c> before</c><00:17:08.689><c> so</c>

00:17:09.679 --> 00:17:09.689 align:start position:0%
the GC for our look yeah from before so
 

00:17:09.689 --> 00:17:11.900 align:start position:0%
the GC for our look yeah from before so
now<00:17:10.020><c> it</c><00:17:10.559><c> basically</c><00:17:10.980><c> takes</c><00:17:11.309><c> everything</c><00:17:11.699><c> it</c>

00:17:11.900 --> 00:17:11.910 align:start position:0%
now it basically takes everything it
 

00:17:11.910 --> 00:17:13.460 align:start position:0%
now it basically takes everything it
says<00:17:12.089><c> well</c><00:17:12.240><c> you</c><00:17:12.480><c> need</c><00:17:12.660><c> space</c><00:17:12.900><c> for</c><00:17:12.929><c> this</c><00:17:13.230><c> really</c>

00:17:13.460 --> 00:17:13.470 align:start position:0%
says well you need space for this really
 

00:17:13.470 --> 00:17:15.169 align:start position:0%
says well you need space for this really
large<00:17:13.709><c> objects</c><00:17:14.130><c> we're</c><00:17:14.640><c> gonna</c><00:17:14.790><c> go</c><00:17:14.970><c> ahead</c><00:17:15.059><c> and</c>

00:17:15.169 --> 00:17:15.179 align:start position:0%
large objects we're gonna go ahead and
 

00:17:15.179 --> 00:17:18.140 align:start position:0%
large objects we're gonna go ahead and
compact<00:17:15.660><c> things</c><00:17:15.900><c> and</c><00:17:16.520><c> then</c><00:17:17.520><c> put</c><00:17:17.550><c> it</c><00:17:17.880><c> where</c><00:17:18.000><c> we</c>

00:17:18.140 --> 00:17:18.150 align:start position:0%
compact things and then put it where we
 

00:17:18.150 --> 00:17:21.650 align:start position:0%
compact things and then put it where we
need<00:17:18.179><c> to</c><00:17:18.419><c> so</c><00:17:18.990><c> on</c><00:17:19.319><c> L</c><00:17:19.770><c> and</c><00:17:20.130><c> above</c><00:17:20.790><c> we</c><00:17:21.360><c> run</c><00:17:21.569><c> the</c>

00:17:21.650 --> 00:17:21.660 align:start position:0%
need to so on L and above we run the
 

00:17:21.660 --> 00:17:23.510 align:start position:0%
need to so on L and above we run the
same<00:17:21.870><c> fragmentation</c><00:17:22.800><c> demo</c><00:17:23.040><c> that</c><00:17:23.250><c> we</c><00:17:23.370><c> saw</c>

00:17:23.510 --> 00:17:23.520 align:start position:0%
same fragmentation demo that we saw
 

00:17:23.520 --> 00:17:25.990 align:start position:0%
same fragmentation demo that we saw
before<00:17:23.730><c> we</c><00:17:24.360><c> go</c><00:17:24.480><c> ahead</c><00:17:24.600><c> and</c><00:17:24.689><c> Alec</c><00:17:25.169><c> up</c><00:17:25.319><c> to</c><00:17:25.470><c> the</c>

00:17:25.990 --> 00:17:26.000 align:start position:0%
before we go ahead and Alec up to the
 

00:17:26.000 --> 00:17:28.549 align:start position:0%
before we go ahead and Alec up to the
maximum<00:17:27.000><c> heap</c><00:17:27.329><c> size</c><00:17:27.569><c> it</c><00:17:27.959><c> says</c><00:17:28.140><c> yep</c><00:17:28.350><c> you've</c>

00:17:28.549 --> 00:17:28.559 align:start position:0%
maximum heap size it says yep you've
 

00:17:28.559 --> 00:17:30.799 align:start position:0%
maximum heap size it says yep you've
only<00:17:28.710><c> got</c><00:17:28.890><c> about</c><00:17:29.010><c> one</c><00:17:29.309><c> Meg</c><00:17:29.520><c> free</c><00:17:29.820><c> and</c><00:17:30.090><c> we</c><00:17:30.690><c> go</c>

00:17:30.799 --> 00:17:30.809 align:start position:0%
only got about one Meg free and we go
 

00:17:30.809 --> 00:17:32.480 align:start position:0%
only got about one Meg free and we go
ahead<00:17:30.900><c> and</c><00:17:31.140><c> free</c><00:17:31.350><c> every</c><00:17:31.710><c> other</c><00:17:31.860><c> Meg</c><00:17:32.130><c> know</c>

00:17:32.480 --> 00:17:32.490 align:start position:0%
ahead and free every other Meg know
 

00:17:32.490 --> 00:17:34.310 align:start position:0%
ahead and free every other Meg know
about<00:17:32.669><c> those</c><00:17:32.820><c> references</c><00:17:33.419><c> and</c><00:17:33.660><c> then</c><00:17:34.080><c> we</c><00:17:34.140><c> try</c>

00:17:34.310 --> 00:17:34.320 align:start position:0%
about those references and then we try
 

00:17:34.320 --> 00:17:36.020 align:start position:0%
about those references and then we try
to<00:17:34.350><c> find</c><00:17:34.590><c> space</c><00:17:34.919><c> for</c><00:17:34.950><c> this</c><00:17:35.309><c> to</c><00:17:35.490><c> may</c><00:17:35.669><c> block</c>

00:17:36.020 --> 00:17:36.030 align:start position:0%
to find space for this to may block
 

00:17:36.030 --> 00:17:38.930 align:start position:0%
to find space for this to may block
compacts<00:17:37.020><c> the</c><00:17:37.140><c> heap</c><00:17:37.440><c> and</c><00:17:37.650><c> puts</c><00:17:37.860><c> it</c><00:17:37.980><c> in</c><00:17:38.100><c> very</c>

00:17:38.930 --> 00:17:38.940 align:start position:0%
compacts the heap and puts it in very
 

00:17:38.940 --> 00:17:42.230 align:start position:0%
compacts the heap and puts it in very
simple<00:17:40.280><c> so</c><00:17:41.280><c> another</c><00:17:41.550><c> improvement</c><00:17:41.880><c> so</c>

00:17:42.230 --> 00:17:42.240 align:start position:0%
simple so another improvement so
 

00:17:42.240 --> 00:17:44.150 align:start position:0%
simple so another improvement so
remember<00:17:42.630><c> with</c><00:17:42.870><c> the</c><00:17:42.990><c> dalvik</c><00:17:43.169><c> GC</c><00:17:43.620><c> we</c><00:17:43.770><c> had</c><00:17:43.890><c> those</c>

00:17:44.150 --> 00:17:44.160 align:start position:0%
remember with the dalvik GC we had those
 

00:17:44.160 --> 00:17:45.919 align:start position:0%
remember with the dalvik GC we had those
four<00:17:44.370><c> phases</c><00:17:44.610><c> including</c><00:17:45.210><c> two</c><00:17:45.510><c> pauses</c><00:17:45.900><c> for</c>

00:17:45.919 --> 00:17:45.929 align:start position:0%
four phases including two pauses for
 

00:17:45.929 --> 00:17:47.480 align:start position:0%
four phases including two pauses for
your<00:17:46.200><c> application</c>

00:17:47.480 --> 00:17:47.490 align:start position:0%
your application
 

00:17:47.490 --> 00:17:49.220 align:start position:0%
your application
so<00:17:48.000><c> the</c><00:17:48.179><c> puzzles</c><00:17:48.540><c> were</c><00:17:48.660><c> bad</c><00:17:48.840><c> because</c>

00:17:49.220 --> 00:17:49.230 align:start position:0%
so the puzzles were bad because
 

00:17:49.230 --> 00:17:50.870 align:start position:0%
so the puzzles were bad because
your<00:17:49.530><c> evolution</c><00:17:50.010><c> was</c><00:17:50.160><c> not</c><00:17:50.309><c> doing</c><00:17:50.460><c> anything</c>

00:17:50.870 --> 00:17:50.880 align:start position:0%
your evolution was not doing anything
 

00:17:50.880 --> 00:17:53.000 align:start position:0%
your evolution was not doing anything
during<00:17:51.210><c> that</c><00:17:51.299><c> time</c><00:17:51.630><c> but</c><00:17:51.990><c> what</c><00:17:52.169><c> was</c><00:17:52.350><c> even</c><00:17:52.590><c> worse</c>

00:17:53.000 --> 00:17:53.010 align:start position:0%
during that time but what was even worse
 

00:17:53.010 --> 00:17:54.980 align:start position:0%
during that time but what was even worse
was<00:17:53.309><c> that</c><00:17:53.340><c> those</c><00:17:53.910><c> pauses</c><00:17:54.179><c> could</c><00:17:54.480><c> be</c><00:17:54.570><c> pretty</c>

00:17:54.980 --> 00:17:54.990 align:start position:0%
was that those pauses could be pretty
 

00:17:54.990 --> 00:17:57.799 align:start position:0%
was that those pauses could be pretty
expensive<00:17:55.320><c> so</c><00:17:55.770><c> on</c><00:17:56.220><c> average</c><00:17:56.580><c> the</c><00:17:56.970><c> sum</c><00:17:57.600><c> of</c><00:17:57.690><c> those</c>

00:17:57.799 --> 00:17:57.809 align:start position:0%
expensive so on average the sum of those
 

00:17:57.809 --> 00:18:00.110 align:start position:0%
expensive so on average the sum of those
two<00:17:57.870><c> places</c><00:17:58.110><c> was</c><00:17:58.440><c> about</c><00:17:58.710><c> 10</c><00:17:58.919><c> milliseconds</c><00:17:59.520><c> but</c>

00:18:00.110 --> 00:18:00.120 align:start position:0%
two places was about 10 milliseconds but
 

00:18:00.120 --> 00:18:01.640 align:start position:0%
two places was about 10 milliseconds but
even<00:18:00.330><c> when</c><00:18:00.510><c> it</c><00:18:00.540><c> was</c><00:18:00.720><c> only</c><00:18:00.929><c> 10</c><00:18:01.080><c> milliseconds</c>

00:18:01.640 --> 00:18:01.650 align:start position:0%
even when it was only 10 milliseconds
 

00:18:01.650 --> 00:18:03.230 align:start position:0%
even when it was only 10 milliseconds
that<00:18:01.679><c> was</c><00:18:01.830><c> actually</c><00:18:02.160><c> pretty</c><00:18:02.370><c> good</c><00:18:02.460><c> I</c><00:18:02.880><c> mean</c>

00:18:03.230 --> 00:18:03.240 align:start position:0%
that was actually pretty good I mean
 

00:18:03.240 --> 00:18:05.090 align:start position:0%
that was actually pretty good I mean
we've<00:18:03.600><c> done</c><00:18:03.630><c> a</c><00:18:03.809><c> lot</c><00:18:04.049><c> of</c><00:18:04.080><c> performance</c><00:18:04.919><c> work</c>

00:18:05.090 --> 00:18:05.100 align:start position:0%
we've done a lot of performance work
 

00:18:05.100 --> 00:18:07.010 align:start position:0%
we've done a lot of performance work
over<00:18:05.280><c> the</c><00:18:05.370><c> years</c><00:18:05.580><c> and</c><00:18:05.850><c> I've</c><00:18:06.000><c> seen</c><00:18:06.030><c> this</c><00:18:06.720><c> kind</c>

00:18:07.010 --> 00:18:07.020 align:start position:0%
over the years and I've seen this kind
 

00:18:07.020 --> 00:18:09.560 align:start position:0%
over the years and I've seen this kind
of<00:18:07.049><c> passes</c><00:18:07.440><c> last</c><00:18:07.620><c> for</c><00:18:07.919><c> 100</c><00:18:08.220><c> 200</c><00:18:08.970><c> milliseconds</c>

00:18:09.560 --> 00:18:09.570 align:start position:0%
of passes last for 100 200 milliseconds
 

00:18:09.570 --> 00:18:11.030 align:start position:0%
of passes last for 100 200 milliseconds
in<00:18:09.630><c> some</c><00:18:09.840><c> applications</c><00:18:10.380><c> and</c><00:18:10.530><c> during</c><00:18:11.010><c> that</c>

00:18:11.030 --> 00:18:11.040 align:start position:0%
in some applications and during that
 

00:18:11.040 --> 00:18:13.220 align:start position:0%
in some applications and during that
time<00:18:11.160><c> nothing</c><00:18:11.700><c> happens</c><00:18:12.299><c> which</c><00:18:12.809><c> means</c><00:18:13.080><c> no</c>

00:18:13.220 --> 00:18:13.230 align:start position:0%
time nothing happens which means no
 

00:18:13.230 --> 00:18:15.140 align:start position:0%
time nothing happens which means no
matter<00:18:13.410><c> how</c><00:18:13.740><c> good</c><00:18:13.980><c> your</c><00:18:14.160><c> UI</c><00:18:14.370><c> is</c><00:18:14.520><c> it</c><00:18:14.910><c> will</c>

00:18:15.140 --> 00:18:15.150 align:start position:0%
matter how good your UI is it will
 

00:18:15.150 --> 00:18:16.610 align:start position:0%
matter how good your UI is it will
janked<00:18:15.510><c> like</c><00:18:15.690><c> if</c><00:18:15.840><c> the</c><00:18:15.960><c> user</c><00:18:16.140><c> is</c><00:18:16.320><c> trying</c><00:18:16.500><c> to</c>

00:18:16.610 --> 00:18:16.620 align:start position:0%
janked like if the user is trying to
 

00:18:16.620 --> 00:18:19.220 align:start position:0%
janked like if the user is trying to
scroll<00:18:17.010><c> it's</c><00:18:17.490><c> not</c><00:18:17.669><c> going</c><00:18:17.820><c> to</c><00:18:17.910><c> work</c><00:18:18.030><c> well</c><00:18:18.230><c> so</c>

00:18:19.220 --> 00:18:19.230 align:start position:0%
scroll it's not going to work well so
 

00:18:19.230 --> 00:18:22.640 align:start position:0%
scroll it's not going to work well so
one<00:18:19.350><c> of</c><00:18:19.440><c> the</c><00:18:19.500><c> thing</c><00:18:19.679><c> that</c><00:18:19.850><c> art</c><00:18:20.850><c> does</c><00:18:21.240><c> is</c><00:18:21.809><c> it</c>

00:18:22.640 --> 00:18:22.650 align:start position:0%
one of the thing that art does is it
 

00:18:22.650 --> 00:18:24.470 align:start position:0%
one of the thing that art does is it
removes<00:18:23.190><c> one</c><00:18:23.580><c> of</c><00:18:23.669><c> the</c><00:18:23.760><c> pauses</c><00:18:24.120><c> so</c><00:18:24.299><c> now</c><00:18:24.419><c> the</c>

00:18:24.470 --> 00:18:24.480 align:start position:0%
removes one of the pauses so now the
 

00:18:24.480 --> 00:18:26.900 align:start position:0%
removes one of the pauses so now the
first<00:18:24.809><c> the</c><00:18:25.380><c> first</c><00:18:25.830><c> step</c><00:18:26.160><c> the</c><00:18:26.370><c> marking</c><00:18:26.820><c> the</c>

00:18:26.900 --> 00:18:26.910 align:start position:0%
first the first step the marking the
 

00:18:26.910 --> 00:18:28.490 align:start position:0%
first the first step the marking the
route<00:18:27.059><c> set</c><00:18:27.330><c> finding</c><00:18:27.630><c> the</c><00:18:27.720><c> roots</c><00:18:27.960><c> of</c><00:18:28.200><c> all</c><00:18:28.380><c> the</c>

00:18:28.490 --> 00:18:28.500 align:start position:0%
route set finding the roots of all the
 

00:18:28.500 --> 00:18:29.960 align:start position:0%
route set finding the roots of all the
allocations<00:18:28.830><c> that</c><00:18:29.070><c> are</c><00:18:29.280><c> reachable</c><00:18:29.580><c> in</c><00:18:29.820><c> your</c>

00:18:29.960 --> 00:18:29.970 align:start position:0%
allocations that are reachable in your
 

00:18:29.970 --> 00:18:31.909 align:start position:0%
allocations that are reachable in your
heap<00:18:30.179><c> is</c><00:18:30.600><c> now</c><00:18:30.809><c> a</c><00:18:30.840><c> concurrent</c><00:18:31.380><c> phase</c><00:18:31.590><c> it</c>

00:18:31.909 --> 00:18:31.919 align:start position:0%
heap is now a concurrent phase it
 

00:18:31.919 --> 00:18:33.289 align:start position:0%
heap is now a concurrent phase it
doesn't<00:18:32.250><c> pass</c><00:18:32.400><c> the</c><00:18:32.520><c> application</c><00:18:32.640><c> any</c><00:18:33.120><c> more</c>

00:18:33.289 --> 00:18:33.299 align:start position:0%
doesn't pass the application any more
 

00:18:33.299 --> 00:18:36.470 align:start position:0%
doesn't pass the application any more
now<00:18:33.780><c> on</c><00:18:33.840><c> top</c><00:18:33.990><c> of</c><00:18:34.049><c> that</c><00:18:34.169><c> the</c><00:18:34.440><c> second</c><00:18:34.860><c> one</c><00:18:35.480><c> well</c>

00:18:36.470 --> 00:18:36.480 align:start position:0%
now on top of that the second one well
 

00:18:36.480 --> 00:18:37.970 align:start position:0%
now on top of that the second one well
the<00:18:36.630><c> only</c><00:18:36.750><c> part</c><00:18:37.020><c> that</c><00:18:37.080><c> we</c><00:18:37.230><c> still</c><00:18:37.440><c> have</c><00:18:37.559><c> left</c><00:18:37.710><c> is</c>

00:18:37.970 --> 00:18:37.980 align:start position:0%
the only part that we still have left is
 

00:18:37.980 --> 00:18:40.010 align:start position:0%
the only part that we still have left is
also<00:18:38.250><c> a</c><00:18:38.280><c> lot</c><00:18:38.490><c> faster</c><00:18:38.940><c> so</c><00:18:39.419><c> instead</c><00:18:39.660><c> of</c><00:18:39.720><c> spending</c>

00:18:40.010 --> 00:18:40.020 align:start position:0%
also a lot faster so instead of spending
 

00:18:40.020 --> 00:18:41.510 align:start position:0%
also a lot faster so instead of spending
10<00:18:40.200><c> milliseconds</c><00:18:40.770><c> in</c><00:18:40.860><c> there</c><00:18:40.980><c> we</c><00:18:41.100><c> only</c><00:18:41.220><c> spend</c>

00:18:41.510 --> 00:18:41.520 align:start position:0%
10 milliseconds in there we only spend
 

00:18:41.520 --> 00:18:43.940 align:start position:0%
10 milliseconds in there we only spend
about<00:18:41.669><c> 3</c><00:18:41.970><c> milliseconds</c><00:18:42.570><c> now</c><00:18:42.720><c> so</c><00:18:43.470><c> at</c><00:18:43.559><c> most</c><00:18:43.710><c> your</c>

00:18:43.940 --> 00:18:43.950 align:start position:0%
about 3 milliseconds now so at most your
 

00:18:43.950 --> 00:18:45.350 align:start position:0%
about 3 milliseconds now so at most your
application<00:18:44.370><c> will</c><00:18:44.520><c> probably</c><00:18:44.850><c> pass</c><00:18:44.970><c> for</c><00:18:45.210><c> 3</c>

00:18:45.350 --> 00:18:45.360 align:start position:0%
application will probably pass for 3
 

00:18:45.360 --> 00:18:47.180 align:start position:0%
application will probably pass for 3
milliseconds<00:18:45.960><c> which</c><00:18:46.169><c> worked</c><00:18:46.380><c> application</c><00:18:47.100><c> is</c>

00:18:47.180 --> 00:18:47.190 align:start position:0%
milliseconds which worked application is
 

00:18:47.190 --> 00:18:49.340 align:start position:0%
milliseconds which worked application is
well<00:18:47.340><c> optimized</c><00:18:47.790><c> even</c><00:18:48.419><c> if</c><00:18:48.540><c> the</c><00:18:48.630><c> GC</c><00:18:48.960><c> happens</c>

00:18:49.340 --> 00:18:49.350 align:start position:0%
well optimized even if the GC happens
 

00:18:49.350 --> 00:18:51.140 align:start position:0%
well optimized even if the GC happens
during<00:18:49.530><c> an</c><00:18:49.650><c> animation</c><00:18:49.799><c> or</c><00:18:50.340><c> scrolling</c><00:18:50.640><c> you</c>

00:18:51.140 --> 00:18:51.150 align:start position:0%
during an animation or scrolling you
 

00:18:51.150 --> 00:18:53.990 align:start position:0%
during an animation or scrolling you
should<00:18:51.660><c> be</c><00:18:51.780><c> able</c><00:18:51.840><c> to</c><00:18:51.990><c> like</c><00:18:52.290><c> reach</c><00:18:53.250><c> 60</c><00:18:53.640><c> FPS</c>

00:18:53.990 --> 00:18:54.000 align:start position:0%
should be able to like reach 60 FPS
 

00:18:54.000 --> 00:18:57.409 align:start position:0%
should be able to like reach 60 FPS
without<00:18:54.270><c> any</c><00:18:54.419><c> jank</c><00:18:55.429><c> another</c><00:18:56.429><c> thing</c><00:18:56.640><c> that</c><00:18:56.850><c> was</c>

00:18:57.409 --> 00:18:57.419 align:start position:0%
without any jank another thing that was
 

00:18:57.419 --> 00:18:59.000 align:start position:0%
without any jank another thing that was
introduced<00:18:57.840><c> in</c><00:18:57.960><c> art</c><00:18:58.200><c> was</c><00:18:58.320><c> the</c><00:18:58.470><c> concept</c><00:18:58.799><c> of</c><00:18:58.890><c> the</c>

00:18:59.000 --> 00:18:59.010 align:start position:0%
introduced in art was the concept of the
 

00:18:59.010 --> 00:19:01.130 align:start position:0%
introduced in art was the concept of the
minor<00:18:59.220><c> garbage</c><00:18:59.730><c> collection</c><00:19:00.150><c> so</c><00:19:00.720><c> the</c><00:19:00.870><c> idea</c>

00:19:01.130 --> 00:19:01.140 align:start position:0%
minor garbage collection so the idea
 

00:19:01.140 --> 00:19:04.909 align:start position:0%
minor garbage collection so the idea
here<00:19:01.200><c> is</c><00:19:01.500><c> to</c><00:19:02.720><c> keep</c><00:19:03.720><c> track</c><00:19:04.049><c> of</c><00:19:04.260><c> all</c><00:19:04.440><c> the</c><00:19:04.620><c> objects</c>

00:19:04.909 --> 00:19:04.919 align:start position:0%
here is to keep track of all the objects
 

00:19:04.919 --> 00:19:06.440 align:start position:0%
here is to keep track of all the objects
that<00:19:04.980><c> have</c><00:19:05.190><c> been</c><00:19:05.309><c> allocated</c><00:19:05.790><c> since</c><00:19:06.059><c> the</c><00:19:06.210><c> last</c>

00:19:06.440 --> 00:19:06.450 align:start position:0%
that have been allocated since the last
 

00:19:06.450 --> 00:19:09.320 align:start position:0%
that have been allocated since the last
major<00:19:06.960><c> garbage</c><00:19:07.590><c> collection</c><00:19:08.190><c> those</c><00:19:09.179><c> are</c>

00:19:09.320 --> 00:19:09.330 align:start position:0%
major garbage collection those are
 

00:19:09.330 --> 00:19:11.060 align:start position:0%
major garbage collection those are
typically<00:19:09.750><c> temporary</c><00:19:10.320><c> objects</c><00:19:10.650><c> and</c><00:19:10.860><c> we're</c>

00:19:11.060 --> 00:19:11.070 align:start position:0%
typically temporary objects and we're
 

00:19:11.070 --> 00:19:12.560 align:start position:0%
typically temporary objects and we're
going<00:19:11.220><c> to</c><00:19:11.280><c> look</c><00:19:11.400><c> at</c><00:19:11.520><c> them</c><00:19:11.669><c> first</c><00:19:12.059><c> so</c><00:19:12.210><c> if</c><00:19:12.360><c> we</c><00:19:12.450><c> can</c>

00:19:12.560 --> 00:19:12.570 align:start position:0%
going to look at them first so if we can
 

00:19:12.570 --> 00:19:14.180 align:start position:0%
going to look at them first so if we can
reclaim<00:19:12.809><c> enough</c><00:19:13.230><c> memory</c><00:19:13.590><c> by</c><00:19:13.740><c> looking</c><00:19:14.010><c> at</c><00:19:14.100><c> the</c>

00:19:14.180 --> 00:19:14.190 align:start position:0%
reclaim enough memory by looking at the
 

00:19:14.190 --> 00:19:15.500 align:start position:0%
reclaim enough memory by looking at the
subjects<00:19:14.549><c> first</c><00:19:14.760><c> because</c><00:19:15.330><c> they</c><00:19:15.480><c> are</c>

00:19:15.500 --> 00:19:15.510 align:start position:0%
subjects first because they are
 

00:19:15.510 --> 00:19:17.090 align:start position:0%
subjects first because they are
short-lived<00:19:15.929><c> we</c><00:19:16.380><c> won't</c><00:19:16.559><c> have</c><00:19:16.650><c> to</c><00:19:16.799><c> go</c><00:19:16.919><c> through</c>

00:19:17.090 --> 00:19:17.100 align:start position:0%
short-lived we won't have to go through
 

00:19:17.100 --> 00:19:19.880 align:start position:0%
short-lived we won't have to go through
the<00:19:17.190><c> entire</c><00:19:17.429><c> heap</c><00:19:18.440><c> this</c><00:19:19.440><c> is</c><00:19:19.590><c> one</c><00:19:19.740><c> of</c><00:19:19.770><c> the</c>

00:19:19.880 --> 00:19:19.890 align:start position:0%
the entire heap this is one of the
 

00:19:19.890 --> 00:19:21.440 align:start position:0%
the entire heap this is one of the
things<00:19:20.070><c> that</c><00:19:20.250><c> has</c><00:19:20.400><c> an</c><00:19:20.520><c> important</c><00:19:20.910><c> consequence</c>

00:19:21.440 --> 00:19:21.450 align:start position:0%
things that has an important consequence
 

00:19:21.450 --> 00:19:23.539 align:start position:0%
things that has an important consequence
for<00:19:21.720><c> Android</c><00:19:22.470><c> development</c><00:19:22.799><c> where</c><00:19:23.100><c> we</c><00:19:23.130><c> used</c><00:19:23.429><c> to</c>

00:19:23.539 --> 00:19:23.549 align:start position:0%
for Android development where we used to
 

00:19:23.549 --> 00:19:25.400 align:start position:0%
for Android development where we used to
tell<00:19:23.700><c> you</c><00:19:23.850><c> never</c><00:19:24.030><c> allocate</c><00:19:24.630><c> even</c><00:19:24.960><c> temporary</c>

00:19:25.400 --> 00:19:25.410 align:start position:0%
tell you never allocate even temporary
 

00:19:25.410 --> 00:19:26.690 align:start position:0%
tell you never allocate even temporary
objects<00:19:25.799><c> because</c><00:19:26.100><c> they</c><00:19:26.130><c> tend</c><00:19:26.490><c> to</c><00:19:26.549><c> be</c>

00:19:26.690 --> 00:19:26.700 align:start position:0%
objects because they tend to be
 

00:19:26.700 --> 00:19:28.070 align:start position:0%
objects because they tend to be
expensive<00:19:26.940><c> because</c><00:19:27.299><c> they're</c><00:19:27.480><c> gonna</c><00:19:27.600><c> fragment</c>

00:19:28.070 --> 00:19:28.080 align:start position:0%
expensive because they're gonna fragment
 

00:19:28.080 --> 00:19:29.840 align:start position:0%
expensive because they're gonna fragment
the<00:19:28.169><c> heap</c><00:19:28.350><c> we</c><00:19:28.799><c> have</c><00:19:28.950><c> to</c><00:19:29.070><c> do</c><00:19:29.160><c> the</c><00:19:29.280><c> allocation</c><00:19:29.730><c> we</c>

00:19:29.840 --> 00:19:29.850 align:start position:0%
the heap we have to do the allocation we
 

00:19:29.850 --> 00:19:31.549 align:start position:0%
the heap we have to do the allocation we
actually<00:19:30.120><c> the</c><00:19:30.210><c> collection</c><00:19:30.600><c> all</c><00:19:30.750><c> of</c><00:19:31.230><c> a</c><00:19:31.290><c> sudden</c>

00:19:31.549 --> 00:19:31.559 align:start position:0%
actually the collection all of a sudden
 

00:19:31.559 --> 00:19:33.590 align:start position:0%
actually the collection all of a sudden
we<00:19:31.710><c> made</c><00:19:31.740><c> temporary</c><00:19:32.400><c> object</c><00:19:32.850><c> allocation</c><00:19:33.450><c> and</c>

00:19:33.590 --> 00:19:33.600 align:start position:0%
we made temporary object allocation and
 

00:19:33.600 --> 00:19:35.750 align:start position:0%
we made temporary object allocation and
collection<00:19:34.169><c> much</c><00:19:34.350><c> faster</c><00:19:34.799><c> and</c><00:19:34.890><c> easier</c><00:19:35.070><c> it's</c>

00:19:35.750 --> 00:19:35.760 align:start position:0%
collection much faster and easier it's
 

00:19:35.760 --> 00:19:39.080 align:start position:0%
collection much faster and easier it's
not<00:19:35.910><c> free</c><00:19:36.120><c> it's</c><00:19:36.299><c> just</c><00:19:36.330><c> less</c><00:19:37.140><c> expensive</c><00:19:37.650><c> yes</c><00:19:38.090><c> we</c>

00:19:39.080 --> 00:19:39.090 align:start position:0%
not free it's just less expensive yes we
 

00:19:39.090 --> 00:19:40.460 align:start position:0%
not free it's just less expensive yes we
also<00:19:39.240><c> introduced</c><00:19:39.720><c> the</c><00:19:39.840><c> larger</c><00:19:40.080><c> break</c><00:19:40.290><c> heap</c>

00:19:40.460 --> 00:19:40.470 align:start position:0%
also introduced the larger break heap
 

00:19:40.470 --> 00:19:41.690 align:start position:0%
also introduced the larger break heap
that<00:19:40.500><c> we</c><00:19:40.740><c> talked</c><00:19:40.950><c> about</c><00:19:41.070><c> so</c><00:19:41.309><c> you</c><00:19:41.370><c> have</c><00:19:41.520><c> less</c>

00:19:41.690 --> 00:19:41.700 align:start position:0%
that we talked about so you have less
 

00:19:41.700 --> 00:19:43.220 align:start position:0%
that we talked about so you have less
fragmentation<00:19:42.299><c> but</c><00:19:42.480><c> one</c><00:19:42.809><c> of</c><00:19:42.929><c> the</c><00:19:43.020><c> huge</c>

00:19:43.220 --> 00:19:43.230 align:start position:0%
fragmentation but one of the huge
 

00:19:43.230 --> 00:19:45.350 align:start position:0%
fragmentation but one of the huge
benefits<00:19:43.410><c> of</c><00:19:43.860><c> that</c><00:19:44.040><c> is</c><00:19:44.280><c> because</c><00:19:45.030><c> we</c><00:19:45.210><c> don't</c>

00:19:45.350 --> 00:19:45.360 align:start position:0%
benefits of that is because we don't
 

00:19:45.360 --> 00:19:47.510 align:start position:0%
benefits of that is because we don't
fragment<00:19:45.690><c> the</c><00:19:45.929><c> heap</c><00:19:46.169><c> as</c><00:19:46.350><c> much</c><00:19:46.559><c> we</c><00:19:47.190><c> don't</c><00:19:47.309><c> have</c>

00:19:47.510 --> 00:19:47.520 align:start position:0%
fragment the heap as much we don't have
 

00:19:47.520 --> 00:19:49.190 align:start position:0%
fragment the heap as much we don't have
to<00:19:47.669><c> grow</c><00:19:47.970><c> the</c><00:19:48.120><c> heap</c><00:19:48.360><c> as</c><00:19:48.480><c> much</c><00:19:48.690><c> in</c><00:19:48.960><c> all</c><00:19:49.080><c> the</c>

00:19:49.190 --> 00:19:49.200 align:start position:0%
to grow the heap as much in all the
 

00:19:49.200 --> 00:19:52.190 align:start position:0%
to grow the heap as much in all the
processes<00:19:49.740><c> and</c><00:19:50.330><c> of</c><00:19:51.330><c> course</c><00:19:51.630><c> we</c><00:19:51.780><c> don't</c><00:19:51.990><c> have</c>

00:19:52.190 --> 00:19:52.200 align:start position:0%
processes and of course we don't have
 

00:19:52.200 --> 00:19:53.690 align:start position:0%
processes and of course we don't have
those<00:19:52.350><c> GC</c><00:19:52.799><c> for</c><00:19:52.950><c> our</c><00:19:53.010><c> opposite</c><00:19:53.400><c> I</c><00:19:53.490><c> mean</c><00:19:53.610><c> they</c>

00:19:53.690 --> 00:19:53.700 align:start position:0%
those GC for our opposite I mean they
 

00:19:53.700 --> 00:19:55.039 align:start position:0%
those GC for our opposite I mean they
still<00:19:53.880><c> exist</c><00:19:54.179><c> we</c><00:19:54.330><c> just</c><00:19:54.510><c> don't</c><00:19:54.660><c> see</c><00:19:54.809><c> them</c><00:19:54.929><c> as</c>

00:19:55.039 --> 00:19:55.049 align:start position:0%
still exist we just don't see them as
 

00:19:55.049 --> 00:19:56.570 align:start position:0%
still exist we just don't see them as
much<00:19:55.080><c> because</c><00:19:55.530><c> they</c><00:19:55.620><c> were</c><00:19:55.679><c> very</c><00:19:55.950><c> very</c><00:19:56.100><c> common</c>

00:19:56.570 --> 00:19:56.580 align:start position:0%
much because they were very very common
 

00:19:56.580 --> 00:19:59.120 align:start position:0%
much because they were very very common
in<00:19:56.760><c> the</c><00:19:56.940><c> dalvik</c><00:19:57.120><c> test</c><00:19:57.480><c> and</c><00:19:57.740><c> also</c><00:19:58.740><c> like</c><00:19:58.919><c> there's</c>

00:19:59.120 --> 00:19:59.130 align:start position:0%
in the dalvik test and also like there's
 

00:19:59.130 --> 00:20:00.710 align:start position:0%
in the dalvik test and also like there's
a<00:19:59.190><c> faster</c><00:19:59.490><c> runtime</c><00:19:59.880><c> you</c><00:20:00.030><c> know</c><00:20:00.120><c> that's</c><00:20:00.360><c> the</c>

00:20:00.710 --> 00:20:00.720 align:start position:0%
a faster runtime you know that's the
 

00:20:00.720 --> 00:20:02.380 align:start position:0%
a faster runtime you know that's the
ahead<00:20:00.929><c> of</c><00:20:01.049><c> time</c><00:20:01.200><c> compilation</c>

00:20:02.380 --> 00:20:02.390 align:start position:0%
ahead of time compilation
 

00:20:02.390 --> 00:20:04.150 align:start position:0%
ahead of time compilation
usage<00:20:02.630><c> it</c><00:20:02.810><c> back</c><00:20:03.020><c> but</c><00:20:03.290><c> this</c><00:20:03.470><c> has</c><00:20:03.650><c> nothing</c><00:20:03.950><c> to</c><00:20:03.980><c> do</c>

00:20:04.150 --> 00:20:04.160 align:start position:0%
usage it back but this has nothing to do
 

00:20:04.160 --> 00:20:07.780 align:start position:0%
usage it back but this has nothing to do
with<00:20:04.190><c> the</c><00:20:04.340><c> garbage</c><00:20:04.580><c> collector</c><00:20:05.710><c> marshmallow</c><00:20:06.790><c> I</c>

00:20:07.780 --> 00:20:07.790 align:start position:0%
with the garbage collector marshmallow I
 

00:20:07.790 --> 00:20:10.720 align:start position:0%
with the garbage collector marshmallow I
was<00:20:08.480><c> looking</c><00:20:08.810><c> through</c><00:20:08.840><c> yesterday</c><00:20:09.800><c> that</c><00:20:10.070><c> it's</c>

00:20:10.720 --> 00:20:10.730 align:start position:0%
was looking through yesterday that it's
 

00:20:10.730 --> 00:20:12.070 align:start position:0%
was looking through yesterday that it's
kind<00:20:10.910><c> of</c><00:20:10.970><c> a</c><00:20:11.030><c> boring</c><00:20:11.270><c> release</c><00:20:11.600><c> because</c><00:20:11.840><c> I</c><00:20:11.900><c> can</c>

00:20:12.070 --> 00:20:12.080 align:start position:0%
kind of a boring release because I can
 

00:20:12.080 --> 00:20:14.830 align:start position:0%
kind of a boring release because I can
never<00:20:12.200><c> remember</c><00:20:12.440><c> what</c><00:20:12.890><c> was</c><00:20:13.130><c> marshmallow</c><00:20:13.840><c> so</c>

00:20:14.830 --> 00:20:14.840 align:start position:0%
never remember what was marshmallow so
 

00:20:14.840 --> 00:20:16.980 align:start position:0%
never remember what was marshmallow so
here<00:20:15.080><c> it</c><00:20:15.170><c> is</c><00:20:15.640><c> optimizations</c>

00:20:16.980 --> 00:20:16.990 align:start position:0%
here it is optimizations
 

00:20:16.990 --> 00:20:19.720 align:start position:0%
here it is optimizations
things<00:20:17.990><c> got</c><00:20:18.200><c> faster</c><00:20:18.740><c> fine</c><00:20:19.070><c> grained</c><00:20:19.340><c> details</c>

00:20:19.720 --> 00:20:19.730 align:start position:0%
things got faster fine grained details
 

00:20:19.730 --> 00:20:25.360 align:start position:0%
things got faster fine grained details
things<00:20:20.150><c> got</c><00:20:20.360><c> faster</c><00:20:22.780><c> and</c><00:20:23.780><c> in</c><00:20:23.990><c> N</c><00:20:24.350><c> again</c><00:20:24.920><c> things</c>

00:20:25.360 --> 00:20:25.370 align:start position:0%
things got faster and in N again things
 

00:20:25.370 --> 00:20:28.090 align:start position:0%
things got faster and in N again things
got<00:20:25.610><c> faster</c><00:20:26.060><c> isn't</c><00:20:26.420><c> that</c><00:20:26.570><c> nice</c><00:20:26.980><c> allocation</c><00:20:27.980><c> in</c>

00:20:28.090 --> 00:20:28.100 align:start position:0%
got faster isn't that nice allocation in
 

00:20:28.100 --> 00:20:30.370 align:start position:0%
got faster isn't that nice allocation in
particular<00:20:28.640><c> they</c><00:20:29.510><c> rewrote</c><00:20:29.990><c> everything</c>

00:20:30.370 --> 00:20:30.380 align:start position:0%
particular they rewrote everything
 

00:20:30.380 --> 00:20:32.590 align:start position:0%
particular they rewrote everything
although<00:20:30.980><c> all</c><00:20:31.160><c> the</c><00:20:31.310><c> core</c><00:20:31.520><c> stuff</c><00:20:31.820><c> in</c><00:20:32.060><c> assembly</c>

00:20:32.590 --> 00:20:32.600 align:start position:0%
although all the core stuff in assembly
 

00:20:32.600 --> 00:20:34.270 align:start position:0%
although all the core stuff in assembly
and<00:20:32.810><c> that</c><00:20:32.840><c> turns</c><00:20:33.170><c> out</c><00:20:33.380><c> to</c><00:20:33.410><c> still</c><00:20:33.860><c> help</c><00:20:34.100><c> in</c>

00:20:34.270 --> 00:20:34.280 align:start position:0%
and that turns out to still help in
 

00:20:34.280 --> 00:20:36.280 align:start position:0%
and that turns out to still help in
software<00:20:34.700><c> who</c><00:20:34.850><c> knew</c><00:20:35.000><c> and</c><00:20:35.750><c> now</c><00:20:35.900><c> we're</c><00:20:36.050><c> up</c><00:20:36.170><c> to</c>

00:20:36.280 --> 00:20:36.290 align:start position:0%
software who knew and now we're up to
 

00:20:36.290 --> 00:20:38.200 align:start position:0%
software who knew and now we're up to
about<00:20:36.410><c> ten</c><00:20:36.770><c> times</c><00:20:36.980><c> faster</c><00:20:37.550><c> for</c><00:20:37.580><c> allocation</c>

00:20:38.200 --> 00:20:38.210 align:start position:0%
about ten times faster for allocation
 

00:20:38.210 --> 00:20:41.040 align:start position:0%
about ten times faster for allocation
cost<00:20:38.630><c> when</c><00:20:38.960><c> you</c><00:20:39.050><c> compare</c><00:20:39.350><c> it</c><00:20:39.440><c> to</c><00:20:39.470><c> dalvik</c><00:20:39.890><c> and</c>

00:20:41.040 --> 00:20:41.050 align:start position:0%
cost when you compare it to dalvik and
 

00:20:41.050 --> 00:20:44.710 align:start position:0%
cost when you compare it to dalvik and
now<00:20:42.050><c> we're</c><00:20:42.350><c> in</c><00:20:42.500><c> our</c><00:20:42.770><c> Oreo</c><00:20:43.580><c> where</c><00:20:44.330><c> basically</c>

00:20:44.710 --> 00:20:44.720 align:start position:0%
now we're in our Oreo where basically
 

00:20:44.720 --> 00:20:46.090 align:start position:0%
now we're in our Oreo where basically
they<00:20:44.930><c> rewrote</c><00:20:45.260><c> the</c><00:20:45.440><c> whole</c><00:20:45.560><c> thing</c><00:20:45.830><c> so</c><00:20:46.010><c> we</c>

00:20:46.090 --> 00:20:46.100 align:start position:0%
they rewrote the whole thing so we
 

00:20:46.100 --> 00:20:48.310 align:start position:0%
they rewrote the whole thing so we
introduced<00:20:46.490><c> an</c><00:20:46.670><c> entirely</c><00:20:47.030><c> new</c><00:20:47.320><c> collector</c>

00:20:48.310 --> 00:20:48.320 align:start position:0%
introduced an entirely new collector
 

00:20:48.320 --> 00:20:49.960 align:start position:0%
introduced an entirely new collector
called<00:20:48.560><c> the</c><00:20:48.620><c> concurrent</c><00:20:49.070><c> heap</c><00:20:49.310><c> compaction</c>

00:20:49.960 --> 00:20:49.970 align:start position:0%
called the concurrent heap compaction
 

00:20:49.970 --> 00:20:52.480 align:start position:0%
called the concurrent heap compaction
collector<00:20:50.510><c> and</c><00:20:51.350><c> this</c><00:20:51.530><c> means</c><00:20:51.710><c> that</c><00:20:51.980><c> now</c><00:20:52.190><c> we</c><00:20:52.250><c> can</c>

00:20:52.480 --> 00:20:52.490 align:start position:0%
collector and this means that now we can
 

00:20:52.490 --> 00:20:54.520 align:start position:0%
collector and this means that now we can
actually<00:20:52.850><c> compact</c><00:20:53.480><c> in</c><00:20:53.720><c> the</c><00:20:53.900><c> foreground</c><00:20:54.230><c> not</c>

00:20:54.520 --> 00:20:54.530 align:start position:0%
actually compact in the foreground not
 

00:20:54.530 --> 00:20:56.230 align:start position:0%
actually compact in the foreground not
just<00:20:54.830><c> when</c><00:20:55.010><c> we</c><00:20:55.130><c> need</c><00:20:55.310><c> to</c><00:20:55.400><c> do</c><00:20:55.520><c> that</c><00:20:55.670><c> GC</c><00:20:56.030><c> for</c>

00:20:56.230 --> 00:20:56.240 align:start position:0%
just when we need to do that GC for
 

00:20:56.240 --> 00:20:58.240 align:start position:0%
just when we need to do that GC for
alloc<00:20:56.300><c> compact</c><00:20:57.230><c> to</c><00:20:57.380><c> find</c><00:20:57.590><c> a</c><00:20:57.680><c> space</c><00:20:57.920><c> but</c><00:20:58.130><c> it's</c>

00:20:58.240 --> 00:20:58.250 align:start position:0%
alloc compact to find a space but it's
 

00:20:58.250 --> 00:21:00.040 align:start position:0%
alloc compact to find a space but it's
actually<00:20:58.550><c> running</c><00:20:58.790><c> all</c><00:20:59.120><c> the</c><00:20:59.270><c> time</c><00:20:59.480><c> moving</c>

00:21:00.040 --> 00:21:00.050 align:start position:0%
actually running all the time moving
 

00:21:00.050 --> 00:21:02.140 align:start position:0%
actually running all the time moving
stuff<00:21:00.440><c> around</c><00:21:00.770><c> and</c><00:21:01.100><c> optimizing</c><00:21:01.910><c> what</c><00:21:02.030><c> the</c>

00:21:02.140 --> 00:21:02.150 align:start position:0%
stuff around and optimizing what the
 

00:21:02.150 --> 00:21:04.270 align:start position:0%
stuff around and optimizing what the
heap<00:21:02.300><c> looks</c><00:21:02.540><c> like</c><00:21:02.750><c> so</c><00:21:03.200><c> that</c><00:21:03.290><c> allocations</c><00:21:04.010><c> are</c>

00:21:04.270 --> 00:21:04.280 align:start position:0%
heap looks like so that allocations are
 

00:21:04.280 --> 00:21:07.150 align:start position:0%
heap looks like so that allocations are
much<00:21:04.580><c> faster</c><00:21:04.850><c> and</c><00:21:05.240><c> easier</c><00:21:05.770><c> overall</c><00:21:06.770><c> so</c>

00:21:07.150 --> 00:21:07.160 align:start position:0%
much faster and easier overall so
 

00:21:07.160 --> 00:21:09.130 align:start position:0%
much faster and easier overall so
defragmentation<00:21:08.030><c> in</c><00:21:08.330><c> the</c><00:21:08.420><c> foreground</c>

00:21:09.130 --> 00:21:09.140 align:start position:0%
defragmentation in the foreground
 

00:21:09.140 --> 00:21:11.170 align:start position:0%
defragmentation in the foreground
you've<00:21:09.530><c> not</c><00:21:09.770><c> resizing</c><00:21:10.400><c> the</c><00:21:10.490><c> heap</c><00:21:10.730><c> as</c><00:21:10.880><c> often</c>

00:21:11.170 --> 00:21:11.180 align:start position:0%
you've not resizing the heap as often
 

00:21:11.180 --> 00:21:12.880 align:start position:0%
you've not resizing the heap as often
because<00:21:11.360><c> the</c><00:21:11.630><c> heap</c><00:21:11.840><c> is</c><00:21:11.990><c> always</c><00:21:12.290><c> optimized</c>

00:21:12.880 --> 00:21:12.890 align:start position:0%
because the heap is always optimized
 

00:21:12.890 --> 00:21:14.410 align:start position:0%
because the heap is always optimized
because<00:21:13.070><c> we're</c><00:21:13.310><c> always</c><00:21:13.490><c> sort</c><00:21:13.880><c> of</c><00:21:13.970><c> culling</c><00:21:14.390><c> the</c>

00:21:14.410 --> 00:21:14.420 align:start position:0%
because we're always sort of culling the
 

00:21:14.420 --> 00:21:16.570 align:start position:0%
because we're always sort of culling the
things<00:21:14.720><c> out</c><00:21:14.930><c> of</c><00:21:14.960><c> it</c><00:21:15.140><c> as</c><00:21:15.290><c> necessary</c><00:21:15.830><c> there's</c>

00:21:16.570 --> 00:21:16.580 align:start position:0%
things out of it as necessary there's
 

00:21:16.580 --> 00:21:18.430 align:start position:0%
things out of it as necessary there's
far<00:21:16.790><c> fewer</c><00:21:16.820><c> GC</c><00:21:17.510><c> fare</c><00:21:17.720><c> always</c><00:21:17.990><c> because</c><00:21:18.200><c> we</c><00:21:18.320><c> just</c>

00:21:18.430 --> 00:21:18.440 align:start position:0%
far fewer GC fare always because we just
 

00:21:18.440 --> 00:21:20.110 align:start position:0%
far fewer GC fare always because we just
don't<00:21:18.590><c> get</c><00:21:18.770><c> into</c><00:21:19.010><c> that</c><00:21:19.100><c> situation</c><00:21:19.370><c> anymore</c>

00:21:20.110 --> 00:21:20.120 align:start position:0%
don't get into that situation anymore
 

00:21:20.120 --> 00:21:23.290 align:start position:0%
don't get into that situation anymore
huge<00:21:20.870><c> savings</c><00:21:21.380><c> for</c><00:21:21.590><c> the</c><00:21:21.680><c> entire</c><00:21:22.100><c> device</c><00:21:22.580><c> think</c>

00:21:23.290 --> 00:21:23.300 align:start position:0%
huge savings for the entire device think
 

00:21:23.300 --> 00:21:25.180 align:start position:0%
huge savings for the entire device think
about<00:21:23.480><c> it</c><00:21:23.600><c> if</c><00:21:23.750><c> you</c><00:21:23.900><c> can</c><00:21:24.050><c> only</c><00:21:24.320><c> defragment</c><00:21:25.100><c> to</c>

00:21:25.180 --> 00:21:25.190 align:start position:0%
about it if you can only defragment to
 

00:21:25.190 --> 00:21:27.040 align:start position:0%
about it if you can only defragment to
keep<00:21:25.430><c> when</c><00:21:25.910><c> an</c><00:21:26.030><c> application</c><00:21:26.450><c> is</c><00:21:26.750><c> in</c><00:21:26.960><c> the</c>

00:21:27.040 --> 00:21:27.050 align:start position:0%
keep when an application is in the
 

00:21:27.050 --> 00:21:28.570 align:start position:0%
keep when an application is in the
background<00:21:27.440><c> what</c><00:21:27.650><c> about</c><00:21:27.830><c> the</c><00:21:27.920><c> applications</c>

00:21:28.570 --> 00:21:28.580 align:start position:0%
background what about the applications
 

00:21:28.580 --> 00:21:30.070 align:start position:0%
background what about the applications
and<00:21:28.820><c> services</c><00:21:29.240><c> that</c><00:21:29.420><c> are</c><00:21:29.540><c> constantly</c><00:21:29.900><c> in</c><00:21:30.020><c> the</c>

00:21:30.070 --> 00:21:30.080 align:start position:0%
and services that are constantly in the
 

00:21:30.080 --> 00:21:33.100 align:start position:0%
and services that are constantly in the
foreground<00:21:30.380><c> system</c><00:21:30.890><c> service</c><00:21:31.360><c> Play</c><00:21:32.360><c> Services</c>

00:21:33.100 --> 00:21:33.110 align:start position:0%
foreground system service Play Services
 

00:21:33.110 --> 00:21:35.730 align:start position:0%
foreground system service Play Services
system<00:21:34.010><c> UI</c><00:21:34.220><c> well</c><00:21:35.030><c> we</c><00:21:35.180><c> couldn't</c><00:21:35.450><c> necessarily</c>

00:21:35.730 --> 00:21:35.740 align:start position:0%
system UI well we couldn't necessarily
 

00:21:35.740 --> 00:21:37.840 align:start position:0%
system UI well we couldn't necessarily
defragment<00:21:36.740><c> those</c><00:21:36.890><c> until</c><00:21:37.280><c> it</c><00:21:37.400><c> got</c><00:21:37.550><c> into</c><00:21:37.820><c> a</c>

00:21:37.840 --> 00:21:37.850 align:start position:0%
defragment those until it got into a
 

00:21:37.850 --> 00:21:40.030 align:start position:0%
defragment those until it got into a
really<00:21:38.090><c> bad</c><00:21:38.330><c> situation</c><00:21:38.570><c> wouldn't</c><00:21:39.260><c> be</c><00:21:39.320><c> nice</c><00:21:39.500><c> if</c>

00:21:40.030 --> 00:21:40.040 align:start position:0%
really bad situation wouldn't be nice if
 

00:21:40.040 --> 00:21:41.380 align:start position:0%
really bad situation wouldn't be nice if
we<00:21:40.130><c> could</c><00:21:40.190><c> do</c><00:21:40.370><c> it</c><00:21:40.460><c> in</c><00:21:40.550><c> the</c><00:21:40.640><c> foreground</c><00:21:41.030><c> so</c><00:21:41.210><c> that</c>

00:21:41.380 --> 00:21:41.390 align:start position:0%
we could do it in the foreground so that
 

00:21:41.390 --> 00:21:42.850 align:start position:0%
we could do it in the foreground so that
those<00:21:41.540><c> things</c><00:21:41.810><c> were</c><00:21:41.960><c> optimized</c><00:21:42.470><c> well</c><00:21:42.650><c> if</c><00:21:42.740><c> we</c>

00:21:42.850 --> 00:21:42.860 align:start position:0%
those things were optimized well if we
 

00:21:42.860 --> 00:21:44.380 align:start position:0%
those things were optimized well if we
can<00:21:42.980><c> do</c><00:21:43.100><c> it</c><00:21:43.220><c> for</c><00:21:43.370><c> them</c><00:21:43.550><c> that</c><00:21:44.090><c> means</c><00:21:44.240><c> we're</c>

00:21:44.380 --> 00:21:44.390 align:start position:0%
can do it for them that means we're
 

00:21:44.390 --> 00:21:46.210 align:start position:0%
can do it for them that means we're
getting<00:21:44.480><c> system-wide</c><00:21:45.110><c> savings</c><00:21:45.620><c> on</c><00:21:45.800><c> the</c><00:21:45.980><c> on</c>

00:21:46.210 --> 00:21:46.220 align:start position:0%
getting system-wide savings on the on
 

00:21:46.220 --> 00:21:47.980 align:start position:0%
getting system-wide savings on the on
the<00:21:46.400><c> pure</c><00:21:46.730><c> heap</c><00:21:47.000><c> size</c><00:21:47.240><c> of</c><00:21:47.480><c> all</c><00:21:47.690><c> of</c><00:21:47.840><c> those</c>

00:21:47.980 --> 00:21:47.990 align:start position:0%
the pure heap size of all of those
 

00:21:47.990 --> 00:21:51.400 align:start position:0%
the pure heap size of all of those
applications<00:21:49.390><c> so</c><00:21:50.390><c> smaller</c><00:21:50.810><c> heaps</c><00:21:51.110><c> for</c><00:21:51.290><c> all</c>

00:21:51.400 --> 00:21:51.410 align:start position:0%
applications so smaller heaps for all
 

00:21:51.410 --> 00:21:53.560 align:start position:0%
applications so smaller heaps for all
means<00:21:51.770><c> less</c><00:21:52.160><c> memory</c><00:21:52.520><c> in</c><00:21:52.730><c> the</c><00:21:52.850><c> entire</c><00:21:53.210><c> system</c>

00:21:53.560 --> 00:21:53.570 align:start position:0%
means less memory in the entire system
 

00:21:53.570 --> 00:21:55.900 align:start position:0%
means less memory in the entire system
and<00:21:53.960><c> what</c><00:21:54.140><c> we</c><00:21:54.260><c> found</c><00:21:54.440><c> was</c><00:21:54.800><c> the</c><00:21:55.220><c> entire</c><00:21:55.580><c> device</c>

00:21:55.900 --> 00:21:55.910 align:start position:0%
and what we found was the entire device
 

00:21:55.910 --> 00:21:58.300 align:start position:0%
and what we found was the entire device
had<00:21:56.150><c> about</c><00:21:56.300><c> a</c><00:21:56.360><c> 30%</c><00:21:56.810><c> savings</c><00:21:57.560><c> on</c><00:21:57.800><c> overall</c>

00:21:58.300 --> 00:21:58.310 align:start position:0%
had about a 30% savings on overall
 

00:21:58.310 --> 00:22:01.270 align:start position:0%
had about a 30% savings on overall
memory<00:21:58.700><c> requirements</c><00:21:59.860><c> so</c><00:22:00.860><c> we</c><00:22:00.890><c> can</c><00:22:01.070><c> take</c><00:22:01.250><c> a</c>

00:22:01.270 --> 00:22:01.280 align:start position:0%
memory requirements so we can take a
 

00:22:01.280 --> 00:22:03.670 align:start position:0%
memory requirements so we can take a
look<00:22:01.460><c> at</c><00:22:01.610><c> how</c><00:22:01.970><c> compaction</c><00:22:02.600><c> works</c><00:22:02.840><c> in</c><00:22:03.050><c> general</c>

00:22:03.670 --> 00:22:03.680 align:start position:0%
look at how compaction works in general
 

00:22:03.680 --> 00:22:06.370 align:start position:0%
look at how compaction works in general
we<00:22:03.830><c> have</c><00:22:04.010><c> these</c><00:22:04.130><c> 256</c><00:22:05.030><c> K</c><00:22:05.240><c> buckets</c><00:22:06.080><c> that</c><00:22:06.290><c> are</c>

00:22:06.370 --> 00:22:06.380 align:start position:0%
we have these 256 K buckets that are
 

00:22:06.380 --> 00:22:08.710 align:start position:0%
we have these 256 K buckets that are
assigned<00:22:06.710><c> per</c><00:22:07.100><c> thread</c><00:22:07.490><c> which</c><00:22:07.760><c> means</c><00:22:08.030><c> again</c>

00:22:08.710 --> 00:22:08.720 align:start position:0%
assigned per thread which means again
 

00:22:08.720 --> 00:22:10.900 align:start position:0%
assigned per thread which means again
huge<00:22:09.260><c> savings</c><00:22:09.680><c> in</c><00:22:09.920><c> not</c><00:22:10.160><c> having</c><00:22:10.460><c> to</c><00:22:10.550><c> lock</c><00:22:10.700><c> down</c>

00:22:10.900 --> 00:22:10.910 align:start position:0%
huge savings in not having to lock down
 

00:22:10.910 --> 00:22:12.310 align:start position:0%
huge savings in not having to lock down
all<00:22:11.180><c> the</c><00:22:11.330><c> threads</c><00:22:11.570><c> to</c><00:22:11.720><c> do</c><00:22:11.840><c> these</c><00:22:12.020><c> allocations</c>

00:22:12.310 --> 00:22:12.320 align:start position:0%
all the threads to do these allocations
 

00:22:12.320 --> 00:22:15.010 align:start position:0%
all the threads to do these allocations
and<00:22:12.800><c> collections</c><00:22:13.310><c> instead</c><00:22:14.060><c> a</c><00:22:14.090><c> thread</c><00:22:14.600><c> if</c><00:22:14.870><c> it</c>

00:22:15.010 --> 00:22:15.020 align:start position:0%
and collections instead a thread if it
 

00:22:15.020 --> 00:22:15.940 align:start position:0%
and collections instead a thread if it
needs<00:22:15.260><c> memory</c><00:22:15.470><c> it</c>

00:22:15.940 --> 00:22:15.950 align:start position:0%
needs memory it
 

00:22:15.950 --> 00:22:18.879 align:start position:0%
needs memory it
just<00:22:16.250><c> responsible</c><00:22:16.760><c> for</c><00:22:16.940><c> itself</c><00:22:17.330><c> so</c><00:22:18.019><c> a</c><00:22:18.409><c> thread</c>

00:22:18.879 --> 00:22:18.889 align:start position:0%
just responsible for itself so a thread
 

00:22:18.889 --> 00:22:20.470 align:start position:0%
just responsible for itself so a thread
says<00:22:19.100><c> okay</c><00:22:19.370><c> I</c><00:22:19.399><c> need</c><00:22:19.549><c> some</c><00:22:19.789><c> memory</c><00:22:20.029><c> it's</c><00:22:20.210><c> handed</c>

00:22:20.470 --> 00:22:20.480 align:start position:0%
says okay I need some memory it's handed
 

00:22:20.480 --> 00:22:22.060 align:start position:0%
says okay I need some memory it's handed
one<00:22:20.600><c> of</c><00:22:20.690><c> these</c><00:22:20.809><c> buckets</c><00:22:21.019><c> it</c><00:22:21.320><c> allocates</c><00:22:21.799><c> in</c>

00:22:22.060 --> 00:22:22.070 align:start position:0%
one of these buckets it allocates in
 

00:22:22.070 --> 00:22:24.399 align:start position:0%
one of these buckets it allocates in
there<00:22:22.399><c> and</c><00:22:22.580><c> then</c><00:22:23.029><c> over</c><00:22:23.419><c> time</c><00:22:23.659><c> that</c><00:22:23.990><c> thing</c><00:22:24.230><c> may</c>

00:22:24.399 --> 00:22:24.409 align:start position:0%
there and then over time that thing may
 

00:22:24.409 --> 00:22:25.899 align:start position:0%
there and then over time that thing may
get<00:22:24.590><c> defragmented</c><00:22:25.340><c> there's</c><00:22:25.549><c> a</c><00:22:25.639><c> heuristic</c>

00:22:25.899 --> 00:22:25.909 align:start position:0%
get defragmented there's a heuristic
 

00:22:25.909 --> 00:22:28.659 align:start position:0%
get defragmented there's a heuristic
that<00:22:26.299><c> they</c><00:22:26.419><c> have</c><00:22:26.929><c> about</c><00:22:27.289><c> if</c><00:22:27.799><c> there's</c><00:22:28.130><c> less</c>

00:22:28.659 --> 00:22:28.669 align:start position:0%
that they have about if there's less
 

00:22:28.669 --> 00:22:31.120 align:start position:0%
that they have about if there's less
than<00:22:28.700><c> 70</c><00:22:29.330><c> or</c><00:22:29.450><c> 75</c><00:22:29.929><c> percent</c><00:22:29.960><c> utilization</c><00:22:30.740><c> and</c>

00:22:31.120 --> 00:22:31.130 align:start position:0%
than 70 or 75 percent utilization and
 

00:22:31.130 --> 00:22:32.769 align:start position:0%
than 70 or 75 percent utilization and
one<00:22:31.220><c> of</c><00:22:31.340><c> these</c><00:22:31.429><c> things</c><00:22:31.539><c> then</c><00:22:32.539><c> they'll</c><00:22:32.659><c> go</c>

00:22:32.769 --> 00:22:32.779 align:start position:0%
one of these things then they'll go
 

00:22:32.779 --> 00:22:34.509 align:start position:0%
one of these things then they'll go
ahead<00:22:32.899><c> and</c><00:22:33.019><c> collect</c><00:22:33.350><c> it</c><00:22:33.559><c> and</c><00:22:33.769><c> empty</c><00:22:34.220><c> the</c><00:22:34.340><c> thing</c>

00:22:34.509 --> 00:22:34.519 align:start position:0%
ahead and collect it and empty the thing
 

00:22:34.519 --> 00:22:37.000 align:start position:0%
ahead and collect it and empty the thing
out<00:22:34.639><c> entirely</c><00:22:35.029><c> so</c><00:22:35.360><c> we</c><00:22:35.450><c> see</c><00:22:35.659><c> the</c><00:22:36.110><c> T</c><00:22:36.320><c> 1</c><00:22:36.529><c> 2</c><00:22:36.799><c> &amp;</c><00:22:36.980><c> 3</c>

00:22:37.000 --> 00:22:37.010 align:start position:0%
out entirely so we see the T 1 2 &amp; 3
 

00:22:37.010 --> 00:22:39.279 align:start position:0%
out entirely so we see the T 1 2 &amp; 3
regions<00:22:37.730><c> here</c><00:22:38.029><c> don't</c><00:22:38.539><c> have</c><00:22:38.720><c> much</c><00:22:38.870><c> going</c><00:22:39.169><c> on</c>

00:22:39.279 --> 00:22:39.289 align:start position:0%
regions here don't have much going on
 

00:22:39.289 --> 00:22:40.570 align:start position:0%
regions here don't have much going on
there<00:22:39.500><c> so</c><00:22:39.649><c> we're</c><00:22:39.740><c> going</c><00:22:39.860><c> to</c><00:22:39.919><c> take</c><00:22:40.100><c> the</c><00:22:40.220><c> memory</c>

00:22:40.570 --> 00:22:40.580 align:start position:0%
there so we're going to take the memory
 

00:22:40.580 --> 00:22:42.759 align:start position:0%
there so we're going to take the memory
in<00:22:40.789><c> there</c><00:22:41.360><c> all</c><00:22:41.630><c> of</c><00:22:41.659><c> those</c><00:22:41.899><c> allocations</c><00:22:42.230><c> and</c>

00:22:42.759 --> 00:22:42.769 align:start position:0%
in there all of those allocations and
 

00:22:42.769 --> 00:22:44.049 align:start position:0%
in there all of those allocations and
shove<00:22:42.980><c> them</c><00:22:43.039><c> somewhere</c><00:22:43.399><c> else</c><00:22:43.460><c> on</c><00:22:43.730><c> the</c><00:22:43.789><c> heap</c>

00:22:44.049 --> 00:22:44.059 align:start position:0%
shove them somewhere else on the heap
 

00:22:44.059 --> 00:22:47.049 align:start position:0%
shove them somewhere else on the heap
completely<00:22:45.019><c> empty</c><00:22:45.350><c> out</c><00:22:45.470><c> those</c><00:22:45.679><c> buckets</c><00:22:46.130><c> which</c>

00:22:47.049 --> 00:22:47.059 align:start position:0%
completely empty out those buckets which
 

00:22:47.059 --> 00:22:49.330 align:start position:0%
completely empty out those buckets which
allows<00:22:47.360><c> something</c><00:22:47.809><c> that's</c><00:22:48.409><c> super</c><00:22:48.889><c> efficient</c>

00:22:49.330 --> 00:22:49.340 align:start position:0%
allows something that's super efficient
 

00:22:49.340 --> 00:22:51.639 align:start position:0%
allows something that's super efficient
called<00:22:49.519><c> thread-local</c><00:22:50.029><c> bump</c><00:22:50.539><c> allocator</c><00:22:51.110><c> this</c>

00:22:51.639 --> 00:22:51.649 align:start position:0%
called thread-local bump allocator this
 

00:22:51.649 --> 00:22:53.200 align:start position:0%
called thread-local bump allocator this
means<00:22:51.889><c> that</c><00:22:52.100><c> all</c><00:22:52.279><c> we</c><00:22:52.309><c> have</c><00:22:52.610><c> to</c><00:22:52.760><c> do</c><00:22:52.880><c> is</c><00:22:53.029><c> actually</c>

00:22:53.200 --> 00:22:53.210 align:start position:0%
means that all we have to do is actually
 

00:22:53.210 --> 00:22:54.879 align:start position:0%
means that all we have to do is actually
just<00:22:53.570><c> move</c><00:22:53.809><c> a</c><00:22:53.990><c> pointer</c><00:22:54.320><c> we</c><00:22:54.470><c> don't</c><00:22:54.620><c> need</c><00:22:54.769><c> to</c>

00:22:54.879 --> 00:22:54.889 align:start position:0%
just move a pointer we don't need to
 

00:22:54.889 --> 00:22:56.680 align:start position:0%
just move a pointer we don't need to
walk<00:22:55.159><c> the</c><00:22:55.190><c> heap</c><00:22:55.639><c> to</c><00:22:55.820><c> find</c><00:22:56.090><c> where</c><00:22:56.299><c> the</c><00:22:56.480><c> free</c>

00:22:56.680 --> 00:22:56.690 align:start position:0%
walk the heap to find where the free
 

00:22:56.690 --> 00:22:59.350 align:start position:0%
walk the heap to find where the free
space<00:22:56.960><c> is</c><00:22:57.230><c> we</c><00:22:57.799><c> just</c><00:22:58.010><c> put</c><00:22:58.279><c> the</c><00:22:58.429><c> next</c><00:22:58.730><c> object</c><00:22:58.940><c> in</c>

00:22:59.350 --> 00:22:59.360 align:start position:0%
space is we just put the next object in
 

00:22:59.360 --> 00:23:01.240 align:start position:0%
space is we just put the next object in
the<00:22:59.750><c> next</c><00:22:59.990><c> available</c><00:23:00.169><c> space</c><00:23:00.710><c> and</c><00:23:00.919><c> we</c><00:23:01.130><c> know</c>

00:23:01.240 --> 00:23:01.250 align:start position:0%
the next available space and we know
 

00:23:01.250 --> 00:23:02.740 align:start position:0%
the next available space and we know
where<00:23:01.429><c> that</c><00:23:01.460><c> is</c><00:23:01.760><c> according</c><00:23:02.029><c> to</c><00:23:02.330><c> the</c><00:23:02.419><c> pointer</c>

00:23:02.740 --> 00:23:02.750 align:start position:0%
where that is according to the pointer
 

00:23:02.750 --> 00:23:04.840 align:start position:0%
where that is according to the pointer
turns<00:23:03.470><c> out</c><00:23:03.710><c> all</c><00:23:03.919><c> of</c><00:23:03.980><c> this</c><00:23:04.309><c> stuff</c><00:23:04.490><c> put</c><00:23:04.760><c> together</c>

00:23:04.840 --> 00:23:04.850 align:start position:0%
turns out all of this stuff put together
 

00:23:04.850 --> 00:23:07.629 align:start position:0%
turns out all of this stuff put together
we're<00:23:05.360><c> now</c><00:23:05.510><c> 18</c><00:23:06.169><c> times</c><00:23:06.529><c> faster</c><00:23:07.070><c> than</c><00:23:07.220><c> dalvik</c>

00:23:07.629 --> 00:23:07.639 align:start position:0%
we're now 18 times faster than dalvik
 

00:23:07.639 --> 00:23:10.000 align:start position:0%
we're now 18 times faster than dalvik
for<00:23:08.450><c> these</c><00:23:08.600><c> allocations</c><00:23:08.899><c> so</c><00:23:09.350><c> we</c><00:23:09.470><c> can</c><00:23:09.590><c> see</c><00:23:09.799><c> how</c>

00:23:10.000 --> 00:23:10.010 align:start position:0%
for these allocations so we can see how
 

00:23:10.010 --> 00:23:12.519 align:start position:0%
for these allocations so we can see how
these<00:23:10.130><c> allocations</c><00:23:10.750><c> work</c><00:23:11.750><c> in</c><00:23:11.929><c> practice</c><00:23:12.380><c> you</c>

00:23:12.519 --> 00:23:12.529 align:start position:0%
these allocations work in practice you
 

00:23:12.529 --> 00:23:14.080 align:start position:0%
these allocations work in practice you
can<00:23:12.649><c> see</c><00:23:12.830><c> all</c><00:23:12.980><c> these</c><00:23:13.100><c> little</c><00:23:13.399><c> colored</c><00:23:13.580><c> objects</c>

00:23:14.080 --> 00:23:14.090 align:start position:0%
can see all these little colored objects
 

00:23:14.090 --> 00:23:15.279 align:start position:0%
can see all these little colored objects
we're<00:23:14.269><c> making</c><00:23:14.539><c> space</c><00:23:14.750><c> for</c><00:23:14.779><c> them</c><00:23:15.110><c> and</c><00:23:15.230><c> the</c>

00:23:15.279 --> 00:23:15.289 align:start position:0%
we're making space for them and the
 

00:23:15.289 --> 00:23:16.360 align:start position:0%
we're making space for them and the
different<00:23:15.380><c> threads</c><00:23:15.769><c> that</c><00:23:15.980><c> need</c><00:23:16.039><c> those</c>

00:23:16.360 --> 00:23:16.370 align:start position:0%
different threads that need those
 

00:23:16.370 --> 00:23:18.580 align:start position:0%
different threads that need those
allocations<00:23:17.000><c> if</c><00:23:17.480><c> we</c><00:23:17.630><c> take</c><00:23:17.779><c> a</c><00:23:17.840><c> close</c><00:23:18.139><c> look</c><00:23:18.289><c> at</c>

00:23:18.580 --> 00:23:18.590 align:start position:0%
allocations if we take a close look at
 

00:23:18.590 --> 00:23:19.210 align:start position:0%
allocations if we take a close look at
t1

00:23:19.210 --> 00:23:19.220 align:start position:0%
t1
 

00:23:19.220 --> 00:23:20.500 align:start position:0%
t1
you've<00:23:19.610><c> got</c><00:23:19.760><c> the</c><00:23:19.850><c> free</c><00:23:20.029><c> pointer</c><00:23:20.360><c> we've</c>

00:23:20.500 --> 00:23:20.510 align:start position:0%
you've got the free pointer we've
 

00:23:20.510 --> 00:23:22.539 align:start position:0%
you've got the free pointer we've
emptied<00:23:20.899><c> it</c><00:23:21.110><c> out</c><00:23:21.230><c> we've</c><00:23:21.769><c> zeroed</c><00:23:22.039><c> it</c><00:23:22.279><c> out</c><00:23:22.370><c> we're</c>

00:23:22.539 --> 00:23:22.549 align:start position:0%
emptied it out we've zeroed it out we're
 

00:23:22.549 --> 00:23:24.009 align:start position:0%
emptied it out we've zeroed it out we're
at<00:23:22.580><c> the</c><00:23:22.760><c> beginning</c><00:23:23.059><c> of</c><00:23:23.269><c> that</c><00:23:23.360><c> bucket</c><00:23:23.809><c> and</c><00:23:23.990><c> now</c>

00:23:24.009 --> 00:23:24.019 align:start position:0%
at the beginning of that bucket and now
 

00:23:24.019 --> 00:23:25.960 align:start position:0%
at the beginning of that bucket and now
we<00:23:24.470><c> need</c><00:23:24.710><c> to</c><00:23:24.740><c> allocate</c><00:23:25.190><c> an</c><00:23:25.279><c> object</c><00:23:25.669><c> well</c><00:23:25.850><c> we</c>

00:23:25.960 --> 00:23:25.970 align:start position:0%
we need to allocate an object well we
 

00:23:25.970 --> 00:23:27.700 align:start position:0%
we need to allocate an object well we
know<00:23:26.120><c> where</c><00:23:26.330><c> to</c><00:23:26.419><c> put</c><00:23:26.600><c> it</c><00:23:26.659><c> because</c><00:23:27.139><c> the</c><00:23:27.380><c> pointer</c>

00:23:27.700 --> 00:23:27.710 align:start position:0%
know where to put it because the pointer
 

00:23:27.710 --> 00:23:29.769 align:start position:0%
know where to put it because the pointer
tells<00:23:27.980><c> us</c><00:23:28.159><c> and</c><00:23:28.340><c> now</c><00:23:28.760><c> all</c><00:23:28.970><c> we</c><00:23:29.149><c> do</c><00:23:29.299><c> is</c><00:23:29.330><c> advance</c>

00:23:29.769 --> 00:23:29.779 align:start position:0%
tells us and now all we do is advance
 

00:23:29.779 --> 00:23:31.210 align:start position:0%
tells us and now all we do is advance
the<00:23:29.960><c> pointer</c><00:23:30.230><c> the</c><00:23:30.380><c> pointer</c><00:23:30.649><c> tells</c><00:23:30.889><c> us</c><00:23:31.039><c> where</c>

00:23:31.210 --> 00:23:31.220 align:start position:0%
the pointer the pointer tells us where
 

00:23:31.220 --> 00:23:32.529 align:start position:0%
the pointer the pointer tells us where
to<00:23:31.279><c> put</c><00:23:31.429><c> the</c><00:23:31.519><c> next</c><00:23:31.669><c> one</c><00:23:31.789><c> and</c><00:23:32.059><c> the</c><00:23:32.240><c> one</c><00:23:32.269><c> after</c>

00:23:32.529 --> 00:23:32.539 align:start position:0%
to put the next one and the one after
 

00:23:32.539 --> 00:23:35.259 align:start position:0%
to put the next one and the one after
that<00:23:32.690><c> and</c><00:23:33.110><c> so</c><00:23:33.649><c> on</c><00:23:33.679><c> so</c><00:23:34.100><c> very</c><00:23:34.340><c> fast</c><00:23:34.760><c> and</c><00:23:35.059><c> easy</c>

00:23:35.259 --> 00:23:35.269 align:start position:0%
that and so on so very fast and easy
 

00:23:35.269 --> 00:23:37.120 align:start position:0%
that and so on so very fast and easy
compared<00:23:35.720><c> to</c><00:23:35.750><c> what</c><00:23:35.929><c> we</c><00:23:36.019><c> were</c><00:23:36.049><c> doing</c><00:23:36.230><c> before</c><00:23:36.470><c> we</c>

00:23:37.120 --> 00:23:37.130 align:start position:0%
compared to what we were doing before we
 

00:23:37.130 --> 00:23:38.980 align:start position:0%
compared to what we were doing before we
can<00:23:37.250><c> see</c><00:23:37.429><c> on</c><00:23:37.580><c> the</c><00:23:37.669><c> graph</c><00:23:37.850><c> the</c><00:23:38.179><c> comparison</c><00:23:38.809><c> of</c>

00:23:38.980 --> 00:23:38.990 align:start position:0%
can see on the graph the comparison of
 

00:23:38.990 --> 00:23:41.259 align:start position:0%
can see on the graph the comparison of
where<00:23:39.230><c> we</c><00:23:39.380><c> are</c><00:23:39.500><c> at</c><00:23:39.679><c> with</c><00:23:39.860><c> dalvik</c><00:23:40.279><c> allocation</c>

00:23:41.259 --> 00:23:41.269 align:start position:0%
where we are at with dalvik allocation
 

00:23:41.269 --> 00:23:43.029 align:start position:0%
where we are at with dalvik allocation
cost<00:23:41.539><c> compared</c><00:23:42.019><c> to</c><00:23:42.110><c> where</c><00:23:42.289><c> we're</c><00:23:42.470><c> not</c><00:23:42.649><c> where</c>

00:23:43.029 --> 00:23:43.039 align:start position:0%
cost compared to where we're not where
 

00:23:43.039 --> 00:23:45.940 align:start position:0%
cost compared to where we're not where
we're<00:23:43.340><c> at</c><00:23:43.490><c> now</c><00:23:43.600><c> in</c><00:23:44.600><c> O</c><00:23:44.899><c> with</c><00:23:45.110><c> bump</c><00:23:45.380><c> pointer</c><00:23:45.740><c> and</c>

00:23:45.940 --> 00:23:45.950 align:start position:0%
we're at now in O with bump pointer and
 

00:23:45.950 --> 00:23:51.370 align:start position:0%
we're at now in O with bump pointer and
assembly<00:23:46.870><c> allocations</c><00:23:47.870><c> instead</c><00:23:50.230><c> all</c><00:23:51.230><c> right</c>

00:23:51.370 --> 00:23:51.380 align:start position:0%
assembly allocations instead all right
 

00:23:51.380 --> 00:23:53.049 align:start position:0%
assembly allocations instead all right
so<00:23:51.590><c> where</c><00:23:51.740><c> are</c><00:23:51.769><c> we</c><00:23:51.860><c> going</c><00:23:52.130><c> now</c><00:23:52.309><c> it</c><00:23:52.820><c> is</c>

00:23:53.049 --> 00:23:53.059 align:start position:0%
so where are we going now it is
 

00:23:53.059 --> 00:23:54.909 align:start position:0%
so where are we going now it is
important<00:23:53.659><c> to</c><00:23:53.960><c> note</c><00:23:54.350><c> that</c><00:23:54.380><c> the</c><00:23:54.740><c> young</c>

00:23:54.909 --> 00:23:54.919 align:start position:0%
important to note that the young
 

00:23:54.919 --> 00:23:57.250 align:start position:0%
important to note that the young
generation<00:23:55.269><c> stuff</c><00:23:56.269><c> that</c><00:23:56.480><c> we</c><00:23:56.570><c> talked</c><00:23:56.840><c> about</c><00:23:56.990><c> is</c>

00:23:57.250 --> 00:23:57.260 align:start position:0%
generation stuff that we talked about is
 

00:23:57.260 --> 00:23:59.919 align:start position:0%
generation stuff that we talked about is
being<00:23:57.470><c> so</c><00:23:57.710><c> awesome</c><00:23:57.950><c> is</c><00:23:58.429><c> currently</c><00:23:58.789><c> gone</c><00:23:59.059><c> but</c>

00:23:59.919 --> 00:23:59.929 align:start position:0%
being so awesome is currently gone but
 

00:23:59.929 --> 00:24:03.039 align:start position:0%
being so awesome is currently gone but
it's<00:24:00.620><c> back</c><00:24:00.889><c> you</c><00:24:01.039><c> know</c><00:24:01.159><c> HP</c><00:24:01.309><c> yeah</c><00:24:02.090><c> what</c><00:24:02.899><c> are</c><00:24:02.960><c> you</c>

00:24:03.039 --> 00:24:03.049 align:start position:0%
it's back you know HP yeah what are you
 

00:24:03.049 --> 00:24:05.950 align:start position:0%
it's back you know HP yeah what are you
being<00:24:03.169><c> this</c><00:24:03.529><c> your</c><00:24:03.679><c> release</c><00:24:04.039><c> yep</c><00:24:04.549><c> so</c><00:24:04.970><c> it's</c>

00:24:05.950 --> 00:24:05.960 align:start position:0%
being this your release yep so it's
 

00:24:05.960 --> 00:24:07.149 align:start position:0%
being this your release yep so it's
important<00:24:06.350><c> to</c><00:24:06.409><c> note</c><00:24:06.559><c> like</c><00:24:06.679><c> that</c><00:24:06.950><c> there</c><00:24:07.130><c> are</c>

00:24:07.149 --> 00:24:07.159 align:start position:0%
important to note like that there are
 

00:24:07.159 --> 00:24:09.039 align:start position:0%
important to note like that there are
trade-offs<00:24:07.639><c> here</c><00:24:08.029><c> like</c><00:24:08.299><c> we</c><00:24:08.480><c> believe</c><00:24:08.840><c> it's</c>

00:24:09.039 --> 00:24:09.049 align:start position:0%
trade-offs here like we believe it's
 

00:24:09.049 --> 00:24:10.960 align:start position:0%
trade-offs here like we believe it's
better<00:24:09.380><c> overall</c><00:24:09.769><c> all</c><00:24:10.250><c> of</c><00:24:10.399><c> the</c><00:24:10.460><c> benefits</c><00:24:10.880><c> that</c>

00:24:10.960 --> 00:24:10.970 align:start position:0%
better overall all of the benefits that
 

00:24:10.970 --> 00:24:12.340 align:start position:0%
better overall all of the benefits that
you<00:24:11.059><c> get</c><00:24:11.269><c> from</c><00:24:11.510><c> the</c><00:24:11.600><c> garbage</c><00:24:11.870><c> collector</c><00:24:12.200><c> and</c>

00:24:12.340 --> 00:24:12.350 align:start position:0%
you get from the garbage collector and
 

00:24:12.350 --> 00:24:14.379 align:start position:0%
you get from the garbage collector and
oh<00:24:12.440><c> should</c><00:24:12.679><c> compensate</c><00:24:13.070><c> for</c><00:24:13.580><c> the</c><00:24:14.179><c> young</c>

00:24:14.379 --> 00:24:14.389 align:start position:0%
oh should compensate for the young
 

00:24:14.389 --> 00:24:16.000 align:start position:0%
oh should compensate for the young
generation<00:24:14.419><c> collections</c><00:24:15.409><c> not</c><00:24:15.559><c> being</c><00:24:15.860><c> there</c>

00:24:16.000 --> 00:24:16.010 align:start position:0%
generation collections not being there
 

00:24:16.010 --> 00:24:17.889 align:start position:0%
generation collections not being there
anymore<00:24:16.250><c> however</c><00:24:16.789><c> there's</c><00:24:17.480><c> still</c><00:24:17.659><c> a</c><00:24:17.690><c> nice</c>

00:24:17.889 --> 00:24:17.899 align:start position:0%
anymore however there's still a nice
 

00:24:17.899 --> 00:24:19.629 align:start position:0%
anymore however there's still a nice
thing<00:24:17.929><c> to</c><00:24:18.139><c> have</c><00:24:18.260><c> so</c><00:24:18.620><c> they're</c><00:24:18.769><c> back</c><00:24:18.860><c> in</c><00:24:19.070><c> AOSP</c>

00:24:19.629 --> 00:24:19.639 align:start position:0%
thing to have so they're back in AOSP
 

00:24:19.639 --> 00:24:21.850 align:start position:0%
thing to have so they're back in AOSP
so<00:24:20.269><c> look</c><00:24:20.539><c> for</c><00:24:20.720><c> those</c><00:24:20.809><c> to</c><00:24:21.019><c> show</c><00:24:21.230><c> up</c><00:24:21.380><c> in</c><00:24:21.529><c> a</c><00:24:21.590><c> future</c>

00:24:21.850 --> 00:24:21.860 align:start position:0%
so look for those to show up in a future
 

00:24:21.860 --> 00:24:24.759 align:start position:0%
so look for those to show up in a future
release<00:24:22.809><c> so</c><00:24:23.809><c> object</c><00:24:24.200><c> pools</c><00:24:24.379><c> this</c><00:24:24.559><c> is</c><00:24:24.740><c> a</c>

00:24:24.759 --> 00:24:24.769 align:start position:0%
release so object pools this is a
 

00:24:24.769 --> 00:24:26.350 align:start position:0%
release so object pools this is a
technique<00:24:25.460><c> that</c><00:24:25.519><c> you</c><00:24:25.909><c> know</c><00:24:26.029><c> we've</c>

00:24:26.350 --> 00:24:26.360 align:start position:0%
technique that you know we've
 

00:24:26.360 --> 00:24:28.029 align:start position:0%
technique that you know we've
recommended<00:24:26.690><c> using</c><00:24:27.080><c> in</c><00:24:27.260><c> the</c><00:24:27.350><c> past</c><00:24:27.500><c> we</c><00:24:27.740><c> use</c><00:24:27.889><c> it</c>

00:24:28.029 --> 00:24:28.039 align:start position:0%
recommended using in the past we use it
 

00:24:28.039 --> 00:24:28.659 align:start position:0%
recommended using in the past we use it
ourselves

00:24:28.659 --> 00:24:28.669 align:start position:0%
ourselves
 

00:24:28.669 --> 00:24:29.289 align:start position:0%
ourselves
X

00:24:29.289 --> 00:24:29.299 align:start position:0%
X
 

00:24:29.299 --> 00:24:31.450 align:start position:0%
X
inside<00:24:30.019><c> the</c><00:24:30.110><c> platform</c><00:24:30.289><c> and</c><00:24:30.830><c> the</c><00:24:30.980><c> conventional</c>

00:24:31.450 --> 00:24:31.460 align:start position:0%
inside the platform and the conventional
 

00:24:31.460 --> 00:24:33.820 align:start position:0%
inside the platform and the conventional
wisdom<00:24:31.759><c> is</c><00:24:31.909><c> that</c><00:24:31.940><c> reusing</c><00:24:32.899><c> object</c><00:24:33.259><c> has</c><00:24:33.499><c> to</c><00:24:33.529><c> be</c>

00:24:33.820 --> 00:24:33.830 align:start position:0%
wisdom is that reusing object has to be
 

00:24:33.830 --> 00:24:35.859 align:start position:0%
wisdom is that reusing object has to be
faster<00:24:34.279><c> than</c><00:24:34.309><c> educating</c><00:24:34.970><c> them</c><00:24:35.239><c> in</c><00:24:35.269><c> collecting</c>

00:24:35.859 --> 00:24:35.869 align:start position:0%
faster than educating them in collecting
 

00:24:35.869 --> 00:24:37.450 align:start position:0%
faster than educating them in collecting
them<00:24:35.989><c> all</c><00:24:36.139><c> the</c><00:24:36.259><c> time</c><00:24:36.499><c> and</c><00:24:36.860><c> you</c><00:24:36.919><c> can</c><00:24:37.070><c> see</c><00:24:37.249><c> here</c>

00:24:37.450 --> 00:24:37.460 align:start position:0%
them all the time and you can see here
 

00:24:37.460 --> 00:24:39.039 align:start position:0%
them all the time and you can see here
we<00:24:37.610><c> have</c><00:24:37.759><c> a</c><00:24:37.789><c> performance</c><00:24:38.269><c> graph</c><00:24:38.629><c> so</c><00:24:38.869><c> the</c>

00:24:39.039 --> 00:24:39.049 align:start position:0%
we have a performance graph so the
 

00:24:39.049 --> 00:24:41.830 align:start position:0%
we have a performance graph so the
x-axis<00:24:39.619><c> is</c><00:24:40.340><c> the</c><00:24:40.429><c> size</c><00:24:40.909><c> of</c><00:24:41.059><c> the</c><00:24:41.239><c> object</c><00:24:41.600><c> that</c>

00:24:41.830 --> 00:24:41.840 align:start position:0%
x-axis is the size of the object that
 

00:24:41.840 --> 00:24:44.979 align:start position:0%
x-axis is the size of the object that
you're<00:24:42.169><c> creating</c><00:24:42.499><c> or</c><00:24:42.919><c> reusing</c><00:24:43.489><c> in</c><00:24:44.330><c> red</c><00:24:44.629><c> it's</c>

00:24:44.979 --> 00:24:44.989 align:start position:0%
you're creating or reusing in red it's
 

00:24:44.989 --> 00:24:47.320 align:start position:0%
you're creating or reusing in red it's
the<00:24:45.289><c> time</c><00:24:45.559><c> it</c><00:24:45.710><c> takes</c><00:24:45.860><c> to</c><00:24:46.610><c> handle</c><00:24:46.759><c> the</c><00:24:46.970><c> subjects</c>

00:24:47.320 --> 00:24:47.330 align:start position:0%
the time it takes to handle the subjects
 

00:24:47.330 --> 00:24:48.700 align:start position:0%
the time it takes to handle the subjects
with<00:24:47.480><c> a</c><00:24:47.509><c> pool</c><00:24:47.749><c> and</c><00:24:47.779><c> includes</c><00:24:48.350><c> the</c><00:24:48.440><c> time</c><00:24:48.619><c> in</c>

00:24:48.700 --> 00:24:48.710 align:start position:0%
with a pool and includes the time in
 

00:24:48.710 --> 00:24:50.109 align:start position:0%
with a pool and includes the time in
text<00:24:48.980><c> tutors</c><00:24:49.190><c> allocate</c><00:24:49.610><c> and</c><00:24:49.789><c> collect</c><00:24:50.029><c> the</c>

00:24:50.109 --> 00:24:50.119 align:start position:0%
text tutors allocate and collect the
 

00:24:50.119 --> 00:24:53.859 align:start position:0%
text tutors allocate and collect the
subjects<00:24:50.480><c> and</c><00:24:50.830><c> until</c><00:24:51.830><c> n</c><00:24:52.489><c> using</c><00:24:53.330><c> a</c><00:24:53.509><c> pool</c><00:24:53.720><c> was</c>

00:24:53.859 --> 00:24:53.869 align:start position:0%
subjects and until n using a pool was
 

00:24:53.869 --> 00:24:56.229 align:start position:0%
subjects and until n using a pool was
basically<00:24:54.289><c> always</c><00:24:54.499><c> a</c><00:24:54.769><c> win</c><00:24:55.100><c> compared</c><00:24:56.059><c> to</c><00:24:56.149><c> the</c>

00:24:56.229 --> 00:24:56.239 align:start position:0%
basically always a win compared to the
 

00:24:56.239 --> 00:24:58.899 align:start position:0%
basically always a win compared to the
garbage<00:24:56.480><c> collector</c><00:24:56.929><c> but</c><00:24:57.769><c> with</c><00:24:58.340><c> all</c><00:24:58.639><c> with</c><00:24:58.879><c> all</c>

00:24:58.899 --> 00:24:58.909 align:start position:0%
garbage collector but with all with all
 

00:24:58.909 --> 00:25:00.759 align:start position:0%
garbage collector but with all with all
the<00:24:59.149><c> improvements</c><00:24:59.389><c> we've</c><00:24:59.809><c> done</c><00:25:00.019><c> and</c><00:25:00.289><c> this</c><00:25:00.529><c> new</c>

00:25:00.759 --> 00:25:00.769 align:start position:0%
the improvements we've done and this new
 

00:25:00.769 --> 00:25:02.619 align:start position:0%
the improvements we've done and this new
thread<00:25:01.070><c> bump</c><00:25:01.249><c> local</c><00:25:01.580><c> thread</c><00:25:02.090><c> bank</c><00:25:02.269><c> local</c><00:25:02.570><c> a</c>

00:25:02.619 --> 00:25:02.629 align:start position:0%
thread bump local thread bank local a
 

00:25:02.629 --> 00:25:05.259 align:start position:0%
thread bump local thread bank local a
locator<00:25:03.129><c> synchronize</c><00:25:04.129><c> pools</c><00:25:04.489><c> of</c><00:25:04.669><c> objects</c><00:25:05.059><c> are</c>

00:25:05.259 --> 00:25:05.269 align:start position:0%
locator synchronize pools of objects are
 

00:25:05.269 --> 00:25:07.330 align:start position:0%
locator synchronize pools of objects are
generally<00:25:05.690><c> slower</c><00:25:06.109><c> and</c><00:25:06.409><c> I</c><00:25:06.919><c> want</c><00:25:07.129><c> to</c><00:25:07.190><c> emphasize</c>

00:25:07.330 --> 00:25:07.340 align:start position:0%
generally slower and I want to emphasize
 

00:25:07.340 --> 00:25:09.789 align:start position:0%
generally slower and I want to emphasize
the<00:25:07.909><c> synchronized</c><00:25:08.629><c> part</c><00:25:08.989><c> of</c><00:25:09.200><c> the</c><00:25:09.320><c> pool</c><00:25:09.529><c> if</c><00:25:09.739><c> you</c>

00:25:09.789 --> 00:25:09.799 align:start position:0%
the synchronized part of the pool if you
 

00:25:09.799 --> 00:25:11.499 align:start position:0%
the synchronized part of the pool if you
have<00:25:10.039><c> a</c><00:25:10.070><c> pool</c><00:25:10.340><c> of</c><00:25:10.369><c> objects</c><00:25:10.850><c> that</c><00:25:10.970><c> use</c><00:25:11.179><c> only</c><00:25:11.299><c> on</c>

00:25:11.499 --> 00:25:11.509 align:start position:0%
have a pool of objects that use only on
 

00:25:11.509 --> 00:25:13.899 align:start position:0%
have a pool of objects that use only on
one<00:25:11.779><c> thread</c><00:25:12.049><c> and</c><00:25:12.379><c> that</c><00:25:12.950><c> thread</c><00:25:13.009><c> only</c><00:25:13.549><c> you</c><00:25:13.879><c> I</c>

00:25:13.899 --> 00:25:13.909 align:start position:0%
one thread and that thread only you I
 

00:25:13.909 --> 00:25:15.039 align:start position:0%
one thread and that thread only you I
fix<00:25:14.210><c> usually</c><00:25:14.480><c> doing</c><00:25:14.720><c> the</c><00:25:14.840><c> kind</c><00:25:14.989><c> of</c>

00:25:15.039 --> 00:25:15.049 align:start position:0%
fix usually doing the kind of
 

00:25:15.049 --> 00:25:17.349 align:start position:0%
fix usually doing the kind of
optimization<00:25:15.559><c> that</c><00:25:15.639><c> art</c><00:25:16.639><c> does</c><00:25:16.879><c> for</c><00:25:17.119><c> you</c><00:25:17.210><c> now</c>

00:25:17.349 --> 00:25:17.359 align:start position:0%
optimization that art does for you now
 

00:25:17.359 --> 00:25:19.779 align:start position:0%
optimization that art does for you now
on<00:25:17.570><c> O</c><00:25:17.749><c> so</c><00:25:18.679><c> you</c><00:25:18.710><c> might</c><00:25:18.889><c> not</c><00:25:19.070><c> see</c><00:25:19.249><c> this</c><00:25:19.369><c> the</c><00:25:19.639><c> same</c>

00:25:19.779 --> 00:25:19.789 align:start position:0%
on O so you might not see this the same
 

00:25:19.789 --> 00:25:21.789 align:start position:0%
on O so you might not see this the same
kind<00:25:19.970><c> of</c><00:25:19.999><c> savings</c><00:25:20.359><c> but</c><00:25:20.480><c> in</c><00:25:20.600><c> general</c><00:25:20.899><c> on</c><00:25:21.049><c> O</c><00:25:21.109><c> if</c>

00:25:21.789 --> 00:25:21.799 align:start position:0%
kind of savings but in general on O if
 

00:25:21.799 --> 00:25:23.109 align:start position:0%
kind of savings but in general on O if
you<00:25:21.919><c> have</c><00:25:22.009><c> a</c><00:25:22.070><c> synchronized</c><00:25:22.460><c> pool</c><00:25:22.639><c> of</c><00:25:22.730><c> object</c>

00:25:23.109 --> 00:25:23.119 align:start position:0%
you have a synchronized pool of object
 

00:25:23.119 --> 00:25:24.909 align:start position:0%
you have a synchronized pool of object
you'd<00:25:23.539><c> be</c><00:25:23.690><c> probably</c><00:25:23.929><c> better</c><00:25:24.230><c> off</c><00:25:24.499><c> without</c>

00:25:24.909 --> 00:25:24.919 align:start position:0%
you'd be probably better off without
 

00:25:24.919 --> 00:25:27.369 align:start position:0%
you'd be probably better off without
that<00:25:25.489><c> pool</c><00:25:25.730><c> again</c><00:25:25.970><c> make</c><00:25:26.749><c> sure</c><00:25:26.779><c> you</c><00:25:26.989><c> profile</c>

00:25:27.369 --> 00:25:27.379 align:start position:0%
that pool again make sure you profile
 

00:25:27.379 --> 00:25:28.779 align:start position:0%
that pool again make sure you profile
your<00:25:27.529><c> application</c><00:25:28.009><c> before</c><00:25:28.159><c> you</c><00:25:28.429><c> take</c><00:25:28.580><c> you</c><00:25:28.669><c> out</c>

00:25:28.779 --> 00:25:28.789 align:start position:0%
your application before you take you out
 

00:25:28.789 --> 00:25:30.729 align:start position:0%
your application before you take you out
and<00:25:29.029><c> there's</c><00:25:29.539><c> a</c><00:25:29.749><c> certain</c><00:25:30.200><c> memory</c><00:25:30.409><c> size</c>

00:25:30.729 --> 00:25:30.739 align:start position:0%
and there's a certain memory size
 

00:25:30.739 --> 00:25:32.859 align:start position:0%
and there's a certain memory size
certain<00:25:31.220><c> size</c><00:25:31.460><c> of</c><00:25:31.639><c> object</c><00:25:31.999><c> where</c><00:25:32.239><c> these</c>

00:25:32.859 --> 00:25:32.869 align:start position:0%
certain size of object where these
 

00:25:32.869 --> 00:25:35.320 align:start position:0%
certain size of object where these
graphs<00:25:33.200><c> cross</c><00:25:33.499><c> but</c><00:25:34.190><c> this</c><00:25:34.340><c> was</c><00:25:34.489><c> in</c><00:25:34.669><c> a</c><00:25:34.850><c> benchmark</c>

00:25:35.320 --> 00:25:35.330 align:start position:0%
graphs cross but this was in a benchmark
 

00:25:35.330 --> 00:25:37.029 align:start position:0%
graphs cross but this was in a benchmark
application<00:25:35.869><c> that</c><00:25:35.989><c> was</c><00:25:36.080><c> really</c><00:25:36.409><c> hammering</c><00:25:36.799><c> it</c>

00:25:37.029 --> 00:25:37.039 align:start position:0%
application that was really hammering it
 

00:25:37.039 --> 00:25:39.909 align:start position:0%
application that was really hammering it
and<00:25:37.539><c> maximizing</c><00:25:38.539><c> the</c><00:25:38.600><c> bandwidth</c><00:25:38.989><c> so</c><00:25:39.230><c> the</c>

00:25:39.909 --> 00:25:39.919 align:start position:0%
and maximizing the bandwidth so the
 

00:25:39.919 --> 00:25:41.739 align:start position:0%
and maximizing the bandwidth so the
general<00:25:40.340><c> advice</c><00:25:40.489><c> is</c><00:25:40.669><c> you</c><00:25:41.090><c> really</c><00:25:41.330><c> shouldn't</c>

00:25:41.739 --> 00:25:41.749 align:start position:0%
general advice is you really shouldn't
 

00:25:41.749 --> 00:25:43.450 align:start position:0%
general advice is you really shouldn't
use<00:25:41.840><c> that</c><00:25:41.989><c> especially</c><00:25:42.889><c> the</c><00:25:43.009><c> synchronized</c>

00:25:43.450 --> 00:25:43.460 align:start position:0%
use that especially the synchronized
 

00:25:43.460 --> 00:25:45.999 align:start position:0%
use that especially the synchronized
pool<00:25:43.700><c> approach</c><00:25:44.480><c> because</c><00:25:44.840><c> a</c><00:25:45.049><c> it's</c><00:25:45.440><c> error-prone</c>

00:25:45.999 --> 00:25:46.009 align:start position:0%
pool approach because a it's error-prone
 

00:25:46.009 --> 00:25:48.820 align:start position:0%
pool approach because a it's error-prone
and<00:25:46.249><c> tedious</c><00:25:46.609><c> to</c><00:25:46.759><c> manage</c><00:25:47.090><c> and</c><00:25:47.299><c> B</c><00:25:47.809><c> it</c><00:25:48.109><c> is</c><00:25:48.320><c> slower</c>

00:25:48.820 --> 00:25:48.830 align:start position:0%
and tedious to manage and B it is slower
 

00:25:48.830 --> 00:25:50.200 align:start position:0%
and tedious to manage and B it is slower
in<00:25:49.129><c> general</c><00:25:49.609><c> because</c><00:25:49.970><c> that's</c>

00:25:50.200 --> 00:25:50.210 align:start position:0%
in general because that's
 

00:25:50.210 --> 00:25:52.529 align:start position:0%
in general because that's
synchronization<00:25:51.080><c> access</c><00:25:51.559><c> tends</c><00:25:52.159><c> to</c><00:25:52.309><c> be</c>

00:25:52.529 --> 00:25:52.539 align:start position:0%
synchronization access tends to be
 

00:25:52.539 --> 00:25:55.659 align:start position:0%
synchronization access tends to be
slower<00:25:53.539><c> than</c><00:25:53.869><c> what</c><00:25:54.649><c> we</c><00:25:54.799><c> can</c><00:25:54.950><c> do</c><00:25:55.100><c> now</c><00:25:55.279><c> with</c><00:25:55.340><c> your</c>

00:25:55.659 --> 00:25:55.669 align:start position:0%
slower than what we can do now with your
 

00:25:55.669 --> 00:25:57.340 align:start position:0%
slower than what we can do now with your
using<00:25:55.879><c> the</c><00:25:56.059><c> lock</c><00:25:56.269><c> in</c><00:25:56.450><c> the</c><00:25:56.480><c> whole</c><00:25:56.809><c> point</c><00:25:57.049><c> of</c><00:25:57.139><c> oh</c>

00:25:57.340 --> 00:25:57.350 align:start position:0%
using the lock in the whole point of oh
 

00:25:57.350 --> 00:25:58.989 align:start position:0%
using the lock in the whole point of oh
is<00:25:57.470><c> that</c><00:25:57.590><c> we</c><00:25:57.710><c> don't</c><00:25:57.859><c> have</c><00:25:58.009><c> a</c><00:25:58.039><c> lock</c><00:25:58.309><c> anymore</c><00:25:58.759><c> for</c>

00:25:58.989 --> 00:25:58.999 align:start position:0%
is that we don't have a lock anymore for
 

00:25:58.999 --> 00:26:04.149 align:start position:0%
is that we don't have a lock anymore for
the<00:25:59.119><c> applications</c><00:25:59.600><c> so</c><00:26:03.009><c> what</c><00:26:04.009><c> are</c><00:26:04.070><c> the</c>

00:26:04.149 --> 00:26:04.159 align:start position:0%
the applications so what are the
 

00:26:04.159 --> 00:26:07.299 align:start position:0%
the applications so what are the
recommendations<00:26:04.429><c> now</c><00:26:05.529><c> creating</c><00:26:06.529><c> garbage</c><00:26:06.859><c> is</c>

00:26:07.299 --> 00:26:07.309 align:start position:0%
recommendations now creating garbage is
 

00:26:07.309 --> 00:26:09.729 align:start position:0%
recommendations now creating garbage is
okay<00:26:08.210><c> I</c><00:26:08.539><c> wouldn't</c><00:26:08.899><c> go</c><00:26:09.019><c> out</c><00:26:09.049><c> of</c><00:26:09.440><c> your</c><00:26:09.470><c> way</c><00:26:09.559><c> to</c>

00:26:09.729 --> 00:26:09.739 align:start position:0%
okay I wouldn't go out of your way to
 

00:26:09.739 --> 00:26:12.310 align:start position:0%
okay I wouldn't go out of your way to
create<00:26:10.190><c> garbage</c><00:26:10.580><c> it</c><00:26:10.909><c> is</c><00:26:10.970><c> still</c><00:26:11.480><c> taking</c><00:26:12.019><c> time</c>

00:26:12.310 --> 00:26:12.320 align:start position:0%
create garbage it is still taking time
 

00:26:12.320 --> 00:26:14.859 align:start position:0%
create garbage it is still taking time
you<00:26:12.619><c> are</c><00:26:12.769><c> requiring</c><00:26:13.249><c> us</c><00:26:13.879><c> to</c><00:26:13.909><c> take</c><00:26:14.450><c> time</c><00:26:14.659><c> to</c>

00:26:14.859 --> 00:26:14.869 align:start position:0%
you are requiring us to take time to
 

00:26:14.869 --> 00:26:16.419 align:start position:0%
you are requiring us to take time to
allocate<00:26:15.289><c> objects</c><00:26:15.679><c> as</c><00:26:15.830><c> well</c><00:26:15.980><c> as</c><00:26:16.039><c> later</c>

00:26:16.419 --> 00:26:16.429 align:start position:0%
allocate objects as well as later
 

00:26:16.429 --> 00:26:18.849 align:start position:0%
allocate objects as well as later
collect<00:26:16.909><c> them</c><00:26:17.139><c> and</c><00:26:18.139><c> you're</c><00:26:18.440><c> taking</c><00:26:18.739><c> up</c>

00:26:18.849 --> 00:26:18.859 align:start position:0%
collect them and you're taking up
 

00:26:18.859 --> 00:26:20.529 align:start position:0%
collect them and you're taking up
battery<00:26:19.190><c> in</c><00:26:19.309><c> CPU</c><00:26:19.759><c> and</c><00:26:19.970><c> you're</c><00:26:20.090><c> causing</c><00:26:20.419><c> but</c>

00:26:20.529 --> 00:26:20.539 align:start position:0%
battery in CPU and you're causing but
 

00:26:20.539 --> 00:26:22.720 align:start position:0%
battery in CPU and you're causing but
don't<00:26:20.690><c> do</c><00:26:20.779><c> that</c><00:26:20.840><c> pick</c><00:26:21.379><c> up</c><00:26:21.499><c> after</c><00:26:21.619><c> yourself</c><00:26:22.159><c> you</c>

00:26:22.720 --> 00:26:22.730 align:start position:0%
don't do that pick up after yourself you
 

00:26:22.730 --> 00:26:24.430 align:start position:0%
don't do that pick up after yourself you
should<00:26:22.940><c> seize</c><00:26:23.210><c> this</c><00:26:23.480><c> it's</c><00:26:23.840><c> pretty</c><00:26:24.200><c> disgusting</c>

00:26:24.430 --> 00:26:24.440 align:start position:0%
should seize this it's pretty disgusting
 

00:26:24.440 --> 00:26:28.180 align:start position:0%
should seize this it's pretty disgusting
I<00:26:25.369><c> like</c><00:26:25.999><c> to</c><00:26:26.119><c> be</c><00:26:26.269><c> a</c><00:26:26.570><c> counterexample</c>

00:26:28.180 --> 00:26:28.190 align:start position:0%
I like to be a counterexample
 

00:26:28.190 --> 00:26:31.599 align:start position:0%
I like to be a counterexample
so<00:26:28.669><c> in</c><00:26:29.450><c> general</c><00:26:29.779><c> creating</c><00:26:30.739><c> the</c><00:26:30.859><c> stuff</c><00:26:31.070><c> if</c><00:26:31.309><c> you</c>

00:26:31.599 --> 00:26:31.609 align:start position:0%
so in general creating the stuff if you
 

00:26:31.609 --> 00:26:33.820 align:start position:0%
so in general creating the stuff if you
need<00:26:31.820><c> it</c><00:26:31.970><c> is</c><00:26:32.149><c> okay</c><00:26:32.690><c> and</c><00:26:32.899><c> so</c><00:26:33.109><c> is</c><00:26:33.259><c> collecting</c><00:26:33.710><c> it</c>

00:26:33.820 --> 00:26:33.830 align:start position:0%
need it is okay and so is collecting it
 

00:26:33.830 --> 00:26:35.619 align:start position:0%
need it is okay and so is collecting it
use<00:26:34.279><c> the</c><00:26:34.460><c> types</c><00:26:34.669><c> and</c><00:26:34.850><c> the</c><00:26:34.909><c> objects</c><00:26:35.389><c> that</c><00:26:35.419><c> you</c>

00:26:35.619 --> 00:26:35.629 align:start position:0%
use the types and the objects that you
 

00:26:35.629 --> 00:26:36.970 align:start position:0%
use the types and the objects that you
need<00:26:35.809><c> if</c><00:26:35.929><c> they</c><00:26:36.049><c> make</c><00:26:36.200><c> sense</c><00:26:36.440><c> for</c><00:26:36.769><c> the</c>

00:26:36.970 --> 00:26:36.980 align:start position:0%
need if they make sense for the
 

00:26:36.980 --> 00:26:38.919 align:start position:0%
need if they make sense for the
architecture<00:26:37.519><c> for</c><00:26:38.090><c> the</c><00:26:38.179><c> API</c><00:26:38.450><c> so</c><00:26:38.539><c> you're</c>

00:26:38.919 --> 00:26:38.929 align:start position:0%
architecture for the API so you're
 

00:26:38.929 --> 00:26:40.790 align:start position:0%
architecture for the API so you're
building<00:26:39.080><c> for</c><00:26:39.470><c> the</c><00:26:39.590><c> libraries</c><00:26:40.070><c> for</c><00:26:40.340><c> your</c><00:26:40.519><c> code</c>

00:26:40.790 --> 00:26:40.800 align:start position:0%
building for the libraries for your code
 

00:26:40.800 --> 00:26:42.770 align:start position:0%
building for the libraries for your code
go<00:26:41.580><c> ahead</c><00:26:41.790><c> and</c><00:26:41.940><c> use</c><00:26:42.060><c> those</c><00:26:42.270><c> we</c><00:26:42.480><c> are</c><00:26:42.600><c> not</c>

00:26:42.770 --> 00:26:42.780 align:start position:0%
go ahead and use those we are not
 

00:26:42.780 --> 00:26:44.960 align:start position:0%
go ahead and use those we are not
pushing<00:26:43.050><c> everybody</c><00:26:43.410><c> to</c><00:26:43.770><c> use</c><00:26:43.980><c> intend</c><00:26:44.790><c> bit</c>

00:26:44.960 --> 00:26:44.970 align:start position:0%
pushing everybody to use intend bit
 

00:26:44.970 --> 00:26:46.790 align:start position:0%
pushing everybody to use intend bit
flags<00:26:45.240><c> everywhere</c><00:26:45.630><c> to</c><00:26:45.960><c> optimize</c><00:26:46.410><c> every</c>

00:26:46.790 --> 00:26:46.800 align:start position:0%
flags everywhere to optimize every
 

00:26:46.800 --> 00:26:49.660 align:start position:0%
flags everywhere to optimize every
little<00:26:47.070><c> CPU</c><00:26:47.550><c> cycle</c><00:26:47.970><c> and</c><00:26:48.150><c> memory</c><00:26:48.870><c> allocation</c>

00:26:49.660 --> 00:26:49.670 align:start position:0%
little CPU cycle and memory allocation
 

00:26:49.670 --> 00:26:52.160 align:start position:0%
little CPU cycle and memory allocation
instead<00:26:50.670><c> go</c><00:26:51.180><c> ahead</c><00:26:51.330><c> and</c><00:26:51.450><c> allocate</c><00:26:51.630><c> when</c><00:26:52.050><c> you</c>

00:26:52.160 --> 00:26:52.170 align:start position:0%
instead go ahead and allocate when you
 

00:26:52.170 --> 00:26:54.980 align:start position:0%
instead go ahead and allocate when you
need<00:26:52.350><c> to</c><00:26:52.470><c> for</c><00:26:52.740><c> use</c><00:26:52.950><c> case</c><00:26:53.220><c> however</c><00:26:53.490><c> GC</c><00:26:54.420><c> is</c><00:26:54.660><c> still</c>

00:26:54.980 --> 00:26:54.990 align:start position:0%
need to for use case however GC is still
 

00:26:54.990 --> 00:26:56.630 align:start position:0%
need to for use case however GC is still
overheads<00:26:55.590><c> and</c><00:26:55.950><c> we're</c><00:26:56.100><c> going</c><00:26:56.220><c> to</c><00:26:56.310><c> look</c><00:26:56.400><c> at</c><00:26:56.550><c> the</c>

00:26:56.630 --> 00:26:56.640 align:start position:0%
overheads and we're going to look at the
 

00:26:56.640 --> 00:26:59.690 align:start position:0%
overheads and we're going to look at the
demo<00:26:56.880><c> that</c><00:26:57.060><c> showcases</c><00:26:57.540><c> that</c><00:26:57.690><c> yep</c><00:26:58.500><c> and</c><00:26:59.430><c> make</c>

00:26:59.690 --> 00:26:59.700 align:start position:0%
demo that showcases that yep and make
 

00:26:59.700 --> 00:27:02.570 align:start position:0%
demo that showcases that yep and make
the<00:26:59.850><c> right</c><00:27:00.000><c> choices</c><00:27:00.270><c> for</c><00:27:00.720><c> you</c><00:27:00.960><c> and</c><00:27:01.170><c> in</c><00:27:02.100><c> general</c>

00:27:02.570 --> 00:27:02.580 align:start position:0%
the right choices for you and in general
 

00:27:02.580 --> 00:27:04.820 align:start position:0%
the right choices for you and in general
the<00:27:02.730><c> framework</c><00:27:03.120><c> programmers</c><00:27:03.930><c> we</c><00:27:04.200><c> still</c><00:27:04.530><c> are</c>

00:27:04.820 --> 00:27:04.830 align:start position:0%
the framework programmers we still are
 

00:27:04.830 --> 00:27:06.800 align:start position:0%
the framework programmers we still are
your<00:27:05.160><c> inner</c><00:27:05.460><c> loop</c><00:27:05.700><c> so</c><00:27:05.910><c> we</c><00:27:06.060><c> still</c><00:27:06.300><c> take</c><00:27:06.510><c> the</c><00:27:06.660><c> old</c>

00:27:06.800 --> 00:27:06.810 align:start position:0%
your inner loop so we still take the old
 

00:27:06.810 --> 00:27:09.200 align:start position:0%
your inner loop so we still take the old
practices<00:27:07.410><c> because</c><00:27:07.860><c> why</c><00:27:08.430><c> would</c><00:27:08.640><c> we</c><00:27:08.790><c> allocate</c>

00:27:09.200 --> 00:27:09.210 align:start position:0%
practices because why would we allocate
 

00:27:09.210 --> 00:27:10.910 align:start position:0%
practices because why would we allocate
if<00:27:09.330><c> we</c><00:27:09.480><c> didn't</c><00:27:09.780><c> need</c><00:27:09.930><c> to</c><00:27:09.990><c> if</c><00:27:10.320><c> we</c><00:27:10.440><c> can</c><00:27:10.590><c> make</c><00:27:10.740><c> your</c>

00:27:10.910 --> 00:27:10.920 align:start position:0%
if we didn't need to if we can make your
 

00:27:10.920 --> 00:27:13.370 align:start position:0%
if we didn't need to if we can make your
inner<00:27:11.190><c> loop</c><00:27:11.400><c> faster</c><00:27:11.880><c> so</c><00:27:12.630><c> be</c><00:27:12.810><c> aware</c><00:27:13.020><c> the</c><00:27:13.230><c> inner</c>

00:27:13.370 --> 00:27:13.380 align:start position:0%
inner loop faster so be aware the inner
 

00:27:13.380 --> 00:27:15.080 align:start position:0%
inner loop faster so be aware the inner
loop<00:27:13.590><c> situations</c><00:27:14.190><c> otherwise</c><00:27:14.580><c> do</c><00:27:14.850><c> the</c><00:27:14.940><c> right</c>

00:27:15.080 --> 00:27:15.090 align:start position:0%
loop situations otherwise do the right
 

00:27:15.090 --> 00:27:16.120 align:start position:0%
loop situations otherwise do the right
thing<00:27:15.270><c> for</c><00:27:15.450><c> your</c><00:27:15.570><c> code</c>

00:27:16.120 --> 00:27:16.130 align:start position:0%
thing for your code
 

00:27:16.130 --> 00:27:20.600 align:start position:0%
thing for your code
alright<00:27:17.130><c> so</c><00:27:17.750><c> wrote</c><00:27:18.750><c> a</c><00:27:18.780><c> simple</c><00:27:19.590><c> application</c><00:27:19.920><c> to</c>

00:27:20.600 --> 00:27:20.610 align:start position:0%
alright so wrote a simple application to
 

00:27:20.610 --> 00:27:23.240 align:start position:0%
alright so wrote a simple application to
sort<00:27:21.480><c> of</c><00:27:21.570><c> showcase</c><00:27:21.990><c> some</c><00:27:22.590><c> of</c><00:27:22.620><c> the</c><00:27:22.740><c> jank</c><00:27:23.010><c> stuff</c>

00:27:23.240 --> 00:27:23.250 align:start position:0%
sort of showcase some of the jank stuff
 

00:27:23.250 --> 00:27:24.800 align:start position:0%
sort of showcase some of the jank stuff
that<00:27:23.400><c> you</c><00:27:23.490><c> can</c><00:27:23.670><c> see</c><00:27:23.700><c> because</c><00:27:24.030><c> of</c><00:27:24.180><c> allocations</c>

00:27:24.800 --> 00:27:24.810 align:start position:0%
that you can see because of allocations
 

00:27:24.810 --> 00:27:27.470 align:start position:0%
that you can see because of allocations
and<00:27:24.990><c> collections</c><00:27:25.470><c> in</c><00:27:25.770><c> this</c><00:27:26.360><c> during</c><00:27:27.360><c> the</c>

00:27:27.470 --> 00:27:27.480 align:start position:0%
and collections in this during the
 

00:27:27.480 --> 00:27:29.600 align:start position:0%
and collections in this during the
ondraw<00:27:27.930><c> I</c><00:27:28.170><c> would</c><00:27:28.290><c> call</c><00:27:28.500><c> out</c><00:27:28.680><c> to</c><00:27:28.950><c> a</c><00:27:29.160><c> method</c><00:27:29.580><c> to</c>

00:27:29.600 --> 00:27:29.610 align:start position:0%
ondraw I would call out to a method to
 

00:27:29.610 --> 00:27:32.630 align:start position:0%
ondraw I would call out to a method to
run<00:27:30.240><c> some</c><00:27:30.540><c> stuff</c><00:27:30.840><c> and</c><00:27:31.140><c> and</c><00:27:31.860><c> in</c><00:27:32.220><c> this</c><00:27:32.430><c> case</c>

00:27:32.630 --> 00:27:32.640 align:start position:0%
run some stuff and and in this case
 

00:27:32.640 --> 00:27:34.370 align:start position:0%
run some stuff and and in this case
we're<00:27:32.880><c> gonna</c><00:27:32.940><c> test</c><00:27:33.300><c> Auto</c><00:27:33.570><c> boxing's</c><00:27:34.110><c> so</c><00:27:34.260><c> we</c>

00:27:34.370 --> 00:27:34.380 align:start position:0%
we're gonna test Auto boxing's so we
 

00:27:34.380 --> 00:27:35.960 align:start position:0%
we're gonna test Auto boxing's so we
have<00:27:34.500><c> an</c><00:27:34.590><c> array</c><00:27:34.830><c> of</c><00:27:34.860><c> a</c><00:27:35.220><c> hundred</c><00:27:35.550><c> thousand</c>

00:27:35.960 --> 00:27:35.970 align:start position:0%
have an array of a hundred thousand
 

00:27:35.970 --> 00:27:38.810 align:start position:0%
have an array of a hundred thousand
float<00:27:36.240><c> objects</c><00:27:36.720><c> capital</c><00:27:37.470><c> F</c><00:27:37.620><c> float</c><00:27:37.920><c> objects</c><00:27:38.370><c> so</c>

00:27:38.810 --> 00:27:38.820 align:start position:0%
float objects capital F float objects so
 

00:27:38.820 --> 00:27:40.430 align:start position:0%
float objects capital F float objects so
it's<00:27:39.000><c> not</c><00:27:39.120><c> just</c><00:27:39.360><c> a</c><00:27:39.450><c> primitive</c><00:27:39.840><c> float</c><00:27:40.080><c> instead</c>

00:27:40.430 --> 00:27:40.440 align:start position:0%
it's not just a primitive float instead
 

00:27:40.440 --> 00:27:41.810 align:start position:0%
it's not just a primitive float instead
it's<00:27:40.740><c> the</c><00:27:40.890><c> capital</c><00:27:41.070><c> F</c><00:27:41.370><c> so</c><00:27:41.430><c> we're</c><00:27:41.550><c> gonna</c><00:27:41.640><c> be</c>

00:27:41.810 --> 00:27:41.820 align:start position:0%
it's the capital F so we're gonna be
 

00:27:41.820 --> 00:27:43.280 align:start position:0%
it's the capital F so we're gonna be
allocating<00:27:42.360><c> these</c><00:27:42.510><c> objects</c><00:27:42.870><c> on</c><00:27:43.020><c> the</c><00:27:43.110><c> fly</c>

00:27:43.280 --> 00:27:43.290 align:start position:0%
allocating these objects on the fly
 

00:27:43.290 --> 00:27:45.410 align:start position:0%
allocating these objects on the fly
here's<00:27:43.980><c> what</c><00:27:44.190><c> the</c><00:27:44.340><c> the</c><00:27:44.670><c> method</c><00:27:44.880><c> looks</c><00:27:45.240><c> like</c>

00:27:45.410 --> 00:27:45.420 align:start position:0%
here's what the the method looks like
 

00:27:45.420 --> 00:27:46.940 align:start position:0%
here's what the the method looks like
that's<00:27:45.630><c> gonna</c><00:27:45.750><c> run</c><00:27:46.050><c> on</c><00:27:46.200><c> every</c><00:27:46.350><c> single</c><00:27:46.740><c> frame</c>

00:27:46.940 --> 00:27:46.950 align:start position:0%
that's gonna run on every single frame
 

00:27:46.950 --> 00:27:48.830 align:start position:0%
that's gonna run on every single frame
it's<00:27:47.430><c> gonna</c><00:27:47.520><c> walk</c><00:27:47.790><c> the</c><00:27:47.970><c> entire</c><00:27:48.090><c> length</c><00:27:48.510><c> of</c><00:27:48.720><c> the</c>

00:27:48.830 --> 00:27:48.840 align:start position:0%
it's gonna walk the entire length of the
 

00:27:48.840 --> 00:27:50.630 align:start position:0%
it's gonna walk the entire length of the
array<00:27:49.080><c> and</c><00:27:49.410><c> take</c><00:27:49.620><c> a</c><00:27:49.650><c> primitive</c><00:27:50.130><c> float</c><00:27:50.400><c> and</c>

00:27:50.630 --> 00:27:50.640 align:start position:0%
array and take a primitive float and
 

00:27:50.640 --> 00:27:52.280 align:start position:0%
array and take a primitive float and
stuff<00:27:51.210><c> it</c><00:27:51.360><c> into</c><00:27:51.540><c> the</c><00:27:51.630><c> array</c><00:27:51.810><c> which</c><00:27:52.050><c> is</c><00:27:52.170><c> going</c>

00:27:52.280 --> 00:27:52.290 align:start position:0%
stuff it into the array which is going
 

00:27:52.290 --> 00:27:53.900 align:start position:0%
stuff it into the array which is going
to<00:27:52.350><c> cause</c><00:27:52.590><c> an</c><00:27:52.800><c> auto</c><00:27:53.010><c> box</c><00:27:53.340><c> so</c><00:27:53.520><c> these</c><00:27:53.640><c> little</c>

00:27:53.900 --> 00:27:53.910 align:start position:0%
to cause an auto box so these little
 

00:27:53.910 --> 00:27:56.240 align:start position:0%
to cause an auto box so these little
tiny<00:27:54.440><c> allocations</c><00:27:55.440><c> are</c><00:27:55.560><c> gonna</c><00:27:55.650><c> go</c><00:27:55.860><c> into</c><00:27:56.040><c> this</c>

00:27:56.240 --> 00:27:56.250 align:start position:0%
tiny allocations are gonna go into this
 

00:27:56.250 --> 00:27:59.450 align:start position:0%
tiny allocations are gonna go into this
array<00:27:56.520><c> a</c><00:27:57.270><c> lot</c><00:27:57.720><c> of</c><00:27:57.870><c> them</c><00:27:58.020><c> over</c><00:27:58.170><c> time</c><00:27:58.370><c> because</c><00:27:59.370><c> of</c>

00:27:59.450 --> 00:27:59.460 align:start position:0%
array a lot of them over time because of
 

00:27:59.460 --> 00:28:01.190 align:start position:0%
array a lot of them over time because of
the<00:27:59.550><c> auto</c><00:27:59.730><c> boxing</c><00:28:00.210><c> thing</c><00:28:00.690><c> it's</c><00:28:00.960><c> going</c><00:28:01.140><c> to</c>

00:28:01.190 --> 00:28:01.200 align:start position:0%
the auto boxing thing it's going to
 

00:28:01.200 --> 00:28:02.780 align:start position:0%
the auto boxing thing it's going to
cause<00:28:01.410><c> a</c><00:28:01.440><c> bunch</c><00:28:01.860><c> of</c><00:28:01.950><c> allocations</c><00:28:02.550><c> and</c><00:28:02.670><c> then</c>

00:28:02.780 --> 00:28:02.790 align:start position:0%
cause a bunch of allocations and then
 

00:28:02.790 --> 00:28:03.980 align:start position:0%
cause a bunch of allocations and then
we're<00:28:02.880><c> gonna</c><00:28:02.970><c> need</c><00:28:03.210><c> to</c><00:28:03.330><c> collect</c><00:28:03.480><c> them</c><00:28:03.780><c> over</c>

00:28:03.980 --> 00:28:03.990 align:start position:0%
we're gonna need to collect them over
 

00:28:03.990 --> 00:28:07.280 align:start position:0%
we're gonna need to collect them over
time<00:28:04.170><c> as</c><00:28:04.320><c> well</c><00:28:04.470><c> so</c><00:28:05.600><c> if</c><00:28:06.600><c> we</c><00:28:06.690><c> take</c><00:28:06.840><c> a</c><00:28:06.900><c> look</c><00:28:07.050><c> at</c><00:28:07.200><c> the</c>

00:28:07.280 --> 00:28:07.290 align:start position:0%
time as well so if we take a look at the
 

00:28:07.290 --> 00:28:09.880 align:start position:0%
time as well so if we take a look at the
demo<00:28:07.740><c> why</c><00:28:08.100><c> don't</c><00:28:08.220><c> we</c><00:28:08.280><c> pop</c><00:28:08.520><c> out</c><00:28:08.760><c> all</c><00:28:09.120><c> right</c><00:28:09.270><c> so</c>

00:28:09.880 --> 00:28:09.890 align:start position:0%
demo why don't we pop out all right so
 

00:28:09.890 --> 00:28:13.580 align:start position:0%
demo why don't we pop out all right so
we're<00:28:10.890><c> running</c><00:28:11.010><c> on</c><00:28:11.400><c> K</c><00:28:11.820><c> here</c><00:28:12.290><c> we</c><00:28:13.290><c> run</c><00:28:13.440><c> this</c>

00:28:13.580 --> 00:28:13.590 align:start position:0%
we're running on K here we run this
 

00:28:13.590 --> 00:28:17.150 align:start position:0%
we're running on K here we run this
animation<00:28:14.000><c> we</c><00:28:15.000><c> should</c><00:28:15.210><c> take</c><00:28:15.360><c> a</c><00:28:15.390><c> look</c><00:28:15.540><c> at</c><00:28:16.160><c> the</c>

00:28:17.150 --> 00:28:17.160 align:start position:0%
animation we should take a look at the
 

00:28:17.160 --> 00:28:21.440 align:start position:0%
animation we should take a look at the
log<00:28:17.460><c> here</c><00:28:18.090><c> and</c><00:28:19.340><c> we</c><00:28:20.340><c> run</c><00:28:20.550><c> the</c><00:28:20.640><c> auto</c><00:28:20.850><c> box</c><00:28:21.090><c> and</c><00:28:21.360><c> now</c>

00:28:21.440 --> 00:28:21.450 align:start position:0%
log here and we run the auto box and now
 

00:28:21.450 --> 00:28:22.910 align:start position:0%
log here and we run the auto box and now
we're<00:28:21.630><c> calling</c><00:28:21.960><c> out</c><00:28:22.050><c> to</c><00:28:22.170><c> that</c><00:28:22.290><c> method</c><00:28:22.500><c> and</c><00:28:22.800><c> the</c>

00:28:22.910 --> 00:28:22.920 align:start position:0%
we're calling out to that method and the
 

00:28:22.920 --> 00:28:24.830 align:start position:0%
we're calling out to that method and the
important<00:28:23.340><c> thing</c><00:28:23.550><c> here</c><00:28:23.580><c> if</c><00:28:24.330><c> you</c><00:28:24.450><c> look</c><00:28:24.660><c> at</c><00:28:24.750><c> the</c>

00:28:24.830 --> 00:28:24.840 align:start position:0%
important thing here if you look at the
 

00:28:24.840 --> 00:28:31.240 align:start position:0%
important thing here if you look at the
log<00:28:28.310><c> so</c><00:28:29.310><c> we're</c><00:28:29.460><c> taking</c><00:28:29.640><c> allocation</c><00:28:30.570><c> times</c><00:28:30.840><c> of</c>

00:28:31.240 --> 00:28:31.250 align:start position:0%
log so we're taking allocation times of
 

00:28:31.250 --> 00:28:34.820 align:start position:0%
log so we're taking allocation times of
2824<00:28:32.250><c> sort</c><00:28:33.060><c> of</c><00:28:33.150><c> in</c><00:28:33.360><c> general</c><00:28:33.930><c> kind</c><00:28:34.080><c> of</c><00:28:34.200><c> high</c><00:28:34.350><c> 20s</c>

00:28:34.820 --> 00:28:34.830 align:start position:0%
2824 sort of in general kind of high 20s
 

00:28:34.830 --> 00:28:36.650 align:start position:0%
2824 sort of in general kind of high 20s
milliseconds<00:28:35.700><c> and</c><00:28:35.790><c> we're</c><00:28:35.970><c> causing</c><00:28:36.300><c> a</c><00:28:36.390><c> lot</c><00:28:36.630><c> of</c>

00:28:36.650 --> 00:28:36.660 align:start position:0%
milliseconds and we're causing a lot of
 

00:28:36.660 --> 00:28:38.900 align:start position:0%
milliseconds and we're causing a lot of
GC<00:28:37.140><c> for</c><00:28:37.350><c> Alex</c><00:28:37.680><c> because</c><00:28:37.950><c> that</c><00:28:38.190><c> is</c><00:28:38.340><c> what</c><00:28:38.550><c> happens</c>

00:28:38.900 --> 00:28:38.910 align:start position:0%
GC for Alex because that is what happens
 

00:28:38.910 --> 00:28:41.750 align:start position:0%
GC for Alex because that is what happens
when<00:28:39.870><c> you</c><00:28:40.020><c> do</c><00:28:40.200><c> this</c><00:28:40.380><c> thing</c><00:28:40.590><c> so</c><00:28:40.830><c> we</c><00:28:41.430><c> can</c><00:28:41.460><c> pause</c>

00:28:41.750 --> 00:28:41.760 align:start position:0%
when you do this thing so we can pause
 

00:28:41.760 --> 00:28:43.370 align:start position:0%
when you do this thing so we can pause
this<00:28:42.030><c> one</c><00:28:42.180><c> but</c><00:28:42.390><c> we</c><00:28:42.480><c> can</c><00:28:42.600><c> pop</c><00:28:42.810><c> over</c><00:28:43.110><c> and</c><00:28:43.200><c> see</c>

00:28:43.370 --> 00:28:43.380 align:start position:0%
this one but we can pop over and see
 

00:28:43.380 --> 00:28:44.630 align:start position:0%
this one but we can pop over and see
what<00:28:43.500><c> this</c><00:28:43.590><c> looks</c><00:28:43.740><c> like</c><00:28:43.980><c> I</c><00:28:44.100><c> know</c><00:28:44.190><c> oh</c><00:28:44.340><c> we</c><00:28:44.550><c> can</c>

00:28:44.630 --> 00:28:44.640 align:start position:0%
what this looks like I know oh we can
 

00:28:44.640 --> 00:28:46.880 align:start position:0%
what this looks like I know oh we can
run<00:28:44.790><c> the</c><00:28:44.880><c> animation</c><00:28:45.030><c> here</c><00:28:45.660><c> let</c><00:28:46.350><c> me</c><00:28:46.410><c> enable</c><00:28:46.650><c> the</c>

00:28:46.880 --> 00:28:46.890 align:start position:0%
run the animation here let me enable the
 

00:28:46.890 --> 00:28:52.670 align:start position:0%
run the animation here let me enable the
log<00:28:47.100><c> for</c><00:28:47.400><c> o</c><00:28:49.880><c> we'll</c><00:28:50.880><c> do</c><00:28:51.030><c> the</c><00:28:51.150><c> auto</c><00:28:51.330><c> boxing</c><00:28:51.870><c> and</c>

00:28:52.670 --> 00:28:52.680 align:start position:0%
log for o we'll do the auto boxing and
 

00:28:52.680 --> 00:28:54.050 align:start position:0%
log for o we'll do the auto boxing and
now<00:28:52.770><c> we</c><00:28:52.830><c> can</c><00:28:53.010><c> zoom</c><00:28:53.190><c> in</c><00:28:53.340><c> and</c><00:28:53.460><c> this</c><00:28:53.610><c> and</c><00:28:53.850><c> you</c><00:28:53.940><c> will</c>

00:28:54.050 --> 00:28:54.060 align:start position:0%
now we can zoom in and this and you will
 

00:28:54.060 --> 00:28:54.730 align:start position:0%
now we can zoom in and this and you will
notice<00:28:54.330><c> a</c><00:28:54.390><c> couple</c>

00:28:54.730 --> 00:28:54.740 align:start position:0%
notice a couple
 

00:28:54.740 --> 00:28:56.860 align:start position:0%
notice a couple
one<00:28:55.130><c> is</c><00:28:55.370><c> that</c><00:28:55.910><c> the</c><00:28:56.030><c> allocation</c><00:28:56.300><c> times</c>

00:28:56.860 --> 00:28:56.870 align:start position:0%
one is that the allocation times
 

00:28:56.870 --> 00:28:59.500 align:start position:0%
one is that the allocation times
obviously<00:28:57.380><c> are</c><00:28:57.500><c> much</c><00:28:58.120><c> less</c><00:28:59.120><c> than</c><00:28:59.330><c> they</c><00:28:59.450><c> were</c>

00:28:59.500 --> 00:28:59.510 align:start position:0%
obviously are much less than they were
 

00:28:59.510 --> 00:29:01.299 align:start position:0%
obviously are much less than they were
before<00:28:59.720><c> and</c><00:29:00.140><c> also</c><00:29:00.290><c> more</c><00:29:00.710><c> importantly</c><00:29:01.130><c> there</c>

00:29:01.299 --> 00:29:01.309 align:start position:0%
before and also more importantly there
 

00:29:01.309 --> 00:29:03.549 align:start position:0%
before and also more importantly there
are<00:29:01.429><c> no</c><00:29:01.610><c> GC</c><00:29:02.000><c> for</c><00:29:02.210><c> Alex</c><00:29:02.510><c> we</c><00:29:02.929><c> allocate</c><00:29:03.380><c> we</c>

00:29:03.549 --> 00:29:03.559 align:start position:0%
are no GC for Alex we allocate we
 

00:29:03.559 --> 00:29:05.049 align:start position:0%
are no GC for Alex we allocate we
collect<00:29:03.950><c> but</c><00:29:04.190><c> we're</c><00:29:04.309><c> never</c><00:29:04.429><c> triggering</c><00:29:05.030><c> that</c>

00:29:05.049 --> 00:29:05.059 align:start position:0%
collect but we're never triggering that
 

00:29:05.059 --> 00:29:07.480 align:start position:0%
collect but we're never triggering that
that<00:29:05.510><c> jank</c><00:29:05.870><c> inducing</c><00:29:06.410><c> GC</c><00:29:06.800><c> for</c><00:29:06.980><c> alloc</c><00:29:07.040><c> in</c><00:29:07.370><c> this</c>

00:29:07.480 --> 00:29:07.490 align:start position:0%
that jank inducing GC for alloc in this
 

00:29:07.490 --> 00:29:12.820 align:start position:0%
that jank inducing GC for alloc in this
case<00:29:10.300><c> there</c><00:29:11.300><c> is</c><00:29:11.450><c> a</c><00:29:11.780><c> similar</c><00:29:12.350><c> test</c><00:29:12.620><c> that</c><00:29:12.800><c> I</c>

00:29:12.820 --> 00:29:12.830 align:start position:0%
case there is a similar test that I
 

00:29:12.830 --> 00:29:15.790 align:start position:0%
case there is a similar test that I
wrote<00:29:13.040><c> for</c><00:29:13.070><c> bitmaps</c><00:29:14.050><c> so</c><00:29:15.050><c> we're</c><00:29:15.290><c> running</c><00:29:15.410><c> along</c>

00:29:15.790 --> 00:29:15.800 align:start position:0%
wrote for bitmaps so we're running along
 

00:29:15.800 --> 00:29:21.100 align:start position:0%
wrote for bitmaps so we're running along
let's<00:29:16.429><c> take</c><00:29:16.610><c> a</c><00:29:16.640><c> look</c><00:29:16.840><c> at</c><00:29:17.840><c> the</c><00:29:18.410><c> KitKat</c><00:29:19.309><c> log</c><00:29:20.110><c> so</c>

00:29:21.100 --> 00:29:21.110 align:start position:0%
let's take a look at the KitKat log so
 

00:29:21.110 --> 00:29:23.590 align:start position:0%
let's take a look at the KitKat log so
in<00:29:21.470><c> this</c><00:29:21.920><c> one</c><00:29:22.130><c> you're</c><00:29:22.640><c> allocating</c><00:29:23.030><c> bitmaps</c>

00:29:23.590 --> 00:29:23.600 align:start position:0%
in this one you're allocating bitmaps
 

00:29:23.600 --> 00:29:25.720 align:start position:0%
in this one you're allocating bitmaps
and<00:29:24.380><c> again</c><00:29:24.710><c> we're</c><00:29:24.920><c> getting</c><00:29:25.040><c> a</c><00:29:25.220><c> lot</c><00:29:25.309><c> of</c><00:29:25.370><c> jank</c>

00:29:25.720 --> 00:29:25.730 align:start position:0%
and again we're getting a lot of jank
 

00:29:25.730 --> 00:29:28.090 align:start position:0%
and again we're getting a lot of jank
there<00:29:26.000><c> if</c><00:29:26.510><c> we</c><00:29:26.720><c> zoom</c><00:29:26.929><c> in</c><00:29:27.080><c> on</c><00:29:27.170><c> the</c><00:29:27.230><c> log</c><00:29:27.500><c> you're</c>

00:29:28.090 --> 00:29:28.100 align:start position:0%
there if we zoom in on the log you're
 

00:29:28.100 --> 00:29:29.650 align:start position:0%
there if we zoom in on the log you're
seeing<00:29:28.309><c> the</c><00:29:28.429><c> allocations</c><00:29:29.059><c> for</c><00:29:29.270><c> these</c><00:29:29.360><c> large</c>

00:29:29.650 --> 00:29:29.660 align:start position:0%
seeing the allocations for these large
 

00:29:29.660 --> 00:29:31.630 align:start position:0%
seeing the allocations for these large
objects<00:29:30.110><c> it's</c><00:29:30.290><c> a</c><00:29:30.410><c> thousand</c><00:29:31.070><c> by</c><00:29:31.130><c> a</c><00:29:31.160><c> thousand</c>

00:29:31.630 --> 00:29:31.640 align:start position:0%
objects it's a thousand by a thousand
 

00:29:31.640 --> 00:29:34.000 align:start position:0%
objects it's a thousand by a thousand
bitmap<00:29:31.940><c> you</c><00:29:32.450><c> take</c><00:29:32.630><c> in</c><00:29:32.750><c> 1213</c><00:29:33.440><c> milliseconds</c>

00:29:34.000 --> 00:29:34.010 align:start position:0%
bitmap you take in 1213 milliseconds
 

00:29:34.010 --> 00:29:35.380 align:start position:0%
bitmap you take in 1213 milliseconds
each<00:29:34.160><c> time</c><00:29:34.460><c> and</c><00:29:34.760><c> you're</c><00:29:35.090><c> constantly</c>

00:29:35.380 --> 00:29:35.390 align:start position:0%
each time and you're constantly
 

00:29:35.390 --> 00:29:37.630 align:start position:0%
each time and you're constantly
triggering<00:29:36.170><c> these</c><00:29:36.320><c> GC</c><00:29:36.800><c> for</c><00:29:36.980><c> Alex</c><00:29:37.280><c> because</c><00:29:37.490><c> you</c>

00:29:37.630 --> 00:29:37.640 align:start position:0%
triggering these GC for Alex because you
 

00:29:37.640 --> 00:29:39.460 align:start position:0%
triggering these GC for Alex because you
need<00:29:37.790><c> to</c><00:29:37.880><c> collect</c><00:29:38.030><c> the</c><00:29:38.300><c> old</c><00:29:38.420><c> memory</c><00:29:38.750><c> to</c><00:29:38.900><c> make</c>

00:29:39.460 --> 00:29:39.470 align:start position:0%
need to collect the old memory to make
 

00:29:39.470 --> 00:29:43.030 align:start position:0%
need to collect the old memory to make
room<00:29:39.710><c> for</c><00:29:39.740><c> the</c><00:29:39.980><c> new</c><00:29:40.130><c> one</c><00:29:41.200><c> so</c><00:29:42.200><c> we</c><00:29:42.350><c> pop</c><00:29:42.679><c> over</c><00:29:43.010><c> to</c>

00:29:43.030 --> 00:29:43.040 align:start position:0%
room for the new one so we pop over to
 

00:29:43.040 --> 00:29:47.290 align:start position:0%
room for the new one so we pop over to
the<00:29:43.820><c> O</c><00:29:43.850><c> log</c><00:29:44.470><c> let's</c><00:29:45.470><c> stop</c><00:29:45.770><c> this</c><00:29:46.040><c> one</c><00:29:46.270><c> go</c><00:29:47.270><c> over</c>

00:29:47.290 --> 00:29:47.300 align:start position:0%
the O log let's stop this one go over
 

00:29:47.300 --> 00:29:50.350 align:start position:0%
the O log let's stop this one go over
here<00:29:47.809><c> run</c><00:29:48.530><c> the</c><00:29:48.620><c> animation</c><00:29:48.880><c> do</c><00:29:49.880><c> the</c><00:29:50.030><c> bitmap</c>

00:29:50.350 --> 00:29:50.360 align:start position:0%
here run the animation do the bitmap
 

00:29:50.360 --> 00:29:52.840 align:start position:0%
here run the animation do the bitmap
test<00:29:50.720><c> and</c><00:29:51.020><c> now</c><00:29:51.590><c> we've</c><00:29:51.740><c> got</c><00:29:51.920><c> allocation</c><00:29:52.580><c> times</c>

00:29:52.840 --> 00:29:52.850 align:start position:0%
test and now we've got allocation times
 

00:29:52.850 --> 00:29:56.260 align:start position:0%
test and now we've got allocation times
of<00:29:53.120><c> zero</c><00:29:54.080><c> one</c><00:29:54.860><c> because</c><00:29:55.580><c> again</c><00:29:55.610><c> all</c><00:29:56.059><c> what's</c>

00:29:56.260 --> 00:29:56.270 align:start position:0%
of zero one because again all what's
 

00:29:56.270 --> 00:29:57.910 align:start position:0%
of zero one because again all what's
doing<00:29:56.510><c> is</c><00:29:56.600><c> am</c><00:29:56.720><c> Alex</c><00:29:57.140><c> just</c><00:29:57.350><c> shoving</c><00:29:57.710><c> it</c><00:29:57.830><c> into</c>

00:29:57.910 --> 00:29:57.920 align:start position:0%
doing is am Alex just shoving it into
 

00:29:57.920 --> 00:29:59.980 align:start position:0%
doing is am Alex just shoving it into
the<00:29:58.070><c> large</c><00:29:58.280><c> object</c><00:29:58.490><c> heap</c><00:29:58.910><c> very</c><00:29:59.540><c> easy</c><00:29:59.780><c> to</c>

00:29:59.980 --> 00:29:59.990 align:start position:0%
the large object heap very easy to
 

00:29:59.990 --> 00:30:01.600 align:start position:0%
the large object heap very easy to
allocate<00:30:00.440><c> very</c><00:30:00.650><c> easy</c><00:30:00.830><c> to</c><00:30:01.010><c> collect</c><00:30:01.340><c> when</c><00:30:01.490><c> it</c>

00:30:01.600 --> 00:30:01.610 align:start position:0%
allocate very easy to collect when it
 

00:30:01.610 --> 00:30:09.669 align:start position:0%
allocate very easy to collect when it
needs<00:30:01.790><c> it</c><00:30:03.520><c> stump</c><00:30:04.520><c> for</c><00:30:04.700><c> that</c><00:30:07.360><c> alright</c>

00:30:09.669 --> 00:30:09.679 align:start position:0%
needs it stump for that alright
 

00:30:09.679 --> 00:30:12.010 align:start position:0%
needs it stump for that alright
that<00:30:10.220><c> just</c><00:30:10.760><c> duplicates</c><00:30:11.300><c> what</c><00:30:11.450><c> I</c><00:30:11.510><c> just</c><00:30:11.780><c> said</c>

00:30:12.010 --> 00:30:12.020 align:start position:0%
that just duplicates what I just said
 

00:30:12.020 --> 00:30:14.380 align:start position:0%
that just duplicates what I just said
here's<00:30:12.590><c> the</c><00:30:12.740><c> bitmap</c><00:30:13.070><c> test</c><00:30:13.429><c> very</c><00:30:13.820><c> simple</c><00:30:14.210><c> it's</c>

00:30:14.380 --> 00:30:14.390 align:start position:0%
here's the bitmap test very simple it's
 

00:30:14.390 --> 00:30:16.840 align:start position:0%
here's the bitmap test very simple it's
just<00:30:14.600><c> walking</c><00:30:14.809><c> through</c><00:30:15.020><c> every</c><00:30:15.679><c> frame</c><00:30:16.490><c> it's</c>

00:30:16.840 --> 00:30:16.850 align:start position:0%
just walking through every frame it's
 

00:30:16.850 --> 00:30:18.880 align:start position:0%
just walking through every frame it's
allocating<00:30:17.510><c> a</c><00:30:17.540><c> thousand</c><00:30:18.350><c> by</c><00:30:18.410><c> a</c><00:30:18.440><c> thousand</c>

00:30:18.880 --> 00:30:18.890 align:start position:0%
allocating a thousand by a thousand
 

00:30:18.890 --> 00:30:20.350 align:start position:0%
allocating a thousand by a thousand
bitmap<00:30:19.220><c> and</c><00:30:19.460><c> then</c><00:30:19.520><c> you</c><00:30:19.670><c> see</c><00:30:19.820><c> the</c><00:30:19.970><c> results</c><00:30:20.090><c> that</c>

00:30:20.350 --> 00:30:20.360 align:start position:0%
bitmap and then you see the results that
 

00:30:20.360 --> 00:30:25.390 align:start position:0%
bitmap and then you see the results that
we<00:30:20.510><c> did</c><00:30:21.910><c> all</c><00:30:22.910><c> right</c><00:30:22.970><c> so</c><00:30:23.330><c> this</c><00:30:23.750><c> is</c><00:30:24.020><c> a</c><00:30:24.530><c> demo</c><00:30:25.220><c> to</c>

00:30:25.390 --> 00:30:25.400 align:start position:0%
we did all right so this is a demo to
 

00:30:25.400 --> 00:30:27.010 align:start position:0%
we did all right so this is a demo to
basically<00:30:25.730><c> stress</c><00:30:26.210><c> tests</c><00:30:26.510><c> to</c><00:30:26.690><c> garbage</c>

00:30:27.010 --> 00:30:27.020 align:start position:0%
basically stress tests to garbage
 

00:30:27.020 --> 00:30:28.480 align:start position:0%
basically stress tests to garbage
collector<00:30:27.470><c> and</c><00:30:27.559><c> see</c><00:30:27.740><c> what</c><00:30:27.860><c> kind</c><00:30:28.040><c> of</c><00:30:28.100><c> overhead</c>

00:30:28.480 --> 00:30:28.490 align:start position:0%
collector and see what kind of overhead
 

00:30:28.490 --> 00:30:30.850 align:start position:0%
collector and see what kind of overhead
we<00:30:28.640><c> get</c><00:30:28.790><c> so</c><00:30:28.970><c> this</c><00:30:29.000><c> is</c><00:30:29.240><c> a</c><00:30:29.270><c> kind</c><00:30:30.020><c> of</c><00:30:30.050><c> a</c><00:30:30.200><c> red</c><00:30:30.440><c> tracer</c>

00:30:30.850 --> 00:30:30.860 align:start position:0%
we get so this is a kind of a red tracer
 

00:30:30.860 --> 00:30:32.560 align:start position:0%
we get so this is a kind of a red tracer
using<00:30:31.220><c> fancy</c><00:30:31.760><c> physically</c><00:30:32.330><c> based</c><00:30:32.450><c> rendering</c>

00:30:32.560 --> 00:30:32.570 align:start position:0%
using fancy physically based rendering
 

00:30:32.570 --> 00:30:34.720 align:start position:0%
using fancy physically based rendering
that<00:30:32.929><c> I</c><00:30:32.990><c> wrote</c><00:30:33.230><c> for</c><00:30:33.260><c> for</c><00:30:34.190><c> my</c><00:30:34.309><c> desktop</c>

00:30:34.720 --> 00:30:34.730 align:start position:0%
that I wrote for for my desktop
 

00:30:34.730 --> 00:30:36.310 align:start position:0%
that I wrote for for my desktop
intelligent<00:30:35.420><c> ray</c><00:30:35.510><c> tracer</c><00:30:35.900><c> because</c><00:30:36.080><c> it's</c><00:30:36.230><c> a</c>

00:30:36.310 --> 00:30:36.320 align:start position:0%
intelligent ray tracer because it's a
 

00:30:36.320 --> 00:30:38.580 align:start position:0%
intelligent ray tracer because it's a
checkerboard<00:30:36.860><c> with</c><00:30:36.950><c> spheres</c><00:30:37.460><c> that's</c><00:30:37.940><c> right</c>

00:30:38.580 --> 00:30:38.590 align:start position:0%
checkerboard with spheres that's right
 

00:30:38.590 --> 00:30:43.090 align:start position:0%
checkerboard with spheres that's right
and<00:30:39.590><c> I</c><00:30:40.190><c> ported</c><00:30:40.670><c> it</c><00:30:40.790><c> to</c><00:30:40.820><c> Android</c><00:30:41.450><c> and</c><00:30:42.260><c> I</c><00:30:42.860><c> won't</c>

00:30:43.090 --> 00:30:43.100 align:start position:0%
and I ported it to Android and I won't
 

00:30:43.100 --> 00:30:44.500 align:start position:0%
and I ported it to Android and I won't
run<00:30:43.550><c> you</c><00:30:43.670><c> through</c><00:30:43.730><c> the</c><00:30:43.940><c> code</c><00:30:44.150><c> because</c><00:30:44.330><c> there's</c>

00:30:44.500 --> 00:30:44.510 align:start position:0%
run you through the code because there's
 

00:30:44.510 --> 00:30:46.390 align:start position:0%
run you through the code because there's
hundreds<00:30:44.929><c> of</c><00:30:45.020><c> lines</c><00:30:45.230><c> of</c><00:30:45.440><c> code</c><00:30:45.890><c> so</c><00:30:45.920><c> this</c><00:30:46.280><c> is</c>

00:30:46.390 --> 00:30:46.400 align:start position:0%
hundreds of lines of code so this is
 

00:30:46.400 --> 00:30:48.370 align:start position:0%
hundreds of lines of code so this is
Scotland<00:30:46.610><c> but</c><00:30:47.360><c> the</c><00:30:47.690><c> trick</c><00:30:47.929><c> here</c><00:30:48.170><c> is</c><00:30:48.200><c> that</c>

00:30:48.370 --> 00:30:48.380 align:start position:0%
Scotland but the trick here is that
 

00:30:48.380 --> 00:30:50.140 align:start position:0%
Scotland but the trick here is that
these<00:30:48.679><c> does</c><00:30:48.950><c> all</c><00:30:49.130><c> water</c><00:30:49.400><c> allocation</c><00:30:49.970><c> so</c><00:30:50.090><c> I</c>

00:30:50.140 --> 00:30:50.150 align:start position:0%
these does all water allocation so I
 

00:30:50.150 --> 00:30:51.730 align:start position:0%
these does all water allocation so I
have<00:30:50.240><c> a</c><00:30:50.300><c> data</c><00:30:50.480><c> class</c><00:30:50.750><c> they</c><00:30:50.960><c> float</c><00:30:51.200><c> three</c><00:30:51.470><c> just</c>

00:30:51.730 --> 00:30:51.740 align:start position:0%
have a data class they float three just
 

00:30:51.740 --> 00:30:53.950 align:start position:0%
have a data class they float three just
contains<00:30:52.040><c> three</c><00:30:52.280><c> floats</c><00:30:52.580><c> XY</c><00:30:53.360><c> and</c><00:30:53.510><c> Z</c><00:30:53.630><c> those</c><00:30:53.840><c> are</c>

00:30:53.950 --> 00:30:53.960 align:start position:0%
contains three floats XY and Z those are
 

00:30:53.960 --> 00:30:55.780 align:start position:0%
contains three floats XY and Z those are
primitives<00:30:54.380><c> they're</c><00:30:54.890><c> not</c><00:30:55.040><c> the</c><00:30:55.220><c> the</c><00:30:55.520><c> the</c>

00:30:55.780 --> 00:30:55.790 align:start position:0%
primitives they're not the the the
 

00:30:55.790 --> 00:30:57.760 align:start position:0%
primitives they're not the the the
capital<00:30:56.150><c> F</c><00:30:56.420><c> objects</c><00:30:56.870><c> that</c><00:30:57.050><c> you</c><00:30:57.170><c> get</c><00:30:57.440><c> in</c><00:30:57.590><c> Java</c>

00:30:57.760 --> 00:30:57.770 align:start position:0%
capital F objects that you get in Java
 

00:30:57.770 --> 00:30:59.530 align:start position:0%
capital F objects that you get in Java
and<00:30:58.010><c> here</c><00:30:58.580><c> have</c><00:30:58.670><c> a</c><00:30:58.730><c> functions</c><00:30:59.179><c> just</c><00:30:59.390><c> an</c>

00:30:59.530 --> 00:30:59.540 align:start position:0%
and here have a functions just an
 

00:30:59.540 --> 00:31:01.030 align:start position:0%
and here have a functions just an
excerpt<00:30:59.870><c> of</c><00:31:00.110><c> those</c><00:31:00.320><c> hundreds</c><00:31:00.650><c> of</c><00:31:00.740><c> lines</c><00:31:00.890><c> of</c>

00:31:01.030 --> 00:31:01.040 align:start position:0%
excerpt of those hundreds of lines of
 

00:31:01.040 --> 00:31:02.560 align:start position:0%
excerpt of those hundreds of lines of
code<00:31:01.250><c> and</c><00:31:01.460><c> you</c><00:31:01.790><c> can</c><00:31:01.880><c> see</c><00:31:02.120><c> it's</c><00:31:02.240><c> just</c><00:31:02.390><c> doing</c>

00:31:02.560 --> 00:31:02.570 align:start position:0%
code and you can see it's just doing
 

00:31:02.570 --> 00:31:03.970 align:start position:0%
code and you can see it's just doing
math<00:31:02.809><c> on</c><00:31:03.080><c> the</c><00:31:03.200><c> objects</c><00:31:03.590><c> so</c><00:31:03.679><c> I'm</c><00:31:03.800><c> using</c>

00:31:03.970 --> 00:31:03.980 align:start position:0%
math on the objects so I'm using
 

00:31:03.980 --> 00:31:06.430 align:start position:0%
math on the objects so I'm using
operator<00:31:04.940><c> overloading</c><00:31:05.270><c> in</c><00:31:05.630><c> Catalan</c><00:31:06.020><c> we</c><00:31:06.380><c> are</c>

00:31:06.430 --> 00:31:06.440 align:start position:0%
operator overloading in Catalan we are
 

00:31:06.440 --> 00:31:07.700 align:start position:0%
operator overloading in Catalan we are
multiplying

00:31:07.700 --> 00:31:07.710 align:start position:0%
multiplying
 

00:31:07.710 --> 00:31:09.470 align:start position:0%
multiplying
floats<00:31:08.040><c> recalled</c><00:31:08.430><c> ex</c><00:31:08.640><c> by</c><00:31:09.030><c> a</c><00:31:09.060><c> bunch</c><00:31:09.360><c> of</c>

00:31:09.470 --> 00:31:09.480 align:start position:0%
floats recalled ex by a bunch of
 

00:31:09.480 --> 00:31:11.150 align:start position:0%
floats recalled ex by a bunch of
constants<00:31:09.960><c> we're</c><00:31:10.170><c> doing</c><00:31:10.320><c> division</c><00:31:10.560><c> additions</c>

00:31:11.150 --> 00:31:11.160 align:start position:0%
constants we're doing division additions
 

00:31:11.160 --> 00:31:13.010 align:start position:0%
constants we're doing division additions
but<00:31:11.820><c> the</c><00:31:11.940><c> important</c><00:31:12.270><c> thing</c><00:31:12.420><c> here</c><00:31:12.450><c> is</c><00:31:12.780><c> that</c><00:31:12.810><c> the</c>

00:31:13.010 --> 00:31:13.020 align:start position:0%
but the important thing here is that the
 

00:31:13.020 --> 00:31:14.540 align:start position:0%
but the important thing here is that the
way<00:31:13.200><c> those</c><00:31:13.380><c> functions</c><00:31:13.770><c> are</c><00:31:13.860><c> implemented</c><00:31:14.220><c> my</c>

00:31:14.540 --> 00:31:14.550 align:start position:0%
way those functions are implemented my
 

00:31:14.550 --> 00:31:17.660 align:start position:0%
way those functions are implemented my
float<00:31:15.150><c> 3</c><00:31:15.420><c> is</c><00:31:15.600><c> immutable</c><00:31:16.170><c> so</c><00:31:17.070><c> every</c><00:31:17.220><c> time</c><00:31:17.310><c> I</c><00:31:17.460><c> add</c>

00:31:17.660 --> 00:31:17.670 align:start position:0%
float 3 is immutable so every time I add
 

00:31:17.670 --> 00:31:19.970 align:start position:0%
float 3 is immutable so every time I add
on<00:31:17.880><c> multiply</c><00:31:18.390><c> I'm</c><00:31:18.810><c> creating</c><00:31:19.230><c> a</c><00:31:19.290><c> new</c><00:31:19.320><c> float</c><00:31:19.740><c> 3</c>

00:31:19.970 --> 00:31:19.980 align:start position:0%
on multiply I'm creating a new float 3
 

00:31:19.980 --> 00:31:21.650 align:start position:0%
on multiply I'm creating a new float 3
object<00:31:20.340><c> so</c><00:31:20.460><c> those</c><00:31:20.610><c> are</c><00:31:20.760><c> fairly</c><00:31:20.970><c> small</c><00:31:21.090><c> objects</c>

00:31:21.650 --> 00:31:21.660 align:start position:0%
object so those are fairly small objects
 

00:31:21.660 --> 00:31:23.900 align:start position:0%
object so those are fairly small objects
but<00:31:22.320><c> for</c><00:31:22.650><c> every</c><00:31:22.920><c> pixel</c><00:31:23.160><c> that</c><00:31:23.460><c> we'll</c><00:31:23.670><c> want</c><00:31:23.790><c> to</c>

00:31:23.900 --> 00:31:23.910 align:start position:0%
but for every pixel that we'll want to
 

00:31:23.910 --> 00:31:25.460 align:start position:0%
but for every pixel that we'll want to
render<00:31:24.180><c> in</c><00:31:24.360><c> that</c><00:31:24.510><c> red</c><00:31:24.660><c> racer</c><00:31:24.990><c> we're</c><00:31:25.230><c> going</c><00:31:25.380><c> to</c>

00:31:25.460 --> 00:31:25.470 align:start position:0%
render in that red racer we're going to
 

00:31:25.470 --> 00:31:26.960 align:start position:0%
render in that red racer we're going to
be<00:31:25.530><c> allocating</c><00:31:25.980><c> hundreds</c><00:31:26.370><c> of</c><00:31:26.490><c> thousands</c><00:31:26.910><c> or</c>

00:31:26.960 --> 00:31:26.970 align:start position:0%
be allocating hundreds of thousands or
 

00:31:26.970 --> 00:31:29.240 align:start position:0%
be allocating hundreds of thousands or
millions<00:31:27.450><c> of</c><00:31:27.690><c> this</c><00:31:27.870><c> fruit</c><00:31:28.080><c> trees</c><00:31:28.350><c> so</c><00:31:28.950><c> we're</c>

00:31:29.240 --> 00:31:29.250 align:start position:0%
millions of this fruit trees so we're
 

00:31:29.250 --> 00:31:31.550 align:start position:0%
millions of this fruit trees so we're
going<00:31:29.370><c> to</c><00:31:29.430><c> really</c><00:31:29.700><c> exercise</c><00:31:29.940><c> the</c><00:31:30.270><c> GC</c><00:31:30.540><c> so</c><00:31:31.110><c> then</c>

00:31:31.550 --> 00:31:31.560 align:start position:0%
going to really exercise the GC so then
 

00:31:31.560 --> 00:31:34.850 align:start position:0%
going to really exercise the GC so then
I<00:31:31.590><c> created</c><00:31:32.390><c> two</c><00:31:33.390><c> system</c><00:31:33.720><c> images</c><00:31:33.990><c> one</c><00:31:34.740><c> on</c>

00:31:34.850 --> 00:31:34.860 align:start position:0%
I created two system images one on
 

00:31:34.860 --> 00:31:37.250 align:start position:0%
I created two system images one on
KitKat<00:31:35.070><c> one</c><00:31:35.610><c> on</c><00:31:35.790><c> O</c><00:31:36.060><c> both</c><00:31:36.540><c> running</c><00:31:36.900><c> on</c><00:31:37.110><c> the</c>

00:31:37.250 --> 00:31:37.260 align:start position:0%
KitKat one on O both running on the
 

00:31:37.260 --> 00:31:38.780 align:start position:0%
KitKat one on O both running on the
emulator<00:31:37.290><c> we're</c><00:31:37.950><c> emulating</c><00:31:38.160><c> the</c><00:31:38.610><c> same</c>

00:31:38.780 --> 00:31:38.790 align:start position:0%
emulator we're emulating the same
 

00:31:38.790 --> 00:31:41.240 align:start position:0%
emulator we're emulating the same
hardware<00:31:39.210><c> into</c><00:31:39.540><c> Nexus</c><00:31:39.870><c> 5x</c><00:31:40.260><c> we</c><00:31:40.800><c> have</c><00:31:40.980><c> the</c><00:31:41.100><c> same</c>

00:31:41.240 --> 00:31:41.250 align:start position:0%
hardware into Nexus 5x we have the same
 

00:31:41.250 --> 00:31:42.500 align:start position:0%
hardware into Nexus 5x we have the same
number<00:31:41.460><c> of</c><00:31:41.520><c> course</c><00:31:41.850><c> they're</c><00:31:42.090><c> running</c><00:31:42.330><c> on</c><00:31:42.390><c> the</c>

00:31:42.500 --> 00:31:42.510 align:start position:0%
number of course they're running on the
 

00:31:42.510 --> 00:31:44.240 align:start position:0%
number of course they're running on the
same<00:31:42.690><c> host</c><00:31:42.900><c> machine</c><00:31:43.320><c> so</c><00:31:43.830><c> the</c><00:31:43.920><c> only</c><00:31:44.040><c> difference</c>

00:31:44.240 --> 00:31:44.250 align:start position:0%
same host machine so the only difference
 

00:31:44.250 --> 00:31:47.300 align:start position:0%
same host machine so the only difference
really<00:31:44.580><c> is</c><00:31:45.180><c> the</c><00:31:45.420><c> garbage</c><00:31:45.690><c> collector</c><00:31:46.220><c> when</c><00:31:47.220><c> I'm</c>

00:31:47.300 --> 00:31:47.310 align:start position:0%
really is the garbage collector when I'm
 

00:31:47.310 --> 00:31:48.860 align:start position:0%
really is the garbage collector when I'm
going<00:31:47.460><c> to</c><00:31:47.490><c> press</c><00:31:47.880><c> next</c>

00:31:48.860 --> 00:31:48.870 align:start position:0%
going to press next
 

00:31:48.870 --> 00:31:51.170 align:start position:0%
going to press next
both<00:31:49.380><c> demos</c><00:31:50.250><c> will</c><00:31:50.460><c> run</c><00:31:50.610><c> at</c><00:31:50.730><c> the</c><00:31:50.820><c> same</c><00:31:50.970><c> time</c>

00:31:51.170 --> 00:31:51.180 align:start position:0%
both demos will run at the same time
 

00:31:51.180 --> 00:31:52.190 align:start position:0%
both demos will run at the same time
we're<00:31:51.300><c> going</c><00:31:51.390><c> to</c><00:31:51.450><c> start</c><00:31:51.690><c> rendering</c><00:31:51.900><c> an</c>

00:31:52.190 --> 00:31:52.200 align:start position:0%
we're going to start rendering an
 

00:31:52.200 --> 00:31:53.750 align:start position:0%
we're going to start rendering an
animation<00:31:52.500><c> with</c><00:31:52.770><c> a</c><00:31:52.800><c> try</c><00:31:53.010><c> tracer</c><00:31:53.220><c> and</c><00:31:53.520><c> at</c><00:31:53.670><c> the</c>

00:31:53.750 --> 00:31:53.760 align:start position:0%
animation with a try tracer and at the
 

00:31:53.760 --> 00:31:55.310 align:start position:0%
animation with a try tracer and at the
top<00:31:54.000><c> you</c><00:31:54.180><c> have</c><00:31:54.210><c> o</c><00:31:54.450><c> and</c><00:31:54.720><c> at</c><00:31:54.900><c> the</c><00:31:54.990><c> bottom</c><00:31:55.140><c> you</c>

00:31:55.310 --> 00:31:55.320 align:start position:0%
top you have o and at the bottom you
 

00:31:55.320 --> 00:31:57.620 align:start position:0%
top you have o and at the bottom you
have<00:31:55.440><c> cat</c><00:31:56.000><c> see</c><00:31:57.000><c> if</c><00:31:57.060><c> you</c><00:31:57.120><c> can</c><00:31:57.240><c> spot</c><00:31:57.390><c> the</c>

00:31:57.620 --> 00:31:57.630 align:start position:0%
have cat see if you can spot the
 

00:31:57.630 --> 00:32:11.120 align:start position:0%
have cat see if you can spot the
difference<00:31:57.660><c> in</c><00:31:58.080><c> performance</c>

00:32:11.120 --> 00:32:11.130 align:start position:0%
 
 

00:32:11.130 --> 00:32:14.190 align:start position:0%
 
so<00:32:12.130><c> we'll</c><00:32:12.280><c> service</c><00:32:12.550><c> some</c><00:32:12.760><c> time</c><00:32:13.030><c> it</c><00:32:13.240><c> takes</c><00:32:13.510><c> 47</c>

00:32:14.190 --> 00:32:14.200 align:start position:0%
so we'll service some time it takes 47
 

00:32:14.200 --> 00:32:16.590 align:start position:0%
so we'll service some time it takes 47
seconds<00:32:14.680><c> for</c><00:32:15.340><c> KitKat</c><00:32:15.700><c> to</c><00:32:15.820><c> render</c><00:32:16.060><c> the</c><00:32:16.210><c> first</c>

00:32:16.590 --> 00:32:16.600 align:start position:0%
seconds for KitKat to render the first
 

00:32:16.600 --> 00:32:19.050 align:start position:0%
seconds for KitKat to render the first
tile<00:32:17.110><c> yeah</c><00:32:17.680><c> but</c><00:32:17.830><c> it's</c><00:32:17.920><c> a</c><00:32:18.010><c> really</c><00:32:18.400><c> good</c><00:32:18.520><c> it's</c><00:32:18.970><c> a</c>

00:32:19.050 --> 00:32:19.060 align:start position:0%
tile yeah but it's a really good it's a
 

00:32:19.060 --> 00:32:21.300 align:start position:0%
tile yeah but it's a really good it's a
really<00:32:19.330><c> good</c><00:32:19.480><c> tile</c><00:32:19.800><c> and</c><00:32:20.800><c> again</c><00:32:21.070><c> the</c><00:32:21.190><c> only</c>

00:32:21.300 --> 00:32:21.310 align:start position:0%
really good tile and again the only
 

00:32:21.310 --> 00:32:22.590 align:start position:0%
really good tile and again the only
difference<00:32:21.400><c> we're</c><00:32:21.910><c> running</c><00:32:22.120><c> the</c><00:32:22.210><c> exact</c><00:32:22.480><c> same</c>

00:32:22.590 --> 00:32:22.600 align:start position:0%
difference we're running the exact same
 

00:32:22.600 --> 00:32:23.760 align:start position:0%
difference we're running the exact same
application<00:32:23.080><c> the</c><00:32:23.170><c> only</c><00:32:23.350><c> difference</c><00:32:23.620><c> is</c>

00:32:23.760 --> 00:32:23.770 align:start position:0%
application the only difference is
 

00:32:23.770 --> 00:32:28.080 align:start position:0%
application the only difference is
effectively<00:32:24.310><c> the</c><00:32:24.490><c> garbage</c><00:32:24.820><c> collector</c><00:32:26.310><c> so</c><00:32:27.310><c> on</c>

00:32:28.080 --> 00:32:28.090 align:start position:0%
effectively the garbage collector so on
 

00:32:28.090 --> 00:32:30.570 align:start position:0%
effectively the garbage collector so on
all<00:32:28.450><c> rendering</c><00:32:28.870><c> 1</c><00:32:29.050><c> tiles</c><00:32:29.260><c> takes</c><00:32:29.590><c> about</c><00:32:29.740><c> 100</c><00:32:30.430><c> to</c>

00:32:30.570 --> 00:32:30.580 align:start position:0%
all rendering 1 tiles takes about 100 to
 

00:32:30.580 --> 00:32:33.900 align:start position:0%
all rendering 1 tiles takes about 100 to
500<00:32:30.790><c> milliseconds</c><00:32:31.390><c> and</c><00:32:31.990><c> on</c><00:32:32.440><c> K</c><00:32:32.860><c> it</c><00:32:33.160><c> takes</c><00:32:33.430><c> 40</c><00:32:33.790><c> to</c>

00:32:33.900 --> 00:32:33.910 align:start position:0%
500 milliseconds and on K it takes 40 to
 

00:32:33.910 --> 00:32:35.880 align:start position:0%
500 milliseconds and on K it takes 40 to
50<00:32:34.240><c> seconds</c><00:32:34.750><c> so</c><00:32:35.020><c> two</c><00:32:35.380><c> orders</c><00:32:35.710><c> of</c><00:32:35.830><c> magnitude</c>

00:32:35.880 --> 00:32:35.890 align:start position:0%
50 seconds so two orders of magnitude
 

00:32:35.890 --> 00:32:38.580 align:start position:0%
50 seconds so two orders of magnitude
slower<00:32:36.520><c> and</c><00:32:37.300><c> if</c><00:32:37.420><c> you</c><00:32:37.570><c> look</c><00:32:37.720><c> at</c><00:32:37.870><c> the</c><00:32:37.990><c> logs</c><00:32:38.260><c> for</c>

00:32:38.580 --> 00:32:38.590 align:start position:0%
slower and if you look at the logs for
 

00:32:38.590 --> 00:32:40.770 align:start position:0%
slower and if you look at the logs for
on<00:32:38.920><c> KitKat</c><00:32:39.250><c> this</c><00:32:39.820><c> is</c><00:32:39.970><c> what</c><00:32:40.150><c> we</c><00:32:40.270><c> see</c><00:32:40.450><c> with</c><00:32:40.600><c> your</c>

00:32:40.770 --> 00:32:40.780 align:start position:0%
on KitKat this is what we see with your
 

00:32:40.780 --> 00:32:43.200 align:start position:0%
on KitKat this is what we see with your
bunch<00:32:40.990><c> of</c><00:32:41.110><c> GC</c><00:32:41.440><c> for</c><00:32:41.590><c> Alex</c><00:32:41.890><c> and</c><00:32:42.580><c> I</c><00:32:42.730><c> just</c><00:32:43.000><c> you</c><00:32:43.090><c> know</c>

00:32:43.200 --> 00:32:43.210 align:start position:0%
bunch of GC for Alex and I just you know
 

00:32:43.210 --> 00:32:45.300 align:start position:0%
bunch of GC for Alex and I just you know
grab<00:32:43.390><c> logs</c><00:32:43.990><c> for</c><00:32:44.170><c> about</c><00:32:44.350><c> 10</c><00:32:44.560><c> seconds</c><00:32:44.920><c> worth</c><00:32:45.190><c> of</c>

00:32:45.300 --> 00:32:45.310 align:start position:0%
grab logs for about 10 seconds worth of
 

00:32:45.310 --> 00:32:47.280 align:start position:0%
grab logs for about 10 seconds worth of
computations<00:32:45.940><c> and</c><00:32:46.480><c> you</c><00:32:46.780><c> can</c><00:32:46.930><c> see</c><00:32:47.140><c> we're</c>

00:32:47.280 --> 00:32:47.290 align:start position:0%
computations and you can see we're
 

00:32:47.290 --> 00:32:50.100 align:start position:0%
computations and you can see we're
constantly<00:32:47.830><c> stopping</c><00:32:48.760><c> all</c><00:32:49.180><c> the</c><00:32:49.510><c> threads</c><00:32:49.810><c> were</c>

00:32:50.100 --> 00:32:50.110 align:start position:0%
constantly stopping all the threads were
 

00:32:50.110 --> 00:32:52.280 align:start position:0%
constantly stopping all the threads were
blocking<00:32:50.440><c> the</c><00:32:50.620><c> applications</c><00:32:51.340><c> all</c><00:32:51.580><c> the</c><00:32:52.000><c> time</c>

00:32:52.280 --> 00:32:52.290 align:start position:0%
blocking the applications all the time
 

00:32:52.290 --> 00:32:55.440 align:start position:0%
blocking the applications all the time
nothing<00:32:53.290><c> is</c><00:32:53.590><c> getting</c><00:32:53.740><c> done</c><00:32:54.120><c> yeah</c><00:32:55.120><c> that's</c><00:32:55.330><c> a</c>

00:32:55.440 --> 00:32:55.450 align:start position:0%
nothing is getting done yeah that's a
 

00:32:55.450 --> 00:32:57.870 align:start position:0%
nothing is getting done yeah that's a
lot<00:32:55.630><c> of</c><00:32:55.780><c> a</c><00:32:56.080><c> lot</c><00:32:56.920><c> of</c><00:32:56.950><c> disease</c><00:32:57.400><c> and</c><00:32:57.520><c> you</c><00:32:57.640><c> can</c><00:32:57.760><c> see</c>

00:32:57.870 --> 00:32:57.880 align:start position:0%
lot of a lot of disease and you can see
 

00:32:57.880 --> 00:33:00.060 align:start position:0%
lot of a lot of disease and you can see
every<00:32:58.060><c> time</c><00:32:58.090><c> the</c><00:32:58.360><c> GC</c><00:32:58.690><c> takes</c><00:32:58.930><c> 3</c><00:32:59.680><c> to</c><00:32:59.710><c> 5</c>

00:33:00.060 --> 00:33:00.070 align:start position:0%
every time the GC takes 3 to 5
 

00:33:00.070 --> 00:33:03.540 align:start position:0%
every time the GC takes 3 to 5
milliseconds<00:33:01.170><c> so</c><00:33:02.170><c> if</c><00:33:02.350><c> we</c><00:33:02.620><c> look</c><00:33:02.890><c> at</c><00:33:03.040><c> this</c><00:33:03.250><c> trace</c>

00:33:03.540 --> 00:33:03.550 align:start position:0%
milliseconds so if we look at this trace
 

00:33:03.550 --> 00:33:07.110 align:start position:0%
milliseconds so if we look at this trace
on<00:33:03.760><c> o</c><00:33:04.320><c> we</c><00:33:05.320><c> can</c><00:33:05.470><c> see</c><00:33:05.650><c> that</c><00:33:05.770><c> even</c><00:33:05.980><c> though</c><00:33:06.370><c> things</c>

00:33:07.110 --> 00:33:07.120 align:start position:0%
on o we can see that even though things
 

00:33:07.120 --> 00:33:11.300 align:start position:0%
on o we can see that even though things
are<00:33:07.360><c> better</c><00:33:07.600><c> they</c><00:33:08.470><c> are</c><00:33:08.500><c> not</c><00:33:08.920><c> quite</c><00:33:09.250><c> perfect</c><00:33:09.960><c> so</c>

00:33:11.300 --> 00:33:11.310 align:start position:0%
are better they are not quite perfect so
 

00:33:11.310 --> 00:33:14.490 align:start position:0%
are better they are not quite perfect so
this<00:33:12.310><c> is</c><00:33:12.460><c> this</c><00:33:12.610><c> trace</c><00:33:12.880><c> here</c><00:33:13.510><c> you</c><00:33:13.990><c> can</c><00:33:14.170><c> see</c><00:33:14.380><c> what</c>

00:33:14.490 --> 00:33:14.500 align:start position:0%
this is this trace here you can see what
 

00:33:14.500 --> 00:33:16.230 align:start position:0%
this is this trace here you can see what
the<00:33:14.590><c> CPUs</c><00:33:14.980><c> are</c><00:33:15.100><c> doing</c><00:33:15.370><c> and</c><00:33:15.610><c> from</c><00:33:15.820><c> afar</c><00:33:15.970><c> it</c>

00:33:16.230 --> 00:33:16.240 align:start position:0%
the CPUs are doing and from afar it
 

00:33:16.240 --> 00:33:17.640 align:start position:0%
the CPUs are doing and from afar it
looks<00:33:16.270><c> like</c><00:33:16.600><c> they</c><00:33:16.690><c> are</c><00:33:16.780><c> very</c><00:33:16.810><c> busy</c><00:33:17.380><c> because</c><00:33:17.500><c> I</c>

00:33:17.640 --> 00:33:17.650 align:start position:0%
looks like they are very busy because I
 

00:33:17.650 --> 00:33:19.320 align:start position:0%
looks like they are very busy because I
have<00:33:17.800><c> three</c><00:33:18.400><c> worker</c><00:33:18.610><c> threads</c><00:33:19.060><c> that</c><00:33:19.210><c> are</c>

00:33:19.320 --> 00:33:19.330 align:start position:0%
have three worker threads that are
 

00:33:19.330 --> 00:33:22.260 align:start position:0%
have three worker threads that are
computing<00:33:19.810><c> those</c><00:33:19.960><c> this</c><00:33:20.560><c> 3d</c><00:33:21.190><c> scene</c><00:33:21.460><c> but</c><00:33:22.210><c> you</c>

00:33:22.260 --> 00:33:22.270 align:start position:0%
computing those this 3d scene but you
 

00:33:22.270 --> 00:33:24.690 align:start position:0%
computing those this 3d scene but you
can<00:33:22.390><c> see</c><00:33:22.510><c> there's</c><00:33:22.690><c> a</c><00:33:22.750><c> lot</c><00:33:22.930><c> of</c><00:33:23.280><c> cases</c><00:33:24.280><c> where</c><00:33:24.580><c> the</c>

00:33:24.690 --> 00:33:24.700 align:start position:0%
can see there's a lot of cases where the
 

00:33:24.700 --> 00:33:26.340 align:start position:0%
can see there's a lot of cases where the
CPU<00:33:24.880><c> actually</c><00:33:25.360><c> not</c><00:33:25.570><c> doing</c><00:33:25.720><c> anything</c><00:33:26.020><c> there's</c>

00:33:26.340 --> 00:33:26.350 align:start position:0%
CPU actually not doing anything there's
 

00:33:26.350 --> 00:33:28.800 align:start position:0%
CPU actually not doing anything there's
holes<00:33:26.650><c> in</c><00:33:26.860><c> inner</c><00:33:27.310><c> pipe</c><00:33:27.580><c> so</c><00:33:28.240><c> if</c><00:33:28.330><c> you</c><00:33:28.480><c> look</c><00:33:28.660><c> at</c>

00:33:28.800 --> 00:33:28.810 align:start position:0%
holes in inner pipe so if you look at
 

00:33:28.810 --> 00:33:31.530 align:start position:0%
holes in inner pipe so if you look at
the<00:33:28.930><c> app</c><00:33:29.110><c> itself</c><00:33:29.760><c> we</c><00:33:30.760><c> see</c><00:33:30.790><c> two</c><00:33:31.120><c> interesting</c>

00:33:31.530 --> 00:33:31.540 align:start position:0%
the app itself we see two interesting
 

00:33:31.540 --> 00:33:32.850 align:start position:0%
the app itself we see two interesting
things<00:33:31.570><c> first</c><00:33:32.020><c> of</c><00:33:32.140><c> all</c><00:33:32.230><c> I've</c><00:33:32.380><c> made</c><00:33:32.620><c> three</c>

00:33:32.850 --> 00:33:32.860 align:start position:0%
things first of all I've made three
 

00:33:32.860 --> 00:33:34.560 align:start position:0%
things first of all I've made three
threads<00:33:33.160><c> that</c><00:33:33.340><c> are</c><00:33:33.400><c> computing</c><00:33:33.910><c> that</c><00:33:34.390><c> are</c>

00:33:34.560 --> 00:33:34.570 align:start position:0%
threads that are computing that are
 

00:33:34.570 --> 00:33:36.750 align:start position:0%
threads that are computing that are
doing<00:33:34.720><c> the</c><00:33:34.810><c> work</c><00:33:35.040><c> they</c><00:33:36.040><c> are</c><00:33:36.070><c> busy</c><00:33:36.340><c> chugging</c>

00:33:36.750 --> 00:33:36.760 align:start position:0%
doing the work they are busy chugging
 

00:33:36.760 --> 00:33:38.910 align:start position:0%
doing the work they are busy chugging
along<00:33:36.850><c> but</c><00:33:37.510><c> from</c><00:33:37.690><c> time</c><00:33:37.870><c> to</c><00:33:38.050><c> time</c><00:33:38.080><c> here</c><00:33:38.770><c> for</c>

00:33:38.910 --> 00:33:38.920 align:start position:0%
along but from time to time here for
 

00:33:38.920 --> 00:33:40.980 align:start position:0%
along but from time to time here for
instance<00:33:39.220><c> the</c><00:33:39.430><c> pause</c><00:33:39.730><c> and</c><00:33:40.210><c> you</c><00:33:40.240><c> probably</c>

00:33:40.980 --> 00:33:40.990 align:start position:0%
instance the pause and you probably
 

00:33:40.990 --> 00:33:42.780 align:start position:0%
instance the pause and you probably
can't<00:33:41.140><c> read</c><00:33:41.290><c> this</c><00:33:41.410><c> but</c><00:33:41.650><c> it</c><00:33:41.770><c> says</c><00:33:41.920><c> full</c><00:33:42.250><c> suspend</c>

00:33:42.780 --> 00:33:42.790 align:start position:0%
can't read this but it says full suspend
 

00:33:42.790 --> 00:33:44.880 align:start position:0%
can't read this but it says full suspend
and<00:33:43.330><c> then</c><00:33:43.900><c> we're</c><00:33:44.110><c> not</c><00:33:44.230><c> doing</c><00:33:44.470><c> anything</c><00:33:44.650><c> we're</c>

00:33:44.880 --> 00:33:44.890 align:start position:0%
and then we're not doing anything we're
 

00:33:44.890 --> 00:33:46.860 align:start position:0%
and then we're not doing anything we're
not<00:33:44.920><c> doing</c><00:33:45.130><c> any</c><00:33:45.280><c> computation</c><00:33:45.820><c> and</c><00:33:46.120><c> the</c><00:33:46.570><c> reason</c>

00:33:46.860 --> 00:33:46.870 align:start position:0%
not doing any computation and the reason
 

00:33:46.870 --> 00:33:49.410 align:start position:0%
not doing any computation and the reason
is<00:33:47.080><c> we</c><00:33:47.830><c> have</c><00:33:47.860><c> this</c><00:33:48.250><c> thread</c><00:33:48.910><c> called</c><00:33:49.060><c> the</c><00:33:49.210><c> heap</c>

00:33:49.410 --> 00:33:49.420 align:start position:0%
is we have this thread called the heap
 

00:33:49.420 --> 00:33:51.090 align:start position:0%
is we have this thread called the heap
test<00:33:49.690><c> daemon</c><00:33:50.080><c> it's</c><00:33:50.290><c> basically</c><00:33:50.920><c> the</c>

00:33:51.090 --> 00:33:51.100 align:start position:0%
test daemon it's basically the
 

00:33:51.100 --> 00:33:53.130 align:start position:0%
test daemon it's basically the
concurrent<00:33:51.550><c> garbage</c><00:33:51.580><c> collector</c><00:33:51.870><c> so</c><00:33:52.870><c> even</c>

00:33:53.130 --> 00:33:53.140 align:start position:0%
concurrent garbage collector so even
 

00:33:53.140 --> 00:33:54.060 align:start position:0%
concurrent garbage collector so even
though<00:33:53.230><c> we're</c><00:33:53.410><c> doing</c><00:33:53.500><c> concurrent</c><00:33:54.010><c> garbage</c>

00:33:54.060 --> 00:33:54.070 align:start position:0%
though we're doing concurrent garbage
 

00:33:54.070 --> 00:33:56.070 align:start position:0%
though we're doing concurrent garbage
collection<00:33:54.820><c> I'm</c><00:33:55.000><c> allocating</c><00:33:55.240><c> so</c><00:33:55.870><c> many</c>

00:33:56.070 --> 00:33:56.080 align:start position:0%
collection I'm allocating so many
 

00:33:56.080 --> 00:33:59.160 align:start position:0%
collection I'm allocating so many
objects<00:33:56.470><c> in</c><00:33:56.710><c> takes</c><00:33:57.580><c> so</c><00:33:57.910><c> much</c><00:33:58.060><c> time</c><00:33:58.390><c> for</c><00:33:59.020><c> the</c>

00:33:59.160 --> 00:33:59.170 align:start position:0%
objects in takes so much time for the
 

00:33:59.170 --> 00:34:00.840 align:start position:0%
objects in takes so much time for the
concurrent<00:33:59.980><c> garbage</c><00:34:00.040><c> collection</c><00:34:00.550><c> to</c><00:34:00.640><c> do</c><00:34:00.730><c> its</c>

00:34:00.840 --> 00:34:00.850 align:start position:0%
concurrent garbage collection to do its
 

00:34:00.850 --> 00:34:02.820 align:start position:0%
concurrent garbage collection to do its
job<00:34:01.060><c> so</c><00:34:01.270><c> here</c><00:34:01.510><c> it's</c><00:34:01.630><c> taking</c><00:34:01.960><c> about</c><00:34:02.080><c> 200</c>

00:34:02.820 --> 00:34:02.830 align:start position:0%
job so here it's taking about 200
 

00:34:02.830 --> 00:34:05.100 align:start position:0%
job so here it's taking about 200
milliseconds<00:34:03.490><c> in</c><00:34:03.580><c> wall</c><00:34:03.730><c> time</c><00:34:04.080><c> that</c><00:34:05.080><c> our</c>

00:34:05.100 --> 00:34:05.110 align:start position:0%
milliseconds in wall time that our
 

00:34:05.110 --> 00:34:07.440 align:start position:0%
milliseconds in wall time that our
threads<00:34:05.530><c> from</c><00:34:05.980><c> time</c><00:34:06.190><c> to</c><00:34:06.340><c> time</c><00:34:06.370><c> have</c><00:34:06.970><c> to</c><00:34:07.180><c> block</c>

00:34:07.440 --> 00:34:07.450 align:start position:0%
threads from time to time have to block
 

00:34:07.450 --> 00:34:09.270 align:start position:0%
threads from time to time have to block
anyway<00:34:07.990><c> it's</c><00:34:08.409><c> not</c><00:34:08.560><c> that</c><00:34:08.710><c> we</c><00:34:08.800><c> want</c><00:34:08.980><c> to</c><00:34:09.070><c> pass</c>

00:34:09.270 --> 00:34:09.280 align:start position:0%
anyway it's not that we want to pass
 

00:34:09.280 --> 00:34:11.669 align:start position:0%
anyway it's not that we want to pass
them<00:34:09.460><c> because</c><00:34:09.760><c> we</c><00:34:09.879><c> have</c><00:34:10.090><c> to</c><00:34:10.240><c> pass</c><00:34:10.450><c> them</c><00:34:10.679><c> it's</c>

00:34:11.669 --> 00:34:11.679 align:start position:0%
them because we have to pass them it's
 

00:34:11.679 --> 00:34:12.930 align:start position:0%
them because we have to pass them it's
not<00:34:11.830><c> for</c><00:34:12.010><c> the</c><00:34:12.100><c> algorithm</c><00:34:12.310><c> is</c><00:34:12.580><c> because</c><00:34:12.850><c> the</c>

00:34:12.930 --> 00:34:12.940 align:start position:0%
not for the algorithm is because the
 

00:34:12.940 --> 00:34:15.330 align:start position:0%
not for the algorithm is because the
garbage<00:34:13.090><c> collector</c><00:34:13.510><c> is</c><00:34:13.629><c> still</c><00:34:13.840><c> busy</c><00:34:14.340><c> and</c>

00:34:15.330 --> 00:34:15.340 align:start position:0%
garbage collector is still busy and
 

00:34:15.340 --> 00:34:17.070 align:start position:0%
garbage collector is still busy and
originally<00:34:15.909><c> I</c><00:34:16.000><c> was</c><00:34:16.240><c> spawning</c><00:34:16.450><c> more</c><00:34:16.750><c> threads</c>

00:34:17.070 --> 00:34:17.080 align:start position:0%
originally I was spawning more threads
 

00:34:17.080 --> 00:34:19.830 align:start position:0%
originally I was spawning more threads
and<00:34:17.290><c> I</c><00:34:17.950><c> was</c><00:34:18.190><c> running</c><00:34:18.310><c> into</c><00:34:18.700><c> real</c><00:34:19.300><c> situations</c>

00:34:19.830 --> 00:34:19.840 align:start position:0%
and I was running into real situations
 

00:34:19.840 --> 00:34:21.600 align:start position:0%
and I was running into real situations
where<00:34:20.110><c> I</c><00:34:20.379><c> had</c><00:34:20.740><c> so</c><00:34:20.950><c> many</c><00:34:21.040><c> threads</c><00:34:21.370><c> doing</c>

00:34:21.600 --> 00:34:21.610 align:start position:0%
where I had so many threads doing
 

00:34:21.610 --> 00:34:23.230 align:start position:0%
where I had so many threads doing
computation<00:34:22.090><c> that</c><00:34:22.210><c> I</c><00:34:22.240><c> was</c><00:34:22.389><c> starving</c><00:34:22.929><c> the</c>

00:34:23.230 --> 00:34:23.240 align:start position:0%
computation that I was starving the
 

00:34:23.240 --> 00:34:25.570 align:start position:0%
computation that I was starving the
the<00:34:23.330><c> thread</c><00:34:23.780><c> and</c><00:34:24.169><c> it</c><00:34:24.409><c> could</c><00:34:25.010><c> not</c><00:34:25.159><c> run</c><00:34:25.310><c> fast</c>

00:34:25.570 --> 00:34:25.580 align:start position:0%
the thread and it could not run fast
 

00:34:25.580 --> 00:34:26.919 align:start position:0%
the thread and it could not run fast
enough<00:34:25.669><c> so</c><00:34:25.940><c> my</c><00:34:26.030><c> threads</c><00:34:26.300><c> were</c><00:34:26.389><c> posing</c><00:34:26.600><c> even</c>

00:34:26.919 --> 00:34:26.929 align:start position:0%
enough so my threads were posing even
 

00:34:26.929 --> 00:34:29.290 align:start position:0%
enough so my threads were posing even
more<00:34:27.169><c> and</c><00:34:27.560><c> as</c><00:34:28.100><c> a</c><00:34:28.129><c> result</c><00:34:28.490><c> we're</c><00:34:28.820><c> getting</c><00:34:28.909><c> only</c>

00:34:29.290 --> 00:34:29.300 align:start position:0%
more and as a result we're getting only
 

00:34:29.300 --> 00:34:33.159 align:start position:0%
more and as a result we're getting only
about<00:34:29.480><c> 30</c><00:34:29.929><c> to</c><00:34:30.649><c> 40%</c><00:34:30.950><c> CPU</c><00:34:31.700><c> utilization</c><00:34:32.149><c> so</c><00:34:33.020><c> we're</c>

00:34:33.159 --> 00:34:33.169 align:start position:0%
about 30 to 40% CPU utilization so we're
 

00:34:33.169 --> 00:34:34.869 align:start position:0%
about 30 to 40% CPU utilization so we're
not<00:34:33.320><c> using</c><00:34:33.560><c> all</c><00:34:33.860><c> the</c><00:34:33.980><c> compute</c><00:34:34.310><c> power</c><00:34:34.340><c> that</c><00:34:34.760><c> we</c>

00:34:34.869 --> 00:34:34.879 align:start position:0%
not using all the compute power that we
 

00:34:34.879 --> 00:34:36.820 align:start position:0%
not using all the compute power that we
have<00:34:35.090><c> available</c><00:34:35.300><c> on</c><00:34:35.570><c> the</c><00:34:35.720><c> device</c><00:34:35.960><c> so</c><00:34:36.470><c> the</c><00:34:36.590><c> demo</c>

00:34:36.820 --> 00:34:36.830 align:start position:0%
have available on the device so the demo
 

00:34:36.830 --> 00:34:38.590 align:start position:0%
have available on the device so the demo
you<00:34:36.860><c> saw</c><00:34:37.129><c> running</c><00:34:37.310><c> on</c><00:34:37.550><c> oak</c><00:34:37.760><c> could</c><00:34:37.940><c> actually</c><00:34:38.119><c> be</c>

00:34:38.590 --> 00:34:38.600 align:start position:0%
you saw running on oak could actually be
 

00:34:38.600 --> 00:34:40.629 align:start position:0%
you saw running on oak could actually be
something<00:34:38.629><c> like</c><00:34:39.200><c> three</c><00:34:39.440><c> times</c><00:34:39.619><c> faster</c><00:34:40.159><c> than</c>

00:34:40.629 --> 00:34:40.639 align:start position:0%
something like three times faster than
 

00:34:40.639 --> 00:34:43.590 align:start position:0%
something like three times faster than
that<00:34:40.820><c> if</c><00:34:41.119><c> I</c><00:34:41.540><c> was</c><00:34:41.659><c> not</c><00:34:41.780><c> allocating</c><00:34:42.260><c> as</c><00:34:42.379><c> much</c>

00:34:43.590 --> 00:34:43.600 align:start position:0%
that if I was not allocating as much
 

00:34:43.600 --> 00:34:45.430 align:start position:0%
that if I was not allocating as much
another<00:34:44.600><c> thing</c><00:34:44.840><c> I</c><00:34:44.929><c> wanted</c><00:34:45.139><c> to</c><00:34:45.200><c> talk</c><00:34:45.409><c> about</c>

00:34:45.430 --> 00:34:45.440 align:start position:0%
another thing I wanted to talk about
 

00:34:45.440 --> 00:34:46.780 align:start position:0%
another thing I wanted to talk about
when<00:34:45.860><c> you</c><00:34:45.950><c> have</c><00:34:46.040><c> four</c><00:34:46.220><c> minutes</c><00:34:46.310><c> left</c><00:34:46.460><c> so</c><00:34:46.700><c> we'll</c>

00:34:46.780 --> 00:34:46.790 align:start position:0%
when you have four minutes left so we'll
 

00:34:46.790 --> 00:34:48.669 align:start position:0%
when you have four minutes left so we'll
go<00:34:46.940><c> through</c><00:34:47.090><c> this</c><00:34:47.179><c> very</c><00:34:47.360><c> quickly</c><00:34:47.510><c> is</c><00:34:48.230><c> that</c><00:34:48.290><c> you</c>

00:34:48.669 --> 00:34:48.679 align:start position:0%
go through this very quickly is that you
 

00:34:48.679 --> 00:34:50.230 align:start position:0%
go through this very quickly is that you
have<00:34:48.770><c> to</c><00:34:48.860><c> be</c><00:34:48.950><c> careful</c><00:34:49.369><c> when</c><00:34:49.550><c> you</c><00:34:49.639><c> do</c><00:34:49.850><c> when</c><00:34:50.119><c> you</c>

00:34:50.230 --> 00:34:50.240 align:start position:0%
have to be careful when you do when you
 

00:34:50.240 --> 00:34:52.330 align:start position:0%
have to be careful when you do when you
create<00:34:50.540><c> benchmarks</c><00:34:50.810><c> because</c><00:34:51.770><c> the</c><00:34:52.040><c> garbage</c>

00:34:52.330 --> 00:34:52.340 align:start position:0%
create benchmarks because the garbage
 

00:34:52.340 --> 00:34:54.940 align:start position:0%
create benchmarks because the garbage
collector<00:34:52.760><c> can</c><00:34:53.060><c> greatly</c><00:34:53.389><c> affect</c><00:34:53.600><c> the</c><00:34:54.440><c> results</c>

00:34:54.940 --> 00:34:54.950 align:start position:0%
collector can greatly affect the results
 

00:34:54.950 --> 00:34:57.100 align:start position:0%
collector can greatly affect the results
of<00:34:55.129><c> your</c><00:34:55.369><c> benchmark</c><00:34:55.909><c> once</c><00:34:56.360><c> well</c><00:34:56.750><c> not</c><00:34:56.929><c> really</c>

00:34:57.100 --> 00:34:57.110 align:start position:0%
of your benchmark once well not really
 

00:34:57.110 --> 00:34:58.870 align:start position:0%
of your benchmark once well not really
the<00:34:57.230><c> benchmark</c><00:34:57.380><c> itself</c><00:34:57.860><c> but</c><00:34:58.310><c> the</c><00:34:58.430><c> algorithm</c>

00:34:58.870 --> 00:34:58.880 align:start position:0%
the benchmark itself but the algorithm
 

00:34:58.880 --> 00:35:00.340 align:start position:0%
the benchmark itself but the algorithm
your<00:34:59.030><c> benchmarking</c><00:34:59.510><c> once</c><00:34:59.750><c> it's</c><00:34:59.930><c> inside</c><00:35:00.230><c> your</c>

00:35:00.340 --> 00:35:00.350 align:start position:0%
your benchmarking once it's inside your
 

00:35:00.350 --> 00:35:01.570 align:start position:0%
your benchmarking once it's inside your
application<00:35:00.470><c> might</c><00:35:01.100><c> behave</c><00:35:01.430><c> very</c>

00:35:01.570 --> 00:35:01.580 align:start position:0%
application might behave very
 

00:35:01.580 --> 00:35:03.670 align:start position:0%
application might behave very
differently<00:35:02.020><c> so</c><00:35:03.020><c> I'm</c><00:35:03.080><c> going</c><00:35:03.230><c> to</c><00:35:03.260><c> skip</c><00:35:03.440><c> some</c><00:35:03.500><c> of</c>

00:35:03.670 --> 00:35:03.680 align:start position:0%
differently so I'm going to skip some of
 

00:35:03.680 --> 00:35:05.650 align:start position:0%
differently so I'm going to skip some of
this<00:35:03.890><c> basically</c><00:35:04.730><c> a</c><00:35:04.850><c> quick</c><00:35:05.000><c> recap</c><00:35:05.360><c> when</c><00:35:05.600><c> you</c>

00:35:05.650 --> 00:35:05.660 align:start position:0%
this basically a quick recap when you
 

00:35:05.660 --> 00:35:07.390 align:start position:0%
this basically a quick recap when you
have<00:35:05.750><c> a</c><00:35:05.810><c> CPU</c><00:35:06.230><c> this</c><00:35:06.470><c> is</c><00:35:06.650><c> the</c><00:35:06.800><c> kicks</c><00:35:07.040><c> all</c><00:35:07.160><c> three</c>

00:35:07.390 --> 00:35:07.400 align:start position:0%
have a CPU this is the kicks all three
 

00:35:07.400 --> 00:35:10.000 align:start position:0%
have a CPU this is the kicks all three
CPU<00:35:07.970><c> the</c><00:35:08.600><c> gold</c><00:35:08.840><c> cores</c><00:35:09.110><c> we</c><00:35:09.320><c> have</c><00:35:09.440><c> big</c><00:35:09.650><c> cores</c><00:35:09.890><c> and</c>

00:35:10.000 --> 00:35:10.010 align:start position:0%
CPU the gold cores we have big cores and
 

00:35:10.010 --> 00:35:11.200 align:start position:0%
CPU the gold cores we have big cores and
little<00:35:10.250><c> cause</c><00:35:10.460><c> I'm</c><00:35:10.640><c> looking</c><00:35:10.880><c> at</c><00:35:10.940><c> the</c><00:35:11.030><c> big</c>

00:35:11.200 --> 00:35:11.210 align:start position:0%
little cause I'm looking at the big
 

00:35:11.210 --> 00:35:13.870 align:start position:0%
little cause I'm looking at the big
course<00:35:11.450><c> every</c><00:35:12.260><c> core</c><00:35:12.500><c> has</c><00:35:12.860><c> an</c><00:35:13.010><c> l1</c><00:35:13.340><c> cache</c><00:35:13.640><c> that's</c>

00:35:13.870 --> 00:35:13.880 align:start position:0%
course every core has an l1 cache that's
 

00:35:13.880 --> 00:35:16.810 align:start position:0%
course every core has an l1 cache that's
about<00:35:14.060><c> 64</c><00:35:14.570><c> kilobyte</c><00:35:14.930><c> every</c><00:35:15.650><c> cores</c><00:35:15.890><c> an</c><00:35:16.160><c> l2</c>

00:35:16.810 --> 00:35:16.820 align:start position:0%
about 64 kilobyte every cores an l2
 

00:35:16.820 --> 00:35:20.740 align:start position:0%
about 64 kilobyte every cores an l2
cache<00:35:17.140><c> so</c><00:35:18.140><c> 256</c><00:35:18.950><c> kilobyte</c><00:35:19.490><c> cache</c><00:35:19.790><c> and</c><00:35:20.420><c> then</c>

00:35:20.740 --> 00:35:20.750 align:start position:0%
cache so 256 kilobyte cache and then
 

00:35:20.750 --> 00:35:22.300 align:start position:0%
cache so 256 kilobyte cache and then
there's<00:35:20.900><c> an</c><00:35:20.990><c> l-3</c><00:35:21.320><c> cache</c><00:35:21.530><c> that's</c><00:35:21.770><c> shared</c><00:35:22.130><c> by</c>

00:35:22.300 --> 00:35:22.310 align:start position:0%
there's an l-3 cache that's shared by
 

00:35:22.310 --> 00:35:24.790 align:start position:0%
there's an l-3 cache that's shared by
all<00:35:22.490><c> the</c><00:35:22.670><c> cores</c><00:35:22.880><c> and</c><00:35:23.290><c> this</c><00:35:24.290><c> is</c><00:35:24.410><c> important</c>

00:35:24.790 --> 00:35:24.800 align:start position:0%
all the cores and this is important
 

00:35:24.800 --> 00:35:26.380 align:start position:0%
all the cores and this is important
because<00:35:24.920><c> when</c><00:35:25.250><c> you</c><00:35:25.369><c> want</c><00:35:25.520><c> to</c><00:35:25.580><c> access</c><00:35:25.730><c> data</c><00:35:26.119><c> so</c>

00:35:26.380 --> 00:35:26.390 align:start position:0%
because when you want to access data so
 

00:35:26.390 --> 00:35:27.730 align:start position:0%
because when you want to access data so
here<00:35:26.570><c> we</c><00:35:26.660><c> have</c><00:35:26.750><c> a</c><00:35:26.780><c> floater</c><00:35:27.050><c> array</c><00:35:27.290><c> and</c><00:35:27.530><c> I</c><00:35:27.560><c> just</c>

00:35:27.730 --> 00:35:27.740 align:start position:0%
here we have a floater array and I just
 

00:35:27.740 --> 00:35:29.080 align:start position:0%
here we have a floater array and I just
want<00:35:27.920><c> to</c><00:35:27.980><c> read</c><00:35:28.130><c> one</c><00:35:28.340><c> float</c><00:35:28.580><c> from</c><00:35:28.700><c> that</c><00:35:28.850><c> array</c>

00:35:29.080 --> 00:35:29.090 align:start position:0%
want to read one float from that array
 

00:35:29.090 --> 00:35:31.510 align:start position:0%
want to read one float from that array
the<00:35:29.570><c> first</c><00:35:29.600><c> time</c><00:35:29.960><c> we</c><00:35:30.080><c> access</c><00:35:30.410><c> that</c><00:35:30.590><c> float</c><00:35:30.920><c> the</c>

00:35:31.510 --> 00:35:31.520 align:start position:0%
the first time we access that float the
 

00:35:31.520 --> 00:35:33.130 align:start position:0%
the first time we access that float the
CPUs<00:35:31.850><c> going</c><00:35:32.000><c> to</c><00:35:32.060><c> go</c><00:35:32.300><c> look</c><00:35:32.480><c> in</c><00:35:32.630><c> the</c><00:35:32.750><c> l1</c><00:35:32.930><c> cache</c>

00:35:33.130 --> 00:35:33.140 align:start position:0%
CPUs going to go look in the l1 cache
 

00:35:33.140 --> 00:35:35.290 align:start position:0%
CPUs going to go look in the l1 cache
see<00:35:33.890><c> if</c><00:35:33.950><c> it's</c><00:35:34.100><c> there</c><00:35:34.250><c> if</c><00:35:34.520><c> it's</c><00:35:34.700><c> not</c><00:35:34.790><c> it</c><00:35:35.030><c> has</c><00:35:35.180><c> to</c>

00:35:35.290 --> 00:35:35.300 align:start position:0%
see if it's there if it's not it has to
 

00:35:35.300 --> 00:35:37.000 align:start position:0%
see if it's there if it's not it has to
go<00:35:35.450><c> fetch</c><00:35:35.660><c> it</c><00:35:35.690><c> from</c><00:35:35.869><c> the</c><00:35:35.960><c> l2</c><00:35:36.380><c> if</c><00:35:36.650><c> it's</c><00:35:36.859><c> not</c>

00:35:37.000 --> 00:35:37.010 align:start position:0%
go fetch it from the l2 if it's not
 

00:35:37.010 --> 00:35:38.410 align:start position:0%
go fetch it from the l2 if it's not
there<00:35:37.160><c> it</c><00:35:37.250><c> has</c><00:35:37.369><c> to</c><00:35:37.490><c> go</c><00:35:37.580><c> to</c><00:35:37.640><c> the</c><00:35:37.820><c> l3</c><00:35:38.180><c> and</c><00:35:38.210><c> and</c>

00:35:38.410 --> 00:35:38.420 align:start position:0%
there it has to go to the l3 and and
 

00:35:38.420 --> 00:35:41.080 align:start position:0%
there it has to go to the l3 and and
final<00:35:38.660><c> to</c><00:35:38.750><c> the</c><00:35:38.840><c> RAM</c><00:35:39.020><c> and</c><00:35:39.550><c> every</c><00:35:40.550><c> time</c><00:35:40.790><c> we</c><00:35:41.000><c> have</c>

00:35:41.080 --> 00:35:41.090 align:start position:0%
final to the RAM and every time we have
 

00:35:41.090 --> 00:35:43.660 align:start position:0%
final to the RAM and every time we have
to<00:35:41.119><c> fall</c><00:35:41.540><c> back</c><00:35:41.570><c> to</c><00:35:41.720><c> a</c><00:35:42.020><c> higher</c><00:35:42.440><c> level</c><00:35:42.470><c> cache</c><00:35:43.010><c> we</c>

00:35:43.660 --> 00:35:43.670 align:start position:0%
to fall back to a higher level cache we
 

00:35:43.670 --> 00:35:45.490 align:start position:0%
to fall back to a higher level cache we
have<00:35:43.790><c> to</c><00:35:43.940><c> do</c><00:35:44.060><c> an</c><00:35:44.300><c> expensive</c><00:35:44.869><c> memory</c><00:35:45.170><c> access</c>

00:35:45.490 --> 00:35:45.500 align:start position:0%
have to do an expensive memory access
 

00:35:45.500 --> 00:35:47.020 align:start position:0%
have to do an expensive memory access
that<00:35:45.650><c> gets</c><00:35:45.830><c> more</c><00:35:46.130><c> and</c><00:35:46.250><c> more</c><00:35:46.340><c> expensive</c><00:35:46.670><c> as</c><00:35:47.000><c> you</c>

00:35:47.020 --> 00:35:47.030 align:start position:0%
that gets more and more expensive as you
 

00:35:47.030 --> 00:35:49.570 align:start position:0%
that gets more and more expensive as you
go<00:35:47.240><c> up</c><00:35:47.450><c> the</c><00:35:47.600><c> chain</c><00:35:47.810><c> so</c><00:35:48.320><c> accessing</c><00:35:48.740><c> the</c><00:35:48.950><c> l1</c>

00:35:49.570 --> 00:35:49.580 align:start position:0%
go up the chain so accessing the l1
 

00:35:49.580 --> 00:35:51.400 align:start position:0%
go up the chain so accessing the l1
takes<00:35:49.820><c> only</c><00:35:49.970><c> a</c><00:35:50.060><c> few</c><00:35:50.119><c> nanoseconds</c><00:35:50.869><c> accessing</c>

00:35:51.400 --> 00:35:51.410 align:start position:0%
takes only a few nanoseconds accessing
 

00:35:51.410 --> 00:35:52.630 align:start position:0%
takes only a few nanoseconds accessing
the<00:35:51.560><c> l2</c><00:35:51.800><c> is</c><00:35:51.890><c> going</c><00:35:52.040><c> to</c><00:35:52.100><c> take</c><00:35:52.220><c> four</c><00:35:52.430><c> or</c><00:35:52.490><c> five</c>

00:35:52.630 --> 00:35:52.640 align:start position:0%
the l2 is going to take four or five
 

00:35:52.640 --> 00:35:54.580 align:start position:0%
the l2 is going to take four or five
times<00:35:52.880><c> that</c><00:35:53.000><c> amount</c><00:35:53.080><c> existing</c><00:35:54.080><c> the</c><00:35:54.230><c> other</c><00:35:54.380><c> is</c>

00:35:54.580 --> 00:35:54.590 align:start position:0%
times that amount existing the other is
 

00:35:54.590 --> 00:35:56.020 align:start position:0%
times that amount existing the other is
going<00:35:54.710><c> to</c><00:35:54.770><c> be</c><00:35:54.830><c> partly</c><00:35:55.100><c> ten</c><00:35:55.310><c> times</c><00:35:55.520><c> slower</c><00:35:55.609><c> and</c>

00:35:56.020 --> 00:35:56.030 align:start position:0%
going to be partly ten times slower and
 

00:35:56.030 --> 00:36:00.609 align:start position:0%
going to be partly ten times slower and
so<00:35:56.300><c> on</c><00:35:57.250><c> so</c><00:35:58.359><c> in</c><00:35:59.359><c> a</c><00:35:59.420><c> I</c><00:35:59.960><c> wrote</c><00:36:00.200><c> a</c><00:36:00.230><c> demo</c><00:36:00.590><c> that</c>

00:36:00.609 --> 00:36:00.619 align:start position:0%
so on so in a I wrote a demo that
 

00:36:00.619 --> 00:36:04.090 align:start position:0%
so on so in a I wrote a demo that
allocates<00:36:01.310><c> a</c><00:36:01.520><c> list</c><00:36:02.210><c> of</c><00:36:02.480><c> arrays</c><00:36:03.170><c> of</c><00:36:03.200><c> floats</c>

00:36:04.090 --> 00:36:04.100 align:start position:0%
allocates a list of arrays of floats
 

00:36:04.100 --> 00:36:06.280 align:start position:0%
allocates a list of arrays of floats
each<00:36:04.460><c> array</c><00:36:04.820><c> of</c><00:36:04.880><c> floats</c><00:36:05.180><c> is</c><00:36:05.300><c> about</c><00:36:05.510><c> four</c><00:36:05.900><c> it's</c>

00:36:06.280 --> 00:36:06.290 align:start position:0%
each array of floats is about four it's
 

00:36:06.290 --> 00:36:08.290 align:start position:0%
each array of floats is about four it's
four<00:36:06.560><c> floats</c><00:36:06.770><c> so</c><00:36:07.160><c> it's</c><00:36:07.280><c> 16</c><00:36:07.850><c> bytes</c>

00:36:08.290 --> 00:36:08.300 align:start position:0%
four floats so it's 16 bytes
 

00:36:08.300 --> 00:36:09.730 align:start position:0%
four floats so it's 16 bytes
they<00:36:08.600><c> are</c><00:36:08.660><c> represented</c><00:36:09.170><c> by</c><00:36:09.200><c> the</c><00:36:09.350><c> red</c><00:36:09.560><c> lines</c>

00:36:09.730 --> 00:36:09.740 align:start position:0%
they are represented by the red lines
 

00:36:09.740 --> 00:36:13.120 align:start position:0%
they are represented by the red lines
here<00:36:10.010><c> and</c><00:36:10.540><c> I</c><00:36:11.540><c> will</c><00:36:12.260><c> to</c><00:36:12.410><c> benchmark</c><00:36:12.650><c> basically</c>

00:36:13.120 --> 00:36:13.130 align:start position:0%
here and I will to benchmark basically
 

00:36:13.130 --> 00:36:14.349 align:start position:0%
here and I will to benchmark basically
using<00:36:13.400><c> that</c><00:36:13.550><c> I'm</c><00:36:13.670><c> just</c><00:36:13.820><c> going</c><00:36:13.910><c> to</c><00:36:14.000><c> run</c><00:36:14.210><c> some</c>

00:36:14.349 --> 00:36:14.359 align:start position:0%
using that I'm just going to run some
 

00:36:14.359 --> 00:36:15.970 align:start position:0%
using that I'm just going to run some
computations<00:36:14.960><c> over</c><00:36:15.080><c> those</c><00:36:15.380><c> those</c><00:36:15.680><c> are</c><00:36:15.710><c> rise</c>

00:36:15.970 --> 00:36:15.980 align:start position:0%
computations over those those are rise
 

00:36:15.980 --> 00:36:18.340 align:start position:0%
computations over those those are rise
of<00:36:16.130><c> floats</c><00:36:16.400><c> so</c><00:36:16.640><c> if</c><00:36:17.540><c> I</c><00:36:17.660><c> look</c><00:36:17.810><c> at</c><00:36:17.990><c> all</c><00:36:18.200><c> those</c>

00:36:18.340 --> 00:36:18.350 align:start position:0%
of floats so if I look at all those
 

00:36:18.350 --> 00:36:19.840 align:start position:0%
of floats so if I look at all those
arrays<00:36:18.650><c> of</c><00:36:18.680><c> floats</c><00:36:19.040><c> one</c><00:36:19.250><c> after</c><00:36:19.490><c> the</c><00:36:19.640><c> other</c><00:36:19.700><c> in</c>

00:36:19.840 --> 00:36:19.850 align:start position:0%
arrays of floats one after the other in
 

00:36:19.850 --> 00:36:21.340 align:start position:0%
arrays of floats one after the other in
the<00:36:20.030><c> loop</c><00:36:20.240><c> this</c><00:36:20.720><c> is</c><00:36:20.869><c> what</c><00:36:21.020><c> it's</c><00:36:21.109><c> going</c><00:36:21.230><c> to</c><00:36:21.290><c> look</c>

00:36:21.340 --> 00:36:21.350 align:start position:0%
the loop this is what it's going to look
 

00:36:21.350 --> 00:36:23.530 align:start position:0%
the loop this is what it's going to look
like<00:36:21.470><c> in</c><00:36:21.740><c> RAM</c><00:36:22.010><c> all</c><00:36:22.340><c> the</c><00:36:22.700><c> arrays</c><00:36:23.000><c> are</c><00:36:23.210><c> neatly</c>

00:36:23.530 --> 00:36:23.540 align:start position:0%
like in RAM all the arrays are neatly
 

00:36:23.540 --> 00:36:26.140 align:start position:0%
like in RAM all the arrays are neatly
stacked<00:36:24.170><c> together</c><00:36:24.560><c> next</c><00:36:25.369><c> to</c><00:36:25.460><c> one</c><00:36:25.580><c> another</c><00:36:25.609><c> in</c>

00:36:26.140 --> 00:36:26.150 align:start position:0%
stacked together next to one another in
 

00:36:26.150 --> 00:36:29.620 align:start position:0%
stacked together next to one another in
RAM<00:36:26.410><c> and</c><00:36:27.410><c> I'm</c><00:36:27.590><c> using</c><00:36:28.280><c> a</c><00:36:28.460><c> width</c><00:36:28.700><c> of</c><00:36:28.850><c> 64</c><00:36:29.420><c> bytes</c>

00:36:29.620 --> 00:36:29.630 align:start position:0%
RAM and I'm using a width of 64 bytes
 

00:36:29.630 --> 00:36:31.210 align:start position:0%
RAM and I'm using a width of 64 bytes
here<00:36:29.869><c> for</c><00:36:30.320><c> reason</c><00:36:30.619><c> that</c><00:36:30.710><c> we're</c><00:36:30.890><c> going</c><00:36:30.980><c> to</c><00:36:31.070><c> see</c>

00:36:31.210 --> 00:36:31.220 align:start position:0%
here for reason that we're going to see
 

00:36:31.220 --> 00:36:34.060 align:start position:0%
here for reason that we're going to see
in<00:36:31.460><c> a</c><00:36:31.550><c> minute</c><00:36:32.109><c> then</c><00:36:33.109><c> I</c><00:36:33.200><c> wrote</c><00:36:33.350><c> a</c><00:36:33.380><c> very</c><00:36:33.500><c> simple</c>

00:36:34.060 --> 00:36:34.070 align:start position:0%
in a minute then I wrote a very simple
 

00:36:34.070 --> 00:36:35.650 align:start position:0%
in a minute then I wrote a very simple
you<00:36:34.190><c> know</c><00:36:34.340><c> algorithm</c><00:36:34.940><c> so</c><00:36:35.090><c> I</c><00:36:35.180><c> go</c><00:36:35.330><c> through</c><00:36:35.540><c> the</c>

00:36:35.650 --> 00:36:35.660 align:start position:0%
you know algorithm so I go through the
 

00:36:35.660 --> 00:36:37.010 align:start position:0%
you know algorithm so I go through the
array<00:36:35.900><c> at</c><00:36:36.140><c> X</c><00:36:36.320><c> 4</c>

00:36:37.010 --> 00:36:37.020 align:start position:0%
array at X 4
 

00:36:37.020 --> 00:36:38.450 align:start position:0%
array at X 4
I'll<00:36:37.170><c> run</c><00:36:37.380><c> some</c><00:36:37.530><c> computation</c><00:36:38.070><c> it</c><00:36:38.190><c> doesn't</c>

00:36:38.450 --> 00:36:38.460 align:start position:0%
I'll run some computation it doesn't
 

00:36:38.460 --> 00:36:39.590 align:start position:0%
I'll run some computation it doesn't
really<00:36:38.550><c> matter</c><00:36:38.760><c> what</c><00:36:38.910><c> computations</c><00:36:39.450><c> are</c>

00:36:39.590 --> 00:36:39.600 align:start position:0%
really matter what computations are
 

00:36:39.600 --> 00:36:41.420 align:start position:0%
really matter what computations are
running<00:36:39.840><c> and</c><00:36:40.320><c> let's</c><00:36:40.800><c> see</c><00:36:40.890><c> what</c><00:36:41.010><c> happens</c><00:36:41.280><c> to</c>

00:36:41.420 --> 00:36:41.430 align:start position:0%
running and let's see what happens to
 

00:36:41.430 --> 00:36:43.700 align:start position:0%
running and let's see what happens to
memory<00:36:41.730><c> so</c><00:36:41.910><c> when</c><00:36:42.210><c> we</c><00:36:42.330><c> access</c><00:36:42.600><c> the</c><00:36:42.750><c> first</c><00:36:43.140><c> float</c>

00:36:43.700 --> 00:36:43.710 align:start position:0%
memory so when we access the first float
 

00:36:43.710 --> 00:36:46.520 align:start position:0%
memory so when we access the first float
array<00:36:44.010><c> in</c><00:36:44.310><c> our</c><00:36:44.520><c> list</c><00:36:44.790><c> it's</c><00:36:45.510><c> not</c><00:36:45.750><c> anywhere</c><00:36:46.200><c> in</c>

00:36:46.520 --> 00:36:46.530 align:start position:0%
array in our list it's not anywhere in
 

00:36:46.530 --> 00:36:48.740 align:start position:0%
array in our list it's not anywhere in
our<00:36:47.280><c> caches</c><00:36:47.490><c> it's</c><00:36:47.790><c> in</c><00:36:47.910><c> RAM</c><00:36:48.090><c> it's</c><00:36:48.330><c> not</c><00:36:48.510><c> in</c><00:36:48.630><c> the</c>

00:36:48.740 --> 00:36:48.750 align:start position:0%
our caches it's in RAM it's not in the
 

00:36:48.750 --> 00:36:51.950 align:start position:0%
our caches it's in RAM it's not in the
l1<00:36:48.870><c> or</c><00:36:49.500><c> the</c><00:36:49.800><c> audio</c><00:36:50.070><c> -</c><00:36:50.310><c> audio</c><00:36:50.340><c> three</c><00:36:50.850><c> so</c><00:36:51.660><c> we're</c>

00:36:51.950 --> 00:36:51.960 align:start position:0%
l1 or the audio - audio three so we're
 

00:36:51.960 --> 00:36:53.840 align:start position:0%
l1 or the audio - audio three so we're
gonna<00:36:52.050><c> go</c><00:36:52.260><c> fetch</c><00:36:52.500><c> it</c><00:36:52.710><c> and</c><00:36:52.950><c> put</c><00:36:53.400><c> it</c><00:36:53.490><c> in</c><00:36:53.580><c> the</c><00:36:53.730><c> l1</c>

00:36:53.840 --> 00:36:53.850 align:start position:0%
gonna go fetch it and put it in the l1
 

00:36:53.850 --> 00:36:56.120 align:start position:0%
gonna go fetch it and put it in the l1
but<00:36:54.510><c> one</c><00:36:54.660><c> optimizations</c><00:36:55.230><c> that</c><00:36:55.320><c> CPUs</c><00:36:55.770><c> have</c><00:36:55.830><c> is</c>

00:36:56.120 --> 00:36:56.130 align:start position:0%
but one optimizations that CPUs have is
 

00:36:56.130 --> 00:36:57.230 align:start position:0%
but one optimizations that CPUs have is
that<00:36:56.250><c> when</c><00:36:56.490><c> you</c><00:36:56.580><c> need</c><00:36:56.670><c> one</c><00:36:56.880><c> byte</c><00:36:57.090><c> of</c><00:36:57.210><c> memory</c>

00:36:57.230 --> 00:36:57.240 align:start position:0%
that when you need one byte of memory
 

00:36:57.240 --> 00:36:59.090 align:start position:0%
that when you need one byte of memory
they<00:36:57.930><c> are</c><00:36:57.990><c> not</c><00:36:58.080><c> gonna</c><00:36:58.230><c> fetch</c><00:36:58.470><c> only</c><00:36:58.590><c> one</c><00:36:58.860><c> byte</c>

00:36:59.090 --> 00:36:59.100 align:start position:0%
they are not gonna fetch only one byte
 

00:36:59.100 --> 00:37:00.560 align:start position:0%
they are not gonna fetch only one byte
they're<00:36:59.310><c> going</c><00:36:59.460><c> to</c><00:36:59.520><c> fetch</c><00:36:59.670><c> 64</c><00:37:00.240><c> bytes</c><00:37:00.420><c> at</c><00:37:00.540><c> a</c>

00:37:00.560 --> 00:37:00.570 align:start position:0%
they're going to fetch 64 bytes at a
 

00:37:00.570 --> 00:37:02.990 align:start position:0%
they're going to fetch 64 bytes at a
time<00:37:00.660><c> so</c><00:37:01.500><c> by</c><00:37:01.680><c> fetching</c><00:37:01.890><c> the</c><00:37:02.190><c> first</c><00:37:02.460><c> array</c><00:37:02.760><c> we</c>

00:37:02.990 --> 00:37:03.000 align:start position:0%
time so by fetching the first array we
 

00:37:03.000 --> 00:37:04.850 align:start position:0%
time so by fetching the first array we
actually<00:37:03.360><c> fetched</c><00:37:03.750><c> the</c><00:37:03.990><c> next</c><00:37:04.350><c> three</c><00:37:04.560><c> or</c><00:37:04.590><c> rez</c>

00:37:04.850 --> 00:37:04.860 align:start position:0%
actually fetched the next three or rez
 

00:37:04.860 --> 00:37:06.920 align:start position:0%
actually fetched the next three or rez
at<00:37:05.010><c> the</c><00:37:05.100><c> same</c><00:37:05.280><c> time</c><00:37:05.490><c> so</c><00:37:06.210><c> then</c><00:37:06.360><c> when</c><00:37:06.510><c> I</c><00:37:06.540><c> want</c><00:37:06.750><c> to</c>

00:37:06.920 --> 00:37:06.930 align:start position:0%
at the same time so then when I want to
 

00:37:06.930 --> 00:37:09.320 align:start position:0%
at the same time so then when I want to
read<00:37:07.290><c> those</c><00:37:07.410><c> arrays</c><00:37:07.970><c> nothing</c><00:37:08.970><c> happens</c>

00:37:09.320 --> 00:37:09.330 align:start position:0%
read those arrays nothing happens
 

00:37:09.330 --> 00:37:11.650 align:start position:0%
read those arrays nothing happens
because<00:37:09.510><c> they</c><00:37:09.750><c> are</c><00:37:09.810><c> already</c><00:37:10.020><c> in</c><00:37:10.560><c> the</c><00:37:10.980><c> l1</c><00:37:11.160><c> cache</c>

00:37:11.650 --> 00:37:11.660 align:start position:0%
because they are already in the l1 cache
 

00:37:11.660 --> 00:37:13.850 align:start position:0%
because they are already in the l1 cache
so<00:37:12.660><c> this</c><00:37:12.780><c> is</c><00:37:12.870><c> pretty</c><00:37:13.050><c> efficient</c><00:37:13.470><c> then</c><00:37:13.620><c> we</c><00:37:13.710><c> run</c>

00:37:13.850 --> 00:37:13.860 align:start position:0%
so this is pretty efficient then we run
 

00:37:13.860 --> 00:37:16.550 align:start position:0%
so this is pretty efficient then we run
our<00:37:14.010><c> computation</c><00:37:14.550><c> now</c><00:37:15.360><c> in</c><00:37:15.720><c> my</c><00:37:15.840><c> test</c><00:37:16.050><c> app</c><00:37:16.260><c> I've</c>

00:37:16.550 --> 00:37:16.560 align:start position:0%
our computation now in my test app I've
 

00:37:16.560 --> 00:37:18.620 align:start position:0%
our computation now in my test app I've
modified<00:37:16.980><c> the</c><00:37:17.400><c> initialization</c><00:37:18.210><c> of</c><00:37:18.570><c> the</c>

00:37:18.620 --> 00:37:18.630 align:start position:0%
modified the initialization of the
 

00:37:18.630 --> 00:37:20.930 align:start position:0%
modified the initialization of the
arrays<00:37:19.020><c> so</c><00:37:19.560><c> that</c><00:37:19.710><c> I</c><00:37:19.740><c> locate</c><00:37:20.190><c> other</c><00:37:20.430><c> stuff</c>

00:37:20.930 --> 00:37:20.940 align:start position:0%
arrays so that I locate other stuff
 

00:37:20.940 --> 00:37:23.300 align:start position:0%
arrays so that I locate other stuff
between<00:37:21.600><c> each</c><00:37:21.720><c> array</c><00:37:22.020><c> and</c><00:37:22.320><c> I'm</c><00:37:22.710><c> doing</c><00:37:22.890><c> this</c><00:37:23.100><c> to</c>

00:37:23.300 --> 00:37:23.310 align:start position:0%
between each array and I'm doing this to
 

00:37:23.310 --> 00:37:24.980 align:start position:0%
between each array and I'm doing this to
basically<00:37:23.700><c> replicate</c><00:37:24.000><c> what</c><00:37:24.420><c> happens</c><00:37:24.450><c> when</c>

00:37:24.980 --> 00:37:24.990 align:start position:0%
basically replicate what happens when
 

00:37:24.990 --> 00:37:26.810 align:start position:0%
basically replicate what happens when
you're<00:37:25.110><c> garbage</c><00:37:25.260><c> collector</c><00:37:25.890><c> move</c><00:37:26.580><c> things</c>

00:37:26.810 --> 00:37:26.820 align:start position:0%
you're garbage collector move things
 

00:37:26.820 --> 00:37:28.520 align:start position:0%
you're garbage collector move things
around<00:37:26.970><c> or</c><00:37:27.450><c> you're</c><00:37:27.630><c> fragmentation</c><00:37:28.200><c> the</c><00:37:28.410><c> app</c>

00:37:28.520 --> 00:37:28.530 align:start position:0%
around or you're fragmentation the app
 

00:37:28.530 --> 00:37:29.990 align:start position:0%
around or you're fragmentation the app
you<00:37:28.710><c> should</c><00:37:28.890><c> do</c><00:37:29.070><c> your</c><00:37:29.190><c> allocations</c><00:37:29.700><c> over</c><00:37:29.910><c> the</c>

00:37:29.990 --> 00:37:30.000 align:start position:0%
you should do your allocations over the
 

00:37:30.000 --> 00:37:31.850 align:start position:0%
you should do your allocations over the
lifetime<00:37:30.180><c> of</c><00:37:30.390><c> the</c><00:37:30.570><c> application</c><00:37:30.710><c> for</c><00:37:31.710><c> any</c>

00:37:31.850 --> 00:37:31.860 align:start position:0%
lifetime of the application for any
 

00:37:31.860 --> 00:37:33.080 align:start position:0%
lifetime of the application for any
number<00:37:32.130><c> of</c><00:37:32.220><c> reasons</c><00:37:32.280><c> that</c><00:37:32.580><c> we've</c><00:37:32.760><c> seen</c><00:37:32.970><c> before</c>

00:37:33.080 --> 00:37:33.090 align:start position:0%
number of reasons that we've seen before
 

00:37:33.090 --> 00:37:35.420 align:start position:0%
number of reasons that we've seen before
your<00:37:33.750><c> locations</c><00:37:34.200><c> won't</c><00:37:34.470><c> be</c><00:37:34.650><c> neatly</c><00:37:34.920><c> next</c><00:37:35.340><c> to</c>

00:37:35.420 --> 00:37:35.430 align:start position:0%
your locations won't be neatly next to
 

00:37:35.430 --> 00:37:37.070 align:start position:0%
your locations won't be neatly next to
one<00:37:35.550><c> another</c><00:37:35.820><c> in</c><00:37:36.030><c> RAM</c><00:37:36.240><c> so</c><00:37:36.840><c> here</c><00:37:37.020><c> I'm</c>

00:37:37.070 --> 00:37:37.080 align:start position:0%
one another in RAM so here I'm
 

00:37:37.080 --> 00:37:38.690 align:start position:0%
one another in RAM so here I'm
representing<00:37:37.650><c> this</c><00:37:37.800><c> with</c><00:37:38.010><c> a</c><00:37:38.040><c> bunch</c><00:37:38.250><c> of</c><00:37:38.400><c> grey</c>

00:37:38.690 --> 00:37:38.700 align:start position:0%
representing this with a bunch of grey
 

00:37:38.700 --> 00:37:41.390 align:start position:0%
representing this with a bunch of grey
grey<00:37:39.660><c> lines</c><00:37:39.900><c> so</c><00:37:40.500><c> if</c><00:37:40.590><c> you</c><00:37:40.710><c> run</c><00:37:40.830><c> the</c><00:37:40.980><c> algorithm</c>

00:37:41.390 --> 00:37:41.400 align:start position:0%
grey lines so if you run the algorithm
 

00:37:41.400 --> 00:37:44.300 align:start position:0%
grey lines so if you run the algorithm
again<00:37:41.490><c> we</c><00:37:42.120><c> go</c><00:37:42.330><c> fetch</c><00:37:42.510><c> our</c><00:37:42.660><c> first</c><00:37:42.960><c> array</c><00:37:43.310><c> but</c>

00:37:44.300 --> 00:37:44.310 align:start position:0%
again we go fetch our first array but
 

00:37:44.310 --> 00:37:46.190 align:start position:0%
again we go fetch our first array but
instead<00:37:44.910><c> of</c><00:37:45.060><c> fetching</c><00:37:45.240><c> the</c><00:37:45.600><c> other</c><00:37:45.840><c> data</c><00:37:46.110><c> that</c>

00:37:46.190 --> 00:37:46.200 align:start position:0%
instead of fetching the other data that
 

00:37:46.200 --> 00:37:48.260 align:start position:0%
instead of fetching the other data that
we<00:37:46.470><c> want</c><00:37:46.710><c> we</c><00:37:47.040><c> search</c><00:37:47.220><c> that</c><00:37:47.400><c> great</c><00:37:47.640><c> data</c><00:37:47.850><c> stuff</c>

00:37:48.260 --> 00:37:48.270 align:start position:0%
we want we search that great data stuff
 

00:37:48.270 --> 00:37:49.610 align:start position:0%
we want we search that great data stuff
that<00:37:48.420><c> we</c><00:37:48.630><c> don't</c><00:37:48.780><c> even</c><00:37:48.870><c> know</c><00:37:49.050><c> what</c><00:37:49.230><c> it</c><00:37:49.320><c> is</c><00:37:49.440><c> but</c>

00:37:49.610 --> 00:37:49.620 align:start position:0%
that we don't even know what it is but
 

00:37:49.620 --> 00:37:51.410 align:start position:0%
that we don't even know what it is but
it's<00:37:49.740><c> going</c><00:37:49.800><c> to</c><00:37:49.890><c> be</c><00:37:50.010><c> put</c><00:37:50.190><c> in</c><00:37:50.310><c> the</c><00:37:50.400><c> l1</c><00:37:50.550><c> so</c><00:37:51.300><c> then</c>

00:37:51.410 --> 00:37:51.420 align:start position:0%
it's going to be put in the l1 so then
 

00:37:51.420 --> 00:37:53.120 align:start position:0%
it's going to be put in the l1 so then
when<00:37:51.570><c> we</c><00:37:51.600><c> want</c><00:37:51.810><c> the</c><00:37:51.900><c> next</c><00:37:52.050><c> array</c><00:37:52.410><c> it's</c><00:37:52.710><c> not</c><00:37:52.950><c> in</c>

00:37:53.120 --> 00:37:53.130 align:start position:0%
when we want the next array it's not in
 

00:37:53.130 --> 00:37:54.770 align:start position:0%
when we want the next array it's not in
the<00:37:53.220><c> l1</c><00:37:53.370><c> and</c><00:37:53.700><c> we</c><00:37:53.820><c> have</c><00:37:53.910><c> to</c><00:37:54.030><c> go</c><00:37:54.150><c> back</c><00:37:54.330><c> to</c><00:37:54.480><c> memory</c>

00:37:54.770 --> 00:37:54.780 align:start position:0%
the l1 and we have to go back to memory
 

00:37:54.780 --> 00:37:57.830 align:start position:0%
the l1 and we have to go back to memory
and<00:37:54.900><c> get</c><00:37:55.080><c> it</c><00:37:55.200><c> and</c><00:37:55.410><c> so</c><00:37:55.980><c> on</c><00:37:56.130><c> and</c><00:37:56.400><c> so</c><00:37:56.670><c> on</c><00:37:56.790><c> but</c><00:37:57.630><c> again</c>

00:37:57.830 --> 00:37:57.840 align:start position:0%
and get it and so on and so on but again
 

00:37:57.840 --> 00:37:59.450 align:start position:0%
and get it and so on and so on but again
we're<00:37:58.020><c> running</c><00:37:58.260><c> the</c><00:37:58.350><c> same</c><00:37:58.530><c> algorithm</c><00:37:59.130><c> it's</c>

00:37:59.450 --> 00:37:59.460 align:start position:0%
we're running the same algorithm it's
 

00:37:59.460 --> 00:38:01.070 align:start position:0%
we're running the same algorithm it's
just<00:37:59.610><c> now</c><00:37:59.760><c> we</c><00:37:59.820><c> have</c><00:37:59.970><c> to</c><00:38:00.090><c> do</c><00:38:00.210><c> more</c><00:38:00.450><c> the</c><00:38:00.600><c> CPUs</c><00:38:00.960><c> to</c>

00:38:01.070 --> 00:38:01.080 align:start position:0%
just now we have to do more the CPUs to
 

00:38:01.080 --> 00:38:03.560 align:start position:0%
just now we have to do more the CPUs to
do<00:38:01.200><c> more</c><00:38:01.380><c> work</c><00:38:01.560><c> and</c><00:38:01.910><c> we</c><00:38:02.910><c> can</c><00:38:03.060><c> recreate</c><00:38:03.390><c> the</c>

00:38:03.560 --> 00:38:03.570 align:start position:0%
do more work and we can recreate the
 

00:38:03.570 --> 00:38:06.890 align:start position:0%
do more work and we can recreate the
same<00:38:03.870><c> the</c><00:38:04.860><c> same</c><00:38:05.040><c> thing</c><00:38:05.340><c> by</c><00:38:05.850><c> spacing</c><00:38:06.600><c> out</c><00:38:06.690><c> our</c>

00:38:06.890 --> 00:38:06.900 align:start position:0%
same the same thing by spacing out our
 

00:38:06.900 --> 00:38:08.960 align:start position:0%
same the same thing by spacing out our
eyes<00:38:07.110><c> even</c><00:38:07.440><c> more</c><00:38:07.470><c> so</c><00:38:07.980><c> that</c><00:38:08.010><c> we</c><00:38:08.310><c> won't</c><00:38:08.550><c> find</c><00:38:08.850><c> the</c>

00:38:08.960 --> 00:38:08.970 align:start position:0%
eyes even more so that we won't find the
 

00:38:08.970 --> 00:38:11.180 align:start position:0%
eyes even more so that we won't find the
arise<00:38:09.210><c> in</c><00:38:09.450><c> the</c><00:38:09.600><c> l2</c><00:38:09.930><c> or</c><00:38:09.960><c> the</c><00:38:10.380><c> l3</c><00:38:10.800><c> and</c><00:38:11.010><c> we</c><00:38:11.070><c> can</c>

00:38:11.180 --> 00:38:11.190 align:start position:0%
arise in the l2 or the l3 and we can
 

00:38:11.190 --> 00:38:12.830 align:start position:0%
arise in the l2 or the l3 and we can
force<00:38:11.490><c> the</c><00:38:11.610><c> CPU</c><00:38:11.940><c> to</c><00:38:12.090><c> do</c><00:38:12.180><c> even</c><00:38:12.420><c> more</c><00:38:12.450><c> and</c><00:38:12.630><c> not</c>

00:38:12.830 --> 00:38:12.840 align:start position:0%
force the CPU to do even more and not
 

00:38:12.840 --> 00:38:15.350 align:start position:0%
force the CPU to do even more and not
work<00:38:13.070><c> so</c><00:38:14.070><c> if</c><00:38:14.370><c> we</c><00:38:14.520><c> run</c><00:38:14.730><c> those</c><00:38:15.000><c> different</c>

00:38:15.350 --> 00:38:15.360 align:start position:0%
work so if we run those different
 

00:38:15.360 --> 00:38:17.750 align:start position:0%
work so if we run those different
variants<00:38:15.780><c> of</c><00:38:15.870><c> the</c><00:38:16.020><c> algorithm</c><00:38:16.520><c> where</c><00:38:17.520><c> again</c>

00:38:17.750 --> 00:38:17.760 align:start position:0%
variants of the algorithm where again
 

00:38:17.760 --> 00:38:19.100 align:start position:0%
variants of the algorithm where again
all<00:38:17.970><c> we</c><00:38:18.210><c> did</c><00:38:18.360><c> was</c><00:38:18.540><c> change</c><00:38:18.600><c> the</c><00:38:18.900><c> way</c><00:38:18.990><c> we</c>

00:38:19.100 --> 00:38:19.110 align:start position:0%
all we did was change the way we
 

00:38:19.110 --> 00:38:20.390 align:start position:0%
all we did was change the way we
allocate<00:38:19.500><c> the</c><00:38:19.530><c> objects</c><00:38:19.920><c> we're</c><00:38:20.070><c> running</c><00:38:20.310><c> the</c>

00:38:20.390 --> 00:38:20.400 align:start position:0%
allocate the objects we're running the
 

00:38:20.400 --> 00:38:22.370 align:start position:0%
allocate the objects we're running the
exact<00:38:20.610><c> same</c><00:38:20.730><c> computations</c><00:38:21.330><c> when</c><00:38:21.900><c> everything</c>

00:38:22.370 --> 00:38:22.380 align:start position:0%
exact same computations when everything
 

00:38:22.380 --> 00:38:26.450 align:start position:0%
exact same computations when everything
is<00:38:22.530><c> neatly</c><00:38:22.800><c> stored</c><00:38:23.700><c> together</c><00:38:23.850><c> in</c><00:38:24.300><c> RAM</c><00:38:24.600><c> I</c><00:38:25.460><c> know</c>

00:38:26.450 --> 00:38:26.460 align:start position:0%
is neatly stored together in RAM I know
 

00:38:26.460 --> 00:38:28.610 align:start position:0%
is neatly stored together in RAM I know
the<00:38:26.610><c> algorithm</c><00:38:26.970><c> takes</c><00:38:27.150><c> about</c><00:38:27.450><c> I</c><00:38:27.480><c> think</c><00:38:27.780><c> 150</c>

00:38:28.610 --> 00:38:28.620 align:start position:0%
the algorithm takes about I think 150
 

00:38:28.620 --> 00:38:31.670 align:start position:0%
the algorithm takes about I think 150
milliseconds<00:38:29.400><c> on</c><00:38:29.550><c> a</c><00:38:29.610><c> pixel</c><00:38:30.090><c> 3</c><00:38:30.270><c> so</c><00:38:31.260><c> that's</c><00:38:31.470><c> the</c>

00:38:31.670 --> 00:38:31.680 align:start position:0%
milliseconds on a pixel 3 so that's the
 

00:38:31.680 --> 00:38:34.040 align:start position:0%
milliseconds on a pixel 3 so that's the
no<00:38:31.920><c> thrash</c><00:38:32.190><c> and</c><00:38:32.490><c> when</c><00:38:33.480><c> I</c><00:38:33.510><c> space</c><00:38:33.810><c> at</c><00:38:33.960><c> the</c>

00:38:34.040 --> 00:38:34.050 align:start position:0%
no thrash and when I space at the
 

00:38:34.050 --> 00:38:35.360 align:start position:0%
no thrash and when I space at the
allocation<00:38:34.530><c> so</c><00:38:34.680><c> that</c><00:38:34.800><c> we</c><00:38:34.920><c> can't</c><00:38:35.130><c> find</c><00:38:35.250><c> the</c>

00:38:35.360 --> 00:38:35.370 align:start position:0%
allocation so that we can't find the
 

00:38:35.370 --> 00:38:37.310 align:start position:0%
allocation so that we can't find the
data<00:38:35.550><c> we</c><00:38:35.700><c> want</c><00:38:35.730><c> in</c><00:38:36.000><c> the</c><00:38:36.120><c> l1</c><00:38:36.240><c> certainly</c><00:38:37.110><c> we're</c>

00:38:37.310 --> 00:38:37.320 align:start position:0%
data we want in the l1 certainly we're
 

00:38:37.320 --> 00:38:39.020 align:start position:0%
data we want in the l1 certainly we're
almost<00:38:37.500><c> twice</c><00:38:37.890><c> as</c><00:38:38.010><c> slow</c><00:38:38.340><c> we're</c><00:38:38.700><c> running</c><00:38:38.940><c> the</c>

00:38:39.020 --> 00:38:39.030 align:start position:0%
almost twice as slow we're running the
 

00:38:39.030 --> 00:38:41.150 align:start position:0%
almost twice as slow we're running the
same<00:38:39.240><c> exact</c><00:38:39.540><c> computations</c><00:38:40.110><c> but</c><00:38:40.620><c> we'll</c><00:38:40.800><c> do</c><00:38:41.130><c> it</c>

00:38:41.150 --> 00:38:41.160 align:start position:0%
same exact computations but we'll do it
 

00:38:41.160 --> 00:38:43.460 align:start position:0%
same exact computations but we'll do it
CPUs<00:38:41.670><c> is</c><00:38:41.820><c> busy</c><00:38:42.210><c> going</c><00:38:42.510><c> you</c><00:38:43.050><c> know</c><00:38:43.140><c> to</c><00:38:43.170><c> fetch</c>

00:38:43.460 --> 00:38:43.470 align:start position:0%
CPUs is busy going you know to fetch
 

00:38:43.470 --> 00:38:45.650 align:start position:0%
CPUs is busy going you know to fetch
data<00:38:43.500><c> in</c><00:38:43.920><c> RAM</c><00:38:44.160><c> and</c><00:38:44.400><c> if</c><00:38:45.000><c> I</c><00:38:45.150><c> space</c><00:38:45.420><c> out</c><00:38:45.570><c> the</c>

00:38:45.650 --> 00:38:45.660 align:start position:0%
data in RAM and if I space out the
 

00:38:45.660 --> 00:38:47.360 align:start position:0%
data in RAM and if I space out the
allocations<00:38:46.050><c> even</c><00:38:46.260><c> more</c><00:38:46.500><c> so</c><00:38:46.860><c> that</c><00:38:47.070><c> we</c><00:38:47.100><c> can't</c>

00:38:47.360 --> 00:38:47.370 align:start position:0%
allocations even more so that we can't
 

00:38:47.370 --> 00:38:49.550 align:start position:0%
allocations even more so that we can't
find<00:38:47.490><c> the</c><00:38:47.610><c> data</c><00:38:47.790><c> in</c><00:38:47.940><c> the</c><00:38:48.060><c> l2</c><00:38:48.210><c> now</c><00:38:48.930><c> we</c><00:38:48.990><c> are</c><00:38:49.230><c> over</c>

00:38:49.550 --> 00:38:49.560 align:start position:0%
find the data in the l2 now we are over
 

00:38:49.560 --> 00:38:50.840 align:start position:0%
find the data in the l2 now we are over
five<00:38:49.890><c> times</c><00:38:50.100><c> slower</c>

00:38:50.840 --> 00:38:50.850 align:start position:0%
five times slower
 

00:38:50.850 --> 00:38:53.450 align:start position:0%
five times slower
again<00:38:51.030><c> same</c><00:38:51.450><c> exactly</c><00:38:51.810><c> the</c><00:38:51.900><c> algorithm</c><00:38:52.500><c> so</c><00:38:53.130><c> if</c>

00:38:53.450 --> 00:38:53.460 align:start position:0%
again same exactly the algorithm so if
 

00:38:53.460 --> 00:38:55.370 align:start position:0%
again same exactly the algorithm so if
you're<00:38:53.730><c> right</c><00:38:53.940><c> benchmarks</c><00:38:54.600><c> and</c><00:38:54.840><c> that's</c><00:38:55.200><c> very</c>

00:38:55.370 --> 00:38:55.380 align:start position:0%
you're right benchmarks and that's very
 

00:38:55.380 --> 00:38:56.480 align:start position:0%
you're right benchmarks and that's very
good<00:38:55.500><c> you</c><00:38:55.650><c> should</c><00:38:55.800><c> you</c><00:38:55.980><c> should</c><00:38:56.160><c> probably</c><00:38:56.310><c> do</c>

00:38:56.480 --> 00:38:56.490 align:start position:0%
good you should you should probably do
 

00:38:56.490 --> 00:38:59.990 align:start position:0%
good you should you should probably do
that<00:38:56.550><c> be</c><00:38:57.450><c> very</c><00:38:57.960><c> careful</c><00:38:58.440><c> be</c><00:38:59.250><c> aware</c><00:38:59.490><c> of</c><00:38:59.550><c> the</c>

00:38:59.990 --> 00:39:00.000 align:start position:0%
that be very careful be aware of the
 

00:39:00.000 --> 00:39:01.520 align:start position:0%
that be very careful be aware of the
fact<00:39:00.210><c> that</c><00:39:00.510><c> the</c><00:39:00.810><c> numbers</c><00:39:01.140><c> you're</c><00:39:01.260><c> gonna</c><00:39:01.380><c> get</c>

00:39:01.520 --> 00:39:01.530 align:start position:0%
fact that the numbers you're gonna get
 

00:39:01.530 --> 00:39:03.080 align:start position:0%
fact that the numbers you're gonna get
in<00:39:01.680><c> your</c><00:39:01.710><c> benchmark</c><00:39:02.190><c> may</c><00:39:02.430><c> be</c><00:39:02.490><c> very</c><00:39:02.850><c> different</c>

00:39:03.080 --> 00:39:03.090 align:start position:0%
in your benchmark may be very different
 

00:39:03.090 --> 00:39:04.970 align:start position:0%
in your benchmark may be very different
than<00:39:03.720><c> the</c><00:39:03.870><c> numbers</c><00:39:04.140><c> are</c><00:39:04.260><c> gonna</c><00:39:04.350><c> get</c><00:39:04.590><c> in</c><00:39:04.830><c> the</c>

00:39:04.970 --> 00:39:04.980 align:start position:0%
than the numbers are gonna get in the
 

00:39:04.980 --> 00:39:06.980 align:start position:0%
than the numbers are gonna get in the
actual<00:39:05.310><c> app</c><00:39:05.490><c> running</c><00:39:05.880><c> you</c><00:39:06.660><c> know</c><00:39:06.750><c> on</c><00:39:06.960><c> your</c>

00:39:06.980 --> 00:39:06.990 align:start position:0%
actual app running you know on your
 

00:39:06.990 --> 00:39:10.730 align:start position:0%
actual app running you know on your
users<00:39:07.530><c> devices</c><00:39:09.470><c> yeah</c><00:39:10.470><c> you</c><00:39:10.590><c> actually</c>

00:39:10.730 --> 00:39:10.740 align:start position:0%
users devices yeah you actually
 

00:39:10.740 --> 00:39:13.040 align:start position:0%
users devices yeah you actually
benchmarking<00:39:11.580><c> the</c><00:39:11.790><c> the</c><00:39:12.090><c> CPU</c><00:39:12.570><c> access</c><00:39:12.840><c> better</c>

00:39:13.040 --> 00:39:13.050 align:start position:0%
benchmarking the the CPU access better
 

00:39:13.050 --> 00:39:14.870 align:start position:0%
benchmarking the the CPU access better
there's<00:39:13.410><c> a</c><00:39:13.500><c> few</c><00:39:13.650><c> access</c><00:39:13.890><c> patterns</c><00:39:14.190><c> so</c><00:39:14.730><c> and</c>

00:39:14.870 --> 00:39:14.880 align:start position:0%
there's a few access patterns so and
 

00:39:14.880 --> 00:39:16.490 align:start position:0%
there's a few access patterns so and
with<00:39:14.970><c> that</c><00:39:15.090><c> we're</c><00:39:15.270><c> done</c><00:39:15.300><c> we</c><00:39:15.750><c> have</c><00:39:15.840><c> six</c><00:39:16.170><c> seconds</c>

00:39:16.490 --> 00:39:16.500 align:start position:0%
with that we're done we have six seconds
 

00:39:16.500 --> 00:39:18.830 align:start position:0%
with that we're done we have six seconds
left<00:39:16.620><c> a</c><00:39:16.860><c> very</c><00:39:17.340><c> important</c><00:39:17.820><c> thing</c><00:39:18.030><c> if</c><00:39:18.240><c> you</c><00:39:18.450><c> are</c>

00:39:18.830 --> 00:39:18.840 align:start position:0%
left a very important thing if you are
 

00:39:18.840 --> 00:39:20.210 align:start position:0%
left a very important thing if you are
interested<00:39:19.380><c> in</c><00:39:19.440><c> what</c><00:39:19.560><c> we</c><00:39:19.680><c> talked</c><00:39:19.890><c> about</c><00:39:19.980><c> today</c>

00:39:20.210 --> 00:39:20.220 align:start position:0%
interested in what we talked about today
 

00:39:20.220 --> 00:39:21.890 align:start position:0%
interested in what we talked about today
there's<00:39:20.580><c> a</c><00:39:20.640><c> deeper</c><00:39:21.000><c> version</c><00:39:21.300><c> of</c><00:39:21.360><c> this</c><00:39:21.510><c> as</c><00:39:21.690><c> well</c>

00:39:21.890 --> 00:39:21.900 align:start position:0%
there's a deeper version of this as well
 

00:39:21.900 --> 00:39:23.360 align:start position:0%
there's a deeper version of this as well
as<00:39:22.080><c> a</c><00:39:22.110><c> lot</c><00:39:22.320><c> of</c><00:39:22.350><c> the</c><00:39:22.470><c> runtime</c><00:39:22.860><c> improvements</c>

00:39:23.360 --> 00:39:23.370 align:start position:0%
as a lot of the runtime improvements
 

00:39:23.370 --> 00:39:25.310 align:start position:0%
as a lot of the runtime improvements
they're<00:39:23.460><c> an</c><00:39:23.550><c> art</c><00:39:23.670><c> overtime</c><00:39:24.120><c> by</c><00:39:24.420><c> ladies</c><00:39:25.200><c> and</c>

00:39:25.310 --> 00:39:25.320 align:start position:0%
they're an art overtime by ladies and
 

00:39:25.320 --> 00:39:26.990 align:start position:0%
they're an art overtime by ladies and
engineers<00:39:25.650><c> on</c><00:39:25.800><c> the</c><00:39:25.830><c> art</c><00:39:26.100><c> team</c><00:39:26.430><c> so</c><00:39:26.760><c> please</c>

00:39:26.990 --> 00:39:27.000 align:start position:0%
engineers on the art team so please
 

00:39:27.000 --> 00:39:28.400 align:start position:0%
engineers on the art team so please
check<00:39:27.210><c> that</c><00:39:27.270><c> out</c><00:39:27.420><c> it's</c><00:39:27.690><c> at</c><00:39:27.780><c> the</c><00:39:27.900><c> same</c><00:39:28.080><c> time</c><00:39:28.290><c> as</c>

00:39:28.400 --> 00:39:28.410 align:start position:0%
check that out it's at the same time as
 

00:39:28.410 --> 00:39:29.750 align:start position:0%
check that out it's at the same time as
the<00:39:28.470><c> fireside</c><00:39:28.920><c> chat</c><00:39:29.100><c> which</c><00:39:29.220><c> i</c><00:39:29.340><c> think</c><00:39:29.400><c> is</c><00:39:29.610><c> at</c>

00:39:29.750 --> 00:39:29.760 align:start position:0%
the fireside chat which i think is at
 

00:39:29.760 --> 00:39:32.900 align:start position:0%
the fireside chat which i think is at
11:10<00:39:30.480><c> so</c><00:39:31.260><c> please</c><00:39:31.500><c> go</c><00:39:31.680><c> see</c><00:39:31.890><c> that</c><00:39:32.070><c> talk</c><00:39:32.370><c> as</c><00:39:32.610><c> well</c>

00:39:32.900 --> 00:39:32.910 align:start position:0%
11:10 so please go see that talk as well
 

00:39:32.910 --> 00:39:35.550 align:start position:0%
11:10 so please go see that talk as well
and<00:39:33.410><c> that's</c><00:39:34.410><c> it</c><00:39:34.560><c> thank</c><00:39:34.890><c> you</c>

00:39:35.550 --> 00:39:35.560 align:start position:0%
and that's it thank you
 

00:39:35.560 --> 00:39:36.900 align:start position:0%
and that's it thank you
[Applause]

00:39:36.900 --> 00:39:36.910 align:start position:0%
[Applause]
 

00:39:36.910 --> 00:39:53.080 align:start position:0%
[Applause]
[Music]

