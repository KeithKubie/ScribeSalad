WEBVTT
Kind: captions
Language: en

00:00:05.030 --> 00:00:07.790
MIKHAIL NAGANOV: Hi, my name
is Mikhail Naganov.

00:00:07.790 --> 00:00:09.810
I'm a software engineer
at Google working

00:00:09.810 --> 00:00:11.530
on Chrome for Android.

00:00:11.530 --> 00:00:14.880
In this video, I will talk about
building modern mobile

00:00:14.880 --> 00:00:17.260
websites using Chrome
for Android and

00:00:17.260 --> 00:00:20.070
Chrome Developer Tools.

00:00:20.070 --> 00:00:23.910
Not surprisingly, a mobile web
site runs in a browser, just

00:00:23.910 --> 00:00:26.000
as a regular website.

00:00:26.000 --> 00:00:29.120
But it's more than just a
simplified version of the

00:00:29.120 --> 00:00:31.500
desktop web site.

00:00:31.500 --> 00:00:35.230
A modern mobile website takes
advantage from the fact that

00:00:35.230 --> 00:00:37.890
it runs on a mobile device
and integrates itself

00:00:37.890 --> 00:00:39.390
tightly with it.

00:00:39.390 --> 00:00:42.740
Chrome for Android and other
mobile browsers offer APIs

00:00:42.740 --> 00:00:45.260
that allow web sites to
implement first class touch

00:00:45.260 --> 00:00:48.540
support, tactile feedback, and
provide access to the current

00:00:48.540 --> 00:00:52.060
device state, such as
orientation and geolocation.

00:00:52.060 --> 00:00:54.850
This makes it possible to create
websites that are very

00:00:54.850 --> 00:00:58.720
close by their look and feel to
native mobile applications.

00:00:58.720 --> 00:01:01.670
The question is, what are the
advantages of implementing

00:01:01.670 --> 00:01:05.660
your application as a mobile
website versus implementing it

00:01:05.660 --> 00:01:09.470
as a native application
for mobile platforms?

00:01:09.470 --> 00:01:13.450
First of all, you have to deal
with a single platform, HTML5,

00:01:13.450 --> 00:01:15.390
which is implemented
uniformly across

00:01:15.390 --> 00:01:17.250
different mobile platforms.

00:01:17.250 --> 00:01:20.060
This is a great saving of effort
if you compare it with

00:01:20.060 --> 00:01:22.510
the need of porting your native
mobile application

00:01:22.510 --> 00:01:24.850
across different implementation
stacks of

00:01:24.850 --> 00:01:27.330
various mobile platforms.

00:01:27.330 --> 00:01:31.570
Also, languages used in the
HTML5 platform, JavaScript,

00:01:31.570 --> 00:01:35.050
HTML and CSS, are high level
languages that make

00:01:35.050 --> 00:01:37.790
programming a lot easier
to compared to native

00:01:37.790 --> 00:01:40.440
applications programming.

00:01:40.440 --> 00:01:42.920
Browsers are hot at the moment,
and they are all

00:01:42.920 --> 00:01:44.730
evolving very fast.

00:01:44.730 --> 00:01:48.320
New features are added literally
every month.

00:01:48.320 --> 00:01:51.910
Having ported Chrome to the
Android platform, we intend to

00:01:51.910 --> 00:01:55.230
follow Chrome's release program
and provide beta and

00:01:55.230 --> 00:01:59.410
developer channels for you to
preview the new features.

00:01:59.410 --> 00:02:03.000
It's also simpler for users to
get access to websites, as

00:02:03.000 --> 00:02:05.640
they require no installation
procedures.

00:02:05.640 --> 00:02:08.600
And updates to new versions
are invisible because they

00:02:08.600 --> 00:02:11.850
don't need modifications
on the client.

00:02:11.850 --> 00:02:14.520
From a security standpoint, web
sites provide a different

00:02:14.520 --> 00:02:16.370
model than native
applications.

00:02:16.370 --> 00:02:18.520
They run in a browser sandbox.

00:02:18.520 --> 00:02:21.770
The user is being asked by
the browser to confirm a

00:02:21.770 --> 00:02:24.220
permission for an action,
for example, to

00:02:24.220 --> 00:02:26.350
access user's location.

00:02:26.350 --> 00:02:29.620
As soon as the action takes
place, instead of providing a

00:02:29.620 --> 00:02:31.900
long list of permissions
during applications

00:02:31.900 --> 00:02:36.000
installation, that's now what
it usually takes care of.

00:02:36.000 --> 00:02:39.310
There are several points that
you need to keep in mind while

00:02:39.310 --> 00:02:42.280
planning the development
of your mobile website.

00:02:42.280 --> 00:02:44.800
I will name the most
important of them.

00:02:44.800 --> 00:02:46.750
First of all, there are
a lot of different

00:02:46.750 --> 00:02:47.960
devices in the wild.

00:02:47.960 --> 00:02:50.510
We have cheap phones with small
screens on one side of

00:02:50.510 --> 00:02:53.350
the spectrum and high-end
phones with high density

00:02:53.350 --> 00:02:56.170
screens and tablets on the
other, and everything you can

00:02:56.170 --> 00:02:58.110
imagine in between.

00:02:58.110 --> 00:03:00.480
Not mentioning that every device
can be used in the

00:03:00.480 --> 00:03:03.340
portrait or a landscape
orientation.

00:03:03.340 --> 00:03:07.260
Obviously, your site needs to
be ready for that, and might

00:03:07.260 --> 00:03:09.230
need to provide different
layouts for

00:03:09.230 --> 00:03:11.830
different types of screens.

00:03:11.830 --> 00:03:14.540
And then touch input requires a
different strategy comparing

00:03:14.540 --> 00:03:17.070
to traditional keyboard
and mouse input.

00:03:17.070 --> 00:03:20.220
On one side it's more intuitive,
but on the other

00:03:20.220 --> 00:03:23.220
it's less precise than using the
mouse input, and typing on

00:03:23.220 --> 00:03:27.600
an on-screen keyboard is much
slower than a physical one.

00:03:27.600 --> 00:03:30.610
Mobile devices have less
computing power than regular

00:03:30.610 --> 00:03:33.190
computers, and the power
consumption question

00:03:33.190 --> 00:03:34.560
is vital for them.

00:03:34.560 --> 00:03:37.830
There should be no waste of
precious CPU cycles in your

00:03:37.830 --> 00:03:39.550
application.

00:03:39.550 --> 00:03:42.180
Network connectivity might vary
depending on where your

00:03:42.180 --> 00:03:44.000
user is situated.

00:03:44.000 --> 00:03:46.900
Your website must be prepared
to work without any network

00:03:46.900 --> 00:03:47.850
connection.

00:03:47.850 --> 00:03:51.250
Happily, most modern browsers
support offline storage and

00:03:51.250 --> 00:03:53.160
can inform your website
about the current

00:03:53.160 --> 00:03:55.830
state of the network.

00:03:55.830 --> 00:03:58.510
There is a problem that a lot of
mobile users are stuck with

00:03:58.510 --> 00:04:01.610
outdated mobile platform
releases, running old versions

00:04:01.610 --> 00:04:02.550
of browsers.

00:04:02.550 --> 00:04:05.060
But as I have mentioned earlier,
we intend to shake

00:04:05.060 --> 00:04:08.790
this situation up by updating
Chrome for Android as often as

00:04:08.790 --> 00:04:10.590
the desktop version.

00:04:10.590 --> 00:04:13.080
By the way, it's a good idea
to get the most from your

00:04:13.080 --> 00:04:15.450
desktop Chrome browser debugging
features while

00:04:15.450 --> 00:04:17.850
developing a web site
for mobile.

00:04:17.850 --> 00:04:20.890
Developing on a desktop is more
convenient and involves

00:04:20.890 --> 00:04:23.100
less set up steps.

00:04:23.100 --> 00:04:25.810
What mobile features can be
tested using Chrome Developer

00:04:25.810 --> 00:04:28.300
Tools and third party tools
on your desktop?

00:04:28.300 --> 00:04:30.080
Surprisingly, a lot.

00:04:30.080 --> 00:04:32.330
In the recent versions of Google
Chrome, you have an

00:04:32.330 --> 00:04:35.590
ability to override user agent
strings with the ones used in

00:04:35.590 --> 00:04:36.590
mobile platforms.

00:04:36.590 --> 00:04:39.000
And what's even more important,
Chrome Developer

00:04:39.000 --> 00:04:42.020
Tools can automatically adjust
your window size to the size

00:04:42.020 --> 00:04:44.060
of the device screen.

00:04:44.060 --> 00:04:48.000
Also, it's possible to emulate
touch events with your mouse.

00:04:48.000 --> 00:04:50.600
Multi-touch event simulation
is also feasible, although

00:04:50.600 --> 00:04:53.470
setting it up is more involved,
and perhaps it will

00:04:53.470 --> 00:04:55.070
be just easier for you
to test it on a

00:04:55.070 --> 00:04:57.610
physical mobile device.

00:04:57.610 --> 00:04:59.860
It's awesome that you can
develop and test the lion's

00:04:59.860 --> 00:05:02.690
share of your mobile website
functionality without even

00:05:02.690 --> 00:05:03.980
running an emulator.

00:05:03.980 --> 00:05:07.090
It would be ideal if you could
do everything on desktop, but

00:05:07.090 --> 00:05:10.340
unfortunately some of mobile
environment specific features

00:05:10.340 --> 00:05:12.820
should be tested on
real devices.

00:05:12.820 --> 00:05:15.180
Of course, you can't provide
the same interaction

00:05:15.180 --> 00:05:18.020
experience from desktop, just
because your desktop or laptop

00:05:18.020 --> 00:05:21.380
computers feel differently
from mobile devices.

00:05:21.380 --> 00:05:24.530
For your website to provide
intuitive interaction, it must

00:05:24.530 --> 00:05:27.660
work with a real device and
strive to make the interaction

00:05:27.660 --> 00:05:30.490
as natural as possible.

00:05:30.490 --> 00:05:33.270
Obviously, hardware platforms
of mobile devices are

00:05:33.270 --> 00:05:35.770
significantly different
from desktop boxes.

00:05:35.770 --> 00:05:39.150
And actions that are performed
with ease by powerful desktop

00:05:39.150 --> 00:05:42.010
processors may significantly
slow down

00:05:42.010 --> 00:05:44.200
their mobile siblings.

00:05:44.200 --> 00:05:47.470
Not mentioning the GPU
acceleration pipeline is

00:05:47.470 --> 00:05:50.390
different on mobile devices.

00:05:50.390 --> 00:05:53.570
As with regular web site
development, you need to test

00:05:53.570 --> 00:05:57.190
your site on real browsers,
because even despite the fact

00:05:57.190 --> 00:06:00.440
that many of them are based on
the same rendering engine,

00:06:00.440 --> 00:06:03.140
differences in versions
and vendor patches may

00:06:03.140 --> 00:06:07.150
significantly affect the
behavior of the website.

00:06:07.150 --> 00:06:10.365
And the last important point is
network connectivity, that

00:06:10.365 --> 00:06:12.620
I have mentioned before.

00:06:12.620 --> 00:06:14.820
Although it's possible to try
to simulate different

00:06:14.820 --> 00:06:17.880
networking conditions on your
desktop by inserting

00:06:17.880 --> 00:06:21.910
artificial delays into network
packets processing, or drop in

00:06:21.910 --> 00:06:26.140
packets, the setup of such tools
is usually complicated.

00:06:26.140 --> 00:06:28.890
While on a real device, you
can easily switch between

00:06:28.890 --> 00:06:32.670
wi-fi, 3G, and 2G network
connections to model network

00:06:32.670 --> 00:06:36.750
conditions that end
users may have.

00:06:36.750 --> 00:06:38.560
And now let's proceed
to the most exciting

00:06:38.560 --> 00:06:39.530
part of this video.

00:06:39.530 --> 00:06:40.330
Demos.

00:06:40.330 --> 00:06:43.560
I will be using the laptop
computer and a tablet running

00:06:43.560 --> 00:06:45.490
Android Ice Cream Sandwich with

00:06:45.490 --> 00:06:46.820
Google Chrome for Android.

00:06:50.500 --> 00:06:53.320
Here we have a simple web page
that draws a rotating Chrome

00:06:53.320 --> 00:06:56.770
logo using HTML5
canvas element.

00:06:56.770 --> 00:06:59.980
And you can interact with this
Chrome logo by touching it.

00:06:59.980 --> 00:07:02.730
You can slow down its rotation
by putting your

00:07:02.730 --> 00:07:03.990
finger on it like this.

00:07:09.700 --> 00:07:13.150
You can also resize it by
holding it with one finger and

00:07:13.150 --> 00:07:15.040
dragging the second
one like this.

00:07:22.450 --> 00:07:25.320
Let's see what can be tested
on your desktop by using

00:07:25.320 --> 00:07:28.110
mobile features emulation,
available in the latest

00:07:28.110 --> 00:07:30.210
version of Chrome
Developer Tools.

00:07:30.210 --> 00:07:33.000
If you're a web developer, we
strongly encourage you using

00:07:33.000 --> 00:07:36.080
Chrome Developer channel
releases, or Chrome Canary

00:07:36.080 --> 00:07:38.230
releases to get access to
the latest features

00:07:38.230 --> 00:07:39.630
that we have in Chrome.

00:07:39.630 --> 00:07:44.130
Now I'm running my page on the
desktop version of Chrome.

00:07:44.130 --> 00:07:47.230
Let's open Chrome
Developer Tools,

00:07:47.230 --> 00:07:49.930
then open their settings.

00:07:49.930 --> 00:07:53.580
And here you can see the user
agent group of settings.

00:07:53.580 --> 00:07:56.940
By using it, we can emulate
screen sizes of mobile devices

00:07:56.940 --> 00:08:00.250
and emulate touch events
using the mouse.

00:08:00.250 --> 00:08:04.030
After I set my user agent
setting to Nexus S and have

00:08:04.030 --> 00:08:08.260
device metrics override enabled,
you can see the tab

00:08:08.260 --> 00:08:10.860
running the application will
have the same pixel dimensions

00:08:10.860 --> 00:08:14.410
as the screen of a Nexus S4.

00:08:14.410 --> 00:08:17.030
And they can switch between
portrait and landscape

00:08:17.030 --> 00:08:20.978
orientations by pressing
this button.

00:08:20.978 --> 00:08:25.190
Touch events emulation is also
pretty straightforward.

00:08:25.190 --> 00:08:27.360
You just need to check the
corresponding check

00:08:27.360 --> 00:08:29.330
box, and that's it.

00:08:29.330 --> 00:08:31.860
Pressing the left mouse button
will generate touchstart,

00:08:31.860 --> 00:08:33.300
touchmove, and touchend
events.

00:08:38.840 --> 00:08:41.440
Setting up for remote web
debugging is really easy.

00:08:41.440 --> 00:08:43.620
First you need to make your
website accessible to your

00:08:43.620 --> 00:08:44.570
mobile device.

00:08:44.570 --> 00:08:46.990
To achieve this, I will connect
my laptop and my

00:08:46.990 --> 00:08:51.050
tablet to the same
Wi-Fi router.

00:08:51.050 --> 00:08:53.360
And I have a website running
on my laptop.

00:08:53.360 --> 00:08:55.300
And in order to connect
it, I need to know

00:08:55.300 --> 00:08:58.250
my laptop's IP address.

00:08:58.250 --> 00:09:01.730
Now I'm entering the address in
Chrome on the tablet, and

00:09:01.730 --> 00:09:04.445
here is my application.

00:09:04.445 --> 00:09:07.790
For setting up remote web
debugging, we need to perform

00:09:07.790 --> 00:09:09.240
several steps.

00:09:09.240 --> 00:09:13.100
These steps are documented on
the Google Developers site.

00:09:13.100 --> 00:09:15.660
First, you need to connect
your device to your host

00:09:15.660 --> 00:09:18.200
machine using a USB wire.

00:09:18.200 --> 00:09:21.245
Then, you need to enable USB
debugging in the device

00:09:21.245 --> 00:09:25.980
settings and enable USB web
debugging in Chrome.

00:09:25.980 --> 00:09:29.380
Chrome for Android will open a
port for remote debugging, and

00:09:29.380 --> 00:09:31.980
you will need to forward this
port to your host machine in

00:09:31.980 --> 00:09:34.770
order to be able
to connect it.

00:09:34.770 --> 00:09:38.160
You will need to have Android
SDK platform tools installed

00:09:38.160 --> 00:09:40.170
on your host machine.

00:09:40.170 --> 00:09:43.150
And after that, you will be able
to navigate to the remote

00:09:43.150 --> 00:09:44.800
debugging landing
page from your

00:09:44.800 --> 00:09:47.110
Chrome browser on desktop.

00:09:47.110 --> 00:09:49.490
So I'm connecting my tablet
to the laptop by USB.

00:09:55.210 --> 00:09:59.550
Now I'm going to the
DY settings and

00:09:59.550 --> 00:10:00.800
enabling remote debugging.

00:10:03.880 --> 00:10:08.680
It's also recommended to enable
the stay awake setting

00:10:08.680 --> 00:10:10.580
so your screen will
not go to sleep.

00:10:13.840 --> 00:10:18.000
Now in Chrome, I'm going to
the Settings panel and

00:10:18.000 --> 00:10:22.040
enabling remote debugging
there.

00:10:22.040 --> 00:10:24.777
After that, your mobile
device is all set up.

00:10:31.740 --> 00:10:36.450
On my laptop, I'm issuing a port
forwarding command, and

00:10:36.450 --> 00:10:40.200
my local port, 9222, is being
forwarded to the remote web

00:10:40.200 --> 00:10:43.860
debugging port opened by
Chrome on the tablet.

00:10:43.860 --> 00:10:48.050
So when I'm navigating to local
host 9222 on my laptop,

00:10:48.050 --> 00:10:50.630
I'm getting straight to the
remote debugging landing page,

00:10:50.630 --> 00:10:51.880
and can start debugging.

00:10:55.150 --> 00:10:57.650
So let's check how
our application

00:10:57.650 --> 00:11:00.670
works on the tablet.

00:11:00.670 --> 00:11:03.550
To our surprise, the touch
handling code that was working

00:11:03.550 --> 00:11:06.550
pretty well on the desktop
doesn't behave as it should on

00:11:06.550 --> 00:11:07.560
the tablet.

00:11:07.560 --> 00:11:08.810
Let's investigate that.

00:11:11.470 --> 00:11:14.620
In the Developer Tools I'm going
to the Event Listener

00:11:14.620 --> 00:11:17.480
Breakpoints sidebar and setting
a breakpoint on the

00:11:17.480 --> 00:11:19.660
touchmove event.

00:11:19.660 --> 00:11:21.810
Now when I touch the
application, the debugger

00:11:21.810 --> 00:11:25.380
breaks into my application
execution at the entry point

00:11:25.380 --> 00:11:26.650
of the event handler.

00:11:26.650 --> 00:11:30.360
Now I'm using Developer Tools'
live editing feature to insert

00:11:30.360 --> 00:11:32.740
some logging into my
event handlers.

00:11:32.740 --> 00:11:36.170
As I press Command+S, the code
is being sent to the device.

00:11:42.810 --> 00:11:45.940
Now I'm switching to the console
tab, and here I can

00:11:45.940 --> 00:11:47.760
watch in real time how my event

00:11:47.760 --> 00:11:49.770
handlers are being invoked.

00:11:49.770 --> 00:11:52.750
You can see as I'm touching
the screen, I see console

00:11:52.750 --> 00:11:56.030
messages appear in
the console.

00:11:56.030 --> 00:11:57.420
Now we can see the problem.

00:11:57.420 --> 00:12:01.260
Our application only receives
a touchstart event, a couple

00:12:01.260 --> 00:12:04.290
of touch moves, and
no touchend.

00:12:04.290 --> 00:12:06.620
I'm running a developer version
of Chrome for Android,

00:12:06.620 --> 00:12:10.050
and it seems to have a problem
with following touch events.

00:12:10.050 --> 00:12:12.610
This doesn't happen in the
desktop version of Chrome.

00:12:12.610 --> 00:12:16.880
That's why on the desktop, our
application was working fine.

00:12:16.880 --> 00:12:20.440
Actually, what you anyway need
to do in the touchmove handler

00:12:20.440 --> 00:12:23.040
is to call event.preventDefault
in order

00:12:23.040 --> 00:12:24.960
to prevent the browser
from attempting

00:12:24.960 --> 00:12:27.110
to scroll your content.

00:12:27.110 --> 00:12:29.850
This prevents the touchmove
event from being processed by

00:12:29.850 --> 00:12:33.820
the browser, and it just
passes the event to our

00:12:33.820 --> 00:12:36.050
application.

00:12:36.050 --> 00:12:39.000
So now after sending this
change to the tablet by

00:12:39.000 --> 00:12:41.880
pressing Command+S, the
application should start

00:12:41.880 --> 00:12:44.050
working properly.

00:12:44.050 --> 00:12:47.840
Yes, it works, and we have
finally tested the behavior in

00:12:47.840 --> 00:12:48.760
multi-touch.

00:12:48.760 --> 00:12:51.730
It also works great.

00:12:51.730 --> 00:12:54.150
Now let's try to take a CPU
profile of the same

00:12:54.150 --> 00:12:57.800
application running on a desktop
machine and on tablet,

00:12:57.800 --> 00:13:01.350
and see if we can spot
any differences.

00:13:01.350 --> 00:13:05.450
As drawing a Chrome logo isn't
a very CPU intensive task,

00:13:05.450 --> 00:13:08.270
I'll add a code that displays
ten thousands of points on the

00:13:08.270 --> 00:13:11.480
screen, setting their color
depending on whether they get

00:13:11.480 --> 00:13:14.370
into the Chrome logo or not.

00:13:14.370 --> 00:13:17.970
I'm selecting the line of code
and invoking Evaluate in

00:13:17.970 --> 00:13:20.280
Console command on it.

00:13:20.280 --> 00:13:24.990
As you can see, the frame rate
has dropped significantly.

00:13:24.990 --> 00:13:28.320
Now I'm doing the same
thing on the tablet.

00:13:28.320 --> 00:13:31.310
Here the frame rate drop is even
more visible, as the CPU

00:13:31.310 --> 00:13:34.510
is slower than on the laptop.

00:13:34.510 --> 00:13:38.870
Now let's take CPU profiles on
both devices and compare them.

00:13:38.870 --> 00:13:41.480
First I'll make the size of
the window on the desktop

00:13:41.480 --> 00:13:46.470
browser the same as on my
tablet, 1280 by 800, with the

00:13:46.470 --> 00:13:48.610
help of Developer Tools.

00:13:48.610 --> 00:13:52.190
Then I'll make radiuses of
Chrome logos to match.

00:13:52.190 --> 00:13:55.490
I will look at the size in the
console for the mobile side

00:13:55.490 --> 00:13:57.740
and copy the value to
the desktop side.

00:14:11.610 --> 00:14:15.400
Now I'm starting CPU profiling
for the site running in the

00:14:15.400 --> 00:14:18.300
desktop browser.

00:14:18.300 --> 00:14:20.310
OK, we're done.

00:14:20.310 --> 00:14:24.652
Now I'm doing the same for the
mobile browser remotely.

00:14:24.652 --> 00:14:25.620
Done.

00:14:25.620 --> 00:14:27.715
Let's compare the profiles
side by side.

00:14:31.580 --> 00:14:35.780
What you can see is that time
shares for the same functions

00:14:35.780 --> 00:14:37.550
are significantly different
between

00:14:37.550 --> 00:14:39.710
desktop and mobile versions.

00:14:39.710 --> 00:14:42.130
The function named program
is the native code

00:14:42.130 --> 00:14:45.610
of the browser itself.

00:14:45.610 --> 00:14:48.090
This may happen due to
several reasons.

00:14:48.090 --> 00:14:51.810
Different CPUs, different
versions of the V8 Javascript

00:14:51.810 --> 00:14:56.910
engine used, and differences
in X86 versus code

00:14:56.910 --> 00:15:00.010
generation in V8.

00:15:00.010 --> 00:15:02.700
This experiment confirms my
statement that running and

00:15:02.700 --> 00:15:05.500
debugging your site on a real
device provides a great

00:15:05.500 --> 00:15:08.730
insight and reveals new aspects
of the site behavior

00:15:08.730 --> 00:15:12.570
that can't be seen while
debugging on desktop.

00:15:12.570 --> 00:15:15.940
Thanks to Chrome for Android
USB debugging feature, the

00:15:15.940 --> 00:15:18.650
experience that you have is
as good as for the desktop

00:15:18.650 --> 00:15:20.120
version of Chrome.

00:15:20.120 --> 00:15:22.270
Thank you very much for
watching this video.

00:15:22.270 --> 00:15:24.320
For your convenience, here
I'm providing some

00:15:24.320 --> 00:15:26.330
useful links for you.

00:15:26.330 --> 00:15:29.660
First of all, we have a page on
the Google Developer site

00:15:29.660 --> 00:15:31.690
that contains the setup
instructions

00:15:31.690 --> 00:15:34.040
for remote web debugging.

00:15:34.040 --> 00:15:37.530
If you want to know more about
using Chrome Developer Tools,

00:15:37.530 --> 00:15:41.120
there is a section on Google
Developers site for you.

00:15:41.120 --> 00:15:44.920
If you happen to be on Google
I/O, I would highly recommend

00:15:44.920 --> 00:15:48.290
attending the Chrome Developer
Tools session for a deep dive

00:15:48.290 --> 00:15:51.450
into advanced development
techniques.

00:15:51.450 --> 00:15:52.190
That's it.

00:15:52.190 --> 00:15:53.440
Thank you and goodbye.

