WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:05.920
Pretty hard to understand PageSpeed
Insights and related components.

00:00:05.920 --> 00:00:06.720
Any advice?

00:00:08.060 --> 00:00:08.760
Okay, yeah.

00:00:08.760 --> 00:00:12.590
So, PageSpeed Insight does
sometimes give you these sort of,

00:00:14.580 --> 00:00:18.180
I guess,
vague problems about your website.

00:00:18.180 --> 00:00:23.820
They might just say, you know,
eliminate render blocking CSS or

00:00:23.820 --> 00:00:26.340
eliminate render blocking JavaScript.

00:00:26.340 --> 00:00:28.800
And then it kind of gives you some
hints on what that means, but

00:00:28.800 --> 00:00:33.910
it never really gives you a clear
guideline on, okay, go and fix this.

00:00:33.910 --> 00:00:39.324
So I would say the first thing
to do is to definitely read what

00:00:39.324 --> 00:00:45.480
PageSpeed Insights gives you as
information about those things.

00:00:45.480 --> 00:00:49.470
Then go back and look at your code and
see if you can pick out any parts of

00:00:49.470 --> 00:00:52.720
your code that sort of match
with what they've described.

00:00:52.720 --> 00:00:58.800
For example, if you have render blocking
CSS that means that you have components

00:00:58.800 --> 00:01:03.360
in your CSS that are preventing
your entire page from rendering.

00:01:03.360 --> 00:01:08.040
So you need to go and
look at what particular CSS script

00:01:08.040 --> 00:01:10.370
is the one that's causing
this render blocking.

00:01:10.370 --> 00:01:14.080
You can kind of do that by
taking them out one at a time or

00:01:14.080 --> 00:01:16.230
you can come up with some
clever ways to do that.

00:01:16.230 --> 00:01:20.460
Do you have any insights on
the best way to interpret and

00:01:20.460 --> 00:01:23.310
use PageSpeed Insights, Turner?

00:01:23.310 --> 00:01:26.360
&gt;&gt; Yeah, that's great advice John.

00:01:26.360 --> 00:01:29.440
And, if you ever have a question about
something you can also Google for

00:01:29.440 --> 00:01:33.130
the exact phrase and you'll probably
find a wealth of extra pages

00:01:34.640 --> 00:01:36.960
on minimizing the critical
rendering path, beside and

00:01:36.960 --> 00:01:39.170
in addition to what you
learned in the course.

00:01:39.170 --> 00:01:41.400
So, that never hurts in
case you're extra curious,

00:01:41.400 --> 00:01:45.100
but a lot of times,
hopefully it does refer to

00:01:45.100 --> 00:01:47.420
new terminology that
you've learned of course.

00:01:47.420 --> 00:01:52.080
But when it doesn't, certainly just go
look it up and see if it's applicable,

00:01:52.080 --> 00:01:54.490
learn a new thing here and there.

00:01:54.490 --> 00:01:59.540
&gt;&gt; Can we load different images with
different compression levels while using

00:01:59.540 --> 00:02:02.852
different devices or
different screen resolutions.

00:02:02.852 --> 00:02:05.784
[LAUGH]
&gt;&gt; But that way it's going to be

00:02:05.784 --> 00:02:10.610
taking responsive images and
wants to really optimize this.

00:02:10.610 --> 00:02:15.170
&gt;&gt; The answer to that is absolutely,
yes you can.

00:02:15.170 --> 00:02:17.230
So it's a little trickier.

00:02:17.230 --> 00:02:21.930
You have to utilize, CSS to

00:02:21.930 --> 00:02:27.310
serve the appropriate images as opposed
to hard coding them in your HTML.

00:02:27.310 --> 00:02:31.670
You can also do it with JavaScript but

00:02:31.670 --> 00:02:37.390
I prefer using CSS to render
those kinds of images.

00:02:37.390 --> 00:02:40.950
And then while using different devices
with different screen resolution, yeah,

00:02:40.950 --> 00:02:44.500
you're going to have to look into using
media queries for that kind of stuff.

00:02:44.500 --> 00:02:48.090
And serving your images
with media queries and CSS.

00:02:48.090 --> 00:02:52.560
In terms of actually creating
all these different images for

00:02:52.560 --> 00:02:56.110
all these different devices and
different screen resolutions,

00:02:56.110 --> 00:03:00.420
if you haven't looked at the responsive
images course yet, you totally should.

00:03:00.420 --> 00:03:05.260
Cameron breaks down how to use
task runners like Grunt, for

00:03:05.260 --> 00:03:07.720
example, to automate all of this.

00:03:07.720 --> 00:03:10.885
And you don't have to sit there and
tweak a bunch of images by

00:03:10.885 --> 00:03:15.400
hand in some photo editor hoping
that they're rendered correctly.

00:03:15.400 --> 00:03:19.124
Different events on the page that
change the render tree would cause

00:03:19.124 --> 00:03:21.150
a new layout event each time.

00:03:21.150 --> 00:03:23.950
We could increase or speed, supposedly,

00:03:23.950 --> 00:03:27.073
by using batch updates
according to the video.

00:03:27.073 --> 00:03:32.094
Yeah, so Liam, what this means is,
we can create these JavaScript

00:03:32.094 --> 00:03:36.689
events that basically manipulate
our DOM or our render tree.

00:03:38.580 --> 00:03:42.158
And the more times we call those events,

00:03:42.158 --> 00:03:46.265
the more times we're
re-accessing the DOM,

00:03:46.265 --> 00:03:51.350
changing something, and
then redrawing the tree.

00:03:51.350 --> 00:03:54.630
Basically creating a new
layout event each time.

00:03:54.630 --> 00:03:57.052
What they mean by batch updates is,

00:03:57.052 --> 00:04:01.817
you want to create basically a function
or some sort of methods that do as

00:04:01.817 --> 00:04:07.140
much of this as possible without
accessing the DOM multiple times.

00:04:07.140 --> 00:04:11.357
A good way to do this is when you
access a DOM, the DOM elements,

00:04:11.357 --> 00:04:16.790
you actually put those in a variable and
then you manipulate that variable.

00:04:16.790 --> 00:04:20.087
And that way you only call the up
document object model once.

00:04:20.087 --> 00:04:24.540
And then you make all the changes you
want and then all the updates happen.

00:04:24.540 --> 00:04:27.160
And then the layout event happens.

00:04:27.160 --> 00:04:32.860
because every time you take
requests from the DOM,

00:04:32.860 --> 00:04:37.030
it has to process all those
changes that have been previously.

00:04:37.030 --> 00:04:42.450
And, so you'll actually notice
this in the pizza page.

00:04:42.450 --> 00:04:46.150
For example, with the moving
pieces in the background.

00:04:46.150 --> 00:04:49.553
Pay close attention to how many times
you're actually accessing your document

00:04:49.553 --> 00:04:51.050
object model.

00:04:51.050 --> 00:04:55.605
Because it's a lot, and if you can
reduce the number of times that that

00:04:55.605 --> 00:05:01.550
query selector is selecting everything,
the faster you're page is going to load,

00:05:01.550 --> 00:05:04.930
and you'll be amazed at how much faster,
too.

00:05:04.930 --> 00:05:11.119
It literally goes from a couple
seconds to a couple milliseconds.

00:05:12.130 --> 00:05:16.736
&gt;&gt; Do we not care about frames
per second for page loading.

00:05:16.736 --> 00:05:18.666
&gt;&gt; Yes, so this thing is,

00:05:18.666 --> 00:05:23.596
there are two fixes that you
have to do in your main.js file.

00:05:23.596 --> 00:05:28.460
If you had read the comments,
Cameron has given you that.

00:05:28.460 --> 00:05:33.296
There are two fixes to do in main.js,
and they are completely pertaining

00:05:33.296 --> 00:05:38.330
how you scroll through through the page
and how the pizza sizes changes.

00:05:38.330 --> 00:05:41.874
And how the background pizzas
move around in the page.

00:05:41.874 --> 00:05:46.730
So, whenever you scroll up and down you
can see the background pizzas moving.

00:05:46.730 --> 00:05:53.190
So, that is one area where there
is a major fix to be carried out.

00:05:53.190 --> 00:05:57.943
So for this project and for
this particular solution we

00:05:57.943 --> 00:06:02.488
are only looking for
scrolling over the page, up and

00:06:02.488 --> 00:06:06.534
down the page, and
then resizing the pizzas.

00:06:06.534 --> 00:06:10.786
So, yeah,
you should only worry about that,

00:06:10.786 --> 00:06:14.941
don't be too concerned
about page loading.

