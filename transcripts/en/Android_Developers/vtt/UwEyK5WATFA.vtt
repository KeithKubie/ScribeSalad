WEBVTT
Kind: captions
Language: en

00:00:07.510 --> 00:00:08.750
Good morning, everyone.

00:00:08.750 --> 00:00:10.910
Thanks for joining us today.

00:00:10.910 --> 00:00:12.260
My name is Adrian Roos.

00:00:12.260 --> 00:00:14.830
I'm a software engineer
on the Android framework

00:00:14.830 --> 00:00:15.750
ADRIAN ROOS: Team.

00:00:15.750 --> 00:00:16.480
ANDRII KULIAN: I'm Andrii.

00:00:16.480 --> 00:00:18.610
I'm also software engineer
on Android Frameworks,

00:00:18.610 --> 00:00:20.530
and I work on the multi display.

00:00:20.530 --> 00:00:22.690
JISUN PARK: Hi, I'm Jisun
from Samsung Mobile.

00:00:22.690 --> 00:00:25.219
I'm Engineering Director.

00:00:25.219 --> 00:00:27.010
ADRIAN ROOS: So by now,
I'm sure you've all

00:00:27.010 --> 00:00:28.960
seen the announcement
that we are

00:00:28.960 --> 00:00:33.490
partnering with Samsung to make
foldables a thing on Android.

00:00:33.490 --> 00:00:36.550
Today, we're diving a bit
deeper into what that means

00:00:36.550 --> 00:00:39.970
and what we're doing to support
new developers with targeting

00:00:39.970 --> 00:00:43.930
foldable devices and
similar form factors.

00:00:43.930 --> 00:00:46.990
Jisun is here to talk a bit
more about what Samsung is doing

00:00:46.990 --> 00:00:50.200
and share more information
about their device.

00:00:50.200 --> 00:00:53.320
So with that, I'm going
to hand it over to Jisun.

00:00:53.320 --> 00:00:54.760
JISUN PARK: OK, thanks.

00:00:54.760 --> 00:00:56.830
Thank you.

00:00:56.830 --> 00:01:00.450
So again, I'm Jisun
from Samsung Mobile.

00:01:00.450 --> 00:01:04.480
And I'm going to talk about the
new form factor device which

00:01:04.480 --> 00:01:07.870
we actually announce yesterday
at the Samsung Developer

00:01:07.870 --> 00:01:09.310
Conference in Moscone Center.

00:01:15.310 --> 00:01:15.810
OK.

00:01:15.810 --> 00:01:20.980
So I will cover more information
about the device itself.

00:01:20.980 --> 00:01:23.760
And also, we'll talk
about the experience

00:01:23.760 --> 00:01:25.770
the new foldable device
will bring to the users.

00:01:28.760 --> 00:01:30.860
We all know that
the smartphone has

00:01:30.860 --> 00:01:35.730
been providing new experiences
for the last 10 years.

00:01:35.730 --> 00:01:39.330
And it actually changed
the way people think,

00:01:39.330 --> 00:01:42.446
act, and also, communicate.

00:01:42.446 --> 00:01:46.250
Additionally, It also opened
up a lot of new opportunities

00:01:46.250 --> 00:01:48.500
for the developers.

00:01:48.500 --> 00:01:50.990
Now we believe a
foldable phone is

00:01:50.990 --> 00:01:53.540
one of the next
game-changers, which

00:01:53.540 --> 00:01:56.960
will provide a very unique
experience to the users

00:01:56.960 --> 00:02:00.200
and also new opportunities
for the developers

00:02:00.200 --> 00:02:02.360
to drive innovations.

00:02:06.200 --> 00:02:10.800
So now let's talk about the
first Samsung foldable phone.

00:02:10.800 --> 00:02:13.430
The first Samsung
foldable phone is

00:02:13.430 --> 00:02:17.270
designed to be a multi-display
with two screens,

00:02:17.270 --> 00:02:22.640
and also support multi-window
for better experienced user

00:02:22.640 --> 00:02:24.330
experience.

00:02:24.330 --> 00:02:27.020
So let's take our
first to look at what

00:02:27.020 --> 00:02:29.600
the actual configuration of
the display on the device

00:02:29.600 --> 00:02:30.200
looks like.

00:02:32.792 --> 00:02:38.160
So this is the main display
when the device is unfolded.

00:02:38.160 --> 00:02:41.050
The main display is
large enough to provide

00:02:41.050 --> 00:02:43.510
a very unique experience.

00:02:43.510 --> 00:02:47.810
With just more
surface, the experience

00:02:47.810 --> 00:02:51.342
becomes richer and
more immersive.

00:02:51.342 --> 00:02:54.640
The experience was
hardly achievable,

00:02:54.640 --> 00:02:57.800
even from the existing
larger screen smartphones.

00:03:01.230 --> 00:03:05.300
In addition to the richer
and immersive experience

00:03:05.300 --> 00:03:09.880
from a single large
screen, true multitasking

00:03:09.880 --> 00:03:13.450
will become also available
to utilize this larger

00:03:13.450 --> 00:03:16.435
screen with up to three
multi-active windows.

00:03:21.270 --> 00:03:23.540
When the phone is
actually folded,

00:03:23.540 --> 00:03:30.540
we still have very useful and
portable cover display to use.

00:03:30.540 --> 00:03:33.420
In this mode, the
experience is very

00:03:33.420 --> 00:03:36.750
similar to your
daily smartphone use.

00:03:36.750 --> 00:03:39.270
But compared to
the main display,

00:03:39.270 --> 00:03:45.120
the experience is more
to be focused in handy

00:03:45.120 --> 00:03:48.150
and click interaction
to actually leverage

00:03:48.150 --> 00:03:49.080
the small screen.

00:03:53.570 --> 00:03:56.420
Having said that,
here are some numbers

00:03:56.420 --> 00:04:00.240
that you may be interested in.

00:04:00.240 --> 00:04:02.330
This is the specs
and the dimensions

00:04:02.330 --> 00:04:04.100
of the actual screens.

00:04:04.100 --> 00:04:11.510
So 4.58-inch cover display
provides 21 to 9 HD plus

00:04:11.510 --> 00:04:15.590
resolution with the
420 dpi screen density,

00:04:15.590 --> 00:04:19.829
and 320 dp smallest width.

00:04:19.829 --> 00:04:27.600
7.3-inch main display support,
4:2:3 QXGA plus resolution with

00:04:27.600 --> 00:04:33.840
the same 428 dpi screen density
with 585 dp smallest width.

00:04:33.840 --> 00:04:35.910
These are the numbers
you may need to know.

00:04:39.600 --> 00:04:42.160
I will show you
some expected user

00:04:42.160 --> 00:04:43.840
experience with some examples.

00:04:48.330 --> 00:04:52.530
Comparing the user experience
between the existing smartphone

00:04:52.530 --> 00:04:58.170
and foldable main display,
this foldable phone

00:04:58.170 --> 00:05:02.310
can actually locate wider
and larger display access

00:05:02.310 --> 00:05:06.540
to the application, and it
actually enables the contents

00:05:06.540 --> 00:05:09.810
on the screen to be a
richer and more detailed,

00:05:09.810 --> 00:05:11.160
as you can see from this screen.

00:05:15.417 --> 00:05:19.195
On the cover screen
when device is folded,

00:05:19.195 --> 00:05:22.690
I said the experience
can be optimized

00:05:22.690 --> 00:05:26.736
to provide a quick and
easy access and interaction

00:05:26.736 --> 00:05:29.010
while the devices
are still fully

00:05:29.010 --> 00:05:34.170
functional like a
normal smartphone.

00:05:34.170 --> 00:05:38.400
Access to the kick panel
or notification or call

00:05:38.400 --> 00:05:42.690
or messages are good examples
to highlight the best

00:05:42.690 --> 00:05:45.260
use of the cover display.

00:05:45.260 --> 00:05:48.370
We know that you may not want
to just unfold your phone

00:05:48.370 --> 00:05:50.250
to take an incoming call.

00:05:54.720 --> 00:05:58.610
While the cover display
and main display, each one

00:05:58.610 --> 00:06:03.060
provides its own very
unique experience by itself,

00:06:03.060 --> 00:06:09.820
the experiences between them are
not separate nor disconnected.

00:06:09.820 --> 00:06:14.270
Rather, the user experience
between the displays

00:06:14.270 --> 00:06:17.230
is very continuous and
connected seamlessly.

00:06:24.190 --> 00:06:25.990
As an example, if
we want to search

00:06:25.990 --> 00:06:29.290
for the location of
Moscone Center from a map,

00:06:29.290 --> 00:06:33.274
you can do that with
your phone folded.

00:06:33.274 --> 00:06:35.590
However, if you
unfold your phone,

00:06:35.590 --> 00:06:38.770
the application still
continues to run.

00:06:38.770 --> 00:06:41.830
Even more, unfolding
the phone actually

00:06:41.830 --> 00:06:45.466
provide more information
with more visual clues

00:06:45.466 --> 00:06:48.890
like what are nearby,
and what's the location

00:06:48.890 --> 00:06:50.735
to the other point of interest.

00:06:53.990 --> 00:06:56.690
Using the Gallery
app is similar.

00:06:56.690 --> 00:06:59.900
The app experience continues
between the folded mode

00:06:59.900 --> 00:07:01.550
and also unfolded mode.

00:07:06.450 --> 00:07:09.410
Multi-active windows
for multitasking

00:07:09.410 --> 00:07:15.250
is also one of the key features
of the Affordable iPhone.

00:07:15.250 --> 00:07:18.070
While watching a
YouTube video, if you

00:07:18.070 --> 00:07:23.830
want to browse a website,
you can just open a browser

00:07:23.830 --> 00:07:28.970
and browse the website while
your video keeps playing.

00:07:28.970 --> 00:07:33.270
Moreover, if your friend
actually sends a message,

00:07:33.270 --> 00:07:36.800
and the message notification
pops up, what you can do

00:07:36.800 --> 00:07:41.120
is just to grab the message
and drag it to a third window

00:07:41.120 --> 00:07:46.560
like this to continue
chatting and browsing

00:07:46.560 --> 00:07:48.150
while your video keeps playing.

00:07:51.114 --> 00:07:55.220
So we have discussed
the expected experience

00:07:55.220 --> 00:07:57.870
with the new affordable device.

00:07:57.870 --> 00:08:01.970
So now Adrian from Google will
talk about developer guide

00:08:01.970 --> 00:08:04.430
and also, some Android
platform [INAUDIBLE]

00:08:04.430 --> 00:08:07.340
support to make your
applications better

00:08:07.340 --> 00:08:09.267
fit for the foldables.

00:08:09.267 --> 00:08:11.100
ADRIAN ROOS: Thanks for
sharing that, Jisun.

00:08:13.750 --> 00:08:15.686
[APPLAUSE]

00:08:19.080 --> 00:08:22.310
So let's talk a bit more about
how you can take advantage

00:08:22.310 --> 00:08:26.520
of foldables in your apps
and kind of the guidelines

00:08:26.520 --> 00:08:29.615
that we would commence to do so.

00:08:29.615 --> 00:08:32.309
So first up is
screen continuity.

00:08:32.309 --> 00:08:37.230
Screen continuity is what we
call the concept of continuing

00:08:37.230 --> 00:08:39.630
what you're currently doing
after you fold or unfold

00:08:39.630 --> 00:08:40.169
the device.

00:08:43.470 --> 00:08:47.220
For example, you
have a map you're

00:08:47.220 --> 00:08:50.905
looking at on a
folded device, and you

00:08:50.905 --> 00:08:53.280
would like to see maybe a bit
more about the surroundings

00:08:53.280 --> 00:08:54.680
of the place you're looking at.

00:08:54.680 --> 00:08:57.020
So as a user, you
unfold the phone.

00:08:57.020 --> 00:08:59.180
And with a continuous
experience,

00:08:59.180 --> 00:09:01.350
you are still looking
at the same place,

00:09:01.350 --> 00:09:05.010
your state is
maintained, and the phone

00:09:05.010 --> 00:09:07.800
can take now a bit more
advantage of the form factor

00:09:07.800 --> 00:09:11.130
and show you more about what's
going on around this place.

00:09:11.130 --> 00:09:15.540
And this is actually not really
a new thing in Android, right?

00:09:15.540 --> 00:09:18.210
We've had to deal with
similar situations

00:09:18.210 --> 00:09:24.030
before where things like screen
rotation or changing screen

00:09:24.030 --> 00:09:24.750
sizes--

00:09:24.750 --> 00:09:28.777
or sorry-- changing window
size and multi-window.

00:09:32.433 --> 00:09:34.680
So why should you
care about continuity

00:09:34.680 --> 00:09:35.680
when you build your app?

00:09:35.680 --> 00:09:38.665
Well, users unfold their
devices for a reason.

00:09:41.350 --> 00:09:43.340
And usually, that's
because they want to dive

00:09:43.340 --> 00:09:46.450
deeper into the task
they're currently doing.

00:09:46.450 --> 00:09:50.210
So that really works
best when they are not

00:09:50.210 --> 00:09:52.880
interrupted in their
experience in doing so,

00:09:52.880 --> 00:09:56.690
and can continue where they
left off before unfolding.

00:09:56.690 --> 00:09:58.970
So for a satisfying
user experience,

00:09:58.970 --> 00:10:03.020
it's really important
that this works well.

00:10:03.020 --> 00:10:03.860
That seems great.

00:10:03.860 --> 00:10:06.330
So now how do you
actually pull this off?

00:10:06.330 --> 00:10:10.110
Well, as I said, Android
is familiar with this,

00:10:10.110 --> 00:10:12.380
and we've built a
configuration change system

00:10:12.380 --> 00:10:14.120
to deal with that.

00:10:14.120 --> 00:10:15.710
Folding and unfolding
the device will

00:10:15.710 --> 00:10:19.370
be treated as a configuration
change in the screen size

00:10:19.370 --> 00:10:21.650
and screen layout categories.

00:10:21.650 --> 00:10:26.240
And to support you with that,
the Android system by default

00:10:26.240 --> 00:10:29.660
recreates your activities when
a configuration change happens.

00:10:32.250 --> 00:10:36.390
This has the advantage of taking
care of any layout changes

00:10:36.390 --> 00:10:40.140
you might want to make
when taking advantage

00:10:40.140 --> 00:10:41.670
of the new configuration.

00:10:41.670 --> 00:10:46.140
But it also means that you
are responsible for restoring

00:10:46.140 --> 00:10:51.000
the state the user was in after
the activities we created.

00:10:51.000 --> 00:10:54.480
To support you with that, we
have to on$aveInstanceState

00:10:54.480 --> 00:10:59.190
facility, and we're also
introducing a new Jetpack

00:10:59.190 --> 00:11:03.490
library called ViewModel
to support you with that.

00:11:03.490 --> 00:11:05.740
Alternatively, you
could also decide

00:11:05.740 --> 00:11:08.290
to handle the configuration
change yourself

00:11:08.290 --> 00:11:13.120
by just applying it and
adjusting your layout.

00:11:13.120 --> 00:11:14.985
To do that, you can
declare that you

00:11:14.985 --> 00:11:17.110
can handle the configuration
change in your Android

00:11:17.110 --> 00:11:18.390
manifest.

00:11:18.390 --> 00:11:21.760
But that means that you'll
have to manually adjust

00:11:21.760 --> 00:11:26.378
the layout, the new screen
size, and new configuration.

00:11:26.378 --> 00:11:28.360
And for the best
experience, make

00:11:28.360 --> 00:11:32.230
sure to correctly implement
multi-window and declare

00:11:32.230 --> 00:11:33.850
your activity as sizable.

00:11:37.265 --> 00:11:40.080
Now, next stop, we're
making some changes

00:11:40.080 --> 00:11:42.300
to the lifecycle
in multi-window.

00:11:42.300 --> 00:11:45.260
You can see the current
behavior on the left.

00:11:45.260 --> 00:11:49.160
And that is that only the
activity that the user last

00:11:49.160 --> 00:11:51.860
touched is in the resumed
state, while all the others are

00:11:51.860 --> 00:11:53.552
in the past state.

00:11:53.552 --> 00:11:56.180
Now that's a bit
confusing to users

00:11:56.180 --> 00:12:00.650
because it's not immediately
obvious why one activity is

00:12:00.650 --> 00:12:03.260
a bit more interactive
and the other activities

00:12:03.260 --> 00:12:06.230
are in a less interactive state.

00:12:06.230 --> 00:12:08.480
And it's also one
more thing you have

00:12:08.480 --> 00:12:13.020
to keep in mind as a developer
when you target multi-window.

00:12:13.020 --> 00:12:17.886
So to make things simpler, we're
introducing multi-resume mode.

00:12:17.886 --> 00:12:21.190
And multi-resume mode,
it's pretty simple, really.

00:12:21.190 --> 00:12:23.110
All the activities
in multi-window

00:12:23.110 --> 00:12:25.480
that are at the
top and are visible

00:12:25.480 --> 00:12:27.220
are all in the resume state.

00:12:30.760 --> 00:12:33.340
Now, Android Pie didn't
ship this with this behavior

00:12:33.340 --> 00:12:36.940
originally, and so we're
making this an opt-in behavior

00:12:36.940 --> 00:12:38.550
in the Android Pie.

00:12:38.550 --> 00:12:42.420
It will only be applied if
both the app developer opt in

00:12:42.420 --> 00:12:44.860
and the device
manufacturer actually

00:12:44.860 --> 00:12:49.342
implements this feature
according to our spec.

00:12:49.342 --> 00:12:52.010
But note that in future
versions of Android,

00:12:52.010 --> 00:12:58.490
we are expecting to make this
behavior the mandatory behavior

00:12:58.490 --> 00:13:01.539
across all apps and
devices that run

00:13:01.539 --> 00:13:02.830
on the next version of Android.

00:13:06.127 --> 00:13:09.090
So let's say you have an app
and want to take advantage

00:13:09.090 --> 00:13:11.070
of the simplified lifecycle.

00:13:11.070 --> 00:13:13.320
How do you opt in?

00:13:13.320 --> 00:13:14.790
Well, again, it's pretty simple.

00:13:14.790 --> 00:13:20.211
You add this one flag to
your Android manifest.

00:13:20.211 --> 00:13:22.780
There's one caveat, though,
because there are now

00:13:22.780 --> 00:13:26.030
multiple activities that could
be resumed at the same time.

00:13:26.030 --> 00:13:28.090
It could also be that it's
more than one activity

00:13:28.090 --> 00:13:30.020
from your apps process.

00:13:30.020 --> 00:13:32.530
And so be really
cautious around code

00:13:32.530 --> 00:13:36.430
that stores the one resumed
activity, because there might

00:13:36.430 --> 00:13:38.270
now be more than one of those.

00:13:38.270 --> 00:13:41.470
And also be cautious around
libraries and frameworks

00:13:41.470 --> 00:13:43.462
that might make the
same assumptions.

00:13:46.696 --> 00:13:48.180
And with that, I'm
going to hand it

00:13:48.180 --> 00:13:51.434
back over to Andrii, who's going
to talk about multi-display.

00:13:54.784 --> 00:13:56.275
[APPLAUSE]

00:13:58.225 --> 00:13:59.600
ANDRII KULIAN:
Thank you, Adrian.

00:13:59.600 --> 00:14:04.516
So let's talk a bit more
about multi-screen devices.

00:14:04.516 --> 00:14:06.990
So as you know,
starting with Android O,

00:14:06.990 --> 00:14:09.960
an activity can be launched
on a non-default display.

00:14:09.960 --> 00:14:12.496
Let's see what it actually
means for your activity.

00:14:16.470 --> 00:14:20.360
First of all, when an activity
is on a non-default display,

00:14:20.360 --> 00:14:22.700
it means that the
activity context, which

00:14:22.700 --> 00:14:24.410
is a visible
entity, is different

00:14:24.410 --> 00:14:27.680
from non-visual application
context also available

00:14:27.680 --> 00:14:30.870
from broadcast receivers
and content providers.

00:14:30.870 --> 00:14:32.870
The context of a
visible entity will

00:14:32.870 --> 00:14:36.420
be always adjusted for the
display area where it is shown.

00:14:36.420 --> 00:14:41.000
For example, if you use the same
API to get the current display,

00:14:41.000 --> 00:14:45.100
and use different context
types to ask for it,

00:14:45.100 --> 00:14:46.790
you will get different results.

00:14:46.790 --> 00:14:50.650
The current display you can
get is from the activity.

00:14:50.650 --> 00:14:53.382
And the application
context will always

00:14:53.382 --> 00:14:54.590
give you the default display.

00:14:57.910 --> 00:15:00.580
Different contexts also
mean different resources

00:15:00.580 --> 00:15:01.915
and configurations.

00:15:01.915 --> 00:15:04.490
They will be automatically
updated for you.

00:15:04.490 --> 00:15:06.490
All you need to do is
just to request them

00:15:06.490 --> 00:15:08.380
from the correct context.

00:15:08.380 --> 00:15:11.680
Usually, when you want to
adjust your you UX for metrics

00:15:11.680 --> 00:15:13.910
of the currently
available screen area,

00:15:13.910 --> 00:15:15.340
you should be using an activity.

00:15:19.250 --> 00:15:22.670
Keep in mind that a user may
move your activity from one

00:15:22.670 --> 00:15:24.860
screen to another at any point.

00:15:24.860 --> 00:15:26.990
In most cases, you
can expect displays

00:15:26.990 --> 00:15:30.410
to have different sizes,
densities, and resolutions.

00:15:30.410 --> 00:15:32.390
This means that an
activity that was moved

00:15:32.390 --> 00:15:34.430
will probably get the
configuration change,

00:15:34.430 --> 00:15:36.690
as Adrian has covered before.

00:15:36.690 --> 00:15:38.720
And if declared to
handle the change,

00:15:38.720 --> 00:15:40.670
it will be notified
with the new config.

00:15:40.670 --> 00:15:44.030
If not, it will be relaunched.

00:15:44.030 --> 00:15:47.030
To deliver the best possible
experience, both for foldable

00:15:47.030 --> 00:15:49.190
and for multi-display
devices, we really

00:15:49.190 --> 00:15:51.380
encourage you to handle
configuration changes

00:15:51.380 --> 00:15:52.750
whenever it's possible.

00:15:52.750 --> 00:15:54.740
And if your app
really needs to know

00:15:54.740 --> 00:15:57.260
what display it is
currently on, you

00:15:57.260 --> 00:16:00.560
can check in onCreate and
onConfigurationChanged.

00:16:00.560 --> 00:16:02.060
These are good
points to do that.

00:16:05.820 --> 00:16:07.860
So what if you want
to take advantage

00:16:07.860 --> 00:16:09.120
of these additional screens?

00:16:09.120 --> 00:16:10.360
How do you use them?

00:16:10.360 --> 00:16:11.970
So the first step
is to actually get

00:16:11.970 --> 00:16:14.520
the list of all displays that
are available in the system

00:16:14.520 --> 00:16:16.390
by checking with
display manager.

00:16:16.390 --> 00:16:19.930
The displays will have many
different characteristics.

00:16:19.930 --> 00:16:22.860
So you can check their
flags, metrics, and state

00:16:22.860 --> 00:16:25.240
to find the one that
suits your needs.

00:16:25.240 --> 00:16:28.110
For example, you can
look for a live screen

00:16:28.110 --> 00:16:31.230
to present your media content,
or filter out the displays that

00:16:31.230 --> 00:16:32.010
are currently off.

00:16:34.970 --> 00:16:37.580
One you have determined what
display you want to use,

00:16:37.580 --> 00:16:40.310
you can launch activity there
using the activity options

00:16:40.310 --> 00:16:43.580
API available in
Android O. Remember

00:16:43.580 --> 00:16:46.460
that all existing intent
resolution and launch mode

00:16:46.460 --> 00:16:48.030
rules still apply.

00:16:48.030 --> 00:16:50.900
So for example, if you want a
new instance of an activity,

00:16:50.900 --> 00:16:53.090
you may want to use
corresponding flags in Android

00:16:53.090 --> 00:16:55.800
manifest to allow
multiple instances

00:16:55.800 --> 00:16:57.650
and use new tasks
for this launch.

00:17:00.460 --> 00:17:03.370
Sometimes, the system may
restrict activity launches

00:17:03.370 --> 00:17:04.720
to some certain displays.

00:17:04.720 --> 00:17:06.910
For example, private displays.

00:17:06.910 --> 00:17:09.240
In this case, a call
to start an activity

00:17:09.240 --> 00:17:11.170
will throw a security exception.

00:17:11.170 --> 00:17:14.326
You can expect this and wrap
the start with [INAUDIBLE]..

00:17:17.810 --> 00:17:20.690
Remember that there are
several platforms that actually

00:17:20.690 --> 00:17:22.640
have multi-display devices.

00:17:22.640 --> 00:17:24.800
Phones with different
screen configurations

00:17:24.800 --> 00:17:28.045
is just one example that
we have covered today.

00:17:28.045 --> 00:17:30.570
Next, there is desktop mode,
when you connect your phone

00:17:30.570 --> 00:17:35.350
to a larger screen for improved
productivity or entertainment.

00:17:35.350 --> 00:17:38.360
Another example is Android
apps running on Chrome OS.

00:17:38.360 --> 00:17:40.830
In both of these cases,
the apps are usually

00:17:40.830 --> 00:17:43.020
running in free-form
windowing mode,

00:17:43.020 --> 00:17:48.575
and the user expects them to be
freely and smoothly realizable.

00:17:48.575 --> 00:17:51.730
Last but not least is
automotive Android.

00:17:51.730 --> 00:17:53.620
There may be many
screens in the car

00:17:53.620 --> 00:17:55.450
and multiple users
may be interacting

00:17:55.450 --> 00:17:57.730
with different displays
at the same time.

00:17:57.730 --> 00:17:59.760
For example, kids
in the backseat

00:17:59.760 --> 00:18:02.110
may be playing the
same or different games

00:18:02.110 --> 00:18:05.125
while the driver is
using navigation.

00:18:05.125 --> 00:18:07.080
For apps in general,
there shouldn't

00:18:07.080 --> 00:18:10.200
be too many differences on
what platform it's running on.

00:18:10.200 --> 00:18:13.800
To verify your app behavior,
on any Android device running

00:18:13.800 --> 00:18:16.440
O or above, you can
create a simulated display

00:18:16.440 --> 00:18:19.690
through developer options and
launch your activity there.

00:18:19.690 --> 00:18:22.210
Unfortunately, at this
moment, simulated display

00:18:22.210 --> 00:18:23.640
does not handle touch.

00:18:23.640 --> 00:18:26.340
We are working on improving
this experience in the upcoming

00:18:26.340 --> 00:18:27.280
releases.

00:18:27.280 --> 00:18:29.400
And we are going to be
adding new developer tools.

00:18:33.310 --> 00:18:35.440
With all these new and
existing platforms,

00:18:35.440 --> 00:18:38.260
you can choose to simply
optimize your app,

00:18:38.260 --> 00:18:41.170
or build some unique
multi-screen experience.

00:18:41.170 --> 00:18:43.930
You can decide whether you want
to support multiple activity

00:18:43.930 --> 00:18:48.840
instances, test your app, and
set corresponding launch modes.

00:18:48.840 --> 00:18:51.810
Don't forget that in this
case, multiple activities

00:18:51.810 --> 00:18:55.350
may be focused and receive
user input at the same time.

00:18:55.350 --> 00:18:58.050
Also, consider using the
shared source of data

00:18:58.050 --> 00:19:00.240
with multiple view
models in your app,

00:19:00.240 --> 00:19:03.230
and take advantage of other
architecture components.

00:19:03.230 --> 00:19:06.368
[INAUDIBLE]

00:19:06.368 --> 00:19:08.296
ADRIAN ROOS: Thanks, Andrii.

00:19:08.296 --> 00:19:10.224
[APPLAUSE]

00:19:10.224 --> 00:19:12.299
So we've talked about
what's available today.

00:19:12.299 --> 00:19:13.840
Let's also look a
bit more about what

00:19:13.840 --> 00:19:15.756
we're going to do in the
future to support you

00:19:15.756 --> 00:19:20.460
with targeting foldable
and multi-display devices.

00:19:20.460 --> 00:19:21.790
In the short term--

00:19:21.790 --> 00:19:25.210
this applies mostly
for Android Pie--

00:19:25.210 --> 00:19:28.090
we're working on
developer guidelines,

00:19:28.090 --> 00:19:33.890
and we're going to show you
how to best target foldables

00:19:33.890 --> 00:19:37.670
and multi-display devices.

00:19:37.670 --> 00:19:39.810
We're also working
on a blog post that's

00:19:39.810 --> 00:19:41.817
going to go live in the
following days which

00:19:41.817 --> 00:19:43.650
we'll have more information
about everything

00:19:43.650 --> 00:19:46.382
we talked about.

00:19:46.382 --> 00:19:47.840
And we're also
working with Samsung

00:19:47.840 --> 00:19:50.870
to release an emulator where
we can develop and test

00:19:50.870 --> 00:19:54.230
your apps against the
configuration change

00:19:54.230 --> 00:19:56.410
behaviors and the
multi-resume behaviors

00:19:56.410 --> 00:19:59.540
that their device
is going to have.

00:20:02.620 --> 00:20:06.180
Looking a bit more
into the future

00:20:06.180 --> 00:20:09.030
with future versions
of Android, we're

00:20:09.030 --> 00:20:12.300
implementing support
in AOSP for foldables

00:20:12.300 --> 00:20:15.260
and mounted display devices.

00:20:15.260 --> 00:20:17.370
And as part of this,
we're also going

00:20:17.370 --> 00:20:21.600
to improve the AOSP emulator
so it will have support

00:20:21.600 --> 00:20:25.050
for assimilating all those
foldable and multi display

00:20:25.050 --> 00:20:27.971
behaviors as Andrii
also mentioned.

00:20:31.579 --> 00:20:37.730
Finally, some pointers on where
you can find more information.

00:20:37.730 --> 00:20:39.330
In the following
days, as I mentioned,

00:20:39.330 --> 00:20:42.210
we'll have this blog post up.

00:20:42.210 --> 00:20:44.540
There's also a
Samsung developer site

00:20:44.540 --> 00:20:47.360
where you will find more
information about Samsung's

00:20:47.360 --> 00:20:49.340
devices and their guidelines.

00:20:49.340 --> 00:20:53.690
And for testing your
apps, the Samsung emulator

00:20:53.690 --> 00:20:57.410
will also be available on
their website sometime in Q4.

00:21:00.679 --> 00:21:01.516
OK.

00:21:01.516 --> 00:21:03.390
At this point, I would
also like to thank you

00:21:03.390 --> 00:21:06.360
for all the amazing experiences
you developers are building

00:21:06.360 --> 00:21:07.980
for Android.

00:21:07.980 --> 00:21:10.960
And we're really excited to
see what you will do next

00:21:10.960 --> 00:21:13.200
and what you will create
next on this new form

00:21:13.200 --> 00:21:15.100
factor of foldable devices.

00:21:15.100 --> 00:21:16.110
Thank you.

00:21:16.110 --> 00:21:18.260
[APPLAUSE]

