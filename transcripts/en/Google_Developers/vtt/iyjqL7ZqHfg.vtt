WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.450
[MUSIC PLAYING]

00:00:00.450 --> 00:00:03.290
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:00:03.290 --> 00:00:04.240
development community.

00:00:04.240 --> 00:00:05.080
FEMALE SPEAKER 1: I'm
glad somebody

00:00:05.080 --> 00:00:06.320
has asked this question.

00:00:06.320 --> 00:00:07.600
MALE SPEAKER 2: This is where
the magic happens.

00:00:07.600 --> 00:00:08.800
FEMALE SPEAKER 2: This is
primarily a question and

00:00:08.800 --> 00:00:10.640
answer show, so if any
of you out there

00:00:10.640 --> 00:00:11.890
would like to ask questions.

00:00:16.730 --> 00:00:17.560
VIC: Hello everyone.

00:00:17.560 --> 00:00:19.360
Welcome back to Google
Developers Live.

00:00:19.360 --> 00:00:19.910
I'm Vic.

00:00:19.910 --> 00:00:22.350
I work on the Google
Drive SDK team.

00:00:22.350 --> 00:00:25.450
Today I'm going to be going
through how to work with Go

00:00:25.450 --> 00:00:27.390
and the Google Drive SDK.

00:00:27.390 --> 00:00:29.560
So what we're going to do is
walk through our Quickstart

00:00:29.560 --> 00:00:33.730
tutorial on writing a command
line application in Google's

00:00:33.730 --> 00:00:39.070
Go language so that we can
upload a file to Google Drive

00:00:39.070 --> 00:00:40.880
by running a simple command.

00:00:40.880 --> 00:00:44.700
So here I have up the Google
Drive SDK documentation,

00:00:44.700 --> 00:00:47.510
specifically our Quickstart
section.

00:00:47.510 --> 00:00:50.340
And it enumerates all of the
steps that you need to do in

00:00:50.340 --> 00:00:51.840
order to get running.

00:00:51.840 --> 00:00:55.770
This tutorial usually takes
about five minutes or less.

00:00:55.770 --> 00:00:58.320
I'll see how fast I
can do it today.

00:00:58.320 --> 00:01:01.500
But it pretty much involves
four steps.

00:01:01.500 --> 00:01:04.370
You're going to create an API
console project in the Google

00:01:04.370 --> 00:01:09.150
API's console, enabling the
Drive API for that project.

00:01:09.150 --> 00:01:12.380
You're going to install the
Google Go Client Library.

00:01:12.380 --> 00:01:14.470
You're going to set up the Go
sample, and then you're going

00:01:14.470 --> 00:01:15.770
to run the Go sample.

00:01:15.770 --> 00:01:20.710
So if we come down here, the
first step is to create an API

00:01:20.710 --> 00:01:22.930
project in the APIs console,
which is linked here.

00:01:22.930 --> 00:01:24.940
I have it open.

00:01:24.940 --> 00:01:29.260
So you can come up here and
create a new project.

00:01:29.260 --> 00:01:31.475
And I will call this Google
Developers Live.

00:01:34.480 --> 00:01:37.230
And if I create a project--

00:01:37.230 --> 00:01:39.470
it just takes a second here.

00:01:39.470 --> 00:01:41.970
And here we go.

00:01:41.970 --> 00:01:45.460
So the first thing I have to
do in the project is enable

00:01:45.460 --> 00:01:46.880
the Drive API.

00:01:46.880 --> 00:01:49.490
So let me just flip that on.

00:01:49.490 --> 00:01:51.400
And that's it.

00:01:51.400 --> 00:01:55.740
So now that I've enabled the
drive API, I have to also set

00:01:55.740 --> 00:01:57.640
up API access.

00:01:57.640 --> 00:02:00.180
So what we're going to do here
is set up our OAuth 2.0

00:02:00.180 --> 00:02:03.170
credentials and allow the
command line application to

00:02:03.170 --> 00:02:06.470
actually access Google
Drive after the user

00:02:06.470 --> 00:02:08.419
authorizes a request.

00:02:08.419 --> 00:02:10.970
So I'm going to click this big
blue button here to create an

00:02:10.970 --> 00:02:12.810
OAuth 2 client ID--

00:02:12.810 --> 00:02:16.240
and Google Developers Live.

00:02:16.240 --> 00:02:18.440
I don't have a product logo.

00:02:18.440 --> 00:02:19.510
Click Next.

00:02:19.510 --> 00:02:21.960
Now this is super important.

00:02:21.960 --> 00:02:24.980
When you get to the client ID
settings, you have to select

00:02:24.980 --> 00:02:28.040
the application type of
installed application, and not

00:02:28.040 --> 00:02:29.310
web application.

00:02:29.310 --> 00:02:31.060
Web application is a little
bit different.

00:02:31.060 --> 00:02:34.670
It's meant for our other
flagship sample, which is the

00:02:34.670 --> 00:02:37.620
DrEdit web application sample.

00:02:37.620 --> 00:02:39.170
But we're not writing web
applications today.

00:02:39.170 --> 00:02:41.340
We're writing a command
line application.

00:02:41.340 --> 00:02:42.730
So that's an installed app.

00:02:42.730 --> 00:02:44.670
And then it's not an
Android or iOS app,

00:02:44.670 --> 00:02:45.810
so we just use Other.

00:02:45.810 --> 00:02:48.500
And then Create client ID.

00:02:48.500 --> 00:02:50.030
And then that's it.

00:02:50.030 --> 00:02:52.090
So right here, I have the
client ID for installed

00:02:52.090 --> 00:02:52.670
applications.

00:02:52.670 --> 00:02:55.010
And here, you can see my
client ID and secret.

00:02:55.010 --> 00:02:56.030
So these are going
to be important

00:02:56.030 --> 00:02:58.100
in just a few minutes.

00:02:58.100 --> 00:02:59.450
Once we've got that done,
we're done in

00:02:59.450 --> 00:03:00.590
the Google APIs console.

00:03:00.590 --> 00:03:02.360
Come back to the
documentation.

00:03:02.360 --> 00:03:04.420
And the next step is
to install the

00:03:04.420 --> 00:03:06.170
Google Go Client Library.

00:03:06.170 --> 00:03:08.590
I've already run these commands
on my workstation

00:03:08.590 --> 00:03:10.080
here, but I'm just going
to run them again.

00:03:10.080 --> 00:03:12.300
Nothing's going to happen.

00:03:12.300 --> 00:03:17.200
So you can see, I've already got
the Google Go API Client

00:03:17.200 --> 00:03:18.710
Library installed.

00:03:18.710 --> 00:03:21.410
So with that done, the next
thing I'm going to do is

00:03:21.410 --> 00:03:23.410
actually add the source code.

00:03:23.410 --> 00:03:25.180
So I've got this source
code copied and

00:03:25.180 --> 00:03:29.370
pasted here into main.go.

00:03:29.370 --> 00:03:32.990
If I take a look at this,
you can see just a

00:03:32.990 --> 00:03:34.140
bunch of source code.

00:03:34.140 --> 00:03:37.210
There are two things that we
have to change in this file.

00:03:37.210 --> 00:03:40.340
If you download or copy and
paste the tutorial code,

00:03:40.340 --> 00:03:43.130
you'll see these two strings
here, your client ID and your

00:03:43.130 --> 00:03:44.240
client secret.

00:03:44.240 --> 00:03:46.230
These are the only two things
that you have to change in the

00:03:46.230 --> 00:03:49.370
source code to get it to work
for your application.

00:03:49.370 --> 00:03:53.640
And what you do is come here to
the Google APIs console and

00:03:53.640 --> 00:03:56.170
copy your installed application
client ID and

00:03:56.170 --> 00:03:57.500
client secret.

00:03:57.500 --> 00:04:01.220
And then you paste to those
into the source code where

00:04:01.220 --> 00:04:02.730
appropriate, here.

00:04:02.730 --> 00:04:03.610
And that's it.

00:04:03.610 --> 00:04:05.940
So everything else you
can leave alone.

00:04:05.940 --> 00:04:08.400
I'm going to leave the rest of
source code alone for now.

00:04:08.400 --> 00:04:10.030
And then we'll come back and
look at that in a minute.

00:04:10.030 --> 00:04:12.860
The other thing we're going to
need to do before we can run

00:04:12.860 --> 00:04:15.610
the sample is actually create
a file to upload.

00:04:15.610 --> 00:04:18.120
So here I've got document.txt.

00:04:18.120 --> 00:04:20.980
And it says "hello world,"
so that's good enough.

00:04:20.980 --> 00:04:23.490
And that's the file I'm
going to upload.

00:04:23.490 --> 00:04:25.930
So with that, the last thing
to do is actually run the

00:04:25.930 --> 00:04:27.260
sample, which we document
right here.

00:04:27.260 --> 00:04:30.552
It's a simple command,
go run main.go.

00:04:30.552 --> 00:04:34.160
So if I run this, the first
thing the application is going

00:04:34.160 --> 00:04:37.740
to do is ask me to browse
to this URL.

00:04:37.740 --> 00:04:40.360
And we'll talk a little bit more
about what that means.

00:04:40.360 --> 00:04:42.830
Essentially, we need to the
application to have

00:04:42.830 --> 00:04:44.830
an OAuth 2.0 token.

00:04:44.830 --> 00:04:46.950
And it doesn't have one
on the initial run.

00:04:46.950 --> 00:04:49.150
So because it doesn't have one
on the initial run, it asks us

00:04:49.150 --> 00:04:52.380
as the user to browse to this
URL in a web browser and then

00:04:52.380 --> 00:04:53.690
click Allow Access.

00:04:53.690 --> 00:04:57.820
What this is going to do
is grant a token to our

00:04:57.820 --> 00:05:01.100
application via this
authorization code.

00:05:01.100 --> 00:05:03.770
So we're going to copy this
authorization code back into

00:05:03.770 --> 00:05:07.930
the application, which is
secure, waiting for our input.

00:05:07.930 --> 00:05:10.430
And with that, the application
is going to upload

00:05:10.430 --> 00:05:14.570
document.txt up into
Google Drive.

00:05:14.570 --> 00:05:15.240
There it is.

00:05:15.240 --> 00:05:16.570
We can see here that
it was created with

00:05:16.570 --> 00:05:19.500
this ID and this title.

00:05:19.500 --> 00:05:20.770
So if that's the title--

00:05:20.770 --> 00:05:22.590
let me go into Google
Drive here.

00:05:22.590 --> 00:05:25.560
And right now you see
nothing here.

00:05:25.560 --> 00:05:28.980
Let me refresh.

00:05:28.980 --> 00:05:29.940
And here's our document.

00:05:29.940 --> 00:05:34.370
If I open this up, you can see
here that there's no preview

00:05:34.370 --> 00:05:36.430
available, but this is
our test document

00:05:36.430 --> 00:05:38.230
that was just created.

00:05:38.230 --> 00:05:41.300
So that's pretty much it for
how the sample works.

00:05:41.300 --> 00:05:44.010
Now let's take a look through
the source code and see just

00:05:44.010 --> 00:05:44.990
what's going on.

00:05:44.990 --> 00:05:50.090
So if I come back here to the
tutorial source code, the

00:05:50.090 --> 00:05:52.740
first part of the source code,
primarily, is a set of

00:05:52.740 --> 00:05:56.280
imports, and then
a configuration.

00:05:56.280 --> 00:05:59.160
The configuration is somewhat
important because that's where

00:05:59.160 --> 00:06:01.130
you set your client
ID and secret.

00:06:01.130 --> 00:06:04.890
Everything else here is not
super critical for getting

00:06:04.890 --> 00:06:07.160
started with this command
line application.

00:06:07.160 --> 00:06:12.120
And then here what we're doing
is generating the URL to visit

00:06:12.120 --> 00:06:14.580
for authorization, which
is this step here.

00:06:14.580 --> 00:06:18.510
It's generating the URL that the
user browses to to grant

00:06:18.510 --> 00:06:22.200
an authorization code
and get a token for

00:06:22.200 --> 00:06:24.340
the subsequent requests.

00:06:24.340 --> 00:06:30.090
So once we do that, we generate
that and print it.

00:06:30.090 --> 00:06:32.320
So go to the following link to
your browser, and then there's

00:06:32.320 --> 00:06:33.320
the authURL.

00:06:33.320 --> 00:06:35.040
Once you print it, the user
browses to it, and then we

00:06:35.040 --> 00:06:36.910
receive some input
from the user.

00:06:36.910 --> 00:06:38.660
So we scan that line.

00:06:38.660 --> 00:06:43.380
And the rest of this is just
error checking, if the code

00:06:43.380 --> 00:06:47.280
doesn't exchange, for
a granted token, or

00:06:47.280 --> 00:06:48.880
anything like that.

00:06:48.880 --> 00:06:51.290
So now we create a new
authorized Drive client.

00:06:51.290 --> 00:06:52.680
This is very straightforward.

00:06:52.680 --> 00:06:55.410
If there's an error,
we show the error.

00:06:55.410 --> 00:06:57.620
And then we create
a new Drive file.

00:06:57.620 --> 00:06:59.610
And we're going to set its title
to "My Document," as we

00:06:59.610 --> 00:07:01.810
saw before, and its description
to "My test

00:07:01.810 --> 00:07:05.360
document." With that
done, we open

00:07:05.360 --> 00:07:07.590
document.txt with a file pointer.

00:07:07.590 --> 00:07:13.230
And then all we do is
insert the file

00:07:13.230 --> 00:07:15.810
using the Drive service.

00:07:15.810 --> 00:07:19.650
And once that's done, we get a
JSON representation of that

00:07:19.650 --> 00:07:22.220
new file back, and all of its
metadata, including things

00:07:22.220 --> 00:07:25.590
like ID and title
and description.

00:07:25.590 --> 00:07:28.310
And here, we just want to
print its ID and title.

00:07:28.310 --> 00:07:31.260
So you can see that that's
exactly what was printed out

00:07:31.260 --> 00:07:35.140
here at the end of the
program execution.

00:07:35.140 --> 00:07:39.830
So that's the Go Quickstart
sample.

00:07:39.830 --> 00:07:42.600
Now once you've gotten to this
point, there are some next

00:07:42.600 --> 00:07:44.330
steps you could take.

00:07:44.330 --> 00:07:47.220
So we have full support for
obviously a number of other

00:07:47.220 --> 00:07:51.550
features in Google Drive that
you can access via the SDK.

00:07:51.550 --> 00:07:57.160
So once you've gotten the hang
of this, I recommend you maybe

00:07:57.160 --> 00:07:58.600
extend this application
to do something

00:07:58.600 --> 00:08:00.330
like download a file.

00:08:00.330 --> 00:08:03.340
Which is a little
bit different.

00:08:03.340 --> 00:08:06.700
When you download a file, you
have to do more than just this

00:08:06.700 --> 00:08:09.300
one line of code.

00:08:09.300 --> 00:08:11.230
You have to let the
user know--

00:08:11.230 --> 00:08:13.810
let the user provide you
which file to download.

00:08:13.810 --> 00:08:16.100
And then you have to go and you
have to fetch it, getting

00:08:16.100 --> 00:08:18.940
its download URL, and then
downloading the actual

00:08:18.940 --> 00:08:21.420
contents of file locally.

00:08:21.420 --> 00:08:23.140
So that's a little
bit different.

00:08:23.140 --> 00:08:26.280
You could also clean up the
authorization mechanism.

00:08:26.280 --> 00:08:28.630
So right now, as a user of this
application, I have to

00:08:28.630 --> 00:08:32.190
come in here and copy this URL,
paste it into the web

00:08:32.190 --> 00:08:34.850
browser, and then in a web
browser, I have to click Allow

00:08:34.850 --> 00:08:37.549
Access and copy the
authorization code back into

00:08:37.549 --> 00:08:38.659
the application.

00:08:38.659 --> 00:08:41.659
That's pretty tedious
for a user.

00:08:41.659 --> 00:08:46.710
So instead what we could do is
a fire up the web browser on

00:08:46.710 --> 00:08:47.960
behalf of the user.

00:08:47.960 --> 00:08:52.510
So for instance, we could open
Google Chrome directly to the

00:08:52.510 --> 00:08:54.070
authorization page.

00:08:54.070 --> 00:08:57.460
And then we could start a local
web server on the user's

00:08:57.460 --> 00:09:01.560
computer in order to have the
authorization page at Google

00:09:01.560 --> 00:09:04.660
redirect back to the user's
local computer.

00:09:04.660 --> 00:09:06.270
And with the web browser
running, we could actually

00:09:06.270 --> 00:09:09.830
receive the authorization code
straight from Google.

00:09:09.830 --> 00:09:12.270
So this means that the user
wouldn't have to paste this

00:09:12.270 --> 00:09:14.230
authorization code into the
application, but our web

00:09:14.230 --> 00:09:16.190
browser that we have running
locally would be

00:09:16.190 --> 00:09:17.910
able to pick it up.

00:09:17.910 --> 00:09:20.090
So that's something that a lot
of people do with an installed

00:09:20.090 --> 00:09:20.640
application.

00:09:20.640 --> 00:09:22.040
It's not that hard to do.

00:09:22.040 --> 00:09:24.010
You just have to start of the
web browser for the user,

00:09:24.010 --> 00:09:26.900
which there's plenty of
frameworks to do.

00:09:26.900 --> 00:09:31.390
On Linux, you could for instance
use xdgopen, and then

00:09:31.390 --> 00:09:33.460
you have to start the
local web browser--

00:09:33.460 --> 00:09:36.100
again, there's tons of ways
to do this, and it's very

00:09:36.100 --> 00:09:38.030
straightforward--

00:09:38.030 --> 00:09:41.220
and receive the incoming
request, and parse out the

00:09:41.220 --> 00:09:42.550
authorization code.

00:09:42.550 --> 00:09:44.400
And then you just continue
as normal.

00:09:44.400 --> 00:09:47.790
So essentially, when the user
ran this application, they

00:09:47.790 --> 00:09:49.190
would never see these lines.

00:09:49.190 --> 00:09:51.660
They would only see their web
browser pop up with the

00:09:51.660 --> 00:09:52.610
authorization page.

00:09:52.610 --> 00:09:57.600
And when they clicked Allow
Access, you could here in your

00:09:57.600 --> 00:10:00.650
application just continue
on uploading the file.

00:10:00.650 --> 00:10:03.030
So that's pretty much everything
for the Go

00:10:03.030 --> 00:10:04.260
Quickstart.

00:10:04.260 --> 00:10:06.100
If you have any questions,
please

00:10:06.100 --> 00:10:07.850
find us on Stack Overflow.

00:10:07.850 --> 00:10:09.100
Our tag is Google-Drive-SDK.

00:10:11.760 --> 00:10:15.440
We're happy to answer anything
that you come up with.

00:10:15.440 --> 00:10:18.490
And if you want to take the next
steps into something a

00:10:18.490 --> 00:10:21.720
little bit more advanced, then
definitely check out our

00:10:21.720 --> 00:10:24.730
DrEdit sample applications.

00:10:24.730 --> 00:10:28.970
Our DrEdit sample applications
will allow you to write a web

00:10:28.970 --> 00:10:33.160
app that integrates with Google
Drive and exposes your

00:10:33.160 --> 00:10:37.060
application in the Google Drive
user interface, allowing

00:10:37.060 --> 00:10:40.330
users to access different parts
of your application to

00:10:40.330 --> 00:10:44.360
Create New and Open With on
a document right there.

00:10:44.360 --> 00:10:45.530
So that's pretty much it.

00:10:45.530 --> 00:10:47.060
Thanks very much, and thank
you for watching.

00:10:49.760 --> 00:10:53.400
[MUSIC PLAYING]

