WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:03.582
So this first example is a good case for regularization.

00:00:03.582 --> 00:00:08.240
The load is mostly evenly distributed, so there is some regular sort of average case that you can shoot for

00:00:08.240 --> 00:00:11.216
that'll be relatively easy to predict,

00:00:11.216 --> 00:00:14.484
And then occasionally you'll have outliers, and you can do something about them

00:00:14.484 --> 00:00:19.272
such as dealing with them separately in another algorithm or on another processor as we discussed before.

00:00:19.272 --> 00:00:21.720
So I would consider this a good case for regularization;

00:00:21.720 --> 00:00:26.266
it's likely that we can come up with a regularization strategy here that'll work.

00:00:26.266 --> 00:00:28.929
On the other hand, when the load varies wildly,

00:00:28.929 --> 00:00:31.886
and it's not really easy to predict what is the average case,

00:00:31.886 --> 00:00:34.691
you have no idea when you start a process

00:00:34.691 --> 00:00:38.828
how long it's going to take or how many items you'll have to process,

00:00:38.828 --> 00:00:42.901
then I would say this is not an easy case for regularization,

00:00:42.901 --> 00:00:46.861
which is really sort of just restated in the final bullet.

00:00:46.861 --> 00:00:49.303
Obviously for regularization,

00:00:49.303 --> 00:00:55.352
the whole goal is to extract regular parallelism from irregular parallelism.

00:00:55.352 --> 00:00:59.145
So for that point you kind of like you be able to know what is regular,

00:00:59.145 --> 00:01:03.886
so if you can predict where and how load and balance is going to take place at run time,

00:01:03.886 --> 00:01:11.428
then you can structure the application to deal with the load balancing on the spot.

00:01:11.428 --> 00:01:13.994
So unload is relatively evenly distributed.

00:01:13.994 --> 00:01:18.501
It's almost regular already and dealing separately with occasional irregularities is likely to work.

00:01:18.501 --> 00:01:21.901
If load varies wildly, then it's harder to know what to regularize to,

00:01:21.901 --> 00:01:27.193
and it's much easier to regularize the workload if you can predict what that workload is going to be.

