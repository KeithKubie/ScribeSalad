WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:04.540
xFS data structures for implementing a truly distributed

00:00:04.540 --> 00:00:07.920
file system are much more involved. Let's talk

00:00:07.920 --> 00:00:10.315
little bit about that, first of all, I

00:00:10.315 --> 00:00:14.990
mentioned that the metadata management is not static. Even

00:00:14.990 --> 00:00:17.150
though, the file that you are looking for

00:00:17.150 --> 00:00:20.100
may be resident in particular node, the manager

00:00:20.100 --> 00:00:25.480
for that file may not be at that same node. The client action when it is looking

00:00:25.480 --> 00:00:32.150
for a file, it starts with a file name and this is a data structure that is

00:00:32.150 --> 00:00:34.620
a replicated data structure at every node in

00:00:34.620 --> 00:00:37.570
the entire distributed system. So any client node, when

00:00:37.570 --> 00:00:40.040
it starts with a file name. It consults

00:00:40.040 --> 00:00:43.710
this manager map data structure to know who's the

00:00:43.710 --> 00:00:46.890
metadata manager for this particular file name. And the

00:00:46.890 --> 00:00:50.630
manger node action is fairly involved. So, the client

00:00:50.630 --> 00:00:52.560
comes to the manager with a file name. And

00:00:52.560 --> 00:00:54.780
when you come to the manager with a file

00:00:54.780 --> 00:00:58.490
name, the manager looks up the first data structure,

00:00:58.490 --> 00:01:02.510
called the file directory. And that file directly has

00:01:02.510 --> 00:01:05.610
the i-node number. And that i-node number is the

00:01:05.610 --> 00:01:08.940
starting point for looking up the contents of that

00:01:08.940 --> 00:01:12.460
file. Now let's talk about all the data structures

00:01:12.460 --> 00:01:15.670
that are used by the manager node. On the

00:01:15.670 --> 00:01:18.720
manager node, when the client presents the file

00:01:18.720 --> 00:01:21.130
name, the manager node uses a data structure

00:01:21.130 --> 00:01:24.360
called a file directory. To map that file

00:01:24.360 --> 00:01:28.010
name to an i-number. And from the i-number, it

00:01:28.010 --> 00:01:31.020
uses another data structure called i-map data structure

00:01:31.020 --> 00:01:33.890
to get the i-note address for this particular file

00:01:33.890 --> 00:01:37.040
name. The i-node address is the i-node address

00:01:37.040 --> 00:01:40.820
for the log segment associated with this file name.

00:01:40.820 --> 00:01:43.680
And using this strip group map, which is

00:01:43.680 --> 00:01:47.770
telling. How this particular file is striped. It

00:01:47.770 --> 00:01:52.100
can locate the storage server that contains the

00:01:52.100 --> 00:01:54.910
log segment ID, that is associated with this

00:01:54.910 --> 00:01:57.530
file name. I mentioned earlier, that every log

00:01:57.530 --> 00:02:00.410
segment is actually striped on a whole bunch

00:02:00.410 --> 00:02:03.130
of disks, a stripe group. What of the

00:02:03.130 --> 00:02:07.000
stripe group associated with this particular log segment?

00:02:07.000 --> 00:02:09.770
That's the information that it gets from the

00:02:09.770 --> 00:02:12.450
stripe group map. Once it has the set of

00:02:12.450 --> 00:02:16.730
storage servers that contain this log segment, it

00:02:16.730 --> 00:02:19.170
can go to the set of storage servers to

00:02:19.170 --> 00:02:22.690
get the data blocks associated with this particular

00:02:22.690 --> 00:02:26.050
file name. That's the entire road map of what

00:02:26.050 --> 00:02:32.020
the manager will have to do. To go from the file name to actual data blocks that

00:02:32.020 --> 00:02:34.620
corresponds to that file name. Now this sounds

00:02:34.620 --> 00:02:38.090
like a lot of work being done, fortunately caching

00:02:38.090 --> 00:02:41.180
helps in making sure that this long path

00:02:41.180 --> 00:02:44.280
is not taken for every file access. We will

00:02:44.280 --> 00:02:47.110
see that, in terms of how reads and

00:02:47.110 --> 00:02:50.730
writes happen. In the XFS file system. Just to

00:02:50.730 --> 00:02:54.790
recap the data structures, file name to i-number mapping

00:02:54.790 --> 00:02:57.760
is contained in this data structure, FileDir. The mapping

00:02:57.760 --> 00:03:01.200
between the i-number and the i-node address for

00:03:01.200 --> 00:03:03.730
the log segment ID, that is contained in

00:03:03.730 --> 00:03:07.460
this i-map. Given the i-node address, I can

00:03:07.460 --> 00:03:10.390
consult the stripe group map to know which storage

00:03:10.390 --> 00:03:15.770
server actually has the i-node for this file

00:03:15.770 --> 00:03:18.190
name that is a large segment that corresponds

00:03:18.190 --> 00:03:23.010
to this file name. I can get that. And once I get that, then I can find

00:03:23.010 --> 00:03:25.210
out the stripe group that is associated

00:03:25.210 --> 00:03:27.840
with this log segment, and that'll say what

00:03:27.840 --> 00:03:30.990
are all the storage servers that I have to contact in order to get the

00:03:30.990 --> 00:03:36.150
contents of that log segment. Then I can go to those storage servers and get

00:03:36.150 --> 00:03:37.950
all the data blocks that correspond to a

00:03:37.950 --> 00:03:40.020
particular log segment. So that's the road map.

