WEBVTT
Kind: captions
Language: en

00:00:00.550 --> 00:00:04.870
Lamport's clock gave a fundamental ordering mechanism for events in a

00:00:04.870 --> 00:00:11.460
distributed system. This theoretical basis is all the more important in this day

00:00:11.460 --> 00:00:17.960
and age, when so many everyday services, email, social networks, e-commerce, and

00:00:17.960 --> 00:00:21.971
now even online education are becoming

00:00:21.971 --> 00:00:25.956
distributive. Incidentally, this is the same Lamport

00:00:25.956 --> 00:00:27.436
who gave us a way to order

00:00:27.436 --> 00:00:31.506
memory accesses in a shared memory multi-processors, through

00:00:31.506 --> 00:00:35.540
the sequential consistency memory model. In the next

00:00:35.540 --> 00:00:37.850
part of the lesson we turn our attention

00:00:37.850 --> 00:00:41.750
to more practical matters in distributed systems. Specifically,

00:00:41.750 --> 00:00:44.280
given that network communication is the key to

00:00:44.280 --> 00:00:48.010
performance for distributed services, the operating system has

00:00:48.010 --> 00:00:51.280
to strive hard to reduce the latency incurred

00:00:51.280 --> 00:00:56.878
in the system software for network services. Lamport's clock serves as the

00:00:56.878 --> 00:01:02.100
theoretical underpinning for achieving deterministic execution

00:01:02.100 --> 00:01:04.688
in a distributed system, despite the non

00:01:04.688 --> 00:01:11.290
determinism that exists due to the vagaries of a network. In this lesson, we

00:01:11.290 --> 00:01:17.150
will discuss techniques for making the operating system softwares tag efficient

00:01:17.150 --> 00:01:20.330
for network communication. Both by looking

00:01:20.330 --> 00:01:23.160
at application interface to the kernel as

00:01:23.160 --> 00:01:28.120
well as inside the kernel in the protocol stack itself, but first a quiz.

