WEBVTT
Kind: captions
Language: en

00:00:09.900 --> 00:00:12.590
AMANDA SURYA: Well,
hello everybody.

00:00:12.590 --> 00:00:14.390
I believe we are live.

00:00:14.390 --> 00:00:15.130
I'm Amanda Surya.

00:00:15.130 --> 00:00:18.480
I'm a developer relations
manager here at Google.

00:00:18.480 --> 00:00:20.060
DANNY HERMES: And I'm
Danny Hermes.

00:00:20.060 --> 00:00:21.180
I'm on Amanda's team.

00:00:21.180 --> 00:00:24.320
I'm a developer programs
engineer, as many will know

00:00:24.320 --> 00:00:26.890
who come to this hangout
every other week.

00:00:26.890 --> 00:00:31.690
AMANDA SURYA: Sorry about the
delay a little bit today.

00:00:31.690 --> 00:00:34.270
We were having a bit of
technical difficulties, but

00:00:34.270 --> 00:00:35.650
now we're on.

00:00:35.650 --> 00:00:37.900
So Danny, what are we
talking about today?

00:00:37.900 --> 00:00:40.900
DANNY HERMES: So today, we're
going to talk about a feature

00:00:40.900 --> 00:00:43.660
that isn't that well known, and
we didn't do a whole lot

00:00:43.660 --> 00:00:46.670
of press about when we released
it, but it's an

00:00:46.670 --> 00:00:49.440
additional feed called the User
Management feed, and it's

00:00:49.440 --> 00:00:52.360
a way you can add more
authenticated users to your

00:00:52.360 --> 00:00:55.780
accounts, whether they're
sub-accounts of an MCA or

00:00:55.780 --> 00:00:57.640
whether they're just your own
account, and they're people

00:00:57.640 --> 00:00:59.020
who are doing certain work.

00:00:59.020 --> 00:01:03.030
Local only, or online only,
you can use the API to add

00:01:03.030 --> 00:01:03.480
more users.

00:01:03.480 --> 00:01:06.450
AMANDA SURYA: And for the
benefit of our viewers here

00:01:06.450 --> 00:01:09.360
who may not know what
an MCA is, can you

00:01:09.360 --> 00:01:10.130
explain what that is?

00:01:10.130 --> 00:01:12.260
DANNY HERMES: Yeah, so for
people who aren't familiar, a

00:01:12.260 --> 00:01:15.430
multi-client account is a
special type of Merchant

00:01:15.430 --> 00:01:18.360
Center account that doesn't
actually hold product data.

00:01:18.360 --> 00:01:21.470
Rather, it holds accounts
that whole data.

00:01:21.470 --> 00:01:25.030
So it's literally a parent for
all these sub-accounts.

00:01:25.030 --> 00:01:28.170
And via the API, which we'll see
in a bit, you can actually

00:01:28.170 --> 00:01:35.940
use the API to, within an MCA,
a create sub-accounts.

00:01:35.940 --> 00:01:40.120
And we will actually create a
sub-account with my MCA that I

00:01:40.120 --> 00:01:42.490
personally own.

00:01:42.490 --> 00:01:44.740
And from there, we'll add
some users to that

00:01:44.740 --> 00:01:45.510
sub-account as well.

00:01:45.510 --> 00:01:48.410
But an MCA, like I said, it's
really just a parent that

00:01:48.410 --> 00:01:50.990
holds accounts rather
than holding data--

00:01:50.990 --> 00:01:52.052
product data.

00:01:52.052 --> 00:01:53.980
AMANDA SURYA: Awesome.

00:01:53.980 --> 00:02:00.210
So how about the merchant
account and the user's

00:02:00.210 --> 00:02:01.425
relationship with-- do you
want to go into that?

00:02:01.425 --> 00:02:06.910
DANNY HERMES: Yeah, so the Users
API, the User Management

00:02:06.910 --> 00:02:10.020
feed can actually be used
whether or not it's a

00:02:10.020 --> 00:02:12.310
sub-account of an MCA or not.

00:02:12.310 --> 00:02:15.700
So if you have a lot of users
who are working on your

00:02:15.700 --> 00:02:16.300
product data--

00:02:16.300 --> 00:02:18.520
let's say you have a team that
does local only and a team

00:02:18.520 --> 00:02:21.080
that does online only, and
you don't want them to be

00:02:21.080 --> 00:02:25.000
interfering with each other's
data, then you could use the

00:02:25.000 --> 00:02:27.880
Users API to really just give
permissions to your local

00:02:27.880 --> 00:02:30.610
folks and permissions to your
online folks so they don't

00:02:30.610 --> 00:02:32.310
interfere with each other.

00:02:32.310 --> 00:02:36.120
But really, the best use case
is, like you mentioned, when

00:02:36.120 --> 00:02:39.700
you have a multi-client account,
and maybe you're a

00:02:39.700 --> 00:02:42.190
marketplace, and you want
to have your individual

00:02:42.190 --> 00:02:45.400
sub-sellers have access to
their own sub-accounts.

00:02:45.400 --> 00:02:47.330
Using the User Management
feed, you can do this

00:02:47.330 --> 00:02:53.800
programmatically rather than
having to go into the actual

00:02:53.800 --> 00:02:56.590
Merchant Center for every
single sub-account and,

00:02:56.590 --> 00:02:58.530
through the interface, click
through and add users.

00:02:58.530 --> 00:02:59.810
This is a much more

00:02:59.810 --> 00:03:04.060
programmatic, extendable workflow.

00:03:04.060 --> 00:03:08.780
So I have the User Management
feed document pulled up.

00:03:08.780 --> 00:03:11.020
So I want to just share
this with some folks.

00:03:11.020 --> 00:03:15.940
This is on our docs at
developers.google.com There's

00:03:15.940 --> 00:03:19.140
a nice overview at the top
explaining what it does.

00:03:19.140 --> 00:03:25.190
And then to review how someone
would add users, it's a simple

00:03:25.190 --> 00:03:28.780
post request containing
very little data.

00:03:28.780 --> 00:03:31.430
So it contains a title element,
and that title is

00:03:31.430 --> 00:03:34.370
simply the email of the user
you're looking to add.

00:03:34.370 --> 00:03:39.020
It contains a Boolean value
specifying whether this user

00:03:39.020 --> 00:03:40.180
is an admin or not.

00:03:40.180 --> 00:03:43.920
So that's in the sc namespace,
a namespace we're very

00:03:43.920 --> 00:03:44.670
familiar with.

00:03:44.670 --> 00:03:46.860
It's an alias we use for
schemas.google.c

00:03:46.860 --> 00:03:52.030
om/structuredcontent/2009.

00:03:52.030 --> 00:03:53.590
And then we also have
permissions.

00:03:53.590 --> 00:03:59.160
Like I said, you can silo your
people on your team who are

00:03:59.160 --> 00:04:02.710
dealing with online data and
dealing with local data

00:04:02.710 --> 00:04:05.860
because you have separate
permission scopes for online

00:04:05.860 --> 00:04:06.920
and for local.

00:04:06.920 --> 00:04:10.510
And here we see online is set
to the value readwrite, and

00:04:10.510 --> 00:04:12.720
local is set to the
value noaccess.

00:04:12.720 --> 00:04:15.030
but there's a third value, which
is readonly, which is

00:04:15.030 --> 00:04:17.610
sort of in between read, write
and noaccess, if someone can

00:04:17.610 --> 00:04:20.420
see the data but they can't
actually tamper with the data.

00:04:20.420 --> 00:04:23.420
So there are a lot of
options you can use.

00:04:23.420 --> 00:04:26.320
And then, of course, with that
data, you simply make a post

00:04:26.320 --> 00:04:29.230
request to a URI that looks
pretty familiar,

00:04:29.230 --> 00:04:33.800
content.googleap
is.com/content/v1, and then

00:04:33.800 --> 00:04:36.430
your account ID that they're
going to be added to, and then

00:04:36.430 --> 00:04:37.820
slash users.

00:04:37.820 --> 00:04:44.680
And there are similar URIs for
making updates and deletes.

00:04:44.680 --> 00:04:48.570
It's that same URI I just
listed, but after users,

00:04:48.570 --> 00:04:50.140
there's slash--

00:04:50.140 --> 00:04:52.800
here, john.doe@shop.com.

00:04:52.800 --> 00:04:57.220
But it's really just the email
address that you're looking to

00:04:57.220 --> 00:04:59.340
update or to delete.

00:04:59.340 --> 00:05:02.600
And then of course, you're
sending the same type of data

00:05:02.600 --> 00:05:04.850
in that request back.

00:05:04.850 --> 00:05:09.860
So let's get started and
actually use a client library

00:05:09.860 --> 00:05:11.440
to actually do these things.

00:05:11.440 --> 00:05:14.180
So let me switch the screen that
I'm sharing with you guys

00:05:14.180 --> 00:05:15.050
in his Hangout.

00:05:15.050 --> 00:05:17.830
AMANDA SURYA: Now, let's
backtrack a little bit, Danny.

00:05:17.830 --> 00:05:23.450
So can you explain what's the
benefit of the client

00:05:23.450 --> 00:05:28.150
libraries and in how many
languages we have there.

00:05:28.150 --> 00:05:29.810
DANNY HERMES: Yeah, so for those
not familiar, we have

00:05:29.810 --> 00:05:32.230
client libraries in four
programming languages--

00:05:32.230 --> 00:05:36.540
Python, Java, .NET, and PHP.

00:05:36.540 --> 00:05:43.270
And this feature is currently
supported in

00:05:43.270 --> 00:05:45.090
.NET and Python only.

00:05:45.090 --> 00:05:47.270
But it's coming to PHP,
hopefully within the next two

00:05:47.270 --> 00:05:48.230
weeks, maybe less.

00:05:48.230 --> 00:05:48.916
AMANDA SURYA: You're
working on it.

00:05:48.916 --> 00:05:50.920
DANNY HERMES: I'm
working on it.

00:05:50.920 --> 00:05:53.360
It's one of the easier APIs to
implement because, as we saw,

00:05:53.360 --> 00:05:55.470
the spec is pretty short.

00:05:55.470 --> 00:05:57.650
You only have permissions,
admin, and title, we've

00:05:57.650 --> 00:05:58.690
already implemented, right?

00:05:58.690 --> 00:06:00.820
So it's pretty easy to do.

00:06:00.820 --> 00:06:03.340
Java, I don't have
an ETA for that.

00:06:03.340 --> 00:06:07.120
So client libraries, in general,
allow you to abstract

00:06:07.120 --> 00:06:07.900
away everything.

00:06:07.900 --> 00:06:11.220
So you don't have to actually
deal with creating HTTP

00:06:11.220 --> 00:06:13.470
requests, making sure the
headers are correct, making

00:06:13.470 --> 00:06:16.620
sure you're doing all
that correctly.

00:06:16.620 --> 00:06:18.480
You don't have to deal
with making the XML.

00:06:18.480 --> 00:06:20.640
You don't have to deal with the
authentication, whether

00:06:20.640 --> 00:06:22.770
you're using client login--
which is deprecated--

00:06:22.770 --> 00:06:25.660
OAuth 2, or some other
Auth flow, right?

00:06:25.660 --> 00:06:27.680
These libraries just do
all that work for you.

00:06:27.680 --> 00:06:31.090
And we try to document them and
create samples like this

00:06:31.090 --> 00:06:33.850
as frequently as possible so
they're more usable and also

00:06:33.850 --> 00:06:37.270
so the APIs are more usable so
you can really worry about

00:06:37.270 --> 00:06:39.600
your systems and your data
rather than actually

00:06:39.600 --> 00:06:43.560
implementing an XML parser and
implementing an HTTP library.

00:06:43.560 --> 00:06:45.710
AMANDA SURYA: So where can they

00:06:45.710 --> 00:06:47.160
download this client library?

00:06:47.160 --> 00:06:50.110
DANNY HERMES: So if you come
to our developer docs at

00:06:50.110 --> 00:06:55.110
developers.googl
e.com/shopping-content, we

00:06:55.110 --> 00:07:00.430
have a Developer Resources tab
that you can click that has an

00:07:00.430 --> 00:07:02.990
end-to-end sample for
using the Items

00:07:02.990 --> 00:07:04.750
feed in all four languages.

00:07:04.750 --> 00:07:07.320
And each of those lists
the various places.

00:07:07.320 --> 00:07:08.970
They're all hosted--

00:07:08.970 --> 00:07:13.270
the code itself is hosted open
source on Google code hosting,

00:07:13.270 --> 00:07:18.250
and there are various links in
those sub-pages within the

00:07:18.250 --> 00:07:19.915
developer resources on
our documentation.

00:07:19.915 --> 00:07:20.808
AMANDA SURYA: Awesome.

00:07:20.808 --> 00:07:21.724
DANNY HERMES: All right.

00:07:21.724 --> 00:07:22.640
AMANDA SURYA: Let's get to it.

00:07:22.640 --> 00:07:23.790
DANNY HERMES: Yeah,
let's get to it.

00:07:23.790 --> 00:07:27.890
So here, we have my Emacs buffer
open with two files,

00:07:27.890 --> 00:07:32.140
create_subaccount.py
create_subaccount.cs.

00:07:32.140 --> 00:07:34.820
Now, since Python is a dynamic
language, I can actually run

00:07:34.820 --> 00:07:38.860
the text we see, whereas using
this C# file, I'd have to

00:07:38.860 --> 00:07:39.680
compile it first.

00:07:39.680 --> 00:07:44.560
So I don't actually have literal
C# code that would run

00:07:44.560 --> 00:07:47.900
but just the C# code that you
would embed within your class

00:07:47.900 --> 00:07:50.380
or within your function
that you're calling.

00:07:50.380 --> 00:07:52.270
And this they're going
to be equivalent.

00:07:52.270 --> 00:07:53.900
They're going to do exactly
the same thing, the

00:07:53.900 --> 00:07:56.040
Python and the C#.

00:07:56.040 --> 00:07:59.280
So we see at the top, we have
our imports and our using

00:07:59.280 --> 00:08:02.580
statements-- import in
Python, using in C#.

00:08:02.580 --> 00:08:06.810
So first, this is just for
protecting my own account

00:08:06.810 --> 00:08:10.020
security, but I'm importing the
pickle library, because

00:08:10.020 --> 00:08:14.670
I'm going to actually use that
to unpickle a token that I'm

00:08:14.670 --> 00:08:16.210
going to use to sign
my request.

00:08:16.210 --> 00:08:18.820
And to use the API, you actually
have to sign the

00:08:18.820 --> 00:08:21.330
request to verify that the
account you're using is

00:08:21.330 --> 00:08:22.420
actually your account.

00:08:22.420 --> 00:08:25.450
And then from there, I'm
importing some custom classes.

00:08:25.450 --> 00:08:28.900
So from the atom.data module,
I'm importing the Content,

00:08:28.900 --> 00:08:30.940
Link, and Title classes.

00:08:30.940 --> 00:08:33.080
And these are classes I'm
going to use to actually

00:08:33.080 --> 00:08:38.470
create the content that's going
into a Managed Accounts

00:08:38.470 --> 00:08:40.190
insert request.

00:08:40.190 --> 00:08:43.460
So Contents for description,
Link is for a relative link

00:08:43.460 --> 00:08:46.000
for that sub-account, and Title
is the title of the

00:08:46.000 --> 00:08:46.710
sub-account.

00:08:46.710 --> 00:08:50.220
And from the
gdata.contentforshopping.client

00:08:50.220 --> 00:08:52.560
module, I'm going to import
the content for Shopping

00:08:52.560 --> 00:08:53.690
Client class.

00:08:53.690 --> 00:08:56.780
And that class is the client
that's making these HTTP

00:08:56.780 --> 00:09:00.540
requests, and it's taking your
data and actually turning into

00:09:00.540 --> 00:09:03.980
valid XML, and then, of course,
receiving the response

00:09:03.980 --> 00:09:05.530
and letting us know
what it is.

00:09:05.530 --> 00:09:07.332
And finally, from the

00:09:07.332 --> 00:09:10.100
gdata.contentforshopping.data module.

00:09:10.100 --> 00:09:12.760
It's a more specific data
module, specific only

00:09:12.760 --> 00:09:16.370
to our GData API.

00:09:16.370 --> 00:09:19.730
I'm importing AdultContent,
ClientAccount, InternalId, and

00:09:19.730 --> 00:09:20.770
UsersEntry.

00:09:20.770 --> 00:09:25.470
UsersEntry is going to be our
parent entry that's actually--

00:09:25.470 --> 00:09:27.450
actually, I don't need
UsersEntry in this file.

00:09:27.450 --> 00:09:29.010
I don't know why I'm
importing it.

00:09:29.010 --> 00:09:29.650
My mistake.

00:09:29.650 --> 00:09:30.840
I forgot to delete this line.

00:09:30.840 --> 00:09:31.850
But the other two--

00:09:31.850 --> 00:09:34.100
AdultContent and InternalId--

00:09:34.100 --> 00:09:39.940
are there in order to have
additional settings set when

00:09:39.940 --> 00:09:42.440
we're inserting this
managed account.

00:09:42.440 --> 00:09:48.580
So on the other hand, all this
is already brought in when we

00:09:48.580 --> 00:09:49.780
use the namespace
google.gdata.con

00:09:49.780 --> 00:09:52.585
tentforshopping,
google.gdata.con

00:09:52.585 --> 00:09:57.200
tentforshopping.elements,
and google.gdata.client.

00:09:57.200 --> 00:10:00.430
Those three namespaces hold
virtually the same sort of

00:10:00.430 --> 00:10:03.630
data for .NET client library.

00:10:03.630 --> 00:10:07.160
The ones I just spoke about
for Python hold.

00:10:07.160 --> 00:10:10.340
So from there, let me
scroll down a bit.

00:10:10.340 --> 00:10:15.790
I am setting an account ID as
a constant and loading an

00:10:15.790 --> 00:10:19.100
auth_token from a
pickled file.

00:10:19.100 --> 00:10:23.400
So I have this file token.pkl,
and I'm opening it--

00:10:23.400 --> 00:10:25.030
read-only opening it--

00:10:25.030 --> 00:10:27.780
as this file object fh.

00:10:27.780 --> 00:10:32.030
And then I'm using pickle to
load from fh and auth_token.

00:10:32.030 --> 00:10:37.320
And on the C# side, again, I
have this variable account ID.

00:10:37.320 --> 00:10:41.770
And I'm right away using it to
instantiate a service via the

00:10:41.770 --> 00:10:43.610
Content for Shopping
service class.

00:10:43.610 --> 00:10:46.510
And I'm passing in my account
ID to that class.

00:10:46.510 --> 00:10:49.740
And I have left the code out
here, but if you'd like to go

00:10:49.740 --> 00:10:52.430
check out our developer docs, I
explain in depth how you can

00:10:52.430 --> 00:10:54.550
actually log in and
authenticate with

00:10:54.550 --> 00:10:55.830
that service class.

00:10:55.830 --> 00:10:59.130
But I'm going to be using the
token over here, which is

00:10:59.130 --> 00:11:00.050
already authenticated.

00:11:00.050 --> 00:11:05.170
So here, I instantiate a Content
for Shopping Client

00:11:05.170 --> 00:11:08.590
class with the auth_token that
I've just unpickled and the

00:11:08.590 --> 00:11:12.620
account ID that I've set as
a constant in this file.

00:11:12.620 --> 00:11:15.510
So now I want to actually
create a sub-account.

00:11:15.510 --> 00:11:18.450
So I have this sub-account, and
I'm just going to start

00:11:18.450 --> 00:11:20.930
out with an empty ClientAccount
object.

00:11:20.930 --> 00:11:22.130
First, I'll set the title.

00:11:22.130 --> 00:11:25.080
So the title, my sub-account
is just Candy Shop.

00:11:25.080 --> 00:11:26.960
Then I want to actually
set the description.

00:11:26.960 --> 00:11:28.610
And that's in the
Content element.

00:11:28.610 --> 00:11:31.200
So the description is, "The
best place for candy."

00:11:31.200 --> 00:11:37.090
new_subaccount.content =
Content, and we pass into the

00:11:37.090 --> 00:11:40.390
constructor for that class our
string, "The best place for

00:11:40.390 --> 00:11:45.610
candy." Our actual account--

00:11:45.610 --> 00:11:47.700
the merchant site-- is
going to be hosted at

00:11:47.700 --> 00:11:49.910
candyshop.example.com.

00:11:49.910 --> 00:11:54.120
So we create a link to that
using the atom.data.link

00:11:54.120 --> 00:11:57.050
class, and that's going
to be rel='alternate'.

00:11:57.050 --> 00:12:00.180
This is one of the
XML attributes.

00:12:00.180 --> 00:12:04.210
And we just append this to
the Link attribute on our

00:12:04.210 --> 00:12:07.020
sub-account object that
we've created.

00:12:07.020 --> 00:12:10.520
And then finally, we use these
Custom Content for Shopping

00:12:10.520 --> 00:12:11.330
data attributes--

00:12:11.330 --> 00:12:15.280
AdultContent and InternalId to
say, no, there is no adult

00:12:15.280 --> 00:12:17.810
content that's going to be
provided by this account.

00:12:17.810 --> 00:12:20.830
And the internal ID that
we use to refer to

00:12:20.830 --> 00:12:23.460
this account is CndShp.

00:12:23.460 --> 00:12:27.420
This is not necessarily features
you need to use, but

00:12:27.420 --> 00:12:30.490
these are features you can
use with your account.

00:12:30.490 --> 00:12:35.220
So in order to actually insert
this, we'll have our shopping

00:12:35.220 --> 00:12:36.360
client that we created.

00:12:36.360 --> 00:12:37.830
It's authenticated,
because we already

00:12:37.830 --> 00:12:39.100
created it with a token.

00:12:39.100 --> 00:12:42.120
And it knows what the parent
account is, because we also

00:12:42.120 --> 00:12:44.630
passed an account ID when
we constructed it.

00:12:44.630 --> 00:12:46.845
So by simply calling
shopping_client.

00:12:46.845 --> 00:12:52.110
InsertClientAccount, passing in
the new sub-account, I'll

00:12:52.110 --> 00:12:55.130
actually be able to
insert my account.

00:12:55.130 --> 00:13:00.700
And from the response we get--
inserted_subaccount--

00:13:00.700 --> 00:13:03.230
we'll actually be able to get an
account ID of this account

00:13:03.230 --> 00:13:03.840
we created.

00:13:03.840 --> 00:13:07.350
So let me quickly spawn
a Python REPL.

00:13:07.350 --> 00:13:12.740
This is one of the other great
features of Emacs that I love.

00:13:12.740 --> 00:13:16.250
And I can actually directly run
my code within Emacs from

00:13:16.250 --> 00:13:16.820
this buffer.

00:13:16.820 --> 00:13:19.840
So I'm going to just call this
command to run the code, and

00:13:19.840 --> 00:13:22.180
now we send our request
off to the server.

00:13:22.180 --> 00:13:22.910
And there we go.

00:13:22.910 --> 00:13:30.890
We got the response back and the
actual ID link that's in

00:13:30.890 --> 00:13:32.540
the inserted sub-account
we got back.

00:13:32.540 --> 00:13:37.330
It's content.googleap
is.com/content/v1.

00:13:37.330 --> 00:13:44.190
It has our parent account ID you
see there right, 8403459.

00:13:44.190 --> 00:13:48.680
Then slash manage accounts,
then slash 8825929.

00:13:48.680 --> 00:13:51.130
And this is something we're
going to be using going

00:13:51.130 --> 00:13:54.590
forward to actually create
users for sub-accounts.

00:13:54.590 --> 00:13:56.890
So let me just paste this
right here so I

00:13:56.890 --> 00:13:59.120
can use it in a bit.

00:13:59.120 --> 00:14:04.160
But before we move on to
actually using the User

00:14:04.160 --> 00:14:07.000
Management feed, let me just
show what this would have

00:14:07.000 --> 00:14:08.500
looked like in C#.

00:14:08.500 --> 00:14:12.780
So switching back to the C#
buffer from my Python buffer

00:14:12.780 --> 00:14:15.010
we see it looks pretty
much the same.

00:14:15.010 --> 00:14:18.430
We have a managed accounts entry
that's pretty much the

00:14:18.430 --> 00:14:22.110
same as the Client Account
class in Python.

00:14:22.110 --> 00:14:25.640
We start off with a new
sub-account, which is an empty

00:14:25.640 --> 00:14:26.990
managed accounts entry.

00:14:26.990 --> 00:14:30.230
We set the title via
the Title.Text

00:14:30.230 --> 00:14:31.780
attribute on the object.

00:14:31.780 --> 00:14:34.620
Title is actually a getter,
which automatically does this

00:14:34.620 --> 00:14:37.640
class conversion that we did
explicitly in Python.

00:14:37.640 --> 00:14:39.640
But here, we just give
the string, and this

00:14:39.640 --> 00:14:41.140
library does the rest.

00:14:41.140 --> 00:14:42.870
Similarly, for the description,
we use the

00:14:42.870 --> 00:14:45.690
Content.Content attribute.

00:14:45.690 --> 00:14:49.620
For link, we have an
AtomLink object.

00:14:49.620 --> 00:14:54.890
AtomLink google.gdata.client
namespace.

00:14:54.890 --> 00:14:58.510
And to insert it with our
service after we've added the

00:14:58.510 --> 00:15:01.800
various other attributes, we
simply call the Insert Managed

00:15:01.800 --> 00:15:06.010
Account method and pass
in our sub-account.

00:15:06.010 --> 00:15:08.950
And we will expect the same type
of results, and from the

00:15:08.950 --> 00:15:13.320
ID, we'll expect the same value
that we saw before.

00:15:13.320 --> 00:15:14.560
AMANDA SURYA: That's pretty
straightforward.

00:15:14.560 --> 00:15:15.760
DANNY HERMES: Yeah, pretty
straightforward.

00:15:15.760 --> 00:15:17.560
So now that we have
a sub-account--

00:15:17.560 --> 00:15:18.710
the Candy Shop--

00:15:18.710 --> 00:15:21.740
we want to actually add a
user to the Candy Shop.

00:15:21.740 --> 00:15:27.690
And so I'm going to use the
actual account that I had for

00:15:27.690 --> 00:15:31.670
Google I/O to actually add
this to the sub-account.

00:15:31.670 --> 00:15:33.620
So let's see if this works.

00:15:33.620 --> 00:15:36.940
So we're going to pull
up two new buffers,

00:15:36.940 --> 00:15:38.190
create_user_entry.cs--

00:15:40.790 --> 00:15:44.990
let me get this in my
clipboard first--

00:15:44.990 --> 00:15:48.370
and then, of course,
create_user_entry.py.

00:15:48.370 --> 00:15:52.150
So I have here,
TYPE-SUBACCOUNT-HERE so I'm

00:15:52.150 --> 00:15:55.800
going to type the sub-account
that we've now created so when

00:15:55.800 --> 00:15:58.440
the code runs, it actually
won't break.

00:15:58.440 --> 00:16:01.210
So at the top, we again
have pickle.

00:16:01.210 --> 00:16:04.530
We're importing pickle for the
same reasons, for a token.

00:16:04.530 --> 00:16:07.410
We're again importing the
Title attribute, again

00:16:07.410 --> 00:16:11.010
importing the Content for
Shopping Client attribute.

00:16:11.010 --> 00:16:14.110
We're importing some
new data classes.

00:16:14.110 --> 00:16:18.390
Admin and Permission are data
classes specific to the User

00:16:18.390 --> 00:16:19.140
Management feed.

00:16:19.140 --> 00:16:22.400
Admin, as we saw before,
specifies whether or not this

00:16:22.400 --> 00:16:24.160
particular user is an admin.

00:16:24.160 --> 00:16:27.480
And then Permission is a way
we can set online and local

00:16:27.480 --> 00:16:28.310
permission scopes.

00:16:28.310 --> 00:16:31.000
And then, of course, we actually
mean to import

00:16:31.000 --> 00:16:31.940
UsersEntry here.

00:16:31.940 --> 00:16:36.150
UsersEntry is the class which
will hold all this data.

00:16:36.150 --> 00:16:42.560
So with that, we have our parent
ID, which is what we're

00:16:42.560 --> 00:16:43.980
actually going to do--

00:16:43.980 --> 00:16:45.710
I guess I don't necessarily
need this here.

00:16:45.710 --> 00:16:48.950
I'm using it in the constructor
for the client,

00:16:48.950 --> 00:16:51.910
but it's actually going to be
overridden in every request.

00:16:51.910 --> 00:16:54.090
So you actually don't explicitly
need to construct a

00:16:54.090 --> 00:16:57.990
client with an account ID,
because for every individual

00:16:57.990 --> 00:17:00.550
API request that you're making--
like we saw before,

00:17:00.550 --> 00:17:03.210
Insert Client Account--

00:17:03.210 --> 00:17:06.359
you can actually pass in an
optional keyword argument that

00:17:06.359 --> 00:17:07.250
gives an account ID.

00:17:07.250 --> 00:17:09.890
And that's what we're going to
do here when we're dealing

00:17:09.890 --> 00:17:11.569
with these users entries,
because we don't want to

00:17:11.569 --> 00:17:13.349
create a user on our MCA.

00:17:13.349 --> 00:17:17.040
We want to create a user
for the Candy Shop.

00:17:17.040 --> 00:17:22.025
So again, I'm loading the pickle
token, and again, I'm

00:17:22.025 --> 00:17:24.640
instantiating the client.

00:17:24.640 --> 00:17:28.730
So from there, to create the
actual entry, I start off with

00:17:28.730 --> 00:17:30.350
an empty UsersEntry object.

00:17:30.350 --> 00:17:31.450
I set the title.

00:17:31.450 --> 00:17:34.290
The title is going to be the
email, as we saw in the actual

00:17:34.290 --> 00:17:35.970
spec, in the documentation.

00:17:35.970 --> 00:17:39.820
So this is an email address
for my demo account.

00:17:39.820 --> 00:17:40.930
We don't want it
to be an admin.

00:17:40.930 --> 00:17:42.880
We don't want special privileges
given for this.

00:17:42.880 --> 00:17:44.370
We just want them to
be able to actually

00:17:44.370 --> 00:17:45.680
deal with their data.

00:17:45.680 --> 00:17:50.710
And for the online permission,
we instantiate an object from

00:17:50.710 --> 00:17:51.930
the permission class.

00:17:51.930 --> 00:17:54.560
We give it the value readwrite,
and then we use the

00:17:54.560 --> 00:17:58.640
keyword argument scope and pass
that the value online.

00:17:58.640 --> 00:18:02.360
Now, we use a keyword argument
here, because the gdata Python

00:18:02.360 --> 00:18:05.650
library considers keyword
arguments to correspond to XML

00:18:05.650 --> 00:18:08.840
attributes rather than an XML
value or an XML element.

00:18:08.840 --> 00:18:10.550
So if we want to specify
the attributes, we

00:18:10.550 --> 00:18:12.180
use a keyword argument.

00:18:12.180 --> 00:18:15.560
So similarly for the local
permission, we also set

00:18:15.560 --> 00:18:19.470
readwrite, but instead, we have
the scope set to local.

00:18:19.470 --> 00:18:22.400
And to add those to the entry
we've created, we simply

00:18:22.400 --> 00:18:25.510
append pain to the
entry.permission attribute the

00:18:25.510 --> 00:18:29.200
permission objects
we just created.

00:18:29.200 --> 00:18:32.250
So now, if we want to actually
insert this, we simply call

00:18:32.250 --> 00:18:37.590
the Insert Users Entry method on
the Shopping client object.

00:18:37.590 --> 00:18:40.260
And we pass in the entry
we just created.

00:18:40.260 --> 00:18:42.980
And like I said before, since we
don't want to actually add

00:18:42.980 --> 00:18:48.310
this user to our MCA, we include
account ID equals new

00:18:48.310 --> 00:18:51.840
sub-account ID, and it will be
set on the sub-account rather

00:18:51.840 --> 00:18:53.640
than on our account.

00:18:53.640 --> 00:18:58.510
So after we do this, we're going
to print out the ID from

00:18:58.510 --> 00:19:00.900
the actual returned objects.

00:19:00.900 --> 00:19:03.930
So again, we'll go back
to our Python REPL,

00:19:03.930 --> 00:19:06.630
and we'll run this.

00:19:06.630 --> 00:19:08.260
So let's see what happens.

00:19:08.260 --> 00:19:11.830
Ah, so I was worried
that would happen.

00:19:11.830 --> 00:19:14.920
So the issue here is that that
sub-account is already

00:19:14.920 --> 00:19:17.380
associated with another account,
and we're not allowed

00:19:17.380 --> 00:19:21.060
to actually set it on more
than one account.

00:19:21.060 --> 00:19:25.225
So let me instead use
Amanda's account.

00:19:27.960 --> 00:19:30.366
Amanda S, google.com.

00:19:30.366 --> 00:19:33.680
OK, so let's run it on somebody
who doesn't already

00:19:33.680 --> 00:19:35.550
have an account that they're
associated with.

00:19:35.550 --> 00:19:36.900
Wonderful.

00:19:36.900 --> 00:19:39.025
So it works as expected.

00:19:39.025 --> 00:19:40.236
AMANDA SURYA: Now
I have access.

00:19:40.236 --> 00:19:42.920
DANNY HERMES: Now she has access
to the Candy Shop.

00:19:42.920 --> 00:19:44.970
Now, let me reiterate
what just happened

00:19:44.970 --> 00:19:46.200
there with that error.

00:19:46.200 --> 00:19:50.540
So the account that I was
attempting to add was already

00:19:50.540 --> 00:19:53.290
associated with another Merchant
Center account.

00:19:53.290 --> 00:19:57.680
And it's explicitly disallowed
that an account can be

00:19:57.680 --> 00:19:59.790
associated with more than one
Merchant Center account.

00:19:59.790 --> 00:20:03.110
So of course, API says no, we
can't do that, because it's

00:20:03.110 --> 00:20:03.950
already associated.

00:20:03.950 --> 00:20:06.840
So instead, we used an account
that's not associated with any

00:20:06.840 --> 00:20:07.430
other account.

00:20:07.430 --> 00:20:12.710
So content.googleap
is.com/content/v1, then we

00:20:12.710 --> 00:20:16.170
have the sub-account, ID, then
slash Users, then slash the

00:20:16.170 --> 00:20:17.510
email that we added.

00:20:17.510 --> 00:20:20.960
And that is what we
expect to happen.

00:20:20.960 --> 00:20:23.350
So hypothetically speaking--

00:20:23.350 --> 00:20:26.260
well actually, before I move on
to my hypotheticals, let me

00:20:26.260 --> 00:20:28.410
show the equivalent code for--

00:20:28.410 --> 00:20:29.370
AMANDA SURYA: .NET.

00:20:29.370 --> 00:20:30.180
DANNY HERMES: For .NET.

00:20:30.180 --> 00:20:30.890
Exactly.

00:20:30.890 --> 00:20:32.310
Thank you, Amanda.

00:20:32.310 --> 00:20:35.120
So again, the same rigmarole.

00:20:35.120 --> 00:20:37.070
We start with our account
ID and the

00:20:37.070 --> 00:20:38.840
created sub-account ID.

00:20:38.840 --> 00:20:41.090
This is not the same value.

00:20:41.090 --> 00:20:42.810
I didn't change it.

00:20:42.810 --> 00:20:45.940
And again, we instantiate
a service.

00:20:45.940 --> 00:20:50.110
If we want to have the actual
UsersEntry object, we, again,

00:20:50.110 --> 00:20:51.210
start with an empty one.

00:20:51.210 --> 00:20:54.340
This comes from a
namespace we've

00:20:54.340 --> 00:20:56.210
already brought in, using.

00:20:56.210 --> 00:20:57.160
Set the title.

00:20:57.160 --> 00:21:00.090
And again, we have these custom
setters and getters,

00:21:00.090 --> 00:21:02.845
Admin and Permission, which will
actually do the work for

00:21:02.845 --> 00:21:04.590
us in converting
to the classes.

00:21:04.590 --> 00:21:06.810
So Admin, we set to false.

00:21:06.810 --> 00:21:11.800
And Permissions, we're
actually setting to--

00:21:11.800 --> 00:21:14.290
Permissions is actually a
list, and we're adding

00:21:14.290 --> 00:21:15.450
permissions as we go.

00:21:15.450 --> 00:21:18.120
So we have this online readwrite
and local readwrite.

00:21:18.120 --> 00:21:20.770
And then, of course, to insert
it, we simply call the Insert

00:21:20.770 --> 00:21:21.940
User method.

00:21:21.940 --> 00:21:24.300
So now, on to my hypothetical.

00:21:24.300 --> 00:21:29.090
Let's say the user we just added
is interfering with the

00:21:29.090 --> 00:21:31.160
way we're managing
this sub-account.

00:21:31.160 --> 00:21:33.700
They're deleting things that
we've inserted, or they're

00:21:33.700 --> 00:21:35.610
making edits that they
didn't tell us about.

00:21:35.610 --> 00:21:38.750
Or overall, they're just sort
of creating problems for us

00:21:38.750 --> 00:21:40.640
that we don't want
to deal with.

00:21:40.640 --> 00:21:41.930
So rather than giving them--

00:21:41.930 --> 00:21:42.770
AMANDA SURYA: We
kick them out.

00:21:42.770 --> 00:21:44.760
DANNY HERMES: Well, eventually
we'll kick them out.

00:21:44.760 --> 00:21:46.050
That will be the
second stage--

00:21:46.050 --> 00:21:47.500
the second hypothetical stage.

00:21:47.500 --> 00:21:50.890
But first, before we say, you
don't have any privileges at

00:21:50.890 --> 00:21:53.180
all, we're going to just change
the permissions they

00:21:53.180 --> 00:21:54.870
have, which is what
we can do, right?

00:21:54.870 --> 00:21:56.550
So we're actually going
to update the users.

00:21:56.550 --> 00:21:58.880
So rather than posting,
inserting, we're going to send

00:21:58.880 --> 00:22:00.390
a Put, which will update.

00:22:00.390 --> 00:22:04.090
So let me pull up
these files--

00:22:04.090 --> 00:22:08.135
update_user_entry.py and
update_user_entry.cs.

00:22:12.140 --> 00:22:13.960
Actually, we'll need
to-- let me see if

00:22:13.960 --> 00:22:15.030
it's still in my clipboard.

00:22:15.030 --> 00:22:17.490
If not, I'll need to get
the sub-account again.

00:22:17.490 --> 00:22:20.010
No, not in my clipboard
anymore.

00:22:20.010 --> 00:22:23.570
So I need to pull up this
other file briefly.

00:22:23.570 --> 00:22:24.600
Sorry about this.

00:22:24.600 --> 00:22:25.850
One moment.

00:22:31.290 --> 00:22:33.360
So I need to get the sub-account
ID so we can

00:22:33.360 --> 00:22:34.930
actually make operations
on it.

00:22:34.930 --> 00:22:37.500
The client needs the sub-account
ID for when it

00:22:37.500 --> 00:22:41.010
actually creates the URIs that
it's making requests to.

00:22:41.010 --> 00:22:45.000
So again, the same things as
before, we don't actually need

00:22:45.000 --> 00:22:47.580
some of the data classes that
we imported before, because

00:22:47.580 --> 00:22:49.260
we're only changing
permissions.

00:22:49.260 --> 00:22:52.810
So we create our client.

00:22:52.810 --> 00:22:55.440
And using the client, the signed
client with token we

00:22:55.440 --> 00:23:01.420
have, we are going to call the
Get Users Entry method.

00:23:01.420 --> 00:23:04.240
And I've got to change this
email again, because the demo

00:23:04.240 --> 00:23:06.880
email is not going
to be working.

00:23:06.880 --> 00:23:11.870
So we're going to call Get
Users Entry on this

00:23:11.870 --> 00:23:15.830
authenticated client with the
first argument in email.

00:23:15.830 --> 00:23:18.050
And then we're using the keyword
argument account ID to

00:23:18.050 --> 00:23:21.190
specify which account this
user is coming for.

00:23:21.190 --> 00:23:24.970
And this will actually return
the UsersEntry object that we

00:23:24.970 --> 00:23:26.830
created before.

00:23:26.830 --> 00:23:29.200
This is one of the great things
of using this library

00:23:29.200 --> 00:23:33.340
is it does all the work taking
the XML returned from this and

00:23:33.340 --> 00:23:35.130
parsing it back into an object
that we understand.

00:23:35.130 --> 00:23:36.280
AMANDA SURYA: Does all
the heavy lifting.

00:23:36.280 --> 00:23:37.730
DANNY HERMES: Yeah, it does
all the heavy lifting.

00:23:37.730 --> 00:23:38.860
Exactly.

00:23:38.860 --> 00:23:42.350
So once we have this entry
object, we're going to clear

00:23:42.350 --> 00:23:43.020
the permissions.

00:23:43.020 --> 00:23:45.430
So we're just going to set the
permission attribute to the

00:23:45.430 --> 00:23:49.580
empty list and then recreate new
online_permission and new

00:23:49.580 --> 00:23:53.370
local_permission objects where
we set the online_permission

00:23:53.370 --> 00:23:55.590
to read only so you
no longer can you

00:23:55.590 --> 00:23:57.860
actually change the objects.

00:23:57.860 --> 00:24:00.960
And the local permission, even
worse, we say no access.

00:24:00.960 --> 00:24:02.730
You have no more access
to local data.

00:24:02.730 --> 00:24:03.090
AMANDA SURYA: Oh no!

00:24:03.090 --> 00:24:04.140
DANNY HERMES: Sorry.

00:24:04.140 --> 00:24:05.130
You were bad.

00:24:05.130 --> 00:24:08.260
And then we add these
permissions to the entry and

00:24:08.260 --> 00:24:11.590
simply call the Update
Users Entry method.

00:24:11.590 --> 00:24:15.150
And this does many of the same
things, sends the same body,

00:24:15.150 --> 00:24:18.250
et cetera, but changes
the HTTP verb

00:24:18.250 --> 00:24:20.010
from a post to a put.

00:24:20.010 --> 00:24:22.300
And then after that, we're going
to print the ID just to

00:24:22.300 --> 00:24:25.540
make sure everything worked
as we expected.

00:24:25.540 --> 00:24:28.260
So again, let me pull up my
Python REPL and run this.

00:24:33.210 --> 00:24:34.250
OK, so there we have it.

00:24:34.250 --> 00:24:35.500
It ran successfully.

00:24:38.300 --> 00:24:41.110
I'm not going to talk
about the .NET code.

00:24:41.110 --> 00:24:42.120
We've seen that already.

00:24:42.120 --> 00:24:42.670
AMANDA SURYA: Very similar.

00:24:42.670 --> 00:24:44.860
DANNY HERMES: Yeah, we
have the same ideas.

00:24:44.860 --> 00:24:49.660
I'll just note that the actual
method that we're calling--

00:24:49.660 --> 00:24:51.550
Update Entry--

00:24:51.550 --> 00:24:55.220
simply takes this insert entry
that we retrieved.

00:24:55.220 --> 00:24:59.240
And similarly, we can retrieve
the entry by specifying the

00:24:59.240 --> 00:25:01.050
email address and
the account ID.

00:25:01.050 --> 00:25:03.540
But when we call up data entry,
we don't actually need

00:25:03.540 --> 00:25:07.340
to send the account ID, because
it's actually on the

00:25:07.340 --> 00:25:10.610
object itself as
the ID element.

00:25:10.610 --> 00:25:14.410
So finally, as Amanda said,
there's one more hypothetical

00:25:14.410 --> 00:25:16.610
situation that we might
be worried about.

00:25:16.610 --> 00:25:20.120
And that's where even read-only,
somebody is using

00:25:20.120 --> 00:25:21.120
the data incorrectly.

00:25:21.120 --> 00:25:23.630
Maybe somebody left an
organization and they still

00:25:23.630 --> 00:25:24.150
have access.

00:25:24.150 --> 00:25:28.020
Or maybe somebody is just off
the product or moved onto a

00:25:28.020 --> 00:25:31.790
different project, and the
merchant that you're managing

00:25:31.790 --> 00:25:33.860
the account for wants
them gone, right?

00:25:33.860 --> 00:25:37.500
So we have, obviously,
a delete function.

00:25:37.500 --> 00:25:40.130
And that uses the HTTP
delete verb.

00:25:40.130 --> 00:25:42.510
So that's the last
thing we'll do.

00:25:42.510 --> 00:25:45.080
We will delete this
user entry.

00:25:45.080 --> 00:25:51.720
So again, let me go get the
sub-account ID so we

00:25:51.720 --> 00:25:52.970
can paste it in.

00:25:58.610 --> 00:25:59.900
OK.

00:25:59.900 --> 00:26:03.270
So it's the same sort
of thing as before.

00:26:03.270 --> 00:26:05.870
We have one extra import
we haven't seen before.

00:26:05.870 --> 00:26:07.700
And we'll see in a bit
why we do that.

00:26:07.700 --> 00:26:12.120
But from the generic
gdata.client module, I'm going

00:26:12.120 --> 00:26:15.390
to be importing the RequestError
class.

00:26:15.390 --> 00:26:19.300
And this is a generic error,
which all errors inherit from

00:26:19.300 --> 00:26:20.320
in this library.

00:26:20.320 --> 00:26:23.710
And we're going to do that,
because after we've deleted

00:26:23.710 --> 00:26:26.410
someone, we expect the next time
we try to retrieve them,

00:26:26.410 --> 00:26:26.970
they're not there.

00:26:26.970 --> 00:26:30.280
So we actually expect a
404 Not Found error.

00:26:30.280 --> 00:26:32.720
So we're going to, after
we delete, make

00:26:32.720 --> 00:26:34.510
sure the delete succeeded.

00:26:34.510 --> 00:26:37.320
So again, same type of stuff
at the beginning.

00:26:37.320 --> 00:26:38.900
It's just in here so
the code runs.

00:26:38.900 --> 00:26:41.310
We instantiate a client
object that we can

00:26:41.310 --> 00:26:43.360
make requests with.

00:26:43.360 --> 00:26:47.790
We use the Get Users Entry
method with-- oh, I've got to

00:26:47.790 --> 00:26:49.715
update that email again.

00:26:58.020 --> 00:26:58.470
Hey, there we go.

00:26:58.470 --> 00:27:00.810
I spelled it right
the first time--

00:27:00.810 --> 00:27:01.630
for the first time.

00:27:01.630 --> 00:27:03.010
AMANDA SURYA: Everybody knows
my email address.

00:27:03.010 --> 00:27:04.710
DANNY HERMES: Yeah, sorry
about that, Amanda.

00:27:04.710 --> 00:27:08.240
So we call the Get Users Entry
method with the email and the

00:27:08.240 --> 00:27:11.140
sub-account ID that we've
created to retrieve the entry

00:27:11.140 --> 00:27:13.340
again after we've updated,
after we've reset the

00:27:13.340 --> 00:27:14.870
permissions.

00:27:14.870 --> 00:27:18.510
And then we call Delete Users
Entry, and we pass in the

00:27:18.510 --> 00:27:20.030
entry that we've
just retrieved.

00:27:20.030 --> 00:27:23.480
And as a keyword argument, we
pass in our account ID.

00:27:23.480 --> 00:27:25.200
It's much of the same, right?

00:27:25.200 --> 00:27:28.070
And rather than actually getting
a parsed UsersEntry

00:27:28.070 --> 00:27:30.660
object back, as we got when
we called Get, Insert, and

00:27:30.660 --> 00:27:33.120
Update, we just get
a response object.

00:27:33.120 --> 00:27:35.700
And that response object has
certain things like the status

00:27:35.700 --> 00:27:38.270
code, the reason, and
the payload, if

00:27:38.270 --> 00:27:39.140
there is any payload.

00:27:39.140 --> 00:27:41.650
For a delete there with our API,
there actually won't be

00:27:41.650 --> 00:27:42.010
any payload.

00:27:42.010 --> 00:27:44.020
It'll just be an empty string.

00:27:44.020 --> 00:27:49.190
But after doing this, I'm going
to again ask the API to

00:27:49.190 --> 00:27:50.660
retrieve this sub-account.

00:27:50.660 --> 00:27:52.340
So again, I've got to
change the email.

00:27:52.340 --> 00:27:53.920
I believe this is the
last time I've got

00:27:53.920 --> 00:27:55.170
to change the email.

00:28:00.580 --> 00:28:03.370
I was one for four on spelling
it right the first time.

00:28:03.370 --> 00:28:04.940
So again, we'll try to
retrieve it using

00:28:04.940 --> 00:28:06.580
get_users_entry.

00:28:06.580 --> 00:28:09.640
And if it succeeds, we'll
say our status was 200.

00:28:09.640 --> 00:28:14.250
But if it does not succeed,
we will catch an exception

00:28:14.250 --> 00:28:15.870
request error.

00:28:15.870 --> 00:28:19.100
We'll catch it, we'll save it
to the variable Exception

00:28:19.100 --> 00:28:22.550
within the scope of the
exception, and we'll save our

00:28:22.550 --> 00:28:25.400
status instead as the status
of that exception.

00:28:25.400 --> 00:28:27.980
And of course, we're hoping
that we get a 404.

00:28:27.980 --> 00:28:32.200
So the expected output
of this is that

00:28:32.200 --> 00:28:33.600
the delete will succeed.

00:28:33.600 --> 00:28:37.970
Actually let's add a print
statement in here to get the

00:28:37.970 --> 00:28:41.140
status of our delete response.

00:28:41.140 --> 00:28:44.070
So first, it'll print,
hopefully, 200.

00:28:44.070 --> 00:28:46.910
And actually, let's also print
the reason for it.

00:28:46.910 --> 00:28:52.130
So 200 OK is what we're going to
expect first to be printed

00:28:52.130 --> 00:28:54.580
after the delete succeeds,
after Amanda has been

00:28:54.580 --> 00:28:57.200
completely removed from
this sub-account.

00:28:57.200 --> 00:29:00.240
And then for this second stage,
when we try to retrieve

00:29:00.240 --> 00:29:02.170
it, we expect a status of 404.

00:29:02.170 --> 00:29:03.740
So let's actually run
it, and let's see.

00:29:07.090 --> 00:29:07.790
There's the first--

00:29:07.790 --> 00:29:08.890
200 OK--

00:29:08.890 --> 00:29:09.570
and the second--

00:29:09.570 --> 00:29:10.400
404.

00:29:10.400 --> 00:29:12.070
So there you have it.

00:29:12.070 --> 00:29:13.336
AMANDA SURYA: I no longer
have access.

00:29:13.336 --> 00:29:16.540
DANNY HERMES: A delete works,
and after doing all these bad

00:29:16.540 --> 00:29:19.780
things and finally being moved
off the project, Amanda no

00:29:19.780 --> 00:29:23.050
longer has access to the

00:29:23.050 --> 00:29:25.730
sub-account that we had created.

00:29:25.730 --> 00:29:31.570
So with that, it looks like we
don't have any live questions,

00:29:31.570 --> 00:29:35.160
obviously, and no questions from
the moderator this week.

00:29:35.160 --> 00:29:37.810
But we do have one announcement
to make.

00:29:37.810 --> 00:29:41.660
I'll let Amanda make that
announcement, that--

00:29:41.660 --> 00:29:46.970
AMANDA SURYA: Well, if you're
interested in doing this sort

00:29:46.970 --> 00:29:51.690
of stuff that we do, in terms
of developer relations work,

00:29:51.690 --> 00:29:53.010
our team is hiring.

00:29:53.010 --> 00:29:59.870
So if you're interested, visit
developers.google.com/jobs and

00:29:59.870 --> 00:30:02.700
check on our open positions
there and apply.

00:30:02.700 --> 00:30:07.960
And again, thank you, Danny, for
walking us through how to

00:30:07.960 --> 00:30:12.370
manage MCA and sub-accounts.

00:30:12.370 --> 00:30:18.370
I think a lot of our marketplace
merchants will

00:30:18.370 --> 00:30:20.640
benefit from this.

00:30:20.640 --> 00:30:25.140
And again, if you have any
questions for us, we're doing

00:30:25.140 --> 00:30:26.870
this biweekly.

00:30:26.870 --> 00:30:29.270
So in two weeks, we're doing
another Hangout.

00:30:29.270 --> 00:30:33.320
Or you can also visit our
forum and read the docs.

00:30:33.320 --> 00:30:36.560
And if you have any questions,
visit a forum or

00:30:36.560 --> 00:30:38.650
join us in two weeks.

00:30:38.650 --> 00:30:39.180
DANNY HERMES: Yes.

00:30:39.180 --> 00:30:41.970
We will see you all August
16 at 10:00 AM.

00:30:41.970 --> 00:30:42.490
AMANDA SURYA: That's right.

00:30:42.490 --> 00:30:44.200
All right, thank
you, everybody.

00:30:44.200 --> 00:30:44.515
Bye.

00:30:44.515 --> 00:30:45.765
DANNY HERMES: Bye.

