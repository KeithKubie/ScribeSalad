WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.399
(Sean:) So what we got here, Mike, tell me, tell me!

00:00:02.399 --> 00:00:08.549
(Mike:) Well, we have a strange graph drawn out on my page. A comment on a previous video asked about Dijkstra's shortest path, now

00:00:08.550 --> 00:00:11.399
I happen to have implemented Dijkstra's shorter path for one of the pieces of research

00:00:11.400 --> 00:00:17.010
I was doing a few years ago, so I thought: "I'm at least somewhat placed to have to give an opinion on it!"

00:00:17.010 --> 00:00:22.049
So let's talk about Dijkstra's shortest path, what it is, where it's used, and so on.

00:00:24.939 --> 00:00:32.099
Path finding algorithms are obviously quite important -- we use them all the time on Google maps or on our sat-nav system,

00:00:32.320 --> 00:00:34.500
all right, there was a recent video on satellite navigation

00:00:34.690 --> 00:00:37.349
and how it works, but of course that's only half the story.

00:00:37.690 --> 00:00:43.110
(Mike:) Finding out where you are exactly is the first part of the problem, the second part is "I want to go over here,

00:00:43.110 --> 00:00:44.770
what's the best route to do this?"

00:00:44.770 --> 00:00:50.249
Okay, route planning also comes in on things like routing, so if you've got a network and lots of routers

00:00:50.280 --> 00:00:57.180
what's the best way to route those packets through which ports to get to your destination the quickest, so things like this -- now Dijkstra's

00:00:57.180 --> 00:00:59.520
shortest paths sees a lot of use in all of these things and

00:01:00.100 --> 00:01:04.710
extensions of it, so for example A* search -- so I've drawn out an

00:01:05.379 --> 00:01:08.518
approximation of a road system on this piece of paper,

00:01:08.520 --> 00:01:10.520
so we're going to use the analogy of roads

00:01:10.659 --> 00:01:16.739
for this one, because I think it's a good -- good example of types of shortest paths and we're trying to start here, at S, and

00:01:16.740 --> 00:01:22.799
get down to E, right, this is broadly speaking, a small version of what a sat-nav does when you say:

00:01:22.799 --> 00:01:24.799
"How do I get there", right?

00:01:25.090 --> 00:01:27.090
Now, each of these

00:01:27.490 --> 00:01:34.259
nodes represents a junction, so, the vertices on the graph, so, A could be a roundabout, B the T-junction -- doesn't really matter --

00:01:34.840 --> 00:01:38.490
actually B is more of a roundabout because it has four outputs -- anyway, each of these numbers

00:01:39.159 --> 00:01:45.029
represents how hard it is to get along that road, so that in real life would be whether it was a motorway or a highway,

00:01:45.399 --> 00:01:47.609
whether it was a country road with a load of potholes,

00:01:47.850 --> 00:01:53.970
maybe there's a tree down it and so you can't get through that road, right, so in the Dijkstra implementation that I

00:01:54.220 --> 00:01:57.149
am familiar with, and most Dijkstra implementations,

00:01:57.939 --> 00:02:05.309
smaller is better okay, so broadly speaking this route here is kind of like our motorway right, twos, ones,

00:02:05.310 --> 00:02:06.009
that's good,

00:02:06.009 --> 00:02:10.469
this one is a bit of a faff, you know, for some maybe mildly A-roads,

00:02:10.569 --> 00:02:13.409
right, and this seven here that you're falling in a fort,

00:02:13.730 --> 00:02:15.470
and, you know, you've got water in the engine,

00:02:15.470 --> 00:02:21.619
and it's bad. The question is "how do we find a route from here to here", now, of course, this is a small graph

00:02:21.660 --> 00:02:25.129
so actually what we could just do is just search all the way through it by hand or

00:02:25.650 --> 00:02:30.530
using a very simple sort of brute-force search approach, and kind of get the best go, right,

00:02:30.540 --> 00:02:33.920
but if you think of the UK or the US or some other countries'

00:02:34.170 --> 00:02:39.349
massive road network, we can't afford to do that, right, we have to be a bit smarter about how we look through.

00:02:39.900 --> 00:02:45.110
And we also want to know absolutely that once we found a route, it is in fact the shortest route,

00:02:45.110 --> 00:02:48.139
and we didn't just miss one. What Dijkstra does is basically

00:02:49.349 --> 00:02:52.309
similar to a sort of brute-force flood-fill search through this space,

00:02:52.620 --> 00:02:55.370
but does it in a kind of -- in the order that makes the most sense,

00:02:55.530 --> 00:03:00.919
based on how fast these roads are, so it will check the quickest roads first. So to do Dijkstra,

00:03:00.920 --> 00:03:06.500
we need a few things, first of all we obviously need a graph right and then we need some -- some

00:03:06.959 --> 00:03:10.098
idea of how long the path is, to let's say B,

00:03:10.099 --> 00:03:16.429
once we've calculated it or something like it so at the very beginning of our search we have S, we are at S,

00:03:16.650 --> 00:03:18.769
(Sean:) As for start, right? (Mike:) It's for start, yes,

00:03:18.810 --> 00:03:20.609
which confused me because some of the other

00:03:20.609 --> 00:03:23.059
letters are just in order and then these two aren't, but anyway,

00:03:23.060 --> 00:03:27.739
S has a distance of zero, right, it costs me nothing to get to S because I'm already there, everything else --

00:03:27.840 --> 00:03:33.769
I'll just put a couple out, just to show you, A, B and K have a distance of infinity because that basically says we haven't

00:03:34.079 --> 00:03:38.329
looked yet, we don't know how far, so for all we know it might not be possible to get there,

00:03:38.480 --> 00:03:40.480
no, and finally, E

00:03:40.530 --> 00:03:45.139
it's just the same, it's infinity, but with a smiley face to say that we've made it, right,

00:03:45.389 --> 00:03:50.929
now this structure here that I'm going to create is called a "priority queue". Each of these will have a distance,

00:03:51.030 --> 00:03:57.589
but they're ordered also by that distance, so the shortest one is at the top, that's important, and we'll do it as we go through.

00:03:58.170 --> 00:04:02.929
So let's start our search, we start at S, and we look through the neighbors of S and we say "right, well, A,

00:04:03.389 --> 00:04:06.319
it costs me 7 to get to A", right, it's a bit of a pain.

00:04:06.480 --> 00:04:12.049
So, we were at 0 distance, it costs me 7, so now we're at 7, right?

00:04:12.500 --> 00:04:14.450
So, A, I scratch my infinity,

00:04:14.450 --> 00:04:21.709
and I write 7, all right, so A is 7, okay, A is still the second shortest path currently because all the others are infinity.

00:04:21.709 --> 00:04:25.580
Yeah, B is 0+2 so that's 2,

00:04:25.860 --> 00:04:29.900
so let's just put a 2 in there. (Sean:) This is all even though we haven't actually got to the end yet,

00:04:29.900 --> 00:04:31.340
you're just looking at the numbers.

00:04:31.340 --> 00:04:34.789
(Mike:) we can't get to E without having a look through all of these junctions,

00:04:34.889 --> 00:04:38.299
so this is what we're doing, and we're working our way in a smart way, now B

00:04:38.300 --> 00:04:43.460
is in this priority queue, but it has a lower number than A, so it takes its place at the top of a line,

00:04:43.500 --> 00:04:45.500
okay, so that's good so far.

00:04:45.629 --> 00:04:47.779
Finally, the only other thing connected to S is

00:04:47.879 --> 00:04:53.179
C, which has got a weighting of three, so let's just find C in my list, of course, shuffled

00:04:53.550 --> 00:04:55.220
thingies and there we go,

00:04:55.220 --> 00:04:56.000
and hopefully

00:04:56.000 --> 00:05:02.179
how Dijkstra works will start to become clear once you see what I do next, so C is three, the only other thing that of

00:05:02.180 --> 00:05:03.690
course I forgot, is

00:05:03.690 --> 00:05:09.109
while we're doing our search, we have to keep track of where we've been, so B, for example,

00:05:09.110 --> 00:05:16.819
we know has a distance of two through the path S, ok, so S was the previous version, right, that's also true of A, and

00:05:17.039 --> 00:05:19.999
also true of C. Now after we swap

00:05:20.000 --> 00:05:25.789
C and A so now we have them in order, all we have not seen is still infinity. Now, S is done, right, so we can take it away

00:05:25.789 --> 00:05:30.169
and put it in our finished pile over here, right, S we don't need to worry about anymore.

00:05:30.569 --> 00:05:35.029
The next step, is to see where is the current shortest path, well it's B,

00:05:35.030 --> 00:05:39.139
right, B has got the lowest number, so let's start looking at B. So, if we look at B,

00:05:39.139 --> 00:05:42.079
we've already been to S, so we ignore it. We can go to D,

00:05:42.080 --> 00:05:48.180
so let's put in a D, and D is the distance to B plus whatever this road is which is 6, 2 plus 4 is 6,

00:05:48.180 --> 00:05:49.460
and the route

00:05:49.469 --> 00:05:56.359
through D, which is shortest is currently going through B, and we'll put that in, now 6 goes in just above A, ok, there

00:05:56.360 --> 00:06:01.430
we go. Now we can also go to B from A -- we haven't finished with A yet,

00:06:01.430 --> 00:06:05.000
it's just sitting in this queue -- and currently the distance to A is 7, right,

00:06:05.639 --> 00:06:12.079
but, actually, the distance to B was 2, and the distance to A from B is 3, which is 5, so actually,

00:06:12.479 --> 00:06:19.278
taking this detour here which looks longer is actually shorter, because of this tree on the line or something like that right, so remember, you know this

00:06:19.279 --> 00:06:25.669
isn't representative of the actual physical distance from S to C. So we've updated D, and A is now shorter, right?

00:06:25.669 --> 00:06:31.609
So, we kept -- we take our A, and we say "well now the route is 5, not 7", it's decreased and

00:06:32.130 --> 00:06:35.479
it's no longer the shortest path from S to A, it's from B,

00:06:35.479 --> 00:06:39.829
so look scribble out S, right, like, I'm getting too much technical needs but don't worry about it.

00:06:40.010 --> 00:06:44.120
So, A now overtakes D in our priority queue, all right?

00:06:44.850 --> 00:06:48.890
So that's looking good, okay, H, B had a length of 2, H

00:06:49.200 --> 00:06:53.599
has a length of 1, so H has a distance of 3, B is done, right? We've done B,

00:06:53.600 --> 00:07:00.650
we can count that as done, so C next, right, so we're here. We can't go to S, we can only go to L,

00:07:00.650 --> 00:07:04.669
that's a nice, easy one. So I need to find out -- so L goes to C and

00:07:05.310 --> 00:07:10.580
it's 3 plus 2, it's 5, so L comes in just underneath value like this, so C's done

00:07:10.580 --> 00:07:11.420
So we look at H,

00:07:11.420 --> 00:07:17.749
and we say "what's next from H". We can look at F, so F will get 3 plus another 3, so about 6,

00:07:18.450 --> 00:07:24.200
via H, and then G is H, which is 3, plus 2 so that's 5.

00:07:24.510 --> 00:07:29.450
A next, we've already been to S, we've already been to B. So we start to get a little bit faster now,

00:07:29.450 --> 00:07:32.990
we've seen some stuff, already. What we're basically saying is, we know what the shortest path to B

00:07:32.990 --> 00:07:37.159
is, because we've already seen it so we can only look at new things, so we look at D,

00:07:37.290 --> 00:07:42.439
D is currently 6 via B, A is currently 5, 5 plus 4 is 9,

00:07:43.080 --> 00:07:47.210
which is bigger than the old D, so we make no change, the shortest path to D

00:07:47.210 --> 00:07:52.279
does not go through A, so we don't worry about that, ok A's done. Next up: L. L

00:07:52.470 --> 00:07:54.170
can't go to C, we've already been there,

00:07:54.170 --> 00:07:58.759
I and J both have a length of 4, so that's just fine, those two I and J --

00:07:59.280 --> 00:08:01.080
[I'm] needing all of them --

00:08:01.080 --> 00:08:05.900
right, so these both go through L, and they both have a path length of

00:08:06.540 --> 00:08:12.140
9... 9 okay, so these go -- and they're both long, but they go in front of all the infinity ones.

00:08:12.140 --> 00:08:15.559
But -- but down at the bottom here all right, the order isn't important.

00:08:15.560 --> 00:08:19.190
So how [are] we doing, L is done, so then you can see what's about to happen, right?

00:08:19.190 --> 00:08:22.730
We start with G, G has got a distance of 5, we've already been to H,

00:08:22.890 --> 00:08:26.869
let's go to E, and so we say E goes back to G and

00:08:27.870 --> 00:08:29.870
has a length of

00:08:30.210 --> 00:08:32.629
5, 6, 7, and we're there, right?

00:08:32.760 --> 00:08:38.299
And then the final step is just to backtrack our route based on where we've been, so E goes to G --

00:08:38.300 --> 00:08:42.740
we can skip these, they aren't used -- G goes to H, H goes to B, and B

00:08:43.380 --> 00:08:46.910
Goes straight to S, and that is our shortest route through this graph,

00:08:46.980 --> 00:08:50.420
it's found by Dijkstra, the idea is, that if this graph was much much bigger,

00:08:50.640 --> 00:08:55.080
you would prioritize looking down motorways first, because they have less weight, and you would

00:08:56.080 --> 00:08:58.139
prioritize physically short distances,

00:08:58.570 --> 00:09:01.470
anything that you can to try and make your search a bit quicker.

00:09:01.570 --> 00:09:07.590
When you're searching to let's say travel from Nottingham to London, you don't look at the roads in Scotland, at least not first,

00:09:07.810 --> 00:09:08.710
Because it's unlikely

00:09:08.710 --> 00:09:14.099
[that] they're going to be the shortest ones. What you do is you get yourself to the M1 and start travelling down towards London as quickly

00:09:14.100 --> 00:09:16.860
as possible. That leads us to one last problem with Dijkstra,

00:09:16.870 --> 00:09:18.250
which is perhaps for another video?

00:09:18.250 --> 00:09:22.890
But I'll just -- I'll just introduce it -- if you imagine a situation where I'm at my house,

00:09:22.890 --> 00:09:30.569
and let's say my house is here, at S, and this is sort of [the] M1 junction, right, which happens to be about junking 26?

00:09:30.570 --> 00:09:34.469
But we'll call this A, alright, and then this is where I'm going in this direction,

00:09:34.570 --> 00:09:38.879
so lots of nodes along here, and there's lots of nodes along here.

00:09:38.880 --> 00:09:43.770
And this is my destination down here on the end of this motorway. Because of a slight traffic jam,

00:09:44.080 --> 00:09:50.280
these all have slightly higher weights than these. Because Dijkstra doesn't build any idea of the direction

00:09:50.280 --> 00:09:55.739
you're traveling, any kind of heuristic about what you're doing in a sort of smarter way, it's going to look up here first,

00:09:55.930 --> 00:09:59.010
it's going to travel all the way up this motorway as far as it can and

00:09:59.350 --> 00:10:03.840
only change direction when it becomes the shortest path to do so, so

00:10:04.180 --> 00:10:09.270
what you need to do if you're going to actually implement a sat-nav, is be a little bit smarter -- don't start sort of

00:10:09.490 --> 00:10:11.140
looking to all the fast roads,

00:10:11.140 --> 00:10:15.359
look at the fast roads that are going roughly in the right direction because otherwise you might be wasting a lot of time.

