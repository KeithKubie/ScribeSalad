WEBVTT
Kind: captions
Language: en

00:00:05.234 --> 00:00:07.100
Black:
Hi, my name is Naomi Black.

00:00:07.100 --> 00:00:09.734
I'm a member of the
Accessibility Engineering team

00:00:09.734 --> 00:00:11.400
at Google,
and I work

00:00:11.400 --> 00:00:12.567
on captioning for YouTube,

00:00:12.567 --> 00:00:14.300
and I also work on accessibility
for the blind.

00:00:14.300 --> 00:00:15.934
Boedihardjo:
Hi, I'm Cynthia Boedihardjo.

00:00:15.934 --> 00:00:18.267
I am a livestream
program manager at Google.

00:00:18.267 --> 00:00:21.200
And I work on different types
of livestreams

00:00:21.200 --> 00:00:24.067
from concerts
to this year's Google I/O.

00:00:24.067 --> 00:00:25.567
Posnick: And I'm Jeff Posnick,

00:00:25.567 --> 00:00:28.667
and I'm a member of the YouTube
API Developer Relations team

00:00:28.667 --> 00:00:32.300
at Google.

00:00:32.300 --> 00:00:34.300
Black: So before we get started,
I want to point out

00:00:34.300 --> 00:00:36.701
the hashtags if you feel the
need to tweet during our talk--

00:00:36.701 --> 00:00:39.400
#io2011 and #youtube.

00:00:39.400 --> 00:00:40.901
There's a link for feedback.

00:00:40.901 --> 00:00:43.467
And if you want to talk to us
afterwards about captioning

00:00:43.467 --> 00:00:44.767
and stuff related to this talk,

00:00:44.767 --> 00:00:46.834
send an email
to captioning@google.com,

00:00:46.834 --> 00:00:49.334
and it will reach us.

00:00:49.334 --> 00:00:52.100
So I thought I'd start
by giving you an overview

00:00:52.100 --> 00:00:53.634
of what we're gonna talk about
in our talk.

00:00:53.634 --> 00:00:55.367
I'm gonna start by introducing

00:00:55.367 --> 00:00:57.701
the captioning
that we did here at I/O Live,

00:00:57.701 --> 00:00:59.701
which was streamed
from the conference,

00:00:59.701 --> 00:01:00.968
and talk about that
a little bit.

00:01:00.968 --> 00:01:04.133
And Cynthia will talk to you
about how the gadget

00:01:04.133 --> 00:01:05.968
was created
and what that involved.

00:01:05.968 --> 00:01:08.868
And then we will talk
about WebVTT,

00:01:08.868 --> 00:01:11.667
which is a new timed text format
for HTML5.

00:01:11.667 --> 00:01:13.167
It lets us do some cool things,

00:01:13.167 --> 00:01:15.767
and we'll show you some demos
in WebKit and some code.

00:01:15.767 --> 00:01:19.901
And then Jeff will talk
about the YouTube Caption API,

00:01:19.901 --> 00:01:23.000
and there will be more code
and demos.

00:01:23.000 --> 00:01:25.601
So I'd like to start
by talking a little bit

00:01:25.601 --> 00:01:27.334
about why captions
are important to us.

00:01:27.334 --> 00:01:29.968
This chart, which--
you can't read it.

00:01:29.968 --> 00:01:32.200
Just notice that there are bars
and some of them are larger

00:01:32.200 --> 00:01:33.267
than the others.

00:01:33.267 --> 00:01:34.267
[laughs]

00:01:34.267 --> 00:01:35.334
The really long bars--

00:01:35.334 --> 00:01:37.267
so these
are the world population

00:01:37.267 --> 00:01:39.067
on the Internet roughly
by country.

00:01:39.067 --> 00:01:41.467
And at the top we have China.
There's lots of Chinese.

00:01:41.467 --> 00:01:42.667
And then there's
the United States,

00:01:42.667 --> 00:01:43.834
and it goes down the list.

00:01:43.834 --> 00:01:45.701
And you can see
there's some yellow bars.

00:01:45.701 --> 00:01:48.234
And the first yellow bar
represents the number

00:01:48.234 --> 00:01:49.901
of deaf
and hard of hearing people

00:01:49.901 --> 00:01:52.200
in the United States alone.

00:01:52.200 --> 00:01:54.734
And so that number--
I like to throw this out

00:01:54.734 --> 00:01:56.267
because I'm Canadian.

00:01:56.267 --> 00:01:58.801
That's more than the population
of Canada that's online.

00:01:58.801 --> 00:02:00.567
So, you know, nobody would say,

00:02:00.567 --> 00:02:01.968
"Oh, well, let's not,"
you know,

00:02:01.968 --> 00:02:03.534
"let's not broadcast this
to the Canadians.

00:02:03.534 --> 00:02:05.200
They could care less."
But sometimes,

00:02:05.200 --> 00:02:07.667
when we put video online,
if it doesn't have captions,

00:02:07.667 --> 00:02:09.067
you're excluding a population

00:02:09.067 --> 00:02:10.234
that's actually larger
than that.

00:02:10.234 --> 00:02:11.968
So I like to throw this graph up

00:02:11.968 --> 00:02:14.467
to really show you the numbers.

00:02:14.467 --> 00:02:17.501
So we caption our videos

00:02:17.501 --> 00:02:19.734
for accessibility reasons
obviously,

00:02:19.734 --> 00:02:23.133
but captions and timed text
are actually really powerful

00:02:23.133 --> 00:02:26.000
for the web because video
is really hard to search.

00:02:26.000 --> 00:02:28.334
But when you caption your video,
the full text of that video,

00:02:28.334 --> 00:02:30.234
if you upload captions
to YouTube,

00:02:30.234 --> 00:02:32.567
that full text
becomes searchable.

00:02:32.567 --> 00:02:34.634
So you can actually search
inside your video

00:02:34.634 --> 00:02:36.701
on something that was said
at minute 30

00:02:36.701 --> 00:02:40.133
that may not be in your talk
description or your title.

00:02:40.133 --> 00:02:42.834
Captioned video,
because the captions are text,

00:02:42.834 --> 00:02:44.200
we can do cool things with it.

00:02:44.200 --> 00:02:45.634
We can change the size.

00:02:45.634 --> 00:02:47.834
We can translate the captions
using machine translation.

00:02:47.834 --> 00:02:49.434
And our audience
on the Internet

00:02:49.434 --> 00:02:51.634
doesn't necessarily speak
our language.

00:02:51.634 --> 00:02:53.234
We really--
we want to reach the world.

00:02:53.234 --> 00:02:55.868
So captions are helpful
for translation.

00:02:55.868 --> 00:02:58.200
And finally
there's a lot of people

00:02:58.200 --> 00:03:00.467
who use
same language subtitling.

00:03:00.467 --> 00:03:02.133
They may be learning
your language.

00:03:02.133 --> 00:03:04.567
And so having the text
underneath the speaker

00:03:04.567 --> 00:03:06.968
helps them follow an accent
that's unfamiliar

00:03:06.968 --> 00:03:09.667
or somebody who's speaking
faster than they're used to.

00:03:09.667 --> 00:03:11.200
And I'd like
to show this picture.

00:03:11.200 --> 00:03:13.467
This was taken at a conference
that we had

00:03:13.467 --> 00:03:15.367
in France recently
called Atmosphere.

00:03:15.367 --> 00:03:18.367
And this is CIOs and CTOs
and businesspeople.

00:03:18.367 --> 00:03:19.734
Nobody was wearing a T-shirt.

00:03:19.734 --> 00:03:24.334
And they all met in France,
but they spoke English.

00:03:24.334 --> 00:03:27.267
And very few of the attendees
had English as a first language,

00:03:27.267 --> 00:03:29.434
but it was the common language
that everybody came

00:03:29.434 --> 00:03:30.434
to do business in.

00:03:30.434 --> 00:03:31.901
And so to help our attendees,

00:03:31.901 --> 00:03:33.300
even though there was nobody
at this conference

00:03:33.300 --> 00:03:34.701
who was deaf
or hard of hearing

00:03:34.701 --> 00:03:37.534
as far as I know,
we presented the text on screen

00:03:37.534 --> 00:03:39.901
in all of the talks
behind the speaker

00:03:39.901 --> 00:03:42.067
so that everybody
who was coming together

00:03:42.067 --> 00:03:44.234
and using this language
that was unfamiliar to them

00:03:44.234 --> 00:03:45.901
would have the assistance
of the text.

00:03:45.901 --> 00:03:47.801
You think about developers
in Japan.

00:03:47.801 --> 00:03:49.801
They're very used
to reading English,

00:03:49.801 --> 00:03:51.601
but maybe not as used
to hearing it spoken,

00:03:51.601 --> 00:03:53.100
especially for technical terms.

00:03:53.100 --> 00:03:57.767
So these captions
really help everyone.

00:03:57.767 --> 00:04:00.934
So at I/O this year,
we have live captions.

00:04:00.934 --> 00:04:02.801
We actually had live captions
last year,

00:04:02.801 --> 00:04:05.000
but this year we decided
to go a step further

00:04:05.000 --> 00:04:07.567
with the huge interest
in I/O Live

00:04:07.567 --> 00:04:08.868
for the streaming video.

00:04:08.868 --> 00:04:12.067
We really wanted to accompany
the video with captions

00:04:12.067 --> 00:04:14.133
and make those available
not just here at I/O

00:04:14.133 --> 00:04:16.234
but for the world.

00:04:16.234 --> 00:04:18.367
So I'm gonna talk a little bit
about what that involved.

00:04:18.367 --> 00:04:21.501
The first thing I need to tell
people is that captions are done

00:04:21.501 --> 00:04:22.834
by people.

00:04:22.834 --> 00:04:24.200
I mean, not all captions.

00:04:24.200 --> 00:04:25.567
We have automatic captions
on YouTube,

00:04:25.567 --> 00:04:27.667
but the kinds of captions
that you're seeing here

00:04:27.667 --> 00:04:30.300
at I/O where they're popping up
on screen

00:04:30.300 --> 00:04:31.801
several hundred words a minute,

00:04:31.801 --> 00:04:34.601
we don't have computers that
are fast and accurate enough

00:04:34.601 --> 00:04:35.834
to do that,
and so we rely

00:04:35.834 --> 00:04:37.300
on highly-skilled people

00:04:37.300 --> 00:04:40.901
who are typing
on special stenography rig,

00:04:40.901 --> 00:04:43.567
and that allows them to go
several hundred words a minute

00:04:43.567 --> 00:04:46.667
very accurately,
and that then goes out

00:04:46.667 --> 00:04:47.901
to the screen on the show floor,

00:04:47.901 --> 00:04:50.200
and, in this case,
you can see Laura.

00:04:50.200 --> 00:04:51.501
She's one
of our transcriptionists.

00:04:51.501 --> 00:04:53.400
This picture was actually taken
on the first keynote.

00:04:53.400 --> 00:04:55.000
And she's typing away
on her rig.

00:04:55.000 --> 00:04:56.734
And that's sending
the captions out.

00:04:56.734 --> 00:04:59.367
Beyond the show floor,
we send them by TCP/IP,

00:04:59.367 --> 00:05:00.934
and they go out
through a service,

00:05:00.934 --> 00:05:03.467
in this case provided
by a company called StreamText,

00:05:03.467 --> 00:05:04.934
and they had a .NET connector,

00:05:04.934 --> 00:05:07.334
and they provide
the streaming service

00:05:07.334 --> 00:05:09.067
for accessibility
to the Web.

00:05:09.067 --> 00:05:10.200
Well, when we came to them
and we wanted

00:05:10.200 --> 00:05:12.200
to do this for I/O,
we realized

00:05:12.200 --> 00:05:14.033
we were gonna have
a lot of people watching

00:05:14.033 --> 00:05:16.567
this caption gadget,
and so we wanted

00:05:16.567 --> 00:05:18.934
to really host it
on App Engine for scalability.

00:05:18.934 --> 00:05:23.601
So I went to Cynthia,
and Cynthia's gonna talk

00:05:23.601 --> 00:05:24.934
about what was involved.

00:05:24.934 --> 00:05:28.801
Boedihardjo: Thanks, Naomi.

00:05:28.801 --> 00:05:31.434
So I don't know
if you guys have been keeping up

00:05:31.434 --> 00:05:32.968
with what's going on
with YouTube,

00:05:32.968 --> 00:05:36.133
but there have been
a lot of requests

00:05:36.133 --> 00:05:37.567
for live streaming events.

00:05:37.567 --> 00:05:39.801
So as of early April,

00:05:39.801 --> 00:05:42.934
we actually launched
YouTube.com/live,

00:05:42.934 --> 00:05:45.968
which will show you a whole
bunch of different live events

00:05:45.968 --> 00:05:48.000
that our YouTube partners
are hosting.

00:05:48.000 --> 00:05:51.667
With the live events,
some of them kind of include

00:05:51.667 --> 00:05:54.000
product launches,
concerts,

00:05:54.000 --> 00:05:55.934
like, John Legend in concert,

00:05:55.934 --> 00:05:57.601
sporting events
like IPL,

00:05:57.601 --> 00:06:00.501
which, you know, garners,
like, 50 million views

00:06:00.501 --> 00:06:03.234
as of last year,
and then, of course,

00:06:03.234 --> 00:06:05.400
this year's Google I/O.

00:06:05.400 --> 00:06:09.300
As the increase of live events
come on YouTube,

00:06:09.300 --> 00:06:11.467
we've noticed
that some of these events

00:06:11.467 --> 00:06:13.033
include
these informational talks

00:06:13.033 --> 00:06:15.801
where there's a lot of speech
that's going on.

00:06:15.801 --> 00:06:18.133
And we have a lot
of non-English viewers,

00:06:18.133 --> 00:06:21.234
as well as, you know,
just people

00:06:21.234 --> 00:06:23.267
who might not really be able
to understand

00:06:23.267 --> 00:06:27.100
somebody speaking very--
very fast.

00:06:27.100 --> 00:06:29.200
So what we wanted to do
was create a gadget

00:06:29.200 --> 00:06:31.467
that not only had the captions

00:06:31.467 --> 00:06:34.334
underneath the live player
but had the ability

00:06:34.334 --> 00:06:37.534
to also translate
in real time.

00:06:37.534 --> 00:06:39.868
So what we did was,
in order to build

00:06:39.868 --> 00:06:42.000
the caption gadget,
we contracted the help

00:06:42.000 --> 00:06:44.501
of Psycle Interactive,
which is this UK company

00:06:44.501 --> 00:06:46.834
and independent production house

00:06:46.834 --> 00:06:49.601
that we've worked with
on YouTube many times,

00:06:49.601 --> 00:06:50.767
as well as StreamText,

00:06:50.767 --> 00:06:53.901
which is a real-time
streaming text provider.

00:06:53.901 --> 00:06:56.968
For the gadget, our requirements
were pretty simple.

00:06:56.968 --> 00:06:59.601
One, we wanted to take
the real-time text

00:06:59.601 --> 00:07:02.234
from StreamText and feed it
into the gadget;

00:07:02.234 --> 00:07:06.000
two, translate it in real time
in multiple languages

00:07:06.000 --> 00:07:08.601
and use Google Translate API;

00:07:08.601 --> 00:07:11.167
and, of course, make the code
open source,

00:07:11.167 --> 00:07:13.200
which means
not only can you use this

00:07:13.200 --> 00:07:16.367
on YouTube live events
if you're a partner,

00:07:16.367 --> 00:07:18.100
but you can also use this

00:07:18.100 --> 00:07:21.968
for other, you know,
live--live events

00:07:21.968 --> 00:07:24.267
that you may be doing
on other sites.

00:07:24.267 --> 00:07:27.400
Or even if you wanted to do it--
use it for something else,

00:07:27.400 --> 00:07:32.234
you could essentially just take
that code.

00:07:32.234 --> 00:07:34.100
So I don't know
if you guys have been able

00:07:34.100 --> 00:07:36.234
to see what the gadget
actually looks like.

00:07:36.234 --> 00:07:38.200
But let me just show you.

00:07:38.200 --> 00:07:42.767
It's on the Web site--
the Google I/O homepage.

00:07:42.767 --> 00:07:44.434
Black:
Do you want the sound off?

00:07:44.434 --> 00:07:47.100
Boedihardjo: Yeah, let me
just make sure it's muted here.

00:07:47.100 --> 00:07:51.334
But essentially what it does
is it takes in a real-time feed

00:07:51.334 --> 00:07:54.634
from StreamText, so the ladies
who are actually transcribing--

00:07:54.634 --> 00:07:57.434
takes in what's coming in
from the stage.

00:07:57.434 --> 00:08:00.167
And because
usually during a live stream

00:08:00.167 --> 00:08:02.501
there's a five
to ten-second delay,

00:08:02.501 --> 00:08:05.234
we added a feature
in the gadget

00:08:05.234 --> 00:08:08.634
to add a delay depending on,
like, if you're doing

00:08:08.634 --> 00:08:11.100
just one event, maybe
the speaker speaks super fast,

00:08:11.100 --> 00:08:12.968
you might want to put
a one-second delay in there

00:08:12.968 --> 00:08:14.200
versus, like, a two-second.

00:08:14.200 --> 00:08:16.167
Right now, we have,
like, a two-second delay

00:08:16.167 --> 00:08:19.167
on all of our streams.

00:08:19.167 --> 00:08:22.400
But essentially the features
that we added in here

00:08:22.400 --> 00:08:25.634
were the ability
to take in that real-time text.

00:08:25.634 --> 00:08:28.834
It's all hosted on App Engine,
so we actually had

00:08:28.834 --> 00:08:31.167
to make a special request

00:08:31.167 --> 00:08:33.267
and have
the App Engine team provision,

00:08:33.267 --> 00:08:36.133
you know, a lot of bandwidth
for us

00:08:36.133 --> 00:08:39.801
so that we can take in
all these requests from users,

00:08:39.801 --> 00:08:43.634
and I'll share some stats
with you later on today.

00:08:43.634 --> 00:08:46.234
And with Google Translate,

00:08:46.234 --> 00:08:48.167
we have the ability
to translate this

00:08:48.167 --> 00:08:49.667
into 57 languages.

00:08:49.667 --> 00:08:55.267
So let me just demo...
let's do Croatian.

00:08:55.267 --> 00:08:57.400
What it does--
it takes a couple of seconds,

00:08:57.400 --> 00:09:01.133
and then it'll translate
to Croatian super fast.

00:09:01.133 --> 00:09:05.267
So what it does is--usually
for the English translation,

00:09:05.267 --> 00:09:07.601
it's word for word,
but because we wanted

00:09:07.601 --> 00:09:10.868
Google Translate
to translate the context

00:09:10.868 --> 00:09:14.667
of the actual speech,
we wait 35 characters.

00:09:14.667 --> 00:09:16.601
I don't know if anybody here
speaks Croatian, but--

00:09:16.601 --> 00:09:19.133
Black: I saw
somebody actually tweeted

00:09:19.133 --> 00:09:21.033
that they were watching it
in Hindi.

00:09:21.033 --> 00:09:22.467
Boedihardjo:
Oh, cool.

00:09:22.467 --> 00:09:25.734
Black: I don't speak Hindi,
but they tweeted about it.

00:09:25.734 --> 00:09:29.000
Boedihardjo: So those are some
of the features we had.

00:09:29.000 --> 00:09:31.834
So some of the technical
challenges were, you know,

00:09:31.834 --> 00:09:33.634
how are we gonna handle
the viewership.

00:09:33.634 --> 00:09:36.000
App Engine helped us with that,

00:09:36.000 --> 00:09:40.100
as well as that delay
that I had mentioned.

00:09:40.100 --> 00:09:43.367
Here are some stats
that we got from just yesterday.

00:09:43.367 --> 00:09:47.067
Vic had mentioned, you know,
there were 600 viewers

00:09:47.067 --> 00:09:48.601
to the stream.

00:09:48.601 --> 00:09:50.267
There was actually 250 viewers

00:09:50.267 --> 00:09:51.801
to that captioning gadget
itself.

00:09:51.801 --> 00:09:53.834
Black: Thousand.
Boedihardjo: 250,000 viewers.

00:09:53.834 --> 00:09:56.334
Sorry.
I like to shorten things.

00:09:56.334 --> 00:09:59.868
The top five countries--
or the top five languages

00:09:59.868 --> 00:10:03.200
people selected were English,
Spanish, Portuguese,

00:10:03.200 --> 00:10:04.801
French, and Russian.

00:10:04.801 --> 00:10:07.267
And then out
of the 57 languages

00:10:07.267 --> 00:10:10.801
that Google Translate had
the ability to translate into,

00:10:10.801 --> 00:10:13.000
52 languages
were actually selected,

00:10:13.000 --> 00:10:15.400
which is kind
of an amazing number.

00:10:15.400 --> 00:10:18.834
So you're probably wondering,
if you wanted to use

00:10:18.834 --> 00:10:20.834
this gadget,
how to go about doing that.

00:10:20.834 --> 00:10:22.100
We made the code available.

00:10:22.100 --> 00:10:24.400
We'll make this PDF open

00:10:24.400 --> 00:10:26.100
to you guys after the session.

00:10:26.100 --> 00:10:29.267
So just follow that link
for Google code

00:10:29.267 --> 00:10:30.567
and you can get it there.

00:10:30.567 --> 00:10:33.367
As well,
if you are a YouTube partner,

00:10:33.367 --> 00:10:34.968
especially a live partner,

00:10:34.968 --> 00:10:37.701
go ahead and speak
to your Google or YouTube rep,

00:10:37.701 --> 00:10:40.834
and you can ask them
how to go about using this

00:10:40.834 --> 00:10:42.133
for your next event.

00:10:42.133 --> 00:10:44.200
I'll go back to Naomi,
and she can talk to you

00:10:44.200 --> 00:10:46.200
about WebVTT.

00:10:46.200 --> 00:10:48.634
Black: Thanks, Cynthia.

00:10:48.634 --> 00:10:50.133
So we've been talking
about captioning,

00:10:50.133 --> 00:10:51.934
but you notice on this slide
I've changed the term

00:10:51.934 --> 00:10:53.133
to timed text.

00:10:53.133 --> 00:10:54.567
And so I'm gonna explain to you

00:10:54.567 --> 00:10:57.534
why we're not just talking
about captioning anymore.

00:10:57.534 --> 00:11:02.167
So timed text encompasses
much more than just captioning.

00:11:02.167 --> 00:11:05.501
It encompasses any use of text
that's useful for video

00:11:05.501 --> 00:11:08.367
where there's a time component
that's important to us.

00:11:08.367 --> 00:11:11.434
So people who are
hard of hearing or deaf,

00:11:11.434 --> 00:11:13.767
they're gonna need captions
to understand the context

00:11:13.767 --> 00:11:15.734
of the video,
but people who are blind

00:11:15.734 --> 00:11:17.467
are also using a form
of timed text

00:11:17.467 --> 00:11:19.067
called audio description.

00:11:19.067 --> 00:11:21.200
And traditional
audio description--

00:11:21.200 --> 00:11:22.300
if you go look
on YouTube, actually,

00:11:22.300 --> 00:11:23.834
there's a talk on WebVTT

00:11:23.834 --> 00:11:25.400
that we gave a few weeks ago,

00:11:25.400 --> 00:11:27.267
and you can find there's
an audio description version.

00:11:27.267 --> 00:11:29.601
So audio description
is the process

00:11:29.601 --> 00:11:30.968
of creating a new script

00:11:30.968 --> 00:11:34.534
for a video that includes
all of the visual elements

00:11:34.534 --> 00:11:37.167
that somebody who's blind might
not have available to them.

00:11:37.167 --> 00:11:39.067
So you might think about taking
something like this talk

00:11:39.067 --> 00:11:40.167
and putting it online.

00:11:40.167 --> 00:11:41.167
Well, a blind user can listen

00:11:41.167 --> 00:11:42.367
to everything they're saying,

00:11:42.367 --> 00:11:43.801
so they must be getting
everything, right?

00:11:43.801 --> 00:11:46.100
But they're not gonna get
that slide that I put up

00:11:46.100 --> 00:11:48.267
with the bars that actually
none of you could see either,

00:11:48.267 --> 00:11:51.033
but they wouldn't be able
to see Cynthia's talk--

00:11:51.033 --> 00:11:53.834
the part of her demo, and so
what audio description does

00:11:53.834 --> 00:11:56.534
is it provides this information
in a script that's written out,

00:11:56.534 --> 00:11:58.334
and the script has time cues,

00:11:58.334 --> 00:11:59.467
and it says,
at this moment,

00:11:59.467 --> 00:12:01.601
describe, you know,
the slide on screen

00:12:01.601 --> 00:12:04.667
shows a pie chart and,
you know, and so on.

00:12:04.667 --> 00:12:07.167
So audio description is useful
for blind users,

00:12:07.167 --> 00:12:09.100
and it has a text
and a time component.

00:12:09.100 --> 00:12:12.667
You can use synchronization
for music lyrics.

00:12:12.667 --> 00:12:13.968
You can do your own karaoke.

00:12:13.968 --> 00:12:16.167
And navigation
is very helpful.

00:12:16.167 --> 00:12:17.434
You think about what we're able
to do today

00:12:17.434 --> 00:12:19.634
on our DVD players
where you can just cue ahead

00:12:19.634 --> 00:12:20.868
through chapters.

00:12:20.868 --> 00:12:22.467
It would be great
if you could do that on YouTube

00:12:22.467 --> 00:12:24.634
and just say, "Oh, you know,
I want to jump ahead

00:12:24.634 --> 00:12:27.167
to the more interesting part
of this talk."

00:12:27.167 --> 00:12:30.234
So HTML5 has a text-based
solution for all of these.

00:12:30.234 --> 00:12:34.834
It's called--well, actually,
HTML5 under the video element

00:12:34.834 --> 00:12:37.534
has a track element
that accommodates timed text.

00:12:37.534 --> 00:12:40.901
HTML5 doesn't recommend
a particular format.

00:12:40.901 --> 00:12:42.567
You can support any format

00:12:42.567 --> 00:12:44.167
that you like,
and so, in this case,

00:12:44.167 --> 00:12:45.300
we're proposing a format

00:12:45.300 --> 00:12:46.734
called WebVTT.

00:12:46.734 --> 00:12:48.534
And I'm gonna show you
some demos in WebKit

00:12:48.534 --> 00:12:51.567
that show that support.

00:12:51.567 --> 00:12:54.467
So here's an example file
in the WebVTT format,

00:12:54.467 --> 00:12:58.133
and in WebVTT we have things
that we'll call cues.

00:12:58.133 --> 00:13:02.000
And so a cue is basically
some text that has a start time

00:13:02.000 --> 00:13:03.000
and an end time.

00:13:03.000 --> 00:13:04.234
So in this case you can see

00:13:04.234 --> 00:13:05.601
there's a start time point

00:13:05.601 --> 00:13:07.133
and then there's
an end time point.

00:13:07.133 --> 00:13:08.300
And then below it
there's some text

00:13:08.300 --> 00:13:09.667
that is appearing on screen

00:13:09.667 --> 00:13:10.968
between those two time points.

00:13:10.968 --> 00:13:12.868
And you can see
that we've marked this up

00:13:12.868 --> 00:13:14.501
with simple HTML styling.

00:13:14.501 --> 00:13:17.000
We have support for italics
and bold

00:13:17.000 --> 00:13:18.133
and underline.

00:13:18.133 --> 00:13:21.033
And so then the next line,

00:13:21.033 --> 00:13:23.300
I've actually got--
you have positioning

00:13:23.300 --> 00:13:24.701
that we can specify as well.

00:13:24.701 --> 00:13:28.667
So I can say t percentage, 60%.

00:13:28.667 --> 00:13:30.868
And if you look, the center line
of the captions on there--

00:13:30.868 --> 00:13:32.367
it's a little hard to see,
but the captions

00:13:32.367 --> 00:13:34.100
on the center line are
a little off from the center.

00:13:34.100 --> 00:13:36.334
We position them
over to the side.

00:13:36.334 --> 00:13:38.667
And we can set a line position
as well.

00:13:38.667 --> 00:13:40.734
So I can very accurately,
using WebVTT,

00:13:40.734 --> 00:13:42.968
pinpoint exactly
where on the screen

00:13:42.968 --> 00:13:44.567
I want that text to appear.

00:13:44.567 --> 00:13:45.667
And that's useful.

00:13:45.667 --> 00:13:47.434
If you watch captions on TV,

00:13:47.434 --> 00:13:49.567
you'll see that people
use text positioning

00:13:49.567 --> 00:13:51.434
to identify sometimes
who is speaking.

00:13:51.434 --> 00:13:52.467
So you have
two people speaking,

00:13:52.467 --> 00:13:53.734
the captions appear on the left,

00:13:53.734 --> 00:13:55.067
you know it's that person
who's speaking.

00:13:55.067 --> 00:13:57.000
The person on the right speaks,
the captions move.

00:13:57.000 --> 00:13:59.300
Today, if you look at YouTube,
we don't have

00:13:59.300 --> 00:14:04.334
that capability, and so we're
looking ahead at the Web.

00:14:04.334 --> 00:14:05.534
We want the Web
to offer everything

00:14:05.534 --> 00:14:07.901
that our TV captions do,
maybe even more.

00:14:07.901 --> 00:14:13.467
And so positioning is
a really important part of that.

00:14:13.467 --> 00:14:15.767
So here's
another WebVTT example file.

00:14:15.767 --> 00:14:18.000
Because WebVTT is on the Web,

00:14:18.000 --> 00:14:21.234
we really want to use
the richness of CSS and HTML,

00:14:21.234 --> 00:14:24.167
so in this case I have
to find a pseudo element

00:14:24.167 --> 00:14:26.434
inside my queue.
I have C. arduino,

00:14:26.434 --> 00:14:28.834
and you can see the CSS
from my page

00:14:28.834 --> 00:14:32.467
then specifies how that
arduino cue should be styled,

00:14:32.467 --> 00:14:34.367
and so I've set the color
to be red

00:14:34.367 --> 00:14:35.634
and the text to be uppercase.

00:14:35.634 --> 00:14:37.667
And this is really interesting
to me.

00:14:37.667 --> 00:14:39.167
One of my responsibilities
at Google

00:14:39.167 --> 00:14:41.167
is making sure that our content
is captioned,

00:14:41.167 --> 00:14:42.801
and I speak to a lot
of YouTube partners,

00:14:42.801 --> 00:14:45.367
and we see
more and more TV content

00:14:45.367 --> 00:14:46.567
that's moving to the Web.

00:14:46.567 --> 00:14:49.200
Well, if I'm watching "Dr. Who"
in Britain,

00:14:49.200 --> 00:14:50.567
I'm going to see my captions

00:14:50.567 --> 00:14:52.300
according
to UK caption standards.

00:14:52.300 --> 00:14:55.267
So individual speakers will have
their text styled

00:14:55.267 --> 00:14:56.400
in different colors.

00:14:56.400 --> 00:14:57.501
Whenever I see blue text,

00:14:57.501 --> 00:14:58.834
maybe that's
the Doctor speaking.

00:14:58.834 --> 00:15:00.968
And I would just recognize
and expect that.

00:15:00.968 --> 00:15:02.334
But here in the United States,

00:15:02.334 --> 00:15:04.334
we're used to seeing our
captions all in the same color.

00:15:04.334 --> 00:15:06.300
And they're styled
a little bit differently.

00:15:06.300 --> 00:15:09.267
So currently what happens,
if I'm the BBC and I want

00:15:09.267 --> 00:15:11.100
to provide that video file,

00:15:11.100 --> 00:15:12.701
I have to make
my caption file twice.

00:15:12.701 --> 00:15:14.534
I have to make it once
for the UK styling

00:15:14.534 --> 00:15:16.234
and once
for the American styling

00:15:16.234 --> 00:15:18.868
and again for any other region
that I'm distributing to

00:15:18.868 --> 00:15:20.901
that has a different look
and feel for captions.

00:15:20.901 --> 00:15:23.434
But with CSS you could see
how I could create

00:15:23.434 --> 00:15:26.133
a single caption file that marks
things up semantically,

00:15:26.133 --> 00:15:29.000
and then I could use CSS
on my Web page

00:15:29.000 --> 00:15:34.734
to style it differently
depending on who's watching it.

00:15:34.734 --> 00:15:36.901
I'm gonna gloss over this slide
pretty quickly.

00:15:36.901 --> 00:15:40.367
I just want to indicate this
is allowing us to do Chinese

00:15:40.367 --> 00:15:41.434
and Japanese characters.

00:15:41.434 --> 00:15:44.400
We have full UTF-8 support
in WebVTT,

00:15:44.400 --> 00:15:48.133
so unlike many broadcast formats
where the text

00:15:48.133 --> 00:15:50.467
has to be rasterized
to represent double-byte,

00:15:50.467 --> 00:15:53.167
in this case it just stays
as text within the file.

00:15:53.167 --> 00:15:54.434
And because it stays as text,

00:15:54.434 --> 00:15:55.701
we can translate that text

00:15:55.701 --> 00:15:57.400
and we can search on that text,

00:15:57.400 --> 00:16:01.434
and for the Web
that's really important.

00:16:01.434 --> 00:16:04.868
So here's an example
of the caption--

00:16:04.868 --> 00:16:07.968
the type of captions that--
sorry, let me step back.

00:16:07.968 --> 00:16:11.067
Here's an example
of the video element in HTML5.

00:16:11.067 --> 00:16:12.601
So I've been talking
about the format.

00:16:12.601 --> 00:16:13.934
Let me tell you
a little bit more

00:16:13.934 --> 00:16:16.634
about how you would represent
this in HTML5.

00:16:16.634 --> 00:16:18.634
So the video element
in HTML5 says,

00:16:18.634 --> 00:16:19.968
"Okay, here's my video element,"

00:16:19.968 --> 00:16:22.000
and then underneath it
I have a source element

00:16:22.000 --> 00:16:24.067
for the video file
that tells me where to find

00:16:24.067 --> 00:16:25.267
the video that I'm gonna play.

00:16:25.267 --> 00:16:27.934
And then I have a bunch
of track elements,

00:16:27.934 --> 00:16:29.467
and these track elements here--
you'll notice I have

00:16:29.467 --> 00:16:30.834
two different types of tracks.

00:16:30.834 --> 00:16:33.634
I have a captions track
and I have a subtitle track.

00:16:33.634 --> 00:16:37.100
And so the subtitle track,
that would be just the text.

00:16:37.100 --> 00:16:38.601
Like, if you're watching
a French movie

00:16:38.601 --> 00:16:40.200
and you see just the text
that's appearing,

00:16:40.200 --> 00:16:42.968
it doesn't represent any of the
noises or the background sounds

00:16:42.968 --> 00:16:45.067
that a user who's deaf
might be relying on,

00:16:45.067 --> 00:16:47.934
whereas captions include
often in square brackets

00:16:47.934 --> 00:16:49.667
things like laughter
or applause.

00:16:49.667 --> 00:16:53.133
So we have two different kinds--
we have captions and subtitles.

00:16:53.133 --> 00:16:56.567
And when I set the kind
to be caption or subtitle,

00:16:56.567 --> 00:16:58.801
what happens in the players,
the player then says,

00:16:58.801 --> 00:17:01.801
"Oh, this is for me.
I should display this as text,

00:17:01.801 --> 00:17:05.767
as captions on screen."

00:17:05.767 --> 00:17:08.300
So I'm gonna show you a demo
of that.

00:17:08.300 --> 00:17:11.934
So what I'm running here
is Chromium.

00:17:11.934 --> 00:17:15.100
And I have--I have
a very new build of Chromium.

00:17:15.100 --> 00:17:17.567
We literally got the first
implementation support

00:17:17.567 --> 00:17:19.033
of some of these things
in the last week.

00:17:19.033 --> 00:17:21.234
So if you install Chromium
today, you won't see this,

00:17:21.234 --> 00:17:23.767
but we're hoping, by the time
we've unit-tested everything

00:17:23.767 --> 00:17:26.033
and we've checked everything
and made sure

00:17:26.033 --> 00:17:28.234
that it's really solid,
hopefully by the end

00:17:28.234 --> 00:17:29.634
of the summer or early fall

00:17:29.634 --> 00:17:31.000
you'll be able to see these
as well.

00:17:31.000 --> 00:17:34.000
And because these things
are gonna be baked into WebKit,

00:17:34.000 --> 00:17:37.200
they'll be available in any
browser that supports WebKit.

00:17:37.200 --> 00:17:38.901
So you as the video provider,

00:17:38.901 --> 00:17:40.467
you don't have to create
a new player

00:17:40.467 --> 00:17:41.901
every time you want
to include a video

00:17:41.901 --> 00:17:45.133
and make it accessible.
Okay.

00:17:45.133 --> 00:17:49.100
So here I am in Chromium.
I'm gonna play my video.

00:17:49.100 --> 00:17:50.634
Can we turn the sound on?

00:17:50.634 --> 00:17:51.901
Schepers: ...all right?

00:17:51.901 --> 00:17:54.300
Black: Can we turn
the sound down a bit?

00:17:54.300 --> 00:17:55.300
[laughter]

00:17:55.300 --> 00:17:56.300
Okay, that was
a little scary.

00:17:56.300 --> 00:17:57.300
Let me go again.

00:17:57.300 --> 00:18:00.000
Schepers: So I just wanted to...

00:18:00.000 --> 00:18:01.834
Black: So here we have--
he's speaking,

00:18:01.834 --> 00:18:03.067
there's text underneath.

00:18:03.067 --> 00:18:05.934
You can see it's styled
with italics.

00:18:05.934 --> 00:18:08.901
And I can change the caption
language here with the selector.

00:18:08.901 --> 00:18:10.434
This selector
is using JavaScript,

00:18:10.434 --> 00:18:12.934
but eventually this feature
would be built into the player.

00:18:12.934 --> 00:18:14.067
So let's make them German.

00:18:14.067 --> 00:18:16.400
Schepers:
...introduce you to W3C and...

00:18:16.400 --> 00:18:18.300
Black: And this is
not machine translation here.

00:18:18.300 --> 00:18:21.234
Let me show you
the index file.

00:18:25.133 --> 00:18:28.067
Here's the index file.

00:18:36.734 --> 00:18:38.667
Okay, so here you see
this is the same thing

00:18:38.667 --> 00:18:39.834
that I showed you on my slide.

00:18:39.834 --> 00:18:41.901
We have a video track.
We have the source--

00:18:41.901 --> 00:18:44.400
with the video element
we have the source element,

00:18:44.400 --> 00:18:45.901
and then here we have
two track elements,

00:18:45.901 --> 00:18:47.834
one for English
and one for German.

00:18:47.834 --> 00:18:50.067
And that's what I'm playing
here in my video

00:18:50.067 --> 00:18:51.834
in the demo.

00:18:51.834 --> 00:18:53.667
So let me show you
what the WebVTT looks like,

00:18:53.667 --> 00:18:55.968
and just to prove to you
that I'm really doing this live,

00:18:55.968 --> 00:18:57.501
I'm gonna make a change to it.

00:18:57.501 --> 00:18:59.701
So I'm gonna open this
with TextMate.

00:18:59.701 --> 00:19:00.901
So this is really simple,
right?

00:19:00.901 --> 00:19:02.901
I'm editing this
in a text editor.

00:19:02.901 --> 00:19:04.367
I don't need a fancy tool--
although, if I'm doing

00:19:04.367 --> 00:19:06.267
lots of these,
a fancy tool might be helpful.

00:19:06.267 --> 00:19:09.000
I can just go
in any text editor,

00:19:09.000 --> 00:19:11.868
and here I'm gonna change
these italics

00:19:11.868 --> 00:19:15.667
to be underlined.

00:19:15.667 --> 00:19:18.968
And I'm gonna save my file.

00:19:18.968 --> 00:19:20.801
I'm gonna go back

00:19:20.801 --> 00:19:22.133
and reload my page.

00:19:22.133 --> 00:19:24.300
Uhh...
Did I reload it?

00:19:24.300 --> 00:19:26.100
Let me try that again.

00:19:26.100 --> 00:19:27.968
Okay, so let's play the video

00:19:27.968 --> 00:19:30.534
and see if it's picked up
my change.

00:19:30.534 --> 00:19:32.968
So now you can see that change
that I made is right away

00:19:32.968 --> 00:19:34.334
reflected in the video.

00:19:34.334 --> 00:19:35.701
And it's the player
that's doing that.

00:19:35.701 --> 00:19:37.067
It's WebKit that's handling

00:19:37.067 --> 00:19:38.200
all of the code to do that.

00:19:38.200 --> 00:19:43.667
The HTML at my end
is really simple.

00:19:43.667 --> 00:19:45.200
So let's go back
to the slides.

00:19:45.200 --> 00:19:49.400
Okay, so audio description--
I was mentioning

00:19:49.400 --> 00:19:52.033
how audio description is helpful
to people who are blind.

00:19:52.033 --> 00:19:54.968
I'm gonna show you a demo
that demonstrates

00:19:54.968 --> 00:19:57.400
how you can use just plain text

00:19:57.400 --> 00:20:00.868
and send it to the speech
synthesis on your computer

00:20:00.868 --> 00:20:03.534
in order to render
audio description,

00:20:03.534 --> 00:20:05.501
so normally you would have
to do a video production step

00:20:05.501 --> 00:20:08.267
where you have a file--
that you have a wav file

00:20:08.267 --> 00:20:09.934
that you then mix in
with video production,

00:20:09.934 --> 00:20:12.701
and that can add a lot
to both your cost

00:20:12.701 --> 00:20:14.167
and the time it takes you
to produce something.

00:20:14.167 --> 00:20:17.100
But what if you could just
type that out and provide it

00:20:17.100 --> 00:20:18.767
just like you provide
a text transcript

00:20:18.767 --> 00:20:21.434
and rely on the screen reader
on your computer to do it.

00:20:21.434 --> 00:20:27.400
So let me show you
how that works.

00:20:27.400 --> 00:20:29.300
So I'm gonna go back
into Chromium.

00:20:35.734 --> 00:20:39.234
And I'm gonna go turn on
ChromeVox.

00:20:39.234 --> 00:20:41.334
I don't know if you were
in the earlier talk on Chrome.

00:20:41.334 --> 00:20:43.100
ChromeVox is the extension
for Chrome

00:20:43.100 --> 00:20:44.968
that we released this week,

00:20:44.968 --> 00:20:47.968
and it's basically
a screen reader for ChromeVox.

00:20:47.968 --> 00:20:49.234
So in this case
actually let me go show you this

00:20:49.234 --> 00:20:50.567
in the slides again.

00:20:50.567 --> 00:20:52.167
In this case,
the kind is description.

00:20:52.167 --> 00:20:54.100
'Cause when I set the kind
to be description,

00:20:54.100 --> 00:20:57.834
then the player in HTML5
knows that it's not supposed

00:20:57.834 --> 00:20:59.601
to render this
as text on screen;

00:20:59.601 --> 00:21:03.734
it's supposed to play it
through speech.

00:21:03.734 --> 00:21:05.968
So you can see it's, again:
start time, end time,

00:21:05.968 --> 00:21:07.701
and then some text.

00:21:07.701 --> 00:21:09.234
So let's go into Chromium.

00:21:09.234 --> 00:21:10.434
Okay, I've turned ChromeVox on.

00:21:10.434 --> 00:21:12.400
Hopefully, the sound is on.

00:21:12.400 --> 00:21:15.534
male voice: Blender,
"Elephants Dream" tab.

00:21:15.534 --> 00:21:18.534
Black: So that's ChromeVox
telling me the tab is open.

00:21:18.534 --> 00:21:20.567
And I'm gonna hit play
and see what happens.

00:21:20.567 --> 00:21:22.734
So the audio description
should be describing the video,

00:21:22.734 --> 00:21:24.234
the visual elements
on the screen,

00:21:24.234 --> 00:21:26.767
and it should be doing it
using the screen reader voice

00:21:26.767 --> 00:21:27.767
that's already on my computer.

00:21:27.767 --> 00:21:30.701
So let's see how that works.

00:21:34.634 --> 00:21:36.167
You know what,
let me refresh my page.

00:21:36.167 --> 00:21:37.701
I bet it's not talking
to ChromeVox yet.

00:21:37.701 --> 00:21:38.801
One sec.
male voice: Blender,

00:21:38.801 --> 00:21:40.367
"Elephants Dream."

00:21:40.367 --> 00:21:42.701
Black: Okay, now it should know
that it has ChromeVox.

00:21:42.701 --> 00:21:44.434
Let's try this.

00:21:44.434 --> 00:21:48.167
male voice: The Orange open
movie project presents...

00:21:48.167 --> 00:21:50.501
Black: So that's
audio description for my video

00:21:50.501 --> 00:21:54.300
that's been provided
by a WebVTT file.

00:21:54.300 --> 00:21:57.701
And I can even go in

00:21:57.701 --> 00:22:01.000
and quickly change this.

00:22:04.968 --> 00:22:08.467
I'm gonna say the...

00:22:08.467 --> 00:22:13.534
awesome Orange open movie
project presents...

00:22:13.534 --> 00:22:14.901
and let's go refresh the page.

00:22:14.901 --> 00:22:19.534
male voice: Blender,
"Elephants Dream."

00:22:19.534 --> 00:22:22.267
The awesome Orange open movie
project presents...

00:22:22.267 --> 00:22:24.033
Boedihardjo: Cool.
Black: So that was much easier

00:22:24.033 --> 00:22:26.067
than having to go
into the studio and record

00:22:26.067 --> 00:22:27.467
a wav file
and then mix it in

00:22:27.467 --> 00:22:28.567
and wait
for the video to render.

00:22:28.567 --> 00:22:31.501
This is, like, really fast
on the fly.

00:22:37.601 --> 00:22:39.501
So my next example
is to show you

00:22:39.501 --> 00:22:43.334
how we can do chapters
using kind="chapters".

00:22:43.334 --> 00:22:46.067
In this case, when
my track element in WebVTT

00:22:46.067 --> 00:22:48.200
is provided
with kind="chapters",

00:22:48.200 --> 00:22:50.234
then it knows
that what it's supposed to do

00:22:50.234 --> 00:22:52.701
is use this to enable some kind
of navigation.

00:22:52.701 --> 00:22:55.234
And I'm kind of hand-waving here
because we haven't built

00:22:55.234 --> 00:22:56.634
the full support
into WebKit yet,

00:22:56.634 --> 00:22:58.133
although we're going
in this direction.

00:22:58.133 --> 00:23:01.167
What I'm going to show you today
involves using JavaScript

00:23:01.167 --> 00:23:02.567
to do the same thing.

00:23:11.534 --> 00:23:12.901
male voice: Demos for Nao...

00:23:12.901 --> 00:23:14.501
navigation using...

00:23:14.501 --> 00:23:17.367
Black: Okay, so imagine that we
don't have the screen reader on

00:23:17.367 --> 00:23:19.000
and you're looking at this
as a sighted user.

00:23:19.000 --> 00:23:22.100
You can see that there's a handy
navigation pane down the side.

00:23:22.100 --> 00:23:24.200
And it's got a bunch
of text that tells you

00:23:24.200 --> 00:23:25.734
each of the slides
that's available

00:23:25.734 --> 00:23:27.400
and what they're about,

00:23:27.400 --> 00:23:32.834
and I can go click on them.

00:23:32.834 --> 00:23:34.033
And so when I click on it,

00:23:34.033 --> 00:23:35.834
it jumps directly
to that part of the video.

00:23:35.834 --> 00:23:38.534
And that's done--my page itself
is very simple.

00:23:38.534 --> 00:23:40.901
This is just done by pulling
from the WebVTT file

00:23:40.901 --> 00:23:45.467
and looking at what's
in this particular track.

00:23:45.467 --> 00:23:48.534
But for a user who's blind,
we can have the same thing.

00:23:48.534 --> 00:23:51.467
male voice:
Navigation using WebVTT...

00:23:51.467 --> 00:23:56.601
Demo 3--HTML5 video acc--
Black: So I'm just hitting

00:23:56.601 --> 00:23:59.234
Ctrl-Alt-down arrow to move
through the fields in this.

00:23:59.234 --> 00:24:02.334
male voice: Introduct--HTML5--
Play video--Button.

00:24:02.334 --> 00:24:04.234
Black: So now I'm
on the play button.

00:24:04.234 --> 00:24:05.968
I'm gonna go down one more.
male voice: Title slide.

00:24:05.968 --> 00:24:07.567
Press enter to navigate,

00:24:07.567 --> 00:24:09.467
space to toggle play.

00:24:09.467 --> 00:24:10.634
Black:
And so it says title slide

00:24:10.634 --> 00:24:12.501
because Slide 1: Title Slide
is what exists

00:24:12.501 --> 00:24:13.601
in my WebVTT file.

00:24:13.601 --> 00:24:15.634
Let me just show it
to you quickly

00:24:15.634 --> 00:24:18.567
to make that really clear.

00:24:31.033 --> 00:24:33.434
And you can see it says
start time, end time,

00:24:33.434 --> 00:24:35.968
title slide, and that's what
my screen reader is reading out.

00:24:35.968 --> 00:24:38.133
So here, going back
to my demo then...

00:24:38.133 --> 00:24:40.367
male voice: Title slide,
press enter to navigate.

00:24:40.367 --> 00:24:43.467
[speaking rapidly]
Black: I can--

00:24:43.467 --> 00:24:45.100
male voice: Press enter
to navigate,

00:24:45.100 --> 00:24:46.901
space to toggle play.

00:24:46.901 --> 00:24:48.701
Black: So as a blind user,
I can navigate

00:24:48.701 --> 00:24:50.968
and jump between the sections
in my video

00:24:50.968 --> 00:24:53.567
without having to see anything
that's on the screen.

00:24:53.567 --> 00:24:57.167
So I'm gonna hit space to play.

00:24:57.167 --> 00:24:59.601
male voice: A multimedia slide
presentation is titled

00:24:59.601 --> 00:25:01.934
"HTML5 video accessibility

00:25:01.934 --> 00:25:03.234
and the WebVTT..."

00:25:03.234 --> 00:25:04.367
Black: And what
you're actually hearing there

00:25:04.367 --> 00:25:06.767
is the the audio description
that we recorded

00:25:06.767 --> 00:25:08.300
in the studio,
but you get the idea.

00:25:08.300 --> 00:25:11.734
I have this fully-featured
navigation that's implemented

00:25:11.734 --> 00:25:13.300
through WebKit and JavaScript.

00:25:13.300 --> 00:25:15.167
And in the future, this kind
of support will just be baked

00:25:15.167 --> 00:25:16.868
into the player.

00:25:16.868 --> 00:25:18.634
One of the stumbling blocks
for us that we're still trying

00:25:18.634 --> 00:25:20.601
to figure out is, how should
we really represent this?

00:25:20.601 --> 00:25:21.901
What should it look like?

00:25:21.901 --> 00:25:23.400
So this navigation bar
that you're seeing

00:25:23.400 --> 00:25:25.634
is sort of our first guess
along the way

00:25:25.634 --> 00:25:27.534
in terms of what kind
of implementation

00:25:27.534 --> 00:25:30.667
we might want the user interface
to look like.

00:25:30.667 --> 00:25:35.067
Okay, so going back
to the slides,

00:25:35.067 --> 00:25:37.734
very quickly some JavaScript
examples just to show

00:25:37.734 --> 00:25:39.033
how easy it is to do stuff.

00:25:39.033 --> 00:25:42.234
Here I'm going,
and I have a four loop

00:25:42.234 --> 00:25:44.434
that's going and looking
through the number of tracks

00:25:44.434 --> 00:25:45.868
that I have;
it's picking out the ones

00:25:45.868 --> 00:25:47.167
that are subtitles,

00:25:47.167 --> 00:25:48.734
and then it chooses the one
that's French,

00:25:48.734 --> 00:25:51.601
and it specifically turns on the
French captions in the player.

00:25:51.601 --> 00:25:54.601
So you could use this
within the context of a page

00:25:54.601 --> 00:25:56.267
to do stuff
like my language selector,

00:25:56.267 --> 00:25:58.367
or you could do
more complex things.

00:25:58.367 --> 00:25:59.901
And the next example shows

00:25:59.901 --> 00:26:01.767
how you can register
an event handler

00:26:01.767 --> 00:26:03.100
on all of your cue changes.

00:26:03.100 --> 00:26:05.767
So any time text appears
or disappears

00:26:05.767 --> 00:26:07.267
or is enabled or disabled,

00:26:07.267 --> 00:26:08.601
you could pop up an alert

00:26:08.601 --> 00:26:10.300
or you could do something
more elaborate.

00:26:10.300 --> 00:26:12.734
But this is just a single line
of code.

00:26:16.567 --> 00:26:18.400
So for the future
of media on the Web,

00:26:18.400 --> 00:26:21.200
we're really excited
about WebVTT, and in part

00:26:21.200 --> 00:26:24.367
we're excited about it because
it's a fairly simple format.

00:26:24.367 --> 00:26:27.300
It's a simple format for
somebody who's creating content

00:26:27.300 --> 00:26:28.501
to use and author.

00:26:28.501 --> 00:26:30.400
But it's also fairly simple

00:26:30.400 --> 00:26:33.100
in terms of what a browser needs
to support

00:26:33.100 --> 00:26:34.701
in order to enable
sort of the full range

00:26:34.701 --> 00:26:38.367
of features that are available
today in broadcast captions

00:26:38.367 --> 00:26:40.734
and then go beyond it with some
of the richness of the Web

00:26:40.734 --> 00:26:42.467
through CSS and JavaScript.

00:26:42.467 --> 00:26:44.701
So if you're interested
in more on WebVTT,

00:26:44.701 --> 00:26:47.000
if you go look on
the Google Developers Channel,

00:26:47.000 --> 00:26:50.334
there's a video in two versions,
audio described and not,

00:26:50.334 --> 00:26:55.767
on WebVTT, and we'll have links
at the end of our talk.

00:26:55.767 --> 00:26:57.400
Oh, and let me close
my Chromium window

00:26:57.400 --> 00:26:58.400
or it will be talking--

00:26:58.400 --> 00:27:03.133
male voice:
[speaking rapidly]

00:27:03.133 --> 00:27:04.167
Black:
So Jeff's gonna talk

00:27:04.167 --> 00:27:07.100
about the YouTube captions API
now.

00:27:09.534 --> 00:27:11.234
Posnick: Okay.
Thanks, Naomi.

00:27:11.234 --> 00:27:13.901
So I wanted to talk

00:27:13.901 --> 00:27:16.567
about a topic
that's specifically relevant

00:27:16.567 --> 00:27:18.934
for folks who want
to add captions

00:27:18.934 --> 00:27:20.467
or interact with captions

00:27:20.467 --> 00:27:22.767
on videos that are hosted
on YouTube

00:27:22.767 --> 00:27:25.801
and do that
in a programmatic manner.

00:27:25.801 --> 00:27:31.767
So YouTube has a larger Data API
which allows you to manipulate

00:27:31.767 --> 00:27:33.868
a whole bunch
of YouTube objects

00:27:33.868 --> 00:27:36.000
and get information about videos
and so on and so forth.

00:27:36.000 --> 00:27:40.934
And one subset of the Data API
is the YouTube Captions API.

00:27:40.934 --> 00:27:43.067
And that's what I'll be talking
about today.

00:27:43.067 --> 00:27:48.300
You can think of the YouTube
Data API as a REST-ful API.

00:27:48.300 --> 00:27:54.300
It's a way of interacting
with YouTube via HTTP requests.

00:27:54.300 --> 00:28:00.267
And it has certain restrictions
on how you can interact

00:28:00.267 --> 00:28:01.634
with the API.

00:28:01.634 --> 00:28:03.767
There's authentication
that's needed

00:28:03.767 --> 00:28:07.033
in order to do,
specifically with captions,

00:28:07.033 --> 00:28:09.767
any sort of modification
and retrieval of caption tracks.

00:28:09.767 --> 00:28:13.067
You need to prove
that you are the video's owner

00:28:13.067 --> 00:28:15.934
via one
of our authentication mechanisms

00:28:15.934 --> 00:28:18.100
in order
to manipulate this data.

00:28:18.100 --> 00:28:21.167
And you just also need
a YouTube API Developer key,

00:28:21.167 --> 00:28:22.634
which you could register for

00:28:22.634 --> 00:28:27.801
at one of the links that we
provide at the end of the slide.

00:28:27.801 --> 00:28:31.267
So we support a number
of different formats

00:28:31.267 --> 00:28:35.100
for caption data and conversions
between different formats

00:28:35.100 --> 00:28:37.000
when you're requesting
that data.

00:28:37.000 --> 00:28:40.100
RealText, SAMI,
SubRip, SubViewer

00:28:40.100 --> 00:28:41.434
are a few of the formats.

00:28:41.434 --> 00:28:45.901
We also support submitting
a just chunk of text.

00:28:45.901 --> 00:28:48.601
Ideally a chunk of text that
corresponds to the actual audio

00:28:48.601 --> 00:28:49.634
in your video.

00:28:49.634 --> 00:28:52.234
And we'll try to autosync that.

00:28:52.234 --> 00:28:56.534
And when you request captions,
regardless of what format,

00:28:56.534 --> 00:28:59.734
you uploaded the captions
and you can specify one

00:28:59.734 --> 00:29:02.267
of two different formats
for getting them back.

00:29:02.267 --> 00:29:07.567
And you do that using the FMT
parameter in your request URL.

00:29:07.567 --> 00:29:11.734
And one format is srt,
which is the SubRip format,

00:29:11.734 --> 00:29:14.968
and one format is sbv,
which is SubViewer.

00:29:14.968 --> 00:29:16.701
And we'll go into an example

00:29:16.701 --> 00:29:19.067
a little bit later
that shows

00:29:19.067 --> 00:29:21.634
how you can request
a specific format

00:29:21.634 --> 00:29:25.601
and interact
with the API in general.

00:29:25.601 --> 00:29:29.133
So I mentioned that one of the
options for uploading captions

00:29:29.133 --> 00:29:31.200
is using auto-synchronization.

00:29:31.200 --> 00:29:33.934
And this in many ways
simplifies the process

00:29:33.934 --> 00:29:35.167
of adding captions.

00:29:35.167 --> 00:29:37.567
You might have a transcript

00:29:37.567 --> 00:29:40.067
of the speech
in a given event,

00:29:40.067 --> 00:29:42.567
but you don't necessarily
have time codes,

00:29:42.567 --> 00:29:45.067
which are normally required
in a caption format.

00:29:45.067 --> 00:29:47.767
You just might have it
as paragraphs of text.

00:29:47.767 --> 00:29:52.367
So you submit that to us,
and we'll run some processing

00:29:52.367 --> 00:29:55.734
on our servers and do our best
to match up the speech

00:29:55.734 --> 00:29:58.434
that we hear in the video
with the text

00:29:58.434 --> 00:30:00.167
that you provide for us.

00:30:00.167 --> 00:30:03.000
And, you know,
this works great

00:30:03.000 --> 00:30:05.534
if there's
a good correspondence

00:30:05.534 --> 00:30:07.000
between the text
you're uploading

00:30:07.000 --> 00:30:09.634
and the person who's speaking.

00:30:09.634 --> 00:30:12.067
And we support
English and Japanese

00:30:12.067 --> 00:30:16.501
as the source language
for the video right now.

00:30:16.501 --> 00:30:18.634
So that's one end of things.

00:30:18.634 --> 00:30:22.234
Kind of the other end of things
regarding speech recognition

00:30:22.234 --> 00:30:25.667
is the Automatic Speech
Recognition tracks.

00:30:25.667 --> 00:30:28.868
And these are things
that are available

00:30:28.868 --> 00:30:31.834
on demand via the API
if you make a request

00:30:31.834 --> 00:30:34.167
authenticated
as the video owner.

00:30:34.167 --> 00:30:37.501
And what this track is
is basically something

00:30:37.501 --> 00:30:40.033
that uses speech recognition
to just analyze

00:30:40.033 --> 00:30:41.934
the speech in your video

00:30:41.934 --> 00:30:45.467
and generate
a corresponding caption track.

00:30:45.467 --> 00:30:46.667
So when you're interacting

00:30:46.667 --> 00:30:48.534
with the Automatic Speech
Recognition

00:30:48.534 --> 00:30:51.267
or ASR track via the API,

00:30:51.267 --> 00:30:54.534
the way you identify it from,
you know, what might be

00:30:54.534 --> 00:30:55.868
a number
of different caption tracks

00:30:55.868 --> 00:30:57.934
that are available
for your YouTube video

00:30:57.934 --> 00:31:00.300
is looking
for the yt:derived tag.

00:31:00.300 --> 00:31:02.567
And we'll show an example
that makes use of that later.

00:31:02.567 --> 00:31:04.033
But just keep that in mind.

00:31:04.033 --> 00:31:07.701
And that--that will show
that that is the ASR track.

00:31:07.701 --> 00:31:12.067
And English and Japanese
language are currently supported

00:31:12.067 --> 00:31:17.901
for generating that track.

00:31:17.901 --> 00:31:20.000
So I have a piece of demo code

00:31:20.000 --> 00:31:22.567
that I wanted to show
for you guys,

00:31:22.567 --> 00:31:25.133
and before I do that,
I wanted to tell you

00:31:25.133 --> 00:31:26.868
a little bit about what
it's gonna do obviously.

00:31:26.868 --> 00:31:29.200
So what we want to do
is take in a video ID

00:31:29.200 --> 00:31:31.367
corresponding
to a YouTube video.

00:31:31.367 --> 00:31:33.667
This is just a unique identifier
so we know

00:31:33.667 --> 00:31:35.634
which YouTube video
we're operating on.

00:31:35.634 --> 00:31:38.968
And we're going to retrieve
the ASR caption track

00:31:38.968 --> 00:31:41.100
for that specific video,

00:31:41.100 --> 00:31:42.968
we're gonna translate it
into Pig Latin,

00:31:42.968 --> 00:31:46.000
and then we're gonna upload
that translation

00:31:46.000 --> 00:31:49.367
as a new caption track
for that video.

00:31:49.367 --> 00:31:52.534
So what we're--you're gonna see
is Python command line code.

00:31:52.534 --> 00:31:56.167
It doesn't have to be Python
if you're doing interaction

00:31:56.167 --> 00:31:58.167
with the YouTube Captions API.

00:31:58.167 --> 00:32:00.033
Well, actually I have an example
a little bit later on

00:32:00.033 --> 00:32:01.868
that uses Java,
but really anything

00:32:01.868 --> 00:32:04.300
that could send HTTP requests

00:32:04.300 --> 00:32:07.868
can be used to interact
with the Captions API.

00:32:07.868 --> 00:32:11.267
And this Python command line
code is actually using

00:32:11.267 --> 00:32:15.000
the new Google API Python
client library for handling

00:32:15.000 --> 00:32:18.801
some of the authentication
that I mentioned is necessary.

00:32:18.801 --> 00:32:21.400
And that actually makes things
a lot easier

00:32:21.400 --> 00:32:24.200
for me as a developer and,
you know, for you guys as well

00:32:24.200 --> 00:32:26.334
if you go out
and write some code.

00:32:26.334 --> 00:32:30.000
So I definitely recommend that,
if there is a client library

00:32:30.000 --> 00:32:32.434
available for the language
that you're programming in,

00:32:32.434 --> 00:32:36.033
to take a look at using that,
'cause it'll simplify things.

00:32:36.033 --> 00:32:39.334
And, you know, again, this is
a bit of a silly example,

00:32:39.334 --> 00:32:41.834
but, you know, it's intended
to illustrate

00:32:41.834 --> 00:32:45.601
how you could do retrieval,
processing, and then re-upload

00:32:45.601 --> 00:32:48.267
of your own caption tracks,
and, you know, I'm sure

00:32:48.267 --> 00:32:51.334
that--that folks have ideas
for, you know,

00:32:51.334 --> 00:32:55.634
more meaningful things
that you could do.

00:32:55.634 --> 00:32:58.100
So as I mentioned,
there's a few different steps

00:32:58.100 --> 00:32:59.367
involved here.

00:32:59.367 --> 00:33:01.667
The first thing
that our code is gonna do

00:33:01.667 --> 00:33:04.334
is use OAuth 2 authentication

00:33:04.334 --> 00:33:08.767
to request access
to your YouTube accounts.

00:33:08.767 --> 00:33:13.534
And actually because I'm using
the Python client library,

00:33:13.534 --> 00:33:16.033
I only have to do that once,
and that'll be--

00:33:16.033 --> 00:33:19.701
excuse me, it'll cache
my authentication token

00:33:19.701 --> 00:33:22.067
and reuse that
in subsequent requests,

00:33:22.067 --> 00:33:23.234
which is great.

00:33:23.234 --> 00:33:25.234
And just to clarify,
it's not caching,

00:33:25.234 --> 00:33:28.501
like, my Google account's
email address

00:33:28.501 --> 00:33:30.767
and password;
it's just a token

00:33:30.767 --> 00:33:33.567
that gets returned
from the OAuth 2 service

00:33:33.567 --> 00:33:36.167
and can be revoked
at any time.

00:33:36.167 --> 00:33:39.300
So if you are writing
your own code

00:33:39.300 --> 00:33:43.200
and you're allowing users
to authenticate for any purpose,

00:33:43.200 --> 00:33:44.734
you know,
whether it's interacting

00:33:44.734 --> 00:33:47.634
with the Captions API or
anything else that you're doing,

00:33:47.634 --> 00:33:50.300
I highly recommend
using something like OAuth 2,

00:33:50.300 --> 00:33:55.501
which is our recommended method,
or AuthSub or OAuth 1

00:33:55.501 --> 00:33:57.901
for doing your authentication.

00:33:57.901 --> 00:34:00.868
It's just something I think
your users will appreciate,

00:34:00.868 --> 00:34:04.167
not having to enter
their credentials directly

00:34:04.167 --> 00:34:06.367
into your application.

00:34:06.367 --> 00:34:08.267
So that being said,
once we have the authentication

00:34:08.267 --> 00:34:11.501
in place,
we're going to retrieve

00:34:11.501 --> 00:34:15.234
the Automatic Speech Recognition
track for the given video.

00:34:15.234 --> 00:34:18.167
That's done by interacting
with the YouTube API.

00:34:18.167 --> 00:34:21.200
Then we have a little bit
of logic in place

00:34:21.200 --> 00:34:24.868
in the coded self
for Pig Latin-ification

00:34:24.868 --> 00:34:27.801
of the different text components

00:34:27.801 --> 00:34:28.968
of that track.

00:34:28.968 --> 00:34:31.200
And then once we've done that,

00:34:31.200 --> 00:34:34.834
we're going to re-upload
the new track,

00:34:34.834 --> 00:34:37.133
also using
the YouTube Captions API,

00:34:37.133 --> 00:34:40.601
and it should be visible
on YouTube.

00:34:40.601 --> 00:34:43.634
So before we get into that,

00:34:43.634 --> 00:34:45.734
I want to bring up...

00:34:45.734 --> 00:34:47.667
This is our source video

00:34:47.667 --> 00:34:48.801
that we're gonna
be operating on here.

00:34:48.801 --> 00:34:50.968
This is a video I took

00:34:50.968 --> 00:34:52.734
of my son rolling over
for the first time.

00:34:52.734 --> 00:34:54.601
This is my first day
home with you.

00:34:54.601 --> 00:34:55.834
And you can see here,

00:34:55.834 --> 00:34:59.968
this is the Automatic Speech
Recognition track

00:34:59.968 --> 00:35:02.367
that was generated
for this video,

00:35:02.367 --> 00:35:03.868
so that's
what we're starting with.

00:35:03.868 --> 00:35:08.033
See, there's no other
caption tracks

00:35:08.033 --> 00:35:11.167
that are currently available.

00:35:11.167 --> 00:35:15.167
So this is the code
we're gonna be using.

00:35:15.167 --> 00:35:17.234
It's available, you know,

00:35:17.234 --> 00:35:22.033
as part of just the whole
collection of samples

00:35:22.033 --> 00:35:24.200
that interact with
the YouTube API, so feel free

00:35:24.200 --> 00:35:26.434
to check out the actual code.

00:35:26.434 --> 00:35:28.234
I'm not gonna go
through everything here,

00:35:28.234 --> 00:35:30.367
but, you know,
afterwards take a look

00:35:30.367 --> 00:35:31.467
for yourself,
and I'm gonna go

00:35:31.467 --> 00:35:34.968
through a few relevant sections.

00:35:34.968 --> 00:35:39.100
So the first thing
that's important

00:35:39.100 --> 00:35:42.734
in terms of interacting
with the YouTube API

00:35:42.734 --> 00:35:46.934
is this method,
GetAsrTrackUrl.

00:35:46.934 --> 00:35:50.033
What it's gonna do
is first generate

00:35:50.033 --> 00:35:51.567
a specific URL.

00:35:51.567 --> 00:35:53.501
Because this is a REST-ful API,

00:35:53.501 --> 00:35:56.567
everything is identified
via URLs,

00:35:56.567 --> 00:35:59.000
and it's plugging
in the video ID that's read

00:35:59.000 --> 00:36:03.234
from the command line into a,
you know, well-defined format

00:36:03.234 --> 00:36:05.434
for the captions track.

00:36:05.434 --> 00:36:06.634
And this is something
that's gonna get

00:36:06.634 --> 00:36:10.200
a list of all the captions
that are available

00:36:10.200 --> 00:36:13.701
for a specific video,
assuming there are any.

00:36:13.701 --> 00:36:16.534
So once we have that--
sorry, once we have that URL,

00:36:16.534 --> 00:36:21.901
we're going to make an HTTP
request pointing out that URL,

00:36:21.901 --> 00:36:24.901
and I'm just making use
of the fact

00:36:24.901 --> 00:36:27.133
that the Python client library

00:36:27.133 --> 00:36:30.834
can generate the necessary
authentication headers

00:36:30.834 --> 00:36:32.534
from my request,
so again this is gonna be

00:36:32.534 --> 00:36:34.634
an authenticated request.

00:36:34.634 --> 00:36:38.868
Otherwise, it won't get back
the ASR caption track.

00:36:38.868 --> 00:36:40.834
And once I look--
get the response,

00:36:40.834 --> 00:36:43.801
take a look and make sure
there's a successful response--

00:36:43.801 --> 00:36:47.300
in my URL I'm specifying
that I'd like to retrieve

00:36:47.300 --> 00:36:49.634
the data back in JSON format,

00:36:49.634 --> 00:36:53.434
the JavaScript Object Notation
format, which is very easy

00:36:53.434 --> 00:36:59.467
to deserialize in Python,
and then to use

00:36:59.467 --> 00:37:02.801
just normal Python methods
for interacting with that data.

00:37:02.801 --> 00:37:04.868
So that's what I'm doing
right over here.

00:37:04.868 --> 00:37:09.400
I'm calling json.loads(body)

00:37:09.400 --> 00:37:12.200
and then I'm looping
through the response,

00:37:12.200 --> 00:37:15.834
and I'm taking a look
at the different...

00:37:15.834 --> 00:37:17.133
elements in the response.

00:37:17.133 --> 00:37:21.100
I'm trying to find
the specific captions track

00:37:21.100 --> 00:37:23.300
that has the yt:derive tag.

00:37:23.300 --> 00:37:25.634
And since I keep skipping ahead
anyway,

00:37:25.634 --> 00:37:28.734
let me just show you
what the relevant portion

00:37:28.734 --> 00:37:30.868
of the response will look like.

00:37:30.868 --> 00:37:32.968
So, you know,
has the yt:derive tag in it,

00:37:32.968 --> 00:37:36.334
and then there's
a related content element,

00:37:36.334 --> 00:37:40.234
but it has a source attribute
within that.

00:37:40.234 --> 00:37:44.100
And that's the URL
for the specific caption track

00:37:44.100 --> 00:37:46.467
that we're looking to get, so
it's kind of a two-step process.

00:37:46.467 --> 00:37:49.167
First we have to get a list
of all the caption tracks

00:37:49.167 --> 00:37:51.067
for a given video,
and we loop through them,

00:37:51.067 --> 00:37:53.601
we find the specific caption
track that we're looking for,

00:37:53.601 --> 00:37:57.067
and we get
that corresponding URL.

00:37:57.067 --> 00:37:59.868
And that's what's going on
in that code.

00:37:59.868 --> 00:38:02.367
And the next step,
once we have that URL,

00:38:02.367 --> 00:38:03.667
we want to retrieve it again,

00:38:03.667 --> 00:38:06.367
so we're making
another HTTP request.

00:38:06.367 --> 00:38:09.801
This time
we're using that FMT parameter

00:38:09.801 --> 00:38:11.734
that I talked about before.

00:38:11.734 --> 00:38:13.968
So we take whatever the URL
that was returned

00:38:13.968 --> 00:38:16.133
from our previous request,

00:38:16.133 --> 00:38:22.067
we add on the FMT=srt parameter
so that we get back the captions

00:38:22.067 --> 00:38:24.100
in the srt format.

00:38:24.100 --> 00:38:27.167
And much like before,
when making the requests,

00:38:27.167 --> 00:38:30.200
we get a response back as
soon as--successful response.

00:38:30.200 --> 00:38:32.901
We're gonna actually make use
of a Python library

00:38:32.901 --> 00:38:35.667
for dealing with srt files.

00:38:35.667 --> 00:38:37.767
That makes it very easy
to manipulate them,

00:38:37.767 --> 00:38:41.300
so SubRipFile and
we load it from this string.

00:38:41.300 --> 00:38:44.367
And what gets returned
from this HTTP request

00:38:44.367 --> 00:38:48.167
is really just the srt data
as a string.

00:38:48.167 --> 00:38:53.200
So it's very easy to load
that into this object.

00:38:53.200 --> 00:38:56.067
So the next portion of the code

00:38:56.067 --> 00:38:58.634
is kind of Pig Latin-ification.

00:38:58.634 --> 00:39:02.367
So now that we have
the data available and loaded

00:39:02.367 --> 00:39:06.033
into memory,
we can perform

00:39:06.033 --> 00:39:09.234
the steps needed to turn it
into Pig Latin.

00:39:09.234 --> 00:39:13.033
For those not familiar
with, I guess, the concept

00:39:13.033 --> 00:39:16.033
of Pig Latin, you take
the first letter

00:39:16.033 --> 00:39:17.667
of a word,
and, if it's a consonant,

00:39:17.667 --> 00:39:22.267
you move it to the end
and you add -ay after it.

00:39:22.267 --> 00:39:24.300
If the first letter is a vowel,

00:39:24.300 --> 00:39:29.601
then you just leave that alone,
but add -way to the end.

00:39:29.601 --> 00:39:32.934
So my particular code
does not use

00:39:32.934 --> 00:39:36.300
a very sophisticated
Pig Latin algorithm.

00:39:36.300 --> 00:39:38.868
If you have any production
processes that depend

00:39:38.868 --> 00:39:42.934
on, like, really rigid Pig Latin
completely to specification,

00:39:42.934 --> 00:39:46.467
I do not recommend that you take
a look at my code and copy that.

00:39:46.467 --> 00:39:48.968
But for this particular purpose,

00:39:48.968 --> 00:39:50.868
I think everything's fine,
so, you know,

00:39:50.868 --> 00:39:53.000
the basic idea is, you know,
"Thank you for reading this"

00:39:53.000 --> 00:39:57.968
would be "Hanktay youway orfay
eadingray histay."

00:39:57.968 --> 00:39:59.234
So it's gonna do that.

00:39:59.234 --> 00:40:00.567
It's actually looping.

00:40:00.567 --> 00:40:02.300
I'm not showing this code
that's gonna loop

00:40:02.300 --> 00:40:05.400
through each
of the different items

00:40:05.400 --> 00:40:07.634
within the overall
caption track.

00:40:07.634 --> 00:40:11.300
It's going to keep
the time codes in place.

00:40:11.300 --> 00:40:12.634
We're not changing that.

00:40:12.634 --> 00:40:17.100
But it's just going to translate
the actual text.

00:40:17.100 --> 00:40:20.701
And the final step,
once we've done that,

00:40:20.701 --> 00:40:22.467
we have this loaded
in memory somewhere,

00:40:22.467 --> 00:40:26.601
we want to push that
back out to YouTube

00:40:26.601 --> 00:40:30.300
using the upload capability
of the Captions API.

00:40:30.300 --> 00:40:32.968
So there are
a few specific steps

00:40:32.968 --> 00:40:34.767
that need to be done for this.

00:40:34.767 --> 00:40:39.734
You need to set a content-type
header in your HTTP request

00:40:39.734 --> 00:40:42.968
to a specific string,
which we have documented.

00:40:42.968 --> 00:40:46.267
You have to set
the content language to--

00:40:46.267 --> 00:40:49.634
content-language header
to the ICL language code

00:40:49.634 --> 00:40:52.634
of the language corresponding

00:40:52.634 --> 00:40:54.701
to the caption track
you're uploading.

00:40:54.701 --> 00:40:57.734
There is no ICL language code
for Pig Latin

00:40:57.734 --> 00:40:59.868
for some reason,
so I'm just gonna use English.

00:40:59.868 --> 00:41:02.901
And I have that hard-coded
in my Script.

00:41:02.901 --> 00:41:05.767
And there's a header
called a slug,

00:41:05.767 --> 00:41:09.901
which represents the title
of your captions track.

00:41:09.901 --> 00:41:12.100
And I have that hard-coded
as well.

00:41:12.100 --> 00:41:16.067
So once we have
those headers set up,

00:41:16.067 --> 00:41:20.868
we again create just the URL by
plugging in the ID of the video,

00:41:20.868 --> 00:41:24.501
and we're going to make
a post request in this case.

00:41:24.501 --> 00:41:26.267
We've previously been doing
get requests,

00:41:26.267 --> 00:41:28.501
'cause
we've been retrieving data.

00:41:28.501 --> 00:41:30.400
Just, you know,
in REST-ful APIs

00:41:30.400 --> 00:41:31.701
when you want
to create something,

00:41:31.701 --> 00:41:33.467
you normally will make
a post request.

00:41:33.467 --> 00:41:35.434
So we're doing a post request,

00:41:35.434 --> 00:41:37.300
we are setting the body
of the request

00:41:37.300 --> 00:41:41.534
to be equal
to the translated captions body.

00:41:41.534 --> 00:41:45.734
And we're using those headers
that we defined before.

00:41:45.734 --> 00:41:47.934
So that's the relevant portions
of the code.

00:41:47.934 --> 00:41:50.200
I want to show you
the code in action.

00:41:50.200 --> 00:41:53.734
You don't really see
too much going on here.

00:41:53.734 --> 00:41:56.267
But hopefully this is somewhere
in my history.

00:41:56.267 --> 00:41:58.634
Here we go.

00:41:58.634 --> 00:42:01.434
And this is also making use
of the stored credentials

00:42:01.434 --> 00:42:03.868
that I have from a previous time
that I run the code,

00:42:03.868 --> 00:42:07.334
so I have my OAuth 2 credentials
already saved somewhere.

00:42:07.334 --> 00:42:11.033
I don't have
to authenticate again.

00:42:11.033 --> 00:42:12.968
So this will run.

00:42:15.601 --> 00:42:18.767
Captions are
successfully transmitted.

00:42:18.767 --> 00:42:21.701
And if I go back
to this video...

00:42:25.834 --> 00:42:30.501
Okay, we should be able
to select not English.

00:42:30.501 --> 00:42:33.133
Pig Latin.
It is now listed as one

00:42:33.133 --> 00:42:36.167
of the captions tracks, so I
think that's selected right now.

00:42:36.167 --> 00:42:37.167
Hey, Zack.

00:42:37.167 --> 00:42:38.734
This is my first day.

00:42:38.734 --> 00:42:40.934
Yes.
There we go.

00:42:40.934 --> 00:42:44.767
Okay, so, you know,
it's that much more

00:42:44.767 --> 00:42:46.901
of a meaningful moment
when it's in Pig Latin.

00:42:46.901 --> 00:42:50.868
[laughter]
I assure you.

00:42:50.868 --> 00:42:53.033
Okay, so that's one example.

00:42:53.033 --> 00:42:54.901
Here's another example.
I'm not gonna go

00:42:54.901 --> 00:42:56.601
through all the code for this,
but I wanted

00:42:56.601 --> 00:42:59.567
to just show this to you,
and you could take a look

00:42:59.567 --> 00:43:01.801
at the code later,
and you could actually use this

00:43:01.801 --> 00:43:03.934
at something
that's fully deployed

00:43:03.934 --> 00:43:05.467
to App Engine right now,

00:43:05.467 --> 00:43:08.033
and you might find it
useful for your own purposes.

00:43:08.033 --> 00:43:10.701
So this is actually
an application that I wrote

00:43:10.701 --> 00:43:13.601
in response to talking
to Naomi,

00:43:13.601 --> 00:43:15.567
and Naomi,
among other things,

00:43:15.567 --> 00:43:18.767
is responsible
for providing captions

00:43:18.767 --> 00:43:20.501
for the many, many videos

00:43:20.501 --> 00:43:22.033
that get uploaded
that are associated with Google.

00:43:22.033 --> 00:43:24.701
Black: Several hundred.
Several hundred sessions

00:43:24.701 --> 00:43:29.000
from I/O hit--hit our channel,
like, this week.

00:43:29.000 --> 00:43:30.000
Posnick: Exactly.
Black: And we need

00:43:30.000 --> 00:43:31.501
to caption them.
Posnick: Yes.

00:43:31.501 --> 00:43:34.267
So we need to provide those
captions for our own videos.

00:43:34.267 --> 00:43:37.300
And if you were
to do that manually

00:43:37.300 --> 00:43:39.667
using the YouTube Web interface,

00:43:39.667 --> 00:43:41.267
it's certainly possible,

00:43:41.267 --> 00:43:42.801
but it would take
quite a bit of time.

00:43:42.801 --> 00:43:45.534
You would have to do one track
at a time more or less.

00:43:45.534 --> 00:43:49.701
And that obviously multiplies
out across hundreds of videos.

00:43:49.701 --> 00:43:51.133
It's quite a bit of work.

00:43:51.133 --> 00:43:52.801
Black: It's horrible.
Nobody should have to do that.

00:43:52.801 --> 00:43:54.534
Posnick: Fair enough.
And nobody has to.

00:43:54.534 --> 00:43:57.434
Thanks
to the YouTube Captions API,

00:43:57.434 --> 00:43:59.267
we're able to automate all that.

00:43:59.267 --> 00:44:02.634
So I have this over here.

00:44:02.634 --> 00:44:06.868
This is something that also
would require authentication

00:44:06.868 --> 00:44:09.000
because we're gonna be creating
caption tracks,

00:44:09.000 --> 00:44:13.200
so first thing I'll do
is add my account.

00:44:13.200 --> 00:44:16.667
Excuse me.

00:44:16.667 --> 00:44:20.467
And this is using AuthSub
for authentication.

00:44:20.467 --> 00:44:22.300
It's not actually using OAuth 2,

00:44:22.300 --> 00:44:24.934
but it's something
conceptually very similar.

00:44:24.934 --> 00:44:26.601
Since I'm already signed in,

00:44:26.601 --> 00:44:30.200
all I have to click
is "allow access"...

00:44:30.200 --> 00:44:32.734
[coughs]
and I'll be able to grant

00:44:32.734 --> 00:44:36.467
my application the ability
to upload tracks.

00:44:36.467 --> 00:44:38.334
So at this point,
now that I've authenticated,

00:44:38.334 --> 00:44:39.567
it knows who I am,

00:44:39.567 --> 00:44:43.901
and I can select local files.

00:44:43.901 --> 00:44:48.000
Let me get this
from the desktop.

00:44:48.000 --> 00:44:50.067
So I have
three caption tracks here.

00:44:50.067 --> 00:44:54.100
The name of the caption track
is actually important.

00:44:54.100 --> 00:44:57.367
'Cause we just,
as a way of saving time,

00:44:57.367 --> 00:45:00.434
we read the video ID from
the name of the caption track,

00:45:00.434 --> 00:45:02.467
and we also read
the language code.

00:45:02.467 --> 00:45:04.100
So you can see these all

00:45:04.100 --> 00:45:07.467
are video ID-underscore-
language code,

00:45:07.467 --> 00:45:09.767
and, if you wanted to,
you could also put in the name

00:45:09.767 --> 00:45:12.267
of the caption track here
as well.

00:45:12.267 --> 00:45:14.934
So now that I've selected
those three files--

00:45:14.934 --> 00:45:18.234
and you can select
an arbitrary number of files.

00:45:18.234 --> 00:45:20.334
It can be for a bunch
of different videos.

00:45:20.334 --> 00:45:23.367
It doesn't all have to be
for the same video.

00:45:23.367 --> 00:45:28.434
Quick click, start upload...

00:45:28.434 --> 00:45:31.701
and what you should see
is that these caption tracks

00:45:31.701 --> 00:45:33.367
are being pushed out.

00:45:33.367 --> 00:45:35.834
It's using the YouTube API.

00:45:35.834 --> 00:45:38.701
This is actually Java code
running on App Engine.

00:45:38.701 --> 00:45:41.634
And it's talking to the YouTube
API a very similar way

00:45:41.634 --> 00:45:43.334
to what we previously covered.

00:45:43.334 --> 00:45:47.868
And you get back actually using
the Channel API in App Engine.

00:45:47.868 --> 00:45:49.701
We get back a response
from the server

00:45:49.701 --> 00:45:52.601
to our browser saying,
"Okay, all these three things

00:45:52.601 --> 00:45:53.868
were a success."

00:45:53.868 --> 00:45:55.934
If any of these caption tracks,

00:45:55.934 --> 00:45:57.901
you know,
were badly formatted

00:45:57.901 --> 00:45:59.968
or there were any other errors,
you know, we'd find out

00:45:59.968 --> 00:46:01.934
about that right away
as well,

00:46:01.934 --> 00:46:03.667
and we could, you know,
take appropriate action.

00:46:03.667 --> 00:46:06.267
So now that that's been
completed, we should be able

00:46:06.267 --> 00:46:08.667
to go back to our video.

00:46:08.667 --> 00:46:12.634
Reload this one more time.

00:46:12.634 --> 00:46:14.868
And we have the caption tracks
listed here,

00:46:14.868 --> 00:46:16.834
so in addition
to our Pig Latin track,

00:46:16.834 --> 00:46:20.234
I just uploaded English,
you know, Hebrew, and Italian.

00:46:20.234 --> 00:46:22.767
And this doesn't actually
correspond to the text

00:46:22.767 --> 00:46:24.367
in the video,
but, you know,

00:46:24.367 --> 00:46:28.067
just showing you
what you can do.

00:46:28.067 --> 00:46:31.667
So that's, as I mentioned,
available

00:46:31.667 --> 00:46:33.434
just as an open-source project.

00:46:33.434 --> 00:46:36.467
Take a look at the code,
adapt it to anything

00:46:36.467 --> 00:46:40.033
that you might find, you know,
useful for your own project,

00:46:40.033 --> 00:46:45.501
or just use the yt-captions-
uploader.appspot.com instance

00:46:45.501 --> 00:46:50.200
just for uploading captions
to your videos.

00:46:50.200 --> 00:46:53.501
So we're ready at this point
for question and answers.

00:46:53.501 --> 00:46:54.968
Just a reminder again,

00:46:54.968 --> 00:46:57.033
if you're tweeting
about this session,

00:46:57.033 --> 00:46:58.667
you can use those hashtags.

00:46:58.667 --> 00:47:00.067
And if you want
to provide feedback,

00:47:00.067 --> 00:47:02.467
you could go
to that particular link.

00:47:02.467 --> 00:47:03.834
Black: And I forgot
to put it on this slide,

00:47:03.834 --> 00:47:07.367
but you can also email
captioning@google.com.

00:47:07.367 --> 00:47:09.167
So thanks, guys.
Does anybody have any questions

00:47:09.167 --> 00:47:11.234
you want to ask us
about any of this stuff?

00:47:11.234 --> 00:47:15.767
If you could come up to the mic.

00:47:15.767 --> 00:47:18.100
woman: Hi. Hi.
Black: Hi.

00:47:18.100 --> 00:47:20.868
woman: I have to close-caption
my own video,

00:47:20.868 --> 00:47:22.901
so I have to do it manually.

00:47:22.901 --> 00:47:25.801
I don't have--
right, I am the creator

00:47:25.801 --> 00:47:28.400
of the script itself,
and I've attempted

00:47:28.400 --> 00:47:32.767
to use the built-in captioning
from YouTube,

00:47:32.767 --> 00:47:35.033
and it's gotten better,
right,

00:47:35.033 --> 00:47:38.501
but I'd be curious of your plans
about increasing

00:47:38.501 --> 00:47:42.868
the accuracy of that file,
because I work

00:47:42.868 --> 00:47:44.701
at community college,
and I create a lot of video

00:47:44.701 --> 00:47:47.234
for students studying
Web development,

00:47:47.234 --> 00:47:49.801
but even at that level,
I have to close-caption it

00:47:49.801 --> 00:47:51.400
for the district requirements.

00:47:51.400 --> 00:47:56.033
So I'm curious, where--what's
the state of that function?

00:47:56.033 --> 00:47:57.701
You understand
what I'm asking?

00:47:57.701 --> 00:48:00.067
Black: Yeah. So there's
actually--there's two features

00:48:00.067 --> 00:48:02.701
in YouTube, and I think people
sometimes confuse the two,

00:48:02.701 --> 00:48:04.267
so I'll explain them both.

00:48:04.267 --> 00:48:07.667
There's auto-captioning, which
is pure machine-made captions,

00:48:07.667 --> 00:48:09.534
and it sounds like
what you're doing is you log in

00:48:09.534 --> 00:48:12.734
as the owner, you download
the machine-made caption track,

00:48:12.734 --> 00:48:15.033
you edit it, clean it up,
and then you re-upload it

00:48:15.033 --> 00:48:17.734
to make good, solid,
accurate captions.

00:48:17.734 --> 00:48:19.200
So that's one way to do it.

00:48:19.200 --> 00:48:20.434
The other way to do it

00:48:20.434 --> 00:48:22.667
is also what we're doing
actually at I/O.

00:48:22.667 --> 00:48:24.634
We have the transcription
in all the keynotes

00:48:24.634 --> 00:48:26.334
that's providing
the live-streamed captions.

00:48:26.334 --> 00:48:28.834
At the end of the day,
yesterday, I got a bunch

00:48:28.834 --> 00:48:31.100
of text files, and I take
that text file,

00:48:31.100 --> 00:48:33.334
I log into the channel,
I upload it,

00:48:33.334 --> 00:48:35.667
and I use speech recognition
to synchronize it.

00:48:35.667 --> 00:48:37.834
And that's an easier task
for a computer,

00:48:37.834 --> 00:48:38.934
'cause it doesn't have to guess

00:48:38.934 --> 00:48:40.501
what all of those
technical terms are.

00:48:40.501 --> 00:48:42.767
As long as it can fix
a few points in there,

00:48:42.767 --> 00:48:44.934
it can align it
very accurately in time.

00:48:44.934 --> 00:48:48.367
So for most of my videos,
especially the technical ones,

00:48:48.367 --> 00:48:51.033
what I tend to do is I prepare
a plain-text transcript,

00:48:51.033 --> 00:48:53.067
and then I upload the transcript
to YouTube

00:48:53.067 --> 00:48:54.767
and use the speech recognition
that way.

00:48:54.767 --> 00:48:56.400
So you can use both methods.

00:48:56.400 --> 00:48:58.000
But to get back
to your other question

00:48:58.000 --> 00:49:00.567
about the accuracy
and will it improve, absolutely.

00:49:00.567 --> 00:49:04.701
We've improved our word error
rate this year--

00:49:04.701 --> 00:49:05.701
I forget the exact number.

00:49:05.701 --> 00:49:06.701
We put it in a blog post,

00:49:06.701 --> 00:49:08.000
and then
I immediately forgot it,

00:49:08.000 --> 00:49:09.834
but if you go look,
there's a blog post on it.

00:49:09.834 --> 00:49:11.868
One of the cool things
about YouTube is,

00:49:11.868 --> 00:49:14.234
as people are uploading captions
to YouTube,

00:49:14.234 --> 00:49:16.968
we can use that text
and those videos

00:49:16.968 --> 00:49:18.367
to make our algorithms better.

00:49:18.367 --> 00:49:21.400
And so over time
we hope to improve the quality,

00:49:21.400 --> 00:49:23.334
and we are definitely working
on it.

00:49:23.334 --> 00:49:25.334
But YouTube
is sort of a vast corpus.

00:49:25.334 --> 00:49:27.701
You have everything
from people recording videos

00:49:27.701 --> 00:49:30.868
in their bedroom to, you know,
stuff like I/O.

00:49:30.868 --> 00:49:34.467
And so solving that is a hard
and really interesting problem.

00:49:34.467 --> 00:49:37.234
woman: Yeah.
And I'm working on making--

00:49:37.234 --> 00:49:38.534
since there's nobody
behind me,

00:49:38.534 --> 00:49:39.868
I hope it's okay that
I ask another question.

00:49:39.868 --> 00:49:41.934
Black: Go for it.
woman: Is that,

00:49:41.934 --> 00:49:44.200
I've worked on making
the audio quality better

00:49:44.200 --> 00:49:46.501
so that the accuracy improves

00:49:46.501 --> 00:49:48.834
because of that,
because I'm the sole provid--

00:49:48.834 --> 00:49:50.167
I mean, I'm the only one.

00:49:50.167 --> 00:49:52.033
I don't have people
standing there, you know,

00:49:52.033 --> 00:49:53.167
sitting there,
doing that,

00:49:53.167 --> 00:49:55.501
so I'm glad to hear--
I knew it was,

00:49:55.501 --> 00:49:57.701
but I was just curious
about what--

00:49:57.701 --> 00:49:59.200
I hadn't heard
the efficiency numbers,

00:49:59.200 --> 00:50:01.534
so I'll go look for those
as well.

00:50:01.534 --> 00:50:03.267
'Cause our--you know,
what we call

00:50:03.267 --> 00:50:05.767
our people that are responsible
for saying,

00:50:05.767 --> 00:50:08.601
"Yes, we're closed-captioned,"
are looking at those numbers

00:50:08.601 --> 00:50:11.067
on ours and going,
"That's not good enough."

00:50:11.067 --> 00:50:12.701
Black: Yeah, I mean,
I would agree with them.

00:50:12.701 --> 00:50:15.200
What we do on our own videos,
we leave

00:50:15.200 --> 00:50:17.300
the automatic captions on
for all the videos,

00:50:17.300 --> 00:50:18.868
and actually the owner
of the channel

00:50:18.868 --> 00:50:20.567
actually has the option
to turn this off.

00:50:20.567 --> 00:50:23.100
So sometimes if you see
a video that's in English,

00:50:23.100 --> 00:50:24.801
and you think, "Hey,
this should have worked.

00:50:24.801 --> 00:50:26.901
Why don't I have the option
to transcribe audio?",

00:50:26.901 --> 00:50:29.033
it may be because the owner
has turned it off.

00:50:29.033 --> 00:50:31.200
But if you're the owner
and you leave it on,

00:50:31.200 --> 00:50:33.033
and we do this
for all of our Google channels,

00:50:33.033 --> 00:50:35.167
we leave it on
because sometimes we don't get

00:50:35.167 --> 00:50:36.501
the captions up immediately.

00:50:36.501 --> 00:50:38.734
And we want to provide something
in the interim

00:50:38.734 --> 00:50:41.501
that helps people to understand
what has been said.

00:50:41.501 --> 00:50:42.834
But we still follow up

00:50:42.834 --> 00:50:44.901
with a professionally-produced
caption file

00:50:44.901 --> 00:50:47.067
where we really were sure
that the text is accurate

00:50:47.067 --> 00:50:49.701
because we feel like there's
still too big a gap.

00:50:49.701 --> 00:50:50.934
We don't want--you know,

00:50:50.934 --> 00:50:52.434
if you're hearing
and you're watching it,

00:50:52.434 --> 00:50:54.434
you can tell when there's a
mistake, but if you were deaf,

00:50:54.434 --> 00:50:55.701
you wouldn't know,
and so we want to be sure

00:50:55.701 --> 00:50:57.000
that it's really accurate.

00:50:57.000 --> 00:50:58.467
Although we hope that, you know,
in the future,

00:50:58.467 --> 00:51:00.734
we'll be able to just let it go,

00:51:00.734 --> 00:51:02.667
and it'll be automated,
but we're not there yet.

00:51:02.667 --> 00:51:05.567
woman: Yeah, that's the--
the amount I have to do

00:51:05.567 --> 00:51:06.767
is the real--
is the real key.

00:51:06.767 --> 00:51:07.834
Thank you.
Black: Cool.

00:51:07.834 --> 00:51:09.434
Any other questions?

00:51:09.434 --> 00:51:11.467
Come on up to the mic.

00:51:11.467 --> 00:51:15.567
man: Hi. Is there any
interest in standardizing it?

00:51:15.567 --> 00:51:19.834
I mean, not only Google TV
and YouTube,

00:51:19.834 --> 00:51:23.267
but regular TV networks.

00:51:23.267 --> 00:51:25.067
Black: Umm, I'm not sure
I understand your question.

00:51:25.067 --> 00:51:26.934
Can you ask it...
man: Uh, okay.

00:51:26.934 --> 00:51:30.701
If in the future,
you think this is the technology

00:51:30.701 --> 00:51:32.634
that it's gonna rule,
I mean, the--

00:51:32.634 --> 00:51:35.467
the regular closed captions
and stuff?

00:51:35.467 --> 00:51:37.100
Black: You mean,
do I think that, in the future

00:51:37.100 --> 00:51:38.767
we'll have closed captions
on everything?

00:51:38.767 --> 00:51:39.934
man: That's right.

00:51:39.934 --> 00:51:41.868
This technology's
gonna be the one

00:51:41.868 --> 00:51:44.767
that is gonna rule
closed-captioning.

00:51:44.767 --> 00:51:47.701
Black: I think for technology
to be really widely adopted

00:51:47.701 --> 00:51:50.200
for closed-captioning,
there are two pieces.

00:51:50.200 --> 00:51:52.501
One, the people
who are creating the content

00:51:52.501 --> 00:51:54.634
have to see value
in the captioning.

00:51:54.634 --> 00:51:56.434
They have to want
to add the captions.

00:51:56.434 --> 00:51:59.234
But the second part of it,
which I think also affects

00:51:59.234 --> 00:52:01.400
the first
is how easy it is to do.

00:52:01.400 --> 00:52:04.100
And I'm really excited
about some of the changes

00:52:04.100 --> 00:52:06.367
that are coming in HTML5
because I think

00:52:06.367 --> 00:52:08.834
they're going to make it easier
and easier

00:52:08.834 --> 00:52:11.534
for anyone to add captions
to their content,

00:52:11.534 --> 00:52:14.334
so whether, you know,
you're a big TV broadcaster--

00:52:14.334 --> 00:52:17.033
and the line between TV and the
Web is getting blurred, right?

00:52:17.033 --> 00:52:19.000
We have shows that we watch
online, and we have shows

00:52:19.000 --> 00:52:20.367
that we watch on our television.

00:52:20.367 --> 00:52:22.367
And with Google TV,
you can be watching them both

00:52:22.367 --> 00:52:23.868
at the same time.

00:52:23.868 --> 00:52:27.667
I think as we move forward, we
will see more and more captions

00:52:27.667 --> 00:52:30.300
on this content because
it's becoming easier to do

00:52:30.300 --> 00:52:32.567
and also because our audiences
are more global,

00:52:32.567 --> 00:52:34.133
more international.

00:52:34.133 --> 00:52:38.100
man: Thank you.

00:52:38.100 --> 00:52:40.434
man 2: This is kind
of a logistical question.

00:52:40.434 --> 00:52:44.300
I work at a university, and I
know a lot of our professors

00:52:44.300 --> 00:52:46.634
would prefer
to keep their videos

00:52:46.634 --> 00:52:50.133
hosted in the Docs section
of Google.

00:52:50.133 --> 00:52:53.367
I know that that's powered,
you know, by the YouTube engine.

00:52:53.367 --> 00:52:56.634
Do the same APIs--can they
be used with those videos?

00:52:56.634 --> 00:52:58.534
Black: I am so happy
you asked this question.

00:52:58.534 --> 00:53:00.234
We've only been talking
about YouTube,

00:53:00.234 --> 00:53:03.067
but we actually have a product
that's part of Google Apps,

00:53:03.067 --> 00:53:04.601
and it's called
Video for Business.

00:53:04.601 --> 00:53:06.601
And Google Video for Business
is kind of going

00:53:06.601 --> 00:53:09.033
through a transition period
where we're getting ready

00:53:09.033 --> 00:53:11.601
to launch the new hotness,
so right now,

00:53:11.601 --> 00:53:13.734
if you're an Apps customer
and you're using video,

00:53:13.734 --> 00:53:16.400
you actually have two internal
video hosting tools.

00:53:16.400 --> 00:53:19.534
You have Google Video
for Business, which allows you

00:53:19.534 --> 00:53:22.234
to post captions,
and you can even do

00:53:22.234 --> 00:53:24.434
the speech recognition
transcript synchronization

00:53:24.434 --> 00:53:25.601
in Video for Business,

00:53:25.601 --> 00:53:27.601
and all of those are private
to your domain

00:53:27.601 --> 00:53:29.701
and hosted in the cloud.

00:53:29.701 --> 00:53:32.167
The new hotness that's coming
is basically you'll be able

00:53:32.167 --> 00:53:34.601
to just upload a video file
as part of Docs.

00:53:34.601 --> 00:53:37.033
So the same way that you would
upload an image file

00:53:37.033 --> 00:53:40.100
or a document and Google Docs
would store it for you

00:53:40.100 --> 00:53:41.400
and let you share it
with people,

00:53:41.400 --> 00:53:42.868
you'd be able to upload a video,

00:53:42.868 --> 00:53:45.434
and you can just play the video
right there in Docs,

00:53:45.434 --> 00:53:47.534
and that video player in Docs

00:53:47.534 --> 00:53:50.033
needs to have captions.

00:53:50.033 --> 00:53:52.601
And it needs to have an API that
lets you interact with them.

00:53:52.601 --> 00:53:54.868
We're still building that out,
but, in the future,

00:53:54.868 --> 00:53:56.167
that's something
that I think a lot

00:53:56.167 --> 00:53:57.601
of our enterprise customers
are gonna need,

00:53:57.601 --> 00:53:59.367
and we're definitely focusing
on it.

00:53:59.367 --> 00:54:01.300
man 2: And then
my second question is,

00:54:01.300 --> 00:54:04.534
is there any plan--
we have this great method

00:54:04.534 --> 00:54:07.367
of uploading these captions--
to then allow--

00:54:07.367 --> 00:54:08.734
you've put
those captions up there

00:54:08.734 --> 00:54:11.534
and then automatically translate
so that you don't have

00:54:11.534 --> 00:54:12.667
to go through the second step

00:54:12.667 --> 00:54:14.100
of, you know,
pulling your text back up

00:54:14.100 --> 00:54:16.467
and then using the API
to put it back up

00:54:16.467 --> 00:54:18.634
as another language file?

00:54:18.634 --> 00:54:20.501
Black: So I'm sorry,
I don't think

00:54:20.501 --> 00:54:22.300
I understood the question.
Try that again a different way.

00:54:22.300 --> 00:54:24.534
man 2: I'm sorry,
so is there any plans,

00:54:24.534 --> 00:54:26.501
if you have existing tracks,

00:54:26.501 --> 00:54:28.567
captioning tracks
that you've put up there,

00:54:28.567 --> 00:54:33.400
to automatically allow users
to then translate them

00:54:33.400 --> 00:54:35.200
to another language?
Black: Oh, we have that now

00:54:35.200 --> 00:54:37.834
in YouTube.
Can we pop up YouTube?

00:54:37.834 --> 00:54:39.434
I'll show you quickly.
Posnick: I can drive that.

00:54:39.434 --> 00:54:41.067
Black: Pop up YouTube.

00:54:41.067 --> 00:54:43.033
Posnick: So let's hit
and choose...

00:54:43.033 --> 00:54:44.801
something over here?

00:54:44.801 --> 00:54:47.767
Translate captions I believe...

00:54:47.767 --> 00:54:49.968
Black: So in order for translate
to work in YouTube,

00:54:49.968 --> 00:54:53.300
you just have to have
a caption track in any language.

00:54:53.300 --> 00:54:55.734
It probably works best
if you start with English,

00:54:55.734 --> 00:54:58.934
'cause we just have
a lot more data for English.

00:54:58.934 --> 00:55:02.300
But you can translate
to any 1 of 57 languages.

00:55:02.300 --> 00:55:04.467
That's how we're doing
the caption gadget today.

00:55:04.467 --> 00:55:06.767
It's machine translation
using translate.google.com,

00:55:06.767 --> 00:55:09.400
and it's built
right into YouTube.

00:55:09.400 --> 00:55:12.501
man 2: And that's even if it's
captions that you've uploaded?

00:55:12.501 --> 00:55:15.968
So the user would select your
set of captions and then be able

00:55:15.968 --> 00:55:18.868
to translate using that
second list that's underneath?

00:55:18.868 --> 00:55:20.467
Black: Right.
I mean, Jeff's example showed

00:55:20.467 --> 00:55:22.000
using the speech recognition
mostly because we wanted

00:55:22.000 --> 00:55:23.734
to cram everything
into one example

00:55:23.734 --> 00:55:26.267
that people could then pull off
and use it to write other code.

00:55:26.267 --> 00:55:28.767
But you would--most of the time,
you would just use

00:55:28.767 --> 00:55:31.167
your regular English track
to do that,

00:55:31.167 --> 00:55:33.000
and his example was kind of,
"Well, what if there's

00:55:33.000 --> 00:55:34.267
a language that's not in there,"

00:55:34.267 --> 00:55:36.501
so that's
how we added Pig Latin.

00:55:36.501 --> 00:55:37.501
man 2: Awesome.
Black: Does that make sense?

00:55:37.501 --> 00:55:38.767
man 2: Thank you.
Black: Okay.

00:55:38.767 --> 00:55:39.868
I think we have time

00:55:39.868 --> 00:55:42.801
for one,
maybe two more questions.

00:55:42.801 --> 00:55:44.501
man 3: Hi, there.
Have you had to work

00:55:44.501 --> 00:55:47.534
with any standards that
the variety of screen readers

00:55:47.534 --> 00:55:51.634
might have in order
to read captions?

00:55:51.634 --> 00:55:54.267
Black: So standards--you mean
standards for the file format?

00:55:54.267 --> 00:55:56.968
man 3: Yeah, we have standards
for producing media,

00:55:56.968 --> 00:55:59.167
and then I think there might be
some standards

00:55:59.167 --> 00:56:02.467
for the screen readers
to actually read things

00:56:02.467 --> 00:56:03.634
within the media.

00:56:03.634 --> 00:56:06.634
Black: So I'm not--
there may be

00:56:06.634 --> 00:56:08.601
that I'm not aware of.

00:56:08.601 --> 00:56:11.567
I've only really started looking
at audio description recently

00:56:11.567 --> 00:56:13.234
as we've been putting
more of our video on the Web

00:56:13.234 --> 00:56:15.167
and realizing that we wanted
to find a way

00:56:15.167 --> 00:56:16.901
to make it available
to blind users.

00:56:16.901 --> 00:56:20.000
And on the Web today,
really the only way to do it,

00:56:20.000 --> 00:56:21.734
unless you have
a very specialized player

00:56:21.734 --> 00:56:24.167
that you've built,
is to record a wav file

00:56:24.167 --> 00:56:25.701
and mix it into your video.

00:56:25.701 --> 00:56:28.267
And so in this case what
the screen reader is getting

00:56:28.267 --> 00:56:30.000
is it's just getting
text instructions

00:56:30.000 --> 00:56:32.868
through the accessibility API
that tells it what to read.

00:56:32.868 --> 00:56:35.567
So I don't know that there's
a specialized format.

00:56:35.567 --> 00:56:37.400
I mean, it has to be a format
that's compatible

00:56:37.400 --> 00:56:38.801
with your browser, I guess,

00:56:38.801 --> 00:56:40.467
but it's actually pretty simple.

00:56:40.467 --> 00:56:42.067
man 3: Good. I think
that's the overall problem,

00:56:42.067 --> 00:56:44.601
is that there are
so many choices for, you know,

00:56:44.601 --> 00:56:46.234
JAWS and Window-Eyes,
things like that,

00:56:46.234 --> 00:56:49.567
that can be OS-level or
even specific like ChromeVox.

00:56:49.567 --> 00:56:52.234
Black: Yeah, I mean,
you as the content creator

00:56:52.234 --> 00:56:54.667
or the page creator
or the video hoster,

00:56:54.667 --> 00:56:55.934
you shouldn't have to worry
about any of that.

00:56:55.934 --> 00:56:57.801
Your browser should know
how to do it for you.

00:56:57.801 --> 00:56:59.400
man 3: Okay, thanks.

00:56:59.400 --> 00:57:01.200
Black: Okay, anybody else,

00:57:01.200 --> 00:57:03.968
or should we let the hordes in
for the next talk?

00:57:03.968 --> 00:57:06.367
Let's let the hordes in.
Thank you so much.

00:57:06.367 --> 00:57:08.767
[applause]

