WEBVTT
Kind: captions
Language: en

00:00:00.058 --> 00:00:01.850
Okay let's recap where we are.

00:00:01.850 --> 00:00:04.180
So we're talking strategies to do efficient CUDA programming.

00:00:04.180 --> 00:00:07.668
And the first thing that we've talked about is using high arithmetic intensity--

00:00:07.668 --> 00:00:10.993
trying to get your ratio of math operations to memory time

00:00:10.993 --> 00:00:13.359
spent accessing memory as high as possible.

00:00:13.359 --> 00:00:15.289
And so far we've been talking about the denominator.

00:00:15.289 --> 00:00:17.643
The goal has been to minimize the time spent on memory.

00:00:17.643 --> 00:00:21.114
Part of that is simply moving data to faster memory, if you're going to access it a lot.

00:00:21.114 --> 00:00:23.860
Keeping in mind that, you know, the fastest memory of all is local--

00:00:23.860 --> 00:00:27.712
local variables followed by shared memory, followed by global memory.

00:00:27.712 --> 00:00:30.595
Another thing you can do is use coalesced global memory accesses.

00:00:30.595 --> 00:00:33.551
So when you are accessing global memory, try to do it quickly.

00:00:33.551 --> 00:00:37.290
And the trick there, is, adjacent threads are accessing a contiguous chunk of memory.

00:00:37.290 --> 00:00:40.025
Usually, they're accessing adjacent memory locations.

00:00:40.025 --> 00:00:43.399
Well what else do I need to think about when we're writing efficient CUDA programs?

00:00:43.399 --> 00:00:47.862
In addition to striving for high arithmetic intensity, we also want to avoid thread divergence.

00:00:47.862 --> 00:00:49.300
Let me explain what that means.

00:00:49.300 --> 00:00:55.932
When parallel threads, like threads in our trusty thread block, do something different, we say they diverge.

00:00:55.932 --> 00:00:58.099
So we had some code that looked like this in the kernel.

00:00:58.099 --> 00:01:03.374
You're doing some stuff and you reach an if statement--if condition is true then execute some code.

00:01:03.374 --> 00:01:06.449
Else executes another code, then you proceed.

00:01:06.449 --> 00:01:10.637
If you think about a whole bunch of threads in a kernel executing this code,

00:01:10.637 --> 00:01:12.846
all of these threads are going to get down here.

00:01:12.846 --> 00:01:16.320
So these threads are going. They're going to hit this condition. They are all going to execute this condition.

00:01:16.320 --> 00:01:21.203
And then some of those threads are going to take the if branch, some of them are to take the else branch.

00:01:21.203 --> 00:01:27.002
So this thread proceeds, hits the condition, and then we'll see it takes the if branch.

00:01:27.002 --> 00:01:31.254
Maybe this thread proceeds when it hits the condition, maybe it takes the else branch.

00:01:31.254 --> 00:01:35.053
Perhaps this thread takes the else branch as well. And maybe this thread takes the if branch.

00:01:35.076 --> 00:01:36.845
Okay, so these threads have diverged.

00:01:36.852 --> 00:01:41.985
Of course, in this particular case, afterwards they're going to all proceed together again.

00:01:41.985 --> 00:01:45.903
So this thread's going to keep on going, finish the if code.

00:01:45.910 --> 00:01:48.990
This thread will keep on going, finish the if code.

00:01:48.990 --> 00:01:52.303
These two threads will each keep proceeding and do the else code.

00:01:52.310 --> 00:01:55.012
And it'll all converge again.

00:01:55.012 --> 00:01:56.850
And you might notice that I tried to draw them

00:01:56.850 --> 00:02:01.390
so that they kind of reassemble into the same order they were.

00:02:01.390 --> 00:02:03.975
In fact, their thread IDs have never changed. Okay?

00:02:03.975 --> 00:02:07.659
This is still thread 0, this is still thread 3, this is still thread 2--

00:02:07.659 --> 00:02:09.374
sorry thread 1 and thread 2.

00:02:09.374 --> 00:02:12.498
So the thread indexes don't change, it's just

00:02:12.498 --> 00:02:14.814
the path that they're executing through the program is different.

00:02:14.814 --> 00:02:16.390
So that's what divergence means.

00:02:16.390 --> 00:02:18.920
This is thread divergence, threads that do different things.

