WEBVTT
Kind: captions
Language: en

00:00:06.450 --> 00:00:08.720
SHAHID HUSSAIN: Hi, everyone.

00:00:08.720 --> 00:00:09.650
My name's Shahid.

00:00:09.650 --> 00:00:12.044
I'm a product
manager on Chrome OS.

00:00:12.044 --> 00:00:14.210
Thank you very much for
coming to the session today.

00:00:14.210 --> 00:00:17.480
I've had the chance to
speak to a few of you here.

00:00:17.480 --> 00:00:19.792
Really delighted that
you're here with us.

00:00:19.792 --> 00:00:21.500
So today we're going
to talk a little bit

00:00:21.500 --> 00:00:26.390
about optimizing Android
apps for Chromebooks

00:00:26.390 --> 00:00:28.500
and large screen devices.

00:00:28.500 --> 00:00:31.190
So just before I
start that, I'd love

00:00:31.190 --> 00:00:36.050
to get a show of hands, who
here has used Chrome OS before.

00:00:36.050 --> 00:00:37.340
That's awesome.

00:00:37.340 --> 00:00:41.250
Who here has a Chrome OS
device with them right now.

00:00:41.250 --> 00:00:45.115
And if you do have it,
could you hold it up.

00:00:45.115 --> 00:00:47.670
All right, great.

00:00:47.670 --> 00:00:48.930
All right, thank you.

00:00:48.930 --> 00:00:51.636
So the Chrome OS team are on a
live stream in the Googleplex,

00:00:51.636 --> 00:00:52.885
and they're watching all this.

00:00:52.885 --> 00:00:55.782
So we're always really excited
to see folk using Chrome OS,

00:00:55.782 --> 00:00:58.790
so thank you for doing that.

00:00:58.790 --> 00:01:02.250
So for those of you who have
been exposed to Chrome OS

00:01:02.250 --> 00:01:04.709
before, have come
across it before,

00:01:04.709 --> 00:01:06.990
and have spoken to us
before, you're probably

00:01:06.990 --> 00:01:08.700
very familiar with
these three ideas.

00:01:08.700 --> 00:01:11.790
We've been very consistent
about the ideas behind Chrome OS

00:01:11.790 --> 00:01:13.320
since we started.

00:01:13.320 --> 00:01:15.200
We want Chrome OS to be fast--

00:01:15.200 --> 00:01:17.620
fast to start up, fast to use.

00:01:17.620 --> 00:01:18.902
We want it to be easy.

00:01:18.902 --> 00:01:20.110
We want it to be easy to use.

00:01:20.110 --> 00:01:21.120
It's a tool.

00:01:21.120 --> 00:01:22.680
The way that we
think about it is we

00:01:22.680 --> 00:01:24.400
want Chrome OS to
get out of the way,

00:01:24.400 --> 00:01:26.550
so you can get to
where you want to go.

00:01:26.550 --> 00:01:29.860
We don't want to show pop ups
announcing a driver update,

00:01:29.860 --> 00:01:31.710
selling you
productivity software.

00:01:31.710 --> 00:01:33.930
You should just get to
where you want to go.

00:01:33.930 --> 00:01:36.740
And security, that's been top
of mind for us since Chrome OS

00:01:36.740 --> 00:01:38.400
began.

00:01:38.400 --> 00:01:40.410
So that's led to some
big moments for us

00:01:40.410 --> 00:01:42.790
over the last few years.

00:01:42.790 --> 00:01:46.140
So at I/O last year we announced
that Chromebook shipments

00:01:46.140 --> 00:01:49.050
overtook Macs in
the United States.

00:01:49.050 --> 00:01:51.270
Now, that's in part due
to our strength in edu

00:01:51.270 --> 00:01:55.020
where Chromebooks outsell
every other device combined.

00:01:55.020 --> 00:01:57.310
But that's also been
the case in retail.

00:01:57.310 --> 00:02:01.590
So we've seen nearly 20% growth
year on year and holiday weeks

00:02:01.590 --> 00:02:03.190
up to 50% growth.

00:02:03.190 --> 00:02:07.830
So Chrome OS is really
strong and continues to grow.

00:02:07.830 --> 00:02:10.160
But as we talk today
about optimization,

00:02:10.160 --> 00:02:12.590
it's not just helpful
for Chrome OS.

00:02:12.590 --> 00:02:14.370
So phones like
the Samsung Galaxy

00:02:14.370 --> 00:02:18.535
S8 with its desktop projection
mode use a windowing system,

00:02:18.535 --> 00:02:19.910
and a lot of the
optimizations we

00:02:19.910 --> 00:02:22.370
talk about today will
be helpful for that too.

00:02:22.370 --> 00:02:25.820
There's also devices that
are in a laptop format that

00:02:25.820 --> 00:02:29.330
run Android, like the Lenovo
Yoga Book and the A12.

00:02:29.330 --> 00:02:30.530
They use keyboard.

00:02:30.530 --> 00:02:32.030
They use touchpad input.

00:02:32.030 --> 00:02:34.520
So thinking about how to
optimize for Chrome OS

00:02:34.520 --> 00:02:37.636
will help for these
form factors too.

00:02:37.636 --> 00:02:40.460
So let's talk a little
bit about desktop apps,

00:02:40.460 --> 00:02:43.750
and how they're different
from the mobile form factor.

00:02:43.750 --> 00:02:46.520
So mobile apps,
for myself I tend

00:02:46.520 --> 00:02:49.280
to use them in short
bursts, maybe a few minutes,

00:02:49.280 --> 00:02:51.240
maybe 20 minutes at a time.

00:02:51.240 --> 00:02:53.650
And if I think about
buying a mobile app,

00:02:53.650 --> 00:02:56.240
it's something that
could cost a few dollars.

00:02:56.240 --> 00:03:00.380
Desktop apps, I and maybe many
of you use those for many hours

00:03:00.380 --> 00:03:02.180
at a time during the day.

00:03:02.180 --> 00:03:04.580
And buying one of those--

00:03:04.580 --> 00:03:09.000
buying that for a few hundred
dollars is not unreasonable.

00:03:09.000 --> 00:03:12.690
So these simple changes in the
form factor, a bigger screen,

00:03:12.690 --> 00:03:15.120
faster input with
mouse and keyboard

00:03:15.120 --> 00:03:17.540
drive a really
different kind of usage.

00:03:17.540 --> 00:03:20.240
And the first thing that we
might think about as Android

00:03:20.240 --> 00:03:23.360
developers is how do we
extend our current app

00:03:23.360 --> 00:03:26.390
onto the desktop platform,
and then ongoing,

00:03:26.390 --> 00:03:28.100
we may think about
other opportunities

00:03:28.100 --> 00:03:33.010
to do something very different
on the desktop platform.

00:03:33.010 --> 00:03:34.840
So that different
type of usage has been

00:03:34.840 --> 00:03:37.120
reflected in our own analytics.

00:03:37.120 --> 00:03:40.810
So we've seen that users
who are using immersive apps

00:03:40.810 --> 00:03:43.540
like messaging,
gaming, productivity

00:03:43.540 --> 00:03:46.750
spend more time on that
app in a Chromebook

00:03:46.750 --> 00:03:48.650
than they do on mobile devices.

00:03:48.650 --> 00:03:50.362
And so an example is AutoCAD.

00:03:50.362 --> 00:03:51.820
So I met a couple
of the developers

00:03:51.820 --> 00:03:53.194
back there who
are with us today.

00:03:53.194 --> 00:03:55.254
Thanks for coming.

00:03:55.254 --> 00:03:57.295
They've been working with
us to try and optimize,

00:03:57.295 --> 00:04:02.350
and some of the usage that
we've seen on Chrome OS devices

00:04:02.350 --> 00:04:04.914
has been much stronger.

00:04:04.914 --> 00:04:07.580
So let's talk a little bit about
some of, though, the high level

00:04:07.580 --> 00:04:10.040
specifics about what
you can do to optimize

00:04:10.040 --> 00:04:12.600
for Chrome OS and also
these large screen

00:04:12.600 --> 00:04:15.780
and other types of devices.

00:04:15.780 --> 00:04:20.589
First, Chromebooks work like
any other Android device.

00:04:20.589 --> 00:04:23.250
So if you have an app in
the Google Play Store,

00:04:23.250 --> 00:04:26.400
it probably already
works on Chrome OS.

00:04:26.400 --> 00:04:29.100
Many developers test
only for mobile, which

00:04:29.100 --> 00:04:31.170
is completely understandable.

00:04:31.170 --> 00:04:33.690
Just seeing the app for the
first time running on Chrome OS

00:04:33.690 --> 00:04:35.640
will probably
illustrate the need

00:04:35.640 --> 00:04:38.820
to do some optimization work.

00:04:38.820 --> 00:04:41.040
Those optimizations
usually come down

00:04:41.040 --> 00:04:45.390
to four differences
between mobile and desktop.

00:04:45.390 --> 00:04:47.685
The first is wider screens.

00:04:47.685 --> 00:04:49.770
That's probably the
most common issue.

00:04:49.770 --> 00:04:51.480
So, of course,
your mobile device

00:04:51.480 --> 00:04:53.130
has a screen that's this wide.

00:04:53.130 --> 00:04:56.340
Your laptop device will have
a screen that's this wide.

00:04:56.340 --> 00:04:58.980
And some apps don't use
screen real estate maybe

00:04:58.980 --> 00:05:00.480
like they should.

00:05:00.480 --> 00:05:02.370
And that's not just
third-party apps.

00:05:02.370 --> 00:05:04.570
This is work that
we have to do too.

00:05:04.570 --> 00:05:07.710
So this is an example of Maps
running in the "explore around

00:05:07.710 --> 00:05:09.720
you" view on Chrome OS.

00:05:09.720 --> 00:05:12.640
And you can see there's a narrow
strip of content in the middle,

00:05:12.640 --> 00:05:14.820
and the content's not
reflowing properly

00:05:14.820 --> 00:05:18.900
to take up gaps on the
side of the screen.

00:05:18.900 --> 00:05:19.900
This is another example.

00:05:19.900 --> 00:05:22.160
This is a conversation
from Google Hangouts.

00:05:22.160 --> 00:05:24.800
And as you can see, each message
from each of the participants

00:05:24.800 --> 00:05:27.530
is hard aligned to
the left and right.

00:05:27.530 --> 00:05:29.450
So it's hard to read downwards.

00:05:29.450 --> 00:05:32.150
The eye has to jump
from side to side

00:05:32.150 --> 00:05:36.140
to get the gist of
the conversation.

00:05:36.140 --> 00:05:39.530
The second item, phone's
a default portrait,

00:05:39.530 --> 00:05:42.430
laptop's a default landscape.

00:05:42.430 --> 00:05:43.860
So this is an example.

00:05:43.860 --> 00:05:47.580
This is "Storm 4: Rise of
the Balur," an Android game.

00:05:47.580 --> 00:05:51.360
Chrome OS respects that setting
that locks an app to portrait.

00:05:51.360 --> 00:05:54.030
So on a landscape
screen, the screen is--

00:05:54.030 --> 00:05:56.130
the view is still in portrait.

00:05:56.130 --> 00:05:58.110
So that leaves a lot
of the screen blank,

00:05:58.110 --> 00:06:00.370
and as you can see here,
those rich graphics

00:06:00.370 --> 00:06:02.578
are locked in this strip in
the center of the screen.

00:06:04.810 --> 00:06:06.180
The third item is windowing.

00:06:06.180 --> 00:06:09.600
So many apps assume
that the display size

00:06:09.600 --> 00:06:12.240
is equal to the window
size, and that's not always

00:06:12.240 --> 00:06:14.490
the case, even on Android.

00:06:14.490 --> 00:06:16.050
Part of the value
of desktop, though,

00:06:16.050 --> 00:06:18.910
is multitasking, being able to
see lots of different windows

00:06:18.910 --> 00:06:21.250
and apps running
at the same time.

00:06:21.250 --> 00:06:24.150
So it's often not the
case that the window size

00:06:24.150 --> 00:06:26.460
is equal to the display size.

00:06:26.460 --> 00:06:28.200
Apps need to understand that.

00:06:28.200 --> 00:06:30.390
So for example,
they can correctly

00:06:30.390 --> 00:06:32.490
understand the
input of a stylus,

00:06:32.490 --> 00:06:35.250
for example, and draw the
ink in the correct position,

00:06:35.250 --> 00:06:39.020
and there's no offset errors.

00:06:39.020 --> 00:06:43.040
And finally, keyboard,
pointer, and stylus input.

00:06:43.040 --> 00:06:45.770
So there's lots of
common states here

00:06:45.770 --> 00:06:47.990
that are uncommon on mobile.

00:06:47.990 --> 00:06:50.210
So for example, hover
states that will show things

00:06:50.210 --> 00:06:50.930
like tool tips.

00:06:50.930 --> 00:06:53.900
So hover over an icon,
a tool tip appears.

00:06:53.900 --> 00:06:57.320
It's just really unusual to
be able to do that on mobile.

00:06:57.320 --> 00:06:59.250
And the reverse is also true.

00:06:59.250 --> 00:07:02.660
So states and actions that
are really common on mobile

00:07:02.660 --> 00:07:04.400
could be less common on desktop.

00:07:04.400 --> 00:07:07.130
So an example, swipe to
dismiss, for example,

00:07:07.130 --> 00:07:10.947
of an email or an item in a
list, that's super easy to do

00:07:10.947 --> 00:07:12.530
and very intuitive
on mobile where you

00:07:12.530 --> 00:07:14.930
have touch that's right there.

00:07:14.930 --> 00:07:17.210
Whereas on desktop,
doing that with a mouse

00:07:17.210 --> 00:07:21.272
is a little more unusual.

00:07:21.272 --> 00:07:23.230
Those kinds of updates
that we're talking about

00:07:23.230 --> 00:07:24.970
can be very simple.

00:07:24.970 --> 00:07:26.600
So let me give you an example.

00:07:26.600 --> 00:07:29.730
So we've been working closely
with the team at Slack,

00:07:29.730 --> 00:07:34.120
and so this is an example of
Slack app running on Chrome OS.

00:07:34.120 --> 00:07:36.460
So those of you who
use Slack are probably

00:07:36.460 --> 00:07:38.170
familiar that in
the bottom right

00:07:38.170 --> 00:07:42.580
here, there's a big box for
entering your next message

00:07:42.580 --> 00:07:44.480
and sending it out to the team.

00:07:44.480 --> 00:07:46.920
So if you type that
in and press Enter,

00:07:46.920 --> 00:07:49.656
originally that just
sent a carriage return,

00:07:49.656 --> 00:07:52.280
because the mobile device wasn't
used to seeing keyboard input.

00:07:52.280 --> 00:07:55.130
So it wasn't tested,
very understandable.

00:07:55.130 --> 00:07:57.850
But the Slack team helped
us to do a little work

00:07:57.850 --> 00:08:01.030
optimizing this, and now hitting
Enter will send a message,

00:08:01.030 --> 00:08:03.950
so it works like you'd expect.

00:08:03.950 --> 00:08:06.910
So this is a quick
summary of the top level

00:08:06.910 --> 00:08:09.550
items that will help
those apps work like you'd

00:08:09.550 --> 00:08:14.300
expect on desktop and
get you happier users.

00:08:14.300 --> 00:08:16.790
So with that I'd like
to introduce Stefan,

00:08:16.790 --> 00:08:20.112
our tech lead for window
management on Chrome OS.

00:08:20.112 --> 00:08:22.998
[APPLAUSE]

00:08:26.370 --> 00:08:27.730
STEFAN: Hello, everyone.

00:08:27.730 --> 00:08:29.320
Thank you all for coming.

00:08:29.320 --> 00:08:31.890
I'm here to talk about how
to improve your application

00:08:31.890 --> 00:08:33.630
for the use in the
desktop world, which

00:08:33.630 --> 00:08:37.720
means with Chromebooks
or large screen devices.

00:08:37.720 --> 00:08:40.299
The most important thing you
can do to your application

00:08:40.299 --> 00:08:42.700
in order to get the best
out of desktop world

00:08:42.700 --> 00:08:46.090
is go to at least API level 24.

00:08:46.090 --> 00:08:49.420
Because with API level 24 we
can remove all the restrictions

00:08:49.420 --> 00:08:51.310
of window sizes
and whatnot which

00:08:51.310 --> 00:08:55.460
we have actually put in place
for [? older ?] applications.

00:08:55.460 --> 00:08:58.960
The next big thing you should
really do is you should--

00:08:58.960 --> 00:09:01.370
you should use
both orientations.

00:09:01.370 --> 00:09:04.120
So as we have seen
earlier, so the thing is

00:09:04.120 --> 00:09:06.400
most applications are coming
nowadays in phone size,

00:09:06.400 --> 00:09:09.400
means like it's portrait.

00:09:09.400 --> 00:09:12.730
And the thing is portrait alone
is, yeah, good for a phone,

00:09:12.730 --> 00:09:15.370
but it's not good for a desktop.

00:09:15.370 --> 00:09:18.790
So therefore by having also
landscape at the same time,

00:09:18.790 --> 00:09:21.670
you are improving the
usage of your application

00:09:21.670 --> 00:09:24.100
on a desktop device.

00:09:24.100 --> 00:09:26.110
The next thing--
well, if you ever

00:09:26.110 --> 00:09:29.950
have to only really rely on one
orientation, which is possible,

00:09:29.950 --> 00:09:31.210
you can actually specify that.

00:09:31.210 --> 00:09:32.835
And please specify
that in the manifest

00:09:32.835 --> 00:09:35.410
so that we know that
this is the case.

00:09:35.410 --> 00:09:37.690
The next thing you
should do is, well, there

00:09:37.690 --> 00:09:40.030
are different sizes of screens.

00:09:40.030 --> 00:09:42.280
You might actually have
something which is 10 inch,

00:09:42.280 --> 00:09:44.571
but you might actually have
something which is 40 inch,

00:09:44.571 --> 00:09:46.675
or maybe something like that.

00:09:46.675 --> 00:09:48.550
I don't know who has
that in the living room,

00:09:48.550 --> 00:09:50.710
but it would be nice, right?

00:09:50.710 --> 00:09:52.810
So and with that
you definitely want

00:09:52.810 --> 00:09:54.310
to show, of course,
more content.

00:09:54.310 --> 00:09:56.920
And therefore, by using the
standard mechanisms which

00:09:56.920 --> 00:09:59.630
are already in Android,
multiple layouts and whatnot,

00:09:59.630 --> 00:10:01.970
you can do all these
kind of things.

00:10:01.970 --> 00:10:04.210
Yeah, and then there
is mouse and keyboard.

00:10:04.210 --> 00:10:06.850
While mouse and
keyboard is something

00:10:06.850 --> 00:10:09.640
which is totally useful on
a notebook, but on a phone

00:10:09.640 --> 00:10:13.870
you have probably never really
used it with a good reason.

00:10:13.870 --> 00:10:17.850
So the next thing is
you should actually

00:10:17.850 --> 00:10:22.310
add stuff for accessibility,
like for example,

00:10:22.310 --> 00:10:26.620
adding content descriptions
so that the user can actually

00:10:26.620 --> 00:10:28.456
hear what you are doing there.

00:10:28.456 --> 00:10:29.830
So and then there
are, of course,

00:10:29.830 --> 00:10:32.140
all the usual suspects
like, for example,

00:10:32.140 --> 00:10:34.930
all these old APIs which are
there already since ever.

00:10:34.930 --> 00:10:36.760
Like drag and drop support.

00:10:36.760 --> 00:10:39.550
It's like the hover API
which we have heard earlier

00:10:39.550 --> 00:10:41.290
and all these kinds of things.

00:10:41.290 --> 00:10:44.380
By doing so, you are doing
a perfect job of getting

00:10:44.380 --> 00:10:48.310
into a good desktop experience.

00:10:48.310 --> 00:10:51.760
And most of these APIs
are already there.

00:10:51.760 --> 00:10:52.990
There's nothing really new.

00:10:52.990 --> 00:10:55.990
And by doing that, you are also
getting a much better citizen

00:10:55.990 --> 00:10:59.310
on the phone world.

00:10:59.310 --> 00:11:03.760
So with that, coming to the
window management on Chrome OS.

00:11:03.760 --> 00:11:06.710
So we have learned some
lessons from our previous year.

00:11:06.710 --> 00:11:08.650
So in our previous
year, we had, well,

00:11:08.650 --> 00:11:11.870
our first incarnation,
which was built on M,

00:11:11.870 --> 00:11:13.950
and, yeah, it has
a lot of problems.

00:11:13.950 --> 00:11:16.090
We said it was beta,
and beta it was.

00:11:16.090 --> 00:11:18.010
Well, there are millions
of applications.

00:11:18.010 --> 00:11:19.760
There are many different APIs.

00:11:19.760 --> 00:11:22.960
Well, back then it
was 24, now it's 26.

00:11:22.960 --> 00:11:24.730
And if you're going
online, you are

00:11:24.730 --> 00:11:27.370
trying to search, for
example, on how to figure out

00:11:27.370 --> 00:11:29.000
what the size of the screen is.

00:11:29.000 --> 00:11:31.600
Well, you will get 30
different versions of how

00:11:31.600 --> 00:11:33.650
you can do that or even more.

00:11:33.650 --> 00:11:35.890
And the thing is everything
will be uploaded.

00:11:35.890 --> 00:11:38.800
Well, that tells you if
something will go wrong--

00:11:38.800 --> 00:11:41.350
well, can go wrong, it
will definitely go wrong.

00:11:41.350 --> 00:11:43.160
There's no question there.

00:11:43.160 --> 00:11:46.480
So and then there were the
problems of orientations.

00:11:46.480 --> 00:11:48.897
Like for example, you're
starting an application,

00:11:48.897 --> 00:11:50.980
starts out landscape, then
it changes to portrait,

00:11:50.980 --> 00:11:52.180
and it jumps around.

00:11:52.180 --> 00:11:54.940
And this is of course totally
annoying for the user.

00:11:54.940 --> 00:11:57.460
And we had some
good ideas in mind

00:11:57.460 --> 00:12:00.269
of actually adding there
a special button which

00:12:00.269 --> 00:12:01.810
allowed you to change
the orientation

00:12:01.810 --> 00:12:03.310
at any point in time.

00:12:03.310 --> 00:12:05.230
Which was-- which
was well thought,

00:12:05.230 --> 00:12:07.990
but the problem is that
since an application could

00:12:07.990 --> 00:12:10.600
at any point in time say, hey,
I really want to be portrait,

00:12:10.600 --> 00:12:13.560
suddenly, the button was
disappearing and it was gone.

00:12:13.560 --> 00:12:17.320
So which was, of course, also
very confusing to the user.

00:12:17.320 --> 00:12:22.330
So then we had application
restarts, so unexpected ones.

00:12:22.330 --> 00:12:25.060
So like, for example, the
window changes its size,

00:12:25.060 --> 00:12:27.790
and it lost its state,
and the user then

00:12:27.790 --> 00:12:30.560
had to actually restart the game
from the beginning, which was,

00:12:30.560 --> 00:12:31.780
of course, totally annoying.

00:12:31.780 --> 00:12:34.260
All these kind of
things were pretty bad.

00:12:34.260 --> 00:12:37.731
So and at the end, we
had then, of course,

00:12:37.731 --> 00:12:39.730
the problem that the
windows, they didn't really

00:12:39.730 --> 00:12:42.260
expect to be in a windowed
world to begin with,

00:12:42.260 --> 00:12:44.020
which was another problem.

00:12:44.020 --> 00:12:46.900
Which brings me
to our next thing.

00:12:46.900 --> 00:12:49.720
So this [? app ?] in
our new window manager

00:12:49.720 --> 00:12:52.900
is a special window
modes we are supporting.

00:12:52.900 --> 00:12:56.350
So essentially we have the
pre-density aware applications.

00:12:56.350 --> 00:12:58.960
These are always being
shown full screen.

00:12:58.960 --> 00:13:00.700
So I really hope
that you are not

00:13:00.700 --> 00:13:02.680
programming any of these
kinds of applications

00:13:02.680 --> 00:13:04.570
anymore unless you want
to have the biggest

00:13:04.570 --> 00:13:05.800
button of the world.

00:13:05.800 --> 00:13:08.880
Might be a good thing, but
you possibly don't want that.

00:13:08.880 --> 00:13:11.200
So the next thing
is pre-N, pre-N.

00:13:11.200 --> 00:13:13.160
That is something in
between that means--

00:13:13.160 --> 00:13:14.980
it includes Marshmallow.

00:13:14.980 --> 00:13:17.700
Well, we figured out that most
of the applications out there,

00:13:17.700 --> 00:13:19.150
they are working fine.

00:13:19.150 --> 00:13:21.460
So they are working
reasonably well.

00:13:21.460 --> 00:13:24.540
But the thing is there are a
lot of applications which don't.

00:13:24.540 --> 00:13:28.120
So with that we were getting a
lot of beta feedback and so on.

00:13:28.120 --> 00:13:30.940
So and in order to
resolve this issue,

00:13:30.940 --> 00:13:33.070
we have put them
all into windows.

00:13:33.070 --> 00:13:34.330
So they are static now.

00:13:34.330 --> 00:13:35.770
They have always the same size.

00:13:35.770 --> 00:13:38.590
It's like it's coming
up in phone size.

00:13:38.590 --> 00:13:42.160
So and it can then be either
landscape or portrait.

00:13:42.160 --> 00:13:44.650
The user has an option where
he can actually then say, hey,

00:13:44.650 --> 00:13:47.230
I want to have that thing as
big as possible, which makes it

00:13:47.230 --> 00:13:50.650
then a portrait-sized window
on a landscape screen,

00:13:50.650 --> 00:13:52.720
which is the biggest
thing that you can do.

00:13:52.720 --> 00:13:55.720
And if it rotates, it's not
filling the screen entirely.

00:13:55.720 --> 00:13:57.700
But that is pre-N.

00:13:57.700 --> 00:14:00.040
If you are moving to N--
what I told you already,

00:14:00.040 --> 00:14:01.660
it's a good idea to do--

00:14:01.660 --> 00:14:04.600
you have then the full
freedom of getting resizable.

00:14:04.600 --> 00:14:06.310
You can actually
be full screen, you

00:14:06.310 --> 00:14:09.680
can be windowed,
and so on and so on.

00:14:09.680 --> 00:14:11.710
And if you don't want
to be resizable in N,

00:14:11.710 --> 00:14:13.930
you can say, I want
to be unresizable,

00:14:13.930 --> 00:14:17.149
which essentially puts
you in the full desktop.

00:14:17.149 --> 00:14:18.940
And then the last thing
is you can actually

00:14:18.940 --> 00:14:22.120
have an application which
essentially dictates as, hey, I

00:14:22.120 --> 00:14:27.600
want to be this size and at this
location, and we respect that.

00:14:27.600 --> 00:14:31.920
So the big change
to previous versions

00:14:31.920 --> 00:14:35.250
was that we have a
new rule, and that

00:14:35.250 --> 00:14:38.760
is that the root activity
rules, which essentially means

00:14:38.760 --> 00:14:42.120
that the root activity is--

00:14:42.120 --> 00:14:44.220
well, you have
multiple activities

00:14:44.220 --> 00:14:46.320
which are making up
the task [INAUDIBLE].

00:14:46.320 --> 00:14:49.390
And the top activity is
the one which you see,

00:14:49.390 --> 00:14:52.330
and the bottom most one,
that is the root activity.

00:14:52.330 --> 00:14:55.110
So if the root activity is, for
example, let's say landscape,

00:14:55.110 --> 00:14:57.720
and it's resizable, that means
that every activity which

00:14:57.720 --> 00:15:01.380
goes on top is also
landscape and resizable.

00:15:01.380 --> 00:15:03.019
That sounds a little
bit weird, right?

00:15:03.019 --> 00:15:04.560
Because the thing
is, that would mean

00:15:04.560 --> 00:15:06.210
that if you have an
application which

00:15:06.210 --> 00:15:10.130
was meant to be portrait
and maybe unresizable,

00:15:10.130 --> 00:15:14.220
it could suddenly become
resizable and landscape, which

00:15:14.220 --> 00:15:16.710
is a contradiction
in itself, right?

00:15:16.710 --> 00:15:19.152
Well, the thing is first,
if you're looking on a phone

00:15:19.152 --> 00:15:20.610
and you have the
side by side mode,

00:15:20.610 --> 00:15:22.746
the same thing is
being done there.

00:15:22.746 --> 00:15:24.120
And the second
thing is that most

00:15:24.120 --> 00:15:27.090
of the applications which are
really locked into one mode

00:15:27.090 --> 00:15:27.780
are games.

00:15:27.780 --> 00:15:31.402
So and the games they usually
don't use layouts and whatnot,

00:15:31.402 --> 00:15:33.360
and therefore, they really
need this treatment.

00:15:33.360 --> 00:15:36.415
But once you are using a layout
and the standard framework,

00:15:36.415 --> 00:15:38.040
which gives you all
this kind of thing,

00:15:38.040 --> 00:15:40.020
it can really hold
your form-- your stuff

00:15:40.020 --> 00:15:42.480
so that it's still
usable that way.

00:15:42.480 --> 00:15:44.760
And with this, you
have no window jumping,

00:15:44.760 --> 00:15:46.860
everything looks much
cleaner to the user,

00:15:46.860 --> 00:15:48.540
and it's really a
good experience.

00:15:54.270 --> 00:15:56.730
So and then there is,
well, you have possibly

00:15:56.730 --> 00:15:59.570
seen already Chromebooks.

00:15:59.570 --> 00:16:01.020
Chromebooks look like this.

00:16:01.020 --> 00:16:03.720
But if you have not seen
it, you can also convert it

00:16:03.720 --> 00:16:06.160
into a tablet form factor.

00:16:06.160 --> 00:16:08.550
So what happens when you're
going into the tablet form

00:16:08.550 --> 00:16:09.750
factor?

00:16:09.750 --> 00:16:14.250
In that case, we are
actually forcing the size

00:16:14.250 --> 00:16:17.160
if it's an M application-- so
the size will actually then

00:16:17.160 --> 00:16:19.200
be restricted to
whatever it was before.

00:16:19.200 --> 00:16:21.270
But the orientation
can go exactly

00:16:21.270 --> 00:16:24.120
as you are doing it on
a phone, which means,

00:16:24.120 --> 00:16:26.640
the root activity doesn't have
any kind of impact on that

00:16:26.640 --> 00:16:27.412
anymore.

00:16:30.070 --> 00:16:32.590
So orientation, I mentioned
that earlier already we

00:16:32.590 --> 00:16:34.960
have, well, two
orientations, which

00:16:34.960 --> 00:16:36.520
is portrait and landscape.

00:16:36.520 --> 00:16:39.130
While one is good for phones,
one is good for, well,

00:16:39.130 --> 00:16:40.960
tablets and notebooks.

00:16:40.960 --> 00:16:42.700
And then there's unspecified.

00:16:42.700 --> 00:16:44.900
Unspecified means
you can do both.

00:16:44.900 --> 00:16:48.170
We definitely encourage you to
do that, because that's best.

00:16:48.170 --> 00:16:52.900
So, and if you really have
to use one of these things,

00:16:52.900 --> 00:16:55.560
please specify that
in your manifest file.

00:16:55.560 --> 00:16:57.970
Please put in that you
have to be landscape.

00:16:57.970 --> 00:17:00.700
Don't make us guess what you
might actually want or want not

00:17:00.700 --> 00:17:02.800
to, because we
cannot guess that.

00:17:02.800 --> 00:17:04.660
So therefore, if
you want to avoid

00:17:04.660 --> 00:17:07.420
jumping or any kind
of weird scenario,

00:17:07.420 --> 00:17:08.920
please put that in there.

00:17:11.920 --> 00:17:16.940
So and then-- oh, look at that.

00:17:16.940 --> 00:17:19.270
So if you are specifying
your orientation,

00:17:19.270 --> 00:17:22.590
you should definitely
specify also [? sensor. ?]

00:17:22.590 --> 00:17:25.089
Because the problem is when I'm
playing a game or something,

00:17:25.089 --> 00:17:27.819
or I'm using Android, and
I'm going from this mode

00:17:27.819 --> 00:17:30.220
into this mode, which
is very natural,

00:17:30.220 --> 00:17:32.530
right, it's upside down.

00:17:32.530 --> 00:17:34.900
And the other thing
is the camera is here.

00:17:34.900 --> 00:17:35.400
See?

00:17:35.400 --> 00:17:35.900
It's here.

00:17:35.900 --> 00:17:37.690
It's not there like on a phone.

00:17:37.690 --> 00:17:41.110
So it doesn't even make much
sense to actually say, hey,

00:17:41.110 --> 00:17:43.470
I need the camera on top,
because it's not really

00:17:43.470 --> 00:17:44.720
on top of [INAUDIBLE] anyways.

00:17:47.330 --> 00:17:50.060
And the worst thing
which can be done,

00:17:50.060 --> 00:17:53.250
that is going into the
manifest file, specifying

00:17:53.250 --> 00:17:56.810
your landscape, and
then call later on, set

00:17:56.810 --> 00:17:59.595
requested orientation
with another orientation.

00:17:59.595 --> 00:18:01.220
That is really throwing
off everything,

00:18:01.220 --> 00:18:04.780
so please don't ever do that.

00:18:04.780 --> 00:18:08.100
So launch sizes, you have
various possibilities

00:18:08.100 --> 00:18:11.320
to actually get a certain
window in a certain size.

00:18:11.320 --> 00:18:12.920
So there are first hints.

00:18:12.920 --> 00:18:14.520
This is something
new which we have

00:18:14.520 --> 00:18:19.860
done, especially for our form
factor, which means desktop.

00:18:19.860 --> 00:18:22.410
You can especially
give us some hints.

00:18:22.410 --> 00:18:25.860
What do you want to see
inside a desktop environment?

00:18:25.860 --> 00:18:28.490
So do you want to have a
small window, a big window?

00:18:28.490 --> 00:18:29.760
Should it be landscape?

00:18:29.760 --> 00:18:31.050
Should it be portrait?

00:18:31.050 --> 00:18:32.850
By specifying these
kind of things,

00:18:32.850 --> 00:18:36.360
you should actually be
put into the right size

00:18:36.360 --> 00:18:40.447
without varying of which
size exactly it is.

00:18:40.447 --> 00:18:42.030
And the next thing
is you can actually

00:18:42.030 --> 00:18:45.870
start your intent with a
special options command, which

00:18:45.870 --> 00:18:50.010
is already there since N. And
by specifying the set launch

00:18:50.010 --> 00:18:52.200
bounds, you can then
move your window

00:18:52.200 --> 00:18:54.450
to a certain size and location.

00:18:54.450 --> 00:18:57.330
And the last possibility you
have is for every intent,

00:18:57.330 --> 00:18:59.500
you can also specify
a layout command,

00:18:59.500 --> 00:19:03.060
which allows you to give you
a minimum size, a default

00:19:03.060 --> 00:19:05.700
size, and where
it should actually

00:19:05.700 --> 00:19:06.932
be laid out on the screen.

00:19:06.932 --> 00:19:08.640
Should it be left,
right, top, and so on.

00:19:11.330 --> 00:19:13.430
So what kind of window
modes do we know?

00:19:13.430 --> 00:19:16.660
Well, we know, of
course, windowed as we

00:19:16.660 --> 00:19:18.340
are running on a desktop.

00:19:18.340 --> 00:19:21.410
And in this case, if you're
running in this mode,

00:19:21.410 --> 00:19:23.300
you will actually
run in, I think,

00:19:23.300 --> 00:19:29.315
it's 5x size screen on
that screen, so which is--

00:19:29.315 --> 00:19:32.350
which is in portrait.

00:19:32.350 --> 00:19:34.600
If you are maximized,
you will actually

00:19:34.600 --> 00:19:39.730
see the caption or the
application control bar on top,

00:19:39.730 --> 00:19:43.840
and the window will always
cover the entire screen.

00:19:43.840 --> 00:19:46.210
So even if you
are only portrait,

00:19:46.210 --> 00:19:49.630
the rest will be
blanked out with black.

00:19:49.630 --> 00:19:52.190
And then if you
are in this mode,

00:19:52.190 --> 00:19:55.030
your application can then
request to be full screen.

00:19:55.030 --> 00:19:56.890
It can actually do
the standard stuff,

00:19:56.890 --> 00:19:59.980
which is also always
common on Android

00:19:59.980 --> 00:20:02.430
to simply say, I want to
take over the system UI,

00:20:02.430 --> 00:20:04.270
I want to be full
screen, and then

00:20:04.270 --> 00:20:06.170
we are going out of
your way and the caption

00:20:06.170 --> 00:20:07.910
and as well as the
shelf will be hidden.

00:20:11.280 --> 00:20:11.890
Yeah.

00:20:11.890 --> 00:20:15.620
The most important thing to get
more space being used properly

00:20:15.620 --> 00:20:19.220
is add more layouts
for bigger sizes.

00:20:19.220 --> 00:20:23.990
So you can actually--
well, the thing is the more

00:20:23.990 --> 00:20:26.210
sizes you have, the
better it is, especially

00:20:26.210 --> 00:20:27.830
with bigger sizes.

00:20:27.830 --> 00:20:30.880
Avoid restarting if, well,
there are some applications.

00:20:30.880 --> 00:20:34.700
If you are not using
the layout system,

00:20:34.700 --> 00:20:38.620
you should try to
avoid the resizing

00:20:38.620 --> 00:20:44.030
and do the on layout
change commands yourself.

00:20:44.030 --> 00:20:45.530
Because that way
you can actually

00:20:45.530 --> 00:20:46.820
get a smooth experience.

00:20:46.820 --> 00:20:48.590
We come to that one later.

00:20:48.590 --> 00:20:51.590
However, you should always
use [? unsafe ?] instance

00:20:51.590 --> 00:20:54.710
and unrestore instance,
because that is helping you

00:20:54.710 --> 00:21:00.590
on Android world, as well
as on the Chromebook world.

00:21:00.590 --> 00:21:03.020
As better the restore
function is as better

00:21:03.020 --> 00:21:04.296
it is for the user.

00:21:04.296 --> 00:21:06.170
The only thing on a
phone is you don't really

00:21:06.170 --> 00:21:08.600
notice it that much,
but if you have a window

00:21:08.600 --> 00:21:11.340
and suddenly the content is
gone and you see something else

00:21:11.340 --> 00:21:15.150
from the beginning,
that is quite annoying.

00:21:15.150 --> 00:21:22.160
So and-- oh, yeah.

00:21:22.160 --> 00:21:24.890
If you are resizing the window,
you should definitely make sure

00:21:24.890 --> 00:21:27.473
that if there are some elements
on the screen which you cannot

00:21:27.473 --> 00:21:30.800
access and they are simply
gone, don't try to access them.

00:21:30.800 --> 00:21:33.150
We have seen some applications
crashing because of that,

00:21:33.150 --> 00:21:37.190
and that was, of course,
not fixable by us.

00:21:37.190 --> 00:21:40.250
So here's a good example
for a large screen layout.

00:21:40.250 --> 00:21:43.280
And you probably know it, and
you have seen it since years,

00:21:43.280 --> 00:21:45.680
but it's always a good
thing to show again.

00:21:45.680 --> 00:21:48.350
So there is a
portrait application.

00:21:48.350 --> 00:21:51.290
Well, portrait shows
you only one line.

00:21:51.290 --> 00:21:54.370
And you have then
the landscape version

00:21:54.370 --> 00:21:58.020
where you get simply another
part of the screen like that.

00:21:58.020 --> 00:22:01.730
So which is something which
you have seen with fragments

00:22:01.730 --> 00:22:02.910
already sent a long time.

00:22:02.910 --> 00:22:06.530
So next thing is Netflix
users, the whole screen

00:22:06.530 --> 00:22:09.870
efficiently to display the
title's imagery, synopsis,

00:22:09.870 --> 00:22:13.717
and episode list to give you the
user's contextual information

00:22:13.717 --> 00:22:14.550
before hitting play.

00:22:17.530 --> 00:22:19.750
So one thing, what I
was mentioning earlier

00:22:19.750 --> 00:22:23.570
is there is, unfortunately,
a caption or a window control

00:22:23.570 --> 00:22:24.460
bar.

00:22:24.460 --> 00:22:26.380
This thing is,
unfortunately, at least

00:22:26.380 --> 00:22:28.690
for now part of
the window, so it

00:22:28.690 --> 00:22:31.700
is inside your view hierarchy.

00:22:31.700 --> 00:22:34.490
If you are now putting something
into the root of the view

00:22:34.490 --> 00:22:37.600
hierarchy, you might actually
mess up something there.

00:22:37.600 --> 00:22:40.000
So for the time being,
we should really

00:22:40.000 --> 00:22:42.570
encourage you to not do
these kind of things.

00:22:42.570 --> 00:22:44.070
And according to
the framework team,

00:22:44.070 --> 00:22:46.960
this is something that shouldn't
do it anyways, so therefore try

00:22:46.960 --> 00:22:48.877
to avoid that if possible.

00:22:48.877 --> 00:22:50.710
The next thing is you
should actually always

00:22:50.710 --> 00:22:54.370
make sure to not assume that the
top left corner of your window

00:22:54.370 --> 00:22:55.510
is at 0, 0.

00:22:55.510 --> 00:22:58.610
It's most certainly not, because
there is first the caption,

00:22:58.610 --> 00:23:00.130
and then comes your content.

00:23:00.130 --> 00:23:02.260
So always try to
get your coordinates

00:23:02.260 --> 00:23:06.170
relative to the content origin.

00:23:06.170 --> 00:23:10.160
And if you have the window
size from your application,

00:23:10.160 --> 00:23:13.429
you will actually get the window
size, including the captions.

00:23:13.429 --> 00:23:15.220
So essentially that
means that your content

00:23:15.220 --> 00:23:17.303
is a little bit smaller
than the real full window.

00:23:20.080 --> 00:23:23.360
Window resizing has a lot
of hurdles, unfortunately.

00:23:23.360 --> 00:23:26.480
So, as I mentioned earlier,
to make it seamless,

00:23:26.480 --> 00:23:29.090
you should really have the
save and restore functionality.

00:23:29.090 --> 00:23:31.460
And, again, this thing is
something which helps you also

00:23:31.460 --> 00:23:32.390
in the Android world.

00:23:32.390 --> 00:23:34.680
This is not really only
something for Chromebooks.

00:23:34.680 --> 00:23:37.670
You should have that
anyways, either way.

00:23:37.670 --> 00:23:41.330
So and if you are using
on configuration change

00:23:41.330 --> 00:23:44.450
and you are doing
dynamic layouting, please

00:23:44.450 --> 00:23:46.220
add that there as well.

00:23:46.220 --> 00:23:48.800
If you don't want to be
resized, you can actually put

00:23:48.800 --> 00:23:51.980
into your activity
resizable [? forms, ?]

00:23:51.980 --> 00:23:53.670
which is for the most part true.

00:23:53.670 --> 00:23:56.450
There are some [INAUDIBLE]
cases where you can get resized,

00:23:56.450 --> 00:23:59.030
but usually this is true.

00:23:59.030 --> 00:24:04.010
And your window size will not
be the display size for sure.

00:24:04.010 --> 00:24:08.210
So therefore, always use
getActivity, getResources,

00:24:08.210 --> 00:24:10.910
getConfiguration, screen
width, and height and [? dp ?]

00:24:10.910 --> 00:24:13.660
in order to figure out what the
real size of your window is.

00:24:18.400 --> 00:24:20.560
Oh, yeah.

00:24:20.560 --> 00:24:24.340
So then the next thing is to
get the current configuration

00:24:24.340 --> 00:24:27.070
of the screen and the
matrix and everything,

00:24:27.070 --> 00:24:29.230
you should use getResources,
getConfiguration,

00:24:29.230 --> 00:24:33.050
which was more or less in
the plan before already.

00:24:33.050 --> 00:24:35.760
So the window balance can
change at any point in time.

00:24:35.760 --> 00:24:37.940
So be aware of that this--
that you're not really

00:24:37.940 --> 00:24:41.340
aesthetically caching the size
of the screen or the window

00:24:41.340 --> 00:24:42.080
somewhere.

00:24:42.080 --> 00:24:44.780
We have seen that also in some
applications which are simply

00:24:44.780 --> 00:24:47.660
first time they run, they
simply get then the size

00:24:47.660 --> 00:24:50.300
of the screen, they store it
somewhere in there own data,

00:24:50.300 --> 00:24:51.950
and they never look at it again.

00:24:51.950 --> 00:24:54.170
They scale everything,
and thereafter when

00:24:54.170 --> 00:24:58.394
you resize the window,
everything is looking funny.

00:24:58.394 --> 00:24:59.810
Really, try to
avoid that as well.

00:25:03.870 --> 00:25:07.447
So and then, yeah, if you're
using the layout system,

00:25:07.447 --> 00:25:09.030
everything will be
done automatically.

00:25:09.030 --> 00:25:11.510
Otherwise, you have to
take care of it yourself.

00:25:11.510 --> 00:25:13.233
You can do that
via OpenGL, which

00:25:13.233 --> 00:25:17.950
has been resizing
pretty nicely, but yeah.

00:25:17.950 --> 00:25:19.880
So if you have a
native application,

00:25:19.880 --> 00:25:23.350
you should actually
get the start size.

00:25:23.350 --> 00:25:26.370
Looking at the M last
content, XY [INAUDIBLE]

00:25:26.370 --> 00:25:27.940
width and height.

00:25:27.940 --> 00:25:31.930
You should actually-- you
could also use your content,

00:25:31.930 --> 00:25:34.840
and you should definitely
then listen to all the changes

00:25:34.840 --> 00:25:38.200
which are coming down the
pipe via the listeners.

00:25:38.200 --> 00:25:40.270
So definitely look at
any kind of changes

00:25:40.270 --> 00:25:45.520
which can happen to the layout
and/or your window size.

00:25:45.520 --> 00:25:50.500
So with that, let me show you a
short demonstration by Margaret

00:25:50.500 --> 00:25:52.884
Chang about resizing.

00:25:52.884 --> 00:25:53.800
MARGARET CHANG: Great.

00:25:53.800 --> 00:25:55.270
Thanks, everyone.

00:25:55.270 --> 00:25:56.770
My name is Margaret,
and today, I'll

00:25:56.770 --> 00:25:58.353
be showing you some
pretty cool things

00:25:58.353 --> 00:26:01.600
that your Android apps
can do on Chrome OS.

00:26:01.600 --> 00:26:04.310
Actually, I have here one of the
latest Chromebooks, the Samsung

00:26:04.310 --> 00:26:06.520
Chromebook Pro, that
will be releasing soon

00:26:06.520 --> 00:26:09.970
with the Nougat [? rebase ?]
of the Play Store on Chrome.

00:26:09.970 --> 00:26:11.920
So let's get started.

00:26:11.920 --> 00:26:14.290
You can see that it's pretty
small on the screen, right.

00:26:14.290 --> 00:26:17.062
So from here it's
very hard to see.

00:26:17.062 --> 00:26:18.770
I'm going to go ahead
and resize the app,

00:26:18.770 --> 00:26:20.710
and again, I could
typically do that

00:26:20.710 --> 00:26:23.830
by hitting this little Maximize
button or the Full Screen key.

00:26:23.830 --> 00:26:26.050
But I actually have a
developer option enabled

00:26:26.050 --> 00:26:28.930
that lets me perform
freeform resizing by dragging

00:26:28.930 --> 00:26:30.730
the borders of the window.

00:26:30.730 --> 00:26:36.650
So see that?

00:26:36.650 --> 00:26:39.830
The content scales really
well and very beautifully.

00:26:39.830 --> 00:26:42.479
And the content also
updates dynamically.

00:26:42.479 --> 00:26:44.270
So if you're able to
do something like this

00:26:44.270 --> 00:26:47.120
into your app, you'll be giving
your users much more control

00:26:47.120 --> 00:26:48.534
over their desktop real estate.

00:26:48.534 --> 00:26:50.450
And with that, I'm going
to send you back over

00:26:50.450 --> 00:26:53.150
to Stefan to talk about just how
you can enable these developer

00:26:53.150 --> 00:26:55.860
options so that you can also
try these on your apps, too.

00:26:59.620 --> 00:27:00.240
STEFAN: Sweet.

00:27:00.240 --> 00:27:02.311
Thank you, Margaret.

00:27:02.311 --> 00:27:04.560
So to get to the developer
options, all you have to do

00:27:04.560 --> 00:27:07.950
is you have to go first
into the Chrome window,

00:27:07.950 --> 00:27:11.400
you go into the Settings,
and you type in Android.

00:27:11.400 --> 00:27:15.450
And then you will see the
highlighted Android section

00:27:15.450 --> 00:27:17.750
and you click on
Android Settings.

00:27:17.750 --> 00:27:20.100
A side tip, you should actually
now go into your shelf,

00:27:20.100 --> 00:27:22.020
right click on it, and
pin it to the shelf,

00:27:22.020 --> 00:27:26.160
so that you can access it later
on quicker when you need to.

00:27:26.160 --> 00:27:30.110
And with that, so there are
currently two developer options

00:27:30.110 --> 00:27:31.510
of interest for you.

00:27:31.510 --> 00:27:34.650
The first one is the
dynamic resizing option.

00:27:34.650 --> 00:27:37.200
So you should definitely
turn that on and try

00:27:37.200 --> 00:27:38.370
to test your application.

00:27:38.370 --> 00:27:40.740
See that it's actually
first dynamically

00:27:40.740 --> 00:27:42.810
fluidly resizing everything.

00:27:42.810 --> 00:27:45.480
So if it's not resizing
fluidly, what you should do

00:27:45.480 --> 00:27:47.580
is you should actually
look into your activate.

00:27:47.580 --> 00:27:50.760
So if it is not
dynamically doing that,

00:27:50.760 --> 00:27:52.320
and you're using
the layout system,

00:27:52.320 --> 00:27:54.000
and you are getting
restarted, you

00:27:54.000 --> 00:27:56.610
should actually make sure
that all the resources which

00:27:56.610 --> 00:27:58.570
you are using, they are cached.

00:27:58.570 --> 00:28:00.600
That you're not trying
to reallocate them again,

00:28:00.600 --> 00:28:03.870
because that takes time and
that makes the whole process

00:28:03.870 --> 00:28:07.157
much leggier and it
doesn't look that good.

00:28:07.157 --> 00:28:09.240
So and as you have seen
just in our demonstration,

00:28:09.240 --> 00:28:11.130
it can be really, really smooth.

00:28:11.130 --> 00:28:14.580
So therefore the
smoother and nicer it is.

00:28:14.580 --> 00:28:16.680
And then the next
thing is, well,

00:28:16.680 --> 00:28:19.014
as I said earlier, we have
this kind of root [? rule. ?]

00:28:19.014 --> 00:28:21.221
And you don't really know
exactly what your window is

00:28:21.221 --> 00:28:21.750
doing.

00:28:21.750 --> 00:28:23.310
And if you ever
come to the point

00:28:23.310 --> 00:28:25.620
where you are not really
sure what you see,

00:28:25.620 --> 00:28:28.050
you can always turn on the
second option with this

00:28:28.050 --> 00:28:32.290
to show the content-- well,
the state of the Window

00:28:32.290 --> 00:28:36.500
Manager, which is then presented
in the window title bar.

00:28:36.500 --> 00:28:38.440
As you can here
see, for example,

00:28:38.440 --> 00:28:41.160
there's N resizable, LU.

00:28:41.160 --> 00:28:43.610
Which means that it's the state.

00:28:43.610 --> 00:28:45.120
U means it can do both.

00:28:45.120 --> 00:28:47.910
It's currently a
landscape, and it's

00:28:47.910 --> 00:28:50.760
an N resizable
application, which is

00:28:50.760 --> 00:28:53.040
the best thing what can happen.

00:28:53.040 --> 00:28:54.330
So and the second option--

00:28:54.330 --> 00:28:54.900
no.

00:28:54.900 --> 00:28:56.010
Actually I was joking.

00:28:56.010 --> 00:28:57.450
There's a third option.

00:28:57.450 --> 00:29:01.410
So there is another one if
you want to also test already

00:29:01.410 --> 00:29:04.710
maximize, you can actually
turn on an option which

00:29:04.710 --> 00:29:08.130
is named something like default
size and orientation, yada,

00:29:08.130 --> 00:29:08.890
yada, yada.

00:29:08.890 --> 00:29:11.070
And you put that
thing into use phone

00:29:11.070 --> 00:29:13.590
sized window and default
to portrait orientation

00:29:13.590 --> 00:29:17.490
and allow portrait-only
application to maximize.

00:29:17.490 --> 00:29:21.570
So if you select that thing, you
can also maximize your portrait

00:29:21.570 --> 00:29:22.830
applications.

00:29:22.830 --> 00:29:25.830
Which gives you then the control
bar, everything as I said.

00:29:25.830 --> 00:29:28.350
So we have not turned
that on yet by default,

00:29:28.350 --> 00:29:30.040
but it'll come sooner or later.

00:29:30.040 --> 00:29:34.660
So therefore you can already
go ahead and try that, as well.

00:29:34.660 --> 00:29:36.750
So then if you're
using a camera,

00:29:36.750 --> 00:29:38.910
you have most certainly
already seen something

00:29:38.910 --> 00:29:43.290
in our previous
experiments with M.

00:29:43.290 --> 00:29:45.150
That was you were
starting an application,

00:29:45.150 --> 00:29:47.520
and suddenly
everything was somehow

00:29:47.520 --> 00:29:49.980
rotated, which was
not really that great.

00:29:49.980 --> 00:29:54.664
So and the question is how can
you fix these kind of things.

00:29:54.664 --> 00:29:56.580
Well, the first thing
that we want to tell you

00:29:56.580 --> 00:29:59.130
is, if you are
moving to at least N

00:29:59.130 --> 00:30:02.340
and you make your window
resizable, we take care of you.

00:30:02.340 --> 00:30:05.130
So with that, we should be
able to make everything work

00:30:05.130 --> 00:30:05.760
for you.

00:30:05.760 --> 00:30:07.530
But without that,
unfortunately, you

00:30:07.530 --> 00:30:10.170
might actually hit some
edge cases which don't work.

00:30:10.170 --> 00:30:15.380
So, therefore, simply doing
that will fix everything.

00:30:15.380 --> 00:30:18.000
So from Window Manager
to input-related topics.

00:30:18.000 --> 00:30:20.730
Well, the thing is,
as I said earlier,

00:30:20.730 --> 00:30:22.454
phones are a little
bit different.

00:30:22.454 --> 00:30:24.120
And I guess you have
possibly never used

00:30:24.120 --> 00:30:26.640
the keyboard or the mouse
with your phone, right?

00:30:26.640 --> 00:30:29.767
Yeah, me neither.

00:30:29.767 --> 00:30:31.350
So the first thing
which you should do

00:30:31.350 --> 00:30:34.680
is there are input focus
elements on your screen.

00:30:34.680 --> 00:30:36.810
So the thing is at
the moment Android

00:30:36.810 --> 00:30:39.120
is trying to guess
what you might actually

00:30:39.120 --> 00:30:41.190
want to have there,
how you are actually

00:30:41.190 --> 00:30:42.750
navigating through that.

00:30:42.750 --> 00:30:45.070
On a desktop, you expect a
little bit more than that.

00:30:45.070 --> 00:30:47.007
So by using, for
example, tap key,

00:30:47.007 --> 00:30:48.590
you want to actually
tap through them,

00:30:48.590 --> 00:30:50.700
you have-- want to
use directional keys.

00:30:50.700 --> 00:30:53.719
And this is something which
is an Android since ever.

00:30:53.719 --> 00:30:55.260
However, the thing
is like it was not

00:30:55.260 --> 00:30:57.996
really used that much, because
the keyboard was not used.

00:30:57.996 --> 00:31:00.120
So if you want to use that,
you can simply add that

00:31:00.120 --> 00:31:03.360
to your manifest file as pointed
out here, as pointed out,

00:31:03.360 --> 00:31:05.670
I think, API level,
I don't know, 12.

00:31:05.670 --> 00:31:07.020
Something really pretty old.

00:31:07.020 --> 00:31:09.210
So, therefore, simply go
online and check it out.

00:31:09.210 --> 00:31:12.580
It's totally easy to do, and
it helps a lot of people--

00:31:12.580 --> 00:31:15.940
especially for
accessibility and so on.

00:31:15.940 --> 00:31:20.670
So the next thing is if you
want to handle keyboard actions,

00:31:20.670 --> 00:31:23.970
you can use key event
and call back handler.

00:31:23.970 --> 00:31:26.970
So this thing will allow you to
actually get all the keyboard

00:31:26.970 --> 00:31:30.750
events directly and to do
something with it, like,

00:31:30.750 --> 00:31:31.770
for example, in a game.

00:31:31.770 --> 00:31:33.300
You can also use
then the modifiers

00:31:33.300 --> 00:31:35.640
to check out if, for example,
the Shift key was pressed

00:31:35.640 --> 00:31:39.390
or something, and you can do
then special actions on that.

00:31:39.390 --> 00:31:40.979
You don't have to
really re-implement,

00:31:40.979 --> 00:31:42.270
of course, the text edit field.

00:31:42.270 --> 00:31:43.530
That is already there.

00:31:43.530 --> 00:31:45.990
But if you ever
want to edit text,

00:31:45.990 --> 00:31:48.390
you should actually
use [? onkeydown, ?]

00:31:48.390 --> 00:31:51.840
[? onkeylongpress, ?] and
[? onkeyapp ?] to do your text

00:31:51.840 --> 00:31:52.770
detection.

00:31:52.770 --> 00:31:57.000
Please don't use [? onkey ?]
[? preIME ?] unless you really

00:31:57.000 --> 00:31:59.820
want to implement
the full IME stuff.

00:31:59.820 --> 00:32:01.260
You don't want to do that.

00:32:01.260 --> 00:32:04.650
Please leave this to us and
use only the key for [? not ?]

00:32:04.650 --> 00:32:08.970
[? handling. ?] And off to
Margaret for our text input

00:32:08.970 --> 00:32:09.489
demo.

00:32:09.489 --> 00:32:10.780
MARGARET CHANG: Thanks, Stefan.

00:32:10.780 --> 00:32:13.390
OK, Adobe is a developer
that is taking the next step

00:32:13.390 --> 00:32:17.050
into implementing their keyboard
shortcuts into their Android

00:32:17.050 --> 00:32:18.790
app which typically
breaks the barrier

00:32:18.790 --> 00:32:22.492
between your traditional
mobile and desktop users.

00:32:22.492 --> 00:32:24.610
All right, here I'm going
to go ahead and show

00:32:24.610 --> 00:32:26.710
you some shortcuts that
Adobe has implemented

00:32:26.710 --> 00:32:28.174
into their Lightroom app.

00:32:28.174 --> 00:32:29.590
Here's a collection
of some photos

00:32:29.590 --> 00:32:31.160
that I already
have in my library.

00:32:31.160 --> 00:32:32.618
And the first thing
I'm going to do

00:32:32.618 --> 00:32:35.710
is try to go through each photo
and rate them from 0 to 5 stars

00:32:35.710 --> 00:32:39.140
by pressing on the corresponding
numbers on the keypad.

00:32:39.140 --> 00:32:41.440
So let's get started.

00:32:41.440 --> 00:32:45.190
I remember this was
an amazing meal, so 3.

00:32:45.190 --> 00:32:48.910
Beautiful place,
beautiful picture, so 5.

00:32:48.910 --> 00:32:54.880
Delicious meal, but homemade
so 4, and so on and so forth.

00:32:54.880 --> 00:32:58.090
You can see here that I
was also able to traverse

00:32:58.090 --> 00:33:01.140
through the photos using
the navigational arrow keys.

00:33:01.140 --> 00:33:02.890
All right, so now let's
say I want to make

00:33:02.890 --> 00:33:04.570
a collection of food photos.

00:33:04.570 --> 00:33:10.410
I can easily do that by
pressing X to reject, P to pick,

00:33:10.410 --> 00:33:14.670
and if I want to reverse this
at any time, I can click U.

00:33:14.670 --> 00:33:17.520
You can see how easy I was
able to go through and organize

00:33:17.520 --> 00:33:19.020
my photos.

00:33:19.020 --> 00:33:20.910
If you were able
to also implement

00:33:20.910 --> 00:33:23.370
some of these keyboard
shortcuts into your apps,

00:33:23.370 --> 00:33:26.100
you'll also be able to increase
user productivity workflow,

00:33:26.100 --> 00:33:27.010
as well.

00:33:27.010 --> 00:33:28.830
So with that, I'll
hand it back to Stefan

00:33:28.830 --> 00:33:31.200
to talk more about how to
utilize some other hardware

00:33:31.200 --> 00:33:34.060
features like mouse and stylus.

00:33:34.060 --> 00:33:36.450
STEFAN: Thank you, Margaret.

00:33:36.450 --> 00:33:38.760
So with every
Chromeware supports now

00:33:38.760 --> 00:33:42.620
a stylus, as you have
probably seen already

00:33:42.620 --> 00:33:44.070
with all our latest editions.

00:33:44.070 --> 00:33:46.380
Well, there that--

00:33:46.380 --> 00:33:48.440
I can't find it.

00:33:48.440 --> 00:33:49.860
Oh, it's not there.

00:33:49.860 --> 00:33:52.070
Great.

00:33:52.070 --> 00:33:55.710
OK, so if you don't
care about any kind

00:33:55.710 --> 00:33:59.070
of input-related things, like
what kind of device it is,

00:33:59.070 --> 00:33:59.860
well, you're done.

00:33:59.860 --> 00:34:01.109
You don't have to do anything.

00:34:01.109 --> 00:34:03.190
Because if you're using
already the motion event,

00:34:03.190 --> 00:34:04.860
that is all fine.

00:34:04.860 --> 00:34:07.730
If you are, on the other hand,
interested in, for example,

00:34:07.730 --> 00:34:10.770
pen input, well, then you should
actually call the motion event

00:34:10.770 --> 00:34:13.290
[? get ?] [? two ?] type, which
gives you exactly the kind

00:34:13.290 --> 00:34:14.699
of device you are using.

00:34:14.699 --> 00:34:18.269
You can get then the
pressure and the tilt.

00:34:18.269 --> 00:34:19.935
So however, the thing
is, of course, you

00:34:19.935 --> 00:34:21.540
are getting one of
these events only

00:34:21.540 --> 00:34:23.250
per frame, which
means, like, you're

00:34:23.250 --> 00:34:26.094
missing out on all the
precision what we can give you.

00:34:26.094 --> 00:34:27.510
So in order to get
everything, you

00:34:27.510 --> 00:34:29.225
want to have the
precision movements.

00:34:29.225 --> 00:34:30.600
And for that, you
should actually

00:34:30.600 --> 00:34:32.639
have an additional look
into getHistorical,

00:34:32.639 --> 00:34:35.580
XY, and pressure
and axis value which

00:34:35.580 --> 00:34:37.670
gives you then the full pass.

00:34:37.670 --> 00:34:41.250
So the other thing that we have
is a very sophisticated palm

00:34:41.250 --> 00:34:43.530
rejection, which means
like even though when

00:34:43.530 --> 00:34:46.080
you are using your
palm on the screen,

00:34:46.080 --> 00:34:49.033
it will actually not register
as some kind of drawing.

00:34:49.033 --> 00:34:50.699
But the problem is
first you are already

00:34:50.699 --> 00:34:52.510
getting some kind of event.

00:34:52.510 --> 00:34:54.480
So in order to make
everything work,

00:34:54.480 --> 00:34:57.630
you're getting first the
[INAUDIBLE], pen goes down

00:34:57.630 --> 00:34:59.550
or finger goes down.

00:34:59.550 --> 00:35:01.470
And then you are moving
maybe a little bit

00:35:01.470 --> 00:35:03.690
and then you get a cancel
call, which is essentially

00:35:03.690 --> 00:35:06.900
canceling the entire pass, which
is a signal for you to remove

00:35:06.900 --> 00:35:10.360
the entire thing.

00:35:10.360 --> 00:35:13.360
Margaret will show us
now a nice demo for the--

00:35:13.360 --> 00:35:14.514
MARGARET CHANG: Thank you.

00:35:14.514 --> 00:35:16.180
OK, let's go over an
app that has really

00:35:16.180 --> 00:35:19.000
utilized stylus input
well and also implemented

00:35:19.000 --> 00:35:21.034
some specific stylus features.

00:35:21.034 --> 00:35:23.200
So first I'm going to go
ahead and put my Chromebook

00:35:23.200 --> 00:35:25.620
into tablet mode, because
it's much easier to write on.

00:35:29.029 --> 00:35:31.937
All right.

00:35:31.937 --> 00:35:34.270
Then I'm going to go ahead
and take out my trusty stylus

00:35:34.270 --> 00:35:37.240
device, and let's get started.

00:35:37.240 --> 00:35:41.260
OK, Squid is an app that
easily lets me draw and sketch.

00:35:41.260 --> 00:35:44.440
And you can see here that as I
put my palm across the screen,

00:35:44.440 --> 00:35:45.580
there are no marks from it.

00:35:45.580 --> 00:35:54.010
At the same time, I can write
with my palm on the screen,

00:35:54.010 --> 00:35:57.550
and there are no marks
from that-- from my palm.

00:35:57.550 --> 00:36:00.450
This is because the system
is detecting the palm

00:36:00.450 --> 00:36:01.940
and aborting the event path.

00:36:01.940 --> 00:36:04.560
And then the app picks
that up and undoes

00:36:04.560 --> 00:36:07.100
the line that has been
drawn so far from my palm.

00:36:07.100 --> 00:36:09.120
So one thing Squid
has also done is

00:36:09.120 --> 00:36:12.180
they've implemented a pressure
sensitivity feature, which

00:36:12.180 --> 00:36:14.405
you can see here.

00:36:14.405 --> 00:36:15.780
So what that does
is it allows me

00:36:15.780 --> 00:36:18.900
to make lighter or darker lines
based off of how hard I press

00:36:18.900 --> 00:36:19.980
on the screen.

00:36:19.980 --> 00:36:25.320
This means that lighter lines
are from lighter pressure

00:36:25.320 --> 00:36:28.887
and darker lines are
from heavier pressure.

00:36:28.887 --> 00:36:30.720
So with that I'm going
to send you back over

00:36:30.720 --> 00:36:31.930
to Stefan to wrap up inputs.

00:36:35.000 --> 00:36:36.230
STEFAN: Thank you, Margaret.

00:36:36.230 --> 00:36:39.332
Next thing is input
compatibility mode.

00:36:39.332 --> 00:36:40.790
So the thing with
the compatibility

00:36:40.790 --> 00:36:42.410
is, well, very simple.

00:36:42.410 --> 00:36:44.840
No one was actually
using a mouse yet, right?

00:36:44.840 --> 00:36:47.840
So therefore, the scroll
wheel has a special input.

00:36:47.840 --> 00:36:51.050
It is defined by Android since
ever, but no one is using it.

00:36:51.050 --> 00:36:53.180
On a Chromebook, this is,
of course, pretty bad.

00:36:53.180 --> 00:36:55.610
Because if you're using then,
for example, your mouse,

00:36:55.610 --> 00:36:57.860
nothing will move when
you're trying to scroll.

00:36:57.860 --> 00:37:00.770
In order to solve this, we
have a compatibility mode.

00:37:00.770 --> 00:37:03.690
So and what we do is we look at
that thing, we have the event,

00:37:03.690 --> 00:37:05.780
and we are converting
it automatically

00:37:05.780 --> 00:37:09.080
in a touch scroll event.

00:37:09.080 --> 00:37:12.125
And that is usually done
under the hood for you.

00:37:12.125 --> 00:37:14.000
If you don't care about
these kind of things,

00:37:14.000 --> 00:37:15.610
everything will simply work.

00:37:15.610 --> 00:37:18.380
However, if you do care
about these kind of things

00:37:18.380 --> 00:37:20.300
and other special
input [? quilts, ?]

00:37:20.300 --> 00:37:23.440
you can actually specify in the
user section of your manifest

00:37:23.440 --> 00:37:26.450
file, Android hardware type PC.

00:37:26.450 --> 00:37:27.530
If you do that--

00:37:27.530 --> 00:37:30.500
and please use as false,
because otherwise you

00:37:30.500 --> 00:37:32.384
run only on
Chromebooks-- then you

00:37:32.384 --> 00:37:34.550
will get the full breadth
of all the different input

00:37:34.550 --> 00:37:36.890
events possible.

00:37:36.890 --> 00:37:39.680
And yes, since we are
running a bit short,

00:37:39.680 --> 00:37:41.790
I'll try to speed
this up a little bit.

00:37:41.790 --> 00:37:44.525
So that means, you're
actually getting then

00:37:44.525 --> 00:37:47.810
the proper scroll events,
and you can also then

00:37:47.810 --> 00:37:49.730
check out the--

00:37:49.730 --> 00:37:52.100
you can distinguish the
two finger touch touchpad

00:37:52.100 --> 00:37:55.280
scrolling from the
touch screen scrolling

00:37:55.280 --> 00:37:56.870
by looking at getSource.

00:37:56.870 --> 00:37:59.330
And you can distinguish
also the drag operation,

00:37:59.330 --> 00:38:03.870
the drag and drop operation
from the touchpads collection.

00:38:03.870 --> 00:38:05.780
So this brings me now
to the last paragraph,

00:38:05.780 --> 00:38:08.210
how to test the application
to ensure a positive user

00:38:08.210 --> 00:38:10.562
experience.

00:38:10.562 --> 00:38:12.020
So first off, you
should definitely

00:38:12.020 --> 00:38:14.186
make sure that all your
manifest files are in order.

00:38:14.186 --> 00:38:17.390
So which means check out
that you are specifying

00:38:17.390 --> 00:38:19.950
the orientation you want to
use, the size you want to use,

00:38:19.950 --> 00:38:23.080
[INAUDIBLE] if you want
to use them, and check out

00:38:23.080 --> 00:38:25.580
that the min width, max width,
and all these kind of things,

00:38:25.580 --> 00:38:27.500
they are actually
specified properly.

00:38:27.500 --> 00:38:30.470
If you're interested
in the special events,

00:38:30.470 --> 00:38:33.500
use Android hardware type
PC, which will definitely

00:38:33.500 --> 00:38:35.060
give you all the events.

00:38:35.060 --> 00:38:38.540
Then you should definitely test
the resizing of your window.

00:38:38.540 --> 00:38:40.970
So make it really long.

00:38:40.970 --> 00:38:43.590
Try to resize your window
as crazy as possible.

00:38:43.590 --> 00:38:46.010
Use our developer
option and make sure

00:38:46.010 --> 00:38:49.640
that everything is smooth
and it's not crashing.

00:38:49.640 --> 00:38:55.760
And then also change the device
from tablet into notebook form

00:38:55.760 --> 00:38:58.970
factor to see that
everything is working fine.

00:38:58.970 --> 00:39:02.960
And also make sure that caption,
so the window control bar,

00:39:02.960 --> 00:39:06.067
is not offsetting your input
events by some kind of fraction

00:39:06.067 --> 00:39:06.650
of the screen.

00:39:09.200 --> 00:39:12.650
So and make sure that the
safe and restore is working

00:39:12.650 --> 00:39:14.630
properly, that you are
restoring that properly,

00:39:14.630 --> 00:39:18.720
and that everything
works there as well.

00:39:18.720 --> 00:39:21.170
Yeah.

00:39:21.170 --> 00:39:23.714
Very soon we will have
an emulator for you.

00:39:23.714 --> 00:39:25.380
You should actually
take out your phone.

00:39:25.380 --> 00:39:27.546
You should actually make a
screenshot of this thing,

00:39:27.546 --> 00:39:32.645
because nobody can remember
the very exciting shortcut,

00:39:32.645 --> 00:39:37.940
goo.gl/Q8ptkZ.

00:39:37.940 --> 00:39:41.160
If you want to sign up
for our virtual machine,

00:39:41.160 --> 00:39:42.561
you can actually do it there.

00:39:42.561 --> 00:39:44.060
And we will actually
send you, then,

00:39:44.060 --> 00:39:47.755
a preview as soon as it's ready,
which should be fairly soon.

00:39:47.755 --> 00:39:49.130
So with that, you
should actually

00:39:49.130 --> 00:39:53.240
be able to develop
everything locally

00:39:53.240 --> 00:39:55.342
without the need of
using a Chromebook.

00:39:58.200 --> 00:40:00.610
If you have any more
specific questions,

00:40:00.610 --> 00:40:02.580
then please go to
our developer site

00:40:02.580 --> 00:40:06.360
on
developer.android.com/topic/arc,

00:40:06.360 --> 00:40:07.900
and we will update this page.

00:40:07.900 --> 00:40:11.660
It should be updated by now,
but we will add more stuff to it

00:40:11.660 --> 00:40:13.172
over time.

00:40:13.172 --> 00:40:16.170
So with that, let's summarize
and wrap up the session.

00:40:16.170 --> 00:40:19.050
I'm doing that now very fast.

00:40:19.050 --> 00:40:21.900
So the takeaway is your
application is already working.

00:40:21.900 --> 00:40:23.626
Everything is fine.

00:40:23.626 --> 00:40:24.750
You shouldn't really worry.

00:40:24.750 --> 00:40:25.980
Well, maybe you should worry.

00:40:25.980 --> 00:40:27.510
You should definitely
try it out.

00:40:27.510 --> 00:40:29.160
You should definitely
move to API

00:40:29.160 --> 00:40:33.000
level 24 unless you want to
be stuck into a small window.

00:40:33.000 --> 00:40:35.760
Plan for huge screens,
very, very important.

00:40:35.760 --> 00:40:38.100
Allow your application
to be resizable.

00:40:38.100 --> 00:40:40.680
Make sure to specify vendor
requirements in your manifest

00:40:40.680 --> 00:40:42.360
file, as mentioned earlier.

00:40:42.360 --> 00:40:44.940
Be consistent with
the window orientation

00:40:44.940 --> 00:40:48.750
and add all the nice
desktop features which

00:40:48.750 --> 00:40:51.594
are making a desktop a desktop.

00:40:51.594 --> 00:40:56.190
[MUSIC PLAYING]

