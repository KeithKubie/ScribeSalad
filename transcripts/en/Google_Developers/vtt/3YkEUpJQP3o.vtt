WEBVTT
Kind: captions
Language: en

00:00:04.870 --> 00:00:11.420
&gt;&gt;Amit Joshi: Hi, everyone. Thank you for
coming here. I'm Amit Joshi, software engineer

00:00:11.420 --> 00:00:15.430
with Google. I'm a technician for Google Frame.
&gt;&gt;Alex Russell: Hi, I'm Alex Russell. I'm

00:00:15.430 --> 00:00:19.170
also a software engineer at Google working
on Chrome Frame and the Web platform more

00:00:19.170 --> 00:00:23.240
generally.
Just kind of a little gut check. How many

00:00:23.240 --> 00:00:24.689
of have heard of Chrome Frame already? Wow,
holy cow. I thought nobody had. That's awesome.

00:00:24.689 --> 00:00:33.660
How many of you are either sending the metatag
or the headers in your sites or are prompting

00:00:33.660 --> 00:00:44.690
your users to install Chrome Frame today?
Okay. All right. Cool. So there is some new

00:00:44.690 --> 00:00:47.519
stuff to cover.
I think it is important when we talk about

00:00:47.519 --> 00:00:53.199
browser technology to kind of get a sense
for how it is that we got to exactly where

00:00:53.199 --> 00:01:02.989
we are today because it is not entirely clear
that the browser world would have evolved

00:01:02.989 --> 00:01:06.760
the way it has if it has been left to its
own devices.

00:01:06.760 --> 00:01:09.160
In the early '90s, when browsers were a new
thing, when people were first getting online,

00:01:09.160 --> 00:01:10.370
people changed their browsers a lot, right?
I don't know about you, but I remember getting

00:01:10.370 --> 00:01:15.550
a lot of CDs in the mail which would give
me a free copy of Netscape Navigator 3.2 Gold

00:01:15.550 --> 00:01:20.720
if I only signed up for so and so's online
service. And that was pretty good. I could

00:01:20.720 --> 00:01:27.890
get a free browser, having to, you know, take
myself down to CompUSA and buy myself a browser

00:01:27.890 --> 00:01:36.160
in shrink-wrap and install it from floppies.
So instead, we wound up in a place where browsers

00:01:36.160 --> 00:01:42.500
got free. The cheapest kind of free you can
get. There is competition among free browsers.

00:01:42.500 --> 00:01:49.930
And, in fact, things got so good, things got
so stable that users sort of, in many ways,

00:01:49.930 --> 00:01:52.840
stopped having to expect that they had to
go hunt for a browser.

00:01:52.840 --> 00:01:59.501
And so by the end of the late '90s and early
2000s, we were at a place where we sort of

00:01:59.501 --> 00:02:05.500
-- I call them kind of like the ice ages of
the browser wars. Netscape 4 had lost. IE

00:02:05.500 --> 00:02:09.920
had won. And for all intents and purposes,
the Web was on the desktop. That's where the

00:02:09.920 --> 00:02:16.450
Web was.
And so in the mid 2000s, we saw IE6 sort of

00:02:16.450 --> 00:02:22.640
take the crown. IE6 went to Gold Master in
2001, if you can remember that far back.

00:02:22.640 --> 00:02:30.540
And that was the shipping best browser you
could get for most folks from 2001 to 2006.

00:02:30.540 --> 00:02:39.519
FireFox came along and the Mozilla Foundation
did a great job to inject some competition

00:02:39.519 --> 00:02:44.950
into the browser space. From 2006 till now,
we've had this great thaw, right? It went

00:02:44.950 --> 00:02:55.480
from 90 plus percent IE6 as the dominant browser
in the world to a really diverse way of looking

00:02:55.480 --> 00:03:01.210
at how I, as a user, can experience the Web.
It is not just "I can pick this browser or

00:03:01.210 --> 00:03:04.840
that browser." Browsers give me a lot of options.
They give me plug-ins. They give me extensions.

00:03:04.840 --> 00:03:08.569
They give me applications.
Browsers have turned into in many ways the

00:03:08.569 --> 00:03:13.159
full embodiment of an operating system. And
Chrome OS is a great example of exactly that.

00:03:13.159 --> 00:03:17.519
The manifest destiny of a browser is in many
ways to sort of make all the hardware and

00:03:17.519 --> 00:03:21.439
software that's available in your computer
accessible to Web developers and then make

00:03:21.439 --> 00:03:27.139
that possible for you to experience great
applications in a safe, secure and portable

00:03:27.139 --> 00:03:32.579
way. And so we're in a place now where that
promise is being delivered upon by the best

00:03:32.579 --> 00:03:35.989
browsers.
FireFox 4 is a great example. Chrome, I like

00:03:35.989 --> 00:03:40.629
to think, is a great example. Opera, Safari,
IE9, they are all doing a great job of delivering

00:03:40.629 --> 00:03:45.329
a lot of the power that has been sitting latent
inside of our computers for a very long time,

00:03:45.329 --> 00:03:50.829
things like the file API, things like Canvas,
things like SVG. They are making it possible

00:03:50.829 --> 00:03:56.409
to take advantage of the hardware that's down
there, WebGL. Those things are making it possible

00:03:56.409 --> 00:04:00.579
to consider building entirely new types of
applications on the Web, things you just couldn't

00:04:00.579 --> 00:04:03.029
do because you didn't have access to the underlying
capacity before.

00:04:03.029 --> 00:04:10.379
HTML5 is sort of the vehicle for that. And
like any great thaw, things don't just necessarily

00:04:10.379 --> 00:04:14.010
all get better at once. The future isn't evenly
distributed yet.

00:04:14.010 --> 00:04:18.910
So what we are seeing here is the newest,
latest browsers have this incredible capacity

00:04:18.910 --> 00:04:23.620
to change the types and style of application
that you build. The way that you construct

00:04:23.620 --> 00:04:27.410
your applications can be fundamentally different.
You can stop looking back over your shoulder

00:04:27.410 --> 00:04:33.150
if you can ignore old browsers.
Well, things are really great in some parts

00:04:33.150 --> 00:04:37.120
of the world where you can do exactly that.
We are not necessarily burdened by the legacy

00:04:37.120 --> 00:04:44.790
of Browser War 1 fought a long time ago.
In the mobile world, like your new shiny tablets,

00:04:44.790 --> 00:04:49.410
CSS3 transitions and animations are sort of
de rigueur. They are the kind of thing where

00:04:49.410 --> 00:04:53.430
people don't talk about how awesome it is
that you have them now, they start talking

00:04:53.430 --> 00:04:57.680
about how they can be so much better. They
are sort of expected. They are not a thing

00:04:57.680 --> 00:04:59.860
you are trying to shim in with a little bit
of JavaScript.

00:04:59.860 --> 00:05:04.620
Gradients, rounded corners, you don't think
about slicing stuff up in fireworks anymore

00:05:04.620 --> 00:05:05.710
to go build a rounded corner. Nobody does
that. Instead, you just use the CSS rule that

00:05:05.710 --> 00:05:13.759
gives it to you for free, which is great but
for performance and for your ability to design

00:05:13.759 --> 00:05:16.050
and iterate quickly.
Better JavaScript implementations are making

00:05:16.050 --> 00:05:22.270
it so that when we do need to go ask JavaScript
to give us what we can't get in HTML and CSS

00:05:22.270 --> 00:05:27.740
natively, we can do it with a lot more assurance
that it is not going to slow down our pages

00:05:27.740 --> 00:05:30.270
of run time.
And at the same time, we're getting the ability

00:05:30.270 --> 00:05:38.560
to get to brand-new types of capacity for
expressing what we mean in the APIs and in

00:05:38.560 --> 00:05:42.319
the platform through new APIs like audio and
video and Canvas. Things that once required

00:05:42.319 --> 00:05:45.970
plug-ins weren't possible to do at all.
So the mobile world is moving really, really

00:05:45.970 --> 00:05:49.889
fast because users upgrade their handsets
relatively frequently. Once every 24 months

00:05:49.889 --> 00:05:55.379
in the United States, maybe a little bit better.
That means that the longest that you are going

00:05:55.379 --> 00:06:00.280
to have to think about a bad browser in the
first world is about two years. A new browser

00:06:00.280 --> 00:06:04.510
that ships today is going to be out of circulation
in a couple of years in the handset world.

00:06:04.510 --> 00:06:08.930
In the mobile world, that's really great.
It is very difficult to sort of think about

00:06:08.930 --> 00:06:13.150
how the desktop world would look if it was
like that because it is not anything like

00:06:13.150 --> 00:06:15.000
that.
We're still thinking about a browser today.

00:06:15.000 --> 00:06:20.680
I don't know about you. But in many major
applications, it is still a tough decision

00:06:20.680 --> 00:06:25.310
to make about whether or not you are still
going to consider IE6 or IE7. These are browsers

00:06:25.310 --> 00:06:31.849
that came along almost a decade ago.
So things are really good on the desktop in

00:06:31.849 --> 00:06:36.039
some areas, too. Again, the thaw doesn't happen
all in one place all at once. You get these

00:06:36.039 --> 00:06:39.639
kettles and moraines while you still have
a standing glacier in some parts of the world.

00:06:39.639 --> 00:06:44.699
We have got really fast processors on the
desktop. We have better network available.

00:06:44.699 --> 00:06:48.349
We've got WebGL and Web audio. A lot of these
things are starting to show up really fast

00:06:48.349 --> 00:06:53.270
on the desktop because browsers that are auto-updating
are moving even faster than the mobile world

00:06:53.270 --> 00:06:58.060
does. We can get new versions of Chrome out
to users in the time that I thought was completely

00:06:58.060 --> 00:07:02.780
impossible.
We did a study a couple of years ago about

00:07:02.780 --> 00:07:07.780
the auto-update rates with regards to security
for Chrome. And what we saw was because of

00:07:07.780 --> 00:07:12.939
the auto-update system in Chrome, we are able
to get 90-plus percent of users up to date

00:07:12.939 --> 00:07:14.780
within a week of a launch of a new update,
which is really amazing.

00:07:14.780 --> 00:07:18.389
It means if you are targeting the Chrome Web
store or you are targeting one of these other

00:07:18.389 --> 00:07:22.129
areas where we are moving fast, you can start
to take advantage of this new stuff, too.

00:07:22.129 --> 00:07:26.940
That only is true if you can ignore the old
stuff. The new stuff is great. Mr. Doob builds

00:07:26.940 --> 00:07:30.360
these amazing demos. This is WebGL. Can you
believe it? This is actually running in slides

00:07:30.360 --> 00:07:39.530
in HTML in my browser. This is an iFrame.
This is not a trick. This is not a video.

00:07:39.530 --> 00:07:44.229
So how do we liberate ourselves to take advantage
of this? Because this is sort of the white

00:07:44.229 --> 00:07:49.599
elephant. This is the thing that gave us the
huge gift of JavaScript. It gave us an impressive

00:07:49.599 --> 00:07:54.289
amount of new APIs back when the browser wars
were first being fought. But IE is now sort

00:07:54.289 --> 00:07:57.520
of the thing that may be holding us back in
some senses.

00:07:57.520 --> 00:08:04.370
If we look at this today, a lot of sites report
about 50% IE usage broadly writ. Your sites

00:08:04.370 --> 00:08:09.819
are probably going to be very different than
that. Your usage may be closer to 100% if

00:08:09.819 --> 00:08:15.469
it is an old line enterprise. It may be closer
to 0% if you are a new media blog or something.

00:08:15.469 --> 00:08:19.319
We see this huge divergence.
Generally speaking, if I'm developing an application

00:08:19.319 --> 00:08:23.900
for sale or for consumption by a population
that I don't know, a bunch of people who may

00:08:23.900 --> 00:08:30.270
be buying my app off the shelf or through
a distributor, I have to still count on IE

00:08:30.270 --> 00:08:32.230
being available someplace. I can't just turn
those users away.

00:08:32.230 --> 00:08:38.469
Today that 50% is primarily composed of IE6,
7 and 8. IE9 was just released. It is a great

00:08:38.469 --> 00:08:43.029
browser. At the same time, it is not widely
available. It isn't being auto updated at

00:08:43.029 --> 00:08:47.010
the same rates that Chrome is.
So IE8 is the end of the line for Windows

00:08:47.010 --> 00:08:52.580
XP as well. It is not just we have 50% of
the world's users on Windows XP and 50% of

00:08:52.580 --> 00:08:59.930
the world's users on IE. It is that half of
those IE users, 25% of the world's users are

00:08:59.930 --> 00:09:05.459
going to be on XP which means that they're
not going to be able to get IE9. They are

00:09:05.459 --> 00:09:07.930
not going to be able to see all this amazing
stuff.

00:09:07.930 --> 00:09:12.889
25% of the world is a lot. I don't know about
you, but I can't write a new application and

00:09:12.889 --> 00:09:18.480
sort of ignore 25%. So Windows XP is 50%,
right? That's where the deployed base is today.

00:09:18.480 --> 00:09:23.990
How good is the decay rate? If we look back
and see how IE has been doing generally, well,

00:09:23.990 --> 00:09:30.320
that's going to be a long time, if our goal
is to stop thinking about that.

00:09:30.320 --> 00:09:34.120
So let's look at Windows Vista and Windows
7, right? So in four years, they have gone

00:09:34.120 --> 00:09:39.070
from 0 to 35% of the market. At this point,
you might be thinking to yourself, four years,

00:09:39.070 --> 00:09:43.339
that's pretty good, 35%. But I don't know
about you, I don't want to be thinking about

00:09:43.339 --> 00:09:50.970
IE8 in another four years. I want to be thinking
about IE12 or Chrome 47, whatever it is going

00:09:50.970 --> 00:09:52.220
to be.
[ Laughter ]

00:09:52.220 --> 00:09:57.740
So we have a problem. Okay. We've got this
legacy burden. We don't necessarily have a

00:09:57.740 --> 00:10:03.060
fast path to get out of it. We need some way
to continue to deliver these really compelling

00:10:03.060 --> 00:10:07.340
experiences. And we need to be able to break
the desktop Web free of the constraints. In

00:10:07.340 --> 00:10:11.620
the same way that we've broken the mobile
free of the constraints by thinking about

00:10:11.620 --> 00:10:14.330
legacy browsers.
Part of this is about giving ourselves permission

00:10:14.330 --> 00:10:18.740
to think about HTML5. As you sit down to build
an application, there is some capabilities

00:10:18.740 --> 00:10:22.810
that have allegories in JavaScript libraries
or they can be shimmed in with polyfills.

00:10:22.810 --> 00:10:29.510
Those are the sorts of things that you can
use in a degradable way if the semantic of

00:10:29.510 --> 00:10:33.839
HTML is close enough to what it is you were
trying to say in HTML5 or in the new stuff.

00:10:33.839 --> 00:10:37.300
There's a whole series capabilities, things
that are fundamentally new to the platform,

00:10:37.300 --> 00:10:39.570
things like WebGL, that don't have an allegory.
There is no fallback for WebGL. There is no

00:10:39.570 --> 00:10:42.680
degraded view of it. There is no semantic
WebGL.

00:10:42.680 --> 00:10:48.730
So the result is you are going to be making
more and more hard decisions about delivering

00:10:48.730 --> 00:10:54.380
and using new capabilities in the platform
as you move forward. So we want to give ourselves

00:10:54.380 --> 00:10:59.139
permission to use HTML5. And that means giving
our customers permission to give us permission

00:10:59.139 --> 00:11:03.430
to use HTML5.
We need them to consider HTML5 to be a viable

00:11:03.430 --> 00:11:07.459
option for an application delivery platform
which means we need them to be able to run

00:11:07.459 --> 00:11:11.490
browsers that can do that.
Well, that's a long slog to. As we have seen

00:11:11.490 --> 00:11:17.839
before in the upgrade for Netscape 4, enterprises
and large IT organizations move slowly. They

00:11:17.839 --> 00:11:22.090
move in large chunks, but they move slowly.
So we want to make sure we can continue to

00:11:22.090 --> 00:11:28.839
build new apps without necessarily being hamstrung
by the slowest movers in the pack so that

00:11:28.839 --> 00:11:34.440
we can build really compelling experiences
that drag the tailing edge of the envelope

00:11:34.440 --> 00:11:37.949
up closer to the front so everybody gets the
new shiny, faster, which is what we want.

00:11:37.949 --> 00:11:43.950
We want auto-updating browsers everywhere.
And Google Chrome Frame can help.

00:11:43.950 --> 00:11:49.220
So Google Chrome Frame, for those of you who
aren't familiar with it, is a bridge of sorts.

00:11:49.220 --> 00:11:52.829
Instead of asking users to replace their browser
or asking IT organizations to run two browsers

00:11:52.829 --> 00:11:58.470
side by side, Google Chrome Frame puts the
power of Google Chrome inside of Internet

00:11:58.470 --> 00:12:03.660
Explorer, not for every page, not all the
time. But it puts it there only when you ask

00:12:03.660 --> 00:12:08.149
it to be enabled and it falls back easily.
It renders entire pages in Chrome's rendering

00:12:08.149 --> 00:12:13.380
engine, not just a little cut-out portion
of the page. You opt in your entire page to

00:12:13.380 --> 00:12:20.120
it, which means that it is always opt in and
it is one line to add it to your site.

00:12:20.120 --> 00:12:24.530
Chrome Frame strives to be completely seamless,
though, so that users don't necessarily know

00:12:24.530 --> 00:12:29.630
that they are being asked to view something
through a plug-in. Things fall back to the

00:12:29.630 --> 00:12:32.449
IE rendering engine if Chrome Frame isn't
there.

00:12:32.449 --> 00:12:38.750
So as a result of our focus on delivering
a seamless upgrade to the user experience,

00:12:38.750 --> 00:12:42.670
Chrome Frame has to share the network cache.
It has to share cookies. It has to share a

00:12:42.670 --> 00:12:48.570
lot of the space including things like clearing
your caches or privacy management with IE.

00:12:48.570 --> 00:12:53.639
So when you log in on a page that didn't have
Chrome Frame enabled and you go to a page

00:12:53.639 --> 00:12:58.529
that does, the cookies that were issued to
you in that process work in both places simultaneously.

00:12:58.529 --> 00:13:04.051
Chrome Frame tries really hard to make sure
that something that happens in regular IE

00:13:04.051 --> 00:13:07.449
is going to continue to work in Chrome Frame
and vice versa, that you're not going to see

00:13:07.449 --> 00:13:15.699
chosen protocols or hacker security issues.
So how does it work? So those of you who -- That's

00:13:15.699 --> 00:13:26.459
what I get for being emphatic. So for those
of you who aren't really great at reading

00:13:26.459 --> 00:13:30.579
these diagrams, let me explain this.
So the top block here is the process that

00:13:30.579 --> 00:13:35.070
is Internet Explorer. When you launch Internet
Explorer or you launch any browser, it creates

00:13:35.070 --> 00:13:41.079
a process on your desktop. That browser process
does a lot of stuff. In Chrome, it creates

00:13:41.079 --> 00:13:44.819
a process which manages other processes. And
in many amount of browsers, that happens,

00:13:44.819 --> 00:13:48.199
too. IE8, IE9 all have the same sort of multi-process
architecture.

00:13:48.199 --> 00:13:55.949
So there is a browser process which manages
the task of getting network resources, handing

00:13:55.949 --> 00:13:59.421
them back to the thing that's actually going
to render them. And what Chrome Frame does,

00:13:59.421 --> 00:14:04.459
instead of using the native MSHTML control
for rendering them, it hands that content

00:14:04.459 --> 00:14:09.319
back down to a Chrome browser process which,
again, has a multi-process system inside of

00:14:09.319 --> 00:14:15.710
it. We get the advantages of Chrome Sandboxing,
reliability, automatically updated plug-ins

00:14:15.710 --> 00:14:20.589
with Flash. Those sorts of advantages all
happen when you enable Google Chrome Frame

00:14:20.589 --> 00:14:24.600
and only a small portion of the system lives
inside of the host browser. We don't start

00:14:24.600 --> 00:14:30.410
up the Chrome process until your page asks
for it to start up.

00:14:30.410 --> 00:14:34.759
Chrome Frame delivers speed as a primary feature.
We have always thought that speed is a primary

00:14:34.759 --> 00:14:38.149
feature for Chrome, and it is a primary feature
for Chrome because it is a primary feature

00:14:38.149 --> 00:14:44.850
for your apps. V8 helps your JavaScript go
faster. It parses, runs and executes JavaScript

00:14:44.850 --> 00:14:48.470
very quickly, indeed.
And Chrome Frame is able to deliver some network

00:14:48.470 --> 00:14:53.870
optimizations that aren't available normally
on IE for things like automatically prescanning

00:14:53.870 --> 00:15:00.009
the documents as they are being loaded to
go fetch DNS requests more quickly.

00:15:00.009 --> 00:15:04.290
We can bump the number of network connections
that are available to pages even in IE6.

00:15:04.290 --> 00:15:09.069
And so a whole set of things are available
to you through Chrome Frame that make your

00:15:09.069 --> 00:15:15.339
apps faster. And, in fact, Gmail today now
supports Chrome Frame. If you have Chrome

00:15:15.339 --> 00:15:19.470
Frame installed on IE and you visit Gmail,
you are probably going to be seeing that page

00:15:19.470 --> 00:15:21.920
rendered with Chrome Frame.
The easiest way to tell if the page is being

00:15:21.920 --> 00:15:26.351
rendered in Chrome Frame is to right click
on it and see if the About Google Chrome Frame

00:15:26.351 --> 00:15:30.449
or Inspect Element right click menus show
up. Otherwise, you might not know.

00:15:30.449 --> 00:15:35.360
But for the users who have it, we are seeing
that in lab tests Gmail is running 30% faster

00:15:35.360 --> 00:15:39.790
for those users on average even on high latency
connections. It is a significant improvement

00:15:39.790 --> 00:15:43.820
and it is the sort of thing we think we might
be able to do for your apps, too.

00:15:43.820 --> 00:15:48.790
But as I mentioned earlier, it is not clear
that that's always a win. We have to sort

00:15:48.790 --> 00:15:54.121
at the Chrome process when we launch a document
that's going to be rendered in Chrome Frame.

00:15:54.121 --> 00:15:59.819
That can take a little bit of time. So the
performance question isn't necessarily, Yes,

00:15:59.819 --> 00:16:02.911
it is always faster and, No, it is not always
faster. We have to start the browser process.

00:16:02.911 --> 00:16:06.709
We have to start the rendering process. We
are buffering at the same time, which helps

00:16:06.709 --> 00:16:13.089
in that case. It doesn't slow us down necessarily.
But we have this window where Chrome starting

00:16:13.089 --> 00:16:16.220
up might slow down the overall loading of
your application, particularly if it is small

00:16:16.220 --> 00:16:19.899
or simple.
So testing your application, because opting

00:16:19.899 --> 00:16:24.029
in has been so easy, traditionally has been
one line. You can put this behind a flag.

00:16:24.029 --> 00:16:26.980
You can toggle it. You can run your performance
tests.

00:16:26.980 --> 00:16:31.259
Getting a page to opt into Chrome Frame when
it is available is just sending one HTTP header

00:16:31.259 --> 00:16:34.740
or one metatag toward the top of your page
and that's it. That's really simple.

00:16:34.740 --> 00:16:40.259
But what about for apps that don't have -- where
you don't have the source code to or you are

00:16:40.259 --> 00:16:44.790
trying to test out Chrome Frame against somebody
else's application or an old version of yours

00:16:44.790 --> 00:16:52.370
to see how fast you can go? We added a registry
key in the last year or so that gives us the

00:16:52.370 --> 00:16:55.040
ability to turn Chrome Frame into the default
renderer.

00:16:55.040 --> 00:16:59.300
As I said earlier, Chrome Frame is only enabled
for pages that opt into it with one of those

00:16:59.300 --> 00:17:06.089
two tags, that HTTP tagger or the metatag.
Many users asked us for a way to say, Hey,

00:17:06.089 --> 00:17:09.440
I love Chrome Frame. I have only got a couple
of pages that I still want to see rendered

00:17:09.440 --> 00:17:14.079
in IE. There's some legacy application. I
want to change that default policy. So the

00:17:14.079 --> 00:17:18.250
Chrome Frame default policy hasn't changed,
but you can change it yourself with the registry

00:17:18.250 --> 00:17:23.650
setting which says "is default renderer 1."
In this case, Chrome Frame will be the way

00:17:23.650 --> 00:17:26.189
that all pages that you browse to in IE are
rendered more or less, unless you specifically

00:17:26.189 --> 00:17:32.450
configure a list of other options which are
available to you.

00:17:32.450 --> 00:17:36.390
But we send Chrome's user agent and not IE's.
Traditionally speaking, when Chrome Frame

00:17:36.390 --> 00:17:41.720
renders a page, we send IE'S user agent string
with the appended word "Chrome Frame" and

00:17:41.720 --> 00:17:45.730
then a version number you can detect on the
server side whether or not Chrome Frame is

00:17:45.730 --> 00:17:49.659
available for you to send different content
to, if you are doing content sniffing or user

00:17:49.659 --> 00:17:54.670
agent sniffing, which many large sites do.
But in this case, in order for it to be seamless,

00:17:54.670 --> 00:17:57.830
we want to send Chrome's user agent string.
It turns out this is the easiest way for you

00:17:57.830 --> 00:18:00.810
to test whether or not your site is going
to work in Chrome Frame, without even opting

00:18:00.810 --> 00:18:05.220
into it on the server side. You can just toggle
this flag in the client, reload the site and

00:18:05.220 --> 00:18:08.549
see that your pages are rendered in Chrome
Frame, run your performance tests and understand

00:18:08.549 --> 00:18:10.799
how that's going to impact things, which is
pretty good.

00:18:10.799 --> 00:18:15.290
If you happen to have a lot of VMs up and
running that you have juggled that IE 6, 7

00:18:15.290 --> 00:18:17.230
and 8 and Chrome Frame installed on all of
them, you can set this flag and then see how

00:18:17.230 --> 00:18:21.770
it is going to do side by side - side by side
how it will impact the load times and run

00:18:21.770 --> 00:18:30.320
times of your applications.
Well, that's pretty good, but it is not great.

00:18:30.320 --> 00:18:32.230
It still means you have to have these VMs
or you have to have physical boxes that have

00:18:32.230 --> 00:18:37.370
all of these different versions of browsers.
It is sort of a testing burden. And so if

00:18:37.370 --> 00:18:38.809
you haven't used Pat Meenan's Web Page Test,
I recommend you start using it for your performance

00:18:38.809 --> 00:18:46.450
testing. He is now at Google, but he started
this project when he was at AOL. It is a fantastic

00:18:46.450 --> 00:18:51.549
resource for understanding exactly what's
happening when you load a page. And so thanks

00:18:51.549 --> 00:18:57.289
to the team that works on webpagetest.org,
particularly Pat Meenan. There is now experimental

00:18:57.289 --> 00:19:01.390
support for Google Chrome Frame which means
that when you navigate to Web Page Test in

00:19:01.390 --> 00:19:15.710
certain data centers and you navigate to Web
Page Test -- ah, yes -- it will look like

00:19:15.710 --> 00:19:21.659
this. And you will see in the Dulles, Virginia
data center, there is now an option at the

00:19:21.659 --> 00:19:27.559
bottom here for Chrome Frame, which means
you can run -- test your sites on Chrome Frame

00:19:27.559 --> 00:19:33.460
with IE6 as the host browser and see how they
perform. So I'm not going to do that right

00:19:33.460 --> 00:19:39.740
now.
But you can type in any Web site. I will try

00:19:39.740 --> 00:19:48.470
my blog. And if you click on "advanced settings,"
you can even get video and see a side-by-side

00:19:48.470 --> 00:19:52.539
or start to see a set of screen shots that
are taken as your page is loaded in this browser

00:19:52.539 --> 00:19:58.870
to sort of understand visually what's happening
when you load. It is a great tool. You can

00:19:58.870 --> 00:20:03.530
change the available bandwidths, and you can
test in a series of bandwidth scenarios and

00:20:03.530 --> 00:20:08.330
you get waterfalls and a huge amount of information
about making your pages faster. So that's

00:20:08.330 --> 00:20:13.000
great. Web Page Test will now allow you to
compare before and after with or without Chrome

00:20:13.000 --> 00:20:17.179
Frame. That's awesome.
So let's see how it works on a real web page,

00:20:17.179 --> 00:20:20.260
right?
So we've done -- we've run a couple of these

00:20:20.260 --> 00:20:25.380
tests, and we -- webpagetest, by default,
clears its cache between runs but it does

00:20:25.380 --> 00:20:30.159
give you as many runs of this test as you'd
like and it will let you see what that page

00:20:30.159 --> 00:20:35.310
will look like with or without a warm cache.
So TechCrunch, for instance, is just a content

00:20:35.310 --> 00:20:41.360
site, right? It's not a big web app like,
say, Gmail. It's a content site. And as a

00:20:41.360 --> 00:20:44.580
result, you might think that Chrome Frame
might not have a lot to offer. We spent a

00:20:44.580 --> 00:20:48.409
lot of time speeding up Chrome, but because
V8 isn't going to be the thing that's going

00:20:48.409 --> 00:20:52.760
to be the bottleneck here, or JavaScript per
se, you might expect that Chrome Frame might

00:20:52.760 --> 00:20:57.080
not be able to help you out.
At the top, we've got TechCrunch rendering

00:20:57.080 --> 00:21:02.270
under IE8. It doesn't render really well under
IE7 or 6, so we're going to give them the

00:21:02.270 --> 00:21:06.480
benefit of the doubt, render it under IE8.
At the bottom, we've got TechCrunch being

00:21:06.480 --> 00:21:14.010
rendered under Chrome Frame on IE6, so what
we've got here is a little bit of delay for

00:21:14.010 --> 00:21:18.270
Chrome Frame to start up, but then once it
loads, it's effectively done loading significantly

00:21:18.270 --> 00:21:26.420
faster than IE. So we're done at 17 1/2 seconds
and we can keep going, keep going, keep -- okay.

00:21:26.420 --> 00:21:34.900
Yes. There we are.
So Chrome Frame has huge value in potentially

00:21:34.900 --> 00:21:40.419
simple scenarios where you might think that
there's not a lot to gain from opting into

00:21:40.419 --> 00:21:43.080
a different mode.
And the same thing is true of a cache, which

00:21:43.080 --> 00:21:48.880
is actually a fascinating point.
You might think that this is network-bound,

00:21:48.880 --> 00:21:53.539
that Chrome Frame can do a bunch of better
things in the network. It turns out -- it's

00:21:53.539 --> 00:21:57.480
coming.
It turns out that Chrome Frame is able to

00:21:57.480 --> 00:22:01.440
do better just at rendering web pages than
older browsers are. Modern browsers of every

00:22:01.440 --> 00:22:06.330
kind have a big leg up. They're built to different
constraints. They're built in a world where

00:22:06.330 --> 00:22:12.100
you can assume that you have faster processors
and more memory, and so as a result, we do

00:22:12.100 --> 00:22:18.920
significantly better, again, than stock versions
of IE.

00:22:18.920 --> 00:22:22.470
So webpagetest.org is a great way to do this.
It's a great way to understand the performance

00:22:22.470 --> 00:22:26.080
of your site and understand the performance
impact of Chrome Frame with regards to your

00:22:26.080 --> 00:22:29.080
site.
So I don't know about you, but at Google latency

00:22:29.080 --> 00:22:34.860
is everything and if latency is a lot to your
application, then Chrome Frame might be able

00:22:34.860 --> 00:22:39.659
to help.
So we've spent a lot of time on the performance

00:22:39.659 --> 00:22:44.691
aspects, trying to get Chrome Frame to work
seamlessly with regards to the host browser

00:22:44.691 --> 00:22:49.880
so things like security and privacy aren't
an issue, improving the performance of your

00:22:49.880 --> 00:22:53.289
applications, making sure that users aren't
shocked when Chrome Frame isn't available.

00:22:53.289 --> 00:22:59.860
We have this nice fallback, making it easy
for you to do incremental upgrades to Chrome

00:22:59.860 --> 00:23:05.370
Frame, like many sites -- like Yahoo do, where
Yahoo.com now sends the Chrome Frame header

00:23:05.370 --> 00:23:09.670
and meta-tag and that means that they're not
asking their users to install it, but if it's

00:23:09.670 --> 00:23:14.980
available, if Chrome Frame is installed, it
will flip into the Chrome Frame mode when

00:23:14.980 --> 00:23:19.440
it's there, and if it's not, you just get
the default fallback rendering. So for Yahoo.com

00:23:19.440 --> 00:23:23.960
and for a lot of other big sites, you can
opportunistically take advantage of the users

00:23:23.960 --> 00:23:27.919
who already have Chrome Frame. And it's a
one-line change so we designed this to make

00:23:27.919 --> 00:23:31.900
it as seamless and easy for you to add to
your application as possible. And we've done

00:23:31.900 --> 00:23:35.020
a lot of work in the install flow to make
sure that Chrome Frame gets out of the way,

00:23:35.020 --> 00:23:38.030
because the important part isn't Chrome Frame.
It's your application, right? We want you

00:23:38.030 --> 00:23:44.059
to be able to build HTML5 applications that
work everywhere, that work well, but without

00:23:44.059 --> 00:23:48.440
having to get in front of your user asking
them to restart their browser, asking them

00:23:48.440 --> 00:23:54.470
to do something that feels unnatural.
And we've built scripts and we've built infrastructure

00:23:54.470 --> 00:23:59.470
to help you prompt your users when you do
build something like a WebGL based application

00:23:59.470 --> 00:24:05.429
that doesn't have a fallback, that can't easily
be incrementally upgraded to the latest HTML5

00:24:05.429 --> 00:24:08.549
stuff.
So CF install gives you a simple way, if you've

00:24:08.549 --> 00:24:14.200
checked the Chrome Frame documentation, to
build an overlay, something that detects whether

00:24:14.200 --> 00:24:20.390
or not you'd like Chrome Frame to be used
based on a series of feature flags, and if

00:24:20.390 --> 00:24:25.370
Chrome Frame is something that you want for
your users to have enabled, CF install will

00:24:25.370 --> 00:24:29.210
prompt and run you through this installation
flow, returning your users to that page directly,

00:24:29.210 --> 00:24:32.690
but it does come at the cost of prompting
your users.

00:24:32.690 --> 00:24:37.750
So to help understand how we can make Chrome
Frame more seamless, I'd like to bring Amit,

00:24:37.750 --> 00:24:39.799
my colleague, back up.
[Applause]

00:24:39.799 --> 00:24:51.150
&gt;&gt;Amit Joshi: Thanks, Alex.
So CF install is quite useful and it will

00:24:51.150 --> 00:24:57.440
allow your sites to create URLs for install
prompts. However, a lot of sites want more

00:24:57.440 --> 00:25:03.429
control over how to present users an install
prompt. They want their own -- they want to

00:25:03.429 --> 00:25:09.010
show their own branding.
So there has been a request from several developers

00:25:09.010 --> 00:25:18.170
to allow them to do that, provide their own
UI, and basically have an install flow where

00:25:18.170 --> 00:25:23.770
users are redirected back, right after the
install, to their own apps.

00:25:23.770 --> 00:25:27.789
So we did this for a few customer apps, like
Orkut and Wave, and I'm not sure if you can

00:25:27.789 --> 00:25:37.500
see that but there is a Chrome Frame prompt
right in the middle of the app.

00:25:37.500 --> 00:25:47.409
And what happens here is a user clicks here,
goes to the install flow, and after install,

00:25:47.409 --> 00:25:51.270
the user is redirected right back to Orkut,
in this case.

00:25:51.270 --> 00:25:55.020
Now, I'm very happy to announce that this
is now available for everyone. All they have

00:25:55.020 --> 00:26:03.190
to do is create a custom prompt like Orkut
did, and point it to this URL. And as you

00:26:03.190 --> 00:26:07.610
can see, there is no script needed. After
the install, the user is redirected right

00:26:07.610 --> 00:26:18.260
back to the referring page.
So that should allow you to create install

00:26:18.260 --> 00:26:21.929
prompts, you know, where you want to show
users with your own branding and it could

00:26:21.929 --> 00:26:28.850
be pretty seamlessly.
We're thinking how we can further simplify

00:26:28.850 --> 00:26:38.140
the install process. Maybe shorten it a little
bit, because downloading an install is a time-consuming

00:26:38.140 --> 00:26:43.929
process, and we are thinking we have like
120 million Chrome active users and a lot

00:26:43.929 --> 00:26:48.930
more installs that are not active, that are
just sitting there, and so -- and the thing

00:26:48.930 --> 00:26:57.360
about those installs is, Chrome Frame is part
of Chrome. A lot of infrastructure that Chrome

00:26:57.360 --> 00:27:04.590
Frame uses is already there on a Chrome install,
so why not use that directly.

00:27:04.590 --> 00:27:09.990
So I'm very excited to announce we have a
mode where we can leverage all those existing

00:27:09.990 --> 00:27:15.701
Chrome installs to provide you even a quicker
way of installing Chrome Frame.

00:27:15.701 --> 00:27:21.770
Basically, totally avoiding download and kind
of just a quick enable.

00:27:21.770 --> 00:27:29.779
So let's see how that works.
So I have a VM here with -- as you can see,

00:27:29.779 --> 00:27:31.309
this is Chrome installs. You can probably
see from the icon.

00:27:31.309 --> 00:27:38.240
And let's see how the install flow look like
in this case.

00:27:38.240 --> 00:27:43.990
I am going to -- I've launched IE. I'm going
to the Chrome Frame download page.

00:27:43.990 --> 00:27:51.019
When I usually go there, I get a "Download
Chrome Frame Now" button, but if you can see

00:27:51.019 --> 00:27:54.230
this now, what I see instead is an "Activate
Google Chrome Frame."

00:27:54.230 --> 00:28:01.260
So what has happened is the page has detected
that Chrome is already present here and it

00:28:01.260 --> 00:28:05.190
can be instantly activated, so I'll just follow
through this flow.

00:28:05.190 --> 00:28:11.090
So "Accept and Install" becomes "Accept and
Activate."

00:28:11.090 --> 00:28:18.780
And 
so this will kick off the installer. As you

00:28:18.780 --> 00:28:28.440
can see, there is no downloading Chrome Frame.
It is basically using the existing part of

00:28:28.440 --> 00:28:31.940
installer -- it is using the existing installer
that is already there on the machine and converting

00:28:31.940 --> 00:28:42.730
it to enable Chrome Frame.
So -- right. And once this is done, this was

00:28:42.730 --> 00:28:50.120
configured with redirecting back to Orkut,
and as you can see, this thing is loaded in

00:28:50.120 --> 00:28:55.299
Chrome Frame, so instead of you getting the
Internet Explorer menu, you get the Chrome

00:28:55.299 --> 00:28:59.730
Frame menu and you can see about Chrome Frame
here.

00:28:59.730 --> 00:29:07.710
So Chrome Frame is pretty seamless. It loads,
and if your app prompts Chrome Frame using

00:29:07.710 --> 00:29:15.090
this way, as you can see the install happens
quickly and the user gets right back at the

00:29:15.090 --> 00:29:28.140
referring page that is your app.
So one other concern developers have regarding

00:29:28.140 --> 00:29:35.529
Chrome Frame is Chrome Frame is a plug-in
and it needs admin rights to install.

00:29:35.529 --> 00:29:41.540
So a common question is if I start prompting
users to install, it's fine if people have

00:29:41.540 --> 00:29:46.320
Chrome and in that case the flow is pretty
smooth.

00:29:46.320 --> 00:29:50.559
What happens to others? What happens if users
are not administrators on their machine? How

00:29:50.559 --> 00:29:57.350
many -- how many users will I lose is the
underlying question. Internally, we found

00:29:57.350 --> 00:30:03.399
out that our installs are aborted about 30%
of the time due to lack of admin rights on

00:30:03.399 --> 00:30:12.610
a machine, so this was a pretty important
issue to solve, and I'm excited to announce

00:30:12.610 --> 00:30:18.670
today that we have a version of Chrome Frame
today, we're launching it today in dev channel,

00:30:18.670 --> 00:30:22.169
that does not require admin rights.
[Applause]

00:30:22.169 --> 00:30:39.320
&gt;&gt;Amit Joshi: Thank you.
So let's see how that works.

00:30:39.320 --> 00:30:44.750
So as you can see, this is a Windows 7 machine
and this is a user account control settings

00:30:44.750 --> 00:30:52.000
dialogue in which the UAC is set to always
notify, in which -- so if you want to do anything

00:30:52.000 --> 00:30:55.390
significant on the machine, you'll get a very
familiar UAC prompt.

00:30:55.390 --> 00:31:05.280
I'm going to launch IE, and so of course any
install on this machine is impossible without

00:31:05.280 --> 00:31:11.450
a UAC prompt, and if a user is not an admin
on this machine, I guess he wouldn't even

00:31:11.450 --> 00:31:15.240
get a UAC prompt and the install would just
fail silently.

00:31:15.240 --> 00:31:22.019
So you saw the Mr. Doob's demo, clouds demo,
from the slides. This is the latest version

00:31:22.019 --> 00:31:27.020
of Internet Explorer and see how that works
inside IE.

00:31:27.020 --> 00:31:33.990
Unfortunately, it needs WebGL, so you'll see
a prompt saying, "Sorry, your browser doesn't

00:31:33.990 --> 00:31:39.861
support WebGL. Please try with latest browser."
Now, I'm going to go to install Chrome Frame.

00:31:39.861 --> 00:31:46.850
So I go to the download page. Now there is
no Chrome install on this machine, so I get

00:31:46.850 --> 00:31:52.660
"Get Google Chrome Frame" as opposed to "Activate
Chrome Frame" that you just saw earlier.

00:31:52.660 --> 00:31:55.010
Click "Install," and this is the download
thing.

00:31:55.010 --> 00:32:01.250
Now it will download Chrome and it will go
through the install process.

00:32:01.250 --> 00:32:13.260
So 
being admin has been a major concern for a

00:32:13.260 --> 00:32:19.019
lot of developers, and we have hard it over
and over again, and, yeah, it's so good to

00:32:19.019 --> 00:32:23.740
be able to finally have a version of Chrome
Frame that doesn't need an admin.

00:32:23.740 --> 00:32:32.070
In fact, this was a major roadblock in delivering
the quick enable, because we always had all

00:32:32.070 --> 00:32:36.889
the infrastructure for Chrome Frame residing
in Chrome. Chrome and Chrome Frame are part

00:32:36.889 --> 00:32:41.720
of the same infrastructure. They share the
same installer. They share the same sort of

00:32:41.720 --> 00:32:46.169
binaries.
If you look at the diagram that Alex described,

00:32:46.169 --> 00:32:52.200
you can see Chrome Frame launches Chrome,
so it's just a small addition to Chrome.

00:32:52.200 --> 00:32:58.920
So we always wanted to do that, and having
this is a great missing piece that we were

00:32:58.920 --> 00:33:03.679
able to build on.
So the installation is complete.

00:33:03.679 --> 00:33:07.210
Now let's go back to the clouds demo and see
how that works.

00:33:07.210 --> 00:33:24.900
So we have Mr. Doob's clouds working in Internet
Explorer.

00:33:24.900 --> 00:33:30.210
So currently, the user of Chrome Frame is
available in dev channel and you will use

00:33:30.210 --> 00:33:37.750
this URL. If you don't see it far back, this
will be available on the slide. We'll also

00:33:37.750 --> 00:33:45.320
make a posting on Chrome Frame user forums
in case it's not clear.

00:33:45.320 --> 00:33:54.409
So with that, I'll invite Alex for -- to talk
about enterprise support.

00:33:54.409 --> 00:33:57.160
[Applause]
&gt;&gt;Alex Russell: Thanks, Amit.

00:33:57.160 --> 00:34:00.190
Thanks.
So what you just saw may sound amazing to

00:34:00.190 --> 00:34:04.221
you as a web developer, the ability to install
Chrome Frame, not have to restart your browser,

00:34:04.221 --> 00:34:09.260
have it work per user without admin rights,
but this scarce the bejeezus out of a lot

00:34:09.260 --> 00:34:13.450
of IT administrators.
And admittedly, their concerns aren't wrong.

00:34:13.450 --> 00:34:16.630
If you're an IT administrator, you want your
users to be running a locked-down configuration.

00:34:16.630 --> 00:34:20.870
So over the last year, we've been doing a
lot of work to make sure that Chrome and Chrome

00:34:20.870 --> 00:34:26.650
Frame are able to be administrated by you
in the way that you want, including controls

00:34:26.650 --> 00:34:32.320
for group policy and group policy templates
to help you roll out a lot of the custom configuration

00:34:32.320 --> 00:34:38.040
that Chrome Frame needs in order to allow
you to do things like flipping the default

00:34:38.040 --> 00:34:41.710
renderer, or providing a list of URLs to be
rendered in Chrome Frame or in IE, depending

00:34:41.710 --> 00:34:47.550
on which way you have that policy set.
And one of our most requested features was

00:34:47.550 --> 00:34:51.630
MSI installers. We've got MSI installers now,
both for Chrome and for Chrome Frame. They

00:34:51.630 --> 00:34:55.820
were released roughly on the same schedule
as the regular Google Chrome updates, and

00:34:55.820 --> 00:35:00.250
those are available for you to push out over
software update inside of in your enterprise.

00:35:00.250 --> 00:35:04.770
So that instead of having your users necessarily
have to try to do this and fail or go around

00:35:04.770 --> 00:35:09.770
you, you can centrally control this through
the group policy mechanism.

00:35:09.770 --> 00:35:13.730
And those policy mechanisms allow you to do
things like control auto-updates. This is

00:35:13.730 --> 00:35:17.010
one of our most requested features. The group
policy controls that are available for Chrome

00:35:17.010 --> 00:35:20.950
and Chrome Frame allow you to control when
updates to Chrome and Chrome Frame are rolled

00:35:20.950 --> 00:35:25.480
out inside of your enterprise.
And so with that, I want to say thanks. We've

00:35:25.480 --> 00:35:31.240
got a lot of time left for questions, so we
have mics here and at the back, so I'll welcome

00:35:31.240 --> 00:35:59.590
Amit back up but thanks a lot for coming and
looking forward to what you have to ask us.

00:35:59.590 --> 00:36:08.400
[Applause]
&gt;&gt;Alex Russell: Questions?

00:36:08.400 --> 00:36:26.140
&gt;&gt;&gt; Hey there. First of all, I'd just like
to say thanks. This is probably one of the

00:36:26.140 --> 00:36:27.140
single most time-saving devices in releasing
us web developers from the shackles of IE.

00:36:27.140 --> 00:36:28.140
My question -- I have a couple questions about
user agent.

00:36:28.140 --> 00:36:29.140
One, will we -- is the user agent unique enough
for us to be able to distinguish -- distinguish

00:36:29.140 --> 00:36:30.140
it in like Google Analytics?
&gt;&gt;Alex Russell: Google Analytics has support

00:36:30.140 --> 00:36:31.140
today for Chrome Frame, so if you check out
your Google Analytics browser stats, Chrome

00:36:31.140 --> 00:36:32.140
Frame is broken out separately than regular
IE.

00:36:32.140 --> 00:36:40.120
&gt;&gt;&gt; Awesome. And then second, this may be
more of a question for the GWT team, but do

00:36:40.120 --> 00:36:42.210
you know if the user agent for Chrome Frame
behaves, talks, and smells like a -- a Chrome

00:36:42.210 --> 00:36:48.860
user agent on the GWT side?
&gt;&gt;Alex Russell: I think there -- I'm not sure

00:36:48.860 --> 00:36:54.310
about the current state of that patch.
It's a trivial patch. Basically, there is

00:36:54.310 --> 00:36:58.430
a question about whether or not your app is
going to be designed to send differential

00:36:58.430 --> 00:37:03.520
content to IE or Chrome, so GUID does per
browser compilation, which means that you'd

00:37:03.520 --> 00:37:07.580
sort of have to decide whether or not your
app is going to opt into saying yes, we support

00:37:07.580 --> 00:37:13.020
Chrome Frame, in which case you want to detect
user agents that are IE but have the Chrome

00:37:13.020 --> 00:37:16.750
Frame string inside of them as Chrome Frame
and then treat them like Chrome and bucket

00:37:16.750 --> 00:37:21.330
them into that group.
But it's not a cut-and-dried thing for GUID,

00:37:21.330 --> 00:37:27.830
right? You certainly want to know that your
application is going to be configured to send

00:37:27.830 --> 00:37:34.050
the header or the meta-tag. Else you might
be sending the wrong content to the wrong

00:37:34.050 --> 00:37:37.280
browser.
&gt;&gt;&gt; So support for that user agent string,

00:37:37.280 --> 00:37:38.400
is that like a patch that's coming? Do you
know?

00:37:38.400 --> 00:37:44.080
&gt;&gt;Alex Russell: I think it is. I will check
with the GUID team and please ask back on

00:37:44.080 --> 00:37:49.020
the user forums and we'll get the answer sorted
for you.

00:37:49.020 --> 00:37:52.680
&gt;&gt;&gt; Thanks.
&gt;&gt;&gt; Hi. Our web application uses HTML5 SQL

00:37:52.680 --> 00:37:55.510
light. And we're wondering if Chrome Frame
supports that as well.

00:37:55.510 --> 00:38:02.000
&gt;&gt;&gt; Chrome Frame does support the WebSQL database
that's currently shipping in Chrome. It's

00:38:02.000 --> 00:38:09.050
worth noting that webSQL database didn't have
legs, necessarily. Web index DB is the new

00:38:09.050 --> 00:38:17.980
preferred API for doing storage on the client.
The WebSQL API spec sort of hasn't gotten

00:38:17.980 --> 00:38:23.170
a warm reception in the standards world. But
Chrome and Chrome Frame do support WebEx DB

00:38:23.170 --> 00:38:33.580
as well.
&gt;&gt;&gt; Thank you. Quick question. For the amount

00:38:33.580 --> 00:38:39.260
of user base that you have as far as IE6,
7, and 8, as many IE6, 7, and 8 users there

00:38:39.260 --> 00:38:42.780
are, how many would you say are actually using
Chrome Frame right now?

00:38:42.780 --> 00:38:52.140
&gt;&gt;Alex Russell: So we haven't sort of announced
Chrome Frame usage numbers. I think the primary

00:38:52.140 --> 00:38:56.910
thing for us, as the Chrome Frame team, isn't
necessarily how many users are using it. Because

00:38:56.910 --> 00:39:01.760
that's a proxy for you about how many users
are going to be seeing this prompt. Right?

00:39:01.760 --> 00:39:06.160
It's how quickly is Chrome Frame going to
get out of my way? Or how many users can use

00:39:06.160 --> 00:39:14.640
this if I ask my users to need or enable Chrome
Frame? And so we're focused on how we can

00:39:14.640 --> 00:39:21.750
reduce the barriers to web developers to adopt
HTML5. And adoption is one of those things.

00:39:21.750 --> 00:39:25.350
But creating compelling content, adding new
APIs, making it possible for you to build

00:39:25.350 --> 00:39:29.240
new stuff you wouldn't have been able to otherwise
is sort of the key thing. And we need your

00:39:29.240 --> 00:39:36.470
help to build really amazing awesome Web sites
that couldn't be done any other way and to

00:39:36.470 --> 00:39:50.930
use those to help us bring modern browsers
to everybody.

00:39:50.930 --> 00:40:13.540
&gt;&gt;&gt; Does the licensing accommodate the use
case of distributing Chrome Frame with a product,

00:40:13.540 --> 00:40:44.500
say, on a CD or something to that effect?
&gt;&gt;Amit Joshi: I think we have to check on

00:40:44.500 --> 00:40:46.251
that.
&gt;&gt;Alex Russell: The MSI installer is available

00:40:46.251 --> 00:40:47.251
for use inside your enterprise. I'm not sure
about broader distribution. I can check with

00:40:47.251 --> 00:40:48.251
legal.
&gt;&gt;&gt; How about Firefox?

00:40:48.251 --> 00:40:49.251
&gt;&gt;Alex Russell: What about Firefox? I don't
know. As web developer, Firefox is not my

00:40:49.251 --> 00:40:50.251
big problem. It's not the squeaky wheel. So
it's not real clear that Firefox needs the

00:40:50.251 --> 00:40:51.251
help. They're doing a great job. The Firefox
team is doing great work with Firefox 4. They've

00:40:51.251 --> 00:40:52.251
committed to a faster update and release cycle.
So I'm excited to see what happens there,

00:40:52.251 --> 00:40:53.251
too.
&gt;&gt;&gt; Hi. Can Chrome Frame be hosted in a private

00:40:53.251 --> 00:40:54.251
enterprise network where they don't have Internet
access?

00:40:54.251 --> 00:40:55.251
&gt;&gt; Alex Russell: Yes. So the question was:
Can Chrome Frame be hosted inside? The answer

00:40:55.251 --> 00:40:56.251
is yes. There is a bug that was just surfaced
in the last couple of weeks about the installer

00:40:56.251 --> 00:40:57.251
pinging home and blocking. So we're working
through that. Today the installation is slower

00:40:57.251 --> 00:40:59.370
than it needs to be. But we're working to
make sure that that's resolved quickly. But

00:40:59.370 --> 00:41:01.550
the answer is yes. You can take the MSI, push
it out through your enterprise, and have zero

00:41:01.550 --> 00:41:02.550
net connectivity to the outside world.
&gt;&gt;&gt; Awesome. Thank you.

00:41:02.550 --> 00:41:03.550
&gt;&gt;&gt; Great work, you guys. Since Chrome has
Flash built into it, does Chrome Frame also?

00:41:03.550 --> 00:41:04.550
&gt;&gt;Alex Russell: Chrome Frame does include
all of Chrome, including the built-in version

00:41:04.550 --> 00:41:05.550
of Flash.
&gt;&gt;&gt; Flash.

00:41:05.550 --> 00:41:11.950
&gt;&gt;Alex Russell: Right.
&gt;&gt;&gt; So you could have, basically, an IE6 that

00:41:11.950 --> 00:41:26.880
has an older version of Flash and Chrome Frame
that has --

00:41:26.880 --> 00:41:33.740
&gt;&gt;Alex Russell: Yes. But we're committed to
-- yes. The good news there -- yes, we're

00:41:33.740 --> 00:41:37.880
committed to giving users a secure browsing
experience with Chrome. That's why we don't

00:41:37.880 --> 00:41:43.650
make older version available, generally speaking.
Old code is code that's going to hurt you.

00:41:43.650 --> 00:41:49.140
But, if your site opts in to that page, you're
going to get the Chrome experience. It's up

00:41:49.140 --> 00:41:53.380
to your page. It's up to your site. You're
never going to be ambushed. Your content is

00:41:53.380 --> 00:41:59.220
never going to be running under a hostile,
unknown, unloving browser. You get to choose

00:41:59.220 --> 00:42:12.420
which mode you get.
&gt;&gt;&gt; Great. Thank you.

00:42:12.420 --> 00:42:15.110
So a BHO. Does Chrome Frame allow you access
to little C Chrome of IE? The Chrome --

00:42:15.110 --> 00:42:19.920
&gt;&gt;Alex Russell: Yeah, I understand. So Chrome
Frame does not give you APIs for accessing

00:42:19.920 --> 00:42:26.870
or scripting or working with the visual UI
that lives around the content area. Chrome

00:42:26.870 --> 00:42:31.650
Frame is, again, an active document server.
So it, effectively, just lives inside that

00:42:31.650 --> 00:42:38.550
square area between the scroll bars. And it
doesn't really have an interaction with the

00:42:38.550 --> 00:42:41.150
outside world.
&gt;&gt;&gt; Amit Joshi: Think of it as a pdf. It works

00:42:41.150 --> 00:42:52.070
in a similar way as pdf.
&gt;&gt;&gt; Is the Chrome Frame cache integrated with

00:42:52.070 --> 00:43:03.090
IE's cache as in, if you clear your IE cache
settings, does it clear the Chrome Frame cache

00:43:03.090 --> 00:43:05.340
as well?
&gt;&gt;Alex Russell: Great question. Yes. The Chrome

00:43:05.340 --> 00:43:11.650
Frame -- IE8 introduced APIs for coordinating
that process. So, in IE8 and upward, when

00:43:11.650 --> 00:43:15.990
you clear one part of the cache, Chrome will
try to clear -- Chrome Frame will try to clear

00:43:15.990 --> 00:43:20.350
the analogous part of the cache for Chrome
Frame. In older versions of Chrome Frame,

00:43:20.350 --> 00:43:25.030
we actually blow away everything when you
clear the cache. We don't want user data leaking

00:43:25.030 --> 00:43:40.400
out or your privacy to ever be put in jeopardy
because you were browsing the web with Chrome

00:43:40.400 --> 00:43:41.550
Frame.
&gt;&gt;&gt; And, in terms of cache, are they actually

00:43:41.550 --> 00:43:43.210
stored in separate directories? Or are they
still in the IE's cache directory?

00:43:43.210 --> 00:43:45.260
&gt;&gt;Alex Russell: Again, great question. In
IE 6 and 7, we put the user data directory

00:43:45.260 --> 00:43:49.480
for Chrome inside the IE cache directory.
So, when you clear it in IE6 and 7, it just

00:43:49.480 --> 00:43:54.990
goes away. In IE8 and upward, we can manage
it independently because we have the API access

00:43:54.990 --> 00:44:02.090
that Microsoft added. So we can store it independently.
It lives near where your regular Chrome user

00:44:02.090 --> 00:44:09.980
data directory would, but it is managed independently.
&gt;&gt;Amit Joshi: So about cache, actually Chrome

00:44:09.980 --> 00:44:17.171
Frame uses -- so Chrome Frame's cache is IE's
cache. So --

00:44:17.171 --> 00:44:21.990
&gt;&gt;Alex Russell: But there's other data like
the index database and other things which

00:44:21.990 --> 00:44:24.630
we can't rely on IE for.
&gt;&gt;Amit Joshi: As Alex mentioned, that also

00:44:24.630 --> 00:44:29.720
gets cleared out when you clear IE's history.
&gt;&gt;Alex Russell: There's a lot of work in any

00:44:29.720 --> 00:44:34.530
browser. There's a lot of data you need to
have around things, not just like your user

00:44:34.530 --> 00:44:37.430
history or the cache, but also things like
the safe browsing list. The auto update system

00:44:37.430 --> 00:44:40.340
and all that has to live someplace. Som although
we use IE's cache for almost everything, we

00:44:40.340 --> 00:44:42.050
do have to carve out separate space for certain
operations.

00:44:42.050 --> 00:44:45.140
&gt;&gt;&gt; Thank you.
&gt;&gt;&gt; Hi. One question here. I wonder I'm curious

00:44:45.140 --> 00:45:00.730
how you are to install Google Chrome Frame
without acquiring admin rights on Windows

00:45:00.730 --> 00:45:10.160
7?
&gt;&gt;Amit Joshi: We can talk offline. It's a

00:45:10.160 --> 00:45:11.160
detailed technical discussion, and I'm not
sure every web developer or HTML developer

00:45:11.160 --> 00:45:12.160
is interested.
&gt;&gt;Alex Russell: Can I take a shot at a quick

00:45:12.160 --> 00:45:25.320
answer? As you saw in the process diagram,
a very small part of Chrome Frame lives inside

00:45:25.320 --> 00:45:31.820
of the process space of IE. This is how BHOs,
which are the little processes IE loads up,

00:45:31.820 --> 00:45:35.590
we need some way to get Chrome Frame loaded.
We figured out a way to do that. So, once

00:45:35.590 --> 00:45:39.350
that's done, everything else can work as normal.
We just have to be inside the process space.

00:45:39.350 --> 00:45:42.640
&gt;&gt;&gt; Just to confirm what you showed previously,
you didn't have Chrome installed on the machine,

00:45:42.640 --> 00:45:44.390
right?
&gt;&gt;Alex Russell: We showed two different ways.

00:45:44.390 --> 00:45:46.590
&gt;&gt;&gt; Second Chrome running from a site?
&gt;&gt;Alex Russell: That's right.

00:45:46.590 --> 00:45:51.690
&gt;&gt; Second question: What is the story on WebGL
on XP? Does it support WebGL on XP?

00:45:51.690 --> 00:46:03.440
&gt;&gt;Alex Russell: Yes, it does.
&gt;&gt;&gt; Does It also brings the security issues

00:46:03.440 --> 00:46:07.780
on XP as well?
&gt;&gt;Alex Russell: Well, the security issues

00:46:07.780 --> 00:46:14.410
for WebGL are interesting. And Chrome has
done a lot of work to make sure that the commands

00:46:14.410 --> 00:46:15.410
that are sent to the GPU have been preprocessed.
There's a separate rendering process for GL

00:46:15.410 --> 00:46:21.860
commands and an integrated pipeline for sending
stuff out so that we have a place to verify

00:46:21.860 --> 00:46:30.960
what's being sent to the GPU. We have a lot
of work happening for things like shader verification

00:46:30.960 --> 00:46:37.350
to make sure when you use shader, it isn't
going to be sent sort of naked down to the

00:46:37.350 --> 00:46:40.291
GPU. And there's also a black list and white
list for graphics drivers. Not everybody is

00:46:40.291 --> 00:46:48.270
going to get regular raw rendering down to
what the graphics drivers provide. Because

00:46:48.270 --> 00:46:52.950
graphics drivers are not known for being the
most secure code in the world. They weren't

00:46:52.950 --> 00:46:53.950
necessarily written to be exposed to all the
web content.

00:46:53.950 --> 00:47:06.790
&gt;&gt;&gt; So today you are saying it is possible
to write -- sorry, WebGL code that can crash

00:47:06.790 --> 00:47:08.490
the machine?
&gt;&gt;Alex Russell: I didn't say that. I'm saying

00:47:08.490 --> 00:47:09.900
that that's something that we're working on.
&gt;&gt; Is that possible?

00:47:09.900 --> 00:47:13.320
&gt;&gt;Alex Russell: It's possible to write code
in anything that will crash lots of stuff.

00:47:13.320 --> 00:47:20.240
But no, if it is, if you do see a crash like
that, you know, that's something that we need

00:47:20.240 --> 00:47:33.120
to work on. That's not the promise of the
web.

00:47:33.120 --> 00:47:49.660
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;&gt; Can you tell us what Microsoft is making

00:47:49.660 --> 00:47:53.500
of this? Are they positive about it or -- feedback.
&gt;&gt; My name is George. Just because -- they

00:47:53.500 --> 00:47:57.850
cut my microphone because I work at Microsoft.
I'm an HTML5 evangelist. I love HTML5. I evangelize

00:47:57.850 --> 00:48:00.160
HTML5.
&gt;&gt;&gt; Alex Russell: You can ask him. I'd love

00:48:00.160 --> 00:48:06.510
to be there, if you get an answer. I'd love
to know what they think. Any other questions?

00:48:06.510 --> 00:48:11.320
&gt;&gt;Amit Joshi: He has a question for you.
&gt;&gt;Alex Russell: Let's use the mics.

00:48:11.320 --> 00:48:15.010
&gt;&gt;&gt; This is not my presentation. The question
is what does Microsoft think about Google

00:48:15.010 --> 00:48:33.690
Chrome Frame? I think Google is doing great
stuff with the browser. If you really care

00:48:33.690 --> 00:48:42.440
about HTML5, I think Chrome is a good browser.
Internet Explorer 9 is an awesome browser.

00:48:42.440 --> 00:48:44.130
So try the real browsers. Those seem to me
like additional solutions can expose users

00:48:44.130 --> 00:48:45.930
to additional security risks and other concerns.
And I'm curious to talk offline with the Chrome

00:48:45.930 --> 00:48:47.910
team about this. That's all.
&gt;&gt;Amit Joshi: Thanks for being here.

00:48:47.910 --> 00:48:51.410
&gt;&gt;Alex Russell: Yeah. thanks for being here.
&gt;&gt;Amit Joshi: Any other questions? All right.

00:48:51.410 --> 00:48:54.160
Thank you guys for being here. You guys have
been awesome.

00:48:54.160 --> 00:48:54.410
[ Applause ]

