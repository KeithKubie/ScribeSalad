WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:02.050
BRETT SLATKIN: And now, I'm
going to give it back to Kevin

00:00:02.050 --> 00:00:03.150
to tell you more about it.

00:00:03.150 --> 00:00:04.080
[APPLAUSE]

00:00:07.955 --> 00:00:09.080
KEVIN GIBBS: Thanks, Brett.

00:00:09.080 --> 00:00:09.705
That was great.

00:00:12.566 --> 00:00:15.430
Woo, brisk night.

00:00:15.430 --> 00:00:17.320
All right, well, now
I'm going to go back

00:00:17.320 --> 00:00:19.683
into the five
components I talked

00:00:19.683 --> 00:00:21.100
to you about a
little bit earlier,

00:00:21.100 --> 00:00:23.620
the five big components
in the App Engine stack.

00:00:23.620 --> 00:00:26.010
I'm going to dive down to
some more technical detail now

00:00:26.010 --> 00:00:29.960
to get into some more
details of the product.

00:00:29.960 --> 00:00:32.200
So the first of
our five components

00:00:32.200 --> 00:00:34.400
is they're scalable
serving infrastructure.

00:00:34.400 --> 00:00:36.340
We took this photo
earlier this morning,

00:00:36.340 --> 00:00:38.620
where the team was backing
up before the launch.

00:00:42.665 --> 00:00:44.290
Our scalable web
service infrastructure

00:00:44.290 --> 00:00:47.140
is a big part of App Engine.

00:00:47.140 --> 00:00:53.470
It's a distributed, low-overhead
system for running your code.

00:00:53.470 --> 00:00:56.220
When you submit your code
to us, as you saw Brett do,

00:00:56.220 --> 00:00:58.720
it's pushed to a number
of fault-tolerant servers

00:00:58.720 --> 00:01:01.490
running within our data centers.

00:01:01.490 --> 00:01:05.200
We handle all the work of
connecting the request down

00:01:05.200 --> 00:01:07.660
from the user to a running
instance of your code

00:01:07.660 --> 00:01:09.477
within the data center.

00:01:09.477 --> 00:01:11.560
Now, when I say that the
system is fault-tolerant,

00:01:11.560 --> 00:01:14.530
what I mean is that, across
our servers that we put

00:01:14.530 --> 00:01:17.290
your code on, any
one of them could

00:01:17.290 --> 00:01:19.110
fail at any moment in time.

00:01:19.110 --> 00:01:21.610
And we will still connect your
request to one of our servers

00:01:21.610 --> 00:01:23.050
and still be able to serve it.

00:01:23.050 --> 00:01:26.920
It's part of how Google
does infrastructure.

00:01:26.920 --> 00:01:29.100
And so another aspect,
which sort of follows

00:01:29.100 --> 00:01:31.540
from that, about the way
that we serve your web apps

00:01:31.540 --> 00:01:33.490
is that it's fluid.

00:01:33.490 --> 00:01:37.510
We don't ask you to
reserve resources upfront.

00:01:37.510 --> 00:01:40.570
You don't have to tell us
how many CPUs you want,

00:01:40.570 --> 00:01:43.370
how many machines you need,
or anything like that.

00:01:43.370 --> 00:01:46.690
Instead, we scale and move
your application in response

00:01:46.690 --> 00:01:50.380
to demand, in response to load.

00:01:50.380 --> 00:01:53.130
So that's the scalable web
serving infrastructure.

00:01:53.130 --> 00:01:55.200
Again, a big part of
the goal of App Engine

00:01:55.200 --> 00:01:56.543
is to make everything easy.

00:01:56.543 --> 00:01:58.710
So that's one thing we just
take out of the equation

00:01:58.710 --> 00:02:00.930
for you to make easier.

00:02:00.930 --> 00:02:04.600
Now, our second big component
is our Python runtime.

00:02:04.600 --> 00:02:07.210
As I mentioned, Python is
the first supported language

00:02:07.210 --> 00:02:08.930
with App Engine.

00:02:08.930 --> 00:02:11.530
However, I say the word runtime,
because our language support

00:02:11.530 --> 00:02:14.050
in App Engine is
actually modular.

00:02:14.050 --> 00:02:16.360
All the same infrastructure
that you're seeing here--

00:02:16.360 --> 00:02:20.410
the set of APIs and the main
console-- all of the tools

00:02:20.410 --> 00:02:22.900
that we're providing
for you are generic,

00:02:22.900 --> 00:02:24.650
and they apply to
multiple languages.

00:02:24.650 --> 00:02:27.670
So we can drop new
languages in later.

00:02:27.670 --> 00:02:29.600
Now, the Python that
we use with App Engine

00:02:29.600 --> 00:02:32.480
is the same Python that
you've grown to know and love.

00:02:32.480 --> 00:02:34.640
There are a wealth of
third-party modules

00:02:34.640 --> 00:02:37.390
and libraries that
you can use with them.

00:02:37.390 --> 00:02:40.040
And in short, we want you to be
able to use any code that you'd

00:02:40.040 --> 00:02:41.210
like with App Engine.

00:02:41.210 --> 00:02:43.647
We don't want to restrict
you to any specific thing.

00:02:43.647 --> 00:02:45.230
In fact, we don't
want to restrict you

00:02:45.230 --> 00:02:50.210
to any specific type of
HTML, or CSF, or JavaScript,

00:02:50.210 --> 00:02:52.363
or content type, or anything.

00:02:52.363 --> 00:02:54.530
We want you to be able to
create any sort of web app

00:02:54.530 --> 00:02:58.130
that you can think
of on App Engine.

00:02:58.130 --> 00:03:01.610
So the next big component
that we've got is our SDK.

00:03:01.610 --> 00:03:04.700
This is the environment that you
use to develop an app locally.

00:03:04.700 --> 00:03:07.520
It's what you saw Brett
use just now in the demo.

00:03:07.520 --> 00:03:12.617
We're releasing it today
for Linux, Mac, and Windows,

00:03:12.617 --> 00:03:13.950
but it's written in pure Python.

00:03:13.950 --> 00:03:16.367
So anywhere that you can get
a Python interpreter running,

00:03:16.367 --> 00:03:18.890
you can likely get
the SDK running.

00:03:18.890 --> 00:03:22.800
Now, the big benefit of the
SDK, why I really like it,

00:03:22.800 --> 00:03:25.400
is how it cuts down the
code-compile-test cycle

00:03:25.400 --> 00:03:26.480
for you.

00:03:26.480 --> 00:03:29.420
We don't require you to deploy
your code to our servers

00:03:29.420 --> 00:03:30.865
each time you want
to test it out.

00:03:30.865 --> 00:03:32.240
Instead, you just
run it locally,

00:03:32.240 --> 00:03:34.820
using the editors you're used
to, the tools you're used to.

00:03:34.820 --> 00:03:37.830
And your changes show up
instantly as you're coding.

00:03:37.830 --> 00:03:41.330
I think this brings a lot of
the fun back to programming.

00:03:41.330 --> 00:03:44.630
So our fourth component
is the admin console.

00:03:44.630 --> 00:03:46.310
Right here is a
screenshot of it.

00:03:46.310 --> 00:03:49.400
This web-based admin
console is a big part

00:03:49.400 --> 00:03:53.080
of the simpler alternative
we're providing for you.

00:03:53.080 --> 00:03:55.400
In essence, we're
actually providing you

00:03:55.400 --> 00:03:58.480
a simpler alternative
to the whole LAMP stack.

00:03:58.480 --> 00:04:01.430
And the admin console is what
ties that together and provides

00:04:01.430 --> 00:04:03.520
you all the tools
you're used to using.

00:04:03.520 --> 00:04:06.870
It allows you to see the
status of your application.

00:04:06.870 --> 00:04:09.500
It allows you to control who
can administer the application,

00:04:09.500 --> 00:04:12.950
add other users as admin so that
they can upload new versions.

00:04:12.950 --> 00:04:16.410
It allows you to control
which version of your app,

00:04:16.410 --> 00:04:20.399
if you have multiple versions,
receives most of the traffic.

00:04:20.399 --> 00:04:23.030
But it also provides a
number of additional tools

00:04:23.030 --> 00:04:25.760
that you may be used to
using in different forms.

00:04:25.760 --> 00:04:28.250
That includes tools for
looking at your request logs

00:04:28.250 --> 00:04:31.730
and your application
logs, a Data Explorer,

00:04:31.730 --> 00:04:36.020
which is our alternative for
a SQL administration tool.

00:04:36.020 --> 00:04:37.520
It allows you to
look into your data

00:04:37.520 --> 00:04:42.660
and check on the properties,
add new entities, and so forth.

00:04:42.660 --> 00:04:45.020
It provides an
administration interface

00:04:45.020 --> 00:04:47.400
for hooking up a domain
to your application.

00:04:47.400 --> 00:04:49.970
You don't need to run just on
the default app spot domain

00:04:49.970 --> 00:04:51.070
that you saw.

00:04:51.070 --> 00:04:52.850
And it also provides
some stats, which

00:04:52.850 --> 00:04:54.950
are collected in near
real time, which tell you

00:04:54.950 --> 00:04:56.740
how much traffic
you're receiving,

00:04:56.740 --> 00:04:59.240
what errors you're receiving,
and what URLs you're receiving

00:04:59.240 --> 00:05:00.530
them on, and so forth.

00:05:03.370 --> 00:05:06.870
So our fifth big component
is the datastore,

00:05:06.870 --> 00:05:10.030
which is our persistence layer.

00:05:10.030 --> 00:05:13.350
The datastore, it's a
schema-less object store that

00:05:13.350 --> 00:05:16.467
supports millions of entities.

00:05:16.467 --> 00:05:18.300
Under the covers, though,
what's interesting

00:05:18.300 --> 00:05:21.120
about the datastore is it's not
implemented with a clustered

00:05:21.120 --> 00:05:24.240
SQL database, which is how
you would usually provide

00:05:24.240 --> 00:05:25.980
a large data storage layer.

00:05:25.980 --> 00:05:28.313
Instead, it uses
Bigtable, which is

00:05:28.313 --> 00:05:29.730
a piece of scalable
infrastructure

00:05:29.730 --> 00:05:32.320
that we use here at Google.

00:05:32.320 --> 00:05:36.490
Now, you can read some
papers online about Bigtable

00:05:36.490 --> 00:05:36.990
if you want.

00:05:36.990 --> 00:05:38.380
They're fascinating.

00:05:38.380 --> 00:05:41.190
But the short of
it is that Bigtable

00:05:41.190 --> 00:05:44.610
is a horizontally-distributed
scalable system that, again,

00:05:44.610 --> 00:05:48.030
is fault-tolerant and spans
thousands of machines and tens

00:05:48.030 --> 00:05:50.640
and thousands of disks.

00:05:50.640 --> 00:05:52.590
It automatically
reacts to hotspots,

00:05:52.590 --> 00:05:56.760
moving your data
around as load changes.

00:05:56.760 --> 00:06:00.180
So the fact that we're using
Bigtable here, though, and not

00:06:00.180 --> 00:06:02.470
SQL is a big difference.

00:06:02.470 --> 00:06:04.680
It's a big departure from
what people are used to.

00:06:04.680 --> 00:06:07.230
And we know that getting used
to this new way of doing things

00:06:07.230 --> 00:06:09.248
and this new methodology
is going to take

00:06:09.248 --> 00:06:10.290
a little getting used to.

00:06:10.290 --> 00:06:11.880
There's some new tools
that you have to use.

00:06:11.880 --> 00:06:14.422
There's some new ways you have
to program similar to the ones

00:06:14.422 --> 00:06:16.540
that you saw Brett use.

00:06:16.540 --> 00:06:19.450
Eventually, however, we
think that this will pay off.

00:06:19.450 --> 00:06:22.240
We think that you may actually
come to like the system

00:06:22.240 --> 00:06:24.340
a little bit better.

00:06:24.340 --> 00:06:28.150
One big advantage of using
our system in the datastore

00:06:28.150 --> 00:06:30.290
is that it's schema-less.

00:06:30.290 --> 00:06:32.595
If you want to introduce
a new entity type,

00:06:32.595 --> 00:06:34.720
or you want to add a new
properties to your entity,

00:06:34.720 --> 00:06:37.207
like you saw Brett do,
there's nothing to it.

00:06:37.207 --> 00:06:39.040
You don't have to go
and update your schema,

00:06:39.040 --> 00:06:41.590
or deploy something
new, or break out.

00:06:41.590 --> 00:06:42.970
It's just code.

00:06:42.970 --> 00:06:45.730
So again, it gets back to making
the whole thing really easy

00:06:45.730 --> 00:06:49.547
to do and allowing you
to just write your code.

00:06:49.547 --> 00:06:51.880
So now, actually, I'm going
to dive in a little bit more

00:06:51.880 --> 00:06:54.730
on a model class, which
is the way that we

00:06:54.730 --> 00:06:56.890
expose the datastore primarily.

00:06:56.890 --> 00:07:00.030
You saw Brett use
it a little bit ago.

00:07:00.030 --> 00:07:02.170
And this right here is
defining a model class

00:07:02.170 --> 00:07:04.930
for a story, which is
something like a typical news

00:07:04.930 --> 00:07:08.980
story you might see, a
story on a news site.

00:07:08.980 --> 00:07:11.140
This is just a
normal Python class.

00:07:11.140 --> 00:07:13.745
There's nothing
special about it.

00:07:13.745 --> 00:07:15.370
It's just an interface
that we're using

00:07:15.370 --> 00:07:17.680
to get down to the datastore.

00:07:17.680 --> 00:07:19.820
I define three properties here.

00:07:19.820 --> 00:07:22.920
One is a title, which I
said is a type string.

00:07:22.920 --> 00:07:25.710
That means it's indexed,
and you can query on it.

00:07:25.710 --> 00:07:28.030
And we also have
a body property,

00:07:28.030 --> 00:07:30.590
which I've said,
alternatively, is a type text.

00:07:30.590 --> 00:07:32.570
By saying it's a
type text, I mean

00:07:32.570 --> 00:07:34.180
that it is not
indexed, but instead,

00:07:34.180 --> 00:07:37.690
can hold much more information.

00:07:37.690 --> 00:07:43.640
Because it's not efficient to
index a really large string.

00:07:43.640 --> 00:07:45.860
We've also added
an author property.

00:07:45.860 --> 00:07:47.370
Now, this is a type user.

00:07:47.370 --> 00:07:49.430
What this means is it
stores a rich object.

00:07:49.430 --> 00:07:52.030
We use your account
object to be a login

00:07:52.030 --> 00:07:54.920
user, which I can supply when
I'm creating this object.

00:07:54.920 --> 00:07:56.720
So we don't just
support primitive types.

00:07:56.720 --> 00:07:59.890
We also support more advanced
types with the datastore.

00:07:59.890 --> 00:08:02.320
Now, I can go ahead and
start using this model

00:08:02.320 --> 00:08:03.670
in my application.

00:08:03.670 --> 00:08:06.680
Use it, write some code,
store some entities.

00:08:06.680 --> 00:08:10.590
And then I can come back
and add more properties.

00:08:10.590 --> 00:08:12.760
So here, I've gone and
added two more properties.

00:08:12.760 --> 00:08:16.000
I added the date-time property
with the creation timestamp.

00:08:16.000 --> 00:08:17.470
It's pretty straightforward.

00:08:17.470 --> 00:08:19.392
But I've also added
a rating property.

00:08:19.392 --> 00:08:21.850
Now, a rating property, you
might think, well, what's that?

00:08:21.850 --> 00:08:23.500
That's a little unusual.

00:08:23.500 --> 00:08:25.620
Well, this is one
of the Gdata types

00:08:25.620 --> 00:08:28.690
that we support with Gdata,
another system from Google.

00:08:28.690 --> 00:08:31.060
And it's actually
a semantic type.

00:08:31.060 --> 00:08:34.044
With the datastore, we also
support richer semantic types,

00:08:34.044 --> 00:08:35.169
which are very interesting.

00:08:35.169 --> 00:08:37.090
Because then they allow
you to store an entity,

00:08:37.090 --> 00:08:38.465
and get it back,
and work with it

00:08:38.465 --> 00:08:41.679
in a generic way using an
XML namespace for each type

00:08:41.679 --> 00:08:44.150
of the semantic type.

00:08:44.150 --> 00:08:46.330
So that gives you a
taste of how you actually

00:08:46.330 --> 00:08:50.950
go ahead and store data and
what you can do with our models.

00:08:50.950 --> 00:08:53.410
Now, even though
we are a departure

00:08:53.410 --> 00:08:57.550
from SQL with the datastore, we
provide a very powerful query

00:08:57.550 --> 00:09:01.203
interface that is sufficient
for building real applications.

00:09:01.203 --> 00:09:03.370
Some of the things that we
support with our querying

00:09:03.370 --> 00:09:06.760
capabilities include
queries on a single property

00:09:06.760 --> 00:09:09.880
or multiple properties,
sort orders--

00:09:09.880 --> 00:09:12.700
again, on a single property
or multiple properties

00:09:12.700 --> 00:09:15.160
as [INAUDIBLE] sending--

00:09:15.160 --> 00:09:18.220
transactions, so that you
can write a group of entities

00:09:18.220 --> 00:09:20.890
together with
consistency guarantees.

00:09:20.890 --> 00:09:23.560
We also support things
like batch operations,

00:09:23.560 --> 00:09:28.090
and user settable primary
keys, and a few other parts

00:09:28.090 --> 00:09:29.400
of the system.

00:09:29.400 --> 00:09:31.150
Now, to demonstrate
some of these to you,

00:09:31.150 --> 00:09:33.610
I'm actually going
to show you a query.

00:09:33.610 --> 00:09:35.958
I'm going to use GQL,
which is something

00:09:35.958 --> 00:09:37.000
that you saw in the demo.

00:09:37.000 --> 00:09:41.110
And GQL is a simplified,
SQL-like query language

00:09:41.110 --> 00:09:42.640
that we provide.

00:09:42.640 --> 00:09:46.390
It's similar to, in
spirit, things like jQuery

00:09:46.390 --> 00:09:49.420
or FBQL, which, although
they're not SQL,

00:09:49.420 --> 00:09:52.900
make it easy to interact
with other data sources.

00:09:52.900 --> 00:09:55.060
[INAUDIBLE] showed that to you.

00:09:55.060 --> 00:09:57.490
Here, with GQL, I've done a
pretty simple query, again,

00:09:57.490 --> 00:10:00.580
off that same story class
that I just showed you.

00:10:00.580 --> 00:10:02.718
Here, I said, I'd like
to select from stories,

00:10:02.718 --> 00:10:04.510
where the title is App
Engine Launch, which

00:10:04.510 --> 00:10:06.250
is happening right now.

00:10:06.250 --> 00:10:08.530
And the author,
I've said, I want

00:10:08.530 --> 00:10:10.150
that to be the current user.

00:10:10.150 --> 00:10:12.600
That's in a keyword
argument that I passed

00:10:12.600 --> 00:10:14.810
in when constructing the query.

00:10:14.810 --> 00:10:16.270
That's a pretty simple query.

00:10:16.270 --> 00:10:19.740
You can actually do considerably
more advanced queries.

00:10:19.740 --> 00:10:23.040
So many other things
that you can show,

00:10:23.040 --> 00:10:26.100
that you can do or ask
for in the same query--

00:10:26.100 --> 00:10:29.350
object with the rating over
10 for rating property.

00:10:29.350 --> 00:10:32.820
And I can also request that
the results be sorted by rating

00:10:32.820 --> 00:10:34.440
and also to create
a timestamp, even

00:10:34.440 --> 00:10:36.588
though it wasn't in the query.

00:10:36.588 --> 00:10:38.130
So that gives you
an idea of the sort

00:10:38.130 --> 00:10:40.220
of queries that we can support.

00:10:40.220 --> 00:10:43.710
Now, I should also mention
that since we're not SQL,

00:10:43.710 --> 00:10:46.200
there's another big feature
of SQL that we don't support,

00:10:46.200 --> 00:10:47.370
and that's joins.

00:10:47.370 --> 00:10:50.790
We don't provide joins for
you with the datastore.

00:10:50.790 --> 00:10:52.290
And the reason that
we don't provide

00:10:52.290 --> 00:10:54.900
joins is that joins
tend to only work well

00:10:54.900 --> 00:10:57.815
in databases that are within
a single machine's memory.

00:10:57.815 --> 00:10:59.940
When you go outside the
memory of a single machine,

00:10:59.940 --> 00:11:01.650
and you run into
multiple machines,

00:11:01.650 --> 00:11:03.660
it's hard to do
efficient algorithms

00:11:03.660 --> 00:11:06.240
for implementing joins.

00:11:06.240 --> 00:11:08.160
So that's why we
don't provide them.

00:11:08.160 --> 00:11:09.660
But to actually
underscore something

00:11:09.660 --> 00:11:11.618
that's a little bit
exciting about App Engine--

00:11:15.840 --> 00:11:17.583
is that although we
don't provide it,

00:11:17.583 --> 00:11:19.500
it's because the system
we're providing to you

00:11:19.500 --> 00:11:22.330
allows your
applications to scale.

00:11:22.330 --> 00:11:25.430
Because the datastore is built
on a horizontally-scalable,

00:11:25.430 --> 00:11:28.750
fault-tolerance system, and your
data can span many hard disks

00:11:28.750 --> 00:11:33.220
and machines and already does,
it means that if you create

00:11:33.220 --> 00:11:35.860
your application carefully-- you
think it through a little bit

00:11:35.860 --> 00:11:39.130
when you're writing it,
about how it might scale--

00:11:39.130 --> 00:11:42.280
and you design your queries
a little bit of foresight,

00:11:42.280 --> 00:11:44.290
your application
can easily scale

00:11:44.290 --> 00:11:46.355
to millions of users and
millions of entities.

00:11:50.105 --> 00:11:51.480
Those are the five
big components

00:11:51.480 --> 00:11:53.280
in the App Engine stack.

00:11:53.280 --> 00:11:55.770
Now, I did also want to
mention a couple other features

00:11:55.770 --> 00:11:58.826
and APIs that we provide.

00:11:58.826 --> 00:12:02.852
The first off is our
email-sending API.

00:12:02.852 --> 00:12:04.310
That's another API
that we provide.

00:12:04.310 --> 00:12:06.900
We allow you to create
and send emails.

00:12:06.900 --> 00:12:09.540
But again, in the spirit of
App Engine, making things easy,

00:12:09.540 --> 00:12:11.570
we don't require you to
set up an SNTP server

00:12:11.570 --> 00:12:12.800
or do anything like that.

00:12:12.800 --> 00:12:15.902
You just create a mail
object, and you can send it.

00:12:15.902 --> 00:12:17.360
We also provide
the ability for you

00:12:17.360 --> 00:12:21.620
to make outgoing HTTP requests
to the internet with our URL

00:12:21.620 --> 00:12:23.240
fetch API.

00:12:23.240 --> 00:12:24.710
This API is neat,
because it allows

00:12:24.710 --> 00:12:27.380
you to integrate with existing
other services and web

00:12:27.380 --> 00:12:29.742
services.

00:12:29.742 --> 00:12:31.700
Another thing that we
provide is authentication

00:12:31.700 --> 00:12:33.200
with Google Accounts.

00:12:33.200 --> 00:12:34.730
Again, it's the
same sort of story.

00:12:34.730 --> 00:12:37.580
You don't have to maintain
user objects and passwords

00:12:37.580 --> 00:12:38.870
and do any of that.

00:12:38.870 --> 00:12:39.985
We'll handle that for you.

00:12:39.985 --> 00:12:42.360
When you create your app, you
already have a bed of users

00:12:42.360 --> 00:12:45.140
that you can call from.

00:12:45.140 --> 00:12:48.420
And finally, another big feature
is that we support frameworks.

00:12:48.420 --> 00:12:50.660
Now, in the demo, you saw
us use a really simple

00:12:50.660 --> 00:12:53.433
little framework that we provide
just to help you get started.

00:12:53.433 --> 00:12:55.100
Well, we support much
larger frameworks,

00:12:55.100 --> 00:12:57.320
like the whole Django framework.

00:12:57.320 --> 00:12:59.240
Those are really
helpful when you

00:12:59.240 --> 00:13:02.430
move from writing a small web
app to a much larger web that

00:13:02.430 --> 00:13:06.315
has hundreds or
thousands of pages on it.

00:13:06.315 --> 00:13:08.190
All right, well, those
are the big components

00:13:08.190 --> 00:13:09.875
of the App Engine system.

00:13:09.875 --> 00:13:12.690
I hope that now, after
giving you guys a quick talk,

00:13:12.690 --> 00:13:15.210
you're able to see how we're
trying to provide a simpler

00:13:15.210 --> 00:13:19.730
alternative for creating and
running web applications.

