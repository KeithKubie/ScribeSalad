WEBVTT
Kind: captions
Language: en

00:00:00.950 --> 00:00:02.480
Humans are social animals.

00:00:02.480 --> 00:00:04.620
When we're together,
we get more done faster

00:00:04.620 --> 00:00:06.259
by talking face-to-face.

00:00:06.259 --> 00:00:08.050
But it's still hard to
get devices that are

00:00:08.050 --> 00:00:09.670
near each other to interact.

00:00:09.670 --> 00:00:12.120
When they're together,
they should work together.

00:00:12.120 --> 00:00:14.190
My name is Andrew Bonner,
and Nearby Messages

00:00:14.190 --> 00:00:16.930
is a new proximity API
to let Android and iOS

00:00:16.930 --> 00:00:19.810
devices to communicate
across short distances.

00:00:19.810 --> 00:00:21.760
Nearby Messages is
perfect for setting up

00:00:21.760 --> 00:00:23.930
ad hoc groups,
collaborative sessions,

00:00:23.930 --> 00:00:27.110
or sharing resources to
people in a colocated space.

00:00:27.110 --> 00:00:28.950
It gives you a
publish-subscribe API

00:00:28.950 --> 00:00:32.820
to pass messages between phones
that are within about 100 feet.

00:00:32.820 --> 00:00:35.400
To make this work everywhere,
it takes a bit more than magic.

00:00:35.400 --> 00:00:37.400
Nearby Messages
makes use of Wi-Fi,

00:00:37.400 --> 00:00:39.930
Bluetooth, and even an
ultrasonic modem that uses

00:00:39.930 --> 00:00:41.510
the speakers and microphones.

00:00:41.510 --> 00:00:43.890
We'll see how you can use that
to restrict the range down

00:00:43.890 --> 00:00:45.470
to about five feet.

00:00:45.470 --> 00:00:48.080
Let's dive into a fun example,
and see how Google Play Games

00:00:48.080 --> 00:00:50.250
built the Nearby players
feature to make it easier

00:00:50.250 --> 00:00:52.237
to set up a multiplayer game.

00:00:52.237 --> 00:00:54.320
Sending invites by scrolling
through a buddy list,

00:00:54.320 --> 00:00:56.610
or typing in user
handles, is a pain.

00:00:56.610 --> 00:00:58.340
We'll prepopulate
the game invitations

00:00:58.340 --> 00:01:01.130
by using who's
Nearby and in-game.

00:01:01.130 --> 00:01:02.750
For creating a
gaming session, we

00:01:02.750 --> 00:01:05.900
might want to publish an avatar
image and maybe a gamer handle.

00:01:05.900 --> 00:01:08.030
You can serialize this
data however you like.

00:01:08.030 --> 00:01:11.552
JSON, protocol buffers,
CSV-- it's up to you.

00:01:11.552 --> 00:01:14.010
Pass the serialized bytes to
the constructor of the message

00:01:14.010 --> 00:01:17.050
object, call publish,
and we're off.

00:01:17.050 --> 00:01:19.300
We also want to see
what players are nearby.

00:01:19.300 --> 00:01:21.580
The subscribe call takes
a message listener.

00:01:21.580 --> 00:01:23.440
It's on found method
will fire when

00:01:23.440 --> 00:01:26.390
the same app on a Nearby
device calls publish.

00:01:26.390 --> 00:01:28.610
Within the on found handler,
we pull out the bytes

00:01:28.610 --> 00:01:31.180
from the message with get
contents, and modify our UI

00:01:31.180 --> 00:01:33.240
to show the players to invite.

00:01:33.240 --> 00:01:34.780
It's important to
wait for the user

00:01:34.780 --> 00:01:37.700
to take an action before
calling publish or subscribe.

00:01:37.700 --> 00:01:39.840
For example, a stateful
button like this

00:01:39.840 --> 00:01:42.550
is perfect to let users
know Nearby is active.

00:01:42.550 --> 00:01:44.340
Waiting for user
intent is important,

00:01:44.340 --> 00:01:46.506
because your app will need
to prompt the user to get

00:01:46.506 --> 00:01:47.860
permission to use Nearby.

00:01:47.860 --> 00:01:50.550
Nearby introduces a
new runtime permission,

00:01:50.550 --> 00:01:53.220
consistent with how Android
M handles permissions.

00:01:53.220 --> 00:01:55.330
You don't need to add
anything to your manifest.

00:01:55.330 --> 00:01:56.913
And that's important,
because your app

00:01:56.913 --> 00:01:58.870
will continue to auto update.

00:01:58.870 --> 00:02:00.374
Before calling
publish or subscribe,

00:02:00.374 --> 00:02:02.040
you want to check to
see if your app has

00:02:02.040 --> 00:02:04.830
permission to use Nearby
with get permission status.

00:02:04.830 --> 00:02:07.400
Return status object tells
if you have a permission,

00:02:07.400 --> 00:02:09.370
and gives you a way to
ask for it if you don't.

00:02:09.370 --> 00:02:12.230
You can see all this in
our examples on GitHub.

00:02:12.230 --> 00:02:14.720
The best part is it
all works on iOS.

00:02:14.720 --> 00:02:16.540
You can pod install
Nearby messages,

00:02:16.540 --> 00:02:20.230
and build a proximity experience
across iOS and Android.

00:02:20.230 --> 00:02:22.510
On iOS, when you call
publish, will automatically

00:02:22.510 --> 00:02:24.910
prompt the user with a
prepermission dialog to explain

00:02:24.910 --> 00:02:26.650
why the app needs microphone.

00:02:26.650 --> 00:02:28.940
If your app already has mic
access for other reasons,

00:02:28.940 --> 00:02:31.021
we'll trim down the
prepermission text.

00:02:31.021 --> 00:02:33.020
Well, let's say you're
publishing something more

00:02:33.020 --> 00:02:34.790
sensitive than a gaming avatar.

00:02:34.790 --> 00:02:37.560
Maybe an invite token, or
a pointer to a document.

00:02:37.560 --> 00:02:40.840
Nearby's default range of
about 100 feet, or 30 meters,

00:02:40.840 --> 00:02:42.900
might be too far for your taste.

00:02:42.900 --> 00:02:45.590
Let's restrict Nearby to
only using ultrasonic modem,

00:02:45.590 --> 00:02:48.260
and get that range down
to about five feet.

00:02:48.260 --> 00:02:50.990
The publish call optionally
takes a strategy object.

00:02:50.990 --> 00:02:53.930
Just call set distance
type earshot on that

00:02:53.930 --> 00:02:56.000
before passing it to publish.

00:02:56.000 --> 00:02:58.620
If your use case has natural
send and receive rolls,

00:02:58.620 --> 00:03:00.840
you can speed up the
exchange by telling Nearby

00:03:00.840 --> 00:03:03.560
which side should broadcast,
and which should scan,

00:03:03.560 --> 00:03:05.920
by calling set discovery mode.

00:03:05.920 --> 00:03:08.050
So that's how to use the
API at the code level.

00:03:08.050 --> 00:03:10.425
There are four tips to keep
in mind when you're designing

00:03:10.425 --> 00:03:11.840
your user flow for Nearby.

00:03:11.840 --> 00:03:13.160
The first is battery.

00:03:13.160 --> 00:03:15.617
Nearby is doing a lot with
the radios and sensors.

00:03:15.617 --> 00:03:17.700
An active publish or
subscribe will cause your app

00:03:17.700 --> 00:03:20.283
to consume battery at two and a
half to three and a half times

00:03:20.283 --> 00:03:21.440
the normal rate.

00:03:21.440 --> 00:03:23.565
So you don't want to have
that publish or subscribe

00:03:23.565 --> 00:03:24.540
going all the time.

00:03:24.540 --> 00:03:26.860
Second, you should
require an explicit action

00:03:26.860 --> 00:03:28.810
before invoking
Nearby-- a button

00:03:28.810 --> 00:03:31.697
or switch to activate Nearby,
or maybe a special screen.

00:03:31.697 --> 00:03:33.405
You can find our
standard icons for these

00:03:33.405 --> 00:03:36.410
at developers.google.com/nearby.

00:03:36.410 --> 00:03:38.630
Third is to avoid
surprising your users.

00:03:38.630 --> 00:03:40.070
The UI should make
clear what data

00:03:40.070 --> 00:03:42.090
will be visible to
nearby users of your app

00:03:42.090 --> 00:03:43.860
before you call publish.

00:03:43.860 --> 00:03:45.960
Also, when Nearby
is active we suggest

00:03:45.960 --> 00:03:48.900
indicating this to your
users with an animation.

00:03:48.900 --> 00:03:51.050
Finally, exiting
the app or leaving

00:03:51.050 --> 00:03:52.720
the flow that
requires Nearby means

00:03:52.720 --> 00:03:55.310
you should stop any active
publish or subscribe.

00:03:55.310 --> 00:03:57.170
In your activities
on pause method,

00:03:57.170 --> 00:03:59.970
call unpublish and unsubscribe.

00:03:59.970 --> 00:04:01.460
So that's Nearby messages.

00:04:01.460 --> 00:04:04.150
A new way to reduce the friction
of working or playing together

00:04:04.150 --> 00:04:06.000
when your users are together.

00:04:06.000 --> 00:04:08.110
Visit
developers.google.com/nearby

00:04:08.110 --> 00:04:09.220
to get started.

00:04:09.220 --> 00:04:10.820
We can't wait to
see what you build.

00:04:10.820 --> 00:04:13.870
[MUSIC PLAYING]

