WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:02.640
So first we can write down the partial

00:00:02.640 --> 00:00:06.160
orders that we see in the distributed system.

00:00:06.160 --> 00:00:09.020
You can see that 'a' happens before 'b',

00:00:09.020 --> 00:00:12.970
'b' happens before 'c', 'c' happens before 'e' and

00:00:12.970 --> 00:00:15.790
these are purely coming from the chain of

00:00:15.790 --> 00:00:18.970
communication and local events that are happening over here.

00:00:18.970 --> 00:00:21.025
When we come over here, we also observe

00:00:21.025 --> 00:00:26.030
that 'f' happens before 'e' that's because of sequentiality

00:00:26.030 --> 00:00:29.200
Of this process. And similarly, we can see that

00:00:29.200 --> 00:00:32.650
in process P1, a happens before d. So these

00:00:32.650 --> 00:00:35.590
are the partial orders and we already have an

00:00:35.590 --> 00:00:40.320
ordering for the events that follow this chain because the

00:00:40.320 --> 00:00:43.150
logical time stamp are assigned in this fashion. And

00:00:43.150 --> 00:00:45.130
in order to derive a total order we said

00:00:45.130 --> 00:00:48.270
we basically will believe the event time stamps. To

00:00:48.270 --> 00:00:51.550
order them totally. So we can order these events totally.

00:00:51.550 --> 00:00:55.640
A1, B2, C3, E5. We can order them totally.

00:00:55.640 --> 00:00:57.720
Now let's look at the concurrent events that are

00:00:57.720 --> 00:01:01.440
happening. The concurrent events that are happening is d

00:01:01.440 --> 00:01:05.570
over here is concurrent with all the other events

00:01:05.570 --> 00:01:08.650
in the other processes. D is concurrent with b

00:01:08.650 --> 00:01:11.080
and c. It is concurrent with f and e.

00:01:11.080 --> 00:01:13.240
And similarly if you look at this event f,

00:01:14.260 --> 00:01:16.890
it's concurrent with all the events that are happening

00:01:16.890 --> 00:01:19.710
in process P2 and P1, right. So this is

00:01:19.710 --> 00:01:22.720
what you as the concurrent events. So now what we

00:01:22.720 --> 00:01:25.570
have to do is, given that these concurrent events, we

00:01:25.570 --> 00:01:29.110
have to somehow Fit them into a total order. As

00:01:29.110 --> 00:01:32.180
I said before no problem in fitting these guys

00:01:32.180 --> 00:01:35.520
into a total order because they already have time stamps

00:01:35.520 --> 00:01:39.710
that distinguish them from one another. The time stamp associated

00:01:39.710 --> 00:01:41.960
with a is 1, b is 2, c is 3,

00:01:41.960 --> 00:01:48.380
e is 5. No problem with that. So the real problem comes with f and d. Now the

00:01:48.380 --> 00:01:55.040
sequentiality of this process is what made the time stamp associated with e to

00:01:55.040 --> 00:02:00.550
be 5 because the message that came over here had a time stamp of 3 but we

00:02:00.550 --> 00:02:07.180
associated a time stamp of 5 with e. Because the local event preceding e have

00:02:07.180 --> 00:02:12.970
a time stamp of 4, so we pick 5 as the time stamp to associate with e, so that

00:02:12.970 --> 00:02:16.450
the sequentiality of this process p3 is respected. So, we've

00:02:16.450 --> 00:02:19.520
got this, and now we've got f and d, and

00:02:19.520 --> 00:02:23.560
so f obviously is going to sneak in Before e, that,

00:02:23.560 --> 00:02:26.780
that's no problem, that is coming from the sequentiality, but

00:02:26.780 --> 00:02:32.840
where will we put d, do we should be put d after e? Or should we put d before e?

00:02:32.840 --> 00:02:35.320
In the total order. This is where the

00:02:35.320 --> 00:02:38.430
breaking the tie using process id comes into

00:02:38.430 --> 00:02:41.820
play, Because these two guys are concurrent events

00:02:41.820 --> 00:02:45.210
in the system, we are breaking the tie using

00:02:45.210 --> 00:02:47.670
the process ID. P1 happens to be less

00:02:47.670 --> 00:02:51.280
than P3 in process ID space and therefore we

00:02:51.280 --> 00:02:53.355
are going to say in the total order,

00:02:53.355 --> 00:02:57.650
dis going to be ahead, totally ordered, before e.

00:02:57.650 --> 00:03:02.320
So the final ordering that we end up with, the total order that we end up with,

00:03:02.320 --> 00:03:07.920
is a0, b, c, F, and then d. And then

00:03:07.920 --> 00:03:11.750
e, so that's the total order that we come up with. Respecting the logical

00:03:11.750 --> 00:03:14.400
time stamp associated with the events, and

00:03:14.400 --> 00:03:16.500
breaking the tie using the process ID.

