WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:04.890
Is there a downside to the microkernel based approach? Well, there is. There is

00:00:04.890 --> 00:00:08.460
a potential for performance loss. Now consider

00:00:08.460 --> 00:00:12.890
this monolithic structure. Let's say this application

00:00:12.890 --> 00:00:19.770
makes a call to the file system to open up a file. The application slips

00:00:19.770 --> 00:00:25.290
through this red line into the hardware address space of the operating system.

00:00:25.290 --> 00:00:27.180
It runs in privileged mode because the

00:00:27.180 --> 00:00:29.990
operating system may have to do certain things

00:00:29.990 --> 00:00:33.230
that are privileged, and therefore, the hardware

00:00:33.230 --> 00:00:36.630
architecture of the CPU usually allows a privileged

00:00:36.630 --> 00:00:41.752
mode for execution of the operating system code. So now the app is now inside

00:00:41.752 --> 00:00:45.007
the operating system in a privileged mode

00:00:45.007 --> 00:00:50.440
with one instruction usually, called a trap instruction.

00:00:50.440 --> 00:00:56.240
For example, a system call results in a trap into the operating system. And once

00:00:56.240 --> 00:00:59.140
inside the operating system, all the work that

00:00:59.140 --> 00:01:03.350
needs to be done in order to satisfy

00:01:03.350 --> 00:01:05.360
the file system call that the app

00:01:05.360 --> 00:01:09.540
made. For instance, contacting the storage manager, contacting

00:01:09.540 --> 00:01:12.290
the memory manager and so on. All off

00:01:12.290 --> 00:01:15.810
that, are available as components within this blob.

00:01:15.810 --> 00:01:20.850
Which means that those components can be accessed at the speed of normal

00:01:20.850 --> 00:01:26.360
procedure call in order to handle the original request from this application.

00:01:26.360 --> 00:01:31.122
On the other hand, if you look at a microkernel based

00:01:31.122 --> 00:01:36.350
structure, the application has to make an IPC call in

00:01:36.350 --> 00:01:40.930
order to contact the service, which is, in this case, a file system

00:01:40.930 --> 00:01:44.350
service let's say. Which means that the application has

00:01:44.350 --> 00:01:48.320
to go through the microkernel, making the IPC call. Going

00:01:48.320 --> 00:01:50.860
up to the file system and the file system does

00:01:50.860 --> 00:01:53.810
the work, makes another IPC call in order to deliver

00:01:53.810 --> 00:01:56.700
the results of that system service back up to

00:01:56.700 --> 00:01:59.370
the application. So the minimum traversal so that you can

00:01:59.370 --> 00:02:03.280
see is going from the application of the microkernel, microkernel

00:02:03.280 --> 00:02:06.440
to the file system, and back into the microkernel and

00:02:06.440 --> 00:02:09.380
back up to the application. Potentially, there may

00:02:09.380 --> 00:02:15.210
be many more calls that may happen among servers

00:02:15.210 --> 00:02:17.860
that are sitting above the microkernel. Because the file

00:02:17.860 --> 00:02:20.670
system may have to contact the storage manager and

00:02:20.670 --> 00:02:22.990
the file system may have to contact the

00:02:22.990 --> 00:02:26.010
memory manager. All of those are server processes living

00:02:26.010 --> 00:02:29.240
above the microkernel and all of them require IPC

00:02:29.240 --> 00:02:32.010
for talking to one another. So what that means

00:02:32.010 --> 00:02:35.430
is that with this structure, there is a potential

00:02:35.430 --> 00:02:38.270
that we may have to switch between the address

00:02:38.270 --> 00:02:42.280
spaces of the application and many services that are

00:02:42.280 --> 00:02:45.960
living on top of the microkernel. Whereas in the

00:02:45.960 --> 00:02:48.000
case of the monolithic structure that I showed you

00:02:48.000 --> 00:02:51.810
here, there is only two address space switches, one

00:02:51.810 --> 00:02:54.620
to go from the application into the operating system,

00:02:54.620 --> 00:02:57.430
and the other to return back to the application.

00:02:57.430 --> 00:03:00.600
Whereas in a microkernel based design, there could potentially

00:03:00.600 --> 00:03:03.450
be several address space switches depending on the number of

00:03:03.450 --> 00:03:07.570
servers that need to be contacted in order to satisfy

00:03:07.570 --> 00:03:11.790
one system call that may be emanating from the application.

