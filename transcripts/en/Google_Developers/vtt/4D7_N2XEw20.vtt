WEBVTT
Kind: captions
Language: en

00:00:02.610 --> 00:00:05.140
As your mobile device is busy
executing tasks, calculating

00:00:05.140 --> 00:00:07.672
how to split a bar tab, and
uploading photos of your cat,

00:00:07.672 --> 00:00:09.880
the underlying hardware is
effectively pulling energy

00:00:09.880 --> 00:00:11.760
from your battery to
accomplish this work.

00:00:11.760 --> 00:00:14.304
And as we've all seen,
the more work your device

00:00:14.304 --> 00:00:16.720
does, the more battery it
pulls, and the sooner your users

00:00:16.720 --> 00:00:18.800
are left holding onto
an uncharged phone that

00:00:18.800 --> 00:00:20.810
doubles as a really
expensive doorstop.

00:00:20.810 --> 00:00:22.629
My name is Colt
McAnlis, and the key

00:00:22.629 --> 00:00:24.920
to writing applications that
are light on battery drain

00:00:24.920 --> 00:00:26.550
has everything to do
with understanding

00:00:26.550 --> 00:00:28.422
how the process
works under the hood.

00:00:28.422 --> 00:00:30.130
See, in the electrical
engineering world,

00:00:30.130 --> 00:00:32.670
this action of hardware
pulling energy from the battery

00:00:32.670 --> 00:00:35.932
to execute a task is called
current draw over time.

00:00:35.932 --> 00:00:37.390
And anyone who has
an undergraduate

00:00:37.390 --> 00:00:38.848
in electrical
engineering will tell

00:00:38.848 --> 00:00:40.620
you not every action
on your device

00:00:40.620 --> 00:00:43.030
draws the same amount of
battery in the same way

00:00:43.030 --> 00:00:44.640
over the same period of time.

00:00:44.640 --> 00:00:46.860
To prove this, let's take
a handy Nexus 5 device,

00:00:46.860 --> 00:00:49.585
turn it in airplane mode, and
then let it sit on our desk.

00:00:49.585 --> 00:00:51.710
Now, if we leave the phone
like this doing nothing,

00:00:51.710 --> 00:00:53.410
we'll roughly get
a month of life

00:00:53.410 --> 00:00:55.360
before the battery is
completely exhausted.

00:00:55.360 --> 00:00:57.569
We can consider this baseline.

00:00:57.569 --> 00:00:59.860
But that's typically not how
these devices are actually

00:00:59.860 --> 00:01:00.550
used.

00:01:00.550 --> 00:01:02.430
As soon as you're
active with your device,

00:01:02.430 --> 00:01:03.910
you're going to be
eating up more battery.

00:01:03.910 --> 00:01:05.790
Now, active in this
context includes anything

00:01:05.790 --> 00:01:08.790
like CPU doing work, booting
up the cellular radio

00:01:08.790 --> 00:01:11.590
to transmit data, or the
screen itself being awake.

00:01:11.590 --> 00:01:13.980
So the question is, what
tasks are my application

00:01:13.980 --> 00:01:15.980
doing that are eating
up the most battery?

00:01:15.980 --> 00:01:18.380
And sadly, this really
isn't an easy answer.

00:01:18.380 --> 00:01:20.520
See, monitoring battery
drain at a hardware level

00:01:20.520 --> 00:01:23.260
is a catch-22 because, of
course, the monitoring hardware

00:01:23.260 --> 00:01:25.590
itself then needs to eat
up the phone's battery

00:01:25.590 --> 00:01:28.330
in order to execute the actions
to record how much battery

00:01:28.330 --> 00:01:30.170
is actually being drained.

00:01:30.170 --> 00:01:33.672
As such, most devices that
aren't specialty don't do this.

00:01:33.672 --> 00:01:35.880
The only real way to gather
these types of statistics

00:01:35.880 --> 00:01:38.910
on battery draw is to attach a
third party piece of hardware

00:01:38.910 --> 00:01:41.320
to your Android device which
can record these operations

00:01:41.320 --> 00:01:43.380
without using up the
phone's power to do so.

00:01:43.380 --> 00:01:46.080
Now, when we do this, we get
some really, really interesting

00:01:46.080 --> 00:01:47.290
information.

00:01:47.290 --> 00:01:49.290
For example, we can see
that when the Nexus 5 is

00:01:49.290 --> 00:01:51.430
in standby mode, there's
actually not much power

00:01:51.430 --> 00:01:53.830
drain going on, but when
we wake up our device

00:01:53.830 --> 00:01:55.330
and turn on the
screen, we can see

00:01:55.330 --> 00:01:57.900
there's a huge spike in
the battery monitor, which

00:01:57.900 --> 00:01:59.007
you'd kind of expect.

00:01:59.007 --> 00:02:01.090
Turning on the LEDs,
painting the screen, and then

00:02:01.090 --> 00:02:03.010
all the CPU, GPU
work required to draw

00:02:03.010 --> 00:02:06.130
on the screen isn't free from
a battery perspective which,

00:02:06.130 --> 00:02:08.090
by the way, is completely
different than when

00:02:08.090 --> 00:02:09.780
an application
wakes up the device,

00:02:09.780 --> 00:02:12.380
say, if it's using a wakelock
or an alarm manager or a job

00:02:12.380 --> 00:02:13.690
scheduler API.

00:02:13.690 --> 00:02:15.380
When a device is
asleep and is woken up

00:02:15.380 --> 00:02:16.770
through one of
these APIs, you'll

00:02:16.770 --> 00:02:19.660
see an initial battery spike as
the processor first boots up,

00:02:19.660 --> 00:02:22.247
followed by a bit of battery
draw as some work is executed.

00:02:22.247 --> 00:02:24.580
Now, it's worth pointing out
that once the work is over,

00:02:24.580 --> 00:02:26.020
the device will
go back to sleep,

00:02:26.020 --> 00:02:28.080
and this is really important.

00:02:28.080 --> 00:02:30.039
Sleep saves battery life.

00:02:30.039 --> 00:02:31.580
If you forget to
let the device sleep

00:02:31.580 --> 00:02:33.955
or are keeping the device
awake for long periods of time,

00:02:33.955 --> 00:02:37.060
the battery is going to
become drained in no time.

00:02:37.060 --> 00:02:39.710
Now, your mobile cellular
radio is a completely different

00:02:39.710 --> 00:02:41.670
story, that is, anytime
your device tries

00:02:41.670 --> 00:02:43.810
to send data over
the mobile network.

00:02:43.810 --> 00:02:46.150
You can see that there is a
quick wakeup cost associated

00:02:46.150 --> 00:02:48.191
with getting your mobile
hardware ready, followed

00:02:48.191 --> 00:02:50.360
by a large spike for
sending out a packet

00:02:50.360 --> 00:02:51.920
and receiving one back.

00:02:51.920 --> 00:02:53.850
Now, because the
radio getting started

00:02:53.850 --> 00:02:56.560
process is so
expensive, the hardware

00:02:56.560 --> 00:02:59.400
itself will actually stay awake
for a short period of time

00:02:59.400 --> 00:03:01.420
after it's done
executing work in case

00:03:01.420 --> 00:03:04.710
there are more packets coming
its way from the network.

00:03:04.710 --> 00:03:05.860
This is great data.

00:03:05.860 --> 00:03:08.330
I mean, this is cool stuff,
but sadly, most developers

00:03:08.330 --> 00:03:10.380
don't have access to
this kind of equipment.

00:03:10.380 --> 00:03:12.150
Thankfully, with the
L release of Android,

00:03:12.150 --> 00:03:13.566
we've got a whole
new set of tools

00:03:13.566 --> 00:03:16.300
to help you optimize battery
draw for your application.

00:03:16.300 --> 00:03:19.050
Firstly, users can see how
much battery your application

00:03:19.050 --> 00:03:22.319
is drawing with the new
on-device battery details data.

00:03:22.319 --> 00:03:24.860
You can access this by opening
Settings, clicking on Battery,

00:03:24.860 --> 00:03:27.120
and then choosing your
application, at which point

00:03:27.120 --> 00:03:28.630
you'll be provided
with key details

00:03:28.630 --> 00:03:30.963
about how much time your
application is spending keeping

00:03:30.963 --> 00:03:32.940
the phone awake or
doing networking tasks.

00:03:32.940 --> 00:03:35.340
And trust me, if your
app's battery profile looks

00:03:35.340 --> 00:03:37.480
like this, you
might be in trouble.

00:03:37.480 --> 00:03:39.150
Secondly, there's
a brand new tool

00:03:39.150 --> 00:03:42.050
that lets you visualize these
same battery eating actions

00:03:42.050 --> 00:03:44.120
over the usage cycle
of your application.

00:03:44.120 --> 00:03:45.750
The Battery
Historian tool allows

00:03:45.750 --> 00:03:47.960
you to create a
timeline for each task

00:03:47.960 --> 00:03:50.760
that you can easily see how
often, for example, your app

00:03:50.760 --> 00:03:51.970
starts up the radio.

00:03:51.970 --> 00:03:53.900
This information gives
you a clear target

00:03:53.900 --> 00:03:56.270
for your battery
optimization efforts.

00:03:56.270 --> 00:03:57.810
But honestly,
fixing these issues

00:03:57.810 --> 00:03:59.580
is a whole separate
topic entirely,

00:03:59.580 --> 00:04:01.340
which is why you need to check
out the rest of the Android

00:04:01.340 --> 00:04:03.423
Performance Patterns
content, which will teach you

00:04:03.423 --> 00:04:06.030
the beautiful zen of
battery management.

00:04:06.030 --> 00:04:08.830
So keep calm, profile your
code, and always remember,

00:04:08.830 --> 00:04:10.560
perf matters.

