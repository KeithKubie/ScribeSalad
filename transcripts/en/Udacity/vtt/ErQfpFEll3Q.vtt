WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:03.590
Another kind of synchronization perimeters that is very

00:00:03.590 --> 00:00:08.440
popular in multithread apparel programs, and extremely useful in

00:00:08.440 --> 00:00:12.060
the developing applications, especially in the scientific domain,

00:00:12.060 --> 00:00:15.050
is what is called a barrier synchronization. The idea

00:00:15.050 --> 00:00:18.000
here is that, there are multiple threads and

00:00:18.000 --> 00:00:20.750
they are doing some computation And they want to get

00:00:20.750 --> 00:00:22.890
to a point where they want to know where everybody

00:00:22.890 --> 00:00:25.470
else is at that, at that point of time.

00:00:25.470 --> 00:00:27.630
And they want that insurance that everybody has reached a

00:00:27.630 --> 00:00:31.880
particular point in the respective computations so that then they can

00:00:31.880 --> 00:00:34.820
all go forward from, from this barrier to the next phase

00:00:34.820 --> 00:00:38.740
of the computation. Now I'm sure that you've gone to dinner

00:00:38.740 --> 00:00:41.970
with your friends and one of the experiences that you

00:00:41.970 --> 00:00:45.100
may have had is that, and you may have a party

00:00:45.100 --> 00:00:48.270
of four or five people that are going for dinner. Two

00:00:48.270 --> 00:00:51.930
or three of you are showing up at the dinner restaurant.

00:00:52.970 --> 00:00:55.460
And the usher say wait, you know, do you have the

00:00:55.460 --> 00:00:59.260
entire members of your party here? If they're not here wait til

00:00:59.260 --> 00:01:01.200
the other members of the party show up, so that I can

00:01:01.200 --> 00:01:03.440
seat you all at the same time. And that's sort of the

00:01:03.440 --> 00:01:07.280
same thing that's happening with barrier condition. It is possible that, you

00:01:07.280 --> 00:01:11.240
know thread t1 and t2 arrive at the barrier, meaning they completed

00:01:11.240 --> 00:01:14.340
their portion of the work. They've gotten to this barrier but the

00:01:14.340 --> 00:01:18.130
other threads that are lagging behind and those shirkers are going to eventually

00:01:18.130 --> 00:01:21.220
show up but they're not here yet and until

00:01:21.220 --> 00:01:24.060
everybody shows up nobody can advance to the next

00:01:24.060 --> 00:01:26.670
phase of the computation. So that's the idea, behind

00:01:26.670 --> 00:01:29.490
barrier synchronization, exactly similar to the analogy that I

00:01:29.490 --> 00:01:32.740
mentioned here. So we looked at two types of

00:01:32.740 --> 00:01:36.290
synchronization primitives. One is the lock, and the other

00:01:36.290 --> 00:01:39.360
is the barrier synchronization. Now, these are concepts I

00:01:39.360 --> 00:01:43.240
am expecting that you know already. If you find that

00:01:43.240 --> 00:01:49.020
these two concepts are either new to you, or you would Like some refresher for

00:01:49.020 --> 00:01:55.220
that, I strongly advise you to go and, and take a look at the review

00:01:55.220 --> 00:01:58.890
lesson that we have on multithreaded programming.

00:01:58.890 --> 00:02:02.230
Now that we understand the basic synchronization primitives

00:02:02.230 --> 00:02:05.740
that are needed for developing multithreaded applications

00:02:05.740 --> 00:02:08.400
on a shared memory machine. It's time now

00:02:08.400 --> 00:02:12.600
to look at how to implement them. But before we do that,

00:02:12.600 --> 00:02:16.200
let's do a quiz to get you in the right frame of mind.

