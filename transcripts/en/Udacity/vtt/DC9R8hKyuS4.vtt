WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:03.570
To reduce the time it takes
to send data, a lot of websites

00:00:03.569 --> 00:00:06.990
compress their assets with gzip
or other compression algorithms

00:00:06.990 --> 00:00:08.429
that work on the web.

00:00:08.429 --> 00:00:10.650
The HT [INAUDIBLE]
boilerplate project

00:00:10.650 --> 00:00:12.690
uses the gzip compression.

00:00:12.689 --> 00:00:15.330
Check below for more
information about this.

00:00:15.330 --> 00:00:17.410
Compression of
the data is great,

00:00:17.410 --> 00:00:19.679
but the request and
response headers are still

00:00:19.679 --> 00:00:21.660
being sent uncompressed.

00:00:21.660 --> 00:00:24.490
When you think about it, that
doesn't make a lot of sense.

00:00:24.489 --> 00:00:27.750
They are plain text, which
makes them highly compressible.

00:00:27.750 --> 00:00:30.690
Also, they repeat a
lot across requests.

00:00:30.690 --> 00:00:33.689
The host header's always the
same, the cookies are the same,

00:00:33.689 --> 00:00:35.250
and so are some other headers.

00:00:35.250 --> 00:00:38.939
In Google's research paper, they
state that on average headers

00:00:38.939 --> 00:00:41.280
take up about 800 bytes.

00:00:41.280 --> 00:00:43.920
Let's look at the potential
savings we could have.

00:00:43.920 --> 00:00:47.760
If a site made 100 requests,
roughly 80 kilobytes of data

00:00:47.759 --> 00:00:50.309
would be taken up by the
headers, and most of that

00:00:50.310 --> 00:00:51.670
would be redundant.

00:00:51.670 --> 00:00:54.510
We'd save a lot of space if
we could compress the headers.

00:00:54.509 --> 00:00:57.719
Unfortunately, we can't
do that with HTTP1,

00:00:57.719 --> 00:01:00.799
but with HTTP2, we can.

