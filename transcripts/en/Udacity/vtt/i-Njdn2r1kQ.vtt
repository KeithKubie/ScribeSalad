WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:03.100
So now that we understand the data structures, let's

00:00:03.100 --> 00:00:05.620
put the data structures to work. Let's first look

00:00:05.620 --> 00:00:08.050
at what happens on a page fault. On a

00:00:08.050 --> 00:00:12.840
page fault, the node first coverts the virtual address to

00:00:12.840 --> 00:00:15.320
a UID and once it converts it to the

00:00:15.320 --> 00:00:18.620
UID it goes to the page ownership directory. And as

00:00:18.620 --> 00:00:22.220
I mentioned, the page ownership directory is something that

00:00:22.220 --> 00:00:25.950
I can trust. It'll tell me, given this UID I'll

00:00:25.950 --> 00:00:31.910
tell you who the owner of this page is. And you go to him because he has the GCD

00:00:31.910 --> 00:00:38.000
data structure for this. So, node A finds out the identity of the owner for this

00:00:38.000 --> 00:00:45.650
UID, and that happens to be node B. So it sends the UID over to node B, and node

00:00:45.650 --> 00:00:52.100
B, because it is the owner for this UID, it looks up its GCD data structure and

00:00:52.100 --> 00:00:56.030
says, oh, the PFD that can translate

00:00:56.030 --> 00:00:59.720
this UID which actually represents this virtual address

00:00:59.720 --> 00:01:02.910
is actually contained in this particular node,

00:01:02.910 --> 00:01:05.930
node C. So, that's the content of this

00:01:05.930 --> 00:01:11.570
data structure, given a UID what is the node ID that contains the PFD. Remember

00:01:11.570 --> 00:01:13.890
that PFD is equivalent of a page table

00:01:13.890 --> 00:01:17.120
in the normal system and therefore that's the

00:01:17.120 --> 00:01:21.590
node that I want to send this UID to so that we can do the translation

00:01:21.590 --> 00:01:26.810
for this virtual address. So node B sends the UID over to node C, and node C

00:01:26.810 --> 00:01:31.930
contains the PFD that has the mapping between the UID and the

00:01:31.930 --> 00:01:37.030
page frame number that is backed by this node

00:01:37.030 --> 00:01:42.030
for this UID, retrieves the page. It's a hit. Sends it over to

00:01:42.030 --> 00:01:49.350
node A. Node A is happy. It can then map this virtual address into its internal

00:01:49.350 --> 00:01:53.010
structure and the page fault service is complete

00:01:53.010 --> 00:01:56.770
and it can resume the process that was blocked

00:01:56.770 --> 00:01:58.490
for this page fault. So you can see

00:01:58.490 --> 00:02:01.650
that, potentially, when a page fault happens I can

00:02:01.650 --> 00:02:04.630
have three level of network communication. Of course

00:02:04.630 --> 00:02:07.380
the first look up of the POD is local

00:02:07.380 --> 00:02:10.008
to my node because this POD data structure is

00:02:10.008 --> 00:02:13.450
replicated on every node. So from the UID, I can

00:02:13.450 --> 00:02:16.350
find the owner for the UID. But then I

00:02:16.350 --> 00:02:19.500
have to send a network message over to the node

00:02:19.500 --> 00:02:22.100
that contains the GCD for this UID. And then

00:02:22.100 --> 00:02:26.580
he'll then send it to the node that has this

00:02:26.580 --> 00:02:29.371
page so that that page can come back. Now

00:02:29.371 --> 00:02:32.392
this network communication I am willing to tolerate because it

00:02:32.392 --> 00:02:34.900
is equivalent to performing the role of what the disk

00:02:34.900 --> 00:02:37.134
would have done. And maybe it is much better than

00:02:37.134 --> 00:02:38.800
going to a disk in order to get the missing

00:02:38.800 --> 00:02:41.300
page. So, it is happening only on page fault and

00:02:41.300 --> 00:02:46.450
since it is on a page fault, this network communication is okay. But, this is an

00:02:46.450 --> 00:02:52.100
extra network communication. Fortunately, the common case is a page fault

00:02:52.100 --> 00:02:57.462
is servicing the request of a local process on node A, and so the

00:02:57.462 --> 00:03:03.040
page is a non-shared page and if it is a non-shared page most likely

00:03:03.040 --> 00:03:08.420
the UID space that corresponds to the missing page is also managed

00:03:08.420 --> 00:03:13.480
by this node. Or in other words, both the POD and the

00:03:13.480 --> 00:03:18.310
GCD corresponding to a particular UID is mostly on this node

00:03:18.310 --> 00:03:23.050
itself. And this is true for non-shared pages, and so A and

00:03:23.050 --> 00:03:29.270
B are exactly the same node. So there is no network communication to go from the

00:03:29.270 --> 00:03:32.700
POD to GCD to find out the PFD.

00:03:32.700 --> 00:03:36.520
So hopefully the only network communication that happens

00:03:36.520 --> 00:03:39.450
on every page fault is a network communication

00:03:39.450 --> 00:03:42.530
to go to this node that is serving

00:03:42.530 --> 00:03:48.390
the role of a disk and get the page from him. That's okay to incur because

00:03:48.390 --> 00:03:52.160
it probably is much lesser than going to the disk in

00:03:52.160 --> 00:03:55.550
order to do the page access. So the page fault service

00:03:55.550 --> 00:03:58.210
for the common case is going to be pretty quick. So

00:03:58.210 --> 00:04:00.020
the important message that I want you to get out of

00:04:00.020 --> 00:04:03.600
this is that even though these distributed data structures may make

00:04:03.600 --> 00:04:06.460
it look like you're going to have a lot of network

00:04:06.460 --> 00:04:11.140
communication, the important thing to note is that it happens only

00:04:11.140 --> 00:04:13.550
when there is a page fault. And since most of the page

00:04:13.550 --> 00:04:16.220
faults, the common case, is going to be non-shared

00:04:16.220 --> 00:04:19.985
pages. The data structure POD and GCD are probably

00:04:19.985 --> 00:04:23.240
co-resident on the same node. So, even though I've

00:04:23.240 --> 00:04:25.810
shown two different nodes here, A and B may

00:04:25.810 --> 00:04:29.570
be exactly the same node. And so looking up

00:04:29.570 --> 00:04:34.250
the PFD that currently is backing this particular UID

00:04:34.250 --> 00:04:36.100
is going to be local to this node and

00:04:36.100 --> 00:04:38.640
so we can directly go to the node that contains

00:04:38.640 --> 00:04:41.550
the PFD and make the page fault service pretty quick.

