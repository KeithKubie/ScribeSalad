WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:02.190
So what can we do about it?

00:00:02.190 --> 00:00:05.260
How can we deal with these
kind of failures and delays?

00:00:05.260 --> 00:00:08.350
We could attempt a network fetch and
if that fails,

00:00:08.350 --> 00:00:11.670
get fallback content
from some kind of cash,

00:00:11.670 --> 00:00:14.960
perhaps the last content we were
able to get from the network.

00:00:14.960 --> 00:00:16.710
However, we have to wait for

00:00:16.710 --> 00:00:19.780
the network to fail before
showing fall back content.

00:00:19.780 --> 00:00:24.029
And if the connection is slow,
users still get nothing,

00:00:24.029 --> 00:00:27.430
that rage inducing life I experience.

00:00:27.430 --> 00:00:30.760
This is why the gold
standard is offline first.

00:00:30.760 --> 00:00:33.920
Offline first means getting as many
things on the screen as possible,

00:00:33.920 --> 00:00:38.450
using stuff already on the user's
device in caches and such.

00:00:38.450 --> 00:00:41.850
We might still go to the network,
but we're not going to wait for it.

00:00:41.850 --> 00:00:44.710
We'll get stuff from a cache
as much as we can and

00:00:44.710 --> 00:00:48.090
then update the page if we finally
get content from the network.

00:00:49.190 --> 00:00:52.390
When we get that fresh data from the
network, we can update what the user is

00:00:52.390 --> 00:00:56.250
looking at and also save that new
data into the cache for next time.

00:00:57.330 --> 00:01:01.140
If we can't get fresh data from the
network, we stick with what we've got.

00:01:01.140 --> 00:01:04.440
Maybe it's out of date stale data,
maybe it isn't.

00:01:04.440 --> 00:01:05.260
Without the network,

00:01:05.260 --> 00:01:10.800
we might not know but one thing's
certain, it's way better than nothing.

00:01:10.800 --> 00:01:14.200
Taking an offline first approach
means the user is happy online,

00:01:14.200 --> 00:01:17.710
happy offline, and
even happy with wi-fi.

00:01:17.710 --> 00:01:20.980
The less the user has to care
about connectivity, the better.

00:01:20.980 --> 00:01:23.560
This cause covers exactly
how we achieve that.

00:01:23.560 --> 00:01:25.710
But first,
let's see if we can get our U.S.

00:01:25.710 --> 00:01:27.950
correspondent Mike Wells on the line.

00:01:27.950 --> 00:01:30.190
&gt;&gt; Hey, we've got the connection
problems worked out over here.

00:01:30.190 --> 00:01:31.630
I got a whole new set up.

00:01:31.630 --> 00:01:34.580
&gt;&gt; Great, so
Mike you're a kind of end of level

00:01:34.580 --> 00:01:38.260
boss that these students must defeat in
order to progress on this course right?

00:01:38.260 --> 00:01:39.320
&gt;&gt; Defeat?

00:01:39.320 --> 00:01:42.670
Well kind of, but
it's not as scary as you make it sound.

00:01:42.670 --> 00:01:44.920
I'll be giving you some coding
challenges along the way, so

00:01:44.920 --> 00:01:47.750
you can get accustomed to actually
implementing these things.

00:01:47.750 --> 00:01:52.000
Taking a demo app from online only
to a fully offline first experience.

00:01:52.000 --> 00:01:55.270
In addition to coding challenges,
we'll do some multiple choice quizzes.

00:01:55.270 --> 00:01:56.630
In fact, let's do a quiz now.

