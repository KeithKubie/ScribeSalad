WEBVTT
Kind: captions
Language: en

00:00:00.850 --> 00:00:04.104
Hi, I'm Andrey and I'm an
engineer on Google News team.

00:00:04.104 --> 00:00:05.520
I'm here to talk
about some things

00:00:05.520 --> 00:00:07.460
we learned about building
performant web UI

00:00:07.460 --> 00:00:08.960
while building the
Google News phone

00:00:08.960 --> 00:00:11.090
and tablet mobile web apps.

00:00:11.090 --> 00:00:12.550
I'll describe how
we worked around

00:00:12.550 --> 00:00:14.310
the shortcomings
of mobile devices

00:00:14.310 --> 00:00:16.430
and took advantage of
modern browser features

00:00:16.430 --> 00:00:18.485
and ultimately delivered
engaging and fast news

00:00:18.485 --> 00:00:20.160
experiences.

00:00:20.160 --> 00:00:22.650
Mobile devices are rapidly
becoming the dominant platform

00:00:22.650 --> 00:00:25.450
to access online
content and services.

00:00:25.450 --> 00:00:28.196
Rapid growth of mobile devices
present a great opportunity,

00:00:28.196 --> 00:00:30.570
but also come with their own
set of technical and product

00:00:30.570 --> 00:00:31.980
challenges.

00:00:31.980 --> 00:00:33.710
Technically, mobile
devices generally

00:00:33.710 --> 00:00:37.372
suffer from slow and unreliable
networks, limited memory,

00:00:37.372 --> 00:00:39.830
relatively weak CPU and GPU,
and, of course, limited screen

00:00:39.830 --> 00:00:41.100
size.

00:00:41.100 --> 00:00:44.270
At the same time, most mobile
devices have modern OSs

00:00:44.270 --> 00:00:47.200
and have browsers which are
HTML5 compliant with features

00:00:47.200 --> 00:00:49.690
like local storage
and touch events.

00:00:49.690 --> 00:00:53.100
This opens new ways to
create engaging web apps.

00:00:53.100 --> 00:00:55.130
One of the most prominent
challenges of phones

00:00:55.130 --> 00:00:57.130
is slow network connections.

00:00:57.130 --> 00:00:59.730
This means that phone apps
should limit data consumption

00:00:59.730 --> 00:01:02.910
to as little as possible
on the connection.

00:01:02.910 --> 00:01:04.980
Now, this may prompt
developers to retrieve

00:01:04.980 --> 00:01:07.150
as little data as possible
in one data connection

00:01:07.150 --> 00:01:09.450
and make frequent data calls.

00:01:09.450 --> 00:01:11.150
This approach could
backfire, as opening

00:01:11.150 --> 00:01:14.030
a connection is quite
expensive and time-consuming.

00:01:14.030 --> 00:01:15.600
So a balance needs
to be maintained

00:01:15.600 --> 00:01:18.700
between data transfer on one
connection and opening multiple

00:01:18.700 --> 00:01:20.010
connections.

00:01:20.010 --> 00:01:22.700
On Google News, we balance this
by getting all the textual data

00:01:22.700 --> 00:01:25.580
of the phone web app in
one call to the server.

00:01:25.580 --> 00:01:27.800
Images are fetched later
on-- as they are not

00:01:27.800 --> 00:01:29.720
critical to the news
reading experience--

00:01:29.720 --> 00:01:31.470
as are various scripts
and resources which

00:01:31.470 --> 00:01:33.650
are not immediately needed.

00:01:33.650 --> 00:01:35.950
Another workaround
to slow connections

00:01:35.950 --> 00:01:39.460
is to optimize data access
around product usage patterns.

00:01:39.460 --> 00:01:41.040
In Google News,
we try to predict

00:01:41.040 --> 00:01:44.030
what the user would do next
and prefetch that data.

00:01:44.030 --> 00:01:46.610
This means we can
show content to users

00:01:46.610 --> 00:01:48.590
as quickly as possible.

00:01:48.590 --> 00:01:50.880
For example, when a user
swipes to a section,

00:01:50.880 --> 00:01:52.810
it's a good indication
that user could

00:01:52.810 --> 00:01:55.560
swipe to the next section
of our app as well.

00:01:55.560 --> 00:01:57.790
In that case, we prefetch
the next few sections

00:01:57.790 --> 00:02:00.590
while the user is active
on the current section.

00:02:00.590 --> 00:02:02.460
Another technique that
we use is to fetch

00:02:02.460 --> 00:02:05.110
partial concept of
a page beforehand.

00:02:05.110 --> 00:02:07.050
For example, we retrieve
the first article

00:02:07.050 --> 00:02:09.990
of all news stories while
fetching a section page data.

00:02:09.990 --> 00:02:12.110
When the user navigates
to a story page,

00:02:12.110 --> 00:02:14.180
we display the first
article immediately

00:02:14.180 --> 00:02:16.940
while fetching other
articles on the news story.

00:02:16.940 --> 00:02:19.440
We'll also show a silhouette
instead of an empty white space

00:02:19.440 --> 00:02:22.000
while fetching the
rest of the story page.

00:02:22.000 --> 00:02:25.010
This gives users some content
to interact with immediately

00:02:25.010 --> 00:02:26.810
and indicates to the
user that more content

00:02:26.810 --> 00:02:28.530
is being retrieved.

00:02:28.530 --> 00:02:31.290
Static resources such as
JavaScript, CSS, and sprites

00:02:31.290 --> 00:02:33.110
can be stored in local storage.

00:02:33.110 --> 00:02:35.039
Thus, the application
will avoid making

00:02:35.039 --> 00:02:37.080
HTTP HEAD calls to verify
that the cached browser

00:02:37.080 --> 00:02:39.420
version of the file
is good to use.

00:02:39.420 --> 00:02:42.530
This saves a few round
trips to the server.

00:02:42.530 --> 00:02:45.420
So these are some of the
transport layer considerations,

00:02:45.420 --> 00:02:48.125
but what about mobile
browser level optimizations?

00:02:48.125 --> 00:02:49.750
Well, the [INAUDIBLE]
rendering of that

00:02:49.750 --> 00:02:51.770
by browser internals
in the CPU and GPU

00:02:51.770 --> 00:02:53.880
have many more
deficiencies compared

00:02:53.880 --> 00:02:57.480
to typical desktop or
laptop machines today.

00:02:57.480 --> 00:02:59.650
You must be careful when
manipulating and accessing

00:02:59.650 --> 00:03:01.580
properties of DOM
elements, as it

00:03:01.580 --> 00:03:03.490
may result in full
or partial screen

00:03:03.490 --> 00:03:05.640
delay in the [INAUDIBLE].

00:03:05.640 --> 00:03:07.950
Use Chrome Dev
Tool's timeline view

00:03:07.950 --> 00:03:10.750
to see what the browser spends
time doing frame by frame.

00:03:10.750 --> 00:03:13.410
And you can turn on various
experimental settings that

00:03:13.410 --> 00:03:17.670
show internal drawing and
[INAUDIBLE] of the browser.

00:03:17.670 --> 00:03:19.840
When moving HTML5
elements on the screen--

00:03:19.840 --> 00:03:23.320
especially in the response to
user gestures-- use HTML5 3D

00:03:23.320 --> 00:03:24.420
transforms.

00:03:24.420 --> 00:03:27.010
This will offload [INAUDIBLE]
processing to the GPU,

00:03:27.010 --> 00:03:29.610
resulting in a much
smoother experience.

00:03:29.610 --> 00:03:31.330
GPU memory is quite
limited, so try

00:03:31.330 --> 00:03:33.470
to move only the elements
which are visible

00:03:33.470 --> 00:03:36.569
and hide the invisible
sides of elements.

00:03:36.569 --> 00:03:38.110
For elements that
are about to appear

00:03:38.110 --> 00:03:40.360
on the screen-- like when a
pane is about to be swiped

00:03:40.360 --> 00:03:41.930
onto a screen--
it's very helpful

00:03:41.930 --> 00:03:45.340
to bring them into the DOM
structure well ahead of time.

00:03:45.340 --> 00:03:48.060
And make them
renderable, meaning, you

00:03:48.060 --> 00:03:51.860
need to set CSS display property
to something other than none.

00:03:51.860 --> 00:03:54.640
Browsers are typically capable
of performing layout and pane

00:03:54.640 --> 00:03:57.310
of several screen elements
on a separate thread,

00:03:57.310 --> 00:03:59.460
often prioritizing among
different elements based

00:03:59.460 --> 00:04:01.519
on distance to visible viewport.

00:04:01.519 --> 00:04:03.310
If you absolutely need
to animate something

00:04:03.310 --> 00:04:05.990
with JavaScript, use the
RequestAnimationFrame API

00:04:05.990 --> 00:04:09.050
callbacks to synchronize
DOM changes with the vsync.

00:04:09.050 --> 00:04:10.830
Everything we've
talked about so far

00:04:10.830 --> 00:04:13.860
is also good practice when
developing other non-mobile web

00:04:13.860 --> 00:04:15.310
applications.

00:04:15.310 --> 00:04:17.829
But one key feature that
singles out mobile applications

00:04:17.829 --> 00:04:20.880
is that they are controlled
through gestures.

00:04:20.880 --> 00:04:23.000
Natively, browsers
support vertical swipes

00:04:23.000 --> 00:04:25.410
through the vertical scroll
of the main body element.

00:04:25.410 --> 00:04:27.201
But if you want your
application to respond

00:04:27.201 --> 00:04:29.672
to horizontal swipe or
other gestures like pinch,

00:04:29.672 --> 00:04:31.880
you'll need to process raw
touch events in JavaScript

00:04:31.880 --> 00:04:34.350
and animate appropriate
parts of the UI.

00:04:34.350 --> 00:04:36.780
To do so, the
touchstart event should

00:04:36.780 --> 00:04:38.530
be processed in the
consecutive touchmove.

00:04:38.530 --> 00:04:40.196
And ultimate touchend
events should also

00:04:40.196 --> 00:04:42.610
be processed in this JavaScript.

00:04:42.610 --> 00:04:44.420
And this is where
it gets tricky.

00:04:44.420 --> 00:04:46.990
For UI to appear
smooth, all transitions

00:04:46.990 --> 00:04:49.700
should run at about
60 frames per second

00:04:49.700 --> 00:04:52.611
which leaves about 60
milliseconds per frame.

00:04:52.611 --> 00:04:54.610
The main thread that's
responsible for reporting

00:04:54.610 --> 00:04:57.340
and executing application
specific touchevent handlers

00:04:57.340 --> 00:05:00.100
must complete script
execution and browser

00:05:00.100 --> 00:05:02.810
paning within those
60 milliseconds.

00:05:02.810 --> 00:05:06.030
What this means is that code
in touchstart-- and especially

00:05:06.030 --> 00:05:07.850
touchmove handlers--
should complete

00:05:07.850 --> 00:05:10.130
in no more than a
few milliseconds.

00:05:10.130 --> 00:05:12.120
For comparison,
full-screen layout in pane

00:05:12.120 --> 00:05:14.270
might take 20 to 30
milliseconds resulting

00:05:14.270 --> 00:05:16.360
in several skipped frames.

00:05:16.360 --> 00:05:21.065
The thing that allows 40
panes to be quick is CSS 3D

00:05:21.065 --> 00:05:24.850
transforms, which move elements
on screen as raster images

00:05:24.850 --> 00:05:27.760
rather than trying to
repane DOM structure.

00:05:27.760 --> 00:05:30.880
Once you've optimized
touchevent handlers,

00:05:30.880 --> 00:05:32.840
you can do browser
level optimizations

00:05:32.840 --> 00:05:34.510
to streamline browser
event processing

00:05:34.510 --> 00:05:38.000
and reduce overhead associated
with event DOM propagation.

00:05:38.000 --> 00:05:40.810
One way to achieve this is
to listen to all touch events

00:05:40.810 --> 00:05:44.240
on a single top-level DOM
element in capture mode.

00:05:44.240 --> 00:05:46.947
This will result in no DOM
event propagation chipping

00:05:46.947 --> 00:05:48.530
valuable milliseconds
from touch event

00:05:48.530 --> 00:05:51.050
processing on the main thread.

00:05:51.050 --> 00:05:53.260
In our phone web app we
wrote a small framework

00:05:53.260 --> 00:05:54.380
that did just that.

00:05:54.380 --> 00:05:56.749
It processed raw touch events
at the top-level element,

00:05:56.749 --> 00:05:59.290
converted these touch events to
gestures-- such as drag-left,

00:05:59.290 --> 00:06:01.977
drag-right, up and down--
and routed these gestures

00:06:01.977 --> 00:06:04.310
to the appropriate subcomponent
of the application based

00:06:04.310 --> 00:06:07.000
on subcomponent
reported [INAUDIBLE],

00:06:07.000 --> 00:06:10.470
for which it should be
notified of gestures.

00:06:10.470 --> 00:06:14.170
The last topic of this talk
is phone versus tablet UI.

00:06:14.170 --> 00:06:18.390
A common debate is how different
phone and tablet UIs should be.

00:06:18.390 --> 00:06:21.170
One school of thought is
to have responsive websites

00:06:21.170 --> 00:06:23.360
where a site is
automatically adjusted

00:06:23.360 --> 00:06:26.340
to the available screen
size and capabilities.

00:06:26.340 --> 00:06:28.737
In our experience, this
approach doesn't work very well.

00:06:28.737 --> 00:06:30.570
First, a UI that adjusts
dynamically results

00:06:30.570 --> 00:06:34.294
in complicated code and
limits optimization choices.

00:06:34.294 --> 00:06:35.960
But more importantly,
what we have found

00:06:35.960 --> 00:06:37.470
is that phone and
tablet consumption

00:06:37.470 --> 00:06:39.790
models are very different.

00:06:39.790 --> 00:06:42.670
Phone consumption happens
more frequently in a day,

00:06:42.670 --> 00:06:44.850
but a session lasts
only a few minutes.

00:06:44.850 --> 00:06:46.670
This is what we call
the "snacking" mode

00:06:46.670 --> 00:06:48.990
of news consumption.

00:06:48.990 --> 00:06:51.400
This means it is much better
to have an information-dense

00:06:51.400 --> 00:06:53.970
and more summarized
view of news.

00:06:53.970 --> 00:06:56.000
Whereas tablet
usage is very much

00:06:56.000 --> 00:06:58.400
limited to morning
and evening hours

00:06:58.400 --> 00:07:01.441
with the user interacting for
an extended period of time.

00:07:01.441 --> 00:07:03.690
So it made much more sense
to provide in-depth reading

00:07:03.690 --> 00:07:05.834
choices on tablets.

00:07:05.834 --> 00:07:08.250
We hope this talk will help
you avoid some common pitfalls

00:07:08.250 --> 00:07:10.334
of web development
on mobile platforms

00:07:10.334 --> 00:07:12.250
and will inspire you to
code slick and fun web

00:07:12.250 --> 00:07:14.790
applications for
many users to enjoy.

00:07:14.790 --> 00:07:17.630
Thank you and see you
at news.google.com.

