WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.710
[MUSIC PLAYING]

00:00:09.710 --> 00:00:11.080
ARUN NAGARAJAN: Hello and
welcome to another exciting

00:00:11.080 --> 00:00:12.900
episode of Google
Developers Live.

00:00:12.900 --> 00:00:13.940
This is Script It!

00:00:13.940 --> 00:00:16.630
With Android, and my name
is Arun Nagarajan.

00:00:16.630 --> 00:00:19.170
I'm with the Apps Script
Developer Relations Team and I

00:00:19.170 --> 00:00:20.170
have a special guest.

00:00:20.170 --> 00:00:20.950
ADAM KOCH: Hey, guys.

00:00:20.950 --> 00:00:21.910
My name is Adam Koch.

00:00:21.910 --> 00:00:24.000
I'm from the Android Developer
Relations Team.

00:00:24.000 --> 00:00:24.410
ARUN NAGARAJAN: Excellent!

00:00:24.410 --> 00:00:25.550
ADAM KOCH: Happy to be
joining Arun today.

00:00:25.550 --> 00:00:25.815
ARUN NAGARAJAN: Excellent!

00:00:25.815 --> 00:00:28.930
Yeah, super excited to have
folks from the Android Team.

00:00:28.930 --> 00:00:31.170
Adam usually does a lot of
stuff around design and

00:00:31.170 --> 00:00:34.570
writing some killer apps, and
today he's going to help us

00:00:34.570 --> 00:00:38.070
walk through what we can do with
Android and Apps Script.

00:00:38.070 --> 00:00:41.230
So the series here today, it's
just called Script It! and

00:00:41.230 --> 00:00:44.220
it's something that the Apps
Script Team does where we take

00:00:44.220 --> 00:00:46.930
what Apps Script's all about,
along with other Google

00:00:46.930 --> 00:00:50.680
products to explain how you
could do more with apps,

00:00:50.680 --> 00:00:52.020
specifically Apps Script.

00:00:52.020 --> 00:00:55.400
And in today's session, we're
going to talk about how

00:00:55.400 --> 00:00:58.290
Android could leverage some of
the backend capabilities of

00:00:58.290 --> 00:01:01.050
Apps Script, to expose data
from a spreadsheet or even

00:01:01.050 --> 00:01:05.420
notification, and through
Google Cloud Messaging.

00:01:05.420 --> 00:01:06.430
So that's quite exciting.

00:01:06.430 --> 00:01:09.575
So we have some exciting demos,
and we're going to show

00:01:09.575 --> 00:01:11.870
some slides to orient you, and
then we'll dive right into the

00:01:11.870 --> 00:01:14.250
demos and we'll share all
the code right after it.

00:01:14.250 --> 00:01:17.230
So the folks that are not
familiar, Google Apps Script

00:01:17.230 --> 00:01:20.080
is all about doing more
with Google Apps.

00:01:20.080 --> 00:01:24.590
So it allows you to build
integrations into Google Apps

00:01:24.590 --> 00:01:29.260
such as Gmail, spreadsheets,
sites, drive, Docs, and so on.

00:01:29.260 --> 00:01:31.240
It allows you to send
data back and forth.

00:01:31.240 --> 00:01:32.980
It allows you to show UI.

00:01:32.980 --> 00:01:35.480
So for instance, Apps Script
allows you to inject menus

00:01:35.480 --> 00:01:36.700
into a spreadsheet.

00:01:36.700 --> 00:01:40.600
So it really allows you to build
more with existing apps

00:01:40.600 --> 00:01:42.850
technologies on The Cloud.

00:01:42.850 --> 00:01:45.200
All the code that you write is
all in JavaScript, so it's

00:01:45.200 --> 00:01:49.280
super easy to pick up, and we
have a bunch of APIs, and it

00:01:49.280 --> 00:01:51.770
allows you write very quickly
with all the samples we

00:01:51.770 --> 00:01:52.940
provide as well.

00:01:52.940 --> 00:01:55.580
And Adam, what is an
Android all about?

00:01:55.580 --> 00:01:56.684
Never heard of it.

00:01:56.684 --> 00:01:57.492
Just kidding.

00:01:57.492 --> 00:01:58.845
ADAM KOCH: Hopefully you've
heard of Android.

00:01:58.845 --> 00:02:03.060
It's a mobile phone operating
system and, of course, many

00:02:03.060 --> 00:02:06.490
Android apps actually connect
with Cloud backends, right?

00:02:06.490 --> 00:02:09.120
They connect to the internet,
they pull down information.

00:02:09.120 --> 00:02:11.050
So I think the neat thing about
the demos that we're

00:02:11.050 --> 00:02:13.450
going to show you today is, it
sort of gives you a really

00:02:13.450 --> 00:02:18.240
good way to sort of set up a
backend, and get in touch with

00:02:18.240 --> 00:02:22.220
the various Google Apps that
Apps Script can talk to.

00:02:22.220 --> 00:02:24.800
In addition, we're going to talk
a bit about GCM, Google

00:02:24.800 --> 00:02:27.350
Cloud Messaging, which is
Android's push messaging

00:02:27.350 --> 00:02:30.975
framework, which allows you send
push messages from the

00:02:30.975 --> 00:02:33.990
interwebs down to an
Android device.

00:02:33.990 --> 00:02:36.890
And the nice thing about the
setup today, again, is that

00:02:36.890 --> 00:02:39.490
you don't have to go and build
a full fledged server

00:02:39.490 --> 00:02:42.110
infrastructure to be able to
play around with this and test

00:02:42.110 --> 00:02:43.020
it and use it.

00:02:43.020 --> 00:02:45.740
You can leverage Apps Script to
actually do a lot of this.

00:02:45.740 --> 00:02:47.210
So it's pretty cool stuff.

00:02:47.210 --> 00:02:48.020
ARUN NAGARAJAN: Yeah,
exciting!

00:02:48.020 --> 00:02:50.690
So what we'll do is just a
couple minutes to kind of

00:02:50.690 --> 00:02:53.220
orient the crowd with what we're
about to show, so we'll

00:02:53.220 --> 00:02:57.040
just show a couple of slides
real quick here on my laptop.

00:02:57.040 --> 00:03:01.010
So the goal today is to showcase
how Google Apps

00:03:01.010 --> 00:03:05.290
Script can act as a backend
system for Android apps.

00:03:05.290 --> 00:03:08.090
Most apps often need to connect
to some backend system

00:03:08.090 --> 00:03:10.660
every now and then, whether it's
registering a high score

00:03:10.660 --> 00:03:13.940
or pulling down new data once
a day, what have you.

00:03:13.940 --> 00:03:18.720
So a lot of times, it may
not be millions of users

00:03:18.720 --> 00:03:22.070
connecting every day to a
system, as much as just a few

00:03:22.070 --> 00:03:26.120
users in a departmental app for
instance, or maybe they're

00:03:26.120 --> 00:03:28.880
just connecting once a week
for updated data.

00:03:28.880 --> 00:03:31.730
In those scenarios, Apps Script
is really ideal to

00:03:31.730 --> 00:03:34.150
build a simple lightweight
backend system.

00:03:34.150 --> 00:03:37.580
Obviously, we have systems like
App Engine, which provide

00:03:37.580 --> 00:03:40.160
sort of the large scale
scalability that you may want,

00:03:40.160 --> 00:03:43.620
but that also requires
installing Eclipse and getting

00:03:43.620 --> 00:03:46.050
SDKs, and pushing it to App
Engine, using all the

00:03:46.050 --> 00:03:47.130
different frameworks
it provides.

00:03:47.130 --> 00:03:49.560
It's a little bit more
heavyweight, but you get the

00:03:49.560 --> 00:03:50.400
benefits of it.

00:03:50.400 --> 00:03:54.525
But Apps Script allows you to
do things with spreadsheets,

00:03:54.525 --> 00:03:56.970
so a lot of times spreadsheets
might be sufficient for what

00:03:56.970 --> 00:03:58.180
you're trying to achieve.

00:03:58.180 --> 00:04:04.290
So if it's just a tabular data
set with 10 columns and 40, 50

00:04:04.290 --> 00:04:08.200
rows, maybe Apps Script is
sufficient to get started with

00:04:08.200 --> 00:04:09.570
the spreadsheet itself.

00:04:09.570 --> 00:04:11.810
ContentService is the technology
that we have that

00:04:11.810 --> 00:04:14.330
allows you to build these web
endpoints on top of a

00:04:14.330 --> 00:04:17.050
spreadsheet, so we actually
did a whole GDL on

00:04:17.050 --> 00:04:18.149
ContentService.

00:04:18.149 --> 00:04:19.670
Definitely check that out.

00:04:19.670 --> 00:04:22.500
And, in fact, at that point,
I mentioned the plug about

00:04:22.500 --> 00:04:24.480
coming back to Android,
and here we are.

00:04:24.480 --> 00:04:27.420
And Apps Script actually allows
you to take advantage

00:04:27.420 --> 00:04:30.980
of external systems like GCM,
Google Cloud Messaging.

00:04:30.980 --> 00:04:34.870
The great thing about GCM is
that it's just a web call.

00:04:34.870 --> 00:04:36.870
It's not complex socket
connections.

00:04:36.870 --> 00:04:39.580
It's not complex APIs.

00:04:39.580 --> 00:04:41.870
If you can make an HTP post,
and you have the right

00:04:41.870 --> 00:04:43.600
credentials, you are
able to send GCM

00:04:43.600 --> 00:04:44.840
message, which is great.

00:04:44.840 --> 00:04:48.120
So we'll kind of showcase
that today.

00:04:48.120 --> 00:04:51.250
So back, I think, three or four
months ago now, we demoed

00:04:51.250 --> 00:04:55.030
how you could write a simple
mobile app on iOS and connect

00:04:55.030 --> 00:04:56.510
to a spreadsheet for data.

00:04:56.510 --> 00:04:58.390
The example of that point
we used was a

00:04:58.390 --> 00:05:00.020
simple inventory app.

00:05:00.020 --> 00:05:03.500
The scenario we painted was
you are an IT support

00:05:03.500 --> 00:05:06.480
technician or a help desk person
and you're on the go

00:05:06.480 --> 00:05:08.650
and you want to be able to check
inventory of various

00:05:08.650 --> 00:05:10.953
things that you may have
at your tech stop or

00:05:10.953 --> 00:05:11.880
your IT help desk.

00:05:11.880 --> 00:05:15.040
So we'll just continue
that scenario today.

00:05:15.040 --> 00:05:17.720
And a lot of folks, I remember
at that point, were commenting

00:05:17.720 --> 00:05:20.260
saying where is my
Android demo?

00:05:20.260 --> 00:05:22.040
Now why are you showing iOS?

00:05:22.040 --> 00:05:24.310
The good thing is that we're
here and we're going to show a

00:05:24.310 --> 00:05:27.370
lot more with Android, and we're
going to enhance it to

00:05:27.370 --> 00:05:29.290
even show push notifications.

00:05:29.290 --> 00:05:31.330
So that's going to
be really nice.

00:05:31.330 --> 00:05:32.310
So there's going to
be two demos.

00:05:32.310 --> 00:05:34.760
So it's going to be two-part,
and it's going to be cohesive.

00:05:34.760 --> 00:05:38.040
It's going to be the same demo
that we are going to carry on.

00:05:38.040 --> 00:05:41.860
The first part we're going to
show how you can take data

00:05:41.860 --> 00:05:44.150
from a spreadsheet and showcase
it on an Android

00:05:44.150 --> 00:05:46.200
application using standard
technologies

00:05:46.200 --> 00:05:47.720
like REST and JSON.

00:05:47.720 --> 00:05:50.390
In the second part, we're going
to do something exciting

00:05:50.390 --> 00:05:54.230
where we're going to actually
take a change that's made on

00:05:54.230 --> 00:05:56.540
the spreadsheet and then
push that down

00:05:56.540 --> 00:05:57.810
to the device itself.

00:05:57.810 --> 00:05:58.866
Sound good?

00:05:58.866 --> 00:05:59.220
ADAM KOCH: Sounds good to me.

00:05:59.220 --> 00:05:59.780
ARUN NAGARAJAN: All right.

00:05:59.780 --> 00:06:03.080
So I actually have this crazy,
complicated diagram that will

00:06:03.080 --> 00:06:06.610
explain towards the end, but I
think it makes more sense once

00:06:06.610 --> 00:06:08.210
you see the demos.

00:06:08.210 --> 00:06:08.570
All right.

00:06:08.570 --> 00:06:12.870
So let's go to our screen here,
and I have a couple of

00:06:12.870 --> 00:06:14.740
spreadsheets and stuff
loaded up.

00:06:14.740 --> 00:06:17.880
So here's the data set that
we're going to use.

00:06:20.700 --> 00:06:25.560
So a few items, some SKUs, and
quantities, and colors, and

00:06:25.560 --> 00:06:26.330
stuff like that.

00:06:26.330 --> 00:06:28.730
So we're not going to mobilize
all of these, we're just going

00:06:28.730 --> 00:06:31.050
to mobilize a couple of columns
and hopefully you'll

00:06:31.050 --> 00:06:34.780
get the picture in how you can
make that all available for

00:06:34.780 --> 00:06:36.390
all the rows, and maybe
even bi-directionally.

00:06:36.390 --> 00:06:40.790
There's a bunch of exercises
left of the viewers.

00:06:40.790 --> 00:06:43.800
So let me showcase the
code real quick.

00:06:43.800 --> 00:06:47.310
So a lot of this is used right
from the example that we had

00:06:47.310 --> 00:06:49.390
back in January.

00:06:49.390 --> 00:06:51.570
So if you go to my get GitHub
page, there's a whole section

00:06:51.570 --> 00:06:52.670
for ContentService.

00:06:52.670 --> 00:06:54.830
We'll make all these links
available right after.

00:06:54.830 --> 00:06:57.700
Where you can see what it's
doing, where it's lifting up a

00:06:57.700 --> 00:07:01.400
spreadsheet, opening it by ID,
and then getting a particular

00:07:01.400 --> 00:07:04.385
range, that's a name range, and
then it creates objects

00:07:04.385 --> 00:07:07.240
out of those rows using some
sample functions that we

00:07:07.240 --> 00:07:12.590
provide, and then outputs that
as a JSON string and the right

00:07:12.590 --> 00:07:13.560
MIME type's up.

00:07:13.560 --> 00:07:15.590
And this is the ContentService
code that I was talking about.

00:07:15.590 --> 00:07:16.930
I'm going to zoom in a
little bit more so

00:07:16.930 --> 00:07:17.830
that you can see that.

00:07:17.830 --> 00:07:19.550
And I have that same
code here.

00:07:19.550 --> 00:07:22.650
And then what you can do is
publish it as a web app.

00:07:22.650 --> 00:07:25.120
So this is sort of the magic
that makes it all work.

00:07:25.120 --> 00:07:26.920
For now I'm not using an
authentication, but with

00:07:26.920 --> 00:07:29.130
Android, you can actually craft
the response, and if

00:07:29.130 --> 00:07:31.510
it's a challenged response,
pop up a web view where

00:07:31.510 --> 00:07:32.990
someone can authenticate
as well.

00:07:32.990 --> 00:07:35.850
For now, I'm going to keep it
very simple and just using

00:07:35.850 --> 00:07:37.706
some demo data here.

00:07:37.706 --> 00:07:39.330
ADAM KOCH: I just want
to comment there.

00:07:39.330 --> 00:07:41.890
So when it comes to
authentication, you can, of

00:07:41.890 --> 00:07:43.780
course, pop up a web view
and then ask them to

00:07:43.780 --> 00:07:44.580
authenticate it.

00:07:44.580 --> 00:07:47.240
We actually have a newer
mechanism there on Android,

00:07:47.240 --> 00:07:48.410
that you can also try and use.

00:07:48.410 --> 00:07:50.500
It's called Google
Play Services.

00:07:50.500 --> 00:07:53.110
So that actually lets you use
the system credentials that

00:07:53.110 --> 00:07:56.010
are already available on the
device to authenticate in.

00:07:56.010 --> 00:07:59.800
So I haven't personally tried it
with Docs and what not yet.

00:07:59.800 --> 00:08:02.770
So I don't know how well it
works or if it does work right

00:08:02.770 --> 00:08:06.320
now, but it's definitely a good
experience for the users

00:08:06.320 --> 00:08:07.980
just because you don't have
to go and enter all your

00:08:07.980 --> 00:08:09.450
credentials again
into a web view.

00:08:09.450 --> 00:08:09.920
ARUN NAGARAJAN: You're right.

00:08:09.920 --> 00:08:10.340
Totally.

00:08:10.340 --> 00:08:11.430
Yeah, this is why
we have Adam.

00:08:11.430 --> 00:08:14.040
He's making sure that we're
showing the right thing.

00:08:14.040 --> 00:08:16.760
But yeah, that's a great
exercise to try out and see if

00:08:16.760 --> 00:08:19.830
you can actually achieve it
using that for authentication.

00:08:19.830 --> 00:08:21.270
And here's what the
output looks like.

00:08:21.270 --> 00:08:24.140
So this is the spreadsheet that
we had, and you can see

00:08:24.140 --> 00:08:25.610
it's just an array
of JSON objects.

00:08:25.610 --> 00:08:27.160
Nothing special.

00:08:27.160 --> 00:08:28.160
No magic here.

00:08:28.160 --> 00:08:32.750
You have a URL that redirects
it to a temporary URL, which

00:08:32.750 --> 00:08:34.419
then outputs all the
JSON objects.

00:08:34.419 --> 00:08:35.630
So that's essentially
a spreadsheet

00:08:35.630 --> 00:08:36.770
data turned into that.

00:08:36.770 --> 00:08:37.490
So now let's--

00:08:37.490 --> 00:08:38.220
ADAM KOCH: I have a quick
question, sorry.

00:08:38.220 --> 00:08:38.559
ARUN NAGARAJAN: Yes.

00:08:38.559 --> 00:08:40.320
ADAM KOCH: I don't know that
much about Apps Script.

00:08:40.320 --> 00:08:43.280
To turn the spreadsheet
cells into that JSON,

00:08:43.280 --> 00:08:44.380
is it really trivial?

00:08:44.380 --> 00:08:46.480
Or do you have to still go
through each row and actually

00:08:46.480 --> 00:08:47.440
change it into JSON?

00:08:47.440 --> 00:08:49.590
ARUN NAGARAJAN: It's super
trivial, because we have a

00:08:49.590 --> 00:08:51.840
really good recipe to do that.

00:08:51.840 --> 00:08:52.720
If you look at the code.

00:08:52.720 --> 00:08:54.920
So this is copied and pasted
right off of the

00:08:54.920 --> 00:08:59.710
developer.google
.com/apps-script page and it's

00:08:59.710 --> 00:09:01.550
one of the very common
ones that we do.

00:09:01.550 --> 00:09:06.650
And what it does is actually
reads the ranges into a bunch

00:09:06.650 --> 00:09:11.020
of methods that normalizes the
headers, makes the header,

00:09:11.020 --> 00:09:14.700
names the object properties, and
it does some basic checks.

00:09:14.700 --> 00:09:16.985
Is it to run empty cells,
is it alpha numeric,

00:09:16.985 --> 00:09:18.180
and stuff like that.

00:09:18.180 --> 00:09:21.760
So it is trivial because we've
written all the code for you.

00:09:21.760 --> 00:09:24.240
Obviously may want to change
some of the logic, and that's

00:09:24.240 --> 00:09:26.880
why it's not baked into the
platform, and so we share some

00:09:26.880 --> 00:09:28.310
recipes for you.

00:09:28.310 --> 00:09:31.910
But yeah, so you can see that
get rows data is basically

00:09:31.910 --> 00:09:34.440
passing the sheet reference and
then the range reference,

00:09:34.440 --> 00:09:38.180
and then you get back objects,
JavaScript objects, which you

00:09:38.180 --> 00:09:41.090
can JSONify and then
just spit it out.

00:09:41.090 --> 00:09:43.760
So that's what makes it really
easy is that you don't have to

00:09:43.760 --> 00:09:45.800
iterate through all the cells.

00:09:45.800 --> 00:09:48.190
No, we really ought to make this
into a library, but it's

00:09:48.190 --> 00:09:50.710
easy enough to copy paste for
now and enough people have

00:09:50.710 --> 00:09:51.820
small variances.

00:09:51.820 --> 00:09:54.910
For instance, some people don't
like to have the first

00:09:54.910 --> 00:09:57.580
row as a header, all these
little nuances.

00:09:57.580 --> 00:10:01.250
So we figured it's just better
to leave it as a sample that

00:10:01.250 --> 00:10:02.290
people can tweak.

00:10:02.290 --> 00:10:05.140
Good question, yeah.

00:10:05.140 --> 00:10:05.400
Great.

00:10:05.400 --> 00:10:08.620
So on the client side, it's
a really simple app.

00:10:08.620 --> 00:10:11.220
Let me zoom in a little
bit here.

00:10:11.220 --> 00:10:17.280
All I have is a simple layout
with a couple of fields.

00:10:17.280 --> 00:10:22.360
A list view, which has two
fields, inventory name and

00:10:22.360 --> 00:10:23.550
inventory count.

00:10:23.550 --> 00:10:27.060
And then I am essentially making
a quick call over the

00:10:27.060 --> 00:10:31.600
Async Task Mechanism that we
have on Android, which

00:10:31.600 --> 00:10:34.030
frankly, I haven't programmed an
Android for a long time and

00:10:34.030 --> 00:10:36.460
this was actually really
impressive how easy it was.

00:10:36.460 --> 00:10:38.670
ADAM KOCH: Yeah, Async Task is
useful for fetching little

00:10:38.670 --> 00:10:41.520
pieces of information from
the web like this.

00:10:41.520 --> 00:10:43.630
Just a note to the Android
dwellers out there, if you did

00:10:43.630 --> 00:10:46.550
want to turn this into a more
robust app, you would probably

00:10:46.550 --> 00:10:49.820
run something like this Async
in a background service, and

00:10:49.820 --> 00:10:52.120
then sync it into like a
database of sorts, maybe a

00:10:52.120 --> 00:10:56.350
content provider, and that way
you could display a list view

00:10:56.350 --> 00:10:58.110
based on the content provider
or database instead.

00:10:58.110 --> 00:11:00.980
But this is really good for
demonstration purposes, and as

00:11:00.980 --> 00:11:03.010
you say, it's really nice and
particularly easy to get up

00:11:03.010 --> 00:11:03.470
and running.

00:11:03.470 --> 00:11:05.900
ARUN NAGARAJAN: Yeah, and also
their built-in functionality

00:11:05.900 --> 00:11:10.190
to be able to turn a response
into a JSON array or object.

00:11:10.190 --> 00:11:13.150
And I'm just iterating through
that and then just showing

00:11:13.150 --> 00:11:13.860
them the UI.

00:11:13.860 --> 00:11:17.510
And I have a simple adapter
here that essentially take

00:11:17.510 --> 00:11:20.570
those row layout views, and then
just sets the text to the

00:11:20.570 --> 00:11:23.880
appropriate object, in this
case, item.name and

00:11:23.880 --> 00:11:24.430
item.count.

00:11:24.430 --> 00:11:28.830
So real simple code, didn't
really do anything fancy here.

00:11:28.830 --> 00:11:31.800
I'm more of a backend
developer anyway.

00:11:31.800 --> 00:11:33.530
So let's go to the phone
here and then see

00:11:33.530 --> 00:11:34.860
what this looks like.

00:11:34.860 --> 00:11:38.840
So I have an app here called
Apps Script GDL.

00:11:38.840 --> 00:11:40.380
I'll share the code as well.

00:11:40.380 --> 00:11:42.030
And there it is.

00:11:42.030 --> 00:11:45.490
So we were able to take the data
from the spreadsheet, the

00:11:45.490 --> 00:11:48.520
inventory objects, Chromebook,
I have nine counts of it,

00:11:48.520 --> 00:11:50.700
headphones, I have five counts
of it and so on.

00:11:50.700 --> 00:11:52.720
This is all real time.

00:11:52.720 --> 00:11:55.470
So if I go into my
spreadsheet now--

00:11:55.470 --> 00:11:56.980
let me zoom out here--

00:11:56.980 --> 00:12:00.380
so here's my spreadsheet on my
computer and I'm able to go

00:12:00.380 --> 00:12:02.940
and change let's say I just
dropped off a Chromebook to

00:12:02.940 --> 00:12:05.940
someone, I change it to eight,
and then I picked up some new

00:12:05.940 --> 00:12:07.660
speakers, let's change
that to four.

00:12:07.660 --> 00:12:10.000
So I change two things
I can just go here--

00:12:10.000 --> 00:12:11.400
ADAM KOCH: Wait until--

00:12:11.400 --> 00:12:14.230
ARUN NAGARAJAN: I can go in
here and hit refresh, and

00:12:14.230 --> 00:12:15.790
that's just going to go talk
to the server again.

00:12:15.790 --> 00:12:18.570
And that's going to take a
second and hopefully--

00:12:18.570 --> 00:12:19.550
ADAM KOCH: If the
WiFi connects.

00:12:19.550 --> 00:12:21.065
ARUN NAGARAJAN: Stay
with the WiFi.

00:12:21.065 --> 00:12:22.315
ADAM KOCH: Come on, WiFi.

00:12:24.780 --> 00:12:27.478
ARUN NAGARAJAN: Did
the WiFi drop off?

00:12:27.478 --> 00:12:28.685
ADAM KOCH: It's weak.

00:12:28.685 --> 00:12:29.715
ARUN NAGARAJAN: It's
weak, for sure.

00:12:29.715 --> 00:12:32.834
Oh, something's going on.

00:12:32.834 --> 00:12:36.720
Let me say refresh again.

00:12:36.720 --> 00:12:39.135
If that doesn't work, I'll
come back to this.

00:12:39.135 --> 00:12:40.330
ADAM KOCH: Come on, demo gods.

00:12:40.330 --> 00:12:40.870
ARUN NAGARAJAN: Yeah.

00:12:40.870 --> 00:12:43.670
We've got to always be nervous
about the demo gods.

00:12:43.670 --> 00:12:47.900
All right, so let me just kill
this and then see if that

00:12:47.900 --> 00:12:49.150
makes a difference.

00:12:51.660 --> 00:12:52.110
All right.

00:12:52.110 --> 00:12:52.970
Click on that.

00:12:52.970 --> 00:12:57.030
So it's going to go talk to
the server, and hopefully

00:12:57.030 --> 00:12:59.170
it'll download the right
count, which should

00:12:59.170 --> 00:13:00.635
say eight and four.

00:13:04.240 --> 00:13:06.340
Hmm.

00:13:06.340 --> 00:13:09.060
Not happy with the WiFi here.

00:13:09.060 --> 00:13:11.680
Did I change something with
the application now?

00:13:11.680 --> 00:13:12.930
It should be all published.

00:13:18.020 --> 00:13:21.720
Let's see what's
going on here.

00:13:21.720 --> 00:13:24.200
All right.

00:13:24.200 --> 00:13:26.550
I'll just check to see if the
internet is working or if it's

00:13:26.550 --> 00:13:28.160
my app that's broken.

00:13:28.160 --> 00:13:29.410
I'll go to google.com.

00:13:34.130 --> 00:13:37.200
No, the WiFi is giving
me some trouble.

00:13:37.200 --> 00:13:41.222
ADAM KOCH: Now, let
me set up a--

00:13:41.222 --> 00:13:41.720
ARUN NAGARAJAN: All right.

00:13:41.720 --> 00:13:45.820
So what that should show
is the updated data.

00:13:45.820 --> 00:13:47.560
Let me see if I have
my other phone.

00:13:47.560 --> 00:13:48.850
ADAM KOCH: One thing you do need
is a network connection.

00:13:48.850 --> 00:13:49.580
to get this.

00:13:49.580 --> 00:13:51.030
ARUN NAGARAJAN: The one thing
you definitely need is a

00:13:51.030 --> 00:13:52.290
network connection.

00:13:52.290 --> 00:13:53.480
ADAM KOCH: It's very helpful.

00:13:53.480 --> 00:13:54.890
ARUN NAGARAJAN: Let me see if
I have another phone that I

00:13:54.890 --> 00:13:55.800
can pull up here real quick.

00:13:55.800 --> 00:13:58.470
I apologize for that.

00:13:58.470 --> 00:13:59.830
Let's see here.

00:14:02.380 --> 00:14:03.690
I'll pull my personal
phone here.

00:14:03.690 --> 00:14:08.670
Hopefully I will get no calls
or anything on this.

00:14:08.670 --> 00:14:08.970
All right.

00:14:08.970 --> 00:14:09.890
Let me see.

00:14:09.890 --> 00:14:10.450
Here it is.

00:14:10.450 --> 00:14:11.830
ADAM KOCH: I'll quickly
trade with this thing.

00:14:11.830 --> 00:14:18.360
ARUN NAGARAJAN: So this should
load and there it is.

00:14:18.360 --> 00:14:20.050
So that worked.

00:14:20.050 --> 00:14:21.180
I'll leave this here.

00:14:21.180 --> 00:14:23.090
I'll just use my phone
for the time being.

00:14:23.090 --> 00:14:24.890
Let me actually do a
quick test again.

00:14:24.890 --> 00:14:27.690
Go back to my computer to
see if this picks up.

00:14:27.690 --> 00:14:30.580
So let's change the real count
from Chromebook to six to

00:14:30.580 --> 00:14:35.140
eight, and then I'll say refresh
data and it updated.

00:14:35.140 --> 00:14:37.830
So a lot faster this time.

00:14:37.830 --> 00:14:42.060
So we'll stick with my phone
for the demo, and hopefully

00:14:42.060 --> 00:14:44.650
WiFi will get better with
the other phone here.

00:14:44.650 --> 00:14:47.570
So the process there
was actually fairly

00:14:47.570 --> 00:14:48.180
straightforward.

00:14:48.180 --> 00:14:50.000
All we did was refetch
the data and

00:14:50.000 --> 00:14:51.600
repaint the list view.

00:14:51.600 --> 00:14:54.700
Nothing fancy, but you kind
of can see the point of--

00:14:54.700 --> 00:14:58.540
in a spreadsheet, you have a
natural user interface, you're

00:14:58.540 --> 00:15:01.700
able to make quick changes,
and then since it's all

00:15:01.700 --> 00:15:05.230
serving from the spreadsheet
itself, the ContentService,

00:15:05.230 --> 00:15:07.940
it's immediately reflected on
the device whenever you make a

00:15:07.940 --> 00:15:08.800
quick call, right?

00:15:08.800 --> 00:15:11.430
So that's actually super
powerful in that it's not

00:15:11.430 --> 00:15:13.480
something that you have to
synchronize, it's just

00:15:13.480 --> 00:15:13.855
refreshing.

00:15:13.855 --> 00:15:15.040
It picks up.

00:15:15.040 --> 00:15:19.580
But what if there are other
scenarios where you want to

00:15:19.580 --> 00:15:22.660
notify the end user when
a change happens?

00:15:22.660 --> 00:15:24.690
So that's really where the
second part of the demo comes

00:15:24.690 --> 00:15:27.990
into place, and that's what we
call Google Cloud Messaging,

00:15:27.990 --> 00:15:31.490
and it's something that
we announced a year

00:15:31.490 --> 00:15:33.030
ago, two years ago?

00:15:33.030 --> 00:15:34.590
ADAM KOCH: Yeah, I believe
last year, we

00:15:34.590 --> 00:15:35.800
announced it, yeah.

00:15:35.800 --> 00:15:38.190
It was a replacement to
the original push

00:15:38.190 --> 00:15:39.870
framework, which was C2DM.

00:15:39.870 --> 00:15:40.730
ARUN NAGARAJAN: That's
right, yeah.

00:15:40.730 --> 00:15:43.520
And one of the nice things I
like about it is that it's

00:15:43.520 --> 00:15:45.780
super straightforward
to get started.

00:15:45.780 --> 00:15:49.490
It didn't require me to know a
lot of server technologies

00:15:49.490 --> 00:15:53.340
specific to Google, it was
just standard post and

00:15:53.340 --> 00:15:56.680
standard post body that came in
that I was able to handle

00:15:56.680 --> 00:15:58.290
in Apps Script itself.

00:15:58.290 --> 00:16:00.880
So, in fact, for this the
documentation is actually

00:16:00.880 --> 00:16:02.120
really robust.

00:16:02.120 --> 00:16:04.650
So if you go to, I believe,
developer.androi

00:16:04.650 --> 00:16:09.440
d.com/google/GCM, there's a
wealth of content there about

00:16:09.440 --> 00:16:11.290
how you can get started.

00:16:11.290 --> 00:16:13.420
The first thing you have to keep
in mind is that you have

00:16:13.420 --> 00:16:16.830
to create a Google API project
for this, and it's actually

00:16:16.830 --> 00:16:17.720
straightforward.

00:16:17.720 --> 00:16:20.920
I've created one and I'm using a
demo key that I'll show you,

00:16:20.920 --> 00:16:22.350
but you'll have to
create your own.

00:16:22.350 --> 00:16:24.680
I'll disable the key right
after this demo.

00:16:24.680 --> 00:16:26.920
So there's a couple of things
that you have to be careful

00:16:26.920 --> 00:16:29.170
about from a process
standpoint.

00:16:29.170 --> 00:16:31.200
There's something about
the project ID you

00:16:31.200 --> 00:16:32.180
need to save as well.

00:16:32.180 --> 00:16:34.240
So once you create this project,
there's two pieces of

00:16:34.240 --> 00:16:37.890
information that you need to
grab onto, the API key and the

00:16:37.890 --> 00:16:39.450
project ID.

00:16:39.450 --> 00:16:42.020
And, in fact, what I've done
is you'll see a lot of

00:16:42.020 --> 00:16:44.420
similarities with the demo
application and the UI that

00:16:44.420 --> 00:16:46.660
I'm showing, and that's because
I've taken the demo

00:16:46.660 --> 00:16:48.960
application as my
basic framework.

00:16:48.960 --> 00:16:51.200
So I've kind of built everything
around it.

00:16:51.200 --> 00:16:53.540
And the demo application
actually talks quite a bit

00:16:53.540 --> 00:16:54.950
about the server side of it.

00:16:54.950 --> 00:16:58.120
So in this it talks about how
to run a Java server to

00:16:58.120 --> 00:17:01.280
achieve the push registry,
and then also to

00:17:01.280 --> 00:17:02.790
send the push messages.

00:17:02.790 --> 00:17:05.369
And also shows you how you can
run that on App Engine.

00:17:05.369 --> 00:17:07.290
And the ideas is that
all of this is

00:17:07.290 --> 00:17:08.510
possible in Apps Script.

00:17:08.510 --> 00:17:11.180
So you can build a simple
automated server in Apps

00:17:11.180 --> 00:17:11.730
Script itself.

00:17:11.730 --> 00:17:13.460
ADAM KOCH: Yeah, and the
interesting thing is, like

00:17:13.460 --> 00:17:17.220
when I've run through this
before, personally, I find the

00:17:17.220 --> 00:17:20.089
server piece takes me the
longest, just because I'm

00:17:20.089 --> 00:17:21.869
really bad at that kind of
stuff, like getting App Engine

00:17:21.869 --> 00:17:24.300
set up and getting it working
correctly the way I want.

00:17:24.300 --> 00:17:26.290
And that's why I think this is
really a nice way to sort of

00:17:26.290 --> 00:17:29.600
get up and running on GCM
quickly using Apps Script.

00:17:29.600 --> 00:17:30.800
ARUN NAGARAJAN: Yep,
and that's great.

00:17:30.800 --> 00:17:33.390
So I'll just show the demo and
hopefully this time around,

00:17:33.390 --> 00:17:34.000
things will--

00:17:34.000 --> 00:17:36.060
ADAM KOCH: I put this on,
tethered to my phone, so maybe

00:17:36.060 --> 00:17:37.470
it'll work.

00:17:37.470 --> 00:17:38.740
We can try both.

00:17:38.740 --> 00:17:39.730
Whichever has the best WiFi.

00:17:39.730 --> 00:17:40.540
ARUN NAGARAJAN: This
one has it.

00:17:40.540 --> 00:17:40.920
All right.

00:17:40.920 --> 00:17:43.570
Let's go back to this guy.

00:17:43.570 --> 00:17:45.240
It's a better WiFi
situation here.

00:17:45.240 --> 00:17:45.980
ADAM KOCH: Potentially.

00:17:45.980 --> 00:17:46.640
ARUN NAGARAJAN: Potentially.

00:17:46.640 --> 00:17:46.950
All right.

00:17:46.950 --> 00:17:48.460
So let's give it a shot.

00:17:48.460 --> 00:17:51.280
So you can see that the data
is back to what the other

00:17:51.280 --> 00:17:54.530
device was showing, which is
Chromebook at six and speakers

00:17:54.530 --> 00:17:55.920
at four and so on.

00:17:55.920 --> 00:17:59.050
And what we're going to do is
I'll just show the demo first,

00:17:59.050 --> 00:18:02.020
and then we'll explain all the
different moving pieces,

00:18:02.020 --> 00:18:03.660
because there's quite a few.

00:18:03.660 --> 00:18:06.830
I could've simplified this
into one single, big Apps

00:18:06.830 --> 00:18:10.520
Script project, but I kept the
different separated so that

00:18:10.520 --> 00:18:12.980
it's easier to explain and then
potentially for you to

00:18:12.980 --> 00:18:14.980
optimize and clean up.

00:18:14.980 --> 00:18:18.510
So let me go back to my
spreadsheet, here.

00:18:18.510 --> 00:18:23.650
And if you go to Tools, Script
Editor, one of the things

00:18:23.650 --> 00:18:27.180
you'll see here is this call
for send notification.

00:18:27.180 --> 00:18:30.910
So a spreadsheet has this
concept of associated script,

00:18:30.910 --> 00:18:34.460
which can have a lot of
interesting things about the

00:18:34.460 --> 00:18:36.000
spreadsheet exposing
to the script.

00:18:36.000 --> 00:18:40.480
So events, you'd be able to
inject menus into the script

00:18:40.480 --> 00:18:43.100
itself, and a whole slew
of things in between.

00:18:43.100 --> 00:18:45.620
So I just went to Tools
and Script Editor.

00:18:45.620 --> 00:18:48.130
I already kind of seeded the
code here, but this is, as you

00:18:48.130 --> 00:18:50.180
can see, very straightforward
code to do.

00:18:50.180 --> 00:18:51.290
I'm referencing something
called

00:18:51.290 --> 00:18:54.020
SharedDb, which is a library.

00:18:54.020 --> 00:18:57.550
And you can find these under
Resources, Manage libraries.

00:18:57.550 --> 00:19:00.180
And I will show you where this
library is defined and why I

00:19:00.180 --> 00:19:02.290
have it as a library in a bit.

00:19:02.290 --> 00:19:06.230
And all I'm doing is saying send
GCM, and I'm just saying

00:19:06.230 --> 00:19:07.600
something was edited.

00:19:07.600 --> 00:19:10.410
And right now, I'll have
to manually run this.

00:19:10.410 --> 00:19:13.170
And what I'll do is now turn
this into a trigger.

00:19:13.170 --> 00:19:16.290
So I can say send notification
is the function that I want to

00:19:16.290 --> 00:19:21.230
run from the spreadsheet, as
far as events go, on the on

00:19:21.230 --> 00:19:21.960
edit function.

00:19:21.960 --> 00:19:22.890
All right?

00:19:22.890 --> 00:19:24.920
So I'm going to hit save.

00:19:24.920 --> 00:19:25.680
And that's really it.

00:19:25.680 --> 00:19:31.140
That registers a an event, a
trigger associated with the on

00:19:31.140 --> 00:19:31.830
edit event.

00:19:31.830 --> 00:19:33.565
So I'm going to go in here--

00:19:33.565 --> 00:19:35.575
ADAM KOCH: Just so I get this
right, whenever you make any

00:19:35.575 --> 00:19:37.920
edit to the spreadsheet now,
that trigger will run?

00:19:37.920 --> 00:19:38.700
ARUN NAGARAJAN: Yep, exactly.

00:19:38.700 --> 00:19:41.170
And then each user can register
a trigger for

00:19:41.170 --> 00:19:41.660
themselves.

00:19:41.660 --> 00:19:44.720
In this case, I've done it for
me as my demo account, but

00:19:44.720 --> 00:19:46.930
there's ways you can make
this a much more

00:19:46.930 --> 00:19:48.480
broader base as well.

00:19:48.480 --> 00:19:49.730
So I'm going to change
this Chromebook.

00:19:52.260 --> 00:19:55.580
I've decided to deploy Chrome
Pixels to everybody.

00:19:55.580 --> 00:19:57.230
I'm making that change.

00:19:57.230 --> 00:19:58.840
And then I don't know
if you caught that.

00:19:58.840 --> 00:20:00.295
That was actually too quick.

00:20:00.295 --> 00:20:01.270
ADAM KOCH: Better change
something again.

00:20:01.270 --> 00:20:02.460
ARUN NAGARAJAN: I'll change
something again.

00:20:02.460 --> 00:20:07.340
So my hand's on the monitor
and I'll make it 101

00:20:07.340 --> 00:20:07.840
Chromebooks.

00:20:07.840 --> 00:20:11.050
I'm going to tab off, and then
you can see that, right on my

00:20:11.050 --> 00:20:14.490
device, there's a notification
first, and then the UI knows

00:20:14.490 --> 00:20:17.930
to refresh itself and pick
up the new count as well.

00:20:17.930 --> 00:20:21.350
And it also, since it's the
Android notifications, UI is

00:20:21.350 --> 00:20:22.600
actually quite nice.

00:20:22.600 --> 00:20:25.630
It injects itself into the--

00:20:25.630 --> 00:20:26.430
what's it called?

00:20:26.430 --> 00:20:27.880
The notification panel?

00:20:27.880 --> 00:20:28.740
Is that the right term for it?

00:20:28.740 --> 00:20:29.530
ADAM KOCH: Yeah, it's the
notification panel.

00:20:29.530 --> 00:20:31.940
ARUN NAGARAJAN: And I remember
at I/O last year, we unveiled

00:20:31.940 --> 00:20:33.770
a really nice look and
feel for this as

00:20:33.770 --> 00:20:34.730
well, so I can actually--

00:20:34.730 --> 00:20:36.850
ADAM KOCH: It kind of expanded
notification and included

00:20:36.850 --> 00:20:38.130
additional information in
those notifications.

00:20:38.130 --> 00:20:41.590
ARUN NAGARAJAN: Yep, and for
now I'm just showing a very

00:20:41.590 --> 00:20:43.570
basic set of things in there.

00:20:43.570 --> 00:20:45.960
And one of the nice things
about GCM is that the app

00:20:45.960 --> 00:20:47.440
doesn't have to be running.

00:20:47.440 --> 00:20:50.370
So I could actually have the
app killed, whereas I could

00:20:50.370 --> 00:20:52.440
minimize this and
swipe it out.

00:20:52.440 --> 00:20:55.410
And if I make a change here,
let's just say I have given

00:20:55.410 --> 00:20:58.770
out 10 of my Chromebooks
and I'm down to 91.

00:20:58.770 --> 00:21:03.510
I hit tab off and that is, as
you can see, it beeps and the

00:21:03.510 --> 00:21:05.880
notification comes in,
and I think it took

00:21:05.880 --> 00:21:07.370
all of three seconds.

00:21:07.370 --> 00:21:10.490
And I can then go tap on it, and
then that will come back

00:21:10.490 --> 00:21:13.630
up, and it should reflect
the right data now, 91.

00:21:13.630 --> 00:21:17.930
So that's GCM in a nutshell, and
the whole idea is that the

00:21:17.930 --> 00:21:22.460
end user doesn't have to go in
and say refresh, or check

00:21:22.460 --> 00:21:25.070
every day and be worried about
whether they have the right

00:21:25.070 --> 00:21:25.870
data or not.

00:21:25.870 --> 00:21:28.780
And this, combined with the
offline capabilities of

00:21:28.780 --> 00:21:31.870
Android applications, you could
actually have a pretty

00:21:31.870 --> 00:21:35.730
nicely set up app where it only
checks for updates when

00:21:35.730 --> 00:21:37.640
there's new data available,
rather

00:21:37.640 --> 00:21:39.040
than constantly checking.

00:21:39.040 --> 00:21:40.570
Or the user worried
about saying, hey,

00:21:40.570 --> 00:21:41.300
is there new data?

00:21:41.300 --> 00:21:43.170
ADAM KOCH: Of course, the other
option is to have like

00:21:43.170 --> 00:21:44.910
every five minutes,
check the server.

00:21:44.910 --> 00:21:46.200
That's going to drain
the user's battery.

00:21:46.200 --> 00:21:47.690
It's not a great experience.

00:21:47.690 --> 00:21:49.720
It's going to take up extra
CPU and battery.

00:21:49.720 --> 00:21:50.970
So this is just really nice.

00:21:50.970 --> 00:21:53.760
If there's no changes, it's not
going to refresh at all.

00:21:53.760 --> 00:21:54.370
ARUN NAGARAJAN: That's right.

00:21:54.370 --> 00:22:00.360
And that's really nice in
allowing just saving data as

00:22:00.360 --> 00:22:02.270
well, because that's expensive
around the world, here.

00:22:02.270 --> 00:22:03.850
ADAM KOCH: Yeah,
one quick note.

00:22:03.850 --> 00:22:06.900
So right now, we're sending a
ping down to the device which

00:22:06.900 --> 00:22:08.630
just says, hey, there's
new data, why

00:22:08.630 --> 00:22:10.110
don't you go and refresh?

00:22:10.110 --> 00:22:12.710
But GCM also supports sending
actual payload in

00:22:12.710 --> 00:22:13.540
the message as well.

00:22:13.540 --> 00:22:16.130
I think it's up to a four
kilobyte payload.

00:22:16.130 --> 00:22:18.870
So if your message is small
enough, and you have the right

00:22:18.870 --> 00:22:21.520
setup, you can actually send
the entire amount of data,

00:22:21.520 --> 00:22:24.110
changed data, in the
payload as well.

00:22:24.110 --> 00:22:25.790
And that way, it doesn't even
need to go and refresh.

00:22:25.790 --> 00:22:27.770
It can just automatically use
the information that was sent

00:22:27.770 --> 00:22:29.410
down from GCM.

00:22:29.410 --> 00:22:30.540
ARUN NAGARAJAN: That's a really
good point, because

00:22:30.540 --> 00:22:33.620
what I could've done here is,
instead of send message, I

00:22:33.620 --> 00:22:35.140
could have just [INAUDIBLE]

00:22:35.140 --> 00:22:37.680
the objects and sent
it right down.

00:22:37.680 --> 00:22:38.830
So that's actually something--

00:22:38.830 --> 00:22:40.040
ADAM KOCH: It's a little bit
more complicated, because say

00:22:40.040 --> 00:22:41.960
the data is really large there,
and you want to send

00:22:41.960 --> 00:22:44.690
the delta, but it's definitely
possible and it's definitely a

00:22:44.690 --> 00:22:45.730
really, really neat feature.

00:22:45.730 --> 00:22:47.460
ARUN NAGARAJAN: Yeah,
for sure.

00:22:47.460 --> 00:22:50.950
So now let's take a step back
and see how this all is

00:22:50.950 --> 00:22:53.690
connected and how
it all works.

00:22:53.690 --> 00:22:55.660
So this is a script that's
associated with the

00:22:55.660 --> 00:22:56.040
spreadsheet.

00:22:56.040 --> 00:22:59.860
So all this is there for is to
detect changes, and then to

00:22:59.860 --> 00:23:05.230
delegate that off to the actual
system that's sending

00:23:05.230 --> 00:23:06.370
out the push messages.

00:23:06.370 --> 00:23:09.340
And that's in a project called
SharedDb, and I'm referencing

00:23:09.340 --> 00:23:11.460
that by this concept
called library.

00:23:11.460 --> 00:23:13.990
And all of this is documented on
our website, and I'll make

00:23:13.990 --> 00:23:16.920
sure this is shared out from
a code standpoint as well.

00:23:16.920 --> 00:23:21.530
And here's my SharedDb project,
and all this is doing

00:23:21.530 --> 00:23:26.140
is it provides a unified data
store that can be shared

00:23:26.140 --> 00:23:27.870
across multiple projects.

00:23:27.870 --> 00:23:30.120
It's not possible to
share data store

00:23:30.120 --> 00:23:32.030
today between projects.

00:23:32.030 --> 00:23:35.640
And the way you do it is by
sharing library, because that

00:23:35.640 --> 00:23:38.880
is a lot easier to control
access to and it's provided

00:23:38.880 --> 00:23:42.160
manually by the developer, so
it's actually a little bit

00:23:42.160 --> 00:23:44.550
more flexible, even though
sometimes it could be a little

00:23:44.550 --> 00:23:45.850
bit painful.

00:23:45.850 --> 00:23:49.580
And then here's the function
that basically says send GCM,

00:23:49.580 --> 00:23:52.850
and it just defaults it to
Hello World if nothing is

00:23:52.850 --> 00:23:55.440
passed in, and it's all
pure JavaScript here.

00:23:55.440 --> 00:23:59.660
So this is not any new syntax
or anything like

00:23:59.660 --> 00:24:00.710
that you have to learn.

00:24:00.710 --> 00:24:02.710
So Db is our data store.

00:24:02.710 --> 00:24:05.620
It's a product called ScriptDb
and that's something that we

00:24:05.620 --> 00:24:08.490
launched last year at I/O and
it allows you to store

00:24:08.490 --> 00:24:11.740
JavaScript objects as is
into a database, and

00:24:11.740 --> 00:24:12.940
then query them back.

00:24:12.940 --> 00:24:17.390
So what I'm checking here to see
is give me all the records

00:24:17.390 --> 00:24:22.180
in the system that has
a registration ID.

00:24:22.180 --> 00:24:23.650
And then I'm just tracking
them all into

00:24:23.650 --> 00:24:25.070
a JavaScript array.

00:24:25.070 --> 00:24:27.970
And then I have my API key here,
which I'll destroyed

00:24:27.970 --> 00:24:29.220
after this demo.

00:24:31.240 --> 00:24:35.850
And then here are the URL Fetch
options that I have.

00:24:35.850 --> 00:24:37.900
URL Fetch is basically our--

00:24:37.900 --> 00:24:41.640
and I think App Engine calls it
the same thing, in fact--

00:24:41.640 --> 00:24:44.560
allows you to make outbound
connections from the Google

00:24:44.560 --> 00:24:47.910
data centers to, in this case,
also a Google data center

00:24:47.910 --> 00:24:48.890
running GCM.

00:24:48.890 --> 00:24:52.280
So all this code is running on
different parts of the Google

00:24:52.280 --> 00:24:54.370
data center, if you can think
about it that way.

00:24:54.370 --> 00:24:54.970
And then that's it.

00:24:54.970 --> 00:24:56.850
It just takes this and
then sends it.

00:24:56.850 --> 00:24:58.690
I can actually send
it to multiple

00:24:58.690 --> 00:25:00.770
systems, multiple devices.

00:25:00.770 --> 00:25:03.420
So if I have multiple devices
registered against the same

00:25:03.420 --> 00:25:08.030
GCM registrar, I can send one
call with an array of

00:25:08.030 --> 00:25:10.630
registration IDs, and they'll
all get notified.

00:25:10.630 --> 00:25:12.860
So you don't have to make an
individual call for every

00:25:12.860 --> 00:25:15.350
device, which is actually, I
think, one of the benefits of

00:25:15.350 --> 00:25:16.375
GCM as well.

00:25:16.375 --> 00:25:18.420
ADAM KOCH: Yeah, that was one
of the new things added, I

00:25:18.420 --> 00:25:23.240
guess batching calls in GCM
versus the older C2DM.

00:25:23.240 --> 00:25:25.980
And that's nice because I don't
know if this particular

00:25:25.980 --> 00:25:27.820
app would have a million users,
but say an app had a

00:25:27.820 --> 00:25:29.950
million users, you can batch
up and update all those

00:25:29.950 --> 00:25:32.600
devices with one push message.

00:25:32.600 --> 00:25:35.760
ARUN NAGARAJAN: Yeah, that's
actually something that is,

00:25:35.760 --> 00:25:38.980
even for testing purposes,
reducing the call volume for

00:25:38.980 --> 00:25:41.390
my code, is a nice thing.

00:25:41.390 --> 00:25:43.530
So this is a shared library.

00:25:43.530 --> 00:25:45.550
How does data get into
this data store?

00:25:45.550 --> 00:25:49.670
Because we haven't shown how we
have collected the device

00:25:49.670 --> 00:25:52.230
IDs, the registration IDs
as it's called here.

00:25:52.230 --> 00:25:54.720
So for that, I have
another endpoint.

00:25:54.720 --> 00:25:58.150
In this case, I'm just calling
it GCM, and this registers a

00:25:58.150 --> 00:26:01.260
do post handler, which
essentially gets called when

00:26:01.260 --> 00:26:03.700
the client makes a
call for post.

00:26:03.700 --> 00:26:06.190
I also have a do get, which I'm
using for some debugging

00:26:06.190 --> 00:26:09.930
purposes to show the UI
of what's in here.

00:26:09.930 --> 00:26:12.550
And it basically says if
the device wants to be

00:26:12.550 --> 00:26:14.960
unregistered, remove
that record.

00:26:14.960 --> 00:26:17.500
If it's not there and the
type is register,

00:26:17.500 --> 00:26:18.710
just store that record.

00:26:18.710 --> 00:26:21.300
E.parameter is basically
the JSON object.

00:26:21.300 --> 00:26:22.080
And that's it.

00:26:22.080 --> 00:26:25.240
This is how we're registering
and unregistering users, and

00:26:25.240 --> 00:26:26.910
there's actually a simple
UI for this.

00:26:26.910 --> 00:26:28.770
I'll refresh this to
clean this up.

00:26:28.770 --> 00:26:32.530
This is a ScriptDb visualization
console that I

00:26:32.530 --> 00:26:35.320
discussed a little while back
in one of the GDLs, and you

00:26:35.320 --> 00:26:37.140
essentially enter a query.

00:26:37.140 --> 00:26:38.910
Empty brackets mean
everything.

00:26:38.910 --> 00:26:41.960
I can just run query and see
what's in the data store.

00:26:41.960 --> 00:26:45.530
So in this case, there are two
different registration IDs for

00:26:45.530 --> 00:26:47.420
the two devices that
I've done.

00:26:47.420 --> 00:26:51.540
So if I go back to my phone
here, and I go and say

00:26:51.540 --> 00:26:54.900
unregister, and that's
going to make a call

00:26:54.900 --> 00:26:57.380
to unregister hopefully.

00:26:57.380 --> 00:26:58.840
Maybe it's not working.

00:26:58.840 --> 00:26:59.440
Oh, there it goes.

00:26:59.440 --> 00:27:01.520
It's making a call to unregister
and it says

00:27:01.520 --> 00:27:02.040
successfully removed.

00:27:02.040 --> 00:27:03.120
It's tiny font.

00:27:03.120 --> 00:27:04.690
I apologize.

00:27:04.690 --> 00:27:09.760
And then if I go back to my
system here and say run query,

00:27:09.760 --> 00:27:12.450
so you'll see a new line pop
up, and then it should only

00:27:12.450 --> 00:27:13.940
return one record.

00:27:13.940 --> 00:27:16.710
So you can see that there's only
one record now, and these

00:27:16.710 --> 00:27:18.650
are the two records from
the prior query.

00:27:18.650 --> 00:27:23.040
So this record, 940, is gone
because the user said I don't

00:27:23.040 --> 00:27:25.980
want any more messages from
the system and it's our

00:27:25.980 --> 00:27:28.820
responsibility to get rid of
that registration record.

00:27:28.820 --> 00:27:31.030
If the user wants it again,
they can register again.

00:27:31.030 --> 00:27:34.550
And all of this, of course, is
running on the Google Cloud,

00:27:34.550 --> 00:27:35.150
which is great.

00:27:35.150 --> 00:27:38.670
So the system where registration
IDs are stored is

00:27:38.670 --> 00:27:41.700
in the Google Cloud, the data
source itself, which is a

00:27:41.700 --> 00:27:44.840
spreadsheet, is in the Google
Cloud, and GCM, of course, is

00:27:44.840 --> 00:27:47.400
Google Cloud Messaging,
is routing via that.

00:27:47.400 --> 00:27:50.170
So it's actually great to be
able to just copy, paste and

00:27:50.170 --> 00:27:52.120
code into a Script Editor.

00:27:52.120 --> 00:27:54.950
I think I mentioned briefly
that it's all done in the

00:27:54.950 --> 00:27:56.940
browser, but here's
the Script Editor.

00:27:56.940 --> 00:27:59.560
It looks and feels like
a simplified IDE.

00:27:59.560 --> 00:28:01.300
And you can just punch
in some JavaScript

00:28:01.300 --> 00:28:03.540
code and off you go.

00:28:03.540 --> 00:28:06.800
In this case, the notification
is on every edit, but here's

00:28:06.800 --> 00:28:08.360
where you can put in your
business logic.

00:28:08.360 --> 00:28:12.350
You could say only notify me
between work hours, or only

00:28:12.350 --> 00:28:15.770
notify me if something exceeds
a threshold, and so on.

00:28:15.770 --> 00:28:19.640
So you can actually build some
interesting business processes

00:28:19.640 --> 00:28:21.920
around this.

00:28:21.920 --> 00:28:24.370
So with that let me actually go
back and just show you the

00:28:24.370 --> 00:28:27.270
diagram that I said I will
show in a little bit.

00:28:27.270 --> 00:28:29.920
I think this will help kind of
see how everything kind of

00:28:29.920 --> 00:28:31.450
came together.

00:28:31.450 --> 00:28:33.050
So the top part of the diagram
is actually real

00:28:33.050 --> 00:28:33.970
straightforward.

00:28:33.970 --> 00:28:37.630
An Android device making an HTP
call to get data against

00:28:37.630 --> 00:28:40.320
the ContentService, which
returns JSON from the

00:28:40.320 --> 00:28:41.060
spreadsheet.

00:28:41.060 --> 00:28:42.990
So this is really
straightforward.

00:28:42.990 --> 00:28:44.170
Something that makes sense.

00:28:44.170 --> 00:28:47.470
And that's our little icon
for Apps Script.

00:28:47.470 --> 00:28:50.960
And then the bottom half is the
much more complicated one,

00:28:50.960 --> 00:28:53.020
because there are a lot
of moving pieces.

00:28:53.020 --> 00:28:56.040
The first part is the
GCM, the Google

00:28:56.040 --> 00:28:58.650
Cloud Messaging component.

00:28:58.650 --> 00:29:00.650
The native application
is expected to make a

00:29:00.650 --> 00:29:03.830
registration call against the
GCM and a server, and the

00:29:03.830 --> 00:29:06.380
server gets what's called
the registration ID.

00:29:06.380 --> 00:29:09.870
The registration ID is stored
into a shared data store,

00:29:09.870 --> 00:29:13.570
which is also responsible for
sending out the push messages.

00:29:13.570 --> 00:29:16.930
There's also console view
to see all active

00:29:16.930 --> 00:29:18.830
registration IDs.

00:29:18.830 --> 00:29:21.840
And then here's a little
component that tracks changes

00:29:21.840 --> 00:29:25.060
and then queues up messages
against the data store, which

00:29:25.060 --> 00:29:28.930
then sends it out to the GCM
component, which then notifies

00:29:28.930 --> 00:29:29.700
the device.

00:29:29.700 --> 00:29:32.130
So a lot of different
moving pieces.

00:29:32.130 --> 00:29:35.210
Hopefully this diagram kind of
brought it all together.

00:29:35.210 --> 00:29:38.100
But the idea is that this whole
box here, this little

00:29:38.100 --> 00:29:42.580
gray box, is all in the Google
Cloud, as far as applications,

00:29:42.580 --> 00:29:46.130
logic, and even some of the
messaging components go as

00:29:46.130 --> 00:29:48.100
your applications
are concerned.

00:29:48.100 --> 00:29:51.120
And the client side code is,
like I said, straight

00:29:51.120 --> 00:29:52.920
from the GCM demo.

00:29:52.920 --> 00:29:55.390
So if you just go to this page
and then download the client

00:29:55.390 --> 00:29:58.130
and the server code, just look
at the client code, and then

00:29:58.130 --> 00:30:00.740
everywhere there's an App Engine
URL, replace that with

00:30:00.740 --> 00:30:02.690
the URL for your application.

00:30:02.690 --> 00:30:06.700
To show you that in action, you
can see that the server

00:30:06.700 --> 00:30:11.350
URL is script.google.com URL,
instead of my host or some

00:30:11.350 --> 00:30:15.770
other local server or App Engine
server, so certainly

00:30:15.770 --> 00:30:19.200
it's not a big delta change,
as far as how things work.

00:30:19.200 --> 00:30:23.510
One other change that I had to
make here was in the server

00:30:23.510 --> 00:30:26.620
utilities code.

00:30:26.620 --> 00:30:30.390
Apps Script doesn't allow for
paths on your web application,

00:30:30.390 --> 00:30:34.010
so you cannot have /register, so
I kind of commented it out

00:30:34.010 --> 00:30:38.670
and just have a type in the URL,
in the post body, that

00:30:38.670 --> 00:30:40.630
tells me what I'm trying
to achieve.

00:30:40.630 --> 00:30:45.070
So it's something that you
should keep in mind instead of

00:30:45.070 --> 00:30:48.030
App Engine allows you have
slash whatever, slash my

00:30:48.030 --> 00:30:49.580
particular path.

00:30:49.580 --> 00:30:52.400
With Apps Script, there's no
router and everything kind of

00:30:52.400 --> 00:30:56.130
goes in via one endpoint, the do
post or the do get endpoint

00:30:56.130 --> 00:30:59.830
and you have to, through
parameters, decide which way

00:30:59.830 --> 00:31:00.690
you want to go.

00:31:00.690 --> 00:31:02.890
And unregister is very
similar as well.

00:31:02.890 --> 00:31:06.070
The same URL with the
type of unregister.

00:31:06.070 --> 00:31:08.130
So that's really all
we wanted to show.

00:31:08.130 --> 00:31:10.080
All the code will be shared.

00:31:10.080 --> 00:31:12.070
Certainly we are very excited
to see what you

00:31:12.070 --> 00:31:13.100
can build with it.

00:31:13.100 --> 00:31:15.730
I think there's a lot of
interesting use cases that,

00:31:15.730 --> 00:31:18.010
just showing it off internally
to some folks here they've

00:31:18.010 --> 00:31:20.940
thought of, allows you to
use Google Apps as their

00:31:20.940 --> 00:31:24.870
spreadsheets, and maybe even
Docs and Gmail, of course, all

00:31:24.870 --> 00:31:28.330
of that as a data source for
your Android applications.

00:31:28.330 --> 00:31:30.220
Anything that I missed, Adam?

00:31:30.220 --> 00:31:31.520
ADAM KOCH: Not really.

00:31:31.520 --> 00:31:33.840
I guess one question
for you is how does

00:31:33.840 --> 00:31:34.660
this kind of scale?

00:31:34.660 --> 00:31:38.790
Like when making the do get and
do post, are they quotas

00:31:38.790 --> 00:31:41.780
or can people go and make as
many calls as they want?

00:31:41.780 --> 00:31:43.540
ARUN NAGARAJAN: Yeah,
so there are quotas.

00:31:43.540 --> 00:31:46.530
Our quotas are described
in our Dashboard.

00:31:46.530 --> 00:31:48.120
So I'll just pull that
up real quick.

00:31:48.120 --> 00:31:50.870
That's a really good question.

00:31:50.870 --> 00:31:54.250
Apps Script is not a platform
with which you'll build a

00:31:54.250 --> 00:31:55.870
business by itself.

00:31:55.870 --> 00:31:57.940
So there's definitely quotas.

00:31:57.940 --> 00:32:00.630
This is a free version, so if
you have a Gmail account you

00:32:00.630 --> 00:32:02.075
can start using this.

00:32:02.075 --> 00:32:06.130
So if I go to Other and then go
to Dashboard and quotas and

00:32:06.130 --> 00:32:08.710
go to quota limits, you'll see
a lot of the quota are

00:32:08.710 --> 00:32:10.320
described here.

00:32:10.320 --> 00:32:12.770
And there's a bunch of
information about URL Fetch

00:32:12.770 --> 00:32:14.740
and web applications as well.

00:32:14.740 --> 00:32:17.670
And this is something they you
can track around what are you

00:32:17.670 --> 00:32:19.820
doing with the application and
is Apps Script going to be the

00:32:19.820 --> 00:32:20.930
right fit for you?

00:32:20.930 --> 00:32:25.540
But in general, if you're only
using it for a few dozen

00:32:25.540 --> 00:32:30.130
users, or if you're not abusing
it in any crazy way,

00:32:30.130 --> 00:32:33.450
and you're not trying to build
millions of user application

00:32:33.450 --> 00:32:36.070
installs, I think it's
going to be fine.

00:32:36.070 --> 00:32:39.090
But there's definitely a fine
line between do I want to

00:32:39.090 --> 00:32:42.130
control the whole platform in
something like App Engine,

00:32:42.130 --> 00:32:45.250
where you have a lot more
control and you can pay for

00:32:45.250 --> 00:32:46.890
more scale.

00:32:46.890 --> 00:32:50.870
With Apps Script, there's a
free quota that anyone can

00:32:50.870 --> 00:32:53.180
build with and test with, and
then you can graduate to the

00:32:53.180 --> 00:32:55.790
Google Apps for Business
version, but even that is

00:32:55.790 --> 00:32:57.510
capped at a certain limit.

00:32:57.510 --> 00:33:01.620
So you'll want to be a little
careful if you are planning to

00:33:01.620 --> 00:33:04.070
build the next Angry Birds or
something like that, yes.

00:33:04.070 --> 00:33:05.525
ADAM KOCH: And one thing I just
really like about this,

00:33:05.525 --> 00:33:07.800
though, is sort of rapid
prototyping.

00:33:07.800 --> 00:33:10.540
I mean, you can't beat this
really, when you just want to

00:33:10.540 --> 00:33:13.330
get up and try out GCM or
something like that.

00:33:13.330 --> 00:33:16.390
See how it works and maybe
create some proof of concepts

00:33:16.390 --> 00:33:16.960
and what not.

00:33:16.960 --> 00:33:18.760
ARUN NAGARAJAN: And someone
also gave me a really good

00:33:18.760 --> 00:33:22.510
idea where this may not be right
for data, but maybe for

00:33:22.510 --> 00:33:26.230
configuration settings that
you can cache for a long

00:33:26.230 --> 00:33:29.060
period of time and then only
manually fetch against the

00:33:29.060 --> 00:33:29.820
spreadsheet.

00:33:29.820 --> 00:33:33.890
So maybe colors, maybe labels,
things like that, that you may

00:33:33.890 --> 00:33:36.800
want to tuck away under a debug
flag or something like

00:33:36.800 --> 00:33:38.700
that, that only certain
people can get at.

00:33:38.700 --> 00:33:42.280
Maybe that's a good way for you
to use this as well, where

00:33:42.280 --> 00:33:44.780
the spreadsheet gives you such
a simple interface where you

00:33:44.780 --> 00:33:47.590
can change things, add
things very quickly.

00:33:47.590 --> 00:33:50.760
Even use the Google form to
populate into it, so it allows

00:33:50.760 --> 00:33:54.050
you to build these
administrative tools as well.

00:33:54.050 --> 00:33:56.630
So not just for data, but
maybe for some certain

00:33:56.630 --> 00:33:58.510
configuration settings.

00:33:58.510 --> 00:34:00.840
So that's all I had.

00:34:00.840 --> 00:34:03.600
Sorry the demo had some issues
early on, but hopefully you

00:34:03.600 --> 00:34:05.160
saw the whole thing,
end to end.

00:34:05.160 --> 00:34:07.590
And thank you very much,
Adam, for joining us.

00:34:07.590 --> 00:34:08.420
ADAM KOCH: Thanks
for having me.

00:34:08.420 --> 00:34:10.060
That's really, really
interesting stuff.

00:34:10.060 --> 00:34:10.679
Really cool.

00:34:10.679 --> 00:34:12.389
ARUN NAGARAJAN: Thank you very
much, and we'll share the code

00:34:12.389 --> 00:34:14.890
with you, and looking forward to
what you can do with this.

00:34:14.890 --> 00:34:15.600
ADAM KOCH: See you guys.

00:34:15.600 --> 00:34:16.850
Bye.

00:34:24.000 --> 00:34:31.475
[MUSIC PLAYING]

