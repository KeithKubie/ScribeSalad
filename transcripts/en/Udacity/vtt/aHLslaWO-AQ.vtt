WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Narrator] So, here's my implementation of the resampling step,

00:00:03.000 --> 00:00:06.000
and it follows the same logic that I gave you in the diagram

00:00:06.000 --> 00:00:11.000
We're creating a new set of particles called P3; it's an empty set in the beginning,

00:00:11.000 --> 00:00:15.000
and inside this routine, every time I resample,

00:00:15.000 --> 00:00:21.000
I add a particle from the previous particle set with the index index.

00:00:21.000 --> 00:00:26.000
So, that's the main loop over here, and at the end I assign P3 back to P.

00:00:26.000 --> 00:00:28.000
So, that's the resampling step.

00:00:28.000 --> 00:00:31.000
My very first index is drawn at random.

00:00:31.000 --> 00:00:34.000
This is a uniform random sampler of all the indices,

00:00:34.000 --> 00:00:38.000
and then I had this running variable beta that I set to 0.0,

00:00:38.000 --> 00:00:43.000
and I cache away the max of W just to be slightly faster.

00:00:43.000 --> 00:00:46.000
You don't have to do this; they come in over here.

00:00:46.000 --> 00:00:48.000
Doesn't really matter if we have max over here,

00:00:48.000 --> 00:00:51.000
but then I go and produce exactly N particles, and the way I do this

00:00:51.000 --> 00:00:55.000
I add to beta a uniform random that is twice as large

00:00:55.000 --> 00:01:00.000
and maximum in the range as my max weight W.

00:01:00.000 --> 00:01:03.000
Now, 2 times max weight W will be a very large step,

00:01:03.000 --> 00:01:06.000
but by adding a random variable that sits between 0 and 1,

00:01:06.000 --> 00:01:11.000
I have uniformity in 0 and 2 times MW,

00:01:11.000 --> 00:01:16.000
and then while this beta variable is larger than the weight of the current index,

00:01:16.000 --> 00:01:19.000
I subtract this weight from my beta value

00:01:19.000 --> 00:01:23.000
and I increment index by 1 modulo N

00:01:23.000 --> 00:01:27.000
the total number of particles, and when it's smaller I'm done.

00:01:27.000 --> 00:01:32.000
I can just take that particle, add it, append it, and repeat.

00:01:32.000 --> 00:01:35.000
So, this entire procedure over here is somewhat involved

00:01:35.000 --> 00:01:38.000
if you got that right I'm impressed.

00:01:38.000 --> 00:01:40.000
I hope you learn something from doing it.

00:01:40.000 --> 00:01:43.000
It happens to be really easy to program once you know what to do,

00:01:43.000 --> 00:01:46.000
and every time we write a particle filter you can just reuse it.

00:01:46.000 --> 00:01:49.000
You never have to think about it again because there's nothing

00:01:49.000 --> 00:01:52.000
domain specific in this specific procedure over here.

00:01:52.000 --> 00:01:56.000
So, let's run it; if I run it nothing happens to that empty set.

00:01:56.000 --> 00:02:00.000
So, let me print out the resulting set of particles.

00:02:00.000 --> 00:02:02.000
So, now I have a print P over here.

00:02:02.000 --> 00:02:06.000
Let me run it, and of course, I'm going to get 1000 particles, right?

00:02:06.000 --> 00:02:10.000
A lot of particles but let's look through them.

00:02:10.000 --> 00:02:14.000
If you just look at the first value over here, they are all about the same.

00:02:14.000 --> 00:02:18.000
They are all between 76 and 82.

00:02:18.000 --> 00:02:26.000
The second one--they're all about 42, 44, 43, 41, 39, 38.

00:02:26.000 --> 00:02:29.000
So, what you've gotten here is a set of particles

00:02:29.000 --> 00:02:31.000
that are all co-located .

00:02:31.000 --> 00:02:34.000
So, instead of having a complete random set of particles, like we had before,

00:02:34.000 --> 00:02:38.000
the resampling step--we can see this already gives me particles

00:02:38.000 --> 00:02:40.000
of very similar X and Y positions.

00:02:40.000 --> 00:02:43.000
Now it turns out the orientations are not very similar.

00:02:43.000 --> 00:02:46.000
They jump like crazy, and the reason is--

00:02:46.000 --> 00:02:52.000
--well, if you think about it, we only have 1 location so far,

00:02:52.000 --> 00:02:57.000
our distances to landmarks are independent of the orientation.

00:02:57.000 --> 00:03:02.000
Such as that our orientation plays no role in the projected measurement,

00:03:02.000 --> 00:03:04.000
and therefore has no role in the selection.

00:03:04.000 --> 00:03:06.000
Let me make the point, again; here's our 4 landmarks,

00:03:06.000 --> 00:03:08.000
and we measure the distances to those.

00:03:08.000 --> 00:03:12.000
A robot facing this direction has a certain set of distances.

00:03:12.000 --> 00:03:16.000
A robot facing a different direction, like this one,

00:03:16.000 --> 00:03:19.000
has the exact same set of distances.

00:03:19.000 --> 00:03:22.571
Therefore, in our particle future, the heading direction plays no role.

