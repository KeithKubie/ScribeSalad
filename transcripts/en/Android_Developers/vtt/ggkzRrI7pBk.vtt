WEBVTT
Kind: captions
Language: en

00:00:05.800 --> 00:00:08.740
So the first thing we're going
to want to do is download and

00:00:08.740 --> 00:00:10.880
run our sample application.

00:00:10.880 --> 00:00:13.400
Now, I don't actually know where
the zip file is going to

00:00:13.400 --> 00:00:16.370
be, but hopefully by the
time this video gets

00:00:16.370 --> 00:00:17.970
posted we'll know.

00:00:17.970 --> 00:00:21.540
And so thanks to the magic of
YouTube annotations and post

00:00:21.540 --> 00:00:23.970
processing and stuff, I'm
going to put it up on

00:00:23.970 --> 00:00:26.890
screen right now.

00:00:26.890 --> 00:00:27.820
OK.

00:00:27.820 --> 00:00:29.380
So I want to follow that link.

00:00:29.380 --> 00:00:31.300
Hopefully there'll be
a zip file there

00:00:31.300 --> 00:00:32.610
that you can download.

00:00:32.610 --> 00:00:35.220
And by the time you unzip it,
you should get something that

00:00:35.220 --> 00:00:36.900
looks a little like this.

00:00:36.900 --> 00:00:38.740
It's a basic Xcode project.

00:00:38.740 --> 00:00:41.100
Let's open it up and take a look
at what we've got here.

00:00:44.960 --> 00:00:47.940
Now, the first thing I'm going
to do before I even run it is

00:00:47.940 --> 00:00:52.210
change my bundle identifier from
com.example to, well, in

00:00:52.210 --> 00:00:53.890
my case com.google.

00:00:53.890 --> 00:00:55.550
You should change this to
something that's more

00:00:55.550 --> 00:00:57.300
appropriate for your company.

00:00:57.300 --> 00:01:00.140
I do find that if you change
the bundle identifier after

00:01:00.140 --> 00:01:03.120
you've already run it once, you
end up with two copies of

00:01:03.120 --> 00:01:05.710
the game on the simulator and
sometimes it gets confused.

00:01:05.710 --> 00:01:08.750
So I like to change it first
before I even run it.

00:01:08.750 --> 00:01:10.840
Once that's done, we can run
it and check out our game.

00:01:14.810 --> 00:01:18.910
And we are presented with a
fantastic main menu where I

00:01:18.910 --> 00:01:21.550
get to pick from an easy,
medium, and hard difficulty

00:01:21.550 --> 00:01:23.890
level for the Guess
My Number game.

00:01:23.890 --> 00:01:27.140
I'm going to pick an easy game
here and I get to guess a

00:01:27.140 --> 00:01:28.980
number between 1 and 100.

00:01:28.980 --> 00:01:31.700
So I'm going to start
by guessing 50.

00:01:31.700 --> 00:01:33.390
And it's higher than 50.

00:01:33.390 --> 00:01:36.630
You'll notice that as it tells
me the value is higher or

00:01:36.630 --> 00:01:41.400
lower than what I guessed, the
min and max values here, they

00:01:41.400 --> 00:01:44.660
tell me what the minimum and
maximum possible values could

00:01:44.660 --> 00:01:47.200
be for our mystery number.

00:01:47.200 --> 00:01:49.152
So let's see, I'll guess 85.

00:01:49.152 --> 00:01:51.360
It's higher than 85.

00:01:51.360 --> 00:01:52.440
How about 92?

00:01:52.440 --> 00:01:53.450
Higher than 92.

00:01:53.450 --> 00:01:53.930
Wow.

00:01:53.930 --> 00:01:55.530
OK.

00:01:55.530 --> 00:01:57.070
All right, 95.

00:01:57.070 --> 00:01:58.220
Got it in five guesses.

00:01:58.220 --> 00:02:00.700
And no it's asking me if
I want to play again.

00:02:00.700 --> 00:02:03.600
And I don't think I will,
because that wasn't really all

00:02:03.600 --> 00:02:05.260
that much fun.

00:02:05.260 --> 00:02:06.450
So we're going to stop this.

00:02:06.450 --> 00:02:09.520
And let's get a quick overview
of this application.

00:02:09.520 --> 00:02:11.340
I'm not going to spend a lot
of time on this, partly

00:02:11.340 --> 00:02:14.570
because it's pretty basic, but
also because there's a very

00:02:14.570 --> 00:02:16.750
good chance you are a
better Objective-C

00:02:16.750 --> 00:02:18.220
programmer than I am.

00:02:18.220 --> 00:02:20.460
So if you find that you're doing
something different than

00:02:20.460 --> 00:02:23.030
the way I'm doing it, don't
assume that my way is

00:02:23.030 --> 00:02:24.960
necessarily more proper
or more correct

00:02:24.960 --> 00:02:25.990
than what you're doing.

00:02:25.990 --> 00:02:27.660
There's a very good chance that
you're doing the right

00:02:27.660 --> 00:02:28.700
thing and I'm not.

00:02:28.700 --> 00:02:30.200
And if so, feel free
to leave some

00:02:30.200 --> 00:02:31.360
suggestions in the comments.

00:02:31.360 --> 00:02:32.230
I'll read those.

00:02:32.230 --> 00:02:35.020
Just don't be a jerk about it.

00:02:35.020 --> 00:02:37.385
So first thing we're going to
do, let's take a look at the

00:02:37.385 --> 00:02:38.240
app delegate.

00:02:38.240 --> 00:02:40.220
What we've got here
is pretty basic.

00:02:40.220 --> 00:02:43.930
We're creating an intro view
controller and we're creating

00:02:43.930 --> 00:02:47.090
a navigation controller and then
we're simply taking our

00:02:47.090 --> 00:02:49.980
intro view controller and making
that the root of our

00:02:49.980 --> 00:02:51.450
navigation controller.

00:02:51.450 --> 00:02:54.790
We display that on the screen
and we're ready to go.

00:02:54.790 --> 00:02:56.910
Let's take a look at our
intro view controller.

00:02:56.910 --> 00:02:59.170
We can see here in the nib,
we've got three buttons, easy,

00:02:59.170 --> 00:03:01.170
medium, and hard, for
playing on those

00:03:01.170 --> 00:03:03.480
different difficulty levels.

00:03:03.480 --> 00:03:06.180
If we look at our dot m file,
basically the three buttons

00:03:06.180 --> 00:03:08.950
here all call start game with
difficulty with a different

00:03:08.950 --> 00:03:10.370
difficulty level.

00:03:10.370 --> 00:03:13.410
All start game with difficulty
does is it creates a game view

00:03:13.410 --> 00:03:16.330
controller, sets the game
difficulty, and then pushes

00:03:16.330 --> 00:03:18.970
that to the top for our
navigation controller.

00:03:18.970 --> 00:03:20.890
If you're wondering where these
difficulty levels are

00:03:20.890 --> 00:03:24.210
coming from, that's coming from
our Enums.h file, where

00:03:24.210 --> 00:03:27.970
we define the difficulty level
as well as a reply Enum that

00:03:27.970 --> 00:03:30.140
simply tells the player whether
the guess was too

00:03:30.140 --> 00:03:33.700
high, too low, or they got it
just right and they win.

00:03:33.700 --> 00:03:35.880
So let's take a look at
our game model next.

00:03:35.880 --> 00:03:38.090
In our dot h file, you'll
see we have a number

00:03:38.090 --> 00:03:39.390
of properties here.

00:03:39.390 --> 00:03:43.060
Game max is the maximum possible
value for any game.

00:03:43.060 --> 00:03:45.850
So in a game where I'm guessing
between 1 and 1,000

00:03:45.850 --> 00:03:47.960
game max will always be 1,000.

00:03:47.960 --> 00:03:51.170
Player min and player max are
the minimum and maximum values

00:03:51.170 --> 00:03:53.540
based on the player's
guesses so far.

00:03:53.540 --> 00:03:57.020
So you saw when I guessed 50
that it told me it was too low

00:03:57.020 --> 00:03:59.920
and that my min and max
where 51 and 100.

00:03:59.920 --> 00:04:02.375
That's what player in
and player max are.

00:04:02.375 --> 00:04:05.970
Num guesses is the number of
guesses that I've made so far.

00:04:05.970 --> 00:04:08.960
Max length is the maximum number
of digits that are

00:04:08.960 --> 00:04:11.320
possible in my answer,
and that's based on

00:04:11.320 --> 00:04:13.240
the game max value.

00:04:13.240 --> 00:04:15.790
And then we have two public
methods, new game with level,

00:04:15.790 --> 00:04:18.610
which simply starts a new game
with a particular difficulty

00:04:18.610 --> 00:04:22.900
level, and player guessed takes
a guess from the player

00:04:22.900 --> 00:04:26.250
and returns one of those reply
Enums that says too high, too

00:04:26.250 --> 00:04:28.150
low, or you win.

00:04:28.150 --> 00:04:29.700
If we look at the game
model, we can see

00:04:29.700 --> 00:04:31.270
most of these methods.

00:04:31.270 --> 00:04:33.640
New game with level will define
the game max based on

00:04:33.640 --> 00:04:35.140
the difficulty level.

00:04:35.140 --> 00:04:37.790
It will generate a secret
number, reset the player min

00:04:37.790 --> 00:04:41.890
and player max, reset number of
guesses to 0, and determine

00:04:41.890 --> 00:04:44.000
the max length again based
on the number of

00:04:44.000 --> 00:04:46.720
digits in game max.

00:04:46.720 --> 00:04:49.030
Player guessed increments
the number of guesses.

00:04:49.030 --> 00:04:51.850
It will adjust the player min
and player max values as

00:04:51.850 --> 00:04:55.320
appropriate depending on what
I've guessed and will return

00:04:55.320 --> 00:04:59.810
too high, too low, or
you've won Enum.

00:04:59.810 --> 00:05:01.930
So now let's take a look at
the game view controller.

00:05:01.930 --> 00:05:05.030
This is probably where most of
the interesting game logic is.

00:05:05.030 --> 00:05:08.320
If you look at the nib, we've
got some basic labels, a text

00:05:08.320 --> 00:05:13.300
field, a guess button, min and
max labels, a response label,

00:05:13.300 --> 00:05:15.940
and a play again button.

00:05:15.940 --> 00:05:18.820
If we look at the dot h file,
we really only have one

00:05:18.820 --> 00:05:21.590
property here and that's
the game difficulty.

00:05:21.590 --> 00:05:24.130
You'll recall that was set by
the intro view controller when

00:05:24.130 --> 00:05:26.130
we start a new game.

00:05:26.130 --> 00:05:27.890
And finally, in our
dot m file--

00:05:27.890 --> 00:05:29.110
let's go to the top here--

00:05:29.110 --> 00:05:32.030
we have a number of properties
to represent all of the UI

00:05:32.030 --> 00:05:37.250
elements on screen as well as a
game model and a Boolean to

00:05:37.250 --> 00:05:39.480
determine whether the game
was over or not.

00:05:39.480 --> 00:05:42.660
Start game calls a new game with
level on our game model

00:05:42.660 --> 00:05:45.960
and resets a number of
on screen elements.

00:05:45.960 --> 00:05:48.990
At that point, it updates the
interface, updates the min/max

00:05:48.990 --> 00:05:52.440
labels, and basically just preps
the screen for new game.

00:05:52.440 --> 00:05:55.700
Update min/max labels just
updates those labels based on

00:05:55.700 --> 00:05:57.570
what we got for the model.

00:05:57.570 --> 00:06:01.120
Update interface based on game
over shows or hides various

00:06:01.120 --> 00:06:04.670
buttons depending on whether
the game is over or not.

00:06:04.670 --> 00:06:07.360
Play again button was pressed,
starts a new game.

00:06:07.360 --> 00:06:09.970
Guess button was pressed is
probably where most of the

00:06:09.970 --> 00:06:11.970
interesting logic
is in our game.

00:06:11.970 --> 00:06:16.800
We take the integer value from
the player's guess and we'll

00:06:16.800 --> 00:06:19.560
pass that to our game model
through the public method

00:06:19.560 --> 00:06:20.980
player guessed.

00:06:20.980 --> 00:06:23.810
And then based on the response
we either adjust some of the

00:06:23.810 --> 00:06:27.280
interface elements on screen or
if the player guessed right

00:06:27.280 --> 00:06:31.800
then we say, hey, game's over
and we update our interface.

00:06:31.800 --> 00:06:34.680
This method here, text field,
should change characters in

00:06:34.680 --> 00:06:36.510
range replacement string.

00:06:36.510 --> 00:06:39.660
All this really does is it makes
sure I can't enter more

00:06:39.660 --> 00:06:43.840
digits in the text field then
are appropriate for this game.

00:06:43.840 --> 00:06:46.420
So if I'm guessing a number
between 1 and 100, this will

00:06:46.420 --> 00:06:49.240
stop me from entering more
than three digits.

00:06:49.240 --> 00:06:52.570
Touches begin with event, this
really just makes sure I hide

00:06:52.570 --> 00:06:54.150
the keyboard if I start
clicking on

00:06:54.150 --> 00:06:55.700
other elements on screen.

00:06:55.700 --> 00:06:59.170
And view did load sets up our
game model, sets our text

00:06:59.170 --> 00:07:02.840
field delegate to self, so that
this text field should

00:07:02.840 --> 00:07:06.300
change characters in range
method gets called.

00:07:06.300 --> 00:07:08.110
So that's about all there
is to this application.

00:07:08.110 --> 00:07:10.420
Feel free to try it out for
yourself for a little while.

00:07:10.420 --> 00:07:11.680
Feel free to experiment.

00:07:11.680 --> 00:07:12.940
Look at what it all does.

00:07:12.940 --> 00:07:15.160
And when you're all done having
fun with this game,

00:07:15.160 --> 00:07:18.010
which should take all of about
30 seconds, let's think about

00:07:18.010 --> 00:07:20.160
how we would start adding some
game services to this

00:07:20.160 --> 00:07:21.360
application.

00:07:21.360 --> 00:07:23.790
And the very first thing
we'll want to do is

00:07:23.790 --> 00:07:24.920
sign the user in.

00:07:24.920 --> 00:07:27.210
And so we'll start tackling
that in the next lesson.

