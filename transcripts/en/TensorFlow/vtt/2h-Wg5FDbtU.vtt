WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.305
[MUSIC PLAYING]

00:00:03.528 --> 00:00:05.820
ANKUR KOTWAL: Today I want
to talk to you about machine

00:00:05.820 --> 00:00:08.570
learning for game development.

00:00:08.570 --> 00:00:10.700
But before we dive
straight into that,

00:00:10.700 --> 00:00:13.010
I want to take a step
back and show you

00:00:13.010 --> 00:00:17.010
some of the magical use cases
we've seen in consumer apps.

00:00:17.010 --> 00:00:19.280
So for those of
you that use Gmail,

00:00:19.280 --> 00:00:21.860
you may be aware that
the spam filter in Gmail

00:00:21.860 --> 00:00:24.360
is actually built
on an ML model.

00:00:24.360 --> 00:00:26.300
And this model
evolves over time,

00:00:26.300 --> 00:00:30.080
because users can tag
something as spam or not spam.

00:00:30.080 --> 00:00:33.680
And the model actually adapts
over time based on that.

00:00:33.680 --> 00:00:37.730
One of my favorite use cases
is actually Google Photos.

00:00:37.730 --> 00:00:40.850
So if you wanted to fire
up Google Photos right now

00:00:40.850 --> 00:00:43.970
and go into the Search field,
and type in the word car,

00:00:43.970 --> 00:00:45.950
it's going to give you
back all the images

00:00:45.950 --> 00:00:49.280
in your personal library
that have cars in them.

00:00:49.280 --> 00:00:51.165
That's not because you
went and labeled them.

00:00:51.165 --> 00:00:53.540
It's not because someone at
Google went and labeled them.

00:00:53.540 --> 00:00:56.690
It's because there's an ML
model behind it that's actually

00:00:56.690 --> 00:01:00.620
able to recognize objects,
landmarks, locations,

00:01:00.620 --> 00:01:03.310
and even your pets.

00:01:03.310 --> 00:01:07.120
So it turns out that
games and game development

00:01:07.120 --> 00:01:10.390
is actually a rich area for
machine learning research.

00:01:10.390 --> 00:01:15.640
And in 2014, DeepMind
joined us and started

00:01:15.640 --> 00:01:19.910
using games as a way to do
their machine learning research.

00:01:19.910 --> 00:01:24.290
So in 2015 they talked about
how they use some classic video

00:01:24.290 --> 00:01:26.720
games for ML research.

00:01:26.720 --> 00:01:29.530
So what we see on the left
hand side there is "Breakout."

00:01:29.530 --> 00:01:32.380
And what they did is they used
a form of machine learning

00:01:32.380 --> 00:01:35.470
called reinforcement
learning, where the model

00:01:35.470 --> 00:01:37.840
itself only had
access to the inputs

00:01:37.840 --> 00:01:41.410
that it could provide the game,
the visuals, so the screen,

00:01:41.410 --> 00:01:42.910
and the score.

00:01:42.910 --> 00:01:45.615
And the goal was to try and get
as high a score as possible.

00:01:45.615 --> 00:01:47.240
So it didn't know
how to play the game.

00:01:47.240 --> 00:01:49.750
It was just working
out its own way.

00:01:49.750 --> 00:01:51.370
And within a few
hours, it was one

00:01:51.370 --> 00:01:54.008
of the best "Breakout"
players in the world.

00:01:54.008 --> 00:01:56.050
Actually, if you look at
the strategy it employs,

00:01:56.050 --> 00:01:58.270
it creates a gap on
the left hand side,

00:01:58.270 --> 00:02:00.340
and lets the ball
go through the gap,

00:02:00.340 --> 00:02:02.230
and let it bounce
off the top wall

00:02:02.230 --> 00:02:04.300
and clear the bricks itself.

00:02:04.300 --> 00:02:06.970
A year later, DeepMind
surprised everybody

00:02:06.970 --> 00:02:09.340
by building an ML
model that was actually

00:02:09.340 --> 00:02:12.280
able to play the game of
Go and defeat some world

00:02:12.280 --> 00:02:15.280
champions, the world
champions at the time.

00:02:15.280 --> 00:02:17.320
And more recently in
the last few months,

00:02:17.320 --> 00:02:19.840
DeepMind and Blizzard have
been talking about the work

00:02:19.840 --> 00:02:22.740
that they've been doing
together with "StarCraft II,"

00:02:22.740 --> 00:02:27.070
and building an AI that can play
"StarCraft II" competitively.

00:02:27.070 --> 00:02:29.590
I recommend you go
and check it out.

00:02:29.590 --> 00:02:32.770
Actually, again, they
pitted the AI Alpha

00:02:32.770 --> 00:02:36.430
Star against some
pro esports players

00:02:36.430 --> 00:02:38.870
and were able to defeat them.

00:02:38.870 --> 00:02:40.600
So what we're
seeing is games are

00:02:40.600 --> 00:02:43.120
a great place for ML research.

00:02:43.120 --> 00:02:45.430
And we want to be able
to find a way that we

00:02:45.430 --> 00:02:48.190
can use games in our
own applications,

00:02:48.190 --> 00:02:50.180
in our own game development.

00:02:50.180 --> 00:02:54.310
But not everybody has a team
of machine learning experts

00:02:54.310 --> 00:02:56.320
like DeepMind does.

00:02:56.320 --> 00:02:59.680
And as you can see from the
numbers here, less than 2%

00:02:59.680 --> 00:03:03.250
of all developers have any
machine learning expertise.

00:03:03.250 --> 00:03:07.990
And fewer still are deep
learning researchers.

00:03:07.990 --> 00:03:10.240
But at Google Cloud,
what we want to do

00:03:10.240 --> 00:03:11.870
is democratize machine learning.

00:03:11.870 --> 00:03:15.850
We want to find a way to make
ML available to everybody

00:03:15.850 --> 00:03:17.800
so that you can
innovate and find

00:03:17.800 --> 00:03:21.180
use cases where it's useful.

00:03:21.180 --> 00:03:23.910
So today, I'm going to be
talking to you about how

00:03:23.910 --> 00:03:28.260
you can use machine learning
for specific areas of game

00:03:28.260 --> 00:03:29.277
development.

00:03:29.277 --> 00:03:31.110
We're going to start
with player experience,

00:03:31.110 --> 00:03:33.630
move into data analytics, and
talk about game development.

00:03:33.630 --> 00:03:36.180
But the important
aspect here is,

00:03:36.180 --> 00:03:39.190
we're kind of going to go
from easy mode to hard mode.

00:03:39.190 --> 00:03:43.270
So think of these as
difficulty in your games.

00:03:43.270 --> 00:03:48.100
So let's get started
with player experience.

00:03:48.100 --> 00:03:50.230
We've been doing ML
research for years.

00:03:50.230 --> 00:03:52.720
And what we have done
with that research

00:03:52.720 --> 00:03:58.450
is exposed it as a set of APIs
that you can readily use today.

00:03:58.450 --> 00:04:02.590
Now, these are pre-built models
based on our vast data sets.

00:04:02.590 --> 00:04:05.800
And we've just exposed
them as REST API endpoints

00:04:05.800 --> 00:04:08.290
where you can consume them
either on your server,

00:04:08.290 --> 00:04:11.230
or directly through
your clients as well.

00:04:11.230 --> 00:04:13.480
But these are generic APIs.

00:04:13.480 --> 00:04:15.200
And I'll cover a few of them.

00:04:15.200 --> 00:04:17.410
Let's look at some
specific examples

00:04:17.410 --> 00:04:20.480
where game developers
could benefit from them.

00:04:20.480 --> 00:04:23.140
So we're living in a world
where, increasingly, we

00:04:23.140 --> 00:04:25.180
have a global gaming audience.

00:04:25.180 --> 00:04:28.090
We have players that are able
to connect with each other

00:04:28.090 --> 00:04:30.820
from vastly different
parts of the world.

00:04:30.820 --> 00:04:34.630
And language is,
frankly, a challenge.

00:04:34.630 --> 00:04:37.965
Some game developers have
used techniques like emotes

00:04:37.965 --> 00:04:39.340
to try and get
around this, where

00:04:39.340 --> 00:04:42.310
we limit the type of
vocabulary that can be used,

00:04:42.310 --> 00:04:44.630
and that makes it
easy to translate.

00:04:44.630 --> 00:04:47.260
But when you're in
the thick of battle,

00:04:47.260 --> 00:04:49.960
in a battle royale game, and
one of your squad members

00:04:49.960 --> 00:04:52.960
speaks a different language
to the other folks,

00:04:52.960 --> 00:04:55.000
it's really hard to coordinate.

00:04:55.000 --> 00:04:57.680
So we can do better here.

00:04:57.680 --> 00:04:59.660
Now, you may have heard
of Google Translate.

00:04:59.660 --> 00:05:01.160
It's a consumer
application where

00:05:01.160 --> 00:05:03.740
we can translate languages
from a source language

00:05:03.740 --> 00:05:05.210
to a destination language.

00:05:05.210 --> 00:05:07.610
You may have seen it
in Google Chrome, where

00:05:07.610 --> 00:05:10.340
if you go to a website that's
in a language that's not

00:05:10.340 --> 00:05:12.380
your default language,
Google Chrome offers

00:05:12.380 --> 00:05:14.050
to translate that for you.

00:05:14.050 --> 00:05:16.970
But we've exposed
that as an API.

00:05:16.970 --> 00:05:20.230
And we call it the
Google Translate API.

00:05:20.230 --> 00:05:23.930
I'm going to switch to a demo
just to show you how it works.

00:05:23.930 --> 00:05:26.060
So can we switch to the
demo machine, please?

00:05:26.060 --> 00:05:27.070
There we are.

00:05:27.070 --> 00:05:30.905
So here is actually just the
landing page for the API.

00:05:30.905 --> 00:05:32.030
cloud.google.com/translate.

00:05:32.030 --> 00:05:34.420
And when we scroll down,
you'll see that we've actually

00:05:34.420 --> 00:05:36.380
got a demo that you can see.

00:05:36.380 --> 00:05:40.330
So first thing I'm going to
do is click the recapture.

00:05:40.330 --> 00:05:43.060
And switch languages.

00:05:43.060 --> 00:05:45.550
So the type of thing that we
might have players say is, oh,

00:05:45.550 --> 00:05:46.280
good game.

00:05:46.280 --> 00:05:49.030
Have fun.

00:05:49.030 --> 00:05:50.960
And we can do it across
different languages.

00:05:50.960 --> 00:05:53.810
So let's say we choose Dutch.

00:05:53.810 --> 00:05:56.355
You'll see it's responsiveness
is incredibly fast.

00:05:56.355 --> 00:05:57.230
We can say something.

00:05:57.230 --> 00:05:59.700
Just good luck.

00:05:59.700 --> 00:06:00.200
Oops.

00:06:02.960 --> 00:06:05.810
And, again, we can
switch to any language.

00:06:05.810 --> 00:06:07.550
What you'll see,
though, when I expand

00:06:07.550 --> 00:06:11.930
this is that request URL
is all that's needed.

00:06:11.930 --> 00:06:15.660
We have a couple of parameters,
query parameters, where we say,

00:06:15.660 --> 00:06:18.030
here's what the source text
is, what the source language

00:06:18.030 --> 00:06:20.330
is, the destination language.

00:06:20.330 --> 00:06:23.390
And then we provide our API
key for billing purposes.

00:06:23.390 --> 00:06:24.050
That's it.

00:06:24.050 --> 00:06:27.110
And what we get back is a
nice little bit of JSON that

00:06:27.110 --> 00:06:28.860
gives us the translated text.

00:06:28.860 --> 00:06:34.110
So if you have any sort of
chat messaging in your games,

00:06:34.110 --> 00:06:37.290
this is a way that you could
translate between languages.

00:06:37.290 --> 00:06:37.790
All right.

00:06:37.790 --> 00:06:39.480
Let's switch back to
the slides, please.

00:06:43.080 --> 00:06:46.347
So even though we're enabling
people to talk to each other,

00:06:46.347 --> 00:06:48.180
people aren't always
friendly to each other.

00:06:48.180 --> 00:06:51.510
You may have noticed
that on the internet.

00:06:51.510 --> 00:06:53.280
And what this does
is it actually

00:06:53.280 --> 00:06:56.010
creates a bad experience
for your other players.

00:06:56.010 --> 00:06:58.800
When you've got one person
dominating the conversation,

00:06:58.800 --> 00:07:02.040
or a group of people that
are being hurtful to others,

00:07:02.040 --> 00:07:03.570
it really causes problems.

00:07:03.570 --> 00:07:06.270
And the way developers
treat this sort of scenario

00:07:06.270 --> 00:07:10.350
these days is that they
provide a mechanism for players

00:07:10.350 --> 00:07:13.800
to report other players,
report bad behavior.

00:07:13.800 --> 00:07:15.570
At which stage,
you gather a bunch

00:07:15.570 --> 00:07:19.740
of diagnostic information,
maybe some chat logs,

00:07:19.740 --> 00:07:21.420
maybe they're
in-game recordings,

00:07:21.420 --> 00:07:23.670
and so on, and you pass
it off to a team that

00:07:23.670 --> 00:07:24.990
has to triage it.

00:07:24.990 --> 00:07:26.700
That's a manual effort.

00:07:26.700 --> 00:07:29.790
Triaging that sort of
work takes a lot of time.

00:07:29.790 --> 00:07:32.400
We have an API called the
Cloud Natural Language

00:07:32.400 --> 00:07:34.740
API, which can actually
detect sentiment

00:07:34.740 --> 00:07:36.840
in individuals' chat messages.

00:07:36.840 --> 00:07:40.230
So as a way of quickly
triaging through reports,

00:07:40.230 --> 00:07:42.090
you can quickly
identify where you

00:07:42.090 --> 00:07:44.490
may have some problem
areas in your logs,

00:07:44.490 --> 00:07:46.905
and make that triage
process a lot simpler.

00:07:50.980 --> 00:07:52.720
Increasingly what
we're seeing in games

00:07:52.720 --> 00:07:54.790
these days is that
developers are

00:07:54.790 --> 00:07:56.920
starting to adopt
things like AR,

00:07:56.920 --> 00:07:58.473
where they're using the camera.

00:07:58.473 --> 00:07:59.890
And they need to
be able to detect

00:07:59.890 --> 00:08:02.800
what type of objects
that are in the scene,

00:08:02.800 --> 00:08:06.630
or what type of locations
they're in, maybe landmarks.

00:08:06.630 --> 00:08:09.510
Another example that we see
is lots of game developers

00:08:09.510 --> 00:08:11.930
are providing ways
for your players

00:08:11.930 --> 00:08:14.920
to create user
generated content.

00:08:14.920 --> 00:08:16.350
It might be items.

00:08:16.350 --> 00:08:18.060
It might be custom images.

00:08:18.060 --> 00:08:19.590
It might be even maps.

00:08:19.590 --> 00:08:22.290
Turns out that if you give
people the ability to upload

00:08:22.290 --> 00:08:24.990
whatever they like,
they can, again,

00:08:24.990 --> 00:08:28.770
upload things that are probably
not appropriate for everyone

00:08:28.770 --> 00:08:29.650
there.

00:08:29.650 --> 00:08:32.490
Now, we have an API
called the Vision API.

00:08:32.490 --> 00:08:35.460
And it is able to do things
like object detection,

00:08:35.460 --> 00:08:39.940
and also able to flag
explicit content.

00:08:39.940 --> 00:08:41.650
Now, Vision API is really cool.

00:08:41.650 --> 00:08:44.470
Because it's giving you
the kind of power that we

00:08:44.470 --> 00:08:47.050
have in Google Photos, that
example I used earlier,

00:08:47.050 --> 00:08:50.230
but giving it to you as an
API that you can readily call.

00:08:50.230 --> 00:08:52.040
Now, before I
switch to the demo,

00:08:52.040 --> 00:08:53.860
I just want to get some answers.

00:08:53.860 --> 00:08:55.390
Can anybody tell
me what that is?

00:08:59.730 --> 00:09:00.890
I'm hearing Eiffel Tower.

00:09:00.890 --> 00:09:03.650
Any other thoughts?

00:09:03.650 --> 00:09:04.490
All right.

00:09:04.490 --> 00:09:06.347
So we'll switch to
the demo machine.

00:09:06.347 --> 00:09:08.180
We're going to look at
that image right now.

00:09:08.180 --> 00:09:12.200
This is our Vision API landing
page, cloud.google.com/vision.

00:09:12.200 --> 00:09:16.100
And what we're going to do
is drop an image on there,

00:09:16.100 --> 00:09:19.370
hit the recapture again.

00:09:19.370 --> 00:09:20.540
This is, again, just a demo.

00:09:20.540 --> 00:09:24.210
But what we're doing is
uploading this image.

00:09:24.210 --> 00:09:26.690
And if you said Eiffel
Tower, you were wrong.

00:09:26.690 --> 00:09:30.800
This is actually the Paris
Hotel and Casino in Las Vegas.

00:09:30.800 --> 00:09:33.980
Now, when that API
returned us a response,

00:09:33.980 --> 00:09:36.350
it actually told us
what part of the image

00:09:36.350 --> 00:09:39.950
that it used to recognize
what this landmark was.

00:09:39.950 --> 00:09:42.530
And so you can see
there's a green highlight,

00:09:42.530 --> 00:09:45.620
or a green bounding
box around that image.

00:09:45.620 --> 00:09:48.230
And the way that it knew that
it wasn't the Eiffel Tower,

00:09:48.230 --> 00:09:50.570
The Eiffel Tower doesn't
have a building below it,

00:09:50.570 --> 00:09:53.620
unlike the Paris
Hotel and Casino.

00:09:53.620 --> 00:09:55.660
Now, because this is a
real place in the world,

00:09:55.660 --> 00:09:57.430
we're able to get some
useful information.

00:09:57.430 --> 00:10:01.450
We're able to see that this is
a real landmark, where it is.

00:10:01.450 --> 00:10:04.900
We're able to get links to
the web that says what kind

00:10:04.900 --> 00:10:06.970
of information this is.

00:10:06.970 --> 00:10:09.490
And we get object detection.

00:10:09.490 --> 00:10:10.460
We get labels.

00:10:10.460 --> 00:10:12.370
We can see that
this is a landmark,

00:10:12.370 --> 00:10:14.080
that this is a
tourist attraction,

00:10:14.080 --> 00:10:17.560
and actually, that we even have
a lot of the sky in this image.

00:10:21.210 --> 00:10:22.470
And then we get Safe Search.

00:10:22.470 --> 00:10:25.320
So we can see what
kind of image it was.

00:10:25.320 --> 00:10:28.140
I was going to give you an
example of an explicit image,

00:10:28.140 --> 00:10:29.900
but legal said no.

00:10:29.900 --> 00:10:32.750
So we'll have to move on.

00:10:32.750 --> 00:10:33.590
All right.

00:10:33.590 --> 00:10:36.960
Let's move back to
the slides, please.

00:10:36.960 --> 00:10:38.720
So that's the Vision API.

00:10:38.720 --> 00:10:41.790
And when we look at
some of these use cases,

00:10:41.790 --> 00:10:44.630
you can see that just
by using our APIs,

00:10:44.630 --> 00:10:47.570
you're able to solve kind of
low hanging fruit, quality

00:10:47.570 --> 00:10:49.160
of life type problems.

00:10:49.160 --> 00:10:51.570
It can really improve
your player experience.

00:10:51.570 --> 00:10:54.800
But for you, you're getting
the benefit of an ML model

00:10:54.800 --> 00:10:57.770
without having any ML
expertise yourself,

00:10:57.770 --> 00:11:01.340
because we've done that work
for you, and we've exposed it.

00:11:01.340 --> 00:11:04.010
Now, even though we only
looked at three of these APIs,

00:11:04.010 --> 00:11:07.280
we looked at Translation,
Natural Language, and Vision,

00:11:07.280 --> 00:11:08.630
we have a number of others.

00:11:08.630 --> 00:11:12.020
We have Cloud Speech, which
will do speech to text and text

00:11:12.020 --> 00:11:12.950
to speech.

00:11:12.950 --> 00:11:14.900
And we also have
Video Intelligence,

00:11:14.900 --> 00:11:17.330
where we can look at videos
and tell you where objects

00:11:17.330 --> 00:11:18.740
are in different scenes.

00:11:18.740 --> 00:11:22.610
So we can identify cars at
the start, buses, planes,

00:11:22.610 --> 00:11:23.960
all sorts of objects.

00:11:23.960 --> 00:11:26.480
And we can transcribe
videos as well.

00:11:26.480 --> 00:11:29.780
So you get actual
captions for your videos

00:11:29.780 --> 00:11:31.550
with specific timestamps.

00:11:31.550 --> 00:11:34.250
So when you've got any sort
of recording in your game,

00:11:34.250 --> 00:11:36.950
where your players are able to
record their last few minutes

00:11:36.950 --> 00:11:39.320
of gameplay and so
on, Video Intelligence

00:11:39.320 --> 00:11:44.120
can be a good way to kind
of index that if you choose.

00:11:44.120 --> 00:11:47.880
But you may look at
that and say, hold on.

00:11:47.880 --> 00:11:50.040
These are very fixed use cases.

00:11:50.040 --> 00:11:54.610
I have more needs than just the
ones that the ML APIs provides.

00:11:54.610 --> 00:11:58.820
And we have some solutions
for you there as well.

00:11:58.820 --> 00:12:01.120
I'm going to look
at an example game.

00:12:01.120 --> 00:12:02.470
We're just going to make it up.

00:12:02.470 --> 00:12:04.600
Let's pretend we have
a flight simulator.

00:12:04.600 --> 00:12:07.240
And it's a very realistic
flight simulator.

00:12:07.240 --> 00:12:08.103
Look at my graphics.

00:12:08.103 --> 00:12:09.520
It almost looks
like it's a photo.

00:12:09.520 --> 00:12:11.380
Right?

00:12:11.380 --> 00:12:13.890
It is a photo.

00:12:13.890 --> 00:12:16.410
But this simulator
is so realistic.

00:12:16.410 --> 00:12:18.780
We've used procedural
weather generation.

00:12:18.780 --> 00:12:21.910
And what we need to do is, as
the weather conditions change,

00:12:21.910 --> 00:12:24.780
we need to be able to know how
we fly, what type of planes

00:12:24.780 --> 00:12:25.830
can we use?

00:12:25.830 --> 00:12:30.020
How should the player
do his or her thing?

00:12:30.020 --> 00:12:32.630
Well, it turns out that in
order to predict weather,

00:12:32.630 --> 00:12:36.060
looking at clouds is an
important way to do it.

00:12:36.060 --> 00:12:38.030
And it turns out that
we have a few categories

00:12:38.030 --> 00:12:40.410
of clouds, just a bit over 10.

00:12:40.410 --> 00:12:42.860
And when we look at those
clouds, the type of cloud

00:12:42.860 --> 00:12:46.240
is a great indicator
of weather patterns.

00:12:46.240 --> 00:12:48.990
But the problem is, if we use
the Vision API that I just

00:12:48.990 --> 00:12:51.510
showed you right now,
the Vision API gives us

00:12:51.510 --> 00:12:52.913
some useful information.

00:12:52.913 --> 00:12:54.330
Hey, you've got
some clouds there.

00:12:54.330 --> 00:12:55.650
Hey, there's a sky.

00:12:55.650 --> 00:12:58.020
But it doesn't go to
that level of detail

00:12:58.020 --> 00:13:00.360
that says what type
of cloud it is,

00:13:00.360 --> 00:13:03.660
because these are general
purpose machine learning

00:13:03.660 --> 00:13:04.740
models.

00:13:04.740 --> 00:13:06.580
Now, traditionally
you would have said,

00:13:06.580 --> 00:13:08.610
oh, your APIs don't work for me.

00:13:08.610 --> 00:13:11.880
I'm going to have to go and
custom train an entire ML

00:13:11.880 --> 00:13:13.140
model myself.

00:13:13.140 --> 00:13:15.840
Now, for those of you that
don't have ML expertise,

00:13:15.840 --> 00:13:17.910
that is a huge learning curve.

00:13:17.910 --> 00:13:20.010
It's not an
insurmountable problem.

00:13:20.010 --> 00:13:22.260
But you have to
suddenly learn ML.

00:13:22.260 --> 00:13:25.800
And data science is actually
a profession on its own.

00:13:25.800 --> 00:13:28.560
So it's not something that
you can easily pick up.

00:13:28.560 --> 00:13:30.060
Wouldn't it be great
if we could get

00:13:30.060 --> 00:13:32.820
the benefits of having
some ready to use model,

00:13:32.820 --> 00:13:35.350
but with our custom data set?

00:13:35.350 --> 00:13:39.690
Well, for that we have
something called Cloud AutoML.

00:13:39.690 --> 00:13:43.350
This is huge, because it means
that you can get custom built

00:13:43.350 --> 00:13:45.630
models for your
use cases, but you

00:13:45.630 --> 00:13:47.970
don't need any ML expertise.

00:13:47.970 --> 00:13:50.670
And we do all of this through
a simple graphical user

00:13:50.670 --> 00:13:53.040
interface.

00:13:53.040 --> 00:13:56.150
So when we look at
AutoML Vision, the way

00:13:56.150 --> 00:13:58.640
that it works is that
you provide a labeled set

00:13:58.640 --> 00:14:01.340
of images, your photo data set.

00:14:01.340 --> 00:14:04.400
You pass and upload it
through our user interface

00:14:04.400 --> 00:14:06.770
to AutoML Vision.

00:14:06.770 --> 00:14:09.000
It trains up a model.

00:14:09.000 --> 00:14:12.500
And then it deploys it and
serves it to you as an API

00:14:12.500 --> 00:14:14.522
that you can readily consume.

00:14:14.522 --> 00:14:15.230
Now, that's huge.

00:14:15.230 --> 00:14:18.380
Because one, there's a lot of
work to just train a model.

00:14:18.380 --> 00:14:21.590
But it's also a lot of work to
scale out and deploy a model,

00:14:21.590 --> 00:14:23.150
such that you can depend on it.

00:14:23.150 --> 00:14:26.870
We're going to look at
that in a little bit.

00:14:26.870 --> 00:14:29.910
So the way machine
learning, in general, works

00:14:29.910 --> 00:14:31.210
is something along these lines.

00:14:31.210 --> 00:14:33.290
Now, this is not meant
to be intimidating.

00:14:33.290 --> 00:14:37.360
This is actually a screenshot
from the TensorFlow Playground.

00:14:37.360 --> 00:14:38.980
TensorFlow is an
open source framework

00:14:38.980 --> 00:14:41.360
that Google built
for machine learning.

00:14:41.360 --> 00:14:44.680
It's the most popular ML
framework in the world.

00:14:44.680 --> 00:14:46.510
On the TensorFlow
website, this playground

00:14:46.510 --> 00:14:50.770
is a way for you to visually
try and get some experience

00:14:50.770 --> 00:14:52.095
with building ML models.

00:14:52.095 --> 00:14:53.470
And what you'll
see straight away

00:14:53.470 --> 00:14:55.990
is across the top there's
a number of parameters.

00:14:55.990 --> 00:14:57.950
We call these hyper parameters.

00:14:57.950 --> 00:15:00.950
Things like the learning
rate and activation function.

00:15:00.950 --> 00:15:03.430
And then we have these
columns of squares.

00:15:03.430 --> 00:15:04.995
Each column is called a layer.

00:15:04.995 --> 00:15:06.370
And in those
layers, we're trying

00:15:06.370 --> 00:15:09.820
to extract certain features to
be able to identify something

00:15:09.820 --> 00:15:11.320
for our use case.

00:15:11.320 --> 00:15:14.510
The goal here is actually
in this output field.

00:15:14.510 --> 00:15:18.070
So on this output image,
these dots actually

00:15:18.070 --> 00:15:21.140
represent the test data.

00:15:21.140 --> 00:15:24.010
So when we train an ML model,
we have a huge data set.

00:15:24.010 --> 00:15:26.073
The bigger the data
set, the better.

00:15:26.073 --> 00:15:27.490
So you split it
into what's called

00:15:27.490 --> 00:15:30.670
training so that the training
data set is used for your ML

00:15:30.670 --> 00:15:31.870
model to learn.

00:15:31.870 --> 00:15:33.693
And then you have
a test data set,

00:15:33.693 --> 00:15:35.860
which is what you use to
validate that that model is

00:15:35.860 --> 00:15:37.840
working as appropriate.

00:15:37.840 --> 00:15:39.760
And in this example,
we have our data.

00:15:39.760 --> 00:15:42.970
And each of these dots
that you see in the output

00:15:42.970 --> 00:15:44.730
actually represents
the test data.

00:15:44.730 --> 00:15:46.310
That's the right answer.

00:15:46.310 --> 00:15:48.520
So you see blue dots
and orange dots.

00:15:48.520 --> 00:15:52.690
And what you want to see is that
the background behind the dots

00:15:52.690 --> 00:15:54.890
matches the color of the dot.

00:15:54.890 --> 00:15:57.580
So that's where our ML
model is predicting.

00:15:57.580 --> 00:16:00.880
And so what we've done here
is we have a number of layers.

00:16:00.880 --> 00:16:04.138
And you'll see this spiral
shape data pattern that we have.

00:16:04.138 --> 00:16:04.930
That's pretty good.

00:16:04.930 --> 00:16:06.130
It does its job.

00:16:06.130 --> 00:16:07.480
But it's complicated.

00:16:07.480 --> 00:16:09.070
And the process of
machine learning

00:16:09.070 --> 00:16:12.700
is such that what you do is you
start with a set of parameters.

00:16:12.700 --> 00:16:14.090
You train it.

00:16:14.090 --> 00:16:15.082
You test it.

00:16:15.082 --> 00:16:16.790
You look at whether
you're happy with it.

00:16:16.790 --> 00:16:18.760
And then you tweak
it, and you go back.

00:16:18.760 --> 00:16:20.050
Train it.

00:16:20.050 --> 00:16:21.500
Test it.

00:16:21.500 --> 00:16:22.280
Tweak it.

00:16:22.280 --> 00:16:22.780
Train it.

00:16:22.780 --> 00:16:23.492
Test it.

00:16:23.492 --> 00:16:25.450
Rinse and repeat, until
you end up with a model

00:16:25.450 --> 00:16:27.260
that you're happy with.

00:16:27.260 --> 00:16:29.600
Now, training with
huge data sets

00:16:29.600 --> 00:16:31.462
actually takes a lot of time.

00:16:31.462 --> 00:16:33.170
So you need a lot of
computing resources.

00:16:33.170 --> 00:16:36.710
But it actually still takes
a lot of real world time.

00:16:36.710 --> 00:16:40.460
So when it came to building
AutoML, what we thought was,

00:16:40.460 --> 00:16:44.500
hey, rather than do this process
serially one after the other,

00:16:44.500 --> 00:16:46.720
wouldn't it be great if we
could do it in parallel?

00:16:46.720 --> 00:16:50.830
We could just come up with
a whole set of ML models.

00:16:50.830 --> 00:16:53.230
And our AutoML controller
could farm them off

00:16:53.230 --> 00:16:55.960
to different machines
on Google Cloud.

00:16:55.960 --> 00:16:59.530
And we can use the highest spec
machines that are available,

00:16:59.530 --> 00:17:03.460
the fastest CPUs, the
fastest GPUs if we want,

00:17:03.460 --> 00:17:10.420
because GPUs are a great
way to train ML models

00:17:10.420 --> 00:17:12.190
and use them for inferencing.

00:17:12.190 --> 00:17:14.290
But we go one step further.

00:17:14.290 --> 00:17:16.740
Google Cloud also offers TPUs.

00:17:16.740 --> 00:17:19.540
Now, TPUs stand for
Tensor Processing Units.

00:17:19.540 --> 00:17:22.720
And this is custom silicon
that Google has built,

00:17:22.720 --> 00:17:25.750
and we make available
exclusively on Google Cloud.

00:17:25.750 --> 00:17:30.600
So where GPUs are orders of
magnitudes faster than CPUs,

00:17:30.600 --> 00:17:35.290
TPUs are several times
faster than GPUs too.

00:17:35.290 --> 00:17:37.870
Now, to give you an example,
yesterday at the I/O Developer

00:17:37.870 --> 00:17:40.720
Keynote, we talked about an
example of a company called

00:17:40.720 --> 00:17:42.220
Recursion Pharmaceuticals.

00:17:42.220 --> 00:17:46.300
Their training time with
TPUs went from 24 hours down

00:17:46.300 --> 00:17:48.130
to 15 minutes.

00:17:48.130 --> 00:17:50.930
A whole day down to 15 minutes.

00:17:50.930 --> 00:17:53.290
So you imagine that you're
trying to build an ML model.

00:17:53.290 --> 00:17:55.630
And you're constantly
training and tweaking.

00:17:55.630 --> 00:17:57.660
That cycle that
you have to do, you

00:17:57.660 --> 00:17:59.930
want to condense it
as much as possible.

00:17:59.930 --> 00:18:02.290
So AutoML says, ah, don't
worry about all this.

00:18:02.290 --> 00:18:03.940
We'll just send them all off.

00:18:03.940 --> 00:18:05.790
And you decide how
long it trains for.

00:18:05.790 --> 00:18:07.540
So the training
side of the billing

00:18:07.540 --> 00:18:09.100
works based on training time.

00:18:09.100 --> 00:18:10.930
We give you an hour for free.

00:18:10.930 --> 00:18:13.240
And so at the end
of that time, we

00:18:13.240 --> 00:18:15.600
look at the model that
performs the best.

00:18:15.600 --> 00:18:18.060
And we serve it.

00:18:18.060 --> 00:18:19.710
Based on our data,
what we found is

00:18:19.710 --> 00:18:23.580
that AutoML produces ML models
that are more complicated

00:18:23.580 --> 00:18:25.770
than what humans produce.

00:18:25.770 --> 00:18:29.620
But they also perform better.

00:18:29.620 --> 00:18:33.720
So let's have a look at an
example of AutoML Vision,

00:18:33.720 --> 00:18:37.990
if we can just switch
to the machine.

00:18:37.990 --> 00:18:38.800
Thank you.

00:18:38.800 --> 00:18:41.220
So here is the console
for AutoML Vision.

00:18:41.220 --> 00:18:43.300
And what we have is a
labeled set of images.

00:18:43.300 --> 00:18:46.080
So remember our cloud
example, the flight simulator?

00:18:46.080 --> 00:18:48.940
What I've done is I've
uploaded a ton of images.

00:18:48.940 --> 00:18:51.980
There's about 1,800
images in there.

00:18:51.980 --> 00:18:54.670
And these images
have been labeled.

00:18:54.670 --> 00:18:56.548
On the left hand
side there's a label.

00:18:56.548 --> 00:18:58.090
So I said there's
10 types of clouds.

00:18:58.090 --> 00:19:00.730
We're only doing five
labels for this example.

00:19:00.730 --> 00:19:03.490
And you'll see that the cirrus,
cumulonimbus and cumulus

00:19:03.490 --> 00:19:05.170
have about 500 images.

00:19:05.170 --> 00:19:08.260
I didn't have as many for the
alto cumulus and alto stratus.

00:19:08.260 --> 00:19:11.630
So there are only
about 200 and 135.

00:19:11.630 --> 00:19:15.130
But when I go through the
training, what you can see

00:19:15.130 --> 00:19:18.610
is that I said do
it for 12 hours.

00:19:18.610 --> 00:19:21.620
And it came up with a model
that's about almost 90%

00:19:21.620 --> 00:19:23.000
in its accuracy.

00:19:23.000 --> 00:19:27.940
When I look at how it evaluated
against the test data, what

00:19:27.940 --> 00:19:30.662
we found is that this
thing is called a confusion

00:19:30.662 --> 00:19:32.830
matrix, which basically
says, how well

00:19:32.830 --> 00:19:36.700
did this model do at identifying
against the test data

00:19:36.700 --> 00:19:37.970
that we provide?

00:19:37.970 --> 00:19:41.950
So if you look at the ones
where we provided 500 images,

00:19:41.950 --> 00:19:43.960
you get about 90% accuracy.

00:19:43.960 --> 00:19:50.060
The one where we had fewer
images, it's only in the 60s.

00:19:50.060 --> 00:19:56.060
Anyways, we're going to now
go ahead and predict what

00:19:56.060 --> 00:19:58.610
these two clouds look like.

00:19:58.610 --> 00:20:00.380
Now, typically, this
is just our console.

00:20:00.380 --> 00:20:03.050
So we're just doing
some sample data here.

00:20:03.050 --> 00:20:04.730
You would have an API end point.

00:20:04.730 --> 00:20:06.210
And I'll show you
that in a second.

00:20:06.210 --> 00:20:09.140
But anyways, you'll see
here with 99% accuracy,

00:20:09.140 --> 00:20:13.080
or confidence, it said that this
is a cumulus, which is correct.

00:20:13.080 --> 00:20:16.690
And then you can see that
with 73.7% confidence,

00:20:16.690 --> 00:20:18.500
it says that this
is a cumulonimbus.

00:20:18.500 --> 00:20:20.600
And it's far more
confident about that one

00:20:20.600 --> 00:20:22.080
than the next one down.

00:20:22.080 --> 00:20:25.470
So our model's actually
done a really great job.

00:20:25.470 --> 00:20:27.150
Now, in terms of
an API end point,

00:20:27.150 --> 00:20:30.060
we actually provide
you some example code.

00:20:30.060 --> 00:20:33.180
Whether you want to use like
the curl statement, or even

00:20:33.180 --> 00:20:37.570
some sample Python code on how
you can call your API yourself.

00:20:37.570 --> 00:20:40.070
So let's switch
back to the slides.

00:20:40.070 --> 00:20:42.200
So now we've solved our
flight simulator problem.

00:20:42.200 --> 00:20:42.700
Right?

00:20:42.700 --> 00:20:45.850
We're going to use
clouds to detect whether.

00:20:45.850 --> 00:20:47.280
And we're done.

00:20:47.280 --> 00:20:51.630
Now, AutoML Vision meant that
we had to write zero code.

00:20:51.630 --> 00:20:53.380
And we didn't even
need to worry about how

00:20:53.380 --> 00:20:55.547
this thing is going to be
deployed on infrastructure

00:20:55.547 --> 00:20:57.550
and served globally.

00:20:57.550 --> 00:21:00.490
But you might be saying, ah,
that's just a Vision example.

00:21:00.490 --> 00:21:04.823
Give me some other normal,
like regular examples.

00:21:04.823 --> 00:21:06.740
I want to talk to you
about a new product, one

00:21:06.740 --> 00:21:08.880
that we just launched
a few weeks ago.

00:21:08.880 --> 00:21:10.790
It's called AutoML Tables.

00:21:10.790 --> 00:21:14.250
And pardon the pun, but
it's a game changer.

00:21:14.250 --> 00:21:17.250
With AutoML Tables, you
take your structured data.

00:21:17.250 --> 00:21:19.620
Now, that data can
be a spreadsheet.

00:21:19.620 --> 00:21:21.750
It can be from your database.

00:21:21.750 --> 00:21:23.640
And you pump it
into AutoML Tables,

00:21:23.640 --> 00:21:26.100
where it will train
an ML model for you,

00:21:26.100 --> 00:21:27.970
and deploy it at scale.

00:21:27.970 --> 00:21:30.600
So you may be saying, well,
what are some examples that I

00:21:30.600 --> 00:21:34.800
could use for AutoML Tables?

00:21:34.800 --> 00:21:37.890
Well, actually, your
imagination is the limit here.

00:21:37.890 --> 00:21:40.200
You could look at
tailoring game difficulty

00:21:40.200 --> 00:21:41.910
to match the types
of players that you

00:21:41.910 --> 00:21:44.140
have in any given encounter.

00:21:44.140 --> 00:21:46.590
So you in real time
change the difficulty

00:21:46.590 --> 00:21:50.760
of maybe that boss that you're
players are fighting against.

00:21:50.760 --> 00:21:52.890
You could look at ways
to convert players

00:21:52.890 --> 00:21:55.380
into paying players
through in app conversions.

00:21:55.380 --> 00:21:59.280
Look at your historical
data to train AutoML tables.

00:21:59.280 --> 00:22:00.990
You could use it
to identify fraud.

00:22:00.990 --> 00:22:04.080
This is a very common challenge
that game developers tell us.

00:22:04.080 --> 00:22:09.250
That, hey, we constantly get
these fraudulent transactions.

00:22:09.250 --> 00:22:11.010
And, of course,
you can also help

00:22:11.010 --> 00:22:13.560
it identify cheating
in your games

00:22:13.560 --> 00:22:16.690
based on, again,
historical data.

00:22:16.690 --> 00:22:20.130
So AutoML Tables is huge.

00:22:20.130 --> 00:22:22.380
And Cloud AutoML in
general is, again,

00:22:22.380 --> 00:22:25.090
like our ML APIs is broken
into several categories.

00:22:25.090 --> 00:22:29.370
We have the site type things,
Vision and Video Intelligence.

00:22:29.370 --> 00:22:31.530
We have Natural
Language and Translate.

00:22:31.530 --> 00:22:33.780
I do want to call out, Natural
Language and Translate,

00:22:33.780 --> 00:22:35.800
in particular, is
great for games.

00:22:35.800 --> 00:22:38.070
So I gave you an example
earlier of Translate.

00:22:38.070 --> 00:22:39.940
And we said, good luck.

00:22:39.940 --> 00:22:40.470
Have fun.

00:22:40.470 --> 00:22:42.090
We said, good game.

00:22:42.090 --> 00:22:43.600
Most gamers don't
talk like that.

00:22:43.600 --> 00:22:44.550
They use shorthand.

00:22:44.550 --> 00:22:45.090
Right?

00:22:45.090 --> 00:22:47.920
And especially when you
look at your own games,

00:22:47.920 --> 00:22:51.060
you're going to have a
set of custom inventory

00:22:51.060 --> 00:22:52.350
items, characters.

00:22:52.350 --> 00:22:55.230
If you build card
games, maybe card decks.

00:22:55.230 --> 00:22:57.810
With AutoML, you can
train those models

00:22:57.810 --> 00:23:01.390
to learn your custom
terminology and adapt to it.

00:23:01.390 --> 00:23:03.450
And so then you can
provide translations,

00:23:03.450 --> 00:23:06.220
and natural language
sentiment detection as well.

00:23:06.220 --> 00:23:08.940
And then, of course, we
talked about AutoML Tables,

00:23:08.940 --> 00:23:10.747
which is a really big deal.

00:23:10.747 --> 00:23:13.080
So so far we've looked at
kind of off the shelf products

00:23:13.080 --> 00:23:15.810
that we offer you.

00:23:15.810 --> 00:23:18.310
Now, I want to talk
about where ML is really

00:23:18.310 --> 00:23:20.950
useful for game development.

00:23:20.950 --> 00:23:24.160
We offer a number of
products that really help you

00:23:24.160 --> 00:23:27.130
with building these ML models.

00:23:27.130 --> 00:23:30.880
But ML, as I said earlier,
is that initial process

00:23:30.880 --> 00:23:33.430
of training where we
tweak some parameters.

00:23:33.430 --> 00:23:34.480
We train a model.

00:23:34.480 --> 00:23:35.340
We test it.

00:23:35.340 --> 00:23:37.090
And then we go back
to the start and do it

00:23:37.090 --> 00:23:41.680
again and again until we find
a model that we're happy with.

00:23:41.680 --> 00:23:44.180
The second half of it
is just as important.

00:23:44.180 --> 00:23:46.720
Once you have a model
that you're happy with,

00:23:46.720 --> 00:23:48.610
how do you deploy it at scale?

00:23:48.610 --> 00:23:51.400
Do you deploy it locally
as part of your game

00:23:51.400 --> 00:23:52.780
if it's a mobile game?

00:23:52.780 --> 00:23:55.450
Do you send it down to
the console or desktop?

00:23:55.450 --> 00:23:58.240
Or do you run your
AI in your cloud

00:23:58.240 --> 00:24:02.600
where you need to be able to
have your AI simulated there?

00:24:02.600 --> 00:24:05.410
How do you get the
reach across the world,

00:24:05.410 --> 00:24:07.900
depending on where
your players are?

00:24:07.900 --> 00:24:11.060
Well, for that we have what we
call the Google AI platform.

00:24:11.060 --> 00:24:14.090
And the Google AI platform
offers training and prediction

00:24:14.090 --> 00:24:15.200
services.

00:24:15.200 --> 00:24:17.750
We have powerful and
flexible tools for ML

00:24:17.750 --> 00:24:20.810
and data science, and
really a scalable and robust

00:24:20.810 --> 00:24:24.662
infrastructure that Google
runs its own services on.

00:24:24.662 --> 00:24:26.120
The other thing
we've done is we've

00:24:26.120 --> 00:24:29.540
made available a virtual machine
image that's specifically

00:24:29.540 --> 00:24:31.280
useful for deep learning.

00:24:31.280 --> 00:24:34.085
And you can run it on our
product called Compute Engine,

00:24:34.085 --> 00:24:35.210
which is where we host VMs.

00:24:38.120 --> 00:24:41.240
But let me give you a
hypothetical example of a game.

00:24:41.240 --> 00:24:43.040
This game itself
is actually real.

00:24:43.040 --> 00:24:45.710
This is a mini game
called "Snowball Storm."

00:24:45.710 --> 00:24:47.625
And it's part of
Google Santa Tracker.

00:24:47.625 --> 00:24:49.250
If you've never heard
of Santa Tracker,

00:24:49.250 --> 00:24:51.830
please check it out at
SantaTracker.google.com.

00:24:51.830 --> 00:24:54.470
But in this game we built
a little bit of an homage

00:24:54.470 --> 00:24:56.360
to the battle royale genre.

00:24:56.360 --> 00:24:58.430
So at the start of it,
you're a little elf.

00:24:58.430 --> 00:25:01.160
You parachute down onto
an island made of ice.

00:25:01.160 --> 00:25:03.710
And you have to try and throw
snowballs at other players

00:25:03.710 --> 00:25:05.130
to eliminate them.

00:25:05.130 --> 00:25:07.530
The ice melts around
the edges over time.

00:25:07.530 --> 00:25:10.610
And so we're constricting
players into a location.

00:25:10.610 --> 00:25:14.300
Currently, the AIs and
the bots in this game

00:25:14.300 --> 00:25:16.670
are not built on any ML model.

00:25:16.670 --> 00:25:18.720
They're just very simple.

00:25:18.720 --> 00:25:23.870
If we were to build something
like this for our own game,

00:25:23.870 --> 00:25:27.080
we could build a
pipeline akin to this.

00:25:27.080 --> 00:25:29.240
So I'll walk you through this.

00:25:29.240 --> 00:25:32.360
On the left hand side what
we'll have is some players

00:25:32.360 --> 00:25:35.050
playing against one another,
some player versus player

00:25:35.050 --> 00:25:35.690
matches.

00:25:35.690 --> 00:25:38.720
What we'd want to do is
record and log as much

00:25:38.720 --> 00:25:40.190
of that information is we can.

00:25:40.190 --> 00:25:41.690
Because the way
we're going to train

00:25:41.690 --> 00:25:45.780
this bot is using a technique
called supervised learning.

00:25:45.780 --> 00:25:49.470
So earlier I said DeepMind used
reinforcement learning, where

00:25:49.470 --> 00:25:51.220
the AI kind of taught itself.

00:25:51.220 --> 00:25:54.920
With supervised learning, we're
going to capture all this data,

00:25:54.920 --> 00:25:59.970
and train our bot based on how
other players play the game.

00:25:59.970 --> 00:26:02.523
So it's going to learn
off other information.

00:26:02.523 --> 00:26:04.190
So what we'll do is
capture all of that.

00:26:04.190 --> 00:26:05.302
We'll log that.

00:26:05.302 --> 00:26:07.010
And we're going to
store it in a database

00:26:07.010 --> 00:26:09.030
that we call Google BigQuery.

00:26:09.030 --> 00:26:14.010
And with BigQuery, it's a
petabyte scaled NoSQL database.

00:26:14.010 --> 00:26:15.680
So it's incredibly performant.

00:26:15.680 --> 00:26:17.150
And when I say
petabyte scaled, it

00:26:17.150 --> 00:26:21.273
can scan through petabytes
of data within seconds.

00:26:21.273 --> 00:26:22.940
So we're going to
store all of our logs,

00:26:22.940 --> 00:26:24.542
player logs into BigQuery.

00:26:24.542 --> 00:26:26.000
We're going to
export that and make

00:26:26.000 --> 00:26:29.030
it available on Cloud storage,
which is really just a place

00:26:29.030 --> 00:26:30.950
to store your files.

00:26:30.950 --> 00:26:33.920
You could think about
it as a private storage.

00:26:33.920 --> 00:26:36.363
Kind of like Google Drive,
but not with a user interface

00:26:36.363 --> 00:26:37.280
or anything like that.

00:26:37.280 --> 00:26:40.040
It's literally for storage
of your private files

00:26:40.040 --> 00:26:41.300
for your enterprise.

00:26:41.300 --> 00:26:44.210
So you export from BigQuery,
store into Cloud Storage.

00:26:44.210 --> 00:26:49.270
And then we're going to build
a model using TensorFlow

00:26:49.270 --> 00:26:50.468
in our training phase.

00:26:50.468 --> 00:26:52.260
And we're going to use
Compute Engine here,

00:26:52.260 --> 00:26:54.260
which is what I said
earlier about where

00:26:54.260 --> 00:26:56.090
we run virtual machine images.

00:26:56.090 --> 00:26:58.340
We'll use that
deep learning image

00:26:58.340 --> 00:27:03.380
that I talked about earlier to
train an AI model that learns

00:27:03.380 --> 00:27:05.540
of our historical player data.

00:27:05.540 --> 00:27:08.600
And then, once we have that
model, we'll export that model,

00:27:08.600 --> 00:27:11.250
and store it in cloud storage.

00:27:11.250 --> 00:27:14.210
Now, I've, of course, glossed
over the really hard part

00:27:14.210 --> 00:27:16.130
of this, which is the training.

00:27:16.130 --> 00:27:19.160
But this is where you do
require some ML expertise.

00:27:19.160 --> 00:27:21.230
So when you or your
organization are

00:27:21.230 --> 00:27:23.330
ready to kind of step
up and attempt this,

00:27:23.330 --> 00:27:27.290
just know that it's more
than just running TensorFlow.

00:27:27.290 --> 00:27:28.760
You need to have
an entire pipeline

00:27:28.760 --> 00:27:30.320
of ingesting this data.

00:27:30.320 --> 00:27:32.298
You need to be able
to do it at scale.

00:27:32.298 --> 00:27:33.840
And ideally, with
the training phase,

00:27:33.840 --> 00:27:35.570
you want to do it
as fast as possible,

00:27:35.570 --> 00:27:40.840
so you can get really
quick cycles of iteration.

00:27:40.840 --> 00:27:42.220
The next side of
it is inference.

00:27:42.220 --> 00:27:43.900
So we have our AI model.

00:27:43.900 --> 00:27:46.410
And what we want to be able
to do is make predictions.

00:27:46.410 --> 00:27:49.260
Now, our AI might be
running server side.

00:27:49.260 --> 00:27:50.670
And in this case, it would.

00:27:50.670 --> 00:27:54.660
So it's easy for us
in the Cloud ML engine

00:27:54.660 --> 00:27:57.120
to just be making
inference API calls,

00:27:57.120 --> 00:27:59.820
to say, hey, what should my
next move be for this bot

00:27:59.820 --> 00:28:01.080
and that bot?

00:28:01.080 --> 00:28:03.270
And then when it comes
to running on our client,

00:28:03.270 --> 00:28:07.870
all we're doing is
asking for predictions.

00:28:07.870 --> 00:28:10.070
So you might say,
well, how can I

00:28:10.070 --> 00:28:11.820
use machine learning
for game development?

00:28:11.820 --> 00:28:13.500
What are some use cases for it?

00:28:13.500 --> 00:28:16.320
The most obvious one is
actually for QA and testing.

00:28:16.320 --> 00:28:20.070
So today when we have to make
changes to level design or game

00:28:20.070 --> 00:28:23.190
balance, we have to spend
lots and lots of time

00:28:23.190 --> 00:28:25.780
testing it to make sure we
haven't broken that balance,

00:28:25.780 --> 00:28:27.360
we haven't introduced new bugs.

00:28:27.360 --> 00:28:29.430
And today we rely
on people to do it.

00:28:29.430 --> 00:28:32.460
If you're able to
build an ML bot that's

00:28:32.460 --> 00:28:34.440
able to play the
game for you, you

00:28:34.440 --> 00:28:37.650
can do testing across
the board in parallel.

00:28:37.650 --> 00:28:39.990
You could farm it out to
thousands of machines.

00:28:39.990 --> 00:28:42.060
You don't even need to
have the game playing back

00:28:42.060 --> 00:28:43.560
in real time speed.

00:28:43.560 --> 00:28:46.210
You could simulate it
as fast as possible.

00:28:46.210 --> 00:28:50.220
So again, in terms of your
process for QA and testing,

00:28:50.220 --> 00:28:53.700
you can get rapid
turnaround cycles for it.

00:28:53.700 --> 00:28:56.280
Imagine a future
where we have smarter

00:28:56.280 --> 00:28:58.590
non player characters,
where our players are

00:28:58.590 --> 00:29:00.990
able to have realistic
dialogue with them,

00:29:00.990 --> 00:29:03.390
and make realistic choices.

00:29:03.390 --> 00:29:06.730
Those NPCs could even be
used to guide players.

00:29:06.730 --> 00:29:09.060
So we see this a lot with
some of our partners,

00:29:09.060 --> 00:29:11.520
where they have this
really complex, let's say,

00:29:11.520 --> 00:29:13.950
card game, where
people have to build

00:29:13.950 --> 00:29:16.110
a really well-balanced deck.

00:29:16.110 --> 00:29:17.820
But it's really hard
for a new player

00:29:17.820 --> 00:29:20.070
to know what kind
of choices to make.

00:29:20.070 --> 00:29:21.480
Perhaps it's a
battle royale game

00:29:21.480 --> 00:29:23.940
where you're trying to build
a squad that's well balanced.

00:29:23.940 --> 00:29:27.130
For someone that's new to the
game or is a casual player,

00:29:27.130 --> 00:29:29.310
they're not able to make
those right choices.

00:29:29.310 --> 00:29:33.660
ML can help us build great
NPCs or recommendation

00:29:33.660 --> 00:29:37.230
engines to help our players
through that process,

00:29:37.230 --> 00:29:40.320
and help them make the right
choices to stay competitive.

00:29:40.320 --> 00:29:43.830
Now, if we have bots that can
help us with QA and testing,

00:29:43.830 --> 00:29:50.410
those bots can also be
used against real players.

00:29:50.410 --> 00:29:53.130
So in a squad based game,
isn't it frustrating

00:29:53.130 --> 00:29:55.350
when one of our players
drops, and now we're

00:29:55.350 --> 00:29:58.320
left with an AI that's either
really bad at the game,

00:29:58.320 --> 00:29:59.382
or exceptionally good?

00:29:59.382 --> 00:30:01.590
I guess it's not so bad if
they're exceptionally good

00:30:01.590 --> 00:30:03.000
and they're on your team.

00:30:03.000 --> 00:30:06.060
But when they're exceptionally
good on somebody else's team,

00:30:06.060 --> 00:30:08.100
it doesn't work out very well.

00:30:08.100 --> 00:30:10.590
If we're able to build a good
comprehensive set of bots,

00:30:10.590 --> 00:30:14.010
you can provide bots that are
tailored to the skill level,

00:30:14.010 --> 00:30:17.400
or complements that
team particularly well

00:30:17.400 --> 00:30:19.670
in those events.

00:30:19.670 --> 00:30:23.260
So we've covered a
few scenarios today

00:30:23.260 --> 00:30:24.790
of where machine
learning, I think,

00:30:24.790 --> 00:30:27.670
is really going to
revolutionize with what

00:30:27.670 --> 00:30:30.020
happens with game development.

00:30:30.020 --> 00:30:31.900
So if you're looking
to just get started

00:30:31.900 --> 00:30:36.190
with applying ML in your games,
and you don't have any ML

00:30:36.190 --> 00:30:38.560
expertise, the APIs
are a great way

00:30:38.560 --> 00:30:42.040
to get started, and capture
some of those quality of life

00:30:42.040 --> 00:30:43.900
improvements for your games.

00:30:43.900 --> 00:30:45.970
Because your
players will notice.

00:30:45.970 --> 00:30:49.190
And integration with those
APIs is really, really simple.

00:30:49.190 --> 00:30:51.710
It's literally an API call.

00:30:51.710 --> 00:30:54.800
AutoML is able to help
you build custom models

00:30:54.800 --> 00:30:57.560
for your scenarios
with your data,

00:30:57.560 --> 00:31:00.870
again, with zero ML
expertise needed.

00:31:00.870 --> 00:31:03.140
And then when you're
ready to take the step up

00:31:03.140 --> 00:31:07.850
to building your own AI that's
able to solve problems, like do

00:31:07.850 --> 00:31:11.900
automated QA testing,
or have smarter NPCs,

00:31:11.900 --> 00:31:14.870
then step up to something like
the AI platform, which will not

00:31:14.870 --> 00:31:18.640
only just help you train
your models at speed,

00:31:18.640 --> 00:31:21.740
but it'll help you serve them
and deploy them out at scale.

00:31:24.650 --> 00:31:26.650
So I want to say thank
you for joining me today.

00:31:26.650 --> 00:31:29.290
Your time is really
valuable to us.

00:31:29.290 --> 00:31:30.830
We have a couple of links here.

00:31:30.830 --> 00:31:33.470
The first one is our
full set of AI products

00:31:33.470 --> 00:31:36.520
at cloud.google.com/products/ai.

00:31:36.520 --> 00:31:41.210
These are not game specific,
but have uses within games.

00:31:41.210 --> 00:31:44.143
And then we have a set of gaming
solutions at cloud.google.com

00:31:44.143 --> 00:31:47.230
/solutions/gaming as well.

00:31:47.230 --> 00:31:48.700
Please reach out
to me on Twitter

00:31:48.700 --> 00:31:50.140
if you want to get in touch.

00:31:50.140 --> 00:31:53.090
And have a great I/O.
Thank you, everybody.

00:31:58.790 --> 00:32:04.240
[MUSIC PLAYING]

