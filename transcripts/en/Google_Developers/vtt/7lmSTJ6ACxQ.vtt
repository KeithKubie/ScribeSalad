WEBVTT
Kind: captions
Language: en

00:00:05.604 --> 00:00:07.380
DAN HOLEVOET: Hi, everybody.

00:00:07.380 --> 00:00:09.830
We're going to get started.

00:00:09.830 --> 00:00:12.240
My name's Dan Holevoet, and I'm
an engineer on Google's

00:00:12.240 --> 00:00:13.360
Developer Relations team.

00:00:13.360 --> 00:00:15.620
And I'm going to talk to you
today about how you can launch

00:00:15.620 --> 00:00:19.260
your app inside of Google
Apps using gadgets.

00:00:19.260 --> 00:00:22.740
And while I'm presenting here,
we're going to use Wave as

00:00:22.740 --> 00:00:24.670
we've been doing in some
of the other sessions.

00:00:24.670 --> 00:00:27.290
We'll have live notes taken
inside of the Wave.

00:00:27.290 --> 00:00:29.890
And if you have any questions
you want to ask while I'm

00:00:29.890 --> 00:00:32.040
presenting, you can feel free to
add those inside of Google

00:00:32.040 --> 00:00:33.680
Moderator in the Wave.

00:00:33.680 --> 00:00:36.600
So just go to this bitly URL
that I have on the slide here,

00:00:36.600 --> 00:00:38.970
and I'll give you a second if
you want to open that up.

00:00:41.930 --> 00:00:44.830
And if you don't grab this URL
while it's up here, you can

00:00:44.830 --> 00:00:48.450
actually go to my session
information on the Google I/O

00:00:48.450 --> 00:00:51.410
website to get the URL there.

00:00:51.410 --> 00:00:54.250
So what are going to
talk about today?

00:00:54.250 --> 00:00:56.450
Here's a quick little
agenda for you.

00:00:56.450 --> 00:00:58.780
First thing, why gadgets?

00:00:58.780 --> 00:00:59.480
Why are you here?

00:00:59.480 --> 00:01:01.320
Why do you care?

00:01:01.320 --> 00:01:04.900
Basic motivation for developing
these gadgets--

00:01:04.900 --> 00:01:09.650
some details on what gadgets
are; where gadgets work; some

00:01:09.650 --> 00:01:12.400
common tasks and best practices
that'll help you out

00:01:12.400 --> 00:01:15.260
while you're writing these
gadgets; some information on

00:01:15.260 --> 00:01:18.430
how to distribute these
gadgets; an example

00:01:18.430 --> 00:01:20.410
application that I wrote that
will demonstrate some of

00:01:20.410 --> 00:01:22.040
things that I've been
showing you.

00:01:22.040 --> 00:01:24.640
And then finally, hopefully,
I'll have convinced you all to

00:01:24.640 --> 00:01:26.400
go out and start writing
these yourselves.

00:01:26.400 --> 00:01:29.060
And we have some information
on how you can get started.

00:01:29.060 --> 00:01:31.980
And then, of course, we'll
do some Q&amp;A at the end.

00:01:31.980 --> 00:01:35.140
So first, why gadgets?

00:01:35.140 --> 00:01:39.030
Well, how many of you are
Google Apps users?

00:01:39.030 --> 00:01:40.210
Hopefully I get a few hands.

00:01:40.210 --> 00:01:41.800
Oh, nice.

00:01:41.800 --> 00:01:44.780
So how many of you spend
a lot of your day

00:01:44.780 --> 00:01:47.120
inside of Google Apps?

00:01:47.120 --> 00:01:49.580
That's fairly common.

00:01:49.580 --> 00:01:52.500
And I can imagine for a lot of
you, once you start using

00:01:52.500 --> 00:01:54.110
Google Apps it's really
where you want to

00:01:54.110 --> 00:01:55.510
do all of your work.

00:01:55.510 --> 00:01:58.250
And you'll come to a point where
you actually find it

00:01:58.250 --> 00:02:01.180
really inconvenient to go
outside of Apps to do

00:02:01.180 --> 00:02:02.890
something and then have
to come back.

00:02:02.890 --> 00:02:06.280
Because Google Apps is where
you do all of your work.

00:02:06.280 --> 00:02:08.610
Your workflow is inside
of Google Apps.

00:02:08.610 --> 00:02:11.820
And so gadgets let you take
pieces of the other

00:02:11.820 --> 00:02:14.820
applications that you find
valuable and bring them into

00:02:14.820 --> 00:02:15.410
Google Apps.

00:02:15.410 --> 00:02:18.600
They then become part
of your workflow.

00:02:18.600 --> 00:02:20.830
So you can see in this diagram
here, we have some really cool

00:02:20.830 --> 00:02:22.170
app that does this
really critical

00:02:22.170 --> 00:02:24.630
piece for our business.

00:02:24.630 --> 00:02:27.500
And we can take that app, and we
can put it inside of all of

00:02:27.500 --> 00:02:30.680
the Google Apps that we use on a
daily basis so that we don't

00:02:30.680 --> 00:02:33.810
have to leave Google Apps,
do some piece of work,

00:02:33.810 --> 00:02:34.680
and then come back.

00:02:34.680 --> 00:02:37.170
We can just integrate this
little piece of functionality

00:02:37.170 --> 00:02:39.030
inside of the Google Apps
that we're already,

00:02:39.030 --> 00:02:41.350
every single day.

00:02:41.350 --> 00:02:44.600
So what are gadgets?

00:02:44.600 --> 00:02:47.540
At the simplest level, gadgets
are XML, HTML,

00:02:47.540 --> 00:02:48.390
and JavaScript, right?

00:02:48.390 --> 00:02:52.720
They're little embedded web
pages inside of Google Apps.

00:02:52.720 --> 00:02:54.920
You can see a really simple
example gadget here.

00:02:54.920 --> 00:02:57.290
This is the Hello World
of gadgets.

00:02:57.290 --> 00:03:00.790
We have a module section, which
basically encompasses

00:03:00.790 --> 00:03:02.800
the entire definition
of the gadget.

00:03:02.800 --> 00:03:05.500
We have a module prep section
for declaring things like the

00:03:05.500 --> 00:03:08.530
gadgets title, and then the
content section, which is

00:03:08.530 --> 00:03:12.880
where we include HTML and
JavaScript that basically

00:03:12.880 --> 00:03:14.030
describes the application.

00:03:14.030 --> 00:03:15.810
And so in this particular case,
it's really simple.

00:03:15.810 --> 00:03:19.520
It just says Hello World,
and that's it.

00:03:19.520 --> 00:03:22.130
And while you've been at I/O,
I'm sure you've been hearing

00:03:22.130 --> 00:03:24.590
about all the great things
that are coming in HTML5.

00:03:24.590 --> 00:03:26.850
And all those things you can
do inside of gadgets, too.

00:03:26.850 --> 00:03:31.020
So this is the smallest HTML5
gadget that you can fit into a

00:03:31.020 --> 00:03:32.070
single slide.

00:03:32.070 --> 00:03:37.630
So this uses the canvas tag and
draws a little blue box.

00:03:37.630 --> 00:03:40.800
So it's not the most
entertaining or useful demo,

00:03:40.800 --> 00:03:44.010
but this is the same HTML5 that
we're talking about and

00:03:44.010 --> 00:03:46.260
that you've been hearing about
over the last two days.

00:03:46.260 --> 00:03:47.810
So this is basically
what it looks like.

00:03:47.810 --> 00:03:50.290
This is living inside
of iGoogle.

00:03:50.290 --> 00:03:51.310
It's really straightforward.

00:03:51.310 --> 00:03:54.930
This is the HTML5 version
of Hello World.

00:03:54.930 --> 00:03:58.440
So in addition to all of those
things, all the stuff you get

00:03:58.440 --> 00:04:01.560
just by using HTML5 and
JavaScript and CSS, there are

00:04:01.560 --> 00:04:04.290
some additional gadget-specific
APIs that we

00:04:04.290 --> 00:04:05.300
give you access to.

00:04:05.300 --> 00:04:09.290
So the first one of those is
the dynamic-height library.

00:04:09.290 --> 00:04:13.040
And what that lets you do is
adjust the size of the gadget

00:04:13.040 --> 00:04:16.160
based on how much content
you have inside.

00:04:16.160 --> 00:04:18.769
So if you have a lot of content,
you actually can

00:04:18.769 --> 00:04:20.440
increase the height
of the gadget.

00:04:20.440 --> 00:04:22.910
If you only want to show a
little bit of content, you can

00:04:22.910 --> 00:04:25.740
shrink the size of the gadget
and basically take up as

00:04:25.740 --> 00:04:29.770
little UI space as you
need inside of

00:04:29.770 --> 00:04:31.770
the screen real estate.

00:04:31.770 --> 00:04:35.310
The next one of these is
the Views feature.

00:04:35.310 --> 00:04:40.220
And views allow you to have
multiple facets to your

00:04:40.220 --> 00:04:41.640
application or your gadget.

00:04:41.640 --> 00:04:44.290
So some common ones that you
might have seen if you've ever

00:04:44.290 --> 00:04:47.590
developed a gadget on iGoogle,
for instance, there's the Home

00:04:47.590 --> 00:04:49.290
and the Canvas view.

00:04:49.290 --> 00:04:52.050
The Home view is the view that
you first see when you install

00:04:52.050 --> 00:04:53.190
that gadget on your page.

00:04:53.190 --> 00:04:56.690
It's shared with several other
gadgets or your newsfeeds and

00:04:56.690 --> 00:04:57.610
things like that.

00:04:57.610 --> 00:05:00.530
And the Canvas view allows you
to take advantage of almost

00:05:00.530 --> 00:05:05.270
the entire page and gives you a
lot more room to work with.

00:05:05.270 --> 00:05:08.677
And we'll see there are a couple
other types of views

00:05:08.677 --> 00:05:11.220
that are sort of similar to
these that are available

00:05:11.220 --> 00:05:14.790
inside of other pieces of
the Google Apps suite.

00:05:14.790 --> 00:05:18.170
And then finally, we have to
the osapi.http classes.

00:05:18.170 --> 00:05:21.520
And these allow you to fetch
data from remote sites and

00:05:21.520 --> 00:05:23.930
bring that data inside
of your gadget.

00:05:23.930 --> 00:05:26.900
And because all of these gadgets
are running inside of

00:05:26.900 --> 00:05:31.120
their own sub-domain, you have
the normal restrictions due to

00:05:31.120 --> 00:05:32.220
the same origin policy.

00:05:32.220 --> 00:05:35.120
So your normal XHR requests
aren't going to work.

00:05:35.120 --> 00:05:38.165
So we provide this class so that
you can use that instead

00:05:38.165 --> 00:05:41.280
so that you can fetch
this remote content.

00:05:41.280 --> 00:05:44.210
And this also gives you things
like OAuth signing so that you

00:05:44.210 --> 00:05:48.540
have a verifiable way to
determine what container or

00:05:48.540 --> 00:05:51.380
what piece of Google Apps
is requesting this data.

00:05:51.380 --> 00:05:53.960
You have a unique identifier for
the user of the gadget at

00:05:53.960 --> 00:05:55.690
that particular time.

00:05:55.690 --> 00:05:59.720
And then we also allow you to
use the normal HTTP method so

00:05:59.720 --> 00:06:02.940
you can do GETs, you can do
POSTs, can do PUTs, et cetera.

00:06:02.940 --> 00:06:05.060
And then finally, we have
some helper methods.

00:06:05.060 --> 00:06:08.300
If you're fetching XML or if
you're fetching JavaScript

00:06:08.300 --> 00:06:11.080
objects, you get back
JavaScript objects.

00:06:11.080 --> 00:06:15.590
So if you make a request to a
JSON endpoint somewhere, what

00:06:15.590 --> 00:06:17.590
you get back is actually a
JavaScript object that

00:06:17.590 --> 00:06:18.580
you can just use.

00:06:18.580 --> 00:06:19.550
You don't have to eval it.

00:06:19.550 --> 00:06:21.205
Heaven forbid that you
ever want to do that

00:06:21.205 --> 00:06:22.310
in the first place.

00:06:22.310 --> 00:06:25.430
You don't have to pass it
through your own JSON library.

00:06:25.430 --> 00:06:29.340
You can just start using it
right when you get it back.

00:06:29.340 --> 00:06:30.730
So where do gadgets work?

00:06:30.730 --> 00:06:34.220
I've hinted at a couple places
already, just talking.

00:06:34.220 --> 00:06:36.660
The ones we're going to focus
on today, I'll give you a

00:06:36.660 --> 00:06:37.260
brief summary.

00:06:37.260 --> 00:06:40.590
So the first of those is inside
of Google Calendar.

00:06:40.590 --> 00:06:43.920
And so you can see here, this
is a simple "what's the next

00:06:43.920 --> 00:06:46.180
event" gadget, running
on the right-hand

00:06:46.180 --> 00:06:49.130
side of Google Calendar.

00:06:49.130 --> 00:06:52.360
Google Calendar provides
you with two views.

00:06:52.360 --> 00:06:54.200
The first one of those is the
nav view, which is the one

00:06:54.200 --> 00:06:57.430
we're looking at here, and the
second of which is the canvas

00:06:57.430 --> 00:07:00.180
view, which actually takes
over the frame where your

00:07:00.180 --> 00:07:03.130
events would normally be and
allows you to use that really

00:07:03.130 --> 00:07:05.940
large section of screen
real estate.

00:07:05.940 --> 00:07:08.000
And then in addition to
that, there's also the

00:07:08.000 --> 00:07:11.550
google.calendar APIs, which let
you do things like when a

00:07:11.550 --> 00:07:14.120
user clicks on Event, you can
get the details about the

00:07:14.120 --> 00:07:15.400
event that they've clicked on.

00:07:15.400 --> 00:07:18.490
Or if the user switches what
set of dates that they're

00:07:18.490 --> 00:07:21.300
looking at in their calendar
UI, you can get access to

00:07:21.300 --> 00:07:23.170
those dates inside of your
gadget and trigger some

00:07:23.170 --> 00:07:26.080
special behavior.

00:07:26.080 --> 00:07:29.550
The next one is Google Sites.

00:07:29.550 --> 00:07:33.750
And the really cool part of
having gadgets inside of Sites

00:07:33.750 --> 00:07:37.170
is that these are really a great
way to embed HTML and

00:07:37.170 --> 00:07:39.930
JavaScript inside of Sites--

00:07:39.930 --> 00:07:42.250
and actually the only way to
do that at the moment--

00:07:42.250 --> 00:07:47.050
and really brings dynamic
content to your pages.

00:07:47.050 --> 00:07:48.460
So we have an example here.

00:07:48.460 --> 00:07:52.040
This is a gadget embedded inside
of a quarterly report.

00:07:52.040 --> 00:07:54.200
And we could have just
used an image here.

00:07:54.200 --> 00:07:56.000
But this is actually going
out to a server.

00:07:56.000 --> 00:07:58.250
It's fetching live data,
bringing it back inside of the

00:07:58.250 --> 00:08:03.610
gadget, and giving us a live
chart based off of data that's

00:08:03.610 --> 00:08:05.070
actually current.

00:08:05.070 --> 00:08:08.790
So this isn't frozen in time.

00:08:08.790 --> 00:08:12.150
It's live based off of what's
happening in our server.

00:08:12.150 --> 00:08:16.240
And Sites gives you two views
similar to these other

00:08:16.240 --> 00:08:17.410
containers.

00:08:17.410 --> 00:08:19.410
We have the profile view,
which is what

00:08:19.410 --> 00:08:20.000
you're seeing here.

00:08:20.000 --> 00:08:22.330
And then there's also a
configuration view, which I'll

00:08:22.330 --> 00:08:25.260
talk a little bit about later,
which you can use to actually

00:08:25.260 --> 00:08:29.160
set up these gadgets when you
add them to your Sites pages.

00:08:29.160 --> 00:08:31.480
And then finally, we're going
to talk about Gmail.

00:08:31.480 --> 00:08:34.820
So this gadget we're
showing here is the

00:08:34.820 --> 00:08:36.429
Google Calendar gadget.

00:08:36.429 --> 00:08:39.194
You've probably seen this inside
of Gmail, and you may

00:08:39.194 --> 00:08:41.559
have said, well, oh, I didn't
realize that was a gadget.

00:08:41.559 --> 00:08:42.940
So this is actually a gadget.

00:08:42.940 --> 00:08:45.890
This is a gadget built by
Google using the same

00:08:45.890 --> 00:08:48.310
technology that we're going
to talk about during this

00:08:48.310 --> 00:08:51.660
presentation that we've
used to add a really

00:08:51.660 --> 00:08:53.450
cool feature to Gmail.

00:08:53.450 --> 00:08:57.860
And so this is the left nav that
we're looking at here and

00:08:57.860 --> 00:08:58.780
the nav view.

00:08:58.780 --> 00:09:01.540
And there's also a canvas view
which takes over the mail pane

00:09:01.540 --> 00:09:04.070
where you have your inbox or
your list of threads or the

00:09:04.070 --> 00:09:05.545
thread that you're currently
looking at.

00:09:05.545 --> 00:09:08.210
So you have a really big section
of real estate to work

00:09:08.210 --> 00:09:09.870
with inside of Gmail.

00:09:09.870 --> 00:09:13.920
And then another place to embed
gadgets inside of Gmail,

00:09:13.920 --> 00:09:16.640
which we actually just announced
on Tuesday, is Gmail

00:09:16.640 --> 00:09:18.100
contextual gadgets.

00:09:18.100 --> 00:09:21.550
And unfortunately, I can't do
contextual gadgets justice

00:09:21.550 --> 00:09:23.980
talking about them just in
this one presentation.

00:09:23.980 --> 00:09:27.850
So I'm actually giving another
session on them today at 4:45.

00:09:27.850 --> 00:09:30.400
So we'll talk a little
bit about them here.

00:09:30.400 --> 00:09:32.910
And hopefully, you'll be really
interested in them and

00:09:32.910 --> 00:09:35.460
come to the other session
on those later.

00:09:35.460 --> 00:09:39.630
So contextual gadgets basically
match on the fields

00:09:39.630 --> 00:09:42.560
of an email message, so who
the message is to, who the

00:09:42.560 --> 00:09:46.040
message is from, a specific
pattern that you might see

00:09:46.040 --> 00:09:50.790
inside of the email body, a link
or an image or something

00:09:50.790 --> 00:09:55.270
like that, and then, based off
of those matches, trigger a

00:09:55.270 --> 00:09:58.860
gadget which then has access
to that particular context.

00:09:58.860 --> 00:10:03.970
So in this case here, we're
looking at the Google Docs

00:10:03.970 --> 00:10:04.850
contextual gadget.

00:10:04.850 --> 00:10:08.660
And so John Doe has sent me a
link to an important document.

00:10:08.660 --> 00:10:10.390
And I could click on that link,
and I could open up

00:10:10.390 --> 00:10:13.100
Google Docs, read the document,
come back to my

00:10:13.100 --> 00:10:16.330
Gmail, and send off a response
to this particular message.

00:10:16.330 --> 00:10:19.550
Or I could, actually using the
contextual gadget, click on

00:10:19.550 --> 00:10:22.120
the Show Preview option and
see the contents of the

00:10:22.120 --> 00:10:23.800
document right below
the email.

00:10:23.800 --> 00:10:27.280
And then I can read the email,
and I can reply to John

00:10:27.280 --> 00:10:29.040
without ever having
to leave my inbox.

00:10:29.040 --> 00:10:30.590
So this is a really
powerful feature.

00:10:34.100 --> 00:10:37.510
I've shown you a little bit
about where you can use each

00:10:37.510 --> 00:10:38.630
of these gadgets.

00:10:38.630 --> 00:10:40.990
And so you're probably saying,
OK, well, I have the basic

00:10:40.990 --> 00:10:42.160
idea of where they can go.

00:10:42.160 --> 00:10:46.310
But here are some things that
I'm interested in doing.

00:10:46.310 --> 00:10:50.780
And when I write these gadgets,
how do I do things

00:10:50.780 --> 00:10:51.600
like fetch data?

00:10:51.600 --> 00:10:53.980
So this is a really
common practice.

00:10:53.980 --> 00:10:56.320
There's basically four
steps to this.

00:10:56.320 --> 00:10:57.600
It's actually really simple.

00:10:57.600 --> 00:11:00.870
The steps are mostly
behind the scenes.

00:11:00.870 --> 00:11:06.090
So using the aforementioned
osapi.http class, we would

00:11:06.090 --> 00:11:08.860
write this little snippet
of code here.

00:11:08.860 --> 00:11:12.480
You can see we're using
the GET method.

00:11:12.480 --> 00:11:15.150
You could also use a POST
or a PUT, et cetera.

00:11:15.150 --> 00:11:17.960
You can actually specify a
payload if you're interested.

00:11:17.960 --> 00:11:22.260
We're sending a request to
example.com for some JSON.

00:11:22.260 --> 00:11:24.700
And this is an asynchronous
request.

00:11:24.700 --> 00:11:29.540
We're not going to block
the browser.

00:11:29.540 --> 00:11:32.990
So we need to specify
a callback method.

00:11:32.990 --> 00:11:34.790
And we're going to
use that here.

00:11:34.790 --> 00:11:37.690
So when we call execute, we're
going to pass in the method

00:11:37.690 --> 00:11:38.550
handleResponse.

00:11:38.550 --> 00:11:43.770
So whenever this data comes back
from the container site,

00:11:43.770 --> 00:11:46.450
that we'll call handleResponse,
pass in the

00:11:46.450 --> 00:11:49.310
JavaScript object that we're
given, and then the gadget can

00:11:49.310 --> 00:11:50.900
do something useful with it.

00:11:50.900 --> 00:11:54.420
So once we send off this
JavaScript request, that's

00:11:54.420 --> 00:11:56.720
going to go to the container
website.

00:11:56.720 --> 00:12:00.220
In this case, it's my depiction
of Google Sites.

00:12:00.220 --> 00:12:02.780
And then that's going to pass it
off to whatever remote site

00:12:02.780 --> 00:12:03.930
we're requesting
the data from.

00:12:03.930 --> 00:12:05.270
So it could be App Engine.

00:12:05.270 --> 00:12:08.110
It could be the server that
you've already built.

00:12:08.110 --> 00:12:11.520
It could be a public or a
third-party website that has

00:12:11.520 --> 00:12:13.140
public data.

00:12:13.140 --> 00:12:18.750
Really, any publicly available
site on the internet or even

00:12:18.750 --> 00:12:21.050
using something like secure
data connector you could

00:12:21.050 --> 00:12:25.100
request data that's private
to your own domain.

00:12:25.100 --> 00:12:28.710
So that site will receive a
request, sends back some data

00:12:28.710 --> 00:12:29.950
which will go to
the container.

00:12:29.950 --> 00:12:32.100
And then the container
will proxy that data

00:12:32.100 --> 00:12:33.300
back into the gadget.

00:12:33.300 --> 00:12:34.425
It's relatively straightforward.

00:12:34.425 --> 00:12:35.760
You can just start
using the data.

00:12:35.760 --> 00:12:39.650
You can render it inside of the
gadget, do all sorts of

00:12:39.650 --> 00:12:41.420
useful things.

00:12:41.420 --> 00:12:44.560
So the next thing that we'll
talk about is authentication.

00:12:44.560 --> 00:12:48.160
And this actually works
relatively similarly to how

00:12:48.160 --> 00:12:49.880
you would fetch data.

00:12:49.880 --> 00:12:53.760
So when we make one of these
requests to a remote site, we

00:12:53.760 --> 00:12:57.260
can actually request that the
container append identifying

00:12:57.260 --> 00:13:01.510
information to that particular
request about the user and

00:13:01.510 --> 00:13:03.560
about what site it's
coming from.

00:13:03.560 --> 00:13:05.620
And we do that by adding
this line here.

00:13:05.620 --> 00:13:07.870
So we have "authz, signed."

00:13:07.870 --> 00:13:11.470
And what that does is when the
request gets to the container,

00:13:11.470 --> 00:13:13.870
the container will append
a unique user ID

00:13:13.870 --> 00:13:14.940
for the current user.

00:13:14.940 --> 00:13:17.220
And we also call that
the OpenSocial ID.

00:13:17.220 --> 00:13:21.750
And it will cryptographically
sign this request.

00:13:21.750 --> 00:13:24.200
So basically it takes
all of the

00:13:24.200 --> 00:13:25.680
parameters and the requests.

00:13:25.680 --> 00:13:31.320
If you pass in a payload, if
you're using a PUT or a POST,

00:13:31.320 --> 00:13:34.490
basically mash all those
parameters together, assign

00:13:34.490 --> 00:13:38.400
them with a secret key that
only you as the gadget

00:13:38.400 --> 00:13:43.340
developer and Google have access
to, and then create a

00:13:43.340 --> 00:13:46.700
hash and append that to
the end of the request

00:13:46.700 --> 00:13:48.430
inside of the URL.

00:13:48.430 --> 00:13:52.780
So then when the recipient site
gets that message, you

00:13:52.780 --> 00:13:55.970
can then again repeat basically
the same process.

00:13:55.970 --> 00:13:59.115
You can push together all the
parameters that were sent in

00:13:59.115 --> 00:14:02.840
the request using your copy
of that secret key.

00:14:02.840 --> 00:14:04.410
Recreate the hash.

00:14:04.410 --> 00:14:06.310
Verify that it's the same.

00:14:06.310 --> 00:14:08.220
And then you know that the
request has come from this

00:14:08.220 --> 00:14:11.720
particular container that it's
identified itself as.

00:14:11.720 --> 00:14:14.290
And so inside of that request
you have access to

00:14:14.290 --> 00:14:15.830
this unique user ID.

00:14:15.830 --> 00:14:19.780
And if you're comfortable just
using that, you have this

00:14:19.780 --> 00:14:23.560
verifiable way to identify a
specific user of your gadget.

00:14:23.560 --> 00:14:25.960
And then the remainder of
the steps are the same.

00:14:25.960 --> 00:14:28.890
The server sends back some data
to the container, and the

00:14:28.890 --> 00:14:32.110
container passes that data
back to the gadget.

00:14:32.110 --> 00:14:34.780
You might be saying to yourself,
well, having that

00:14:34.780 --> 00:14:37.780
idea's cool, but I have a
database, and the database has

00:14:37.780 --> 00:14:39.780
lots of information
about this user.

00:14:39.780 --> 00:14:41.980
Maybe they already have an
account on my site, and I'd

00:14:41.980 --> 00:14:45.520
like to tie that to this
OpenSocial ID.

00:14:45.520 --> 00:14:48.910
Or in the context of using the
Google Apps Marketplace, I

00:14:48.910 --> 00:14:50.790
have this marketplace
application, and

00:14:50.790 --> 00:14:53.100
that's using OpenID.

00:14:53.100 --> 00:14:56.480
How would I take this OpenSocial
ID and tie that to

00:14:56.480 --> 00:14:59.480
the OpenID?

00:14:59.480 --> 00:15:01.620
This is a little
bit confusing.

00:15:01.620 --> 00:15:03.140
I'll walk through it
right now briefly.

00:15:03.140 --> 00:15:05.530
If anyone has any questions on
this, please feel free to ask

00:15:05.530 --> 00:15:07.640
at the end.

00:15:07.640 --> 00:15:10.350
So the first thing that we do
here is we start out sending

00:15:10.350 --> 00:15:12.550
that request to the
remote site.

00:15:12.550 --> 00:15:15.780
So we have the "authz signed."
This is going to give us that

00:15:15.780 --> 00:15:20.910
unique OpenSocial ID in the
request to the server.

00:15:20.910 --> 00:15:25.410
And so this is some App Engine
Python-like pseudocode that

00:15:25.410 --> 00:15:27.260
you couldn't precisely use
inside of your app.

00:15:27.260 --> 00:15:29.190
But this will give you a pretty
good idea of what type

00:15:29.190 --> 00:15:30.820
of thing we're doing here.

00:15:30.820 --> 00:15:32.110
And so we get this request.

00:15:32.110 --> 00:15:35.010
We have the OpenSocial ID
inside of our database.

00:15:35.010 --> 00:15:38.170
And so we're going to look for
any user that has that

00:15:38.170 --> 00:15:41.180
OpenSocial ID associated with
their user objects.

00:15:41.180 --> 00:15:43.320
And we'll do a little query
for that here, pulling the

00:15:43.320 --> 00:15:45.320
value out of the URL.

00:15:45.320 --> 00:15:48.940
If we happen to not find the
user, which will be the first

00:15:48.940 --> 00:15:52.450
time the gadget loads, we can
create a temporary user inside

00:15:52.450 --> 00:15:55.820
of our database, pass in that
OpenSocial ID again.

00:15:55.820 --> 00:15:58.970
And then we're going to save
along with that a random

00:15:58.970 --> 00:16:01.340
value, basically a one-time-use
token.

00:16:01.340 --> 00:16:05.050
This could be a session token,
any kind of value that you

00:16:05.050 --> 00:16:07.370
want, as long as you're only
going to use it a single time.

00:16:07.370 --> 00:16:10.570
And you can uniquely associate
that with this particular row

00:16:10.570 --> 00:16:12.660
in the database that
we're saving here.

00:16:12.660 --> 00:16:16.880
And then we'll pass that data,
that session token back to the

00:16:16.880 --> 00:16:19.320
gadget along with basically
a status.

00:16:19.320 --> 00:16:20.380
We didn't find the user.

00:16:20.380 --> 00:16:22.150
You're going to need to
do a second step of

00:16:22.150 --> 00:16:24.190
authentication here.

00:16:24.190 --> 00:16:27.160
And this will basically indicate
to the gadget to

00:16:27.160 --> 00:16:29.540
initiate that flow.

00:16:29.540 --> 00:16:32.500
And then in the other case where
we already have this

00:16:32.500 --> 00:16:34.260
user stored, you don't
have to do anything.

00:16:34.260 --> 00:16:36.150
You can tell the gadget
basically they're

00:16:36.150 --> 00:16:37.140
authenticated.

00:16:37.140 --> 00:16:39.990
You could also pass back
information about that user,

00:16:39.990 --> 00:16:42.570
whatever data you have stored
inside of your application

00:16:42.570 --> 00:16:45.920
that you want to use inside
of the gadget.

00:16:45.920 --> 00:16:47.970
Going back to the flow,
we need to do more

00:16:47.970 --> 00:16:48.760
authentication.

00:16:48.760 --> 00:16:53.840
So in this particular case,
we're going to be focusing on

00:16:53.840 --> 00:16:55.260
applications using OpenID.

00:16:55.260 --> 00:16:58.130
So we're going to open
up this OpenID URL.

00:16:58.130 --> 00:17:01.500
This could be a link to your
server, basically, where you

00:17:01.500 --> 00:17:03.800
go through the OpenID
flow process.

00:17:03.800 --> 00:17:06.650
And you'd append to that URL
that unique session token that

00:17:06.650 --> 00:17:09.800
you passed back from
your server.

00:17:09.800 --> 00:17:11.890
So you open this up inside
of a window.

00:17:11.890 --> 00:17:17.359
The user will be prompted to
grant access to your site and

00:17:17.359 --> 00:17:19.280
log in with their OpenID
credentials, which in this

00:17:19.280 --> 00:17:23.430
case would be through
Google Apps.

00:17:23.430 --> 00:17:25.510
That'll redirect itself
a couple times.

00:17:25.510 --> 00:17:27.579
And then finally, it'll
end up on your site.

00:17:27.579 --> 00:17:30.990
And so you'll have details about
the user from OpenID.

00:17:30.990 --> 00:17:34.210
And because you've also passed
in the SessionToken, you'll

00:17:34.210 --> 00:17:36.690
have details about the
user's OpenSocial ID.

00:17:36.690 --> 00:17:39.210
And at that point, you can save
those in your database.

00:17:39.210 --> 00:17:42.640
And you know basically who the
user is through OpenID.

00:17:42.640 --> 00:17:44.630
You know who they are through
the gadget, because you have

00:17:44.630 --> 00:17:45.750
the two correlated.

00:17:45.750 --> 00:17:47.780
And then you've also potentially
know more

00:17:47.780 --> 00:17:49.930
information that you've saved
in the database because

00:17:49.930 --> 00:17:52.470
they've logged in through
OpenID before.

00:17:52.470 --> 00:17:55.780
And at this point, you can close
the pop-up window with

00:17:55.780 --> 00:17:57.340
some simple JavaScript.

00:17:57.340 --> 00:18:01.450
And then inside of the gadget,
which can basically check on

00:18:01.450 --> 00:18:04.340
the status of that pop-up window
being the window that

00:18:04.340 --> 00:18:07.610
created it, you can do sort
of a sanity check.

00:18:07.610 --> 00:18:09.140
Send this back to your site.

00:18:09.140 --> 00:18:12.680
Make sure that the user is
actually in the database.

00:18:12.680 --> 00:18:15.410
And hopefully, you send
back the signal that

00:18:15.410 --> 00:18:16.260
everything is great.

00:18:16.260 --> 00:18:19.590
If it's not, maybe the user
closed the pop-up window

00:18:19.590 --> 00:18:20.970
before they actually
authenticated.

00:18:20.970 --> 00:18:23.480
You can put up a little warning
message basically

00:18:23.480 --> 00:18:27.020
saying, oh, we really need you
to log in and go through that

00:18:27.020 --> 00:18:28.640
process one more time.

00:18:28.640 --> 00:18:32.020
So at this point, the
user has logged in.

00:18:32.020 --> 00:18:33.300
You know who they are
on your database.

00:18:33.300 --> 00:18:35.680
You know what their OpenSocial
ID is in the database.

00:18:35.680 --> 00:18:38.250
And every time they load the
gadget from this point on, you

00:18:38.250 --> 00:18:41.190
can just send that one single
request, look up that

00:18:41.190 --> 00:18:45.460
OpenSocial ID, and
you're done.

00:18:45.460 --> 00:18:47.820
So the next thing, writing
safe gadgets.

00:18:47.820 --> 00:18:50.410
So the most important thing
here is stick to the

00:18:50.410 --> 00:18:52.410
HTML and CSS specs.

00:18:52.410 --> 00:18:55.450
The number one reason to do
this, when you go outside of

00:18:55.450 --> 00:18:57.790
the spec you're just going to
create compatibility problems

00:18:57.790 --> 00:18:58.440
for yourself.

00:18:58.440 --> 00:19:01.950
Every browser is trying to
follow the HTML as CSS specs

00:19:01.950 --> 00:19:03.860
as closely as possible.

00:19:03.860 --> 00:19:06.200
Some of them do it a little
bit better than others.

00:19:06.200 --> 00:19:08.900
But they're all on the road
to following these specs.

00:19:08.900 --> 00:19:12.610
And if you follow these you're
going to have the best time in

00:19:12.610 --> 00:19:15.830
the future maintaining
compatibility.

00:19:15.830 --> 00:19:17.900
You should also use safe
DOM operations.

00:19:17.900 --> 00:19:20.110
Doing things like document.write
aren't going to

00:19:20.110 --> 00:19:22.000
help your application at all.

00:19:22.000 --> 00:19:23.940
And in the worst case, they're
going to open you up to things

00:19:23.940 --> 00:19:26.550
like prostate scripting.

00:19:26.550 --> 00:19:28.940
On the same token, use
supported event

00:19:28.940 --> 00:19:31.330
handlers and timers.

00:19:31.330 --> 00:19:33.300
All of these things are
basically going to ensure

00:19:33.300 --> 00:19:37.920
compatibility, reduce the scope
of possible attacks

00:19:37.920 --> 00:19:39.290
against your gadgets.

00:19:39.290 --> 00:19:43.700
And then in order to help you
on this goal, we actually

00:19:43.700 --> 00:19:45.980
recommend the use of the
following frameworks, Google

00:19:45.980 --> 00:19:51.220
Web Toolkit, OpenSocial
Templates, and then JQuery.

00:19:51.220 --> 00:19:53.040
So here are some examples of
the good, the bad, and the

00:19:53.040 --> 00:19:55.720
ugly of writing safe gadgets.

00:19:55.720 --> 00:19:58.700
The first two examples are good
ways to append the text

00:19:58.700 --> 00:20:00.380
Hello World to your gadget.

00:20:00.380 --> 00:20:01.860
The second one is something
you definitely

00:20:01.860 --> 00:20:03.100
don't want to do.

00:20:03.100 --> 00:20:07.150
And then finally, this is a
slightly different class of

00:20:07.150 --> 00:20:08.460
security exploit.

00:20:08.460 --> 00:20:12.590
Don't trust things like where
you're going to redirect the

00:20:12.590 --> 00:20:16.630
window to to the results
of a potentially

00:20:16.630 --> 00:20:19.050
unsanitized user input.

00:20:19.050 --> 00:20:22.880
So you wouldn't want to call an
API method that gets a URL

00:20:22.880 --> 00:20:25.750
and then just trust the user
or some other data that's

00:20:25.750 --> 00:20:28.510
inside of your system that's
never been sanitized.

00:20:28.510 --> 00:20:29.410
So don't do this.

00:20:29.410 --> 00:20:30.660
This is very bad.

00:20:32.670 --> 00:20:34.270
So you have this gadget.

00:20:34.270 --> 00:20:37.090
It's safe, uses HTML
and CSS specs.

00:20:37.090 --> 00:20:41.700
It requests data from third
parties and can

00:20:41.700 --> 00:20:43.200
authenticate the user.

00:20:43.200 --> 00:20:45.770
How do you distribute this?

00:20:45.770 --> 00:20:48.340
So inside of Gmail and Calendar,
the contextual

00:20:48.340 --> 00:20:50.140
gadgets that I mentioned
before-- and we'll talk a

00:20:50.140 --> 00:20:52.250
little bit about them in my
other session-- those are

00:20:52.250 --> 00:20:55.150
distributed through the Google
Apps Marketplace.

00:20:55.150 --> 00:20:58.480
Sidebar gadgets inside of
Gmail and Calendar are

00:20:58.480 --> 00:20:59.830
currently a labs feature.

00:20:59.830 --> 00:21:05.000
So you would turn on that Add
Gadget by URL lab inside of

00:21:05.000 --> 00:21:07.040
the Gmail and Calendar UI.

00:21:07.040 --> 00:21:11.880
And then you just add the link
to the gadget inside of that

00:21:11.880 --> 00:21:15.350
UI, and it appears inside
of the navigation.

00:21:15.350 --> 00:21:17.060
And then Calendar gadgets,
actually there's a little

00:21:17.060 --> 00:21:18.370
shortcut for this.

00:21:18.370 --> 00:21:22.070
If you want to paste your gadget
XML URL at the end of

00:21:22.070 --> 00:21:24.200
this, you can actually send
this link to someone.

00:21:24.200 --> 00:21:25.950
And when they visit it, they'll
get a little message

00:21:25.950 --> 00:21:29.980
saying, you're attempting to add
this particular gadget to

00:21:29.980 --> 00:21:34.060
your page, and basically ask
for permission to do so.

00:21:34.060 --> 00:21:36.850
And then inside of Sites,
Sites actually shares a

00:21:36.850 --> 00:21:39.740
directory with iGoogle
for gadgets.

00:21:39.740 --> 00:21:41.770
And so if you submit your gadget
to iGoogle, it should

00:21:41.770 --> 00:21:45.220
show up in the Google Sites
directory as well.

00:21:45.220 --> 00:21:47.940
And there's also the Add by
URL feature there, too.

00:21:47.940 --> 00:21:51.255
So if you want to add any custom
URL, it doesn't have to

00:21:51.255 --> 00:21:52.680
be listed in the iGoogle
directory in

00:21:52.680 --> 00:21:56.010
order to show up here.

00:21:56.010 --> 00:21:59.240
And then finally, since a lot
of these gadgets hopefully

00:21:59.240 --> 00:22:01.840
that you're interested in
writing will be distributed

00:22:01.840 --> 00:22:04.950
along with other pieces that
are in the Google Apps

00:22:04.950 --> 00:22:07.580
Marketplace, if you want to do
things like add a link inside

00:22:07.580 --> 00:22:11.440
of Google's universal navigation
or support OpenID

00:22:11.440 --> 00:22:13.680
whitelisting so that that
authentication step I was

00:22:13.680 --> 00:22:17.870
talking a little bit about
before, you can actually skip

00:22:17.870 --> 00:22:21.340
the user having to do an
approval process for that.

00:22:21.340 --> 00:22:24.290
Or if you want to write Gmail
contextual gadgets, you should

00:22:24.290 --> 00:22:25.720
list in the marketplace.

00:22:25.720 --> 00:22:28.210
And again, this is another topic
that there's just so

00:22:28.210 --> 00:22:29.880
much to mention that
I couldn't do

00:22:29.880 --> 00:22:30.780
it all in this session.

00:22:30.780 --> 00:22:34.680
So thankfully we've had a number
of other sessions in

00:22:34.680 --> 00:22:37.510
the last two days about writing
for the marketplace.

00:22:37.510 --> 00:22:39.300
And I'd encourage all of
you to check those out.

00:22:39.300 --> 00:22:42.400
We also have documentation on
code.google.com about writing

00:22:42.400 --> 00:22:43.650
marketplace apps.

00:22:46.430 --> 00:22:47.690
I've talked a little--

00:22:47.690 --> 00:22:50.230
or a lot-- about these different
API calls, where

00:22:50.230 --> 00:22:52.000
these things work.

00:22:52.000 --> 00:22:53.940
And you haven't seen
an example.

00:22:53.940 --> 00:22:56.500
So let's see an example
application that I wrote.

00:22:56.500 --> 00:22:59.950
This is called Tick Track, and
it's a ticket tracking system.

00:22:59.950 --> 00:23:04.850
It allows you to basically
create a ticket queue and

00:23:04.850 --> 00:23:08.330
assign owners and statuses to
email messages that come in,

00:23:08.330 --> 00:23:10.860
which are basically the tickets
in this system.

00:23:10.860 --> 00:23:14.420
And each of the gadgets that
live inside of Google Apps

00:23:14.420 --> 00:23:18.090
give you specific dashboard
views and allow you to take

00:23:18.090 --> 00:23:20.520
actions based off of these
tickets that have come in.

00:23:20.520 --> 00:23:22.500
So let's just jump
to the demo.

00:23:22.500 --> 00:23:26.610
So here's the application, just
as it lives by itself.

00:23:26.610 --> 00:23:28.790
So on the left, we have
a list of agents.

00:23:28.790 --> 00:23:29.670
Now, here's myself.

00:23:29.670 --> 00:23:32.030
If I click on myself I can
see all the tickets

00:23:32.030 --> 00:23:34.080
that I've been assigned.

00:23:34.080 --> 00:23:35.640
Here they all are here.

00:23:35.640 --> 00:23:39.040
If I click on one of these, we
can see who the email message

00:23:39.040 --> 00:23:41.540
came from, that it's
assigned to me.

00:23:41.540 --> 00:23:43.550
I could do actions
like unassign it

00:23:43.550 --> 00:23:47.090
or take it, et cetera.

00:23:47.090 --> 00:23:48.390
Pretty straightforward.

00:23:48.390 --> 00:23:50.450
But this right now lives
outside of Google Apps.

00:23:50.450 --> 00:23:53.530
So if I want to use this, I have
to jump over to this app,

00:23:53.530 --> 00:23:56.560
look at what's in my queue,
possibly assign it to someone,

00:23:56.560 --> 00:23:59.460
go inside of Gmail, take
some action, et cetera.

00:23:59.460 --> 00:24:02.370
And it's a slightly
awkward workflow.

00:24:02.370 --> 00:24:05.230
So how can we make
this better?

00:24:05.230 --> 00:24:07.505
Let me jump back to
the slides here.

00:24:11.748 --> 00:24:12.998
Sorry about that.

00:24:15.400 --> 00:24:19.610
So here's a quick architecture
diagram of what this app's

00:24:19.610 --> 00:24:20.860
going to do.

00:24:28.850 --> 00:24:31.250
So we have this gadget that
lives inside of one of these

00:24:31.250 --> 00:24:32.300
Google Apps.

00:24:32.300 --> 00:24:36.290
We're sending the OpenSocial
ID to the App Engine app,

00:24:36.290 --> 00:24:37.830
which is the back end here.

00:24:37.830 --> 00:24:40.970
And to handle the mailing list
functionality and the ticket

00:24:40.970 --> 00:24:43.640
tracking functionality, we're
actually using Google Groups.

00:24:43.640 --> 00:24:46.200
And so that's sending all of
the email messages to these

00:24:46.200 --> 00:24:48.880
particular groups into
App Engine using the

00:24:48.880 --> 00:24:50.400
incoming email API.

00:24:50.400 --> 00:24:54.310
And then finally, data about
the particular thread that

00:24:54.310 --> 00:24:56.630
we're looking at or the
particular agent that's

00:24:56.630 --> 00:24:59.110
working on these tickets gets
sent back to the gadgets so

00:24:59.110 --> 00:25:02.050
that we can display that
inside of Google Apps.

00:25:02.050 --> 00:25:04.240
So first let's look at
the gadget living

00:25:04.240 --> 00:25:05.500
inside of Google Calendar.

00:25:05.500 --> 00:25:06.960
So here we are.

00:25:06.960 --> 00:25:08.020
Here's today.

00:25:08.020 --> 00:25:10.850
On the right side we have a
list of threads that I've

00:25:10.850 --> 00:25:12.920
worked on in the last week.

00:25:12.920 --> 00:25:15.480
When my manager comes to me and
says, hey, Dan, what have

00:25:15.480 --> 00:25:16.530
you been doing?

00:25:16.530 --> 00:25:18.550
Yeah, the I/O stuff, OK, I don't
really care about that.

00:25:18.550 --> 00:25:19.740
But what else have
you been doing?

00:25:19.740 --> 00:25:21.970
I can go to this gadget and I
can say, well, look, here are

00:25:21.970 --> 00:25:23.580
the things I did in
the last week.

00:25:23.580 --> 00:25:25.370
I have these four threads.

00:25:25.370 --> 00:25:27.840
I can see some basic details
about them, what they're

00:25:27.840 --> 00:25:32.160
called, and get a total
of how many of these

00:25:32.160 --> 00:25:33.170
things I've worked on.

00:25:33.170 --> 00:25:36.680
Actually, if I flip
back in time--

00:25:36.680 --> 00:25:39.555
let me flip forward in
time for a second

00:25:39.555 --> 00:25:40.805
and reload this page.

00:25:45.140 --> 00:25:45.300
All right.

00:25:45.300 --> 00:25:48.980
If I flip back in time to look
at the previous week, I'm

00:25:48.980 --> 00:25:51.640
actually looking at the
particular week that the

00:25:51.640 --> 00:25:53.820
user's inspecting and passing
that into the gadget.

00:25:53.820 --> 00:25:56.920
So in this case the gadget then
says, oh, well, let's

00:25:56.920 --> 00:25:59.980
look at the date range that the
user's looking at and pull

00:25:59.980 --> 00:26:01.570
out the threads that
he was working on

00:26:01.570 --> 00:26:02.290
that particular week.

00:26:02.290 --> 00:26:04.420
So you can see last week I had
another simple question I was

00:26:04.420 --> 00:26:05.320
working on.

00:26:05.320 --> 00:26:06.850
And it was only one
thread that week.

00:26:06.850 --> 00:26:09.460
So I guess I was sort
of slacking off.

00:26:09.460 --> 00:26:11.300
The week before that we
have another two.

00:26:11.300 --> 00:26:14.050
And as I flip through these,
each one of those date ranges

00:26:14.050 --> 00:26:16.850
gets passed to the gadget and
then loads the tickets from

00:26:16.850 --> 00:26:18.100
that particular week.

00:26:20.630 --> 00:26:21.740
So how are we doing that?

00:26:21.740 --> 00:26:24.180
We're doing that through the
Google Calendar subscribe to

00:26:24.180 --> 00:26:25.600
dates method.

00:26:25.600 --> 00:26:27.360
And this is actually
really simple.

00:26:27.360 --> 00:26:30.790
Basically you just pass in a
function that accepts one

00:26:30.790 --> 00:26:33.100
value, which is the dates
that we're looking at.

00:26:33.100 --> 00:26:34.590
And that's the date range.

00:26:34.590 --> 00:26:35.530
So we have two of those.

00:26:35.530 --> 00:26:38.780
The first one of those
is the start time.

00:26:38.780 --> 00:26:41.390
And we can convert that into
basically a time stamp that

00:26:41.390 --> 00:26:42.760
we're looking at here.

00:26:42.760 --> 00:26:45.510
We do that for both of these and
then send that off to App

00:26:45.510 --> 00:26:47.790
Engine, along with
my OpenSocial ID.

00:26:47.790 --> 00:26:51.780
And because that's already
correlated with my user agent

00:26:51.780 --> 00:26:54.560
inside of the database, it can
send back all the tickets that

00:26:54.560 --> 00:26:58.150
I worked on in that
particular week.

00:26:58.150 --> 00:26:59.230
So the next one that
we'll look at here

00:26:59.230 --> 00:27:01.840
is a gadget in Sites.

00:27:01.840 --> 00:27:05.820
And this is actually a single
gadget that we're looking at

00:27:05.820 --> 00:27:08.570
here, but it has four different
views that we've

00:27:08.570 --> 00:27:09.850
implemented.

00:27:09.850 --> 00:27:12.200
And I'll tell you a little bit
about how we're doing that in

00:27:12.200 --> 00:27:13.800
just a second.

00:27:13.800 --> 00:27:15.190
Network's just a little
bit slow.

00:27:15.190 --> 00:27:16.460
OK.

00:27:16.460 --> 00:27:19.570
So you can see here, on the top
left, we have the tickets

00:27:19.570 --> 00:27:21.360
that are owned by particular
people.

00:27:21.360 --> 00:27:23.390
So you can see, I guess
I/O's been taking

00:27:23.390 --> 00:27:24.170
up a lot of my time.

00:27:24.170 --> 00:27:26.360
There's a lot of tickets in this
queue that haven't been

00:27:26.360 --> 00:27:27.690
assigned to anyone.

00:27:27.690 --> 00:27:30.380
I've only done nine
of these here.

00:27:30.380 --> 00:27:30.980
That's not so good.

00:27:30.980 --> 00:27:33.350
My manager's going
to be unhappy.

00:27:33.350 --> 00:27:35.640
And if we look at the other
details here, you can see the

00:27:35.640 --> 00:27:38.590
total number of tickets that's
come in, how many of those

00:27:38.590 --> 00:27:41.450
were resolved, the total number
of tickets per day.

00:27:41.450 --> 00:27:42.810
We can click on all
these things.

00:27:42.810 --> 00:27:45.960
And all these charts are done
by the Google Visualizations

00:27:45.960 --> 00:27:47.470
API, which I encourage all
of you to check out.

00:27:47.470 --> 00:27:50.860
It's really awesome, and these
are super easy to create.

00:27:50.860 --> 00:27:52.780
And then we have this
big number.

00:27:52.780 --> 00:27:55.660
If we had to have one number
about how we're doing, what's

00:27:55.660 --> 00:27:57.600
the average resolution time
on all these tickets?

00:27:57.600 --> 00:28:00.070
So we can see 79.52 hours.

00:28:00.070 --> 00:28:01.980
That's not very good.

00:28:01.980 --> 00:28:04.640
My manager's probably going to
yell at me about that one.

00:28:04.640 --> 00:28:08.530
So I have some work to
do when I get back.

00:28:08.530 --> 00:28:09.840
We'll see how that goes.

00:28:09.840 --> 00:28:11.970
But anyway, these are
all one particular

00:28:11.970 --> 00:28:13.850
gadget that we've installed.

00:28:13.850 --> 00:28:17.560
And actually, if I edit the page
here, when I click on one

00:28:17.560 --> 00:28:20.730
of these gadgets, I can pull
up the properties.

00:28:20.730 --> 00:28:23.750
So this is similar to what you'd
see when you actually

00:28:23.750 --> 00:28:25.830
install one of these gadgets
on your page.

00:28:25.830 --> 00:28:28.570
We have details about how wide
is the gadget, how tall is the

00:28:28.570 --> 00:28:31.150
gadget, do we want to
give it a name.

00:28:31.150 --> 00:28:35.530
And this box, this piece at the
top here is configuration

00:28:35.530 --> 00:28:37.720
that we've added inside
of the gadget.

00:28:37.720 --> 00:28:41.680
So when I add this gadget I can
pick what kinds of details

00:28:41.680 --> 00:28:42.940
I'm interested in displaying.

00:28:42.940 --> 00:28:45.220
So this is a really simple
example of this.

00:28:45.220 --> 00:28:47.800
I just want to have four
different views.

00:28:47.800 --> 00:28:50.470
But we could also do things
like, well, what agent do we

00:28:50.470 --> 00:28:51.170
want to look at?

00:28:51.170 --> 00:28:53.370
Or is there a particular date
range that we're interested in

00:28:53.370 --> 00:28:54.960
looking at instead of
just the last 30

00:28:54.960 --> 00:28:57.120
days, like I'm showing?

00:28:57.120 --> 00:28:58.490
We can have different
preferences for

00:28:58.490 --> 00:29:00.040
all of these things.

00:29:00.040 --> 00:29:01.570
There's some really
complicated logic

00:29:01.570 --> 00:29:02.750
we wanted to add.

00:29:02.750 --> 00:29:04.150
We could add that here.

00:29:04.150 --> 00:29:07.360
And actually, if we wanted
to rewrite this entire

00:29:07.360 --> 00:29:09.310
configuration page, we could
do that using the

00:29:09.310 --> 00:29:10.280
configuration view.

00:29:10.280 --> 00:29:13.880
So when a person adds this
gadget, instead of seeing all

00:29:13.880 --> 00:29:17.170
the site's configuration options
we can actually create

00:29:17.170 --> 00:29:18.510
our own configuration options.

00:29:18.510 --> 00:29:21.510
So the possibilities for
configuring these gadgets is

00:29:21.510 --> 00:29:24.550
actually quite limitless.

00:29:24.550 --> 00:29:27.790
And so you can see the gadget
here, so this top left one, I

00:29:27.790 --> 00:29:29.620
picked the ownership option.

00:29:29.620 --> 00:29:32.600
And that's what triggers
the display on

00:29:32.600 --> 00:29:34.100
this particular chart.

00:29:34.100 --> 00:29:39.370
And inside of the API, we can
actually see how we're

00:29:39.370 --> 00:29:40.680
describing this behavior.

00:29:40.680 --> 00:29:43.770
So we're using the
UserPref API.

00:29:43.770 --> 00:29:46.810
And so this is the code, the
actual code that we're using

00:29:46.810 --> 00:29:49.520
to display this particular
choice.

00:29:49.520 --> 00:29:53.150
So we're declaring an enum here,
the values 0 through 3.

00:29:53.150 --> 00:29:55.390
And with each one of those,
we're giving basically the

00:29:55.390 --> 00:29:57.530
name that shows up
in the UI and

00:29:57.530 --> 00:29:59.530
associating that with a value.

00:29:59.530 --> 00:30:02.590
And then when the gadget loads
we request that UserPref

00:30:02.590 --> 00:30:05.100
that's been saved.

00:30:05.100 --> 00:30:07.710
It's basically an integer
display type.

00:30:07.710 --> 00:30:09.460
And then we have a really simple
switch statement that

00:30:09.460 --> 00:30:13.290
we iterate through and pull up
the value and then trigger the

00:30:13.290 --> 00:30:18.800
right UI behavior based off of
the option that was set.

00:30:18.800 --> 00:30:21.940
And then finally let's look at
the gadget inside of Gmail.

00:30:21.940 --> 00:30:26.190
And what this will give us is
a list of tickets that are

00:30:26.190 --> 00:30:29.540
owned by the current user.

00:30:29.540 --> 00:30:31.120
And we'll just wait for
Gmail to refresh

00:30:31.120 --> 00:30:32.370
itself here really quickly.

00:30:34.780 --> 00:30:37.410
And so on the left-hand side
here, you can see I have two

00:30:37.410 --> 00:30:38.800
tickets that are currently
assigned to me.

00:30:38.800 --> 00:30:40.730
One of these is a
simple question.

00:30:40.730 --> 00:30:42.620
The second one is a
tricky question.

00:30:42.620 --> 00:30:47.380
And I've actually gone through
my inbox and triaged these

00:30:47.380 --> 00:30:49.590
here and added them to this
particular label.

00:30:49.590 --> 00:30:50.900
But let's say that I
hadn't done that.

00:30:50.900 --> 00:30:52.730
Let's say that I was just in my
inbox right now, and I want

00:30:52.730 --> 00:30:53.450
to jump to one of these.

00:30:53.450 --> 00:30:55.910
So let's click on that
little arrow there.

00:30:55.910 --> 00:30:57.800
We're going to do a little
quick search.

00:30:57.800 --> 00:31:00.300
And then we pulled up the
particular email that I'm

00:31:00.300 --> 00:31:02.300
interested in working on.

00:31:02.300 --> 00:31:03.870
That's a simple question.

00:31:03.870 --> 00:31:04.600
That sounds fine.

00:31:04.600 --> 00:31:06.450
We'll click on this here.

00:31:06.450 --> 00:31:07.890
And we can work on that one.

00:31:07.890 --> 00:31:09.940
So I'll accept this one.

00:31:09.940 --> 00:31:11.040
And that's done.

00:31:11.040 --> 00:31:12.120
I'll work on that later.

00:31:12.120 --> 00:31:14.990
Let's look at this
other one here.

00:31:14.990 --> 00:31:16.520
And we can actually look at--

00:31:16.520 --> 00:31:18.970
the question shows up inside
of the subject line here.

00:31:18.970 --> 00:31:21.620
That's a tricky question,
does P equal NP?

00:31:21.620 --> 00:31:23.950
Well, that sounds
kind of hard.

00:31:23.950 --> 00:31:26.410
So I'm actually not going
to work on that.

00:31:26.410 --> 00:31:30.400
I'm going to unassign it, pass
it to my colleague, and just

00:31:30.400 --> 00:31:31.560
forget that that
one's in there.

00:31:31.560 --> 00:31:34.420
So we'll come back to
that one later.

00:31:34.420 --> 00:31:36.770
So you can see, I've basically
done the entire triaging

00:31:36.770 --> 00:31:38.840
process of all these incoming
tickets that are assigned to

00:31:38.840 --> 00:31:40.780
me just from inside
of my inbox.

00:31:40.780 --> 00:31:43.130
I didn't have to jump
over to another app.

00:31:43.130 --> 00:31:44.470
I can do all of that
here without

00:31:44.470 --> 00:31:45.720
interrupting my workflow.

00:31:49.200 --> 00:31:51.200
And actually, one more thing
that I'll show you here just

00:31:51.200 --> 00:31:55.460
as another little teaser for
contextual gadgets, I can

00:31:55.460 --> 00:31:58.210
actually jump into
one of these.

00:31:58.210 --> 00:32:01.370
And you notice this is being
triggered on the particular

00:32:01.370 --> 00:32:02.230
mailing list here.

00:32:02.230 --> 00:32:05.250
So this is my mail queue.

00:32:05.250 --> 00:32:07.880
And so I have a contextual
gadget installed that will

00:32:07.880 --> 00:32:10.440
actually look for messages
sent to that alias.

00:32:10.440 --> 00:32:13.010
And when those messages come in,
if I happen to open them

00:32:13.010 --> 00:32:15.520
inside of my inbox it actually
triggers this particular

00:32:15.520 --> 00:32:16.770
gadget to show up
at the bottom.

00:32:16.770 --> 00:32:19.800
So I can see here that
this is unassigned.

00:32:19.800 --> 00:32:22.330
And actually, why don't I
assign that to one of my

00:32:22.330 --> 00:32:23.730
colleagues, too?

00:32:23.730 --> 00:32:26.480
So now it's actually
taken care of.

00:32:26.480 --> 00:32:29.050
And if I go back to the search
results, I can actually remove

00:32:29.050 --> 00:32:30.590
this for my queue.

00:32:30.590 --> 00:32:31.830
And it's been completely
triaged.

00:32:31.830 --> 00:32:35.230
So I've actually gone in,
assigned an owner inside of

00:32:35.230 --> 00:32:39.090
the inbox, removed a label, and
now it wouldn't even show

00:32:39.090 --> 00:32:41.310
up inside of my followup without
ever having to leave

00:32:41.310 --> 00:32:43.350
my inbox at all.

00:32:43.350 --> 00:32:46.200
And on this particular one,
I can actually shoot

00:32:46.200 --> 00:32:48.440
off a reply as well.

00:32:48.440 --> 00:32:51.100
So I'll say, well, "what is the
airspeed velocity of an

00:32:51.100 --> 00:32:53.630
unladen swallow?" I can answer
this with a question.

00:32:53.630 --> 00:33:01.440
"African or European?"
Send that off.

00:33:01.440 --> 00:33:06.820
And I can mark it as resolved,
and I'm done.

00:33:06.820 --> 00:33:08.610
So I haven't had to
leave my inbox.

00:33:08.610 --> 00:33:10.870
And I've actually entered the
ticket, gone through the

00:33:10.870 --> 00:33:13.840
entire workflow of working on
one of these tickets that's

00:33:13.840 --> 00:33:16.560
come into my inbox without ever
having to leave, without

00:33:16.560 --> 00:33:18.450
ever having to go to one
of these other apps.

00:33:18.450 --> 00:33:20.770
So if you're interested on how
I wrote that app, again I'd

00:33:20.770 --> 00:33:22.845
encourage you to come
to the talk later.

00:33:25.610 --> 00:33:28.760
Finally, let's talk about the
application manifest.

00:33:28.760 --> 00:33:32.640
So this is based on the context
of being part of a

00:33:32.640 --> 00:33:34.260
Google Apps Marketplace
application.

00:33:34.260 --> 00:33:36.950
So for doing things like
adding a link into the

00:33:36.950 --> 00:33:40.900
universal navigation or
whitelisting for OpenID, this

00:33:40.900 --> 00:33:44.090
is basically the small set of
lines that you need to add to

00:33:44.090 --> 00:33:47.750
one of those manifests
in order to have

00:33:47.750 --> 00:33:48.490
those features work.

00:33:48.490 --> 00:33:51.580
And then gadgets are not
currently installable via the

00:33:51.580 --> 00:33:53.660
marketplace, except for
contextual gadgets.

00:33:53.660 --> 00:33:55.240
But we're hoping
on having those

00:33:55.240 --> 00:33:56.780
extensions available soon.

00:33:56.780 --> 00:33:59.020
So you'd have a couple more
lines here if you want to add

00:33:59.020 --> 00:34:03.190
a sidebar gadget in Gmail or a
sidebar gadget in Calendar or

00:34:03.190 --> 00:34:06.740
a gadget in Sites.

00:34:06.740 --> 00:34:10.330
So hopefully I've convinced you
all to get started writing

00:34:10.330 --> 00:34:12.590
these gadgets for yourself.

00:34:12.590 --> 00:34:14.980
And so we have developer
documentation on all these

00:34:14.980 --> 00:34:16.469
different types of gadgets--

00:34:16.469 --> 00:34:21.060
Gmail gadgets, both contextual
and Sidebar, Calendar gadgets,

00:34:21.060 --> 00:34:23.270
Sites gadgets, and some
documentation on the

00:34:23.270 --> 00:34:24.290
marketplace.

00:34:24.290 --> 00:34:27.110
And we have a developer forum
for these gadgets as well.

00:34:27.110 --> 00:34:29.270
So if you have any questions on
writing gadgets for Google

00:34:29.270 --> 00:34:32.258
apps, I'd encourage
you to go here.

00:34:32.258 --> 00:34:34.340
I'll give you a second if you
want to copy that down.

00:34:34.340 --> 00:34:38.050
There's also links to that from
each of these developer

00:34:38.050 --> 00:34:39.220
sites, too.

00:34:39.220 --> 00:34:42.210
It's fairly easy to find.

00:34:42.210 --> 00:34:46.679
And like I said, other talks,
Contextual Gadgets today in

00:34:46.679 --> 00:34:48.480
this room at 4:45.

00:34:48.480 --> 00:34:50.530
And then I'd encourage all of
you to look at the other

00:34:50.530 --> 00:34:53.510
enterprise talks that are
available when they're posted

00:34:53.510 --> 00:34:56.070
on the Google I/O if you weren't
fortunate enough to

00:34:56.070 --> 00:34:58.050
see them already.

00:34:58.050 --> 00:35:01.080
And so now I think it's
time for questions.

00:35:01.080 --> 00:35:02.950
I'll switch over to
the Wave here.

00:35:02.950 --> 00:35:05.420
I'll give you all a second if
you want to open this up, too.

00:35:08.120 --> 00:35:12.470
And have the Firefox.

00:35:12.470 --> 00:35:13.220
All right, excellent.

00:35:13.220 --> 00:35:14.410
So we have some questions
already.

00:35:14.410 --> 00:35:17.480
And if anyone else has live
questions you can feel free to

00:35:17.480 --> 00:35:18.440
come up to one of the mics.

00:35:18.440 --> 00:35:21.600
And I'll hopefully answer
whatever burning

00:35:21.600 --> 00:35:23.480
questions you have.

00:35:23.480 --> 00:35:26.280
We'll start with one of the
Moderator questions, though.

00:35:26.280 --> 00:35:28.680
So "we have Google Sites for our
corporate domain, so all

00:35:28.680 --> 00:35:30.720
of our users have already
logged in.

00:35:30.720 --> 00:35:33.636
Is there any other way to pass
the username to a gadget so we

00:35:33.636 --> 00:35:35.090
can give them customized
content?"

00:35:35.090 --> 00:35:36.420
Yes, OK, excellent.

00:35:36.420 --> 00:35:38.900
So hopefully I've partially
answered

00:35:38.900 --> 00:35:40.040
this particular question.

00:35:40.040 --> 00:35:42.320
So this is a type of single
sign-on that you'd like to do

00:35:42.320 --> 00:35:43.690
inside of a gadget.

00:35:43.690 --> 00:35:46.770
And the easiest way to do
that is with OpenID.

00:35:46.770 --> 00:35:52.280
And you can have OpenID turned
on for any Google Apps domain.

00:35:52.280 --> 00:35:55.400
And so it's basically the
process that I outlined.

00:35:55.400 --> 00:35:57.180
So you would load the gadget.

00:35:57.180 --> 00:36:00.840
You'd have it send a request for
the OpenSocial ID to your

00:36:00.840 --> 00:36:02.970
server that you've configured.

00:36:02.970 --> 00:36:07.850
You'd save that ID in whatever
user's table you have.

00:36:07.850 --> 00:36:10.800
And if you can then associate
that with your data, you're

00:36:10.800 --> 00:36:11.350
good to go.

00:36:11.350 --> 00:36:14.650
If not, walk through
the OpenID flow.

00:36:14.650 --> 00:36:17.520
And then pass that basically
back into your database.

00:36:17.520 --> 00:36:21.050
So you have the user signed
in once using OpenID.

00:36:21.050 --> 00:36:24.130
If they're already logged into
Google Sites, they won't need

00:36:24.130 --> 00:36:26.570
to log in again.

00:36:26.570 --> 00:36:29.270
And more importantly, if
you've installed this

00:36:29.270 --> 00:36:32.480
application through the Google
Apps Marketplace, there's

00:36:32.480 --> 00:36:33.100
whitelisting.

00:36:33.100 --> 00:36:36.280
So you won't even need to
walk through the flow.

00:36:36.280 --> 00:36:38.610
The pop-up window will open,
do a couple automatic

00:36:38.610 --> 00:36:41.300
redirections, and then
you're done.

00:36:41.300 --> 00:36:43.060
So yes, this is very possible.

00:36:43.060 --> 00:36:46.400
And hopefully my explanation of
this has been sufficient.

00:36:46.400 --> 00:36:52.150
If not, feel free to come up to
me after, if you're here.

00:36:52.150 --> 00:36:54.060
I'll take a live question.

00:36:54.060 --> 00:36:55.960
AUDIENCE: I'm just wondering
about the

00:36:55.960 --> 00:36:58.070
monetization of this.

00:36:58.070 --> 00:37:02.690
In the gadget API terms of
service, it says that you

00:37:02.690 --> 00:37:05.160
can't sell a gadget.

00:37:05.160 --> 00:37:07.310
DAN HOLEVOET: So is
this the generic

00:37:07.310 --> 00:37:09.560
gadgets terms of service?

00:37:09.560 --> 00:37:11.640
AUDIENCE: I believe so.

00:37:11.640 --> 00:37:13.970
DAN HOLEVOET: I'd have to look
into the particular thing that

00:37:13.970 --> 00:37:14.420
it's showing there.

00:37:14.420 --> 00:37:16.980
So right now because these
aren't part of the Google Apps

00:37:16.980 --> 00:37:20.670
Marketplace, it could
be out of date.

00:37:20.670 --> 00:37:22.770
I'm sure it could stand
to be updated for

00:37:22.770 --> 00:37:24.310
this particular context.

00:37:24.310 --> 00:37:25.540
AUDIENCE: It's just--

00:37:25.540 --> 00:37:27.470
we're very interested
in pursuing this.

00:37:27.470 --> 00:37:30.846
But as you can imagine, if you
can't get paid for it, it's--

00:37:30.846 --> 00:37:31.740
DAN HOLEVOET: Yep.

00:37:31.740 --> 00:37:32.040
AUDIENCE: OK.

00:37:32.040 --> 00:37:36.910
So how does one follow
up on that?

00:37:36.910 --> 00:37:38.440
DAN HOLEVOET: I'll give you
my email address after.

00:37:38.440 --> 00:37:38.970
AUDIENCE: OK.

00:37:38.970 --> 00:37:40.100
That'd be great.

00:37:40.100 --> 00:37:43.370
And then the other thing is
just about stripping the

00:37:43.370 --> 00:37:46.810
Google identifications,
all of that off.

00:37:46.810 --> 00:37:49.750
Apparently, you can't do that
either under the terms of

00:37:49.750 --> 00:37:52.590
service, under the terms of the
ad Google button, and all

00:37:52.590 --> 00:37:54.360
that kind of stuff.

00:37:54.360 --> 00:37:56.560
DAN HOLEVOET: So that's mostly
in the context of syndicated

00:37:56.560 --> 00:37:59.550
gadgets and not so much a gadget
that's living inside of

00:37:59.550 --> 00:38:00.480
Sites or Gmail.

00:38:00.480 --> 00:38:01.910
AUDIENCE: But there's
no distinction in

00:38:01.910 --> 00:38:03.080
the terms of service.

00:38:03.080 --> 00:38:03.400
DAN HOLEVOET: Right.

00:38:03.400 --> 00:38:06.320
So like I said, they could
probably stand to be updated

00:38:06.320 --> 00:38:10.510
for the marketplace and
all of that context.

00:38:10.510 --> 00:38:13.396
So I'll make sure that we get
a lawyer to look at it.

00:38:13.396 --> 00:38:14.646
AUDIENCE: OK, thanks a lot.

00:38:16.990 --> 00:38:17.340
AUDIENCE: Hello.

00:38:17.340 --> 00:38:19.020
I have one single question.

00:38:19.020 --> 00:38:24.230
Is it possible to parse the
content of an email and to use

00:38:24.230 --> 00:38:26.910
it within a gadget?

00:38:26.910 --> 00:38:28.440
DAN HOLEVOET: I guess the
question is related to

00:38:28.440 --> 00:38:29.860
contextual gadgets?

00:38:29.860 --> 00:38:32.310
AUDIENCE: Right.

00:38:32.310 --> 00:38:35.740
DAN HOLEVOET: My talk will
expand a little bit on that.

00:38:35.740 --> 00:38:38.050
It is sort of possible.

00:38:38.050 --> 00:38:40.560
It really depends.

00:38:40.560 --> 00:38:43.770
The contextual gadget will
basically request access to

00:38:43.770 --> 00:38:46.970
particular parts of the email.

00:38:46.970 --> 00:38:49.660
And so one of those parts would
be the message body.

00:38:49.660 --> 00:38:52.260
And so assuming that the domain
administrator has

00:38:52.260 --> 00:38:55.150
approved access for your
particular gadget to look at

00:38:55.150 --> 00:38:58.980
that part of the email,
you then could do

00:38:58.980 --> 00:39:02.070
some parsing of it.

00:39:02.070 --> 00:39:04.340
Generally we wouldn't want
these gadgets to match on

00:39:04.340 --> 00:39:05.540
every single email message.

00:39:05.540 --> 00:39:09.200
So you'd be matching on some
other piece of content before

00:39:09.200 --> 00:39:10.190
looking at the email body.

00:39:10.190 --> 00:39:12.450
But yes, it is possible
if the domain

00:39:12.450 --> 00:39:14.030
administrator approves it.

00:39:14.030 --> 00:39:14.550
AUDIENCE: Thanks.

00:39:14.550 --> 00:39:16.690
DAN HOLEVOET: Yep.

00:39:16.690 --> 00:39:17.990
Live question?

00:39:17.990 --> 00:39:19.950
Yeah.

00:39:19.950 --> 00:39:21.710
AUDIENCE: You've mentioned a lot
about contextual gadgets

00:39:21.710 --> 00:39:26.000
and the domain administrators
and marketplace and whatnot.

00:39:26.000 --> 00:39:28.980
Are there any plans to make
contextual gadgets available

00:39:28.980 --> 00:39:30.940
to regular Gmail accounts?

00:39:30.940 --> 00:39:32.860
DAN HOLEVOET: We're thinking
about ways that we could do

00:39:32.860 --> 00:39:34.210
that right now, but we don't
have anything in

00:39:34.210 --> 00:39:35.940
particular to announce.

00:39:35.940 --> 00:39:37.890
AUDIENCE: Thanks.

00:39:37.890 --> 00:39:41.940
DAN HOLEVOET: We'll do the rest
of the questions here.

00:39:41.940 --> 00:39:44.890
"Will third-party gadgets ever
be able to open docked

00:39:44.890 --> 00:39:48.050
overlays in Google Apps like
the gTalk chat windows in

00:39:48.050 --> 00:39:48.350
Gmail?"

00:39:48.350 --> 00:39:50.450
That's an excellent question.

00:39:50.450 --> 00:39:53.830
Unfortunately, I don't know
the answer to that.

00:39:53.830 --> 00:39:55.650
So I'm going to have to
punt on that one.

00:39:55.650 --> 00:39:58.085
Is the person who asked that
here, by any chance?

00:39:58.085 --> 00:39:58.440
Yes.

00:39:58.440 --> 00:39:58.900
OK.

00:39:58.900 --> 00:40:00.430
Follow up with me after,
and I'll give

00:40:00.430 --> 00:40:02.680
you my email address.

00:40:02.680 --> 00:40:06.360
"When will Apps Marketplace apps
to be able to deployed

00:40:06.360 --> 00:40:08.270
Gmail sidebar gadgets?"

00:40:08.270 --> 00:40:11.970
So we don't have the exact
answer to this one right now.

00:40:11.970 --> 00:40:13.380
We really want to do this.

00:40:13.380 --> 00:40:15.040
And I can say that
it's coming.

00:40:15.040 --> 00:40:16.400
But I don't know exactly when.

00:40:16.400 --> 00:40:19.250
So it's definitely something
that people are interested in.

00:40:19.250 --> 00:40:21.210
We definitely want to do it.

00:40:21.210 --> 00:40:24.080
There's some particular UI
issues that we're looking at.

00:40:24.080 --> 00:40:28.160
So if you happen to have, let's
say, 10 sidebar gadgets

00:40:28.160 --> 00:40:30.530
installed, those are all going
to run down the left side.

00:40:30.530 --> 00:40:32.610
We want to make sure that's a
good user experience before we

00:40:32.610 --> 00:40:34.130
turn this on for everyone.

00:40:34.130 --> 00:40:35.990
So that's one of the
things that we're

00:40:35.990 --> 00:40:37.870
still thinking about.

00:40:37.870 --> 00:40:40.740
And the final question-- "How
does the gadget API compared

00:40:40.740 --> 00:40:44.930
to iWidget, and are both
the open standard?"

00:40:44.930 --> 00:40:46.970
I'm not that familiar
with iWidget.

00:40:46.970 --> 00:40:49.925
I looked into it a little bit
before the talk, because I saw

00:40:49.925 --> 00:40:52.740
this question was in here.

00:40:52.740 --> 00:40:55.400
At some level, I think they're
fairly similar.

00:40:55.400 --> 00:40:58.860
They're both basically HTML and
JavaScript living inside

00:40:58.860 --> 00:41:00.460
of another app.

00:41:00.460 --> 00:41:02.810
So in that particular sense,
they're the same.

00:41:02.810 --> 00:41:07.540
I don't know about iWidget's
open source, whether that's

00:41:07.540 --> 00:41:09.180
been open sourced or not.

00:41:09.180 --> 00:41:12.730
All the gadgets that I talked
about today are based on the

00:41:12.730 --> 00:41:14.585
OpenSocial spec, which
is an open standard.

00:41:17.330 --> 00:41:20.990
The standard implementation of
this, the reference container,

00:41:20.990 --> 00:41:23.460
I guess, is Apache Shindig.

00:41:23.460 --> 00:41:27.680
And that's an Apache project,
which is also open sourced.

00:41:27.680 --> 00:41:29.880
So you can feel free to
look at this spec.

00:41:29.880 --> 00:41:31.970
And all the code for running
one of these

00:41:31.970 --> 00:41:34.160
gadgets, that's all open.

00:41:34.160 --> 00:41:37.780
So as far this is concerned,
this gadget

00:41:37.780 --> 00:41:39.280
API is an open standard.

00:41:39.280 --> 00:41:41.620
I don't know if it's
the open standard.

00:41:41.620 --> 00:41:43.862
But it is certainly
an open standard.

00:41:43.862 --> 00:41:47.270
Any other questions?

00:41:47.270 --> 00:41:48.260
OK.

00:41:48.260 --> 00:41:50.120
Well thank you all for coming.

00:41:50.120 --> 00:41:51.370
[APPLAUSE]

