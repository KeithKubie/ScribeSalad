WEBVTT
Kind: captions
Language: en

00:00:01.270 --> 00:00:04.590
An alternative to dumping code into the kernel, is

00:00:04.590 --> 00:00:07.320
to leave the stub in the users piece itself.

00:00:07.320 --> 00:00:11.890
But have a structured mechanism, for communication between the

00:00:11.890 --> 00:00:15.880
client stub and the kernel. And that structured mechanism is

00:00:15.880 --> 00:00:18.648
a shared descriptor. And the shared descriptor, is a

00:00:18.648 --> 00:00:21.180
way by a which the sub can describe to the

00:00:21.180 --> 00:00:23.830
kernel that here is some stuff sitting in the

00:00:23.830 --> 00:00:26.640
user space. And I am going to tell you how exactly

00:00:26.640 --> 00:00:30.180
you can extract this information, from the user space

00:00:30.180 --> 00:00:34.820
and construct it into this buffer for transmission on

00:00:34.820 --> 00:00:37.140
the wire. Recall what I told you earlier and

00:00:37.140 --> 00:00:40.100
that is the kernel has no idea, of the semantics

00:00:40.100 --> 00:00:43.100
of this call and therefore, it has no knowledge

00:00:43.100 --> 00:00:46.210
of the actual arguments. The data structures that are

00:00:46.210 --> 00:00:48.510
being used in the call. So what we're going to

00:00:48.510 --> 00:00:52.220
do is use the shared descriptor as a vehicle for

00:00:52.220 --> 00:00:55.760
the stub to communicate to the kernel the data structures

00:00:55.760 --> 00:00:58.570
that need to be passed. So for instance, let's say

00:00:58.570 --> 00:01:03.080
that the argument for the call has four parameters. Then

00:01:03.080 --> 00:01:06.870
this descriptor has four entries, and each entry is saying,

00:01:06.870 --> 00:01:10.680
this is a starting point of a particular Data item,

00:01:10.680 --> 00:01:12.550
and this is the length of the data item. This

00:01:12.550 --> 00:01:15.180
is the starting point of the second data item, and

00:01:15.180 --> 00:01:17.350
this is the length of the data item. Third data

00:01:17.350 --> 00:01:20.880
item, fourth data item. Kernel doesn't have to know the semantics

00:01:20.880 --> 00:01:23.730
of these data items. All it needs to know is, what

00:01:23.730 --> 00:01:26.540
is the starting address for a particular data item, and what

00:01:26.540 --> 00:01:28.640
is the length of the data item. That's all it needs to

00:01:28.640 --> 00:01:32.770
know. And this is the descriptor that. Allows the stub to

00:01:32.770 --> 00:01:37.590
inform the kernel about the arguments, how many arguments there are

00:01:37.590 --> 00:01:40.290
and what are the size of each argument. It doesn't have

00:01:40.290 --> 00:01:42.610
to tell the kernel, oh, here is an integer, here's a floating

00:01:42.610 --> 00:01:45.240
point, here's an array. No, none of that. All

00:01:45.240 --> 00:01:48.000
that the stub is doing is, it's saying. Here is

00:01:48.000 --> 00:01:50.180
the starting address for an argument, and here is the

00:01:50.180 --> 00:01:54.690
length of that argument. Because usually data structures are organized

00:01:54.690 --> 00:01:57.860
contiguously, so if you have a, an integer, it is

00:01:57.860 --> 00:02:01.900
occupying full contiguous bytes and memory. If you have floating

00:02:01.900 --> 00:02:04.870
point number, it is occupying some number of contiguous bytes

00:02:04.870 --> 00:02:07.680
in memory, and therefore. What the stub is doing is,

00:02:07.680 --> 00:02:11.550
is creating the shared descriptor that is providing the

00:02:11.550 --> 00:02:14.675
information of the kernel in the layer of the

00:02:14.675 --> 00:02:17.670
arguments on the stack, and once the layer of

00:02:17.670 --> 00:02:20.230
the arguments and the stack are known to the kernel,

00:02:20.230 --> 00:02:23.780
then the kernel can use these contiguous data items.

00:02:23.780 --> 00:02:26.330
That are living on the stack, describe the shared

00:02:26.330 --> 00:02:30.110
descriptor, and create a contiguous packet in its internal

00:02:30.110 --> 00:02:32.760
buffer. That's a second way you can do, in order

00:02:32.760 --> 00:02:35.330
to reduce the number of copies from two to

00:02:35.330 --> 00:02:37.520
one. So in both cases, what we have done

00:02:37.520 --> 00:02:40.360
is either the first approach of pushing the client

00:02:40.360 --> 00:02:43.730
stub into the kernel or the second approach of having

00:02:43.730 --> 00:02:47.270
a shared descriptor between the user stub, which is

00:02:47.270 --> 00:02:51.525
living. In user space and the kernel in order to

00:02:51.525 --> 00:02:54.980
describe the layout of the data structures, that need

00:02:54.980 --> 00:02:58.130
to be assembled into a data packet by the kernel

00:02:58.130 --> 00:03:01.050
using the shared descriptor. Both of these allow

00:03:01.050 --> 00:03:03.500
us to reduce the number of copies from

00:03:03.500 --> 00:03:06.650
three down to two. Either the one copy

00:03:06.650 --> 00:03:09.670
that is happening Going from this stack into the

00:03:09.670 --> 00:03:12.100
kernel buffer and this second copy, as I

00:03:12.100 --> 00:03:16.660
said, is unavailable if the network controller is

00:03:16.660 --> 00:03:19.840
requiring DMA to be done from the system

00:03:19.840 --> 00:03:23.290
memory into its internal buffer before the bits can

00:03:23.290 --> 00:03:25.150
be pushed out of the wire. So that's the

00:03:25.150 --> 00:03:29.350
first source of overhead, these are techniques that we

00:03:29.350 --> 00:03:32.920
have looked at. Two differnet techniquest for reducign the

00:03:32.920 --> 00:03:36.690
copying overhead that is the dominate part of marshalling

00:03:36.690 --> 00:03:39.530
the arguments. And this happens on both sides. It

00:03:39.530 --> 00:03:42.670
happens when the client has to push the arguments

00:03:42.670 --> 00:03:45.310
to the server side. And it happens again on

00:03:45.310 --> 00:03:48.400
the server side when the server has to push

00:03:48.400 --> 00:03:52.000
the results back to the client. So the marshalling is happening on both

00:03:52.000 --> 00:03:56.680
ends, and for both ends we can Use this technique of using a

00:03:56.680 --> 00:04:01.430
shared descriptor or pushing the clients dub or the service dub into the

00:04:01.430 --> 00:04:05.650
kernel in order to reduce the number of copies from two down to one.

