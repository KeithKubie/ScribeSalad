WEBVTT
Kind: captions
Language: en

00:00:00.886 --> 00:00:03.770
ADAM CHAMPY: Hello
and good morning.

00:00:03.770 --> 00:00:06.010
My name is Adam Champy,
and I'm the product lead

00:00:06.010 --> 00:00:08.540
on the Google Cast SDK.

00:00:08.540 --> 00:00:10.370
And I figure since
it's 9:00 a.m.

00:00:10.370 --> 00:00:12.010
On a Friday, it's
pretty appropriate

00:00:12.010 --> 00:00:15.040
to talk about what most people
do in the evening, which

00:00:15.040 --> 00:00:17.450
is connect to entertainment.

00:00:17.450 --> 00:00:20.287
And for those of you who
were partying last night

00:00:20.287 --> 00:00:21.870
or out the night
before as well, thank

00:00:21.870 --> 00:00:25.560
you very much for getting
up early to join us today.

00:00:25.560 --> 00:00:27.910
I'm first going to talk
about the next generation,

00:00:27.910 --> 00:00:32.900
and this is my son, who
apparently really loves TV.

00:00:32.900 --> 00:00:35.170
And my wife and I
literally bought

00:00:35.170 --> 00:00:39.040
a device that tried to keep
him staring away from the TV.

00:00:39.040 --> 00:00:40.100
But he's evolved.

00:00:40.100 --> 00:00:44.900
He's learned to watch content
pretty much in any position.

00:00:44.900 --> 00:00:47.160
But what's tricky
for us-- we hope

00:00:47.160 --> 00:00:48.850
he doesn't love TV
as much as I do.

00:00:48.850 --> 00:00:51.260
Honestly, I love
watching sports.

00:00:51.260 --> 00:00:55.280
I love watching the Daily
Show, casting the Daily Show.

00:00:55.280 --> 00:00:56.970
I love watching the Red Sox.

00:00:56.970 --> 00:00:59.899
I live on the West Coast, so the
way I connect with the Red Sox,

00:00:59.899 --> 00:01:01.690
which is a baseball
team on the East Coast,

00:01:01.690 --> 00:01:03.280
is through the MLB app.

00:01:03.280 --> 00:01:05.179
I also love watching
the Boston Celtics.

00:01:05.179 --> 00:01:07.720
I especially like watching the
Boston Celtics beat the Golden

00:01:07.720 --> 00:01:10.967
State Warriors, which are one
of the only teams to do that.

00:01:10.967 --> 00:01:11.986
AUDIENCE: Boo.

00:01:11.986 --> 00:01:13.360
ADAM CHAMPY: But
you know, I have

00:01:13.360 --> 00:01:15.030
to take-- they're out of
the playoffs right now,

00:01:15.030 --> 00:01:16.821
but the Warriors are
still in the playoffs.

00:01:16.821 --> 00:01:19.210
So they're doing kind of well.

00:01:19.210 --> 00:01:21.730
But the experience
that we have around

00:01:21.730 --> 00:01:24.390
the media I'm talking
about, a lot of it

00:01:24.390 --> 00:01:27.640
is driven by how we
connect to that media.

00:01:27.640 --> 00:01:30.230
I like to watch the
Red Sox wherever I am.

00:01:30.230 --> 00:01:32.670
I like to watch The Daily
Show if I'm traveling

00:01:32.670 --> 00:01:33.570
or on the road.

00:01:33.570 --> 00:01:37.030
I connect to that experience
via apps on my mobile devices,

00:01:37.030 --> 00:01:39.330
my tablet or my phone.

00:01:39.330 --> 00:01:41.930
And I also love that
experience of extending it

00:01:41.930 --> 00:01:44.140
onto the most beautiful
displays in my home,

00:01:44.140 --> 00:01:47.370
including the Visio P
series that's on the wall.

00:01:47.370 --> 00:01:50.187
And this experience is
driven by Google Cast,

00:01:50.187 --> 00:01:52.270
and that's what I'm going
to spend a bunch of time

00:01:52.270 --> 00:01:54.030
today talking about.

00:01:54.030 --> 00:01:57.120
And that experience is connected
to these larger screens

00:01:57.120 --> 00:01:59.007
through what we call
the Cast button.

00:01:59.007 --> 00:02:01.090
And I'll take you through
a little bit of the Cast

00:02:01.090 --> 00:02:04.140
experience so that you're more
familiar with it for those

00:02:04.140 --> 00:02:05.580
of you who aren't.

00:02:05.580 --> 00:02:08.270
The Cast button
is a single button

00:02:08.270 --> 00:02:11.650
that's added to any one
of the existing apps that

00:02:11.650 --> 00:02:15.750
play media, video, or
audio that extends media

00:02:15.750 --> 00:02:20.510
to the large screen, to extender
devices like Chromecast, cast

00:02:20.510 --> 00:02:24.940
TVs, or Android TVs, as
well as audio devices.

00:02:24.940 --> 00:02:28.230
So you can connect to
speakers in your home,

00:02:28.230 --> 00:02:30.670
integrated speakers, or
cast for audio products,

00:02:30.670 --> 00:02:33.720
or Chromecast audio, which
extends the audio experience

00:02:33.720 --> 00:02:35.510
to your existing speakers.

00:02:35.510 --> 00:02:38.640
And this is just a simple
press of the Cast button that

00:02:38.640 --> 00:02:42.900
connects to this larger home.

00:02:42.900 --> 00:02:45.050
We've enabled thousands of apps.

00:02:45.050 --> 00:02:47.440
So for the end consumer,
this is awesome.

00:02:47.440 --> 00:02:51.010
The apps they already have on
their phone or the tablet work.

00:02:51.010 --> 00:02:53.100
They don't have to
do anything else.

00:02:53.100 --> 00:02:55.590
For the developer,
this is what we're

00:02:55.590 --> 00:02:56.720
going to talk about today.

00:02:56.720 --> 00:02:58.710
And we're going to
talk about specifically

00:02:58.710 --> 00:03:01.750
if you want to become
one of these apps,

00:03:01.750 --> 00:03:04.880
or if you already are, what we
have in store in our new Google

00:03:04.880 --> 00:03:06.590
Cast SDK.

00:03:06.590 --> 00:03:09.324
And what's awesome about
this is it's also just going

00:03:09.324 --> 00:03:11.240
to be fun today for if
you're just curious how

00:03:11.240 --> 00:03:14.270
all this magic works.

00:03:14.270 --> 00:03:17.450
We're very proud to launch
the new Google Cast SDK

00:03:17.450 --> 00:03:19.920
and build in a ton
of the knowledge

00:03:19.920 --> 00:03:23.150
that we've gained over the
past two or three years on how

00:03:23.150 --> 00:03:25.620
to get this interaction right.

00:03:25.620 --> 00:03:27.710
Some of the goals that
we have for this new SDK

00:03:27.710 --> 00:03:30.410
are to improve that
user experience,

00:03:30.410 --> 00:03:34.340
to make that simple button
press work beautifully,

00:03:34.340 --> 00:03:37.590
to make the connection between a
mobile phone and the big screen

00:03:37.590 --> 00:03:42.500
or speakers 100% reliable,
wonderful in every app.

00:03:42.500 --> 00:03:44.520
And what's been
tricky in the past SDK

00:03:44.520 --> 00:03:47.870
versions is we've asked
you the developers to take

00:03:47.870 --> 00:03:50.860
on a lot of that burden,
and I talked a little bit

00:03:50.860 --> 00:03:52.390
about this on the
Wednesday talk.

00:03:52.390 --> 00:03:54.080
We're going to go
in a ton more detail

00:03:54.080 --> 00:03:58.820
and actually cast enable all
the way through media an app.

00:03:58.820 --> 00:04:00.780
And what's great
about the new SDK

00:04:00.780 --> 00:04:04.140
is that in what we've done
to implement the entire UX--

00:04:04.140 --> 00:04:07.530
And sometimes we call this
the Cast UX guidelines--

00:04:07.530 --> 00:04:09.760
is that we've
provided almost all

00:04:09.760 --> 00:04:14.760
of the elements of that
UX checklist in the SDK.

00:04:14.760 --> 00:04:18.959
You have a default or built-in
behavior for every single one

00:04:18.959 --> 00:04:20.000
of the elements.

00:04:20.000 --> 00:04:21.750
And what's great about
this is this really

00:04:21.750 --> 00:04:24.050
should reduce development time.

00:04:24.050 --> 00:04:25.550
And to not just
take my word for it,

00:04:25.550 --> 00:04:27.810
we've been having a small
early access program

00:04:27.810 --> 00:04:32.100
to get feedback on this, to
see how the developers react.

00:04:32.100 --> 00:04:36.470
And we're getting feedback that
on a first time development,

00:04:36.470 --> 00:04:41.690
the new SDK reduces initial
development time by about 40%,

00:04:41.690 --> 00:04:43.279
which is pretty large.

00:04:43.279 --> 00:04:45.070
What's also great is
that we've implemented

00:04:45.070 --> 00:04:47.300
the right abstractions,
and we're getting feedback

00:04:47.300 --> 00:04:49.770
that they're at the right
level, such that maintenance

00:04:49.770 --> 00:04:53.700
on our side and on the app side
should be much, much easier.

00:04:53.700 --> 00:04:56.730
In particular, on the
iOS side of the SDK.

00:04:56.730 --> 00:04:58.420
On Android, we had
built something

00:04:58.420 --> 00:05:01.430
called the CCL or the
Cast Companion Library,

00:05:01.430 --> 00:05:05.430
and that had informed us a lot
of what to do going forward.

00:05:05.430 --> 00:05:07.810
So we incorporated those
learnings as well as

00:05:07.810 --> 00:05:11.792
other technologies into the
new SDK for Android and iOS,

00:05:11.792 --> 00:05:13.750
and we'll talk through
a lot more of the detail

00:05:13.750 --> 00:05:16.340
in a few minutes.

00:05:16.340 --> 00:05:19.670
For those of you who are new
to the Cast development model,

00:05:19.670 --> 00:05:23.340
there's essentially four
major steps of Cast.

00:05:23.340 --> 00:05:25.450
The first is discovery.

00:05:25.450 --> 00:05:27.930
How does a mobile
device find out

00:05:27.930 --> 00:05:30.560
if there's a Chromecast
or an Android TV

00:05:30.560 --> 00:05:33.240
or a Cast TV or a cast
for audio speaker?

00:05:33.240 --> 00:05:34.925
The next stage is
actually casting

00:05:34.925 --> 00:05:36.550
where the user presses
that Cast button

00:05:36.550 --> 00:05:39.590
and says I actually want
to make a connection.

00:05:39.590 --> 00:05:42.330
And the app has to negotiate
that connection and launch

00:05:42.330 --> 00:05:44.900
what's called a receiver
application on that cast

00:05:44.900 --> 00:05:46.220
endpoint.

00:05:46.220 --> 00:05:49.070
The third stage is control,
sending small messages

00:05:49.070 --> 00:05:51.330
in between the two endpoints.

00:05:51.330 --> 00:05:53.870
Because in the Cast
model, all of the media

00:05:53.870 --> 00:05:56.530
and all of the data really
streams from the Cloud

00:05:56.530 --> 00:05:59.930
to the Cast endpoint, making
the phone kind of just a control

00:05:59.930 --> 00:06:03.660
center, not necessarily having
any media run through it.

00:06:03.660 --> 00:06:05.500
And then if you have
to handle disconnect,

00:06:05.500 --> 00:06:07.500
handling it gracefully.

00:06:07.500 --> 00:06:10.210
The fourth is kind of
pervasive through all, which

00:06:10.210 --> 00:06:13.940
is reconnect, what happens
in between if you change

00:06:13.940 --> 00:06:14.810
Wi-Fi networks.

00:06:14.810 --> 00:06:17.600
If you have something
that changes

00:06:17.600 --> 00:06:20.390
in the status of connection
in general of your phone.

00:06:20.390 --> 00:06:22.940
And historically, reconnect
was actually really tricky,

00:06:22.940 --> 00:06:25.880
and we put a lot of the
burden in our previous SDKs

00:06:25.880 --> 00:06:29.190
on the developer to handle
it and kind of reinvent

00:06:29.190 --> 00:06:31.870
the wheel over and over there.

00:06:31.870 --> 00:06:35.570
Specifically, we
interacted with a lot

00:06:35.570 --> 00:06:40.640
of the lifecycle of your app
across these four major faces.

00:06:40.640 --> 00:06:42.720
We did that in
discovery by asking

00:06:42.720 --> 00:06:45.920
you to manage tons of
callbacks and pseudo state

00:06:45.920 --> 00:06:48.130
management of what the
user is trying to do,

00:06:48.130 --> 00:06:51.390
kind of replicating
our states in yours.

00:06:51.390 --> 00:06:54.220
In control, we essentially
made you redo this

00:06:54.220 --> 00:06:58.330
all over again by having you
create and manage, essentially,

00:06:58.330 --> 00:07:01.730
a session in your own app
that matched our session.

00:07:01.730 --> 00:07:03.970
We separated this experience.

00:07:03.970 --> 00:07:11.170
What we've done in the new SDK
is implement the right state

00:07:11.170 --> 00:07:15.140
management and the right
UX, such that we handle

00:07:15.140 --> 00:07:19.420
the specifics of Cast and the
user experience associated

00:07:19.420 --> 00:07:20.170
with it.

00:07:20.170 --> 00:07:24.570
By delivering you, essentially,
a state manager and a UX that's

00:07:24.570 --> 00:07:29.070
associated with Cast and getting
out of the details of your app.

00:07:29.070 --> 00:07:31.520
What's awesome about
this is for maintenance,

00:07:31.520 --> 00:07:35.400
we previously asked you
anytime we changed anything

00:07:35.400 --> 00:07:38.280
in that lifecycle
of Cast to change

00:07:38.280 --> 00:07:40.360
the lifecycle of your app.

00:07:40.360 --> 00:07:43.150
Especially in iOS, this
was really difficult.

00:07:43.150 --> 00:07:46.450
So even minor changes
would impact your app

00:07:46.450 --> 00:07:49.700
quite a bit in ways that
sometimes you or we didn't

00:07:49.700 --> 00:07:51.090
expect.

00:07:51.090 --> 00:07:53.360
So what we've done is
implemented the abstraction

00:07:53.360 --> 00:07:56.930
at the correct place, such
that you can do app development

00:07:56.930 --> 00:07:59.350
independent of Cast,
and we can continue

00:07:59.350 --> 00:08:03.100
to improve Cast and
deploy SDK updates that

00:08:03.100 --> 00:08:07.880
really have minor, if not
any, impact on your app.

00:08:07.880 --> 00:08:09.910
From the perspective
of migration,

00:08:09.910 --> 00:08:12.070
what's actually really
cool about this too

00:08:12.070 --> 00:08:16.160
is that migration looks a lot
more like ripping out code.

00:08:16.160 --> 00:08:18.460
It's not going
through and finding,

00:08:18.460 --> 00:08:21.790
I'm going to do it this
way here, that way here,

00:08:21.790 --> 00:08:24.200
or the new way here,
the old way here.

00:08:24.200 --> 00:08:27.570
It's actually changing
to a new model.

00:08:27.570 --> 00:08:30.130
So it's a clean migration.

00:08:30.130 --> 00:08:34.190
It's I take out this callback
and pseudo state management

00:08:34.190 --> 00:08:37.700
aspects and move over
to the new concept.

00:08:37.700 --> 00:08:39.090
And because we've
made it so easy

00:08:39.090 --> 00:08:41.490
to implement the
first time, we also

00:08:41.490 --> 00:08:43.159
believe that migrations
are going to be

00:08:43.159 --> 00:08:44.600
very straightforward as well.

00:08:44.600 --> 00:08:49.159
And we're going through a few
initial migrations right now.

00:08:49.159 --> 00:08:50.700
The new features
that we're deploying

00:08:50.700 --> 00:08:53.060
are along the lines
again of state management

00:08:53.060 --> 00:08:55.060
as well as user experience.

00:08:55.060 --> 00:08:58.770
Specifically, we're
delivering device discovery,

00:08:58.770 --> 00:09:01.180
and we're also delivering
the whole Cast session

00:09:01.180 --> 00:09:02.080
in a new way.

00:09:02.080 --> 00:09:04.280
And I'll take you
through both of these.

00:09:04.280 --> 00:09:07.330
We've also deployed a
reconnection service, which

00:09:07.330 --> 00:09:10.060
is an optional component,
but on by default.

00:09:10.060 --> 00:09:13.400
And this was familiar to those
of you who have used CCL.

00:09:13.400 --> 00:09:18.030
But it's really new and
awesome for the iOS developer.

00:09:18.030 --> 00:09:20.910
In addition to that, we're
delivering the entire Cast

00:09:20.910 --> 00:09:23.650
button and root
logic so that you

00:09:23.650 --> 00:09:25.480
don't have to worry about that.

00:09:25.480 --> 00:09:27.740
It's so specific to
the Cast experience

00:09:27.740 --> 00:09:30.960
that our SDK really
should handle all of it.

00:09:30.960 --> 00:09:33.300
And then on the next
item, we're giving you

00:09:33.300 --> 00:09:34.500
template controllers.

00:09:34.500 --> 00:09:36.250
So if you're one of
those developers who's

00:09:36.250 --> 00:09:39.820
looking at enabling
your app for Cast,

00:09:39.820 --> 00:09:42.900
this gets you started way,
way faster, whether it's just

00:09:42.900 --> 00:09:45.350
getting an MVP out the
gate or something that's

00:09:45.350 --> 00:09:47.940
really production-ready,
because these controllers take

00:09:47.940 --> 00:09:52.520
the best of our UX experience
in Cast and deliver it to you.

00:09:52.520 --> 00:09:54.580
And when I say template,
I mean that you

00:09:54.580 --> 00:09:57.880
can control what's on these
controllers and the actions

00:09:57.880 --> 00:10:00.910
that the user can take
while still being adherent

00:10:00.910 --> 00:10:03.900
to a standard that users
would understand across

00:10:03.900 --> 00:10:07.670
multiple apps, as well as
standard in iOS or Android.

00:10:07.670 --> 00:10:09.290
We've designed these
to be very native

00:10:09.290 --> 00:10:11.555
and feel wonderful in
both of those experiences.

00:10:11.555 --> 00:10:14.676
And I'll show you both of them.

00:10:14.676 --> 00:10:16.550
The first area that
we're going to start with

00:10:16.550 --> 00:10:19.560
is this concept of a
context or the singleton

00:10:19.560 --> 00:10:23.480
that unifies all of
the state management.

00:10:23.480 --> 00:10:27.760
What this does is it delivers
you a fully managed session,

00:10:27.760 --> 00:10:32.597
from discovery through the
concept of casting media.

00:10:32.597 --> 00:10:34.180
You don't have to
manage these in kind

00:10:34.180 --> 00:10:36.260
of two different
separate ways, and you

00:10:36.260 --> 00:10:40.000
don't have to deal with all
the complexities in each side.

00:10:40.000 --> 00:10:42.250
We also provide you a
reconnection service in this.

00:10:42.250 --> 00:10:44.520
Because we understand state
and because we understand

00:10:44.520 --> 00:10:47.270
the transitions, we
also understand, well,

00:10:47.270 --> 00:10:49.600
what if the connection
status has gone wrong

00:10:49.600 --> 00:10:51.700
or changed in this state.

00:10:51.700 --> 00:10:55.060
So we're able to do much
more on reconnection,

00:10:55.060 --> 00:10:57.470
and this is an area that
we can innovate in quite

00:10:57.470 --> 00:10:59.770
a bit on going forward as well.

00:10:59.770 --> 00:11:01.770
The big takeaway
from this is calls

00:11:01.770 --> 00:11:05.450
to Google API client going
forward are not needed.

00:11:05.450 --> 00:11:09.120
You don't have to make this
kind of, again, pseudo state

00:11:09.120 --> 00:11:11.840
management in your app
as well as kind of figure

00:11:11.840 --> 00:11:16.350
out what the heck is
going on in the Cast SDK.

00:11:16.350 --> 00:11:19.350
We're now going to actually
dive in and cast enable an app.

00:11:19.350 --> 00:11:21.980
On the left, you see Android,
and on the right, you see iOS,

00:11:21.980 --> 00:11:24.750
and we'll start on Android.

00:11:24.750 --> 00:11:29.110
The first thing that you do
in initializing Cast context

00:11:29.110 --> 00:11:31.250
is in the first chunk
of code, and I'll

00:11:31.250 --> 00:11:33.800
simplify this for those
of you who don't read

00:11:33.800 --> 00:11:36.481
50 lines of code super fast.

00:11:36.481 --> 00:11:37.980
The first thing we
do is essentially

00:11:37.980 --> 00:11:40.160
set the options for the context.

00:11:40.160 --> 00:11:44.209
These options include do I
want debugging verbosity,

00:11:44.209 --> 00:11:46.000
do I want to be able
to actually understand

00:11:46.000 --> 00:11:47.700
what's going on in the SDK.

00:11:47.700 --> 00:11:52.210
The other one is do I want
the reconnection service on.

00:11:52.210 --> 00:11:53.760
That's pretty much it.

00:11:53.760 --> 00:11:55.620
Essentially, set
up options and then

00:11:55.620 --> 00:11:59.480
you lazily instantiate
the actual context.

00:11:59.480 --> 00:12:02.050
The app that you're looking
at where this code is from

00:12:02.050 --> 00:12:03.940
is from one of our Code Labs.

00:12:03.940 --> 00:12:06.390
So you'll have a
ton of opportunity

00:12:06.390 --> 00:12:08.790
to dig into this
exact same code when

00:12:08.790 --> 00:12:13.310
we release the Code Labs later
this month or early in June.

00:12:13.310 --> 00:12:17.140
What's awesome about this
is that this, essentially,

00:12:17.140 --> 00:12:20.500
is a view where the user is
looking at different videos,

00:12:20.500 --> 00:12:22.190
and in that view it's
really appropriate

00:12:22.190 --> 00:12:25.260
to show a Cast button and
it's also really appropriate

00:12:25.260 --> 00:12:27.030
to enable Cast.

00:12:27.030 --> 00:12:29.670
So you can lazily
instantiate this context

00:12:29.670 --> 00:12:32.730
when it's appropriate
in your app lifecycle.

00:12:32.730 --> 00:12:37.320
Similarly on iOS, you
instantiate and create

00:12:37.320 --> 00:12:42.850
a context options, and then you
instantiate the context itself.

00:12:42.850 --> 00:12:47.620
This is about the simplest we
can make a context or state

00:12:47.620 --> 00:12:49.840
manager with a set of options.

00:12:49.840 --> 00:12:52.250
I mean, if you're
developing a singleton that

00:12:52.250 --> 00:12:56.800
manages all states of an
SDK, this is about as simple

00:12:56.800 --> 00:12:59.950
as we can do, essentially
a set of options

00:12:59.950 --> 00:13:03.490
and instantiate the singleton.

00:13:03.490 --> 00:13:05.190
What's great about
this experience

00:13:05.190 --> 00:13:09.970
for the iOS developer is
this is a lot, a lot better.

00:13:09.970 --> 00:13:12.490
If you haven't worked
with our previous SDK,

00:13:12.490 --> 00:13:15.140
this is a huge
advancement in terms

00:13:15.140 --> 00:13:17.545
of what you're going to get
for free coming forward.

00:13:20.710 --> 00:13:24.970
The other aspect of this is
that we can now do discovery

00:13:24.970 --> 00:13:27.360
in a much more simple way.

00:13:27.360 --> 00:13:29.220
And what that discovery
is, is essentially

00:13:29.220 --> 00:13:31.750
just creating a Cast button.

00:13:31.750 --> 00:13:33.930
So once you've
created a Cast button,

00:13:33.930 --> 00:13:36.600
you can essentially just
trust everything else

00:13:36.600 --> 00:13:38.780
for free afterwards.

00:13:38.780 --> 00:13:42.570
Creating a Cast button in
Android looks pretty simple.

00:13:42.570 --> 00:13:45.610
Essentially all you do is
use a Cast button factory

00:13:45.610 --> 00:13:49.240
to generate a button in
the colors that you need

00:13:49.240 --> 00:13:51.450
and that the colors are
inherited in the same way

00:13:51.450 --> 00:13:53.940
that you do in
Android UX in general.

00:13:53.940 --> 00:13:57.220
And what's awesome about this is
you can just trust this method

00:13:57.220 --> 00:14:01.170
to give you a fully functional
Cast button that does

00:14:01.170 --> 00:14:03.740
all of the logic going forward.

00:14:03.740 --> 00:14:06.300
So when the user presses
that Cast button,

00:14:06.300 --> 00:14:08.950
they get all of the
route discovery for free

00:14:08.950 --> 00:14:10.960
and you get all the
route discovery for free.

00:14:10.960 --> 00:14:13.020
And if they back
out of this flow

00:14:13.020 --> 00:14:16.450
you don't have to manage
callbacks to understand

00:14:16.450 --> 00:14:19.400
whether or not the
user's kind of actually

00:14:19.400 --> 00:14:22.610
casted or not casted, and you
understand the state of all

00:14:22.610 --> 00:14:25.350
the different Cast endpoints.

00:14:25.350 --> 00:14:29.759
In addition, you effectively get
knowledge in the reconnect of

00:14:29.759 --> 00:14:31.550
whether or not the user
is already casting.

00:14:31.550 --> 00:14:33.850
So the reason I show
the picture on the right

00:14:33.850 --> 00:14:36.400
is that if you come back, or
the app's in the background

00:14:36.400 --> 00:14:38.300
and you come back
to foreground, we

00:14:38.300 --> 00:14:40.940
handle filling in
the Cast button,

00:14:40.940 --> 00:14:45.700
and we handle figuring out is
the user already playing media.

00:14:45.700 --> 00:14:48.100
That's in the SDK now.

00:14:48.100 --> 00:14:51.210
Similarly, on the iOS side,
we use a factory method

00:14:51.210 --> 00:14:53.400
to generate a Cast button.

00:14:53.400 --> 00:14:57.220
And what you're starting
to see I'd say consistency

00:14:57.220 --> 00:15:00.270
in is that the same way
you think about developing

00:15:00.270 --> 00:15:04.000
for Android or the same way
that you think about structuring

00:15:04.000 --> 00:15:07.640
your Android development,
we are taking to iOS.

00:15:07.640 --> 00:15:11.850
And historically these
worlds were really far apart.

00:15:11.850 --> 00:15:14.390
The ways that we asked
developers to work

00:15:14.390 --> 00:15:17.730
were kind of night and
day, and what we're doing

00:15:17.730 --> 00:15:21.240
is making the development
concepts and the architecture

00:15:21.240 --> 00:15:25.730
concepts and the naming of
objects as close to possible

00:15:25.730 --> 00:15:27.180
across the two.

00:15:27.180 --> 00:15:31.680
So similarly, you have
a Cast button creator.

00:15:31.680 --> 00:15:35.920
Now, it's kind of iOS friendly,
so if you're an iOS developer,

00:15:35.920 --> 00:15:38.990
you'd understand the nature
of how we've structured it.

00:15:38.990 --> 00:15:41.672
So we're not trying to unify
things we shouldn't unify,

00:15:41.672 --> 00:15:44.330
but we're getting as
close as we really should.

00:15:44.330 --> 00:15:47.200
So you create a Cast button
using the factory method.

00:15:47.200 --> 00:15:49.080
You can actually
specify what color you

00:15:49.080 --> 00:15:52.610
want and then off to the races.

00:15:52.610 --> 00:15:58.350
You get again all of the
Cast lifecycle for free.

00:15:58.350 --> 00:16:00.870
So if the user presses
the Cast button.

00:16:00.870 --> 00:16:03.030
The next image is, well,
if they're not casting,

00:16:03.030 --> 00:16:04.240
what do you show?

00:16:04.240 --> 00:16:05.390
You show different routes.

00:16:05.390 --> 00:16:08.090
You show options for where
you can then connect to.

00:16:08.090 --> 00:16:09.540
You show the living room.

00:16:09.540 --> 00:16:11.090
You show another
cast endpoint that's

00:16:11.090 --> 00:16:12.710
already playing something.

00:16:12.710 --> 00:16:14.480
If that user had
pressed the Cast button

00:16:14.480 --> 00:16:16.280
and they were already
playing media,

00:16:16.280 --> 00:16:20.100
we show in an iOS compliant
way in UX compliant

00:16:20.100 --> 00:16:23.570
to iOS standards that there's
media already playing,

00:16:23.570 --> 00:16:26.470
giving the user a view towards
volume control and play

00:16:26.470 --> 00:16:27.459
and pause.

00:16:27.459 --> 00:16:29.000
And then if there's
no media playing,

00:16:29.000 --> 00:16:30.560
we do the right thing as well.

00:16:30.560 --> 00:16:31.770
We handle volume control.

00:16:34.720 --> 00:16:36.980
We're now going to
actually cast media.

00:16:36.980 --> 00:16:40.040
And what's cool about this is
this gets a lot simpler too.

00:16:40.040 --> 00:16:42.700
Again, we manage the session.

00:16:42.700 --> 00:16:45.940
We give you access to
that session at any time.

00:16:45.940 --> 00:16:48.490
And I'm going to go
forward in just Android.

00:16:48.490 --> 00:16:52.840
We can take questions
later on iOS as well.

00:16:52.840 --> 00:16:54.740
The first thing you
need to do in your app

00:16:54.740 --> 00:16:59.370
is have a concept of being
either local or remote.

00:16:59.370 --> 00:17:02.890
So similar to me walking
or traveling and wanting

00:17:02.890 --> 00:17:04.650
to watch the Red
Sox on the road,

00:17:04.650 --> 00:17:09.030
that would be a concept of
playing the app locally.

00:17:09.030 --> 00:17:12.450
If I want to cast, you have
to have a concept of, OK, I'm

00:17:12.450 --> 00:17:14.049
playing media remotely.

00:17:14.049 --> 00:17:16.290
And you can handle this
enumeration or this logic

00:17:16.290 --> 00:17:19.460
in any way that matters
really to your app.

00:17:19.460 --> 00:17:21.980
The next thing is you actually
want to cast that media.

00:17:21.980 --> 00:17:25.670
You're in a state of
starting a remote session.

00:17:25.670 --> 00:17:30.480
So this logic is somewhat
specific to the demo app

00:17:30.480 --> 00:17:32.260
and somewhat specific
to our Code Lab,

00:17:32.260 --> 00:17:35.280
but the concept is pretty
straightforward is I

00:17:35.280 --> 00:17:37.340
want to load some remote media.

00:17:37.340 --> 00:17:41.690
I essentially just call and
get a remote media client,

00:17:41.690 --> 00:17:44.370
and then essentially
ask for that media

00:17:44.370 --> 00:17:47.710
to be built, and
then connect to it.

00:17:47.710 --> 00:17:51.600
Now, you do that with a standard
way of generating media,

00:17:51.600 --> 00:17:54.930
including in the next
few rows metadata,

00:17:54.930 --> 00:17:57.060
like what type of media is this.

00:17:57.060 --> 00:17:58.940
And we support a
few different types,

00:17:58.940 --> 00:18:01.320
which would help
standardize which controls

00:18:01.320 --> 00:18:03.970
are the most appropriate if
the user were actually trying

00:18:03.970 --> 00:18:06.060
to control this
with the lock screen

00:18:06.060 --> 00:18:08.110
notification or the Cast app.

00:18:08.110 --> 00:18:11.150
So a movie is appropriate to
have a play and pause button.

00:18:11.150 --> 00:18:13.820
Some other types of media are
inappropriate to have that, so

00:18:13.820 --> 00:18:16.440
if it's live media for example.

00:18:16.440 --> 00:18:18.721
And then you
effectively give a URL.

00:18:18.721 --> 00:18:20.220
And for those of
you who are working

00:18:20.220 --> 00:18:22.620
with DRM-enabled
content, nothing really

00:18:22.620 --> 00:18:25.420
changes in terms of the
authentication aspects

00:18:25.420 --> 00:18:29.157
or trying to manage
different DRM schemes.

00:18:29.157 --> 00:18:30.990
You'd still likely use
a custom data channel

00:18:30.990 --> 00:18:35.020
to pass over off and manage
authentication and DRM

00:18:35.020 --> 00:18:36.440
on the receiver side.

00:18:36.440 --> 00:18:39.050
Because honestly in the
authentication side,

00:18:39.050 --> 00:18:41.860
every app does things
kind of differently

00:18:41.860 --> 00:18:44.330
in minor ways that end
up having major impact.

00:18:44.330 --> 00:18:46.610
But the media side of
this is much, much more

00:18:46.610 --> 00:18:48.570
straightforward.

00:18:48.570 --> 00:18:51.530
And the impact of
that comes in control.

00:18:51.530 --> 00:18:54.790
In Android, we now give you
essentially this session

00:18:54.790 --> 00:18:57.180
concept where you
can be a listener

00:18:57.180 --> 00:18:59.900
to every different
aspect of the session.

00:18:59.900 --> 00:19:02.650
And I've put a few
examples up on the screen.

00:19:02.650 --> 00:19:06.660
So you can understand
and be a listener

00:19:06.660 --> 00:19:10.090
and then change behavior
when starting a Cast session,

00:19:10.090 --> 00:19:11.820
using this listener concept.

00:19:11.820 --> 00:19:15.340
You can also manage items
like a disconnect event

00:19:15.340 --> 00:19:18.160
and handle them
beautifully or gracefully.

00:19:18.160 --> 00:19:20.690
And there are a variety
of different mechanisms

00:19:20.690 --> 00:19:24.750
or different items that you can
listen to through each session.

00:19:24.750 --> 00:19:26.660
What's great about
this is that you don't

00:19:26.660 --> 00:19:29.120
have to do heavy lifting
of parts of the session

00:19:29.120 --> 00:19:31.930
that you don't want to listen
to or aspects where you kind of

00:19:31.930 --> 00:19:33.630
have to say I need
to know everything

00:19:33.630 --> 00:19:35.720
in order to do one small thing.

00:19:35.720 --> 00:19:37.940
And that is a really
more, I would say,

00:19:37.940 --> 00:19:39.860
much more abstractable
architecture

00:19:39.860 --> 00:19:41.810
than you've had in the past.

00:19:41.810 --> 00:19:44.690
Now, again, all of the code
that you're seeing here

00:19:44.690 --> 00:19:46.200
comes from the
Code Lab that will

00:19:46.200 --> 00:19:50.470
launch within the next
month with the SDK.

00:19:50.470 --> 00:19:54.010
What you get once you've
established a connection,

00:19:54.010 --> 00:19:57.200
once you've casted media,
once you've established

00:19:57.200 --> 00:20:01.520
or listened to a session
is the full UX of Cast.

00:20:01.520 --> 00:20:04.700
So out of the gate, again, this
reduces your development time

00:20:04.700 --> 00:20:05.900
a ton.

00:20:05.900 --> 00:20:09.930
The first item you get is what's
called a mini-controller, which

00:20:09.930 --> 00:20:13.380
is a persistent small controller
that is available to you

00:20:13.380 --> 00:20:16.610
to optionally use at
the bottom of the screen

00:20:16.610 --> 00:20:19.570
throughout the lifecycle
of your app while casting.

00:20:19.570 --> 00:20:22.220
The next area is an
expanded controller.

00:20:22.220 --> 00:20:24.454
Now, what's great about
this, and each one

00:20:24.454 --> 00:20:26.620
of these controllers, is
you can control the buttons

00:20:26.620 --> 00:20:27.411
that matter to you.

00:20:27.411 --> 00:20:29.450
You can even control
the count of buttons.

00:20:29.450 --> 00:20:31.720
So if you don't need five
buttons in an expanded

00:20:31.720 --> 00:20:36.590
controller, we have a way of
using only one, two, three,

00:20:36.590 --> 00:20:38.640
and reflowing them beautifully.

00:20:38.640 --> 00:20:40.910
So say, for instance,
you're a live app,

00:20:40.910 --> 00:20:42.810
and you have no concept
of queue skipping,

00:20:42.810 --> 00:20:45.220
which you see here
or play, pause,

00:20:45.220 --> 00:20:47.620
you can have the buttons
that matter most for you,

00:20:47.620 --> 00:20:49.690
whether that's a star,
kind of thing, favorite,

00:20:49.690 --> 00:20:51.940
I like this show, I might
want to watch it again.

00:20:51.940 --> 00:20:55.230
Or if you're a music app and
you have a very specific way

00:20:55.230 --> 00:20:59.140
or logic around what you do
when someone likes a song,

00:20:59.140 --> 00:21:02.170
or like a heart, a
star, a thumbs up,

00:21:02.170 --> 00:21:03.510
you can implement that.

00:21:03.510 --> 00:21:05.070
Similarly, on the
mini-controller,

00:21:05.070 --> 00:21:07.450
if that thumbs up is the
most important thing that

00:21:07.450 --> 00:21:10.590
is in the app or thumbs down
does something different

00:21:10.590 --> 00:21:14.600
than just an advance queue,
you can put that there as well.

00:21:14.600 --> 00:21:18.680
So those two screens are really,
really extensible and flexible.

00:21:18.680 --> 00:21:21.380
They come out more mid-summer,
not in the initial release

00:21:21.380 --> 00:21:22.420
of the SDK.

00:21:22.420 --> 00:21:25.890
But they're available, again,
both on Android and iOS.

00:21:25.890 --> 00:21:28.200
On Android, you get
an additional benefit

00:21:28.200 --> 00:21:30.957
of having a lock screen
notification automatically.

00:21:30.957 --> 00:21:32.790
And what's great about
this is that connects

00:21:32.790 --> 00:21:35.360
to the media metadata that
I talked about earlier.

00:21:35.360 --> 00:21:38.490
So if you've described what
type of media you're playing,

00:21:38.490 --> 00:21:41.470
we do the right thing
on the lock screen.

00:21:41.470 --> 00:21:45.890
The last area is something which
we use to help notify users

00:21:45.890 --> 00:21:47.150
about Cast.

00:21:47.150 --> 00:21:49.450
And what we've found in
studies with top tier apps

00:21:49.450 --> 00:21:53.510
is that this actually drives
more usage not just of Cast,

00:21:53.510 --> 00:21:56.260
but longer session lengths
as well as more adherence

00:21:56.260 --> 00:21:57.800
to the app itself.

00:21:57.800 --> 00:22:02.380
It's pretty self-serving for
our team to say, hey, cast more.

00:22:02.380 --> 00:22:04.650
But this actually has an
impact for the developer

00:22:04.650 --> 00:22:08.230
to help users become more aware
of the Cast feature in the app

00:22:08.230 --> 00:22:11.035
as well as Cast sessions
and the Cast usage,

00:22:11.035 --> 00:22:12.660
driving longer usage
of the app itself.

00:22:15.350 --> 00:22:17.740
The customizable
controllers, I think

00:22:17.740 --> 00:22:19.530
this is an area where
you might look at it

00:22:19.530 --> 00:22:21.071
and say should I
use them or should I

00:22:21.071 --> 00:22:22.840
not use them going forward.

00:22:22.840 --> 00:22:25.240
In a new development, I
would say, test them out.

00:22:25.240 --> 00:22:27.510
Kick the tires, and
give us feedback

00:22:27.510 --> 00:22:30.350
about where you think you
would need more customization

00:22:30.350 --> 00:22:32.210
or where you'd need
more capability.

00:22:32.210 --> 00:22:34.690
If you're looking at
how you support your app

00:22:34.690 --> 00:22:38.221
and you already have a way of
doing second screen control,

00:22:38.221 --> 00:22:39.970
like you're a music
app and you've already

00:22:39.970 --> 00:22:43.800
had to invest in this for
Bluetooth-type playing,

00:22:43.800 --> 00:22:46.910
we can connect to
your logic as well.

00:22:46.910 --> 00:22:50.210
And you don't need to use
these template controllers.

00:22:50.210 --> 00:22:53.880
But if you want to reduce the
maintenance cost of maintaining

00:22:53.880 --> 00:22:57.350
this Cast experience as well
as get the best of our UX

00:22:57.350 --> 00:23:00.660
knowledge in terms of what we
test and work with the users

00:23:00.660 --> 00:23:03.330
on, in terms of how to do
control of a second screen

00:23:03.330 --> 00:23:06.380
experience, this is a
really strong opportunity

00:23:06.380 --> 00:23:08.380
to reduce that
burden on your team

00:23:08.380 --> 00:23:13.710
while also improving the
user experience in general.

00:23:13.710 --> 00:23:16.780
The impact here
is really that we

00:23:16.780 --> 00:23:19.200
should reduce development time.

00:23:19.200 --> 00:23:22.080
From the beginning,
from maintenance,

00:23:22.080 --> 00:23:26.280
from pretty much every
aspect of the SDK.

00:23:26.280 --> 00:23:28.850
And reducing development
time initially

00:23:28.850 --> 00:23:31.010
is pretty much what
we had done before.

00:23:31.010 --> 00:23:35.950
We had given you a set of--
I would say-- SDK components

00:23:35.950 --> 00:23:39.470
and then template boilerplate
code to throw into your app.

00:23:39.470 --> 00:23:42.680
And honestly, over
time, that initial out

00:23:42.680 --> 00:23:46.730
of the box fast start
became pretty costly

00:23:46.730 --> 00:23:49.540
because we didn't have
the right abstractions.

00:23:49.540 --> 00:23:51.500
We didn't have all
of the components

00:23:51.500 --> 00:23:54.260
that you would have needed
to build an end to end app.

00:23:54.260 --> 00:23:56.900
What's great about our
framework going forward

00:23:56.900 --> 00:23:58.890
is that we reduce
development time for you

00:23:58.890 --> 00:24:02.110
in initial development, as well
as reducing the development

00:24:02.110 --> 00:24:05.210
time for you in ongoing
maintenance on our SDK

00:24:05.210 --> 00:24:07.260
or ongoing maintenance
on your app.

00:24:07.260 --> 00:24:10.020
You don't have to be aware
of all the externalities

00:24:10.020 --> 00:24:12.860
that you may introduce into
the Cast lifecycle in an app

00:24:12.860 --> 00:24:14.740
refactoring.

00:24:14.740 --> 00:24:17.440
At the same time, when we
make refactoring or changes,

00:24:17.440 --> 00:24:21.434
you don't have to worry about
the impact on your app either.

00:24:21.434 --> 00:24:23.100
What's awesome about
this is it includes

00:24:23.100 --> 00:24:25.580
all of the elements
of the Cast lifecycle.

00:24:25.580 --> 00:24:28.350
And the Cast lifecycle
itself has, again,

00:24:28.350 --> 00:24:29.880
some unique aspects.

00:24:29.880 --> 00:24:33.400
So as we look at innovating on
that, if we see opportunities

00:24:33.400 --> 00:24:37.850
to refine it, we can do so
without impacting your apps

00:24:37.850 --> 00:24:38.900
as well.

00:24:38.900 --> 00:24:41.150
So for example, if we
find out that a router

00:24:41.150 --> 00:24:44.140
in a particular country needs
a few different milliseconds

00:24:44.140 --> 00:24:46.940
of latency because
of how it connects,

00:24:46.940 --> 00:24:50.460
we don't have to ask you to
refactor your entire app for us

00:24:50.460 --> 00:24:54.920
to improve the quality
of the Cast experience.

00:24:54.920 --> 00:24:56.400
This gives us a
strong foundation

00:24:56.400 --> 00:24:59.820
for improving the Cast model
as well, whether it's making it

00:24:59.820 --> 00:25:03.290
faster for users,
whether it's helping you

00:25:03.290 --> 00:25:07.580
with doing things like launching
your receiver faster as well.

00:25:07.580 --> 00:25:10.580
We can have a much better
framework going forward

00:25:10.580 --> 00:25:15.360
without having to interact
with your app lifecycle

00:25:15.360 --> 00:25:19.190
The timing of this-- And I'll
talk through this quite a bit--

00:25:19.190 --> 00:25:23.070
the timing of this is
we'll launch the new SDK

00:25:23.070 --> 00:25:25.400
over the next four weeks.

00:25:25.400 --> 00:25:29.160
The core of it is in the
next release of Google Play

00:25:29.160 --> 00:25:32.785
services, and on
the iOS side we'll

00:25:32.785 --> 00:25:35.150
be releasing it in a
similar time frame.

00:25:35.150 --> 00:25:36.980
Going forward we'll
look to release

00:25:36.980 --> 00:25:40.230
pretty much on the same
cadence both on Android and iOS

00:25:40.230 --> 00:25:42.060
with new features.

00:25:42.060 --> 00:25:44.840
We're also not deprecating
CCL and we're not

00:25:44.840 --> 00:25:48.270
deprecating their existing
SDK for the time being.

00:25:48.270 --> 00:25:51.070
We know a lot of apps take
significant amount of time

00:25:51.070 --> 00:25:54.780
to evaluate both when
they change SDK versions,

00:25:54.780 --> 00:25:58.094
as well as when they
change SDK capabilities.

00:25:58.094 --> 00:25:59.760
We do think that there
is an opportunity

00:25:59.760 --> 00:26:01.600
for any new development.

00:26:01.600 --> 00:26:03.580
This is really ready to go.

00:26:03.580 --> 00:26:04.350
It's ready to go.

00:26:04.350 --> 00:26:06.680
And it's much, much
faster to work with,

00:26:06.680 --> 00:26:09.520
and it will improve the
maintenance of your app.

00:26:09.520 --> 00:26:12.430
Also going forward, the
expanded controllers come out

00:26:12.430 --> 00:26:14.770
in the mid-summer
time frame, and we're

00:26:14.770 --> 00:26:16.750
looking for feedback
as well if you,

00:26:16.750 --> 00:26:18.550
again, see anything
in customization

00:26:18.550 --> 00:26:20.440
that you would need.

00:26:20.440 --> 00:26:23.580
In general, this has been
developed significantly

00:26:23.580 --> 00:26:26.900
with your feedback, whether
feedback around the CCL,

00:26:26.900 --> 00:26:29.210
feedback around
the iOS experience.

00:26:29.210 --> 00:26:31.620
And we look forward to
incorporating that feedback

00:26:31.620 --> 00:26:33.960
into the SDK, because
we, again, have

00:26:33.960 --> 00:26:38.030
a much better framework for
being able to roll out updates.

00:26:38.030 --> 00:26:39.910
On the side of the
receiver, we're

00:26:39.910 --> 00:26:41.550
looking to deliver
a receiver that

00:26:41.550 --> 00:26:44.790
brings in a lot of the same
out of the box functionality

00:26:44.790 --> 00:26:46.600
towards the end of the summer.

00:26:46.600 --> 00:26:49.700
So for the side of it that
resides on the Cast endpoint.

00:26:49.700 --> 00:26:52.070
So we're looking and we'll
engage with a lot of you

00:26:52.070 --> 00:26:55.950
on the receiver framework
and get feedback as well.

00:26:55.950 --> 00:26:58.640
And on the web sender
side, that similarly

00:26:58.640 --> 00:27:01.376
should land end of
summer or early fall.

00:27:04.270 --> 00:27:07.550
What's next for where
you should go from here?

00:27:07.550 --> 00:27:11.500
We're going to be launching
Code Labs with essentially

00:27:11.500 --> 00:27:13.870
the exact same
code that you saw,

00:27:13.870 --> 00:27:16.830
in that same next four
weeks time period.

00:27:16.830 --> 00:27:20.210
You also can dive into full
sample apps, the Cast video

00:27:20.210 --> 00:27:23.060
apps, over the next
few weeks as well.

00:27:23.060 --> 00:27:25.600
And you'll be able to
see how we did Cast

00:27:25.600 --> 00:27:29.370
and how we made
use of the new SDK.

00:27:29.370 --> 00:27:32.750
The other side of this is,
again, we love your feedback.

00:27:32.750 --> 00:27:35.300
Whether it's engaging with
our developer community

00:27:35.300 --> 00:27:37.130
or engaging directly
with our teams,

00:27:37.130 --> 00:27:38.540
we'll be right
out in the sandbox

00:27:38.540 --> 00:27:40.260
for a good chunk
of the day today,

00:27:40.260 --> 00:27:42.190
and many of you in
the room, I know,

00:27:42.190 --> 00:27:46.800
we have lots of dialogue
on this SDK as well.

00:27:46.800 --> 00:27:50.240
So going forward, our SDK
is much more maintainable,

00:27:50.240 --> 00:27:53.650
much more updatable, and has
much less impact on your app.

00:27:53.650 --> 00:27:56.160
What's really great about this
is that maintenance should

00:27:56.160 --> 00:27:58.810
be reduced and the out
of the box benefit,

00:27:58.810 --> 00:28:02.130
again, is about a 40%
reduction in development time.

00:28:02.130 --> 00:28:06.410
And this is huge for your
app and for the SDK itself.

00:28:06.410 --> 00:28:07.430
I think that's it.

00:28:07.430 --> 00:28:09.560
Thank you all.

00:28:09.560 --> 00:28:12.910
[MUSIC PLAYING]

