WEBVTT
Kind: captions
Language: en

00:00:06.745 --> 00:00:09.120
JAREK WILKIEWICZ: Hello, and
welcome to Google Developers

00:00:09.120 --> 00:00:09.620
Live.

00:00:09.620 --> 00:00:11.970
We have an exciting
show for you today.

00:00:11.970 --> 00:00:16.950
Today we'll talk about graph
processing and Freebase RDF

00:00:16.950 --> 00:00:17.700
dumps.

00:00:17.700 --> 00:00:20.960
This is the first in a series of
episodes where we'll introduce

00:00:20.960 --> 00:00:24.200
technology you might find
useful for your applications.

00:00:24.200 --> 00:00:27.260
Let me first introduce
our guests and hosts.

00:00:27.260 --> 00:00:30.430
My name Jarek Wilkiewicz, I'm
based here in Mountain View.

00:00:30.430 --> 00:00:32.800
On the Hangout,
we have our guests

00:00:32.800 --> 00:00:35.970
from Sindice Technologies,
Giovanni Tummarello

00:00:35.970 --> 00:00:37.880
and Harish Kumar.

00:00:37.880 --> 00:00:38.982
How are you doing, guys?

00:00:38.982 --> 00:00:40.232
GIOVANNI TUMMARELLO: Hi, guys.

00:00:40.232 --> 00:00:41.252
HARISH KUMAR: Hi, fine.

00:00:41.252 --> 00:00:43.210
JAREK WILKIEWICZ: Joining
us live from Ireland.

00:00:43.210 --> 00:00:45.920
And then from London,
we have Dan Brickley.

00:00:45.920 --> 00:00:47.190
How are you doing, Dan?

00:00:47.190 --> 00:00:48.841
DAN BRICKLEY: Hi, guys.

00:00:48.841 --> 00:00:49.840
JAREK WILKIEWICZ: Great.

00:00:49.840 --> 00:00:51.460
Well, let's get into it.

00:00:51.460 --> 00:00:54.420
Giovanni, tell me a
little more about what

00:00:54.420 --> 00:00:57.510
is it that your company does.

00:00:57.510 --> 00:00:59.340
GIOVANNI TUMMARELLO:
Well, thanks.

00:00:59.340 --> 00:01:03.496
Our company starts from--
it's a university spin-off,

00:01:03.496 --> 00:01:05.970
but we've been around for
a couple of years now.

00:01:05.970 --> 00:01:07.580
And the idea is this.

00:01:07.580 --> 00:01:13.030
We have been trained, we've been
working on very large knowledge

00:01:13.030 --> 00:01:14.210
graphs.

00:01:14.210 --> 00:01:17.140
Something originally
referred to as semantic web,

00:01:17.140 --> 00:01:19.210
like the whole
web as a database.

00:01:19.210 --> 00:01:22.320
And now that technology
takes the big data

00:01:22.320 --> 00:01:25.170
and Knowledge Graph
technology, RDF,

00:01:25.170 --> 00:01:28.170
can be delivered
into Enterprises.

00:01:28.170 --> 00:01:30.010
And there's a lot
of use for this.

00:01:30.010 --> 00:01:33.830
So the company is about
Enterprise Knowledge Graph,

00:01:33.830 --> 00:01:39.180
being able to give to companies
what Google has, what Facebook

00:01:39.180 --> 00:01:42.030
is working on, and Yahoo
and the other guys.

00:01:42.030 --> 00:01:46.400
Now also other companies
can have it in enterprises.

00:01:46.400 --> 00:01:47.400
JAREK WILKIEWICZ: Great.

00:01:47.400 --> 00:01:50.520
And fundamentally,
what is the problem

00:01:50.520 --> 00:01:52.530
that you're trying to solve?

00:01:52.530 --> 00:01:54.537
GIOVANNI TUMMARELLO:
Well, traditionally,

00:01:54.537 --> 00:01:56.120
when you think about
knowledge-- don't

00:01:56.120 --> 00:01:58.530
think about the classic
computer science graph

00:01:58.530 --> 00:02:02.180
where you want to cross a bridge
or seven bridges or whatever.

00:02:02.180 --> 00:02:03.380
Think about knowledge.

00:02:03.380 --> 00:02:05.550
In general, it's entities
and relationships.

00:02:05.550 --> 00:02:07.670
You have people, and
you have products,

00:02:07.670 --> 00:02:10.591
and you want to connect
people with their purchases

00:02:10.591 --> 00:02:11.840
and their products, et cetera.

00:02:11.840 --> 00:02:15.010
So typically, you think
in terms of silos,

00:02:15.010 --> 00:02:17.110
since in the database,
you have tables,

00:02:17.110 --> 00:02:19.910
and you predefine what
the properties are.

00:02:19.910 --> 00:02:20.910
And off you go.

00:02:20.910 --> 00:02:23.266
And you're OK, because
you know your domain.

00:02:23.266 --> 00:02:25.460
And those are the information
you know about things

00:02:25.460 --> 00:02:26.950
when you write your application.

00:02:26.950 --> 00:02:30.340
What happens is we live in
a very exciting era where

00:02:30.340 --> 00:02:31.770
you might learn a lot.

00:02:31.770 --> 00:02:34.490
The web, so many databases
are popping around.

00:02:34.490 --> 00:02:36.480
You might learn a lot
about a single person,

00:02:36.480 --> 00:02:38.100
like 1,000 facts.

00:02:38.100 --> 00:02:39.684
And you know nothing
about the others.

00:02:39.684 --> 00:02:41.391
And therefore you
would like to store all

00:02:41.391 --> 00:02:42.799
that because it could be useful.

00:02:42.799 --> 00:02:44.590
You could use this for
your recommendation,

00:02:44.590 --> 00:02:48.240
for your customer
relationship management.

00:02:48.240 --> 00:02:49.400
You want to store that.

00:02:49.400 --> 00:02:51.649
And you want to store anything
about this other record

00:02:51.649 --> 00:02:52.250
that you have.

00:02:52.250 --> 00:02:53.763
So you have-- you
know, you don't

00:02:53.763 --> 00:02:56.690
want to create 1,000 different
columns in your database.

00:02:56.690 --> 00:02:59.845
So what happens is
this sort of scenario,

00:02:59.845 --> 00:03:03.070
it's a scenario where it looks
like a graph, in a sense.

00:03:03.070 --> 00:03:04.830
It's not anymore
columns, orderly,

00:03:04.830 --> 00:03:07.120
but it's more like a
graph, a knowledge graph.

00:03:07.120 --> 00:03:10.820
Which is very similar to
what you have in Freebase.

00:03:10.820 --> 00:03:14.590
Which, indeed, has
1,000 of different kinds

00:03:14.590 --> 00:03:16.130
of pieces of information.

00:03:16.130 --> 00:03:18.680
And that is very useful
in a lot of sectors

00:03:18.680 --> 00:03:22.992
where you're not happy with
predefining your stuff a

00:03:22.992 --> 00:03:24.039
priori.

00:03:24.039 --> 00:03:26.080
JAREK WILKIEWICZ: So just
to try to summarize it.

00:03:26.080 --> 00:03:28.010
So the reason why
this is important

00:03:28.010 --> 00:03:29.760
is because there's a
class of applications

00:03:29.760 --> 00:03:32.510
that will benefit from this
type of data representation.

00:03:32.510 --> 00:03:34.994
Is that pretty much
what it is about?

00:03:34.994 --> 00:03:37.160
GIOVANNI TUMMARELLO: Oh,
certainly there is a class.

00:03:37.160 --> 00:03:40.590
I mean, think of application
in a lot of sectors,

00:03:40.590 --> 00:03:43.430
from health care, life
sciences, which is typical.

00:03:43.430 --> 00:03:46.480
There's so many databases
popping up here and there

00:03:46.480 --> 00:03:47.199
on this topic.

00:03:47.199 --> 00:03:49.490
You might never know where
to connect your [INAUDIBLE].

00:03:49.490 --> 00:03:51.810
So you want to get it and
connect it and hang it

00:03:51.810 --> 00:03:55.110
to your Knowledge Graph,
your vertexes of information.

00:03:55.110 --> 00:03:56.530
You don't want to lose it.

00:03:56.530 --> 00:03:58.570
To consumer space,
obviously there's

00:03:58.570 --> 00:04:01.420
so much information about
each one or whatever.

00:04:01.420 --> 00:04:05.060
Needless to say, in technical
publishing or defense

00:04:05.060 --> 00:04:08.600
or [INAUDIBLE] application
where-- let alone

00:04:08.600 --> 00:04:11.500
financials, for example-- where
oh, you want to keep it all.

00:04:11.500 --> 00:04:13.300
And you want to
learn how to use it.

00:04:13.300 --> 00:04:15.180
You want to be able to
experiment in new ways

00:04:15.180 --> 00:04:15.810
to use it.

00:04:15.810 --> 00:04:17.821
So definitely very,
very applicable.

00:04:17.821 --> 00:04:18.820
JAREK WILKIEWICZ: Great.

00:04:18.820 --> 00:04:21.550
So I understand Harish is
going to show us a demo

00:04:21.550 --> 00:04:24.050
to help us understand how
this all fits together

00:04:24.050 --> 00:04:25.540
and to help us visualize it.

00:04:25.540 --> 00:04:27.290
So should we hand
it over to Harish

00:04:27.290 --> 00:04:29.832
now so he could
walk us through it?

00:04:29.832 --> 00:04:31.706
GIOVANNI TUMMARELLO:
Yeah, just a second just

00:04:31.706 --> 00:04:33.630
to give an introduction.

00:04:33.630 --> 00:04:36.680
Yes, Harish has been working
on our product, [? officer ?]

00:04:36.680 --> 00:04:40.060
has been working on what
today we're releasing,

00:04:40.060 --> 00:04:45.180
which is the Freebase
SindiceTech distribution.

00:04:45.180 --> 00:04:49.680
And basically the idea is to
make it much, much simpler

00:04:49.680 --> 00:04:51.670
for developers to
quickly spin something

00:04:51.670 --> 00:04:55.030
in the cloud-- in fact, we're
using Google Cloud today--

00:04:55.030 --> 00:04:57.375
to have your own Freebase.

00:04:57.375 --> 00:04:59.010
Your own Freebase,
it's your own,

00:04:59.010 --> 00:05:00.690
it's in your machine
already preloaded.

00:05:00.690 --> 00:05:02.960
You can launch queries
as much as you want.

00:05:02.960 --> 00:05:04.310
You can see it and explore it.

00:05:04.310 --> 00:05:06.440
And it's not just the
data, but it's also

00:05:06.440 --> 00:05:10.090
a set of tools to help
understand the data.

00:05:10.090 --> 00:05:13.090
We precompute certain
analytics, for example.

00:05:13.090 --> 00:05:14.920
We compute all the analytics.

00:05:14.920 --> 00:05:17.240
And you get certain
tools, which are

00:05:17.240 --> 00:05:20.270
based on the analytics, that
allow you to see the schema

00:05:20.270 --> 00:05:23.687
and to get very nice
suggestions helping you

00:05:23.687 --> 00:05:24.520
how to do the query.

00:05:24.520 --> 00:05:26.020
And that is a distribution.

00:05:26.020 --> 00:05:28.100
Full distribution will come.

00:05:28.100 --> 00:05:29.780
Today we have this
first distribution.

00:05:29.780 --> 00:05:31.780
Next one, likely
next month, will also

00:05:31.780 --> 00:05:33.770
have the search capabilities.

00:05:33.770 --> 00:05:35.240
And we'll go on with that.

00:05:35.240 --> 00:05:35.820
JAREK WILKIEWICZ: OK, great.

00:05:35.820 --> 00:05:37.694
So someone who uses the
Google Compute Engine

00:05:37.694 --> 00:05:41.837
will be able to instantiate
this image and experiment

00:05:41.837 --> 00:05:42.420
with the data.

00:05:42.420 --> 00:05:44.880
And that has the Freebase
RDF dump already included.

00:05:44.880 --> 00:05:46.713
GIOVANNI TUMMARELLO:
Yeah, you get-- really,

00:05:46.713 --> 00:05:49.280
you get your own Freebase,
just by spinning up

00:05:49.280 --> 00:05:51.620
the machine plus
everything else.

00:05:51.620 --> 00:05:53.380
And there is a
specialized database

00:05:53.380 --> 00:05:56.480
for RDF already preloaded,
with your tools, open source.

00:05:56.480 --> 00:05:58.570
Thanks, guys, they
have been helping us.

00:05:58.570 --> 00:06:00.599
And off we go with
the demonstrations.

00:06:00.599 --> 00:06:02.140
HARISH KUMAR: As
Giovanni was saying,

00:06:02.140 --> 00:06:03.716
the Sindice Freebase
distribution

00:06:03.716 --> 00:06:05.560
allows you to get
quickly started

00:06:05.560 --> 00:06:07.470
with using the Freebase dump.

00:06:07.470 --> 00:06:10.340
The distribution is packaged as
a machine image for the Google

00:06:10.340 --> 00:06:11.160
Compute Engine.

00:06:11.160 --> 00:06:14.835
You can use this to create
your own personal instance

00:06:14.835 --> 00:06:16.010
of the dump.

00:06:16.010 --> 00:06:18.570
Once you have your
own private dump,

00:06:18.570 --> 00:06:21.340
you could mix your own
data with the Freebase data

00:06:21.340 --> 00:06:22.950
and query it all together.

00:06:22.950 --> 00:06:25.420
So when you
instantiate the image,

00:06:25.420 --> 00:06:28.100
you should see this picture.

00:06:28.100 --> 00:06:30.260
Besides the triple store
that has been preloaded

00:06:30.260 --> 00:06:34.030
with the Freebase data, you'll
also get a set of useful tools

00:06:34.030 --> 00:06:35.330
for working with this data.

00:06:35.330 --> 00:06:38.070
So one of the first
tools that we will see

00:06:38.070 --> 00:06:41.940
is the data types explorer.

00:06:41.940 --> 00:06:44.105
If you want to use
Freebase effectively,

00:06:44.105 --> 00:06:47.000
you need to understand what
are the types of data that

00:06:47.000 --> 00:06:52.510
are present and the instance
counts for these types.

00:06:52.510 --> 00:06:55.710
So if you see here, you'll
see the various types.

00:06:55.710 --> 00:06:58.110
You'll see music.release_track,
music.recording,

00:06:58.110 --> 00:06:59.130
and so on, so forth.

00:06:59.130 --> 00:07:00.680
So these are the types.

00:07:00.680 --> 00:07:02.670
You have people.person here.

00:07:02.670 --> 00:07:06.980
So if you expand this,
you will see other types

00:07:06.980 --> 00:07:08.680
related to people.person.

00:07:08.680 --> 00:07:13.680
So this is a cluster
which contains

00:07:13.680 --> 00:07:15.790
people.person type and
the book.author type.

00:07:15.790 --> 00:07:20.180
And you have 500,000
plus instances of it.

00:07:20.180 --> 00:07:22.140
So these two columns,
the first column

00:07:22.140 --> 00:07:24.640
gives you all the
instances which

00:07:24.640 --> 00:07:27.790
have both these types,
people.person and book.author.

00:07:27.790 --> 00:07:31.160
Whereas the second column gives
you the count of instances

00:07:31.160 --> 00:07:34.160
that only have these two types.

00:07:34.160 --> 00:07:36.710
If you have types
other than these two,

00:07:36.710 --> 00:07:40.620
they will be added up to
this particular number.

00:07:40.620 --> 00:07:43.290
So this is a very
useful way to understand

00:07:43.290 --> 00:07:45.700
what are the various
types out there,

00:07:45.700 --> 00:07:47.158
and how they're
clustered together.

00:07:47.158 --> 00:07:52.300
Another useful visualization
of this very data is the graph.

00:07:52.300 --> 00:07:54.320
So what you see
here, for instance,

00:07:54.320 --> 00:07:56.490
is all the types
that you saw there.

00:07:56.490 --> 00:07:58.550
Each node represents a cluster.

00:07:58.550 --> 00:08:00.830
A cluster is nothing but
a collection of types.

00:08:00.830 --> 00:08:04.212
So if you hover over
it, you'll see the types

00:08:04.212 --> 00:08:05.170
on the right hand side.

00:08:05.170 --> 00:08:07.710
And the green ones
are the clusters

00:08:07.710 --> 00:08:09.050
with just a single type.

00:08:09.050 --> 00:08:10.770
So if you hover over
this green type,

00:08:10.770 --> 00:08:13.670
you'll see it's people.person
with the same count.

00:08:13.670 --> 00:08:22.900
So if you type in people.person
here, just select that.

00:08:22.900 --> 00:08:25.160
You will see in red all
of the clusters that

00:08:25.160 --> 00:08:28.170
have people.person as
part of that cluster.

00:08:28.170 --> 00:08:30.520
So if you look at this
cluster, for instance, that

00:08:30.520 --> 00:08:32.409
people.person, and
then you'll see

00:08:32.409 --> 00:08:34.117
a range of other
additional types.

00:08:34.117 --> 00:08:35.700
And what you'll
notice is that there's

00:08:35.700 --> 00:08:39.500
a huge number of
clusters or types

00:08:39.500 --> 00:08:42.840
which basically have
people.person type.

00:08:42.840 --> 00:08:44.690
Whereas you have
much more smaller

00:08:44.690 --> 00:08:47.235
clusters in the
surrounding data.

00:08:47.235 --> 00:08:49.630
So this is useful
to understand when

00:08:49.630 --> 00:08:51.915
you want to-- if
you wanted to decide

00:08:51.915 --> 00:08:54.460
how do you want to
use Freebase data.

00:08:54.460 --> 00:08:57.510
So the final tool that
I'm going to show you

00:08:57.510 --> 00:08:59.960
is the SPARQL editor.

00:08:59.960 --> 00:09:04.130
So this is the interface
to the Virtuoso endpoint.

00:09:04.130 --> 00:09:07.971
The thing is that
triple stores, you

00:09:07.971 --> 00:09:11.140
need to know the URIs of the
various types and predicates

00:09:11.140 --> 00:09:13.840
to be able to
formulate the queries.

00:09:13.840 --> 00:09:16.690
What SparQLed
allows you to do is

00:09:16.690 --> 00:09:19.000
to get auto-citations
for these URIs

00:09:19.000 --> 00:09:22.300
so that you could formulate
these queries very easily.

00:09:22.300 --> 00:09:24.890
So let me just show you how.

00:09:24.890 --> 00:09:30.790
So let's say we want to find
some information about films.

00:09:30.790 --> 00:09:35.650
So you say F. And you want to
extract the type of the film.

00:09:35.650 --> 00:09:37.680
So you type in film.

00:09:37.680 --> 00:09:38.989
And you press Control-Tab.

00:09:38.989 --> 00:09:40.780
And it shows you a
bunch of auto-citations.

00:09:40.780 --> 00:09:44.100
So this is the URI
for the film type.

00:09:44.100 --> 00:09:45.390
So there you go.

00:09:45.390 --> 00:09:48.090
And now you want to pull out
some additional properties

00:09:48.090 --> 00:09:49.240
of the film.

00:09:49.240 --> 00:09:51.686
Say you want the
label of the film.

00:09:51.686 --> 00:09:52.560
So you type in label.

00:09:55.460 --> 00:09:58.600
And it fills out
the appropriate URI.

00:09:58.600 --> 00:10:01.890
And you can put in FL.

00:10:01.890 --> 00:10:04.120
And now you'll want maybe
some additional information

00:10:04.120 --> 00:10:06.920
about the film, let's
say the release date.

00:10:06.920 --> 00:10:08.450
So you say release.

00:10:11.400 --> 00:10:15.160
And you can see that the film
initial release date appears.

00:10:15.160 --> 00:10:18.120
So let me try it again.

00:10:18.120 --> 00:10:20.730
So there you go.

00:10:20.730 --> 00:10:21.990
So that's it.

00:10:21.990 --> 00:10:23.870
So click Send.

00:10:23.870 --> 00:10:26.240
And you see the data here.

00:10:26.240 --> 00:10:28.210
So you can see some
duplicate entries.

00:10:28.210 --> 00:10:30.120
This is because of the
different languages.

00:10:30.120 --> 00:10:32.310
You can filter them
out very easily.

00:10:32.310 --> 00:10:47.205
You can just specify a filter
clause, filter on the language,

00:10:47.205 --> 00:10:50.430
and that should do the trick.

00:10:50.430 --> 00:10:54.120
So you can see that all
the labels are in English.

00:10:54.120 --> 00:10:56.490
So this is basically
how you can go

00:10:56.490 --> 00:10:58.760
about querying the
[INAUDIBLE] very

00:10:58.760 --> 00:11:02.615
easily with the aid
of the auto-citations.

00:11:02.615 --> 00:11:04.370
Incidentally,
though, the citations

00:11:04.370 --> 00:11:08.000
are powered by the summary
that was mentioned earlier.

00:11:08.000 --> 00:11:11.690
The summary is computed using
Sindice Analytics, which

00:11:11.690 --> 00:11:14.310
is a Hadoop-based
application for computing

00:11:14.310 --> 00:11:18.015
aggregates on the data in terms
of how many instances are there

00:11:18.015 --> 00:11:20.140
of a particular type, how
many properties are there

00:11:20.140 --> 00:11:22.670
of a particular type,
and so on and so forth.

00:11:22.670 --> 00:11:26.140
And that is what powers
the auto-citations here.

00:11:26.140 --> 00:11:27.660
So that was just
a quick overview

00:11:27.660 --> 00:11:30.580
of the applications
that are packaged

00:11:30.580 --> 00:11:33.965
as part of our distribution.

00:11:33.965 --> 00:11:35.605
We will be including
instructions

00:11:35.605 --> 00:11:38.440
as to how you could
create your own instance.

00:11:38.440 --> 00:11:40.665
We encourage you to
try it out yourself

00:11:40.665 --> 00:11:42.720
and let us know what
you think about it.

00:11:42.720 --> 00:11:43.720
JAREK WILKIEWICZ: Great.

00:11:43.720 --> 00:11:46.150
Well, thank you for
running this for us.

00:11:46.150 --> 00:11:47.120
It's very interesting.

00:11:47.120 --> 00:11:51.390
I know Dan had some questions
about the technical aspects

00:11:51.390 --> 00:11:54.890
of down the line
architecture and so forth.

00:11:54.890 --> 00:11:57.890
So I'll hand it over to Dan now.

00:11:57.890 --> 00:11:59.600
DAN BRICKLEY: Hi, guys.

00:11:59.600 --> 00:12:01.201
So I've got a diagram
here from you.

00:12:01.201 --> 00:12:03.200
I'm not sure if people
can see it on the screen.

00:12:03.200 --> 00:12:07.350
But can you talk us through
how the pieces of the system

00:12:07.350 --> 00:12:11.160
fit together, like where
Sindice plugs into Virtuoso

00:12:11.160 --> 00:12:12.500
and where that plugs into Cloud.

00:12:12.500 --> 00:12:15.065
Give us a kind of workflow
architecture picture.

00:12:15.065 --> 00:12:16.690
GIOVANNI TUMMARELLO:
The new thing here

00:12:16.690 --> 00:12:18.450
is that traditionally,
what you would

00:12:18.450 --> 00:12:22.150
do when you're integrating
data, you would do ETL, right?

00:12:22.150 --> 00:12:24.860
So you'd spend a lot
of time extracting,

00:12:24.860 --> 00:12:27.310
then understanding the data.

00:12:27.310 --> 00:12:28.850
And then when you
understand it, you

00:12:28.850 --> 00:12:34.230
can transform it and then
load it into a production ETL.

00:12:34.230 --> 00:12:36.220
And that is very time-consuming.

00:12:36.220 --> 00:12:40.040
So what happens when instead
of 10 tables or 15 tables,

00:12:40.040 --> 00:12:44.180
you have potentially 1,000
or 15,000 like in Freebase?

00:12:44.180 --> 00:12:45.610
I mean, you'd be
completely lost.

00:12:45.610 --> 00:12:47.060
So you need a new step here.

00:12:47.060 --> 00:12:49.705
Which we provide with this
tool, which RDF provides

00:12:49.705 --> 00:12:51.670
and all the tools
that we put together,

00:12:51.670 --> 00:12:53.260
is the exploration step.

00:12:53.260 --> 00:12:57.042
So in other words, as
Harish was saying, but there

00:12:57.042 --> 00:12:58.500
are other tools in
the distribution

00:12:58.500 --> 00:12:59.666
which are quite interesting.

00:12:59.666 --> 00:13:01.570
And you should check them out.

00:13:01.570 --> 00:13:03.600
You get tools to
explore the data.

00:13:03.600 --> 00:13:07.215
It's what some people call pay
as you go data integration.

00:13:07.215 --> 00:13:09.020
In other words, you
put it together.

00:13:09.020 --> 00:13:10.910
And you can already
query it with SPARQL,

00:13:10.910 --> 00:13:12.500
which is really flexible.

00:13:12.500 --> 00:13:16.250
Might not be fast for
production-grade right

00:13:16.250 --> 00:13:17.010
away in SPARQL.

00:13:17.010 --> 00:13:22.600
So you might still need to
load it into NoSQL systems

00:13:22.600 --> 00:13:25.000
or into specific indexes.

00:13:25.000 --> 00:13:28.020
And we have one specifically
about a semi-structured

00:13:28.020 --> 00:13:31.360
information called SIREn,
which is an extension of Solr

00:13:31.360 --> 00:13:33.990
specifically for richly
structured information.

00:13:33.990 --> 00:13:36.620
We'll talk about it
next time if possible.

00:13:36.620 --> 00:13:39.200
You might still load it
into specific systems.

00:13:39.200 --> 00:13:41.590
But right away you
get the full power

00:13:41.590 --> 00:13:43.410
of a really powerful
query language.

00:13:43.410 --> 00:13:45.285
And you get tools that
allow you exploration.

00:13:45.285 --> 00:13:48.710
So it's much more interactive,
much more explorative.

00:13:48.710 --> 00:13:53.441
You get stuff right from
the beginning, more or less.

00:13:53.441 --> 00:13:54.940
DAN BRICKLEY: So
maybe this question

00:13:54.940 --> 00:13:57.210
is going to be a
little unfair, given

00:13:57.210 --> 00:13:59.395
that it's such a general
purpose architecture,

00:13:59.395 --> 00:14:00.770
but can you say
a little bit more

00:14:00.770 --> 00:14:03.626
about the kind of
applications you anticipate

00:14:03.626 --> 00:14:06.580
people building on top of this?

00:14:06.580 --> 00:14:08.850
GIOVANNI TUMMARELLO:
What usually happens

00:14:08.850 --> 00:14:12.390
is you want to build a
Knowledge Graph for a company.

00:14:12.390 --> 00:14:16.720
An example is a Knowledge Graph
for a company, whatever company

00:14:16.720 --> 00:14:19.330
it might be-- you start
with your relational data.

00:14:19.330 --> 00:14:21.300
And you put it in the graph.

00:14:21.300 --> 00:14:23.506
And then what happens
is you find out

00:14:23.506 --> 00:14:25.130
there is this beautiful
data set that's

00:14:25.130 --> 00:14:26.590
like Freebase, for example.

00:14:26.590 --> 00:14:28.940
Or others, it could be whatever.

00:14:28.940 --> 00:14:32.894
And you basically align it and
put it together with your data.

00:14:32.894 --> 00:14:35.310
Which is what you can do in
the distribution, for example.

00:14:35.310 --> 00:14:37.630
At that point, here you
have a very rich cloud.

00:14:37.630 --> 00:14:40.170
And you can already query
from one concept to another.

00:14:40.170 --> 00:14:43.480
But then you can go on, and if
you have unstructured content,

00:14:43.480 --> 00:14:46.240
like [INAUDIBLE] text or
technical content is amazing,

00:14:46.240 --> 00:14:49.650
you can extract concepts,
relationships between concepts,

00:14:49.650 --> 00:14:51.180
or you might have data tables.

00:14:51.180 --> 00:14:53.130
That also can go into a
Knowledge Graph, which

00:14:53.130 --> 00:14:55.780
is your domain-specific
Knowledge Graph,

00:14:55.780 --> 00:14:57.410
your Enterprise Knowledge Graph.

00:14:57.410 --> 00:14:59.980
And then even your
customer data,

00:14:59.980 --> 00:15:02.660
so that you can have
vertical products

00:15:02.660 --> 00:15:04.430
specific for your customers.

00:15:04.430 --> 00:15:08.130
And ontologies, [? except ?]
ontologies are basically rich

00:15:08.130 --> 00:15:09.050
taxonomies.

00:15:09.050 --> 00:15:10.710
And you can do the
reasoning and rules

00:15:10.710 --> 00:15:14.450
and enhance it even more
to ultimately basically be

00:15:14.450 --> 00:15:17.107
able to leverage all this
information together.

00:15:17.107 --> 00:15:17.940
How do you leverage?

00:15:17.940 --> 00:15:18.540
What do you do with it?

00:15:18.540 --> 00:15:20.165
Well, you do really
interesting things.

00:15:20.165 --> 00:15:21.840
You do domain-specific
applications,

00:15:21.840 --> 00:15:24.700
you do search which is much
more advanced than what

00:15:24.700 --> 00:15:26.330
you could do before.

00:15:26.330 --> 00:15:31.420
You can do relational
browsing in a way

00:15:31.420 --> 00:15:34.790
that basically-- I
wouldn't be saying

00:15:34.790 --> 00:15:36.070
it's for everything, right?

00:15:36.070 --> 00:15:37.820
I wouldn't be saying
it's for everything.

00:15:37.820 --> 00:15:40.444
And for example, we were talking
to some people in the consumer

00:15:40.444 --> 00:15:41.300
banking space.

00:15:41.300 --> 00:15:42.360
And they said well, no.

00:15:42.360 --> 00:15:44.570
Because we know everything.

00:15:44.570 --> 00:15:45.980
That's how banking works.

00:15:45.980 --> 00:15:48.480
And we don't need to
explore data that much.

00:15:48.480 --> 00:15:51.760
We might need to explore
numbers, but not types

00:15:51.760 --> 00:15:53.520
of data, not new kinds of data.

00:15:53.520 --> 00:15:55.100
So no, not for consumer banking.

00:15:55.100 --> 00:15:57.795
But for analysts, for example,
in the financial sector

00:15:57.795 --> 00:15:59.475
or whatever, that's
a different story.

00:15:59.475 --> 00:16:02.420
They want to put a lot of new
dots together all the time.

00:16:02.420 --> 00:16:05.410
And this is the most
agile infrastructure

00:16:05.410 --> 00:16:06.995
that you can build.

00:16:06.995 --> 00:16:07.870
DAN BRICKLEY: Thanks.

00:16:07.870 --> 00:16:10.970
Can you tell us a
little bit about the way

00:16:10.970 --> 00:16:14.222
the RDF data dumps from Freebase
fit into this architecture?

00:16:14.222 --> 00:16:15.680
GIOVANNI TUMMARELLO:
Well, Freebase

00:16:15.680 --> 00:16:17.791
is an amazing resource.

00:16:17.791 --> 00:16:19.290
Let's say that
you're doing anything

00:16:19.290 --> 00:16:21.150
that has to do with a consumer.

00:16:21.150 --> 00:16:23.490
You really want to
be leveraging that.

00:16:23.490 --> 00:16:27.530
You want to be able to say,
well, I'm selling this record.

00:16:27.530 --> 00:16:31.980
But because this record was
awarded this thing last week,

00:16:31.980 --> 00:16:33.170
you might want it.

00:16:33.170 --> 00:16:34.820
And that would show
it in Freebase,

00:16:34.820 --> 00:16:39.030
that you might want put it on
the homepage or recommend it.

00:16:39.030 --> 00:16:43.490
So any sort of recommendation,
matching, grouping

00:16:43.490 --> 00:16:45.525
and clustering of
your content, done

00:16:45.525 --> 00:16:48.060
in a very rich way
across the graph.

00:16:48.060 --> 00:16:50.670
Freebase is the perfect
crystallization point

00:16:50.670 --> 00:16:52.490
for that sort of knowledge.

00:16:52.490 --> 00:16:54.230
It definitely doesn't
contain everything.

00:16:54.230 --> 00:16:55.890
You might want to
enrich it even more.

00:16:55.890 --> 00:16:59.150
You might want to put your
secret sauce of data inside.

00:16:59.150 --> 00:17:02.760
But it's a fantastic resource.

00:17:02.760 --> 00:17:04.780
DAN BRICKLEY: Can you
tell us a little bit more

00:17:04.780 --> 00:17:06.420
about your use of SPARQL?

00:17:06.420 --> 00:17:10.230
And in particular, SPARQL is
great with financial data.

00:17:10.230 --> 00:17:12.089
But the more data
you have, the more

00:17:12.089 --> 00:17:15.155
sources you mix,
the messier it gets.

00:17:15.155 --> 00:17:19.558
How do you deal with SPARQL
robustly with real-world data?

00:17:19.558 --> 00:17:21.099
GIOVANNI TUMMARELLO:
Most definitely.

00:17:21.099 --> 00:17:24.040
It's not like [? two ?]
different people have

00:17:24.040 --> 00:17:26.099
been working on
this RDF [INAUDIBLE]

00:17:26.099 --> 00:17:27.280
for a very long time.

00:17:27.280 --> 00:17:30.482
And we're not the most-- we're
not going to tell you, oh, you

00:17:30.482 --> 00:17:32.940
should throw away everything
else, and you should use this.

00:17:32.940 --> 00:17:35.880
No, you should use this
when it makes sense.

00:17:35.880 --> 00:17:38.550
When you have such a
richness of information

00:17:38.550 --> 00:17:41.630
that you're really enjoying
having this very powerful tool.

00:17:41.630 --> 00:17:44.270
Because otherwise, then
this could be overwhelming.

00:17:44.270 --> 00:17:46.210
So there's no way out.

00:17:46.210 --> 00:17:49.470
The sooner you clean
your data, the better.

00:17:49.470 --> 00:17:53.520
So in other words--
Freebase had this refine,

00:17:53.520 --> 00:17:55.804
which then was Google Refine
and now is OpenRefine.

00:17:55.804 --> 00:17:57.720
That's an amazing tool
to start, that's great.

00:17:57.720 --> 00:18:00.682
So you avoid the messiness
by starting with something

00:18:00.682 --> 00:18:01.890
like that from the beginning.

00:18:01.890 --> 00:18:03.740
Then there's a plug-in
that writes to RDF.

00:18:03.740 --> 00:18:06.370
So you can get OpenRefine,
get your table.

00:18:06.370 --> 00:18:08.045
Try to align it, even
through Freebase.

00:18:08.045 --> 00:18:12.170
Dump it directly in the SPARQL
endpoint in this distribution.

00:18:12.170 --> 00:18:14.830
And you'll be able to
query ready with Freebase.

00:18:14.830 --> 00:18:17.907
So try it, when you are in
SPARQL already because you

00:18:17.907 --> 00:18:19.240
already loaded everything there.

00:18:19.240 --> 00:18:21.380
SPARQL is not great
for modifying stuff,

00:18:21.380 --> 00:18:22.920
it's mostly for querying.

00:18:22.920 --> 00:18:24.885
So what you do,
however, is you have

00:18:24.885 --> 00:18:27.010
one of the most
flexible languages

00:18:27.010 --> 00:18:31.340
to try to still do a query that
will fit the pieces together.

00:18:31.340 --> 00:18:33.710
You still would
be able to do it.

00:18:33.710 --> 00:18:37.030
And once you understand how the
pieces would piece together,

00:18:37.030 --> 00:18:38.970
then you will probably
transform and actually

00:18:38.970 --> 00:18:41.390
make them fit better
in the loading phase.

00:18:41.390 --> 00:18:43.480
That's more or less
an intrinsic process.

00:18:43.480 --> 00:18:45.230
HARISH KUMAR: And we
could say that SPARQL

00:18:45.230 --> 00:18:47.550
is pretty well-suited for
the ad-hoc kind of querying

00:18:47.550 --> 00:18:49.830
that you need to
do with dirty data.

00:18:49.830 --> 00:18:52.120
So there's a good
fit, in a sense,

00:18:52.120 --> 00:18:56.540
between SPARQL and data that is
incrementally being integrated.

00:18:56.540 --> 00:18:58.310
JAREK WILKIEWICZ:
So for our audience

00:18:58.310 --> 00:19:00.850
that would like to experiment
with this some more,

00:19:00.850 --> 00:19:02.872
this is a lot of information
in today's session.

00:19:02.872 --> 00:19:04.330
And a lot of the
terms might not be

00:19:04.330 --> 00:19:07.520
familiar to people
new to the graph

00:19:07.520 --> 00:19:11.380
processing, the whole very
rich semantic web community.

00:19:11.380 --> 00:19:13.140
What's kind of the
next step for them?

00:19:13.140 --> 00:19:16.190
What do they do next?

00:19:16.190 --> 00:19:18.110
GIOVANNI TUMMARELLO:
Well, I'd say

00:19:18.110 --> 00:19:20.100
first thing is
visit the website.

00:19:20.100 --> 00:19:24.615
And visit Sindicetech/freebase,
sindicetech.com/freebase.

00:19:24.615 --> 00:19:26.740
And then be able to get
some very easy instructions

00:19:26.740 --> 00:19:29.730
to get their own Freebase and
be able to play with it right

00:19:29.730 --> 00:19:30.460
away.

00:19:30.460 --> 00:19:33.744
And then there is plenty of
tutorials on RDF and SPARQL.

00:19:33.744 --> 00:19:35.410
It's a very mature
language, by the way.

00:19:35.410 --> 00:19:38.370
It's not-- it's been there
for years and years and years.

00:19:38.370 --> 00:19:40.750
And it's quite an
interesting functionalities.

00:19:40.750 --> 00:19:42.550
And also we look forward
to helping people.

00:19:42.550 --> 00:19:44.010
So just let us know.

00:19:44.010 --> 00:19:45.010
JAREK WILKIEWICZ: Great.

00:19:45.010 --> 00:19:47.810
Well, thank you very much
for putting it together.

00:19:47.810 --> 00:19:52.120
And I'll make sure to check
out the image on Google Compute

00:19:52.120 --> 00:19:52.890
Engine.

00:19:52.890 --> 00:19:54.552
And then for those
of you watching,

00:19:54.552 --> 00:19:55.760
thank you for your attention.

00:19:55.760 --> 00:19:58.240
I would like to mention in
closing that Google Developer

00:19:58.240 --> 00:19:59.660
Relations is hiring.

00:19:59.660 --> 00:20:02.790
So if you're looking for
a career change in 2014,

00:20:02.790 --> 00:20:06.790
check out
developers.google.com/jobs.

00:20:06.790 --> 00:20:09.300
Thank you, Dan, for
staying up late in London.

00:20:09.300 --> 00:20:11.640
Thank you, guys, for
joining us from Ireland.

00:20:11.640 --> 00:20:13.947
And for those of you watching,
I will see you next time

00:20:13.947 --> 00:20:15.030
on Google Developers Live.

00:20:15.030 --> 00:20:16.580
Bye.

