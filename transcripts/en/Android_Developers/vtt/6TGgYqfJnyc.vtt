WEBVTT
Kind: captions
Language: en

00:00:08.810 --> 00:00:10.820
Hi, I'm Chris Banes, an engineer
on the Android

00:00:10.820 --> 00:00:12.185
Developer Relations Team.

00:00:12.185 --> 00:00:14.350
I'm here today to give you
an introduction to

00:00:14.350 --> 00:00:16.520
ActionBarCompat.

00:00:16.520 --> 00:00:18.240
So, what is ActionBarCompat?

00:00:18.240 --> 00:00:20.800
Well, it's a support library
that was released this week as

00:00:20.800 --> 00:00:24.160
part of the support library
version 18 which allows you to

00:00:24.160 --> 00:00:27.200
add a compatible Action Bar to
your application, that allows

00:00:27.200 --> 00:00:30.750
it to work from Android
2.1 upwards.

00:00:30.750 --> 00:00:33.010
ActionBarCompat has been
designed to mimic the Action

00:00:33.010 --> 00:00:36.390
Bar API, available in later
versions of the platform, as

00:00:36.390 --> 00:00:39.500
much as possible, which
makes your job easier.

00:00:39.500 --> 00:00:40.870
So how should you actually go
about adding it to your

00:00:40.870 --> 00:00:41.830
application?

00:00:41.830 --> 00:00:43.520
Well, there are two
ways we support.

00:00:43.520 --> 00:00:46.220
First is via Gradle, and it's
been added to the Android

00:00:46.220 --> 00:00:48.510
support repository, which means
it's a one-line change

00:00:48.510 --> 00:00:51.640
to a build.gradle, as
you can see here.

00:00:51.640 --> 00:00:54.930
Or, alternatively, you could add
it as a library project.

00:00:54.930 --> 00:00:56.510
You should have a look at the
Support Library Release Notes

00:00:56.510 --> 00:00:58.280
for more information
on both of these.

00:00:58.280 --> 00:00:59.450
So, for the rest of
this DevByte, I'm

00:00:59.450 --> 00:01:00.630
going to go for a scenario.

00:01:00.630 --> 00:01:03.040
And that scenario is that you
have an application which

00:01:03.040 --> 00:01:05.680
works on Ice Cream Sandwich and
above, but you want it to

00:01:05.680 --> 00:01:08.910
work on devices from 2.1
and above instead.

00:01:08.910 --> 00:01:11.270
The first thing we need to look
at are your resources,

00:01:11.270 --> 00:01:13.810
specifically your menus
and your styles.

00:01:13.810 --> 00:01:16.660
So ActionBarCompat includes
three styles which you must

00:01:16.660 --> 00:01:19.630
use either directly
or indirectly.

00:01:19.630 --> 00:01:23.010
And they are Theme.AppCompat,
Theme.AppCompat.Light, and

00:01:23.010 --> 00:01:23.205
Theme.AppCompat.

00:01:23.205 --> 00:01:24.455
Light.DarkActionBar.

00:01:25.900 --> 00:01:29.270
Now the keen-eyed of you will
see that each of these mirror

00:01:29.270 --> 00:01:33.450
a theme from Theme.Holo and
they act accordingly.

00:01:33.450 --> 00:01:36.240
So back to our scenario, we are
in our manifest, we have

00:01:36.240 --> 00:01:38.400
an activity which directly
uses the

00:01:38.400 --> 00:01:41.400
Theme.Holo.Light.DarkActionBar
theme.

00:01:41.400 --> 00:01:43.980
And this comes from the
Android system.

00:01:43.980 --> 00:01:46.680
Now, to change this for
ActionBarCompat, we need to

00:01:46.680 --> 00:01:49.140
use the theme from
ActionBarCompat instead.

00:01:49.140 --> 00:01:49.935
So that would be the
Theme.AppCompat.

00:01:49.935 --> 00:01:52.120
Light.DarkActionBar theme.

00:01:54.860 --> 00:01:57.270
But most applications don't use
this, and they don't use

00:01:57.270 --> 00:01:57.980
themes directly.

00:01:57.980 --> 00:01:59.460
They have customized themes.

00:01:59.460 --> 00:02:01.920
So here we have a small example
with a theme called

00:02:01.920 --> 00:02:05.020
Theme.Styled, which has a parent
of Theme.Holo.Light

00:02:05.020 --> 00:02:07.980
which has a custom
action bar theme.

00:02:07.980 --> 00:02:10.550
And that style is referenced
below.

00:02:10.550 --> 00:02:13.360
Now, for ActionBarCompat, we've
had to import a lot of

00:02:13.360 --> 00:02:15.300
attributes into ActionBarCompat
which you have

00:02:15.300 --> 00:02:16.570
to then use.

00:02:16.570 --> 00:02:19.640
So there are two rules you
need to think about.

00:02:19.640 --> 00:02:21.850
The first is that your style
must always have

00:02:21.850 --> 00:02:24.080
an AppCompat parent.

00:02:24.080 --> 00:02:26.910
And secondly, you must always
double-set each attribute,

00:02:26.910 --> 00:02:29.400
once in the Android namespace,
and again

00:02:29.400 --> 00:02:32.250
in the default namespace.

00:02:32.250 --> 00:02:34.500
So back to our scenario.

00:02:34.500 --> 00:02:36.120
Theme.Styled will become this.

00:02:36.120 --> 00:02:39.870
So rule number one, has to have
an AppCompat parent, so

00:02:39.870 --> 00:02:42.930
here we've changed it to a
Theme.AppCompat.Light.

00:02:42.930 --> 00:02:44.390
And then rule number
two, you have to

00:02:44.390 --> 00:02:45.930
double-set each attribute.

00:02:45.930 --> 00:02:49.590
Now, we've already set it in the
Android namespace, as you

00:02:49.590 --> 00:02:52.890
can see, so we just need to
copy that value and do it

00:02:52.890 --> 00:02:55.320
again in the default namespace,
which is the second

00:02:55.320 --> 00:02:56.460
bit in green.

00:02:56.460 --> 00:02:57.330
That's it with styles.

00:02:57.330 --> 00:03:00.870
As long as you follow those
rules, you should be fine.

00:03:00.870 --> 00:03:02.920
So, following on with
that with menus.

00:03:02.920 --> 00:03:05.810
So as with the standard action
bar, items are added to it via

00:03:05.810 --> 00:03:07.300
the options menu.

00:03:07.300 --> 00:03:10.610
And we recommend you add them
via menu resources.

00:03:10.610 --> 00:03:14.940
So here is an example menu
resource, with one item, a

00:03:14.940 --> 00:03:16.240
search item.

00:03:16.240 --> 00:03:19.070
and that item has an
actionViewClass referencing a

00:03:19.070 --> 00:03:21.000
SearchView.

00:03:21.000 --> 00:03:23.420
Now the trouble with this is
that it has two attributes

00:03:23.420 --> 00:03:27.750
which were added in Honeycomb,
so we can't use them before.

00:03:27.750 --> 00:03:29.940
We can, but they'll
be ignored.

00:03:29.940 --> 00:03:33.900
So to get around this, we've
imported all of the action

00:03:33.900 --> 00:03:36.920
item related attributes
into ActionBarCompat.

00:03:36.920 --> 00:03:38.530
So to do that, you
need to import

00:03:38.530 --> 00:03:39.920
them into your namespace.

00:03:39.920 --> 00:03:42.130
Now, we've called it the yourapp
namespace, but you

00:03:42.130 --> 00:03:44.820
could call it anything
you want.

00:03:44.820 --> 00:03:47.850
And the result is that for any
of the action item attributes,

00:03:47.850 --> 00:03:50.930
you need to reference them from
this namespace, not the

00:03:50.930 --> 00:03:52.440
Android namespace.

00:03:52.440 --> 00:03:53.920
So that's it with
your resources.

00:03:53.920 --> 00:03:56.070
Now we're going to move
on to some code.

00:03:56.070 --> 00:03:57.710
So the first thing you need to
think about is your activity.

00:04:00.370 --> 00:04:03.070
Your activities need to extend
from ActionBarActivity.

00:04:03.070 --> 00:04:06.865
Now ActionBarActivity was added
in ActionBarCompat, and

00:04:06.865 --> 00:04:10.050
it actually extends from
FragmentActivity itself.

00:04:10.050 --> 00:04:12.950
That means you can continue
using Fragments, but you must

00:04:12.950 --> 00:04:16.550
use the support implementation.

00:04:16.550 --> 00:04:19.269
Then, as I mentioned earlier,
the API we've tried to add to

00:04:19.269 --> 00:04:22.915
ActionBarCompat is very similar
to that of Activity in

00:04:22.915 --> 00:04:24.560
later releases of Android.

00:04:24.560 --> 00:04:26.750
So we have a getSupportActionBar
method,

00:04:26.750 --> 00:04:30.100
which are will return you an
action bar, which has a near

00:04:30.100 --> 00:04:35.010
identical API to .ActionBar
available in Honeycomb ICS.

00:04:35.010 --> 00:04:39.630
So you can add tabs, change
navigation type, or change the

00:04:39.630 --> 00:04:42.440
home item to act as
open navigation.

00:04:42.440 --> 00:04:45.020
Another method you'll probably
use is startSupportActionMode,

00:04:45.020 --> 00:04:48.510
which will start a contextual
action bar.

00:04:48.510 --> 00:04:51.560
Now, as mentioned earlier, you
add items to your action bar

00:04:51.560 --> 00:04:53.170
via the options menu.

00:04:53.170 --> 00:04:58.980
So here is an implementation
that you would do in Android

00:04:58.980 --> 00:05:02.360
version 1, where you override
onCreateOptionsMenu() and you

00:05:02.360 --> 00:05:04.425
inflate a menu from
your resources.

00:05:04.425 --> 00:05:05.740
Now, nothing has changed
from this.

00:05:05.740 --> 00:05:08.470
It is exactly the same as you
do with ActionBarCompat.

00:05:08.470 --> 00:05:10.580
The only difference is when
you want to start calling

00:05:10.580 --> 00:05:13.300
methods, which were added in
Honeycomb or later, such as

00:05:13.300 --> 00:05:16.170
getActionView we have here, to
get the actual reference to

00:05:16.170 --> 00:05:18.620
the SearchView.

00:05:18.620 --> 00:05:22.950
Now, to get around this in
ActionBarCompat, we've added

00:05:22.950 --> 00:05:25.400
the MenuItemCompat class,
which is a collection of

00:05:25.400 --> 00:05:28.280
static methods which will allow
you to reference these

00:05:28.280 --> 00:05:32.703
methods cleanly and safely, much
like you do with a lot of

00:05:32.703 --> 00:05:34.030
the other support methods.

00:05:34.030 --> 00:05:35.820
Now we move onto fragments.

00:05:35.820 --> 00:05:38.360
Now, nothing has changed
with fragments.

00:05:38.360 --> 00:05:42.240
You can continue to use
android.support.v4.Fragment as

00:05:42.240 --> 00:05:43.370
you always have.

00:05:43.370 --> 00:05:46.690
And, indeed, to add items to
your options menu from there,

00:05:46.690 --> 00:05:48.510
you just need to call
setHasOptionsMenu() during

00:05:48.510 --> 00:05:51.120
your onCreate(), and then your
onCreateOptionsMenu() and

00:05:51.120 --> 00:05:53.030
onPrepareOptionsMenu()
will be called.

00:05:53.030 --> 00:05:55.960
And you inflate them just like
you do in your activity.

00:05:55.960 --> 00:05:57.160
Hope this makes your
lives easier,

00:05:57.160 --> 00:05:58.410
and thanks for watching.

