WEBVTT
Kind: captions
Language: en

00:00:00.982 --> 00:00:04.419
[MUSIC PLAYING]

00:00:06.390 --> 00:00:07.890
NETO MARIN: Hey,
I'm Neto, developer

00:00:07.890 --> 00:00:09.840
advocate on the
Actions on Google team.

00:00:09.840 --> 00:00:13.290
And I'm here today for one more
"Behind the Actions" episode.

00:00:13.290 --> 00:00:14.767
And today, we have a new guest.

00:00:14.767 --> 00:00:16.059
Hey, Daniel, how are you doing?

00:00:16.059 --> 00:00:16.720
DANIEL MYERS: I'm doing well.

00:00:16.720 --> 00:00:17.070
How are you?

00:00:17.070 --> 00:00:18.720
NETO MARIN: And
Daniel is my teammate.

00:00:18.720 --> 00:00:20.155
So what do you do in our team?

00:00:20.155 --> 00:00:22.530
DANIEL MYERS: So I'm a developer
advocate here at Google,

00:00:22.530 --> 00:00:25.080
specifically on the Google
Assistant and Actions

00:00:25.080 --> 00:00:29.070
on Google team, where I work
a lot on various Smart Home

00:00:29.070 --> 00:00:30.817
and IoT-related aspects.

00:00:30.817 --> 00:00:32.650
NETO MARIN: So you can
see he has cool suit.

00:00:32.650 --> 00:00:33.850
He do as the cool industry.

00:00:33.850 --> 00:00:34.580
So [INAUDIBLE].

00:00:34.580 --> 00:00:35.430
[LAUGHS] Kidding.

00:00:35.430 --> 00:00:38.420
So, OK, but what is
this weird stuff here?

00:00:38.420 --> 00:00:40.170
What are you going to
present to us today?

00:00:40.170 --> 00:00:41.212
DANIEL MYERS: Absolutely.

00:00:41.212 --> 00:00:42.600
So this is a Raspberry Pi.

00:00:42.600 --> 00:00:47.910
It's actually a Google AIY
Vision Kit where we will be

00:00:47.910 --> 00:00:53.040
modifying this off-the-shelf
device to enable Google

00:00:53.040 --> 00:00:56.910
Assistant controlling to where
you can give it various smart

00:00:56.910 --> 00:01:01.110
washing commands, like "start
my cycle," "run cycle,"

00:01:01.110 --> 00:01:02.100
turn it on and off--

00:01:02.100 --> 00:01:02.550
things like that.

00:01:02.550 --> 00:01:03.258
NETO MARIN: Cool.

00:01:03.258 --> 00:01:05.129
So if, for example,
I'm running behind,

00:01:05.129 --> 00:01:07.860
I'm running late
to catch my bus,

00:01:07.860 --> 00:01:10.680
and I forgot to start
my washer machine,

00:01:10.680 --> 00:01:13.650
I could send some command,
and even from my shuttle, say,

00:01:13.650 --> 00:01:14.660
hey, forgot.

00:01:14.660 --> 00:01:16.063
Start my laundry.

00:01:16.063 --> 00:01:16.980
DANIEL MYERS: Exactly.

00:01:16.980 --> 00:01:17.460
Exactly.

00:01:17.460 --> 00:01:18.877
You know, well,
part of the reason

00:01:18.877 --> 00:01:21.270
why I chose smart
washing machine today

00:01:21.270 --> 00:01:24.120
is because it's a little
bit more complicated

00:01:24.120 --> 00:01:26.010
than just a smart
light bulb, right?

00:01:26.010 --> 00:01:28.740
We still have the on/off you
would have with a light bulb,

00:01:28.740 --> 00:01:31.830
but you also have things like
modes and various other traits

00:01:31.830 --> 00:01:35.520
that you get exposed to when
developing a smart washer.

00:01:35.520 --> 00:01:37.883
NETO MARIN: Oh, yeah.

00:01:37.883 --> 00:01:40.050
It's a good fit for our
"Behind the Actions," right?

00:01:40.050 --> 00:01:42.760
I'm going to show some deep
dive on this structure.

00:01:42.760 --> 00:01:45.818
But, yeah, before we start,
can you show us how it works?

00:01:45.818 --> 00:01:46.860
DANIEL MYERS: Absolutely.

00:01:46.860 --> 00:01:50.790
So I have this already
setup with my account.

00:01:50.790 --> 00:01:53.460
I have it set up with
my Google account.

00:01:53.460 --> 00:01:54.955
Everything's already
been deployed.

00:01:54.955 --> 00:01:56.580
And so what I'm going
to do is actually

00:01:56.580 --> 00:01:58.500
talk to Google Assistant.

00:01:58.500 --> 00:01:59.383
Hey, Google--

00:01:59.383 --> 00:02:00.130
[CHIME]

00:02:00.130 --> 00:02:01.380
--turn on my washer.

00:02:01.380 --> 00:02:02.790
GOOGLE ASSISTANT: Sure,
turning the washer on.

00:02:02.790 --> 00:02:04.498
NETO MARIN: Oh, you
can see here the LED.

00:02:04.498 --> 00:02:05.040
OK, great.

00:02:05.040 --> 00:02:06.790
DANIEL MYERS: So
blue means it's on.

00:02:06.790 --> 00:02:08.340
Now, if I start it,
it will actually

00:02:08.340 --> 00:02:10.949
start flashing various colors.

00:02:10.949 --> 00:02:11.770
Hey, Google--

00:02:11.770 --> 00:02:12.270
[CHIME]

00:02:12.270 --> 00:02:13.042
--start my washer.

00:02:13.042 --> 00:02:14.250
GOOGLE ASSISTANT: You got it.

00:02:14.250 --> 00:02:15.420
Starting the washer.

00:02:15.420 --> 00:02:17.730
NETO MARIN: So now it's
like the washing cycle

00:02:17.730 --> 00:02:18.510
is running, right?

00:02:18.510 --> 00:02:19.427
DANIEL MYERS: Exactly.

00:02:19.427 --> 00:02:21.990
So that's a various
cycle that you

00:02:21.990 --> 00:02:23.610
can start on a washing machine.

00:02:23.610 --> 00:02:25.440
Now, there's also
other toggles--

00:02:25.440 --> 00:02:27.240
it's another type of trait--

00:02:27.240 --> 00:02:28.740
that you can have
on a smart device.

00:02:28.740 --> 00:02:29.467
NETO MARIN: OK.

00:02:29.467 --> 00:02:31.050
DANIEL MYERS: Now,
if I turn that on--

00:02:31.050 --> 00:02:31.820
hey, Google--

00:02:31.820 --> 00:02:32.320
[CHIME]

00:02:32.320 --> 00:02:33.750
--turn on turbo for my washer.

00:02:33.750 --> 00:02:34.958
GOOGLE ASSISTANT: You got it.

00:02:34.958 --> 00:02:36.420
Turning on turbo on the washer.

00:02:36.420 --> 00:02:39.130
DANIEL MYERS: And so now
turbo's on on the washer.

00:02:39.130 --> 00:02:41.490
And so that's a various
toggle that you can

00:02:41.490 --> 00:02:44.620
control through voice as well.

00:02:44.620 --> 00:02:47.010
And ultimately, you can
turn it off as well.

00:02:47.010 --> 00:02:47.740
[CHIME]

00:02:47.740 --> 00:02:48.720
Turn off my washer.

00:02:48.720 --> 00:02:49.260
GOOGLE ASSISTANT: You got it.

00:02:49.260 --> 00:02:50.490
Turning off the washer.

00:02:50.490 --> 00:02:51.450
NETO MARIN: Cool, cool.

00:02:51.450 --> 00:02:55.650
So what's happening here is,
like, Google Assistant is

00:02:55.650 --> 00:02:57.800
handling all the
things you said,

00:02:57.800 --> 00:03:00.930
calling an API at some
point, and sending

00:03:00.930 --> 00:03:03.090
the command to here, right?

00:03:03.090 --> 00:03:04.140
DANIEL MYERS: Exactly.

00:03:04.140 --> 00:03:07.110
NETO MARIN: OK, it's a
very high level overview.

00:03:07.110 --> 00:03:09.510
Can you explain
some details, how

00:03:09.510 --> 00:03:11.970
this stuff is going back
and forth and working?

00:03:11.970 --> 00:03:13.012
DANIEL MYERS: Definitely.

00:03:13.012 --> 00:03:16.170
So at a high level,
you can think of it

00:03:16.170 --> 00:03:17.825
as cloud-to-cloud communication.

00:03:17.825 --> 00:03:18.450
NETO MARIN: OK.

00:03:18.450 --> 00:03:19.867
DANIEL MYERS: So
the first element

00:03:19.867 --> 00:03:22.650
is just me, the user,
saying a command--

00:03:22.650 --> 00:03:24.720
"turn on my washer."

00:03:24.720 --> 00:03:27.210
Google Assistant
takes that audio,

00:03:27.210 --> 00:03:30.930
transcribes it into text, and
then applies natural language

00:03:30.930 --> 00:03:35.640
understanding, and ultimately
outputs a structured JSON

00:03:35.640 --> 00:03:39.400
response to your cloud service.

00:03:39.400 --> 00:03:42.670
So think of, like,
Philips Hue, for example.

00:03:42.670 --> 00:03:44.910
If you buy a Philips
Hue light bulb,

00:03:44.910 --> 00:03:48.030
that will have its own
application, its own cloud

00:03:48.030 --> 00:03:50.610
service, that you can use
to control those lights.

00:03:50.610 --> 00:03:52.860
NETO MARIN: And you have to
log into your own account,

00:03:52.860 --> 00:03:55.380
make all the process to assure
that you are not turning off

00:03:55.380 --> 00:03:57.733
your neighborhood lamp, so
something like that, right?

00:03:57.733 --> 00:03:58.650
DANIEL MYERS: Exactly.

00:03:58.650 --> 00:04:01.530
And so in this case,
Google Assistant

00:04:01.530 --> 00:04:04.255
communicates with their
cloud service, right?

00:04:04.255 --> 00:04:06.630
So if you're turning on and
off a Philips Hue light bulb,

00:04:06.630 --> 00:04:09.132
Google Assistant communicates
with Philips Hue.

00:04:09.132 --> 00:04:10.590
NETO MARIN: OK, so
similar to that,

00:04:10.590 --> 00:04:13.210
we have for the
"regular action" what

00:04:13.210 --> 00:04:17.160
you call the webhook that can
manage the same high level

00:04:17.160 --> 00:04:17.769
architecture.

00:04:17.769 --> 00:04:21.063
So I have a webhook where
Google will call this webhook

00:04:21.063 --> 00:04:22.230
to send the commands, right?

00:04:22.230 --> 00:04:23.100
DANIEL MYERS: Exactly right.

00:04:23.100 --> 00:04:23.760
Exactly right.

00:04:23.760 --> 00:04:26.700
And so what I've
developed here today

00:04:26.700 --> 00:04:30.570
is my own cloud service that
accepts these structured JSON

00:04:30.570 --> 00:04:36.420
responses and then communicates
that information down

00:04:36.420 --> 00:04:37.250
to the device.

00:04:37.250 --> 00:04:37.875
NETO MARIN: OK.

00:04:37.875 --> 00:04:42.030
DANIEL MYERS: In this case, I'm
using Firebase as my transport

00:04:42.030 --> 00:04:43.150
down to the device.

00:04:43.150 --> 00:04:45.930
And this is looking at
various database states

00:04:45.930 --> 00:04:47.880
that it's subscribed to.

00:04:47.880 --> 00:04:48.780
NETO MARIN: OK, cool.

00:04:48.780 --> 00:04:51.030
So basically, what
you need is, like,

00:04:51.030 --> 00:04:53.940
you need to set up your
webhook, your environment,

00:04:53.940 --> 00:04:58.020
your cloud servelets or
whatever you're using,

00:04:58.020 --> 00:05:00.310
and enable these
to receive commands

00:05:00.310 --> 00:05:03.390
through JSON from the Google
Home, right, or the Google

00:05:03.390 --> 00:05:04.430
Assistant.

00:05:04.430 --> 00:05:07.798
And there is one word you
said, like, HomeGraph.

00:05:07.798 --> 00:05:08.590
DANIEL MYERS: Yeah.

00:05:08.590 --> 00:05:09.840
NETO MARIN: What is HomeGraph?

00:05:09.840 --> 00:05:10.630
What does it mean?

00:05:10.630 --> 00:05:12.130
DANIEL MYERS: Yeah,
so the HomeGraph

00:05:12.130 --> 00:05:16.090
is a very critical
element with Smart Home.

00:05:16.090 --> 00:05:19.790
It houses all of the contextual
information about you,

00:05:19.790 --> 00:05:21.460
your devices, and your home.

00:05:21.460 --> 00:05:24.730
So think of-- you
might have five or six

00:05:24.730 --> 00:05:26.480
different smart light
bulbs in your house.

00:05:26.480 --> 00:05:27.910
You might have a smart washer.

00:05:27.910 --> 00:05:28.953
You might have a fan.

00:05:28.953 --> 00:05:29.620
You might have--

00:05:29.620 --> 00:05:30.280
NETO MARIN: Microwave.

00:05:30.280 --> 00:05:32.680
DANIEL MYERS: --microwave
or a thermometer somewhere--

00:05:32.680 --> 00:05:34.600
thermostat.

00:05:34.600 --> 00:05:37.180
All of that information is
stored in the HomeGraph.

00:05:37.180 --> 00:05:40.720
So when you say a command,
"turn on all the lights

00:05:40.720 --> 00:05:44.590
in my kitchen," Google Assistant
is querying the HomeGraph

00:05:44.590 --> 00:05:46.870
to get a list of
all the lights that

00:05:46.870 --> 00:05:49.780
are actually in your kitchen.

00:05:49.780 --> 00:05:54.250
If you say, for example, "dim
the lights just a little bit,"

00:05:54.250 --> 00:05:56.580
it's going to query and
see what the current state

00:05:56.580 --> 00:06:00.003
of the dimming is and then
dim it just a little bit.

00:06:00.003 --> 00:06:01.420
NETO MARIN: And
this is important.

00:06:01.420 --> 00:06:05.080
Because, for example, at my
house, I have me and my wife.

00:06:05.080 --> 00:06:10.210
So for example, I was the only
one that configured the lights

00:06:10.210 --> 00:06:13.540
and set it up on my Assistant.

00:06:13.540 --> 00:06:16.150
But she's also able to
turn on and turn off.

00:06:16.150 --> 00:06:20.590
Because since she belongs to the
same home in my configuration,

00:06:20.590 --> 00:06:23.440
she has access to the
same HomeGraph, right?

00:06:23.440 --> 00:06:25.690
DANIEL MYERS: As long
as you share, you can--

00:06:25.690 --> 00:06:27.130
NETO MARIN: Of course,
you have to authorize--

00:06:27.130 --> 00:06:27.550
DANIEL MYERS: Right.

00:06:27.550 --> 00:06:28.070
NETO MARIN: Exactly.

00:06:28.070 --> 00:06:28.520
DANIEL MYERS: Exactly.

00:06:28.520 --> 00:06:30.062
And you know, it's
important to note,

00:06:30.062 --> 00:06:31.750
too, this is a very
critical aspect,

00:06:31.750 --> 00:06:36.190
is that a smart home action
that uses the HomeGraph

00:06:36.190 --> 00:06:38.890
is distinctly different from
a conversational action.

00:06:38.890 --> 00:06:40.682
NETO MARIN: Yeah, this
is my next question.

00:06:40.682 --> 00:06:41.220
OK, great.

00:06:41.220 --> 00:06:43.390
DANIEL MYERS: And so with
a conversational action,

00:06:43.390 --> 00:06:45.460
you have to provide
various training phrases,

00:06:45.460 --> 00:06:47.920
and you can create
any custom intent

00:06:47.920 --> 00:06:49.637
that you want for your agent.

00:06:49.637 --> 00:06:51.220
NETO MARIN: You don't
need to do this.

00:06:51.220 --> 00:06:52.210
DANIEL MYERS: That's
exactly right.

00:06:52.210 --> 00:06:54.130
So for smart home,
we have a fixed set

00:06:54.130 --> 00:06:59.920
of intents, which include
things like onSync, onQuery,

00:06:59.920 --> 00:07:01.690
onExecute, and onDisconnect.

00:07:01.690 --> 00:07:02.350
NETO MARIN: OK.

00:07:02.350 --> 00:07:04.183
DANIEL MYERS: These are
the various commands

00:07:04.183 --> 00:07:07.030
that you can give
to a cloud service

00:07:07.030 --> 00:07:09.580
to do various
things with devices.

00:07:09.580 --> 00:07:12.310
NETO MARIN: One of the commands
you said was "turbo," right?

00:07:12.310 --> 00:07:15.130
And this is because
you are washing--

00:07:15.130 --> 00:07:17.920
your washer supports turbo mode.

00:07:17.920 --> 00:07:20.320
If you try to change
to another program,

00:07:20.320 --> 00:07:26.230
I don't need to train my action,
my home automation action,

00:07:26.230 --> 00:07:28.810
to know my different modes,
not because you understand

00:07:28.810 --> 00:07:31.380
the other phrase and
you send the parameters,

00:07:31.380 --> 00:07:33.940
then you handle these parameters
in your back end, right?

00:07:33.940 --> 00:07:35.398
DANIEL MYERS: That's
exactly right.

00:07:35.398 --> 00:07:38.230
So that's one of the beautiful
aspects of Smart Home,

00:07:38.230 --> 00:07:41.500
is that you, as the
developer, define

00:07:41.500 --> 00:07:43.990
the capabilities of the device.

00:07:43.990 --> 00:07:47.320
So if we take the example
of a smart light bulb,

00:07:47.320 --> 00:07:50.210
most smart light bulbs that I
know, you can turn on and off.

00:07:50.210 --> 00:07:51.970
Some you can dim.

00:07:51.970 --> 00:07:54.493
And others, you can
also change the color.

00:07:54.493 --> 00:07:55.660
NETO MARIN: The color, yeah.

00:07:55.660 --> 00:07:58.570
DANIEL MYERS: So these are three
distinct different capabilities

00:07:58.570 --> 00:07:59.980
of a light bulb.

00:07:59.980 --> 00:08:03.160
Now, how do you define that
so that Google Assistant can

00:08:03.160 --> 00:08:04.930
control those capabilities?

00:08:04.930 --> 00:08:07.780
We have a thing
called device traits.

00:08:07.780 --> 00:08:10.840
We have a huge collection
of different device traits

00:08:10.840 --> 00:08:14.490
that you can use to define the
capabilities of your device.

00:08:14.490 --> 00:08:15.470
NETO MARIN: Oh, OK.

00:08:15.470 --> 00:08:16.600
Nice, nice.

00:08:16.600 --> 00:08:17.410
So OK.

00:08:17.410 --> 00:08:19.150
You said developer,
as a developer.

00:08:19.150 --> 00:08:20.530
So as a developer, I'm excited.

00:08:20.530 --> 00:08:25.150
Want to build something
to my homebrew system.

00:08:25.150 --> 00:08:27.520
What are the requirements?

00:08:27.520 --> 00:08:32.059
What do I need to start
developing for home automation

00:08:32.059 --> 00:08:33.110
with Google Assistant?

00:08:33.110 --> 00:08:37.330
DANIEL MYERS: Yeah, so my
personal favorite route to go

00:08:37.330 --> 00:08:41.289
is our Smart Home Codelab
that we have online.

00:08:41.289 --> 00:08:42.159
NETO MARIN: Sure.

00:08:42.159 --> 00:08:43.826
DANIEL MYERS: The
biggest thing that you

00:08:43.826 --> 00:08:45.190
need is just a computer.

00:08:45.190 --> 00:08:48.800
You don't even have to have a
physical device to get started.

00:08:48.800 --> 00:08:51.880
You can actually do it all
virtually through the Codelab.

00:08:51.880 --> 00:08:54.430
If you want, you can
definitely have a Raspberry Pi

00:08:54.430 --> 00:08:55.900
or any other type of device.

00:08:55.900 --> 00:08:57.317
NETO MARIN: These
boards are cool.

00:08:57.317 --> 00:08:58.240
DANIEL MYERS: Exactly.

00:08:58.240 --> 00:09:01.660
And my suggestion is to
take a look at the Codelab.

00:09:01.660 --> 00:09:04.720
The Codelab walks you
through every individual step

00:09:04.720 --> 00:09:07.570
of creating your first
smart device that you

00:09:07.570 --> 00:09:08.780
control through Assistant.

00:09:08.780 --> 00:09:10.060
NETO MARIN: OK, so cool.

00:09:10.060 --> 00:09:11.950
Let's start coding
these and actually

00:09:11.950 --> 00:09:17.215
see how the parts fit together
and how the codes organize it.

00:09:17.215 --> 00:09:17.790
Yeah.

00:09:17.790 --> 00:09:18.623
Let's show the code.

00:09:18.623 --> 00:09:21.460
People are shaking
sometime without code.

00:09:21.460 --> 00:09:21.970
Let's see.

00:09:21.970 --> 00:09:22.887
DANIEL MYERS: Perfect.

00:09:22.887 --> 00:09:25.300
So the way I've
set this up today

00:09:25.300 --> 00:09:28.870
is using Firebase
Cloud functions.

00:09:28.870 --> 00:09:35.020
So I have here in my code
here various functions

00:09:35.020 --> 00:09:40.690
that I've deployed that we
use throughout the controlling

00:09:40.690 --> 00:09:43.180
aspect of this IoT device.

00:09:43.180 --> 00:09:45.400
NETO MARIN: OK, and you are
using the Node JS client

00:09:45.400 --> 00:09:46.320
library, right?

00:09:46.320 --> 00:09:46.640
DANIEL MYERS: Exactly.

00:09:46.640 --> 00:09:48.100
NETO MARIN: So we
already have a client lab

00:09:48.100 --> 00:09:50.260
that supports all the
interaction of the home

00:09:50.260 --> 00:09:51.200
automation, right?

00:09:51.200 --> 00:09:51.950
DANIEL MYERS: Yes.

00:09:51.950 --> 00:09:55.840
So we have a Actions on Google
client library for Node JS.

00:09:55.840 --> 00:10:00.040
You can see here, I also have
imported Firebase functions.

00:10:00.040 --> 00:10:02.440
And you can see
also that I'm using

00:10:02.440 --> 00:10:05.140
Firebase Admin for
my persistence layer

00:10:05.140 --> 00:10:07.400
to store the various
states of my device.

00:10:07.400 --> 00:10:08.890
NETO MARIN: OK, cool.

00:10:08.890 --> 00:10:11.140
DANIEL MYERS: And so
the biggest things

00:10:11.140 --> 00:10:14.920
that we need when developing
for Smart Home, as we

00:10:14.920 --> 00:10:17.290
stated earlier, are those
four fixed intents--

00:10:17.290 --> 00:10:20.930
the onSync, onQuery,
onExecute, and onDisconnect.

00:10:20.930 --> 00:10:21.610
NETO MARIN: OK.

00:10:21.610 --> 00:10:24.310
DANIEL MYERS: And so what
I have here is the onSync.

00:10:24.310 --> 00:10:28.180
What this does is
it provides a list

00:10:28.180 --> 00:10:31.540
of all the devices
for a particular user

00:10:31.540 --> 00:10:32.540
on your service.

00:10:32.540 --> 00:10:34.082
NETO MARIN: It's
like Google querying

00:10:34.082 --> 00:10:37.323
for these titles of your stuff.

00:10:37.323 --> 00:10:38.240
DANIEL MYERS: Exactly.

00:10:38.240 --> 00:10:39.140
NETO MARIN: Your
connected stuff.

00:10:39.140 --> 00:10:39.973
DANIEL MYERS: Right.

00:10:39.973 --> 00:10:41.840
And so when you
initially go in--

00:10:41.840 --> 00:10:45.080
and say you just
bought a new light bulb

00:10:45.080 --> 00:10:48.590
and you want to control
it through Assistant,

00:10:48.590 --> 00:10:50.853
you have to go through this
initial linking process,

00:10:50.853 --> 00:10:51.520
account linking.

00:10:51.520 --> 00:10:52.228
NETO MARIN: Yeah.

00:10:52.228 --> 00:10:56.360
Listen, but when I'm on Home
hub, when I just swipe to left

00:10:56.360 --> 00:11:00.830
and I see all my
home stuff connected,

00:11:00.830 --> 00:11:05.000
like light bulb, thermostat,
it's querying all my devices,

00:11:05.000 --> 00:11:09.802
calling onSync method for onSync
API for all my stuff connected

00:11:09.802 --> 00:11:11.510
and returning me the
[INAUDIBLE],, right?

00:11:11.510 --> 00:11:12.290
So something like that.

00:11:12.290 --> 00:11:13.280
DANIEL MYERS: Right.

00:11:13.280 --> 00:11:18.560
And so we see here that I have
one device called a washer.

00:11:18.560 --> 00:11:22.470
And we have a specific device
type of a washer as well.

00:11:22.470 --> 00:11:24.080
NETO MARIN: OK, quick question.

00:11:24.080 --> 00:11:27.830
So these types are defined
in our documentation, right?

00:11:27.830 --> 00:11:30.445
So you can't just come up
with a [INAUDIBLE] device.

00:11:30.445 --> 00:11:31.820
I can't come up
with a new device

00:11:31.820 --> 00:11:33.500
and just add a device there.

00:11:33.500 --> 00:11:34.460
It won't work, right?

00:11:34.460 --> 00:11:36.360
Because it won't
have the traits.

00:11:36.360 --> 00:11:36.860
Exactly.

00:11:36.860 --> 00:11:38.480
DANIEL MYERS: So you
can mix and match

00:11:38.480 --> 00:11:40.590
traits on different
device types.

00:11:40.590 --> 00:11:44.960
But you are correct that we have
a fixed set of device types.

00:11:44.960 --> 00:11:47.750
The reason why we have
these device types

00:11:47.750 --> 00:11:52.340
is that, for example, when
you actually say a command,

00:11:52.340 --> 00:11:55.400
we show an icon of a washing
machine, for example.

00:11:55.400 --> 00:11:58.790
We use the context of
the actual type of device

00:11:58.790 --> 00:12:00.770
in various ways
in the HomeGraph.

00:12:00.770 --> 00:12:02.355
NETO MARIN: Cool, cool, yeah.

00:12:02.355 --> 00:12:03.980
DANIEL MYERS: And so
you can see here I

00:12:03.980 --> 00:12:07.130
have five different traits or
five different capabilities

00:12:07.130 --> 00:12:08.310
of this device.

00:12:08.310 --> 00:12:09.900
So it can turn on and off.

00:12:09.900 --> 00:12:12.890
I can start and stop
the various cycles.

00:12:12.890 --> 00:12:15.080
I have a Run cycle.

00:12:15.080 --> 00:12:18.830
I have modes, and
I have toggles.

00:12:18.830 --> 00:12:21.800
And so those are the
capabilities of the device,

00:12:21.800 --> 00:12:22.920
and I can mix and match.

00:12:22.920 --> 00:12:27.200
If I don't want it to be able
to have the Turbo toggle,

00:12:27.200 --> 00:12:29.120
for example, then
I can remove that,

00:12:29.120 --> 00:12:30.453
and you can no longer use Turbo.

00:12:30.453 --> 00:12:32.037
NETO MARIN: So some
features you don't

00:12:32.037 --> 00:12:33.740
want to expose to
the home automation.

00:12:33.740 --> 00:12:35.403
You just don't have the trait.

00:12:35.403 --> 00:12:36.320
DANIEL MYERS: Exactly.

00:12:36.320 --> 00:12:39.630
NETO MARIN: Yeah, like many
door lockers, they don't have,

00:12:39.630 --> 00:12:41.450
for example, the unlock option.

00:12:41.450 --> 00:12:44.210
Because someone could
say, hey, unlock the door,

00:12:44.210 --> 00:12:46.510
and can open it and
go into your house.

00:12:46.510 --> 00:12:49.190
So you can hide some traits
if you think it's critical,

00:12:49.190 --> 00:12:50.373
for example, right?

00:12:50.373 --> 00:12:51.290
DANIEL MYERS: Exactly.

00:12:51.290 --> 00:12:52.075
NETO MARIN: Cool.

00:12:52.075 --> 00:12:54.200
DANIEL MYERS: So you can
see here a little bit more

00:12:54.200 --> 00:12:55.240
about the attributes.

00:12:55.240 --> 00:12:59.580
So when we look at what modes,
so when you look at modes,

00:12:59.580 --> 00:13:02.150
you're going to
have a set of modes.

00:13:02.150 --> 00:13:05.380
In our case, I've
set up two modes.

00:13:05.380 --> 00:13:07.880
There is a Small
Load and a Large Load

00:13:07.880 --> 00:13:09.470
for a washing machine.

00:13:09.470 --> 00:13:12.500
And so this is what it looks
like in our structured JSON

00:13:12.500 --> 00:13:17.780
response on how that's defined
for giving it back to Google.

00:13:17.780 --> 00:13:19.140
NETO MARIN: OK, cool.

00:13:19.140 --> 00:13:24.050
So if, for example, I'm
defining a specific brand,

00:13:24.050 --> 00:13:29.390
and I have specific modes
that I want to expose.

00:13:29.390 --> 00:13:33.230
But then I launch a new
feature, I launch a new washer,

00:13:33.230 --> 00:13:36.740
then I can add new traits,
for example, or new modes.

00:13:36.740 --> 00:13:41.097
I can go here, update
my onSync method,

00:13:41.097 --> 00:13:42.680
and then don't need
to deploy anything

00:13:42.680 --> 00:13:44.120
to the Google Assistant.

00:13:44.120 --> 00:13:46.310
It would be live,
available to test

00:13:46.310 --> 00:13:48.038
these new modes,
for example, right?

00:13:48.038 --> 00:13:48.830
DANIEL MYERS: Yeah.

00:13:48.830 --> 00:13:53.030
As long as you are developing
in a private state,

00:13:53.030 --> 00:13:57.440
you can continually update your
various traits, and your device

00:13:57.440 --> 00:14:01.490
types, and things like
that on your devices.

00:14:01.490 --> 00:14:05.220
And it'll be able to
reflect on the device.

00:14:05.220 --> 00:14:08.900
You would still need to have
some type of on-device logic

00:14:08.900 --> 00:14:12.740
to be able to ingest
that information.

00:14:12.740 --> 00:14:17.030
NETO MARIN: Because at some
point, your, how can I say,

00:14:17.030 --> 00:14:20.333
server must communicate
to your stuff at home

00:14:20.333 --> 00:14:21.500
and send the command to you.

00:14:21.500 --> 00:14:24.680
So the washer must have
like a Wi-Fi board.

00:14:24.680 --> 00:14:27.300
And we must go
through the setup.

00:14:27.300 --> 00:14:30.902
If you're a washer,
connect to your Wi-Fi

00:14:30.902 --> 00:14:31.860
and this kind of thing.

00:14:31.860 --> 00:14:35.750
So, yeah, I imagine you're
talking about the home

00:14:35.750 --> 00:14:38.170
stuff, the Assistant stuff.

00:14:38.170 --> 00:14:40.760
But, yes, just keep in mind,
if you develop something new,

00:14:40.760 --> 00:14:43.610
you should still work
on the hardware side.

00:14:43.610 --> 00:14:45.710
We're not giving
everything to you yet,

00:14:45.710 --> 00:14:48.565
but, yeah, you need to set up
the part of your own machine

00:14:48.565 --> 00:14:50.240
or your own device.

00:14:50.240 --> 00:14:50.990
It makes sense.

00:14:50.990 --> 00:14:52.615
DANIEL MYERS: And we
do that on purpose

00:14:52.615 --> 00:14:56.630
because we know that
developers want flexibility.

00:14:56.630 --> 00:15:00.440
We don't define a
fixed approach on how

00:15:00.440 --> 00:15:03.660
your Cloud service communicates
and controls your devices.

00:15:03.660 --> 00:15:05.280
NETO MARIN: It makes sense.

00:15:05.280 --> 00:15:05.780
Cool.

00:15:05.780 --> 00:15:12.020
So for example, there
is a question I can say.

00:15:12.020 --> 00:15:14.180
The door is locked,
something like that,

00:15:14.180 --> 00:15:17.450
or just to see the status
when I open my Assistant

00:15:17.450 --> 00:15:19.940
and see this tells
of my stuff, it's

00:15:19.940 --> 00:15:22.610
hitting this part, this method.

00:15:22.610 --> 00:15:27.570
In what other situations
this method is used?

00:15:27.570 --> 00:15:30.650
DANIEL MYERS: So the
sync, the actual response

00:15:30.650 --> 00:15:37.370
that's returned, is also used
when you request to sync.

00:15:37.370 --> 00:15:39.370
NETO MARIN: Specifically,
I can request a sync.

00:15:39.370 --> 00:15:41.920
DANIEL MYERS: You can request
one from your Cloud service.

00:15:41.920 --> 00:15:45.100
So if a user already
has five lights

00:15:45.100 --> 00:15:47.470
and they go out and
purchase another light,

00:15:47.470 --> 00:15:50.270
they're going to have
now a sixth light.

00:15:50.270 --> 00:15:52.180
If they want to
be able to control

00:15:52.180 --> 00:15:55.870
that sixth light in addition,
then, when they register it

00:15:55.870 --> 00:15:58.210
on your Cloud
service, it's ideal

00:15:58.210 --> 00:16:00.640
that your Cloud service
then alerts Google, hey,

00:16:00.640 --> 00:16:02.140
they've added another device.

00:16:02.140 --> 00:16:03.112
Will you sync with me?

00:16:03.112 --> 00:16:03.820
NETO MARIN: Cool.

00:16:03.820 --> 00:16:09.650
And when you said, "Turn on
the washer," how did it happen?

00:16:09.650 --> 00:16:11.470
DANIEL MYERS: So
what happens there

00:16:11.470 --> 00:16:15.905
is that actually goes through
onto the onExecute intent.

00:16:15.905 --> 00:16:17.110
NETO MARIN: Execute, OK.

00:16:17.110 --> 00:16:22.330
DANIEL MYERS: And so this
here is the execution intent

00:16:22.330 --> 00:16:26.050
of going through and looking
at the various inputs

00:16:26.050 --> 00:16:29.500
of the command itself.

00:16:29.500 --> 00:16:33.850
And so I look for
what exact command

00:16:33.850 --> 00:16:37.690
that it's doing, so on/off,
start/stop, pause/unpause,

00:16:37.690 --> 00:16:39.070
set modes, or set toggles.

00:16:39.070 --> 00:16:42.880
NETO MARIN: And commands
were defined in your onSync,

00:16:42.880 --> 00:16:46.390
for example, when
you define the device

00:16:46.390 --> 00:16:49.043
or define what you're
waiting for, right?

00:16:49.043 --> 00:16:49.960
DANIEL MYERS: Exactly.

00:16:49.960 --> 00:16:55.750
And so all of these you
can see match to the traits

00:16:55.750 --> 00:16:57.570
that we've defined
earlier, like you said.

00:16:57.570 --> 00:16:59.470
So the on/off matches--

00:16:59.470 --> 00:17:06.730
this is devices.commands.OnOff--
matches that of traits.OnOff.

00:17:06.730 --> 00:17:09.973
And so each different trait
has different commands

00:17:09.973 --> 00:17:11.140
that are associated with it.

00:17:11.140 --> 00:17:13.839
NETO MARIN: OK, cool.

00:17:13.839 --> 00:17:15.849
DANIEL MYERS: And so
another important aspect

00:17:15.849 --> 00:17:19.359
when looking at this
code is the onQuery.

00:17:19.359 --> 00:17:23.680
I can ask Google Assistant, is
my washer running right now?

00:17:23.680 --> 00:17:25.930
Another great question is,
if you have a refrigerator,

00:17:25.930 --> 00:17:27.472
you can actually
ask Google Assistant

00:17:27.472 --> 00:17:30.485
if your refrigerator is running,
and you better go catch it.

00:17:30.485 --> 00:17:32.110
NETO MARIN: It's a
good question, yeah.

00:17:32.110 --> 00:17:36.490
DANIEL MYERS: And so
onQuery is the function that

00:17:36.490 --> 00:17:38.190
actually returns that state.

00:17:38.190 --> 00:17:39.407
NETO MARIN: OK, nice.

00:17:39.407 --> 00:17:40.990
DANIEL MYERS: And
so you can see here,

00:17:40.990 --> 00:17:44.830
it's getting which devices the
user is asking about the state

00:17:44.830 --> 00:17:46.150
for.

00:17:46.150 --> 00:17:49.728
And then it's able to get that
information and return it.

00:17:49.728 --> 00:17:51.560
NETO MARIN: Cool.

00:17:51.560 --> 00:17:56.230
DANIEL MYERS: Lastly, the final
and fourth intent that I want

00:17:56.230 --> 00:18:00.830
to go over is the onDisconnect.

00:18:00.830 --> 00:18:05.060
So for onDisconnect,
the disconnect intent

00:18:05.060 --> 00:18:10.730
is the one that shows when
a user unlinks their account

00:18:10.730 --> 00:18:13.383
with Google Assistant.

00:18:13.383 --> 00:18:15.800
NETO MARIN: Removed one of
these light bulbs, for example.

00:18:15.800 --> 00:18:18.620
DANIEL MYERS: Right,
they remove a light bulb.

00:18:18.620 --> 00:18:23.480
Or they no longer have
their washing machine.

00:18:23.480 --> 00:18:27.260
Maybe they sell it and
they no longer have it

00:18:27.260 --> 00:18:31.850
And so that's what the
onDisconnect. is used for.

00:18:31.850 --> 00:18:36.590
And the second part that
I want to go over for this

00:18:36.590 --> 00:18:38.600
is the on-device
logic that I have.

00:18:38.600 --> 00:18:40.980
NETO MARIN: Yeah, cool, cool.

00:18:40.980 --> 00:18:45.480
Right now, for example, can you
go, for example, and execute

00:18:45.480 --> 00:18:46.190
code?

00:18:46.190 --> 00:18:49.830
I can see here that, in this
case, you are doing Firebase,

00:18:49.830 --> 00:18:54.190
and you are changing,
updating a field.

00:18:54.190 --> 00:18:56.210
And this is your logic.

00:18:56.210 --> 00:19:01.520
And then, I suppose
as an amateur maker,

00:19:01.520 --> 00:19:04.610
you have something
in your device

00:19:04.610 --> 00:19:06.880
that's connected
to this database

00:19:06.880 --> 00:19:09.220
that you receive an
update that is valid,

00:19:09.220 --> 00:19:13.400
change it, and then can
do the hardware logic.

00:19:13.400 --> 00:19:14.630
Something like that?

00:19:14.630 --> 00:19:17.420
DANIEL MYERS: Right,
that's correct.

00:19:17.420 --> 00:19:22.700
So you can see my
Firebase reference here.

00:19:22.700 --> 00:19:25.880
I have a specific field
of the deviceID that

00:19:25.880 --> 00:19:27.250
represents my washing machine.

00:19:27.250 --> 00:19:29.720
NETO MARIN: So you don't want
to turn off your neighborhood

00:19:29.720 --> 00:19:30.720
washer machine.

00:19:30.720 --> 00:19:33.050
DANIEL MYERS: And then I
have a child called OnOff

00:19:33.050 --> 00:19:36.500
that I update the value of
to the parameter that was

00:19:36.500 --> 00:19:38.720
given to me in this request.

00:19:38.720 --> 00:19:41.870
NETO MARIN: And a
question-- this was defined

00:19:41.870 --> 00:19:43.390
by you, for example, right?

00:19:43.390 --> 00:19:47.090
You are the hardware maker, you
are the owner of this process,

00:19:47.090 --> 00:19:48.390
and you define the structure.

00:19:48.390 --> 00:19:52.700
So our viewers are, OK,
but I don't use Firebase.

00:19:52.700 --> 00:19:57.680
I use MQTT to send
messages from the function.

00:19:57.680 --> 00:19:58.610
No problem, right?

00:19:58.610 --> 00:19:59.943
DANIEL MYERS: No problem at all.

00:19:59.943 --> 00:20:03.260
NETO MARIN: Since it's here
capturing this column from here

00:20:03.260 --> 00:20:06.290
and changing these toggles
on the actual machine,

00:20:06.290 --> 00:20:11.180
on the actual hardware, there
is no locking or dependence

00:20:11.180 --> 00:20:14.570
of having to use a Firebase
for this case, right?

00:20:14.570 --> 00:20:15.830
DANIEL MYERS: Correct.

00:20:15.830 --> 00:20:17.205
NETO MARIN: Even
though it can be

00:20:17.205 --> 00:20:21.020
like external API, the other API
on another server, the one you

00:20:21.020 --> 00:20:23.300
may isolate from
the home stuff, it

00:20:23.300 --> 00:20:25.880
can have another
call for API, right?

00:20:25.880 --> 00:20:27.050
DANIEL MYERS: Exactly.

00:20:27.050 --> 00:20:30.410
And so all of this,
you can abstract away

00:20:30.410 --> 00:20:33.360
to any type of persistence
layer, like you said.

00:20:33.360 --> 00:20:36.460
You can use anything
from GCP, for example,

00:20:36.460 --> 00:20:38.688
to store this information
and query later.

00:20:38.688 --> 00:20:40.730
NETO MARIN: Yeah, because
sometimes, for example,

00:20:40.730 --> 00:20:45.407
I just imagine-- of course, use
Firebase, it's a great tool.

00:20:45.407 --> 00:20:47.490
But maybe they already
have something implemented.

00:20:47.490 --> 00:20:49.670
They already have
an infrastructure

00:20:49.670 --> 00:20:53.610
for this hardware and
they want to implement it.

00:20:53.610 --> 00:20:56.220
So you don't need to
migrate to Firebase first

00:20:56.220 --> 00:20:57.380
to integrate your hardware.

00:20:57.380 --> 00:20:58.755
So if you already
have a hardware

00:20:58.755 --> 00:21:01.880
and you are looking to integrate
Google Assistant to home

00:21:01.880 --> 00:21:03.408
automation, you can do it.

00:21:03.408 --> 00:21:04.700
You don't need to use Firebase.

00:21:04.700 --> 00:21:05.825
All this is is a structure.

00:21:05.825 --> 00:21:07.520
So I think this is
the message, right?

00:21:07.520 --> 00:21:08.353
DANIEL MYERS: Right.

00:21:08.353 --> 00:21:09.320
Right.

00:21:09.320 --> 00:21:13.190
So when we look
at how the device

00:21:13.190 --> 00:21:19.037
ingests this database
information--

00:21:19.037 --> 00:21:20.120
let's take a look at that.

00:21:20.120 --> 00:21:20.828
NETO MARIN: Sure.

00:21:20.828 --> 00:21:26.090
DANIEL MYERS: So this
is the file that I have.

00:21:26.090 --> 00:21:29.483
It runs on the Raspberry
Pi, on this AIY kit.

00:21:29.483 --> 00:21:30.900
And you can see
here a few things.

00:21:30.900 --> 00:21:34.910
One, I'm using Firebase
Admin as the way

00:21:34.910 --> 00:21:38.690
that I subscribe to
various elements.

00:21:38.690 --> 00:21:42.113
NETO MARIN: And look, this
is not Node.js, I'm seeing.

00:21:42.113 --> 00:21:43.280
DANIEL MYERS: Correct, yeah.

00:21:43.280 --> 00:21:44.360
This is Python.

00:21:44.360 --> 00:21:47.540
NETO MARIN: So I don't need
even to use the same language.

00:21:47.540 --> 00:21:52.173
Because it's not running on
the call function, right?

00:21:52.173 --> 00:21:53.090
DANIEL MYERS: Correct.

00:21:53.090 --> 00:21:56.765
NETO MARIN: So this code would
be running in the device?

00:21:56.765 --> 00:21:57.890
DANIEL MYERS: That's right.

00:21:57.890 --> 00:21:58.650
NETO MARIN: Cool.

00:21:58.650 --> 00:22:00.108
DANIEL MYERS: So
this is everything

00:22:00.108 --> 00:22:02.140
that's running on device.

00:22:02.140 --> 00:22:03.810
So you could have anything.

00:22:03.810 --> 00:22:05.420
You could be running Java.

00:22:05.420 --> 00:22:10.160
You could be running Node.js,
any number of other languages,

00:22:10.160 --> 00:22:14.300
and all doing the same
thing of listening

00:22:14.300 --> 00:22:16.320
for different database changes.

00:22:16.320 --> 00:22:19.500
NETO MARIN: So here you have the
logic for your washer machine.

00:22:19.500 --> 00:22:21.110
So this is the point here.

00:22:21.110 --> 00:22:22.550
And part of this
logic, of course,

00:22:22.550 --> 00:22:25.482
is read the state from the
home automation, right?

00:22:25.482 --> 00:22:26.315
DANIEL MYERS: Right.

00:22:26.315 --> 00:22:27.210
Right.

00:22:27.210 --> 00:22:29.210
So the things that
I'm controlling here

00:22:29.210 --> 00:22:33.320
is the color of the
light on the button

00:22:33.320 --> 00:22:36.950
of this washing machine and
then the various initial states

00:22:36.950 --> 00:22:37.970
that I set.

00:22:37.970 --> 00:22:41.510
It's currently off, it's not
on Turbo, it's not running,

00:22:41.510 --> 00:22:47.110
and it's currently paused.

00:22:47.110 --> 00:22:53.120
And so what we have here
is the various listeners

00:22:53.120 --> 00:22:55.640
and what I do inside
each of these listeners.

00:22:55.640 --> 00:22:57.580
I actually set up
the listeners here.

00:22:57.580 --> 00:23:01.802
So I'm referencing various
elements within my database.

00:23:01.802 --> 00:23:03.010
NETO MARIN: Cool, yeah, yeah.

00:23:03.010 --> 00:23:05.560
DANIEL MYERS: So a good
thing to take a look at here,

00:23:05.560 --> 00:23:09.970
actually, is let's hop over
here and look at the structure

00:23:09.970 --> 00:23:11.450
of my database.

00:23:11.450 --> 00:23:12.790
NETO MARIN: Sure, cool.

00:23:12.790 --> 00:23:17.480
This is how you organized the
data for each device you have,

00:23:17.480 --> 00:23:17.980
right?

00:23:17.980 --> 00:23:20.290
This will reflect each washer.

00:23:20.290 --> 00:23:26.010
So I imagine this is the
database that the brand owns,

00:23:26.010 --> 00:23:26.530
right?

00:23:26.530 --> 00:23:30.730
And we'll have like one registry
per linkage with the account,

00:23:30.730 --> 00:23:31.360
exactly?

00:23:31.360 --> 00:23:31.950
DANIEL MYERS: Right.

00:23:31.950 --> 00:23:32.770
NETO MARIN: More or less.

00:23:32.770 --> 00:23:34.030
Of course, they can
change the architecture.

00:23:34.030 --> 00:23:35.940
They can have different
authentication.

00:23:35.940 --> 00:23:40.960
But this register on the washer,
it's specific for one hardware,

00:23:40.960 --> 00:23:41.600
right?

00:23:41.600 --> 00:23:42.350
DANIEL MYERS: Yes.

00:23:42.350 --> 00:23:45.970
So because this
is for a Codelab,

00:23:45.970 --> 00:23:48.190
there's some hard
coding done here

00:23:48.190 --> 00:23:51.010
to just one washer and one user.

00:23:51.010 --> 00:23:54.760
So this kind of goes
as an MVP bare minimum

00:23:54.760 --> 00:23:57.857
of showing an example
of how this would work.

00:23:57.857 --> 00:23:58.690
NETO MARIN: Exactly.

00:23:58.690 --> 00:24:01.780
DANIEL MYERS: And so I've
expanded each element

00:24:01.780 --> 00:24:04.720
here to show what's inside.

00:24:04.720 --> 00:24:10.840
And so when I have from here a
reference of /washer/OnOff/on/,

00:24:10.840 --> 00:24:16.330
what that's actually looking
for is any changes to this field

00:24:16.330 --> 00:24:17.143
here.

00:24:17.143 --> 00:24:18.310
NETO MARIN: Let's show this.

00:24:18.310 --> 00:24:20.330
Can you ask again to--

00:24:20.330 --> 00:24:21.190
not here.

00:24:21.190 --> 00:24:24.950
Say the command in your voice
on the phone to turn it on.

00:24:24.950 --> 00:24:26.920
Let's see it changing
here in the database

00:24:26.920 --> 00:24:29.652
so they can see how it's
connected to each one.

00:24:29.652 --> 00:24:31.360
DANIEL MYERS: And so
what you'll see here

00:24:31.360 --> 00:24:33.970
is you'll see all
of this change.

00:24:33.970 --> 00:24:37.510
You'll see some colors change
here and the value of OnOff

00:24:37.510 --> 00:24:38.800
to become true.

00:24:38.800 --> 00:24:41.510
You'll see this
also flip to be on.

00:24:41.510 --> 00:24:43.510
NETO MARIN: Yeah, quick
question-- what is this?

00:24:43.510 --> 00:24:45.280
DANIEL MYERS: So this is--

00:24:45.280 --> 00:24:50.440
think of Philips Hue website
or the Philips Hue mobile phone

00:24:50.440 --> 00:24:51.140
app.

00:24:51.140 --> 00:24:56.260
This is the Codelab
front end for controlling

00:24:56.260 --> 00:24:57.320
your washing machine.

00:24:57.320 --> 00:24:58.862
NETO MARIN: So even
if you don't have

00:24:58.862 --> 00:25:00.250
your device,
physical device, you

00:25:00.250 --> 00:25:03.805
can check the status
from this web page?

00:25:03.805 --> 00:25:04.930
DANIEL MYERS: That's right.

00:25:04.930 --> 00:25:07.000
NETO MARIN: And even if
you're in a testing mode,

00:25:07.000 --> 00:25:12.520
you can write this for your own
hardware and your own endpoint

00:25:12.520 --> 00:25:13.950
and check the
status through this.

00:25:13.950 --> 00:25:15.430
So you don't need to
actually have the hardware

00:25:15.430 --> 00:25:16.705
all the time with you, right?

00:25:16.705 --> 00:25:17.620
DANIEL MYERS: Right, exactly.

00:25:17.620 --> 00:25:19.870
NETO MARIN: Because it's
reading the same data, right?

00:25:19.870 --> 00:25:20.910
So cool.

00:25:20.910 --> 00:25:23.110
DANIEL MYERS: And so you'll
see this change here.

00:25:23.110 --> 00:25:24.790
You'll see this change here.

00:25:24.790 --> 00:25:27.220
And then you'll also
see, in this terminal,

00:25:27.220 --> 00:25:32.080
the actual device
have an output of when

00:25:32.080 --> 00:25:33.080
it receives the command.

00:25:33.080 --> 00:25:35.650
NETO MARIN: OK, it's like your
debug window for the device.

00:25:35.650 --> 00:25:36.483
DANIEL MYERS: Right.

00:25:36.483 --> 00:25:39.310
So I'm SSHed into my
Raspberry Pi here.

00:25:39.310 --> 00:25:40.025
NETO MARIN: Cool.

00:25:40.025 --> 00:25:41.650
DANIEL MYERS: So
let's watch it happen.

00:25:41.650 --> 00:25:42.650
NETO MARIN: Do the show.

00:25:45.020 --> 00:25:47.722
Turn on my washer.

00:25:47.722 --> 00:25:49.555
GOOGLE ASSISTANT: OK,
turning on the washer.

00:25:49.555 --> 00:25:49.810
NETO MARIN: Cool.

00:25:49.810 --> 00:25:50.620
I see there.

00:25:50.620 --> 00:25:52.320
It's true here.

00:25:52.320 --> 00:25:54.588
Toggle there is on.

00:25:54.588 --> 00:25:56.630
DANIEL MYERS: And it showed
that it's turning on.

00:25:56.630 --> 00:26:00.370
So all three elements
there in near real time

00:26:00.370 --> 00:26:03.500
is event-based where,
based on your voice,

00:26:03.500 --> 00:26:05.450
it's doing all of these things.

00:26:05.450 --> 00:26:06.492
NETO MARIN: So it's good.

00:26:06.492 --> 00:26:09.580
Because you said the command,
the system parsed the command

00:26:09.580 --> 00:26:13.480
and saw there was
something to your washer,

00:26:13.480 --> 00:26:17.080
checking your HomeGraph, say,
yeah, he has a washer, then

00:26:17.080 --> 00:26:21.460
called this webhook
with the onExecute,

00:26:21.460 --> 00:26:23.350
sent the trait, the driver.

00:26:23.350 --> 00:26:24.910
You updated the database.

00:26:24.910 --> 00:26:27.190
And it was like immediately.

00:26:27.190 --> 00:26:30.460
DANIEL MYERS: Right, that's the
beauty of all of this going.

00:26:30.460 --> 00:26:32.020
It's all event-based.

00:26:32.020 --> 00:26:34.540
It happens so fast.

00:26:34.540 --> 00:26:36.860
And that's why I like doing IoT.

00:26:36.860 --> 00:26:38.830
NETO MARIN: Yes, man, it's cool.

00:26:38.830 --> 00:26:41.170
Personally, it's
something I really like.

00:26:41.170 --> 00:26:44.230
I'm able to spend a weekend
connecting wires and trying

00:26:44.230 --> 00:26:46.480
to run random stuff.

00:26:46.480 --> 00:26:47.200
It's cool.

00:26:47.200 --> 00:26:47.950
So cool.

00:26:47.950 --> 00:26:50.890
I think we've covered
a lot of stuff here.

00:26:50.890 --> 00:26:54.090
Can you just recap
some steps that they

00:26:54.090 --> 00:26:55.960
have to keep in mind
when developing this?

00:26:55.960 --> 00:26:56.918
DANIEL MYERS: For sure.

00:26:56.918 --> 00:26:59.590
So from a high level,
the big thing to remember

00:26:59.590 --> 00:27:02.680
is that this is cloud-to-cloud
communication where

00:27:02.680 --> 00:27:08.290
the developer responsibility
is taking in a structured JSON

00:27:08.290 --> 00:27:11.800
response from Google,
applying some logic to that

00:27:11.800 --> 00:27:15.490
of what state the
device should do,

00:27:15.490 --> 00:27:19.090
and then actually
controlling the device.

00:27:19.090 --> 00:27:22.660
And so from our perspective
here, the way we've set this up

00:27:22.660 --> 00:27:24.460
is that we're using
Firebase Cloud

00:27:24.460 --> 00:27:26.350
functions for the
various intents

00:27:26.350 --> 00:27:27.910
that we're listening for.

00:27:27.910 --> 00:27:31.990
And then we're using Firebase
as the persistence layer

00:27:31.990 --> 00:27:34.660
to store the device state.

00:27:34.660 --> 00:27:36.790
And then the Python
application that's

00:27:36.790 --> 00:27:39.820
running on the
Raspberry Pi listens

00:27:39.820 --> 00:27:41.172
for those various states.

00:27:41.172 --> 00:27:42.130
NETO MARIN: Cool, yeah.

00:27:42.130 --> 00:27:42.940
This is so cool.

00:27:42.940 --> 00:27:45.550
I'm very excited because
I like this stuff.

00:27:45.550 --> 00:27:47.140
I like IoT stuff.

00:27:47.140 --> 00:27:50.060
So, yes, thanks for being here.

00:27:50.060 --> 00:27:50.870
Thanks for sharing.

00:27:50.870 --> 00:27:52.210
This is amazing.

00:27:52.210 --> 00:27:53.920
I think if they want
to find us, they

00:27:53.920 --> 00:27:56.920
can reach us through our
team's Twitter handle,

00:27:56.920 --> 00:27:58.610
@ActionsOnGoogle.

00:27:58.610 --> 00:28:00.370
And if you're sharing
something with us,

00:28:00.370 --> 00:28:03.820
also use the hashtag #AoGDevs
so we can see your cool stuff

00:28:03.820 --> 00:28:05.730
or making question to us.

00:28:05.730 --> 00:28:07.070
It would be great.

00:28:07.070 --> 00:28:09.738
And also, we have the
Reddit Actions on Google,

00:28:09.738 --> 00:28:11.530
so you can ask questions,
meet other people

00:28:11.530 --> 00:28:12.695
from the community.

00:28:12.695 --> 00:28:14.320
And if they have a
question, where they

00:28:14.320 --> 00:28:15.692
can go for technical questions?

00:28:15.692 --> 00:28:16.900
DANIEL MYERS: Stack Overflow.

00:28:16.900 --> 00:28:18.025
NETO MARIN: Stack Overflow.

00:28:18.025 --> 00:28:20.200
So Actions on Google
would be great.

00:28:20.200 --> 00:28:21.740
And thanks for watching.

00:28:21.740 --> 00:28:24.150
Please give your comment,
your feedback, what you think,

00:28:24.150 --> 00:28:26.290
what next episodes
you are waiting for.

00:28:26.290 --> 00:28:28.070
And we'll be glad
to produce for you.

00:28:28.070 --> 00:28:29.317
OK, see you next time.

00:28:29.317 --> 00:28:30.150
DANIEL MYERS: Thanks

00:28:30.150 --> 00:28:31.700
[JINGLE]

