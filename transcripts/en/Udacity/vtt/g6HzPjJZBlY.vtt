WEBVTT
Kind: captions
Language: en

00:00:00.025 --> 00:00:03.340
To explain how we can actually keep this
from getting out of hand if it doesn't

00:00:03.340 --> 00:00:06.000
need to be, we're going to
look at one special operation.

00:00:06.000 --> 00:00:07.680
And let me draw
a picture of it first and

00:00:07.680 --> 00:00:09.130
then we'll talk about
it more mathematically.

00:00:09.130 --> 00:00:11.789
All right, so do you [LAUGH]
do you see what I drew here?

00:00:11.789 --> 00:00:12.719
&gt;&gt; A web.

00:00:12.719 --> 00:00:14.660
&gt;&gt; [LAUGH] Yeah,
it doesn't look so great, does it?

00:00:14.660 --> 00:00:19.030
So this is intended to be a piecewise
linear convex function, so

00:00:19.030 --> 00:00:20.820
basically a value function.

00:00:20.820 --> 00:00:25.570
And remember that what we end up doing
is over belief space, that's the black

00:00:25.570 --> 00:00:29.340
line here, we're going to be taking
the max over all these linear functions.

00:00:29.340 --> 00:00:31.640
So we get this upper surface.

00:00:31.640 --> 00:00:34.400
&gt;&gt; Wait, I see, you can get rid of
any of the vectors that don't ever

00:00:34.400 --> 00:00:36.320
participate in the max
because they don't matter.

00:00:36.320 --> 00:00:39.250
&gt;&gt; Yeah, and so that's going to keep
our vector sets potentially from

00:00:39.250 --> 00:00:40.420
blowing up if they don't need to.

00:00:40.420 --> 00:00:44.820
So in this particular case I drew, what,
one, two, three, four, five vectors.

00:00:44.820 --> 00:00:47.310
But only three of them are really
needed to represent the function.

00:00:47.310 --> 00:00:50.050
This one's not needed and
this one is not needed.

00:00:50.050 --> 00:00:54.540
So we can define a computational
operation, that we call purge,

00:00:54.540 --> 00:00:58.470
that takes a bag of vectors and
shrinks it down,

00:00:58.470 --> 00:01:02.210
purges out any vectors that
aren't really needed to represent

00:01:02.210 --> 00:01:04.540
the upper surface,
the piecewise linear convex function.

00:01:04.540 --> 00:01:06.780
&gt;&gt; Wait, how computationally
complicated is it to do that?

00:01:06.780 --> 00:01:07.700
&gt;&gt; That's a good question.

00:01:07.700 --> 00:01:08.480
&gt;&gt; Thank you.

00:01:08.480 --> 00:01:11.335
&gt;&gt; [LAUGH] So
how computationally complicated is it?

00:01:11.335 --> 00:01:13.112
&gt;&gt; It's at least linear.

00:01:13.112 --> 00:01:14.494
&gt;&gt; It's at least linear, yeah, and so

00:01:14.494 --> 00:01:16.107
there's some quick
tests that you can do.

00:01:16.107 --> 00:01:18.740
So let's look at this vector first,
this vector number one here.

00:01:18.740 --> 00:01:21.920
If you look, what you can see
is that over belief space,

00:01:21.920 --> 00:01:25.540
this 01 zone here,
there's another vector,

00:01:25.540 --> 00:01:29.970
specifically this one, call it
vector 2 that always dominates it.

00:01:29.970 --> 00:01:32.480
It is always the case
that you can do better

00:01:32.480 --> 00:01:34.870
by taking vector 2 instead of vector 1.

00:01:34.870 --> 00:01:37.240
So if there's a vector that is
dominated by another vector,

00:01:37.240 --> 00:01:38.500
you could totally throw it out.

00:01:38.500 --> 00:01:40.551
&gt;&gt; But you ought to be able to
figure out by doing something cute,

00:01:40.551 --> 00:01:42.447
like multiplying them together or
taking their cosine or

00:01:42.447 --> 00:01:45.066
their angle, there's something you ought
to be able to do to figure that out.

00:01:45.066 --> 00:01:48.300
&gt;&gt; Actually all you have
to do is check the corners.

00:01:48.300 --> 00:01:50.970
&gt;&gt; If it's bigger on both 0 and 1, that
must be bigger the whole way through.

00:01:50.970 --> 00:01:54.743
&gt;&gt; Well, in particular,
let's say we have two vectors like this,

00:01:54.743 --> 00:01:59.650
with components alpha 1, alpha 2,
alpha 3, and this is this vector.

00:01:59.650 --> 00:02:02.737
And the other vector's represented
by alpha 1 prime, alpha 2 prime,

00:02:02.737 --> 00:02:04.010
alpha 3 prime.

00:02:04.010 --> 00:02:07.250
If it's the case that alpha 1 is
bigger than alpha 1 prime, and

00:02:07.250 --> 00:02:09.139
alpha 2 is bigger than alpha 2 prime,
and

00:02:09.139 --> 00:02:13.230
alpha 3 is bigger than alpha 3 prime,
then this vector is not needed, right.

00:02:13.230 --> 00:02:14.810
No matter what belief
state you stick in,

00:02:14.810 --> 00:02:18.650
you're going to get a higher value out
by using this vector than that one.

00:02:18.650 --> 00:02:20.920
&gt;&gt; Does it have to be strictly
dominated, or can it just be dominated?

00:02:20.920 --> 00:02:24.250
So, if one is greater than or
equal to the other,

00:02:24.250 --> 00:02:26.710
you can get rid of the one that
is less than or equal to, right?

00:02:26.710 --> 00:02:28.180
&gt;&gt; Yes.
&gt;&gt; All right, that's neat.

00:02:28.180 --> 00:02:31.605
&gt;&gt; Yeah, there's some subtleties
to doing this consistently.

00:02:31.605 --> 00:02:32.769
In my dissertation,

00:02:32.769 --> 00:02:36.521
I talk about how you can use a
lexicographic ordering of the vectors to

00:02:36.521 --> 00:02:41.330
make sure that you only keep things that
really are going to be needed someplace.

00:02:41.330 --> 00:02:44.007
But that is a subtlety that I don't
think is very important for this.

00:02:44.007 --> 00:02:46.984
This dominated check is actually really
easy to do and it's very fast, but

00:02:46.984 --> 00:02:49.440
unfortunately, it's not sufficient.

00:02:49.440 --> 00:02:52.530
So let's look at this vector,
we'll call it number 3.

00:02:52.530 --> 00:02:56.970
This one is better than
each of the other vectors,

00:02:56.970 --> 00:02:59.060
at some point along the way, but

00:02:59.060 --> 00:03:03.600
the union of the other vector, the union
of these three vectors dominates it.

00:03:03.600 --> 00:03:06.186
So showing that is actually
considerably more difficult.

00:03:06.186 --> 00:03:10.380
Knowing that 3 doesn't matter,
isn't needed, because over

00:03:10.380 --> 00:03:14.430
here it's dominated by this vector, over
here it's dominated by this vector, and

00:03:14.430 --> 00:03:15.940
over here it's dominated by that vector.

00:03:15.940 --> 00:03:17.115
&gt;&gt; Wait, what you said isn't true.

00:03:17.115 --> 00:03:21.490
3 is dominated by the one that first
does the max all the way through.

00:03:21.490 --> 00:03:22.510
&gt;&gt; You mean this one, 4?

00:03:22.510 --> 00:03:24.428
&gt;&gt; Yeah.
&gt;&gt; Yes, that is a good point.

00:03:24.428 --> 00:03:27.370
&gt;&gt; [LAUGH]
&gt;&gt; All right, that sounds like a quiz.

00:03:27.370 --> 00:03:27.870
&gt;&gt; Okay.

