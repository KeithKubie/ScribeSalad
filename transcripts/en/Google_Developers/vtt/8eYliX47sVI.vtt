WEBVTT
Kind: captions
Language: en

00:00:04.330 --> 00:00:06.350
JEFF POSNICK: Thanks for coming
out today to our talk

00:00:06.350 --> 00:00:08.905
on the embeddable YouTube
upload widget.

00:00:11.960 --> 00:00:14.066
So I'm Jeff Posnick.

00:00:14.066 --> 00:00:18.340
I'm from the YouTube API
developer relations team based

00:00:18.340 --> 00:00:19.510
in New York City.

00:00:19.510 --> 00:00:23.620
And joining me today is Eric
Lundberg, who is the engineer

00:00:23.620 --> 00:00:26.910
responsible for the YouTube
embeddable upload widget.

00:00:26.910 --> 00:00:28.910
And we're really psyched
to be presenting today.

00:00:32.549 --> 00:00:36.570
So before I get into any more
details, I wanted to make it

00:00:36.570 --> 00:00:40.770
very clear that what we're
showing today is a preview of

00:00:40.770 --> 00:00:42.700
things that we will be releasing
to the general

00:00:42.700 --> 00:00:45.640
developer community hopefully
very soon now.

00:00:45.640 --> 00:00:50.670
So we don't have any actual URLs
or docs that you could go

00:00:50.670 --> 00:00:54.660
off and try right
away right now.

00:00:54.660 --> 00:00:56.390
But we're going to be showing
you some things that we hope

00:00:56.390 --> 00:00:58.060
to make available very soon.

00:01:02.760 --> 00:01:04.810
I'm going to give an overview
of what we're going to be

00:01:04.810 --> 00:01:06.490
covering today.

00:01:06.490 --> 00:01:08.760
Eric's going to start by talking
about what exactly

00:01:08.760 --> 00:01:10.680
this embeddable upload
widget is.

00:01:10.680 --> 00:01:13.920
He's going to demonstrate an
example integration that we

00:01:13.920 --> 00:01:18.160
had with one of our trusted,
tester, prerelease partners,

00:01:18.160 --> 00:01:21.970
Formspring, show you how they're
using the widget

00:01:21.970 --> 00:01:23.530
within their site.

00:01:23.530 --> 00:01:26.270
He's going to go into more
detail about how he wrote the

00:01:26.270 --> 00:01:30.700
widget, some pretty cool
JavaScript stuff that he was

00:01:30.700 --> 00:01:33.020
doing, and just how
he built it.

00:01:33.020 --> 00:01:35.830
And then he's going to talk
about how you could use the

00:01:35.830 --> 00:01:38.330
widget on your own site.

00:01:38.330 --> 00:01:42.560
I'm going to go at that point
into a case study about our

00:01:42.560 --> 00:01:46.760
featured integration of the
widget in a new project that

00:01:46.760 --> 00:01:49.280
we're calling YouTube
Direct Lite.

00:01:49.280 --> 00:01:52.600
And at that point we'll have
some time at the end for

00:01:52.600 --> 00:01:55.100
questions and hopefully some
answers that we can provide.

00:01:57.770 --> 00:02:00.460
So with that, I'm going to
pass things over to Eric.

00:02:00.460 --> 00:02:02.000
ERIC LUNDBERG: Thanks, Jeff.

00:02:02.000 --> 00:02:05.880
So the YouTube embeddable upload
widget is simply a way

00:02:05.880 --> 00:02:10.030
for any website to support
uploads directly to YouTube

00:02:10.030 --> 00:02:14.590
from their own website without
leaving that website.

00:02:14.590 --> 00:02:18.330
And just like with uploads on
YouTube.com, normal uploads,

00:02:18.330 --> 00:02:22.390
the videos that the user uploads
belong to that user.

00:02:22.390 --> 00:02:26.010
However, additionally, the
host website can see the

00:02:26.010 --> 00:02:29.260
videos that come through the
widget and keep a list of

00:02:29.260 --> 00:02:33.860
those videos for whatever
reason they'd like to.

00:02:33.860 --> 00:02:35.260
And the widget has
two main modes.

00:02:35.260 --> 00:02:38.180
You can either record on the fly
using the user's webcam,

00:02:38.180 --> 00:02:40.210
if they have a webcam.

00:02:40.210 --> 00:02:43.750
Or the user can select the file
from their computer and

00:02:43.750 --> 00:02:50.280
upload it just like with the
uploads on the website today.

00:02:50.280 --> 00:02:52.440
So why did we build it?

00:02:52.440 --> 00:02:55.460
First of all, it was one of the
most requested things on

00:02:55.460 --> 00:02:59.650
our public issue tracker,
on our developer forum.

00:02:59.650 --> 00:03:04.060
And additionally, we wanted a
solution, a video upload API

00:03:04.060 --> 00:03:08.010
solution that allows external
uploads with really minimal

00:03:08.010 --> 00:03:09.470
integration effort.

00:03:09.470 --> 00:03:12.870
There are a few options today
with JavaScript, some server

00:03:12.870 --> 00:03:14.300
side deployments.

00:03:14.300 --> 00:03:19.600
But none of them are as simple
as we think this will be.

00:03:19.600 --> 00:03:21.740
And we really see two main
use cases for this.

00:03:21.740 --> 00:03:24.740
First of all, a web community,
a self-contained web

00:03:24.740 --> 00:03:29.330
community, can maintain a list
of videos that belong to them

00:03:29.330 --> 00:03:33.690
that were uploaded by the
members of that community.

00:03:33.690 --> 00:03:37.980
And also a blog or a new site
can post an article and

00:03:37.980 --> 00:03:41.830
solicit video responses from
that article directly from the

00:03:41.830 --> 00:03:43.620
article itself just like
a user would go

00:03:43.620 --> 00:03:45.300
and type a text comment.

00:03:45.300 --> 00:03:46.980
Have it appear on the site.

00:03:46.980 --> 00:03:50.580
They can solicit a video comment
and then just embed

00:03:50.580 --> 00:03:52.130
that video right in their
comment stream.

00:03:56.390 --> 00:03:59.040
The API to the widget looks very
similar to what we have

00:03:59.040 --> 00:04:01.400
today for the iframe player.

00:04:01.400 --> 00:04:02.870
There are two main
ways to use it.

00:04:02.870 --> 00:04:05.470
First, you can just
simply copy and

00:04:05.470 --> 00:04:08.162
paste this HTML snippet.

00:04:08.162 --> 00:04:12.110
Just put the iframe directly
in your HTML.

00:04:12.110 --> 00:04:15.485
Give it some basic parameters,
width and height, and it

00:04:15.485 --> 00:04:16.589
should just work.

00:04:16.589 --> 00:04:18.769
However, if you want to get a
little bit more advanced, you

00:04:18.769 --> 00:04:22.060
can use the JavaScript
API that we provide.

00:04:22.060 --> 00:04:25.230
And you do that by, as you can
see at the very bottom,

00:04:25.230 --> 00:04:27.860
loading a script from
YouTube.com.

00:04:27.860 --> 00:04:30.760
And that script gives you the
symbols that you need to

00:04:30.760 --> 00:04:35.320
create a widget, specifically
yt.upload widget.

00:04:35.320 --> 00:04:38.780
You call that constructor with
the name of the DOM element

00:04:38.780 --> 00:04:40.640
that you want to replace.

00:04:40.640 --> 00:04:43.920
And again some parameters,
here you have width.

00:04:43.920 --> 00:04:44.800
We pass in width.

00:04:44.800 --> 00:04:46.320
The height is determined
for us.

00:04:46.320 --> 00:04:48.740
We pass in some events.

00:04:48.740 --> 00:04:51.710
In this example,
onUploadsuccess.

00:04:51.710 --> 00:04:54.950
And that onUploadsuccess
function will be called

00:04:54.950 --> 00:04:58.790
anytime a user successfully
uploads a video to YouTube

00:04:58.790 --> 00:05:00.240
through the widget
on your site.

00:05:03.520 --> 00:05:05.900
Before I get too much into the
technical details, I want to

00:05:05.900 --> 00:05:08.740
show you an example integration
that one of our

00:05:08.740 --> 00:05:14.000
partners, Formspring, put
together and allowed us to

00:05:14.000 --> 00:05:16.520
show at I/O today.

00:05:16.520 --> 00:05:18.780
Formspring is a platform
for online discussions.

00:05:18.780 --> 00:05:21.230
It's primarily a question
and answer forum.

00:05:21.230 --> 00:05:24.820
A user can post a question and
other users can respond.

00:05:24.820 --> 00:05:27.320
Or a user can just say,
I am such and

00:05:27.320 --> 00:05:29.000
such, ask me anything.

00:05:29.000 --> 00:05:31.100
And users post them questions
and then they

00:05:31.100 --> 00:05:32.760
have to answer them.

00:05:32.760 --> 00:05:36.690
And today there are two
main ways of posting

00:05:36.690 --> 00:05:38.040
questions and answers.

00:05:38.040 --> 00:05:40.060
Basically, just text
and images.

00:05:40.060 --> 00:05:44.210
But this embeddable upload
widget now allows the

00:05:44.210 --> 00:05:46.820
opportunity for video
responses.

00:05:46.820 --> 00:05:49.230
And let me just show you
what that looks like.

00:05:49.230 --> 00:05:52.980
First of all, let me just say
this is a staging version of

00:05:52.980 --> 00:05:53.680
their website.

00:05:53.680 --> 00:05:56.360
So there may be a few
issues with it.

00:05:56.360 --> 00:05:59.520
But we should be able to show
you how our widget looks like

00:05:59.520 --> 00:06:02.110
embedded on their page.

00:06:02.110 --> 00:06:03.540
So it looks like it's working.

00:06:06.380 --> 00:06:08.290
Here's a number of questions
and answers

00:06:08.290 --> 00:06:10.190
that are here already.

00:06:10.190 --> 00:06:13.020
I can just go to the top here,
ask my friends a question.

00:06:13.020 --> 00:06:14.630
I could type something here.

00:06:14.630 --> 00:06:16.530
I could post an image.

00:06:16.530 --> 00:06:18.890
But what I'm going to do is
click on this little movie

00:06:18.890 --> 00:06:25.150
icon and record a webcam video
question for my users.

00:06:27.840 --> 00:06:33.250
So first, Flash comes up and
asks me to set some settings

00:06:33.250 --> 00:06:35.880
and asked me, do I want to allow
YouTube to access my

00:06:35.880 --> 00:06:36.800
camera and microphone.

00:06:36.800 --> 00:06:38.690
I say yes.

00:06:38.690 --> 00:06:42.040
And this is what I have.

00:06:42.040 --> 00:06:47.180
So I'm just going to ask
my friends a question.

00:06:47.180 --> 00:06:48.755
How are you enjoying
I/O today?

00:06:51.280 --> 00:06:55.066
Now I can play that back.

00:06:55.066 --> 00:06:55.490
[VIDEO PLAYBACK]

00:06:55.490 --> 00:06:57.160
-How are you enjoying
I/O today?

00:06:57.160 --> 00:06:57.570
[END VIDEO PLAYBACK]

00:06:57.570 --> 00:07:00.470
ERIC LUNDBERG: And if I'm happy
with it I can just go

00:07:00.470 --> 00:07:01.720
right to upload.

00:07:05.020 --> 00:07:07.780
And as you can see at the top
there, it's put a link to that

00:07:07.780 --> 00:07:13.390
video right into the
host widget here.

00:07:13.390 --> 00:07:16.110
And I can ask that question.

00:07:16.110 --> 00:07:19.160
The way they get that video
link is again through that

00:07:19.160 --> 00:07:21.780
onUploadSuccess callback that
I showed you earlier.

00:07:21.780 --> 00:07:25.910
Once I upload the video, the
host site sees that video ID

00:07:25.910 --> 00:07:27.760
and can create the video link.

00:07:31.670 --> 00:07:35.200
And just to show you how simple
this is, here I've

00:07:35.200 --> 00:07:38.630
actually taken the widget and
embedded it directly into our

00:07:38.630 --> 00:07:40.150
HTML slides.

00:07:40.150 --> 00:07:41.920
And it looks pretty much
the same here.

00:07:45.790 --> 00:07:47.610
There's also an option to
upload video files.

00:07:47.610 --> 00:07:50.340
I can select the file from my
hard drive and upload that.

00:07:53.550 --> 00:07:56.300
So now I'm going to go into a
bit of a deep dive on the

00:07:56.300 --> 00:07:57.750
technical implementation.

00:07:57.750 --> 00:07:59.970
Talk a bit about how we
built it and what

00:07:59.970 --> 00:08:02.900
technologies are involved.

00:08:02.900 --> 00:08:05.770
First, just a high
level overview of

00:08:05.770 --> 00:08:07.200
what this looks like.

00:08:07.200 --> 00:08:10.340
You have the web browser which
runs on the user's computer.

00:08:10.340 --> 00:08:13.870
And in their web browser they've
loaded your website.

00:08:13.870 --> 00:08:15.250
And in your website
you have your own

00:08:15.250 --> 00:08:18.280
JavaScript and some HTML.

00:08:18.280 --> 00:08:21.960
You've also embedded a script
that I've showed you earlier

00:08:21.960 --> 00:08:26.340
which loads the upload widget
symbols from YouTube.com.

00:08:26.340 --> 00:08:28.780
And you use that script to
create the upload widget which

00:08:28.780 --> 00:08:31.440
is shown here in blue.

00:08:31.440 --> 00:08:34.760
And the widget can talk
to your JavaScript.

00:08:34.760 --> 00:08:36.983
I'll go into that a
bit more later.

00:08:36.983 --> 00:08:40.110
And it also talks to YouTube
primarily by uploading the

00:08:40.110 --> 00:08:41.959
actual videos to YouTube.

00:08:45.380 --> 00:08:47.300
Let me talk first just a little
bit about the API

00:08:47.300 --> 00:08:49.300
that's available.

00:08:49.300 --> 00:08:52.160
When this is ready we'll publish
some complete docs,

00:08:52.160 --> 00:08:55.300
but just to give you
a quick overview.

00:08:55.300 --> 00:08:59.445
You have a set of callbacks,
onApiReady, which is triggered

00:08:59.445 --> 00:09:03.150
the first time the widget loads
and the JavaScript API

00:09:03.150 --> 00:09:04.640
is available.

00:09:04.640 --> 00:09:07.810
onUploadSuccess, which fires
anytime a video is

00:09:07.810 --> 00:09:10.670
successfully uploaded
to YouTube.

00:09:10.670 --> 00:09:13.740
onProcessingComplete, which
happens when that video is

00:09:13.740 --> 00:09:17.080
viewable and for example you
could take that callback and

00:09:17.080 --> 00:09:22.210
at that point embed a iframe
player in your website.

00:09:22.210 --> 00:09:25.040
onVideoIDAvailable just means
that the YouTube video ID, the

00:09:25.040 --> 00:09:27.810
public video ID, is available.

00:09:27.810 --> 00:09:31.480
onStateChange happens anytime
that the webcam widget changes

00:09:31.480 --> 00:09:36.390
state, maybe from playback,
to recording, to idle.

00:09:36.390 --> 00:09:39.970
And onWebcamCancel happens if
the user clicks that cancel

00:09:39.970 --> 00:09:43.580
button that I showed you, that
takes them back to the main

00:09:43.580 --> 00:09:48.450
initial page that presents the
webcam or file options.

00:09:48.450 --> 00:09:50.070
And in addition to
these callbacks

00:09:50.070 --> 00:09:51.700
we have some commands.

00:09:51.700 --> 00:09:54.780
Currently these commands need
to be invoked during the

00:09:54.780 --> 00:09:59.590
onApiReady callback due
to timing issues.

00:09:59.590 --> 00:10:02.830
And they basically boil down
to setting metadata on the

00:10:02.830 --> 00:10:03.850
videos that are uploaded.

00:10:03.850 --> 00:10:07.260
You can set currently
description, keywords, and the

00:10:07.260 --> 00:10:08.510
actual title of the video.

00:10:11.740 --> 00:10:15.250
Our upload servers look-- we use
the same servers that we

00:10:15.250 --> 00:10:17.410
use for regular file uploads.

00:10:17.410 --> 00:10:20.900
The whole upload flow looks
very similar to the way

00:10:20.900 --> 00:10:23.150
uploads on My Videos Upload
look like today.

00:10:23.150 --> 00:10:24.990
Those upload servers run
on upload.YouTube.com.

00:10:27.610 --> 00:10:31.630
And we share quite a bit of the
JavaScript with the normal

00:10:31.630 --> 00:10:34.290
My Videos Upload site.

00:10:34.290 --> 00:10:37.270
These file uploads happen
via XHR when it's

00:10:37.270 --> 00:10:39.190
available using PUT.

00:10:39.190 --> 00:10:41.140
We use a resumable protocol.

00:10:41.140 --> 00:10:43.610
So if the user starts to upload
a file and then closes

00:10:43.610 --> 00:10:47.890
their web browser, they can come
back later, select that

00:10:47.890 --> 00:10:50.840
file again, and the upload
will just continue

00:10:50.840 --> 00:10:52.980
where it left off.

00:10:52.980 --> 00:10:57.160
And we do actually use CORS,
Cross-origin resource sharing,

00:10:57.160 --> 00:11:00.080
to communicate cross
from [? www ?]

00:11:00.080 --> 00:11:04.350
to upload when it's available
in the browser.

00:11:04.350 --> 00:11:06.260
And on non-XHR browsers
we have a

00:11:06.260 --> 00:11:07.450
couple of other options.

00:11:07.450 --> 00:11:11.560
For IE, we use Silverlight
if it's installed.

00:11:11.560 --> 00:11:14.690
Or for browsers that have
neither XHR nor Silverlight

00:11:14.690 --> 00:11:17.375
support, we'll just do
a simple HTTP post.

00:11:21.400 --> 00:11:25.190
For the webcam uploads we use a
protocol called RTMP, which

00:11:25.190 --> 00:11:27.370
stands for Real Time
Messaging Protocol.

00:11:27.370 --> 00:11:29.590
It was developed by Adobe.

00:11:29.590 --> 00:11:32.390
It was originally proprietary,
but now it's public.

00:11:32.390 --> 00:11:34.550
The spec is public and
Google has its own

00:11:34.550 --> 00:11:37.540
implementation of that.

00:11:37.540 --> 00:11:39.960
And because the initial version
of the webcam really

00:11:39.960 --> 00:11:42.740
actually requires Flash,
we don't yet

00:11:42.740 --> 00:11:46.840
have a full HTML solution.

00:11:46.840 --> 00:11:51.020
Using RTMP was very convenient
because the Flash plug-in

00:11:51.020 --> 00:11:56.120
itself and the Flash API
supports RTMP natively.

00:11:56.120 --> 00:11:58.500
And we actually use the same
service for RTMP as we do for

00:11:58.500 --> 00:12:00.790
the file uploads.

00:12:00.790 --> 00:12:04.060
On the client side, the widget
is just an iframe.

00:12:04.060 --> 00:12:06.330
It's an iframe which loads its
contents from the YouTube

00:12:06.330 --> 00:12:09.890
servlet, HTML, JavaScript,
CSS.

00:12:09.890 --> 00:12:13.320
And it implements a core
functionality of uploads,

00:12:13.320 --> 00:12:16.100
basically what you have on My
Videos Upload minus some of

00:12:16.100 --> 00:12:19.080
the advanced metadata editing
features which the user can

00:12:19.080 --> 00:12:23.240
still do later on the
website itself.

00:12:23.240 --> 00:12:25.600
And we actually share the
camera SWF with Google+.

00:12:25.600 --> 00:12:30.060
Google+ has its own webcam
application that just runs on

00:12:30.060 --> 00:12:31.060
the Google+ website.

00:12:31.060 --> 00:12:33.380
It's not an embeddable thing.

00:12:33.380 --> 00:12:36.490
And it allows someone to create
a webcam video and post

00:12:36.490 --> 00:12:39.930
that to their Google+ stream.

00:12:39.930 --> 00:12:42.150
We use the same code there.

00:12:42.150 --> 00:12:45.320
And thanks to HTML5 technology,
specifically

00:12:45.320 --> 00:12:48.920
something called postMessage,
the iframe widget and the

00:12:48.920 --> 00:12:51.820
window that's embedding it can
communicate with each other to

00:12:51.820 --> 00:12:53.070
a limited extent.

00:12:55.950 --> 00:12:58.020
PostMessage has been
around for quite a

00:12:58.020 --> 00:12:59.160
while in most browsers.

00:12:59.160 --> 00:13:00.690
It's in the most recent version

00:13:00.690 --> 00:13:02.370
of every major browser.

00:13:02.370 --> 00:13:05.580
Specifically, it has existed
since these versions that are

00:13:05.580 --> 00:13:07.790
listed here.

00:13:07.790 --> 00:13:10.050
And what it does is it allows
two windows that are running

00:13:10.050 --> 00:13:13.960
on different domains to talk to
each other by standardizing

00:13:13.960 --> 00:13:16.460
all communication
as JSON data.

00:13:16.460 --> 00:13:18.710
You pass an object to it and
that object gets converted to

00:13:18.710 --> 00:13:22.960
JSON data and that JSON data
arrives at the other window.

00:13:22.960 --> 00:13:26.560
And what this looks like
is-- you can see here--

00:13:26.560 --> 00:13:28.670
on the sender side, the
sender has a reference

00:13:28.670 --> 00:13:29.600
to the other window.

00:13:29.600 --> 00:13:32.070
And it just calls postMessage
on that window.

00:13:32.070 --> 00:13:34.860
It passes the message,
which is an object.

00:13:34.860 --> 00:13:38.900
And it can also specify
a targetOrigin.

00:13:38.900 --> 00:13:42.070
And I'll explain a bit more
about that later.

00:13:42.070 --> 00:13:45.190
The receiver, just as an event
listener for a special event

00:13:45.190 --> 00:13:47.970
called message, and it supplies
a receiveMessage

00:13:47.970 --> 00:13:52.650
callback which handles these
postMessages as they come in.

00:13:52.650 --> 00:13:55.660
And the nice thing for anyone
who's using the API, the

00:13:55.660 --> 00:13:57.820
widget API, is that they don't
need to implement this

00:13:57.820 --> 00:13:59.436
themselves.

00:13:59.436 --> 00:14:03.830
The API has both a host-side and
a YouTube-side component,

00:14:03.830 --> 00:14:06.200
and those pieces handle
the postMessage

00:14:06.200 --> 00:14:08.440
communication for you.

00:14:08.440 --> 00:14:12.100
All the API user needs to do is
supply some callbacks that

00:14:12.100 --> 00:14:17.470
are run when different
postMessages happen.

00:14:17.470 --> 00:14:18.990
Here's just a quick illustration
of what this

00:14:18.990 --> 00:14:20.710
looks like, very simple.

00:14:20.710 --> 00:14:24.950
You have Window A, let's
say that is our iframe.

00:14:24.950 --> 00:14:28.900
And when it loads, for example,
it sends that on

00:14:28.900 --> 00:14:32.610
ApiReady callback to the host
window via postMessage.

00:14:32.610 --> 00:14:37.010
That message arrives at the
other window and is processed

00:14:37.010 --> 00:14:39.280
just like any other
JavaScript event.

00:14:39.280 --> 00:14:42.990
It goes into an event queue and
those events are processed

00:14:42.990 --> 00:14:45.540
serially and single-threadedly.

00:14:48.400 --> 00:14:50.540
One thing that's kind of nice
about postMessage is that it

00:14:50.540 --> 00:14:54.170
standardizes this cross-window
communication as just simple

00:14:54.170 --> 00:14:55.290
event handling.

00:14:55.290 --> 00:14:59.580
And this is nice because in
general, browsers handle event

00:14:59.580 --> 00:15:03.420
handling more consistently
than just generic

00:15:03.420 --> 00:15:05.010
cross-window scripting.

00:15:05.010 --> 00:15:06.720
However, this can
be challenging.

00:15:06.720 --> 00:15:09.570
In some cases, like I said
during the onApiReady

00:15:09.570 --> 00:15:12.570
callback, the host and the
iframe need to synchronize a

00:15:12.570 --> 00:15:16.846
little bit and agree on what
metadata to set on the video.

00:15:16.846 --> 00:15:21.400
The way we handle this is by
sending another event from the

00:15:21.400 --> 00:15:24.670
host-side portion of that
JavaScript API.

00:15:24.670 --> 00:15:27.090
It says now the host is ready.

00:15:27.090 --> 00:15:28.300
And this just happens when that

00:15:28.300 --> 00:15:29.550
callback finishes running.

00:15:33.390 --> 00:15:36.060
The way we authenticate the user
using the widget is just

00:15:36.060 --> 00:15:40.400
the same as with any other
servlet that's running on

00:15:40.400 --> 00:15:42.010
YouTube.com.

00:15:42.010 --> 00:15:46.100
Because the iframe runs on
YouTube.com it has access to

00:15:46.100 --> 00:15:49.140
the YouTube cookie.

00:15:49.140 --> 00:15:51.660
And if the user isn't
logged in we

00:15:51.660 --> 00:15:53.210
still display the widget.

00:15:53.210 --> 00:15:55.860
But when the user clicks on a
button that requires them to

00:15:55.860 --> 00:15:58.480
use a feature like the
webcam or a file

00:15:58.480 --> 00:16:01.410
upload we launch a pop-up.

00:16:01.410 --> 00:16:05.460
And that pop-up prompts them
to log into Google.

00:16:05.460 --> 00:16:06.620
And it runs in a separate
window.

00:16:06.620 --> 00:16:08.750
The user can see that they're
logging into Google.

00:16:08.750 --> 00:16:10.000
They're not logging
into your website.

00:16:12.500 --> 00:16:15.860
And then once that happens the
widget has access to their

00:16:15.860 --> 00:16:18.070
cookie and all their
information.

00:16:18.070 --> 00:16:22.220
However, the hosting window does
not have access to that

00:16:22.220 --> 00:16:24.840
information because of the
same-origin-policy.

00:16:24.840 --> 00:16:27.390
There's two windows running on
different domains and that

00:16:27.390 --> 00:16:30.280
information isn't shared.

00:16:30.280 --> 00:16:32.900
And as usual, when a user
uploads a video to YouTube or

00:16:32.900 --> 00:16:36.520
when an user uses this widget,
they're only authorized to

00:16:36.520 --> 00:16:37.770
upload to their own channel.

00:16:40.330 --> 00:16:41.940
There's also some authentication
that happens

00:16:41.940 --> 00:16:43.910
between the windows
themselves.

00:16:43.910 --> 00:16:46.810
This is mostly handled for
us by the browser.

00:16:46.810 --> 00:16:49.840
To explain how this happens let
me just show you what a

00:16:49.840 --> 00:16:51.470
postMessage contains.

00:16:51.470 --> 00:16:55.310
It contains the data, which is
the JSON data, that comes from

00:16:55.310 --> 00:16:57.240
the other window.

00:16:57.240 --> 00:17:00.670
The origin, which is populated
by the browser, it indicates

00:17:00.670 --> 00:17:03.900
which domain sent
the postMessage.

00:17:03.900 --> 00:17:05.599
And the source window
which is just a

00:17:05.599 --> 00:17:07.260
reference to that window.

00:17:07.260 --> 00:17:12.290
So the receiving window can then
send postMessages back to

00:17:12.290 --> 00:17:14.470
the sender.

00:17:14.470 --> 00:17:18.380
And because this origin is
provided for us we don't need

00:17:18.380 --> 00:17:20.230
to authenticate the window.

00:17:20.230 --> 00:17:21.390
The browser tells
us who it is.

00:17:21.390 --> 00:17:25.240
We just need to authorize
that window.

00:17:25.240 --> 00:17:26.349
And as I mentioned
before, there's a

00:17:26.349 --> 00:17:28.500
targetOrigin parameter.

00:17:28.500 --> 00:17:31.660
When you send a postMessage,
the sender can tell the

00:17:31.660 --> 00:17:34.180
browser this message can
only be received by

00:17:34.180 --> 00:17:35.430
the following domain.

00:17:37.960 --> 00:17:41.800
Specifically in the widget, the
host-side portion of the

00:17:41.800 --> 00:17:45.930
API will only exchange
messages to or from

00:17:45.930 --> 00:17:48.650
YouTube.com.

00:17:48.650 --> 00:17:52.150
And the widget, the iframe side
of that API, only listens

00:17:52.150 --> 00:17:55.040
to messages from the domain
that actually loaded it.

00:17:55.040 --> 00:18:01.680
And this prevents a third window
from intercepting or

00:18:01.680 --> 00:18:06.080
forging communication between
your site and YouTube.com.

00:18:06.080 --> 00:18:09.430
And in addition, each widget
has its own unique ID.

00:18:09.430 --> 00:18:12.380
So if you embed multiple widgets
on your website, the

00:18:12.380 --> 00:18:14.670
messages should just be
delivered to the right place.

00:18:14.670 --> 00:18:16.255
And this is handled
again by the API.

00:18:19.080 --> 00:18:20.320
There's a lot that we
want to improve

00:18:20.320 --> 00:18:21.810
with this going forward.

00:18:21.810 --> 00:18:25.550
First and foremost, we want to
support something called

00:18:25.550 --> 00:18:28.890
getUserMedia which is part
of the HTML5 spec.

00:18:28.890 --> 00:18:31.710
It's in WebRTC, so it's
behind a flag in the

00:18:31.710 --> 00:18:33.880
latest Chrome Canary.

00:18:33.880 --> 00:18:38.300
And what this is, is its just
an interface getting webcam

00:18:38.300 --> 00:18:43.110
data, media streams,
using pure HTML.

00:18:43.110 --> 00:18:44.580
So it's in Chrome Canary.

00:18:44.580 --> 00:18:46.450
It's in the latest
version of Opera.

00:18:46.450 --> 00:18:48.690
It's in IE10.

00:18:48.690 --> 00:18:50.790
We haven't implemented anything
yet for the widget

00:18:50.790 --> 00:18:52.050
but we're working on it.

00:18:52.050 --> 00:18:55.290
The biggest blocker right now
for us is just finding a way

00:18:55.290 --> 00:18:59.310
to take that media stream and
create an actual video file.

00:18:59.310 --> 00:19:02.030
But the good news is that once
we figure out all the issues

00:19:02.030 --> 00:19:05.680
here we can just drop it into
the widget and the host site

00:19:05.680 --> 00:19:06.680
doesn't need to worry
about it.

00:19:06.680 --> 00:19:08.130
The API should look the same.

00:19:10.880 --> 00:19:14.290
Mobile is also still very
much a work in progress.

00:19:14.290 --> 00:19:17.310
The bad news is that there is
no in-browser application.

00:19:17.310 --> 00:19:22.160
Again for that you need
getUserMedia.

00:19:22.160 --> 00:19:24.850
That's under development
in several browsers.

00:19:24.850 --> 00:19:28.030
Opera Mobile 12 has an
implementation, the first and

00:19:28.030 --> 00:19:30.600
only implementation.

00:19:30.600 --> 00:19:32.490
The good news is today
though that this

00:19:32.490 --> 00:19:34.170
sort of works in Android.

00:19:34.170 --> 00:19:36.780
If the user loads the widget
on their Android phone and

00:19:36.780 --> 00:19:39.790
they select the file upload,
the Android will give you a

00:19:39.790 --> 00:19:40.440
few options.

00:19:40.440 --> 00:19:41.960
One of those options
is to create a

00:19:41.960 --> 00:19:44.040
file using the camcorder.

00:19:44.040 --> 00:19:46.920
And then if you choose that
option you just go out to the

00:19:46.920 --> 00:19:50.250
camcorder, record your
video, hit OK.

00:19:50.250 --> 00:19:55.600
That video becomes a file and
goes to YouTube as a normal

00:19:55.600 --> 00:19:58.580
file upload.

00:19:58.580 --> 00:20:01.390
We also want to support
developer tags and integrate

00:20:01.390 --> 00:20:03.290
with the API in a more
generic way.

00:20:06.640 --> 00:20:09.540
One of the really core use cases
with this widget, as I

00:20:09.540 --> 00:20:13.000
mentioned before, is for the
site that's using the widget

00:20:13.000 --> 00:20:14.990
to be able to track all
the uploads that come

00:20:14.990 --> 00:20:17.770
through that widget.

00:20:17.770 --> 00:20:19.870
And this is possible today
in a way using these

00:20:19.870 --> 00:20:22.810
onUploadSuccess callbacks.

00:20:22.810 --> 00:20:25.070
These callbacks can be faked
locally, however.

00:20:25.070 --> 00:20:29.320
Just if the user finds your
JavaScript handler and calls

00:20:29.320 --> 00:20:32.770
that, then you can fake
onUploadSuccess events.

00:20:32.770 --> 00:20:36.760
You can also attach a custom
keyword to the video that will

00:20:36.760 --> 00:20:37.760
get saved to the video.

00:20:37.760 --> 00:20:41.590
The user can later go and remove
it, but that's another

00:20:41.590 --> 00:20:43.680
way to track these videos.

00:20:43.680 --> 00:20:47.300
You can even go back later and
query for videos by keyword

00:20:47.300 --> 00:20:50.630
and collect any videos that
you may have missed.

00:20:50.630 --> 00:20:53.870
But really the long-term
solution here, in our mind, is

00:20:53.870 --> 00:20:56.520
to support this with
developer tags.

00:20:56.520 --> 00:20:59.820
Which means that we need to
change our backends to upload

00:20:59.820 --> 00:21:02.860
videos through the API.

00:21:02.860 --> 00:21:07.080
And then those developer tags,
custom tags that you specify

00:21:07.080 --> 00:21:09.670
when you've registered a
developer key already, you can

00:21:09.670 --> 00:21:12.780
go and search for any video
that was tagged with that

00:21:12.780 --> 00:21:14.490
developer tag.

00:21:14.490 --> 00:21:16.830
And supporting this also means
that we need to support OAuth

00:21:16.830 --> 00:21:20.550
2 as an alternative to the
cookie auth scheme that I

00:21:20.550 --> 00:21:21.960
mentioned before.

00:21:21.960 --> 00:21:25.510
And in fact if you use the
developer tags your users

00:21:25.510 --> 00:21:28.640
would need to sign in OAuth
instead of cookie auth.

00:21:31.280 --> 00:21:32.840
So now I'm going to turn it over
to Jeff and he's going to

00:21:32.840 --> 00:21:35.520
show you a case study called
YouTube Direct Lite that we

00:21:35.520 --> 00:21:36.370
are working on now.

00:21:36.370 --> 00:21:40.130
And he'll explain more
about what that is.

00:21:40.130 --> 00:21:41.380
JEFF POSNICK: Thanks
so much Eric.

00:21:43.850 --> 00:21:46.240
So I wanted to talk about a
little bit of the motivation

00:21:46.240 --> 00:21:49.620
behind YouTube Direct Lite.

00:21:49.620 --> 00:21:54.860
The webcam upload widget is
great and other means of

00:21:54.860 --> 00:21:58.040
soliciting videos on your
website is great.

00:21:58.040 --> 00:22:00.190
But there's a problem of
how you curate them.

00:22:00.190 --> 00:22:01.670
And that gets into a
little bit of what

00:22:01.670 --> 00:22:04.330
Eric was talking about.

00:22:04.330 --> 00:22:07.770
There's manual ways of looking
for videos that have been

00:22:07.770 --> 00:22:11.110
uploaded using a specific
tag or using

00:22:11.110 --> 00:22:13.030
that callback handler.

00:22:13.030 --> 00:22:16.520
But that kind of involves
writing

00:22:16.520 --> 00:22:18.740
some custom code yourself.

00:22:18.740 --> 00:22:21.950
You might be just somebody who's
running a website and

00:22:21.950 --> 00:22:24.170
not necessarily much
of a developer.

00:22:24.170 --> 00:22:27.870
And it would be really nice if
there were a platform that's

00:22:27.870 --> 00:22:29.880
already written that would
provide some of that

00:22:29.880 --> 00:22:32.250
functionality with you while
integrating the newest things

00:22:32.250 --> 00:22:33.620
that we're offering.

00:22:33.620 --> 00:22:39.000
So that's what we consider
YouTube Direct Lite to be.

00:22:39.000 --> 00:22:41.470
It makes it easy to moderate
video submissions.

00:22:41.470 --> 00:22:45.650
And you don't have to use the
API that Eric was talking

00:22:45.650 --> 00:22:47.320
about directly.

00:22:47.320 --> 00:22:49.140
YouTube Direct Lite will handle
all the technical

00:22:49.140 --> 00:22:52.190
details for you and you just
need to add YouTube Direct

00:22:52.190 --> 00:22:53.440
Lite to your website.

00:22:56.590 --> 00:22:59.820
Before I talk much more about
YouTube Direct Lite, I wanted

00:22:59.820 --> 00:23:03.970
to talk about the Legacy YouTube
Direct platform.

00:23:03.970 --> 00:23:06.490
Not surprisingly, there's
YouTube Direct Lite, chances

00:23:06.490 --> 00:23:07.990
are there was a YouTube
Direct.

00:23:07.990 --> 00:23:09.800
There still is.

00:23:09.800 --> 00:23:13.380
It's an open source platform
for soliciting videos from

00:23:13.380 --> 00:23:15.660
your website's community.

00:23:15.660 --> 00:23:19.330
And we've actually seen a number
of news organizations,

00:23:19.330 --> 00:23:21.420
such as the New York Times
who have used it for the

00:23:21.420 --> 00:23:26.210
Reflections on 9/11 project,
or San Francisco's ABC7

00:23:26.210 --> 00:23:29.100
uReport project, a screenshot
of which you can see down

00:23:29.100 --> 00:23:31.630
here, integrate with YouTube
Direct in the past.

00:23:31.630 --> 00:23:34.700
And we're really excited about
those types of integrations

00:23:34.700 --> 00:23:39.360
and we hope to see more moving
forward, especially with the

00:23:39.360 --> 00:23:42.530
YouTube Direct Lite now
available or available soon.

00:23:45.150 --> 00:23:49.640
So the way YouTube Direct
works is that videos are

00:23:49.640 --> 00:23:52.990
uploaded into individual users'
accounts, which is our

00:23:52.990 --> 00:23:54.550
recommended best practice.

00:23:54.550 --> 00:23:57.590
This is actually really
important.

00:23:57.590 --> 00:24:02.130
We don't recommend that websites
or other online

00:24:02.130 --> 00:24:06.560
communities set up systems that
allow users of their site

00:24:06.560 --> 00:24:10.400
to upload videos into
one master account.

00:24:10.400 --> 00:24:12.850
That invites a whole
bunch of problems.

00:24:12.850 --> 00:24:16.150
And we have a blog post on our
YouTube API blog that talks a

00:24:16.150 --> 00:24:18.820
little bit more about why
that's not a good idea.

00:24:18.820 --> 00:24:22.210
So both YouTube Direct and
YouTube Direct Lite, follow

00:24:22.210 --> 00:24:23.290
that best practice.

00:24:23.290 --> 00:24:25.910
These videos will live
in the YouTube

00:24:25.910 --> 00:24:29.410
accounts of your users.

00:24:29.410 --> 00:24:33.390
And you can then go and curate
them and moderate them a bit.

00:24:33.390 --> 00:24:35.970
And the act of approving a video
that's been submitted

00:24:35.970 --> 00:24:38.430
will simply add it to a playlist
that lives in the

00:24:38.430 --> 00:24:39.250
master accounts.

00:24:39.250 --> 00:24:42.840
That's the way of featuring the
submissions that you want

00:24:42.840 --> 00:24:45.510
to particularly highlight.

00:24:45.510 --> 00:24:49.640
So YouTube Direct was built
using Java App Engine.

00:24:53.450 --> 00:24:55.640
Java App Engine is great
platform, but it requires a

00:24:55.640 --> 00:24:59.790
decent amount of expertise to
get your YouTube Direct

00:24:59.790 --> 00:25:02.240
instance up and running
and to maintain it.

00:25:02.240 --> 00:25:04.980
And you need to have familiarity
with a bunch of

00:25:04.980 --> 00:25:08.240
different things, not only
Java and App Engine but

00:25:08.240 --> 00:25:12.220
Eclipse and how you properly
deploy this platform.

00:25:12.220 --> 00:25:16.360
So it ended up being a bit of
a hassle for a lot of our

00:25:16.360 --> 00:25:18.240
potential integrators.

00:25:18.240 --> 00:25:22.670
And we really have been, for a
while now, been looking for an

00:25:22.670 --> 00:25:26.820
easier solution for
getting set up.

00:25:26.820 --> 00:25:29.080
So that's YouTube Direct.

00:25:29.080 --> 00:25:32.500
YouTube Direct does happen to
support mobile submissions, a

00:25:32.500 --> 00:25:35.840
dedicated Android
and iOS client.

00:25:35.840 --> 00:25:37.450
Those are open source.

00:25:37.450 --> 00:25:40.520
And actually the whole YouTube
Direct and YouTube Direct Lite

00:25:40.520 --> 00:25:43.830
platforms are open
source as well.

00:25:43.830 --> 00:25:48.310
And one of the things that we've
heard a lot from YouTube

00:25:48.310 --> 00:25:53.530
Direct users, particularly
from the community and in

00:25:53.530 --> 00:25:58.960
general, as Eric mentioned this
is one of our top open

00:25:58.960 --> 00:26:02.020
issue tracker requests,
is support for webcam

00:26:02.020 --> 00:26:02.750
submissions.

00:26:02.750 --> 00:26:06.160
It's a very obvious
integration.

00:26:06.160 --> 00:26:09.550
It's great if you are allowing
people to upload videos from

00:26:09.550 --> 00:26:12.930
their hard drive, but let's say
somebody wants to record a

00:26:12.930 --> 00:26:16.480
video right on the spot in
response to an article that

00:26:16.480 --> 00:26:17.160
you posted.

00:26:17.160 --> 00:26:21.540
So integrating with the webcam
upload widget is a really huge

00:26:21.540 --> 00:26:22.930
deal for the YouTube
Direct platform.

00:26:26.640 --> 00:26:29.690
So that was more details about
the Legacy platform.

00:26:29.690 --> 00:26:32.350
I want to talk about the rewrite
and what went into

00:26:32.350 --> 00:26:34.540
creating YouTube Direct Lite.

00:26:34.540 --> 00:26:36.770
So it's a complete rewrite
of the platform.

00:26:36.770 --> 00:26:40.450
We pretty much rethought this
from the ground up.

00:26:40.450 --> 00:26:45.030
And I'm the primary engineer
who's been working on it.

00:26:45.030 --> 00:26:47.500
The focus has been on
modernizing the codebase.

00:26:47.500 --> 00:26:50.460
It's three-years old code.

00:26:50.460 --> 00:26:53.490
It's not necessarily some of
the code that I'm the most

00:26:53.490 --> 00:26:56.260
proud of in the YouTube Direct
platforms so we wanted to

00:26:56.260 --> 00:26:57.680
write something that
was a little bit

00:26:57.680 --> 00:26:59.250
more modern and fresh.

00:26:59.250 --> 00:27:01.420
And incorporate these new
features that people have been

00:27:01.420 --> 00:27:04.340
asking about for awhile
including webcam submissions.

00:27:04.340 --> 00:27:07.530
And more than anything else,
just drastically

00:27:07.530 --> 00:27:09.690
simplifying the setup.

00:27:09.690 --> 00:27:12.670
If I run a website and I want to
start using YouTube Direct

00:27:12.670 --> 00:27:15.840
Lite, I really want that to
be as easy as possible.

00:27:15.840 --> 00:27:19.000
I don't want to go and deploy
things in Java App Engine.

00:27:19.000 --> 00:27:21.030
I don't want to do
anything else.

00:27:21.030 --> 00:27:24.510
So one of the things that makes
it possible for this to

00:27:24.510 --> 00:27:27.290
be so simple is that the code
is written in client-side

00:27:27.290 --> 00:27:30.420
HTML, CSS, and JavaScript.

00:27:30.420 --> 00:27:32.990
There is no Java code
running on a server.

00:27:32.990 --> 00:27:35.470
There's no Python code
running on a server.

00:27:35.470 --> 00:27:37.640
And this is only something
that's recently possible.

00:27:37.640 --> 00:27:40.050
So we wanted to do this for
awhile, but we actually could

00:27:40.050 --> 00:27:45.170
not do that until we rolled out
a cross-origin resource

00:27:45.170 --> 00:27:48.860
sharing, or CORS support
in the YouTube API.

00:27:48.860 --> 00:27:52.510
And this means that we could
write JavaScript code, have it

00:27:52.510 --> 00:27:55.510
run on a webpage, and that
JavaScript code could make

00:27:55.510 --> 00:27:58.600
calls directly to our YouTube
API servers without having to

00:27:58.600 --> 00:28:03.910
have an intermediary server
proxying those requests.

00:28:03.910 --> 00:28:06.050
So this again means no server

00:28:06.050 --> 00:28:08.540
deployment is strictly required.

00:28:08.540 --> 00:28:12.030
You don't have to run anything
off your own if

00:28:12.030 --> 00:28:14.430
you don't want to.

00:28:14.430 --> 00:28:18.760
But there is an option for those
who do you want a little

00:28:18.760 --> 00:28:20.250
bit more customization.

00:28:20.250 --> 00:28:22.760
If you want complete control
over the user interface, you

00:28:22.760 --> 00:28:26.170
can download the code or
check out the code.

00:28:26.170 --> 00:28:28.370
You can customize it and deploy
it locally on your

00:28:28.370 --> 00:28:29.390
existing web server.

00:28:29.390 --> 00:28:32.200
And this is actually what we're
going to ask folks to do

00:28:32.200 --> 00:28:33.390
once it's available.

00:28:33.390 --> 00:28:37.596
If you happen to be on a very
large website and you know

00:28:37.596 --> 00:28:40.530
that you get a lot of traffic,
hosting the code yourself is

00:28:40.530 --> 00:28:43.140
probably the best
solution here.

00:28:43.140 --> 00:28:43.790
It's very simple.

00:28:43.790 --> 00:28:47.970
You're just checking out HTML,
JavaScript, and CSS files and

00:28:47.970 --> 00:28:50.890
you can put it anywhere on
your existing web server,

00:28:50.890 --> 00:28:54.500
anywhere that's publicly
accessible.

00:28:54.500 --> 00:28:57.300
And if you take that approach
you do have complete control

00:28:57.300 --> 00:28:58.770
over the user interface.

00:28:58.770 --> 00:29:02.750
It's fairly simple to customize
the CSS to meet the

00:29:02.750 --> 00:29:04.390
rest of the design of
your website so

00:29:04.390 --> 00:29:07.480
everything fits together.

00:29:07.480 --> 00:29:11.010
And we are expecting folks
to want to do that.

00:29:11.010 --> 00:29:15.680
But there's another group of
folks who really just wants to

00:29:15.680 --> 00:29:17.570
make this as simple as possible,
drop one thing on

00:29:17.570 --> 00:29:20.790
their webpage and automatically
support YouTube

00:29:20.790 --> 00:29:23.030
Direct Lite submissions.

00:29:23.030 --> 00:29:26.450
And we're going to be able
to make that possible.

00:29:26.450 --> 00:29:31.050
You'll just put on a specific
iframe tag on your page, on

00:29:31.050 --> 00:29:33.180
any existing webpage.

00:29:33.180 --> 00:29:37.450
The source will point to a
centrally hosted YouTube

00:29:37.450 --> 00:29:39.410
Direct Lite script.

00:29:39.410 --> 00:29:42.930
You'll just have to specify the
playlist ID that you're

00:29:42.930 --> 00:29:46.550
interested in soliciting
submissions for.

00:29:46.550 --> 00:29:49.875
And you customize it a little
bit in terms of width and

00:29:49.875 --> 00:29:52.040
height, but you really don't
have too much control over it.

00:29:52.040 --> 00:29:55.680
So this is supposed to be
as simple as possible.

00:29:55.680 --> 00:29:59.800
And it's in fact so simple that
I could do this right on

00:29:59.800 --> 00:30:01.580
our HTML slide deck.

00:30:01.580 --> 00:30:04.580
So what you're seeing right
now is an initial YouTube

00:30:04.580 --> 00:30:06.950
Direct Lite screen.

00:30:06.950 --> 00:30:09.360
Because I'm in a Chrome
incognito window right now I'm

00:30:09.360 --> 00:30:12.880
not logged into this instance
of YouTube Direct so I can

00:30:12.880 --> 00:30:15.290
take you through
the login flow.

00:30:15.290 --> 00:30:18.560
So what this is actually
using is OAuth 2.

00:30:18.560 --> 00:30:22.890
And OAuth 2 is our recommended
way of handling authorization

00:30:22.890 --> 00:30:25.750
and authentication whenever
you're doing anything using

00:30:25.750 --> 00:30:29.590
the YouTube API, or really
any Google APIs.

00:30:29.590 --> 00:30:33.970
So it will present your end-user
with a screen right

00:30:33.970 --> 00:30:37.210
over here where they see
specifically what the name of

00:30:37.210 --> 00:30:41.490
this application is, which
access this application is

00:30:41.490 --> 00:30:41.990
requesting.

00:30:41.990 --> 00:30:45.180
In this case it wants to view
and manage my videos and view

00:30:45.180 --> 00:30:47.090
and manage my YouTube
activity.

00:30:47.090 --> 00:30:50.700
And it gives me as the user a
chance to explicitly say,

00:30:50.700 --> 00:30:55.330
allow access, before it
can act on my behalf.

00:30:55.330 --> 00:30:56.360
So I'm going to do that.

00:30:56.360 --> 00:31:01.420
And I'm going to be taken back
to the screen which has now,

00:31:01.420 --> 00:31:03.340
that I've logged in,
has populated

00:31:03.340 --> 00:31:05.810
with my YouTube videos.

00:31:05.810 --> 00:31:08.290
So these are some videos that
already in my account.

00:31:08.290 --> 00:31:10.940
And you'll see there's three
different modes for submitting

00:31:10.940 --> 00:31:12.910
videos for YouTube
Direct Lite.

00:31:12.910 --> 00:31:18.990
So you have Eric a little bit
earlier recording this video

00:31:18.990 --> 00:31:19.400
from the webcam.

00:31:19.400 --> 00:31:21.621
[VIDEO PLAYBACK]

00:31:21.621 --> 00:31:24.603
How are you enjoying
I/O today?

00:31:24.603 --> 00:31:25.100
[END VIDEO PLAYBACK]

00:31:25.100 --> 00:31:27.440
JEFF POSNICK: Yes, that ended up
in my YouTube account which

00:31:27.440 --> 00:31:32.740
is not a best practice,
but I'll let it slide.

00:31:32.740 --> 00:31:35.960
So you can take any existing
video that's already in your

00:31:35.960 --> 00:31:38.760
account and click the
submit video button.

00:31:38.760 --> 00:31:42.350
And it will end up being
submitted to that particular

00:31:42.350 --> 00:31:45.310
instance of YouTube
Direct Lite.

00:31:45.310 --> 00:31:47.160
I'll talk a little bit more
about it later but this

00:31:47.160 --> 00:31:49.820
basically means is that it's
associated with a specific

00:31:49.820 --> 00:31:53.620
playlist for future
moderation.

00:31:53.620 --> 00:31:57.880
So the video still lives, in
this case, this Jeff Posnick

00:31:57.880 --> 00:31:58.610
test account.

00:31:58.610 --> 00:32:01.190
It's not like it gets copied
over or anything like that.

00:32:01.190 --> 00:32:05.080
We're simply changing the
metadata of that video to let

00:32:05.080 --> 00:32:10.000
YouTube Direct Lite know that,
that video has been submitted.

00:32:10.000 --> 00:32:12.540
So there's two other
tabs up here.

00:32:12.540 --> 00:32:16.620
We do just have an old style
upload form that lets you put

00:32:16.620 --> 00:32:20.120
in title, description and
a category for a video.

00:32:20.120 --> 00:32:22.350
Choose a local video file that's
already recorded and

00:32:22.350 --> 00:32:26.460
saved on your hard drive and
submit that to YouTube.

00:32:26.460 --> 00:32:30.920
There are ways of customizing
YouTube Direct Lite so that

00:32:30.920 --> 00:32:35.390
hard code specific titles are
descriptions so you have

00:32:35.390 --> 00:32:38.440
control over what gets displayed
in this form.

00:32:38.440 --> 00:32:41.410
And finally, we have the webcam
widget over here which

00:32:41.410 --> 00:32:42.660
you've seen already.

00:32:45.620 --> 00:32:47.590
So I wanted to talk
more about the

00:32:47.590 --> 00:32:48.970
administrative side of things.

00:32:48.970 --> 00:32:53.240
So you have your YouTube Direct
Lite instance on your

00:32:53.240 --> 00:32:57.950
web page and you want to see
what's been submitted.

00:32:57.950 --> 00:33:00.120
You don't want this
to be a black box.

00:33:00.120 --> 00:33:02.770
So I just have to click that
login button again but because

00:33:02.770 --> 00:33:05.750
I've previously authorized
it, it will take me

00:33:05.750 --> 00:33:07.090
right into the screen.

00:33:07.090 --> 00:33:10.540
And you'll see in the initial
administration screen is a

00:33:10.540 --> 00:33:14.780
list of all the playlists that
are in your YouTube account.

00:33:14.780 --> 00:33:20.000
So again think of this as me
looking at a master account at

00:33:20.000 --> 00:33:22.360
this point even though it's
the same account I showed

00:33:22.360 --> 00:33:25.910
before as part of the clients
submitting things.

00:33:25.910 --> 00:33:29.110
So I happen to have these
two playlists right now.

00:33:29.110 --> 00:33:31.210
I also have the option of
creating a new playlist right

00:33:31.210 --> 00:33:35.290
from within here if I have a
brand new initiative on my

00:33:35.290 --> 00:33:37.500
website and I want to collect
videos specifically for that.

00:33:37.500 --> 00:33:40.360
I could just create a fresh
playlist if I like.

00:33:40.360 --> 00:33:43.790
But clicking on one of these
existing playlists will take

00:33:43.790 --> 00:33:47.770
me to this initial screen that
will give me the code that I

00:33:47.770 --> 00:33:49.850
need for doing things.

00:33:49.850 --> 00:33:55.130
I could at this point check out
any pending videos that

00:33:55.130 --> 00:33:56.970
have been submitted.

00:33:56.970 --> 00:34:00.300
And we see that video, I think
that was from a little bit

00:34:00.300 --> 00:34:02.770
earlier today.

00:34:02.770 --> 00:34:05.410
Earlier I submitted to a
slightly different playlist.

00:34:05.410 --> 00:34:09.970
And at this point I could
watch the video.

00:34:09.970 --> 00:34:10.460
[VIDEO PLAYBACK]

00:34:10.460 --> 00:34:12.685
So are you having a
good time at I/O?

00:34:12.685 --> 00:34:15.139
[END VIDEO PLAYBACK]

00:34:15.139 --> 00:34:19.570
JEFF POSNICK: And as an editor
or moderator of the site, I

00:34:19.570 --> 00:34:21.310
could say, OK yes, this is the
sort of thing I want to

00:34:21.310 --> 00:34:22.100
feature on a playlist.

00:34:22.100 --> 00:34:26.110
Or no, this is not something
I want, say I do

00:34:26.110 --> 00:34:27.770
want to approve that.

00:34:27.770 --> 00:34:29.110
Click the approve button.

00:34:29.110 --> 00:34:32.114
And it's going to end
up showing up in

00:34:32.114 --> 00:34:33.500
the approved tab.

00:34:33.500 --> 00:34:36.420
So this also gets you
access to all the

00:34:36.420 --> 00:34:38.260
previously approved videos.

00:34:38.260 --> 00:34:40.889
And you could from here reject
something if you mistakenly

00:34:40.889 --> 00:34:41.940
approved it.

00:34:41.940 --> 00:34:44.409
And you also have this
rejected tab.

00:34:44.409 --> 00:34:46.750
So let me just talk a little bit
more about what the act of

00:34:46.750 --> 00:34:48.080
approving a video is.

00:34:48.080 --> 00:34:51.310
As I mentioned before, nothing
happens to the original video

00:34:51.310 --> 00:34:54.199
that lives in your end-user's
account.

00:34:54.199 --> 00:34:57.020
The act of approving a video
will simply add it to a

00:34:57.020 --> 00:35:02.290
playlist that you can then
feature on your website.

00:35:02.290 --> 00:35:07.220
And there's a nice way of
embedding a playlist player on

00:35:07.220 --> 00:35:11.040
your page that will let you show
all the newest video that

00:35:11.040 --> 00:35:12.840
have been added to that playlist
without having to

00:35:12.840 --> 00:35:14.080
write too much code.

00:35:14.080 --> 00:35:15.710
So you can just use our standard
tools that are

00:35:15.710 --> 00:35:17.570
already in place for interacting
and displaying

00:35:17.570 --> 00:35:19.250
playlists with YouTube
Direct Lite.

00:35:25.390 --> 00:35:27.350
So YouTube Direct Lite
is something I'm

00:35:27.350 --> 00:35:28.210
really excited about.

00:35:28.210 --> 00:35:31.340
But I did want to be upfront
with some limitations and

00:35:31.340 --> 00:35:33.170
planned enhancements.

00:35:33.170 --> 00:35:37.030
First of all, it's not available
today along with the

00:35:37.030 --> 00:35:39.360
upload widget that Eric
was talking about.

00:35:39.360 --> 00:35:41.770
We hope to make it available
as soon as possible.

00:35:41.770 --> 00:35:43.650
There's a few more things
we need to take care of

00:35:43.650 --> 00:35:46.530
internally before releasing
everything.

00:35:46.530 --> 00:35:51.050
And that being said, YouTube
Direct Lite is dependent on

00:35:51.050 --> 00:35:53.630
CORS, or cross-origin resource
sharing, which I talked about

00:35:53.630 --> 00:35:56.820
before and not all browsers
currently support it.

00:35:56.820 --> 00:36:00.790
So we're looking into a few
different ways of making that

00:36:00.790 --> 00:36:01.850
situation a little bit better.

00:36:01.850 --> 00:36:06.800
There are various shims that
you could use that will

00:36:06.800 --> 00:36:10.695
provide a fake CORS experience
for browsers that don't quite

00:36:10.695 --> 00:36:12.370
yet support it.

00:36:12.370 --> 00:36:15.450
Most notably, I think Internet
Explorer 8 and 9 right now

00:36:15.450 --> 00:36:16.910
don't support CORS.

00:36:16.910 --> 00:36:22.250
But if you are looking to
include YouTube Direct Lite

00:36:22.250 --> 00:36:25.050
right now on your site, just be
aware that not every single

00:36:25.050 --> 00:36:27.240
browser will support it.

00:36:27.240 --> 00:36:29.040
Chrome Frame is another option
that we're looking at for

00:36:29.040 --> 00:36:33.360
using with some unsupported
browsers to allow them to

00:36:33.360 --> 00:36:36.570
actually make CORS requests.

00:36:36.570 --> 00:36:40.140
So moderation of the videos, and
the way that you get that

00:36:40.140 --> 00:36:43.250
list of pending videos that we
showed earlier, works via

00:36:43.250 --> 00:36:46.290
searches for specific keywords
in public videos.

00:36:46.290 --> 00:36:48.940
So you can only submit
public videos.

00:36:48.940 --> 00:36:52.510
And there can sometimes
be a delay before a

00:36:52.510 --> 00:36:54.310
video is picked up.

00:36:54.310 --> 00:36:58.130
So we're doing basically a
YouTube API search for a

00:36:58.130 --> 00:36:59.480
specific tag.

00:36:59.480 --> 00:37:02.750
And that tag associates
it with a playlist.

00:37:02.750 --> 00:37:07.410
And our search index
can lag sometimes.

00:37:07.410 --> 00:37:11.090
Normal operation's usually a few
minutes before something

00:37:11.090 --> 00:37:14.040
gets submitted and winds up
showing in the search results.

00:37:14.040 --> 00:37:15.590
There can be times where it's a
little bit longer that that.

00:37:15.590 --> 00:37:18.180
So you should keep
that in mind.

00:37:18.180 --> 00:37:22.280
There's not going to be an
instantaneous action between

00:37:22.280 --> 00:37:24.570
somebody submitting a video
and when it appears in the

00:37:24.570 --> 00:37:27.980
administrative interface.

00:37:27.980 --> 00:37:30.810
Finally, we have those existing
open source iOS and

00:37:30.810 --> 00:37:33.440
entry clients that allow people
with mobile phones to

00:37:33.440 --> 00:37:36.860
record directly from their
phones and upload the video to

00:37:36.860 --> 00:37:38.840
YouTube and at the same
time submit it to a

00:37:38.840 --> 00:37:40.630
YouTube Direct instance.

00:37:40.630 --> 00:37:43.710
We've not yet updated those
clients to talk to YouTube

00:37:43.710 --> 00:37:45.350
Direct Lite.

00:37:45.350 --> 00:37:48.750
It's a fairly simple change
that I have on a task of

00:37:48.750 --> 00:37:49.450
things I need to do.

00:37:49.450 --> 00:37:52.140
So I think that will be
something we'll be able to

00:37:52.140 --> 00:37:53.630
provide but it's not
quite there yet.

00:37:57.850 --> 00:38:00.820
So that's the material that
we wanted to cover.

00:38:00.820 --> 00:38:03.790
We have our YouTube for
Developers site that I

00:38:03.790 --> 00:38:07.660
encourage everybody to check
out at YouTube.com/dev.

00:38:07.660 --> 00:38:11.990
If you haven't been there yet,
there's lots of resources for

00:38:11.990 --> 00:38:15.940
YouTube Direct developers, for
folks who are interested soon

00:38:15.940 --> 00:38:20.580
in the YouTube embedded upload
widget, and anything else

00:38:20.580 --> 00:38:23.090
related to the YouTube API.

00:38:23.090 --> 00:38:26.025
I encourage everybody to
circle us on Google+.

00:38:26.025 --> 00:38:29.220
We have our YouTube for
Developers account now.

00:38:29.220 --> 00:38:32.410
And there's a link right there
that you can use to add us to

00:38:32.410 --> 00:38:36.170
your circles and get the latest
information about

00:38:36.170 --> 00:38:40.770
things such as when our widgets
are launching and when

00:38:40.770 --> 00:38:42.980
YouTube Direct Lite
will be available.

00:38:42.980 --> 00:38:48.030
So that being said, I wanted to
open things up right now to

00:38:48.030 --> 00:38:48.740
the audience.

00:38:48.740 --> 00:38:52.890
Anybody who has any questions
about the material we covered

00:38:52.890 --> 00:38:56.430
today or anything really related
to the YouTube APIs,

00:38:56.430 --> 00:38:59.630
feel free to come up to
microphones and speak as

00:38:59.630 --> 00:39:02.930
loudly and clearly as possible
and hopefully we'll be able to

00:39:02.930 --> 00:39:04.180
answer your questions.

00:39:10.920 --> 00:39:11.330
Yes.

00:39:11.330 --> 00:39:14.150
So we have some great
giveaways for

00:39:14.150 --> 00:39:15.060
folks who have questions.

00:39:15.060 --> 00:39:16.730
We have quite a few of those.

00:39:16.730 --> 00:39:19.620
And JJ, my colleague, is I
think going to hopefully

00:39:19.620 --> 00:39:21.570
assist with giving away
things for folks

00:39:21.570 --> 00:39:22.170
who've asked questions.

00:39:22.170 --> 00:39:23.310
That's a little incentive.

00:39:23.310 --> 00:39:25.820
ABNER: Hey, I'm Abner,
from Deja.

00:39:25.820 --> 00:39:28.540
And I have a question about
the moderation tool.

00:39:28.540 --> 00:39:33.680
Is it only open to my YouTube
user account or can this work

00:39:33.680 --> 00:39:37.260
as a way for people to submit
stuff from search results and

00:39:37.260 --> 00:39:37.950
stuff like that?

00:39:37.950 --> 00:39:40.500
Can they search and submit
something using

00:39:40.500 --> 00:39:45.334
the Direct Lite API?

00:39:45.334 --> 00:39:48.740
JEFF POSNICK: No, not as
it's written right now.

00:39:48.740 --> 00:39:55.650
That might be something that
would require a more heavy,

00:39:55.650 --> 00:39:57.280
involved YouTube Direct
platform.

00:39:57.280 --> 00:39:59.650
And that's probably a
customization to the open

00:39:59.650 --> 00:40:01.270
source code that you
can make to that.

00:40:01.270 --> 00:40:03.820
It's not really the intended
use case that we had for

00:40:03.820 --> 00:40:06.540
either YouTube Direct or
YouTube Direct Lite.

00:40:06.540 --> 00:40:11.730
It's really submitting videos
that are in your own account.

00:40:11.730 --> 00:40:15.290
But you will get a T-shirt and
probably confer with JJ

00:40:15.290 --> 00:40:16.540
regarding your size.

00:40:21.200 --> 00:40:23.160
Any other questions
from the audience?

00:40:26.390 --> 00:40:27.350
AUDIENCE: I'll probably
have a few.

00:40:27.350 --> 00:40:28.790
I just need to look
at my laundry

00:40:28.790 --> 00:40:31.670
list of things I wrote--

00:40:31.670 --> 00:40:32.150
[INAUDIBLE]

00:40:32.150 --> 00:40:33.570
JEFF POSNICK: Cool.

00:40:33.570 --> 00:40:34.500
OK.

00:40:34.500 --> 00:40:37.660
Well, we'll be around so feel
free to come to us afterwards.

00:40:37.660 --> 00:40:41.970
But thanks everybody for coming
out today and enjoy the

00:40:41.970 --> 00:40:43.220
rest of your I/O experience.

