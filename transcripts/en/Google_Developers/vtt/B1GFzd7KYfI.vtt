WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.880
[MUSIC PLAYING]

00:00:15.060 --> 00:00:16.170
JAREK WILKIEWICZ: Hello
and welcome to

00:00:16.170 --> 00:00:17.530
YouTube Developers Live.

00:00:17.530 --> 00:00:19.420
We have an exciting show
for you today.

00:00:19.420 --> 00:00:21.250
My name is Jarek Wilkiewicz,
I work for

00:00:21.250 --> 00:00:23.070
YouTube Developer Relation.

00:00:23.070 --> 00:00:25.980
And we have a special guest
today, Adrian Holovaty, about

00:00:25.980 --> 00:00:30.180
joining us live from Chicago
using a Hangout.

00:00:30.180 --> 00:00:31.870
How are you doing, Adrian?

00:00:31.870 --> 00:00:33.200
ADRIAN HOLOVATY: Hey, good.

00:00:33.200 --> 00:00:34.010
Nice to be here.

00:00:34.010 --> 00:00:36.070
JAREK WILKIEWICZ: Thank you very
much for joining today.

00:00:36.070 --> 00:00:38.790
Is it snowy out in Chicago?

00:00:38.790 --> 00:00:40.190
ADRIAN HOLOVATY: No.

00:00:40.190 --> 00:00:41.540
JAREK WILKIEWICZ: Spring
has started.

00:00:41.540 --> 00:00:42.560
ADRIAN HOLOVATY: Not snowy.

00:00:42.560 --> 00:00:45.700
It appears to be clear
outside today.

00:00:45.700 --> 00:00:46.210
JAREK WILKIEWICZ: Great.

00:00:46.210 --> 00:00:50.170
So I understand you've been
working on a new project for a

00:00:50.170 --> 00:00:51.370
little while.

00:00:51.370 --> 00:00:55.700
I know that you were one of the
main folks behind Django,

00:00:55.700 --> 00:00:57.530
but this project is a
little different.

00:00:57.530 --> 00:01:00.250
Is it true?

00:01:00.250 --> 00:01:02.260
ADRIAN HOLOVATY: Yes, it is
a tool for musicians.

00:01:02.260 --> 00:01:06.870
It has absolutely nothing to do
with what I did previously,

00:01:06.870 --> 00:01:14.520
which was a local news site
called EveryBlock and it uses

00:01:14.520 --> 00:01:19.130
Django but it's not a web
development tool, it's a tool

00:01:19.130 --> 00:01:19.780
for musicians.

00:01:19.780 --> 00:01:22.800
JAREK WILKIEWICZ: So how did
you come up with the idea?

00:01:22.800 --> 00:01:25.860
ADRIAN HOLOVATY: Well, I spend
a lot of my free time trying

00:01:25.860 --> 00:01:28.170
to basically reverse
engineer songs.

00:01:28.170 --> 00:01:33.410
So I'll have something like a
jazz solo that I want to learn

00:01:33.410 --> 00:01:36.960
and it's not available online
anywhere, or it's not in a

00:01:36.960 --> 00:01:40.710
book that I can buy like sheet
music, so I'll just sit with

00:01:40.710 --> 00:01:43.360
the recording and try to figure
out how to play it.

00:01:43.360 --> 00:01:47.110
And that's a really
laborious process.

00:01:47.110 --> 00:01:51.660
And it also is really

00:01:51.660 --> 00:01:53.300
ineffective in terms of learning.

00:01:53.300 --> 00:01:56.850
So I would learn a little
piece of music from some

00:01:56.850 --> 00:01:59.600
recording and I would write it
down on a piece of paper so I

00:01:59.600 --> 00:02:01.720
could preserve what I learned.

00:02:01.720 --> 00:02:04.040
But then when I came back to
that piece of paper a couple

00:02:04.040 --> 00:02:07.510
days later, I'd be like, I don't
even understand this.

00:02:07.510 --> 00:02:10.350
And I would have to listen to
the original recording along

00:02:10.350 --> 00:02:13.360
with looking at my notes to
actually understand it.

00:02:13.360 --> 00:02:19.190
So I wanted to make something
that marries the recorded

00:02:19.190 --> 00:02:23.260
music, the actual recording,
with the transcription of it,

00:02:23.260 --> 00:02:25.760
which is the notes that
you're playing.

00:02:25.760 --> 00:02:28.040
And that's what Soundslice
does.

00:02:28.040 --> 00:02:33.910
It's a way of-- still working
on the pitch, clearly--

00:02:33.910 --> 00:02:35.170
it's a way of--

00:02:35.170 --> 00:02:37.060
JAREK WILKIEWICZ: You're
doing fine.

00:02:37.060 --> 00:02:40.650
ADRIAN HOLOVATY: It's a way of
combining sheet music with an

00:02:40.650 --> 00:02:45.170
actual recording, specifically
using YouTube videos, so we

00:02:45.170 --> 00:02:49.280
can basically annotate any
YouTube video with musical

00:02:49.280 --> 00:02:49.990
information.

00:02:49.990 --> 00:02:52.650
You can say like from here to
here in the video he's playing

00:02:52.650 --> 00:02:54.380
an A minor, from here
to here he's playing

00:02:54.380 --> 00:02:55.790
this note, or whatever.

00:02:55.790 --> 00:02:57.650
JAREK WILKIEWICZ: So is it fair
to say that you created

00:02:57.650 --> 00:03:02.140
the product for yourself as the
main prototypical user or

00:03:02.140 --> 00:03:04.520
what was the inspiration?

00:03:04.520 --> 00:03:05.200
ADRIAN HOLOVATY: Definitely,
yeah.

00:03:05.200 --> 00:03:07.440
It's definitely for myself
first and foremost.

00:03:11.670 --> 00:03:15.880
The best products scratch
your own itch.

00:03:15.880 --> 00:03:16.950
Yeah, it's for myself.

00:03:16.950 --> 00:03:19.020
I've learned a ton of stuff.

00:03:19.020 --> 00:03:21.640
I've played guitar around
Chicago and I'm always looking

00:03:21.640 --> 00:03:23.460
new licks to use in my solos.

00:03:23.460 --> 00:03:29.180
And I've learned probably more
than 100 licks and songs and

00:03:29.180 --> 00:03:30.070
stuff from it.

00:03:30.070 --> 00:03:31.140
JAREK WILKIEWICZ: So why
don't we do this.

00:03:31.140 --> 00:03:35.130
So I understand you are ready
to give us a little demo.

00:03:35.130 --> 00:03:36.250
Are you?

00:03:36.250 --> 00:03:36.590
ADRIAN HOLOVATY: Yeah.

00:03:36.590 --> 00:03:38.430
JAREK WILKIEWICZ: And then after
that I would like to

00:03:38.430 --> 00:03:40.980
test to see how well your
product has served you.

00:03:40.980 --> 00:03:44.610
And if you wouldn't mind playing
something live for us,

00:03:44.610 --> 00:03:46.300
we would really appreciate
it and I'm sure

00:03:46.300 --> 00:03:47.836
so would the viewers.

00:03:47.836 --> 00:03:48.790
ADRIAN HOLOVATY: Let's do it.

00:03:48.790 --> 00:03:49.150
JAREK WILKIEWICZ: All right.

00:03:49.150 --> 00:03:50.980
So let's see the demo first.

00:03:50.980 --> 00:03:53.895
ADRIAN HOLOVATY: OK, let me
pull this guy up here.

00:03:56.970 --> 00:03:58.620
So let's see.

00:04:04.160 --> 00:04:05.160
Can you see this?

00:04:05.160 --> 00:04:06.540
JAREK WILKIEWICZ: Yes,
we can see it.

00:04:06.540 --> 00:04:07.460
ADRIAN HOLOVATY: Awesome.

00:04:07.460 --> 00:04:11.940
Well, this is an example of
a completed Soundslice

00:04:11.940 --> 00:04:12.700
transcription.

00:04:12.700 --> 00:04:16.959
So I have here a YouTube video
which is me playing "The Star

00:04:16.959 --> 00:04:21.529
Spangled Banner." And then here
you have a timeline view

00:04:21.529 --> 00:04:22.410
of the song.

00:04:22.410 --> 00:04:24.140
So you can just scroll it.

00:04:24.140 --> 00:04:30.520
You see the notes as they're
played in the song.

00:04:30.520 --> 00:04:33.330
And I'll go ahead and play it
so you can see how it all

00:04:33.330 --> 00:04:36.270
comes together.

00:04:36.270 --> 00:04:37.520
[MUSIC - "THE STAR
SPANGLED BANNER"]

00:04:46.090 --> 00:04:47.880
ADRIAN HOLOVATY: So I won't
play the whole thing.

00:04:47.880 --> 00:04:50.520
That basically gives you
a little taste of it.

00:04:50.520 --> 00:04:52.810
It's got a lot of UI
stuff that I won't

00:04:52.810 --> 00:04:53.700
go into detail of.

00:04:53.700 --> 00:04:58.590
You can zoom in and zoom out,
see the whole song.

00:04:58.590 --> 00:04:59.500
Loop sections--

00:04:59.500 --> 00:05:04.600
so if I want to just focus
on this beginning part.

00:05:04.600 --> 00:05:05.885
[SINGS FIRST MEASURE]

00:05:05.885 --> 00:05:09.153
I can just highlight that
part and play it.

00:05:09.153 --> 00:05:10.403
[MUSIC - "THE STAR
SPANGLED BANNER"]

00:05:13.400 --> 00:05:15.340
ADRIAN HOLOVATY: And
it will loop it.

00:05:15.340 --> 00:05:18.080
Another thing that's really
useful for learning a song is

00:05:18.080 --> 00:05:20.680
slowing it down to half speed
without changing the pitch, so

00:05:20.680 --> 00:05:23.454
I can just click here.

00:05:23.454 --> 00:05:26.245
And it's super slow.

00:05:26.245 --> 00:05:27.495
[MUSIC - "THE STAR
SPANGLED BANNER"]

00:05:35.010 --> 00:05:38.130
ADRIAN HOLOVATY: Like the two
bedrock bits of music

00:05:38.130 --> 00:05:38.670
transcription--

00:05:38.670 --> 00:05:41.510
learning a song-- are looping
sections and slowing it down.

00:05:41.510 --> 00:05:46.410
So those are the two things
I just showed.

00:05:46.410 --> 00:05:50.080
And the site lets you search
for any YouTube video and

00:05:50.080 --> 00:05:52.700
create these transcriptions
that are

00:05:52.700 --> 00:05:54.890
perfectly synced with them.

00:05:54.890 --> 00:05:58.530
And that's the quick tour.

00:05:58.530 --> 00:05:59.230
JAREK WILKIEWICZ: No,
this is great.

00:05:59.230 --> 00:06:01.730
So a couple of questions.

00:06:01.730 --> 00:06:04.840
So this transcription process
is manual, right?

00:06:04.840 --> 00:06:08.420
This is something that you
rely on the user to do.

00:06:08.420 --> 00:06:10.320
ADRIAN HOLOVATY: Yeah, it's
manual because I don't have

00:06:10.320 --> 00:06:14.790
access to the MP3s of
the YouTube videos.

00:06:14.790 --> 00:06:18.390
I'll be adding a different
version, sort of like a Pro

00:06:18.390 --> 00:06:21.100
account, that lets you
upload an MP3.

00:06:21.100 --> 00:06:24.460
And if I have access to the
MP3, then I can do an

00:06:24.460 --> 00:06:27.610
automated first pass at the
transcription, I can add a

00:06:27.610 --> 00:06:31.440
waveform display, which makes
it a lot easier to navigate,

00:06:31.440 --> 00:06:32.720
and a bunch of other stuff.

00:06:32.720 --> 00:06:33.326
JAREK WILKIEWICZ: I see.

00:06:33.326 --> 00:06:34.220
Yeah, correct.

00:06:34.220 --> 00:06:37.400
We don't have that in
the API right now.

00:06:37.400 --> 00:06:41.390
And then another question I had
is so is this is a single

00:06:41.390 --> 00:06:42.300
user product?

00:06:42.300 --> 00:06:44.450
Are they any collaboration
features?

00:06:44.450 --> 00:06:46.700
Any sharing features?

00:06:46.700 --> 00:06:47.240
ADRIAN HOLOVATY:
Good question.

00:06:47.240 --> 00:06:51.420
So it's sort of half and
half at the moment.

00:06:51.420 --> 00:06:53.010
See here we have tracks.

00:06:53.010 --> 00:06:54.590
So there's the sections
of the song.

00:06:54.590 --> 00:06:58.700
There's the chords and then
there's the actual notes.

00:06:58.700 --> 00:07:01.910
Anyone can create a track or as
many tracks as they want on

00:07:01.910 --> 00:07:05.540
any YouTube video, but you can
only edit a track that you

00:07:05.540 --> 00:07:06.570
yourself created.

00:07:06.570 --> 00:07:11.800
So I created these three guys,
nobody else can edit them, but

00:07:11.800 --> 00:07:14.780
you could go here and
add your own thing.

00:07:14.780 --> 00:07:18.750
So that kind of sucks, because
if you see an error in one of

00:07:18.750 --> 00:07:22.210
my annotations here, there's
nothing you can do about it

00:07:22.210 --> 00:07:24.860
aside from creating your own
track and saying, OK, if you

00:07:24.860 --> 00:07:28.170
look above, that's not a G,
that should be an F. But I

00:07:28.170 --> 00:07:33.560
will be implementing a
way of collaborating.

00:07:33.560 --> 00:07:36.280
There's a bunch of different
models that I'm looking at,

00:07:36.280 --> 00:07:41.790
like a Github model where you
would maybe create a clone of

00:07:41.790 --> 00:07:44.310
my track and make some changes
and then make a pull request,

00:07:44.310 --> 00:07:46.940
of course with none of
that geeky lingo.

00:07:46.940 --> 00:07:49.540
Or like a Wikipedia model where
everything's just open

00:07:49.540 --> 00:07:51.640
and anything can be edited
by anyone and it's

00:07:51.640 --> 00:07:53.440
really easy to revert.

00:07:53.440 --> 00:07:55.370
Looking at different
ways of doing that.

00:07:55.370 --> 00:07:58.380
So that's the long answer
to your question.

00:07:58.380 --> 00:07:59.430
JAREK WILKIEWICZ: Oh,
this is great.

00:07:59.430 --> 00:08:01.680
Have you received any early
feedback from your users?

00:08:01.680 --> 00:08:03.140
Anything you're willing
to share?

00:08:03.140 --> 00:08:04.900
ADRIAN HOLOVATY: Yeah,
it's basically

00:08:04.900 --> 00:08:07.720
been unanimously awesome.

00:08:07.720 --> 00:08:11.060
Guitarists are saying this is
like the best way of learning

00:08:11.060 --> 00:08:12.430
that they've ever seen.

00:08:12.430 --> 00:08:15.750
Because, I mean, when you
compare it to the state of the

00:08:15.750 --> 00:08:19.390
art, the state of the art is
like this data here, which is

00:08:19.390 --> 00:08:22.250
called guitar tablature, that's
the name of this if

00:08:22.250 --> 00:08:23.200
you're not familiar with it.

00:08:23.200 --> 00:08:31.010
But that's generally available
in ASCII text format, so it's

00:08:31.010 --> 00:08:33.320
kind of really lousy
to learn from.

00:08:33.320 --> 00:08:35.820
Plus you have the original
recording and the philosophy

00:08:35.820 --> 00:08:39.360
of the site is that you learn a
lot better when you see the

00:08:39.360 --> 00:08:42.960
notes and you hear them
at the same time.

00:08:42.960 --> 00:08:45.430
So, yeah, people love it.

00:08:45.430 --> 00:08:46.190
JAREK WILKIEWICZ:
This is great.

00:08:46.190 --> 00:08:51.290
So now the second part of this
presentation was you showing

00:08:51.290 --> 00:08:53.740
us how well you were able
to improve your

00:08:53.740 --> 00:08:56.221
skills using this program.

00:08:56.221 --> 00:08:58.290
So how about that?

00:08:58.290 --> 00:08:59.745
ADRIAN HOLOVATY: Yes,
I suppose I should

00:08:59.745 --> 00:09:02.840
get back on the chats.

00:09:02.840 --> 00:09:05.385
So you want me to
play this song?

00:09:05.385 --> 00:09:06.960
"The Star Spangled Banner?"

00:09:06.960 --> 00:09:08.868
JAREK WILKIEWICZ: Show
us what you got.

00:09:08.868 --> 00:09:12.120
ADRIAN HOLOVATY: OK,
get the guitar out.

00:09:12.120 --> 00:09:13.260
Hopefully you guys can see it.

00:09:13.260 --> 00:09:14.160
JAREK WILKIEWICZ: Yeah,
we can see you fine.

00:09:14.160 --> 00:09:16.190
And this will be the short
version, not the Superbowl

00:09:16.190 --> 00:09:18.040
long, extended version right?

00:09:18.040 --> 00:09:20.730
ADRIAN HOLOVATY: Yes, this
will be very short.

00:09:20.730 --> 00:09:23.120
How's the audio?

00:09:23.120 --> 00:09:23.870
JAREK WILKIEWICZ: You
sound amazing.

00:09:23.870 --> 00:09:26.220
You look amazing.

00:09:26.220 --> 00:09:27.470
[MUSIC - "THE STAR
SPANGLED BANNER"]

00:10:01.425 --> 00:10:03.960
ADRIAN HOLOVATY: Yay.

00:10:03.960 --> 00:10:06.520
JAREK WILKIEWICZ: Nice, well
obviously the product works.

00:10:09.290 --> 00:10:11.260
So thank you very much
for doing this.

00:10:11.260 --> 00:10:13.680
I know there's a lot of pressure
performing live on

00:10:13.680 --> 00:10:16.015
YouTube in front of millions
of users that are

00:10:16.015 --> 00:10:18.090
watching us right now.

00:10:18.090 --> 00:10:21.570
So next I had a couple of
technical questions.

00:10:21.570 --> 00:10:24.170
Can you tell us a little bit
more about how your product is

00:10:24.170 --> 00:10:25.670
implemented?

00:10:25.670 --> 00:10:26.470
ADRIAN HOLOVATY: Definitely.

00:10:26.470 --> 00:10:28.670
Let me just adjust
the thing here.

00:10:28.670 --> 00:10:36.170
Well, it uses the YouTube API
and that lets me control the

00:10:36.170 --> 00:10:42.240
YouTube player from JavaScript
and say obvious things like

00:10:42.240 --> 00:10:44.100
play and pause.

00:10:44.100 --> 00:10:47.000
I can do seek to go to
this moment in the

00:10:47.000 --> 00:10:50.730
video, and the looping.

00:10:50.730 --> 00:10:51.650
So the looping--

00:10:51.650 --> 00:10:54.350
there's no API for looping
in the YouTube API.

00:10:54.350 --> 00:10:58.680
So I basically every 20
milliseconds check is there a

00:10:58.680 --> 00:11:03.300
current selection, if so are you
with the selection, if not

00:11:03.300 --> 00:11:05.390
then it goes to the beginning
of the selection.

00:11:05.390 --> 00:11:10.730
My patent-pending looping
algorithm, very complicated.

00:11:10.730 --> 00:11:12.560
So I do looping.

00:11:12.560 --> 00:11:13.470
What else is there?

00:11:13.470 --> 00:11:17.000
The whole app is
built in HTML5.

00:11:17.000 --> 00:11:19.270
And it uses Canvas
for everything.

00:11:19.270 --> 00:11:24.105
So all those tabs, the
annotations, that's all drawn

00:11:24.105 --> 00:11:27.940
on Canvas one pixel at a time.

00:11:27.940 --> 00:11:29.740
And that's kind of cool.

00:11:29.740 --> 00:11:33.180
I think that it's one of the
most intense uses of Canvases

00:11:33.180 --> 00:11:38.740
in like a real world app that
I've seen on the internet.

00:11:38.740 --> 00:11:39.700
And what else about it.

00:11:39.700 --> 00:11:41.520
The back end is Django.

00:11:41.520 --> 00:11:43.680
But, honestly, the back
end is super boring.

00:11:43.680 --> 00:11:49.390
It just talks JSON to get
the annotation data.

00:11:49.390 --> 00:11:51.090
What else can I tell
you about it?

00:11:51.090 --> 00:11:52.470
JAREK WILKIEWICZ: So
I had one question.

00:11:52.470 --> 00:11:55.690
I've noticed you implemented
this playback speed.

00:11:55.690 --> 00:11:58.690
And this is one of the early
apps that takes advantage of

00:11:58.690 --> 00:12:00.060
this functionality.

00:12:00.060 --> 00:12:03.030
Can you tell us a little more
about how that works?

00:12:03.030 --> 00:12:06.210
ADRIAN HOLOVATY: Yeah, so that's
the half-speed thing,

00:12:06.210 --> 00:12:08.390
which is a crucial feature.

00:12:08.390 --> 00:12:11.480
And the way that works is very
easy, thanks to your API.

00:12:11.480 --> 00:12:14.430
All you need to do is say
Set Playback Rate--

00:12:14.430 --> 00:12:15.790
I think that's what
it's called--

00:12:15.790 --> 00:12:19.610
and you get the number of the
playback rate that you want,

00:12:19.610 --> 00:12:21.880
which for half speed
would be 0.5.

00:12:21.880 --> 00:12:26.530
And for a given video there's
an API that tells you which

00:12:26.530 --> 00:12:29.065
speeds are available,
so not all videos

00:12:29.065 --> 00:12:31.900
have half speed available.

00:12:31.900 --> 00:12:34.210
And that's basically
how it works.

00:12:34.210 --> 00:12:36.650
You just say, set playback
rate 0.5 and it

00:12:36.650 --> 00:12:37.830
just magically works.

00:12:37.830 --> 00:12:39.380
And I haven't had to
do anything else,

00:12:39.380 --> 00:12:40.330
so that's very nice.

00:12:40.330 --> 00:12:41.530
JAREK WILKIEWICZ: Cool, cool.

00:12:41.530 --> 00:12:43.080
ADRIAN HOLOVATY: I would
like there to be more

00:12:43.080 --> 00:12:45.210
granularity in those.

00:12:45.210 --> 00:12:52.540
One of my user's tab requested
feature is like a 75% speed.

00:12:52.540 --> 00:12:54.360
I'm actually curious
about this.

00:12:54.360 --> 00:12:55.660
Do you know how that's
implemented?

00:12:55.660 --> 00:12:59.310
Is it re-encoding video on
the fly, I'm assuming?

00:12:59.310 --> 00:13:00.010
JAREK WILKIEWICZ: I
don't think so.

00:13:00.010 --> 00:13:01.710
I think this is something
that must be

00:13:01.710 --> 00:13:05.331
supported by the transcode.

00:13:05.331 --> 00:13:06.822
ADRIAN HOLOVATY: OK.

00:13:06.822 --> 00:13:07.320
Interesting.

00:13:07.320 --> 00:13:09.720
JAREK WILKIEWICZ: But, yeah,
I will definitely pass that

00:13:09.720 --> 00:13:13.130
feedback on to the team.

00:13:13.130 --> 00:13:15.540
Since now that we have a nice
use case, I'm sure they're

00:13:15.540 --> 00:13:18.200
going to be excited
to see this.

00:13:18.200 --> 00:13:21.380
And then you are using the
iframe Player API.

00:13:21.380 --> 00:13:26.690
You said this is an HTML5
JavaScript app, right?

00:13:26.690 --> 00:13:31.250
ADRIAN HOLOVATY: Yes, using the
iframe API which puts the

00:13:31.250 --> 00:13:34.620
video in an iframe in my site
and lets me control the

00:13:34.620 --> 00:13:34.910
JavaScript.

00:13:34.910 --> 00:13:35.135
JAREK WILKIEWICZ: Cool.

00:13:35.135 --> 00:13:36.966
Are you using the
Data API at all?

00:13:36.966 --> 00:13:41.100
ADRIAN HOLOVATY: Yeah, I'm using
the Data API to get the

00:13:41.100 --> 00:13:45.020
title of the video and the
duration, so just the boring

00:13:45.020 --> 00:13:46.670
metadata about it.

00:13:46.670 --> 00:13:47.200
JAREK WILKIEWICZ: Great.

00:13:47.200 --> 00:13:50.590
And then you said you can
annotate arbitrary videos, is

00:13:50.590 --> 00:13:52.740
that using the Search API?

00:13:52.740 --> 00:13:54.630
Or you have to know
the video ID?

00:13:54.630 --> 00:13:56.250
ADRIAN HOLOVATY: Oh yeah, that's
yet another API that

00:13:56.250 --> 00:13:57.470
I'm using from you guys.

00:13:57.470 --> 00:14:00.180
It's the Search API, so when you
do a search on the site it

00:14:00.180 --> 00:14:04.870
actually hits YouTube via Ajax
and returns all the video

00:14:04.870 --> 00:14:06.530
results for that search.

00:14:06.530 --> 00:14:09.800
And then it cross references
it with my own data to tell

00:14:09.800 --> 00:14:13.220
you whether that particular
video has any annotations.

00:14:13.220 --> 00:14:13.640
JAREK WILKIEWICZ: Got it.

00:14:13.640 --> 00:14:16.200
So that's where the
transcriptions is stored on

00:14:16.200 --> 00:14:19.220
the back end in the
Django app?

00:14:19.220 --> 00:14:20.170
ADRIAN HOLOVATY: Yes, exactly.

00:14:20.170 --> 00:14:22.690
JAREK WILKIEWICZ: And
are you using V2 of

00:14:22.690 --> 00:14:23.940
the Data API or V3?

00:14:26.658 --> 00:14:29.370
ADRIAN HOLOVATY: I think
I'm using V3.

00:14:29.370 --> 00:14:32.800
I developed it a couple
months ago and I used

00:14:32.800 --> 00:14:33.982
whatever was newest.

00:14:33.982 --> 00:14:34.630
JAREK WILKIEWICZ: OK.

00:14:34.630 --> 00:14:37.187
Yeah, so that would be V3.

00:14:37.187 --> 00:14:38.410
ADRIAN HOLOVATY: OK.

00:14:38.410 --> 00:14:39.520
JAREK WILKIEWICZ: Great.

00:14:39.520 --> 00:14:44.940
And then you mentioned that, as
far as the types of things

00:14:44.940 --> 00:14:45.920
that come up--

00:14:45.920 --> 00:14:48.580
playback speed, more
granularity, was one of the

00:14:48.580 --> 00:14:50.910
feature requests you have
gotten from your users--

00:14:50.910 --> 00:14:52.920
is there anything else that
surprised you while

00:14:52.920 --> 00:14:54.180
developing the app?

00:14:54.180 --> 00:14:56.560
Any other feedback that you
would like to share.

00:14:56.560 --> 00:14:57.810
Anything that was
counter-intuitive?

00:14:59.990 --> 00:15:02.820
ADRIAN HOLOVATY: Yeah, there's
a couple of things--

00:15:02.820 --> 00:15:06.220
and as a preface to this
I should say, I totally

00:15:06.220 --> 00:15:11.160
understand if you don't want to
implement them because it's

00:15:11.160 --> 00:15:13.070
not a common use of
the YouTube API,

00:15:13.070 --> 00:15:14.610
let's just say that.

00:15:14.610 --> 00:15:19.180
One thing is the player,
the current position--

00:15:19.180 --> 00:15:23.540
so as you saw on this demo, the
playhead, actually from

00:15:23.540 --> 00:15:26.720
your perspective, the playhead
goes smoothly

00:15:26.720 --> 00:15:28.900
across the time line.

00:15:28.900 --> 00:15:34.130
And to do that what I do is I
ask the YouTube API every

00:15:34.130 --> 00:15:35.890
couple of milliseconds
what is the current

00:15:35.890 --> 00:15:38.510
position of the player.

00:15:38.510 --> 00:15:43.140
And I realized that the API
only updates every 250

00:15:43.140 --> 00:15:45.870
milliseconds, a couple
times a second.

00:15:45.870 --> 00:15:48.560
And so if I just did that,
it would be like

00:15:48.560 --> 00:15:50.700
bom, bom, bom, bom.

00:15:50.700 --> 00:15:52.070
It would be very choppy.

00:15:52.070 --> 00:15:54.260
It wouldn't be nice
and smooth.

00:15:54.260 --> 00:16:00.140
So I have to do some tweening
there to update the playhead

00:16:00.140 --> 00:16:03.910
so that it's nice and smooth
between changes of the

00:16:03.910 --> 00:16:06.020
official value.

00:16:06.020 --> 00:16:09.150
So all that is to say that it
would be awesome to have more

00:16:09.150 --> 00:16:14.590
accuracy in those API calls of
what is the current position

00:16:14.590 --> 00:16:15.210
of the playhead.

00:16:15.210 --> 00:16:17.070
And that way I wouldn't
have to do that.

00:16:17.070 --> 00:16:20.425
And if you pay very close
attention to the app you will

00:16:20.425 --> 00:16:27.040
see a little jump or a skip
every 250 milliseconds as the

00:16:27.040 --> 00:16:28.630
thing corrects itself.

00:16:28.630 --> 00:16:29.820
And that just bothers me.

00:16:29.820 --> 00:16:33.300
And for something like
Soundslice that has a lot

00:16:33.300 --> 00:16:38.630
precision, is very oriented
around precision, that can be

00:16:38.630 --> 00:16:41.830
kind of like, oh, I don't
trust the app

00:16:41.830 --> 00:16:43.480
as much as I would.

00:16:43.480 --> 00:16:45.410
JAREK WILKIEWICZ: Yeah.

00:16:45.410 --> 00:16:48.340
ADRIAN HOLOVATY: And a related
thing is that when you make a

00:16:48.340 --> 00:16:55.060
loop on Soundslice, because
of my algorithm--

00:16:55.060 --> 00:16:56.920
it doesn't even deserve to
be called an algorithm.

00:16:56.920 --> 00:17:00.640
So if you make a loop, when the
playhead reaches the end

00:17:00.640 --> 00:17:03.940
of the loop, it goes back
to the start of it.

00:17:03.940 --> 00:17:08.550
Because it is inexact, I'm
just checking every 20

00:17:08.550 --> 00:17:09.839
milliseconds--

00:17:09.839 --> 00:17:11.420
have you reached the
end of the loop?

00:17:11.420 --> 00:17:12.869
If so, put it back.

00:17:12.869 --> 00:17:18.150
That means there's a window of
20 milliseconds that you might

00:17:18.150 --> 00:17:22.359
get a little extra audio or
a little too little audio.

00:17:22.359 --> 00:17:25.375
So if you have a loop that's
very small and you listen to

00:17:25.375 --> 00:17:29.530
the music, you might hear the
end of the next note, a little

00:17:29.530 --> 00:17:30.380
speck of it.

00:17:30.380 --> 00:17:32.000
You might not hear it.

00:17:32.000 --> 00:17:33.080
So it's inexact.

00:17:33.080 --> 00:17:33.910
It's imprecise.

00:17:33.910 --> 00:17:37.650
And that's bothered
a bunch of users.

00:17:37.650 --> 00:17:42.050
And from your prospective, what
you might do is add a way

00:17:42.050 --> 00:17:45.180
of adding an end time
to the play.

00:17:45.180 --> 00:17:48.080
So you say, oh, I want to play
from here and then end there.

00:17:48.080 --> 00:17:50.445
And have that ending
be very exact.

00:17:50.445 --> 00:17:53.820
And that way the loops would
be super precise.

00:17:53.820 --> 00:17:55.740
JAREK WILKIEWICZ: Yeah.

00:17:55.740 --> 00:17:59.720
So the end time is actually
exposed as a parameter.

00:17:59.720 --> 00:18:05.200
Though it isn't a
part of the API.

00:18:05.200 --> 00:18:08.680
But when initialize the player,
you can actually pass

00:18:08.680 --> 00:18:09.960
an end time.

00:18:09.960 --> 00:18:12.000
But then you'll have to,
I think, tier it

00:18:12.000 --> 00:18:14.350
down to change it.

00:18:14.350 --> 00:18:16.250
So that wouldn't work so well.

00:18:16.250 --> 00:18:19.710
And then definitely going back
to a specific position, I

00:18:19.710 --> 00:18:24.690
think the challenge there is
we are subject to key frame

00:18:24.690 --> 00:18:27.750
limitation, so it may not
always be super exact.

00:18:27.750 --> 00:18:32.110
Although it sounds like it's
sufficient for the application

00:18:32.110 --> 00:18:35.830
with the 20 millisecond
or so delta.

00:18:35.830 --> 00:18:36.880
ADRIAN HOLOVATY:
Yeah, it's OK.

00:18:36.880 --> 00:18:42.630
And I think that the coolness
and the usefulness of having

00:18:42.630 --> 00:18:46.860
this available for any YouTube
video outweighs those

00:18:46.860 --> 00:18:47.720
limitations.

00:18:47.720 --> 00:18:50.770
So I had a previous version on
the site that worked on any

00:18:50.770 --> 00:18:54.560
MP3 and it was completely
precise down to the level of

00:18:54.560 --> 00:18:57.270
the frame of an MP3.

00:18:57.270 --> 00:19:01.400
And it was really nice
and precise, but it

00:19:01.400 --> 00:19:03.220
didn't work on YouTube.

00:19:03.220 --> 00:19:05.460
It only worked on the files
that you uploaded.

00:19:05.460 --> 00:19:07.520
So it's all about
the trade offs.

00:19:07.520 --> 00:19:08.370
JAREK WILKIEWICZ: Yeah, actually
while you were

00:19:08.370 --> 00:19:11.230
playing it and showing me the
app, I was wondering whether

00:19:11.230 --> 00:19:13.300
the visual feedback actually
also helps with

00:19:13.300 --> 00:19:14.080
the learning process.

00:19:14.080 --> 00:19:17.990
Like understanding exactly how
he gripped the guitar.

00:19:17.990 --> 00:19:20.380
And I don't play guitar, but I
was just wondering whether

00:19:20.380 --> 00:19:22.460
that actually is also helpful.

00:19:22.460 --> 00:19:27.130
Because it's like yet another
signal for the student.

00:19:27.130 --> 00:19:29.700
ADRIAN HOLOVATY: Definitely
the visual.

00:19:29.700 --> 00:19:32.290
As I've transcribed a bunch of
stuff from my favorite guitar

00:19:32.290 --> 00:19:36.450
players, I'm always looking up
at the video, seeing which

00:19:36.450 --> 00:19:40.990
finger are they using, how is
their hand positioned, also

00:19:40.990 --> 00:19:42.760
their right hand, are
they using a down

00:19:42.760 --> 00:19:44.770
stroke or an up stroke?

00:19:44.770 --> 00:19:46.700
That's very important
information.

00:19:46.700 --> 00:19:47.580
JAREK WILKIEWICZ: Cool, cool.

00:19:47.580 --> 00:19:51.270
Well, thank you very much
for joining us.

00:19:51.270 --> 00:19:53.940
Let me see if we have any
questions in the moderator.

00:19:53.940 --> 00:19:57.940
I see there's one question
from me.

00:19:57.940 --> 00:19:59.960
So I guess I will
address that.

00:19:59.960 --> 00:20:02.230
There is a question about
whether YouTube Developer

00:20:02.230 --> 00:20:03.660
Relations is hiring.

00:20:03.660 --> 00:20:04.650
The answer is yes.

00:20:04.650 --> 00:20:06.180
We are hiring.

00:20:06.180 --> 00:20:08.800
Both YouTube and Google
Developer Relations.

00:20:08.800 --> 00:20:12.630
We're always looking for good
people to join our team.

00:20:12.630 --> 00:20:14.200
If you'd like to learn
more, go to

00:20:14.200 --> 00:20:17.980
developers.google.com/jobs.

00:20:17.980 --> 00:20:20.430
Again, thank you very
much, Adrian.

00:20:20.430 --> 00:20:21.125
Excellent app.

00:20:21.125 --> 00:20:23.970
I think I'm going to try it out
and see if I can pick up

00:20:23.970 --> 00:20:25.410
some guitar.

00:20:25.410 --> 00:20:29.750
Actually my sister is a guitar
player, so maybe I'll join the

00:20:29.750 --> 00:20:31.230
musical family.

00:20:31.230 --> 00:20:33.620
Thank you very much again.

00:20:33.620 --> 00:20:34.740
ADRIAN HOLOVATY: All right,
thanks for having me.

00:20:34.740 --> 00:20:35.310
JAREK WILKIEWICZ: Thank you.

00:20:35.310 --> 00:20:36.560
Bye.

