WEBVTT
Kind: captions
Language: en

00:00:03.580 --> 00:00:05.560
Hello, and welcome
back "Route 85"

00:00:05.560 --> 00:00:08.510
and part 4 on our little series
on opening a link in Chrome

00:00:08.510 --> 00:00:09.900
on iOS.

00:00:09.900 --> 00:00:12.277
Now if you've been following
along up until this point,

00:00:12.277 --> 00:00:13.860
we've basically
finished our main goal

00:00:13.860 --> 00:00:16.650
of opening up a link in Chrome,
adding a Back button that

00:00:16.650 --> 00:00:19.050
reopens our app, and
using our open source

00:00:19.050 --> 00:00:21.912
library to help you do it
all quickly and easily.

00:00:21.912 --> 00:00:23.370
So you can think
of today's episode

00:00:23.370 --> 00:00:25.849
as a little bit of extra credit.

00:00:25.849 --> 00:00:28.140
See, as long as we're exploring
the idea of URL schemes

00:00:28.140 --> 00:00:30.700
and callback URLs,
let's take a closer look

00:00:30.700 --> 00:00:34.020
at this x-success callback
URL that we are defining.

00:00:34.020 --> 00:00:36.180
Right now it's just sent
to my app's custom scheme

00:00:36.180 --> 00:00:37.110
and that's it.

00:00:37.110 --> 00:00:39.220
But we could actually
embed any information

00:00:39.220 --> 00:00:40.894
we want in this URL.

00:00:40.894 --> 00:00:42.310
Let's say, for
instance, we wanted

00:00:42.310 --> 00:00:44.435
to tell the user how happy
we are that they clicked

00:00:44.435 --> 00:00:46.600
on that Back button when
they came back to our app.

00:00:46.600 --> 00:00:48.849
Well, we could modify our
callback URL to be something

00:00:48.849 --> 00:00:52.560
like comgooglemyexamp
le://welcomeback/.

00:00:52.560 --> 00:00:55.280
If we URL encode
this thing, and make

00:00:55.280 --> 00:00:57.580
it part of our
x-callback URL, this

00:00:57.580 --> 00:00:59.510
will get passed along
to Chrome as the URL

00:00:59.510 --> 00:01:02.360
to open when the user clicks
the Back button to go back

00:01:02.360 --> 00:01:03.760
to our app.

00:01:03.760 --> 00:01:06.010
So when Chrome intends
to open this URL,

00:01:06.010 --> 00:01:07.810
iOS will open up
our application--

00:01:07.810 --> 00:01:10.560
because we've claimed ownership
to the comgooglemyexample

00:01:10.560 --> 00:01:14.350
custom URL scheme-- and then we
will pass this full URL along

00:01:14.350 --> 00:01:16.640
to our application's
app delegate.

00:01:16.640 --> 00:01:18.180
But then how do we
read in this URL

00:01:18.180 --> 00:01:19.690
that gets sent back to our app?

00:01:19.690 --> 00:01:23.540
By implementing the application
openURL sourceApplication

00:01:23.540 --> 00:01:25.910
annotation method,
in our app delegate.

00:01:25.910 --> 00:01:27.840
This takes in the full
URL that opened up

00:01:27.840 --> 00:01:30.190
our app in the first place,
along with a few other bits

00:01:30.190 --> 00:01:31.260
of information.

00:01:31.260 --> 00:01:33.830
So maybe this is better
demonstrated in code,

00:01:33.830 --> 00:01:36.980
so let's give it a
try in our sample app.

00:01:36.980 --> 00:01:41.370
So here we are back in my
fancy opening Chrome example

00:01:41.370 --> 00:01:42.400
application.

00:01:42.400 --> 00:01:44.660
And I'm going to
do two things here.

00:01:44.660 --> 00:01:47.515
The first thing I'm going to do
is change my callback URL from

00:01:47.515 --> 00:01:49.140
just this
comgoogleopeninchromeexample:

00:01:49.140 --> 00:01:58.014
to comgoogleopenexa
mple://welcomebackfrombutton/.

00:01:58.014 --> 00:01:59.680
And then the next
thing I'm going to do,

00:01:59.680 --> 00:02:04.380
is jump into my
AppDelegate.m file.

00:02:04.380 --> 00:02:07.620
And let's say up
here at the top,

00:02:07.620 --> 00:02:11.200
I'm going to add this
application open URL source

00:02:11.200 --> 00:02:15.420
application annotation method
that I alluded to earlier.

00:02:15.420 --> 00:02:17.930
So this is application--
here it is.

00:02:17.930 --> 00:02:20.180
Open URL, source
application, annotation.

00:02:22.870 --> 00:02:25.420
And I guess maybe the
first thing I will do here

00:02:25.420 --> 00:02:29.230
is, let's just log the
URL that we get back.

00:02:29.230 --> 00:02:32.050
So nslog.

00:02:32.050 --> 00:02:35.110
I have received the URL.

00:02:35.110 --> 00:02:38.170
And then we'll pass
in URL absolutestring.

00:02:38.170 --> 00:02:40.170
But spoiler alert,
it's just going

00:02:40.170 --> 00:02:42.030
to be the callback
URL that we specified

00:02:42.030 --> 00:02:44.510
in our viewcontroller.m file.

00:02:44.510 --> 00:02:47.970
And we can return
Yes for now, just

00:02:47.970 --> 00:02:51.520
to say yes, I can handle this
URL-- even though I actually

00:02:51.520 --> 00:02:53.070
don't know what it is yet.

00:02:53.070 --> 00:02:59.460
And so now, when we run
this-- so click on the button,

00:02:59.460 --> 00:03:02.040
go into Chrome, jump back.

00:03:05.710 --> 00:03:06.510
Let's stop this.

00:03:06.510 --> 00:03:08.180
And we could see that
in the logs, yes,

00:03:08.180 --> 00:03:09.780
the URL we've
received is, in fact,

00:03:09.780 --> 00:03:10.280
this comgoogleopening
chromeexample://

00:03:10.280 --> 00:03:11.196
welcomebackfrombutton.

00:03:14.260 --> 00:03:16.660
Man, I need shorter URLs.

00:03:16.660 --> 00:03:18.720
But now we can analyze that.

00:03:18.720 --> 00:03:30.720
So I'm going to add a little
if URL host is equal to string,

00:03:30.720 --> 00:03:36.910
and this is
welcomebackfrombutton--

00:03:36.910 --> 00:03:40.510
so if this is the case, then we
know that the user has gotten

00:03:40.510 --> 00:03:42.720
into our application from
clicking on that Back

00:03:42.720 --> 00:03:45.340
button in Chrome,
and not from, say,

00:03:45.340 --> 00:03:48.710
another x-callback URL we
were to create in the future.

00:03:48.710 --> 00:03:51.680
And so then, why don't we add
a little alert box or something

00:03:51.680 --> 00:03:52.770
to welcome the user back.

00:03:52.770 --> 00:04:00.200
Something like this-- UIAlert
view alloc initWithTitle@

00:04:00.200 --> 00:04:01.810
Welcome Back!

00:04:01.810 --> 00:04:04.085
Message-- We Missed You!

00:04:06.660 --> 00:04:09.150
Our delegate here can be nil.

00:04:09.150 --> 00:04:12.660
Cancel button can be Awww.

00:04:12.660 --> 00:04:15.530
And other button titles,
there aren't any.

00:04:15.530 --> 00:04:17.870
And Show.

00:04:17.870 --> 00:04:19.760
There we go.

00:04:19.760 --> 00:04:20.558
Oops.

00:04:20.558 --> 00:04:21.849
Yes, I need the little at sign.

00:04:21.849 --> 00:04:24.410
There we go.

00:04:24.410 --> 00:04:25.910
And then, I am
returning yes here,

00:04:25.910 --> 00:04:27.410
at the end of this
method, to signal

00:04:27.410 --> 00:04:29.846
that, yes, we have
properly handled the URL.

00:04:29.846 --> 00:04:32.095
I'm not actually sure what
effect this has on the app,

00:04:32.095 --> 00:04:35.450
since I can return no here, and
I still get to open the URL.

00:04:35.450 --> 00:04:38.130
My suspicion is that you want
to return the correct value here

00:04:38.130 --> 00:04:40.520
in case you have a
subclass app delegate.

00:04:40.520 --> 00:04:42.020
And your subclass
delegate, you need

00:04:42.020 --> 00:04:43.890
to know whether or not
you have a URL that

00:04:43.890 --> 00:04:45.560
hasn't been handled
yet by your Super.

00:04:45.560 --> 00:04:47.070
But that's just a guess.

00:04:47.070 --> 00:04:48.440
I don't really know for sure.

00:04:48.440 --> 00:04:49.590
Anyway, let's run this.

00:04:53.260 --> 00:04:56.460
So I tap my button,
it goes into Chrome.

00:04:56.460 --> 00:04:58.260
Tap the Back button.

00:04:58.260 --> 00:04:59.470
Ah, and look at that.

00:04:59.470 --> 00:05:01.310
It's the "Welcome
Back!" dialogue.

00:05:01.310 --> 00:05:03.550
Aw, I feel so loved.

00:05:03.550 --> 00:05:05.330
For a more realistic
example, we could

00:05:05.330 --> 00:05:08.070
imagine that we had an app that
contained a bunch of news story

00:05:08.070 --> 00:05:10.860
headlines, and a user could
click on one of those headlines

00:05:10.860 --> 00:05:12.640
to read the full
story in Chrome.

00:05:12.640 --> 00:05:15.530
So we could pass along,
within our URL arguments,

00:05:15.530 --> 00:05:18.740
the internal ID of whatever
story or news post contained

00:05:18.740 --> 00:05:20.890
this external link
in the first place.

00:05:20.890 --> 00:05:22.690
Then when the user
returns to our app,

00:05:22.690 --> 00:05:25.170
we can use this information
to, for example,

00:05:25.170 --> 00:05:26.790
make sure the user
continues browsing

00:05:26.790 --> 00:05:27.950
from where they left off.

00:05:27.950 --> 00:05:30.340
Or we could prop them with
some follow-up options.

00:05:30.340 --> 00:05:32.220
Or we can mark
this story as read.

00:05:32.220 --> 00:05:33.852
You kind of get the idea.

00:05:33.852 --> 00:05:35.560
Anyway, hopefully this
tutorial gives you

00:05:35.560 --> 00:05:38.180
a better understanding
of what URL schemes are,

00:05:38.180 --> 00:05:40.330
how to use them to open up
a web page in the user's

00:05:40.330 --> 00:05:42.497
favorite browser--
whatever that might be--

00:05:42.497 --> 00:05:44.580
and how to take advantage
of that nice little Back

00:05:44.580 --> 00:05:47.467
button in Chrome to send
the user back to your app.

00:05:47.467 --> 00:05:48.800
So, thanks so much for watching.

00:05:48.800 --> 00:05:51.382
Hey, this was my first set
of screen caps in a while.

00:05:51.382 --> 00:05:52.090
What'd you think?

00:05:52.090 --> 00:05:53.935
Was this too fast, too slow?

00:05:53.935 --> 00:05:55.810
Is there something else
you want me to cover?

00:05:55.810 --> 00:05:58.130
Are you like, let's do
all swift all the time?

00:05:58.130 --> 00:06:00.050
Let me know down
here in the comments,

00:06:00.050 --> 00:06:01.750
and I will be sure to read them.

00:06:01.750 --> 00:06:03.430
Thanks again, and
I'll talk to you soon.

00:06:03.430 --> 00:06:06.780
[MUSIC PLAYING]

