WEBVTT
Kind: captions
Language: en

00:00:05.190 --> 00:00:07.460
ILYA GRIGORIK: Hello everyone,
and welcome to our "Make the

00:00:07.460 --> 00:00:10.030
Web Fast" series here on
Google Developers Live.

00:00:10.030 --> 00:00:13.290
Today we'll be talking about
a very awesome tool called

00:00:13.290 --> 00:00:16.540
mod_pagespeed, which
is a performance

00:00:16.540 --> 00:00:18.190
JIT for your website.

00:00:18.190 --> 00:00:20.630
So first off, my name
is Ilya Grigorik.

00:00:20.630 --> 00:00:22.230
I work with the "Make
the Web Fast" team.

00:00:22.230 --> 00:00:23.610
And with me today--

00:00:23.610 --> 00:00:24.265
JOSHUA MARANTZ: Hi.

00:00:24.265 --> 00:00:27.240
I'm Marinates And I work on
the mod_pagespeed team.

00:00:27.240 --> 00:00:27.600
ILYA GRIGORIK: Awesome.

00:00:27.600 --> 00:00:31.890
So Josh, I heard through the
rumor mill that there is an

00:00:31.890 --> 00:00:35.660
upcoming 1.0 release
for mod_pagespeed.

00:00:35.660 --> 00:00:36.350
JOSHUA MARANTZ: That's
correct.

00:00:36.350 --> 00:00:37.850
The rumors are correct.

00:00:37.850 --> 00:00:41.370
We are releasing mod_pagespeed
1.0 next week.

00:00:41.370 --> 00:00:45.740
After two years of beta it's
ready for broader adoption.

00:00:45.740 --> 00:00:46.160
ILYA GRIGORIK: Wow.

00:00:46.160 --> 00:00:50.180
So true to Google philosophy of
keeping everything in beta,

00:00:50.180 --> 00:00:52.240
that's two years and quite
a few users, I

00:00:52.240 --> 00:00:53.120
think, as well, right?

00:00:53.120 --> 00:00:56.000
So it'll be really interesting
to dive in and understand

00:00:56.000 --> 00:00:59.430
what's happening underneath,
because I spent some time

00:00:59.430 --> 00:01:01.230
looking at what you guys
have built, certainly

00:01:01.230 --> 00:01:02.090
worked with the team.

00:01:02.090 --> 00:01:04.950
And the first thing that
stands out to me--

00:01:04.950 --> 00:01:07.120
I guess we have some slides
that I've prepared--

00:01:07.120 --> 00:01:10.830
is that if you care about
performance, there's a lot of

00:01:10.830 --> 00:01:12.260
stuff that you need
to care about.

00:01:12.260 --> 00:01:15.490
In fact, my officemate, Steve
Souders, wrote a couple books

00:01:15.490 --> 00:01:16.740
on the subject.

00:01:16.740 --> 00:01:21.790
And there is stuff like image
compression, combining your

00:01:21.790 --> 00:01:24.990
resources, and deferring
JavaScript, cache extensions.

00:01:24.990 --> 00:01:28.330
Frankly, it's a full-time job to
keep up with all the things

00:01:28.330 --> 00:01:31.980
that you need to do to keep
your website fast.

00:01:31.980 --> 00:01:32.470
JOSHUA MARANTZ: Yeah.

00:01:32.470 --> 00:01:34.530
We believe that if you're
building a website, you're

00:01:34.530 --> 00:01:35.680
trying to convey information.

00:01:35.680 --> 00:01:38.700
You're trying to sell a product,
gain acceptance of an

00:01:38.700 --> 00:01:40.060
idea, communicate something.

00:01:40.060 --> 00:01:44.080
You're not trying to hack your
website to make it faster.

00:01:44.080 --> 00:01:46.920
So the less you have to focus
on that, the better.

00:01:46.920 --> 00:01:49.540
Now, it is important that you
make websites fast because you

00:01:49.540 --> 00:01:51.750
get more engagement,
happier users.

00:01:51.750 --> 00:01:53.190
People will come back.

00:01:53.190 --> 00:01:55.210
But you don't want to spend
all your time doing that.

00:01:55.210 --> 00:01:55.420
ILYA GRIGORIK: Right.

00:01:55.420 --> 00:01:57.270
And that's actually a very good
point, very important

00:01:57.270 --> 00:02:00.400
point, which is of course
we care about speed.

00:02:00.400 --> 00:02:03.490
But speed in itself can be
almost a full-time job,

00:02:03.490 --> 00:02:06.320
because even these best
practices change over time.

00:02:06.320 --> 00:02:07.590
The browsers get smarter.

00:02:07.590 --> 00:02:10.530
We get more video on the web,
more images on the web.

00:02:10.530 --> 00:02:12.690
So these things shift, and you
need to keep up with it.

00:02:12.690 --> 00:02:15.960
And not only that, but some
techniques, like let's say

00:02:15.960 --> 00:02:18.762
spriting images together or
inlining resources on the

00:02:18.762 --> 00:02:22.420
page, are actually pretty heavy
in terms of required

00:02:22.420 --> 00:02:25.400
work, either for the design
team or for the dev team.

00:02:25.400 --> 00:02:27.940
So it adds additional
complexity to

00:02:27.940 --> 00:02:29.600
your development cycle.

00:02:29.600 --> 00:02:33.290
So it's not all just easy
wins along the way.

00:02:33.290 --> 00:02:38.110
JOSHUA MARANTZ: And the other
aspect is that sometimes it's

00:02:38.110 --> 00:02:41.820
hard to draw a balance between
being able to keep your site

00:02:41.820 --> 00:02:43.380
up to date and keeping
it cached.

00:02:43.380 --> 00:02:46.110
For example, everybody knows who
works on web performance

00:02:46.110 --> 00:02:49.635
that the more assets
on a website that

00:02:49.635 --> 00:02:50.470
are cached, the better.

00:02:50.470 --> 00:02:54.010
So if you go back to a typical
newspaper site every day to

00:02:54.010 --> 00:02:57.910
see what the news is, you'll
typically wind up downloading

00:02:57.910 --> 00:03:01.490
their JavaScript and their CSS,
which hasn't changed--

00:03:01.490 --> 00:03:04.010
usually has not changed--

00:03:04.010 --> 00:03:06.250
every day, because they
have to set a

00:03:06.250 --> 00:03:07.860
fairly short cache lifetime.

00:03:07.860 --> 00:03:11.875
I typically see a minute or an
hour at the most in order so

00:03:11.875 --> 00:03:13.670
that they can push changes
out when they want to.

00:03:13.670 --> 00:03:15.300
But they don't do
it every day.

00:03:15.300 --> 00:03:17.910
They probably do it once
every few weeks.

00:03:17.910 --> 00:03:24.710
And you want to be able to
change your website on the fly

00:03:24.710 --> 00:03:29.020
and have that propagate quickly
to everybody, but also

00:03:29.020 --> 00:03:31.330
have it so that when you don't
change it, it stays in

00:03:31.330 --> 00:03:32.330
people's caches.

00:03:32.330 --> 00:03:35.150
So this is a complicated and
messy thing to do manually.

00:03:35.150 --> 00:03:37.090
It's a very easy thing
to automatically.

00:03:37.090 --> 00:03:37.360
ILYA GRIGORIK: Right.

00:03:37.360 --> 00:03:41.370
And I think that is the core
insight behind mod_pagespeed,

00:03:41.370 --> 00:03:44.320
which is to say, sure, you
can apply all these

00:03:44.320 --> 00:03:45.310
optimizations yourself.

00:03:45.310 --> 00:03:47.460
And in fact, you should know
them, because they should be

00:03:47.460 --> 00:03:48.960
best practices on your team.

00:03:48.960 --> 00:03:51.980
But we can, in fact, automate
some of this stuff.

00:03:51.980 --> 00:03:53.970
And that's what mod_pagespeed
is all about.

00:03:53.970 --> 00:03:56.210
That's why we say it's a
performance JIT, Just In Time

00:03:56.210 --> 00:03:58.730
compiler, in your web server.

00:03:58.730 --> 00:04:01.710
So maybe you can tell us a
little bit as to what that

00:04:01.710 --> 00:04:03.750
actually means and how
you guys have gone

00:04:03.750 --> 00:04:06.040
about doing this work.

00:04:06.040 --> 00:04:07.180
JOSHUA MARANTZ: Sure.

00:04:07.180 --> 00:04:09.660
There are a number of approaches
to automated

00:04:09.660 --> 00:04:11.300
website automation.

00:04:11.300 --> 00:04:14.970
And our approach was to make
it really easy to adopt.

00:04:14.970 --> 00:04:18.529
So half the websites around
the world are powered by

00:04:18.529 --> 00:04:19.980
Apache web servers.

00:04:19.980 --> 00:04:25.260
And so what we did was we
packaged our optimization

00:04:25.260 --> 00:04:28.520
framework as an open-source
Apache module.

00:04:28.520 --> 00:04:33.910
So you pretty much in three
commands can download our

00:04:33.910 --> 00:04:37.340
package, install it, and restart
Apache, and your

00:04:37.340 --> 00:04:39.190
website runs faster.

00:04:39.190 --> 00:04:42.740
ILYA GRIGORIK: That's a pretty
compelling pitch.

00:04:42.740 --> 00:04:45.160
JOSHUA MARANTZ: There's
then more you can do.

00:04:45.160 --> 00:04:48.155
There's a core set of filters
that we believe is very safe,

00:04:48.155 --> 00:04:51.160
will benefit websites a
lot and be very safe

00:04:51.160 --> 00:04:51.980
to run on all websites.

00:04:51.980 --> 00:04:54.500
And those come on when
you do that process.

00:04:54.500 --> 00:04:58.200
But then there's more that you
can do if you're willing to

00:04:58.200 --> 00:05:01.630
investigate and tune
it a little bit.

00:05:01.630 --> 00:05:04.380
But the whole idea was out
of the box, really good

00:05:04.380 --> 00:05:05.270
performance.

00:05:05.270 --> 00:05:05.580
ILYA GRIGORIK: Right.

00:05:05.580 --> 00:05:06.460
And safe, right?

00:05:06.460 --> 00:05:08.260
So your website shouldn't
be broken.

00:05:08.260 --> 00:05:10.430
And I think we'll actually take
a look at kind of deep in

00:05:10.430 --> 00:05:12.715
the guts of some of the filters
and how they work.

00:05:12.715 --> 00:05:15.440
But before we even get there,
one of the things that I

00:05:15.440 --> 00:05:19.340
wanted to highlight was that
I believe mod_pagespeed is

00:05:19.340 --> 00:05:22.770
actually based on another
open-source project.

00:05:22.770 --> 00:05:23.300
JOSHUA MARANTZ: That's right.

00:05:23.300 --> 00:05:28.090
So the way that it is structured
is that we thought

00:05:28.090 --> 00:05:29.980
Apache was a very good delivery
vehicle for our

00:05:29.980 --> 00:05:31.350
technology.

00:05:31.350 --> 00:05:33.550
But we know it's not the only
delivery vehicle for our

00:05:33.550 --> 00:05:35.180
technology that can
ever exist.

00:05:35.180 --> 00:05:39.350
So we layered this as an
optimization framework called

00:05:39.350 --> 00:05:43.020
the PageSpeed Optimization
Libraries, which is not tied

00:05:43.020 --> 00:05:44.270
to any particular server.

00:05:44.270 --> 00:05:45.240
It's a plug-in architecture.

00:05:45.240 --> 00:05:47.820
And we'll get into that more
a little bit later.

00:05:47.820 --> 00:05:52.050
And then we packaged that with
a connection to Apache, an

00:05:52.050 --> 00:05:55.660
Apache gasket, if you will, so
that it's just plug-and-play

00:05:55.660 --> 00:05:56.180
and you don't have to modify
the structure.

00:05:56.180 --> 00:05:57.520
ILYA GRIGORIK: So mod_pagespeed
is basically a

00:05:57.520 --> 00:06:00.150
wrapper around PageSpeed
Optimization

00:06:00.150 --> 00:06:02.125
Libraries for Apache.

00:06:02.125 --> 00:06:05.140
But if I want to adopt it
to some other server--

00:06:05.140 --> 00:06:07.670
maybe I've written one myself,
or I'm using some other

00:06:07.670 --> 00:06:08.340
popular server--

00:06:08.340 --> 00:06:10.930
I could actually still
reuse that same code.

00:06:10.930 --> 00:06:11.490
JOSHUA MARANTZ: Yes.

00:06:11.490 --> 00:06:15.790
And in fact, this is what we
have done with PageSpeed

00:06:15.790 --> 00:06:19.510
service, so that we've now
deployed this on two very

00:06:19.510 --> 00:06:23.000
different server stacks, one
based on Apache, one an

00:06:23.000 --> 00:06:24.080
internal Google one.

00:06:24.080 --> 00:06:28.550
But we can bring the same
technology in two very

00:06:28.550 --> 00:06:29.400
different deployments.

00:06:29.400 --> 00:06:33.420
And we are looking to expand
to any server that rises in

00:06:33.420 --> 00:06:33.770
popularity as well.

00:06:33.770 --> 00:06:33.920
ILYA GRIGORIK: Right.

00:06:33.920 --> 00:06:36.740
And PageSpeed Service is our
hosted version of this, which

00:06:36.740 --> 00:06:39.110
is actually still in beta,
and we're still kind of

00:06:39.110 --> 00:06:41.200
field-testing it with
other customers.

00:06:41.200 --> 00:06:43.600
But it's actually running
on the same code

00:06:43.600 --> 00:06:44.740
base, if you will.

00:06:44.740 --> 00:06:45.093
JOSHUA MARANTZ: Yes.

00:06:45.093 --> 00:06:47.690
ILYA GRIGORIK: Very cool.

00:06:47.690 --> 00:06:49.490
So I think we covered
some of this.

00:06:49.490 --> 00:06:51.400
We have a 1.0 coming.

00:06:51.400 --> 00:06:53.160
We know that it's an
Apache module.

00:06:53.160 --> 00:06:55.440
You guys have been working
on it for over two years.

00:06:55.440 --> 00:06:57.540
And you actually mentioned some
of the core filters and

00:06:57.540 --> 00:06:58.280
optional filters.

00:06:58.280 --> 00:07:00.635
And it sounds like there's
quite a few.

00:07:00.635 --> 00:07:02.090
JOSHUA MARANTZ: Yeah.

00:07:02.090 --> 00:07:04.110
There's a wide variety.

00:07:04.110 --> 00:07:05.470
There's a lot of ideas.

00:07:05.470 --> 00:07:09.720
Web performance is a topic
that invites papers.

00:07:09.720 --> 00:07:10.830
It invites conferences.

00:07:10.830 --> 00:07:12.990
Many companies are founded
around this.

00:07:12.990 --> 00:07:15.660
And there's lots of ideas that
are pouring into this.

00:07:15.660 --> 00:07:20.040
But we try to take the ones that
are most effective, that

00:07:20.040 --> 00:07:23.320
are incredibly robust and
predictable, and put them into

00:07:23.320 --> 00:07:25.730
the core set so that the
out-of-the-box experience is

00:07:25.730 --> 00:07:26.550
really good.

00:07:26.550 --> 00:07:30.510
And then there are a lot of
other things that we are

00:07:30.510 --> 00:07:32.270
working on, that we're
validating, that we're making

00:07:32.270 --> 00:07:33.860
sure are really solid
and will make it in.

00:07:33.860 --> 00:07:37.410
And there's others that we think
will probably always be

00:07:37.410 --> 00:07:41.900
kind of a manual configuration
kind of option.

00:07:41.900 --> 00:07:45.230
A good one of these is where
we defer JavaScript.

00:07:45.230 --> 00:07:48.500
That's a complicated thing to
do and has generally amazing

00:07:48.500 --> 00:07:49.420
effects on websites.

00:07:49.420 --> 00:07:51.250
But it is something that you
want to hand-validate, and you

00:07:51.250 --> 00:07:52.250
don't want to just
turn that on.

00:07:52.250 --> 00:07:52.320
ILYA GRIGORIK: Right.

00:07:52.320 --> 00:07:54.150
So I think this highlights kind
of a general point, which

00:07:54.150 --> 00:07:58.600
is to say there is a core set of
filters that you should be

00:07:58.600 --> 00:08:01.360
able to turn on or that will be
turned on once you install

00:08:01.360 --> 00:08:03.810
mod_pagespeed, and your site
should just go faster.

00:08:03.810 --> 00:08:06.230
But depending on your site,
you probably want to spend

00:08:06.230 --> 00:08:09.420
some time going through the
available filters and just

00:08:09.420 --> 00:08:11.910
seeing which ones may
apply to your site.

00:08:11.910 --> 00:08:15.300
And you'll be able to get more
performance benefits out of

00:08:15.300 --> 00:08:15.730
mod_pagespeed.

00:08:15.730 --> 00:08:16.260
JOSHUA MARANTZ: Right.

00:08:16.260 --> 00:08:17.130
ILYA GRIGORIK: Very cool.

00:08:17.130 --> 00:08:18.860
So I think we're going
to dive into the

00:08:18.860 --> 00:08:19.790
details of some of these.

00:08:19.790 --> 00:08:24.260
But I do want to touch on one
point, which is we do support

00:08:24.260 --> 00:08:27.330
2.2 and 2.4 of Apache?

00:08:27.330 --> 00:08:28.070
JOSHUA MARANTZ: That's
correct.

00:08:28.070 --> 00:08:30.520
Apache 2.4 support came
out recently.

00:08:30.520 --> 00:08:32.830
And that's in our 1.0
release as well.

00:08:32.830 --> 00:08:33.289
ILYA GRIGORIK: Awesome.

00:08:33.289 --> 00:08:35.179
And you mentioned that it's
just a couple of lines.

00:08:35.179 --> 00:08:39.050
So we have, I guess, packages
for Debian and RPMs that you

00:08:39.050 --> 00:08:40.409
can just install.

00:08:40.409 --> 00:08:45.310
JOSHUA MARANTZ: We do, although
external developers

00:08:45.310 --> 00:08:49.580
have generated packages for
openSUSE and even for Windows.

00:08:53.630 --> 00:08:54.680
It's an open-source product.

00:08:54.680 --> 00:08:56.880
We have a build process and
instructions for doing that.

00:08:56.880 --> 00:08:58.490
And so people can put
up other packages.

00:08:58.490 --> 00:09:02.010
FreeBSD is another
one has support.

00:09:02.010 --> 00:09:02.220
ILYA GRIGORIK: Right.

00:09:02.220 --> 00:09:04.015
So I can just build it
from source, right?

00:09:04.015 --> 00:09:04.450
JOSHUA MARANTZ: Yes.

00:09:04.450 --> 00:09:04.570
ILYA GRIGORIK: OK.

00:09:04.570 --> 00:09:04.890
Cool.

00:09:04.890 --> 00:09:06.630
And then one more
thing for 1.0.

00:09:06.630 --> 00:09:10.890
I know that until recently, or
until we ship 1.0, there was

00:09:10.890 --> 00:09:14.780
one release tree, if you
will, or one package.

00:09:14.780 --> 00:09:17.540
And I think moving forward,
once we release 1.0, we'll

00:09:17.540 --> 00:09:18.690
actually have two.

00:09:18.690 --> 00:09:19.500
JOSHUA MARANTZ: That's right.

00:09:19.500 --> 00:09:22.740
The current release package, if
you're using mod_pagespeed

00:09:22.740 --> 00:09:24.570
today, you're on the
beta channel if you

00:09:24.570 --> 00:09:25.970
installed from binaries.

00:09:25.970 --> 00:09:28.050
And we're going to continue
to have that beta channel.

00:09:28.050 --> 00:09:31.910
But the 1.0 release introduces
a new stable channel.

00:09:31.910 --> 00:09:35.980
And the way that this will work
is that we will release

00:09:35.980 --> 00:09:36.990
new features into beta.

00:09:36.990 --> 00:09:39.660
And after we're really
comfortable and solid with

00:09:39.660 --> 00:09:41.650
them, then we'll update
the stable channel.

00:09:41.650 --> 00:09:45.120
And then when you update your
packages and your operating

00:09:45.120 --> 00:09:51.040
system with yum update or
updating the Debian package

00:09:51.040 --> 00:09:54.760
system, you'll upgrade
based on the

00:09:54.760 --> 00:09:56.080
channel that you've selected.

00:09:56.080 --> 00:09:56.440
ILYA GRIGORIK: Cool.

00:09:56.440 --> 00:09:57.100
That makes sense.

00:09:57.100 --> 00:09:57.430
All right.

00:09:57.430 --> 00:10:00.820
So let's dive into
the guts of it.

00:10:00.820 --> 00:10:02.370
But I think we touched
on this already.

00:10:02.370 --> 00:10:03.670
I'll just mention it briefly.

00:10:03.670 --> 00:10:06.140
The whole point, I guess, with
mod_pagespeed is to highlight

00:10:06.140 --> 00:10:08.860
the things that you
don't need to do.

00:10:08.860 --> 00:10:12.800
So instead of having to worry
about it do I need to have an

00:10:12.800 --> 00:10:16.020
extra build process for
optimizing images or

00:10:16.020 --> 00:10:18.570
concatenating my CSS or
JavaScript or all the rest,

00:10:18.570 --> 00:10:21.160
all that is taken care
of by mod_pagespeed.

00:10:21.160 --> 00:10:23.810
And in fact, that means that
I don't need to modify my

00:10:23.810 --> 00:10:26.760
current workflow or my team's
workflow to take advantage of

00:10:26.760 --> 00:10:28.050
all these optimizations.

00:10:28.050 --> 00:10:29.050
JOSHUA MARANTZ: That's
exactly the point.

00:10:29.050 --> 00:10:33.750
It's a drop-in solution for
performing best practices for

00:10:33.750 --> 00:10:34.340
web clients.

00:10:34.340 --> 00:10:35.800
ILYA GRIGORIK: So the clients,
or the visitors I should say,

00:10:35.800 --> 00:10:37.420
would see the optimized
resources.

00:10:37.420 --> 00:10:39.710
I still have my original
resources in my dev

00:10:39.710 --> 00:10:40.280
environment.

00:10:40.280 --> 00:10:41.800
And mod_pagespeed
does the rest.

00:10:41.800 --> 00:10:42.760
JOSHUA MARANTZ: Exactly.

00:10:42.760 --> 00:10:44.330
ILYA GRIGORIK: Very cool.

00:10:44.330 --> 00:10:46.200
So you mentioned this earlier.

00:10:46.200 --> 00:10:49.930
We have over 100,000
mod_pagespeed installs today,

00:10:49.930 --> 00:10:52.660
since you guys announced
the product.

00:10:52.660 --> 00:10:56.350
And in fact, there is a number
of partners who have already

00:10:56.350 --> 00:11:01.590
installed it as part of their
hosting infrastructure.

00:11:01.590 --> 00:11:04.750
So for example, I know that in
DreamHost or Go Daddy, you can

00:11:04.750 --> 00:11:07.480
actually go into your control
panel, click--

00:11:07.480 --> 00:11:09.990
I think it's in these
settings.

00:11:09.990 --> 00:11:12.010
I'm not sure exactly where
in the menu it is.

00:11:12.010 --> 00:11:13.360
But I know there
is a check-box.

00:11:13.360 --> 00:11:15.090
You say, please accelerate
my site.

00:11:15.090 --> 00:11:16.410
And all of a sudden, the
site goes faster.

00:11:16.410 --> 00:11:18.660
And what happens under the
hood is they enable

00:11:18.660 --> 00:11:20.940
mod_pagespeed for your site.

00:11:20.940 --> 00:11:22.880
JOSHUA MARANTZ: That's
exactly right.

00:11:22.880 --> 00:11:25.960
Having that check-box to just
turn it on is even easier than

00:11:25.960 --> 00:11:29.100
the three-step install process
that I mentioned earlier.

00:11:29.100 --> 00:11:30.610
ILYA GRIGORIK: So it's
like the Turbo button

00:11:30.610 --> 00:11:31.400
back in the old days.

00:11:31.400 --> 00:11:33.360
It's like make my site fast.

00:11:33.360 --> 00:11:36.670
Why wouldn't you turn that on?

00:11:36.670 --> 00:11:37.200
Very cool.

00:11:37.200 --> 00:11:42.770
So let's dive into, I guess,
some of the guts.

00:11:42.770 --> 00:11:43.940
Here's an example.

00:11:43.940 --> 00:11:44.240
JOSHUA MARANTZ: Yeah.

00:11:44.240 --> 00:11:47.500
So the best way to see
it in action, this

00:11:47.500 --> 00:11:48.970
is a shopping website.

00:11:48.970 --> 00:11:57.040
And we made a video comparing
a first view of that site on

00:11:57.040 --> 00:12:01.930
Chrome with mod_pagespeed off
and with mod_pagespeed on.

00:12:01.930 --> 00:12:02.890
And this is--

00:12:02.890 --> 00:12:04.500
ILYA GRIGORIK: So this
is a side-by-side

00:12:04.500 --> 00:12:07.621
recording of on and off.

00:12:07.621 --> 00:12:08.070
Wow.

00:12:08.070 --> 00:12:08.540
JOSHUA MARANTZ: Correct.

00:12:08.540 --> 00:12:11.430
So this video was made with
WebPagetest, which offers all

00:12:11.430 --> 00:12:12.360
kinds of opportunities--

00:12:12.360 --> 00:12:13.880
ILYA GRIGORIK: I'm going to play
that again just so you

00:12:13.880 --> 00:12:15.790
guys can see it.

00:12:15.790 --> 00:12:18.490
So the page loads
in 2.1 seconds.

00:12:18.490 --> 00:12:20.950
And then the other one takes
about five seconds, if I

00:12:20.950 --> 00:12:23.960
scroll back here.

00:12:23.960 --> 00:12:25.260
And you can see that
the mod_pagespeed

00:12:25.260 --> 00:12:26.370
one loads a lot faster.

00:12:26.370 --> 00:12:28.400
Now, there could be many reasons
for this, right?

00:12:28.400 --> 00:12:30.270
I'm guessing it's a combination
of filters that

00:12:30.270 --> 00:12:32.430
come into effect to make
this difference.

00:12:32.430 --> 00:12:34.830
But it's 200% faster,
or more, here.

00:12:34.830 --> 00:12:35.700
JOSHUA MARANTZ: Yeah.

00:12:35.700 --> 00:12:39.180
It's also important to note that
even though the rendering

00:12:39.180 --> 00:12:44.110
takes 2.1 seconds, it's actually
pretty visible after

00:12:44.110 --> 00:12:47.105
probably less than a second.

00:12:47.105 --> 00:12:47.600
ILYA GRIGORIK: Right.

00:12:47.600 --> 00:12:50.160
So if I just scrub back here.

00:12:50.160 --> 00:12:54.180
So we have 1.8 seconds in, we
already have the page, whereas

00:12:54.180 --> 00:12:56.440
the other one is blank.

00:12:56.440 --> 00:12:58.320
So that's a dramatic
difference.

00:12:58.320 --> 00:12:59.740
JOSHUA MARANTZ: So we can see
a little bit of why that

00:12:59.740 --> 00:13:01.340
happened by going to
the next slide.

00:13:05.620 --> 00:13:09.480
So those that have dabbled in
web performance have seen

00:13:09.480 --> 00:13:11.260
these waterfall diagrams
that are available.

00:13:11.260 --> 00:13:13.970
ILYA GRIGORIK: That's the
bread and butter.

00:13:13.970 --> 00:13:15.270
JOSHUA MARANTZ: They're
available in Firebug and the

00:13:15.270 --> 00:13:16.440
Chrome Developer Tools.

00:13:16.440 --> 00:13:20.180
And these are from
WebPagetest.

00:13:20.180 --> 00:13:21.770
Again, this is from Chrome.

00:13:21.770 --> 00:13:23.290
ILYA GRIGORIK: So this is
the same website, right?

00:13:23.290 --> 00:13:24.670
We're just looking at the
waterfall charts.

00:13:24.670 --> 00:13:25.130
JOSHUA MARANTZ: Exactly.

00:13:25.130 --> 00:13:26.930
The same exact website.

00:13:26.930 --> 00:13:31.500
On the left, the waterfall chart
is tall, which means

00:13:31.500 --> 00:13:32.830
there's a lot of resources.

00:13:32.830 --> 00:13:33.860
And it's wide.

00:13:33.860 --> 00:13:36.280
There's a lot of
wide blue bars.

00:13:36.280 --> 00:13:40.510
Those wide blue bars are big
images which don't need to be

00:13:40.510 --> 00:13:42.260
nearly that big.

00:13:42.260 --> 00:13:47.100
And so on the right, they
become a lot skinnier.

00:13:47.100 --> 00:13:49.900
There's also a lot less bars.

00:13:49.900 --> 00:13:54.060
So the two things that are most
visible in the waterfall

00:13:54.060 --> 00:13:56.180
diagram, in terms of the effects
of mod_pagespeed

00:13:56.180 --> 00:13:59.430
filters, are one, optimizing
images.

00:13:59.430 --> 00:14:02.320
So there's actually three
ways in which

00:14:02.320 --> 00:14:04.430
the images are optimized.

00:14:04.430 --> 00:14:07.510
Number one, mod_pagespeed looks
at the context in which

00:14:07.510 --> 00:14:08.690
images are displayed.

00:14:08.690 --> 00:14:10.960
Very often, images are taken
from cameras at full

00:14:10.960 --> 00:14:16.460
resolution and instantiated
into very small divs or

00:14:16.460 --> 00:14:19.200
elements in HTML, 100
by 200 or something.

00:14:19.200 --> 00:14:22.370
And there's way more pixels
being sent down to the browser

00:14:22.370 --> 00:14:23.240
than the browser needs.

00:14:23.240 --> 00:14:25.620
And this wastes bandwidth and
it wastes CPU time on the

00:14:25.620 --> 00:14:26.410
browser resizing.

00:14:26.410 --> 00:14:28.240
So it's much better to
resize on the server.

00:14:28.240 --> 00:14:30.110
But who wants to do that?

00:14:30.110 --> 00:14:33.070
Well, turn on mod_pagespeed and
it happens automatically.

00:14:33.070 --> 00:14:36.110
The other thing is that the
images are typically at a much

00:14:36.110 --> 00:14:41.560
higher quality ratio than you
need for an LCD display or a

00:14:41.560 --> 00:14:42.550
retina display.

00:14:42.550 --> 00:14:47.190
And it is pretty straightforward
to remove a

00:14:47.190 --> 00:14:48.730
lot of the bytes of
that image without

00:14:48.730 --> 00:14:50.660
reducing any visible quality.

00:14:50.660 --> 00:14:54.250
And the third point is that
modern web browsers, including

00:14:54.250 --> 00:14:59.330
Chrome and Opera, support a more
modern format of image

00:14:59.330 --> 00:15:04.220
called WebP, which Google
released over a year ago,

00:15:04.220 --> 00:15:08.700
which for the same quality can
get you about 30% less bytes.

00:15:08.700 --> 00:15:11.710
And so this is not something
you would do manually.

00:15:11.710 --> 00:15:17.880
But an automated tool can tune
the experience, tune the HTML

00:15:17.880 --> 00:15:20.370
that's delivered and the images
that are delivered to

00:15:20.370 --> 00:15:21.860
the browser in question.

00:15:21.860 --> 00:15:25.480
So mod_pagespeed can take a JPEG
resource and transcode it

00:15:25.480 --> 00:15:29.590
and deliver it as WebP to Chrome
and Opera, and to other

00:15:29.590 --> 00:15:33.040
browsers deliver it as JPEG, so
that it works either way.

00:15:33.040 --> 00:15:36.990
So between all of those, we
shrunk this site way down.

00:15:36.990 --> 00:15:41.850
And actually, the waterfall
diagram, that blue line

00:15:41.850 --> 00:15:43.980
represents the onload event.

00:15:43.980 --> 00:15:46.990
What happens after the onload
event in this particular site

00:15:46.990 --> 00:15:50.460
is third-party widgets that are
loading asynchronously,

00:15:50.460 --> 00:15:51.080
which is great.

00:15:51.080 --> 00:15:53.730
So the site was built with
that really well.

00:15:53.730 --> 00:15:56.200
And so there's analytics
running.

00:15:56.200 --> 00:16:00.650
There's buttons from different
third-party vendors that are

00:16:00.650 --> 00:16:02.240
loading at that point.

00:16:02.240 --> 00:16:04.170
But it doesn't block onloads,
so the user is fully

00:16:04.170 --> 00:16:06.270
interactive at the time of that
blue line, which happens

00:16:06.270 --> 00:16:07.530
way earlier than on
the other site.

00:16:07.530 --> 00:16:09.040
ILYA GRIGORIK: So it's really
interesting that just by kind

00:16:09.040 --> 00:16:12.540
of blurring your eyes, we can
look at this waterfall and

00:16:12.540 --> 00:16:15.720
just figure out what's happening
just on the shape,

00:16:15.720 --> 00:16:17.430
without even looking
at the resources.

00:16:17.430 --> 00:16:19.800
So you can say like, we
optimized the images.

00:16:19.800 --> 00:16:22.150
We probably concatenated some
files, which is why it became

00:16:22.150 --> 00:16:24.470
shorter, and a few
other things.

00:16:24.470 --> 00:16:24.840
JOSHUA MARANTZ: Yeah.

00:16:24.840 --> 00:16:29.010
I mean, mod_pagespeed is not
necessarily all that you would

00:16:29.010 --> 00:16:32.140
ever want to do to make
your site fast.

00:16:32.140 --> 00:16:33.930
It's now running in
two-point-something seconds.

00:16:33.930 --> 00:16:35.820
So you could probably get it
down to one second, because

00:16:35.820 --> 00:16:37.940
there's a lot of kind of
cascading effect here.

00:16:37.940 --> 00:16:39.000
And there's not much
parallelism,

00:16:39.000 --> 00:16:42.270
especially after onload.

00:16:42.270 --> 00:16:44.700
And so diving deeper into the
waterfalls is something that

00:16:44.700 --> 00:16:46.570
you might want to do if you
want that next level.

00:16:46.570 --> 00:16:49.960
But kind of without any effort
at all you can get--

00:16:49.960 --> 00:16:50.140
ILYA GRIGORIK: Yeah.

00:16:50.140 --> 00:16:50.970
I'll take it.

00:16:50.970 --> 00:16:51.450
Right.

00:16:51.450 --> 00:16:53.280
2X just for turning on a flag.

00:16:53.280 --> 00:16:56.360
I'll take it.

00:16:56.360 --> 00:16:56.620
All right.

00:16:56.620 --> 00:17:00.282
So now we will go under the
hood of this thing.

00:17:03.120 --> 00:17:03.350
OK.

00:17:03.350 --> 00:17:04.630
So we'll start with
a simple one.

00:17:04.630 --> 00:17:05.619
So HTML Collapse.

00:17:05.619 --> 00:17:09.349
This is an example filter, a
very simple one but it will be

00:17:09.349 --> 00:17:11.180
a good introduction to
some of the more

00:17:11.180 --> 00:17:12.869
interesting ones later.

00:17:12.869 --> 00:17:13.230
JOSHUA MARANTZ: Yeah.

00:17:13.230 --> 00:17:17.450
So this is kind of the simplest
possible filter that

00:17:17.450 --> 00:17:17.869
you can have.

00:17:17.869 --> 00:17:19.560
And this is actually a filter
that we have in

00:17:19.560 --> 00:17:20.329
mod_pagespeed today.

00:17:20.329 --> 00:17:23.520
It's a little bit more involved
than this in reality.

00:17:23.520 --> 00:17:26.950
But this is essentially it.

00:17:26.950 --> 00:17:32.190
You can, as every filter can,
register for interest in

00:17:32.190 --> 00:17:35.000
various HTML events,
as it were.

00:17:35.000 --> 00:17:38.070
And as the events stream through
the system, we can

00:17:38.070 --> 00:17:39.270
say, hey, this one's
interested in

00:17:39.270 --> 00:17:40.150
a Characters node.

00:17:40.150 --> 00:17:42.240
That's all Collapse Whitespace
cares about.

00:17:42.240 --> 00:17:47.670
And then it basically just wipes
out extra spaces that

00:17:47.670 --> 00:17:50.220
it's pretty sure can't matter.

00:17:50.220 --> 00:17:52.820
And cases where it would matter
is if it's in a pre

00:17:52.820 --> 00:17:54.350
tag, and there's other
cases as well.

00:17:54.350 --> 00:17:55.520
ILYA GRIGORIK: Right.

00:17:55.520 --> 00:17:57.370
So it's not as simple
as it looks.

00:17:57.370 --> 00:18:01.500
This is not like run a gsub
and remove all the spaces.

00:18:01.500 --> 00:18:02.985
You're actually parsing
the HTML.

00:18:02.985 --> 00:18:05.615
And you're saying, hey, this
is inside of a pre tag or a

00:18:05.615 --> 00:18:08.140
script tag, so the white
space is significant.

00:18:08.140 --> 00:18:11.430
But nonetheless, inside of your
regular HTML markup, you

00:18:11.430 --> 00:18:14.160
can still compress the
extra white space.

00:18:14.160 --> 00:18:15.810
JOSHUA MARANTZ: Exactly.

00:18:15.810 --> 00:18:18.280
And this is a relatively
popular filter.

00:18:18.280 --> 00:18:20.030
It's actually not
a core filter.

00:18:20.030 --> 00:18:21.410
ILYA GRIGORIK: Interesting.

00:18:21.410 --> 00:18:23.520
JOSHUA MARANTZ: And that's
because we are a little bit

00:18:23.520 --> 00:18:24.280
conservative.

00:18:24.280 --> 00:18:30.050
And it is quite possible for an
element to have its white

00:18:30.050 --> 00:18:34.720
space become significant due to
a JavaScript event, which

00:18:34.720 --> 00:18:36.890
is not something that
mod_pagespeed

00:18:36.890 --> 00:18:37.560
currently looks at.

00:18:37.560 --> 00:18:39.710
So this is a filter that's
pretty safe to do.

00:18:39.710 --> 00:18:42.090
But we leave it up to users
to turn it on by default.

00:18:42.090 --> 00:18:44.250
I've noticed a lot of users do
turn this on, because it's

00:18:44.250 --> 00:18:45.220
mostly pretty safe.

00:18:45.220 --> 00:18:45.470
ILYA GRIGORIK: Right.

00:18:45.470 --> 00:18:45.780
OK.

00:18:45.780 --> 00:18:47.030
That makes sense.

00:18:50.390 --> 00:18:52.320
So this is a more interesting
one, right?

00:18:52.320 --> 00:18:55.450
So now we're talking combining
multiple CSS files.

00:18:55.450 --> 00:18:57.770
So how does this work?

00:18:57.770 --> 00:18:57.970
JOSHUA MARANTZ: Right.

00:18:57.970 --> 00:19:05.450
So the basic idea here is that
as HTML is streaming through

00:19:05.450 --> 00:19:07.890
mod_pagespeed, we're
parsing tags.

00:19:07.890 --> 00:19:12.460
We're saying, hey, here's
four link tags.

00:19:12.460 --> 00:19:18.980
Let's collect all of those
together, collect the contents

00:19:18.980 --> 00:19:22.300
of those, and collect the
names of the CSS files.

00:19:22.300 --> 00:19:26.920
And we'll get into how that
happens in a few minutes.

00:19:26.920 --> 00:19:31.530
But what it is that happens is
that those four link tags get

00:19:31.530 --> 00:19:33.370
replaced with a single
link tag.

00:19:33.370 --> 00:19:33.996
ILYA GRIGORIK: Which
is the one we see

00:19:33.996 --> 00:19:34.410
on the bottom, right?

00:19:34.410 --> 00:19:35.950
JOSHUA MARANTZ: Which is the one
that we see on the bottom.

00:19:35.950 --> 00:19:42.460
And it has the names of the
original CSS files separated

00:19:42.460 --> 00:19:44.380
by plus signs, literally.

00:19:44.380 --> 00:19:49.340
And then there is a .pagespeed
keyword, which is something

00:19:49.340 --> 00:19:51.480
that we look for when
we are serving it.

00:19:51.480 --> 00:19:52.765
ILYA GRIGORIK: It's
kind of a hint to

00:19:52.765 --> 00:19:53.850
mod_pagespeed, if you will.

00:19:53.850 --> 00:19:54.110
JOSHUA MARANTZ: Yeah.

00:19:54.110 --> 00:19:58.210
And then there's a code
"cc," which actually

00:19:58.210 --> 00:19:59.320
means Combine CSS.

00:19:59.320 --> 00:20:00.110
And then there's a HASH.

00:20:00.110 --> 00:20:03.190
And this HASH is
very important.

00:20:03.190 --> 00:20:06.500
This HASH is the technology that
lets mod_pagespeed serve

00:20:06.500 --> 00:20:10.020
any resource with a one-year
cache lifetime, because that

00:20:10.020 --> 00:20:15.680
HASH is the MD5 sum of the
optimized resource.

00:20:15.680 --> 00:20:19.490
ILYA GRIGORIK: So it's the MD5
sum of the combined CSS files.

00:20:19.490 --> 00:20:19.690
JOSHUA MARANTZ: Right.

00:20:19.690 --> 00:20:21.940
So it's kind of a signature
for this file.

00:20:21.940 --> 00:20:24.060
Or you could think of it as
a version of this file.

00:20:24.060 --> 00:20:24.260
ILYA GRIGORIK: Right.

00:20:24.260 --> 00:20:27.950
So if I modify, let's say,
big.css, and I add extra white

00:20:27.950 --> 00:20:31.220
space, and I save it, the MD5
sum would change, and you

00:20:31.220 --> 00:20:33.900
would regenerate
this resource.

00:20:33.900 --> 00:20:37.010
JOSHUA MARANTZ: That's correct
if we didn't minify that CSS

00:20:37.010 --> 00:20:38.270
file and get rid of
that white space.

00:20:38.270 --> 00:20:38.380
ILYA GRIGORIK: OK.

00:20:38.380 --> 00:20:39.080
Right.

00:20:39.080 --> 00:20:40.970
So white space is
a bad example.

00:20:40.970 --> 00:20:42.530
JOSHUA MARANTZ: But if you
actually change the content of

00:20:42.530 --> 00:20:47.350
the CSS file, then we would
have a different MD5 sum.

00:20:47.350 --> 00:20:49.740
So we might have cached
this one for a year.

00:20:49.740 --> 00:20:51.600
And you might think it's stale,
but it's OK because

00:20:51.600 --> 00:20:53.180
we'll never reference
it again.

00:20:53.180 --> 00:20:53.820
ILYA GRIGORIK: Right.

00:20:53.820 --> 00:20:54.110
OK.

00:20:54.110 --> 00:20:56.790
And I guess maybe to backtrack a
little bit, and the reason I

00:20:56.790 --> 00:21:00.630
guess we want to do this is
fetching multiple files

00:21:00.630 --> 00:21:03.230
consumes maybe additional
TCP connections.

00:21:03.230 --> 00:21:05.410
So by combining it all
together, we have one

00:21:05.410 --> 00:21:08.320
resource, which you can
fetch down faster.

00:21:08.320 --> 00:21:10.980
And hopefully that'll lead to
a faster render on the page.

00:21:10.980 --> 00:21:11.450
JOSHUA MARANTZ: Exactly.

00:21:11.450 --> 00:21:14.070
This is kind of the height
of that waterfall

00:21:14.070 --> 00:21:16.050
chart that you see.

00:21:16.050 --> 00:21:18.090
If your waterfall chart, for
example, doesn't fit on your

00:21:18.090 --> 00:21:20.410
screen, you know that you
have some work to do.

00:21:20.410 --> 00:21:21.030
ILYA GRIGORIK: Right.

00:21:21.030 --> 00:21:21.920
Yes.

00:21:21.920 --> 00:21:24.150
That's a good rule of
thumb, in general.

00:21:24.150 --> 00:21:25.660
JOSHUA MARANTZ: The other point
that I want to make is

00:21:25.660 --> 00:21:29.640
that by providing long cache
lifetimes, you make all the

00:21:29.640 --> 00:21:34.390
caches that are in the network
in between the server and the

00:21:34.390 --> 00:21:35.420
client more effective.

00:21:35.420 --> 00:21:37.470
You make the browser cache
more effective.

00:21:37.470 --> 00:21:40.540
You make any caching done at the
ISP layer more effective.

00:21:40.540 --> 00:21:42.630
And you make content delivery
networks more effective,

00:21:42.630 --> 00:21:45.950
because the versions of the
assets that they store, they

00:21:45.950 --> 00:21:48.450
know that they don't have to
check back with the origin to

00:21:48.450 --> 00:21:50.670
revalidate for a year.

00:21:50.670 --> 00:21:51.070
ILYA GRIGORIK: Right.

00:21:51.070 --> 00:21:51.510
OK.

00:21:51.510 --> 00:21:54.210
Very interesting.

00:21:54.210 --> 00:21:58.800
So let's take a look at
the monster diagram.

00:21:58.800 --> 00:22:04.150
So maybe you can just walk us
through what happens when an

00:22:04.150 --> 00:22:04.600
HTTP request comes up.

00:22:04.600 --> 00:22:05.140
JOSHUA MARANTZ: Sure.

00:22:05.140 --> 00:22:10.500
So this is the view of what
happens in Apache.

00:22:10.500 --> 00:22:15.300
Apache has a module
architecture, which allows

00:22:15.300 --> 00:22:19.260
anybody to write their own
Apache module that can help

00:22:19.260 --> 00:22:21.070
make some kind of transformation
to the content

00:22:21.070 --> 00:22:21.526
or the networking.

00:22:21.526 --> 00:22:22.890
ILYA GRIGORIK: Some examples
are, like, mod_deflate,

00:22:22.890 --> 00:22:23.760
mod_security.

00:22:23.760 --> 00:22:25.290
There's lots and lots
of these things.

00:22:25.290 --> 00:22:26.900
JOSHUA MARANTZ: Actually,
mod_deflate is a really good

00:22:26.900 --> 00:22:30.110
example, because what that one
does is-- the most important

00:22:30.110 --> 00:22:32.170
thing that you can do even
before you run mod_pagespeed

00:22:32.170 --> 00:22:36.040
is make sure to always
compress your output.

00:22:36.040 --> 00:22:38.540
And that is basically an output
filter that just looks

00:22:38.540 --> 00:22:41.580
at the stream of bytes that are
coming through it and just

00:22:41.580 --> 00:22:43.740
makes them smaller and adds the
header to say, by the way,

00:22:43.740 --> 00:22:43.840
I gzipped it.

00:22:43.840 --> 00:22:45.400
ILYA GRIGORIK: This is a little
bit of an aside, but

00:22:45.400 --> 00:22:48.610
would you use mod_deflate
with mod_pagespeed?

00:22:48.610 --> 00:22:51.860
JOSHUA MARANTZ: Actually, if
you have mod_pagespeed, we

00:22:51.860 --> 00:22:53.180
will turn on mod_deflate.

00:22:53.180 --> 00:22:55.130
So they work together.

00:22:55.130 --> 00:23:00.270
Mod_pagespeed would be less
effective if mod_deflate

00:23:00.270 --> 00:23:01.870
wasn't there.

00:23:01.870 --> 00:23:05.360
But they're complementary,
because mod_pagespeed doesn't

00:23:05.360 --> 00:23:07.440
attempt to gzip assets itself.

00:23:07.440 --> 00:23:09.750
It depends on mod_deflate
to do that.

00:23:09.750 --> 00:23:12.030
But it does make them smaller
in the first place.

00:23:12.030 --> 00:23:14.580
And image compression is
not really addressed by

00:23:14.580 --> 00:23:16.720
mod_deflate as well.

00:23:16.720 --> 00:23:20.660
So the way that an Apache module
works is that it can

00:23:20.660 --> 00:23:25.080
install into the Apache kernel
an input filter, which takes

00:23:25.080 --> 00:23:27.950
requests and mutates them in
some way that's particular to

00:23:27.950 --> 00:23:30.500
the filter.

00:23:30.500 --> 00:23:36.205
Content generators can look at
URLs and say, either I know

00:23:36.205 --> 00:23:37.090
how to handle that one.

00:23:37.090 --> 00:23:38.780
I'll take it over.

00:23:38.780 --> 00:23:40.160
Nobody else needs to
worry about it.

00:23:40.160 --> 00:23:41.810
Or, that one's not for me.

00:23:41.810 --> 00:23:42.860
I decline it.

00:23:42.860 --> 00:23:44.430
I'll pass it on to
the next one.

00:23:44.430 --> 00:23:47.620
And they can install output
filters, which just get put

00:23:47.620 --> 00:23:50.850
into the chain of the byte
stream as it goes through.

00:23:50.850 --> 00:23:51.140
ILYA GRIGORIK: Right.

00:23:51.140 --> 00:23:54.320
So here in this diagram, you
just have the PHP handler.

00:23:54.320 --> 00:23:57.620
So if I have a .PHP file, it
would intercept that and say,

00:23:57.620 --> 00:23:58.430
hey, that's for me.

00:23:58.430 --> 00:23:59.850
I will generate the
byte stream.

00:23:59.850 --> 00:24:01.020
JOSHUA MARANTZ: Exactly.

00:24:01.020 --> 00:24:04.800
So mod_pagespeed puts a handler
in which looks at

00:24:04.800 --> 00:24:07.056
those .pagespeed .resources.

00:24:07.056 --> 00:24:08.870
ILYA GRIGORIK: So it's like
a custom extension.

00:24:08.870 --> 00:24:10.000
JOSHUA MARANTZ: Exactly.

00:24:10.000 --> 00:24:12.530
And that's for handling
resources, for handling

00:24:12.530 --> 00:24:15.210
images, CSS, and JavaScript.

00:24:15.210 --> 00:24:19.000
For HTML, it installs an output
filter where it looks

00:24:19.000 --> 00:24:20.610
at this stream of
bytes going by.

00:24:20.610 --> 00:24:25.510
And whenever it finds HTML, it
parses it and tries to make

00:24:25.510 --> 00:24:28.120
optimizations in it as
it goes through.

00:24:28.120 --> 00:24:33.000
So if an HTML file comes into
Apache, what will typically

00:24:33.000 --> 00:24:35.960
happen is it'll go through
the input filters.

00:24:35.960 --> 00:24:38.090
The PageSpeed resource handler
will look at it.

00:24:38.090 --> 00:24:39.020
But it won't do anything
with it,

00:24:39.020 --> 00:24:41.690
because it's not a resource.

00:24:41.690 --> 00:24:48.040
The PHP handler, if PHP was
handling those, would take the

00:24:48.040 --> 00:24:52.820
URL and generate HTML out, which
would then be sent to

00:24:52.820 --> 00:24:55.080
mod_pagespeed's output filter,
which would start looking at

00:24:55.080 --> 00:24:59.720
HTML and deciding, based on the
tags and the characters

00:24:59.720 --> 00:25:01.770
that are parsed, whether
it wants to mutate

00:25:01.770 --> 00:25:03.020
those bytes or not.

00:25:06.910 --> 00:25:10.690
An important thing that
mod_pagespeed tries to do is

00:25:10.690 --> 00:25:12.470
never slow down the page.

00:25:12.470 --> 00:25:14.450
So some of the things that
mod_pagespeed does are

00:25:14.450 --> 00:25:17.090
actually compute-intensive
or rely on the network.

00:25:17.090 --> 00:25:17.270
ILYA GRIGORIK: Right.

00:25:17.270 --> 00:25:18.460
That was actually going
to be my question.

00:25:18.460 --> 00:25:20.780
It sounds like a lot of work.

00:25:20.780 --> 00:25:22.040
JOSHUA MARANTZ: There is
definitely work going on.

00:25:22.040 --> 00:25:25.870
So there's HTML parsing, but
streaming parsers go fast, so

00:25:25.870 --> 00:25:27.650
that's not really a problem.

00:25:27.650 --> 00:25:29.915
But when we have to go and
optimize an image-- well, we

00:25:29.915 --> 00:25:32.140
have to fetch images, we have to
optimize images-- we'll do

00:25:32.140 --> 00:25:36.275
that in the background,
typically, and also optimize

00:25:36.275 --> 00:25:37.550
them in the background.

00:25:37.550 --> 00:25:44.570
So we will only do the tag
replacement for images if we

00:25:44.570 --> 00:25:46.490
already had that in cache.

00:25:46.490 --> 00:25:47.860
ILYA GRIGORIK: Interesting.

00:25:47.860 --> 00:25:51.700
So let's say I've just started
my web server.

00:25:51.700 --> 00:25:52.730
Nobody has hit it.

00:25:52.730 --> 00:25:55.840
And I make the first request, I
would still get the original

00:25:55.840 --> 00:25:57.790
unoptimized resource them?

00:25:57.790 --> 00:25:58.260
JOSHUA MARANTZ: That's right.

00:25:58.260 --> 00:26:01.700
Probably for the most part,
your resources will come

00:26:01.700 --> 00:26:03.375
through unoptimized,
but Collapse

00:26:03.375 --> 00:26:04.680
Whitespace would work.

00:26:04.680 --> 00:26:04.980
ILYA GRIGORIK: Right.

00:26:04.980 --> 00:26:05.180
OK.

00:26:05.180 --> 00:26:07.310
So you would apply filters
that work really fast.

00:26:07.310 --> 00:26:09.380
And then on the second hit, you
would actually serve me

00:26:09.380 --> 00:26:10.370
the optimized content.

00:26:10.370 --> 00:26:11.000
JOSHUA MARANTZ: Exactly.

00:26:11.000 --> 00:26:11.600
ILYA GRIGORIK: Right.

00:26:11.600 --> 00:26:13.310
That's a very good point.

00:26:13.310 --> 00:26:13.760
OK.

00:26:13.760 --> 00:26:17.870
So maybe one more quick note,
which is to say we talked

00:26:17.870 --> 00:26:20.880
about PHP, but I think it's
important to note that one of

00:26:20.880 --> 00:26:23.920
the strong or popular
applications for Apache is

00:26:23.920 --> 00:26:25.530
that it can act as a proxy.

00:26:25.530 --> 00:26:28.430
So if you have some other server
running somewhere--

00:26:28.430 --> 00:26:30.650
that can be another app server,
maybe it's a Ruby app

00:26:30.650 --> 00:26:32.660
server, Java, what have you--

00:26:32.660 --> 00:26:35.330
and you're using mod_proxy,
this still applies, right,

00:26:35.330 --> 00:26:37.610
because it's effectively
another handler?

00:26:37.610 --> 00:26:39.260
JOSHUA MARANTZ: That's
correct.

00:26:39.260 --> 00:26:42.310
It's easy to set up
mod_pagespeed as a reverse

00:26:42.310 --> 00:26:45.720
proxy or actually as a forward
proxy as well.

00:26:45.720 --> 00:26:52.500
And that way, it can optimize
content that's not necessarily

00:26:52.500 --> 00:26:54.510
even generated within
the Apache server.

00:26:54.510 --> 00:26:58.140
ILYA GRIGORIK: So if I have a
Java server running right now

00:26:58.140 --> 00:27:01.190
serving my assets, I could
actually put Apache in front,

00:27:01.190 --> 00:27:03.350
turn on mod_pagespeed, and maybe
inherit some of these

00:27:03.350 --> 00:27:04.350
observations for free.

00:27:04.350 --> 00:27:04.570
JOSHUA MARANTZ: Right.

00:27:04.570 --> 00:27:06.150
That would be a reverse
proxy application.

00:27:06.150 --> 00:27:06.590
ILYA GRIGORIK: That's right.

00:27:06.590 --> 00:27:08.270
Very cool.

00:27:08.270 --> 00:27:10.740
So we talked a little
about images.

00:27:10.740 --> 00:27:14.210
And images are a big deal
on the internet today.

00:27:14.210 --> 00:27:17.540
Just prior to this, we were kind
of talking, and we said

00:27:17.540 --> 00:27:21.530
that over 50% of all the
bandwidth on the internet is

00:27:21.530 --> 00:27:23.650
video, which is moving
pictures.

00:27:23.650 --> 00:27:26.960
But then the second-biggest
component is still images.

00:27:26.960 --> 00:27:29.800
So you guys put a lot of work
into optimizing images, in

00:27:29.800 --> 00:27:30.290
particular.

00:27:30.290 --> 00:27:33.010
And you already covered some
examples, but this is kind of

00:27:33.010 --> 00:27:35.000
an in-depth look at
what happens.

00:27:35.000 --> 00:27:35.230
JOSHUA MARANTZ: Yeah.

00:27:35.230 --> 00:27:39.910
This is kind of the life of an
image as it flies through

00:27:39.910 --> 00:27:42.060
mod_pagespeed.

00:27:42.060 --> 00:27:42.620
You're right.

00:27:42.620 --> 00:27:47.150
A lot of the benefit of
mod_pagespeed, the real wins

00:27:47.150 --> 00:27:51.150
in terms of bandwidth usage and
latency that mod_pagespeed

00:27:51.150 --> 00:27:55.420
gets, at least in the core
filter set, on first view are

00:27:55.420 --> 00:27:56.640
from making images smaller.

00:27:56.640 --> 00:27:57.950
And so we put a lot of
effort into that.

00:27:57.950 --> 00:28:01.260
And this is how it works
at a high level.

00:28:01.260 --> 00:28:04.870
So we install a filter called
the image rewriting filter,

00:28:04.870 --> 00:28:10.930
which scans for elements with
image tags, and it looks for

00:28:10.930 --> 00:28:13.460
the source attribute.

00:28:13.460 --> 00:28:16.100
And the way that it works, in
order to not slow down HTML

00:28:16.100 --> 00:28:24.720
even on the first view, is it
looks in a metadata cache to

00:28:24.720 --> 00:28:27.780
see if we've seen this resource
at this width and

00:28:27.780 --> 00:28:29.210
height before.

00:28:29.210 --> 00:28:33.830
So because we're optimizing
images for the element that

00:28:33.830 --> 00:28:37.550
they're going to be drawn into,
those all go into the

00:28:37.550 --> 00:28:39.000
key of the metadata cache,
if you will.

00:28:39.000 --> 00:28:42.990
And so when that's a hit, if
we have a warm server, it

00:28:42.990 --> 00:28:44.750
doesn't matter whether the
browser cache is warm or cold,

00:28:44.750 --> 00:28:48.010
but if the server cache is warm,
then all we have to do

00:28:48.010 --> 00:28:52.260
to deliver that optimized image
is swap out that source

00:28:52.260 --> 00:28:55.370
attribute with the one that we
found in our metadata cache.

00:28:55.370 --> 00:28:56.850
ILYA GRIGORIK: The optimized
version of the image.

00:28:56.850 --> 00:28:57.670
JOSHUA MARANTZ: Exactly.

00:28:57.670 --> 00:29:03.050
And so if it's a miss, though,
then we pretty much have to

00:29:03.050 --> 00:29:04.920
give up on this round, because
we're not going to fetch a

00:29:04.920 --> 00:29:07.610
large image and optimize it
on the fly it without

00:29:07.610 --> 00:29:09.560
delaying the HTML.

00:29:09.560 --> 00:29:13.880
So we spin up a machine that
runs in the background--

00:29:13.880 --> 00:29:16.050
not a physical machine, but a
finite-state machine that runs

00:29:16.050 --> 00:29:18.470
in the software--

00:29:18.470 --> 00:29:24.900
and it goes off and
it does the fetch

00:29:24.900 --> 00:29:25.890
of the image resource.

00:29:25.890 --> 00:29:27.920
It runs the image optimization
algorithms.

00:29:27.920 --> 00:29:29.580
And we discussed what
those were before.

00:29:29.580 --> 00:29:30.980
So we can do transcoding.

00:29:30.980 --> 00:29:31.830
We'll do resizing.

00:29:31.830 --> 00:29:33.500
And we'll do recompression.

00:29:33.500 --> 00:29:33.830
ILYA GRIGORIK: Right.

00:29:33.830 --> 00:29:36.340
And I'm guessing you guys also
do stuff like removing extra

00:29:36.340 --> 00:29:38.100
metadata, which is
pretty popular in

00:29:38.100 --> 00:29:39.690
like PNG images, right?

00:29:39.690 --> 00:29:39.885
JOSHUA MARANTZ: Sure.

00:29:39.885 --> 00:29:40.810
That's actually--

00:29:40.810 --> 00:29:44.140
in the core set, we'll remove
the metadata and resize, and

00:29:44.140 --> 00:29:47.340
then it's an option
to recompress.

00:29:47.340 --> 00:29:48.876
ILYA GRIGORIK: Actually, I'll
highlight the resize, because

00:29:48.876 --> 00:29:50.070
I think this is very
important.

00:29:50.070 --> 00:29:53.260
You mentioned it, but I think
it's still worth talking about

00:29:53.260 --> 00:29:54.050
for a little bit.

00:29:54.050 --> 00:29:55.500
So if I have an image--

00:29:55.500 --> 00:29:57.980
say if I have an image tag that
says the width of this

00:29:57.980 --> 00:30:00.330
image is 100 pixels and
the height is 100

00:30:00.330 --> 00:30:02.150
pixels, so it's square--

00:30:02.150 --> 00:30:04.560
but I can actually push a
larger image into it.

00:30:04.560 --> 00:30:06.960
It can be 1,000 by 1,000, which
is actually not uncommon

00:30:06.960 --> 00:30:07.740
on the internet.

00:30:07.740 --> 00:30:09.060
Somebody takes a photo.

00:30:09.060 --> 00:30:11.610
They resize it in
whatever editor.

00:30:11.610 --> 00:30:12.290
They upload it.

00:30:12.290 --> 00:30:14.990
And you're actually getting the
full-res image, which then

00:30:14.990 --> 00:30:16.920
gets rescaled in the browser.

00:30:16.920 --> 00:30:22.320
So just by providing the width
and height in the markup,

00:30:22.320 --> 00:30:24.400
mod_pagespeed will be smart
enough to look at that and

00:30:24.400 --> 00:30:27.290
say, yes, but the origin image
is much bigger, so let me

00:30:27.290 --> 00:30:30.160
rescale that and serve
the proper version.

00:30:30.160 --> 00:30:30.590
JOSHUA MARANTZ: Yeah.

00:30:30.590 --> 00:30:33.690
I would go further to say not
only is it not uncommon, it's

00:30:33.690 --> 00:30:36.620
quite common to take images
from your camera

00:30:36.620 --> 00:30:37.210
and put them online.

00:30:37.210 --> 00:30:39.690
ILYA GRIGORIK: So this alone
saves me a lot of time,

00:30:39.690 --> 00:30:41.780
because if I'm thinking
about--

00:30:41.780 --> 00:30:43.950
if I have a lot of images,
you mentioned kind of the

00:30:43.950 --> 00:30:45.890
newspaper use case
earlier, right?

00:30:45.890 --> 00:30:47.330
Lots of images there.

00:30:47.330 --> 00:30:49.970
I can just define the width and
height and push kind of

00:30:49.970 --> 00:30:52.240
the resizing logic
to mod_pagespeed.

00:30:52.240 --> 00:30:53.010
JOSHUA MARANTZ: Exactly.

00:30:53.010 --> 00:30:54.830
ILYA GRIGORIK: That's
very cool.

00:30:54.830 --> 00:30:59.160
JOSHUA MARANTZ: And so we do
this kind of gauntlet of image

00:30:59.160 --> 00:30:59.870
optimizations.

00:30:59.870 --> 00:31:06.340
And when it comes out the other
side, we have a new URL

00:31:06.340 --> 00:31:10.857
with kind of the instructions
on how that got created and

00:31:10.857 --> 00:31:11.690
coded into it.

00:31:11.690 --> 00:31:15.580
So this image in this
example-- this is on

00:31:15.580 --> 00:31:18.180
modpagespeed.com, which has
all of our examples.

00:31:18.180 --> 00:31:22.970
On modpagespeed.com, you'll find
this Puzzle.jpg is the

00:31:22.970 --> 00:31:23.970
origin image.

00:31:23.970 --> 00:31:26.200
That's shown in green.

00:31:26.200 --> 00:31:29.075
The width in which it was
displayed in our sample page

00:31:29.075 --> 00:31:30.990
is 256 by 192.

00:31:30.990 --> 00:31:31.363
ILYA GRIGORIK: Right.

00:31:31.363 --> 00:31:33.550
So this is from the
HTML markup.

00:31:33.550 --> 00:31:34.940
JOSHUA MARANTZ: Exactly.

00:31:34.940 --> 00:31:37.640
It was a JPG file originally,
but we were

00:31:37.640 --> 00:31:39.360
displaying it in Chrome.

00:31:39.360 --> 00:31:44.120
And we took it and now we're
going to transcode it to WebP

00:31:44.120 --> 00:31:46.640
so that it's delivered
more efficiently.

00:31:46.640 --> 00:31:51.620
We also put into the URL the MD5
sum of this image file so

00:31:51.620 --> 00:31:53.920
we can serve it for
a long time.

00:31:53.920 --> 00:31:58.110
And even if I change Puzzle.jpg,
then it won't be a

00:31:58.110 --> 00:31:59.020
problem with stale caches.

00:31:59.020 --> 00:31:59.280
ILYA GRIGORIK: Right.

00:31:59.280 --> 00:32:00.380
It's kind of a similar
pattern to what we

00:32:00.380 --> 00:32:01.700
saw with CSS earlier.

00:32:01.700 --> 00:32:02.340
JOSHUA MARANTZ: Exactly.

00:32:02.340 --> 00:32:02.760
ILYA GRIGORIK: OK.

00:32:02.760 --> 00:32:06.170
And I guess the WebP one is
really interesting, because

00:32:06.170 --> 00:32:08.620
this would get served-- you
mentioned because this was in

00:32:08.620 --> 00:32:10.390
Chrome, you'd get WebP.

00:32:10.390 --> 00:32:13.360
But If I visited the same
website in, let's say, Firefox

00:32:13.360 --> 00:32:16.170
browser, which currently does
not, unfortunately, support

00:32:16.170 --> 00:32:18.220
WebP, I would still get a JPG.

00:32:18.220 --> 00:32:18.680
JOSHUA MARANTZ: Exactly.

00:32:18.680 --> 00:32:24.280
So as a site owner, you can
make a decision, by using

00:32:24.280 --> 00:32:27.130
mod_pagespeed, that you're going
to serve images in a

00:32:27.130 --> 00:32:30.560
modern web format that is not
supported by all browsers, but

00:32:30.560 --> 00:32:33.136
your site will still work
well on all browsers.

00:32:33.136 --> 00:32:34.090
ILYA GRIGORIK: Very cool.

00:32:34.090 --> 00:32:36.430
So that's not even something
that I could do with a build

00:32:36.430 --> 00:32:37.750
step, right?

00:32:37.750 --> 00:32:39.040
JOSHUA MARANTZ: Correct.

00:32:39.040 --> 00:32:39.476
ILYA GRIGORIK: Yes.

00:32:39.476 --> 00:32:40.350
Very nice.

00:32:40.350 --> 00:32:42.410
JOSHUA MARANTZ: So I wanted to
dive into a little bit of what

00:32:42.410 --> 00:32:44.990
the PageSpeed Optimization
Library is.

00:32:44.990 --> 00:32:46.110
ILYA GRIGORIK: So this is
the part that powers

00:32:46.110 --> 00:32:47.580
modpagespeed.com, right?

00:32:47.580 --> 00:32:47.830
JOSHUA MARANTZ: Right.

00:32:47.830 --> 00:32:51.660
So this is a server-independent
library

00:32:51.660 --> 00:32:54.390
that does all of these
optimizations.

00:32:54.390 --> 00:32:59.100
And the way that it gets hooked
up to-- and again, this

00:32:59.100 --> 00:33:01.470
is completely open-source
software.

00:33:01.470 --> 00:33:05.120
But the way that it gets hooked
into a server stack is

00:33:05.120 --> 00:33:09.020
that whoever is doing that
supplies some mechanism to do

00:33:09.020 --> 00:33:17.920
HTTP fetching and some mechanism
to do caching.

00:33:17.920 --> 00:33:21.340
And in different environments,
there are different

00:33:21.340 --> 00:33:22.300
technologies for accomplishing
these things.

00:33:22.300 --> 00:33:23.755
ILYA GRIGORIK: These things
are implemented in Apache.

00:33:23.755 --> 00:33:26.350
So Apache, I'm guessing, already
has an HTTP fetcher,

00:33:26.350 --> 00:33:28.970
which you reuse, but the cache
is likely something that you

00:33:28.970 --> 00:33:30.570
guys have implemented
yourself.

00:33:30.570 --> 00:33:31.400
JOSHUA MARANTZ: Sure.

00:33:31.400 --> 00:33:37.470
Actually, the cache that we use
for mod_pagespeed is also

00:33:37.470 --> 00:33:42.290
open sourced and would be
the default setting.

00:33:42.290 --> 00:33:46.400
But typically, in a serving
environment that has some

00:33:46.400 --> 00:33:48.300
maturity to it, there will be
some other caching solution

00:33:48.300 --> 00:33:49.920
you'll want to use instead
of the one that

00:33:49.920 --> 00:33:51.075
we have open sourced.

00:33:51.075 --> 00:33:52.680
ILYA GRIGORIK: So in fact,
maybe could I even use

00:33:52.680 --> 00:33:55.410
something-- like if I'm building
something with this

00:33:55.410 --> 00:33:57.180
library, I could use
memcached, right?

00:33:57.180 --> 00:33:59.460
JOSHUA MARANTZ: Yes.

00:33:59.460 --> 00:33:59.750
Yes.

00:33:59.750 --> 00:34:02.540
You're kind of forcing
me to tip my hand.

00:34:02.540 --> 00:34:05.710
So a feature that we will be
releasing soon but is not yet

00:34:05.710 --> 00:34:09.340
in 1.0 is support of memcached,
which is an

00:34:09.340 --> 00:34:13.690
important feature for
scaling up websites.

00:34:13.690 --> 00:34:14.449
ILYA GRIGORIK: Right.

00:34:14.449 --> 00:34:16.539
Nice.

00:34:16.539 --> 00:34:16.960
OK.

00:34:16.960 --> 00:34:22.340
So if I have a custom server, I
could actually take this and

00:34:22.340 --> 00:34:24.850
build my own mod_pagespeed
variant.

00:34:24.850 --> 00:34:27.284
JOSHUA MARANTZ: Exactly.

00:34:27.284 --> 00:34:28.150
Yeah.

00:34:28.150 --> 00:34:31.600
There's API documentation
on the web in

00:34:31.600 --> 00:34:33.080
the developers' site.

00:34:33.080 --> 00:34:36.960
And we would be happy to support
actively anybody

00:34:36.960 --> 00:34:38.305
interested in porting this
to a new platform.

00:34:38.305 --> 00:34:38.600
ILYA GRIGORIK: Right.

00:34:38.600 --> 00:34:41.270
And we'll mention this later,
but you guys do have an active

00:34:41.270 --> 00:34:44.860
Google Group where people can
come in and discuss, propose

00:34:44.860 --> 00:34:47.860
new filters, file bugs, all
that kind of stuff.

00:34:47.860 --> 00:34:48.270
JOSHUA MARANTZ: Yeah.

00:34:48.270 --> 00:34:51.219
There's actually a variety
of support forums.

00:34:51.219 --> 00:34:52.760
There's the Google Groups.

00:34:52.760 --> 00:34:56.929
There's the issues list.

00:34:56.929 --> 00:34:58.450
People seem to be
fairly active on

00:34:58.450 --> 00:34:59.440
Stack Overflow as well.

00:34:59.440 --> 00:34:59.700
We try to be responsive.

00:34:59.700 --> 00:34:59.994
ILYA GRIGORIK: Yeah.

00:34:59.994 --> 00:35:01.740
I see a lot of questions
there.

00:35:01.740 --> 00:35:03.870
JOSHUA MARANTZ: We try to
be responsive to that.

00:35:03.870 --> 00:35:07.410
But we track everything in our
issues list, which is all

00:35:07.410 --> 00:35:09.240
accessed off of code.google.com.

00:35:09.240 --> 00:35:09.920
ILYA GRIGORIK: Right.

00:35:09.920 --> 00:35:10.742
OK.

00:35:10.742 --> 00:35:12.130
Perfect.

00:35:12.130 --> 00:35:15.450
So I wanted to highlight a few
kind of tips, configuration

00:35:15.450 --> 00:35:17.130
tricks, and a few
other things.

00:35:17.130 --> 00:35:18.210
We looked at the guts.

00:35:18.210 --> 00:35:20.610
We talked about kind of
high-level things.

00:35:20.610 --> 00:35:23.540
But one question that I get
quite commonly with

00:35:23.540 --> 00:35:25.000
mod_pagespeed is like,
OK, great.

00:35:25.000 --> 00:35:26.940
So I grabbed this,
installed it.

00:35:26.940 --> 00:35:27.990
I ran these three commands.

00:35:27.990 --> 00:35:30.070
Now it's on.

00:35:30.070 --> 00:35:33.650
What if it doesn't work, or
I'm scared, or how can I

00:35:33.650 --> 00:35:35.540
experiment with mod_pagespeed?

00:35:35.540 --> 00:35:37.190
And there's a couple
of ways to do that.

00:35:37.190 --> 00:35:40.860
First of all, because we have
this additional module

00:35:40.860 --> 00:35:43.640
installed, you can actually
configure through a couple of

00:35:43.640 --> 00:35:44.820
different ways.

00:35:44.820 --> 00:35:46.700
So you can use query parameters
that will be

00:35:46.700 --> 00:35:48.090
intercepted by mod_pagespeed.

00:35:48.090 --> 00:35:51.380
So for example in this rewrite
CSS example, we have

00:35:51.380 --> 00:35:54.840
ModPagespeed=on, which basically
says turn on

00:35:54.840 --> 00:35:57.480
mod_pagespeed for this
request only.

00:35:57.480 --> 00:35:59.440
So you can have it disabled,
but I'm going

00:35:59.440 --> 00:36:00.380
to enable it here.

00:36:00.380 --> 00:36:03.310
And by the way, enable
this specific filter.

00:36:03.310 --> 00:36:07.650
So if I want to experiment with
some non-core filter, I

00:36:07.650 --> 00:36:11.150
can just pass this in, see what
happens, kind of test the

00:36:11.150 --> 00:36:13.780
waters, and then decide if I
want to make that the default

00:36:13.780 --> 00:36:15.033
for my configuration or not.

00:36:15.033 --> 00:36:15.386
JOSHUA MARANTZ: Yeah.

00:36:15.386 --> 00:36:17.890
It's kind of a way to
interactively rapidly iterate

00:36:17.890 --> 00:36:19.760
on your site without having to
restart Apache or anything.

00:36:19.760 --> 00:36:21.460
ILYA GRIGORIK: I think it's one
of my favorite features.

00:36:21.460 --> 00:36:24.770
I love just being able to
quickly get feedback on, how

00:36:24.770 --> 00:36:26.960
is this going to look?

00:36:26.960 --> 00:36:30.120
One alternative to that is to
actually send HTTP headers.

00:36:30.120 --> 00:36:32.990
So if you have some sort of a
client or server solution that

00:36:32.990 --> 00:36:34.870
you want to test with,
that's another way.

00:36:34.870 --> 00:36:37.590
And then the last one is-- we
actually mentioned this-- the

00:36:37.590 --> 00:36:40.750
mod_proxy forward proxy
example, where you can

00:36:40.750 --> 00:36:45.030
actually say, please fetch me
this other site and run it

00:36:45.030 --> 00:36:46.710
through PageSpeed and
show me what will

00:36:46.710 --> 00:36:48.540
happen when we do that.

00:36:48.540 --> 00:36:49.020
ILYA GRIGORIK: Yeah.

00:36:49.020 --> 00:36:52.610
This is a very good way if
you're considering the option

00:36:52.610 --> 00:36:56.300
of using mod_pagespeed on your
site, but you're nervous about

00:36:56.300 --> 00:36:59.255
like installing it and rolling
out to your users without kind

00:36:59.255 --> 00:36:59.790
of looking at it first--

00:36:59.790 --> 00:37:00.054
ILYA GRIGORIK: Yeah.

00:37:00.054 --> 00:37:02.600
Let's install it on 1,000
servers and see what happens.

00:37:02.600 --> 00:37:04.620
JOSHUA MARANTZ: --you can
install it on one server local

00:37:04.620 --> 00:37:09.360
to your system, which is running
your origin content.

00:37:09.360 --> 00:37:10.390
It's running as a proxy.

00:37:10.390 --> 00:37:12.900
And then you can look at your
site through mod_pagespeed by

00:37:12.900 --> 00:37:14.370
setting a browser proxy.

00:37:14.370 --> 00:37:14.870
ILYA GRIGORIK: Right.

00:37:14.870 --> 00:37:16.200
That's a very handy tool.

00:37:16.200 --> 00:37:20.340
And in fact, all three of these
are documented really

00:37:20.340 --> 00:37:22.440
well on the mod_pagespeed
site.

00:37:22.440 --> 00:37:24.190
So I have a link down here.

00:37:24.190 --> 00:37:26.690
But if you guys search on your
favorite search engine for

00:37:26.690 --> 00:37:30.500
mod_pagespeed and experiment,
you'll find instructions for

00:37:30.500 --> 00:37:34.560
how to set up the mod_proxy,
which is really handy.

00:37:34.560 --> 00:37:36.800
I wanted to highlight this,
which is we mentioned already

00:37:36.800 --> 00:37:38.610
that there is a lot of
different filters.

00:37:38.610 --> 00:37:40.890
And we do have good
documentation.

00:37:40.890 --> 00:37:42.200
And there's a couple different
resources.

00:37:42.200 --> 00:37:45.860
So one that you mentioned, which
is modpagespeed.com,

00:37:45.860 --> 00:37:47.860
where we actually list
all the filters.

00:37:47.860 --> 00:37:50.080
And we actually also
provide the demos.

00:37:50.080 --> 00:37:53.150
So it's usually kind of a simple
file which illustrates

00:37:53.150 --> 00:37:54.290
what the filter does.

00:37:54.290 --> 00:37:56.480
So if you guys want to take a
look at that, that's a very

00:37:56.480 --> 00:37:57.170
good place.

00:37:57.170 --> 00:38:00.980
And another one is, once again,
the configuration, or

00:38:00.980 --> 00:38:05.750
config filters, page on our
developers.google.com site,

00:38:05.750 --> 00:38:08.340
where we actually explain
what each one does.

00:38:08.340 --> 00:38:10.090
And we also highlight which
ones are in the

00:38:10.090 --> 00:38:12.840
core set and not.

00:38:12.840 --> 00:38:16.240
And another thing I'll mention
is that by default, when you

00:38:16.240 --> 00:38:18.130
enable mod_pagespeed,
as Josh said, you

00:38:18.130 --> 00:38:19.710
have your core filters.

00:38:19.710 --> 00:38:21.440
But you can actually
say, don't worry

00:38:21.440 --> 00:38:22.760
about the core filters.

00:38:22.760 --> 00:38:25.240
I'm going to hand-tune all
the filters myself.

00:38:25.240 --> 00:38:30.360
So you can customize it
completely for your site.

00:38:30.360 --> 00:38:30.950
JOSHUA MARANTZ: Yeah.

00:38:30.950 --> 00:38:36.036
By turning on the core filters,
what you're doing is

00:38:36.036 --> 00:38:38.690
you're kind of letting us make
the decision as we move the

00:38:38.690 --> 00:38:41.890
software and advance it of what
we think is safe for most

00:38:41.890 --> 00:38:43.770
sites, and you'll take that.

00:38:43.770 --> 00:38:47.560
If you want to have total
control, and when you upgrade

00:38:47.560 --> 00:38:49.570
you'll decide which filters you
want to enable for the new

00:38:49.570 --> 00:38:52.470
release, then you can put it in
pass-through mode and then

00:38:52.470 --> 00:38:53.610
add the filters that you want.

00:38:53.610 --> 00:38:53.930
ILYA GRIGORIK: Right.

00:38:53.930 --> 00:38:54.670
So that's a good point.

00:38:54.670 --> 00:38:57.930
So I should probably, unless
I have a specific reason to

00:38:57.930 --> 00:39:00.290
avoid core filters, I could
leave that on because maybe in

00:39:00.290 --> 00:39:02.990
the subsequent release you guys
have added another filter

00:39:02.990 --> 00:39:05.620
or improved another filter such
that now it's considered

00:39:05.620 --> 00:39:08.805
safe, and that would just be
automatically included during

00:39:08.805 --> 00:39:09.290
an upgrade.

00:39:09.290 --> 00:39:09.740
JOSHUA MARANTZ: Yeah.

00:39:09.740 --> 00:39:12.070
I'll give you an example.

00:39:12.070 --> 00:39:13.880
I believe in the current
release, we have a filter

00:39:13.880 --> 00:39:16.430
called Flatten CSS Imports.

00:39:16.430 --> 00:39:20.130
One of the biggest anti-patterns
for performance

00:39:20.130 --> 00:39:22.390
in CSS files is to
use at-import.

00:39:22.390 --> 00:39:24.740
But it's incredibly convenient
to do it.

00:39:24.740 --> 00:39:26.360
As a designer, that's
what you want.

00:39:26.360 --> 00:39:28.560
You want to be able to
structure your code.

00:39:28.560 --> 00:39:30.440
You want modular code.

00:39:30.440 --> 00:39:31.320
So that's a good thing.

00:39:31.320 --> 00:39:33.310
It's bad how it's delivered.

00:39:33.310 --> 00:39:38.220
Mod_pagespeed with the Flatten
CSS Imports filter will

00:39:38.220 --> 00:39:40.970
flatten those all out so you get
the best performance when

00:39:40.970 --> 00:39:44.630
you deliver it, but you don't
have to maintain that.

00:39:44.630 --> 00:39:47.020
That was something that
we built into the

00:39:47.020 --> 00:39:49.460
product some time ago.

00:39:49.460 --> 00:39:51.810
But we wanted to do a lot of
testing on it to make sure it

00:39:51.810 --> 00:39:52.990
was rock solid.

00:39:52.990 --> 00:39:56.900
That's being promoted into the
core filters in the next

00:39:56.900 --> 00:39:59.150
release after 1.0.

00:39:59.150 --> 00:40:00.610
And so if you have
core filters then

00:40:00.610 --> 00:40:01.510
you just get that.

00:40:01.510 --> 00:40:02.320
ILYA GRIGORIK: Interesting OK.

00:40:02.320 --> 00:40:05.030
That's good to know.

00:40:05.030 --> 00:40:09.740
So we also touched on
some configuration.

00:40:09.740 --> 00:40:14.700
But one of the really nice
things about Apache is that

00:40:14.700 --> 00:40:16.860
you can configure it in a
million different ways.

00:40:16.860 --> 00:40:19.160
So there's your Apache config,
where you can specify your

00:40:19.160 --> 00:40:20.180
virtual hosts.

00:40:20.180 --> 00:40:23.430
So mod_pagespeed can be
configured at a v-host level.

00:40:23.430 --> 00:40:27.340
So an example, down here we're
saying mod_pagespeed is on for

00:40:27.340 --> 00:40:31.350
this example site, and
pass-through is actually the

00:40:31.350 --> 00:40:35.190
command that tells us, don't
include the core filters.

00:40:35.190 --> 00:40:37.790
I'll hand-tune the filters
that I want.

00:40:37.790 --> 00:40:41.070
So we're just enabling these, I
guess, five filters for this

00:40:41.070 --> 00:40:42.260
example site.

00:40:42.260 --> 00:40:45.300
But I can also be much
more granular.

00:40:45.300 --> 00:40:47.470
I can use the htaccess file.

00:40:47.470 --> 00:40:50.420
So for example, I
have my v-host.

00:40:50.420 --> 00:40:51.890
I have my example file.

00:40:51.890 --> 00:40:56.570
But in my slash, I don't know,
assets I want to have a

00:40:56.570 --> 00:40:58.920
different set of filters, I
could actually drop in an

00:40:58.920 --> 00:41:02.390
htaccess file with another
configuration.

00:41:02.390 --> 00:41:02.830
JOSHUA MARANTZ: Right.

00:41:02.830 --> 00:41:05.010
And there's yet another twist,
which is you can use a

00:41:05.010 --> 00:41:07.450
directory scope in the
configuration file.

00:41:07.450 --> 00:41:07.880
ILYA GRIGORIK: Right.

00:41:07.880 --> 00:41:10.150
So I could literally have
different filters running on

00:41:10.150 --> 00:41:11.560
different subsections
of my website.

00:41:11.560 --> 00:41:14.240
JOSHUA MARANTZ: Exactly.

00:41:14.240 --> 00:41:18.880
Actually, the implementation
of just how the options get

00:41:18.880 --> 00:41:21.820
configured is itself a pretty
big topic within the

00:41:21.820 --> 00:41:24.250
mod_pagespeed codebase, because
you can configure my

00:41:24.250 --> 00:41:26.300
request headers, by query
parameters, by virtual host,

00:41:26.300 --> 00:41:28.960
by director scope, by virtual
host, and at the root.

00:41:28.960 --> 00:41:29.210
ILYA GRIGORIK: Yeah.

00:41:29.210 --> 00:41:31.880
But I think it highlights
the fact that our users

00:41:31.880 --> 00:41:32.600
have asked for that.

00:41:32.600 --> 00:41:35.700
So they are using all of
these mechanisms to

00:41:35.700 --> 00:41:37.000
customize their sites.

00:41:37.000 --> 00:41:38.530
So we needed to have it.

00:41:38.530 --> 00:41:40.920
And it allows you a lot
of flexibility,

00:41:40.920 --> 00:41:42.170
which is very nice.

00:41:45.010 --> 00:41:46.120
And experiments.

00:41:46.120 --> 00:41:47.340
So I think this is something
that you

00:41:47.340 --> 00:41:49.960
guys added just recently.

00:41:49.960 --> 00:41:50.540
JOSHUA MARANTZ: That's right.

00:41:50.540 --> 00:41:53.270
We've been traditionally using
WebPagetest, which is an

00:41:53.270 --> 00:41:56.840
amazing tool for doing
detailed analysis.

00:41:56.840 --> 00:41:58.510
That's how we produced the
video and the waterfall

00:41:58.510 --> 00:42:01.760
diagrams that we saw earlier.

00:42:01.760 --> 00:42:09.090
But WebPagetest will allow you
to run your tests from a set

00:42:09.090 --> 00:42:11.490
of servers that are running in
some corner of the world.

00:42:11.490 --> 00:42:14.830
There's ones in Singapore,
in Dublin, in

00:42:14.830 --> 00:42:16.910
Virginia, and so on.

00:42:16.910 --> 00:42:21.630
But what you really want to do
at some point after you deploy

00:42:21.630 --> 00:42:25.360
is see what experience your
actual users are having.

00:42:25.360 --> 00:42:29.310
And so what this does is it
injects some performance

00:42:29.310 --> 00:42:34.490
measurement, using Google
Analytics, right into the web

00:42:34.490 --> 00:42:39.040
pages and allows you to bucket
users into experiment groups.

00:42:39.040 --> 00:42:42.980
And you can say, for example,
first of all you would

00:42:42.980 --> 00:42:45.830
establish what Google Analytics
ID you want to

00:42:45.830 --> 00:42:47.570
report the data to.

00:42:47.570 --> 00:42:49.690
And then you can say, well, I'm
going to send a third of

00:42:49.690 --> 00:42:52.860
my users into kind of a control
bucket which doesn't

00:42:52.860 --> 00:42:54.620
have any optimizations in it.

00:42:54.620 --> 00:42:57.470
mod_pagespeed is running, but it
isn't doing anything except

00:42:57.470 --> 00:43:00.530
injecting the Analytics
experiment.

00:43:00.530 --> 00:43:03.610
The second one we can say,
let's just have the image

00:43:03.610 --> 00:43:05.260
compression and nothing else.

00:43:05.260 --> 00:43:07.400
And the third one, let's have
the default settings.

00:43:07.400 --> 00:43:12.190
Or there's a whole set of
options that you can do to

00:43:12.190 --> 00:43:13.610
customize your experiments.

00:43:13.610 --> 00:43:17.000
Then you can let this run
for a day, a week.

00:43:17.000 --> 00:43:20.050
Depending on the experiments
you might leave a small

00:43:20.050 --> 00:43:24.880
control group just to see how
it's doing, and go back to log

00:43:24.880 --> 00:43:30.960
into Google Analytics and see
how users for each bucket are

00:43:30.960 --> 00:43:32.940
faring in terms of the latency
that they're seeing

00:43:32.940 --> 00:43:33.630
on their web pages.

00:43:33.630 --> 00:43:35.460
ILYA GRIGORIK: So this
is really cool.

00:43:35.460 --> 00:43:37.580
So what you've described there
is the difference being

00:43:37.580 --> 00:43:41.270
synthetic testing and real
user measurement, which I

00:43:41.270 --> 00:43:44.240
think is what you're referring
to when you're saying Google

00:43:44.240 --> 00:43:44.900
Analytics, right?

00:43:44.900 --> 00:43:46.920
JOSHUA MARANTZ: Yes.

00:43:46.920 --> 00:43:48.820
ILYA GRIGORIK: And we actually
had an episode with Justin

00:43:48.820 --> 00:43:51.360
Cutroni from Google Analytics
where we talked about

00:43:51.360 --> 00:43:53.720
navigation timing and why
it's so important.

00:43:53.720 --> 00:43:58.560
And the point that Justin always
loves to make is that

00:43:58.560 --> 00:44:00.780
it's great that the developers
want to optimize the site.

00:44:00.780 --> 00:44:02.180
They always want to
optimize the site.

00:44:02.180 --> 00:44:04.760
But how does it affect
my bottom line?

00:44:04.760 --> 00:44:07.940
Like the business metrics,
the dollars as he put it.

00:44:07.940 --> 00:44:09.790
So this will actually
tell you.

00:44:09.790 --> 00:44:11.560
So we have three buckets here.

00:44:11.560 --> 00:44:15.480
And if I have in my Google
Analytics some conversion

00:44:15.480 --> 00:44:18.400
metrics-- that could be a
purchase, that could be a

00:44:18.400 --> 00:44:21.770
registration, even time on
site or bounce rate--

00:44:21.770 --> 00:44:23.250
now I could measure against
that and say,

00:44:23.250 --> 00:44:24.180
well, you know what?

00:44:24.180 --> 00:44:27.030
Users that get a faster
experience

00:44:27.030 --> 00:44:28.010
are staying for longer.

00:44:28.010 --> 00:44:29.290
Maybe they're converting
for more.

00:44:29.290 --> 00:44:31.920
And that makes for a very
compelling case to the rest of

00:44:31.920 --> 00:44:33.960
the team to say, this is why
we should invest into more

00:44:33.960 --> 00:44:35.560
performance optimization.

00:44:35.560 --> 00:44:36.550
JOSHUA MARANTZ: Exactly.

00:44:36.550 --> 00:44:37.530
ILYA GRIGORIK: Awesome.

00:44:37.530 --> 00:44:39.440
I love the business use case.

00:44:39.440 --> 00:44:43.000
It's not just like speed
for speed's sake.

00:44:43.000 --> 00:44:45.280
Although speed for speed's sake
is also good, because it

00:44:45.280 --> 00:44:48.560
makes the web faster.

00:44:48.560 --> 00:44:50.630
So this example, this is
actually a very common

00:44:50.630 --> 00:44:55.310
question that we see, which is
many people have already

00:44:55.310 --> 00:44:57.570
applied some optimizations
to their site.

00:44:57.570 --> 00:44:59.820
So a good example of that
is something like domain

00:44:59.820 --> 00:45:04.800
sharding, where the problem is
that modern browsers allow up

00:45:04.800 --> 00:45:06.630
to six connections per host.

00:45:06.630 --> 00:45:09.330
So if you're hosting a lot of
images on your domain, you may

00:45:09.330 --> 00:45:11.550
get blocked as you're trying to
download a lot of images.

00:45:11.550 --> 00:45:14.035
So the general best practice for
that is to say, well, host

00:45:14.035 --> 00:45:15.760
it on different subdomains.

00:45:15.760 --> 00:45:19.300
And then that will allow the
browser to open multiple

00:45:19.300 --> 00:45:20.380
connections--

00:45:20.380 --> 00:45:22.580
more than six, I should say.

00:45:22.580 --> 00:45:24.650
But that creates a little
bit of complexity for

00:45:24.650 --> 00:45:25.670
mod_pagespeed.

00:45:25.670 --> 00:45:27.260
This is where you need to
kind of hand-tune your

00:45:27.260 --> 00:45:28.700
configuration.

00:45:28.700 --> 00:45:32.720
So can you explain what's
happening here?

00:45:32.720 --> 00:45:33.590
JOSHUA MARANTZ: Sure.

00:45:33.590 --> 00:45:42.331
So the challenge is
that you want to--

00:45:42.331 --> 00:45:44.090
well, there's a couple
challenges.

00:45:44.090 --> 00:45:50.330
So if somebody has hand-sharded
their domains or,

00:45:50.330 --> 00:45:53.860
in many cases, just done a
simple best practice of moving

00:45:53.860 --> 00:45:58.960
their resources to cookie-less
domains, which is all good,

00:45:58.960 --> 00:46:01.150
the first thing that you
have to do if you want

00:46:01.150 --> 00:46:04.190
mod_pagespeed to be effective
is you have to let us know

00:46:04.190 --> 00:46:05.890
what those domains are, because
mod_pagespeed doesn't

00:46:05.890 --> 00:46:08.430
know what the domain
mapping is.

00:46:08.430 --> 00:46:10.730
So we have pagespeed.com
settings to tell us.

00:46:10.730 --> 00:46:12.580
So the first thing you have
to tell us is what are the

00:46:12.580 --> 00:46:18.820
domains that are basically
equivalent on your site.

00:46:18.820 --> 00:46:25.185
And so if you have, like,
static.example.com, your HTML

00:46:25.185 --> 00:46:28.570
is coming on www.example.com,
you have to authorize, at

00:46:28.570 --> 00:46:30.595
least with ModPagespeedDomain,
static.example.com.

00:46:34.600 --> 00:46:36.260
And if you've done
hand-sharding, you may have to

00:46:36.260 --> 00:46:39.440
authorize more than one of those
and tell us that they

00:46:39.440 --> 00:46:42.440
are essentially equivalent by
mapping them to kind of a

00:46:42.440 --> 00:46:43.510
canonical name.

00:46:43.510 --> 00:46:43.760
ILYA GRIGORIK: Right.

00:46:43.760 --> 00:46:48.660
So if I'm running example.com,
and I'm serving images from

00:46:48.660 --> 00:46:51.060
example.com, then mod_pagespeed
would say, yes,

00:46:51.060 --> 00:46:52.480
I know that I'm hosting this.

00:46:52.480 --> 00:46:54.140
Hence, I can optimize
this asset.

00:46:54.140 --> 00:46:54.620
JOSHUA MARANTZ: Exactly.

00:46:54.620 --> 00:46:57.430
ILYA GRIGORIK: But if I'm
hosting on a cdn.example.com,

00:46:57.430 --> 00:47:00.830
that could be anywhere, or it
could be a third-party asset.

00:47:00.830 --> 00:47:03.540
So mod_pagespeed won't touch
that by default.

00:47:03.540 --> 00:47:03.830
JOSHUA MARANTZ: Right.

00:47:03.830 --> 00:47:07.640
If for example you're serving
an image on Flickr or

00:47:07.640 --> 00:47:12.230
something, Flickr is not yet
running mod_pagespeed.

00:47:12.230 --> 00:47:16.300
And so if you just rewrite the
URL the way we did with the

00:47:16.300 --> 00:47:16.995
.pagespeed [INAUDIBLE]

00:47:16.995 --> 00:47:20.550
and it's on Flickr, then it
just won't work, because

00:47:20.550 --> 00:47:23.900
Flickr won't be able to
decode that name.

00:47:23.900 --> 00:47:26.040
So we wouldn't necessarily
authorize that.

00:47:29.260 --> 00:47:33.740
But if you have images on your
site that you want to put onto

00:47:33.740 --> 00:47:37.650
a CDN that knows how to reach
back to your origin, then you

00:47:37.650 --> 00:47:43.760
can do a domain mapping to say,
I want to take the images

00:47:43.760 --> 00:47:47.370
that are on example.com and put
them on cdn.example.com.

00:47:47.370 --> 00:47:51.080
Now when mod_pagespeed rewrites
that URL, when it

00:47:51.080 --> 00:47:54.270
optimizes the image or the CSS
file, et cetera, it will

00:47:54.270 --> 00:47:56.950
rewrite the domain to
go onto the CDN.

00:47:56.950 --> 00:48:00.640
This is, I think, kind of a
development feature which

00:48:00.640 --> 00:48:03.160
allows you, for example,
to develop locally

00:48:03.160 --> 00:48:04.280
and turn that off.

00:48:04.280 --> 00:48:06.650
But then when you're ready to
actually push resources to the

00:48:06.650 --> 00:48:09.410
CDN, you can turn that on.

00:48:09.410 --> 00:48:12.300
This also allows you
to apply sharding.

00:48:12.300 --> 00:48:20.230
So by establishing the shards,
if you want to, for example,

00:48:20.230 --> 00:48:23.460
shard two ways, then you can use
the command that we gave

00:48:23.460 --> 00:48:26.350
here, ModPagespeedShardDomain
example.com to

00:48:26.350 --> 00:48:29.120
example1, and example2.

00:48:29.120 --> 00:48:30.040
ILYA GRIGORIK: That's
the bottom one here.

00:48:30.040 --> 00:48:32.330
JOSHUA MARANTZ: And then
mod_pagespeed will kind of

00:48:32.330 --> 00:48:35.950
randomly disperse the resources
to those two domains

00:48:35.950 --> 00:48:39.380
so that you can have more
parallel connections.

00:48:39.380 --> 00:48:41.280
ILYA GRIGORIK: So this is
definitely a more advanced use

00:48:41.280 --> 00:48:44.560
case where that's going
to reach deeper into

00:48:44.560 --> 00:48:47.120
mod_pagespeed and also think
about how does this work in

00:48:47.120 --> 00:48:48.920
the context of me using a CDN.

00:48:48.920 --> 00:48:51.050
But that in itself is actually
an important point.

00:48:51.050 --> 00:48:53.375
It is CDN-friendly.

00:48:53.375 --> 00:48:56.800
So you can make it work with
your CDN provider and help

00:48:56.800 --> 00:48:59.570
your CDN serve optimized
assets.

00:48:59.570 --> 00:49:01.350
JOSHUA MARANTZ: Exactly.

00:49:01.350 --> 00:49:03.350
And this is something that
I think it's useful to

00:49:03.350 --> 00:49:03.970
experiment with.

00:49:03.970 --> 00:49:06.190
One of the things that you
probably don't want to do is

00:49:06.190 --> 00:49:10.430
try to hand-shard your resources
in your HTML file,

00:49:10.430 --> 00:49:15.250
because the best practice
is to shard domains,

00:49:15.250 --> 00:49:18.220
but exactly to what?

00:49:18.220 --> 00:49:21.370
I've seen the right answer be
four, the right answer be two,

00:49:21.370 --> 00:49:23.710
the right answer can sometimes
just be one.

00:49:23.710 --> 00:49:27.230
And so all the effort you do to
hacking your HTML to edit

00:49:27.230 --> 00:49:32.370
the domains really is kind of
counter to the notion that you

00:49:32.370 --> 00:49:33.610
want to experiment with it.

00:49:33.610 --> 00:49:36.140
And you can experiment very
easily by just iterating over

00:49:36.140 --> 00:49:38.355
your pagespeed.conf file and
looking at WebPagetest.

00:49:38.355 --> 00:49:38.670
ILYA GRIGORIK: Yes.

00:49:38.670 --> 00:49:41.180
That certainly makes
it a lot easier.

00:49:41.180 --> 00:49:42.610
Yeah.

00:49:42.610 --> 00:49:45.600
So we talked about the
forward proxy.

00:49:45.600 --> 00:49:48.610
But I recently came across a
blog post, I think it was

00:49:48.610 --> 00:49:52.370
Frank Denis that wrote this
really awesome blog post that

00:49:52.370 --> 00:49:56.960
kind of blew me away, because
what he did was he used

00:49:56.960 --> 00:50:00.050
mod_pagespeed as a forwarding
proxy for his phone.

00:50:00.050 --> 00:50:03.630
And the basic observation was
that when you're on your

00:50:03.630 --> 00:50:08.310
mobile device, you probably
don't have a Wi-Fi connection

00:50:08.310 --> 00:50:09.000
most of the time.

00:50:09.000 --> 00:50:09.940
You're in 3G.

00:50:09.940 --> 00:50:12.260
If you're lucky, you're
in 4G, what have you.

00:50:12.260 --> 00:50:15.140
And you're downloading these
massive websites.

00:50:15.140 --> 00:50:18.840
So instead of using
mod_pagespeed to accelerate

00:50:18.840 --> 00:50:20.970
your site, why not use
mod_pagespeed to accelerate

00:50:20.970 --> 00:50:23.780
the rest of the web
as you fetch it?

00:50:23.780 --> 00:50:25.890
So in this diagram here,
I have my phone.

00:50:25.890 --> 00:50:28.760
We're sending a request through
this forward proxy,

00:50:28.760 --> 00:50:30.390
which is running
mod_pagespeed.

00:50:30.390 --> 00:50:33.810
Mod_pagespeed requests the
actual site that I requested.

00:50:33.810 --> 00:50:37.780
I get this fat response back
with all kinds of unoptimized

00:50:37.780 --> 00:50:39.430
images, et cetera.

00:50:39.430 --> 00:50:41.640
Mod_pagespeed crunches all
of that and sends me the

00:50:41.640 --> 00:50:43.600
optimized assets, which
I thought was

00:50:43.600 --> 00:50:44.580
really, really clever.

00:50:44.580 --> 00:50:46.890
So he did this with
his iPhone.

00:50:46.890 --> 00:50:50.770
And he observed that for the
sites that he tested it on, he

00:50:50.770 --> 00:50:53.810
got much faster renders
and much fewer bytes.

00:50:53.810 --> 00:50:57.180
And in fact, he shared
some examples.

00:50:57.180 --> 00:50:58.760
And we'll take a look
at those later.

00:50:58.760 --> 00:51:01.320
But these are the actual
filters that he used.

00:51:01.320 --> 00:51:02.880
So he shared those.

00:51:02.880 --> 00:51:05.275
And some examples that I wanted
to highlight was first,

00:51:05.275 --> 00:51:06.350
he enabled core filters.

00:51:06.350 --> 00:51:07.440
So that's kind of by default.

00:51:07.440 --> 00:51:08.620
But I think he just
wanted to have it

00:51:08.620 --> 00:51:10.310
in there to be explicit.

00:51:10.310 --> 00:51:13.570
He said, I'm going to rewrite
images, convert JPGs to WebP--

00:51:13.570 --> 00:51:18.350
so he knows that he's accessing
this on Chrome on

00:51:18.350 --> 00:51:20.700
iOS when he's using that--

00:51:20.700 --> 00:51:22.170
convert PNG to JPG.

00:51:22.170 --> 00:51:23.920
And in fact, this is an
important one that you

00:51:23.920 --> 00:51:27.050
mentioned earlier, when I'm on
a mobile device, I have a

00:51:27.050 --> 00:51:27.760
small screen.

00:51:27.760 --> 00:51:30.890
I probably don't want 100%
fidelity of all the pixels.

00:51:30.890 --> 00:51:34.370
I'm OK with the 75%
compression ratio.

00:51:34.370 --> 00:51:36.220
And that gives me a
lot of savings,

00:51:36.220 --> 00:51:38.190
byte savings for images.

00:51:38.190 --> 00:51:39.960
So this is kind of an
interesting example.

00:51:39.960 --> 00:51:43.010
And he also did a couple of
aggressive filters, which say

00:51:43.010 --> 00:51:47.220
defer all iframes until after
onload and other things, just

00:51:47.220 --> 00:51:50.600
to accelerate his browsing.

00:51:50.600 --> 00:51:51.310
JOSHUA MARANTZ: Yes.

00:51:51.310 --> 00:51:54.010
And pointing out, in particular,
defer JavaScript

00:51:54.010 --> 00:51:57.150
has a huge impact on the
speed of websites.

00:51:57.150 --> 00:52:00.510
It's something that you want
to look at the results

00:52:00.510 --> 00:52:03.220
of when you do it.

00:52:03.220 --> 00:52:06.160
It was aggressive to put it into
a forward proxy, but he

00:52:06.160 --> 00:52:08.270
was extremely happy
having done it.

00:52:08.270 --> 00:52:08.456
ILYA GRIGORIK: Right.

00:52:08.456 --> 00:52:08.520
Yeah.

00:52:08.520 --> 00:52:09.850
And these are some examples.

00:52:09.850 --> 00:52:12.620
So of course, this is not
representative of the entire

00:52:12.620 --> 00:52:15.040
web, but he kind of
highlighted a few.

00:52:15.040 --> 00:52:19.760
So for example, this over-blog
URL, it went from 400

00:52:19.760 --> 00:52:24.060
kilobytes to 271, which
is pretty significant.

00:52:24.060 --> 00:52:28.560
Going from 39 seconds of onloads
to 2 seconds is a big

00:52:28.560 --> 00:52:29.880
improvement.

00:52:29.880 --> 00:52:32.280
And not only that, but you can
see that because he was

00:52:32.280 --> 00:52:35.050
combining resources, it
went from 34 to 21.

00:52:35.050 --> 00:52:38.620
So the mobile browser had
to make fewer requests.

00:52:38.620 --> 00:52:40.890
All of those things are a win.

00:52:40.890 --> 00:52:43.770
And he got a better
mobile experience.

00:52:43.770 --> 00:52:46.250
Now this next one just kind of
completely blew me away,

00:52:46.250 --> 00:52:47.300
because I didn't believe it.

00:52:47.300 --> 00:52:49.690
But it serves as
a good example.

00:52:49.690 --> 00:52:50.720
Cooking With Frank.

00:52:50.720 --> 00:52:52.800
So this is a blog,
lots of pictures.

00:52:52.800 --> 00:52:54.500
And guess what?

00:52:54.500 --> 00:52:59.100
The unoptimized version
is 3.15 megs.

00:52:59.100 --> 00:53:01.130
With compression, it comes
out to be 10 times

00:53:01.130 --> 00:53:03.140
smaller, 340 kilobytes.

00:53:03.140 --> 00:53:07.810
So when I'm on my mobile data
plan, I probably want the 340

00:53:07.810 --> 00:53:09.710
kilobyte version.

00:53:09.710 --> 00:53:11.140
It'll load much faster.

00:53:11.140 --> 00:53:13.960
Instead of making 85 requests,
it made 28 requests.

00:53:13.960 --> 00:53:15.150
So this is a dramatic
difference.

00:53:15.150 --> 00:53:16.120
JOSHUA MARANTZ: Yeah.

00:53:16.120 --> 00:53:18.970
We're still learning exactly
what works really well on what

00:53:18.970 --> 00:53:22.080
kind of mobile device and
what kind of connection.

00:53:22.080 --> 00:53:26.670
But it seems likely that having
a lot less requests

00:53:26.670 --> 00:53:29.190
will benefit mobile even more
than it will benefit desktop.

00:53:29.190 --> 00:53:29.790
ILYA GRIGORIK: Yeah.

00:53:29.790 --> 00:53:33.390
So this, in general, seems like
a very interesting area

00:53:33.390 --> 00:53:37.350
to explore for mod_pagespeed,
like I want this on my phone.

00:53:40.250 --> 00:53:41.900
So just a quick recap.

00:53:41.900 --> 00:53:43.570
We've covered a lot
of stuff here.

00:53:43.570 --> 00:53:46.990
So we talked about the
upcoming 1.0 release.

00:53:46.990 --> 00:53:48.580
It's an open-source
Apache module.

00:53:48.580 --> 00:53:51.590
It works with 2.2 and 2.4.

00:53:51.590 --> 00:53:53.370
Kind of the pitch, if you
will, is just-in-time

00:53:53.370 --> 00:53:56.390
performance optimization
for your website.

00:53:56.390 --> 00:54:03.070
And it's already very widely
deployed across the web.

00:54:03.070 --> 00:54:05.770
So we feel it's 1.0 ready.

00:54:05.770 --> 00:54:07.800
It's 1.0 ready by Google
standards, which

00:54:07.800 --> 00:54:09.890
is perpetual beta.

00:54:09.890 --> 00:54:11.980
So that says a lot.

00:54:11.980 --> 00:54:15.360
But one question I do have for
you is, what's after 1.0?

00:54:15.360 --> 00:54:17.640
Are we done?

00:54:17.640 --> 00:54:18.560
JOSHUA MARANTZ: I feel
like we're at the

00:54:18.560 --> 00:54:21.860
beginning of this process.

00:54:21.860 --> 00:54:25.960
We've definitely discovered
that there is some meat to

00:54:25.960 --> 00:54:27.700
chew on here.

00:54:27.700 --> 00:54:28.950
There's a lot more
that we can do.

00:54:31.620 --> 00:54:35.610
SPDY is an obvious topic.

00:54:35.610 --> 00:54:37.550
The rules change when you're
working with SPDY.

00:54:37.550 --> 00:54:40.140
Combining becomes less
important, because you can

00:54:40.140 --> 00:54:43.330
multiplex multiple resources
over the same connection.

00:54:43.330 --> 00:54:45.560
Inlining becomes
less important.

00:54:45.560 --> 00:54:48.720
ILYA GRIGORIK: Same
reason, right?

00:54:48.720 --> 00:54:52.660
JOSHUA MARANTZ: In the release
that is coming after the 1.0

00:54:52.660 --> 00:54:56.130
release, we'll start seeing
some of the deeper SPDY

00:54:56.130 --> 00:54:57.140
integration.

00:54:57.140 --> 00:55:03.670
So Google also has a module
called mod_spdy, which we work

00:55:03.670 --> 00:55:06.710
pretty well with.

00:55:06.710 --> 00:55:09.810
And look for more
in that space.

00:55:13.850 --> 00:55:17.620
I would say the big wins that
we have right now, images;

00:55:17.620 --> 00:55:21.830
extending cache lifetime, which
is something that really

00:55:21.830 --> 00:55:26.190
benefits repeat viewers to
things like news sites;

00:55:26.190 --> 00:55:28.420
deferring JavaScript.

00:55:28.420 --> 00:55:32.240
There's kind of other big areas
where we're more aware

00:55:32.240 --> 00:55:34.680
of the networking
characteristics of the page

00:55:34.680 --> 00:55:35.930
and we're optimizing.

00:55:38.040 --> 00:55:44.580
I feel like we're relatively
early in our understanding.

00:55:44.580 --> 00:55:46.460
We've found a lot of
good things to do.

00:55:46.460 --> 00:55:49.580
But when we find good things to
do, it usually uncovers 10

00:55:49.580 --> 00:55:50.720
more that we don't have
time to do yet.

00:55:50.720 --> 00:55:51.100
ILYA GRIGORIK: Yeah.

00:55:51.100 --> 00:55:54.220
So I think that's very
representative of the web

00:55:54.220 --> 00:55:56.250
performance community
in general.

00:55:56.250 --> 00:55:59.620
I think we're still finding a
lot of interesting edge cases.

00:55:59.620 --> 00:56:01.080
And the browsers are only
getting smarter.

00:56:01.080 --> 00:56:03.830
We're only getting more and
more assets on the web.

00:56:03.830 --> 00:56:06.500
So in fact, we know that the web
pages are growing, both in

00:56:06.500 --> 00:56:08.300
size and number of requests.

00:56:08.300 --> 00:56:12.250
So it sounds like there's
a lot of work to do.

00:56:12.250 --> 00:56:13.880
JOSHUA MARANTZ: There's
an astounding

00:56:13.880 --> 00:56:14.550
amount of work to do.

00:56:14.550 --> 00:56:19.370
But I think that we've come to
a point now where we have a

00:56:19.370 --> 00:56:22.600
stake in the ground where we
have demonstrable benefit.

00:56:22.600 --> 00:56:24.200
We have adoption.

00:56:24.200 --> 00:56:25.120
And we'd like to grow it.

00:56:25.120 --> 00:56:27.250
And we're ready to take
off from here.

00:56:27.250 --> 00:56:28.490
ILYA GRIGORIK: So I'm glad that
you guys are doing it,

00:56:28.490 --> 00:56:30.460
because that makes my life
a little bit easier.

00:56:30.460 --> 00:56:33.260
I can install this and inherit
all of the work that you've

00:56:33.260 --> 00:56:34.800
put into this.

00:56:34.800 --> 00:56:37.410
So I think for the last
slide here, we've

00:56:37.410 --> 00:56:39.100
covered some of these.

00:56:39.100 --> 00:56:41.120
But I want to highlight these,
because I get these questions

00:56:41.120 --> 00:56:43.885
quite frequently on Stack
Overflow, through email, and

00:56:43.885 --> 00:56:44.770
through other means.

00:56:44.770 --> 00:56:46.990
So I kind of bucketed them.

00:56:46.990 --> 00:56:50.440
We already talked about
mod_deflate, mod_expires.

00:56:50.440 --> 00:56:53.615
So those work together
with mod_pagespeed.

00:56:53.615 --> 00:56:54.290
JOSHUA MARANTZ: That's right.

00:56:54.290 --> 00:56:57.290
In fact, mod_pagespeed
turns mod_deflate on.

00:56:57.290 --> 00:57:00.030
And it's kind of dependent on
mod_expires, because we have

00:57:00.030 --> 00:57:04.210
to know how often to pull
the origin resource.

00:57:04.210 --> 00:57:06.860
And you definitely want to
put an expires header.

00:57:06.860 --> 00:57:08.230
You want to use that.

00:57:08.230 --> 00:57:11.020
Tell us how often to check back
to see if your resource

00:57:11.020 --> 00:57:12.600
has updated.

00:57:12.600 --> 00:57:14.100
Actually, I just want to point
out one other thing.

00:57:14.100 --> 00:57:17.200
Mod_pagespeed can also look
directly at the file system,

00:57:17.200 --> 00:57:19.750
in which case it can just stat
the file to see if it's

00:57:19.750 --> 00:57:24.210
changed, which is a little bit
more efficient if your files

00:57:24.210 --> 00:57:27.210
are right there on the same
server, as opposed to being

00:57:27.210 --> 00:57:29.230
generated by PHP or pulled
from somewhere else.

00:57:29.230 --> 00:57:30.240
ILYA GRIGORIK: Actually,
that's a good point.

00:57:30.240 --> 00:57:32.100
That's another config flag
that you can find in our

00:57:32.100 --> 00:57:32.890
documentation.

00:57:32.890 --> 00:57:33.510
JOSHUA MARANTZ: That's
correct.

00:57:33.510 --> 00:57:35.240
So that's mod_pagespeed
load from file.

00:57:35.240 --> 00:57:38.790
And I think that if the files
are there on your disk, just

00:57:38.790 --> 00:57:40.680
get mod_pagespeed to look
at them directly.

00:57:40.680 --> 00:57:43.800
But if they're not and we have
to do a fetch to get them,

00:57:43.800 --> 00:57:46.050
then you definitely want to use
mod_expires to tell us how

00:57:46.050 --> 00:57:47.350
often to do that fetch.

00:57:47.350 --> 00:57:47.640
ILYA GRIGORIK: Right.

00:57:47.640 --> 00:57:49.720
OK.

00:57:49.720 --> 00:57:52.150
For the CDN , I think we've
covered a little bit.

00:57:52.150 --> 00:57:52.290
JOSHUA MARANTZ: Yeah.

00:57:52.290 --> 00:57:53.750
We covered it.

00:57:53.750 --> 00:57:58.610
CDNs are driven by the
cachability of resources we

00:57:58.610 --> 00:58:00.130
make things cachable
for a year.

00:58:00.130 --> 00:58:01.600
ILYA GRIGORIK: Which also,
I think, answers the next

00:58:01.600 --> 00:58:03.820
question which is, if you're
using a CDN-- or maybe if

00:58:03.820 --> 00:58:06.590
you're not using a CDN, rather,
but you are using

00:58:06.590 --> 00:58:09.280
another cache in front, maybe a
Squid, a Varnish, what have

00:58:09.280 --> 00:58:12.780
you, maybe Nginx, those should
still work, right?

00:58:12.780 --> 00:58:13.680
JOSHUA MARANTZ: Exactly.

00:58:13.680 --> 00:58:15.370
ILYA GRIGORIK: They'd just
be more efficient.

00:58:15.370 --> 00:58:15.670
JOSHUA MARANTZ: Exactly.

00:58:15.670 --> 00:58:18.006
They'll just have to pull
the origin less often.

00:58:18.006 --> 00:58:18.400
ILYA GRIGORIK: Yeah.

00:58:18.400 --> 00:58:18.820
OK.

00:58:18.820 --> 00:58:19.820
Perfect.

00:58:19.820 --> 00:58:23.610
So we talked about or
we mentioned the

00:58:23.610 --> 00:58:25.280
mod_pagespeed cache.

00:58:25.280 --> 00:58:26.690
So mod_pagespeed has
its own cache.

00:58:26.690 --> 00:58:29.320
We talked about the
upcoming memcache.

00:58:29.320 --> 00:58:32.160
But as a developer, do I need
to worry about that?

00:58:32.160 --> 00:58:33.880
So if I have my assets--

00:58:33.880 --> 00:58:35.710
and who manages that?

00:58:35.710 --> 00:58:38.260
If I update my asset, do I need
to worry about flushing

00:58:38.260 --> 00:58:40.590
the cache, et cetera?

00:58:40.590 --> 00:58:43.100
JOSHUA MARANTZ: So mod_pagespeed
comes

00:58:43.100 --> 00:58:47.660
pre-configured to use the
file system as a cache.

00:58:47.660 --> 00:58:50.450
And that works reasonably
well.

00:58:50.450 --> 00:58:52.790
As you scale up websites, you
have to think a little bit.

00:58:55.360 --> 00:58:58.075
We set the default cache, I
think, at 100 megabytes.

00:58:58.075 --> 00:58:59.710
Is that enough for
your assets?

00:58:59.710 --> 00:59:00.900
Or do you want to
make that grow?

00:59:00.900 --> 00:59:01.500
ILYA GRIGORIK: So it's something
you can probably

00:59:01.500 --> 00:59:02.480
tweak in the configuration.

00:59:02.480 --> 00:59:04.600
JOSHUA MARANTZ: That's another
configuration parameter.

00:59:04.600 --> 00:59:07.130
How often we go and garbage
collect that

00:59:07.130 --> 00:59:08.340
cache is another question.

00:59:08.340 --> 00:59:09.640
So when you change your assets,
you don't have to

00:59:09.640 --> 00:59:11.480
manually purge the cache.

00:59:11.480 --> 00:59:13.015
Mod_pagespeed will just
do it automatically.

00:59:13.015 --> 00:59:15.066
ILYA GRIGORIK: And that was
actually that file name kind

00:59:15.066 --> 00:59:16.830
of scheme that we looked
at earlier, right?

00:59:19.720 --> 00:59:19.950
JOSHUA MARANTZ: Yeah.

00:59:19.950 --> 00:59:24.450
Well, the files on the cache
have recognizable names.

00:59:24.450 --> 00:59:25.790
But they're not exactly
that scheme.

00:59:28.900 --> 00:59:33.620
But the hierarchy of your URL
space for your assets is

00:59:33.620 --> 00:59:34.600
reflected in the cache.

00:59:34.600 --> 00:59:36.400
So you can kind of poke around
the cache and see

00:59:36.400 --> 00:59:37.490
what we have in there.

00:59:37.490 --> 00:59:38.290
And you can just delete it.

00:59:38.290 --> 00:59:39.570
They're just files.

00:59:39.570 --> 00:59:41.906
ILYA GRIGORIK: But it sounds
like generally speaking, I

00:59:41.906 --> 00:59:42.160
shouldn't be touching them.

00:59:42.160 --> 00:59:43.510
JOSHUA MARANTZ: But you don't
really need to touch it.

00:59:43.510 --> 00:59:45.620
You can just configure how big
you want it to be and how

00:59:45.620 --> 00:59:47.540
often you think we should
go and purge it.

00:59:47.540 --> 00:59:49.260
ILYA GRIGORIK: Perfect.

00:59:49.260 --> 00:59:53.000
JOSHUA MARANTZ: And upcoming,
you'll be able to say, well,

00:59:53.000 --> 00:59:56.050
instead of storing the files on
the disk, I want to store

00:59:56.050 --> 00:59:57.240
them in memcache.

00:59:57.240 --> 00:59:59.490
And here are the host
and port numbers

00:59:59.490 --> 01:00:01.180
of my memcache instances.

01:00:01.180 --> 01:00:05.480
And then you can share that
cache among multiple servers

01:00:05.480 --> 01:00:07.780
so that you can scale up your
website a little bit better.

01:00:07.780 --> 01:00:07.990
ILYA GRIGORIK: Yeah.

01:00:07.990 --> 01:00:09.710
That's very cool.

01:00:09.710 --> 01:00:13.960
So we actually talked about
affecting or not affecting the

01:00:13.960 --> 01:00:15.430
page load time when the
cache is empty.

01:00:15.430 --> 01:00:18.340
So that was that if we don't
have the image resource

01:00:18.340 --> 01:00:20.580
optimized, we will just serve
the original image.

01:00:20.580 --> 01:00:23.455
But on the next hit, you will
get the optimized resource.

01:00:23.455 --> 01:00:27.650
So as you said, the last thing
that mod_pagespeed wants to do

01:00:27.650 --> 01:00:29.010
is to make your site slower.

01:00:29.010 --> 01:00:31.370
That would be the
anti-pattern.

01:00:31.370 --> 01:00:33.910
So that should never happen.

01:00:33.910 --> 01:00:36.290
But I'm guessing all
of this work does

01:00:36.290 --> 01:00:37.690
consume some resources.

01:00:37.690 --> 01:00:39.610
So what should we expect?

01:00:39.610 --> 01:00:42.085
If I install this on my
server is there kind

01:00:42.085 --> 01:00:43.700
of an average number?

01:00:43.700 --> 01:00:45.670
Does it really vary based on
the site, because it seems

01:00:45.670 --> 01:00:46.670
like it would, right?

01:00:46.670 --> 01:00:47.490
JOSHUA MARANTZ: Sure.

01:00:47.490 --> 01:00:50.530
A very image-rich site that
installs mod_pagespeed for the

01:00:50.530 --> 01:00:54.940
first time will go through
a period where we'll use

01:00:54.940 --> 01:00:58.450
resources on the server to
optimize the images.

01:00:58.450 --> 01:01:01.320
There will be a bounded
amount of resources.

01:01:01.320 --> 01:01:04.160
This is actually another config
parameter that you can

01:01:04.160 --> 01:01:08.180
set, because we don't know
exactly how many CPUs you have

01:01:08.180 --> 01:01:09.510
or anything.

01:01:09.510 --> 01:01:13.810
But by default, we will do, I
believe, eight concurrent

01:01:13.810 --> 01:01:18.125
image optimizations maximum
per physical machine.

01:01:18.125 --> 01:01:18.530
ILYA GRIGORIK: Right.

01:01:18.530 --> 01:01:19.460
So it's like background workers

01:01:19.460 --> 01:01:21.210
optimizing these images.

01:01:21.210 --> 01:01:21.960
JOSHUA MARANTZ: And
that's across all

01:01:21.960 --> 01:01:23.210
of the Apache processes.

01:01:27.800 --> 01:01:32.260
And so it doesn't just fan out
arbitrarily until it kills

01:01:32.260 --> 01:01:33.247
your machine.

01:01:33.247 --> 01:01:33.714
ILYA GRIGORIK: Right.

01:01:33.714 --> 01:01:34.650
That would be an anti-pattern.

01:01:34.650 --> 01:01:34.770
JOSHUA MARANTZ: Yes.

01:01:34.770 --> 01:01:36.480
That would be another
anti-pattern for serving your

01:01:36.480 --> 01:01:38.320
resources efficiently.

01:01:38.320 --> 01:01:43.230
But what will happen is if you
have a page full of images,

01:01:43.230 --> 01:01:44.960
and the first time somebody
goes to them, we'll start

01:01:44.960 --> 01:01:47.490
spinning up the optimization
of those, once those are in

01:01:47.490 --> 01:01:49.370
cache, that'll settle
back down.

01:01:49.370 --> 01:01:53.010
So there will be typically
be a few minutes--

01:01:53.010 --> 01:01:54.550
it would vary on the site--

01:01:54.550 --> 01:01:58.130
of where all these images get
optimized, put into the cache,

01:01:58.130 --> 01:01:59.320
and then you're good to go.

01:01:59.320 --> 01:02:02.360
If the cache is too small,
then it might be ongoing.

01:02:02.360 --> 01:02:05.390
ILYA GRIGORIK: So the most part,
if your website doesn't

01:02:05.390 --> 01:02:09.260
change dramatically every couple
of minutes, chances are

01:02:09.260 --> 01:02:10.910
your visitors will be just
hitting the cache.

01:02:10.910 --> 01:02:13.290
And you would only see this
extra work being done when you

01:02:13.290 --> 01:02:18.190
have new assets or, for whatever
reason, that asset

01:02:18.190 --> 01:02:20.050
got evicted from the cache.

01:02:20.050 --> 01:02:20.910
JOSHUA MARANTZ: Right.

01:02:20.910 --> 01:02:22.540
ILYA GRIGORIK: And that's where
you may want to go back

01:02:22.540 --> 01:02:26.010
and configure or check, is
your cache being used up?

01:02:26.010 --> 01:02:27.510
Maybe you should increase
the size or

01:02:27.510 --> 01:02:28.770
something to that extent.

01:02:28.770 --> 01:02:30.260
JOSHUA MARANTZ: This is probably
also a good time to

01:02:30.260 --> 01:02:33.670
point out that mod_pagespeed
offers some visibility into

01:02:33.670 --> 01:02:37.700
what it's doing, because it
has a statistics page.

01:02:37.700 --> 01:02:40.300
So on the local server, you
can go to mod_pagespeed

01:02:40.300 --> 01:02:42.990
statistics, which by default
is accessible

01:02:42.990 --> 01:02:45.286
only from local host.

01:02:45.286 --> 01:02:47.840
But you can configure
that too.

01:02:47.840 --> 01:02:54.050
And then you'll see how many
image rewrites are going on.

01:02:54.050 --> 01:02:56.830
You'll see a variety of
statistics, which kind of give

01:02:56.830 --> 01:03:00.400
you a way to put your finger on
the pulse of mod_pagespeed.

01:03:00.400 --> 01:03:01.730
ILYA GRIGORIK: So I'm guessing
if I'm using some monitoring

01:03:01.730 --> 01:03:04.960
system, I could probably get
the variables out of there,

01:03:04.960 --> 01:03:08.030
shove it into Ganglia or some
other system, and track all

01:03:08.030 --> 01:03:09.520
that performance
there as well.

01:03:09.520 --> 01:03:10.830
JOSHUA MARANTZ: It's
very scrape-able.

01:03:10.830 --> 01:03:12.625
And in fact, I think very soon
after mod_pagespeed was

01:03:12.625 --> 01:03:14.940
released people started to say,
well, I've hooked this up

01:03:14.940 --> 01:03:17.220
to this visualization system,
and here's what it's doing.

01:03:17.220 --> 01:03:18.160
ILYA GRIGORIK: That's the first
thing that I would look

01:03:18.160 --> 01:03:18.660
for as well.

01:03:18.660 --> 01:03:20.690
That makes perfect sense.

01:03:20.690 --> 01:03:24.110
So shifting gears a little bit,
we didn't specifically

01:03:24.110 --> 01:03:26.810
talk about mobile, with the
exception, I guess, of the

01:03:26.810 --> 01:03:27.530
forward proxy.

01:03:27.530 --> 01:03:30.470
But is there anything in
particular that we need to be

01:03:30.470 --> 01:03:31.960
aware about for mobile
and mod_pagespeed?

01:03:35.090 --> 01:03:37.330
JOSHUA MARANTZ: Mod_pagespeed,
this is actually one of the

01:03:37.330 --> 01:03:39.320
areas where I think we can do
a lot more in the future.

01:03:39.320 --> 01:03:43.790
But we're already providing a
substantial benefit, making

01:03:43.790 --> 01:03:45.205
things smaller and
less requests.

01:03:45.205 --> 01:03:46.245
It's all good.

01:03:46.245 --> 01:03:46.750
ILYA GRIGORIK: It's images.

01:03:46.750 --> 01:03:47.570
We saw that, right?

01:03:47.570 --> 01:03:48.690
JOSHUA MARANTZ: It's all good.

01:03:48.690 --> 01:03:52.850
What Frank Denis did was
he cranked the quality

01:03:52.850 --> 01:03:54.790
level down to 75.

01:03:54.790 --> 01:03:57.990
Typically, we would recommend
if you want to do this for

01:03:57.990 --> 01:04:01.110
desktop, we would say 85
is a very safe number.

01:04:01.110 --> 01:04:04.100
But for mobile, you might want
to crank it down further.

01:04:08.810 --> 01:04:11.280
I can't think of anything that
mod_pagespeed does that would

01:04:11.280 --> 01:04:12.650
be undesirable for mobile.

01:04:12.650 --> 01:04:15.960
I think it's all good.

01:04:15.960 --> 01:04:18.815
ILYA GRIGORIK: Smaller
resources, fewer requests, all

01:04:18.815 --> 01:04:21.820
of those things are prime
candidates for improving

01:04:21.820 --> 01:04:22.720
mobile performance.

01:04:22.720 --> 01:04:23.960
JOSHUA MARANTZ: The
only question, is

01:04:23.960 --> 01:04:24.850
there more we can do?

01:04:24.850 --> 01:04:27.220
And the answer is absolutely.

01:04:27.220 --> 01:04:28.130
Stay tuned.

01:04:28.130 --> 01:04:28.740
ILYA GRIGORIK: Right.

01:04:28.740 --> 01:04:32.080
I think that's a good note
to kind of end this on.

01:04:32.080 --> 01:04:36.430
I'll just mention that we do
have a lot of online resources

01:04:36.430 --> 01:04:38.460
about mod_pagespeed, if we
didn't answer your question.

01:04:38.460 --> 01:04:41.220
So good places to start
are modpagespeed.com.

01:04:41.220 --> 01:04:43.960
I think there's actually links
to the Google Group, the issue

01:04:43.960 --> 01:04:45.430
list, and demos there.

01:04:45.430 --> 01:04:48.180
So that's a great place to
kind of kick off your

01:04:48.180 --> 01:04:49.210
exploration.

01:04:49.210 --> 01:04:52.310
We do have a Google Group where
you can ask questions.

01:04:52.310 --> 01:04:54.790
And of course, you can also just
reach out to myself or

01:04:54.790 --> 01:04:58.090
Josh, and we will be happy
to answer any questions.

01:04:58.090 --> 01:04:59.700
So thank you, guys.

01:04:59.700 --> 01:05:00.950
JOSHUA MARANTZ: Thanks.

