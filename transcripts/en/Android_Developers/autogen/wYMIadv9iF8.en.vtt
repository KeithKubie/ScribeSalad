WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.760
[Music]

00:00:06.760 --> 00:00:06.770
[Music]
 

00:00:06.770 --> 00:00:09.440
[Music]
my name is Jonathan and I work on the

00:00:09.440 --> 00:00:09.450
my name is Jonathan and I work on the
 

00:00:09.450 --> 00:00:12.049
my name is Jonathan and I work on the
mobile ninjas we're a team within Google

00:00:12.049 --> 00:00:12.059
mobile ninjas we're a team within Google
 

00:00:12.059 --> 00:00:16.240
mobile ninjas we're a team within Google
passionate about testing and testability

00:00:16.240 --> 00:00:16.250
passionate about testing and testability
 

00:00:16.250 --> 00:00:18.710
passionate about testing and testability
if you've ever written test for Android

00:00:18.710 --> 00:00:18.720
if you've ever written test for Android
 

00:00:18.720 --> 00:00:20.540
if you've ever written test for Android
before it's likely you've used some of

00:00:20.540 --> 00:00:20.550
before it's likely you've used some of
 

00:00:20.550 --> 00:00:24.170
before it's likely you've used some of
our products espresso Robo electric or

00:00:24.170 --> 00:00:24.180
our products espresso Robo electric or
 

00:00:24.180 --> 00:00:26.120
our products espresso Robo electric or
the Android testing support library and

00:00:26.120 --> 00:00:26.130
the Android testing support library and
 

00:00:26.130 --> 00:00:28.460
the Android testing support library and
together these tools combine for

00:00:28.460 --> 00:00:28.470
together these tools combine for
 

00:00:28.470 --> 00:00:30.740
together these tools combine for
billions of testing vocations both

00:00:30.740 --> 00:00:30.750
billions of testing vocations both
 

00:00:30.750 --> 00:00:36.229
billions of testing vocations both
within and outside of Google so today

00:00:36.229 --> 00:00:36.239
within and outside of Google so today
 

00:00:36.239 --> 00:00:37.940
within and outside of Google so today
there's a general consensus within the

00:00:37.940 --> 00:00:37.950
there's a general consensus within the
 

00:00:37.950 --> 00:00:39.709
there's a general consensus within the
software development community are the

00:00:39.709 --> 00:00:39.719
software development community are the
 

00:00:39.719 --> 00:00:42.920
software development community are the
virtues of writing tests sure there's a

00:00:42.920 --> 00:00:42.930
virtues of writing tests sure there's a
 

00:00:42.930 --> 00:00:45.350
virtues of writing tests sure there's a
cost to writing tests but it's accepted

00:00:45.350 --> 00:00:45.360
cost to writing tests but it's accepted
 

00:00:45.360 --> 00:00:47.119
cost to writing tests but it's accepted
one and is one that quickly pays

00:00:47.119 --> 00:00:47.129
one and is one that quickly pays
 

00:00:47.129 --> 00:00:48.920
one and is one that quickly pays
dividends throughout the lifecycle of

00:00:48.920 --> 00:00:48.930
dividends throughout the lifecycle of
 

00:00:48.930 --> 00:00:53.000
dividends throughout the lifecycle of
your project tests provide fast feedback

00:00:53.000 --> 00:00:53.010
your project tests provide fast feedback
 

00:00:53.010 --> 00:00:55.850
your project tests provide fast feedback
on failures like a bug caught early on

00:00:55.850 --> 00:00:55.860
on failures like a bug caught early on
 

00:00:55.860 --> 00:00:57.709
on failures like a bug caught early on
in development is far cheaper to fix

00:00:57.709 --> 00:00:57.719
in development is far cheaper to fix
 

00:00:57.719 --> 00:00:58.760
in development is far cheaper to fix
than after you've deployed your

00:00:58.760 --> 00:00:58.770
than after you've deployed your
 

00:00:58.770 --> 00:01:02.090
than after you've deployed your
application they give you a safety net

00:01:02.090 --> 00:01:02.100
application they give you a safety net
 

00:01:02.100 --> 00:01:04.579
application they give you a safety net
for making changes to your code you're

00:01:04.579 --> 00:01:04.589
for making changes to your code you're
 

00:01:04.589 --> 00:01:06.710
for making changes to your code you're
free to refactor cleanup and optimize

00:01:06.710 --> 00:01:06.720
free to refactor cleanup and optimize
 

00:01:06.720 --> 00:01:09.080
free to refactor cleanup and optimize
safe in the knowledge that you're not

00:01:09.080 --> 00:01:09.090
safe in the knowledge that you're not
 

00:01:09.090 --> 00:01:10.460
safe in the knowledge that you're not
going to break any of the existing

00:01:10.460 --> 00:01:10.470
going to break any of the existing
 

00:01:10.470 --> 00:01:14.480
going to break any of the existing
functionality and what's more a suite of

00:01:14.480 --> 00:01:14.490
functionality and what's more a suite of
 

00:01:14.490 --> 00:01:16.550
functionality and what's more a suite of
readable tests provides the living

00:01:16.550 --> 00:01:16.560
readable tests provides the living
 

00:01:16.560 --> 00:01:18.920
readable tests provides the living
breathing specification of your

00:01:18.920 --> 00:01:18.930
breathing specification of your
 

00:01:18.930 --> 00:01:24.770
breathing specification of your
applications behavior now in software

00:01:24.770 --> 00:01:24.780
applications behavior now in software
 

00:01:24.780 --> 00:01:26.749
applications behavior now in software
development there exists the concept of

00:01:26.749 --> 00:01:26.759
development there exists the concept of
 

00:01:26.759 --> 00:01:28.819
development there exists the concept of
the testing pyramid it's made up of

00:01:28.819 --> 00:01:28.829
the testing pyramid it's made up of
 

00:01:28.829 --> 00:01:31.910
the testing pyramid it's made up of
three layers unit integration and

00:01:31.910 --> 00:01:31.920
three layers unit integration and
 

00:01:31.920 --> 00:01:34.100
three layers unit integration and
end-to-end tests and as you go up the

00:01:34.100 --> 00:01:34.110
end-to-end tests and as you go up the
 

00:01:34.110 --> 00:01:37.100
end-to-end tests and as you go up the
pyramid you're gaining fidelity but this

00:01:37.100 --> 00:01:37.110
pyramid you're gaining fidelity but this
 

00:01:37.110 --> 00:01:39.109
pyramid you're gaining fidelity but this
comes at the expense of test execution

00:01:39.109 --> 00:01:39.119
comes at the expense of test execution
 

00:01:39.119 --> 00:01:42.020
comes at the expense of test execution
time it also gets harder to maintain and

00:01:42.020 --> 00:01:42.030
time it also gets harder to maintain and
 

00:01:42.030 --> 00:01:46.039
time it also gets harder to maintain and
debug these kinds of tests but just like

00:01:46.039 --> 00:01:46.049
debug these kinds of tests but just like
 

00:01:46.049 --> 00:01:47.899
debug these kinds of tests but just like
a rock band where you need a perfect

00:01:47.899 --> 00:01:47.909
a rock band where you need a perfect
 

00:01:47.909 --> 00:01:49.670
a rock band where you need a perfect
blend of musicians to create that great

00:01:49.670 --> 00:01:49.680
blend of musicians to create that great
 

00:01:49.680 --> 00:01:52.249
blend of musicians to create that great
track each layer in the pyramid is

00:01:52.249 --> 00:01:52.259
track each layer in the pyramid is
 

00:01:52.259 --> 00:01:55.480
track each layer in the pyramid is
equally important you're leveraging the

00:01:55.480 --> 00:01:55.490
equally important you're leveraging the
 

00:01:55.490 --> 00:01:58.609
equally important you're leveraging the
Vantage's of one layer to compensate for

00:01:58.609 --> 00:01:58.619
Vantage's of one layer to compensate for
 

00:01:58.619 --> 00:02:00.859
Vantage's of one layer to compensate for
trade-offs in others to produce a

00:02:00.859 --> 00:02:00.869
trade-offs in others to produce a
 

00:02:00.869 --> 00:02:04.480
trade-offs in others to produce a
holistic automated testing environment

00:02:04.480 --> 00:02:04.490
holistic automated testing environment
 

00:02:04.490 --> 00:02:08.869
holistic automated testing environment
we recommend a 70-20-10 split as a

00:02:08.869 --> 00:02:08.879
we recommend a 70-20-10 split as a
 

00:02:08.879 --> 00:02:11.550
we recommend a 70-20-10 split as a
general healthy guideline

00:02:11.550 --> 00:02:11.560
general healthy guideline
 

00:02:11.560 --> 00:02:13.500
general healthy guideline
and now while the rules of these

00:02:13.500 --> 00:02:13.510
and now while the rules of these
 

00:02:13.510 --> 00:02:16.350
and now while the rules of these
pyramids still apply some of the unique

00:02:16.350 --> 00:02:16.360
pyramids still apply some of the unique
 

00:02:16.360 --> 00:02:17.970
pyramids still apply some of the unique
characteristics of Android development

00:02:17.970 --> 00:02:17.980
characteristics of Android development
 

00:02:17.980 --> 00:02:19.920
characteristics of Android development
have introduced some difficulties along

00:02:19.920 --> 00:02:19.930
have introduced some difficulties along
 

00:02:19.930 --> 00:02:26.309
have introduced some difficulties along
the way so unit tests due to their need

00:02:26.309 --> 00:02:26.319
the way so unit tests due to their need
 

00:02:26.319 --> 00:02:28.050
the way so unit tests due to their need
to be fast will run on the local

00:02:28.050 --> 00:02:28.060
to be fast will run on the local
 

00:02:28.060 --> 00:02:32.820
to be fast will run on the local
workstation an integration and

00:02:32.820 --> 00:02:32.830
workstation an integration and
 

00:02:32.830 --> 00:02:34.890
workstation an integration and
end-to-end tests due to their need to

00:02:34.890 --> 00:02:34.900
end-to-end tests due to their need to
 

00:02:34.900 --> 00:02:36.690
end-to-end tests due to their need to
run in a really faithful environment

00:02:36.690 --> 00:02:36.700
run in a really faithful environment
 

00:02:36.700 --> 00:02:38.970
run in a really faithful environment
tend to run on a rail or a virtual

00:02:38.970 --> 00:02:38.980
tend to run on a rail or a virtual
 

00:02:38.980 --> 00:02:43.199
tend to run on a rail or a virtual
device and so separate tools are evolved

00:02:43.199 --> 00:02:43.209
device and so separate tools are evolved
 

00:02:43.209 --> 00:02:47.430
device and so separate tools are evolved
at each layer of the pyramid robolectric

00:02:47.430 --> 00:02:47.440
at each layer of the pyramid robolectric
 

00:02:47.440 --> 00:02:49.740
at each layer of the pyramid robolectric
or the mockable android framework for

00:02:49.740 --> 00:02:49.750
or the mockable android framework for
 

00:02:49.750 --> 00:02:54.570
or the mockable android framework for
your off device unit tests espresso and

00:02:54.570 --> 00:02:54.580
your off device unit tests espresso and
 

00:02:54.580 --> 00:02:56.550
your off device unit tests espresso and
the Android testing support library for

00:02:56.550 --> 00:02:56.560
the Android testing support library for
 

00:02:56.560 --> 00:03:00.270
the Android testing support library for
those on device tests now androids got

00:03:00.270 --> 00:03:00.280
those on device tests now androids got
 

00:03:00.280 --> 00:03:02.250
those on device tests now androids got
some really familiar core concepts such

00:03:02.250 --> 00:03:02.260
some really familiar core concepts such
 

00:03:02.260 --> 00:03:04.800
some really familiar core concepts such
as getting a handle to your application

00:03:04.800 --> 00:03:04.810
as getting a handle to your application
 

00:03:04.810 --> 00:03:06.870
as getting a handle to your application
context or maybe driving your activity

00:03:06.870 --> 00:03:06.880
context or maybe driving your activity
 

00:03:06.880 --> 00:03:09.930
context or maybe driving your activity
lifecycle and each of these tools has

00:03:09.930 --> 00:03:09.940
lifecycle and each of these tools has
 

00:03:09.940 --> 00:03:12.240
lifecycle and each of these tools has
its own distinct api's and ways of doing

00:03:12.240 --> 00:03:12.250
its own distinct api's and ways of doing
 

00:03:12.250 --> 00:03:12.900
its own distinct api's and ways of doing
things

00:03:12.900 --> 00:03:12.910
things
 

00:03:12.910 --> 00:03:18.870
things
for achieving these exact same tasks now

00:03:18.870 --> 00:03:18.880
for achieving these exact same tasks now
 

00:03:18.880 --> 00:03:20.640
for achieving these exact same tasks now
this has led to something of a test

00:03:20.640 --> 00:03:20.650
this has led to something of a test
 

00:03:20.650 --> 00:03:24.810
this has led to something of a test
writing crisis as a developer it's hard

00:03:24.810 --> 00:03:24.820
writing crisis as a developer it's hard
 

00:03:24.820 --> 00:03:26.340
writing crisis as a developer it's hard
sometimes to know what tools are

00:03:26.340 --> 00:03:26.350
sometimes to know what tools are
 

00:03:26.350 --> 00:03:29.190
sometimes to know what tools are
available for use and which of those are

00:03:29.190 --> 00:03:29.200
available for use and which of those are
 

00:03:29.200 --> 00:03:32.970
available for use and which of those are
recommended having multiple tools at

00:03:32.970 --> 00:03:32.980
recommended having multiple tools at
 

00:03:32.980 --> 00:03:35.250
recommended having multiple tools at
each level has led to an explosion of

00:03:35.250 --> 00:03:35.260
each level has led to an explosion of
 

00:03:35.260 --> 00:03:37.350
each level has led to an explosion of
styles each with their own distinct

00:03:37.350 --> 00:03:37.360
styles each with their own distinct
 

00:03:37.360 --> 00:03:41.789
styles each with their own distinct
patterns and api's and this in turn

00:03:41.789 --> 00:03:41.799
patterns and api's and this in turn
 

00:03:41.799 --> 00:03:43.740
patterns and api's and this in turn
leads to a lack of mobility between

00:03:43.740 --> 00:03:43.750
leads to a lack of mobility between
 

00:03:43.750 --> 00:03:47.069
leads to a lack of mobility between
layers tests can't easily be refracted

00:03:47.069 --> 00:03:47.079
layers tests can't easily be refracted
 

00:03:47.079 --> 00:03:49.229
layers tests can't easily be refracted
or reused between layers in a pyramid

00:03:49.229 --> 00:03:49.239
or reused between layers in a pyramid
 

00:03:49.239 --> 00:03:51.449
or reused between layers in a pyramid
without being completely rewritten for a

00:03:51.449 --> 00:03:51.459
without being completely rewritten for a
 

00:03:51.459 --> 00:03:55.590
without being completely rewritten for a
new tour to discuss this further let's

00:03:55.590 --> 00:03:55.600
new tour to discuss this further let's
 

00:03:55.600 --> 00:03:56.940
new tour to discuss this further let's
orientate ourselves with what

00:03:56.940 --> 00:03:56.950
orientate ourselves with what
 

00:03:56.950 --> 00:04:02.970
orientate ourselves with what
constitutes a well-structured test so

00:04:02.970 --> 00:04:02.980
constitutes a well-structured test so
 

00:04:02.980 --> 00:04:05.250
constitutes a well-structured test so
there's some following common patterns

00:04:05.250 --> 00:04:05.260
there's some following common patterns
 

00:04:05.260 --> 00:04:08.460
there's some following common patterns
that define a well-structured test and

00:04:08.460 --> 00:04:08.470
that define a well-structured test and
 

00:04:08.470 --> 00:04:10.199
that define a well-structured test and
so we generally break tests down into

00:04:10.199 --> 00:04:10.209
so we generally break tests down into
 

00:04:10.209 --> 00:04:14.099
so we generally break tests down into
three clear sections given when and then

00:04:14.099 --> 00:04:14.109
three clear sections given when and then
 

00:04:14.109 --> 00:04:16.590
three clear sections given when and then
and I like to separate them with a blank

00:04:16.590 --> 00:04:16.600
and I like to separate them with a blank
 

00:04:16.600 --> 00:04:21.360
and I like to separate them with a blank
line to clearly demarcate them so given

00:04:21.360 --> 00:04:21.370
line to clearly demarcate them so given
 

00:04:21.370 --> 00:04:25.190
line to clearly demarcate them so given
some predetermined state of the system

00:04:25.190 --> 00:04:25.200
some predetermined state of the system
 

00:04:25.200 --> 00:04:27.930
some predetermined state of the system
when you execute an action that you wish

00:04:27.930 --> 00:04:27.940
when you execute an action that you wish
 

00:04:27.940 --> 00:04:31.920
when you execute an action that you wish
to test then verify the new state of the

00:04:31.920 --> 00:04:31.930
to test then verify the new state of the
 

00:04:31.930 --> 00:04:34.580
to test then verify the new state of the
system or some behavior has occurred

00:04:34.580 --> 00:04:34.590
system or some behavior has occurred
 

00:04:34.590 --> 00:04:37.110
system or some behavior has occurred
be sure to name the test after both the

00:04:37.110 --> 00:04:37.120
be sure to name the test after both the
 

00:04:37.120 --> 00:04:39.420
be sure to name the test after both the
condition you're testing and the

00:04:39.420 --> 00:04:39.430
condition you're testing and the
 

00:04:39.430 --> 00:04:43.050
condition you're testing and the
expected outcome keep the test focused

00:04:43.050 --> 00:04:43.060
expected outcome keep the test focused
 

00:04:43.060 --> 00:04:45.990
expected outcome keep the test focused
on very specific behavior and then test

00:04:45.990 --> 00:04:46.000
on very specific behavior and then test
 

00:04:46.000 --> 00:04:50.250
on very specific behavior and then test
all your behaviors independently unless

00:04:50.250 --> 00:04:50.260
all your behaviors independently unless
 

00:04:50.260 --> 00:04:52.320
all your behaviors independently unless
it's always more with tests these

00:04:52.320 --> 00:04:52.330
it's always more with tests these
 

00:04:52.330 --> 00:04:54.150
it's always more with tests these
guidelines will help you keep each test

00:04:54.150 --> 00:04:54.160
guidelines will help you keep each test
 

00:04:54.160 --> 00:04:58.410
guidelines will help you keep each test
understandable in isolation use common

00:04:58.410 --> 00:04:58.420
understandable in isolation use common
 

00:04:58.420 --> 00:05:01.470
understandable in isolation use common
setup methods only for scaffolding this

00:05:01.470 --> 00:05:01.480
setup methods only for scaffolding this
 

00:05:01.480 --> 00:05:03.930
setup methods only for scaffolding this
is maybe creating the object that's

00:05:03.930 --> 00:05:03.940
is maybe creating the object that's
 

00:05:03.940 --> 00:05:05.730
is maybe creating the object that's
under test and wiring up some of its

00:05:05.730 --> 00:05:05.740
under test and wiring up some of its
 

00:05:05.740 --> 00:05:09.450
under test and wiring up some of its
dependences let's take a look at the

00:05:09.450 --> 00:05:09.460
dependences let's take a look at the
 

00:05:09.460 --> 00:05:11.700
dependences let's take a look at the
problem of the explosion of styles and

00:05:11.700 --> 00:05:11.710
problem of the explosion of styles and
 

00:05:11.710 --> 00:05:13.710
problem of the explosion of styles and
we'll highlight this using a simple test

00:05:13.710 --> 00:05:13.720
we'll highlight this using a simple test
 

00:05:13.720 --> 00:05:17.880
we'll highlight this using a simple test
case we'll have a single activity with

00:05:17.880 --> 00:05:17.890
case we'll have a single activity with
 

00:05:17.890 --> 00:05:20.460
case we'll have a single activity with
one button that responds to a click

00:05:20.460 --> 00:05:20.470
one button that responds to a click
 

00:05:20.470 --> 00:05:22.380
one button that responds to a click
sending an intent to the Android system

00:05:22.380 --> 00:05:22.390
sending an intent to the Android system
 

00:05:22.390 --> 00:05:25.290
sending an intent to the Android system
and I'm going to walk you through at

00:05:25.290 --> 00:05:25.300
and I'm going to walk you through at
 

00:05:25.300 --> 00:05:27.390
and I'm going to walk you through at
this test case comparing the different

00:05:27.390 --> 00:05:27.400
this test case comparing the different
 

00:05:27.400 --> 00:05:29.010
this test case comparing the different
styles of mockito

00:05:29.010 --> 00:05:29.020
styles of mockito
 

00:05:29.020 --> 00:05:36.360
styles of mockito
Robo electric or espresso so first up

00:05:36.360 --> 00:05:36.370
Robo electric or espresso so first up
 

00:05:36.370 --> 00:05:39.330
Robo electric or espresso so first up
let's consider mojito now mocking is a

00:05:39.330 --> 00:05:39.340
let's consider mojito now mocking is a
 

00:05:39.340 --> 00:05:41.670
let's consider mojito now mocking is a
really powerful tool but is one that's

00:05:41.670 --> 00:05:41.680
really powerful tool but is one that's
 

00:05:41.680 --> 00:05:43.770
really powerful tool but is one that's
often overused and sometimes used

00:05:43.770 --> 00:05:43.780
often overused and sometimes used
 

00:05:43.780 --> 00:05:47.010
often overused and sometimes used
inappropriately mocking your own classes

00:05:47.010 --> 00:05:47.020
inappropriately mocking your own classes
 

00:05:47.020 --> 00:05:49.470
inappropriately mocking your own classes
is great but while mocking the android

00:05:49.470 --> 00:05:49.480
is great but while mocking the android
 

00:05:49.480 --> 00:05:51.600
is great but while mocking the android
framework may seem like a great idea at

00:05:51.600 --> 00:05:51.610
framework may seem like a great idea at
 

00:05:51.610 --> 00:05:53.880
framework may seem like a great idea at
first it consumed lead down a path of

00:05:53.880 --> 00:05:53.890
first it consumed lead down a path of
 

00:05:53.890 --> 00:05:57.780
first it consumed lead down a path of
difficult problems many Android classes

00:05:57.780 --> 00:05:57.790
difficult problems many Android classes
 

00:05:57.790 --> 00:05:59.490
difficult problems many Android classes
are stateful or they have complex

00:05:59.490 --> 00:05:59.500
are stateful or they have complex
 

00:05:59.500 --> 00:06:01.290
are stateful or they have complex
contracts and these are really difficult

00:06:01.290 --> 00:06:01.300
contracts and these are really difficult
 

00:06:01.300 --> 00:06:04.010
contracts and these are really difficult
or even impossible to satisfy with marks

00:06:04.010 --> 00:06:04.020
or even impossible to satisfy with marks
 

00:06:04.020 --> 00:06:06.600
or even impossible to satisfy with marks
so even though we don't recommend it

00:06:06.600 --> 00:06:06.610
so even though we don't recommend it
 

00:06:06.610 --> 00:06:08.880
so even though we don't recommend it
let's just start by taking a look at one

00:06:08.880 --> 00:06:08.890
let's just start by taking a look at one
 

00:06:08.890 --> 00:06:10.950
let's just start by taking a look at one
of these tests and walk through it using

00:06:10.950 --> 00:06:10.960
of these tests and walk through it using
 

00:06:10.960 --> 00:06:14.310
of these tests and walk through it using
the mojito framework to mock the android

00:06:14.310 --> 00:06:14.320
the mojito framework to mock the android
 

00:06:14.320 --> 00:06:20.430
the mojito framework to mock the android
framework so in the given section we can

00:06:20.430 --> 00:06:20.440
framework so in the given section we can
 

00:06:20.440 --> 00:06:23.880
framework so in the given section we can
you a power activity under tests but

00:06:23.880 --> 00:06:23.890
you a power activity under tests but
 

00:06:23.890 --> 00:06:26.100
you a power activity under tests but
look we first of all have to stub out

00:06:26.100 --> 00:06:26.110
look we first of all have to stub out
 

00:06:26.110 --> 00:06:28.650
look we first of all have to stub out
some of the android framework behavior

00:06:28.650 --> 00:06:28.660
some of the android framework behavior
 

00:06:28.660 --> 00:06:32.340
some of the android framework behavior
in the superclass activity so that it

00:06:32.340 --> 00:06:32.350
in the superclass activity so that it
 

00:06:32.350 --> 00:06:35.460
in the superclass activity so that it
responds as we expect in our tests

00:06:35.460 --> 00:06:35.470
responds as we expect in our tests
 

00:06:35.470 --> 00:06:38.880
responds as we expect in our tests
now this introduces some problems first

00:06:38.880 --> 00:06:38.890
now this introduces some problems first
 

00:06:38.890 --> 00:06:41.160
now this introduces some problems first
of all were partially stubbing the class

00:06:41.160 --> 00:06:41.170
of all were partially stubbing the class
 

00:06:41.170 --> 00:06:43.260
of all were partially stubbing the class
under test and this means we're not

00:06:43.260 --> 00:06:43.270
under test and this means we're not
 

00:06:43.270 --> 00:06:45.600
under test and this means we're not
testing the true behavior of that object

00:06:45.600 --> 00:06:45.610
testing the true behavior of that object
 

00:06:45.610 --> 00:06:49.080
testing the true behavior of that object
on the test and furthermore it brings

00:06:49.080 --> 00:06:49.090
on the test and furthermore it brings
 

00:06:49.090 --> 00:06:51.570
on the test and furthermore it brings
with it excessive stubbing which

00:06:51.570 --> 00:06:51.580
with it excessive stubbing which
 

00:06:51.580 --> 00:06:52.950
with it excessive stubbing which
introduces all this undesirable

00:06:52.950 --> 00:06:52.960
introduces all this undesirable
 

00:06:52.960 --> 00:06:55.320
introduces all this undesirable
boilerplate and that quickly becomes

00:06:55.320 --> 00:06:55.330
boilerplate and that quickly becomes
 

00:06:55.330 --> 00:06:57.390
boilerplate and that quickly becomes
distracting from the true intention of

00:06:57.390 --> 00:06:57.400
distracting from the true intention of
 

00:06:57.400 --> 00:07:02.760
distracting from the true intention of
your test for the when section of the

00:07:02.760 --> 00:07:02.770
your test for the when section of the
 

00:07:02.770 --> 00:07:05.340
your test for the when section of the
test to execute your code under test

00:07:05.340 --> 00:07:05.350
test to execute your code under test
 

00:07:05.350 --> 00:07:07.200
test to execute your code under test
you'd have first had to need to register

00:07:07.200 --> 00:07:07.210
you'd have first had to need to register
 

00:07:07.210 --> 00:07:09.180
you'd have first had to need to register
an argument captor earlier to get a

00:07:09.180 --> 00:07:09.190
an argument captor earlier to get a
 

00:07:09.190 --> 00:07:11.310
an argument captor earlier to get a
handle on that click listener which you

00:07:11.310 --> 00:07:11.320
handle on that click listener which you
 

00:07:11.320 --> 00:07:14.310
handle on that click listener which you
will then vote manually to to call the

00:07:14.310 --> 00:07:14.320
will then vote manually to to call the
 

00:07:14.320 --> 00:07:17.190
will then vote manually to to call the
code that you're wishing to test now

00:07:17.190 --> 00:07:17.200
code that you're wishing to test now
 

00:07:17.200 --> 00:07:19.050
code that you're wishing to test now
with this approach you can soon descend

00:07:19.050 --> 00:07:19.060
with this approach you can soon descend
 

00:07:19.060 --> 00:07:21.480
with this approach you can soon descend
into a undesirable mess of argument

00:07:21.480 --> 00:07:21.490
into a undesirable mess of argument
 

00:07:21.490 --> 00:07:24.180
into a undesirable mess of argument
captors stubbing calls and answer

00:07:24.180 --> 00:07:24.190
captors stubbing calls and answer
 

00:07:24.190 --> 00:07:30.540
captors stubbing calls and answer
invocations finally in the then section

00:07:30.540 --> 00:07:30.550
invocations finally in the then section
 

00:07:30.550 --> 00:07:33.060
invocations finally in the then section
to obtain ten intent sent to the Android

00:07:33.060 --> 00:07:33.070
to obtain ten intent sent to the Android
 

00:07:33.070 --> 00:07:34.740
to obtain ten intent sent to the Android
system you can have to use another

00:07:34.740 --> 00:07:34.750
system you can have to use another
 

00:07:34.750 --> 00:07:37.950
system you can have to use another
argument captor in mocking the Android

00:07:37.950 --> 00:07:37.960
argument captor in mocking the Android
 

00:07:37.960 --> 00:07:39.900
argument captor in mocking the Android
frameworks in this way tends to force

00:07:39.900 --> 00:07:39.910
frameworks in this way tends to force
 

00:07:39.910 --> 00:07:42.270
frameworks in this way tends to force
you into a testing implementation

00:07:42.270 --> 00:07:42.280
you into a testing implementation
 

00:07:42.280 --> 00:07:44.460
you into a testing implementation
details when you want to be testing

00:07:44.460 --> 00:07:44.470
details when you want to be testing
 

00:07:44.470 --> 00:07:48.390
details when you want to be testing
behavior instead and furthermore these

00:07:48.390 --> 00:07:48.400
behavior instead and furthermore these
 

00:07:48.400 --> 00:07:50.159
behavior instead and furthermore these
drawbacks have tended to lead to

00:07:50.159 --> 00:07:50.169
drawbacks have tended to lead to
 

00:07:50.169 --> 00:07:51.390
drawbacks have tended to lead to
developers to build their own

00:07:51.390 --> 00:07:51.400
developers to build their own
 

00:07:51.400 --> 00:07:54.750
developers to build their own
abstractions to isolate Android this

00:07:54.750 --> 00:07:54.760
abstractions to isolate Android this
 

00:07:54.760 --> 00:07:56.040
abstractions to isolate Android this
little turn leads to its own set of

00:07:56.040 --> 00:07:56.050
little turn leads to its own set of
 

00:07:56.050 --> 00:07:59.310
little turn leads to its own set of
problems firstly you're introducing

00:07:59.310 --> 00:07:59.320
problems firstly you're introducing
 

00:07:59.320 --> 00:08:01.140
problems firstly you're introducing
another layer of Krofft into your

00:08:01.140 --> 00:08:01.150
another layer of Krofft into your
 

00:08:01.150 --> 00:08:04.170
another layer of Krofft into your
application and secondly you're

00:08:04.170 --> 00:08:04.180
application and secondly you're
 

00:08:04.180 --> 00:08:06.420
application and secondly you're
introducing text in gaps where bugs can

00:08:06.420 --> 00:08:06.430
introducing text in gaps where bugs can
 

00:08:06.430 --> 00:08:10.680
introducing text in gaps where bugs can
hide and we believe that while you

00:08:10.680 --> 00:08:10.690
hide and we believe that while you
 

00:08:10.690 --> 00:08:12.810
hide and we believe that while you
should architect your application very

00:08:12.810 --> 00:08:12.820
should architect your application very
 

00:08:12.820 --> 00:08:15.030
should architect your application very
thoughtfully the limitations of the

00:08:15.030 --> 00:08:15.040
thoughtfully the limitations of the
 

00:08:15.040 --> 00:08:17.460
thoughtfully the limitations of the
tools shouldn't dictate your application

00:08:17.460 --> 00:08:17.470
tools shouldn't dictate your application
 

00:08:17.470 --> 00:08:23.580
tools shouldn't dictate your application
architecture either so let's see how

00:08:23.580 --> 00:08:23.590
architecture either so let's see how
 

00:08:23.590 --> 00:08:25.640
architecture either so let's see how
this looks like with robolectric

00:08:25.640 --> 00:08:25.650
this looks like with robolectric
 

00:08:25.650 --> 00:08:28.020
this looks like with robolectric
robolectric is the popular open source

00:08:28.020 --> 00:08:28.030
robolectric is the popular open source
 

00:08:28.030 --> 00:08:30.390
robolectric is the popular open source
testing framework it allows you to

00:08:30.390 --> 00:08:30.400
testing framework it allows you to
 

00:08:30.400 --> 00:08:31.950
testing framework it allows you to
follow the best practices surrounding

00:08:31.950 --> 00:08:31.960
follow the best practices surrounding
 

00:08:31.960 --> 00:08:34.620
follow the best practices surrounding
marks as you're able to use real Android

00:08:34.620 --> 00:08:34.630
marks as you're able to use real Android
 

00:08:34.630 --> 00:08:36.570
marks as you're able to use real Android
objects in your tests rather than having

00:08:36.570 --> 00:08:36.580
objects in your tests rather than having
 

00:08:36.580 --> 00:08:39.300
objects in your tests rather than having
to program your own stubbing behavior in

00:08:39.300 --> 00:08:39.310
to program your own stubbing behavior in
 

00:08:39.310 --> 00:08:42.300
to program your own stubbing behavior in
each test it runs on your local host

00:08:42.300 --> 00:08:42.310
each test it runs on your local host
 

00:08:42.310 --> 00:08:44.640
each test it runs on your local host
which means it's very fast making it

00:08:44.640 --> 00:08:44.650
which means it's very fast making it
 

00:08:44.650 --> 00:08:47.880
which means it's very fast making it
ideal for unit tests robolectric tends

00:08:47.880 --> 00:08:47.890
ideal for unit tests robolectric tends
 

00:08:47.890 --> 00:08:48.960
ideal for unit tests robolectric tends
to create tests that

00:08:48.960 --> 00:08:48.970
to create tests that
 

00:08:48.970 --> 00:08:51.540
to create tests that
a lot cleaner so let's walk through each

00:08:51.540 --> 00:08:51.550
a lot cleaner so let's walk through each
 

00:08:51.550 --> 00:08:57.509
a lot cleaner so let's walk through each
section in turn in the given section we

00:08:57.509 --> 00:08:57.519
section in turn in the given section we
 

00:08:57.519 --> 00:08:59.189
section in turn in the given section we
can simply bring an activity into the

00:08:59.189 --> 00:08:59.199
can simply bring an activity into the
 

00:08:59.199 --> 00:09:01.290
can simply bring an activity into the
resume state for our test just by

00:09:01.290 --> 00:09:01.300
resume state for our test just by
 

00:09:01.300 --> 00:09:03.300
resume state for our test just by
calling robe electrics setup activity

00:09:03.300 --> 00:09:03.310
calling robe electrics setup activity
 

00:09:03.310 --> 00:09:10.170
calling robe electrics setup activity
API in the when section we're able to

00:09:10.170 --> 00:09:10.180
API in the when section we're able to
 

00:09:10.180 --> 00:09:12.929
API in the when section we're able to
use real Android SDK api's such as fine

00:09:12.929 --> 00:09:12.939
use real Android SDK api's such as fine
 

00:09:12.939 --> 00:09:15.420
use real Android SDK api's such as fine
view by ID to get ahold of the view and

00:09:15.420 --> 00:09:15.430
view by ID to get ahold of the view and
 

00:09:15.430 --> 00:09:18.569
view by ID to get ahold of the view and
then robolectric s-- click on api safely

00:09:18.569 --> 00:09:18.579
then robolectric s-- click on api safely
 

00:09:18.579 --> 00:09:20.069
then robolectric s-- click on api safely
click on that view and invoke the code

00:09:20.069 --> 00:09:20.079
click on that view and invoke the code
 

00:09:20.079 --> 00:09:25.350
click on that view and invoke the code
that we wish to test and finally in the

00:09:25.350 --> 00:09:25.360
that we wish to test and finally in the
 

00:09:25.360 --> 00:09:27.749
that we wish to test and finally in the
vent section we again use robe electrics

00:09:27.749 --> 00:09:27.759
vent section we again use robe electrics
 

00:09:27.759 --> 00:09:30.119
vent section we again use robe electrics
own testing api's to check that the

00:09:30.119 --> 00:09:30.129
own testing api's to check that the
 

00:09:30.129 --> 00:09:33.179
own testing api's to check that the
intent was sent to the system see how

00:09:33.179 --> 00:09:33.189
intent was sent to the system see how
 

00:09:33.189 --> 00:09:34.980
intent was sent to the system see how
much cleaner this version is we're

00:09:34.980 --> 00:09:34.990
much cleaner this version is we're
 

00:09:34.990 --> 00:09:36.749
much cleaner this version is we're
focusing on the items that really matter

00:09:36.749 --> 00:09:36.759
focusing on the items that really matter
 

00:09:36.759 --> 00:09:38.790
focusing on the items that really matter
in the test and were free of all those

00:09:38.790 --> 00:09:38.800
in the test and were free of all those
 

00:09:38.800 --> 00:09:45.540
in the test and were free of all those
extra pieces of distraction now espresso

00:09:45.540 --> 00:09:45.550
extra pieces of distraction now espresso
 

00:09:45.550 --> 00:09:47.939
extra pieces of distraction now espresso
is a UI testing framework and it runs on

00:09:47.939 --> 00:09:47.949
is a UI testing framework and it runs on
 

00:09:47.949 --> 00:09:50.790
is a UI testing framework and it runs on
a real or a virtual device it provides

00:09:50.790 --> 00:09:50.800
a real or a virtual device it provides
 

00:09:50.800 --> 00:09:52.679
a real or a virtual device it provides
you with a really realistic environment

00:09:52.679 --> 00:09:52.689
you with a really realistic environment
 

00:09:52.689 --> 00:09:55.230
you with a really realistic environment
the trade-off here is a much slower

00:09:55.230 --> 00:09:55.240
the trade-off here is a much slower
 

00:09:55.240 --> 00:09:57.869
the trade-off here is a much slower
execution speed you're building up your

00:09:57.869 --> 00:09:57.879
execution speed you're building up your
 

00:09:57.879 --> 00:10:00.389
execution speed you're building up your
entire apk deploying it to the device

00:10:00.389 --> 00:10:00.399
entire apk deploying it to the device
 

00:10:00.399 --> 00:10:03.449
entire apk deploying it to the device
and instantiating the test run waiting

00:10:03.449 --> 00:10:03.459
and instantiating the test run waiting
 

00:10:03.459 --> 00:10:04.679
and instantiating the test run waiting
for the results and then collecting

00:10:04.679 --> 00:10:04.689
for the results and then collecting
 

00:10:04.689 --> 00:10:07.230
for the results and then collecting
those back on your local workstation all

00:10:07.230 --> 00:10:07.240
those back on your local workstation all
 

00:10:07.240 --> 00:10:09.150
those back on your local workstation all
of this is adding valuable development

00:10:09.150 --> 00:10:09.160
of this is adding valuable development
 

00:10:09.160 --> 00:10:13.439
of this is adding valuable development
cycles now the exact same android

00:10:13.439 --> 00:10:13.449
cycles now the exact same android
 

00:10:13.449 --> 00:10:15.929
cycles now the exact same android
concepts exist here we're just getting

00:10:15.929 --> 00:10:15.939
concepts exist here we're just getting
 

00:10:15.939 --> 00:10:17.759
concepts exist here we're just getting
hold of an activity clicking a button

00:10:17.759 --> 00:10:17.769
hold of an activity clicking a button
 

00:10:17.769 --> 00:10:20.100
hold of an activity clicking a button
and then verifying an intent was sent

00:10:20.100 --> 00:10:20.110
and then verifying an intent was sent
 

00:10:20.110 --> 00:10:23.160
and then verifying an intent was sent
the Android system here though as you'll

00:10:23.160 --> 00:10:23.170
the Android system here though as you'll
 

00:10:23.170 --> 00:10:26.850
the Android system here though as you'll
see the api's are very different let's

00:10:26.850 --> 00:10:26.860
see the api's are very different let's
 

00:10:26.860 --> 00:10:31.319
see the api's are very different let's
step through this one together so in the

00:10:31.319 --> 00:10:31.329
step through this one together so in the
 

00:10:31.329 --> 00:10:33.299
step through this one together so in the
given section we'll use the activity

00:10:33.299 --> 00:10:33.309
given section we'll use the activity
 

00:10:33.309 --> 00:10:35.490
given section we'll use the activity
test role which comes from the Android

00:10:35.490 --> 00:10:35.500
test role which comes from the Android
 

00:10:35.500 --> 00:10:38.369
test role which comes from the Android
testing support library this can be used

00:10:38.369 --> 00:10:38.379
testing support library this can be used
 

00:10:38.379 --> 00:10:40.379
testing support library this can be used
to start an activity bring it to the

00:10:40.379 --> 00:10:40.389
to start an activity bring it to the
 

00:10:40.389 --> 00:10:41.999
to start an activity bring it to the
resume state and provide us with a

00:10:41.999 --> 00:10:42.009
resume state and provide us with a
 

00:10:42.009 --> 00:10:47.530
resume state and provide us with a
handle to it in our tests

00:10:47.530 --> 00:10:47.540
 

00:10:47.540 --> 00:10:50.260
for the when section we can use the

00:10:50.260 --> 00:10:50.270
for the when section we can use the
 

00:10:50.270 --> 00:10:52.660
for the when section we can use the
espresso view matcher api's they'll find

00:10:52.660 --> 00:10:52.670
espresso view matcher api's they'll find
 

00:10:52.670 --> 00:10:54.310
espresso view matcher api's they'll find
the view in question and then safely

00:10:54.310 --> 00:10:54.320
the view in question and then safely
 

00:10:54.320 --> 00:10:56.110
the view in question and then safely
click on it to invoke the code that we

00:10:56.110 --> 00:10:56.120
click on it to invoke the code that we
 

00:10:56.120 --> 00:11:02.050
click on it to invoke the code that we
wish to test and finally in the vent

00:11:02.050 --> 00:11:02.060
wish to test and finally in the vent
 

00:11:02.060 --> 00:11:04.510
wish to test and finally in the vent
section we use the espresso intents

00:11:04.510 --> 00:11:04.520
section we use the espresso intents
 

00:11:04.520 --> 00:11:07.060
section we use the espresso intents
library to capture that tent and verify

00:11:07.060 --> 00:11:07.070
library to capture that tent and verify
 

00:11:07.070 --> 00:11:08.500
library to capture that tent and verify
that it was the one that we wanted sent

00:11:08.500 --> 00:11:08.510
that it was the one that we wanted sent
 

00:11:08.510 --> 00:11:12.670
that it was the one that we wanted sent
to the system notice here but a Twila

00:11:12.670 --> 00:11:12.680
to the system notice here but a Twila
 

00:11:12.680 --> 00:11:14.800
to the system notice here but a Twila
test has many similar structures to

00:11:14.800 --> 00:11:14.810
test has many similar structures to
 

00:11:14.810 --> 00:11:17.110
test has many similar structures to
robolectric test the example that we saw

00:11:17.110 --> 00:11:17.120
robolectric test the example that we saw
 

00:11:17.120 --> 00:11:19.600
robolectric test the example that we saw
earlier the syntax is very very

00:11:19.600 --> 00:11:19.610
earlier the syntax is very very
 

00:11:19.610 --> 00:11:25.810
earlier the syntax is very very
different so while each of these testing

00:11:25.810 --> 00:11:25.820
different so while each of these testing
 

00:11:25.820 --> 00:11:27.970
different so while each of these testing
frameworks have contrasting strengths

00:11:27.970 --> 00:11:27.980
frameworks have contrasting strengths
 

00:11:27.980 --> 00:11:30.490
frameworks have contrasting strengths
and weaknesses it's this explosion of

00:11:30.490 --> 00:11:30.500
and weaknesses it's this explosion of
 

00:11:30.500 --> 00:11:31.900
and weaknesses it's this explosion of
styles that's really become the big

00:11:31.900 --> 00:11:31.910
styles that's really become the big
 

00:11:31.910 --> 00:11:35.410
styles that's really become the big
problem for writing tests who in the

00:11:35.410 --> 00:11:35.420
problem for writing tests who in the
 

00:11:35.420 --> 00:11:37.300
problem for writing tests who in the
audience has been using robolectric to

00:11:37.300 --> 00:11:37.310
audience has been using robolectric to
 

00:11:37.310 --> 00:11:37.870
audience has been using robolectric to
write tests

00:11:37.870 --> 00:11:37.880
write tests
 

00:11:37.880 --> 00:11:41.820
write tests
raise your hands and what about espresso

00:11:41.820 --> 00:11:41.830
raise your hands and what about espresso
 

00:11:41.830 --> 00:11:49.630
raise your hands and what about espresso
and who's using both we often hear

00:11:49.630 --> 00:11:49.640
and who's using both we often hear
 

00:11:49.640 --> 00:11:51.880
and who's using both we often hear
developers talking about I need to write

00:11:51.880 --> 00:11:51.890
developers talking about I need to write
 

00:11:51.890 --> 00:11:54.340
developers talking about I need to write
a robolectric test or I need an espresso

00:11:54.340 --> 00:11:54.350
a robolectric test or I need an espresso
 

00:11:54.350 --> 00:11:56.950
a robolectric test or I need an espresso
test but we'd much rather you be

00:11:56.950 --> 00:11:56.960
test but we'd much rather you be
 

00:11:56.960 --> 00:11:58.750
test but we'd much rather you be
thinking about writing an Android test

00:11:58.750 --> 00:11:58.760
thinking about writing an Android test
 

00:11:58.760 --> 00:12:02.590
thinking about writing an Android test
instead we feel as a developer that no

00:12:02.590 --> 00:12:02.600
instead we feel as a developer that no
 

00:12:02.600 --> 00:12:04.150
instead we feel as a developer that no
matter what kind of test you're writing

00:12:04.150 --> 00:12:04.160
matter what kind of test you're writing
 

00:12:04.160 --> 00:12:05.710
matter what kind of test you're writing
you shouldn't first have to think about

00:12:05.710 --> 00:12:05.720
you shouldn't first have to think about
 

00:12:05.720 --> 00:12:07.930
you shouldn't first have to think about
environments and tools and libraries

00:12:07.930 --> 00:12:07.940
environments and tools and libraries
 

00:12:07.940 --> 00:12:10.690
environments and tools and libraries
that you'll need we believe that you

00:12:10.690 --> 00:12:10.700
that you'll need we believe that you
 

00:12:10.700 --> 00:12:12.370
that you'll need we believe that you
shouldn't have to suffer the mental load

00:12:12.370 --> 00:12:12.380
shouldn't have to suffer the mental load
 

00:12:12.380 --> 00:12:14.560
shouldn't have to suffer the mental load
of having to learn multiple sets of

00:12:14.560 --> 00:12:14.570
of having to learn multiple sets of
 

00:12:14.570 --> 00:12:19.140
of having to learn multiple sets of
api's for doing exactly the same thing

00:12:19.140 --> 00:12:19.150
 

00:12:19.150 --> 00:12:23.200
so and of course you should have the

00:12:23.200 --> 00:12:23.210
so and of course you should have the
 

00:12:23.210 --> 00:12:25.390
so and of course you should have the
freedom to refactor and reuse your code

00:12:25.390 --> 00:12:25.400
freedom to refactor and reuse your code
 

00:12:25.400 --> 00:12:30.160
freedom to refactor and reuse your code
no matter where you choose to run it so

00:12:30.160 --> 00:12:30.170
no matter where you choose to run it so
 

00:12:30.170 --> 00:12:32.620
no matter where you choose to run it so
what if there was only one set of API is

00:12:32.620 --> 00:12:32.630
what if there was only one set of API is
 

00:12:32.630 --> 00:12:35.740
what if there was only one set of API is
that you needed to learn and now imagine

00:12:35.740 --> 00:12:35.750
that you needed to learn and now imagine
 

00:12:35.750 --> 00:12:37.960
that you needed to learn and now imagine
also being freedom to focus on writing

00:12:37.960 --> 00:12:37.970
also being freedom to focus on writing
 

00:12:37.970 --> 00:12:40.000
also being freedom to focus on writing
your tests rather than considering those

00:12:40.000 --> 00:12:40.010
your tests rather than considering those
 

00:12:40.010 --> 00:12:46.660
your tests rather than considering those
tools and libraries and environments

00:12:46.660 --> 00:12:46.670
 

00:12:46.670 --> 00:12:50.140
well to make this a reality today we're

00:12:50.140 --> 00:12:50.150
well to make this a reality today we're
 

00:12:50.150 --> 00:12:53.470
well to make this a reality today we're
launching android test it's part of

00:12:53.470 --> 00:12:53.480
launching android test it's part of
 

00:12:53.480 --> 00:12:57.250
launching android test it's part of
jetpack with jetpack testing is now a

00:12:57.250 --> 00:12:57.260
jetpack with jetpack testing is now a
 

00:12:57.260 --> 00:12:58.960
jetpack with jetpack testing is now a
first-class citizen of the Android tool

00:12:58.960 --> 00:12:58.970
first-class citizen of the Android tool
 

00:12:58.970 --> 00:13:01.990
first-class citizen of the Android tool
chain will unifying the development

00:13:01.990 --> 00:13:02.000
chain will unifying the development
 

00:13:02.000 --> 00:13:04.210
chain will unifying the development
experience around a canonical high

00:13:04.210 --> 00:13:04.220
experience around a canonical high
 

00:13:04.220 --> 00:13:06.520
experience around a canonical high
quality set of api's that will reduce

00:13:06.520 --> 00:13:06.530
quality set of api's that will reduce
 

00:13:06.530 --> 00:13:08.980
quality set of api's that will reduce
the boilerplate and eliminate the number

00:13:08.980 --> 00:13:08.990
the boilerplate and eliminate the number
 

00:13:08.990 --> 00:13:10.890
the boilerplate and eliminate the number
of tools that you need to learn

00:13:10.890 --> 00:13:10.900
of tools that you need to learn
 

00:13:10.900 --> 00:13:14.260
of tools that you need to learn
naturally Kotlin in support is included

00:13:14.260 --> 00:13:14.270
naturally Kotlin in support is included
 

00:13:14.270 --> 00:13:15.610
naturally Kotlin in support is included
allowing you to write beautifully

00:13:15.610 --> 00:13:15.620
allowing you to write beautifully
 

00:13:15.620 --> 00:13:19.120
allowing you to write beautifully
concise tests and of course all of this

00:13:19.120 --> 00:13:19.130
concise tests and of course all of this
 

00:13:19.130 --> 00:13:20.320
concise tests and of course all of this
will be open sourced

00:13:20.320 --> 00:13:20.330
will be open sourced
 

00:13:20.330 --> 00:13:22.330
will be open sourced
we love contributions from our community

00:13:22.330 --> 00:13:22.340
we love contributions from our community
 

00:13:22.340 --> 00:13:27.160
we love contributions from our community
members we're going to satisfy

00:13:27.160 --> 00:13:27.170
members we're going to satisfy
 

00:13:27.170 --> 00:13:29.410
members we're going to satisfy
developers needs in each of the four key

00:13:29.410 --> 00:13:29.420
developers needs in each of the four key
 

00:13:29.420 --> 00:13:30.610
developers needs in each of the four key
sections of a test

00:13:30.610 --> 00:13:30.620
sections of a test
 

00:13:30.620 --> 00:13:36.150
sections of a test
remember scaffolding given when and then

00:13:36.150 --> 00:13:36.160
remember scaffolding given when and then
 

00:13:36.160 --> 00:13:38.020
remember scaffolding given when and then
scaffolding encompasses the

00:13:38.020 --> 00:13:38.030
scaffolding encompasses the
 

00:13:38.030 --> 00:13:40.690
scaffolding encompasses the
configuration and control api's think

00:13:40.690 --> 00:13:40.700
configuration and control api's think
 

00:13:40.700 --> 00:13:41.940
configuration and control api's think
getting a hold of that application

00:13:41.940 --> 00:13:41.950
getting a hold of that application
 

00:13:41.950 --> 00:13:46.480
getting a hold of that application
context for your test scaffolding

00:13:46.480 --> 00:13:46.490
context for your test scaffolding
 

00:13:46.490 --> 00:13:48.520
context for your test scaffolding
Android j-unit foreigners used to

00:13:48.520 --> 00:13:48.530
Android j-unit foreigners used to
 

00:13:48.530 --> 00:13:50.830
Android j-unit foreigners used to
execute your tests you can use the

00:13:50.830 --> 00:13:50.840
execute your tests you can use the
 

00:13:50.840 --> 00:13:52.600
execute your tests you can use the
instrumentation registry to get a handle

00:13:52.600 --> 00:13:52.610
instrumentation registry to get a handle
 

00:13:52.610 --> 00:13:55.720
instrumentation registry to get a handle
to that application context well today

00:13:55.720 --> 00:13:55.730
to that application context well today
 

00:13:55.730 --> 00:13:57.700
to that application context well today
we're excited to announce for the very

00:13:57.700 --> 00:13:57.710
we're excited to announce for the very
 

00:13:57.710 --> 00:14:00.070
we're excited to announce for the very
first time you can now use these api's

00:14:00.070 --> 00:14:00.080
first time you can now use these api's
 

00:14:00.080 --> 00:14:06.630
first time you can now use these api's
for both your on and off device tests

00:14:06.630 --> 00:14:06.640
 

00:14:06.640 --> 00:14:09.520
the next section of a test is the given

00:14:09.520 --> 00:14:09.530
the next section of a test is the given
 

00:14:09.530 --> 00:14:11.440
the next section of a test is the given
section and here we're going to provide

00:14:11.440 --> 00:14:11.450
section and here we're going to provide
 

00:14:11.450 --> 00:14:14.520
section and here we're going to provide
two key categories of api's for you

00:14:14.520 --> 00:14:14.530
two key categories of api's for you
 

00:14:14.530 --> 00:14:17.800
two key categories of api's for you
firstly the under Jamiat rules from the

00:14:17.800 --> 00:14:17.810
firstly the under Jamiat rules from the
 

00:14:17.810 --> 00:14:19.480
firstly the under Jamiat rules from the
Android testing support library will

00:14:19.480 --> 00:14:19.490
Android testing support library will
 

00:14:19.490 --> 00:14:21.700
Android testing support library will
become part of jetpack and will soon

00:14:21.700 --> 00:14:21.710
become part of jetpack and will soon
 

00:14:21.710 --> 00:14:23.680
become part of jetpack and will soon
adding more api's to help drive the

00:14:23.680 --> 00:14:23.690
adding more api's to help drive the
 

00:14:23.690 --> 00:14:27.240
adding more api's to help drive the
component life cycles for you in tests

00:14:27.240 --> 00:14:27.250
component life cycles for you in tests
 

00:14:27.250 --> 00:14:30.370
component life cycles for you in tests
as you've seen previously the activity

00:14:30.370 --> 00:14:30.380
as you've seen previously the activity
 

00:14:30.380 --> 00:14:32.050
as you've seen previously the activity
tests for all is used to start up your

00:14:32.050 --> 00:14:32.060
tests for all is used to start up your
 

00:14:32.060 --> 00:14:33.640
tests for all is used to start up your
activity and make it available to your

00:14:33.640 --> 00:14:33.650
activity and make it available to your
 

00:14:33.650 --> 00:14:35.710
activity and make it available to your
tests in the resume state you probably

00:14:35.710 --> 00:14:35.720
tests in the resume state you probably
 

00:14:35.720 --> 00:14:38.590
tests in the resume state you probably
use this API running on a device many

00:14:38.590 --> 00:14:38.600
use this API running on a device many
 

00:14:38.600 --> 00:14:41.620
use this API running on a device many
times before well today this API too

00:14:41.620 --> 00:14:41.630
times before well today this API too
 

00:14:41.630 --> 00:14:43.810
times before well today this API too
will be available for tests that run off

00:14:43.810 --> 00:14:43.820
will be available for tests that run off
 

00:14:43.820 --> 00:14:50.170
will be available for tests that run off
device as well secondly we'll be

00:14:50.170 --> 00:14:50.180
device as well secondly we'll be
 

00:14:50.180 --> 00:14:52.090
device as well secondly we'll be
providing you with a set of Android test

00:14:52.090 --> 00:14:52.100
providing you with a set of Android test
 

00:14:52.100 --> 00:14:54.550
providing you with a set of Android test
data builders these will help you

00:14:54.550 --> 00:14:54.560
data builders these will help you
 

00:14:54.560 --> 00:14:56.560
data builders these will help you
construct Android objects that your code

00:14:56.560 --> 00:14:56.570
construct Android objects that your code
 

00:14:56.570 --> 00:15:00.130
construct Android objects that your code
on the test will interact with

00:15:00.130 --> 00:15:00.140
 

00:15:00.140 --> 00:15:02.210
many of the android framework classes

00:15:02.210 --> 00:15:02.220
many of the android framework classes
 

00:15:02.220 --> 00:15:04.070
many of the android framework classes
that you need to have for setting up

00:15:04.070 --> 00:15:04.080
that you need to have for setting up
 

00:15:04.080 --> 00:15:06.880
that you need to have for setting up
your test date are difficult to create

00:15:06.880 --> 00:15:06.890
your test date are difficult to create
 

00:15:06.890 --> 00:15:09.530
your test date are difficult to create
often there's no public constructor so

00:15:09.530 --> 00:15:09.540
often there's no public constructor so
 

00:15:09.540 --> 00:15:11.120
often there's no public constructor so
they can't be instantiated for tests

00:15:11.120 --> 00:15:11.130
they can't be instantiated for tests
 

00:15:11.130 --> 00:15:13.490
they can't be instantiated for tests
perhaps their final so mocking is out of

00:15:13.490 --> 00:15:13.500
perhaps their final so mocking is out of
 

00:15:13.500 --> 00:15:15.560
perhaps their final so mocking is out of
the question either and sometimes they

00:15:15.560 --> 00:15:15.570
the question either and sometimes they
 

00:15:15.570 --> 00:15:17.480
the question either and sometimes they
just plain clumsy to instantiate with

00:15:17.480 --> 00:15:17.490
just plain clumsy to instantiate with
 

00:15:17.490 --> 00:15:20.390
just plain clumsy to instantiate with
any degree of brevity at all so we're

00:15:20.390 --> 00:15:20.400
any degree of brevity at all so we're
 

00:15:20.400 --> 00:15:22.490
any degree of brevity at all so we're
including Android test builders within

00:15:22.490 --> 00:15:22.500
including Android test builders within
 

00:15:22.500 --> 00:15:24.740
including Android test builders within
jetpack to give you a concise way to set

00:15:24.740 --> 00:15:24.750
jetpack to give you a concise way to set
 

00:15:24.750 --> 00:15:27.500
jetpack to give you a concise way to set
up your test environment they produce

00:15:27.500 --> 00:15:27.510
up your test environment they produce
 

00:15:27.510 --> 00:15:29.720
up your test environment they produce
readable code they're fluent way to

00:15:29.720 --> 00:15:29.730
readable code they're fluent way to
 

00:15:29.730 --> 00:15:31.160
readable code they're fluent way to
create the Android components that you

00:15:31.160 --> 00:15:31.170
create the Android components that you
 

00:15:31.170 --> 00:15:33.620
create the Android components that you
need to interact with and of course

00:15:33.620 --> 00:15:33.630
need to interact with and of course
 

00:15:33.630 --> 00:15:35.960
need to interact with and of course
they're portable Android test data

00:15:35.960 --> 00:15:35.970
they're portable Android test data
 

00:15:35.970 --> 00:15:38.120
they're portable Android test data
builders work for both your on and off

00:15:38.120 --> 00:15:38.130
builders work for both your on and off
 

00:15:38.130 --> 00:15:44.180
builders work for both your on and off
device use cases the third section of a

00:15:44.180 --> 00:15:44.190
device use cases the third section of a
 

00:15:44.190 --> 00:15:46.280
device use cases the third section of a
well-structured test is the when section

00:15:46.280 --> 00:15:46.290
well-structured test is the when section
 

00:15:46.290 --> 00:15:49.340
well-structured test is the when section
exercising the code under tests usually

00:15:49.340 --> 00:15:49.350
exercising the code under tests usually
 

00:15:49.350 --> 00:15:51.290
exercising the code under tests usually
this is just simply a case of calling

00:15:51.290 --> 00:15:51.300
this is just simply a case of calling
 

00:15:51.300 --> 00:15:53.390
this is just simply a case of calling
your own code directly but when you're

00:15:53.390 --> 00:15:53.400
your own code directly but when you're
 

00:15:53.400 --> 00:15:55.670
your own code directly but when you're
writing a UI test it's likely that you'd

00:15:55.670 --> 00:15:55.680
writing a UI test it's likely that you'd
 

00:15:55.680 --> 00:15:57.650
writing a UI test it's likely that you'd
write for the reach for the espresso

00:15:57.650 --> 00:15:57.660
write for the reach for the espresso
 

00:15:57.660 --> 00:16:01.550
write for the reach for the espresso
view match your api's today we're happy

00:16:01.550 --> 00:16:01.560
view match your api's today we're happy
 

00:16:01.560 --> 00:16:03.890
view match your api's today we're happy
to announce that espresso 2 is joining

00:16:03.890 --> 00:16:03.900
to announce that espresso 2 is joining
 

00:16:03.900 --> 00:16:09.530
to announce that espresso 2 is joining
Android test jetpack espresso view API

00:16:09.530 --> 00:16:09.540
Android test jetpack espresso view API
 

00:16:09.540 --> 00:16:11.329
Android test jetpack espresso view API
is a fluent and they read beautifully

00:16:11.329 --> 00:16:11.339
is a fluent and they read beautifully
 

00:16:11.339 --> 00:16:13.579
is a fluent and they read beautifully
you've used them for you're off on

00:16:13.579 --> 00:16:13.589
you've used them for you're off on
 

00:16:13.589 --> 00:16:16.370
you've used them for you're off on
device tests for a while now and today

00:16:16.370 --> 00:16:16.380
device tests for a while now and today
 

00:16:16.380 --> 00:16:18.800
device tests for a while now and today
we're providing preliminary support for

00:16:18.800 --> 00:16:18.810
we're providing preliminary support for
 

00:16:18.810 --> 00:16:20.630
we're providing preliminary support for
these tests in the off device use case

00:16:20.630 --> 00:16:20.640
these tests in the off device use case
 

00:16:20.640 --> 00:16:26.360
these tests in the off device use case
also the final part of a well structured

00:16:26.360 --> 00:16:26.370
also the final part of a well structured
 

00:16:26.370 --> 00:16:29.420
also the final part of a well structured
test is a Ven section this is where you

00:16:29.420 --> 00:16:29.430
test is a Ven section this is where you
 

00:16:29.430 --> 00:16:30.800
test is a Ven section this is where you
make assertions on the state of the

00:16:30.800 --> 00:16:30.810
make assertions on the state of the
 

00:16:30.810 --> 00:16:34.460
make assertions on the state of the
system in response to an action so

00:16:34.460 --> 00:16:34.470
system in response to an action so
 

00:16:34.470 --> 00:16:36.800
system in response to an action so
firstly espresso intense two is going to

00:16:36.800 --> 00:16:36.810
firstly espresso intense two is going to
 

00:16:36.810 --> 00:16:40.040
firstly espresso intense two is going to
be joining jetpack as Android test

00:16:40.040 --> 00:16:40.050
be joining jetpack as Android test
 

00:16:40.050 --> 00:16:45.290
be joining jetpack as Android test
intense those intense ap is that you've

00:16:45.290 --> 00:16:45.300
intense those intense ap is that you've
 

00:16:45.300 --> 00:16:46.910
intense those intense ap is that you've
been using for your on device testing

00:16:46.910 --> 00:16:46.920
been using for your on device testing
 

00:16:46.920 --> 00:16:50.300
been using for your on device testing
great news today they too will run in

00:16:50.300 --> 00:16:50.310
great news today they too will run in
 

00:16:50.310 --> 00:16:56.600
great news today they too will run in
your off device tests and finally we're

00:16:56.600 --> 00:16:56.610
your off device tests and finally we're
 

00:16:56.610 --> 00:16:59.000
your off device tests and finally we're
also releasing an assertions library to

00:16:59.000 --> 00:16:59.010
also releasing an assertions library to
 

00:16:59.010 --> 00:17:00.560
also releasing an assertions library to
help reduce the boilerplate in your

00:17:00.560 --> 00:17:00.570
help reduce the boilerplate in your
 

00:17:00.570 --> 00:17:03.380
help reduce the boilerplate in your
tests

00:17:03.380 --> 00:17:03.390
 

00:17:03.390 --> 00:17:05.569
using traditional Jay Manette assertions

00:17:05.569 --> 00:17:05.579
using traditional Jay Manette assertions
 

00:17:05.579 --> 00:17:06.829
using traditional Jay Manette assertions
can lead to tests that are not

00:17:06.829 --> 00:17:06.839
can lead to tests that are not
 

00:17:06.839 --> 00:17:09.289
can lead to tests that are not
immediately readable see here how easy

00:17:09.289 --> 00:17:09.299
immediately readable see here how easy
 

00:17:09.299 --> 00:17:11.329
immediately readable see here how easy
it is to get the actual in the expected

00:17:11.329 --> 00:17:11.339
it is to get the actual in the expected
 

00:17:11.339 --> 00:17:15.140
it is to get the actual in the expected
arguments mixed up an Android uses a lot

00:17:15.140 --> 00:17:15.150
arguments mixed up an Android uses a lot
 

00:17:15.150 --> 00:17:18.710
arguments mixed up an Android uses a lot
of integer constants for efficiency but

00:17:18.710 --> 00:17:18.720
of integer constants for efficiency but
 

00:17:18.720 --> 00:17:20.329
of integer constants for efficiency but
this makes it difficult to comprehend

00:17:20.329 --> 00:17:20.339
this makes it difficult to comprehend
 

00:17:20.339 --> 00:17:25.039
this makes it difficult to comprehend
the error messages in tests at Google we

00:17:25.039 --> 00:17:25.049
the error messages in tests at Google we
 

00:17:25.049 --> 00:17:27.439
the error messages in tests at Google we
love to use truth it's our own open

00:17:27.439 --> 00:17:27.449
love to use truth it's our own open
 

00:17:27.449 --> 00:17:31.150
love to use truth it's our own open
source fluent testing assertions library

00:17:31.150 --> 00:17:31.160
source fluent testing assertions library
 

00:17:31.160 --> 00:17:33.530
source fluent testing assertions library
using a fluent assertions library is a

00:17:33.530 --> 00:17:33.540
using a fluent assertions library is a
 

00:17:33.540 --> 00:17:35.180
using a fluent assertions library is a
great step to producing more readable

00:17:35.180 --> 00:17:35.190
great step to producing more readable
 

00:17:35.190 --> 00:17:37.789
great step to producing more readable
code and writing the tests become much

00:17:37.789 --> 00:17:37.799
code and writing the tests become much
 

00:17:37.799 --> 00:17:39.680
code and writing the tests become much
more easy too because you can lean on

00:17:39.680 --> 00:17:39.690
more easy too because you can lean on
 

00:17:39.690 --> 00:17:42.200
more easy too because you can lean on
the built-in support of your ideas Auto

00:17:42.200 --> 00:17:42.210
the built-in support of your ideas Auto
 

00:17:42.210 --> 00:17:46.430
the built-in support of your ideas Auto
completion feature so to help you write

00:17:46.430 --> 00:17:46.440
completion feature so to help you write
 

00:17:46.440 --> 00:17:49.640
completion feature so to help you write
concise tests against Android code we'll

00:17:49.640 --> 00:17:49.650
concise tests against Android code we'll
 

00:17:49.650 --> 00:17:51.260
concise tests against Android code we'll
be releasing a set of truth extensions

00:17:51.260 --> 00:17:51.270
be releasing a set of truth extensions
 

00:17:51.270 --> 00:17:52.760
be releasing a set of truth extensions
for Android which reduces the

00:17:52.760 --> 00:17:52.770
for Android which reduces the
 

00:17:52.770 --> 00:17:55.549
for Android which reduces the
boilerplate read beautifully and gives

00:17:55.549 --> 00:17:55.559
boilerplate read beautifully and gives
 

00:17:55.559 --> 00:17:58.270
boilerplate read beautifully and gives
immediately meaningful error messages of

00:17:58.270 --> 00:17:58.280
immediately meaningful error messages of
 

00:17:58.280 --> 00:18:01.280
immediately meaningful error messages of
course these assertions will work across

00:18:01.280 --> 00:18:01.290
course these assertions will work across
 

00:18:01.290 --> 00:18:04.039
course these assertions will work across
all environments both neon and off

00:18:04.039 --> 00:18:04.049
all environments both neon and off
 

00:18:04.049 --> 00:18:11.630
all environments both neon and off
device tests so with jetpack Android

00:18:11.630 --> 00:18:11.640
device tests so with jetpack Android
 

00:18:11.640 --> 00:18:13.820
device tests so with jetpack Android
tests we'll be bringing you the tools

00:18:13.820 --> 00:18:13.830
tests we'll be bringing you the tools
 

00:18:13.830 --> 00:18:15.260
tests we'll be bringing you the tools
that you need so that you can

00:18:15.260 --> 00:18:15.270
that you need so that you can
 

00:18:15.270 --> 00:18:16.909
that you need so that you can
concentrate on writing beautifully

00:18:16.909 --> 00:18:16.919
concentrate on writing beautifully
 

00:18:16.919 --> 00:18:20.030
concentrate on writing beautifully
concise easy to read tests without first

00:18:20.030 --> 00:18:20.040
concise easy to read tests without first
 

00:18:20.040 --> 00:18:22.310
concise easy to read tests without first
worrying about libraries or tools or

00:18:22.310 --> 00:18:22.320
worrying about libraries or tools or
 

00:18:22.320 --> 00:18:25.220
worrying about libraries or tools or
environments a single set of canonical

00:18:25.220 --> 00:18:25.230
environments a single set of canonical
 

00:18:25.230 --> 00:18:28.340
environments a single set of canonical
api's for common tasks that will reduce

00:18:28.340 --> 00:18:28.350
api's for common tasks that will reduce
 

00:18:28.350 --> 00:18:30.620
api's for common tasks that will reduce
the boilerplate leaving your test clear

00:18:30.620 --> 00:18:30.630
the boilerplate leaving your test clear
 

00:18:30.630 --> 00:18:33.049
the boilerplate leaving your test clear
and readable and a very environmentally

00:18:33.049 --> 00:18:33.059
and readable and a very environmentally
 

00:18:33.059 --> 00:18:35.299
and readable and a very environmentally
agnostic allowing you to run the test

00:18:35.299 --> 00:18:35.309
agnostic allowing you to run the test
 

00:18:35.309 --> 00:18:37.159
agnostic allowing you to run the test
either on device on your local

00:18:37.159 --> 00:18:37.169
either on device on your local
 

00:18:37.169 --> 00:18:39.650
either on device on your local
workstation or perhaps in a cloud test

00:18:39.650 --> 00:18:39.660
workstation or perhaps in a cloud test
 

00:18:39.660 --> 00:18:43.010
workstation or perhaps in a cloud test
lab and now that I've shown you how to

00:18:43.010 --> 00:18:43.020
lab and now that I've shown you how to
 

00:18:43.020 --> 00:18:45.500
lab and now that I've shown you how to
use this unified set of api's that

00:18:45.500 --> 00:18:45.510
use this unified set of api's that
 

00:18:45.510 --> 00:18:47.419
use this unified set of api's that
decouple the act of actually writing a

00:18:47.419 --> 00:18:47.429
decouple the act of actually writing a
 

00:18:47.429 --> 00:18:49.760
decouple the act of actually writing a
test from where it's going to run I'll

00:18:49.760 --> 00:18:49.770
test from where it's going to run I'll
 

00:18:49.770 --> 00:18:51.560
test from where it's going to run I'll
hand you over to my colleague Stefan

00:18:51.560 --> 00:18:51.570
hand you over to my colleague Stefan
 

00:18:51.570 --> 00:18:53.870
hand you over to my colleague Stefan
who's going to show you how you can run

00:18:53.870 --> 00:18:53.880
who's going to show you how you can run
 

00:18:53.880 --> 00:18:56.200
who's going to show you how you can run
these tests in the new simplified world

00:18:56.200 --> 00:18:56.210
these tests in the new simplified world
 

00:18:56.210 --> 00:18:58.390
these tests in the new simplified world
Stefan

00:18:58.390 --> 00:18:58.400
Stefan
 

00:18:58.400 --> 00:19:07.230
Stefan
[Applause]

00:19:07.230 --> 00:19:07.240
[Applause]
 

00:19:07.240 --> 00:19:13.120
[Applause]
Thank You Jonathan welcome everyone ten

00:19:13.120 --> 00:19:13.130
Thank You Jonathan welcome everyone ten
 

00:19:13.130 --> 00:19:16.660
Thank You Jonathan welcome everyone ten
years entered quite amazing I also want

00:19:16.660 --> 00:19:16.670
years entered quite amazing I also want
 

00:19:16.670 --> 00:19:19.450
years entered quite amazing I also want
to say a big welcome to everybody who is

00:19:19.450 --> 00:19:19.460
to say a big welcome to everybody who is
 

00:19:19.460 --> 00:19:22.330
to say a big welcome to everybody who is
joining us at the livestream today at

00:19:22.330 --> 00:19:22.340
joining us at the livestream today at
 

00:19:22.340 --> 00:19:27.190
joining us at the livestream today at
Google we believe that testing should be

00:19:27.190 --> 00:19:27.200
Google we believe that testing should be
 

00:19:27.200 --> 00:19:28.840
Google we believe that testing should be
a fundamental part of your app

00:19:28.840 --> 00:19:28.850
a fundamental part of your app
 

00:19:28.850 --> 00:19:32.230
a fundamental part of your app
development strategy let's bring back

00:19:32.230 --> 00:19:32.240
development strategy let's bring back
 

00:19:32.240 --> 00:19:36.850
development strategy let's bring back
the pyramid as we can see our friend

00:19:36.850 --> 00:19:36.860
the pyramid as we can see our friend
 

00:19:36.860 --> 00:19:39.400
the pyramid as we can see our friend
with the chat pack has solved the API

00:19:39.400 --> 00:19:39.410
with the chat pack has solved the API
 

00:19:39.410 --> 00:19:44.290
with the chat pack has solved the API
dilemma now that we got one API to rule

00:19:44.290 --> 00:19:44.300
dilemma now that we got one API to rule
 

00:19:44.300 --> 00:19:47.500
dilemma now that we got one API to rule
them all it's really easy to start

00:19:47.500 --> 00:19:47.510
them all it's really easy to start
 

00:19:47.510 --> 00:19:49.960
them all it's really easy to start
writing tests for Android no more

00:19:49.960 --> 00:19:49.970
writing tests for Android no more
 

00:19:49.970 --> 00:19:53.890
writing tests for Android no more
excuses we can start with a simple test

00:19:53.890 --> 00:19:53.900
excuses we can start with a simple test
 

00:19:53.900 --> 00:19:57.250
excuses we can start with a simple test
for our business logic usually a unit

00:19:57.250 --> 00:19:57.260
for our business logic usually a unit
 

00:19:57.260 --> 00:20:00.190
for our business logic usually a unit
test and over time we can add more and

00:20:00.190 --> 00:20:00.200
test and over time we can add more and
 

00:20:00.200 --> 00:20:03.220
test and over time we can add more and
more tests once we start implementing

00:20:03.220 --> 00:20:03.230
more tests once we start implementing
 

00:20:03.230 --> 00:20:06.790
more tests once we start implementing
the UI for our application it might be

00:20:06.790 --> 00:20:06.800
the UI for our application it might be
 

00:20:06.800 --> 00:20:10.480
the UI for our application it might be
worth adding an integration test this

00:20:10.480 --> 00:20:10.490
worth adding an integration test this
 

00:20:10.490 --> 00:20:14.200
worth adding an integration test this
chest became a fluent experience since

00:20:14.200 --> 00:20:14.210
chest became a fluent experience since
 

00:20:14.210 --> 00:20:19.150
chest became a fluent experience since
both layers support the same api's no

00:20:19.150 --> 00:20:19.160
both layers support the same api's no
 

00:20:19.160 --> 00:20:23.680
both layers support the same api's no
more context switching great but that's

00:20:23.680 --> 00:20:23.690
more context switching great but that's
 

00:20:23.690 --> 00:20:26.500
more context switching great but that's
not the only use case where the new API

00:20:26.500 --> 00:20:26.510
not the only use case where the new API
 

00:20:26.510 --> 00:20:30.130
not the only use case where the new API
became really handy let's imagine we

00:20:30.130 --> 00:20:30.140
became really handy let's imagine we
 

00:20:30.140 --> 00:20:32.710
became really handy let's imagine we
have an integration test I got two large

00:20:32.710 --> 00:20:32.720
have an integration test I got two large
 

00:20:32.720 --> 00:20:37.120
have an integration test I got two large
and complicated I have seen many of

00:20:37.120 --> 00:20:37.130
and complicated I have seen many of
 

00:20:37.130 --> 00:20:40.840
and complicated I have seen many of
those tests it's just too convenient to

00:20:40.840 --> 00:20:40.850
those tests it's just too convenient to
 

00:20:40.850 --> 00:20:44.320
those tests it's just too convenient to
test business logic and UI flow in one

00:20:44.320 --> 00:20:44.330
test business logic and UI flow in one
 

00:20:44.330 --> 00:20:48.400
test business logic and UI flow in one
single test at Google we don't like

00:20:48.400 --> 00:20:48.410
single test at Google we don't like
 

00:20:48.410 --> 00:20:51.400
single test at Google we don't like
those tests they are hard to read and

00:20:51.400 --> 00:20:51.410
those tests they are hard to read and
 

00:20:51.410 --> 00:20:57.070
those tests they are hard to read and
they tend to become flaky small well

00:20:57.070 --> 00:20:57.080
they tend to become flaky small well
 

00:20:57.080 --> 00:21:00.060
they tend to become flaky small well
focused tests are much better

00:21:00.060 --> 00:21:00.070
focused tests are much better
 

00:21:00.070 --> 00:21:03.250
focused tests are much better
so let's refactor this large complicated

00:21:03.250 --> 00:21:03.260
so let's refactor this large complicated
 

00:21:03.260 --> 00:21:07.930
so let's refactor this large complicated
test refactoring a large test can be a

00:21:07.930 --> 00:21:07.940
test refactoring a large test can be a
 

00:21:07.940 --> 00:21:10.890
test refactoring a large test can be a
very painful task

00:21:10.890 --> 00:21:10.900
very painful task
 

00:21:10.900 --> 00:21:13.600
very painful task
Queeny audience has experienced this

00:21:13.600 --> 00:21:13.610
Queeny audience has experienced this
 

00:21:13.610 --> 00:21:16.840
Queeny audience has experienced this
recently raise your hand

00:21:16.840 --> 00:21:16.850
recently raise your hand
 

00:21:16.850 --> 00:21:19.640
recently raise your hand
here's some good news for you if the

00:21:19.640 --> 00:21:19.650
here's some good news for you if the
 

00:21:19.650 --> 00:21:22.490
here's some good news for you if the
original test was written with the new

00:21:22.490 --> 00:21:22.500
original test was written with the new
 

00:21:22.500 --> 00:21:27.260
original test was written with the new
API this test become much simpler we

00:21:27.260 --> 00:21:27.270
API this test become much simpler we
 

00:21:27.270 --> 00:21:30.560
API this test become much simpler we
still have to test our UI and we'll keep

00:21:30.560 --> 00:21:30.570
still have to test our UI and we'll keep
 

00:21:30.570 --> 00:21:34.790
still have to test our UI and we'll keep
this part in the integration test this

00:21:34.790 --> 00:21:34.800
this part in the integration test this
 

00:21:34.800 --> 00:21:37.820
this part in the integration test this
layer provides high fidelity and we

00:21:37.820 --> 00:21:37.830
layer provides high fidelity and we
 

00:21:37.830 --> 00:21:40.810
layer provides high fidelity and we
don't want to lose that for our UI test

00:21:40.810 --> 00:21:40.820
don't want to lose that for our UI test
 

00:21:40.820 --> 00:21:44.450
don't want to lose that for our UI test
the rest mainly business logic can

00:21:44.450 --> 00:21:44.460
the rest mainly business logic can
 

00:21:44.460 --> 00:21:46.810
the rest mainly business logic can
directly go into the unit test layer

00:21:46.810 --> 00:21:46.820
directly go into the unit test layer
 

00:21:46.820 --> 00:21:52.070
directly go into the unit test layer
here we gain speed since we can run off

00:21:52.070 --> 00:21:52.080
here we gain speed since we can run off
 

00:21:52.080 --> 00:21:56.390
here we gain speed since we can run off
device on the local java vm so let's

00:21:56.390 --> 00:21:56.400
device on the local java vm so let's
 

00:21:56.400 --> 00:21:59.240
device on the local java vm so let's
verify the refactoring together we still

00:21:59.240 --> 00:21:59.250
verify the refactoring together we still
 

00:21:59.250 --> 00:22:01.820
verify the refactoring together we still
have high fidelity for the UI test

00:22:01.820 --> 00:22:01.830
have high fidelity for the UI test
 

00:22:01.830 --> 00:22:06.020
have high fidelity for the UI test
that's good we gain speed even better

00:22:06.020 --> 00:22:06.030
that's good we gain speed even better
 

00:22:06.030 --> 00:22:10.370
that's good we gain speed even better
and the tests are decoupled and less

00:22:10.370 --> 00:22:10.380
and the tests are decoupled and less
 

00:22:10.380 --> 00:22:12.860
and the tests are decoupled and less
complex nice job

00:22:12.860 --> 00:22:12.870
complex nice job
 

00:22:12.870 --> 00:22:15.860
complex nice job
your co-workers will thank you so let's

00:22:15.860 --> 00:22:15.870
your co-workers will thank you so let's
 

00:22:15.870 --> 00:22:19.910
your co-workers will thank you so let's
run those tests but wait we still have

00:22:19.910 --> 00:22:19.920
run those tests but wait we still have
 

00:22:19.920 --> 00:22:23.510
run those tests but wait we still have
to choose a random environment it's not

00:22:23.510 --> 00:22:23.520
to choose a random environment it's not
 

00:22:23.520 --> 00:22:27.800
to choose a random environment it's not
obvious trivial to pick the right one we

00:22:27.800 --> 00:22:27.810
obvious trivial to pick the right one we
 

00:22:27.810 --> 00:22:29.570
obvious trivial to pick the right one we
also have to work in multiple source

00:22:29.570 --> 00:22:29.580
also have to work in multiple source
 

00:22:29.580 --> 00:22:32.960
also have to work in multiple source
sets the combination of runtime

00:22:32.960 --> 00:22:32.970
sets the combination of runtime
 

00:22:32.970 --> 00:22:36.560
sets the combination of runtime
environments plus source sets full lead

00:22:36.560 --> 00:22:36.570
environments plus source sets full lead
 

00:22:36.570 --> 00:22:38.950
environments plus source sets full lead
to an explosion of test configurations

00:22:38.950 --> 00:22:38.960
to an explosion of test configurations
 

00:22:38.960 --> 00:22:43.430
to an explosion of test configurations
just imagine how hard it will get to

00:22:43.430 --> 00:22:43.440
just imagine how hard it will get to
 

00:22:43.440 --> 00:22:46.850
just imagine how hard it will get to
choose the right configuration should I

00:22:46.850 --> 00:22:46.860
choose the right configuration should I
 

00:22:46.860 --> 00:22:49.720
choose the right configuration should I
run on a device or offer device and

00:22:49.720 --> 00:22:49.730
run on a device or offer device and
 

00:22:49.730 --> 00:22:52.550
run on a device or offer device and
don't we need to run the entire test

00:22:52.550 --> 00:22:52.560
don't we need to run the entire test
 

00:22:52.560 --> 00:22:54.200
don't we need to run the entire test
suite on our continuous integration

00:22:54.200 --> 00:22:54.210
suite on our continuous integration
 

00:22:54.210 --> 00:22:58.670
suite on our continuous integration
server before we submit and you all know

00:22:58.670 --> 00:22:58.680
server before we submit and you all know
 

00:22:58.680 --> 00:23:01.550
server before we submit and you all know
the feeling I have to be kicked off the

00:23:01.550 --> 00:23:01.560
the feeling I have to be kicked off the
 

00:23:01.560 --> 00:23:05.600
the feeling I have to be kicked off the
test run waiting eagerly for the results

00:23:05.600 --> 00:23:05.610
test run waiting eagerly for the results
 

00:23:05.610 --> 00:23:08.630
test run waiting eagerly for the results
Oh No

00:23:08.630 --> 00:23:08.640
Oh No
 

00:23:08.640 --> 00:23:11.240
Oh No
how to submit one of the test is flaky

00:23:11.240 --> 00:23:11.250
how to submit one of the test is flaky
 

00:23:11.250 --> 00:23:14.840
how to submit one of the test is flaky
i'm pretty sure many of you have been in

00:23:14.840 --> 00:23:14.850
i'm pretty sure many of you have been in
 

00:23:14.850 --> 00:23:19.220
i'm pretty sure many of you have been in
this situation flakiness is one of the

00:23:19.220 --> 00:23:19.230
this situation flakiness is one of the
 

00:23:19.230 --> 00:23:21.710
this situation flakiness is one of the
biggest pain points for developer

00:23:21.710 --> 00:23:21.720
biggest pain points for developer
 

00:23:21.720 --> 00:23:27.290
biggest pain points for developer
productivity so what if there was a

00:23:27.290 --> 00:23:27.300
productivity so what if there was a
 

00:23:27.300 --> 00:23:28.580
productivity so what if there was a
better way

00:23:28.580 --> 00:23:28.590
better way
 

00:23:28.590 --> 00:23:34.190
better way
to set up your test harness execute your

00:23:34.190 --> 00:23:34.200
to set up your test harness execute your
 

00:23:34.200 --> 00:23:37.549
to set up your test harness execute your
tests in a reliable environment with

00:23:37.549 --> 00:23:37.559
tests in a reliable environment with
 

00:23:37.559 --> 00:23:43.940
tests in a reliable environment with
unified test results today we are proud

00:23:43.940 --> 00:23:43.950
unified test results today we are proud
 

00:23:43.950 --> 00:23:47.149
unified test results today we are proud
to announce project nitrogen the new

00:23:47.149 --> 00:23:47.159
to announce project nitrogen the new
 

00:23:47.159 --> 00:23:51.100
to announce project nitrogen the new
single entry point for all Android tests

00:23:51.100 --> 00:23:51.110
single entry point for all Android tests
 

00:23:51.110 --> 00:24:00.320
single entry point for all Android tests
nitrogen is fuel for your jetpacks with

00:24:00.320 --> 00:24:00.330
nitrogen is fuel for your jetpacks with
 

00:24:00.330 --> 00:24:03.500
nitrogen is fuel for your jetpacks with
our expertise of running billions of

00:24:03.500 --> 00:24:03.510
our expertise of running billions of
 

00:24:03.510 --> 00:24:07.010
our expertise of running billions of
tests a year we had to build the fastest

00:24:07.010 --> 00:24:07.020
tests a year we had to build the fastest
 

00:24:07.020 --> 00:24:11.480
tests a year we had to build the fastest
and most reliable test executor nitrogen

00:24:11.480 --> 00:24:11.490
and most reliable test executor nitrogen
 

00:24:11.490 --> 00:24:14.120
and most reliable test executor nitrogen
covers the entire testing lifecycle from

00:24:14.120 --> 00:24:14.130
covers the entire testing lifecycle from
 

00:24:14.130 --> 00:24:18.250
covers the entire testing lifecycle from
set up to test execution and reporting

00:24:18.250 --> 00:24:18.260
set up to test execution and reporting
 

00:24:18.260 --> 00:24:20.840
set up to test execution and reporting
nitrogen provides deterministic behavior

00:24:20.840 --> 00:24:20.850
nitrogen provides deterministic behavior
 

00:24:20.850 --> 00:24:25.610
nitrogen provides deterministic behavior
across different pool systems it will be

00:24:25.610 --> 00:24:25.620
across different pool systems it will be
 

00:24:25.620 --> 00:24:28.930
across different pool systems it will be
fully integrated in Android studio at

00:24:28.930 --> 00:24:28.940
fully integrated in Android studio at
 

00:24:28.940 --> 00:24:32.120
fully integrated in Android studio at
Google we already used nitrogen to test

00:24:32.120 --> 00:24:32.130
Google we already used nitrogen to test
 

00:24:32.130 --> 00:24:37.240
Google we already used nitrogen to test
our own apps such as Gmail google maps

00:24:37.240 --> 00:24:37.250
our own apps such as Gmail google maps
 

00:24:37.250 --> 00:24:43.610
our own apps such as Gmail google maps
photos YouTube and many more nitrogen is

00:24:43.610 --> 00:24:43.620
photos YouTube and many more nitrogen is
 

00:24:43.620 --> 00:24:47.510
photos YouTube and many more nitrogen is
highly extensible it provides api's for

00:24:47.510 --> 00:24:47.520
highly extensible it provides api's for
 

00:24:47.520 --> 00:24:51.320
highly extensible it provides api's for
test authors to customize the test

00:24:51.320 --> 00:24:51.330
test authors to customize the test
 

00:24:51.330 --> 00:24:57.440
test authors to customize the test
invocation at any point nitrogen will be

00:24:57.440 --> 00:24:57.450
invocation at any point nitrogen will be
 

00:24:57.450 --> 00:25:00.740
invocation at any point nitrogen will be
fully open sourced later this year but

00:25:00.740 --> 00:25:00.750
fully open sourced later this year but
 

00:25:00.750 --> 00:25:03.070
fully open sourced later this year but
let me give you an overview

00:25:03.070 --> 00:25:03.080
let me give you an overview
 

00:25:03.080 --> 00:25:06.139
let me give you an overview
starting with setup natural chain

00:25:06.139 --> 00:25:06.149
starting with setup natural chain
 

00:25:06.149 --> 00:25:08.269
starting with setup natural chain
connects your test to any execution

00:25:08.269 --> 00:25:08.279
connects your test to any execution
 

00:25:08.279 --> 00:25:12.080
connects your test to any execution
environment on device of device or in

00:25:12.080 --> 00:25:12.090
environment on device of device or in
 

00:25:12.090 --> 00:25:15.919
environment on device of device or in
the cloud it installs required test

00:25:15.919 --> 00:25:15.929
the cloud it installs required test
 

00:25:15.929 --> 00:25:19.700
the cloud it installs required test
artifacts and if necessary it can run

00:25:19.700 --> 00:25:19.710
artifacts and if necessary it can run
 

00:25:19.710 --> 00:25:24.350
artifacts and if necessary it can run
custom fixture scripts for you let me

00:25:24.350 --> 00:25:24.360
custom fixture scripts for you let me
 

00:25:24.360 --> 00:25:26.930
custom fixture scripts for you let me
show you how this works first natural

00:25:26.930 --> 00:25:26.940
show you how this works first natural
 

00:25:26.940 --> 00:25:31.250
show you how this works first natural
chain finds and provisions a device this

00:25:31.250 --> 00:25:31.260
chain finds and provisions a device this
 

00:25:31.260 --> 00:25:33.200
chain finds and provisions a device this
can either be a simulated device a

00:25:33.200 --> 00:25:33.210
can either be a simulated device a
 

00:25:33.210 --> 00:25:35.899
can either be a simulated device a
virtual device or real device once the

00:25:35.899 --> 00:25:35.909
virtual device or real device once the
 

00:25:35.909 --> 00:25:38.870
virtual device or real device once the
device is ready nitrogen installs the

00:25:38.870 --> 00:25:38.880
device is ready nitrogen installs the
 

00:25:38.880 --> 00:25:40.190
device is ready nitrogen installs the
application

00:25:40.190 --> 00:25:40.200
application
 

00:25:40.200 --> 00:25:44.779
application
under test and the test matrix n stages

00:25:44.779 --> 00:25:44.789
under test and the test matrix n stages
 

00:25:44.789 --> 00:25:47.750
under test and the test matrix n stages
any test data dependencies and sets

00:25:47.750 --> 00:25:47.760
any test data dependencies and sets
 

00:25:47.760 --> 00:25:53.330
any test data dependencies and sets
device properties if additional setup is

00:25:53.330 --> 00:25:53.340
device properties if additional setup is
 

00:25:53.340 --> 00:25:57.620
device properties if additional setup is
necessary it can all be done here let me

00:25:57.620 --> 00:25:57.630
necessary it can all be done here let me
 

00:25:57.630 --> 00:26:00.139
necessary it can all be done here let me
give you examples setting up a network

00:26:00.139 --> 00:26:00.149
give you examples setting up a network
 

00:26:00.149 --> 00:26:03.110
give you examples setting up a network
tunnel starting an emetic server caning

00:26:03.110 --> 00:26:03.120
tunnel starting an emetic server caning
 

00:26:03.120 --> 00:26:06.730
tunnel starting an emetic server caning
granting permissions and much more and

00:26:06.730 --> 00:26:06.740
granting permissions and much more and
 

00:26:06.740 --> 00:26:10.190
granting permissions and much more and
finally it prepares the device for the

00:26:10.190 --> 00:26:10.200
finally it prepares the device for the
 

00:26:10.200 --> 00:26:15.710
finally it prepares the device for the
next step test execution there are many

00:26:15.710 --> 00:26:15.720
next step test execution there are many
 

00:26:15.720 --> 00:26:19.940
next step test execution there are many
ways how we can run an Android test it's

00:26:19.940 --> 00:26:19.950
ways how we can run an Android test it's
 

00:26:19.950 --> 00:26:21.409
ways how we can run an Android test it's
a little bit like running in the real

00:26:21.409 --> 00:26:21.419
a little bit like running in the real
 

00:26:21.419 --> 00:26:26.330
a little bit like running in the real
world here we have Sprint's with

00:26:26.330 --> 00:26:26.340
world here we have Sprint's with
 

00:26:26.340 --> 00:26:29.269
world here we have Sprint's with
distance and long distance runs we also

00:26:29.269 --> 00:26:29.279
distance and long distance runs we also
 

00:26:29.279 --> 00:26:31.549
distance and long distance runs we also
have different environments direct

00:26:31.549 --> 00:26:31.559
have different environments direct
 

00:26:31.559 --> 00:26:35.149
have different environments direct
running Road running cross-country

00:26:35.149 --> 00:26:35.159
running Road running cross-country
 

00:26:35.159 --> 00:26:39.850
running Road running cross-country
running and mountain running a unit test

00:26:39.850 --> 00:26:39.860
running and mountain running a unit test
 

00:26:39.860 --> 00:26:42.620
running and mountain running a unit test
on your local workstation is like a

00:26:42.620 --> 00:26:42.630
on your local workstation is like a
 

00:26:42.630 --> 00:26:46.879
on your local workstation is like a
sprint as fast as possible to the finish

00:26:46.879 --> 00:26:46.889
sprint as fast as possible to the finish
 

00:26:46.889 --> 00:26:50.810
sprint as fast as possible to the finish
line the tests read on your continuous

00:26:50.810 --> 00:26:50.820
line the tests read on your continuous
 

00:26:50.820 --> 00:26:54.169
line the tests read on your continuous
integration server is the marathon the

00:26:54.169 --> 00:26:54.179
integration server is the marathon the
 

00:26:54.179 --> 00:26:57.460
integration server is the marathon the
goal is to get to the finish line and

00:26:57.460 --> 00:26:57.470
goal is to get to the finish line and
 

00:26:57.470 --> 00:27:04.879
goal is to get to the finish line and
not to fail along the way today these

00:27:04.879 --> 00:27:04.889
not to fail along the way today these
 

00:27:04.889 --> 00:27:07.419
not to fail along the way today these
tests are executed in different ways

00:27:07.419 --> 00:27:07.429
tests are executed in different ways
 

00:27:07.429 --> 00:27:10.129
tests are executed in different ways
from the command line from Android

00:27:10.129 --> 00:27:10.139
from the command line from Android
 

00:27:10.139 --> 00:27:13.340
from the command line from Android
studio or triggered automatically when

00:27:13.340 --> 00:27:13.350
studio or triggered automatically when
 

00:27:13.350 --> 00:27:17.899
studio or triggered automatically when
you submit with project nitrogen this

00:27:17.899 --> 00:27:17.909
you submit with project nitrogen this
 

00:27:17.909 --> 00:27:22.610
you submit with project nitrogen this
will become consistent we provide a

00:27:22.610 --> 00:27:22.620
will become consistent we provide a
 

00:27:22.620 --> 00:27:26.180
will become consistent we provide a
valid affiant protocol and our unifying

00:27:26.180 --> 00:27:26.190
valid affiant protocol and our unifying
 

00:27:26.190 --> 00:27:31.250
valid affiant protocol and our unifying
all the Android test offerings natural

00:27:31.250 --> 00:27:31.260
all the Android test offerings natural
 

00:27:31.260 --> 00:27:33.860
all the Android test offerings natural
chain uses our own device infrastructure

00:27:33.860 --> 00:27:33.870
chain uses our own device infrastructure
 

00:27:33.870 --> 00:27:39.620
chain uses our own device infrastructure
to run your tests Android Orchestrator

00:27:39.620 --> 00:27:39.630
to run your tests Android Orchestrator
 

00:27:39.630 --> 00:27:45.769
to run your tests Android Orchestrator
and enrich a unit runner you can already

00:27:45.769 --> 00:27:45.779
and enrich a unit runner you can already
 

00:27:45.779 --> 00:27:48.590
and enrich a unit runner you can already
enable the own device infrastructure

00:27:48.590 --> 00:27:48.600
enable the own device infrastructure
 

00:27:48.600 --> 00:27:51.259
enable the own device infrastructure
today it has been available since

00:27:51.259 --> 00:27:51.269
today it has been available since
 

00:27:51.269 --> 00:27:54.830
today it has been available since
Android studio 3.0

00:27:54.830 --> 00:27:54.840
 

00:27:54.840 --> 00:27:58.850
the orchestrator collects your tests and

00:27:58.850 --> 00:27:58.860
the orchestrator collects your tests and
 

00:27:58.860 --> 00:28:03.780
the orchestrator collects your tests and
kicks off test execution by running each

00:28:03.780 --> 00:28:03.790
kicks off test execution by running each
 

00:28:03.790 --> 00:28:07.770
kicks off test execution by running each
test in a separate process shared state

00:28:07.770 --> 00:28:07.780
test in a separate process shared state
 

00:28:07.780 --> 00:28:13.040
test in a separate process shared state
is minimized and crashes are isolated

00:28:13.040 --> 00:28:13.050
is minimized and crashes are isolated
 

00:28:13.050 --> 00:28:16.920
is minimized and crashes are isolated
moreover your tests are executed in a

00:28:16.920 --> 00:28:16.930
moreover your tests are executed in a
 

00:28:16.930 --> 00:28:20.370
moreover your tests are executed in a
familiar j-unit environment provided by

00:28:20.370 --> 00:28:20.380
familiar j-unit environment provided by
 

00:28:20.380 --> 00:28:25.070
familiar j-unit environment provided by
an original runner the orchestrator

00:28:25.070 --> 00:28:25.080
an original runner the orchestrator
 

00:28:25.080 --> 00:28:28.290
an original runner the orchestrator
collects all test results additional

00:28:28.290 --> 00:28:28.300
collects all test results additional
 

00:28:28.300 --> 00:28:30.480
collects all test results additional
artifacts and streams it back to

00:28:30.480 --> 00:28:30.490
artifacts and streams it back to
 

00:28:30.490 --> 00:28:38.640
artifacts and streams it back to
nitrogen-nitrogen provides a unified

00:28:38.640 --> 00:28:38.650
nitrogen-nitrogen provides a unified
 

00:28:38.650 --> 00:28:40.760
nitrogen-nitrogen provides a unified
reporting format for these test results

00:28:40.760 --> 00:28:40.770
reporting format for these test results
 

00:28:40.770 --> 00:28:45.300
reporting format for these test results
in addition it provides a huge selection

00:28:45.300 --> 00:28:45.310
in addition it provides a huge selection
 

00:28:45.310 --> 00:28:49.040
in addition it provides a huge selection
of test output data such as logcat

00:28:49.040 --> 00:28:49.050
of test output data such as logcat
 

00:28:49.050 --> 00:28:53.250
of test output data such as logcat
screenshots video profiling data battery

00:28:53.250 --> 00:28:53.260
screenshots video profiling data battery
 

00:28:53.260 --> 00:28:57.240
screenshots video profiling data battery
performance and much more all artifacts

00:28:57.240 --> 00:28:57.250
performance and much more all artifacts
 

00:28:57.250 --> 00:29:01.230
performance and much more all artifacts
are scoped per test this means that for

00:29:01.230 --> 00:29:01.240
are scoped per test this means that for
 

00:29:01.240 --> 00:29:05.460
are scoped per test this means that for
example a Lockett snippet is reduced to

00:29:05.460 --> 00:29:05.470
example a Lockett snippet is reduced to
 

00:29:05.470 --> 00:29:09.570
example a Lockett snippet is reduced to
the test method no more digging through

00:29:09.570 --> 00:29:09.580
the test method no more digging through
 

00:29:09.580 --> 00:29:14.340
the test method no more digging through
hundreds of lines of Lockett so let me

00:29:14.340 --> 00:29:14.350
hundreds of lines of Lockett so let me
 

00:29:14.350 --> 00:29:16.740
hundreds of lines of Lockett so let me
show you how nitrogen improves the

00:29:16.740 --> 00:29:16.750
show you how nitrogen improves the
 

00:29:16.750 --> 00:29:20.720
show you how nitrogen improves the
entire testing flow on Android first

00:29:20.720 --> 00:29:20.730
entire testing flow on Android first
 

00:29:20.730 --> 00:29:23.850
entire testing flow on Android first
nitrogen finds the device and configures

00:29:23.850 --> 00:29:23.860
nitrogen finds the device and configures
 

00:29:23.860 --> 00:29:28.410
nitrogen finds the device and configures
it for the test run second it runs tests

00:29:28.410 --> 00:29:28.420
it for the test run second it runs tests
 

00:29:28.420 --> 00:29:32.360
it for the test run second it runs tests
in isolation using the orchestrator and

00:29:32.360 --> 00:29:32.370
in isolation using the orchestrator and
 

00:29:32.370 --> 00:29:37.650
in isolation using the orchestrator and
finally while tests are running nitrogen

00:29:37.650 --> 00:29:37.660
finally while tests are running nitrogen
 

00:29:37.660 --> 00:29:40.110
finally while tests are running nitrogen
host-side infrastructure will be

00:29:40.110 --> 00:29:40.120
host-side infrastructure will be
 

00:29:40.120 --> 00:29:42.390
host-side infrastructure will be
streaming the test results from the

00:29:42.390 --> 00:29:42.400
streaming the test results from the
 

00:29:42.400 --> 00:29:45.870
streaming the test results from the
device pulling down all test output data

00:29:45.870 --> 00:29:45.880
device pulling down all test output data
 

00:29:45.880 --> 00:29:51.420
device pulling down all test output data
and feeding it back to you with nitrogen

00:29:51.420 --> 00:29:51.430
and feeding it back to you with nitrogen
 

00:29:51.430 --> 00:29:56.600
and feeding it back to you with nitrogen
all this complexity is hidden from you

00:29:56.600 --> 00:29:56.610
all this complexity is hidden from you
 

00:29:56.610 --> 00:29:58.890
all this complexity is hidden from you
whether you are running a test on

00:29:58.890 --> 00:29:58.900
whether you are running a test on
 

00:29:58.900 --> 00:30:04.750
whether you are running a test on
Android studio or on a CI server

00:30:04.750 --> 00:30:04.760
Android studio or on a CI server
 

00:30:04.760 --> 00:30:09.050
Android studio or on a CI server
nitrogen is the single entry point for

00:30:09.050 --> 00:30:09.060
nitrogen is the single entry point for
 

00:30:09.060 --> 00:30:13.850
nitrogen is the single entry point for
all Android tests it works from a sprint

00:30:13.850 --> 00:30:13.860
all Android tests it works from a sprint
 

00:30:13.860 --> 00:30:18.740
all Android tests it works from a sprint
to a marathon natural Chen can regress

00:30:18.740 --> 00:30:18.750
to a marathon natural Chen can regress
 

00:30:18.750 --> 00:30:22.090
to a marathon natural Chen can regress
the device in a fire base test lab

00:30:22.090 --> 00:30:22.100
the device in a fire base test lab
 

00:30:22.100 --> 00:30:26.450
the device in a fire base test lab
reliably running your tests returning

00:30:26.450 --> 00:30:26.460
reliably running your tests returning
 

00:30:26.460 --> 00:30:30.770
reliably running your tests returning
unified test results nitrogen supports

00:30:30.770 --> 00:30:30.780
unified test results nitrogen supports
 

00:30:30.780 --> 00:30:35.450
unified test results nitrogen supports
Google Cloud from your workstation you

00:30:35.450 --> 00:30:35.460
Google Cloud from your workstation you
 

00:30:35.460 --> 00:30:38.060
Google Cloud from your workstation you
can deploy and run tests on the real

00:30:38.060 --> 00:30:38.070
can deploy and run tests on the real
 

00:30:38.070 --> 00:30:43.520
can deploy and run tests on the real
device or on a virtual device nitrogen

00:30:43.520 --> 00:30:43.530
device or on a virtual device nitrogen
 

00:30:43.530 --> 00:30:47.150
device or on a virtual device nitrogen
works seamlessly with Rob Electric now

00:30:47.150 --> 00:30:47.160
works seamlessly with Rob Electric now
 

00:30:47.160 --> 00:30:50.060
works seamlessly with Rob Electric now
we can treat Rove electric as a

00:30:50.060 --> 00:30:50.070
we can treat Rove electric as a
 

00:30:50.070 --> 00:30:55.960
we can treat Rove electric as a
simulated device with raw electric 4.0

00:30:55.960 --> 00:30:55.970
simulated device with raw electric 4.0
 

00:30:55.970 --> 00:30:58.970
simulated device with raw electric 4.0
we have made big improvements in

00:30:58.970 --> 00:30:58.980
we have made big improvements in
 

00:30:58.980 --> 00:31:03.560
we have made big improvements in
start-up time and memory consumption raw

00:31:03.560 --> 00:31:03.570
start-up time and memory consumption raw
 

00:31:03.570 --> 00:31:12.180
start-up time and memory consumption raw
electric for bond oil is released today

00:31:12.180 --> 00:31:12.190
 

00:31:12.190 --> 00:31:16.290
and if this is not enough nitrogen

00:31:16.290 --> 00:31:16.300
and if this is not enough nitrogen
 

00:31:16.300 --> 00:31:19.170
and if this is not enough nitrogen
supports your custom needs for example

00:31:19.170 --> 00:31:19.180
supports your custom needs for example
 

00:31:19.180 --> 00:31:26.580
supports your custom needs for example
if you have an in-house device let allow

00:31:26.580 --> 00:31:26.590
if you have an in-house device let allow
 

00:31:26.590 --> 00:31:31.440
if you have an in-house device let allow
me to summarize previously you had to

00:31:31.440 --> 00:31:31.450
me to summarize previously you had to
 

00:31:31.450 --> 00:31:34.020
me to summarize previously you had to
learn multiple approaches for doing the

00:31:34.020 --> 00:31:34.030
learn multiple approaches for doing the
 

00:31:34.030 --> 00:31:39.600
learn multiple approaches for doing the
same thing tools like the mobility to

00:31:39.600 --> 00:31:39.610
same thing tools like the mobility to
 

00:31:39.610 --> 00:31:41.880
same thing tools like the mobility to
move between the layers of the pyramid

00:31:41.880 --> 00:31:41.890
move between the layers of the pyramid
 

00:31:41.890 --> 00:31:51.240
move between the layers of the pyramid
you had to choose wisely we have reduced

00:31:51.240 --> 00:31:51.250
you had to choose wisely we have reduced
 

00:31:51.250 --> 00:31:54.590
you had to choose wisely we have reduced
the cognitive load by providing you a

00:31:54.590 --> 00:31:54.600
the cognitive load by providing you a
 

00:31:54.600 --> 00:31:58.620
the cognitive load by providing you a
single set of api's that work across

00:31:58.620 --> 00:31:58.630
single set of api's that work across
 

00:31:58.630 --> 00:32:02.340
single set of api's that work across
environments for both on and off

00:32:02.340 --> 00:32:02.350
environments for both on and off
 

00:32:02.350 --> 00:32:07.550
environments for both on and off
scenarios and a single entry point for

00:32:07.550 --> 00:32:07.560
scenarios and a single entry point for
 

00:32:07.560 --> 00:32:11.150
scenarios and a single entry point for
Android tests with the flexibility to

00:32:11.150 --> 00:32:11.160
Android tests with the flexibility to
 

00:32:11.160 --> 00:32:13.680
Android tests with the flexibility to
customize any point in the test

00:32:13.680 --> 00:32:13.690
customize any point in the test
 

00:32:13.690 --> 00:32:20.610
customize any point in the test
invocation jetpack with nitrogen is a

00:32:20.610 --> 00:32:20.620
invocation jetpack with nitrogen is a
 

00:32:20.620 --> 00:32:22.890
invocation jetpack with nitrogen is a
child leap forward in test automation

00:32:22.890 --> 00:32:22.900
child leap forward in test automation
 

00:32:22.900 --> 00:32:30.720
child leap forward in test automation
for Android write your test once run it

00:32:30.720 --> 00:32:30.730
for Android write your test once run it
 

00:32:30.730 --> 00:32:34.760
for Android write your test once run it
everywhere

00:32:34.760 --> 00:32:34.770
 

00:32:34.770 --> 00:32:41.920
[Applause]

00:32:41.920 --> 00:32:41.930
[Applause]
 

00:32:41.930 --> 00:32:46.520
[Applause]
this is just the beginning now you have

00:32:46.520 --> 00:32:46.530
this is just the beginning now you have
 

00:32:46.530 --> 00:32:50.920
this is just the beginning now you have
both the tools and the knowledge to

00:32:50.920 --> 00:32:50.930
both the tools and the knowledge to
 

00:32:50.930 --> 00:32:55.390
both the tools and the knowledge to
accelerate your testing experience I

00:32:55.390 --> 00:32:55.400
 

00:32:55.400 --> 00:32:58.490
strongly encourage you to check out our

00:32:58.490 --> 00:32:58.500
strongly encourage you to check out our
 

00:32:58.500 --> 00:33:02.980
strongly encourage you to check out our
collabs especially our latest edition

00:33:02.980 --> 00:33:02.990
collabs especially our latest edition
 

00:33:02.990 --> 00:33:08.720
collabs especially our latest edition
building Android apps with basil basil

00:33:08.720 --> 00:33:08.730
building Android apps with basil basil
 

00:33:08.730 --> 00:33:10.820
building Android apps with basil basil
is the open source version of our

00:33:10.820 --> 00:33:10.830
is the open source version of our
 

00:33:10.830 --> 00:33:15.170
is the open source version of our
internal build system allowing you to

00:33:15.170 --> 00:33:15.180
internal build system allowing you to
 

00:33:15.180 --> 00:33:19.930
internal build system allowing you to
build large Android apps at Google scale

00:33:19.930 --> 00:33:19.940
 

00:33:19.940 --> 00:33:23.630
if you have further questions or if you

00:33:23.630 --> 00:33:23.640
if you have further questions or if you
 

00:33:23.640 --> 00:33:25.280
if you have further questions or if you
would like to discuss your testing

00:33:25.280 --> 00:33:25.290
would like to discuss your testing
 

00:33:25.290 --> 00:33:29.600
would like to discuss your testing
strategy come find us tomorrow morning

00:33:29.600 --> 00:33:29.610
strategy come find us tomorrow morning
 

00:33:29.610 --> 00:33:34.160
strategy come find us tomorrow morning
at 11 a.m. in the office our stand in

00:33:34.160 --> 00:33:34.170
at 11 a.m. in the office our stand in
 

00:33:34.170 --> 00:33:40.970
at 11 a.m. in the office our stand in
section 8 we hope you enjoyed our

00:33:40.970 --> 00:33:40.980
section 8 we hope you enjoyed our
 

00:33:40.980 --> 00:33:44.210
section 8 we hope you enjoyed our
session and we will love to hear from

00:33:44.210 --> 00:33:44.220
session and we will love to hear from
 

00:33:44.220 --> 00:33:47.810
session and we will love to hear from
you so please take a moment to submit

00:33:47.810 --> 00:33:47.820
you so please take a moment to submit
 

00:33:47.820 --> 00:33:51.950
you so please take a moment to submit
your feedback and with that happy

00:33:51.950 --> 00:33:51.960
your feedback and with that happy
 

00:33:51.960 --> 00:33:52.780
your feedback and with that happy
testing

00:33:52.780 --> 00:33:52.790
testing
 

00:33:52.790 --> 00:33:54.260
testing
[Applause]

00:33:54.260 --> 00:33:54.270
[Applause]
 

00:33:54.270 --> 00:34:15.569
[Applause]
[Music]

