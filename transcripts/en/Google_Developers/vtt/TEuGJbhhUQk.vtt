WEBVTT
Kind: captions
Language: en

00:00:05.940 --> 00:00:07.080
NETO MARIN: Hey, I'm Neto.

00:00:07.080 --> 00:00:10.620
And we are here for another
Behind the Actions episode.

00:00:10.620 --> 00:00:12.420
And we have another guest today.

00:00:12.420 --> 00:00:15.559
I invited one of our engineers
from the developer relations

00:00:15.559 --> 00:00:16.059
team.

00:00:16.059 --> 00:00:17.110
Say hello, Taylor.

00:00:17.110 --> 00:00:18.280
TAYLOR CALDWELL:
Hey, how's it going?

00:00:18.280 --> 00:00:20.070
NETO MARIN: What are
you doing on our team?

00:00:20.070 --> 00:00:22.487
TAYLOR CALDWELL: So I'm an
engineer for Actions on Google.

00:00:22.487 --> 00:00:25.387
I help build client libraries,
code samples, snippets,

00:00:25.387 --> 00:00:27.720
basically anything that'll
help developers build actions

00:00:27.720 --> 00:00:28.762
for the Google Assistant.

00:00:28.762 --> 00:00:31.430
NETO MARIN: So when they
go to the GitHub repo

00:00:31.430 --> 00:00:32.978
and find some cool
samples there,

00:00:32.978 --> 00:00:34.770
you were one of the
responsible ones there?

00:00:34.770 --> 00:00:37.170
If any people want to
open issues for you--

00:00:37.170 --> 00:00:38.880
no, I'm kidding.

00:00:38.880 --> 00:00:39.840
But yes, right?

00:00:39.840 --> 00:00:42.065
You post code there,
create code labs, whatever.

00:00:42.065 --> 00:00:44.190
TAYLOR CALDWELL: Yeah, any
code that is open source

00:00:44.190 --> 00:00:47.303
on Actions on Google
GitHub, I've contributed to,

00:00:47.303 --> 00:00:49.470
so if anyone has any issues
or questions about that,

00:00:49.470 --> 00:00:50.820
they can reach out to us there.

00:00:50.820 --> 00:00:51.960
NETO MARIN: Nice.

00:00:51.960 --> 00:00:57.450
And then today, the idea is
to view the fulfillment code,

00:00:57.450 --> 00:00:59.372
but using the Java
client library, right?

00:00:59.372 --> 00:01:00.330
TAYLOR CALDWELL: Right.

00:01:00.330 --> 00:01:02.280
NETO MARIN: So for example, if
you remember the first episode,

00:01:02.280 --> 00:01:05.220
with Jessica, we built the
lucky number calculator, using--

00:01:05.220 --> 00:01:07.500
I used some machine learning--
very serious stuff--

00:01:07.500 --> 00:01:10.200
to calculate that, and
we're going to use today.

00:01:10.200 --> 00:01:13.270
Of course, it's just measuring
the length of the string.

00:01:13.270 --> 00:01:16.800
But at that time,
we used Node.js.

00:01:16.800 --> 00:01:19.620
It was our first client
library, and now we

00:01:19.620 --> 00:01:21.752
have this Java code in
the client library, right?

00:01:21.752 --> 00:01:22.710
TAYLOR CALDWELL: Right.

00:01:22.710 --> 00:01:23.890
NETO MARIN: So OK.

00:01:23.890 --> 00:01:25.380
So let's build it
and see how it's

00:01:25.380 --> 00:01:27.540
going to work with the
Java client library.

00:01:27.540 --> 00:01:30.450
But, first, what is a
client library, Taylor?

00:01:30.450 --> 00:01:32.040
How could we explain
to a person--

00:01:32.040 --> 00:01:34.620
I'm starting with the Actions
on Google Development,

00:01:34.620 --> 00:01:36.210
what is a client library?

00:01:36.210 --> 00:01:38.820
TAYLOR CALDWELL: Right, so a
client library is a library,

00:01:38.820 --> 00:01:42.900
or a tool, that can help
developers more easily code

00:01:42.900 --> 00:01:43.570
their apps.

00:01:43.570 --> 00:01:46.640
So when you're building
for the Google Assistant,

00:01:46.640 --> 00:01:49.860
a lot of the communication
back and forth is done in JSON.

00:01:49.860 --> 00:01:52.410
And if you're using a language
that's object-oriented,

00:01:52.410 --> 00:01:55.950
like Java, handling
JSON is not really--

00:01:55.950 --> 00:01:57.430
it's not really easy to do.

00:01:57.430 --> 00:01:59.347
NETO MARIN: You have a
lot of boilerplate code

00:01:59.347 --> 00:02:02.440
to check the entities, the
kind of objects, right?

00:02:02.440 --> 00:02:03.690
TAYLOR CALDWELL: Right, right.

00:02:03.690 --> 00:02:08.370
So providing a client library
allows you to take any data

00:02:08.370 --> 00:02:11.550
and represent it as
an object in Java

00:02:11.550 --> 00:02:13.180
so it's more easy to work with.

00:02:13.180 --> 00:02:15.060
NETO MARIN: But
also it's important

00:02:15.060 --> 00:02:19.390
because we are also giving some
tools to handle some specific--

00:02:19.390 --> 00:02:23.370
for example, the intent
helpers or transactions,

00:02:23.370 --> 00:02:26.070
they don't need to check
what's the correct name

00:02:26.070 --> 00:02:27.960
of that permission.

00:02:27.960 --> 00:02:30.690
We already are kind
of wrapping everything

00:02:30.690 --> 00:02:31.980
on the client library, right?

00:02:31.980 --> 00:02:32.400
TAYLOR CALDWELL: Right.

00:02:32.400 --> 00:02:33.850
So it wraps a lot
of functionality.

00:02:33.850 --> 00:02:35.475
So we have a lot of
helpers when you're

00:02:35.475 --> 00:02:37.230
building actions for
checking permissions,

00:02:37.230 --> 00:02:38.940
confirmation, stuff like that.

00:02:38.940 --> 00:02:42.360
And these are just converted
into simple methods in Java

00:02:42.360 --> 00:02:44.650
that you can just call.

00:02:44.650 --> 00:02:46.680
There's also some
annotations in Java

00:02:46.680 --> 00:02:49.140
that allow you to mark
things as a intent handlers

00:02:49.140 --> 00:02:52.613
so that you can specify
specific pieces of code

00:02:52.613 --> 00:02:54.530
for each of your intents
that you're creating.

00:02:54.530 --> 00:02:56.640
NETO MARIN: So it makes the
developer's life easier, right?

00:02:56.640 --> 00:02:57.390
NETO MARIN: Right.

00:02:57.390 --> 00:02:58.765
NETO MARIN: So
and just remember,

00:02:58.765 --> 00:03:00.515
like we already said
in the first episode,

00:03:00.515 --> 00:03:02.130
and I'm going to
say again, you can

00:03:02.130 --> 00:03:03.930
use any language you prefer.

00:03:03.930 --> 00:03:09.260
If you are coding Ruby,
Python, Rust, whatever, PHP,

00:03:09.260 --> 00:03:10.420
there is no problem.

00:03:10.420 --> 00:03:13.385
But we only have these two
client libraries right now.

00:03:13.385 --> 00:03:15.010
Maybe when you are
watching this video,

00:03:15.010 --> 00:03:17.905
we already have another one,
so check out our GitHub.

00:03:17.905 --> 00:03:19.530
And, by the way, the
code is all there.

00:03:19.530 --> 00:03:22.200
If someone wants to check how
we are coding-- how we are doing

00:03:22.200 --> 00:03:24.660
the client library, or
even create a new client

00:03:24.660 --> 00:03:28.252
library for another language
and want to use our code base,

00:03:28.252 --> 00:03:29.460
they can check it out, right?

00:03:29.460 --> 00:03:30.780
TAYLOR CALDWELL: Yeah, so
all of our code samples

00:03:30.780 --> 00:03:32.790
are open sourced on GitHub,
including the stuff that we're

00:03:32.790 --> 00:03:33.990
going to be using today.

00:03:33.990 --> 00:03:36.858
NETO MARIN: OK, just
wrapping up this part so

00:03:36.858 --> 00:03:38.400
we can start to
code, because I think

00:03:38.400 --> 00:03:40.067
people would start
shaking if they don't

00:03:40.067 --> 00:03:42.130
see some code for a long time.

00:03:42.130 --> 00:03:44.450
For example, the
client library want

00:03:44.450 --> 00:03:47.520
to work like I can add these
as a dependency in our project.

00:03:47.520 --> 00:03:52.530
So using IntelliJ or any
other IDE, Vim or something

00:03:52.530 --> 00:03:55.500
like that, they could add
this as a library, right?

00:03:55.500 --> 00:03:57.060
So it's on Maven?

00:03:57.060 --> 00:03:58.935
TAYLOR CALDWELL: Right,
so the client library

00:03:58.935 --> 00:04:01.620
is available on Maven central,
so you can use basically

00:04:01.620 --> 00:04:03.660
any Java IDE that you wish--

00:04:03.660 --> 00:04:04.680
Eclipse, IntelliJ.

00:04:04.680 --> 00:04:07.620
Today we will be using IntelliJ.

00:04:07.620 --> 00:04:11.640
And the dependency will be
pulled from Maven central using

00:04:11.640 --> 00:04:13.090
build scripts.

00:04:13.090 --> 00:04:15.832
We'll be using Gradle for that.

00:04:15.832 --> 00:04:16.540
NETO MARIN: Nice.

00:04:16.540 --> 00:04:18.570
So let's start.

00:04:18.570 --> 00:04:21.450
First, in terms of
the requirements, what

00:04:21.450 --> 00:04:25.950
does the developer need in the
machine to run this library,

00:04:25.950 --> 00:04:27.540
do the project, for example?

00:04:27.540 --> 00:04:29.582
TAYLOR CALDWELL: Right,
so as I mentioned before,

00:04:29.582 --> 00:04:32.400
you'll first need an
IDE, and then you'll

00:04:32.400 --> 00:04:35.970
need to check out
the code off GitHub.

00:04:35.970 --> 00:04:39.480
Once you have the code, you
can import it into your IDE.

00:04:39.480 --> 00:04:42.442
And then also, for
deployments, you--

00:04:42.442 --> 00:04:44.400
depending on where you're
deploying your code--

00:04:44.400 --> 00:04:46.220
NETO MARIN: Yeah, your
cloud provider or something

00:04:46.220 --> 00:04:46.530
like that.

00:04:46.530 --> 00:04:48.072
TAYLOR CALDWELL:
Your cloud provider.

00:04:48.072 --> 00:04:50.490
So, today, we're going to
be using Google App Engine,

00:04:50.490 --> 00:04:54.203
and to deploy, you'll need
a tool called the Cloud SDK.

00:04:54.203 --> 00:04:54.870
NETO MARIN: Yes.

00:04:54.870 --> 00:04:57.720
So if you need more information
about the Google App Engine,

00:04:57.720 --> 00:05:00.210
please go to our
cloud.google.com.

00:05:00.210 --> 00:05:04.962
There is a ton of tools there,
manuals that you can check.

00:05:04.962 --> 00:05:07.170
We're going to use the Google
App Engine because it's

00:05:07.170 --> 00:05:10.260
the easier way, in my opinion.

00:05:10.260 --> 00:05:11.880
It's just a few
comments, and you

00:05:11.880 --> 00:05:13.290
can deploy and have it working.

00:05:13.290 --> 00:05:15.565
But if you have your
own cloud provider--

00:05:15.565 --> 00:05:18.480
if you have your own
server, there's no problem.

00:05:18.480 --> 00:05:21.330
Just remember the
Actions on Google

00:05:21.330 --> 00:05:25.510
requires HTTPS connection--
an external connection.

00:05:25.510 --> 00:05:28.350
So if you have only an
internal server or network,

00:05:28.350 --> 00:05:30.600
you won't be able to because
the Google Assistant must

00:05:30.600 --> 00:05:31.742
reach your web hook, right?

00:05:31.742 --> 00:05:32.700
TAYLOR CALDWELL: Right.

00:05:32.700 --> 00:05:34.783
NETO MARIN: So then this
is one of the reasons why

00:05:34.783 --> 00:05:36.290
we have the Google App Engine.

00:05:36.290 --> 00:05:38.250
It fits perfectly
for this case, right?

00:05:38.250 --> 00:05:38.780
TAYLOR CALDWELL: Right.

00:05:38.780 --> 00:05:40.363
NETO MARIN: So OK,
let's stop talking.

00:05:40.363 --> 00:05:41.597
Can you please show us--

00:05:41.597 --> 00:05:43.180
let's start with the
project creation.

00:05:43.180 --> 00:05:45.110
TAYLOR CALDWELL: So if
you visit the console,

00:05:45.110 --> 00:05:47.068
the Actions on Google
console, you can actually

00:05:47.068 --> 00:05:48.937
create a project here.

00:05:48.937 --> 00:05:50.520
And then you give
your project a name.

00:05:50.520 --> 00:05:52.700
NETO MARIN: Let's put Java
Lucky Number Calculator,

00:05:52.700 --> 00:05:55.075
just to make it different
from the previous ones

00:05:55.075 --> 00:05:56.363
in the other episodes.

00:05:59.870 --> 00:06:03.882
And I think most of
our viewers, they

00:06:03.882 --> 00:06:07.260
are already kind of
familiar with this process.

00:06:07.260 --> 00:06:09.490
So we won't make too
much comments about this.

00:06:09.490 --> 00:06:12.380
If you have any
questions or doubts

00:06:12.380 --> 00:06:14.090
about how to create
a project, please

00:06:14.090 --> 00:06:16.190
go to our first Behind
the Actions episode,

00:06:16.190 --> 00:06:19.340
where we go through all
the creation process,

00:06:19.340 --> 00:06:22.840
explaining all the details
about all the fields.

00:06:22.840 --> 00:06:24.920
But right now, let's
go straight through

00:06:24.920 --> 00:06:28.500
to the intents creation.

00:06:28.500 --> 00:06:30.640
So, now, I think
the first step is

00:06:30.640 --> 00:06:33.420
to customize the welcome
intent, just the message, right?

00:06:33.420 --> 00:06:37.100
Say, hello, tell me your
favorite color, right?

00:06:37.100 --> 00:06:38.250
TAYLOR CALDWELL: Right.

00:06:38.250 --> 00:06:41.240
NETO MARIN: Just to make it
similar to the first episode we

00:06:41.240 --> 00:06:45.400
had, we should, for example,
customize the welcome intent,

00:06:45.400 --> 00:06:45.900
right?

00:06:45.900 --> 00:06:49.170
And change the phrase,
the welcome, the response,

00:06:49.170 --> 00:06:50.363
to something like--

00:06:50.363 --> 00:06:52.530
TAYLOR CALDWELL: Hello,
what is your favorite color?

00:06:52.530 --> 00:06:55.410
NETO MARIN: Yeah, I can remove
this and add a new response

00:06:55.410 --> 00:06:57.830
like, what's your
favorite color?

00:06:57.830 --> 00:06:59.340
For now, let's use just one.

00:06:59.340 --> 00:07:01.020
But again, it's just
because we already

00:07:01.020 --> 00:07:03.670
went through the process
of creating an action.

00:07:03.670 --> 00:07:04.800
So now hit Save.

00:07:04.800 --> 00:07:06.870
I think it's good, right?

00:07:06.870 --> 00:07:12.130
But to handle the user answer,
we need another intent.

00:07:12.130 --> 00:07:15.130
So Taylor is going to
create a new intent.

00:07:15.130 --> 00:07:16.470
My job is easier today, right?

00:07:16.470 --> 00:07:18.240
I'm just saying him
to do something,

00:07:18.240 --> 00:07:22.010
because the idea is
to go straight forward

00:07:22.010 --> 00:07:25.990
to the back-end
fulfillment development.

00:07:25.990 --> 00:07:28.140
So favorite color-- great.

00:07:28.140 --> 00:07:31.350
Add some phrase like, my
favorite color is orange,

00:07:31.350 --> 00:07:32.376
purple, exactly.

00:07:35.730 --> 00:07:36.230
Perfect.

00:07:36.230 --> 00:07:38.580
So now we need to
enable the fulfillment.

00:07:38.580 --> 00:07:43.670
So let's go to fulfillment,
enable fulfillment.

00:07:43.670 --> 00:07:44.360
Perfect.

00:07:44.360 --> 00:07:45.410
Save.

00:07:45.410 --> 00:07:48.920
But if we go to the
fulfillment section,

00:07:48.920 --> 00:07:51.787
for example, we don't have
the web hook yet, right?

00:07:51.787 --> 00:07:53.870
TAYLOR CALDWELL: Right,
so we need to set that up.

00:07:53.870 --> 00:07:57.025
NETO MARIN: So let's
use the Java library.

00:07:57.025 --> 00:07:58.400
How is the process--
for example,

00:07:58.400 --> 00:08:00.140
if I'm starting
with development,

00:08:00.140 --> 00:08:01.250
how is the process?

00:08:01.250 --> 00:08:03.830
For example, I'm
just here and I want

00:08:03.830 --> 00:08:06.980
to start right now
creating this project.

00:08:06.980 --> 00:08:08.840
TAYLOR CALDWELL: So my
first recommendation

00:08:08.840 --> 00:08:11.310
would be to download an IDE.

00:08:11.310 --> 00:08:14.450
I have an IDE
pre-installed, IntelliJ.

00:08:14.450 --> 00:08:17.930
Once you have your text editor,
you can go to the Actions

00:08:17.930 --> 00:08:22.130
on Google GitHub and view all
of our open source projects.

00:08:22.130 --> 00:08:27.260
There you will find
the boilerplate project

00:08:27.260 --> 00:08:28.645
for the Java client library.

00:08:28.645 --> 00:08:30.770
NETO MARIN: So this is very
cool because we already

00:08:30.770 --> 00:08:33.260
created some classes and code.

00:08:33.260 --> 00:08:35.240
So you can start your
project without--

00:08:35.240 --> 00:08:36.860
for example, it's
not from scratch.

00:08:36.860 --> 00:08:39.500
We already have
created some structure

00:08:39.500 --> 00:08:42.049
compatible with
Google App Engine,

00:08:42.049 --> 00:08:44.570
and also we created
an AWS handler.

00:08:44.570 --> 00:08:46.820
But, in this case, you're
going to delete this handler

00:08:46.820 --> 00:08:49.190
because you only need the Google
App Engine handler, right?

00:08:49.190 --> 00:08:50.148
TAYLOR CALDWELL: Right.

00:08:50.148 --> 00:08:53.520
NETO MARIN: So you can download
here or from command line,

00:08:53.520 --> 00:08:55.520
whatever you prefer.

00:08:55.520 --> 00:08:57.440
TAYLOR CALDWELL: So if
you visit the GitHub,

00:08:57.440 --> 00:09:00.170
you can clone the project.

00:09:02.940 --> 00:09:05.525
Let's see.

00:09:05.525 --> 00:09:10.070
I'm going to make a directory
called Java library demo.

00:09:14.440 --> 00:09:16.900
And then we can
clone the project.

00:09:16.900 --> 00:09:19.180
Perfect.

00:09:19.180 --> 00:09:20.830
NETO MARIN: So what
is happening now?

00:09:20.830 --> 00:09:22.930
If you're not familiar
with this GitHub,

00:09:22.930 --> 00:09:26.680
we are downloading the
code from the GitHub.

00:09:26.680 --> 00:09:30.790
This code was created by Taylor
and the rest of the team,

00:09:30.790 --> 00:09:31.930
so it'll help you a lot.

00:09:31.930 --> 00:09:34.900
So what is the
structure here, Taylor?

00:09:34.900 --> 00:09:38.420
TAYLOR CALDWELL: So once
you check out the code,

00:09:38.420 --> 00:09:40.570
you can actually open
it in your text editor.

00:09:40.570 --> 00:09:43.445
It'll be easier to view the
structure of the code there.

00:09:43.445 --> 00:09:45.070
NETO MARIN: How we
can open this there.

00:09:45.070 --> 00:09:47.028
TAYLOR CALDWELL: Yeah,
so if you open IntelliJ,

00:09:47.028 --> 00:09:49.450
you can import the project by
clicking the Import Project

00:09:49.450 --> 00:09:57.070
button and navigating
to the clone directory

00:09:57.070 --> 00:09:58.738
and selecting the
build.gradle file.

00:09:58.738 --> 00:09:59.530
NETO MARIN: Oh yes.

00:09:59.530 --> 00:10:01.060
In this case, you
are using Gradle,

00:10:01.060 --> 00:10:06.820
so it's easier to do
all day build tasks.

00:10:06.820 --> 00:10:09.580
But if you are using
Maven, you also

00:10:09.580 --> 00:10:13.240
can use your own architectures.

00:10:13.240 --> 00:10:15.160
But in this case
already it's ready.

00:10:15.160 --> 00:10:18.720
You can just open the
IntelliJ and import.

00:10:18.720 --> 00:10:22.130
And it's very cool because
already the dependencies,

00:10:22.130 --> 00:10:23.400
the wrapper is there.

00:10:23.400 --> 00:10:24.040
TAYLOR CALDWELL:
Right, so Gradle

00:10:24.040 --> 00:10:25.300
will handle all of
the dependencies

00:10:25.300 --> 00:10:26.217
that the project uses.

00:10:26.217 --> 00:10:29.620
It will compile your project,
build all the class files,

00:10:29.620 --> 00:10:31.090
and then yeah.

00:10:31.090 --> 00:10:33.560
So if you don't have Gradle
installed on your machine,

00:10:33.560 --> 00:10:35.470
you can actually use
the Gradle wrapper

00:10:35.470 --> 00:10:37.025
that's packaged with IntelliJ.

00:10:37.025 --> 00:10:38.650
NETO MARIN: Yeah,
this is a good point.

00:10:38.650 --> 00:10:41.620
For example, if you are new to
the Gradle world or something

00:10:41.620 --> 00:10:43.787
like that and don't know
how to use on your machine,

00:10:43.787 --> 00:10:46.030
you can also start from
our code that we always

00:10:46.030 --> 00:10:48.810
wrap the compatible
version of the code.

00:10:48.810 --> 00:10:50.543
So it's ready?

00:10:50.543 --> 00:10:51.460
TAYLOR CALDWELL: Yeah.

00:10:51.460 --> 00:10:53.180
So, as soon as you
import the project,

00:10:53.180 --> 00:10:55.240
you'll see that
everything builds.

00:10:55.240 --> 00:10:56.220
NETO MARIN: OK.

00:10:56.220 --> 00:10:57.970
Can you comment about
this structure here,

00:10:57.970 --> 00:11:02.443
about what classes we have
here and how they're organized?

00:11:02.443 --> 00:11:03.610
TAYLOR CALDWELL: Yeah, sure.

00:11:03.610 --> 00:11:05.290
So, if you look at
the source code,

00:11:05.290 --> 00:11:08.610
and you go to the main folder,
you'll see a couple classes.

00:11:11.290 --> 00:11:13.780
One of the classes
is ActionsServlet.

00:11:13.780 --> 00:11:17.950
This is an entry point
into your back end.

00:11:17.950 --> 00:11:23.260
So when you deploy your projects
or your fulfillment code,

00:11:23.260 --> 00:11:26.110
any requests and responses
will go through this class,

00:11:26.110 --> 00:11:27.130
this server class.

00:11:27.130 --> 00:11:28.420
NETO MARIN: Nice.

00:11:28.420 --> 00:11:31.490
And this class, for
example, the developers,

00:11:31.490 --> 00:11:33.460
they don't need to
customize this class, right?

00:11:33.460 --> 00:11:35.770
Because you're already doing
all the work for them, right?

00:11:35.770 --> 00:11:36.100
TAYLOR CALDWELL: Right.

00:11:36.100 --> 00:11:38.590
So the boilerplate, we provide
two different entry points.

00:11:38.590 --> 00:11:40.780
We provide one that's just
a basic servlet, which

00:11:40.780 --> 00:11:42.790
is really common in Java.

00:11:42.790 --> 00:11:46.375
And then we also provide
one for AWS Lambda.

00:11:46.375 --> 00:11:48.250
Because the request and
response that come in

00:11:48.250 --> 00:11:51.600
is a tad different, you have
to handle them differently.

00:11:51.600 --> 00:11:54.320
NETO MARIN: So you can remove
the other handler in this case,

00:11:54.320 --> 00:11:54.820
right?

00:11:54.820 --> 00:11:57.360
TAYLOR CALDWELL: Yeah, so,
since we're not using AWS,

00:11:57.360 --> 00:11:58.860
we can completely
delete this class.

00:11:58.860 --> 00:12:00.300
NETO MARIN: Nice.

00:12:00.300 --> 00:12:02.500
But now I see
another class here.

00:12:02.500 --> 00:12:03.810
So where should I--

00:12:03.810 --> 00:12:06.060
for example, because on
the Node.js client library,

00:12:06.060 --> 00:12:08.130
I have to create a
function and then I

00:12:08.130 --> 00:12:12.060
have a function for
intent, and then,

00:12:12.060 --> 00:12:14.100
of course, one of
the methodologies.

00:12:14.100 --> 00:12:16.750
But you have one
method for intent.

00:12:16.750 --> 00:12:19.170
We have something similar
for the Java client library?

00:12:19.170 --> 00:12:22.140
TAYLOR CALDWELL: Yeah, so if
you look at the second class

00:12:22.140 --> 00:12:26.220
that we have here, we have
this MyActionsApp class.

00:12:26.220 --> 00:12:31.740
This is equivalent to the app
instance in Node.js client

00:12:31.740 --> 00:12:33.780
library.

00:12:33.780 --> 00:12:35.780
NETO MARIN: It's where
the magic happens, right?

00:12:35.780 --> 00:12:38.238
TAYLOR CALDWELL: Yeah, this is
where all the magic happens.

00:12:38.238 --> 00:12:40.320
So this is where you define
any code for handling

00:12:40.320 --> 00:12:42.420
any of your intents.

00:12:42.420 --> 00:12:44.820
And depending on if you're
using Dialogflow or Actions

00:12:44.820 --> 00:12:50.720
SDK, you can, instead of using
the constructor like you would

00:12:50.720 --> 00:12:54.210
in Node.js of instantiating
an instance of Dialogflow

00:12:54.210 --> 00:12:58.108
App or Actions SDK App, you
extend the class's Dialogflow

00:12:58.108 --> 00:12:58.900
or Actions SDK App.

00:12:58.900 --> 00:13:00.840
NETO MARIN: OK, cool.

00:13:00.840 --> 00:13:03.840
So we have a bunch of
boilerplate also, like welcome.

00:13:03.840 --> 00:13:07.320
But we are not using
the fulfillment

00:13:07.320 --> 00:13:09.360
to reply to the welcome intent.

00:13:09.360 --> 00:13:11.303
We are handling all
from Dialogflow.

00:13:11.303 --> 00:13:13.470
In this case, we can for
example remove this, right?

00:13:13.470 --> 00:13:14.387
TAYLOR CALDWELL: Yeah.

00:13:14.387 --> 00:13:19.140
So we created a project
on our own in Dialogflow.

00:13:19.140 --> 00:13:22.500
So we can remove any
intent handlers here.

00:13:22.500 --> 00:13:25.290
We can actually reuse this
default welcome intent one

00:13:25.290 --> 00:13:27.663
because it's just a
basic welcome intent.

00:13:27.663 --> 00:13:29.580
NETO MARIN: Remember to
check the intent name,

00:13:29.580 --> 00:13:31.472
so have the same
name in the notation.

00:13:31.472 --> 00:13:32.430
TAYLOR CALDWELL: Right.

00:13:32.430 --> 00:13:36.660
So the annotation should
match the intent name

00:13:36.660 --> 00:13:37.980
that was defined in Dialogflow.

00:13:37.980 --> 00:13:40.320
So if we go back to our
project in Dialogflow,

00:13:40.320 --> 00:13:42.750
we'll see that our
default welcome intent is

00:13:42.750 --> 00:13:44.610
named Default Welcome Intent.

00:13:44.610 --> 00:13:48.360
And looking back at our code, we
have the default welcome intent

00:13:48.360 --> 00:13:50.260
annotation for
this block of code.

00:13:50.260 --> 00:13:52.830
NETO MARIN: Yeah but in this
case, we won't use this one.

00:13:52.830 --> 00:13:56.430
We'll just reuse the
code, and then they

00:13:56.430 --> 00:13:58.920
must match the favorite color.

00:13:58.920 --> 00:14:00.880
TAYLOR CALDWELL: So
because our default

00:14:00.880 --> 00:14:02.880
welcome intent doesn't
reach out to fulfillment,

00:14:02.880 --> 00:14:04.950
we do not need this one.

00:14:04.950 --> 00:14:07.230
We can go ahead and go to
our favorite color intent

00:14:07.230 --> 00:14:10.440
and change it to
handle this intent.

00:14:10.440 --> 00:14:13.290
So to do that, we can
change the annotation

00:14:13.290 --> 00:14:16.700
to be Favorite Color.

00:14:16.700 --> 00:14:22.080
NETO MARIN: And how do I
know the color the user said?

00:14:22.080 --> 00:14:25.560
Because on Node.js, for
example, I have the parameter

00:14:25.560 --> 00:14:27.900
after the conversation object.

00:14:27.900 --> 00:14:30.600
And here we are sending
also a parameter, right?

00:14:30.600 --> 00:14:31.390
Can you go back?

00:14:31.390 --> 00:14:35.220
Yeah, so you go the Actions and
parameters, we have the color.

00:14:35.220 --> 00:14:38.168
How do we handle this parameter
in the Java client library?

00:14:38.168 --> 00:14:39.585
TAYLOR CALDWELL:
So this parameter

00:14:39.585 --> 00:14:43.410
is passed in to
your Java back end.

00:14:43.410 --> 00:14:45.970
And to actually access
these parameters,

00:14:45.970 --> 00:14:49.290
you would use a Get Parameter
method on the request.

00:14:49.290 --> 00:14:51.040
NETO MARIN: So I don't
need-- for example,

00:14:51.040 --> 00:14:54.300
if I have a bunch
of parameters, I

00:14:54.300 --> 00:14:57.330
don't need to keep changing
the method's signature.

00:14:57.330 --> 00:14:59.760
For example, it
allows me-- maybe

00:14:59.760 --> 00:15:02.460
if I'm sending new parameters,
it won't break my code.

00:15:05.620 --> 00:15:07.630
Like, OK, I'm adding
these parameters,

00:15:07.630 --> 00:15:10.800
that I'm going to use
maybe in another moment,

00:15:10.800 --> 00:15:12.100
and it won't bring the code.

00:15:12.100 --> 00:15:13.680
So I can keep using the same.

00:15:13.680 --> 00:15:14.180
TAYLOR CALDWELL: Yeah.

00:15:14.180 --> 00:15:14.890
NETO MARIN: Cool.

00:15:14.890 --> 00:15:20.700
So show us all the AI stuff
that you do on the color string

00:15:20.700 --> 00:15:22.317
and return the lucky number.

00:15:22.317 --> 00:15:23.400
TAYLOR CALDWELL: OK, sure.

00:15:23.400 --> 00:15:26.385
So just looking at
the method body of--

00:15:29.150 --> 00:15:31.520
let me actually delete this.

00:15:31.520 --> 00:15:34.230
So first when you create
an intent handler,

00:15:34.230 --> 00:15:38.240
you'll need a response builder
to build your response.

00:15:38.240 --> 00:15:40.280
So we declare that.

00:15:40.280 --> 00:15:42.840
Next, we'll want to grab the
color that the user said.

00:15:42.840 --> 00:15:48.050
And to do that, you can
actually do request.getParameter

00:15:48.050 --> 00:15:51.480
and then specify the name of
the parameter that you want.

00:15:51.480 --> 00:15:53.510
So here we named it color.

00:15:53.510 --> 00:15:58.550
So back in our code, we can say
we want the color parameter.

00:15:58.550 --> 00:16:01.470
And all parameters come
back in Java as objects,

00:16:01.470 --> 00:16:05.000
so you'll have to cast
them to a string--

00:16:05.000 --> 00:16:07.040
in this case, it
will be a string.

00:16:07.040 --> 00:16:11.240
So we can say color
is equal to string.

00:16:13.897 --> 00:16:15.480
NETO MARIN: Now the
machine learning--

00:16:15.480 --> 00:16:17.050
TAYLOR CALDWELL: And now
the machine learning code.

00:16:17.050 --> 00:16:17.370
So--

00:16:17.370 --> 00:16:19.710
NETO MARIN: Is this calculated
out on the blockchain?

00:16:19.710 --> 00:16:22.682
No, I'm kidding.

00:16:22.682 --> 00:16:23.640
I like these buzzwords.

00:16:23.640 --> 00:16:27.210
Maybe we can get more
viewers with these buzzwords.

00:16:27.210 --> 00:16:31.470
TAYLOR CALDWELL: So we're
going to use machine

00:16:31.470 --> 00:16:33.890
learning to generate a number.

00:16:33.890 --> 00:16:36.210
So to do that,
we'll get the color,

00:16:36.210 --> 00:16:37.860
and we'll get the
length of the color.

00:16:37.860 --> 00:16:42.725
And then we'll actually multiply
it by just a special number.

00:16:42.725 --> 00:16:43.600
NETO MARIN: 1, 2, 3--

00:16:43.600 --> 00:16:44.850
this is a very special number.

00:16:44.850 --> 00:16:46.822
TAYLOR CALDWELL: Very special.

00:16:46.822 --> 00:16:48.280
And then, once we
have that number,

00:16:48.280 --> 00:16:49.920
we can actually
return it to the user.

00:16:49.920 --> 00:16:54.980
NETO MARIN: OK, and we also
add what the assistant is going

00:16:54.980 --> 00:16:57.362
to say, so your lucky number--

00:16:57.362 --> 00:16:58.320
TAYLOR CALDWELL: Right.

00:16:58.320 --> 00:17:03.480
So for our response, we'll want
to have some kind of prompt

00:17:03.480 --> 00:17:04.319
to the user.

00:17:04.319 --> 00:17:09.750
So in this case, we can
say, your lucky number

00:17:09.750 --> 00:17:14.128
is, and then the number
that we got back.

00:17:14.128 --> 00:17:14.836
NETO MARIN: Nice.

00:17:20.297 --> 00:17:22.589
TAYLOR CALDWELL: And then,
to add that to the response,

00:17:22.589 --> 00:17:26.790
we'll use our response builder
and then use the Add method

00:17:26.790 --> 00:17:30.790
to add that string
as a response.

00:17:30.790 --> 00:17:34.040
And then if we want to end
the conversation in Java,

00:17:34.040 --> 00:17:35.790
the equivalent in Node is--

00:17:35.790 --> 00:17:37.680
so you have .close.

00:17:37.680 --> 00:17:39.840
In Java, to end
the conversation,

00:17:39.840 --> 00:17:43.850
you can call .endConversation
on the end of your response

00:17:43.850 --> 00:17:44.460
builder.

00:17:44.460 --> 00:17:46.680
NETO MARIN: And this is
a very interesting point

00:17:46.680 --> 00:17:50.280
that, when we were planning
the API, designing the API,

00:17:50.280 --> 00:17:53.420
remember some discussions
about the math names.

00:17:53.420 --> 00:17:55.200
And we had some
people say, hey, maybe

00:17:55.200 --> 00:17:58.080
the math names should
match the Node.js.

00:17:58.080 --> 00:18:01.380
And actually, we kind of
think different because we

00:18:01.380 --> 00:18:04.710
are writing a very
Java idiomatic library.

00:18:04.710 --> 00:18:08.490
So if you already use
standard Java and Kotlin--

00:18:08.490 --> 00:18:10.920
and by the way, this library
is developed from Kotlin,

00:18:10.920 --> 00:18:13.230
so the library is--
the code is in Kotlin.

00:18:13.230 --> 00:18:17.940
So if you are used to the
Java idiomatic, the syntax,

00:18:17.940 --> 00:18:23.250
you'd be very familiar
with the APIs we created.

00:18:23.250 --> 00:18:25.580
But probably you
see some differences

00:18:25.580 --> 00:18:28.350
if you're migrating from
the Node.js to the Java.

00:18:28.350 --> 00:18:30.330
Maybe, like you said,
instead of .close,

00:18:30.330 --> 00:18:32.940
it would be like
endConversation.

00:18:32.940 --> 00:18:34.990
But good to frame it.

00:18:34.990 --> 00:18:36.310
I think it's important.

00:18:36.310 --> 00:18:38.352
TAYLOR CALDWELL: So once
you are ready to deploy,

00:18:38.352 --> 00:18:40.950
you can actually open the
terminal up in IntelliJ.

00:18:40.950 --> 00:18:44.100
To do that, you can go to
View, Tool Windows, Terminal.

00:18:44.100 --> 00:18:45.700
NETO MARIN: Nice.

00:18:45.700 --> 00:18:47.380
And it's cool because
you're already

00:18:47.380 --> 00:18:50.090
in your project, your class
path, and everything else,

00:18:50.090 --> 00:18:52.940
so you don't need to like check
if you're on the right path,

00:18:52.940 --> 00:18:53.440
right?

00:18:53.440 --> 00:18:53.740
NETO MARIN: Right.

00:18:53.740 --> 00:18:56.080
So it automatically detects
where the project path is.

00:18:56.080 --> 00:18:58.570
You don't have a separate
terminal window open and like

00:18:58.570 --> 00:19:01.967
cd into that directory.

00:19:01.967 --> 00:19:03.550
So when you're ready
to deploy, you'll

00:19:03.550 --> 00:19:06.340
need to use the
Cloud SDK tool that I

00:19:06.340 --> 00:19:07.590
mentioned earlier before.

00:19:07.590 --> 00:19:09.800
We have it pre-installed
on this machine right now.

00:19:09.800 --> 00:19:15.610
And to use it you can say gcloud
init to initialize you project.

00:19:15.610 --> 00:19:19.130
From there, it will ask you
to initialize a project,

00:19:19.130 --> 00:19:23.710
and you can say, create
new configuration,

00:19:23.710 --> 00:19:25.030
and give it some kind of name.

00:19:30.240 --> 00:19:34.960
And then log in with your email.

00:19:34.960 --> 00:19:36.460
So after you configure
your project,

00:19:36.460 --> 00:19:39.110
you will want to actually
deploy the application.

00:19:39.110 --> 00:19:40.670
You can do that
from the terminal,

00:19:40.670 --> 00:19:44.142
or IntelliJ also provides--

00:19:44.142 --> 00:19:45.620
NETO MARIN: A short cut?

00:19:45.620 --> 00:19:48.680
TAYLOR CALDWELL: It provides
a shortcut in the Gradle tab.

00:19:48.680 --> 00:19:50.870
So in the boilerplate
that we provide,

00:19:50.870 --> 00:19:52.648
we have a bunch of
Gradle tasks for--

00:19:52.648 --> 00:19:53.690
NETO MARIN: Let me guess.

00:19:53.690 --> 00:19:55.255
One is to the Google
App Engine task.

00:19:55.255 --> 00:19:56.630
TAYLOR CALDWELL:
Yeah, so we have

00:19:56.630 --> 00:19:58.637
one for deploying to
Google App Engine.

00:19:58.637 --> 00:20:00.470
So if you go to the
Gradle tab in IntelliJ--

00:20:00.470 --> 00:20:02.090
NETO MARIN: This is
why we hired you.

00:20:02.090 --> 00:20:05.450
TAYLOR CALDWELL: Yeah, you
can go to Tasks, App Engine,

00:20:05.450 --> 00:20:08.160
and then there's
App Engine Deploy.

00:20:08.160 --> 00:20:09.570
So if you double click that--

00:20:09.570 --> 00:20:11.550
NETO MARIN: Now it's
the moment, you know?

00:20:11.550 --> 00:20:13.050
TAYLOR CALDWELL:
The dancing moment?

00:20:13.050 --> 00:20:13.780
NETO MARIN: Let's
see if it's working.

00:20:13.780 --> 00:20:14.720
TAYLOR CALDWELL:
The deploy dance?

00:20:14.720 --> 00:20:15.860
NETO MARIN: Let's see.

00:20:15.860 --> 00:20:17.960
You only have the right
to do the deploy dance

00:20:17.960 --> 00:20:18.750
if you deploy it.

00:20:18.750 --> 00:20:20.660
So let's see.

00:20:20.660 --> 00:20:21.722
It's working.

00:20:21.722 --> 00:20:23.930
Now, what is happening is
it is creating the instance

00:20:23.930 --> 00:20:28.070
because the Google App Engine
is like a platform as a service.

00:20:28.070 --> 00:20:31.700
So it's uploading all the
code to create a new instance.

00:20:31.700 --> 00:20:34.415
In general, the
first time you run,

00:20:34.415 --> 00:20:36.623
it's kind of more slowly
than the other times, right?

00:20:36.623 --> 00:20:37.498
TAYLOR CALDWELL: Yes.

00:20:37.498 --> 00:20:39.300
So initially it'll
be a little slow.

00:20:39.300 --> 00:20:41.750
It'll take around a few seconds.

00:20:41.750 --> 00:20:44.120
And then once it's
deployed, any follow up

00:20:44.120 --> 00:20:46.070
deployments will
be a lot quicker.

00:20:46.070 --> 00:20:47.820
NETO MARIN: OK, finish--

00:20:47.820 --> 00:20:48.650
it's deployed!

00:20:48.650 --> 00:20:49.320
We can check.

00:20:49.320 --> 00:20:51.320
Can you check the endpoint?

00:20:51.320 --> 00:20:52.310
Is this the endpoint?

00:20:52.310 --> 00:20:54.955
TAYLOR CALDWELL: Yeah,
so this is the endpoints.

00:20:54.955 --> 00:20:56.330
So our endpoint
right now is only

00:20:56.330 --> 00:21:00.860
responding to POST
requests actually.

00:21:00.860 --> 00:21:06.692
NETO MARIN: So with this URL,
you can now fill the web hook.

00:21:06.692 --> 00:21:08.400
TAYLOR CALDWELL: Yeah,
so using this URL,

00:21:08.400 --> 00:21:11.870
we can actually set
up our fulfillments

00:21:11.870 --> 00:21:13.940
by providing a Dialogflow.

00:21:13.940 --> 00:21:18.440
NETO MARIN: Great, so nice.

00:21:18.440 --> 00:21:20.970
So we can save here?

00:21:20.970 --> 00:21:24.980
But there is one-- just before
we do the deploy action there

00:21:24.980 --> 00:21:28.725
and do the test with our
credible Google Home Hub,

00:21:28.725 --> 00:21:31.100
we must configure at least
the name of the action, right?

00:21:31.100 --> 00:21:33.490
Because I think we
are using my test app,

00:21:33.490 --> 00:21:34.010
something that is very common.

00:21:34.010 --> 00:21:35.968
People, when they're
doing their first project,

00:21:35.968 --> 00:21:37.760
they're doing like
with my test app.

00:21:37.760 --> 00:21:40.190
You can go in the Actions
in Google console--

00:21:40.190 --> 00:21:45.200
and just remember
for invocation,

00:21:45.200 --> 00:21:47.510
let's change your
Java lucky number,

00:21:47.510 --> 00:21:51.270
just to make sure that we are
invoking the right action,

00:21:51.270 --> 00:21:53.720
so people say we
are not shoddy here.

00:21:53.720 --> 00:21:56.150
They're not using a free--

00:21:56.150 --> 00:22:02.120
like, we made the homework and
have some working code before.

00:22:02.120 --> 00:22:05.060
Now it's time to integrate,
deploy to the Google

00:22:05.060 --> 00:22:08.030
Hub to test and test, right?

00:22:08.030 --> 00:22:12.253
Well, it's deployed, as
we see on your screen.

00:22:12.253 --> 00:22:13.420
We are seeing the simulator.

00:22:13.420 --> 00:22:15.800
We won't test in the simulator.

00:22:15.800 --> 00:22:18.310
Let's test on the
Home Hub, and I

00:22:18.310 --> 00:22:22.930
will judge if you are allowed
to do our deploy dance when

00:22:22.930 --> 00:22:23.780
it works.

00:22:23.780 --> 00:22:26.750
So, hey Google, talk
to Java Lucky Number.

00:22:28.915 --> 00:22:29.790
GOOGLE ASSISTANT: OK.

00:22:29.790 --> 00:22:33.280
Let's get the test version
of Java Lucky Number.

00:22:33.280 --> 00:22:35.338
Hey, what's your favorite color?

00:22:35.338 --> 00:22:36.130
NETO MARIN: Orange.

00:22:40.240 --> 00:22:43.113
GOOGLE ASSISTANT: Your
lucky number is 738.

00:22:43.113 --> 00:22:43.780
NETO MARIN: Woo!

00:22:43.780 --> 00:22:46.570
It's working!

00:22:46.570 --> 00:22:48.190
Yeah, I like this.

00:22:48.190 --> 00:22:51.740
So what happened here?

00:22:51.740 --> 00:22:56.440
So we w test from
your App Engine,

00:22:56.440 --> 00:23:02.883
you deployed, we copied the
URL, set up the fulfillment,

00:23:02.883 --> 00:23:03.550
and it can work.

00:23:03.550 --> 00:23:05.440
It's working right?

00:23:05.440 --> 00:23:09.020
OK, maybe it's kind
of very simple.

00:23:09.020 --> 00:23:11.410
But this is an idea to
showcase how you can--

00:23:11.410 --> 00:23:13.060
the pieces you have to connect.

00:23:13.060 --> 00:23:18.040
But for example, just remember
all the features are available.

00:23:18.040 --> 00:23:20.750
Everything we have on the
platform is already available.

00:23:20.750 --> 00:23:22.570
So rich response.

00:23:22.570 --> 00:23:23.140
What else?

00:23:23.140 --> 00:23:24.210
TAYLOR CALDWELL:
Yeah, rich responses.

00:23:24.210 --> 00:23:26.585
So you have things like your
basic cards, your carousels.

00:23:26.585 --> 00:23:29.035
Anything that is available
in the Node client library

00:23:29.035 --> 00:23:30.910
will be available in
the Java client library.

00:23:30.910 --> 00:23:34.390
NETO MARIN: And if they want
to check something right now

00:23:34.390 --> 00:23:38.370
and see how to use these
advanced features, where

00:23:38.370 --> 00:23:39.337
they should go?

00:23:39.337 --> 00:23:41.170
TAYLOR CALDWELL: So if
you want to check out

00:23:41.170 --> 00:23:42.753
any advanced features
of our platform,

00:23:42.753 --> 00:23:45.502
you can always check out
our developer documentation.

00:23:45.502 --> 00:23:46.960
NETO MARIN: And
also some samples--

00:23:46.960 --> 00:23:48.418
TAYLOR CALDWELL:
And also, yeah, we

00:23:48.418 --> 00:23:50.800
have code samples that
outline things like updates,

00:23:50.800 --> 00:23:54.970
push notifications,
transactions, conversation

00:23:54.970 --> 00:23:55.780
components.

00:23:55.780 --> 00:23:57.087
NETO MARIN: Nice, nice.

00:23:57.087 --> 00:23:57.670
This is great.

00:23:57.670 --> 00:24:00.670
So again, we
demonstrated here how

00:24:00.670 --> 00:24:03.280
to use the Google App Engine
and the Java client library

00:24:03.280 --> 00:24:04.000
using IntelliJ.

00:24:04.000 --> 00:24:08.830
But if you're using
Kotlin and Eclipse,

00:24:08.830 --> 00:24:11.110
and deploying to
another cloud provider

00:24:11.110 --> 00:24:14.290
tree or own infrastructure,
it's totally up to you.

00:24:14.290 --> 00:24:17.170
We are only providing the client
library and the boilerplate

00:24:17.170 --> 00:24:18.580
code to save you some time.

00:24:18.580 --> 00:24:21.970
Well, I think we kind of
covered the basic stuff

00:24:21.970 --> 00:24:24.950
around the client library,
so any other thing we

00:24:24.950 --> 00:24:27.243
would like to mention
to developers about it?

00:24:27.243 --> 00:24:28.410
TAYLOR CALDWELL: Yeah, sure.

00:24:28.410 --> 00:24:31.450
So our client library
is written in Kotlin.

00:24:31.450 --> 00:24:32.890
This allows you to--

00:24:32.890 --> 00:24:35.830
it provides interoperability
when you're coding,

00:24:35.830 --> 00:24:38.348
so you can either call
Java code or Kotlin code

00:24:38.348 --> 00:24:39.890
while you're developing
your actions.

00:24:39.890 --> 00:24:43.480
NETO MARIN: Yeah, and they
can find those on Twitter.

00:24:43.480 --> 00:24:46.030
Our team handle is
@ActionsOnGoogle.

00:24:46.030 --> 00:24:48.700
Also our Twitter handle--
it's fun to talk with us.

00:24:48.700 --> 00:24:51.710
All the information will be
on the video description,

00:24:51.710 --> 00:24:53.380
so you can find our Twitter.

00:24:53.380 --> 00:24:54.880
And also remember,
if you're posting

00:24:54.880 --> 00:24:57.550
something cool or did something
cool or have any comment

00:24:57.550 --> 00:25:01.570
about this, please use the
#aogdevs hashtag on Twitter.

00:25:01.570 --> 00:25:02.717
We can see that.

00:25:02.717 --> 00:25:04.300
And also we are on
a new platform now.

00:25:04.300 --> 00:25:08.842
We have a section on Reddit,
and also a Stack Overflow.

00:25:08.842 --> 00:25:11.050
Our team is always checking
Stack Overflow and Reddit

00:25:11.050 --> 00:25:13.330
to answer our questions.

00:25:13.330 --> 00:25:14.530
So OK.

00:25:14.530 --> 00:25:16.060
Thank you, Taylor,
for being here.

00:25:16.060 --> 00:25:16.870
It was great.

00:25:16.870 --> 00:25:18.580
And, remember, if
you have any other--

00:25:18.580 --> 00:25:22.030
want to see any other advanced
thing or different thing,

00:25:22.030 --> 00:25:25.720
check our GitHub,
github.com/actionsongoogle.

00:25:25.720 --> 00:25:27.880
There are plenty of samples
using the Java client

00:25:27.880 --> 00:25:30.367
library and everything.

00:25:30.367 --> 00:25:31.200
Thanks for watching.

00:25:31.200 --> 00:25:33.350
See you next time.

