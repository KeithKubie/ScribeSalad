WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.762
[MUSIC PLAYING]

00:00:00.762 --> 00:00:02.970
JAKE WHARTON: I started
using Kotlin to build Android

00:00:02.970 --> 00:00:04.740
apps before I joined Google.

00:00:04.740 --> 00:00:07.460
Kotlin allows you to express
the same ideas in your app using

00:00:07.460 --> 00:00:08.846
less lines of code.

00:00:08.846 --> 00:00:10.470
The more you use the
language, the more

00:00:10.470 --> 00:00:12.240
you unlock its
power, and the more

00:00:12.240 --> 00:00:14.370
fun it becomes to
use as a result.

00:00:14.370 --> 00:00:16.470
Google's supporting Kotlin
as another programming

00:00:16.470 --> 00:00:18.060
language for Android
because we want

00:00:18.060 --> 00:00:19.530
to do what's best
for developers.

00:00:19.530 --> 00:00:22.490
Supporting another programming
language is a ton of work,

00:00:22.490 --> 00:00:25.054
but we feel it's the right
thing to do for the community.

00:00:25.054 --> 00:00:26.220
DAN KIM: My name is Dan Kim.

00:00:26.220 --> 00:00:29.190
And I'm an Android programmer
here at base camp in Chicago.

00:00:29.190 --> 00:00:31.800
I had been writing Java
for many, many years.

00:00:31.800 --> 00:00:35.340
And in February-ish
of 2016 at base camp,

00:00:35.340 --> 00:00:37.670
we decided to take a
deeper look at Kotlin.

00:00:37.670 --> 00:00:38.600
Kotlin was different.

00:00:38.600 --> 00:00:40.930
Kotlin felt like
it was exciting.

00:00:40.930 --> 00:00:41.640
It was fun.

00:00:41.640 --> 00:00:43.920
It made us much
happier to work with.

00:00:43.920 --> 00:00:45.810
When we heard the
announcement at Google I/O

00:00:45.810 --> 00:00:48.210
that Kotlin was going to
be a first class language,

00:00:48.210 --> 00:00:49.530
we were super excited.

00:00:49.530 --> 00:00:53.237
We knew that that meant for us
better support for the tooling.

00:00:53.237 --> 00:00:55.320
And everything was going
to get better for Kotlin.

00:00:55.320 --> 00:00:57.278
CHRISTINA LEE: First and
foremost, build times,

00:00:57.278 --> 00:00:59.830
they were absolutely insane
when we first started using it.

00:00:59.830 --> 00:01:01.920
It was to the point
where we decided

00:01:01.920 --> 00:01:04.450
to port our entire build system.

00:01:04.450 --> 00:01:07.230
It's been really fun to see
how all of those pain points

00:01:07.230 --> 00:01:08.857
early on have kind
of dissipated.

00:01:08.857 --> 00:01:11.190
And now the build times are
something that we don't even

00:01:11.190 --> 00:01:13.230
have to talk about or
argue about with a bunch

00:01:13.230 --> 00:01:14.670
of other developers.

00:01:14.670 --> 00:01:16.710
One of the things that
we are surprised about

00:01:16.710 --> 00:01:19.970
is how easy it is to quantify
Kotlin's benefit to our code

00:01:19.970 --> 00:01:20.760
base.

00:01:20.760 --> 00:01:23.250
One of the things that
one of my coworkers did

00:01:23.250 --> 00:01:26.280
was pull a graph of the
different high priority

00:01:26.280 --> 00:01:29.700
issues filed against a feature
as he slowly migrated it

00:01:29.700 --> 00:01:32.040
from fully Java to fully Kotlin.

00:01:32.040 --> 00:01:35.274
We would get to the status
quo of 0 most months.

00:01:35.274 --> 00:01:37.440
And then maybe there were
some abnormal months where

00:01:37.440 --> 00:01:38.770
you'd have one serious issue.

00:01:38.770 --> 00:01:40.830
And so that graph just
kind of bottomed out--

00:01:40.830 --> 00:01:43.252
a much more stable code base.

00:01:43.252 --> 00:01:45.210
SCOTT WEBER: There's been
two key improvements.

00:01:45.210 --> 00:01:49.140
One is a broader support and
use of Kotlin in the development

00:01:49.140 --> 00:01:50.880
community, means
that there is many

00:01:50.880 --> 00:01:53.760
more resources,
libraries, tools,

00:01:53.760 --> 00:01:56.100
even articles being written,
that help us to learn

00:01:56.100 --> 00:01:58.820
more and get better and faster.

00:01:58.820 --> 00:02:00.240
Using Kotlin in
Expedia has helped

00:02:00.240 --> 00:02:03.420
us to write more succinct
and easier-to-read code.

00:02:03.420 --> 00:02:06.270
It's also helped make our
developers a lot happier.

00:02:06.270 --> 00:02:07.920
Now that the language
is stabilized,

00:02:07.920 --> 00:02:10.870
we're all much happier
using Kotlin for what we do.

00:02:10.870 --> 00:02:13.110
It's also helped guide us
into writing better code

00:02:13.110 --> 00:02:15.651
and making sure we're
avoiding no pointed problems.

00:02:15.651 --> 00:02:17.400
DAN KIM: The one thing
that we can measure

00:02:17.400 --> 00:02:20.430
is that the code is certainly
more concise and clear.

00:02:20.430 --> 00:02:22.477
And so we're writing
less code overall.

00:02:22.477 --> 00:02:24.060
So I would say that
we write somewhere

00:02:24.060 --> 00:02:27.210
between 15% to 25%
less code overall

00:02:27.210 --> 00:02:28.272
than we would with Java.

00:02:28.272 --> 00:02:29.730
The biggest thing
is that it's made

00:02:29.730 --> 00:02:31.200
us really happy to work with.

00:02:31.200 --> 00:02:33.570
It's really fun, and
interesting, and exciting,

00:02:33.570 --> 00:02:34.680
to work with it.

00:02:34.680 --> 00:02:36.267
And it's just not
something we've ever

00:02:36.267 --> 00:02:37.350
felt with other languages.

00:02:37.350 --> 00:02:40.080
And I've certainly never felt
that with another language.

00:02:40.080 --> 00:02:40.890
JAKE WHARTON: It's
exciting to see

00:02:40.890 --> 00:02:42.515
how quickly the
developer community has

00:02:42.515 --> 00:02:43.980
been adopting Kotlin.

00:02:43.980 --> 00:02:46.560
We're just starting to realize
its full potential on Android.

00:02:46.560 --> 00:02:49.330
We look forward to continuing
to work with both JetBrains

00:02:49.330 --> 00:02:52.290
and UOFF to realize its
full potential on Android.

00:02:52.290 --> 00:02:54.740
[MUSIC PLAYING]

