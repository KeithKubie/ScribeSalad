WEBVTT
Kind: captions
Language: en

00:00:03.334 --> 00:00:05.934
Eric Clayberg: Welcome to
the second day of Google IO.

00:00:05.934 --> 00:00:08.501
I hope everybody is
enjoying their new toys

00:00:08.501 --> 00:00:09.834
and future new toys.

00:00:09.834 --> 00:00:12.701
That was quite
an announcement at the keynote.

00:00:12.701 --> 00:00:17.400
This is "GWT and UI Designer
Enterprise Web UIs Made Easy".

00:00:17.400 --> 00:00:18.901
I'm Eric Clayberg.

00:00:18.901 --> 00:00:23.033
The hashtags for
this session: #io2011 #DevTools,

00:00:23.033 --> 00:00:25.133
and there's
the link for feedback.

00:00:25.133 --> 00:00:27.167
If you'd like
to leave some of it,

00:00:27.167 --> 00:00:29.868
we'd love to have feedback.

00:00:29.868 --> 00:00:31.434
The agenda for this session:

00:00:31.434 --> 00:00:33.868
I'm going to go through
a quick introduction,

00:00:33.868 --> 00:00:38.834
go through some of the
basics of the UI Designer tool,

00:00:38.834 --> 00:00:42.968
do a quick, basic demonstration
of some of those features,

00:00:42.968 --> 00:00:47.067
then go on to some of
the more advanced features.

00:00:47.067 --> 00:00:49.667
Do a second demo at the end
of the session,

00:00:49.667 --> 00:00:54.400
then we'll wrap up,
open it up for Q&amp;A,

00:00:54.400 --> 00:00:56.801
and let you go about
your business.

00:00:56.801 --> 00:01:00.434
So who am I, and what
is the UI Designer?

00:01:00.434 --> 00:01:03.601
A little background.
Again, I'm Eric Clayberg.

00:01:03.601 --> 00:01:04.868
I'm a software
engineering manager

00:01:04.868 --> 00:01:07.400
with the Developer Tools Group
at Google.

00:01:07.400 --> 00:01:09.567
Formerly I was with
Instantiations,

00:01:09.567 --> 00:01:12.634
a Java Eclipse toolmaker
acquired by Google in 2010.

00:01:12.634 --> 00:01:14.767
How many of you
were familiar with

00:01:14.767 --> 00:01:16.701
Instantiations
in the past?

00:01:16.701 --> 00:01:18.367
Oh, great. Thanks.

00:01:18.367 --> 00:01:21.634
I'm also a co-author with
Dan Rubel of the book

00:01:21.634 --> 00:01:26.434
Eclipse Plug-Ins.
Anybody read my book?

00:01:26.434 --> 00:01:28.467
Well, thank you for that.

00:01:28.467 --> 00:01:31.868
You can reach me at
clayberg@google.com.

00:01:31.868 --> 00:01:34.100
GWT Designer was a tool
originally created

00:01:34.100 --> 00:01:37.501
by Instantiations in 2006.

00:01:37.501 --> 00:01:40.067
It was acquired by
Google in 2010,

00:01:40.067 --> 00:01:43.400
and September of last year,
we made it free to everybody

00:01:43.400 --> 00:01:46.300
who wanted to use it,
which was pretty cool.

00:01:46.300 --> 00:01:47.934
It was also
fully integrated

00:01:47.934 --> 00:01:49.934
with the Google plug-in
for Eclipse,

00:01:49.934 --> 00:01:55.000
or the GPE version 2.2,
as the built-in UI designer.

00:01:55.000 --> 00:01:56.634
It comes in two versions.

00:01:56.634 --> 00:01:59.367
There's the embedded
version in the GPE.

00:01:59.367 --> 00:02:01.834
There's also still a full
version that provides

00:02:01.834 --> 00:02:06.000
access to various third
party components like GXT,

00:02:06.000 --> 00:02:09.133
SmartGWT, and a few other
things that I'll mention.

00:02:09.133 --> 00:02:11.868
And the whole thing is
built on the new

00:02:11.868 --> 00:02:14.767
WindowBuilder open-source
project at eclipse.org

00:02:14.767 --> 00:02:18.200
that Google contributed
back in December

00:02:18.200 --> 00:02:24.801
and is going to go out as part
of Eclipse 3.7 in June.

00:02:24.801 --> 00:02:27.801
So the basics of the UI
design--before I go on--

00:02:27.801 --> 00:02:30.300
How many people have
actually played with the tool?

00:02:30.300 --> 00:02:31.834
It's called GWT Designer
in the past.

00:02:31.834 --> 00:02:33.934
Now it's just the UI Designer
and the GPE.

00:02:33.934 --> 00:02:35.334
All right, great.

00:02:35.334 --> 00:02:37.634
Well, hopefully I'll be
able to teach you a few tricks

00:02:37.634 --> 00:02:40.167
that you might
not have run across yet.

00:02:40.167 --> 00:02:41.901
For those of you
who aren't familiar with it,

00:02:41.901 --> 00:02:44.100
we'll talk about
some of the basics.

00:02:44.100 --> 00:02:45.701
So the user interface of
the tool

00:02:45.701 --> 00:02:47.934
is composed of the following
major components.

00:02:47.934 --> 00:02:51.300
There's the Source View, where
you see all your Java source,

00:02:51.300 --> 00:02:55.534
or if you were using UI Binder,
you'd see the XML source.

00:02:55.534 --> 00:02:57.000
Switch to Design tab.

00:02:57.000 --> 00:02:58.434
You see the design surface,

00:02:58.434 --> 00:03:00.934
which has a bunch of
subcomponents to it.

00:03:00.934 --> 00:03:04.067
In the upper left hand corner
you have the Component Tree,

00:03:04.067 --> 00:03:07.467
where you see a hierarchical
view of all the components.

00:03:07.467 --> 00:03:11.334
You have a Property Pane where
you can edit the properties.

00:03:11.334 --> 00:03:13.033
There's a Palette.

00:03:13.033 --> 00:03:15.934
There are a large number
of Wizards you can access

00:03:15.934 --> 00:03:18.300
to create different
UI components,

00:03:18.300 --> 00:03:19.467
and then there are
various Toolbar

00:03:19.467 --> 00:03:21.334
and Context Menu options.

00:03:21.334 --> 00:03:25.400
And I'll touch on each of these
in a little bit more detail.

00:03:25.400 --> 00:03:27.501
Source View--again, there
are separate tabs

00:03:27.501 --> 00:03:29.200
for the source
and the design view.

00:03:29.200 --> 00:03:33.300
You can switch back and forth
between those very easily.

00:03:33.300 --> 00:03:35.868
If you are someone who
likes to see the design view

00:03:35.868 --> 00:03:37.901
and the source view
simultaneously,

00:03:37.901 --> 00:03:40.767
you can also put it into a mode
where you can see both of them

00:03:40.767 --> 00:03:48.534
in a top/bottom or left/right
configuration like this.

00:03:48.534 --> 00:03:51.067
The design view--
basically,

00:03:51.067 --> 00:03:54.534
each different type of layout
or GWT panel type

00:03:54.534 --> 00:03:56.067
has its own unique UI model

00:03:56.067 --> 00:03:59.567
and basic and different
visual feedback.

00:03:59.567 --> 00:04:03.267
You can move and resize
components visually.

00:04:03.267 --> 00:04:04.501
If you hit the space bar,

00:04:04.501 --> 00:04:05.634
you can put it
into direct edit mode

00:04:05.634 --> 00:04:08.567
to change text labels,
check boxes,

00:04:08.567 --> 00:04:10.701
buttons, things
of that nature.

00:04:10.701 --> 00:04:13.901
Depending on the layout manager,
things like layout panels.

00:04:13.901 --> 00:04:17.133
You can also right click
to set attachments

00:04:17.133 --> 00:04:19.334
using pop-up context menus.

00:04:19.334 --> 00:04:21.300
Component tree, again,
is a hierarchal view

00:04:21.300 --> 00:04:22.801
of all the components.

00:04:22.801 --> 00:04:25.834
It shows the variable name
of the component,

00:04:25.834 --> 00:04:27.467
the text of the component.

00:04:27.467 --> 00:04:29.400
You can right click to
cut, copy, and paste.

00:04:29.400 --> 00:04:32.367
Use drag/drop to reorder
and nest components.

00:04:32.367 --> 00:04:36.300
And that component tree
can be docked on any side

00:04:36.300 --> 00:04:38.834
of the editor or
even pulled off

00:04:38.834 --> 00:04:42.834
as a stand-alone view
if you prefer.

00:04:42.834 --> 00:04:45.133
The Properties View shows

00:04:45.133 --> 00:04:49.100
all of the standard common
properties by default.

00:04:49.100 --> 00:04:52.033
If you want, you can also reveal
various advanced properties

00:04:52.033 --> 00:04:54.267
by clicking the little icon
in the corner.

00:04:54.267 --> 00:04:56.934
Those are properties you
typically don't need to access,

00:04:56.934 --> 00:04:58.267
but you might,
and if you need to,

00:04:58.267 --> 00:05:00.167
you can get to them.

00:05:00.167 --> 00:05:02.267
All of the most
important properties

00:05:02.267 --> 00:05:03.667
are highlighted in bold

00:05:03.667 --> 00:05:06.234
so you can
see them quickly.

00:05:06.234 --> 00:05:09.801
There are commands to
automatically convert a widget

00:05:09.801 --> 00:05:11.834
from a local variable
to a field.

00:05:11.834 --> 00:05:15.634
By default, the tool will create
components as local variables,

00:05:15.634 --> 00:05:18.701
which is nice
for things like labels or things

00:05:18.701 --> 00:05:20.868
that you don't need
to communicate with,

00:05:20.868 --> 00:05:22.934
but for things like checkboxes
or text fields

00:05:22.934 --> 00:05:24.467
where you might want
to programmatically

00:05:24.467 --> 00:05:25.834
interact with them,

00:05:25.834 --> 00:05:27.534
you can convert them with
a single click into fields

00:05:27.534 --> 00:05:29.801
in the application.

00:05:29.801 --> 00:05:30.834
You can also directly access

00:05:30.834 --> 00:05:32.367
and jump right to
the source code

00:05:32.367 --> 00:05:35.067
for a particular widget
you're dealing with.

00:05:35.067 --> 00:05:37.267
You can also switch over
to the configured events

00:05:37.267 --> 00:05:39.467
for any component
very easily.

00:05:39.467 --> 00:05:41.534
You can also,
if you right click,

00:05:41.534 --> 00:05:44.467
you can tell the system what you
consider to be the preferred

00:05:44.467 --> 00:05:46.534
or advance properties yourself,

00:05:46.534 --> 00:05:50.300
so you could actually fine-tune
the tool then.

00:05:50.300 --> 00:05:52.901
The Palette has some
commands for doing system

00:05:52.901 --> 00:05:54.901
or marquee level select.

00:05:54.901 --> 00:05:57.634
You can choose any
components,

00:05:57.634 --> 00:05:59.167
whether they're on
the palette or not,

00:05:59.167 --> 00:06:00.767
using the choose
component command,

00:06:00.767 --> 00:06:03.267
so that's nice if you've created
your own custom components,

00:06:03.267 --> 00:06:05.000
or if you have some
third party components

00:06:05.000 --> 00:06:08.801
that aren't on the palette yet,
you can easily access them.

00:06:08.801 --> 00:06:10.501
In the full version,
there are special palettes

00:06:10.501 --> 00:06:13.367
for GXT and SmartGWT,

00:06:13.367 --> 00:06:15.667
and you can add your
own palettes and categories

00:06:15.667 --> 00:06:17.300
very easily.

00:06:17.300 --> 00:06:20.400
Just like the Property
Pane and Component Tree,

00:06:20.400 --> 00:06:22.267
you can dock the Palette
to any side of the editor

00:06:22.267 --> 00:06:25.801
or pull it off to
a separate stand-alone view.

00:06:25.801 --> 00:06:28.133
And the palette is also
fully customizable by the user,

00:06:28.133 --> 00:06:29.667
so if you right
click on it,

00:06:29.667 --> 00:06:31.767
you can get this
customization dialogue,

00:06:31.767 --> 00:06:34.968
where you can rearrange the
categories, add/remove widgets,

00:06:34.968 --> 00:06:38.968
export the palette
to a XML file

00:06:38.968 --> 00:06:40.801
to share with
other developer members.

00:06:40.801 --> 00:06:44.400
If you actually store
the palette in the project,

00:06:44.400 --> 00:06:46.534
then that project will
automatically adapt

00:06:46.534 --> 00:06:48.033
to that palette.

00:06:48.033 --> 00:06:51.968
So if you've got a project,
you're working with a team

00:06:51.968 --> 00:06:54.200
and you want to configure
the palette for the entire team,

00:06:54.200 --> 00:06:55.601
you can do that very easily.

00:06:55.601 --> 00:06:57.033
Just store the palette
file in the project.

00:06:57.033 --> 00:07:02.067
Everybody on the team will
then use that same palette.

00:07:02.067 --> 00:07:06.133
The full version has a very
large number of UI wizards

00:07:06.133 --> 00:07:08.400
which you can
access using the File,

00:07:08.400 --> 00:07:11.801
New, Other, WindowBuilder,
GWT Designer Link.

00:07:11.801 --> 00:07:15.000
There's also a drop-down
toolbar menu

00:07:15.000 --> 00:07:17.400
on the main Eclipse toolbar
that you can access

00:07:17.400 --> 00:07:20.300
that shows those various
categories.

00:07:20.300 --> 00:07:22.367
And there are dozens of
templates for creating

00:07:22.367 --> 00:07:27.801
GWT Java, UI Binder, MVP, GXT,
and SmartGWT components.

00:07:27.801 --> 00:07:32.200
And finally, a large
number of context menu commands,

00:07:32.200 --> 00:07:34.634
toolbar options, things like
cut, copy, paste,

00:07:34.634 --> 00:07:38.234
alignment and distribution,
deleting components,

00:07:38.234 --> 00:07:40.868
ordering and
selecting components,

00:07:40.868 --> 00:07:42.267
renaming components--

00:07:42.267 --> 00:07:44.601
if you want to rename multiple
instance variables

00:07:44.601 --> 00:07:46.834
at the same time,
you can do that--

00:07:46.834 --> 00:07:48.200
Add event handlers,

00:07:48.200 --> 00:07:52.400
and access morphing
of factory tools.

00:07:52.400 --> 00:07:54.300
This is just a quick
comparison of

00:07:54.300 --> 00:07:56.801
the sort of the two main flavors
of the UI Designer,

00:07:56.801 --> 00:07:59.367
the embedded version versus
the fuller version.

00:07:59.367 --> 00:08:01.133
Again, both versions support

00:08:01.133 --> 00:08:05.033
all the standard GWT widgets
and panel types.

00:08:05.033 --> 00:08:08.968
Both support both Java
and UI Binder-based UIs.

00:08:08.968 --> 00:08:12.567
The full version adds
support for additional

00:08:12.567 --> 00:08:16.868
third party widgets
like GXT and SmartGWT.

00:08:16.868 --> 00:08:19.534
There are also a much
larger number of

00:08:19.534 --> 00:08:21.701
built-in wizards accessible.

00:08:21.701 --> 00:08:23.801
The full version also has a lot
more customization options,

00:08:23.801 --> 00:08:25.267
but the basic
version has sort of

00:08:25.267 --> 00:08:26.801
the primary ones
that you need.

00:08:26.801 --> 00:08:27.901
And the most important
thing is both versions

00:08:27.901 --> 00:08:31.567
are completely free,
thanks to Google.

00:08:31.567 --> 00:08:34.300
So now I'm going to jump
into a quick demo

00:08:34.300 --> 00:08:42.601
of some of the basic
features.

00:08:42.601 --> 00:08:45.801
So here I have a standard
entry point--

00:08:45.801 --> 00:08:48.033
very simple Java class.

00:08:48.033 --> 00:08:50.834
It shows up as an empty box
in this case.

00:08:50.834 --> 00:08:55.167
The root panel by default is
in a sort of absolute layout,

00:08:55.167 --> 00:08:58.868
so if I were to
drop various widgets,

00:08:58.868 --> 00:09:01.701
notice you get
various drop feedback.

00:09:01.701 --> 00:09:07.267
There are margin
alignments you can select.

00:09:07.267 --> 00:09:10.067
If I drop it in the corner,
that widget will go there.

00:09:10.067 --> 00:09:13.534
Automatically goes
into direct edit mode.

00:09:13.534 --> 00:09:16.834
Give it a name, and notice
it automatically selected

00:09:16.834 --> 00:09:19.634
the variable name based
on the text I entered.

00:09:19.634 --> 00:09:24.200
If I add a second widget, notice
you get automatic alignment,

00:09:24.200 --> 00:09:26.934
drop zones if you want.

00:09:26.934 --> 00:09:32.300
I can also drop and resize
a widget at the same time.

00:09:32.300 --> 00:09:36.200
And there are handy
commands in the toolbar

00:09:36.200 --> 00:09:43.067
for doing things like
left-right-center alignment,

00:09:43.067 --> 00:09:45.167
making the widgets
all the same size,

00:09:45.167 --> 00:09:47.067
distributing them
horizontally,

00:09:47.067 --> 00:09:49.601
vertically, centering them,

00:09:49.601 --> 00:09:54.300
all kinds of things like that
for absolute layouts.

00:09:54.300 --> 00:09:56.968
Some of the, uh--

00:09:56.968 --> 00:10:00.767
I mentioned that the palette
and this structure view

00:10:00.767 --> 00:10:03.133
composed of component
and property view are--

00:10:03.133 --> 00:10:04.767
you can move them around,
so if I want to,

00:10:04.767 --> 00:10:06.767
I can just drag the palette
to the other side of the screen,

00:10:06.767 --> 00:10:08.901
if you like
that particular layout.

00:10:08.901 --> 00:10:11.300
And again if I right click,

00:10:11.300 --> 00:10:13.934
I can bring up
the palette manager

00:10:13.934 --> 00:10:17.634
and rearrange the categories,

00:10:17.634 --> 00:10:20.033
remove categories
that I'm not using,

00:10:20.033 --> 00:10:22.000
remove widgets
that I'm not using,

00:10:22.000 --> 00:10:25.033
add widgets that I might have
that I've created custom,

00:10:25.033 --> 00:10:27.133
and then easily export that

00:10:27.133 --> 00:10:30.100
and share that
with other team members.

00:10:30.100 --> 00:10:33.100
Other types of layouts,
since I mentioned

00:10:33.100 --> 00:10:35.868
they all have
different feedbacks.

00:10:35.868 --> 00:10:37.901
A standard flow panel.

00:10:37.901 --> 00:10:40.567
I'll just drop one of
these in here.

00:10:40.567 --> 00:10:43.901
And if I drop some widgets
on that,

00:10:43.901 --> 00:10:45.734
you see that they just
basically drop in

00:10:45.734 --> 00:10:50.801
in a left-right manner.

00:10:50.801 --> 00:10:53.567
And I can drop widgets
in between other widgets

00:10:53.567 --> 00:10:55.567
and they flow perfectly

00:10:55.567 --> 00:10:59.000
according to
that particular layout.

00:10:59.000 --> 00:11:04.267
I'll show you a, uh,

00:11:04.267 --> 00:11:08.701
I'll show you a grid
and a flex table.

00:11:08.701 --> 00:11:10.868
The grid is basically
rows and columns,

00:11:10.868 --> 00:11:12.100
so the first widget I drop in

00:11:12.100 --> 00:11:15.334
goes into
the only available cell.

00:11:15.334 --> 00:11:17.968
And I can basically add
new rows and columns

00:11:17.968 --> 00:11:23.601
by dropping on any of the sides
of the existing layout here.

00:11:23.601 --> 00:11:28.100
So I automatically add
a new column and add a new row,

00:11:28.100 --> 00:11:31.400
and you can do things
like tell it to--a widget

00:11:31.400 --> 00:11:36.667
to fill a particular cell
if you want to--oops.

00:11:36.667 --> 00:11:38.534
Very simple.

00:11:38.534 --> 00:11:40.534
Now the grid widget,

00:11:40.534 --> 00:11:44.467
the grid panel,
is quite simple.

00:11:44.467 --> 00:11:46.701
Contrast that with
the flex table,

00:11:46.701 --> 00:11:52.801
which, as its name suggests,
is a bit more flexible.

00:11:52.801 --> 00:11:54.267
Once I drop a few widgets
in here,

00:11:54.267 --> 00:11:56.801
I can do a couple additional
things.

00:11:56.801 --> 00:12:00.234
Let me get a couple in here.

00:12:00.234 --> 00:12:01.501
Tell this to fill.

00:12:01.501 --> 00:12:02.934
But then I can do things

00:12:02.934 --> 00:12:04.667
like have it span multiple
rows and columns.

00:12:04.667 --> 00:12:08.534
So by dragging this little
green handle over,

00:12:08.534 --> 00:12:14.133
I can have that widget expand to
fill an entire row

00:12:14.133 --> 00:12:17.934
or an entire column
very easily.

00:12:17.934 --> 00:12:19.834
Again, if I want
to direct edit,

00:12:19.834 --> 00:12:21.801
I can just hit the space bar

00:12:21.801 --> 00:12:26.400
and put the widget into direct
edit to change its labels.

00:12:26.400 --> 00:12:28.868
Over here on the property view,

00:12:28.868 --> 00:12:31.534
you can see all the various
properties

00:12:31.534 --> 00:12:33.267
for the component in context.

00:12:33.267 --> 00:12:35.701
Some of these properties
are expandable

00:12:35.701 --> 00:12:38.234
to show you various
sub-properties,

00:12:38.234 --> 00:12:39.901
such as various
alignment options,

00:12:39.901 --> 00:12:42.200
things like that.

00:12:42.200 --> 00:12:44.968
You also set things like
CSS dials and so on.

00:12:44.968 --> 00:12:56.601
I'll show that actually
in the more advanced demo.

00:12:56.601 --> 00:13:08.434
All right, I'm going to
switch back to the slides here.

00:13:08.434 --> 00:13:10.501
So let's talk about some
of the more advanced

00:13:10.501 --> 00:13:11.701
features of the tool,

00:13:11.701 --> 00:13:13.934
where it starts to get
really interesting.

00:13:13.934 --> 00:13:17.300
So the tool has quite a
few pretty interesting features.

00:13:17.300 --> 00:13:19.634
Many of them are actually
quite unique

00:13:19.634 --> 00:13:23.133
for a Java-based UI designer.

00:13:23.133 --> 00:13:25.400
First, obviously, almost
any GUI builder

00:13:25.400 --> 00:13:28.868
needs to have
a WYSIWYG layout.

00:13:28.868 --> 00:13:30.667
But one of the nice things
we have

00:13:30.667 --> 00:13:32.834
is a truly bi-directional
code generation.

00:13:32.834 --> 00:13:35.834
So as we start editing
in the design view,

00:13:35.834 --> 00:13:37.801
if I show you
the source view,

00:13:37.801 --> 00:13:40.334
as I add widgets,

00:13:40.334 --> 00:13:43.234
you'll see those automatically
added to the source view,

00:13:43.234 --> 00:13:46.300
and that second widget,
and a third widget.

00:13:46.300 --> 00:13:47.868
And then if I go
into the source view,

00:13:47.868 --> 00:13:49.601
and make a change
in the source view,

00:13:49.601 --> 00:13:52.133
that change is immediately
reflected in the design view.

00:13:52.133 --> 00:13:54.901
So you could actually work
comfortably in either place,

00:13:54.901 --> 00:13:57.267
and the two will
automatically parse

00:13:57.267 --> 00:13:59.133
back and forth in
either direction.

00:13:59.133 --> 00:14:01.968
One of the nice features
of this is something

00:14:01.968 --> 00:14:03.834
we call micro-editing.

00:14:03.834 --> 00:14:05.667
So if you were to go into
the design view,

00:14:05.667 --> 00:14:08.634
change the label on a component,

00:14:08.634 --> 00:14:11.801
it makes the smallest possible
change to the source code

00:14:11.801 --> 00:14:13.234
that it can.

00:14:13.234 --> 00:14:15.400
So in this case it will update
just that one string.

00:14:15.400 --> 00:14:16.734
Now the nice thing
about that is,

00:14:16.734 --> 00:14:18.267
if you've actually
formatted your code,

00:14:18.267 --> 00:14:20.868
or re-factored your code,
or moved things around,

00:14:20.868 --> 00:14:22.601
it doesn't rewrite
the entire class.

00:14:22.601 --> 00:14:24.934
It literally, it actually
has an AST model of

00:14:24.934 --> 00:14:26.701
the entire UI class.

00:14:26.701 --> 00:14:28.234
It knows exactly
where that string is.

00:14:28.234 --> 00:14:30.234
It changes
just that string for you.

00:14:30.234 --> 00:14:32.434
I think it's one of the only
UI tools in the world

00:14:32.434 --> 00:14:35.534
that actually
works that way.

00:14:35.534 --> 00:14:37.000
I mentioned the parser.

00:14:37.000 --> 00:14:39.100
It has a very powerful
and flexible code parser.

00:14:39.100 --> 00:14:41.934
Not only can it parse
its own code,

00:14:41.934 --> 00:14:44.667
it can generally parse most
handwritten code quite well,

00:14:44.667 --> 00:14:47.133
typically in the 80-90% range.

00:14:47.133 --> 00:14:49.300
We're quite
successful with that.

00:14:49.300 --> 00:14:51.100
There are no protected
code blocks,

00:14:51.100 --> 00:14:55.601
so there's nothing that says,
"Your code must go here."

00:14:55.601 --> 00:14:59.067
You can basically put your own
modifications anywhere you like.

00:14:59.067 --> 00:15:02.901
Since it creates a structure
of the entire UI class,

00:15:02.901 --> 00:15:05.434
it knows exactly
where the UI code is.

00:15:05.434 --> 00:15:08.167
It can differentiate
that from model code

00:15:08.167 --> 00:15:10.501
or any other code that you might
have written by hand.

00:15:10.501 --> 00:15:12.501
It has a very nice
understanding of data flow.

00:15:12.501 --> 00:15:17.200
So if you were to re-factor
an existing layout,

00:15:17.200 --> 00:15:19.267
maybe rather than having all
these widgets defined

00:15:19.267 --> 00:15:20.467
in one method,

00:15:20.467 --> 00:15:21.901
you could actually use
extract method,

00:15:21.901 --> 00:15:24.300
pull a few of them
out into a second method,

00:15:24.300 --> 00:15:25.767
and it'll be
perfectly happy.

00:15:25.767 --> 00:15:27.501
It'll continue to update
the widgets,

00:15:27.501 --> 00:15:30.968
whatever method they're in,
and so on.

00:15:30.968 --> 00:15:33.067
It ignores and
preserves non-UI codes.

00:15:33.067 --> 00:15:34.567
So again, if you've added
your own code,

00:15:34.567 --> 00:15:37.100
in line or anywhere
in the class,

00:15:37.100 --> 00:15:38.834
it'll ignore it, preserve it.

00:15:38.834 --> 00:15:40.400
The formatting
remains unchanged.

00:15:40.400 --> 00:15:42.934
Again, since it's making
micro-edits.

00:15:42.934 --> 00:15:46.167
There's never a point where
it regenerates the entire class

00:15:46.167 --> 00:15:47.868
and messes up
the formatting

00:15:47.868 --> 00:15:50.033
or does anything like that.

00:15:50.033 --> 00:15:51.801
Again,
very re-factoring friendly,

00:15:51.801 --> 00:15:53.968
resilient
to hand-made changes.

00:15:53.968 --> 00:15:55.834
And one key aspect
is that there

00:15:55.834 --> 00:15:57.501
is a true one-to-one
relationship

00:15:57.501 --> 00:16:00.501
between what
you see in the UI design

00:16:00.501 --> 00:16:03.667
and what's in the Java
or XML code for UI Binder.

00:16:03.667 --> 00:16:07.934
There's no secondary
metadata file

00:16:07.934 --> 00:16:11.133
that are often used
in other UI tools

00:16:11.133 --> 00:16:12.601
that can get out of sync.

00:16:12.601 --> 00:16:16.767
So, the tool basically
parses the Java code,

00:16:16.767 --> 00:16:19.000
and everything about
the design is derived from that.

00:16:19.000 --> 00:16:24.334
There's nothing else
that you need to worry about.

00:16:24.334 --> 00:16:27.834
The tool can read or write
almost any style,

00:16:27.834 --> 00:16:32.901
so if you have a particular
style of Java coding

00:16:32.901 --> 00:16:35.601
that you like, you can
actually adapt the output

00:16:35.601 --> 00:16:36.801
to almost anything you like.

00:16:36.801 --> 00:16:40.100
So for example, when
generating new widgets,

00:16:40.100 --> 00:16:41.400
you can have them
generated

00:16:41.400 --> 00:16:43.701
as local variables
or as fields.

00:16:43.701 --> 00:16:45.601
If you want them all as fields,
you can do that.

00:16:45.601 --> 00:16:47.300
You can have them all
generated as local variables

00:16:47.300 --> 00:16:49.234
and then selectively
decide which ones you want

00:16:49.234 --> 00:16:53.367
to make fields later on.

00:16:53.367 --> 00:16:57.234
It also supports sort of
a flat layout versus

00:16:57.234 --> 00:16:58.968
sort of a nested block layout.

00:16:58.968 --> 00:17:00.734
So if you have
a hierarchal components,

00:17:00.734 --> 00:17:02.868
you could actually see those
in nested blocks,

00:17:02.868 --> 00:17:05.067
which some people like.

00:17:05.067 --> 00:17:07.667
Also, you can do
pre-initialized fields.

00:17:07.667 --> 00:17:09.767
Rather than having
the widgets initialized in line,

00:17:09.767 --> 00:17:12.701
they're actually initialized
where they were created.

00:17:12.701 --> 00:17:18.667
And finally, for anybody coming
from the far distant

00:17:18.667 --> 00:17:20.467
VA Java world,

00:17:20.467 --> 00:17:22.234
you might remember
the lazy declaration style

00:17:22.234 --> 00:17:23.534
from VA Java,

00:17:23.534 --> 00:17:25.601
where you have each widget
defining its own method.

00:17:25.601 --> 00:17:31.000
We support that kind
of generation as well.

00:17:31.000 --> 00:17:34.267
Tool supports very nice
internationalization.

00:17:34.267 --> 00:17:36.934
So initially if you're
just dropping widgets

00:17:36.934 --> 00:17:38.300
on the canvas,

00:17:38.300 --> 00:17:39.868
you're going to have
a bunch of hard-coded strings

00:17:39.868 --> 00:17:42.634
for each of those widgets--
not something you want to have

00:17:42.634 --> 00:17:44.200
if you have an internationalized
app obviously.

00:17:44.200 --> 00:17:48.901
You want to pull those strings
out into resource bundles.

00:17:48.901 --> 00:17:54.901
So we start by clicking on
the little world icon up here

00:17:54.901 --> 00:17:56.467
in the toolbar,

00:17:56.467 --> 00:17:58.667
and that opens up the
externalized strings dialog,

00:17:58.667 --> 00:18:01.667
and identifies
all of the strings

00:18:01.667 --> 00:18:03.367
in that parallel application
here.

00:18:03.367 --> 00:18:05.467
There are basically
two widgets with strings.

00:18:05.467 --> 00:18:06.934
And we need a place to
actually extract that to,

00:18:06.934 --> 00:18:09.334
so we need to actually
create a string source.

00:18:09.334 --> 00:18:12.901
In this case we want to
generate an app constance class

00:18:12.901 --> 00:18:14.534
that's going to
hold those definitions

00:18:14.534 --> 00:18:16.334
for those extracted strings.

00:18:16.334 --> 00:18:17.400
So let's give an example
of the code

00:18:17.400 --> 00:18:18.701
it's going to generate.

00:18:18.701 --> 00:18:20.434
So, I'll go ahead
and do that.

00:18:20.434 --> 00:18:23.968
Select all of the widgets
and tell it to externalize them,

00:18:23.968 --> 00:18:26.200
and then what it
does is automatically

00:18:26.200 --> 00:18:29.234
creates keys
and values for you.

00:18:29.234 --> 00:18:32.334
Now at this point, we just
have a single default locale.

00:18:32.334 --> 00:18:34.133
If we want to deal
with multiple locales,

00:18:34.133 --> 00:18:37.901
different languages, we just
click on the new locale button.

00:18:37.901 --> 00:18:39.834
That brings up a list of
known locales,

00:18:39.834 --> 00:18:42.400
or you can create your own
combination of

00:18:42.400 --> 00:18:44.067
language and country code.

00:18:44.067 --> 00:18:47.200
I'll pick French here,
and it generates a new locale.

00:18:47.200 --> 00:18:50.267
I've already provided
the translations,

00:18:50.267 --> 00:18:53.968
or at least what Google told me
the translations were.

00:18:53.968 --> 00:18:56.801
I apologize to anybody
who actually speaks French.

00:18:56.801 --> 00:18:58.701
And then the tool
goes and generates

00:18:58.701 --> 00:19:01.767
the appropriate resource
property files.

00:19:01.767 --> 00:19:04.934
So we have a default locale
with English translations,

00:19:04.934 --> 00:19:07.868
and our French locale
with the French translations.

00:19:07.868 --> 00:19:10.567
And now you notice
that up in the toolbar,

00:19:10.567 --> 00:19:13.968
that the drop-down list now
actually shows us the locales

00:19:13.968 --> 00:19:15.033
that we have in play here.

00:19:15.033 --> 00:19:16.701
So if I select the first locale,

00:19:16.701 --> 00:19:19.901
you see that the strings all
update to show the French text.

00:19:19.901 --> 00:19:21.767
If I switch back to
the default locale,

00:19:21.767 --> 00:19:25.367
it switches back to
the default text.

00:19:25.367 --> 00:19:28.467
The nice thing is, I could
actually continue to work.

00:19:28.467 --> 00:19:30.667
If I were to make changes
to these widgets

00:19:30.667 --> 00:19:34.567
and change their text,
rather than updating the text

00:19:34.567 --> 00:19:36.000
in the actual source
of the class,

00:19:36.000 --> 00:19:37.701
it'll actually update
the appropriate property file.

00:19:37.701 --> 00:19:40.334
So if I'm in the default locale,

00:19:40.334 --> 00:19:42.801
it'll update the default
properties file.

00:19:42.801 --> 00:19:44.501
If I'm in the French mode,

00:19:44.501 --> 00:19:46.667
it'll update
the French property file.

00:19:46.667 --> 00:19:48.968
And I can also go down here,
change the property files,

00:19:48.968 --> 00:19:50.601
and then see
the results reflected back

00:19:50.601 --> 00:19:54.667
in the UI if I want.

00:19:54.667 --> 00:19:59.734
Tool also has very nice
support for visual inheritance,

00:19:59.734 --> 00:20:02.834
both through hierarchies--

00:20:02.834 --> 00:20:04.334
so visual hierarchies,

00:20:04.334 --> 00:20:06.834
like a base class with
a couple of ace widgets,

00:20:06.834 --> 00:20:08.868
and various
derived subclasses,

00:20:08.868 --> 00:20:10.167
or containment hierarchies.

00:20:10.167 --> 00:20:11.701
So if you want to create
a custom composite,

00:20:11.701 --> 00:20:14.634
expose some components,
and then show that.

00:20:14.634 --> 00:20:15.901
I'll actually do
a demonstration of this

00:20:15.901 --> 00:20:17.467
a little bit later.

00:20:17.467 --> 00:20:18.767
So visual inheritance,

00:20:18.767 --> 00:20:20.567
let's start with a real
simple example here

00:20:20.567 --> 00:20:22.167
with a couple of widgets.

00:20:22.167 --> 00:20:25.234
One of the things I can do is
I can expose various properties.

00:20:25.234 --> 00:20:27.567
So if I wanted to actually
make this reusable,

00:20:27.567 --> 00:20:29.234
you know, and invent
a subclass,

00:20:29.234 --> 00:20:31.267
or maybe if it was
a composite,

00:20:31.267 --> 00:20:34.567
I'd want to expose things
like the text on this label

00:20:34.567 --> 00:20:36.601
so I could actually change it
somewhere else.

00:20:36.601 --> 00:20:37.868
So I could right click.

00:20:37.868 --> 00:20:39.667
If I right click on
that text property,

00:20:39.667 --> 00:20:42.834
and select the expose
property command,

00:20:42.834 --> 00:20:46.868
it offers to create
a new property,

00:20:46.868 --> 00:20:50.634
new public property
with accessors,

00:20:50.634 --> 00:20:54.033
and it goes ahead and generates
the appropriate--

00:20:54.033 --> 00:20:56.033
I don't know if you can see
that at this resolution--

00:20:56.033 --> 00:20:58.267
but it generated basically
an accessor pair

00:20:58.267 --> 00:21:00.400
for that particular
label property,

00:21:00.400 --> 00:21:03.801
or the text property of
that particular label.

00:21:03.801 --> 00:21:05.334
And then I can also,
if I want to,

00:21:05.334 --> 00:21:06.334
expose an entire widget--

00:21:06.334 --> 00:21:07.634
for example,
maybe this button here,

00:21:07.634 --> 00:21:09.133
if I want to change
its label--

00:21:09.133 --> 00:21:11.501
maybe I want to be able to add
an event handler to it.

00:21:11.501 --> 00:21:12.834
I want to be able to
basically access it

00:21:12.834 --> 00:21:15.200
publicly from
somewhere else,

00:21:15.200 --> 00:21:16.901
so I can right click
on the widget,

00:21:16.901 --> 00:21:18.567
select expose widget.

00:21:18.567 --> 00:21:20.634
It offers to create
an accessor,

00:21:20.634 --> 00:21:23.000
and then generates
an accessor for it.

00:21:23.000 --> 00:21:25.968
Now once you've done that,
now I've got a subclass.

00:21:25.968 --> 00:21:27.634
Now the subclass
automatically shows

00:21:27.634 --> 00:21:29.934
the widgets inherited
from the parent,

00:21:29.934 --> 00:21:31.868
although I can't actually
click on any of them

00:21:31.868 --> 00:21:33.868
except for the button.

00:21:33.868 --> 00:21:37.234
And now I can basically
add additional widgets

00:21:37.234 --> 00:21:40.334
to the subclass,

00:21:40.334 --> 00:21:43.934
and also change the public
properties

00:21:43.934 --> 00:21:45.267
of the inherited components.

00:21:45.267 --> 00:21:47.934
So for example, I added
this last name field.

00:21:47.934 --> 00:21:49.968
Well, maybe I want to change
that label up here

00:21:49.968 --> 00:21:51.167
to first name,

00:21:51.167 --> 00:21:53.434
so I can just change
that label text,

00:21:53.434 --> 00:21:56.834
and it basically
reflects that properly.

00:21:56.834 --> 00:21:58.868
So this label text
property was basically

00:21:58.868 --> 00:22:00.634
the one we created
in the earlier step,

00:22:00.634 --> 00:22:03.968
and it was automatically picked
up by reflection.

00:22:03.968 --> 00:22:06.334
And you can see the source
code was generated using

00:22:06.334 --> 00:22:08.033
that new property.

00:22:08.033 --> 00:22:09.634
Likewise, I can change
properties of

00:22:09.634 --> 00:22:10.901
the inherited fields.

00:22:10.901 --> 00:22:12.734
If I want to, I could
direct edit the button,

00:22:12.734 --> 00:22:14.300
change its label,

00:22:14.300 --> 00:22:15.801
and it goes ahead
and uses the accessor

00:22:15.801 --> 00:22:18.701
for the button and then changes
the appropriate property.

00:22:18.701 --> 00:22:20.868
But I could add an event handler
or pretty much do anything

00:22:20.868 --> 00:22:25.267
to the widget that I wanted
to at this point.

00:22:25.267 --> 00:22:27.200
Now, UI Factories.

00:22:27.200 --> 00:22:30.234
Another useful way to be
able to reuse components--

00:22:30.234 --> 00:22:31.367
you can create your own.

00:22:31.367 --> 00:22:32.934
Obviously you can create
custom widgets,

00:22:32.934 --> 00:22:34.734
create composites of widgets.

00:22:34.734 --> 00:22:37.067
But if you just have cases where
you want to have, you know,

00:22:37.067 --> 00:22:39.133
a variety of say,
customized buttons,

00:22:39.133 --> 00:22:41.300
maybe a search button,

00:22:41.300 --> 00:22:44.667
or almost any kind of widget
where you're going to be using

00:22:44.667 --> 00:22:46.434
the same widget
definition,

00:22:46.434 --> 00:22:48.234
the same properties over
and over again,

00:22:48.234 --> 00:22:51.467
you can basically right click
on the widget,

00:22:51.467 --> 00:22:53.734
select the factory,
Create Factory command,

00:22:53.734 --> 00:22:56.234
and that pops up a wizard
where you can tell it

00:22:56.234 --> 00:22:58.267
the factory class
you want to create,

00:22:58.267 --> 00:23:00.033
the name of the method
you want to create,

00:23:00.033 --> 00:23:02.667
and it shows the various
properties of the widget.

00:23:02.667 --> 00:23:06.667
In this case for our
little search button,

00:23:06.667 --> 00:23:11.267
we want to create a new static
method on this factory class

00:23:11.267 --> 00:23:12.901
that creates the button
and returns it.

00:23:12.901 --> 00:23:15.234
But you can imagine, this could
be arbitrarily complex

00:23:15.234 --> 00:23:16.434
with other properties,

00:23:16.434 --> 00:23:18.601
and then this actual
factory element

00:23:18.601 --> 00:23:19.934
can actually be added
to the palette

00:23:19.934 --> 00:23:21.267
as a first class element.

00:23:21.267 --> 00:23:23.267
So if I wanted to add a whole
bunch of search buttons

00:23:23.267 --> 00:23:26.000
to a layout, or use them
over and over again,

00:23:26.000 --> 00:23:27.767
I could do
that very easily.

00:23:27.767 --> 00:23:34.000
And here's another example
where they take this label here.

00:23:34.000 --> 00:23:36.000
Maybe I'd made it
right justified

00:23:36.000 --> 00:23:37.434
and done a whole bunch of
other things to it.

00:23:37.434 --> 00:23:39.667
I can extract various
properties,

00:23:39.667 --> 00:23:41.734
maybe have it
pass in the string

00:23:41.734 --> 00:23:43.167
while hard-coding
other properties.

00:23:43.167 --> 00:23:46.701
So you could make these
fully parameterized,

00:23:46.701 --> 00:23:52.000
and then hard code various
properties inside the factory.

00:23:52.000 --> 00:23:54.801
Tool also has a morphing
capability,

00:23:54.801 --> 00:23:57.634
which basically lets you change
any widget type

00:23:57.634 --> 00:23:58.934
into another widget type.

00:23:58.934 --> 00:24:01.667
So for example, if I had
started out with a button,

00:24:01.667 --> 00:24:03.200
I could right click morph.

00:24:03.200 --> 00:24:05.968
It shows a bunch of
similar types,

00:24:05.968 --> 00:24:08.100
as well as I could
access subclasses

00:24:08.100 --> 00:24:10.701
or any arbitrary widget I want,

00:24:10.701 --> 00:24:13.234
and it actually will,
in the UI,

00:24:13.234 --> 00:24:15.400
change that widget from
one type to another,

00:24:15.400 --> 00:24:16.868
maps over all the properties

00:24:16.868 --> 00:24:19.400
and updates
all the source code for you.

00:24:19.400 --> 00:24:21.834
So for example,
I can change button types,

00:24:21.834 --> 00:24:24.434
or a real common case here
would be if you started out

00:24:24.434 --> 00:24:25.701
with a list box

00:24:25.701 --> 00:24:27.133
and you discovered later on
in your UI

00:24:27.133 --> 00:24:29.868
that you didn't have enough room
for a full list box

00:24:29.868 --> 00:24:31.968
and you wanted to convert it
into a drop down list,

00:24:31.968 --> 00:24:33.234
you could basically do that

00:24:33.234 --> 00:24:34.734
and it preserves
all the widget properties

00:24:34.734 --> 00:24:36.567
that you set up at that point--
event handlers,

00:24:36.567 --> 00:24:39.067
anything like that
that makes sense.

00:24:39.067 --> 00:24:40.834
And again of course,

00:24:40.834 --> 00:24:43.400
it wouldn't be useful if it
didn't provide full support

00:24:43.400 --> 00:24:46.400
for all the various built in
widget types

00:24:46.400 --> 00:24:48.701
and all the various
panel types in GWT.

00:24:48.701 --> 00:24:51.300
And it does that, so, there's
like absolute panel,

00:24:51.300 --> 00:24:56.968
flow panel, doc panel, grid,
flex table, layout panel,

00:24:56.968 --> 00:25:02.601
and pretty much everything
in between.

00:25:02.601 --> 00:25:04.767
And the last slide

00:25:04.767 --> 00:25:07.300
before I go into the more
advanced demo

00:25:07.300 --> 00:25:10.100
also supports
graphical menu editing.

00:25:10.100 --> 00:25:13.734
So if you want to put
menus in your application,

00:25:13.734 --> 00:25:17.734
you can start by dropping
in a menu bar,

00:25:17.734 --> 00:25:23.167
and then you can drop a cascade
submenu in there,

00:25:23.167 --> 00:25:26.901
start adding items to it.

00:25:26.901 --> 00:25:30.033
I could add cascading
submenus out to other levels,

00:25:30.033 --> 00:25:32.934
add submenus to that.

00:25:32.934 --> 00:25:35.767
Add separators.

00:25:35.767 --> 00:25:40.033
I can use drag/drop to
rearrange those menu items.

00:25:40.033 --> 00:25:43.434
And again, I can also use
direct edit to edit

00:25:43.434 --> 00:25:45.567
any of those menu items.

00:25:45.567 --> 00:25:53.934
So, very easy to create
menu bars and menus.

00:25:53.934 --> 00:25:55.701
So the next few minutes

00:25:55.701 --> 00:26:00.634
I'm going to switch back into

00:26:00.634 --> 00:26:02.667
the live demo here

00:26:02.667 --> 00:26:06.968
and show some of the more
advance features.

00:26:06.968 --> 00:26:11.367
So just to start off with some
of the bi-directional editing

00:26:11.367 --> 00:26:12.701
I showed you earlier.

00:26:12.701 --> 00:26:17.901
If I drop a button on
the screen, give it some text,

00:26:17.901 --> 00:26:21.801
switch back over to
the source,

00:26:21.801 --> 00:26:24.067
change the label,

00:26:24.067 --> 00:26:26.634
instantaneously reflect it
back in the design view.

00:26:26.634 --> 00:26:28.501
So again, you can work
in either direction.

00:26:28.501 --> 00:26:30.434
If I were to put this
into the mode

00:26:30.434 --> 00:26:32.734
where you actually saw the
source and design view

00:26:32.734 --> 00:26:35.167
simultaneously, you could
actually be typing

00:26:35.167 --> 00:26:36.534
in the source view

00:26:36.534 --> 00:26:37.834
and then you can set it
to how fast,

00:26:37.834 --> 00:26:39.734
how often it synchronizes,

00:26:39.734 --> 00:26:41.601
and then watch it update
the design view.

00:26:41.601 --> 00:26:45.901
So a very nice way to--even if
you prefer to work in source,

00:26:45.901 --> 00:26:48.634
it's a really nice way to see
a live preview

00:26:48.634 --> 00:26:50.400
of what the UI's going to
look like

00:26:50.400 --> 00:26:51.801
without having to go through

00:26:51.801 --> 00:26:54.100
actually launching
the application,

00:26:54.100 --> 00:26:55.901
going through dev mode,
all of that.

00:26:55.901 --> 00:27:00.133
It's basically sort of
instantaneous feedback for you.

00:27:00.133 --> 00:27:07.234
Let's--Let me add a couple
more widgets here.

00:27:07.234 --> 00:27:08.801
Go into the source.

00:27:08.801 --> 00:27:11.067
And you see that it is
basically generating

00:27:11.067 --> 00:27:12.634
a nicely formatted source.

00:27:12.634 --> 00:27:18.534
Let's take this
button here.

00:27:18.534 --> 00:27:20.367
I mentioned, I can do
re-factoring,

00:27:20.367 --> 00:27:26.000
so I'll right click and say
re-factor, extract method.

00:27:26.000 --> 00:27:31.934
Call it
"create my button".

00:27:44.467 --> 00:27:49.834
And now it's extracted that
component into its own method,

00:27:49.834 --> 00:27:52.167
and the design view is
still working just fine.

00:27:52.167 --> 00:28:00.667
In fact, if I were to change
the label on this button,

00:28:00.667 --> 00:28:02.567
it's reflected properly
in the design view.

00:28:02.567 --> 00:28:10.234
If I move it around,
change it here,

00:28:10.234 --> 00:28:12.868
it updates
at the appropriate place.

00:28:12.868 --> 00:28:15.400
So again, it basically has
an ST model of the entire class.

00:28:15.400 --> 00:28:18.501
It knows where every
widget is defined,

00:28:18.501 --> 00:28:20.000
where every property is defined,

00:28:20.000 --> 00:28:21.367
so it really doesn't matter

00:28:21.367 --> 00:28:22.901
how you re-factor
the generating codes.

00:28:22.901 --> 00:28:25.501
That's a very unique
feature of this tool,

00:28:25.501 --> 00:28:27.200
and it actually makes it
really easy

00:28:27.200 --> 00:28:28.767
if you're doing things
like visual inheritance.

00:28:28.767 --> 00:28:30.567
If you break out certain
widgets into methods,

00:28:30.567 --> 00:28:33.367
you can then just override
just certain methods,

00:28:33.367 --> 00:28:35.000
to add or change various
widgets,

00:28:35.000 --> 00:28:39.767
and do some very, very powerful
visual inheritance.

00:28:39.767 --> 00:28:42.934
Let me show you what you
can do with custom composites.

00:28:42.934 --> 00:28:46.801
This is really fun

00:28:46.801 --> 00:28:50.133
when you want to
start doing, um, custom--

00:28:50.133 --> 00:28:51.734
you know, creating your own
custom widgets.

00:28:51.734 --> 00:28:53.167
So let's start with
an empty composite.

00:28:53.167 --> 00:28:55.701
I've got a basically empty
horizontal panel here.

00:28:55.701 --> 00:29:00.167
I'm going to
drop in a label.

00:29:00.167 --> 00:29:04.901
I'm going to drop in
a text box.

00:29:04.901 --> 00:29:08.567
And I'm going to drop in
a button.

00:29:08.567 --> 00:29:13.834
I don't like the variable
name of this,

00:29:13.834 --> 00:29:16.267
so I can change the variable
name if I want to,

00:29:16.267 --> 00:29:19.100
likewise with the button.

00:29:19.100 --> 00:29:23.133
You just basically derive
it based on the text.

00:29:23.133 --> 00:29:25.834
One thing I noticed is,
I don't really like this layout.

00:29:25.834 --> 00:29:27.801
So this is a horizontal panel,

00:29:27.801 --> 00:29:29.934
if I look at the generated
source code.

00:29:29.934 --> 00:29:32.467
Let's morph that into
a flow panel.

00:29:32.467 --> 00:29:36.033
So right click Morph,

00:29:36.033 --> 00:29:38.100
and changes it
into a flow panel.

00:29:38.100 --> 00:29:41.300
Updates the source formatting.

00:29:41.300 --> 00:29:43.501
Now I've got these
three widgets.

00:29:43.501 --> 00:29:49.300
Let's save that, go back over to
our empty entry point here,

00:29:49.300 --> 00:29:55.801
drop that custom component
on the screen.

00:29:55.801 --> 00:30:03.033
Come on.

00:30:03.033 --> 00:30:04.767
So there are our widgets.

00:30:04.767 --> 00:30:10.033
Now let's go back to
the custom component here.

00:30:10.033 --> 00:30:12.901
And if I were to say,

00:30:12.901 --> 00:30:17.434
add another button
or anything like that,

00:30:17.434 --> 00:30:19.200
I switch back
over to the entry point.

00:30:19.200 --> 00:30:20.901
It automatically detects
that class change,

00:30:20.901 --> 00:30:24.467
so it basically has to
reload the class loader,

00:30:24.467 --> 00:30:29.801
pull in that new widget
definition, and show it to me.

00:30:29.801 --> 00:30:34.100
Now this new component
isn't very useful

00:30:34.100 --> 00:30:35.868
if I don't actually expose
any of these properties,

00:30:35.868 --> 00:30:44.567
so if I come back over to
the label, right click on it,

00:30:44.567 --> 00:30:47.200
select expose property.

00:30:47.200 --> 00:30:51.567
Again you can see the accessors
it wants to generate,

00:30:51.567 --> 00:30:55.701
and it went ahead and generated
those accessors for me.

00:30:55.701 --> 00:30:59.367
Save it, come back to
my entry point,

00:30:59.367 --> 00:31:05.367
reload that class.

00:31:08.767 --> 00:31:11.033
And now you notice

00:31:11.033 --> 00:31:17.667
that this composite now
has a new property,

00:31:17.667 --> 00:31:19.334
automatically picked up
by reflection,

00:31:19.334 --> 00:31:23.434
and it actually uses that
new property appropriately.

00:31:23.434 --> 00:31:27.968
Likewise, if I go over
and take one of these buttons,

00:31:27.968 --> 00:31:35.701
I can right click on it,
expose widget.

00:31:35.701 --> 00:31:41.634
Come back over to
my design view here.

00:31:44.801 --> 00:31:46.300
And now you'll notice
that that widget

00:31:46.300 --> 00:31:48.667
actually shows up as a child,

00:31:48.667 --> 00:31:51.501
since it's actually now
a publicly visible component,

00:31:51.501 --> 00:31:52.801
and I can do anything
I want to it.

00:31:52.801 --> 00:31:56.434
I can change its label.

00:31:56.434 --> 00:32:02.901
I could right click on it
and add event handlers,

00:32:02.901 --> 00:32:09.701
and so on.

00:32:09.701 --> 00:32:14.033
Let me show you what we can
do with built-in CSS support.

00:32:14.033 --> 00:32:19.968
So let's drop
a couple more.

00:32:26.334 --> 00:32:28.300
So the CSS style names,

00:32:28.300 --> 00:32:32.767
any CSS styles that
are defined in the CSS

00:32:32.767 --> 00:32:34.901
for this project will show up,

00:32:34.901 --> 00:32:38.467
and I can just select them
if I want to and apply them.

00:32:38.467 --> 00:32:45.133
Or if I want, I can go
ahead and create a new CSS style

00:32:45.133 --> 00:32:51.067
for that button.

00:32:54.334 --> 00:32:55.334
Edit it.

00:32:55.334 --> 00:32:56.868
There's a built-in CSS editor,

00:32:56.868 --> 00:33:00.701
so I can do things like pick the
size of the widgets,

00:33:00.701 --> 00:33:03.434
the style of the widget,
maybe the color.

00:33:03.434 --> 00:33:08.334
I'll make it a big
blue button here.

00:33:08.334 --> 00:33:12.267
I can set the background,
set margins if I want to,

00:33:12.267 --> 00:33:21.133
put borders, pretty much
any of the CSS styles.

00:33:21.133 --> 00:33:27.701
And now let's actually set
this widget to use that style,

00:33:27.701 --> 00:33:30.734
and then any time I go and
actually change CSS styles--

00:33:30.734 --> 00:33:35.767
so if I actually
go back into my project,

00:33:35.767 --> 00:33:46.634
find the CSS--
oh, wrong project.

00:33:46.634 --> 00:33:54.634
Hold on.

00:33:54.634 --> 00:33:56.467
If I actually come in and
change the CSS by hand,

00:33:56.467 --> 00:34:02.634
maybe I'll change
this to red.

00:34:02.634 --> 00:34:08.901
See, it automatically gets
picked up by the design surface.

00:34:08.901 --> 00:34:11.801
Now maybe if I wanted to
create a factory.

00:34:11.801 --> 00:34:14.133
Maybe I like
this style of button

00:34:14.133 --> 00:34:16.634
and I want to use it
over and over again.

00:34:16.634 --> 00:34:22.534
If I look at the widget
definition for the button,

00:34:22.534 --> 00:34:25.934
let's say I want to make
it a search button,

00:34:25.934 --> 00:34:29.534
so let's change
the text to search.

00:34:29.534 --> 00:34:32.467
Let's change the style--

00:34:32.467 --> 00:34:34.734
well, let's make it
a send button, actually,

00:34:34.734 --> 00:34:36.601
because I've got
a style for that already.

00:34:36.601 --> 00:34:38.400
And then right click on it,

00:34:38.400 --> 00:34:41.901
select Factory,
Create Factory.

00:34:41.901 --> 00:34:46.868
Create a new factory
called My Factory.

00:34:46.868 --> 00:34:50.234
And I don't want to
hard code the size,

00:34:50.234 --> 00:34:54.634
so let's go ahead
and take that out.

00:34:54.634 --> 00:34:58.367
Tell it create
send button method,

00:34:58.367 --> 00:35:00.100
and actually in the process,

00:35:00.100 --> 00:35:06.601
it's actually going to
rewrite that code

00:35:06.601 --> 00:35:09.100
to now call my factory
creation method,

00:35:09.100 --> 00:35:12.868
and I went ahead and created
a factory class,

00:35:12.868 --> 00:35:15.100
with that new static method
in there.

00:35:15.100 --> 00:35:19.901
I go back to
my entry point now.

00:35:19.901 --> 00:35:24.834
I could actually at this point
add this right to my palette.

00:35:24.834 --> 00:35:31.501
So add--let's find
my factory class,

00:35:31.501 --> 00:35:34.801
my factory,

00:35:34.801 --> 00:35:42.200
find that one method.

00:35:42.200 --> 00:35:44.400
And it's added
that to the palette.

00:35:44.400 --> 00:35:47.968
I could drag/drop this element
and put it anywhere I want.

00:35:47.968 --> 00:35:53.534
Let's put it back up with
the rest of the buttons.

00:35:53.534 --> 00:35:57.400
And now if I click this
palette command,

00:35:57.400 --> 00:36:00.534
it'll basically create a new
send button for me,

00:36:00.534 --> 00:36:03.000
using that factory command.

00:36:03.000 --> 00:36:05.467
So if you think about that,

00:36:05.467 --> 00:36:09.200
by creating factories
of common UI components,

00:36:09.200 --> 00:36:11.234
you could basically have
a whole palette

00:36:11.234 --> 00:36:14.300
of really highly customized
reusable components,

00:36:14.300 --> 00:36:16.200
and make them available
to everybody

00:36:16.200 --> 00:36:22.133
on your team quite easily.

00:36:25.834 --> 00:36:28.434
Let me show some
internationalization,

00:36:28.434 --> 00:36:33.467
notice that it picked up the CSS
style change there, too.

00:36:33.467 --> 00:36:37.334
If we click on
the internationalization tool,

00:36:37.334 --> 00:36:38.901
tell it to extract those--

00:36:38.901 --> 00:36:41.000
Well, first, let's look at
the source code here,

00:36:41.000 --> 00:36:44.434
because we have a bunch of
hard-coded strings.

00:36:44.434 --> 00:36:45.767
Don't want to get rid of
one of these buttons,

00:36:45.767 --> 00:36:47.400
just make it
a little simpler.

00:36:47.400 --> 00:36:49.200
So we have hard-coded
strings right now.

00:36:49.200 --> 00:36:52.200
Let's internationalize
this class.

00:36:52.200 --> 00:36:54.434
We'll create
an app constance class,

00:36:54.434 --> 00:36:58.167
tell it to externalize
all the components.

00:36:58.167 --> 00:37:03.734
It's generated the keys
and values for me,

00:37:03.734 --> 00:37:06.200
and updated the source code
appropriately.

00:37:06.200 --> 00:37:08.834
So no longer do we have any
hard-coded strings,

00:37:08.834 --> 00:37:11.968
and it's also at
this point created

00:37:11.968 --> 00:37:14.601
that app constance
properties file,

00:37:14.601 --> 00:37:19.133
which, we'll open that up,

00:37:19.133 --> 00:37:24.601
pull it down here
so you can see it.

00:37:24.601 --> 00:37:26.801
And now if I go back into
the design view,

00:37:26.801 --> 00:37:30.734
and if I change anything,

00:37:30.734 --> 00:37:33.067
notice it updates
the property file for me

00:37:33.067 --> 00:37:35.934
rather than--and leaves
the source code,

00:37:35.934 --> 00:37:37.501
which has already been
internationalized,

00:37:37.501 --> 00:37:39.367
completely untouched.

00:37:39.367 --> 00:37:41.367
And again if I had
a second language,

00:37:41.367 --> 00:37:44.167
it would work that way
as well.

00:37:44.167 --> 00:37:47.300
Now I'm going to do a slightly
more complex example,

00:37:47.300 --> 00:37:49.167
so I'm going to close some
of these classes

00:37:49.167 --> 00:37:55.100
that I don't need anymore.

00:38:03.400 --> 00:38:06.467
And I'm going to do
a real simple example

00:38:06.467 --> 00:38:10.834
showing how to attach a custom
composite to a cell table.

00:38:10.834 --> 00:38:13.000
So first I have a little
domain class here,

00:38:13.000 --> 00:38:16.567
very simple person class,
first name, last name,

00:38:16.567 --> 00:38:18.634
male, true or false, and age.

00:38:18.634 --> 00:38:23.133
And I've already built
a person composite,

00:38:23.133 --> 00:38:24.868
which basically has fields

00:38:24.868 --> 00:38:27.834
for editing each of
those properties.

00:38:27.834 --> 00:38:31.300
It's basically just a very
simple little flex table,

00:38:31.300 --> 00:38:34.100
and you can see the source
for this class.

00:38:34.100 --> 00:38:36.367
And what it does is
it has fields

00:38:36.367 --> 00:38:38.868
for each of the components.

00:38:38.868 --> 00:38:40.901
Any time any of those
text fields changes,

00:38:40.901 --> 00:38:44.434
it automatically updates
the embedded person object

00:38:44.434 --> 00:38:46.234
that was passed in,
and it has accessors

00:38:46.234 --> 00:38:48.434
for setting the person
for this composite,

00:38:48.434 --> 00:38:50.534
getting the person,
resetting it to a new person,

00:38:50.534 --> 00:38:51.901
things like that.

00:38:51.901 --> 00:38:53.734
So it's a very, very
simple custom composite design

00:38:53.734 --> 00:38:55.901
to edit this very simple
person class.

00:38:55.901 --> 00:38:57.400
So let's take this--

00:38:57.400 --> 00:39:01.367
let's start out with
an empty entry point class.

00:39:01.367 --> 00:39:02.834
The first thing
I'm going to do

00:39:02.834 --> 00:39:05.133
is I'm going to drop this
person composite on the screen.

00:39:05.133 --> 00:39:07.334
I'd like it to fill
the entire width,

00:39:07.334 --> 00:39:08.901
so I'm going to
start dragging it out.

00:39:08.901 --> 00:39:10.601
Hold the control key down,

00:39:10.601 --> 00:39:13.701
and let go--
pulls it to 100%.

00:39:13.701 --> 00:39:20.767
Then I'm going to
add a button,

00:39:20.767 --> 00:39:23.300
call it "Add".

00:39:23.300 --> 00:39:27.567
And finally, let's come
down and add a cell table.

00:39:27.567 --> 00:39:30.267
And a cell table is
basically parameterized

00:39:30.267 --> 00:39:31.534
by type of object,

00:39:31.534 --> 00:39:33.300
so I'm going to tell it
to make this cell table

00:39:33.300 --> 00:39:38.467
work with my person object.

00:39:38.467 --> 00:39:39.801
Okay, an empty cell table--

00:39:39.801 --> 00:39:41.300
not very useful unless
we add some--

00:39:41.300 --> 00:39:42.467
well first of all,
let's make it

00:39:42.467 --> 00:39:45.334
fill the entire
available width as well.

00:39:45.334 --> 00:39:47.267
And then start adding
some columns to it.

00:39:47.267 --> 00:39:53.400
So I'll add a text column,
call this "First Name",

00:39:53.400 --> 00:39:59.634
Add another one.

00:39:59.634 --> 00:40:04.801
"Last Name."

00:40:04.801 --> 00:40:07.868
Number column for age,

00:40:07.868 --> 00:40:11.534
and a checkbox column
for whether the person

00:40:11.534 --> 00:40:13.334
is male or not.

00:40:13.334 --> 00:40:14.767
And so far, it's gone

00:40:14.767 --> 00:40:17.234
and generated code
for all of these columns,

00:40:17.234 --> 00:40:19.133
but this is
where we have to start

00:40:19.133 --> 00:40:20.567
actually adding some
intelligence to this.

00:40:20.567 --> 00:40:24.567
So it's basically just
generated some default text

00:40:24.567 --> 00:40:26.234
for the column,
so I'm going to go in

00:40:26.234 --> 00:40:29.033
and tell it to do something
more interesting.

00:40:29.033 --> 00:40:35.467
So for the first name column,
I want to get basically the--

00:40:35.467 --> 00:40:41.400
Get, uh--

00:40:48.801 --> 00:40:54.734
There should be an accessor
for that.

00:41:05.467 --> 00:41:10.033
There we go.

00:41:10.033 --> 00:41:15.968
Okay, last name,
and object Get Age.

00:41:28.501 --> 00:41:30.834
And for the button,

00:41:30.834 --> 00:41:33.968
I want it to basically add
the person object here,

00:41:33.968 --> 00:41:35.734
so I'm going to
right click on it,

00:41:35.734 --> 00:41:43.567
tell it to, um,

00:41:43.567 --> 00:41:46.734
add a click handler,

00:41:46.734 --> 00:41:50.567
and I've actually got
some methods--

00:41:50.567 --> 00:41:51.934
or I had some methods here.

00:41:51.934 --> 00:41:57.868
Hold on.

00:42:03.200 --> 00:42:09.133
Oops.

00:42:18.234 --> 00:42:24.167
I've just got to
pull out my--whoops.

00:42:38.968 --> 00:42:42.467
All right.

00:42:42.467 --> 00:42:48.400
Pull out some code I'd written
before to do some of this work.

00:43:00.934 --> 00:43:05.701
I also want to take
this person composite

00:43:05.701 --> 00:43:08.100
and make it into a field--

00:43:08.100 --> 00:43:14.033
do the same thing
with the table.

00:43:17.767 --> 00:43:19.701
And on that click handler,

00:43:19.701 --> 00:43:25.634
I want to do my comma do
add method.

00:43:28.834 --> 00:43:30.767
And I've also got a method
that sets up

00:43:30.767 --> 00:43:32.501
the data priority for me,

00:43:32.501 --> 00:43:36.400
so I'm just going to call
that as well.

00:43:36.400 --> 00:43:41.400
And hopefully--

00:43:41.400 --> 00:43:47.334
Save that, and let's try
launching it.

00:43:56.734 --> 00:44:04.901
And if I start adding some
names--

00:44:04.901 --> 00:44:06.267
It works,
the first time.

00:44:06.267 --> 00:44:13.701
Thank you. Phew!
[applause]

00:44:13.701 --> 00:44:18.400
I was sweating bullets
there for a second.

00:44:18.400 --> 00:44:21.300
So a real simple example
of hooking up a custom composite

00:44:21.300 --> 00:44:23.100
to a cell table,

00:44:23.100 --> 00:44:26.601
and that is pretty much
the end of the demo

00:44:26.601 --> 00:44:28.100
that I wanted to show.

00:44:28.100 --> 00:44:33.133
So let's go back to the slides,
and then we can wrap it up.

00:44:33.133 --> 00:44:34.601
So what did we talk about?

00:44:34.601 --> 00:44:37.467
First of all,
Google Web Toolkit,

00:44:37.467 --> 00:44:40.634
a great way to build web apps,
as hopefully many of you know.

00:44:40.634 --> 00:44:43.868
Google plug-in for Eclipse,
a great way to build GWT apps.

00:44:43.868 --> 00:44:47.701
And the UI Designer, a great
way to build GWT web UIs.

00:44:47.701 --> 00:44:51.734
So at this point, happy to, if
anybody wants to ask questions,

00:44:51.734 --> 00:44:54.434
just use the microphone
there at the back of the room.

00:44:54.434 --> 00:44:56.133
And I'll put up
a thank you

00:44:56.133 --> 00:44:58.634
with basically
links you can go to,

00:44:58.634 --> 00:45:01.901
to get the documentation,

00:45:01.901 --> 00:45:04.634
the wiki, the GWT blog,
et cetera.

00:45:04.634 --> 00:45:08.100
So if anybody has any questions,
feel free to ask.

00:45:08.100 --> 00:45:09.667
man: What do you see
as the future direction

00:45:09.667 --> 00:45:12.167
for the UI Binder?

00:45:12.167 --> 00:45:13.567
Clayberg:
For the UI Binder?

00:45:13.567 --> 00:45:16.000
In terms of
the UI Designer, or?

00:45:16.000 --> 00:45:18.167
man: Yes,
like are you looking at

00:45:18.167 --> 00:45:20.200
higher speed, more features?

00:45:20.200 --> 00:45:21.734
What's--?
Clayberg: Oh, yeah.

00:45:21.734 --> 00:45:24.067
Well, first of all,
the goal of the UI Binder

00:45:24.067 --> 00:45:26.601
is to stay completely
current with GWT itself.

00:45:26.601 --> 00:45:28.701
So as new features get
added to GWT,

00:45:28.701 --> 00:45:31.100
as more capability gets
added to UI Binder,

00:45:31.100 --> 00:45:33.701
they'll be immediately surfaced
in the UI Design Tool

00:45:33.701 --> 00:45:35.634
at the same time.
So we try to keep them--

00:45:35.634 --> 00:45:37.167
Back when we were at
Instantiations,

00:45:37.167 --> 00:45:41.100
we were usually lagging
five or six weeks behind.

00:45:41.100 --> 00:45:43.434
Now our goal is to actually be
current with any new--

00:45:43.434 --> 00:45:44.801
since we're part
of the team--

00:45:44.801 --> 00:45:47.834
be current with
any new releases.

00:45:47.834 --> 00:45:51.534
man: As a Python guy
and not a Java guy,

00:45:51.534 --> 00:45:53.067
I'm very interested in GWT,

00:45:53.067 --> 00:45:54.367
but I've been trying to
figure out,

00:45:54.367 --> 00:45:57.701
how do I put that on the front
end of a Python

00:45:57.701 --> 00:45:59.834
back end like Jango?

00:45:59.834 --> 00:46:02.801
Can you give me
any guidance?

00:46:02.801 --> 00:46:04.300
Clayberg: Unfortunately,
I'm not a Python guy,

00:46:04.300 --> 00:46:06.434
and I really can't help
you with that.

00:46:06.434 --> 00:46:08.267
But if you can give me
your card, I'd be happy to

00:46:08.267 --> 00:46:11.200
find out some
information for you.

00:46:11.200 --> 00:46:13.200
man: Okay, well I've actually
got two questions.

00:46:13.200 --> 00:46:17.567
One, I didn't see you demo
any of the Designer

00:46:17.567 --> 00:46:20.200
with the UI Binder itself.

00:46:20.200 --> 00:46:22.234
Does it support that?

00:46:22.234 --> 00:46:23.234
Clayberg:
Oh, yeah, yeah.

00:46:23.234 --> 00:46:27.267
I mean, in fact
I could just--

00:46:27.267 --> 00:46:29.767
man: And the second question
is actually,

00:46:29.767 --> 00:46:31.234
how well does
the Designer work

00:46:31.234 --> 00:46:34.067
with a pattern such as MVP?

00:46:34.067 --> 00:46:35.067
Clayberg:
With a what?

00:46:35.067 --> 00:46:36.968
man:
MVP--Model View Presenter,

00:46:36.968 --> 00:46:41.067
where all your logic is
elsewhere and your UI Design

00:46:41.067 --> 00:46:42.434
is in a single place.

00:46:42.434 --> 00:46:45.133
Clayberg: Actually, with more
recent releases,

00:46:45.133 --> 00:46:47.000
we've added support for MVP,
and the fact is,

00:46:47.000 --> 00:46:48.601
even in MVP Wizard,

00:46:48.601 --> 00:46:51.133
that'll create an entire
structure for you.

00:46:51.133 --> 00:46:52.133
man:
Oh, nice.

00:46:52.133 --> 00:46:54.033
Clayberg:
But as far as UI Binder,

00:46:54.033 --> 00:46:58.501
I can, say, create
a new UI Binder composite here,

00:46:58.501 --> 00:47:04.334
let me just do that real quick.

00:47:04.334 --> 00:47:07.434
And so there's your
standard XML for the UI.

00:47:07.434 --> 00:47:11.334
And notice it shows XML source
rather than just plain source.

00:47:11.334 --> 00:47:16.567
Switch over to the design
view here in a second.

00:47:16.567 --> 00:47:18.100
The very first time I have
to access this,

00:47:18.100 --> 00:47:19.534
it takes a few seconds.

00:47:19.534 --> 00:47:22.701
And I can just go about
doing what I was doing before,

00:47:22.701 --> 00:47:28.067
start adding widgets, switch
back over to the XML source.

00:47:28.067 --> 00:47:30.501
See, it's basically added XML
source rather than Java source,

00:47:30.501 --> 00:47:33.968
so it works quite well
with UI Binder as well.

00:47:33.968 --> 00:47:35.634
man one:
Oh, thank you.

00:47:35.634 --> 00:47:37.601
man two:
Earlier in the presentation

00:47:37.601 --> 00:47:39.000
you had a split view

00:47:39.000 --> 00:47:41.801
between the GWT Designer
and the code view.

00:47:41.801 --> 00:47:43.634
How do you access that?

00:47:43.634 --> 00:47:45.033
I'm still trying
to figure it out.

00:47:45.033 --> 00:47:47.167
Clayberg: Well, one thing
I didn't show is

00:47:47.167 --> 00:47:49.701
basically the extensive
properties or preferences

00:47:49.701 --> 00:47:50.968
the tool has.

00:47:50.968 --> 00:47:54.901
So if you go into Google
Web Toolkit designer,

00:47:54.901 --> 00:47:56.267
you can basically--

00:47:56.267 --> 00:47:57.434
one of the first properties is
the editor layout.

00:47:57.434 --> 00:47:59.267
So you can say, do you want
the notebook,

00:47:59.267 --> 00:48:01.167
which order do you want
the notebook tabs?

00:48:01.167 --> 00:48:04.200
Do you want them above each
other, split pane, side by side?

00:48:04.200 --> 00:48:05.701
There's a bunch of edit
things for like,

00:48:05.701 --> 00:48:07.601
setting coding style,

00:48:07.601 --> 00:48:09.467
changing how event handlers
are generated.

00:48:09.467 --> 00:48:11.133
And by the way, if you
have the full version,

00:48:11.133 --> 00:48:13.133
which actually shows up
in your WindowBuilder option,

00:48:13.133 --> 00:48:15.834
you get actually a whole bunch
of additional preferences

00:48:15.834 --> 00:48:17.400
for really
fine-tuning stuff,

00:48:17.400 --> 00:48:20.767
like setting things like
the auto-rename pattern

00:48:20.767 --> 00:48:21.834
for variable names.

00:48:21.834 --> 00:48:24.267
When you type in text
for a widget,

00:48:24.267 --> 00:48:25.634
how does it
automatically decide

00:48:25.634 --> 00:48:27.033
what the variable name
should be for that?

00:48:27.033 --> 00:48:28.734
So you can have control over
the patterns involved there,

00:48:28.734 --> 00:48:31.567
so there are a bunch of
additional preferences there.

00:48:31.567 --> 00:48:33.801
man two:
Great. Thanks.

00:48:33.801 --> 00:48:38.000
man: How does the bi-directional
updates deal with components

00:48:38.000 --> 00:48:40.300
that are dynamically
generated at one time.

00:48:40.300 --> 00:48:43.200
So say like I have a grid
of components

00:48:43.200 --> 00:48:46.000
where the cells of the grid are
commanded at one time?

00:48:46.000 --> 00:48:47.400
Clayberg:
So the question is,

00:48:47.400 --> 00:48:49.567
how does it work with
dynamically created components

00:48:49.567 --> 00:48:51.434
as opposed to statically
created components?

00:48:51.434 --> 00:48:53.601
The basic answer is,
it doesn't, really.

00:48:53.601 --> 00:48:56.234
Really, the tool deals
with static UIs.

00:48:56.234 --> 00:48:58.634
So anything that's sort of
dynamically created,

00:48:58.634 --> 00:49:00.601
it really doesn't know about it,
so it can't really render it.

00:49:00.601 --> 00:49:03.367
So if you had
a flex table or a grid

00:49:03.367 --> 00:49:05.367
that you were adding components
to dynamically,

00:49:05.367 --> 00:49:07.534
you would see the empty flex
table in the design,

00:49:07.534 --> 00:49:09.234
but you wouldn't see any
of the widgets

00:49:09.234 --> 00:49:10.467
you're going to add
at run time.

00:49:10.467 --> 00:49:13.234
That's unfortunately
one of the limitations.

00:49:13.234 --> 00:49:14.667
man:
All right.

00:49:14.667 --> 00:49:16.400
Basically it deals
with gracefully.

00:49:16.400 --> 00:49:19.934
Thanks.
Clayberg: Okay.

00:49:19.934 --> 00:49:24.000
man: I'm going to ask if you
could put up the last slide.

00:49:24.000 --> 00:49:25.734
Clayberg:
Sure. That's a good idea.

00:49:25.734 --> 00:49:28.234
man: If you could get
to my question.

00:49:28.234 --> 00:49:32.501
Clayberg: All right.
There you go.

00:49:32.501 --> 00:49:35.200
man: I was wondering how
well it plays with

00:49:35.200 --> 00:49:36.868
other development patterns,

00:49:36.868 --> 00:49:42.234
like using GIN,
if there's any issues.

00:49:42.234 --> 00:49:44.000
Clayberg:
I honestly don't know.

00:49:44.000 --> 00:49:45.234
man:
All right. Thank you.

00:49:45.234 --> 00:49:46.400
Clayberg: But if you want to
give me your card,

00:49:46.400 --> 00:49:48.801
I can find out about that.

00:49:48.801 --> 00:49:51.501
man: What about dealing with
existing components,

00:49:51.501 --> 00:49:54.267
existing designs you have?

00:49:54.267 --> 00:49:55.934
Clayberg: Well,
as I mentioned earlier,

00:49:55.934 --> 00:49:58.100
the tool actually works
remarkably well

00:49:58.100 --> 00:50:02.000
with hand-written code or code
that you already have existing.

00:50:02.000 --> 00:50:03.567
So I would say
just give it a try.

00:50:03.567 --> 00:50:06.067
And I mean, one of our
goals is to keep improving that,

00:50:06.067 --> 00:50:08.000
so if you come
across cases

00:50:08.000 --> 00:50:11.067
where it does not do a good job
rendering your handwritten code,

00:50:11.067 --> 00:50:13.767
either whether it's
Java code or UI Binder code,

00:50:13.767 --> 00:50:15.901
I would encourage you to
actually send us an example,

00:50:15.901 --> 00:50:17.667
or maybe strip it down
to just the minimum

00:50:17.667 --> 00:50:19.167
that you're willing
to part with,

00:50:19.167 --> 00:50:21.834
take out anything
that's proprietary,

00:50:21.834 --> 00:50:23.701
but send us examples
that don't work.

00:50:23.701 --> 00:50:26.801
And we are very interested in
working with those examples

00:50:26.801 --> 00:50:28.167
and making them work
with the tool,

00:50:28.167 --> 00:50:29.167
and improving it over time.

00:50:29.167 --> 00:50:31.133
man:
Thank you.

00:50:31.133 --> 00:50:32.467
Clayberg: Yeah.

00:50:32.467 --> 00:50:37.834
man: Do you have any facilities
for test generation?

00:50:37.834 --> 00:50:40.067
Clayberg: Actually in
the full version of the tool,

00:50:40.067 --> 00:50:43.734
there actually is a Janit
test generation wizard

00:50:43.734 --> 00:50:49.133
that just creates a GWT Janit
stub for you, but it doesn't--

00:50:49.133 --> 00:50:52.834
we don't have any UI automated
record/playback testing,

00:50:52.834 --> 00:50:56.100
anything like
that for this tool, no.

00:50:56.100 --> 00:50:58.000
man:
Any plans for that?

00:50:58.000 --> 00:50:59.868
Clayberg: It's something
that's been talked about,

00:50:59.868 --> 00:51:02.734
but at this point, we don't have
any plans to do that.

00:51:02.734 --> 00:51:05.534
man:
Thanks.

00:51:05.534 --> 00:51:07.501
man two: When it comes to
databases, do you have it

00:51:07.501 --> 00:51:10.200
so that it'll automatically link
when you create--

00:51:10.200 --> 00:51:12.067
you know, how you create
the first and last name,

00:51:12.067 --> 00:51:13.567
like you want
it to link to a database,

00:51:13.567 --> 00:51:15.434
like you can create
the database

00:51:15.434 --> 00:51:18.501
and then automatically pull it
in like you did before?

00:51:18.501 --> 00:51:20.267
Is there an option
in there for that?

00:51:20.267 --> 00:51:22.067
Clayberg: Well, we don't
have anything like that.

00:51:22.067 --> 00:51:26.434
We do have, actually,
for GXT, if you're using GXT,

00:51:26.434 --> 00:51:29.400
we actually have support
for the GXT data-binding model,

00:51:29.400 --> 00:51:31.234
which basically is,
if you have a database,

00:51:31.234 --> 00:51:33.868
if you have a pojo,
plain old java object,

00:51:33.868 --> 00:51:35.334
any kind of data source,

00:51:35.334 --> 00:51:39.767
you can hook those data sources
to UI elements.

00:51:39.767 --> 00:51:42.067
Whenever GWT gets

00:51:42.067 --> 00:51:44.767
to the point of having its own
data-binding API,

00:51:44.767 --> 00:51:46.767
we would obviously build
a support for that as well.

00:51:46.767 --> 00:51:49.167
But at this point,
in the basic UI designer tool,

00:51:49.167 --> 00:51:51.634
there isn't really support
for that with basic GWT.

00:51:51.634 --> 00:51:52.968
man:
Right. Thank you.

00:51:52.968 --> 00:51:54.400
Clayberg:
But it's definitely something

00:51:54.400 --> 00:51:56.400
we would be very interested in.

00:51:56.400 --> 00:52:01.634
man: Could you show how you
add a widget to the palette?

00:52:01.634 --> 00:52:03.000
Clayberg: Sure.

00:52:03.000 --> 00:52:04.634
man: I saw how you were doing it
with the composite.

00:52:04.634 --> 00:52:08.634
I'm more interested in a class
that extends from another--

00:52:08.634 --> 00:52:13.400
Clayberg: Right. Basically,
it's quite simple.

00:52:13.400 --> 00:52:16.100
So if we pull up any one
of these classes here,

00:52:16.100 --> 00:52:18.501
you basically just right click
on the palette,

00:52:18.501 --> 00:52:20.434
say if you're going to
add a category,

00:52:20.434 --> 00:52:25.901
I can add a component to
an existing category.

00:52:25.901 --> 00:52:28.000
And you basically
just choose the class.

00:52:28.000 --> 00:52:30.000
So if it's a sub-class
of button, my button,

00:52:30.000 --> 00:52:32.868
you just find it
and it'll automatically--

00:52:32.868 --> 00:52:33.901
then you can give it
a description

00:52:33.901 --> 00:52:35.067
and it'll just show up

00:52:35.067 --> 00:52:36.667
if you hover over the component
in the palette,

00:52:36.667 --> 00:52:41.000
and you can pick which category
you want it to go into.

00:52:41.000 --> 00:52:42.200
And that's it.

00:52:42.200 --> 00:52:43.567
Hit okay, and there
it is on your palette.

00:52:43.567 --> 00:52:46.667
man:
Thank you.

00:52:46.667 --> 00:52:48.934
Clayberg: All right,
any other questions?

00:52:48.934 --> 00:52:50.667
Well, I guess I can give
you all back

00:52:50.667 --> 00:52:52.367
a minute and thirty seconds.

00:52:52.367 --> 00:52:55.300
Thank you for attending.
[applause]

