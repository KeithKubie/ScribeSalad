WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So here is my solution: I've takan all the input parameters,

00:00:03.000 --> 00:00:06.000
and the very first thing is I've set the dimension of the matrix and the vector:

00:00:06.000 --> 00:00:10.000
the length of the Path, plus the number of Landmarks--

00:00:10.000 --> 00:00:13.000
times 2--because I'm modeling x and y

00:00:13.000 --> 00:00:15.000
for each of those, in the same data structures.

00:00:15.000 --> 00:00:19.000
I then create a matrix for Omega and a vector for Xi,

00:00:19.000 --> 00:00:21.000
give it the appropriate dimensions,

00:00:21.000 --> 00:00:25.000
and subsequently I introduce the constraint

00:00:25.000 --> 00:00:28.000
that the initial positions have to be world-size/2.0,

00:00:28.000 --> 00:00:30.000
with a strength value of 1.0,

00:00:30.000 --> 00:00:33.000
That tells it this has no bearing on the final solutions

00:00:33.000 --> 00:00:35.000
because it's the only absolute constraint.

00:00:35.000 --> 00:00:37.000
But you can see--I add 1.0 over here in the main diagonal:

00:00:37.000 --> 00:00:39.000
1 for x and 1 for y--

00:00:39.000 --> 00:00:42.000
and then now add the same thing over here.

00:00:42.000 --> 00:00:46.000
It's important to understand how I set up the data structure.

00:00:46.000 --> 00:00:49.000
There's our positions--and let me just, for a second, call them "S".

00:00:49.000 --> 00:00:51.000
And there's our landmarks.

00:00:51.000 --> 00:00:54.000
Each of those have an x-component and a y-component.

00:00:54.000 --> 00:00:57.000
So in doing this, I'm taking this matrix and I'm setting it up,

00:00:57.000 --> 00:01:01.000
not by a matrix of Path length plus the number of landmarks,

00:01:01.000 --> 00:01:04.000
but each of those becomes a 2 by 2 matrix,

00:01:04.000 --> 00:01:08.000
where I explicitly retain the x and the y value.

00:01:08.000 --> 00:01:12.000
So the dimension here is 2 times N--the Path length--

00:01:12.000 --> 00:01:14.000
plus the number of landmarks.

00:01:14.000 --> 00:01:18.000
And the 2 is the result of modeling x and y: xy, xy, xy.

00:01:18.000 --> 00:01:20.000
That's really important for my solution.

00:01:20.000 --> 00:01:22.000
You might have done this differently--you might have said:

00:01:22.000 --> 00:01:26.000
I'm going to build 1 matrix for x and 1 matrix for y.

00:01:26.000 --> 00:01:28.000
and then each of those becomes just a single value,

00:01:28.000 --> 00:01:31.000
which is closer to the way we discussed it in class.

00:01:31.000 --> 00:01:33.000
And that's fine, in this case.

00:01:33.000 --> 00:01:35.000
In general, it has disadvantages

00:01:35.000 --> 00:01:38.000
in that it cannot correlate X and Ys.

00:01:38.000 --> 00:01:41.000
So for a real robot that has real rotations, this doesn't work.

00:01:41.000 --> 00:01:44.000
My solution is better, but for this specific example

00:01:44.000 --> 00:01:46.000
this would have been perfectly fine.

00:01:46.000 --> 00:01:49.000
Coming back to my example, I now process the data.

00:01:49.000 --> 00:01:51.000
I go through all the data items

00:01:51.000 --> 00:01:54.000
and my Path index is now the data item, times 2--

00:01:54.000 --> 00:01:57.000
which is the xy thing.

00:01:57.000 --> 00:01:59.000
I extract my measurements from the data--

00:01:59.000 --> 00:02:01.000
my motion from the data--

00:02:01.000 --> 00:02:03.000
using this command over here;

00:02:03.000 --> 00:02:06.000
and then I go through all the measurements,

00:02:06.000 --> 00:02:08.000
of which they are my multiple ones.

00:02:08.000 --> 00:02:10.000
I find the index in my matrix of the measurement,

00:02:10.000 --> 00:02:14.000
which is the Path plus the measurement index,

00:02:14.000 --> 00:02:16.000
times 2--because there are X and Ys again.

00:02:16.000 --> 00:02:19.000
And then the next routine just implements

00:02:19.000 --> 00:02:22.000
the simple addition with the measurement_noise

00:02:22.000 --> 00:02:25.000
as the inverse weighting factor.

00:02:25.000 --> 00:02:27.000
So it adds: 1, 1, -1, -1

00:02:27.000 --> 00:02:30.000
to the corresponding elements in the submatrix,

00:02:30.000 --> 00:02:32.000
and in the vector, it adds the measurement--

00:02:32.000 --> 00:02:36.000
all divided by the strength of the noise variable.

00:02:36.000 --> 00:02:38.000
If you look at this carefully,

00:02:38.000 --> 00:02:40.000
you'll take a minute to digest it

00:02:40.000 --> 00:02:42.000
and what was the use in the auxilliary variable, b,

00:02:42.000 --> 00:02:46.000
to account for the effect of this x and y.

00:02:46.000 --> 00:02:48.000
So b goes from zero to 1.

00:02:48.000 --> 00:02:50.000
And these are all the combinations.

00:02:50.000 --> 00:02:53.000
You have to stare at them to make sure they are all correct,

00:02:53.000 --> 00:02:56.000
but I can promise you--they're actually all correct.

00:02:56.000 --> 00:02:58.000
Motion is handled very much the same way:

00:02:58.000 --> 00:03:01.000
I extract the Motion command,

00:03:01.000 --> 00:03:03.000
I add among, the main diagonal--

00:03:03.000 --> 00:03:06.000
between the 2 variables that are being tied together--a "+1",

00:03:06.000 --> 00:03:09.000
and then I add, in the off-diagonal elements,"-1".

00:03:09.000 --> 00:03:11.000
So again, you have to stare at this

00:03:11.000 --> 00:03:13.000
very carefully to see they're all correct.

00:03:13.000 --> 00:03:17.000
And then I add the Motion itself to the vector, Xi.

00:03:17.000 --> 00:03:19.000
That's what I had to implement.

00:03:19.000 --> 00:03:22.000
I then solve, as before, and return the solution.

00:03:22.000 --> 00:03:26.000
And that's exactly what's being printed out down here.

00:03:26.000 --> 00:03:29.000
I have to say, we got this correct--I'm mightily impressed.

00:03:29.000 --> 00:03:31.000
You understood a lot about Mapping

00:03:31.000 --> 00:03:34.000
and you solved a really hard programming problem.

00:03:34.000 --> 00:03:36.000
I'm responding to some of you online

00:03:36.000 --> 00:03:38.000
who asked for challenging programming problems.

00:03:38.000 --> 00:03:40.000
This is a challenging piece of code to write.

00:03:40.000 --> 00:03:43.000
It took myself a number of hours to write,

00:03:43.000 --> 09:59:59.000
and that would be wonderful if you got it right.

