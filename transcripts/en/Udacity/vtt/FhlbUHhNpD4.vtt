WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:03.583
Now we're going to apply these
pyramids to Lucas and Kanade.

00:00:03.583 --> 00:00:07.168
So here's another really, really ugly
picture and what I'm going to do is

00:00:07.168 --> 00:00:10.047
I'm going to step you through
the algorithm in a minute, but

00:00:10.047 --> 00:00:12.250
let me just show you sort of in,
in drawing.

00:00:12.250 --> 00:00:12.800
Okay?

00:00:14.050 --> 00:00:19.583
So first is here's our image at t
minus one, here's our image at t.

00:00:19.583 --> 00:00:24.550
We reduce and we reduce on both of these
in order to get small versions of them.

00:00:25.730 --> 00:00:29.364
The first thing we do is this
M stands for motion model,

00:00:29.364 --> 00:00:32.208
we run Lucas and
Kanade between those two.

00:00:32.208 --> 00:00:33.080
Okay?

00:00:33.080 --> 00:00:37.417
And that gives us a flow field, okay?

00:00:37.417 --> 00:00:41.548
And what we do is we make and
that tells you how every pixel moves,

00:00:41.548 --> 00:00:46.215
we double up and multiply it by two that
flow field and then we apply that to

00:00:46.215 --> 00:00:50.830
the next level down and then there's
this funny function called warp.

00:00:52.200 --> 00:00:59.296
We take that function,
we warp the level one of t minus one and

00:00:59.296 --> 00:01:04.042
now that's almost a level one at time t.

00:01:04.042 --> 00:01:05.292
It's almost there.

00:01:05.292 --> 00:01:08.110
So, you know what we can do
because it's almost there?

00:01:08.110 --> 00:01:09.667
We can run Lucas and Kanade again.

00:01:09.667 --> 00:01:10.670
All right?

00:01:10.670 --> 00:01:12.996
We come up with a new motion field,

00:01:12.996 --> 00:01:16.375
add it back to the motion
field that we had before.

00:01:16.375 --> 00:01:20.333
Expand that, multiply by two,
apply in warp and continue.

00:01:20.333 --> 00:01:24.160
And that's how the iterative Lucas and
Kanade algorithm works.

00:01:24.160 --> 00:01:26.583
I know that that's hard
to see from a picture.

00:01:26.583 --> 00:01:29.760
Here is the algorithm
written out as steps.

00:01:29.760 --> 00:01:33.000
So we're going to compute to level K,
right?

00:01:33.000 --> 00:01:36.930
So we build all of our
Gaussian up to level K.

00:01:36.930 --> 00:01:40.642
We initialize the flow field as
being 0 at sort of K plus 1,

00:01:40.642 --> 00:01:42.292
then what do we have to do?

00:01:42.292 --> 00:01:44.450
Well, you know, here we're
doing it from level K to zero.

00:01:44.450 --> 00:01:48.420
So from the previous level, we have
the flow field from the previous level,

00:01:48.420 --> 00:01:50.167
which of course is half the size.

00:01:50.167 --> 00:01:53.294
So we have to upsample the flow field,
that's just expand it,

00:01:53.294 --> 00:01:54.750
make it twice as big.

00:01:54.750 --> 00:01:55.792
All right?

00:01:55.792 --> 00:02:00.548
And that's now the right size to
map from level K to level K of

00:02:00.548 --> 00:02:01.793
t minus 1 to t.

00:02:01.793 --> 00:02:06.534
The problem is if in the previous
level something moved

00:02:06.534 --> 00:02:10.667
by 1.2 pixels,
how far is it going to move now?

00:02:10.667 --> 00:02:13.460
1.2 times 2, 2.4 pixels.

00:02:13.460 --> 00:02:18.042
So when I expand the flow field,
which is makes it a bigger size.

00:02:18.042 --> 00:02:20.800
I also have to multiply it by 2.

00:02:20.800 --> 00:02:24.635
That's what the next step
of the algorithm is just,

00:02:24.635 --> 00:02:28.917
is multiply uip,
vip by 2 to get the predicted flow.

00:02:28.917 --> 00:02:33.520
And then you warp that level
of the Gaussian of image two

00:02:33.520 --> 00:02:38.417
towards image one in order to
get 2 prime or t minus 1 to t.

00:02:38.417 --> 00:02:40.350
Whether you call it one or
two, it doesn't matter.

00:02:40.350 --> 00:02:44.011
And you just keep iterating and
then we apply Lucas and

00:02:44.011 --> 00:02:46.708
Kanade again between the warped version.

00:02:46.708 --> 00:02:52.197
And that same level at of I1 to get
this slight what's called the correction

00:02:52.197 --> 00:02:57.001
flow and we have to add that correction
flow back to the expanded flow that we

00:02:57.001 --> 00:03:02.059
had before that's what these,
these equations here are doing.

00:03:02.059 --> 00:03:05.874
They a, they are adding that slight
difference that we now found back to

00:03:05.874 --> 00:03:07.542
the original predicted flow.

00:03:07.542 --> 00:03:11.449
Here are some results, so this is
an example of that optic flow and

00:03:11.449 --> 00:03:13.040
here is that tree.

00:03:13.040 --> 00:03:15.159
And you can see if we don't
do it hierarchically,

00:03:15.159 --> 00:03:18.043
we just apply Lucas-Kanade,
it does a nice job on the background.

00:03:18.043 --> 00:03:21.260
But up on the tree itself, where
there was a large amount of motion,

00:03:21.260 --> 00:03:24.510
it gives you exactly what you'd expect,
which is junk.

00:03:24.510 --> 00:03:28.581
But when we run it with the pyramids,
we get a better solution and so you get

00:03:28.581 --> 00:03:32.667
these nice, you know, flow fields
here in the middle, also in the back.

00:03:32.667 --> 00:03:36.610
Now you'll notice we still have
a problem at the boundaries, all right?

00:03:36.610 --> 00:03:37.375
And why is that?

00:03:37.375 --> 00:03:41.334
Well, remember at the boundaries,
there are pixels appearing and

00:03:41.334 --> 00:03:45.779
disappearing and there's no way that
optic flow knows what to do when a pixel

00:03:45.779 --> 00:03:47.520
appears out of nowhere.

00:03:47.520 --> 00:03:48.996
Basically, because you moved and

00:03:48.996 --> 00:03:52.250
now there are pixels that were
invisible before are now visible.

00:03:52.250 --> 00:03:55.031
And so the the optic flow along
the occlusion boundaries is

00:03:55.031 --> 00:03:58.110
still a problem and you need
further processing to handle that.

