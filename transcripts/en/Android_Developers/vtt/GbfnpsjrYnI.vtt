WEBVTT
Kind: captions
Language: en

00:00:01.560 --> 00:00:07.939
&gt;&gt;Tony Chan: Sorry for the delay for this,
this week Android ADL Plus show.

00:00:07.939 --> 00:00:12.620
My name is Tony Chan and I am a developer
advocate for Android.

00:00:12.620 --> 00:00:20.589
I'm based out of Hong Kong and today I have
Anirudh here joining us for the show.

00:00:20.589 --> 00:00:21.589
Anirudh?

00:00:21.589 --> 00:00:23.380
&gt;&gt;Anirudh Dewani: Hi everyone.

00:00:23.380 --> 00:00:25.619
I'm Anirudh from Hyderabad.

00:00:25.619 --> 00:00:28.710
I know we are missing our regular anchor today.

00:00:28.710 --> 00:00:31.349
It's just going to be me and Tony today.

00:00:31.349 --> 00:00:36.140
So let me just give you a brief introduction
on the format of ADL Plus which is presented

00:00:36.140 --> 00:00:39.600
to you by the APAC Android team here.

00:00:39.600 --> 00:00:43.530
So we're gonna do a brief presentation on
an interesting topic that we're gonna pick

00:00:43.530 --> 00:00:48.980
daily, every week, and then this will be followed
up by the Q&amp;A of the questions you've been

00:00:48.980 --> 00:00:50.380
asking us on the moderator.

00:00:50.380 --> 00:00:54.540
&gt;&gt;Tony Chan: So, Anirudh, is the slide showing
up fine?

00:00:54.540 --> 00:00:55.820
&gt;&gt;Anirudh Dewani: Yes, it is.

00:00:55.820 --> 00:00:56.880
Thank you, Tony.

00:00:56.880 --> 00:00:58.480
&gt;&gt;Tony Chan: Great.

00:00:58.480 --> 00:01:03.310
&gt;&gt;Anirudh Dewani: Alright, so we'll kick off
the, we'll kick off the presentation.

00:01:03.310 --> 00:01:07.890
So, first we've got news and I'll let Tony
present to you the news.

00:01:07.890 --> 00:01:16.369
&gt;&gt;Tony Chan: Okay, so, we have couple news
this week and the first one we didn't mention

00:01:16.369 --> 00:01:23.249
actually last week, Playstore is now having
gift cards and is now available in the US

00:01:23.249 --> 00:01:27.659
and hopefully we can make it available, more
available in other countries.

00:01:27.659 --> 00:01:36.799
The other, the other news on events, we have
a GDG, Google developer group tonight in Hong

00:01:36.799 --> 00:01:37.979
Kong.

00:01:37.979 --> 00:01:46.310
And coming up we have India, in India, in
New Delhi, we have an event coming up called

00:01:46.310 --> 00:01:54.590
GIndia, it's on the September 4th and 5th
and Anirudh and I will have a sess- , two

00:01:54.590 --> 00:01:58.829
sessions actually talking about Android on
the 5th.

00:01:58.829 --> 00:02:07.009
Okay, so, I will pass it back to you Anirudh
to do the presentation for today.

00:02:07.009 --> 00:02:12.901
&gt;&gt;Anirudh Dewani: Alright so this week we're
gonna be talking about MonkeyRunner, it's

00:02:12.901 --> 00:02:16.760
a tool that is present in the Android SDK
tools folder.

00:02:16.760 --> 00:02:21.890
It's not related to the monkey tool which
is used for straight UI testing.

00:02:21.890 --> 00:02:27.290
MonkeyRunner is a different thing, it's a
tool that writes you an API and we'll see

00:02:27.290 --> 00:02:31.799
how we can implement quality control on your
application using MonkeyRunner.

00:02:31.799 --> 00:02:36.129
So, we'll move to the next slide.

00:02:36.129 --> 00:02:42.069
Alright, so like I said, MonkeyRunner provides
and API for interfacing with devices.

00:02:42.069 --> 00:02:47.220
What this means is you can connect to different
devices or emulators available or attached

00:02:47.220 --> 00:02:53.420
to your system and you can basically sync
them all to inputs and we'll see, in detail,

00:02:53.420 --> 00:02:55.439
what we can do.

00:02:55.439 --> 00:03:02.180
So, it uses Jython which is an implementation
of Python that uses Java programming language.

00:03:02.180 --> 00:03:07.510
So there are multiple options available to
you and it's how you wanna run your script,

00:03:07.510 --> 00:03:11.420
you can go to an interactive session or you
can actually write the complete script and

00:03:11.420 --> 00:03:14.430
run it through the tool that we provide.

00:03:14.430 --> 00:03:18.790
So, also it's important to note that the code
runs on a different device that it's running

00:03:18.790 --> 00:03:24.569
on your workstation where you have the SDK
and while running on your machine it controls

00:03:24.569 --> 00:03:30.769
the attached devices, so it's not actually
running on the Android device.

00:03:30.769 --> 00:03:33.849
The next thing is let's look at the capabilities
on MonkeyRunner.

00:03:33.849 --> 00:03:38.570
So, like I said first, it allows you to connect
to multiple devices, not just one.

00:03:38.570 --> 00:03:40.739
You can actually connect to multiple devices.

00:03:40.739 --> 00:03:43.799
It can launch applications and activities.

00:03:43.799 --> 00:03:49.190
It has APIs to help you do that, to start
activate in send bar [unintelligible].

00:03:49.190 --> 00:03:54.819
You can also send touch events and keystrokes
which means you can provide input to your

00:03:54.819 --> 00:03:55.819
running applications.

00:03:55.819 --> 00:03:59.030
We'll show you a way to do that.

00:03:59.030 --> 00:04:05.189
Also there is an API to help you take screenshots
so you can grab images of the application

00:04:05.189 --> 00:04:10.269
running on the phone and you can script the
above operations in a sequence of commands

00:04:10.269 --> 00:04:15.569
so you can just say, "Do this" and then sleep
for some time and then launch the activity

00:04:15.569 --> 00:04:16.569
and then sleep again.

00:04:16.569 --> 00:04:20.759
So you can write a complete script and run
it.

00:04:20.759 --> 00:04:24.160
Okay, so let's move to the next slide.

00:04:24.160 --> 00:04:31.400
So, since this session is dedicated on quality
control capabilities let's see what MonkeyRunner

00:04:31.400 --> 00:04:32.930
can do.

00:04:32.930 --> 00:04:39.419
So, basically there are two ways you can perform
testing on your applications using MonkeyRunner.

00:04:39.419 --> 00:04:45.960
The first one is functional testing and, like
I said, you can write a script so it gives

00:04:45.960 --> 00:04:51.350
you a fully automated test procedure where
you can perform an end to end test on your

00:04:51.350 --> 00:04:53.380
application.

00:04:53.380 --> 00:04:58.889
You can also execute use cases which are interactive
with input events.

00:04:58.889 --> 00:05:01.650
The second thing it can allow you to do is
do regression testing.

00:05:01.650 --> 00:05:07.690
So, I mentioned that you can take screenshots
from your application using MonkeyRunner so

00:05:07.690 --> 00:05:11.639
what you can do is once you have a good bill
and you've done functional testing with a

00:05:11.639 --> 00:05:16.770
good bill you can compare this with your daily
bill by taking screenshots and comparing the

00:05:16.770 --> 00:05:22.400
screenshots to see if your UI is working fine.

00:05:22.400 --> 00:05:28.210
So, now we will look at some of the key APIs
as in the code packages and models available

00:05:28.210 --> 00:05:29.550
to you.

00:05:29.550 --> 00:05:32.490
So the first one is MonkeyRunner, it's the
most important model.

00:05:32.490 --> 00:05:40.560
It provides you static utilities to help you
obtain a device and obtain a major connection.

00:05:40.560 --> 00:05:41.560
The second is the device.

00:05:41.560 --> 00:05:46.930
Once you actually have MonkeyRunner giving
you a device object you can use the device

00:05:46.930 --> 00:05:52.419
object to the present, uh, which actually
presents the attached device emulator and

00:05:52.419 --> 00:05:55.930
start interacting with that device.

00:05:55.930 --> 00:05:57.729
And third one is Monkey Image.

00:05:57.729 --> 00:06:04.150
So this presents an image that you have grabbed
from a device or emulator using the snapshot

00:06:04.150 --> 00:06:05.919
API.

00:06:05.919 --> 00:06:12.130
Alright, so here's how you can launch the
MonkeyRunner interactive tool.

00:06:12.130 --> 00:06:15.580
We are now looking at how to write some code
in MonkeyRunner.

00:06:15.580 --> 00:06:20.270
So if you can see this is present in your
Android SDK tools folder, uh, tools folder

00:06:20.270 --> 00:06:22.840
there's a tool called MonkeyRunner.

00:06:22.840 --> 00:06:27.550
So as soon as you launch this you'll see an
interactive session, much like the Python

00:06:27.550 --> 00:06:28.550
shell.

00:06:28.550 --> 00:06:34.169
So this is where you can start, you know,
doing kind of hacking your way through MonkeyRunner,

00:06:34.169 --> 00:06:37.419
exploring different APIs.

00:06:37.419 --> 00:06:43.620
The other way is to write a script, so, when
you actually write a script, the procedure

00:06:43.620 --> 00:06:50.540
is, the first thing you wanna do is when you
have, when you have a MonkeyRunner script

00:06:50.540 --> 00:06:55.159
running the first thing you wanna do is connect
to a device and this is generally done with

00:06:55.159 --> 00:07:01.069
one of the static utilities available in MonkeyRunner
and this is great for connection.

00:07:01.069 --> 00:07:06.069
So once you do a way for connection this API
is a blocking call and will return you back

00:07:06.069 --> 00:07:09.729
a Monkey device which is the device attached.

00:07:09.729 --> 00:07:14.930
So once you have a connection to a device,
what you wanna do is install your APK.

00:07:14.930 --> 00:07:20.620
Now, like I said, this is an end to end test
procedure so we're gonna, we're gonna do our

00:07:20.620 --> 00:07:24.889
bill using our bill system and then we have
an APK and then we launch the MonkeyRunner

00:07:24.889 --> 00:07:28.970
script to install the APK package onto the
device.

00:07:28.970 --> 00:07:33.900
And, like I said, we can have multiple devices
and not just one device if you're testing

00:07:33.900 --> 00:07:38.270
different configurations it can actually do
this for multiple devices.

00:07:38.270 --> 00:07:46.680
So you do a call to install package onto the
device giving the part to your full APK and

00:07:46.680 --> 00:07:53.180
this will help you install your package onto
the device.

00:07:53.180 --> 00:07:56.300
Once you've installed your packages, what
you wanna do is probably launch your main

00:07:56.300 --> 00:08:01.830
activity and the call that is available, the
API here is start activity and you pass the

00:08:01.830 --> 00:08:09.730
component which is your, which comprises of
your package name and the main activity.

00:08:09.730 --> 00:08:15.069
So, putting it all together you can see how
it goes.

00:08:15.069 --> 00:08:19.960
So this is a small script that's actually
importing some of the modules that we talked

00:08:19.960 --> 00:08:20.960
about.

00:08:20.960 --> 00:08:25.610
There's a MonkeyRunner, there's a monkey device
and a time module to install, uh, to basically

00:08:25.610 --> 00:08:29.860
allow the device to sleep for some time so
that if you're installing the device and it's

00:08:29.860 --> 00:08:34.590
gonna take like five, ten seconds to install
the APK onto the device, you wanna do a sleep

00:08:34.590 --> 00:08:37.289
for a while before you execute the next command.

00:08:37.289 --> 00:08:41.469
So this is, this is the module to help us
with that.

00:08:41.469 --> 00:08:49.470
So as you can see the first call there was
MonkeyRunner.waitforconnection and the three,

00:08:49.470 --> 00:08:53.490
yeah, the three things that we discussed on
how you wanna begin testing.

00:08:53.490 --> 00:09:01.579
Alright, so once you've installed the APK
and you launch the main activity on MonkeyRunner,

00:09:01.579 --> 00:09:03.760
what you wanna do is and automated rig.

00:09:03.760 --> 00:09:08.370
You wanna send some touch inputs or type text
or send inputs.

00:09:08.370 --> 00:09:15.870
So this can be done using a touch, uh, using
a touch API and when you send an X and Y coordinate

00:09:15.870 --> 00:09:19.250
of where you wanna generate the touch image
and the type of touch.

00:09:19.250 --> 00:09:24.000
So, for example, this can be down and up so
this is a touch where you press down and up

00:09:24.000 --> 00:09:31.350
and then there is a type text which is basically
used if you have an input field on the screen

00:09:31.350 --> 00:09:34.310
and you wanna put in some text in an automated
way.

00:09:34.310 --> 00:09:40.790
So as you can see now we are executing our
use cases on how we want to test our app using

00:09:40.790 --> 00:09:45.610
some of the MonkeyRunner input APIs.

00:09:45.610 --> 00:09:53.180
Alright so, so now we begin, we've installed
our APK onto the device, we've launched our

00:09:53.180 --> 00:09:58.300
main activity and we've sent some input commands
and we're going through our screens.

00:09:58.300 --> 00:10:02.460
So at this point, for functional testing,
what you wanna do is take a snapshot.

00:10:02.460 --> 00:10:08.810
This is basically, it's gonna give you a screenshot
of what's on your screen right now in your

00:10:08.810 --> 00:10:14.050
device or emulator and as an imagine and the
object that's representing this is the monkey

00:10:14.050 --> 00:10:18.870
image and you can write this to a file for
if you wanna do regression testing if you

00:10:18.870 --> 00:10:23.779
wanna see if something's changed between my
last bill and this you can compare the images

00:10:23.779 --> 00:10:26.490
from the snapshots using this.

00:10:26.490 --> 00:10:33.310
So here's a tip, there's a very popular Unix
Magic and there has a compare ability so you

00:10:33.310 --> 00:10:39.850
can run this program and it can help you compare
images and ascertain regression testing.

00:10:39.850 --> 00:10:46.380
So, um, now we're gonna look at the script
all together so you see the complete script

00:10:46.380 --> 00:10:50.470
and this is all available on the Android developer
website.

00:10:50.470 --> 00:10:55.420
So if you go there and look for tools and
MonkeyRunner you're gonna see a lot of APIs

00:10:55.420 --> 00:10:57.010
and links and documentation.

00:10:57.010 --> 00:11:04.450
So this is a script from the website and as
you can see this just puts together what we've

00:11:04.450 --> 00:11:05.450
been doing.

00:11:05.450 --> 00:11:12.300
So, we install a package, we run the main
activity and then we start the activity, we

00:11:12.300 --> 00:11:17.800
send the key code menu which is just pressing
the menu button onto the device and then we

00:11:17.800 --> 00:11:21.740
take a snapshot on how our menu item looks
on the screen and then you just write the

00:11:21.740 --> 00:11:22.880
file to a disc.

00:11:22.880 --> 00:11:25.870
So, a very simple script, it's something you
can start with.

00:11:25.870 --> 00:11:30.640
If you don't wanna run the script what you
can do is just, like I said, mention you can

00:11:30.640 --> 00:11:35.910
go to an interactive shell and using the interactive
shell you can just start typing UIs, start

00:11:35.910 --> 00:11:40.220
touch inputs here and there, figure out the
buttons, figure out the X and Y positions

00:11:40.220 --> 00:11:44.190
and then write a complete script that can
be conformed.

00:11:44.190 --> 00:11:53.110
So, uh, so these are what we discussed, ways
of doing functional testing which is executing

00:11:53.110 --> 00:12:01.000
your use cases remotely in an automated way
using scripts but there is more to MonkeyRunner

00:12:01.000 --> 00:12:03.240
than functional and regression testing.

00:12:03.240 --> 00:12:08.120
So you can also extend the API by writing
your own plug-ins in Java language.

00:12:08.120 --> 00:12:14.880
There are some utilities like device.shell;
it's a MonkeyRunner UI.shell which can send

00:12:14.880 --> 00:12:17.399
APK commands to your device.

00:12:17.399 --> 00:12:21.970
You can also use the standard parts and sub
processing and [inaudible] modules to launch

00:12:21.970 --> 00:12:22.970
extended program.

00:12:22.970 --> 00:12:29.839
Again, you can launch ADB and send commands
for ADB using the sub processor and [inaudible]

00:12:29.839 --> 00:12:30.839
modules.

00:12:30.839 --> 00:12:35.959
And, again, there is also a Java API which
is available as MonkeyRunner.JR and this JR

00:12:35.959 --> 00:12:44.170
file is present in your tools folder of SDK
and it also has a program, a sample, a swing

00:12:44.170 --> 00:12:51.890
app, a Java swing app that basically allows
you to remote control your device using a

00:12:51.890 --> 00:12:58.110
screenshot grabbing utility, it grabs a screenshot
every 5 seconds and you can click on somewhere

00:12:58.110 --> 00:13:03.040
on the screenshot and it figures out the X
and Y from the, from the, uh, sample app,

00:13:03.040 --> 00:13:09.100
the swing app and then it sends the same coordinates
to generate, attach on the actual device using

00:13:09.100 --> 00:13:10.100
Java APIs.

00:13:10.100 --> 00:13:15.440
So, that's another example you can look at.

00:13:15.440 --> 00:13:22.570
Yeah, so, let me just summarize here of what
we have discussed using MonkeyRunner tool

00:13:22.570 --> 00:13:27.610
as a way of performing quality control in
our application, as a way of controlling multiple

00:13:27.610 --> 00:13:36.200
devices in a test environment where you can
execute your test cases, end to end test cases

00:13:36.200 --> 00:13:38.029
and you can also extend this API.

00:13:38.029 --> 00:13:42.420
So, with this, we come to the end of MonkeyRunner
presentation.

00:13:42.420 --> 00:13:47.230
If you have questions about this please feel
free to ask us now if you're joining the hangout

00:13:47.230 --> 00:13:54.051
or you can post these questions on the next
week's Google moderator link for the ADL Plus

00:13:54.051 --> 00:13:57.410
show and we'll definitely answer your questions
there.

00:13:57.410 --> 00:14:05.600
So with this, we'll move to this week's Q&amp;A
and Tony, if you can, start up in Q&amp;A.

00:14:05.600 --> 00:14:07.160
&gt;&gt;Tony Chan: Yeah, sure.

00:14:07.160 --> 00:14:11.420
Thanks Anirudh for showing us the MonkeyRunner.

00:14:11.420 --> 00:14:19.240
So, we have quite a few questions this week
so let's start to talk about some of these

00:14:19.240 --> 00:14:20.330
questions.

00:14:20.330 --> 00:14:28.050
So, the first question is from Ivan, um, "So
there is a serious memory leak in map view

00:14:28.050 --> 00:14:34.660
that cause crashes when used for map in one
direction for some time with the link.

00:14:34.660 --> 00:14:38.779
It's not yet solved and the first submission
was like 3 years ago.

00:14:38.779 --> 00:14:43.279
Is there any hope that this will be solved?"

00:14:43.279 --> 00:14:52.009
So we understand the map, uh, that map view
is kind of out of date and we are aware of

00:14:52.009 --> 00:14:59.279
that and we are working, our engineering team
is working to improve that.

00:14:59.279 --> 00:15:06.740
At the moment we don't have anything to share
but, um, unfortunately.

00:15:06.740 --> 00:15:13.820
If we have anything we can announce we will
let you guys know as soon as possible.

00:15:13.820 --> 00:15:19.110
So the next question, uh, Anirudh, can you
take the next question?

00:15:19.110 --> 00:15:20.940
&gt;&gt;Anirudh Dewani: Sure.

00:15:20.940 --> 00:15:27.230
So, the question is, "Why can't Android app
developers from India and China send their

00:15:27.230 --> 00:15:29.070
apps on Google apps market?"

00:15:29.070 --> 00:15:32.130
I guess what you're referring to this is the
Playstore.

00:15:32.130 --> 00:15:36.209
"What are the alternatives available for such
developers?

00:15:36.209 --> 00:15:38.420
Will this restriction be ever lifted?

00:15:38.420 --> 00:15:39.899
If so, when?"

00:15:39.899 --> 00:15:46.370
So, uh, so I'll talk about India and then
later Tony can talk about China cause he's

00:15:46.370 --> 00:15:49.899
more familiar with that market there.

00:15:49.899 --> 00:15:53.600
So what are the alternatives available to
such developers?

00:15:53.600 --> 00:16:00.100
To begin with I wanna mention that as a developer
you can still register on developer.com with

00:16:00.100 --> 00:16:04.970
Google Play and you can upload your apps,
they have to be free apps for now which is

00:16:04.970 --> 00:16:11.190
a restriction, but you can still use some
of our ads offerings for revenue.

00:16:11.190 --> 00:16:15.850
That's one option, an alternative to, for
revenue.

00:16:15.850 --> 00:16:20.730
The other one is, I know some developers that
actually have bank accounts in different countries

00:16:20.730 --> 00:16:29.170
which you're allowed for selling apps on Google
Playstore and you will probably have to consult

00:16:29.170 --> 00:16:35.380
your tax consultants and, to figure out if
that works, but I know some developers actually

00:16:35.380 --> 00:16:38.190
do that.

00:16:38.190 --> 00:16:43.110
The other alternative available to you is
to find a partner in a country which actually

00:16:43.110 --> 00:16:50.550
has access to the Playstore to sell apps there
and enter into a partnership where you can,

00:16:50.550 --> 00:16:55.350
you can be the developer and the partner can
take care of distribution needs of the application.

00:16:55.350 --> 00:16:58.440
Tony, if you have something add.

00:16:58.440 --> 00:17:05.329
&gt;&gt;Tony Chan: Yeah, so, for China it's kind
of similar issues like getting payment enabled

00:17:05.329 --> 00:17:13.190
in the country is involves a lot of policy
and it's more than just technical issue.

00:17:13.190 --> 00:17:21.160
So, again, like I said and Anirudh mentioned
we see a lot of developer they have partnerships

00:17:21.160 --> 00:17:29.230
or business partners in countries that we
do support Google Wallet and that's how they

00:17:29.230 --> 00:17:32.370
set up their developer account.

00:17:32.370 --> 00:17:38.970
And in China that would be a similar situation.

00:17:38.970 --> 00:17:41.030
So, yeah.

00:17:41.030 --> 00:17:47.390
So the next question is, uh, "Are there any
restriction in Google Play preventing application

00:17:47.390 --> 00:17:51.260
sold by charity to source donations?

00:17:51.260 --> 00:17:57.040
I have reviewed the Google Play terms of service
and not found any obvious issues."

00:17:57.040 --> 00:18:03.290
So, in general, what Steve mentioned is correct.

00:18:03.290 --> 00:18:10.800
So there's no policy on the Google Play site
to prevent developer to create apps that source

00:18:10.800 --> 00:18:12.070
donation.

00:18:12.070 --> 00:18:23.790
That said, for Google Wallet does have certain
policy in terms of receiving payment for donation

00:18:23.790 --> 00:18:36.400
and so you have to be a US 501C3 or 501C6
nonprofit organization and there is a process

00:18:36.400 --> 00:18:46.670
in order to receive donation you have to,
we have to verify you are a certified charity

00:18:46.670 --> 00:18:48.710
organization as you claim.

00:18:48.710 --> 00:19:01.530
So, um, I think in short you have to be a
501C3 or 6 organizations.

00:19:01.530 --> 00:19:05.080
So, the next question, Anirudh?

00:19:05.080 --> 00:19:12.340
&gt;&gt;Anirudh Dewani: Yeah Tony, so the question
is from JDixon from Western Australia, "I

00:19:12.340 --> 00:19:17.360
have 8 plus years of Java dev But I'm new
to Android.

00:19:17.360 --> 00:19:24.080
I wrote this" and it's a link to a spinner
example, "on the difficulty I had mapping

00:19:24.080 --> 00:19:27.310
spinner user to system user via Android.

00:19:27.310 --> 00:19:29.160
Did I miss something?"

00:19:29.160 --> 00:19:32.750
So I did take a brief look at the link that
you've shared and went through some of the

00:19:32.750 --> 00:19:37.240
code and notes and it looks fine for what
you're trying to do there.

00:19:37.240 --> 00:19:43.080
But, yeah, and I, you also mentioned in your
example that one way to do that is to actually

00:19:43.080 --> 00:19:49.270
use a system resource from Spring store XML
use an item to map it to spinner which is

00:19:49.270 --> 00:19:53.030
what we see very commonly used and you can
use that.

00:19:53.030 --> 00:19:58.620
So I see what you were trying to do is attach
some listener so you can do some length checks

00:19:58.620 --> 00:20:05.440
and actually use system menu which sounds
fairly, which sounds okay to me.

00:20:05.440 --> 00:20:12.850
It's very simple to use the spinner with an
add in from Spring store XML from a data source

00:20:12.850 --> 00:20:14.990
from, adaptor from a data source.

00:20:14.990 --> 00:20:20.050
It's pretty difficult if you, we have some
examples on our developer.Android.com website.

00:20:20.050 --> 00:20:21.050
Yeah.

00:20:21.050 --> 00:20:25.050
&gt;&gt;Tony Chan: Okay, cool, um, thanks.

00:20:25.050 --> 00:20:32.650
And, um, so Steve just back to your, uh, the
donation question so I just noticed you are

00:20:32.650 --> 00:20:43.110
from Melbourne so if you are interested in
creating apps for international charity that

00:20:43.110 --> 00:20:49.400
may be, I need to check with the Google Wallet
team and see whether we allow that.

00:20:49.400 --> 00:20:58.630
So, if you are interested to find out for
nonprofit organization outside of the US send

00:20:58.630 --> 00:21:05.130
us a post in G Plus or send me a post and
we can follow up with you.

00:21:05.130 --> 00:21:13.440
So the next question I have here is from William,
"How do I get a user identified for an in

00:21:13.440 --> 00:21:19.200
app billing transaction so I can collate and
manage transactions on my server?

00:21:19.200 --> 00:21:24.720
The identity just need to be unique with my
app but needs to span multiple devices and

00:21:24.720 --> 00:21:27.620
no permission beyond Google Play."

00:21:27.620 --> 00:21:36.070
So, I think, William mentioned quite few key
points here.

00:21:36.070 --> 00:21:46.420
Just for general audience benefit, Google,
uh in Google Play we have two types of digital

00:21:46.420 --> 00:21:48.160
in app purchase products.

00:21:48.160 --> 00:21:53.820
So, one is we call a unmanaged products and
another type is managed products.

00:21:53.820 --> 00:22:04.280
So for the managed products, um, Google Play
server does actually manage the user to restore

00:22:04.280 --> 00:22:14.450
like all the information if someone reinstalled
a game and developer in the application call,

00:22:14.450 --> 00:22:23.900
and call, the recall transaction methods in
the in app billing API to retrieve all the

00:22:23.900 --> 00:22:26.970
previous, like, purchase items.

00:22:26.970 --> 00:22:32.720
So that's done, taken care of in the API.

00:22:32.720 --> 00:22:40.620
But what William mentioned is those unmanaged
items which is not managed by Google, in that

00:22:40.620 --> 00:22:50.890
case, I think our general recommendation is
not to create any, the unique identifier has

00:22:50.890 --> 00:22:58.950
to be something like, um, we recommend using
the UUID and we actually have an article if

00:22:58.950 --> 00:23:09.380
you search Google, search for, talk about
how to identify a user and we specifically

00:23:09.380 --> 00:23:17.450
discourage user to use device ID or IMBI or
things like that or even the app, Android

00:23:17.450 --> 00:23:24.570
app ID which is really[OEM depends on the
implementation of OEM.

00:23:24.570 --> 00:23:27.500
It could not, may not be unique.

00:23:27.500 --> 00:23:34.890
So UUID is the recommendation, um, I guess
the key question is how do we persist that

00:23:34.890 --> 00:23:45.230
UUID and how to retrieve that information
when the user sign in to a new device.

00:23:45.230 --> 00:23:54.150
So something is coming up soon, what we call
Google Play service and Google Play service,

00:23:54.150 --> 00:24:04.010
we will have a implementation of OAuth2 as
well as the Google Plus API and with OAuth2

00:24:04.010 --> 00:24:13.560
it will be very easy for developer to talk
to a lot of the Google, different APIs at

00:24:13.560 --> 00:24:14.560
Google.

00:24:14.560 --> 00:24:26.760
So one, just idea, is you can store the UUID
or definitely have the user, in Google drive

00:24:26.760 --> 00:24:34.350
and using OAuth to authenticate and then you
can, you can retrieve the ID and use that

00:24:34.350 --> 00:24:43.810
to connect back to your server, link the ser-,
link the user to retrieve all the necessary

00:24:43.810 --> 00:24:46.330
unmanaged products information.

00:24:46.330 --> 00:24:50.120
So that's one idea we have here.

00:24:50.120 --> 00:24:52.200
Anything you want to add Anirudh?

00:24:52.200 --> 00:24:58.780
&gt;&gt;Anirudh Dewani: Uh, yeah, I'm not really
an expert there so I think you've covered

00:24:58.780 --> 00:25:00.230
it well there.

00:25:00.230 --> 00:25:01.680
&gt;&gt;Tony Chan: Okay.

00:25:01.680 --> 00:25:05.910
So, Anirudh, why don't you take the other
question, the next question?

00:25:05.910 --> 00:25:12.570
&gt;&gt;Anirudh Dewani: Yes, the next question is
from [inaudible] from [inaudible], "Hi, I'm

00:25:12.570 --> 00:25:19.210
developing iPhone app so here I integrated
Google Plus but here everywhere we need user

00:25:19.210 --> 00:25:20.210
ID.

00:25:20.210 --> 00:25:23.840
Please tell me how to get user ID.

00:25:23.840 --> 00:25:24.840
Thank you."

00:25:24.840 --> 00:25:31.040
So, going on, I'm sorry we don't have much
expertise with iPhone here so can't really

00:25:31.040 --> 00:25:35.000
answer your question here and this is just
targeted at Android developers.

00:25:35.000 --> 00:25:40.220
In terms of Google Plus, again, we are not
really not experts on Google Plus APIs but

00:25:40.220 --> 00:25:44.520
you can feel free to browse their website
and they may have some APIs there listed.

00:25:44.520 --> 00:25:45.850
Thank you.

00:25:45.850 --> 00:25:50.190
&gt;&gt;Tony Chan: Okay, so I'll take the next question.

00:25:50.190 --> 00:25:57.890
It's from Sameer and "Which is the best, cheapest
Android tablet with call function?"

00:25:57.890 --> 00:26:07.350
I guess that's really another developer question
and probably you can ask your friends and,

00:26:07.350 --> 00:26:09.410
we don't have any recommendation here.

00:26:09.410 --> 00:26:14.790
Okay, let's go to the next question, the last
question for today.

00:26:14.790 --> 00:26:21.540
"Does paid Google translate API provide better
quality than free online Google translate?"

00:26:21.540 --> 00:26:29.100
Um, again, this is a developer question but
we are mainly focusing on Android here.

00:26:29.100 --> 00:26:37.770
But since Anirudh and I are nicer so we do
actually research an answer for you.

00:26:37.770 --> 00:26:47.270
So first of all the translate API is a paid
API so there is no free options there and

00:26:47.270 --> 00:26:53.090
in terms of quality, I would suggest you to
ask that question on the Google translate

00:26:53.090 --> 00:26:54.130
API forum.

00:26:54.130 --> 00:27:00.510
So there is a forum and probably you can,
there is also a contact form to the paid,

00:27:00.510 --> 00:27:07.370
to the, uh, to the pay support team and you
may want to ask the answer there.

00:27:07.370 --> 00:27:18.740
But, however, our guess is actually the API
is probably the same as the one provided on

00:27:18.740 --> 00:27:25.050
the Google translate site so, but check with
the support team.

00:27:25.050 --> 00:27:31.450
Alright, that's, that seems like that's all
we have for today.

00:27:31.450 --> 00:27:38.270
I guess if there's like, Anirudh is there
anything you wanna cover or?

00:27:38.270 --> 00:27:41.600
&gt;&gt;Anirudh Dewani: Not really.

00:27:41.600 --> 00:27:46.910
So, what we'll do is we'll share some links
to resources for MonkeyRunner in case you

00:27:46.910 --> 00:27:50.730
wanna go through them and thank you for joining
us today.

00:27:50.730 --> 00:27:55.630
We don't have any light questions today so
I think that'll be it.

00:27:55.630 --> 00:27:57.470
&gt;&gt;Tony Chan: Okay.

00:27:57.470 --> 00:27:58.470
Thanks so much.

00:27:58.470 --> 00:27:59.470
Thank you.

00:27:59.470 --> 00:28:00.470
Bye bye.

00:28:00.470 --> 00:28:01.470
&gt;&gt;Anirudh Dewani: Bye.

00:28:01.470 --> 00:28:01.476
&gt;&gt;Tony Chan: See you next week.

