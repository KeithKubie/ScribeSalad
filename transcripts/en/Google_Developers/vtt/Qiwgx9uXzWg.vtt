WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.920
&gt;&gt; BYTTOW: My name is David Byttow and I'm
with my colleague Marcel Prasetya. And we're

00:00:04.920 --> 00:00:09.240
going to be discussing how you can build smart
and scalable robots. We're going to be giving

00:00:09.240 --> 00:00:11.140
some demonstrations of some robots today and
also cover some of the new things that are

00:00:11.140 --> 00:00:18.820
going on and coming out. So with that, I just
want to jump over this switch or to a really

00:00:18.820 --> 00:00:24.270
quick demo of a robot. I'm going to assume
most of you are familiar with robots but we're

00:00:24.270 --> 00:00:31.910
just going to do that really quick. So I'm
going to search over the wave and I'm going

00:00:31.910 --> 00:00:39.510
to add robot here, Davebot. So just like any
participant you go ahead and add a robot directly

00:00:39.510 --> 00:00:43.030
to the wave and it immediately jumps in and
says, "Hello." Okay, so, hello. Talk to it;

00:00:43.030 --> 00:00:53.020
it comes back and want to play game. This
is a robot I actually build to play games

00:00:53.020 --> 00:00:59.480
with. If there's anyone who plays one game
right now, so, "Sure, why not?" So I immediately

00:00:59.480 --> 00:01:04.850
jump in and put the chess gadget in. Now,
I just want to mention real quick that there's

00:01:04.850 --> 00:01:08.240
no extra code here. This robot is actually
created to play chess after the chess gadget

00:01:08.240 --> 00:01:14.299
is already created. This, in fact, was a gadget
that was created for players to play each

00:01:14.299 --> 00:01:19.349
other. But, you know, robots have the same
rights as humans, so it works pretty well

00:01:19.349 --> 00:01:25.840
if you code your robot to know what the state
of the board is. So I can come in and make

00:01:25.840 --> 00:01:30.299
a couple moves, and just like any human player
the robot will start playing, so it jumps

00:01:30.299 --> 00:01:33.479
in, make some move. I'll expect a couple more
of moves here. See, it's pretty responsive,

00:01:33.479 --> 00:01:34.799
pretty quick. Of course, I know exactly what
it's doing, and of course, I fall for the

00:01:34.799 --> 00:01:49.429
oldest trick on the book. So this is pretty
cool little chess robot. Again, I'd like--how

00:01:49.429 --> 00:01:54.740
it's decoupled from the actual game, the robot,
so you can build multiple robots to use the

00:01:54.740 --> 00:02:01.340
same chess gadget or whatever. So with that,
I'm going to switch back, oops, let's not

00:02:01.340 --> 00:02:07.490
jump too far. Again, just like any slide,
where you have a wave. You could see the link

00:02:07.490 --> 00:02:14.121
down here to ask questions and, you know,
we'll look at that towards the end when we

00:02:14.121 --> 00:02:17.900
reach the end of talk and take questions and
answers. So, what I'm going to cover? What

00:02:17.900 --> 00:02:22.000
are we going to cover, rather? First, I want
to give it a--just a quick overview of the

00:02:22.000 --> 00:02:26.170
API. Again, this is kind of like, you know,
it's a two-in-one talk. So, I assume many

00:02:26.170 --> 00:02:32.090
of you are familiar with the robot API and
have perhaps even used it. But I'm just going

00:02:32.090 --> 00:02:36.549
to give a quick overview of what it is and
how it works from a high level architecture

00:02:36.549 --> 00:02:40.489
standpoint. Then, we're going to cover what's
new in version two. In version two, we launched,

00:02:40.489 --> 00:02:45.609
I guess, about a couple of months ago after
we received all the feedback and we kind of

00:02:45.609 --> 00:02:53.073
rolled out a whole bunch of features all at
once, including active API and so on, so I'm

00:02:53.073 --> 00:02:55.980
going to cover that. And then we're going
to do a deep dive. Marcel's going to come

00:02:55.980 --> 00:03:03.150
up and talk about how you can build super
power robots. He's going to do that by going

00:03:03.150 --> 00:03:06.320
over some of the features and best practices
of building robots, show us some code and

00:03:06.320 --> 00:03:09.170
show a couple of cool little demos that kind
of open this up. And I should--I just want

00:03:09.170 --> 00:03:14.340
also to point out that we're not just talking
about robots here because we're actually launching

00:03:14.340 --> 00:03:19.310
data liberation, which means you can actually
access your waves and waves on behalf of other

00:03:19.310 --> 00:03:25.379
users using OAuth and so on. And this opens
up a whole new category of applications built

00:03:25.379 --> 00:03:29.319
on top of wave, you know, we could build stand
alone clients on any platform or whatever

00:03:29.319 --> 00:03:36.150
you want to do and we'll kind of touch that
a little bit. And then we're going to go over

00:03:36.150 --> 00:03:41.230
just a couple examples of robots that are
built today when just a little bit of disassembling

00:03:41.230 --> 00:03:48.099
and say, "Well, what features do they use,
what makes them unique?" And finally I'm going

00:03:48.099 --> 00:03:54.239
to talk about robot liberation which is something
that was announced yesterday during the keynote

00:03:54.239 --> 00:04:00.719
by Larce and then a couple of other talks
and no longer do you have to run robots in

00:04:00.719 --> 00:04:05.640
App Engine. And we think this is really cool
because you're not limited to Python or Java

00:04:05.640 --> 00:04:09.889
anymore, and you can run on your own server
which is especially great for building your

00:04:09.889 --> 00:04:16.900
own clients. So real quick wave in two minutes
or less; we're kind of all showing this on

00:04:16.900 --> 00:04:22.490
different wave slides but this is the screenshot
of wave and, you know, our current tag line

00:04:22.490 --> 00:04:26.360
is, well, "Get stuff done with groups of people".
Because we realized on the wave team that's

00:04:26.360 --> 00:04:30.151
exactly what we do and various other teams
at Google as well, and it works very well

00:04:30.151 --> 00:04:34.340
in that setting. And, of course, we have a
very simple sharing model, you know, you start

00:04:34.340 --> 00:04:38.330
a wave, you add someone to that wave and now
they have access. You can, you know, jump

00:04:38.330 --> 00:04:42.699
in and reply anywhere to the Wave. We have
the live concurrent editing which you're familiar

00:04:42.699 --> 00:04:49.030
with and, of course, what this has built upon
is what we believe is actually really important

00:04:49.030 --> 00:04:52.880
to the Wave ecosystem is the ability to add
custom extensions; in robots were just one

00:04:52.880 --> 00:04:59.620
type of that extension. So that's all part
of the Wave client itself. So let's jump to

00:04:59.620 --> 00:05:05.160
an overview. So what's robot? I mentioned
a robot has the same rights as a human. So

00:05:05.160 --> 00:05:08.639
human can jump into a Wave start editing,
you know, replying anywhere, do whatever they

00:05:08.639 --> 00:05:12.250
want, robots can do the same thing. It's very
important that we keep these two things in

00:05:12.250 --> 00:05:19.550
locks up and keep them equal because, you
know, you want to be able to build robots

00:05:19.550 --> 00:05:24.259
and it just as powerful as they're human counterparts.
And so, we do this using an HTTP based JSON

00:05:24.259 --> 00:05:28.860
protocol to listen to the events and to respond
of operations. I'm going to discuss real quick

00:05:28.860 --> 00:05:34.760
how that works and--so this is a quick screenshot
of, you know, human and robot. They all appear

00:05:34.760 --> 00:05:38.669
on the participant panel the same and, in
fact, many times it's actually very difficult

00:05:38.669 --> 00:05:45.440
to tell the difference between a human and
a robot, which I think is kind of a good thing.

00:05:45.440 --> 00:05:51.319
So this is just a couple images here to give
a really, really high level overview of what

00:05:51.319 --> 00:05:56.699
the protocol looks like. We have two things,
one we called active API and one we called

00:05:56.699 --> 00:06:01.710
passive. Passive is what we originally launched
with. It was basically where you could say,

00:06:01.710 --> 00:06:07.430
"Well, when I have this robot at appspot.com.
If someone adds that to a wave, whenever this

00:06:07.430 --> 00:06:11.260
modifications is being done to that wave,
I want to know about it, so we send you a

00:06:11.260 --> 00:06:16.840
JSON based request and then you can look at
that robot can rather and respond with operations

00:06:16.840 --> 00:06:21.790
also with JSON based operation. So, it has
that kind of, you know, that loop, it was,

00:06:21.790 --> 00:06:27.180
you know, don't' call us, we'll call you type
of model. With version two, we ruled out the

00:06:27.180 --> 00:06:34.930
active API using OAuth encoded request so
that your robot can send operations directly

00:06:34.930 --> 00:06:38.610
to our server without having to wait for any
kind of callback or anything like that and

00:06:38.610 --> 00:06:43.000
that's great for Push, right. If you need
to push content to wave, let's say a Twitter

00:06:43.000 --> 00:06:48.960
feed or whatever, you can just start waves
and start pushing content into them and adding

00:06:48.960 --> 00:06:54.570
people and so on and so forth. And clients,
of course, would see that happen in real time

00:06:54.570 --> 00:07:01.810
in there in the browser. So this is just a
real quick overview of the twp types of systems

00:07:01.810 --> 00:07:06.919
we have. And as far as events go, so I mentioned
that you, you know, robot receives events

00:07:06.919 --> 00:07:12.849
and then, you know, gives operations. So what
happens is when event happens on a Wave server,

00:07:12.849 --> 00:07:21.069
we send you a JSON encoded message and it
has the contents of, well, what just happen

00:07:21.069 --> 00:07:24.539
in that event, right. So before long here,
you know, Wave server receives an event like

00:07:24.539 --> 00:07:27.759
someone edited something or whatever. We sent
that to one of our servers, we call the robot

00:07:27.759 --> 00:07:32.260
proxy, and the server will take and concatenate
all the events that occur and look at the

00:07:32.260 --> 00:07:36.830
robots through on those waves and put them
in a JSON based format that the robot requires

00:07:36.830 --> 00:07:42.430
and send them out as HTTP request and wait
for a response and that response can include

00:07:42.430 --> 00:07:47.099
operations. So this is sent via HTTP and this
is where the robot can actually process the

00:07:47.099 --> 00:07:50.379
event and say, "Okay, well, someone added
this content and I need to look at it and

00:07:50.379 --> 00:07:55.139
fix it up or whatever." And, in fact, that's
very much how our spell checker works Spelly

00:07:55.139 --> 00:08:00.039
and Linky. You know, when you type a link
and wave, it looks like a link, so our robot

00:08:00.039 --> 00:08:06.180
looks at and goes, "Yup, this is actually
a link," and trace a link out of it. So I

00:08:06.180 --> 00:08:11.560
just wan to give a really quick look at what
this looks like. This is the wrong window.

00:08:11.560 --> 00:08:18.860
So I'm going to switch over here and this
shows some JSON, very simple and I'm not going

00:08:18.860 --> 00:08:22.470
to jump into it, but this is our protocol.
You can see we have, you know, the events

00:08:22.470 --> 00:08:26.990
that occurred. For example, blips made an
event occurred. Someone submitted a blip.

00:08:26.990 --> 00:08:31.969
Which way blip did this happen on, who edited
it, when did it happen, and what, you know,

00:08:31.969 --> 00:08:35.300
what was part of that content. And this is
all the information you basically need in

00:08:35.300 --> 00:08:44.020
order introspect and see--well, I care about
this or I don't care about that or whatever.

00:08:44.020 --> 00:08:47.850
And then, of course, symmetrically there's
the operation side where once you receive

00:08:47.850 --> 00:08:51.820
an event, you know, you look at it and go,
"Okay, that's great. I've seen this content.

00:08:51.820 --> 00:08:57.680
So, now, I want to, you know, mess this up,
change this, annotate this content, add a

00:08:57.680 --> 00:09:03.300
link, whatever, right, that all happens to
our operation protocol." So same thing, this

00:09:03.300 --> 00:09:07.210
is all happens in a request. We actually send
this back via JSON RPC so you can batch them.

00:09:07.210 --> 00:09:12.200
You say, "Well, here's a bunch of operation
I want you to play sequentially over the Wave

00:09:12.200 --> 00:09:19.400
or over this content." Robot proxy then takes
it. This is our server. And looks at it, goes,

00:09:19.400 --> 00:09:23.850
"Yup, this looks good, everything is great,"
and then applies them to the Wave server.

00:09:23.850 --> 00:09:32.650
So just again let's take a quick look at what
that is. So this is some operation JSON, probably

00:09:32.650 --> 00:09:39.830
maximizes more, but--so really all this is
a series of--it's an array of JSON RPCs saying,

00:09:39.830 --> 00:09:47.900
"Look, I want to change a title. I want to
modify some content," whatever. So that's

00:09:47.900 --> 00:09:51.270
great and that's the protocol, and we published
that so you can see. You go in kodakgoogle.com,

00:09:51.270 --> 00:09:55.371
check it out. And it's very important that
we publish this because, as I've mentioned

00:09:55.371 --> 00:10:00.630
before, we're opening this up beyond App Engine
to the point where, you know, you can build

00:10:00.630 --> 00:10:04.710
client libraries to wrap that. And that's
what we did at first. We open source two libraries

00:10:04.710 --> 00:10:10.380
Python and Java, of course, for App Engine
to handle that protocol for you. So you don't

00:10:10.380 --> 00:10:15.640
have to deal with that. You could just focus
on modifying the model classes that we provided

00:10:15.640 --> 00:10:20.970
wave, wavelet, blips and so on and just focus
on like modifying content and what the robot

00:10:20.970 --> 00:10:26.560
actually does. And, of course, you know, what
about this other languages. Well, it's not

00:10:26.560 --> 00:10:30.010
that we didn't like those other languages
or didn't want to support them. It's just

00:10:30.010 --> 00:10:36.660
that, you know, we were limited by what App
Engine supported at the time. So I actually

00:10:36.660 --> 00:10:41.830
think a Ruby client was actually created at
some point and I'm not sure how he did it,

00:10:41.830 --> 00:10:45.520
but I think he might have done some kind of
proxying where, you know, you've receive an

00:10:45.520 --> 00:10:50.260
event from those App Engine robot and proxy
it to his Ruby server and do something kind

00:10:50.260 --> 00:10:58.270
of crazy. So, you don't do that anymore. In
just a really quick "Hello World", this is

00:10:58.270 --> 00:11:01.700
in Python, it's one slide and the robots are
pretty dumb but, you know, it demonstrate

00:11:01.700 --> 00:11:07.000
that we can have a very low little code. Actually,
you know, a robot participating in the conversation

00:11:07.000 --> 00:11:10.171
and what this one does is, well, when it gets
added, it says, "Hey, you know, I'm here."

00:11:10.171 --> 00:11:14.820
Makes itself known. And then when anyone ever
gets added to the waves, so if, you know,

00:11:14.820 --> 00:11:18.330
you add the robot, then you add some friends
that robot will say hello to them, you know,

00:11:18.330 --> 00:11:22.920
when they get at it into the wave, which isn't
really useful but still kind of interesting

00:11:22.920 --> 00:11:31.290
in what three lines of code actually to do
that part. And--yup, so then, you know, we

00:11:31.290 --> 00:11:34.740
have all these nice things, like, yeah, you
can do that that's kind of--it's like a toy

00:11:34.740 --> 00:11:39.390
basically. So, we looked that and said, "What
do we need to do in order to make this really

00:11:39.390 --> 00:11:44.870
interesting and really powerful?" So we came
up with the version two which has a few things.

00:11:44.870 --> 00:11:49.850
It has more robust operations. These are operations
that will run both in the client and the server,

00:11:49.850 --> 00:11:54.650
so you can say, "Look, find me this text,
find me some texts like searches for Google

00:11:54.650 --> 00:11:59.710
and replace it with the link to, you know,
google.com." And so you would just send it

00:11:59.710 --> 00:12:03.550
to the server and the server will run that
logic for you and it also run on your side

00:12:03.550 --> 00:12:11.890
so that the content matches and we think this
is a much better way to, you know, to run

00:12:11.890 --> 00:12:15.310
this kind of operations and rather than you
having to look at the indices and go in and

00:12:15.310 --> 00:12:18.750
figure out what the annotation boundaries
should be and then send those off to the server.

00:12:18.750 --> 00:12:23.250
And by that time, of course, because people
are typing in a Wave the content has already

00:12:23.250 --> 00:12:27.140
changed and it doesn't mean anything and things
get all kind of crazy and out of control.

00:12:27.140 --> 00:12:32.560
We don't want that. Next thing is bandwidth
control; because we were limited to App Engine

00:12:32.560 --> 00:12:36.020
quota became very important. And, in fact,
there are a few robots that we launched and

00:12:36.020 --> 00:12:39.550
they became and other people launched and
it became somewhat popular and all of a sudden

00:12:39.550 --> 00:12:42.540
they stopped working. I said, "Well, why they
stopped working?" Because, of course, they

00:12:42.540 --> 00:12:48.240
hit their quota, because they were seeing
so much traffic. And if someone--we have this,

00:12:48.240 --> 00:12:51.520
you know, operation or we still do, we have
this event called document change. And document

00:12:51.520 --> 00:12:56.570
change means, well, send me an event every
time any of the content changes. And you can

00:12:56.570 --> 00:13:01.200
imagine, of course, if someone is in there
typing and editing blips, the robots are receiving

00:13:01.200 --> 00:13:04.560
lots and lots of JSON, lots and lots of content
and then that will blow out your quota very

00:13:04.560 --> 00:13:09.640
quickly. So what we did is we allowed to control
what you're interested in, so you can say,

00:13:09.640 --> 00:13:12.540
"Well, I want to know when document changes,
but I only want to know if it contains, you

00:13:12.540 --> 00:13:19.200
know, this regular expression or, you know,
whatever." Things like that, right, and that's

00:13:19.200 --> 00:13:23.140
much more important because then the work
is done on the server as opposed to, you know,

00:13:23.140 --> 00:13:28.400
us just sending you information and 99% of
the time doing well. This--I don't care about

00:13:28.400 --> 00:13:33.610
this, just drop it on the floor. So, that's
very important as well. And then a couple

00:13:33.610 --> 00:13:37.180
of the things, I'll just highlight real quick
are profile semantics. Now, you know, robots

00:13:37.180 --> 00:13:43.560
can actually--well, they can also act on behalf
of the users but they can look like they're

00:13:43.560 --> 00:13:47.521
from other users. So if you have a Twitter
stream coming in from a robot, you know, you

00:13:47.521 --> 00:13:52.490
want to be able to actually say who is this
from, right, who is this post from. You show

00:13:52.490 --> 00:13:56.930
their profile image, show their name and so
on. So, we allow you to do that with the system

00:13:56.930 --> 00:14:03.160
we called proxy for which Marcel will cover
in. He has a pretty cool demonstration of

00:14:03.160 --> 00:14:08.410
that in YouTube. And then finally, at Google,
we take data liberation very seriously. Meaning

00:14:08.410 --> 00:14:13.060
that, well, any data you pt in to our services
you should be able to get out at any time

00:14:13.060 --> 00:14:18.470
and take it to another service and with no
exception. Yup, we want you to be able to

00:14:18.470 --> 00:14:22.820
input content into Wave whether it's through
the robot API or directly in Wave. And have

00:14:22.820 --> 00:14:26.850
application developers write applications
that can pull your content, do something with

00:14:26.850 --> 00:14:33.330
it, store it, whatever you need to do, you
know, to make it useful. So we did that to

00:14:33.330 --> 00:14:38.550
allowing you to search cross waves and also
fetch wavelets. And so you can say, "Well,

00:14:38.550 --> 00:14:44.180
I know I'm on this wave give me this content
and I wan to take it and store it and do something

00:14:44.180 --> 00:14:50.020
with it later on or maybe push it back later."
So it's that whole two way transfer that we

00:14:50.020 --> 00:14:55.280
have. And that's really, really important
to new applications that, you know, that we

00:14:55.280 --> 00:15:00.950
think will be developed, you know, new clients
or Android applications or whatever, which

00:15:00.950 --> 00:15:07.460
is very important. Yup, so with that, I'm
actually going to switch over to Marcel here

00:15:07.460 --> 00:15:11.860
and he's going to go through a few of this
new feature and demonstrate them and give

00:15:11.860 --> 00:15:20.910
a couple cool demos. So, Marcel.
&gt;&gt; PRASETYA: Thanks, David. Everyone my name

00:15:20.910 --> 00:15:26.450
is Marcel Prasetya. I'm a software engineer
on the Google Wave team. Today, I'm going

00:15:26.450 --> 00:15:32.230
to talk about some of the new features and
best practices on the Google Wave Robots API

00:15:32.230 --> 00:15:35.380
version two that we launched a few months
ago. Some of the topics that I'm going to

00:15:35.380 --> 00:15:41.220
cover are--first one is the new document modified
operation and then context and filtering and

00:15:41.220 --> 00:15:47.870
then Proxy 4 and last one is the Active Robot
API. Now, without further ado let me just

00:15:47.870 --> 00:15:53.840
jump in to the first one, the document modified
operation. So in the first version of our

00:15:53.840 --> 00:16:00.100
API, in V1 most of our operations were index
and range base which result in a very error-prone,

00:16:00.100 --> 00:16:05.540
fragile, and cumbersome API. So take for example,
if you want to replace all occurrences of

00:16:05.540 --> 00:16:10.920
"foo" with "bar" in a blip, this is what the
code would look like in V1. So, first you

00:16:10.920 --> 00:16:18.530
need to get the text view of the blip and
then you need to look over of all the occurrences

00:16:18.530 --> 00:16:25.440
of "foo" in that text view and use that to
compute the range and then call the "textView.replace"

00:16:25.440 --> 00:16:30.360
method in passing the range and also replacement
text. So we think that's just way too much

00:16:30.360 --> 00:16:36.420
code for such a very simple operation. So
in the V2 API, we introduced this new operation

00:16:36.420 --> 00:16:41.530
called document modify that allows you to
modify blip content without using index or

00:16:41.530 --> 00:16:47.820
range as the reference. So in V2 replace "foo"
with "bar". The code will look like this,

00:16:47.820 --> 00:16:56.760
"blip.allfoo.replacebar", so it's a lot simpler,
more readable and also more intuitive. Now,

00:16:56.760 --> 00:17:04.789
let's take a look the components of this operation,
namely, the selectors and action. So I have

00:17:04.789 --> 00:17:12.429
a simple code same as before "blip.allfoo.replacebar".
So the first part, "allfoo" is a selector.

00:17:12.429 --> 00:17:17.350
So selector is something that restricts and
targets which part of the blip this operation

00:17:17.350 --> 00:17:22.959
should be applied to. We support a few different
selectors. We have "all" and "first". And

00:17:22.959 --> 00:17:28.509
should unique to apply operations using index
or range like in the V1 API, we also support

00:17:28.509 --> 00:17:35.950
App in range selector. In second part, replace
bar is an action. So action is something that

00:17:35.950 --> 00:17:40.580
dictates the server what needs to be done
on the regions that were match by the selectors.

00:17:40.580 --> 00:17:48.600
We support insert, insert after, replace,
delete, and annotate. So I have a table up

00:17:48.600 --> 00:17:54.120
here that show you the list of selectors and
actions that we currently support. Now, I'm

00:17:54.120 --> 00:18:02.529
going to switch to my wave plan here and show
you a little demo of a wave robot that uses

00:18:02.529 --> 00:18:12.009
this document modify operations to linkify
the word Google and YouTube. Okay, I have

00:18:12.009 --> 00:18:18.129
my wave plan here. First of all, I'm going
to create a new wave with that robot in it.

00:18:18.129 --> 00:18:30.600
I call my robot Wave Linky and I'm going to
type in something, "Hello, Google I/O. Have

00:18:30.600 --> 00:18:39.980
you seen our video on YouTube?" And then hit
submit, so when I hit submit the Wave server

00:18:39.980 --> 00:18:45.009
will broadcast an event, the blip submitted
event to the robot. So this Wave Linky robot

00:18:45.009 --> 00:18:49.240
will receive that event including the blip
content and will search for all occurrences

00:18:49.240 --> 00:18:54.179
of Google and linkify that, the same thing
with YouTube. As you can see now Google is

00:18:54.179 --> 00:19:01.660
underlined, and if I click on this, I'll be
directed to google.com homepage, and the same

00:19:01.660 --> 00:19:09.389
thing with YouTube. Okay, let me close that.
I'm going to switch back to my presentation.

00:19:09.389 --> 00:19:14.289
So I'm going to show you the code to do that.
It's very simple. So it's just "blip.all["Google"].annotate("link/manual",

00:19:14.289 --> 00:19:24.450
and then the google.com URL. So we use "all"
as the selector and "annotate" as the action.

00:19:24.450 --> 00:19:29.190
And the same thing for YouTube, it's just
"blip.all["YouTube"].annotate("link/manual",

00:19:29.190 --> 00:19:35.730
youtube.com". I'm going to show you a few
more sample codes here that uses document

00:19:35.730 --> 00:19:43.269
modify operations. So the first one that have--next
to the Google example there is a gadget blocker

00:19:43.269 --> 00:19:52.190
robot. So the code is "blip.all elementtypegadget.replaceblock".
So this code will look for all gadgets in

00:19:52.190 --> 00:20:01.980
a blip and replace it with a text block. The
next example that I have here will look for

00:20:01.980 --> 00:20:12.679
the first image in the blip and insert the
text TM. So the code is "blip.firstelementtypeimage.insertafterTM".

00:20:12.679 --> 00:20:19.730
And the last example that I have--as I mentioned
before, we also support selectors that are

00:20:19.730 --> 00:20:25.129
indexed and range-based, so I'm using range
here. The code is "blip.range6, 12delete".

00:20:25.129 --> 00:20:35.580
So basically this will delete the blip content
from index 6 to 12. So that was document modify

00:20:35.580 --> 00:20:40.759
operations. So, again, with this operation
you can do a lot of things, a lot of blip

00:20:40.759 --> 00:20:45.980
content manipulation operations without worrying
too much about index or range competition.

00:20:45.980 --> 00:20:55.010
So the next thing I'm going to talk about
is context and also filter. So in V2 API,

00:20:55.010 --> 00:20:59.779
we give the robot more flexibility in controlling
how much data and how much events should be

00:20:59.779 --> 00:21:06.740
broadcasted to the robot by specifying the
contexts and filters. So first one, context

00:21:06.740 --> 00:21:12.451
specifies which blip should be included in
an event bundle if there is an event for that

00:21:12.451 --> 00:21:20.190
robot. So you can specify Root, Parent, Self,
Siblings or Children as your context. Should

00:21:20.190 --> 00:21:27.539
you need all the blips in that wave, you can
also specify all. The second one, filter.

00:21:27.539 --> 00:21:34.970
So filter tells the server to only send an
event bundle to the robot if that event has

00:21:34.970 --> 00:21:41.629
a property that matches the given regular
expression filter. So by specifying context

00:21:41.629 --> 00:21:46.460
and filter properly, you could help to reduce
the bandwidth and CPU usage of your robot.

00:21:46.460 --> 00:21:51.120
This is very true, especially if your robot
is listening to a very chatty event, for example,

00:21:51.120 --> 00:21:57.230
the document change event, on a large wave.
And also, if you're using Google App Engine

00:21:57.230 --> 00:22:03.600
as your hosting provider, App Engine has quotas.
So by specifying contexts and filters, you

00:22:03.600 --> 00:22:10.019
can help to reduce your quota usage. Now I'm
going to show you a sample Java code on how

00:22:10.019 --> 00:22:15.519
to specify contexts and filters. So I have
a simple event handler method here that handles

00:22:15.519 --> 00:22:21.509
document change event. And the way you specify
contexts and filters are by setting them as

00:22:21.509 --> 00:22:27.140
attributes of the capability annotation. So
I have @capabilitycontext=context.PARENT,

00:22:27.140 --> 00:22:35.179
context.SELF and then filter is just the text
Google with double brackets. So what this

00:22:35.179 --> 00:22:42.600
means is that the server will only broadcast
this document change event to this robot if

00:22:42.600 --> 00:22:49.960
that even happens on a blip with the word
"Google" in it in double brackets. And also

00:22:49.960 --> 00:22:54.391
when the server broadcasts this event to the
robot, it will include two blips in the event

00:22:54.391 --> 00:23:00.120
bundle; namely, the blip where the event happens,
the SELF and also the PARENT blip of that

00:23:00.120 --> 00:23:08.529
blip. So that's context and filter. Again,
with context and filter you could help to

00:23:08.529 --> 00:23:16.769
reduce your bandwidth and CPU consumptions,
so you can be frugal with it. Next one I'm

00:23:16.769 --> 00:23:23.049
going to talk about is the Proxying-for feature.
This is also a new feature in the V2 API.

00:23:23.049 --> 00:23:33.149
So with this feature, a single robot can represent
many sub-participants in the format of robotid+proxyid@appspot.com.

00:23:33.149 --> 00:23:40.360
So, in a way with Proxying-for, robot can
implement its own participant namespace. And

00:23:40.360 --> 00:23:45.590
all events that are happening for the proxy
participants will be sent to that single robot,

00:23:45.590 --> 00:23:53.990
so in this case it will be sent to this robotid.appspot.com,
and then that robot can process those event

00:23:53.990 --> 00:24:02.149
bundles and then reply with operations on
behalf of those proxy participants. So robot

00:24:02.149 --> 00:24:07.379
that acts as a gateway for an external service
provider, for example, like YouTube, Twitter

00:24:07.379 --> 00:24:14.369
or Facebook could use the Proxying-for feature
to send operations kind of on behalf of that

00:24:14.369 --> 00:24:19.590
service provider users. For example, like
A YouTube robot, youtube@appspot.com can send

00:24:19.590 --> 00:24:26.210
replies and post comments back at the Wave
as if the comments were coming from a YouTube

00:24:26.210 --> 00:24:31.840
user, like in this case user1, by sending
operations authored by youtube+user1@appspot.com.

00:24:31.840 --> 00:24:40.009
Now I'm going to switch over to my Wave client
again. I'm going to show you a sample YouTube

00:24:40.009 --> 00:24:47.220
robot that I had over the weekend. Let's see
if this work. So basically, this robot will

00:24:47.220 --> 00:24:54.179
display the doctor Wave, Intro to Wave tutorial
video and also fetch the last three comments.

00:24:54.179 --> 00:25:04.360
So first let me create a new wave with that
robot in it. It has a YouTube logo, so. All

00:25:04.360 --> 00:25:12.980
right. So it displays the video in the ROOT
blip and then displays the last three comments.

00:25:12.980 --> 00:25:17.460
Okay, so the last comment is from Road Biker,
"I like his lab coat." So I'm going to--now

00:25:17.460 --> 00:25:24.320
I'm going to switch over to YouTube, just
reload this, just to make sure that the last

00:25:24.320 --> 00:25:43.519
comment is indeed from Road Biker. Cocoballs,
click that. His name is Road. Okay. It says,

00:25:43.519 --> 00:25:55.070
"I like his lab coat." Okay. All right. So
as you can see here, the comments were attributed

00:25:55.070 --> 00:26:00.190
to the YouTube user. So like Sephora here,
Invictus1983 and Road Biker, they are not

00:26:00.190 --> 00:26:06.499
Wave users; they are YouTube users. And if
you click on the participant profile on the

00:26:06.499 --> 00:26:14.090
thumbnail here, you can disp--the profile
cart shows that this blip was actually created

00:26:14.090 --> 00:26:20.320
by mprasetya-youtube, that is my robot ID,
plus Cocoballs, which is the YouTube user

00:26:20.320 --> 00:26:28.659
ID, @appspot.com. So we use a YouTube user
ID as a proxy ID here. Also, you may wonder

00:26:28.659 --> 00:26:33.369
how--like, "How does the client display this
custom profile information that's coming from

00:26:33.369 --> 00:26:40.629
YouTube?" So when the server needs to render
a proxy participant, profile information,

00:26:40.629 --> 00:26:44.900
it will actually talk to the robot. It will
make a profile request to the robot in passing

00:26:44.900 --> 00:26:50.340
the proxy ID. The robot can take that proxy
ID, and in this case the YouTube robot will

00:26:50.340 --> 00:26:55.360
use that to query the YouTube to give me a
profile information for Cocoballs. So then

00:26:55.360 --> 00:27:02.399
YouTube will respond with the display name
here, Road Biker, and also the thumbnail URL

00:27:02.399 --> 00:27:09.980
for this user. I'm going to switch back to
my presentation and show you the code to do

00:27:09.980 --> 00:27:16.169
that. It's very simple. So first, the robot
will just fetch a comment from YouTube--it's

00:27:16.169 --> 00:27:22.820
this line here--fetch a comment by from YouTube
and just passing the video ID. And I have

00:27:22.820 --> 00:27:28.899
a separate method that makes the GData to
YouTube to fetch a comment. And then for each

00:27:28.899 --> 00:27:35.250
comment, the robot extracts the user information
and use that to create a proxy version of

00:27:35.250 --> 00:27:41.210
the wavelet by calling wavelet.proxy-for and
passing that YouTube user ID as the proxy

00:27:41.210 --> 00:27:46.860
ID here. So once you have that proxy wavelet,
you can start making replies. So you can start

00:27:46.860 --> 00:27:52.830
sending operations on behalf of that proxy
participant. So in this case, the robot calls

00:27:52.830 --> 00:28:02.100
the reply method, "proxywave.reply" to post
the comment.

00:28:02.100 --> 00:28:10.879
Okay. So that was Proxying-for. Again, with
proxying-for you can--if you built a gateway

00:28:10.879 --> 00:28:17.029
robot that bridge Wave with an external service
provider, you can push contents into Wave

00:28:17.029 --> 00:28:22.559
and properly attribute the contents--properly
attribute the blips with that service provider

00:28:22.559 --> 00:28:29.029
user. So the next thing that I'm going to
talk about is the Active Robot API, which

00:28:29.029 --> 00:28:33.940
was one of the topic classic features since
we launched the version one of our API. So

00:28:33.940 --> 00:28:46.980
in VI, robot can only send operations in response
to events. So robots were passive. So it cannot

00:28:46.980 --> 00:28:53.110
do anything useful until the server talks
to the robot or broadcast an event to the

00:28:53.110 --> 00:28:59.409
robot. So then we decided in the V2 API, we
introduced this notion of the Active API,

00:28:59.409 --> 00:29:05.780
where robot can send operations on demand
at any time to our server even outside the

00:29:05.780 --> 00:29:12.730
event loop. So to accomplish this, we provide
an HTTP server that handles HTTP and HTTPS

00:29:12.730 --> 00:29:17.200
request that robot can make the active calls
to this. Basically, the robot can just make

00:29:17.200 --> 00:29:22.649
JSON RPC call to the server to send the active
call. So the call will be done over HTTPS,

00:29:22.649 --> 00:29:27.950
so the data will be encrypted and also the
call will be signed and authenticated with

00:29:27.950 --> 00:29:32.759
OAuth--with two-legged OAuth. So before you
can start using the Active API, you need to

00:29:32.759 --> 00:29:39.119
register your robot to do this one-time registration
process to get your consumer Key and Secret.

00:29:39.119 --> 00:29:48.519
Now I'm going to show you, again, with my
YouTube robot. So with the Active API, if

00:29:48.519 --> 00:29:55.230
you have a gateway robot, for example like
this YouTube robot, you can make this robot

00:29:55.230 --> 00:30:00.379
to push things or update Waves if there is
an event on the external service. So I'm going

00:30:00.379 --> 00:30:04.710
to make this robot a little bit more interesting.
I'm going to introduce a cron job that will

00:30:04.710 --> 00:30:09.610
periodically check YouTube and see if there
is any new comments on this Dr. Wave video.

00:30:09.610 --> 00:30:19.419
And if there is one, it will post that new
comments back into wave.

00:30:19.419 --> 00:30:28.330
Okay, so I'm going to switch over YouTube
and I'm going to post a new comment. I will

00:30:28.330 --> 00:30:38.820
say, "I like his lab coat too," then hit post.
And I'm going to switch it over back to Wave

00:30:38.820 --> 00:30:52.149
and if you're lucky, in a few seconds you
should see my new post. So, okay, there you

00:30:52.149 --> 00:31:02.739
go. Hooray, it works. It didn't work this
morning. So basically this cron job will go

00:31:02.739 --> 00:31:07.169
to YouTube using the YouTube Gdata API to
fetch for the last comment. And if there's

00:31:07.169 --> 00:31:13.869
a new comment, it will make an active call
back into wave to post this new comment. So

00:31:13.869 --> 00:31:19.639
I'm going to switch over to my presentation
and show you how to use Active API in your

00:31:19.639 --> 00:31:26.870
code--robot code. So I have the robot--the
cron handler here. First thing that you need

00:31:26.870 --> 00:31:33.669
to do is to establish your OAuth credential
by calling to set up OAuth method on the robot.

00:31:33.669 --> 00:31:39.739
So call robot.setupoauth and pass in the consumer
Key and Secret. And then I'm going to create

00:31:39.739 --> 00:31:44.309
a stop wavelet--so you can do this in two
ways. So you can create a stop wavelet by

00:31:44.309 --> 00:31:49.739
calling robot.bindwavelet and then you can
apply operations to it or you can also fetch

00:31:49.739 --> 00:31:54.859
the wavelet by calling robot.fetchwavelet.
I prefer to do the bind wavelet here because

00:31:54.859 --> 00:32:01.859
it's faster and I don't need the actual Wave
content. And then I'm going to talk to YouTube

00:32:01.859 --> 00:32:07.509
called this get comments method again to fetch
the new comments and use the technique that

00:32:07.509 --> 00:32:14.489
we talked earlier in the Proxying-for slides
to post these new comments back to the Wave.

00:32:14.489 --> 00:32:21.269
And then lastly, the most important bit in
the Active API is you need to actually submit

00:32:21.269 --> 00:32:26.800
your pending operations by calling the submit
method. So you do robot.submit and you pass

00:32:26.800 --> 00:32:32.749
in the wavelet in the URL, which is the URL
of the server that handles incoming active

00:32:32.749 --> 00:32:44.909
call. So the URL here is HTTPS www.googleopensourceshell.googleuserscontent.com/apis/rpc.
So when you call submit several things will

00:32:44.909 --> 00:32:52.359
happen. First, the client library will inspect
the operation queue of that wavelet and serialize

00:32:52.359 --> 00:32:58.460
the pending operations into JSON. And then
once that's serialized it will prepare an

00:32:58.460 --> 00:33:04.090
HTTP request. And they will sign that HTTP
request with OAuth using your consumer Key

00:33:04.090 --> 00:33:12.299
and Secret and make an HTTPS call to the server.
So when the server receives this active call

00:33:12.299 --> 00:33:20.309
request, first, it will validate the incoming
call to make sure that it hast he proper OAuth

00:33:20.309 --> 00:33:26.519
signature just so that we can authenticate
like which robot is actually making this active

00:33:26.519 --> 00:33:31.840
call. Once this succeeds validation, the server
will start applying the operation and you

00:33:31.840 --> 00:33:38.840
can start seeing the updates in the Wave.
And then once the server is done processing

00:33:38.840 --> 00:33:44.549
those operations, it will JSON RPC response
back to the robot. So then you can inspect

00:33:44.549 --> 00:33:55.240
if there is any error or if there is any other
message in the response. Okay. So one other

00:33:55.240 --> 00:34:03.690
thing that I would like to mention here--so
someone just replied. Is it one of you guys?

00:34:03.690 --> 00:34:10.400
So as you probably noticed before, like I
didn't do anything in this Wave. I did not

00:34:10.400 --> 00:34:14.471
type anything, I did not add a participant,
I did not submit a blip. I didn't do anything.

00:34:14.471 --> 00:34:23.400
So it was purely the robot that's making active
callback into the Wave server. So again, that's

00:34:23.400 --> 00:34:29.280
Active API. So with that, you can start pumping
operations day-in and day-out to our Wave

00:34:29.280 --> 00:34:37.540
server. All right, so now we've talked about
some of the best practices and the new features

00:34:37.540 --> 00:34:42.240
in the V2 API, I would like hand the floor
back to David to do some deep dive on some

00:34:42.240 --> 00:34:56.350
sample robot. David?
&gt;&gt; BYTTOW: Yeah. Is my mic on? No. Sound?

00:34:56.350 --> 00:35:02.760
Yes? Okay, good. Perfect. Right. So I want
to stop there real quick and just give a couple

00:35:02.760 --> 00:35:09.120
of opinions. So Marcel, you know, covered
about, you know, how to push data into Wave.

00:35:09.120 --> 00:35:16.380
But really recently, we actually--and this
is a leading edge, I guess--opened up the

00:35:16.380 --> 00:35:22.500
ability for you to push content to Wave on
behalf of other users using what we call or

00:35:22.500 --> 00:35:29.540
what OAuth calls three-legged OAuth. This
is--I know I said a number of things are important,

00:35:29.540 --> 00:35:34.970
but to me especially very, very important
and going to be very, very interesting, right?

00:35:34.970 --> 00:35:40.510
Because, you know, love it or hate it, you
don't need to go to our client anymore. We

00:35:40.510 --> 00:35:45.360
can actually build applications, allow you
to use Wave as a platform, right--remember

00:35:45.360 --> 00:35:53.350
this product platform and protocol--it's a
platform for your data, right? And you get

00:35:53.350 --> 00:35:56.140
all the concurrency, you get all the active
push, you get all the, you know, everything

00:35:56.140 --> 00:36:02.040
that Wave is known for but without having
to actually go to the client. And so, you

00:36:02.040 --> 00:36:05.140
know, in the next couple of weeks we're going
to be rolling out more documentation and more

00:36:05.140 --> 00:36:13.220
examples of this, you know, with an Android
application sample with, I guess we can call

00:36:13.220 --> 00:36:18.780
it maybe a Wave light-type implementation
of a client. And, you know, I'm really, really

00:36:18.780 --> 00:36:23.020
interested to see what the developers could
do with that to kind of, again, circumvent

00:36:23.020 --> 00:36:28.840
the clients and push and extract content directly
out of the platform that we've built. So I

00:36:28.840 --> 00:36:34.420
just wanted to stop and mention that. And
now I'm going to jump over to just a few examples

00:36:34.420 --> 00:36:40.470
of robots using some of the things that Marcel
pointed out. Well, one is Monty. And this

00:36:40.470 --> 00:36:45.740
is actually a robot that I built, I guess,
last year. And I just want to show it really

00:36:45.740 --> 00:36:53.390
quick because it does--it's fairly interesting
to kind of see how Wave can be used as almost

00:36:53.390 --> 00:36:58.370
like an IDE or an interactive IDE. So what
Monty does is it's a Python interpreter or

00:36:58.370 --> 00:37:02.620
a Python-based robot that evaluates Python
code that you put into Wave and then it outputs

00:37:02.620 --> 00:37:08.550
the result directly. So, you know, you can
communicate or you can--we have a tag line--you

00:37:08.550 --> 00:37:12.510
can collaborate on the code directly and have
the robot run it. And the features that are

00:37:12.510 --> 00:37:17.590
used are wavelet self added and then blip
submit it; very simple, nothing complex going

00:37:17.590 --> 00:37:23.990
on. So let's just jump over to demo real quick.
I'm going to attempt to write some code directly

00:37:23.990 --> 00:37:31.860
in Wave here. So I add Monty and it says,
"You have to input the program" and so I'm

00:37:31.860 --> 00:37:39.630
going to input, say, a Fibonacci program--by
the way, there's a bug in this code and if

00:37:39.630 --> 00:37:43.790
you can point it out after this is over, perhaps
at the mic, we'll send you a T-shirt. So let's

00:37:43.790 --> 00:37:59.070
do this. Right. Okay. So now, I should just
be able to--we have this little wave.setresults--results.

00:37:59.070 --> 00:38:03.380
So this should give me the output of Fibonacci
of 10. All right, so 89, which I do know is

00:38:03.380 --> 00:38:10.030
the output of 10. And of course you can come
in and change or add other people to do it

00:38:10.030 --> 00:38:15.330
and, you know, do whatever you need to do
to your program. You can modify it live. I

00:38:15.330 --> 00:38:23.120
don't know, I guess that's probably right.
So yeah, so of course you can come in and

00:38:23.120 --> 00:38:28.610
also let's say you have an error in your program,
Monty will tell you that, "Well here's the

00:38:28.610 --> 00:38:33.260
error." So it's, you know, again, this is
actually a robot that was written in very

00:38:33.260 --> 00:38:40.470
few lines of code. I can hop over that, show
you--this is the entire program written in

00:38:40.470 --> 00:38:45.580
Wave actually. So there's just some code that--this
is all of the Python's specific code that

00:38:45.580 --> 00:38:51.510
will actually run the program for you. And
then down below is the Wave code that says

00:38:51.510 --> 00:38:55.490
well when a blip submitted comes in. If this
is the root blip, that's good. I'm going to

00:38:55.490 --> 00:39:00.270
process it. Otherwise, just jump out, execute
the program, and then take the content and

00:39:00.270 --> 00:39:07.270
output it to the first blip and just feed
the result directly through. Very simple but

00:39:07.270 --> 00:39:13.350
yet very powerful and again as I was saying,
you know, this doesn't have to be done in

00:39:13.350 --> 00:39:15.480
the client, all right? And with this, and
with the OAuth-enabled system, you can actually

00:39:15.480 --> 00:39:18.310
build an IDE that pushes content into Wave.
Allows people to collaborate on it and get

00:39:18.310 --> 00:39:29.430
results back and still use robots, and all
of that sort of thing so, It'll be interesting.

00:39:29.430 --> 00:39:34.290
Mr-Ray. Mr-Ray is actually one of my favorite
robots because it kind of goes into the direction

00:39:34.290 --> 00:39:40.990
that I'm talking about with alternative clients.
So what Mr-Ray does, it's actually very clever

00:39:40.990 --> 00:39:45.760
and very well architected. It allows non-Wave
users to actually participate in conversations

00:39:45.760 --> 00:39:52.170
when they're not on Wave, Yeah? So how do
you do that? Well, you don't--you make it

00:39:52.170 --> 00:39:57.290
so that they don't have to go into Wave to
actually participate this is actually really

00:39:57.290 --> 00:40:02.411
clever. And this is probably the reason why
it won first place in the --Mashable put on

00:40:02.411 --> 00:40:09.980
an API contest and Mr-Ray, I think, took that
pretty quickly. So some of the features, it

00:40:09.980 --> 00:40:13.590
uses our Proxy-For, which Marcel demonstrated.
Because if someone's going to be--if you're

00:40:13.590 --> 00:40:17.550
going to be pushing content to wave, you need
to know who is this, right? If there's some

00:40:17.550 --> 00:40:22.330
other joschmo@gmail.com, it needs to, you
know, reply--you're communicating with them

00:40:22.330 --> 00:40:26.700
and they reply to the Wave. Well, you need
to know that, that's where it's coming from

00:40:26.700 --> 00:40:30.910
and not actually the robot itself. And I'll
show you what I mean by that. And also I want

00:40:30.910 --> 00:40:38.280
to say that it also uses the gadget for control
flow, right? That's a typical pattern that

00:40:38.280 --> 00:40:42.960
people use. The robot inserts the gadget.
It's kind of like a Control Panel fuse. Again,

00:40:42.960 --> 00:40:48.740
it's very clever. So I'm not going to show
the whole thing. I'm just going to jump over

00:40:48.740 --> 00:40:55.300
to some examples that I have. So I have a
Mr-Ray wave, right, where I actually have

00:40:55.300 --> 00:41:02.510
Mr-Ray on the Wave and I've added myself,
my personal Gmail, and myself, my other self

00:41:02.510 --> 00:41:06.900
to the Wave. And you can see here there's
this control panel where I've added myself.

00:41:06.900 --> 00:41:11.540
And this is a simple conversation. Now these
avatars could be changed but, right now, it's

00:41:11.540 --> 00:41:16.420
using a, you know, just a little simple and
denoting that's coming from Mr-Ray. But this

00:41:16.420 --> 00:41:23.330
is actually from, you know, crazy waver which
is the Gmail account of this wave account.

00:41:23.330 --> 00:41:30.460
And so there's a conversation going on here.
So if I switch back and I say, "Hey," now

00:41:30.460 --> 00:41:36.640
what that other user has is a client to actually
go and see that content and reply to it. So

00:41:36.640 --> 00:41:39.880
if I jump back to my links, this is what they're
presented with when you add them to this wave

00:41:39.880 --> 00:41:46.640
with Mr-Ray, not the redirect notice. They're
presented with an actual, yes. So, this is

00:41:46.640 --> 00:41:49.931
kind of a like, you know, it's a view of the
Wave. It's--it got some buttons for reply.

00:41:49.931 --> 00:41:55.731
It's simple but it's--it works, all right?
And even more so now, you don't need to do

00:41:55.731 --> 00:42:02.140
these with robots anymore, you can actually
do it with having the user log in to this

00:42:02.140 --> 00:42:06.140
and authenticate with us, come back, and now
they're authenticated to our wave client.

00:42:06.140 --> 00:42:10.520
You can push content directly in on their
behalf. You don't have to do any kind of proxy

00:42:10.520 --> 00:42:16.570
for anything like that. They're an actual
user at that point. So, you know, you of course,

00:42:16.570 --> 00:42:25.600
you can reply, you know. And same story, it'll
push the content back and I come back into

00:42:25.600 --> 00:42:34.610
Wave, and of course, it's there, yep. So,
again it's--it is an alternative client, right?

00:42:34.610 --> 00:42:40.130
And it's very neat, very clever. And then
just one more robot I want to show before

00:42:40.130 --> 00:42:45.370
we jump into the robot liberation is Ferry.
Now this--I wanted to show this because, you

00:42:45.370 --> 00:42:50.800
now, one of the themes of I/O is enterprise
development. And aside from, you know, nice

00:42:50.800 --> 00:42:56.250
little toys and robots and such, it's very
important that you'd be able to get your content

00:42:56.250 --> 00:42:59.870
into other services, right, like Google Docs
for example. And Ferry does just that. It

00:42:59.870 --> 00:43:04.510
exports waves into Google Docs and allows
you to take it and save it there and modify

00:43:04.510 --> 00:43:09.270
it and collaborate that way and then push
content back into wave. So I'm just going

00:43:09.270 --> 00:43:14.280
to demonstrate that very quickly. It uses
OAuth, by the way, for access. So when you're

00:43:14.280 --> 00:43:21.510
in Wave, you can grant access to Google Docs
or grant access to the robot on your behalf

00:43:21.510 --> 00:43:28.350
for Google Docs. I set it right the first
time. So let's jump over here and look at

00:43:28.350 --> 00:43:34.570
a wave. So, it's very simple to use. You install
Ferry through the extension gallery and it

00:43:34.570 --> 00:43:39.000
shows up on the Tool bar when you're in edit
mode. So I started this document. I can actually

00:43:39.000 --> 00:43:43.660
probably just through it real quick and give
you a quick demonstration, so again, sample

00:43:43.660 --> 00:43:48.849
document, pretty boring. Let's pretend this
is a really long document that I've--we've

00:43:48.849 --> 00:43:56.219
been working on collaborating on and so on.
"I can't type, when I'm on that school." So

00:43:56.219 --> 00:43:59.930
on the Tool bar, you'll see that there's this
is icon which is available. So you click that

00:43:59.930 --> 00:44:04.620
icon, Ferry jumps on the Wave and goes, "Okay
I want to access this." Here's again, another

00:44:04.620 --> 00:44:10.110
gadget used for controlling what's happening
rather than, you know, having to parse text

00:44:10.110 --> 00:44:16.690
and so on. It works very, very well. So, yep,
I'm just going to say, "Go," "Great," click

00:44:16.690 --> 00:44:25.340
here to grant access. It does a little OAuth
dance. Yep, grant access. Of course, once

00:44:25.340 --> 00:44:32.510
you're authenticated, you should remain authenticated
at that point. I think I clicked it. Anyway,

00:44:32.510 --> 00:44:39.280
I'm going to jump over here and, okay so this
says it will sink automatically. It's a little

00:44:39.280 --> 00:44:48.590
bit slow. Yep, an error occurred, perfect.
So--but luckily I did creates a document before

00:44:48.590 --> 00:44:53.510
I ran through this, just before the demonstration
or just before the session. And I do have

00:44:53.510 --> 00:44:56.630
a document which is very similar. Which is,
again, this is a sample document. You can

00:44:56.630 --> 00:45:00.580
look at this in Docs, and it's a nice way.
And now this is was just a start. Yeah, there's

00:45:00.580 --> 00:45:05.770
actually a talk later on today which describes
getting content in and out of Wave. It's the

00:45:05.770 --> 00:45:06.780
media APIs and it's more than just documents.
It's also images and attachments and so on.

00:45:06.780 --> 00:45:12.330
But you can see that the robot API is the
least powerful now for it allow you--allowing

00:45:12.330 --> 00:45:21.620
you to do this sort of thing, you know, today.
So, that was a few robots. Robot Liberation,

00:45:21.620 --> 00:45:26.390
now this actually was something we've been
talking about. You know, we realized over

00:45:26.390 --> 00:45:30.800
the last year, we've given a number of talks
and it always said, "Well, today robots run

00:45:30.800 --> 00:45:36.091
an App Engine. But tomorrow, that, you know,
we promise we'll open it up." And you know,

00:45:36.091 --> 00:45:39.331
for one reason another, we're working on,
you know, with our limited resources, working

00:45:39.331 --> 00:45:43.670
on some, a lot of the other features that
Marcel demonstrated. So a few weeks ago, we

00:45:43.670 --> 00:45:48.540
said, "Well, why haven't we done this yet?"
There's not really a great reason. And it's

00:45:48.540 --> 00:45:56.880
a really big bang feature, right? So we did
it. And it works today. We're going to be

00:45:56.880 --> 00:46:01.600
rolling out some more documents over the week
to make it easier in a few updates. It's not

00:46:01.600 --> 00:46:09.980
as seamless as I'd like it today admittedly,
but it will be very soon. But it does work.

00:46:09.980 --> 00:46:13.960
So I just mentioned all that. I'm not going
to go over how it works completely. And it's

00:46:13.960 --> 00:46:17.990
not that important. And there's a flow where
essentially you, you know, same old story

00:46:17.990 --> 00:46:22.600
where you have your URL that you want your
robot to live on or rather you want events

00:46:22.600 --> 00:46:28.410
to be sent to that URL, yeah. And then, well,
you have to say prove ownership of that domain

00:46:28.410 --> 00:46:32.961
or that URL. So what we do is we have a form
where we'll say, "Look, this is what I want

00:46:32.961 --> 00:46:39.410
my robot ID to be," which would be something
like, you know, "waverobot@googlewaverobots.com",

00:46:39.410 --> 00:46:45.070
which by the way means we're moving away from
appspot.com and onto our own domain. And this

00:46:45.070 --> 00:46:49.790
is my URL. We got a prove ownership. So we
give you a token that you have to serve up

00:46:49.790 --> 00:46:53.920
and then you come back, click verify. We make
sure you put that token on that URL, rate,

00:46:53.920 --> 00:46:59.440
and we issue you your ID, we issue you your
consumer keen secret, and off you go. And

00:46:59.440 --> 00:47:07.330
you can add that robot. So there was a Go
talk earlier today. And, you know, "Go" is

00:47:07.330 --> 00:47:10.600
an interesting language to me. I don't really
know it. but I want to learn it. But there

00:47:10.600 --> 00:47:16.010
was a developer who really likes wave and
his on the Go team. So when he found out that

00:47:16.010 --> 00:47:21.870
we were opening up robots like this literally
two weeks ago, he built a client library.

00:47:21.870 --> 00:47:26.260
And he's still working on. It'll be open source
very soon. And I said, "Well, that's great.

00:47:26.260 --> 00:47:32.070
That's awesome. Let's demo that." So that's
what we're going to do real quick. Just, you

00:47:32.070 --> 00:47:37.850
know, it's a very simple--simple robot. Before
I actually show the demo, I just want to highlight

00:47:37.850 --> 00:47:43.810
the code for a Go robot. It looks very similar
to Python. It's very easy to use. If you're

00:47:43.810 --> 00:47:49.500
familiar with Python, you'd be familiar with
how to use the Go language. And all this does

00:47:49.500 --> 00:47:52.900
is a simple hello world. The robot demo I'm
going to show is actually a little bit more

00:47:52.900 --> 00:47:58.970
sophisticated. So let's do that. So I'm going
to jump over here, actually to my Sandbox.

00:47:58.970 --> 00:48:02.870
Again, I should--I forgot to mention that
our Robot Liberation is only available on

00:48:02.870 --> 00:48:09.100
Sandbox today, very soon. It'll be available
on the--on our public instance. And I promise

00:48:09.100 --> 00:48:14.430
it won't take as long as it took for us to
get off of that [INDISTINCT], it will actually

00:48:14.430 --> 00:48:19.720
be very soon. So, jump over here. And you'll
see that I can add GoBot. Actually before

00:48:19.720 --> 00:48:27.600
I do that, I'm going to submit this blip.
Oops. I'm here at GoBot. So, GoBot is actually

00:48:27.600 --> 00:48:34.350
at googlewaverobots.com. And I can show you
that it's actually not an App Engine. Okay,

00:48:34.350 --> 00:48:39.220
he says, "Hi." If I click his profile, you
can see that his website--actually, that doesn't

00:48:39.220 --> 00:48:43.520
prove it. But I assure you that this is not
running on App Engine. This is running on

00:48:43.520 --> 00:48:51.790
his VPS. And, you know, we're just--you know,
we're just sending request directly to that.

00:48:51.790 --> 00:48:58.970
So if I come over here, I'd say, "Hi." Go
is a new programming language. Go, and then

00:48:58.970 --> 00:49:02.550
of course you can reply. And it's very quick.
You notice that things are much snappier these

00:49:02.550 --> 00:49:08.730
days, which is great. And it can embed, you
know--embeds a video about Go and so on. So,

00:49:08.730 --> 00:49:15.610
you know, very basic but he know, he built
this in literally a week. And we're excited

00:49:15.610 --> 00:49:20.000
to see, you know, various other languages
being used and it's great because, you know,

00:49:20.000 --> 00:49:24.280
with App Engine, App Engine is stateless,
right? So anything that comes in, you get

00:49:24.280 --> 00:49:28.300
a request. You send a response back. If you
want to store any kind of state, you have

00:49:28.300 --> 00:49:33.100
to store it in datastore. It's a little bit
tricky. But when you're running on your own

00:49:33.100 --> 00:49:40.390
server, you can have locally cached states
and so on and so forth, so that's great. And

00:49:40.390 --> 00:49:43.080
then, you know, there's a number of other
languages and things could be ported to. I

00:49:43.080 --> 00:49:48.271
don't--I just came up with the list. I had
another one in mind but I never typed it.

00:49:48.271 --> 00:49:52.180
That's the empty bullet point. So hopefully
we'll, you know, see some of these very soon,

00:49:52.180 --> 00:50:00.450
using our protocol. Everything I mentioned
today, and Marcel mentioned, is available

00:50:00.450 --> 00:50:07.290
in example, except for the little anecdotal
stories, at code.google.com/api/wave. Like

00:50:07.290 --> 00:50:13.420
I said, we're going to be diligently updating
the documentations or the documentation. And

00:50:13.420 --> 00:50:22.310
you know, with how to liberate your robots
and the OAuth stuff which is going to be pretty

00:50:22.310 --> 00:50:28.190
interesting. So, we look forward to that.
And yep, so that pretty much concludes our

00:50:28.190 --> 00:50:32.410
talk. I just want to thank you for coming
and listening to this. We're going to check

00:50:32.410 --> 00:50:37.470
out the Wave, see if there's any questions.
Otherwise, please you know, feel free to ask

00:50:37.470 --> 00:50:40.940
a question on the mic. Again if you saw a
bug on the Fibonacci program, feel free to

00:50:40.940 --> 00:50:51.110
mention that too and we'll send you a T-shirt.
So, yep, so that's it. Thank you. Hi there.

00:50:51.110 --> 00:51:01.430
Oh, we got--okay, so yes, sir.
&gt;&gt; Robot liberation is very exiting, I was

00:51:01.430 --> 00:51:05.170
wondering if you have a fine grain timescale
as to when we can expect that documentation.

00:51:05.170 --> 00:51:11.620
&gt;&gt; BYTTOW: Yep, so I think the documentation
is available now, as far the flow goes. So--in

00:51:11.620 --> 00:51:16.310
fact, I ran to the registration just before
this session, it's all good. The only thing

00:51:16.310 --> 00:51:24.600
that's changing is just a few updates to make
it a little bit easier to do, right, because

00:51:24.600 --> 00:51:28.900
right now, you register your ID. If it's a
taken ID, it's not clear immediately. But

00:51:28.900 --> 00:51:32.010
bear with us there and we'll be fixing it
up.

00:51:32.010 --> 00:51:33.510
&gt;&gt; Super, thank you.
&gt;&gt; BYTTOW: Yep.

00:51:33.510 --> 00:51:40.470
&gt;&gt; Hi. I may have just missed the slide. But
in your Cron handler method that was getting

00:51:40.470 --> 00:51:46.050
called periodically, how do you actually route
a URL to that method?

00:51:46.050 --> 00:51:53.530
&gt;&gt; PRASETYA: Oh, so--so for my example robot
I just use App Engine Cron or App Engine Task

00:51:53.530 --> 00:51:58.880
Queue, you can do that.
&gt;&gt; Okay. And you can like directly assign

00:51:58.880 --> 00:52:04.970
your method to an action that occur periodically?
&gt;&gt; PRASETYA: So, yeah--so, the way App Engine

00:52:04.970 --> 00:52:11.080
Cron and the Task Queue work is just basically
a servlet that App Engine system will call

00:52:11.080 --> 00:52:17.692
in a period of time. So, it's--so that you
can just put that method inside a servlet.

00:52:17.692 --> 00:52:20.770
And inside the get handler, you can just call
that method.

00:52:20.770 --> 00:52:24.990
&gt;&gt; Okay. And okay, that will [INDISTINCT]
the API for that. And the Fibonacci sequence

00:52:24.990 --> 00:52:29.600
I believe is incorrect for an argument of
zero.

00:52:29.600 --> 00:52:31.030
&gt;&gt; BYTTOW: Zero and one.
&gt;&gt; Yes.

00:52:31.030 --> 00:52:38.370
&gt;&gt; PRASETYA: Yep.
&gt;&gt; BYTTOW: Yes, that's right. Good job. Oh,

00:52:38.370 --> 00:52:44.960
let me jump over to the Wave, because--let's
see if there was anything real quick. If anyone

00:52:44.960 --> 00:52:48.630
else has any question, feel free to jump on.
Is this half of the thing? No.

00:52:48.630 --> 00:52:52.520
&gt;&gt; PRASETYA: Oh, like, no light wave, yeah.
&gt;&gt; BYTTOW: [INDISTINCT]

00:52:52.520 --> 00:52:57.710
&gt;&gt; PRASETYA: No, this one here.
&gt;&gt; BYTTOW: Sure. We're just going to check

00:52:57.710 --> 00:53:03.240
real quick I think one of the questions someone
asked was, when can Skype be used as a bot?

00:53:03.240 --> 00:53:08.010
You know, I don't think we're going to be
supporting in for like that any time soon.

00:53:08.010 --> 00:53:12.010
But we have talked about either, you know,
voice integration or whatever in Wave in general.

00:53:12.010 --> 00:53:21.440
But as far as the Skype bot goes, you know,
I mean I guess it could technically feasibly

00:53:21.440 --> 00:53:25.510
be built but, you know, I don't know if anyone's
working on that. I know there are voice chat

00:53:25.510 --> 00:53:39.860
applications that are in Wave today, though.
Our wave now trashed. So it seems like--just

00:53:39.860 --> 00:53:46.530
real quick--yeah, I guess one question I wanted
to jump up is what's the best way to have

00:53:46.530 --> 00:53:50.790
a robot interact with participants on a wave
replying using a gadget or so on. I just want

00:53:50.790 --> 00:53:55.210
to say it's up to you. You saw that, you know,
you can use gadgets to control the flow. I

00:53:55.210 --> 00:53:58.510
think that's one great way of doing things,
so.

00:53:58.510 --> 00:54:01.490
&gt;&gt; PRASETYA: Yes. That's it.
&gt;&gt; BYTTOW: Anyway guys.I'm sorry, yes sir.

00:54:01.490 --> 00:54:11.750
&gt;&gt; Is there an example, you may have or you
may have seen whether it's like an [INDISTINCT]

00:54:11.750 --> 00:54:14.400
type robot that can interact in--I'm interested
in like making a little customer service type

00:54:14.400 --> 00:54:16.630
application where somebody could visit website,
they could view that page, and they could

00:54:16.630 --> 00:54:23.010
sort interact in like a sort of human fashion
and then be handed off to a real human if

00:54:23.010 --> 00:54:28.010
the robot can't handle the situation.
&gt;&gt; BYTTOW: Totally, so...

00:54:28.010 --> 00:54:31.050
&gt;&gt; PRASETYA: Yes.
&gt;&gt; BYTTOW: We've always wanted to make our

00:54:31.050 --> 00:54:34.560
robots more conversational in that way, right?
To seem like you're actually communicating

00:54:34.560 --> 00:54:38.940
with something. You know, a lot of--the call
services do that. You can ask questions like,

00:54:38.940 --> 00:54:42.800
"Nope. Okay, no. Let's fall back to a real
human." I think that's true and also you can

00:54:42.800 --> 00:54:48.000
actually build web applications that, you
know, that's on your website where you're--you

00:54:48.000 --> 00:54:52.070
can, you know, be getting content back and
forth from Wave, alright, and actually have

00:54:52.070 --> 00:54:56.600
people maybe go into wave, you know, if you
have someone working on, you know, someone

00:54:56.600 --> 00:55:01.160
working at some company or something that
gets these waves that get questions feed it,

00:55:01.160 --> 00:55:04.650
fed into them, And they can reply and then
of course those replies will be pushed back

00:55:04.650 --> 00:55:08.550
out to your robot or to your service to kind
of close that loop, right? So you can use

00:55:08.550 --> 00:55:13.820
it for that kind of communication loop and--either
way, it could be a robot or human participant.

00:55:13.820 --> 00:55:18.150
I don't know if that answers your question
directly but you know we can talk a little

00:55:18.150 --> 00:55:22.100
bit more about that.
&gt;&gt; PRASETYA: Yeah, so basically inside your

00:55:22.100 --> 00:55:23.100
robot event handler, you can just do whatever
you want, including like making, you know,

00:55:23.100 --> 00:55:24.100
HTTP call to somewhere or sending emails or
basically, yeah, just integrating that to

00:55:24.100 --> 00:55:31.501
into your service.
&gt;&gt; BYTTOW: Yes, but what you're saying is

00:55:31.501 --> 00:55:33.569
something that you've always thought, would
be a great use in this case.

00:55:33.569 --> 00:55:38.830
&gt;&gt; PRASETYA: Yes.
&gt;&gt; BYTTOW: Nope. All right, well again, thanks

00:55:38.830 --> 00:55:42.680
guys. Yes sir, sorry.
&gt;&gt; Just a...

00:55:42.680 --> 00:55:50.160
&gt;&gt; BYTTOW: Really bad at looking [INDISTINCT].
&gt;&gt; Just a quick question, is there any plan

00:55:50.160 --> 00:55:57.670
for wizards for making robots in the Eclipse
plug in?

00:55:57.670 --> 00:56:03.120
&gt;&gt; BYTTOW: Yes, there's--if I understand your
question correctly, there is a robot, so like

00:56:03.120 --> 00:56:04.120
a tutorial, like a helper for building robots
you mean?

00:56:04.120 --> 00:56:05.120
&gt;&gt; I'm sorry could you--can you repeat.
&gt;&gt; BYTTOW: You said, you--like a wizard or

00:56:05.120 --> 00:56:08.420
helper for building robots?
&gt;&gt; Oh, yeah.

00:56:08.420 --> 00:56:16.460
&gt;&gt; BYTTOW: Yep, there's robot-robot.
&gt;&gt; PRASETYA: Yes, so robot-robot is a robot

00:56:16.460 --> 00:56:22.490
IDE inside wave. So but I think your question
was about if there--if we have any Eclipse

00:56:22.490 --> 00:56:26.220
plug in for robots API or not? Right?
&gt;&gt; Yeah.

00:56:26.220 --> 00:56:29.550
&gt;&gt; PRASETYA: So we currently don't have that.
But that's something--really something that

00:56:29.550 --> 00:56:31.740
we should keep in mind. I think--typically,
when I develop a new robot, I install the

00:56:31.740 --> 00:56:38.080
App Engine plug in for Eclipse and that's
very convenient for me. And I think we should

00:56:38.080 --> 00:56:48.230
definitely look into that too.
&gt;&gt; Yeah, that's what I use too. I was thinking

00:56:48.230 --> 00:56:56.820
of graphical wizards that would ask questions
to the user, to the coder then--and then generate

00:56:56.820 --> 00:57:03.490
a skeleton of robots.
&gt;&gt; BYTTOW: We actually had an intern on the

00:57:03.490 --> 00:57:10.930
team build a kind of a meta robot that adds
a gadget. And you can actually construct logic

00:57:10.930 --> 00:57:13.020
through a flowchart-like system.
&gt;&gt; Yeah.

00:57:13.020 --> 00:57:16.370
&gt;&gt; BYTTOW: And we haven't released that yet.
We've just kind of kept it internally so far.

00:57:16.370 --> 00:57:21.410
But it's great for building tutorial robots,
so. Tutorial being like Wave tutorial or whatever.

00:57:21.410 --> 00:57:25.780
So you would say like, you know, do this and
branch on this when the user like presses

00:57:25.780 --> 00:57:31.160
enter or replies and it kind of just, you
can build a simple conversational robot graphically,

00:57:31.160 --> 00:57:32.160
so.
&gt;&gt; Very nice.

00:57:32.160 --> 00:57:36.860
&gt;&gt; BYTTOW: Yep.
&gt;&gt; Is it possible to see a screen capture

00:57:36.860 --> 00:57:41.590
of it?
&gt;&gt; BYTTOW: Not yet, but I'm--now that, you

00:57:41.590 --> 00:57:42.590
know, that there's interest, I know we've
been planning to either push it out. We want

00:57:42.590 --> 00:57:47.600
to push out some example at least very soon.
So we'll probably publish the code and do

00:57:47.600 --> 00:57:49.970
that because it's really...
&gt;&gt; Thank you.

00:57:49.970 --> 00:57:59.010
&gt;&gt; BYTTOW: Sure. All right, thanks guys.
&gt;&gt; PRASETYA: Thanks guys for coming.

