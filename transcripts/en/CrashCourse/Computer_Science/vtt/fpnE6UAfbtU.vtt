WEBVTT
Kind: captions
Language: en

00:00:03.180 --> 00:00:05.780
Hi, I’m Carrie Anne and welcome to Crash
Course Computer Science.

00:00:05.790 --> 00:00:11.020
So last episode, using just logic gates, we
built a simple ALU, which performs arithmetic

00:00:11.030 --> 00:00:13.969
and logic operations, hence the ‘A’ and
the ‘L’.

00:00:13.969 --> 00:00:17.360
But of course, there’s not much point in
calculating a result only to throw it away

00:00:17.360 --> 00:00:22.640
- it would be useful to store that value somehow, and maybe even run several operations in a row.

00:00:22.740 --> 00:00:24.840
That's where computer memory comes in!

00:00:24.850 --> 00:00:28.640
If you've ever been in the middle of a long
RPG campaign on your console, or slogging

00:00:28.650 --> 00:00:32.940
through a difficult level on Minesweeper on
your desktop, and your dog came by, tripped

00:00:32.940 --> 00:00:36.980
and pulled the power cord out of the wall,
you know the agony of losing all your progress.

00:00:36.980 --> 00:00:38.200
Condolences.

00:00:38.200 --> 00:00:42.000
But the reason for your loss is that your
console, your laptop and your computers make

00:00:42.010 --> 00:00:46.540
use of Random Access Memory, or RAM, which
stores things like game state - as long as

00:00:46.540 --> 00:00:47.720
the power stays on.

00:00:47.720 --> 00:00:51.660
Another type of memory, called persistent
memory, can survive without power, and it’s

00:00:51.680 --> 00:00:55.659
used for different things; We'll talk about
the persistence of memory in a later episode.

00:00:55.660 --> 00:01:00.010
Today, we’re going to start small - literally by building a circuit that can store one..

00:01:00.010 --> 00:01:01.720
single.. bit of information.

00:01:01.720 --> 00:01:05.760
After that, we’ll scale up, and build our
very own memory module, and we’ll combine

00:01:05.760 --> 00:01:10.300
it with our ALU next time, when we finally
build our very own CPU!

00:01:10.300 --> 00:01:19.360
INTRO

00:01:19.370 --> 00:01:23.290
All of the logic circuits we've discussed
so far go in one direction - always flowing

00:01:23.290 --> 00:01:26.470
forward - like our 8-bit ripple adder from
last episode.

00:01:26.470 --> 00:01:29.660
But we can also create circuits that loop
back on themselves.

00:01:29.660 --> 00:01:34.190
Let’s try taking an ordinary OR gate, and
feed the output back into one of its inputs

00:01:34.190 --> 00:01:35.230
and see what happens.

00:01:35.230 --> 00:01:37.430
First, let’s set both inputs to 0.

00:01:37.430 --> 00:01:41.970
So 0 OR 0 is 0, and so this circuit always
outputs 0.

00:01:41.970 --> 00:01:44.010
If we were to flip input A to 1.

00:01:44.010 --> 00:01:48.410
1 OR 0 is 1, so now the output of the OR gate
is 1.

00:01:48.410 --> 00:01:52.950
A fraction of a second later, that loops back
around into input B, so the OR gate sees that

00:01:52.950 --> 00:01:54.670
both of its inputs are now 1.

00:01:54.670 --> 00:01:58.330
1 OR 1 is still 1, so there is no change in
output.

00:01:58.330 --> 00:02:01.990
If we flip input A back to 0, the OR gate
still outputs 1.

00:02:01.990 --> 00:02:04.610
So now we've got a circuit that records a
“1” for us.

00:02:04.610 --> 00:02:07.910
Except, we've got a teensy tiny problem - this
change is permanent!

00:02:07.910 --> 00:02:12.640
No matter how hard we try, there’s no way
to get this circuit to flip back from a 1

00:02:12.640 --> 00:02:13.640
to a 0.

00:02:13.640 --> 00:02:16.499
Now let’s look at this same circuit, but
with an AND gate instead.

00:02:16.499 --> 00:02:19.239
We'll start inputs A and B both at 1.

00:02:19.240 --> 00:02:21.370
1 AND 1 outputs 1 forever.

00:02:21.370 --> 00:02:26.240
But, if we then flip input A to 0, because
it’s an AND gate, the output will go to 0.

00:02:26.300 --> 00:02:29.820
So this circuit records a 0, the opposite
of our other circuit.

00:02:29.820 --> 00:02:34.920
Like before, no matter what input we apply
to input A afterwards, the circuit will always output 0.

00:02:34.980 --> 00:02:38.220
Now we’ve got circuits that can record both
0s and 1s.

00:02:38.230 --> 00:02:42.340
The key to making this a useful piece of memory
is to combine our two circuits into what is

00:02:42.340 --> 00:02:44.099
called the AND-OR Latch.

00:02:44.099 --> 00:02:48.480
It has two inputs, a "set" input, which sets
the output to a 1, and a "reset" input, which

00:02:48.480 --> 00:02:50.400
resets the output to a 0.

00:02:50.400 --> 00:02:54.960
If set and reset are both 0, the circuit just
outputs whatever was last put in it.

00:02:54.960 --> 00:02:58.200
In other words, it remembers a single bit
of information!

00:02:58.200 --> 00:02:59.440
Memory!

00:02:59.440 --> 00:03:03.740
This is called a “latch” because it “latches
onto” a particular value and stays that way.

00:03:03.780 --> 00:03:08.520
The action of putting data into memory is
called writing, whereas getting the data out

00:03:08.520 --> 00:03:09.519
is called reading.

00:03:09.519 --> 00:03:12.510
Ok, so we’ve got a way to store a single
bit of information!

00:03:12.510 --> 00:03:13.510
Great!

00:03:13.510 --> 00:03:18.310
Unfortunately, having two different wires
for input – set and reset – is a bit confusing.

00:03:18.310 --> 00:03:22.849
To make this a little easier to use, we really
want a single wire to input data, that we

00:03:22.849 --> 00:03:24.950
can set to either 0 or 1 to store the value.

00:03:24.950 --> 00:03:28.790
Additionally, we are going to need a wire
that enables the memory to be either available

00:03:28.790 --> 00:03:32.900
for writing or “locked” down --which is
called the write enable line.

00:03:32.900 --> 00:03:37.380
By adding a few extra logic gates, we can
build this circuit, which is called a Gated Latch

00:03:37.400 --> 00:03:39.120
since the “gate” can be opened or
closed.

00:03:39.129 --> 00:03:41.739
Now this circuit is starting to get a little
complicated.

00:03:41.739 --> 00:03:44.939
We don’t want to have to deal with all the
individual logic gates... so as before, we’re

00:03:44.939 --> 00:03:48.979
going to bump up a level of abstraction, and
put our whole Gated Latch circuit in a box

00:03:48.979 --> 00:03:50.849
-- a box that stores one bit.

00:03:50.849 --> 00:03:52.889
Let’s test out our new component!

00:03:52.889 --> 00:03:54.650
Let’s start everything at 0.

00:03:54.650 --> 00:04:00.480
If we toggle the Data wire from 0 to 1 or
1 to 0, nothing happens - the output stays at 0.

00:04:00.580 --> 00:04:04.200
That’s because the write enable wire is
off, which prevents any change to the memory.

00:04:04.209 --> 00:04:07.940
So we need to “open” the “gate” by
turning the write enable wire to 1.

00:04:07.950 --> 00:04:11.819
Now we can put a 1 on the data line to save
the value 1 to our latch.

00:04:11.819 --> 00:04:14.010
Notice how the output is now 1.

00:04:14.010 --> 00:04:14.820
Success!

00:04:14.820 --> 00:04:18.400
We can turn off the enable line and the output
stays as 1.

00:04:18.400 --> 00:04:21.959
Once again, we can toggle the value on the
data line all we want, but the output will

00:04:21.959 --> 00:04:22.959
stay the same.

00:04:22.959 --> 00:04:24.990
The value is saved in memory.

00:04:24.990 --> 00:04:29.650
Now let’s turn the enable line on again
use our data line to set the latch to 0.

00:04:29.650 --> 00:04:30.650
Done.

00:04:30.650 --> 00:04:32.910
Enable line off, and the output is 0.

00:04:32.910 --> 00:04:33.919
And it works!

00:04:33.919 --> 00:04:37.190
Now, of course, computer memory that only
stores one bit of information isn’t very

00:04:37.190 --> 00:04:39.780
useful -- definitely not enough to run Frogger.

00:04:39.780 --> 00:04:41.300
Or anything, really.

00:04:41.300 --> 00:04:43.480
But we’re not limited to using only one
latch.

00:04:43.480 --> 00:04:48.270
If we put 8 latches side-by-side, we can store
8 bits of information like an 8-bit number.

00:04:48.270 --> 00:04:53.400
A group of latches operating like this is
called a register, which holds a single number,

00:04:53.400 --> 00:04:56.060
and the number of bits in a register is called
its width.

00:04:56.060 --> 00:05:01.819
Early computers had 8-bit registers, then
16, 32, and today, many computers have registers

00:05:01.819 --> 00:05:03.419
that are 64-bits wide.

00:05:03.419 --> 00:05:06.750
To write to our register, we first have to
enable all of the latches.

00:05:06.750 --> 00:05:11.780
We can do this with a single wire that connects to all of their enable inputs, which we set to 1.

00:05:11.800 --> 00:05:17.320
We then send our data in using the 8 data
wires, and then set enable back to 0, and

00:05:17.320 --> 00:05:19.660
the 8 bit value is now saved in memory.

00:05:19.660 --> 00:05:23.420
Putting latches side-by-side works ok for
a small-ish number of bits.

00:05:23.430 --> 00:05:28.800
A 64-bit register would need 64 wires running
to the data pins, and 64 wires running to

00:05:28.800 --> 00:05:29.970
the outputs.

00:05:29.970 --> 00:05:36.500
Luckily we only need 1 wire to enable all
the latches, but that’s still 129 wires.

00:05:36.500 --> 00:05:40.660
For 256 bits, we end up with 513 wires!

00:05:40.660 --> 00:05:42.120
The solution is a matrix!

00:05:42.140 --> 00:05:46.140
In this matrix, we don’t arrange our latches
in a row, we put them in a grid.

00:05:46.160 --> 00:05:52.520
For 256 bits, we need a 16 by 16 grid of latches
with 16 rows and columns of wires.

00:05:52.520 --> 00:05:56.990
To activate any one latch, we must turn on
the corresponding row AND column wire.

00:05:56.990 --> 00:05:58.930
Let’s zoom in and see how this works.

00:05:58.930 --> 00:06:02.760
We only want the latch at the intersection
of the two active wires to be enabled,

00:06:02.780 --> 00:06:05.740
but all of the other latches should stay disabled.

00:06:05.780 --> 00:06:08.300
For this, we can use our trusty AND gate!

00:06:08.310 --> 00:06:12.710
The AND gate will output a 1 only if the row
and the column wires are both 1.

00:06:12.710 --> 00:06:15.720
So we can use this signal to uniquely select
a single latch.

00:06:15.720 --> 00:06:20.740
This row/column setup connects all our latches
with a single, shared, write enable wire.

00:06:20.760 --> 00:06:24.720
In order for a latch to become write enabled,
the row wire, the column wire, and the write

00:06:24.720 --> 00:06:26.360
enable wire must all be 1.

00:06:26.360 --> 00:06:29.860
That should only ever be true for one single
latch at any given time.

00:06:29.860 --> 00:06:32.830
This means we can use a single, shared wire
for data.

00:06:32.830 --> 00:06:37.160
Because only one latch will ever be write
enabled, only one will ever save the data

00:06:37.180 --> 00:06:40.540
-- the rest of the latches will simply ignore
values on the data wire because they are not

00:06:40.550 --> 00:06:41.830
write enabled.

00:06:41.830 --> 00:06:46.650
We can use the same trick with a read enable
wire to read the data later, to get the data

00:06:46.650 --> 00:06:48.669
out of one specific latch.

00:06:48.669 --> 00:06:55.001
This means in total, for 256 bits of memory,
we only need 35 wires - 1 data wire, 1 write

00:06:55.001 --> 00:06:59.940
enable wire, 1 read enable wire, and 16 rows
and columns for the selection.

00:06:59.940 --> 00:07:01.750
That’s significant wire savings!

00:07:01.750 --> 00:07:05.139
But we need a way to uniquely specify each
intersection.

00:07:05.139 --> 00:07:08.419
We can think of this like a city, where you
might want to meet someone at 12th avenue

00:07:08.419 --> 00:07:11.530
and 8th street -- that's an address that defines
an intersection.

00:07:11.530 --> 00:07:15.960
The latch we just saved our one bit into has
an address of row 12 and column 8.

00:07:15.960 --> 00:07:20.880
Since there is a maximum of 16 rows, we store the row address in a 4 bit number.

00:07:20.880 --> 00:07:23.740
12 is 1100 in binary.

00:07:23.740 --> 00:07:28.680
We can do the same for the column address: 8 is 1000 in binary.

00:07:28.680 --> 00:07:35.159
So the address for the particular latch we
just used can be written as 11001000.

00:07:35.159 --> 00:07:39.030
To convert from an address into something
that selects the right row or column, we need

00:07:39.030 --> 00:07:43.250
a special component called a multiplexer -- which
is the computer component with a pretty cool

00:07:43.250 --> 00:07:45.360
name at least compared to the ALU.

00:07:45.360 --> 00:07:50.060
Multiplexers come in all different sizes,
but because we have 16 rows, we need a 1 to

00:07:50.069 --> 00:07:51.060
16 multiplexer.

00:07:51.069 --> 00:07:52.099
It works like this.

00:07:52.099 --> 00:07:56.680
You feed it a 4 bit number, and it connects
the input line to a corresponding output line.

00:07:56.680 --> 00:08:02.069
So if we pass in 0000, it will select the
very first column for us.

00:08:02.069 --> 00:08:06.249
If we pass in 0001, the next column is selected,
and so on.

00:08:06.249 --> 00:08:10.689
We need one multiplexer to handle our rows
and another multiplexer to handle the columns.

00:08:10.689 --> 00:08:16.640
Ok, it’s starting to get complicated again,
so let’s make our 256-bit memory its own component.

00:08:16.800 --> 00:08:24.960
Once again a new level of abstraction!

00:08:24.980 --> 00:08:29.700
It takes an 8-bit address for input - the
4 bits for the column and 4 for the row.

00:08:29.700 --> 00:08:32.220
We also need write and read enable wires.

00:08:32.220 --> 00:08:37.080
And finally, we need just one data wire, which
can be used to read or write data.

00:08:37.080 --> 00:08:42.080
Unfortunately, even 256-bits of memory isn’t
enough to run much of anything, so we need

00:08:42.089 --> 00:08:43.520
to scale up even more!

00:08:43.530 --> 00:08:45.730
We’re going to put them in a row.

00:08:45.730 --> 00:08:46.820
Just like with the registers.

00:08:46.820 --> 00:08:51.709
We’ll make a row of 8 of them, so we can
store an 8 bit number - also known as a byte.

00:08:51.709 --> 00:08:57.210
To do this, we feed the exact same address
into all 8 of our 256-bit memory components

00:08:57.210 --> 00:09:01.240
at the same time, and each one saves one bit
of the number.

00:09:01.240 --> 00:09:07.880
That means the component we just made can
store 256 bytes at 256 different addresses.

00:09:07.900 --> 00:09:11.620
Again, to keep things simple, we want to leave
behind this inner complexity.

00:09:11.620 --> 00:09:15.720
Instead of thinking of this as a series of
individual memory modules and circuits, we’ll

00:09:15.720 --> 00:09:18.470
think of it as a uniform bank of addressable
memory.

00:09:18.470 --> 00:09:23.540
We have 256 addresses, and at each address,
we can read or write an 8-bit value.

00:09:23.540 --> 00:09:28.110
We’re going to use this memory component
next episode when we build our CPU.

00:09:28.110 --> 00:09:32.269
The way that modern computers scale to megabytes
and gigabytes of memory is by doing the same

00:09:32.269 --> 00:09:36.430
thing we’ve been doing here -- keep packaging
up little bundles of memory into larger, and

00:09:36.430 --> 00:09:37.790
larger, and larger arrangements.

00:09:37.790 --> 00:09:42.260
As the number of memory locations grow, our
addresses have to grow as well.

00:09:42.260 --> 00:09:48.680
8 bits hold enough numbers to provide addresses for 256 bytes of our memory, but that’s all.

00:09:48.680 --> 00:09:53.900
To address a gigabyte – or a billion bytes
of memory – we need 32-bit addresses.

00:09:53.900 --> 00:09:58.060
An important property of this memory is that
we can access any memory location, at any

00:09:58.070 --> 00:09:59.889
time, and in a random order.

00:09:59.889 --> 00:10:03.440
For this reason, it’s called Random-Access
Memory or RAM.

00:10:03.440 --> 00:10:07.540
When you hear people talking about how much RAM a computer has - that's the computer’s memory.

00:10:07.640 --> 00:10:11.540
RAM is like a human’s short term or working
memory, where you keep track of things going

00:10:11.540 --> 00:10:14.750
on right now - like whether or not you had
lunch or paid your phone bill.

00:10:14.750 --> 00:10:18.589
Here’s an actual stick of RAM - with 8 memory
modules soldered onto the board.

00:10:18.589 --> 00:10:22.070
If we carefully opened up one of these modules
and zoomed in, The first thing you would see

00:10:22.070 --> 00:10:23.480
are 32 squares of memory.

00:10:23.480 --> 00:10:28.050
Zoom into one of those squares, and we can
see each one is comprised of 4 smaller blocks.

00:10:28.050 --> 00:10:31.450
If we zoom in again, we get down to the matrix
of individual bits.

00:10:31.450 --> 00:10:34.760
This is a matrix of 128 by 64 bits.

00:10:34.760 --> 00:10:37.820
That’s 8192 bits in total.

00:10:37.829 --> 00:10:43.920
Each of our 32 squares has 4 matrices, so
that’s 32 thousand, 7 hundred and 68 bits.

00:10:43.930 --> 00:10:45.480
And there are 32 squares in total.

00:10:45.480 --> 00:10:49.860
So all in all, that’s roughly 1 million
bits of memory in each chip.

00:10:49.860 --> 00:10:54.839
Our RAM stick has 8 of these chips, so in
total, this RAM can store 8 millions bits,

00:10:54.840 --> 00:10:56.700
otherwise known as 1 megabyte.

00:10:56.700 --> 00:11:00.640
That’s not a lot of memory these days -- this
is a RAM module from the 1980’s.

00:11:00.650 --> 00:11:05.670
Today you can buy RAM that has a gigabyte
or more of memory - that’s billions of bytes

00:11:05.670 --> 00:11:06.300
of memory.

00:11:06.400 --> 00:11:11.000
So, today, we built a piece of SRAM - Static
Random-Access Memory – which uses latches.

00:11:11.020 --> 00:11:15.040
There are other types of RAM, such as DRAM, Flash memory, and NVRAM.

00:11:15.040 --> 00:11:19.339
These are very similar in function to SRAM,
but use different circuits to store the individual

00:11:19.340 --> 00:11:24.100
bits -- for example, using different logic
gates, capacitors, charge traps, or memristors.

00:11:24.100 --> 00:11:28.980
But fundamentally, all of these technologies
store bits of information in massively nested

00:11:28.990 --> 00:11:31.000
matrices of memory cells.

00:11:31.019 --> 00:11:35.660
Like many things in computing, the fundamental
operation is relatively simple.. it’s the

00:11:35.660 --> 00:11:40.171
layers and layers of abstraction that’s
mind blowing -- like a russian doll that

00:11:40.180 --> 00:11:42.900
keeps getting smaller and smaller and smaller.

00:11:42.900 --> 00:11:44.720
I’ll see you next week.

00:11:44.720 --> 00:12:06.480
Credits

