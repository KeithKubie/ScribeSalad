WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.400
[MUSIC PLAYING]

00:00:05.537 --> 00:00:07.245
ADNAN BEGOVIC: For
those that don't know,

00:00:07.245 --> 00:00:10.020
here is a brief little
Wikipedia entry.

00:00:10.020 --> 00:00:12.350
We're essentially a
derivative operating system

00:00:12.350 --> 00:00:13.680
based off Android.

00:00:13.680 --> 00:00:17.980
We add other features, but we're
mostly free and open source,

00:00:17.980 --> 00:00:23.000
and we score 160 plus devices,
verses Nexus AOSP program,

00:00:23.000 --> 00:00:25.300
which is about five devices.

00:00:25.300 --> 00:00:27.180
Our contributor base
is massive, as you can

00:00:27.180 --> 00:00:29.040
see this Cid head over here.

00:00:29.040 --> 00:00:31.990
Every single line in there
is a name of contributor

00:00:31.990 --> 00:00:35.500
over the past five years.

00:00:35.500 --> 00:00:38.540
In total we have about
1,253 contributors,

00:00:38.540 --> 00:00:42.020
that's as of August, with
about 47,000 commits.

00:00:42.020 --> 00:00:47.949
That's not [INAUDIBLE], so
it's quite a large delta.

00:00:47.949 --> 00:00:49.990
But essentially what we
do is crowdsource Android

00:00:49.990 --> 00:00:51.220
development.

00:00:51.220 --> 00:00:54.182
We get community changes
that are incoming.

00:00:54.182 --> 00:00:56.015
We roll them into our
nightly release builds

00:00:56.015 --> 00:00:59.030
and those actually ship on
devices every single night.

00:01:01.720 --> 00:01:03.670
Today, however, we're
going to be talking

00:01:03.670 --> 00:01:06.540
about how this delta
grew a little too large

00:01:06.540 --> 00:01:09.510
and became a little
bit unmanageable.

00:01:09.510 --> 00:01:12.010
First we're going to be talking
about our TreeHacks Hackaton

00:01:12.010 --> 00:01:12.990
learnings.

00:01:12.990 --> 00:01:14.599
We went to Stanford hackathon.

00:01:14.599 --> 00:01:17.140
We learned a lot of things that
we were a little bit ignorant

00:01:17.140 --> 00:01:18.950
about.

00:01:18.950 --> 00:01:20.910
We realize that OS and
firmware development

00:01:20.910 --> 00:01:23.550
is really intimidating.

00:01:23.550 --> 00:01:25.400
There's a lot of
work, few awards

00:01:25.400 --> 00:01:28.272
and essentially we came
up with a solution that

00:01:28.272 --> 00:01:29.480
could help us get through it.

00:01:45.679 --> 00:01:47.470
ROMAN BIRG: So TreeHacks
was a weekend long

00:01:47.470 --> 00:01:50.930
hackaton back in February
and that was at Stanford.

00:01:50.930 --> 00:01:54.010
So there was like 670
kids who attended.

00:01:54.010 --> 00:01:56.380
And you could imagine there
were some smart guys there.

00:01:56.380 --> 00:02:01.150
There's applications from
all over the United States.

00:02:01.150 --> 00:02:06.600
So we had two guys submit an
entry using the CyanogenMod

00:02:06.600 --> 00:02:11.670
platform, and we went there,
and that's what we tried to do.

00:02:11.670 --> 00:02:14.600
We wanted to get
people to hack on it.

00:02:14.600 --> 00:02:17.050
And so we had two entries.

00:02:17.050 --> 00:02:19.370
Here is the winner,
CyanTranslate.

00:02:19.370 --> 00:02:23.940
And these guys built--
they went from synching

00:02:23.940 --> 00:02:26.410
the source, to building it,
to adding a whole new feature

00:02:26.410 --> 00:02:27.130
in three days.

00:02:27.130 --> 00:02:31.540
And we learned that
that's a lot to do

00:02:31.540 --> 00:02:36.970
and a lot to absorb in just
a short amount of time.

00:02:36.970 --> 00:02:39.460
So these guys had
basically just one day

00:02:39.460 --> 00:02:41.600
they spent trying
to get the source.

00:02:41.600 --> 00:02:44.370
We bought some hard drives
to make it go by faster,

00:02:44.370 --> 00:02:49.440
but CyanogenMod source
is 25 gigabytes.

00:02:49.440 --> 00:02:50.650
It's going to take some time.

00:02:50.650 --> 00:02:53.119
And then they spent the next
day getting familiar with it,

00:02:53.119 --> 00:02:54.910
with the build system,
trying to figure out

00:02:54.910 --> 00:02:56.400
the different quirks.

00:02:56.400 --> 00:03:00.294
And they didn't have that
much time left to code.

00:03:00.294 --> 00:03:01.710
They didn't need
it, to be honest.

00:03:01.710 --> 00:03:04.990
And that said something to us.

00:03:04.990 --> 00:03:07.810
So overall we had a great
time helping the kids,

00:03:07.810 --> 00:03:09.120
getting it set up.

00:03:09.120 --> 00:03:12.520
But we noticed that
most the time we

00:03:12.520 --> 00:03:15.542
weren't helping them with
very Android specific things

00:03:15.542 --> 00:03:16.500
that we were there for.

00:03:16.500 --> 00:03:18.520
We helped get them set
up with the build system

00:03:18.520 --> 00:03:22.670
and just weird little
quirks and things like that.

00:03:22.670 --> 00:03:25.125
So this is their project.

00:03:25.125 --> 00:03:26.190
I hope it pays.

00:03:33.480 --> 00:03:36.030
So what these guys
did was they came up

00:03:36.030 --> 00:03:38.130
with an on-the-fly translator.

00:03:38.130 --> 00:03:43.010
They hooked into CyanogenMod,
and they hooked it up

00:03:43.010 --> 00:03:44.630
to Google Translate.

00:03:44.630 --> 00:03:47.965
And so it works
from the MMS app,

00:03:47.965 --> 00:03:49.340
and they're going
to show you how

00:03:49.340 --> 00:03:51.060
it works from the web browser.

00:03:51.060 --> 00:03:53.360
And they do this in
the span of one day.

00:04:01.550 --> 00:04:08.090
So we got a lot of feedback from
these guys, and it was great.

00:04:08.090 --> 00:04:09.730
They love the open platform.

00:04:09.730 --> 00:04:13.070
They love that they could just
go and contribute to our Gerrit

00:04:13.070 --> 00:04:16.100
and see all of the submissions,
and everything's on GitHub.

00:04:16.100 --> 00:04:17.040
They can go see.

00:04:17.040 --> 00:04:19.140
They can go look at the code.

00:04:19.140 --> 00:04:23.230
We even have some documentation
that helped them get started.

00:04:23.230 --> 00:04:25.510
But it wasn't enough.

00:04:25.510 --> 00:04:27.840
But some of the
downsides that we saw

00:04:27.840 --> 00:04:33.107
was that it took them way
too long to get started,

00:04:33.107 --> 00:04:34.690
and that's something
we took to heart.

00:04:34.690 --> 00:04:36.630
We want to fix this.

00:04:36.630 --> 00:04:39.860
It's a huge codebase
that's 25 gigs of source,

00:04:39.860 --> 00:04:41.820
then you have another
50 when you're building,

00:04:41.820 --> 00:04:45.640
and then there's
100 plus packages

00:04:45.640 --> 00:04:50.540
that you just have to look
at, and it's a ton of code.

00:04:50.540 --> 00:04:54.680
And the thing is
the barrier of entry

00:04:54.680 --> 00:04:57.330
doesn't have to be that high.

00:04:57.330 --> 00:04:59.650
And we really tried.

00:04:59.650 --> 00:05:01.919
We took this feedback
heart, and we went

00:05:01.919 --> 00:05:04.460
and we asked ourselv-- we came
up with these questions on how

00:05:04.460 --> 00:05:05.950
do we improve this experience.

00:05:05.950 --> 00:05:08.040
We wanted to decrease
the barrier to entry

00:05:08.040 --> 00:05:10.840
to allow these kids
to not have to have

00:05:10.840 --> 00:05:13.520
all this tribal knowledge
of how the platform works

00:05:13.520 --> 00:05:15.650
to submit a feature.

00:05:15.650 --> 00:05:18.270
We wanted to help
streamline the process

00:05:18.270 --> 00:05:21.260
and formalize it on how
people contribute to us.

00:05:21.260 --> 00:05:24.510
And also we wanted to stabilize
our own interfaces inside.

00:05:24.510 --> 00:05:27.450
Like, if we wanted to use
our own features we could,

00:05:27.450 --> 00:05:30.900
but what if the
versioning is changed?

00:05:30.900 --> 00:05:33.370
And what if we change something
on the device we shipped,

00:05:33.370 --> 00:05:34.290
and our code didn't--.

00:05:34.290 --> 00:05:38.210
We didn't have these things
figured out quite properly.

00:05:38.210 --> 00:05:40.370
So this is the moral of story.

00:05:40.370 --> 00:05:43.584
OS development is intimidating.

00:05:43.584 --> 00:05:45.750
If you've ever managed to
include a fully functioned

00:05:45.750 --> 00:05:47.624
interface, you'd be one
of the few people who

00:05:47.624 --> 00:05:52.650
understood the process from
a full stack perspective.

00:05:52.650 --> 00:05:55.920
And that's a hard thing to do.

00:05:55.920 --> 00:05:59.730
So one of these biggest
features in CyanogenMod

00:05:59.730 --> 00:06:03.260
was the Profiles contribution.

00:06:03.260 --> 00:06:06.820
So Profiles was added
by Martin Long in 2014.

00:06:06.820 --> 00:06:10.420
And Profiles-- you
could essentially

00:06:10.420 --> 00:06:12.720
register for specific
events in the system,

00:06:12.720 --> 00:06:16.430
and then you could configure
your device to react to them.

00:06:16.430 --> 00:06:20.990
So, for example,
here's an example

00:06:20.990 --> 00:06:24.740
of a user creating an action
to be triggered by an event.

00:06:24.740 --> 00:06:30.570
So specifically the event being
a Wi-Fi SSID connect event.

00:06:30.570 --> 00:06:32.250
So from the Settings
app, the user

00:06:32.250 --> 00:06:36.930
is setting up on the Wi-Fi
connect of their choice.

00:06:36.930 --> 00:06:39.900
When the SSID connects, they
hit the Profile Service.

00:06:39.900 --> 00:06:41.840
The Profile Service
tells the system,

00:06:41.840 --> 00:06:44.390
hey, when this
Wi-Fi SSID connects,

00:06:44.390 --> 00:06:46.310
send it back to
the profile system,

00:06:46.310 --> 00:06:48.790
and the profile will
trigger the actions back

00:06:48.790 --> 00:06:52.050
that user has selected.

00:06:52.050 --> 00:06:55.480
So could my app have
used this Profile System?

00:06:55.480 --> 00:06:58.850
No, not without weird
crappy Java reflection,

00:06:58.850 --> 00:07:02.040
which we try to
avoid as much we can.

00:07:02.040 --> 00:07:03.760
For the Android
compatibility documents,

00:07:03.760 --> 00:07:06.510
they say that any public method
in Android namespace that

00:07:06.510 --> 00:07:10.840
is not part of the
Android-- public API

00:07:10.840 --> 00:07:13.040
must be marked the
@hide annotation.

00:07:16.580 --> 00:07:19.490
ADNAN BEGOVIC: So the dreaded
@hide-- @hide essentially

00:07:19.490 --> 00:07:24.530
is just Javadoc annotation,
specific to Android build 10.

00:07:24.530 --> 00:07:26.800
the way it works
is any methods you

00:07:26.800 --> 00:07:29.590
don't want the public
API you annotate

00:07:29.590 --> 00:07:31.600
them with @hide and
then during compile

00:07:31.600 --> 00:07:35.210
do they get stripped
from the API stubs.

00:07:35.210 --> 00:07:37.010
It gets stripped
from the Javadocs,

00:07:37.010 --> 00:07:39.450
and essentially it's only
accessible via reflection

00:07:39.450 --> 00:07:41.810
during runtime, if you're
creating interfaces that way,

00:07:41.810 --> 00:07:45.420
which is bad practice,
I guess, for us.

00:07:45.420 --> 00:07:48.590
What implications that had for
us, something like Profiles.

00:07:48.590 --> 00:07:50.320
If we wanted to
extend that to, let's

00:07:50.320 --> 00:07:52.760
say, applications we were
working in separate teams

00:07:52.760 --> 00:07:54.670
or with someone externally.

00:07:54.670 --> 00:07:57.290
We couldn't actually
do that because there'd

00:07:57.290 --> 00:07:58.370
be no stable interfaces.

00:07:58.370 --> 00:08:01.560
I couldn't tell you that,
hey, you make this API call,

00:08:01.560 --> 00:08:03.720
you'll get this result
back, because we

00:08:03.720 --> 00:08:06.130
didn't have any explicit
versioning at that time.

00:08:06.130 --> 00:08:09.580
We also made QA a really
horrible experience

00:08:09.580 --> 00:08:11.580
because we couldn't set
any testing expectations

00:08:11.580 --> 00:08:13.380
based on versioning releases.

00:08:13.380 --> 00:08:16.060
And then, honestly, just
horrible rebase conflicts.

00:08:16.060 --> 00:08:18.060
Every single time a
new version of Android

00:08:18.060 --> 00:08:21.460
came out we'd have to
go and replay all the

00:08:21.460 --> 00:08:23.980
commits that created the
service and everything that

00:08:23.980 --> 00:08:25.320
came on top of it.

00:08:25.320 --> 00:08:28.170
Just became way too much .

00:08:28.170 --> 00:08:31.140
So with that we kind
of sat down and said,

00:08:31.140 --> 00:08:32.640
how do we get around this.

00:08:32.640 --> 00:08:36.179
So we came out the
CyanogenMod platform.

00:08:36.179 --> 00:08:38.400
So it's a new, more
approachable infrastructure.

00:08:38.400 --> 00:08:41.159
And the way it works is
we duplicate the Android

00:08:41.159 --> 00:08:43.409
framework.

00:08:43.409 --> 00:08:46.640
So we essentially have three
components here-- the platform

00:08:46.640 --> 00:08:48.930
library, a secondary
resource package,

00:08:48.930 --> 00:08:52.760
and then a statically
linkable SDK.

00:08:52.760 --> 00:08:57.060
The platform library essentially
hosts all the system services

00:08:57.060 --> 00:09:00.455
that we get spun up by the
system server, within Android.

00:09:00.455 --> 00:09:02.580
So pretty much anything
that does state management,

00:09:02.580 --> 00:09:04.760
like the Profile
Service, or anything

00:09:04.760 --> 00:09:08.170
that we need to rely on being
there and interacting with,

00:09:08.170 --> 00:09:10.880
is hosted and lives here.

00:09:10.880 --> 00:09:13.290
We're just leveraging Android's
powerful IPC framework

00:09:13.290 --> 00:09:14.595
for that.

00:09:14.595 --> 00:09:16.720
Secondary to that, we also
have a resource package.

00:09:16.720 --> 00:09:20.280
So if ever we want to just
even have a system where we're

00:09:20.280 --> 00:09:22.990
going to reuse
across applications,

00:09:22.990 --> 00:09:24.720
we now have a very
specific identifier

00:09:24.720 --> 00:09:27.730
we can query those resources
with, or drawables,

00:09:27.730 --> 00:09:29.480
or anything in between.

00:09:29.480 --> 00:09:31.410
We'd also declare
our own permissions

00:09:31.410 --> 00:09:35.510
that we carry on forward
without platform releases.

00:09:35.510 --> 00:09:38.480
But the biggest point
here is the platform SDK.

00:09:38.480 --> 00:09:40.720
So this essentially
a jar you can just

00:09:40.720 --> 00:09:42.430
toss into your project.

00:09:42.430 --> 00:09:44.780
These are the stable
interfaces that

00:09:44.780 --> 00:09:47.027
can invoke the
system binder calls,

00:09:47.027 --> 00:09:49.110
and you'll actually have
access to these features.

00:09:49.110 --> 00:09:53.410
And this actually goes on
a rolling release schedule.

00:09:53.410 --> 00:09:55.800
So we take this new platform
and we go back to back

00:09:55.800 --> 00:09:56.550
to the hackathons.

00:09:56.550 --> 00:09:59.380
Recently, we actually
did another event

00:09:59.380 --> 00:10:01.750
that's done by IDEAA,
it's called Code Rush.

00:10:01.750 --> 00:10:03.890
And then we went down to
Mountain View for Hack

00:10:03.890 --> 00:10:07.380
the Planet, which--
really smart kids there.

00:10:07.380 --> 00:10:10.730
Came up with a lot
of cool projects.

00:10:10.730 --> 00:10:13.030
And our feedback was a
lot different this time.

00:10:13.030 --> 00:10:14.020
It's consumable.

00:10:14.020 --> 00:10:17.420
And ease of use
gets tossed around.

00:10:17.420 --> 00:10:20.020
Our bottlenecks ended
up just being logistics.

00:10:20.020 --> 00:10:21.860
So we didn't enough
CM devices there

00:10:21.860 --> 00:10:23.410
we didn't have
emulator images, which

00:10:23.410 --> 00:10:26.290
we're working on currently.

00:10:26.290 --> 00:10:29.860
But one such contribution we
had from one of the interfaces

00:10:29.860 --> 00:10:34.360
we added is we allowed the
user-- or the developer

00:10:34.360 --> 00:10:36.770
now-- to create tiles
programmatically.

00:10:36.770 --> 00:10:41.620
And one team who is creating
a QR code application--

00:10:41.620 --> 00:10:43.866
essentially a bitcoin
wallet-- they said,

00:10:43.866 --> 00:10:46.115
it would be great if I didn't
have to go access my app

00:10:46.115 --> 00:10:47.930
and go to all of
my account settings

00:10:47.930 --> 00:10:49.510
and go find this QR code.

00:10:49.510 --> 00:10:51.894
So essentially they just
publish their QR code

00:10:51.894 --> 00:10:54.060
to the Quick Settings panel,
go in the expanded mode

00:10:54.060 --> 00:10:55.760
and anyone could scan it.

00:10:55.760 --> 00:10:59.865
So it's things like this
so we can allow now.

00:10:59.865 --> 00:11:02.005
Roman's going to cover
how to actually utilize

00:11:02.005 --> 00:11:04.420
the SDK in your app.

00:11:04.420 --> 00:11:07.490
ROMAN BIRG: So utilizing
it is actually--

00:11:07.490 --> 00:11:10.330
I had a good
experience trying it

00:11:10.330 --> 00:11:12.250
the first time after
everything was in place.

00:11:12.250 --> 00:11:14.580
It was just as easy
as I had hoped.

00:11:14.580 --> 00:11:18.552
So all you do is fire up Android
Studio, start up a new project,

00:11:18.552 --> 00:11:19.510
and you're ready to go.

00:11:24.220 --> 00:11:28.010
So we have our version 2.0,
which is our stable release

00:11:28.010 --> 00:11:29.182
right now, the SDK.

00:11:29.182 --> 00:11:31.390
And to compile against that
version you would include

00:11:31.390 --> 00:11:33.520
the compile
'org.cyanogenmod:platform', you

00:11:33.520 --> 00:11:35.390
hit version 2.0.

00:11:35.390 --> 00:11:36.740
We are on a rolling release.

00:11:36.740 --> 00:11:38.560
The next version
will be 3, so if you

00:11:38.560 --> 00:11:41.660
want to work against our
development branches,

00:11:41.660 --> 00:11:46.660
you can set that up
in your bulid.gradel,

00:11:46.660 --> 00:11:48.514
and now you can use the SDK.

00:11:48.514 --> 00:11:50.930
All you have is define the
dependency in your build.gradle

00:11:50.930 --> 00:11:54.270
and Maven will pull
it down, sync it,

00:11:54.270 --> 00:11:56.576
and you can hit our SDKs.

00:11:56.576 --> 00:11:58.450
So I'm going to jump
right into the code here

00:11:58.450 --> 00:12:01.560
of how to add a custom tile.

00:12:01.560 --> 00:12:03.850
So this works very
similarly to how

00:12:03.850 --> 00:12:06.070
you would post a notification.

00:12:06.070 --> 00:12:08.750
So when you when you click
on a notification and intent

00:12:08.750 --> 00:12:11.300
gets fired, the
first thing we do

00:12:11.300 --> 00:12:13.560
is we need a pending
intent to wrap it.

00:12:13.560 --> 00:12:16.070
And you can see I'm
creating a new intent there

00:12:16.070 --> 00:12:20.020
with a custom action that
I'll be listening for later on

00:12:20.020 --> 00:12:21.940
and I can respond to.

00:12:21.940 --> 00:12:25.640
Then I use the custom tile
builder to create the tile.

00:12:25.640 --> 00:12:27.950
I give it the label, the icon.

00:12:27.950 --> 00:12:30.520
I tell it I want it to
collapse after I click it

00:12:30.520 --> 00:12:32.740
for my specific use case.

00:12:32.740 --> 00:12:35.510
And then the last
thing is I can just

00:12:35.510 --> 00:12:39.340
tell the CMStatusBarManager
to go, hey publish this tile.

00:12:39.340 --> 00:12:42.290
I give it a unique
identifier within my app

00:12:42.290 --> 00:12:45.130
and it will show up.

00:12:45.130 --> 00:12:48.300
On the other end, responding
to the click of the tile,

00:12:48.300 --> 00:12:51.500
you define that listener
in the AndroidManifest

00:12:51.500 --> 00:12:54.340
that listens to the action
which I defined in the intent

00:12:54.340 --> 00:12:56.000
in the previous slide.

00:12:56.000 --> 00:12:58.850
And then in the
code all it's doing

00:12:58.850 --> 00:13:00.596
is it just removes itself.

00:13:00.596 --> 00:13:02.220
You can come up with
whatever you want.

00:13:02.220 --> 00:13:03.170
Use your imagination.

00:13:03.170 --> 00:13:05.280
There's so many
things you can do.

00:13:05.280 --> 00:13:09.300
Now I want to bring this
back to the profiles.

00:13:09.300 --> 00:13:12.500
So CyanogenMod chips with
three profiles by default.

00:13:12.500 --> 00:13:14.620
There's an automobile
one, a default one,

00:13:14.620 --> 00:13:16.060
and the silent profile.

00:13:16.060 --> 00:13:18.920
I usually set my car up
to automatically switch

00:13:18.920 --> 00:13:21.730
to the automobile one when it
hooks up to my car Bluetooth.

00:13:21.730 --> 00:13:24.090
But I wanted it to
do something more.

00:13:24.090 --> 00:13:27.549
Like sometimes in the
car I want an icon

00:13:27.549 --> 00:13:30.090
to show up so I don't have to
go digging through all my apps.

00:13:30.090 --> 00:13:32.630
Like maybe I want to open
Google Maps or something.

00:13:32.630 --> 00:13:39.660
So to do that you can listen
for profile state changes,

00:13:39.660 --> 00:13:44.670
and you get sent this
intent which is in our SDK.

00:13:44.670 --> 00:13:47.830
You listen for the profile
selected intent and then

00:13:47.830 --> 00:13:50.370
when I receive that I know
the profile has changed

00:13:50.370 --> 00:13:52.990
I'm going to act upon it.

00:13:52.990 --> 00:13:55.200
In the code you'll
notice how similar this

00:13:55.200 --> 00:13:57.550
looks to the other
side and I wanted

00:13:57.550 --> 00:13:58.810
it to be just that simple.

00:14:03.920 --> 00:14:06.680
All we do is we check if
the car profile is active.

00:14:06.680 --> 00:14:11.550
If it is then publish my
car custom shortcut tile.

00:14:11.550 --> 00:14:13.340
If it's not then
it gets removed.

00:14:16.160 --> 00:14:17.425
It's just as simple as that.

00:14:21.640 --> 00:14:23.140
ADNAN BEGOVIC: Going
back to how did

00:14:23.140 --> 00:14:25.100
we deal with creating
a versioning system.

00:14:25.100 --> 00:14:27.800
So we kind of decided to
mirror the entire build class

00:14:27.800 --> 00:14:28.580
from Android.

00:14:28.580 --> 00:14:31.330
If you're familiar checking
API levels programmatically,

00:14:31.330 --> 00:14:32.910
this is one to one from that.

00:14:32.910 --> 00:14:35.830
Essentially what we're querying
is an SDK integer that's

00:14:35.830 --> 00:14:37.830
exported as a system
properties from the file

00:14:37.830 --> 00:14:39.930
system in your
current environment

00:14:39.930 --> 00:14:41.490
or whatever device
you're running on.

00:14:41.490 --> 00:14:44.240
And you can create against
a hard coded API level

00:14:44.240 --> 00:14:46.200
to see feature's available.

00:14:46.200 --> 00:14:48.240
So this way we can
actually check like hey,

00:14:48.240 --> 00:14:50.360
are we running on a
CyanogenMod device at all.

00:14:50.360 --> 00:14:52.590
And if we're running
on a CyanogenMod device

00:14:52.590 --> 00:14:54.190
there's an API
level that's greater

00:14:54.190 --> 00:14:56.772
than when this was introduced,
and that essentially

00:14:56.772 --> 00:14:58.730
allows us to interact
with the Profile Service.

00:15:01.494 --> 00:15:04.035
Currently we're on API level
two as our stable release, which

00:15:04.035 --> 00:15:05.312
is called Boysenberry.

00:15:05.312 --> 00:15:07.520
We have a lot of features
actually included in there,

00:15:07.520 --> 00:15:10.510
and we continuously
add a lot more.

00:15:10.510 --> 00:15:13.830
Every single quarter we will
publish documentation on this,

00:15:13.830 --> 00:15:20.010
and currently we also host
full Java docs on GitHub.

00:15:20.010 --> 00:15:22.150
Contributing is still
very much similar

00:15:22.150 --> 00:15:24.550
to how it's always
been to CyanogenMod,

00:15:24.550 --> 00:15:26.050
and it's very core
and fundamental

00:15:26.050 --> 00:15:27.950
to how our AOSP has worked.

00:15:27.950 --> 00:15:30.850
You essentially repo
init the main manifest.

00:15:30.850 --> 00:15:33.020
You pull it down,
repo synch it, and you

00:15:33.020 --> 00:15:34.830
start your local changes.

00:15:34.830 --> 00:15:37.110
You can contribute
it back to us,

00:15:37.110 --> 00:15:40.350
and we actually put this in
a little bit more scrutiny

00:15:40.350 --> 00:15:42.410
than we do other code,
mostly because we

00:15:42.410 --> 00:15:44.480
want to retain
the compatibility,

00:15:44.480 --> 00:15:46.060
mostly in terms of CTS.

00:15:46.060 --> 00:15:49.890
For those unfamiliar, CTS is
a certification testing suite

00:15:49.890 --> 00:15:52.400
that Google has you
run to make sure

00:15:52.400 --> 00:15:55.977
that you can actually get GMS
services and things like that.

00:15:55.977 --> 00:15:58.560
So we make sure that all those
interfaces are stable before we

00:15:58.560 --> 00:16:00.189
even look at your code.

00:16:00.189 --> 00:16:01.980
We'll actually ask you
to write unit tests.

00:16:01.980 --> 00:16:05.710
We'll pretty much have
you put in all the legwork

00:16:05.710 --> 00:16:07.910
to make sure that your
contribution is stable.

00:16:07.910 --> 00:16:10.410
Then if it does get
included in you'd become

00:16:10.410 --> 00:16:13.111
part of the rolling release.

00:16:13.111 --> 00:16:14.860
And then at the end
of the quarter usually

00:16:14.860 --> 00:16:16.200
your future gets included.

00:16:16.200 --> 00:16:20.830
We actually had a
guy from Portugal--

00:16:20.830 --> 00:16:22.290
he's very big into multisend.

00:16:22.290 --> 00:16:24.400
At this time Marshmallow
was not released.

00:16:24.400 --> 00:16:26.468
So he wanted to
have multisend APIs.

00:16:26.468 --> 00:16:28.301
So he pretty much wrote
his entire interface

00:16:28.301 --> 00:16:31.610
so his application could
talk to his own interface

00:16:31.610 --> 00:16:33.500
that he created in
the operating system.

00:16:33.500 --> 00:16:36.490
And he actually released his
app on the Play store recently,

00:16:36.490 --> 00:16:38.365
and he contributed that
full interface to us.

00:16:47.850 --> 00:16:51.300
But for now, I'm going to open
up the floor for questions

00:16:51.300 --> 00:16:52.330
if anyone's got some.

00:16:56.500 --> 00:16:57.030
[INAUDIBLE]?

00:16:57.030 --> 00:16:58.488
AUDIENCE: When will
the custom file

00:16:58.488 --> 00:17:00.792
data guys support rich content?

00:17:00.792 --> 00:17:02.583
ADNAN BEGOVIC: When
they will support what?

00:17:02.583 --> 00:17:03.570
AUDIENCE: Rich content.

00:17:03.570 --> 00:17:04.903
ADNAN BEGOVIC: Oh, rich content?

00:17:04.903 --> 00:17:07.097
AUDIENCE: [INAUDIBLE]

00:17:07.097 --> 00:17:09.513
ADNAN BEGOVIC: You know more
than the people in this room.

00:17:09.513 --> 00:17:10.210
ROMAN BIRG: Work in progress.

00:17:10.210 --> 00:17:11.990
ADNAN BEGOVIC: So on a
staging branch right now

00:17:11.990 --> 00:17:14.170
we have a pretty cool
feature that essentially lets

00:17:14.170 --> 00:17:20.220
you render an or external
processes surface within a view

00:17:20.220 --> 00:17:22.000
container in your hierarchy.

00:17:22.000 --> 00:17:24.220
So it lets you actually
get like rich content.

00:17:24.220 --> 00:17:27.069
If you wanted to render a
map view from another app

00:17:27.069 --> 00:17:28.957
or get that bound
into your view argue,

00:17:28.957 --> 00:17:31.040
it's actually something
we're actively working on.

00:17:35.270 --> 00:17:36.810
Good.

00:17:36.810 --> 00:17:40.320
ROMAN BIRG: So I put up
some samples for my code

00:17:40.320 --> 00:17:40.850
that I have.

00:17:40.850 --> 00:17:41.820
It'll actually run.

00:17:41.820 --> 00:17:44.070
It'll actually publish a
title that you can play with.

00:17:47.290 --> 00:17:49.500
The link is down
there-- the bit.ly link.

00:17:49.500 --> 00:17:52.000
And the CM SDK, it's got a wiki.

00:17:52.000 --> 00:17:54.300
I encourage you to go there.

00:17:54.300 --> 00:17:55.338
Wiki, API links.

00:17:55.338 --> 00:17:56.546
It's got great documentation.

00:18:00.220 --> 00:18:02.155
I highly encourage you
guys to go check out.

00:18:02.155 --> 00:18:04.030
ADNAN BEGOVIC: Thank
you guys for coming out.

00:18:04.030 --> 00:18:04.930
AUDIENCE: Thanks.

00:18:04.930 --> 00:18:06.430
[APPLAUSE]

00:18:12.430 --> 00:18:14.880
[MUSIC PLAYING]

