WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:03.544
So when a program generates
a virtual address, for

00:00:03.544 --> 00:00:05.795
example, does a load or a store to it.

00:00:05.795 --> 00:00:09.638
The processor needs to access
some physical address.

00:00:09.638 --> 00:00:14.288
The question is how does the map
what the program is trying to

00:00:14.288 --> 00:00:17.643
access to what really
should be accessed?

00:00:17.643 --> 00:00:22.218
This mapping would be really hard,
if every byte of virtual memory could

00:00:22.218 --> 00:00:25.301
map to an arbitrary byte
in the physical memory.

00:00:25.301 --> 00:00:28.597
Then we would basically have to
have a huge table of mappings and

00:00:28.597 --> 00:00:31.891
we don't want to do that, because
that table would be very large and

00:00:31.891 --> 00:00:33.394
consume a lot of our memory.

00:00:33.394 --> 00:00:37.528
So instead,
the program's memory is divided

00:00:37.528 --> 00:00:40.922
into equal size chunks called pages.

00:00:40.922 --> 00:00:48.154
A typical page size is 4 kilobytes, so
this would be page 0 in this program,

00:00:48.154 --> 00:00:52.850
page 1 in this program,
page 2, 3, 4, etc.

00:00:52.850 --> 00:00:56.707
So pretty much the first 4
kilobytes will be page 0,

00:00:56.707 --> 00:01:00.061
the next 4 kilobytes will be page 1 and
so on.

00:01:00.061 --> 00:01:04.367
Note that each page is
aligned to the page size.

00:01:04.367 --> 00:01:07.243
So the page, for
example is 4 kilobytes and

00:01:07.243 --> 00:01:09.823
it begins at the 4 kilobyte boundary.

00:01:09.823 --> 00:01:11.971
So this is our virtual memory.

00:01:11.971 --> 00:01:17.263
Our physical memory is divided
into slots that can hold pages and

00:01:17.263 --> 00:01:20.550
these slots are called frames.

00:01:20.550 --> 00:01:22.810
So if you remember your caches,

00:01:22.810 --> 00:01:27.810
pretty much the physical memory behaves
like a cache for the virtual memory in

00:01:27.810 --> 00:01:32.980
that it has a certain number of
places where we can put pages.

00:01:33.980 --> 00:01:38.000
So a page is kind of like a memory block
and the frame is kind of like a cache

00:01:38.000 --> 00:01:42.087
line, except that this is the actual
memory we have and this is the memory

00:01:42.087 --> 00:01:46.461
that the program just thinks it has,
but we never actually have that memory.

00:01:46.461 --> 00:01:49.821
So now the operating
system creates a mapping,

00:01:49.821 --> 00:01:54.703
where it decides which pages in
the program will map to which frames.

00:01:54.703 --> 00:01:57.802
We can do something like this,
for example.

00:01:57.802 --> 00:02:01.844
So page 0, for example, the operating
system decides to put it in frame 0.

00:02:01.844 --> 00:02:05.988
Page 1 can be in frame 2,
page 2 can be in frame 3.

00:02:05.988 --> 00:02:11.283
If we have another process,
it has its own page 0, page 1, etc.

00:02:11.283 --> 00:02:16.340
And these pages might
map to different frames.

00:02:16.340 --> 00:02:20.571
If we want this page 1 and this page
1 to be the same, because these

00:02:20.571 --> 00:02:25.354
2 processors need to share memory,
then we can map them to the same frame.

00:02:25.354 --> 00:02:30.191
And now when this processor writes to
its memory and this processor reads to

00:02:30.191 --> 00:02:35.049
the same address, they actually
are accessing the same memory location.

00:02:35.049 --> 00:02:38.602
So this process reads
what this process wrote.

00:02:38.602 --> 00:02:44.383
But for page 0, for example,
they have different memory there.

00:02:44.383 --> 00:02:47.979
So this process sees its own content for
page 0 and

00:02:47.979 --> 00:02:51.327
this process sees its own content for
page 0.

00:02:51.327 --> 00:02:56.459
So who decides how to do
this mapping here and here?

00:02:56.459 --> 00:02:59.876
And the answer is the operating
system decides and

00:02:59.876 --> 00:03:03.547
the actual mapping mechanism
is called a page table.

00:03:03.547 --> 00:03:07.315
It's a table that says, for
each page in a process,

00:03:07.315 --> 00:03:11.436
where is that page really
mapped in the physical memory?

00:03:11.436 --> 00:03:14.779
This is the page table for this process.

00:03:14.779 --> 00:03:20.330
Another process with its own idea of
virtual memory will have a different

00:03:20.330 --> 00:03:25.340
page table that says, for
each page here, where does it go here.

