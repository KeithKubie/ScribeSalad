WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Automatic simplification works especially well in situations

00:00:04.000 --> 00:00:08.000
where the tests are also generated automatically.

00:00:08.000 --> 00:00:12.000
If you have taken a testing class recently, you may have heard about fuzz test.

00:00:12.000 --> 00:00:17.000
Fuzz testing is a technique where you generate random inputs for a program or an API.

00:00:17.000 --> 00:00:21.000
It's a common testing method to see whether something breaks.

00:00:21.000 --> 00:00:25.000
To show you how fuzz testing works, let's first write a fuzzer,

00:00:25.000 --> 00:00:28.000
which is a function which generates such a random input.

00:00:28.000 --> 00:00:30.000
So here's our fuzzer function.

00:00:30.000 --> 00:00:36.000
We want to have a function that generates strings of up to 1023 characters

00:00:36.000 --> 00:00:39.000
filled with regular printable ASCII symbols.

00:00:39.000 --> 00:00:45.000
So first we determine the string length we'd like to have and for that, simply take a random number--

00:00:45.000 --> 00:00:50.000
random.random returns a random number between 0 and 1 and multiply this with 1024,

00:00:50.000 --> 00:00:54.000
so we get a length of up to 1023 characters.

00:00:54.000 --> 00:00:58.000
And here we have a simple loop over the string length.

00:00:58.000 --> 00:01:06.000
We generate a character which takes an arbitrary value between 32 and 128 by using

00:01:06.000 --> 00:01:10.000
again the random function multiplied with 96 adding 32.

00:01:10.000 --> 00:01:15.000
We add the character to the out string and return the out sting at the end.

00:01:15.000 --> 00:01:20.000
Let us see what fuzzer produces--press on run and here we have

00:01:20.000 --> 00:01:23.000
a non-string filled with random characters.

00:01:23.000 --> 00:01:28.000
If we have a look at it again, we're going to get another random string, and here we go.

00:01:28.000 --> 00:01:35.000
I think what happens if I take such a random string and paste it into a function that accepts

00:01:35.000 --> 00:01:42.000
say a filename or an email address or a URL, all of these functions work well

00:01:42.000 --> 00:01:47.000
even when confounded with seemingly totally random input.

00:01:47.000 --> 00:01:52.000
In the age of the Internet, any input that is under control by a third parties can easily look like this,

00:01:52.000 --> 00:01:54.000
and fuzz testing is indeed one of the attack vectors of people wanting to penetrate into your system.

