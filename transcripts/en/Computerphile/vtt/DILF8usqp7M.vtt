WEBVTT
Kind: captions
Language: en-GB

00:00:00.170 --> 00:00:05.180
I've just done a film about a special
class of Turing Machine called "Busy Beaver"

00:00:05.180 --> 00:00:09.290
that enables you to play the Busy Beaver
game. So there's lots of wonderful

00:00:09.290 --> 00:00:11.389
video footage you can see, on that.

00:00:11.389 --> 00:00:14.750
However for those of you new to this
game, who aren't familiar

00:00:14.750 --> 00:00:19.289
at all with how Turing Machines work,
what we've now done

00:00:19.289 --> 00:00:23.019
is sectioned off a little piece of
footage that you could watch,

00:00:23.019 --> 00:00:26.060
first of all, to get some idea of

00:00:26.060 --> 00:00:29.960
Rado's - Tibor Rado who invented the
Busy Beaver game -

00:00:29.960 --> 00:00:32.960
how he designed his particular Turing Machine

00:00:32.960 --> 00:00:38.720
to enable this game to be played.

00:00:38.720 --> 00:00:43.040
First of all, what does a Turing Machine
actually look like - what does it do?

00:00:43.040 --> 00:00:47.250
So here we are then. This is a Turing
Machine tape, it's divided up into lots

00:00:47.250 --> 00:00:49.140
lots of notional cells

00:00:49.140 --> 00:00:53.220
these are memory locations. Into these
memory locations you can put

00:00:53.220 --> 00:00:56.430
patterns of bits that represent

00:00:56.430 --> 00:01:00.750
your program; patterns of bits that represent 
the data you're working on, in the

00:01:00.750 --> 00:01:01.920
data part of memory, 

00:01:01.920 --> 00:01:05.030
and you can have an infinite amount 
of it, in principle. The

00:01:05.030 --> 00:01:08.910
only other thing you need to give you
this universal computing model

00:01:08.910 --> 00:01:13.990
is a read / write head. It visits a
location on the tape

00:01:13.990 --> 00:01:19.180
and you can either issue to it a  "read" 
command or a "write" command. Now suppose

00:01:19.180 --> 00:01:24.729
these cells have been pre-initialized with
zeros. If in the current head position you say

00:01:24.729 --> 00:01:28.770
"read" and tell me what it is
it says it's a zero. You can then,

00:01:28.770 --> 00:01:32.100
if you want to, say "I want to 
over-write that with a one"

00:01:32.100 --> 00:01:35.310
So, in every cell of this memory there

00:01:35.310 --> 00:01:40.060
is the ability to erase and
optionally to overwrite

00:01:40.060 --> 00:01:44.680
with something else. Now, you can if you're
completely masochistic - and some Turing

00:01:44.680 --> 00:01:48.810
Machine programs work out like this - you
could always over-write a 0 with a 0,

00:01:48.810 --> 00:01:52.720
it's not going to stop you doing that. So, it 
can shift

00:01:52.720 --> 00:01:56.840
left, or right, or not at all.

00:01:56.840 --> 00:02:00.010
And this is a binary Turing Machine.

00:02:00.010 --> 00:02:03.790
There are other formulations which try
to make life simpler

00:02:03.790 --> 00:02:08.130
and keep the tape shorter, by saying: "Oh! 
I'll let you work in decimal

00:02:08.130 --> 00:02:12.140
arithmetic". What was discovered very
early on was that it really didn't matter

00:02:12.140 --> 00:02:16.640
how fancy your alphabet was for the tape.

00:02:16.640 --> 00:02:20.470
All Turing Machines were the same -they all
had the same computing power,

00:02:20.470 --> 00:02:24.060
It's just that sometimes you can keep the tape
length shorter.

00:02:24.060 --> 00:02:27.090
OK, so where does the program come from

00:02:27.090 --> 00:02:31.280
that causes this head to read, and to
write and to shift.

00:02:31.280 --> 00:02:34.580
In many Turing Machine primers

00:02:34.580 --> 00:02:38.200
your say: "Let's park the program code

00:02:38.200 --> 00:02:41.510
- as tons of ones and zeroes, at this end 
of the tape

00:02:41.510 --> 00:02:44.799
and data in memory

00:02:44.799 --> 00:02:49.150
at the top end the tape. And you'll
read an instruction,

00:02:49.150 --> 00:02:53.170
it will tell you something to do with the
read/write head and you shift the head up

00:02:53.170 --> 00:02:56.450
into the data section. You'll do it and you're
oscillating back between

00:02:56.450 --> 00:03:00.660
reading program and writing data. The
simplification I'm going to do

00:03:00.660 --> 00:03:05.240
which is what Tibor Rado does on his Busy 
Beaver Turing Machine, and it makes life

00:03:05.240 --> 00:03:06.510
so much simpler,

00:03:06.510 --> 00:03:10.030
but I'm gonna take the program code off
from tape

00:03:10.030 --> 00:03:13.400
- sounds like good old fashioned computing - 
onto cards.

00:03:13.400 --> 00:03:16.849
Not punched card of the sort we've covered

00:03:16.849 --> 00:03:21.020
but a  Tibor Rado card. Here's a typical

00:03:21.020 --> 00:03:24.640
Tibor Rado type Turing Machine

00:03:24.640 --> 00:03:29.630
card and the idea is that every card
represents an instruction

00:03:29.630 --> 00:03:33.069
in a Turing Machine. So let us look at
this card

00:03:33.069 --> 00:03:36.700
in the context of this Turing Machine 
tape here.

00:03:36.700 --> 00:03:41.020
Tibor says, for the sake of argument,
let's assume that all these

00:03:41.020 --> 00:03:44.760
data memory cells are initialized to zeros.

00:03:44.760 --> 00:03:48.489
Since you don't know whether the head is
going to shift to the right a lot, or

00:03:48.489 --> 00:03:50.340
shift to the left a lot ahead of time,

00:03:50.340 --> 00:03:54.640
let's put it in the middle of this  tape here,
Zero here means

00:03:54.640 --> 00:04:00.970
if you've got a 0 under the head at the
moment - in other words you read and you see a 0 -

00:04:00.970 --> 00:04:05.050
it then says here the '1' is the

00:04:05.050 --> 00:04:08.940
character to be written. So

00:04:08.940 --> 00:04:12.920
we have read a 0, it now says "Write a 1"

00:04:12.920 --> 00:04:16.410
Second binary digit here says

00:04:16.410 --> 00:04:19.630
"Now move the head" and again what Rado did

00:04:19.630 --> 00:04:22.720
is not absolutely essential in Turing Machine law,
but he said

00:04:22.720 --> 00:04:26.260
"If I make the Turing Machine work like this
it's a lot easier to show you what's

00:04:26.260 --> 00:04:26.870
going on".

00:04:26.870 --> 00:04:30.620
So please forgive me in the Rado Machine
the head must always move.

00:04:30.620 --> 00:04:34.440
You can't say " No, I'm stopping still here"
You either move left or you move right.

00:04:34.440 --> 00:04:37.990
Zero equals left; one equals right.

00:04:37.990 --> 00:04:42.500
And finally what's this '2' here?

00:04:42.500 --> 00:04:45.960
Thats your next instruction: '2'.

00:04:45.960 --> 00:04:52.440
We're on card '1' -  your next instruction
will be on another card - card '2'.

00:04:52.440 --> 00:04:55.580
So, you've got all of these actions, that
must happen

00:04:55.580 --> 00:05:00.320
if you read a zero in this current
state of the machine.

00:05:00.320 --> 00:05:03.639
C1 is the Start card,

00:05:03.639 --> 00:05:06.910
C0 is the Halt card.

00:05:06.910 --> 00:05:13.169
OK, so if something in one of these
instructions says you're next card is 0

00:05:13.169 --> 00:05:17.530
meaning a Halt - the 0 card is the Halt card.
So that's the general

00:05:17.530 --> 00:05:22.430
layout of these cards. Well now having seen
this introduction I'd encourage you

00:05:22.430 --> 00:05:26.020
to go on and watch the main "Busy
Beaver" movie.

00:05:26.020 --> 00:05:29.430
And I think at the end of that you'll get
some real feeling

00:05:29.430 --> 00:05:32.660
for just what the word 'Undecidability'

00:05:32.660 --> 00:05:37.510
actually means.

