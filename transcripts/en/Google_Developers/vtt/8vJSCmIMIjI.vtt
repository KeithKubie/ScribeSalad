WEBVTT
Kind: captions
Language: en

00:00:00.690 --> 00:00:03.770
Hi, I'm Mike from the
YouTube desktop team,

00:00:03.770 --> 00:00:06.040
and I'm going to
talk about how WebP

00:00:06.040 --> 00:00:08.430
helps to make YouTube faster.

00:00:08.430 --> 00:00:10.590
You may not realize
it, but YouTube

00:00:10.590 --> 00:00:14.960
is one of the largest image
hosting websites serving

00:00:14.960 --> 00:00:18.700
tens of billions of video
thumbnails every day.

00:00:18.700 --> 00:00:21.130
On many pages of
YouTube, thumbnails

00:00:21.130 --> 00:00:24.130
can contribute up to
80% of total size.

00:00:24.130 --> 00:00:26.420
In fact, a typical
page can easily

00:00:26.420 --> 00:00:29.140
contain more than a
megabyte of image data.

00:00:29.140 --> 00:00:31.600
All those thumbnails add up.

00:00:31.600 --> 00:00:34.980
Client side techniques
like lazy image loading

00:00:34.980 --> 00:00:37.260
helps us to optimize
rendering time,

00:00:37.260 --> 00:00:40.530
save bandwidth, and mitigate
extensive vacant lot,

00:00:40.530 --> 00:00:42.560
but until recently,
we had no way

00:00:42.560 --> 00:00:46.110
to significantly optimize
the images by themselves.

00:00:46.110 --> 00:00:49.900
Fortunately for us, it turns out
that's another team at Google

00:00:49.900 --> 00:00:52.790
has been working on the
WebP image format that

00:00:52.790 --> 00:00:56.200
delivers a significant
improvement in image size

00:00:56.200 --> 00:00:59.830
up to 30% while maintaining
the same quality.

00:00:59.830 --> 00:01:02.280
So we decided to give it a try.

00:01:02.280 --> 00:01:05.459
By the time WebP wasn't a
complete stranger to us,

00:01:05.459 --> 00:01:08.430
as we already used it
for image supplies,

00:01:08.430 --> 00:01:10.920
but all the data we
had was relevant only

00:01:10.920 --> 00:01:12.750
to lossless compression.

00:01:12.750 --> 00:01:15.710
So earlier this year,
we ran an experiment

00:01:15.710 --> 00:01:17.960
to encode a fraction
of video thumbnails

00:01:17.960 --> 00:01:20.180
hosted at YouTube
in lossless WebP,

00:01:20.180 --> 00:01:22.560
we aimed to measure
the bandwidth savings

00:01:22.560 --> 00:01:25.040
and confirm that
WebP helps improve

00:01:25.040 --> 00:01:27.730
rendering time of web pages.

00:01:27.730 --> 00:01:29.650
Knowing about the
benefits of WebP,

00:01:29.650 --> 00:01:33.510
we still had to consider that
introducing a new image format

00:01:33.510 --> 00:01:34.650
is not free.

00:01:34.650 --> 00:01:36.530
At a minimum, it
meant that we had

00:01:36.530 --> 00:01:39.180
to store multiple
variants of the thumbnail,

00:01:39.180 --> 00:01:42.420
WebP versions for clients
like Chrome or Android,

00:01:42.420 --> 00:01:44.590
and JPG for all others.

00:01:44.590 --> 00:01:47.910
In addition, we had to
remember that, on the client,

00:01:47.910 --> 00:01:50.710
WebP does cost a little
bit more to decode.

00:01:50.710 --> 00:01:55.780
So we wanted to see if the
benefits outweigh the cost.

00:01:55.780 --> 00:01:58.550
This experiment displayed
an average savings

00:01:58.550 --> 00:02:03.280
of over 20% of transferred
bytes and up to 10% improvement

00:02:03.280 --> 00:02:05.320
in apge rendering
time, which translates

00:02:05.320 --> 00:02:09.449
to a huge improvement in overall
user experience, not to mention

00:02:09.449 --> 00:02:12.980
that, on the mobile clients,
like our Android application,

00:02:12.980 --> 00:02:15.390
bandwidth savings were
particularly helpful,

00:02:15.390 --> 00:02:19.190
as images are a significant
contributor to data usage,

00:02:19.190 --> 00:02:20.760
even compared to video.

00:02:20.760 --> 00:02:22.780
So we got a lot
of great feedback

00:02:22.780 --> 00:02:27.000
from the users experiencing
a smoother and faster UI.

00:02:27.000 --> 00:02:29.530
Based on this result,
we decided to start

00:02:29.530 --> 00:02:32.582
encoding new thumbnails
in WebP along with JPG.

00:02:32.582 --> 00:02:37.220
And as a result, WebP currently
contributes to over 10%

00:02:37.220 --> 00:02:40.760
of all user image traffic,
saving terabytes of bandwidth

00:02:40.760 --> 00:02:44.580
every day and are expected
to become as popular as JPG

00:02:44.580 --> 00:02:47.430
in near future,
especially as we enable it

00:02:47.430 --> 00:02:51.420
on our iOS client, TV, and
console clients, and allow

00:02:51.420 --> 00:02:53.690
third parties to use it, too.

00:02:53.690 --> 00:02:55.820
They're very happy
with WebP at YouTube,

00:02:55.820 --> 00:02:58.920
and I encourage you to consider
it for your site, as well.

00:02:58.920 --> 00:03:02.070
Check out the WebP homepage
to learn about the format

00:03:02.070 --> 00:03:04.040
and how to get started.

00:03:04.040 --> 00:03:05.830
Thank you.

