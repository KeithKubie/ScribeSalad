WEBVTT
Kind: captions
Language: en

00:00:03.139 --> 00:00:05.180
JEN TONG: So I'm going to
be talking to you today

00:00:05.180 --> 00:00:08.620
about prototyping with
Node.js and Firebase.

00:00:08.620 --> 00:00:12.760
IOT prototyping of course,
because hence the conference.

00:00:12.760 --> 00:00:15.230
Before I get into
that, let me tell you

00:00:15.230 --> 00:00:17.200
a little bit about myself.

00:00:17.200 --> 00:00:18.580
Hi, I'm Jen.

00:00:18.580 --> 00:00:20.430
I'm a developer
advocate, which means

00:00:20.430 --> 00:00:22.290
I get to come to
events like this

00:00:22.290 --> 00:00:25.190
and I get to help all of
you build really cool stuff.

00:00:25.190 --> 00:00:27.150
That's what this talk is about.

00:00:27.150 --> 00:00:30.180
My focus is primarily on
Google Cloud Platform,

00:00:30.180 --> 00:00:33.780
so I guess the internet part
of that Internet Of Things.

00:00:33.780 --> 00:00:35.750
And I always love
hearing from all of you,

00:00:35.750 --> 00:00:37.154
whether it's
questions about APIs

00:00:37.154 --> 00:00:39.320
or you just want to share
something cool that you've

00:00:39.320 --> 00:00:40.342
been building.

00:00:40.342 --> 00:00:42.300
So as always feel free
to hit me up on Twitter.

00:00:42.300 --> 00:00:44.390
I'm @MimmingCodes.

00:00:44.390 --> 00:00:46.381
I'd love to hear
from all of you.

00:00:49.150 --> 00:00:54.136
So before I dig into my
stuff, let me ask all of you

00:00:54.136 --> 00:00:54.760
some questions.

00:00:57.470 --> 00:00:59.150
First of all, how
many of you are

00:00:59.150 --> 00:01:01.840
professional
electrical engineers?

00:01:01.840 --> 00:01:04.690
OK, I'm just going to apologize
to all of you right now.

00:01:04.690 --> 00:01:07.460
I'm going to make a lot
about the simplifications

00:01:07.460 --> 00:01:10.566
and a lot of generalizations.

00:01:10.566 --> 00:01:11.690
We can talk about it later.

00:01:11.690 --> 00:01:15.180
But for now, just roll with it.

00:01:15.180 --> 00:01:19.110
How many of you know
JavaScript better than C?

00:01:19.110 --> 00:01:22.370
That's what I like to hear,
because there's coding the talk

00:01:22.370 --> 00:01:24.040
and it's all JavaScript.

00:01:24.040 --> 00:01:26.650
This is all about
using what you have

00:01:26.650 --> 00:01:28.700
and doing cool stuff with it.

00:01:28.700 --> 00:01:31.670
How many of you have like a
Raspberry Pi or an Arduino

00:01:31.670 --> 00:01:33.940
Uno that's at your
house sitting on a shelf

00:01:33.940 --> 00:01:36.260
somewhere gathering
dust all lonely?

00:01:36.260 --> 00:01:38.860
You had great plans to do
something awesome with it

00:01:38.860 --> 00:01:40.480
and it just like sat?

00:01:40.480 --> 00:01:41.930
OK.

00:01:41.930 --> 00:01:45.125
This talk is all about using
the skills and those boards you

00:01:45.125 --> 00:01:47.340
already have including the
Edison in other boards you

00:01:47.340 --> 00:01:51.150
may have gotten recently,
and doing cool stuff with it.

00:01:51.150 --> 00:01:53.460
So let's dig in.

00:01:53.460 --> 00:01:56.369
And here's my plan.

00:01:56.369 --> 00:01:57.910
First, I'm going to
talk a little bit

00:01:57.910 --> 00:02:00.080
about electrical
engineering stuff

00:02:00.080 --> 00:02:03.160
and kind of the context
targeting at people with mainly

00:02:03.160 --> 00:02:05.710
a web development background.

00:02:05.710 --> 00:02:07.720
Then, I'm going to kind
of switch over and talk

00:02:07.720 --> 00:02:09.110
about a recipe for IOT.

00:02:09.110 --> 00:02:11.180
This is my personal
favorite recipe

00:02:11.180 --> 00:02:12.940
for a very specific
use case, a recipe

00:02:12.940 --> 00:02:14.774
for building one of something.

00:02:14.774 --> 00:02:16.190
So it's like the
bill of materials

00:02:16.190 --> 00:02:17.791
has got a little
more than something

00:02:17.791 --> 00:02:18.790
you'd put in production.

00:02:18.790 --> 00:02:21.160
It uses a little more
batteries than you

00:02:21.160 --> 00:02:23.380
could if you optimize
it, but it has the upside

00:02:23.380 --> 00:02:25.167
of being super easy to use.

00:02:25.167 --> 00:02:27.000
And you can get something
working right away

00:02:27.000 --> 00:02:29.604
and focus on making
a thing awesome.

00:02:29.604 --> 00:02:32.020
Then I'm going to prove to all
of you it is actually easy.

00:02:32.020 --> 00:02:34.395
I'm Going to show you that by
actually building something

00:02:34.395 --> 00:02:36.787
from scratch live
in front of you

00:02:36.787 --> 00:02:38.370
and then writing all
the code it makes

00:02:38.370 --> 00:02:41.590
it do Internet Of Things
stuff, and then also follow up

00:02:41.590 --> 00:02:47.200
with some silly demos of similar
things using the same recipe.

00:02:47.200 --> 00:02:50.960
So first, electrical engineering
for web devs, first thing we're

00:02:50.960 --> 00:02:53.950
going to talk about is signals.

00:02:53.950 --> 00:02:56.280
So we build software, all
the stuff that makes up

00:02:56.280 --> 00:02:59.670
our software is represented
by a couple of numbers, zeros

00:02:59.670 --> 00:03:00.170
and ones.

00:03:00.170 --> 00:03:02.669
At the end of the day, no matter
what complex data structure

00:03:02.669 --> 00:03:04.860
you're using or you know
lambdas, all this stuff,

00:03:04.860 --> 00:03:07.740
it boils down to zeros and
ones that are somewhere

00:03:07.740 --> 00:03:10.180
in memory and through a CPU.

00:03:10.180 --> 00:03:13.050
And we have something kind
of similar in the electrical

00:03:13.050 --> 00:03:14.580
engineering domain.

00:03:14.580 --> 00:03:16.840
We have zeros and
ones which are also

00:03:16.840 --> 00:03:20.970
represented on our dev boards
As a high and low voltage.

00:03:20.970 --> 00:03:22.950
In the case of a board
of five-volt logic,

00:03:22.950 --> 00:03:25.431
like an Arduino
Uno, your one bit

00:03:25.431 --> 00:03:27.680
is actually- they're actually
backwards on the slide--

00:03:27.680 --> 00:03:29.680
the one bit is actually
the high, the five-volt,

00:03:29.680 --> 00:03:33.111
and the low value is
zero-volt, also called ground.

00:03:33.111 --> 00:03:35.110
And this is what we're
going to be moving around

00:03:35.110 --> 00:03:37.180
to make a cool stuff happen.

00:03:37.180 --> 00:03:38.580
And so we have a zero and a one.

00:03:38.580 --> 00:03:39.710
So we have everything, right?

00:03:39.710 --> 00:03:41.500
That's everything we need
in software to represent

00:03:41.500 --> 00:03:42.960
any of that complex structure.

00:03:42.960 --> 00:03:45.530
So we should be done, right?

00:03:45.530 --> 00:03:46.170
No.

00:03:46.170 --> 00:03:48.440
We actually need
some more stuff.

00:03:48.440 --> 00:03:50.610
We need a couple more things
because the real world

00:03:50.610 --> 00:03:53.160
is about physical things
like electrons moving around

00:03:53.160 --> 00:03:55.870
and conductors and
all that stuff.

00:03:55.870 --> 00:03:58.490
So there's a lot of hazy
zone, a lot more hazy zone

00:03:58.490 --> 00:04:00.337
than you're probably
used to in software.

00:04:00.337 --> 00:04:02.420
And one of the kind of
signals we're going to read

00:04:02.420 --> 00:04:03.630
is an analog signal.

00:04:03.630 --> 00:04:06.310
And this is everything between
that low state, that zero,

00:04:06.310 --> 00:04:07.950
and that one.

00:04:07.950 --> 00:04:09.450
And this comes up
a lot when you're

00:04:09.450 --> 00:04:11.680
reading from sensors that
might be outputting stuff

00:04:11.680 --> 00:04:13.237
as kind of a range.

00:04:13.237 --> 00:04:14.820
And in the software
you end up reading

00:04:14.820 --> 00:04:17.910
this is a ratio, a
ratio of your precision.

00:04:17.910 --> 00:04:21.450
So on a zero to
1023 scale, you'd

00:04:21.450 --> 00:04:24.270
be reading that as some number
between those boundaries.

00:04:24.270 --> 00:04:25.250
That's great.

00:04:25.250 --> 00:04:27.900
So now we have zeros and ones
and the stuff in the middle,

00:04:27.900 --> 00:04:28.400
right?

00:04:28.400 --> 00:04:29.980
So we should be set.

00:04:29.980 --> 00:04:30.714
One more thing.

00:04:30.714 --> 00:04:32.130
One more kind of
signal that we're

00:04:32.130 --> 00:04:33.630
going to be dealing
with, that we're

00:04:33.630 --> 00:04:34.810
going to be moving around.

00:04:34.810 --> 00:04:39.400
And that is PWM, which is short
for the pulse width modulation,

00:04:39.400 --> 00:04:41.240
which is a really big mouthful.

00:04:41.240 --> 00:04:44.540
But what it really
means is analog output.

00:04:44.540 --> 00:04:46.000
So the analog
signal on the top is

00:04:46.000 --> 00:04:50.100
the thing we will read
from the outside world.

00:04:50.100 --> 00:04:52.390
So a half value there'd
be like 2 and 1/2 volts.

00:04:52.390 --> 00:04:53.760
That'd be halfway.

00:04:53.760 --> 00:04:56.735
PWM works a little
bit different.

00:04:56.735 --> 00:04:58.620
It is actually a really
big topic in itself.

00:04:58.620 --> 00:05:00.080
I could probably come up
here and talk about it,

00:05:00.080 --> 00:05:02.330
because people have written
whole books on this topic.

00:05:02.330 --> 00:05:05.280
But essentially, it
is analog output.

00:05:05.280 --> 00:05:07.520
And the difference is,
instead of outputting

00:05:07.520 --> 00:05:09.240
2 and 1/2 volts,
what you do is you

00:05:09.240 --> 00:05:12.270
output 2 and 1/2
volts on average.

00:05:12.270 --> 00:05:13.590
So its average over time.

00:05:13.590 --> 00:05:16.860
So you switch back and forth
between the low and high

00:05:16.860 --> 00:05:18.700
to make up that kind
of analog signal.

00:05:18.700 --> 00:05:21.630
And the specific reason is
it gets kind of complicated

00:05:21.630 --> 00:05:26.490
but the TLDR is that motors
don't like half voltage.

00:05:26.490 --> 00:05:28.600
So this is the workaround
we've developed.

00:05:28.600 --> 00:05:31.100
We just go back and forth then
the motor will run about half

00:05:31.100 --> 00:05:31.762
as fast.

00:05:31.762 --> 00:05:33.970
It also works the same way
for light emitting diodes.

00:05:36.870 --> 00:05:40.504
OK, so we talked about signals.

00:05:40.504 --> 00:05:41.920
Let me show all
of you some stuff.

00:05:41.920 --> 00:05:43.350
Let's do some show and tell.

00:05:43.350 --> 00:05:46.450
We're going to talk
about the components.

00:05:46.450 --> 00:05:49.375
Components are a lot like LEGOs
except sometimes they dance.

00:05:49.375 --> 00:05:51.750
You can make them dance and
sometimes they catch on fire.

00:05:51.750 --> 00:05:53.291
But they 're the
little things you're

00:05:53.291 --> 00:05:56.250
going to take and put together
to build your project.

00:05:56.250 --> 00:05:58.840
So I'm going to switch
on over to my handy dandy

00:05:58.840 --> 00:06:00.625
little projector thingamajig.

00:06:00.625 --> 00:06:03.196
I'm going to slide it over so
there's a little less shadow.

00:06:03.196 --> 00:06:04.820
And I'm just going
to walk through some

00:06:04.820 --> 00:06:06.445
of the different
components we're going

00:06:06.445 --> 00:06:07.529
to use to build our stuff.

00:06:07.529 --> 00:06:09.320
I'm going to start with
boards, because you

00:06:09.320 --> 00:06:11.800
might as well start with the
most complicated thing first.

00:06:11.800 --> 00:06:14.120
This is probably
familiar to most of you.

00:06:14.120 --> 00:06:17.120
This is an Arduino Uno.

00:06:17.120 --> 00:06:18.230
It is a microcontroller.

00:06:18.230 --> 00:06:19.400
Well, just this part.

00:06:19.400 --> 00:06:21.010
We'll talk about the
other part later.

00:06:21.010 --> 00:06:22.710
So this is an Arduino Uno.

00:06:22.710 --> 00:06:25.530
And it is a board for--
it's really good at reading

00:06:25.530 --> 00:06:26.840
from the outside world.

00:06:26.840 --> 00:06:29.250
It has a whole bunch of
pins on these little things

00:06:29.250 --> 00:06:31.740
that you can plug sensors into.

00:06:31.740 --> 00:06:35.250
And it's really, really robust
from an electrical engineering

00:06:35.250 --> 00:06:35.760
standpoint.

00:06:35.760 --> 00:06:37.560
You can do terrible
things to this

00:06:37.560 --> 00:06:40.680
that would make other
kinds of electronics sad,

00:06:40.680 --> 00:06:43.510
like accidentally plugging
something to the wrong place.

00:06:43.510 --> 00:06:45.570
And it usually keeps
working so it's

00:06:45.570 --> 00:06:48.009
very resistant to the
magic smoke problem.

00:06:48.009 --> 00:06:50.050
And it has a few different
kinds of pins that I'm

00:06:50.050 --> 00:06:51.008
going to point out now.

00:06:51.008 --> 00:06:53.240
There's these kind
of special pins.

00:06:53.240 --> 00:06:57.280
There one that says 5e
which is your reference one

00:06:57.280 --> 00:07:00.290
and a ground which is
your reference zero.

00:07:00.290 --> 00:07:01.790
It has some analog
inputs that we'll

00:07:01.790 --> 00:07:06.312
use to read from analog sensors
which will come up soon.

00:07:06.312 --> 00:07:08.770
And then it has a whole bunch
of these digital input output

00:07:08.770 --> 00:07:09.814
pins.

00:07:09.814 --> 00:07:11.730
And some of them have a
tilde in front of them

00:07:11.730 --> 00:07:13.700
which just means
that you can use PWM.

00:07:13.700 --> 00:07:17.199
They can be enabled
for PWM output.

00:07:17.199 --> 00:07:17.740
That's great.

00:07:17.740 --> 00:07:18.781
The Arduino is wonderful.

00:07:18.781 --> 00:07:20.970
It can interact
with the sensors.

00:07:20.970 --> 00:07:26.180
But has not a very fast
CPU as a result, which

00:07:26.180 --> 00:07:28.110
means we can't do a lot
of the cool things we

00:07:28.110 --> 00:07:32.090
want to do for IOT like
transport layer security

00:07:32.090 --> 00:07:32.820
negotiations.

00:07:32.820 --> 00:07:36.057
SSL HTTPS doesn't work
very well on this chip.

00:07:36.057 --> 00:07:38.390
There are ways to do it, but
internet and all that stuff

00:07:38.390 --> 00:07:40.751
is hard because this thing
doesn't have an operating

00:07:40.751 --> 00:07:41.250
system.

00:07:41.250 --> 00:07:43.680
We're actually writing code
on metal for the most part,

00:07:43.680 --> 00:07:44.880
right on the CPU.

00:07:44.880 --> 00:07:46.662
It doesn't have file
systems, not really,

00:07:46.662 --> 00:07:47.620
not like we're used to.

00:07:47.620 --> 00:07:49.042
It doesn't have virtual memory.

00:07:49.042 --> 00:07:50.500
We're writing at
a much lower level

00:07:50.500 --> 00:07:52.220
than we're comfortable with.

00:07:52.220 --> 00:07:54.636
But it's great, so we can plug
in our components into this

00:07:54.636 --> 00:07:55.550
and be happy.

00:07:55.550 --> 00:07:58.940
The next part of the
recipe, or next component

00:07:58.940 --> 00:08:01.416
I'd like to show you
is a Raspberry Pi.

00:08:01.416 --> 00:08:03.290
Let me turn it so it is
facing the right way.

00:08:03.290 --> 00:08:05.464
And this is a tiny
little computer.

00:08:05.464 --> 00:08:06.880
Has a lot of the
same features you

00:08:06.880 --> 00:08:10.240
find in a laptop or cellphone
or some other higher power

00:08:10.240 --> 00:08:12.210
computer that you're
used to using.

00:08:12.210 --> 00:08:15.314
And what's great about this is
you can run a real operating

00:08:15.314 --> 00:08:16.980
system on it like
Linux, which gives you

00:08:16.980 --> 00:08:19.960
that virtual memory, that
network stack, all that

00:08:19.960 --> 00:08:21.650
cool stuff are used
to and that we've

00:08:21.650 --> 00:08:23.316
become comfortable
with while we've been

00:08:23.316 --> 00:08:25.010
building for web development.

00:08:25.010 --> 00:08:26.870
And it has GPIO
pins up at the top.

00:08:26.870 --> 00:08:29.280
So you can actually plug
components into it directly

00:08:29.280 --> 00:08:30.670
and they're pretty powerful.

00:08:30.670 --> 00:08:33.669
But I don't usually
recommend people use it

00:08:33.669 --> 00:08:37.460
for their first project because
the Raspberry Pi is much less

00:08:37.460 --> 00:08:39.700
robust than the Arduino.

00:08:39.700 --> 00:08:42.299
It's a little bit more finicky
and a little bit more prone

00:08:42.299 --> 00:08:46.610
to breaking if you accidentally
make it do something terrible.

00:08:46.610 --> 00:08:49.220
So set that aside for now.

00:08:49.220 --> 00:08:51.987
OK let's talk about some of
the more simple components.

00:08:51.987 --> 00:08:53.570
The simplest component
you're probably

00:08:53.570 --> 00:08:56.580
going to deal with while
building is a wire.

00:08:56.580 --> 00:08:59.000
So I'm going to bring one out
and show you a little jumper

00:08:59.000 --> 00:08:59.870
wire.

00:08:59.870 --> 00:09:03.220
Jumper wires, we're going
to be using a lot of these.

00:09:03.220 --> 00:09:05.880
What they do is we use
them to connect two things.

00:09:05.880 --> 00:09:07.510
And what you can
use them to do is

00:09:07.510 --> 00:09:10.880
to move those volts around,
move those electrons around

00:09:10.880 --> 00:09:12.479
and that's kind
of the way you're

00:09:12.479 --> 00:09:13.770
going to move your data around.

00:09:13.770 --> 00:09:16.006
So there's a wire
which is great.

00:09:16.006 --> 00:09:17.380
We can attach them
with soldering

00:09:17.380 --> 00:09:19.171
but sometimes we don't
want to solder them,

00:09:19.171 --> 00:09:21.866
like at the very
beginning of our project.

00:09:21.866 --> 00:09:23.240
That's where this
comes in handy.

00:09:23.240 --> 00:09:24.114
This is a breadboard.

00:09:24.114 --> 00:09:26.980
I actually found a transparent
one which is awesome.

00:09:26.980 --> 00:09:28.570
So how many of you
are familiar with

00:09:28.570 --> 00:09:30.760
or have used breadboards before?

00:09:30.760 --> 00:09:32.570
Almost everyone, but
a few people not.

00:09:32.570 --> 00:09:34.680
I'm actually going to
explain how they work.

00:09:34.680 --> 00:09:36.890
You can plug components
and wires into them

00:09:36.890 --> 00:09:39.370
they have little like
kind of clamp things here.

00:09:39.370 --> 00:09:42.420
And the way they work is
each one of these rows

00:09:42.420 --> 00:09:44.025
here is connected.

00:09:44.025 --> 00:09:45.400
So if we actually
flip it over we

00:09:45.400 --> 00:09:48.820
can see each one of these
little sections is connected.

00:09:48.820 --> 00:09:51.410
So it just clamps different
components together.

00:09:51.410 --> 00:09:55.230
So you can play around
before you solder things.

00:09:55.230 --> 00:09:57.000
It also has these of
rails on the side.

00:09:57.000 --> 00:09:58.940
They go all the way up and down.

00:09:58.940 --> 00:10:02.590
And this is by custom
used for power and ground,

00:10:02.590 --> 00:10:06.650
to have that reference one
and reference zero handy.

00:10:06.650 --> 00:10:08.540
And there's also a
trough in the middle

00:10:08.540 --> 00:10:10.390
and that's just a
convention left over

00:10:10.390 --> 00:10:14.490
from a certain size a microchip,
but a lot of components

00:10:14.490 --> 00:10:17.060
are built to take
advantage of that trough.

00:10:17.060 --> 00:10:19.757
And that is a breadboard

00:10:19.757 --> 00:10:21.840
Breadboards are great while
you're building things

00:10:21.840 --> 00:10:25.000
but eventually you're going to
want to actually take it out

00:10:25.000 --> 00:10:25.630
into the world.

00:10:25.630 --> 00:10:28.088
And if you take out a project
on a breadboard and shake it,

00:10:28.088 --> 00:10:31.389
all of your components
fall off and you're sad.

00:10:31.389 --> 00:10:33.430
That is why there are
these wonderful things that

00:10:33.430 --> 00:10:36.870
are called perfboard, which
stands for perforated board.

00:10:36.870 --> 00:10:38.790
It comes in lots
of different kinds

00:10:38.790 --> 00:10:42.220
some which are actually just a
bunch of little pieces of metal

00:10:42.220 --> 00:10:44.420
in a grid that you
connect with solder.

00:10:44.420 --> 00:10:46.520
But they also have
kinds that look just

00:10:46.520 --> 00:10:49.170
like tiny breadboards
which are my favorite

00:10:49.170 --> 00:10:51.185
because I can just
take whatever design

00:10:51.185 --> 00:10:54.340
I had on my mini-breadboard
and I can just copy it over.

00:10:54.340 --> 00:10:57.750
And I don't have to think a lot
about evaluating that circuit

00:10:57.750 --> 00:10:58.992
again which is great.

00:10:58.992 --> 00:11:00.450
I love not thinking
about something

00:11:00.450 --> 00:11:01.783
so I can think about my project.

00:11:05.600 --> 00:11:08.610
One more kind of wiry component
is going to come up a lot.

00:11:08.610 --> 00:11:11.800
This is a resistor.

00:11:11.800 --> 00:11:16.700
A resistor is kind of like I'm
really terrible wire, which

00:11:16.700 --> 00:11:18.634
you I think is useful
but as it turns out

00:11:18.634 --> 00:11:20.050
is actually really,
really useful.

00:11:20.050 --> 00:11:21.320
It comes up a lot.

00:11:21.320 --> 00:11:24.380
We're going to be using them a
little further on in the talk.

00:11:24.380 --> 00:11:26.780
They Come in a whole
bunch of different values.

00:11:26.780 --> 00:11:30.940
You can actually learn the
color code and the band code.

00:11:30.940 --> 00:11:33.630
But I tend to just keep
them in little bags that

00:11:33.630 --> 00:11:36.500
describe what they are
so I don't have to,

00:11:36.500 --> 00:11:38.250
because I don't like
thinking about things

00:11:38.250 --> 00:11:40.071
I don't want to think about.

00:11:40.071 --> 00:11:42.570
And there are a whole bunch of
different kinds of resistors.

00:11:42.570 --> 00:11:44.550
And you can build very
sophisticated things with just

00:11:44.550 --> 00:11:45.110
them.

00:11:45.110 --> 00:11:48.167
But for the purpose of this
talk and your beginning project,

00:11:48.167 --> 00:11:50.750
all you really need to know is
if there are 10k ohm resistors.

00:11:50.750 --> 00:11:52.020
They exist.

00:11:52.020 --> 00:11:55.470
And they're all you
really need for right now.

00:11:55.470 --> 00:11:57.351
10k ohm.

00:11:57.351 --> 00:11:59.370
OK, some more components.

00:11:59.370 --> 00:12:00.680
This is a tiny button.

00:12:00.680 --> 00:12:01.600
It is a push button.

00:12:01.600 --> 00:12:03.900
It has two pins that
stick out of the side.

00:12:10.290 --> 00:12:12.640
When you leave it alone no
data is moving across it.

00:12:12.640 --> 00:12:15.147
So it's open in that case,
and when you push it down

00:12:15.147 --> 00:12:16.980
to close it, when you
push the button field,

00:12:16.980 --> 00:12:19.950
click the too little
wires are connected.

00:12:19.950 --> 00:12:22.230
And it allows the electrons
to move from one side

00:12:22.230 --> 00:12:23.550
to the other.

00:12:23.550 --> 00:12:28.490
So we will be using that as
a very simple digital input.

00:12:28.490 --> 00:12:31.540
Another simple digital device
is a light emitting diode.

00:12:31.540 --> 00:12:33.550
Here is a nice yellow LED.

00:12:33.550 --> 00:12:35.730
LEDs are little light bulbs.

00:12:35.730 --> 00:12:38.340
If there is a 0 on one side
and a one on the other side

00:12:38.340 --> 00:12:39.575
it turns on.

00:12:39.575 --> 00:12:42.910
If the value is the same on
both sides it does not turn on.

00:12:42.910 --> 00:12:43.820
It is directional.

00:12:43.820 --> 00:12:47.810
So you have to have the one
on the side that's longer

00:12:47.810 --> 00:12:51.750
and a zero on the side that
is shorter for it to turn on.

00:12:51.750 --> 00:12:53.840
That's a really
wonderful digital output.

00:12:53.840 --> 00:12:55.890
It's super simple.

00:12:55.890 --> 00:12:57.800
And I mentioned analog and PWM.

00:12:57.800 --> 00:13:00.400
So I'm going to show you
a couple other components.

00:13:00.400 --> 00:13:02.970
This is what's called
a potentiometer.

00:13:02.970 --> 00:13:05.120
It is a little dial.

00:13:05.120 --> 00:13:06.980
And it has three pins on it.

00:13:06.980 --> 00:13:09.790
And it's kind of cool
because you put reference one

00:13:09.790 --> 00:13:13.230
on one side, five-volt, you
put ground on the other side.

00:13:13.230 --> 00:13:16.240
And then the middle pin will
tell you how far along the dial

00:13:16.240 --> 00:13:17.600
you've gone.

00:13:17.600 --> 00:13:20.220
So it gives you an
analog input that you

00:13:20.220 --> 00:13:24.810
can read from and do cool stuff
with like controlling analog

00:13:24.810 --> 00:13:28.270
components like this servomotor.

00:13:28.270 --> 00:13:31.700
And a servomotor is the
opposite of a potentiometer.

00:13:31.700 --> 00:13:34.010
It has a little arm that moves.

00:13:34.010 --> 00:13:36.630
Generally you don't want to play
with the motor off like this.

00:13:36.630 --> 00:13:38.200
I want to show you.

00:13:38.200 --> 00:13:39.860
It's also a three-pin device.

00:13:39.860 --> 00:13:43.330
And if you give it a ground on
one side, voltage at the other,

00:13:43.330 --> 00:13:45.560
and then a PWM
input in the middle,

00:13:45.560 --> 00:13:47.910
it'll go to the ratio of that.

00:13:47.910 --> 00:13:51.960
So you can actually do an
analog input on a potentiometer,

00:13:51.960 --> 00:13:53.880
turn it and then make
a servomotor move

00:13:53.880 --> 00:13:58.390
by converting that to
PWM and outputting it.

00:13:58.390 --> 00:14:00.460
OK, so we did show and tell.

00:14:00.460 --> 00:14:02.036
We talked about some components.

00:14:02.036 --> 00:14:03.450
Let's go back to slides.

00:14:08.220 --> 00:14:10.850
So I showed you
a bunch of stuff.

00:14:10.850 --> 00:14:11.890
Now for the recipe.

00:14:11.890 --> 00:14:15.210
That's the list of
ingredients we can pull from.

00:14:15.210 --> 00:14:19.040
The recipe I use for the first
time a build a project is this.

00:14:19.040 --> 00:14:20.830
I start with all
those components.

00:14:20.830 --> 00:14:22.630
I figure out what
I want to build

00:14:22.630 --> 00:14:24.760
and what components I need
to solve that problem.

00:14:24.760 --> 00:14:28.180
If I need something to move
there might be servomotors,

00:14:28.180 --> 00:14:29.960
LEGOs who knows?

00:14:29.960 --> 00:14:32.100
There might be
sensors, wires, there

00:14:32.100 --> 00:14:37.740
might be chips that do
something, IMUs, sensors,

00:14:37.740 --> 00:14:39.764
motors maybe.

00:14:39.764 --> 00:14:42.640
Once I have all my components
together, what I do

00:14:42.640 --> 00:14:44.240
is I connect those two.

00:14:44.240 --> 00:14:46.060
An Arduino Uno is
usually the first board

00:14:46.060 --> 00:14:48.620
I will use because
like I said it's

00:14:48.620 --> 00:14:52.340
great at handling the real world
and all that kind of quirks

00:14:52.340 --> 00:14:55.100
of it.

00:14:55.100 --> 00:14:57.950
And then I program that
Arduino with a special sketch,

00:14:57.950 --> 00:15:00.200
a special program
called Firmata.

00:15:00.200 --> 00:15:04.450
And Firmata allows me to plug
it into a Raspberry Pi over USB

00:15:04.450 --> 00:15:08.590
and then offload all the work
of controlling the components.

00:15:08.590 --> 00:15:11.250
That is great, because
now I can actually

00:15:11.250 --> 00:15:14.330
control all those
components via the Arduino

00:15:14.330 --> 00:15:18.480
from my real operating
system on the Raspberry Pi.

00:15:18.480 --> 00:15:20.770
On the Raspberry
Pi I use Node.js,

00:15:20.770 --> 00:15:24.560
and my favorite Node.js
library Johnny-Five.

00:15:24.560 --> 00:15:26.830
You'll see why it's
awesome but is a Node.js

00:15:26.830 --> 00:15:29.760
library for sending
Firmata signals

00:15:29.760 --> 00:15:32.120
and controlling
those components.

00:15:32.120 --> 00:15:33.500
Now this point we have a thing.

00:15:33.500 --> 00:15:35.583
So we have JavaScript
running on our Raspberry Pi,

00:15:35.583 --> 00:15:36.890
and it can move things around.

00:15:36.890 --> 00:15:39.850
And we need last
ingredient, internet.

00:15:39.850 --> 00:15:44.170
For this situation
I use Firebase.

00:15:44.170 --> 00:15:48.310
So let's dig a little bit into
a couple of those components.

00:15:48.310 --> 00:15:52.840
First, let's take a little
deeper look at Johnny-Five.

00:15:52.840 --> 00:15:55.239
So I'm just going to web
search for Johnny-Five.

00:15:55.239 --> 00:15:56.530
There's official documentation.

00:15:56.530 --> 00:15:58.760
There's also the
older GitHub readme.

00:15:58.760 --> 00:16:00.450
I'll make that a little bigger.

00:16:00.450 --> 00:16:01.769
And it is awesome.

00:16:01.769 --> 00:16:03.310
And I will tell you
why it's awesome.

00:16:03.310 --> 00:16:04.380
There are actually
a lot of libraries

00:16:04.380 --> 00:16:06.720
out there for doing
Firmata control, from node.

00:16:06.720 --> 00:16:09.690
So I recommend that you
give them all a try.

00:16:09.690 --> 00:16:10.940
But Johnny-Five's my favorite.

00:16:10.940 --> 00:16:14.650
And the reason is because
it's documentation is amazing.

00:16:14.650 --> 00:16:16.150
Not only does it
have a huge picture

00:16:16.150 --> 00:16:20.350
of a robot doing that, which
is pretty cool, especially

00:16:20.350 --> 00:16:25.600
if you remember the movie--
does anyone remember the movie?

00:16:25.600 --> 00:16:27.860
OK.

00:16:27.860 --> 00:16:30.180
But the cool part is
you scroll on down

00:16:30.180 --> 00:16:32.290
and there's a list of
the different components

00:16:32.290 --> 00:16:34.330
you might want in a system.

00:16:34.330 --> 00:16:37.630
For example let's
say we want a button.

00:16:37.630 --> 00:16:39.244
We want a button, OK.

00:16:39.244 --> 00:16:40.910
So I don't really
need to know anything.

00:16:40.910 --> 00:16:44.520
I just make my breadboard
look like that.

00:16:44.520 --> 00:16:46.110
And then it will work.

00:16:46.110 --> 00:16:48.600
And then accompanying
that diagram

00:16:48.600 --> 00:16:52.020
is the code that makes
that diagram work.

00:16:52.020 --> 00:16:54.440
So then I take this code
and I paste it into a file

00:16:54.440 --> 00:16:56.631
and I node run it and
it's just working.

00:16:56.631 --> 00:16:58.880
And the cool thing is you
can actually string together

00:16:58.880 --> 00:16:59.880
a bunch of those things.

00:16:59.880 --> 00:17:01.730
We might want more
than a button.

00:17:01.730 --> 00:17:05.480
I can go find some
other sensor like I

00:17:05.480 --> 00:17:10.730
don't know how about a LIDAR,
which stands for laser radar.

00:17:10.730 --> 00:17:13.500
And I can copy that picture
again, change the pins

00:17:13.500 --> 00:17:16.700
so none of them conflict
because I can remember numbers

00:17:16.700 --> 00:17:19.119
to move around and then
I just paste this code

00:17:19.119 --> 00:17:20.470
into the same program.

00:17:20.470 --> 00:17:24.400
And I can build up a
very rough Hello world

00:17:24.400 --> 00:17:27.020
all these components just by
copying and pasting and copying

00:17:27.020 --> 00:17:27.984
pictures.

00:17:27.984 --> 00:17:29.900
Which is awesome because
then I can think more

00:17:29.900 --> 00:17:32.240
about the details of how
I want my thing to work

00:17:32.240 --> 00:17:34.110
and how I want people to use it.

00:17:34.110 --> 00:17:35.850
And that is why
Johnny-Five is awesome.

00:17:35.850 --> 00:17:38.239
And there's just so many
components, LCDs, buttons,

00:17:38.239 --> 00:17:40.030
motors, all sorts of
stuff, and all of them

00:17:40.030 --> 00:17:43.670
have a very similar
format for documentation.

00:17:43.670 --> 00:17:45.430
That's why Johnny-Five
is awesome.

00:17:50.762 --> 00:17:52.470
Let's talk a little
bit about another one

00:17:52.470 --> 00:17:53.840
of those, which is Firebase.

00:17:53.840 --> 00:17:55.590
So one of the ways
that I look at Firebase

00:17:55.590 --> 00:18:01.420
is it's kind of a bag of
goodies to make app dev easier.

00:18:01.420 --> 00:18:03.750
And how many of you have
used Firebase before?

00:18:03.750 --> 00:18:05.200
Ooh, a bunch of people, OK.

00:18:05.200 --> 00:18:07.497
So Firebase is kind
of a bag of goodies.

00:18:07.497 --> 00:18:09.330
It has a whole bunch
of different components

00:18:09.330 --> 00:18:10.740
which you could
use independently

00:18:10.740 --> 00:18:12.320
but fit very well together.

00:18:12.320 --> 00:18:15.340
And it handles things like
synchronizing real time data,

00:18:15.340 --> 00:18:18.080
handling network
disconnects, offline time,

00:18:18.080 --> 00:18:19.410
and all that kind of stuff.

00:18:19.410 --> 00:18:21.920
It also has static file
hosting because a lot of people

00:18:21.920 --> 00:18:27.430
write Firebase apps that
just use JavaScript and HTML.

00:18:27.430 --> 00:18:30.400
And it also handles whole bunch
of authentication helpers.

00:18:30.400 --> 00:18:33.230
How many of you have
implemented OAuth before?

00:18:33.230 --> 00:18:35.120
Was it fun?

00:18:35.120 --> 00:18:37.180
No one ever says--
someone said yes,

00:18:37.180 --> 00:18:39.820
but I don't know
if it was serious.

00:18:39.820 --> 00:18:42.310
OAuth can be kind of a
little bit of a headache.

00:18:42.310 --> 00:18:45.097
So Firebase has libraries it
make that a whole lot easier,

00:18:45.097 --> 00:18:45.805
which is awesome.

00:18:48.640 --> 00:18:51.240
But we're only going to talk
about one of those components

00:18:51.240 --> 00:18:53.680
for this recipe, just
the Realtime Database.

00:18:53.680 --> 00:18:55.790
And the Firebase
Realtime Database,

00:18:55.790 --> 00:18:58.870
I kind of as a big ball
of JSON in the sky.

00:18:58.870 --> 00:19:01.710
So if I can take all the
data I need for my project,

00:19:01.710 --> 00:19:03.460
whether it be mobile
app or an IT project,

00:19:03.460 --> 00:19:05.520
and if I can represent
it as a hierarchical data

00:19:05.520 --> 00:19:08.510
structure, JSON, then
I can stick it up

00:19:08.510 --> 00:19:11.330
in Firebase using the
sieve and push methods.

00:19:11.330 --> 00:19:14.290
And then my devices or my
apps that work with my devices

00:19:14.290 --> 00:19:17.290
can choose to listen
to-- you can subscribe

00:19:17.290 --> 00:19:20.870
to either nodes, subtrees,
queries against subtrees--

00:19:20.870 --> 00:19:24.050
and what will happen is
Firebase will automatically

00:19:24.050 --> 00:19:26.690
make call backs on my
mobile app other code

00:19:26.690 --> 00:19:28.080
that relates to my IOT device.

00:19:28.080 --> 00:19:31.410
That makes it so much
easier, which is awesome.

00:19:31.410 --> 00:19:33.820
I can tell you more about
it but why don't we actually

00:19:33.820 --> 00:19:37.010
just look at some of the
Firebase stuff in action.

00:19:37.010 --> 00:19:40.610
So, oh no, its freaking
out a little bit.

00:19:40.610 --> 00:19:42.310
Let me reload that.

00:19:42.310 --> 00:19:43.910
It doesn't like being in a tab.

00:19:43.910 --> 00:19:45.530
All the events replay.

00:19:45.530 --> 00:19:46.530
So here's an example.

00:19:46.530 --> 00:19:49.270
These are the Muni buses.

00:19:49.270 --> 00:19:50.750
Has anyone taken
a bus or a subway

00:19:50.750 --> 00:19:51.655
since they've been
in San Francisco?

00:19:51.655 --> 00:19:52.970
Since they came in?

00:19:52.970 --> 00:19:55.470
So was it on time?

00:19:55.470 --> 00:19:57.150
This is an example
of real time data

00:19:57.150 --> 00:19:58.790
that you care about
being real time.

00:19:58.790 --> 00:20:00.500
Where are your buses right now?

00:20:00.500 --> 00:20:02.720
You don't care where the
bus was two hours ago

00:20:02.720 --> 00:20:04.710
or where it was
yesterday or aggregated

00:20:04.710 --> 00:20:05.864
data from a long time ago.

00:20:05.864 --> 00:20:07.780
If you're sitting at a
bus stop and your cold,

00:20:07.780 --> 00:20:09.488
you care about where
the bus is right now

00:20:09.488 --> 00:20:11.707
and why isn't it where you are.

00:20:11.707 --> 00:20:14.290
And here are actually all of the
Muni buses, The Municipal Bus

00:20:14.290 --> 00:20:16.510
System in San Francisco
right around us.

00:20:16.510 --> 00:20:21.225
In this is where they actually
are as of 100 milliseconds ago.

00:20:21.225 --> 00:20:23.350
Being San Francisco, you
can tell that most of them

00:20:23.350 --> 00:20:24.550
are stopped.

00:20:24.550 --> 00:20:26.419
This is real data.

00:20:26.419 --> 00:20:28.460
The examples real, the
buses are just not moving,

00:20:28.460 --> 00:20:31.092
probably because it's
getting on into rush hour.

00:20:31.092 --> 00:20:33.050
One game I like to play
is looking for clusters

00:20:33.050 --> 00:20:34.810
of buses that are the same.

00:20:34.810 --> 00:20:37.082
How many fives can I find
right next to each other?

00:20:37.082 --> 00:20:39.290
So that's where they are,
they're all having a party.

00:20:42.084 --> 00:20:44.000
So here's one other
example of real time data,

00:20:44.000 --> 00:20:47.040
which is real time
collaboration like collaborating

00:20:47.040 --> 00:20:48.109
on Google Docs comments.

00:20:48.109 --> 00:20:49.650
I'm going to take
a little risk here.

00:20:49.650 --> 00:20:51.950
This is an interactive slide.

00:20:51.950 --> 00:20:53.870
You can pull out your
mobile device or laptop.

00:20:53.870 --> 00:20:56.496
If you go to a
firesketch.firebaseapp.com,

00:20:56.496 --> 00:21:00.710
we can draw dinosaur together.

00:21:00.710 --> 00:21:09.260
I'm going to start and if anyone
to join in, someone's helping.

00:21:09.260 --> 00:21:10.760
Who's helping?

00:21:10.760 --> 00:21:12.070
Is it fast?

00:21:12.070 --> 00:21:12.570
Cool.

00:21:12.570 --> 00:21:15.760
OK, so I see a lot of
people are joining in.

00:21:15.760 --> 00:21:16.900
Thank you for being nice.

00:21:16.900 --> 00:21:21.440
This is a risk to have
people draw on stage.

00:21:21.440 --> 00:21:23.360
You never know what can happen.

00:21:23.360 --> 00:21:26.112
So switching back to
my Keynote slides.

00:21:26.112 --> 00:21:28.570
So that's just a couple examples
of what real time data is,

00:21:28.570 --> 00:21:31.111
why it's cool, and I guess you
can kind of get an idea of how

00:21:31.111 --> 00:21:32.440
it relates to IOT projects.

00:21:32.440 --> 00:21:34.270
We often care about
if we hit the button

00:21:34.270 --> 00:21:37.950
we want the lights to turn
off now, not in an hour.

00:21:37.950 --> 00:21:40.165
So here's some of
the code that you use

00:21:40.165 --> 00:21:43.306
to interactive with Firebase.

00:21:43.306 --> 00:21:44.680
If you want to
write to Firebase,

00:21:44.680 --> 00:21:47.060
the first thing you do is
you connect to Firebase.

00:21:47.060 --> 00:21:51.400
You connect to Firebase by just
installing the client library,

00:21:51.400 --> 00:21:53.700
and then just
attaching to Firebase.

00:21:53.700 --> 00:21:56.270
All Firebases are
identified by a URL.

00:21:56.270 --> 00:21:58.040
And all locations in
them are also URLs.

00:21:58.040 --> 00:22:00.623
You can just use path segments
to work your way down that JSON

00:22:00.623 --> 00:22:01.274
block.

00:22:01.274 --> 00:22:03.690
If you want to write data, we
have a few different methods

00:22:03.690 --> 00:22:05.620
but simplest is set.

00:22:05.620 --> 00:22:07.620
You take you reference
to a location in Firebase

00:22:07.620 --> 00:22:08.370
and you call set.

00:22:08.370 --> 00:22:10.930
And then you pass it,
text, numbers, JSON,

00:22:10.930 --> 00:22:14.940
anything that can be in JSON,
including another JSON tree.

00:22:14.940 --> 00:22:17.920
When you want to read data,
this is the part that gets cool,

00:22:17.920 --> 00:22:19.860
you just add attach
a listener, just

00:22:19.860 --> 00:22:22.440
like you'd attach a listener
to a button on a web page,

00:22:22.440 --> 00:22:25.560
except this is a
listener to the internet.

00:22:25.560 --> 00:22:28.390
And when that location or
that query changes then

00:22:28.390 --> 00:22:31.984
Firebase will automatically
call your code.

00:22:31.984 --> 00:22:34.400
And what's cool about this
kind of really simple interface

00:22:34.400 --> 00:22:37.070
is it the Firebase client
libraries handle local caching,

00:22:37.070 --> 00:22:40.430
they handle threading, all that
stuff that's kind of a pain

00:22:40.430 --> 00:22:41.090
sometimes.

00:22:41.090 --> 00:22:44.130
It also handles things like
going between online offline

00:22:44.130 --> 00:22:44.630
states.

00:22:50.900 --> 00:22:53.240
Let's build some stuff.

00:22:53.240 --> 00:22:57.070
So now we have all recipe
components ready to go.

00:22:57.070 --> 00:22:59.120
Let's actually build something.

00:22:59.120 --> 00:23:01.440
And we are going to build
Hello World of electronics.

00:23:01.440 --> 00:23:03.140
How does that sound?

00:23:03.140 --> 00:23:05.935
Does anyone know what Hello
World of electronics is?

00:23:05.935 --> 00:23:07.060
It is a blinky light.

00:23:07.060 --> 00:23:08.820
Yes we are going
to have a button

00:23:08.820 --> 00:23:10.640
and we're going to have an LED.

00:23:10.640 --> 00:23:12.350
And when we hit
the button, we're

00:23:12.350 --> 00:23:16.200
going to make the LED turn on,
but with one special twist,

00:23:16.200 --> 00:23:19.070
we're going to be sending
data through the internet

00:23:19.070 --> 00:23:22.270
to do that, because why not?

00:23:22.270 --> 00:23:26.140
So like I said, I'm just
going to copy what Johnny-Five

00:23:26.140 --> 00:23:27.800
shows in that picture.

00:23:27.800 --> 00:23:31.622
So I'm going to go over to
Johnny-Five, because this is

00:23:31.622 --> 00:23:32.830
the easiest way to live code.

00:23:32.830 --> 00:23:36.550
You just have it pre-done
and copy and paste.

00:23:36.550 --> 00:23:38.050
So we're going to
go over to button.

00:23:38.050 --> 00:23:39.133
And what does button have?

00:23:39.133 --> 00:23:41.510
The first thing button has
is it has some wires moving

00:23:41.510 --> 00:23:43.090
across and then a button.

00:23:43.090 --> 00:23:45.603
So I'm just going to drag
that down into the corner

00:23:45.603 --> 00:23:47.170
so you can see a reference.

00:23:47.170 --> 00:23:49.380
I'll just leave this
up for full screen.

00:23:49.380 --> 00:23:50.990
So the first thing
we're going to do

00:23:50.990 --> 00:23:52.350
is we're going to
get to jumper wires

00:23:52.350 --> 00:23:54.760
and we're going to move that
reference zero and reference

00:23:54.760 --> 00:23:55.525
one over.

00:23:59.174 --> 00:24:00.590
So there's little
ground pin here.

00:24:00.590 --> 00:24:04.750
I'm going to stick a blue cable
in that and copy it over--

00:24:04.750 --> 00:24:07.370
with the -- over to
the little minus rail.

00:24:07.370 --> 00:24:09.120
Then I'm going to take
the five-volt which

00:24:09.120 --> 00:24:11.920
is our reference
one and we're going

00:24:11.920 --> 00:24:15.514
to use the wire to send it over
to the little red rail which

00:24:15.514 --> 00:24:16.430
is unlike the picture.

00:24:16.430 --> 00:24:18.096
The picture is backward
for some reason,

00:24:18.096 --> 00:24:21.050
I decided blue should be on.

00:24:21.050 --> 00:24:23.360
But in any case, the next
thing we're going to do

00:24:23.360 --> 00:24:24.735
is we're going to
take our button

00:24:24.735 --> 00:24:26.135
and stick it into
the breadboard.

00:24:26.135 --> 00:24:27.892
This is a regular
push button that I've

00:24:27.892 --> 00:24:29.767
put some feet on so that
it actually connects

00:24:29.767 --> 00:24:31.210
to the breadboard well.

00:24:31.210 --> 00:24:34.480
And we're going to
grab some jumper wires.

00:24:34.480 --> 00:24:37.650
And the first thing
we're going to do

00:24:37.650 --> 00:24:43.240
is we're going to
use purple wire

00:24:43.240 --> 00:24:49.280
and we're going to make
one pin on the red.

00:24:49.280 --> 00:24:52.075
We're going to connect the red
side to one of the button pins.

00:24:52.075 --> 00:24:53.950
And then we're going to
connect the other one

00:24:53.950 --> 00:24:55.160
to one of the digital reads.

00:24:55.160 --> 00:24:58.050
We could use any of them.

00:24:58.050 --> 00:24:59.910
So I will use a
red wire and we're

00:24:59.910 --> 00:25:05.400
going to read from pin four.

00:25:05.400 --> 00:25:06.609
Four sounds good.

00:25:06.609 --> 00:25:08.650
So now what will happen
is that we have a button.

00:25:08.650 --> 00:25:10.040
It looks like it should
work at this point,

00:25:10.040 --> 00:25:11.415
because we hit
the button, right?

00:25:11.415 --> 00:25:13.510
And then it copies
that five-volt, that

00:25:13.510 --> 00:25:15.260
reference one over to have pin.

00:25:15.260 --> 00:25:16.250
And it should be great.

00:25:16.250 --> 00:25:18.830
But there is actually
something extra in this.

00:25:18.830 --> 00:25:22.960
There was a resistor there
which went to the ground.

00:25:22.960 --> 00:25:26.570
This is where that real
world physics stuff comes in.

00:25:26.570 --> 00:25:29.810
This is the case where you
might need an awful wire,

00:25:29.810 --> 00:25:34.932
because our button copies data
but only when the button is

00:25:34.932 --> 00:25:35.890
pushed, when it's open.

00:25:35.890 --> 00:25:38.270
So when the button is
pushed, everything is fine.

00:25:38.270 --> 00:25:39.930
The five-volt is coming across.

00:25:39.930 --> 00:25:42.119
It's going across and it's
getting sent over to- oh

00:25:42.119 --> 00:25:43.540
that jumper wire broke.

00:25:43.540 --> 00:25:46.010
I'll replace it-- it
sends it over to the input

00:25:46.010 --> 00:25:47.000
and we read it.

00:25:47.000 --> 00:25:49.920
But when we let go it opens
up and it's no longer moving

00:25:49.920 --> 00:25:53.020
any state, which is
bad because we have

00:25:53.020 --> 00:25:54.790
some trapped electrons
that are hanging

00:25:54.790 --> 00:25:56.470
out there causing trouble.

00:25:56.470 --> 00:25:58.220
And how that will
manifest in your project

00:25:58.220 --> 00:26:00.386
is you're going to see the
thing kind of bounce back

00:26:00.386 --> 00:26:04.880
and forth between one and zero
which is no fun because it's

00:26:04.880 --> 00:26:07.510
confusing.

00:26:07.510 --> 00:26:08.600
OK so that's fixed.

00:26:08.600 --> 00:26:09.400
So what we're going
to do is we're going

00:26:09.400 --> 00:26:10.690
to use a pull down resistor.

00:26:10.690 --> 00:26:12.030
That's what it's called.

00:26:12.030 --> 00:26:14.770
So we're going to plug it into
the side we're reading from

00:26:14.770 --> 00:26:18.599
and then we're going to
put that into the ground.

00:26:18.599 --> 00:26:20.140
And what this
pull-down resistor does

00:26:20.140 --> 00:26:23.170
is if the button is pressed
it doesn't do anything.

00:26:23.170 --> 00:26:25.022
The reference one
still gets copied.

00:26:25.022 --> 00:26:26.730
And then the input
reads it and its fine.

00:26:26.730 --> 00:26:30.490
But when you let go it
drains out that excess charge

00:26:30.490 --> 00:26:32.360
and makes our circuits work.

00:26:32.360 --> 00:26:35.006
It pulls it back down to zero.

00:26:35.006 --> 00:26:38.142
So we have a very
simple circuit.

00:26:38.142 --> 00:26:39.850
Let's do some live
coding now and by that

00:26:39.850 --> 00:26:41.610
I mean copy and paste.

00:26:41.610 --> 00:26:44.056
So I'm going to grab all this.

00:26:44.056 --> 00:26:45.910
I'm going to open
up my terminal.

00:26:48.670 --> 00:26:51.460
I'm going to open up vi,
is the only text editor

00:26:51.460 --> 00:26:57.377
IDE the world will ever need,
and paste in off the internet.

00:26:57.377 --> 00:26:58.960
Let's delete some
of this extra stuff.

00:26:58.960 --> 00:27:01.210
There's a lot of stuff in
here we don't actually need.

00:27:01.210 --> 00:27:04.200
There's are some REPL
stuff which we're not

00:27:04.200 --> 00:27:06.080
going to be using that.

00:27:06.080 --> 00:27:08.146
And we have a very
simple program now.

00:27:08.146 --> 00:27:09.520
Well before we
can use it we have

00:27:09.520 --> 00:27:15.620
to-- there'll be a true test
of the conference Wi-Fi,

00:27:15.620 --> 00:27:16.767
live installing.

00:27:16.767 --> 00:27:18.350
Yes, because it was
an empty directory

00:27:18.350 --> 00:27:19.720
before I started as you can see.

00:27:22.720 --> 00:27:25.216
OK, so it installed, yeah.

00:27:25.216 --> 00:27:26.984
And here's our program.

00:27:26.984 --> 00:27:28.400
I didn't actually
change anything.

00:27:28.400 --> 00:27:30.066
I should probably
change the pin number.

00:27:30.066 --> 00:27:33.260
We actually plugged it
into, what was it, pin four.

00:27:33.260 --> 00:27:35.810
Let's change that
from two to four.

00:27:35.810 --> 00:27:41.380
And run Node.js, oh, I
hadn't plugged it in.

00:27:41.380 --> 00:27:46.417
Plugging it in would
help, with a USB cable.

00:27:46.417 --> 00:27:48.000
Oh yes so one thing
you're seeing here

00:27:48.000 --> 00:27:50.583
is I'm actually plugging into
my laptop instead of a Raspberry

00:27:50.583 --> 00:27:52.210
Pi, and that's because
as I mentioned,

00:27:52.210 --> 00:27:55.830
a Raspberry Pi is very
similar to a small computer.

00:27:55.830 --> 00:27:57.950
So while your doing
development you

00:27:57.950 --> 00:28:01.070
can use your computer
instead, which is great,

00:28:01.070 --> 00:28:03.070
because it works a
lot better because it

00:28:03.070 --> 00:28:04.362
has a keyboard on it and stuff.

00:28:04.362 --> 00:28:06.528
And then later when you
want to actually take it out

00:28:06.528 --> 00:28:09.010
in the world you can copy your
program to the Raspberry Pi

00:28:09.010 --> 00:28:10.550
and everything is happy.

00:28:10.550 --> 00:28:12.112
OK, so we should see something.

00:28:12.112 --> 00:28:14.070
When we hit the button
down it should say down,

00:28:14.070 --> 00:28:16.170
and we're let go,
it should say up.

00:28:16.170 --> 00:28:18.110
So we have our Hello
World in terms of we

00:28:18.110 --> 00:28:20.300
have a button that
goes up and down.

00:28:20.300 --> 00:28:22.740
Yeah!

00:28:22.740 --> 00:28:24.939
Let's go copy in
another part of that.

00:28:24.939 --> 00:28:27.230
We want to have a little LED
that turns on and off when

00:28:27.230 --> 00:28:28.020
we hit the button.

00:28:30.421 --> 00:28:31.670
So let's go ahead and do that.

00:28:31.670 --> 00:28:33.086
And then we will
refactor internet

00:28:33.086 --> 00:28:37.057
into it, the best
kind of refactoring.

00:28:37.057 --> 00:28:39.390
So we're going to search the
page for the thing we want.

00:28:39.390 --> 00:28:41.608
We want a LED.

00:28:41.608 --> 00:28:45.130
I'm going to go over to LED.

00:28:45.130 --> 00:28:47.050
And it says take an LED.

00:28:47.050 --> 00:28:48.942
And I'm going to grab one.

00:28:48.942 --> 00:28:51.720
I'm going to grab a
little yellow LED.

00:28:51.720 --> 00:28:53.760
And their circuit
diagram is very simple.

00:28:53.760 --> 00:28:54.960
They're just plugging
it into the board.

00:28:54.960 --> 00:28:56.460
I'm just going to move
that over to the breadboard

00:28:56.460 --> 00:28:58.620
and then we're going
to copy this code.

00:28:58.620 --> 00:29:02.490
So what I'm doing is I'm
remembering which pin is long,

00:29:02.490 --> 00:29:04.560
because that's one
that has to be warm,

00:29:04.560 --> 00:29:07.410
it has to go to
the high voltage.

00:29:07.410 --> 00:29:09.970
Then I'm going to
take the reference

00:29:09.970 --> 00:29:13.330
low from that
little rail and I'm

00:29:13.330 --> 00:29:18.030
going to connect it
with a jumper wire.

00:29:18.030 --> 00:29:21.614
And then I'm going to use
one of the digital inputs,

00:29:21.614 --> 00:29:23.530
or one of the digital
outputs from the Arduino

00:29:23.530 --> 00:29:26.140
to make the LED light up or dim.

00:29:26.140 --> 00:29:28.440
I'll grab a brown wire again.

00:29:28.440 --> 00:29:30.600
There should be more colors.

00:29:30.600 --> 00:29:33.690
And we'll use pin 12.

00:29:33.690 --> 00:29:37.659
So now, if pin 12 is set
too high state, to one,

00:29:37.659 --> 00:29:39.200
we're going to have
a one on one side

00:29:39.200 --> 00:29:40.783
and we have zero
that's already there,

00:29:40.783 --> 00:29:42.310
and the LED will turn on.

00:29:42.310 --> 00:29:44.850
If it is not, the
LED will stay off

00:29:44.850 --> 00:29:46.730
because there will be
a zero on both sides,

00:29:46.730 --> 00:29:47.780
and no charge will move.

00:29:47.780 --> 00:29:49.940
And no LED will turn on.

00:29:49.940 --> 00:29:52.030
So let's go ahead and
this one is pretty simple.

00:29:52.030 --> 00:29:54.310
We just borrow an LED.

00:29:54.310 --> 00:29:57.525
Let's go back over to our
awesome, awesome text editor.

00:29:57.525 --> 00:30:00.850
We're going to make an LED.

00:30:00.850 --> 00:30:03.940
And it was on 13 in the
diagram but we changed it to 12

00:30:03.940 --> 00:30:07.700
because we like
living on the edge.

00:30:07.700 --> 00:30:18.444
And to turn it on and off,
on and LED got on and off.

00:30:18.444 --> 00:30:20.360
So when we push it down,
the LED will turn on,

00:30:20.360 --> 00:30:23.340
and when we pick it up,
the LED will turn off.

00:30:23.340 --> 00:30:29.026
So we'll run that code, then
that little thing there,

00:30:29.026 --> 00:30:32.680
shrink this a little
bit, thank you.

00:30:35.135 --> 00:30:36.260
Now our program is running.

00:30:36.260 --> 00:30:40.370
So when we hit the button
The LED turns on, yeah.

00:30:40.370 --> 00:30:41.682
OK.

00:30:41.682 --> 00:30:43.666
[APPLAUSE]

00:30:45.015 --> 00:30:46.390
So now we've pretty
much finished

00:30:46.390 --> 00:30:49.480
the thing part of our Internet
Of Things Hello World.

00:30:49.480 --> 00:30:50.604
Let's add some internet.

00:30:50.604 --> 00:30:53.020
This is a great point to kind
of take a breath when you're

00:30:53.020 --> 00:30:54.390
building something,
because now you probably

00:30:54.390 --> 00:30:56.640
don't have to move around
too much of the electronics,

00:30:56.640 --> 00:30:58.290
and you can switch
back to web dev mode

00:30:58.290 --> 00:31:02.109
or put our JavaScript
hacker hat on.

00:31:02.109 --> 00:31:03.400
So we're going to add internet.

00:31:03.400 --> 00:31:05.050
And I said we do Firebase.

00:31:05.050 --> 00:31:07.379
So let's add some Firebase.

00:31:07.379 --> 00:31:09.170
I'm going to go to
firebase.com because I'm

00:31:09.170 --> 00:31:12.220
going to continue the live
code by copying and pasting.

00:31:12.220 --> 00:31:14.780
I'm just going to go and copy
stuff out of the Quickstart.

00:31:14.780 --> 00:31:16.730
So we're doing the internet.

00:31:16.730 --> 00:31:18.480
We're building for the
Internet Of Things.

00:31:18.480 --> 00:31:20.030
But we're going to go
to the Web Quickstart

00:31:20.030 --> 00:31:21.940
because it's the one with
the JavaScript in it,

00:31:21.940 --> 00:31:23.130
because we're using Node.js.

00:31:23.130 --> 00:31:31.580
The first thing we're going to
have to do is install Firebase.

00:31:31.580 --> 00:31:32.390
That was fast.

00:31:32.390 --> 00:31:33.490
That was awesome.

00:31:33.490 --> 00:31:35.697
We're going to have
to get the Firebase

00:31:35.697 --> 00:31:37.280
and see if the copy
thing works today.

00:31:46.040 --> 00:31:48.160
And the next thing
we're going to do

00:31:48.160 --> 00:31:49.540
is just kind of walk through it.

00:31:49.540 --> 00:31:51.750
So now if we have the
Firebase client there.

00:31:51.750 --> 00:31:54.374
We're going to connect
to our Firebase.

00:31:54.374 --> 00:31:56.290
Which we're going to do
right around the place

00:31:56.290 --> 00:31:58.105
where we instantiate
those buttons.

00:31:58.105 --> 00:32:02.890
We'll change it to
firebutton.firebaseio.com

00:32:02.890 --> 00:32:04.690
And then I'm going
to do a little trick.

00:32:04.690 --> 00:32:08.230
As you just add dash demo to
the end of a Firebase domain,

00:32:08.230 --> 00:32:10.850
it becomes a demo Firebase,
which means you don't even

00:32:10.850 --> 00:32:12.710
need an account to create it.

00:32:12.710 --> 00:32:14.760
But please don't launch
production apps on it,

00:32:14.760 --> 00:32:16.510
your data's going to
get deleted at random

00:32:16.510 --> 00:32:18.720
because it's for demos.

00:32:18.720 --> 00:32:20.530
Then I'm going to
put a path on there

00:32:20.530 --> 00:32:22.780
just in case I want to use
that demo Firebase for more

00:32:22.780 --> 00:32:24.460
things like many buttons.

00:32:24.460 --> 00:32:26.726
And we're going to
go to this location.

00:32:26.726 --> 00:32:28.350
One cool thing about
Firebase is if you

00:32:28.350 --> 00:32:30.490
want to see what's in
there in your web browser,

00:32:30.490 --> 00:32:32.406
we can just drop it in
there and we can see it

00:32:32.406 --> 00:32:34.370
in this Firebase console.

00:32:34.370 --> 00:32:36.616
I'm going to remove that node.

00:32:36.616 --> 00:32:40.210
It's going to take a look
at the whole Firebase.

00:32:40.210 --> 00:32:42.350
I just cleared stuff
out because I practiced.

00:32:42.350 --> 00:32:44.040
So there was data
in there all ready.

00:32:44.040 --> 00:32:46.832
Now it's empty, like you got
to it for real the first time.

00:32:46.832 --> 00:32:49.290
Then the next thing we're going
to do is what we want to do

00:32:49.290 --> 00:32:51.850
is we want to write that
button state to the internet.

00:32:51.850 --> 00:32:53.090
So we're going to go
right here to writing

00:32:53.090 --> 00:32:54.964
data which is very
conveniently the next step

00:32:54.964 --> 00:32:57.310
in the Quickstart.

00:32:57.310 --> 00:33:00.620
What are the odds of that?

00:33:00.620 --> 00:33:02.520
So we are not
writing complex JSON

00:33:02.520 --> 00:33:04.311
we're going to write
something very simple.

00:33:08.900 --> 00:33:12.510
We're just going to
write down when it's down

00:33:12.510 --> 00:33:21.330
and we're going to write
up when it goes up.

00:33:21.330 --> 00:33:23.850
So we're going to write
that state to the Firebase.

00:33:23.850 --> 00:33:26.620
So now we have a
write-only button.

00:33:26.620 --> 00:33:28.930
Let's give it a kick
and see if it works.

00:33:28.930 --> 00:33:30.690
So we have our
little program there.

00:33:30.690 --> 00:33:33.910
We're going to split the screen
more times, because why not?

00:33:33.910 --> 00:33:35.700
We have our little
Firebase viewer here.

00:33:35.700 --> 00:33:37.260
We have our button up there.

00:33:37.260 --> 00:33:38.654
I started up the Node script.

00:33:38.654 --> 00:33:40.570
Let's see what happens
when we hit the button.

00:33:45.130 --> 00:33:48.270
So we hit the button and
then when we press it down

00:33:48.270 --> 00:33:53.880
it writes down and up to the
Firebase out on the internet.

00:33:53.880 --> 00:33:56.300
So now we have made the
very, very minimal Internet

00:33:56.300 --> 00:33:56.800
Of Things.

00:33:56.800 --> 00:33:59.640
We have a thing that changes
the internet when you touch it.

00:33:59.640 --> 00:34:02.172
Yeah!

00:34:02.172 --> 00:34:03.880
But that's not quite
what we want to get.

00:34:07.130 --> 00:34:10.909
We wanted to turn the LED on
and off via the internet, right?

00:34:10.909 --> 00:34:15.770
So rather than turn
it on and off here,

00:34:15.770 --> 00:34:18.985
why don't we read from
Firebase to turn it on and off?

00:34:18.985 --> 00:34:21.989
So we're going to go back
on over to the Quickstart.

00:34:21.989 --> 00:34:24.629
We're going to go to the
next step of reading data.

00:34:24.629 --> 00:34:27.520
It's like this is rehearsed.

00:34:27.520 --> 00:34:30.770
And we're going to paste
into the reading data step.

00:34:35.920 --> 00:34:38.904
And we don't want to
do an alert, though.

00:34:38.904 --> 00:34:40.570
We also don't want
to read these things.

00:34:40.570 --> 00:34:43.570
So this goes into
another subpath.

00:34:43.570 --> 00:34:47.300
We just want to
read a reference.

00:34:47.300 --> 00:34:48.800
And here I've got
Firebase callback.

00:34:48.800 --> 00:34:51.530
So the way it works is I
give it a function that

00:34:51.530 --> 00:34:55.310
will get called whenever the
value changes at that location.

00:34:55.310 --> 00:34:57.490
And it's going to send me
a snapshot which contains

00:34:57.490 --> 00:34:58.490
a whole bunch of metadata.

00:34:58.490 --> 00:35:00.031
It's like an immutable
representation

00:35:00.031 --> 00:35:03.120
of the state of the data
the time it got called.

00:35:03.120 --> 00:35:05.024
All we really want is
the value because this

00:35:05.024 --> 00:35:05.815
is a silly project.

00:35:15.640 --> 00:35:18.380
So we have our button state.

00:35:18.380 --> 00:35:22.365
We want to do if down.

00:35:22.365 --> 00:35:24.775
If the button is down,
turn the LED on, else.

00:35:34.770 --> 00:35:37.335
So what this does is
whenever the state

00:35:37.335 --> 00:35:38.710
of the button in
Firebase changes

00:35:38.710 --> 00:35:40.970
this function will get called.

00:35:40.970 --> 00:35:47.480
I have a-- why is it
outside the-- oh yeah I do.

00:35:47.480 --> 00:35:49.540
Live coding with audience help.

00:35:49.540 --> 00:35:52.955
It's like pair-programming
but crazy more.

00:35:52.955 --> 00:35:54.330
OK, so when the
button goes down,

00:35:54.330 --> 00:35:55.860
this will get called
whenever the state changes.

00:35:55.860 --> 00:35:57.359
And then I'll just
extract the value

00:35:57.359 --> 00:35:59.454
and then I'll just
do a statement on it.

00:35:59.454 --> 00:36:00.850
Let's see if it works.

00:36:05.460 --> 00:36:07.950
So I have my Firebase
viewer over here.

00:36:07.950 --> 00:36:10.520
I'll bring that back
down so we can see.

00:36:10.520 --> 00:36:13.670
I have the camera
and the button, OK.

00:36:13.670 --> 00:36:15.420
And it's running.

00:36:15.420 --> 00:36:18.390
So I hit the button down
it changes the internet.

00:36:18.390 --> 00:36:20.550
And then the internet
changes the thing.

00:36:20.550 --> 00:36:22.100
So now we've made the full loop.

00:36:22.100 --> 00:36:24.626
And what's kind of cool is
I can go to the internet

00:36:24.626 --> 00:36:26.000
and I can just
change it directly

00:36:26.000 --> 00:36:31.304
all hacker like, and it changes
the thing from our web browser.

00:36:31.304 --> 00:36:34.776
[APPLAUSE]

00:36:38.250 --> 00:36:41.100
So we have now done our
Hello World minimal Internet

00:36:41.100 --> 00:36:42.450
Of Things thing.

00:36:46.630 --> 00:36:49.426
That means it is time
for silly demos, right?

00:36:49.426 --> 00:36:51.490
Let's do some silly demos.

00:36:51.490 --> 00:36:54.420
This code very saw,
we built something,

00:36:54.420 --> 00:36:57.620
OK, silly demos,
sillier than even this

00:36:57.620 --> 00:37:04.180
because-- let me turn you
my Firebase back to up.

00:37:04.180 --> 00:37:07.780
The LED turned off.

00:37:07.780 --> 00:37:09.450
Where was my-- there we go.

00:37:09.450 --> 00:37:12.800
So silly demos, One
thing that's kind of cool

00:37:12.800 --> 00:37:15.840
is if you take a
multiple of these things

00:37:15.840 --> 00:37:16.920
and you combine them.

00:37:16.920 --> 00:37:19.900
So I have maybe prepared
like a cooking show,

00:37:19.900 --> 00:37:22.620
another one of these up here.

00:37:22.620 --> 00:37:24.810
I can actually use
it like a telegraph,

00:37:24.810 --> 00:37:28.400
like the most overly complicated
silly telegraph ever made,

00:37:28.400 --> 00:37:29.750
which is great.

00:37:29.750 --> 00:37:31.850
If someone wants to press
it from the audience

00:37:31.850 --> 00:37:33.660
you can press that
every once in while.

00:37:33.660 --> 00:37:37.865
We can actually communicate
in Morse code, which is cool

00:37:37.865 --> 00:37:39.740
because we're going
through a server in Texas

00:37:39.740 --> 00:37:41.225
right now, which is awesome.

00:37:41.225 --> 00:37:43.280
We're actually on two
different Wi-Fi networks.

00:37:43.280 --> 00:37:45.247
That is actually on a
cellular phone tether

00:37:45.247 --> 00:37:47.080
and this is actually
on the conference Wi-Fi

00:37:47.080 --> 00:37:49.909
and it's still really
fast, which is really cool.

00:37:49.909 --> 00:37:51.450
And you can do more
things with this.

00:37:51.450 --> 00:37:54.130
You can interact with anything
that supports a Firebase

00:37:54.130 --> 00:37:57.420
client like my slide deck.

00:37:57.420 --> 00:37:59.400
So if someone would
hit the button

00:37:59.400 --> 00:38:04.374
you can do things like
hopefully Rickroll my slides.

00:38:04.374 --> 00:38:05.790
But it did not
seem to work today.

00:38:05.790 --> 00:38:07.490
Rick did not want to come out.

00:38:07.490 --> 00:38:09.700
Oh there it goes, it took
a little while to load.

00:38:09.700 --> 00:38:11.116
So you can do
things like Rickroll

00:38:11.116 --> 00:38:14.355
your slide deck from the
internet, which is awesome.

00:38:16.525 --> 00:38:18.650
And here's another example
of something you can do,

00:38:18.650 --> 00:38:20.920
another silly demo.

00:38:20.920 --> 00:38:22.430
Remember those potentiometers?

00:38:22.430 --> 00:38:23.660
I grabbed a couple
and I'm like, "What's

00:38:23.660 --> 00:38:25.868
the simplest thing I can
build with a potentiometer?"

00:38:25.868 --> 00:38:27.560
I built an Etch a Sketch.

00:38:27.560 --> 00:38:31.910
So I can actually draw on my
little JavaScript white board.

00:38:31.910 --> 00:38:35.420
And what's cool about this is I
think this is 60 lines of code

00:38:35.420 --> 00:38:38.260
and that white board is
under 100 lines of code also.

00:38:38.260 --> 00:38:40.520
So these are things you
can seriously hack out

00:38:40.520 --> 00:38:44.650
in under an hour, which is
great because once you build

00:38:44.650 --> 00:38:47.280
your thing, you can go take
it into the world, put it

00:38:47.280 --> 00:38:48.820
in somebody's
hands, and then you

00:38:48.820 --> 00:38:51.470
can start to do user
testing and find out

00:38:51.470 --> 00:38:54.340
the viability of your project
before you have someone crank

00:38:54.340 --> 00:38:57.580
out 1,000 PCBs for you,
which costs money and is

00:38:57.580 --> 00:38:58.130
hard to undo.

00:39:01.430 --> 00:39:03.770
OK, so we have some silly demos.

00:39:06.470 --> 00:39:09.790
So some parting words while
people play with the button.

00:39:09.790 --> 00:39:13.190
First of all, wasn't that easy?

00:39:13.190 --> 00:39:15.670
Was that easier than
you thought it would be?

00:39:15.670 --> 00:39:18.662
OK, that's what I like to
hear, because this stuff should

00:39:18.662 --> 00:39:19.870
be easy and it should be fun.

00:39:19.870 --> 00:39:22.790
And this is the most fun
way I've found to do it.

00:39:22.790 --> 00:39:25.070
The other piece of advice
is there's always new boards

00:39:25.070 --> 00:39:27.180
and new cool things coming out.

00:39:27.180 --> 00:39:29.930
And one thing I found that
helps me a lot to kind of focus

00:39:29.930 --> 00:39:33.250
and actually get products done
is I let the projects guide me.

00:39:33.250 --> 00:39:36.080
So when a new board comes
out, I'll note that it's there

00:39:36.080 --> 00:39:38.629
and I'll wait to buy it later.

00:39:38.629 --> 00:39:40.670
So it doesn't sit there
I myself and gather dust.

00:39:40.670 --> 00:39:42.380
Instead, I think
of a cool project

00:39:42.380 --> 00:39:44.800
I want to build, like
an Etch a Sketch,

00:39:44.800 --> 00:39:47.420
and then I make a shopping
list and let that guide me.

00:39:47.420 --> 00:39:49.930
I let that determine which
board I'm going to use.

00:39:49.930 --> 00:39:51.519
When in doubt, I
usually use boards

00:39:51.519 --> 00:39:53.310
I already have lying
around, because rarely

00:39:53.310 --> 00:39:55.450
do you need the newest,
shiniest, fastest board,

00:39:55.450 --> 00:39:57.547
especially for
projects like these.

00:39:57.547 --> 00:39:59.380
The next thing I like
to encourage you to do

00:39:59.380 --> 00:40:01.260
is experiment.

00:40:01.260 --> 00:40:03.314
Do silly things, try them
out especially if you

00:40:03.314 --> 00:40:04.480
have the parts lying around.

00:40:04.480 --> 00:40:05.980
Just throw them together
and see what happens.

00:40:05.980 --> 00:40:07.855
And don't be too afraid
about things breaking

00:40:07.855 --> 00:40:09.852
or about things
catching on fire, which

00:40:09.852 --> 00:40:11.060
is kind of into the next one.

00:40:11.060 --> 00:40:13.760
While you do this
kind of hacking things

00:40:13.760 --> 00:40:14.852
are going to break.

00:40:14.852 --> 00:40:17.310
You are going to discover the
magic blue smoke it that when

00:40:17.310 --> 00:40:19.360
it comes out stuff
stops working.

00:40:19.360 --> 00:40:21.440
It doesn't go back in.

00:40:21.440 --> 00:40:22.195
Celebrate that.

00:40:22.195 --> 00:40:23.070
It's going to happen.

00:40:23.070 --> 00:40:23.770
It's OK.

00:40:23.770 --> 00:40:24.790
Learn from it.

00:40:24.790 --> 00:40:27.610
And try not to burn up your
next board the same way.

00:40:27.610 --> 00:40:31.750
As it turns out motors, when
they spin they generate power.

00:40:31.750 --> 00:40:34.620
Whoah, I didn't ever think
of that, but it makes sense.

00:40:34.620 --> 00:40:36.150
Now I need a new board.

00:40:36.150 --> 00:40:36.650
That's OK.

00:40:39.520 --> 00:40:42.610
Oh yeah, finally now,
google cool stuff.

00:40:42.610 --> 00:40:45.990
And almost all of you have at
least one board to play with.

00:40:45.990 --> 00:40:48.270
So go build some cool
stuff and tell us about it.

00:40:48.270 --> 00:40:49.057
Show it to us.

00:40:49.057 --> 00:40:50.640
Get out there on the
internet and they

00:40:50.640 --> 00:40:52.556
share the things you're
building, because it's

00:40:52.556 --> 00:40:55.290
such a great community of makers
right now which is so much fun.

00:40:55.290 --> 00:40:58.150
It's a great time to do this.

00:40:58.150 --> 00:41:00.180
So thank you.

00:41:00.180 --> 00:41:00.941
That's it.

00:41:10.270 --> 00:41:13.630
And now we have almost over
15 minutes for questions.

00:41:13.630 --> 00:41:16.120
There are actually mics around
if you're present and would

00:41:16.120 --> 00:41:17.150
like to ask a questions.

00:41:17.150 --> 00:41:19.316
Otherwise, I'm going to
open the floor to questions.

00:41:23.158 --> 00:41:25.000
No questions from anyone?

00:41:25.000 --> 00:41:26.222
There's a question.

00:41:31.420 --> 00:41:32.820
So the question
was about where I

00:41:32.820 --> 00:41:34.740
buy my stuff, my
sensors, my components,

00:41:34.740 --> 00:41:36.010
and all that kind of stuff.

00:41:36.010 --> 00:41:38.430
There's a whole bunch
out there like DFRobot.

00:41:38.430 --> 00:41:42.320
But I think my favorite
one is Adafruit.

00:41:42.320 --> 00:41:44.330
Adafruit.com is awesome
because not only do they

00:41:44.330 --> 00:41:48.220
make great stuff but like
Johnny-Five, the documentation

00:41:48.220 --> 00:41:48.750
is awesome.

00:41:48.750 --> 00:41:51.440
They have this whole Adafruit
learning system and tons

00:41:51.440 --> 00:41:53.490
of other social media
and videos out there

00:41:53.490 --> 00:41:55.270
that help you build
all this stuff

00:41:55.270 --> 00:41:57.580
and make it a lot less
intimidating than reading

00:41:57.580 --> 00:41:58.160
spec sheets.

00:41:58.160 --> 00:41:59.230
Although they have
the datasheets, too.

00:41:59.230 --> 00:42:01.930
They're actually very good about
linking to those docs, too.

00:42:01.930 --> 00:42:06.420
So they make it easy and
fun which is awesome.

00:42:06.420 --> 00:42:08.440
AUDIENCE: Two questions.

00:42:08.440 --> 00:42:12.630
First one is, looking
at the simple schematic

00:42:12.630 --> 00:42:15.760
you had with the pull to
ground and so forth, I

00:42:15.760 --> 00:42:17.860
spent an hour not knowing that.

00:42:17.860 --> 00:42:20.430
For those of us who
aren't EEs where can we

00:42:20.430 --> 00:42:24.370
learn easy simple stuff like
that that we need to know

00:42:24.370 --> 00:42:25.620
to make these simple circuits?

00:42:25.620 --> 00:42:27.744
JEN TONG: So where can you
learn the minimal amount

00:42:27.744 --> 00:42:29.684
of electrical
engineering to get by?

00:42:29.684 --> 00:42:31.100
Honestly the best
place I've found

00:42:31.100 --> 00:42:33.030
is the Johnny-Five
documentation.

00:42:33.030 --> 00:42:34.960
So I either find the
Johnny-Five documentation

00:42:34.960 --> 00:42:38.110
or if it's something
more sophisticated--

00:42:38.110 --> 00:42:39.660
Adafruit with their
components there

00:42:39.660 --> 00:42:41.618
are a lot of tutorials
that go along with them.

00:42:41.618 --> 00:42:42.845
They go into great detail.

00:42:42.845 --> 00:42:44.220
I'm like, "Why do
you need to put

00:42:44.220 --> 00:42:46.280
a capacitor across
power and ground

00:42:46.280 --> 00:42:47.399
on your big LED projects?"

00:42:47.399 --> 00:42:48.940
And they explain
this in great detail

00:42:48.940 --> 00:42:50.757
and they back it up with videos.

00:42:50.757 --> 00:42:52.340
Beyond that, if
you're doing something

00:42:52.340 --> 00:42:54.350
more esoteric or a
little more challenging

00:42:54.350 --> 00:42:57.280
where you need to go a little
deeper into stuff, YouTube,

00:42:57.280 --> 00:42:59.780
because you actually see
people putting it together

00:42:59.780 --> 00:43:02.460
under the camera,
which is a long way.

00:43:02.460 --> 00:43:05.920
It's a lot more than just
pictures or schematics.

00:43:05.920 --> 00:43:08.370
They usually explain it while
they're building it, too.

00:43:08.370 --> 00:43:09.745
AUDIENCE: And the
second question

00:43:09.745 --> 00:43:12.470
is this is great to see
with Arduinos and Raspberry

00:43:12.470 --> 00:43:16.450
Pis and all of these components.

00:43:16.450 --> 00:43:19.910
What about the components that
we have in our tool boxes?

00:43:19.910 --> 00:43:21.750
What about what
about our Edison,

00:43:21.750 --> 00:43:24.240
what about Brillo and Weave?

00:43:24.240 --> 00:43:28.530
How do we map what you just
showed us to all of that?

00:43:28.530 --> 00:43:29.900
JEN TONG: Great question.

00:43:29.900 --> 00:43:31.899
One thing that's really
cool about Johnny-Five's

00:43:31.899 --> 00:43:34.260
architecture is they
decoupled all the board

00:43:34.260 --> 00:43:40.964
logic from the abstracted
center interfaces.

00:43:40.964 --> 00:43:42.880
That means if I go to
the official Johnny-Five

00:43:42.880 --> 00:43:44.796
documentation, which is
now on johnny-five.io,

00:43:44.796 --> 00:43:48.500
which is pretty, you can see
pictures of all the boards it

00:43:48.500 --> 00:43:49.720
works with.

00:43:49.720 --> 00:43:51.700
And I'm pretty sure
the Edison is in there.

00:43:51.700 --> 00:43:52.200
There it is.

00:43:52.200 --> 00:43:54.040
There's the Edison.

00:43:54.040 --> 00:43:57.197
And so a lot different
boards are in there.

00:43:57.197 --> 00:43:58.780
I'm not sure the
other one is in there

00:43:58.780 --> 00:44:01.030
because I forgot what the
name of the other board was.

00:44:01.030 --> 00:44:03.530
But I'm not as familiar
with that board.

00:44:03.530 --> 00:44:06.780
So I'll leave that as an
exercise to all of you.

00:44:06.780 --> 00:44:07.280
DragonBoard?

00:44:07.280 --> 00:44:08.529
I don't know if it's in there.

00:44:08.529 --> 00:44:10.310
I can't search the
page with text.

00:44:10.310 --> 00:44:13.830
But look around and if
Johnny-Five does not work,

00:44:13.830 --> 00:44:15.860
I can guarantee you
there's some other Firmata

00:44:15.860 --> 00:44:17.787
library that works.

00:44:17.787 --> 00:44:19.370
Every time I've
looked, like "I wonder

00:44:19.370 --> 00:44:20.790
if there's a Firmata
library for Ruby that

00:44:20.790 --> 00:44:21.950
has good community support."

00:44:21.950 --> 00:44:23.616
And there's always
more than one option,

00:44:23.616 --> 00:44:25.140
which is great
because then I can

00:44:25.140 --> 00:44:27.658
program in Ruby build the stuff
which is fun sometimes, too.

00:44:30.410 --> 00:44:31.710
Any other questions?

00:44:31.710 --> 00:44:33.356
I see one.

00:44:33.356 --> 00:44:35.330
How come when you
plugged in the LED

00:44:35.330 --> 00:44:37.920
it didn't short
without the resistor,

00:44:37.920 --> 00:44:40.530
because you connected
it straight to ground?

00:44:40.530 --> 00:44:42.200
Wouldn't there be too
much current which

00:44:42.200 --> 00:44:44.600
would destroy the LED bulb?

00:44:44.600 --> 00:44:48.120
JEN TONG: So the question was,
why did the LED not get angry?

00:44:48.120 --> 00:44:51.140
I put five volts across the
LED and I kind of did a trick

00:44:51.140 --> 00:44:54.630
because now LEDs come
in different colors,

00:44:54.630 --> 00:44:56.840
as one of the kind of
the nasty complexities,

00:44:56.840 --> 00:45:00.730
is different colors be they
yellow or red or blue or green,

00:45:00.730 --> 00:45:02.267
have different
ranges of voltages

00:45:02.267 --> 00:45:03.350
they're willing to accept.

00:45:03.350 --> 00:45:05.840
And one pitfall,
just the prevent you

00:45:05.840 --> 00:45:08.380
from your first fire
incident, is five volts

00:45:08.380 --> 00:45:12.340
Arduino Uno and a red volt LED
do not get along like that.

00:45:12.340 --> 00:45:14.570
The red one will
light up briefly

00:45:14.570 --> 00:45:16.850
and then will never
light up again.

00:45:16.850 --> 00:45:20.410
That's because the maximum
voltage is less than five.

00:45:20.410 --> 00:45:22.550
So what you can do is you
can take that resistor

00:45:22.550 --> 00:45:24.450
and you just put them
in line together.

00:45:24.450 --> 00:45:27.120
So you connect, for
example, the LED

00:45:27.120 --> 00:45:30.580
to ground or to the digital
pin with a resistor in line.

00:45:30.580 --> 00:45:33.070
I use a yellow LED because
it will accept five volts

00:45:33.070 --> 00:45:34.410
without catching on fire.

00:45:34.410 --> 00:45:36.430
And it was easier
to do for the talk.

00:45:36.430 --> 00:45:37.222
But great question.

00:45:37.222 --> 00:45:39.388
Yes, the components all
have their own little quirks

00:45:39.388 --> 00:45:41.840
and things as simple as color
can actually change a lot.

00:45:45.740 --> 00:45:47.370
AUDIENCE: One more
question, you say

00:45:47.370 --> 00:45:50.010
that the fan
generates power, does

00:45:50.010 --> 00:45:52.880
that have any effect
on your circuit?

00:45:52.880 --> 00:45:54.910
JEN TONG: So I briefly
mentioned that one

00:45:54.910 --> 00:45:57.201
of the ways I discovered,
when I blew up a board, was I

00:45:57.201 --> 00:45:58.726
plugged a motor
directly into it.

00:45:58.726 --> 00:46:01.100
And the motor was small enough
so the current draw didn't

00:46:01.100 --> 00:46:02.500
burn out the board,
which can also do it.

00:46:02.500 --> 00:46:04.499
That is why you usually
want to use a transistor

00:46:04.499 --> 00:46:05.650
to move a motor.

00:46:05.650 --> 00:46:09.020
But what happened is that
the motor was spinning

00:46:09.020 --> 00:46:10.960
and there was a
load on the motor.

00:46:10.960 --> 00:46:13.390
So when I stopped sending
electricity to the motor,

00:46:13.390 --> 00:46:14.390
the motor kept spinning.

00:46:14.390 --> 00:46:16.598
And so it's called I think
phantom power or something

00:46:16.598 --> 00:46:17.210
like that.

00:46:17.210 --> 00:46:19.287
What happened is when
a motor is spinning

00:46:19.287 --> 00:46:20.870
and it doesn't have
electricity coming

00:46:20.870 --> 00:46:22.550
in it becomes a generator.

00:46:22.550 --> 00:46:25.940
So it started feeding
electricity back into my pins

00:46:25.940 --> 00:46:28.532
and then it burned out my
board, which I've actually done

00:46:28.532 --> 00:46:30.990
on Arduino before just to see
if it would burn it up and it

00:46:30.990 --> 00:46:31.656
actually didn't.

00:46:31.656 --> 00:46:34.930
The Arduino Uno did fine even
with tiny motor's spinning

00:46:34.930 --> 00:46:35.727
which was cool.

00:46:35.727 --> 00:46:37.810
It's like, "I'm going to
try and break this thing.

00:46:37.810 --> 00:46:38.310
I can't.

00:46:38.310 --> 00:46:39.224
Yeah."

00:46:39.224 --> 00:46:41.140
But that's just something
else to be aware of.

00:46:41.140 --> 00:46:44.350
You can use transistors
or you can use a diode.

00:46:44.350 --> 00:46:46.584
The diagrams all
over the internet

00:46:46.584 --> 00:46:48.000
will give you that
particular tip.

00:46:51.410 --> 00:46:52.074
Hello.

00:46:52.074 --> 00:46:54.740
AUDIENCE: Is it possible to make
that work without the Raspberry

00:46:54.740 --> 00:46:57.692
Pi and use a Wi-Fi
shield or something?

00:46:57.692 --> 00:46:59.150
JEN TONG: Is it
possible to do this

00:46:59.150 --> 00:47:01.900
with cutting the Raspberry Pi
out and just doing an Arduino

00:47:01.900 --> 00:47:02.590
shield?

00:47:02.590 --> 00:47:04.690
And the answer is kind
of, so technically yes.

00:47:04.690 --> 00:47:07.470
You can build all this
whole thing only in Arduino

00:47:07.470 --> 00:47:09.767
and there are libraries
to do the Wi-Fi.

00:47:09.767 --> 00:47:11.350
You might need a
more powerful Arduino

00:47:11.350 --> 00:47:14.230
to do the TLS negotiation
before it times out.

00:47:14.230 --> 00:47:18.310
You can technically do
it, but like I said,

00:47:18.310 --> 00:47:19.730
when you're coding
right on metal

00:47:19.730 --> 00:47:21.479
you lose things that
you're used to having

00:47:21.479 --> 00:47:22.650
like an internet stack.

00:47:22.650 --> 00:47:25.210
So you're actually building
the packets by hand each time,

00:47:25.210 --> 00:47:27.251
whether you're doing it
or a library is doing it.

00:47:27.251 --> 00:47:30.010
You also don't really
have threading.

00:47:30.010 --> 00:47:35.010
So you have to wait for that
data to come on the wire.

00:47:35.010 --> 00:47:38.710
So, you end up diving way too
deep into protocols and way

00:47:38.710 --> 00:47:41.150
too deep on the low level stuff.

00:47:41.150 --> 00:47:41.900
Why do that?

00:47:41.900 --> 00:47:44.150
Operating systems already
solved that a long time ago.

00:47:44.150 --> 00:47:45.437
Take advantage of those.

00:47:45.437 --> 00:47:47.770
Then later, this is great for
building one of something,

00:47:47.770 --> 00:47:50.430
but when you go into production
and you're Kickstarter-funded,

00:47:50.430 --> 00:47:53.420
and you're super-successful,
and you need to build 1,000,

00:47:53.420 --> 00:47:56.129
that's when you worry
about that part,

00:47:56.129 --> 00:47:58.170
because then you can save
tons of power and stuff

00:47:58.170 --> 00:47:58.878
and it's awesome.

00:48:03.170 --> 00:48:05.740
So one more question
coming around.

00:48:05.740 --> 00:48:07.182
AUDIENCE: You
mentioned some word

00:48:07.182 --> 00:48:09.515
that I didn't hear in regards
to Johnny-Five like chroma

00:48:09.515 --> 00:48:12.070
language or something.

00:48:12.070 --> 00:48:15.140
So what is Johnny-Five and
what is the name of its Ruby

00:48:15.140 --> 00:48:16.840
counterpart that you mentioned?

00:48:16.840 --> 00:48:18.390
JEN TONG: A Ruby counterpart?

00:48:18.390 --> 00:48:22.830
Yes so there are a whole bunch
of different Firmata libraries

00:48:22.830 --> 00:48:25.912
you can actually use web
search for a Firmata library.

00:48:25.912 --> 00:48:27.870
AUDIENCE: I don't know
what word you're saying.

00:48:27.870 --> 00:48:28.315
JEN TONG: Firmata.

00:48:28.315 --> 00:48:29.790
This is the word called Firmata.

00:48:29.790 --> 00:48:31.373
I'll just show you
Firmata real quick.

00:48:31.373 --> 00:48:33.870
We actually have
time to show you.

00:48:33.870 --> 00:48:35.680
So when I first started
doing electronics

00:48:35.680 --> 00:48:39.817
and I wanted to do a computer
attached to an Arduino,

00:48:39.817 --> 00:48:41.650
I was like "I'm going
to build this protocol

00:48:41.650 --> 00:48:43.185
language for moving
this stuff around

00:48:43.185 --> 00:48:45.518
so I can just control it from
a higher level programming

00:48:45.518 --> 00:48:47.600
language on the computer side."

00:48:47.600 --> 00:48:50.046
And then I did some searching
I started building it,

00:48:50.046 --> 00:48:52.420
and about halfway through I
realized that not only had it

00:48:52.420 --> 00:48:54.740
already been written,
but it is packaged

00:48:54.740 --> 00:48:57.270
with the Arduino thing.

00:48:57.270 --> 00:49:00.427
So the Arduino IDE has a section
under samples called Firmata.

00:49:00.427 --> 00:49:02.510
And there are a whole bunch
of different Firmatas.

00:49:02.510 --> 00:49:05.580
The standard Firmata
is the standard one.

00:49:05.580 --> 00:49:07.960
And you open it up
and it's a sketch.

00:49:07.960 --> 00:49:09.750
And it's a very
mature protocol that's

00:49:09.750 --> 00:49:11.070
been around for a long time.

00:49:11.070 --> 00:49:14.310
It's very polished, super-easy
to understand, and super-easy

00:49:14.310 --> 00:49:15.450
to extend.

00:49:15.450 --> 00:49:18.150
And you can just flash
your board with it.

00:49:21.210 --> 00:49:22.740
It's uploading right now.

00:49:22.740 --> 00:49:25.156
And it's not working because
Johnny-Five is still running.

00:49:28.970 --> 00:49:31.265
Yeah, and so once you get
Firmata on your board, which

00:49:31.265 --> 00:49:33.300
you can just use the
Arduino IDE to do,

00:49:33.300 --> 00:49:36.260
then you can go find a library.

00:49:36.260 --> 00:49:39.390
You just search for
language and Firmata.

00:49:39.390 --> 00:49:42.220
And Arduino Firmata on Ruby.

00:49:42.220 --> 00:49:44.830
It's another beautiful library
that I've used a little bit

00:49:44.830 --> 00:49:47.719
and it worked really well.

00:49:47.719 --> 00:49:49.760
And what's cool is you
can go back to Johnny-Five

00:49:49.760 --> 00:49:53.010
and use their pictures and then
just translate the code over

00:49:53.010 --> 00:49:54.220
to the other libraries.

00:49:57.040 --> 00:49:59.240
Yes, Firmata is the word.

00:50:04.160 --> 00:50:06.190
Any other questions?

00:50:06.190 --> 00:50:06.690
OK.

00:50:06.690 --> 00:50:08.170
Well, if you ever
have any questions

00:50:08.170 --> 00:50:09.753
or you want to show
me something cool,

00:50:09.753 --> 00:50:11.647
feel free to grab
me or tweet at me

00:50:11.647 --> 00:50:12.980
or whatever whenever you see me.

00:50:12.980 --> 00:50:13.890
I'm around sometimes.

00:50:13.890 --> 00:50:16.630
I'd love to see what you
all are up to, and thanks

00:50:16.630 --> 00:50:18.740
for coming to my talk.

