WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.660
Paxos is a really fundamental algorithm in distributed systems. It was invented over a decade ago.

00:00:05.960 --> 00:00:07.160
by Leslie Lamport

00:00:07.480 --> 00:00:13.320
who is very famous - won the Turing Award which is like the computer science equivalent to the Nobel Prize.

00:00:14.269 --> 00:00:18.840
And he has had tons of contributions this is really
one of the most important ones he did

00:00:18.840 --> 00:00:21.840
during his time doing research

00:00:24.000 --> 00:00:28.540
It's for getting computers who can talk to
each other to agree on something so

00:00:28.540 --> 00:00:33.610
computers just like your computer at  home
they sometimes fail sometimes the

00:00:33.610 --> 00:00:38.390
network gets cut off and yet we still
need to have a reliable system over that

00:00:38.390 --> 00:00:42.690
so for example with your bank if you
transferred money from one person to

00:00:42.690 --> 00:00:46.600
another and then the money kind of when
are your account will never arrived at

00:00:46.600 --> 00:00:49.210
the other account because a computer somewhere had failed

00:00:49.210 --> 00:00:53.590
you wouldn't be very happy about it so we need to be
able to reliably reach agreement between

00:00:53.590 --> 00:01:00.550
machines even though they're silly and they
fail and they break and networks fail. Paxos has

00:01:00.550 --> 00:01:06.220
two kind of main phases and the key thing to Paxos
is in each of these phases you have to

00:01:06.220 --> 00:01:10.670
have the majority of nodes coming to an
agreement before we can move on so that

00:01:10.670 --> 00:01:15.360
means in a system of 5 nodes you need
three nodes to be in agreement before we

00:01:15.360 --> 00:01:19.830
can move on - so its democracy right - yes absolutely
and its super useful because it means that if

00:01:19.830 --> 00:01:24.140
some of the nodes are down you just carry on
without them and that's absolutely fine

00:01:24.140 --> 00:01:29.430
when they come back up if they come back
up we can help them along and tell them about what happened. Say

00:01:29.430 --> 00:01:33.890
you're a client for example you're a person
who wants to get a lock and it's super

00:01:33.890 --> 00:01:37.400
important for the system that only one person can
ever get this lock we might have a

00:01:37.400 --> 00:01:45.850
system here of five nodes and we might have
a client over here let's call that alice and she wishes to procure some

00:01:45.850 --> 00:01:53.280
super useful lock and we have to make sure
that only one person can ever have this lock. so she asks the nearest

00:01:53.280 --> 00:01:58.060
node hey can you get a hold of this lock for
me. In this system we have five nodes and

00:01:58.060 --> 00:02:03.180
so we need three of them at each stage to
agree before we can move on and there are two

00:02:03.180 --> 00:02:07.490
main stages there is the promised stage and
there's the commit stage the node's

00:02:07.490 --> 00:02:09.679
gonna generate a unique ID we'll say

00:02:09.679 --> 00:02:13.560
their ID is 13 and they're going to
contact every other node and say hey

00:02:13.560 --> 00:02:17.849
guys I want to make some progress on
this will you agreed to let me do that? And

00:02:17.849 --> 00:02:22.400
they say yup that's absolutely fine and
they remember that they've agreed so I'll call it

00:02:22.400 --> 00:02:27.909
P for promise that they'll remember that
they promised 13 would be the node that's

00:02:27.909 --> 00:02:33.359
in charge of getting stuff done okay and
they're all happily - move freely

00:02:33.359 --> 00:02:38.060
they've all  happily agreed and  so we can
move on to the next stage. In the next

00:02:38.060 --> 00:02:44.280
stage node 3 on behalf of alice is gonna
contact everybody and say hey everybody

00:02:44.280 --> 00:02:50.790
can you commit ID 13 the fact let's
say alice is the person is going to have

00:02:50.790 --> 00:02:57.909
the lock and all of these guys remember
that it is alice. I'll just write a little "a" for each of them who has it, and they also

00:02:57.909 --> 00:03:04.400
remember that it was 13 because the  ID and they'll
respond and say okay and now

00:03:04.400 --> 00:03:10.060
node 3 will say alice here you go you can have the lock you can go on do
whatever you want to do and regardless  of

00:03:10.060 --> 00:03:13.579
what happens in this system in terms of
failures we'll never give anybody else

00:03:13.579 --> 00:03:21.209
that lock ok that's entirely yours - so
just give an example this lock is maybe

00:03:21.209 --> 00:03:30.220
access to her accounts or if it were banking or something like that - yup yeah it could be access to an account it could be for example the ability to write to a file

00:03:30.220 --> 00:03:36.280
so often in code we have regions of code
where we want to ensure that only one

00:03:36.280 --> 00:03:40.769
machine person only one person is
ever executing that so maybe they're editing

00:03:40.769 --> 00:03:45.650
a file and you don't want multiple people trying to do this and the
other thing is like the bank account you

00:03:45.650 --> 00:03:48.900
might want to kind of have the lock you
know I'm the only person who can change this amount

00:03:48.900 --> 00:03:55.199
right now and then when
you're finished give that up lots of super useful and they're

00:03:55.199 --> 00:03:59.949
really kind of widely used abstraction so a
simple thing like this can then be used

00:03:59.949 --> 00:04:08.069
loads within systems so you know here alice is a person but often alice would
be you know a device thats operating on behalf of a person. lets have a

00:04:08.069 --> 00:04:12.509
look at what happens if one of these
machines was to fail for example actually

00:04:12.509 --> 00:04:21.889
let's make it worse let's make two machines fail so here comes alice she wants to procure this lock she talks to node 5  and says

00:04:21.889 --> 00:04:24.870
hey can you get this lock for me

00:04:24.870 --> 00:04:30.270
so node 5 is gonna send out a message to
everyone saying say their IDs 15

00:04:30.270 --> 00:04:37.550
we promise to let me in with ID 15 these
guys will respond and it will respond to itself saying

00:04:37.550 --> 00:04:46.180
that's okay you can go ahead with that and they'll remember they promised 15 now this is now this is a system of 5

00:04:46.180 --> 00:04:50.440
nodes as I said we need a majority and we
have a majority here because we've got

00:04:50.440 --> 00:04:57.419
node 1 node 4 and node 5 that's 3 nodes so despite the fact that these two nodes are completely  offline that's

00:04:57.419 --> 00:05:02.750
that's fine we can carry on five can then send
out a message to everyone again saying

00:05:02.750 --> 00:05:08.760
can you commit the fact that fifteen that's
gonna be Alice and then all of these

00:05:08.760 --> 00:05:11.449
guys will remember its Alice who got the lock

00:05:11.449 --> 00:05:14.719
with ID 15 now in the future

00:05:14.719 --> 00:05:18.440
these nodes might come back up hopefully you know sent for an engineer and they've come

00:05:18.440 --> 00:05:26.000
fix the problem for you and nodes 2 and 3 they've recovered don't know anything about what's going on so

00:05:26.000 --> 00:05:27.669
maybe someone else comes along

00:05:27.669 --> 00:05:34.770
say to 2 hey i'm bob and I would like that lock
please node two is gonna send a message

00:05:34.770 --> 00:05:37.770
to everyone saying I would like to be in charge

00:05:38.580 --> 00:05:44.760
for 12 and each of these from before have
remembered that the last person they've promised

00:05:44.760 --> 00:05:50.289
to had ID 15. Once you've made a promise, you can only break your promise to someone

00:05:50.289 --> 00:05:55.560
with a higher ID than the ID you
promised so these numbers go up and up

00:05:55.560 --> 00:06:00.900
over time so in this case 12 was smaller
than 15 so these guys are gonna say no

00:06:00.900 --> 00:06:04.270
actually three will say yes because they don't
know what's going on with the system

00:06:04.270 --> 00:06:14.599
beforehand so they'll say 12 and everyone else is going to say no. So in this case number 2 is going to have another go, try again, and they are going to generate

00:06:14.599 --> 00:06:18.409
a new ID and they're gonna make sure that their
ID is bigger than any of the IDs they saw earlier. Say its

00:06:22.150 --> 00:06:30.860
gonna be 22 now and try again now saying to everyone hey its 22 can I be in charge of what's going on. and 22 is higher than 15

00:06:30.860 --> 00:06:37.180
they're actually all gonna come back and say yeah that's ok but the really important stage here is that if they

00:06:37.180 --> 00:06:43.780
have committed a value before when they say
okay they'll include what the value was so

00:06:43.780 --> 00:06:50.960
in this case it was node 1 4 and 3 when
they say okay they will also say that

00:06:50.960 --> 00:06:57.380
previously it was agreed that Alice
had the lock with ID 15 and so that will be this guy,

00:06:57.380 --> 00:07:00.900
this guy, and this guy will all say that. - So is Alice stuffed at this point?

00:07:01.040 --> 00:07:07.880
Is she stuffed? - (laughs) No, not quite yet. - She will be though (laughs)

00:07:07.880 --> 00:07:09.880
- well its bob that's got the problem here. - Oh ok -

00:07:09.880 --> 00:07:11.880
Because it's Bob that won't be able to get this so - ok -

00:07:12.000 --> 00:07:18.180
even though 2 was trying to operate on Bob's behalf and get this lock, uh Bob the 2 has just found out

00:07:18.180 --> 00:07:24.690
out that actually Alice had already been
agreed so what two will do is instead of

00:07:24.690 --> 00:07:36.260
sending out commit for bob, 2 is actually going to send out a commit for alice to everybody and say commit
with its number which is 22 Alice

00:07:36.260 --> 00:07:36.780
- Ok you've thrown me there. - (laughs)

00:07:36.780 --> 00:07:44.000
so the idea of paxos is that in the end everyone needs

00:07:44.000 --> 00:07:49.590
to find out about what happened so in
this example two and 5 weren't aware of what

00:07:49.590 --> 00:07:54.010
happened in as a side effect of two
trying to do something which was

00:07:54.010 --> 00:07:57.740
conflicting, two has actually found out
about what happened and they've told

00:07:57.740 --> 00:08:02.250
everybody so five after they recovered
didn't have a clue what was going on and

00:08:02.250 --> 00:08:07.370
now they know actually it was alice that has got the
lock so by going through that extra

00:08:07.370 --> 00:08:11.330
stage before you commit anything we
ensured that bob couldn't have got the

00:08:11.330 --> 00:08:20.150
lock - so the thing about having the higher ID 
was just him trying it on was it or - yes so you - if it

00:08:20.150 --> 00:08:24.449
hadn't been committed if it had just been promised
would he have gotten the lock then? Because he has a

00:08:24.449 --> 00:08:29.009
higher ID or was that - if it had just been
promised he would have been able to yeah, so

00:08:29.009 --> 00:08:34.329
what you basically do is you once you
get a promise from everybody if nobody has

00:08:34.329 --> 00:08:36.519
told you that anything's been committed

00:08:36.519 --> 00:08:41.339
you're free to choose whatever by you want to commit, however if things have gone wrong for

00:08:41.339 --> 00:08:45.880
example maybe the node that was actually trying to
do the commit might have failed midway through

00:08:45.880 --> 00:08:52.579
you might end up getting one person
telling you Alice had it another person saying Bob had it

00:08:52.579 --> 00:08:57.050
and another person saying Charlie had it and the importance of the IDs here is that whoever has

00:08:57.050 --> 00:09:01.920
the highest ID with it that's the
one that you then disseminated everybody

00:09:01.920 --> 00:09:08.060
and say charlie is the man who has the
lock let's have a look at what failure

00:09:08.060 --> 00:09:15.730
midway through might actually look like
this is node 3 and we've got our friend Alice still trying to get

00:09:15.730 --> 00:09:21.360
her get her lock in the system so as before node three's gonna ask everyone to promise.

00:09:21.360 --> 00:09:27.660
with our ID which we will say is 13 and everyone will remember that they promised 13 and respond to say

00:09:27.660 --> 00:09:37.130
okay and then three might message these guys and say commit for Alice in thirteen and then node 3 might fail

00:09:37.130 --> 00:09:46.910
we have to work out what do we do. Did alice ever get that lock? Did alice not get that lock? So the message was sent to nodes 1 and 2 before 3

00:09:46.910 --> 00:09:56.250
failed so these guys are going to agree and send back that these messages won't matter because 3 33 has unfortunately has failed

00:09:56.250 --> 00:10:01.940
so we have to kind of look at this and work out what to do about this so in the

00:10:01.940 --> 00:10:02.709
future

00:10:02.709 --> 00:10:09.199
someone else might come along and try to
get this lock and if say this is 4 trying to

00:10:09.199 --> 00:10:14.089
do this when they gonna send out their promise and they're going to try to send out their commit

00:10:14.089 --> 00:10:18.019
and when they do this they gonna find
out that people have already committed

00:10:18.019 --> 00:10:21.870
alice and therefore they won't give it away again instead of just tell everybody

00:10:21.870 --> 00:10:29.880
that it was alice who was successful - Would there be a majority there though, if there were 4 nodes and 2 of them...? - The interesting

00:10:29.880 --> 00:10:30.950
thing about majorities

00:10:30.950 --> 00:10:41.080
is if you have, say, a set of 5 nodes and if you need 3 for a majority, any majorities will always overlap. So if you ask and if you get

00:10:41.080 --> 00:10:47.100
you get a majority and just one of them says
this thing happened that they could be a

00:10:47.100 --> 00:10:53.960
majority that exists where that happened. So just one person saying something happened is enough. - I see

00:10:53.960 --> 00:10:59.690
because it's committed it must have been a majority at some point - yeah absolutely - got you, ok, and then

00:10:59.690 --> 00:11:06.840
does alive ever find out about that if 3 has died? (laugh) - So paxos itself is just kind of

00:11:06.840 --> 00:11:10.520
really kind of basic idea and you build
systems on top of it, so it is up to the system.

00:11:10.520 --> 00:11:14.740
Um, usually what would happen in this
scenario is alice would try asking

00:11:14.740 --> 00:11:17.850
someone else can you do this for me and find out that it was successful

00:11:18.830 --> 00:11:27.200
- so basically this is, uh yeah, you might implement it in various ways, is that what you are saying? - Yeah yeah absolutely, um, and the big thing as well is this is just

00:11:27.200 --> 00:11:31.810
agreement over a single value but in practice
we want to reach agreement over many

00:11:31.810 --> 00:11:36.630
values we want the value to change over time you know you want Alice to be able to get the lock and

00:11:36.630 --> 00:11:44.060
then return the lock, and because of that, what we use is something called multipaxos, which is like this but multiple times

00:11:44.060 --> 00:11:49.800
basically and the really interesting
insight here is that this took two stages 2 kind of

00:11:49.800 --> 00:11:54.220
round trip times across the network
but the first stage when we were sending

00:11:54.220 --> 00:11:59.600
out these promised messages none it
didn't matter that it was Alice or Bob it didn't

00:11:59.600 --> 00:12:03.980
matter what was going on so what we can
do is we can do this first stage before

00:12:03.980 --> 00:12:09.740
any requests are even there, and by doing that when Alice comes along if the nodes

00:12:09.740 --> 00:12:13.840
have already done the first stage is just one round trip time - basically, they are putting in a bit of

00:12:13.840 --> 00:12:18.670
groundwork - yes - before anyone even asks so if
I had a user here and they wanted

00:12:18.670 --> 00:12:20.210
something would you be alright with that.

00:12:20.210 --> 00:12:25.610
- yeah basically, so when we when we did this for the first time there was no, there

00:12:25.610 --> 00:12:29.090
was no kind of thing that said it was alice when we did that first route,

00:12:29.090 --> 00:12:32.360
so they can basically do that in advance before they even

00:12:32.360 --> 00:12:39.950
know, and then when someone comes along and asks for it, then they then they can get it, but the restriction there would

00:12:39.950 --> 00:12:44.500
be at the moment alice could ask anybody and
they could do it and it would take 2

00:12:44.500 --> 00:12:49.300
kind of phases or 2 round trip times if
you if three kind of did their

00:12:49.300 --> 00:12:54.000
preparation work first then alice would
only be able to go to three, but if they did go to three,

00:12:54.000 --> 00:12:58.959
then it would just take one round trip
time. When we do this bit of work, we call

00:12:58.959 --> 00:13:04.250
this kind of electing a leader so you're
basically saying to one machine you're in

00:13:04.250 --> 00:13:11.310
charge so you can in pretty much any setting
you can say you're gonna be the leader, you're gonna be in charge

00:13:11.310 --> 00:13:16.279
that could be one of the people, one of their machines, one of the servers in the cloud and then

00:13:16.279 --> 00:13:22.279
you send the all the requests to that one and then they distribute it like this. - What is probably one of the

00:13:22.279 --> 00:13:31.329
most common places this is used? -  I would actually say this example is a really good example of where it's used,

00:13:31.329 --> 00:13:37.570
so in big distributor systems it's really important to have this idea of locks so this

00:13:37.570 --> 00:13:41.920
idea that only one person can be doing
certain things at a time we like to

00:13:41.920 --> 00:13:45.810
think that systems are really parallel and we have lots of things going on at once but at

00:13:45.810 --> 00:13:53.029
some point usually we need to say actually only one person is allowed to edit a file at that time only one

00:13:53.029 --> 00:13:58.240
person is allowed the permission to
access this key at that time so locks

00:13:58.240 --> 00:14:02.620
in a distributor system is a really good example of where you might, where you might need something like this

00:14:06.000 --> 00:14:12.519
The problem is that any of these connections if these are all using HTTP then there's no way for

00:14:12.519 --> 00:14:16.339
the browser to verify the data that's
coming back here.

