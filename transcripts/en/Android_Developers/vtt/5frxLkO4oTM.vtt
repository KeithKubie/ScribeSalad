WEBVTT
Kind: captions
Language: en

00:00:02.120 --> 00:00:03.551
Third-party libraries can be 
serious time savers.

00:00:04.983 --> 00:00:06.415
They allow us to do
awesome things on our app

00:00:06.415 --> 00:00:09.180
without having to write any of
the functionality ourselves,

00:00:09.180 --> 00:00:10.850
and that's a pretty
big convenience.

00:00:10.850 --> 00:00:12.710
What's not convenient,
is the code bloat

00:00:12.710 --> 00:00:13.944
that they can come with.

00:00:13.944 --> 00:00:15.540
I'm David East,
and you can easily

00:00:15.540 --> 00:00:17.313
get everything you
need from a library

00:00:17.313 --> 00:00:18.960
without all the code bloat.

00:00:18.960 --> 00:00:20.260
But let's take a step back.

00:00:20.260 --> 00:00:22.580
If you're building a performant
usable mobile app

00:00:22.580 --> 00:00:24.652
with a small team and
likely a small budget,

00:00:24.652 --> 00:00:27.230
chances are that you are 
using a lot of third-party

00:00:27.230 --> 00:00:29.810
Android libraries to help you
with the heavy lifting.

00:00:29.810 --> 00:00:30.980
This is totally fine.

00:00:30.980 --> 00:00:32.260
In fact, it's a good idea.

00:00:32.260 --> 00:00:34.410
Many of these libraries
are heavily tested and

00:00:34.410 --> 00:00:36.565
have proven to handle
the stress of production

00:00:36.565 --> 00:00:37.991
The problem is, though, 
you may

00:00:37.991 --> 00:00:40.330
have to import the entire
library when you're just

00:00:40.330 --> 00:00:41.880
looking to use a subset.

00:00:41.880 --> 00:00:44.220
The result of this
is called code bloat.

00:00:44.220 --> 00:00:46.140
These extra code paths
turn into overhead

00:00:46.140 --> 00:00:47.660
that get shipped with your APK,

00:00:47.660 --> 00:00:49.636
and code bloat is no joke.

00:00:49.636 --> 00:00:51.570
At the simplest level,
it will increase

00:00:51.570 --> 00:00:53.360
the size of your compiled code.

00:00:53.360 --> 00:00:56.100
This inflates the APK
the user has to download.

00:00:56.100 --> 00:01:00.170
Even more worrisome is the
dreaded 65k method limit.

00:01:00.170 --> 00:01:02.460
The Android runtime assigns
a numeric identifier

00:01:02.460 --> 00:01:03.480
to each method.

00:01:03.480 --> 00:01:05.830
This identifier is 16 bits wide.

00:01:05.830 --> 00:01:08.520
So if you have more than 2 of
the 16 methods in your app,

00:01:08.520 --> 00:01:10.010
it's not going to compile.

00:01:10.010 --> 00:01:13.140
The only way around this is
the new MultiDex solution.

00:01:13.140 --> 00:01:15.960
And trust me, you do
not want to do that.

00:01:15.960 --> 00:01:19.340
It's pretty much as much
fun as going to the dentist.

00:01:19.340 --> 00:01:21.880
Fortunately, there is a tool
in the Android tool chain

00:01:21.880 --> 00:01:23.970
that's great for hunting
down un-used code

00:01:23.970 --> 00:01:26.010
and stripping it
from your build.

00:01:26.010 --> 00:01:28.440
Proguard is a tool that
shrinks, optimizes,

00:01:28.440 --> 00:01:31.590
and obfuscates your code by
removing the unused parts.

00:01:31.590 --> 00:01:33.649
It also renames classes,
fields, and methods

00:01:33.649 --> 00:01:35.940
with semantically obscure
names to make it harder

00:01:35.940 --> 00:01:37.600
to reverse engineer your code.

00:01:37.600 --> 00:01:39.820
But, that's for another video.

00:01:39.820 --> 00:01:42.260
And Proguard is a
seriously sweet tool.

00:01:42.260 --> 00:01:44.307
Take a look at the
Google I/O 2015 app.

00:01:44.307 --> 00:01:46.380
It's a great app with
a lot of functionality

00:01:46.380 --> 00:01:48.140
that uses a lot of
shared libraries.

00:01:48.140 --> 00:01:51.270
When doing a release build
without Proguard's code shrinking,

00:01:51.270 --> 00:01:53.720
you end up with about
8.4 megabytes of code.

00:01:53.720 --> 00:01:56.037
With Proguard on, just 4.1.

00:01:56.037 --> 00:01:57.990
And this is especially
awesome because of

00:01:57.990 --> 00:02:00.110
how easy it is to set up
this code shrinking.

00:02:00.110 --> 00:02:01.780
To turn on Proguard
code shrinking,

00:02:01.780 --> 00:02:04.904
simply set Minify Enabled to
true in your Gradle settings.

00:02:04.904 --> 00:02:07.940
Then when you build your app,
it will remove all the unused code

00:02:07.940 --> 00:02:09.440
for you.

00:02:09.440 --> 00:02:11.700
Proguard is not perfect, though.

00:02:11.700 --> 00:02:14.890
While Proguard is great at
identifying most used cases,

00:02:14.890 --> 00:02:17.520
it's not so great sorting
out other situations,

00:02:17.520 --> 00:02:19.192
like code that uses reflection.

00:02:19.192 --> 00:02:21.480
This may end up giving you
some false positives

00:02:21.480 --> 00:02:24.280
where some code is 
removed and some is not,

00:02:24.280 --> 00:02:26.710
which means you'll have to
adjust Proguard settings

00:02:26.710 --> 00:02:28.660
based on what libraries 
you're including.

00:02:28.660 --> 00:02:30.460
Some of them may
require special rules

00:02:30.460 --> 00:02:32.560
to ensure things all work right.

00:02:32.560 --> 00:02:35.140
So do feature you a
favor and take a look

00:02:35.140 --> 00:02:36.610
at the documentation.

00:02:36.610 --> 00:02:39.190
In fact, head over to
developer.android.com and read

00:02:39.190 --> 00:02:40.473
the official Proguard docs.

00:02:40.473 --> 00:02:41.195
Seriously,

00:02:41.195 --> 00:02:42.287
just go read all of it.

00:02:42.287 --> 00:02:44.310
I think it makes for
great bedtime reading.

00:02:44.310 --> 00:02:46.611
And when you're done
reading through all the docs

00:02:46.611 --> 00:02:48.430
or taking your nap,
come back and watch

00:02:48.430 --> 00:02:50.880
the rest of the Android
Performance Patterns videos.

00:02:50.880 --> 00:02:53.600
And don't forget to join our
Google+ community to share

00:02:53.600 --> 00:02:56.080
your Proguard tips
with other developers.

00:02:56.080 --> 00:02:58.700
So sweat the small stuff
but don't freak out.

00:02:58.700 --> 00:03:00.710
And always remember..
perf matters.

