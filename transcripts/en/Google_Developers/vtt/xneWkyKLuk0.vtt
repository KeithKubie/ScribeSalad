WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.280
ANNOUNCER: Ladies and
gentlemen, Stephen Adams.

00:00:02.280 --> 00:00:03.155
STEPHEN ADAMS: Hello.

00:00:05.800 --> 00:00:07.880
Like you said,
I'm Stephen Adams.

00:00:07.880 --> 00:00:10.890
I'm a member of the Dart
team in the Seattle office.

00:00:10.890 --> 00:00:14.240
I work on the Dart JavaScript
compiler and the related

00:00:14.240 --> 00:00:15.910
libraries.

00:00:15.910 --> 00:00:19.680
What I want to achieve here
is to give you a few tools

00:00:19.680 --> 00:00:24.830
for understanding how the
JavaScript code is compiled

00:00:24.830 --> 00:00:27.280
to help you write
what I would like

00:00:27.280 --> 00:00:30.080
to call seaworthy
applications, applications

00:00:30.080 --> 00:00:33.410
that don't have performance
problems when you ship them.

00:00:33.410 --> 00:00:35.810
So first, I'm going to
talk a little bit about how

00:00:35.810 --> 00:00:38.020
we compile Dart to JavaScript.

00:00:38.020 --> 00:00:40.450
And then, what are the
implications of that for how

00:00:40.450 --> 00:00:42.920
you might write your programs?

00:00:42.920 --> 00:00:45.100
So for efficiency
reasons, we want

00:00:45.100 --> 00:00:49.940
to compile Dart types to
primitive JavaScript types

00:00:49.940 --> 00:00:51.070
where possible.

00:00:51.070 --> 00:00:53.630
Like Dart number should
be JavaScript numbers,

00:00:53.630 --> 00:00:57.820
strings to strings, and
lists to JavaScript arrays.

00:01:04.209 --> 00:01:08.280
So this means that we
have to deal with the fact

00:01:08.280 --> 00:01:10.680
that these types not
always quite regular.

00:01:10.680 --> 00:01:12.570
They don't all operate
in the same way.

00:01:12.570 --> 00:01:14.280
So consider this
little program here,

00:01:14.280 --> 00:01:16.480
we've got a call
to the add method.

00:01:16.480 --> 00:01:19.800
If we knew that x was
a JavaScript array,

00:01:19.800 --> 00:01:21.470
we could compile
that, and we want to,

00:01:21.470 --> 00:01:25.740
and we can compile that
to the JavaScript push.

00:01:25.740 --> 00:01:28.510
That's about the best
way of adding something

00:01:28.510 --> 00:01:30.550
to a JavaScript array.

00:01:30.550 --> 00:01:35.100
However, if we were to
run this code on a set,

00:01:35.100 --> 00:01:39.260
all the sets in the core
library are written in Dart,

00:01:39.260 --> 00:01:42.050
and they use Dart
calling conventions.

00:01:42.050 --> 00:01:44.480
So we end up by
calling an add method,

00:01:44.480 --> 00:01:48.430
and we put a little
thing on there, the $1

00:01:48.430 --> 00:01:50.580
to enforce the Dart semantics.

00:01:50.580 --> 00:01:52.902
Unlike JavaScript, in
Dart, if you call a method

00:01:52.902 --> 00:01:54.360
with the wrong
number of arguments,

00:01:54.360 --> 00:01:57.070
you get to no such method error.

00:01:57.070 --> 00:02:00.620
The problem that the
compiler has to solve

00:02:00.620 --> 00:02:02.790
is, what do we do when
both of these things

00:02:02.790 --> 00:02:04.260
can happen at the same time?

00:02:04.260 --> 00:02:06.460
Like any problem in
computer science,

00:02:06.460 --> 00:02:10.229
we can solve it by adding an
extra level of indirection.

00:02:10.229 --> 00:02:14.690
So what we do is we call this
getInterceptor function, which

00:02:14.690 --> 00:02:17.910
returns a method
table for the object.

00:02:17.910 --> 00:02:20.290
And then we call the add
method from the method table.

00:02:22.800 --> 00:02:27.540
The getInterceptor method covers
over all of the irregularity

00:02:27.540 --> 00:02:29.800
in the underlying Dart types.

00:02:29.800 --> 00:02:31.400
And it looks like that.

00:02:31.400 --> 00:02:33.660
The main thing I want to
say about that is it's

00:02:33.660 --> 00:02:38.510
basically a case analysis of
all of the primitive JavaScript

00:02:38.510 --> 00:02:43.780
objects to find their
equivalent Dart methods.

00:02:43.780 --> 00:02:47.830
So it's relatively expensive
to do that case analysis

00:02:47.830 --> 00:02:49.040
all of the time.

00:02:49.040 --> 00:02:51.680
It's not as bad as it looks,
because JavaScript engines

00:02:51.680 --> 00:02:54.630
do pretty well and
optimizing that kind of code.

00:02:54.630 --> 00:03:03.230
They do well because, really,
it's exploiting the JavaScript

00:03:03.230 --> 00:03:05.780
implementation hierarchy.

00:03:05.780 --> 00:03:09.170
But nonetheless, we'd
like to do it less often,

00:03:09.170 --> 00:03:13.460
so we use standard compiler
optimizations, for example,

00:03:13.460 --> 00:03:15.360
hoisting this out of loops.

00:03:15.360 --> 00:03:18.100
But it would be better yet
if we could avoid doing

00:03:18.100 --> 00:03:22.550
this two level dispatch at all.

00:03:22.550 --> 00:03:25.890
So how can we get rid of
the two level dispatch?

00:03:25.890 --> 00:03:28.390
What we do is we
do type inference

00:03:28.390 --> 00:03:33.340
to see if we can discover
when it's not necessary.

00:03:33.340 --> 00:03:36.180
Type inference is an
iterative process,

00:03:36.180 --> 00:03:39.270
a data flow algorithm where we
push types around the program.

00:03:39.270 --> 00:03:41.140
And each point in
the program, we

00:03:41.140 --> 00:03:44.250
accumulate the set of types that
could be used there in the hope

00:03:44.250 --> 00:03:46.070
that that's useful.

00:03:46.070 --> 00:03:49.070
So what are the characteristics
of type inference?

00:03:49.070 --> 00:03:52.920
The first characteristic
is it's intraprocedural.

00:03:52.920 --> 00:03:56.360
This is a whole program
optimization, whole program

00:03:56.360 --> 00:03:58.820
analysis.

00:03:58.820 --> 00:04:06.050
If we were to add to our program
a call to the add method here,

00:04:06.050 --> 00:04:09.820
we would know that the
list is flowing into add.

00:04:09.820 --> 00:04:11.530
So we know that
x is a list which

00:04:11.530 --> 00:04:13.820
is represented by
a JavaScript array,

00:04:13.820 --> 00:04:18.040
we know that the return
value is a JavaScript array,

00:04:18.040 --> 00:04:21.110
and this flows into a.

00:04:21.110 --> 00:04:26.460
Now, if iterative data flow
analysis came to a fixed point

00:04:26.460 --> 00:04:29.620
at this point, and it had
stopped adding new types,

00:04:29.620 --> 00:04:33.920
then what we would know is that
even though we didn't declare

00:04:33.920 --> 00:04:35.480
anything, it's a
JavaScript array,

00:04:35.480 --> 00:04:38.630
so we could generate
the call to push.

00:04:38.630 --> 00:04:39.880
That would be ideal.

00:04:39.880 --> 00:04:41.480
We'd generate the
best possible code.

00:04:44.110 --> 00:04:46.480
However, it's not
always the case

00:04:46.480 --> 00:04:49.870
that we get to
that kind of point.

00:04:49.870 --> 00:04:52.580
For example, there might
be another call where

00:04:52.580 --> 00:04:56.580
we call this method with a set.

00:04:56.580 --> 00:05:03.030
New set is a factory constructor
which returns a linked HashSet.

00:05:03.030 --> 00:05:05.650
So if we push this
linked HashSet

00:05:05.650 --> 00:05:09.060
pipe around our
program, we'll notice

00:05:09.060 --> 00:05:14.410
that this type information seems
to slosh around the program.

00:05:14.410 --> 00:05:19.160
Though another characteristic
of the type inference

00:05:19.160 --> 00:05:23.360
is that at some points, we
are not context sensitive.

00:05:23.360 --> 00:05:27.830
So that means that we get to
confuse the types returned

00:05:27.830 --> 00:05:30.810
from the functions in
certain places like a and b,

00:05:30.810 --> 00:05:32.455
we no longer have
precise information.

00:05:39.150 --> 00:05:43.060
We do this so that our
type analysis finishes

00:05:43.060 --> 00:05:46.660
in a reasonable amount of time.

00:05:46.660 --> 00:05:49.280
The third interesting thing
about the type of analysis

00:05:49.280 --> 00:05:50.545
is that it's path sensitive.

00:05:54.804 --> 00:05:56.220
If we were to call
something where

00:05:56.220 --> 00:05:58.550
we believe that an
integer's flowing in,

00:05:58.550 --> 00:06:00.438
we look-- oh, I
do have a pointer.

00:06:00.438 --> 00:06:00.938
Good.

00:06:07.740 --> 00:06:11.020
When we come to this add site,
we've got a set of three types

00:06:11.020 --> 00:06:11.520
here.

00:06:11.520 --> 00:06:15.080
But we know that int
doesn't have an add method.

00:06:15.080 --> 00:06:19.000
So that we know that if we were
to actually run the program,

00:06:19.000 --> 00:06:22.000
passing in 35, it would
throw a no such method

00:06:22.000 --> 00:06:24.340
exception at that point.

00:06:24.340 --> 00:06:28.870
What that allows us
to do is to do a trick

00:06:28.870 --> 00:06:35.020
that we call receiver
type strengthening, where

00:06:35.020 --> 00:06:37.980
we can eliminate int
from the set of types

00:06:37.980 --> 00:06:41.570
after that, because
it would have thrown.

00:06:41.570 --> 00:06:45.820
The fourth trick that we do
is at some point, we give up.

00:06:45.820 --> 00:06:48.380
If we are adding too
many types to our set,

00:06:48.380 --> 00:06:51.730
it becomes less and less useful.

00:06:51.730 --> 00:06:54.850
So to avoid taking a
lot of memory and time

00:06:54.850 --> 00:06:58.470
doing that, we say, OK, we'll
make it an approximation

00:06:58.470 --> 00:06:59.530
to the set of types.

00:06:59.530 --> 00:07:03.230
In this case, we could
say it could be anything.

00:07:03.230 --> 00:07:07.730
At that point, we also
unfortunately lose

00:07:07.730 --> 00:07:10.370
some of the power of the
receiver type strengthening.

00:07:10.370 --> 00:07:13.640
Because there are many classes
which have an add method,

00:07:13.640 --> 00:07:16.110
so the set of classes
which have an add method

00:07:16.110 --> 00:07:19.260
is too large, so we say that
could be anything either.

00:07:19.260 --> 00:07:22.660
So what's happened here
is in our type analysis,

00:07:22.660 --> 00:07:25.410
we've pushed the types
around, the types

00:07:25.410 --> 00:07:29.091
are sloshing around our
program, and we have not really

00:07:29.091 --> 00:07:30.090
learned anything useful.

00:07:37.040 --> 00:07:39.570
So because we didn't
learn anything useful,

00:07:39.570 --> 00:07:42.680
first we need to have
that two level dispatch

00:07:42.680 --> 00:07:45.020
with getInterceptor
at the call site.

00:07:45.020 --> 00:07:48.100
And the second effect
is at that call site,

00:07:48.100 --> 00:07:50.520
because we think
x can be anything,

00:07:50.520 --> 00:07:53.270
we think it could be any
of those add methods.

00:07:53.270 --> 00:07:55.590
So it looks like
all of those add

00:07:55.590 --> 00:07:57.930
methods could be called
from that site, which

00:07:57.930 --> 00:08:00.260
means that we need to
include those add methods

00:08:00.260 --> 00:08:01.220
in the program.

00:08:01.220 --> 00:08:03.770
This is how you get code
into the program that

00:08:03.770 --> 00:08:04.980
isn't actually called.

00:08:08.330 --> 00:08:11.530
There are a few tricks that we
use to try and prevent this.

00:08:11.530 --> 00:08:13.989
I've told you about just
receiver type strengthening.

00:08:13.989 --> 00:08:16.280
We do conditional strengthening,
they're obvious stuff.

00:08:16.280 --> 00:08:19.050
If you say x is string,
we know it's a string.

00:08:19.050 --> 00:08:21.000
And then we have
a sister analysis

00:08:21.000 --> 00:08:24.580
tracing where, for some
values, we can trace them

00:08:24.580 --> 00:08:25.980
precisely where they go.

00:08:25.980 --> 00:08:28.720
If we can pull that off and
know exactly where they go,

00:08:28.720 --> 00:08:29.680
we know a lot more.

00:08:29.680 --> 00:08:34.100
For example, if vector
is not overwritten here,

00:08:34.100 --> 00:08:36.010
we would know that it's
always of length 2,

00:08:36.010 --> 00:08:38.034
and we'd be able to
eliminate bounce checks.

00:08:41.280 --> 00:08:44.560
So what can we do knowing
how this type inference works

00:08:44.560 --> 00:08:45.360
to help?

00:08:45.360 --> 00:08:48.020
Well, we can do some kind
of defensive programming.

00:08:48.020 --> 00:08:51.190
Can we do that to improve
our type inference?

00:08:54.350 --> 00:08:56.050
So consider this example.

00:08:56.050 --> 00:08:58.110
We have a Printer class.

00:08:58.110 --> 00:09:04.140
It has a items field, which is
initialized in the constructor,

00:09:04.140 --> 00:09:06.020
and we have one core
site which passes

00:09:06.020 --> 00:09:09.600
in a list, which is represented
by a JavaScript array.

00:09:09.600 --> 00:09:11.620
If we give Dart or
JS this program,

00:09:11.620 --> 00:09:13.130
it does a really good job.

00:09:13.130 --> 00:09:16.810
It knows that in the
for loop, for example,

00:09:16.810 --> 00:09:20.480
this is a JavaScript
array, and for in can be

00:09:20.480 --> 00:09:21.990
compiled to an indexing loop.

00:09:26.100 --> 00:09:29.670
Now if you put on your
black hat and say,

00:09:29.670 --> 00:09:33.100
how can we ruin our day
with a type inference?

00:09:33.100 --> 00:09:35.710
Well, you could add some code
to program somewhere else

00:09:35.710 --> 00:09:38.710
in a different library
that assigns to a field,

00:09:38.710 --> 00:09:40.360
you have a new class
in there, and you

00:09:40.360 --> 00:09:41.980
assign to the items field.

00:09:41.980 --> 00:09:45.220
Now, if the type
inference thinks

00:09:45.220 --> 00:09:47.080
that junk could be
anything-- and we

00:09:47.080 --> 00:09:51.020
could see how easily
that could happen-- then

00:09:51.020 --> 00:09:52.570
it has to account
for the fact we

00:09:52.570 --> 00:09:54.780
could have that
spurious inclusion

00:09:54.780 --> 00:09:58.760
effect with the setter that
assigns to our field here.

00:09:58.760 --> 00:10:02.360
So now the compiler
has to assume

00:10:02.360 --> 00:10:05.430
that items could
be a list or a set,

00:10:05.430 --> 00:10:07.340
and that means that
our for in loop

00:10:07.340 --> 00:10:10.100
now will be compiled to a
standard iterative loop,

00:10:10.100 --> 00:10:12.870
and will need to use
the two level dispatch

00:10:12.870 --> 00:10:14.960
with getInterceptor
to find the iterator.

00:10:18.100 --> 00:10:21.680
You can fix that problem
by putting up a bulkhead

00:10:21.680 --> 00:10:24.720
to stop the type sloshing
around in your program

00:10:24.720 --> 00:10:27.960
by using privacy.

00:10:27.960 --> 00:10:30.210
Dart has library
privacy, so the names

00:10:30.210 --> 00:10:33.480
that begin with an underscore
are private to your library.

00:10:33.480 --> 00:10:36.850
And you can use
that to protect them

00:10:36.850 --> 00:10:43.330
from another library reaching
in and affecting your code.

00:10:43.330 --> 00:10:48.940
So what you do here in
protecting your program, what

00:10:48.940 --> 00:10:52.970
you would think of as normal
programming best practice,

00:10:52.970 --> 00:10:54.920
is also helpful to
the type inference.

00:10:54.920 --> 00:10:58.580
Because it could also use
that partitioning of the names

00:10:58.580 --> 00:11:02.040
into the libraries
scopes as a way

00:11:02.040 --> 00:11:06.950
of knowing that there is
less types sloshing around.

00:11:06.950 --> 00:11:10.030
However, anything that you
can do with two libraries

00:11:10.030 --> 00:11:11.660
to ruin your day,
you could probably

00:11:11.660 --> 00:11:13.630
do in a single library.

00:11:13.630 --> 00:11:16.000
Maybe you've got this
nice large library,

00:11:16.000 --> 00:11:18.440
and you have in there
multiple classes

00:11:18.440 --> 00:11:20.830
which all have an items field.

00:11:20.830 --> 00:11:23.200
And the type inference
comes to the conclusion

00:11:23.200 --> 00:11:26.234
that junk could be anything,
we're back to the same thing.

00:11:26.234 --> 00:11:27.650
But now we're in
the same library,

00:11:27.650 --> 00:11:29.380
so we can't use library privacy.

00:11:29.380 --> 00:11:30.780
So what should we do?

00:11:30.780 --> 00:11:34.150
Well, we could
use a final field.

00:11:34.150 --> 00:11:38.580
If your class is such that
you only initialize it,

00:11:38.580 --> 00:11:41.640
and you use a final field,
this is a very strong hint

00:11:41.640 --> 00:11:43.590
that the type
inferencing can use.

00:11:43.590 --> 00:11:48.090
Because there are very few
paths for setting that field.

00:11:48.090 --> 00:11:53.820
So I'd like to sum up on this
and talk about names a bit

00:11:53.820 --> 00:11:54.440
here.

00:11:54.440 --> 00:12:01.597
So in a sense the names
connect parts of the program

00:12:01.597 --> 00:12:02.180
inadvertently.

00:12:06.800 --> 00:12:08.890
If you partition the
names in your program,

00:12:08.890 --> 00:12:10.510
you'll get better
type inference.

00:12:10.510 --> 00:12:14.300
A sane way of partitioning them
is to break your program down

00:12:14.300 --> 00:12:17.950
into more libraries so
that you can insulate them

00:12:17.950 --> 00:12:19.180
against each other.

00:12:19.180 --> 00:12:23.470
An insane way is to invent
a complete new terminology

00:12:23.470 --> 00:12:24.485
for naming everything.

00:12:24.485 --> 00:12:26.360
It's not really helpful
if you have something

00:12:26.360 --> 00:12:28.110
which you want to be
a standard collection

00:12:28.110 --> 00:12:30.590
to have a completely
different set of names,

00:12:30.590 --> 00:12:33.392
so I avoid doing that.

00:12:33.392 --> 00:12:34.975
But it is something
to think of if you

00:12:34.975 --> 00:12:38.728
know that there is a problem
in your program with that.

00:12:41.800 --> 00:12:44.880
So up until this
point, I haven't really

00:12:44.880 --> 00:12:47.535
talked about a program that
has types written in it.

00:12:47.535 --> 00:12:50.120
In Dart, when you
have a declaration

00:12:50.120 --> 00:12:52.140
and you used a type
in that declaration,

00:12:52.140 --> 00:12:54.330
that's called a type annotation.

00:12:54.330 --> 00:12:56.525
It works rather
like an assertion.

00:13:00.680 --> 00:13:05.200
What that means is,
in checked mode,

00:13:05.200 --> 00:13:08.410
that type will be checked
at that point in runtime.

00:13:08.410 --> 00:13:12.470
So when I assign to s, there's
a check which says, OK,

00:13:12.470 --> 00:13:15.220
is this a string, or no?

00:13:15.220 --> 00:13:17.290
If we've done that
check in type inference,

00:13:17.290 --> 00:13:19.520
then we can proceed
from that point knowing

00:13:19.520 --> 00:13:23.290
that s is a string, or no.

00:13:23.290 --> 00:13:28.220
In production mode, those
assertions are turned off.

00:13:28.220 --> 00:13:30.440
What that means is that
we can actually not

00:13:30.440 --> 00:13:32.840
make any assumption
about s if we

00:13:32.840 --> 00:13:37.140
want to execute the program
as a correct Dart program.

00:13:37.140 --> 00:13:39.490
Because Dart, the
language, will try

00:13:39.490 --> 00:13:42.620
to do the best to call the
methods that you call on

00:13:42.620 --> 00:13:47.260
s regardless of what type
was sitting there and being

00:13:47.260 --> 00:13:48.730
ignored in the program.

00:13:48.730 --> 00:13:51.060
However, you use all
these great tools.

00:13:51.060 --> 00:13:52.960
You've got the editor.

00:13:52.960 --> 00:13:55.480
The analyzer, which
gives you warnings.

00:13:55.480 --> 00:13:59.300
You have to your test framework,
so you run your tests.

00:13:59.300 --> 00:14:02.140
And presumably, you run
your tests in check mode.

00:14:02.140 --> 00:14:06.180
So this kind of production
mode where you ignore the tests

00:14:06.180 --> 00:14:09.520
doesn't really
make a lot of sense

00:14:09.520 --> 00:14:11.610
if you're running
those tests already.

00:14:11.610 --> 00:14:15.590
So we added a flag to the Dart
JavaScript compiler, trust type

00:14:15.590 --> 00:14:16.300
annotations.

00:14:16.300 --> 00:14:21.650
It's basically checked
mode without the checks.

00:14:21.650 --> 00:14:23.170
It makes sense to
use it if you're

00:14:23.170 --> 00:14:25.910
using all of the tools
available to you,

00:14:25.910 --> 00:14:29.040
and also that you don't
swallow type errors.

00:14:29.040 --> 00:14:32.850
So you know for sure that
when you run your program,

00:14:32.850 --> 00:14:34.960
you've got great
coverage, great test

00:14:34.960 --> 00:14:38.610
coverage, no static warnings.

00:14:38.610 --> 00:14:39.610
That's great.

00:14:39.610 --> 00:14:43.280
So you might say, Stephen, you
just told me about this type

00:14:43.280 --> 00:14:44.810
inferencing, and
now you can say,

00:14:44.810 --> 00:14:48.290
well, I can just put types
in and say believe them?

00:14:48.290 --> 00:14:54.180
That doesn't really
help with everything.

00:14:54.180 --> 00:14:58.020
There's a few things that we
can't say in the type system

00:14:58.020 --> 00:14:59.250
that we have today.

00:14:59.250 --> 00:15:01.860
We can't say whether
something is null or not.

00:15:01.860 --> 00:15:04.410
It's been a request for a while.

00:15:04.410 --> 00:15:07.840
If you look, it's got a very low
bug number in our database, non

00:15:07.840 --> 00:15:08.545
nullable types.

00:15:11.695 --> 00:15:13.320
Knowing whether
something's null or not

00:15:13.320 --> 00:15:15.750
is actually quite important
for generating good code

00:15:15.750 --> 00:15:17.710
with arithmetic.

00:15:17.710 --> 00:15:20.130
If in Dart you say
null plus 5, you

00:15:20.130 --> 00:15:22.450
get a no such method
error on null.

00:15:22.450 --> 00:15:28.570
If you say 5 plus null, you get
an argument error on the null.

00:15:28.570 --> 00:15:33.170
If you run that same
code in JavaScript,

00:15:33.170 --> 00:15:37.490
you get some crazy result,
which doesn't really make sense.

00:15:37.490 --> 00:15:42.220
So we don't have a
nice way in the type

00:15:42.220 --> 00:15:45.370
system of finding whether
something's null, so type

00:15:45.370 --> 00:15:47.087
inference is the
way that we might

00:15:47.087 --> 00:15:49.420
discover something is null,
then generate the good code.

00:15:49.420 --> 00:15:51.164
So it's still
necessary for that.

00:15:51.164 --> 00:15:52.580
The next thing is,
we don't really

00:15:52.580 --> 00:15:55.450
have a way of saying that
something is a JavaScript

00:15:55.450 --> 00:15:56.910
array.

00:15:56.910 --> 00:15:59.380
On the VM, it's never
going to be a JavaScript

00:15:59.380 --> 00:16:00.880
array, your list type.

00:16:00.880 --> 00:16:04.180
List is an interfaces that's
implemented by many classes.

00:16:04.180 --> 00:16:06.080
And just saying that
something is a list

00:16:06.080 --> 00:16:10.460
doesn't really give us a way to
avoid that two-level dispatch.

00:16:10.460 --> 00:16:14.920
And furthermore, we don't
really get a lot of help

00:16:14.920 --> 00:16:17.410
from those tests with
the type parameters.

00:16:17.410 --> 00:16:20.330
Just satisfying
the type assertion

00:16:20.330 --> 00:16:21.860
that something is
a list of string

00:16:21.860 --> 00:16:24.650
doesn't guarantee that the
things in the list are strings.

00:16:28.364 --> 00:16:29.780
Declaring something
as a list does

00:16:29.780 --> 00:16:32.140
help with spurious inclusion.

00:16:32.140 --> 00:16:34.010
We know that DateTime
is not a list,

00:16:34.010 --> 00:16:36.647
so therefore, we don't
need the DateTime method.

00:16:36.647 --> 00:16:37.730
We don't have to add that.

00:16:42.630 --> 00:16:45.389
So I've told you about some
things that you can do,

00:16:45.389 --> 00:16:47.180
now I'm going to tell
you about some things

00:16:47.180 --> 00:16:50.120
that you might want to avoid.

00:16:50.120 --> 00:16:57.200
Now, I'm going to preface this
by you might want to avoid

00:16:57.200 --> 00:16:58.740
when you're shipping your app.

00:16:58.740 --> 00:17:00.370
But these are
features which can be

00:17:00.370 --> 00:17:03.130
very useful in your unit tests.

00:17:03.130 --> 00:17:06.880
So I'd like to think that
when your app is in dry dock

00:17:06.880 --> 00:17:08.900
and you're testing
out the subsystems,

00:17:08.900 --> 00:17:11.970
it's OK to have a situation
where the types might

00:17:11.970 --> 00:17:13.380
slosh around the program.

00:17:13.380 --> 00:17:16.150
It's just when you want
to compile your final app

00:17:16.150 --> 00:17:18.140
and deliver it to
your customers,

00:17:18.140 --> 00:17:20.410
then you might want the
benefit of the optimizations

00:17:20.410 --> 00:17:23.337
that we get from having
the better type inference.

00:17:23.337 --> 00:17:24.920
All of these features
are things which

00:17:24.920 --> 00:17:28.610
make the type of
inference's job much harder.

00:17:28.610 --> 00:17:31.360
The first thing you might
want to avoid is mirrors.

00:17:31.360 --> 00:17:36.570
Reflection isn't really
difficult for type inference.

00:17:36.570 --> 00:17:38.850
The problem is
that something here

00:17:38.850 --> 00:17:41.050
where you're calling
reflect and invoke,

00:17:41.050 --> 00:17:42.720
it's very hard for
our type inference

00:17:42.720 --> 00:17:45.425
to see what the type of o is.

00:17:45.425 --> 00:17:46.800
It doesn't know
what the name is.

00:17:46.800 --> 00:17:51.760
This looks like that spurious
inclusion on steroids.

00:17:51.760 --> 00:17:56.990
This call here looks like I call
every method with one argument,

00:17:56.990 --> 00:17:59.330
and that argument
could be anything.

00:17:59.330 --> 00:18:01.590
So our recommended
approach to avoiding that

00:18:01.590 --> 00:18:03.402
is to use code generation.

00:18:03.402 --> 00:18:05.360
And we've been switching
a lot of our libraries

00:18:05.360 --> 00:18:06.760
to use code generation.

00:18:06.760 --> 00:18:09.390
We have smoke package,
reflectable and polymer

00:18:09.390 --> 00:18:11.069
all use code generation.

00:18:11.069 --> 00:18:13.610
The great thing that you can do
when you generate code is you

00:18:13.610 --> 00:18:15.500
can put type
annotations in there

00:18:15.500 --> 00:18:20.160
which you can check,
and then trust later.

00:18:20.160 --> 00:18:24.150
The second thing to
avoid is no such method.

00:18:24.150 --> 00:18:27.090
If we consider this
line of code here,

00:18:27.090 --> 00:18:29.125
if we don't know what
the type of junk is,

00:18:29.125 --> 00:18:30.000
it could be anything.

00:18:33.160 --> 00:18:37.300
When we call that
trim method, that

00:18:37.300 --> 00:18:39.240
will require to have
that two-level dispatch.

00:18:41.810 --> 00:18:48.270
In our type inference, we
can look at that trim method,

00:18:48.270 --> 00:18:49.370
and we say, OK.

00:18:49.370 --> 00:18:53.219
I receive a type strengthening,
there's only one class,

00:18:53.219 --> 00:18:55.510
at least in the core libraries,
that has a trim method,

00:18:55.510 --> 00:18:56.780
and that's string.

00:18:56.780 --> 00:19:00.500
So we know that if trim
succeeds, we had a string,

00:19:00.500 --> 00:19:01.890
and we returned a string.

00:19:01.890 --> 00:19:03.390
Now that we know
we've got a string,

00:19:03.390 --> 00:19:05.680
we can compile the
rest of this expression

00:19:05.680 --> 00:19:08.180
into essentially the same
code that you see here,

00:19:08.180 --> 00:19:09.380
but in JavaScript.

00:19:09.380 --> 00:19:11.620
Very nice.

00:19:11.620 --> 00:19:14.170
If we have a class that has
no such method-- for example

00:19:14.170 --> 00:19:17.520
this proxy class here--
usually the no such method

00:19:17.520 --> 00:19:20.450
implementation does
something really clever,

00:19:20.450 --> 00:19:23.900
and the type inference can't
figure out what it does.

00:19:23.900 --> 00:19:27.640
So it says, OK, that no such
method returns anything.

00:19:27.640 --> 00:19:34.340
So now when we look at that
trim method, what can we say?

00:19:34.340 --> 00:19:36.870
Well, we know the trim
could be string.trim,

00:19:36.870 --> 00:19:38.540
which returns a string.

00:19:38.540 --> 00:19:42.890
But the other method we could've
called is proxy.noSuchMethod,

00:19:42.890 --> 00:19:44.980
and it returns anything.

00:19:44.980 --> 00:19:46.690
So after we come
back from trim, we

00:19:46.690 --> 00:19:48.444
don't know anything
about that result,

00:19:48.444 --> 00:19:50.610
because it could have been
some crazy thing returned

00:19:50.610 --> 00:19:51.700
by the proxy.

00:19:51.700 --> 00:19:56.180
So we have to do that to level
dispatch again for toUpperCase.

00:19:56.180 --> 00:19:58.640
And the same thing happens
there in our analysis,

00:19:58.640 --> 00:20:02.520
so we have to do the dispatch
again to call equals.

00:20:02.520 --> 00:20:06.350
So this basically,
by having this proxy

00:20:06.350 --> 00:20:10.020
in our application in some
library that we didn't even

00:20:10.020 --> 00:20:15.550
know that we were including,
takes this one line of code

00:20:15.550 --> 00:20:17.920
which had one
two-level dispatch,

00:20:17.920 --> 00:20:20.210
and everything else
was nice JavaScript.

00:20:20.210 --> 00:20:24.200
It turns it into three of
those dispatches, which

00:20:24.200 --> 00:20:26.790
will make it slower and bigger.

00:20:26.790 --> 00:20:35.310
So because it's not always easy
to find where these things are,

00:20:35.310 --> 00:20:37.890
we added some hints to .js.

00:20:37.890 --> 00:20:41.430
If you put on the verbose flag,
and there are implementations

00:20:41.430 --> 00:20:44.935
of no such method in your
code, they will be pointed out.

00:20:48.190 --> 00:20:50.570
A final thing I'm
going to suggest

00:20:50.570 --> 00:20:54.110
is don't use runtime type.

00:20:54.110 --> 00:20:57.030
Most of the time when you
write a generic class that

00:20:57.030 --> 00:20:59.950
has type parameters,
those type parameters

00:20:59.950 --> 00:21:03.690
are used in type assertions
and not really anywhere else.

00:21:03.690 --> 00:21:06.370
So in checked mode,
those types are used.

00:21:06.370 --> 00:21:09.290
But in production mode, or
if you're trusting types,

00:21:09.290 --> 00:21:12.330
those type parameters
are unused.

00:21:12.330 --> 00:21:16.590
So we have an optimization,
which is if they're not used,

00:21:16.590 --> 00:21:19.110
why bother to pass them around?

00:21:19.110 --> 00:21:21.580
So we analyze the
program to see where are

00:21:21.580 --> 00:21:23.530
those types actually demanded?

00:21:23.530 --> 00:21:27.270
And if they're demanded, then
we followed that path of demands

00:21:27.270 --> 00:21:29.710
to make sure that we
pass the types along

00:21:29.710 --> 00:21:31.000
when they're needed.

00:21:31.000 --> 00:21:33.160
Which is usually not much.

00:21:33.160 --> 00:21:38.280
However, the runtime type
getter returns a type object

00:21:38.280 --> 00:21:40.580
that has one useful
method to string.

00:21:40.580 --> 00:21:44.320
And that method requires the
type parameters to print them.

00:21:44.320 --> 00:21:47.820
So if you include the runtime
type somewhere in your program,

00:21:47.820 --> 00:21:50.490
then now it means
that every usually

00:21:50.490 --> 00:21:52.490
you're calling it from
somewhere where you don't

00:21:52.490 --> 00:21:53.573
know what the receiver is.

00:21:53.573 --> 00:21:56.380
Because why else
would you want that?

00:21:56.380 --> 00:22:00.450
So don't use runtime
type, because it

00:22:00.450 --> 00:22:04.110
inhibits this optimization
of our type erasure.

00:22:04.110 --> 00:22:06.340
So like I said before,
these are three features

00:22:06.340 --> 00:22:07.610
I said don't use.

00:22:07.610 --> 00:22:13.630
They're fine in testing, but if
you want to shift the best app,

00:22:13.630 --> 00:22:17.840
they interfere with that.

00:22:17.840 --> 00:22:21.080
So .js is a work in progress.

00:22:21.080 --> 00:22:23.330
We're always looking
for things to improve.

00:22:23.330 --> 00:22:28.490
The type analysis is something
that we would like to do.

00:22:28.490 --> 00:22:30.760
We'd like to improve that.

00:22:30.760 --> 00:22:34.290
We would like to make better
use of the inferred types,

00:22:34.290 --> 00:22:36.330
and we're also looking
at ways of making

00:22:36.330 --> 00:22:40.541
the two-level dispatch when we
still need it, cheaper as well.

00:22:40.541 --> 00:22:41.040
OK.

00:22:41.040 --> 00:22:47.130
So I'm done with this, so I
guess we have the questions.

00:22:47.130 --> 00:22:48.460
Oh wow.

00:22:48.460 --> 00:22:51.325
How long do I have questions?

00:22:51.325 --> 00:22:52.720
MALE SPEAKER: 40 minutes.

00:22:52.720 --> 00:22:54.125
STEPHEN ADAMS: 40.

00:22:54.125 --> 00:22:56.500
MALE SPEAKER: You have 3 and
1/2 hours for questions now.

00:22:56.500 --> 00:22:58.350
STEPHEN ADAMS: I got 3 and
1/2 hours for questions.

00:22:58.350 --> 00:22:58.930
OK.

00:22:58.930 --> 00:23:00.800
MALE SPEAKER: No, you've got--

00:23:00.800 --> 00:23:02.490
STEPHEN ADAMS: Do we were want
to take the questions right

00:23:02.490 --> 00:23:03.095
now?

00:23:03.095 --> 00:23:05.099
MALE SPEAKER:
Yeah, we have time.

00:23:05.099 --> 00:23:06.640
I think you started
a little earlier.

00:23:06.640 --> 00:23:07.230
STEPHEN ADAMS: Oh, I did.

00:23:07.230 --> 00:23:07.940
OK.

00:23:07.940 --> 00:23:08.968
Yes?

00:23:08.968 --> 00:23:10.880
AUDIENCE: [INAUDIBLE]--

00:23:10.880 --> 00:23:11.791
MALE SPEAKER: Here.

00:23:11.791 --> 00:23:13.582
You're close enough,
I'll hand you the mic.

00:23:13.582 --> 00:23:16.720
I'll be the mic runner.

00:23:16.720 --> 00:23:20.630
AUDIENCE: So you said if
you're using run time type,

00:23:20.630 --> 00:23:24.460
there would have to be split
to pass that type information.

00:23:24.460 --> 00:23:26.720
What about is, same thing?

00:23:26.720 --> 00:23:29.530
STEPHEN ADAMS: If
you use is, then you

00:23:29.530 --> 00:23:32.650
can see where that is is.

00:23:32.650 --> 00:23:35.530
So then we can
trace back from that

00:23:35.530 --> 00:23:40.190
where is is-- I sound
like Bill Clinton.

00:23:43.050 --> 00:23:46.290
We can trace back
from where the is is,

00:23:46.290 --> 00:23:48.090
to where did that
type come from.

00:23:48.090 --> 00:23:51.470
And only the types that
passed a type parameter along

00:23:51.470 --> 00:23:53.740
to that point need the type.

00:23:53.740 --> 00:23:55.500
AUDIENCE: So it's a bit safer?

00:23:55.500 --> 00:23:56.250
STEPHEN ADAMS: Mm?

00:23:56.250 --> 00:23:57.480
AUDIENCE: So it's a bit safer?

00:23:57.480 --> 00:23:59.063
STEPHEN ADAMS: Yeah,
it's a lot safer.

00:23:59.063 --> 00:24:00.590
Because it's only
the paths which

00:24:00.590 --> 00:24:02.980
lead up until that type
parameter that are included,

00:24:02.980 --> 00:24:03.490
yes.

00:24:03.490 --> 00:24:05.590
So if you have a
class where you, like,

00:24:05.590 --> 00:24:09.580
a checker class of a type
parameter, where you then

00:24:09.580 --> 00:24:14.110
say I've got this checker of
int, and checker of string,

00:24:14.110 --> 00:24:16.360
and those are the type
parameters, that's pretty safe.

00:24:16.360 --> 00:24:19.910
Because there's usually not a
complicated path going there.

00:24:19.910 --> 00:24:24.310
But by a path, I mean, like,
if you have list all of t,

00:24:24.310 --> 00:24:27.200
and then that returns
a list iterator of t,

00:24:27.200 --> 00:24:31.680
then in the list iterator, you
used t, you didn't is check,

00:24:31.680 --> 00:24:33.920
then that would
trace back from the

00:24:33.920 --> 00:24:37.876
is checked in the
iterator back to the list.

00:24:37.876 --> 00:24:39.750
And then so at the point
you create the list,

00:24:39.750 --> 00:24:41.160
you'd need to pass it along.

00:24:41.160 --> 00:24:45.030
So both the list iterator
and the list would need t.

00:24:45.030 --> 00:24:48.120
But it wouldn't mean that,
say, a set needed it,

00:24:48.120 --> 00:24:51.904
unless you had also is t
in your set it iterator.

00:24:51.904 --> 00:24:52.570
AUDIENCE: I see.

00:24:52.570 --> 00:24:54.750
Thanks.

00:24:54.750 --> 00:24:55.925
MALE SPEAKER: Adam?

00:24:55.925 --> 00:24:56.650
Wait, actually.

00:24:59.684 --> 00:25:01.100
AUDIENCE: So what's
the story when

00:25:01.100 --> 00:25:05.110
you use trust type annotations,
and libraries and modules

00:25:05.110 --> 00:25:06.365
in code you don't own?

00:25:06.365 --> 00:25:10.758
Can you scope where those
trusting of annotations

00:25:10.758 --> 00:25:13.614
come from?

00:25:13.614 --> 00:25:16.667
It does not need to
make sense at all.

00:25:16.667 --> 00:25:17.500
STEPHEN ADAMS: Yeah.

00:25:17.500 --> 00:25:18.840
That's a great feature request.

00:25:22.352 --> 00:25:23.435
MALE SPEAKER: Anyone else?

00:25:26.195 --> 00:25:29.170
Coming around to you.

00:25:29.170 --> 00:25:32.730
AUDIENCE: How well does the
analyzer work on futures,

00:25:32.730 --> 00:25:36.550
and does it work any differently
if I'm using the async 0.8

00:25:36.550 --> 00:25:38.430
syntax?

00:25:38.430 --> 00:25:43.110
STEPHEN ADAMS: OK so that's
a very good question.

00:25:43.110 --> 00:25:46.660
One of the things that we're
doing with the Dart development

00:25:46.660 --> 00:25:49.160
compiler you heard about
in the previous talk

00:25:49.160 --> 00:25:53.530
is looking at when we can
believe the generic types more.

00:25:53.530 --> 00:26:00.220
So part of that is, what do
we have to have in our program

00:26:00.220 --> 00:26:02.700
that we could actually
believe the generic types?

00:26:02.700 --> 00:26:05.000
And I think that is mostly
that we always use them

00:26:05.000 --> 00:26:06.470
on the path to somewhere.

00:26:06.470 --> 00:26:09.720
So in that case, we might
be able to say that,

00:26:09.720 --> 00:26:15.190
OK, in my then clause
when I'm using a future

00:26:15.190 --> 00:26:19.610
that I could know that
type is the one that I

00:26:19.610 --> 00:26:22.180
got from the type parameter.

00:26:22.180 --> 00:26:25.280
What you could do today--
I mean, we really wanted

00:26:25.280 --> 00:26:28.240
to do this, because it's
very common to write then,

00:26:28.240 --> 00:26:31.140
open parens, identifier
and that's it.

00:26:31.140 --> 00:26:34.640
And our style guide is not
to put a type in there.

00:26:34.640 --> 00:26:37.670
But if you do put a type in
there and you use trust types,

00:26:37.670 --> 00:26:45.810
then I don't know how well
the analyzer picks that up.

00:26:45.810 --> 00:26:48.190
Hopefully it knows--

00:26:48.190 --> 00:26:50.330
MALE SPEAKER: It's OK
to say I don't know.

00:26:50.330 --> 00:26:53.750
STEPHEN ADAMS: Yeah, Yeah.

00:26:53.750 --> 00:26:57.117
We'd like to do
much better at that.

00:26:57.117 --> 00:26:58.200
MALE SPEAKER: Anyone else?

00:26:58.200 --> 00:26:59.660
Someone in the back, you
can ask a question just

00:26:59.660 --> 00:27:01.201
to watch me run
around like an idiot.

00:27:03.600 --> 00:27:05.530
STEPHEN ADAMS: You can find me.

00:27:05.530 --> 00:27:08.170
When I wrote this talk, it
went an hour and a half.

00:27:08.170 --> 00:27:11.070
So I've got many more examples.

00:27:11.070 --> 00:27:13.460
MALE SPEAKER: If you wonder
what can primitive flag,

00:27:13.460 --> 00:27:15.730
that's a secret if you
ask Stephen afterwards.

00:27:15.730 --> 00:27:18.350
STEPHEN ADAMS: That's not as
important as the trust types,

00:27:18.350 --> 00:27:18.904
though.

00:27:18.904 --> 00:27:20.320
MALE SPEAKER: Thank
you very much.

00:27:20.320 --> 00:27:21.870
STEPHEN ADAMS: OK.

