WEBVTT
Kind: captions
Language: en

00:00:00.750 --> 00:00:02.960
Alright, why don't we walk through our solution

00:00:02.960 --> 00:00:06.950
function compare_averages. Remember that we're performing a t-test on

00:00:06.950 --> 00:00:10.158
two sets of baseball data, left-handed and right-handed

00:00:10.158 --> 00:00:13.350
hitters. We want to perform a Welch's t-test and determine

00:00:13.350 --> 00:00:16.770
with 95% confidence whether or not the average

00:00:16.770 --> 00:00:19.410
batting average of the two cohorts is different. In

00:00:19.410 --> 00:00:21.870
other words the left handed hitters have a statistically

00:00:21.870 --> 00:00:26.020
significant different average batting average than right handed hitters.

00:00:26.020 --> 00:00:28.020
First, we read our data into a panda's data

00:00:28.020 --> 00:00:32.100
frame. So baseball date equals pandas.read_csv and then the

00:00:32.100 --> 00:00:34.940
location of our csv file. Then we're going to

00:00:34.940 --> 00:00:37.530
split the data into two data frames, one for left

00:00:37.530 --> 00:00:40.310
handed hitters and one for right handed hitters. We

00:00:40.310 --> 00:00:43.720
do this by saying baseball_data_left equals baseball_data, and then

00:00:43.720 --> 00:00:47.560
index on baseball_data handedness equals L. We can do

00:00:47.560 --> 00:00:52.710
the same thing for right-handed hitters. Then we'll use scipy.stats.ttest_ind

00:00:52.710 --> 00:00:54.920
to perform a Welches t-test on these two data

00:00:54.920 --> 00:00:59.630
frames. So results equals scipi.stats.ttest_ind and then we pass in

00:00:59.630 --> 00:01:03.070
baseball data left average, baseball data right average, and

00:01:03.070 --> 00:01:06.230
we say equal_var equals false. Now we're going to produce

00:01:06.230 --> 00:01:08.780
an output in the desired format. So if result

00:01:08.780 --> 00:01:11.680
one is less than or equal to .05, that is

00:01:11.680 --> 00:01:13.746
if our p value is less than or equal to

00:01:13.746 --> 00:01:19.880
.05, will return false and then the output of scipy.stats.ttest_ind.

00:01:19.880 --> 00:01:25.320
Else will return true, and then the result of scipy.stats.ttest_ind. So this

00:01:25.320 --> 00:01:28.778
is a basic implementation of how we can do Welch's t-test using Python.

