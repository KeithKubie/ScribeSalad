WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.625
SEAN MCQUILLAN: Who doesn't love
building beautiful animations?

00:00:02.625 --> 00:00:04.850
They make our apps polished,
improve engagement,

00:00:04.850 --> 00:00:07.700
and more importantly,
they're fun to build.

00:00:07.700 --> 00:00:09.860
With ConstraintSets
and ConstraintLayout,

00:00:09.860 --> 00:00:13.760
building fluid animations is
easier than ever on Android.

00:00:13.760 --> 00:00:16.490
By specifying layouts
for the start and end

00:00:16.490 --> 00:00:18.650
of an animation
as keyframes, you

00:00:18.650 --> 00:00:22.130
can create complex animations
with four lines of code.

00:00:22.130 --> 00:00:24.260
For this animation,
our first layout file

00:00:24.260 --> 00:00:27.500
pushes the text views
offscreen and expands the image

00:00:27.500 --> 00:00:29.640
to cover the entire screen.

00:00:29.640 --> 00:00:31.550
All views are styled
in the first layout,

00:00:31.550 --> 00:00:33.490
with text sizes,
fonts, and colors

00:00:33.490 --> 00:00:35.710
set to their final values.

00:00:35.710 --> 00:00:39.260
A second XML file holds the
final element positions.

00:00:39.260 --> 00:00:41.240
The title, credits,
and description

00:00:41.240 --> 00:00:42.950
are onscreen in this keyframe.

00:00:42.950 --> 00:00:44.980
After loading it, the
constraints in this layout

00:00:44.980 --> 00:00:47.450
apply to the view hierarchy.

00:00:47.450 --> 00:00:50.000
Next, Transition Manager
calculates the paths

00:00:50.000 --> 00:00:52.010
between the old keyframe
and the new one,

00:00:52.010 --> 00:00:54.620
building a fluid animation.

00:00:54.620 --> 00:00:57.620
All that in four lines of
code, and no custom map?

00:00:57.620 --> 00:00:58.790
How does it work?

00:00:58.790 --> 00:01:01.064
First, create a
ConstraintSet and load it

00:01:01.064 --> 00:01:02.480
from our second
layout, which will

00:01:02.480 --> 00:01:04.269
serve as the second keyframe.

00:01:04.269 --> 00:01:07.610
A constraint set contains the
constraints, sizes, and margins

00:01:07.610 --> 00:01:09.560
from the layout
and is much cheaper

00:01:09.560 --> 00:01:12.140
to build than inflating
a full layout.

00:01:12.140 --> 00:01:14.310
Since only the position
information is loaded,

00:01:14.310 --> 00:01:16.850
you don't need to keep
all of the other styling

00:01:16.850 --> 00:01:18.740
in sync between the layouts.

00:01:18.740 --> 00:01:22.580
The colors and text sizes from
the first layout will be used.

00:01:22.580 --> 00:01:25.940
Next, apply the ConstraintSet
to the displayed view.

00:01:25.940 --> 00:01:28.880
ConstraintLayout immediately
calculates the new position

00:01:28.880 --> 00:01:30.980
for every child element.

00:01:30.980 --> 00:01:33.230
To make it animate,
let Transition Manager

00:01:33.230 --> 00:01:35.000
start a delayed transition.

00:01:35.000 --> 00:01:36.330
And that's it.

00:01:36.330 --> 00:01:38.530
You're ready to apply
ConstraintSet animations

00:01:38.530 --> 00:01:39.920
to your code.

00:01:39.920 --> 00:01:41.600
Of course, to use
ConstraintSets,

00:01:41.600 --> 00:01:43.640
you'll need to use
ConstraintLayout.

00:01:43.640 --> 00:01:46.040
Check out our earlier
DevByte on ConstraintLayout

00:01:46.040 --> 00:01:47.990
and the code lab which
covers new features

00:01:47.990 --> 00:01:50.320
in ConstraintLayout 1.1.

00:01:50.320 --> 00:01:53.190
ConstraintLayout and
ConstraintSet support API 9,

00:01:53.190 --> 00:01:55.760
so they'll work on all
your supported devices.

00:01:55.760 --> 00:01:58.670
Transition Manager is
available at API 14

00:01:58.670 --> 00:02:00.080
in the support library.

00:02:00.080 --> 00:02:03.350
If you support older devices,
your UI isn't affected.

00:02:03.350 --> 00:02:05.550
Users just won't
get the animations.

00:02:05.550 --> 00:02:08.509
Now, you don't need to
duplicate the layout file.

00:02:08.509 --> 00:02:12.519
And for simple animations, you
may want to build them in code.

00:02:12.519 --> 00:02:14.810
If you just want to change
the bounds of a single view,

00:02:14.810 --> 00:02:16.643
ConstraintLayout will
adjust the other views

00:02:16.643 --> 00:02:18.147
according to the constraints.

00:02:18.147 --> 00:02:20.480
In this example, we're changing
the height of the title,

00:02:20.480 --> 00:02:22.700
and the credits position
animates smoothly

00:02:22.700 --> 00:02:24.800
as the title grows and shrinks.

00:02:24.800 --> 00:02:27.950
This shows another feature of
ConstraintLayout animations.

00:02:27.950 --> 00:02:30.110
You get reverse
animations without having

00:02:30.110 --> 00:02:32.030
to do reverse math.

00:02:32.030 --> 00:02:33.890
By default, Transition
Manager will

00:02:33.890 --> 00:02:37.970
move and resize along a straight
path with linear acceleration.

00:02:37.970 --> 00:02:40.250
To make your animations
pop even more,

00:02:40.250 --> 00:02:42.406
specify custom transitions.

00:02:42.406 --> 00:02:44.405
Here's an example using
a different interpolator

00:02:44.405 --> 00:02:47.120
to add a bold effect
to the animation.

00:02:47.120 --> 00:02:50.210
You customize the animation
by passing a custom transition

00:02:50.210 --> 00:02:52.410
to Transition Manager.

00:02:52.410 --> 00:02:54.660
It's very easy to
build fluid animations

00:02:54.660 --> 00:02:57.270
using ConstraintLayout
and ConstraintSets.

00:02:57.270 --> 00:02:58.950
I can't wait to
see what you build.

00:02:58.950 --> 00:03:01.420
Send me a GIF of your
animations on Twitter.

00:03:01.420 --> 00:03:02.320
Thanks, for watching.

00:03:02.320 --> 00:03:03.390
See you next time.

00:03:03.390 --> 00:03:06.440
[MUSIC PLAYING]

