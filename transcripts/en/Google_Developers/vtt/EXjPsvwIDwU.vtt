WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:02.700
Good morning.

00:00:02.700 --> 00:00:03.996
All right.

00:00:03.996 --> 00:00:09.100
I want to spend a moment to
help reintroduce the mobile web.

00:00:09.100 --> 00:00:12.690
At [? DN, ?] at Google
we love the web.

00:00:12.690 --> 00:00:15.320
The web is in Google's DNA.

00:00:15.320 --> 00:00:17.710
Google, as a company,
grew up with the internet

00:00:17.710 --> 00:00:19.700
along with everyone else.

00:00:19.700 --> 00:00:22.990
We want the web to be
first class because there's

00:00:22.990 --> 00:00:25.010
a lot of intrinsic
values about the web

00:00:25.010 --> 00:00:27.460
that we really care about.

00:00:27.460 --> 00:00:30.770
The web offers a
frictionless experience.

00:00:30.770 --> 00:00:33.130
You can just tap a
link and you're there.

00:00:33.130 --> 00:00:35.230
Experiencing what
that link led to.

00:00:35.230 --> 00:00:37.470
You don't have to
pause and think about,

00:00:37.470 --> 00:00:40.090
make decisions, do you trust
it, do you want to install it?

00:00:40.090 --> 00:00:43.990
You can just move into new
experiences effortlessly.

00:00:43.990 --> 00:00:45.760
The web is also discoverable.

00:00:45.760 --> 00:00:48.180
It's all just built
on top of URLs.

00:00:48.180 --> 00:00:51.110
A single URL has a lot
of power because it

00:00:51.110 --> 00:00:52.700
represents its content.

00:00:52.700 --> 00:00:54.150
But I can do quite
a lot with it.

00:00:54.150 --> 00:00:56.580
I can store it so that I can
revisit it again, of course,

00:00:56.580 --> 00:00:59.410
but more powerful, of
course, is sharing.

00:00:59.410 --> 00:01:01.910
Links are shared by
all sorts of means.

00:01:01.910 --> 00:01:05.140
And with those links, a
single app or document

00:01:05.140 --> 00:01:09.150
can link into the state or
another section of any other.

00:01:09.150 --> 00:01:11.080
And that link is
just a single tap

00:01:11.080 --> 00:01:14.130
away from absolutely everyone.

00:01:14.130 --> 00:01:15.950
The web is everywhere.

00:01:15.950 --> 00:01:18.930
Interoperability is
this beautiful thing

00:01:18.930 --> 00:01:20.610
that's let the web
flourish because it's

00:01:20.610 --> 00:01:24.450
a shared, open platform, with
multiple implementations.

00:01:24.450 --> 00:01:25.860
That's the platform.

00:01:25.860 --> 00:01:28.950
That platform is on every
device and that single link

00:01:28.950 --> 00:01:30.930
can be accessed by everyone.

00:01:30.930 --> 00:01:35.190
And yet, you might have heard
some less than favorable views

00:01:35.190 --> 00:01:37.800
on the mobile web.

00:01:37.800 --> 00:01:40.540
Not everyone is convinced.

00:01:40.540 --> 00:01:44.420
But respectfully, we disagree.

00:01:44.420 --> 00:01:47.540
Its had its rough times, and
we may have missed the boat

00:01:47.540 --> 00:01:51.000
a few times, but I want to
share what we've done about it.

00:01:51.000 --> 00:01:53.820
The mobile web is
very much alive.

00:01:53.820 --> 00:01:57.520
The reality is today,
the web, is multi-device.

00:01:57.520 --> 00:02:00.870
And the count of users accessing
it on devices is growing.

00:02:00.870 --> 00:02:03.495
And more than just increasing
the number of users,

00:02:03.495 --> 00:02:07.080
the web itself is turning
to be more mobile.

00:02:07.080 --> 00:02:10.139
In just eight months,
the number of sites

00:02:10.139 --> 00:02:12.000
that are mobile
optimized has risen

00:02:12.000 --> 00:02:15.520
from 47 percent to 60, 68, even.

00:02:15.520 --> 00:02:16.680
Things are improving fast.

00:02:16.680 --> 00:02:20.660
But the question is, why isn't
this happening even faster?

00:02:20.660 --> 00:02:23.900
Why aren't all sites
great on mobile?

00:02:23.900 --> 00:02:25.430
And what's holding
back developers

00:02:25.430 --> 00:02:28.550
from delivering fantastic
experiences on the web?

00:02:28.550 --> 00:02:30.640
So, about a year
ago, developers were

00:02:30.640 --> 00:02:34.760
asked what stops them
from building with HTML 5?

00:02:34.760 --> 00:02:37.090
And cited were items
like performance, APIs,

00:02:37.090 --> 00:02:41.170
difficulty in building rich
UIs, and immature frameworks.

00:02:41.170 --> 00:02:43.730
And we heard three key pain
points come out of this.

00:02:43.730 --> 00:02:48.065
Speed, integration, and polish.

00:02:48.065 --> 00:02:50.910
At Chrome, we take these
challenges seriously

00:02:50.910 --> 00:02:52.840
and we've been putting
a deep investment

00:02:52.840 --> 00:02:54.700
into the mobile
web and investments

00:02:54.700 --> 00:02:56.820
into addressing these
specific pain points.

00:02:56.820 --> 00:02:58.320
So I want to share
an update of what

00:02:58.320 --> 00:03:02.270
we've been doing in the past six
months to make the web better.

00:03:02.270 --> 00:03:06.530
First thing that we can do is
just make the platform faster.

00:03:06.530 --> 00:03:11.972
We want to improve the speed
of the most common interaction,

00:03:11.972 --> 00:03:13.219
the tap.

00:03:13.219 --> 00:03:15.510
For a long time there's been
this 300 millisecond delay

00:03:15.510 --> 00:03:16.720
on all taps.

00:03:16.720 --> 00:03:21.290
The browser is waiting for
a double tap to happen.

00:03:21.290 --> 00:03:23.860
We [INAUDIBLE] remove
this delay entirely,

00:03:23.860 --> 00:03:27.640
making a dramatic impact
on the input latency

00:03:27.640 --> 00:03:29.140
that all users have.

00:03:29.140 --> 00:03:32.205
Since then, Firefox and
Safari have done the same.

00:03:32.205 --> 00:03:34.590
Now we focused on other
input latency actions

00:03:34.590 --> 00:03:37.160
like, flinging the page,
and made good improvements

00:03:37.160 --> 00:03:38.830
there as well.

00:03:38.830 --> 00:03:40.930
The JavaScript engine
inside of Chrome, V8,

00:03:40.930 --> 00:03:43.710
has long been a
leader in performance.

00:03:43.710 --> 00:03:46.720
It's speed on mobile is a
large focus for the team.

00:03:46.720 --> 00:03:50.000
And we're happy to report strong
gains in our execution speed,

00:03:50.000 --> 00:03:52.950
reduction in GC latency,
and a lower memory

00:03:52.950 --> 00:03:55.730
footprint on mobile devices.

00:03:55.730 --> 00:03:59.120
It's our goal to get the
browser out of the way

00:03:59.120 --> 00:04:03.570
so that you can have full
use of the main thread.

00:04:03.570 --> 00:04:06.720
This is a look at the
same frame of animation.

00:04:06.720 --> 00:04:09.600
The second one is
taken six months later.

00:04:09.600 --> 00:04:12.030
We've been making
core improvements

00:04:12.030 --> 00:04:14.390
to the rendering engine,
blink, inside of Chrome.

00:04:14.390 --> 00:04:17.620
These improvements have spanned
across the entire architecture.

00:04:17.620 --> 00:04:24.020
From the compositor, to style
engine, to layout, to paint.

00:04:24.020 --> 00:04:26.670
You can see on there we've
moved to this particular frame

00:04:26.670 --> 00:04:29.670
of information from
18 milliseconds down

00:04:29.670 --> 00:04:30.630
to 10 milliseconds.

00:04:30.630 --> 00:04:35.440
Now, 8 milliseconds difference
may not sound like a lot,

00:04:35.440 --> 00:04:38.790
but we've made this improvement
so that all web content doesn't

00:04:38.790 --> 00:04:43.870
animate at a steady animation,
but we can get 60 FPS.

00:04:43.870 --> 00:04:49.000
On the whole, we've improved the
speed of animation 75 percent

00:04:49.000 --> 00:04:51.600
and scrolling 35 percent.

00:04:51.600 --> 00:04:54.970
All this faster than
what we had in 2013.

00:04:54.970 --> 00:05:00.620
We're committed to helping you
get 60 FPS on the mobile web.

00:05:00.620 --> 00:05:02.910
So speed was identified
as a pain point,

00:05:02.910 --> 00:05:05.130
and we've delivered marked
improvements in Chrome

00:05:05.130 --> 00:05:06.820
on mobile.

00:05:06.820 --> 00:05:08.990
Now that we're making
experience faster,

00:05:08.990 --> 00:05:11.770
we need to give you more
control over the platform.

00:05:11.770 --> 00:05:14.690
So this means new
APIs and features.

00:05:14.690 --> 00:05:18.700
One of the most fundamental
features is service worker.

00:05:18.700 --> 00:05:21.380
You can think of it as a
successor to app cache,

00:05:21.380 --> 00:05:24.800
and it is, but it's more
powerful than just that.

00:05:24.800 --> 00:05:27.460
It allows you to build
offline first experiences.

00:05:27.460 --> 00:05:29.430
Service worker can
manage resource,

00:05:29.430 --> 00:05:31.110
fetching, and caching
on your behalf.

00:05:31.110 --> 00:05:33.180
And for users, it's
a huge win too.

00:05:33.180 --> 00:05:35.620
Because they can
get content faster

00:05:35.620 --> 00:05:38.110
and they can finally
have proper offline

00:05:38.110 --> 00:05:42.330
first experiences
delivered from the web.

00:05:42.330 --> 00:05:46.000
Service worker also unlocks a
number of high value futures.

00:05:46.000 --> 00:05:47.920
Push notifications
is a great example.

00:05:47.920 --> 00:05:49.720
Time and again, we heard from.

00:05:49.720 --> 00:05:52.230
You want proper push
notifications on the web.

00:05:52.230 --> 00:05:54.280
So they're on the
way and they're

00:05:54.280 --> 00:05:55.970
being powered by service worker.

00:05:55.970 --> 00:05:59.080
Other capabilities like
background sync and geofencing

00:05:59.080 --> 00:06:03.690
are also coming, sitting on
top of this powerful primitive.

00:06:03.690 --> 00:06:07.580
The web platform has long
been monetized, right?

00:06:07.580 --> 00:06:11.140
E-commerce kind of changed
the way that retailer is done.

00:06:11.140 --> 00:06:12.730
But in the shift
to mobile, things

00:06:12.730 --> 00:06:14.130
got a little bit more difficult.

00:06:14.130 --> 00:06:19.790
Keywords vanished so input
is a bit more difficult.

00:06:19.790 --> 00:06:22.500
Requestautocomplete
is a new standard.

00:06:22.500 --> 00:06:24.610
Let's show quickly
what this looks like.

00:06:28.394 --> 00:06:30.000
Ah, just kidding.

00:06:30.000 --> 00:06:33.020
Requestautocomplete
allows you to build off

00:06:33.020 --> 00:06:37.030
of the HTML5 standard
autocomplete attribute.

00:06:37.030 --> 00:06:40.210
And you can dramatically
improve the process

00:06:40.210 --> 00:06:44.020
of filling out a checkout
flow and other forms.

00:06:44.020 --> 00:06:46.620
We've seen a great
improvement on mobile

00:06:46.620 --> 00:06:49.420
where a user can come
through checkout flow

00:06:49.420 --> 00:06:51.580
far faster than dealing
with their thumbs

00:06:51.580 --> 00:06:54.460
on text fields all day.

00:06:54.460 --> 00:06:56.920
Now WebGL, of
course, offers great,

00:06:56.920 --> 00:06:59.450
hardware accelerated,
3D content on the web.

00:06:59.450 --> 00:07:02.670
And I want to show this demo to
you because it's really nice.

00:07:02.670 --> 00:07:05.580
If I come over here to my phone.

00:07:05.580 --> 00:07:08.950
You can Google
this yourself, just

00:07:08.950 --> 00:07:11.110
look up Samsung Racer WebGL.

00:07:11.110 --> 00:07:13.390
I'm going to click into it.

00:07:13.390 --> 00:07:17.530
And this experience, which
is built with WebGL and also

00:07:17.530 --> 00:07:19.150
Web Audio.

00:07:19.150 --> 00:07:21.850
So it loads up.

00:07:21.850 --> 00:07:23.010
There we go.

00:07:23.010 --> 00:07:27.510
And we have a nice 60
FPS experience of WebGL,

00:07:27.510 --> 00:07:28.810
here on my phone, on the web.

00:07:31.800 --> 00:07:34.960
And I pan around, too.

00:07:34.960 --> 00:07:37.990
The panning is done
dynamically with Web Audi API

00:07:37.990 --> 00:07:40.380
so I really get
into the experience.

00:07:40.380 --> 00:07:43.000
And you can see, we're
not missing frames,

00:07:43.000 --> 00:07:47.830
this is a full slick
60 frames per second.

00:07:47.830 --> 00:07:50.470
All right.

00:07:50.470 --> 00:07:54.320
So, while the browser
needs extra features

00:07:54.320 --> 00:07:56.320
so that you can deliver
these great experiences,

00:07:56.320 --> 00:08:00.030
we also want to help users
get closer to your content.

00:08:00.030 --> 00:08:03.070
So you saw in yesterday's
keynote the redesign recents.

00:08:03.070 --> 00:08:06.800
So your web tabs move and
merge along with recent apps.

00:08:06.800 --> 00:08:09.450
This allows you to move
easily between context,

00:08:09.450 --> 00:08:13.170
whether it is web or app.

00:08:13.170 --> 00:08:16.630
So we heard you when said you
needed a more complete feature

00:08:16.630 --> 00:08:19.780
set and we've been
delivering on that.

00:08:19.780 --> 00:08:24.420
Now no matter how web apps
are built, appearances matter.

00:08:24.420 --> 00:08:28.830
The web deserves to
look and feel gorgeous.

00:08:28.830 --> 00:08:32.210
In yesterday's keynote,
you saw a material design.

00:08:32.210 --> 00:08:37.140
A unified vision for visual
motion and interaction design

00:08:37.140 --> 00:08:38.502
across different devices.

00:08:38.502 --> 00:08:40.210
Polymer has an
implementation of the this

00:08:40.210 --> 00:08:42.250
that you can use
no matter what sort

00:08:42.250 --> 00:08:46.280
of device it is, laptop, tablet
or phone, whether you're user

00:08:46.280 --> 00:08:50.430
is using a mouse,
track pad, or finger.

00:08:50.430 --> 00:08:52.750
The web's got the
same great looks

00:08:52.750 --> 00:08:55.750
and we're bringing a beauty
back to the web with material

00:08:55.750 --> 00:08:56.615
design.

00:08:56.615 --> 00:08:58.135
I'm going to come
over, we're going

00:08:58.135 --> 00:09:01.210
to take a look at one of
the applications built

00:09:01.210 --> 00:09:04.520
with this powerful
design promise.

00:09:04.520 --> 00:09:09.360
So this is an app, the
quiz app, called Topeka.

00:09:09.360 --> 00:09:10.450
Its built with Polymer.

00:09:10.450 --> 00:09:13.170
So it's built with the
next generation of the web.

00:09:13.170 --> 00:09:17.780
But beyond that we made sure
to deliver a great experience.

00:09:17.780 --> 00:09:20.000
So I'm going to come down here.

00:09:20.000 --> 00:09:22.690
And as we move around there's
a lot of things happening.

00:09:22.690 --> 00:09:28.150
We have simultaneous animations
and slick 60 FPS animation.

00:09:28.150 --> 00:09:31.560
I'll come back and we'll
go down to profile.

00:09:31.560 --> 00:09:36.410
And as I tap in on
the input selection,

00:09:36.410 --> 00:09:39.221
you can see a nice
effect coming off.

00:09:39.221 --> 00:09:42.020
You can see a
similar effect, too,

00:09:42.020 --> 00:09:45.180
when we come in to
science and nature.

00:09:45.180 --> 00:09:47.090
And as I'm selecting--
Hm, what is

00:09:47.090 --> 00:09:48.756
the only bird that
can fly backwards?

00:09:52.670 --> 00:09:54.500
Albatross?

00:09:54.500 --> 00:09:55.820
Pelican?

00:09:55.820 --> 00:09:56.630
I'm not sure.

00:09:56.630 --> 00:09:58.060
What is the answer?

00:09:58.060 --> 00:09:59.460
Hummingbird, yes.

00:09:59.460 --> 00:10:03.000
The nice thing here is
that we have a paper ripple

00:10:03.000 --> 00:10:05.790
effect coming off from
the placement of where

00:10:05.790 --> 00:10:08.444
I put my finger.

00:10:08.444 --> 00:10:09.920
Yes!

00:10:09.920 --> 00:10:10.560
Thank you.

00:10:10.560 --> 00:10:12.370
Thank you very much.

00:10:12.370 --> 00:10:13.190
All right.

00:10:13.190 --> 00:10:16.240
One last stop over
in TV and movies.

00:10:16.240 --> 00:10:19.390
Select the actors who
played James Bond.

00:10:19.390 --> 00:10:21.770
I know this one, that's good.

00:10:21.770 --> 00:10:22.410
Dalton?

00:10:22.410 --> 00:10:24.780
Yes.

00:10:24.780 --> 00:10:25.788
Niven?

00:10:25.788 --> 00:10:27.370
All right, yeah, that's good.

00:10:27.370 --> 00:10:29.175
Yeah, I think that's it, right?

00:10:29.175 --> 00:10:33.660
But we have this nice check box
effective coming in on the web.

00:10:33.660 --> 00:10:36.010
Aw.

00:10:36.010 --> 00:10:37.801
All right.

00:10:37.801 --> 00:10:39.285
Well that was great.

00:10:39.285 --> 00:10:41.790
I'll come back to my slides.

00:10:41.790 --> 00:10:45.070
Zero points, all right.

00:10:45.070 --> 00:10:50.350
We're excited to have
strong UI components and UX

00:10:50.350 --> 00:10:53.340
paradigms for you to
build experiences with.

00:10:53.340 --> 00:10:56.820
Now we know that implementing
all the most awesomest

00:10:56.820 --> 00:10:59.090
features in the
world doesn't matter

00:10:59.090 --> 00:11:01.685
if the platform is
hard to write code for.

00:11:01.685 --> 00:11:03.560
So we've been investing
in develop ergonomics

00:11:03.560 --> 00:11:06.960
and tooling to make it
easier for you to build.

00:11:06.960 --> 00:11:09.660
Polymer is a framework for
building the next generation

00:11:09.660 --> 00:11:12.000
of web and it builds on the
power of web components.

00:11:12.000 --> 00:11:13.960
Now we've been working
on this for a few years.

00:11:13.960 --> 00:11:16.070
And the engineers
who work on Polymer

00:11:16.070 --> 00:11:20.140
work in conjunction with those
that work on the web platform.

00:11:20.140 --> 00:11:24.210
And this collaboration
has worked out really well

00:11:24.210 --> 00:11:25.540
and has benefited everyone.

00:11:31.710 --> 00:11:35.360
It's great because
the web platform

00:11:35.360 --> 00:11:38.180
gets to benefit from these
great web developer centric use

00:11:38.180 --> 00:11:38.779
cases.

00:11:38.779 --> 00:11:41.070
And meanwhile, we can make
sure that the implementation

00:11:41.070 --> 00:11:44.340
of Polymer can stand the
fast path of performance.

00:11:44.340 --> 00:11:46.820
This here's a look
at Polymer designer.

00:11:46.820 --> 00:11:50.240
This is a drag and drop
UI for constructing

00:11:50.240 --> 00:11:52.120
fast prototypes
and other things.

00:11:52.120 --> 00:11:54.950
Not only can I drag and up
all these components together,

00:11:54.950 --> 00:11:58.970
but I can instantly dive
into the code beneath them.

00:11:58.970 --> 00:12:01.650
Now we care a lot
about making sure

00:12:01.650 --> 00:12:04.710
that the ergonomics of building
with Polymer is smooth.

00:12:04.710 --> 00:12:08.150
Using web components
is just HTML.

00:12:08.150 --> 00:12:10.110
So take this a
Google map element.

00:12:10.110 --> 00:12:12.040
Once I important
it, I can use it

00:12:12.040 --> 00:12:14.240
very naturally just
with attributes.

00:12:14.240 --> 00:12:17.610
Meanwhile, the element
itself encapsulates and hides

00:12:17.610 --> 00:12:22.050
its implementation so I
can just reuse it easily.

00:12:22.050 --> 00:12:24.400
But as you're
developing you need

00:12:24.400 --> 00:12:27.130
tools to give you strong
insight into the performance

00:12:27.130 --> 00:12:29.270
of your app and a great
expectation of what it's

00:12:29.270 --> 00:12:31.220
going to look like
your mobile users.

00:12:31.220 --> 00:12:33.150
So we've been working
hard to bring you

00:12:33.150 --> 00:12:35.650
a great mobile development
and debugging experience

00:12:35.650 --> 00:12:37.230
with the Chrome Developer Tools.

00:12:37.230 --> 00:12:40.280
Including rich device
simulation features,

00:12:40.280 --> 00:12:43.540
powerful remote debugging,
and rich instrumentation

00:12:43.540 --> 00:12:45.320
to understand how to
improve performance.

00:12:45.320 --> 00:12:47.920
So whether you're
working with Shadow DOM,

00:12:47.920 --> 00:12:50.136
ES6 promises, we
want to make sure

00:12:50.136 --> 00:12:51.760
that the Chrome
DevTools are behind you

00:12:51.760 --> 00:12:53.290
helping you could
iterate quickly.

00:12:53.290 --> 00:12:56.730
And you can move fast, focus on
delivering a great experience,

00:12:56.730 --> 00:13:00.250
rather than focusing
on the technology.

00:13:00.250 --> 00:13:02.160
Beyond the DevTools,
there's two more sites

00:13:02.160 --> 00:13:05.310
that are critical in helping
you deliver on the web.

00:13:05.310 --> 00:13:07.610
PageSpeed Insights
will run your site

00:13:07.610 --> 00:13:09.050
against a battery of tests.

00:13:09.050 --> 00:13:11.850
Help you identify not only how
to improve your page load time,

00:13:11.850 --> 00:13:13.320
but also UX concerns.

00:13:13.320 --> 00:13:17.200
Like sizing your tap targets
to be appropriate size

00:13:17.200 --> 00:13:21.430
and also improving text
readability on small screens.

00:13:21.430 --> 00:13:22.920
This is web page test.

00:13:22.920 --> 00:13:25.512
It recently added great
mobile device support.

00:13:25.512 --> 00:13:27.220
So which is an invaluable
tool in helping

00:13:27.220 --> 00:13:29.190
you optimize for
the critical path.

00:13:29.190 --> 00:13:32.600
So take something as fuzzy
as slow page loading.

00:13:32.600 --> 00:13:35.920
Web page test helps you zero on
in exactly what's holding you

00:13:35.920 --> 00:13:36.900
back.

00:13:36.900 --> 00:13:40.100
Here we're looking at
the film strip few.

00:13:40.100 --> 00:13:42.110
The film strip view
is a great look

00:13:42.110 --> 00:13:44.190
at correlating the
network waterfall,

00:13:44.190 --> 00:13:45.890
along with the visual
load of the page,

00:13:45.890 --> 00:13:47.590
so you can identify
what's blocking

00:13:47.590 --> 00:13:50.490
and how to make things faster.

00:13:50.490 --> 00:13:52.840
And so, there's a lot
going on in web development

00:13:52.840 --> 00:13:56.030
and we know that keeping up with
all the best practices of web

00:13:56.030 --> 00:13:58.230
development is a full time job.

00:13:58.230 --> 00:14:02.440
So how do we address
responsive design, responsive

00:14:02.440 --> 00:14:06.520
layout, images, navigation,
hamburger menus, rich input,

00:14:06.520 --> 00:14:07.870
rich media.

00:14:07.870 --> 00:14:09.800
At web fundamentals
we've documented

00:14:09.800 --> 00:14:12.380
some of these answers
into living gods.

00:14:12.380 --> 00:14:17.010
We're hopefully making the job
of building for the modern web

00:14:17.010 --> 00:14:19.520
a little bit more sane.

00:14:19.520 --> 00:14:21.580
And taking the right
first step is key.

00:14:21.580 --> 00:14:24.350
So we've shipped web
starter kit just last week.

00:14:24.350 --> 00:14:27.380
It is a boilerplate for
building multi-device sites.

00:14:27.380 --> 00:14:30.530
It sets you on the right
path with smart defaults.

00:14:30.530 --> 00:14:32.280
Some of the things
inside web starter kit,

00:14:32.280 --> 00:14:36.130
it has a complete set of styles
and components and layouts.

00:14:36.130 --> 00:14:38.280
It's style guide is
driven by components.

00:14:38.280 --> 00:14:40.030
So you can help craft
your visual identity

00:14:40.030 --> 00:14:41.320
with your designers.

00:14:41.320 --> 00:14:45.470
And tooling for build process
and smart developer workflow

00:14:45.470 --> 00:14:49.850
ergonomics, like device
synchronization and LiveReload.

00:14:49.850 --> 00:14:53.200
So to recap, developers assets
for an even faster runtime,

00:14:53.200 --> 00:14:56.030
even better ergonomics and
tools, and more beauty.

00:14:56.030 --> 00:14:58.197
We've had our heads
down to make big strides

00:14:58.197 --> 00:14:59.780
and we hope over
these two days of I/O

00:14:59.780 --> 00:15:01.510
you've seen some of this.

00:15:01.510 --> 00:15:04.750
But we can't do it without you.

00:15:04.750 --> 00:15:08.120
The web is open, the
web is a conversation,

00:15:08.120 --> 00:15:11.420
and it's a collaboration,
and we need your help too.

00:15:11.420 --> 00:15:13.730
Actually, let me take
a moment and tell you

00:15:13.730 --> 00:15:15.840
about a guy named Dominic.

00:15:15.840 --> 00:15:17.890
Dominic is just like a
JavaScript developer,

00:15:17.890 --> 00:15:19.400
just like you and me.

00:15:19.400 --> 00:15:22.150
Dominic, a while ago,
was taking a look

00:15:22.150 --> 00:15:27.240
at handling
asynchronous operations.

00:15:27.240 --> 00:15:28.860
He ended up writing a blog post.

00:15:28.860 --> 00:15:31.939
This blog posts he
was saying there's

00:15:31.939 --> 00:15:34.230
a lot of people doing work
inside JavaScript libraries,

00:15:34.230 --> 00:15:38.140
but he made the case for saying,
the way that we're handling

00:15:38.140 --> 00:15:40.690
asynchronous events
should be standard.

00:15:40.690 --> 00:15:44.330
We should be able to have all
these of libraries interop

00:15:44.330 --> 00:15:45.800
with each other.

00:15:45.800 --> 00:15:49.170
This blog post
begat a test suite.

00:15:49.170 --> 00:15:52.800
The tests suite begat 30
compatible interoperable

00:15:52.800 --> 00:15:53.840
implementations.

00:15:53.840 --> 00:15:56.740
One of which ended
up in the Dom sped.

00:15:56.740 --> 00:15:58.600
Soon enough, with
Dominic's help,

00:15:58.600 --> 00:16:03.580
the promises has landed in
ECMAScript, the language.

00:16:03.580 --> 00:16:08.650
So going from a blog post
to landing a major feature

00:16:08.650 --> 00:16:12.910
that a number of web APIs
are built is a big feat.

00:16:12.910 --> 00:16:15.420
And not everyone is Dominic.

00:16:15.420 --> 00:16:16.770
I'm certainly not.

00:16:16.770 --> 00:16:18.330
So what can we do?

00:16:18.330 --> 00:16:20.540
First, we just want
to hear from you.

00:16:20.540 --> 00:16:23.590
Anything that you
can tell us on why

00:16:23.590 --> 00:16:26.620
it's difficult to build for
mobile, what we can do for you,

00:16:26.620 --> 00:16:28.890
what features you
need, what's slow.

00:16:28.890 --> 00:16:29.650
Let us know.

00:16:29.650 --> 00:16:31.950
File bugs, be active
on mailing lists,

00:16:31.950 --> 00:16:36.500
just give us the feedback so
that we can serve you well.

00:16:36.500 --> 00:16:38.580
And this also goes
almost without saying,

00:16:38.580 --> 00:16:40.640
but build responsibly.

00:16:40.640 --> 00:16:43.320
It's our awesome
opportunity to build

00:16:43.320 --> 00:16:45.900
these frictionless
experiences on the web

00:16:45.900 --> 00:16:47.785
to all users
regardless, regardless

00:16:47.785 --> 00:16:50.260
of what screen
they're looking at.

00:16:50.260 --> 00:16:53.370
The number one thing you can
do to make your site better

00:16:53.370 --> 00:16:57.210
for mobile users is
just to make it faster.

00:16:57.210 --> 00:17:00.020
With DevTools, Polymer,
and the other resources

00:17:00.020 --> 00:17:01.901
I shared, you have a
whole host of tools

00:17:01.901 --> 00:17:04.109
not only to keep you on the
fast path of performance,

00:17:04.109 --> 00:17:08.230
but help diagnose and address
when you fall off that.

00:17:08.230 --> 00:17:13.819
And, for a lot of users,
their first experience

00:17:13.819 --> 00:17:17.300
with your brand is
your mobile website.

00:17:17.300 --> 00:17:20.180
So they'll tap on a link that
was shared with them maybe

00:17:20.180 --> 00:17:22.500
via Facebook, or email
to them, and they got it

00:17:22.500 --> 00:17:25.280
over IM, found on a
pin board, or maybe

00:17:25.280 --> 00:17:27.640
they just tapped on
a search results.

00:17:27.640 --> 00:17:30.361
But they arrive
via the mobile web.

00:17:30.361 --> 00:17:32.110
Now once they're in,
they might eventually

00:17:32.110 --> 00:17:34.940
find their way to a naively
installed app, and that's fine,

00:17:34.940 --> 00:17:38.260
but they came through
the mobile web.

00:17:38.260 --> 00:17:43.510
And it's your responsibility to
deliver success on that place.

00:17:43.510 --> 00:17:45.580
So this morning
I shared with you

00:17:45.580 --> 00:17:47.870
how we're making Chrome
faster from input latency

00:17:47.870 --> 00:17:50.330
to JavaScript to
massive improvements

00:17:50.330 --> 00:17:51.540
in the core rendering speed.

00:17:51.540 --> 00:17:53.090
We've looked at
powerful capabilities

00:17:53.090 --> 00:17:55.250
like Service Worker,
push notifications,

00:17:55.250 --> 00:17:59.160
requestAutocomplete, and
integrated web and App Recents.

00:17:59.160 --> 00:18:01.840
We're making the web
beautiful and enjoyable touch.

00:18:01.840 --> 00:18:04.920
And we want to make sure that
it's also a joy to build.

00:18:04.920 --> 00:18:08.050
So we've invested in Polymer,
the DevTools, and other tools

00:18:08.050 --> 00:18:10.600
to keep you on the right path.

00:18:10.600 --> 00:18:13.580
We've done a lot of work, but
we're just getting started.

00:18:13.580 --> 00:18:16.400
Chrome is committed
to the mobile web.

00:18:16.400 --> 00:18:19.830
Chrome and Google are
committed to improve the web

00:18:19.830 --> 00:18:23.390
for developers and
for your users.

00:18:23.390 --> 00:18:26.810
We're not done yet, but
you can get started today.

00:18:26.810 --> 00:18:27.660
Join us.

00:18:27.660 --> 00:18:29.500
Let's help deliver
on the promise

00:18:29.500 --> 00:18:32.740
and the power of the mobile web.

00:18:32.740 --> 00:18:34.290
Thanks.

