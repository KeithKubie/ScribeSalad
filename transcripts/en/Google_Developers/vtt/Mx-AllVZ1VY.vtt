WEBVTT
Kind: captions
Language: en

00:00:01.890 --> 00:00:03.180
ERIC SEIDEL: Good morning.

00:00:03.180 --> 00:00:04.794
It's really nice to be back.

00:00:04.794 --> 00:00:07.085
We were here for the last
Dart summit about a year ago,

00:00:07.085 --> 00:00:09.420
a year and a half now-.

00:00:09.420 --> 00:00:12.820
And yeah, we got all sorts of
cool stuff to show you today.

00:00:12.820 --> 00:00:15.750
So my name, if you don't
know me, is Eric Seidel.

00:00:15.750 --> 00:00:18.000
I'm the manager of the
Flutter project at Google.

00:00:18.000 --> 00:00:19.500
And if you haven't
heard of Flutter,

00:00:19.500 --> 00:00:21.780
well, we do what
it says on the tin.

00:00:21.780 --> 00:00:26.400
We help you build beautiful,
fast apps for iOS and Android.

00:00:26.400 --> 00:00:29.430
And I think we can
just get right into it.

00:00:29.430 --> 00:00:31.920
So we started out
with this mission--

00:00:31.920 --> 00:00:35.550
to build a better way
to develop for mobile.

00:00:35.550 --> 00:00:37.410
And you might ask yourself, why?

00:00:37.410 --> 00:00:40.230
Or why would we need,
or want to do that?

00:00:40.230 --> 00:00:42.450
And some of it comes
because much of my team

00:00:42.450 --> 00:00:44.250
did mobile development
themselves,

00:00:44.250 --> 00:00:47.887
wrote apps themselves,
before coming to Flutter.

00:00:47.887 --> 00:00:49.470
And as we were
starting out, we talked

00:00:49.470 --> 00:00:52.020
to a bunch of other mobile
devs, both inside and outside

00:00:52.020 --> 00:00:52.830
of Google.

00:00:52.830 --> 00:00:56.190
And we kept hearing sort
of the same refrains.

00:00:56.190 --> 00:00:58.200
The most common
complaint that we heard

00:00:58.200 --> 00:01:01.620
was that folks have
trouble with mobile.

00:01:01.620 --> 00:01:04.050
That mobile is
expensive to them,

00:01:04.050 --> 00:01:08.460
because they have to learn two
systems, two languages, two

00:01:08.460 --> 00:01:11.010
frameworks, deploy to two
different kinds of devices.

00:01:11.010 --> 00:01:13.550
And they end up building
two teams, or three, teams,

00:01:13.550 --> 00:01:15.450
if you end up building
for the mobile web.

00:01:15.450 --> 00:01:17.880
Or not including, of course,
your desktop and other web

00:01:17.880 --> 00:01:18.590
teams.

00:01:18.590 --> 00:01:21.840
And you end up, then, with
these disparate feature sets.

00:01:21.840 --> 00:01:23.317
So your iOS version
does one thing,

00:01:23.317 --> 00:01:24.900
and your Android
version does another.

00:01:24.900 --> 00:01:27.072
And your users end up confused.

00:01:27.072 --> 00:01:28.530
Another complaint
that we heard was

00:01:28.530 --> 00:01:30.600
that even just
developing for mobile,

00:01:30.600 --> 00:01:33.600
depending on what you're
using, can be slow.

00:01:33.600 --> 00:01:38.370
We heard cycle times inside
Google ranging from a minute

00:01:38.370 --> 00:01:40.200
to tens of minutes.

00:01:40.200 --> 00:01:43.200
To, we heard about clean
builds that were over an hour.

00:01:43.200 --> 00:01:46.180
And this can be,
obviously, expensive.

00:01:46.180 --> 00:01:49.320
And it's also-- your user
expectations on mobile

00:01:49.320 --> 00:01:51.060
are higher than they
were on desktop,

00:01:51.060 --> 00:01:52.320
than they were on the web.

00:01:52.320 --> 00:01:54.028
They expect you to
stick to their finger.

00:01:54.028 --> 00:01:58.590
You expect the app to
dance underneath you.

00:01:58.590 --> 00:02:01.320
And to do that sort of
delightful can be hard.

00:02:01.320 --> 00:02:03.650
And then, of course,
you have to do it twice.

00:02:03.650 --> 00:02:05.400
And finally, we talked
to a bunch of teams

00:02:05.400 --> 00:02:07.950
and asked them about whether
they were using existing

00:02:07.950 --> 00:02:09.389
cross-platform solutions.

00:02:09.389 --> 00:02:11.160
And some of them had tried them.

00:02:11.160 --> 00:02:13.590
But the feedback
we got there was

00:02:13.590 --> 00:02:16.930
that they weren't willing
to accept the compromises.

00:02:16.930 --> 00:02:20.100
And they listed things like
compromises in performance,

00:02:20.100 --> 00:02:23.610
compromises in being able to
meet their design expectations,

00:02:23.610 --> 00:02:26.460
or compromises in terms
of reaching their user

00:02:26.460 --> 00:02:27.210
expectations.

00:02:27.210 --> 00:02:30.550
The expected feel.

00:02:30.550 --> 00:02:33.204
And so with this information,
we thought to ourselves,

00:02:33.204 --> 00:02:33.870
I mean, come on.

00:02:33.870 --> 00:02:36.660
We had done lots of
various other development.

00:02:36.660 --> 00:02:39.164
We knew that there
must be a better way.

00:02:39.164 --> 00:02:40.830
We felt that you
should be able to build

00:02:40.830 --> 00:02:42.807
a single, unified team.

00:02:42.807 --> 00:02:45.140
Where you have one team where
you can send all your code

00:02:45.140 --> 00:02:46.336
reviews.

00:02:46.336 --> 00:02:48.020
You know, one single codebase.

00:02:48.020 --> 00:02:50.910
That you should be able to
build features only once,

00:02:50.910 --> 00:02:52.650
and make them maybe
twice as beautiful,

00:02:52.650 --> 00:02:55.140
with twice the people.

00:02:55.140 --> 00:02:58.040
That custom could,
and should, be easy.

00:02:58.040 --> 00:03:02.280
And that once you've done your
awesome custom-branded thing,

00:03:02.280 --> 00:03:04.560
it should be portable.

00:03:04.560 --> 00:03:06.565
And then finally, that
dev cycles could be fast.

00:03:06.565 --> 00:03:08.190
I mean, we have this
on the web, right?

00:03:08.190 --> 00:03:10.770
We have subsecond cycles
for some configurations.

00:03:10.770 --> 00:03:14.010
Why can't we do that on mobile?

00:03:14.010 --> 00:03:15.960
And so we set out
to build something.

00:03:15.960 --> 00:03:18.910
And, well, we built
some cool stuff.

00:03:18.910 --> 00:03:20.090
So I want to show you.

00:03:20.090 --> 00:03:24.775
And I'm going to start
moving with this device here.

00:03:29.640 --> 00:03:33.751
And so what I have in front
of you, as it boots up-- here

00:03:33.751 --> 00:03:34.250
we go.

00:03:34.250 --> 00:03:36.050
What I have in
front of you today

00:03:36.050 --> 00:03:39.690
is an iOS and Android
app-- or, I'm sorry,

00:03:39.690 --> 00:03:43.530
an iOS and Android phone,
not particularly new phones,

00:03:43.530 --> 00:03:46.980
on which I've installed one
of our demo apps, the Flutter

00:03:46.980 --> 00:03:47.480
Gallery.

00:03:47.480 --> 00:03:49.188
We built this to show
off all the widgets

00:03:49.188 --> 00:03:51.410
that we built for Google teams.

00:03:51.410 --> 00:03:54.080
And the first thing you'll
notice is it's fast.

00:03:54.080 --> 00:03:55.579
You may not have
even noticed that,

00:03:55.579 --> 00:03:57.620
or you may not have even
seen it, it was so fast.

00:03:57.620 --> 00:03:58.940
But it just-- boom!

00:03:58.940 --> 00:04:00.140
Right back up.

00:04:00.140 --> 00:04:00.680
It's fast.

00:04:00.680 --> 00:04:02.270
It sticks to your finger.

00:04:02.270 --> 00:04:03.830
It scrolls.

00:04:03.830 --> 00:04:06.315
The animations are smooth.

00:04:06.315 --> 00:04:08.990
The next thing you might
notice is that it's pretty.

00:04:08.990 --> 00:04:11.710
Like, the text is pretty
on both iOS and Android,

00:04:11.710 --> 00:04:14.030
different fonts.

00:04:14.030 --> 00:04:16.100
The animations are pretty.

00:04:16.100 --> 00:04:18.740
The widget sets are pretty.

00:04:18.740 --> 00:04:22.879
You get a ton of widgets,
just out of the box.

00:04:22.879 --> 00:04:24.920
And then, of course, one
thing you'll also notice

00:04:24.920 --> 00:04:27.050
is that it should feel natural.

00:04:27.050 --> 00:04:30.110
Like, it does the bounce on iOS.

00:04:30.110 --> 00:04:32.000
It does the
overscroll on Android.

00:04:34.820 --> 00:04:38.026
The iconography is different,
as you would expect.

00:04:38.026 --> 00:04:39.526
And even the gestures
are different.

00:04:43.559 --> 00:04:45.600
But there's one more thing,
which is particularly

00:04:45.600 --> 00:04:47.840
applicable to this crowd.

00:04:47.840 --> 00:04:50.430
In that everything
you've seen so far--

00:04:50.430 --> 00:04:55.860
every pixel, every widget, every
gesture, even the compositor

00:04:55.860 --> 00:04:59.494
and the text
editing, is all Dart.

00:04:59.494 --> 00:05:02.380
[APPLAUSE]

00:05:07.054 --> 00:05:08.345
So let's go back to the slides.

00:05:08.345 --> 00:05:09.630
And we can talk a little more.

00:05:24.280 --> 00:05:25.749
So what did we just see?

00:05:25.749 --> 00:05:27.790
So hopefully, you got to
see, well, first of all,

00:05:27.790 --> 00:05:28.870
that Flutter is real.

00:05:28.870 --> 00:05:29.890
It's a thing.

00:05:29.890 --> 00:05:31.390
It exists.

00:05:31.390 --> 00:05:33.160
It's fast.

00:05:33.160 --> 00:05:34.570
It, again, scrolls fast.

00:05:34.570 --> 00:05:35.770
It animates smoothly.

00:05:35.770 --> 00:05:37.630
It responds to your finger.

00:05:37.630 --> 00:05:38.680
It should be pretty.

00:05:38.680 --> 00:05:39.430
It's beautiful.

00:05:39.430 --> 00:05:41.410
It has tons of beautiful
widgets built-in.

00:05:41.410 --> 00:05:43.750
It does animations easily.

00:05:43.750 --> 00:05:46.450
And it should feel
natural and be natural.

00:05:46.450 --> 00:05:49.480
We believe strongly that
you should come to the user.

00:05:49.480 --> 00:05:51.590
You should match
their expectations.

00:05:51.590 --> 00:05:54.450
That if their thumb has some
muscle memory about what to do,

00:05:54.450 --> 00:05:56.240
that that's what
your app should do.

00:05:56.240 --> 00:05:58.000
And so we embrace
that with Flutter--

00:05:58.000 --> 00:06:00.754
that you're not writing one
least common denominator app.

00:06:00.754 --> 00:06:02.170
But rather, you're
writing the app

00:06:02.170 --> 00:06:04.128
that fits the user's
expectations of the device

00:06:04.128 --> 00:06:05.115
that it's installed on.

00:06:07.900 --> 00:06:11.770
So we're obviously not the first
to think about cross-platform.

00:06:11.770 --> 00:06:13.610
There's many others
in this space.

00:06:13.610 --> 00:06:17.360
But I do think that there's a
bunch of insights that we had,

00:06:17.360 --> 00:06:20.170
some things that we chose to
do differently, that I think

00:06:20.170 --> 00:06:22.120
do make us special.

00:06:22.120 --> 00:06:24.610
And the first thing
I want to talk about

00:06:24.610 --> 00:06:27.700
is actually how we went
about building this.

00:06:27.700 --> 00:06:30.880
So when we went to build this,
we went looking around for,

00:06:30.880 --> 00:06:33.280
what is the technology
stack that a better

00:06:33.280 --> 00:06:35.800
cross-platform solution
should be built on?

00:06:35.800 --> 00:06:37.660
And we were perhaps a
little bit surprised

00:06:37.660 --> 00:06:41.290
that it was all just lying
right in front of us.

00:06:41.290 --> 00:06:44.290
But the difficulty was
that these awesome pieces

00:06:44.290 --> 00:06:49.630
of technology were actually
buried deep in other platforms.

00:06:49.630 --> 00:06:53.200
Buried under layers and layers
and layers of legacy and tons

00:06:53.200 --> 00:06:55.990
of features that either
didn't matter on mobile,

00:06:55.990 --> 00:06:58.720
or they didn't need anymore.

00:06:58.720 --> 00:07:01.010
And so we went digging
for quite a while.

00:07:01.010 --> 00:07:03.010
We went mining in the hills.

00:07:03.010 --> 00:07:04.900
And I think we
pulled out a bunch

00:07:04.900 --> 00:07:07.960
of really nice golden nuggets.

00:07:07.960 --> 00:07:10.360
And this matters to
you, because this

00:07:10.360 --> 00:07:12.130
is battle-hardened software.

00:07:12.130 --> 00:07:15.590
This is not, you know,
from green implementation.

00:07:15.590 --> 00:07:19.030
This is just the slimmed-down
and awesomest versions

00:07:19.030 --> 00:07:21.340
of the platforms that you
already know and love.

00:07:21.340 --> 00:07:24.070
So, like, we took some of our
graphics stack from Chrome,

00:07:24.070 --> 00:07:26.200
some of our graphics
stack from Android.

00:07:26.200 --> 00:07:30.250
We took a bunch of our text
from WebKit and Chrome.

00:07:30.250 --> 00:07:33.310
But way, way, way
slimmed-down, as opposed

00:07:33.310 --> 00:07:35.120
to what is in those platforms.

00:07:35.120 --> 00:07:37.540
And, of course, we actually
started in a totally different

00:07:37.540 --> 00:07:39.910
language.

00:07:39.910 --> 00:07:41.530
That didn't work out so well.

00:07:41.530 --> 00:07:43.360
We tried a couple
other languages--

00:07:43.360 --> 00:07:45.040
those didn't work out so well.

00:07:45.040 --> 00:07:47.840
And went on a rather
long search, in which

00:07:47.840 --> 00:07:49.701
we found, eventually, Dart.

00:07:49.701 --> 00:07:51.700
And we use an even slightly
slimmed-down version

00:07:51.700 --> 00:07:53.321
of Dart inside our executable.

00:07:56.150 --> 00:08:00.040
So the second insight that
we had in building this

00:08:00.040 --> 00:08:03.550
was that we learned that
other platforms that

00:08:03.550 --> 00:08:05.600
have these expansive
APIs, particularly

00:08:05.600 --> 00:08:09.640
these cross-platform-- these
expansive API surfaces that

00:08:09.640 --> 00:08:11.930
are often the least
common denominator,

00:08:11.930 --> 00:08:15.040
and they're all packed
inside the engine

00:08:15.040 --> 00:08:18.430
itself, down below the
widgets-- other platforms often

00:08:18.430 --> 00:08:19.990
are like icebergs.

00:08:19.990 --> 00:08:23.200
You see and deal with the
top little widget layer,

00:08:23.200 --> 00:08:25.480
but there's so much
buried under the surface.

00:08:25.480 --> 00:08:27.700
We tried to invert
that with Flutter.

00:08:27.700 --> 00:08:29.620
And this matters
to you, because it

00:08:29.620 --> 00:08:33.110
means it puts you
way more in control.

00:08:33.110 --> 00:08:34.750
We found that dev
cared about the fact

00:08:34.750 --> 00:08:38.950
that we had shoved all
of our interesting code

00:08:38.950 --> 00:08:40.697
up into the framework layer.

00:08:40.697 --> 00:08:43.280
Which meant even things that you
might not have expected here,

00:08:43.280 --> 00:08:46.880
like editing, and our gesture
detection, and our compositor,

00:08:46.880 --> 00:08:50.090
et cetera-- it's all up
at the framework layer.

00:08:50.090 --> 00:08:52.940
Which means that you can,
you know, jump to definition

00:08:52.940 --> 00:08:53.950
all the way down.

00:08:53.950 --> 00:08:55.420
See exactly what we've done.

00:08:55.420 --> 00:08:58.220
Fork, change-- you're
in full control.

00:08:58.220 --> 00:09:01.120
And due to the beauty of
Dart, and Dart's ability

00:09:01.120 --> 00:09:03.681
to tree-shake, you only
pay for what you use.

00:09:07.300 --> 00:09:11.050
So another insight
that we had in building

00:09:11.050 --> 00:09:15.580
this was that modern
mobile developers-- well,

00:09:15.580 --> 00:09:17.850
modern mobile OSes
don't necessarily

00:09:17.850 --> 00:09:20.790
need to ship a UI framework.

00:09:20.790 --> 00:09:22.200
They do, today, obviously.

00:09:22.200 --> 00:09:23.980
But we've seen
success on desktop,

00:09:23.980 --> 00:09:27.510
we've seen success on the
web, that many applications

00:09:27.510 --> 00:09:30.420
ship beautiful apps
bundling their own.

00:09:30.420 --> 00:09:32.085
And the same is
now true on mobile.

00:09:32.085 --> 00:09:34.740
You see this all over
the place with games.

00:09:34.740 --> 00:09:37.940
No game uses the
built onto the ROM

00:09:37.940 --> 00:09:40.410
system-- there is no built
onto the ROM system for games.

00:09:40.410 --> 00:09:42.240
They all bring their
own beautiful engine

00:09:42.240 --> 00:09:44.640
and do amazing
experiences with that.

00:09:44.640 --> 00:09:46.590
And we found that
there was an advantage

00:09:46.590 --> 00:09:50.370
to doing the same on mobile--
or to doing the same for apps.

00:09:50.370 --> 00:09:52.450
And why this matters to
you, is that it puts you,

00:09:52.450 --> 00:09:54.690
again, more in control.

00:09:54.690 --> 00:10:00.690
You can deploy way back in time
to older phones, to older OSes.

00:10:00.690 --> 00:10:03.240
When the tides change, and
you want to change your look

00:10:03.240 --> 00:10:04.990
and feel, you don't
have to wait for users

00:10:04.990 --> 00:10:08.250
to upgrade so you can
use the latest widget.

00:10:08.250 --> 00:10:11.155
You just push them a new version
that you compiled yourself.

00:10:15.820 --> 00:10:18.620
The next insight we had
was less about technology

00:10:18.620 --> 00:10:20.420
and more about market shift.

00:10:20.420 --> 00:10:22.970
We looked at what people
were doing on mobile.

00:10:22.970 --> 00:10:25.130
We looked at what
the best apps were.

00:10:25.130 --> 00:10:27.940
What were the apps that
were winning awards?

00:10:27.940 --> 00:10:31.000
What were the apps that
users were downloading?

00:10:31.000 --> 00:10:34.480
And it turns out
there's a lot of custom.

00:10:34.480 --> 00:10:36.250
And this is a growing
segment we see.

00:10:36.250 --> 00:10:39.070
The best in class
user experiences

00:10:39.070 --> 00:10:42.520
are bespoke experiences that
are very brand-forward, very

00:10:42.520 --> 00:10:43.810
custom.

00:10:43.810 --> 00:10:46.839
And so we decided that
we want to target this.

00:10:46.839 --> 00:10:48.380
That we wanted to
build a system that

00:10:48.380 --> 00:10:50.130
was designed to make this easy.

00:10:53.370 --> 00:10:54.870
And the value for
you is, obviously,

00:10:54.870 --> 00:10:59.730
if it does make it easy, you
can do more of this yourself.

00:10:59.730 --> 00:11:01.400
So let's go back to that demo.

00:11:04.900 --> 00:11:12.669
And I want to show you
that same demo, but now

00:11:12.669 --> 00:11:13.960
with a different understanding.

00:11:17.500 --> 00:11:19.666
So this time, we only need
to use the Android phone.

00:11:24.240 --> 00:11:27.240
So go ahead and launch
the gallery again.

00:11:27.240 --> 00:11:29.730
So now you understand, again,
that all of this is Dart.

00:11:29.730 --> 00:11:33.320
Everything you see, everything
you feel, is all Dart.

00:11:33.320 --> 00:11:35.030
And one of the cool
things you can do,

00:11:35.030 --> 00:11:39.290
or something I'm here to do
to illustrate how custom this

00:11:39.290 --> 00:11:41.810
really is, is that there's
a little dividing feature

00:11:41.810 --> 00:11:43.216
we have.

00:11:43.216 --> 00:11:45.090
Where we can change what
the framework thinks

00:11:45.090 --> 00:11:46.254
it's running on.

00:11:46.254 --> 00:11:48.420
And I can tell the framework,
you're running on iOS.

00:11:51.530 --> 00:11:54.670
And now magically, you have
different scroll physics.

00:11:54.670 --> 00:11:57.259
You have a bounce.

00:11:57.259 --> 00:11:58.550
You have different iconography.

00:11:58.550 --> 00:12:01.394
[APPLAUSE]

00:12:06.610 --> 00:12:08.290
And you have cool gestures.

00:12:08.290 --> 00:12:11.661
And I'm not telling you that you
would ever want to ship this.

00:12:11.661 --> 00:12:13.660
Because, again, we believe
in coming to the user

00:12:13.660 --> 00:12:14.990
and matching their expectations.

00:12:14.990 --> 00:12:16.781
But what this is, is
an illustration to you

00:12:16.781 --> 00:12:19.870
of how much control you have.

00:12:19.870 --> 00:12:23.960
If you want to have a back
shimmy, you know, go for it!

00:12:23.960 --> 00:12:28.640
The entire gesture detector
is yours to control.

00:12:28.640 --> 00:12:36.410
So let's go do our little
shimmy between devices again.

00:12:36.410 --> 00:12:37.748
Go back to the slides.

00:12:42.660 --> 00:12:44.415
So that was our demos.

00:12:44.415 --> 00:12:45.790
We are at a
developer conference,

00:12:45.790 --> 00:12:48.310
so we should talk a little
bit about development.

00:12:48.310 --> 00:12:50.060
I think maybe we should
show you what it's

00:12:50.060 --> 00:12:53.110
like to develop a Flutter app.

00:12:53.110 --> 00:12:56.110
So let's go and bust
out IntelliJ, which

00:12:56.110 --> 00:12:58.620
is a popular editor at Google.

00:12:58.620 --> 00:13:01.210
There's many editors that you
can write Flutter code in.

00:13:03.820 --> 00:13:05.186
But this one happens to be nice.

00:13:09.850 --> 00:13:13.110
So let's go ahead and
create a new project.

00:13:13.110 --> 00:13:15.190
And we also have a Flutter
plugin for IntelliJ--

00:13:15.190 --> 00:13:16.950
actually just
released last night.

00:13:16.950 --> 00:13:18.180
[APPLAUSE]

00:13:18.180 --> 00:13:26.470
Which makes some of this easier.

00:13:26.470 --> 00:13:31.890
So we got to Flutter, and
let's make a totally rad demo.

00:13:31.890 --> 00:13:36.390
We'll call it "Rad Demo."

00:13:36.390 --> 00:13:38.590
And what's happening
there is that it

00:13:38.590 --> 00:13:40.830
is going off and
telling Flutter tooling

00:13:40.830 --> 00:13:43.590
to go create the
underlying Xcode project,

00:13:43.590 --> 00:13:45.960
create the underlying
Android build setup.

00:13:45.960 --> 00:13:50.690
And dump you a very
small little Flutter app.

00:13:50.690 --> 00:13:53.860
And so now we have our
little 70-line demo Flutter

00:13:53.860 --> 00:13:55.540
app, most of which is comments.

00:13:55.540 --> 00:13:57.040
Which, we just click
the Run button.

00:14:00.870 --> 00:14:03.160
And it, again, tells
the Flutter tooling,

00:14:03.160 --> 00:14:05.490
go run this on some
connected device.

00:14:05.490 --> 00:14:06.960
IntelliJ doesn't have to know.

00:14:06.960 --> 00:14:08.709
And Flutter, of course,
abstracts you away

00:14:08.709 --> 00:14:10.890
from the idea of, is this
Android, or is this iOS?

00:14:10.890 --> 00:14:13.980
It's just a mobile thing to you.

00:14:13.980 --> 00:14:16.050
But the mobile thing we're
going to run on today

00:14:16.050 --> 00:14:17.730
is this iOS simulator here.

00:14:17.730 --> 00:14:19.800
So here we have,
you know-- whatever

00:14:19.800 --> 00:14:23.440
that was, 90 seconds in, we have
running, on iOS and Android,

00:14:23.440 --> 00:14:25.980
our very first Flutter app.

00:14:25.980 --> 00:14:27.680
And it just has
a little counter.

00:14:27.680 --> 00:14:29.940
Clicks the button-- creases.

00:14:29.940 --> 00:14:32.090
But we can make this fancier.

00:14:32.090 --> 00:14:35.200
And that's what I
actually want to show you.

00:14:35.200 --> 00:14:37.860
So say we don't like blue,
because we like green instead.

00:14:37.860 --> 00:14:39.130
We'll just change it!

00:14:39.130 --> 00:14:41.776
[APPLAUSE]

00:14:45.040 --> 00:14:48.560
Maybe my designer
likes orange today.

00:14:48.560 --> 00:14:50.710
I'll go back to green.

00:14:50.710 --> 00:14:51.290
Yeah.

00:14:51.290 --> 00:14:55.750
So we measure our development
cycle in milliseconds.

00:14:55.750 --> 00:14:58.540
And you'll notice that
we never lost any state.

00:14:58.540 --> 00:15:02.350
We still tapped the
button seven times.

00:15:02.350 --> 00:15:04.380
Our app is still running.

00:15:04.380 --> 00:15:07.640
But we can do more
complicated things.

00:15:07.640 --> 00:15:12.329
So say we want to change this
text-- maybe this is touched.

00:15:12.329 --> 00:15:13.120
We update the text.

00:15:13.120 --> 00:15:15.330
You see, of course, it changes.

00:15:15.330 --> 00:15:18.100
Maybe we want to
change the center.

00:15:18.100 --> 00:15:20.690
We can make this a column.

00:15:20.690 --> 00:15:21.520
We run it.

00:15:21.520 --> 00:15:23.200
Whoops.

00:15:23.200 --> 00:15:25.870
We made an error.

00:15:25.870 --> 00:15:28.310
We can see in
IntelliJ, it tells us,

00:15:28.310 --> 00:15:30.350
it's underlining this
child, saying, that is not

00:15:30.350 --> 00:15:34.000
a valid parameter for column.

00:15:34.000 --> 00:15:37.190
And Flutter took the
reload, but it's like, ah, I

00:15:37.190 --> 00:15:39.820
don't know what to do.

00:15:39.820 --> 00:15:42.710
No, I could go read the docs
to remember what Column does.

00:15:42.710 --> 00:15:44.050
Or I could just click on Column.

00:15:44.050 --> 00:15:46.450
Because, again, all of
our code is up on Dart.

00:15:46.450 --> 00:15:48.459
You can keep clicking
all the way down.

00:15:48.459 --> 00:15:49.875
We can go read and
say, oh, Column

00:15:49.875 --> 00:15:51.140
takes "children," not "child."

00:15:51.140 --> 00:15:52.910
Of course.

00:15:52.910 --> 00:15:55.310
So we change this to children.

00:15:55.310 --> 00:15:57.350
And now it's still mad at us.

00:15:57.350 --> 00:15:59.860
The analyzer is still giving
us little red squiggles,

00:15:59.860 --> 00:16:01.180
which we're used to in Dart.

00:16:01.180 --> 00:16:02.680
So let's change
this to be an array.

00:16:05.700 --> 00:16:07.450
I think that's the one I wanted.

00:16:07.450 --> 00:16:10.200
And then, we can, of
course, reformat it.

00:16:10.200 --> 00:16:11.105
And we run it again.

00:16:11.105 --> 00:16:12.730
And we've still
touched it seven times.

00:16:12.730 --> 00:16:14.100
We fixed our error.

00:16:14.100 --> 00:16:16.866
[APPLAUSE]

00:16:22.680 --> 00:16:26.570
So let's go ahead and add some
more text, because why not?

00:16:26.570 --> 00:16:28.070
New text.

00:16:28.070 --> 00:16:32.494
"Demos are fun!"

00:16:32.494 --> 00:16:33.910
And now we have
two lines of text.

00:16:33.910 --> 00:16:36.190
We could maybe
change the spacing.

00:16:36.190 --> 00:16:40.570
On this, unless we can
do main axis alignment.

00:16:40.570 --> 00:16:43.590
Spread evenly-- space evenly.

00:16:43.590 --> 00:16:44.200
Sure, great.

00:16:44.200 --> 00:16:45.700
Now they're all spaced out.

00:16:45.700 --> 00:16:47.574
We could do something
a little more exciting.

00:16:47.574 --> 00:16:50.740
We can do, like,
new Flutter logo.

00:16:50.740 --> 00:16:51.990
Oh, that's too small.

00:16:51.990 --> 00:16:52.880
We'll fix the size.

00:16:56.410 --> 00:16:57.654
There we go.

00:16:57.654 --> 00:16:59.320
Hey, well, maybe we'll
change the color.

00:17:03.550 --> 00:17:04.750
Whoops!

00:17:04.750 --> 00:17:06.400
Colors.

00:17:06.400 --> 00:17:08.619
There you go.

00:17:08.619 --> 00:17:11.409
[APPLAUSE]

00:17:14.528 --> 00:17:16.819
Obviously, you could build
much more complicated things

00:17:16.819 --> 00:17:18.136
than that.

00:17:18.136 --> 00:17:19.760
But that's what
Flutter development is.

00:17:19.760 --> 00:17:21.384
And here, again, it
took us two minutes

00:17:21.384 --> 00:17:25.390
to do this tiny
little pretty app.

00:17:25.390 --> 00:17:27.430
But I want to show you
more than just IntelliJ.

00:17:27.430 --> 00:17:29.480
Because maybe you don't
like working in ID.

00:17:29.480 --> 00:17:30.350
That's fine.

00:17:30.350 --> 00:17:33.770
Some of my team work
in Emacs or Vim.

00:17:33.770 --> 00:17:39.710
So just like our framework
is layered, heavily layered,

00:17:39.710 --> 00:17:42.230
we also have done
our tools in layers.

00:17:42.230 --> 00:17:45.070
So we can pull out
our command line.

00:17:45.070 --> 00:17:47.620
And let's up the
size a little bit.

00:17:47.620 --> 00:17:49.840
And we have a little Flutter
tool, which, you know,

00:17:49.840 --> 00:17:51.700
spews all the commands
that it supports.

00:17:51.700 --> 00:17:55.150
The Flutter tool abstracts
away the idea of mobile.

00:17:55.150 --> 00:17:57.150
So you don't have to care
about iOS or Android--

00:17:57.150 --> 00:17:59.750
it just handles the
details for you.

00:17:59.750 --> 00:18:06.317
So if we, like, connect
our Android device here--

00:18:06.317 --> 00:18:09.030
so this is our physical
device we were just using.

00:18:09.030 --> 00:18:11.790
And we say, type,
Flutter devices.

00:18:11.790 --> 00:18:14.715
You know, Flutter now
shows us both, of course.

00:18:14.715 --> 00:18:16.590
We also have some other
fun commands in here.

00:18:16.590 --> 00:18:17.970
Like you can take
screenshots and do

00:18:17.970 --> 00:18:20.344
performance profiling, and
debugging, and all that stuff.

00:18:20.344 --> 00:18:22.250
All from the command line.

00:18:22.250 --> 00:18:24.570
We can do Flutter Doctor.

00:18:24.570 --> 00:18:26.539
Flutter Doctor is
something that we built,

00:18:26.539 --> 00:18:28.830
because we found our customers
had some trouble getting

00:18:28.830 --> 00:18:31.830
all the various pieces of
mobile development set up.

00:18:31.830 --> 00:18:33.300
So we wrote a little
helper to help

00:18:33.300 --> 00:18:35.930
them know how to walk
through the steps,

00:18:35.930 --> 00:18:39.300
and verify if their environment
was set up correctly.

00:18:39.300 --> 00:18:42.410
So we can go back to our
demo that wrote, right?

00:18:42.410 --> 00:18:44.560
So we wrote this "Rad Demo."

00:18:44.560 --> 00:18:46.380
Whoops.

00:18:46.380 --> 00:18:48.630
And we can just Flutter run it.

00:18:48.630 --> 00:18:52.110
Let's do it in release mode,
so we can use Dart's AOT.

00:18:52.110 --> 00:18:53.874
And we'll do it on
our Nexus device.

00:18:56.510 --> 00:18:59.780
And so while that
goes ahead and builds,

00:18:59.780 --> 00:19:02.060
I'm going to go ahead
and swap back over.

00:19:10.250 --> 00:19:12.900
So right now, Flutter is talking
to the underlying toolchain.

00:19:12.900 --> 00:19:15.320
And it's, you know, it goes
and gets itself a doughnut,

00:19:15.320 --> 00:19:17.790
or whatever the toolchain does.

00:19:17.790 --> 00:19:20.750
And then it'll come back
to us with an assigned APK.

00:19:20.750 --> 00:19:22.810
And it'll install that
APK on our device.

00:19:22.810 --> 00:19:25.820
It looks like it's
finishing up now.

00:19:25.820 --> 00:19:28.090
Again, this is not your
development workflow.

00:19:28.090 --> 00:19:32.220
But now we have our release
ready to send to the Store app.

00:19:32.220 --> 00:19:36.039
That still counts buttons,
running on Android.

00:19:36.039 --> 00:19:37.205
Pick it up and take it away.

00:19:37.205 --> 00:19:40.175
[APPLAUSE]

00:19:46.300 --> 00:19:50.020
So that was a taste of
our developer experience.

00:19:50.020 --> 00:19:52.030
There's a whole talk on
our developer experience

00:19:52.030 --> 00:19:52.864
after this one.

00:19:52.864 --> 00:19:54.280
If you want to
learn more, there's

00:19:54.280 --> 00:19:55.932
lots of interesting
details there.

00:19:58.460 --> 00:20:01.640
Let's talk about what
we saw-- or maybe it

00:20:01.640 --> 00:20:03.940
wasn't all obvious-- one
of the things you did see,

00:20:03.940 --> 00:20:05.860
again, is the fast
developer cycle.

00:20:05.860 --> 00:20:08.670
We're doing subsecond,
millisecond-measured developer

00:20:08.670 --> 00:20:10.007
cycle.

00:20:10.007 --> 00:20:12.340
You got to see a little taste
of our functional reactive

00:20:12.340 --> 00:20:13.080
framework.

00:20:13.080 --> 00:20:16.350
You can learn a lot more
about it in Flutter.io.

00:20:16.350 --> 00:20:19.420
But this is just a
modern way to write UIs.

00:20:19.420 --> 00:20:21.997
The idea is it simplifies the
data flow in your application.

00:20:21.997 --> 00:20:24.330
It's easy for you to understand
where the data is going,

00:20:24.330 --> 00:20:28.540
because it always goes from
your model to your view.

00:20:28.540 --> 00:20:30.012
You write that code once.

00:20:30.012 --> 00:20:32.470
And then, of course, you did
get to see a little bit of the

00:20:32.470 --> 00:20:33.150
"to the metal" nature.

00:20:33.150 --> 00:20:35.108
We compiled straight to
native code on Android.

00:20:35.108 --> 00:20:37.280
We are, of course,
talking to the GPU.

00:20:37.280 --> 00:20:38.702
That's part of how we get fast.

00:20:41.400 --> 00:20:43.030
But we haven't
just been building

00:20:43.030 --> 00:20:46.800
technology for the last year
and a half since we last talked.

00:20:46.800 --> 00:20:50.280
We also have been, actually,
shipping this technology,

00:20:50.280 --> 00:20:52.900
but just inside Google.

00:20:52.900 --> 00:20:54.870
So we are entirely an
open-source project,

00:20:54.870 --> 00:20:57.600
but we do know how
important it is

00:20:57.600 --> 00:20:58.960
that we have Google customers.

00:20:58.960 --> 00:21:01.480
When we talk to externals, who
are like, what apps at Google

00:21:01.480 --> 00:21:02.527
are shipping with this?

00:21:02.527 --> 00:21:04.610
What apps with Google have
this on the Play Store?

00:21:04.610 --> 00:21:07.080
And the answer is,
there's a lot in progress.

00:21:07.080 --> 00:21:09.010
But none are shipping today.

00:21:09.010 --> 00:21:10.480
But we have had
close relationships

00:21:10.480 --> 00:21:11.499
with Google teams.

00:21:11.499 --> 00:21:13.540
We've been paving the road
right in front of them

00:21:13.540 --> 00:21:14.820
as they've been building out.

00:21:14.820 --> 00:21:17.110
We've been working with
them to make sure that we're

00:21:17.110 --> 00:21:18.820
building the right thing.

00:21:18.820 --> 00:21:21.310
That it's being
battle-hardened as we go.

00:21:23.817 --> 00:21:25.650
And one of the teams
that is visiting today,

00:21:25.650 --> 00:21:29.070
so I can talk about their app a
little bit, is the Google CRM.

00:21:29.070 --> 00:21:33.220
These guys had used Dart
already successfully on the web.

00:21:33.220 --> 00:21:35.440
They had also built
themselves an Android app

00:21:35.440 --> 00:21:37.590
natively in Java.

00:21:37.590 --> 00:21:40.720
And then they came to
Flutter, because they were not

00:21:40.720 --> 00:21:43.750
particularly interested in
paying to build another team

00:21:43.750 --> 00:21:45.089
to do an iOS app.

00:21:45.089 --> 00:21:46.630
They were like, hey,
can we take some

00:21:46.630 --> 00:21:49.380
of our Dart knowledge,
our Android familiarity,

00:21:49.380 --> 00:21:52.050
and just build for mobile?

00:21:52.050 --> 00:21:52.780
And they did.

00:21:52.780 --> 00:21:55.170
And they said it
took them, you know,

00:21:55.170 --> 00:21:58.330
less time, fewer
engineers, less code.

00:21:58.330 --> 00:22:01.560
They got 3x the productivity
versus their Android build-out.

00:22:01.560 --> 00:22:04.980
And they also, of course,
got the other OS for free.

00:22:04.980 --> 00:22:07.868
[APPLAUSE]

00:22:12.610 --> 00:22:14.980
So I should tell you
that we are still

00:22:14.980 --> 00:22:18.370
a tech preview, and that's, you
know, for a variety of reasons.

00:22:18.370 --> 00:22:21.210
But we're not entirely
ready for all apps.

00:22:21.210 --> 00:22:23.350
That's not what I'm
here to tell you today.

00:22:23.350 --> 00:22:26.760
We have very much
tested our hypotheses.

00:22:26.760 --> 00:22:29.410
We know that the
hard stuff is done.

00:22:29.410 --> 00:22:31.870
We're working really on
productionization now.

00:22:31.870 --> 00:22:34.600
All the testing-- and make
sure that all our matrices,

00:22:34.600 --> 00:22:36.347
all devices, et cetera,
are all covered.

00:22:36.347 --> 00:22:38.680
And we do have some big arcs
of work left, some of which

00:22:38.680 --> 00:22:39.400
we've started on.

00:22:39.400 --> 00:22:42.000
You know, making sure our
accessibility is amazing.

00:22:42.000 --> 00:22:43.500
Making sure our
internationalization

00:22:43.500 --> 00:22:44.989
is amazing.

00:22:44.989 --> 00:22:47.530
Making sure you can develop for
Windows, which I suspect many

00:22:47.530 --> 00:22:49.740
in this audience do.

00:22:49.740 --> 00:22:52.080
But all of our source
is open on GitHub today.

00:22:52.080 --> 00:22:55.507
You can try Flutter today.

00:22:55.507 --> 00:22:56.840
You can watch us do development.

00:22:59.460 --> 00:23:02.240
And, of course, there's more
to learn about Flutter today.

00:23:02.240 --> 00:23:03.810
There's not just this talk.

00:23:03.810 --> 00:23:06.514
There's more about our dev
cycle in the next talk.

00:23:06.514 --> 00:23:07.930
They talk about
all the cool stuff

00:23:07.930 --> 00:23:10.390
that was built in
Dart to make Flutter

00:23:10.390 --> 00:23:12.310
possible at later talks.

00:23:12.310 --> 00:23:18.240
And you're hearing from one of
our customers this afternoon.

00:23:18.240 --> 00:23:23.525
So I hope you agree that we've
made some significant progress

00:23:23.525 --> 00:23:24.400
since we last talked.

00:23:24.400 --> 00:23:26.170
There's no more spinning cubes.

00:23:26.170 --> 00:23:29.110
We're a little past that.

00:23:29.110 --> 00:23:30.880
I hope that you
better understand

00:23:30.880 --> 00:23:34.290
after this talk how our
approach to mobile is different.

00:23:34.290 --> 00:23:36.270
We're not using OEM widgets.

00:23:36.270 --> 00:23:38.160
You know, we're doing
direct to the metal.

00:23:38.160 --> 00:23:39.550
And we believe
that this provides

00:23:39.550 --> 00:23:42.690
us some unique advantages.

00:23:42.690 --> 00:23:44.577
And I also hope
that you understand

00:23:44.577 --> 00:23:46.660
that even though you don't
see it in the wild yet,

00:23:46.660 --> 00:23:48.720
Flutter is actively
at use in Google.

00:23:48.720 --> 00:23:51.940
There are lots of people
writing Flutter code.

00:23:51.940 --> 00:23:55.260
And you can learn a
lot more at Flutter.io.

00:23:55.260 --> 00:23:57.940
So thank you all very much.

00:23:57.940 --> 00:24:00.990
[APPLAUSE]

