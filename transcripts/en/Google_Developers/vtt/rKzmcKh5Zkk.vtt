WEBVTT
Kind: captions
Language: en

00:00:00.917 --> 00:00:01.833
JAKE ARCHIBALD: Right.

00:00:01.833 --> 00:00:05.830
So joining me here-- hopefully
this dock is going to update,

00:00:05.830 --> 00:00:09.820
and I'll find out what we're
actually talking about.

00:00:09.820 --> 00:00:11.070
ALEX RUSSELL: Just make it up.

00:00:11.070 --> 00:00:12.070
JAKE ARCHIBALD: I am going
to have to make it up.

00:00:12.070 --> 00:00:13.820
This dock is not updating.

00:00:13.820 --> 00:00:17.140
It updated on the tablet, so
let's switch to that instead.

00:00:17.140 --> 00:00:18.090
Always have a backup.

00:00:21.547 --> 00:00:23.380
All right, so joining
me on the panel today,

00:00:23.380 --> 00:00:25.670
we've got-- where is
he-- Alex Russell, right?

00:00:25.670 --> 00:00:27.640
You saw him yesterday
talking about the web

00:00:27.640 --> 00:00:28.850
apps and the Service Worker.

00:00:28.850 --> 00:00:32.590
Mike Tsao, who is the engineer
on Chrome apps and extensions.

00:00:32.590 --> 00:00:35.660
Adrienne Porter Felt, who
spoke yesterday on permissions.

00:00:35.660 --> 00:00:37.430
Alex Komoroski,
who is the product

00:00:37.430 --> 00:00:39.530
manager on Polymer and Blink.

00:00:39.530 --> 00:00:41.810
Greg Simon, right
at the end there,

00:00:41.810 --> 00:00:43.800
engineering director of Chrome.

00:00:43.800 --> 00:00:46.707
And Andrew Grieve,
engineer on Cordova, right?

00:00:46.707 --> 00:00:47.540
ANDREW GRIEVE: Yeah.

00:00:47.540 --> 00:00:48.440
JAKE ARCHIBALD: Cool.

00:00:48.440 --> 00:00:50.390
I noticed, when I was writing
down all the names for this,

00:00:50.390 --> 00:00:52.910
is that almost everyone's
name here begins with A.

00:00:52.910 --> 00:00:55.410
And I'm starting to feel
like Google assigns jobs

00:00:55.410 --> 00:00:58.470
based on alliteration.

00:00:58.470 --> 00:01:01.630
Alex, Adrienne, Alex, Andrew,
you work on apps, you see.

00:01:01.630 --> 00:01:02.840
And we got Paul Lewis.

00:01:02.840 --> 00:01:05.050
Paul works on performance.

00:01:05.050 --> 00:01:07.580
Matt works on material design.

00:01:07.580 --> 00:01:10.311
Jake, just be happy with a job.

00:01:10.311 --> 00:01:13.540
[LAUGHTER]

00:01:13.540 --> 00:01:16.100
So, yeah, we're here to talk
about the future of apps.

00:01:16.100 --> 00:01:17.933
We've got some questions
already that you've

00:01:17.933 --> 00:01:19.700
been submitting
to the moderator.

00:01:19.700 --> 00:01:22.730
But keeping them coming in
via the details on the screen.

00:01:22.730 --> 00:01:25.980
There's the hashtag, the Twitter
account on the moderated panel.

00:01:25.980 --> 00:01:29.560
And hopefully, this talk
will be updated live.

00:01:29.560 --> 00:01:35.460
So first up, to kind of start us
off, what is a web app and why?

00:01:35.460 --> 00:01:37.490
Alex, do you want
to start with that?

00:01:37.490 --> 00:01:38.364
ALEX KOMOROSKE: Sure.

00:01:38.364 --> 00:01:42.060
So I think people have this
difference between sites, which

00:01:42.060 --> 00:01:43.680
are more static
content, and apps

00:01:43.680 --> 00:01:45.965
which feel more
like native things.

00:01:45.965 --> 00:01:47.340
In our perspective,
it's actually

00:01:47.340 --> 00:01:48.540
much more of a spectrum.

00:01:48.540 --> 00:01:50.650
So you can apply the
labels wherever you want.

00:01:50.650 --> 00:01:52.490
But ultimately, different
types of use cases

00:01:52.490 --> 00:01:54.470
are going to have different
sweet spots for it.

00:01:54.470 --> 00:01:59.020
So something that's more like
an app will work offline,

00:01:59.020 --> 00:02:00.780
will have things like
push notifications

00:02:00.780 --> 00:02:01.840
and that kind of stuff.

00:02:01.840 --> 00:02:03.840
JAKE ARCHIBALD: So you
would say, at the moment,

00:02:03.840 --> 00:02:06.040
there on no web apps, then?

00:02:06.040 --> 00:02:08.130
ALEX KOMOROSKE: Ooh,
that's a good point.

00:02:08.130 --> 00:02:10.213
I think that you can still
have an app experience,

00:02:10.213 --> 00:02:12.007
and you can use stuff
that exists today

00:02:12.007 --> 00:02:13.840
to make something that's
as good as you can.

00:02:13.840 --> 00:02:15.130
So one of the things that's
important to emphasize,

00:02:15.130 --> 00:02:17.050
too, I think, and one of the
reasons why it makes sense

00:02:17.050 --> 00:02:19.258
to do a web app is what
Darin talked about yesterday,

00:02:19.258 --> 00:02:20.280
I think.

00:02:20.280 --> 00:02:23.469
On native, you see that users
are using like 12 apps a month.

00:02:23.469 --> 00:02:25.510
Now this is great if you're
one of those 12 apps.

00:02:25.510 --> 00:02:27.470
But if you aren't, how are you
going to get to your users?

00:02:27.470 --> 00:02:29.928
How are you going to get people
to actually use your thing?

00:02:29.928 --> 00:02:32.330
And so the web is this great
way to reach your users,

00:02:32.330 --> 00:02:33.810
with zero friction.

00:02:33.810 --> 00:02:36.330
So you want to give the
best experience you can,

00:02:36.330 --> 00:02:37.024
be the on-ramp.

00:02:37.024 --> 00:02:39.190
And maybe, if you build a
really strong relationship

00:02:39.190 --> 00:02:40.970
with your users, you'll
convince them to install, maybe,

00:02:40.970 --> 00:02:41.735
your native app.

00:02:41.735 --> 00:02:44.730
Or maybe you won't need to if
you built a strong enough web

00:02:44.730 --> 00:02:45.230
experience.

00:02:45.230 --> 00:02:46.896
So I think that's one
of the reasons why

00:02:46.896 --> 00:02:49.510
it makes so much sense to really
be trying to make your web

00:02:49.510 --> 00:02:52.930
experience as strong as you can.

00:02:52.930 --> 00:02:55.242
JAKE ARCHIBALD: What would
you-- give us an example.

00:02:55.242 --> 00:02:56.200
GREG SIMON: Is this on?

00:02:56.200 --> 00:02:57.030
Testing.

00:02:57.030 --> 00:02:57.530
No?

00:02:57.530 --> 00:02:58.170
Yep.

00:02:58.170 --> 00:03:01.880
Just piling on what Alex
said, the first time

00:03:01.880 --> 00:03:05.760
that the bit flipped in my
head, this is a web app,

00:03:05.760 --> 00:03:09.070
was when I first used Gmail
in, I think, 2002 or 2003.

00:03:09.070 --> 00:03:10.240
I can't remember when.

00:03:10.240 --> 00:03:12.650
I was like, holy moly, like
this is-- it's not just

00:03:12.650 --> 00:03:14.420
reloading every time I click.

00:03:14.420 --> 00:03:18.850
Of course, it's loading, but
it's not-- I don't see it.

00:03:18.850 --> 00:03:20.000
It was just magical.

00:03:20.000 --> 00:03:22.869
And that was when the
bit flipped for me

00:03:22.869 --> 00:03:23.660
about the web apps.

00:03:23.660 --> 00:03:26.285
JAKE ARCHIBALD: So is that kind
of the seamlessness of one page

00:03:26.285 --> 00:03:28.850
doing all of the interacting
that gave it the app feel?

00:03:28.850 --> 00:03:32.200
GREG SIMON: Well, it was that,
but it was also the utility

00:03:32.200 --> 00:03:34.160
that I got out of using it.

00:03:34.160 --> 00:03:40.320
Simply by typing in a
URL, I got the same use

00:03:40.320 --> 00:03:44.731
as if I tapped on-- as if I ran
Outlook or something like that,

00:03:44.731 --> 00:03:45.230
right?

00:03:45.230 --> 00:03:47.229
Except that now it available
everywhere and like

00:03:47.229 --> 00:03:49.550
it just runs.

00:03:49.550 --> 00:03:52.110
JAKE ARCHIBALD: We've seen,
I think, for a lot of people,

00:03:52.110 --> 00:03:56.450
Gmail has replaced their
desktop client for email.

00:03:56.450 --> 00:03:58.960
And we've seen that
happen a lot in desktop.

00:03:58.960 --> 00:04:02.080
So why aren't we seeing
the same in mobile?

00:04:02.080 --> 00:04:03.331
What's in our way, Mike?

00:04:06.490 --> 00:04:12.380
MIKE TSAO: So, I think there
are three main reasons why

00:04:12.380 --> 00:04:18.060
the web versus data [? var-- ?]
where the web can improve.

00:04:18.060 --> 00:04:20.470
First, obviously is performance.

00:04:20.470 --> 00:04:23.796
And I think Ryan went into
a great amount of detail

00:04:23.796 --> 00:04:25.420
yesterday about what
we're doing there.

00:04:25.420 --> 00:04:27.422
We've got 60 frames per second.

00:04:27.422 --> 00:04:28.880
And if we keep
doing our job, we'll

00:04:28.880 --> 00:04:30.296
actually leave
some budget for you

00:04:30.296 --> 00:04:33.610
to do some work within
that 60 milliseconds.

00:04:33.610 --> 00:04:38.630
Capabilities, Alex is
definitely showing the path

00:04:38.630 --> 00:04:40.100
that we're taking there.

00:04:40.100 --> 00:04:42.600
Service Worker is going to help
a lot with the offline case.

00:04:42.600 --> 00:04:45.800
And then on capabilities,
if Adrienne's work

00:04:45.800 --> 00:04:48.230
with the permissions
API allows us

00:04:48.230 --> 00:04:51.780
to bring some of the more
security sensitive capabilities

00:04:51.780 --> 00:04:54.240
to the web, that's a good thing.

00:04:54.240 --> 00:04:58.900
But also, once what you've
built this performance capable

00:04:58.900 --> 00:05:00.490
app, what next?

00:05:00.490 --> 00:05:02.990
And I think discoverability
or stickiness

00:05:02.990 --> 00:05:05.930
or, I think, ease of recall--
is that the term that you

00:05:05.930 --> 00:05:09.735
used yesterday, yeah--
those are the things that

00:05:09.735 --> 00:05:11.860
are the difference between
an app that you've built

00:05:11.860 --> 00:05:14.590
and an app that actually
other people end up using.

00:05:14.590 --> 00:05:15.840
Because they can find it.

00:05:15.840 --> 00:05:19.590
They can get back to it and
add to home screens, certainly.

00:05:19.590 --> 00:05:22.627
Notifications, that's
another, more subtle way

00:05:22.627 --> 00:05:24.210
of reminding people
that you're there.

00:05:24.210 --> 00:05:26.537
JAKE ARCHIBALD: So why do we
need that stuff on mobile,

00:05:26.537 --> 00:05:28.370
because we don't seem
to need it on desktop?

00:05:28.370 --> 00:05:29.500
MIKE TSAO: I think we do.

00:05:29.500 --> 00:05:31.700
I think we do.

00:05:31.700 --> 00:05:37.850
I think that the web did well
with its strengths on desktop.

00:05:37.850 --> 00:05:40.850
But mobile is something
that's with you all the time.

00:05:40.850 --> 00:05:44.560
And sometimes there
are different contexts

00:05:44.560 --> 00:05:46.810
when an app is more relevant
than it was on a desktop,

00:05:46.810 --> 00:05:49.700
here, and certainly in
a mode of operation.

00:05:49.700 --> 00:05:52.020
And I think that
we're beginning to see

00:05:52.020 --> 00:05:56.080
some of the limits of
the web in that respect.

00:05:56.080 --> 00:05:58.152
GREG SIMON: Yeah, we need
to add to home screen

00:05:58.152 --> 00:05:59.610
on mobile, because
it's just really

00:05:59.610 --> 00:06:03.620
hard to type URLs on mobile.

00:06:03.620 --> 00:06:06.250
JAKE ARCHIBALD: But we've
got add to home screen now,

00:06:06.250 --> 00:06:07.480
so problem solved, right?

00:06:07.480 --> 00:06:08.660
GREG SIMON: No.

00:06:08.660 --> 00:06:10.180
First of all, it's
buried in the UI,

00:06:10.180 --> 00:06:13.004
like you have to like tap
and scroll and find it.

00:06:13.004 --> 00:06:14.420
JAKE ARCHIBALD:
But we're the ones

00:06:14.420 --> 00:06:15.544
that have buried it, right?

00:06:15.544 --> 00:06:16.570
We control the browser.

00:06:16.570 --> 00:06:18.052
Why have we done that?

00:06:18.052 --> 00:06:19.385
GREG SIMON: I can't answer that.

00:06:19.385 --> 00:06:21.410
ALEX RUSSELL: Well,
I can give it a shot.

00:06:21.410 --> 00:06:22.236
GREG SIMON: Sorry.

00:06:22.236 --> 00:06:27.200
The other thing is most websites
aren't built to run offline.

00:06:27.200 --> 00:06:31.240
They're built assuming you're
sitting at one end of a T3.

00:06:31.240 --> 00:06:34.470
And this was OK 10 years
ago, when most of the web

00:06:34.470 --> 00:06:36.960
was consumed on desktop.

00:06:36.960 --> 00:06:43.500
But now, if you install
a Java app on Android

00:06:43.500 --> 00:06:48.990
or a C app on iOS, you
take all the loading

00:06:48.990 --> 00:06:50.390
hit up front, right?

00:06:50.390 --> 00:06:55.770
And as soon as I tap it, it
just runs and just works.

00:06:55.770 --> 00:06:59.420
The web, I'm not sure
if it's cached or not.

00:06:59.420 --> 00:07:03.360
Or I jump into an elevator
and suddenly, I've

00:07:03.360 --> 00:07:05.680
got 8 out of 10
resources loaded.

00:07:05.680 --> 00:07:09.850
Oh, I can't use it.

00:07:09.850 --> 00:07:11.100
ALEX RUSSELL: Just a followup.

00:07:11.100 --> 00:07:12.080
Exactly what Greg said.

00:07:12.080 --> 00:07:14.060
But it's also the
case that we haven't

00:07:14.060 --> 00:07:16.500
had a strong signal until now.

00:07:16.500 --> 00:07:18.120
That something is Appy.

00:07:18.120 --> 00:07:19.560
We haven't known
that something is

00:07:19.560 --> 00:07:21.150
going to work well as an app.

00:07:21.150 --> 00:07:23.749
So it's the right thing to do
to leave the user in control

00:07:23.749 --> 00:07:25.790
of whether or not to decide
that something should

00:07:25.790 --> 00:07:27.090
be saved to their home screen.

00:07:27.090 --> 00:07:29.380
But what we haven't done
or haven't given ourselves,

00:07:29.380 --> 00:07:32.394
to date, has been the ability
to know that something wants

00:07:32.394 --> 00:07:33.810
to be treated like
an application.

00:07:33.810 --> 00:07:35.260
And so I think the
manifest format

00:07:35.260 --> 00:07:38.214
and Service Workers together
give us that strong signal.

00:07:38.214 --> 00:07:39.630
You've got responsive
breakpoints.

00:07:39.630 --> 00:07:40.546
You've got a manifest.

00:07:40.546 --> 00:07:41.690
You've got Service Workers.

00:07:41.690 --> 00:07:42.659
You're probably an app.

00:07:42.659 --> 00:07:44.700
And that's the sort of
signal that we can finally

00:07:44.700 --> 00:07:48.320
use to raise the priority
of that kind of UI

00:07:48.320 --> 00:07:50.724
and actually ask the user,
hey, this thing is an app.

00:07:50.724 --> 00:07:52.390
You're getting a lot
of value out of it.

00:07:52.390 --> 00:07:53.419
Do you want to keep it?

00:07:53.419 --> 00:07:55.210
Do you want to have it
on your home screen,

00:07:55.210 --> 00:07:59.330
without you sort of having to
divine, through use, that it's

00:07:59.330 --> 00:08:00.875
one of these Appy-like things.

00:08:00.875 --> 00:08:03.000
JAKE ARCHIBALD: So what's
the signal then for that?

00:08:03.000 --> 00:08:06.050
Is it the frequency of
visiting or the amount

00:08:06.050 --> 00:08:07.550
of time the user
spends on the site?

00:08:07.550 --> 00:08:09.360
ALEX RUSSELL: We have
talked quite a lot

00:08:09.360 --> 00:08:10.990
about a combination of factors.

00:08:10.990 --> 00:08:13.900
And I think that the
strongest contenders, so far,

00:08:13.900 --> 00:08:15.640
are the existence
of a Service Worker

00:08:15.640 --> 00:08:19.450
and a manifest and
some amount of reuse.

00:08:19.450 --> 00:08:21.850
Going to a website
once shouldn't get you

00:08:21.850 --> 00:08:24.560
a prompt or an info bar that
says, hey, install our app.

00:08:24.560 --> 00:08:28.079
I mean that's maybe the worst
part of the mobile web today.

00:08:28.079 --> 00:08:30.120
And so, people talk to us
and they're like, well,

00:08:30.120 --> 00:08:30.950
you're going to add a prompt.

00:08:30.950 --> 00:08:32.850
And I go like, have you
used the mobile web?

00:08:32.850 --> 00:08:35.179
Have you actually gone to
any websites on your phone,

00:08:35.179 --> 00:08:37.580
because, if you do, you
are seeing a banner that's

00:08:37.580 --> 00:08:39.440
worse than that all
the time, every time.

00:08:39.440 --> 00:08:42.435
So we'd like to do better than
the status quo, which is that,

00:08:42.435 --> 00:08:46.220
but only when users are
being engaged with something

00:08:46.220 --> 00:08:47.830
that's valuable to them.

00:08:47.830 --> 00:08:49.580
So I think that's going
to be the dynamic.

00:08:49.580 --> 00:08:52.010
But again, we don't want
to gate the capabilities

00:08:52.010 --> 00:08:54.880
and permissions that we were
talking about yesterday,

00:08:54.880 --> 00:08:57.697
based on some sort of an install
for or some upfront grant,

00:08:57.697 --> 00:08:59.530
where users have to
decide to keep something

00:08:59.530 --> 00:09:01.166
to get a useful website.

00:09:01.166 --> 00:09:02.790
If I go to an airline
website, I should

00:09:02.790 --> 00:09:05.760
be able to have it notify me
later, in the background--

00:09:05.760 --> 00:09:07.822
months later, maybe--
without me ever

00:09:07.822 --> 00:09:10.030
having to decide to take up
some valuable home screen

00:09:10.030 --> 00:09:11.510
real estate for it.

00:09:11.510 --> 00:09:13.010
That's maybe something
I want to do,

00:09:13.010 --> 00:09:14.445
but it should be
optional as well.

00:09:14.445 --> 00:09:15.320
JAKE ARCHIBALD: Cool.

00:09:15.320 --> 00:09:16.632
So we'll take live questions.

00:09:16.632 --> 00:09:17.590
Actually, there you go.

00:09:17.590 --> 00:09:18.160
You're there.

00:09:18.160 --> 00:09:19.230
You can ask a question.

00:09:19.230 --> 00:09:21.026
Well done.

00:09:21.026 --> 00:09:23.150
AUDIENCE: So one big
difference between native apps

00:09:23.150 --> 00:09:26.600
and mobile apps, web apps, is
that you can ask permission

00:09:26.600 --> 00:09:30.410
during the life of the use
of the application, where

00:09:30.410 --> 00:09:32.950
when you install an app, right
now, on Android, for example,

00:09:32.950 --> 00:09:36.126
you grant those ahead of time.

00:09:36.126 --> 00:09:38.750
The thing is, if you had to home
screen now, all of the sudden,

00:09:38.750 --> 00:09:41.250
you have the browser UI
that reads the peers.

00:09:41.250 --> 00:09:45.500
And you don't have any mechanism
to go in and grant or revoke

00:09:45.500 --> 00:09:46.110
permissions.

00:09:46.110 --> 00:09:48.335
How do you plan on
solving issues like that?

00:09:48.335 --> 00:09:50.460
ADRIENNE PORTER FELT: You
have a really good point.

00:09:50.460 --> 00:09:52.134
That is a challenge.

00:09:52.134 --> 00:09:54.300
And that's something that
we're actively working on,

00:09:54.300 --> 00:09:56.982
and we'd like to change.

00:09:56.982 --> 00:09:58.490
We have two
competing goals here.

00:09:58.490 --> 00:10:01.980
One is to give the
app-slash-website as much

00:10:01.980 --> 00:10:03.540
screen real estate as possible.

00:10:03.540 --> 00:10:06.740
And the other is we do want to
have an entry point and a way

00:10:06.740 --> 00:10:08.230
to ask the user for permission.

00:10:08.230 --> 00:10:09.830
So I have to be honest.

00:10:09.830 --> 00:10:11.710
We don't have a perfect
solution to this yet.

00:10:11.710 --> 00:10:13.190
But this is
something that you'll

00:10:13.190 --> 00:10:15.850
be seeing us working
on in the near future.

00:10:15.850 --> 00:10:18.730
JAKE ARCHIBALD: So if we
have an add to home screen,

00:10:18.730 --> 00:10:21.185
are we going to also grant
some permissions there?

00:10:21.185 --> 00:10:23.060
ADRIENNE PORTER FELT:
That's a good question.

00:10:23.060 --> 00:10:26.900
So we are looking at tying
some types of permissions that

00:10:26.900 --> 00:10:29.620
are not privacy sensitive
to signs of positive user

00:10:29.620 --> 00:10:30.400
engagement.

00:10:30.400 --> 00:10:32.250
And I expect that
adding to home screen

00:10:32.250 --> 00:10:36.377
will be one of those signs
of positive user engagement.

00:10:36.377 --> 00:10:38.460
JAKE ARCHIBALD: So when
we add to the home screen,

00:10:38.460 --> 00:10:41.510
you get this kind of immersive,
full screen experience.

00:10:41.510 --> 00:10:44.770
But I mean that's at the
cost of the URL bar, which

00:10:44.770 --> 00:10:46.300
native apps don't have.

00:10:46.300 --> 00:10:48.840
Isn't the URL an
important part of the web?

00:10:48.840 --> 00:10:52.020
Andrew, with Cordova, you
don't have a URL bar, right?

00:10:52.020 --> 00:10:54.110
I mean are URLs dead now?

00:10:54.110 --> 00:10:55.775
Do we not need them anymore?

00:10:55.775 --> 00:10:56.650
ANDREW GRIEVE: Right.

00:10:56.650 --> 00:11:04.440
So say, with Cordova, you get
all the system integrations

00:11:04.440 --> 00:11:05.890
for task switching.

00:11:05.890 --> 00:11:07.820
So like, yes, you
can't refresh the page,

00:11:07.820 --> 00:11:09.695
but you can easily kind
of swipe the app away

00:11:09.695 --> 00:11:14.097
and restart it if you like that
URL bar for the Refresh button.

00:11:14.097 --> 00:11:15.680
But you do actually
lose out on things

00:11:15.680 --> 00:11:17.370
like being able to copy
and paste that link.

00:11:17.370 --> 00:11:18.900
And it's actually,
I'd say, it's one

00:11:18.900 --> 00:11:20.990
of concessions we
make to get ourselves

00:11:20.990 --> 00:11:24.400
into the app stores is
losing that ability.

00:11:24.400 --> 00:11:25.880
So I think it is
great how Chrome

00:11:25.880 --> 00:11:27.260
is like getting rid
of the address bar

00:11:27.260 --> 00:11:27.950
when you're scrolling.

00:11:27.950 --> 00:11:29.700
But you always know
how to get back to it,

00:11:29.700 --> 00:11:30.770
and that's a good thing.

00:11:30.770 --> 00:11:32.530
JAKE ARCHIBALD: But with
add to home screen things,

00:11:32.530 --> 00:11:33.590
we have lost it, right?

00:11:33.590 --> 00:11:34.960
Are we happy with that?

00:11:34.960 --> 00:11:37.418
ALEX RUSSELL: No, I don't think
we're necessarily satisfied

00:11:37.418 --> 00:11:38.760
with the current state.

00:11:38.760 --> 00:11:42.870
Between the question of
recall of site settings,

00:11:42.870 --> 00:11:44.750
getting back to
permissions that you

00:11:44.750 --> 00:11:47.049
can modify, to the
previous question,

00:11:47.049 --> 00:11:48.840
and the ability to get
back to the URL bar,

00:11:48.840 --> 00:11:50.673
I think those are things
that we want to do.

00:11:50.673 --> 00:11:52.850
And the window treatment
that we showed yesterday,

00:11:52.850 --> 00:11:55.229
for this desktop
standalone treatment,

00:11:55.229 --> 00:11:57.020
is going to have some
affordances for that.

00:11:57.020 --> 00:11:58.950
We still have to figure out what
that's going to be on mobile.

00:11:58.950 --> 00:12:00.491
We don't have an
answer for that yet.

00:12:00.491 --> 00:12:03.380
But it's a clear area
that we are looking at

00:12:03.380 --> 00:12:04.544
and do want to improve.

00:12:04.544 --> 00:12:05.960
ADRIENNE PORTER
FELT: I don't know

00:12:05.960 --> 00:12:08.060
if you saw this
yesterday, in Alex's demo,

00:12:08.060 --> 00:12:10.410
but there's a very, very
minimalistic URL bar

00:12:10.410 --> 00:12:12.220
at the top, on desktop.

00:12:12.220 --> 00:12:14.096
And one thing we're
exploring is figuring out

00:12:14.096 --> 00:12:16.178
how to bring something
like that to the web, where

00:12:16.178 --> 00:12:18.250
it doesn't take up as
much space or maybe there

00:12:18.250 --> 00:12:20.747
are heuristics for when we
show it or don't show it.

00:12:20.747 --> 00:12:23.080
JAKE ARCHIBALD: We'll take a
question from the audience.

00:12:23.080 --> 00:12:26.520
AUDIENCE: Hi, I'm Rachel,
from control group.

00:12:26.520 --> 00:12:32.610
And we actually do a lot
of client products, where,

00:12:32.610 --> 00:12:36.040
like this past year, I
did a Chrome Web App.

00:12:36.040 --> 00:12:40.790
The hope was it could just
exist and not be supported.

00:12:40.790 --> 00:12:44.060
Unfortunately, it also meant
locking down the version.

00:12:44.060 --> 00:12:45.580
And I know this is
touchy, because I

00:12:45.580 --> 00:12:48.930
know you guys like to make
sure everything's up to date.

00:12:48.930 --> 00:12:52.190
And we did follow the
documentation for the set

00:12:52.190 --> 00:12:55.390
interval, to
control, to make sure

00:12:55.390 --> 00:12:58.640
that things wouldn't look
funky if there's a new W3C

00:12:58.640 --> 00:13:01.710
spec for some kind
of CSS property

00:13:01.710 --> 00:13:04.250
that would make
things look funny.

00:13:04.250 --> 00:13:06.420
And yet it still updated.

00:13:06.420 --> 00:13:10.450
So we ended up having to use a
crude proxy type of situation.

00:13:10.450 --> 00:13:13.630
And I was wondering
if there was any plan

00:13:13.630 --> 00:13:16.180
to allow those
kinds of permissions

00:13:16.180 --> 00:13:20.660
for companies that really
want to own the app,

00:13:20.660 --> 00:13:23.970
and it's not really
for the public use?

00:13:27.120 --> 00:13:29.870
MIKE TSAO: We should
probably talk offline

00:13:29.870 --> 00:13:32.040
about this, because
I'd like to find out

00:13:32.040 --> 00:13:34.635
more about the specific
problems that you're having.

00:13:34.635 --> 00:13:35.260
AUDIENCE: Sure.

00:13:35.260 --> 00:13:37.410
MIKE TSAO: But
generally, I'd say

00:13:37.410 --> 00:13:40.910
that we have this philosophy
with the open web,

00:13:40.910 --> 00:13:43.480
if I can speak for
the entire open web.

00:13:43.480 --> 00:13:44.836
[LAUGHTER]

00:13:44.836 --> 00:13:46.460
When you add something
to the platform,

00:13:46.460 --> 00:13:48.050
you [? can't ?] take it away.

00:13:48.050 --> 00:13:51.320
And with very few exceptions,
we've kept that promise.

00:13:51.320 --> 00:13:55.540
So if there is something
going on in the Chrome runtime

00:13:55.540 --> 00:13:58.110
that you're relying
on for Chrome apps,

00:13:58.110 --> 00:14:00.690
we should be in
touch and make sure

00:14:00.690 --> 00:14:02.150
that we haven't had regressions.

00:14:02.150 --> 00:14:03.610
That probably
wasn't intentional.

00:14:03.610 --> 00:14:06.567
There are a few cases
where, oops, security issue.

00:14:06.567 --> 00:14:07.650
We've got to do something.

00:14:07.650 --> 00:14:09.120
We don't have a choice there.

00:14:09.120 --> 00:14:13.840
But generally, if you're trying
to lock down the runtime,

00:14:13.840 --> 00:14:17.602
that's probably a symptom
of a larger problem.

00:14:17.602 --> 00:14:19.067
AUDIENCE: OK, we'll talk later.

00:14:19.067 --> 00:14:21.150
JAKE ARCHIBALD: So another
question, in inference.

00:14:21.150 --> 00:14:22.566
So you were saying,
Service Worker

00:14:22.566 --> 00:14:25.730
is going to be an
indication of something that

00:14:25.730 --> 00:14:28.686
looks like an app.

00:14:28.686 --> 00:14:31.060
For people who want to use
Service Workers soon-- I mean,

00:14:31.060 --> 00:14:32.600
it's not on Android
at the moment--

00:14:32.600 --> 00:14:35.680
what do people do to
be able to use it?

00:14:35.680 --> 00:14:38.417
And even if it does
hit Android, when is it

00:14:38.417 --> 00:14:41.000
arriving in other browsers and
what can we do in the meantime?

00:14:41.000 --> 00:14:43.830
GREG SIMON: Well, It's in
M40, the first version,

00:14:43.830 --> 00:14:44.372
in Chrome 40.

00:14:44.372 --> 00:14:46.204
JAKE ARCHIBALD: But
does anyone in this room

00:14:46.204 --> 00:14:47.295
have access to M40?

00:14:47.295 --> 00:14:48.700
GREG SIMON: On desktop they do.

00:14:48.700 --> 00:14:49.760
JAKE ARCHIBALD:
On desktop, right.

00:14:49.760 --> 00:14:51.570
GREG SIMON: You can
build it from source.

00:14:51.570 --> 00:14:54.670
You can build a content shell
from source and run it locally.

00:14:54.670 --> 00:14:56.580
JAKE ARCHIBALD: Get all of your
users to download the source.

00:14:56.580 --> 00:14:57.980
It's only a few
gigabytes, right?

00:14:57.980 --> 00:14:58.819
I mean you can do.

00:14:58.819 --> 00:15:01.110
ALEX RUSSELL: There's also
a build of the content shell

00:15:01.110 --> 00:15:03.320
inside the [? Polly ?]
[? repo ?] of the demo that I

00:15:03.320 --> 00:15:03.870
showed yesterday.

00:15:03.870 --> 00:15:04.828
That's all open source.

00:15:04.828 --> 00:15:06.980
And there's a build
with an APK for that.

00:15:06.980 --> 00:15:08.125
It's not going to auto
update, because it

00:15:08.125 --> 00:15:09.060
is just content shell.

00:15:09.060 --> 00:15:12.800
It's just a dummy system.

00:15:12.800 --> 00:15:15.390
M40 is going to hit beta
for Android in, I think,

00:15:15.390 --> 00:15:17.880
about two weeks, sometime
just post-Thanksgiving.

00:15:17.880 --> 00:15:19.310
So look for that.

00:15:19.310 --> 00:15:21.980
And that'll be your chance to
play with it on mobile first.

00:15:21.980 --> 00:15:23.813
ALEX KOMOROSKE: This
is a temporary problem,

00:15:23.813 --> 00:15:25.040
because it's on the M40.

00:15:25.040 --> 00:15:26.780
ALEX RUSSELL: Yeah, but desktop
is how you can get today,

00:15:26.780 --> 00:15:28.770
Dev Channel or Canary
has it right now.

00:15:28.770 --> 00:15:31.060
JAKE ARCHIBALD: But
what about Safari?

00:15:31.060 --> 00:15:33.391
They don't have an
implementation on it.

00:15:33.391 --> 00:15:35.640
So I mean, people can't use
Service Worker until we've

00:15:35.640 --> 00:15:37.050
got in all the browsers, right?

00:15:37.050 --> 00:15:39.074
ALEX RUSSELL: Well,
the thing that I

00:15:39.074 --> 00:15:40.490
failed to mention
yesterday, and I

00:15:40.490 --> 00:15:41.864
think it's implicit
in the model,

00:15:41.864 --> 00:15:44.180
but I screwed up
by not mentioning

00:15:44.180 --> 00:15:46.450
that Service Workers are
progressive enhancement

00:15:46.450 --> 00:15:47.270
for the network.

00:15:47.270 --> 00:15:50.330
They are a way for you
to take web content

00:15:50.330 --> 00:15:53.640
and make it offline-able.

00:15:53.640 --> 00:15:56.680
If you architect your
application correctly,

00:15:56.680 --> 00:15:59.924
you should absolutely be able
to use the exact same content,

00:15:59.924 --> 00:16:01.340
with and without
a Service Worker.

00:16:01.340 --> 00:16:04.754
And because Service Workers only
install after that first load,

00:16:04.754 --> 00:16:06.670
you sort of have strong
incentives to do that.

00:16:06.670 --> 00:16:09.420
And Jake and I thought
long and hard about this

00:16:09.420 --> 00:16:11.420
to try to make sure that
what we weren't doing

00:16:11.420 --> 00:16:14.350
was creating a world of
spinners and loading screens,

00:16:14.350 --> 00:16:17.140
where people felt like they
had to wait till a Service

00:16:17.140 --> 00:16:19.190
Worker was ready before
they could do anything.

00:16:19.190 --> 00:16:20.940
We want you to keep
building websites that

00:16:20.940 --> 00:16:23.180
are friction-free and
ephemeral and just

00:16:23.180 --> 00:16:26.070
work when someone
hands you a URL.

00:16:26.070 --> 00:16:28.107
JAKE ARCHIBALD: It
will be possible, when

00:16:28.107 --> 00:16:30.190
you detect that a Service
Worker hasn't installed,

00:16:30.190 --> 00:16:32.710
to show a spinner and then
wait for it to install and then

00:16:32.710 --> 00:16:34.800
refresh the page, to kind
of create a sort of blocking

00:16:34.800 --> 00:16:36.633
experience till the
Service Worker is there.

00:16:36.633 --> 00:16:38.940
If you do that, I
will hunt you down.

00:16:38.940 --> 00:16:42.560
GREG SIMON: The Service Worker
is a great example of an API

00:16:42.560 --> 00:16:45.450
that is sort of like
an escalator, right?

00:16:45.450 --> 00:16:48.540
When an escalator fails,
in turns into stairs.

00:16:48.540 --> 00:16:53.200
When an elevator fails, well,
you're stuck on that floor.

00:16:53.200 --> 00:16:58.400
And Service Worker-- I mean,
Alex took the Polymer/Topeka

00:16:58.400 --> 00:17:02.780
app from I/O, which was
not designed for offline,

00:17:02.780 --> 00:17:09.160
and added one Service Worker,
which is about this much text,

00:17:09.160 --> 00:17:10.329
and it just worked offline.

00:17:10.329 --> 00:17:11.162
It was just amazing.

00:17:11.162 --> 00:17:13.310
Like I've never seen
anything like it.

00:17:13.310 --> 00:17:14.609
ALEX RUSSELL: The way
Polymer sort of encourages

00:17:14.609 --> 00:17:16.079
you to architect your
applications, by the way,

00:17:16.079 --> 00:17:18.703
with it sort of loading a shell
and then you loading content in

00:17:18.703 --> 00:17:20.880
and doing data
binding, is incredibly

00:17:20.880 --> 00:17:23.246
compatible with this
sort of style of things.

00:17:23.246 --> 00:17:24.329
Other frameworks are, too.

00:17:24.329 --> 00:17:26.260
If you're using
Ember, if you're using

00:17:26.260 --> 00:17:28.210
some of these other, taller
frameworks that sort of have

00:17:28.210 --> 00:17:30.510
a data model on the client side
and are doing synchronization

00:17:30.510 --> 00:17:31.926
about the data
model, you're going

00:17:31.926 --> 00:17:34.380
to be in a much better
spot to take advantage

00:17:34.380 --> 00:17:36.376
of these capabilities early on.

00:17:36.376 --> 00:17:37.750
ALEX KOMOROSKE:
And I think also,

00:17:37.750 --> 00:17:39.940
with Service Worker,
as an end user,

00:17:39.940 --> 00:17:42.410
it's so obvious when there's
a Service Worker installed.

00:17:42.410 --> 00:17:45.130
It loads so much faster
in subsequent loads.

00:17:45.130 --> 00:17:47.814
It works when you
go on the elevator.

00:17:47.814 --> 00:17:49.730
And so it's like so
obvious to your end users.

00:17:49.730 --> 00:17:51.188
And because you
layer it on easily,

00:17:51.188 --> 00:17:53.130
I think the
developers are really

00:17:53.130 --> 00:17:54.279
going to want to adopt it.

00:17:54.279 --> 00:17:56.070
JAKE ARCHIBALD: We'll
take another question

00:17:56.070 --> 00:17:56.810
from the audience.

00:17:56.810 --> 00:17:59.059
AUDIENCE: So I actually want
to roll things back, say,

00:17:59.059 --> 00:18:02.960
two questions, kind of the app,
add to home, Cordova context.

00:18:02.960 --> 00:18:04.670
From the developer's
perspective,

00:18:04.670 --> 00:18:07.406
if I want to build an app
that's meant to work like an app

00:18:07.406 --> 00:18:09.030
and wrap it up in
Cordova, I've already

00:18:09.030 --> 00:18:11.130
taken care of
everything from my side.

00:18:11.130 --> 00:18:13.755
So I can make sure the user has
a good experience, whether they

00:18:13.755 --> 00:18:15.225
want to use a menu
button to share

00:18:15.225 --> 00:18:18.390
or whatever behavior needs
to be added, that's there.

00:18:18.390 --> 00:18:20.049
Right now, with add
to home screen--

00:18:20.049 --> 00:18:21.840
I didn't even realize
this till last night.

00:18:21.840 --> 00:18:24.170
I was talking to a user
that isn't technical.

00:18:24.170 --> 00:18:26.700
You add to home
screen any website,

00:18:26.700 --> 00:18:29.880
and you can create kind
of a bad experience.

00:18:29.880 --> 00:18:33.010
It's hard, maybe a week later,
to share that with somebody,

00:18:33.010 --> 00:18:34.420
because the URL
bar is not there.

00:18:34.420 --> 00:18:36.720
The menu button
share is not there.

00:18:36.720 --> 00:18:40.080
And I think about the
new web manifest concept.

00:18:40.080 --> 00:18:42.230
Maybe that can be more
of a trigger to say,

00:18:42.230 --> 00:18:46.849
if someone adds to home screen
any website that wasn't really

00:18:46.849 --> 00:18:48.890
indicating that it was
meant to be used that way,

00:18:48.890 --> 00:18:51.290
it's a little more of
a webby experience.

00:18:51.290 --> 00:18:53.130
And as a developer,
maybe I can do something

00:18:53.130 --> 00:18:55.120
with the manifest to
say, if someone adds this

00:18:55.120 --> 00:18:58.660
to home screen or installs
my web app, that it behaves

00:18:58.660 --> 00:19:01.510
more like an app as opposed to
it being assumed or inferred

00:19:01.510 --> 00:19:02.760
so loosely.

00:19:02.760 --> 00:19:06.090
JAKE ARCHIBALD: I believe that
the URL bar is opt-out still,

00:19:06.090 --> 00:19:07.260
right?

00:19:07.260 --> 00:19:08.760
It's a meta tag
that triggers that.

00:19:08.760 --> 00:19:10.759
But I think the problem
we had was that a number

00:19:10.759 --> 00:19:14.490
of out-of-the-box
web starter kits--

00:19:14.490 --> 00:19:17.030
maybe not the Web Starter Kit--
has that meta tag in there

00:19:17.030 --> 00:19:18.650
by default, which is, I guess--

00:19:18.650 --> 00:19:19.030
AUDIENCE: That makes sense.

00:19:19.030 --> 00:19:20.470
JAKE ARCHIBALD:
--part of the problem.

00:19:20.470 --> 00:19:21.880
AUDIENCE: Because I picked a
random site when I did that

00:19:21.880 --> 00:19:23.880
last night, so that
would make sense.

00:19:23.880 --> 00:19:26.070
Thank you.

00:19:26.070 --> 00:19:27.910
JAKE ARCHIBALD: So
web apps are still

00:19:27.910 --> 00:19:30.300
hamstrung by a lack
of capabilities.

00:19:30.300 --> 00:19:34.080
When will get access to things
like media galleries, USB,

00:19:34.080 --> 00:19:35.821
Bluetooth, and all
the good things

00:19:35.821 --> 00:19:37.320
that you can get
on native programs?

00:19:37.320 --> 00:19:40.010
I guess, Adrienne, it's
basically your fault, isn't it?

00:19:40.010 --> 00:19:40.650
[LAUGHTER]

00:19:40.650 --> 00:19:42.740
I mean, you want this
web thing to be "secure"

00:19:42.740 --> 00:19:44.057
and not "harm users."

00:19:44.057 --> 00:19:45.640
ADRIENNE PORTER FELT:
So first of all,

00:19:45.640 --> 00:19:47.720
I really wish I
had an evil cackle,

00:19:47.720 --> 00:19:49.890
because I would like
to use it right now.

00:19:49.890 --> 00:19:53.670
Yes, it is our fault.

00:19:53.670 --> 00:19:55.400
We're trying to
figure out a good way

00:19:55.400 --> 00:20:00.300
to expose a roadmap for
exposing all these capabilities

00:20:00.300 --> 00:20:04.570
without having negative
security and privacy impacts.

00:20:04.570 --> 00:20:06.190
I think we're
making good headway.

00:20:06.190 --> 00:20:09.000
We have stories for
Bluetooth, for notifications,

00:20:09.000 --> 00:20:11.730
for getUserMedia, and
for many of the ones that

00:20:11.730 --> 00:20:13.530
are coming up soon.

00:20:13.530 --> 00:20:16.340
And we're trying to come
out with a generalizable way

00:20:16.340 --> 00:20:18.172
to approach this
problem in the future.

00:20:18.172 --> 00:20:19.630
But in the meantime,
there is going

00:20:19.630 --> 00:20:21.910
to be a lot of
iteration, both in Chrome

00:20:21.910 --> 00:20:24.940
and in other browsers, that
hopefully will get us to figure

00:20:24.940 --> 00:20:27.140
out what the best approach is.

00:20:27.140 --> 00:20:29.250
MIKE TSAO: And just one
thing to add to that.

00:20:29.250 --> 00:20:32.090
The reason that we
chose web Bluetooth,

00:20:32.090 --> 00:20:34.770
at this fairly early
stage in this effort,

00:20:34.770 --> 00:20:38.240
is precisely because it's
a fricking scary API.

00:20:38.240 --> 00:20:41.710
If you think about
visiting a website that

00:20:41.710 --> 00:20:43.980
talks to your devices
that aren't even

00:20:43.980 --> 00:20:47.400
touching your computer, that
is a really scary proposition.

00:20:47.400 --> 00:20:52.771
And if we are able to crack this
nut, it's really tantalizing.

00:20:52.771 --> 00:20:54.520
Because think of all
the other things that

00:20:54.520 --> 00:21:00.970
are sort of lesser instances of
the same sort of class-- USB,

00:21:00.970 --> 00:21:03.420
serial, NFC.

00:21:03.420 --> 00:21:06.700
If we can do this without
breaking the web security

00:21:06.700 --> 00:21:09.800
model, it's very promising.

00:21:09.800 --> 00:21:11.680
ALEX KOMOROSKE: As I
want to remind everyone,

00:21:11.680 --> 00:21:14.250
one of the reasons that you
have so low friction in the web

00:21:14.250 --> 00:21:16.376
is that people aren't afraid
to click on the links.

00:21:16.376 --> 00:21:18.291
And so it's really
important to maintain that.

00:21:18.291 --> 00:21:20.090
That's one of the
really important aspects

00:21:20.090 --> 00:21:21.500
of low friction on the web.

00:21:21.500 --> 00:21:25.670
ALEX RUSSELL: Yeah, I want
to just agree with that.

00:21:25.670 --> 00:21:29.580
Because if you think about
how native applications work,

00:21:29.580 --> 00:21:31.580
the correct model for
understanding the security

00:21:31.580 --> 00:21:33.070
implications of a
native application

00:21:33.070 --> 00:21:35.319
is that you've given the
developer of that application

00:21:35.319 --> 00:21:36.930
a shell on your most
private compute.

00:21:36.930 --> 00:21:39.970
You've given them a local
user account, basically.

00:21:39.970 --> 00:21:43.140
And that's generally
an OK thing to do.

00:21:43.140 --> 00:21:45.690
But that model is very
different to the web model.

00:21:45.690 --> 00:21:48.310
And we're in a relatively
good place to start from.

00:21:48.310 --> 00:21:51.590
We haven't given people
tremendously powerful upfront

00:21:51.590 --> 00:21:53.020
grants that users can't revoke.

00:21:53.020 --> 00:21:56.390
We haven't created APIs that
users don't have control over

00:21:56.390 --> 00:21:58.045
or we can't give
users control over.

00:21:58.045 --> 00:21:59.670
So as we extend these
new capabilities,

00:21:59.670 --> 00:22:03.420
I think we're going to be making
even more work for Adrienne

00:22:03.420 --> 00:22:07.340
and her team to help make it
easier to manage this stuff.

00:22:07.340 --> 00:22:10.314
I know that a lot of that's
already coming in 40 and 41,

00:22:10.314 --> 00:22:12.480
with better site settings,
like you shared yesterday

00:22:12.480 --> 00:22:14.270
for revocation and
managing these permissions.

00:22:14.270 --> 00:22:16.020
But as we roll those
out, those are all

00:22:16.020 --> 00:22:17.395
going to stay
under user control.

00:22:17.395 --> 00:22:20.120
And as a developer,
the onus is going

00:22:20.120 --> 00:22:23.310
to be on you to make sure that
you handle the situation where

00:22:23.310 --> 00:22:26.310
the user has either denied
or rescinded your privilege

00:22:26.310 --> 00:22:28.730
to do it, just like Adrienne's
slide-show yesterday.

00:22:28.730 --> 00:22:31.230
JAKE ARCHIBALD: So what do we
find people using Cordova for?

00:22:31.230 --> 00:22:34.410
I mean, because surely this is a
great signal for what we should

00:22:34.410 --> 00:22:37.210
be working on getting
into our web standard.

00:22:37.210 --> 00:22:39.410
ANDREW GRIEVE: Yeah, it's
certainly a good spot

00:22:39.410 --> 00:22:41.630
to check out what
people are using it for.

00:22:41.630 --> 00:22:44.070
Actually, this is a little bit
of a funny question for me,

00:22:44.070 --> 00:22:47.482
because I actually find most
Cordova maps are using it just

00:22:47.482 --> 00:22:48.440
to get into Play Store.

00:22:48.440 --> 00:22:50.689
They're not actually
using half the permissions

00:22:50.689 --> 00:22:53.230
we've been asking for, which is
actually really annoying when

00:22:53.230 --> 00:22:55.510
you install an app.

00:22:55.510 --> 00:22:58.972
And another thing I thought
about, around these lines, even

00:22:58.972 --> 00:23:00.680
access to hardware
sounds scary, but it's

00:23:00.680 --> 00:23:03.500
really, in the grand scheme of
security, not all that scary.

00:23:03.500 --> 00:23:08.500
Like I'm a bit more scared when
an app asks for my contacts,

00:23:08.500 --> 00:23:12.532
like personal information
rather than my devices.

00:23:12.532 --> 00:23:14.740
Because I could just turn
my printer off or whatever.

00:23:17.562 --> 00:23:19.020
ADRIENNE PORTER
FELT: Security team

00:23:19.020 --> 00:23:20.686
might have a slightly
different opinion.

00:23:20.686 --> 00:23:23.130
[LAUGHTER]

00:23:23.130 --> 00:23:25.780
ANDREW GRIEVE: So no,
I agree with all that.

00:23:25.780 --> 00:23:27.370
But I was saying,
one of the things

00:23:27.370 --> 00:23:29.760
about the open web
I think is scary

00:23:29.760 --> 00:23:31.287
is like access to
your file system.

00:23:31.287 --> 00:23:32.870
And so the browser
is taking a really,

00:23:32.870 --> 00:23:37.070
I think, conservative approach
to this on the desktop.

00:23:37.070 --> 00:23:41.750
And it's kind of worked fine,
for the most part, until now.

00:23:41.750 --> 00:23:44.350
I think finding the right
solutions to this is important.

00:23:44.350 --> 00:23:46.430
But really, taking that
conservative approach

00:23:46.430 --> 00:23:49.044
is what builds
your user's trust.

00:23:49.044 --> 00:23:49.960
It's really important.

00:23:49.960 --> 00:23:50.380
JAKE ARCHIBALD: I want
to come back to this.

00:23:50.380 --> 00:23:52.500
But we'll take a question
from the audience first.

00:23:52.500 --> 00:23:53.330
AUDIENCE: Thanks.

00:23:53.330 --> 00:23:56.542
One of the main use cases
to build a mobile web

00:23:56.542 --> 00:23:58.000
app and the wrap
it into Cordova is

00:23:58.000 --> 00:24:00.060
to have access with
maybe a single code

00:24:00.060 --> 00:24:02.980
base to both marketplaces.

00:24:02.980 --> 00:24:05.340
But still the offline
story is pretty bad even

00:24:05.340 --> 00:24:07.280
in a Cordova web app.

00:24:07.280 --> 00:24:09.170
You have to do a lot
of things yourself.

00:24:09.170 --> 00:24:13.270
And so Service Worker Looks
like a fantastic way to do that.

00:24:13.270 --> 00:24:15.020
So if I go all the
way down, and I

00:24:15.020 --> 00:24:18.660
try to build a Chrome Web App,
and then I use CCA and wrap it,

00:24:18.660 --> 00:24:20.120
is it going to work on iOS?

00:24:20.120 --> 00:24:22.840
And how are we going
to get to that?

00:24:22.840 --> 00:24:25.820
And even the app that
you've published yesterday,

00:24:25.820 --> 00:24:28.910
so you use app cache also
to make it work offline,

00:24:28.910 --> 00:24:31.680
because you can't use
Service Worker on my phone.

00:24:31.680 --> 00:24:36.240
And eventually, if I'm on an iOS
and I download it as a web app,

00:24:36.240 --> 00:24:38.630
then I suppose I can run
it in the Chrome browser.

00:24:38.630 --> 00:24:40.680
So I need to use the
Chrome browser in order

00:24:40.680 --> 00:24:42.060
to access those capabilities.

00:24:42.060 --> 00:24:44.130
I won't be able to use Safari.

00:24:44.130 --> 00:24:45.550
And then if I push
it in Cordova,

00:24:45.550 --> 00:24:47.527
what's that whole story
going to look like?

00:24:47.527 --> 00:24:48.985
ANDREW GRIEVE:
Sounds like you have

00:24:48.985 --> 00:24:52.000
a really good understanding of
the current state of affairs,

00:24:52.000 --> 00:24:54.270
actually.

00:24:54.270 --> 00:24:56.774
So I mean, offline with
Cordova is, for most apps,

00:24:56.774 --> 00:24:58.440
pretty straightforward,
because you just

00:24:58.440 --> 00:25:01.240
pack all your assets there.

00:25:01.240 --> 00:25:03.525
But I think the kind
of question here

00:25:03.525 --> 00:25:04.900
is like, what are
we doing to try

00:25:04.900 --> 00:25:08.410
to make Service Worker
maybe work in Cordova

00:25:08.410 --> 00:25:12.560
or try to make Cordova
look more like the story

00:25:12.560 --> 00:25:14.400
that we've been selling
this conference?

00:25:14.400 --> 00:25:17.470
So that's a wonderful idea.

00:25:17.470 --> 00:25:20.467
We are going to work on
seeing what we can do there.

00:25:20.467 --> 00:25:22.550
JAKE ARCHIBALD: I got a
question in, from Twitter,

00:25:22.550 --> 00:25:25.250
from Marcos Caceres at Mozilla.

00:25:25.250 --> 00:25:27.580
The SSL certs are
still a problem

00:25:27.580 --> 00:25:31.230
to obtain especially
for subdomains.

00:25:31.230 --> 00:25:34.650
We're blocking a lot
of the APIs on HTTP

00:25:34.650 --> 00:25:36.070
and making them HTTPS only.

00:25:36.070 --> 00:25:38.570
What are we doing to address
the problem of making

00:25:38.570 --> 00:25:42.010
it easier for
users to use HTTPS?

00:25:42.010 --> 00:25:44.640
ADRIENNE PORTER FELT: That's
a really big question.

00:25:44.640 --> 00:25:47.500
I want to acknowledge
that there has

00:25:47.500 --> 00:25:50.460
been some pain in this space,
particularly if you want

00:25:50.460 --> 00:25:54.310
to use scripts or resources
from other websites that

00:25:54.310 --> 00:25:55.701
don't support HTTP.

00:25:55.701 --> 00:25:57.200
But things are
getting a lot better.

00:25:57.200 --> 00:26:03.940
For example, CloudFlare offers
free, universal SSL now.

00:26:03.940 --> 00:26:08.060
And we are trying to build more
developer tools into Chrome

00:26:08.060 --> 00:26:11.240
to be able to tell
you the status of all

00:26:11.240 --> 00:26:13.070
the resources on your website.

00:26:13.070 --> 00:26:14.940
And we are cognizant
of this and we

00:26:14.940 --> 00:26:16.970
are trying to build tools
to help you with it.

00:26:16.970 --> 00:26:20.580
But it is necessary.

00:26:20.580 --> 00:26:24.140
You don't want your ISP,
the guy sitting next to you

00:26:24.140 --> 00:26:26.750
at the coffee shop, you
don't want these people

00:26:26.750 --> 00:26:28.950
to be able to use these
dangerous privileges.

00:26:28.950 --> 00:26:31.980
So although there is a little
bit of pain that comes with it,

00:26:31.980 --> 00:26:34.410
it is a really important,
fundamental part

00:26:34.410 --> 00:26:37.739
of just being able to add
these new APIs to the web.

00:26:37.739 --> 00:26:40.030
JAKE ARCHIBALD: One of the
native apps I use frequently

00:26:40.030 --> 00:26:41.950
is a podcasting app.

00:26:41.950 --> 00:26:44.310
And I wouldn't be able to
recreate that on the web,

00:26:44.310 --> 00:26:48.060
because most podcasts
are served over HTTP.

00:26:48.060 --> 00:26:50.250
I mean, are we lacking
pragmatism here with that?

00:26:50.250 --> 00:26:52.930
Or is it bad that
native apps can do that?

00:26:52.930 --> 00:26:54.513
ADRIENNE PORTER FELT:
I actually think

00:26:54.513 --> 00:26:57.330
that native apps, in
general, are not always

00:26:57.330 --> 00:26:59.850
great about using
HTTPS when they should.

00:26:59.850 --> 00:27:02.280
And this is actually a problem.

00:27:02.280 --> 00:27:04.510
I think the web here, in
some ways, has an advantage,

00:27:04.510 --> 00:27:07.550
because it's easier for the
user to see what the security

00:27:07.550 --> 00:27:09.770
status of a page is,
whereas, in native apps,

00:27:09.770 --> 00:27:11.380
that's often not the case.

00:27:11.380 --> 00:27:15.090
Plus native apps
often try to use HTTPS

00:27:15.090 --> 00:27:16.590
but perhaps don't
quite get it right

00:27:16.590 --> 00:27:18.346
and actually validate
the certificate.

00:27:18.346 --> 00:27:19.720
So in some ways,
I actually think

00:27:19.720 --> 00:27:22.500
the browser has an
advantage in this corner.

00:27:22.500 --> 00:27:24.790
And I'm hoping that
native apps get brought

00:27:24.790 --> 00:27:26.570
to where we are right
now in the browser.

00:27:26.570 --> 00:27:30.370
JAKE ARCHIBALD: So are we out
to destroy native apps, right?

00:27:30.370 --> 00:27:32.990
Or are there things that the
web will never be able to do,

00:27:32.990 --> 00:27:34.460
so native apps will have
to be there for that?

00:27:34.460 --> 00:27:35.680
ALEX KOMOROSKE: So
that question presumes

00:27:35.680 --> 00:27:37.945
this is a zero sum game,
which is absolutely untrue.

00:27:37.945 --> 00:27:39.820
So there's always going
to be some cases that

00:27:39.820 --> 00:27:41.195
are really great
for native apps.

00:27:41.195 --> 00:27:43.403
But we want to make sure
that developers have choice,

00:27:43.403 --> 00:27:45.600
and they can use the
right tools for the job.

00:27:45.600 --> 00:27:48.360
So again, if you're in
the torso or the tail

00:27:48.360 --> 00:27:52.700
and you want to reach your
users as easily as possible,

00:27:52.700 --> 00:27:54.670
the web is an amazing
option for you.

00:27:54.670 --> 00:27:57.182
And we want to empower that,
like we did on desktop,

00:27:57.182 --> 00:27:59.390
with more and more capabilities,
more and more power,

00:27:59.390 --> 00:28:01.515
so that you can build better
and better experiences

00:28:01.515 --> 00:28:03.140
while maintaining
that zero friction.

00:28:03.140 --> 00:28:05.800
But it's fundamentally
not a zero sum game.

00:28:05.800 --> 00:28:08.540
ALEX RUSSELL: Yeah, I sort of
think back to, even on the web,

00:28:08.540 --> 00:28:12.250
like how we deliver experiences
across the entire range

00:28:12.250 --> 00:28:16.180
of devices that you can
see out on the device wall.

00:28:16.180 --> 00:28:20.210
The Google Search team delivers
dozens of different experiences

00:28:20.210 --> 00:28:22.530
based on device capabilities.

00:28:22.530 --> 00:28:25.180
Over time, they've got different
renderers, different pipelines

00:28:25.180 --> 00:28:27.814
for giving you different
copies of the same 10

00:28:27.814 --> 00:28:29.980
blue links with different
features attached to them.

00:28:29.980 --> 00:28:31.813
And that's something
that you do when you're

00:28:31.813 --> 00:28:34.240
trying to reach different
users at the highest fidelity

00:28:34.240 --> 00:28:35.284
they can possibly have.

00:28:35.284 --> 00:28:36.700
And so the question,
like you say,

00:28:36.700 --> 00:28:39.230
isn't are there going to be
places for native apps or web

00:28:39.230 --> 00:28:39.730
apps.

00:28:39.730 --> 00:28:42.710
It's more like, how do you
reach that first set of users,

00:28:42.710 --> 00:28:45.310
that largest first set of users
with your largest investment?

00:28:45.310 --> 00:28:47.226
And then how do you reach
that incremental set

00:28:47.226 --> 00:28:49.130
of users as your
application grows?

00:28:49.130 --> 00:28:54.210
The web can be an incredible
reach and enabler for you

00:28:54.210 --> 00:28:55.590
to get in front of more people.

00:28:55.590 --> 00:28:59.190
But today, it has missed
some early advantages

00:28:59.190 --> 00:29:02.410
in terms of UI access.

00:29:02.410 --> 00:29:04.880
And so I think the
goal, for us, is

00:29:04.880 --> 00:29:08.010
to make your investment in
your website a much more

00:29:08.010 --> 00:29:11.640
attractive proposition, make
it so that you can reach more

00:29:11.640 --> 00:29:15.180
of your users, more easily,
by building your website well,

00:29:15.180 --> 00:29:16.830
and then figure out
what you're going

00:29:16.830 --> 00:29:20.950
to do to reach that other set of
users in those other use cases.

00:29:20.950 --> 00:29:22.200
That may involve a native app.

00:29:22.200 --> 00:29:24.366
JAKE ARCHIBALD: So what
would the native app do that

00:29:24.366 --> 00:29:25.900
the website can't?

00:29:25.900 --> 00:29:27.430
What's that area
that is for native?

00:29:30.726 --> 00:29:33.350
ALEX KOMOROSKE: I think you can
look at it like the things that

00:29:33.350 --> 00:29:34.770
are available in Cordova,
for example, today

00:29:34.770 --> 00:29:36.130
to give us a taste
of some other things

00:29:36.130 --> 00:29:37.496
that you can do in
native apps today

00:29:37.496 --> 00:29:38.800
that you can't do on the web.

00:29:38.800 --> 00:29:41.019
And the web does trail some
of this stuff sometimes.

00:29:41.019 --> 00:29:43.060
Because we have to figure
out the security model.

00:29:43.060 --> 00:29:44.520
We have to figure out how
to responsibly bring it

00:29:44.520 --> 00:29:45.154
to the web.

00:29:45.154 --> 00:29:47.570
We have to figure out which
of these APIs that people have

00:29:47.570 --> 00:29:50.450
pioneered in native is
worth bringing to the web,

00:29:50.450 --> 00:29:52.342
or which of these are
just sort of dead-ends.

00:29:52.342 --> 00:29:54.050
So there's always
going to be that thing.

00:29:54.050 --> 00:29:55.220
If you want the latest
and the greatest,

00:29:55.220 --> 00:29:57.370
you need access to the
absolute, most cutting edge

00:29:57.370 --> 00:30:00.760
in terms of performance
primitives or what have you.

00:30:00.760 --> 00:30:02.260
Native is a really
attractive option

00:30:02.260 --> 00:30:04.502
if you're trying to squeeze
every last bit of it.

00:30:04.502 --> 00:30:06.210
However, for the vast
majority of people,

00:30:06.210 --> 00:30:08.126
what's really important
is reaching your users

00:30:08.126 --> 00:30:10.080
and being realistic
about the fact that it's

00:30:10.080 --> 00:30:13.790
very hard to convince people
to install your app, often.

00:30:13.790 --> 00:30:16.730
GREG SIMON: Yeah, to just
go back to the question

00:30:16.730 --> 00:30:17.940
that you asked there, Jake.

00:30:17.940 --> 00:30:20.300
I mean, certainly a huge
advantage of the web

00:30:20.300 --> 00:30:27.750
is that I don't have to download
30 megs before I have to login.

00:30:27.750 --> 00:30:30.020
I can just, sort of,
like off the cuff,

00:30:30.020 --> 00:30:33.220
load something and
be there, right?

00:30:33.220 --> 00:30:39.100
But there's lots of things that
we can learn on the mobile web,

00:30:39.100 --> 00:30:45.310
from apps, from
Java and iOS apps.

00:30:45.310 --> 00:30:50.110
For example, web on desktop--
most desktop computers

00:30:50.110 --> 00:30:51.710
are kind of the same.

00:30:51.710 --> 00:30:54.360
Like they don't have a
vast arrays of sensors

00:30:54.360 --> 00:30:55.420
that are very different.

00:30:55.420 --> 00:30:58.830
They all have screen and a
mouse and like that's it.

00:30:58.830 --> 00:31:02.180
But when you're talking about
mobile devices and watches

00:31:02.180 --> 00:31:07.720
and VR headsets, it seems
like, every month, there's

00:31:07.720 --> 00:31:09.510
some new piece of
hardware that, oh, jeez,

00:31:09.510 --> 00:31:12.160
I really wish I had
an API for that.

00:31:12.160 --> 00:31:14.330
But the web doesn't have
that kind of flexibility.

00:31:14.330 --> 00:31:17.330
It's years to get
these sort of IDLs

00:31:17.330 --> 00:31:23.260
in, whereas with a Java app,
you can just give them a jar,

00:31:23.260 --> 00:31:24.720
and they can talk to the device.

00:31:24.720 --> 00:31:27.250
So there are gaps on both sides.

00:31:27.250 --> 00:31:28.851
And we're working on those.

00:31:28.851 --> 00:31:30.600
MIKE TSAO: More on the
gaps on both sides.

00:31:30.600 --> 00:31:34.350
I just want to emphasize that
native is not perfect either.

00:31:34.350 --> 00:31:36.730
There are many
attributes of the web,

00:31:36.730 --> 00:31:39.220
like linkability in particular.

00:31:39.220 --> 00:31:41.900
You can't easily deep
link into an app.

00:31:41.900 --> 00:31:44.860
Maybe Android intents
are one solution

00:31:44.860 --> 00:31:48.930
to that or composability.

00:31:48.930 --> 00:31:51.700
But I'm looking
forward to a time

00:31:51.700 --> 00:31:55.110
when app developers aren't
facing this document-centric

00:31:55.110 --> 00:31:57.350
versus app-centric decision.

00:31:57.350 --> 00:31:59.100
And they're kind of
just saying, you know,

00:31:59.100 --> 00:32:01.400
I'm going to go with
what works for me.

00:32:01.400 --> 00:32:05.969
And then some apps, that happen
to be implemented on the web,

00:32:05.969 --> 00:32:07.760
are going to take
advantage of linkability.

00:32:07.760 --> 00:32:10.400
They're going to take advantage
of this fantastic ecosystem

00:32:10.400 --> 00:32:11.640
that we have.

00:32:11.640 --> 00:32:15.140
And at that point, the
native platform maintainers

00:32:15.140 --> 00:32:18.350
are going to say, OK, yeah,
I agree, we are competing.

00:32:18.350 --> 00:32:20.740
And this is an area where
we have to start competing.

00:32:20.740 --> 00:32:22.620
And the competition
that I think is

00:32:22.620 --> 00:32:25.390
going to come out of that will
be incredible, on both sides.

00:32:25.390 --> 00:32:27.889
JAKE ARCHIBALD: Before we take
a question from the audience,

00:32:27.889 --> 00:32:29.690
I want to talk to the
rest of the audience.

00:32:29.690 --> 00:32:32.735
What features do you
want most from an app?

00:32:32.735 --> 00:32:35.360
All the things we talked about,
Bluetooth, whatever, that maybe

00:32:35.360 --> 00:32:37.470
require permissions, if
you could have one of them

00:32:37.470 --> 00:32:39.800
on the web, now,
what would it be?

00:32:39.800 --> 00:32:42.240
Shout it out.

00:32:42.240 --> 00:32:42.890
It's fine.

00:32:42.890 --> 00:32:44.350
Great.

00:32:44.350 --> 00:32:45.865
Should we just all go?

00:32:45.865 --> 00:32:46.990
GREG SIMON: API versioning.

00:32:46.990 --> 00:32:49.400
JAKE ARCHIBALD: Come on, we'll
base our next year of work

00:32:49.400 --> 00:32:50.970
on what you shout out right now.

00:32:50.970 --> 00:32:52.560
AUDIENCE: Polyfill
for Service Worker.

00:32:52.560 --> 00:32:53.520
JAKE ARCHIBALD: Polyfill
for Service Worker.

00:32:53.520 --> 00:32:54.430
AUDIENCE: Yeah.

00:32:54.430 --> 00:32:55.263
[INTERPOSING VOICES]

00:32:57.455 --> 00:32:58.580
JAKE ARCHIBALD: Camera API.

00:32:58.580 --> 00:32:59.370
What was the one over here?

00:32:59.370 --> 00:33:00.287
AUDIENCE: [INAUDIBLE].

00:33:00.287 --> 00:33:01.786
JAKE ARCHIBALD:
More system control.

00:33:01.786 --> 00:33:02.980
AUDIENCE: Push notification.

00:33:02.980 --> 00:33:03.640
JAKE ARCHIBALD: What
was that, sorry?

00:33:03.640 --> 00:33:03.970
AUDIENCE: Push notification.

00:33:03.970 --> 00:33:05.800
JAKE ARCHIBALD:
Push notification.

00:33:05.800 --> 00:33:07.540
GREG SIMON: Coming.

00:33:07.540 --> 00:33:08.220
Soon.

00:33:08.220 --> 00:33:09.360
JAKE ARCHIBALD: We'll
go to your question,

00:33:09.360 --> 00:33:12.090
because it might be the same
one that I've got written here.

00:33:12.090 --> 00:33:13.710
AUDIENCE: Well, it might be.

00:33:13.710 --> 00:33:18.345
So when are we going to get a
polyfill for Service Worker?

00:33:18.345 --> 00:33:19.220
JAKE ARCHIBALD: Yeah.

00:33:19.220 --> 00:33:22.655
[LAUGHTER]

00:33:22.655 --> 00:33:24.780
ALEX RUSSELL: I have bad
news and bad news for you.

00:33:24.780 --> 00:33:27.030
JAKE ARCHIBALD: Well, the
question we had from Twitter

00:33:27.030 --> 00:33:28.450
is very similar.

00:33:28.450 --> 00:33:31.700
Can Chrome on iOS
support Service Worker

00:33:31.700 --> 00:33:33.220
before Safari on
iOS does as well?

00:33:33.220 --> 00:33:36.160
And I guess that would be
in the shape of a polyfill.

00:33:36.160 --> 00:33:39.500
ALEX RUSSELL: So, the
way to think about this

00:33:39.500 --> 00:33:41.890
is that there is a
land before time where

00:33:41.890 --> 00:33:45.080
you start typing a URL
into the address bar,

00:33:45.080 --> 00:33:49.350
and then some user
agent gets a whack

00:33:49.350 --> 00:33:51.710
at actually making
the HTTP request,

00:33:51.710 --> 00:33:53.600
forming it, sending
it out to the network,

00:33:53.600 --> 00:33:54.940
and bringing something back.

00:33:54.940 --> 00:33:57.350
Polyfills, today, all
operate in the context

00:33:57.350 --> 00:33:59.150
of the document that comes back.

00:33:59.150 --> 00:34:01.570
Some script is executing
inside that document.

00:34:01.570 --> 00:34:04.490
Service Workers,
and Gears before it,

00:34:04.490 --> 00:34:06.939
were all about that
moment before time,

00:34:06.939 --> 00:34:08.480
that moment before
your document even

00:34:08.480 --> 00:34:11.070
exists, what it is that you
do to intercept that network

00:34:11.070 --> 00:34:11.570
connection.

00:34:11.570 --> 00:34:15.600
So before I joined Google,
we had built a little proxy

00:34:15.600 --> 00:34:19.050
as part of a toolkit that I
had before that was actually

00:34:19.050 --> 00:34:20.300
sitting on the user's device.

00:34:20.300 --> 00:34:21.909
And it just ran a
little HTTP proxy.

00:34:21.909 --> 00:34:24.070
And it basically
did the same thing.

00:34:24.070 --> 00:34:28.170
And Gears did roughly the
same thing in the IE era.

00:34:28.170 --> 00:34:30.550
And so those are solutions,
but those solutions

00:34:30.550 --> 00:34:32.560
have to be relatively invasive.

00:34:32.560 --> 00:34:35.770
So from a document, having a
polyfill for Service Workers

00:34:35.770 --> 00:34:38.540
isn't going to work for
that first document load.

00:34:38.540 --> 00:34:40.832
What you can do, however, is
to build your applications

00:34:40.832 --> 00:34:43.456
in a way that's compatible with
Service Workers, where you have

00:34:43.456 --> 00:34:45.739
an application shell, and
then you load content.

00:34:45.739 --> 00:34:49.199
Today, almost every document
that we send down the wire

00:34:49.199 --> 00:34:51.469
has expires headers
that are set to zero.

00:34:51.469 --> 00:34:54.489
We cache all of our resources
but not that main shell.

00:34:54.489 --> 00:34:56.690
Something you can do is
actually set that document

00:34:56.690 --> 00:34:58.570
to go longer in the cache.

00:34:58.570 --> 00:35:01.420
We don't do it today,
because it means

00:35:01.420 --> 00:35:02.780
you can't keep fresh content.

00:35:02.780 --> 00:35:04.750
But if you build your
application with a shell

00:35:04.750 --> 00:35:07.291
and then a runtime inside
the shell, that's actually

00:35:07.291 --> 00:35:09.790
checking the network to actually
go see if you can do stuff,

00:35:09.790 --> 00:35:12.070
you may be able to get
some of that behavior back.

00:35:12.070 --> 00:35:13.820
But you have to construct
your application

00:35:13.820 --> 00:35:16.510
in a way that's friendly
for application centricness.

00:35:16.510 --> 00:35:19.490
And once you're there, there
are some strategies available.

00:35:19.490 --> 00:35:20.410
It's not a polyfill.

00:35:20.410 --> 00:35:22.500
And we can't make you
one, unfortunately.

00:35:22.500 --> 00:35:27.190
But to the Chrome for iOS
question, because Chrome on iOS

00:35:27.190 --> 00:35:31.840
is actually there, mediating
between that document load

00:35:31.840 --> 00:35:35.130
and what comes back,
it could, in theory,

00:35:35.130 --> 00:35:36.950
run a JavaScript
context to mediate that.

00:35:36.950 --> 00:35:37.860
It's possible for us to do it.

00:35:37.860 --> 00:35:38.818
We haven't done it yet.

00:35:38.818 --> 00:35:42.980
It's not currently in
M40 for Chrome for iOS.

00:35:42.980 --> 00:35:45.637
But that's something
that we can look at.

00:35:45.637 --> 00:35:47.720
GREG SIMON: We would really
love for Mobile Safari

00:35:47.720 --> 00:35:48.595
to have this feature.

00:35:48.595 --> 00:35:49.920
Don't get us strong.

00:35:49.920 --> 00:35:51.320
We would really, really love it.

00:35:51.320 --> 00:35:53.111
ALEX RUSSELL: Please
direct these questions

00:35:53.111 --> 00:35:55.184
at your friendly,
local Apple engineers.

00:35:55.184 --> 00:35:56.600
ALEX KOMOROSKE: A
good way do this

00:35:56.600 --> 00:35:58.160
is build really
awesome experiences

00:35:58.160 --> 00:36:00.620
that your users love and they
can point to and say, wow,

00:36:00.620 --> 00:36:01.922
it works so amazingly well.

00:36:01.922 --> 00:36:04.130
And it works on the elevator
on the subway in Chrome.

00:36:04.130 --> 00:36:04.713
This is great.

00:36:07.049 --> 00:36:08.590
GREG SIMON: Even
though we're hanging

00:36:08.590 --> 00:36:11.160
all of these other APIs
off the Service Worker,

00:36:11.160 --> 00:36:13.360
like push notification,
et cetera,

00:36:13.360 --> 00:36:15.490
I still think that like
99% of the use of it's

00:36:15.490 --> 00:36:16.800
going to be loading.

00:36:16.800 --> 00:36:20.670
Because you can load the site
so fast with a Service Worker,

00:36:20.670 --> 00:36:21.840
it's unbelievable.

00:36:21.840 --> 00:36:24.715
So anyway, try it out.

00:36:24.715 --> 00:36:26.840
JAKE ARCHIBALD: So we talked
about the ephemerality

00:36:26.840 --> 00:36:30.100
of the web being one of
the web's real benefits.

00:36:30.100 --> 00:36:32.960
But if I've got like a local
to-do list or an email that

00:36:32.960 --> 00:36:36.600
failed to send that's now in
an outbox or flight details,

00:36:36.600 --> 00:36:38.787
I don't want those
things to be ephemeral.

00:36:38.787 --> 00:36:40.620
I think the users will
lose trust in the web

00:36:40.620 --> 00:36:43.020
if the browser ephemerates
their data away

00:36:43.020 --> 00:36:45.800
on a whim, which is what
it kind of currently does.

00:36:45.800 --> 00:36:47.700
So what can we do about that?

00:36:47.700 --> 00:36:49.290
Greg or Alex?

00:36:49.290 --> 00:36:51.370
ALEX RUSSELL: So we
have been thinking hard

00:36:51.370 --> 00:36:54.240
about this problem in the
context of Service Workers.

00:36:54.240 --> 00:36:56.760
When we looked at
the way that we'd

00:36:56.760 --> 00:37:00.340
been dealing with persistence
for storage, to date,

00:37:00.340 --> 00:37:04.660
we came away a little bit
unhappy with our former selves.

00:37:04.660 --> 00:37:06.480
Today, there is only
one storage class

00:37:06.480 --> 00:37:08.300
for a file system,
API in Chrome,

00:37:08.300 --> 00:37:09.850
that can be marked
as persistent.

00:37:09.850 --> 00:37:11.047
And that's a problem.

00:37:11.047 --> 00:37:13.380
Because it means that your
application isn't constructed

00:37:13.380 --> 00:37:15.650
just out of things that are
stored in the file system API.

00:37:15.650 --> 00:37:16.595
It's constructed
out of JavaScript.

00:37:16.595 --> 00:37:17.947
It's constructed out of markup.

00:37:17.947 --> 00:37:20.280
It's constructed out of CSS
and a lot of other resources

00:37:20.280 --> 00:37:23.530
that you may be holding onto,
index DB or some other storage

00:37:23.530 --> 00:37:24.030
mechanism.

00:37:24.030 --> 00:37:26.740
And today, those aren't durable.

00:37:26.740 --> 00:37:29.000
And we don't really have an
API that lets us do that.

00:37:29.000 --> 00:37:31.260
We've put together
a skeleton of an API

00:37:31.260 --> 00:37:33.350
that would sort of let
you make an entire origins

00:37:33.350 --> 00:37:37.240
storage durable, such
that it would be opted out

00:37:37.240 --> 00:37:41.670
of the normal cache clearing
or evaporation of stuff

00:37:41.670 --> 00:37:46.960
based on least recently
used heuristics.

00:37:46.960 --> 00:37:48.460
And that's an API
that I think we're

00:37:48.460 --> 00:37:49.824
going to continue to play with.

00:37:49.824 --> 00:37:52.240
One of things that Service
Workers are going to let you do

00:37:52.240 --> 00:37:55.260
is to understand what
is in your caches.

00:37:55.260 --> 00:37:57.750
But again, I think,
in general, we

00:37:57.750 --> 00:38:00.962
haven't done the strongest job
of making the amount of space

00:38:00.962 --> 00:38:02.920
that's available on the
device available to you

00:38:02.920 --> 00:38:03.545
as a developer.

00:38:03.545 --> 00:38:06.130
And I think we're going to
continue to look hard at quota,

00:38:06.130 --> 00:38:07.650
giving you more
of it by default,

00:38:07.650 --> 00:38:09.110
making the quota
API more useful,

00:38:09.110 --> 00:38:10.735
and giving you storage
pressure events,

00:38:10.735 --> 00:38:12.460
so that you can
start to prioritize,

00:38:12.460 --> 00:38:16.990
inside a Service Worker,
what you need to throw away

00:38:16.990 --> 00:38:18.320
when you're under pressure.

00:38:18.320 --> 00:38:20.240
So we're going to give you more
control and more visibility.

00:38:20.240 --> 00:38:21.140
JAKE ARCHIBALD:
So I think an API

00:38:21.140 --> 00:38:23.120
like that, that's the easy
part of the problem, right?

00:38:23.120 --> 00:38:24.370
I mean, it could
be even boiled down

00:38:24.370 --> 00:38:25.716
to just a single function call.

00:38:25.716 --> 00:38:27.090
But surely, the
hard part is sort

00:38:27.090 --> 00:38:29.619
of how to communicate
that to users, right?

00:38:29.619 --> 00:38:31.160
Like what are we
going to tell users?

00:38:31.160 --> 00:38:34.540
Oh, this website is
now not ephemeral.

00:38:34.540 --> 00:38:35.999
How are we going
to deal with that?

00:38:35.999 --> 00:38:37.956
ADRIENNE PORTER FELT:
I'm not sure I'm actually

00:38:37.956 --> 00:38:39.530
the best person to answer that.

00:38:39.530 --> 00:38:41.340
ALEX RUSSELL: Well,
so we have talked

00:38:41.340 --> 00:38:45.890
about what it might
mean to have UI

00:38:45.890 --> 00:38:49.050
maybe in this Keep action,
where we have offered

00:38:49.050 --> 00:38:50.950
a website to you, to
say, hey, would you

00:38:50.950 --> 00:38:54.760
like to hold on to this,
as maybe a strong sign,

00:38:54.760 --> 00:38:58.610
as you were saying earlier,
about engagement and use that

00:38:58.610 --> 00:39:01.090
might allow us to classify
an application as being

00:39:01.090 --> 00:39:01.950
more important.

00:39:01.950 --> 00:39:05.367
I think it's also useful
for us to have an API that

00:39:05.367 --> 00:39:07.700
will let developers understand
the situation that you're

00:39:07.700 --> 00:39:08.794
currently in.

00:39:08.794 --> 00:39:11.210
And that's something that I
think we can get done quickly.

00:39:11.210 --> 00:39:13.376
ALEX KOMOROSKE: Because if
you, as an app developer,

00:39:13.376 --> 00:39:15.620
know that they have stored
state in your application,

00:39:15.620 --> 00:39:17.460
they would mad if
it was now gone.

00:39:17.460 --> 00:39:21.050
You want some way to figure out
that you can alert the user,

00:39:21.050 --> 00:39:22.987
hey, if you don't do
something, it's going to.

00:39:22.987 --> 00:39:24.570
ALEX RUSSELL: One
of the things that's

00:39:24.570 --> 00:39:27.430
critical about all these APIs is
that-- what you're seeing here

00:39:27.430 --> 00:39:29.997
is that we're designing the
APIs to be asynchronous.

00:39:29.997 --> 00:39:31.330
All these APIs are asynchronous.

00:39:31.330 --> 00:39:32.790
All these APIs can fail.

00:39:32.790 --> 00:39:34.470
And that means that
we're going to allow

00:39:34.470 --> 00:39:35.980
users to be in control.

00:39:35.980 --> 00:39:39.020
What that eventual UI is going
to be across different user

00:39:39.020 --> 00:39:40.879
agents and browsers
is something that I

00:39:40.879 --> 00:39:43.420
think we're going to spend the
next couple of years iterating

00:39:43.420 --> 00:39:43.600
on.

00:39:43.600 --> 00:39:45.280
I think we don't know
all the answers yet.

00:39:45.280 --> 00:39:47.030
But I'm excited that
we can do is continue

00:39:47.030 --> 00:39:50.570
to design these APIs that
have time built into them,

00:39:50.570 --> 00:39:54.230
so that Mozilla can take
a different view of what

00:39:54.230 --> 00:39:57.922
UI you should give, if
any, than maybe we do.

00:39:57.922 --> 00:40:00.380
JAKE ARCHIBALD: I know when my
dad feels like his laptop is

00:40:00.380 --> 00:40:02.420
running slow, one of
the things he does,

00:40:02.420 --> 00:40:04.420
as part of his routine,
is sort clear everything

00:40:04.420 --> 00:40:06.995
out of his browser, like all
the check boxes, off it goes.

00:40:06.995 --> 00:40:08.370
Because he feels
like that's kind

00:40:08.370 --> 00:40:10.410
of a non-destructive
action that's

00:40:10.410 --> 00:40:14.030
going to somehow improve
the speed of his laptop.

00:40:14.030 --> 00:40:17.357
But in a more appy web, are
you going to start losing data?

00:40:17.357 --> 00:40:19.440
Is that going to be the
equivalent of him deleting

00:40:19.440 --> 00:40:20.690
the system folder or whatever?

00:40:20.690 --> 00:40:22.856
ADRIENNE PORTER FELT: This
is actually a really good

00:40:22.856 --> 00:40:26.200
question, because we want to
respect people when they say,

00:40:26.200 --> 00:40:28.260
hey, clear my history,
blow away all the state.

00:40:28.260 --> 00:40:30.330
And that's an important
thing that we really

00:40:30.330 --> 00:40:33.520
want to do if that's
actually what the user wants.

00:40:33.520 --> 00:40:37.670
But we have a sense that
sometimes people are doing this

00:40:37.670 --> 00:40:40.894
not for privacy reasons,
but rather because they have

00:40:40.894 --> 00:40:42.810
an idea that it'll make
their computer faster,

00:40:42.810 --> 00:40:44.420
or they think they're
running out of memory,

00:40:44.420 --> 00:40:45.830
but maybe they actually aren't.

00:40:45.830 --> 00:40:47.410
So we're trying
to figure out how

00:40:47.410 --> 00:40:51.410
to balance users' desires
with what they actually

00:40:51.410 --> 00:40:54.335
want to happen in the end.

00:40:54.335 --> 00:40:55.960
JAKE ARCHIBALD: So
one of the new APIs,

00:40:55.960 --> 00:40:58.730
I think, people are asking
for and were certainly

00:40:58.730 --> 00:41:02.590
excited about is having
push notifications.

00:41:02.590 --> 00:41:05.159
So we've both [? sugarcoated ?]
in talks for here's

00:41:05.159 --> 00:41:06.700
how you register
for push and here is

00:41:06.700 --> 00:41:08.491
the event you'll get
in the Service Worker.

00:41:08.491 --> 00:41:10.587
But what about the stuff
that's server to server?

00:41:10.587 --> 00:41:12.670
Is that going to be standard
or are you just going

00:41:12.670 --> 00:41:13.920
to have to deal
with a completely

00:41:13.920 --> 00:41:15.540
separate communication
channel for if they're

00:41:15.540 --> 00:41:17.760
talking to Apple, or if
they're talking to Google,

00:41:17.760 --> 00:41:19.720
or if they're
talking to Mozilla?

00:41:19.720 --> 00:41:22.290
ALEX RUSSELL: That's
another great question.

00:41:22.290 --> 00:41:25.070
So today, the state
of the world is

00:41:25.070 --> 00:41:29.430
that you send push
messages to devices.

00:41:29.430 --> 00:41:32.150
And those messaging
services tend

00:41:32.150 --> 00:41:33.720
to be tied to the
operating system

00:41:33.720 --> 00:41:35.100
that the user is running.

00:41:35.100 --> 00:41:36.880
And so, for instance,
for Android,

00:41:36.880 --> 00:41:38.280
that's Google Cloud Messaging.

00:41:38.280 --> 00:41:41.430
For iOS, that's APN-- APM?

00:41:41.430 --> 00:41:42.930
I don't remember
the exact acronym,

00:41:42.930 --> 00:41:45.660
but Apple's push
messaging system.

00:41:45.660 --> 00:41:48.530
And so it's likely that
what's going to happen--

00:41:48.530 --> 00:41:50.780
or for Mozilla, they'll have
their own system-- what's

00:41:50.780 --> 00:41:54.820
likely going to happen is that
these, for some period of time,

00:41:54.820 --> 00:41:58.590
are going to continue to be
device or provider specific.

00:41:58.590 --> 00:42:00.290
Where you will get
a registration,

00:42:00.290 --> 00:42:02.780
at your application,
about the registration

00:42:02.780 --> 00:42:04.490
ID that comes from the device.

00:42:04.490 --> 00:42:06.570
And you can know
what that device is.

00:42:06.570 --> 00:42:09.527
And then you can have the
conversation with the back-end.

00:42:09.527 --> 00:42:11.360
Today, all of those
protocols are different.

00:42:11.360 --> 00:42:12.780
One of the things
that the team, that's

00:42:12.780 --> 00:42:14.630
been working very
hard on this in London

00:42:14.630 --> 00:42:18.120
and produced all the code for
the demo yesterday, have done

00:42:18.120 --> 00:42:20.120
is that they've started
a standardization effort

00:42:20.120 --> 00:42:23.080
around that server-to-server
communication channel.

00:42:23.080 --> 00:42:24.160
Today, there isn't one.

00:42:24.160 --> 00:42:25.680
And we're keen to get that done.

00:42:25.680 --> 00:42:27.860
And I think everybody who's been
participating in this-- Mozilla

00:42:27.860 --> 00:42:29.443
has been participating
in this process

00:42:29.443 --> 00:42:33.510
with us-- is also keen to
see some sort of a backhaul

00:42:33.510 --> 00:42:36.324
or a northbound
protocol standard,

00:42:36.324 --> 00:42:37.990
so that we can
eventually get to a place

00:42:37.990 --> 00:42:39.800
where your application
server may continue

00:42:39.800 --> 00:42:41.730
to have to speak to
a different server,

00:42:41.730 --> 00:42:44.311
based on what device
the user is talking,

00:42:44.311 --> 00:42:46.310
but you don't have to
speak a different protocol

00:42:46.310 --> 00:42:47.830
to talk to that server.

00:42:47.830 --> 00:42:48.420
JAKE ARCHIBALD: So I
think at the moment,

00:42:48.420 --> 00:42:50.584
we've got like a key in
the manifest, isn't it,

00:42:50.584 --> 00:42:51.250
to sort of do--?

00:42:51.250 --> 00:42:52.540
GREG SIMON: Yeah.

00:42:52.540 --> 00:42:55.300
So that key is a
regrettable side-effect

00:42:55.300 --> 00:42:59.320
of having to use GCM or
Apple's push system today.

00:42:59.320 --> 00:43:01.560
And I think eventually
that can go away.

00:43:01.560 --> 00:43:04.180
But we don't have plans
yet, in the initial release,

00:43:04.180 --> 00:43:05.550
to remove it.

00:43:05.550 --> 00:43:08.770
JAKE ARCHIBALD: We
ditched vendor prefixes

00:43:08.770 --> 00:43:11.240
in both JavaScript
APIs and in CSS,

00:43:11.240 --> 00:43:13.050
which I think was a great thing.

00:43:13.050 --> 00:43:14.560
Are we sneakily
bringing those back

00:43:14.560 --> 00:43:17.497
with meta tags and the manifest?

00:43:17.497 --> 00:43:18.630
[LAUGHTER]

00:43:18.630 --> 00:43:20.880
ALEX RUSSELL: So I actually
have a much different view

00:43:20.880 --> 00:43:22.420
of vendor prefixes
than most people.

00:43:22.420 --> 00:43:26.800
If you want no progress but
real stability, you can have it.

00:43:26.800 --> 00:43:29.760
But you can't also
have new features.

00:43:29.760 --> 00:43:31.990
It's important to
note that you have

00:43:31.990 --> 00:43:34.490
to prioritize these incentives.

00:43:34.490 --> 00:43:37.380
And so if you don't let
your platform breathe,

00:43:37.380 --> 00:43:41.160
if you don't let it ever inhale,
it can never continue to live.

00:43:41.160 --> 00:43:43.920
So it's important that we
find ways for our platform

00:43:43.920 --> 00:43:46.590
to continue to breathe,
to continue to figure out

00:43:46.590 --> 00:43:48.900
what the next features
should be and then

00:43:48.900 --> 00:43:50.590
bake them in and
make them stable.

00:43:50.590 --> 00:43:55.070
And so I think that vendor
prefixes have a bad rap,

00:43:55.070 --> 00:43:56.930
because we have done
some of them wrong.

00:43:56.930 --> 00:44:00.570
So for instance, with the CSS
vendor prefixes, we, Chrome,

00:44:00.570 --> 00:44:04.330
shipped WebKit-, not
Chrome- or Google-.

00:44:04.330 --> 00:44:07.000
And every other
webkit-based browser

00:44:07.000 --> 00:44:08.175
did exactly the same thing.

00:44:08.175 --> 00:44:08.800
So that was us.

00:44:08.800 --> 00:44:09.966
It wasn't the vendor prefix.

00:44:09.966 --> 00:44:11.310
It was a project prefix.

00:44:11.310 --> 00:44:13.570
That was the wrong thing to do.

00:44:13.570 --> 00:44:16.321
And I think it's good that
we've gotten past that.

00:44:16.321 --> 00:44:17.820
As we do this in
the future, I think

00:44:17.820 --> 00:44:20.236
we've been talking productively
with other browser vendors

00:44:20.236 --> 00:44:22.740
about ways that we can
sort of, on a schedule

00:44:22.740 --> 00:44:25.862
and for a limited set of
developers, break features,

00:44:25.862 --> 00:44:28.070
so that you know that, if
you're using something new,

00:44:28.070 --> 00:44:28.750
it's going to break.

00:44:28.750 --> 00:44:29.625
It's going to change.

00:44:29.625 --> 00:44:32.630
And I think that's a new
tactic that we're looking at

00:44:32.630 --> 00:44:36.160
to hopefully enable us to zoom
ahead and give you the features

00:44:36.160 --> 00:44:36.760
that you want.

00:44:36.760 --> 00:44:38.860
But only if you're going to be
engaged in the process with us.

00:44:38.860 --> 00:44:39.380
ALEX KOMOROSKE: Right.

00:44:39.380 --> 00:44:40.857
Because obviously, the
prefixes were supposed

00:44:40.857 --> 00:44:42.430
to be this warning sign
to developers like,

00:44:42.430 --> 00:44:44.310
you can use this, but
it's not fully baked yet.

00:44:44.310 --> 00:44:45.030
It might change.

00:44:45.030 --> 00:44:46.660
But realistically, what
happened is people would just

00:44:46.660 --> 00:44:48.627
learn that that was
the Go Stack Overflow,

00:44:48.627 --> 00:44:50.210
just paste in this
thing and it works.

00:44:50.210 --> 00:44:50.889
Great.

00:44:50.889 --> 00:44:51.930
So it was hard to change.

00:44:51.930 --> 00:44:54.305
GREG SIMON: When I think of
vendor prefixes and meta tag,

00:44:54.305 --> 00:44:58.960
I think of browser vendors
trying to ship things faster.

00:44:58.960 --> 00:45:04.530
Because there's a ton
of risk in being first,

00:45:04.530 --> 00:45:06.310
as Dimitry said earlier.

00:45:06.310 --> 00:45:11.764
And also, not many people have
the stomach for all the arguing

00:45:11.764 --> 00:45:13.680
that goes on in all of
these standard scripts.

00:45:13.680 --> 00:45:15.100
I mean, I certainly don't.

00:45:15.100 --> 00:45:15.686
Alex does.

00:45:19.330 --> 00:45:23.180
So when I look at
other platforms,

00:45:23.180 --> 00:45:27.472
when I look at iOS, when
I look at Windows, when

00:45:27.472 --> 00:45:30.620
I look at Android, the
web is the only platform

00:45:30.620 --> 00:45:34.120
that must render everything
from the beginning of time.

00:45:34.120 --> 00:45:38.250
Everything from Archive.org,
it has to be able to work,

00:45:38.250 --> 00:45:39.940
otherwise we've somehow failed.

00:45:39.940 --> 00:45:43.080
No other platform
has this problem.

00:45:43.080 --> 00:45:50.850
And so it's very, very hard for
us to experiment and ship fast.

00:45:50.850 --> 00:45:52.600
But we all want to
ship things faster.

00:45:52.600 --> 00:45:56.560
And we are committed to
finding ways to do that.

00:45:56.560 --> 00:45:58.650
JAKE ARCHIBALD: So with
well-built native apps,

00:45:58.650 --> 00:46:00.920
one of the things I really
enjoy is I install them

00:46:00.920 --> 00:46:02.110
and I run them.

00:46:02.110 --> 00:46:07.300
And it's already able to
tie data to me, as a user,

00:46:07.300 --> 00:46:10.959
even in the cloud.

00:46:10.959 --> 00:46:13.000
Is that something we want
from the web, some sort

00:46:13.000 --> 00:46:16.250
of like single identity
that the browser offers?

00:46:16.250 --> 00:46:19.060
Or is that adding a kind
of centralization that is

00:46:19.060 --> 00:46:19.869
anti-web?

00:46:19.869 --> 00:46:21.660
ALEX KOMOROSKE: You
mean the centralization

00:46:21.660 --> 00:46:22.996
is anti-web at the end.

00:46:22.996 --> 00:46:24.370
So I think identity
is definitely

00:46:24.370 --> 00:46:26.829
something that makes sense.

00:46:26.829 --> 00:46:28.870
And we're investigating
how to do this correctly.

00:46:28.870 --> 00:46:31.045
Because if you want to
opt in as a developer

00:46:31.045 --> 00:46:32.670
and use that thing
that's already there

00:46:32.670 --> 00:46:34.461
just to smooth over
the initial experience,

00:46:34.461 --> 00:46:35.795
it obviously makes sense.

00:46:35.795 --> 00:46:37.920
The way Android does it,
if I understand correctly,

00:46:37.920 --> 00:46:40.849
is there are identity
providers on the system.

00:46:40.849 --> 00:46:42.890
And for example, obviously
Google is one of them.

00:46:42.890 --> 00:46:45.204
But Facebook also does it,
and others can as well.

00:46:45.204 --> 00:46:46.620
And so it doesn't
necessarily have

00:46:46.620 --> 00:46:49.410
to be that, if you're
talking to a native provider,

00:46:49.410 --> 00:46:51.742
it has be like some
closed, centralized system.

00:46:51.742 --> 00:46:53.950
You, as a developer, could
theoretically decide, hey,

00:46:53.950 --> 00:46:54.790
this is the one I
want to go with.

00:46:54.790 --> 00:46:56.039
I'm going to go with that one.

00:46:56.039 --> 00:46:57.520
I'm going to just-- so.

00:46:57.520 --> 00:46:58.660
I think that this is
something we are definitely

00:46:58.660 --> 00:46:59.120
interested in.

00:46:59.120 --> 00:47:00.320
We're looking at how
to do this correctly.

00:47:00.320 --> 00:47:02.403
It doesn't necessarily
have to be something that's

00:47:02.403 --> 00:47:04.430
like, well, you must
buy into this, the way

00:47:04.430 --> 00:47:06.490
that this group does it.

00:47:06.490 --> 00:47:08.420
JAKE ARCHIBALD: Sounds
like Web Intents?

00:47:08.420 --> 00:47:09.875
Shall we start that again?

00:47:12.724 --> 00:47:13.640
ALEX KOMOROSKE: Maybe.

00:47:13.640 --> 00:47:15.217
ALEX RUSSELL: So
one of the things

00:47:15.217 --> 00:47:16.800
that I think maybe
you're alluding to,

00:47:16.800 --> 00:47:20.950
Greg, is we're looking
at ways of having

00:47:20.950 --> 00:47:23.200
a relatively small
API surface area that

00:47:23.200 --> 00:47:25.400
allows us to expose more
capabilities more quickly,

00:47:25.400 --> 00:47:28.220
but do it in a very
vendor specific way.

00:47:28.220 --> 00:47:30.710
But not in the bad
way, in the sense that,

00:47:30.710 --> 00:47:33.250
if I talk to your website, I'm
only talking to your website.

00:47:33.250 --> 00:47:35.000
If I'm talking to you,
I'm talking to you.

00:47:35.000 --> 00:47:36.070
I'd like to have a
conversation with you

00:47:36.070 --> 00:47:37.610
not with some random
third party who

00:47:37.610 --> 00:47:39.530
may be implementing
the same API.

00:47:39.530 --> 00:47:43.980
That's a place where-- imagine
talking to a Service Worker

00:47:43.980 --> 00:47:46.820
that Chrome has
implemented, but it's

00:47:46.820 --> 00:47:48.460
only available at chrome.com.

00:47:48.460 --> 00:47:51.617
That's the sort of
capability system

00:47:51.617 --> 00:47:53.200
that you could have
over post message.

00:47:53.200 --> 00:47:55.150
But it's just tied to an origin.

00:47:55.150 --> 00:47:57.640
And we don't expect
web-hosted APIs not to break.

00:47:57.640 --> 00:47:58.640
They break all the time.

00:47:58.640 --> 00:48:00.820
It's just sort of what
happens on the web.

00:48:00.820 --> 00:48:01.920
It's just content.

00:48:01.920 --> 00:48:03.420
So that's the sort
of area where we

00:48:03.420 --> 00:48:07.710
can imagine creating a
broader ability to launch

00:48:07.710 --> 00:48:10.630
new features quickly and
maybe integrate deeper

00:48:10.630 --> 00:48:12.650
with the underlying
system like Intents did.

00:48:12.650 --> 00:48:13.816
GREG SIMON: Right.

00:48:13.816 --> 00:48:17.360
But that moves from an
IDL binding to a protocol

00:48:17.360 --> 00:48:19.820
binding, which is a
lot more flexible.

00:48:19.820 --> 00:48:21.090
You can version it.

00:48:21.090 --> 00:48:26.520
You can sniff to see if it's
there-- a lot more stable.

00:48:26.520 --> 00:48:28.619
JAKE ARCHIBALD: So if we're
getting all these cool

00:48:28.619 --> 00:48:30.160
new toys, they're
going to have to be

00:48:30.160 --> 00:48:32.890
behind some kind of extended
permissioning system.

00:48:32.890 --> 00:48:35.902
Are we going to head towards
a massive in-browser spam

00:48:35.902 --> 00:48:37.610
problem, where you
visit a site, and it's

00:48:37.610 --> 00:48:39.790
going to be this site wants
to know your location,

00:48:39.790 --> 00:48:41.050
it wants access to
your microphone,

00:48:41.050 --> 00:48:42.758
it wants to know the
gender of your pets?

00:48:42.758 --> 00:48:45.465
[LAUGHTER]

00:48:45.465 --> 00:48:47.840
ADRIENNE PORTER FELT: I'm
intrigued with the website that

00:48:47.840 --> 00:48:49.423
needs to know the
gender of your pets.

00:48:52.240 --> 00:48:54.650
I think if we were
to do nothing,

00:48:54.650 --> 00:48:56.190
yes, that would happen.

00:48:56.190 --> 00:49:01.274
But we are aware that
this is a problem.

00:49:01.274 --> 00:49:02.440
It's a problem for everyone.

00:49:02.440 --> 00:49:03.606
It's problem for developers.

00:49:03.606 --> 00:49:05.160
It's a problem for users.

00:49:05.160 --> 00:49:07.080
So we're taking steps
to try to prevent it.

00:49:07.080 --> 00:49:09.020
So that's why I
mentioned earlier looking

00:49:09.020 --> 00:49:10.870
at types of positive
user engagement

00:49:10.870 --> 00:49:16.500
to figure out non-privacy
sensitive things a user might

00:49:16.500 --> 00:49:18.600
wish to automatically
grant to a website

00:49:18.600 --> 00:49:22.200
and also the inverse of that,
looking at crowdsourcing.

00:49:22.200 --> 00:49:25.070
If a large number of users are
unhappy about a website having

00:49:25.070 --> 00:49:28.570
something, maybe we shouldn't
be asking users about it.

00:49:28.570 --> 00:49:30.737
Because we know they're
going to say no.

00:49:30.737 --> 00:49:32.570
We're also looking at
things like setting up

00:49:32.570 --> 00:49:36.310
smart defaults and
new types of UI,

00:49:36.310 --> 00:49:40.360
like a choose-your-model,
where the user is selecting

00:49:40.360 --> 00:49:43.960
from amongst a set of
things, as part of the flow,

00:49:43.960 --> 00:49:46.710
instead of just answering
binary yes or no questions.

00:49:46.710 --> 00:49:48.500
So we're taking
several approaches

00:49:48.500 --> 00:49:51.994
to try to prevent the
info bar explosion world.

00:49:51.994 --> 00:49:53.410
JAKE ARCHIBALD:
Is there something

00:49:53.410 --> 00:49:56.980
we can do there to prevent the
Android problem, where there's

00:49:56.980 --> 00:50:00.470
a big, long list of things
and people are like, yeah,

00:50:00.470 --> 00:50:01.970
whatever.

00:50:01.970 --> 00:50:05.765
It becomes the terms and
conditions sort of problem.

00:50:05.765 --> 00:50:08.140
ADRIENNE PORTER FELT: I think
actually the people sitting

00:50:08.140 --> 00:50:11.000
here can help us with that.

00:50:11.000 --> 00:50:14.560
I really hope that websites
don't try to work around us,

00:50:14.560 --> 00:50:19.330
to be popping up long list of
permission requests on load.

00:50:19.330 --> 00:50:24.715
I think that doing that does
the entire web a disservice.

00:50:24.715 --> 00:50:26.590
So first of all, I don't
think it'll actually

00:50:26.590 --> 00:50:27.400
work out in your favor.

00:50:27.400 --> 00:50:29.733
I think people will say no
to that, because they haven't

00:50:29.733 --> 00:50:31.210
gotten a justification yet.

00:50:31.210 --> 00:50:33.424
And it also hurts the
user, because now,

00:50:33.424 --> 00:50:35.590
going to every website,
it's immediately popping up,

00:50:35.590 --> 00:50:37.817
without any context, these
questions that are scary,

00:50:37.817 --> 00:50:39.400
and they don't know
how to understand.

00:50:39.400 --> 00:50:42.350
So I like to hope that the
web naturally avoids this,

00:50:42.350 --> 00:50:45.000
because it seems to
maybe not to be the best

00:50:45.000 --> 00:50:47.250
experience for the web, for
websites to be doing this.

00:50:47.250 --> 00:50:48.999
ALEX KOMOROSKE: It's
not a good experience

00:50:48.999 --> 00:50:50.660
for that site in
particular, too.

00:50:50.660 --> 00:50:51.850
I mean, the users are going
to be, why the hell is this?

00:50:51.850 --> 00:50:52.849
They're going to bounce.

00:50:52.849 --> 00:50:54.944
So it's bad for the
whole web if you do that.

00:50:54.944 --> 00:50:57.360
It's also bad for your own
particular site if you do that.

00:50:57.360 --> 00:50:58.680
JAKE ARCHIBALD: I think a
good, bad example of this

00:50:58.680 --> 00:51:00.340
is actually Google Web Search.

00:51:00.340 --> 00:51:02.340
If you look at that on
the mobile, you go there,

00:51:02.340 --> 00:51:04.460
you type in your search
thing, and it comes up,

00:51:04.460 --> 00:51:05.630
Google wants to
know your location.

00:51:05.630 --> 00:51:06.171
Is that fine?

00:51:06.171 --> 00:51:07.250
I bet it would.

00:51:07.250 --> 00:51:08.910
I'm not going to tell it.

00:51:08.910 --> 00:51:10.700
But if it was a
button that said,

00:51:10.700 --> 00:51:13.551
Localize Your
Search Results, when

00:51:13.551 --> 00:51:15.550
I felt it would be relevant,
I might press that.

00:51:15.550 --> 00:51:17.210
And it would go, Google
wants to know your location.

00:51:17.210 --> 00:51:17.900
Yes, fine.

00:51:17.900 --> 00:51:19.340
You will need to know that.

00:51:19.340 --> 00:51:20.590
ADRIENNE PORTER FELT: We
have this problem, right now,

00:51:20.590 --> 00:51:22.480
because, currently,
there's no way

00:51:22.480 --> 00:51:24.270
to find out if you
have geolocation

00:51:24.270 --> 00:51:25.690
without trying to use it.

00:51:25.690 --> 00:51:28.980
So I mentioned in my talk
yesterday, the permissions API,

00:51:28.980 --> 00:51:31.924
which currently both Mozilla
and Chrome are interested in,

00:51:31.924 --> 00:51:33.590
which will help with
this type of thing.

00:51:33.590 --> 00:51:34.550
Because you can check.

00:51:34.550 --> 00:51:36.674
If you have it or not, then
you can use it on load.

00:51:36.674 --> 00:51:38.610
And if you don't
have it, then you

00:51:38.610 --> 00:51:41.540
should wait until the
user turns on a feature

00:51:41.540 --> 00:51:44.950
or actually makes the search
before you ask the question.

00:51:44.950 --> 00:51:46.824
JAKE ARCHIBALD: So
what do we think

00:51:46.824 --> 00:51:48.240
the way forward
here is in future?

00:51:48.240 --> 00:51:50.240
If we do have
things like caching,

00:51:50.240 --> 00:51:54.250
so we can get page load fast,
we have navigation transitions,

00:51:54.250 --> 00:51:58.119
to get from one place to
another, in that future,

00:51:58.119 --> 00:51:59.910
are we still going to
see single page apps?

00:51:59.910 --> 00:52:02.850
Or do those other technologies
take care of that?

00:52:02.850 --> 00:52:05.219
I guess, in Cordova,
what do you see there?

00:52:05.219 --> 00:52:07.010
Because, I guess, with
the native platform,

00:52:07.010 --> 00:52:09.280
you've got caching,
you've got transitions,

00:52:09.280 --> 00:52:11.431
with your transition from
one web view to another.

00:52:11.431 --> 00:52:13.930
Or do you still see people doing
all of that transition work

00:52:13.930 --> 00:52:16.200
within a single web view?

00:52:16.200 --> 00:52:19.660
ANDREW GRIEVE: So the
transition between pages

00:52:19.660 --> 00:52:22.900
creates a nice visual
continuity for the user.

00:52:22.900 --> 00:52:24.560
But under the hood,
it's basically

00:52:24.560 --> 00:52:28.250
like you've closed your app
and you're restarting it again.

00:52:28.250 --> 00:52:30.834
I think there's still going
to be that strong advantage

00:52:30.834 --> 00:52:33.000
for single page applications
in that they don't have

00:52:33.000 --> 00:52:35.610
to clear out their
entire JavaScript context

00:52:35.610 --> 00:52:37.004
and restart from scratch.

00:52:37.004 --> 00:52:38.420
If they want to
save anything, you

00:52:38.420 --> 00:52:40.880
need to persist it and
then read it out again.

00:52:40.880 --> 00:52:42.330
It's not a very good model.

00:52:45.477 --> 00:52:47.810
I'm actually really interested
to see how these activity

00:52:47.810 --> 00:52:50.860
transitions will be used,
because I think single page

00:52:50.860 --> 00:52:53.862
applications have
a clear advantage.

00:52:53.862 --> 00:52:55.320
JAKE ARCHIBALD: I
think the problem

00:52:55.320 --> 00:52:58.010
with doing the single page
app thing is that, to do that

00:52:58.010 --> 00:53:01.150
and to have correct URLs, which
you should, you sort of opt in

00:53:01.150 --> 00:53:03.814
to the history state API, like
the push state, pop state,

00:53:03.814 --> 00:53:05.230
and you're also,
therefore, opting

00:53:05.230 --> 00:53:07.130
in to lower quality of life.

00:53:07.130 --> 00:53:08.920
Because I've never
found those APIs

00:53:08.920 --> 00:53:12.380
have really worked
correctly for me.

00:53:12.380 --> 00:53:13.130
What do you think?

00:53:13.130 --> 00:53:15.890
Is this something that
we're going to see go away?

00:53:15.890 --> 00:53:19.217
Or this that going to be a
sort of deprecated model?

00:53:19.217 --> 00:53:21.300
ALEX RUSSELL: I don't know
what's going to happen.

00:53:21.300 --> 00:53:22.610
And I'm excited about that.

00:53:22.610 --> 00:53:24.320
I actually am
incredibly excited,

00:53:24.320 --> 00:53:27.160
because navigation transitions
and the team that's building it

00:53:27.160 --> 00:53:31.472
are going to enable regular
content websites, people who

00:53:31.472 --> 00:53:33.180
aren't building single
page applications,

00:53:33.180 --> 00:53:35.263
who may not have the
engineering team, who may not

00:53:35.263 --> 00:53:36.760
have the chops to
actually go build

00:53:36.760 --> 00:53:40.490
the same sorts of experiences
with some of that lag, right?

00:53:40.490 --> 00:53:41.810
So there may be an advantage.

00:53:41.810 --> 00:53:44.560
But that's an advantage that
you can pay for as you go.

00:53:44.560 --> 00:53:47.460
And I think that, if you have
a Service Worker installed,

00:53:47.460 --> 00:53:49.665
it may be the case
that maybe you're

00:53:49.665 --> 00:53:51.790
in the same ballpark in
terms of total performance.

00:53:51.790 --> 00:53:52.860
We don't know.

00:53:52.860 --> 00:53:55.107
I can't wait to find out.

00:53:55.107 --> 00:53:57.440
JAKE ARCHIBALD: We'll take a
question from the audience.

00:53:57.440 --> 00:53:58.500
AUDIENCE: I wanted
to validate what

00:53:58.500 --> 00:54:01.090
you said a second ago about
the location and Google Search.

00:54:01.090 --> 00:54:02.631
Anyone that knows
me knows I probably

00:54:02.631 --> 00:54:05.520
am more Google connected
than half the Googlers are.

00:54:05.520 --> 00:54:07.380
And I'm very trusting
of the platform.

00:54:07.380 --> 00:54:09.210
And yet I found
that, subconsciously,

00:54:09.210 --> 00:54:10.600
that's one thing
I've always done

00:54:10.600 --> 00:54:14.170
is denied that location request
on the Search page, where

00:54:14.170 --> 00:54:16.610
I would never otherwise
even think twice about it.

00:54:16.610 --> 00:54:18.595
All my devices are
tracking me anyway.

00:54:18.595 --> 00:54:20.470
So I think you got a
really good point there.

00:54:20.470 --> 00:54:21.940
It's just the context.

00:54:21.940 --> 00:54:23.800
JAKE ARCHIBALD: And
I think we really

00:54:23.800 --> 00:54:26.790
need to keep hold of
the contextual part

00:54:26.790 --> 00:54:29.690
of the permissioning
model, rather than go

00:54:29.690 --> 00:54:31.340
to what Android does now.

00:54:31.340 --> 00:54:33.590
Maybe even we can get Android
to come over to our side

00:54:33.590 --> 00:54:36.912
and do things the right way.

00:54:36.912 --> 00:54:38.870
How do we make sure that
web APIs in the future

00:54:38.870 --> 00:54:43.180
aren't going to be constantly
a year or two behind what

00:54:43.180 --> 00:54:46.250
operating systems have, what
native applications have,

00:54:46.250 --> 00:54:49.291
such as things like Apple
Touch ID or the Apple Pay?

00:54:49.291 --> 00:54:51.290
How can we bring those
kind of things to the web

00:54:51.290 --> 00:54:53.990
without this kind of
massive lead time?

00:54:53.990 --> 00:54:56.895
GREG SIMON: So Alex and I talked
about that a bit earlier--

00:54:56.895 --> 00:54:58.400
and Mike, also.

00:54:58.400 --> 00:55:04.705
Yeah, we have to find a conduit
to ship access to those faster.

00:55:07.660 --> 00:55:10.760
The current IDL
conduit is kind of

00:55:10.760 --> 00:55:14.110
cumbersome for that,
because it doesn't scale.

00:55:14.110 --> 00:55:15.880
And so that's why
we're looking at things

00:55:15.880 --> 00:55:17.750
like Navigator Connect.

00:55:17.750 --> 00:55:19.970
But that's just the tech.

00:55:19.970 --> 00:55:22.530
There's still the
permissions aspect, right?

00:55:22.530 --> 00:55:27.310
I can wire up the USB
port to my browser,

00:55:27.310 --> 00:55:29.650
but that doesn't mean I should.

00:55:32.950 --> 00:55:34.816
MIKE TSAO: Another
component is just

00:55:34.816 --> 00:55:36.440
coming up with all
the right primitives

00:55:36.440 --> 00:55:39.640
to have these spec
discussions more quickly.

00:55:39.640 --> 00:55:45.420
If Service Worker becomes the de
facto target for events, that's

00:55:45.420 --> 00:55:49.200
one thing, stream
interface is another,

00:55:49.200 --> 00:55:51.350
all of these different things.

00:55:51.350 --> 00:55:54.390
And I think that we still have
to go through the spec process,

00:55:54.390 --> 00:55:57.800
but we can just make it as
efficient as we possibly can

00:55:57.800 --> 00:56:00.950
so that there's not so much
reinvention of the wheel

00:56:00.950 --> 00:56:02.430
each time.

00:56:02.430 --> 00:56:04.601
JAKE ARCHIBALD:
Well, to finish up,

00:56:04.601 --> 00:56:06.350
we've got a kind of
captive audience here.

00:56:06.350 --> 00:56:08.230
What do you guys
want from developers

00:56:08.230 --> 00:56:12.250
to help move the web forward
or to make your jobs easier

00:56:12.250 --> 00:56:13.540
to move the web forward?

00:56:13.540 --> 00:56:17.200
GREG SIMON: Please ask
other browser vendors

00:56:17.200 --> 00:56:18.500
to push the web forward.

00:56:18.500 --> 00:56:20.250
JAKE ARCHIBALD: I
guess, to me, a good way

00:56:20.250 --> 00:56:24.380
of doing that is, if you
use Service Worker to make

00:56:24.380 --> 00:56:27.950
your stuff faster, then your
sites are going to be faster

00:56:27.950 --> 00:56:30.139
in Chrome and in Firefox,
when they adopt it.

00:56:30.139 --> 00:56:32.180
And hopefully, that will
guilt the other browsers

00:56:32.180 --> 00:56:36.820
into having to implement it
so they'll be faster, too.

00:56:36.820 --> 00:56:38.660
OK, that's all we have time for.

00:56:38.660 --> 00:56:40.210
[APPLAUSE]

