WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.360
[MUSIC PLAYING]

00:00:08.124 --> 00:00:09.290
DAVE SMITH: Hello, everyone.

00:00:09.290 --> 00:00:10.540
My name is Dave Smith.

00:00:10.540 --> 00:00:14.080
I'm a Developer Advocate
at Google on IoT Platforms.

00:00:14.080 --> 00:00:16.540
And I'd like to spend some
time talking to you today

00:00:16.540 --> 00:00:18.294
about some of the
developer platforms

00:00:18.294 --> 00:00:19.960
that we've been working
on, specifically

00:00:19.960 --> 00:00:22.331
in the areas of IoT, and a
little bit about the Google

00:00:22.331 --> 00:00:22.830
Assistant.

00:00:22.830 --> 00:00:25.610
So let's dive right into this.

00:00:25.610 --> 00:00:27.530
So computing has
evolved over the years.

00:00:27.530 --> 00:00:32.000
We've gone from mainframes, to
desktops, laptops, to phones.

00:00:32.000 --> 00:00:34.730
Every decade or so, we see
sort of this major change

00:00:34.730 --> 00:00:35.690
in computing.

00:00:35.690 --> 00:00:38.360
And now, we're seeing
computers literally embedded

00:00:38.360 --> 00:00:40.000
into everything.

00:00:40.000 --> 00:00:42.710
And while phones were
a very large jump

00:00:42.710 --> 00:00:46.440
over PCs in terms of the number
of devices in the market,

00:00:46.440 --> 00:00:50.000
we're expecting to see an
upcoming wave of IoT devices

00:00:50.000 --> 00:00:51.890
with things
literally everywhere.

00:00:51.890 --> 00:00:55.520
So we use the term "ubiquitous
computing" to describe this.

00:00:55.520 --> 00:00:58.730
And it's this technology
that's accessible to the user

00:00:58.730 --> 00:01:01.700
wherever they are and
whenever they want it.

00:01:01.700 --> 00:01:04.340
And today, we're going to talk
about some of the platforms

00:01:04.340 --> 00:01:06.890
that Google has been
working on to support

00:01:06.890 --> 00:01:09.830
this particular effort.

00:01:09.830 --> 00:01:13.040
In the past, we've
trained users to install

00:01:13.040 --> 00:01:17.330
individual separate apps
on every siloed platform.

00:01:17.330 --> 00:01:20.810
But now, we have devices
that are spanning

00:01:20.810 --> 00:01:22.460
all over people's lives.

00:01:22.460 --> 00:01:23.990
And some of these
devices don't even

00:01:23.990 --> 00:01:25.880
have screens like we
would traditionally

00:01:25.880 --> 00:01:29.750
use for a user interface in
terms of a mobile application

00:01:29.750 --> 00:01:31.397
or a desktop application.

00:01:31.397 --> 00:01:33.230
So we need to think a
little bit differently

00:01:33.230 --> 00:01:35.600
about what computing
really means

00:01:35.600 --> 00:01:37.190
to these particular users.

00:01:37.190 --> 00:01:39.290
And we need to
take their context

00:01:39.290 --> 00:01:42.140
into account in what we're
building-- their location,

00:01:42.140 --> 00:01:46.800
their physical activity, time
of day, these types of things.

00:01:46.800 --> 00:01:49.790
So we need to start thinking
about these individual apps

00:01:49.790 --> 00:01:54.110
as actually just individual
views or unique surfaces

00:01:54.110 --> 00:01:58.970
into a single application or a
single continuous or ubiquitous

00:01:58.970 --> 00:02:03.290
service that can service across
all of these different areas.

00:02:03.290 --> 00:02:07.424
We need to create a single
seamless experience.

00:02:07.424 --> 00:02:08.840
So what I'd like
to do is walk you

00:02:08.840 --> 00:02:11.090
through some of the
developer platforms

00:02:11.090 --> 00:02:14.210
that we have here at Google to
help enable your apps to span

00:02:14.210 --> 00:02:15.500
all of these surfaces.

00:02:15.500 --> 00:02:17.720
And I'd like to start
with Android Things.

00:02:17.720 --> 00:02:19.760
So Android Things was
recently announced.

00:02:19.760 --> 00:02:22.840
We announced this as a developer
preview back in December.

00:02:22.840 --> 00:02:25.760
And it's Google's new platform
to support development

00:02:25.760 --> 00:02:27.260
for IoT devices.

00:02:27.260 --> 00:02:29.300
And it's based on Android.

00:02:29.300 --> 00:02:32.030
One of the most important
features of Android Things

00:02:32.030 --> 00:02:36.200
is the use of turnkey hardware
through a System-On-Module, or

00:02:36.200 --> 00:02:37.070
SOM approach.

00:02:37.070 --> 00:02:39.665
And you see some of them
pictured here on the slide.

00:02:39.665 --> 00:02:44.480
The SOM contains a CPU,
memory, wireless interfaces,

00:02:44.480 --> 00:02:46.280
all of the important
electronics that

00:02:46.280 --> 00:02:49.640
are necessary with a
common set of software.

00:02:49.640 --> 00:02:52.090
And these are modules
that you can buy in bulk.

00:02:52.090 --> 00:02:53.480
They're very inexpensive.

00:02:53.480 --> 00:02:55.370
And you can plug them
into your own custom

00:02:55.370 --> 00:02:58.860
boards, which can be
manufactured at very low cost.

00:02:58.860 --> 00:03:01.700
This is all part of our
effort to democratize

00:03:01.700 --> 00:03:03.740
hardware development
for everyone,

00:03:03.740 --> 00:03:06.830
making it fun to
prototype, but also making

00:03:06.830 --> 00:03:09.020
real possibilities
for you to build

00:03:09.020 --> 00:03:11.420
commercially viable products.

00:03:11.420 --> 00:03:13.850
The SOM enables commercial
hardware and some very

00:03:13.850 --> 00:03:16.370
important features.

00:03:16.370 --> 00:03:19.970
Android Things software is
a variant of the Android OS

00:03:19.970 --> 00:03:22.550
that is optimized
specifically for IoT.

00:03:22.550 --> 00:03:24.050
And we've added
new APIs that are

00:03:24.050 --> 00:03:27.470
designed to help you integrate
better with custom hardware.

00:03:27.470 --> 00:03:30.920
Beyond the device platform,
it also includes secure

00:03:30.920 --> 00:03:33.980
and manage software
updates direct from Google.

00:03:33.980 --> 00:03:37.310
These updates are managed using
the Android Things console

00:03:37.310 --> 00:03:42.320
and are verified on device
for enhanced security.

00:03:42.320 --> 00:03:45.950
We see many exciting benefits
of the compute power that

00:03:45.950 --> 00:03:49.310
is possible in a device running
something like Android Things--

00:03:49.310 --> 00:03:53.270
computer vision, audio
processing, machine learning.

00:03:53.270 --> 00:03:55.250
Computing power in
these IoT devices

00:03:55.250 --> 00:03:57.330
is increasing every year.

00:03:57.330 --> 00:03:59.990
But at the same time, they're
getting cheaper and much more

00:03:59.990 --> 00:04:01.470
power-efficient.

00:04:01.470 --> 00:04:03.740
TensorFlow is one
of the examples

00:04:03.740 --> 00:04:06.680
that we are seeing as one of
these great new introductories

00:04:06.680 --> 00:04:08.760
into IoT.

00:04:08.760 --> 00:04:10.850
TensorFlow has been
ported to Android.

00:04:10.850 --> 00:04:14.030
And all kinds of hardware,
such as Android Things,

00:04:14.030 --> 00:04:16.070
also supports this.

00:04:16.070 --> 00:04:19.190
We've built a sample that
takes essentially a capture

00:04:19.190 --> 00:04:22.400
of various images,
such as dogs or cats,

00:04:22.400 --> 00:04:24.260
or other types of
breeds of animals,

00:04:24.260 --> 00:04:26.420
and then allows the
device to classify

00:04:26.420 --> 00:04:30.740
what those images are using a
pretrained TensorFlow model.

00:04:30.740 --> 00:04:33.080
So the training is
done off the device,

00:04:33.080 --> 00:04:37.880
but the device application
is able to process the image

00:04:37.880 --> 00:04:39.590
from the camera
and determine what

00:04:39.590 --> 00:04:42.290
it is by locally running
it through the pretrained

00:04:42.290 --> 00:04:43.520
TensorFlow model.

00:04:43.520 --> 00:04:45.950
It doesn't need any cloud
communication to do this.

00:04:45.950 --> 00:04:49.010
It does all of it locally on
the device using those machine

00:04:49.010 --> 00:04:50.240
learning APIs.

00:04:50.240 --> 00:04:52.457
This is actually a sample
that we've open sourced.

00:04:52.457 --> 00:04:54.290
And you can take a look
for more information

00:04:54.290 --> 00:04:56.331
if you want to play around
with this on your own.

00:04:56.331 --> 00:04:59.830
We also have this sample running
as a demo in the sandbox,

00:04:59.830 --> 00:05:01.760
in that little
plastic Android head.

00:05:01.760 --> 00:05:03.980
So I encourage you to
take that and play around

00:05:03.980 --> 00:05:04.700
with it as well.

00:05:04.700 --> 00:05:06.480
I'm not responsible
for what it says when

00:05:06.480 --> 00:05:09.484
you point it at your friends.

00:05:09.484 --> 00:05:11.150
All right, so let's
take a little minute

00:05:11.150 --> 00:05:13.340
to talk about the
Google Assistant.

00:05:13.340 --> 00:05:16.310
The Google Assistant enables
you to get things done

00:05:16.310 --> 00:05:18.390
with the power of conversation.

00:05:18.390 --> 00:05:20.660
It provides a new
and exciting view

00:05:20.660 --> 00:05:24.850
into your app or service
for users to explore.

00:05:24.850 --> 00:05:27.940
The Assistant is available
on a wide variety of surfaces

00:05:27.940 --> 00:05:32.170
today, from the Google Home,
wearables, phones, in the car.

00:05:32.170 --> 00:05:33.670
And we're working
hard at adding it

00:05:33.670 --> 00:05:37.340
to even more surfaces over time.

00:05:37.340 --> 00:05:39.110
You can extend the
Google Assistant

00:05:39.110 --> 00:05:41.630
as a developer to
support conversations

00:05:41.630 --> 00:05:46.310
with your own apps using the
Actions on Google Platform.

00:05:46.310 --> 00:05:49.040
We provide a simple
conversation API

00:05:49.040 --> 00:05:51.350
to give you raw
strings from the user

00:05:51.350 --> 00:05:53.900
that you can use to
then generate replies.

00:05:53.900 --> 00:05:57.380
This is an example of what we
built as a conversation action

00:05:57.380 --> 00:06:02.090
around Google I/O. This is a
very helpful API because you

00:06:02.090 --> 00:06:05.120
don't have to do the work
of parsing voice input,

00:06:05.120 --> 00:06:06.900
dealing with text to speech.

00:06:06.900 --> 00:06:10.010
All of that can be handled for
you through the Actions API.

00:06:10.010 --> 00:06:13.520
However, you are still
responsible for interpreting

00:06:13.520 --> 00:06:15.410
what the user has said.

00:06:15.410 --> 00:06:18.380
And for a lot of developers,
maybe you don't necessarily

00:06:18.380 --> 00:06:19.670
want to do that yourself.

00:06:19.670 --> 00:06:21.830
It's a fair amount of
control if you need it,

00:06:21.830 --> 00:06:24.150
but sometimes
there's a better way.

00:06:24.150 --> 00:06:26.090
So we have a great
tool that is called

00:06:26.090 --> 00:06:30.122
api.ai that does a lot of
this additional work for you.

00:06:30.122 --> 00:06:31.580
So if you haven't
seen this before,

00:06:31.580 --> 00:06:33.150
I recommend that
you check it out.

00:06:33.150 --> 00:06:37.820
api.ai uses machine learning to
handle extracting entities out

00:06:37.820 --> 00:06:39.470
of sentences for you.

00:06:39.470 --> 00:06:41.870
It's much easier and
more powerful than trying

00:06:41.870 --> 00:06:44.540
to write these regular
expressions yourself.

00:06:44.540 --> 00:06:47.840
And it allows you to implement
these conversational interfaces

00:06:47.840 --> 00:06:48.990
with ease.

00:06:48.990 --> 00:06:50.780
It's a graphical
tool that allows

00:06:50.780 --> 00:06:54.320
you to specify these intents
and entities for the data

00:06:54.320 --> 00:06:56.150
that you're really
interested in out

00:06:56.150 --> 00:06:58.150
of these particular
conversations.

00:06:58.150 --> 00:06:59.570
And you can see
an example up here

00:06:59.570 --> 00:07:02.660
on the slide of kind of what
this looks like with a sample

00:07:02.660 --> 00:07:05.810
that we built for a
recipe recommendation app.

00:07:05.810 --> 00:07:07.310
And essentially,
what you provide

00:07:07.310 --> 00:07:11.120
is you give the tool a list
of phrases or sentences

00:07:11.120 --> 00:07:13.490
that you expect the user to say.

00:07:13.490 --> 00:07:16.280
And you can see that
api.ai is automatically

00:07:16.280 --> 00:07:20.420
highlighting individual
entities out of those elements

00:07:20.420 --> 00:07:23.250
that are actually interesting
to your application.

00:07:23.250 --> 00:07:26.120
So for this case, it's
a recipe recommendation.

00:07:26.120 --> 00:07:28.490
So we're looking for
things like a protein,

00:07:28.490 --> 00:07:31.120
a temperature, a type of dish.

00:07:31.120 --> 00:07:34.100
And all of these things are
just recognized automatically

00:07:34.100 --> 00:07:35.810
by api.ai.

00:07:35.810 --> 00:07:37.910
Now, the other really
nice thing about this tool

00:07:37.910 --> 00:07:41.990
is that you don't have to pick
every single element that you

00:07:41.990 --> 00:07:43.800
think the user might say.

00:07:43.800 --> 00:07:46.380
Because of the machine learning
element to this system,

00:07:46.380 --> 00:07:49.220
you simply have to provide
a number of samples upfront,

00:07:49.220 --> 00:07:51.890
and then the system can
interpolate and interpret

00:07:51.890 --> 00:07:54.620
what a user might
say so that you only

00:07:54.620 --> 00:07:56.330
have to give it
some initial data,

00:07:56.330 --> 00:07:59.330
and then api.ai will be able
to always do the right thing,

00:07:59.330 --> 00:08:01.094
picking out all of the entities.

00:08:01.094 --> 00:08:02.510
And then your
back-end application

00:08:02.510 --> 00:08:05.600
simply has to respond
to that structured data.

00:08:05.600 --> 00:08:08.750
So you no longer have to try
and interpret out of a string

00:08:08.750 --> 00:08:11.960
the information that you need.

00:08:11.960 --> 00:08:14.310
We've also announced the
Google Assistant SDK,

00:08:14.310 --> 00:08:17.510
which enables you to embed
the Google Assistant directly

00:08:17.510 --> 00:08:19.910
into your own custom
hardware projects.

00:08:19.910 --> 00:08:22.580
We provide out-of-the-box
support for Linux and Android

00:08:22.580 --> 00:08:23.420
Things.

00:08:23.420 --> 00:08:26.780
But the API is based on gRPC,
so you could pretty much

00:08:26.780 --> 00:08:28.730
port it to anything.

00:08:28.730 --> 00:08:30.490
You can either use
a button trigger

00:08:30.490 --> 00:08:34.549
to trigger the Assistant, or
you can use a library that we

00:08:34.549 --> 00:08:36.350
have for hot wording support.

00:08:36.350 --> 00:08:39.559
You can trigger it just like
we do with consumer devices.

00:08:39.559 --> 00:08:43.429
All you have to do is provide
a microphone and a speaker,

00:08:43.429 --> 00:08:45.500
and then you can use
the Actions on Google

00:08:45.500 --> 00:08:48.350
to implement additional
functionality, such as Device

00:08:48.350 --> 00:08:48.850
Control.

00:08:51.430 --> 00:08:54.460
The Google Assistant also
supports home automation

00:08:54.460 --> 00:08:56.410
via the Smart Home system.

00:08:56.410 --> 00:08:59.230
Device makers can easily
integrate existing devices

00:08:59.230 --> 00:09:00.700
with our Home Graph.

00:09:00.700 --> 00:09:03.930
The Home Graph knows the
state of all connected devices

00:09:03.930 --> 00:09:06.940
so that when you ask it to dim
the lights just a little bit,

00:09:06.940 --> 00:09:09.970
it knows how to do that
in an intelligent way.

00:09:09.970 --> 00:09:13.000
The user makes queries
to the Google Assistant,

00:09:13.000 --> 00:09:16.810
and then Smart Home makes
calls to your cloud service

00:09:16.810 --> 00:09:18.520
to control those devices.

00:09:18.520 --> 00:09:20.200
As a device maker,
you don't have

00:09:20.200 --> 00:09:23.080
to worry about handling
all of that speech input,

00:09:23.080 --> 00:09:25.810
just dealing with simple,
structured requests with very

00:09:25.810 --> 00:09:27.370
specific values.

00:09:27.370 --> 00:09:30.070
The user speaks what
they want, and Smart Home

00:09:30.070 --> 00:09:33.820
coordinates across all of their
devices inside of the home,

00:09:33.820 --> 00:09:35.600
even across different
device makers.

00:09:38.360 --> 00:09:41.090
Firebase also has
an amazing suite

00:09:41.090 --> 00:09:44.430
of applications and services
that are useful for IoT.

00:09:44.430 --> 00:09:46.760
Real-time database,
for example, makes

00:09:46.760 --> 00:09:50.240
it easy to synchronize the
state of various devices

00:09:50.240 --> 00:09:52.970
across a mobile app
and between various IoT

00:09:52.970 --> 00:09:54.800
devices in your application.

00:09:54.800 --> 00:09:56.540
Authentication, as
another example,

00:09:56.540 --> 00:10:00.740
enables you to associate
devices with the user's account.

00:10:00.740 --> 00:10:03.290
And with Android Things,
all of these features

00:10:03.290 --> 00:10:05.810
are even easier to
integrate for IoT

00:10:05.810 --> 00:10:08.750
because you can use the
same existing Android

00:10:08.750 --> 00:10:11.570
client libraries and SDKs
right on those devices.

00:10:14.560 --> 00:10:17.020
We also announced
Cloud IoT Core back

00:10:17.020 --> 00:10:21.100
at Google I/O. This is a fully
managed service on the Google

00:10:21.100 --> 00:10:24.100
Cloud Platform that enables
you to securely connect

00:10:24.100 --> 00:10:27.970
millions of IoT devices
directly to Google Cloud.

00:10:27.970 --> 00:10:30.820
Whether you want to
connect million of devices

00:10:30.820 --> 00:10:32.440
and scale them
automatically, you

00:10:32.440 --> 00:10:35.770
have no need to worry about
provisioning infrastructure

00:10:35.770 --> 00:10:38.080
or adding individual
redundancies.

00:10:38.080 --> 00:10:41.800
It has native support for
standard protocols like MQTT,

00:10:41.800 --> 00:10:43.690
and you can access
all of your data

00:10:43.690 --> 00:10:46.600
globally dispersed
as one single system.

00:10:46.600 --> 00:10:49.720
It's very good for
enterprise use cases

00:10:49.720 --> 00:10:53.170
where you need to do mass
scale-types of provisioning.

00:10:53.170 --> 00:10:55.870
This is sort of converse
with the Firebase use

00:10:55.870 --> 00:10:59.440
case, which works very well for
individual user-type home use

00:10:59.440 --> 00:11:00.940
cases.

00:11:00.940 --> 00:11:03.920
You can use cloud services that
are part of the cloud platform,

00:11:03.920 --> 00:11:07.960
such as BigQuery, to analyze
your massive scale data

00:11:07.960 --> 00:11:11.530
and visualize that for internal
use or for your users as well.

00:11:15.300 --> 00:11:17.150
So that's sort of
a whirlwind tour

00:11:17.150 --> 00:11:18.800
of all the different
services that we

00:11:18.800 --> 00:11:22.370
have available for IoT
and the Google Assistant.

00:11:22.370 --> 00:11:24.950
I want you to be sure to
play with all of the demos

00:11:24.950 --> 00:11:28.460
that we have in the IoT sandbox
and the Assistant sandbox.

00:11:28.460 --> 00:11:31.850
And our team will be on hand
to answer questions as well.

00:11:31.850 --> 00:11:33.990
Immediately following
this session,

00:11:33.990 --> 00:11:36.410
I'm headed over to
the IoT Office Hours

00:11:36.410 --> 00:11:38.780
for anyone who has additional
questions about any

00:11:38.780 --> 00:11:41.720
of these platforms, and you
can connect with me directly.

00:11:41.720 --> 00:11:44.960
Later on today, we also
have hands-on training

00:11:44.960 --> 00:11:46.880
for Android Things,
where you can actually

00:11:46.880 --> 00:11:49.790
get your hands on some of these
devices, and play with them,

00:11:49.790 --> 00:11:51.007
and build an application.

00:11:51.007 --> 00:11:53.090
And we've got another one
for the Google Assistant

00:11:53.090 --> 00:11:54.710
and Actions on Google tomorrow.

00:11:54.710 --> 00:11:57.010
So be sure to check those out.

00:11:57.010 --> 00:11:58.640
Oh, and one more thing.

00:11:58.640 --> 00:12:01.220
We want to get you
started on the right path

00:12:01.220 --> 00:12:04.010
by building cool
devices for IoT.

00:12:04.010 --> 00:12:06.500
So everyone who has
attended this session today

00:12:06.500 --> 00:12:09.800
is going to go home with one
of our NXP PICO Developer Kits

00:12:09.800 --> 00:12:12.326
for Android Things.

00:12:12.326 --> 00:12:15.770
[CHEERING AND APPLAUSE]

00:12:18.230 --> 00:12:19.976
Make sure you grab
a card on your way

00:12:19.976 --> 00:12:22.100
out from one of the
attendants, and you can pick up

00:12:22.100 --> 00:12:25.009
your kit downstairs.

00:12:25.009 --> 00:12:27.050
So thanks so much for your
time, everyone, today.

00:12:27.050 --> 00:12:29.090
And I hope you enjoy the
rest of the conference.

00:12:29.090 --> 00:12:31.190
[APPLAUSE]

00:12:31.190 --> 00:12:34.240
[MUSIC PLAYING]

