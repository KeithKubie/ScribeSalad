WEBVTT
Kind: captions
Language: en

00:00:05.620 --> 00:00:06.600
TIM WILLIS: All right.

00:00:06.600 --> 00:00:08.160
Ready to rock.

00:00:08.160 --> 00:00:10.900
I don't have a stash of books,
let me just set up front.

00:00:10.900 --> 00:00:15.560
So I'm going to have to
win your attention somehow.

00:00:15.560 --> 00:00:17.500
Allow me to start
with a scenario.

00:00:17.500 --> 00:00:20.190
So imagine that you, and
two of your colleagues,

00:00:20.190 --> 00:00:22.560
maybe two people that you
meet here tonight, you

00:00:22.560 --> 00:00:25.020
want to get together, and
you want to form new startup.

00:00:25.020 --> 00:00:28.740
So in my case, I actually
chose John and Eduardo,

00:00:28.740 --> 00:00:32.450
because they're kind of
good at what they do.

00:00:32.450 --> 00:00:35.350
So, you trying to
think, what's on trend?

00:00:35.350 --> 00:00:38.250
I want the hottest and
best thing on the internet

00:00:38.250 --> 00:00:39.140
of things.

00:00:39.140 --> 00:00:41.142
And I'm going to get
so much funding for it,

00:00:41.142 --> 00:00:42.350
and it's going to be amazing.

00:00:42.350 --> 00:00:45.060
So as good developers,
the first thing you do

00:00:45.060 --> 00:00:46.780
is, you step into dev mode.

00:00:46.780 --> 00:00:48.280
So you're sitting
there, you're just

00:00:48.280 --> 00:00:50.100
trying to code
something out, you're

00:00:50.100 --> 00:00:53.050
trying to get some form of
prototype up and running.

00:00:53.050 --> 00:00:56.190
And after some extensive
user testing, which basically

00:00:56.190 --> 00:00:59.250
involves asking your friends
about what you think is cool,

00:00:59.250 --> 00:01:07.490
maybe some Twitter magic,
you decide on OMGAmazeballs

00:01:07.490 --> 00:01:11.730
A beautifully simple
HTML5 front end experience

00:01:11.730 --> 00:01:16.170
designed to make social
media more social.

00:01:16.170 --> 00:01:17.440
I mean, wow, right?

00:01:17.440 --> 00:01:20.620
I have no idea what any of
that means, but apparently

00:01:20.620 --> 00:01:23.940
this idea was so crazy,
or as the kids would say,

00:01:23.940 --> 00:01:27.640
totes amazeballs, a venture
capital firm immediately

00:01:27.640 --> 00:01:33.460
provides you with $60 million
of pre-product, pre-revenue

00:01:33.460 --> 00:01:37.230
funding, for 50%
ownership of your company,

00:01:37.230 --> 00:01:39.900
providing that you can get
10,000 users in the first three

00:01:39.900 --> 00:01:41.010
months.

00:01:41.010 --> 00:01:43.417
And then 500,000 users
in the next six months.

00:01:43.417 --> 00:01:44.500
Because that sounds right.

00:01:44.500 --> 00:01:46.570
That sounds like
it's possible, right?

00:01:46.570 --> 00:01:47.830
Totally legit.

00:01:47.830 --> 00:01:52.740
So needless to say, this is
the reaction you would expect.

00:01:52.740 --> 00:01:53.340
Yes.

00:01:53.340 --> 00:01:54.320
I'm super excited.

00:01:54.320 --> 00:01:56.150
You and your team
are super excited.

00:01:56.150 --> 00:01:58.230
So you sit there,
squirreling away.

00:01:58.230 --> 00:02:00.430
You do some viral
marketing, maybe set

00:02:00.430 --> 00:02:04.260
up some fake accounts,
try to get some attention.

00:02:04.260 --> 00:02:08.150
And before you know it,
you hit 10,000 users.

00:02:08.150 --> 00:02:11.710
Which, as we all know,
means make it rain.

00:02:11.710 --> 00:02:13.489
We get our first set of funding.

00:02:13.489 --> 00:02:14.530
It's going to be amazing.

00:02:14.530 --> 00:02:16.300
Our first pay day.

00:02:16.300 --> 00:02:17.790
Although, that
being said, I think

00:02:17.790 --> 00:02:19.802
there's probably
an argument to be

00:02:19.802 --> 00:02:21.510
had with the profit
sharing arrangements.

00:02:21.510 --> 00:02:25.800
I think I have about
$4, Eduardo probably

00:02:25.800 --> 00:02:29.480
has just north of 10, and John
at the front, well, come on.

00:02:29.480 --> 00:02:32.000
I think it speaks for itself.

00:02:32.000 --> 00:02:34.780
So just as you're closing in
on 25,000 users, of course,

00:02:34.780 --> 00:02:36.880
because that's just
easy to do, you

00:02:36.880 --> 00:02:39.420
notice your user count
gets a bit flappy.

00:02:39.420 --> 00:02:41.825
It starts going up,
it starts going down.

00:02:41.825 --> 00:02:44.225
You could start to get
traffic spike, and then drop.

00:02:44.225 --> 00:02:45.600
But your servers
are running hot.

00:02:45.600 --> 00:02:46.680
You don't understand
what's going on.

00:02:46.680 --> 00:02:48.846
There's a lot of traffic
going through your servers,

00:02:48.846 --> 00:02:50.840
but your user count
isn't increasing.

00:02:50.840 --> 00:02:52.420
So before you can
look any further,

00:02:52.420 --> 00:02:55.890
or before you try to dig
into it, unfortunately,

00:02:55.890 --> 00:02:59.760
because you're the new
hotness, this happens.

00:02:59.760 --> 00:03:01.500
Someone forwards
you this article.

00:03:01.500 --> 00:03:04.280
Newly Discovered
Weaknesses in OMGAmazeballs

00:03:04.280 --> 00:03:06.886
reveals user info,
causes mass sadness.

00:03:10.040 --> 00:03:15.110
So, it turns out that some
nefarious security researcher

00:03:15.110 --> 00:03:18.380
found and exploited a cross
site scripting vulnerability

00:03:18.380 --> 00:03:21.040
in OMGAmazeballs.

00:03:21.040 --> 00:03:24.180
So this was a stored XSS,
as Parisa mentioned earlier,

00:03:24.180 --> 00:03:26.470
or cross site scripting,
I'll refer to it as XSS

00:03:26.470 --> 00:03:28.140
throughout the
talk, which allowed

00:03:28.140 --> 00:03:31.610
them to insert arbitrary Java
Scripts into all pages that

00:03:31.610 --> 00:03:33.380
were shown to the user.

00:03:33.380 --> 00:03:35.070
So this JavaScript
could send copies

00:03:35.070 --> 00:03:37.860
of all updates made to
OMGAmazeballs, including

00:03:37.860 --> 00:03:42.570
your user data, in app user
names, passwords, anything

00:03:42.570 --> 00:03:44.570
that the user could
do, this JavaScript

00:03:44.570 --> 00:03:47.436
could perform on
behalf of the user.

00:03:47.436 --> 00:03:49.900
[SIGHS]

00:03:49.900 --> 00:03:52.450
Naturally, sadness sets in.

00:03:52.450 --> 00:03:55.320
You get to work trying to
figure out how this happened.

00:03:55.320 --> 00:03:58.100
I mean, the money is gone,
but as professionals you're

00:03:58.100 --> 00:04:00.270
interested in wondering,
how did this happen?

00:04:00.270 --> 00:04:02.187
And what can I do,
next time, differently,

00:04:02.187 --> 00:04:04.270
to make sure that I'm not
vulnerable to this class

00:04:04.270 --> 00:04:06.050
of bug?

00:04:06.050 --> 00:04:06.980
Revenge?

00:04:06.980 --> 00:04:08.270
Maybe.

00:04:08.270 --> 00:04:10.880
But unfortunately, you look
around the site to no avail.

00:04:10.880 --> 00:04:12.370
So you don't know
what's happened.

00:04:12.370 --> 00:04:15.679
You don't know how the
person's exploited the bug.

00:04:15.679 --> 00:04:17.720
So you're looking around,
you're looking in logs.

00:04:17.720 --> 00:04:19.730
It doesn't really make sense.

00:04:19.730 --> 00:04:22.050
Then you go to one of the
pages of your top users.

00:04:22.050 --> 00:04:24.430
You go, OK, who's
had the most traffic?

00:04:24.430 --> 00:04:27.350
And then you see this.

00:04:27.350 --> 00:04:31.840
Real name, oh man, really?

00:04:31.840 --> 00:04:36.300
So again, you were confident
that you were sanitizing data

00:04:36.300 --> 00:04:38.610
on input, and escaping
that data on output.

00:04:38.610 --> 00:04:41.970
But somehow, someone's injected
control tags into the page,

00:04:41.970 --> 00:04:44.280
and just as Parisa
highlighted earlier,

00:04:44.280 --> 00:04:46.230
they're able to load a script.

00:04:46.230 --> 00:04:49.094
But in this case, they're
not popping in alert box.

00:04:49.094 --> 00:04:50.510
It looks they're
loading something

00:04:50.510 --> 00:04:52.040
from the user profile directory.

00:04:52.040 --> 00:04:52.915
So /photos/legit.jpg.

00:04:55.580 --> 00:04:57.240
You go and look at legit.jpg.

00:04:57.240 --> 00:04:59.100
It doesn't open.

00:04:59.100 --> 00:05:00.320
That's interesting.

00:05:00.320 --> 00:05:05.370
You download it to your Linux
box, and you run file on it,

00:05:05.370 --> 00:05:07.560
and you notice, oh, this
says it's of type text.

00:05:07.560 --> 00:05:08.870
That's really strange.

00:05:08.870 --> 00:05:10.072
And you have a closer look.

00:05:10.072 --> 00:05:11.780
You open it up in a
text editor, and it's

00:05:11.780 --> 00:05:14.860
full of nasty JavaScript.

00:05:14.860 --> 00:05:17.350
So, we're owned.

00:05:17.350 --> 00:05:18.265
It's done.

00:05:18.265 --> 00:05:19.640
So this little
piece of code that

00:05:19.640 --> 00:05:21.973
runs from the script directory,
every time this page was

00:05:21.973 --> 00:05:25.670
loaded, basically could do
anything on behalf of the user,

00:05:25.670 --> 00:05:28.370
and was forwarding
that information.

00:05:28.370 --> 00:05:31.290
Needless to say, none of
you want to end up here,

00:05:31.290 --> 00:05:32.650
but I'm sure you've been here.

00:05:35.470 --> 00:05:37.600
So believe it or not,
cross site scripting

00:05:37.600 --> 00:05:39.780
is the most common
bug on the internet--

00:05:39.780 --> 00:05:42.024
the most common security
bug on the internet.

00:05:42.024 --> 00:05:43.440
So I'm here to
talk to you tonight

00:05:43.440 --> 00:05:45.189
about some of the most
common bugs that we

00:05:45.189 --> 00:05:49.500
see reported by external
security researchers

00:05:49.500 --> 00:05:52.050
under the Google
Vulnerability Reward Program

00:05:52.050 --> 00:05:54.330
and to test out some of
your elite hacker skills

00:05:54.330 --> 00:05:55.875
with some examples later on.

00:05:55.875 --> 00:05:58.860
Now I lied and I said
I didn't have books.

00:05:58.860 --> 00:06:00.955
I've got Chromecasts,
so brace yourself.

00:06:03.646 --> 00:06:06.020
Before we can get there, we
need to have an understanding

00:06:06.020 --> 00:06:07.920
of how these types of bugs work.

00:06:07.920 --> 00:06:09.940
So how does it work at Google?

00:06:09.940 --> 00:06:12.840
So this slide basically
covers the range of payments

00:06:12.840 --> 00:06:15.550
that we make for a
single bug of that type

00:06:15.550 --> 00:06:17.490
to security researchers.

00:06:17.490 --> 00:06:20.320
So in a non-integrated
acquisition,

00:06:20.320 --> 00:06:23.940
that's basically a company
that Google has purchased,

00:06:23.940 --> 00:06:26.650
but Google hasn't move their
product onto Google systems

00:06:26.650 --> 00:06:29.350
yet, so it's some software
stack that we've purchased

00:06:29.350 --> 00:06:32.290
and come along for the ride,
that'll score you $100.

00:06:32.290 --> 00:06:35.820
But all the way up to
an accounts.google.com,

00:06:35.820 --> 00:06:39.570
typical XSS, will
score you $7,500.

00:06:39.570 --> 00:06:42.750
And if you can get remote code
execution, anywhere on Google,

00:06:42.750 --> 00:06:46.260
you're looking at about
a 20 grand pay day.

00:06:46.260 --> 00:06:50.187
Note that over the period,
and you might be wondering,

00:06:50.187 --> 00:06:51.770
yeah, well how often
does this happen?

00:06:51.770 --> 00:06:53.690
I mean, really how
much do you pay out?

00:06:53.690 --> 00:06:55.420
We have paid out
over 1.6 million

00:06:55.420 --> 00:06:58.970
in cash, for the
web program alone.

00:06:58.970 --> 00:07:01.870
Other programs at Google,
including the Chromium rewards

00:07:01.870 --> 00:07:05.670
program, which rewards
bugs found in Chrome,

00:07:05.670 --> 00:07:09.350
and also the patch rewards
program, which provides money

00:07:09.350 --> 00:07:12.650
to people who submit patches
to popular open source

00:07:12.650 --> 00:07:15.000
projects, that
patch security bugs,

00:07:15.000 --> 00:07:16.900
we paid out over
$3 million to date.

00:07:20.160 --> 00:07:22.230
As you can see, it's
a bit of hard work.

00:07:22.230 --> 00:07:25.010
We've received over
20,000 reports,

00:07:25.010 --> 00:07:31.050
and we've only found about 3,500
bugs based on those reports.

00:07:31.050 --> 00:07:34.360
So how does it really look?

00:07:34.360 --> 00:07:36.690
These are the days the
numbers for externally

00:07:36.690 --> 00:07:39.990
reported bugs, in
2013, to Google.

00:07:39.990 --> 00:07:46.830
As you can see, XSS, and XSRF
or CSRF, dominate the field.

00:07:46.830 --> 00:07:50.040
So these are the bugs I'd
like to focus on tonight.

00:07:50.040 --> 00:07:53.910
We do have other categories,
so mixed content, for instance,

00:07:53.910 --> 00:07:58.250
is when you might have a page
loading of TLS, or HTTPS,

00:07:58.250 --> 00:08:00.550
but you include
something over HTTP.

00:08:00.550 --> 00:08:03.250
So you might be sourcing a
script over HTTP that actually

00:08:03.250 --> 00:08:05.010
violates the
integrity of the page.

00:08:05.010 --> 00:08:07.760
And in Chrome, sometimes you
might have seen the padlock

00:08:07.760 --> 00:08:10.240
with the little yellow triangle
on it, that will warn you

00:08:10.240 --> 00:08:12.800
that there's mixed content
running on the page.

00:08:12.800 --> 00:08:14.920
The other category
includes other bugs

00:08:14.920 --> 00:08:18.440
that Parisa was talking about
like SQL injection, remote code

00:08:18.440 --> 00:08:21.384
execution, Auth bypass,
all of those kind of lumped

00:08:21.384 --> 00:08:23.550
into one category, because
when they're on the slide

00:08:23.550 --> 00:08:26.390
you can't really see them.

00:08:26.390 --> 00:08:29.050
There's also another
category which isn't shown,

00:08:29.050 --> 00:08:30.410
just for transparency.

00:08:30.410 --> 00:08:32.659
That includes types of
bugs which don't neatly

00:08:32.659 --> 00:08:34.530
fall into one specific category.

00:08:34.530 --> 00:08:37.120
Like it might be a hybrid
type of attack, which uses

00:08:37.120 --> 00:08:39.470
several different types of bugs.

00:08:39.470 --> 00:08:42.346
And finally, on the
side here, info leak.

00:08:42.346 --> 00:08:43.929
I kind of grayed
that out, but I think

00:08:43.929 --> 00:08:45.900
it's important to give
that some context.

00:08:45.900 --> 00:08:48.200
So at Google, we're
very conservative when

00:08:48.200 --> 00:08:50.430
we file these types of bugs.

00:08:50.430 --> 00:08:54.140
So an example of a but
we might file might say,

00:08:54.140 --> 00:08:56.880
you can tell that
a web server is

00:08:56.880 --> 00:08:58.900
running the latest
version of Apache.

00:08:58.900 --> 00:09:02.750
You can tell that this web
server is running Apache

00:09:02.750 --> 00:09:05.749
v2.4.9.

00:09:05.749 --> 00:09:08.040
In and of itself, that might
be interesting information

00:09:08.040 --> 00:09:10.200
for the developer, but if
it's the latest version,

00:09:10.200 --> 00:09:12.840
there are no publicly
known exploits,

00:09:12.840 --> 00:09:15.039
there's an argument
as to whether we

00:09:15.039 --> 00:09:16.580
should be filing
those types of bugs.

00:09:16.580 --> 00:09:19.100
So that kind of explains why
that numbers is so high, not

00:09:19.100 --> 00:09:22.630
that we're leaking
all over the place.

00:09:22.630 --> 00:09:26.620
So Parisa spoke about cross
site scripting, or XSS.

00:09:26.620 --> 00:09:30.650
So what's this less
popular sibling XSRF,

00:09:30.650 --> 00:09:31.990
and how does it work?

00:09:31.990 --> 00:09:35.450
Well that stands for cross
site request forgery,

00:09:35.450 --> 00:09:38.270
sometimes referred to as CSRF.

00:09:38.270 --> 00:09:42.430
Eduardo, who's speaking next is
a information security purest,

00:09:42.430 --> 00:09:46.544
and he finds it very offensive
that I use x in XSRF.

00:09:46.544 --> 00:09:47.960
So I need to point
that out to you

00:09:47.960 --> 00:09:49.460
so you don't mention
it in his talk.

00:09:49.460 --> 00:09:50.830
He will get very upset.

00:09:50.830 --> 00:09:53.290
C is for CSRF, X is for XSS.

00:09:53.290 --> 00:09:57.200
So please, take
that home with you.

00:09:57.200 --> 00:09:58.340
What does it do?

00:09:58.340 --> 00:10:01.510
It's a class of attacks against
applications in which state

00:10:01.510 --> 00:10:04.680
changing requests are
predictable to attackers.

00:10:04.680 --> 00:10:06.132
What does that actually mean?

00:10:06.132 --> 00:10:07.590
It means that it
allows an attacker

00:10:07.590 --> 00:10:11.480
to silently perform an
action on behalf of the user,

00:10:11.480 --> 00:10:14.040
without their knowledge,
by piggybacking

00:10:14.040 --> 00:10:16.380
on top of a session
that they already have.

00:10:16.380 --> 00:10:19.250
So it basically
attacks and targets

00:10:19.250 --> 00:10:21.600
users in authenticated
applications.

00:10:21.600 --> 00:10:25.130
So for Google, that's
a problem for us,

00:10:25.130 --> 00:10:28.410
because our users are mostly
signed in all the time.

00:10:28.410 --> 00:10:31.970
So if we're signed
in all of the time,

00:10:31.970 --> 00:10:34.780
and we expect our users to
be signed in all the time,

00:10:34.780 --> 00:10:37.550
then this type of attack
is very important to us,

00:10:37.550 --> 00:10:41.350
to make sure that we
can mitigate against it.

00:10:41.350 --> 00:10:42.425
So how does it work?

00:10:42.425 --> 00:10:45.180
At a very high
level, let's say you

00:10:45.180 --> 00:10:49.500
were using some blog platform,
of course Chromiun, or Chrome,

00:10:49.500 --> 00:10:50.680
I should say.

00:10:50.680 --> 00:10:53.610
And you send a request
to delete my blog.

00:10:53.610 --> 00:10:55.946
I'm logged in, please
delete my blog.

00:10:55.946 --> 00:10:59.000
The response, jolly
good, we'll delete it.

00:10:59.000 --> 00:10:59.500
Winning.

00:10:59.500 --> 00:11:03.202
We must be on google.co.uk
for this one to work.

00:11:03.202 --> 00:11:05.160
So what's actually
happening in the background?

00:11:05.160 --> 00:11:07.700
Well your browser
sends the request.

00:11:07.700 --> 00:11:11.150
It has the blog ID in
it, it has the site,

00:11:11.150 --> 00:11:14.220
and it's also sending you
cookies across with it as well.

00:11:14.220 --> 00:11:17.360
So what the browser is doing is,
every time you make a request

00:11:17.360 --> 00:11:19.410
to that site, if
you have cookies,

00:11:19.410 --> 00:11:22.220
it will hopefully provide
the cookies along with along

00:11:22.220 --> 00:11:23.480
with the request.

00:11:23.480 --> 00:11:28.490
So here, we ask to delete
it, and our response is OK.

00:11:28.490 --> 00:11:31.510
So what happens when someone
evil tries to do this.

00:11:31.510 --> 00:11:35.290
So they're like, yeah,
can you delete my blog?

00:11:35.290 --> 00:11:36.740
Totally my blog.

00:11:36.740 --> 00:11:37.790
Seriously, it's my blog.

00:11:37.790 --> 00:11:41.040
The response you'll get is,
not you, no cookies, no dice.

00:11:41.040 --> 00:11:44.120
Or simply, 403 forbidden.

00:11:44.120 --> 00:11:46.290
The reason this
happens is because you

00:11:46.290 --> 00:11:47.904
don't have those cookies.

00:11:47.904 --> 00:11:49.445
So if I'm an attacker,
and I'm trying

00:11:49.445 --> 00:11:51.930
to impersonate your account,
I don't have your cookies.

00:11:51.930 --> 00:11:54.300
So the browser does not
send the cookie along,

00:11:54.300 --> 00:11:58.480
and therefore I get the response
that no, that doesn't work.

00:11:58.480 --> 00:12:00.770
So taking that
into consideration,

00:12:00.770 --> 00:12:02.974
how do we actually do an XSRF?

00:12:02.974 --> 00:12:04.640
How does it actually
work, and how do we

00:12:04.640 --> 00:12:08.020
attack logged in users to
perform a function that

00:12:08.020 --> 00:12:10.800
silently happens
in the background?

00:12:10.800 --> 00:12:14.560
Well, first thing we need
to do is set up the XSRF.

00:12:14.560 --> 00:12:17.860
I'll show you a code snippet
later of an example of one,

00:12:17.860 --> 00:12:20.400
but in this case,
you can either set up

00:12:20.400 --> 00:12:22.280
your own kind of
dodgy site, and try

00:12:22.280 --> 00:12:24.940
to get people to come to it,
which is a bit more difficult.

00:12:24.940 --> 00:12:27.280
But what you could do
is, find a site that

00:12:27.280 --> 00:12:29.830
allows you to
inject HTML into it.

00:12:29.830 --> 00:12:32.821
Or find a site, which, if you
use some of the tricks Parisa

00:12:32.821 --> 00:12:34.570
was referring to
earlier, you can actually

00:12:34.570 --> 00:12:37.590
get it to accept
HTML that renders

00:12:37.590 --> 00:12:40.380
in the page as the
context of that page.

00:12:40.380 --> 00:12:43.260
Now, they are well known
cases of people doing this,

00:12:43.260 --> 00:12:45.870
especially on forum sites,
or in comment fields.

00:12:45.870 --> 00:12:49.000
So imagine if you could
inject this type of HTML

00:12:49.000 --> 00:12:51.560
into the comment
field of a new site,

00:12:51.560 --> 00:12:55.330
and then everyone who visited
that new site or saw that page,

00:12:55.330 --> 00:12:58.400
is possibly is possibly
vulnerable to attack.

00:12:58.400 --> 00:12:59.710
So let's say you set this up.

00:12:59.710 --> 00:13:02.240
You set up the payload,
and you let it run.

00:13:02.240 --> 00:13:04.720
Let's use the example
of the new site.

00:13:04.720 --> 00:13:08.000
So then what happens is the
person requests the site.

00:13:08.000 --> 00:13:09.420
I type it in, I hit enter.

00:13:09.420 --> 00:13:11.410
You get the request
for the site,

00:13:11.410 --> 00:13:14.020
and you get the HTML
returned to you.

00:13:14.020 --> 00:13:16.340
In this particular set, you
have seen images to load.

00:13:16.340 --> 00:13:18.631
So there are some image tags
all the way down the page,

00:13:18.631 --> 00:13:19.760
and it loads it.

00:13:19.760 --> 00:13:23.190
But one of those image
tags is a little bit dodgy.

00:13:23.190 --> 00:13:26.780
One of those image tags actually
says, oh, hey server over here

00:13:26.780 --> 00:13:29.270
that's logged in, can you
load this image for me?

00:13:29.270 --> 00:13:31.250
I really need it for this page.

00:13:31.250 --> 00:13:34.110
And what's actually
in that request is,

00:13:34.110 --> 00:13:39.880
I'm asking that logged in server
up here to delete the blog.

00:13:39.880 --> 00:13:43.880
And the request I get
back is, OK, blog deleted.

00:13:43.880 --> 00:13:46.740
So this works because
I've enticed someone

00:13:46.740 --> 00:13:48.680
to visit this site.

00:13:48.680 --> 00:13:52.660
When the image loads, it's
actually not an image at all,

00:13:52.660 --> 00:13:54.505
and it's sending a
request to a server

00:13:54.505 --> 00:13:56.700
that I'm already
authenticated to.

00:13:56.700 --> 00:14:00.130
And my browser, being the good
piece of technology that it is,

00:14:00.130 --> 00:14:02.930
will send my cookies
along with that request,

00:14:02.930 --> 00:14:05.680
automatically, because
I'm already logged in.

00:14:05.680 --> 00:14:08.760
So what I'm actually doing
is getting this person

00:14:08.760 --> 00:14:11.064
to initiate a
request on my behalf,

00:14:11.064 --> 00:14:12.230
silently, in the background.

00:14:15.070 --> 00:14:16.930
Now that might sound
a little hard core,

00:14:16.930 --> 00:14:19.430
but that's all it is.

00:14:19.430 --> 00:14:21.800
So here's my cool site.

00:14:21.800 --> 00:14:25.520
If you weren't sure, the
h1 tag says cool site.

00:14:25.520 --> 00:14:28.540
I have an amazing gif, or "jif."

00:14:28.540 --> 00:14:31.890
We can have that
argument over a drink.

00:14:31.890 --> 00:14:36.120
And then here, oh, I want
to load another image.

00:14:36.120 --> 00:14:40.100
It's just at here/deleteblog.

00:14:40.100 --> 00:14:41.250
And here's my blog ID.

00:14:41.250 --> 00:14:43.530
And my style tag
says display none.

00:14:43.530 --> 00:14:45.530
So it's not going to
mess up the formatting.

00:14:45.530 --> 00:14:47.540
It's not going to give
me a broken image link.

00:14:47.540 --> 00:14:50.960
It's going to happen completely
seamlessly in the background.

00:14:50.960 --> 00:14:54.066
And my browser, being the good
piece of technology that it is,

00:14:54.066 --> 00:14:55.620
is going to load this.

00:14:55.620 --> 00:14:56.350
Load this.

00:14:56.350 --> 00:14:58.800
This will happen secretly
in the background,

00:14:58.800 --> 00:15:01.570
and then we get
thanks for visiting.

00:15:01.570 --> 00:15:03.635
So that is how an XSRF works.

00:15:06.260 --> 00:15:07.960
So you might be
thinking, how do I

00:15:07.960 --> 00:15:10.429
defend against this
type of attack?

00:15:10.429 --> 00:15:11.970
How can you stop
this from happening,

00:15:11.970 --> 00:15:13.761
if the browser's going
to send the cookies?

00:15:13.761 --> 00:15:15.230
Do I have any chance?

00:15:15.230 --> 00:15:18.210
How is the server
going to know that it's

00:15:18.210 --> 00:15:21.280
me sending it, like I'm
interacting with the page,

00:15:21.280 --> 00:15:24.720
versus someone taking advantage
of this piece of technology

00:15:24.720 --> 00:15:27.520
in order to exploit it?

00:15:27.520 --> 00:15:29.970
Well the solution is,
use what's called tokens,

00:15:29.970 --> 00:15:31.780
or an XSRF token.

00:15:31.780 --> 00:15:36.110
Now a token is just a secret,
unguessable, random string,

00:15:36.110 --> 00:15:38.930
which is generated
by the server,

00:15:38.930 --> 00:15:40.670
and provided to the client.

00:15:40.670 --> 00:15:43.240
So you would use this on a
state changing submission,

00:15:43.240 --> 00:15:45.000
or something that's
very sensitive.

00:15:45.000 --> 00:15:47.380
So if you were asking someone
to perform a transaction,

00:15:47.380 --> 00:15:50.370
or do a post on a blog,
or you were asking someone

00:15:50.370 --> 00:15:53.450
to change their password for
instance, what you can do

00:15:53.450 --> 00:15:54.600
is get a user token.

00:15:54.600 --> 00:15:56.280
The server will
generate the token,

00:15:56.280 --> 00:15:59.100
provide it to the client, and
go, here's this random string.

00:15:59.100 --> 00:16:01.020
And when you want to
go ahead with this,

00:16:01.020 --> 00:16:03.620
you reply with a request, and
you also send the token along

00:16:03.620 --> 00:16:05.290
with it.

00:16:05.290 --> 00:16:08.550
So that way the server
knows, yes, I received it

00:16:08.550 --> 00:16:11.080
and I'm sending it back.

00:16:11.080 --> 00:16:13.980
So you might be like, well,
that might be hard to implement.

00:16:13.980 --> 00:16:14.690
How do I do that?

00:16:14.690 --> 00:16:17.560
Well, it's highly likely your
favorite framework already

00:16:17.560 --> 00:16:18.680
has them.

00:16:18.680 --> 00:16:20.020
Highly likely.

00:16:20.020 --> 00:16:22.690
And you should listen
to Eduardo if you're

00:16:22.690 --> 00:16:24.390
unfamiliar with
this, speaking next.

00:16:24.390 --> 00:16:26.384
He'll talk a lot
about frameworks.

00:16:26.384 --> 00:16:27.800
For those of you
who are familiar,

00:16:27.800 --> 00:16:30.050
and I expect there are some
of you in the audience who

00:16:30.050 --> 00:16:32.870
are very familiar
with CSRF type bugs,

00:16:32.870 --> 00:16:35.680
please remember to test
your fail conditions.

00:16:35.680 --> 00:16:37.900
So it's very easy to set
it up, and have it running,

00:16:37.900 --> 00:16:40.110
and you have it running,
and you've checked it,

00:16:40.110 --> 00:16:42.070
and it's brilliant.

00:16:42.070 --> 00:16:44.750
And then you make some seemingly
unrelated changes somewhere

00:16:44.750 --> 00:16:48.010
else along the website,
and suddenly the token

00:16:48.010 --> 00:16:49.690
is not being verified anymore.

00:16:49.690 --> 00:16:53.620
Or you could replay older
tokens from a long time ago.

00:16:53.620 --> 00:16:56.020
So it's very important
that if you are using this,

00:16:56.020 --> 00:16:58.990
you test your fail conditions.

00:16:58.990 --> 00:17:00.060
All right.

00:17:00.060 --> 00:17:04.270
So now that we've
covered XSS, and XSRF,

00:17:04.270 --> 00:17:06.859
it's time to see your
amazing computer hacking

00:17:06.859 --> 00:17:10.210
skills in a couple
games of spot the bug.

00:17:10.210 --> 00:17:13.579
So I'm going to give
you two examples.

00:17:13.579 --> 00:17:16.430
These are real bugs that were
reported under the Google

00:17:16.430 --> 00:17:20.060
vulnerability reward program,
which received cash payouts.

00:17:20.060 --> 00:17:23.810
The first one, I would hope most
people can spot it, and again,

00:17:23.810 --> 00:17:26.250
if you really want
a Chrome Cast,

00:17:26.250 --> 00:17:28.660
then you probably have to
be very quick on this one.

00:17:28.660 --> 00:17:30.870
The second one is not
so easy, and I just

00:17:30.870 --> 00:17:33.990
want to highlight the
complexity of some of the bugs

00:17:33.990 --> 00:17:35.290
that we see.

00:17:35.290 --> 00:17:39.630
So, who can see a
bug in this code?

00:17:44.400 --> 00:17:45.860
Set isfree true.

00:17:45.860 --> 00:17:48.630
Surely, that's
not going to work.

00:17:48.630 --> 00:17:50.270
It works.

00:17:50.270 --> 00:17:55.170
This is a bug from 2012, where
what actually happened was,

00:17:55.170 --> 00:17:59.170
this was part of some
testing and this was always

00:17:59.170 --> 00:18:00.770
validated on the server side.

00:18:00.770 --> 00:18:03.320
But we made a seemingly
unrelated change,

00:18:03.320 --> 00:18:06.520
and what actually happened was,
any changes on the client side

00:18:06.520 --> 00:18:08.500
weren't picked up
on the server side.

00:18:08.500 --> 00:18:11.240
And the server actually
just agreed with it,

00:18:11.240 --> 00:18:13.760
and said, yeah, well,
data isfree equals true.

00:18:16.830 --> 00:18:19.260
So this is an example of just
a security configuration.

00:18:19.260 --> 00:18:21.950
This is an example of not
necessarily a specific type

00:18:21.950 --> 00:18:24.080
of class of bug,
it's just making sure

00:18:24.080 --> 00:18:26.929
that you test and
understand your code.

00:18:26.929 --> 00:18:28.720
I'm actually not sure,
I think there's also

00:18:28.720 --> 00:18:30.920
another bug that the person
got a free Rihanna song,

00:18:30.920 --> 00:18:32.715
but that's a whole
nother conversation.

00:18:40.480 --> 00:18:43.385
So in this particular
attack, the data isfree tag,

00:18:43.385 --> 00:18:45.210
if it was set to
true on the client,

00:18:45.210 --> 00:18:46.784
it should be ignored
on the server.

00:18:46.784 --> 00:18:48.200
The server should
be setting that.

00:18:48.200 --> 00:18:50.760
So in this particular attack,
what actually happened was

00:18:50.760 --> 00:18:55.102
the server wasn't validating,
and allowed that to progress.

00:18:55.102 --> 00:18:57.095
AUDIENCE: [INAUDIBLE]?

00:18:57.095 --> 00:18:57.720
TIM WILLIS: No.

00:18:57.720 --> 00:19:01.104
Just this particular attribute
was not being checked.

00:19:01.104 --> 00:19:03.020
So you couldn't change
any of the other things

00:19:03.020 --> 00:19:04.520
without the server
picking up on it.

00:19:04.520 --> 00:19:06.400
It was just this
particular attribute.

00:19:06.400 --> 00:19:07.270
All right.

00:19:07.270 --> 00:19:09.420
Now this is the
more hardcore one.

00:19:09.420 --> 00:19:15.630
So to start off, how would
you escape this piece of code?

00:19:15.630 --> 00:19:20.000
What do you need to be
careful about especially

00:19:20.000 --> 00:19:22.559
around to user string?

00:19:22.559 --> 00:19:23.505
AUDIENCE: [INAUDIBLE].

00:19:26.504 --> 00:19:27.170
TIM WILLIS: Yes.

00:19:27.170 --> 00:19:32.450
So you need to make sure that
these bad boys are encoded.

00:19:32.450 --> 00:19:35.240
So the problem is that
if I need to encode it,

00:19:35.240 --> 00:19:36.160
I need to escape it.

00:19:36.160 --> 00:19:37.993
Because otherwise
somebody could potentially

00:19:37.993 --> 00:19:40.500
put in another single
quote, and then they

00:19:40.500 --> 00:19:43.780
could put in whatever
they want and run to town.

00:19:43.780 --> 00:19:47.010
So is this all we need to do?

00:19:47.010 --> 00:19:49.680
Should be OK?

00:19:49.680 --> 00:19:52.914
If someone can give me a hint
why, you get one of these.

00:19:52.914 --> 00:19:55.315
AUDIENCE: [INAUDIBLE]

00:19:55.315 --> 00:19:55.940
TIM WILLIS: OK.

00:19:55.940 --> 00:19:57.490
So you need to HTML
escape as well.

00:19:57.490 --> 00:19:59.622
Why do you need to HTML escape?

00:19:59.622 --> 00:20:00.732
Why?

00:20:00.732 --> 00:20:02.830
It doesn't make any sense.

00:20:02.830 --> 00:20:05.020
You got a book and a Chromecast.

00:20:05.020 --> 00:20:06.990
Good night for you.

00:20:06.990 --> 00:20:08.370
Awesome.

00:20:08.370 --> 00:20:10.250
So, it kind of depends.

00:20:10.250 --> 00:20:12.590
So this is where the complexity
of these security bugs

00:20:12.590 --> 00:20:13.810
comes into play.

00:20:13.810 --> 00:20:15.860
So fun fact on browser decoding.

00:20:15.860 --> 00:20:18.310
This is the order that
it actually happens in.

00:20:18.310 --> 00:20:20.320
So HTML decoding first.

00:20:20.320 --> 00:20:21.290
URL decoding.

00:20:21.290 --> 00:20:25.635
So you know, in the
URL gets converted back

00:20:25.635 --> 00:20:26.910
to the space character.

00:20:26.910 --> 00:20:28.580
And then at the end you get
the JavaScript decoding,

00:20:28.580 --> 00:20:29.913
which is what we showed earlier.

00:20:29.913 --> 00:20:33.530
Like the /x27 for the single
quote gets converted back.

00:20:33.530 --> 00:20:39.630
So how do we actually get here?

00:20:39.630 --> 00:20:43.860
So this is it being
escaped, right?

00:20:43.860 --> 00:20:48.050
So what sort of payload
would trigger an alert box.

00:20:48.050 --> 00:20:50.280
Well, it doesn't check
the HTML encoding, right?

00:20:50.280 --> 00:20:55.310
So what if I have an HTML
encoded single quote in there.

00:20:55.310 --> 00:20:59.240
Then when it all gets displayed
at the end, I get this.

00:20:59.240 --> 00:21:02.430
I basically get my
alert box to pop.

00:21:02.430 --> 00:21:06.140
So how did that work in practice
for this specific bug reported

00:21:06.140 --> 00:21:09.065
in the Gmail web-- this is
actually the mobile interface.

00:21:09.065 --> 00:21:11.770
It's one of the many
mobile interfaces.

00:21:11.770 --> 00:21:15.170
I'd send an email containing
this completely unsuspicious

00:21:15.170 --> 00:21:19.970
tag that I'm sure
everyone would click on.

00:21:19.970 --> 00:21:22.100
And then the page would
render, as you can see,

00:21:22.100 --> 00:21:24.850
the page renders with
just this portion of it.

00:21:24.850 --> 00:21:27.160
Because what Gmail
is doing is, it's

00:21:27.160 --> 00:21:29.334
turning that into a mailto link.

00:21:29.334 --> 00:21:30.750
So it looks like
an email address,

00:21:30.750 --> 00:21:33.020
and so it's hopefully
turning into a mailto link.

00:21:33.020 --> 00:21:36.600
Then when I click on it, I
could open a new compose window,

00:21:36.600 --> 00:21:39.660
and type a mail to that person
with the email address already

00:21:39.660 --> 00:21:41.690
pre-populated.

00:21:41.690 --> 00:21:45.850
What actually happens
in the end is this.

00:21:45.850 --> 00:21:48.380
You can see we've got
here, the single quote

00:21:48.380 --> 00:21:50.710
breaks that, we get
our alert box, and then

00:21:50.710 --> 00:21:53.210
two quotes on the end.

00:21:53.210 --> 00:21:55.440
What does it look like?

00:21:55.440 --> 00:21:57.600
That's what it looks like.

00:21:57.600 --> 00:22:00.750
So there's one of our
researchers-- successfully

00:22:00.750 --> 00:22:03.960
anonymized-- popping in
alert box on mail.google.com.

00:22:03.960 --> 00:22:04.960
AUDIENCE: [INAUDIBLE]?

00:22:08.936 --> 00:22:10.060
TIM WILLIS: I would say so.

00:22:10.060 --> 00:22:12.230
I mean, I could
hopefully make a living

00:22:12.230 --> 00:22:14.140
on the amount of money
that was going out.

00:22:14.140 --> 00:22:16.230
But, yeah, I think
there are people

00:22:16.230 --> 00:22:18.860
who are professional
bug bounty reporters.

00:22:18.860 --> 00:22:21.470
But they usually report to
lots of different programs.

00:22:21.470 --> 00:22:23.200
So I couldn't comment
authoritatively

00:22:23.200 --> 00:22:26.200
on whether they make
a living doing it.

00:22:26.200 --> 00:22:30.160
So if you're feeling a little
like this about all the stuff

00:22:30.160 --> 00:22:32.762
I've spoken about, like
this is just crazy,

00:22:32.762 --> 00:22:34.470
I didn't even understand
that last slide,

00:22:34.470 --> 00:22:36.570
what the hell is going on?

00:22:36.570 --> 00:22:38.110
Don't despair.

00:22:38.110 --> 00:22:42.550
Because these problems have
really cool and easy solutions,

00:22:42.550 --> 00:22:43.450
believe it or not.

00:22:43.450 --> 00:22:46.200
And solutions that you can take
home with you tonight and start

00:22:46.200 --> 00:22:48.210
using immediately.

00:22:48.210 --> 00:22:51.800
Because after the
break, these two guys

00:22:51.800 --> 00:22:54.870
are going to show you how easy
it can be to protect yourself

00:22:54.870 --> 00:22:58.374
from security vulnerabilities
in your applications

00:22:58.374 --> 00:23:00.540
without even having to
really understand how they're

00:23:00.540 --> 00:23:06.900
exploited, or write any
security specific HTML5 code.

00:23:06.900 --> 00:23:09.410
Sound too good to be true?

00:23:09.410 --> 00:23:12.330
Well, actually I have
time for questions.

00:23:12.330 --> 00:23:14.380
So why don't we
all grab a drink,

00:23:14.380 --> 00:23:17.310
and aim to be back
here just on 8 o'clock.

00:23:17.310 --> 00:23:18.480
Thanks very much.

00:23:18.480 --> 00:23:20.030
[APPLAUSE]

