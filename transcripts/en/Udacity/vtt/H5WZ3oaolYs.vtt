WEBVTT
Kind: captions
Language: en

00:00:00.670 --> 00:00:01.359
All right.

00:00:01.359 --> 00:00:05.240
Now let's see how TV support was
added to the Universal Media Player.

00:00:05.240 --> 00:00:06.260
On the GitHub page,

00:00:06.260 --> 00:00:09.650
you can see a complete dif of
the code changes that were made.

00:00:09.650 --> 00:00:11.580
Of course, there's a link to
this in the instructor notes so

00:00:11.580 --> 00:00:13.620
there's no need to memorize anything.

00:00:13.620 --> 00:00:16.990
While you're going through this,
pay special attention to the manifest.

00:00:16.990 --> 00:00:18.640
This dif is pretty good, but

00:00:18.640 --> 00:00:21.570
a few changes were actually
committed before this dif was made.

00:00:21.570 --> 00:00:26.260
So it's probably about 90-95% complete,
but it doesn't quite get everything.

00:00:26.260 --> 00:00:28.780
Right now what I'd like to do is
walk through the essential pieces in

00:00:28.780 --> 00:00:30.240
Android studio.

00:00:30.240 --> 00:00:32.030
Here we are inside the manifest,

00:00:32.030 --> 00:00:35.180
the first step is to update the manifest
to include leanback support,

00:00:35.180 --> 00:00:38.990
being careful not to require it since
we're running multiple devices.

00:00:38.990 --> 00:00:40.710
And because we intend
to run it on our TV,

00:00:40.710 --> 00:00:43.530
we need to set the touchscreen
to not required.

00:00:43.530 --> 00:00:46.950
Now let's create an activity to run
on the TV which we specify using

00:00:46.950 --> 00:00:48.150
the leanback launcher category.

00:00:49.170 --> 00:00:51.530
Here's our main activity for the TV.

00:00:51.530 --> 00:00:54.750
As before, our plan is to use the
leanback's browse fragment as the main

00:00:54.750 --> 00:00:57.930
UI, so the first step is
to create a layout for it.

00:00:57.930 --> 00:01:01.930
Also as before, the layout does little
else but hold the browse fragment.

00:01:01.930 --> 00:01:04.690
If we ran the project to this point
without including any other code we

00:01:04.690 --> 00:01:06.910
would see an empty browse fragment.

00:01:06.910 --> 00:01:10.070
Notice that right now we only
have a mobile configuration.

00:01:10.070 --> 00:01:13.450
Launching that will cause
the phone UI to appear on the TV.

00:01:13.450 --> 00:01:14.910
Let's see what happens.

00:01:14.910 --> 00:01:18.030
Here's the UAMP mobile
UI on the TV emulator.

00:01:18.030 --> 00:01:21.310
This is in fact proof that
Android TV is just Android.

00:01:21.310 --> 00:01:24.330
Now you can still run
the TV UI by exiting UAMP and

00:01:24.330 --> 00:01:26.470
launching it again from
the TV home screen.

00:01:26.470 --> 00:01:28.580
And here's the empty browse fragment.

00:01:28.580 --> 00:01:30.820
Or you can create a new
launch configuration for

00:01:30.820 --> 00:01:34.230
the TV that specifies the right
activity to run from Android Studio.

00:01:34.230 --> 00:01:35.840
And here's how you do that.

00:01:35.840 --> 00:01:37.720
Under Configurations, select Edit.

00:01:38.780 --> 00:01:41.990
Then add a new one, for
an Android Application.

00:01:43.120 --> 00:01:46.960
Specify the module, and
choose the TV activity.

00:01:48.330 --> 00:01:49.970
Oops, didn't give it a name.

00:01:49.970 --> 00:01:50.570
Then hit OK.

00:01:51.870 --> 00:01:53.490
Now when you run that
launch configuration,

00:01:53.490 --> 00:01:55.340
the right UI will come up.

00:01:55.340 --> 00:01:57.570
Now it's time to populate
the browse fragment, and

00:01:57.570 --> 00:02:01.750
to do so, we'll use the media browser
you saw in the Android auto lesson.

00:02:01.750 --> 00:02:04.310
Scrolling up a bit,
I want to point you to this comment.

00:02:04.310 --> 00:02:06.560
The details of the media
browser aren't important,

00:02:06.560 --> 00:02:10.050
beyond that it provides a tree structure
of media items you can explore.

00:02:10.050 --> 00:02:14.250
A media item can be playable, like
a song, or browsable, like a playlist.

00:02:14.250 --> 00:02:18.810
UAMP is hardcoded to expect the three
levels of media items that you see here.

00:02:18.810 --> 00:02:21.100
The first level is
a category of categories,

00:02:21.100 --> 00:02:24.630
like genre which will go
here on the header items.

00:02:24.630 --> 00:02:27.780
The next category is music style,
like rock or jazz.

00:02:27.780 --> 00:02:29.830
They'll go here on the rows fragment.

00:02:29.830 --> 00:02:33.720
Finally, we have actual songs which
will be displayed on a separate UI.

00:02:33.720 --> 00:02:35.450
First, let's create the header items.

00:02:35.450 --> 00:02:38.010
We do so
inside the media browser callback.

00:02:38.010 --> 00:02:41.590
This gives us a list of media items
which can be playable or browsable, and

00:02:41.590 --> 00:02:44.490
they contain metadata about a song or
category.

00:02:44.490 --> 00:02:48.100
At this first level, we'll create a
header item for each of the media items,

00:02:48.100 --> 00:02:50.970
and the pattern is exactly the same
as you've seen in previous lessons.

00:02:52.040 --> 00:02:55.830
Next if the item is browsable, we'll
explore the music hierarchy deeper and

00:02:55.830 --> 00:02:57.770
create a row for its contents.

00:02:57.770 --> 00:03:01.980
Here the browsable items are going to
be music styles, like rock and jazz.

00:03:01.980 --> 00:03:03.870
You can see how the second
level is explored

00:03:03.870 --> 00:03:06.340
inside the row subscription callback.

00:03:06.340 --> 00:03:09.640
Also, as before, we'll need
the presenter to display these items.

00:03:09.640 --> 00:03:13.610
Here presenter can take either
a media item or a queue item as input.

00:03:13.610 --> 00:03:16.620
And if you scroll down a bit you can
see logic to set the description and

00:03:16.620 --> 00:03:18.400
to fetch the album artwork.

00:03:18.400 --> 00:03:21.410
At this point, if we run UAMP again,
let's see what we get.

00:03:21.410 --> 00:03:23.080
Here you can see the header items and

00:03:23.080 --> 00:03:26.890
the row items we can drill down
into further using a separate UI.

00:03:26.890 --> 00:03:27.960
Back in the browse fragment,

00:03:27.960 --> 00:03:31.870
we set up event listeners to respond
when one of our row items is selected.

00:03:31.870 --> 00:03:35.110
These will open up a vertical grid
fragment and this is just another

00:03:35.110 --> 00:03:37.890
leanback class that works a whole
lot like the browse fragment.

00:03:37.890 --> 00:03:39.819
It just happens to layout its
content a bit differently.

00:03:40.910 --> 00:03:44.260
Inside the vertical grid fragment you
can see we also use the media browser

00:03:44.260 --> 00:03:46.940
subscription call backs
to populate the UI.

00:03:46.940 --> 00:03:49.800
The principals are identical to
the material we've already covered and

00:03:49.800 --> 00:03:51.590
here's how they look in action.

00:03:51.590 --> 00:03:54.220
When one of the songs is selected
on the vertical grid fragment,

00:03:54.220 --> 00:03:56.560
we'll want to start a playback activity.

00:03:56.560 --> 00:03:57.300
Notice that we actually

00:03:57.300 --> 00:03:59.540
kick off playback here
using the media controller.

00:03:59.540 --> 00:04:00.600
Although, of course, we could do so

00:04:00.600 --> 00:04:03.190
instead inside a playback
overlay fragment.

00:04:03.190 --> 00:04:05.460
Now, let's have a look at
the playback overlay fragment,

00:04:05.460 --> 00:04:08.350
another leanback class that
provides playback controls.

00:04:08.350 --> 00:04:10.580
The media controller will
handle the actual playback.

00:04:11.710 --> 00:04:15.360
All we have to do inside this class
is map the UI control actions

00:04:15.360 --> 00:04:19.910
to commands for the media controller,
and we do so using this event listener.

00:04:19.910 --> 00:04:22.530
Here you can see how we
forward an action on the UI to

00:04:22.530 --> 00:04:23.850
the media controller.

00:04:23.850 --> 00:04:24.910
And here's how that looks in action.

00:04:28.750 --> 00:04:31.580
At this point you have everything you
need to know to build a great leanback

00:04:31.580 --> 00:04:32.097
application.

