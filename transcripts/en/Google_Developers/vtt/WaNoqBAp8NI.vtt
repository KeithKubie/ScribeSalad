WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.240
As a web developer, I
know it's challenging

00:00:02.240 --> 00:00:04.300
to stand out and
delight your users.

00:00:04.300 --> 00:00:07.020
However, you can use
rich, animated content

00:00:07.020 --> 00:00:09.240
to showcase a great
design or to give users

00:00:09.240 --> 00:00:12.510
amazing visual feedback to
keep their eyes focused.

00:00:12.510 --> 00:00:14.170
I'm Sam from Google Developers.

00:00:14.170 --> 00:00:16.379
Here are the three modern
approaches to animation,

00:00:16.379 --> 00:00:19.370
declarative, imperative,
and procedural.

00:00:19.370 --> 00:00:21.230
If you'd like to
follow along at home,

00:00:21.230 --> 00:00:23.521
be sure to check out the
description to find the source

00:00:23.521 --> 00:00:24.770
code to the demos.

00:00:24.770 --> 00:00:26.130
Let's dive in.

00:00:26.130 --> 00:00:28.865
First, let's talk
about CSS animations.

00:00:28.865 --> 00:00:29.865
These are really common.

00:00:29.865 --> 00:00:32.409
More than half of all webpages
loaded by Chrome users

00:00:32.409 --> 00:00:34.370
include them.

00:00:34.370 --> 00:00:36.255
They're a type of
declarative programming

00:00:36.255 --> 00:00:38.880
as you describe what you'd like
to see and let the browser take

00:00:38.880 --> 00:00:40.470
care of getting you there.

00:00:40.470 --> 00:00:42.820
Simple effects like
fades, highlights,

00:00:42.820 --> 00:00:44.690
or other transitions
can be achieved

00:00:44.690 --> 00:00:46.670
by setting the
transition property.

00:00:46.670 --> 00:00:48.420
Any matching style
change will be animated

00:00:48.420 --> 00:00:50.200
with the timing you specified.

00:00:50.200 --> 00:00:52.260
If you've never animated
on the web before,

00:00:52.260 --> 00:00:54.330
try it out with a
striking background color

00:00:54.330 --> 00:00:56.520
or dismiss effect.

00:00:56.520 --> 00:00:58.960
You can also specify
CSS key frames,

00:00:58.960 --> 00:01:01.130
which lets you describe
a number of steps.

00:01:01.130 --> 00:01:03.230
You'll have to specify
everything up front,

00:01:03.230 --> 00:01:07.500
but this lets you encapsulate
more complicated effects.

00:01:07.500 --> 00:01:09.930
The Web Animations API is
the standards-based approach

00:01:09.930 --> 00:01:12.110
to imperative
animation on the web.

00:01:12.110 --> 00:01:13.690
And don't just take
my word for it.

00:01:13.690 --> 00:01:15.470
Ask the W3C.

00:01:15.470 --> 00:01:17.620
This API provides
powerful primitives.

00:01:17.620 --> 00:01:19.770
And we refer to this as
imperative programming

00:01:19.770 --> 00:01:22.370
as you'll use these real
JavaScript objects directly

00:01:22.370 --> 00:01:24.270
as part of your site's code.

00:01:24.270 --> 00:01:26.220
You can also get started
really easily with

00:01:26.220 --> 00:01:27.910
the element.animate() call.

00:01:27.910 --> 00:01:29.700
By specifying a
few steps, you'll

00:01:29.700 --> 00:01:31.470
get back an animation
object, which

00:01:31.470 --> 00:01:33.910
lets you control an
animation as it plays, maybe

00:01:33.910 --> 00:01:38.240
by pausing, rewinding, or
listening to its finish event.

00:01:38.240 --> 00:01:40.120
Rather than specifying
simple steps,

00:01:40.120 --> 00:01:42.330
you can also build
effect objects.

00:01:42.330 --> 00:01:44.040
These are either a
list of key frames

00:01:44.040 --> 00:01:45.720
or group of other effects.

00:01:45.720 --> 00:01:48.230
These primitives let you
compose more complicated scenes

00:01:48.230 --> 00:01:50.060
in any way you see fit.

00:01:50.060 --> 00:01:53.340
Remember, because these are
real JavaScript objects,

00:01:53.340 --> 00:01:55.360
they're perfect when
your engineering rich

00:01:55.360 --> 00:01:57.007
object-oriented
web applications,

00:01:57.007 --> 00:01:59.340
because they let you properly
encapsulate your animation

00:01:59.340 --> 00:02:01.380
logic.

00:02:01.380 --> 00:02:03.530
Lastly, there is
procedural animation.

00:02:03.530 --> 00:02:05.100
This us actually a
type of imperative

00:02:05.100 --> 00:02:08.590
animation, but refers to
animating step-by-step.

00:02:08.590 --> 00:02:11.289
On the web, you can use the
requestAnimationFrame method

00:02:11.289 --> 00:02:12.830
to be called whenever
your browser is

00:02:12.830 --> 00:02:14.670
ready to draw your next step.

00:02:14.670 --> 00:02:16.830
As a bonus, when the
browser is hidden,

00:02:16.830 --> 00:02:18.920
your code won't
be called at all.

00:02:18.920 --> 00:02:20.460
This gives you
full control, which

00:02:20.460 --> 00:02:21.918
could be useful
when you're drawing

00:02:21.918 --> 00:02:23.510
into a HTML canvas,
which is pretty

00:02:23.510 --> 00:02:25.450
common for browser-based games.

00:02:25.450 --> 00:02:27.630
However, you'd want to
keep your code short.

00:02:27.630 --> 00:02:30.240
You'll be responsible for
orchestrating an entire scene.

00:02:30.240 --> 00:02:33.950
So if it takes too long, your
user's experience could suffer.

00:02:33.950 --> 00:02:34.530
Phew.

00:02:34.530 --> 00:02:35.647
That was a lot to cover.

00:02:35.647 --> 00:02:38.230
If you're still confused about
which approach to choose, let's

00:02:38.230 --> 00:02:39.600
recap.

00:02:39.600 --> 00:02:42.960
For simple effects, like
fade, highlight, or transform,

00:02:42.960 --> 00:02:46.020
try out CSS animations and
the transition keyword.

00:02:46.020 --> 00:02:47.570
If you're building
a web application

00:02:47.570 --> 00:02:49.550
or to encapsulate
something complex,

00:02:49.550 --> 00:02:51.970
try the Web Animations API.

00:02:51.970 --> 00:02:54.000
Finally, if you
want full control,

00:02:54.000 --> 00:02:56.070
use requestAnimationFrame
to get called whenever

00:02:56.070 --> 00:02:58.340
your browser is ready to go.

00:02:58.340 --> 00:03:01.390
I'll even mention that this
year's Google I/O website

00:03:01.390 --> 00:03:02.950
uses a little bit of all three.

00:03:02.950 --> 00:03:05.400
And sometimes that's right too.

00:03:05.400 --> 00:03:07.530
Find out more using
these resources.

00:03:07.530 --> 00:03:09.800
Thanks for tuning
in I'm Sam Thorogood

00:03:09.800 --> 00:03:11.750
through Google Developers.

