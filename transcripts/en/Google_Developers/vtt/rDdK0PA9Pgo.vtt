WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:02.530
SETH LADD: Welcome everyone
to Episode 11.

00:00:02.530 --> 00:00:05.130
And today, we are going to talk
to engineers from the

00:00:05.130 --> 00:00:06.540
dart2js team.

00:00:06.540 --> 00:00:09.040
And so stick around, and you
could learn how we get Dart

00:00:09.040 --> 00:00:11.120
code to run across
modern browsers.

00:00:11.120 --> 00:00:12.599
[INTRO MUSIC]

00:00:19.010 --> 00:00:19.755
JJ BEHRENS: I'm JJ Behrens.

00:00:19.755 --> 00:00:21.000
This is Seth Ladd.

00:00:21.000 --> 00:00:21.710
SETH LADD: Hello.

00:00:21.710 --> 00:00:23.800
First, the news.

00:00:23.800 --> 00:00:27.790
This all comes thanks to Chris
Buckett's dartwatch blog.

00:00:27.790 --> 00:00:29.420
So thank you for collecting
all the news.

00:00:29.420 --> 00:00:34.100
First off, Mike Eberhart has
created Dart Squid, his UI SVG

00:00:34.100 --> 00:00:34.820
components.

00:00:34.820 --> 00:00:36.615
Now, have you worked with SVG?

00:00:36.615 --> 00:00:38.170
JJ BEHRENS: No, actually
I haven't.

00:00:38.170 --> 00:00:40.560
For some reason, I've never
gotten a chance do that.

00:00:40.560 --> 00:00:42.580
SETH LADD: I think it's
underappreciated technology.

00:00:42.580 --> 00:00:45.460
And I look forward to more
deployments of SVG, and

00:00:45.460 --> 00:00:46.370
especially with Dart.

00:00:46.370 --> 00:00:48.050
So check out Mike's library.

00:00:48.050 --> 00:00:50.610
JJ BEHRENS: The thing I don't
like about SVG is I'm not a

00:00:50.610 --> 00:00:51.530
very attractive guy.

00:00:51.530 --> 00:00:54.880
And so what I'd like is taking
a picture of myself as a GIF,

00:00:54.880 --> 00:00:57.240
and then blowing it up,
I'm kind of fuzzy.

00:00:57.240 --> 00:00:59.970
But in SVG, it's like--

00:00:59.970 --> 00:01:01.330
SETH LADD: It is vector
graphics.

00:01:01.330 --> 00:01:01.700
JJ BEHRENS: Yeah.

00:01:01.700 --> 00:01:03.160
It's like you could
see everything.

00:01:03.160 --> 00:01:05.720
There's no hiding
behind the fuzz.

00:01:05.720 --> 00:01:07.560
SETH LADD: Simon Pai,
from the Dart

00:01:07.560 --> 00:01:08.900
framework builders Rikulo--

00:01:08.900 --> 00:01:11.640
and you can remember them from
a previous episode--

00:01:11.640 --> 00:01:14.100
has blogged about a rotatable
map prototype.

00:01:14.100 --> 00:01:16.630
So it's really cool
to see another UI

00:01:16.630 --> 00:01:17.830
framework built in Dart.

00:01:17.830 --> 00:01:19.800
And these guys are friends
of the project.

00:01:19.800 --> 00:01:21.800
And it's fun to track
their project.

00:01:21.800 --> 00:01:25.620
Florian Loitsch, one of the
members of the dart2js team--

00:01:25.620 --> 00:01:27.200
JJ BEHRENS: We'll hear
for him in a minute.

00:01:27.200 --> 00:01:29.740
SETH LADD: Yes, will be speaking
on JavaScript as a

00:01:29.740 --> 00:01:32.540
compilation target
at JSConf EU.

00:01:32.540 --> 00:01:33.750
Now, this is really cool.

00:01:33.750 --> 00:01:36.230
It's a heavy JavaScript
conference.

00:01:36.230 --> 00:01:37.600
But we're going to talk
about how we get Dart

00:01:37.600 --> 00:01:38.960
to JavaScript there.

00:01:38.960 --> 00:01:41.400
JJ BEHRENS: Yeah, that turns out
to be a lot more complex

00:01:41.400 --> 00:01:43.210
than I thought it would be.

00:01:43.210 --> 00:01:46.040
SETH LADD: And with the Pub, the
package manager for Dart,

00:01:46.040 --> 00:01:47.850
getting released very
soon-- in fact

00:01:47.850 --> 00:01:49.560
it's in the SDK today--

00:01:49.560 --> 00:01:52.190
the server components are
coming online shortly.

00:01:52.190 --> 00:01:55.450
And you see more documentation
posted about how to create a

00:01:55.450 --> 00:01:59.130
package, what does the
versioning system look like,

00:01:59.130 --> 00:02:01.200
and how to declare your
dependencies.

00:02:01.200 --> 00:02:04.130
In preparation, the Dart
M1 language changes.

00:02:04.130 --> 00:02:04.850
Now this is cool.

00:02:04.850 --> 00:02:08.889
The editor will help you quick
fix or clean-up your--

00:02:08.889 --> 00:02:11.110
it sounds weird, but
legacy dart code.

00:02:11.110 --> 00:02:14.350
That is the code before the
M1 line in the sand of the

00:02:14.350 --> 00:02:15.490
release, if you will.

00:02:15.490 --> 00:02:19.210
And so it will help you update
the syntax for things like the

00:02:19.210 --> 00:02:24.560
try catch blocks, interfaces
to classes, and more.

00:02:24.560 --> 00:02:26.320
And so Definitely
try this out.

00:02:26.320 --> 00:02:28.900
And as more implementations of
the new language features come

00:02:28.900 --> 00:02:31.650
online, the new editor clean-ups
will get even more

00:02:31.650 --> 00:02:32.380
and more useful.

00:02:32.380 --> 00:02:34.720
JJ BEHRENS: Dude, this
is frickin' magical.

00:02:34.720 --> 00:02:37.840
For a long time, I was super
jealous over Go, because Go

00:02:37.840 --> 00:02:42.680
had this nice thing where it
could automatically upgrade

00:02:42.680 --> 00:02:43.970
your code to new APIs.

00:02:43.970 --> 00:02:45.980
But now we have it directly
in the editor.

00:02:45.980 --> 00:02:47.630
I'm super psyched about this.

00:02:47.630 --> 00:02:48.340
SETH LADD: Yeah, this
is awesome.

00:02:48.340 --> 00:02:51.180
So try out that feature and
let us know how it works.

00:02:51.180 --> 00:02:54.800
So John Evans, one of the early
adopters of Dart and the

00:02:54.800 --> 00:02:57.760
author of the Buckshot UI
framework, has been blogging

00:02:57.760 --> 00:03:00.110
about his experience using
the Mirrors API.

00:03:00.110 --> 00:03:02.330
Now, mirrors are awesome because
it's our way to do

00:03:02.330 --> 00:03:04.920
reflection, things like tell
me more about the class I'm

00:03:04.920 --> 00:03:07.580
operating with, and I think in
the future, do things like

00:03:07.580 --> 00:03:09.750
construct a class on the fly.

00:03:09.750 --> 00:03:14.250
Finally, for more news, we
have a 83% more awesome

00:03:14.250 --> 00:03:19.280
api.dartlang.org site now,
with a "find as you type"

00:03:19.280 --> 00:03:19.870
search feature.

00:03:19.870 --> 00:03:21.930
Now, have you tried this?

00:03:21.930 --> 00:03:22.840
JJ BEHRENS: Yeah, briefly.

00:03:22.840 --> 00:03:24.210
But I'm really wondering,
how'd you

00:03:24.210 --> 00:03:25.980
come up with the 83%?

00:03:25.980 --> 00:03:26.950
SETH LADD: It's very
complicated.

00:03:26.950 --> 00:03:29.440
We had to use 6,000 cores in
Compute Engine, wrote it all

00:03:29.440 --> 00:03:31.690
with Dart, but it
is verifiable.

00:03:31.690 --> 00:03:33.790
And it's really nice because we
have a lot of classes and

00:03:33.790 --> 00:03:36.420
interfaces that use, for
instance, the word "element".

00:03:36.420 --> 00:03:40.140
And sometimes you want to just
find the superclass element.

00:03:40.140 --> 00:03:42.615
Now you go right up to the
search box type "element," and

00:03:42.615 --> 00:03:44.290
it comes up in a nice
ranking order.

00:03:44.290 --> 00:03:46.560
And so much easier now to browse
around if you just want

00:03:46.560 --> 00:03:49.170
to know what does
our API provide.

00:03:49.170 --> 00:03:50.730
So definitely try that out.

00:03:50.730 --> 00:03:54.045
JJ BEHRENS: It's funny, if
you're a language guy like I

00:03:54.045 --> 00:03:56.220
am, you kind of spend
all your time

00:03:56.220 --> 00:03:57.500
thinking about the language.

00:03:57.500 --> 00:04:00.590
But actually, a lot of those
other things actually really

00:04:00.590 --> 00:04:01.960
help out your productivity.

00:04:01.960 --> 00:04:05.250
Because spending a lot of that
time searching through docs

00:04:05.250 --> 00:04:08.610
instead of having something that
immediately takes to what

00:04:08.610 --> 00:04:11.130
you want could really increase
your productivity.

00:04:11.130 --> 00:04:12.740
So I'm excited about that.

00:04:12.740 --> 00:04:13.140
SETH LADD: Yeah, yeah.

00:04:13.140 --> 00:04:13.350
Great.

00:04:13.350 --> 00:04:14.420
Well, that's what we
have for the news.

00:04:14.420 --> 00:04:16.339
So now let's invite
our guests.

00:04:16.339 --> 00:04:17.160
JJ BEHRENS: Wait, hang on.

00:04:17.160 --> 00:04:18.060
I'm going to do it.

00:04:18.060 --> 00:04:19.260
You ready?

00:04:19.260 --> 00:04:20.918
SETH LADD: One, two, three.

00:04:20.918 --> 00:04:21.914
[SNAPS FINGERS]

00:04:21.914 --> 00:04:23.410
SETH LADD: Ta-dah!

00:04:23.410 --> 00:04:25.440
JJ BEHRENS: Hey, welcome
to the show, guys.

00:04:25.440 --> 00:04:25.700
FLORIAN LOITSCH: Thanks.

00:04:25.700 --> 00:04:26.130
SETH LADD: How was that?

00:04:26.130 --> 00:04:28.420
Your first magical
teleportation.

00:04:28.420 --> 00:04:28.755
KASPER LUND: Not
the first, no.

00:04:28.755 --> 00:04:30.660
SETH LADD: No, not
the first, right.

00:04:30.660 --> 00:04:30.840
PETER VAN DER AHE:
It's my first.

00:04:30.840 --> 00:04:32.930
It's more easier than
I expected.

00:04:32.930 --> 00:04:33.800
JJ BEHRENS: Yeah.

00:04:33.800 --> 00:04:36.860
So can you say something
cool in Danish?

00:04:36.860 --> 00:04:39.110
KASPER LUND: [SPEAKING DANISH].

00:04:39.110 --> 00:04:41.320
JJ BEHRENS: I can't tell
if that's cool or not.

00:04:41.320 --> 00:04:42.570
KASPER LUND: [SPEAKING DANISH].

00:04:44.180 --> 00:04:45.730
JJ BEHRENS: Yeah, well,
that's obvious.

00:04:45.730 --> 00:04:48.180
SETH LADD: Bring in some good
YouTube comments from that.

00:04:48.180 --> 00:04:50.290
So most importantly, how
do you pronounce

00:04:50.290 --> 00:04:51.740
[SPEAKING DANISH]?

00:04:51.740 --> 00:04:52.470
PETER VAN DER AHE:
[SPEAKING DANISH].

00:04:52.470 --> 00:04:53.370
SETH LADD: [SPEAKING DANISH].

00:04:53.370 --> 00:04:55.120
KASPER LUND: That was
pretty close.

00:04:55.120 --> 00:04:56.980
JJ BEHRENS: You guys want
to introduce yourselves?

00:04:56.980 --> 00:04:58.350
FLORIAN LOITSCH: Yes,
I'm Florian Loitsch.

00:04:58.350 --> 00:05:03.830
And, I've been working on Dart
since the beginning.

00:05:03.830 --> 00:05:06.890
My background is basically
scheme and compilers.

00:05:06.890 --> 00:05:08.770
I wrote scheme to JavaScript
compiler.

00:05:08.770 --> 00:05:10.800
And then I wrote JavaScript
to scheme compiler.

00:05:10.800 --> 00:05:14.360
And then I joined the V8 team.

00:05:14.360 --> 00:05:16.640
And then eventually, I
transitioned to Dart.

00:05:16.640 --> 00:05:19.765
And now I'm working on a Dart
to JavaScript compiler.

00:05:19.765 --> 00:05:20.830
So JavaScripts--

00:05:20.830 --> 00:05:21.310
SETH LADD: It always comes
back to JavaScript.

00:05:21.310 --> 00:05:23.230
FLORIAN LOITSCH: --and Darts,
dynamic languages, scheme.

00:05:23.230 --> 00:05:24.230
That's my background.

00:05:24.230 --> 00:05:24.560
JJ BEHRENS: Awesome.

00:05:24.560 --> 00:05:26.680
JJ BEHRENS: And I'm
Kasper Lund.

00:05:26.680 --> 00:05:30.280
I worked on Dart since
the beginning, too.

00:05:30.280 --> 00:05:32.920
Now, I'm working on dart2js,
compiling Dart to efficient

00:05:32.920 --> 00:05:34.370
JavaScript code.

00:05:34.370 --> 00:05:38.370
Before that, I spent some years
on optimizing JavaScript

00:05:38.370 --> 00:05:40.500
in Chrome and the V8 engines.

00:05:40.500 --> 00:05:43.700
I had a lot of work
in trying to make

00:05:43.700 --> 00:05:44.640
JavaScript run really quickly.

00:05:44.640 --> 00:05:48.870
So now it's nice to be able to
make good use of that by

00:05:48.870 --> 00:05:50.710
compiling to it as a
target language.

00:05:50.710 --> 00:05:53.630
PETER VON DER AHE: My name
is Peter von der Ahe.

00:05:53.630 --> 00:05:55.990
And I work on dart2js.

00:05:55.990 --> 00:06:00.250
I mostly focus on the front end,
that is, passing symbol

00:06:00.250 --> 00:06:04.280
resolution and stuff like
that-- type checking,

00:06:04.280 --> 00:06:06.470
inferring types, perhaps.

00:06:06.470 --> 00:06:13.510
And then before joining Google,
I had worked on Java

00:06:13.510 --> 00:06:15.920
Caesar, the compiler.

00:06:15.920 --> 00:06:21.400
And I've also worked on Gilad
Bracha's Newspeak project.

00:06:21.400 --> 00:06:22.450
JJ BEHRENS: Wow.

00:06:22.450 --> 00:06:24.380
SETH LADD: We should do a shout
out to the rest of the

00:06:24.380 --> 00:06:27.510
dart2js team, who we only have
this big of a couch, but we

00:06:27.510 --> 00:06:28.830
have a really awesome team.

00:06:28.830 --> 00:06:30.830
We want to thank everyone
for all their work.

00:06:30.830 --> 00:06:33.370
And I should probably say, we
have an external contributor

00:06:33.370 --> 00:06:34.300
working on dart2js.

00:06:34.300 --> 00:06:34.860
Is that right?

00:06:34.860 --> 00:06:36.710
KASPER LUND: That is true.

00:06:36.710 --> 00:06:39.160
SETH LADD: It's our first
installed contributor.

00:06:39.160 --> 00:06:41.830
PETER VON DER AHE: After
submitting a few CLs on his

00:06:41.830 --> 00:06:46.350
behalf, we asked him if he
wanted to be a full-scale

00:06:46.350 --> 00:06:47.970
committer on the project.

00:06:47.970 --> 00:06:49.780
JJ BEHRENS: That's
pretty amazing.

00:06:49.780 --> 00:06:50.950
KASPER LUND: That's nice.

00:06:50.950 --> 00:06:53.120
More resources.

00:06:53.120 --> 00:06:55.840
JJ BEHRENS: I also think that
really points out the open

00:06:55.840 --> 00:06:57.090
source nature of Dart.

00:06:57.090 --> 00:06:58.900
SETH LADD: So I'm really
interested in the design of

00:06:58.900 --> 00:07:01.920
the language and how it's been
impacted by what has always

00:07:01.920 --> 00:07:04.800
been a core belief of ours
that it has to compile to

00:07:04.800 --> 00:07:07.320
fast, sane, logical
JavaScript.

00:07:07.320 --> 00:07:10.410
Can we talk a little bit about
how that's impacted?

00:07:10.410 --> 00:07:13.140
KASPER LUND: Yeah, from the
get-go, we knew that being

00:07:13.140 --> 00:07:16.090
able to run on any browser was
really important for Dart to

00:07:16.090 --> 00:07:19.480
be interesting to people that
wanted to develop big, large

00:07:19.480 --> 00:07:22.160
web apps for the real world.

00:07:22.160 --> 00:07:25.760
So we looked at the constraints
imposed by using

00:07:25.760 --> 00:07:26.990
JavaScript as a target
language.

00:07:26.990 --> 00:07:29.520
And some of the things that we
probably wanted to try out in

00:07:29.520 --> 00:07:32.500
the language were really hard
to do when compiled to

00:07:32.500 --> 00:07:32.570
JavaScript.

00:07:32.570 --> 00:07:35.400
A few of them are things like
non-local returns, where you

00:07:35.400 --> 00:07:37.850
can return from an
inner function.

00:07:37.850 --> 00:07:40.940
And you actually end up
returning, not from the

00:07:40.940 --> 00:07:43.530
function itself, but from the
enclosing functions instead,

00:07:43.530 --> 00:07:45.060
which is a really
cool feature.

00:07:45.060 --> 00:07:47.750
It's just hard to implement in
JavaScript efficiently because

00:07:47.750 --> 00:07:49.950
it ends up being something with
their own exceptions.

00:07:49.950 --> 00:07:52.390
So that's something we dropped
and said let's

00:07:52.390 --> 00:07:53.180
not do that for now.

00:07:53.180 --> 00:07:55.910
It's too complicated to
make that efficient.

00:07:55.910 --> 00:07:59.450
So let's keep it closer to what
you can do in JavaScript.

00:07:59.450 --> 00:08:02.180
There are a few other things
that we also decided not to

00:08:02.180 --> 00:08:04.425
push too hard on.

00:08:04.425 --> 00:08:09.410
On the syntax front, we tried
to stay reasonably true to

00:08:09.410 --> 00:08:11.050
JavaScript so it would
look familiar,

00:08:11.050 --> 00:08:12.290
feel familiar to people.

00:08:12.290 --> 00:08:14.860
I think that's very important
for adoption.

00:08:14.860 --> 00:08:16.540
FLORIAN LOITSCH: I think in
Java, when we had the choice

00:08:16.540 --> 00:08:20.940
when we weren't sure and there
were several valid choices, we

00:08:20.940 --> 00:08:23.755
picked the one from JavaScript
just to make it comfortable

00:08:23.755 --> 00:08:27.990
and to make it familiar to
JavaScript developers.

00:08:27.990 --> 00:08:31.550
KASPER LUND: You could say that
the async programming

00:08:31.550 --> 00:08:34.650
style that we use in Dart
is also inherited from

00:08:34.650 --> 00:08:35.600
JavaScript.

00:08:35.600 --> 00:08:41.330
We're not ruling out allowing
users to tell us to trust the

00:08:41.330 --> 00:08:43.289
type of notations if they
really need that for

00:08:43.289 --> 00:08:43.799
deployment.

00:08:43.799 --> 00:08:47.940
It's just putting that in too
early will essentially remove

00:08:47.940 --> 00:08:49.950
all pressure from us to deliver
something that's

00:08:49.950 --> 00:08:53.560
really, really nice without
those slightly hacky

00:08:53.560 --> 00:08:54.300
optimizations, right?

00:08:54.300 --> 00:08:56.680
So we like to have that pressure
put on us to deliver

00:08:56.680 --> 00:08:59.960
something that's really fast
without unsafe optimizations.

00:08:59.960 --> 00:09:01.910
SETH LADD: I think it's
also a workflow issue.

00:09:01.910 --> 00:09:04.810
The way we envision Dart being
deployed a lot is it's a very

00:09:04.810 --> 00:09:05.520
scalable language.

00:09:05.520 --> 00:09:08.580
So you can start with just some
functions and a small

00:09:08.580 --> 00:09:10.050
prototype, and you
don't really have

00:09:10.050 --> 00:09:12.230
types in play here.

00:09:12.230 --> 00:09:14.100
And we want people to
start that way.

00:09:14.100 --> 00:09:16.680
And so we don't want people to
necessarily type everything at

00:09:16.680 --> 00:09:17.310
the very beginning.

00:09:17.310 --> 00:09:19.470
Of course, you can if you'd
like, but you should have that

00:09:19.470 --> 00:09:22.120
option to scale up to very type
systems starting from a

00:09:22.120 --> 00:09:25.760
very small R&amp;D project,
if you will.

00:09:25.760 --> 00:09:26.570
JJ BEHRENS: Definitely.

00:09:26.570 --> 00:09:28.040
SETH LADD: Before we take the
questions, I want to actually

00:09:28.040 --> 00:09:30.130
dive in a little bit
to what happens in

00:09:30.130 --> 00:09:31.520
dart2js, for instance.

00:09:31.520 --> 00:09:36.440
So I think this is a good point
for our viewers, who

00:09:36.440 --> 00:09:38.180
might come from, say, a
CoffeeScript background, or

00:09:38.180 --> 00:09:41.150
who had this idea that, OK, I
can compile it in one language

00:09:41.150 --> 00:09:43.790
or convert one language
to another.

00:09:43.790 --> 00:09:47.610
But in dart2js, I think we have
different semantics and

00:09:47.610 --> 00:09:51.050
that governs non-straightforward
way.

00:09:51.050 --> 00:09:52.360
JJ BEHRENS: It's not a syntax
transformation.

00:09:52.360 --> 00:09:53.105
SETH LADD: That's what
I'm trying to say.

00:09:53.105 --> 00:09:53.470
Thank you.

00:09:53.470 --> 00:09:55.700
JJ BEHRENS: It's even a semantic
transformation.

00:09:55.700 --> 00:09:57.030
SETH LADD: Yeah, so can
you talk about that?

00:09:57.030 --> 00:10:01.780
For instance, what happens when
I compile and add "int a

00:10:01.780 --> 00:10:04.170
comma int b" into JavaScript?

00:10:04.170 --> 00:10:06.500
KASPER LUND: So Peter was sort
of saying that the biggest

00:10:06.500 --> 00:10:10.780
problem is really that you
cannot just compile a Dart

00:10:10.780 --> 00:10:12.220
plus to a JavaScript plus.

00:10:12.220 --> 00:10:13.320
And that's exactly right.

00:10:13.320 --> 00:10:17.120
And so for method calls, like
calling a "foo" a "bar" on

00:10:17.120 --> 00:10:19.960
some objects, it's sort of a
pretty direct translation.

00:10:19.960 --> 00:10:22.430
We have some slightly more
advanced ways of passing

00:10:22.430 --> 00:10:24.420
arguments, which needs
to be dealt with.

00:10:24.420 --> 00:10:26.540
But other than that, we're just
using JavaScript function

00:10:26.540 --> 00:10:31.210
calls to implement Dart function
calls essentially.

00:10:31.210 --> 00:10:34.420
But on the primitive values
where we use JavaScript

00:10:34.420 --> 00:10:37.000
numbers and stuff, it's a
bit more complicated.

00:10:37.000 --> 00:10:40.530
Because in Dart, you can
provide a user-defined

00:10:40.530 --> 00:10:43.830
implementation of an operator
like plus, and it needs to

00:10:43.830 --> 00:10:45.450
work in the right way.

00:10:45.450 --> 00:10:48.990
Whereas in JavaScript, there is
really no way of defining a

00:10:48.990 --> 00:10:50.940
user-defined plus operator.

00:10:50.940 --> 00:10:53.080
You can just use the one
that's built in.

00:10:53.080 --> 00:10:56.540
And if your optics have the
right value-off method, they

00:10:56.540 --> 00:10:59.440
might participate in this kind
of built-in plus operation.

00:10:59.440 --> 00:11:02.080
So Dart is more flexible
there than JavaScript.

00:11:02.080 --> 00:11:04.980
But it also means that there's
sort of a semantic gap between

00:11:04.980 --> 00:11:07.925
Dart plus and JavaScript plus.

00:11:07.925 --> 00:11:09.920
In itself, it's pretty easy
to implement Dart plus.

00:11:09.920 --> 00:11:13.000
It's just very slow if you
compile to JavaScript and just

00:11:13.000 --> 00:11:15.150
essentially turn a plus
into a method call.

00:11:15.150 --> 00:11:21.320
So we go through I would say
great lengths to try to figure

00:11:21.320 --> 00:11:23.695
out when it's safe to compile
a Dart plus into

00:11:23.695 --> 00:11:25.270
a JavaScript plus.

00:11:25.270 --> 00:11:26.890
And it's only safe under
certain assumptions.

00:11:26.890 --> 00:11:28.790
It's only safe when you
know you're operating

00:11:28.790 --> 00:11:30.440
on JavaScript numbers.

00:11:30.440 --> 00:11:32.570
Otherwise, you're not getting
the right semantics.

00:11:32.570 --> 00:11:34.880
For instance, if you end up
operating on JavaScript

00:11:34.880 --> 00:11:38.200
strings instead, you'll get
string concatenation out of

00:11:38.200 --> 00:11:40.740
it, because that's what
JavaScript does for plus, and

00:11:40.740 --> 00:11:42.400
that's not the Dart way.

00:11:42.400 --> 00:11:47.780
So that's one of the big
challenges we have is just

00:11:47.780 --> 00:11:50.190
pushing enough type information
around the system

00:11:50.190 --> 00:11:54.870
to know when we can safely
translate a plus to a plus.

00:11:54.870 --> 00:11:56.600
FLORIAN LOITSCH: Then we
also have speculative

00:11:56.600 --> 00:11:57.240
optimizations.

00:11:57.240 --> 00:12:00.850
So, in particular, for arrays
or array accesses, we don't

00:12:00.850 --> 00:12:04.270
want to go through helper
methods to do that.

00:12:04.270 --> 00:12:08.280
So what we do is if we see that
this might be a loop that

00:12:08.280 --> 00:12:11.010
works with arrays,
we do the check.

00:12:11.010 --> 00:12:13.670
If it's a JavaScript array
before the loop, we check if

00:12:13.670 --> 00:12:15.670
the index is an integer.

00:12:15.670 --> 00:12:17.640
And usually the index is just
incremented to the loop.

00:12:17.640 --> 00:12:19.140
So once we know it's
an integer, it

00:12:19.140 --> 00:12:20.450
will stay an integer.

00:12:20.450 --> 00:12:22.270
So we do that before the loop.

00:12:22.270 --> 00:12:25.570
And in the loop we have a
nice efficient access.

00:12:25.570 --> 00:12:28.665
And in case it's not an array
or it's not an integer, we

00:12:28.665 --> 00:12:29.570
have a bailout method.

00:12:29.570 --> 00:12:32.370
So we jump to another method,
and there we do the slow

00:12:32.370 --> 00:12:34.790
accesses where we go through
helper methods to make sure

00:12:34.790 --> 00:12:37.530
that if the array
is actually--

00:12:37.530 --> 00:12:41.580
if the indexed object is
actually not on array, then we

00:12:41.580 --> 00:12:44.860
go through the methods of it and
make sure that everything

00:12:44.860 --> 00:12:46.370
works as expected.

00:12:46.370 --> 00:12:52.270
KASPER LUND: And again, that's
because indexing into lists

00:12:52.270 --> 00:12:55.100
and collections in Dart is a
user-definable operator.

00:12:55.100 --> 00:12:58.490
So you can write your own
collection type that allows

00:12:58.490 --> 00:12:59.790
you to index into it.

00:12:59.790 --> 00:13:01.050
That's not possible
in something

00:13:01.050 --> 00:13:02.230
like JavaScript either.

00:13:02.230 --> 00:13:05.640
So we have to make use of the
JavaScript primitive indexing

00:13:05.640 --> 00:13:09.360
operation when we can, when we
know it's safe, or when we can

00:13:09.360 --> 00:13:11.720
generate essentially a two-code
pass where it's safe

00:13:11.720 --> 00:13:15.430
in one and maybe faster.

00:13:15.430 --> 00:13:18.690
Or we just do this bailout
version that will do the right

00:13:18.690 --> 00:13:19.900
thing, but be slower.

00:13:19.900 --> 00:13:23.120
So if you ever look at the
generated JavaScript, the

00:13:23.120 --> 00:13:25.990
output from the dart2js compiler
and find these

00:13:25.990 --> 00:13:28.410
slightly weird bailout methods,
that's the reason.

00:13:28.410 --> 00:13:31.530
It's because we're doing
speculative optimizations

00:13:31.530 --> 00:13:34.600
where we're not guaranteed
at compile time

00:13:34.600 --> 00:13:35.540
that this will hold.

00:13:35.540 --> 00:13:37.930
So we have to generate two
versions, essentially.

00:13:37.930 --> 00:13:40.180
One thing that many people
probably don't know is that,

00:13:40.180 --> 00:13:42.940
at least on certain JavaScript
VMs, at least the one's I'm

00:13:42.940 --> 00:13:46.460
intimately familiar with which
is mostly V8, there's actually

00:13:46.460 --> 00:13:49.810
a cost associated with passing
the wrong number of arguments.

00:13:49.810 --> 00:13:51.380
Passing too few is costly.

00:13:51.380 --> 00:13:53.120
Passing too many
is costly, too.

00:13:53.120 --> 00:13:56.490
It's not cost in the sense
that your program will be

00:13:56.490 --> 00:13:59.960
super, super slow if
you get it wrong.

00:13:59.960 --> 00:14:03.780
But just to make essentially the
sequences and instructions

00:14:03.780 --> 00:14:06.800
you have to execute to call
something and return efficient

00:14:06.800 --> 00:14:09.590
in the common case, it's heavily
optimized for the case

00:14:09.590 --> 00:14:12.130
where you pass exactly the right
number of arguments.

00:14:12.130 --> 00:14:15.210
So there's a good reason to
do that if you care about

00:14:15.210 --> 00:14:21.420
performance, especially for the
hot loops in your code.

00:14:21.420 --> 00:14:25.330
JJ BEHRENS: "Will dart2js be
able to output compressed

00:14:25.330 --> 00:14:28.130
minified JavaScript like the
Google Closure compiler in

00:14:28.130 --> 00:14:29.110
advanced mode?

00:14:29.110 --> 00:14:31.820
If it can compress properties,
it also has to create a

00:14:31.820 --> 00:14:34.750
property mapping text file
that could be used in web

00:14:34.750 --> 00:14:37.530
services JavaScript
serializers." Well, we get the

00:14:37.530 --> 00:14:40.200
first half of this question
a lot, don't we, Seth?

00:14:40.200 --> 00:14:40.890
SETH LADD: We do.

00:14:40.890 --> 00:14:43.310
And you could just see a patch
that landed very recently--

00:14:43.310 --> 00:14:44.610
dash, dash, minify.

00:14:44.610 --> 00:14:46.540
Tell us what happens when
you use that new

00:14:46.540 --> 00:14:47.380
command-line argument?

00:14:47.380 --> 00:14:49.030
KASPER LUND: So I can take
responsibility for the

00:14:49.030 --> 00:14:49.880
command-line argument.

00:14:49.880 --> 00:14:51.320
And Florian can take
responsibility for what

00:14:51.320 --> 00:14:52.490
happens when you use it.

00:14:52.490 --> 00:14:54.180
[LAUGHTER]

00:14:54.180 --> 00:14:56.810
KASPER LUND: The Minify option
is the answer to this

00:14:56.810 --> 00:14:57.960
question, essentially.

00:14:57.960 --> 00:15:01.700
Yes, we will be providing a
way of outputting minified

00:15:01.700 --> 00:15:03.700
compressed JavaScript output.

00:15:03.700 --> 00:15:07.750
And we will make good use of
the fact that we understand

00:15:07.750 --> 00:15:09.050
the program structure.

00:15:09.050 --> 00:15:12.460
And we'll use that to generate
really compact output.

00:15:12.460 --> 00:15:14.900
You could tell people what
happens if you use it.

00:15:14.900 --> 00:15:16.445
FLORIAN LOITSCH: So currently,
when you use dash, dash,

00:15:16.445 --> 00:15:19.360
minify, the only thing that
happens is that they are going

00:15:19.360 --> 00:15:22.520
to old unnecessary wide spacing,
and the produced

00:15:22.520 --> 00:15:24.660
methods is going
to be removed.

00:15:24.660 --> 00:15:29.110
So it's nothing much, but in our
benchmarks we were able to

00:15:29.110 --> 00:15:31.275
get down by 15%, maybe?

00:15:31.275 --> 00:15:31.670
KASPER LUND: Yeah.

00:15:31.670 --> 00:15:33.060
FLORIAN LOITSCH: And that's
just by removing

00:15:33.060 --> 00:15:35.080
all the wide spacing.

00:15:35.080 --> 00:15:37.860
In future versions, yes, we want
to have a nice minifier,

00:15:37.860 --> 00:15:41.015
and for us, it's definitely
easier than for a tool that

00:15:41.015 --> 00:15:45.880
runs after on our
generated code.

00:15:45.880 --> 00:15:49.150
So we will definitely have
something that will minify the

00:15:49.150 --> 00:15:54.660
names and the properties and the
cast names and everything.

00:15:54.660 --> 00:15:57.310
And when we do that, we
will provide that

00:15:57.310 --> 00:15:58.120
mapping text file.

00:15:58.120 --> 00:16:00.450
That shouldn't be difficult.

00:16:00.450 --> 00:16:03.330
And there's no reason
not to do it.

00:16:03.330 --> 00:16:04.710
SETH LADD: In fact, today
we're spitting out

00:16:04.710 --> 00:16:06.060
a source map file.

00:16:06.060 --> 00:16:07.520
We're not complete with
that feature yet.

00:16:07.520 --> 00:16:09.180
But it is going to
be part of this

00:16:09.180 --> 00:16:10.400
compilation and build step.

00:16:10.400 --> 00:16:14.370
And it'll allow you to take
minified or unminified

00:16:14.370 --> 00:16:18.340
JavaScript output, and through
the DevTools of Chrome, map it

00:16:18.340 --> 00:16:19.450
back to the original
Dart code.

00:16:19.450 --> 00:16:22.770
And it's a really cool
development workflow.

00:16:22.770 --> 00:16:25.630
JJ BEHRENS: So this question
isn't about dart2js, but it

00:16:25.630 --> 00:16:27.290
seems to be really popular.

00:16:27.290 --> 00:16:30.010
"Is there a public roadmap as to
when we can expect Dart to

00:16:30.010 --> 00:16:32.030
be ready for serious
deployment?

00:16:32.030 --> 00:16:35.620
I'm thinking about trying out
larger projects and riskily

00:16:35.620 --> 00:16:38.620
future proofing them
with Dart."

00:16:38.620 --> 00:16:41.330
KASPER LUND: I don't think we
have a public roadmap for when

00:16:41.330 --> 00:16:41.990
we're ready for that.

00:16:41.990 --> 00:16:44.880
Right now, we're very much
focused on delivering this

00:16:44.880 --> 00:16:48.590
first milestone release, where
we'll get all these new

00:16:48.590 --> 00:16:50.770
language features implemented
across the board so you can

00:16:50.770 --> 00:16:54.690
start relying on them
in the editor and

00:16:54.690 --> 00:16:56.300
dart2js and on the VM.

00:16:56.300 --> 00:16:58.640
So you can really start making
use of these new things.

00:16:58.640 --> 00:17:00.480
JJ BEHRENS: Yeah, it's
definitely been my experience

00:17:00.480 --> 00:17:04.650
that Dart is already a really,
really good tool for building

00:17:04.650 --> 00:17:08.760
web stuff and is a really
productive tool.

00:17:08.760 --> 00:17:10.369
But you have to understand
that you have to

00:17:10.369 --> 00:17:11.260
move with the times.

00:17:11.260 --> 00:17:16.500
We're not trying to be backwards
compatible ever

00:17:16.500 --> 00:17:17.520
since last October.

00:17:17.520 --> 00:17:19.300
We're always moving forward.

00:17:19.300 --> 00:17:22.024
And as long as you're willing to
move forward with us, then

00:17:22.024 --> 00:17:23.910
I think Dart's a really
productive tool.

00:17:23.910 --> 00:17:24.890
SETH LADD: And I should
say that Dart is

00:17:24.890 --> 00:17:25.890
an open source project.

00:17:25.890 --> 00:17:27.690
You can follow along on
our mailing list.

00:17:27.690 --> 00:17:29.520
You can follow along
on bug tracker.

00:17:29.520 --> 00:17:31.820
We publish updates
from the team.

00:17:31.820 --> 00:17:34.490
And so I would say certainly
give it a shot now.

00:17:34.490 --> 00:17:36.290
And if there's something
specific you're looking for,

00:17:36.290 --> 00:17:37.390
let us know on the
mailing list.

00:17:37.390 --> 00:17:39.940
And if you're considering it
for a big project, we would

00:17:39.940 --> 00:17:42.990
love to know what you're doing
and what your priorities are.

00:17:42.990 --> 00:17:45.050
JJ BEHRENS: So "as a web
language, Dart needs to

00:17:45.050 --> 00:17:47.440
interact with existing web
applications which use

00:17:47.440 --> 00:17:48.320
JavaScript.

00:17:48.320 --> 00:17:51.730
How does the dart2js compiler
enable interaction with legacy

00:17:51.730 --> 00:17:54.040
JavaScript code like
jQuery?" This is

00:17:54.040 --> 00:17:55.790
another popular question.

00:17:55.790 --> 00:17:57.020
KASPER LUND: It's actually
a very good question.

00:17:57.020 --> 00:17:59.680
So it's actually a very
difficult question.

00:17:59.680 --> 00:18:03.200
Because whatever we do, we want
to make sure that you

00:18:03.200 --> 00:18:07.220
have the same experience when
running dart2js and running on

00:18:07.220 --> 00:18:09.380
the Dart VM so that code
you write today

00:18:09.380 --> 00:18:12.090
will also run tomorrow.

00:18:12.090 --> 00:18:16.120
So right now, the JavaScript
interrupt that we have is

00:18:16.120 --> 00:18:17.700
fairly difficult to use.

00:18:17.700 --> 00:18:20.910
We have some examples on how
you can build simple things

00:18:20.910 --> 00:18:23.400
that interact with, for
instance, Google Maps and

00:18:23.400 --> 00:18:24.660
things like that.

00:18:24.660 --> 00:18:26.110
But it's somewhat painful.

00:18:26.110 --> 00:18:28.390
And we're spending some time on
trying to figure out if we

00:18:28.390 --> 00:18:33.290
can make it easier to use in a
way that still works both on

00:18:33.290 --> 00:18:35.880
the Dartium, Dart VM-enabled
Chromium

00:18:35.880 --> 00:18:37.720
builds, and on dart2js.

00:18:37.720 --> 00:18:39.330
SETH LADD: So we should talk
about one of things that makes

00:18:39.330 --> 00:18:42.280
this a really tough problem for
us, which is now that you

00:18:42.280 --> 00:18:45.600
have multiple run times in the
browser, you run into what we

00:18:45.600 --> 00:18:48.390
call a Distributed
GC situation.

00:18:48.390 --> 00:18:50.130
JJ BEHRENS: Garbage Collection,
Distributed

00:18:50.130 --> 00:18:51.370
Garbage Collection problems.

00:18:51.370 --> 00:18:52.580
That's a challenge.

00:18:52.580 --> 00:18:53.450
KASPER LUND: It's a big
challenge, right?

00:18:53.450 --> 00:18:59.240
So you essentially have at least
three different memory

00:18:59.240 --> 00:19:02.450
management systems
in the game.

00:19:02.450 --> 00:19:05.760
You have the system that governs
all the DOM notes in

00:19:05.760 --> 00:19:06.490
your web page.

00:19:06.490 --> 00:19:10.465
You have the JavaScript memory
manager, and you have the Dart

00:19:10.465 --> 00:19:11.100
memory manager.

00:19:11.100 --> 00:19:12.950
And they need to coordinate
things.

00:19:12.950 --> 00:19:17.830
And that may sound pretty easy,
but in reality, you want

00:19:17.830 --> 00:19:20.730
the garbage collectors in those
systems to be really,

00:19:20.730 --> 00:19:24.600
really efficient, incremental,
and give you essentially no

00:19:24.600 --> 00:19:26.970
pause times and just
great throughput.

00:19:26.970 --> 00:19:30.400
So combining that with a system
that tracks references

00:19:30.400 --> 00:19:33.020
between them is just very,
very difficult.

00:19:33.020 --> 00:19:35.890
So it's something that we're
trying to wrap our heads

00:19:35.890 --> 00:19:38.940
around how to approach
and how to solve.

00:19:38.940 --> 00:19:42.470
But it's certainly not an easy
task to get through that.

00:19:42.470 --> 00:19:44.910
JJ BEHRENS: "Can the work on
type propagation improve the

00:19:44.910 --> 00:19:47.440
code size and speed even
more in the future?

00:19:47.440 --> 00:19:50.340
We still see pretty huge chunks
of bailout code and

00:19:50.340 --> 00:19:53.900
type agnostic code generated,
which seems not necessary in

00:19:53.900 --> 00:19:56.410
many cases/" So we kind
of touched on this.

00:19:56.410 --> 00:19:57.030
FLORIAN LOITSCH: That's
an easy one.

00:19:57.030 --> 00:19:58.140
That's yes.

00:19:58.140 --> 00:19:59.080
Yes.

00:19:59.080 --> 00:20:01.220
PETER VON DER AHE: We
have only scratched

00:20:01.220 --> 00:20:03.350
the surface, I think.

00:20:03.350 --> 00:20:03.960
KASPER LUND: Yeah.

00:20:03.960 --> 00:20:07.360
So over the last month or two,
we've actually seen a lot of

00:20:07.360 --> 00:20:08.050
progress there.

00:20:08.050 --> 00:20:12.830
And I think this question refers
to the fact that it is

00:20:12.830 --> 00:20:15.300
improving a lot, but we still in
certain cases see a lot of

00:20:15.300 --> 00:20:16.660
things that could
get even better.

00:20:16.660 --> 00:20:19.870
And that's nice for us because
that will keep

00:20:19.870 --> 00:20:21.320
us busy for a while.

00:20:21.320 --> 00:20:24.380
But it's certainly something
we focus a lot on, like

00:20:24.380 --> 00:20:27.330
getting very good performance
out of the generated

00:20:27.330 --> 00:20:31.240
JavaScript code through type
propagations, type

00:20:31.240 --> 00:20:32.820
inferencing.

00:20:32.820 --> 00:20:35.860
There's a lot of work going
on in that area.

00:20:35.860 --> 00:20:37.650
FLORIAN LOITSCH: So the current
status is basically we

00:20:37.650 --> 00:20:40.770
have been really very good
in local type inference.

00:20:40.770 --> 00:20:43.710
So if there's a variable and
we know the type then we

00:20:43.710 --> 00:20:47.140
propagate this type and use
it even for speculative

00:20:47.140 --> 00:20:49.480
optimizations and things
like that.

00:20:49.480 --> 00:20:53.990
And recently, we started to
use types on arguments and

00:20:53.990 --> 00:20:58.000
return values and sometimes on
fields if they have been

00:20:58.000 --> 00:21:01.450
initialized only in specific
occasions, or not too often,

00:21:01.450 --> 00:21:02.740
and we can track it.

00:21:02.740 --> 00:21:07.010
But there is work on a global
type inference tool that will

00:21:07.010 --> 00:21:10.270
help to get much, much more
type information.

00:21:10.270 --> 00:21:11.760
At the moment, we have
type information

00:21:11.760 --> 00:21:13.620
produced by the code.

00:21:13.620 --> 00:21:16.330
JJ BEHRENS: So "what features
of the Mirrors API do you

00:21:16.330 --> 00:21:20.300
think will make it into dart2js
sooner than later?"

00:21:20.300 --> 00:21:21.740
PETER VON DER AHE:
Introspection.

00:21:21.740 --> 00:21:26.260
That's basically looking at the
program structure, but not

00:21:26.260 --> 00:21:28.910
modifying it.

00:21:28.910 --> 00:21:30.960
JJ BEHRENS: I've heard a lot of
people ask for this sort of

00:21:30.960 --> 00:21:35.560
thing, because frameworks like
AngularJS rely on reflection

00:21:35.560 --> 00:21:37.620
as a core feature of
how they work.

00:21:37.620 --> 00:21:40.360
And so I know that a lot of
people were interested in

00:21:40.360 --> 00:21:43.770
seeing reflection
in Dart as well.

00:21:43.770 --> 00:21:45.020
PETER VON DER AHE: Yeah.

00:21:47.130 --> 00:21:50.980
My take on that is that, yeah,
you can write a lot of

00:21:50.980 --> 00:21:55.390
frameworks like that, and you're
probably gonna end up

00:21:55.390 --> 00:21:59.710
feeling really clever when
you get it to work.

00:21:59.710 --> 00:22:01.600
But it's probably also
frustrating when it's not

00:22:01.600 --> 00:22:03.790
working for you because there's
a whole bunch of

00:22:03.790 --> 00:22:04.910
things going on, right?

00:22:04.910 --> 00:22:06.380
First you have--

00:22:06.380 --> 00:22:09.120
well, in AngularJS, I don't
know if they have--

00:22:09.120 --> 00:22:11.610
that's really a JavaScript
framework, right?

00:22:11.610 --> 00:22:12.980
It's not a language.

00:22:12.980 --> 00:22:15.770
So there's no compile
time step there.

00:22:15.770 --> 00:22:17.660
But we already have a
compile time step.

00:22:17.660 --> 00:22:20.400
So we should sort of take
advantage of that, and then

00:22:20.400 --> 00:22:22.110
check your program there,
and then generate

00:22:22.110 --> 00:22:23.140
some efficient code.

00:22:23.140 --> 00:22:25.300
JJ BEHRENS: Check for
static warnings.

00:22:25.300 --> 00:22:28.870
PETER VON DER AHE: Yeah, well,
we have a compile time step.

00:22:28.870 --> 00:22:33.280
So we should take advantage
of that and use that.

00:22:33.280 --> 00:22:35.420
But there's also--

00:22:35.420 --> 00:22:40.920
for us to put in all the
information that is required

00:22:40.920 --> 00:22:44.720
to do introspection or modifying
the program, then we

00:22:44.720 --> 00:22:48.180
also have to follow those
convent-- so that when we

00:22:48.180 --> 00:22:51.830
extend the program, the code we
have already generated has

00:22:51.830 --> 00:22:55.280
to be compatible with
how it's extended.

00:22:55.280 --> 00:22:59.660
So all of a sudden, reflection
can have an impact on how we

00:22:59.660 --> 00:23:01.280
generate code.

00:23:01.280 --> 00:23:04.500
So the first cut is prob--

00:23:04.500 --> 00:23:06.990
that's why we have designed the
mirror system as it is.

00:23:06.990 --> 00:23:08.620
It's basically--

00:23:08.620 --> 00:23:10.720
it's a capability that
you request.

00:23:10.720 --> 00:23:13.440
In this case, it would be
by importing a library.

00:23:13.440 --> 00:23:15.700
If you import this library, that
may have to change how we

00:23:15.700 --> 00:23:16.875
generate code.

00:23:16.875 --> 00:23:18.690
FLORIAN LOITSCH: So just to
give some examples of what

00:23:18.690 --> 00:23:21.140
changes would be needed.

00:23:21.140 --> 00:23:24.680
If we mangled the feed name or
if we mangled the cast names,

00:23:24.680 --> 00:23:27.860
well, then we would need to ship
some information to be

00:23:27.860 --> 00:23:29.640
able to get back from
the mangled name to

00:23:29.640 --> 00:23:31.220
the original name.

00:23:31.220 --> 00:23:34.600
Similarly, if you are actually
allowed to change, if you add

00:23:34.600 --> 00:23:39.780
a new codes to your reflection,
we cannot tree

00:23:39.780 --> 00:23:42.390
shake anymore because you
might call a method that

00:23:42.390 --> 00:23:43.680
wasn't called before.

00:23:43.680 --> 00:23:46.160
KASPER LUND: A request for
feedback from anybody watching

00:23:46.160 --> 00:23:47.570
this that's interested
in introspection.

00:23:47.570 --> 00:23:50.290
And we love to get use case on
what kind of things you would

00:23:50.290 --> 00:23:53.460
like to see there and which
parts of the introspection

00:23:53.460 --> 00:23:54.520
APIs are you using.

00:23:54.520 --> 00:23:57.980
And then we can start to think
about whether or not it's

00:23:57.980 --> 00:24:01.290
realistic to get that rolled
into dart2js in the

00:24:01.290 --> 00:24:03.110
not-too-distant future.

00:24:03.110 --> 00:24:04.830
JJ BEHRENS: So "will it be
possible to write a new

00:24:04.830 --> 00:24:08.210
library in Dart that could be
used either by Dart or plain

00:24:08.210 --> 00:24:10.080
JavaScript?"

00:24:10.080 --> 00:24:11.250
KASPER LUND: So it's certainly
something we

00:24:11.250 --> 00:24:13.700
would like to see happen.

00:24:13.700 --> 00:24:16.890
For us, we think that it's--

00:24:16.890 --> 00:24:19.260
at least for certain things,
components you want to write,

00:24:19.260 --> 00:24:21.270
it's more efficient to write
them in Dart than it is in

00:24:21.270 --> 00:24:21.760
JavaScript.

00:24:21.760 --> 00:24:25.280
So if we could allow you to do
that for certain components in

00:24:25.280 --> 00:24:27.940
your big project and just use
them for other JavaScript

00:24:27.940 --> 00:24:30.180
things, it would be
kind of neat.

00:24:30.180 --> 00:24:32.350
It's something we're looking
at doing for the web

00:24:32.350 --> 00:24:34.260
components work we're doing.

00:24:34.260 --> 00:24:36.520
It would be very, very cool if
you could take a web component

00:24:36.520 --> 00:24:39.420
that has behavior written
in Dart, compile it to

00:24:39.420 --> 00:24:42.330
JavaScript, and use it
from any web page.

00:24:42.330 --> 00:24:43.670
It's certainly something
we'd like to see.

00:24:43.670 --> 00:24:46.480
So it's a great question, and
hopefully, we'll be able to

00:24:46.480 --> 00:24:49.260
answer it with a, yes, let's
do it, very soon.

00:24:49.260 --> 00:24:50.820
JJ BEHRENS: And then last one.

00:24:50.820 --> 00:24:54.110
"If GWT can compile JavaScript
to run on Android browsers,

00:24:54.110 --> 00:24:56.150
then why can't Dart?" I think
I've been hearing some

00:24:56.150 --> 00:25:00.830
complaints that the JavaScript
doesn't work

00:25:00.830 --> 00:25:02.740
on the Android browser.

00:25:02.740 --> 00:25:04.010
FLORIAN LOITSCH: Committed
today.

00:25:04.010 --> 00:25:04.720
JJ BEHRENS: Oh, committed.

00:25:04.720 --> 00:25:06.140
FLORIAN LOITSCH: I just
committed a fix for the

00:25:06.140 --> 00:25:08.262
obvious syntax problem.

00:25:08.262 --> 00:25:14.980
I'm expecting to hear other bugs
that show me other maybe

00:25:14.980 --> 00:25:15.710
different problems.

00:25:15.710 --> 00:25:17.650
But it should work.

00:25:17.650 --> 00:25:22.420
At least the syntax that was
really making it impossible to

00:25:22.420 --> 00:25:26.670
run on Android processes
has been fixed.

00:25:26.670 --> 00:25:27.540
KASPER LUND: And actually that's
another place where we

00:25:27.540 --> 00:25:29.590
got a nice patch from an
external contributor.

00:25:29.590 --> 00:25:31.500
That was kind of nice.

00:25:31.500 --> 00:25:33.900
JJ BEHRENS: I would also say
if you could run Chrome for

00:25:33.900 --> 00:25:37.970
your phone, it's a
nice experience.

00:25:37.970 --> 00:25:40.310
FLORIAN LOITSCH: But to actually
answer the question,

00:25:40.310 --> 00:25:43.230
why can GWT compile,
and why can't we?

00:25:43.230 --> 00:25:46.230
Because they spent a huge amount
of resources doing it.

00:25:46.230 --> 00:25:48.030
KASPER LUND: It's always a
matter of prioritization.

00:25:48.030 --> 00:25:50.000
So it's great when we get
feedback from people that say

00:25:50.000 --> 00:25:52.380
I would really use this if it
worked on Android browsers.

00:25:52.380 --> 00:25:53.740
It's something we can use.

00:25:53.740 --> 00:25:57.080
And we can think about whether
or not it makes sense to put

00:25:57.080 --> 00:25:59.390
in the extra effort
to make it run.

00:25:59.390 --> 00:26:02.360
JJ BEHRENS: When I compile my
Dart code to JavaScript using

00:26:02.360 --> 00:26:04.990
dart2js, it doesn't really
work in Lynx,

00:26:04.990 --> 00:26:06.860
my text-based browser.

00:26:06.860 --> 00:26:07.610
KASPER LUND: I don't think
you've tried it.

00:26:07.610 --> 00:26:08.870
It actually works just fine.

00:26:08.870 --> 00:26:09.832
JJ BEHRENS: Does it, really?

00:26:09.832 --> 00:26:10.816
KASPER LUND: No.

00:26:10.816 --> 00:26:13.770
[LAUGHTER]

00:26:13.770 --> 00:26:16.600
JJ BEHRENS: So thank you guys
for all your time today.

00:26:16.600 --> 00:26:18.540
It's been a great show.

00:26:18.540 --> 00:26:21.580
And I think we will see you
guys back when Seth and I

00:26:21.580 --> 00:26:22.590
return to California.

00:26:22.590 --> 00:26:25.760
And we'll do our next episode
in two weeks.

00:26:25.760 --> 00:26:26.085
SETH LADD: Absolutely.

00:26:26.085 --> 00:26:27.820
And thanks for watching
Dartisans.

00:26:27.820 --> 00:26:31.120
You can find the Dart project
at dartlang.org.

00:26:31.120 --> 00:26:35.800
Do join our mailing list at
dartlang.org/mailing-list.

00:26:35.800 --> 00:26:38.870
And we have bug tracker
at dartbug.com.

00:26:38.870 --> 00:26:41.770
Lots of good ways to get in
touch with us, and we're

00:26:41.770 --> 00:26:42.920
always looking for feedback.

00:26:42.920 --> 00:26:45.110
I mean, we certainly prioritize
things based on

00:26:45.110 --> 00:26:45.830
what we hear.

00:26:45.830 --> 00:26:47.170
We've taken external patches.

00:26:47.170 --> 00:26:48.870
It's a really cool open
source project.

00:26:48.870 --> 00:26:51.310
And so please do let us know
what you're using Dart for and

00:26:51.310 --> 00:26:52.660
what you need it to do.

00:26:52.660 --> 00:26:55.060
JJ BEHRENS: Goodbye from
[SPEAKING DANISH].

00:26:55.060 --> 00:27:00.760
[ALL SPEAKING DANISH]

00:27:00.760 --> 00:27:08.192
[MUSIC PLAYING]

