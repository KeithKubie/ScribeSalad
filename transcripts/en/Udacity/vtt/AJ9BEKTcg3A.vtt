WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.060
We now have the tools to
encrypt data asymmetrically

00:00:03.060 --> 00:00:04.560
and to assign data.

00:00:04.559 --> 00:00:06.629
I've said these are the
building blocks of QLS.

00:00:06.629 --> 00:00:08.550
And now I will prove it to you.

00:00:08.550 --> 00:00:10.440
Let's go through the
process of browser users

00:00:10.439 --> 00:00:13.259
to set up a TLS-encrypted
connection step by step.

00:00:13.259 --> 00:00:15.629
I will still cut a few
corners for simplicity,

00:00:15.630 --> 00:00:18.640
but nothing integral
to the concept.

00:00:18.640 --> 00:00:21.789
The first step is having the
server send you a certificate.

00:00:21.789 --> 00:00:23.710
The certificate
contains the public key

00:00:23.710 --> 00:00:25.570
of the server, some
additional information

00:00:25.570 --> 00:00:27.850
like the domain the
certificate is for

00:00:27.850 --> 00:00:31.390
and the signature by a
certificate authority.

00:00:31.390 --> 00:00:34.840
The client checks if the domain
is correct and also checks

00:00:34.840 --> 00:00:37.340
if the authority
signature is valid.

00:00:37.340 --> 00:00:40.150
As we already explored
earlier, all browsers

00:00:40.149 --> 00:00:42.609
have a collection of certificate
authorities including

00:00:42.609 --> 00:00:46.089
their public keys saved locally,
so it is trivial to check

00:00:46.090 --> 00:00:48.320
if the signature is valid.

00:00:48.320 --> 00:00:50.350
Now the client
generates a random key

00:00:50.350 --> 00:00:53.620
for symmetric encryption
to be used from here on in.

00:00:53.619 --> 00:00:56.919
The browser encrypts the random
key with a server's public key

00:00:56.920 --> 00:00:58.270
and sends it over.

00:00:58.270 --> 00:00:59.800
This has two benefits.

00:00:59.799 --> 00:01:02.469
Symmetric encryption is
much faster, more efficient,

00:01:02.469 --> 00:01:04.480
and scales better
to big data compared

00:01:04.480 --> 00:01:06.100
to asymmetric encryption.

00:01:06.099 --> 00:01:08.530
But more importantly,
the server will only

00:01:08.530 --> 00:01:11.079
be able to continue
communicating if it is truly

00:01:11.079 --> 00:01:13.120
in possession of the
private key and can

00:01:13.120 --> 00:01:15.250
decrypt the new random key.

00:01:15.250 --> 00:01:18.549
This effectively validates
the server's identity.

00:01:18.549 --> 00:01:21.099
If all of this succeeds,
if your last connection has

00:01:21.099 --> 00:01:23.649
successfully been established
and the AGP protocol

00:01:23.650 --> 00:01:25.840
can take over, at
this point, you

00:01:25.840 --> 00:01:27.370
will get the green
padlock symbol

00:01:27.370 --> 00:01:29.670
in your browser's URL bar.

