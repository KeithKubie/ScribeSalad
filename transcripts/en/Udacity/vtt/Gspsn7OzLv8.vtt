WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.790
And we are going to kick this off with a little quiz.

00:00:02.790 --> 00:00:10.510
So let's assume that we have an algorithm with a running time of 2^n  n², not O(2^n)n²,

00:00:10.510 --> 00:00:12.850
but really 2^n  n².

00:00:12.850 --> 00:00:17.170
You can add any constant you wan if that makes you happy but not so the point of this quiz here.

00:00:17.170 --> 00:00:21.090
And now we're going to look at an algorithm that is 10 times faster,

00:00:21.090 --> 00:00:26.630
so it has a running time of 2^n&lt;i&gt;n²/10.&lt;/i&gt;

00:00:26.630 --> 00:00:32.910
And if you think about it, finding an algorithm that is 10 times faster is actually huge in practice.

00:00:32.910 --> 00:00:36.060
So imagine for example that whenever you start your computer,

00:00:36.060 --> 00:00:39.760
it would start 10 times faster than it does now--a huge improvement,

00:00:39.760 --> 00:00:43.070
but what I now want to show you is that such a huge improvement

00:00:43.070 --> 00:00:47.330
is virtually useless when you're dealing with exponential time.

00:00:47.330 --> 00:00:51.960
So assume for example that for this algorithm here, we have a computer

00:00:51.960 --> 00:00:58.280
where the maximum input size that it can handle is 30, what I would like to know from you now

00:00:58.280 --> 00:01:04.900
is if we run this algorithm which is 10 times faster, huge improvement on the same machine

00:01:04.900 --> 00:01:07.960
what is the maximum input size we can handle then.

00:01:07.960 --> 99:59:59.000
And I would like you to give me your answer here in this box.

