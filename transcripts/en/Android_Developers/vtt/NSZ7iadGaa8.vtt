WEBVTT
Kind: captions
Language: en

00:00:05.390 --> 00:00:09.820
CHET HAASE: Hello and welcome
to the Android Fireside Chat,

00:00:09.820 --> 00:00:11.650
another edition of this thing.

00:00:11.650 --> 00:00:14.440
You will notice that there are
a lot of people onstage up here.

00:00:14.440 --> 00:00:18.090
This is probably the most
they have for any session ever

00:00:18.090 --> 00:00:21.310
at I/O. In fact, it's so
many that we're in danger

00:00:21.310 --> 00:00:22.630
of violating the fire code.

00:00:22.630 --> 00:00:26.350
We may need to ask
the audience to leave.

00:00:26.350 --> 00:00:29.140
We're going to do a
seriously quick introduction

00:00:29.140 --> 00:00:31.060
of the people on stage,
so you get an idea of,

00:00:31.060 --> 00:00:33.940
A, who they are, B, more
importantly, what they actually

00:00:33.940 --> 00:00:37.240
do and what answers they may
actually be able to provide.

00:00:37.240 --> 00:00:38.786
Starting with me,
I'm just the emcee.

00:00:38.786 --> 00:00:39.410
I don't matter.

00:00:39.410 --> 00:00:39.909
I'm Chet.

00:00:39.909 --> 00:00:40.540
Brian, go.

00:00:40.540 --> 00:00:41.915
BRIAN KARLSTROM:
Brian Karlstrom,

00:00:41.915 --> 00:00:44.626
programming languages, Java,
[INAUDIBLE] host, and Kotlin.

00:00:44.626 --> 00:00:48.031
WALLE: Walle, windows
and activities.

00:00:48.031 --> 00:00:50.760
RASHAD: Rashad, Android media.

00:00:50.760 --> 00:00:52.975
TOR NORBYE: Tor
Norbye, Android Studio.

00:00:52.975 --> 00:00:54.890
ROMAIN GUY: Romain
Guy, graphics.

00:00:54.890 --> 00:00:57.486
XAVIER DUCROHET: Xavier
Ducrohet, developer tools.

00:00:57.486 --> 00:00:59.520
DAN SANDLER: Dan
Sandler, system UI.

00:00:59.520 --> 00:01:01.810
RACHEL GARB: Rachel
Garb, user experience.

00:01:01.810 --> 00:01:04.252
BEN POLESZ: Ben
Polesz, framework.

00:01:04.252 --> 00:01:08.581
AURASH MAHBOD: Aurash Mahbod,
PlayStore app and Android apps.

00:01:08.581 --> 00:01:10.960
TOM KINCH: Tom Kinch,
Android Tech Support, Library

00:01:10.960 --> 00:01:12.540
and Espresso.

00:01:12.540 --> 00:01:15.680
SPEAKER 1: [INAUDIBLE],
Android Security.

00:01:15.680 --> 00:01:18.580
TIM MURRAY: Tim Murray,
Android Performance.

00:01:18.580 --> 00:01:21.850
STEPHANIE CUTHBERTSON: Steph
Cuthbertson, Android IDEs

00:01:21.850 --> 00:01:23.302
and frameworks.

00:01:23.302 --> 00:01:25.355
DAVE BURKE: Dave Burke,
pure Android overhead.

00:01:27.785 --> 00:01:30.895
YIGIT BOYAR: Yigit Boyar,
architecture components.

00:01:30.895 --> 00:01:32.270
MAXIM SHAFIROV:
I'm a guest here.

00:01:32.270 --> 00:01:33.230
I'm from JetBrains.

00:01:33.230 --> 00:01:34.780
I'm CEO of JetBrains,
Maxim Shafirov.

00:01:34.780 --> 00:01:41.374
[APPLAUSE]

00:01:41.374 --> 00:01:43.365
ADAM POWELL: Adam
Powell, framework.

00:01:43.365 --> 00:01:46.625
MIKE CLERON: Mike Cleron,
lesser Android overhead.

00:01:46.625 --> 00:01:48.000
DIANNE HACKBORN:
Dianne Hackborn,

00:01:48.000 --> 00:01:49.083
manage the framework team.

00:01:49.083 --> 00:01:51.360
CHET HAASE: All right,
so everybody got that?

00:01:51.360 --> 00:01:52.580
Excellent.

00:01:52.580 --> 00:01:54.480
Moving on, we have a
few slides to cover

00:01:54.480 --> 00:01:57.330
a little bit of content before
we get into the meat of it.

00:01:57.330 --> 00:02:01.440
So-- no, actually
let's just get into it.

00:02:01.440 --> 00:02:03.270
So here's the way it works.

00:02:03.270 --> 00:02:05.640
I'll ask a couple, so you
understand what this is.

00:02:05.640 --> 00:02:08.460
You're going to ask questions,
and we're going to--

00:02:08.460 --> 00:02:09.660
we may evade the answers.

00:02:09.660 --> 00:02:10.486
We don't know.

00:02:10.486 --> 00:02:11.610
It depends on what you ask.

00:02:11.610 --> 00:02:13.950
The ground rule is we don't
really talk about-- no,

00:02:13.950 --> 00:02:15.716
we don't talk about futures.

00:02:15.716 --> 00:02:17.340
So if you say, yeah,
but what is Google

00:02:17.340 --> 00:02:19.710
going to do a year
from now on this thing?

00:02:19.710 --> 00:02:22.170
Then we will say, thank
you for the question.

00:02:22.170 --> 00:02:24.090
Would somebody else
like to ask one?

00:02:24.090 --> 00:02:27.944
Just so you know, when we
say that, there's a reason.

00:02:27.944 --> 00:02:30.360
But I will show you how this
works for a couple of things.

00:02:30.360 --> 00:02:35.170
So we trolled Twitter and G
Plus to get some questions, sort

00:02:35.170 --> 00:02:36.930
of pre-roll some
topics, just to find out

00:02:36.930 --> 00:02:39.055
what the community would
like to know about, people

00:02:39.055 --> 00:02:40.530
that weren't necessarily here.

00:02:40.530 --> 00:02:43.080
One of the things that came up--

00:02:43.080 --> 00:02:45.990
I will summarize the
several comments on Twitter

00:02:45.990 --> 00:02:48.360
that essentially
came down to what

00:02:48.360 --> 00:02:52.471
about adopting Kotlin as
a language for Android?

00:02:52.471 --> 00:02:52.971
Check.

00:02:57.236 --> 00:02:58.998
MAXIM SHAFIROV: Done.

00:02:58.998 --> 00:03:00.934
[LAUGHTER]

00:03:00.934 --> 00:03:08.678
[APPLAUSE]

00:03:08.678 --> 00:03:10.990
CHET HAASE: All right, here's
another one that came up.

00:03:10.990 --> 00:03:13.280
A few different comments
phrased in different ways,

00:03:13.280 --> 00:03:16.130
but essentially boils down
to a two-part question.

00:03:16.130 --> 00:03:19.400
How does Fuchsia
relate to Android?

00:03:19.400 --> 00:03:22.050
Dave?

00:03:22.050 --> 00:03:24.920
DAVE BURKE: How do
you spell Fuchsia?

00:03:24.920 --> 00:03:28.850
Fuchsia is early stage,
experimental project.

00:03:28.850 --> 00:03:31.430
We actually have lots of cool
early projects at Google.

00:03:31.430 --> 00:03:33.830
I think what's interesting
here is it's open source.

00:03:33.830 --> 00:03:36.050
So people can see it
and comment on it.

00:03:36.050 --> 00:03:38.570
Like lots of early
stage projects,

00:03:38.570 --> 00:03:41.422
it's going to probably
pivot and morph.

00:03:41.422 --> 00:03:43.130
There are some really
smart people on it,

00:03:43.130 --> 00:03:45.500
people we've worked
with who are great,

00:03:45.500 --> 00:03:49.260
and so we're kind of
exciting to see what happens.

00:03:49.260 --> 00:03:53.970
But it's definitely an
independent project to Android.

00:03:53.970 --> 00:03:55.812
Yeah, that's basically it.

00:03:55.812 --> 00:03:57.030
CHET HAASE: Thank you.

00:03:57.030 --> 00:04:01.710
OK, we're going to ask another
question here, but we could--

00:04:01.710 --> 00:04:03.210
multi-process this thing.

00:04:03.210 --> 00:04:04.830
People should be
lining up at the mics

00:04:04.830 --> 00:04:06.990
if they want to ask
questions, and if nobody

00:04:06.990 --> 00:04:09.030
wants to ask questions,
it's fine by us.

00:04:09.030 --> 00:04:11.430
The session will end very early.

00:04:11.430 --> 00:04:16.170
So second part of two-part
question for Mike.

00:04:16.170 --> 00:04:18.380
How does Flutter
relate to Android?

00:04:18.380 --> 00:04:20.670
MIKE CLERON: Well, let's
see, we have pretty much

00:04:20.670 --> 00:04:22.500
the entire Android team.

00:04:22.500 --> 00:04:25.050
What do you all think is the
best framework for Android?

00:04:25.050 --> 00:04:25.669
Is it Android?

00:04:25.669 --> 00:04:26.710
DIANNE HACKBORN: Usually.

00:04:26.710 --> 00:04:32.400
MIKE CLERON: Yeah, so we kind
of like our own stuff, but the--

00:04:32.400 --> 00:04:34.680
Android has always
been pretty open.

00:04:34.680 --> 00:04:37.300
It's our core principle.

00:04:37.300 --> 00:04:42.120
So the better answer is
use whatever works for you.

00:04:42.120 --> 00:04:44.400
We try to make stuff
that works for you.

00:04:44.400 --> 00:04:45.450
We hope you like it.

00:04:45.450 --> 00:04:46.491
We hope you use it.

00:04:46.491 --> 00:04:47.490
If you do, that's great.

00:04:47.490 --> 00:04:49.680
If you find something
that you like better,

00:04:49.680 --> 00:04:52.481
then that is just
something to shoot for.

00:04:52.481 --> 00:04:54.730
CHET HAASE: All right, we
have people at the mics now.

00:04:54.730 --> 00:04:58.795
So why don't we go to a
mic over on the left there.

00:04:58.795 --> 00:05:02.675
AUDIENCE: My question is, for people that are starting with Android,

00:05:02.675 --> 00:05:05.585
do you recommend them to use Kotlin or Java?

00:05:09.950 --> 00:05:13.420
STEPHANIE CUTHBERTSON:
Great question.

00:05:13.420 --> 00:05:17.230
I think one of the things
we made clear in the keynote

00:05:17.230 --> 00:05:19.450
and we are trying
to say very clearly

00:05:19.450 --> 00:05:23.050
is we are embracing Kotlin.

00:05:23.050 --> 00:05:25.710
Someone can hug Max
there if you want.

00:05:25.710 --> 00:05:26.590
Yeah, hug Max.

00:05:26.590 --> 00:05:28.600
We're embracing Kotlin, embrace.

00:05:28.600 --> 00:05:30.520
But we're also doubling
down simultaneously

00:05:30.520 --> 00:05:33.754
on our existing
languages, and we're

00:05:33.754 --> 00:05:35.920
very open about that in the
keynote with investments

00:05:35.920 --> 00:05:39.760
in, for instance, Java
8 language features.

00:05:39.760 --> 00:05:42.600
Lambdas are my personal
favorite in Java C Compiler.

00:05:42.600 --> 00:05:46.360
We also made extensive
improvements in APIs.

00:05:46.360 --> 00:05:48.850
Again, the Java.time API
is my personal favorite,

00:05:48.850 --> 00:05:51.280
and there was a phalanx
of improvements there.

00:05:51.280 --> 00:05:53.890
We also made extensive
improvements in C++,

00:05:53.890 --> 00:05:57.550
and you'll continue to see
investment in Kotlin and also

00:05:57.550 --> 00:05:59.750
investment in our existing
programming languages.

00:05:59.750 --> 00:06:01.660
In fact, very
specifically Dave has

00:06:01.660 --> 00:06:05.000
increased the size of the
teams in all of those areas.

00:06:05.000 --> 00:06:06.550
So it's not an either/or for us.

00:06:06.550 --> 00:06:08.320
It truly is an and.

00:06:08.320 --> 00:06:10.150
So we really do believe
that for developers

00:06:10.150 --> 00:06:12.350
who want to stay with the
Java programming language,

00:06:12.350 --> 00:06:13.474
it is a wonderful language.

00:06:13.474 --> 00:06:16.360
I've told people when
I studied CS at Brown,

00:06:16.360 --> 00:06:19.610
it was the first language that
I learned and it is wonderful.

00:06:19.610 --> 00:06:23.200
That said, for those who
would like to try Kotlin,

00:06:23.200 --> 00:06:25.510
it is quite a beautiful
language, and a lot of us

00:06:25.510 --> 00:06:27.975
here have tried it and
think it's quite wonderful.

00:06:30.880 --> 00:06:32.640
CHET HAASE: So if
I could rephrase,

00:06:32.640 --> 00:06:35.035
that was either one should work.

00:06:35.035 --> 00:06:36.984
Is that--

00:06:36.984 --> 00:06:38.900
[APPLAUSE]

00:06:38.900 --> 00:06:40.770
Did I catch the essence of that?

00:06:40.770 --> 00:06:42.300
You could try either one, yeah.

00:06:44.352 --> 00:06:46.560
I'm sorry, you want to find
some more words for that,

00:06:46.560 --> 00:06:48.615
we could-- go ahead,
go ahead, go ahead.

00:06:48.615 --> 00:06:50.948
STEPHANIE CUTHBERTSON: It's
a good thing they cut me off

00:06:50.948 --> 00:06:53.012
in the keynote, huh?

00:06:53.012 --> 00:06:54.720
CHET HAASE: All right,
I think we got it.

00:06:54.720 --> 00:06:55.940
Thank you.

00:06:55.940 --> 00:06:57.136
Let's go over there.

00:06:57.136 --> 00:06:59.864
AUDIENCE: We've heard a lot at I/O about features

00:06:59.864 --> 00:07:03.088
like the new Assistant and similar

00:07:03.088 --> 00:07:05.816
that require turning on location history and search history

00:07:05.816 --> 00:07:09.040
and a lot of other data collections,

00:07:09.040 --> 00:07:11.520
what are the options or alternatives

00:07:11.520 --> 00:07:14.000
for people that want those capabilities

00:07:14.000 --> 00:07:16.480
that want to maintain their privacy

00:07:16.480 --> 00:07:17.968
and not report a ton of history?

00:07:22.432 --> 00:07:27.050
CHET HAASE: You could turn it
on on your friend's devices.

00:07:27.050 --> 00:07:27.920
Otherwise--

00:07:31.222 --> 00:07:32.680
BEN POLESZ: To be
perfectly honest,

00:07:32.680 --> 00:07:34.540
we're not on those
teams, so that's

00:07:34.540 --> 00:07:36.610
why we're kind of
looking at each other.

00:07:36.610 --> 00:07:38.860
We do really think that
privacy is a control that you

00:07:38.860 --> 00:07:41.318
should have, and you still have
that in all these services.

00:07:41.318 --> 00:07:42.940
I think you're asking
for those teams

00:07:42.940 --> 00:07:45.670
to support the new services
they're introducing

00:07:45.670 --> 00:07:48.467
and then not require location
history or other things.

00:07:48.467 --> 00:07:50.050
Part of what makes
those features good

00:07:50.050 --> 00:07:52.600
is to use those services.

00:07:52.600 --> 00:07:55.090
If they're having a chat
of their own like this,

00:07:55.090 --> 00:07:57.270
I would ask you to ask them.

00:07:57.270 --> 00:07:59.666
But we are ensuring that
you always have the choice.

00:07:59.666 --> 00:08:01.540
It may not be the choice
that you necessarily

00:08:01.540 --> 00:08:03.974
want of fine-grained
choices within,

00:08:03.974 --> 00:08:05.890
but we do think you
should have the visibility

00:08:05.890 --> 00:08:08.802
to know what's on and
have a control in the OS

00:08:08.802 --> 00:08:10.010
to turn it on or turn it off.

00:08:13.642 --> 00:08:16.196
CHET HAASE: Next, you, sir.

00:08:16.196 --> 00:08:19.154
AUDIENCE: Could you tell what you're doing

00:08:19.154 --> 00:08:22.112
at a high level [with Treble]

00:08:22.112 --> 00:08:25.070
to ensure that the implementation

00:08:25.070 --> 00:08:27.535
from some of the OEM partners don't break,

00:08:27.535 --> 00:08:31.972
either intentionally or not,

00:08:31.972 --> 00:08:33.944
some of the things

00:08:33.944 --> 00:08:39.860
you're going to do

00:08:39.860 --> 00:08:43.064
in bringing forth new versions of the OS?

00:08:52.890 --> 00:08:56.730
 

00:08:56.730 --> 00:09:00.570
DAVE BURKE: Yeah,
so I actually did

00:09:00.570 --> 00:09:03.720
have Project Treble
as part of my keynote,

00:09:03.720 --> 00:09:06.460
but we didn't have
enough time, number one.

00:09:06.460 --> 00:09:10.840
Number two is it's a very device
manufacturer focused project.

00:09:10.840 --> 00:09:14.010
And so we thought we might
bore you all a little bit.

00:09:14.010 --> 00:09:17.487
But since you've asked,
I can bore you now.

00:09:17.487 --> 00:09:18.570
Bring up the teleprompter.

00:09:18.570 --> 00:09:20.250
No, I'm joking.

00:09:20.250 --> 00:09:22.559
So Project Treble--
actually if you

00:09:22.559 --> 00:09:24.600
ask a lot of people around
here who worked on it,

00:09:24.600 --> 00:09:27.340
they'll tell you it was
a huge amount of work,

00:09:27.340 --> 00:09:28.770
and they're still angry at me.

00:09:28.770 --> 00:09:30.000
Rashad is nodding his head.

00:09:30.000 --> 00:09:33.780
He's so pissed off because
the amount of work that went

00:09:33.780 --> 00:09:35.130
into media framework was huge.

00:09:35.130 --> 00:09:38.130
But basically what we did was
we created a foundation layer

00:09:38.130 --> 00:09:40.110
to Android, a very formal--

00:09:40.110 --> 00:09:43.560
we call vendor
interface, and it's

00:09:43.560 --> 00:09:45.540
analogous to the Developer API.

00:09:45.540 --> 00:09:47.130
So today we have
Developer API and we

00:09:47.130 --> 00:09:48.806
have CTS test to test it.

00:09:48.806 --> 00:09:50.430
The idea being you
write an application

00:09:50.430 --> 00:09:51.841
that runs on any hardware.

00:09:51.841 --> 00:09:54.090
We've introduced a new vendor
interface at the bottom.

00:09:54.090 --> 00:09:56.100
Everything south of
the vendor interface

00:09:56.100 --> 00:09:59.430
is silicon specific
and hardware specific.

00:09:59.430 --> 00:10:03.630
And then we have VTS tests that
test that vendor interface.

00:10:03.630 --> 00:10:05.970
So the idea is
when the P release

00:10:05.970 --> 00:10:08.670
comes along, if you're a
device maker, you take P

00:10:08.670 --> 00:10:11.580
and it will run on top of
your vendor implementation

00:10:11.580 --> 00:10:14.860
from today's O device
that you build, say.

00:10:14.860 --> 00:10:17.010
And the whole reason
for that is we

00:10:17.010 --> 00:10:20.400
want to make it easier and
faster for device makers

00:10:20.400 --> 00:10:23.640
to update devices,
because if it's faster,

00:10:23.640 --> 00:10:25.230
they'll get updates
out more quickly.

00:10:25.230 --> 00:10:27.870
If it costs less,
they'll do more updates.

00:10:27.870 --> 00:10:29.430
So that's the whole
premise of it.

00:10:29.430 --> 00:10:30.900
It's a huge, huge change.

00:10:30.900 --> 00:10:32.139
We have a very formal layer.

00:10:32.139 --> 00:10:33.180
I can talk about it more.

00:10:33.180 --> 00:10:36.060
But one of the things
that kind of-- it's

00:10:36.060 --> 00:10:37.242
kind of analogous to Kotlin.

00:10:37.242 --> 00:10:39.450
With Kotlin, like last year,
somebody grabbed the mic

00:10:39.450 --> 00:10:41.100
and said, hey, can
we have Kotlin?

00:10:41.100 --> 00:10:44.070
And everyone put their hands
up, and so we gave you Kotlin.

00:10:44.070 --> 00:10:47.370
Treble, you ask, we deliver.

00:10:49.400 --> 00:10:50.860
Not really.

00:10:50.860 --> 00:10:53.730
For Treble, it was actually
the silicon vendors

00:10:53.730 --> 00:10:56.220
and the device makers
who were asking us,

00:10:56.220 --> 00:10:57.902
how do you reduce the cost?

00:10:57.902 --> 00:10:59.860
Because today when you
build an Android device,

00:10:59.860 --> 00:11:01.734
a lot of the silicon
and device specific code

00:11:01.734 --> 00:11:04.086
is intermixed with a
framework and the core OS.

00:11:04.086 --> 00:11:06.210
And then every time we
change the operating system,

00:11:06.210 --> 00:11:07.459
they have to rework that code.

00:11:07.459 --> 00:11:09.980
And so they asked us how
can we make it better.

00:11:09.980 --> 00:11:11.640
And so we came up with treble.

00:11:11.640 --> 00:11:12.900
But yeah, it's a huge change.

00:11:12.900 --> 00:11:14.490
Probably the biggest
re-architecture

00:11:14.490 --> 00:11:16.110
of Android since it started.

00:11:16.110 --> 00:11:17.610
It was an enormous
amount of work.

00:11:17.610 --> 00:11:19.350
And thank you to
all my colleagues

00:11:19.350 --> 00:11:23.781
who hate me for implementing it.

00:11:23.781 --> 00:11:26.515
ROMAIN GUY: Yes, so that stage
was a huge amount of work.

00:11:26.515 --> 00:11:28.140
I just want to make
sure you understand

00:11:28.140 --> 00:11:30.810
there's a lot of engineers at
Google who are not here today,

00:11:30.810 --> 00:11:34.280
they're not here at I/O. They've
been working incredibly hard.

00:11:34.280 --> 00:11:36.790
They had to go through, like,
millions of lines of code,

00:11:36.790 --> 00:11:39.570
touch lines of code they
had never seen before.

00:11:39.570 --> 00:11:41.520
One girl might seem like--

00:11:41.520 --> 00:11:44.160
I think almost lost
it working on this.

00:11:44.160 --> 00:11:47.540
So you should cheer them because
it's a huge amount of work.

00:11:47.540 --> 00:11:48.540
You'll never see an API.

00:11:48.540 --> 00:11:49.510
You'll never see tools.

00:11:49.510 --> 00:11:51.676
But it's going to make
Android better in the future.

00:11:51.676 --> 00:11:59.222
[APPLAUSE]

00:11:59.222 --> 00:12:02.100
CHET HAASE: If we tried to bring
any more engineers up on stage,

00:12:02.100 --> 00:12:04.200
the producers would
have killed us.

00:12:04.200 --> 00:12:06.750
So there was a follow-up
question about Treble

00:12:06.750 --> 00:12:07.800
in Twitter--

00:12:07.800 --> 00:12:09.060
on Twitter.

00:12:09.060 --> 00:12:11.940
So I was going to
ask that one, which

00:12:11.940 --> 00:12:14.130
was, the dark side
of Treble on devices

00:12:14.130 --> 00:12:16.890
launched with O but DP1
running with Treble on existing

00:12:16.890 --> 00:12:18.000
devices--

00:12:18.000 --> 00:12:21.180
OK, that wasn't a complete
sentence, but this is Twitter.

00:12:21.180 --> 00:12:26.190
So the question is, will devices
that get updated to O also

00:12:26.190 --> 00:12:26.800
get Treble?

00:12:26.800 --> 00:12:29.430
DAVE BURKE: Right, so one
of the challenges of doing

00:12:29.430 --> 00:12:31.650
this huge re-architecture
is that if we

00:12:31.650 --> 00:12:34.630
did it sort of blindly, we'd
actually slow down adoption

00:12:34.630 --> 00:12:37.050
to O because there would
be a lot of work to do.

00:12:37.050 --> 00:12:39.642
And so we wanted to try not
to slow down the short term

00:12:39.642 --> 00:12:40.850
to speed up in the long term.

00:12:40.850 --> 00:12:43.020
So if you have an
existing device--

00:12:43.020 --> 00:12:44.550
you being a device maker--

00:12:44.550 --> 00:12:46.890
on N and you want
to an update to O,

00:12:46.890 --> 00:12:49.950
the Treble requirements
aren't applied to you.

00:12:49.950 --> 00:12:51.330
However, if you're
a new device--

00:12:51.330 --> 00:12:53.670
if you're a device maker
building a new device,

00:12:53.670 --> 00:12:56.110
then you have to comply
to the O architecture.

00:12:56.110 --> 00:12:57.810
So that's sort of how it works.

00:12:57.810 --> 00:12:59.910
And then what we did,
just to prove it all out,

00:12:59.910 --> 00:13:06.490
was we decided to treat the 2016
Pixel as a new device for O.

00:13:06.490 --> 00:13:08.500
And so this is fully
what we call Treble-ized,

00:13:08.500 --> 00:13:11.620
which means that all of
that vendor implementation

00:13:11.620 --> 00:13:14.100
is implemented in
a separate process,

00:13:14.100 --> 00:13:16.740
and it's built like you would
rebuild-- we basically rebuilt

00:13:16.740 --> 00:13:20.100
the system on Pixel, and we did
that because we wanted to prove

00:13:20.100 --> 00:13:23.220
it out end to end, so
that devices coming later

00:13:23.220 --> 00:13:25.410
in the year, new
devices on O will be

00:13:25.410 --> 00:13:26.910
able to sail plainly through.

00:13:31.770 --> 00:13:34.686
AUDIENCE: Hi, guys and gals
and everyone in between.

00:13:34.686 --> 00:13:37.602
My question is

00:13:37.602 --> 00:13:40.294
when you use your Android
phone, what do you really hate?

00:13:40.294 --> 00:13:44.686
And why haven't
you fixed it yet?

00:13:44.686 --> 00:13:50.542
[APPLAUSE]

00:13:50.542 --> 00:13:52.500
ROMAIN GUY: I have one.

00:13:52.500 --> 00:13:55.730
I really hate the colors,
but I'm fixing this in O.

00:13:55.730 --> 00:14:00.005
[APPLAUSE]

00:14:00.005 --> 00:14:03.120
MIKE CLERON: And I really
hate notifications,

00:14:03.120 --> 00:14:05.420
some that come from
nameless applications

00:14:05.420 --> 00:14:09.090
from my own company, and
that gentleman over there,

00:14:09.090 --> 00:14:11.866
along with members of his
team, are fixing that this time

00:14:11.866 --> 00:14:12.990
with notification channels.

00:14:15.822 --> 00:14:18.620
DAVE BURKE: I really hate the
lock contention and system

00:14:18.620 --> 00:14:19.120
server.

00:14:23.890 --> 00:14:27.042
So we'll fix that
for the next race.

00:14:27.042 --> 00:14:29.500
Seriously I obsess about lock
contention and system server.

00:14:29.500 --> 00:14:32.210
It bugs me.

00:14:32.210 --> 00:14:34.090
CHET HAASE: Anyone
else have a confession?

00:14:34.090 --> 00:14:35.506
BEN POLESZ: I'm
going to go with--

00:14:35.506 --> 00:14:38.069
this group should
know, but battery life.

00:14:38.069 --> 00:14:40.360
And the reason we don't break
it is because all of you.

00:14:43.190 --> 00:14:47.020
We have to-- keeping you alive
but keeping battery life alive

00:14:47.020 --> 00:14:49.735
at the same time.

00:14:49.735 --> 00:14:52.130
CHET HAASE: All right,
that'll do for a sample.

00:14:52.130 --> 00:14:54.900
How about over here?

00:14:54.900 --> 00:14:57.105
AUDIENCE: Knowing what you
know now, and especially

00:14:57.105 --> 00:14:59.310
with some of the
changes in Android O,

00:14:59.310 --> 00:15:02.250
would you still implement
the same four application

00:15:02.250 --> 00:15:05.190
interfaces such as
Activities, Service,

00:15:05.190 --> 00:15:09.600
and Intents, in a new
operating system?

00:15:14.500 --> 00:15:18.597
DIANNE HACKBORN: You know,
that really depends on--

00:15:18.597 --> 00:15:20.180
I don't regret the
stuff we did, and I

00:15:20.180 --> 00:15:22.440
think you could always
make improvements,

00:15:22.440 --> 00:15:24.904
but if you're looking for
things I would change,

00:15:24.904 --> 00:15:26.570
probably the big
things is stuff that we

00:15:26.570 --> 00:15:29.090
did that allowed
applications to do too much.

00:15:29.090 --> 00:15:31.100
Like, a big one for me
is the settings provider

00:15:31.100 --> 00:15:33.770
accessed allowing applications
to change system settings.

00:15:33.770 --> 00:15:36.290
I wish we had never
done that and just

00:15:36.290 --> 00:15:38.330
made sure we had
clear, controlled APIs

00:15:38.330 --> 00:15:39.500
for them to do things.

00:15:39.500 --> 00:15:41.050
So those were the
kind of things that

00:15:41.050 --> 00:15:43.070
are really hard after the
fact once applications

00:15:43.070 --> 00:15:46.160
start doing things, to try to
get them back under control.

00:15:46.160 --> 00:15:49.130
And those are the main things
I think I wish we did--

00:15:49.130 --> 00:15:50.630
places I wish we'd
done better at.

00:15:53.990 --> 00:15:55.430
CHET HAASE: Next.

00:15:55.430 --> 00:16:01.310
AUDIENCE: My question is to do
with the blocking of broadcast

00:16:01.310 --> 00:16:03.237
declared in manifests

00:16:03.237 --> 00:16:08.127
in O. In a session this afternoon,

00:16:08.127 --> 00:16:12.400
Dan said that user choice is the essence of Android,

00:16:12.400 --> 00:16:16.280
so why won't you let users whitelist apps?

00:16:20.160 --> 00:16:23.024
DIANNE HACKBORN:
Well, I mean, that--

00:16:23.024 --> 00:16:25.190
the Mathis thing is-- that's
not really about users.

00:16:25.190 --> 00:16:26.210
That's about developers.

00:16:26.210 --> 00:16:27.668
And there's a lot
of things that we

00:16:27.668 --> 00:16:30.080
don't allow applications
to do because it's

00:16:30.080 --> 00:16:33.500
better for the overall
device behavior.

00:16:33.500 --> 00:16:35.660
And actually Mathis
receivers is actually

00:16:35.660 --> 00:16:37.910
one of the things that--

00:16:37.910 --> 00:16:39.620
speaking of things
we regret doing,

00:16:39.620 --> 00:16:41.810
I think if I had
done again like--

00:16:41.810 --> 00:16:44.170
having that be so
easy to make things

00:16:44.170 --> 00:16:45.920
that you can launch
applications like that

00:16:45.920 --> 00:16:47.660
was clearly a big
mistake that we made,

00:16:47.660 --> 00:16:52.820
and we didn't really at the time
realize that once it's there

00:16:52.820 --> 00:16:55.190
and you have, like, 100
applications on your phone

00:16:55.190 --> 00:16:58.190
all listening to this broadcast,
the kind of hell that's

00:16:58.190 --> 00:17:00.945
going to break loose on the
device when that happens.

00:17:00.945 --> 00:17:02.570
So I really think
that that's something

00:17:02.570 --> 00:17:07.394
that we need to really put
brakes on and get control back

00:17:07.394 --> 00:17:09.560
over the device and switch
to more controlled things

00:17:09.560 --> 00:17:11.402
like JobScheduler.

00:17:11.402 --> 00:17:14.839
MIKE CLERON: And if I could
add to that on user choice,

00:17:14.839 --> 00:17:15.740
we announced--

00:17:15.740 --> 00:17:17.948
I hope we announced-- that
we have two billion users.

00:17:17.948 --> 00:17:19.579
If not, I just announced it.

00:17:19.579 --> 00:17:23.430
And that's a reasonable fraction
of the world's population.

00:17:23.430 --> 00:17:26.690
And so we think about
literally everyone

00:17:26.690 --> 00:17:29.420
when we're designing it, and
there's a lot of questions

00:17:29.420 --> 00:17:31.760
that it's just really hard
to put in front of users

00:17:31.760 --> 00:17:34.319
and expect them to make
scalable decisions,

00:17:34.319 --> 00:17:36.860
especially when applications
put something in their face that

00:17:36.860 --> 00:17:39.290
says, hey, just
please turn us on,

00:17:39.290 --> 00:17:40.760
it'll make this feature better.

00:17:40.760 --> 00:17:43.590
And it's not the applications
are doing anything wrong,

00:17:43.590 --> 00:17:45.830
usually, as their
individual choice.

00:17:45.830 --> 00:17:47.990
But if 100
applications all asked

00:17:47.990 --> 00:17:49.370
the same thing
and the user says,

00:17:49.370 --> 00:17:51.770
well, I said yes
to the first 70,

00:17:51.770 --> 00:17:54.441
I'll say yes to
the next 30, then

00:17:54.441 --> 00:17:55.940
they end up with
an unusable device.

00:17:55.940 --> 00:17:58.940
So we have to balance user
choice, which you're right,

00:17:58.940 --> 00:18:00.840
that is one of our
core principles.

00:18:00.840 --> 00:18:03.140
We have to balance that
with making devices

00:18:03.140 --> 00:18:06.890
that literally anyone can
administer and manage and still

00:18:06.890 --> 00:18:08.745
have a good experience.

00:18:08.745 --> 00:18:10.370
DIANNE HACKBORN: I
can add more to that

00:18:10.370 --> 00:18:13.740
too because on top of
that, there is user choice.

00:18:13.740 --> 00:18:15.620
You can say, I want
to-- if you really

00:18:15.620 --> 00:18:18.510
want to listen to things going
on, do a foreground service,

00:18:18.510 --> 00:18:21.520
and the user knows that you're
running all the time now.

00:18:21.520 --> 00:18:24.890
And I think that part of this is
actually having the user choice

00:18:24.890 --> 00:18:27.124
being quite clear to the user.

00:18:27.124 --> 00:18:28.790
It's clear to the
user-- it's, like, oh,

00:18:28.790 --> 00:18:31.880
this application is just running
all the time because I really

00:18:31.880 --> 00:18:33.830
care about it, so
it's OK with me,

00:18:33.830 --> 00:18:38.330
and I will allow it to do that
versus subtleties about, well,

00:18:38.330 --> 00:18:41.595
OK, I have this choice to
allow it to run sometimes

00:18:41.595 --> 00:18:43.970
in the background, but I don't
really know what that does

00:18:43.970 --> 00:18:46.317
and I don't realize that
when I do this a lot--

00:18:46.317 --> 00:18:48.650
with a lot of applications ,
that actually there's a lot

00:18:48.650 --> 00:18:50.858
of stuff going on in the
background I'm not aware of.

00:18:50.858 --> 00:18:51.770
So I think it's--

00:18:51.770 --> 00:18:56.570
we learn to-- with foreground
services, to having that UI

00:18:56.570 --> 00:18:59.240
and having these kind
of clear lock things

00:18:59.240 --> 00:19:01.370
you go into, like, oh,
I've decided do this,

00:19:01.370 --> 00:19:04.490
so this has a lot of
implications of what you do

00:19:04.490 --> 00:19:06.890
that the user understands
all that stuff together,

00:19:06.890 --> 00:19:08.780
as that's a good-- they
can make that choice

00:19:08.780 --> 00:19:09.655
between those things.

00:19:09.655 --> 00:19:13.062
But having kind of subtle
choices about this or that

00:19:13.062 --> 00:19:15.020
and it's not really clear
what it means, really

00:19:15.020 --> 00:19:16.740
doesn't leave the
user with much choice

00:19:16.740 --> 00:19:20.720
because they don't
really understand.

00:19:20.720 --> 00:19:23.700
ADAM POWELL: I think that
finally that kind of shows

00:19:23.700 --> 00:19:26.046
another principle that's
coming to the forefront in more

00:19:26.046 --> 00:19:27.420
recent versions
of Android, which

00:19:27.420 --> 00:19:29.310
is that when the
user makes a choice,

00:19:29.310 --> 00:19:32.280
we want to make sure that
their-- choice to allow the app

00:19:32.280 --> 00:19:33.990
to do something, we want to
make sure that that's something

00:19:33.990 --> 00:19:36.330
that the user can actually see
the effects of and make sure

00:19:36.330 --> 00:19:38.371
that they can kind of
audit that behavior as they

00:19:38.371 --> 00:19:39.520
use the device.

00:19:39.520 --> 00:19:42.030
So I think that, as Dianne
said, the foreground service

00:19:42.030 --> 00:19:44.580
notification really does kind
of provide that visibility when

00:19:44.580 --> 00:19:46.233
an app is running
in the background.

00:19:46.233 --> 00:19:48.005
AUDIENCE: Thank you.

00:19:48.005 --> 00:19:49.130
CHET HAASE: Thanks.

00:19:49.130 --> 00:19:50.620
A little different topic.

00:19:50.620 --> 00:19:53.790
So we'll take one from
online for Rachel, I believe.

00:19:53.790 --> 00:19:56.280
Is material design
done, or do you

00:19:56.280 --> 00:19:59.794
see it growing and evolving?

00:19:59.794 --> 00:20:02.870
RACHEL GARB: The work is
never done with design,

00:20:02.870 --> 00:20:08.750
and I think that you probably
have a lot of other things--

00:20:08.750 --> 00:20:12.410
other patterns that you would
like to see and have supported

00:20:12.410 --> 00:20:13.280
for your apps.

00:20:13.280 --> 00:20:16.220
So the material
team, they're growing

00:20:16.220 --> 00:20:19.640
and they're investing
heavily in this space.

00:20:19.640 --> 00:20:21.050
This was an offshoot of Android.

00:20:21.050 --> 00:20:25.070
The material team started
out very small in Android,

00:20:25.070 --> 00:20:27.950
and then it grew so big that
it is a completely different

00:20:27.950 --> 00:20:28.527
department.

00:20:28.527 --> 00:20:30.110
So yeah, I don't
think they're sitting

00:20:30.110 --> 00:20:31.359
around twiddling their thumbs.

00:20:31.359 --> 00:20:35.512
They're definitely doing a
lot to evolve the language.

00:20:35.512 --> 00:20:38.042
AUDIENCE: Designers design.

00:20:38.042 --> 00:20:39.500
DAN SANDLER: And
in particular they

00:20:39.500 --> 00:20:41.290
just launched a bunch of code.

00:20:41.290 --> 00:20:43.706
One of the great things about
having a separate department

00:20:43.706 --> 00:20:45.820
for material is that they
have now the capacity

00:20:45.820 --> 00:20:48.430
to bring on more prototypers,
more software engineers.

00:20:48.430 --> 00:20:50.110
So if you go to
material.io, you'll

00:20:50.110 --> 00:20:52.450
see that they've got a
bunch of new components

00:20:52.450 --> 00:20:54.460
available for various
different platforms

00:20:54.460 --> 00:20:56.770
to make it easier to
integrate the stuff

00:20:56.770 --> 00:20:59.390
that has evolved in material
over the last couple of years.

00:20:59.390 --> 00:21:00.700
So I think you can look
at their work product

00:21:00.700 --> 00:21:02.650
along a number of
different axes and see

00:21:02.650 --> 00:21:05.320
that material design is
alive and well and continuing

00:21:05.320 --> 00:21:07.195
to evolve.

00:21:07.195 --> 00:21:11.400
RACHEL GARB: And to see all that
stuff, you go to material.io,

00:21:11.400 --> 00:21:14.970
lots of good stuff
there, resources, tools,

00:21:14.970 --> 00:21:17.040
good articles.

00:21:17.040 --> 00:21:18.225
CHET HAASE: Thanks.

00:21:18.225 --> 00:21:21.160
How about there?

00:21:21.160 --> 00:21:23.585
AUDIENCE: Like everyone
else, I'm really excited

00:21:23.585 --> 00:21:28.435
to have the support and encouragement for application development in Kotlin.

00:21:28.435 --> 00:21:31.590
I'm wondering if that same
support and encouragement will

00:21:31.590 --> 00:21:35.510
extend to Gradle Script Kotlin when it's released,

00:21:35.510 --> 00:21:37.960
probably later in the year.

00:21:37.960 --> 00:21:41.580
ROMAIN GUY: You mean
to write build files?

00:21:41.580 --> 00:21:42.924
AUDIENCE: Yeah, to build files

00:21:42.924 --> 00:21:44.340
ROMAIN GUY: Yeah,
yeah, we do plan

00:21:44.340 --> 00:21:46.840
to support it as soon as it's
finished on the [INAUDIBLE]

00:21:46.840 --> 00:21:47.340
side.

00:21:47.340 --> 00:21:49.324
AUDIENCE: Thank you.

00:21:49.324 --> 00:21:50.260
CHET HAASE: Thanks.

00:21:50.260 --> 00:21:50.960
How about here?

00:21:50.960 --> 00:21:53.362
AUDIENCE: Yes, I have
a question on Kotlin.

00:21:53.362 --> 00:21:54.820
For third-party
frameworks, are you

00:21:54.820 --> 00:21:57.290
going to need to add anything,
like a bridging header,

00:21:57.290 --> 00:21:59.310
as you do in Swift
to Objective C

00:21:59.310 --> 00:22:03.014
to support Java projects
in Kotlin project

00:22:03.014 --> 00:22:04.680
and the other way around? Are we going to need

00:22:04.680 --> 00:22:08.490
to add any bridging
in an Android project

00:22:08.490 --> 00:22:14.690
to use a Java framework or
Java third-party framework?

00:22:14.690 --> 00:22:18.280
ADAM POWELL: No
I don't think so.

00:22:18.280 --> 00:22:19.446
Next.

00:22:19.446 --> 00:22:22.830
MAXIM SHAFIROV: So Kotlin has
some kind of a standard library

00:22:22.830 --> 00:22:26.880
which is about 600 kilobytes.

00:22:26.880 --> 00:22:31.580
So that's the only
thing you need to add.

00:22:31.580 --> 00:22:34.520
CHET HAASE: Next.

00:22:34.520 --> 00:22:36.480
AUDIENCE: Hi.

00:22:36.480 --> 00:22:41.988
[INAUDIBLE] So Tim [Murray]
showed us how to use

00:22:41.988 --> 00:22:48.562
Systrace to profile our apps and in Tor's session today we saw CPU monitoring.

00:22:48.562 --> 00:22:55.137
I'd like to know how these compare and contrast, and what are the values of each?

00:22:55.137 --> 00:22:56.610
TIM MURRAY: Cage fight.

00:22:56.610 --> 00:23:02.340
So Systrace gets all of its
data from the Linux kernel.

00:23:02.340 --> 00:23:04.980
It doesn't really do anything
with your application directly.

00:23:04.980 --> 00:23:07.740
It's not going to go and see
what functions take a long time

00:23:07.740 --> 00:23:08.770
or anything like that.

00:23:08.770 --> 00:23:11.496
It's just going to say, hey,
your app was running here,

00:23:11.496 --> 00:23:12.870
and then it stopped
running here.

00:23:12.870 --> 00:23:14.580
That's all it knows.

00:23:14.580 --> 00:23:17.650
The CPU Profiler in Android
Studio, on the other hand,

00:23:17.650 --> 00:23:21.960
will actually sample the
runtime of your application

00:23:21.960 --> 00:23:24.180
and tell you, hey,
you're spending

00:23:24.180 --> 00:23:26.850
50 milliseconds in this
function and four milliseconds

00:23:26.850 --> 00:23:29.100
in this function and
things like that.

00:23:29.100 --> 00:23:32.790
That means that the CPU Profiler
has higher overhead, which

00:23:32.790 --> 00:23:36.820
means it can perturb the results
of your performance testing.

00:23:36.820 --> 00:23:38.820
But it gives you
greater visibility

00:23:38.820 --> 00:23:41.020
into your application.

00:23:41.020 --> 00:23:42.780
So my general
recommendation would

00:23:42.780 --> 00:23:47.250
be use Systrace to get
a general idea of how

00:23:47.250 --> 00:23:49.470
your application runs
because you will probably

00:23:49.470 --> 00:23:51.210
spot a lot of problems there.

00:23:51.210 --> 00:23:54.780
Once you have some idea
of what's taking too long,

00:23:54.780 --> 00:23:58.260
you can use the CPU
Profiler to get a closer

00:23:58.260 --> 00:24:00.470
look inside your application.

00:24:00.470 --> 00:24:03.268
AUDIENCE: Great, thanks.

00:24:03.268 --> 00:24:05.000
CHET HAASE: Tor,
did that cover it?

00:24:05.000 --> 00:24:06.250
TOR NORBYE: That sounds good.

00:24:06.250 --> 00:24:07.250
CHET HAASE: No rebuttal?

00:24:07.250 --> 00:24:09.320
TOR NORBYE: Yeah, I
mean, the CPU Profiler

00:24:09.320 --> 00:24:11.750
has a low overhead
mode until you start

00:24:11.750 --> 00:24:13.770
recording actual sampling.

00:24:13.770 --> 00:24:15.880
So you can use it
initially as well,

00:24:15.880 --> 00:24:20.230
but Systrace obviously does
more whole system tracing.

00:24:20.230 --> 00:24:22.246
CHET HAASE: Thanks.

00:24:22.246 --> 00:24:23.497
AUDIENCE: Hello.

00:24:23.497 --> 00:24:26.080
I believe we have not heard much
about data binding this week,

00:24:26.080 --> 00:24:28.430
and I wonder if that's
still a technology we

00:24:28.430 --> 00:24:31.676
should be continued to adopt.

00:24:31.676 --> 00:24:32.480
CHET HAASE: Yigit.

00:24:32.480 --> 00:24:35.720
YIGIT BOYAR: Yes,
actually so we talk

00:24:35.720 --> 00:24:38.780
[INAUDIBLE] we ship a
sample application that

00:24:38.780 --> 00:24:41.220
uses data binding.

00:24:41.220 --> 00:24:43.040
So we're still working on that.

00:24:43.040 --> 00:24:46.152
Tools are still working
on that, right, Tor?

00:24:46.152 --> 00:24:47.878
TOR NORBYE: Yes.

00:24:47.878 --> 00:24:49.180
No, we should.

00:24:49.180 --> 00:24:51.530
We have a lot of other
things we're working on, too,

00:24:51.530 --> 00:24:54.132
but data binding is one
of our responsibilities.

00:24:54.132 --> 00:24:55.310
AUDIENCE: Thank you.

00:24:55.310 --> 00:24:56.960
CHET HAASE: Thanks.

00:24:56.960 --> 00:24:57.865
Yes.

00:24:57.865 --> 00:24:59.630
AUDIENCE: Hi.

00:24:59.630 --> 00:25:01.460
I started writing
Kotlin last week,

00:25:01.460 --> 00:25:04.630
and I felt that it
felt oddly familiar,

00:25:04.630 --> 00:25:06.440
and I thought that's
because I spent

00:25:06.440 --> 00:25:10.880
the last year doing code reviews
of our iOS Developer in Swift.

00:25:10.880 --> 00:25:14.090
So I was wondering if you could
comment on the relationship

00:25:14.090 --> 00:25:15.290
between Kotlin and Swift.

00:25:19.797 --> 00:25:21.255
MAXIM SHAFIROV: We
are independent.

00:25:21.255 --> 00:25:24.030
[LAUGHTER]

00:25:24.030 --> 00:25:29.290
[APPLAUSE]

00:25:29.290 --> 00:25:31.030
There is a lot of
resemblance, I guess,

00:25:31.030 --> 00:25:34.330
because we are aiming
for the same task to be--

00:25:34.330 --> 00:25:36.205
to make it productive
developers.

00:25:36.205 --> 00:25:38.020
AUDIENCE: Yeah, I
meant conceptually.

00:25:38.020 --> 00:25:39.590
Thank you.

00:25:39.590 --> 00:25:41.690
STEPHANIE CUTHBERTSON:
Max is quite modest.

00:25:41.690 --> 00:25:47.230
He actually was one of the key
folks who contributed language.

00:25:47.230 --> 00:25:49.294
Henri Breslov is
probably here now,

00:25:49.294 --> 00:25:50.710
who's also very,
very significant,

00:25:50.710 --> 00:25:52.129
and is a lead language designer.

00:25:52.129 --> 00:25:53.170
I talk too much, don't I?

00:25:57.120 --> 00:25:59.120
One fact that Dave and I
were just talking about

00:25:59.120 --> 00:26:01.330
is Kotlin does predate Swift.

00:26:01.330 --> 00:26:04.690
In fact, the first announcement
about Kotlin was in 2011,

00:26:04.690 --> 00:26:08.980
and the first
release was in 2012.

00:26:08.980 --> 00:26:10.870
The language has
evolved since then.

00:26:10.870 --> 00:26:12.730
So it's just an
interesting fact.

00:26:12.730 --> 00:26:15.570
It's good to know.

00:26:15.570 --> 00:26:18.414
CHET HAASE: Thanks.

00:26:18.414 --> 00:26:19.910
AUDIENCE: Hello.

00:26:19.910 --> 00:26:23.360
So I personally think that
being open and open source

00:26:23.360 --> 00:26:26.810
is one of the most
important powers of Android.

00:26:26.810 --> 00:26:30.590
And one of the most important
announcements for me this week

00:26:30.590 --> 00:26:34.340
was that the Firebase SDKs
are being open sourced.

00:26:34.340 --> 00:26:38.840
And unfortunately Android SDK is
not currently but will follow.

00:26:38.840 --> 00:26:42.320
So the question is, what
about Google Play Services,

00:26:42.320 --> 00:26:44.930
is there a plan to--
because Firebase Android

00:26:44.930 --> 00:26:47.450
SDK and the Play Services
are so integrated.

00:26:47.450 --> 00:26:51.670
So Firebase can be open source
now, but why not Play Services?

00:26:54.480 --> 00:26:58.872
[APPLAUSE]

00:26:58.872 --> 00:26:59.990
DAVE BURKE: I think--

00:26:59.990 --> 00:27:02.930
so the thing about Play
Services is that there's

00:27:02.930 --> 00:27:04.430
lots of stuff in there.

00:27:04.430 --> 00:27:07.190
Some of it is developer
focused and some of it

00:27:07.190 --> 00:27:09.080
is just really extension
of applications,

00:27:09.080 --> 00:27:11.180
like Google's own applications.

00:27:11.180 --> 00:27:15.140
And so the sort of Google
policy with their applications

00:27:15.140 --> 00:27:17.780
is they're just not open source.

00:27:17.780 --> 00:27:19.940
The challenge is there's
no easy way in GMS core

00:27:19.940 --> 00:27:22.835
to sort of say, hey, this
is a developer component

00:27:22.835 --> 00:27:25.890
and this is an extension
of an app component.

00:27:25.890 --> 00:27:29.935
So yeah, also we don't have
anyone from the GMS core--

00:27:29.935 --> 00:27:31.130
Play Services team here.

00:27:31.130 --> 00:27:35.662
So I can punt the question.

00:27:35.662 --> 00:27:37.370
CHET HAASE: We punt
the questions to you.

00:27:37.370 --> 00:27:39.036
So if you're going
to punt the question,

00:27:39.036 --> 00:27:40.721
I don't know what to do with it.

00:27:40.721 --> 00:27:42.470
DAVE BURKE: I'll go
into an infinite loop.

00:27:45.704 --> 00:27:46.804
CHET HAASE: Moving on.

00:27:46.804 --> 00:27:47.720
DAVE BURKE: Moving on.

00:27:47.720 --> 00:27:53.040
CHET HAASE: All right, let
me go to a theoretical thing.

00:27:53.040 --> 00:27:55.590
What's the one piece of advice
you would like developers

00:27:55.590 --> 00:28:01.720
to never ever follow
when making Android apps?

00:28:01.720 --> 00:28:03.331
Anybody?

00:28:03.331 --> 00:28:05.110
DAVE BURKE: Forced
garbage collection?

00:28:05.110 --> 00:28:06.355
I don't know.

00:28:06.355 --> 00:28:09.579
CHET HAASE: Thread.sleep
in the ondraw method?

00:28:09.579 --> 00:28:14.490
[LAUGHTER]

00:28:14.490 --> 00:28:14.990
OK.

00:28:14.990 --> 00:28:17.980
WALLE: There's an application
context for everything.

00:28:23.526 --> 00:28:25.753
CHET HAASE: Moving on.

00:28:25.753 --> 00:28:27.046
You.

00:28:27.046 --> 00:28:27.820
AUDIENCE: Hi.

00:28:27.820 --> 00:28:29.730
So we saw the
introduction in I/O

00:28:29.730 --> 00:28:33.760
of a bunch of really great new
performance profiling tools.

00:28:33.760 --> 00:28:36.490
For example, for
network and for CPU.

00:28:36.490 --> 00:28:38.200
One thing that's
still kind of missing

00:28:38.200 --> 00:28:41.620
is a good battery profiler
for our applications.

00:28:41.620 --> 00:28:43.920
We do have Battery Stats
and Battery Historian,

00:28:43.920 --> 00:28:46.510
but they're extremely difficult
to use and to interpret

00:28:46.510 --> 00:28:47.680
the results from.

00:28:47.680 --> 00:28:50.470
And I was wondering if
battery profiling for our apps

00:28:50.470 --> 00:28:52.855
is something that we might
be able to look forward to?

00:28:52.855 --> 00:28:54.320
STEPHANIE CUTHBERTSON: I think--

00:28:54.320 --> 00:28:58.280
yeah, so-- that's a
very good question.

00:28:58.280 --> 00:29:00.610
And one of the things
we talked about

00:29:00.610 --> 00:29:02.710
was that the battery
profiling really has

00:29:02.710 --> 00:29:05.242
to be based on CPU and network.

00:29:05.242 --> 00:29:06.700
We want to look at
those two things

00:29:06.700 --> 00:29:09.190
as really important
inputs, and so we

00:29:09.190 --> 00:29:12.250
felt like it was important
to do CPU and network first.

00:29:12.250 --> 00:29:14.014
So those were our
initial profilers.

00:29:14.014 --> 00:29:15.430
We don't talk about
futures, but I

00:29:15.430 --> 00:29:17.054
will say that we get
a lot of questions

00:29:17.054 --> 00:29:19.120
about battery profiling.

00:29:19.120 --> 00:29:22.424
So you can read that
however you want.

00:29:22.424 --> 00:29:24.235
DAVE BURKE: That's
code for staff

00:29:24.235 --> 00:29:25.360
and team are working on it.

00:29:28.012 --> 00:29:31.480
CHET HAASE: So Aurash, do you
know about the Play Dashboard

00:29:31.480 --> 00:29:32.710
stuff that was going on?

00:29:32.710 --> 00:29:35.400
Wasn't battery one of the stats
you were talking about there?

00:29:35.400 --> 00:29:36.858
AURASH MAHBOD:
Yeah, so we're going

00:29:36.858 --> 00:29:39.490
to start showing system help
information within the Play

00:29:39.490 --> 00:29:40.625
console.

00:29:40.625 --> 00:29:42.250
The team has been
hard at work at this,

00:29:42.250 --> 00:29:44.291
and it's going to include
everything from crashes

00:29:44.291 --> 00:29:45.659
to memory usage to--

00:29:45.659 --> 00:29:46.450
is that right, Ben?

00:29:46.450 --> 00:29:48.135
Battery?

00:29:48.135 --> 00:29:49.510
BEN POLESZ: Well,
what we put out

00:29:49.510 --> 00:29:51.499
there was
[? stuck wake locks, ?]

00:29:51.499 --> 00:29:53.290
which is a big battery
drain on the system,

00:29:53.290 --> 00:29:55.630
the number of wake-ups that are
happening in your application,

00:29:55.630 --> 00:29:57.570
and then also information
about janky frame.

00:29:57.570 --> 00:29:58.944
So if your
application is running

00:29:58.944 --> 00:30:00.945
and it's really
high CPU intensive,

00:30:00.945 --> 00:30:02.320
you'll get
information about that

00:30:02.320 --> 00:30:05.080
to fix those issues,
both the very short jank

00:30:05.080 --> 00:30:08.740
events and the really
severe horrible jank events

00:30:08.740 --> 00:30:12.380
that we named after our
vice president behind us

00:30:12.380 --> 00:30:13.782
that we call internally a Davey.

00:30:13.782 --> 00:30:15.990
And I'm glad I found an
opportunity to talk about it.

00:30:15.990 --> 00:30:17.615
So thank you so much
for that question.

00:30:20.500 --> 00:30:22.531
You're famous.

00:30:22.531 --> 00:30:23.785
CHET HAASE: Yes.

00:30:23.785 --> 00:30:24.619
AUDIENCE: Hi.

00:30:24.619 --> 00:30:27.160
I'm Steve from SA Developers,
and I have a follow-up question

00:30:27.160 --> 00:30:28.390
about Treble.

00:30:28.390 --> 00:30:31.499
So we're very excited
about Treble, the whole--

00:30:31.499 --> 00:30:33.040
how it's going to
help make it easier

00:30:33.040 --> 00:30:36.640
to upgrade to new versions, but
the most exciting part for us

00:30:36.640 --> 00:30:40.785
is the mention of more work on
open sourcing hardware drivers.

00:30:40.785 --> 00:30:42.910
Is the work that Google is
going to be doing mostly

00:30:42.910 --> 00:30:44.470
focused on the
existing projects,

00:30:44.470 --> 00:30:46.300
like [INAUDIBLE]
and Lima, or are you

00:30:46.300 --> 00:30:47.950
going to be working
more to start

00:30:47.950 --> 00:30:50.560
new projects with
existing vendors

00:30:50.560 --> 00:30:52.090
and get their code open sourced?

00:30:55.580 --> 00:30:57.970
DAVE BURKE: We've been just
focused on the architecture.

00:30:57.970 --> 00:31:02.230
I mean, that's really up to the
silicon vendors and the device

00:31:02.230 --> 00:31:03.496
makers.

00:31:03.496 --> 00:31:04.870
So we just wanted
to make sure we

00:31:04.870 --> 00:31:06.610
had a much nicer architecture.

00:31:06.610 --> 00:31:09.880
We haven't really put thought
into that specific aspect

00:31:09.880 --> 00:31:10.555
of it.

00:31:10.555 --> 00:31:12.288
AUDIENCE: Thank you.

00:31:12.288 --> 00:31:14.264
CHET HAASE: Next.

00:31:14.264 --> 00:31:16.740
AUDIENCE: All right,
hey, everyone.

00:31:16.740 --> 00:31:19.950
So last year at I/O there was
a really excellent session

00:31:19.950 --> 00:31:24.330
on attention and notifications
and treating people well.

00:31:24.330 --> 00:31:27.840
I was wondering-- so since we
saw that manifest this year

00:31:27.840 --> 00:31:30.510
through notification channels
and through attention-based

00:31:30.510 --> 00:31:33.630
notification sorting, are there
any other issues like that

00:31:33.630 --> 00:31:36.337
on the platform that you--

00:31:36.337 --> 00:31:38.670
are near and dear to your
heart that you wish developers

00:31:38.670 --> 00:31:42.775
kind of spent more
time thinking about?

00:31:42.775 --> 00:31:47.290
BEN POLESZ: Why applications
need permissions.

00:31:47.290 --> 00:31:50.162
We get that a lot
internally about--

00:31:50.162 --> 00:31:52.120
they understand the
premise but not necessarily

00:31:52.120 --> 00:31:54.491
what the entire application
is doing with that data.

00:31:54.491 --> 00:31:55.990
And so that's
something that I would

00:31:55.990 --> 00:31:57.760
love to see developers
take a lot of care

00:31:57.760 --> 00:32:01.830
about asking in context, and
we found when it's in context,

00:32:01.830 --> 00:32:04.600
users understand better why
they are giving you something,

00:32:04.600 --> 00:32:07.380
they are more inclined to
give it to you if the answer

00:32:07.380 --> 00:32:10.950
or if the context is good and
they understand the value.

00:32:10.950 --> 00:32:12.760
So I always put a
lot of time into that

00:32:12.760 --> 00:32:15.167
because users appreciate it.

00:32:15.167 --> 00:32:16.750
RACHEL GARB: And I'd
broaden that even

00:32:16.750 --> 00:32:18.730
more to settings in general.

00:32:18.730 --> 00:32:21.010
We know from
foundational research

00:32:21.010 --> 00:32:22.930
that users get
pretty overwhelmed

00:32:22.930 --> 00:32:25.270
by the number of
settings and being

00:32:25.270 --> 00:32:28.150
able to find what they need at
the moment that they need it.

00:32:28.150 --> 00:32:32.050
So apps should really think
about every single setting

00:32:32.050 --> 00:32:36.530
that they want to introduce,
and is it really necessary?

00:32:36.530 --> 00:32:38.740
Can a smart choice be
made that will satisfy

00:32:38.740 --> 00:32:39.764
a majority of the users?

00:32:39.764 --> 00:32:41.680
We think about that too
on the platform level,

00:32:41.680 --> 00:32:43.346
and we have to keep
thinking about that.

00:32:43.346 --> 00:32:45.940
It gets more
complicated over time.

00:32:45.940 --> 00:32:48.280
DAN SANDLER: And every new
feature, every new setting,

00:32:48.280 --> 00:32:49.950
every new thing
we add to Android

00:32:49.950 --> 00:32:53.190
stands atop 10
things we didn't add.

00:32:53.190 --> 00:32:57.700
And that's-- it's a huge part of
how we design things and how we

00:32:57.700 --> 00:32:59.590
want to encourage
apps to do things.

00:32:59.590 --> 00:33:02.920
And honestly, every
year we add new stuff,

00:33:02.920 --> 00:33:05.770
we've probably already
just launched the stuff

00:33:05.770 --> 00:33:07.550
that users are going
to find terrible

00:33:07.550 --> 00:33:09.716
and that we're going to
come back and fix next year.

00:33:09.716 --> 00:33:11.506
So we keep ourselves
in business.

00:33:11.506 --> 00:33:13.030
AURASH MAHBOD: I'll add on.

00:33:13.030 --> 00:33:15.490
So I think APK size
is another one.

00:33:15.490 --> 00:33:18.040
A lot of our users, given
our global footprint,

00:33:18.040 --> 00:33:19.700
have lower-end devices.

00:33:19.700 --> 00:33:21.400
And I think-- those
might not always

00:33:21.400 --> 00:33:22.987
be the users that
monetize the best,

00:33:22.987 --> 00:33:24.570
but they also can't
afford to upgrade.

00:33:24.570 --> 00:33:26.380
So I think it's really important
as a developer community

00:33:26.380 --> 00:33:28.784
that we kind of band
together and really improve

00:33:28.784 --> 00:33:30.200
our apps on those
low-end devices,

00:33:30.200 --> 00:33:33.640
both from an APK size standpoint
and from a RAM user standpoint.

00:33:33.640 --> 00:33:35.999
[APPLAUSE]

00:33:35.999 --> 00:33:38.040
CHET HAASE: I'm going to
put words in Tim's mouth

00:33:38.040 --> 00:33:40.950
and say that he wants everyone
to care more about performance

00:33:40.950 --> 00:33:42.070
as well.

00:33:42.070 --> 00:33:44.200
So some of the stuff--
some of the sessions here

00:33:44.200 --> 00:33:46.800
as well as some of the tools
that we're talking about

00:33:46.800 --> 00:33:50.304
are coming out because we want
it to be easier for developers

00:33:50.304 --> 00:33:51.720
to actually chase
that information

00:33:51.720 --> 00:33:53.400
so that they can
fix it for users.

00:33:53.400 --> 00:33:55.035
Am I allowed to
provide an answer?

00:33:55.035 --> 00:33:56.660
Somebody else like
to say that instead?

00:33:56.660 --> 00:33:57.590
Is that good?

00:33:57.590 --> 00:33:59.640
All right.

00:33:59.640 --> 00:34:01.171
OK.

00:34:01.171 --> 00:34:01.671
You.

00:34:01.671 --> 00:34:03.450
AUDIENCE: Hi.

00:34:03.450 --> 00:34:06.990
I get the sense that you guys
really like Kotlin a lot,

00:34:06.990 --> 00:34:11.350
and I'm wondering if you
have any future plans

00:34:11.350 --> 00:34:16.540
to implement platform framework
components using Kotlin,

00:34:16.540 --> 00:34:18.890
and if so, would
you expose SDK APIs?

00:34:24.667 --> 00:34:27.080
MIKE CLERON: Well,
as has been said,

00:34:27.080 --> 00:34:31.610
we are also committed to
Java and just pragmatically

00:34:31.610 --> 00:34:35.630
the bazillion lines of code
that we already have as Java.

00:34:35.630 --> 00:34:37.940
So I think as much
as we love it,

00:34:37.940 --> 00:34:40.250
the reality is
we're probably going

00:34:40.250 --> 00:34:45.026
to be continuing to produce
Java code for the near future.

00:34:45.026 --> 00:34:46.400
At the point where
we're starting

00:34:46.400 --> 00:34:48.350
to introduce new
features in Kotlin,

00:34:48.350 --> 00:34:49.850
it's going to be
something that we

00:34:49.850 --> 00:34:52.909
make sure is 100% compatible
with Java programming language

00:34:52.909 --> 00:34:53.630
too.

00:34:53.630 --> 00:34:55.130
So it's going to
be something that's

00:34:55.130 --> 00:34:58.340
going to take us a while
to adopt internally.

00:34:58.340 --> 00:35:00.140
The first thing you'll
probably see from us

00:35:00.140 --> 00:35:02.840
is that we'll make sure
that our Java programming

00:35:02.840 --> 00:35:05.780
language APIs--

00:35:05.780 --> 00:35:07.820
the legacy ones
that we already have

00:35:07.820 --> 00:35:10.820
and the new ones that we
create interoperate perfectly

00:35:10.820 --> 00:35:11.350
with Kotlin.

00:35:11.350 --> 00:35:14.090
So that's going to be
a goal from us starting

00:35:14.090 --> 00:35:16.406
from now going forward.

00:35:16.406 --> 00:35:19.580
CHET HAASE: I should clarify
that bazillion lines of code

00:35:19.580 --> 00:35:21.380
was just an estimate.

00:35:21.380 --> 00:35:23.960
It's actually far more.

00:35:23.960 --> 00:35:28.135
MIKE CLERON: It's
technically 1.036 bazillion.

00:35:28.135 --> 00:35:29.065
AUDIENCE: Thank you.

00:35:29.065 --> 00:35:29.950
CHET HAASE: Thanks.

00:35:29.950 --> 00:35:30.450
Yes.

00:35:30.450 --> 00:35:31.520
AUDIENCE: Hi.

00:35:31.520 --> 00:35:34.520
Yesterday I went to a talk
about progressive web apps,

00:35:34.520 --> 00:35:37.730
and these guys are
really catching up.

00:35:37.730 --> 00:35:41.700
So should I invest my time
learning JavaScript or Kotlin?

00:35:41.700 --> 00:35:43.130
ROMAIN GUY: So Kotlin--

00:35:43.130 --> 00:35:44.660
so JavaScript back in--

00:35:44.660 --> 00:35:46.689
you can write Kotlin
[INAUDIBLE] to JavaScript.

00:35:46.689 --> 00:35:47.480
So you can do both.

00:35:53.452 --> 00:35:54.910
AURASH MAHBOD: I'll
take a stab it.

00:35:54.910 --> 00:35:58.000
So I think the way
to think about PW

00:35:58.000 --> 00:36:00.700
is-- progressive web apps--
is really if your company is

00:36:00.700 --> 00:36:03.550
already focused on building a
flagship product on mobile web,

00:36:03.550 --> 00:36:05.934
I think it's unrealistic
for you to go and say,

00:36:05.934 --> 00:36:07.600
let's pivot that
entire team to get them

00:36:07.600 --> 00:36:09.100
focused on app development.

00:36:09.100 --> 00:36:12.327
Obviously everyone on the stage
here is an Android diehard,

00:36:12.327 --> 00:36:14.660
and we're really focused on
improving the-- both the SDK

00:36:14.660 --> 00:36:16.280
and the operating system.

00:36:16.280 --> 00:36:18.430
And what we want to do
is say if you're really

00:36:18.430 --> 00:36:21.530
focused on building a
native app experience

00:36:21.530 --> 00:36:24.499
and you believe that's where it
converts best for your users,

00:36:24.499 --> 00:36:26.290
then we want to make
it as easy as possible

00:36:26.290 --> 00:36:28.060
for you to get those users
onto your app experience,

00:36:28.060 --> 00:36:29.560
both from a developer
standpoint and

00:36:29.560 --> 00:36:30.975
from a reachability standpoint.

00:36:34.370 --> 00:36:36.605
CHET HAASE: Next.

00:36:36.605 --> 00:36:39.080
AUDIENCE: What are
some great new things

00:36:39.080 --> 00:36:42.710
you think have been overlooked
or were left out of I/O

00:36:42.710 --> 00:36:44.118
this year for some reason?

00:36:50.527 --> 00:36:52.110
CHET HAASE: So what
are things that we

00:36:52.110 --> 00:36:54.800
decided to not talk about
that we would talk about now?

00:36:54.800 --> 00:36:57.220
AUDIENCE: Yeah, or things that--

00:36:57.220 --> 00:36:58.612
well, I mean--

00:36:58.612 --> 00:37:00.910
DAVE BURKE: I mean, the
biggest one is Project Treble,

00:37:00.910 --> 00:37:02.550
like, that is enormous.

00:37:04.720 --> 00:37:05.220
What else?

00:37:05.220 --> 00:37:07.299
Did we talk about
downloadable fonts, emoji?

00:37:07.299 --> 00:37:08.090
That's kind of cool

00:37:08.090 --> 00:37:08.640
CHET HAASE: Yeah.

00:37:08.640 --> 00:37:09.120
DAVE BURKE: Talked about that.

00:37:09.120 --> 00:37:10.054
CHET HAASE: Yeah.

00:37:10.054 --> 00:37:11.970
We can talk about it
again, but yeah, we did--

00:37:11.970 --> 00:37:13.350
DAVE BURKE: Did we talk
about the garbage collector,

00:37:13.350 --> 00:37:14.610
that it went down from--

00:37:14.610 --> 00:37:15.070
CHET HAASE: Tomorrow.

00:37:15.070 --> 00:37:15.370
DAVE BURKE: --two points--

00:37:15.370 --> 00:37:16.260
CHET HAASE: --is the
session on garbage--

00:37:16.260 --> 00:37:18.301
DAVE BURKE: Well, am I
going to steal the thunder

00:37:18.301 --> 00:37:20.340
if I mention it, how cool
it is, how fast it is?

00:37:20.340 --> 00:37:21.840
Did you know that we
used to only garbage

00:37:21.840 --> 00:37:23.550
collect when processes
were in the background,

00:37:23.550 --> 00:37:25.200
but now that it's so
fast we garbage collect

00:37:25.200 --> 00:37:25.950
in the foreground?

00:37:25.950 --> 00:37:27.780
It's super cool.

00:37:27.780 --> 00:37:31.230
But I am stealing Brian's
thunder, so I'll stop now.

00:37:31.230 --> 00:37:34.850
And also Dex code layout,
did we talk about that?

00:37:34.850 --> 00:37:36.110
Is that your thunder?

00:37:36.110 --> 00:37:36.900
It's been stolen.

00:37:36.900 --> 00:37:38.695
OK, so I'll stop
stealing his thunder.

00:37:38.695 --> 00:37:40.320
You should go to the
art talk tomorrow.

00:37:40.320 --> 00:37:43.445
It's cool stuff.

00:37:43.445 --> 00:37:45.150
CHET HAASE: I have a
hard time believing

00:37:45.150 --> 00:37:48.129
you guys fit everything
into all your presentations.

00:37:54.000 --> 00:37:55.491
Yes.

00:37:55.491 --> 00:37:58.080
AUDIENCE: So our app is
localized in about 50

00:37:58.080 --> 00:38:00.240
languages, and we also
have a lot of resources

00:38:00.240 --> 00:38:02.310
that are localized as well.

00:38:02.310 --> 00:38:04.290
Is there any
thought around being

00:38:04.290 --> 00:38:08.340
able to conditionally download
those resources as opposed

00:38:08.340 --> 00:38:12.820
to addressing them all in one
massive resource definition?

00:38:12.820 --> 00:38:15.374
The purpose of a
smaller app basically.

00:38:15.374 --> 00:38:17.040
DIANNE HACKBORN: Yeah,
Google definitely

00:38:17.040 --> 00:38:18.415
has that problem
with their apps,

00:38:18.415 --> 00:38:21.680
and it's something
we're aware of.

00:38:21.680 --> 00:38:24.390
There's-- I'm not going to
talk about future stuff.

00:38:24.390 --> 00:38:27.120
There is split APKs that we
introduced in the platform in L

00:38:27.120 --> 00:38:28.360
that's not being used yet.

00:38:28.360 --> 00:38:33.030
And we are kind of setting
up to address that problem,

00:38:33.030 --> 00:38:34.328
but nothing right now.

00:38:34.328 --> 00:38:36.568
AUDIENCE: Thanks.

00:38:36.568 --> 00:38:40.035
ROMAIN GUY: I have an answer
for the previous question.

00:38:40.035 --> 00:38:41.160
It's something my team did.

00:38:41.160 --> 00:38:42.960
I should have thought about it.

00:38:42.960 --> 00:38:44.790
Updateable graphics drivers.

00:38:44.790 --> 00:38:48.390
We now in O have the ability
to update the graphics drivers

00:38:48.390 --> 00:38:51.036
from the Play Store.

00:38:51.036 --> 00:38:54.000
[APPLAUSE]

00:38:54.000 --> 00:38:58.706
CHET HAASE: We have time
for one more question.

00:38:58.706 --> 00:39:01.250
AUDIENCE: Is Volley still
the recommended networking

00:39:01.250 --> 00:39:03.471
solution?

00:39:03.471 --> 00:39:04.970
ROMAIN GUY: [INAUDIBLE]
is not here.

00:39:04.970 --> 00:39:08.025
Can we say no?

00:39:08.025 --> 00:39:10.240
YIGIT BOYAR: So in the
architecture components,

00:39:10.240 --> 00:39:12.380
we recommend using retrofits.

00:39:12.380 --> 00:39:15.250
We already use [INAUDIBLE].

00:39:15.250 --> 00:39:16.310
That's what we say.

00:39:19.000 --> 00:39:21.500
So also if you are
doing image loading,

00:39:21.500 --> 00:39:23.570
we think Glide is a
very nice library,

00:39:23.570 --> 00:39:26.310
but these are recommendations.

00:39:26.310 --> 00:39:28.885
That's it.

00:39:28.885 --> 00:39:29.750
CHET HAASE: Thanks.

00:39:29.750 --> 00:39:31.760
We did have one more
important question online,

00:39:31.760 --> 00:39:32.968
and then we'll close it down.

00:39:32.968 --> 00:39:35.630
It was, my app crashes
with null pointer exception

00:39:35.630 --> 00:39:38.990
when the user rotates
the phone while a network

00:39:38.990 --> 00:39:40.160
request is happening.

00:39:40.160 --> 00:39:43.736
Do you have any plans to fix?

00:39:43.736 --> 00:39:44.982
YIGIT BOYAR: Yes.

00:39:44.982 --> 00:39:45.664
[APPLAUSE]

00:39:45.664 --> 00:39:46.580
CHET HAASE: Thank you.

00:39:46.580 --> 00:39:51.155
[APPLAUSE]

