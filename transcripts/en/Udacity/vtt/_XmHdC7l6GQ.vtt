WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:03.480
Let's look at the answer for
our cache line size quiz.

00:00:03.480 --> 00:00:08.450
We are asked to determine which of
these are not good line sizes for

00:00:08.450 --> 00:00:10.190
a 2 kilobyte cache?

00:00:10.190 --> 00:00:16.306
A 1 byte line is not a good one because
it doesn't exploit spatial locality and

00:00:16.306 --> 00:00:21.406
because Word size accesses will
need to access multiple blocks or

00:00:21.406 --> 00:00:23.750
multiple lines in the cache.

00:00:23.750 --> 00:00:27.221
So this is definitely not a good size.

00:00:27.221 --> 00:00:31.986
Thirty-two bytes is a good size.

00:00:31.986 --> 00:00:36.290
It exploits spatial localities, it's not
too large, and it's a power of 2, so

00:00:36.290 --> 00:00:38.560
we can easily locate blocks.

00:00:38.560 --> 00:00:42.110
If I give you an address, you can easily
find what block does it belong to.

00:00:42.110 --> 00:00:46.370
Forty-eight bytes is a good size,

00:00:46.370 --> 00:00:51.390
as far as, it's not too large or
too small but it's not a power of 2.

00:00:51.390 --> 00:00:56.020
So if we are given an address and
we need to find out what is the block

00:00:56.020 --> 00:00:58.780
that contains that address,
we need to divide by 48,

00:00:58.780 --> 00:01:04.069
which is much more complicated
then dividing by a power of 2.

00:01:04.069 --> 00:01:07.220
For example, for a 32 byte size,

00:01:07.220 --> 00:01:11.760
the lowest 5 bits of the address tell
us where we are within the block,

00:01:11.760 --> 00:01:16.390
this kind of telling us where within
the 32 bytes of a block we are and

00:01:16.390 --> 00:01:20.400
the upper bits of the address
basically are the block number.

00:01:20.400 --> 00:01:26.650
We divide by 32, simply by
discarding the lowermost 32 bytes.

00:01:26.650 --> 00:01:30.590
In contrast, dividing by 48 bytes would
actually need to be a division by 48.

00:01:30.590 --> 00:01:35.605
So this is not a good line size.

00:01:35.605 --> 00:01:38.300
Sixty-four bytes is also
a reasonable block size.

00:01:38.300 --> 00:01:44.690
It's larger then 32 but still a lot
of them fit in a 2 kilobyte cache.

00:01:44.690 --> 00:01:49.090
One kilobyte is good because
it's a power of 2 but

00:01:49.090 --> 00:01:52.715
only two of them fit
in a 2 kilobyte cache.

00:01:52.715 --> 00:01:56.355
So this is not a good line
size because it is too large

00:01:56.355 --> 00:01:59.065
given that the cache is
only 2 kilobytes in size.

00:01:59.065 --> 00:02:03.625
What we want to have as a block size is
something that is a power of 2, exploits

00:02:03.625 --> 00:02:08.955
spatial locality but still a significant
number of them fit in our cache.

