WEBVTT
Kind: captions
Language: en

00:00:00.585 --> 00:00:02.460
MILENA NIKOLIC: Hi,
we're here to talk to you

00:00:02.460 --> 00:00:06.600
about how we are rethinking app
distribution on Google Play.

00:00:06.600 --> 00:00:09.600
We'll talk about the new app
publishing format, the Android

00:00:09.600 --> 00:00:12.480
bundle, which we've
launched with I/O year

00:00:12.480 --> 00:00:17.230
and all the features we've built
since kind of in this area.

00:00:17.230 --> 00:00:20.220
But to start with, let's
talk about the app size,

00:00:20.220 --> 00:00:22.650
why does the app
size even matter?

00:00:22.650 --> 00:00:25.620
KOBI GLICK: So you all know
that app size is important.

00:00:25.620 --> 00:00:27.990
We shared with you this
chart earlier this year

00:00:27.990 --> 00:00:31.770
at Google I/O. According
to play store data,

00:00:31.770 --> 00:00:36.930
as app size gets bigger, there
install success rate goes down.

00:00:36.930 --> 00:00:40.650
Users don't have enough storage,
especially in emerging markets

00:00:40.650 --> 00:00:45.600
where the connections are
slow, the data is expensive.

00:00:45.600 --> 00:00:48.660
And I want you to think about
your own experience too.

00:00:48.660 --> 00:00:50.850
How many of you have
seen this message

00:00:50.850 --> 00:00:54.210
by Google Play asking
you to uninstall apps

00:00:54.210 --> 00:00:57.150
to make space for more installs?

00:00:57.150 --> 00:01:01.020
Millions of users
see that every day.

00:01:01.020 --> 00:01:04.319
We started to look into
this more closely recently,

00:01:04.319 --> 00:01:07.320
and we found out that
clearing up space

00:01:07.320 --> 00:01:11.230
is a major driver of uninstalls.

00:01:11.230 --> 00:01:14.380
And this is obviously a
problem for entry level devices

00:01:14.380 --> 00:01:16.570
in emerging markets,
but it's also

00:01:16.570 --> 00:01:21.060
a problem for users who fill up
their devices with HD content.

00:01:21.060 --> 00:01:26.300
Take the US and the UK, for
example, one in five users

00:01:26.300 --> 00:01:28.250
are getting to the
point that they run out

00:01:28.250 --> 00:01:32.000
of space in which they can't
really install or update

00:01:32.000 --> 00:01:34.355
anymore.

00:01:34.355 --> 00:01:36.730
MILENA NIKOLIC: A key request
we've heard from developers

00:01:36.730 --> 00:01:41.360
is also for help understanding
and reducing on installs.

00:01:41.360 --> 00:01:44.840
We ran a user research study
with our users in the US

00:01:44.840 --> 00:01:48.440
about the reasons why
they uninstall apps.

00:01:48.440 --> 00:01:50.090
And what we've
heard as the leading

00:01:50.090 --> 00:01:53.270
reasons why users uninstall
within the first day

00:01:53.270 --> 00:01:54.720
is quality.

00:01:54.720 --> 00:01:56.790
Quality is something
we do care a lot.

00:01:56.790 --> 00:01:59.540
And as Thomson has said,
we have a separate Android

00:01:59.540 --> 00:02:01.610
vital session later
where we can tell you

00:02:01.610 --> 00:02:04.850
all about how to improve
the performance of your app.

00:02:04.850 --> 00:02:08.330
However, the leading reasons
why users uninstall the apps

00:02:08.330 --> 00:02:11.090
after it's been on
the device for a month

00:02:11.090 --> 00:02:14.310
is to save up space.

00:02:14.310 --> 00:02:16.260
So what this shows
you is that there

00:02:16.260 --> 00:02:18.330
are two big reasons
why you should care

00:02:18.330 --> 00:02:20.580
about the size of your app.

00:02:20.580 --> 00:02:24.720
Bigger apps lose acquisitions,
and bigger apps also

00:02:24.720 --> 00:02:28.280
get uninstalled more often.

00:02:28.280 --> 00:02:31.340
I think many of you are, kind
of, already aware of this.

00:02:31.340 --> 00:02:34.910
So you would think that everyone
would be doing everything

00:02:34.910 --> 00:02:37.550
in their power to reduce
the size of their app.

00:02:37.550 --> 00:02:42.950
And yet, apps and games
keep getting better.

00:02:42.950 --> 00:02:46.220
Over the last five years,
the size of the app

00:02:46.220 --> 00:02:49.850
has effectively
went five times--

00:02:49.850 --> 00:02:52.640
it's five times
larger on average.

00:02:52.640 --> 00:02:56.390
Newer devices have more
storage, but apps and games

00:02:56.390 --> 00:03:00.410
and HD videos and high res
photos, all of those things

00:03:00.410 --> 00:03:03.060
are getting larger too.

00:03:03.060 --> 00:03:06.140
Now, there are also some
very good reasons why

00:03:06.140 --> 00:03:07.310
the apps are getting bigger.

00:03:07.310 --> 00:03:09.130
Kobi, tell us more about it.

00:03:09.130 --> 00:03:11.750
KOBI GLICK: So the first
reason is that you simply

00:03:11.750 --> 00:03:15.410
keep adding awesome features
and services to your app,

00:03:15.410 --> 00:03:18.320
and you come up with new
ideas and you take advantage

00:03:18.320 --> 00:03:20.000
of device capabilities.

00:03:20.000 --> 00:03:22.100
But with every new
feature, you obviously

00:03:22.100 --> 00:03:24.290
increase the app size.

00:03:24.290 --> 00:03:27.230
And Android has these
amazing diversity.

00:03:27.230 --> 00:03:30.020
There are thousands of
devices to choose from,

00:03:30.020 --> 00:03:32.360
and you want your apps and
games to run beautifully

00:03:32.360 --> 00:03:34.410
on all those devices.

00:03:34.410 --> 00:03:37.460
So many developers add
all those resources

00:03:37.460 --> 00:03:41.330
in their APKs to support
architectures and screen

00:03:41.330 --> 00:03:43.170
densities and languages.

00:03:43.170 --> 00:03:44.990
And when you add all
of these resources,

00:03:44.990 --> 00:03:47.600
you increase the
size of your app.

00:03:47.600 --> 00:03:51.890
So we've seen two main reasons
why apps keep getting bigger.

00:03:51.890 --> 00:03:54.290
You add awesome
features, and you

00:03:54.290 --> 00:03:58.400
add resources to support all
the Android devices out there.

00:03:58.400 --> 00:04:01.970
But we've also seen that
increasing the app size

00:04:01.970 --> 00:04:04.250
comes with downsides.

00:04:04.250 --> 00:04:06.140
And I'm sure some of
you have considered

00:04:06.140 --> 00:04:08.140
the following trade-off before.

00:04:08.140 --> 00:04:13.160
Do I keep on adding features and
resources so my app runs really

00:04:13.160 --> 00:04:16.339
well on all those devices,
but I lose installs

00:04:16.339 --> 00:04:19.440
and drive more on
uninstalls along the way?

00:04:19.440 --> 00:04:21.649
This is a pretty bad trade-off.

00:04:21.649 --> 00:04:25.852
We don't want you to be making
those kind of trade-offs.

00:04:25.852 --> 00:04:27.560
MILENA NIKOLIC: So
there is a current way

00:04:27.560 --> 00:04:31.100
to optimize your app
for different device

00:04:31.100 --> 00:04:32.630
configurations.

00:04:32.630 --> 00:04:36.800
We call it multiple APKs, but
it's, kind of, inefficient

00:04:36.800 --> 00:04:40.220
and, frankly, we think
it can be quite tedious.

00:04:40.220 --> 00:04:42.680
This is what it looks like
in the Play Console when

00:04:42.680 --> 00:04:48.500
you have to upload dozens of
APKs for each of your releases.

00:04:48.500 --> 00:04:51.410
The number of APKs
can grow quite quickly

00:04:51.410 --> 00:04:53.780
with different dimensions,
for example, 64-bit

00:04:53.780 --> 00:04:57.840
versus 32-bit, smaller screens,
larger screens, and so on.

00:04:57.840 --> 00:04:59.900
And then on top of that,
you have to version

00:04:59.900 --> 00:05:02.180
each APK individually,
which kind of adds

00:05:02.180 --> 00:05:04.910
to the complexity about this.

00:05:04.910 --> 00:05:07.910
It also doesn't help with
all of the dimensions.

00:05:07.910 --> 00:05:09.920
For example, for
languages you still need

00:05:09.920 --> 00:05:14.390
to include all languages
in each one of your APKs.

00:05:14.390 --> 00:05:19.110
So multi-APK is not a solution.

00:05:19.110 --> 00:05:19.880
It's not great.

00:05:19.880 --> 00:05:21.560
We know we can do better.

00:05:21.560 --> 00:05:24.410
Let's look at the actual
solution we've built for this

00:05:24.410 --> 00:05:28.070
and how the new app model
helps make your life easier

00:05:28.070 --> 00:05:30.830
in this area.

00:05:30.830 --> 00:05:33.740
New app model is focused on
improving the entire user

00:05:33.740 --> 00:05:38.680
acquisition journey from
discovery through to retention.

00:05:38.680 --> 00:05:43.090
It helps by making your
app smaller, and as such

00:05:43.090 --> 00:05:47.050
kind of improving both your
install and uninstall rate.

00:05:47.050 --> 00:05:49.420
And in addition to
that, it makes managing

00:05:49.420 --> 00:05:50.620
your releases much easier.

00:05:54.782 --> 00:05:56.240
KOBI GLICK: In this
session, we are

00:05:56.240 --> 00:06:00.440
going to talk about four steps
in user acquisition journey we

00:06:00.440 --> 00:06:02.430
want to help you with.

00:06:02.430 --> 00:06:06.430
First, we want to help you with
discovery by allowing users

00:06:06.430 --> 00:06:08.470
to try your apps.

00:06:08.470 --> 00:06:13.090
Then we want to help you
convert users to installers.

00:06:13.090 --> 00:06:16.250
Next, we want to allow
you to deliver features

00:06:16.250 --> 00:06:19.730
and functionality on demand
to different audiences when

00:06:19.730 --> 00:06:21.020
they need it.

00:06:21.020 --> 00:06:23.420
And finally, we want
to help you retain

00:06:23.420 --> 00:06:28.350
your users with the latest and
greatest version of your app.

00:06:28.350 --> 00:06:30.440
We're going to
start by how we help

00:06:30.440 --> 00:06:33.050
you make your installs smaller.

00:06:33.050 --> 00:06:36.110
This is the first step in
your journey as a developer,

00:06:36.110 --> 00:06:38.900
and this is where we made a
big announcement at Google I/O

00:06:38.900 --> 00:06:40.740
with the Android app bundle.

00:06:40.740 --> 00:06:43.850
We are going to talk about the
other steps in user acquisition

00:06:43.850 --> 00:06:47.430
journey later in this talk.

00:06:47.430 --> 00:06:49.410
MILENA NIKOLIC: So
here is the big idea.

00:06:49.410 --> 00:06:52.080
Google Play can
assist and take care

00:06:52.080 --> 00:06:54.540
of delivering only
what is needed

00:06:54.540 --> 00:06:58.050
to each device on your behalf.

00:06:58.050 --> 00:07:02.510
There is no need to send bunch
of free sources or languages

00:07:02.510 --> 00:07:06.810
to users devices if they're
not going to need them.

00:07:06.810 --> 00:07:09.480
We support three
slicing dimensions out

00:07:09.480 --> 00:07:12.660
of the box, CPU
architectures, languages,

00:07:12.660 --> 00:07:15.410
and screen densities.

00:07:15.410 --> 00:07:19.130
To take advantage of this, start
building with a new publishing

00:07:19.130 --> 00:07:22.520
format, the Android app bundle.

00:07:22.520 --> 00:07:25.640
The size reduction
varies, but on average we

00:07:25.640 --> 00:07:30.920
are seeing 35% size savings
compared to universal APK.

00:07:30.920 --> 00:07:33.150
This is huge.

00:07:33.150 --> 00:07:36.710
So with the bundle, you get
resource slicing for free,

00:07:36.710 --> 00:07:40.700
and you're also on the road
to using dynamic features

00:07:40.700 --> 00:07:43.640
and offering instant
experiences both of which

00:07:43.640 --> 00:07:47.030
we'll talk about later.

00:07:47.030 --> 00:07:49.990
And we've been chatting a
lot to developers like you

00:07:49.990 --> 00:07:53.560
about what is the thing they
like about the bundle most.

00:07:53.560 --> 00:07:55.750
Recently, we did a workshop
with some developers

00:07:55.750 --> 00:08:00.210
in India who make some of the
most popular apps over there.

00:08:00.210 --> 00:08:03.910
Riafy, redBus, and Swiggy.

00:08:03.910 --> 00:08:05.880
These developers have
millions of installs,

00:08:05.880 --> 00:08:08.070
and they're very
sophisticated in keeping

00:08:08.070 --> 00:08:10.860
the size of their app small
because their users are

00:08:10.860 --> 00:08:13.340
very sensitive to it.

00:08:13.340 --> 00:08:15.740
Riafy found that
smaller installs

00:08:15.740 --> 00:08:18.290
improved their conversion rate.

00:08:18.290 --> 00:08:22.970
RedBus found that releases were
streamlined and much easier

00:08:22.970 --> 00:08:24.590
to manage.

00:08:24.590 --> 00:08:27.590
And Swiggy found that
switching was a simple process,

00:08:27.590 --> 00:08:29.270
and they were able
to start testing

00:08:29.270 --> 00:08:32.630
with the bundle within an hour.

00:08:32.630 --> 00:08:34.909
KOBI GLICK: And it's not
just developers in India.

00:08:34.909 --> 00:08:38.270
As you can see here,
developers all around the world

00:08:38.270 --> 00:08:42.020
are switching and are seeing
fantastic size savings.

00:08:42.020 --> 00:08:46.760
For example, Duolingo
saw 56% size savings

00:08:46.760 --> 00:08:49.190
compared to universal APK.

00:08:49.190 --> 00:08:51.920
This huge savings
is very difficult

00:08:51.920 --> 00:08:56.240
to achieve with only
incremental optimization.

00:08:56.240 --> 00:08:59.680
So switching to the app bundle
is the single most impactful

00:08:59.680 --> 00:09:03.190
thing developers can do to
reduce the size of their app,

00:09:03.190 --> 00:09:05.770
and Google Apps are
switching as well.

00:09:05.770 --> 00:09:09.010
YouTube, Google
Maps, and Google News

00:09:09.010 --> 00:09:13.350
are all today in production
with Android app bundles.

00:09:13.350 --> 00:09:15.770
So as you can see, this
is not experimental.

00:09:15.770 --> 00:09:17.090
This is ready.

00:09:17.090 --> 00:09:20.930
We have thousands of
bundles in production today.

00:09:20.930 --> 00:09:24.080
It's time for all developers
to switch to the new publishing

00:09:24.080 --> 00:09:25.100
format.

00:09:25.100 --> 00:09:26.600
MILENA NIKOLIC: As
a matter of fact,

00:09:26.600 --> 00:09:28.580
we've just crossed
10,000 overnight tonight.

00:09:28.580 --> 00:09:30.930
KOBI GLICK: Yesterday.

00:09:30.930 --> 00:09:34.710
In Android Studio 3.2, which
is now stable and available

00:09:34.710 --> 00:09:38.530
to all developers,
you can build bundles.

00:09:38.530 --> 00:09:40.420
It's very similar
to building an APK,

00:09:40.420 --> 00:09:42.760
so the switch is pretty
straightforward for most

00:09:42.760 --> 00:09:44.850
developers.

00:09:44.850 --> 00:09:47.460
And in the Play Console,
we're starting to show you

00:09:47.460 --> 00:09:49.560
this very colorful chart.

00:09:49.560 --> 00:09:53.070
When we think you could benefit
from moving to the bundle,

00:09:53.070 --> 00:09:54.960
we'll take a common
reference device

00:09:54.960 --> 00:09:57.210
and we'll calculate
how much you save

00:09:57.210 --> 00:10:00.730
comparing to a universal APK.

00:10:00.730 --> 00:10:02.480
MILENA NIKOLIC: And
we're excited to share

00:10:02.480 --> 00:10:07.670
that games using Unity can now
start building the bundle too.

00:10:07.670 --> 00:10:09.860
Unity added support
for our bundles

00:10:09.860 --> 00:10:12.830
in the 2018 3 beta
release, and you

00:10:12.830 --> 00:10:14.720
can join this beta right now.

00:10:17.240 --> 00:10:20.900
OK, so I think many of you have
heard about all this already,

00:10:20.900 --> 00:10:24.880
but let me explain
how it actually works.

00:10:24.880 --> 00:10:27.220
The way it works is you
put everything related

00:10:27.220 --> 00:10:31.690
to your app in the bundle,
Play processes the bundle

00:10:31.690 --> 00:10:34.960
and generates these
optimize APKs.

00:10:34.960 --> 00:10:38.200
We sign the APKs and
deliver each signed APK

00:10:38.200 --> 00:10:41.500
to each individual user device.

00:10:41.500 --> 00:10:43.440
This means that
the new app model

00:10:43.440 --> 00:10:50.120
requires you to upload your
signing key to Google Play.

00:10:50.120 --> 00:10:52.670
And again in conversations
I've had with developers

00:10:52.670 --> 00:10:55.355
like yourselves, sometimes I've
heard the question of, like,

00:10:55.355 --> 00:10:56.690
is this secure?

00:10:56.690 --> 00:10:59.870
And the answer is absolutely.

00:10:59.870 --> 00:11:03.300
Rest assured that we take
this very, very seriously.

00:11:03.300 --> 00:11:06.150
We protect your keys
in the same storage

00:11:06.150 --> 00:11:09.320
that we protect Google's
own signing keys.

00:11:09.320 --> 00:11:12.230
We have a large team of
engineers focused entirely

00:11:12.230 --> 00:11:14.600
on security, and
you will benefit

00:11:14.600 --> 00:11:18.200
from our ongoing
investments in this area.

00:11:18.200 --> 00:11:20.360
And the reason this
step is so critical

00:11:20.360 --> 00:11:22.790
is because when we
have the signing key,

00:11:22.790 --> 00:11:26.390
we can optimize the app
that we deliver to devices

00:11:26.390 --> 00:11:29.330
on an ongoing basis without
your continuous work

00:11:29.330 --> 00:11:30.280
and improvements.

00:11:30.280 --> 00:11:32.670
Kobi, do you want to share
one of those examples?

00:11:32.670 --> 00:11:33.950
KOBI GLICK: Sure.

00:11:33.950 --> 00:11:37.070
So because Google Play
does the processing,

00:11:37.070 --> 00:11:39.500
we can introduce those
kind of optimizations

00:11:39.500 --> 00:11:43.830
without asking you to
put any time and effort.

00:11:43.830 --> 00:11:46.910
So we just launched a new
optimization for developers

00:11:46.910 --> 00:11:51.650
to upload app bundles
for an Android OS feature

00:11:51.650 --> 00:11:53.930
that was introduced
in Android M called

00:11:53.930 --> 00:11:56.480
uncompressed native libraries.

00:11:56.480 --> 00:12:00.080
Before Android M, you need
to provide native libraries

00:12:00.080 --> 00:12:02.720
compressed and the
OS uncompresses them

00:12:02.720 --> 00:12:05.930
so it installs two
copies on the device.

00:12:05.930 --> 00:12:09.290
After Android M, you can
provide your native libraries

00:12:09.290 --> 00:12:12.740
uncompressed and the OS
only installs a single copy

00:12:12.740 --> 00:12:15.550
saving a lot of space.

00:12:15.550 --> 00:12:18.300
Now because Google Play
does the processing,

00:12:18.300 --> 00:12:19.380
we can do it for you.

00:12:19.380 --> 00:12:25.140
But if we haven't, you actually
need to fork your app for pre-M

00:12:25.140 --> 00:12:29.440
and post M with multi-APK,
which is pretty painful.

00:12:29.440 --> 00:12:31.470
And who would want
to do that, right?

00:12:31.470 --> 00:12:34.560
So we're doing it for you.

00:12:34.560 --> 00:12:36.750
If you're using the
app bundle, you just

00:12:36.750 --> 00:12:40.470
give us your native libraries
compressed or uncompressed.

00:12:40.470 --> 00:12:44.520
We create the different
flavors for pre-M and post

00:12:44.520 --> 00:12:48.360
M saving users a lot
of space on the device.

00:12:48.360 --> 00:12:50.290
The numbers you see
here, for example,

00:12:50.290 --> 00:12:53.190
are for a Gameloft
game, My Little Pony.

00:12:53.190 --> 00:12:55.560
These numbers are on top of
the numbers they actually

00:12:55.560 --> 00:12:59.100
got from switching to the
bundle in the first place.

00:12:59.100 --> 00:13:02.280
The numbers we're seeing on
average across the entire app

00:13:02.280 --> 00:13:05.130
corpus are still
very significant,

00:13:05.130 --> 00:13:09.030
8% reduction in the
download sides on average

00:13:09.030 --> 00:13:14.200
and 16% reduction in
size on disk on average.

00:13:14.200 --> 00:13:18.450
So with this optimization,
the download is smaller,

00:13:18.450 --> 00:13:22.950
the install is faster, and
it takes less space on disk.

00:13:22.950 --> 00:13:25.800
And this is exactly the
kind of optimizations

00:13:25.800 --> 00:13:29.100
we can introduce on your
behalf without asking

00:13:29.100 --> 00:13:32.430
you to put any time or effort.

00:13:32.430 --> 00:13:34.810
And I guess some of
you might be thinking,

00:13:34.810 --> 00:13:38.910
well, if we provide Google Play
our libraries uncompressed,

00:13:38.910 --> 00:13:41.850
it might increase the
size of the artifact

00:13:41.850 --> 00:13:43.620
we upload to Google.

00:13:43.620 --> 00:13:45.480
And some of you might
be worried that it

00:13:45.480 --> 00:13:49.170
may push your limit over the
100 megabyte upload limit

00:13:49.170 --> 00:13:51.090
we have in the Play Console.

00:13:51.090 --> 00:13:54.510
So the good news is that we're
actually changing all the size

00:13:54.510 --> 00:13:57.120
logic in the Play
Console to be based

00:13:57.120 --> 00:13:59.640
on the compressed download size.

00:13:59.640 --> 00:14:02.760
The upload size isn't really
meaningful, especially

00:14:02.760 --> 00:14:05.640
not in the world of bundles.

00:14:05.640 --> 00:14:07.810
It is not what the
user downloads,

00:14:07.810 --> 00:14:10.680
and it's not what
ends on their device.

00:14:10.680 --> 00:14:15.030
So starting today, all the size
validations in the Play Console

00:14:15.030 --> 00:14:19.017
are based on the
compressed download size.

00:14:19.017 --> 00:14:20.850
MILENA NIKOLIC: And
there is one more change

00:14:20.850 --> 00:14:23.310
we are making to
the app size limits.

00:14:23.310 --> 00:14:25.560
We were very keen
to make life easier

00:14:25.560 --> 00:14:28.920
even for developers of large
apps who rely on expansion

00:14:28.920 --> 00:14:30.660
files to date.

00:14:30.660 --> 00:14:33.540
So I'm happy to announce we
are increasing the download

00:14:33.540 --> 00:14:38.490
size for a APKs generated from
the bundle from 100 megabytes

00:14:38.490 --> 00:14:41.070
to 500 megabytes.

00:14:41.070 --> 00:14:44.250
This means that for apps
up to 500 megabytes,

00:14:44.250 --> 00:14:47.730
you can stop using
expansion files entirely.

00:14:47.730 --> 00:14:50.460
This doesn't change the size
warning on the Play Store,

00:14:50.460 --> 00:14:53.490
but it does mean that
releasing large app

00:14:53.490 --> 00:14:57.120
is much easier to manage.

00:14:57.120 --> 00:15:00.360
Adobe has been testing
large app bundles with us

00:15:00.360 --> 00:15:04.950
with their new video editing
app, Adobe Premiere Rush.

00:15:04.950 --> 00:15:07.080
This premium video
editing software

00:15:07.080 --> 00:15:10.650
is coming soon to
Android and Chromebooks.

00:15:10.650 --> 00:15:13.450
Adobe Premium Rush uses
a lot of native code,

00:15:13.450 --> 00:15:15.720
so this means that
for them bundles

00:15:15.720 --> 00:15:19.140
saves them quite a lot of disk
space on each individual user

00:15:19.140 --> 00:15:21.030
device.

00:15:21.030 --> 00:15:22.860
We are inviting
early access partners

00:15:22.860 --> 00:15:25.500
to start testing this with us,
so if you're interested, please

00:15:25.500 --> 00:15:29.250
reach out to your beta manager.

00:15:29.250 --> 00:15:32.880
OK, so to recap that was the
latest for the Android app

00:15:32.880 --> 00:15:35.730
bundle and how we are
making your apps smaller

00:15:35.730 --> 00:15:38.430
and your releases simpler.

00:15:38.430 --> 00:15:41.850
The next big change that
the new app model introduces

00:15:41.850 --> 00:15:45.570
is modularization and
dynamic code loading.

00:15:45.570 --> 00:15:50.160
This is an approved safe way to
load functionality and features

00:15:50.160 --> 00:15:55.380
dynamically making your app
store smaller at install time.

00:15:55.380 --> 00:15:58.640
Let me tell you how this works.

00:15:58.640 --> 00:16:00.240
Dynamic features
are conceptually

00:16:00.240 --> 00:16:03.060
similar to all the other
things we do for our--

00:16:03.060 --> 00:16:04.290
for our bundles.

00:16:04.290 --> 00:16:08.230
You don't need to send the same
features to 100% of your users

00:16:08.230 --> 00:16:11.310
if you know that only
maybe about 10% of them

00:16:11.310 --> 00:16:12.990
will be using it.

00:16:12.990 --> 00:16:14.520
However, there's
one big difference

00:16:14.520 --> 00:16:18.060
between dynamic feature
modularization and resource

00:16:18.060 --> 00:16:21.810
modularization, and that is that
feature marginalization doesn't

00:16:21.810 --> 00:16:23.760
happen among
predefined binaries.

00:16:23.760 --> 00:16:26.550
Basically, you are in
full control around

00:16:26.550 --> 00:16:28.740
how you slice out
your app and what

00:16:28.740 --> 00:16:33.690
are the things you want
delivered dynamically.

00:16:33.690 --> 00:16:36.470
Dynamic features can
be installed on demand

00:16:36.470 --> 00:16:39.320
when users request
them, or you can

00:16:39.320 --> 00:16:41.840
choose to deferred
installation to a later time,

00:16:41.840 --> 00:16:45.860
for example, when app
goes to the background.

00:16:45.860 --> 00:16:49.790
On pre-L devices that don't
support dynamic features,

00:16:49.790 --> 00:16:52.880
we fuse all these
optionals into the main app

00:16:52.880 --> 00:16:56.270
so it's delivered
at the install time.

00:16:56.270 --> 00:16:59.450
All of these use cases that I've
just very briefly went through

00:16:59.450 --> 00:17:01.850
are currently
supported in production

00:17:01.850 --> 00:17:04.069
by some of the largest
apps on the platform

00:17:04.069 --> 00:17:07.970
and millions of users have been
benefiting from them already.

00:17:07.970 --> 00:17:10.099
Facebook was one of
our launch partners

00:17:10.099 --> 00:17:12.410
for this functionality,
and currently they're

00:17:12.410 --> 00:17:14.660
using dynamic
features in production

00:17:14.660 --> 00:17:17.069
across their entire
app portfolio.

00:17:17.069 --> 00:17:19.380
Let's take a look
at their story.

00:17:19.380 --> 00:17:22.760
KOBI GLICK: So app size is
really important to Facebook.

00:17:22.760 --> 00:17:24.770
When launching
new features, they

00:17:24.770 --> 00:17:28.640
evaluate the features
benefit with this size

00:17:28.640 --> 00:17:30.880
it actually adds to the app.

00:17:30.880 --> 00:17:34.510
Dynamic features allow
them to add functionality

00:17:34.510 --> 00:17:37.510
to apps like Facebook
and Facebook Lite

00:17:37.510 --> 00:17:42.870
without increasing the size
of the app that install time.

00:17:42.870 --> 00:17:45.720
Dynamic features are also
important to their high end

00:17:45.720 --> 00:17:47.760
device strategy,
because they can

00:17:47.760 --> 00:17:53.070
ship specific advanced features
only to supported devices.

00:17:53.070 --> 00:17:55.680
They can also remove
features over time

00:17:55.680 --> 00:17:57.960
to save space so the
feature don't stay

00:17:57.960 --> 00:18:01.680
for the lifetime of the app.

00:18:01.680 --> 00:18:05.160
Facebook told us that dynamic
features work especially well

00:18:05.160 --> 00:18:08.400
for new features that
are separate-- logically

00:18:08.400 --> 00:18:10.560
separate from the main app.

00:18:10.560 --> 00:18:14.160
They can have a separate team of
engineers work on that feature

00:18:14.160 --> 00:18:16.650
and they can then
add them to the app

00:18:16.650 --> 00:18:20.620
without impacting its
base install size.

00:18:20.620 --> 00:18:24.600
Here are some cool examples of
features that are used today

00:18:24.600 --> 00:18:27.720
in production by Facebook apps.

00:18:27.720 --> 00:18:30.780
One example, for example,
is card scanning.

00:18:30.780 --> 00:18:32.340
Card scanning is
the functionality

00:18:32.340 --> 00:18:35.850
that is only used by a small
percentage or Facebook user

00:18:35.850 --> 00:18:36.810
base.

00:18:36.810 --> 00:18:39.690
So by turning this into
a dynamic features,

00:18:39.690 --> 00:18:45.530
they avoid shipping almost two
megabytes to every user device.

00:18:45.530 --> 00:18:48.880
Another example is real
time communication.

00:18:48.880 --> 00:18:53.140
By moving voice in video
chat to a dynamic feature,

00:18:53.140 --> 00:18:55.120
they can make sure
these features are only

00:18:55.120 --> 00:18:57.580
shipped to devices
that support them

00:18:57.580 --> 00:18:59.620
and only to user who
are interested in using

00:18:59.620 --> 00:19:02.090
those features.

00:19:02.090 --> 00:19:04.240
So this is about
dynamic features.

00:19:04.240 --> 00:19:09.250
They make it possible for you to
build highly configurable apps

00:19:09.250 --> 00:19:11.860
and, as we've seen,
using production

00:19:11.860 --> 00:19:15.950
by some of the biggest
developers on the platform.

00:19:15.950 --> 00:19:18.940
Now let's talk about
another type of module.

00:19:18.940 --> 00:19:22.850
The Android app bundle
support instant app modules.

00:19:22.850 --> 00:19:25.390
So the next section is
all about the first step

00:19:25.390 --> 00:19:29.050
in user acquisition journey, and
how we help you with discovery

00:19:29.050 --> 00:19:32.583
by helping users try your apps.

00:19:32.583 --> 00:19:34.000
MILENA NIKOLIC:
We've been working

00:19:34.000 --> 00:19:36.220
on instant apps over
the past two years

00:19:36.220 --> 00:19:39.040
and improving it based
on your feedback.

00:19:39.040 --> 00:19:42.960
We recently made URLs
optional, and we've added

00:19:42.960 --> 00:19:46.260
try now flow on the Play Store.

00:19:46.260 --> 00:19:50.260
Google Play Instant is now
on 1.3 billion devices,

00:19:50.260 --> 00:19:53.070
and it is highly compelling.

00:19:53.070 --> 00:19:55.620
Historically, it used
to be non-trivial effort

00:19:55.620 --> 00:19:58.770
for developers to adopt this
because of the independent

00:19:58.770 --> 00:20:02.040
build and release process.

00:20:02.040 --> 00:20:05.160
Now you don't have to worry
about building and maintaining

00:20:05.160 --> 00:20:09.060
your instant apps separately
from your installed app.

00:20:09.060 --> 00:20:12.840
As of recently, the Android app
bundle supports instant apps

00:20:12.840 --> 00:20:16.490
and makes adoption much easier.

00:20:16.490 --> 00:20:20.210
In Android Studio 3.2, you
can build an instant app

00:20:20.210 --> 00:20:23.230
with the app bundle format.

00:20:23.230 --> 00:20:26.230
This lets you benefit from all
the bundled size optimizations,

00:20:26.230 --> 00:20:28.510
which means that you can
get under the instant app

00:20:28.510 --> 00:20:31.000
limit much easier.

00:20:31.000 --> 00:20:33.320
The requirements general
are pretty simple.

00:20:33.320 --> 00:20:37.620
Your instant app module and
your main app entry point module

00:20:37.620 --> 00:20:40.450
need to be under 10 megabytes
to enable the Try Now

00:20:40.450 --> 00:20:42.670
button in the Play
Store, and you

00:20:42.670 --> 00:20:44.290
need to handle
permissions gracefully

00:20:44.290 --> 00:20:46.570
like all apps should anyway.

00:20:46.570 --> 00:20:48.610
But that's not all.

00:20:48.610 --> 00:20:50.770
KOBI GLICK: It's going
to become even easier.

00:20:50.770 --> 00:20:54.490
In Android Studio
3.3 beta version,

00:20:54.490 --> 00:20:58.120
you can now build and
upload a single artifact

00:20:58.120 --> 00:21:00.370
for your instant
and installed app,

00:21:00.370 --> 00:21:04.030
We let you upload an artifact
of any size to the Play Console,

00:21:04.030 --> 00:21:07.030
and then you can start reducing
the size of the artifact

00:21:07.030 --> 00:21:09.340
to meet the 10 megabyte limit.

00:21:09.340 --> 00:21:11.890
As we've seen earlier,
using dynamic features

00:21:11.890 --> 00:21:15.340
is a key strategy in reducing
the size of your app.

00:21:18.010 --> 00:21:21.630
This makes it possible
for many, many more of you

00:21:21.630 --> 00:21:24.180
to start offering
instant experiences

00:21:24.180 --> 00:21:26.700
for your installed apps.

00:21:26.700 --> 00:21:30.300
And developers going down this
road are seeing great success.

00:21:30.300 --> 00:21:32.490
Because by offering
a trial, you can

00:21:32.490 --> 00:21:36.360
capture many users who would
have otherwise moved on

00:21:36.360 --> 00:21:38.610
without installing your app.

00:21:38.610 --> 00:21:41.040
Ultimate guitar you
see here told us

00:21:41.040 --> 00:21:43.170
that once they launched
your instant app,

00:21:43.170 --> 00:21:46.770
they've seen 8% increase
in their install size

00:21:46.770 --> 00:21:50.400
and that 20% of users
who click Try Now

00:21:50.400 --> 00:21:54.130
ended up installing the app.

00:21:54.130 --> 00:21:56.760
So this is about
how we allow you

00:21:56.760 --> 00:22:02.710
to now offer instant experiences
using the Android app bundle.

00:22:02.710 --> 00:22:04.860
Now let's talk about
the final step in user

00:22:04.860 --> 00:22:08.870
acquisition journey,
retaining users over time.

00:22:08.870 --> 00:22:12.120
And one of the ways you do
that is by making sure users

00:22:12.120 --> 00:22:15.440
use your latest and
greatest app version.

00:22:15.440 --> 00:22:17.510
And you know that
Google Play offers

00:22:17.510 --> 00:22:20.070
auto updates
functionality and many,

00:22:20.070 --> 00:22:24.500
many users have auto update
turned on but not all users.

00:22:24.500 --> 00:22:27.590
And in some markets, even though
users have auto updates turned

00:22:27.590 --> 00:22:30.290
on, they never actually
connect to Wi-Fi so they

00:22:30.290 --> 00:22:33.472
don't get to update their apps.

00:22:33.472 --> 00:22:35.930
MILENA NIKOLIC: I'm very happy
to announce that today we're

00:22:35.930 --> 00:22:40.520
launching a new API that allows
you to prompt users to update

00:22:40.520 --> 00:22:43.400
without ever leaving your app.

00:22:43.400 --> 00:22:46.430
You can call this API
to determine if there

00:22:46.430 --> 00:22:48.140
is an update available.

00:22:48.140 --> 00:22:52.220
And if so, you can show
prompt to users asking

00:22:52.220 --> 00:22:54.950
them to accept the update.

00:22:54.950 --> 00:22:56.690
In this example,
flow is designed

00:22:56.690 --> 00:23:01.160
for immediate critical use
cases like privacy or revenue

00:23:01.160 --> 00:23:02.900
affecting bugs.

00:23:02.900 --> 00:23:05.330
It's a full screen
experience where

00:23:05.330 --> 00:23:08.885
the user is expected to wait
until the download is complete

00:23:08.885 --> 00:23:10.010
so that they can, kind of--

00:23:10.010 --> 00:23:13.220
they can start using
the new experience.

00:23:13.220 --> 00:23:15.260
We make this quite
easy for you to adopt,

00:23:15.260 --> 00:23:17.870
because we take care of
all the updating of the app

00:23:17.870 --> 00:23:20.750
and the entire lifecycle
related to that.

00:23:20.750 --> 00:23:23.480
I think some of you have already
built flows similar to this,

00:23:23.480 --> 00:23:25.830
but this is now a
standardized method,

00:23:25.830 --> 00:23:30.080
which can be adopted
very, very easily.

00:23:30.080 --> 00:23:32.530
However, instead of
an immediate update,

00:23:32.530 --> 00:23:34.650
you can also do
a flexible update

00:23:34.650 --> 00:23:36.460
with this API,
which doesn't have

00:23:36.460 --> 00:23:38.530
to be applied straight away.

00:23:38.530 --> 00:23:41.470
This is actually my favorite
part about this API.

00:23:41.470 --> 00:23:44.500
You can completely customize
the update experience

00:23:44.500 --> 00:23:46.240
so that it really
feels like something

00:23:46.240 --> 00:23:48.890
that's part of your app.

00:23:48.890 --> 00:23:51.880
For example, you may decide
to very gently nudge users

00:23:51.880 --> 00:23:54.610
with an inline flow
like Google Chrome is

00:23:54.610 --> 00:23:58.690
doing in this example,
and once the user accepts

00:23:58.690 --> 00:24:02.500
the update the download
starts in the background

00:24:02.500 --> 00:24:05.680
so users can keep using
your app while the down is

00:24:05.680 --> 00:24:07.380
being fetched.

00:24:07.380 --> 00:24:10.570
Once the down is complete,
it's basically up to you

00:24:10.570 --> 00:24:12.580
to decide when you
want to apply it.

00:24:12.580 --> 00:24:14.880
You can do that straight
away and ask user

00:24:14.880 --> 00:24:17.110
to restart the app, you
can wait for the app

00:24:17.110 --> 00:24:22.040
to go back to background, or
for users to stop using it.

00:24:22.040 --> 00:24:23.750
Google Chrome is
testing this now.

00:24:23.750 --> 00:24:26.720
We are inviting all of you
to join us in testing this.

00:24:26.720 --> 00:24:28.280
Again, reach out to
your beta manager

00:24:28.280 --> 00:24:31.380
if you would like to join us.

00:24:31.380 --> 00:24:34.830
OK, so to recap
insuring more users

00:24:34.830 --> 00:24:38.400
use your latest
release is important.

00:24:38.400 --> 00:24:42.030
You can do that by following
some of these best practices

00:24:42.030 --> 00:24:47.130
here or by integrating with
our in app updates API.

00:24:47.130 --> 00:24:49.380
The API is available
for any app,

00:24:49.380 --> 00:24:51.062
so you can get
started with it even

00:24:51.062 --> 00:24:53.520
while you're in the process of
switching to the Android app

00:24:53.520 --> 00:24:55.560
bundle.

00:24:55.560 --> 00:24:58.290
KOBI GLICK: So all the
efforts we showed you today

00:24:58.290 --> 00:25:02.880
are all about helping you
drive more installs and fewer

00:25:02.880 --> 00:25:06.570
uninstalls, offer
highly configurable apps

00:25:06.570 --> 00:25:11.562
through dynamic features, and
keep your users up-to-date.

00:25:11.562 --> 00:25:13.020
If you want to come
and chat to us,

00:25:13.020 --> 00:25:15.062
we'll be around with a
few folks from our product

00:25:15.062 --> 00:25:16.790
and engineering teams.

00:25:16.790 --> 00:25:19.640
If you want to share anything
you've heard about today,

00:25:19.640 --> 00:25:23.960
this link to the medium post
is a great place to start.

00:25:23.960 --> 00:25:25.847
Thank you for listening
and enjoy Playtime.

00:25:25.847 --> 00:25:26.930
MILENA NIKOLIC: Thank you.

00:25:26.930 --> 00:25:31.780
[APPLAUSE]

