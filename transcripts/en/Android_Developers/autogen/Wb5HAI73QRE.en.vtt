WEBVTT
Kind: captions
Language: en

00:00:05.000 --> 00:00:07.730
Android internals we writing performant

00:00:07.730 --> 00:00:07.740
Android internals we writing performant
 

00:00:07.740 --> 00:00:09.860
Android internals we writing performant
native code if you haven't heard enough

00:00:09.860 --> 00:00:09.870
native code if you haven't heard enough
 

00:00:09.870 --> 00:00:12.770
native code if you haven't heard enough
about me already I have spent five plus

00:00:12.770 --> 00:00:12.780
about me already I have spent five plus
 

00:00:12.780 --> 00:00:15.259
about me already I have spent five plus
years talking to developers just like

00:00:15.259 --> 00:00:15.269
years talking to developers just like
 

00:00:15.269 --> 00:00:17.570
years talking to developers just like
you around the world and it is awesome

00:00:17.570 --> 00:00:17.580
you around the world and it is awesome
 

00:00:17.580 --> 00:00:20.029
you around the world and it is awesome
to be here in Hurst and I spent 15 years

00:00:20.029 --> 00:00:20.039
to be here in Hurst and I spent 15 years
 

00:00:20.039 --> 00:00:21.710
to be here in Hurst and I spent 15 years
as a software developer before doing

00:00:21.710 --> 00:00:21.720
as a software developer before doing
 

00:00:21.720 --> 00:00:23.359
as a software developer before doing
that so I have a little bit of street

00:00:23.359 --> 00:00:23.369
that so I have a little bit of street
 

00:00:23.369 --> 00:00:24.650
that so I have a little bit of street
cred I actually started developing

00:00:24.650 --> 00:00:24.660
cred I actually started developing
 

00:00:24.660 --> 00:00:26.950
cred I actually started developing
Android right around Android 1.1

00:00:26.950 --> 00:00:26.960
Android right around Android 1.1
 

00:00:26.960 --> 00:00:29.210
Android right around Android 1.1
seriously actually I started developing

00:00:29.210 --> 00:00:29.220
seriously actually I started developing
 

00:00:29.220 --> 00:00:30.769
seriously actually I started developing
commercially then I was working with it

00:00:30.769 --> 00:00:30.779
commercially then I was working with it
 

00:00:30.779 --> 00:00:32.900
commercially then I was working with it
ever since one dot oh I wear a lot of

00:00:32.900 --> 00:00:32.910
ever since one dot oh I wear a lot of
 

00:00:32.910 --> 00:00:35.209
ever since one dot oh I wear a lot of
hats and these this is like one of the

00:00:35.209 --> 00:00:35.219
hats and these this is like one of the
 

00:00:35.219 --> 00:00:37.729
hats and these this is like one of the
smallest hats that I wear and I have no

00:00:37.729 --> 00:00:37.739
smallest hats that I wear and I have no
 

00:00:37.739 --> 00:00:39.799
smallest hats that I wear and I have no
shame and I think I'm kind of funny

00:00:39.799 --> 00:00:39.809
shame and I think I'm kind of funny
 

00:00:39.809 --> 00:00:42.049
shame and I think I'm kind of funny
sometimes especially with lack of sleep

00:00:42.049 --> 00:00:42.059
sometimes especially with lack of sleep
 

00:00:42.059 --> 00:00:45.770
sometimes especially with lack of sleep
like now all right performant is an

00:00:45.770 --> 00:00:45.780
like now all right performant is an
 

00:00:45.780 --> 00:00:48.920
like now all right performant is an
entirely invented word it is not a real

00:00:48.920 --> 00:00:48.930
entirely invented word it is not a real
 

00:00:48.930 --> 00:00:50.750
entirely invented word it is not a real
word how many of you knew the performant

00:00:50.750 --> 00:00:50.760
word how many of you knew the performant
 

00:00:50.760 --> 00:00:52.910
word how many of you knew the performant
wasn't a real word okay good it got a

00:00:52.910 --> 00:00:52.920
wasn't a real word okay good it got a
 

00:00:52.920 --> 00:00:53.990
wasn't a real word okay good it got a
bunch of English majors here that's

00:00:53.990 --> 00:00:54.000
bunch of English majors here that's
 

00:00:54.000 --> 00:00:57.170
bunch of English majors here that's
awesome so and actually according to

00:00:57.170 --> 00:00:57.180
awesome so and actually according to
 

00:00:57.180 --> 00:00:58.760
awesome so and actually according to
urban dictionary and most of the

00:00:58.760 --> 00:00:58.770
urban dictionary and most of the
 

00:00:58.770 --> 00:01:00.529
urban dictionary and most of the
research that I did because I do

00:01:00.529 --> 00:01:00.539
research that I did because I do
 

00:01:00.539 --> 00:01:02.500
research that I did because I do
extensive research on a talk like this

00:01:02.500 --> 00:01:02.510
extensive research on a talk like this
 

00:01:02.510 --> 00:01:04.789
extensive research on a talk like this
performant was actually invented by

00:01:04.789 --> 00:01:04.799
performant was actually invented by
 

00:01:04.799 --> 00:01:07.969
performant was actually invented by
software developers okay and and and and

00:01:07.969 --> 00:01:07.979
software developers okay and and and and
 

00:01:07.979 --> 00:01:09.890
software developers okay and and and and
there's there's some theories behind

00:01:09.890 --> 00:01:09.900
there's there's some theories behind
 

00:01:09.900 --> 00:01:12.830
there's there's some theories behind
this but the Urban Dictionary defines it

00:01:12.830 --> 00:01:12.840
this but the Urban Dictionary defines it
 

00:01:12.840 --> 00:01:17.600
this but the Urban Dictionary defines it
as having adequate performance and but

00:01:17.600 --> 00:01:17.610
as having adequate performance and but
 

00:01:17.610 --> 00:01:19.910
as having adequate performance and but
really this would not be nearly as cool

00:01:19.910 --> 00:01:19.920
really this would not be nearly as cool
 

00:01:19.920 --> 00:01:23.420
really this would not be nearly as cool
of a talk native code having adequate

00:01:23.420 --> 00:01:23.430
of a talk native code having adequate
 

00:01:23.430 --> 00:01:25.010
of a talk native code having adequate
performance so this is why the word was

00:01:25.010 --> 00:01:25.020
performance so this is why the word was
 

00:01:25.020 --> 00:01:27.050
performance so this is why the word was
created okay it just doesn't have the

00:01:27.050 --> 00:01:27.060
created okay it just doesn't have the
 

00:01:27.060 --> 00:01:28.850
created okay it just doesn't have the
ring to it we don't like adequate in our

00:01:28.850 --> 00:01:28.860
ring to it we don't like adequate in our
 

00:01:28.860 --> 00:01:32.840
ring to it we don't like adequate in our
industry we like awesome so so yeah so

00:01:32.840 --> 00:01:32.850
industry we like awesome so so yeah so
 

00:01:32.850 --> 00:01:34.370
industry we like awesome so so yeah so
rather than title at that I use the

00:01:34.370 --> 00:01:34.380
rather than title at that I use the
 

00:01:34.380 --> 00:01:36.050
rather than title at that I use the
invented word and we're going to be

00:01:36.050 --> 00:01:36.060
invented word and we're going to be
 

00:01:36.060 --> 00:01:38.179
invented word and we're going to be
talking about really really tiny

00:01:38.179 --> 00:01:38.189
talking about really really tiny
 

00:01:38.189 --> 00:01:40.370
talking about really really tiny
benchmarks because you know in order for

00:01:40.370 --> 00:01:40.380
benchmarks because you know in order for
 

00:01:40.380 --> 00:01:43.219
benchmarks because you know in order for
your app to actually perform well you

00:01:43.219 --> 00:01:43.229
your app to actually perform well you
 

00:01:43.229 --> 00:01:44.960
your app to actually perform well you
have to do everything and make sure

00:01:44.960 --> 00:01:44.970
have to do everything and make sure
 

00:01:44.970 --> 00:01:47.030
have to do everything and make sure
everything happens within sixteen point

00:01:47.030 --> 00:01:47.040
everything happens within sixteen point
 

00:01:47.040 --> 00:01:49.490
everything happens within sixteen point
six seven milliseconds that is how you

00:01:49.490 --> 00:01:49.500
six seven milliseconds that is how you
 

00:01:49.500 --> 00:01:52.340
six seven milliseconds that is how you
get 60 frames per second but most of the

00:01:52.340 --> 00:01:52.350
get 60 frames per second but most of the
 

00:01:52.350 --> 00:01:53.510
get 60 frames per second but most of the
benchmarks that I'm going to be talking

00:01:53.510 --> 00:01:53.520
benchmarks that I'm going to be talking
 

00:01:53.520 --> 00:01:56.569
benchmarks that I'm going to be talking
about in this lecture are in nanoseconds

00:01:56.569 --> 00:01:56.579
about in this lecture are in nanoseconds
 

00:01:56.579 --> 00:01:58.490
about in this lecture are in nanoseconds
so if we take this into nanoseconds

00:01:58.490 --> 00:01:58.500
so if we take this into nanoseconds
 

00:01:58.500 --> 00:02:00.859
so if we take this into nanoseconds
that's a lot of nanoseconds so this

00:02:00.859 --> 00:02:00.869
that's a lot of nanoseconds so this
 

00:02:00.869 --> 00:02:03.319
that's a lot of nanoseconds so this
stuff is really really fast so don't

00:02:03.319 --> 00:02:03.329
stuff is really really fast so don't
 

00:02:03.329 --> 00:02:05.209
stuff is really really fast so don't
worry when I tell you it takes five

00:02:05.209 --> 00:02:05.219
worry when I tell you it takes five
 

00:02:05.219 --> 00:02:07.160
worry when I tell you it takes five
times as long to do something on one

00:02:07.160 --> 00:02:07.170
times as long to do something on one
 

00:02:07.170 --> 00:02:09.169
times as long to do something on one
version as the other because it's really

00:02:09.169 --> 00:02:09.179
version as the other because it's really
 

00:02:09.179 --> 00:02:12.130
version as the other because it's really
fast still but it's good for you to know

00:02:12.130 --> 00:02:12.140
fast still but it's good for you to know
 

00:02:12.140 --> 00:02:14.120
fast still but it's good for you to know
all right

00:02:14.120 --> 00:02:14.130
all right
 

00:02:14.130 --> 00:02:17.750
all right
so again do not panic remember the clock

00:02:17.750 --> 00:02:17.760
so again do not panic remember the clock
 

00:02:17.760 --> 00:02:19.700
so again do not panic remember the clock
speed of my Nexus of the Nexus 5 which

00:02:19.700 --> 00:02:19.710
speed of my Nexus of the Nexus 5 which
 

00:02:19.710 --> 00:02:21.170
speed of my Nexus of the Nexus 5 which
is what I used to do most of my testing

00:02:21.170 --> 00:02:21.180
is what I used to do most of my testing
 

00:02:21.180 --> 00:02:22.040
is what I used to do most of my testing
because I wanted something that could

00:02:22.040 --> 00:02:22.050
because I wanted something that could
 

00:02:22.050 --> 00:02:26.780
because I wanted something that could
run KitKat as well as run LNM is about

00:02:26.780 --> 00:02:26.790
run KitKat as well as run LNM is about
 

00:02:26.790 --> 00:02:30.230
run KitKat as well as run LNM is about
2.3 gigahertz tops with 4 cores so

00:02:30.230 --> 00:02:30.240
2.3 gigahertz tops with 4 cores so
 

00:02:30.240 --> 00:02:32.180
2.3 gigahertz tops with 4 cores so
that's that's like billions and billions

00:02:32.180 --> 00:02:32.190
that's that's like billions and billions
 

00:02:32.190 --> 00:02:34.250
that's that's like billions and billions
of instructions you know I know I'm like

00:02:34.250 --> 00:02:34.260
of instructions you know I know I'm like
 

00:02:34.260 --> 00:02:37.010
of instructions you know I know I'm like
sounding like Carl Sagan here so we're

00:02:37.010 --> 00:02:37.020
sounding like Carl Sagan here so we're
 

00:02:37.020 --> 00:02:38.690
sounding like Carl Sagan here so we're
talking in very small micro benchmark

00:02:38.690 --> 00:02:38.700
talking in very small micro benchmark
 

00:02:38.700 --> 00:02:41.990
talking in very small micro benchmark
turns now Android internals is is this

00:02:41.990 --> 00:02:42.000
turns now Android internals is is this
 

00:02:42.000 --> 00:02:43.250
turns now Android internals is is this
kind of thing I'm working up I want to

00:02:43.250 --> 00:02:43.260
kind of thing I'm working up I want to
 

00:02:43.260 --> 00:02:44.840
kind of thing I'm working up I want to
see what you guys think of it so after

00:02:44.840 --> 00:02:44.850
see what you guys think of it so after
 

00:02:44.850 --> 00:02:47.180
see what you guys think of it so after
afterwards we'll have a quiz and it

00:02:47.180 --> 00:02:47.190
afterwards we'll have a quiz and it
 

00:02:47.190 --> 00:02:49.070
afterwards we'll have a quiz and it
really is about the unique voyages of

00:02:49.070 --> 00:02:49.080
really is about the unique voyages of
 

00:02:49.080 --> 00:02:51.860
really is about the unique voyages of
discovery we can take in an open source

00:02:51.860 --> 00:02:51.870
discovery we can take in an open source
 

00:02:51.870 --> 00:02:54.950
discovery we can take in an open source
platform like Android so the idea is not

00:02:54.950 --> 00:02:54.960
platform like Android so the idea is not
 

00:02:54.960 --> 00:02:57.350
platform like Android so the idea is not
just to understand how to code Android

00:02:57.350 --> 00:02:57.360
just to understand how to code Android
 

00:02:57.360 --> 00:02:59.510
just to understand how to code Android
but understand how it works so that when

00:02:59.510 --> 00:02:59.520
but understand how it works so that when
 

00:02:59.520 --> 00:03:00.830
but understand how it works so that when
you run into problems you have a better

00:03:00.830 --> 00:03:00.840
you run into problems you have a better
 

00:03:00.840 --> 00:03:02.450
you run into problems you have a better
idea of actually what you're dealing

00:03:02.450 --> 00:03:02.460
idea of actually what you're dealing
 

00:03:02.460 --> 00:03:04.700
idea of actually what you're dealing
with and and we're gonna do it kind of

00:03:04.700 --> 00:03:04.710
with and and we're gonna do it kind of
 

00:03:04.710 --> 00:03:06.620
with and and we're gonna do it kind of
this way we're gonna actually test our

00:03:06.620 --> 00:03:06.630
this way we're gonna actually test our
 

00:03:06.630 --> 00:03:09.350
this way we're gonna actually test our
assumptions we're gonna benchmark we're

00:03:09.350 --> 00:03:09.360
assumptions we're gonna benchmark we're
 

00:03:09.360 --> 00:03:11.030
assumptions we're gonna benchmark we're
gonna look at source code and we're

00:03:11.030 --> 00:03:11.040
gonna look at source code and we're
 

00:03:11.040 --> 00:03:14.450
gonna look at source code and we're
gonna debug even in native so this

00:03:14.450 --> 00:03:14.460
gonna debug even in native so this
 

00:03:14.460 --> 00:03:17.090
gonna debug even in native so this
voyage once takes us into the land of

00:03:17.090 --> 00:03:17.100
voyage once takes us into the land of
 

00:03:17.100 --> 00:03:19.070
voyage once takes us into the land of
optimizations and art if you saw my talk

00:03:19.070 --> 00:03:19.080
optimizations and art if you saw my talk
 

00:03:19.080 --> 00:03:21.680
optimizations and art if you saw my talk
yesterday I got I got a bit into that

00:03:21.680 --> 00:03:21.690
yesterday I got I got a bit into that
 

00:03:21.690 --> 00:03:23.240
yesterday I got I got a bit into that
but this time we're gonna be a bit more

00:03:23.240 --> 00:03:23.250
but this time we're gonna be a bit more
 

00:03:23.250 --> 00:03:24.770
but this time we're gonna be a bit more
pragmatic because really gonna talk

00:03:24.770 --> 00:03:24.780
pragmatic because really gonna talk
 

00:03:24.780 --> 00:03:27.500
pragmatic because really gonna talk
about how the world of J&amp;I has changed

00:03:27.500 --> 00:03:27.510
about how the world of J&amp;I has changed
 

00:03:27.510 --> 00:03:29.420
about how the world of J&amp;I has changed
as we've moved from a world of delve ik

00:03:29.420 --> 00:03:29.430
as we've moved from a world of delve ik
 

00:03:29.430 --> 00:03:31.550
as we've moved from a world of delve ik
to a world of art but I'm getting ahead

00:03:31.550 --> 00:03:31.560
to a world of art but I'm getting ahead
 

00:03:31.560 --> 00:03:33.050
to a world of art but I'm getting ahead
of myself so let's talk about native

00:03:33.050 --> 00:03:33.060
of myself so let's talk about native
 

00:03:33.060 --> 00:03:34.910
of myself so let's talk about native
code most of you guys have actually done

00:03:34.910 --> 00:03:34.920
code most of you guys have actually done
 

00:03:34.920 --> 00:03:37.310
code most of you guys have actually done
native code but I'm talking about code

00:03:37.310 --> 00:03:37.320
native code but I'm talking about code
 

00:03:37.320 --> 00:03:40.130
native code but I'm talking about code
written using the NDK and we're talking

00:03:40.130 --> 00:03:40.140
written using the NDK and we're talking
 

00:03:40.140 --> 00:03:42.740
written using the NDK and we're talking
about primarily C and C++ code that

00:03:42.740 --> 00:03:42.750
about primarily C and C++ code that
 

00:03:42.750 --> 00:03:43.940
about primarily C and C++ code that
interfaces with the Android runtime

00:03:43.940 --> 00:03:43.950
interfaces with the Android runtime
 

00:03:43.950 --> 00:03:47.420
interfaces with the Android runtime
using j'ni here is a really really

00:03:47.420 --> 00:03:47.430
using j'ni here is a really really
 

00:03:47.430 --> 00:03:49.610
using j'ni here is a really really
abbreviated architecture diagram of what

00:03:49.610 --> 00:03:49.620
abbreviated architecture diagram of what
 

00:03:49.620 --> 00:03:50.740
abbreviated architecture diagram of what
this looks like

00:03:50.740 --> 00:03:50.750
this looks like
 

00:03:50.750 --> 00:03:53.210
this looks like
applications written with the NDK take

00:03:53.210 --> 00:03:53.220
applications written with the NDK take
 

00:03:53.220 --> 00:03:56.170
applications written with the NDK take
the form of these you know Dex classes

00:03:56.170 --> 00:03:56.180
the form of these you know Dex classes
 

00:03:56.180 --> 00:03:59.570
the form of these you know Dex classes
that execute on the Android runtime they

00:03:59.570 --> 00:03:59.580
that execute on the Android runtime they
 

00:03:59.580 --> 00:04:01.490
that execute on the Android runtime they
interact with system libraries by the

00:04:01.490 --> 00:04:01.500
interact with system libraries by the
 

00:04:01.500 --> 00:04:04.970
interact with system libraries by the
SDK framework classes an SDK application

00:04:04.970 --> 00:04:04.980
SDK framework classes an SDK application
 

00:04:04.980 --> 00:04:06.950
SDK framework classes an SDK application
code is written in a language like Java

00:04:06.950 --> 00:04:06.960
code is written in a language like Java
 

00:04:06.960 --> 00:04:09.230
code is written in a language like Java
that the runtime can support so the

00:04:09.230 --> 00:04:09.240
that the runtime can support so the
 

00:04:09.240 --> 00:04:11.060
that the runtime can support so the
Linux kernel was written primarily in C

00:04:11.060 --> 00:04:11.070
Linux kernel was written primarily in C
 

00:04:11.070 --> 00:04:13.720
Linux kernel was written primarily in C
and C++ and so are the system libraries

00:04:13.720 --> 00:04:13.730
and C++ and so are the system libraries
 

00:04:13.730 --> 00:04:16.700
and C++ and so are the system libraries
the framework and the Java Runtime call

00:04:16.700 --> 00:04:16.710
the framework and the Java Runtime call
 

00:04:16.710 --> 00:04:18.320
the framework and the Java Runtime call
into these libraries using the Java

00:04:18.320 --> 00:04:18.330
into these libraries using the Java
 

00:04:18.330 --> 00:04:21.140
into these libraries using the Java
native interface or j'ni now the a the

00:04:21.140 --> 00:04:21.150
native interface or j'ni now the a the
 

00:04:21.150 --> 00:04:23.330
native interface or j'ni now the a the
NDK essentially allows you to write I

00:04:23.330 --> 00:04:23.340
NDK essentially allows you to write I
 

00:04:23.340 --> 00:04:26.870
NDK essentially allows you to write I
dynamically linked native library but it

00:04:26.870 --> 00:04:26.880
dynamically linked native library but it
 

00:04:26.880 --> 00:04:27.660
dynamically linked native library but it
can't run

00:04:27.660 --> 00:04:27.670
can't run
 

00:04:27.670 --> 00:04:29.130
can't run
directly against the system libraries

00:04:29.130 --> 00:04:29.140
directly against the system libraries
 

00:04:29.140 --> 00:04:32.010
directly against the system libraries
because these a be eyes or ap eyes

00:04:32.010 --> 00:04:32.020
because these a be eyes or ap eyes
 

00:04:32.020 --> 00:04:34.590
because these a be eyes or ap eyes
aren't stable so the purpose of the ndk

00:04:34.590 --> 00:04:34.600
aren't stable so the purpose of the ndk
 

00:04:34.600 --> 00:04:36.840
aren't stable so the purpose of the ndk
is to give you a stable application

00:04:36.840 --> 00:04:36.850
is to give you a stable application
 

00:04:36.850 --> 00:04:39.120
is to give you a stable application
binary interface to run your own

00:04:39.120 --> 00:04:39.130
binary interface to run your own
 

00:04:39.130 --> 00:04:41.550
binary interface to run your own
compiled code against that provides

00:04:41.550 --> 00:04:41.560
compiled code against that provides
 

00:04:41.560 --> 00:04:43.560
compiled code against that provides
access to only the most critical OS

00:04:43.560 --> 00:04:43.570
access to only the most critical OS
 

00:04:43.570 --> 00:04:45.510
access to only the most critical OS
features so the platform can still

00:04:45.510 --> 00:04:45.520
features so the platform can still
 

00:04:45.520 --> 00:04:47.640
features so the platform can still
continue to grow and expand and change

00:04:47.640 --> 00:04:47.650
continue to grow and expand and change
 

00:04:47.650 --> 00:04:49.290
continue to grow and expand and change
how they implement things and be awesome

00:04:49.290 --> 00:04:49.300
how they implement things and be awesome
 

00:04:49.300 --> 00:04:52.560
how they implement things and be awesome
but your application code is talking to

00:04:52.560 --> 00:04:52.570
but your application code is talking to
 

00:04:52.570 --> 00:04:55.290
but your application code is talking to
this through this ABI it's all important

00:04:55.290 --> 00:04:55.300
this through this ABI it's all important
 

00:04:55.300 --> 00:04:58.350
this through this ABI it's all important
stuff and that's what it looks like boom

00:04:58.350 --> 00:04:58.360
stuff and that's what it looks like boom
 

00:04:58.360 --> 00:04:59.910
stuff and that's what it looks like boom
your application code now talks it's

00:04:59.910 --> 00:04:59.920
your application code now talks it's
 

00:04:59.920 --> 00:05:01.680
your application code now talks it's
your library which is going straight to

00:05:01.680 --> 00:05:01.690
your library which is going straight to
 

00:05:01.690 --> 00:05:03.510
your library which is going straight to
native let me talk to you a little bit

00:05:03.510 --> 00:05:03.520
native let me talk to you a little bit
 

00:05:03.520 --> 00:05:05.910
native let me talk to you a little bit
about the history of the NDK the

00:05:05.910 --> 00:05:05.920
about the history of the NDK the
 

00:05:05.920 --> 00:05:07.950
about the history of the NDK the
original first versions of android did

00:05:07.950 --> 00:05:07.960
original first versions of android did
 

00:05:07.960 --> 00:05:12.180
original first versions of android did
not even have it but once but we got it

00:05:12.180 --> 00:05:12.190
not even have it but once but we got it
 

00:05:12.190 --> 00:05:15.060
not even have it but once but we got it
in cupcake and and we've been slowly

00:05:15.060 --> 00:05:15.070
in cupcake and and we've been slowly
 

00:05:15.070 --> 00:05:16.920
in cupcake and and we've been slowly
expanding it ever since so you know in

00:05:16.920 --> 00:05:16.930
expanding it ever since so you know in
 

00:05:16.930 --> 00:05:18.720
expanding it ever since so you know in
the first versions of it you got a C

00:05:18.720 --> 00:05:18.730
the first versions of it you got a C
 

00:05:18.730 --> 00:05:23.370
the first versions of it you got a C
runtime really minimal C++ support z lib

00:05:23.370 --> 00:05:23.380
runtime really minimal C++ support z lib
 

00:05:23.380 --> 00:05:26.340
runtime really minimal C++ support z lib
compression logging networking dynamic

00:05:26.340 --> 00:05:26.350
compression logging networking dynamic
 

00:05:26.350 --> 00:05:29.100
compression logging networking dynamic
linking some math that's not not a lot

00:05:29.100 --> 00:05:29.110
linking some math that's not not a lot
 

00:05:29.110 --> 00:05:31.950
linking some math that's not not a lot
but enough we then added graphics so the

00:05:31.950 --> 00:05:31.960
but enough we then added graphics so the
 

00:05:31.960 --> 00:05:33.330
but enough we then added graphics so the
first version couldn't even talk to

00:05:33.330 --> 00:05:33.340
first version couldn't even talk to
 

00:05:33.340 --> 00:05:36.270
first version couldn't even talk to
OpenGL but we added graphics there and

00:05:36.270 --> 00:05:36.280
OpenGL but we added graphics there and
 

00:05:36.280 --> 00:05:37.500
OpenGL but we added graphics there and
you know what the longest part about the

00:05:37.500 --> 00:05:37.510
you know what the longest part about the
 

00:05:37.510 --> 00:05:38.880
you know what the longest part about the
slide was actually trying to find all

00:05:38.880 --> 00:05:38.890
slide was actually trying to find all
 

00:05:38.890 --> 00:05:40.440
slide was actually trying to find all
these images again it's like what if I

00:05:40.440 --> 00:05:40.450
these images again it's like what if I
 

00:05:40.450 --> 00:05:43.830
these images again it's like what if I
used to slide with these images and then

00:05:43.830 --> 00:05:43.840
used to slide with these images and then
 

00:05:43.840 --> 00:05:45.510
used to slide with these images and then
gingerbread really expanded things

00:05:45.510 --> 00:05:45.520
gingerbread really expanded things
 

00:05:45.520 --> 00:05:47.400
gingerbread really expanded things
gingerbread got much more serious about

00:05:47.400 --> 00:05:47.410
gingerbread got much more serious about
 

00:05:47.410 --> 00:05:50.550
gingerbread got much more serious about
gaming and and multimedia so we added

00:05:50.550 --> 00:05:50.560
gaming and and multimedia so we added
 

00:05:50.560 --> 00:05:52.230
gaming and and multimedia so we added
our native application API so you can

00:05:52.230 --> 00:05:52.240
our native application API so you can
 

00:05:52.240 --> 00:05:53.640
our native application API so you can
actually build that was the first

00:05:53.640 --> 00:05:53.650
actually build that was the first
 

00:05:53.650 --> 00:05:54.540
actually build that was the first
version of Android where you could

00:05:54.540 --> 00:05:54.550
version of Android where you could
 

00:05:54.550 --> 00:05:56.100
version of Android where you could
actually build a native application

00:05:56.100 --> 00:05:56.110
actually build a native application
 

00:05:56.110 --> 00:05:58.770
actually build a native application
without needing to use any java

00:05:58.770 --> 00:05:58.780
without needing to use any java
 

00:05:58.780 --> 00:06:02.520
without needing to use any java
whatsoever and then and also sound which

00:06:02.520 --> 00:06:02.530
whatsoever and then and also sound which
 

00:06:02.530 --> 00:06:03.900
whatsoever and then and also sound which
was really cool like open SSL it was

00:06:03.900 --> 00:06:03.910
was really cool like open SSL it was
 

00:06:03.910 --> 00:06:05.880
was really cool like open SSL it was
really nice to have we continued to

00:06:05.880 --> 00:06:05.890
really nice to have we continued to
 

00:06:05.890 --> 00:06:08.280
really nice to have we continued to
evolve it an Ice Cream Sandwich we added

00:06:08.280 --> 00:06:08.290
evolve it an Ice Cream Sandwich we added
 

00:06:08.290 --> 00:06:12.810
evolve it an Ice Cream Sandwich we added
them the openmax al media layer um not

00:06:12.810 --> 00:06:12.820
them the openmax al media layer um not
 

00:06:12.820 --> 00:06:14.370
them the openmax al media layer um not
many people know this but you actually

00:06:14.370 --> 00:06:14.380
many people know this but you actually
 

00:06:14.380 --> 00:06:16.350
many people know this but you actually
can access render script directly from

00:06:16.350 --> 00:06:16.360
can access render script directly from
 

00:06:16.360 --> 00:06:19.380
can access render script directly from
the NDK as of KitKat and it's pretty

00:06:19.380 --> 00:06:19.390
the NDK as of KitKat and it's pretty
 

00:06:19.390 --> 00:06:22.770
the NDK as of KitKat and it's pretty
cool stuff it was a long long request

00:06:22.770 --> 00:06:22.780
cool stuff it was a long long request
 

00:06:22.780 --> 00:06:24.930
cool stuff it was a long long request
and we also did a bunch of graphic stuff

00:06:24.930 --> 00:06:24.940
and we also did a bunch of graphic stuff
 

00:06:24.940 --> 00:06:26.280
and we also did a bunch of graphic stuff
here that's why these aren't in order

00:06:26.280 --> 00:06:26.290
here that's why these aren't in order
 

00:06:26.290 --> 00:06:28.650
here that's why these aren't in order
but in jellybean mr2 we added yes three

00:06:28.650 --> 00:06:28.660
but in jellybean mr2 we added yes three
 

00:06:28.660 --> 00:06:31.800
but in jellybean mr2 we added yes three
and in lollipop we added 3-1 as well as

00:06:31.800 --> 00:06:31.810
and in lollipop we added 3-1 as well as
 

00:06:31.810 --> 00:06:34.890
and in lollipop we added 3-1 as well as
64-bit support so that's pretty cool so

00:06:34.890 --> 00:06:34.900
64-bit support so that's pretty cool so
 

00:06:34.900 --> 00:06:36.870
64-bit support so that's pretty cool so
let's talk about some assumptions so

00:06:36.870 --> 00:06:36.880
let's talk about some assumptions so
 

00:06:36.880 --> 00:06:38.010
let's talk about some assumptions so
we're gonna star something since they're

00:06:38.010 --> 00:06:38.020
we're gonna star something since they're
 

00:06:38.020 --> 00:06:40.350
we're gonna star something since they're
basically to follow the suggestions that

00:06:40.350 --> 00:06:40.360
basically to follow the suggestions that
 

00:06:40.360 --> 00:06:41.490
basically to follow the suggestions that
the perf J&amp;I

00:06:41.490 --> 00:06:41.500
the perf J&amp;I
 

00:06:41.500 --> 00:06:43.470
the perf J&amp;I
if you have not read this article it is

00:06:43.470 --> 00:06:43.480
if you have not read this article it is
 

00:06:43.480 --> 00:06:47.040
if you have not read this article it is
the gospel for looking at how to deal

00:06:47.040 --> 00:06:47.050
the gospel for looking at how to deal
 

00:06:47.050 --> 00:06:50.520
the gospel for looking at how to deal
with J&amp;I on android but do they still

00:06:50.520 --> 00:06:50.530
with J&amp;I on android but do they still
 

00:06:50.530 --> 00:06:52.230
with J&amp;I on android but do they still
make sense today we have an update of

00:06:52.230 --> 00:06:52.240
make sense today we have an update of
 

00:06:52.240 --> 00:06:54.600
make sense today we have an update of
the article since we shipped art so here

00:06:54.600 --> 00:06:54.610
the article since we shipped art so here
 

00:06:54.610 --> 00:06:56.820
the article since we shipped art so here
are the basic things you have to do ok

00:06:56.820 --> 00:06:56.830
are the basic things you have to do ok
 

00:06:56.830 --> 00:06:58.800
are the basic things you have to do ok
absolutely critical when you're doing

00:06:58.800 --> 00:06:58.810
absolutely critical when you're doing
 

00:06:58.810 --> 00:07:01.200
absolutely critical when you're doing
trying to make j'ni performance one is

00:07:01.200 --> 00:07:01.210
trying to make j'ni performance one is
 

00:07:01.210 --> 00:07:03.330
trying to make j'ni performance one is
you are going to cache field and method

00:07:03.330 --> 00:07:03.340
you are going to cache field and method
 

00:07:03.340 --> 00:07:04.200
you are going to cache field and method
IDs and you're going to do it

00:07:04.200 --> 00:07:04.210
IDs and you're going to do it
 

00:07:04.210 --> 00:07:06.840
IDs and you're going to do it
intelligently to you're going to you're

00:07:06.840 --> 00:07:06.850
intelligently to you're going to you're
 

00:07:06.850 --> 00:07:10.590
intelligently to you're going to you're
going to get strings in a reasonable way

00:07:10.590 --> 00:07:10.600
going to get strings in a reasonable way
 

00:07:10.600 --> 00:07:14.010
going to get strings in a reasonable way
and you're going to copy things in a

00:07:14.010 --> 00:07:14.020
and you're going to copy things in a
 

00:07:14.020 --> 00:07:15.630
and you're going to copy things in a
these are the only three real tips we

00:07:15.630 --> 00:07:15.640
these are the only three real tips we
 

00:07:15.640 --> 00:07:18.150
these are the only three real tips we
gave but I'll go more into details so

00:07:18.150 --> 00:07:18.160
gave but I'll go more into details so
 

00:07:18.160 --> 00:07:19.890
gave but I'll go more into details so
how did we benchmark this we actually

00:07:19.890 --> 00:07:19.900
how did we benchmark this we actually
 

00:07:19.900 --> 00:07:22.530
how did we benchmark this we actually
use something called caliper now how

00:07:22.530 --> 00:07:22.540
use something called caliper now how
 

00:07:22.540 --> 00:07:23.730
use something called caliper now how
many of you actually have ever heard of

00:07:23.730 --> 00:07:23.740
many of you actually have ever heard of
 

00:07:23.740 --> 00:07:26.430
many of you actually have ever heard of
caliper in this room no one that's good

00:07:26.430 --> 00:07:26.440
caliper in this room no one that's good
 

00:07:26.440 --> 00:07:28.800
caliper in this room no one that's good
I'd never a one person sorry I had never

00:07:28.800 --> 00:07:28.810
I'd never a one person sorry I had never
 

00:07:28.810 --> 00:07:30.420
I'd never a one person sorry I had never
heard of it before doing this but I

00:07:30.420 --> 00:07:30.430
heard of it before doing this but I
 

00:07:30.430 --> 00:07:31.500
heard of it before doing this but I
would but I was interested in doing

00:07:31.500 --> 00:07:31.510
would but I was interested in doing
 

00:07:31.510 --> 00:07:33.270
would but I was interested in doing
benchmarking it turns out if you

00:07:33.270 --> 00:07:33.280
benchmarking it turns out if you
 

00:07:33.280 --> 00:07:36.360
benchmarking it turns out if you
actually look at a OSP we have caliper

00:07:36.360 --> 00:07:36.370
actually look at a OSP we have caliper
 

00:07:36.370 --> 00:07:38.310
actually look at a OSP we have caliper
tests checked in this is actually how we

00:07:38.310 --> 00:07:38.320
tests checked in this is actually how we
 

00:07:38.320 --> 00:07:41.280
tests checked in this is actually how we
benchmark our the VM ourselves and when

00:07:41.280 --> 00:07:41.290
benchmark our the VM ourselves and when
 

00:07:41.290 --> 00:07:42.720
benchmark our the VM ourselves and when
you use this thing called Bogar and if

00:07:42.720 --> 00:07:42.730
you use this thing called Bogar and if
 

00:07:42.730 --> 00:07:44.220
you use this thing called Bogar and if
you actually look at what's checked into

00:07:44.220 --> 00:07:44.230
you actually look at what's checked into
 

00:07:44.230 --> 00:07:46.230
you actually look at what's checked into
Vogue our it's a really ancient version

00:07:46.230 --> 00:07:46.240
Vogue our it's a really ancient version
 

00:07:46.240 --> 00:07:47.730
Vogue our it's a really ancient version
of caliper I'm hoping someday we

00:07:47.730 --> 00:07:47.740
of caliper I'm hoping someday we
 

00:07:47.740 --> 00:07:49.920
of caliper I'm hoping someday we
actually update that it would amount

00:07:49.920 --> 00:07:49.930
actually update that it would amount
 

00:07:49.930 --> 00:07:50.940
actually update that it would amount
look they would have made my life a

00:07:50.940 --> 00:07:50.950
look they would have made my life a
 

00:07:50.950 --> 00:07:52.830
look they would have made my life a
little easier but caliper is a really

00:07:52.830 --> 00:07:52.840
little easier but caliper is a really
 

00:07:52.840 --> 00:07:54.150
little easier but caliper is a really
cool framework for running micro

00:07:54.150 --> 00:07:54.160
cool framework for running micro
 

00:07:54.160 --> 00:07:58.500
cool framework for running micro
benchmarks all right so let's get to the

00:07:58.500 --> 00:07:58.510
benchmarks all right so let's get to the
 

00:07:58.510 --> 00:08:01.110
benchmarks all right so let's get to the
first thing this if you haven't used NDK

00:08:01.110 --> 00:08:01.120
first thing this if you haven't used NDK
 

00:08:01.120 --> 00:08:04.650
first thing this if you haven't used NDK
before it's how you access a class from

00:08:04.650 --> 00:08:04.660
before it's how you access a class from
 

00:08:04.660 --> 00:08:07.080
before it's how you access a class from
native code so once you have the class

00:08:07.080 --> 00:08:07.090
native code so once you have the class
 

00:08:07.090 --> 00:08:10.320
native code so once you have the class
and I'm passing this class in from from

00:08:10.320 --> 00:08:10.330
and I'm passing this class in from from
 

00:08:10.330 --> 00:08:13.170
and I'm passing this class in from from
Java you can see J class type that is

00:08:13.170 --> 00:08:13.180
Java you can see J class type that is
 

00:08:13.180 --> 00:08:15.570
Java you can see J class type that is
actually that is actually a class

00:08:15.570 --> 00:08:15.580
actually that is actually a class
 

00:08:15.580 --> 00:08:17.850
actually that is actually a class
information and then I could simply call

00:08:17.850 --> 00:08:17.860
information and then I could simply call
 

00:08:17.860 --> 00:08:20.490
information and then I could simply call
get field ID the name of the field the

00:08:20.490 --> 00:08:20.500
get field ID the name of the field the
 

00:08:20.500 --> 00:08:22.080
get field ID the name of the field the
type of the field so it's so in this

00:08:22.080 --> 00:08:22.090
type of the field so it's so in this
 

00:08:22.090 --> 00:08:24.390
type of the field so it's so in this
case integer and then finally I can call

00:08:24.390 --> 00:08:24.400
case integer and then finally I can call
 

00:08:24.400 --> 00:08:26.400
case integer and then finally I can call
get int field to actually pull the value

00:08:26.400 --> 00:08:26.410
get int field to actually pull the value
 

00:08:26.410 --> 00:08:29.430
get int field to actually pull the value
so that's how we actually access an

00:08:29.430 --> 00:08:29.440
so that's how we actually access an
 

00:08:29.440 --> 00:08:31.080
so that's how we actually access an
integer that's inside of a Java

00:08:31.080 --> 00:08:31.090
integer that's inside of a Java
 

00:08:31.090 --> 00:08:33.480
integer that's inside of a Java
classroom native code alright so the

00:08:33.480 --> 00:08:33.490
classroom native code alright so the
 

00:08:33.490 --> 00:08:35.310
classroom native code alright so the
first suggestion which is a really

00:08:35.310 --> 00:08:35.320
first suggestion which is a really
 

00:08:35.320 --> 00:08:37.440
first suggestion which is a really
really good one is to cache field and

00:08:37.440 --> 00:08:37.450
really good one is to cache field and
 

00:08:37.450 --> 00:08:40.890
really good one is to cache field and
method IDs and here's why those in field

00:08:40.890 --> 00:08:40.900
method IDs and here's why those in field
 

00:08:40.900 --> 00:08:43.380
method IDs and here's why those in field
and method IDs are just numbers they

00:08:43.380 --> 00:08:43.390
and method IDs are just numbers they
 

00:08:43.390 --> 00:08:46.050
and method IDs are just numbers they
don't actually change once the class has

00:08:46.050 --> 00:08:46.060
don't actually change once the class has
 

00:08:46.060 --> 00:08:48.540
don't actually change once the class has
been loaded and if you want to be really

00:08:48.540 --> 00:08:48.550
been loaded and if you want to be really
 

00:08:48.550 --> 00:08:50.190
been loaded and if you want to be really
really good about when you actually grab

00:08:50.190 --> 00:08:50.200
really good about when you actually grab
 

00:08:50.200 --> 00:08:52.710
really good about when you actually grab
them inside of the static initializer of

00:08:52.710 --> 00:08:52.720
them inside of the static initializer of
 

00:08:52.720 --> 00:08:55.590
them inside of the static initializer of
the class in Java you can actually call

00:08:55.590 --> 00:08:55.600
the class in Java you can actually call
 

00:08:55.600 --> 00:08:57.990
the class in Java you can actually call
awesome j'ni code in this case I'm

00:08:57.990 --> 00:08:58.000
awesome j'ni code in this case I'm
 

00:08:58.000 --> 00:09:01.379
awesome j'ni code in this case I'm
calling native Annette and inside of

00:09:01.379 --> 00:09:01.389
calling native Annette and inside of
 

00:09:01.389 --> 00:09:03.720
calling native Annette and inside of
native in it really should have been

00:09:03.720 --> 00:09:03.730
native in it really should have been
 

00:09:03.730 --> 00:09:04.889
native in it really should have been
named native in it now that I look at

00:09:04.889 --> 00:09:04.899
named native in it now that I look at
 

00:09:04.899 --> 00:09:07.980
named native in it now that I look at
the slide but that's okay you can see

00:09:07.980 --> 00:09:07.990
the slide but that's okay you can see
 

00:09:07.990 --> 00:09:10.379
the slide but that's okay you can see
I'm getting that field ID and that field

00:09:10.379 --> 00:09:10.389
I'm getting that field ID and that field
 

00:09:10.389 --> 00:09:12.269
I'm getting that field ID and that field
ID will be good as long as this class is

00:09:12.269 --> 00:09:12.279
ID will be good as long as this class is
 

00:09:12.279 --> 00:09:14.189
ID will be good as long as this class is
loaded so that's pretty awesome I don't

00:09:14.189 --> 00:09:14.199
loaded so that's pretty awesome I don't
 

00:09:14.199 --> 00:09:15.449
loaded so that's pretty awesome I don't
have to think about it I'm just storing

00:09:15.449 --> 00:09:15.459
have to think about it I'm just storing
 

00:09:15.459 --> 00:09:17.639
have to think about it I'm just storing
it into in a in a little variable there

00:09:17.639 --> 00:09:17.649
it into in a in a little variable there
 

00:09:17.649 --> 00:09:19.699
it into in a in a little variable there
that's associated with my native class

00:09:19.699 --> 00:09:19.709
that's associated with my native class
 

00:09:19.709 --> 00:09:22.199
that's associated with my native class
all right let's talk about performance

00:09:22.199 --> 00:09:22.209
all right let's talk about performance
 

00:09:22.209 --> 00:09:25.800
all right let's talk about performance
so here is how it benchmarks on a nexus

00:09:25.800 --> 00:09:25.810
so here is how it benchmarks on a nexus
 

00:09:25.810 --> 00:09:29.009
so here is how it benchmarks on a nexus
5 running KitKat and marshmallow and

00:09:29.009 --> 00:09:29.019
5 running KitKat and marshmallow and
 

00:09:29.019 --> 00:09:32.850
5 running KitKat and marshmallow and
you'll notice something art takes longer

00:09:32.850 --> 00:09:32.860
you'll notice something art takes longer
 

00:09:32.860 --> 00:09:36.800
you'll notice something art takes longer
that's that's going to be in general a

00:09:36.800 --> 00:09:36.810
that's that's going to be in general a
 

00:09:36.810 --> 00:09:39.540
that's that's going to be in general a
common theme art is more complicated

00:09:39.540 --> 00:09:39.550
common theme art is more complicated
 

00:09:39.550 --> 00:09:43.620
common theme art is more complicated
than dalvik in general and so it's even

00:09:43.620 --> 00:09:43.630
than dalvik in general and so it's even
 

00:09:43.630 --> 00:09:45.449
than dalvik in general and so it's even
more important today than it was

00:09:45.449 --> 00:09:45.459
more important today than it was
 

00:09:45.459 --> 00:09:47.280
more important today than it was
initially to cache these things because

00:09:47.280 --> 00:09:47.290
initially to cache these things because
 

00:09:47.290 --> 00:09:50.460
initially to cache these things because
devices are running faster and art is

00:09:50.460 --> 00:09:50.470
devices are running faster and art is
 

00:09:50.470 --> 00:09:52.410
devices are running faster and art is
already faster doing most things so

00:09:52.410 --> 00:09:52.420
already faster doing most things so
 

00:09:52.420 --> 00:09:53.730
already faster doing most things so
you'll even notice this may be a little

00:09:53.730 --> 00:09:53.740
you'll even notice this may be a little
 

00:09:53.740 --> 00:09:56.340
you'll even notice this may be a little
bit more than even these benchmarks

00:09:56.340 --> 00:09:56.350
bit more than even these benchmarks
 

00:09:56.350 --> 00:09:57.960
bit more than even these benchmarks
should say so let's look at the code and

00:09:57.960 --> 00:09:57.970
should say so let's look at the code and
 

00:09:57.970 --> 00:10:00.030
should say so let's look at the code and
try to figure out why this is faster or

00:10:00.030 --> 00:10:00.040
try to figure out why this is faster or
 

00:10:00.040 --> 00:10:03.749
try to figure out why this is faster or
slower I should say and the really key

00:10:03.749 --> 00:10:03.759
slower I should say and the really key
 

00:10:03.759 --> 00:10:05.340
slower I should say and the really key
thing is this thing here this scoped

00:10:05.340 --> 00:10:05.350
thing is this thing here this scoped
 

00:10:05.350 --> 00:10:07.740
thing is this thing here this scoped
j'ni thread state and scoped object

00:10:07.740 --> 00:10:07.750
j'ni thread state and scoped object
 

00:10:07.750 --> 00:10:10.710
j'ni thread state and scoped object
access this is why J and I actually does

00:10:10.710 --> 00:10:10.720
access this is why J and I actually does
 

00:10:10.720 --> 00:10:12.509
access this is why J and I actually does
not run at lightning warp speed and

00:10:12.509 --> 00:10:12.519
not run at lightning warp speed and
 

00:10:12.519 --> 00:10:17.670
not run at lightning warp speed and
that's because every single thread in in

00:10:17.670 --> 00:10:17.680
that's because every single thread in in
 

00:10:17.680 --> 00:10:20.040
that's because every single thread in in
Android can be in one of two states it

00:10:20.040 --> 00:10:20.050
Android can be in one of two states it
 

00:10:20.050 --> 00:10:22.290
Android can be in one of two states it
can be in running state that's when it's

00:10:22.290 --> 00:10:22.300
can be in running state that's when it's
 

00:10:22.300 --> 00:10:23.460
can be in running state that's when it's
actually can be more than that but two

00:10:23.460 --> 00:10:23.470
actually can be more than that but two
 

00:10:23.470 --> 00:10:24.749
actually can be more than that but two
states that we care about it can be in

00:10:24.749 --> 00:10:24.759
states that we care about it can be in
 

00:10:24.759 --> 00:10:27.780
states that we care about it can be in
running state that's actually when we're

00:10:27.780 --> 00:10:27.790
running state that's actually when we're
 

00:10:27.790 --> 00:10:29.910
running state that's actually when we're
in the Java Virtual Machine and we're

00:10:29.910 --> 00:10:29.920
in the Java Virtual Machine and we're
 

00:10:29.920 --> 00:10:31.199
in the Java Virtual Machine and we're
actually executing stuff and it has

00:10:31.199 --> 00:10:31.209
actually executing stuff and it has
 

00:10:31.209 --> 00:10:33.780
actually executing stuff and it has
access to all that great sorry I should

00:10:33.780 --> 00:10:33.790
access to all that great sorry I should
 

00:10:33.790 --> 00:10:36.059
access to all that great sorry I should
say the run time it's not we do not have

00:10:36.059 --> 00:10:36.069
say the run time it's not we do not have
 

00:10:36.069 --> 00:10:37.379
say the run time it's not we do not have
a java virtual machine in android you

00:10:37.379 --> 00:10:37.389
a java virtual machine in android you
 

00:10:37.389 --> 00:10:39.990
a java virtual machine in android you
can strike that from your memory the the

00:10:39.990 --> 00:10:40.000
can strike that from your memory the the
 

00:10:40.000 --> 00:10:42.449
can strike that from your memory the the
Android runtime that's when it's in

00:10:42.449 --> 00:10:42.459
Android runtime that's when it's in
 

00:10:42.459 --> 00:10:46.319
Android runtime that's when it's in
there or it can be in the in the non

00:10:46.319 --> 00:10:46.329
there or it can be in the in the non
 

00:10:46.329 --> 00:10:48.600
there or it can be in the in the non
running state or native state so when

00:10:48.600 --> 00:10:48.610
running state or native state so when
 

00:10:48.610 --> 00:10:50.999
running state or native state so when
we're actually accessing a variable like

00:10:50.999 --> 00:10:51.009
we're actually accessing a variable like
 

00:10:51.009 --> 00:10:53.100
we're actually accessing a variable like
this which is an INT field all of these

00:10:53.100 --> 00:10:53.110
this which is an INT field all of these
 

00:10:53.110 --> 00:10:56.189
this which is an INT field all of these
are our variables that are inside at the

00:10:56.189 --> 00:10:56.199
are our variables that are inside at the
 

00:10:56.199 --> 00:10:57.990
are our variables that are inside at the
runtime we actually have to switch the

00:10:57.990 --> 00:10:58.000
runtime we actually have to switch the
 

00:10:58.000 --> 00:10:59.790
runtime we actually have to switch the
state of our thread in order to do that

00:10:59.790 --> 00:10:59.800
state of our thread in order to do that
 

00:10:59.800 --> 00:11:01.559
state of our thread in order to do that
and that means that we're doing a whole

00:11:01.559 --> 00:11:01.569
and that means that we're doing a whole
 

00:11:01.569 --> 00:11:03.720
and that means that we're doing a whole
bunch of synchronization and that

00:11:03.720 --> 00:11:03.730
bunch of synchronization and that
 

00:11:03.730 --> 00:11:05.610
bunch of synchronization and that
synchronization is expensive it's

00:11:05.610 --> 00:11:05.620
synchronization is expensive it's
 

00:11:05.620 --> 00:11:09.250
synchronization is expensive it's
expensive on the order of about 300

00:11:09.250 --> 00:11:09.260
expensive on the order of about 300
 

00:11:09.260 --> 00:11:12.100
expensive on the order of about 300
nanoseconds now to give you some context

00:11:12.100 --> 00:11:12.110
nanoseconds now to give you some context
 

00:11:12.110 --> 00:11:13.570
nanoseconds now to give you some context
because theater nanoseconds is a really

00:11:13.570 --> 00:11:13.580
because theater nanoseconds is a really
 

00:11:13.580 --> 00:11:15.310
because theater nanoseconds is a really
small number in the average function

00:11:15.310 --> 00:11:15.320
small number in the average function
 

00:11:15.320 --> 00:11:18.790
small number in the average function
call an average function call in art is

00:11:18.790 --> 00:11:18.800
call an average function call in art is
 

00:11:18.800 --> 00:11:21.430
call an average function call in art is
about five nanoseconds and avec it's

00:11:21.430 --> 00:11:21.440
about five nanoseconds and avec it's
 

00:11:21.440 --> 00:11:25.540
about five nanoseconds and avec it's
more like ten so so once again we're

00:11:25.540 --> 00:11:25.550
more like ten so so once again we're
 

00:11:25.550 --> 00:11:27.460
more like ten so so once again we're
talking about something that is really

00:11:27.460 --> 00:11:27.470
talking about something that is really
 

00:11:27.470 --> 00:11:30.550
talking about something that is really
tiny number but it's still like sixty

00:11:30.550 --> 00:11:30.560
tiny number but it's still like sixty
 

00:11:30.560 --> 00:11:32.770
tiny number but it's still like sixty
times longer than a standard function

00:11:32.770 --> 00:11:32.780
times longer than a standard function
 

00:11:32.780 --> 00:11:34.690
times longer than a standard function
call so it's still some do you think

00:11:34.690 --> 00:11:34.700
call so it's still some do you think
 

00:11:34.700 --> 00:11:36.400
call so it's still some do you think
about so let's look at our first

00:11:36.400 --> 00:11:36.410
about so let's look at our first
 

00:11:36.410 --> 00:11:38.230
about so let's look at our first
scorecard and yes based upon our

00:11:38.230 --> 00:11:38.240
scorecard and yes based upon our
 

00:11:38.240 --> 00:11:40.390
scorecard and yes based upon our
benchmark caching field and method IDs

00:11:40.390 --> 00:11:40.400
benchmark caching field and method IDs
 

00:11:40.400 --> 00:11:42.310
benchmark caching field and method IDs
is great for both doll Vic and art it's

00:11:42.310 --> 00:11:42.320
is great for both doll Vic and art it's
 

00:11:42.320 --> 00:11:44.380
is great for both doll Vic and art it's
even better in art alright so that

00:11:44.380 --> 00:11:44.390
even better in art alright so that
 

00:11:44.390 --> 00:11:46.660
even better in art alright so that
looked look at the suggestion - of this

00:11:46.660 --> 00:11:46.670
looked look at the suggestion - of this
 

00:11:46.670 --> 00:11:52.930
looked look at the suggestion - of this
which was used get string cares now this

00:11:52.930 --> 00:11:52.940
which was used get string cares now this
 

00:11:52.940 --> 00:11:54.240
which was used get string cares now this
is this was kind of interesting so

00:11:54.240 --> 00:11:54.250
is this was kind of interesting so
 

00:11:54.250 --> 00:11:59.470
is this was kind of interesting so
basically as you probably all know the

00:11:59.470 --> 00:11:59.480
basically as you probably all know the
 

00:11:59.480 --> 00:12:03.220
basically as you probably all know the
standard for Java which art also follows

00:12:03.220 --> 00:12:03.230
standard for Java which art also follows
 

00:12:03.230 --> 00:12:07.240
standard for Java which art also follows
is to treat all strings as as double

00:12:07.240 --> 00:12:07.250
is to treat all strings as as double
 

00:12:07.250 --> 00:12:12.130
is to treat all strings as as double
byte character strings UCS - and this is

00:12:12.130 --> 00:12:12.140
byte character strings UCS - and this is
 

00:12:12.140 --> 00:12:14.380
byte character strings UCS - and this is
important because we are using we are in

00:12:14.380 --> 00:12:14.390
important because we are using we are in
 

00:12:14.390 --> 00:12:16.000
important because we are using we are in
a world that's highly international

00:12:16.000 --> 00:12:16.010
a world that's highly international
 

00:12:16.010 --> 00:12:18.580
a world that's highly international
single byte strings are kind of passe

00:12:18.580 --> 00:12:18.590
single byte strings are kind of passe
 

00:12:18.590 --> 00:12:19.720
single byte strings are kind of passe
etc etc

00:12:19.720 --> 00:12:19.730
etc etc
 

00:12:19.730 --> 00:12:22.650
etc etc
not to mention is it turns out the the

00:12:22.650 --> 00:12:22.660
not to mention is it turns out the the
 

00:12:22.660 --> 00:12:25.240
not to mention is it turns out the the
VM actually doesn't particularly have

00:12:25.240 --> 00:12:25.250
VM actually doesn't particularly have
 

00:12:25.250 --> 00:12:26.770
VM actually doesn't particularly have
great instructions for dealing with

00:12:26.770 --> 00:12:26.780
great instructions for dealing with
 

00:12:26.780 --> 00:12:28.600
great instructions for dealing with
bytes so it actually it's actually kind

00:12:28.600 --> 00:12:28.610
bytes so it actually it's actually kind
 

00:12:28.610 --> 00:12:30.730
bytes so it actually it's actually kind
of nice to have these things in in these

00:12:30.730 --> 00:12:30.740
of nice to have these things in in these
 

00:12:30.740 --> 00:12:35.410
of nice to have these things in in these
two word sorry these two character these

00:12:35.410 --> 00:12:35.420
two word sorry these two character these
 

00:12:35.420 --> 00:12:38.350
two word sorry these two character these
two by characters thank you so the

00:12:38.350 --> 00:12:38.360
two by characters thank you so the
 

00:12:38.360 --> 00:12:39.790
two by characters thank you so the
suggestion here is that rather than

00:12:39.790 --> 00:12:39.800
suggestion here is that rather than
 

00:12:39.800 --> 00:12:42.010
suggestion here is that rather than
getting string UTF characters like we

00:12:42.010 --> 00:12:42.020
getting string UTF characters like we
 

00:12:42.020 --> 00:12:44.560
getting string UTF characters like we
have there at the bottom we actually

00:12:44.560 --> 00:12:44.570
have there at the bottom we actually
 

00:12:44.570 --> 00:12:46.330
have there at the bottom we actually
call get string cares which actually

00:12:46.330 --> 00:12:46.340
call get string cares which actually
 

00:12:46.340 --> 00:12:49.360
call get string cares which actually
takes our string and gets us the closest

00:12:49.360 --> 00:12:49.370
takes our string and gets us the closest
 

00:12:49.370 --> 00:12:51.040
takes our string and gets us the closest
to being a native representation of it

00:12:51.040 --> 00:12:51.050
to being a native representation of it
 

00:12:51.050 --> 00:12:53.410
to being a native representation of it
that you can imagine and we would expect

00:12:53.410 --> 00:12:53.420
that you can imagine and we would expect
 

00:12:53.420 --> 00:12:56.260
that you can imagine and we would expect
this to always outperform the UTF

00:12:56.260 --> 00:12:56.270
this to always outperform the UTF
 

00:12:56.270 --> 00:12:58.000
this to always outperform the UTF
equivalent where it actually has to do a

00:12:58.000 --> 00:12:58.010
equivalent where it actually has to do a
 

00:12:58.010 --> 00:13:01.000
equivalent where it actually has to do a
copy of memory all right so let's look

00:13:01.000 --> 00:13:01.010
copy of memory all right so let's look
 

00:13:01.010 --> 00:13:01.420
copy of memory all right so let's look
at this

00:13:01.420 --> 00:13:01.430
at this
 

00:13:01.430 --> 00:13:04.240
at this
I took a 15 character string I ran some

00:13:04.240 --> 00:13:04.250
I took a 15 character string I ran some
 

00:13:04.250 --> 00:13:07.750
I took a 15 character string I ran some
benchmarks on this and I was actually

00:13:07.750 --> 00:13:07.760
benchmarks on this and I was actually
 

00:13:07.760 --> 00:13:11.560
benchmarks on this and I was actually
really astonished to see two things one

00:13:11.560 --> 00:13:11.570
really astonished to see two things one
 

00:13:11.570 --> 00:13:13.360
really astonished to see two things one
as we expect it art is actually slow but

00:13:13.360 --> 00:13:13.370
as we expect it art is actually slow but
 

00:13:13.370 --> 00:13:16.330
as we expect it art is actually slow but
it's actually much slower and two this

00:13:16.330 --> 00:13:16.340
it's actually much slower and two this
 

00:13:16.340 --> 00:13:18.430
it's actually much slower and two this
was a real shock as you could if you're

00:13:18.430 --> 00:13:18.440
was a real shock as you could if you're
 

00:13:18.440 --> 00:13:20.710
was a real shock as you could if you're
if you look at those two blue lines on a

00:13:20.710 --> 00:13:20.720
if you look at those two blue lines on a
 

00:13:20.720 --> 00:13:22.960
if you look at those two blue lines on a
15 character string

00:13:22.960 --> 00:13:22.970
15 character string
 

00:13:22.970 --> 00:13:26.040
15 character string
get string UTF cares actually performs

00:13:26.040 --> 00:13:26.050
get string UTF cares actually performs
 

00:13:26.050 --> 00:13:29.230
get string UTF cares actually performs
faster than get string cares how can

00:13:29.230 --> 00:13:29.240
faster than get string cares how can
 

00:13:29.240 --> 00:13:31.210
faster than get string cares how can
that possibly happen because we already

00:13:31.210 --> 00:13:31.220
that possibly happen because we already
 

00:13:31.220 --> 00:13:33.190
that possibly happen because we already
said get string cares doesn't have to

00:13:33.190 --> 00:13:33.200
said get string cares doesn't have to
 

00:13:33.200 --> 00:13:34.930
said get string cares doesn't have to
copy the string it doesn't have to

00:13:34.930 --> 00:13:34.940
copy the string it doesn't have to
 

00:13:34.940 --> 00:13:36.940
copy the string it doesn't have to
translate the string between utf-8

00:13:36.940 --> 00:13:36.950
translate the string between utf-8
 

00:13:36.950 --> 00:13:38.770
translate the string between utf-8
so something is happening to actually

00:13:38.770 --> 00:13:38.780
so something is happening to actually
 

00:13:38.780 --> 00:13:41.590
so something is happening to actually
make on this very short string it's it

00:13:41.590 --> 00:13:41.600
make on this very short string it's it
 

00:13:41.600 --> 00:13:44.350
make on this very short string it's it
actually faster to do all that copying

00:13:44.350 --> 00:13:44.360
actually faster to do all that copying
 

00:13:44.360 --> 00:13:46.420
actually faster to do all that copying
in translation so let's try a longer

00:13:46.420 --> 00:13:46.430
in translation so let's try a longer
 

00:13:46.430 --> 00:13:48.460
in translation so let's try a longer
string just just to see if I'm crazy

00:13:48.460 --> 00:13:48.470
string just just to see if I'm crazy
 

00:13:48.470 --> 00:13:49.870
string just just to see if I'm crazy
here so this is a string that's a

00:13:49.870 --> 00:13:49.880
here so this is a string that's a
 

00:13:49.880 --> 00:13:52.060
here so this is a string that's a
hundred characters long and we see more

00:13:52.060 --> 00:13:52.070
hundred characters long and we see more
 

00:13:52.070 --> 00:13:53.020
hundred characters long and we see more
of what we would expect

00:13:53.020 --> 00:13:53.030
of what we would expect
 

00:13:53.030 --> 00:13:56.740
of what we would expect
so get string UTF cares is now slower

00:13:56.740 --> 00:13:56.750
so get string UTF cares is now slower
 

00:13:56.750 --> 00:14:00.190
so get string UTF cares is now slower
than getstring cares so the question is

00:14:00.190 --> 00:14:00.200
than getstring cares so the question is
 

00:14:00.200 --> 00:14:03.400
than getstring cares so the question is
why was getstring UTF ever faster under

00:14:03.400 --> 00:14:03.410
why was getstring UTF ever faster under
 

00:14:03.410 --> 00:14:07.930
why was getstring UTF ever faster under
art so let's look at some source code so

00:14:07.930 --> 00:14:07.940
art so let's look at some source code so
 

00:14:07.940 --> 00:14:10.120
art so let's look at some source code so
you can see here the getstring UTF cares

00:14:10.120 --> 00:14:10.130
you can see here the getstring UTF cares
 

00:14:10.130 --> 00:14:12.670
you can see here the getstring UTF cares
always has to copy so what happened what

00:14:12.670 --> 00:14:12.680
always has to copy so what happened what
 

00:14:12.680 --> 00:14:15.100
always has to copy so what happened what
it does it goes through and it actually

00:14:15.100 --> 00:14:15.110
it does it goes through and it actually
 

00:14:15.110 --> 00:14:17.470
it does it goes through and it actually
just goes to that copy operation well

00:14:17.470 --> 00:14:17.480
just goes to that copy operation well
 

00:14:17.480 --> 00:14:19.240
just goes to that copy operation well
getstring cares actually has to go and

00:14:19.240 --> 00:14:19.250
getstring cares actually has to go and
 

00:14:19.250 --> 00:14:21.910
getstring cares actually has to go and
check huh well can I actually avoid this

00:14:21.910 --> 00:14:21.920
check huh well can I actually avoid this
 

00:14:21.920 --> 00:14:23.590
check huh well can I actually avoid this
copy so it actually goes looks at the

00:14:23.590 --> 00:14:23.600
copy so it actually goes looks at the
 

00:14:23.600 --> 00:14:26.350
copy so it actually goes looks at the
heap and checks to see if that's a

00:14:26.350 --> 00:14:26.360
heap and checks to see if that's a
 

00:14:26.360 --> 00:14:30.130
heap and checks to see if that's a
movable object and it turns out that's

00:14:30.130 --> 00:14:30.140
movable object and it turns out that's
 

00:14:30.140 --> 00:14:31.720
movable object and it turns out that's
actually somewhat of an expensive call

00:14:31.720 --> 00:14:31.730
actually somewhat of an expensive call
 

00:14:31.730 --> 00:14:34.090
actually somewhat of an expensive call
so you can see here there is this fine

00:14:34.090 --> 00:14:34.100
so you can see here there is this fine
 

00:14:34.100 --> 00:14:37.750
so you can see here there is this fine
continuous space from object that just

00:14:37.750 --> 00:14:37.760
continuous space from object that just
 

00:14:37.760 --> 00:14:40.900
continuous space from object that just
sounds dangerous and what is this

00:14:40.900 --> 00:14:40.910
sounds dangerous and what is this
 

00:14:40.910 --> 00:14:44.230
sounds dangerous and what is this
actually doing in real life well it

00:14:44.230 --> 00:14:44.240
actually doing in real life well it
 

00:14:44.240 --> 00:14:47.080
actually doing in real life well it
actually calls this which has a for loop

00:14:47.080 --> 00:14:47.090
actually calls this which has a for loop
 

00:14:47.090 --> 00:14:48.790
actually calls this which has a for loop
into it which looks defined continuous

00:14:48.790 --> 00:14:48.800
into it which looks defined continuous
 

00:14:48.800 --> 00:14:50.980
into it which looks defined continuous
spaces so you can see already here even

00:14:50.980 --> 00:14:50.990
spaces so you can see already here even
 

00:14:50.990 --> 00:14:52.840
spaces so you can see already here even
though the VM is doing all of this work

00:14:52.840 --> 00:14:52.850
though the VM is doing all of this work
 

00:14:52.850 --> 00:14:55.150
though the VM is doing all of this work
to try to avoid this little tiny 15

00:14:55.150 --> 00:14:55.160
to try to avoid this little tiny 15
 

00:14:55.160 --> 00:14:59.850
to try to avoid this little tiny 15
character 30 byte mem copy it's actually

00:14:59.850 --> 00:14:59.860
character 30 byte mem copy it's actually
 

00:14:59.860 --> 00:15:02.380
character 30 byte mem copy it's actually
failing to run this particular case

00:15:02.380 --> 00:15:02.390
failing to run this particular case
 

00:15:02.390 --> 00:15:05.230
failing to run this particular case
optimally and so some point in between a

00:15:05.230 --> 00:15:05.240
optimally and so some point in between a
 

00:15:05.240 --> 00:15:06.760
optimally and so some point in between a
hundred characters and 15 characters

00:15:06.760 --> 00:15:06.770
hundred characters and 15 characters
 

00:15:06.770 --> 00:15:08.950
hundred characters and 15 characters
happens to be the break-even point what

00:15:08.950 --> 00:15:08.960
happens to be the break-even point what
 

00:15:08.960 --> 00:15:10.360
happens to be the break-even point what
does this really really mean is that

00:15:10.360 --> 00:15:10.370
does this really really mean is that
 

00:15:10.370 --> 00:15:12.220
does this really really mean is that
unless you're passing very very large

00:15:12.220 --> 00:15:12.230
unless you're passing very very large
 

00:15:12.230 --> 00:15:14.470
unless you're passing very very large
strings around do whatever the most

00:15:14.470 --> 00:15:14.480
strings around do whatever the most
 

00:15:14.480 --> 00:15:18.730
strings around do whatever the most
convenient to you honestly it's it's not

00:15:18.730 --> 00:15:18.740
convenient to you honestly it's it's not
 

00:15:18.740 --> 00:15:19.960
convenient to you honestly it's it's not
a big deal do you have to do a whole

00:15:19.960 --> 00:15:19.970
a big deal do you have to do a whole
 

00:15:19.970 --> 00:15:22.120
a big deal do you have to do a whole
bunch of crazy stuff in native code to

00:15:22.120 --> 00:15:22.130
bunch of crazy stuff in native code to
 

00:15:22.130 --> 00:15:25.510
bunch of crazy stuff in native code to
actually make your code handle you know

00:15:25.510 --> 00:15:25.520
actually make your code handle you know
 

00:15:25.520 --> 00:15:28.180
actually make your code handle you know
tube to byte strings to buy characters

00:15:28.180 --> 00:15:28.190
tube to byte strings to buy characters
 

00:15:28.190 --> 00:15:30.610
tube to byte strings to buy characters
it might or may not be worth it you'll

00:15:30.610 --> 00:15:30.620
it might or may not be worth it you'll
 

00:15:30.620 --> 00:15:31.840
it might or may not be worth it you'll
probably want to look at actually

00:15:31.840 --> 00:15:31.850
probably want to look at actually
 

00:15:31.850 --> 00:15:34.570
probably want to look at actually
profiling it so here's our scorecard so

00:15:34.570 --> 00:15:34.580
profiling it so here's our scorecard so
 

00:15:34.580 --> 00:15:36.879
profiling it so here's our scorecard so
in general yes getstring you

00:15:36.879 --> 00:15:36.889
in general yes getstring you
 

00:15:36.889 --> 00:15:39.249
in general yes getstring you
TAF cares is going to be faster for

00:15:39.249 --> 00:15:39.259
TAF cares is going to be faster for
 

00:15:39.259 --> 00:15:42.729
TAF cares is going to be faster for
large characters but not always so I'll

00:15:42.729 --> 00:15:42.739
large characters but not always so I'll
 

00:15:42.739 --> 00:15:45.749
large characters but not always so I'll
give I'll give it 3/4 of a star for art

00:15:45.749 --> 00:15:45.759
give I'll give it 3/4 of a star for art
 

00:15:45.759 --> 00:15:48.220
give I'll give it 3/4 of a star for art
here's another suggestion though that's

00:15:48.220 --> 00:15:48.230
here's another suggestion though that's
 

00:15:48.230 --> 00:15:50.530
here's another suggestion though that's
they came out of there which is use get

00:15:50.530 --> 00:15:50.540
they came out of there which is use get
 

00:15:50.540 --> 00:15:52.869
they came out of there which is use get
string region this is kind of

00:15:52.869 --> 00:15:52.879
string region this is kind of
 

00:15:52.879 --> 00:15:57.460
string region this is kind of
interesting so here is what that looks

00:15:57.460 --> 00:15:57.470
interesting so here is what that looks
 

00:15:57.470 --> 00:16:00.069
interesting so here is what that looks
like so normally if you want to copy a

00:16:00.069 --> 00:16:00.079
like so normally if you want to copy a
 

00:16:00.079 --> 00:16:03.429
like so normally if you want to copy a
string into a native buffer in this case

00:16:03.429 --> 00:16:03.439
string into a native buffer in this case
 

00:16:03.439 --> 00:16:05.019
string into a native buffer in this case
and my native I mean you know just

00:16:05.019 --> 00:16:05.029
and my native I mean you know just
 

00:16:05.029 --> 00:16:07.119
and my native I mean you know just
literally a buffer of characters you're

00:16:07.119 --> 00:16:07.129
literally a buffer of characters you're
 

00:16:07.129 --> 00:16:10.299
literally a buffer of characters you're
going to call get string cares and

00:16:10.299 --> 00:16:10.309
going to call get string cares and
 

00:16:10.309 --> 00:16:14.460
going to call get string cares and
you'll mem copy it and then etc etc and

00:16:14.460 --> 00:16:14.470
you'll mem copy it and then etc etc and
 

00:16:14.470 --> 00:16:17.139
you'll mem copy it and then etc etc and
and you'll see I'm also doing some you

00:16:17.139 --> 00:16:17.149
and you'll see I'm also doing some you
 

00:16:17.149 --> 00:16:18.789
and you'll see I'm also doing some you
know memory deallocation here just to be

00:16:18.789 --> 00:16:18.799
know memory deallocation here just to be
 

00:16:18.799 --> 00:16:20.559
know memory deallocation here just to be
fair on both sides you can see it's

00:16:20.559 --> 00:16:20.569
fair on both sides you can see it's
 

00:16:20.569 --> 00:16:22.869
fair on both sides you can see it's
actually several several lines of code

00:16:22.869 --> 00:16:22.879
actually several several lines of code
 

00:16:22.879 --> 00:16:25.569
actually several several lines of code
and several more accesses because every

00:16:25.569 --> 00:16:25.579
and several more accesses because every
 

00:16:25.579 --> 00:16:27.609
and several more accesses because every
time you actually do something like get

00:16:27.609 --> 00:16:27.619
time you actually do something like get
 

00:16:27.619 --> 00:16:30.789
time you actually do something like get
string cares or get string region you're

00:16:30.789 --> 00:16:30.799
string cares or get string region you're
 

00:16:30.799 --> 00:16:33.579
string cares or get string region you're
actually talking to the VM as well well

00:16:33.579 --> 00:16:33.589
actually talking to the VM as well well
 

00:16:33.589 --> 00:16:35.739
actually talking to the VM as well well
this is actually kind of cool sorry

00:16:35.739 --> 00:16:35.749
this is actually kind of cool sorry
 

00:16:35.749 --> 00:16:36.879
this is actually kind of cool sorry
you're talking to native code as well

00:16:36.879 --> 00:16:36.889
you're talking to native code as well
 

00:16:36.889 --> 00:16:39.340
you're talking to native code as well
and to the VM so this is kind of cool

00:16:39.340 --> 00:16:39.350
and to the VM so this is kind of cool
 

00:16:39.350 --> 00:16:40.659
and to the VM so this is kind of cool
here and you can actually use gets

00:16:40.659 --> 00:16:40.669
here and you can actually use gets
 

00:16:40.669 --> 00:16:41.919
here and you can actually use gets
during region and guest string region

00:16:41.919 --> 00:16:41.929
during region and guest string region
 

00:16:41.929 --> 00:16:46.569
during region and guest string region
does the copy for you that's kind of

00:16:46.569 --> 00:16:46.579
does the copy for you that's kind of
 

00:16:46.579 --> 00:16:50.650
does the copy for you that's kind of
nice also one thing I'm doing here which

00:16:50.650 --> 00:16:50.660
nice also one thing I'm doing here which
 

00:16:50.660 --> 00:16:52.389
nice also one thing I'm doing here which
is a nice little optimization is I'm

00:16:52.389 --> 00:16:52.399
is a nice little optimization is I'm
 

00:16:52.399 --> 00:16:53.949
is a nice little optimization is I'm
actually passing the length of the

00:16:53.949 --> 00:16:53.959
actually passing the length of the
 

00:16:53.959 --> 00:16:56.409
actually passing the length of the
string into this and and that's kind of

00:16:56.409 --> 00:16:56.419
string into this and and that's kind of
 

00:16:56.419 --> 00:16:58.809
string into this and and that's kind of
cool because as it turns out passing

00:16:58.809 --> 00:16:58.819
cool because as it turns out passing
 

00:16:58.819 --> 00:17:01.389
cool because as it turns out passing
extra parameters into J&amp;I is almost free

00:17:01.389 --> 00:17:01.399
extra parameters into J&amp;I is almost free
 

00:17:01.399 --> 00:17:03.909
extra parameters into J&amp;I is almost free
it takes literally on the order of a

00:17:03.909 --> 00:17:03.919
it takes literally on the order of a
 

00:17:03.919 --> 00:17:05.799
it takes literally on the order of a
couple of nanoseconds for every single

00:17:05.799 --> 00:17:05.809
couple of nanoseconds for every single
 

00:17:05.809 --> 00:17:08.500
couple of nanoseconds for every single
additional parameter you want to use so

00:17:08.500 --> 00:17:08.510
additional parameter you want to use so
 

00:17:08.510 --> 00:17:09.759
additional parameter you want to use so
that's awesome

00:17:09.759 --> 00:17:09.769
that's awesome
 

00:17:09.769 --> 00:17:12.460
that's awesome
and if I were going to actually query

00:17:12.460 --> 00:17:12.470
and if I were going to actually query
 

00:17:12.470 --> 00:17:13.990
and if I were going to actually query
this string and say give me that give me

00:17:13.990 --> 00:17:14.000
this string and say give me that give me
 

00:17:14.000 --> 00:17:15.879
this string and say give me that give me
the size of the string that would be

00:17:15.879 --> 00:17:15.889
the size of the string that would be
 

00:17:15.889 --> 00:17:18.639
the size of the string that would be
another 300 nano second round trip

00:17:18.639 --> 00:17:18.649
another 300 nano second round trip
 

00:17:18.649 --> 00:17:20.620
another 300 nano second round trip
through the machine so adding adding

00:17:20.620 --> 00:17:20.630
through the machine so adding adding
 

00:17:20.630 --> 00:17:22.419
through the machine so adding adding
additional parameters is a great way of

00:17:22.419 --> 00:17:22.429
additional parameters is a great way of
 

00:17:22.429 --> 00:17:24.519
additional parameters is a great way of
optimizing your J&amp;I so i thought i'd

00:17:24.519 --> 00:17:24.529
optimizing your J&amp;I so i thought i'd
 

00:17:24.529 --> 00:17:26.379
optimizing your J&amp;I so i thought i'd
point this out this is sort of a little

00:17:26.379 --> 00:17:26.389
point this out this is sort of a little
 

00:17:26.389 --> 00:17:28.659
point this out this is sort of a little
minor optimization here but if these

00:17:28.659 --> 00:17:28.669
minor optimization here but if these
 

00:17:28.669 --> 00:17:29.799
minor optimization here but if these
things are what you're thinking about

00:17:29.799 --> 00:17:29.809
things are what you're thinking about
 

00:17:29.809 --> 00:17:31.299
things are what you're thinking about
again you're trying to avoid round trips

00:17:31.299 --> 00:17:31.309
again you're trying to avoid round trips
 

00:17:31.309 --> 00:17:33.159
again you're trying to avoid round trips
on both sides you're trying to avoid

00:17:33.159 --> 00:17:33.169
on both sides you're trying to avoid
 

00:17:33.169 --> 00:17:35.889
on both sides you're trying to avoid
extra calls into the VM or into the

00:17:35.889 --> 00:17:35.899
extra calls into the VM or into the
 

00:17:35.899 --> 00:17:39.669
extra calls into the VM or into the
runtime as I should say from from native

00:17:39.669 --> 00:17:39.679
runtime as I should say from from native
 

00:17:39.679 --> 00:17:40.930
runtime as I should say from from native
code and you're also trying to do the

00:17:40.930 --> 00:17:40.940
code and you're also trying to do the
 

00:17:40.940 --> 00:17:42.159
code and you're also trying to do the
other way you're trying to avoid extra

00:17:42.159 --> 00:17:42.169
other way you're trying to avoid extra
 

00:17:42.169 --> 00:17:45.389
other way you're trying to avoid extra
calls into native code from the runtime

00:17:45.389 --> 00:17:45.399
calls into native code from the runtime
 

00:17:45.399 --> 00:17:47.289
calls into native code from the runtime
all right what does this really look

00:17:47.289 --> 00:17:47.299
all right what does this really look
 

00:17:47.299 --> 00:17:49.480
all right what does this really look
like after all of this well it's kind of

00:17:49.480 --> 00:17:49.490
like after all of this well it's kind of
 

00:17:49.490 --> 00:17:51.370
like after all of this well it's kind of
as you would expect

00:17:51.370 --> 00:17:51.380
as you would expect
 

00:17:51.380 --> 00:17:55.210
as you would expect
get stream reason is way faster you know

00:17:55.210 --> 00:17:55.220
get stream reason is way faster you know
 

00:17:55.220 --> 00:17:56.560
get stream reason is way faster you know
you're avoiding doing an extra

00:17:56.560 --> 00:17:56.570
you're avoiding doing an extra
 

00:17:56.570 --> 00:18:01.660
you're avoiding doing an extra
allocation you're also and and so that's

00:18:01.660 --> 00:18:01.670
allocation you're also and and so that's
 

00:18:01.670 --> 00:18:07.740
allocation you're also and and so that's
going to in general be good inside of

00:18:07.740 --> 00:18:07.750
 

00:18:07.750 --> 00:18:10.000
and you can also see in art this is

00:18:10.000 --> 00:18:10.010
and you can also see in art this is
 

00:18:10.010 --> 00:18:12.400
and you can also see in art this is
actually a lot slower than in dalvik and

00:18:12.400 --> 00:18:12.410
actually a lot slower than in dalvik and
 

00:18:12.410 --> 00:18:14.260
actually a lot slower than in dalvik and
a lot is all relative again these are

00:18:14.260 --> 00:18:14.270
a lot is all relative again these are
 

00:18:14.270 --> 00:18:15.730
a lot is all relative again these are
all little tiny things you might think

00:18:15.730 --> 00:18:15.740
all little tiny things you might think
 

00:18:15.740 --> 00:18:18.400
all little tiny things you might think
after this talk that art isn't very fast

00:18:18.400 --> 00:18:18.410
after this talk that art isn't very fast
 

00:18:18.410 --> 00:18:20.470
after this talk that art isn't very fast
and I don't want you to give that embed

00:18:20.470 --> 00:18:20.480
and I don't want you to give that embed
 

00:18:20.480 --> 00:18:22.750
and I don't want you to give that embed
impression you at all in fact our art is

00:18:22.750 --> 00:18:22.760
impression you at all in fact our art is
 

00:18:22.760 --> 00:18:25.420
impression you at all in fact our art is
scary fast at doing almost anything but

00:18:25.420 --> 00:18:25.430
scary fast at doing almost anything but
 

00:18:25.430 --> 00:18:28.660
scary fast at doing almost anything but
this so in almost any other way it is

00:18:28.660 --> 00:18:28.670
this so in almost any other way it is
 

00:18:28.670 --> 00:18:31.630
this so in almost any other way it is
going to blow a Dalek so do do not do

00:18:31.630 --> 00:18:31.640
going to blow a Dalek so do do not do
 

00:18:31.640 --> 00:18:33.310
going to blow a Dalek so do do not do
not take this any kind of indictment

00:18:33.310 --> 00:18:33.320
not take this any kind of indictment
 

00:18:33.320 --> 00:18:36.040
not take this any kind of indictment
against art in fact you can also in one

00:18:36.040 --> 00:18:36.050
against art in fact you can also in one
 

00:18:36.050 --> 00:18:37.420
against art in fact you can also in one
of them when I was asking one of the

00:18:37.420 --> 00:18:37.430
of them when I was asking one of the
 

00:18:37.430 --> 00:18:39.310
of them when I was asking one of the
internal guys it is all about we know

00:18:39.310 --> 00:18:39.320
internal guys it is all about we know
 

00:18:39.320 --> 00:18:41.470
internal guys it is all about we know
why this is the case art actually was

00:18:41.470 --> 00:18:41.480
why this is the case art actually was
 

00:18:41.480 --> 00:18:43.600
why this is the case art actually was
written in a time when we had multiple

00:18:43.600 --> 00:18:43.610
written in a time when we had multiple
 

00:18:43.610 --> 00:18:45.820
written in a time when we had multiple
processor cores in the system so when

00:18:45.820 --> 00:18:45.830
processor cores in the system so when
 

00:18:45.830 --> 00:18:47.560
processor cores in the system so when
they started designing it and writing it

00:18:47.560 --> 00:18:47.570
they started designing it and writing it
 

00:18:47.570 --> 00:18:50.250
they started designing it and writing it
they were thinking the entire time about

00:18:50.250 --> 00:18:50.260
they were thinking the entire time about
 

00:18:50.260 --> 00:18:52.750
they were thinking the entire time about
deadlock problems and I would say that

00:18:52.750 --> 00:18:52.760
deadlock problems and I would say that
 

00:18:52.760 --> 00:18:54.640
deadlock problems and I would say that
art takes an incredibly conservative or

00:18:54.640 --> 00:18:54.650
art takes an incredibly conservative or
 

00:18:54.650 --> 00:18:56.560
art takes an incredibly conservative or
conservative approach to make sure that

00:18:56.560 --> 00:18:56.570
conservative approach to make sure that
 

00:18:56.570 --> 00:18:58.660
conservative approach to make sure that
you're not gonna have deadlock I would

00:18:58.660 --> 00:18:58.670
you're not gonna have deadlock I would
 

00:18:58.670 --> 00:19:00.220
you're not gonna have deadlock I would
and if you if you look in like the list

00:19:00.220 --> 00:19:00.230
and if you if you look in like the list
 

00:19:00.230 --> 00:19:01.450
and if you if you look in like the list
of bugs on AOSP

00:19:01.450 --> 00:19:01.460
of bugs on AOSP
 

00:19:01.460 --> 00:19:03.490
of bugs on AOSP
you will find deadlock bugs in dalvik

00:19:03.490 --> 00:19:03.500
you will find deadlock bugs in dalvik
 

00:19:03.500 --> 00:19:06.820
you will find deadlock bugs in dalvik
most of which have been fixed but I

00:19:06.820 --> 00:19:06.830
most of which have been fixed but I
 

00:19:06.830 --> 00:19:08.440
most of which have been fixed but I
think part of what you're part of what

00:19:08.440 --> 00:19:08.450
think part of what you're part of what
 

00:19:08.450 --> 00:19:09.850
think part of what you're part of what
you're seeing is the art team wanted

00:19:09.850 --> 00:19:09.860
you're seeing is the art team wanted
 

00:19:09.860 --> 00:19:11.920
you're seeing is the art team wanted
this to be incredibly robust and that's

00:19:11.920 --> 00:19:11.930
this to be incredibly robust and that's
 

00:19:11.930 --> 00:19:13.000
this to be incredibly robust and that's
why you're seeing a little bit of this

00:19:13.000 --> 00:19:13.010
why you're seeing a little bit of this
 

00:19:13.010 --> 00:19:14.860
why you're seeing a little bit of this
so maybe in the future we can actually

00:19:14.860 --> 00:19:14.870
so maybe in the future we can actually
 

00:19:14.870 --> 00:19:16.480
so maybe in the future we can actually
figure out how to make these even closer

00:19:16.480 --> 00:19:16.490
figure out how to make these even closer
 

00:19:16.490 --> 00:19:18.630
figure out how to make these even closer
together but that's what it's like today

00:19:18.630 --> 00:19:18.640
together but that's what it's like today
 

00:19:18.640 --> 00:19:21.730
together but that's what it's like today
alright so another another big win on

00:19:21.730 --> 00:19:21.740
alright so another another big win on
 

00:19:21.740 --> 00:19:23.860
alright so another another big win on
art and a big win on dollar back to use

00:19:23.860 --> 00:19:23.870
art and a big win on dollar back to use
 

00:19:23.870 --> 00:19:25.870
art and a big win on dollar back to use
get string region alright let's talk

00:19:25.870 --> 00:19:25.880
get string region alright let's talk
 

00:19:25.880 --> 00:19:27.370
get string region alright let's talk
about a problem that a lot of people

00:19:27.370 --> 00:19:27.380
about a problem that a lot of people
 

00:19:27.380 --> 00:19:29.890
about a problem that a lot of people
have which is sharing raw data with

00:19:29.890 --> 00:19:29.900
have which is sharing raw data with
 

00:19:29.900 --> 00:19:31.480
have which is sharing raw data with
native code and this is also part of

00:19:31.480 --> 00:19:31.490
native code and this is also part of
 

00:19:31.490 --> 00:19:33.130
native code and this is also part of
this now if you haven't figured this out

00:19:33.130 --> 00:19:33.140
this now if you haven't figured this out
 

00:19:33.140 --> 00:19:35.980
this now if you haven't figured this out
at the talk jan i calls are relatively

00:19:35.980 --> 00:19:35.990
at the talk jan i calls are relatively
 

00:19:35.990 --> 00:19:37.960
at the talk jan i calls are relatively
expensive and you know again this is

00:19:37.960 --> 00:19:37.970
expensive and you know again this is
 

00:19:37.970 --> 00:19:39.550
expensive and you know again this is
relative you know we're talking about

00:19:39.550 --> 00:19:39.560
relative you know we're talking about
 

00:19:39.560 --> 00:19:43.690
relative you know we're talking about
five nanoseconds for a regular call to

00:19:43.690 --> 00:19:43.700
five nanoseconds for a regular call to
 

00:19:43.700 --> 00:19:46.150
five nanoseconds for a regular call to
about 300 nanoseconds on a nexus 5 to be

00:19:46.150 --> 00:19:46.160
about 300 nanoseconds on a nexus 5 to be
 

00:19:46.160 --> 00:19:48.190
about 300 nanoseconds on a nexus 5 to be
fair of a jan i call so what is this

00:19:48.190 --> 00:19:48.200
fair of a jan i call so what is this
 

00:19:48.200 --> 00:19:49.660
fair of a jan i call so what is this
what are we really talking about the

00:19:49.660 --> 00:19:49.670
what are we really talking about the
 

00:19:49.670 --> 00:19:55.480
what are we really talking about the
overhead of a of a one-way call here or

00:19:55.480 --> 00:19:55.490
overhead of a of a one-way call here or
 

00:19:55.490 --> 00:19:56.650
overhead of a of a one-way call here or
sorry two-way call this is a two-way

00:19:56.650 --> 00:19:56.660
sorry two-way call this is a two-way
 

00:19:56.660 --> 00:19:59.980
sorry two-way call this is a two-way
call so on dalvik our overhead was about

00:19:59.980 --> 00:19:59.990
call so on dalvik our overhead was about
 

00:19:59.990 --> 00:20:02.290
call so on dalvik our overhead was about
was a little less than 130 nanoseconds

00:20:02.290 --> 00:20:02.300
was a little less than 130 nanoseconds
 

00:20:02.300 --> 00:20:05.740
was a little less than 130 nanoseconds
on art it's almost twice that

00:20:05.740 --> 00:20:05.750
on art it's almost twice that
 

00:20:05.750 --> 00:20:08.380
on art it's almost twice that
and a good thing that devices are

00:20:08.380 --> 00:20:08.390
and a good thing that devices are
 

00:20:08.390 --> 00:20:09.850
and a good thing that devices are
getting faster you can see I've also

00:20:09.850 --> 00:20:09.860
getting faster you can see I've also
 

00:20:09.860 --> 00:20:12.510
getting faster you can see I've also
been started next to 6p and a nexus 9

00:20:12.510 --> 00:20:12.520
been started next to 6p and a nexus 9
 

00:20:12.520 --> 00:20:14.950
been started next to 6p and a nexus 9
both in 64-bit mode and you see they're

00:20:14.950 --> 00:20:14.960
both in 64-bit mode and you see they're
 

00:20:14.960 --> 00:20:18.940
both in 64-bit mode and you see they're
actually pretty fast but even the Nexus

00:20:18.940 --> 00:20:18.950
actually pretty fast but even the Nexus
 

00:20:18.950 --> 00:20:21.520
actually pretty fast but even the Nexus
9 actually doesn't outscore Dahl back

00:20:21.520 --> 00:20:21.530
9 actually doesn't outscore Dahl back
 

00:20:21.530 --> 00:20:22.990
9 actually doesn't outscore Dahl back
running on the Nexus 5 for doing these

00:20:22.990 --> 00:20:23.000
running on the Nexus 5 for doing these
 

00:20:23.000 --> 00:20:24.400
running on the Nexus 5 for doing these
kinds of things so

00:20:24.400 --> 00:20:24.410
kinds of things so
 

00:20:24.410 --> 00:20:26.770
kinds of things so
J&amp;I is expensive and the real goal of

00:20:26.770 --> 00:20:26.780
J&amp;I is expensive and the real goal of
 

00:20:26.780 --> 00:20:28.360
J&amp;I is expensive and the real goal of
all this and there's any take back for

00:20:28.360 --> 00:20:28.370
all this and there's any take back for
 

00:20:28.370 --> 00:20:30.760
all this and there's any take back for
this entire lecture is avoid chattiness

00:20:30.760 --> 00:20:30.770
this entire lecture is avoid chattiness
 

00:20:30.770 --> 00:20:33.310
this entire lecture is avoid chattiness
every bit of chattiness you add adds

00:20:33.310 --> 00:20:33.320
every bit of chattiness you add adds
 

00:20:33.320 --> 00:20:36.490
every bit of chattiness you add adds
extra time and a lot of that is stuff

00:20:36.490 --> 00:20:36.500
extra time and a lot of that is stuff
 

00:20:36.500 --> 00:20:38.020
extra time and a lot of that is stuff
you don't even think of so for example

00:20:38.020 --> 00:20:38.030
you don't even think of so for example
 

00:20:38.030 --> 00:20:39.340
you don't even think of so for example
let's say you're like you know what I'm

00:20:39.340 --> 00:20:39.350
let's say you're like you know what I'm
 

00:20:39.350 --> 00:20:41.320
let's say you're like you know what I'm
going to avoid riding a whole bunch of

00:20:41.320 --> 00:20:41.330
going to avoid riding a whole bunch of
 

00:20:41.330 --> 00:20:42.549
going to avoid riding a whole bunch of
code have you ever played with unity how

00:20:42.549 --> 00:20:42.559
code have you ever played with unity how
 

00:20:42.559 --> 00:20:43.690
code have you ever played with unity how
many people here have played with unity

00:20:43.690 --> 00:20:43.700
many people here have played with unity
 

00:20:43.700 --> 00:20:46.090
many people here have played with unity
so one of the way one of the ways in

00:20:46.090 --> 00:20:46.100
so one of the way one of the ways in
 

00:20:46.100 --> 00:20:49.570
so one of the way one of the ways in
which you talk to Android from unity is

00:20:49.570 --> 00:20:49.580
which you talk to Android from unity is
 

00:20:49.580 --> 00:20:50.860
which you talk to Android from unity is
to use something called Android Java

00:20:50.860 --> 00:20:50.870
to use something called Android Java
 

00:20:50.870 --> 00:20:53.380
to use something called Android Java
proxy and Android Java proxy is really

00:20:53.380 --> 00:20:53.390
proxy and Android Java proxy is really
 

00:20:53.390 --> 00:20:54.760
proxy and Android Java proxy is really
cool because basically it takes it in

00:20:54.760 --> 00:20:54.770
cool because basically it takes it in
 

00:20:54.770 --> 00:20:56.440
cool because basically it takes it in
and just proxy interfaces and it creates

00:20:56.440 --> 00:20:56.450
and just proxy interfaces and it creates
 

00:20:56.450 --> 00:20:58.390
and just proxy interfaces and it creates
a dynamic class essentially on the fly

00:20:58.390 --> 00:20:58.400
a dynamic class essentially on the fly
 

00:20:58.400 --> 00:21:00.340
a dynamic class essentially on the fly
that's used to fill out some interface

00:21:00.340 --> 00:21:00.350
that's used to fill out some interface
 

00:21:00.350 --> 00:21:02.560
that's used to fill out some interface
that you can then use to talk to a whole

00:21:02.560 --> 00:21:02.570
that you can then use to talk to a whole
 

00:21:02.570 --> 00:21:03.970
that you can then use to talk to a whole
bunch of internal systems but you

00:21:03.970 --> 00:21:03.980
bunch of internal systems but you
 

00:21:03.980 --> 00:21:06.040
bunch of internal systems but you
realize is that by doing that you are

00:21:06.040 --> 00:21:06.050
realize is that by doing that you are
 

00:21:06.050 --> 00:21:08.440
realize is that by doing that you are
getting the chattiest possible interface

00:21:08.440 --> 00:21:08.450
getting the chattiest possible interface
 

00:21:08.450 --> 00:21:10.210
getting the chattiest possible interface
into Android and so if you're trying to

00:21:10.210 --> 00:21:10.220
into Android and so if you're trying to
 

00:21:10.220 --> 00:21:11.410
into Android and so if you're trying to
do something over and over and over

00:21:11.410 --> 00:21:11.420
do something over and over and over
 

00:21:11.420 --> 00:21:13.510
do something over and over and over
again that's going to actually impact

00:21:13.510 --> 00:21:13.520
again that's going to actually impact
 

00:21:13.520 --> 00:21:15.460
again that's going to actually impact
your performance so for example let's

00:21:15.460 --> 00:21:15.470
your performance so for example let's
 

00:21:15.470 --> 00:21:17.470
your performance so for example let's
say you're trying to read bytes out of

00:21:17.470 --> 00:21:17.480
say you're trying to read bytes out of
 

00:21:17.480 --> 00:21:20.440
say you're trying to read bytes out of
some out of some class in Java you know

00:21:20.440 --> 00:21:20.450
some out of some class in Java you know
 

00:21:20.450 --> 00:21:22.450
some out of some class in Java you know
one at a time you realize this is this

00:21:22.450 --> 00:21:22.460
one at a time you realize this is this
 

00:21:22.460 --> 00:21:24.220
one at a time you realize this is this
is going to very very quickly exhaust

00:21:24.220 --> 00:21:24.230
is going to very very quickly exhaust
 

00:21:24.230 --> 00:21:26.230
is going to very very quickly exhaust
all of your CPU time on the main thread

00:21:26.230 --> 00:21:26.240
all of your CPU time on the main thread
 

00:21:26.240 --> 00:21:28.090
all of your CPU time on the main thread
so you really do have to be careful with

00:21:28.090 --> 00:21:28.100
so you really do have to be careful with
 

00:21:28.100 --> 00:21:30.970
so you really do have to be careful with
what you do on this and think about the

00:21:30.970 --> 00:21:30.980
what you do on this and think about the
 

00:21:30.980 --> 00:21:33.640
what you do on this and think about the
interfaces you have between your native

00:21:33.640 --> 00:21:33.650
interfaces you have between your native
 

00:21:33.650 --> 00:21:35.440
interfaces you have between your native
code and the VM all right let's go back

00:21:35.440 --> 00:21:35.450
code and the VM all right let's go back
 

00:21:35.450 --> 00:21:37.480
code and the VM all right let's go back
over to this this this thing so how do

00:21:37.480 --> 00:21:37.490
over to this this this thing so how do
 

00:21:37.490 --> 00:21:39.220
over to this this this thing so how do
we how do we actually deal with sending

00:21:39.220 --> 00:21:39.230
we how do we actually deal with sending
 

00:21:39.230 --> 00:21:41.530
we how do we actually deal with sending
big chunks of data between native code

00:21:41.530 --> 00:21:41.540
big chunks of data between native code
 

00:21:41.540 --> 00:21:46.090
big chunks of data between native code
and and the runtime and there is this

00:21:46.090 --> 00:21:46.100
and and the runtime and there is this
 

00:21:46.100 --> 00:21:49.780
and and the runtime and there is this
cool thing called a direct byte buffer

00:21:49.780 --> 00:21:49.790
cool thing called a direct byte buffer
 

00:21:49.790 --> 00:21:51.310
cool thing called a direct byte buffer
now how many people played with direct

00:21:51.310 --> 00:21:51.320
now how many people played with direct
 

00:21:51.320 --> 00:21:53.440
now how many people played with direct
byte buffers here before you pretty much

00:21:53.440 --> 00:21:53.450
byte buffers here before you pretty much
 

00:21:53.450 --> 00:21:55.600
byte buffers here before you pretty much
only ever want to deal with a direct

00:21:55.600 --> 00:21:55.610
only ever want to deal with a direct
 

00:21:55.610 --> 00:21:56.950
only ever want to deal with a direct
byte buffer if you're working in native

00:21:56.950 --> 00:21:56.960
byte buffer if you're working in native
 

00:21:56.960 --> 00:21:58.450
byte buffer if you're working in native
code there's really no other reason for

00:21:58.450 --> 00:21:58.460
code there's really no other reason for
 

00:21:58.460 --> 00:21:59.950
code there's really no other reason for
them to exist as far as I can tell

00:21:59.950 --> 00:21:59.960
them to exist as far as I can tell
 

00:21:59.960 --> 00:22:03.280
them to exist as far as I can tell
although the VM might choose to not

00:22:03.280 --> 00:22:03.290
although the VM might choose to not
 

00:22:03.290 --> 00:22:05.500
although the VM might choose to not
actually allocate this memory out of its

00:22:05.500 --> 00:22:05.510
actually allocate this memory out of its
 

00:22:05.510 --> 00:22:09.210
actually allocate this memory out of its
normal page pool so on some on some VMs

00:22:09.210 --> 00:22:09.220
normal page pool so on some on some VMs
 

00:22:09.220 --> 00:22:12.340
normal page pool so on some on some VMs
but it actually might get you memory you

00:22:12.340 --> 00:22:12.350
but it actually might get you memory you
 

00:22:12.350 --> 00:22:14.440
but it actually might get you memory you
don't have long way back to us - but in

00:22:14.440 --> 00:22:14.450
don't have long way back to us - but in
 

00:22:14.450 --> 00:22:18.040
don't have long way back to us - but in
our run times it does not so

00:22:18.040 --> 00:22:18.050
our run times it does not so
 

00:22:18.050 --> 00:22:19.840
our run times it does not so
and and you get you get this nice

00:22:19.840 --> 00:22:19.850
and and you get you get this nice
 

00:22:19.850 --> 00:22:22.330
and and you get you get this nice
allocate direct and then when you're

00:22:22.330 --> 00:22:22.340
allocate direct and then when you're
 

00:22:22.340 --> 00:22:23.920
allocate direct and then when you're
inside of native code you can just get

00:22:23.920 --> 00:22:23.930
inside of native code you can just get
 

00:22:23.930 --> 00:22:25.300
inside of native code you can just get
an address to that chunk of memory and

00:22:25.300 --> 00:22:25.310
an address to that chunk of memory and
 

00:22:25.310 --> 00:22:27.070
an address to that chunk of memory and
start writing to it which is really cool

00:22:27.070 --> 00:22:27.080
start writing to it which is really cool
 

00:22:27.080 --> 00:22:29.320
start writing to it which is really cool
and there's no like I want to free this

00:22:29.320 --> 00:22:29.330
and there's no like I want to free this
 

00:22:29.330 --> 00:22:31.450
and there's no like I want to free this
there's no like release address it's one

00:22:31.450 --> 00:22:31.460
there's no like release address it's one
 

00:22:31.460 --> 00:22:34.480
there's no like release address it's one
call so that's nice and fast right in

00:22:34.480 --> 00:22:34.490
call so that's nice and fast right in
 

00:22:34.490 --> 00:22:36.640
call so that's nice and fast right in
theory so this is what this looks like

00:22:36.640 --> 00:22:36.650
theory so this is what this looks like
 

00:22:36.650 --> 00:22:39.010
theory so this is what this looks like
when you're using direct byte buffer so

00:22:39.010 --> 00:22:39.020
when you're using direct byte buffer so
 

00:22:39.020 --> 00:22:41.050
when you're using direct byte buffer so
let's look at the performance again

00:22:41.050 --> 00:22:41.060
let's look at the performance again
 

00:22:41.060 --> 00:22:42.460
let's look at the performance again
we're looking at benchmarks there all

00:22:42.460 --> 00:22:42.470
we're looking at benchmarks there all
 

00:22:42.470 --> 00:22:44.620
we're looking at benchmarks there all
the time and these things keep me up

00:22:44.620 --> 00:22:44.630
the time and these things keep me up
 

00:22:44.630 --> 00:22:47.080
the time and these things keep me up
sleepless nights doing these and what

00:22:47.080 --> 00:22:47.090
sleepless nights doing these and what
 

00:22:47.090 --> 00:22:48.610
sleepless nights doing these and what
that actually looks like and as you can

00:22:48.610 --> 00:22:48.620
that actually looks like and as you can
 

00:22:48.620 --> 00:22:51.220
that actually looks like and as you can
see once again this is a very very slow

00:22:51.220 --> 00:22:51.230
see once again this is a very very slow
 

00:22:51.230 --> 00:22:53.920
see once again this is a very very slow
access because direct buffers actually

00:22:53.920 --> 00:22:53.930
access because direct buffers actually
 

00:22:53.930 --> 00:22:56.470
access because direct buffers actually
involve even more synchronization and

00:22:56.470 --> 00:22:56.480
involve even more synchronization and
 

00:22:56.480 --> 00:22:59.050
involve even more synchronization and
and and so but actually we're talking

00:22:59.050 --> 00:22:59.060
and and so but actually we're talking
 

00:22:59.060 --> 00:23:01.930
and and so but actually we're talking
about something on or running a nexus 5

00:23:01.930 --> 00:23:01.940
about something on or running a nexus 5
 

00:23:01.940 --> 00:23:05.170
about something on or running a nexus 5
is almost in the 600 nanosecond range so

00:23:05.170 --> 00:23:05.180
is almost in the 600 nanosecond range so
 

00:23:05.180 --> 00:23:06.760
is almost in the 600 nanosecond range so
you really want once you actually grab

00:23:06.760 --> 00:23:06.770
you really want once you actually grab
 

00:23:06.770 --> 00:23:08.350
you really want once you actually grab
this the answer is you really want to

00:23:08.350 --> 00:23:08.360
this the answer is you really want to
 

00:23:08.360 --> 00:23:09.640
this the answer is you really want to
use it for something if you're using it

00:23:09.640 --> 00:23:09.650
use it for something if you're using it
 

00:23:09.650 --> 00:23:11.620
use it for something if you're using it
to perhaps an integer not a good idea

00:23:11.620 --> 00:23:11.630
to perhaps an integer not a good idea
 

00:23:11.630 --> 00:23:13.240
to perhaps an integer not a good idea
you want to actually use it to pass lots

00:23:13.240 --> 00:23:13.250
you want to actually use it to pass lots
 

00:23:13.250 --> 00:23:15.130
you want to actually use it to pass lots
of data all right

00:23:15.130 --> 00:23:15.140
of data all right
 

00:23:15.140 --> 00:23:18.040
of data all right
but there's another side to this once

00:23:18.040 --> 00:23:18.050
but there's another side to this once
 

00:23:18.050 --> 00:23:21.220
but there's another side to this once
you're inside of code that's running on

00:23:21.220 --> 00:23:21.230
you're inside of code that's running on
 

00:23:21.230 --> 00:23:23.470
you're inside of code that's running on
the runtime what's the performance of

00:23:23.470 --> 00:23:23.480
the runtime what's the performance of
 

00:23:23.480 --> 00:23:26.110
the runtime what's the performance of
byte buffer reversible direct byte

00:23:26.110 --> 00:23:26.120
byte buffer reversible direct byte
 

00:23:26.120 --> 00:23:27.850
byte buffer reversible direct byte
buffer versus regular byte buffer so

00:23:27.850 --> 00:23:27.860
buffer versus regular byte buffer so
 

00:23:27.860 --> 00:23:33.190
buffer versus regular byte buffer so
let's take a look at that what okay now

00:23:33.190 --> 00:23:33.200
let's take a look at that what okay now
 

00:23:33.200 --> 00:23:36.070
let's take a look at that what okay now
now now now the other me let me just let

00:23:36.070 --> 00:23:36.080
now now now the other me let me just let
 

00:23:36.080 --> 00:23:37.120
now now now the other me let me just let
me just back up a little bit here

00:23:37.120 --> 00:23:37.130
me just back up a little bit here
 

00:23:37.130 --> 00:23:40.210
me just back up a little bit here
because you're seeing something really

00:23:40.210 --> 00:23:40.220
because you're seeing something really
 

00:23:40.220 --> 00:23:42.310
because you're seeing something really
really strange here you're seeing that

00:23:42.310 --> 00:23:42.320
really strange here you're seeing that
 

00:23:42.320 --> 00:23:45.910
really strange here you're seeing that
first of all dalvik Nexus 5 direct byte

00:23:45.910 --> 00:23:45.920
first of all dalvik Nexus 5 direct byte
 

00:23:45.920 --> 00:23:48.520
first of all dalvik Nexus 5 direct byte
buffer is the slowest call by

00:23:48.520 --> 00:23:48.530
buffer is the slowest call by
 

00:23:48.530 --> 00:23:50.770
buffer is the slowest call by
substantial amount compared to all these

00:23:50.770 --> 00:23:50.780
substantial amount compared to all these
 

00:23:50.780 --> 00:23:54.700
substantial amount compared to all these
other calls ok it takes it takes 300

00:23:54.700 --> 00:23:54.710
other calls ok it takes it takes 300
 

00:23:54.710 --> 00:23:56.200
other calls ok it takes it takes 300
nanoseconds the other thing you're

00:23:56.200 --> 00:23:56.210
nanoseconds the other thing you're
 

00:23:56.210 --> 00:23:58.630
nanoseconds the other thing you're
noticing is a direct byte buffer is way

00:23:58.630 --> 00:23:58.640
noticing is a direct byte buffer is way
 

00:23:58.640 --> 00:24:00.370
noticing is a direct byte buffer is way
slower than a standard one which is

00:24:00.370 --> 00:24:00.380
slower than a standard one which is
 

00:24:00.380 --> 00:24:04.210
slower than a standard one which is
backed by a standard byte array in Java

00:24:04.210 --> 00:24:04.220
backed by a standard byte array in Java
 

00:24:04.220 --> 00:24:07.120
backed by a standard byte array in Java
so once again two things that are kind

00:24:07.120 --> 00:24:07.130
so once again two things that are kind
 

00:24:07.130 --> 00:24:08.980
so once again two things that are kind
of weird and whenever we see really

00:24:08.980 --> 00:24:08.990
of weird and whenever we see really
 

00:24:08.990 --> 00:24:10.360
of weird and whenever we see really
weird stuff like this

00:24:10.360 --> 00:24:10.370
weird stuff like this
 

00:24:10.370 --> 00:24:13.690
weird stuff like this
other than scratching my head it is time

00:24:13.690 --> 00:24:13.700
other than scratching my head it is time
 

00:24:13.700 --> 00:24:15.310
other than scratching my head it is time
to go and explore some code and try to

00:24:15.310 --> 00:24:15.320
to go and explore some code and try to
 

00:24:15.320 --> 00:24:17.920
to go and explore some code and try to
figure out why that's the case all right

00:24:17.920 --> 00:24:17.930
figure out why that's the case all right
 

00:24:17.930 --> 00:24:21.100
figure out why that's the case all right
so here is what actually happens when

00:24:21.100 --> 00:24:21.110
so here is what actually happens when
 

00:24:21.110 --> 00:24:22.900
so here is what actually happens when
you do allocate and allocate direct you

00:24:22.900 --> 00:24:22.910
you do allocate and allocate direct you
 

00:24:22.910 --> 00:24:24.310
you do allocate and allocate direct you
actually get a different class we're

00:24:24.310 --> 00:24:24.320
actually get a different class we're
 

00:24:24.320 --> 00:24:26.950
actually get a different class we're
using polymorphism here it's awesome you

00:24:26.950 --> 00:24:26.960
using polymorphism here it's awesome you
 

00:24:26.960 --> 00:24:28.720
using polymorphism here it's awesome you
either get byte array buffer or direct

00:24:28.720 --> 00:24:28.730
either get byte array buffer or direct
 

00:24:28.730 --> 00:24:31.869
either get byte array buffer or direct
byte buffer one of the two okay and

00:24:31.869 --> 00:24:31.879
byte buffer one of the two okay and
 

00:24:31.879 --> 00:24:33.609
byte buffer one of the two okay and
you can see byte array buffer is backed

00:24:33.609 --> 00:24:33.619
you can see byte array buffer is backed
 

00:24:33.619 --> 00:24:37.119
you can see byte array buffer is backed
by an array and DirectBuy buffer is

00:24:37.119 --> 00:24:37.129
by an array and DirectBuy buffer is
 

00:24:37.129 --> 00:24:38.589
by an array and DirectBuy buffer is
actually flat backed by this class

00:24:38.589 --> 00:24:38.599
actually flat backed by this class
 

00:24:38.599 --> 00:24:41.949
actually flat backed by this class
called memory block alright so and

00:24:41.949 --> 00:24:41.959
called memory block alright so and
 

00:24:41.959 --> 00:24:43.779
called memory block alright so and
here's how and here's how we start

00:24:43.779 --> 00:24:43.789
here's how and here's how we start
 

00:24:43.789 --> 00:24:45.879
here's how and here's how we start
reading an integer we use the call and

00:24:45.879 --> 00:24:45.889
reading an integer we use the call and
 

00:24:45.889 --> 00:24:48.399
reading an integer we use the call and
get int and invite array buffer it's

00:24:48.399 --> 00:24:48.409
get int and invite array buffer it's
 

00:24:48.409 --> 00:24:50.319
get int and invite array buffer it's
pretty standard it actually goes into

00:24:50.319 --> 00:24:50.329
pretty standard it actually goes into
 

00:24:50.329 --> 00:24:52.259
pretty standard it actually goes into
another another class called memory

00:24:52.259 --> 00:24:52.269
another another class called memory
 

00:24:52.269 --> 00:24:55.659
another another class called memory
int and inside of inmate side of memory

00:24:55.659 --> 00:24:55.669
int and inside of inmate side of memory
 

00:24:55.669 --> 00:24:56.799
int and inside of inmate side of memory
block we have a little bit we have an

00:24:56.799 --> 00:24:56.809
block we have a little bit we have an
 

00:24:56.809 --> 00:24:58.839
block we have a little bit we have an
extra bit of indirection we actually

00:24:58.839 --> 00:24:58.849
extra bit of indirection we actually
 

00:24:58.849 --> 00:25:01.029
extra bit of indirection we actually
have to call into the block class which

00:25:01.029 --> 00:25:01.039
have to call into the block class which
 

00:25:01.039 --> 00:25:03.369
have to call into the block class which
calls into memory dot peak int but a

00:25:03.369 --> 00:25:03.379
calls into memory dot peak int but a
 

00:25:03.379 --> 00:25:05.409
calls into memory dot peak int but a
different call cuz that piquant is

00:25:05.409 --> 00:25:05.419
different call cuz that piquant is
 

00:25:05.419 --> 00:25:07.449
different call cuz that piquant is
taking a backing array and that other

00:25:07.449 --> 00:25:07.459
taking a backing array and that other
 

00:25:07.459 --> 00:25:09.669
taking a backing array and that other
one is taking an address plus offset and

00:25:09.669 --> 00:25:09.679
one is taking an address plus offset and
 

00:25:09.679 --> 00:25:12.669
one is taking an address plus offset and
yes you are actually looking essentially

00:25:12.669 --> 00:25:12.679
yes you are actually looking essentially
 

00:25:12.679 --> 00:25:15.669
yes you are actually looking essentially
at pointer arithmetic inside of the

00:25:15.669 --> 00:25:15.679
at pointer arithmetic inside of the
 

00:25:15.679 --> 00:25:18.009
at pointer arithmetic inside of the
runtime right here not something you see

00:25:18.009 --> 00:25:18.019
runtime right here not something you see
 

00:25:18.019 --> 00:25:22.869
runtime right here not something you see
very often so what does this mean well

00:25:22.869 --> 00:25:22.879
very often so what does this mean well
 

00:25:22.879 --> 00:25:24.459
very often so what does this mean well
when you're actually looking at how this

00:25:24.459 --> 00:25:24.469
when you're actually looking at how this
 

00:25:24.469 --> 00:25:25.899
when you're actually looking at how this
is implemented if you try to find the

00:25:25.899 --> 00:25:25.909
is implemented if you try to find the
 

00:25:25.909 --> 00:25:26.949
is implemented if you try to find the
source code this is what you'll see

00:25:26.949 --> 00:25:26.959
source code this is what you'll see
 

00:25:26.959 --> 00:25:30.149
source code this is what you'll see
you'll see probably the most classic

00:25:30.149 --> 00:25:30.159
you'll see probably the most classic
 

00:25:30.159 --> 00:25:33.489
you'll see probably the most classic
implementation of how to how to pull

00:25:33.489 --> 00:25:33.499
implementation of how to how to pull
 

00:25:33.499 --> 00:25:37.479
implementation of how to how to pull
data from an array and get it into an

00:25:37.479 --> 00:25:37.489
data from an array and get it into an
 

00:25:37.489 --> 00:25:39.039
data from an array and get it into an
integer that you see inside of the byte

00:25:39.039 --> 00:25:39.049
integer that you see inside of the byte
 

00:25:39.049 --> 00:25:40.689
integer that you see inside of the byte
array class and inside a memory block it

00:25:40.689 --> 00:25:40.699
array class and inside a memory block it
 

00:25:40.699 --> 00:25:44.529
array class and inside a memory block it
actually calls into J&amp;I alright alright

00:25:44.529 --> 00:25:44.539
actually calls into J&amp;I alright alright
 

00:25:44.539 --> 00:25:46.329
actually calls into J&amp;I alright alright
so this is this is know now remember

00:25:46.329 --> 00:25:46.339
so this is this is know now remember
 

00:25:46.339 --> 00:25:47.919
so this is this is know now remember
let's let's go back to this this graph

00:25:47.919 --> 00:25:47.929
let's let's go back to this this graph
 

00:25:47.929 --> 00:25:54.789
let's let's go back to this this graph
here so we saw that that art is way way

00:25:54.789 --> 00:25:54.799
here so we saw that that art is way way
 

00:25:54.799 --> 00:25:56.739
here so we saw that that art is way way
faster than dolls I could doing this and

00:25:56.739 --> 00:25:56.749
faster than dolls I could doing this and
 

00:25:56.749 --> 00:25:58.599
faster than dolls I could doing this and
yet we just demonstrated looking at the

00:25:58.599 --> 00:25:58.609
yet we just demonstrated looking at the
 

00:25:58.609 --> 00:26:00.759
yet we just demonstrated looking at the
source code that it's actually calling

00:26:00.759 --> 00:26:00.769
source code that it's actually calling
 

00:26:00.769 --> 00:26:03.789
source code that it's actually calling
in to J and I so that's really weird why

00:26:03.789 --> 00:26:03.799
in to J and I so that's really weird why
 

00:26:03.799 --> 00:26:07.419
in to J and I so that's really weird why
is it so much faster alright so once

00:26:07.419 --> 00:26:07.429
is it so much faster alright so once
 

00:26:07.429 --> 00:26:09.819
is it so much faster alright so once
once again here's what actually happens

00:26:09.819 --> 00:26:09.829
once again here's what actually happens
 

00:26:09.829 --> 00:26:12.729
once again here's what actually happens
inside of that native code but really

00:26:12.729 --> 00:26:12.739
inside of that native code but really
 

00:26:12.739 --> 00:26:14.139
inside of that native code but really
doesn't matter because as we've shown

00:26:14.139 --> 00:26:14.149
doesn't matter because as we've shown
 

00:26:14.149 --> 00:26:16.299
doesn't matter because as we've shown
almost all of the cost of this operation

00:26:16.299 --> 00:26:16.309
almost all of the cost of this operation
 

00:26:16.309 --> 00:26:18.069
almost all of the cost of this operation
is going to be in synchronizing between

00:26:18.069 --> 00:26:18.079
is going to be in synchronizing between
 

00:26:18.079 --> 00:26:19.869
is going to be in synchronizing between
the different thread States what between

00:26:19.869 --> 00:26:19.879
the different thread States what between
 

00:26:19.879 --> 00:26:22.569
the different thread States what between
the two VMs so it turns out that art is

00:26:22.569 --> 00:26:22.579
the two VMs so it turns out that art is
 

00:26:22.579 --> 00:26:25.799
the two VMs so it turns out that art is
actually doing a little trick and that

00:26:25.799 --> 00:26:25.809
actually doing a little trick and that
 

00:26:25.809 --> 00:26:28.629
actually doing a little trick and that
is when it actually declares the method

00:26:28.629 --> 00:26:28.639
is when it actually declares the method
 

00:26:28.639 --> 00:26:29.829
is when it actually declares the method
it's declaring it with this little

00:26:29.829 --> 00:26:29.839
it's declaring it with this little
 

00:26:29.839 --> 00:26:32.619
it's declaring it with this little
exclamation point on it which is a flag

00:26:32.619 --> 00:26:32.629
exclamation point on it which is a flag
 

00:26:32.629 --> 00:26:35.649
exclamation point on it which is a flag
to the VM that says well this is a

00:26:35.649 --> 00:26:35.659
to the VM that says well this is a
 

00:26:35.659 --> 00:26:38.739
to the VM that says well this is a
dangerous function actually it's a

00:26:38.739 --> 00:26:38.749
dangerous function actually it's a
 

00:26:38.749 --> 00:26:40.119
dangerous function actually it's a
flight to the person coding it that it's

00:26:40.119 --> 00:26:40.129
flight to the person coding it that it's
 

00:26:40.129 --> 00:26:41.169
flight to the person coding it that it's
a dangerous function it's a flag to the

00:26:41.169 --> 00:26:41.179
a dangerous function it's a flag to the
 

00:26:41.179 --> 00:26:42.639
a dangerous function it's a flag to the
VM saying this is a very non dangerous

00:26:42.639 --> 00:26:42.649
VM saying this is a very non dangerous
 

00:26:42.649 --> 00:26:44.709
VM saying this is a very non dangerous
function it's not going to try to cut do

00:26:44.709 --> 00:26:44.719
function it's not going to try to cut do
 

00:26:44.719 --> 00:26:45.020
function it's not going to try to cut do
any

00:26:45.020 --> 00:26:45.030
any
 

00:26:45.030 --> 00:26:47.510
any
in Java it's not gonna last very long so

00:26:47.510 --> 00:26:47.520
in Java it's not gonna last very long so
 

00:26:47.520 --> 00:26:49.700
in Java it's not gonna last very long so
let's not actually go through and change

00:26:49.700 --> 00:26:49.710
let's not actually go through and change
 

00:26:49.710 --> 00:26:51.560
let's not actually go through and change
the state of a thread at all let's just

00:26:51.560 --> 00:26:51.570
the state of a thread at all let's just
 

00:26:51.570 --> 00:26:57.160
the state of a thread at all let's just
run this code as quickly as possible so

00:26:57.160 --> 00:26:57.170
 

00:26:57.170 --> 00:27:00.950
once again this is how how long it

00:27:00.950 --> 00:27:00.960
once again this is how how long it
 

00:27:00.960 --> 00:27:03.800
once again this is how how long it
actually takes to read that integer from

00:27:03.800 --> 00:27:03.810
actually takes to read that integer from
 

00:27:03.810 --> 00:27:07.580
actually takes to read that integer from
a byte buffer now it's still about half

00:27:07.580 --> 00:27:07.590
a byte buffer now it's still about half
 

00:27:07.590 --> 00:27:12.410
a byte buffer now it's still about half
the speed even on art of our of our of

00:27:12.410 --> 00:27:12.420
the speed even on art of our of our of
 

00:27:12.420 --> 00:27:14.060
the speed even on art of our of our of
our standard byte buffer college even

00:27:14.060 --> 00:27:14.070
our standard byte buffer college even
 

00:27:14.070 --> 00:27:15.740
our standard byte buffer college even
with all of that even with this fast

00:27:15.740 --> 00:27:15.750
with all of that even with this fast
 

00:27:15.750 --> 00:27:18.710
with all of that even with this fast
switching and that's because what you're

00:27:18.710 --> 00:27:18.720
switching and that's because what you're
 

00:27:18.720 --> 00:27:20.720
switching and that's because what you're
at you if you actually go in and throw

00:27:20.720 --> 00:27:20.730
at you if you actually go in and throw
 

00:27:20.730 --> 00:27:22.130
at you if you actually go in and throw
this into a debugger you realize that

00:27:22.130 --> 00:27:22.140
this into a debugger you realize that
 

00:27:22.140 --> 00:27:24.440
this into a debugger you realize that
that whole statement about where it's

00:27:24.440 --> 00:27:24.450
that whole statement about where it's
 

00:27:24.450 --> 00:27:26.240
that whole statement about where it's
using you know lots and lots of shifts

00:27:26.240 --> 00:27:26.250
using you know lots and lots of shifts
 

00:27:26.250 --> 00:27:27.560
using you know lots and lots of shifts
in order to do it it's actually not

00:27:27.560 --> 00:27:27.570
in order to do it it's actually not
 

00:27:27.570 --> 00:27:28.610
in order to do it it's actually not
getting run at all it's actually in

00:27:28.610 --> 00:27:28.620
getting run at all it's actually in
 

00:27:28.620 --> 00:27:30.950
getting run at all it's actually in
intrinsic and so that's how this is is

00:27:30.950 --> 00:27:30.960
intrinsic and so that's how this is is
 

00:27:30.960 --> 00:27:32.930
intrinsic and so that's how this is is
speeding it up and also even if it was

00:27:32.930 --> 00:27:32.940
speeding it up and also even if it was
 

00:27:32.940 --> 00:27:34.970
speeding it up and also even if it was
running that code it's just really fast

00:27:34.970 --> 00:27:34.980
running that code it's just really fast
 

00:27:34.980 --> 00:27:37.970
running that code it's just really fast
like it's really really fast and as it

00:27:37.970 --> 00:27:37.980
like it's really really fast and as it
 

00:27:37.980 --> 00:27:39.830
like it's really really fast and as it
turns out there is some overhead in

00:27:39.830 --> 00:27:39.840
turns out there is some overhead in
 

00:27:39.840 --> 00:27:43.400
turns out there is some overhead in
doing even this fast J and I call

00:27:43.400 --> 00:27:43.410
doing even this fast J and I call
 

00:27:43.410 --> 00:27:44.600
doing even this fast J and I call
because it still has to set up the call

00:27:44.600 --> 00:27:44.610
because it still has to set up the call
 

00:27:44.610 --> 00:27:46.130
because it still has to set up the call
stack and do all the other things that

00:27:46.130 --> 00:27:46.140
stack and do all the other things that
 

00:27:46.140 --> 00:27:48.380
stack and do all the other things that
it would have to do to do it to actually

00:27:48.380 --> 00:27:48.390
it would have to do to do it to actually
 

00:27:48.390 --> 00:27:50.660
it would have to do to do it to actually
switch from running in the runtime to

00:27:50.660 --> 00:27:50.670
switch from running in the runtime to
 

00:27:50.670 --> 00:27:53.090
switch from running in the runtime to
running native and that's that takes

00:27:53.090 --> 00:27:53.100
running native and that's that takes
 

00:27:53.100 --> 00:27:55.580
running native and that's that takes
about 50 to 60 nanoseconds according to

00:27:55.580 --> 00:27:55.590
about 50 to 60 nanoseconds according to
 

00:27:55.590 --> 00:27:57.800
about 50 to 60 nanoseconds according to
my benchmarks just to do that in fast

00:27:57.800 --> 00:27:57.810
my benchmarks just to do that in fast
 

00:27:57.810 --> 00:28:02.690
my benchmarks just to do that in fast
j'ni all right so is there anything we

00:28:02.690 --> 00:28:02.700
j'ni all right so is there anything we
 

00:28:02.700 --> 00:28:04.370
j'ni all right so is there anything we
can do to avoid having to make a jam I

00:28:04.370 --> 00:28:04.380
can do to avoid having to make a jam I
 

00:28:04.380 --> 00:28:07.130
can do to avoid having to make a jam I
call for every single int we want to

00:28:07.130 --> 00:28:07.140
call for every single int we want to
 

00:28:07.140 --> 00:28:10.760
call for every single int we want to
read it turns out there is we can

00:28:10.760 --> 00:28:10.770
read it turns out there is we can
 

00:28:10.770 --> 00:28:14.750
read it turns out there is we can
actually get it all at once using using

00:28:14.750 --> 00:28:14.760
actually get it all at once using using
 

00:28:14.760 --> 00:28:16.340
actually get it all at once using using
something like this sound so we can get

00:28:16.340 --> 00:28:16.350
something like this sound so we can get
 

00:28:16.350 --> 00:28:18.350
something like this sound so we can get
buffer we can allocate an array we can

00:28:18.350 --> 00:28:18.360
buffer we can allocate an array we can
 

00:28:18.360 --> 00:28:20.450
buffer we can allocate an array we can
wrap that in a new byte buffer and then

00:28:20.450 --> 00:28:20.460
wrap that in a new byte buffer and then
 

00:28:20.460 --> 00:28:21.800
wrap that in a new byte buffer and then
we can get that okay and we have to

00:28:21.800 --> 00:28:21.810
we can get that okay and we have to
 

00:28:21.810 --> 00:28:23.510
we can get that okay and we have to
fiddle with the position because

00:28:23.510 --> 00:28:23.520
fiddle with the position because
 

00:28:23.520 --> 00:28:25.340
fiddle with the position because
otherwise there's an overflow there's no

00:28:25.340 --> 00:28:25.350
otherwise there's an overflow there's no
 

00:28:25.350 --> 00:28:27.770
otherwise there's an overflow there's no
fast call to actually just give me the

00:28:27.770 --> 00:28:27.780
fast call to actually just give me the
 

00:28:27.780 --> 00:28:29.690
fast call to actually just give me the
contents of that of that buffer that'll

00:28:29.690 --> 00:28:29.700
contents of that of that buffer that'll
 

00:28:29.700 --> 00:28:32.090
contents of that of that buffer that'll
actually work so believe it or not this

00:28:32.090 --> 00:28:32.100
actually work so believe it or not this
 

00:28:32.100 --> 00:28:34.070
actually work so believe it or not this
is what you have to do and what does

00:28:34.070 --> 00:28:34.080
is what you have to do and what does
 

00:28:34.080 --> 00:28:35.930
is what you have to do and what does
that look like if you do all of that

00:28:35.930 --> 00:28:35.940
that look like if you do all of that
 

00:28:35.940 --> 00:28:37.730
that look like if you do all of that
allocations and this is even including D

00:28:37.730 --> 00:28:37.740
allocations and this is even including D
 

00:28:37.740 --> 00:28:39.290
allocations and this is even including D
allocations and stuff like that and the

00:28:39.290 --> 00:28:39.300
allocations and stuff like that and the
 

00:28:39.300 --> 00:28:40.570
allocations and stuff like that and the
answer is of course it's pretty slow

00:28:40.570 --> 00:28:40.580
answer is of course it's pretty slow
 

00:28:40.580 --> 00:28:43.580
answer is of course it's pretty slow
it's really really slow on dalvik you

00:28:43.580 --> 00:28:43.590
it's really really slow on dalvik you
 

00:28:43.590 --> 00:28:45.500
it's really really slow on dalvik you
can you can see like this is this is

00:28:45.500 --> 00:28:45.510
can you can see like this is this is
 

00:28:45.510 --> 00:28:46.490
can you can see like this is this is
where you're started getting into

00:28:46.490 --> 00:28:46.500
where you're started getting into
 

00:28:46.500 --> 00:28:49.490
where you're started getting into
multiple levels of optimization here but

00:28:49.490 --> 00:28:49.500
multiple levels of optimization here but
 

00:28:49.500 --> 00:28:52.670
multiple levels of optimization here but
if you're going to be moving a lot lot

00:28:52.670 --> 00:28:52.680
if you're going to be moving a lot lot
 

00:28:52.680 --> 00:28:56.600
if you're going to be moving a lot lot
lot of data around big big big chunk of

00:28:56.600 --> 00:28:56.610
lot of data around big big big chunk of
 

00:28:56.610 --> 00:28:57.800
lot of data around big big big chunk of
data and you're going to be accessing

00:28:57.800 --> 00:28:57.810
data and you're going to be accessing
 

00:28:57.810 --> 00:28:58.670
data and you're going to be accessing
that

00:28:58.670 --> 00:28:58.680
that
 

00:28:58.680 --> 00:29:01.280
that
from within with inside of the of the

00:29:01.280 --> 00:29:01.290
from within with inside of the of the
 

00:29:01.290 --> 00:29:04.190
from within with inside of the of the
runtime then yes this is a strategy that

00:29:04.190 --> 00:29:04.200
runtime then yes this is a strategy that
 

00:29:04.200 --> 00:29:06.620
runtime then yes this is a strategy that
might make sense for you if you're like

00:29:06.620 --> 00:29:06.630
might make sense for you if you're like
 

00:29:06.630 --> 00:29:07.880
might make sense for you if you're like
for example one of the things you might

00:29:07.880 --> 00:29:07.890
for example one of the things you might
 

00:29:07.890 --> 00:29:09.290
for example one of the things you might
want to be doing is using like

00:29:09.290 --> 00:29:09.300
want to be doing is using like
 

00:29:09.300 --> 00:29:13.540
want to be doing is using like
flatbuffers to move big c structures to

00:29:13.540 --> 00:29:13.550
flatbuffers to move big c structures to
 

00:29:13.550 --> 00:29:16.070
flatbuffers to move big c structures to
the runtime and how many of you are

00:29:16.070 --> 00:29:16.080
the runtime and how many of you are
 

00:29:16.080 --> 00:29:17.840
the runtime and how many of you are
familiar with flatbuffers first of all

00:29:17.840 --> 00:29:17.850
familiar with flatbuffers first of all
 

00:29:17.850 --> 00:29:18.800
familiar with flatbuffers first of all
when i when i say that

00:29:18.800 --> 00:29:18.810
when i when i say that
 

00:29:18.810 --> 00:29:20.300
when i when i say that
alright so flatbuffers are really cool

00:29:20.300 --> 00:29:20.310
alright so flatbuffers are really cool
 

00:29:20.310 --> 00:29:21.970
alright so flatbuffers are really cool
they're an open source project that that

00:29:21.970 --> 00:29:21.980
they're an open source project that that
 

00:29:21.980 --> 00:29:26.840
they're an open source project that that
my team created and and it basically

00:29:26.840 --> 00:29:26.850
my team created and and it basically
 

00:29:26.850 --> 00:29:31.630
my team created and and it basically
allows you to do really really efficient

00:29:31.630 --> 00:29:31.640
allows you to do really really efficient
 

00:29:31.640 --> 00:29:34.340
allows you to do really really efficient
translation from stuff that's coming in

00:29:34.340 --> 00:29:34.350
translation from stuff that's coming in
 

00:29:34.350 --> 00:29:37.040
translation from stuff that's coming in
either from disk or from network into

00:29:37.040 --> 00:29:37.050
either from disk or from network into
 

00:29:37.050 --> 00:29:38.960
either from disk or from network into
structures that you can use it is about

00:29:38.960 --> 00:29:38.970
structures that you can use it is about
 

00:29:38.970 --> 00:29:40.880
structures that you can use it is about
as efficient as you can get given the

00:29:40.880 --> 00:29:40.890
as efficient as you can get given the
 

00:29:40.890 --> 00:29:43.280
as efficient as you can get given the
amount of flexibility that it has it's

00:29:43.280 --> 00:29:43.290
amount of flexibility that it has it's
 

00:29:43.290 --> 00:29:44.930
amount of flexibility that it has it's
actually very similar to protobufs if

00:29:44.930 --> 00:29:44.940
actually very similar to protobufs if
 

00:29:44.940 --> 00:29:46.280
actually very similar to protobufs if
any of you have used that except that

00:29:46.280 --> 00:29:46.290
any of you have used that except that
 

00:29:46.290 --> 00:29:48.440
any of you have used that except that
it's designed from the start to run on

00:29:48.440 --> 00:29:48.450
it's designed from the start to run on
 

00:29:48.450 --> 00:29:52.480
it's designed from the start to run on
mobile and to run really really fast so

00:29:52.480 --> 00:29:52.490
mobile and to run really really fast so
 

00:29:52.490 --> 00:29:54.230
mobile and to run really really fast so
so if you're doing something like that

00:29:54.230 --> 00:29:54.240
so if you're doing something like that
 

00:29:54.240 --> 00:29:56.000
so if you're doing something like that
you might actually get some performance

00:29:56.000 --> 00:29:56.010
you might actually get some performance
 

00:29:56.010 --> 00:29:58.520
you might actually get some performance
out of this all right so now since we

00:29:58.520 --> 00:29:58.530
out of this all right so now since we
 

00:29:58.530 --> 00:30:00.860
out of this all right so now since we
have a little time on today show you

00:30:00.860 --> 00:30:00.870
have a little time on today show you
 

00:30:00.870 --> 00:30:03.290
have a little time on today show you
just a little bit of how you use j'ni in

00:30:03.290 --> 00:30:03.300
just a little bit of how you use j'ni in
 

00:30:03.300 --> 00:30:07.970
just a little bit of how you use j'ni in
Android studio all right so once again

00:30:07.970 --> 00:30:07.980
Android studio all right so once again
 

00:30:07.980 --> 00:30:09.230
Android studio all right so once again
how many of you here have actually tried

00:30:09.230 --> 00:30:09.240
how many of you here have actually tried
 

00:30:09.240 --> 00:30:12.440
how many of you here have actually tried
doing this in Android studio okay so

00:30:12.440 --> 00:30:12.450
doing this in Android studio okay so
 

00:30:12.450 --> 00:30:14.210
doing this in Android studio okay so
that's not not an enormous enormous

00:30:14.210 --> 00:30:14.220
that's not not an enormous enormous
 

00:30:14.220 --> 00:30:15.890
that's not not an enormous enormous
number of people but that's that's ok

00:30:15.890 --> 00:30:15.900
number of people but that's that's ok
 

00:30:15.900 --> 00:30:17.740
number of people but that's that's ok
because this is actually really cool

00:30:17.740 --> 00:30:17.750
because this is actually really cool
 

00:30:17.750 --> 00:30:21.250
because this is actually really cool
this made my life so much easier than

00:30:21.250 --> 00:30:21.260
this made my life so much easier than
 

00:30:21.260 --> 00:30:25.940
this made my life so much easier than
that actually trying to then trying to

00:30:25.940 --> 00:30:25.950
that actually trying to then trying to
 

00:30:25.950 --> 00:30:29.990
that actually trying to then trying to
actually deal with with the various

00:30:29.990 --> 00:30:30.000
actually deal with with the various
 

00:30:30.000 --> 00:30:31.160
actually deal with with the various
things that go on into and I see here

00:30:31.160 --> 00:30:31.170
things that go on into and I see here
 

00:30:31.170 --> 00:30:32.270
things that go on into and I see here
here's a whole bunch of native

00:30:32.270 --> 00:30:32.280
here's a whole bunch of native
 

00:30:32.280 --> 00:30:34.280
here's a whole bunch of native
declarations that are inside of my ji

00:30:34.280 --> 00:30:34.290
declarations that are inside of my ji
 

00:30:34.290 --> 00:30:36.950
declarations that are inside of my ji
Bank benchmark class and you can see the

00:30:36.950 --> 00:30:36.960
Bank benchmark class and you can see the
 

00:30:36.960 --> 00:30:38.480
Bank benchmark class and you can see the
kinds of things you would expect you

00:30:38.480 --> 00:30:38.490
kinds of things you would expect you
 

00:30:38.490 --> 00:30:40.070
kinds of things you would expect you
know like these byte array calls and

00:30:40.070 --> 00:30:40.080
know like these byte array calls and
 

00:30:40.080 --> 00:30:42.350
know like these byte array calls and
string calls and and so let's I want to

00:30:42.350 --> 00:30:42.360
string calls and and so let's I want to
 

00:30:42.360 --> 00:30:44.750
string calls and and so let's I want to
add another native method okay so I'm

00:30:44.750 --> 00:30:44.760
add another native method okay so I'm
 

00:30:44.760 --> 00:30:47.900
add another native method okay so I'm
going to type native I'm gonna let's

00:30:47.900 --> 00:30:47.910
going to type native I'm gonna let's
 

00:30:47.910 --> 00:30:50.900
going to type native I'm gonna let's
have it return an end I don't have to do

00:30:50.900 --> 00:30:50.910
have it return an end I don't have to do
 

00:30:50.910 --> 00:30:52.310
have it return an end I don't have to do
call it J and I but just for consistency

00:30:52.310 --> 00:30:52.320
call it J and I but just for consistency
 

00:30:52.320 --> 00:30:57.740
call it J and I but just for consistency
I'm gonna call J and I pass a bunch of

00:30:57.740 --> 00:30:57.750
I'm gonna call J and I pass a bunch of
 

00:30:57.750 --> 00:31:02.690
I'm gonna call J and I pass a bunch of
stuff to native and so we're gonna pass

00:31:02.690 --> 00:31:02.700
stuff to native and so we're gonna pass
 

00:31:02.700 --> 00:31:10.820
stuff to native and so we're gonna pass
let's say a string a byte byte buffer

00:31:10.820 --> 00:31:10.830
let's say a string a byte byte buffer
 

00:31:10.830 --> 00:31:25.340
let's say a string a byte byte buffer
a an integer Andale and a long etc etc

00:31:25.340 --> 00:31:25.350
a an integer Andale and a long etc etc
 

00:31:25.350 --> 00:31:26.990
a an integer Andale and a long etc etc
and you see a couple of things have

00:31:26.990 --> 00:31:27.000
and you see a couple of things have
 

00:31:27.000 --> 00:31:28.549
and you see a couple of things have
happened here probably the most useful

00:31:28.549 --> 00:31:28.559
happened here probably the most useful
 

00:31:28.559 --> 00:31:30.889
happened here probably the most useful
thing is it we actually now are

00:31:30.889 --> 00:31:30.899
thing is it we actually now are
 

00:31:30.899 --> 00:31:34.549
thing is it we actually now are
compiling the native code and the java

00:31:34.549 --> 00:31:34.559
compiling the native code and the java
 

00:31:34.559 --> 00:31:36.380
compiling the native code and the java
code all in one Gradle build which is

00:31:36.380 --> 00:31:36.390
code all in one Gradle build which is
 

00:31:36.390 --> 00:31:37.909
code all in one Gradle build which is
really awesome because we can do stuff

00:31:37.909 --> 00:31:37.919
really awesome because we can do stuff
 

00:31:37.919 --> 00:31:40.580
really awesome because we can do stuff
like say hey this function actually

00:31:40.580 --> 00:31:40.590
like say hey this function actually
 

00:31:40.590 --> 00:31:43.519
like say hey this function actually
isn't found we can't resolve this so you

00:31:43.519 --> 00:31:43.529
isn't found we can't resolve this so you
 

00:31:43.529 --> 00:31:45.169
isn't found we can't resolve this so you
see it shows up red it knows that it's

00:31:45.169 --> 00:31:45.179
see it shows up red it knows that it's
 

00:31:45.179 --> 00:31:46.639
see it shows up red it knows that it's
not in my native code so here is the

00:31:46.639 --> 00:31:46.649
not in my native code so here is the
 

00:31:46.649 --> 00:31:48.110
not in my native code so here is the
really really cool trick for anyone who

00:31:48.110 --> 00:31:48.120
really really cool trick for anyone who
 

00:31:48.120 --> 00:31:50.720
really really cool trick for anyone who
has done a lot of a lot of j'ni code to

00:31:50.720 --> 00:31:50.730
has done a lot of a lot of j'ni code to
 

00:31:50.730 --> 00:31:51.860
has done a lot of a lot of j'ni code to
be able to bility to do this is awesome

00:31:51.860 --> 00:31:51.870
be able to bility to do this is awesome
 

00:31:51.870 --> 00:31:55.639
be able to bility to do this is awesome
I can do create function here click on

00:31:55.639 --> 00:31:55.649
I can do create function here click on
 

00:31:55.649 --> 00:31:59.570
I can do create function here click on
this and now I have a native function

00:31:59.570 --> 00:31:59.580
this and now I have a native function
 

00:31:59.580 --> 00:32:00.889
this and now I have a native function
that's crew that's been created inside

00:32:00.889 --> 00:32:00.899
that's crew that's been created inside
 

00:32:00.899 --> 00:32:04.279
that's crew that's been created inside
of that C of that C file and this is

00:32:04.279 --> 00:32:04.289
of that C of that C file and this is
 

00:32:04.289 --> 00:32:06.019
of that C of that C file and this is
really cool not only first of all is

00:32:06.019 --> 00:32:06.029
really cool not only first of all is
 

00:32:06.029 --> 00:32:07.669
really cool not only first of all is
it's it's also done some helper things

00:32:07.669 --> 00:32:07.679
it's it's also done some helper things
 

00:32:07.679 --> 00:32:10.100
it's it's also done some helper things
for me it thinks I might want to get

00:32:10.100 --> 00:32:10.110
for me it thinks I might want to get
 

00:32:10.110 --> 00:32:12.529
for me it thinks I might want to get
this string interesting enough into UTF

00:32:12.529 --> 00:32:12.539
this string interesting enough into UTF
 

00:32:12.539 --> 00:32:14.509
this string interesting enough into UTF
rather than rather than double by

00:32:14.509 --> 00:32:14.519
rather than rather than double by
 

00:32:14.519 --> 00:32:17.450
rather than rather than double by
characters but hey you know it's

00:32:17.450 --> 00:32:17.460
characters but hey you know it's
 

00:32:17.460 --> 00:32:19.879
characters but hey you know it's
probably what your code wants and then

00:32:19.879 --> 00:32:19.889
probably what your code wants and then
 

00:32:19.889 --> 00:32:21.769
probably what your code wants and then
and it's also gotten the byte array

00:32:21.769 --> 00:32:21.779
and it's also gotten the byte array
 

00:32:21.779 --> 00:32:23.149
and it's also gotten the byte array
elements for me and it's released them

00:32:23.149 --> 00:32:23.159
elements for me and it's released them
 

00:32:23.159 --> 00:32:24.350
elements for me and it's released them
at the end because if you're gonna use

00:32:24.350 --> 00:32:24.360
at the end because if you're gonna use
 

00:32:24.360 --> 00:32:25.730
at the end because if you're gonna use
it's assuming you're actually gonna want

00:32:25.730 --> 00:32:25.740
it's assuming you're actually gonna want
 

00:32:25.740 --> 00:32:26.990
it's assuming you're actually gonna want
to use these things and so it actually

00:32:26.990 --> 00:32:27.000
to use these things and so it actually
 

00:32:27.000 --> 00:32:29.180
to use these things and so it actually
puts in that code for you so this is

00:32:29.180 --> 00:32:29.190
puts in that code for you so this is
 

00:32:29.190 --> 00:32:30.680
puts in that code for you so this is
really really cool and the best part is

00:32:30.680 --> 00:32:30.690
really really cool and the best part is
 

00:32:30.690 --> 00:32:32.629
really really cool and the best part is
now when I go back to my benchmark class

00:32:32.629 --> 00:32:32.639
now when I go back to my benchmark class
 

00:32:32.639 --> 00:32:34.970
now when I go back to my benchmark class
here you'll see it's no longer red it's

00:32:34.970 --> 00:32:34.980
here you'll see it's no longer red it's
 

00:32:34.980 --> 00:32:38.299
here you'll see it's no longer red it's
actually done the compile and we are

00:32:38.299 --> 00:32:38.309
actually done the compile and we are
 

00:32:38.309 --> 00:32:40.159
actually done the compile and we are
golden we are actually ready to now run

00:32:40.159 --> 00:32:40.169
golden we are actually ready to now run
 

00:32:40.169 --> 00:32:42.440
golden we are actually ready to now run
that inside of this class so if you

00:32:42.440 --> 00:32:42.450
that inside of this class so if you
 

00:32:42.450 --> 00:32:44.029
that inside of this class so if you
haven't had a chance to play around with

00:32:44.029 --> 00:32:44.039
haven't had a chance to play around with
 

00:32:44.039 --> 00:32:45.649
haven't had a chance to play around with
Android studio and its support of the

00:32:45.649 --> 00:32:45.659
Android studio and its support of the
 

00:32:45.659 --> 00:32:48.230
Android studio and its support of the
NDK I highly recommend it it's still a

00:32:48.230 --> 00:32:48.240
NDK I highly recommend it it's still a
 

00:32:48.240 --> 00:32:50.000
NDK I highly recommend it it's still a
little bit of work to get your Gradle

00:32:50.000 --> 00:32:50.010
little bit of work to get your Gradle
 

00:32:50.010 --> 00:32:50.930
little bit of work to get your Gradle
project up and running because you've

00:32:50.930 --> 00:32:50.940
project up and running because you've
 

00:32:50.940 --> 00:32:51.980
project up and running because you've
still got to use the experimental

00:32:51.980 --> 00:32:51.990
still got to use the experimental
 

00:32:51.990 --> 00:32:53.690
still got to use the experimental
version of Gradle but you don't actually

00:32:53.690 --> 00:32:53.700
version of Gradle but you don't actually
 

00:32:53.700 --> 00:32:56.139
version of Gradle but you don't actually
have to use the experimental version of

00:32:56.139 --> 00:32:56.149
have to use the experimental version of
 

00:32:56.149 --> 00:32:59.000
have to use the experimental version of
Android studio it is now in mainline so

00:32:59.000 --> 00:32:59.010
Android studio it is now in mainline so
 

00:32:59.010 --> 00:33:01.580
Android studio it is now in mainline so
go check it out play with it and make

00:33:01.580 --> 00:33:01.590
go check it out play with it and make
 

00:33:01.590 --> 00:33:02.600
go check it out play with it and make
sure that you're not making your

00:33:02.600 --> 00:33:02.610
sure that you're not making your
 

00:33:02.610 --> 00:33:04.639
sure that you're not making your
applications that actually use the NDK

00:33:04.639 --> 00:33:04.649
applications that actually use the NDK
 

00:33:04.649 --> 00:33:06.440
applications that actually use the NDK
very chatty if there's anything you can

00:33:06.440 --> 00:33:06.450
very chatty if there's anything you can
 

00:33:06.450 --> 00:33:09.200
very chatty if there's anything you can
take back from this entire lecture all

00:33:09.200 --> 00:33:09.210
take back from this entire lecture all
 

00:33:09.210 --> 00:33:12.879
take back from this entire lecture all
right so I'm going to switch back into

00:33:12.879 --> 00:33:12.889
 

00:33:12.889 --> 00:33:15.470
into non mirroring mode so I can you

00:33:15.470 --> 00:33:15.480
into non mirroring mode so I can you
 

00:33:15.480 --> 00:33:17.330
into non mirroring mode so I can you
know finish all of us all of the

00:33:17.330 --> 00:33:17.340
know finish all of us all of the
 

00:33:17.340 --> 00:33:21.769
know finish all of us all of the
exciting slides that are left in my that

00:33:21.769 --> 00:33:21.779
exciting slides that are left in my that
 

00:33:21.779 --> 00:33:23.510
exciting slides that are left in my that
are that are left in my presentation

00:33:23.510 --> 00:33:23.520
are that are left in my presentation
 

00:33:23.520 --> 00:33:24.740
are that are left in my presentation
which is really just this

00:33:24.740 --> 00:33:24.750
which is really just this
 

00:33:24.750 --> 00:33:26.570
which is really just this
if you need to get in touch with me this

00:33:26.570 --> 00:33:26.580
if you need to get in touch with me this
 

00:33:26.580 --> 00:33:31.010
if you need to get in touch with me this
is how you do it and I hope you've

00:33:31.010 --> 00:33:31.020
is how you do it and I hope you've
 

00:33:31.020 --> 00:33:32.299
is how you do it and I hope you've
enjoyed the talk if you learned a little

00:33:32.299 --> 00:33:32.309
enjoyed the talk if you learned a little
 

00:33:32.309 --> 00:33:33.860
enjoyed the talk if you learned a little
bit I have time for some questions if

00:33:33.860 --> 00:33:33.870
bit I have time for some questions if
 

00:33:33.870 --> 00:33:36.649
bit I have time for some questions if
anyone wants to to stump me this is a

00:33:36.649 --> 00:33:36.659
anyone wants to to stump me this is a
 

00:33:36.659 --> 00:33:38.779
anyone wants to to stump me this is a
really good chance to do it because you

00:33:38.779 --> 00:33:38.789
really good chance to do it because you
 

00:33:38.789 --> 00:33:41.930
really good chance to do it because you
most likely will and but other than that

00:33:41.930 --> 00:33:41.940
most likely will and but other than that
 

00:33:41.940 --> 00:33:44.690
most likely will and but other than that
you know again it's not that scary to

00:33:44.690 --> 00:33:44.700
you know again it's not that scary to
 

00:33:44.700 --> 00:33:46.970
you know again it's not that scary to
use the nu K it is really cool to use

00:33:46.970 --> 00:33:46.980
use the nu K it is really cool to use
 

00:33:46.980 --> 00:33:48.140
use the nu K it is really cool to use
the new Android studio stuff and you

00:33:48.140 --> 00:33:48.150
the new Android studio stuff and you
 

00:33:48.150 --> 00:33:50.899
the new Android studio stuff and you
just have to become cognizant of the

00:33:50.899 --> 00:33:50.909
just have to become cognizant of the
 

00:33:50.909 --> 00:33:52.700
just have to become cognizant of the
kinds of performance problems you could

00:33:52.700 --> 00:33:52.710
kinds of performance problems you could
 

00:33:52.710 --> 00:33:54.380
kinds of performance problems you could
create with it and I hope you've got a

00:33:54.380 --> 00:33:54.390
create with it and I hope you've got a
 

00:33:54.390 --> 00:33:56.510
create with it and I hope you've got a
little bit of it from this and also once

00:33:56.510 --> 00:33:56.520
little bit of it from this and also once
 

00:33:56.520 --> 00:33:58.279
little bit of it from this and also once
again in what's wonderful about a

00:33:58.279 --> 00:33:58.289
again in what's wonderful about a
 

00:33:58.289 --> 00:33:59.930
again in what's wonderful about a
platform like Android an open-source

00:33:59.930 --> 00:33:59.940
platform like Android an open-source
 

00:33:59.940 --> 00:34:01.159
platform like Android an open-source
platform like Android is you can go and

00:34:01.159 --> 00:34:01.169
platform like Android is you can go and
 

00:34:01.169 --> 00:34:02.840
platform like Android is you can go and
explore the code you can actually

00:34:02.840 --> 00:34:02.850
explore the code you can actually
 

00:34:02.850 --> 00:34:04.970
explore the code you can actually
understand how we solve these very

00:34:04.970 --> 00:34:04.980
understand how we solve these very
 

00:34:04.980 --> 00:34:07.520
understand how we solve these very
difficult problems in many cases and you

00:34:07.520 --> 00:34:07.530
difficult problems in many cases and you
 

00:34:07.530 --> 00:34:08.720
difficult problems in many cases and you
can learn something and take something

00:34:08.720 --> 00:34:08.730
can learn something and take something
 

00:34:08.730 --> 00:34:10.250
can learn something and take something
back with your engineering career and

00:34:10.250 --> 00:34:10.260
back with your engineering career and
 

00:34:10.260 --> 00:34:12.649
back with your engineering career and
and use it again and that that to me is

00:34:12.649 --> 00:34:12.659
and use it again and that that to me is
 

00:34:12.659 --> 00:34:14.480
and use it again and that that to me is
half the fun of working in an

00:34:14.480 --> 00:34:14.490
half the fun of working in an
 

00:34:14.490 --> 00:34:16.280
half the fun of working in an
open-source project I mean wouldn't it

00:34:16.280 --> 00:34:16.290
open-source project I mean wouldn't it
 

00:34:16.290 --> 00:34:17.810
open-source project I mean wouldn't it
be awesome if everyone can simply say

00:34:17.810 --> 00:34:17.820
be awesome if everyone can simply say
 

00:34:17.820 --> 00:34:19.310
be awesome if everyone can simply say
you know here's the reason why that

00:34:19.310 --> 00:34:19.320
you know here's the reason why that
 

00:34:19.320 --> 00:34:20.839
you know here's the reason why that
doesn't perform well let's go look at

00:34:20.839 --> 00:34:20.849
doesn't perform well let's go look at
 

00:34:20.849 --> 00:34:23.000
doesn't perform well let's go look at
the source code and I think everyone

00:34:23.000 --> 00:34:23.010
the source code and I think everyone
 

00:34:23.010 --> 00:34:24.649
the source code and I think everyone
should be able to do that so I'm super

00:34:24.649 --> 00:34:24.659
should be able to do that so I'm super
 

00:34:24.659 --> 00:34:25.970
should be able to do that so I'm super
excited to be able to work on a

00:34:25.970 --> 00:34:25.980
excited to be able to work on a
 

00:34:25.980 --> 00:34:27.740
excited to be able to work on a
development project that actually does

00:34:27.740 --> 00:34:27.750
development project that actually does
 

00:34:27.750 --> 00:34:30.260
development project that actually does
have an open-source back-end so that

00:34:30.260 --> 00:34:30.270
have an open-source back-end so that
 

00:34:30.270 --> 00:34:32.000
have an open-source back-end so that
being said thank you very much for

00:34:32.000 --> 00:34:32.010
being said thank you very much for
 

00:34:32.010 --> 00:34:37.900
being said thank you very much for
coming this morning

00:34:37.900 --> 00:34:37.910
 

00:34:37.910 --> 00:34:48.440
and I will take questions now okay I do

00:34:48.440 --> 00:34:48.450
and I will take questions now okay I do
 

00:34:48.450 --> 00:34:49.490
and I will take questions now okay I do
not know

00:34:49.490 --> 00:34:49.500
not know
 

00:34:49.500 --> 00:34:51.530
not know
it's a really good question you've now

00:34:51.530 --> 00:34:51.540
it's a really good question you've now
 

00:34:51.540 --> 00:34:54.680
it's a really good question you've now
stumped me I I'm so embarrassed that's a

00:34:54.680 --> 00:34:54.690
stumped me I I'm so embarrassed that's a
 

00:34:54.690 --> 00:35:11.590
stumped me I I'm so embarrassed that's a
that's okay and yes mm-hmm

00:35:11.590 --> 00:35:11.600
 

00:35:11.600 --> 00:35:16.040
so if it is like like let's say it's a

00:35:16.040 --> 00:35:16.050
so if it is like like let's say it's a
 

00:35:16.050 --> 00:35:17.630
so if it is like like let's say it's a
you're doing like Java gets string

00:35:17.630 --> 00:35:17.640
you're doing like Java gets string
 

00:35:17.640 --> 00:35:20.330
you're doing like Java gets string
critical like that which which would

00:35:20.330 --> 00:35:20.340
critical like that which which would
 

00:35:20.340 --> 00:35:21.860
critical like that which which would
which would mark that as being in use

00:35:21.860 --> 00:35:21.870
which would mark that as being in use
 

00:35:21.870 --> 00:35:24.200
which would mark that as being in use
that will never be moved that is fixed

00:35:24.200 --> 00:35:24.210
that will never be moved that is fixed
 

00:35:24.210 --> 00:35:26.300
that will never be moved that is fixed
in memory direct byte buffers are also

00:35:26.300 --> 00:35:26.310
in memory direct byte buffers are also
 

00:35:26.310 --> 00:35:28.360
in memory direct byte buffers are also
fixed in memory that can't be moved

00:35:28.360 --> 00:35:28.370
fixed in memory that can't be moved
 

00:35:28.370 --> 00:35:31.610
fixed in memory that can't be moved
there is a little bit of a little bit of

00:35:31.610 --> 00:35:31.620
there is a little bit of a little bit of
 

00:35:31.620 --> 00:35:35.120
there is a little bit of a little bit of
weirdness around that because if you

00:35:35.120 --> 00:35:35.130
weirdness around that because if you
 

00:35:35.130 --> 00:35:37.520
weirdness around that because if you
look at the way they're allocated there

00:35:37.520 --> 00:35:37.530
look at the way they're allocated there
 

00:35:37.530 --> 00:35:38.840
look at the way they're allocated there
is there is a little bit of code that

00:35:38.840 --> 00:35:38.850
is there is a little bit of code that
 

00:35:38.850 --> 00:35:40.880
is there is a little bit of code that
checks around around moving them but

00:35:40.880 --> 00:35:40.890
checks around around moving them but
 

00:35:40.890 --> 00:35:42.500
checks around around moving them but
once you're actually accessing them you

00:35:42.500 --> 00:35:42.510
once you're actually accessing them you
 

00:35:42.510 --> 00:35:43.730
once you're actually accessing them you
know getting that direct byte buffer

00:35:43.730 --> 00:35:43.740
know getting that direct byte buffer
 

00:35:43.740 --> 00:35:46.130
know getting that direct byte buffer
address it gets no it is it is fixed in

00:35:46.130 --> 00:35:46.140
address it gets no it is it is fixed in
 

00:35:46.140 --> 00:35:48.380
address it gets no it is it is fixed in
memory so it can be moved however

00:35:48.380 --> 00:35:48.390
memory so it can be moved however
 

00:35:48.390 --> 00:35:50.660
memory so it can be moved however
outside of that call so once that once

00:35:50.660 --> 00:35:50.670
outside of that call so once that once
 

00:35:50.670 --> 00:35:52.700
outside of that call so once that once
that call goes away my understanding is

00:35:52.700 --> 00:35:52.710
that call goes away my understanding is
 

00:35:52.710 --> 00:35:55.040
that call goes away my understanding is
that is that it can be moved so again

00:35:55.040 --> 00:35:55.050
that is that it can be moved so again
 

00:35:55.050 --> 00:35:56.810
that is that it can be moved so again
it's it's protected for the lifetime of

00:35:56.810 --> 00:35:56.820
it's it's protected for the lifetime of
 

00:35:56.820 --> 00:36:01.220
it's it's protected for the lifetime of
that call I think that's a really good

00:36:01.220 --> 00:36:01.230
that call I think that's a really good
 

00:36:01.230 --> 00:36:02.540
that call I think that's a really good
question I think I think that's what I

00:36:02.540 --> 00:36:02.550
question I think I think that's what I
 

00:36:02.550 --> 00:36:05.750
question I think I think that's what I
remember and don't quote me on that one

00:36:05.750 --> 00:36:05.760
remember and don't quote me on that one
 

00:36:05.760 --> 00:36:07.040
remember and don't quote me on that one
I might be wrong it might be always

00:36:07.040 --> 00:36:07.050
I might be wrong it might be always
 

00:36:07.050 --> 00:36:09.710
I might be wrong it might be always
protected but what we looking at looking

00:36:09.710 --> 00:36:09.720
protected but what we looking at looking
 

00:36:09.720 --> 00:36:13.790
protected but what we looking at looking
at the the allocator there are actually

00:36:13.790 --> 00:36:13.800
at the the allocator there are actually
 

00:36:13.800 --> 00:36:15.590
at the the allocator there are actually
two different kinds of allocation that

00:36:15.590 --> 00:36:15.600
two different kinds of allocation that
 

00:36:15.600 --> 00:36:17.570
two different kinds of allocation that
can happen and for very very small like

00:36:17.570 --> 00:36:17.580
can happen and for very very small like
 

00:36:17.580 --> 00:36:19.640
can happen and for very very small like
less than three pages that goes into the

00:36:19.640 --> 00:36:19.650
less than three pages that goes into the
 

00:36:19.650 --> 00:36:22.640
less than three pages that goes into the
movable allocation pool and for things

00:36:22.640 --> 00:36:22.650
movable allocation pool and for things
 

00:36:22.650 --> 00:36:24.110
movable allocation pool and for things
that are larger than that at least in

00:36:24.110 --> 00:36:24.120
that are larger than that at least in
 

00:36:24.120 --> 00:36:26.000
that are larger than that at least in
the current implementation it's not

00:36:26.000 --> 00:36:26.010
the current implementation it's not
 

00:36:26.010 --> 00:36:29.780
the current implementation it's not
movable ever so so so yeah you kind of

00:36:29.780 --> 00:36:29.790
movable ever so so so yeah you kind of
 

00:36:29.790 --> 00:36:46.120
movable ever so so so yeah you kind of
yes and no yeah

00:36:46.120 --> 00:36:46.130
 

00:36:46.130 --> 00:36:47.589
it depends it depends on whether or not

00:36:47.589 --> 00:36:47.599
it depends it depends on whether or not
 

00:36:47.599 --> 00:36:49.450
it depends it depends on whether or not
you so the question is is if you if

00:36:49.450 --> 00:36:49.460
you so the question is is if you if
 

00:36:49.460 --> 00:36:51.430
you so the question is is if you if
you're using a back-end to deal with

00:36:51.430 --> 00:36:51.440
you're using a back-end to deal with
 

00:36:51.440 --> 00:36:53.710
you're using a back-end to deal with
this data are you better off and that

00:36:53.710 --> 00:36:53.720
this data are you better off and that
 

00:36:53.720 --> 00:36:55.599
this data are you better off and that
and you're talking to C++ code

00:36:55.599 --> 00:36:55.609
and you're talking to C++ code
 

00:36:55.609 --> 00:36:56.890
and you're talking to C++ code
ultimately you need to get that data in

00:36:56.890 --> 00:36:56.900
ultimately you need to get that data in
 

00:36:56.900 --> 00:36:59.499
ultimately you need to get that data in
your C++ code is it better to just use

00:36:59.499 --> 00:36:59.509
your C++ code is it better to just use
 

00:36:59.509 --> 00:37:01.390
your C++ code is it better to just use
the networking services that are built

00:37:01.390 --> 00:37:01.400
the networking services that are built
 

00:37:01.400 --> 00:37:03.249
the networking services that are built
in to the NDK or is it better to

00:37:03.249 --> 00:37:03.259
in to the NDK or is it better to
 

00:37:03.259 --> 00:37:05.650
in to the NDK or is it better to
actually use and do everything in Java

00:37:05.650 --> 00:37:05.660
actually use and do everything in Java
 

00:37:05.660 --> 00:37:07.450
actually use and do everything in Java
and for there's kind of two questions

00:37:07.450 --> 00:37:07.460
and for there's kind of two questions
 

00:37:07.460 --> 00:37:11.259
and for there's kind of two questions
that I have about this is the

00:37:11.259 --> 00:37:11.269
that I have about this is the
 

00:37:11.269 --> 00:37:13.180
that I have about this is the
performance of your networking something

00:37:13.180 --> 00:37:13.190
performance of your networking something
 

00:37:13.190 --> 00:37:14.910
performance of your networking something
you actually even care that much about

00:37:14.910 --> 00:37:14.920
you actually even care that much about
 

00:37:14.920 --> 00:37:17.620
you actually even care that much about
that's the first thing if you're on not

00:37:17.620 --> 00:37:17.630
that's the first thing if you're on not
 

00:37:17.630 --> 00:37:19.809
that's the first thing if you're on not
on the main thread and you're processing

00:37:19.809 --> 00:37:19.819
on the main thread and you're processing
 

00:37:19.819 --> 00:37:23.140
on the main thread and you're processing
some stuff in in in native code you

00:37:23.140 --> 00:37:23.150
some stuff in in in native code you
 

00:37:23.150 --> 00:37:24.519
some stuff in in in native code you
might not care that's a little bit more

00:37:24.519 --> 00:37:24.529
might not care that's a little bit more
 

00:37:24.529 --> 00:37:27.039
might not care that's a little bit more
expensive because you're not actually

00:37:27.039 --> 00:37:27.049
expensive because you're not actually
 

00:37:27.049 --> 00:37:28.359
expensive because you're not actually
affecting the frame rate of your

00:37:28.359 --> 00:37:28.369
affecting the frame rate of your
 

00:37:28.369 --> 00:37:30.700
affecting the frame rate of your
application and you might be saving an

00:37:30.700 --> 00:37:30.710
application and you might be saving an
 

00:37:30.710 --> 00:37:33.670
application and you might be saving an
enormous amount of time by actually

00:37:33.670 --> 00:37:33.680
enormous amount of time by actually
 

00:37:33.680 --> 00:37:35.470
enormous amount of time by actually
using the implementations that are in

00:37:35.470 --> 00:37:35.480
using the implementations that are in
 

00:37:35.480 --> 00:37:38.829
using the implementations that are in
Java so as a general rule you really

00:37:38.829 --> 00:37:38.839
Java so as a general rule you really
 

00:37:38.839 --> 00:37:40.029
Java so as a general rule you really
want to look to see whether or not you

00:37:40.029 --> 00:37:40.039
want to look to see whether or not you
 

00:37:40.039 --> 00:37:41.650
want to look to see whether or not you
actually care about that particular

00:37:41.650 --> 00:37:41.660
actually care about that particular
 

00:37:41.660 --> 00:37:43.329
actually care about that particular
performance loss you know I think and

00:37:43.329 --> 00:37:43.339
performance loss you know I think and
 

00:37:43.339 --> 00:37:45.400
performance loss you know I think and
then and then weigh it yes for

00:37:45.400 --> 00:37:45.410
then and then weigh it yes for
 

00:37:45.410 --> 00:37:46.690
then and then weigh it yes for
performance you're gonna do way better

00:37:46.690 --> 00:37:46.700
performance you're gonna do way better
 

00:37:46.700 --> 00:37:49.269
performance you're gonna do way better
if you parse something in you know and

00:37:49.269 --> 00:37:49.279
if you parse something in you know and
 

00:37:49.279 --> 00:37:50.620
if you parse something in you know and
completely in native code especially if

00:37:50.620 --> 00:37:50.630
completely in native code especially if
 

00:37:50.630 --> 00:37:53.470
completely in native code especially if
you're not using it in in on on the on

00:37:53.470 --> 00:37:53.480
you're not using it in in on on the on
 

00:37:53.480 --> 00:37:54.970
you're not using it in in on on the on
the Java side of things then yeah you

00:37:54.970 --> 00:37:54.980
the Java side of things then yeah you
 

00:37:54.980 --> 00:37:56.410
the Java side of things then yeah you
know that would make sense but the real

00:37:56.410 --> 00:37:56.420
know that would make sense but the real
 

00:37:56.420 --> 00:37:57.940
know that would make sense but the real
question you have to ask is what's the

00:37:57.940 --> 00:37:57.950
question you have to ask is what's the
 

00:37:57.950 --> 00:37:59.740
question you have to ask is what's the
cost of that you know what's the cost in

00:37:59.740 --> 00:37:59.750
cost of that you know what's the cost in
 

00:37:59.750 --> 00:38:01.539
cost of that you know what's the cost in
terms of opportunity how much more time

00:38:01.539 --> 00:38:01.549
terms of opportunity how much more time
 

00:38:01.549 --> 00:38:03.279
terms of opportunity how much more time
is it gonna take me is it really

00:38:03.279 --> 00:38:03.289
is it gonna take me is it really
 

00:38:03.289 --> 00:38:04.839
is it gonna take me is it really
worthwhile and that's with all of these

00:38:04.839 --> 00:38:04.849
worthwhile and that's with all of these
 

00:38:04.849 --> 00:38:06.609
worthwhile and that's with all of these
things you know that's that's what I say

00:38:06.609 --> 00:38:06.619
things you know that's that's what I say
 

00:38:06.619 --> 00:38:08.920
things you know that's that's what I say
if it's an easy optimization like let's

00:38:08.920 --> 00:38:08.930
if it's an easy optimization like let's
 

00:38:08.930 --> 00:38:10.569
if it's an easy optimization like let's
throw a couple parameters into a J and I

00:38:10.569 --> 00:38:10.579
throw a couple parameters into a J and I
 

00:38:10.579 --> 00:38:12.249
throw a couple parameters into a J and I
call by all means do it don't don't

00:38:12.249 --> 00:38:12.259
call by all means do it don't don't
 

00:38:12.259 --> 00:38:14.019
call by all means do it don't don't
waste more time don't waste more battery

00:38:14.019 --> 00:38:14.029
waste more time don't waste more battery
 

00:38:14.029 --> 00:38:16.450
waste more time don't waste more battery
but but if it's gonna mean rewriting an

00:38:16.450 --> 00:38:16.460
but but if it's gonna mean rewriting an
 

00:38:16.460 --> 00:38:18.490
but but if it's gonna mean rewriting an
entire library then we really look

00:38:18.490 --> 00:38:18.500
entire library then we really look
 

00:38:18.500 --> 00:38:20.019
entire library then we really look
closely at it and say you know how much

00:38:20.019 --> 00:38:20.029
closely at it and say you know how much
 

00:38:20.029 --> 00:38:37.210
closely at it and say you know how much
am I really gaining out of this

00:38:37.210 --> 00:38:37.220
 

00:38:37.220 --> 00:38:40.190
so okay so the question is about j'ni

00:38:40.190 --> 00:38:40.200
so okay so the question is about j'ni
 

00:38:40.200 --> 00:38:42.380
so okay so the question is about j'ni
versus using renderscript you know when

00:38:42.380 --> 00:38:42.390
versus using renderscript you know when
 

00:38:42.390 --> 00:38:43.850
versus using renderscript you know when
does it make sense so what's really cool

00:38:43.850 --> 00:38:43.860
does it make sense so what's really cool
 

00:38:43.860 --> 00:38:46.070
does it make sense so what's really cool
about renderscript first of all is that

00:38:46.070 --> 00:38:46.080
about renderscript first of all is that
 

00:38:46.080 --> 00:38:49.100
about renderscript first of all is that
render script is actually LLVM byte code

00:38:49.100 --> 00:38:49.110
render script is actually LLVM byte code
 

00:38:49.110 --> 00:38:50.690
render script is actually LLVM byte code
that gets compiled on the device and

00:38:50.690 --> 00:38:50.700
that gets compiled on the device and
 

00:38:50.700 --> 00:38:52.880
that gets compiled on the device and
there's some beautiful things you get

00:38:52.880 --> 00:38:52.890
there's some beautiful things you get
 

00:38:52.890 --> 00:38:55.120
there's some beautiful things you get
from that one is that it can be actually

00:38:55.120 --> 00:38:55.130
from that one is that it can be actually
 

00:38:55.130 --> 00:38:59.210
from that one is that it can be actually
optimized for that particular CPU that's

00:38:59.210 --> 00:38:59.220
optimized for that particular CPU that's
 

00:38:59.220 --> 00:39:00.590
optimized for that particular CPU that's
running on the device to some degree

00:39:00.590 --> 00:39:00.600
running on the device to some degree
 

00:39:00.600 --> 00:39:02.150
running on the device to some degree
there are certain kinds of optimizations

00:39:02.150 --> 00:39:02.160
there are certain kinds of optimizations
 

00:39:02.160 --> 00:39:03.830
there are certain kinds of optimizations
you can't do from LLVM but there's a

00:39:03.830 --> 00:39:03.840
you can't do from LLVM but there's a
 

00:39:03.840 --> 00:39:05.450
you can't do from LLVM but there's a
whole bunch that you can there's there's

00:39:05.450 --> 00:39:05.460
whole bunch that you can there's there's
 

00:39:05.460 --> 00:39:07.160
whole bunch that you can there's there's
intrinsic that you can actually swap in

00:39:07.160 --> 00:39:07.170
intrinsic that you can actually swap in
 

00:39:07.170 --> 00:39:09.020
intrinsic that you can actually swap in
and out there's there's like people

00:39:09.020 --> 00:39:09.030
and out there's there's like people
 

00:39:09.030 --> 00:39:10.850
and out there's there's like people
often do optimizations that are specific

00:39:10.850 --> 00:39:10.860
often do optimizations that are specific
 

00:39:10.860 --> 00:39:13.790
often do optimizations that are specific
to actually how that particular device

00:39:13.790 --> 00:39:13.800
to actually how that particular device
 

00:39:13.800 --> 00:39:16.220
to actually how that particular device
works so that's one of the one of the

00:39:16.220 --> 00:39:16.230
works so that's one of the one of the
 

00:39:16.230 --> 00:39:18.440
works so that's one of the one of the
secrets of renderscript is that it

00:39:18.440 --> 00:39:18.450
secrets of renderscript is that it
 

00:39:18.450 --> 00:39:21.290
secrets of renderscript is that it
actually can generate better code than

00:39:21.290 --> 00:39:21.300
actually can generate better code than
 

00:39:21.300 --> 00:39:23.840
actually can generate better code than
the compiler can in some cases second

00:39:23.840 --> 00:39:23.850
the compiler can in some cases second
 

00:39:23.850 --> 00:39:25.250
the compiler can in some cases second
thing is it's also running in a kernel

00:39:25.250 --> 00:39:25.260
thing is it's also running in a kernel
 

00:39:25.260 --> 00:39:26.660
thing is it's also running in a kernel
it's actually running in its own little

00:39:26.660 --> 00:39:26.670
it's actually running in its own little
 

00:39:26.670 --> 00:39:29.030
it's actually running in its own little
tiny machine that has used to run

00:39:29.030 --> 00:39:29.040
tiny machine that has used to run
 

00:39:29.040 --> 00:39:31.820
tiny machine that has used to run
massively parallel stuff and it's really

00:39:31.820 --> 00:39:31.830
massively parallel stuff and it's really
 

00:39:31.830 --> 00:39:34.430
massively parallel stuff and it's really
set up to do that very very well so if

00:39:34.430 --> 00:39:34.440
set up to do that very very well so if
 

00:39:34.440 --> 00:39:37.780
set up to do that very very well so if
your problem space falls into

00:39:37.780 --> 00:39:37.790
your problem space falls into
 

00:39:37.790 --> 00:39:40.310
your problem space falls into
renderscript you know something that

00:39:40.310 --> 00:39:40.320
renderscript you know something that
 

00:39:40.320 --> 00:39:42.850
renderscript you know something that
that's really health paralyzation and

00:39:42.850 --> 00:39:42.860
that's really health paralyzation and
 

00:39:42.860 --> 00:39:47.750
that's really health paralyzation and
something that is and something that's

00:39:47.750 --> 00:39:47.760
something that is and something that's
 

00:39:47.760 --> 00:39:49.430
something that is and something that's
also helped by using these intrinsics

00:39:49.430 --> 00:39:49.440
also helped by using these intrinsics
 

00:39:49.440 --> 00:39:51.440
also helped by using these intrinsics
that you get from the LLVM byte code

00:39:51.440 --> 00:39:51.450
that you get from the LLVM byte code
 

00:39:51.450 --> 00:39:54.350
that you get from the LLVM byte code
then by all means use it you know but as

00:39:54.350 --> 00:39:54.360
then by all means use it you know but as
 

00:39:54.360 --> 00:39:56.990
then by all means use it you know but as
a general rule I would say that again

00:39:56.990 --> 00:39:57.000
a general rule I would say that again
 

00:39:57.000 --> 00:39:58.700
a general rule I would say that again
you're looking at opportunity time and

00:39:58.700 --> 00:39:58.710
you're looking at opportunity time and
 

00:39:58.710 --> 00:39:59.810
you're looking at opportunity time and
cost you know if you're if you're not

00:39:59.810 --> 00:39:59.820
cost you know if you're if you're not
 

00:39:59.820 --> 00:40:01.520
cost you know if you're if you're not
seeing that it's a performance issue

00:40:01.520 --> 00:40:01.530
seeing that it's a performance issue
 

00:40:01.530 --> 00:40:03.590
seeing that it's a performance issue
that's impacting you it may not make

00:40:03.590 --> 00:40:03.600
that's impacting you it may not make
 

00:40:03.600 --> 00:40:05.600
that's impacting you it may not make
sense to to go through that the mean

00:40:05.600 --> 00:40:05.610
sense to to go through that the mean
 

00:40:05.610 --> 00:40:09.020
sense to to go through that the mean
part of the reason we have j'ni is to be

00:40:09.020 --> 00:40:09.030
part of the reason we have j'ni is to be
 

00:40:09.030 --> 00:40:12.500
part of the reason we have j'ni is to be
able to reuse all this crazy amount of C

00:40:12.500 --> 00:40:12.510
able to reuse all this crazy amount of C
 

00:40:12.510 --> 00:40:15.170
able to reuse all this crazy amount of C
and C++ code that's out there and so for

00:40:15.170 --> 00:40:15.180
and C++ code that's out there and so for
 

00:40:15.180 --> 00:40:16.880
and C++ code that's out there and so for
me it's like you have to always have to

00:40:16.880 --> 00:40:16.890
me it's like you have to always have to
 

00:40:16.890 --> 00:40:18.200
me it's like you have to always have to
balance these things but from a true

00:40:18.200 --> 00:40:18.210
balance these things but from a true
 

00:40:18.210 --> 00:40:20.060
balance these things but from a true
performance standpoint it is very

00:40:20.060 --> 00:40:20.070
performance standpoint it is very
 

00:40:20.070 --> 00:40:21.710
performance standpoint it is very
possible that renderscript will be the

00:40:21.710 --> 00:40:21.720
possible that renderscript will be the
 

00:40:21.720 --> 00:40:23.840
possible that renderscript will be the
highest performing way to do certain

00:40:23.840 --> 00:40:23.850
highest performing way to do certain
 

00:40:23.850 --> 00:40:26.930
highest performing way to do certain
kinds of operations because it can just

00:40:26.930 --> 00:40:26.940
kinds of operations because it can just
 

00:40:26.940 --> 00:40:28.340
kinds of operations because it can just
do a whole bunch of things that the

00:40:28.340 --> 00:40:28.350
do a whole bunch of things that the
 

00:40:28.350 --> 00:40:30.350
do a whole bunch of things that the
compiler can't do because it just

00:40:30.350 --> 00:40:30.360
compiler can't do because it just
 

00:40:30.360 --> 00:40:31.430
compiler can't do because it just
doesn't know enough about the system

00:40:31.430 --> 00:40:31.440
doesn't know enough about the system
 

00:40:31.440 --> 00:40:32.750
doesn't know enough about the system
architecture and then it really depends

00:40:32.750 --> 00:40:32.760
architecture and then it really depends
 

00:40:32.760 --> 00:40:34.940
architecture and then it really depends
on how well the individual OEMs have

00:40:34.940 --> 00:40:34.950
on how well the individual OEMs have
 

00:40:34.950 --> 00:40:37.070
on how well the individual OEMs have
actually managed to or chip providers

00:40:37.070 --> 00:40:37.080
actually managed to or chip providers
 

00:40:37.080 --> 00:40:38.480
actually managed to or chip providers
actually managed to optimize the

00:40:38.480 --> 00:40:38.490
actually managed to optimize the
 

00:40:38.490 --> 00:40:39.680
actually managed to optimize the
renderscript compiler on their

00:40:39.680 --> 00:40:39.690
renderscript compiler on their
 

00:40:39.690 --> 00:40:41.840
renderscript compiler on their
particular on their particular chipsets

00:40:41.840 --> 00:40:41.850
particular on their particular chipsets
 

00:40:41.850 --> 00:40:43.430
particular on their particular chipsets
so there's there's a lot of variables

00:40:43.430 --> 00:40:43.440
so there's there's a lot of variables
 

00:40:43.440 --> 00:40:44.840
so there's there's a lot of variables
here I wish there was a cut and dry

00:40:44.840 --> 00:40:44.850
here I wish there was a cut and dry
 

00:40:44.850 --> 00:40:46.670
here I wish there was a cut and dry
answer but what's great about

00:40:46.670 --> 00:40:46.680
answer but what's great about
 

00:40:46.680 --> 00:40:48.530
answer but what's great about
renderscript a really cool reason thing

00:40:48.530 --> 00:40:48.540
renderscript a really cool reason thing
 

00:40:48.540 --> 00:40:49.790
renderscript a really cool reason thing
you might want to use it anyway it's

00:40:49.790 --> 00:40:49.800
you might want to use it anyway it's
 

00:40:49.800 --> 00:40:51.050
you might want to use it anyway it's
even despite all of that

00:40:51.050 --> 00:40:51.060
even despite all of that
 

00:40:51.060 --> 00:40:52.760
even despite all of that
is because as I said the LOV and bite

00:40:52.760 --> 00:40:52.770
is because as I said the LOV and bite
 

00:40:52.770 --> 00:40:54.290
is because as I said the LOV and bite
code gets compiled on the individual

00:40:54.290 --> 00:40:54.300
code gets compiled on the individual
 

00:40:54.300 --> 00:40:56.060
code gets compiled on the individual
system so you only have to ship one copy

00:40:56.060 --> 00:40:56.070
system so you only have to ship one copy
 

00:40:56.070 --> 00:40:57.920
system so you only have to ship one copy
of the byte code you don't have to you

00:40:57.920 --> 00:40:57.930
of the byte code you don't have to you
 

00:40:57.930 --> 00:40:59.120
of the byte code you don't have to you
don't have to use a dependency on the

00:40:59.120 --> 00:40:59.130
don't have to use a dependency on the
 

00:40:59.130 --> 00:41:01.370
don't have to use a dependency on the
NDK you don't have to worry about about

00:41:01.370 --> 00:41:01.380
NDK you don't have to worry about about
 

00:41:01.380 --> 00:41:03.080
NDK you don't have to worry about about
about it bloating the size of your bill

00:41:03.080 --> 00:41:03.090
about it bloating the size of your bill
 

00:41:03.090 --> 00:41:03.920
about it bloating the size of your bill
with a whole bunch of different

00:41:03.920 --> 00:41:03.930
with a whole bunch of different
 

00:41:03.930 --> 00:41:06.500
with a whole bunch of different
executables and that by itself might be

00:41:06.500 --> 00:41:06.510
executables and that by itself might be
 

00:41:06.510 --> 00:41:08.030
executables and that by itself might be
worth investigating renderscript

00:41:08.030 --> 00:41:08.040
worth investigating renderscript
 

00:41:08.040 --> 00:41:11.630
worth investigating renderscript
just for that one reason now with 64-bit

00:41:11.630 --> 00:41:11.640
just for that one reason now with 64-bit
 

00:41:11.640 --> 00:41:13.580
just for that one reason now with 64-bit
I believe you actually do need to ship

00:41:13.580 --> 00:41:13.590
I believe you actually do need to ship
 

00:41:13.590 --> 00:41:16.130
I believe you actually do need to ship
64-bit byte code so it's not completely

00:41:16.130 --> 00:41:16.140
64-bit byte code so it's not completely
 

00:41:16.140 --> 00:41:19.010
64-bit byte code so it's not completely
transparent to Architecture I think I

00:41:19.010 --> 00:41:19.020
transparent to Architecture I think I
 

00:41:19.020 --> 00:41:20.690
transparent to Architecture I think I
haven't actually tried this that's I

00:41:20.690 --> 00:41:20.700
haven't actually tried this that's I
 

00:41:20.700 --> 00:41:24.100
haven't actually tried this that's I
vaguely remember reading that somewhere

00:41:24.100 --> 00:41:24.110
vaguely remember reading that somewhere
 

00:41:24.110 --> 00:41:33.839
vaguely remember reading that somewhere
sure

00:41:33.839 --> 00:41:33.849
 

00:41:33.849 --> 00:41:36.309
so we've you make malloc if you do

00:41:36.309 --> 00:41:36.319
so we've you make malloc if you do
 

00:41:36.319 --> 00:41:38.230
so we've you make malloc if you do
Malick's and freeze its separate it's

00:41:38.230 --> 00:41:38.240
Malick's and freeze its separate it's
 

00:41:38.240 --> 00:41:39.460
Malick's and freeze its separate it's
actually using a different allocator

00:41:39.460 --> 00:41:39.470
actually using a different allocator
 

00:41:39.470 --> 00:41:41.680
actually using a different allocator
it's using je malloc when you and when

00:41:41.680 --> 00:41:41.690
it's using je malloc when you and when
 

00:41:41.690 --> 00:41:43.809
it's using je malloc when you and when
you're doing stuff from the NDK and

00:41:43.809 --> 00:41:43.819
you're doing stuff from the NDK and
 

00:41:43.819 --> 00:41:46.989
you're doing stuff from the NDK and
you're using roz Alec when you're in the

00:41:46.989 --> 00:41:46.999
you're using roz Alec when you're in the
 

00:41:46.999 --> 00:41:48.430
you're using roz Alec when you're in the
the virtual machine and that and the

00:41:48.430 --> 00:41:48.440
the virtual machine and that and the
 

00:41:48.440 --> 00:41:50.230
the virtual machine and that and the
reason is it and if you went to the talk

00:41:50.230 --> 00:41:50.240
reason is it and if you went to the talk
 

00:41:50.240 --> 00:41:50.859
reason is it and if you went to the talk
yesterday

00:41:50.859 --> 00:41:50.869
yesterday
 

00:41:50.869 --> 00:41:52.900
yesterday
ra's Alec is really really good at

00:41:52.900 --> 00:41:52.910
ra's Alec is really really good at
 

00:41:52.910 --> 00:41:54.460
ra's Alec is really really good at
garbage collecting in the background and

00:41:54.460 --> 00:41:54.470
garbage collecting in the background and
 

00:41:54.470 --> 00:41:56.859
garbage collecting in the background and
and and we're trying to avoid heap

00:41:56.859 --> 00:41:56.869
and and we're trying to avoid heap
 

00:41:56.869 --> 00:42:00.130
and and we're trying to avoid heap
fragmentation bye bye bye bucketing all

00:42:00.130 --> 00:42:00.140
fragmentation bye bye bye bucketing all
 

00:42:00.140 --> 00:42:02.950
fragmentation bye bye bye bucketing all
of our memory allocations je malik does

00:42:02.950 --> 00:42:02.960
of our memory allocations je malik does
 

00:42:02.960 --> 00:42:05.109
of our memory allocations je malik does
not trying to have everything cleaned up

00:42:05.109 --> 00:42:05.119
not trying to have everything cleaned up
 

00:42:05.119 --> 00:42:06.279
not trying to have everything cleaned up
in the background it doesn't have to be

00:42:06.279 --> 00:42:06.289
in the background it doesn't have to be
 

00:42:06.289 --> 00:42:08.829
in the background it doesn't have to be
as parallelized so it gets a slightly

00:42:08.829 --> 00:42:08.839
as parallelized so it gets a slightly
 

00:42:08.839 --> 00:42:12.130
as parallelized so it gets a slightly
faster allocator than then Roz Alec when

00:42:12.130 --> 00:42:12.140
faster allocator than then Roz Alec when
 

00:42:12.140 --> 00:42:14.620
faster allocator than then Roz Alec when
you're in native so so yeah they don't

00:42:14.620 --> 00:42:14.630
you're in native so so yeah they don't
 

00:42:14.630 --> 00:42:16.390
you're in native so so yeah they don't
they don't share space it's been a long

00:42:16.390 --> 00:42:16.400
they don't share space it's been a long
 

00:42:16.400 --> 00:42:18.400
they don't share space it's been a long
time a thing in Android that if you

00:42:18.400 --> 00:42:18.410
time a thing in Android that if you
 

00:42:18.410 --> 00:42:20.049
time a thing in Android that if you
desperately desperately need to run

00:42:20.049 --> 00:42:20.059
desperately desperately need to run
 

00:42:20.059 --> 00:42:21.730
desperately desperately need to run
something that couldn't run inside of

00:42:21.730 --> 00:42:21.740
something that couldn't run inside of
 

00:42:21.740 --> 00:42:24.130
something that couldn't run inside of
the heap space that we give you in the

00:42:24.130 --> 00:42:24.140
the heap space that we give you in the
 

00:42:24.140 --> 00:42:25.450
the heap space that we give you in the
run time you could always leave it at

00:42:25.450 --> 00:42:25.460
run time you could always leave it at
 

00:42:25.460 --> 00:42:27.009
run time you could always leave it at
native code there's other ways to do

00:42:27.009 --> 00:42:27.019
native code there's other ways to do
 

00:42:27.019 --> 00:42:28.779
native code there's other ways to do
that too you can run multiple VMs like

00:42:28.779 --> 00:42:28.789
that too you can run multiple VMs like
 

00:42:28.789 --> 00:42:30.579
that too you can run multiple VMs like
having it different by by launching a

00:42:30.579 --> 00:42:30.589
having it different by by launching a
 

00:42:30.589 --> 00:42:32.019
having it different by by launching a
different each activity into a different

00:42:32.019 --> 00:42:32.029
different each activity into a different
 

00:42:32.029 --> 00:42:33.519
different each activity into a different
process there's all sorts of ways of

00:42:33.519 --> 00:42:33.529
process there's all sorts of ways of
 

00:42:33.529 --> 00:42:36.940
process there's all sorts of ways of
getting around this but you've been

00:42:36.940 --> 00:42:36.950
getting around this but you've been
 

00:42:36.950 --> 00:42:40.150
getting around this but you've been
using ash mem as a last-ditch resort of

00:42:40.150 --> 00:42:40.160
using ash mem as a last-ditch resort of
 

00:42:40.160 --> 00:42:41.710
using ash mem as a last-ditch resort of
you actually are completely out of all

00:42:41.710 --> 00:42:41.720
you actually are completely out of all
 

00:42:41.720 --> 00:42:43.089
you actually are completely out of all
the memory we allow you to do that but

00:42:43.089 --> 00:42:43.099
the memory we allow you to do that but
 

00:42:43.099 --> 00:42:44.589
the memory we allow you to do that but
but realistically yes they're there

00:42:44.589 --> 00:42:44.599
but realistically yes they're there
 

00:42:44.599 --> 00:42:57.170
but realistically yes they're there
they're entirely separate heaps and yes

00:42:57.170 --> 00:42:57.180
 

00:42:57.180 --> 00:42:59.089
oh it's not that complicated it's just

00:42:59.089 --> 00:42:59.099
oh it's not that complicated it's just
 

00:42:59.099 --> 00:43:00.440
oh it's not that complicated it's just
that if you want it's just that we've

00:43:00.440 --> 00:43:00.450
that if you want it's just that we've
 

00:43:00.450 --> 00:43:02.420
that if you want it's just that we've
changed so the reason I say it on

00:43:02.420 --> 00:43:02.430
changed so the reason I say it on
 

00:43:02.430 --> 00:43:04.339
changed so the reason I say it on
placated was probably not the right term

00:43:04.339 --> 00:43:04.349
placated was probably not the right term
 

00:43:04.349 --> 00:43:06.920
placated was probably not the right term
to use there it's actually it's mostly

00:43:06.920 --> 00:43:06.930
to use there it's actually it's mostly
 

00:43:06.930 --> 00:43:08.690
to use there it's actually it's mostly
that we've changed the structure of the

00:43:08.690 --> 00:43:08.700
that we've changed the structure of the
 

00:43:08.700 --> 00:43:11.599
that we've changed the structure of the
way the the Gradle files look so if you

00:43:11.599 --> 00:43:11.609
way the the Gradle files look so if you
 

00:43:11.609 --> 00:43:12.650
way the the Gradle files look so if you
actually look at what we've done we've

00:43:12.650 --> 00:43:12.660
actually look at what we've done we've
 

00:43:12.660 --> 00:43:14.870
actually look at what we've done we've
we've added this the concept of model

00:43:14.870 --> 00:43:14.880
we've added this the concept of model
 

00:43:14.880 --> 00:43:16.250
we've added this the concept of model
into the experimental version of Gradle

00:43:16.250 --> 00:43:16.260
into the experimental version of Gradle
 

00:43:16.260 --> 00:43:19.190
into the experimental version of Gradle
oh sorry you can't see let me let me

00:43:19.190 --> 00:43:19.200
oh sorry you can't see let me let me
 

00:43:19.200 --> 00:43:21.670
oh sorry you can't see let me let me
mirror it let me mirrored the display I

00:43:21.670 --> 00:43:21.680
mirror it let me mirrored the display I
 

00:43:21.680 --> 00:43:24.380
mirror it let me mirrored the display I
just did like the dumb Californian thing

00:43:24.380 --> 00:43:24.390
just did like the dumb Californian thing
 

00:43:24.390 --> 00:43:29.539
just did like the dumb Californian thing
here all right so yeah now you can see

00:43:29.539 --> 00:43:29.549
here all right so yeah now you can see
 

00:43:29.549 --> 00:43:31.370
here all right so yeah now you can see
what I'm seeing so if you taking a look

00:43:31.370 --> 00:43:31.380
what I'm seeing so if you taking a look
 

00:43:31.380 --> 00:43:34.730
what I'm seeing so if you taking a look
at at the peeled Gradle file here you'll

00:43:34.730 --> 00:43:34.740
at at the peeled Gradle file here you'll
 

00:43:34.740 --> 00:43:36.140
at at the peeled Gradle file here you'll
notice that we've added this concept of

00:43:36.140 --> 00:43:36.150
notice that we've added this concept of
 

00:43:36.150 --> 00:43:39.319
notice that we've added this concept of
model so now Android is not at the top

00:43:39.319 --> 00:43:39.329
model so now Android is not at the top
 

00:43:39.329 --> 00:43:41.390
model so now Android is not at the top
model is at the top so basically you

00:43:41.390 --> 00:43:41.400
model is at the top so basically you
 

00:43:41.400 --> 00:43:43.430
model is at the top so basically you
need to go through and restructure your

00:43:43.430 --> 00:43:43.440
need to go through and restructure your
 

00:43:43.440 --> 00:43:45.109
need to go through and restructure your
Gradle build a little bit in order to

00:43:45.109 --> 00:43:45.119
Gradle build a little bit in order to
 

00:43:45.119 --> 00:43:47.059
Gradle build a little bit in order to
take advantage of this there's there's

00:43:47.059 --> 00:43:47.069
take advantage of this there's there's
 

00:43:47.069 --> 00:43:48.890
take advantage of this there's there's
there are some pretty good stuff things

00:43:48.890 --> 00:43:48.900
there are some pretty good stuff things
 

00:43:48.900 --> 00:43:51.140
there are some pretty good stuff things
online um you also see like all the kind

00:43:51.140 --> 00:43:51.150
online um you also see like all the kind
 

00:43:51.150 --> 00:43:52.789
online um you also see like all the kind
of standard things you'd expect to see

00:43:52.789 --> 00:43:52.799
of standard things you'd expect to see
 

00:43:52.799 --> 00:43:55.579
of standard things you'd expect to see
in the old NDK build is there you can

00:43:55.579 --> 00:43:55.589
in the old NDK build is there you can
 

00:43:55.589 --> 00:44:02.180
in the old NDK build is there you can
actually add libraries here and and also

00:44:02.180 --> 00:44:02.190
actually add libraries here and and also
 

00:44:02.190 --> 00:44:04.640
actually add libraries here and and also
turn on you know sorry you live bro

00:44:04.640 --> 00:44:04.650
turn on you know sorry you live bro
 

00:44:04.650 --> 00:44:05.990
turn on you know sorry you live bro
static libraries as well as dynamic

00:44:05.990 --> 00:44:06.000
static libraries as well as dynamic
 

00:44:06.000 --> 00:44:08.690
static libraries as well as dynamic
libraries here so you know pretty basic

00:44:08.690 --> 00:44:08.700
libraries here so you know pretty basic
 

00:44:08.700 --> 00:44:10.220
libraries here so you know pretty basic
stuff you can see I'm not using any of

00:44:10.220 --> 00:44:10.230
stuff you can see I'm not using any of
 

00:44:10.230 --> 00:44:12.019
stuff you can see I'm not using any of
this and in that this is also how you'd

00:44:12.019 --> 00:44:12.029
this and in that this is also how you'd
 

00:44:12.029 --> 00:44:13.579
this and in that this is also how you'd
build different product flavors so he's

00:44:13.579 --> 00:44:13.589
build different product flavors so he's
 

00:44:13.589 --> 00:44:17.180
build different product flavors so he's
saying building I'm building x86 arm

00:44:17.180 --> 00:44:17.190
saying building I'm building x86 arm
 

00:44:17.190 --> 00:44:19.460
saying building I'm building x86 arm
seven and our mate actually I'm building

00:44:19.460 --> 00:44:19.470
seven and our mate actually I'm building
 

00:44:19.470 --> 00:44:21.200
seven and our mate actually I'm building
all because I have all of these here

00:44:21.200 --> 00:44:21.210
all because I have all of these here
 

00:44:21.210 --> 00:44:22.039
all because I have all of these here
that's hilarious

00:44:22.039 --> 00:44:22.049
that's hilarious
 

00:44:22.049 --> 00:44:25.370
that's hilarious
but any case this is how you would do

00:44:25.370 --> 00:44:25.380
but any case this is how you would do
 

00:44:25.380 --> 00:44:29.599
but any case this is how you would do
product flavors but and and dependencies

00:44:29.599 --> 00:44:29.609
product flavors but and and dependencies
 

00:44:29.609 --> 00:44:31.039
product flavors but and and dependencies
again just like just like normal

00:44:31.039 --> 00:44:31.049
again just like just like normal
 

00:44:31.049 --> 00:44:32.690
again just like just like normal
normal Gradle stuff so it's a little

00:44:32.690 --> 00:44:32.700
normal Gradle stuff so it's a little
 

00:44:32.700 --> 00:44:35.599
normal Gradle stuff so it's a little
different in structure and but it's

00:44:35.599 --> 00:44:35.609
different in structure and but it's
 

00:44:35.609 --> 00:44:36.980
different in structure and but it's
really not hard to set up once you've

00:44:36.980 --> 00:44:36.990
really not hard to set up once you've
 

00:44:36.990 --> 00:44:38.569
really not hard to set up once you've
actually set it up you want I can even

00:44:38.569 --> 00:44:38.579
actually set it up you want I can even
 

00:44:38.579 --> 00:44:40.539
actually set it up you want I can even
show you debugging it's really cool I

00:44:40.539 --> 00:44:40.549
show you debugging it's really cool I
 

00:44:40.549 --> 00:44:43.190
show you debugging it's really cool I
think actually I mean I feel the shoot

00:44:43.190 --> 00:44:43.200
think actually I mean I feel the shoot
 

00:44:43.200 --> 00:44:44.120
think actually I mean I feel the shoot
debugging is I think we're out we're

00:44:44.120 --> 00:44:44.130
debugging is I think we're out we're
 

00:44:44.130 --> 00:44:46.069
debugging is I think we're out we're
basically out of time but if you want

00:44:46.069 --> 00:44:46.079
basically out of time but if you want
 

00:44:46.079 --> 00:44:47.569
basically out of time but if you want
I'll show you those you know anyone

00:44:47.569 --> 00:44:47.579
I'll show you those you know anyone
 

00:44:47.579 --> 00:44:48.950
I'll show you those you know anyone
wants to come to a table out there I can

00:44:48.950 --> 00:44:48.960
wants to come to a table out there I can
 

00:44:48.960 --> 00:44:58.560
wants to come to a table out there I can
show you how the debugger works

00:44:58.560 --> 00:44:58.570
 

00:44:58.570 --> 00:45:02.030
so if two options

00:45:02.030 --> 00:45:02.040
so if two options
 

00:45:02.040 --> 00:45:04.190
so if two options
we can google play you can either upload

00:45:04.190 --> 00:45:04.200
we can google play you can either upload
 

00:45:04.200 --> 00:45:07.280
we can google play you can either upload
each each individual variant as a

00:45:07.280 --> 00:45:07.290
each each individual variant as a
 

00:45:07.290 --> 00:45:11.060
each each individual variant as a
separate multi apk chunk basically those

00:45:11.060 --> 00:45:11.070
separate multi apk chunk basically those
 

00:45:11.070 --> 00:45:12.740
separate multi apk chunk basically those
are all separated by version codes or

00:45:12.740 --> 00:45:12.750
are all separated by version codes or
 

00:45:12.750 --> 00:45:14.540
are all separated by version codes or
your other option is you can put them

00:45:14.540 --> 00:45:14.550
your other option is you can put them
 

00:45:14.550 --> 00:45:18.230
your other option is you can put them
all into one all into one apk and you

00:45:18.230 --> 00:45:18.240
all into one all into one apk and you
 

00:45:18.240 --> 00:45:21.260
all into one all into one apk and you
can and it will do the right thing when

00:45:21.260 --> 00:45:21.270
can and it will do the right thing when
 

00:45:21.270 --> 00:45:22.900
can and it will do the right thing when
in that when it actually launches the

00:45:22.900 --> 00:45:22.910
in that when it actually launches the
 

00:45:22.910 --> 00:45:24.740
in that when it actually launches the
applications you've got you've got two

00:45:24.740 --> 00:45:24.750
applications you've got you've got two
 

00:45:24.750 --> 00:45:26.090
applications you've got you've got two
two options it really depends how much

00:45:26.090 --> 00:45:26.100
two options it really depends how much
 

00:45:26.100 --> 00:45:27.500
two options it really depends how much
the native code you have and what

00:45:27.500 --> 00:45:27.510
the native code you have and what
 

00:45:27.510 --> 00:45:29.270
the native code you have and what
percentage of your apk size it is for

00:45:29.270 --> 00:45:29.280
percentage of your apk size it is for
 

00:45:29.280 --> 00:45:31.400
percentage of your apk size it is for
some people even having six flavors of

00:45:31.400 --> 00:45:31.410
some people even having six flavors of
 

00:45:31.410 --> 00:45:34.130
some people even having six flavors of
their NDK libraries will only be a

00:45:34.130 --> 00:45:34.140
their NDK libraries will only be a
 

00:45:34.140 --> 00:45:36.230
their NDK libraries will only be a
negligible amount of their space for

00:45:36.230 --> 00:45:36.240
negligible amount of their space for
 

00:45:36.240 --> 00:45:37.010
negligible amount of their space for
others let's say you're running

00:45:37.010 --> 00:45:37.020
others let's say you're running
 

00:45:37.020 --> 00:45:38.990
others let's say you're running
something really big and heavy like like

00:45:38.990 --> 00:45:39.000
something really big and heavy like like
 

00:45:39.000 --> 00:45:40.790
something really big and heavy like like
unity you know it has its own runtime

00:45:40.790 --> 00:45:40.800
unity you know it has its own runtime
 

00:45:40.800 --> 00:45:42.260
unity you know it has its own runtime
and all sorts of stuff you're you're

00:45:42.260 --> 00:45:42.270
and all sorts of stuff you're you're
 

00:45:42.270 --> 00:45:43.850
and all sorts of stuff you're you're
definitely going to have to seriously

00:45:43.850 --> 00:45:43.860
definitely going to have to seriously
 

00:45:43.860 --> 00:45:46.490
definitely going to have to seriously
consider or distribute on Play so multi

00:45:46.490 --> 00:45:46.500
consider or distribute on Play so multi
 

00:45:46.500 --> 00:45:48.080
consider or distribute on Play so multi
apk is really the way to go if you want

00:45:48.080 --> 00:45:48.090
apk is really the way to go if you want
 

00:45:48.090 --> 00:45:51.710
apk is really the way to go if you want
lots of different versions and a native

00:45:51.710 --> 00:45:51.720
lots of different versions and a native
 

00:45:51.720 --> 00:45:54.320
lots of different versions and a native
machine like that and I highly recommend

00:45:54.320 --> 00:45:54.330
machine like that and I highly recommend
 

00:45:54.330 --> 00:45:58.710
machine like that and I highly recommend
doing it

00:45:58.710 --> 00:45:58.720
 

00:45:58.720 --> 00:46:01.380
you use very translator to actually the

00:46:01.380 --> 00:46:01.390
you use very translator to actually the
 

00:46:01.390 --> 00:46:03.630
you use very translator to actually the
arm code it's pretty fast but it's not

00:46:03.630 --> 00:46:03.640
arm code it's pretty fast but it's not
 

00:46:03.640 --> 00:46:06.089
arm code it's pretty fast but it's not
nearly as battery efficient just 86 code

00:46:06.089 --> 00:46:06.099
nearly as battery efficient just 86 code
 

00:46:06.099 --> 00:46:09.500
nearly as battery efficient just 86 code
so I highly recommend doing an x86 build

00:46:09.500 --> 00:46:09.510
so I highly recommend doing an x86 build
 

00:46:09.510 --> 00:46:13.320
so I highly recommend doing an x86 build
as well and being one of the big things

00:46:13.320 --> 00:46:13.330
as well and being one of the big things
 

00:46:13.330 --> 00:46:15.180
as well and being one of the big things
I hope that we do is make multi apk even

00:46:15.180 --> 00:46:15.190
I hope that we do is make multi apk even
 

00:46:15.190 --> 00:46:17.010
I hope that we do is make multi apk even
easier to use because right now there's

00:46:17.010 --> 00:46:17.020
easier to use because right now there's
 

00:46:17.020 --> 00:46:18.810
easier to use because right now there's
sort of a partitioning scheme we we

00:46:18.810 --> 00:46:18.820
sort of a partitioning scheme we we
 

00:46:18.820 --> 00:46:20.760
sort of a partitioning scheme we we
suggest and it's a little bit a little

00:46:20.760 --> 00:46:20.770
suggest and it's a little bit a little
 

00:46:20.770 --> 00:46:22.980
suggest and it's a little bit a little
bit more of a challenge to walk through

00:46:22.980 --> 00:46:22.990
bit more of a challenge to walk through
 

00:46:22.990 --> 00:46:24.870
bit more of a challenge to walk through
the first time on the Play Store so I'm

00:46:24.870 --> 00:46:24.880
the first time on the Play Store so I'm
 

00:46:24.880 --> 00:46:26.190
the first time on the Play Store so I'm
hoping we actually make that better I

00:46:26.190 --> 00:46:26.200
hoping we actually make that better I
 

00:46:26.200 --> 00:46:27.900
hoping we actually make that better I
think I think I'm out of time though so

00:46:27.900 --> 00:46:27.910
think I think I'm out of time though so
 

00:46:27.910 --> 00:46:29.430
think I think I'm out of time though so
you're more I can totally take questions

00:46:29.430 --> 00:46:29.440
you're more I can totally take questions
 

00:46:29.440 --> 00:46:31.470
you're more I can totally take questions
afterwards but thank you thank you all

00:46:31.470 --> 00:46:31.480
afterwards but thank you thank you all
 

00:46:31.480 --> 00:46:32.790
afterwards but thank you thank you all
for coming I hope I hope this was fun

00:46:32.790 --> 00:46:32.800
for coming I hope I hope this was fun
 

00:46:32.800 --> 00:46:49.140
for coming I hope I hope this was fun
and enjoy the rest of your barbeque

00:46:49.140 --> 00:46:49.150
 

00:46:49.150 --> 00:46:51.210
you

