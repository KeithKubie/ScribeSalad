WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
We know how our parsing chart starts on the left.

00:00:03.000 --> 00:00:08.000
Chart 0 starts with S goes to I haven't seen anything yet, but I want an E,

00:00:08.000 --> 00:00:10.000
and I'm starting from chart position 0.

00:00:10.000 --> 00:00:17.000
It'd be really nice if after all T tokens in the input we've got I have totally seen an E,

00:00:17.000 --> 00:00:21.000
and I'm done with it now, starting from position 0 in the input.

00:00:21.000 --> 00:00:26.000
I know the start of parsing, and I know the end if parsing,

00:00:26.000 --> 00:00:31.000
but there's a slight, huge, massive gulf in here--

00:00:31.000 --> 00:00:36.000
the excluded middle of parsing that I just don't know how to construct.

00:00:36.000 --> 00:00:39.000
If only I had some intuition for it. Let's go see how that plays out.

00:00:39.000 --> 00:00:42.000
We need to know how to make additional entries in our chart.

00:00:42.000 --> 00:00:45.000
For example, we have S goes to dot E.

00:00:45.000 --> 00:00:48.000
What do we do? Can we bring some more stuff in?

00:00:48.000 --> 00:00:52.000
In the examples I've shown you we've added a few more things to chart position 0.

00:00:52.000 --> 00:00:55.000
I'm going to formally tell you how to do that.

00:00:55.000 --> 00:00:59.000
I'm going to formalize it using some abstract mathematics.

00:00:59.000 --> 00:01:02.000
Let's say that we're looking at chart position i.

00:01:02.000 --> 00:01:08.000
This means we've seen i tokens in the input.

00:01:08.000 --> 00:01:13.000
One of the things currently in that chart is the following parse state:

00:01:13.000 --> 00:01:18.000
S goes to E plus dot E coming from state j.

00:01:18.000 --> 00:01:23.000
This dot means we're expecting to see an E in the future.

00:01:23.000 --> 00:01:25.000
This is the future. This is the past.

00:01:25.000 --> 00:01:30.000
I'm going to need to look in our grammar for all the rules that start with E,

00:01:30.000 --> 00:01:35.000
because if E goes to elephant then I should be expecting to see an elephant in chart state i.

00:01:35.000 --> 00:01:40.000
If E goes to eggplant, then I should be expecting to see an eggplant in chart state i.

00:01:40.000 --> 00:01:43.000
We need to find all of the rules E goes to something in the grammar

00:01:43.000 --> 00:01:46.000
and somehow bring them in.

00:01:46.000 --> 00:01:51.000
Let me make this very generic to handle all possible situations.

00:01:51.000 --> 00:01:59.000
Let's say that we've got x goes to ab dot cd coming from position j in chart i.

00:01:59.000 --> 00:02:04.000
Normally for grammars I always draw nonterminals in blue and terminals in black,

00:02:04.000 --> 00:02:08.000
but I'm going to leave this a, b, c, and d. I don't know if they're terminals or nonterminals.

00:02:08.000 --> 00:02:12.000
I don't know what they are. In fact, a may even be empty. A may be nothing. B may be nothing.

00:02:12.000 --> 00:02:15.000
I'm going to be as generic as I can to handle all the possibilities.

00:02:15.000 --> 00:02:19.000
I'm not pinning these down to be either terminals or nonterminals.

00:02:19.000 --> 00:02:23.000
But I do note that our dot is right in front of c.

00:02:23.000 --> 00:02:29.000
I'm going to look in my grammar for all rules c goes to something.

00:02:29.000 --> 00:02:34.000
A could be empty. B could be empty. Pqr could be empty.

00:02:34.000 --> 00:02:38.000
Or they could be terminals. Or they could be nonterminals. Could be anything.

00:02:38.000 --> 00:02:44.000
For every such grammar rule, c goes to pqr. C goes to anything.

00:02:44.000 --> 00:02:46.000
Kumquat--oh, that doesnâ€™t start with a c.

00:02:46.000 --> 00:02:48.000
C goes to chevalier.

00:02:48.000 --> 00:02:52.000
We believe ultimately that we're going to see a c in the future.

00:02:52.000 --> 00:03:00.000
If c goes to carbon then we should expect to see carbon in the immediate future.

00:03:00.000 --> 00:03:06.000
But we don't want to forget that we made this decision starting in chart state i

00:03:06.000 --> 00:03:10.000
that conceptually there were i tokens before us that we're

00:03:10.000 --> 00:03:13.000
sort of forgetting about or putting off to the side.

00:03:13.000 --> 00:03:16.000
Because even though it looks like this dot is right to the left,

00:03:16.000 --> 00:03:20.000
there are i tokens we've already seen in order for us to get to this point.

00:03:20.000 --> 00:03:23.000
We add c goes to dot pqr.

00:03:23.000 --> 00:03:26.000
We haven't see any part of c yet, but we think we might.

00:03:26.000 --> 00:03:28.000
It's a possibility. We're leaving our options open.

00:03:28.000 --> 00:03:31.000
We came to this idea from chart state i.

00:03:31.000 --> 00:03:36.000
That's how many sort of hidden pieces of input we're alighting before the dot.

00:03:36.000 --> 00:03:40.000
We add that to chart i. We do this for every grammar rule that starts with a c.

00:03:40.000 --> 00:03:45.000
If there are five grammar rules that start with a c, we're going to add five things to chart i.

00:03:45.000 --> 00:03:50.000
Formally, this operation of bringing in everything that c could become,

00:03:50.000 --> 00:03:55.000
because we're expecting to see a c, is known as predicting.

00:03:55.000 --> 00:04:01.000
I predict, because we want to see a c and c goes to cantaloupe,

00:04:01.000 --> 00:04:03.000
that we're going to see a cantaloupe.

00:04:03.000 --> 00:04:09.000
It's also called "computing the closure"--a more technical term from language theory

00:04:09.000 --> 00:04:14.000
where right before a c any rule that has c on the left-hand side should be brought in

00:04:14.000 --> 09:59:59.000
to close the state so that all possibilities are considered.

