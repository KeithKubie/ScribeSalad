WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So the last thing I promised I would tell you about

00:00:03.000 --> 00:00:06.000
is inserting elements into a heap.

00:00:06.000 --> 00:00:08.000
And that turns out not to be all that hard,

00:00:08.000 --> 00:00:11.000
but it does involve some coding that we haven't done yet.

00:00:11.000 --> 00:00:14.000
The idea is that the new element that we're going to insert

00:00:14.000 --> 00:00:18.000
we stick at the sort of bottom right corner of the heap.

00:00:18.000 --> 00:00:23.000
Or, if the heap was already full, then the far left.

00:00:23.000 --> 00:00:27.000
But now we have potentially violated the heap property,

00:00:27.000 --> 00:00:30.000
so this node to it's parent could be problematic.

00:00:30.000 --> 00:00:33.000
So, essentially, we need to do

00:00:33.000 --> 00:00:36.000
some sort of an analog of down-heapify that I call up-heapify

00:00:36.000 --> 00:00:40.000
that takes this value that might be problematic,

00:00:40.000 --> 00:00:43.000
swaps it up if it is,

00:00:43.000 --> 00:00:45.000
and then continues to swap it up the tree

00:00:45.000 --> 00:00:48.000
until it reaches a place where it is smaller than both of its children.

00:00:48.000 --> 00:00:51.000
At which point, the heap property is satisfied globally.

00:00:51.000 --> 00:00:53.000
So I'm going to leave that as a homework problem for you

00:00:53.000 --> 00:00:55.000
to actually code up-heapify,

00:00:55.000 --> 00:00:58.000
and that gives us the insert that we need.

00:00:58.000 --> 00:01:03.000
So now that we can insert and delete into heaps and (logn) time,

00:01:03.000 --> 00:01:06.000
we can use this to solve the TopK problem

00:01:06.000 --> 00:01:08.000
that we've been talking about throughout this unit.

00:01:08.000 --> 00:01:13.000
By running through the list of the N elements that we want the TopK of,

00:01:13.000 --> 00:01:16.000
and meanwhile we keep a heap of size K off to the side,

00:01:16.000 --> 00:01:21.000
and so we're trying to the largest K, in this case.

00:01:21.000 --> 00:01:24.000
So each new element that we encounter

00:01:24.000 --> 00:01:27.000
we ask, is this element bigger than the smallest

00:01:27.000 --> 00:01:29.000
value that we've kept so far?

00:01:29.000 --> 00:01:32.000
So does it deserve to be in the TopK so far?

00:01:32.000 --> 00:01:34.000
If not, we can just throw it away,

00:01:34.000 --> 00:01:37.000
because we know it's not going to be part of the TopK.

00:01:37.000 --> 00:01:40.000
If it is, then the smallest thing in that heap

00:01:40.000 --> 00:01:43.000
no longer needs to be there, because we found something better.

00:01:43.000 --> 00:01:46.000
So we delete min,

00:01:46.000 --> 00:01:51.000
and we insert the new value that we just got into the heap

00:01:51.000 --> 00:01:54.000
and reestablish the heap property

00:01:54.000 --> 00:01:57.000
by--well, we could do it as a down-heapify, actually,

00:01:57.000 --> 00:02:00.000
because we deleted the node from the top.

00:02:00.000 --> 00:02:03.000
We can replace it with something else.

00:02:03.000 --> 00:02:06.000
So, for each of N times,

00:02:06.000 --> 00:02:09.000
we do possibly one insert into the heap,

00:02:09.000 --> 00:02:12.000
which is a log K operation.

00:02:12.000 --> 00:02:17.000
So the total running time ends up being we do (nlogk) operations.

00:02:17.000 --> 00:02:19.000
So that's actually pretty efficient.

00:02:19.000 --> 00:02:22.000
It doesn't solve the TopK problem better

00:02:22.000 --> 00:02:25.000
than the randomized algorithm we talked about--

00:02:25.000 --> 00:02:27.000
the partitioning algorithm--

00:02:27.000 --> 00:02:30.000
but it does it pretty fast

00:02:30.000 --> 00:02:32.000
and there's other uses for this.

00:02:32.000 --> 00:02:35.000
We'll see that in the next unit.

00:02:35.000 --> 00:02:41.000
Thanks a lot, and good luck with the homework.

