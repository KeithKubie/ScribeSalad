WEBVTT
Kind: captions
Language: en

00:00:09.000 --> 00:00:14.160
Well I've just balanced a whole lot of
dominoes up and what I wanted to do is

00:00:14.160 --> 00:00:18.630
look at how computers actually do maths for us.

00:00:18.630 --> 00:00:23.310
How on earth can a mechanical system
like just a chip in a computer - how can it

00:00:23.310 --> 00:00:28.500
actually do arithmetic. This is my input
Domino here. If I bump the input Domino

00:00:28.500 --> 00:00:32.070
it's going to send a signal down the
chain and normally you just have a one

00:00:32.070 --> 00:00:33.450
single chain of dominoes

00:00:33.450 --> 00:00:37.469
so I've mixed it up by... well initially
splitting the chain which in itself is

00:00:37.469 --> 00:00:41.579
not that controversial but then the
shorter arm over here

00:00:41.579 --> 00:00:45.750
knocks out some of these dominoes so if
these dominoes come toppling over

00:00:45.750 --> 00:00:50.820
it'll bump these two out and this won't
be able to cross. So in fact this is a

00:00:50.820 --> 00:00:54.539
circuit that stops itself. If I bump this
and it starts going

00:00:55.170 --> 00:00:58.289
this will get their first, knock them out
this will come to a halt. These are my

00:00:58.289 --> 00:01:02.010
output dominoes, this is the kind of the
output from the circuit that will not

00:01:02.010 --> 00:01:09.420
fall over. If I now have two inputs so if
I only knocked over this second input

00:01:09.420 --> 00:01:13.290
all it would do is these dominoes will all
fall over it would bump these out and

00:01:13.290 --> 00:01:14.850
then it would stop - nothing would
happen.

00:01:14.850 --> 00:01:20.460
So it means individually either one of
these bumped by itself that Domino will

00:01:20.460 --> 00:01:25.200
not fall over. If I don't bump either of
these, that Domino will not fall over

00:01:25.600 --> 00:01:30.860
so if I knock both of them together this
shorter one here will come along and knock

00:01:30.869 --> 00:01:34.979
these out this one at the same time will be coming along it will split but when this

00:01:34.979 --> 00:01:36.299
one gets here

00:01:36.299 --> 00:01:40.920
these dominoes are already gone so it stops which means these dominoes don't move

00:01:40.920 --> 00:01:44.640
this one will go all the way around it
comes along here comes down here

00:01:44.640 --> 00:01:47.579
straight across and then out

00:01:47.579 --> 00:01:52.229
So this circuit... the output only falls over

00:01:52.229 --> 00:01:58.290
if and only if I bump both of these and
so we call this an AND circuit

00:01:58.829 --> 00:02:04.000
it's got two inputs I have to knock over
one of them and the other one to get an output

00:02:04.350 --> 00:02:08.400
I'll tell you what I do knocking none of them first, there you go that worked

00:02:08.400 --> 00:02:12.500
now that the boring one is just this input because that will just knock that out and stop

00:02:12.500 --> 00:02:17.520
The fun one is either just this
one so it stops itself or both of them

00:02:17.520 --> 00:02:20.000
so the signal goes through what would
you... what yould you like?

00:02:20.000 --> 00:02:22.440
I think on behalf of the viewers they're going to want to see both.

00:02:22.500 --> 00:02:27.700
Yeah, are you ready (yeah) here we go one and the other

00:02:27.780 --> 00:02:33.990
There you are so it worked! So we got an
output cause I did one and the other one

00:02:33.990 --> 00:02:39.960
this is a working AND circuit. Now we can
describe this mathematically so we're

00:02:39.980 --> 00:02:42.460
not quite adding numbers yet but it's a
good step in the right direction

00:02:42.460 --> 00:02:47.800
So we'll call this one input one and I'm going to label that one there "input 1"

00:02:47.850 --> 00:02:51.570
This one here can be input two so that's "input 2"

00:02:51.570 --> 00:02:55.680
and then over here we have the output
so I'll label that "output" and what I'm

00:02:55.680 --> 00:03:02.160
going to say is if a domino is standing
up then nothing's happened yet we'll call that a 0.

00:03:02.160 --> 00:03:07.080
If it falls over we'll say it's
becoming a 1. So if you don't...

00:03:07.160 --> 00:03:11.780
the first input doesn't fall over the second input doesn't fall over

00:03:11.880 --> 00:03:17.800
the output in theory should not fall
over. If input 1 falls over but input 2 doesn't

00:03:17.800 --> 00:03:23.200
the output won't fall over. If
input one doesn't fall over but input 2 does

00:03:23.200 --> 00:03:29.020
the output still won't fall over
and then finally if both of these fall over together

00:03:29.160 --> 00:03:34.800
the output falls over and we call that...
this is the logic table and so this is

00:03:34.800 --> 00:03:40.140
what's called an AND... actually I'll lable it up here this is a AND GATE

00:03:40.140 --> 00:03:43.950
So what I am going to try to build next is a
thing called an EXCLUSIVE OR

00:03:43.950 --> 00:03:48.900
or XOR which is the... the best
name of the gate

00:03:48.900 --> 00:03:52.780
you have input 1 we're going to have
input 2 we're going to have our output again

00:03:52.780 --> 00:03:55.980
This time... again if I don't touch
any of the inputs

00:03:55.980 --> 00:04:01.020
I don't want the output to fall over. Now
if I only bump input 1 but not 2

00:04:01.020 --> 00:04:04.200
I still want the output to fall over this
input 1 has to go through the circuit

00:04:04.200 --> 00:04:09.750
if I don't hit 1 but i do hit 2, I
still want the output to fall over and

00:04:09.750 --> 00:04:13.370
then controversially if I bump both of
them together

00:04:13.480 --> 00:04:17.980
I want them to somehow cancel out in the
circuit so nothing comes out

00:04:17.980 --> 00:04:22.220
and that's why it's called an
EXCLUSIVE OR it's one input or the

00:04:22.230 --> 00:04:24.420
other input but not both

00:04:24.420 --> 00:04:30.000
that's the exclusive bit so I'm gonna
try and build an EXCLUSIVE OR circuit

00:04:30.000 --> 00:04:33.540
out of dominoes give me... give me a second here

00:04:36.150 --> 00:04:42.480
There we go so this is my EXCLUSIVE OR
gate and as you can see if you bump

00:04:42.480 --> 00:04:48.570
over just input 1 it will come flying
in here it goes into the fork here it

00:04:48.570 --> 00:04:52.560
will come along this way it will then go
out here we don't care if something

00:04:52.560 --> 00:04:54.480
comes back up the circuit that's fine

00:04:54.480 --> 00:04:58.590
more importantly it'll come around this way around there and then out and likewise

00:04:58.590 --> 00:05:02.190
because it's symmetric, if I bump input 2
that goes along into the fork goes along

00:05:02.190 --> 00:05:06.240
the middle comes around here and then
out the output. So either one by itself

00:05:06.240 --> 00:05:11.640
will make it through the circuit. 
Importantly though if I bump them both simultaneously

00:05:11.760 --> 00:05:16.800
they will be using the center at the
same time they will collide and stop and

00:05:16.800 --> 00:05:18.960
the output won't fall over

00:05:18.960 --> 00:05:22.680
I quite like the... doing both together,
right, cause that's the difficult bit

00:05:22.680 --> 00:05:26.730
because anyone can make a circuit where
both inputs lead to the same output

00:05:26.730 --> 00:05:31.560
I mean that's easy. One where that
happens and they can stop each other

00:05:31.560 --> 00:05:36.120
that's where it gets fun. So I'm going to
give it a go. Unfortunately dominoes do

00:05:36.120 --> 00:05:41.760
fall over quite quickly and you want to
have as much time as possible to enjoy the experience

00:05:41.760 --> 00:05:46.700
So what we might do is put on some ridiculous lights and do the whole thing in slowmo

00:05:46.710 --> 00:05:50.460
Okay right, okay that... that should be
adequate light... so we'll get this going

00:05:50.460 --> 00:05:56.180
and in theory they will cancel out right
in the center. OK here we go: one and the other one

00:05:57.120 --> 00:06:00.120
yes

00:06:04.950 --> 00:06:10.560
OK so you see this guy is dangerously
close to going

00:06:10.560 --> 00:06:15.330
so when this collided there's a bit of
recoil back up but thankfully again not

00:06:15.330 --> 00:06:18.570
quite enough to bump these off going the
other direction. So there you are

00:06:18.570 --> 00:06:21.570
It's the EXCLUSIVE OR together they didn't get through

00:06:22.320 --> 00:06:27.260
So we've done the AND gate and made that work we've done the EXCLUSIVE OR gate that has worked

00:06:27.260 --> 00:06:32.360
what we're going to do now is go
another step in the direction of ridiculous

00:06:32.520 --> 00:06:37.860
we're going to have input 1 again
we're going to have input 2

00:06:37.940 --> 00:06:40.400
We then... over here we have the output

00:06:40.400 --> 00:06:45.920
now again these are standard options
that we have every time

00:06:45.920 --> 00:06:48.540
they're all four ways you can bump over two inputs.

00:06:48.540 --> 00:06:54.450
Now i'm going to have output 1 and
output 2. Output 1 is going to act as

00:06:54.450 --> 00:06:58.560
if it was an AND gate so we'll have that
happening.

00:06:58.560 --> 00:07:05.700
Output 2 is going to act as if it is an
EXCLUSIVE OR gate and what that means is

00:07:05.700 --> 00:07:10.680
if you can have both of these outputs
for those two inputs

00:07:10.780 --> 00:07:15.140
these are counting the number of inputs
they get bumped so this is like a units column

00:07:15.150 --> 00:07:21.570
this is the ones column and that's
twos. So if you only bump one input over

00:07:21.570 --> 00:07:26.460
the one output goes, if you bump both of them over you get the twos column goes

00:07:27.030 --> 00:07:32.370
and so this is a very, very basic circuit
that can count. It can tell if you bump

00:07:32.370 --> 00:07:34.080
just one or two

00:07:34.080 --> 00:07:38.070
It doesn't matter which bump it can still
count it. So if i repurposed... because it

00:07:38.070 --> 00:07:40.950
needs an exclusive or in the middle. If I
very carefully...

00:07:40.950 --> 00:07:44.070
This is called a binary half adder

00:07:44.070 --> 00:07:48.840
and the reason it's called a binary half
adder is it's doing half of what you

00:07:48.840 --> 00:07:52.980
need to do full binary ari... oops...
full binary arithmetic

00:07:53.580 --> 00:07:56.580
so if you can build what's called a
binary full adder

00:07:56.640 --> 00:07:58.780
which believe me we'll get to in a second

00:07:58.800 --> 00:08:02.760
then you can do all the calculations you
want. So a binary full adder is what

00:08:02.760 --> 00:08:07.860
calculators use, what computers use it's the basis of all automated computation

00:08:08.720 --> 00:08:13.760
All right so I'm almost finished. I'm
putting the last two dominoes in over here

00:08:13.790 --> 00:08:15.050
It's a monster that

00:08:15.050 --> 00:08:19.700
it really is... well you know well this... this is interesting because this chain splits

00:08:19.700 --> 00:08:22.430
off and all it does is zigzag
backwards and forwards for a while and

00:08:22.430 --> 00:08:26.090
the reason I had to go and do these
extra... cause I could have done just that, right

00:08:26.090 --> 00:08:29.750
the reason I had to do these extra
dominoes is because this is a delay line

00:08:29.750 --> 00:08:35.180
so I need to give... cause you can still see the EXCLUSIVE OR is in here

00:08:35.180 --> 00:08:40.010
I need to give the EXCLUSIVE OR enough time to do its thing before this signal

00:08:40.010 --> 00:08:41.060
catches up with it

00:08:41.060 --> 00:08:45.590
so this is just delaying one of the
signals. The way this works is if I just

00:08:45.590 --> 00:08:49.750
bump this input... Oh first of all, if I bump none of the inputs -

00:08:49.900 --> 00:08:55.420
Perfect. If I just bump this input it
will come in here goes into the fork,

00:08:55.430 --> 00:08:58.490
goes across the EXCLUSIVE OR, comes out the other side.

00:08:58.490 --> 00:09:01.270
This waste signal just comes back and out that doesn't matter

00:09:01.270 --> 00:09:05.300
it goes around here, goes around there and then it goes out the units output so that means that

00:09:05.300 --> 00:09:10.720
one input was bumped if I bump this one now this is where it get's slightly more complicated

00:09:10.720 --> 00:09:15.640
Here it splits and then one
signal goes through the EXCLUSIVE OR

00:09:15.650 --> 00:09:19.370
all the way through, out the other side, comes around, comes here,

00:09:19.370 --> 00:09:25.970
splits, goes out this... the units output. Also, it blocks these so this forks so

00:09:25.970 --> 00:09:27.800
this one stops this chain

00:09:27.800 --> 00:09:32.180
meanwhile the other signal's coming along here it gets to here and it's stopped.

00:09:32.180 --> 00:09:39.380
So either one by itself only that output
falls over. If I bump them together

00:09:39.380 --> 00:09:42.440
well this one splits again that one goes that way

00:09:42.440 --> 00:09:48.060
this one's coming in, they collide in the
middle and stop, this one carries on its merry path,

00:09:48.060 --> 00:09:52.120
gets right to the end goes
straight out that output and this one

00:09:52.130 --> 00:09:53.810
falls over but that one doesn't

00:09:53.810 --> 00:09:59.930
and so that's the twos output and so
that's the binary number that counts how

00:09:59.930 --> 00:10:06.870
many of these dominoes I bumped. This... this is a circuit of inanimate objects that can count.

00:10:07.000 --> 00:10:10.980
That excites you doesn't it? I.. I get disproportionately excited.

00:10:11.630 --> 00:10:14.870
People say all right now I want to know how computers work and they mean you know I

00:10:14.870 --> 00:10:16.700
want to know how to use microsoft word

00:10:16.700 --> 00:10:18.980
or I want to know you know... or even
programming languages people go

00:10:18.980 --> 00:10:20.760
"Oh I've learned to program!"

00:10:20.760 --> 00:10:22.720
that will people go "You know
what, I do everything from the terminal prompt"

00:10:22.720 --> 00:10:26.400
alright but... but you're still
just interacting with the software level

00:10:26.420 --> 00:10:31.130
of the computer what's actually... how is the
computer actually executing what you're

00:10:31.130 --> 00:10:34.880
telling it to do and right down at the very bottom this is the absolute fundamental

00:10:34.880 --> 00:10:42.120
layer of all computing... is a circuit of
objects that can make decisions based on inputs.

00:10:42.120 --> 00:10:45.300
Alright, so I'm gonna bump just this
one only that will fall over

00:10:45.320 --> 00:10:48.320
that won't move. Here we go, ready?

00:10:52.310 --> 00:10:56.900
The system works, look at that. So if they
were to stop this one from coming

00:10:56.900 --> 00:11:00.620
through the EXCLUSIVE OR worked perfectly
this came through without being stopped

00:11:00.620 --> 00:11:04.130
when out there's our units output this
one didn't move

00:11:04.130 --> 00:11:08.270
if all you saw was this, you would know that back here

00:11:08.270 --> 00:11:11.270
I only bumped one input not two

00:12:05.010 --> 00:12:12.720
Alright so that worked. Now as I said, move that away, this is just the half adder

00:12:12.720 --> 00:12:17.640
we want a binary full adder and to have
a full adder you need to have three

00:12:17.640 --> 00:12:25.500
inputs so you have input 1, input 2 and
input 3, and so now we need every single

00:12:25.500 --> 00:12:32.080
combination of... there is not bumping all of them, there's doing that, there is doing that,

00:12:32.080 --> 00:12:33.580
there is bumping those,

00:12:33.580 --> 00:12:37.270
there is bumping that one but not those, there's that one that one that one,

00:12:37.270 --> 00:12:38.860
that one that one that one,

00:12:38.860 --> 00:12:45.160
OK, there we are. That's all eight ways you can have three different inputs falling over and

00:12:45.160 --> 00:12:48.790
now I'm going to label this. This is
going to be our twos column and this is

00:12:48.790 --> 00:12:53.630
gonna be our ones/units columns. This is our binary counting of how many we bumped.

00:12:53.630 --> 00:12:59.160
So there were bumped none of them,
there we bumped just one, just one, two of them,

00:12:59.200 --> 00:13:04.780
one of them, two of them, two of them... and at the very end

00:13:04.780 --> 00:13:08.880
three of them. And to have three we would expect that to happen.

00:13:09.070 --> 00:13:15.610
So if we could build this circuit, we
would have the full binary adder and you

00:13:15.610 --> 00:13:20.960
can build this right so all you need is
basically you chain together two half adders

00:13:20.960 --> 00:13:22.860
which is why that's called the
half adder.

00:13:22.870 --> 00:13:26.730
So a little bit of careful positioning... you need a lot of dominoes at this point

00:13:26.730 --> 00:13:29.680
you need maybe two or three thousand dominoes to make this work reliably

00:13:29.680 --> 00:13:34.320
you could make a massive circuit which does this and once you can do that

00:13:34.320 --> 00:13:39.420
you can then add any binary numbers together that you want.

00:13:39.420 --> 00:13:44.120
Shall we do a calculation? Shall we... I'll tell you what... if you want to give me two numbers

00:13:44.120 --> 00:13:52.020
in you know... between 20 and 50 what shell we do? Let's do 42.

00:13:52.030 --> 00:13:57.910
Yeah of course. And 17. OK so
right. So we're going to add 42 to 17.

00:13:57.910 --> 00:13:59.980
A bit of a spoiler alert

00:13:59.980 --> 00:14:04.600
we're expecting 59 just so we're all... I
mean don't... you know I don't want to ruin it for anyone

00:14:04.600 --> 00:14:08.920
but OK so I'm going to turn
these into binary numbers. So 42 is going

00:14:08.920 --> 00:14:14.110
to be a 32 which means I need another 10
so 32

00:14:14.110 --> 00:14:18.210
no 16s, one 8, no 4s, a 2 and a 1

00:14:18.210 --> 00:14:27.670
and then down here 17 is 0 1 0 0 0 1
so that's 42 and 17 in binary

00:14:27.930 --> 00:14:32.930
And so now ah... and they're incredibly
boring numbers to add in binary

00:14:33.300 --> 00:14:37.380
Why? Now because if I go along and
add them together

00:14:37.380 --> 00:14:46.110
what's 0 plus 1? Is 1. 1 plus 0 is 1. 0 plus 0. 1 plus 0. 0 plus 1. and 1.

00:14:46.110 --> 00:14:51.000
So at no point did you have... having to add two one's together.

00:14:51.000 --> 00:14:53.820
Alright so that made the sum... what we just... you know that's what we get

00:14:53.820 --> 00:14:57.440
for choosing random numbers. But we can double check the system works

00:14:57.440 --> 00:15:05.900
because now that's... so I'll label that, well that's units 2s, 4s, 8s, 16s, 32s.

00:15:05.900 --> 00:15:14.380
Our answers are 32 and the 16 which gives us 48, plus another 8 which gives us 56, plus a 2 which gives us

00:15:14.550 --> 00:15:20.220
58 plus a 1 which gives us 59. So... that is 59 in binary, right so this is how it works.

00:15:20.220 --> 00:15:23.400
What could have happened though... well let's just rig it with some

00:15:23.400 --> 00:15:30.600
interesting binary numbers right. If I
had let's say 110111 and i'm adding it

00:15:30.600 --> 00:15:35.940
to 011011, right. So I've
deliberately lined up loads of one's to

00:15:35.940 --> 00:15:39.300
get in the way. Cause now if I do 1
plus 1

00:15:39.300 --> 00:15:43.620
the answer's 2, and I can't write a 2
down there because it's binary what I

00:15:43.620 --> 00:15:48.150
can do is I can write the 0 and carry
the 1,

00:15:48.150 --> 00:15:52.190
And so now I've got to add three of
these together. So I've got to add OK,

00:15:52.190 --> 00:15:56.120
1 plus 1 plus 1 is 3. So I write
the 1 carry the 1.

00:15:56.140 --> 00:16:03.040
OK, 1 plus 1 is 2. Put them down there and every single time the only... oops, that should be a 0...

00:16:03.060 --> 00:16:06.900
the only option I can have

00:16:06.900 --> 00:16:12.700
is either... oh, I'm only ever adding
combinations of three 1s and 0s.

00:16:12.700 --> 00:16:15.700
So no matter how big the numbers are I want to add,

00:16:15.700 --> 00:16:20.050
I never have to do anything more
complicated than three 1s and 0s.

00:16:20.050 --> 00:16:22.120
And this is every single option

00:16:22.120 --> 00:16:25.930
so the reason that binary is great for
adding is, when you're adding base 10

00:16:25.930 --> 00:16:28.850
numbers you might have to add a 2 to a 7 or a 1 to a 4 or an 8...

00:16:28.850 --> 00:16:34.090
there's so many options that you may have to add. Binary - only those eight options.

00:16:34.090 --> 00:16:38.700
If you can do all of those you can add any numbers together by just doing that one

00:16:38.709 --> 00:16:41.050
step over and over and over and over and
over again

00:16:41.050 --> 00:16:47.830
so if you can build that of dominoes,
that's one bit of the calculation. So if you built this

00:16:47.830 --> 00:16:53.040
I don't know, four times, so if you had...
you'd probably need about 10,000 dominoes...

00:16:53.040 --> 00:16:58.120
with 10,000 dominoes you
could build the full adder circuit four times in a row

00:16:58.120 --> 00:17:02.740
it means you could take two 4-digit
binary numbers as inputs and you could

00:17:02.740 --> 00:17:06.860
have the 5-digit sum coming out as
the answer.

00:17:06.860 --> 00:17:14.040
Of course... I mean you'd have to be truly insane to phone up a series of domino manufacturers,

00:17:14.040 --> 00:17:19.940
find a wholesaler who would ship you 10,000 dominoes, find a concrete floor at the...

00:17:19.940 --> 00:17:23.880
well, at the museum of science and
industry in Manchester and then spend

00:17:23.890 --> 00:17:25.569
an entire weekend

00:17:25.569 --> 00:17:29.770
balancing dominoes. I may have done this. I got some friends together we got 10,000

00:17:29.770 --> 00:17:34.540
dominoes and we built a circuit which
will add four digit binary numbers and

00:17:34.540 --> 00:17:36.700
give you a five digit answer.

00:17:36.700 --> 00:17:40.600
So if you'd like to see Matt's giant
Domino computer in action,

00:17:40.780 --> 00:17:43.870
there'll be a link on the screen and in
the video description

00:17:43.870 --> 00:17:47.440
it's obviously well worth a look there's
also more of my interview with Matt

00:17:47.440 --> 00:17:51.920
where he talks about how you take this Domino idea he has just explained to the next level.

00:17:51.920 --> 00:17:55.400
It'll probably be unlisted so having
watched this video for so long

00:17:55.450 --> 00:17:58.600
you're in a very exclusive club that
would know about it. And finally i'm sure

00:17:58.600 --> 00:18:00.460
some of you will be saying in the
comments,

00:18:00.460 --> 00:18:04.960
why isn't this video on Computerphile?
Well, it probably could have been but

00:18:04.960 --> 00:18:08.440
here it is on numberphile. Those of you who aren't wondering that because you've

00:18:08.440 --> 00:18:10.210
never heard of Computerphile

00:18:10.210 --> 00:18:14.230
allow me to take this opportunity to
tell you about Computerphile which is

00:18:14.230 --> 00:18:17.500
kind of like the sister channel of
Numberphile, all about computer science

00:18:17.500 --> 00:18:19.870
and those sort of things. It's well worth a look

00:18:19.870 --> 00:18:23.020
and again, I'll include links there's
going to be loads of links under this

00:18:23.020 --> 00:18:27.280
video so why don't you sort of extend it
and make that information box a little

00:18:27.280 --> 00:18:29.530
bit bigger and you can see them all
sitting there.

