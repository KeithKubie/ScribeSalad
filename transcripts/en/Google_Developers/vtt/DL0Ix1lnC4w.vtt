WEBVTT
Kind: captions
Language: en

00:00:00.119 --> 00:00:01.410
ANDREW BROGDON: Hey, everybody.

00:00:01.410 --> 00:00:02.800
I'm Andrew from
the Flutter team,

00:00:02.800 --> 00:00:04.383
and in the next few
minutes, I'm going

00:00:04.383 --> 00:00:06.710
to show you how using Flutter's
Material Design widgets

00:00:06.710 --> 00:00:08.900
can help you quickly
break down a design

00:00:08.900 --> 00:00:13.310
and turn it into real code that
runs on both iOS and Android.

00:00:13.310 --> 00:00:15.320
Google recently released
a bunch of new stuff

00:00:15.320 --> 00:00:17.020
for the Material
Design system to help

00:00:17.020 --> 00:00:21.020
app developers build beautiful,
usable experiences fast.

00:00:21.020 --> 00:00:23.510
With that came a ton
of open-source code

00:00:23.510 --> 00:00:26.420
that developers can use to
implement those experiences.

00:00:26.420 --> 00:00:28.910
There are native libraries
for iOS and Android,

00:00:28.910 --> 00:00:32.720
web components, and for Flutter,
a whole bunch of widgets.

00:00:32.720 --> 00:00:35.630
Expanding panels, buttons,
implicit animations,

00:00:35.630 --> 00:00:38.150
all kinds of stuff that you
can use to quickly build

00:00:38.150 --> 00:00:39.860
your own native apps.

00:00:39.860 --> 00:00:41.240
How does that affect you?

00:00:41.240 --> 00:00:44.060
Well, imagine you're an
engineer and your company's

00:00:44.060 --> 00:00:45.822
lead designer comes
to you and says,

00:00:45.822 --> 00:00:47.780
hey, you know how we were
looking for a project

00:00:47.780 --> 00:00:48.981
to get started with Flutter?

00:00:48.981 --> 00:00:51.480
Turns out the animal shelter
down the road could use an app,

00:00:51.480 --> 00:00:53.722
so I mocked up a kitten
adoption catalog.

00:00:53.722 --> 00:00:55.430
How quickly can you
get these two designs

00:00:55.430 --> 00:00:56.971
turned into something
we can actually

00:00:56.971 --> 00:00:58.290
see on Android and iOS?

00:00:58.290 --> 00:01:00.560
Well, no problem.

00:01:00.560 --> 00:01:03.080
The first place to head is
Flutter's Material Components

00:01:03.080 --> 00:01:03.980
gallery.

00:01:03.980 --> 00:01:05.540
Here you can find
the widgets that'll

00:01:05.540 --> 00:01:08.090
be the building blocks
of your interface.

00:01:08.090 --> 00:01:09.710
There's Scaffold,
for instance, which

00:01:09.710 --> 00:01:11.540
provides a visual
framework for your app

00:01:11.540 --> 00:01:13.790
with room for drawers and
floating action buttons

00:01:13.790 --> 00:01:14.900
and menus.

00:01:14.900 --> 00:01:17.930
There are also dialogs, alerts,
input elements for capturing

00:01:17.930 --> 00:01:19.880
data, and a lot more.

00:01:19.880 --> 00:01:21.500
With those widgets
in your tool belt,

00:01:21.500 --> 00:01:23.030
you can begin
thinking of the design

00:01:23.030 --> 00:01:25.550
in terms of how it's actually
going to be constructed.

00:01:25.550 --> 00:01:28.070
The first screen becomes a
scaffold with a list view,

00:01:28.070 --> 00:01:29.870
and the second becomes
a simple dialog

00:01:29.870 --> 00:01:32.330
with a networked image, some
text widgets, and a couple

00:01:32.330 --> 00:01:33.740
buttons.

00:01:33.740 --> 00:01:36.327
A lot of times, this is
when you, the engineer,

00:01:36.327 --> 00:01:37.910
would have to go
write up a design doc

00:01:37.910 --> 00:01:39.868
and show what your plan
is and then haggle over

00:01:39.868 --> 00:01:41.690
the details with the designer.

00:01:41.690 --> 00:01:43.786
But Flutter's built to
make app coding quick,

00:01:43.786 --> 00:01:45.410
and in less time than
it would probably

00:01:45.410 --> 00:01:48.470
take you to produce that doc,
you can just knock out the code

00:01:48.470 --> 00:01:50.760
and have something real
for people to look at.

00:01:50.760 --> 00:01:51.512
So let's do it.

00:01:51.512 --> 00:01:53.720
Let's get into an editor
and start putting components

00:01:53.720 --> 00:01:54.880
together.

00:01:54.880 --> 00:01:57.350
OK, here we are in a
very basic Flutter app,

00:01:57.350 --> 00:01:59.420
about 20 lines of Dart code.

00:01:59.420 --> 00:02:01.740
First step to mocking
up is mock data.

00:02:01.740 --> 00:02:03.290
So I'm going to use
the magic of cut

00:02:03.290 --> 00:02:08.070
and paste to add a class
to hold my kitten data.

00:02:08.070 --> 00:02:10.460
There's nothing fancy here,
just four properties-- name,

00:02:10.460 --> 00:02:14.940
age, description, and
a URL for a kitten pic.

00:02:14.940 --> 00:02:16.410
And now for some data.

00:02:16.410 --> 00:02:18.900
Because iOS simulators
and Android emulators

00:02:18.900 --> 00:02:20.580
use different
addresses to represent

00:02:20.580 --> 00:02:22.230
the actual machine
they're running on,

00:02:22.230 --> 00:02:24.550
I'm going to add a
global string for it.

00:02:24.550 --> 00:02:27.030
And then I'll create a
list of kitten objects

00:02:27.030 --> 00:02:30.580
with image URLs that
work on either platform.

00:02:30.580 --> 00:02:32.760
There we go.

00:02:32.760 --> 00:02:35.310
Four cats, easy peasy.

00:02:35.310 --> 00:02:37.860
For the images themselves,
I've got them in a folder,

00:02:37.860 --> 00:02:41.260
and I'm just going to run
Python's simple HTTP server.

00:02:41.260 --> 00:02:42.870
So for all my app
knows, these images

00:02:42.870 --> 00:02:46.370
could be coming from
any server on the net.

00:02:46.370 --> 00:02:48.580
OK, with the data
in place, it's time

00:02:48.580 --> 00:02:50.242
to start building out the UI.

00:02:50.242 --> 00:02:52.450
Here's my home page, which
is just an empty container

00:02:52.450 --> 00:02:53.810
right now.

00:02:53.810 --> 00:02:57.180
And I'm going to replace
it with a scaffold, which

00:02:57.180 --> 00:03:00.030
provides some visual
structure for everything else.

00:03:00.030 --> 00:03:02.160
And it has an AppBar
property I can use

00:03:02.160 --> 00:03:05.330
to put a title bar in my app.

00:03:05.330 --> 00:03:07.350
Available cats--
let's do kittens.

00:03:10.820 --> 00:03:13.130
All right, so when I save
this and do a hot reload,

00:03:13.130 --> 00:03:15.220
I get this.

00:03:15.220 --> 00:03:17.990
It's a start, and it's running
on both an iOS simulator

00:03:17.990 --> 00:03:19.460
and Android.

00:03:19.460 --> 00:03:21.260
If you haven't seen
hot reload in action,

00:03:21.260 --> 00:03:23.810
Flutter can quickly deploy
code changes to your app

00:03:23.810 --> 00:03:25.290
while it's still running.

00:03:25.290 --> 00:03:27.590
So I'm going to be making
small, incremental changes

00:03:27.590 --> 00:03:30.140
and then flipping back to these
instances of the app a lot

00:03:30.140 --> 00:03:32.470
over the next few minutes.

00:03:32.470 --> 00:03:35.130
All right, let's add a
body to the scaffold.

00:03:35.130 --> 00:03:38.030
This is where the
list view comes in.

00:03:38.030 --> 00:03:40.160
I'll use the name to
build a constructor, which

00:03:40.160 --> 00:03:41.840
takes three parameters.

00:03:41.840 --> 00:03:44.480
First is itemCount, which is
just the length of my list.

00:03:47.220 --> 00:03:48.650
There we go.

00:03:48.650 --> 00:03:51.760
Then comes itemExtent,
the height of each item.

00:03:51.760 --> 00:03:53.720
And I'll just go with 60.

00:03:53.720 --> 00:03:56.560
And last is the Builder.

00:03:56.560 --> 00:03:58.660
This is the method that's
responsible for building

00:03:58.660 --> 00:04:00.730
the widgets that'll
display each item.

00:04:00.730 --> 00:04:02.230
And I'm just going
to make up a name

00:04:02.230 --> 00:04:05.040
and give it a function, here.

00:04:05.040 --> 00:04:07.260
I'll define that method up here.

00:04:07.260 --> 00:04:12.810
It returns a widget and
takes a BuildContext.

00:04:12.810 --> 00:04:14.580
And that BuildContext
just represents

00:04:14.580 --> 00:04:18.060
a spot in the hierarchy where
these widgets will be placed,

00:04:18.060 --> 00:04:21.910
and it takes the index
of the item as well.

00:04:21.910 --> 00:04:26.510
And let's start with just a text
widget for the kitten's name.

00:04:26.510 --> 00:04:28.694
There we go.

00:04:28.694 --> 00:04:30.680
And hot reload.

00:04:30.680 --> 00:04:34.340
All right, we got some names,
but they're pretty small.

00:04:34.340 --> 00:04:36.980
I can use a text style
to fix that, though.

00:04:36.980 --> 00:04:39.800
One of the material components
for Flutter is theme.

00:04:39.800 --> 00:04:42.260
Every app starts
with a default theme,

00:04:42.260 --> 00:04:44.214
and I'll be
customizing it later.

00:04:44.214 --> 00:04:46.130
This code gets a reference
to the theme object

00:04:46.130 --> 00:04:48.920
for the correct context and
then styles the text widget

00:04:48.920 --> 00:04:51.170
to match the headline font.

00:04:51.170 --> 00:04:53.480
This something of context
pattern, by the way,

00:04:53.480 --> 00:04:54.769
pops up a lot in Flutter.

00:04:54.769 --> 00:04:56.810
This is how you get the
Navigator to push routes,

00:04:56.810 --> 00:04:57.620
for example.

00:04:57.620 --> 00:04:59.036
And you could even
get a reference

00:04:59.036 --> 00:05:00.650
to the containing
scaffold that way.

00:05:00.650 --> 00:05:02.600
All right, hot reload.

00:05:02.600 --> 00:05:03.924
And we got big names.

00:05:03.924 --> 00:05:05.840
They're still locked on
the left edge, though,

00:05:05.840 --> 00:05:09.396
so I'll wrap the text
widgets in a container

00:05:09.396 --> 00:05:10.520
and set some padding, here.

00:05:13.630 --> 00:05:15.380
I think 16 should do it.

00:05:15.380 --> 00:05:18.120
There we go, Container.

00:05:18.120 --> 00:05:21.860
And I'll set the padding
property with a constant of 16.

00:05:24.790 --> 00:05:29.985
Once I've got that done, I just
need to add an alignment here.

00:05:29.985 --> 00:05:31.280
There we go.

00:05:31.280 --> 00:05:32.360
And I'll use centerLeft.

00:05:32.360 --> 00:05:35.135
That gives me vertical
centering and left alignment.

00:05:35.135 --> 00:05:38.990
All right, another hot
reload, and there we go.

00:05:38.990 --> 00:05:40.340
One last thing to do.

00:05:40.340 --> 00:05:43.040
Our app is blue, but
the design was purple.

00:05:43.040 --> 00:05:46.020
So let me scroll up.

00:05:46.020 --> 00:05:49.500
MaterialApp, which is the widget
that represents my entire app,

00:05:49.500 --> 00:05:52.020
has an optional theme
parameter in its constructor.

00:05:52.020 --> 00:05:53.730
I can give it some
theme data that'll

00:05:53.730 --> 00:05:56.220
be merged into
that default theme.

00:05:56.220 --> 00:05:59.132
So I'll set the primary
swatch to purple.

00:05:59.132 --> 00:06:01.070
There we go.

00:06:01.070 --> 00:06:05.470
And one more hot reload,
and I've got purple.

00:06:05.470 --> 00:06:07.240
My first design is implemented.

00:06:07.240 --> 00:06:08.920
All right, so that's
one screen down.

00:06:08.920 --> 00:06:11.110
Now let's get the rest
of the design working.

00:06:11.110 --> 00:06:13.870
I'm going to launch a simple
dialog with some text, image,

00:06:13.870 --> 00:06:15.700
and button widgets
that display details

00:06:15.700 --> 00:06:17.680
for an individual kitten.

00:06:17.680 --> 00:06:19.940
That's probably not a
sentence you hear every day.

00:06:19.940 --> 00:06:21.400
Let's get to it.

00:06:21.400 --> 00:06:23.170
First order of business,
I need to launch

00:06:23.170 --> 00:06:28.550
the dialog in response to a tap,
so I need a GestureDetector.

00:06:28.550 --> 00:06:29.050
There we go.

00:06:29.050 --> 00:06:33.300
I can use its onTap property
to get myself wired up.

00:06:33.300 --> 00:06:34.590
So no parameters needed.

00:06:34.590 --> 00:06:36.430
I'm just going to
call showDialog,

00:06:36.430 --> 00:06:38.160
which is a top-level
Flutter method that

00:06:38.160 --> 00:06:40.260
takes a context and a
builder function that's

00:06:40.260 --> 00:06:42.330
responsible for creating
the widgets that

00:06:42.330 --> 00:06:44.190
compose the dialog.

00:06:44.190 --> 00:06:45.750
Just like with the
ListView.builder,

00:06:45.750 --> 00:06:48.280
I'm going to give it
a name, dialogBuilder.

00:06:52.270 --> 00:06:55.090
And then I'm going to define
that function up here.

00:06:55.090 --> 00:06:57.010
It returns a widget,
and it accepts

00:06:57.010 --> 00:07:00.757
a build context and a kitten.

00:07:00.757 --> 00:07:02.590
I'm just going to have
it return a container

00:07:02.590 --> 00:07:06.270
to start so we can see what
this dialog actually looks like.

00:07:06.270 --> 00:07:06.980
There we go.

00:07:06.980 --> 00:07:10.170
I'll give it a width and
a height, say 80 of each.

00:07:10.170 --> 00:07:11.860
It's just going to
be a big, black box.

00:07:11.860 --> 00:07:16.650
OK, hot reload, and let
me tap on Mittens, here.

00:07:16.650 --> 00:07:18.780
Both sides.

00:07:18.780 --> 00:07:22.060
And I got empty dialogs, cool.

00:07:22.060 --> 00:07:25.910
All right, so let's replace the
container with something real.

00:07:25.910 --> 00:07:27.920
I'll start with a kitten image.

00:07:27.920 --> 00:07:30.611
I could use the Image class--

00:07:30.611 --> 00:07:33.370
there we go-- which
has a named constructor

00:07:33.370 --> 00:07:35.110
for network-loaded images.

00:07:35.110 --> 00:07:37.660
And I'm just going to give it
the URL, which comes straight

00:07:37.660 --> 00:07:39.610
out of that mock object.

00:07:39.610 --> 00:07:42.400
And I'll give it a fit of fill.

00:07:42.400 --> 00:07:43.310
There we go.

00:07:43.310 --> 00:07:45.810
So it's a full-bleed display.

00:07:45.810 --> 00:07:49.066
Format that up and hot reload.

00:07:49.066 --> 00:07:51.340
Hey, Mittens the
Majestic, all right.

00:07:55.240 --> 00:07:56.830
And let me try one
of the other cats.

00:07:56.830 --> 00:07:58.780
Steve, here, he's pretty cool.

00:07:58.780 --> 00:08:00.890
Excellent.

00:08:00.890 --> 00:08:03.619
OK, so that image is full-bleed,
but my text widgets and button

00:08:03.619 --> 00:08:05.160
should have some
padding around them.

00:08:05.160 --> 00:08:08.955
So I'll use a Padding widget.

00:08:08.955 --> 00:08:09.740
There we go.

00:08:12.980 --> 00:08:13.900
And another 16.

00:08:13.900 --> 00:08:17.130
And inside, I'm going to
use a Column widget, which

00:08:17.130 --> 00:08:20.080
can display the instances
of text vertically.

00:08:20.080 --> 00:08:22.660
There we go.

00:08:22.660 --> 00:08:25.250
Format that up and hot
reload, and so there's

00:08:25.250 --> 00:08:28.050
my padded empty
column at the bottom.

00:08:28.050 --> 00:08:30.260
And speaking of padding,
that space above the image

00:08:30.260 --> 00:08:32.010
is still there, and I
need to take it out.

00:08:32.010 --> 00:08:35.230
That's not part of the design.

00:08:35.230 --> 00:08:37.299
Fortunately, I can set
the content padding

00:08:37.299 --> 00:08:39.292
on the dialog itself to 0.

00:08:39.292 --> 00:08:40.750
There's actually
a constant for it.

00:08:40.750 --> 00:08:42.039
So EdgeInsets.zero.

00:08:44.650 --> 00:08:46.940
And there we go.

00:08:46.940 --> 00:08:48.820
OK, time for some text widgets.

00:08:48.820 --> 00:08:52.411
There's the name, the
age, and description.

00:08:52.411 --> 00:08:56.020
There's one, get another
one for age in here,

00:08:56.020 --> 00:08:57.610
and then description.

00:08:57.610 --> 00:09:01.480
Now, age is an integer, so I'll
use Dart's string interpolation

00:09:01.480 --> 00:09:04.802
to convert that
to a nice string.

00:09:04.802 --> 00:09:07.130
Hot reload, and there's my text.

00:09:07.130 --> 00:09:08.950
But it is unstyled
and unaligned,

00:09:08.950 --> 00:09:11.190
so we got some more work to do.

00:09:11.190 --> 00:09:12.030
Alignment is easy.

00:09:12.030 --> 00:09:15.330
Rows and columns have an
alignment for their CrossAxis,

00:09:15.330 --> 00:09:16.787
a property for that.

00:09:16.787 --> 00:09:18.370
The main axis for a
column, of course,

00:09:18.370 --> 00:09:20.520
is vertical, so cross-axis
alignment controls

00:09:20.520 --> 00:09:22.560
how things are set on
the horizontal axis.

00:09:22.560 --> 00:09:24.546
I've got this set to Stretch.

00:09:24.546 --> 00:09:26.740
So reload, and
everything's there.

00:09:26.740 --> 00:09:27.790
Cool.

00:09:27.790 --> 00:09:31.524
So I need some sizes on these,
and that means a theme object.

00:09:31.524 --> 00:09:33.190
I'm going to use it
a few times in here,

00:09:33.190 --> 00:09:36.020
so I'm actually going to cache
a local copy up at the top.

00:09:38.810 --> 00:09:39.820
There we go.

00:09:39.820 --> 00:09:42.990
Now I can come down,
and let's say display1

00:09:42.990 --> 00:09:46.040
for this one, which is
a really big font size.

00:09:46.040 --> 00:09:47.964
There we go.

00:09:47.964 --> 00:09:49.407
Scroll down.

00:09:49.407 --> 00:09:50.730
And hot reload.

00:09:50.730 --> 00:09:53.190
There's Steve, OK.

00:09:53.190 --> 00:09:57.440
And I'm going to knock out the
rest of these pretty quick.

00:09:57.440 --> 00:09:59.320
I'll use subhead for the age.

00:09:59.320 --> 00:10:01.810
That's a good one.

00:10:01.810 --> 00:10:03.670
And the copyWith
method allows me

00:10:03.670 --> 00:10:05.302
to modify the theme
instance, sort of

00:10:05.302 --> 00:10:07.010
like I did with the
purple color earlier.

00:10:07.010 --> 00:10:08.860
So I'm going to
make that italic.

00:10:08.860 --> 00:10:11.380
And I'm also going to use a
widget called SizedBox, here,

00:10:11.380 --> 00:10:13.330
to just block out some
space between the age

00:10:13.330 --> 00:10:16.260
and the description.

00:10:16.260 --> 00:10:18.030
With that done, I can
set the description

00:10:18.030 --> 00:10:19.410
to use the style for body text.

00:10:22.870 --> 00:10:25.460
There we go, body1.

00:10:25.460 --> 00:10:26.730
Get that formatted up.

00:10:26.730 --> 00:10:29.360
All right, and hot reload.

00:10:29.360 --> 00:10:30.440
There we go.

00:10:30.440 --> 00:10:32.600
All right, now I just
need some buttons.

00:10:32.600 --> 00:10:35.180
First I'll use a Wrap
widget, which is like a row

00:10:35.180 --> 00:10:38.362
but will wrap its children
if they extend too far.

00:10:38.362 --> 00:10:39.260
There we go.

00:10:43.180 --> 00:10:47.010
Then I can use a FlatButton
for the first choice, which is

00:10:47.010 --> 00:10:48.449
sort of like the Cancel button.

00:10:48.449 --> 00:10:49.490
Let me get that in there.

00:10:52.420 --> 00:10:55.130
And I'll put I'm allergic,
because why else would you

00:10:55.130 --> 00:10:57.630
not want a kitten in your life?

00:10:57.630 --> 00:11:01.300
And for the default action,
I'll use a RaisedButton.

00:11:01.300 --> 00:11:03.564
And that one's
going to say Adopt.

00:11:03.564 --> 00:11:05.730
And you'll note, I'm just
giving these empty methods

00:11:05.730 --> 00:11:07.442
for their onPress properties.

00:11:07.442 --> 00:11:09.150
That way they're
enabled, but they're not

00:11:09.150 --> 00:11:11.250
going to actually do anything.

00:11:11.250 --> 00:11:13.800
OK, cool, so I've
got some buttons.

00:11:13.800 --> 00:11:16.570
They're not aligned right,
though, and the colors are off.

00:11:16.570 --> 00:11:18.500
Alignment's easy.

00:11:18.500 --> 00:11:22.310
I can fix that by putting the
Wrap widget in an Align widget

00:11:22.310 --> 00:11:26.480
and then setting its alignment
property to centerRight.

00:11:26.480 --> 00:11:28.850
And I'm also going to use
another SizedBox to get

00:11:28.850 --> 00:11:31.070
some space in between the
buttons and the description

00:11:31.070 --> 00:11:31.617
text.

00:11:31.617 --> 00:11:33.200
And while I'm in
here, let me actually

00:11:33.200 --> 00:11:35.660
use the Navigator to
dismiss the dialog when

00:11:35.660 --> 00:11:38.884
that first button is clicked,
the I'm Allergic button.

00:11:38.884 --> 00:11:41.300
This is another one of those
something of context methods,

00:11:41.300 --> 00:11:43.160
like I mentioned before.

00:11:43.160 --> 00:11:45.400
There we go.

00:11:45.400 --> 00:11:47.590
All right, my buttons
are in the right spot,

00:11:47.590 --> 00:11:52.500
and clicking dismisses
the dialog properly.

00:11:52.500 --> 00:11:54.249
Let's get Scooter up here.

00:11:54.249 --> 00:11:55.790
All right, at this
point, I just need

00:11:55.790 --> 00:11:57.248
to change the
styling of my buttons

00:11:57.248 --> 00:11:59.150
and I'm pretty much done.

00:11:59.150 --> 00:12:02.570
So I'll come back up to
the theme for my app,

00:12:02.570 --> 00:12:04.720
and I'll set the button
text theme to primary,

00:12:04.720 --> 00:12:05.820
which will be white text.

00:12:10.600 --> 00:12:12.394
Here we go.

00:12:12.394 --> 00:12:13.810
And then I can set
the buttonColor

00:12:13.810 --> 00:12:15.440
itself to purple as well.

00:12:19.090 --> 00:12:20.890
All right, one last
hot reload gets

00:12:20.890 --> 00:12:24.100
me a finished implementation.

00:12:24.100 --> 00:12:25.600
I've got all the
elements in place,

00:12:25.600 --> 00:12:27.220
and everything is
styled just like it

00:12:27.220 --> 00:12:28.820
should be to match the design.

00:12:28.820 --> 00:12:31.660
All right, after having spent
just a short time coding,

00:12:31.660 --> 00:12:33.280
you can now go back
to that designer,

00:12:33.280 --> 00:12:35.800
hand them builds of the
app for Android and iOS,

00:12:35.800 --> 00:12:39.227
and get feedback based on
actual code running on device.

00:12:39.227 --> 00:12:40.810
That's one of the
goals that Flutter's

00:12:40.810 --> 00:12:45.075
designed for-- getting from idea
to app as quickly as possible.

00:12:45.075 --> 00:12:46.450
That's it for
today, but if you'd

00:12:46.450 --> 00:12:47.590
like to learn more
about Flutter,

00:12:47.590 --> 00:12:49.329
we've got links to
guides, sample apps,

00:12:49.329 --> 00:12:51.370
and a bunch of other
resources in the description

00:12:51.370 --> 00:12:52.300
for this video.

00:12:52.300 --> 00:12:56.460
So check those out, and head
to Flutter.io to get started.

