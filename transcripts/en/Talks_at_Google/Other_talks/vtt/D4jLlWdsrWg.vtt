WEBVTT
Kind: captions
Language: en

00:00:03.430 --> 00:00:04.930
STEPHANY BELLOMO:
All right, so I'll

00:00:04.930 --> 00:00:08.360
start off with our
first question here.

00:00:08.360 --> 00:00:10.380
This is a little
bit of a softball.

00:00:10.380 --> 00:00:12.580
Hopefully this will be
a fun one to answer.

00:00:12.580 --> 00:00:16.170
And by the way, I
actually took some inputs

00:00:16.170 --> 00:00:18.620
from the panel members
on which questions

00:00:18.620 --> 00:00:20.650
they wanted to start
off with, so they

00:00:20.650 --> 00:00:23.600
do have their
preference in here.

00:00:23.600 --> 00:00:27.640
So the first one is, what
are your biggest release

00:00:27.640 --> 00:00:30.050
or operations nightmare stories?

00:00:30.050 --> 00:00:34.160
What was the cause, and how
did you recover from that?

00:00:34.160 --> 00:00:39.776
And we'll just start from
you Armen, and then go down.

00:00:39.776 --> 00:00:41.400
ARMEN GAPARANIAN:
The biggest nightmare

00:00:41.400 --> 00:00:44.900
is actually shipping
the wrong bits

00:00:44.900 --> 00:00:48.710
to the wrong users on
the wrong platform.

00:00:48.710 --> 00:00:52.830
Another one is getting
your systems compromised,

00:00:52.830 --> 00:00:55.220
and other people being
able to introduce malware

00:00:55.220 --> 00:00:59.070
into your shipping product,
and you not knowing about that.

00:00:59.070 --> 00:01:00.160
So those are--

00:01:00.160 --> 00:01:01.640
STEPHANY BELLOMO: And how
did you recover from them?

00:01:01.640 --> 00:01:03.090
Or did you change
your processes?

00:01:03.090 --> 00:01:04.390
Or did you make any--

00:01:04.390 --> 00:01:06.140
ARMEN GAPARANIAN: Have
we hit any of that?

00:01:06.140 --> 00:01:11.280
No, we have not hit it, but
that would be terrifying.

00:01:11.280 --> 00:01:14.480
And a lot of our
security analysis

00:01:14.480 --> 00:01:16.685
was around that-- preventing
that from happening.

00:01:16.685 --> 00:01:17.560
STEPHANY BELLOMO: OK.

00:01:17.560 --> 00:01:20.599
So you've made some changes.

00:01:20.599 --> 00:01:22.140
What kind of changes
did that prompt?

00:01:25.630 --> 00:01:30.010
ARMEN GAPARANIAN: Locking
down our networks.

00:01:30.010 --> 00:01:32.430
Even the rest of our
own organization,

00:01:32.430 --> 00:01:36.590
we're on our own separate VPN.

00:01:36.590 --> 00:01:39.980
Having different sets
of keys on the machines,

00:01:39.980 --> 00:01:42.340
depending on which
type of jobs are

00:01:42.340 --> 00:01:44.000
going to run on those machines.

00:01:44.000 --> 00:01:47.570
So let's say community members
or people who are still

00:01:47.570 --> 00:01:51.130
gaining their trust
can still trigger

00:01:51.130 --> 00:01:52.641
some jobs in our systems.

00:01:52.641 --> 00:01:55.265
We have something called the try
server, and on the try server,

00:01:55.265 --> 00:01:56.800
they can try their jobs.

00:01:56.800 --> 00:01:59.480
So separating our
systems according

00:01:59.480 --> 00:02:01.710
to what will be run
on those systems,

00:02:01.710 --> 00:02:06.036
and minimizing who has
access to those systems.

00:02:06.036 --> 00:02:06.910
STEPHANY BELLOMO: OK.

00:02:06.910 --> 00:02:07.709
Good answer.

00:02:07.709 --> 00:02:09.250
JOHN O'DUINN: That's
of the ones that

00:02:09.250 --> 00:02:10.970
used to keep me awake at night.

00:02:10.970 --> 00:02:12.517
You make all this
time and effort

00:02:12.517 --> 00:02:14.350
to make a really efficient
delivery process.

00:02:14.350 --> 00:02:17.000
If somebody manages to put
something bad in there,

00:02:17.000 --> 00:02:18.830
you've just made the
world's most efficient

00:02:18.830 --> 00:02:20.770
malware distribution system.

00:02:20.770 --> 00:02:24.300
And that's not the way you
want to end your career.

00:02:24.300 --> 00:02:25.720
That's not a good move.

00:02:25.720 --> 00:02:28.412
So it's something
we obsessed about.

00:02:28.412 --> 00:02:29.870
And there are
companies around here

00:02:29.870 --> 00:02:30.990
that have been hit by that.

00:02:30.990 --> 00:02:33.000
They've had to stand up
and fess up and say, yeah,

00:02:33.000 --> 00:02:34.485
our build infrastructure
was compromised,

00:02:34.485 --> 00:02:36.234
and we're sorry for
the last few releases.

00:02:36.234 --> 00:02:40.770
We think it's OK but-- that's
really embarrassing to be in.

00:02:40.770 --> 00:02:42.760
So it's something
we've fretted about.

00:02:42.760 --> 00:02:44.950
We've gone
super-ballistic any time

00:02:44.950 --> 00:02:47.220
we find a machine that we're
in any way suspect about,

00:02:47.220 --> 00:02:49.884
and we lock it down, and find
out it was a false alarm.

00:02:49.884 --> 00:02:52.550
So we've had a few false alarms,
but we've never had a real one.

00:02:56.710 --> 00:02:59.560
My other different
scenario is soon when

00:02:59.560 --> 00:03:01.705
I joined Mozilla-- it
hasn't happened to me yet

00:03:01.705 --> 00:03:03.330
at Hortonworks--
soon after I joined

00:03:03.330 --> 00:03:05.310
Mozilla, one of our
machines blew up.

00:03:05.310 --> 00:03:07.890
It turned out to be
the only machine that

00:03:07.890 --> 00:03:11.910
did this critical task, and
nobody knew to recreate it,

00:03:11.910 --> 00:03:13.602
and there was no back-up.

00:03:13.602 --> 00:03:15.060
And everyone was
standing around me

00:03:15.060 --> 00:03:18.106
going, well, you're
the build guy.

00:03:18.106 --> 00:03:20.858
Sorry, it's all trees closed,
no development, no ability

00:03:20.858 --> 00:03:21.980
to ship.

00:03:21.980 --> 00:03:25.220
So backups-- timely
backups, that you actually

00:03:25.220 --> 00:03:27.530
know the backups are working.

00:03:27.530 --> 00:03:29.340
So try practising the restore.

00:03:31.909 --> 00:03:33.950
PAT SHRIVER: Yeah, he just
reminded me, actually,

00:03:33.950 --> 00:03:35.319
of my worst nightmare.

00:03:35.319 --> 00:03:36.860
It had been so bad,
I'd forgotten it.

00:03:39.700 --> 00:03:43.440
I'm sitting with a
VP, and he's going,

00:03:43.440 --> 00:03:46.170
what do you mean you don't
know where the compiler is

00:03:46.170 --> 00:03:49.380
to be able to reproduce
code for an SNMP fix

00:03:49.380 --> 00:03:51.190
that we needed to
get immediately.

00:03:51.190 --> 00:03:53.730
So the value of backups-- we
had them, but we had to go

00:03:53.730 --> 00:03:56.830
find them in some
vault somewhere.

00:03:56.830 --> 00:03:59.500
And so we did recover from
that, and from that day forward,

00:03:59.500 --> 00:04:02.960
I always had systems
that I could reproduce.

00:04:02.960 --> 00:04:05.900
And this is from-- not Google,
but from a previous company--

00:04:05.900 --> 00:04:07.900
where I had to go back
and reproduce things five

00:04:07.900 --> 00:04:10.916
or six or seven years
old on a regular basis.

00:04:10.916 --> 00:04:12.290
Because there's
hackers out there

00:04:12.290 --> 00:04:15.430
that kept on trying to break--
Cisco was the company--

00:04:15.430 --> 00:04:18.314
and trying to break that
code on a constant basis.

00:04:21.050 --> 00:04:23.480
Thank you, John,
for that reminder.

00:04:23.480 --> 00:04:25.444
Never want to do that one again.

00:04:25.444 --> 00:04:27.360
The other one is actually
sitting and watching

00:04:27.360 --> 00:04:29.350
after a release goes
out and data corruption

00:04:29.350 --> 00:04:32.770
bugs happening, and this,
again, at a previous company.

00:04:32.770 --> 00:04:35.040
So I've been at Google for
only about eight months.

00:04:35.040 --> 00:04:37.750
And so I did hear some of the
horror stories of my peers,

00:04:37.750 --> 00:04:41.070
but I actually was asked
not to repeat some of them.

00:04:41.070 --> 00:04:44.330
But watching data
corruption happen,

00:04:44.330 --> 00:04:47.480
and having to go out
actually pull releases away

00:04:47.480 --> 00:04:49.820
so people would be downloading
any more-- so that they

00:04:49.820 --> 00:04:52.394
wouldn't be doing an upgrade
that would be failing for them.

00:04:52.394 --> 00:04:54.560
And what we found is we
weren't testing well enough.

00:04:54.560 --> 00:04:57.630
We needed to really do a
deep dive on our testing

00:04:57.630 --> 00:05:00.360
and make sure that we were
testing as our customers were.

00:05:00.360 --> 00:05:01.800
So that was a huge
lesson learned.

00:05:05.730 --> 00:05:07.879
PETER RIGBY: Mine is--
so we talk about freedom,

00:05:07.879 --> 00:05:10.170
having a lot of freedom in
terms of what you're putting

00:05:10.170 --> 00:05:13.500
into the product, military
software-- some of the people

00:05:13.500 --> 00:05:17.380
I was talking to, they're
developing one set of features,

00:05:17.380 --> 00:05:19.720
and then all of a sudden,
they have a general coming

00:05:19.720 --> 00:05:21.386
in and saying, this
is the thing that we

00:05:21.386 --> 00:05:23.980
need in the next
release, and it has

00:05:23.980 --> 00:05:26.140
to go operational
in Afghanistan.

00:05:26.140 --> 00:05:27.670
And you're like, what?

00:05:27.670 --> 00:05:31.230
So not having that
much control over what

00:05:31.230 --> 00:05:33.040
features you're
actually releasing

00:05:33.040 --> 00:05:36.490
can be pretty terrifying.

00:05:36.490 --> 00:05:38.240
LIMING ZHU: I'm a
researcher, so I just

00:05:38.240 --> 00:05:40.820
want to ask another general
question before this all

00:05:40.820 --> 00:05:41.600
finishes up.

00:05:41.600 --> 00:05:46.160
Basically, what are
the research questions

00:05:46.160 --> 00:05:47.570
researchers can do to help?

00:05:47.570 --> 00:05:51.040
I see a lot of-- it's
about risk management.

00:05:51.040 --> 00:05:56.430
It's about cost drivers, and
some of the things we do.

00:05:56.430 --> 00:06:00.680
But in your mind, what's
the top one or two things

00:06:00.680 --> 00:06:02.840
that over long
term-- researchers

00:06:02.840 --> 00:06:05.260
do research quite
slowly sometimes.

00:06:05.260 --> 00:06:07.920
It's not like we're going
to have a solution tomorrow.

00:06:07.920 --> 00:06:12.650
But looking forward, what
needs to be researched?

00:06:12.650 --> 00:06:13.440
Thank you.

00:06:13.440 --> 00:06:17.260
PETER RIGBY: So also being a
researcher, one of the things

00:06:17.260 --> 00:06:20.690
that I'm really interested in
is this whole rush-to-release

00:06:20.690 --> 00:06:26.060
process, which is-- if you
have a year-long release,

00:06:26.060 --> 00:06:29.300
people are going to want to push
their stuff into that release

00:06:29.300 --> 00:06:31.376
whether it's ready or
not, whereas if you have

00:06:31.376 --> 00:06:32.750
a week-long release,
you can say,

00:06:32.750 --> 00:06:34.640
just get on the next train.

00:06:34.640 --> 00:06:37.530
One thing that we're trying to
do is actually quantify that.

00:06:37.530 --> 00:06:39.790
So intuitively, I think
everyone agrees with that.

00:06:39.790 --> 00:06:42.740
But what we'd like to do is
show that the features that

00:06:42.740 --> 00:06:45.440
are rushed in, do
they actually produce

00:06:45.440 --> 00:06:47.580
more customer reported defects?

00:06:47.580 --> 00:06:51.940
So actually tying changes
that are done really

00:06:51.940 --> 00:06:53.440
quickly and pushed
in very quickly--

00:06:53.440 --> 00:06:55.670
do those end up having
more customer problems

00:06:55.670 --> 00:07:00.100
than the ones that are done
in a more normal, stable way

00:07:00.100 --> 00:07:01.115
of pushing new features?

00:07:03.792 --> 00:07:05.750
JOHN O'DUINN: I have a
slightly different slant

00:07:05.750 --> 00:07:08.300
on the same one,
which is-- I think

00:07:08.300 --> 00:07:10.610
if I could ask for
anything with a magic wand,

00:07:10.610 --> 00:07:13.950
I'd ask for tools that would
actually help us do our job.

00:07:13.950 --> 00:07:17.180
So specifically, when I think
of recurring pain points,

00:07:17.180 --> 00:07:21.560
one is manually-maintained
build dependencies

00:07:21.560 --> 00:07:24.360
that are accurate at
some point in history,

00:07:24.360 --> 00:07:27.995
but quickly become not, and then
becomes everyone's recurring

00:07:27.995 --> 00:07:29.120
pain to try and figure out.

00:07:29.120 --> 00:07:31.510
So you end up overcompensating
and doing full [INAUDIBLE]

00:07:31.510 --> 00:07:33.127
builds just to be sure.

00:07:33.127 --> 00:07:35.210
Because you don't trust
the dependencies to always

00:07:35.210 --> 00:07:36.100
be accurate.

00:07:36.100 --> 00:07:36.600
One.

00:07:36.600 --> 00:07:40.906
Two is not knowing which
test out of gazillions

00:07:40.906 --> 00:07:42.280
of hours of tests
actually should

00:07:42.280 --> 00:07:44.400
be run for this code change.

00:07:44.400 --> 00:07:46.150
So you end up, again,
overcompensating out

00:07:46.150 --> 00:07:47.740
of paranoia and
run this whole set.

00:07:47.740 --> 00:07:50.020
Or you try and hand
pick something,

00:07:50.020 --> 00:07:51.800
but it's a scary process.

00:07:51.800 --> 00:07:54.540
And that's because we don't
have tools that would tell us,

00:07:54.540 --> 00:07:57.680
hey, this piece of code--
and some code coverage tools

00:07:57.680 --> 00:07:59.620
sort of help-- but
this piece of code

00:07:59.620 --> 00:08:05.284
really is being impact--
these tests would check that.

00:08:05.284 --> 00:08:06.950
I think better than
that would be great.

00:08:06.950 --> 00:08:07.490
PAT SHRIVER: Absolutely.

00:08:07.490 --> 00:08:07.800
+1.

00:08:07.800 --> 00:08:09.091
That's what I was going to say.

00:08:12.240 --> 00:08:14.080
Source-to-test is
sometimes what it's

00:08:14.080 --> 00:08:16.580
called, or test deminification.

00:08:16.580 --> 00:08:18.240
And I know Google
does it really well,

00:08:18.240 --> 00:08:20.799
but they've got a full
structure with the build system

00:08:20.799 --> 00:08:22.340
to be able to know
your dependencies.

00:08:22.340 --> 00:08:24.320
But that's not true
for other companies.

00:08:24.320 --> 00:08:26.640
So that would be awesome
to be able to figure out

00:08:26.640 --> 00:08:29.590
an awesome source-to-test--
whenever you want to call it--

00:08:29.590 --> 00:08:32.382
but how do I know to run the
right tests at the right time.

00:08:32.382 --> 00:08:33.840
ARMEN GAPARANIAN:
One question I've

00:08:33.840 --> 00:08:35.410
been having for
the longest time--

00:08:35.410 --> 00:08:38.880
I'm probably gonna be
going and start asking it,

00:08:38.880 --> 00:08:42.390
is at Mozilla we run
tests on Windows 7,

00:08:42.390 --> 00:08:47.920
Windows XP, Windows
8, 10.6, 10.7 10.8,

00:08:47.920 --> 00:08:52.900
Ubuntu 12.04, Ubuntu 64-bit.

00:08:52.900 --> 00:08:56.310
What is the right set of
platforms that you actually

00:08:56.310 --> 00:09:00.120
need to be testing for
your code to be good?

00:09:00.120 --> 00:09:03.130
For instance, I don't
want to be disrespectful,

00:09:03.130 --> 00:09:06.320
Linux user base
is not that large.

00:09:06.320 --> 00:09:10.690
Why do we still run
32-bit builds of Ubuntu?

00:09:10.690 --> 00:09:12.870
Or some people
say, oh you've got

00:09:12.870 --> 00:09:15.180
to run many versions
of Mac, because we

00:09:15.180 --> 00:09:16.380
have many developers there.

00:09:16.380 --> 00:09:19.046
However, in that case, we
should be running tests

00:09:19.046 --> 00:09:20.420
on Windows Vista,
because there's

00:09:20.420 --> 00:09:23.840
more users on Windows
Vista than Mac users.

00:09:23.840 --> 00:09:27.220
So a way to analyze that and
figure out what is useful

00:09:27.220 --> 00:09:29.780
and what it's not.

00:09:29.780 --> 00:09:33.540
CHUCK ROSSI: This is a question
more for the practitioners

00:09:33.540 --> 00:09:34.940
and specifically for Google.

00:09:34.940 --> 00:09:37.520
Maybe you can start first.

00:09:37.520 --> 00:09:39.990
PAT SHRIVER: Help
me, Google folks.

00:09:39.990 --> 00:09:42.362
CHUCK ROSSI: What are you
most proud about with your

00:09:42.362 --> 00:09:43.570
build and release system now?

00:09:43.570 --> 00:09:45.960
If you had to point to one
thing, the thing that you feel

00:09:45.960 --> 00:09:48.251
like you do really well, or
some tool, or some process,

00:09:48.251 --> 00:09:52.100
or some part of the system
that is the thing you're

00:09:52.100 --> 00:09:53.600
most proud of, or
the thing you want

00:09:53.600 --> 00:09:55.099
to talk about the
most, or the thing

00:09:55.099 --> 00:09:57.537
you want to see replicated
in other places?

00:09:57.537 --> 00:09:59.370
PAT SHRIVER: Actually,
that one's real easy.

00:09:59.370 --> 00:10:01.370
And the thing I would
have loved to have had

00:10:01.370 --> 00:10:04.050
is-- we call them
blaze and tap here,

00:10:04.050 --> 00:10:05.700
but it's basically
the build system

00:10:05.700 --> 00:10:08.910
and the continuous
integration system.

00:10:08.910 --> 00:10:13.930
65 thousand lines of
code of test run per day

00:10:13.930 --> 00:10:16.430
are just amazing,
against every check

00:10:16.430 --> 00:10:19.290
in that happens-- pre-check
in, post-check in--

00:10:19.290 --> 00:10:21.090
and it's at scale.

00:10:27.556 --> 00:10:28.680
My memory doesn't serve me.

00:10:28.680 --> 00:10:31.960
I can pull up the stats, but
that's what's amazing here.

00:10:31.960 --> 00:10:34.920
And so being so
new, and coming in

00:10:34.920 --> 00:10:37.140
and hearing about
it from the outside,

00:10:37.140 --> 00:10:40.850
but seeing it in practice--
yeah, there's warts.

00:10:40.850 --> 00:10:41.710
Nothing's perfect.

00:10:41.710 --> 00:10:43.512
But it's just amazing.

00:10:43.512 --> 00:10:47.460
CHUCK ROSSI: And you'll open
source that soon, right?

00:10:47.460 --> 00:10:51.087
PAT SHRIVER: I'm going to
take the fifth on that one.

00:10:51.087 --> 00:10:52.920
JOHN O'DUINN: If I had
to think of anything,

00:10:52.920 --> 00:10:55.036
I'd say it's in the
context of open source.

00:10:55.036 --> 00:10:57.410
I've done release engineering
in a lot of non-open source

00:10:57.410 --> 00:11:00.100
companies, and Mozilla
and Hortonworks

00:11:00.100 --> 00:11:02.770
are the two that I've been
in that are open source.

00:11:02.770 --> 00:11:05.650
I think it's very interesting
to show a couple things-- one,

00:11:05.650 --> 00:11:11.340
that open source does not
mean half-baked or amateur.

00:11:11.340 --> 00:11:14.400
It can actually mean
state of the art.

00:11:14.400 --> 00:11:19.514
And proving that, and proving
that in a way that's profitable

00:11:19.514 --> 00:11:21.680
and that actually attracts
attention, and also shows

00:11:21.680 --> 00:11:23.388
the way, like hey, if
you do it this way,

00:11:23.388 --> 00:11:25.230
it could actually
make your life better.

00:11:25.230 --> 00:11:28.240
So Mozilla was
pretty cool for that.

00:11:28.240 --> 00:11:30.650
Hortonworks is also
very cool for that.

00:11:30.650 --> 00:11:33.840
And they're non-trivial
engineering problems.

00:11:33.840 --> 00:11:36.330
Closed source companies
have something simple,

00:11:36.330 --> 00:11:39.060
like you know the
permission of all the people

00:11:39.060 --> 00:11:40.580
who connect into your system.

00:11:40.580 --> 00:11:43.086
What if it's someone
you've never met before?

00:11:43.086 --> 00:11:45.460
Are they really a good person
trying to give you a patch,

00:11:45.460 --> 00:11:46.918
or are they some
evil person trying

00:11:46.918 --> 00:11:48.270
to do something nefarious?

00:11:48.270 --> 00:11:50.070
And how do you know
what to do there?

00:11:50.070 --> 00:11:53.280
So I think those are really
complex problems, and kind

00:11:53.280 --> 00:11:54.609
of cool.

00:11:54.609 --> 00:11:56.150
BORIS DEBIC: There's
something I want

00:11:56.150 --> 00:12:00.830
to add since I'm a Googler, and
I can answer Chuck's question.

00:12:00.830 --> 00:12:05.620
One thing that may be too
late for the bigger companies,

00:12:05.620 --> 00:12:07.710
but there's going to be
people watching here who

00:12:07.710 --> 00:12:08.920
are in start-ups.

00:12:08.920 --> 00:12:12.660
There's a lot of economic
activity right now starting up

00:12:12.660 --> 00:12:15.760
in Silicon Valley, in the east
coast, Texas, you name it,

00:12:15.760 --> 00:12:17.830
Europe.

00:12:17.830 --> 00:12:23.380
You probably want to start
thinking about open sourcing

00:12:23.380 --> 00:12:26.630
things and using open
source, meaning, I guess,

00:12:26.630 --> 00:12:30.890
interacting with open source,
from the get go of the company.

00:12:30.890 --> 00:12:35.700
Because if you start building
your own tools with open source

00:12:35.700 --> 00:12:39.130
standards in mind-- like
not throwing stupid comments

00:12:39.130 --> 00:12:44.360
in the codes, which really
lack-- your manager in five

00:12:44.360 --> 00:12:46.720
years will come and say, hey
we should open source this.

00:12:46.720 --> 00:12:49.330
And then you're-- yes, but
then we need to rewrite this

00:12:49.330 --> 00:12:51.090
and maybe make it nicer.

00:12:51.090 --> 00:12:54.040
So if you actually adhere
to open source standards

00:12:54.040 --> 00:12:57.322
from the beginning, it will
make that transition easier.

00:12:57.322 --> 00:12:58.780
When you make that
transition, when

00:12:58.780 --> 00:13:02.380
you open a tool to the
open source community,

00:13:02.380 --> 00:13:05.010
you will get--
you know, you guys

00:13:05.010 --> 00:13:09.460
have opened some of your stuff--
you get immediate response.

00:13:09.460 --> 00:13:10.790
You get bug fixes.

00:13:10.790 --> 00:13:13.810
You get new features for free.

00:13:13.810 --> 00:13:16.820
I mean we're getting the
same [INAUDIBLE] Androids.

00:13:16.820 --> 00:13:18.660
You're probably
seeing the same thing.

00:13:18.660 --> 00:13:21.900
And others in the room
will be doing the same.

00:13:21.900 --> 00:13:25.620
So the takeaway
would be, if you're

00:13:25.620 --> 00:13:27.500
a company that is
starting, don't

00:13:27.500 --> 00:13:30.200
make the mistake
that Google made.

00:13:30.200 --> 00:13:34.780
We built an incredibly
scalable infrastructure,

00:13:34.780 --> 00:13:39.950
but also incredibly
baroque, so to speak.

00:13:39.950 --> 00:13:42.510
And there's a lot of
fixing going on right now.

00:13:42.510 --> 00:13:43.880
So don't make that mistake.

00:13:43.880 --> 00:13:48.357
Start open source
minded from the get go.

00:13:48.357 --> 00:13:49.690
PETER RIGBY: I'll answer it too.

00:13:49.690 --> 00:13:53.130
So in my Ph.D., I looked at
peer review and open source

00:13:53.130 --> 00:13:56.810
projects, and so I interviewed
a lot of Linux developers.

00:13:56.810 --> 00:13:59.630
And they use almost
no automated tests,

00:13:59.630 --> 00:14:02.730
but they have a really, really
strong peer review process.

00:14:02.730 --> 00:14:05.450
So their commit
logs are massive.

00:14:05.450 --> 00:14:07.530
It describes exactly
why everything

00:14:07.530 --> 00:14:10.780
is changing, which machines
it's been, who else

00:14:10.780 --> 00:14:12.864
has tried it, all
these other things.

00:14:12.864 --> 00:14:14.280
And Linus Torvalds
will come along

00:14:14.280 --> 00:14:17.571
and say, it's not that
this feature isn't good,

00:14:17.571 --> 00:14:19.820
it's just that not enough
people have talked about it.

00:14:19.820 --> 00:14:24.280
So it's hard to test the kernel,
I think, is one of the reasons,

00:14:24.280 --> 00:14:27.940
but you can get similar
results by having

00:14:27.940 --> 00:14:31.690
this trust-- this triangle
of trust-- where you really

00:14:31.690 --> 00:14:33.360
review everything very tightly.

00:14:33.360 --> 00:14:35.980
And I think that ties
into your karma thing too.

00:14:35.980 --> 00:14:38.600
I mean, the pyramid of
trust, with Linux and then

00:14:38.600 --> 00:14:42.480
the lieutenants,
and so on, it also

00:14:42.480 --> 00:14:45.022
encourages good quality code.

00:14:45.022 --> 00:14:46.480
NIRMAM SANDESARA:
A few people have

00:14:46.480 --> 00:14:49.270
talked about we have
automation and tools

00:14:49.270 --> 00:14:53.090
were the other person can go out
and push things to production.

00:14:53.090 --> 00:14:55.660
So I have been
going-- I for Twitter,

00:14:55.660 --> 00:14:58.810
and there is a culture
where, for PCI compliancy,

00:14:58.810 --> 00:15:00.890
developers should
not have access

00:15:00.890 --> 00:15:03.090
to products and boxes
and things like that.

00:15:03.090 --> 00:15:06.530
So I wanted to get your
thoughts on how-- what release

00:15:06.530 --> 00:15:09.490
engineers, what's the
role of a release engineer

00:15:09.490 --> 00:15:14.276
when developers just have
access to production boxes?

00:15:14.276 --> 00:15:15.900
CHUCK ROSSI: This
gets in a tricky area

00:15:15.900 --> 00:15:18.577
because SAS and Sox
compliance, and there's

00:15:18.577 --> 00:15:19.410
all sorts of things.

00:15:19.410 --> 00:15:21.493
What I understand from it,
and you can't take this

00:15:21.493 --> 00:15:26.310
as coming from anyone who--
not a lawyer-- the way

00:15:26.310 --> 00:15:31.150
we deal with it is through
rigorous auditing and logging.

00:15:31.150 --> 00:15:33.570
So the Netflix
model, where you're

00:15:33.570 --> 00:15:35.160
all given the keys
to the kingdom

00:15:35.160 --> 00:15:40.070
and can go about your business
is great, but in my experience,

00:15:40.070 --> 00:15:43.400
it has pacified the auditors
if when they come in,

00:15:43.400 --> 00:15:47.050
we show them exactly how we
log, how the code gets in,

00:15:47.050 --> 00:15:53.090
all the hooks in place, and
the hooks are all secured.

00:15:53.090 --> 00:15:56.360
We can log every path of
everything that went in.

00:15:56.360 --> 00:15:58.890
We can log who touched
what production machine.

00:15:58.890 --> 00:16:01.530
So the access is all there,
but it is strictly logged.

00:16:01.530 --> 00:16:04.630
And the lodging is
scrutinized and locked down.

00:16:04.630 --> 00:16:06.220
We actually did--
and we publicized

00:16:06.220 --> 00:16:09.250
this-- we did a red team event.

00:16:09.250 --> 00:16:13.250
Our security infrastructure team
did a red team event against us

00:16:13.250 --> 00:16:14.370
that I was part of.

00:16:14.370 --> 00:16:18.910
And what that means is we
actively got grey hat people

00:16:18.910 --> 00:16:22.110
in a secure building
in our campus who,

00:16:22.110 --> 00:16:26.160
through proxies through China,
attacked our infrastructure

00:16:26.160 --> 00:16:29.840
by tricking a developer to
click on a link in a mail,

00:16:29.840 --> 00:16:33.120
which gave them access to a box.

00:16:33.120 --> 00:16:38.990
And they did this under our gaze
while we watched them do this.

00:16:38.990 --> 00:16:43.100
And we were able to basically
see, did our stuff work?

00:16:43.100 --> 00:16:44.630
Where did it fall down?

00:16:44.630 --> 00:16:47.780
Where did the grey
hat get through?

00:16:47.780 --> 00:16:49.660
And after that, we
did the full audit

00:16:49.660 --> 00:16:52.270
and understood where we
had to harden things up.

00:16:52.270 --> 00:16:55.820
So that's the extent to
which we care about this,

00:16:55.820 --> 00:16:58.400
and we tested it, which
not a lot of companies

00:16:58.400 --> 00:17:00.415
would have the cajones to do.

00:17:00.415 --> 00:17:03.040
It is actually kind of scary to
watch some guy go through China

00:17:03.040 --> 00:17:07.579
proxies to penetrate your whole
system, which was interesting.

00:17:07.579 --> 00:17:09.329
JOHN O'DUINN: To take
the Mozilla example,

00:17:09.329 --> 00:17:11.609
the scenario we were
concerned about there

00:17:11.609 --> 00:17:15.430
was that we didn't want a
developer-- the nefarious

00:17:15.430 --> 00:17:16.526
activity was one thing.

00:17:16.526 --> 00:17:18.150
The other possibility
would be somebody

00:17:18.150 --> 00:17:19.774
who's just trying to
make things better

00:17:19.774 --> 00:17:22.400
by installing their locally
modified version of a compiler,

00:17:22.400 --> 00:17:24.560
because there's a
slightly better optimizing

00:17:24.560 --> 00:17:26.470
with a new version,
or it's a beta version

00:17:26.470 --> 00:17:28.310
of the next compiler
or something.

00:17:28.310 --> 00:17:30.700
And then we would accidentally
use that in production

00:17:30.700 --> 00:17:33.254
to ship a production
release out.

00:17:33.254 --> 00:17:34.920
That was actually an
operational concern

00:17:34.920 --> 00:17:39.760
we had because we had
cleaned up a mess from that.

00:17:39.760 --> 00:17:43.360
So what we did was we
said, OK, lock down access

00:17:43.360 --> 00:17:45.410
was part of how we dealt
with the security part.

00:17:45.410 --> 00:17:46.826
And then also if
somebody actually

00:17:46.826 --> 00:17:49.530
wanted to get one of those
machines, we had a way to route

00:17:49.530 --> 00:17:51.514
that you could get
access to that machine.

00:17:51.514 --> 00:17:53.180
And then when you
were finished with it,

00:17:53.180 --> 00:17:55.430
we would reset-- total
reformat, because it

00:17:55.430 --> 00:18:00.430
was a human free reimage
back into production job.

00:18:00.430 --> 00:18:03.212
Slightly different use case.

00:18:03.212 --> 00:18:04.670
LIMING ZHU: I don't
have an answer,

00:18:04.670 --> 00:18:07.850
but I just want to
clarify something

00:18:07.850 --> 00:18:09.330
we get a bit confused.

00:18:09.330 --> 00:18:11.390
Today we talk a lot
about release engineering

00:18:11.390 --> 00:18:14.200
being helping developers.

00:18:14.200 --> 00:18:17.270
So the operation,
the operators, what's

00:18:17.270 --> 00:18:20.140
the relationship nowadays?

00:18:20.140 --> 00:18:23.650
We heard about configuration
management and release

00:18:23.650 --> 00:18:27.360
engineering have
interesting interactions,

00:18:27.360 --> 00:18:32.610
but what do release
engineers say operators--

00:18:32.610 --> 00:18:36.360
The operation guy, the
traditional IT operators?

00:18:36.360 --> 00:18:38.740
What's their role in all this?

00:18:38.740 --> 00:18:41.950
JOHN O'DUINN: I think
there's a lot of overlap.

00:18:41.950 --> 00:18:44.210
DevOps is a popular term
these days-- everything

00:18:44.210 --> 00:18:46.860
from what the developer is
doing through to an operations

00:18:46.860 --> 00:18:48.860
person, and
everything in between.

00:18:48.860 --> 00:18:51.240
I think you can change
the label on the front,

00:18:51.240 --> 00:18:53.180
but the actual
nature of the work

00:18:53.180 --> 00:18:57.760
in terms of understanding
one population figuring out

00:18:57.760 --> 00:18:59.860
how to build a pipeline
and then figure out

00:18:59.860 --> 00:19:02.570
this other operational
side, and be able

00:19:02.570 --> 00:19:07.070
communicate between
these different groups,

00:19:07.070 --> 00:19:10.130
is what we would call
release engineering.

00:19:13.190 --> 00:19:15.604
It's not a great answer,
but it's the best I have.

00:19:15.604 --> 00:19:17.020
LIMING ZHU: I just
feel when we go

00:19:17.020 --> 00:19:20.320
to operators, some
of the DevOps meet up

00:19:20.320 --> 00:19:22.980
with a lot of operators
in it, the culture there

00:19:22.980 --> 00:19:25.470
is quite different
from developers.

00:19:25.470 --> 00:19:30.650
They are more experienced
sharing, level-up

00:19:30.650 --> 00:19:34.780
like Kung-Fu masters, and
they automate themself out

00:19:34.780 --> 00:19:35.310
of the job.

00:19:35.310 --> 00:19:39.890
But on the other hand, they seem
to consider human judgment--

00:19:39.890 --> 00:19:44.320
experiences, really-- much more
important than [INAUDIBLE].

00:19:44.320 --> 00:19:49.020
Just an observation.

00:19:49.020 --> 00:19:51.880
GREGORY GROSSMEIER: My name is
Greg from Wikimedia Foundation.

00:19:51.880 --> 00:19:54.920
Back to the open source thing,
obviously-- because we're

00:19:54.920 --> 00:19:57.270
one of the largest sites that
is completely open source,

00:19:57.270 --> 00:20:00.250
I think I can count
the number of packages

00:20:00.250 --> 00:20:02.970
that we run in
production that aren't

00:20:02.970 --> 00:20:05.620
open source on three fingers.

00:20:05.620 --> 00:20:06.870
I think it's less than a hand.

00:20:06.870 --> 00:20:08.860
I think it's three things.

00:20:08.860 --> 00:20:12.460
MaxMind database
being one of them.

00:20:12.460 --> 00:20:15.760
For us, we have
a large community

00:20:15.760 --> 00:20:19.710
of contributors contributing to
our core product-- Media Wiki

00:20:19.710 --> 00:20:23.460
software that powers
all of our sites, which

00:20:23.460 --> 00:20:26.060
is slightly different
than some other use cases

00:20:26.060 --> 00:20:29.040
more similar to-- I can't
point to you anymore,

00:20:29.040 --> 00:20:33.590
to your use case of Firefox.

00:20:33.590 --> 00:20:36.310
You have open source
contributors there.

00:20:36.310 --> 00:20:42.580
What have you learned, and what
changes at that kind of scale

00:20:42.580 --> 00:20:46.600
do you make when you want to
do fast iterative development

00:20:46.600 --> 00:20:50.880
and deployment, when you have
a larger community than just

00:20:50.880 --> 00:20:53.010
people you pay in house?

00:20:53.010 --> 00:20:54.510
What are the concerns
and trade-offs

00:20:54.510 --> 00:20:57.926
that you've made throughout
the years in that respect?

00:20:57.926 --> 00:20:59.300
JOHN O'DUINN: The
short question,

00:20:59.300 --> 00:21:02.907
rephrase the question was, what
kind of operational concerns

00:21:02.907 --> 00:21:04.615
are there, what kind
of operation changes

00:21:04.615 --> 00:21:06.455
do you have to make, if
some of the people who

00:21:06.455 --> 00:21:08.913
are going to be making code
changes and not in your employ?

00:21:12.260 --> 00:21:15.720
And then what?

00:21:15.720 --> 00:21:18.590
There is a trust--
actually trust or karma,

00:21:18.590 --> 00:21:21.980
if you want to use the
karma word-- at least all

00:21:21.980 --> 00:21:26.610
the open source projects
I've been involved in,

00:21:26.610 --> 00:21:28.560
you can make a
proposal for a change,

00:21:28.560 --> 00:21:32.050
but you can't just come
along and start making,

00:21:32.050 --> 00:21:33.740
here, I know how to
rewrite a kernel.

00:21:33.740 --> 00:21:34.060
Come on.

00:21:34.060 --> 00:21:34.480
Get out of the way.

00:21:34.480 --> 00:21:35.190
Let me do it.

00:21:35.190 --> 00:21:35.940
You don't do that.

00:21:35.940 --> 00:21:37.890
You can propose
a patch in a bug,

00:21:37.890 --> 00:21:39.513
and you have someone else
who's been around for a while

00:21:39.513 --> 00:21:40.670
and has built a reputation.

00:21:40.670 --> 00:21:42.382
So you have that
trust hierarchy.

00:21:42.382 --> 00:21:44.590
So the initial person who
comes along out of the blue

00:21:44.590 --> 00:21:47.130
does not have commit privileges.

00:21:47.130 --> 00:21:51.480
And you earn those
stripes over time.

00:21:51.480 --> 00:21:53.740
And once you
actually have enough

00:21:53.740 --> 00:21:57.230
commit privilege
stripes earned, then you

00:21:57.230 --> 00:22:00.330
could actually do reviews of
someone else and LAN those.

00:22:00.330 --> 00:22:04.000
But you have other
super-reviewer super stripes,

00:22:04.000 --> 00:22:06.530
if you like.

00:22:06.530 --> 00:22:09.660
I think that's
one human process.

00:22:09.660 --> 00:22:11.930
And that is enforced
for employees as well

00:22:11.930 --> 00:22:15.810
as non-employees equally.

00:22:15.810 --> 00:22:17.750
Two, is it does
totally change around

00:22:17.750 --> 00:22:20.140
how you handle-- where
do you put your source

00:22:20.140 --> 00:22:20.990
code repository?

00:22:20.990 --> 00:22:23.230
Do you lock it behind VPN, or
do you put it out in the public?

00:22:23.230 --> 00:22:25.690
Or how do you trust if it's
accessible from the outside?

00:22:25.690 --> 00:22:29.340
And there's some
things that would

00:22:29.340 --> 00:22:31.040
make a lot of closed
source companies

00:22:31.040 --> 00:22:35.159
nervous, in terms of where
you place critical machinery.

00:22:35.159 --> 00:22:37.200
And then you have to be
super-precise and careful

00:22:37.200 --> 00:22:39.290
with those machines because
you care about them.

00:22:39.290 --> 00:22:41.867
So where is your bug database?

00:22:41.867 --> 00:22:44.200
What do you mean it's accessible
from the outside world?

00:22:44.200 --> 00:22:46.064
Where is your source
code repository?

00:22:46.064 --> 00:22:47.480
What do you mean,
it's accessible?

00:22:47.480 --> 00:22:49.076
So there's things
like that you have

00:22:49.076 --> 00:22:51.290
to do that are probably
unnatural for a closed source

00:22:51.290 --> 00:22:55.190
company, so you have
to be super safe.

00:22:55.190 --> 00:22:57.002
Those are the operational
tooling things.

00:22:57.002 --> 00:22:58.960
I think the human culture
thing about reviews--

00:22:58.960 --> 00:23:01.569
I would recommend, even if
you're not in an open source

00:23:01.569 --> 00:23:03.860
environment, you should other
people look at your code.

00:23:03.860 --> 00:23:05.424
People make typos, right?

00:23:05.424 --> 00:23:07.090
And you'd be amazed
the amount companies

00:23:07.090 --> 00:23:09.092
I've worked with that
didn't have that.

00:23:09.092 --> 00:23:11.050
They just-- Well, we all
know what we're doing.

00:23:11.050 --> 00:23:13.052
We never make mistakes.

00:23:13.052 --> 00:23:14.760
GREGORY GROSSMEIER:
It's a hard question,

00:23:14.760 --> 00:23:19.770
because we also have the
dual-- so my title is

00:23:19.770 --> 00:23:22.550
release manager, which
kind of confuses people,

00:23:22.550 --> 00:23:25.600
because I deal mostly
with the deployments.

00:23:25.600 --> 00:23:28.500
And we also have the release
of Media Wiki, the software,

00:23:28.500 --> 00:23:31.050
that tarballs every six
months, which I don't really

00:23:31.050 --> 00:23:33.730
care about, because I
don't run those things.

00:23:33.730 --> 00:23:37.250
I run the stuff that
gets updated every week.

00:23:37.250 --> 00:23:39.240
So there's competing
interests there

00:23:39.240 --> 00:23:43.130
with developers that are
wanting to maintain, god forbid,

00:23:43.130 --> 00:23:46.800
an Oracle database back end.

00:23:46.800 --> 00:23:50.230
Again, I don't care
about it, but how

00:23:50.230 --> 00:23:52.646
does that affect our QA and
testing and beta cluster,

00:23:52.646 --> 00:23:53.770
and all that kind of stuff?

00:23:56.464 --> 00:23:58.630
I don't know if there's any
other organizations that

00:23:58.630 --> 00:24:02.410
have this similar
type of pullings going

00:24:02.410 --> 00:24:05.360
on with a tarball that
goes out to third parties,

00:24:05.360 --> 00:24:08.480
and then the same code
goes out to production,

00:24:08.480 --> 00:24:10.230
and that kind of stuff.

00:24:10.230 --> 00:24:11.800
JOHN O'DUINN: Yeah.

00:24:11.800 --> 00:24:15.170
Mozilla would ship out
to-- same source change set

00:24:15.170 --> 00:24:16.770
would go to desktop
browsers, would

00:24:16.770 --> 00:24:21.020
go to separate build
Android browser,

00:24:21.020 --> 00:24:25.896
separate build to
handset Firefox OS.

00:24:25.896 --> 00:24:27.770
Hortonworks is doing a
similar sort of thing,

00:24:27.770 --> 00:24:29.260
in terms of taking
in code changes

00:24:29.260 --> 00:24:31.134
and delivering them to
different places, too.

00:24:33.330 --> 00:24:33.940
It's tricky.

00:24:33.940 --> 00:24:39.382
It's where release engineering
is a tricky, fun thing.

00:24:39.382 --> 00:24:41.840
SHANE MCINTOSH: We've heard a
lot about the different roles

00:24:41.840 --> 00:24:46.540
that release engineering
plays in projects and teams

00:24:46.540 --> 00:24:47.420
and so on.

00:24:47.420 --> 00:24:50.980
I'm wondering where you
think-- so the practitioners

00:24:50.980 --> 00:24:53.390
in the group-- where you
think release engineering

00:24:53.390 --> 00:24:56.360
provides the most value
to an organization.

00:24:56.360 --> 00:24:57.590
Is it in tooling?

00:24:57.590 --> 00:25:00.870
Is it in the whole pipeline?

00:25:00.870 --> 00:25:04.950
CHUCK ROSSI: In my view
it's the-- the word

00:25:04.950 --> 00:25:06.305
I like is the adult supervision.

00:25:10.172 --> 00:25:11.880
If you're in the
management of a company,

00:25:11.880 --> 00:25:14.740
you want to have some
belief that there's

00:25:14.740 --> 00:25:19.742
somebody or something
between the chaos that

00:25:19.742 --> 00:25:22.075
is your development environment
and the poor suckers who

00:25:22.075 --> 00:25:25.000
are going to get your product.

00:25:25.000 --> 00:25:27.914
So I think the value that I've
provided in the many release

00:25:27.914 --> 00:25:29.330
engineering jobs
I've had out here

00:25:29.330 --> 00:25:31.740
in the valley is
that that management

00:25:31.740 --> 00:25:35.730
team, that executive, that
CEO, knows that, OK, there's

00:25:35.730 --> 00:25:40.425
that grumpy little guy called
Chucker who's going to manage

00:25:40.425 --> 00:25:43.460
this for me and things
aren't going to go wrong.

00:25:43.460 --> 00:25:45.070
Or if they are,
we're going to be

00:25:45.070 --> 00:25:47.640
able to fix it and
react and get better.

00:25:47.640 --> 00:25:51.430
So I think the fact that-- we
sit at this critical junction

00:25:51.430 --> 00:25:54.900
of the chaos of development
and the gold standard

00:25:54.900 --> 00:25:58.940
that your customers expect,
it all comes through us.

00:25:58.940 --> 00:26:02.010
So that's always been
my pitch to-- when

00:26:02.010 --> 00:26:04.080
I'm pitching to
come to a company

00:26:04.080 --> 00:26:07.350
or trying to get a job,
that's the value proposition.

00:26:07.350 --> 00:26:11.850
I have to actually say that when
I went from Google to Facebook,

00:26:11.850 --> 00:26:14.310
Facebook didn't have
my position there.

00:26:14.310 --> 00:26:16.270
There was no release
engineer on the job site.

00:26:16.270 --> 00:26:18.450
This is 2008.

00:26:18.450 --> 00:26:20.637
And I just looked for some
random engineering job.

00:26:20.637 --> 00:26:23.220
And I just submitted my resume
attached to it, saying, listen,

00:26:23.220 --> 00:26:25.900
I'm not applying for this
job, but this is what I do.

00:26:25.900 --> 00:26:28.150
And I had to make that value--
they didn't know squat.

00:26:28.150 --> 00:26:29.520
These dummies came
from college that

00:26:29.520 --> 00:26:30.936
had never had a
job in their life.

00:26:33.523 --> 00:26:34.856
This is not recorded-- Oh shoot.

00:26:37.920 --> 00:26:40.680
So I had to make the
proposition that, listen,

00:26:40.680 --> 00:26:41.540
this is what I do.

00:26:41.540 --> 00:26:42.540
This is why you need it.

00:26:42.540 --> 00:26:44.320
And this is what I
will protect you from.

00:26:44.320 --> 00:26:46.600
And just give me these
problems, and I'll solve them.

00:26:46.600 --> 00:26:49.490
And if it doesn't work
right, we'll fix it.

00:26:49.490 --> 00:26:53.540
So that was the big
value part that I found.

00:26:53.540 --> 00:26:58.550
GREGORY GROSSMEIER: For
the Wikimedia foundation,

00:26:58.550 --> 00:27:01.860
we started out as the
prototypical cowboy type place.

00:27:01.860 --> 00:27:04.730
It is what you think
it is, in a way.

00:27:04.730 --> 00:27:08.070
It was a completely open
organization that anyone could

00:27:08.070 --> 00:27:11.550
do anything, and we had
sysadmins that had access,

00:27:11.550 --> 00:27:15.400
but it was uncontrolled
in a lot of ways.

00:27:15.400 --> 00:27:20.000
And over the years, we started
to get a little bit more

00:27:20.000 --> 00:27:23.680
grown up, or methodical,
about our processes.

00:27:23.680 --> 00:27:28.750
And the growth of our
release team-- quasi

00:27:28.750 --> 00:27:33.746
call it that even-- is even
just a virtual team in itself.

00:27:33.746 --> 00:27:36.120
The people on the release team
are not just doing release

00:27:36.120 --> 00:27:36.590
all the time.

00:27:36.590 --> 00:27:39.006
They're splitting their time
between other things as well.

00:27:39.006 --> 00:27:42.780
We're still at that size where
that's the world we live in.

00:27:42.780 --> 00:27:45.850
But still with that
amount of time we do have,

00:27:45.850 --> 00:27:49.880
we've brought sanity
and more infrastructure

00:27:49.880 --> 00:27:51.870
to our ability to do things.

00:27:51.870 --> 00:27:55.240
So you can go from a
roughshod kind of place

00:27:55.240 --> 00:27:58.530
to a place that pushes code
every week with basically

00:27:58.530 --> 00:28:01.300
the same release
process as Facebook,

00:28:01.300 --> 00:28:03.710
with the weekly and
then back ports.

00:28:03.710 --> 00:28:05.790
And it works really well for us.

00:28:05.790 --> 00:28:09.954
And it wouldn't be possible with
the amount of 3 1/2 people that

00:28:09.954 --> 00:28:10.870
we have working on it.

00:28:14.709 --> 00:28:16.500
NIRMAM SANDESARA: How
I would define it is,

00:28:16.500 --> 00:28:19.930
we usually manage
chaos in the company.

00:28:19.930 --> 00:28:23.170
Everyone relies on us
to deploy every day

00:28:23.170 --> 00:28:27.020
and make sure our
site doesn't get--

00:28:27.020 --> 00:28:29.210
no fail whales, no
robots on twitter.com.

00:28:29.210 --> 00:28:32.290
So usually, it's mostly--
people rely on us,

00:28:32.290 --> 00:28:35.010
and it's just building trust
with them most of the time with

00:28:35.010 --> 00:28:39.190
all our product managers, or
our VPs and stuff like that--to

00:28:39.190 --> 00:28:43.590
maintain a pretty heavy schedule
doing deploys all the time

00:28:43.590 --> 00:28:46.730
and then making sure that
we don't break the site.

00:28:46.730 --> 00:28:49.110
PETER RIGBY: When I'm going
to be teaching a release

00:28:49.110 --> 00:28:53.040
engineering course or just even
a lecture in one the classes--

00:28:53.040 --> 00:28:55.890
one concept that I should be
teaching them, and one tool.

00:28:55.890 --> 00:28:57.894
What would you like see?

00:28:57.894 --> 00:28:59.560
NIRMAM SANDESARA: So
one of the concepts

00:28:59.560 --> 00:29:01.890
would be faster deploys.

00:29:01.890 --> 00:29:05.700
It could be through-- we use
something called Mortar, which

00:29:05.700 --> 00:29:08.310
is a BitTorrent protocol
to deploy faster.

00:29:08.310 --> 00:29:12.680
But there could be some other
better ways to faster deploys.

00:29:17.140 --> 00:29:20.050
CHUCK ROSSI: One thing I want
you to get in their heads

00:29:20.050 --> 00:29:23.140
would be some way to get
that operational awareness.

00:29:23.140 --> 00:29:25.260
I'm trying to think of
a good way to do it.

00:29:25.260 --> 00:29:27.010
We could talk, or we
could think about it.

00:29:27.010 --> 00:29:29.050
But some way to tell
them that they're not

00:29:29.050 --> 00:29:31.660
divorced from the process
of getting stuff out.

00:29:31.660 --> 00:29:34.970
When I came up through computer
science in the '80s and '90s,

00:29:34.970 --> 00:29:37.490
worked out here-- as
computer scientists,

00:29:37.490 --> 00:29:40.137
we did not dirty
our hands dealing

00:29:40.137 --> 00:29:41.470
with getting stuff out the door.

00:29:41.470 --> 00:29:44.640
You through it over the wall,
and you went on with your life.

00:29:44.640 --> 00:29:47.350
So something in a setting
that says, listen,

00:29:47.350 --> 00:29:50.780
your responsibility, your
job as a computer scientist

00:29:50.780 --> 00:29:54.850
doesn't end when you commit
to master and walk away.

00:29:54.850 --> 00:29:58.250
So some way you
can tell them it's

00:29:58.250 --> 00:30:02.400
on you to get it
out all the way.

00:30:02.400 --> 00:30:04.410
PETER RIGBY: And a tool?

00:30:04.410 --> 00:30:05.750
CHUCK ROSSI: A tool?

00:30:05.750 --> 00:30:09.970
Obviously, we used to be called
build guys-- a good build tool.

00:30:09.970 --> 00:30:12.870
I like Buck, which we've done.

00:30:12.870 --> 00:30:13.960
Buildbot.

00:30:13.960 --> 00:30:16.620
Just get familiar
with the configuration

00:30:16.620 --> 00:30:20.000
files and the hooks and
the expandability of a good

00:30:20.000 --> 00:30:23.080
build tool that gives
you the framework

00:30:23.080 --> 00:30:25.310
to start building the
scaffolding for this,

00:30:25.310 --> 00:30:28.680
so you can do it painlessly.

00:30:28.680 --> 00:30:30.930
GREGORY GROSSMEIER: I
think from my perspective,

00:30:30.930 --> 00:30:34.650
it's getting the real
world example use

00:30:34.650 --> 00:30:41.360
cases of the full process,
from master to user, in web

00:30:41.360 --> 00:30:42.680
or mobile or whatever.

00:30:42.680 --> 00:30:45.310
There's a big gap there,
and it's not a chasm

00:30:45.310 --> 00:30:47.270
that you can just
throw things over.

00:30:47.270 --> 00:30:48.910
And what those
pieces are, and what

00:30:48.910 --> 00:30:53.760
the best practices
of each step is.

00:30:53.760 --> 00:30:56.470
PETER RIGBY: Do you have
publicly available-- you

00:30:56.470 --> 00:30:59.030
have talks, or is publicly
available process documents

00:30:59.030 --> 00:31:00.230
that we can distill?

00:31:00.230 --> 00:31:01.730
I like doing case
studies because it

00:31:01.730 --> 00:31:03.000
doesn't put the
students to sleep.

00:31:03.000 --> 00:31:04.625
So this is, I think,
an excellent idea,

00:31:04.625 --> 00:31:09.010
where you go through the
Facebook or the Wikimedia.

00:31:09.010 --> 00:31:11.580
It would be great to have those
case studies because they're

00:31:11.580 --> 00:31:13.300
like, oh, Facebook,
or Wikimedia.

00:31:13.300 --> 00:31:15.570
They can tie it down
instead of general concepts.

00:31:15.570 --> 00:31:18.320
Yeah, you have them as well.

00:31:18.320 --> 00:31:18.910
Thanks.

00:31:18.910 --> 00:31:21.020
GREGORY GROSSMEIER: The
pitch I gave last year

00:31:21.020 --> 00:31:24.216
at this was, if you want to see
any little bit of what we do,

00:31:24.216 --> 00:31:25.590
it's there in
Puppet on our repo.

00:31:25.590 --> 00:31:26.587
It's public.

00:31:26.587 --> 00:31:28.420
Everything is there
except for our password.

00:31:28.420 --> 00:31:30.405
CHUCK ROSSI: That's
your ultimate.

00:31:30.405 --> 00:31:32.300
The Wikipedia guys are
the ultimate example

00:31:32.300 --> 00:31:33.872
of how you can do that.

00:31:33.872 --> 00:31:35.580
We're probably a close
second, because we

00:31:35.580 --> 00:31:37.070
are ridiculous with
the amount of stuff

00:31:37.070 --> 00:31:39.153
that we just-- like all
the stuff I told you today

00:31:39.153 --> 00:31:40.950
and my other talk
about front end,

00:31:40.950 --> 00:31:44.392
are essentially the onboardings
I give to people when

00:31:44.392 --> 00:31:45.350
they start at Facebook.

00:31:45.350 --> 00:31:47.550
You're getting the
same information.

00:31:47.550 --> 00:31:50.610
So those are two
really great examples.

00:31:50.610 --> 00:31:53.110
JOHN O'DUINN: I think one thing
is just a coding assignment.

00:31:53.110 --> 00:31:54.677
If you could have
coding assignments

00:31:54.677 --> 00:31:57.260
to give out to people as they're
learning to program, and then

00:31:57.260 --> 00:31:58.968
your next coding
assignment, you're like,

00:31:58.968 --> 00:32:02.060
oh you build on-- first
it's a binary tree,

00:32:02.060 --> 00:32:04.172
now it's a B-Tree, or
whatever kind of thing.

00:32:04.172 --> 00:32:05.880
Make it that the second
coding assignment

00:32:05.880 --> 00:32:10.950
is to take someone else's code
that was checked in somewhere,

00:32:10.950 --> 00:32:14.200
and what they hand to
you is a check-in URL,

00:32:14.200 --> 00:32:16.450
so that they learn how to
do check-outs and check-ins.

00:32:16.450 --> 00:32:17.960
And they learn the
cost of someone

00:32:17.960 --> 00:32:19.350
having written cruddy code.

00:32:19.350 --> 00:32:22.810
I think is one awareness thing,
as opposed to just writing

00:32:22.810 --> 00:32:24.285
into master and running away.

00:32:24.285 --> 00:32:26.410
I think is the other thing
is for release engineers

00:32:26.410 --> 00:32:29.610
particularly, it's useful
to have different skills.

00:32:29.610 --> 00:32:32.080
There's the coding
and engineering stuff

00:32:32.080 --> 00:32:36.660
but there's sysadmin
machine networking mindset.

00:32:36.660 --> 00:32:42.060
And there's the human
diplomacy communication skill

00:32:42.060 --> 00:32:45.770
of being able to talk to
product management, sysadmins,

00:32:45.770 --> 00:32:51.470
IT security guys, developers, VP
of eng, be able to communicate.

00:32:51.470 --> 00:32:55.310
So if there was some way to
say that you would send people

00:32:55.310 --> 00:33:00.590
into a communications class,
or require them to attend

00:33:00.590 --> 00:33:02.790
some other classes that are
non-engineering to learn

00:33:02.790 --> 00:33:06.550
to talk to non-engineers
more, I'm speaking of this,

00:33:06.550 --> 00:33:09.380
I think that would
be very helpful.

00:33:09.380 --> 00:33:11.920
AUDIENCE: One of the courses,
basically the architecture

00:33:11.920 --> 00:33:15.170
course, I get them to go and
find a very small open source

00:33:15.170 --> 00:33:16.480
project and contribute to it.

00:33:16.480 --> 00:33:18.900
Extract the architecture--
and actually first I

00:33:18.900 --> 00:33:21.316
get them to draw what they
think the architecture is going

00:33:21.316 --> 00:33:23.270
to look like, and then
get them to extract it.

00:33:23.270 --> 00:33:25.730
And they're like, whoa,
this is just a mess.

00:33:25.730 --> 00:33:26.230
Exactly.

00:33:26.230 --> 00:33:31.300
So I think it's really valuable,
and just adding that release

00:33:31.300 --> 00:33:33.020
engineering aspect to it.

00:33:33.020 --> 00:33:35.100
There's not many small
open source projects

00:33:35.100 --> 00:33:36.070
that have testing.

00:33:36.070 --> 00:33:37.986
So I get them to do a
refactory, and I'm like,

00:33:37.986 --> 00:33:40.150
there should be a
test, but there isn't.

00:33:43.440 --> 00:33:44.760
STEPHANY BELLOMO: Ok, great.

00:33:44.760 --> 00:33:47.050
That was a great question.

00:33:47.050 --> 00:33:49.534
I want to thank all of
our panelists that we had.

00:33:49.534 --> 00:33:50.950
We're going to
move on real quick,

00:33:50.950 --> 00:33:53.400
and close out with
another discussion.

