WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.480
[MUSIC PLAYING]

00:00:06.450 --> 00:00:09.030
SPEAKER: If your app uses
background threads for loading

00:00:09.030 --> 00:00:12.240
or processing data-- and pretty
much every app will need those

00:00:12.240 --> 00:00:15.350
at some point-- you might have
to take special precautions

00:00:15.350 --> 00:00:18.580
to make your UI
test run reliably.

00:00:18.580 --> 00:00:21.220
Espresso does most of the
heavy lifting for you,

00:00:21.220 --> 00:00:23.160
waiting for life
cycle events to finish

00:00:23.160 --> 00:00:25.380
and checking if the UI is idle.

00:00:25.380 --> 00:00:28.200
But it can't always know what
the other parts of your app

00:00:28.200 --> 00:00:28.930
are doing.

00:00:28.930 --> 00:00:31.610
And you might need to write
some additional code to make

00:00:31.610 --> 00:00:33.450
synchronization possible.

00:00:33.450 --> 00:00:35.960
Let me show you an example.

00:00:35.960 --> 00:00:38.120
I'll create a new
project in Android Studio

00:00:38.120 --> 00:00:41.900
with the empty
activity template.

00:00:41.900 --> 00:00:44.030
Let's do some initial
setup for testing.

00:00:44.030 --> 00:00:45.930
I'll add the Android
runner, rules,

00:00:45.930 --> 00:00:49.220
and Espresso dependencies
in my Android test scope.

00:00:49.220 --> 00:00:51.690
If you're ever unsure what the
newest versions for Espresso

00:00:51.690 --> 00:00:54.980
packages are, consult the
documentation or our testing

00:00:54.980 --> 00:00:58.730
samples on GitHub, which
we always keep up to date.

00:00:58.730 --> 00:01:01.070
I then set up the test
instrumentation runner,

00:01:01.070 --> 00:01:03.010
and we're done here.

00:01:03.010 --> 00:01:05.200
Onto the main activity class.

00:01:05.200 --> 00:01:06.900
The only thing it
does right now is

00:01:06.900 --> 00:01:08.790
set a layout for the text view.

00:01:08.790 --> 00:01:11.520
Let me open the layout
and change that text

00:01:11.520 --> 00:01:15.370
and give the text view an ID.

00:01:15.370 --> 00:01:18.250
And on resume, I'm going
to change the text.

00:01:18.250 --> 00:01:20.340
And I'll just quickly
extract the string

00:01:20.340 --> 00:01:21.925
into a resource
for later re-use.

00:01:25.430 --> 00:01:28.364
Let's create a UI test for
the activity using an Android

00:01:28.364 --> 00:01:29.030
Studio shortcut.

00:01:33.738 --> 00:01:38.310
Add the annotation to use the
Android test runner first.

00:01:38.310 --> 00:01:40.280
Then I need to set
up the activity test

00:01:40.280 --> 00:01:45.650
rule that will start my activity
and check if the correct text

00:01:45.650 --> 00:01:48.080
is displayed.

00:01:48.080 --> 00:01:51.800
I run the test, and it passes.

00:01:51.800 --> 00:01:54.510
That's because Espresso
waits until the app processes

00:01:54.510 --> 00:01:56.030
all life cycle events.

00:01:56.030 --> 00:01:59.360
And I'm sending it a text
string on resume, remember?

00:01:59.360 --> 00:02:01.720
Let's simulate a more
realistic scenario

00:02:01.720 --> 00:02:03.962
where the data takes
some time to load.

00:02:03.962 --> 00:02:07.390
AsyncTask is one of the simplest
ways to do background work

00:02:07.390 --> 00:02:11.550
and then pass a result
back to the main thread.

00:02:11.550 --> 00:02:14.940
So what happens when
I run the test now?

00:02:14.940 --> 00:02:17.180
Surprisingly, it passes.

00:02:17.180 --> 00:02:18.860
That's because
Espresso also knows

00:02:18.860 --> 00:02:21.040
how to synchronize on
the AsyncTask thread

00:02:21.040 --> 00:02:22.940
pull out of the box.

00:02:22.940 --> 00:02:26.210
And because AsyncTask are also
at the heart of any AsyncTask

00:02:26.210 --> 00:02:29.790
loader, including cursor
loaders, they just work.

00:02:29.790 --> 00:02:31.400
Of course, there's
lots of other ways

00:02:31.400 --> 00:02:33.200
you can schedule
background work.

00:02:33.200 --> 00:02:36.580
It can be connecting to a remote
API, using a custom thread

00:02:36.580 --> 00:02:39.010
pull, or through
handler messaging.

00:02:39.010 --> 00:02:40.690
You can see I'm
changing the code

00:02:40.690 --> 00:02:42.590
to use a separate
thread, which sleeps

00:02:42.590 --> 00:02:45.340
for 5 seconds to
simulate background work,

00:02:45.340 --> 00:02:47.500
then posts the change
back to the main thread.

00:02:50.810 --> 00:02:53.740
When I run the test,
it fails immediately.

00:02:53.740 --> 00:02:57.120
As soon as on resume returns
and the activity is idle,

00:02:57.120 --> 00:02:59.730
Espresso is trying to validate
the message on the text view

00:02:59.730 --> 00:03:01.400
and it fails
because the runnable

00:03:01.400 --> 00:03:03.260
hasn't had a chance to run yet.

00:03:03.260 --> 00:03:05.450
That's when you have
to use idling resources

00:03:05.450 --> 00:03:09.070
to tell Espresso when your
app is busy processing.

00:03:09.070 --> 00:03:11.210
I'll use an implementation
of an idling resource

00:03:11.210 --> 00:03:12.970
that we provide
with Espresso called

00:03:12.970 --> 00:03:15.400
counting idling resource.

00:03:15.400 --> 00:03:17.330
It's very simple to
use, and it basically

00:03:17.330 --> 00:03:20.569
lets you increment a counter
for every resource that is busy

00:03:20.569 --> 00:03:22.360
when you're waiting
for something to finish

00:03:22.360 --> 00:03:25.745
loading and decrement
it when it's done.

00:03:25.745 --> 00:03:27.720
Espresso will
automatically run whenever

00:03:27.720 --> 00:03:29.060
the counter is at zero.

00:03:29.060 --> 00:03:32.470
I'll give it a name, data
load, used mostly for logging.

00:03:32.470 --> 00:03:36.820
But it has to be unique among
registered idling resources.

00:03:36.820 --> 00:03:39.610
Now, increment before
scheduling my runnable

00:03:39.610 --> 00:03:43.080
and decrement when it's done.

00:03:43.080 --> 00:03:45.530
The only thing left is
to register the resource

00:03:45.530 --> 00:03:47.340
with Espresso.

00:03:47.340 --> 00:03:49.530
In the test class,
I'll add a setup method

00:03:49.530 --> 00:03:53.530
to grab the idling resource
instance from the activity.

00:03:53.530 --> 00:03:54.340
And it's done.

00:03:54.340 --> 00:03:55.420
Run test.

00:03:55.420 --> 00:03:58.110
After 5 seconds, the
counter gets decremented

00:03:58.110 --> 00:04:00.400
and the test passes.

00:04:00.400 --> 00:04:03.510
To sum up, if your tests are
flaky or outright failing

00:04:03.510 --> 00:04:06.510
because of background threads
and asynchronous events,

00:04:06.510 --> 00:04:09.070
use idling resource
to tell Espresso when

00:04:09.070 --> 00:04:11.200
to pause and resume its work.

00:04:11.200 --> 00:04:12.590
That's all for this episode.

00:04:12.590 --> 00:04:13.780
Happy testing.

00:04:13.780 --> 00:04:16.530
[MUSIC PLAYING]

