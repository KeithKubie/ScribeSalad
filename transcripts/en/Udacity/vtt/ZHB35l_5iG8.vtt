WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:03.410
Now there's another great way you can track down information about this.

00:00:03.410 --> 00:00:06.500
If you go back to the Profiles tab, you can actually take a

00:00:06.500 --> 00:00:09.200
heap snapshot. Now what the heap snapshot is going to do is actual

00:00:09.200 --> 00:00:12.480
going to give you a listing of everything that's been allocated up to this

00:00:12.480 --> 00:00:15.490
snapshot in time. Of course, this really doesn't help you because it

00:00:15.490 --> 00:00:19.380
actually lists a lot of system-level resources that have been allocated as well.

00:00:19.380 --> 00:00:22.810
What you need to do is actually take a second heap snapshot.

00:00:22.810 --> 00:00:25.620
Now, when you take these two half snapshots you can actually go down

00:00:25.620 --> 00:00:27.810
here to the bottom where it says all objects and

00:00:27.810 --> 00:00:32.490
instead set this to show objects allocated between those two snapshots.

00:00:32.490 --> 00:00:34.790
Now this is going to tell you only the objects that

00:00:34.790 --> 00:00:38.870
were actually created in memory between clicking that button. Now if

00:00:38.870 --> 00:00:41.890
you remember before we showed that saw tooth pattern, inside

00:00:41.890 --> 00:00:44.500
of the time line view. Which basically told us that memory

00:00:44.500 --> 00:00:47.530
was being allocated even though I was going nothing. And with

00:00:47.530 --> 00:00:50.970
our two snapshots you can see that same principle occurs here,

00:00:50.970 --> 00:00:54.530
that about 612 bytes were allocated between the three seconds

00:00:54.530 --> 00:00:57.530
it took me to take two snapshots. If we drill down

00:00:57.530 --> 00:00:59.040
into some of the objects here you can see that

00:00:59.040 --> 00:01:02.090
a bunch of numbers were actually created. Most importantly you can

00:01:02.090 --> 00:01:04.849
see in the call stack, that these are x objects.

00:01:04.849 --> 00:01:07.420
So it looks like some velocity has been changed, right? You

00:01:07.420 --> 00:01:11.960
can see velocity here, velocity.x. So somewhere in our little

00:01:11.960 --> 00:01:16.670
application, the x property of the velocity object was actually created.

00:01:16.670 --> 00:01:18.870
Clicking on the Objects tab actually shows us the

00:01:18.870 --> 00:01:21.960
same thing. We can see an object was created with

00:01:21.960 --> 00:01:24.690
a value of x and a type of number for

00:01:24.690 --> 00:01:28.150
some sort of proto-object. Now playing around between a heap

00:01:28.150 --> 00:01:31.130
timeline and heap snapshot, gives you an amazing amount

00:01:31.130 --> 00:01:34.260
of visibility into how memory is being used in your

00:01:34.260 --> 00:01:39.350
web application. Remember, follow the memory, find your performance problems.

00:01:39.350 --> 00:01:41.740
Listen, you want to know more about performance. You want to get

00:01:41.740 --> 00:01:44.620
your application running fast and smooth and junk free

00:01:44.620 --> 00:01:47.380
so that your users don't have to complain about it,

00:01:47.380 --> 00:01:49.850
follow the tips I've detailed and most importantly, follow

00:01:49.850 --> 00:01:53.140
the perfmatters hash tag on your favorite social media network.

00:01:53.140 --> 00:01:55.630
There's a lot of extremely smart people out there,

00:01:55.630 --> 00:01:58.740
all trying to handle these problems in very important ways.

00:01:58.740 --> 00:02:01.210
Following this hash tag is going to key you in

00:02:01.210 --> 00:02:03.480
to how they're thinking and how they're solving the problems.

