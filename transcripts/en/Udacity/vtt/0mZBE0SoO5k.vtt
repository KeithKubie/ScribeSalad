WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[D. Evans] The answer is the first one. This is just the number 3.

00:00:03.000 --> 00:00:06.000
And we can get 3 from expression by following this rule,

00:00:06.000 --> 00:00:09.000
starting from expression, replacing with number,

00:00:09.000 --> 00:00:13.000
and then replacing number with the number 3.

00:00:13.000 --> 00:00:18.000
The second one is not valid, and the way to see that is if we start from expression,

00:00:18.000 --> 00:00:20.000
we only have 3 choices.

00:00:20.000 --> 00:00:22.000
We can replace it with expression, operator, expression,

00:00:22.000 --> 00:00:24.000
we can replace it with number,

00:00:24.000 --> 00:00:27.000
or we can replace it with a left paren, expression, right paren.

00:00:27.000 --> 00:00:30.000
Since the expression we're trying to match starts with a left paren,

00:00:30.000 --> 00:00:33.000
the only way to get a left paren is to eventually have this rule

00:00:33.000 --> 00:00:36.000
that replaces expression with left paren.

00:00:36.000 --> 00:00:39.000
When we use that rule what we get is the left paren

00:00:39.000 --> 00:00:41.000
followed by expression.

00:00:41.000 --> 00:00:44.000
Now we have expression here.

00:00:44.000 --> 00:00:48.000
From here we've matched the far left paren and the far right paren.

00:00:48.000 --> 00:00:51.000
What we have left is this.

00:00:51.000 --> 00:00:55.000
We can replace this expression with paren, expression,

00:00:55.000 --> 00:01:00.000
and we have paren that's replacing this expression using this rule,

00:01:00.000 --> 00:01:04.000
and then we still have the second right paren that we had before.

00:01:04.000 --> 00:01:09.000
This isn't going to match here because we need 2 right parens to match.

00:01:09.000 --> 00:01:13.000
And the essence of this rule is that every time we open a parentheses

00:01:13.000 --> 00:01:15.000
we have to eventually close it.

00:01:15.000 --> 00:01:19.000
We can't produce expressions where the parentheses aren't balanced,

00:01:19.000 --> 00:01:22.000
so this is not a valid Python expression.

00:01:22.000 --> 00:01:23.500
We can produce the third one

00:01:25.000 --> 00:01:27.000
This has many nested expressions.

00:01:27.000 --> 00:01:31.000
We have 3 parens that are open, but we have balancing closed parens.

00:01:31.000 --> 00:01:33.000
And the way we could derive this expression,

00:01:33.000 --> 00:01:36.000
we'll start with 1 expression. That's our starting point.

00:01:36.000 --> 00:01:41.000
We use this rule to replace it with paren, expression, paren.

00:01:41.000 --> 00:01:43.000
Now we have an expression that starts with a 1,

00:01:43.000 --> 00:01:47.000
so we want to replace this expression with expression, operator, expression.

00:01:47.000 --> 00:01:50.000
We still have the outer parens that we had before.

00:01:50.000 --> 00:01:52.000
Now we're working on this part.

00:01:52.000 --> 00:01:56.000
We want to replace this expression with a number and then with the number 1.

00:01:56.000 --> 00:01:58.000
We're going to replace the op.

00:01:58.000 --> 00:02:04.000
Following the operator it goes to  rule. That's going to be replaced with &lt;i&gt;.&lt;/i&gt;

00:02:04.000 --> 00:02:06.000
And now we've got to replace this expression.

00:02:06.000 --> 00:02:09.000
We're trying to produce this whole thing, so we're going to replace this

00:02:09.000 --> 00:02:11.000
with using the parentheses rule.

00:02:11.000 --> 00:02:13.000
We can keep going.

00:02:13.000 --> 00:02:16.000
We're going to replace this expression with expression, operator, expression,

00:02:16.000 --> 00:02:19.000
eventually get the 2  and then do that replacement with parens again

00:02:19.000 --> 00:02:21.000
to get the 3  4.

00:02:21.000 --> 00:02:25.000
I'm not going to fill in all the steps here because they won't fit on the screen,

00:02:25.000 --> 00:02:28.000
but I hope you get the basic idea that we can keep doing those replacements,

00:02:28.000 --> 00:02:31.000
making complex expressions like this one.

00:02:31.000 --> 00:02:34.000
The fourth possibility is not a valid expression.

00:02:34.000 --> 00:02:38.000
There's no way that we can get an operator in front with this rule.

00:02:38.000 --> 00:02:42.000
There actually are rules in Python that allow us to have an expression go to

00:02:42.000 --> 00:02:47.000
operator, expression, but we'd have 2 expressions here if there's a 3 space 3.

00:02:47.000 --> 00:02:52.000
If it was just the number 33, this would actually be a valid Python expression--

00:02:52.000 --> 00:02:55.000
not something that we can produce with this grammar, though.

00:02:55.000 --> 00:02:57.000
And the fifth one is valid.

00:02:57.000 --> 00:03:01.000
It's not sensible or necessary to have nested parentheses like this,

00:03:01.000 --> 00:03:03.000
but we can always keep using this rule.

00:03:03.000 --> 00:03:06.000
So we can derive that expression starting from expression,

00:03:06.000 --> 00:03:09.000
using the last rule with the parens.

00:03:09.000 --> 00:03:14.000
We're going to end up with paren, expression, paren, closed paren.

00:03:14.000 --> 00:03:16.000
We can use that rule again.

00:03:16.000 --> 00:03:20.000
We're going to replace the middle expression with expression, paren, expression,

00:03:20.000 --> 00:03:23.000
replacing this expression with the last rule.

00:03:23.000 --> 00:03:27.000
That will give us expression surrounded by parens,

00:03:27.000 --> 00:03:30.000
and we still have the 2 outer parens on each side.

00:03:30.000 --> 00:03:33.000
So we can have as many nested parens as we want.

00:03:33.000 --> 00:03:35.000
It's not necessary. It doesn't make a lot of sense.

00:03:35.000 --> 00:03:37.000
We would never actually want to write code that way,

00:03:37.000 --> 00:03:39.000
but it's still a valid Python expression.

00:03:39.000 --> 00:03:42.000
Recursive grammar rules like these are very powerful.

00:03:42.000 --> 00:03:45.000
We only need a few simple rules to describe a big language,

00:03:45.000 --> 00:03:48.000
and the whole Python language that we're going to learn in this course

00:03:48.000 --> 00:03:50.000
can be described this way.

00:03:50.000 --> 00:03:53.000
We're not going to describe the entire Python language this way,

00:03:53.000 --> 00:03:56.000
but what I hope is that you have a good sense for how grammars work

00:03:56.000 --> 00:03:59.000
and you can see that even as we introduce constructs somewhat more informally

00:03:59.000 --> 00:04:01.000
as we go on that they could be broken down

00:04:01.000 --> 99:59:59.000
into these kinds of formal replacement rules.

