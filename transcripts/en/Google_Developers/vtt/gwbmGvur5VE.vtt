WEBVTT
Kind: captions
Language: en

00:00:01.980 --> 00:00:05.504
Hi there, and welcome to the
third annual Google Security

00:00:05.504 --> 00:00:07.670
Update, where I will attempt
to answer the question,

00:00:07.670 --> 00:00:12.630
what has Google security
done for you lately?

00:00:12.630 --> 00:00:15.190
So as you will have figured
out from the description,

00:00:15.190 --> 00:00:18.190
I'm Stephan Somogyi, I work
on Google's security privacy

00:00:18.190 --> 00:00:20.000
engineering team.

00:00:20.000 --> 00:00:22.170
And I also have the
good fortune of working

00:00:22.170 --> 00:00:27.360
with a bunch of startups at GV,
which is Alphabet's early stage

00:00:27.360 --> 00:00:28.880
startup venture arm.

00:00:28.880 --> 00:00:31.250
I also advise Google
Capital, which

00:00:31.250 --> 00:00:34.530
works with later stage companies
on security privacy stuff.

00:00:34.530 --> 00:00:36.830
But most importantly,
the charter

00:00:36.830 --> 00:00:40.190
of Google's security and
privacy engineering team

00:00:40.190 --> 00:00:42.560
is to protect our
users and their data.

00:00:42.560 --> 00:00:44.850
Which is a really simple
statement to make,

00:00:44.850 --> 00:00:48.230
but it hides a lot of
complexity underneath.

00:00:48.230 --> 00:00:51.030
So if we do our job
right, this is what

00:00:51.030 --> 00:00:53.250
happens-- absolutely nothing.

00:00:53.250 --> 00:00:54.760
You get the blank slide.

00:00:54.760 --> 00:00:57.850
If we do our job correctly,
the user doesn't notice.

00:00:57.850 --> 00:01:00.936
And this is the ideal
that we strive for.

00:01:00.936 --> 00:01:02.800
For those of you
who saw the keynote,

00:01:02.800 --> 00:01:05.260
you will have seen that Dave
Burke mentioned security

00:01:05.260 --> 00:01:10.340
as a top theme for Android N.
And further on in the keynote,

00:01:10.340 --> 00:01:13.190
Erik Kay made a
point that security

00:01:13.190 --> 00:01:16.390
is absolutely critical
to Allo and Duo, both,

00:01:16.390 --> 00:01:20.020
even to the point of adding
some very specific security

00:01:20.020 --> 00:01:23.270
features, including end-to-end
encryption, and other things

00:01:23.270 --> 00:01:24.970
to incognito chats.

00:01:24.970 --> 00:01:27.710
So security is very
pervasive throughout Google--

00:01:27.710 --> 00:01:31.650
it's not simply and only
a function of the security

00:01:31.650 --> 00:01:33.420
and privacy engineering team.

00:01:33.420 --> 00:01:35.500
So the fact that
you're here indicates

00:01:35.500 --> 00:01:39.039
that you also think security
and privacy are important.

00:01:39.039 --> 00:01:41.330
But before I continue, I want
to clear up a few things.

00:01:41.330 --> 00:01:43.060
I worked on some of
the projects that I'm

00:01:43.060 --> 00:01:45.685
going to be talking about today,
but certainly not all of them.

00:01:45.685 --> 00:01:46.910
There is only one of me.

00:01:46.910 --> 00:01:48.960
And I'm also just
a representative

00:01:48.960 --> 00:01:52.820
for my hundreds of teammates
all around the world, who work

00:01:52.820 --> 00:01:56.020
on this stuff day in, day out.

00:01:56.020 --> 00:01:59.960
And this is a couple
hundred of them.

00:01:59.960 --> 00:02:02.935
So let's start by also
setting the stage.

00:02:02.935 --> 00:02:04.810
Since I have a fairly
limited amount of time,

00:02:04.810 --> 00:02:07.210
I'm only going to be providing
a highlights reel of stuff

00:02:07.210 --> 00:02:10.830
that we've done over the
past approximately year.

00:02:10.830 --> 00:02:14.360
If you want to check out
some of the previous videos,

00:02:14.360 --> 00:02:16.950
they're up on YouTube from
previous annual security

00:02:16.950 --> 00:02:18.480
updates.

00:02:18.480 --> 00:02:21.190
With that, let's talk about TLS.

00:02:21.190 --> 00:02:25.480
So protecting data in transit is
really crucial between endpoint

00:02:25.480 --> 00:02:26.690
and back end.

00:02:26.690 --> 00:02:30.000
You get integrity
guarantees for the data,

00:02:30.000 --> 00:02:32.530
that it was protected
from all adulteration.

00:02:32.530 --> 00:02:35.304
You get confidentiality,
because it's encrypted.

00:02:35.304 --> 00:02:37.470
You also get a certain
amount of identity assurance,

00:02:37.470 --> 00:02:39.594
because you know that you
are talking to the server

00:02:39.594 --> 00:02:41.430
that you think you
are talking to.

00:02:41.430 --> 00:02:44.930
One important meta-thing that
happened during the last year

00:02:44.930 --> 00:02:47.970
is that we used to be
able to use SSL and TLS

00:02:47.970 --> 00:02:50.370
interchangeably, but no more.

00:02:50.370 --> 00:02:54.100
There is no such thing as a
secure version of SSL anymore.

00:02:54.100 --> 00:03:01.622
So SSL bad, RLS good-- TLS 1.2
best, TLS 1.3 is happening,

00:03:01.622 --> 00:03:02.580
but it's not there yet.

00:03:02.580 --> 00:03:04.610
So in terms of current
best practices,

00:03:04.610 --> 00:03:07.240
RLS 1.2 is the way to go.

00:03:07.240 --> 00:03:10.700
So we've been busy
on the TLS front.

00:03:10.700 --> 00:03:14.920
Last September, we announced
the beginnings of the blogger

00:03:14.920 --> 00:03:17.370
transition to HTTPS.

00:03:17.370 --> 00:03:23.120
We knew that we were a
little bit late with this,

00:03:23.120 --> 00:03:26.610
but doing this right is
actually fairly complicated.

00:03:26.610 --> 00:03:30.700
Blogger delivers a lot of
user-generated content, which

00:03:30.700 --> 00:03:33.954
brings with it the risk of mixed
content warnings and browsers.

00:03:33.954 --> 00:03:35.370
And so we wanted
to be careful, we

00:03:35.370 --> 00:03:36.920
wanted to be very
deliberate with this.

00:03:36.920 --> 00:03:38.560
So last September,
we added a checkbox

00:03:38.560 --> 00:03:40.349
that anybody with
a blog on Blogger

00:03:40.349 --> 00:03:42.890
could turn on the checkbox and
start debugging whether or not

00:03:42.890 --> 00:03:44.990
they had any mixed
content issues.

00:03:44.990 --> 00:03:47.120
Earlier this month,
first week of May,

00:03:47.120 --> 00:03:50.920
we hit our next big milestone--
all Blogspot blogs now

00:03:50.920 --> 00:03:53.210
have an HTTPS
version by default.

00:03:53.210 --> 00:03:56.380
There's nothing that anybody
has to do about this.

00:03:56.380 --> 00:03:59.520
And that's very much by design--
it's like the blank slide,

00:03:59.520 --> 00:04:01.220
if we do our job
right, nobody has

00:04:01.220 --> 00:04:03.360
to spend extra effort
and nobody notices.

00:04:03.360 --> 00:04:06.930
We also added HTTPS
redirect, so that if people

00:04:06.930 --> 00:04:10.530
come to your blog via
HTTP, we will automatically

00:04:10.530 --> 00:04:12.520
redirect them to
the HTTPS version,

00:04:12.520 --> 00:04:13.570
if that's what you want.

00:04:13.570 --> 00:04:16.070
And since we know that mixed
content can still be a problem,

00:04:16.070 --> 00:04:18.130
we've actually added some
helpful mixed content

00:04:18.130 --> 00:04:22.420
warning tools, to help you debug
those within your own blog.

00:04:22.420 --> 00:04:26.690
Now Chrome continues to be
at the center of a lot of TLS

00:04:26.690 --> 00:04:28.155
and certificate-related work.

00:04:28.155 --> 00:04:30.030
One of the things that
we're doing right now,

00:04:30.030 --> 00:04:33.529
for example, is via opt-in
collecting invalid certificate

00:04:33.529 --> 00:04:35.820
chains, because we're always
interested in figuring out

00:04:35.820 --> 00:04:40.780
what it is out there in the wild
that triggers HTTPS warnings.

00:04:40.780 --> 00:04:43.890
One thing that we discovered
during previous research

00:04:43.890 --> 00:04:47.610
projects is that a very large
proportion of TLS warnings

00:04:47.610 --> 00:04:50.590
are simply the result of
miss-set local clocks.

00:04:50.590 --> 00:04:53.230
So dead motherboard
batteries, or other reasons

00:04:53.230 --> 00:04:54.666
why the local clock
is not right--

00:04:54.666 --> 00:04:56.290
if it's too far in
the past, or too far

00:04:56.290 --> 00:05:00.190
in the future, that is
technically a problem.

00:05:00.190 --> 00:05:01.890
It is technically an error.

00:05:01.890 --> 00:05:04.500
But is it really
inhibiting, or otherwise

00:05:04.500 --> 00:05:07.110
adversely affecting the user
security at that moment?

00:05:07.110 --> 00:05:08.000
Not so much.

00:05:08.000 --> 00:05:10.460
And we also know from our
user experience research

00:05:10.460 --> 00:05:13.180
that users get security
warning fatigue.

00:05:13.180 --> 00:05:15.579
So we think very carefully
about whether or not

00:05:15.579 --> 00:05:17.870
we should be presenting a
warning, whether there really

00:05:17.870 --> 00:05:19.420
is something for the user to do.

00:05:19.420 --> 00:05:21.711
In this case, it's relatively
mundane-- set your clock,

00:05:21.711 --> 00:05:22.730
and you'll be fine.

00:05:22.730 --> 00:05:24.280
But in general,
we're always looking

00:05:24.280 --> 00:05:26.520
for ways of minimizing
the warnings that we're

00:05:26.520 --> 00:05:28.010
going to show.

00:05:28.010 --> 00:05:29.790
Looking into the
near future, we're

00:05:29.790 --> 00:05:32.910
going to be updating some of
Chrome's connection security

00:05:32.910 --> 00:05:35.430
warnings in M52.

00:05:35.430 --> 00:05:37.860
Right now it's still in dev,
but the code has landed,

00:05:37.860 --> 00:05:40.940
so if you want to take a look
you can take a look in dev,

00:05:40.940 --> 00:05:45.260
and it'll be in stable as
soon as M52 goes stable.

00:05:45.260 --> 00:05:47.560
For those of you who
didn't have the opportunity

00:05:47.560 --> 00:05:49.980
to see Emily Stark from
the Chrome security team

00:05:49.980 --> 00:05:51.760
give her talk on
HTTPS myth-busting,

00:05:51.760 --> 00:05:55.220
I definitely commend to you
checking out the YouTube video

00:05:55.220 --> 00:05:57.060
which has already been posted.

00:05:57.060 --> 00:05:59.820
She lays waste to
a lot of the myths

00:05:59.820 --> 00:06:01.910
out there in the
world about HTTPS--

00:06:01.910 --> 00:06:03.580
whether they're
performance related,

00:06:03.580 --> 00:06:08.490
configuration related,
fundamentally the truth

00:06:08.490 --> 00:06:12.680
will be out, and Emily
explains most, if not

00:06:12.680 --> 00:06:14.160
all, of the things
that have really

00:06:14.160 --> 00:06:16.880
been occupying a lot of the
people who we hear from,

00:06:16.880 --> 00:06:21.200
and what prevents them
from switching to HTTPS.

00:06:21.200 --> 00:06:24.500
So if you want to hear more
about HTTPS myth-busting,

00:06:24.500 --> 00:06:25.688
check out Emily's video.

00:06:29.660 --> 00:06:32.210
Another thing that we're
very happy to talk about

00:06:32.210 --> 00:06:35.970
is that our ads delivery
is now effectively 100%.

00:06:35.970 --> 00:06:41.750
A year ago, here at I/O, we were
aiming for 50% by last June.

00:06:41.750 --> 00:06:43.860
We got there, but
more importantly,

00:06:43.860 --> 00:06:47.900
as of today, with the exception
of some parts of the world

00:06:47.900 --> 00:06:51.000
that block or otherwise
degrade HTTPS traffic,

00:06:51.000 --> 00:06:54.600
we are delivering 100%
of our ads via HTTPS.

00:06:54.600 --> 00:06:56.810
And this is a really
big deal for publishers.

00:06:56.810 --> 00:06:58.860
This is a one and a
half year project that

00:06:58.860 --> 00:07:01.300
came to its final culmination.

00:07:01.300 --> 00:07:04.780
And what made it hard is
because mixed content manifests

00:07:04.780 --> 00:07:06.270
in a lot of different ways.

00:07:06.270 --> 00:07:08.620
With ad options,
we may very well

00:07:08.620 --> 00:07:12.700
wind up displaying ads from
any of a number of different ad

00:07:12.700 --> 00:07:13.520
companies.

00:07:13.520 --> 00:07:16.270
And so we needed
to ramp up the fact

00:07:16.270 --> 00:07:19.180
that we wanted to
pull ads via HTTPS.

00:07:19.180 --> 00:07:22.500
And this is why this took
us over a year and a half.

00:07:22.500 --> 00:07:25.820
The ramp-up now has
gone to 100%-- again,

00:07:25.820 --> 00:07:29.140
except for users that are
somehow environments that block

00:07:29.140 --> 00:07:33.290
or degrade HTTPS-- but
this is also a really,

00:07:33.290 --> 00:07:35.250
really good time to give
a shout-out to Wired

00:07:35.250 --> 00:07:38.560
and to Buzzfeed, both of which
have started writing about

00:07:38.560 --> 00:07:40.070
their transition to HTTPS.

00:07:40.070 --> 00:07:41.610
So if you are a
publisher, and you

00:07:41.610 --> 00:07:44.270
are struggling with what
the transition means

00:07:44.270 --> 00:07:46.704
and what the mechanics
are of this transition,

00:07:46.704 --> 00:07:47.870
go check out those articles.

00:07:47.870 --> 00:07:48.786
They're very edifying.

00:07:51.420 --> 00:07:54.150
We also have a long
history of shining light

00:07:54.150 --> 00:07:55.210
on how we do stuff.

00:07:55.210 --> 00:07:57.350
And this past year
was no different.

00:07:57.350 --> 00:08:00.410
In mid-March, we launched our
latest transparency report,

00:08:00.410 --> 00:08:01.348
the HTTSP Report.

00:08:04.510 --> 00:08:07.420
We first looked closely at
ourselves and our own services,

00:08:07.420 --> 00:08:10.610
because we wanted to find
areas that we could actually

00:08:10.610 --> 00:08:13.330
optimize, and things where
we could do better on HTTPS.

00:08:13.330 --> 00:08:16.920
And then we cast our automated
gaze out into the world

00:08:16.920 --> 00:08:20.219
to look at sites, to see
how they were doing HTTPS,

00:08:20.219 --> 00:08:22.510
if they were doing HTTPS,
and whether or not the server

00:08:22.510 --> 00:08:25.250
configurations were as
modern as they could be.

00:08:25.250 --> 00:08:26.680
There's a lot of
additional detail

00:08:26.680 --> 00:08:27.970
in this transparency report.

00:08:27.970 --> 00:08:30.136
If this is of interest to
you, you should definitely

00:08:30.136 --> 00:08:32.159
go and check it out.

00:08:32.159 --> 00:08:37.179
In late March, Gmail enabled the
display of a very small number

00:08:37.179 --> 00:08:38.340
of red pixels.

00:08:38.340 --> 00:08:41.730
You see there, that small
open red lock indicates

00:08:41.730 --> 00:08:44.800
whether Gmail received an e-mail
message from the outside world

00:08:44.800 --> 00:08:48.820
in unencrypted form--
i.e, not over TLS.

00:08:48.820 --> 00:08:51.140
If we do receive
the message via TLS,

00:08:51.140 --> 00:08:53.010
we display nothing,
because we believe

00:08:53.010 --> 00:08:54.130
that is what it should be.

00:08:54.130 --> 00:08:56.590
Again, the blank slide.

00:08:56.590 --> 00:08:58.340
What's really amazing
about this indicator

00:08:58.340 --> 00:09:01.260
is the effect that it
actually had out email,

00:09:01.260 --> 00:09:02.972
on the internet at large.

00:09:02.972 --> 00:09:05.180
About two years ago, when
we released the Safer Email

00:09:05.180 --> 00:09:08.310
Transparency Report,
that was in June of 2014,

00:09:08.310 --> 00:09:12.400
it took about a year to increase
the outbound email-- the email

00:09:12.400 --> 00:09:15.200
that we send-- by about 10%.

00:09:15.200 --> 00:09:17.800
Now remember, both sides
need to participate in this.

00:09:17.800 --> 00:09:20.300
This isn't something that
we can do unilaterally.

00:09:20.300 --> 00:09:23.150
In fact, Gmail has been
able to send email over TLS

00:09:23.150 --> 00:09:26.100
since its introduction in 2004.

00:09:26.100 --> 00:09:28.720
So 10%, over the
course of a year,

00:09:28.720 --> 00:09:32.120
we were pretty happy with that,
until this lock came along.

00:09:32.120 --> 00:09:34.409
So before we introduced
the lock-- and this is

00:09:34.409 --> 00:09:36.700
a screenshot straight from
the Safer Email Transparency

00:09:36.700 --> 00:09:40.570
Report, so this is public
data-- we were at about 58%

00:09:40.570 --> 00:09:41.840
of the inbound traffic.

00:09:41.840 --> 00:09:44.910
And within 45 days,
we had jumped by 20%.

00:09:44.910 --> 00:09:48.500
So this is the power
of transparency.

00:09:48.500 --> 00:09:50.230
It is really also
worth mentioning

00:09:50.230 --> 00:09:53.390
that the Gmail team is
hard at work within the ITF

00:09:53.390 --> 00:09:57.470
to define SMTP strict transport
security, which is the mail

00:09:57.470 --> 00:10:01.490
equivalent of HSTS, which
is the web version that then

00:10:01.490 --> 00:10:05.260
demonstrates and defines a
mechanism for requiring HTTPS,

00:10:05.260 --> 00:10:09.000
or in this case,
just TLS for SMTP.

00:10:09.000 --> 00:10:12.389
Also was shouting out to
the Android security team,

00:10:12.389 --> 00:10:14.680
those of you who were in
Adrian Ludwig's talk yesterday

00:10:14.680 --> 00:10:16.590
already know this,
but another form

00:10:16.590 --> 00:10:18.750
of transparency
that we believe in

00:10:18.750 --> 00:10:20.615
is things like the
annual year in review--

00:10:20.615 --> 00:10:21.990
there have now
been two of those,

00:10:21.990 --> 00:10:24.200
the most recent one was
published last April.

00:10:24.200 --> 00:10:26.530
And it talks about the
security-related changes

00:10:26.530 --> 00:10:27.860
within the Android ecosystem.

00:10:27.860 --> 00:10:29.494
Again, I encourage
you to have a look

00:10:29.494 --> 00:10:30.660
if this stuff interests you.

00:10:33.490 --> 00:10:37.379
Auto updates today
are best practice.

00:10:37.379 --> 00:10:38.920
Chrome has been
doing it since it was

00:10:38.920 --> 00:10:41.170
introduced as a beta in 2008.

00:10:41.170 --> 00:10:42.840
And here we are,
eight years later,

00:10:42.840 --> 00:10:46.750
and broad swaths of the
industry have followed suit.

00:10:46.750 --> 00:10:50.800
This shows the last year's
worth of Chrome updates.

00:10:50.800 --> 00:10:53.370
And you will see very rapid,
very sharp transitions

00:10:53.370 --> 00:10:56.000
between the major versions.

00:10:56.000 --> 00:11:00.660
We update about 80% of the user
base within the first week.

00:11:00.660 --> 00:11:02.590
We trend to about 90%
in the second week,

00:11:02.590 --> 00:11:05.170
and that's when the long
tail really kicks in.

00:11:05.170 --> 00:11:08.680
And there's an important lesson
here for all developers-- which

00:11:08.680 --> 00:11:11.250
is that solid engineering
practices, and quality

00:11:11.250 --> 00:11:14.710
assurance, really matter,
because users never

00:11:14.710 --> 00:11:18.460
would have accepted auto
updates if we pushed out

00:11:18.460 --> 00:11:21.540
crashy updates.

00:11:21.540 --> 00:11:24.460
But stable means stable, and
the Chrome Stable channel

00:11:24.460 --> 00:11:26.620
is very much
intended and designed

00:11:26.620 --> 00:11:30.590
to be that stable release for
the vast majority of our users.

00:11:30.590 --> 00:11:34.000
And as a result, users
have accepted auto update.

00:11:34.000 --> 00:11:38.320
The other importance, of course,
is the security benefits.

00:11:38.320 --> 00:11:40.650
The reason auto updates
matter for security

00:11:40.650 --> 00:11:44.050
is because this is how we get
risk mitigation, bug fixes,

00:11:44.050 --> 00:11:48.380
and security updates onto
users' devices really quickly,

00:11:48.380 --> 00:11:51.820
and ideally without the user
having to worry about it.

00:11:51.820 --> 00:11:54.540
The quicker that we can get
security updates running

00:11:54.540 --> 00:11:58.027
on these devices, the quicker
we can get them protected.

00:11:58.027 --> 00:11:59.860
This has been the case
for Chrome all along,

00:11:59.860 --> 00:12:02.080
this has been the case
for Chrome OS all along.

00:12:02.080 --> 00:12:06.140
And over the past year, Android
has been making big steps

00:12:06.140 --> 00:12:09.250
forward with their
monthly security updates--

00:12:09.250 --> 00:12:11.470
there have been 10 so
far, and we look forward

00:12:11.470 --> 00:12:13.792
to continuing this process.

00:12:13.792 --> 00:12:16.780
Dave Burke even explicitly
mentioned during his keynote

00:12:16.780 --> 00:12:19.560
that we're working hard to
make updates even more seamless

00:12:19.560 --> 00:12:21.670
in Android N. So
this is very much

00:12:21.670 --> 00:12:24.272
a multi-platform
concerted effort.

00:12:24.272 --> 00:12:25.730
Now, a more recent
product of ours,

00:12:25.730 --> 00:12:29.930
that also embraces auto updates
for user security, is OnHub.

00:12:29.930 --> 00:12:32.820
We launched our first OnHub
router late last October,

00:12:32.820 --> 00:12:34.780
and so far it's been
doing very, very well.

00:12:34.780 --> 00:12:38.880
Users really like the fact
that it's as plug-and-play

00:12:38.880 --> 00:12:40.920
as you can make a home router.

00:12:40.920 --> 00:12:44.090
What we haven't talked
about, until today,

00:12:44.090 --> 00:12:47.600
is that it was architected
and designed and developed

00:12:47.600 --> 00:12:50.960
with strong security in mind
from the very beginning.

00:12:50.960 --> 00:12:55.770
So much like Chrome OS devices,
OnHub auto updates-- users

00:12:55.770 --> 00:12:57.994
don't have to worry
about a thing.

00:12:57.994 --> 00:12:59.410
And just like it's
a good security

00:12:59.410 --> 00:13:00.790
feature for Chrome
and Chrome OS,

00:13:00.790 --> 00:13:03.446
It's a great security
feature for OnHub.

00:13:03.446 --> 00:13:05.070
Those of you who try
to vulnerabilities

00:13:05.070 --> 00:13:07.430
will have heard of the
great glibc vulnerability

00:13:07.430 --> 00:13:09.380
earlier this year, it
made the headlines.

00:13:09.380 --> 00:13:11.800
It allowed remote
attackers to cause anything

00:13:11.800 --> 00:13:14.740
from a denial of service
due to a crash, to arbitrary

00:13:14.740 --> 00:13:16.290
code execution.

00:13:16.290 --> 00:13:19.960
It was not a fun type of vuln.

00:13:19.960 --> 00:13:23.690
The entire OnHub fleet
that had been out there,

00:13:23.690 --> 00:13:27.790
since late October,
was patched three days

00:13:27.790 --> 00:13:31.120
after public availability
of that vuln,

00:13:31.120 --> 00:13:32.660
and public disclosure.

00:13:32.660 --> 00:13:34.880
So this is the power
of auto updates.

00:13:34.880 --> 00:13:37.400
Not one user had to worry
about it-- not one user

00:13:37.400 --> 00:13:39.220
had to download anything.

00:13:39.220 --> 00:13:42.490
It just happened automatically.

00:13:42.490 --> 00:13:45.310
Now OnHub also believes
in defense in depth,

00:13:45.310 --> 00:13:47.120
so it has verified boot.

00:13:47.120 --> 00:13:49.420
Each OnHub device actually
contains a trusted platform

00:13:49.420 --> 00:13:51.120
module, a security
processor, that

00:13:51.120 --> 00:13:56.640
allows us to apply assurance
to a variety of systems,

00:13:56.640 --> 00:13:59.110
and approaches, to
what we do with OnHub.

00:13:59.110 --> 00:14:02.620
For Android users, that also
allows the OnHub mobile app

00:14:02.620 --> 00:14:06.460
to verify that it's talking
to an actual OnHub router,

00:14:06.460 --> 00:14:08.520
that the right software
is at the other end.

00:14:08.520 --> 00:14:14.150
There's a lot of verification
validation in both directions.

00:14:14.150 --> 00:14:16.660
The OnHub security team
also tracks the provenance

00:14:16.660 --> 00:14:18.890
of third party
hardware, software,

00:14:18.890 --> 00:14:20.980
and firmware very carefully.

00:14:20.980 --> 00:14:25.370
So if a vulnerability is
found anywhere in that stack,

00:14:25.370 --> 00:14:28.380
we know who to talk to, we can
get the response and mitigation

00:14:28.380 --> 00:14:31.480
underway quickly, and we now
know-- because we proved it

00:14:31.480 --> 00:14:33.900
with the glibc vuln-- we
can actually get fixes

00:14:33.900 --> 00:14:37.266
out very, very quickly.

00:14:37.266 --> 00:14:38.640
So it may seem
counter-intuitive,

00:14:38.640 --> 00:14:40.830
but cloud management
of the OnHub device

00:14:40.830 --> 00:14:46.410
is also a feature, because your
Google account protects access

00:14:46.410 --> 00:14:48.692
to your OnHub, as well.

00:14:48.692 --> 00:14:50.900
So all the protections that
we create for your Google

00:14:50.900 --> 00:14:52.725
accounts, apply here.

00:14:52.725 --> 00:14:54.100
Anything that we
do in the future

00:14:54.100 --> 00:14:55.724
to further protect
your Google account,

00:14:55.724 --> 00:14:57.690
will also benefit you here.

00:14:57.690 --> 00:14:59.330
Most other routers
require that you

00:14:59.330 --> 00:15:02.260
log in to a local web
server on the device--

00:15:02.260 --> 00:15:05.070
these do not have the
greatest history of security,

00:15:05.070 --> 00:15:07.897
especially if the updates
don't happen very frequently.

00:15:07.897 --> 00:15:09.730
And they have been a
common vector of attack

00:15:09.730 --> 00:15:11.270
from bad actors.

00:15:11.270 --> 00:15:14.084
So the cloud-based
nature of managing OnHub

00:15:14.084 --> 00:15:16.000
actually gives us a bunch
of security benefits

00:15:16.000 --> 00:15:18.176
that are not
necessarily intuitive,

00:15:18.176 --> 00:15:19.550
but the more we
thought about it,

00:15:19.550 --> 00:15:21.300
the more we realized
that this actually is

00:15:21.300 --> 00:15:23.390
a significant security benefit.

00:15:23.390 --> 00:15:25.400
And we believe so
strongly, and we

00:15:25.400 --> 00:15:27.970
are so confident in
the security of OnHub,

00:15:27.970 --> 00:15:30.150
that we're adding it to
our vulnerability rewards

00:15:30.150 --> 00:15:34.530
program effective immediately.

00:15:34.530 --> 00:15:36.290
So last year, we gave
out a lot of money

00:15:36.290 --> 00:15:38.950
to a lot of people
for a lot of bugs.

00:15:38.950 --> 00:15:41.720
We are already on
track this year

00:15:41.720 --> 00:15:45.790
for it to be at least as
rewarding as 2015 was.

00:15:45.790 --> 00:15:48.680
So last June, we added
Android to the VRP,

00:15:48.680 --> 00:15:50.910
and we just added OnHub.

00:15:50.910 --> 00:15:54.030
In March, we actually kicked
things up a notch on the Chrome

00:15:54.030 --> 00:15:56.900
front, on two specific aspects.

00:15:56.900 --> 00:16:00.220
For Chrome OS, we have
increased the top reward

00:16:00.220 --> 00:16:04.670
from $50,000 US to $100,000,
for a persistent compromise

00:16:04.670 --> 00:16:07.080
of a Chrome book in guest mode.

00:16:07.080 --> 00:16:10.670
With great research,
comes great reward.

00:16:10.670 --> 00:16:12.780
We're also extending
the reward program scope

00:16:12.780 --> 00:16:16.140
to include rewards for bypasses
of Chrome Safe Browsing

00:16:16.140 --> 00:16:18.130
download protection features.

00:16:18.130 --> 00:16:21.660
So if you find a way to get
around the download protection,

00:16:21.660 --> 00:16:23.860
there's definitely a
vulnerability reward

00:16:23.860 --> 00:16:25.020
in your future.

00:16:25.020 --> 00:16:28.470
There's a lot more detail that
you can find on the VRP page.

00:16:28.470 --> 00:16:31.280
I'll be posting a lot of these
links to the Spaces space

00:16:31.280 --> 00:16:32.720
for this session
after this talk,

00:16:32.720 --> 00:16:35.170
so you don't have to
furiously write down any URLs.

00:16:35.170 --> 00:16:37.570
I'll post them all there.

00:16:37.570 --> 00:16:40.180
Another aspect of the
vulnerability rewards program

00:16:40.180 --> 00:16:43.210
that may not be as clear
and as obvious to others,

00:16:43.210 --> 00:16:45.730
but is very important to us,
is our patch rewards program.

00:16:45.730 --> 00:16:48.540
We actually reward
security patches

00:16:48.540 --> 00:16:50.410
to key open source
projects, even

00:16:50.410 --> 00:16:52.734
if they have no association
to Google whatsoever.

00:16:52.734 --> 00:16:54.650
Because we think that's
the right thing to do.

00:16:57.360 --> 00:17:00.840
We believe your Google
account is your most valuable

00:17:00.840 --> 00:17:04.510
Google asset, since
that's what gates access

00:17:04.510 --> 00:17:08.530
to all of your data, and all
of your services across Google.

00:17:08.530 --> 00:17:11.160
And our research shows that
Google accounts are considered

00:17:11.160 --> 00:17:14.280
most valuable amongst accounts
from various service providers

00:17:14.280 --> 00:17:16.589
out there on the black
market, which is a detail that

00:17:16.589 --> 00:17:18.304
pleases us greatly.

00:17:18.304 --> 00:17:20.470
Now Adrian said yesterday
that with the introduction

00:17:20.470 --> 00:17:24.760
of fingerprint unlock, the use
of the lock screen on Nexus

00:17:24.760 --> 00:17:28.200
devices went from 50% to 90%.

00:17:28.200 --> 00:17:30.590
So only half the people
who had Nexus devices

00:17:30.590 --> 00:17:33.830
had any kind of lock screen--
and with the introduction

00:17:33.830 --> 00:17:37.590
of fingerprint, and its ease
of use, that one up to 90%.

00:17:37.590 --> 00:17:40.230
So usability really,
really matters.

00:17:40.230 --> 00:17:43.150
So this is why we started
work, five or so years ago,

00:17:43.150 --> 00:17:46.090
on the technology
behind security key.

00:17:46.090 --> 00:17:49.060
We worked together with our
fellow members of the FIDO

00:17:49.060 --> 00:17:51.350
alliance-- which is an
industry consortium dedicated

00:17:51.350 --> 00:17:54.250
to open standards for
strong authentication.

00:17:54.250 --> 00:17:56.700
Now the core technology within
a security key like this

00:17:56.700 --> 00:18:00.670
is called U2F-- it's short
for universal second factor.

00:18:00.670 --> 00:18:04.190
And it's this really great
combination of more security,

00:18:04.190 --> 00:18:05.380
with more usability.

00:18:05.380 --> 00:18:08.110
That circle in the middle
there, that's a touch sensor.

00:18:08.110 --> 00:18:10.190
It's not biometric--
as long as you

00:18:10.190 --> 00:18:12.790
are as conductive as a
typical live human being,

00:18:12.790 --> 00:18:15.030
you can trigger it.

00:18:15.030 --> 00:18:20.560
And what it does is gate the
actual authentication process.

00:18:20.560 --> 00:18:23.250
The reductionist view
of a successful phish,

00:18:23.250 --> 00:18:26.650
or a successful account
credential compromise,

00:18:26.650 --> 00:18:29.250
is that the attacker can
reuse the credentials

00:18:29.250 --> 00:18:30.950
at a time of their choosing.

00:18:30.950 --> 00:18:32.590
By requiring the
proof of presence,

00:18:32.590 --> 00:18:36.080
by requiring that touch,
we break phishing.

00:18:36.080 --> 00:18:39.180
And effectively, you
become largely unphishable,

00:18:39.180 --> 00:18:42.730
with a device like this
protecting your account.

00:18:42.730 --> 00:18:45.360
Now since we introduced
security key for Google accounts

00:18:45.360 --> 00:18:48.070
in October of 2014, this
has been the trend line.

00:18:48.070 --> 00:18:50.070
So it's definitely going
in the right direction.

00:18:50.070 --> 00:18:52.694
At this point, we've enabled it
both for our consumer accounts,

00:18:52.694 --> 00:18:54.580
as well as for our
Google for Work accounts.

00:18:54.580 --> 00:18:56.871
And other companies have
started adopting it, as well--

00:18:56.871 --> 00:18:58.800
including Dropbox,
including GitHub.

00:19:02.430 --> 00:19:03.940
Now the security
team works closely

00:19:03.940 --> 00:19:06.960
with Google's trust and safety
team on a variety of projects,

00:19:06.960 --> 00:19:07.880
as well.

00:19:07.880 --> 00:19:10.710
Trust and safety's charter
is, among other things,

00:19:10.710 --> 00:19:13.740
to protect our users by
creating and enforcing policies

00:19:13.740 --> 00:19:17.750
around spam, fraud, abuse,
and inappropriate content.

00:19:17.750 --> 00:19:20.250
Which means that they're usually
the ones on the front lines

00:19:20.250 --> 00:19:22.490
when dealing with
fraud-related issues.

00:19:22.490 --> 00:19:24.720
Now if you're an
AdWords customer,

00:19:24.720 --> 00:19:27.770
it can be both very
expensive and very stressful

00:19:27.770 --> 00:19:30.500
if you lose control
over the account that

00:19:30.500 --> 00:19:32.700
controls your AdWords.

00:19:32.700 --> 00:19:36.400
And this, unfortunately, happens
a bit more often than any of us

00:19:36.400 --> 00:19:37.251
would prefer.

00:19:37.251 --> 00:19:37.750
So

00:19:37.750 --> 00:19:39.710
The trust and
safety team has been

00:19:39.710 --> 00:19:42.150
working with a cross-section
of AdWords customers

00:19:42.150 --> 00:19:45.190
in North and South America,
and in Europe on an experiment.

00:19:45.190 --> 00:19:47.600
We gave some of these
customers very small numbers

00:19:47.600 --> 00:19:49.520
of security keys to
see whether or not

00:19:49.520 --> 00:19:52.510
we could move the needle on
account compromise for AdWords,

00:19:52.510 --> 00:19:53.740
specifically.

00:19:53.740 --> 00:19:55.740
We haven't actually been
running this experiment

00:19:55.740 --> 00:19:57.760
for very long yet,
but so far, the data

00:19:57.760 --> 00:19:59.180
has been quite compelling.

00:19:59.180 --> 00:20:02.020
It does indeed lead to
a noticeable decrease

00:20:02.020 --> 00:20:04.590
in customers losing control
over their accounts,

00:20:04.590 --> 00:20:06.580
and thus it leads to
a very real fraud loss

00:20:06.580 --> 00:20:08.979
reduction for everybody.

00:20:08.979 --> 00:20:10.770
Now, even though the
experiment isn't over,

00:20:10.770 --> 00:20:12.210
it has been so fruitful
that we are actually

00:20:12.210 --> 00:20:14.043
going to be expanding
this to Asia, as well,

00:20:14.043 --> 00:20:17.790
to see if by taking an
increasingly global approach,

00:20:17.790 --> 00:20:22.170
we can learn even more
stuff than we have so far.

00:20:22.170 --> 00:20:23.414
Which brings us to our cloud.

00:20:23.414 --> 00:20:24.830
Another important
thing that we've

00:20:24.830 --> 00:20:26.371
done over the course
of the last year

00:20:26.371 --> 00:20:28.640
is launch our cloud identity
and access management

00:20:28.640 --> 00:20:31.410
for all Google Cloud
platform customers.

00:20:31.410 --> 00:20:34.304
So first of all, terminology
check-- authentication

00:20:34.304 --> 00:20:36.970
is what we've been talking about
in the context of security key,

00:20:36.970 --> 00:20:40.970
proving that you are the
legitimate user of a given

00:20:40.970 --> 00:20:41.820
account.

00:20:41.820 --> 00:20:45.960
Authorization is that, based on
the authenticated account, gate

00:20:45.960 --> 00:20:47.890
access to resources
as appropriate.

00:20:47.890 --> 00:20:51.270
And together these are referred
to as IM-- identity and access

00:20:51.270 --> 00:20:52.650
management.

00:20:52.650 --> 00:20:55.060
So we heard loud and clear
from our cloud customers

00:20:55.060 --> 00:20:58.120
that what they needed was a
very thoughtfully designed

00:20:58.120 --> 00:21:01.380
and implemented access control
to their cloud resources.

00:21:01.380 --> 00:21:04.622
And as of today, there
are 20 predefined roles

00:21:04.622 --> 00:21:06.830
that meet the vast majority
of the needs of our cloud

00:21:06.830 --> 00:21:08.960
customers.

00:21:08.960 --> 00:21:12.220
And though we've heard some
feedback about the desire

00:21:12.220 --> 00:21:15.610
to self-define roles,
we're not quite there yet.

00:21:15.610 --> 00:21:19.190
But if you're a customer and
you want self-defined roles,

00:21:19.190 --> 00:21:21.670
look for those coming
within the next year.

00:21:21.670 --> 00:21:23.790
So a lot of additional
information,

00:21:23.790 --> 00:21:26.617
including some videos from
our GCP Next conference,

00:21:26.617 --> 00:21:29.200
which happened two months ago
in San Francisco, up on YouTube.

00:21:29.200 --> 00:21:33.050
So if you're interested in
this, in IM on our cloud,

00:21:33.050 --> 00:21:35.690
go check those out.

00:21:35.690 --> 00:21:39.090
So one security system
here at Google, that's

00:21:39.090 --> 00:21:41.460
been around for
almost a decade now,

00:21:41.460 --> 00:21:43.330
and it reaches far
and wide is called

00:21:43.330 --> 00:21:48.550
Safe Browsing, where we protect
users and their devices.

00:21:48.550 --> 00:21:50.190
We do this across
many platforms,

00:21:50.190 --> 00:21:53.466
across Windows, across
Mac OSX, across Linux.

00:21:53.466 --> 00:21:56.060
And we protect users
from an assortment

00:21:56.060 --> 00:21:59.160
of badness-- whether
it's malware or phishing,

00:21:59.160 --> 00:22:01.340
or other kinds of
social engineering.

00:22:01.340 --> 00:22:05.200
And if you ever see one
of these red screens,

00:22:05.200 --> 00:22:07.930
please consider enabling
this little check box,

00:22:07.930 --> 00:22:11.220
because it gives us a bunch
of additional information

00:22:11.220 --> 00:22:13.990
about how you got
there, and what

00:22:13.990 --> 00:22:17.740
was the trail that led you to
this particular potentially

00:22:17.740 --> 00:22:21.450
compromised site, but certainly
a site that we know is bad.

00:22:21.450 --> 00:22:23.620
That telemetry
that we get, we can

00:22:23.620 --> 00:22:26.090
use to help everybody who
consumes Safe Browsing's

00:22:26.090 --> 00:22:28.670
data, which is a
variety of platforms,

00:22:28.670 --> 00:22:30.919
and a variety of browsers
on those platforms.

00:22:30.919 --> 00:22:32.460
Now, a relatively
new kind of badness

00:22:32.460 --> 00:22:36.280
that you may not have heard
of, is unwanted software--

00:22:36.280 --> 00:22:39.110
which we abbreviate like this.

00:22:39.110 --> 00:22:42.380
And we've taken to calling,
"ooze," because saying UwS lot

00:22:42.380 --> 00:22:43.840
is very, very cumbersome.

00:22:43.840 --> 00:22:46.764
We've been working against
ooze for well over a year.

00:22:46.764 --> 00:22:48.180
We're far from
done yet, but we've

00:22:48.180 --> 00:22:51.410
made some really
significant steps forward.

00:22:51.410 --> 00:22:54.179
And if you check out
on our security blog,

00:22:54.179 --> 00:22:56.470
we have a fairly comprehensive
post from last December,

00:22:56.470 --> 00:22:57.994
detailing some of
things that we've

00:22:57.994 --> 00:22:59.910
done, some of things
that we're still planning

00:22:59.910 --> 00:23:01.270
on doing in the future.

00:23:01.270 --> 00:23:06.320
So if you want details about
that, the blog's the way to go.

00:23:06.320 --> 00:23:09.680
Another facet of social
engineering-related protection

00:23:09.680 --> 00:23:12.390
and safe browsing,
is our enforcement

00:23:12.390 --> 00:23:14.630
against deceptive
download buttons.

00:23:14.630 --> 00:23:17.250
They've been against our
policy from the get-go.

00:23:17.250 --> 00:23:18.860
But starting in
February, we announced

00:23:18.860 --> 00:23:20.340
increased enforcement.

00:23:20.340 --> 00:23:23.870
And this was a very popular
choice, judging by the response

00:23:23.870 --> 00:23:25.940
that we got on
Twitter and elsewhere,

00:23:25.940 --> 00:23:29.900
because these deceptive
downloads lead users to ooze,

00:23:29.900 --> 00:23:32.610
and they lead users to
other forms of badness.

00:23:32.610 --> 00:23:35.380
So this is one way that we can
help protect a lot of users

00:23:35.380 --> 00:23:38.256
on the internet at scale.

00:23:38.256 --> 00:23:39.630
One of the most
protective things

00:23:39.630 --> 00:23:42.930
that we did over this past year,
is extend more Safe Browsing

00:23:42.930 --> 00:23:46.720
protection down to
the mobile device.

00:23:46.720 --> 00:23:49.090
So all the existing
protections that you

00:23:49.090 --> 00:23:52.240
have already on the platform--
Safety Net, verify apps--

00:23:52.240 --> 00:23:55.530
are absolutely crucial to
protecting Android, itself.

00:23:55.530 --> 00:23:58.340
What we've done now is
add, on top of that,

00:23:58.340 --> 00:24:01.220
and provide more protection
against social engineering,

00:24:01.220 --> 00:24:05.460
and malware, within
Chrome on Android.

00:24:05.460 --> 00:24:07.790
And since we're prone to
measuring things, and counting

00:24:07.790 --> 00:24:10.760
stuff, we recently sat
down and figured out

00:24:10.760 --> 00:24:12.750
that Safe Browsing,
in total, across all

00:24:12.750 --> 00:24:14.410
of its supported
platforms today,

00:24:14.410 --> 00:24:17.800
protects well over
2 billion devices.

00:24:17.800 --> 00:24:19.900
Which means that,
odds are today,

00:24:19.900 --> 00:24:23.300
even if you don't know it,
there's a high likelihood

00:24:23.300 --> 00:24:26.920
that Safe Browsing made
your internet experience

00:24:26.920 --> 00:24:30.050
that much safer,
because of how pervasive

00:24:30.050 --> 00:24:31.900
we have managed to make it be.

00:24:31.900 --> 00:24:35.320
Now, while we were developing
Safe Browsing for mobile,

00:24:35.320 --> 00:24:37.760
we realized very early on
that for the vast majority

00:24:37.760 --> 00:24:41.120
of the world, cellular
data costs money.

00:24:41.120 --> 00:24:44.920
So pushing protective data
updates down to a mobile device

00:24:44.920 --> 00:24:47.660
is something that is potentially
very costly to the user,

00:24:47.660 --> 00:24:50.780
and we needed to be extremely
respectful of our user's data

00:24:50.780 --> 00:24:51.940
usage.

00:24:51.940 --> 00:24:54.620
And so we developed the
guiding principle, which

00:24:54.620 --> 00:24:57.420
is maximum protection per bit.

00:24:57.420 --> 00:24:59.640
Every single bit that
Safe Browsing sends down

00:24:59.640 --> 00:25:03.111
to the local device
needs to matter.

00:25:03.111 --> 00:25:04.860
So since this is a
developers' conference,

00:25:04.860 --> 00:25:07.460
we want to give you an idea of
how we approached this problem,

00:25:07.460 --> 00:25:10.580
and what we did to
actually hit this.

00:25:10.580 --> 00:25:12.880
So first off, I'll
give away a punchline.

00:25:12.880 --> 00:25:16.400
We do know at this point
that what we did works,

00:25:16.400 --> 00:25:19.480
even though it's only been
live for about half a year,

00:25:19.480 --> 00:25:23.210
it is very clear to us, based
on the number of warning

00:25:23.210 --> 00:25:25.580
interstitials that
we display to users,

00:25:25.580 --> 00:25:29.400
that this protection has been
highly, highly effective.

00:25:29.400 --> 00:25:34.070
At times, we have shown
five times the warnings

00:25:34.070 --> 00:25:37.170
for social engineering on
mobile devices per million pages

00:25:37.170 --> 00:25:38.750
than we do on desktop.

00:25:38.750 --> 00:25:42.930
At times, we've shown over
2x the malware warnings.

00:25:42.930 --> 00:25:45.710
This is not an indicator
of a lack of security

00:25:45.710 --> 00:25:47.340
on the mobile
platform, what this

00:25:47.340 --> 00:25:49.410
is, is an indicator
of the interest

00:25:49.410 --> 00:25:52.740
that the bad guys
have in getting people

00:25:52.740 --> 00:25:53.912
on the mobile platform.

00:25:53.912 --> 00:25:55.870
And the fact that we're
showing these warnings,

00:25:55.870 --> 00:25:57.850
means that we already
know about the badness,

00:25:57.850 --> 00:26:01.390
and we can help protect
users even better.

00:26:01.390 --> 00:26:02.480
So how do we do this?

00:26:02.480 --> 00:26:05.796
How did we pursue maximum
protection per bit?

00:26:05.796 --> 00:26:07.170
So on the server
side, we focused

00:26:07.170 --> 00:26:10.180
on minimizing the
amount of data.

00:26:10.180 --> 00:26:15.250
And we did this by reorganizing
how we handled these bad links.

00:26:15.250 --> 00:26:18.230
We know, for example, that
certain campaigns of badness

00:26:18.230 --> 00:26:20.540
out there in the world are
geo-specific-- they're only

00:26:20.540 --> 00:26:22.165
relevant to certain
parts of the world.

00:26:22.165 --> 00:26:25.030
So there's no point in showing
a mobile device user, halfway

00:26:25.030 --> 00:26:27.260
around the world,
any information

00:26:27.260 --> 00:26:30.040
and pushing any of that
information down to the device

00:26:30.040 --> 00:26:32.810
if they're never going
to see the campaign.

00:26:32.810 --> 00:26:34.770
We also have information
about the platform

00:26:34.770 --> 00:26:39.240
relevance of a given
link, and its badness.

00:26:39.240 --> 00:26:42.900
And we also rank the
protectiveness, or the badness,

00:26:42.900 --> 00:26:46.610
of a given link, so that we
know if a particular link is

00:26:46.610 --> 00:26:48.390
actually followed
more frequently,

00:26:48.390 --> 00:26:50.780
people are more likely
to be attacked that way.

00:26:50.780 --> 00:26:52.750
And so we can
stack-rack that up.

00:26:52.750 --> 00:26:57.180
So we have lots of ways of
filtering the optimal dataset

00:26:57.180 --> 00:27:00.460
for any given device,
based on what device it is,

00:27:00.460 --> 00:27:03.500
which country it's
in, and what's

00:27:03.500 --> 00:27:05.830
going on in the
world at the time.

00:27:05.830 --> 00:27:08.990
Now the client has a very
good idea of its bandwidth.

00:27:08.990 --> 00:27:12.000
So it can effectively
communicate to us

00:27:12.000 --> 00:27:15.080
and tell us that it can
only handle so many updates,

00:27:15.080 --> 00:27:18.020
and get so much information,
based on its current network

00:27:18.020 --> 00:27:19.360
conditions.

00:27:19.360 --> 00:27:21.430
So this is where the
stack ranking comes in.

00:27:21.430 --> 00:27:25.490
If that device can only
accept, say, 10 bad links,

00:27:25.490 --> 00:27:28.480
let's give that device the
10 most protective bits

00:27:28.480 --> 00:27:33.430
of information that we can
give it at that very moment.

00:27:33.430 --> 00:27:36.490
Now, what we did is we
reorganized some of the data

00:27:36.490 --> 00:27:39.920
structures for the wire protocol
that we actually send through.

00:27:39.920 --> 00:27:42.440
And then we sat down with
Google's compression team,

00:27:42.440 --> 00:27:44.820
and worked out whether
or not there was a way

00:27:44.820 --> 00:27:47.150
to further reorganize the
data structures to make them

00:27:47.150 --> 00:27:49.010
that much more compressible.

00:27:49.010 --> 00:27:51.680
And as a result of all the
data minimization on the server

00:27:51.680 --> 00:27:54.410
side, and the increased
compressibility

00:27:54.410 --> 00:27:57.640
of the data, that ultimately
improves and then gets

00:27:57.640 --> 00:28:00.061
decompressed on
the client side--

00:28:00.061 --> 00:28:01.560
we really think
that we got as close

00:28:01.560 --> 00:28:07.970
as we can to truly delivering
maximal protection per bit.

00:28:07.970 --> 00:28:11.370
So how do you, as developers,
take advantage of this?

00:28:11.370 --> 00:28:14.150
All this technology is part
of the latest Safe Browsing

00:28:14.150 --> 00:28:17.580
protocol, version 4, which we're
launching right here, right

00:28:17.580 --> 00:28:21.660
now at I/O. You can find
out a bunch more information

00:28:21.660 --> 00:28:23.300
on the blog post,
which went live

00:28:23.300 --> 00:28:25.466
a couple minutes ago,
probably right around the time

00:28:25.466 --> 00:28:27.550
that this talk began.

00:28:27.550 --> 00:28:31.990
The most important parts
of developer documentation,

00:28:31.990 --> 00:28:34.540
that are here at this URL,
which I'll post to Spaces later,

00:28:34.540 --> 00:28:38.040
all these details are available.

00:28:38.040 --> 00:28:40.640
But even better for you, is
we have a reference client

00:28:40.640 --> 00:28:43.090
implementation,
which he wrote in Go,

00:28:43.090 --> 00:28:45.103
and we put it up at this link.

00:28:47.980 --> 00:28:50.990
We'd like to highlight two very
specific things about protocol

00:28:50.990 --> 00:28:53.380
version 4, since we're
introducing it now,

00:28:53.380 --> 00:28:56.060
and this is going to
be new to all of you.

00:28:56.060 --> 00:28:59.440
First of all, if you do
have a version 3 client

00:28:59.440 --> 00:29:03.050
implementation, please
start transitioning now.

00:29:03.050 --> 00:29:05.470
We are beginning the
deprecation process,

00:29:05.470 --> 00:29:08.330
and there is no reason
to stick with version 3.

00:29:08.330 --> 00:29:12.550
Version 4 is better
in any possible metric

00:29:12.550 --> 00:29:13.950
that we can think of.

00:29:13.950 --> 00:29:16.000
So please start that process.

00:29:16.000 --> 00:29:18.019
But if you are on
Android, odds are

00:29:18.019 --> 00:29:20.560
you're not going to have to do
any work at all, because we've

00:29:20.560 --> 00:29:22.830
done all the work for you.

00:29:22.830 --> 00:29:25.640
We didn't get it quite
done in time for I/O,

00:29:25.640 --> 00:29:28.110
but we're working to deliver
a really simple Android

00:29:28.110 --> 00:29:32.390
API that you can call to verify
goodness or badness of a URL.

00:29:32.390 --> 00:29:36.480
You will not have to implement
a full version for a client,

00:29:36.480 --> 00:29:39.870
and its aware
protocol yourselves.

00:29:39.870 --> 00:29:42.560
It's really important for
a user's battery life,

00:29:42.560 --> 00:29:46.330
for a user's cellular phone
bills, for all of these details

00:29:46.330 --> 00:29:49.790
to only have a single up-to-date
copy of the Safe Browsing data,

00:29:49.790 --> 00:29:51.460
locally on a device.

00:29:51.460 --> 00:29:53.370
And we're going to
do that for you,

00:29:53.370 --> 00:29:56.350
and provide this as
a system service.

00:29:56.350 --> 00:29:59.710
Once the API is ready to
use, we'll put up a blog post

00:29:59.710 --> 00:30:03.360
and we'll let you know
exactly how to use it.

00:30:03.360 --> 00:30:06.240
So one thing we've gotten
feedback on in previous I/Os

00:30:06.240 --> 00:30:09.340
is that you're interested
in best practices for how

00:30:09.340 --> 00:30:10.525
to protect yourselves.

00:30:13.160 --> 00:30:22.440
First off, please stop reusing
passwords across services.

00:30:22.440 --> 00:30:26.190
This is the number
one most helpful thing

00:30:26.190 --> 00:30:29.990
that you can do
for your attackers.

00:30:29.990 --> 00:30:31.270
Knock it off, please.

00:30:31.270 --> 00:30:33.930
It's not helpful.

00:30:33.930 --> 00:30:39.280
Second of all, please look
to secure your accounts

00:30:39.280 --> 00:30:41.510
as much as possible.

00:30:41.510 --> 00:30:44.930
Now, there are a variety
of different devices

00:30:44.930 --> 00:30:48.019
that support the
U2F-- these come

00:30:48.019 --> 00:30:49.810
in a variety of different
colors right now,

00:30:49.810 --> 00:30:52.268
this one is actually one of
mine, you can see it's scuffed.

00:30:52.268 --> 00:30:53.530
It's fairly well used.

00:30:53.530 --> 00:30:55.900
This one, for example, is
not quite available yet,

00:30:55.900 --> 00:30:59.520
but it supports U2F over
three different connectivity

00:30:59.520 --> 00:31:00.560
mechanisms.

00:31:00.560 --> 00:31:03.590
There's a USB port,
it supports NFC,

00:31:03.590 --> 00:31:06.730
and it also supports
Bluetooth Low Energy.

00:31:06.730 --> 00:31:09.110
There are devices out there
where we can't get access

00:31:09.110 --> 00:31:10.880
to the NFC interface.

00:31:10.880 --> 00:31:12.530
There are mobile
devices where it's not

00:31:12.530 --> 00:31:15.600
easy to use USB-- so we
need to be able to run U2F

00:31:15.600 --> 00:31:17.320
over any of these protocols.

00:31:17.320 --> 00:31:19.120
And there's a
variety of solutions

00:31:19.120 --> 00:31:20.910
from a variety of
different vendors

00:31:20.910 --> 00:31:23.455
out there available
in the world today.

00:31:27.260 --> 00:31:29.130
Back to my slides, please.

00:31:29.130 --> 00:31:29.630
Thank you.

00:31:32.750 --> 00:31:35.920
The next thing we'd like
to encourage you to do

00:31:35.920 --> 00:31:38.990
is to use RLS wherever possible.

00:31:38.990 --> 00:31:40.959
This also includes
software updates.

00:31:40.959 --> 00:31:43.250
There have been a number of
TLS-related vulnerabilities

00:31:43.250 --> 00:31:44.640
out in the world.

00:31:44.640 --> 00:31:49.320
And I was personally quite
dismayed to see some developers

00:31:49.320 --> 00:31:53.070
check for the availability
of updates via HTTP-- often

00:31:53.070 --> 00:31:56.580
they'll get the link to the
updated binary via HTTP,

00:31:56.580 --> 00:31:59.930
and then they'll
download it over HTTP.

00:31:59.930 --> 00:32:03.110
And then we will have heard,
oh, but the binary is signed,

00:32:03.110 --> 00:32:05.340
everything will be fine.

00:32:05.340 --> 00:32:07.340
Except the problem is,
if you send the link down

00:32:07.340 --> 00:32:09.100
to the device over
HTTP, and you actually

00:32:09.100 --> 00:32:11.264
do have a man in the
middle attacker there,

00:32:11.264 --> 00:32:13.180
they're going to change
that link to something

00:32:13.180 --> 00:32:15.070
that they control.

00:32:15.070 --> 00:32:17.680
So the user, your
user, might never

00:32:17.680 --> 00:32:20.390
actually get the binary
you intended for them.

00:32:20.390 --> 00:32:24.130
So just do the simple and
straightforward thing-- put

00:32:24.130 --> 00:32:25.841
HTTPS everywhere.

00:32:25.841 --> 00:32:28.340
It's a lot better for you, it's
a lot better for your users,

00:32:28.340 --> 00:32:32.729
and it's a lot better for your
reputation as a developer.

00:32:32.729 --> 00:32:34.270
Now, a lot of what
we've talked about

00:32:34.270 --> 00:32:37.880
is protection scale--
billions of devices.

00:32:37.880 --> 00:32:42.220
But since 2012, we've also
been showing very, very focused

00:32:42.220 --> 00:32:46.692
warnings to a very, very small
percentage of our user base.

00:32:46.692 --> 00:32:48.650
And if you should ever
see a warning like this,

00:32:48.650 --> 00:32:50.250
please take heed.

00:32:50.250 --> 00:32:54.360
We'll give you a bunch of
advice on that Learn More link.

00:32:54.360 --> 00:32:55.549
Please don't ignore it.

00:32:55.549 --> 00:32:57.090
None of the advice
is rocket science,

00:32:57.090 --> 00:32:59.170
it's not super secret
stuff, it's basically

00:32:59.170 --> 00:33:01.260
turn on two-factor
authentication,

00:33:01.260 --> 00:33:04.750
be reasonable with your
security precautions.

00:33:04.750 --> 00:33:07.760
And we are astonished at
how few people actually

00:33:07.760 --> 00:33:13.950
follow this advice, even when
we warn them very, very clearly.

00:33:13.950 --> 00:33:17.156
If you get this warning,
please don't ignore it.

00:33:17.156 --> 00:33:18.530
And if you ever
get this warning,

00:33:18.530 --> 00:33:22.290
your security posture really
should become a priority

00:33:22.290 --> 00:33:25.769
over your convenience.

00:33:25.769 --> 00:33:27.310
Now, one of the
things that I haven't

00:33:27.310 --> 00:33:30.280
had nearly as much time
as I wanted to talk about

00:33:30.280 --> 00:33:32.510
is all the research that we do.

00:33:32.510 --> 00:33:35.860
But one item of research from
last July, in particular,

00:33:35.860 --> 00:33:39.620
is worthwhile in this context,
where we asked both experts

00:33:39.620 --> 00:33:43.940
and non-experts alike about what
the most protective thing is

00:33:43.940 --> 00:33:45.440
that they could think of.

00:33:45.440 --> 00:33:47.290
And this is how it worked out.

00:33:47.290 --> 00:33:49.270
This graphic is actually
in the blog post,

00:33:49.270 --> 00:33:51.020
so you don't-- you're
all taking pictures.

00:33:51.020 --> 00:33:52.250
You don't have to
take a picture.

00:33:52.250 --> 00:33:53.620
There's an actual image online.

00:33:53.620 --> 00:33:55.350
I will send you
the URL in Spaces.

00:33:55.350 --> 00:33:56.250
Really, it's OK.

00:33:58.997 --> 00:34:00.830
But one of the most
interesting things to me

00:34:00.830 --> 00:34:04.160
is that the expert advice,
number one thing to do,

00:34:04.160 --> 00:34:06.330
is install software updates.

00:34:06.330 --> 00:34:09.480
Which brings us all the way back
to all the auto update stuff.

00:34:09.480 --> 00:34:10.810
It actually works.

00:34:10.810 --> 00:34:13.420
And there is great consensus
across the industry,

00:34:13.420 --> 00:34:15.830
across platforms,
across companies,

00:34:15.830 --> 00:34:20.540
that this is the most
user beneficial security

00:34:20.540 --> 00:34:21.510
thing that you can do.

00:34:21.510 --> 00:34:24.520
And that's why, also, safe and
secure and verified software

00:34:24.520 --> 00:34:28.090
updates are super important.

00:34:28.090 --> 00:34:30.030
So this is where our
security blog is.

00:34:30.030 --> 00:34:33.699
We've actually done 41 blog
posts since last year's I/O,

00:34:33.699 --> 00:34:37.310
with a whole variety
of additional content.

00:34:37.310 --> 00:34:39.776
I haven't had the time to
talk about a lot of stuff--

00:34:39.776 --> 00:34:42.150
I could have gone on for
another couple of hours, easily.

00:34:42.150 --> 00:34:45.360
Among the things that I didn't
have time to go into in-depth

00:34:45.360 --> 00:34:51.219
were ephemeral IDs for Eddystone
BLE beacon implementation.

00:34:51.219 --> 00:34:53.940
So if you're interested
in privacy preserving

00:34:53.940 --> 00:34:56.790
technologies, particularly
in the context of BLE,

00:34:56.790 --> 00:34:58.400
check out ephemeral IDs.

00:34:58.400 --> 00:35:02.180
It's very clever technology, and
it's there exclusively and very

00:35:02.180 --> 00:35:05.330
focusedly to protect
individual users' privacy.

00:35:05.330 --> 00:35:08.120
I didn't get a chance to talk
about certificate transparency,

00:35:08.120 --> 00:35:10.480
which is a core technology
for trust out there,

00:35:10.480 --> 00:35:13.952
and is growing in
importance with every day.

00:35:13.952 --> 00:35:15.660
I definitely didn't
talk enough about all

00:35:15.660 --> 00:35:18.120
of our research, all the
research that we do out there.

00:35:18.120 --> 00:35:19.940
I didn't talk enough
about the things

00:35:19.940 --> 00:35:22.680
that we deprecated
over this last year.

00:35:22.680 --> 00:35:28.172
So SSL v3 we got rid of, RC4
and SHA-1 also deprecated.

00:35:28.172 --> 00:35:29.880
I didn't get a chance
to talk about using

00:35:29.880 --> 00:35:31.872
Google Brain for
anti-spam and Gmail,

00:35:31.872 --> 00:35:33.330
which turned out
to be a very, very

00:35:33.330 --> 00:35:37.600
effective tool in combating
that sort of thing.

00:35:37.600 --> 00:35:39.920
And we also didn't have
a chance to dig deep

00:35:39.920 --> 00:35:41.784
into the importance
of notifications.

00:35:41.784 --> 00:35:43.200
Because one thing
that we've found

00:35:43.200 --> 00:35:46.590
is if we discover a website
that has been compromised,

00:35:46.590 --> 00:35:49.540
and that has become
bad for its users,

00:35:49.540 --> 00:35:51.810
we have determined
that the quicker we

00:35:51.810 --> 00:35:53.720
can get a notification
to the site operator,

00:35:53.720 --> 00:35:55.678
the quicker they can
remediate, and the quicker

00:35:55.678 --> 00:35:58.540
they can actually protect
all of their visitors.

00:35:58.540 --> 00:36:00.840
And we did a bunch of
research last summer,

00:36:00.840 --> 00:36:04.060
and recently published a
paper, based on this research.

00:36:04.060 --> 00:36:07.050
So notifications
about security really

00:36:07.050 --> 00:36:09.510
do matter, and
really do help users.

00:36:09.510 --> 00:36:12.230
There's a huge spectrum
of security stuff,

00:36:12.230 --> 00:36:14.420
particularly in the
realm of human factors

00:36:14.420 --> 00:36:17.250
and in communication,
that make a material

00:36:17.250 --> 00:36:20.780
difference to the security
of all of our users.

00:36:20.780 --> 00:36:24.760
It's not just about the crypto,
it's not just about the auth,

00:36:24.760 --> 00:36:28.760
it's not just about
the technology.

00:36:28.760 --> 00:36:30.820
So as I said, I'll put
a whole bunch of links

00:36:30.820 --> 00:36:35.000
to videos, and to blogs, and to
websites up on Spaces shortly

00:36:35.000 --> 00:36:36.530
after this talk.

00:36:36.530 --> 00:36:39.080
I just ran out of time.

00:36:39.080 --> 00:36:40.110
Thanks very much.

00:36:40.110 --> 00:36:42.560
I'll be around for a little
while, but thank you.

00:36:43.760 --> 00:36:49.510
[MUSIC PLAYING]

