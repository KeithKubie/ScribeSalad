WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.332
[APPLAUSE]

00:00:01.332 --> 00:00:02.790
ERIC WOERNER: So
that picture of me

00:00:02.790 --> 00:00:04.950
that was up there
before this started

00:00:04.950 --> 00:00:07.980
was back in 2015, when I
was lucky enough to present

00:00:07.980 --> 00:00:09.747
at the first Dart summit.

00:00:09.747 --> 00:00:12.330
As you can see, there's not the
gray hair, up in that picture.

00:00:12.330 --> 00:00:15.660
That is not a direct reflection
from working on AngularDart.

00:00:15.660 --> 00:00:17.550
It's exactly the
opposite, actually.

00:00:17.550 --> 00:00:19.620
So I'm Eric Woerner.

00:00:19.620 --> 00:00:21.662
I work at Trustwave on
the portal infrastructure,

00:00:21.662 --> 00:00:24.244
and today, we're going to talk
about the power of AngularDart,

00:00:24.244 --> 00:00:25.680
and how we built
out our Customer

00:00:25.680 --> 00:00:28.197
Portal taking advantage of it.

00:00:28.197 --> 00:00:30.780
So let's go over a little bit,
at the beginning, of what we're

00:00:30.780 --> 00:00:31.590
going to cover.

00:00:31.590 --> 00:00:34.290
So first, we'll talk about
building out a large scale

00:00:34.290 --> 00:00:37.200
portal, and what that means for
Trustwave portal development--

00:00:37.200 --> 00:00:39.540
to kind of set the landscape,
and the view that we're

00:00:39.540 --> 00:00:40.666
looking at.

00:00:40.666 --> 00:00:42.540
And then we'll look into
what we were looking

00:00:42.540 --> 00:00:45.180
for when we went into
a new UI initiative

00:00:45.180 --> 00:00:48.900
to get off of our legacy
technology we were using.

00:00:48.900 --> 00:00:51.720
Then we'll look at what did
we consider at that time, when

00:00:51.720 --> 00:00:53.970
we were going down this
endeavor-- what was out there,

00:00:53.970 --> 00:00:55.470
what was in the
landscape, before we

00:00:55.470 --> 00:00:59.310
made the wise choice of
picking Dart and AngularDart.

00:00:59.310 --> 00:01:01.710
And then we'll jump into
what we've taken advantage

00:01:01.710 --> 00:01:03.720
with in Dart, as
far as building out

00:01:03.720 --> 00:01:06.950
a base component for our
teams to use to develop with.

00:01:06.950 --> 00:01:09.360
Taking advantage of routing
and deferred loading,

00:01:09.360 --> 00:01:11.670
to lazy-load our portal
as it goes through,

00:01:11.670 --> 00:01:13.620
as the customer goes
through our portal.

00:01:13.620 --> 00:01:15.330
Taking advantage
of UI components

00:01:15.330 --> 00:01:17.640
and building those out
for our teams to use.

00:01:17.640 --> 00:01:20.100
And then, also, the tools that
we have taken advantage of,

00:01:20.100 --> 00:01:24.110
and why we chose
Dart to begin with.

00:01:24.110 --> 00:01:25.490
So Trustwave portal development.

00:01:25.490 --> 00:01:27.750
We have a large-scale
portal that we build,

00:01:27.750 --> 00:01:30.720
that has about 15
distributed teams--

00:01:30.720 --> 00:01:32.880
that is about 50-plus
developers that

00:01:32.880 --> 00:01:35.070
are divided across these teams.

00:01:35.070 --> 00:01:38.850
And they build about 35
different applications that

00:01:38.850 --> 00:01:41.850
take advantage of 1,000-plus
Java services that we've built

00:01:41.850 --> 00:01:43.685
on the back end, using Spring.

00:01:43.685 --> 00:01:45.810
Some of those are part of
our portal infrastructure

00:01:45.810 --> 00:01:47.580
that we build out,
but a lot of them

00:01:47.580 --> 00:01:49.050
are from our product
service teams,

00:01:49.050 --> 00:01:51.840
for the services that need
to support the views that are

00:01:51.840 --> 00:01:53.820
built out for those products.

00:01:53.820 --> 00:01:56.640
We have 40,000
unique global users

00:01:56.640 --> 00:01:58.170
that log into our portal--

00:01:58.170 --> 00:02:00.340
one portal-- on a daily basis.

00:02:00.340 --> 00:02:03.060
So all this is brought together
from our team development that

00:02:03.060 --> 00:02:05.070
takes place, and
we've got to make sure

00:02:05.070 --> 00:02:08.280
that we bring it into one
build, and leverage whatever

00:02:08.280 --> 00:02:10.770
technology we're using to build
out some sort of framework

00:02:10.770 --> 00:02:14.170
that the teams can
take advantage of.

00:02:14.170 --> 00:02:15.690
So we'll go back a little bit.

00:02:15.690 --> 00:02:17.610
It was 2013.

00:02:17.610 --> 00:02:19.890
We had a legacy portal
that was built off

00:02:19.890 --> 00:02:21.930
of using flex with Flash.

00:02:21.930 --> 00:02:24.330
And we all know what's happened
with Flash-- it's died.

00:02:24.330 --> 00:02:25.110
It's dead.

00:02:25.110 --> 00:02:27.380
The browsers have caught
up with what we could

00:02:27.380 --> 00:02:28.800
take advantage of at that time.

00:02:28.800 --> 00:02:31.145
It was a good choice, back
then, but the browsers

00:02:31.145 --> 00:02:31.770
have caught up.

00:02:31.770 --> 00:02:33.795
So we were looking
for what's next?

00:02:33.795 --> 00:02:34.920
What are we going to go to?

00:02:34.920 --> 00:02:36.990
So what were we looking
at at that time?

00:02:36.990 --> 00:02:38.160
There was, you know,
the team development

00:02:38.160 --> 00:02:39.826
we had to take advantage
of, but we also

00:02:39.826 --> 00:02:42.329
had to look at new
requirements coming in.

00:02:42.329 --> 00:02:44.370
So we wanted to make sure
that we could build out

00:02:44.370 --> 00:02:47.250
a portal framework, and that
for our customer experience when

00:02:47.250 --> 00:02:49.811
they came to our portal, they
had a quick initial startup

00:02:49.811 --> 00:02:50.310
time.

00:02:50.310 --> 00:02:52.770
We didn't want them
sitting there and waiting

00:02:52.770 --> 00:02:54.240
for the download to take place.

00:02:54.240 --> 00:02:56.400
We wanted it to pop
up quickly for them.

00:02:56.400 --> 00:02:59.610
That means also we wanted
to lazy-load our portal.

00:02:59.610 --> 00:03:01.470
The teams, as they
work on these views

00:03:01.470 --> 00:03:03.660
that they're putting
together for their products,

00:03:03.660 --> 00:03:05.580
we don't want it to
download all at once,

00:03:05.580 --> 00:03:08.220
and have this big memory
footprint within the browser--

00:03:08.220 --> 00:03:10.290
we want to incrementally
grow the portal

00:03:10.290 --> 00:03:12.480
as the user goes through it.

00:03:12.480 --> 00:03:14.855
We want it to be fast rendering
within our UI components,

00:03:14.855 --> 00:03:16.688
so there's not a lot
of waiting for the user

00:03:16.688 --> 00:03:17.820
as they click through.

00:03:17.820 --> 00:03:19.570
And we want to take
advantage of something

00:03:19.570 --> 00:03:22.350
that we called in the past "deep
linking"-- where we can send

00:03:22.350 --> 00:03:25.432
URLs to our customers that
they can click on and go right

00:03:25.432 --> 00:03:27.890
to the area within the portal,
so they don't have to log in

00:03:27.890 --> 00:03:29.284
and dive in from there.

00:03:29.284 --> 00:03:31.200
And also, that they could
bookmark these URLs,

00:03:31.200 --> 00:03:33.200
to get back quickly to
the area that they wanted

00:03:33.200 --> 00:03:35.556
to go to within our portal.

00:03:35.556 --> 00:03:36.930
Then there's the
team development

00:03:36.930 --> 00:03:38.820
that we discussed previously.

00:03:38.820 --> 00:03:41.040
We have a unique look
and feel at Trustwave

00:03:41.040 --> 00:03:43.510
that we go off of
for our portal.

00:03:43.510 --> 00:03:46.140
So we want to make sure we have
a set of shared UI components

00:03:46.140 --> 00:03:48.330
that the teams can
use, that are built

00:03:48.330 --> 00:03:50.294
in a consistent manner
with the proper style--

00:03:50.294 --> 00:03:52.710
so they don't have to worry
about that when they build out

00:03:52.710 --> 00:03:53.980
their products.

00:03:53.980 --> 00:03:56.100
This goes along with,
also, a base component

00:03:56.100 --> 00:03:58.980
that they can leverage and use,
as well, that they can rely on,

00:03:58.980 --> 00:04:00.600
that's going to
build in and bring

00:04:00.600 --> 00:04:02.850
in services for
their base things,

00:04:02.850 --> 00:04:04.392
like security and
locale information,

00:04:04.392 --> 00:04:06.475
that they don't have to
worry about on their side,

00:04:06.475 --> 00:04:08.610
so they can concentrate
on their product.

00:04:08.610 --> 00:04:10.650
We wanted to have
quick dev cycles.

00:04:10.650 --> 00:04:14.040
We want to have our developers
be able to make changes,

00:04:14.040 --> 00:04:15.960
see it in the
browser right away,

00:04:15.960 --> 00:04:17.760
and not have to wait
for some compile step

00:04:17.760 --> 00:04:20.220
to take place before they can
see what their change was,

00:04:20.220 --> 00:04:22.244
so we can deliver quicker.

00:04:22.244 --> 00:04:24.660
A short learning curve was
something that was on our list,

00:04:24.660 --> 00:04:25.590
as well.

00:04:25.590 --> 00:04:28.525
We have-- a lot of our
developers are both,

00:04:28.525 --> 00:04:30.150
you know, back end
developers, and then

00:04:30.150 --> 00:04:31.650
we have purely UI developers.

00:04:31.650 --> 00:04:33.976
But most of them work
full-stack development.

00:04:33.976 --> 00:04:35.850
So we wanted to make
sure whatever technology

00:04:35.850 --> 00:04:38.797
we picked was intuitive to them,
and there was a short learning

00:04:38.797 --> 00:04:41.130
curve, so they could come up
to speed quickly, and start

00:04:41.130 --> 00:04:42.060
building this out.

00:04:42.060 --> 00:04:44.040
And then, of course,
testing involved in it.

00:04:44.040 --> 00:04:45.600
The components we
build on our team

00:04:45.600 --> 00:04:46.620
and the portal
infrastructure, we

00:04:46.620 --> 00:04:48.078
want to make sure
we can test them,

00:04:48.078 --> 00:04:50.540
so we supply out good
components for our teams to use.

00:04:50.540 --> 00:04:52.290
And then you look into
the tools that need

00:04:52.290 --> 00:04:53.440
to come with this, as well.

00:04:53.440 --> 00:04:54.814
If we have this
team development,

00:04:54.814 --> 00:04:57.419
we need to make sure that we
can have core sets of libraries,

00:04:57.419 --> 00:04:59.710
and we can bring this all
into one build that goes out.

00:04:59.710 --> 00:05:01.210
So we need the
dependency management

00:05:01.210 --> 00:05:04.560
on top of it, a good
IDE integration,

00:05:04.560 --> 00:05:06.540
and then be able to do
continuous integration

00:05:06.540 --> 00:05:09.310
builds out to our test
areas with our dev ops team,

00:05:09.310 --> 00:05:13.450
and the pod ops
teams to production.

00:05:13.450 --> 00:05:16.594
So, back in 2013, when
we looked into this,

00:05:16.594 --> 00:05:18.510
you can see there's just
a plethora of choices

00:05:18.510 --> 00:05:20.880
out there that we
could pick from.

00:05:20.880 --> 00:05:23.850
So, you know, most of these
are JavaScript frameworks.

00:05:23.850 --> 00:05:25.440
And that, right off
the bat, kind of

00:05:25.440 --> 00:05:27.160
made me sick to my
stomach a little bit,

00:05:27.160 --> 00:05:28.701
when you look at
the team development

00:05:28.701 --> 00:05:30.954
we were doing in trying
to bring this together.

00:05:30.954 --> 00:05:33.120
And then, also, you know,
there was GWT at the time.

00:05:33.120 --> 00:05:34.950
And we could have gone
backwards and went that way,

00:05:34.950 --> 00:05:36.575
but we wanted to pick
a technology that

00:05:36.575 --> 00:05:39.420
was going to stay in the front,
and keep up with the times,

00:05:39.420 --> 00:05:41.437
and always increase, and
get better and better.

00:05:41.437 --> 00:05:43.770
And something that we can
stay out of the spaghetti code

00:05:43.770 --> 00:05:46.500
land of JavaScript, where
building that-- bringing that

00:05:46.500 --> 00:05:48.000
into one build-in
going forward just

00:05:48.000 --> 00:05:52.030
made me kind of
quiver, a little bit.

00:05:52.030 --> 00:05:54.370
So say hello to Dart
and AngularDart.

00:05:54.370 --> 00:05:56.080
So it's back in 2013, again.

00:05:56.080 --> 00:05:57.710
I keep going back
in the time machine.

00:05:57.710 --> 00:05:59.710
And we're sitting there,
and we say, hey, look--

00:05:59.710 --> 00:06:00.850
the dart SDK is out here.

00:06:00.850 --> 00:06:02.150
Let's check it out.

00:06:02.150 --> 00:06:04.340
So what we started doing
is some prototyping,

00:06:04.340 --> 00:06:06.430
and then we started doing
some brown bags internal

00:06:06.430 --> 00:06:07.927
with our engineering teams.

00:06:07.927 --> 00:06:09.760
And we were building
just some command line,

00:06:09.760 --> 00:06:11.560
talking to web sockets,
and bringing it in.

00:06:11.560 --> 00:06:15.010
This was even before the
package HTML was out there

00:06:15.010 --> 00:06:16.600
for building any type of UI.

00:06:16.600 --> 00:06:18.910
So what did we
discover at that point?

00:06:18.910 --> 00:06:22.120
Well, we discovered that
this is a complete SDK

00:06:22.120 --> 00:06:24.490
with a core set of
libraries and tools

00:06:24.490 --> 00:06:27.400
that we could leverage for
building out our portal,

00:06:27.400 --> 00:06:28.670
going forward.

00:06:28.670 --> 00:06:31.174
It was very-- it supports
high-quality tools,

00:06:31.174 --> 00:06:32.215
large scale, like I said.

00:06:32.215 --> 00:06:33.550
And then extensive
libraries that

00:06:33.550 --> 00:06:35.091
were out there, that
we could pick up

00:06:35.091 --> 00:06:36.850
from other people
that are contributing

00:06:36.850 --> 00:06:38.525
third-party libraries.

00:06:38.525 --> 00:06:40.900
So this was something that,
coming from a background that

00:06:40.900 --> 00:06:43.720
we have-- some Java developers--
or no matter what software

00:06:43.720 --> 00:06:45.590
language you were coming from--

00:06:45.590 --> 00:06:47.590
we were getting feedback
through the brown bags,

00:06:47.590 --> 00:06:49.240
like, this is very
intuitive for me.

00:06:49.240 --> 00:06:50.710
I can pick this up very quickly.

00:06:50.710 --> 00:06:52.960
And it has everything that
I've leveraged in the past,

00:06:52.960 --> 00:06:55.085
in other languages, and I
can take advantage of it.

00:06:55.085 --> 00:06:57.335
And I don't have to play
around in the JavaScript land

00:06:57.335 --> 00:06:58.120
on these things.

00:06:58.120 --> 00:07:00.230
It has a great cross-compile
over to JavaScript.

00:07:00.230 --> 00:07:01.480
It was like, oh, that's great.

00:07:01.480 --> 00:07:02.620
Because we've got
to make sure that we

00:07:02.620 --> 00:07:05.259
can support all the major
browsers that are out there.

00:07:05.259 --> 00:07:07.300
And then the one that
really sold us, at the end,

00:07:07.300 --> 00:07:09.970
is when the switch came in
Dart to go to Strong Mode.

00:07:09.970 --> 00:07:11.380
We were already
building out Dart

00:07:11.380 --> 00:07:13.492
to be very strongly-typed
for building

00:07:13.492 --> 00:07:14.950
with the other
developers that were

00:07:14.950 --> 00:07:17.830
used to this from the languages
they'd built in the past.

00:07:17.830 --> 00:07:20.617
So when Dart made the decision
to go full Strong Mode,

00:07:20.617 --> 00:07:23.200
it just hooked us even more as
we started going down the pipe,

00:07:23.200 --> 00:07:24.800
and those announcements
kept going,

00:07:24.800 --> 00:07:26.290
and it was evolving over.

00:07:26.290 --> 00:07:28.730
So now that we'd picked the
Dart SDK, and we're like, OK,

00:07:28.730 --> 00:07:31.480
this is what we're going to use,
we still needed a web framework

00:07:31.480 --> 00:07:32.900
to go on top of it.

00:07:32.900 --> 00:07:35.530
So we started looking into
Angular, all the way back

00:07:35.530 --> 00:07:36.850
at Angular 1.0.

00:07:36.850 --> 00:07:38.890
And that's the initial
prototype, and actually

00:07:38.890 --> 00:07:41.200
the initial portal that we
were launching internal,

00:07:41.200 --> 00:07:42.430
that we built off of.

00:07:42.430 --> 00:07:44.720
So why did we like
Angular so much?

00:07:44.720 --> 00:07:47.320
Well, this is just piggybacking
off of what Matan was talking

00:07:47.320 --> 00:07:50.260
about earlier-- is that, based
off the templates and the event

00:07:50.260 --> 00:07:51.280
bindings--

00:07:51.280 --> 00:07:52.330
events and bindings.

00:07:52.330 --> 00:07:55.090
The routing,
dependency injection--

00:07:55.090 --> 00:07:56.710
everybody in our
company that's worked

00:07:56.710 --> 00:07:59.334
on services on the back end, it
was all within Java and Spring.

00:07:59.334 --> 00:08:02.625
So they understood dependency
injection, and the power of it.

00:08:02.625 --> 00:08:03.250
And then Pipes.

00:08:03.250 --> 00:08:06.567
And then Angular Components
was announced last year.

00:08:06.567 --> 00:08:08.150
And it came out, and
it's like, great.

00:08:08.150 --> 00:08:10.720
Now we have a core set of
libraries we can share.

00:08:10.720 --> 00:08:14.200
So we've watched Angular
evolve from 1.0 to 2,

00:08:14.200 --> 00:08:16.510
getting broke off to
being internal to Dart

00:08:16.510 --> 00:08:18.100
and getting off the
JavaScript builds.

00:08:18.100 --> 00:08:21.100
And we've seen over
time how it's increased.

00:08:21.100 --> 00:08:22.600
Code size has shrunk.

00:08:22.600 --> 00:08:24.781
Speed of download has
gotten better and better.

00:08:24.781 --> 00:08:26.530
And we've seen the
improvements that we've

00:08:26.530 --> 00:08:28.030
built out our portal.

00:08:28.030 --> 00:08:30.280
So we're very happy, at this
point, the decision we've

00:08:30.280 --> 00:08:33.820
made, because it's made us
very quick and up-to-speed

00:08:33.820 --> 00:08:36.309
on where the browser
is going, and also

00:08:36.309 --> 00:08:39.010
being able to leverage
using Dart and AngularDart

00:08:39.010 --> 00:08:42.340
to meeting our requirements.

00:08:42.340 --> 00:08:44.980
So Andrew is a developer
that's on my team,

00:08:44.980 --> 00:08:46.690
on the portal
infrastructure side.

00:08:46.690 --> 00:08:49.060
And he came to us from
a JavaScript background,

00:08:49.060 --> 00:08:50.790
and a NET background.

00:08:50.790 --> 00:08:52.540
And he was able to
pick it up, and come up

00:08:52.540 --> 00:08:53.690
to speed very quickly.

00:08:53.690 --> 00:08:55.720
He discovered that he's
not battling things

00:08:55.720 --> 00:08:58.480
that were in JavaScript before,
but Dart, just coding it,

00:08:58.480 --> 00:09:01.490
worked the way it was supposed
to work, out of the box.

00:09:01.490 --> 00:09:05.660
So this is just proof that he
came in, he got up to speed--

00:09:05.660 --> 00:09:07.060
he was delivering
components that

00:09:07.060 --> 00:09:10.170
were production-ready in
about two to three weeks.

00:09:10.170 --> 00:09:12.040
And our teams were
starting to use them.

00:09:12.040 --> 00:09:14.123
So it's a very nice language,
that you can come up

00:09:14.123 --> 00:09:16.240
to speed very quickly.

00:09:16.240 --> 00:09:17.980
And then Keith is
on the other side.

00:09:17.980 --> 00:09:20.495
And he's been at Trustwave
for years, all the way back

00:09:20.495 --> 00:09:21.370
to our legacy portal.

00:09:21.370 --> 00:09:23.560
And he comes from
a Java background.

00:09:23.560 --> 00:09:26.600
And on the Java side, it's
the same type of experience.

00:09:26.600 --> 00:09:28.900
It didn't matter what
software language background

00:09:28.900 --> 00:09:30.220
you were coming from.

00:09:30.220 --> 00:09:33.100
Picking up Dart was intuitive,
and quick to pick up,

00:09:33.100 --> 00:09:36.530
and you can deliver quickly.

00:09:36.530 --> 00:09:40.990
So now that we've decided
on Dart and AngularDart,

00:09:40.990 --> 00:09:42.730
we also, during
this UI initiative

00:09:42.730 --> 00:09:44.140
that we were going
off, we wanted

00:09:44.140 --> 00:09:46.690
to rethink our portal design.

00:09:46.690 --> 00:09:49.780
Our legacy portal was
built off of the concept

00:09:49.780 --> 00:09:54.100
of each application was its
own module that would load in.

00:09:54.100 --> 00:09:56.590
But we wanted to break
this down to our customer,

00:09:56.590 --> 00:09:59.200
not by what products
they were provisioned to,

00:09:59.200 --> 00:10:02.410
but more intuitive-looking
areas within our portal,

00:10:02.410 --> 00:10:04.900
and that top blue area,
that they are accustomed

00:10:04.900 --> 00:10:06.740
to across their products.

00:10:06.740 --> 00:10:09.490
So this is just a small subset,
at the top of the blue area,

00:10:09.490 --> 00:10:11.950
of, like, Home, Assets,
Findings, Support,

00:10:11.950 --> 00:10:15.040
that you can find at the
top of our navigation.

00:10:15.040 --> 00:10:17.950
Below there, depending
on what section you pick,

00:10:17.950 --> 00:10:19.760
you would get a set of menus.

00:10:19.760 --> 00:10:23.050
This is where a user is
provisioned to certain--

00:10:23.050 --> 00:10:25.720
based off the products they
have, what menus they will get.

00:10:25.720 --> 00:10:27.910
So our portal kind of grows
for them as they log in.

00:10:27.910 --> 00:10:30.243
So they could just maybe have
Home and Assets, or Assets

00:10:30.243 --> 00:10:32.950
and Findings, and the menus
that are underneath there.

00:10:32.950 --> 00:10:35.690
From there, if the user
clicks on one of those menus,

00:10:35.690 --> 00:10:37.631
this is where the team
development comes in--

00:10:37.631 --> 00:10:39.880
that the product team has
built one of these elements,

00:10:39.880 --> 00:10:42.410
and it loads within the
stage from that point.

00:10:42.410 --> 00:10:45.640
So this is the vision
that we had going forward,

00:10:45.640 --> 00:10:47.410
when we wanted to
build out this new UI,

00:10:47.410 --> 00:10:49.670
and the approach that
we wanted to take.

00:10:49.670 --> 00:10:53.620
So how did we use Dart
and AngularDart to achieve

00:10:53.620 --> 00:10:56.050
this vision that we had?

00:10:56.050 --> 00:10:57.430
Well, first thing
it came down to

00:10:57.430 --> 00:10:59.590
was building a base component.

00:10:59.590 --> 00:11:01.960
We needed to contract
with our development teams

00:11:01.960 --> 00:11:04.210
that we knew, when this
component loaded in,

00:11:04.210 --> 00:11:06.970
we knew how to interact with it.

00:11:06.970 --> 00:11:09.160
Also, this base component
needed to make sure

00:11:09.160 --> 00:11:12.850
that it took care of some of
the base lifecycle events,

00:11:12.850 --> 00:11:15.550
and we can hook into
them for loading things

00:11:15.550 --> 00:11:17.980
for the user-- such
as locale information,

00:11:17.980 --> 00:11:21.790
because we're a global company,
or security information,

00:11:21.790 --> 00:11:24.064
or properties information.

00:11:24.064 --> 00:11:26.230
We didn't want to have each
one of these development

00:11:26.230 --> 00:11:28.069
teams doing this on their own.

00:11:28.069 --> 00:11:29.860
They should just
concentrate on the product

00:11:29.860 --> 00:11:30.952
that they build out.

00:11:30.952 --> 00:11:32.410
And this has always
been our vision

00:11:32.410 --> 00:11:34.960
of how we build a
portal infrastructure.

00:11:34.960 --> 00:11:36.640
So within this class
that we built out,

00:11:36.640 --> 00:11:39.290
this base portal
component, you have--

00:11:39.290 --> 00:11:43.390
it implements base
Angular lifecycle events.

00:11:43.390 --> 00:11:46.360
With true inheritance that comes
with-- since the Angular 4 came

00:11:46.360 --> 00:11:48.370
out with components--
now, teams don't

00:11:48.370 --> 00:11:50.955
have to worry about implementing
these lifecycle events.

00:11:50.955 --> 00:11:52.330
They can still
get hooks in them,

00:11:52.330 --> 00:11:55.170
but we wanted to have this
in the base component,

00:11:55.170 --> 00:11:56.680
so we can tie into them.

00:11:56.680 --> 00:11:59.860
So you look on the ngOninit
override that we have--

00:11:59.860 --> 00:12:02.950
this is where we load in
locale information that's

00:12:02.950 --> 00:12:05.320
been specified by the
implementing component,

00:12:05.320 --> 00:12:08.434
security information, and
properties information.

00:12:08.434 --> 00:12:09.850
And then, based
off this component

00:12:09.850 --> 00:12:11.224
I'll show on the
next slide, they

00:12:11.224 --> 00:12:13.250
have hooks into when this
information is loaded.

00:12:13.250 --> 00:12:16.570
So they can react to it
within their implemented view.

00:12:16.570 --> 00:12:19.120
Also within here, we
have a component service

00:12:19.120 --> 00:12:21.790
taking advantage of
dependency injection.

00:12:21.790 --> 00:12:23.670
This allows us, on this
component service--

00:12:23.670 --> 00:12:25.810
it binds multiple
services into it,

00:12:25.810 --> 00:12:28.250
so then it's dependency-injected
into our base component

00:12:28.250 --> 00:12:31.090
for things such as routing,
and other services we need

00:12:31.090 --> 00:12:33.410
to call on our base component.

00:12:33.410 --> 00:12:35.680
So now, we have this base
component ready to go.

00:12:35.680 --> 00:12:37.430
The teams can implement
and go from there.

00:12:37.430 --> 00:12:39.100
And they can rely
on knowing that they

00:12:39.100 --> 00:12:41.590
have this base functionality
they can take advantage of.

00:12:41.590 --> 00:12:44.290
So how does a team
implement this?

00:12:44.290 --> 00:12:46.630
So now, the developer's
teams basically

00:12:46.630 --> 00:12:50.140
extend off of the
base portal component.

00:12:50.140 --> 00:12:53.089
This is an example from
the assets search component

00:12:53.089 --> 00:12:54.380
that we have within our portal.

00:12:54.380 --> 00:12:56.950
So this is a menu of a
component that would line up

00:12:56.950 --> 00:12:59.310
under the area of assets.

00:12:59.310 --> 00:13:01.540
And within here, we still
do the dependency injection

00:13:01.540 --> 00:13:04.450
of the component service, so we
can get to the base component,

00:13:04.450 --> 00:13:05.860
so it has a handle on it.

00:13:05.860 --> 00:13:07.600
But then you look
at three overrides

00:13:07.600 --> 00:13:10.390
that were within this class
of the implementation.

00:13:10.390 --> 00:13:13.320
You have onLocaleLoaded,
onSecurityLoaded,

00:13:13.320 --> 00:13:14.420
and onPropertiesLoaded.

00:13:14.420 --> 00:13:16.295
So the one we're going
look at, specifically,

00:13:16.295 --> 00:13:19.150
is the implementation
under SecurityLoaded.

00:13:19.150 --> 00:13:22.420
So this function is going to be
called from the base component

00:13:22.420 --> 00:13:25.430
once the security information
is loaded for this component.

00:13:25.430 --> 00:13:27.700
So this team that's
developing this view

00:13:27.700 --> 00:13:29.290
can rely on, at that point--

00:13:29.290 --> 00:13:32.830
hey, I need to check
permission on a resource,

00:13:32.830 --> 00:13:34.750
and whether they have
the execute permission

00:13:34.750 --> 00:13:35.820
for the Search button.

00:13:35.820 --> 00:13:38.386
The IsPermitted method comes
off the base component, as well,

00:13:38.386 --> 00:13:40.510
so they don't have to be
looking through that cache

00:13:40.510 --> 00:13:41.810
to find that out.

00:13:41.810 --> 00:13:43.600
So now, the team
can rely on-- hey,

00:13:43.600 --> 00:13:47.170
let me do that check for that
resource, tie it to a buoy,

00:13:47.170 --> 00:13:49.360
and then I can tie it to
my backing HTML template

00:13:49.360 --> 00:13:52.960
with binding, and that button
is going to be enabled, or not.

00:13:52.960 --> 00:13:54.740
Now we have this base component.

00:13:54.740 --> 00:13:56.530
We know how to
communicate with it.

00:13:56.530 --> 00:13:59.510
It's got a contract within
our portal framework.

00:13:59.510 --> 00:14:01.720
So now our teams can
build independently,

00:14:01.720 --> 00:14:04.630
and know, when we go to the main
deployment, and it goes out,

00:14:04.630 --> 00:14:08.222
that component is going
to work correctly.

00:14:08.222 --> 00:14:09.430
But they built that out, now.

00:14:09.430 --> 00:14:12.090
How do we go about loading
it into our portal?

00:14:12.090 --> 00:14:13.920
And also, initially,
I was talking about,

00:14:13.920 --> 00:14:17.160
well, we want to make sure that
we keep the initial download

00:14:17.160 --> 00:14:20.280
time for our portal very quick,
and we want to lazy-load things

00:14:20.280 --> 00:14:20.981
in.

00:14:20.981 --> 00:14:22.980
Well, this is where we
take advantage of routing

00:14:22.980 --> 00:14:25.360
and deferred loading
within our portal.

00:14:25.360 --> 00:14:27.450
So the top URL, there, you see--

00:14:27.450 --> 00:14:29.950
this goes into our
production environment.

00:14:29.950 --> 00:14:31.660
And you have the
bolded assets first,

00:14:31.660 --> 00:14:33.600
that ties to the top menu area.

00:14:33.600 --> 00:14:35.640
So that means when
that route comes in,

00:14:35.640 --> 00:14:38.100
whether they clicked on it or
whether there was a bookmark,

00:14:38.100 --> 00:14:40.530
it's going to highlight
the blue assets area,

00:14:40.530 --> 00:14:42.356
at the top, that
has been selected.

00:14:42.356 --> 00:14:43.730
From there, we
need to know well,

00:14:43.730 --> 00:14:46.740
what's the menu underneath that
area that we want to go to?

00:14:46.740 --> 00:14:49.200
Well, it's the Search area
for the asset search--

00:14:49.200 --> 00:14:53.160
that's where the bolded area
on the end of the URL is.

00:14:53.160 --> 00:14:55.590
So, no matter how they
got to this destination,

00:14:55.590 --> 00:14:58.440
it routed to this area
within the portal.

00:14:58.440 --> 00:15:01.950
Now, the search is tied
to a specific element

00:15:01.950 --> 00:15:04.482
name that's been developed
by one of our teams.

00:15:04.482 --> 00:15:06.690
And that's how we determine,
at that point, wow-- ok,

00:15:06.690 --> 00:15:07.860
we have this element.

00:15:07.860 --> 00:15:09.500
We need to put
this on the stage.

00:15:09.500 --> 00:15:11.910
But we want to make sure,
when we load that in,

00:15:11.910 --> 00:15:14.625
that it's just not already
in the JavaScript file

00:15:14.625 --> 00:15:17.250
that's initially downloaded-- we
want to make sure we load that

00:15:17.250 --> 00:15:20.070
in at the point that the
customer or user wants

00:15:20.070 --> 00:15:21.424
to access it.

00:15:21.424 --> 00:15:23.340
So that's the point we
wanted to defer load it

00:15:23.340 --> 00:15:24.530
into the elements stage.

00:15:27.600 --> 00:15:29.060
So how do we do that?

00:15:29.060 --> 00:15:31.160
So this comes with
deferred loading.

00:15:31.160 --> 00:15:33.530
So the first thing you're
going to see, at the top,

00:15:33.530 --> 00:15:36.080
is you're going to
import in your file

00:15:36.080 --> 00:15:38.780
that the asset search
component is within.

00:15:38.780 --> 00:15:41.840
But I'm not importing
the assets search file.

00:15:41.840 --> 00:15:45.230
I'm importing the template
file, that's not there

00:15:45.230 --> 00:15:47.199
until it goes through
the compile time step.

00:15:47.199 --> 00:15:48.990
So this isn't here
during development time,

00:15:48.990 --> 00:15:50.964
but it's there at runtime.

00:15:50.964 --> 00:15:52.880
So we want to make sure
that the first comment

00:15:52.880 --> 00:15:54.390
at the top of this file--

00:15:54.390 --> 00:15:56.030
this is just basically
telling the IDE

00:15:56.030 --> 00:15:57.650
and the Dart analyzer, hey--

00:15:57.650 --> 00:15:58.550
ignore this.

00:15:58.550 --> 00:16:00.150
I know it's not
here, at this point,

00:16:00.150 --> 00:16:02.591
so don't give me a nice,
red squiggly underneath it.

00:16:02.591 --> 00:16:03.090
Ignore it.

00:16:03.090 --> 00:16:05.300
It's going to be
there at runtime.

00:16:05.300 --> 00:16:06.800
But underneath
there, you don't just

00:16:06.800 --> 00:16:08.750
import this as a
regular library.

00:16:08.750 --> 00:16:10.004
We want to defer load this in.

00:16:10.004 --> 00:16:11.420
So we want to make
sure that we're

00:16:11.420 --> 00:16:14.090
telling the compiler that,
hey-- don't include this

00:16:14.090 --> 00:16:15.860
in the main JavaScript file.

00:16:15.860 --> 00:16:18.530
Create a part file that can
be loaded in during runtime,

00:16:18.530 --> 00:16:19.980
when it needs to be accessed.

00:16:19.980 --> 00:16:22.565
So that's where the
DeferredAs, and we name it off

00:16:22.565 --> 00:16:25.130
as assets search view.

00:16:25.130 --> 00:16:27.770
So now we have it
deferred, but now we

00:16:27.770 --> 00:16:30.270
need to make sure-- how do we
load this in using Angular,

00:16:30.270 --> 00:16:32.732
and make sure it shows up in
the UI when we go through?

00:16:32.732 --> 00:16:34.440
Well, the next point
that we have in here

00:16:34.440 --> 00:16:37.370
is, we have an app view child
annotation, that's basically

00:16:37.370 --> 00:16:39.440
saying, I'm looking for
a marker in the back HTML

00:16:39.440 --> 00:16:42.110
to a named element called Stage.

00:16:42.110 --> 00:16:45.350
And I want to bring that in
as a view container reference,

00:16:45.350 --> 00:16:46.650
and I'll call that Stage.

00:16:46.650 --> 00:16:49.700
So now, I just have a hook on
an element in my backing HTML,

00:16:49.700 --> 00:16:52.190
and this is where I'm going
to load my component next to,

00:16:52.190 --> 00:16:53.780
at this point.

00:16:53.780 --> 00:16:56.030
Next, I've got to make sure
that I have the component

00:16:56.030 --> 00:16:58.490
loader from Angular
dependency-injected

00:16:58.490 --> 00:17:00.664
with into my stage
component, here.

00:17:00.664 --> 00:17:03.080
So I make sure that there is
dependency injection bringing

00:17:03.080 --> 00:17:03.663
in the loader.

00:17:03.663 --> 00:17:05.746
So now I have a
handle on the loader.

00:17:05.746 --> 00:17:06.829
So now-- just real quick--

00:17:06.829 --> 00:17:07.790
I should've said this
at the beginning.

00:17:07.790 --> 00:17:10.170
This is really shrunk down, just
to show the relevant pieces.

00:17:10.170 --> 00:17:11.339
There's other things that go on.

00:17:11.339 --> 00:17:12.797
But I just shrunk
this down to what

00:17:12.797 --> 00:17:15.630
we need to show
to have an example

00:17:15.630 --> 00:17:16.790
of the deferred loading.

00:17:16.790 --> 00:17:18.710
So the next step is
there is this Load View

00:17:18.710 --> 00:17:20.310
component with the element.

00:17:20.310 --> 00:17:21.740
So when the menu
is clicked on, I

00:17:21.740 --> 00:17:23.089
know what the element name is.

00:17:23.089 --> 00:17:25.994
And usually, there is a bigger
case, here-- switch case,

00:17:25.994 --> 00:17:28.369
to determine which deferred
library I'm going to load in.

00:17:28.369 --> 00:17:29.410
But I already know, here.

00:17:29.410 --> 00:17:32.870
So I shrunk this down to
loading into asset search view.

00:17:32.870 --> 00:17:35.410
So I need to do an
AsyncAwait at this point,

00:17:35.410 --> 00:17:37.790
and Await for loading
in that library.

00:17:37.790 --> 00:17:40.230
After I have a handle
on that library,

00:17:40.230 --> 00:17:42.050
I need to init the
reflector, which

00:17:42.050 --> 00:17:46.010
is going to tell Angular to
make sure that the component is

00:17:46.010 --> 00:17:48.140
inited, so that I can get
a handle on the component

00:17:48.140 --> 00:17:49.475
factory.

00:17:49.475 --> 00:17:52.100
At the end of this statement, I
get a reference on asset search

00:17:52.100 --> 00:17:53.780
view-- the asset
search component--

00:17:53.780 --> 00:17:55.670
with the bolded
Ngfactory at the end.

00:17:55.670 --> 00:17:56.870
I want to highlight that.

00:17:56.870 --> 00:17:59.210
Because that's another
area that's not there

00:17:59.210 --> 00:18:02.174
during development time, but
will be there during runtime.

00:18:02.174 --> 00:18:04.340
So now you have the handle
on the component factory.

00:18:04.340 --> 00:18:05.381
Its been deferred loaded.

00:18:05.381 --> 00:18:08.690
I have a handle on it within
my backing Dart class.

00:18:08.690 --> 00:18:10.340
But now I need to
call the loader,

00:18:10.340 --> 00:18:12.860
and make sure its
instantiated within the UI.

00:18:12.860 --> 00:18:15.380
So now I load next to
the stage component--

00:18:15.380 --> 00:18:16.801
this component factory--

00:18:16.801 --> 00:18:17.300
boom.

00:18:17.300 --> 00:18:18.091
There-- you got it.

00:18:18.091 --> 00:18:20.150
It's loaded in the
UI for the customer.

00:18:20.150 --> 00:18:22.260
So as they've gone
through our portal,

00:18:22.260 --> 00:18:25.010
it wasn't loaded until
they went to that area.

00:18:25.010 --> 00:18:26.870
So that means a
customer can provision

00:18:26.870 --> 00:18:29.540
for many, many different
views within our portal,

00:18:29.540 --> 00:18:32.271
but we're not going to
download that into the browser,

00:18:32.271 --> 00:18:34.520
and during the time of having
that memory consumption,

00:18:34.520 --> 00:18:37.677
until the user wants
to go to that area.

00:18:37.677 --> 00:18:39.260
So what does this
look like after it's

00:18:39.260 --> 00:18:41.750
gone through the Dart
to JS compile step?

00:18:41.750 --> 00:18:44.540
Well, on the left side, you
see without deferred loading.

00:18:44.540 --> 00:18:47.559
You have one, monolithic,
huge JavaScript file.

00:18:47.559 --> 00:18:49.850
That means that every component
that has been developed

00:18:49.850 --> 00:18:52.379
by our teams is in one file.

00:18:52.379 --> 00:18:54.920
And so, at the beginning of the
portal loading for a customer

00:18:54.920 --> 00:18:57.937
to be one download time, there
is a little spinner that shows.

00:18:57.937 --> 00:18:58.770
And they're waiting.

00:18:58.770 --> 00:19:00.110
They're like, hey--
can this portal load?

00:19:00.110 --> 00:19:00.610
No.

00:19:00.610 --> 00:19:01.664
We want to keep it small.

00:19:01.664 --> 00:19:03.080
So on the right
side, you see it's

00:19:03.080 --> 00:19:06.007
broken up into many, many,
many different part files.

00:19:06.007 --> 00:19:08.340
Those are different part files
from the deferred loading

00:19:08.340 --> 00:19:09.917
as we import these in.

00:19:09.917 --> 00:19:12.500
So this means those aren't going
to be loaded into the browser

00:19:12.500 --> 00:19:13.880
until the user
navigates to them.

00:19:16.770 --> 00:19:19.950
So Tom Smith has been with
us since our legacy time.

00:19:19.950 --> 00:19:22.215
And he's just stating,
here, how great

00:19:22.215 --> 00:19:24.340
it's been to leverage the
portal components that we

00:19:24.340 --> 00:19:27.100
developed within our portal,
taking advantage of Angular.

00:19:27.100 --> 00:19:29.130
And it's made it
easier for our teams

00:19:29.130 --> 00:19:31.657
to work independently, and
come up to speed quickly,

00:19:31.657 --> 00:19:33.240
and know that things
are going to work

00:19:33.240 --> 00:19:34.695
within our portal framework.

00:19:37.950 --> 00:19:40.250
So now that the teams
have this base component,

00:19:40.250 --> 00:19:43.310
what about the UI components
that they need to use?

00:19:43.310 --> 00:19:44.810
I mean, they had
the base component,

00:19:44.810 --> 00:19:46.910
but they still need to
build out the HTML that's

00:19:46.910 --> 00:19:48.950
going to render to our users.

00:19:48.950 --> 00:19:52.220
Well, we have taken advantage
of Angular Components,

00:19:52.220 --> 00:19:54.260
and built out our
own core package.

00:19:54.260 --> 00:19:55.390
It's called UI Angular.

00:19:55.390 --> 00:19:57.080
It houses all of our components.

00:19:57.080 --> 00:19:59.000
We've extended off of
Angular Components,

00:19:59.000 --> 00:20:01.130
because it's very
easy to take advantage

00:20:01.130 --> 00:20:03.050
of different
utilities they have.

00:20:03.050 --> 00:20:05.320
And also, extending off
of just base components,

00:20:05.320 --> 00:20:07.790
to adding more functionality
that we needed proprietary

00:20:07.790 --> 00:20:09.200
to Trustwave.

00:20:09.200 --> 00:20:12.184
Also, we have our own
unique style at Trustwave.

00:20:12.184 --> 00:20:14.600
And Angular Components is built
off the wonderful material

00:20:14.600 --> 00:20:17.300
design, but we have our own
unique style at Trustwave.

00:20:17.300 --> 00:20:19.730
So it's been really easy
for us to put our own styles

00:20:19.730 --> 00:20:21.415
on these components, as well.

00:20:21.415 --> 00:20:22.790
So if you look on
the right side,

00:20:22.790 --> 00:20:25.010
this is just our
demo project, that we

00:20:25.010 --> 00:20:28.272
have internal at our company,
that's just running through all

00:20:28.272 --> 00:20:30.230
the components that we
have leveraged and taken

00:20:30.230 --> 00:20:31.370
advantage of.

00:20:31.370 --> 00:20:32.810
And this is adding
our own styles

00:20:32.810 --> 00:20:35.143
on top of Angular Components,
and some of our own custom

00:20:35.143 --> 00:20:36.230
built components, as well.

00:20:38.830 --> 00:20:40.700
But what if, in
your company, there

00:20:40.700 --> 00:20:42.530
is already a JavaScript
library you have,

00:20:42.530 --> 00:20:45.560
because you're converting
over from JavaScript to Dart?

00:20:45.560 --> 00:20:47.270
Or there's a library
out there that you

00:20:47.270 --> 00:20:50.750
want to take advantage of,
that's not already been ported

00:20:50.750 --> 00:20:52.190
over to Dart or AngularDart?

00:20:52.190 --> 00:20:54.290
Well, don't worry-- you
can still take advantage

00:20:54.290 --> 00:20:55.910
of JavaScript Interop.

00:20:55.910 --> 00:20:58.070
So you can use
JavaScript Interop,

00:20:58.070 --> 00:21:00.350
build your own AngularDart
wrapper around it,

00:21:00.350 --> 00:21:02.480
using that facade
that you built out,

00:21:02.480 --> 00:21:04.997
and take advantage of
that JavaScript library.

00:21:04.997 --> 00:21:06.830
So we've done this for
two of our components

00:21:06.830 --> 00:21:09.290
for charting and for
our richtext editor.

00:21:09.290 --> 00:21:12.980
And this is our portal live in
production, on the right side,

00:21:12.980 --> 00:21:14.630
there-- an animated
GIF that we built.

00:21:14.630 --> 00:21:16.790
And that's showing our
main dashboard views,

00:21:16.790 --> 00:21:20.030
taking advantage of High Charts
through JavaScript Interop.

00:21:23.349 --> 00:21:25.390
But also, we were looking
for, at the beginning--

00:21:25.390 --> 00:21:28.030
we were saying we want the
Tools-IDE IDE integration.

00:21:28.030 --> 00:21:32.076
Well, you get, now, with the
Dart plug-in, within IntelliJ.

00:21:32.076 --> 00:21:33.450
And we take
advantage of IntelliJ

00:21:33.450 --> 00:21:36.300
because we're also a
Java company, as well,

00:21:36.300 --> 00:21:37.390
for our back end services.

00:21:37.390 --> 00:21:40.020
So now our developers
can work within one IDE,

00:21:40.020 --> 00:21:44.220
within IntelliJ, on both
Dart and on our Java side.

00:21:44.220 --> 00:21:46.380
We get the code analysis,
the code completion,

00:21:46.380 --> 00:21:47.820
the refactoring.

00:21:47.820 --> 00:21:50.970
I wasn't able to build a real
complicated GIF, on this side,

00:21:50.970 --> 00:21:53.950
because recording myself coding
just didn't work very well.

00:21:53.950 --> 00:21:55.830
But this is the
Dart reformatting

00:21:55.830 --> 00:21:58.230
that takes place--
the Dart formatter.

00:21:58.230 --> 00:22:00.510
And I have to say, I
love the Dart formatter.

00:22:00.510 --> 00:22:03.240
Coming from the Java side, and
all the battles and arguments

00:22:03.240 --> 00:22:05.469
over formatting, and
going back and forth,

00:22:05.469 --> 00:22:08.010
it's really nice that Dart comes
out with just one formatter.

00:22:08.010 --> 00:22:09.840
And you can tell
the teams, there's

00:22:09.840 --> 00:22:11.580
formatting already within.

00:22:11.580 --> 00:22:12.400
Stick with it.

00:22:12.400 --> 00:22:15.398
We're not going to
come up with our own.

00:22:15.398 --> 00:22:18.290
[APPLAUSE]

00:22:19.260 --> 00:22:22.422
Now the teams have built out
all these different packages.

00:22:22.422 --> 00:22:23.880
And we talked about,
earlier-- it's

00:22:23.880 --> 00:22:25.879
like, we need some sort
of dependency management

00:22:25.879 --> 00:22:27.060
to bring this all together.

00:22:27.060 --> 00:22:29.440
Well, this really sold us
on using Dart, as well.

00:22:29.440 --> 00:22:31.590
We have our own
internal pub server,

00:22:31.590 --> 00:22:34.140
that we publish all the
core packages up to,

00:22:34.140 --> 00:22:36.000
that the teams can
take advantage of.

00:22:36.000 --> 00:22:38.397
And they also publish
their views up,

00:22:38.397 --> 00:22:40.480
so we can bring it into
the main build, that we're

00:22:40.480 --> 00:22:41.950
going to talk about later on.

00:22:41.950 --> 00:22:44.116
So we've fallen in love
with the semantic versioning

00:22:44.116 --> 00:22:47.280
that takes place, that Kevin
was talking about, earlier.

00:22:47.280 --> 00:22:49.620
We use the current
syntax on it, and we

00:22:49.620 --> 00:22:52.890
avoid a lot of breaking changes
and conflicts that come in.

00:22:52.890 --> 00:22:56.310
So on this slide, here, is
just an example of pubspec yaml

00:22:56.310 --> 00:22:58.680
that shows the URLs of
our internal pub server

00:22:58.680 --> 00:23:01.260
that we're taking advantage of
to bring in some of our core

00:23:01.260 --> 00:23:03.920
packages to one of our component
libraries that we build out.

00:23:06.859 --> 00:23:08.400
Now we need to bring
it all together.

00:23:08.400 --> 00:23:09.000
OK?

00:23:09.000 --> 00:23:11.040
The teams have worked
on their views,

00:23:11.040 --> 00:23:13.650
and we need to bring it
in to one, main build.

00:23:13.650 --> 00:23:18.690
So on the right side is our main
pubspec yaml that's in our main

00:23:18.690 --> 00:23:19.860
build.

00:23:19.860 --> 00:23:22.080
I think it's about
35-plus packages

00:23:22.080 --> 00:23:24.590
that we pull in from our
main internal pub server,

00:23:24.590 --> 00:23:25.650
into one build.

00:23:25.650 --> 00:23:27.601
So our teams can
work independently.

00:23:27.601 --> 00:23:29.100
They can publish
off their packages,

00:23:29.100 --> 00:23:30.360
and know, when we
build this off,

00:23:30.360 --> 00:23:32.109
we pulled in with the
semantic versioning,

00:23:32.109 --> 00:23:35.280
and make sure we pull in the
proper version from our teams.

00:23:35.280 --> 00:23:37.140
This avoids breaking
changes, because we

00:23:37.140 --> 00:23:39.210
make sure we handle the
versioning correctly.

00:23:39.210 --> 00:23:40.590
And if there is a
breaking change that

00:23:40.590 --> 00:23:42.180
comes from one of
our core components,

00:23:42.180 --> 00:23:44.180
we make sure we notify
our teams, at that point.

00:23:46.790 --> 00:23:49.367
But we also need to make sure
we have automated builds.

00:23:49.367 --> 00:23:50.950
We had this in the
past, and we wanted

00:23:50.950 --> 00:23:53.020
to make sure we could do
this with Dart, as well.

00:23:53.020 --> 00:23:56.020
So we used Jenkins as our
continuous integration

00:23:56.020 --> 00:23:57.520
build server.

00:23:57.520 --> 00:24:00.010
And we have built off
a process within there

00:24:00.010 --> 00:24:02.560
that runs two to
three times a day

00:24:02.560 --> 00:24:04.090
on the main portal
framework builds,

00:24:04.090 --> 00:24:06.340
so our teams can make sure
they deploy their packages,

00:24:06.340 --> 00:24:09.910
and it will be brought in and
go off to our test networks.

00:24:09.910 --> 00:24:12.670
So on the right
shows our main build.

00:24:12.670 --> 00:24:14.860
And this is going through,
at first, a pub upgrade,

00:24:14.860 --> 00:24:16.990
to bring in the new packages.

00:24:16.990 --> 00:24:18.340
Does a pub build.

00:24:18.340 --> 00:24:20.980
After that point, it goes
ahead and TAR's up the entire

00:24:20.980 --> 00:24:24.010
build, sends it off to
our internal Nexus server,

00:24:24.010 --> 00:24:26.260
and then our dev op teams
pick it off from there,

00:24:26.260 --> 00:24:28.780
and deploy it off into
our test networks.

00:24:28.780 --> 00:24:31.210
So really, we're
hands-off, at this point.

00:24:31.210 --> 00:24:32.596
So our teams can
work independent

00:24:32.596 --> 00:24:33.970
of the portal
framework, and they

00:24:33.970 --> 00:24:36.220
can rely on knowing that
this is going to go out

00:24:36.220 --> 00:24:37.930
into the test networks.

00:24:37.930 --> 00:24:40.960
On top of that, we
added some traceability

00:24:40.960 --> 00:24:42.670
into this automated build.

00:24:42.670 --> 00:24:45.700
In the backing HTML, we put
in when the deploy date was,

00:24:45.700 --> 00:24:49.450
what version went out, so that
our development teams can say,

00:24:49.450 --> 00:24:51.490
hey, did I make it
into that deploy?

00:24:51.490 --> 00:24:54.580
We also put out-- in only
our test network deploys--

00:24:54.580 --> 00:24:56.080
the pubspec lockfile.

00:24:56.080 --> 00:24:58.672
So they can look at that,
out there, and say, oh man--

00:24:58.672 --> 00:24:59.380
I didn't make it.

00:24:59.380 --> 00:25:01.060
I missed it this window,
but I know its going

00:25:01.060 --> 00:25:02.893
to be in the next window,
my newest version.

00:25:05.660 --> 00:25:08.330
So at Trustwave,
we are extremely

00:25:08.330 --> 00:25:11.600
happy with our implementation
of AngularDart and Dart.

00:25:11.600 --> 00:25:13.340
We've been internal
at the company

00:25:13.340 --> 00:25:18.020
for about a year and a half
internally, using our portal.

00:25:18.020 --> 00:25:20.087
We went beta at the
end of last year.

00:25:20.087 --> 00:25:21.920
And I'm happy to announce,
this quarter one,

00:25:21.920 --> 00:25:24.540
we have gone GA in
front of our customers.

00:25:24.540 --> 00:25:26.504
It's worked wonderful for us.

00:25:26.504 --> 00:25:29.348
[APPLAUSE]

00:25:30.300 --> 00:25:34.710
And we're looking forward to
coming up, soon, with Dart 2,

00:25:34.710 --> 00:25:36.116
and also Angular 5.

00:25:36.116 --> 00:25:37.740
The Dart dev compiler,
we want to start

00:25:37.740 --> 00:25:40.920
using to get out of using Dart,
even going straight into Chrome

00:25:40.920 --> 00:25:42.690
with the Dart dev compiler.

00:25:42.690 --> 00:25:45.690
And this quarter, we're starting
to develop our mobile solution

00:25:45.690 --> 00:25:46.740
within Flutter.

00:25:46.740 --> 00:25:49.150
So we're going to take
advantage of our middle layer,

00:25:49.150 --> 00:25:50.220
our business layer.

00:25:50.220 --> 00:25:51.960
We have core packages
to take advantage

00:25:51.960 --> 00:25:53.940
of those core services
on the back end,

00:25:53.940 --> 00:25:57.890
and just focus on the UI
for our mobile solution.

00:25:57.890 --> 00:25:58.820
Thank you.

00:25:58.820 --> 00:26:02.170
[APPLAUSE]

