WEBVTT
Kind: captions
Language: en

00:00:08.455 --> 00:00:08.955
Hi.

00:00:08.955 --> 00:00:12.504
I'm Chet Haase, an engineer on
the Android UI Toolkit team.

00:00:12.504 --> 00:00:14.420
Today, I'm going to talk
about a new animation

00:00:14.420 --> 00:00:16.890
feature in the KitKat release.

00:00:16.890 --> 00:00:18.900
It's called transitions.

00:00:18.900 --> 00:00:21.004
So the idea with
transitions is actually

00:00:21.004 --> 00:00:22.420
the idea behind a
lot of the stuff

00:00:22.420 --> 00:00:25.790
that we do which is trying to
make things easier for you,

00:00:25.790 --> 00:00:27.840
the developers of
Android applications,

00:00:27.840 --> 00:00:29.920
to get richer experiences
for your users,

00:00:29.920 --> 00:00:31.990
hopefully with less effort.

00:00:31.990 --> 00:00:34.170
Transitions, it's
kind of a simple idea.

00:00:34.170 --> 00:00:38.400
It's basically a way for you to
describe the different scenes

00:00:38.400 --> 00:00:42.390
in your application, either
beforehand as layout resource

00:00:42.390 --> 00:00:45.810
files, or dynamically, as things
change in the application,

00:00:45.810 --> 00:00:48.530
and then use transitions to
animate the changes no matter

00:00:48.530 --> 00:00:49.874
what those changes were.

00:00:49.874 --> 00:00:51.540
And you can step out
of the way and just

00:00:51.540 --> 00:00:53.160
let the transitions
run automatically

00:00:53.160 --> 00:00:54.690
without having to
get more involved

00:00:54.690 --> 00:00:56.790
and run these manual
animations which

00:00:56.790 --> 00:01:00.125
are more of the typical model
of animating things in a UI.

00:01:00.125 --> 00:01:01.500
Hopefully, at the
end of the day,

00:01:01.500 --> 00:01:03.900
you get richer
applications experiences

00:01:03.900 --> 00:01:07.680
by having more stuff move on
the screen in an intuitive way.

00:01:07.680 --> 00:01:09.822
Your users get
richer experiences.

00:01:09.822 --> 00:01:11.280
And they get a
better understanding

00:01:11.280 --> 00:01:14.190
of how your application
actually works

00:01:14.190 --> 00:01:15.950
because you can
transition naturally

00:01:15.950 --> 00:01:19.734
between these different
scenes of your application.

00:01:19.734 --> 00:01:21.400
And there's more
animations in the world

00:01:21.400 --> 00:01:23.030
which I'm always in favor of.

00:01:23.030 --> 00:01:23.530
OK.

00:01:23.530 --> 00:01:25.440
So let's take a
look at some slides.

00:01:25.440 --> 00:01:29.600
And we'll go over a very quick
overview of how the API works,

00:01:29.600 --> 00:01:31.230
what the different pieces are.

00:01:31.230 --> 00:01:33.810
There's a lot of details
that I'm skipping here,

00:01:33.810 --> 00:01:36.310
but you are free and
encouraged to check out

00:01:36.310 --> 00:01:38.510
the details in
the reference docs

00:01:38.510 --> 00:01:41.060
and articles on
developer.android.com,

00:01:41.060 --> 00:01:45.230
and also API demos which
we'll see a little bit later.

00:01:45.230 --> 00:01:46.900
We'll take a look at
some code in that.

00:01:46.900 --> 00:01:47.400
OK.

00:01:47.400 --> 00:01:50.480
So first, we start out
with the idea of a scene.

00:01:50.480 --> 00:01:52.490
You can think of
this as a layout.

00:01:52.490 --> 00:01:54.310
It's basically a
view hierarchy that

00:01:54.310 --> 00:01:56.330
describes what this
particular scene looks like.

00:01:56.330 --> 00:01:59.770
This could be the scene
of the entire application

00:01:59.770 --> 00:02:02.790
in a particular screen, or it
could be some sub-hierarchy.

00:02:02.790 --> 00:02:04.220
In this particular
case, the scene

00:02:04.220 --> 00:02:05.690
describes this
situation where we

00:02:05.690 --> 00:02:09.389
have a text view, an
edit text, and a button.

00:02:09.389 --> 00:02:10.002
Fairly simple.

00:02:10.002 --> 00:02:11.710
And then we have
another scene that we've

00:02:11.710 --> 00:02:14.130
described through possibly
some other layout file.

00:02:14.130 --> 00:02:16.980
We have different text views
in there, a little bit richer

00:02:16.980 --> 00:02:19.260
text, longer details there.

00:02:19.260 --> 00:02:21.820
But we have, again, an edit
text field and a button.

00:02:21.820 --> 00:02:23.410
And maybe these are
shared components.

00:02:23.410 --> 00:02:25.950
Maybe they moved location,
possibly changed size.

00:02:25.950 --> 00:02:28.600
But they're actually shared
between the two scenes.

00:02:28.600 --> 00:02:31.410
Wouldn't it be nice if you
could help the user understand,

00:02:31.410 --> 00:02:34.430
as they move from scene one to
scene two in your application,

00:02:34.430 --> 00:02:37.520
the changes that had occurred by
fading things out that go away,

00:02:37.520 --> 00:02:40.520
fading things in that have
come into being, and moving

00:02:40.520 --> 00:02:43.384
and resizing the shared
elements between these scenes?

00:02:43.384 --> 00:02:44.800
That's what
transitions are about.

00:02:44.800 --> 00:02:46.730
You specify these
different scenes.

00:02:46.730 --> 00:02:48.860
And then when you go to
a scene, the transition

00:02:48.860 --> 00:02:52.510
automatically kicks in and
runs the necessary animations

00:02:52.510 --> 00:02:55.760
in order to make that
change, as well as

00:02:55.760 --> 00:02:58.420
to animate the change over time.

00:02:58.420 --> 00:03:00.130
So let's take a look at scenes.

00:03:00.130 --> 00:03:01.670
These are the
modules that you've

00:03:01.670 --> 00:03:04.840
defined for your application,
the different screens, if you

00:03:04.840 --> 00:03:08.940
will, of state that your
application will move through

00:03:08.940 --> 00:03:10.230
over time.

00:03:10.230 --> 00:03:13.580
You can construct these
scenes in different ways.

00:03:13.580 --> 00:03:17.625
First of all, scenes always
have a root or a ViewGroup

00:03:17.625 --> 00:03:19.250
associated with them
which is basically

00:03:19.250 --> 00:03:21.940
the hierarchy under
which the scene lives

00:03:21.940 --> 00:03:24.650
and in which transitions
will take place.

00:03:24.650 --> 00:03:28.080
So you can construct a scene
directly with that root.

00:03:28.080 --> 00:03:29.600
And then you can
set an EnterAction.

00:03:29.600 --> 00:03:31.210
And whenever that
scene is entered,

00:03:31.210 --> 00:03:33.314
you will get a callback
into your Runnable

00:03:33.314 --> 00:03:34.730
and you can run
whatever code, you

00:03:34.730 --> 00:03:36.470
want to make whatever
manipulations

00:03:36.470 --> 00:03:38.022
you want to to the
view hierarchy.

00:03:38.022 --> 00:03:38.980
Fairly straightforward.

00:03:38.980 --> 00:03:40.660
A little bit more manual
than the other ways

00:03:40.660 --> 00:03:41.576
you can create scenes.

00:03:41.576 --> 00:03:44.750
For example, you can create
it from a ViewGroup instead.

00:03:44.750 --> 00:03:48.100
Let's say you have inflated a
hierarchy from some layout ID.

00:03:48.100 --> 00:03:49.870
You have this ViewGroup
sitting there.

00:03:49.870 --> 00:03:51.680
You can create a scene
with that ViewGroup.

00:03:51.680 --> 00:03:53.346
So you give it basically
two ViewGroups.

00:03:53.346 --> 00:03:57.460
You can create with the
root of the scene hierarchy,

00:03:57.460 --> 00:04:01.180
as well as the root
of the scene itself.

00:04:01.180 --> 00:04:02.462
So you pass that in.

00:04:02.462 --> 00:04:03.420
You've created a scene.

00:04:03.420 --> 00:04:04.820
You're good to go.

00:04:04.820 --> 00:04:06.500
So now when the
scene is entered,

00:04:06.500 --> 00:04:12.010
it will simply change the scene
to be looking at that ViewGroup

00:04:12.010 --> 00:04:12.510
instead.

00:04:12.510 --> 00:04:14.439
You don't need to
tell it what to do

00:04:14.439 --> 00:04:15.605
to manipulate the hierarchy.

00:04:15.605 --> 00:04:17.649
It gets that information
from the ViewGroup

00:04:17.649 --> 00:04:19.637
that you passed it
in the constructor.

00:04:19.637 --> 00:04:21.970
Finally, we have something
very similar to the last one.

00:04:21.970 --> 00:04:23.553
But instead of handing
it a ViewGroup,

00:04:23.553 --> 00:04:25.680
you hand it a
layout resource ID.

00:04:25.680 --> 00:04:29.400
And when that scene is entered,
it will inflate the resource.

00:04:29.400 --> 00:04:33.420
And it will go ahead and
add that to the scene root.

00:04:33.420 --> 00:04:34.330
Straightforward.

00:04:34.330 --> 00:04:36.220
The layout resource
also kicks in

00:04:36.220 --> 00:04:39.740
if you create scenes
implicitly in resources

00:04:39.740 --> 00:04:41.860
which we'll see a
little bit later.

00:04:41.860 --> 00:04:44.710
You can have a Transition
Manager that automatically

00:04:44.710 --> 00:04:48.600
inflates scenes implicitly,
given layout resource IDs.

00:04:48.600 --> 00:04:51.120
And it uses the same
mechanism under the hood.

00:04:51.120 --> 00:04:52.920
Next, we can take a
look at transitions.

00:04:52.920 --> 00:04:55.440
These are the engine
responsible for declaring

00:04:55.440 --> 00:04:58.270
what it is you want to
do when things change

00:04:58.270 --> 00:05:01.090
from scene to scene
in your application.

00:05:01.090 --> 00:05:05.730
So these basically listen
for changes before and after,

00:05:05.730 --> 00:05:07.310
and compare those values.

00:05:07.310 --> 00:05:09.820
And then based on changes
that occurred to any view

00:05:09.820 --> 00:05:13.040
in the scene hierarchy,
they'll create an animator

00:05:13.040 --> 00:05:16.080
that then gets run to
animate those changes.

00:05:16.080 --> 00:05:18.670
There's a few different
ways to create transitions.

00:05:18.670 --> 00:05:20.540
You can just create
these things directly.

00:05:20.540 --> 00:05:24.210
We have some defined in
the framework already.

00:05:24.210 --> 00:05:26.710
There's a ChangeBounds
which will move and resize

00:05:26.710 --> 00:05:28.606
objects that change
between scenes.

00:05:28.606 --> 00:05:30.980
There's a fade that will fade
things in and out according

00:05:30.980 --> 00:05:34.590
to whether they come or
go between scene changes.

00:05:34.590 --> 00:05:37.360
And then there's
also a TransitionSet

00:05:37.360 --> 00:05:40.190
which is kind of the transition
equivalent of AnimatorSet.

00:05:40.190 --> 00:05:41.170
It's basically a group.

00:05:41.170 --> 00:05:44.226
It's a way of choreographing
several different transitions.

00:05:44.226 --> 00:05:45.850
You can create a
TransitionSet and then

00:05:45.850 --> 00:05:48.990
tell it whether, for all
of its transition children,

00:05:48.990 --> 00:05:52.100
to run those together
or sequentially.

00:05:52.100 --> 00:05:54.200
And it can also be
a hierarchy of sets.

00:05:54.200 --> 00:05:56.310
So you can have a much
more complicated mechanism

00:05:56.310 --> 00:05:59.480
that runs several transitions
in parallel or one

00:05:59.480 --> 00:06:02.130
after another to get a
more interesting animation

00:06:02.130 --> 00:06:04.010
experience.

00:06:04.010 --> 00:06:06.180
And finally, you
can load transitions

00:06:06.180 --> 00:06:09.299
from resource files, if
that's the way you go.

00:06:09.299 --> 00:06:10.840
If you want to run
it from resources,

00:06:10.840 --> 00:06:13.340
this is how you can do it.

00:06:13.340 --> 00:06:15.334
This one, for example,
is a TransitionSet

00:06:15.334 --> 00:06:17.750
that gets loaded that has two
children automatically added

00:06:17.750 --> 00:06:20.170
to it to listen for
changes in visibility,

00:06:20.170 --> 00:06:23.260
as well as size and location.

00:06:23.260 --> 00:06:24.635
The resource file,
maybe it's not

00:06:24.635 --> 00:06:27.010
something you want to do from
code because you're already

00:06:27.010 --> 00:06:27.910
in code in UV.

00:06:27.910 --> 00:06:30.640
It's easy enough to create
these things on the fly.

00:06:30.640 --> 00:06:32.660
On the other hand,
this is the mechanism

00:06:32.660 --> 00:06:35.760
that is used by Transition
Manager when it inflates

00:06:35.760 --> 00:06:40.480
a graph of the information
which we'll see soon,

00:06:40.480 --> 00:06:42.120
but not on this slide yet.

00:06:42.120 --> 00:06:44.470
Finally, there's an idea
of custom transition.

00:06:44.470 --> 00:06:48.800
So we've defined, as I said, a
couple of canonical transitions

00:06:48.800 --> 00:06:51.520
which automatic transition
will use on the fly.

00:06:51.520 --> 00:06:54.510
There's ChangeBounds which
moves and resizes views.

00:06:54.510 --> 00:06:57.310
And there's also fade
which deals with visibility

00:06:57.310 --> 00:06:58.910
information, fades
things in and out.

00:06:58.910 --> 00:06:59.870
Fairly straightforward.

00:06:59.870 --> 00:07:02.610
Probably the behavior
you want in most cases.

00:07:02.610 --> 00:07:05.140
But if you want to define your
own transition-- for example,

00:07:05.140 --> 00:07:06.905
if when something
comes into being,

00:07:06.905 --> 00:07:09.280
you didn't want it to fade in
in the middle of the screen

00:07:09.280 --> 00:07:10.821
where it lives, but
you actually want

00:07:10.821 --> 00:07:12.940
to slide it in from
the right, then

00:07:12.940 --> 00:07:14.370
you can write a
custom transition.

00:07:14.370 --> 00:07:17.280
You would simply subclass
the transition class itself.

00:07:17.280 --> 00:07:19.170
And then you override
the three methods

00:07:19.170 --> 00:07:21.380
that do what it
is you want to do.

00:07:21.380 --> 00:07:22.940
There's two capture methods.

00:07:22.940 --> 00:07:27.660
One captures the values at
the start when the application

00:07:27.660 --> 00:07:29.562
code said, OK, I'm ready
to do a transition.

00:07:29.562 --> 00:07:31.020
That's the point
at which you would

00:07:31.020 --> 00:07:33.880
get a call to your
captureStartValues method.

00:07:33.880 --> 00:07:37.950
And you would go ahead and
just read from the view objects

00:07:37.950 --> 00:07:40.980
anything you wanted to that
affected your transition.

00:07:40.980 --> 00:07:44.850
So you could read the layout
position, for example,

00:07:44.850 --> 00:07:47.180
or the visibility information
that you care about.

00:07:47.180 --> 00:07:49.290
And then you get a call
to the captureEndValues

00:07:49.290 --> 00:07:51.310
when the transaction
actually wants to run,

00:07:51.310 --> 00:07:52.840
when it wants to start.

00:07:52.840 --> 00:07:54.400
And then you finally
get a call right

00:07:54.400 --> 00:07:58.730
after that to the createAnimator
function which can then

00:07:58.730 --> 00:08:00.690
compare those values
and say, OK, well,

00:08:00.690 --> 00:08:02.510
this visibility value changed.

00:08:02.510 --> 00:08:04.136
And that's something
that I care about.

00:08:04.136 --> 00:08:06.135
Therefore, I'm going to
create an animation that

00:08:06.135 --> 00:08:08.030
does the following--
slides in from the right

00:08:08.030 --> 00:08:09.030
or whatever it is.

00:08:09.030 --> 00:08:10.200
Returns that animator.

00:08:10.200 --> 00:08:12.060
And then the transition
system runs it.

00:08:12.060 --> 00:08:14.020
So there's a lot of
stuff that we just

00:08:14.020 --> 00:08:16.180
ship with the framework
for free and you can simply

00:08:16.180 --> 00:08:19.030
use implicitly when
you run a transition.

00:08:19.030 --> 00:08:21.566
But if you want to create
custom transitions, fairly

00:08:21.566 --> 00:08:22.690
straightforward to do that.

00:08:25.160 --> 00:08:25.660
OK.

00:08:25.660 --> 00:08:26.909
So now you've got your scenes.

00:08:26.909 --> 00:08:28.180
You've got your transitions.

00:08:28.180 --> 00:08:29.630
How do you actually
change scenes?

00:08:29.630 --> 00:08:31.560
How do you go from
one scene to another?

00:08:31.560 --> 00:08:33.089
You could just enter a scene.

00:08:33.089 --> 00:08:34.630
There's no transition
involved there.

00:08:34.630 --> 00:08:36.039
You're basically
just saying, here's

00:08:36.039 --> 00:08:37.140
the scene I want you to load.

00:08:37.140 --> 00:08:37.973
And it will do that.

00:08:37.973 --> 00:08:40.159
It will run the code that
was in your Runnable.

00:08:40.159 --> 00:08:43.970
It will inflate the layout
resource file that you gave it,

00:08:43.970 --> 00:08:44.470
whatever.

00:08:44.470 --> 00:08:45.580
It'll enter the scene.

00:08:45.580 --> 00:08:46.890
Nothing much going on there.

00:08:46.890 --> 00:08:49.560
Certainly no
interesting animations.

00:08:49.560 --> 00:08:53.850
Or you can tell the Transition
Manager to go to a scene.

00:08:53.850 --> 00:08:55.720
And in the process
of doing that,

00:08:55.720 --> 00:08:58.220
it will use a default
transition along the way.

00:08:58.220 --> 00:09:00.410
It'll say, OK, I'm going
to change into this scene.

00:09:00.410 --> 00:09:02.850
And in the meantime, I'm
going to captureStartValues,

00:09:02.850 --> 00:09:05.200
captureEndValues, and run
the default transition

00:09:05.200 --> 00:09:07.220
for the system.

00:09:07.220 --> 00:09:09.089
Or you can run it with
a custom transition.

00:09:09.089 --> 00:09:11.255
You can say, OK, I've defined
this lovely transition

00:09:11.255 --> 00:09:14.300
that I want to
use when I'm going

00:09:14.300 --> 00:09:17.830
between this particular scene
combination, and now go ahead

00:09:17.830 --> 00:09:23.820
and transition using
one of the TransitionTo

00:09:23.820 --> 00:09:26.080
or the go methods in
the Transition Manager.

00:09:26.080 --> 00:09:28.890
And it will actually
load that new scene

00:09:28.890 --> 00:09:32.462
and then run your custom
transition along the way.

00:09:32.462 --> 00:09:34.170
Before we get to
Transitions, Simplified,

00:09:34.170 --> 00:09:36.378
there's one other thing that
I haven't mentioned here

00:09:36.378 --> 00:09:38.210
which is the idea of
a Transition Manager.

00:09:38.210 --> 00:09:41.160
You'll usually use this just for
a one-off thing where you say,

00:09:41.160 --> 00:09:43.420
Transition Manager, I
want to go to this scene

00:09:43.420 --> 00:09:45.195
and use my custom
transition here.

00:09:45.195 --> 00:09:46.570
The other thing
that it can do is

00:09:46.570 --> 00:09:48.054
keep a whole graph
of information

00:09:48.054 --> 00:09:49.595
about all the
transition combinations

00:09:49.595 --> 00:09:52.020
that you want for all
the scene combinations

00:09:52.020 --> 00:09:53.480
that you have in
your application.

00:09:53.480 --> 00:09:56.230
We'll see a little bit of
that in the demo later.

00:09:56.230 --> 00:09:58.650
But I did want to point
out one final thing here

00:09:58.650 --> 00:10:01.090
on this last exciting
slide is that

00:10:01.090 --> 00:10:03.380
with all this information,
all these different classes

00:10:03.380 --> 00:10:05.046
to think about it,
and you've got scenes

00:10:05.046 --> 00:10:08.180
and you got transitions,
but really, the idea

00:10:08.180 --> 00:10:11.440
was to make animations simpler
for most development cases.

00:10:11.440 --> 00:10:14.490
So in general, the only
method that you probably

00:10:14.490 --> 00:10:16.200
are going to care
about is this one

00:10:16.200 --> 00:10:19.020
called
 TransitionManager.beginDelayedTransition.

00:10:19.020 --> 00:10:20.820
And then give it the
scene root that you

00:10:20.820 --> 00:10:22.150
want to run the transition on.

00:10:22.150 --> 00:10:25.700
What that does is kicks
in all of the process that

00:10:25.700 --> 00:10:28.590
is going to capture
the current values.

00:10:28.590 --> 00:10:31.920
And then it's going to spawn
a layout and rendering run.

00:10:31.920 --> 00:10:33.760
And then in the
middle of that frame,

00:10:33.760 --> 00:10:35.350
it's going to capture
the end values,

00:10:35.350 --> 00:10:37.058
figure out where things
are, and then run

00:10:37.058 --> 00:10:38.840
an automatic transition for you.

00:10:38.840 --> 00:10:42.580
In most cases, this is all
that you actually care about.

00:10:42.580 --> 00:10:44.180
It's basically a dynamic change.

00:10:44.180 --> 00:10:46.870
You can think of this as
creating and animating

00:10:46.870 --> 00:10:47.830
a dynamic scene.

00:10:47.830 --> 00:10:50.020
So instead of having
these pre-baked scenes

00:10:50.020 --> 00:10:52.720
from layout resource IDs,
you can basically say,

00:10:52.720 --> 00:10:55.812
OK, I want you to run a
transition, so get ready.

00:10:55.812 --> 00:10:57.270
And then in the
meantime, I'm going

00:10:57.270 --> 00:10:58.390
to make a bunch of changes.

00:10:58.390 --> 00:11:00.390
And then by the time those
changes have actually

00:11:00.390 --> 00:11:02.880
kicked in, measure
and layout has run,

00:11:02.880 --> 00:11:05.930
and the system is ready
to draw the new frame.

00:11:05.930 --> 00:11:08.560
Then, the transitions kick
in, figure out the deltas,

00:11:08.560 --> 00:11:10.860
figure out the changes,
and create the animations,

00:11:10.860 --> 00:11:12.510
and start the
animations running.

00:11:12.510 --> 00:11:13.660
Fairly straightforward.

00:11:13.660 --> 00:11:14.860
One line of code.

00:11:14.860 --> 00:11:16.100
Nice.

00:11:16.100 --> 00:11:16.600
OK.

00:11:16.600 --> 00:11:21.030
So now, let's take a
quick look at a demo.

00:11:21.030 --> 00:11:25.990
And this is one of the API
demos that ships with KitKat.

00:11:25.990 --> 00:11:28.620
So I would encourage you to
download this from the samples.

00:11:28.620 --> 00:11:30.161
And you can run this
and play with it

00:11:30.161 --> 00:11:31.190
to your heart's content.

00:11:31.190 --> 00:11:33.450
Totally complicated
and interesting demo.

00:11:33.450 --> 00:11:36.630
So we defined four scenes here.

00:11:36.630 --> 00:11:39.570
And the scenes use custom views.

00:11:39.570 --> 00:11:41.032
So no particular reason why.

00:11:41.032 --> 00:11:41.990
These could be buttons.

00:11:41.990 --> 00:11:44.220
I happened to make them
colored rectangles instead.

00:11:44.220 --> 00:11:46.130
So as we change
between the scenes,

00:11:46.130 --> 00:11:47.520
you can see we're
resizing, we're

00:11:47.520 --> 00:11:49.700
repositioning these things.

00:11:49.700 --> 00:11:51.680
And we can just
change on the fly.

00:11:51.680 --> 00:11:52.409
We're canceling.

00:11:52.409 --> 00:11:53.200
We're interrupting.

00:11:53.200 --> 00:11:55.720
We're running other transitions.

00:11:55.720 --> 00:11:58.820
So fairly straightforward.

00:11:58.820 --> 00:12:02.306
Now let's take a look at
the code for that demo.

00:12:02.306 --> 00:12:03.930
So there's a few
different pieces here.

00:12:03.930 --> 00:12:05.620
First, there's
some layout files.

00:12:05.620 --> 00:12:07.550
So we have Transition Scene One.

00:12:07.550 --> 00:12:09.430
This just has a layout.

00:12:09.430 --> 00:12:11.200
And it has four
views inside there,

00:12:11.200 --> 00:12:12.460
positioned appropriately.

00:12:12.460 --> 00:12:16.450
Transition Scene Two looks
very similar to that.

00:12:16.450 --> 00:12:18.630
It's just different sizes
and different positions

00:12:18.630 --> 00:12:19.810
for the colored rectangles.

00:12:19.810 --> 00:12:23.060
Transition Three
adds the complication

00:12:23.060 --> 00:12:26.040
of also having those gray scale
custom views in the middle

00:12:26.040 --> 00:12:27.959
there.

00:12:27.959 --> 00:12:30.500
So nothing really interesting
going on in the layout resource

00:12:30.500 --> 00:12:31.300
files.

00:12:31.300 --> 00:12:34.590
But you'll see them referred
to later in the resources

00:12:34.590 --> 00:12:36.960
that we inflate for
the Transition Manager.

00:12:36.960 --> 00:12:40.480
We have some custom
transition that we've defined.

00:12:40.480 --> 00:12:42.017
This is simply a ChangeBounds.

00:12:42.017 --> 00:12:43.350
Nothing really interesting here.

00:12:43.350 --> 00:12:44.808
It's just the
standard ChangeBounds

00:12:44.808 --> 00:12:45.940
that we're going to run.

00:12:45.940 --> 00:12:47.860
But we refer to
this resource later

00:12:47.860 --> 00:12:50.510
when we inflate the
Transition Manager.

00:12:50.510 --> 00:12:53.220
Here's a little bit
more interesting one.

00:12:53.220 --> 00:12:55.020
This is a TransitionSet.

00:12:55.020 --> 00:12:57.850
It's going to run
in the default mode

00:12:57.850 --> 00:13:00.480
where all the transitions
run in parallel.

00:13:00.480 --> 00:13:03.150
It's going to run a
ChangeBounds at the same time

00:13:03.150 --> 00:13:05.530
as it's going to run
a fade transition.

00:13:05.530 --> 00:13:09.010
And the fade is going to be
targeted at a specific view.

00:13:09.010 --> 00:13:11.180
And we use IDs to
associate with views.

00:13:14.120 --> 00:13:16.140
So that means the fade
is not generally applied

00:13:16.140 --> 00:13:18.060
to everything on the
screen, but we're saying,

00:13:18.060 --> 00:13:20.030
hey, I want you to run
this specific transition

00:13:20.030 --> 00:13:22.500
on this specific view
in the hierarchy.

00:13:22.500 --> 00:13:24.456
Fade-out is very similar.

00:13:24.456 --> 00:13:25.830
Although in this
case, it's going

00:13:25.830 --> 00:13:27.660
to run the transition
sequentially.

00:13:27.660 --> 00:13:30.150
So it's going to run the
ChangeBounds on any things that

00:13:30.150 --> 00:13:31.630
change position and size.

00:13:31.630 --> 00:13:35.174
And after that's done,
it's going to run the fade.

00:13:35.174 --> 00:13:37.230
And then finally, we
have a Transition Manager

00:13:37.230 --> 00:13:38.605
which we haven't
really seen yet.

00:13:38.605 --> 00:13:41.630
This is the object that
keeps a graph of what

00:13:41.630 --> 00:13:44.080
you want to happen as you
go from scene to scene

00:13:44.080 --> 00:13:45.530
in your application.

00:13:45.530 --> 00:13:48.700
You can define here-- I mean,
if you don't need any custom

00:13:48.700 --> 00:13:51.720
transitions, then you wouldn't
care about Transition Manager.

00:13:51.720 --> 00:13:53.260
You would just run transitions.

00:13:53.260 --> 00:13:56.210
But if you care that when you
go from scene one to scene two,

00:13:56.210 --> 00:13:59.220
you want this particular custom
transition, but from scene two

00:13:59.220 --> 00:14:00.890
to scene three you
want a different one,

00:14:00.890 --> 00:14:04.070
this is how you would define
it, at least in resource files.

00:14:04.070 --> 00:14:05.560
So you create a
Transition Manager.

00:14:05.560 --> 00:14:07.730
And then you have several
transition objects

00:14:07.730 --> 00:14:09.590
that define the
interaction you want

00:14:09.590 --> 00:14:12.380
in any of these
particular scene changes.

00:14:12.380 --> 00:14:15.247
So we have a fromScene that
refers to a layout file.

00:14:15.247 --> 00:14:16.830
And that's implicitly
going to inflate

00:14:16.830 --> 00:14:20.270
that layout resource file
and create a scene out of it.

00:14:20.270 --> 00:14:21.250
We have a toScene.

00:14:21.250 --> 00:14:21.820
Same thing.

00:14:21.820 --> 00:14:25.160
It's going to create a
scene from that layout file.

00:14:25.160 --> 00:14:26.950
And then we have the
transition that it's

00:14:26.950 --> 00:14:29.970
going to refer to in
another transition resource

00:14:29.970 --> 00:14:32.466
file like the ones
that we just looked at.

00:14:32.466 --> 00:14:33.840
So that's all the
resource stuff.

00:14:33.840 --> 00:14:37.780
Now let's look at the code
which is in transitions.java.

00:14:37.780 --> 00:14:39.550
And in the API demos,
you'll see this

00:14:39.550 --> 00:14:43.000
in the Animations directory.

00:14:43.000 --> 00:14:45.180
And it's called
Simple Transitions.

00:14:45.180 --> 00:14:46.420
And here it is.

00:14:46.420 --> 00:14:48.380
Not a lot of code going on here.

00:14:48.380 --> 00:14:50.600
We inflate the
Transition Manager.

00:14:50.600 --> 00:14:53.330
Well, we get the
Transition Inflator.

00:14:53.330 --> 00:14:56.060
And then we inflate the
Transition Manager down here.

00:14:56.060 --> 00:14:59.040
And we also create three
scenes along the way.

00:14:59.040 --> 00:15:01.170
And you'll note, we're
only creating three scenes,

00:15:01.170 --> 00:15:02.878
but there were actually
four in the demo.

00:15:02.878 --> 00:15:04.350
And we'll show why in a minute.

00:15:04.350 --> 00:15:06.920
The only reason that we
need the scenes in the code

00:15:06.920 --> 00:15:10.500
here is that this is
where we specified

00:15:10.500 --> 00:15:13.050
they were going to transition
to a particular scene.

00:15:13.050 --> 00:15:14.760
We've already told
the Transition Manager

00:15:14.760 --> 00:15:17.460
what transitions to run
as we go scene to scene.

00:15:17.460 --> 00:15:20.584
And here, we're actually getting
a reference to those scenes

00:15:20.584 --> 00:15:22.000
and saying, OK,
now I want to move

00:15:22.000 --> 00:15:24.290
to scene one, scene
two, scene three.

00:15:24.290 --> 00:15:25.424
And we do that down here.

00:15:25.424 --> 00:15:27.340
When we click on the
radio button in the demo,

00:15:27.340 --> 00:15:29.460
we get a call to
one of these items.

00:15:29.460 --> 00:15:31.210
And we say, OK,
Transition Manager, I

00:15:31.210 --> 00:15:33.940
want you to transition
to the next scene.

00:15:33.940 --> 00:15:34.540
And it'll go.

00:15:34.540 --> 00:15:35.430
It'll load the scene.

00:15:35.430 --> 00:15:37.770
It'll figure out the changes
and run the transition

00:15:37.770 --> 00:15:40.800
that we specified in the
Transition Manager resource

00:15:40.800 --> 00:15:42.040
file that we saw.

00:15:42.040 --> 00:15:43.930
Finally, there is a
fourth scene in there

00:15:43.930 --> 00:15:46.000
that has nothing to do
with these scene objects

00:15:46.000 --> 00:15:47.670
that we inflated.

00:15:47.670 --> 00:15:49.440
But instead, this
is what I referred

00:15:49.440 --> 00:15:52.160
to before as a dynamic scene
because we're basically

00:15:52.160 --> 00:15:54.390
changing the view
hierarchy on the fly

00:15:54.390 --> 00:15:56.340
and having the
Transition Manager

00:15:56.340 --> 00:15:57.960
or the transition
system, in general,

00:15:57.960 --> 00:16:00.660
basically automatically
animate all the changes there.

00:16:00.660 --> 00:16:03.600
We call the magic method,
call beginDelayedTransition.

00:16:03.600 --> 00:16:06.430
We hand it a scene root that
we're going to operate on.

00:16:06.430 --> 00:16:09.080
We call this helper
method called Set newSize.

00:16:09.080 --> 00:16:11.250
And basically, we
make arbitrary changes

00:16:11.250 --> 00:16:13.030
inside the view hierarchy.

00:16:13.030 --> 00:16:13.890
This comes in here.

00:16:13.890 --> 00:16:16.520
It sets some new layout
parameters on the views.

00:16:16.520 --> 00:16:19.720
This will spawn a request
layout internally.

00:16:19.720 --> 00:16:23.470
Things inside the scene root
will end up being relayed out

00:16:23.470 --> 00:16:24.130
and rerendered.

00:16:24.130 --> 00:16:26.280
And when that happens,
Transition System

00:16:26.280 --> 00:16:27.840
noticed that things
have changed,

00:16:27.840 --> 00:16:29.830
and it runs transitions
automatically.

00:16:29.830 --> 00:16:32.440
As you saw in the demo,
things move around,

00:16:32.440 --> 00:16:37.400
things resize with this
single line of code.

00:16:37.400 --> 00:16:39.680
So that's transitions.

00:16:39.680 --> 00:16:41.670
It's a new feature in KitKat.

00:16:41.670 --> 00:16:45.090
I anticipate it will be worked
on more as time goes on.

00:16:45.090 --> 00:16:47.880
It's fairly straightforward
and simple for now.

00:16:47.880 --> 00:16:49.930
And hopefully, more
importantly, simple

00:16:49.930 --> 00:16:53.500
for you to use to make
richer Android applications.

00:16:53.500 --> 00:16:55.050
Thanks.

