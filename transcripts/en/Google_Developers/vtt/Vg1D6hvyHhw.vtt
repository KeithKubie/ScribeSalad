WEBVTT
Kind: captions
Language: en

00:00:01.230 --> 00:00:57.019
&gt;&gt; PRASETYA: Hey, everyone, how are you guys
doing today? My name is Marcel Prasetya; I'm

00:00:57.019 --> 00:01:08.840
one of the developers from the Google Wave
team working primarily on the Java Robot API.

00:01:08.840 --> 00:01:14.000
So, this is just a breakdown of my presentation
today. First, I'm going to talk aboutÃ³I'm

00:01:14.000 --> 00:01:19.290
going to give you a brief introduction about
Robot and the architecture of our Robot API.

00:01:19.290 --> 00:01:24.330
I'm also going to talk about the events and
operation system. And so, basically, it's

00:01:24.330 --> 00:01:29.610
things that he robot receives and sends back
to our server, and we're going to also talk

00:01:29.610 --> 00:01:34.750
about the different view objects that we have:
TextView, FontView and GadgetView that allows

00:01:34.750 --> 00:01:40.710
you to read and modify Wave content in a simpler
way. And finally--and hopefully this is--this

00:01:40.710 --> 00:01:45.440
will be the most interesting part. I'm going
to walk you through a short tutorial on how

00:01:45.440 --> 00:01:56.960
to make Robot from scratch. So, Robot is a
robotic participant in a Wave that can basically

00:01:56.960 --> 00:02:04.620
read and write Wave content inside a Wave
that--in which it participates. There are

00:02:04.620 --> 00:02:09.379
several tasks of robots, and please keep in
mind, this is not a comprehensive list, but

00:02:09.379 --> 00:02:18.900
we just want to give you an idea of--on, like
what kind of things that Robot can do. First

00:02:18.900 --> 00:02:23.980
one is, we have Content Assist Robot. One
example of this will be CompleteIt that will

00:02:23.980 --> 00:02:29.799
basically auto-complete your sentence in Google
Wave using Google search. We have Smiley that

00:02:29.799 --> 00:02:37.349
Dave demoed. The second class is Data Synchronization
Robot. A good example of this will be Buggy

00:02:37.349 --> 00:02:43.780
that--which is a robot that synchronizes your
Wave content with an issue tracking system.

00:02:43.780 --> 00:02:51.150
We also have tweetie that synchronizes your
Wave content with Twitter. And we also have

00:02:51.150 --> 00:02:56.890
a multi-wave applications robot. I don't know
whether if you guys have seen the Google I/O

00:02:56.890 --> 00:03:02.569
presentation. We demoed one robot called Polly
that will basically let you create and distribute

00:03:02.569 --> 00:03:10.370
holes into different waves. We also have a
bot called Blogbot that let's you manage blogs

00:03:10.370 --> 00:03:17.579
and wave. The last class of robot that we
have is a compensational type of robot. One

00:03:17.579 --> 00:03:22.620
good example of this is ELIZA. So, basically,
if you're lonely and if you're looking for

00:03:22.620 --> 00:03:29.849
someone to talk to you, just add ELIZA to
your Wave and you'll be happy. Like Dave mentioned,

00:03:29.849 --> 00:03:34.450
temporarily, Robot can only run in Google
App Engine. We're going to lift off this restriction

00:03:34.450 --> 00:03:42.870
in the future. If a normal user has a participant
ID in the form of your username at wavesandbox.com

00:03:42.870 --> 00:03:49.909
and Robot will have a participant ID in the
form of the application ID of your App Engine

00:03:49.909 --> 00:04:00.919
account at Appspot.com. Now, let's talk about
the architecture of our Robot API. So the

00:04:00.919 --> 00:04:06.590
heart of a Robot API is the server in the
middle called Robot Proxy. So that's basically

00:04:06.590 --> 00:04:12.239
a server that listens for updates coming from
the Wave server and package it up in a JSON

00:04:12.239 --> 00:04:18.350
format and broadcast that into your Robot
running on App Engine. That Robot Proxy is

00:04:18.350 --> 00:04:24.250
also responsible for receiving operations
coming from your Robot and pushes that over

00:04:24.250 --> 00:04:30.500
to Wave server. And so, the communication
format is over HTTP Protocol, and the data

00:04:30.500 --> 00:04:40.930
that we send back and forth is in the form
of JSON. Okay. Now, let's talk about events

00:04:40.930 --> 00:04:47.150
and operations. So events are basically something
that Robot subscribes to, and these are things

00:04:47.150 --> 00:04:53.120
that are broadcasted by a Robot Proxy. We
have--I've listed some examples of events

00:04:53.120 --> 00:04:58.230
that are commonly used. The first one is Wavelet
self added that gets triggered whenever Robot

00:04:58.230 --> 00:05:04.900
gets added to a Wave. We have a blip submitted
event that gets triggered when a blip is submitted.

00:05:04.900 --> 00:05:10.850
We have document change event that gets triggered
when content of a blip has changed. And we

00:05:10.850 --> 00:05:22.310
also have many different events that you can
see from our API page. So whenever Robot receives

00:05:22.310 --> 00:05:28.810
those events, it typically responds with a
series of operations that will be received

00:05:28.810 --> 00:05:35.580
by Robot Proxy and then will transfer that
to Wave server. We have some sample--I have

00:05:35.580 --> 00:05:40.390
some sample operations here. First one is
a pen--wavelet of pen blip that allows you

00:05:40.390 --> 00:05:45.930
to create a new blip in a Wave. And we have
wavelets subtitle that lets you adjust the

00:05:45.930 --> 00:05:53.630
title of the wave; and we have document insert,
document delete, set--document set annotation,

00:05:53.630 --> 00:05:59.860
and so on.

00:05:59.860 --> 00:06:06.680
Now, let's talk about the few objects. Wave
is basically an XML document with textual

00:06:06.680 --> 00:06:12.810
and non-textual content. And then to provide
an abstraction on top of the gory details

00:06:12.810 --> 00:06:18.560
of our XML schema, we provide some convenient
objects called a view object that basically

00:06:18.560 --> 00:06:25.370
lets you manage your Wave content in a simpler
way. And--well, first one, we have TextView

00:06:25.370 --> 00:06:31.990
that allows you to manage--that allows Robot
to manage textual content. We have methods

00:06:31.990 --> 00:06:37.680
such as like append, replace, append style
text, the lead, and so on. We also have a

00:06:37.680 --> 00:06:45.550
FormView object that lets you manage your
form elements like buttons, input text, text

00:06:45.550 --> 00:06:48.480
area, radio button and stuff like that. Yes?

00:06:48.480 --> 00:06:49.180
&gt;&gt; And that input content, is that referenced
to non-external...?

00:06:49.180 --> 00:06:50.220
&gt;&gt; We're going to do questions at that panel.
That's what's that panel is for and I just

00:06:50.220 --> 00:06:58.700
wanted to have--I mean--we're going to do
questions as a panel.

00:06:58.700 --> 00:07:08.920
&gt;&gt; PRASETYA: Okay. So, the last view that
we have is a GadgetView that allows you to

00:07:08.920 --> 00:07:14.530
manage your gadget from your Robot that can
set a feel--like set a state or got a state

00:07:14.530 --> 00:07:25.870
of Robot and--add gadget, delete gadget. All
right. So enough theory, so I'm going to give

00:07:25.870 --> 00:07:32.890
you a short tutorial on how to make Robot
from scratch. So basically, today, we're going

00:07:32.890 --> 00:07:42.290
to build a robot called tweets, which is basically
a simplified version of tweetie. Since I'm

00:07:42.290 --> 00:07:49.270
lazy and we're running out of time. Basically,
this Robot will not have a log-in form. The

00:07:49.270 --> 00:07:54.780
username and password will be hard-coded inside
the code. I'm going to use my Twitter test

00:07:54.780 --> 00:08:00.970
account. There are two use cases that this
robot will support. The first one is whenever

00:08:00.970 --> 00:08:06.400
it receives a wavelet self added event, it
will fetch us a list of tweets from Twitter.

00:08:06.400 --> 00:08:12.690
And the second use case is whenever it receives
a blip submitted event, it will submit the

00:08:12.690 --> 00:08:21.090
content of that blip to Twitter as a tweet.
All right, how many of you guys have used

00:08:21.090 --> 00:08:29.130
Google App Engine or Build Application at
all? Okay, so, great. So to build a Robot,

00:08:29.130 --> 00:08:38.300
first thing that you need to do is you need
to have an AppID. So you do that by going

00:08:38.300 --> 00:08:45.680
to the App Engine dashboard, and then you
can use an existing application or you can

00:08:45.680 --> 00:08:50.139
create an application--a new application.
So in this case, I've registered an application

00:08:50.139 --> 00:08:54.980
ID called tweet Wave that I registered a few
days ago, and I'm going to use that for today's

00:08:54.980 --> 00:09:04.209
demo. So second thing after we set up an Application
ID is we need to download the client library.

00:09:04.209 --> 00:09:11.480
So first, you need to go to our--the API's
website, code.google.com/API/wave. And then

00:09:11.480 --> 00:09:18.079
clicks on the robot link and then click on
download. So you need to download these three

00:09:18.079 --> 00:09:22.899
jars that we have. First one is our client
library, and then the next two are the dependencies

00:09:22.899 --> 00:09:36.759
that the library depends on. Okay. Right.
So now I'm going to build a Java Robot using

00:09:36.759 --> 00:09:42.689
Eclipse. I'm going to bring up Eclipse here.
I highly recommend that you use the Google

00:09:42.689 --> 00:09:48.480
APP Engine or the Google Plug-in for Eclipse.
It has a seamless integration with APP Engine

00:09:48.480 --> 00:09:54.170
and Google Web Toolkit that allows you basically
to create and deploy your APP Engine project

00:09:54.170 --> 00:10:01.139
from within Eclipse seamlessly. So I'm going
to create a new project. I'm going to call

00:10:01.139 --> 00:10:07.850
it tweets, put in a tweets package. And since
I'm not going to use Google Web Toolkit, I'm

00:10:07.850 --> 00:10:19.740
going to uncheck this part right here.

00:10:19.740 --> 00:10:25.339
Okay. Now, I have my new project. The next
thing is I need to copy the jars that I've

00:10:25.339 --> 00:10:41.680
downloaded into my project. So I need to put
that in my lib directory inside the web end

00:10:41.680 --> 00:10:49.639
directory, paste that, and then open Eclipse
again. And now I'm going to import those jars

00:10:49.639 --> 00:11:23.899
into my project. Oh, first, I have to refresh.
Okay. I'm going to select the three jars that

00:11:23.899 --> 00:11:33.879
I've downloaded and import it here. Okay.
So, now, I think we're ready to start building

00:11:33.879 --> 00:11:39.449
a Robot now. So first, to build Robot, you
need to create a Robot configuration file

00:11:39.449 --> 00:11:48.410
called the "capabilities.xml" file. So I'm
going to put that inside a directory called

00:11:48.410 --> 00:12:03.529
_wave, and then I'm going to make a file called
"capabilities.xml." To save some time, I'm

00:12:03.529 --> 00:12:10.899
just going to copy and paste from the existing
example. So this is a robot configuration

00:12:10.899 --> 00:12:15.930
file. It basically tells Robot Proxy what
kind of events that this robot is interested

00:12:15.930 --> 00:12:23.240
in. So in this example, I've listed two events.
So basically this robot will receive a wavelet

00:12:23.240 --> 00:12:32.149
self-added event and also Eclipse-submitted
event from Robot Proxy. Okay, so now we have

00:12:32.149 --> 00:12:37.839
the configuration file. I'm--now, let's start
implementing the servlet that will receive

00:12:37.839 --> 00:12:45.619
the request coming from Robot Proxy. So APP
Engine creates this servlet for you, but I'm

00:12:45.619 --> 00:12:53.369
going to change that. In the--as part of the
client library, we provide an abstract servlet

00:12:53.369 --> 00:13:02.119
called AbstractRobotServlet that provides
some convenient methods for you to serialize

00:13:02.119 --> 00:13:07.959
and de-serialize events and operations to
and from JSON. So in a typical Robot, you

00:13:07.959 --> 00:13:15.769
just need to extend that AbstractRobotServlet
and then--override this one method called

00:13:15.769 --> 00:13:21.869
process events. So this is basically the main
processing loop that will receive all incoming

00:13:21.869 --> 00:13:31.279
events from Robot Proxy.

00:13:31.279 --> 00:13:36.629
Okay. So now, now we're ready to implement
the first Use Case. So what we want to do

00:13:36.629 --> 00:13:49.220
is when the robot gets added, we want to fetch
a list of tweets, right? So first we check

00:13:49.220 --> 00:14:01.480
from the--using the bundle, RobotMessageBundle.
I'm going to rename this into Bundle. So first

00:14:01.480 --> 00:14:13.569
we want to check whether this is a self-added
event or not. If it is, then I'm going to

00:14:13.569 --> 00:14:22.629
fetch a list of tweets from Twitter.

00:14:22.629 --> 00:14:32.999
So to speed things up a little bit, I created
this class called Twitter Service yesterday

00:14:32.999 --> 00:14:40.720
that basically handles the interaction with
Twitter. It has--it provides two utility functions.

00:14:40.720 --> 00:14:46.420
The one is to fetch tweets, and two is to
post tweets to Twitter. I'm hard coding my

00:14:46.420 --> 00:15:01.110
username and password in there. Okay. So now
we have a list of tweets from Twitter. What

00:15:01.110 --> 00:15:09.129
we want to do now is we want to post those
tweets as blips. So, we're going to iterate

00:15:09.129 --> 00:15:31.069
over the tweets. And for each one of them,
we are going to make a blip.

00:15:31.069 --> 00:15:36.040
So notice here, I'm calling from the bundle.
I'm calling the getWavelet event. That will

00:15:36.040 --> 00:15:41.689
return me the wavelet. And then from that
wavelet, I'm calling the appendBlip method.

00:15:41.689 --> 00:15:46.730
That returns me the new blip. So right now,
this blip is empty. So what I want to do is

00:15:46.730 --> 00:15:52.040
I want to get the text view by calling the
GetDocument method. And then I want to call

00:15:52.040 --> 00:16:06.519
Append method to append--and append the con--the
tweet.

00:16:06.519 --> 00:16:09.869
Okay. So I think we're done with the first
Use Case. Now, let's deal with the second

00:16:09.869 --> 00:16:19.730
Use Case. So what we want to do is that we
want to post blip content as tweet to Twitter.

00:16:19.730 --> 00:16:24.610
So first, we need to--we need to check the
bundle, whether we have any blip submitted

00:16:24.610 --> 00:16:47.800
events or not. Okay? And for each blip submitted
event, we want to get the actual blip.
And then from there, we want to get the text

00:16:47.800 --> 00:16:52.619
view by calling the GetDocument. And then
we want to get the content of the text view

00:16:52.619 --> 00:17:01.399
by calling GetText. And then we want to post
this to Twitter. I'm going to use my friendly

00:17:01.399 --> 00:17:19.199
Twitter Service Class again. Call tweet method.
Okay. So now I think we have the servlet ready.

00:17:19.199 --> 00:17:23.990
One thing is we need to check the web deployment
descriptor file. I'm going to open it up.

00:17:23.990 --> 00:17:35.070
Call--this is the web XML file. So the one
thing is that we need to map the servlet that

00:17:35.070 --> 00:17:42.390
we just created into the specific URL, the
specific path, so that is _wave/robot/jsonrpc.

00:17:42.390 --> 00:17:49.600
So that's a convention that we have, robot
proxy with ping your robot at that specific

00:17:49.600 --> 00:18:01.880
path. That's very important. And I don't need
this--this is the last one. Okay? And then--so

00:18:01.880 --> 00:18:07.740
we have a configuration file. We have a servlet.
And then the last thing I want to create is

00:18:07.740 --> 00:18:20.140
the extension file to install the Robot into
Wave. So I'm going to copy over this file

00:18:20.140 --> 00:18:31.990
extension into my _wave directory. Just to
quickly go over this, so the name of this

00:18:31.990 --> 00:18:40.220
extension is tweets and has this thumbnail
that I got from twitty-wave@appspot.com. And

00:18:40.220 --> 00:18:47.240
then author is myself. And then this has a
"Create New Wave" hook. And then whenever

00:18:47.240 --> 00:18:53.220
you click on that "Create New Wave" button,
it will add--it will make a new wave with

00:18:53.220 --> 00:19:06.429
tweets-wave@appspot.com as the participant.
Okay. So before I deploy this to Google App

00:19:06.429 --> 00:19:27.640
Engine, I want to try to run this locally
and see. Oh, and this is already used. Okay,

00:19:27.640 --> 00:19:32.890
so I have my server running locally. A few
things that I want to check is first whether

00:19:32.890 --> 00:19:42.250
I can access the capabilities.xml.

00:19:42.250 --> 00:19:46.539
Okay. I have that. And then the second thing
that I want to check is whether I can access

00:19:46.539 --> 00:19:54.299
the extension file.

00:19:54.299 --> 00:20:00.190
And last thing I want to check is whether
I can ping the _wave/robot/jsonrpc path or

00:20:00.190 --> 00:20:09.360
not. So good, we don't get a 404.

00:20:09.360 --> 00:20:15.799
So now we have it all implemented locally,
we want to deploy this to Google App Engine.

00:20:15.799 --> 00:20:24.269
So first, you need to open your App Engine
description file, appengine-web.xml. Now we

00:20:24.269 --> 00:20:29.059
need to specify the application ID that we've
registered before. So in this case, I'm going

00:20:29.059 --> 00:20:35.840
to use tweets-wave right here. And then I'm
going to click on this App Engine icon to

00:20:35.840 --> 00:20:56.980
deploy this, uploading, okay, successful.
Okay. Now I have deployed that. Before--so

00:20:56.980 --> 00:21:03.490
I want to check a few things again. First
I want to check whether I can access my extension

00:21:03.490 --> 00:21:27.250
file. Good. And then also the capabilities
of that XML file.
Okay. Cool. Now, I'm going to go to Wave Sandbox,

00:21:27.250 --> 00:21:42.360
and try out our new robot.

00:21:42.360 --> 00:21:48.149
Okay. So first I'm going to create a new Wave
and install my extension. You can install

00:21:48.149 --> 00:21:52.600
an extension on any Wave that you have or
you can make a new one. It's really up to

00:21:52.600 --> 00:22:04.529
you. Extension installer, and then I'm going
to copy and paste my extension manifest file.

00:22:04.529 --> 00:22:23.429
Oops, shinies, okay, I'm going to refresh.
All right, so that's my extension tweets and

00:22:23.429 --> 00:22:28.269
then description is to create a new Wave filled
with tweets. So, I'm going to click install

00:22:28.269 --> 00:22:34.419
here and then you--now you see the down arrow
here, next to the new Wave and then I can

00:22:34.419 --> 00:22:41.490
create a new T-WAVE now. So, T-WAVE stands
for Twitter Wave. Just see there, Lars coined

00:22:41.490 --> 00:23:06.220
that term. And I hope this works. I've just--uploading--
It doesn't. Oh, there you go. Okay. So, the

00:23:06.220 --> 00:23:11.600
robot, whenever it gets added to Wave, like,
I told you before. So, it will fetch a list

00:23:11.600 --> 00:23:17.440
of tweets, from Twitter. So, let's now--let's
verify that. So, I'm--logged in to Twitter

00:23:17.440 --> 00:23:22.570
here, with my test account called Coco boat
(ph) and I have two tweets here, "What a beautiful

00:23:22.570 --> 00:23:28.630
day and hello, twitter." So, we can verify
that, I have the exact same tweets, since

00:23:28.630 --> 00:23:34.049
I Wave. I can--so that was the first use case
that tweets supports. Now, let's try out the

00:23:34.049 --> 00:23:50.059
second use case. Hacking at Google Wave, Hackathon,
I can spell. So, after I submit this blip

00:23:50.059 --> 00:23:55.159
we should be able to see that on Twitter.
So, I'm going to go back to my Twitter page

00:23:55.159 --> 00:24:08.909
here and refresh. It doesn't show up. There
you go, Hacking at Google Wave, Hackathon.

00:24:08.909 --> 00:24:14.519
As you notice here that the content of the
root blip is empty. So, I'm going to update

00:24:14.519 --> 00:24:20.649
the code a little bit to make--to put some
text in there. So, I'm going to go back to

00:24:20.649 --> 00:24:28.809
this "if" statement and then I will say from
the bundle, I'm going to get the wavelet and

00:24:28.809 --> 00:24:37.009
from there I'm going to get the root blip
and then get the text view of the root blip

00:24:37.009 --> 00:24:59.190
and then append the text. My tweets--and then
I'm going to deploy that again, to App engine.

00:24:59.190 --> 00:25:28.179
Now, let's try that again, you T-WAVE. Okay.
For some reason it's running kind of slow.

00:25:28.179 --> 00:25:37.600
But as you can see now, it updates the content
of the root blip with this text that I just

00:25:37.600 --> 00:25:46.000
added to my tweet, which is "my tweets." Yeah.
So, I don't what happened with the--this--what

00:25:46.000 --> 00:26:12.269
was that? We're going to try it one more time.
Oh, there we go. Cool. Whew. With that, so

00:26:12.269 --> 00:26:18.210
that concludes my presentation. If you guys
have any questions for us, we'll be hanging

00:26:18.210 --> 00:26:40.020
around for the panel and happy hacking. Sorry,
I move a little slower than I used to.

