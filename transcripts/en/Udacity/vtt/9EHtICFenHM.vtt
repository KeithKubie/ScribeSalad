WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So in the two examples that we just looked at, there was a vast space of inputs

00:00:04.000 --> 00:00:10.000
and some small part of that constituted the actual input domain for the software under test.

00:00:10.000 --> 00:00:14.000
And what happened was when we generated invalid inputs, which was extremely easy to do,

00:00:14.000 --> 00:00:17.000
they were executing a boring part of the software under test

00:00:17.000 --> 00:00:20.000
and getting them out to input rejection errors.

00:00:20.000 --> 00:00:24.000
And those rejections of invalid input were basically forcing us to generate another value

00:00:24.000 --> 00:00:26.000
and submit it and see what happens.

00:00:26.000 --> 00:00:29.000
So what's going to happen is the random testing loop is going to spend a lot of time spinning.

00:00:29.000 --> 00:00:32.000
That is to say, stressing on only a small part of the software under test.

00:00:32.000 --> 00:00:35.000
But there's actually something different that can happen that's much worse than that.

00:00:35.000 --> 00:00:38.000
So the other thing that can happen is the input isn't rejected.

00:00:38.000 --> 00:00:41.000
And the reason that an invalid input might not be rejected is

00:00:41.000 --> 00:00:45.000
that the software under test failed to contain sufficient validity checking logic

00:00:45.000 --> 00:00:48.000
in order to distinguish valid inputs from invalid inputs.

00:00:48.000 --> 00:00:50.000
And so what we're getting now is something potentially much worse.

00:00:50.000 --> 00:00:54.000
We get strange misbehavior, crashes, or something else very bad.

00:00:54.000 --> 00:00:59.000
And the problem is that when we get misbehavior, crashes, and other bad behavior

00:00:59.000 --> 00:01:04.000
from the software under test, these behaviors instead of being rejected by the software under test

00:01:04.000 --> 00:01:07.000
and letting our random testing loop proceed, these behaviors look like bugs.

00:01:07.000 --> 00:01:11.000
So normally if we crash the software under test, this is something that we have to track down manually

00:01:11.000 --> 00:01:13.000
and now we're taking a developer's time.

00:01:13.000 --> 00:01:16.000
And once we start taking human's time, what we're essentially doing is mounting

00:01:16.000 --> 00:01:20.000
a denial of service attack on whoever is processing bugs that come out of the random testing loop

00:01:20.000 --> 00:01:24.000
after looking at about 10 bugs that are caused by invalid inputs to the software under test

00:01:24.000 --> 00:01:27.000
the person who is looking at that input is going to get tired of it

00:01:27.000 --> 00:01:29.000
and isn't going to look at them any more and now we have a problem.

00:01:29.000 --> 00:01:31.000
Now we have a random testing loop producing no actionable output.

00:01:31.000 --> 00:01:34.000
And so our random testing effort has basically failed.

00:01:34.000 --> 00:01:38.000
And so let's talk a little bit about why software under test would lack a validity checker.

00:01:38.000 --> 00:01:44.000
Well, as we saw I believe in Unit 1, internal interfaces, that is to say interfaces within a product

00:01:44.000 --> 00:01:49.000
and interfaces that don't spend trust boundaries often lack full validity checking.

00:01:49.000 --> 00:01:52.000
And they do that for performance reasons for code maintainability reasons

00:01:52.000 --> 00:01:55.000
basically because we have to trust somebody sometimes.

00:01:55.000 --> 00:01:57.000
Otherwise, we can't get a new software written.

00:01:57.000 --> 00:02:01.000
Another reason is, there exists software for which it is impossible to construct a validity checker.

00:02:01.000 --> 00:02:05.000
And so earlier in this unit, I was talking about the example of using Csmith.

00:02:05.000 --> 00:02:09.000
That is to say, my random test generator that generate C programs for testing compilers

00:02:09.000 --> 00:02:15.000
and it turns out that C compilers don't contain a good validity checker for C.

00:02:15.000 --> 00:02:18.000
And the reasons for that are kind of involved but the quick answer is that

00:02:18.000 --> 00:02:23.000
if you have a C program it's undecidable whether that program dereferences a null pointer,

00:02:23.000 --> 00:02:26.000
accesses an out-of-bounds array element, or do something else that violates the rules of C.

00:02:26.000 --> 00:02:29.000
So compilers do do quite a lot of validity checking--

00:02:29.000 --> 00:02:32.000
that is to say, they look for syntactically invalidacy.

00:02:32.000 --> 00:02:36.000
What they fail to do is check for the dynamic validity properties that are required

00:02:36.000 --> 00:02:38.000
for certain kinds of miscompilation books.

00:02:38.000 --> 00:02:42.000
So in summary, the input validity problem bites us as a performance problem

00:02:42.000 --> 00:02:44.000
almost every time we write a random tester.

00:02:44.000 --> 00:02:48.000
It bites us in a much more serious way when we have some software under test

00:02:48.000 --> 00:02:50.000
that lacks a reliable validity checker.

