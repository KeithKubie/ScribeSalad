WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:03.910
SPEAKER 1: In Android Nougat
7.1, that's API level 25,

00:00:03.910 --> 00:00:05.610
there's an exciting new API.

00:00:05.610 --> 00:00:07.940
And it's a total game changer.

00:00:07.940 --> 00:00:11.440
It provides full platform
support for the most expressive

00:00:11.440 --> 00:00:15.210
of conversational tools, the
JIF or even GIF keyboard.

00:00:15.210 --> 00:00:18.240
Even better than that,
it's not just in API 25

00:00:18.240 --> 00:00:20.500
because version 25 of
the support library

00:00:20.500 --> 00:00:23.370
provides a backwards
compatible set of APIs allowing

00:00:23.370 --> 00:00:27.230
apps and keyboards to support
it all the way back to API 13.

00:00:27.230 --> 00:00:30.570
That's over 98% of
all active devices.

00:00:30.570 --> 00:00:33.970
So there's two halves of the
API-- the outputting of emojis,

00:00:33.970 --> 00:00:36.810
stickers, the G-word
and other rich content

00:00:36.810 --> 00:00:38.860
for use by keyboard
devs, and then

00:00:38.860 --> 00:00:42.850
exposing the input capabilities
and receiving the media for use

00:00:42.850 --> 00:00:44.880
by app devs.

00:00:44.880 --> 00:00:46.310
The flow goes like this.

00:00:46.310 --> 00:00:48.950
When the user taps on
an EditText, the editor

00:00:48.950 --> 00:00:52.290
sends a list of MIME types it
can accept to the keyboard.

00:00:52.290 --> 00:00:54.770
The keyboard reads those
lists and displays content

00:00:54.770 --> 00:00:56.960
of those types to the user.

00:00:56.960 --> 00:00:59.570
When the user selects an
image, the keyboard calls

00:00:59.570 --> 00:01:02.940
commit content and sends
that content to the editor.

00:01:02.940 --> 00:01:06.190
We're going to look at the
flow for app developers first.

00:01:06.190 --> 00:01:08.810
If you're the developer
of a messaging, social,

00:01:08.810 --> 00:01:11.590
or any other app that can
benefit from enhanced keyboard

00:01:11.590 --> 00:01:14.910
support, then by implementing
rich media this way,

00:01:14.910 --> 00:01:17.300
you can accept it from
any compatible keyboard,

00:01:17.300 --> 00:01:20.080
letting users choose
which they prefer.

00:01:20.080 --> 00:01:22.720
To tell the keyboard which
content types you can accept,

00:01:22.720 --> 00:01:25.300
you override the
onCreateInputConnection method

00:01:25.300 --> 00:01:26.650
of EditText.

00:01:26.650 --> 00:01:29.730
Then use EditorInfoCompat
.setContentMimeTypes

00:01:29.730 --> 00:01:32.786
to populate the EditorInfo
object with the MIME types you

00:01:32.786 --> 00:01:33.480
support.

00:01:33.480 --> 00:01:35.190
It's the EditorInfo
that's passed

00:01:35.190 --> 00:01:37.920
between the app
and the keyboard.

00:01:37.920 --> 00:01:40.310
Then return your
InputConnection callback,

00:01:40.310 --> 00:01:42.810
which you're going to use to
handle the incoming media when

00:01:42.810 --> 00:01:44.850
the keyboard commits it.

00:01:44.850 --> 00:01:46.540
Many messaging apps
have an EditText

00:01:46.540 --> 00:01:48.520
at the bottom of the
screen for text entry

00:01:48.520 --> 00:01:50.650
and then a pretty message
history or conversational

00:01:50.650 --> 00:01:52.000
view above it.

00:01:52.000 --> 00:01:54.410
We've got a sample called
Commit Content sample

00:01:54.410 --> 00:01:57.500
app that displays EditText with
different allowed MIME types

00:01:57.500 --> 00:02:00.400
and displays the incoming
media in a web view.

00:02:00.400 --> 00:02:02.120
It's available in
the usual places,

00:02:02.120 --> 00:02:06.640
in Android Studio samples
importer or GitHub repo.

00:02:06.640 --> 00:02:09.169
Another thing it shows is
requesting and releasing

00:02:09.169 --> 00:02:13.030
permissions for the rich
content being passed over.

00:02:13.030 --> 00:02:14.700
For input method
editor developers,

00:02:14.700 --> 00:02:17.580
gone are the days of copying
images to the clipboard.

00:02:17.580 --> 00:02:20.280
Now apps can tell you what
content types they'll accept,

00:02:20.280 --> 00:02:22.670
and you can start
flinging it across.

00:02:22.670 --> 00:02:25.236
Simply override
the OnStarInputView

00:02:25.236 --> 00:02:27.110
and you'll receive the
editorInfo object that

00:02:27.110 --> 00:02:29.920
was populated by the app
and discover the accepted

00:02:29.920 --> 00:02:31.266
MIME types.

00:02:31.266 --> 00:02:33.390
Then you can retrieve your
current input connection

00:02:33.390 --> 00:02:36.100
and commit the
content, ideally using

00:02:36.100 --> 00:02:37.976
the compat version of the APIs.

00:02:37.976 --> 00:02:40.870
It's worth mentioning that
Android 7.1 devices will

00:02:40.870 --> 00:02:42.347
use the native implementation.

00:02:42.347 --> 00:02:44.680
And that means you're going
to need to grant permissions

00:02:44.680 --> 00:02:46.090
to the content URI.

00:02:46.090 --> 00:02:48.310
We've got a sample IME
implementation as well,

00:02:48.310 --> 00:02:50.810
and it's called the
Commit Content IME sample.

00:02:50.810 --> 00:02:53.140
You'll also find it in the
Android Studio sample's

00:02:53.140 --> 00:02:54.710
browser.

00:02:54.710 --> 00:02:57.370
Now you can enable more
expressive and exciting

00:02:57.370 --> 00:03:00.260
conversations across
your entire user base.

00:03:00.260 --> 00:03:01.160
Excellent.

00:03:01.160 --> 00:03:01.760
Applause.

00:03:01.760 --> 00:03:04.510
[MUSIC PLAYING]

