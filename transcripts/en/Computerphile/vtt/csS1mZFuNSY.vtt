WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.280
GUEST: So, "smart contracts" are rather poorly named, in the sense that that they're

00:00:04.360 --> 00:00:06.700
more-properly thought of as 'applications';

00:00:06.700 --> 00:00:10.200
a series of 'if-then-else'-type clauses

00:00:10.200 --> 00:00:15.200
for drafting up and executing negotiations.

00:00:15.240 --> 00:00:20.740
So, the last video I did was on 'block chain' technology with a leaning toward Bitcoin and cryptocurrency.

00:00:20.760 --> 00:00:23.440
Without rehashing too much of that video,

00:00:23.440 --> 00:00:26.820
a 'block chain' is a technology---a distributed ledger--

00:00:26.900 --> 00:00:30.740
and means of validating and seeing a series of transactions

00:00:30.740 --> 00:00:35.580
such that no party in the network needs to directly trust or know anybody else.

00:00:36.740 --> 00:00:40.420
And the first application of this was cryptocurrency,

00:00:40.420 --> 00:00:42.000
most-notably, Bitcoin.

00:00:42.000 --> 00:00:45.860
But now people have started talking about using this 'block-chain' technology

00:00:45.960 --> 00:00:51.440
not just for storing transactions of Bitcoins or cryptocurrency

00:00:51.440 --> 00:00:56.100
but as storing "smart contracts" and running "smart contracts."

00:00:58.500 --> 00:01:02.520
INTERVIEWER: Just because we're using an application that allows me to pay a taxi driver

00:01:02.520 --> 00:01:06.980
surely I'm still going to need the taxi-lift, ride-sharing application

00:01:06.980 --> 00:01:09.220
to get me in touch with whoever's offering the service?

00:01:09.720 --> 00:01:12.620
GUEST: That gets a little bit further down the rabbit hole

00:01:12.620 --> 00:01:15.800
and into something called "distributed applications"

00:01:15.800 --> 00:01:19.840
where, in fact, anyone could---you would have your "smart contract"

00:01:19.840 --> 00:01:24.040
that is your business logic for negotiating the transfer of funds

00:01:24.060 --> 00:01:27.420
to taking the Uber case to the driver and the client

00:01:27.420 --> 00:01:34.200
and you have your front end---you could think of it like your a web developer, like a front-end HTML page to your back-end service.

00:01:34.200 --> 00:01:40.520
But instead of having that front-end being a web page---it could be a web page, but it could be a desktop application,

00:01:40.520 --> 00:01:46.000
the sorts of Limewire, Napster; something running locally on your machine

00:01:46.000 --> 00:01:51.880
and anyone is free to create their own front-end to a given "smart contract" application

00:01:51.880 --> 00:01:54.740
and distribute it in any way they like

00:01:54.740 --> 00:01:59.860
so it doesn't have to be running from one particular website or run by one particular organisation.

00:01:59.980 --> 00:02:03.460
It could even be put on something called the Interplanetary File System, which is

00:02:03.480 --> 00:02:07.800
a peer-to-peer networked file system

00:02:07.800 --> 00:02:13.000
such that it couldn't actually be taken down or moderated by any one individual

00:02:13.000 --> 00:02:16.320
in the way a standard website can.

00:02:16.320 --> 00:02:22.680
It has the potential, at least, to completely remove the middle-man

00:02:22.680 --> 00:02:28.320
the escrow account because your 'smart contract' ends up performing that function.

00:02:28.320 --> 00:02:34.260
An escrow is a third impartial mediating party---it's the function of Uber

00:02:34.260 --> 00:02:39.220
Uber take your money, Uber, importantly, take their cut, and then pays the driver.

00:02:39.220 --> 00:02:42.580
If you have a "smart contract" taking the place of Uber

00:02:42.580 --> 00:02:44.160
there's no middle-man taking a cut.

00:02:44.160 --> 00:02:49.240
It really is a technology that represents a revolution rather than an evolution.

00:02:49.520 --> 00:02:54.780
And it's something where you're going to move away from

00:02:54.820 --> 00:02:58.060
ownership of data or ownership of a service

00:02:58.060 --> 00:03:02.760
to designing the best interface to that service

00:03:02.760 --> 00:03:07.000
because a service can be put up on the block chain technology

00:03:07.000 --> 00:03:09.720
used by anyone, viewed by anyone

00:03:09.720 --> 00:03:14.940
so the best written service that performs the job is the one that's going to be used most.

00:03:15.000 --> 00:03:19.460
And what determines whether an Uber-type outfit makes money or not

00:03:19.460 --> 00:03:24.640
is whether you've got the most user-friendly, prettiest app to interface with the "smart contract"

00:03:24.640 --> 00:03:32.380
and you could charge a sum for using your particular interface to the "smart contract."

00:03:32.380 --> 00:03:37.180
But we really are talking Wordpress-type---our business logic is gone

00:03:37.300 --> 00:03:41.260
we're talking about a user interface, a nice pretty way of interfacing with it

00:03:41.260 --> 00:03:45.740
so there's nothing to stop an open-source community

00:03:45.740 --> 00:03:48.580
or an individual in their garage producing the nicest pretty---

00:03:48.580 --> 00:03:52.980
a graphical design student produces the nicest Uber app, umm...

00:03:52.980 --> 00:03:57.580
and distributes it for free because he has the time and because he can.

00:03:57.580 --> 00:04:03.040
INTERVIEWER: Let's stick with Uber for now; is it say that the drivers would have to say, "right, I run with this kind of contract"

00:04:03.040 --> 00:04:10.000
or would they log themselves with two or three different types of contract and then you just find them through--however you find them?

00:04:10.000 --> 00:04:14.240
GUEST: That's the other thing though: they're free to use different contracts, different models.

00:04:14.240 --> 00:04:26.760
So you could have a "smart contract" that models a taxi-like service for weekdays and a different one for weekends

00:04:26.760 --> 00:04:29.960
that offers some benefit to the driver for weekends

00:04:29.960 --> 00:04:34.580
and they can absolutely make use of both contracts.

00:04:34.580 --> 00:04:38.080
In fact, you can have the same interface to both contracts.

00:04:38.080 --> 00:04:43.380
So, in terms of the client finding them

00:04:43.380 --> 00:04:45.920
it's seemless and they don't have to know or care about---

00:04:45.920 --> 00:04:51.260
but in terms of the driver, they're optimising, potentially, the way they're getting paid

00:04:51.260 --> 00:04:54.680
depending on which contract they're using.

00:04:54.680 --> 00:04:58.280
And your "smart contract" could model a "luggage allowance", or something like this

00:04:58.280 --> 00:05:03.240
so you end up getting a min-van if you're taking a whole bunch of people and a whole bunch of luggage.

00:05:03.240 --> 00:05:07.940
INTERVIEWER: Would there be one block chain that the different contracts all stack their data on

00:05:07.940 --> 00:05:11.900
or would there be a block chain for each of the contracts? How does that work?

00:05:11.900 --> 00:05:14.860
GUEST: So that's an interesting question.

00:05:15.020 --> 00:05:17.200
There are

00:05:17.480 --> 00:05:22.120
different block chain outfits out there at the moment

00:05:24.040 --> 00:05:26.560
each with their own sort-of

00:05:27.020 --> 00:05:31.100
instatiation--or ability--to express "smart contracts."

00:05:31.260 --> 00:05:37.420
So in fact, Bitcoin has been expanded to allow some kind of "smart contract" capabilities

00:05:37.420 --> 00:05:39.120
but it's not what it was designed for.

00:05:40.900 --> 00:05:46.740
The platform which is really sort-of making headway, and is a big name in this area of "smart contracts"

00:05:46.740 --> 00:05:48.500
is something called Ethereum.

00:05:49.200 --> 00:05:53.680
And Ethereum is a block chain that is designed

00:05:53.680 --> 00:05:57.200
not primarily to store cryptocurrencies

00:05:57.200 --> 00:06:00.120
and tokens and transactions

00:06:00.120 --> 00:06:04.840
but actually to store a global computer state

00:06:04.840 --> 00:06:07.220
and a series of computational operations.

00:06:08.160 --> 00:06:13.740
Ethereum can be thought of as a very-large, very-slow, global computer

00:06:13.740 --> 00:06:16.560
stored on the block chain.

00:06:16.560 --> 00:06:18.100
INTERVIEWER: How does the money work then?

00:06:18.100 --> 00:06:24.120
GUEST: Although I said the Ethereum block chain was not primarily a cryptocurrency, which it isn't

00:06:24.120 --> 00:06:28.300
you still do pay for things in it with cryptocurrency.

00:06:28.300 --> 00:06:34.940
So your Ethereum block chain stores a global computer state and a series of computational operations

00:06:34.940 --> 00:06:39.720
but you pay for performing those operations and you pay in the Ethereum currency

00:06:39.720 --> 00:06:41.940
which is not Bitcoin, but Ether.

00:06:43.360 --> 00:06:47.040
And in fact, there's the translation between the Ether, which is the cryptocurrency

00:06:47.060 --> 00:06:51.500
and the computational operations which are charged in Gas

00:06:51.500 --> 00:06:54.080
and there's a Gas to Ether exchange rate.

00:06:54.260 --> 00:07:00.900
This is an account on a distributed application that exists for the Ethereum network

00:07:01.280 --> 00:07:10.280
and essentially, I've got this application here, Mist, which I downloaded as my front-end, my GUI, my way of interfacing to the Ethereum network

00:07:10.280 --> 00:07:15.020
and it's a browser that allows me to see other distributed applications that are out there

00:07:15.020 --> 00:07:17.140
and potentially view them as well.

00:07:17.140 --> 00:07:25.360
So, the distributed application that I've searched for here is a service for converting from one cryptocurrency to another, called Shapeshift.

00:07:25.900 --> 00:07:32.540
And this application---I can search for it through this browser, I can pull it down, I can display it

00:07:32.540 --> 00:07:36.540
this 'Mist' application--this interface is running locally on my machine

00:07:36.540 --> 00:07:42.880
but it's negotiating when it's sending its transactions when I'm converting Ether to Bitcoin or vice-versa.

00:07:42.880 --> 00:07:49.420
or performing the functions of a given application that I load.

00:07:49.940 --> 00:07:56.420
It's then serving as my gateway to the "smart contracts" that are hosted on the Ethereum network

00:07:56.820 --> 00:07:59.060
and then whatever function I call

00:07:59.500 --> 00:08:03.640
which I call by sending a transaction

00:08:04.100 --> 00:08:10.180
is executed on all the nodes in the network in parallel.

00:08:10.180 --> 00:08:15.580
You've got---which is why it's very slow because you have a redundant queue of this sort of computation, whatever it might be

00:08:15.580 --> 00:08:18.000
it could, you know, add two numbers together

00:08:18.000 --> 00:08:23.380
is being performed by every single node and then agreed upon

00:08:23.380 --> 00:08:31.040
and then the result of that is added to the global state of the Ethereum virtual machine - global computer is updated.

