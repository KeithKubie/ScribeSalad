WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.030
[MUSIC PLAYING]

00:00:06.030 --> 00:00:08.650
FONTAINE FOXWORTH: Good morning,
everybody, everybody here

00:00:08.650 --> 00:00:10.400
in the room and then,
of course, everybody

00:00:10.400 --> 00:00:14.080
watching on live stream or
later watching on YouTube.

00:00:14.080 --> 00:00:15.710
My name is Fontaine
Foxworth and I'll

00:00:15.710 --> 00:00:18.060
be walking you through
today how to best take

00:00:18.060 --> 00:00:21.890
advantage of the Places API,
which is the technology that's

00:00:21.890 --> 00:00:24.880
responsible for
actually distributing

00:00:24.880 --> 00:00:28.040
semantic information
about places to you

00:00:28.040 --> 00:00:31.430
as developers with
widely different needs.

00:00:31.430 --> 00:00:35.080
Now, first I want to
start with the word place.

00:00:35.080 --> 00:00:39.720
When I joined the team, I asked,
what exactly does place mean?

00:00:39.720 --> 00:00:41.680
And I was met with giggles.

00:00:41.680 --> 00:00:45.770
Well, it depends on who you
talk to, was the response I got.

00:00:45.770 --> 00:00:48.480
We discussed, was there
a more appropriate word

00:00:48.480 --> 00:00:51.940
or perhaps a more precise
word to describe places?

00:00:51.940 --> 00:00:53.600
And over the coming
weeks, I really

00:00:53.600 --> 00:00:55.960
started to grow pretty
fond of the word.

00:00:55.960 --> 00:00:58.260
You see, place
does mean something

00:00:58.260 --> 00:00:59.900
different to everybody.

00:00:59.900 --> 00:01:03.240
But there are a couple
of common trends.

00:01:03.240 --> 00:01:06.650
Place is a place fundamentally
because we as humans

00:01:06.650 --> 00:01:08.800
assign value to it.

00:01:08.800 --> 00:01:11.240
And Google cares deeply
about understanding

00:01:11.240 --> 00:01:13.330
these places that are
living and breathing

00:01:13.330 --> 00:01:15.580
and updating all the time.

00:01:15.580 --> 00:01:19.604
And so we take it upon us
to have an up-to-date record

00:01:19.604 --> 00:01:20.270
of these places.

00:01:22.870 --> 00:01:27.160
Now, I moved to Sydney,
Australia back in February.

00:01:27.160 --> 00:01:28.660
And when I got off
the plane, I felt

00:01:28.660 --> 00:01:32.180
similar to how I imagine
this girl here feels.

00:01:32.180 --> 00:01:35.180
She's getting her bearings,
orienting herself.

00:01:35.180 --> 00:01:37.210
She's on a path.

00:01:37.210 --> 00:01:40.550
And in the same way, I,
when I arrived in Australia,

00:01:40.550 --> 00:01:44.100
adjusted my own internal GPS
and tried to get familiar

00:01:44.100 --> 00:01:45.770
with my context.

00:01:45.770 --> 00:01:48.360
So I would bike around
different neighborhoods,

00:01:48.360 --> 00:01:51.340
drink flat whites in
different coffee shops

00:01:51.340 --> 00:01:55.640
or read in bookstores.

00:01:55.640 --> 00:01:58.470
I was getting to know
the place of Australia

00:01:58.470 --> 00:02:01.470
but I was also getting to
know neighborhoods and streets

00:02:01.470 --> 00:02:03.610
and shops.

00:02:03.610 --> 00:02:05.780
Now, I'll be taking
you on a journey today.

00:02:05.780 --> 00:02:09.470
And this will go in
three different phases.

00:02:09.470 --> 00:02:12.000
The first phase I want
to actually explore

00:02:12.000 --> 00:02:13.990
what it means to be a place.

00:02:13.990 --> 00:02:17.140
We have this location stack
that has all different levels

00:02:17.140 --> 00:02:18.920
of metadata about a place.

00:02:18.920 --> 00:02:21.840
And I'm going to talk you
through how you can actually

00:02:21.840 --> 00:02:26.130
access different types of
metadata about our places.

00:02:26.130 --> 00:02:30.980
Secondly, we'll be exploring
several real-world applications

00:02:30.980 --> 00:02:34.120
and then the corresponding
services within the Places API

00:02:34.120 --> 00:02:39.110
that you can use to
actually meet those cases.

00:02:39.110 --> 00:02:41.200
And then finally,
I'll be talking

00:02:41.200 --> 00:02:42.890
through how this is
best accomplished

00:02:42.890 --> 00:02:44.310
through our mobile SDKs.

00:02:47.890 --> 00:02:51.830
So now actually diving into that
location stack, when we first

00:02:51.830 --> 00:02:53.750
started mapping the
world, it was largely

00:02:53.750 --> 00:02:55.500
about charting courses.

00:02:55.500 --> 00:02:58.100
And so a latitude and a
longitude and some math

00:02:58.100 --> 00:03:01.730
was usually enough to get
from point A to point B.

00:03:01.730 --> 00:03:03.830
But this isn't
necessarily the best way

00:03:03.830 --> 00:03:07.440
that we as humans
understand the world.

00:03:07.440 --> 00:03:10.070
I'm showing you here a set
of coordinates, a latitude

00:03:10.070 --> 00:03:13.310
and a longitude, 37.4
something degrees

00:03:13.310 --> 00:03:18.270
latitude, negative
122.1 degrees longitude.

00:03:18.270 --> 00:03:20.520
My guess is, upon
first seeing this,

00:03:20.520 --> 00:03:22.880
you don't automatically
know where it is.

00:03:22.880 --> 00:03:25.450
Now, this is certainly
helpful to us

00:03:25.450 --> 00:03:28.930
and certainly as we input
this kind of information

00:03:28.930 --> 00:03:32.350
into computer that's powerful,
for example, in a mapping API

00:03:32.350 --> 00:03:37.035
to actually plot on a
map where this point is.

00:03:37.035 --> 00:03:38.910
We'll come back to those
specific coordinates

00:03:38.910 --> 00:03:41.080
in a minute.

00:03:41.080 --> 00:03:43.850
But then we actually started to
structure the world around us.

00:03:43.850 --> 00:03:49.790
We started to have postal codes
or house numbers or streets,

00:03:49.790 --> 00:03:51.580
basically addresses.

00:03:51.580 --> 00:03:53.270
And addresses were
certainly powerful

00:03:53.270 --> 00:03:56.910
in helping us structure and
understand the world around us

00:03:56.910 --> 00:03:59.460
and critical for systems
like postal services

00:03:59.460 --> 00:04:01.410
where we're trying
to get a letter

00:04:01.410 --> 00:04:04.480
to a specific destination.

00:04:04.480 --> 00:04:08.240
But as humans, we don't usually
remember more than a couple

00:04:08.240 --> 00:04:09.410
of addresses.

00:04:09.410 --> 00:04:12.750
I know my own home address,
maybe my parents' address.

00:04:12.750 --> 00:04:15.660
But beyond that I really
don't have any more.

00:04:15.660 --> 00:04:19.430
So there must be a better way
for us to actually understand

00:04:19.430 --> 00:04:21.690
places in the world.

00:04:21.690 --> 00:04:24.080
Now, if we go back to those
coordinates we saw earlier

00:04:24.080 --> 00:04:27.747
and we added an additional
layer of metadata, the address,

00:04:27.747 --> 00:04:29.580
we can start to understand
a little bit more

00:04:29.580 --> 00:04:31.260
about this place, right?

00:04:31.260 --> 00:04:32.480
It's an amphitheater.

00:04:32.480 --> 00:04:33.539
It's in Mountain View.

00:04:33.539 --> 00:04:35.080
I'm starting to get
a little bit more

00:04:35.080 --> 00:04:36.704
of a characterization
about that place.

00:04:39.250 --> 00:04:42.490
But we as humans fundamentally
understand and memorize

00:04:42.490 --> 00:04:45.450
the world around us
with semantic places

00:04:45.450 --> 00:04:47.480
and their characteristics.

00:04:47.480 --> 00:04:51.080
So here is an image of Shoreline
Amphitheater actually taken

00:04:51.080 --> 00:04:53.036
At google I/O last year.

00:04:53.036 --> 00:04:54.410
I know that I'm
sitting somewhere

00:04:54.410 --> 00:04:56.910
in the back right, up on
the line there probably,

00:04:56.910 --> 00:04:59.750
when this image was taken.

00:04:59.750 --> 00:05:03.040
And so when we add that next
layer of metadata onto those

00:05:03.040 --> 00:05:04.870
coordinates we saw
earlier, we see

00:05:04.870 --> 00:05:08.210
that I was, in fact, talking
about Shoreline Amphitheater.

00:05:08.210 --> 00:05:10.600
So now this place becomes
a lot more real to us.

00:05:10.600 --> 00:05:12.500
I understand this as a human.

00:05:12.500 --> 00:05:14.020
And there's so
much other metadata

00:05:14.020 --> 00:05:18.650
that we can associate with
this particular place.

00:05:18.650 --> 00:05:21.450
So when it comes to
a sense of place,

00:05:21.450 --> 00:05:23.820
it's not just geographic.

00:05:23.820 --> 00:05:27.360
It necessitates this
human characterization.

00:05:27.360 --> 00:05:30.320
So I've actually started to
fall in love with the word place

00:05:30.320 --> 00:05:33.990
precisely because it is
so imprecise, because it

00:05:33.990 --> 00:05:36.070
means something
different to everybody.

00:05:36.070 --> 00:05:38.190
In fact, that's what
makes it a place at all.

00:05:42.000 --> 00:05:43.030
Now, I read a lot.

00:05:43.030 --> 00:05:46.890
And my favorite author is a
woman named Rebecca Solnit.

00:05:46.890 --> 00:05:50.049
I first encountered her
when I came across an atlas

00:05:50.049 --> 00:05:50.840
that she'd written.

00:05:50.840 --> 00:05:55.170
And it had 25 different
maps, all of San Francisco.

00:05:55.170 --> 00:05:56.900
And each one of these
maps is basically

00:05:56.900 --> 00:05:59.680
looking at a different
level or layer of data

00:05:59.680 --> 00:06:02.490
about San Francisco and
had a corresponding essay

00:06:02.490 --> 00:06:03.720
written about it.

00:06:03.720 --> 00:06:05.810
And her big thesis out
of that was basically

00:06:05.810 --> 00:06:07.980
a map is not a
canonical definition

00:06:07.980 --> 00:06:09.650
or representation of a place.

00:06:09.650 --> 00:06:12.300
It's merely a layer
of data that we choose

00:06:12.300 --> 00:06:13.880
to represent about a place.

00:06:13.880 --> 00:06:15.360
And you can have
infinite maps that

00:06:15.360 --> 00:06:19.390
represent a place, which is
why she was creating an Atlas.

00:06:19.390 --> 00:06:21.060
So she had a quote
from a different book

00:06:21.060 --> 00:06:24.040
which I thought was relevant
and wanted to share.

00:06:24.040 --> 00:06:25.450
Places matter.

00:06:25.450 --> 00:06:28.040
Their rules, their
scale, their design

00:06:28.040 --> 00:06:30.660
include or exclude
civil society.

00:06:30.660 --> 00:06:35.095
Pedestrianism, equality,
diversity, they map our lives.

00:06:38.250 --> 00:06:40.580
Now, Google's mission is
to organize the world's

00:06:40.580 --> 00:06:43.000
information and
make it universally

00:06:43.000 --> 00:06:45.480
accessible and useful.

00:06:45.480 --> 00:06:48.450
And certainly understanding
physical, real-world places

00:06:48.450 --> 00:06:51.050
is critical to this
mission of organizing

00:06:51.050 --> 00:06:53.100
the world's information.

00:06:53.100 --> 00:06:55.360
But as you can imagine,
it's an immense task

00:06:55.360 --> 00:06:58.030
and there's lots of challenges.

00:06:58.030 --> 00:07:00.780
So among these
challenges, first of all,

00:07:00.780 --> 00:07:03.310
there are hundreds
of millions of places

00:07:03.310 --> 00:07:05.790
in the world that
we have a record of,

00:07:05.790 --> 00:07:08.960
not to mention the infinite
places that we don't yet

00:07:08.960 --> 00:07:10.270
have a record of.

00:07:10.270 --> 00:07:14.410
So there's so much
information out there.

00:07:14.410 --> 00:07:18.450
Secondly, places have a
very natural life cycle.

00:07:18.450 --> 00:07:19.890
Businesses spring up.

00:07:19.890 --> 00:07:21.260
Businesses closed down.

00:07:21.260 --> 00:07:23.800
We know that about
10% to 15% of places

00:07:23.800 --> 00:07:26.430
are turning over every year.

00:07:26.430 --> 00:07:30.270
And then, of course, places can
mean so many different things.

00:07:30.270 --> 00:07:33.840
So how I would represent an
ATM in our database versus how

00:07:33.840 --> 00:07:36.860
I would represent a
cafe or a hospital

00:07:36.860 --> 00:07:38.870
would all be very different.

00:07:38.870 --> 00:07:41.030
So I need a way to
actually capture

00:07:41.030 --> 00:07:44.420
all the nuances of different
types of places while still

00:07:44.420 --> 00:07:45.745
creating a scalable system.

00:07:49.370 --> 00:07:52.050
So where does Google
get all this data?

00:07:52.050 --> 00:07:54.560
We collect data from a
whole variety of sources

00:07:54.560 --> 00:07:56.610
and put it in a
single place to make

00:07:56.610 --> 00:07:58.960
available to the systems
that are actually

00:07:58.960 --> 00:08:00.800
using these objects.

00:08:00.800 --> 00:08:04.170
So I'll walk you through
some of those sources now.

00:08:08.260 --> 00:08:09.840
The first is Street View.

00:08:09.840 --> 00:08:13.450
We have cars driving the
streets of the world taking

00:08:13.450 --> 00:08:16.810
360-degree imagery of
the places they're in.

00:08:16.810 --> 00:08:19.040
So we can create
immersive experiences

00:08:19.040 --> 00:08:23.330
that we've heard a lot
at Google I/O this year.

00:08:23.330 --> 00:08:26.030
There's potential for
more virtual experiences.

00:08:26.030 --> 00:08:29.200
Having this sort of
360 immersive imagery

00:08:29.200 --> 00:08:32.630
is going to be critical to
actually creating those.

00:08:32.630 --> 00:08:33.760
And it's not just cars.

00:08:33.760 --> 00:08:37.210
We have sometimes bikes giving
360-degree imagery, even

00:08:37.210 --> 00:08:42.820
backpackers with 360-degree
cameras trekking the Grand

00:08:42.820 --> 00:08:43.320
Canyon.

00:08:46.800 --> 00:08:49.550
We also have satellite imagery.

00:08:49.550 --> 00:08:52.280
This aerial footage helps us
understand a totally different

00:08:52.280 --> 00:08:54.270
aspect of the world and maps.

00:08:54.270 --> 00:08:57.020
This is more about
geometry, so understanding

00:08:57.020 --> 00:08:59.280
if a building takes up a
certain amount of space,

00:08:59.280 --> 00:09:01.600
what's its relationship
to a road, what

00:09:01.600 --> 00:09:04.670
are geopolitical entities
and how are they structured?

00:09:04.670 --> 00:09:07.890
So getting this sort of imagery
conveys a totally different

00:09:07.890 --> 00:09:10.720
lens of data.

00:09:10.720 --> 00:09:13.220
There was that movie, Lion,
which came out recently

00:09:13.220 --> 00:09:16.070
which I thought was a really
powerful illustration of how

00:09:16.070 --> 00:09:19.560
a human could take a technology
like satellite imagery provided

00:09:19.560 --> 00:09:22.070
through Google Earth
and actually create

00:09:22.070 --> 00:09:24.040
incredible value in his life.

00:09:24.040 --> 00:09:26.070
It was a boy named
Saroo who I think

00:09:26.070 --> 00:09:28.750
was lost at the age of
five or six in India.

00:09:28.750 --> 00:09:31.040
He had actually
gotten onto a train

00:09:31.040 --> 00:09:33.780
and ended up hundreds or
thousands of kilometers

00:09:33.780 --> 00:09:37.340
away from where he
was being raised.

00:09:37.340 --> 00:09:40.450
He ended up being
adopted in Australia.

00:09:40.450 --> 00:09:42.880
And decades later, he
went into Google Earth

00:09:42.880 --> 00:09:46.060
and was actually able to
track down the train station

00:09:46.060 --> 00:09:48.220
that he'd accidentally had
gotten onto the train at

00:09:48.220 --> 00:09:51.694
and find his birth family
and reconnect with them.

00:09:51.694 --> 00:09:53.110
So a really powerful
way of how we

00:09:53.110 --> 00:09:57.230
can take technology as humans
and create value for ourselves.

00:10:00.030 --> 00:10:02.710
And then, of course, we
have business owners.

00:10:02.710 --> 00:10:04.880
Via Google My Business,
business owners

00:10:04.880 --> 00:10:07.120
are able to come in and
actually control how they're

00:10:07.120 --> 00:10:08.680
being represented to the world.

00:10:08.680 --> 00:10:11.130
So they can make sure their
phone numbers are up to date,

00:10:11.130 --> 00:10:13.980
their websites are
the correct ones.

00:10:13.980 --> 00:10:16.630
This is an example of
a brewery who did this.

00:10:16.630 --> 00:10:21.010
I also connected with a woman
in Sydney a few months ago

00:10:21.010 --> 00:10:22.870
who had a bed and
breakfast and needed

00:10:22.870 --> 00:10:26.360
help actually getting set
up with Google My Business

00:10:26.360 --> 00:10:28.990
because her visitors, the people
who were staying with her,

00:10:28.990 --> 00:10:32.670
didn't want written instructions
about how to actually arrive

00:10:32.670 --> 00:10:33.900
at her bed and breakfast.

00:10:33.900 --> 00:10:36.470
They wanted to just be able
to type it into Google Maps

00:10:36.470 --> 00:10:38.290
and have Google Maps
take them there.

00:10:38.290 --> 00:10:40.710
So I was able to help
her take ownership

00:10:40.710 --> 00:10:43.736
of how her bed and breakfast
is represented on Google Maps

00:10:43.736 --> 00:10:45.360
to make sure that
the right address was

00:10:45.360 --> 00:10:47.830
there and all the other
information that she needed.

00:10:51.220 --> 00:10:54.650
And then, of course, we have
the consumer applications,

00:10:54.650 --> 00:10:55.390
Google Maps.

00:10:55.390 --> 00:10:57.940
We all probably have
Google Maps in our pocket

00:10:57.940 --> 00:11:01.040
and are using it on
a near daily basis.

00:11:01.040 --> 00:11:04.490
And we all have the power
to make modifications

00:11:04.490 --> 00:11:07.010
to certain place entries.

00:11:07.010 --> 00:11:10.360
We can contribute content,
whether reviews or photos.

00:11:10.360 --> 00:11:13.790
Here's an illustration of
trying to modify the Shoreline

00:11:13.790 --> 00:11:15.890
Amphitheater place.

00:11:15.890 --> 00:11:18.540
And I can only imagine that this
particular channel will become

00:11:18.540 --> 00:11:20.730
more and more powerful
as Google wants

00:11:20.730 --> 00:11:23.700
to empower its users to
help us actually shape

00:11:23.700 --> 00:11:25.230
our representation of the world.

00:11:29.180 --> 00:11:32.420
And so with all of these
data sources, of which I just

00:11:32.420 --> 00:11:35.050
covered four, we are
able to bring them

00:11:35.050 --> 00:11:37.420
all into a single place and
understand the relationship

00:11:37.420 --> 00:11:39.280
between different objects.

00:11:39.280 --> 00:11:41.530
And then we make it, of
course, available to our users

00:11:41.530 --> 00:11:43.020
via Google Maps.

00:11:43.020 --> 00:11:46.870
But we also make it available
to developers like you

00:11:46.870 --> 00:11:49.360
to build cool
experiences on top of.

00:11:49.360 --> 00:11:51.850
And that's via the
Places API, which

00:11:51.850 --> 00:11:55.250
we'll be diving into some of
the specific applications today.

00:11:59.120 --> 00:12:00.940
And before we dive into
those applications,

00:12:00.940 --> 00:12:02.640
I want to take a
moment to acknowledge

00:12:02.640 --> 00:12:07.200
our primary key within
places, which is the place ID.

00:12:07.200 --> 00:12:10.340
This is the ID that helps you
get all of the information

00:12:10.340 --> 00:12:12.370
and metadata about a place.

00:12:12.370 --> 00:12:15.590
Now, as we talked about, places
can represent establishments

00:12:15.590 --> 00:12:17.930
like shops or bookstores.

00:12:17.930 --> 00:12:19.610
It can represent
points of interest

00:12:19.610 --> 00:12:22.660
like the Statue of Liberty
or the Sydney Opera House.

00:12:22.660 --> 00:12:24.390
It could be
geopolitical entities

00:12:24.390 --> 00:12:27.110
like Mountain View
or San Francisco,

00:12:27.110 --> 00:12:29.670
intersections, roads, addresses.

00:12:29.670 --> 00:12:32.260
Places can be so many things.

00:12:32.260 --> 00:12:34.070
And the primary
key to all of these

00:12:34.070 --> 00:12:36.820
is the corresponding place ID.

00:12:36.820 --> 00:12:38.370
Now, there's lots
of ways that we

00:12:38.370 --> 00:12:40.130
can characterize the place ID.

00:12:40.130 --> 00:12:43.070
But I want to take a
moment to illustrate three.

00:12:43.070 --> 00:12:44.830
First, it's unique.

00:12:44.830 --> 00:12:48.470
So each key exists exactly once.

00:12:48.470 --> 00:12:50.980
Secondly, the place
ID is ubiquitous

00:12:50.980 --> 00:12:53.865
and that certainly you can use
it throughout the place API.

00:12:53.865 --> 00:12:55.490
But you can also use
it throughout some

00:12:55.490 --> 00:12:58.680
of our other mapping
APIs or imagery APIs.

00:12:58.680 --> 00:13:01.410
So if I wanted to
get the Street View

00:13:01.410 --> 00:13:03.280
imagery for a specific
place, I would just

00:13:03.280 --> 00:13:06.740
need to pass in that place ID
to one of our Street View APIs.

00:13:06.740 --> 00:13:09.570
Or if I needed to get
directions to a certain place,

00:13:09.570 --> 00:13:12.830
I could pass in that place
ID system of our mapping

00:13:12.830 --> 00:13:13.720
or navigation APIs.

00:13:17.732 --> 00:13:19.440
And then coming back
to that illustration

00:13:19.440 --> 00:13:21.870
that we looked at with
Shoreline Amphitheater,

00:13:21.870 --> 00:13:23.880
with a single place
ID, I can access

00:13:23.880 --> 00:13:26.690
all these different levels
of this location stack

00:13:26.690 --> 00:13:29.320
from the latitude and
longitude to an address

00:13:29.320 --> 00:13:32.170
to the semantic qualifier
or other metadata

00:13:32.170 --> 00:13:35.450
about that place, so again,
the single key that helps us

00:13:35.450 --> 00:13:36.730
traverse that stack.

00:13:40.270 --> 00:13:43.500
So now let's look at a
couple of illustrations

00:13:43.500 --> 00:13:45.100
of how developers
in the real world

00:13:45.100 --> 00:13:49.130
are actually trying to meet some
of their place needs or mapping

00:13:49.130 --> 00:13:51.390
needs and then the
corresponding services they're

00:13:51.390 --> 00:13:54.590
using within our API to
actually accomplish those tasks.

00:13:58.630 --> 00:14:01.710
The first I want to
consider is real estate.

00:14:01.710 --> 00:14:04.640
And we're looking at some
lovely aerial beach photography

00:14:04.640 --> 00:14:05.690
right now.

00:14:05.690 --> 00:14:07.940
And since I am currently
living in Australia,

00:14:07.940 --> 00:14:12.220
let's assume that we have an
Australian real estate company.

00:14:12.220 --> 00:14:15.050
And our user is going to be
searching for a neighborhood

00:14:15.050 --> 00:14:16.440
that they're interested in.

00:14:16.440 --> 00:14:18.350
For the purposes of
this conversation,

00:14:18.350 --> 00:14:19.920
we'll say that our
user is looking

00:14:19.920 --> 00:14:22.350
for the neighborhood
called Manly,

00:14:22.350 --> 00:14:25.625
which is one of our popular
northern beaches near Sydney.

00:14:28.800 --> 00:14:31.330
Now, by using the
autocomplete service,

00:14:31.330 --> 00:14:36.300
a user can actually come in
and start typing typing M-a-n.

00:14:36.300 --> 00:14:38.470
And then the results
are dynamically

00:14:38.470 --> 00:14:40.040
updating as the user's typing.

00:14:40.040 --> 00:14:42.380
And then they can
actually select the result

00:14:42.380 --> 00:14:44.960
that's most relevant to them.

00:14:44.960 --> 00:14:47.720
So we're able to
see that here being

00:14:47.720 --> 00:14:50.650
selected with Manly Beach.

00:14:50.650 --> 00:14:53.140
Now, to take advantage
of autocomplete,

00:14:53.140 --> 00:14:55.320
you can certainly use
our APIs directly.

00:14:55.320 --> 00:14:58.550
Or we also have widgets
available on both iOS

00:14:58.550 --> 00:15:02.110
and Android where we take care
of some of the UI in addition

00:15:02.110 --> 00:15:04.329
to the API logic.

00:15:04.329 --> 00:15:05.870
So here's an example
of how you could

00:15:05.870 --> 00:15:09.172
put in our fragment with
this XML up at the top here.

00:15:09.172 --> 00:15:11.630
And then you can actually call
that in the Java code listed

00:15:11.630 --> 00:15:13.120
here at the bottom.

00:15:13.120 --> 00:15:15.260
So you can see the place
autocomplete fragment is

00:15:15.260 --> 00:15:18.850
the name of that fragment here.

00:15:22.860 --> 00:15:25.000
Now, after our user
has identified to us

00:15:25.000 --> 00:15:28.590
that they're interested
in searching within Manly,

00:15:28.590 --> 00:15:30.240
you probably have a
bunch of listings.

00:15:30.240 --> 00:15:32.310
Your real estate
website, you have

00:15:32.310 --> 00:15:33.850
a bunch of listings in Manly.

00:15:33.850 --> 00:15:36.590
And those listings are
basically addresses,

00:15:36.590 --> 00:15:38.680
so you have a list of addresses.

00:15:38.680 --> 00:15:43.010
Now, actually, to be able to
plot these addresses on a map,

00:15:43.010 --> 00:15:46.220
you need to be able to
tell the computer basically

00:15:46.220 --> 00:15:47.500
where to put them.

00:15:47.500 --> 00:15:51.330
And the best way to do this
is via our geocoding service.

00:15:51.330 --> 00:15:54.450
Now, geocoding is a way
of taking an address

00:15:54.450 --> 00:15:56.920
and interpreting that into
a latitude and longitude

00:15:56.920 --> 00:16:00.420
that a computer could
then plot on a map.

00:16:00.420 --> 00:16:03.440
So here's an example
of 93 West Esplanade,

00:16:03.440 --> 00:16:06.010
which is one of our
listings in Manly.

00:16:06.010 --> 00:16:08.670
I can take this and convert it
into the corresponding latitude

00:16:08.670 --> 00:16:11.300
and longitude, negative
33 degrees latitude,

00:16:11.300 --> 00:16:15.910
151 degrees longitude, and
actually plot that on a map.

00:16:15.910 --> 00:16:17.720
We, of course, have
the reverse as well

00:16:17.720 --> 00:16:19.810
if I'm trying to take a
latitude and longitude

00:16:19.810 --> 00:16:21.310
and turn that into an address.

00:16:21.310 --> 00:16:23.010
But that would meet
a different set

00:16:23.010 --> 00:16:26.447
of use cases, but worth
calling out nonetheless.

00:16:26.447 --> 00:16:27.780
So that's our geocoding service.

00:16:31.140 --> 00:16:34.190
Here is an illustration
of us making a request

00:16:34.190 --> 00:16:35.720
to our geocoding web service.

00:16:35.720 --> 00:16:37.460
And it's a Python example.

00:16:37.460 --> 00:16:40.440
Basically, you can see
that the formatted address

00:16:40.440 --> 00:16:43.910
results are being displayed
to our user in an array here.

00:16:49.120 --> 00:16:54.040
So stepping into our next
application, photo tagging.

00:16:54.040 --> 00:16:55.990
We know that photos
are a key part

00:16:55.990 --> 00:16:58.740
of us experiencing
the world and sharing

00:16:58.740 --> 00:17:00.646
our experiences with people.

00:17:00.646 --> 00:17:02.520
And one of the first
things that people often

00:17:02.520 --> 00:17:06.640
ask when they see an image is,
where was that photo taken?

00:17:06.640 --> 00:17:09.490
It's because having a place
associated with an image

00:17:09.490 --> 00:17:11.359
gives it that much more context.

00:17:11.359 --> 00:17:15.050
It helps you tell the
story about that photo.

00:17:15.050 --> 00:17:17.089
So one of the key
questions you're often

00:17:17.089 --> 00:17:20.440
asking when you're doing
photo tagging is, where am I

00:17:20.440 --> 00:17:23.140
or where's my user?

00:17:23.140 --> 00:17:28.200
To answer this question, you
can use our getCurrentPlace API.

00:17:28.200 --> 00:17:31.600
This service is
responding with a list

00:17:31.600 --> 00:17:34.520
of possible candidates
of where that user is

00:17:34.520 --> 00:17:37.390
and a corresponding likelihood
that the user is actually

00:17:37.390 --> 00:17:38.360
there.

00:17:38.360 --> 00:17:39.750
This is available on mobile.

00:17:39.750 --> 00:17:41.350
And I'll be talking
a little bit later

00:17:41.350 --> 00:17:45.270
in the conversation about how we
calculate that likelihood, what

00:17:45.270 --> 00:17:46.580
type of inputs go into that.

00:17:50.610 --> 00:17:53.200
Here's some Android code
about how you could actually

00:17:53.200 --> 00:17:54.530
use getCurrentPlace.

00:17:54.530 --> 00:17:56.990
And you can see if the
getCurrentPlace call, which

00:17:56.990 --> 00:18:00.590
is part of the place
detection API name space.

00:18:00.590 --> 00:18:04.200
And we have this callback,
which is an asynchronous call.

00:18:04.200 --> 00:18:07.980
And you can see we've got a
buffer that's being returned,

00:18:07.980 --> 00:18:09.700
which is the list of places.

00:18:09.700 --> 00:18:12.880
And we also have the
corresponding likelihood.

00:18:12.880 --> 00:18:16.390
And then, because we're
maintaining the place objects,

00:18:16.390 --> 00:18:22.852
you can do things like calling
getName, getLikelihood, getID.

00:18:22.852 --> 00:18:25.060
Because we're actually
maintaining that place object,

00:18:25.060 --> 00:18:27.520
we're able to provide you
with some helper methods

00:18:27.520 --> 00:18:29.690
to manipulate those easily.

00:18:29.690 --> 00:18:31.270
One thing to note
is that when it

00:18:31.270 --> 00:18:33.830
comes to places and
using places in your app,

00:18:33.830 --> 00:18:36.660
you as a developer only really
need to store and maintain

00:18:36.660 --> 00:18:38.820
the place ID overtime.

00:18:38.820 --> 00:18:40.520
Because as we talked
about earlier,

00:18:40.520 --> 00:18:44.900
Google is taking on the project
of actually keeping up-to-date

00:18:44.900 --> 00:18:46.450
all of the places in the world.

00:18:46.450 --> 00:18:49.000
So we know that these places
are living and breathing.

00:18:49.000 --> 00:18:50.750
So we want you as
a developer only

00:18:50.750 --> 00:18:53.434
need to keep track of the place
that you're interested in.

00:18:53.434 --> 00:18:55.100
And then you continue
to ask us for what

00:18:55.100 --> 00:18:57.640
is the most up-to-date
information using that place

00:18:57.640 --> 00:18:58.730
ID which we talked about.

00:19:01.430 --> 00:19:03.490
We also have a widget
available that's

00:19:03.490 --> 00:19:06.240
called the PlacePicker which
fundamentally sits on top

00:19:06.240 --> 00:19:07.900
of this getCurrentPlace API.

00:19:07.900 --> 00:19:12.669
And you can see how we show
users the different places that

00:19:12.669 --> 00:19:13.460
are being returned.

00:19:13.460 --> 00:19:15.418
And then you put the
power into the user's hand

00:19:15.418 --> 00:19:17.630
to actually select which
place they're actually at.

00:19:17.630 --> 00:19:19.870
So instead of just
assuming where they're at,

00:19:19.870 --> 00:19:22.270
if you want the user to
identify which place they're at,

00:19:22.270 --> 00:19:26.170
you can do that via PlacePicker.

00:19:26.170 --> 00:19:28.470
Here's an illustration
of how you can actually

00:19:28.470 --> 00:19:30.090
call that on Android.

00:19:30.090 --> 00:19:32.655
And then we have the same
thing available on iOS.

00:19:35.980 --> 00:19:38.230
The third application that
we're going to be exploring

00:19:38.230 --> 00:19:39.990
is travel and hospitality.

00:19:39.990 --> 00:19:41.870
And naturally, the
types of questions

00:19:41.870 --> 00:19:43.536
that you're trying
to answer when you're

00:19:43.536 --> 00:19:46.920
building a travel or hospitality
experience are very different.

00:19:46.920 --> 00:19:50.880
And many of these have to do
with discovering places, trying

00:19:50.880 --> 00:19:52.900
to understand what's
surrounding me,

00:19:52.900 --> 00:19:54.110
what's going on around here.

00:19:57.900 --> 00:20:02.050
And to answer this, you
often want to issue a search.

00:20:02.050 --> 00:20:05.070
You want to ask us, what's
happening around here?

00:20:05.070 --> 00:20:07.040
Now, the search
service is interesting

00:20:07.040 --> 00:20:09.330
because the actual set of
results that you would get

00:20:09.330 --> 00:20:11.230
varies wildly depending
on what your use

00:20:11.230 --> 00:20:13.840
case is, what your inputs are.

00:20:13.840 --> 00:20:16.162
Some of the inputs that
can vary can be a string.

00:20:16.162 --> 00:20:18.120
What is the actual string
that you're inputting

00:20:18.120 --> 00:20:20.790
and how similar is that
to some of the results

00:20:20.790 --> 00:20:22.730
that we are returning?

00:20:22.730 --> 00:20:23.720
What about proximity?

00:20:23.720 --> 00:20:26.110
Are you looking for things
that are close to you?

00:20:26.110 --> 00:20:29.620
Or are you looking for
prominence, big, popular cafes

00:20:29.620 --> 00:20:31.340
and restaurants around you?

00:20:31.340 --> 00:20:33.220
You can also input
different biases

00:20:33.220 --> 00:20:36.960
so that we can actually respond
differently or filter down

00:20:36.960 --> 00:20:40.497
the actual set of results
that we could be returning.

00:20:40.497 --> 00:20:43.080
So I want to illustrate a couple
of different samples of using

00:20:43.080 --> 00:20:45.750
the search service and
how that could impact

00:20:45.750 --> 00:20:49.000
the results that you would get.

00:20:49.000 --> 00:20:51.020
In the first
illustration, if I were

00:20:51.020 --> 00:20:54.830
to look for the string Sydney
Opera, that's pretty distinct.

00:20:54.830 --> 00:20:58.200
And I'm most likely trying to
get to the Sydney Opera House.

00:20:58.200 --> 00:21:01.450
So I would only responded with
one other item, which would

00:21:01.450 --> 00:21:02.659
be the Sydney Opera House.

00:21:02.659 --> 00:21:03.700
It's pretty navigational.

00:21:03.700 --> 00:21:06.840
I know exactly what
I'm looking for.

00:21:06.840 --> 00:21:09.800
However, if I searched
for a bookstore

00:21:09.800 --> 00:21:11.930
in Sydney, which
is more categorical

00:21:11.930 --> 00:21:14.347
and I'm expecting
a list of results,

00:21:14.347 --> 00:21:15.930
then I could get
that list of results.

00:21:15.930 --> 00:21:19.530
Here's an illustration of
what that could look like.

00:21:19.530 --> 00:21:22.290
And because it's
an API, we would

00:21:22.290 --> 00:21:23.940
be returning it as a list.

00:21:23.940 --> 00:21:27.190
And a key part is
understanding how it's sorted.

00:21:27.190 --> 00:21:29.460
How are we actually returning
that information to you?

00:21:29.460 --> 00:21:31.580
And you can tell us,
are you more interested

00:21:31.580 --> 00:21:33.840
in sorting by
distance and really

00:21:33.840 --> 00:21:35.920
having proximity be the focus?

00:21:35.920 --> 00:21:37.670
For example, if I'm
looking for bookstores

00:21:37.670 --> 00:21:39.734
but I really just want
to get a postcard,

00:21:39.734 --> 00:21:41.400
I don't really care
about the bookstore,

00:21:41.400 --> 00:21:43.480
I just need to get a
letter to send a friend,

00:21:43.480 --> 00:21:46.324
then sorting by proximity
makes a lot of sense.

00:21:46.324 --> 00:21:48.240
However, if I'm trying
to get an understanding

00:21:48.240 --> 00:21:50.280
of the literary
culture in Sydney,

00:21:50.280 --> 00:21:52.920
then I might want to sort
instead by prominence because I

00:21:52.920 --> 00:21:56.890
want to understand what the most
prominent bookstores in Sydney

00:21:56.890 --> 00:21:59.610
are and prioritize those.

00:21:59.610 --> 00:22:02.300
And then as we highlighted
earlier, like a SQL query,

00:22:02.300 --> 00:22:04.760
I can actually limit
down my results

00:22:04.760 --> 00:22:07.170
by imposing some type
of bias or restriction,

00:22:07.170 --> 00:22:10.380
like I only want to see
bookstores that have

00:22:10.380 --> 00:22:11.740
a certain star rating or above.

00:22:15.960 --> 00:22:19.490
Now, once you've issued a
search using our search service,

00:22:19.490 --> 00:22:23.260
you could get a single place
back or a list of places.

00:22:23.260 --> 00:22:24.679
So you have a bunch of IDs.

00:22:24.679 --> 00:22:27.220
And then the next question is,
tell me more about this place.

00:22:27.220 --> 00:22:29.070
What is at this place?

00:22:29.070 --> 00:22:32.490
And in order to do that, you
could use our Place Detail

00:22:32.490 --> 00:22:33.550
service.

00:22:33.550 --> 00:22:36.480
Place Detail service allows
you to basically access

00:22:36.480 --> 00:22:38.770
all of the metadata
about a place,

00:22:38.770 --> 00:22:41.880
so not just the
basics like an address

00:22:41.880 --> 00:22:44.880
or the coordinates, the
latitude and longitude.

00:22:44.880 --> 00:22:48.960
But, of course, you can get the
name or the type of a place.

00:22:48.960 --> 00:22:51.590
So imagine you're building
a location-based game

00:22:51.590 --> 00:22:54.267
and you need to understand
where the bodies of water

00:22:54.267 --> 00:22:56.600
are because you want to keep
your users away from bodies

00:22:56.600 --> 00:22:59.810
of water and understand where
the parks are because you want

00:22:59.810 --> 00:23:02.110
to be driving your
users towards parks.

00:23:02.110 --> 00:23:04.300
So understanding types
is really key to actually

00:23:04.300 --> 00:23:06.970
being able to shape
your experience.

00:23:06.970 --> 00:23:09.870
You can also understand other
characteristics of a place,

00:23:09.870 --> 00:23:12.860
see what the star rating is or
how many reviews a place gets.

00:23:16.680 --> 00:23:19.750
To use that, you can
call getPlaceByID.

00:23:19.750 --> 00:23:21.450
So again, you would
be passing us the ID

00:23:21.450 --> 00:23:24.360
and we would be responding
with all of the metadata.

00:23:24.360 --> 00:23:28.230
And we have those helper
methods to actually allow

00:23:28.230 --> 00:23:30.360
you to do things like getName.

00:23:30.360 --> 00:23:32.890
So you can see how we're
first validating here

00:23:32.890 --> 00:23:35.917
that we are, in fact, getting
a valid place object back.

00:23:35.917 --> 00:23:38.125
And then you can access some
of those helper methods.

00:23:42.470 --> 00:23:44.660
So the final part
of our journey is

00:23:44.660 --> 00:23:47.410
going to be exploring how
this best manifests itself

00:23:47.410 --> 00:23:50.700
within our mobile SDKs.

00:23:50.700 --> 00:23:53.000
So certainly places
are available

00:23:53.000 --> 00:23:56.350
across several different
platforms including JavaScript

00:23:56.350 --> 00:23:58.810
or you could just hit
our web service directly.

00:23:58.810 --> 00:24:02.160
But I think places best
are taken advantage

00:24:02.160 --> 00:24:06.485
of on the mobile platform,
so within our iOS and Android

00:24:06.485 --> 00:24:06.985
SDKs.

00:24:09.540 --> 00:24:11.820
And there's three reasons
I want to highlight

00:24:11.820 --> 00:24:15.670
about why I think they
are best taken advantage

00:24:15.670 --> 00:24:17.310
of in this world.

00:24:17.310 --> 00:24:19.550
The first is that we
are able to serve you

00:24:19.550 --> 00:24:22.150
more accurate results,
the second being it's

00:24:22.150 --> 00:24:23.770
much easier to use.

00:24:23.770 --> 00:24:27.090
And then third, they've been
optimized for performance.

00:24:29.610 --> 00:24:32.492
So starting with more
accurate results, for this,

00:24:32.492 --> 00:24:34.700
I want to focus on the
getCurrentPlace service, which

00:24:34.700 --> 00:24:36.570
we talked about earlier.

00:24:36.570 --> 00:24:38.820
And we had talked
about photo tagging.

00:24:38.820 --> 00:24:40.420
So here's an image of food.

00:24:40.420 --> 00:24:42.400
And let's say I want
to be able to associate

00:24:42.400 --> 00:24:45.070
a place with this food.

00:24:45.070 --> 00:24:48.460
Now, many photos come with
the latitude and longitude

00:24:48.460 --> 00:24:50.180
associated with them.

00:24:50.180 --> 00:24:53.220
And while this is helpful,
it can be problematic,

00:24:53.220 --> 00:24:54.400
I think, in two ways.

00:24:54.400 --> 00:24:56.910
One, I would never
post a photo that said,

00:24:56.910 --> 00:25:00.910
check out this food that I ate
at insert coordinates here.

00:25:00.910 --> 00:25:03.580
That doesn't really tell me
anything about that food.

00:25:03.580 --> 00:25:06.660
Secondly, because I was indoors,
the latitude and longitude

00:25:06.660 --> 00:25:09.750
might actually not be the
most accurate representation

00:25:09.750 --> 00:25:11.400
of where I was.

00:25:11.400 --> 00:25:13.580
So it's being displayed here.

00:25:13.580 --> 00:25:15.910
But that might not
actually be exactly where

00:25:15.910 --> 00:25:18.840
I was at that moment.

00:25:18.840 --> 00:25:21.480
Now, if I were to use geocoding,
and this would actually

00:25:21.480 --> 00:25:23.860
be an application of reverse
geocoding, which we talked

00:25:23.860 --> 00:25:25.550
about earlier, I
could input those

00:25:25.550 --> 00:25:27.640
coordinates into
reverse geocoding

00:25:27.640 --> 00:25:29.360
and I can get an address back.

00:25:29.360 --> 00:25:31.720
Now, while certainly I could
better understand and see

00:25:31.720 --> 00:25:34.222
that, OK, this is this
places on Castro Street,

00:25:34.222 --> 00:25:35.930
it still doesn't give
me an understanding

00:25:35.930 --> 00:25:37.780
of where the food was eaten.

00:25:37.780 --> 00:25:41.920
And again, if the inputs of
those latitudes and longitudes

00:25:41.920 --> 00:25:45.070
were not accurate to begin with,
then the output of the address

00:25:45.070 --> 00:25:48.710
is also not going
to be accurate.

00:25:48.710 --> 00:25:50.500
However, with
getCurrentPlace, which

00:25:50.500 --> 00:25:53.290
is only available on
mobile, you can actually

00:25:53.290 --> 00:25:56.590
understand that we're at the
Morocco's restaurant, which

00:25:56.590 --> 00:25:58.670
is across the street,
across Fairmont

00:25:58.670 --> 00:26:01.430
avenue, from the latitude and
longitude that we initially

00:26:01.430 --> 00:26:02.440
plotted.

00:26:02.440 --> 00:26:05.430
And we're able to
understand and infer this

00:26:05.430 --> 00:26:07.170
from a variety of
inputs, which I'll

00:26:07.170 --> 00:26:08.790
talk you through in a minute.

00:26:08.790 --> 00:26:11.000
But this is incredibly
powerful because we're

00:26:11.000 --> 00:26:14.800
able to understand more
about some of the inputs that

00:26:14.800 --> 00:26:16.910
are there than just
relying exclusively

00:26:16.910 --> 00:26:20.860
on the latitude and longitude.

00:26:20.860 --> 00:26:23.480
So like with many other
products at Google,

00:26:23.480 --> 00:26:26.190
we're able to incorporate
machine learning into actually

00:26:26.190 --> 00:26:28.120
understanding how
users are navigating

00:26:28.120 --> 00:26:30.550
between these hundreds
of millions of places

00:26:30.550 --> 00:26:32.940
that we have access
to within Google.

00:26:35.480 --> 00:26:37.670
And so some of those
inputs that actually

00:26:37.670 --> 00:26:41.310
are helping us understand are
things like opening hours.

00:26:41.310 --> 00:26:44.730
So if I post this photo
in the evening at 8:00 PM

00:26:44.730 --> 00:26:48.650
and there was a sports gear
store across the street

00:26:48.650 --> 00:26:51.240
but that's sports gear
store closed at 5:00 PM,

00:26:51.240 --> 00:26:53.640
it is unlikely that I'm
going to be at that place.

00:26:53.640 --> 00:26:55.760
So I'm able to
de-prioritize the fact

00:26:55.760 --> 00:26:57.950
that I would be at
that sports gear store

00:26:57.950 --> 00:27:00.110
even though from a
geographic point of view,

00:27:00.110 --> 00:27:03.610
my point, my latitude and
longitude might look like it's

00:27:03.610 --> 00:27:04.620
actually closer there.

00:27:07.190 --> 00:27:09.240
I'm also able to
take in consideration

00:27:09.240 --> 00:27:10.970
things like popularity.

00:27:10.970 --> 00:27:13.746
By definition, things that
have more foot traffic,

00:27:13.746 --> 00:27:15.620
you're more likely to
be there because people

00:27:15.620 --> 00:27:16.870
tend to spend more time there.

00:27:20.130 --> 00:27:21.580
The same goes for geometry.

00:27:21.580 --> 00:27:24.500
A place is not
specifically just a point.

00:27:24.500 --> 00:27:26.510
It has a physical
representation.

00:27:26.510 --> 00:27:29.390
So I'm able to understand by
using things like our satellite

00:27:29.390 --> 00:27:32.730
imagery, which we talked about
earlier, how much space a place

00:27:32.730 --> 00:27:35.805
actually takes up and what's
my relationship to that space.

00:27:38.610 --> 00:27:40.310
And then we're able
to take advantage

00:27:40.310 --> 00:27:41.768
of a lot of the
mobile signals that

00:27:41.768 --> 00:27:44.780
are only available mobile
platforms like Bluetooth scans

00:27:44.780 --> 00:27:45.870
or Wi-Fi scans.

00:27:45.870 --> 00:27:48.845
So we're able to actually
understand and triangulate

00:27:48.845 --> 00:27:51.220
from these representations of
all these different inputs.

00:27:54.340 --> 00:27:56.020
And so based on
all those inputs,

00:27:56.020 --> 00:27:58.810
and again, because
Google can understand

00:27:58.810 --> 00:28:02.582
how users are navigating over
hundreds of millions of places

00:28:02.582 --> 00:28:04.540
and actually applying
machine learning to that,

00:28:04.540 --> 00:28:06.950
we can make a much more
educated recommendation

00:28:06.950 --> 00:28:10.190
about where the user is, which
was a Moroccan restaurant

00:28:10.190 --> 00:28:10.940
across the street.

00:28:14.270 --> 00:28:18.860
So secondly, our mobile
libraries are easier to use.

00:28:18.860 --> 00:28:21.310
And this is for a
couple of reasons.

00:28:21.310 --> 00:28:23.390
First, as I talked
about earlier,

00:28:23.390 --> 00:28:26.400
we maintain the place object
and we create these helper

00:28:26.400 --> 00:28:29.540
methods that makes it easy for
you to get different metadata

00:28:29.540 --> 00:28:30.770
about that place.

00:28:30.770 --> 00:28:34.600
So whether it's getName
or getReviews or getURL,

00:28:34.600 --> 00:28:38.350
you're able to actually easily
access that information,

00:28:38.350 --> 00:28:41.230
the place object,
without actually having

00:28:41.230 --> 00:28:44.840
to parse the JSON yourself.

00:28:44.840 --> 00:28:47.460
And then the second reason
is, of course, these widgets

00:28:47.460 --> 00:28:49.000
that I've talked about earlier.

00:28:49.000 --> 00:28:51.970
So not only are you able to
take advantage of the logic

00:28:51.970 --> 00:28:55.440
that some of these services
like autocomplete or PlacePicker

00:28:55.440 --> 00:28:58.740
provide, but we're also
giving you the UI elements.

00:28:58.740 --> 00:29:01.890
And these are controls that
are very common in many apps.

00:29:01.890 --> 00:29:06.090
So why reinvent the wheel with
your precious developer cycles

00:29:06.090 --> 00:29:08.090
when you could instead
be using that time

00:29:08.090 --> 00:29:11.460
to actually work on the things
that matter to your business?

00:29:11.460 --> 00:29:14.550
So you can leave these
sorts of UI elements to us.

00:29:14.550 --> 00:29:17.249
Just plug it into your app
and then focus on the things

00:29:17.249 --> 00:29:18.040
that matter to you.

00:29:22.260 --> 00:29:25.367
And then finally, we've
prioritized performance

00:29:25.367 --> 00:29:27.700
so our mobile libraries are
intelligent with how they're

00:29:27.700 --> 00:29:31.730
actually making network calls.

00:29:31.730 --> 00:29:35.600
We know that data is
precious, and especially

00:29:35.600 --> 00:29:37.880
when you consider
developing worlds.

00:29:37.880 --> 00:29:39.930
So we need to be
respectful of our users

00:29:39.930 --> 00:29:42.685
and when we're actually
making calls to our backends.

00:29:45.489 --> 00:29:47.030
And we also know
that there are often

00:29:47.030 --> 00:29:50.980
familiar places that users
are frequenting over and over.

00:29:50.980 --> 00:29:53.400
So we're actually able
to do smart things

00:29:53.400 --> 00:29:55.660
like more on-device caching.

00:29:55.660 --> 00:29:58.330
So we're actually remembering
if, for example, there's

00:29:58.330 --> 00:30:00.910
information about a place
already available locally

00:30:00.910 --> 00:30:03.390
on the device, then we
can just utilize that

00:30:03.390 --> 00:30:06.210
rather than making unnecessary
costs to our backend

00:30:06.210 --> 00:30:08.720
to fetch new, fresh data.

00:30:08.720 --> 00:30:11.020
So we know that users
are fundamentally

00:30:11.020 --> 00:30:12.570
creatures of habit.

00:30:12.570 --> 00:30:15.410
And so they're going to the
same places over and over again.

00:30:15.410 --> 00:30:17.780
So we can reduce
up to 90% of hits

00:30:17.780 --> 00:30:19.850
that would be unnecessary
to our backend

00:30:19.850 --> 00:30:22.277
because that information is
already available locally

00:30:22.277 --> 00:30:22.860
on the device.

00:30:26.620 --> 00:30:31.100
So today we traversed a journey
and we covered three parts.

00:30:31.100 --> 00:30:33.010
We first looked at
our location stack

00:30:33.010 --> 00:30:37.540
and fundamentally what
makes a place a place.

00:30:37.540 --> 00:30:40.220
Second, we explored some
real-world use cases

00:30:40.220 --> 00:30:41.750
and then the
corresponding services

00:30:41.750 --> 00:30:43.900
that you can use
within the Places API

00:30:43.900 --> 00:30:47.100
to take advantage of those.

00:30:47.100 --> 00:30:50.430
And then finally, we
looked at our mobile SDKs

00:30:50.430 --> 00:30:53.600
and how this best comes to life
on all the little computers

00:30:53.600 --> 00:30:55.360
in our pockets.

00:30:55.360 --> 00:30:58.300
So we're excited to see
where you developers take

00:30:58.300 --> 00:31:04.010
your journey to create a sense
of place in your own apps.

00:31:04.010 --> 00:31:05.900
A couple other callouts.

00:31:05.900 --> 00:31:07.659
For those who are
watching on live stream

00:31:07.659 --> 00:31:09.200
and for those in
the audience, if you

00:31:09.200 --> 00:31:11.810
want to follow up on some
of the services and APIs

00:31:11.810 --> 00:31:14.720
that we covered today, you can
check out our documentation

00:31:14.720 --> 00:31:15.780
on places.

00:31:15.780 --> 00:31:17.715
We also have more
documentation around some

00:31:17.715 --> 00:31:18.715
of our mapping products.

00:31:22.350 --> 00:31:24.510
And then yesterday
my colleague, Joel,

00:31:24.510 --> 00:31:29.860
talked about making the world
your own via Google Maps APIs.

00:31:29.860 --> 00:31:32.320
So if you didn't get a chance
to check out that session,

00:31:32.320 --> 00:31:35.730
I encourage you to look
up that title on YouTube

00:31:35.730 --> 00:31:37.530
and you can re-watch
the session.

00:31:37.530 --> 00:31:40.407
We just talked about a sense
of place in your apps today.

00:31:40.407 --> 00:31:42.240
And then immediately
following this session,

00:31:42.240 --> 00:31:44.660
my colleague, Ankur, is
going to be walking us

00:31:44.660 --> 00:31:47.440
through some new solutions
that we've built on top

00:31:47.440 --> 00:31:49.130
of some of our Maps APIs.

00:31:49.130 --> 00:31:51.050
So I encourage you
to stick around.

00:31:51.050 --> 00:31:53.790
Or if you're on the live
stream, keep watching.

00:31:53.790 --> 00:31:58.190
If you're unable to do that,
check us out on YouTube later.

00:31:58.190 --> 00:32:01.370
So thank you for
having me today.

00:32:01.370 --> 00:32:03.170
[APPLAUSE]

00:32:05.870 --> 00:32:09.820
[MUSIC PLAYING]

