WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
[MUSIC PLAYING]

00:00:06.320 --> 00:00:09.040
TERRENCE RYAN: All right,
how you guys all doing?

00:00:09.040 --> 00:00:09.540
Good?

00:00:09.540 --> 00:00:11.280
All right, still a
little energy left.

00:00:11.280 --> 00:00:12.304
Great, great, great.

00:00:12.304 --> 00:00:14.220
So this is going to be
Navigating Google Cloud

00:00:14.220 --> 00:00:15.660
Platform.

00:00:15.660 --> 00:00:16.900
It's meant to be an overview.

00:00:16.900 --> 00:00:19.800
If you are not familiar
with Google Cloud Platform,

00:00:19.800 --> 00:00:21.880
well, you're in the right spot.

00:00:21.880 --> 00:00:25.140
So to that end, I kind of
want to get started, and ask

00:00:25.140 --> 00:00:28.040
you guys who you all are.

00:00:28.040 --> 00:00:30.930
So obviously, you're all
I/O attendees, that's great.

00:00:30.930 --> 00:00:35.770
But who here spends most
of their time developing?

00:00:35.770 --> 00:00:38.500
If you do that, are you mostly
front end developers, or client

00:00:38.500 --> 00:00:40.570
side, like Android developers?

00:00:40.570 --> 00:00:42.860
Or backend developers?

00:00:42.860 --> 00:00:44.570
OK, good mix.

00:00:44.570 --> 00:00:47.710
How many people
are systems people?

00:00:47.710 --> 00:00:49.652
How many do both?

00:00:49.652 --> 00:00:51.610
Because you love DevOps
or because your company

00:00:51.610 --> 00:00:52.860
won't hire more people?

00:00:52.860 --> 00:00:54.790
Which is it?

00:00:54.790 --> 00:00:57.040
How many people here
tell developers or system

00:00:57.040 --> 00:01:01.300
people what to do, managers?

00:01:01.300 --> 00:01:03.550
We're just at the cutoff for
where manager jokes still

00:01:03.550 --> 00:01:05.799
fly, because there's more
of us than there are of you.

00:01:05.799 --> 00:01:06.310
Good.

00:01:06.310 --> 00:01:09.760
OK, so that gives me a good
idea of who you guys are

00:01:09.760 --> 00:01:12.430
and what I can talk about.

00:01:12.430 --> 00:01:16.330
My goal here is to
help you guys identify

00:01:16.330 --> 00:01:18.730
the pieces of Google
Cloud Platform that

00:01:18.730 --> 00:01:20.980
makes sense for you.

00:01:20.980 --> 00:01:24.160
And this is sometimes
difficult, because if you look--

00:01:24.160 --> 00:01:26.772
like this is when we show
off Google Cloud Platform,

00:01:26.772 --> 00:01:28.730
it ends up showing up
like something like this.

00:01:28.730 --> 00:01:31.060
And I sort of understand it.

00:01:31.060 --> 00:01:34.030
We actually have drills where
we test if you can identify

00:01:34.030 --> 00:01:36.070
each thing by the logo.

00:01:36.070 --> 00:01:37.810
But I think for
someone coming to it,

00:01:37.810 --> 00:01:40.630
it's hard to know what
are all these things.

00:01:40.630 --> 00:01:44.830
My job is to tell you, from
a technical perspective, what

00:01:44.830 --> 00:01:46.985
all of this stuff does.

00:01:46.985 --> 00:01:48.860
And that's where I'm
going to be coming from.

00:01:48.860 --> 00:01:51.950
I'm not going to be giving
you a competitive analysis.

00:01:51.950 --> 00:01:54.220
I'm not going to be talking
too much marketing stuff.

00:01:54.220 --> 00:01:55.720
I'm not going to
talk about pricing.

00:01:55.720 --> 00:01:57.511
I just want to tell
you what this stuff is.

00:01:57.511 --> 00:02:00.070
I'll show you a couple of
demos and examples of it.

00:02:00.070 --> 00:02:03.400
And hopefully, that will
whet your appetite for it.

00:02:03.400 --> 00:02:04.900
Yes, because when
you see that list,

00:02:04.900 --> 00:02:07.895
you sometimes feel like this.

00:02:07.895 --> 00:02:09.520
So here's what I'm
going to talk about.

00:02:09.520 --> 00:02:11.170
I'm going to talk about
computing, networking, storage,

00:02:11.170 --> 00:02:13.840
big data, administration,
development, and machine

00:02:13.840 --> 00:02:14.830
learning.

00:02:14.830 --> 00:02:17.890
I'm going to spend extra
time talking about computing

00:02:17.890 --> 00:02:22.870
and storage, because those
are places where you have

00:02:22.870 --> 00:02:26.500
to spend a little bit
more time figuring out

00:02:26.500 --> 00:02:28.240
what the right thing is.

00:02:28.240 --> 00:02:30.830
If you want a firewall, we
have a thing called a firewall.

00:02:30.830 --> 00:02:33.850
It's pretty straightforward,
from a networking perspective.

00:02:33.850 --> 00:02:36.310
But which computing
platform you want to use

00:02:36.310 --> 00:02:38.450
is a little bit more
complicated story.

00:02:38.450 --> 00:02:42.610
So with that, I am going
to go right into computing,

00:02:42.610 --> 00:02:44.350
or doing things.

00:02:44.350 --> 00:02:46.670
So when people talk about
doing things on Google Cloud

00:02:46.670 --> 00:02:49.780
Platform, or in
computing in general,

00:02:49.780 --> 00:02:52.780
tend to approach it from
one of three directions.

00:02:52.780 --> 00:02:56.769
Virtual machines, so taking
what you have somewhere else

00:02:56.769 --> 00:02:59.060
and just lifting it over and
dropping onto Google Cloud

00:02:59.060 --> 00:03:03.317
Platform; containers,
which sort of everybody's

00:03:03.317 --> 00:03:04.400
moving over to containers.

00:03:04.400 --> 00:03:06.860
This a big part of the zeitgeist
in the industry right now.

00:03:06.860 --> 00:03:10.060
So how do you run stuff on
containers on Google Cloud

00:03:10.060 --> 00:03:10.870
Platform.

00:03:10.870 --> 00:03:13.810
And serverless--
serverless is one of those

00:03:13.810 --> 00:03:18.410
like "marketing terms."

00:03:18.410 --> 00:03:21.410
What it really means is, you
don't worry about the hardware.

00:03:21.410 --> 00:03:24.950
You usually get some sort of
metered version of the service,

00:03:24.950 --> 00:03:27.320
where you pay for what you
use, and if you don't use it,

00:03:27.320 --> 00:03:28.587
you don't pay for it.

00:03:28.587 --> 00:03:30.170
If you guys are
familiar with the term

00:03:30.170 --> 00:03:32.990
platform as a service,
what I think happened was,

00:03:32.990 --> 00:03:34.850
platform as a service
hit the Gartner trail

00:03:34.850 --> 00:03:38.367
of disillusionment, and
people got afraid of it.

00:03:38.367 --> 00:03:40.700
So we all started calling it
serverless in the industry.

00:03:40.700 --> 00:03:44.420
Don't tell anybody, you now
know that's our dirty secret.

00:03:44.420 --> 00:03:46.060
But that's serverless.

00:03:46.060 --> 00:03:47.720
So I'm going to
start with our VMs.

00:03:47.720 --> 00:03:49.745
Our VMs are-- they're VMS.

00:03:49.745 --> 00:03:51.120
I mean, they're
virtual machines.

00:03:51.120 --> 00:03:52.310
They're what you're used
to if you're dealing

00:03:52.310 --> 00:03:53.480
with other virtual machines.

00:03:53.480 --> 00:03:55.340
I think they're
great, and I'll show

00:03:55.340 --> 00:03:58.280
an example of why I think
they're great in a second.

00:03:58.280 --> 00:04:01.400
But their capacity
is pretty great,

00:04:01.400 --> 00:04:07.220
from 1 to 64 processors, half
a gig of RAM all the way up

00:04:07.220 --> 00:04:09.320
to 416 gigs of RAM.

00:04:09.320 --> 00:04:12.680
We have various limits
for your persistent disk,

00:04:12.680 --> 00:04:14.360
whether it's 65
terabytes for just plain

00:04:14.360 --> 00:04:20.300
persistent, 3 terabytes for
SSD, 200 gigs of RAM disk

00:04:20.300 --> 00:04:22.890
you can also do.

00:04:22.890 --> 00:04:25.670
We can also include GPUs in that
now, which is really awesome.

00:04:25.670 --> 00:04:27.882
Nice addition to the list.

00:04:27.882 --> 00:04:29.840
We have pre-configured
images so that if you're

00:04:29.840 --> 00:04:33.270
running whatever flavor
of Linux you want to run,

00:04:33.270 --> 00:04:36.150
we can pretty much already
give you an image for it.

00:04:36.150 --> 00:04:39.230
We also have Windows images.

00:04:39.230 --> 00:04:43.527
If one of the things we have
is not the right fit for you,

00:04:43.527 --> 00:04:45.860
you can take one of our images
and customize it, save it

00:04:45.860 --> 00:04:49.977
as an image, and use it
in creating your VMs,

00:04:49.977 --> 00:04:51.060
so you can build your own.

00:04:51.060 --> 00:04:53.720
You can also build your own
from scratch and upload them.

00:04:53.720 --> 00:04:56.492
And we like to say they
spin up in tens of seconds.

00:04:56.492 --> 00:04:58.700
And what that means is when
you're in your hotel room

00:04:58.700 --> 00:05:01.310
practicing before
speaking at I/O,

00:05:01.310 --> 00:05:03.370
to both you guys
here and the audience

00:05:03.370 --> 00:05:05.420
on the livestream,
when you're practicing,

00:05:05.420 --> 00:05:08.130
it takes like 20 seconds.

00:05:08.130 --> 00:05:10.520
When you're in front of people,
it takes like 80 to 100,

00:05:10.520 --> 00:05:12.889
and I don't know how
it knows, but it knows.

00:05:12.889 --> 00:05:14.930
So we're going to see how
fast it spins up today,

00:05:14.930 --> 00:05:17.310
because I'm going to do a demo.

00:05:17.310 --> 00:05:19.730
Actually, I'm going to
do a demo in a second,

00:05:19.730 --> 00:05:21.813
because I want to talk
about one more thing, which

00:05:21.813 --> 00:05:23.840
is Cloud Launcher.

00:05:23.840 --> 00:05:28.070
You may want images already
built. Software packages--

00:05:28.070 --> 00:05:32.450
let's say you want Redis, or
you want a Barracuda firewall

00:05:32.450 --> 00:05:34.460
setup--

00:05:34.460 --> 00:05:37.880
we have pre-built images
of a whole list of services

00:05:37.880 --> 00:05:39.850
that you might want.

00:05:39.850 --> 00:05:41.660
You go to Cloud Launcher,
you spin them up,

00:05:41.660 --> 00:05:45.280
and you will take over
management of them.

00:05:45.280 --> 00:05:46.919
They're not managed
services, but they

00:05:46.919 --> 00:05:48.710
can help speed you
along the way of getting

00:05:48.710 --> 00:05:50.550
your machine up and running.

00:05:50.550 --> 00:05:54.820
So now I'm going to
switch over to a demo.

00:05:54.820 --> 00:05:57.970
And here we are, great.

00:05:57.970 --> 00:06:02.090
And I accidentally
locked my machine,

00:06:02.090 --> 00:06:04.160
because security first.

00:06:04.160 --> 00:06:06.882
So this is our VM console,
and there's a couple

00:06:06.882 --> 00:06:08.090
of things I want to show off.

00:06:08.090 --> 00:06:11.420
But first I'm going to start
and create an instance.

00:06:11.420 --> 00:06:12.440
So here's an instance.

00:06:12.440 --> 00:06:15.200
I can pick any
pre-configured image,

00:06:15.200 --> 00:06:17.720
but what's really kind of cool
is I can go through and say,

00:06:17.720 --> 00:06:19.219
you know what, I
want a crazy image.

00:06:19.219 --> 00:06:24.140
I want 14 CPUs, because I have a
very specific workload in mind,

00:06:24.140 --> 00:06:25.070
I guess.

00:06:25.070 --> 00:06:26.919
I can go through, I
can pick an image,

00:06:26.919 --> 00:06:28.960
but I'm just going to go
through and create this.

00:06:28.960 --> 00:06:30.800
And in a moment, that's going
to spin up and be available.

00:06:30.800 --> 00:06:32.258
But what I can show
you while we're

00:06:32.258 --> 00:06:35.710
waiting for that is that one of
the great things about our VMs

00:06:35.710 --> 00:06:39.500
is if I hit this SSH
button, I will SSH into it

00:06:39.500 --> 00:06:40.376
through the browser.

00:06:40.376 --> 00:06:41.750
So no having to
download security

00:06:41.750 --> 00:06:44.420
certs and setting up my local
environment to hook up to it.

00:06:44.420 --> 00:06:46.070
Just wherever I
have a browser, I

00:06:46.070 --> 00:06:49.220
can hook up via SSH to my box.

00:06:49.220 --> 00:06:51.440
Now, under the covers
here, while this

00:06:51.440 --> 00:06:54.470
was blocking the
screen, our instance

00:06:54.470 --> 00:06:57.140
is already up and ready.

00:06:57.140 --> 00:06:59.510
So while we're waiting
for the SSH to connect--

00:06:59.510 --> 00:07:01.040
there we go, there's
command line--

00:07:01.040 --> 00:07:02.990
there's one other thing
I want to show you--

00:07:02.990 --> 00:07:04.700
I'm just going to
leave SSH there--

00:07:04.700 --> 00:07:09.059
and that is we
look at your usage.

00:07:09.059 --> 00:07:10.850
There's not a person
looking at your usage,

00:07:10.850 --> 00:07:13.050
but like the system
looks at your usage.

00:07:13.050 --> 00:07:15.920
And we'll tell you, hey,
you've had really high memory

00:07:15.920 --> 00:07:17.450
utilization on this box.

00:07:17.450 --> 00:07:19.190
Maybe you should up it.

00:07:19.190 --> 00:07:21.187
And you can just apply
the recommendation.

00:07:21.187 --> 00:07:22.520
But it also works the other way.

00:07:22.520 --> 00:07:26.870
I could save $334 a month if
I take this recommendation

00:07:26.870 --> 00:07:28.380
and tune it down.

00:07:28.380 --> 00:07:32.990
So we want to make sure you're
not wasting your money on us,

00:07:32.990 --> 00:07:37.370
so we give you these
alerts to tell you, hey,

00:07:37.370 --> 00:07:39.417
maybe we can run on
a different machine.

00:07:39.417 --> 00:07:41.000
So with that, I'm
going to switch back

00:07:41.000 --> 00:07:43.680
to [? preso ?] mode.

00:07:43.680 --> 00:07:45.310
That was Compute Engine.

00:07:45.310 --> 00:07:47.150
I'm going to move
on to containers.

00:07:47.150 --> 00:07:49.400
So how many people here are
fooling around containers,

00:07:49.400 --> 00:07:51.510
Docker or otherwise?

00:07:51.510 --> 00:07:55.330
OK, how many people are
running in production?

00:07:55.330 --> 00:07:57.340
How many people said
Docker in a parking lot

00:07:57.340 --> 00:08:00.100
and a conference
sprung up around you?

00:08:00.100 --> 00:08:03.100
That's actually how I/O came
to be, in a parking lot.

00:08:03.100 --> 00:08:04.160
I think, I don't know.

00:08:04.160 --> 00:08:06.220
I wouldn't trust me on that one.

00:08:06.220 --> 00:08:08.200
So containers,
containers at Google.

00:08:08.200 --> 00:08:11.276
What do you do with
containers at Google?

00:08:11.276 --> 00:08:14.620
So containers at Google, we're
talking about Container Engine,

00:08:14.620 --> 00:08:17.590
or managed Kubernetes, at which
point you might be asking,

00:08:17.590 --> 00:08:20.650
Kuber-what-es, which is
the appropriate question.

00:08:20.650 --> 00:08:22.670
Kubernetes is a container
orchestration system.

00:08:22.670 --> 00:08:24.760
So you guys are
familiar with Docker.

00:08:24.760 --> 00:08:26.530
You take your
containerized systems,

00:08:26.530 --> 00:08:30.050
you already have them in
a small, single-instance

00:08:30.050 --> 00:08:30.550
container.

00:08:30.550 --> 00:08:32.469
But when you want
to start linking

00:08:32.469 --> 00:08:34.510
whole bunches of containers
together and building

00:08:34.510 --> 00:08:36.580
micro surfaces based
on them, or building

00:08:36.580 --> 00:08:38.890
complex scheduled jobs,
it becomes a little bit

00:08:38.890 --> 00:08:40.090
difficult to manage them.

00:08:40.090 --> 00:08:42.970
So Kubernetes makes
that easier for you.

00:08:42.970 --> 00:08:44.530
So it is an open
source application

00:08:44.530 --> 00:08:45.940
that can run anywhere.

00:08:45.940 --> 00:08:48.659
You can run it on us,
which I recommend,

00:08:48.659 --> 00:08:50.200
but you can also
run it other places,

00:08:50.200 --> 00:08:54.250
on premises, Amazon, Azure, you
can run it all those places.

00:08:54.250 --> 00:08:55.960
And so the way
Kubernetes works is

00:08:55.960 --> 00:09:00.040
I say, Kubernetes, I have
a service that's made up

00:09:00.040 --> 00:09:01.529
of three different containers.

00:09:01.529 --> 00:09:03.070
I would like to have
some redundancy,

00:09:03.070 --> 00:09:05.170
so I want four of
this container, three

00:09:05.170 --> 00:09:07.660
of this container,
one of this container.

00:09:07.660 --> 00:09:11.020
And I'd like you to
get me an IP address

00:09:11.020 --> 00:09:14.650
for public use for two layers of
it, the API and the front end.

00:09:14.650 --> 00:09:16.380
The backend I want
to keep private.

00:09:16.380 --> 00:09:19.510
And Kubernetes will make sure
that it starts all that up

00:09:19.510 --> 00:09:20.590
and runs for you.

00:09:20.590 --> 00:09:21.966
If you have a
public IP address--

00:09:21.966 --> 00:09:23.798
or if you want to have
a public IP address--

00:09:23.798 --> 00:09:25.240
Kubernetes will give it to you.

00:09:25.240 --> 00:09:28.080
If you don't, it'll
keep it private.

00:09:28.080 --> 00:09:34.636
So Kubernetes, we talked about
running on top of Kubernetes,

00:09:34.636 --> 00:09:36.760
but now we're going to talk
about actually building

00:09:36.760 --> 00:09:38.176
a Kubernetes cluster
for yourself,

00:09:38.176 --> 00:09:40.370
if you're running on
prem or somewhere else.

00:09:40.370 --> 00:09:42.670
So first you have to
build up all the machines.

00:09:42.670 --> 00:09:44.336
Once you build up the
machines, you then

00:09:44.336 --> 00:09:46.132
have to install
Kubernetes on it.

00:09:46.132 --> 00:09:47.590
After you install
Kubernetes on it,

00:09:47.590 --> 00:09:50.684
you have to set up a network
and get the network running.

00:09:50.684 --> 00:09:53.350
You then have to set up services
like DNS for service discovery,

00:09:53.350 --> 00:09:56.850
so that when you say, this
guy I want to be public

00:09:56.850 --> 00:09:59.950
and this one a private,
that all gets sorted out.

00:09:59.950 --> 00:10:01.729
Then, because people
like to know what's

00:10:01.729 --> 00:10:04.270
going on with their systems,
you probably want to do logging,

00:10:04.270 --> 00:10:06.910
and you want to do monitoring.

00:10:06.910 --> 00:10:09.910
Then to go a step further,
containers are ephemeral.

00:10:09.910 --> 00:10:12.754
So you don't want to
store data on containers.

00:10:12.754 --> 00:10:14.170
So what you want
to do is you want

00:10:14.170 --> 00:10:16.870
to build disks that live
outside the containers that

00:10:16.870 --> 00:10:22.130
can live even if the containers
themselves go up and down.

00:10:22.130 --> 00:10:26.660
If you need it, this is great,
but this is a lot of work.

00:10:26.660 --> 00:10:30.439
So the other thing you could
do is on Google Cloud Platform,

00:10:30.439 --> 00:10:32.230
we have this thing
called Container Engine.

00:10:32.230 --> 00:10:35.260
And there's this button,
Create a Container Cluster,

00:10:35.260 --> 00:10:37.660
and that is exactly the
same thing I did without all

00:10:37.660 --> 00:10:39.170
of the steps involved.

00:10:39.170 --> 00:10:41.320
It'll just do all
of that for you

00:10:41.320 --> 00:10:46.030
and keep maintaining the OS
and the Kubernetes version.

00:10:46.030 --> 00:10:47.950
So you don't have to
manage any of the system,

00:10:47.950 --> 00:10:51.010
you just run on
top of Kubernetes.

00:10:51.010 --> 00:10:53.530
So I'm going to show a quick
demo of Kubernetes in action.

00:10:53.530 --> 00:10:56.150
So I'm going to switch
over to my laptop here.

00:10:56.150 --> 00:10:59.530
So I have a visualizer
up with nothing on it,

00:10:59.530 --> 00:11:01.300
because nothing is running yet.

00:11:01.300 --> 00:11:05.530
I'm going to switch
over to my ID here.

00:11:05.530 --> 00:11:09.420
And wrong terminal
window, switch over here.

00:11:17.670 --> 00:11:19.380
And what I'm going
to do is I'm going

00:11:19.380 --> 00:11:22.290
to deploy seven applications
onto this Kubernetes cluster

00:11:22.290 --> 00:11:23.400
that I'm running.

00:11:23.400 --> 00:11:24.630
So I'll hit Run.

00:11:24.630 --> 00:11:26.040
The command isn't that--

00:11:26.040 --> 00:11:29.440
it's just a make file.

00:11:29.440 --> 00:11:32.820
We got an error.

00:11:32.820 --> 00:11:33.550
I know why.

00:11:33.550 --> 00:11:35.570
All right.

00:11:35.570 --> 00:11:38.450
So I logged in earlier, thinking
that it would save me, but no.

00:11:38.450 --> 00:11:41.820
Gcloud off, log in.

00:11:41.820 --> 00:11:43.440
There you go.

00:11:43.440 --> 00:11:47.670
Yup, I'm allowed to
do this, trust me.

00:11:47.670 --> 00:11:49.610
All right, I'll
switch back here.

00:11:49.610 --> 00:11:57.410
Make [? M, ?] make
creds, and make deploy.

00:11:57.410 --> 00:11:59.210
Also helps if you
spell it right.

00:11:59.210 --> 00:11:59.800
There we go.

00:11:59.800 --> 00:12:02.390
All right, so I'm going to
deploy seven applications.

00:12:02.390 --> 00:12:04.130
There we go, now it's working.

00:12:04.130 --> 00:12:05.630
Just had to log in.

00:12:05.630 --> 00:12:09.640
So now when I switch,
we should see--

00:12:09.640 --> 00:12:11.540
oh, there we go, now
they're starting up.

00:12:11.540 --> 00:12:14.770
So in that time I launched
seven applications.

00:12:14.770 --> 00:12:17.600
It happened so fast that while I
muddling around with logging in

00:12:17.600 --> 00:12:19.725
and making sure all of our
credentials are correct,

00:12:19.725 --> 00:12:20.350
it did it.

00:12:20.350 --> 00:12:22.770
So it launched seven--

00:12:22.770 --> 00:12:25.210
no, six applications, yes.

00:12:25.210 --> 00:12:30.040
So two Drupal instances, a
Wordpress instance, an HD,

00:12:30.040 --> 00:12:34.240
like just a simple CRUD
application, a Node.js app.

00:12:34.240 --> 00:12:36.190
All of these
launched immediately.

00:12:36.190 --> 00:12:38.750
I already have a public IP
address for one of them.

00:12:38.750 --> 00:12:41.410
And so in the past, I would
build multiple systems

00:12:41.410 --> 00:12:43.240
for all of these.

00:12:43.240 --> 00:12:45.700
And because they're
all different versions

00:12:45.700 --> 00:12:47.294
of the same software,
I wouldn't want

00:12:47.294 --> 00:12:48.460
to run them on the same box.

00:12:48.460 --> 00:12:51.620
Now I can throw all of my
boxes into a Kubernetes cluster

00:12:51.620 --> 00:12:53.170
and run all of
these applications

00:12:53.170 --> 00:12:55.750
in one space, saving a
whole lot of resources

00:12:55.750 --> 00:12:58.700
and making my deploy times
faster and everything working.

00:12:58.700 --> 00:13:03.180
So that is a quick demo
of Kubernetes in action.

00:13:03.180 --> 00:13:07.408
And with that, I'm going to
switch back to presenting.

00:13:10.074 --> 00:13:11.240
And I'm going to go through.

00:13:11.240 --> 00:13:12.500
So that is Container Engine.

00:13:12.500 --> 00:13:13.760
It's managed Kubernetes.

00:13:13.760 --> 00:13:16.218
All of the system, all of the
hardware, all of the network,

00:13:16.218 --> 00:13:17.635
and all of that's
handled for you.

00:13:17.635 --> 00:13:19.676
You get smart defaults
for monitoring and logging

00:13:19.676 --> 00:13:20.240
and all that.

00:13:20.240 --> 00:13:23.940
And you also get the
capability of autoscaling.

00:13:23.940 --> 00:13:26.330
The other way to run containers
on Google Cloud Platform

00:13:26.330 --> 00:13:28.630
is something we call App
Engine Flexible Environment.

00:13:28.630 --> 00:13:30.290
Now, that's going
to come back up when

00:13:30.290 --> 00:13:32.004
we talk about serverless.

00:13:32.004 --> 00:13:35.420
But under the covers,
App Engine Flexible

00:13:35.420 --> 00:13:37.370
is running just Docker.

00:13:37.370 --> 00:13:40.530
And so our run times are all
Docker images that you can use.

00:13:40.530 --> 00:13:43.280
Now, what you can do is
use a custom runtime,

00:13:43.280 --> 00:13:45.920
which is your own Docker file,
with your own application

00:13:45.920 --> 00:13:49.370
that you upload to App Engine.

00:13:49.370 --> 00:13:51.600
What you get out of
that is autoscaling.

00:13:51.600 --> 00:13:53.960
So we can scale it from
one to as much load

00:13:53.960 --> 00:13:55.880
as you can throw at it.

00:13:55.880 --> 00:13:57.920
And you also get
an endpoint for it.

00:13:57.920 --> 00:14:03.770
So you don't have to wire up all
of the networking and the certs

00:14:03.770 --> 00:14:07.340
and all of that to get SSL,
you can just use our endpoint,

00:14:07.340 --> 00:14:09.840
and you're good to go.

00:14:09.840 --> 00:14:13.370
So we also have a couple of
helper apps for containers.

00:14:13.370 --> 00:14:14.870
Container Registry
is a place where

00:14:14.870 --> 00:14:16.286
you can build your
own containers,

00:14:16.286 --> 00:14:19.310
store them, and then
store the images there,

00:14:19.310 --> 00:14:22.490
and then you're locked behind
your Google Cloud credentials.

00:14:22.490 --> 00:14:25.340
So if you want to share an
image with a group of people,

00:14:25.340 --> 00:14:27.360
but not make it public,
you can do that.

00:14:27.360 --> 00:14:28.880
You can also make
them public there.

00:14:28.880 --> 00:14:30.680
That also works, too.

00:14:30.680 --> 00:14:33.360
You can use them from
any Docker environment,

00:14:33.360 --> 00:14:35.120
including Docker
on your desktop,

00:14:35.120 --> 00:14:37.580
or Kubernetes in production.

00:14:37.580 --> 00:14:40.670
Container Builder will take your
Docker files and application

00:14:40.670 --> 00:14:43.217
and just build an image for
you, and host it in registry.

00:14:43.217 --> 00:14:45.050
So instead of having
to build all that stuff

00:14:45.050 --> 00:14:46.910
on your local laptop
and then upload it,

00:14:46.910 --> 00:14:50.200
you can just upload the smaller
files and the applications,

00:14:50.200 --> 00:14:52.810
and it'll be fine.

00:14:52.810 --> 00:14:56.200
All right, so now we're going
to switch to serverless.

00:14:56.200 --> 00:14:58.570
So we'll start with App
Engine Flexible, which I just

00:14:58.570 --> 00:14:59.680
mentioned.

00:14:59.680 --> 00:15:03.130
So it does run Docker, and
you can build your own.

00:15:03.130 --> 00:15:06.450
But under the covers,
we have these runtimes

00:15:06.450 --> 00:15:08.090
that are all ready for you.

00:15:08.090 --> 00:15:12.910
So Java, Python,
Node, Ruby, PHP, Go.

00:15:12.910 --> 00:15:14.800
And what that gives
you is the ability

00:15:14.800 --> 00:15:16.700
to kind of just
upload your code.

00:15:16.700 --> 00:15:18.908
You don't have to worry
about the Docker file at all,

00:15:18.908 --> 00:15:20.530
as long as it's one
of those runtimes.

00:15:20.530 --> 00:15:23.120
And we'll just run it for you.

00:15:23.120 --> 00:15:24.610
And so that same
kind of advantage

00:15:24.610 --> 00:15:28.260
you got before of just having
a scale and one endpoint

00:15:28.260 --> 00:15:30.052
is already there for you.

00:15:30.052 --> 00:15:31.510
Now, we also have
this thing called

00:15:31.510 --> 00:15:34.210
App Engine Standard, which is,
if you are familiar with App

00:15:34.210 --> 00:15:38.760
Engine from before, like you've
been to a couple of these

00:15:38.760 --> 00:15:41.140
and seen us talk about
it, is the App Engine

00:15:41.140 --> 00:15:43.510
that we've had out for a while.

00:15:43.510 --> 00:15:45.634
It's restricted
in its languages.

00:15:45.634 --> 00:15:47.300
And the restrictions
go a little deeper.

00:15:47.300 --> 00:15:48.758
You can't write to
the file system,

00:15:48.758 --> 00:15:53.380
you can't use extensions.

00:15:53.380 --> 00:15:55.780
You have to write in only
the language we provide you.

00:15:55.780 --> 00:15:58.780
But in return for that,
you get very, very quickly

00:15:58.780 --> 00:16:02.770
scaling applications, so if
you have very variable load,

00:16:02.770 --> 00:16:04.810
and sometimes it
rests to zero, you

00:16:04.810 --> 00:16:08.110
can use the App Engine
to manage that, and only

00:16:08.110 --> 00:16:10.549
pay for it when you need it.

00:16:10.549 --> 00:16:13.090
And I'm going to show an example
of this, of just how rapidly

00:16:13.090 --> 00:16:15.130
App Engine can scale.

00:16:15.130 --> 00:16:17.230
The last piece of this
is Cloud Functions.

00:16:17.230 --> 00:16:19.240
App Engine, the
unit of abstraction

00:16:19.240 --> 00:16:21.680
for your serverless
app, is an application.

00:16:21.680 --> 00:16:24.480
So all the wiring,
all the routing, all

00:16:24.480 --> 00:16:27.160
of the pieces that make
your code eventually

00:16:27.160 --> 00:16:29.710
surface up to an endpoint.

00:16:29.710 --> 00:16:32.440
With Functions, we get rid
of all the application,

00:16:32.440 --> 00:16:35.020
and all you're doing
is writing a function

00:16:35.020 --> 00:16:37.150
that you're making serverless.

00:16:37.150 --> 00:16:40.300
So the canonical example of
this is someone uploads a file

00:16:40.300 --> 00:16:41.710
and you want to send an email.

00:16:41.710 --> 00:16:43.501
You don't want to build
a whole application

00:16:43.501 --> 00:16:44.400
to make that happen.

00:16:44.400 --> 00:16:47.920
What you can do is
just, basically,

00:16:47.920 --> 00:16:50.290
listen for the event of a
file being uploaded into Cloud

00:16:50.290 --> 00:16:53.517
Storage, fire that off
to a Cloud Function that

00:16:53.517 --> 00:16:55.600
takes the info about the
file, and sends the email

00:16:55.600 --> 00:16:57.880
that you need to run.

00:16:57.880 --> 00:17:00.460
So that is Cloud Functions.

00:17:00.460 --> 00:17:02.080
So I'm going to
switch now, and I

00:17:02.080 --> 00:17:04.413
said I was going to show a
quick example of App Engine's

00:17:04.413 --> 00:17:05.750
capacity for load.

00:17:05.750 --> 00:17:06.760
So I'm going to do that.

00:17:06.760 --> 00:17:11.589
Here I have App Engine
running on a real URL.

00:17:11.589 --> 00:17:13.300
The reason why I
have faked up the URL

00:17:13.300 --> 00:17:16.630
is because people will ping
it, and the whole point of this

00:17:16.630 --> 00:17:18.470
is that, it's a cold system.

00:17:18.470 --> 00:17:20.540
So if you ping it while
the URL is up there,

00:17:20.540 --> 00:17:24.010
it will warm up the system and
defeat the purpose of the demo.

00:17:24.010 --> 00:17:26.670
I have 20 VMs already
built and ready.

00:17:26.670 --> 00:17:27.912
And they have ApacheBench.

00:17:27.912 --> 00:17:30.370
And they're going to send a
whole lot of loaded App Engine.

00:17:30.370 --> 00:17:33.115
And we'll be able to see
just how fast App Engine can

00:17:33.115 --> 00:17:35.470
respond to load through this.

00:17:35.470 --> 00:17:39.460
So I'm going to
type a command here.

00:17:39.460 --> 00:17:44.341
I am going to, basically--

00:17:44.341 --> 00:17:46.590
I know it's hard to see at
the bottom-- but basically,

00:17:46.590 --> 00:17:47.430
I'm going to send--

00:17:47.430 --> 00:17:48.971
using ApacheBench,
each node is going

00:17:48.971 --> 00:17:51.864
to send 500 hits at
that URL, and it's

00:17:51.864 --> 00:17:54.450
going to do it with 100
concurrent hits at a time.

00:17:54.450 --> 00:17:59.760
So it should be a pretty
quick load test here.

00:17:59.760 --> 00:18:02.100
Somebody hit the
URL, no, no, no.

00:18:02.100 --> 00:18:03.720
There we go, refreshed.

00:18:03.720 --> 00:18:05.310
It'll still work, it'll be fine.

00:18:05.310 --> 00:18:08.800
So you see the guys
bouncing up at the top?

00:18:08.800 --> 00:18:10.550
That's when they're
starting to send load.

00:18:10.550 --> 00:18:12.870
And you see App
Engine is spinning up

00:18:12.870 --> 00:18:16.050
copies of the code
that handles that URL.

00:18:16.050 --> 00:18:19.170
So as the load increases,
as all these machines

00:18:19.170 --> 00:18:20.970
are hammering that
URL, App Engine says,

00:18:20.970 --> 00:18:21.990
fine, we can handle it.

00:18:21.990 --> 00:18:25.300
We'll just spin up more
instances to handle it.

00:18:25.300 --> 00:18:27.936
So this should go to
precisely 10,000 hits.

00:18:27.936 --> 00:18:29.310
And now that I've
said that, I've

00:18:29.310 --> 00:18:32.040
guaranteed that it won't,
because demo gods don't

00:18:32.040 --> 00:18:32.850
like me.

00:18:32.850 --> 00:18:35.820
But we're spinning
down, and boom, there

00:18:35.820 --> 00:18:38.290
was that one extra one that
we had at the beginning.

00:18:38.290 --> 00:18:44.040
So we went to 10,000
hits, plus one.

00:18:44.040 --> 00:18:45.960
But that's how quickly
App Engine standard

00:18:45.960 --> 00:18:48.330
can respond to your needs.

00:18:48.330 --> 00:18:53.180
With that, I'm going to
switch back to the app.

00:18:53.180 --> 00:18:55.570
Yep, there we go.

00:18:55.570 --> 00:18:57.230
And I'm going to move forward.

00:18:57.230 --> 00:18:59.300
All right, so that is
everything about computing.

00:18:59.300 --> 00:19:02.420
And now I'm going to go through
just a quick list of networking

00:19:02.420 --> 00:19:04.820
to clear our palettes
before we go to storage.

00:19:04.820 --> 00:19:08.870
Networking, what
do people ask for?

00:19:08.870 --> 00:19:10.222
I am hitting the wrong button.

00:19:10.222 --> 00:19:11.180
There we go, all right.

00:19:11.180 --> 00:19:15.560
So you want to hook up a
network on your own system,

00:19:15.560 --> 00:19:17.900
in your own Google
Cloud project.

00:19:17.900 --> 00:19:20.414
Virtual Cloud Network
is the way to do that.

00:19:20.414 --> 00:19:22.080
If you want to peer
directly with Google

00:19:22.080 --> 00:19:26.030
so you can get faster throughput
between your site and Google,

00:19:26.030 --> 00:19:29.060
you can use Cloud
Interconnect to do that.

00:19:29.060 --> 00:19:31.490
If you need a VPN, we
do have a VPN available.

00:19:31.490 --> 00:19:33.691
It is gateway to
gateway only, so not

00:19:33.691 --> 00:19:34.940
hooking up your road warriors.

00:19:34.940 --> 00:19:38.730
You're basically just securing a
connection to another location.

00:19:38.730 --> 00:19:46.250
So your premises to Google,
or say, AWS to Google instead.

00:19:46.250 --> 00:19:48.750
We also have a firewall, that's
another thing that you want.

00:19:48.750 --> 00:19:51.140
It's hidden in the
network settings,

00:19:51.140 --> 00:19:53.066
but it is there for you.

00:19:53.066 --> 00:19:55.190
Other things that people
ask for, do we have a CDN?

00:19:55.190 --> 00:19:56.519
Yes, we have a CDN.

00:19:56.519 --> 00:19:58.310
You activate it through
our load balancers,

00:19:58.310 --> 00:20:01.160
and it uses HTTP headers
to determine whether or not

00:20:01.160 --> 00:20:02.810
something should be cached.

00:20:02.810 --> 00:20:04.100
We have DNS servers.

00:20:04.100 --> 00:20:07.730
Little trivia-- the only product
I've ever seen that we have,

00:20:07.730 --> 00:20:12.380
that has a 100% uptime SLA
is our DNS authoritative name

00:20:12.380 --> 00:20:13.670
servers.

00:20:13.670 --> 00:20:16.190
So you can run your
DNS on us and take

00:20:16.190 --> 00:20:19.255
advantage of our very
available name servers.

00:20:19.255 --> 00:20:21.380
We also have load balancers
and other things people

00:20:21.380 --> 00:20:22.671
ask for on the networking side.

00:20:22.671 --> 00:20:27.740
We do HTTP load balancing, SSL
load balancing, internal load

00:20:27.740 --> 00:20:30.590
balancing, so just for
resources in your project

00:20:30.590 --> 00:20:31.732
to talk to one another.

00:20:31.732 --> 00:20:33.440
And then finally,
network load balancing,

00:20:33.440 --> 00:20:38.660
which can do protocols
other than just HTTP.

00:20:38.660 --> 00:20:41.860
What if I need something
that isn't on this list?

00:20:41.860 --> 00:20:43.900
So first off, that was
not a comprehensive list

00:20:43.900 --> 00:20:45.316
of everything on
the network side.

00:20:45.316 --> 00:20:47.680
But don't be alarmed, you can--

00:20:47.680 --> 00:20:50.410
with Compute Engine--
if you can build it,

00:20:50.410 --> 00:20:52.360
you can host it on
us, and it'll work.

00:20:52.360 --> 00:20:54.600
And we actually have a
couple of pre-built solutions

00:20:54.600 --> 00:20:57.460
for Barracuda,
Brocade, CloudFlare,

00:20:57.460 --> 00:21:01.150
and a couple of other networking
solutions already available

00:21:01.150 --> 00:21:03.130
for you.

00:21:03.130 --> 00:21:05.400
All right, going quick
through this quickly.

00:21:05.400 --> 00:21:08.700
And now I'm going to talk about
storage, or keeping things.

00:21:08.700 --> 00:21:11.190
People think about storage
in kind of these three ways--

00:21:11.190 --> 00:21:14.390
files, databases, and big data.

00:21:14.390 --> 00:21:16.140
When you're talking
about files at Google,

00:21:16.140 --> 00:21:17.598
you're talking
about Cloud Storage.

00:21:17.598 --> 00:21:21.540
If you guys are familiar with
products from other cloud

00:21:21.540 --> 00:21:24.840
providers, the API
matches pretty well.

00:21:24.840 --> 00:21:26.490
We have one set of
interfaces, so one

00:21:26.490 --> 00:21:28.440
API for dealing
with all of storage,

00:21:28.440 --> 00:21:30.481
even though there are a
couple of different types

00:21:30.481 --> 00:21:31.920
that you can run.

00:21:31.920 --> 00:21:35.130
And I'll go through
those types in a second.

00:21:35.130 --> 00:21:37.850
But we kind of divide
this up into three spaces.

00:21:37.850 --> 00:21:39.720
One is public content,
content that you

00:21:39.720 --> 00:21:43.580
want to share with your
users outside of you.

00:21:43.580 --> 00:21:46.470
And so you want this to be
globally available and highly

00:21:46.470 --> 00:21:47.840
available.

00:21:47.840 --> 00:21:50.160
Process data, instead,
is data that you're going

00:21:50.160 --> 00:21:51.804
to run crunching on, right?

00:21:51.804 --> 00:21:53.220
You're going to
do a big data job.

00:21:53.220 --> 00:21:55.762
You're going to analyze a whole
bunch of photos or something.

00:21:55.762 --> 00:21:57.636
You don't need that to
be globally available,

00:21:57.636 --> 00:21:59.940
you just need it to be close
to the processing power

00:21:59.940 --> 00:22:01.350
that you're throwing at it.

00:22:01.350 --> 00:22:02.940
And then long term
storage is stuff

00:22:02.940 --> 00:22:07.170
that we hope we never have
to use, like compliance data,

00:22:07.170 --> 00:22:09.810
or locks, or legal stuff.

00:22:09.810 --> 00:22:12.510
Like stuff that we never
really want to use,

00:22:12.510 --> 00:22:14.580
but we have to hold onto.

00:22:14.580 --> 00:22:18.240
And so we'll talk about those in
terms of Google Cloud Storage.

00:22:18.240 --> 00:22:20.710
So starting off with stuff
that's publicly available.

00:22:20.710 --> 00:22:27.900
We have a set of servers that's
publicly available at 99.95%

00:22:27.900 --> 00:22:29.100
availability.

00:22:29.100 --> 00:22:30.402
It's geo redundant.

00:22:30.402 --> 00:22:31.860
And this is for
frequently accessed

00:22:31.860 --> 00:22:36.600
stuff, like world audience,
websites, video streaming,

00:22:36.600 --> 00:22:37.867
gaming, mobile.

00:22:37.867 --> 00:22:40.200
You want this data to be as
close to people as possible,

00:22:40.200 --> 00:22:42.750
so you put it in
this type of storage

00:22:42.750 --> 00:22:45.030
and we'll make sure it's
replicated around the globe.

00:22:45.030 --> 00:22:50.650
Storage cost is $0.026
per gigabyte per month,

00:22:50.650 --> 00:22:52.260
and we call it multi-region.

00:22:52.260 --> 00:22:56.280
Now, for process data, it's
slightly less available.

00:22:56.280 --> 00:22:59.740
And it's only stored in a very
specific geographic region.

00:22:59.740 --> 00:23:02.310
So this is for, you want
to process the data there,

00:23:02.310 --> 00:23:04.800
and you want it close to
your processing power,

00:23:04.800 --> 00:23:09.090
so you just leave it in one
area, and just leave it there.

00:23:09.090 --> 00:23:10.950
So it is cheaper
for that reason.

00:23:10.950 --> 00:23:13.920
It's only $0.02 per gigabyte per
month, and we call it regional.

00:23:13.920 --> 00:23:15.910
Now, long term storage,
we have two options.

00:23:15.910 --> 00:23:19.800
We have Nearline, which is,
again, slightly less available,

00:23:19.800 --> 00:23:22.839
and has a minimum amount of time
you have to store it, 30 days.

00:23:22.839 --> 00:23:24.630
Now, that doesn't mean
you can't delete it.

00:23:24.630 --> 00:23:26.970
If you put something up there
and you delete it, cool,

00:23:26.970 --> 00:23:28.274
we'll get rid of it.

00:23:28.274 --> 00:23:30.690
But it means we're going to
charge you for 30 days for it,

00:23:30.690 --> 00:23:33.510
even if you delete it.

00:23:33.510 --> 00:23:38.145
This is for things like
backups and long tail media.

00:23:38.145 --> 00:23:40.770
You've got videos that are only
accessed every once in a while.

00:23:40.770 --> 00:23:42.330
You don't want to store
on the more expensive one.

00:23:42.330 --> 00:23:44.455
It's OK if it takes a little
bit longer for someone

00:23:44.455 --> 00:23:47.760
to serve up the first byte and
get a little charge for running

00:23:47.760 --> 00:23:51.220
it, because it's
cheaper in the long run.

00:23:51.220 --> 00:23:54.271
You get charged for the
storage and also for retrieval.

00:23:54.271 --> 00:23:55.770
So there's a little
bit of incentive

00:23:55.770 --> 00:23:58.620
to not put stuff there
that you're going

00:23:58.620 --> 00:24:01.580
to be accessing frequently.

00:24:01.580 --> 00:24:03.145
Finally, there's
Coldline, which is

00:24:03.145 --> 00:24:06.887
our cheapest storage at
$0.007 per gigabyte per month.

00:24:06.887 --> 00:24:08.720
It's a little bit more
expensive to retrieve

00:24:08.720 --> 00:24:13.240
and has a longer minimum store.

00:24:13.240 --> 00:24:15.044
You're kind of set
up incentivized.

00:24:15.044 --> 00:24:16.460
You don't want to
pull this stuff.

00:24:16.460 --> 00:24:19.180
This is for, like, I
need compliance data,

00:24:19.180 --> 00:24:24.740
I need regulatory data, or
disaster recovery information.

00:24:24.740 --> 00:24:26.724
So that's Coldline.

00:24:26.724 --> 00:24:28.140
All right, now
we're going to talk

00:24:28.140 --> 00:24:32.010
about two sets of application
data, or database data.

00:24:32.010 --> 00:24:33.540
SQL or NoSQL?

00:24:33.540 --> 00:24:35.140
I'm not going to get into this.

00:24:35.140 --> 00:24:36.570
This is a giant
fight, and we can

00:24:36.570 --> 00:24:39.120
have a whole conference just
on which one should you choose.

00:24:39.120 --> 00:24:41.040
I'm not going to get into that.

00:24:41.040 --> 00:24:42.090
Choose whatever you want.

00:24:42.090 --> 00:24:44.970
I'll talk about how we can
help you in both those places.

00:24:44.970 --> 00:24:49.860
So with SQL, we have Cloud
SQL, which is traditional SQL

00:24:49.860 --> 00:24:53.970
that you're used to that
is vertically scalable.

00:24:53.970 --> 00:24:55.980
So you want more
power, you have to make

00:24:55.980 --> 00:24:57.480
your machine bigger and bigger.

00:24:57.480 --> 00:25:01.110
And then eventually you run
out of head space on that.

00:25:01.110 --> 00:25:04.170
They're based on our
virtual machines,

00:25:04.170 --> 00:25:07.480
so as powerful as our
virtual machines are,

00:25:07.480 --> 00:25:10.950
Cloud SQL can usually
operate at that level.

00:25:10.950 --> 00:25:12.930
We manage your backups
to make it really easy

00:25:12.930 --> 00:25:14.520
to set up replicas,
and you don't ever

00:25:14.520 --> 00:25:16.140
have to manage the system.

00:25:16.140 --> 00:25:19.980
We will manage the system,
you just run SQL on top of it.

00:25:19.980 --> 00:25:22.470
We have MySQL, which we've
had for quite some time,

00:25:22.470 --> 00:25:24.870
and we have Postgres,
which was available-- it's

00:25:24.870 --> 00:25:26.700
available in beta.

00:25:26.700 --> 00:25:28.410
We released that in March.

00:25:28.410 --> 00:25:30.930
It will, at some
point, move to GA.

00:25:30.930 --> 00:25:34.290
I don't know when that is
off the top of my head.

00:25:34.290 --> 00:25:36.360
We also have this thing
called Cloud Spanner.

00:25:36.360 --> 00:25:38.700
Now, Cloud SQL is
vertically scalable,

00:25:38.700 --> 00:25:41.250
Cloud Spanner is
horizontally scalable.

00:25:41.250 --> 00:25:43.320
And the idea behind it
is it's structured data

00:25:43.320 --> 00:25:47.250
that you query using SQL,
that's both highly available

00:25:47.250 --> 00:25:49.450
and strongly consistent.

00:25:49.450 --> 00:25:55.020
Now, for people who know the
cap theorem, that's impossible.

00:25:55.020 --> 00:25:58.100
So we hired the guy that wrote
the cap theorem, made him a VP,

00:25:58.100 --> 00:26:00.750
and he's like, it's OK.

00:26:00.750 --> 00:26:04.680
Which is a very abbreviated
version of the truth with that.

00:26:04.680 --> 00:26:08.712
Basically, our networking
is reliable enough

00:26:08.712 --> 00:26:10.920
that you don't really have
to worry about partitions,

00:26:10.920 --> 00:26:14.195
is sort of the way we
hem and haw over that.

00:26:14.195 --> 00:26:15.570
But the point here
is that if you

00:26:15.570 --> 00:26:19.200
want to make it faster, or
bigger, or have more resources,

00:26:19.200 --> 00:26:20.670
you horizontally
scale it instead

00:26:20.670 --> 00:26:21.810
of vertically scaling it.

00:26:21.810 --> 00:26:23.670
Which means it could
be globally available,

00:26:23.670 --> 00:26:25.950
and you do really, really
cool things with it.

00:26:25.950 --> 00:26:29.415
It's important to note
though, that it is--

00:26:29.415 --> 00:26:32.830
how did I say this before--

00:26:32.830 --> 00:26:36.390
it's a BMW, not a Volkswagen.
If you're a hobbyist,

00:26:36.390 --> 00:26:39.360
be very careful trying
Cloud Spanner out,

00:26:39.360 --> 00:26:42.150
because it can get
expensive quickly

00:26:42.150 --> 00:26:44.125
if you don't have the load.

00:26:44.125 --> 00:26:45.750
I mean, if you're
running a big company

00:26:45.750 --> 00:26:47.860
and you're having
tremendous amounts of load,

00:26:47.860 --> 00:26:49.985
Cloud Spanner's awesome
for you, but watch yourself

00:26:49.985 --> 00:26:52.320
if you're a hobbyist.

00:26:52.320 --> 00:26:54.540
Now we'll switch over to NoSQL.

00:26:54.540 --> 00:26:56.670
NoSQL, we have Cloud
Datastore, which

00:26:56.670 --> 00:27:00.600
is a document-based, indexable,
giant, giant NoSQL store.

00:27:00.600 --> 00:27:01.570
It's proprietary.

00:27:01.570 --> 00:27:04.950
It is not based on any
other open sourced product.

00:27:04.950 --> 00:27:07.800
And it works very
well with App Engine

00:27:07.800 --> 00:27:12.480
and is very, very easily
accessible from Compute Engine.

00:27:12.480 --> 00:27:14.097
Bigtable, not a lot
of people use it

00:27:14.097 --> 00:27:15.930
for application
development, but some people

00:27:15.930 --> 00:27:18.030
do because it's very,
very low latency.

00:27:18.030 --> 00:27:22.380
It is columnar, but you
don't query it with SQL.

00:27:22.380 --> 00:27:25.860
If you guys are familiar with
HBase, it is HBase compatible.

00:27:25.860 --> 00:27:28.140
And this is another tool
where you need scale

00:27:28.140 --> 00:27:29.320
to make it cost effective.

00:27:29.320 --> 00:27:32.220
So if you have less
than a terabyte of data,

00:27:32.220 --> 00:27:34.020
we recommend not using it.

00:27:34.020 --> 00:27:38.090
We recommend using probably
Datastore or another solution.

00:27:38.090 --> 00:27:40.660
So that's storage, that's
files, that's databases.

00:27:40.660 --> 00:27:42.310
Let's talk about big data.

00:27:42.310 --> 00:27:46.740
Where do you store big data
on Google Cloud Platform?

00:27:46.740 --> 00:27:49.270
Any of the these,
because big data is just

00:27:49.270 --> 00:27:53.230
data that to get
insight out of, you

00:27:53.230 --> 00:27:59.080
need to run additional processes
on that are not supported by--

00:27:59.080 --> 00:28:02.560
my SQL can be big data
if it's big enough,

00:28:02.560 --> 00:28:06.250
and you can't get insight
out of it using just SQL.

00:28:06.250 --> 00:28:09.070
So any of these
can store big data,

00:28:09.070 --> 00:28:12.190
with the caveat that Cloud SQL
is only vertically scalable.

00:28:12.190 --> 00:28:16.150
So at some point you're going
to hit that 65 terabytes of disk

00:28:16.150 --> 00:28:19.210
space per VM, and you're
going to have to figure out

00:28:19.210 --> 00:28:23.650
some other way of scaling that.

00:28:23.650 --> 00:28:25.370
Now, a really quick
thing on big data.

00:28:25.370 --> 00:28:27.760
We also have this
tool called BigQuery,

00:28:27.760 --> 00:28:33.070
which is awesome for running
ad hoc data analysis.

00:28:33.070 --> 00:28:35.560
Basically, you pipe in
semi-structured data to it.

00:28:35.560 --> 00:28:36.760
We can analyze it quickly.

00:28:36.760 --> 00:28:39.280
And you can use SQL to
analyze the data, which

00:28:39.280 --> 00:28:40.030
is really awesome.

00:28:40.030 --> 00:28:42.010
Instead of having to
spin up a dup job,

00:28:42.010 --> 00:28:46.540
and worry about how to
structure your query,

00:28:46.540 --> 00:28:48.850
you just use SQL that
everyone's, at this point,

00:28:48.850 --> 00:28:50.830
familiar with and can roll with.

00:28:50.830 --> 00:28:52.150
How do we do it?

00:28:52.150 --> 00:28:54.670
Basically, when you do big
data analysis, what you do

00:28:54.670 --> 00:28:57.050
is you take as many
machines as you can,

00:28:57.050 --> 00:29:00.700
you throw it at the job and see
how fast you can get it done.

00:29:00.700 --> 00:29:03.040
Well, we're Google.

00:29:03.040 --> 00:29:05.360
We have some spare
machines lying around.

00:29:05.360 --> 00:29:08.380
So what we do is we
back them into BigQuery,

00:29:08.380 --> 00:29:12.970
and BigQuery can scale
out as wide as it needs to

00:29:12.970 --> 00:29:16.420
in order to do your query.

00:29:16.420 --> 00:29:18.520
I'm going to just give you
a quick example of this

00:29:18.520 --> 00:29:20.750
in action.

00:29:20.750 --> 00:29:24.630
I'm going to switch
over here to this.

00:29:24.630 --> 00:29:26.260
All right, this is BigQuery.

00:29:26.260 --> 00:29:27.730
I have a query here.

00:29:27.730 --> 00:29:28.690
I have it in SQL.

00:29:28.690 --> 00:29:32.020
I'm going to try to
explain it before it

00:29:32.020 --> 00:29:34.869
gets done running the query.

00:29:34.869 --> 00:29:36.160
So let me see if I can do this.

00:29:36.160 --> 00:29:37.960
I'm going to have to
talk fast to do it.

00:29:37.960 --> 00:29:43.010
So I have a record of
every Wikipedia article

00:29:43.010 --> 00:29:45.674
that was searched
between 2013 and 2014.

00:29:45.674 --> 00:29:47.090
I am searching
through all of them

00:29:47.090 --> 00:29:50.150
to count up just as many
queries that how many

00:29:50.150 --> 00:29:53.540
requests were run against
Wikipedia during that time.

00:29:53.540 --> 00:29:55.490
So it is searching
through, and finding out,

00:29:55.490 --> 00:29:58.580
that we searched, as
a whole, as a people,

00:29:58.580 --> 00:30:06.320
we searched 1.1 trillion queries
on Wikipedia in that time.

00:30:06.320 --> 00:30:08.740
So how BigQuery
came about finding

00:30:08.740 --> 00:30:13.130
that answer is it search through
130 billion rows of Wikipedia

00:30:13.130 --> 00:30:16.274
data, reduced it down
to 65,000 records,

00:30:16.274 --> 00:30:17.690
and then further
reduced that down

00:30:17.690 --> 00:30:20.570
to a total count
of the whole thing.

00:30:20.570 --> 00:30:25.755
And we did all that,
like we processed

00:30:25.755 --> 00:30:28.130
close to a terabyte of data,
and we did all of that query

00:30:28.130 --> 00:30:30.410
in 13 seconds.

00:30:30.410 --> 00:30:33.450
So that is a quick
BigQuery demo.

00:30:33.450 --> 00:30:36.620
I'm going to switch
back and present.

00:30:36.620 --> 00:30:38.130
And we're going
to wrap up things.

00:30:38.130 --> 00:30:41.630
So we have a couple
other big data tools.

00:30:41.630 --> 00:30:45.740
We have Pub/Sub, which is a
publisher, subscriber messaging

00:30:45.740 --> 00:30:46.360
application.

00:30:46.360 --> 00:30:50.180
So you want to connect many
publishers and many subscribers

00:30:50.180 --> 00:30:53.560
to the same data
channels, you can do that.

00:30:53.560 --> 00:30:55.880
Dataflow, which is
Apache Beam, if you're

00:30:55.880 --> 00:30:57.590
into that sort of thing.

00:30:57.590 --> 00:31:01.170
DataProc which is managed Spark
and Hadoop, with autoscaling.

00:31:01.170 --> 00:31:04.929
So if you're running
Hadoop and Spark,

00:31:04.929 --> 00:31:06.470
DataProc is a great
way of running it

00:31:06.470 --> 00:31:09.970
and get help with
additional processing.

00:31:09.970 --> 00:31:12.910
Here's where I point out that
Cloud Pub/Sub and Cloud Storage

00:31:12.910 --> 00:31:16.000
sort of form a central
hub through which

00:31:16.000 --> 00:31:18.580
you can kind of have any
piece of Google Cloud talk

00:31:18.580 --> 00:31:20.380
to any other piece
of Google Cloud.

00:31:20.380 --> 00:31:22.360
So like if you want
to hook up a storage

00:31:22.360 --> 00:31:25.990
bucket to run a machine
learning process

00:31:25.990 --> 00:31:30.460
on images that are uploaded,
you can wire up Pub/Sub

00:31:30.460 --> 00:31:31.900
to listen to Cloud Storage.

00:31:31.900 --> 00:31:33.340
When Cloud Storage
gets the file,

00:31:33.340 --> 00:31:35.006
Pub/Sub will send it
to Cloud Functions,

00:31:35.006 --> 00:31:38.060
run the process on it,
and do something with it.

00:31:38.060 --> 00:31:40.750
So between Cloud Pub/Sub
and Cloud Storage,

00:31:40.750 --> 00:31:44.230
you can connect any two
services that we have.

00:31:44.230 --> 00:31:46.330
What if we need
something we don't offer?

00:31:46.330 --> 00:31:47.320
That's fine.

00:31:47.320 --> 00:31:49.120
You can build it
in Compute Engine.

00:31:49.120 --> 00:31:50.860
And we have Cloud
Launcher images

00:31:50.860 --> 00:31:53.640
for a lot of the common use
cases that we get asked for--

00:31:53.640 --> 00:31:58.110
Cassandra, Redis,
Mongo, CouchDB, more.

00:31:58.110 --> 00:32:00.550
So now we're going to
switch to administration.

00:32:00.550 --> 00:32:03.950
Administration, talk about
reporting and logging.

00:32:03.950 --> 00:32:06.510
So we have this product called
Stackdriver Logging, which

00:32:06.510 --> 00:32:08.060
does logging and monitoring.

00:32:08.060 --> 00:32:12.210
And what's cool about
it is it's cross-cloud.

00:32:12.210 --> 00:32:13.560
So you can monitor--

00:32:13.560 --> 00:32:16.980
like we're very big
into hybrid cloud.

00:32:16.980 --> 00:32:19.200
You want to run on multiple
places, that's great.

00:32:19.200 --> 00:32:22.560
With Stackdriver,
you can connect

00:32:22.560 --> 00:32:26.370
all of your environments
using the Stackdriver agent

00:32:26.370 --> 00:32:28.280
and monitor them in one place.

00:32:28.280 --> 00:32:32.000
So we'll have Stackdriver
Logging and Monitoring do that.

00:32:32.000 --> 00:32:33.840
Security, how do I
lock things down?

00:32:33.840 --> 00:32:35.660
We have a product
called Cloud IAM.

00:32:35.660 --> 00:32:37.880
Allow you to build
groups of resources,

00:32:37.880 --> 00:32:42.350
make role-based permissions,
finely tune those permissions.

00:32:42.350 --> 00:32:44.339
And these will vary
from product to product.

00:32:44.339 --> 00:32:46.880
Cloud Storage is going to have
a different set of permissions

00:32:46.880 --> 00:32:49.100
than, say, Compute Engine.

00:32:51.441 --> 00:32:53.690
Interacting with it from an
administrative standpoint,

00:32:53.690 --> 00:32:55.900
we've got the command
line interface, G Cloud,

00:32:55.900 --> 00:33:01.150
and the tool for accessing
storage, which is gsutil.

00:33:01.150 --> 00:33:05.000
The API is what
those apps will call.

00:33:05.000 --> 00:33:07.750
So you can take our API and
extend it in most languages

00:33:07.750 --> 00:33:09.510
to do whatever you want.

00:33:09.510 --> 00:33:11.010
And we also have
Deployment Manager.

00:33:11.010 --> 00:33:13.030
If you have a very
complex environment

00:33:13.030 --> 00:33:14.738
that you want to
recreate, like maybe you

00:33:14.738 --> 00:33:16.630
want to build an
environment, and then

00:33:16.630 --> 00:33:19.360
take it and make a staging
environment and a production

00:33:19.360 --> 00:33:20.830
environment from
it, basically, you

00:33:20.830 --> 00:33:22.870
can create one
giant YAML file that

00:33:22.870 --> 00:33:26.770
can recreate your entire
Google Cloud Platform project

00:33:26.770 --> 00:33:32.330
setup somewhere else on
Google Cloud Platform.

00:33:32.330 --> 00:33:36.540
I'll talk about developing on
top of Google Cloud Platform.

00:33:36.540 --> 00:33:40.350
There's an SDK available
through Gcloud and gsutil.

00:33:40.350 --> 00:33:43.180
We have plugins for IntelliJ,
Android Studio, Powershell,

00:33:43.180 --> 00:33:46.290
Visual Studio,
Eclipse, and more.

00:33:46.290 --> 00:33:50.040
I ran out of icons, so that's
why we have shrugee there.

00:33:50.040 --> 00:33:53.730
For Cloud Source
repository, it is

00:33:53.730 --> 00:33:55.710
managed git-- it's
not necessarily meant

00:33:55.710 --> 00:33:58.020
to be a competitor to GitHub.

00:33:58.020 --> 00:33:59.985
You can hook up your
GitHub repo to this.

00:33:59.985 --> 00:34:03.690
This is so that, one, we
have a copy of your code

00:34:03.690 --> 00:34:06.282
so when we do intelligence
on, like say, debugging,

00:34:06.282 --> 00:34:07.740
and we want to go
to a line number,

00:34:07.740 --> 00:34:09.281
we can just show
you the line number.

00:34:09.281 --> 00:34:11.230
That's like the big
use case for it.

00:34:11.230 --> 00:34:14.380
But I mean, it's managed git,
so if you just want to use it,

00:34:14.380 --> 00:34:16.139
it's fine.

00:34:16.139 --> 00:34:17.852
Reporting, tracing.

00:34:17.852 --> 00:34:20.310
So tracing comes automatically
with App Engine and our load

00:34:20.310 --> 00:34:20.810
balancer.

00:34:20.810 --> 00:34:23.670
It's enabled through an
SDK and other environments.

00:34:23.670 --> 00:34:25.989
This is what our tracing
interface looks like.

00:34:25.989 --> 00:34:28.800
So this is a call that I
was trying to troubleshoot.

00:34:28.800 --> 00:34:31.320
You'll see that this particular
call was pretty quick,

00:34:31.320 --> 00:34:35.610
92 milliseconds down the
purple on the lower left.

00:34:35.610 --> 00:34:38.549
You can see above it
that, most of the time,

00:34:38.549 --> 00:34:40.840
it's happening in the amount
of time that I want it to.

00:34:40.840 --> 00:34:43.465
But there are a couple of times
on the graph that it wasn't, so

00:34:43.465 --> 00:34:45.719
I could select one of those,
then show the logs for it

00:34:45.719 --> 00:34:47.730
and see what was
going on at that time.

00:34:47.730 --> 00:34:50.340
Really helps me
debug my applications

00:34:50.340 --> 00:34:52.690
running on App Engine.

00:34:52.690 --> 00:34:54.219
Reporting, error reporting.

00:34:54.219 --> 00:34:59.050
Any errors that you kind
of miss or you're not

00:34:59.050 --> 00:35:02.020
trapping through other means,
go to this interface here.

00:35:02.020 --> 00:35:05.110
And I've actually
found it both great

00:35:05.110 --> 00:35:07.169
and a little
embarrassing, like crap, I

00:35:07.169 --> 00:35:09.460
missed trapping those errors
and handling those errors,

00:35:09.460 --> 00:35:10.918
but they're here,
and now I can use

00:35:10.918 --> 00:35:15.040
that to help troubleshoot my
application going forward.

00:35:15.040 --> 00:35:16.230
Debugging.

00:35:16.230 --> 00:35:19.070
We do Stackdriver Debugging
on App Engine, Java, Python,

00:35:19.070 --> 00:35:20.150
Node.js, and Ruby.

00:35:20.150 --> 00:35:23.350
Also available via an SDK
on Java, Python, and Go.

00:35:26.000 --> 00:35:29.030
API manager, so we have
a lot of APIs at Google--

00:35:29.030 --> 00:35:32.240
Maps, and YouTube, and
all our various services.

00:35:32.240 --> 00:35:34.870
With Google Cloud Platform, you
can use default credentials,

00:35:34.870 --> 00:35:36.620
so you don't have to
set up all the certs.

00:35:36.620 --> 00:35:38.994
You're going to say, use my
project's default credentials

00:35:38.994 --> 00:35:40.250
to use this API.

00:35:40.250 --> 00:35:44.640
And it makes hooking up a lot
of this stuff a lot easier.

00:35:44.640 --> 00:35:47.040
Machine learning, all
right, finishing up.

00:35:47.040 --> 00:35:49.890
People that are doing
machine learning,

00:35:49.890 --> 00:35:51.750
first off, there are
a lot more talks today

00:35:51.750 --> 00:35:55.240
so they might address
this in much more detail.

00:35:55.240 --> 00:35:57.704
But typically, you
want to use a model,

00:35:57.704 --> 00:36:00.120
you want to create a model,
or you want to extend a model.

00:36:00.120 --> 00:36:02.940
If you're using a model, we have
a number of models available.

00:36:02.940 --> 00:36:06.630
Vision API, Natural Language
API, Speech API, all of them

00:36:06.630 --> 00:36:09.690
use our machine learning
models without you having

00:36:09.690 --> 00:36:10.950
to already train the set.

00:36:10.950 --> 00:36:13.260
We already have it, and we
have features and functions

00:36:13.260 --> 00:36:15.079
that are available.

00:36:15.079 --> 00:36:16.620
If you want to train
your own models,

00:36:16.620 --> 00:36:19.290
we have this thing
called Cloud ML Engine,

00:36:19.290 --> 00:36:21.070
which is managed TensorFlow.

00:36:21.070 --> 00:36:23.290
Which you might say, what flow?

00:36:23.290 --> 00:36:23.790
TensorFlow.

00:36:23.790 --> 00:36:26.524
TensorFlow is an open
source ML library

00:36:26.524 --> 00:36:27.690
that helps you build models.

00:36:27.690 --> 00:36:30.365
You can also take your models
and extend them in TensorFlow.

00:36:30.365 --> 00:36:32.490
And it allows you to compete
with the various level

00:36:32.490 --> 00:36:38.520
of either CPU, GPU, or now, in
the near future, TPU resources.

00:36:38.520 --> 00:36:41.430
So this is a tool that you
can use to build your model,

00:36:41.430 --> 00:36:46.680
whether it's on your own laptop,
or on prem, or in our cloud.

00:36:46.680 --> 00:36:48.720
You can then take your
models and run them

00:36:48.720 --> 00:36:52.860
on Cloud ML Engine, which
is a managed TensorFlow.

00:36:52.860 --> 00:36:55.740
And it has some smart defaults
and can do some self-tuning

00:36:55.740 --> 00:36:57.777
to help you run better,
and it's portable.

00:36:57.777 --> 00:37:00.360
Anything you do there, you'll
be able to move onto your laptop

00:37:00.360 --> 00:37:03.220
and go further with.

00:37:03.220 --> 00:37:06.150
All right, with that,
hopefully, we've

00:37:06.150 --> 00:37:08.650
re-righted the table that we
knocked over in the beginning

00:37:08.650 --> 00:37:10.960
when we saw that giant
list of all of our stuff.

00:37:10.960 --> 00:37:13.570
But make note about it,
there is a lot of stuff here.

00:37:13.570 --> 00:37:17.230
I talked about over 40 products
and I had 40 minutes to do it.

00:37:17.230 --> 00:37:21.190
So that's why I was sort of
machine gun going through it.

00:37:21.190 --> 00:37:22.030
There's a lot there.

00:37:22.030 --> 00:37:25.300
My hope is that
you now could look

00:37:25.300 --> 00:37:28.810
at this list of all of
these crazy hexagons

00:37:28.810 --> 00:37:32.380
and find solutions to
your problems there.

00:37:32.380 --> 00:37:37.150
If you need more info and you
want to know where to go next,

00:37:37.150 --> 00:37:39.610
first off, Id say,
we have a free trial.

00:37:39.610 --> 00:37:42.310
Cloud.google.com/free.

00:37:42.310 --> 00:37:45.850
Sign up, $300 for
12 months, which you

00:37:45.850 --> 00:37:48.220
can run a lot of stuff on.

00:37:48.220 --> 00:37:51.280
We also have a free
tier that like,

00:37:51.280 --> 00:37:56.050
if you only spin up the
smallest VM we have, it's free.

00:37:56.050 --> 00:37:58.496
If you spin up two, you have
to pay for the second one.

00:37:58.496 --> 00:38:00.370
And then if you have
questions about anything

00:38:00.370 --> 00:38:03.460
I said here, because I
won't have time for Q&amp;A,

00:38:03.460 --> 00:38:05.020
I want to direct
you to, on the map,

00:38:05.020 --> 00:38:06.978
there's this yellow line
from where you are now

00:38:06.978 --> 00:38:10.750
on stage five, all the way
up to Dome H or Sandbox

00:38:10.750 --> 00:38:16.420
H. That is where a lot of the
Cloud people are hanging out.

00:38:16.420 --> 00:38:19.297
You can see a couple of demos of
a couple of things we've done,

00:38:19.297 --> 00:38:20.380
and you can ask questions.

00:38:20.380 --> 00:38:21.880
And that's where
I'll be if you have

00:38:21.880 --> 00:38:24.160
any questions about anything
I sped through here.

00:38:24.160 --> 00:38:25.220
That's where I'll be.

00:38:25.220 --> 00:38:28.660
So with that I will say
thank you very much and hope

00:38:28.660 --> 00:38:31.550
you enjoy the rest of I/O.

00:38:31.550 --> 00:38:35.620
[MUSIC PLAYING]

