WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.359
&gt;&gt; SEIDEL: So, this talk is a little bit longer.
We're going to go in to the guts of WebKit.

00:00:06.359 --> 00:00:09.309
If you guys are sitting with laptops, you
can follow along because we're going to go

00:00:09.309 --> 00:00:16.480
through some of sources. I am Eric. I've been
here at Google for a couple of years. I work

00:00:16.480 --> 00:00:20.789
in the San Francisco office which is why many
of you have never seen me before. And I've

00:00:20.789 --> 00:00:28.630
been with WebKit since '05 and don e lots
of stuff in WebKit. So, WebKit, for those

00:00:28.630 --> 00:00:32.180
of you who are just Chrome people and don't
actually know what's way under the covers;

00:00:32.180 --> 00:00:37.500
it's the engine that actually draws the WebPages.
It's almost 2 million lines of code, most

00:00:37.500 --> 00:00:44.160
of it is written in C++, it's used everywhere.
About 10 percent of the total web browser

00:00:44.160 --> 00:00:50.330
share is covered by WebKit-based browsers
at this point. We have 150 committers, 80

00:00:50.330 --> 00:00:55.210
of which are active. That's actually a number
that's been growing very quickly in the last

00:00:55.210 --> 00:01:02.190
couple of years. And 40 of those work here
at Google, 6 of us are reviewers. So, who

00:01:02.190 --> 00:01:09.040
uses WebKit? This list actually goes on and
on and on, but every browser that's not Fire

00:01:09.040 --> 00:01:18.480
Fox, IE, or Opera is a WebKit-based browser,
basically. So, WebKit started back from KDE

00:01:18.480 --> 00:01:26.710
KHTML who's forked by Apple in 2001, open
sourced again in '05, there's no official

00:01:26.710 --> 00:01:35.230
releases that come from WebKit itself, but
they do provide nightlies. So, WebKit is somewhat

00:01:35.230 --> 00:01:40.860
of a confusing term because it refers both
of the project and a library itself called

00:01:40.860 --> 00:01:47.520
WebKit. That thin library that sits on top
that you actually linked against is what is

00:01:47.520 --> 00:01:51.380
responsible for interacting with the operating
system. WebCore which is most of what we're

00:01:51.380 --> 00:01:56.229
going to be talking about today is where all
the rendering actually happens. And then,

00:01:56.229 --> 00:02:01.620
there's a JavaScript library below that which
is normally JavaScriptCore but we use a V8

00:02:01.620 --> 00:02:08.440
profile. So, here's a pictorial representation,
the platform directory which you see there

00:02:08.440 --> 00:02:13.941
in gray is all the hooks for talking to the
operating system which Darren talked about

00:02:13.941 --> 00:02:24.920
some in his talk. So, what does a browser
do? A lot of things. This is a few of them.

00:02:24.920 --> 00:02:32.030
And we're going to talk about these today,
mostly from a 30 thousand foot perspective

00:02:32.030 --> 00:02:38.180
but we'll show enough of the guts that you
can--well, at least, be dangerous. So, the

00:02:38.180 --> 00:02:41.700
first thing that we're going to talk about
is loading. This is how we actually get the

00:02:41.700 --> 00:02:48.350
data into our engine, so we can do stuff with
it. Loading is unfortunately ridiculously

00:02:48.350 --> 00:02:55.800
complicated. It's split, part of the responsibility
of webs up at the platform layer and part

00:02:55.800 --> 00:03:01.130
of the responsibility of webs in WebCore itself.
Most of the code is inside WebCore loader

00:03:01.130 --> 00:03:06.630
if you're playing along at home. There are
some that's in WebCore platform network and

00:03:06.630 --> 00:03:11.420
then there's the FrameLoaderClient which is
the primary way in which WebCore talks back

00:03:11.420 --> 00:03:18.730
to the WebKit layer to actually do the network
request. And then, there are two types of

00:03:18.730 --> 00:03:23.849
loads inside WebKit. One is for loading an
actual page, a frame, and the other is for

00:03:23.849 --> 00:03:28.090
loading everything else that the frame depends
on. And these go through completely separate

00:03:28.090 --> 00:03:35.220
paths inside the WebKit. So, loading a frame;
most of this is in one huge monolithic class

00:03:35.220 --> 00:03:42.020
called FrameLoader, it touches a bunch of
other pieces but that's where most it resides.

00:03:42.020 --> 00:03:48.160
There's three phases that you care about if
you're looking at this from a high level.

00:03:48.160 --> 00:03:55.260
The first of which is the policy stage, this
is where WebCore kicks off initial load. We

00:03:55.260 --> 00:04:00.769
go into the policy question. We ask the embedder
WebKit, Do you want to even--do you want to

00:04:00.769 --> 00:04:06.130
allow us to open this window? This is a pop-up,
shall we block it? This is where we as Chromium

00:04:06.130 --> 00:04:12.400
make a decision. You are navigating to a tab
that is no longer in the same domain. So,

00:04:12.400 --> 00:04:17.199
you're in GMail and you click on an apple.com
link. We're going to fork up a new process

00:04:17.199 --> 00:04:23.889
during this policy decision stage. The second
stage is the provisional phase and this is

00:04:23.889 --> 00:04:28.360
where we make a decision as to whether this
is a download, so, we're just--we're going

00:04:28.360 --> 00:04:31.289
to shoot the process that we just created
in the head and we're going to let the browser

00:04:31.289 --> 00:04:36.759
hand up the download, or whether we're going
to commit this load and this is going to replace

00:04:36.759 --> 00:04:42.409
the current contents. So, you click on the
link and if it's a committed load, it replaces

00:04:42.409 --> 00:04:47.430
the contents of the page. And then once you
get committed, that's what you actually start

00:04:47.430 --> 00:04:52.069
parsing and this is where the actual data
transfer incremental display, that sort of

00:04:52.069 --> 00:04:55.469
thing happens.
&gt;&gt; Is creating a new process as part of WebCore

00:04:55.469 --> 00:04:59.800
or just part of Chromium content?
&gt;&gt; SEIDEL: The creating a new process is all

00:04:59.800 --> 00:05:06.789
part of Chromium. I was just identifying that
as that's where we hook in. Loading a Subresource,

00:05:06.789 --> 00:05:12.710
this is done by interface called DocLoader
and this is where it hits the WebCore in memory

00:05:12.710 --> 00:05:19.259
cache called cache. DocLoader is a device
that you hand it the URL and it gives you

00:05:19.259 --> 00:05:23.189
back a CachedResource. And it mans to talk
to loader to do that, you may have to talk

00:05:23.189 --> 00:05:27.259
to the cache do that, but in the end it gives
you a CachedResource. And the CachedResource

00:05:27.259 --> 00:05:31.779
is what actually handles all the callbacks
and produces an object in the end that you

00:05:31.779 --> 00:05:40.949
can deal with like a font or an image. So
that's a simplified, very simplified view

00:05:40.949 --> 00:05:48.180
of loading. The next stage that we go through
is Parsing. This is where we make a DOM Tree.

00:05:48.180 --> 00:05:52.360
So, there's several parsers inside WebKit,
but the two that you care about are the HTML

00:05:52.360 --> 00:05:59.440
Parser and the XML Parser. We take the data
stream that comes off of the network and we

00:05:59.440 --> 00:06:04.000
feed it in to a Tokenizer, either the HTML
Tokenizer of the XML Tokenizer. And then from

00:06:04.000 --> 00:06:11.870
those, we parse it. The XML Tokenizer is actually
with XML under the covers at least under the

00:06:11.870 --> 00:06:17.530
most platforms, and so they've actually hands
us SAX-style callbacks and we don't have to

00:06:17.530 --> 00:06:24.409
have separate parsing logic. At this time
we also do things like handling DNS Prefetch,

00:06:24.409 --> 00:06:28.419
we do pre-load scanning for starting image
loads and CSS loads before we've actually

00:06:28.419 --> 00:06:38.899
finished parsing the entire page, and this
is when the XSS-Auditor runs. Okay, so, in

00:06:38.899 --> 00:06:42.129
order to talk any further, we need to talk
about some of the data structures that WebKit

00:06:42.129 --> 00:06:48.559
actually builds from this data that we just
parsed off the network. The first of which

00:06:48.559 --> 00:06:56.969
is the DOM Tree in this forest of trees, lots
of trees. The DOM Tree we'll talk about, we'll

00:06:56.969 --> 00:07:00.990
talk about the ones that are use in the rendering
tree which Darren mention to some of his talk

00:07:00.990 --> 00:07:05.330
and Brent mentioned some of this in his talk
and then Line Layout of the actual lines of

00:07:05.330 --> 00:07:13.749
the page. So, this is the stages that we go
through, we load, we parse, produce a DOM

00:07:13.749 --> 00:07:19.300
Tree—we attach that DOM Tree to produce
a render tree, we resolve style on that tree

00:07:19.300 --> 00:07:26.289
and then we layout the tree and then we paint
and things that Brent covered in his talk.

00:07:26.289 --> 00:07:33.089
So, the DOM Tree--you've seen DOM APIs in
Javascript, document.createelement, that sort

00:07:33.089 --> 00:07:42.249
of thing—it is a tree of values of the HTML
page--element nodes, attribute nodes, CSS

00:07:42.249 --> 00:07:51.969
Stylesheets. An example of a DOM Tree, you
can see how the HTML on the left maps to actual

00:07:51.969 --> 00:08:03.250
WebCore elements on the right.
The DOM Tree is one piece, the rendering tree

00:08:03.250 --> 00:08:12.020
is what we produce from the DOM Tree. This
we hold all the style information, links to

00:08:12.020 --> 00:08:21.879
things like plug-ins, shadow nodes for forms—these
is what we actually layout results style on

00:08:21.879 --> 00:08:24.870
and final tell the paint
&gt;&gt; [INDISTINCT]

00:08:24.870 --> 00:08:27.539
&gt;&gt; SEIDEL: I'm sorry?
&gt;&gt; [INDISTINCT]

00:08:27.539 --> 00:08:32.260
&gt;&gt; SEIDEL: When you click on the link, what
did you actually click on? When you hover

00:08:32.260 --> 00:08:35.880
over a page, where did the hover event go?
So, you have to figure out what node that

00:08:35.880 --> 00:08:43.840
hits. So, yes. So, within what we refer to
as the rendering tree—there are actually

00:08:43.840 --> 00:08:55.510
four trees that we care about; RenderObjects,
RenderStyle, RenderLayers, and Line Boxes.

00:08:55.510 --> 00:09:06.320
The RenderObject Tree is everything we need
to paint, it is hung off of the DOM Tree and

00:09:06.320 --> 00:09:12.160
it's only created for rendered content. So,
if you say, display none [INDISTINCT]—the

00:09:12.160 --> 00:09:16.260
entire rendered tree that might exist underneath
that is gone, we never create one for it.

00:09:16.260 --> 00:09:20.840
If you display on plug-in, we never bother
to load the plug-in because it never gets

00:09:20.840 --> 00:09:29.030
a render. This is what a RenderObject class
would look like—if you have the source in

00:09:29.030 --> 00:09:34.380
front of you, there's a lot more methods than
this but you can see it knows how to layout

00:09:34.380 --> 00:09:41.990
itself, it knows how to paint, it can give
you the size of the tree underneath it, it

00:09:41.990 --> 00:09:46.390
points back to the DOM tree, that's what the
node is, it hangs style off of it and it has

00:09:46.390 --> 00:09:55.590
layers that hang off of it. We'll talk about
layers in a minute. Some example RenderObjects,

00:09:55.590 --> 00:10:02.250
blocks, inlines, images, text, there's some
base classes for the render tree, one of which

00:10:02.250 --> 00:10:08.360
is the BoxModelObject which is basically everything
that follows the CSS rules is a BoxModelObject,

00:10:08.360 --> 00:10:19.810
everything that follow SVGs rules which are
completely separate inherit from the SVG Tree.

00:10:19.810 --> 00:10:26.051
Here's an example of mapping, on the left
hand side we see a DOM Tree, on the right

00:10:26.051 --> 00:10:35.700
hand side we see the render tree so DivElement
maps to a block, the text maps to render text.

00:10:35.700 --> 00:10:42.250
So, going back to our set of stages, we've
now talked about loading, getting the source

00:10:42.250 --> 00:10:47.900
text, we've created a DOM Tree from it. We've
created a RenderObject Tree from it. Now,

00:10:47.900 --> 00:10:55.630
we are going to talk about resolving style
and layout of this tree. So, RenderStyles

00:10:55.630 --> 00:11:03.970
are the computed style values. So, when you
do Divstyle equals background color red, that

00:11:03.970 --> 00:11:10.290
is computed into a color value with an RGB
value that's stored off of this render style,

00:11:10.290 --> 00:11:15.770
so it's ready to paint. There's a whole phase
about resolving style--that would be another,

00:11:15.770 --> 00:11:21.900
at least 10 minutes of talk and we are going
to skip over that but this is where the style

00:11:21.900 --> 00:11:29.200
information is held and we use for layout.
Two things are important to point out here

00:11:29.200 --> 00:11:36.490
is that RenderObjects can share the same styles
for memory efficiency but it means that say,

00:11:36.490 --> 00:11:39.870
if you're hacking in at WebCore, you can't
just grab a style and start modifying it because

00:11:39.870 --> 00:11:45.560
somebody else might be using it. Also styles,
again for memory efficiency, inherit from

00:11:45.560 --> 00:11:51.030
their parent and commonly share data members.
So, like when we look at the actual RenderStyle

00:11:51.030 --> 00:11:56.120
class, you see down at the bottom the DataRef,
inheritedData, you probably don't have your

00:11:56.120 --> 00:12:01.700
own inheritedData object, you point to your
parents. So, as you can see here, the render

00:12:01.700 --> 00:12:07.061
style class, commonly you instantiate them
by inheriting it from a RenderStyle and then

00:12:07.061 --> 00:12:12.990
it has a zillion of these access or methods
to get the color, to set the color, the original

00:12:12.990 --> 00:12:17.940
color, to get the shadow value, to set the
shadow value, the original shadow value all

00:12:17.940 --> 00:12:30.510
those. Uh-hmm.
&gt;&gt; When you say, it's owned by the render

00:12:30.510 --> 00:12:32.490
tree, does that mean you RenderObjects will
hold the reference to do RenderStyles and

00:12:32.490 --> 00:12:34.871
then apply to the object or something.
&gt;&gt; SEIDEL: The Rendering tree will create—I'm

00:12:34.871 --> 00:12:38.430
sorry—the rendering tree will create styles
and hold pointers to them, yes.

00:12:38.430 --> 00:12:44.990
&gt;&gt; Do you RenderObject Tree [INDISTINCT]
&gt;&gt; SEIDEL: Technically the method is actually

00:12:44.990 --> 00:12:50.050
in the DOM Tree but the styles are held off
of the Rendering Tree. Yes.

00:12:50.050 --> 00:12:53.350
&gt;&gt; Are the RenderStyleObjects immutable since
they're shared?

00:12:53.350 --> 00:12:58.070
&gt;&gt; SEIDEL: The RenderStyleObjects are not
immutable but they are shared.

00:12:58.070 --> 00:13:03.250
&gt;&gt; So, you have to be careful to do all the
changing before you...

00:13:03.250 --> 00:13:08.930
&gt;&gt; SEIDEL: You have to clone one if you for
some reason are modifying a style outside

00:13:08.930 --> 00:13:13.570
the CSS system, normally you would just tell
the CSS system, I'm changing this attribute

00:13:13.570 --> 00:13:18.101
or whatever and it would take care of making
style shared correctly et cetera. But if you

00:13:18.101 --> 00:13:21.009
are manually overwriting a style, you need
to clone it first.

00:13:21.009 --> 00:13:27.600
&gt;&gt; Okay.
&gt;&gt; SEIDEL: So, okay. So, we've covered all

00:13:27.600 --> 00:13:32.810
the way to style resolution, now let's talk
about layout. We've covered RenderObjects,

00:13:32.810 --> 00:13:38.640
RenderStyles, there's RenderLayers which is
another sparse tree which is connected to

00:13:38.640 --> 00:13:48.570
the RenderObject Tree. Layers are for things
like transparency, scrolling, the whole clipping,

00:13:48.570 --> 00:13:54.010
that sort of thing. And they actually end
up as textures on the iPhone, so on the graphic

00:13:54.010 --> 00:14:02.840
card and we use a similar API for passing
from... Brent talked about passing textures

00:14:02.840 --> 00:14:13.940
from the render to the browser that uses CG
layer. We use something similar here in WebCore.

00:14:13.940 --> 00:14:20.590
Here's some example HTML, an annotation of
where the layers are. So you can see when

00:14:20.590 --> 00:14:27.840
we give that span an opacity it gets a layer.
And we give the div overflow, it gets another

00:14:27.840 --> 00:14:35.910
layer. And we create a tree of these. So more
of these--more of these individual elements

00:14:35.910 --> 00:14:46.320
have render objects than those that have layers.
Another tree that's used inside the Rendering

00:14:46.320 --> 00:14:53.960
Tree is the LineBox Tree. So when we actually
lay out the lines of a block, we use a separate

00:14:53.960 --> 00:14:59.720
data structure called the LineBox Tree to
do that. This is what actually does the text

00:14:59.720 --> 00:15:07.620
flow. And again, there's a--it's a sparse
mapping, you might have--you create a render

00:15:07.620 --> 00:15:12.560
text which holds the actual text content,
but many lines are going to point back into

00:15:12.560 --> 00:15:22.670
that text. So here is an example. We have
a Rendering Tree on the left-hand side, and

00:15:22.670 --> 00:15:34.131
then for this Rendering Tree we create InlineBoxes
in the BoxTree. We get one RootLineBox for

00:15:34.131 --> 00:15:39.860
every line and then InlineBoxes with the net
line. So every image--it's laid down in a

00:15:39.860 --> 00:15:47.710
line will get its own InLineBox, every tag
effectively.

00:15:47.710 --> 00:15:59.040
So here's an example of one RenderText being
split into two line boxes because it wraps.

00:15:59.040 --> 00:16:06.300
One other thing that's also held in the Rendering
Tree are Shadow Trees. These are DOM Trees

00:16:06.300 --> 00:16:12.100
which are held off with the Rendering Tree,
which is a little confusing because normally

00:16:12.100 --> 00:16:15.820
the DOM Tree holds the Rendering Tree, but
here is a Rendering Tree which is holding

00:16:15.820 --> 00:16:20.990
a DOM Tree. And this exists for things that
are hidden from JavaScript. When you have

00:16:20.990 --> 00:16:27.440
a form control, those are actually rendered
by the engine, by the WebCore engine, but

00:16:27.440 --> 00:16:32.170
those are not exposed. Their DOM Trees, at
least, are not exposed to JavaScript, and

00:16:32.170 --> 00:16:37.040
so there's a held off the Rendering Tree.
And then we render them using special theme

00:16:37.040 --> 00:16:40.900
images from the OS like, in this example,
down at the bottom, that button is actually

00:16:40.900 --> 00:16:46.300
using Mac OS 10s, underlying button drawing
routines, but we're doing so. We're making

00:16:46.300 --> 00:16:54.910
the paint call back from WebCore. Okay, so
that's... We've talked about the data structures

00:16:54.910 --> 00:17:03.370
that get us to the point where we can actually
do a layout. Now, let's talk about a layout.

00:17:03.370 --> 00:17:07.949
And there's actually a really good example
of what layout looks like, thanks to our friends

00:17:07.949 --> 00:17:20.939
at Mozilla. This is an example of Gecko laying
out Google.com. You can see those are rects

00:17:20.939 --> 00:17:29.299
representing the Rendering Tree. And it's
creating them all and then it's moving them

00:17:29.299 --> 00:17:36.509
into place. So reflow is what Gecko calls
it. We call it layout, but they're very similar.

00:17:36.509 --> 00:17:44.769
Gecko also has a DOM Tree, they also have
a Rendering Tree. They also have a layer concept.

00:17:44.769 --> 00:17:47.831
So that's actually what we're doing under
the covers. Well, that's what it looks like

00:17:47.831 --> 00:17:55.210
to the human eye. So, layout is all done from
this layout method. The first thing we do

00:17:55.210 --> 00:18:03.999
is we save the old repaint rect, we pull in
any changes from the DOM, we then go and layout

00:18:03.999 --> 00:18:14.290
our children, and we repaint the difference
using the metrics that our parents had.

00:18:14.290 --> 00:18:24.789
&gt;&gt; [INDISTINCT]
&gt;&gt; I'm sorry? So, we can ask at the start

00:18:24.789 --> 00:18:31.090
of our layout method, "What is our current
bounce?" and we shove those off into a rect.

00:18:31.090 --> 00:18:35.379
And then we go and do the layout, and then
we ask again, "What is our current bounce?"

00:18:35.379 --> 00:18:38.710
And whatever the difference is, we pass that
to the system and save. Obviously, something

00:18:38.710 --> 00:18:49.899
changed, so please repaint it. But the general
layout method is agnostic to these. So how

00:18:49.899 --> 00:18:56.289
you get a layout because a layout is actually
done on demand. It's not--it's not done asynchronously

00:18:56.289 --> 00:19:02.480
in that it's done on some other thread, but
you don't generally say, "Oh, layout now."

00:19:02.480 --> 00:19:06.730
You say, "I need a layout," and then by the
time we next paint, paint says, "Oh, make

00:19:06.730 --> 00:19:11.629
sure you're layed out before we paint." So
you mark something as "Needing Layout." Say,

00:19:11.629 --> 00:19:16.220
you're in the DOM Tree and you're parsing
some new value, you tell the Rendering Tree-you

00:19:16.220 --> 00:19:22.869
tell your renderer... By the way, you need
to re-layout before you ever paint again.

00:19:22.869 --> 00:19:28.220
There are a few times that we do immediate
layout that you as a webpage author would

00:19:28.220 --> 00:19:32.860
notice or someone working on Chrome, the new
tab page or something like that. And that's

00:19:32.860 --> 00:19:37.919
when you access properties that require a
layout like an offsetHeight in order to tell

00:19:37.919 --> 00:19:41.529
you the height of an object, just like that
Gecko example. You have to compute where the

00:19:41.529 --> 00:19:49.179
heck the object is, and that's what the layout
does. So, an overview for you--what we covered

00:19:49.179 --> 00:19:55.090
in our structures and our layout, Parsing
produces the DOM Tree, we build the Rendering

00:19:55.090 --> 00:19:59.009
Tree from the DOM. The Rendering Tree has
the four parts that we talked about. These

00:19:59.009 --> 00:20:05.019
are the objects, the layers, the styles, and
the lines. And then we do layout lazily on

00:20:05.019 --> 00:20:13.159
demand. So, one more time back to our little
diagram, we've covered all of these, and we

00:20:13.159 --> 00:20:20.720
will talk briefly about painting. This was
entirely covered by Brett, so we're just going

00:20:20.720 --> 00:20:28.809
to touch on it here. When we paint, we paint
the Rendering Tree, and we actually take the

00:20:28.809 --> 00:20:33.509
root layer of the Rendering Tree and we tell
it to paint itself, and we tell it to do so

00:20:33.509 --> 00:20:41.929
12 times because that's what CSS 2.1 requires.
There's a whole bunch of different phases,

00:20:41.929 --> 00:20:49.080
and painting is actually done incrementally.
I got some strange looks there, people don't

00:20:49.080 --> 00:20:53.399
believe me. Well, we actually--we paint first
backgrounds, and then we'll paint foregrounds,

00:20:53.399 --> 00:21:03.129
and then we paint underlines, it's a whole--you
can read the spec. Yeah. So Only Render classes

00:21:03.129 --> 00:21:09.080
paint, and as Brett talked about, there's
a GraphicsContext abstraction, that is where

00:21:09.080 --> 00:21:15.110
we actually handle talking with the OS bits.
And then, RenderTheme exists for every different

00:21:15.110 --> 00:21:24.679
platforms where it handles things like what
should my form control look like. So that

00:21:24.679 --> 00:21:27.930
was the rendering tree and the DOM Tree. We're
going to talk briefly about a couple of other

00:21:27.930 --> 00:21:32.789
things that WebCore does, one of which is
HTML Editing. If you ever used your iPhone,

00:21:32.789 --> 00:21:38.480
all of the text entry in there is HTML Editing
inside WebCore, they're written in mail.app.

00:21:38.480 --> 00:21:42.019
It's all, I mean, if you've ever written in
g-mail, which you do every day, the rich text

00:21:42.019 --> 00:21:49.070
editing is all done by WebCore if you're using
Chrome. So things that fall under the category

00:21:49.070 --> 00:21:53.989
of Hit Testing, oh, I'm sorry, of editing,
Hit Testing being one. We find out what is

00:21:53.989 --> 00:22:00.639
actually under the mouse plane. Handling selection,
handling focus, doing execCommands, undo/redo,

00:22:00.639 --> 00:22:08.730
serialization, copy/paste. Hit Testing works
by we start at the root layer just like painting,

00:22:08.730 --> 00:22:16.850
and we walk up from the root asking each RenderObject
does this point fall within inside your bounds,

00:22:16.850 --> 00:22:23.009
and if it does, and it hands us bac itself
or its associated node. There are multiple

00:22:23.009 --> 00:22:29.299
phases to Hit Testing because you might hit
test backgrounds or you might hit test foregrounds

00:22:29.299 --> 00:22:34.200
for different purposes like a mouse over,
only cares about backgrounds. But if you are

00:22:34.200 --> 00:22:39.539
actually clicking on a link, you only want
to actually click the text on the link. You

00:22:39.539 --> 00:22:43.761
hit test all the time in a web engine. Every
time you move a mouse, you're Hit Testing

00:22:43.761 --> 00:22:54.650
at least once. Selection is handled through
a few abstractions. The easiest to think about

00:22:54.650 --> 00:23:00.000
is just positionForPoint. We, when you click
to figure out where the heck you actually

00:23:00.000 --> 00:23:06.460
clicked in the text content, we do a Hit Test
to find out what node, and then we find the

00:23:06.460 --> 00:23:12.639
closest adjacent character break, and that's
positionForPoint. VisiblePosition is an abstraction

00:23:12.639 --> 00:23:17.590
that we use to hold a position in the DOM
that represents a position that a user could

00:23:17.590 --> 00:23:23.059
get to. Not just a range or a node offset
pair, but actually one that a user could click

00:23:23.059 --> 00:23:31.460
on. And then Selection is one of the 12 paint
phases. EditCommands, this is where we do

00:23:31.460 --> 00:23:39.840
all the editing logic. We have some examples
at the bottom. We build compoundable command

00:23:39.840 --> 00:23:45.620
so when you type, say, you type five characters,
you wait a second, you type five more, those

00:23:45.620 --> 00:23:51.179
all get into one command group, so when you
undo, it undoes the whole slew, depending

00:23:51.179 --> 00:23:58.159
on your platform. Here's an example of an
EditCommand. You apply the command, you Unapply,

00:23:58.159 --> 00:24:03.669
you Reapply, this is for Undo/Redo. But if
you're implementing a specific command, you

00:24:03.669 --> 00:24:08.440
would just implement these methods. EditCommands
know what their selection should look like

00:24:08.440 --> 00:24:20.019
before and after for doing Undo/Redo, and
they also form trees. We let the OS handle

00:24:20.019 --> 00:24:30.139
Undo/Redo but we actually execute the Undo/Redo
when we're told to. This is all built Off

00:24:30.139 --> 00:24:33.869
of EditCommands. One last thing we should
talk about before we get to Q and A is the

00:24:33.869 --> 00:24:38.859
actual JavaScript DOM Bindings. So when I
originally wrote this talk which was for the

00:24:38.859 --> 00:24:43.970
Wave team, there's confusion as to what's
provided by the JavaScript engine versus what's

00:24:43.970 --> 00:24:51.010
provided by WebCore, you as a Chrome engineered
might as well one and the same. DOM Bindings

00:24:51.010 --> 00:24:56.359
are how we take this DOM Tree that we talked
about an expose it to different languages.

00:24:56.359 --> 00:25:03.399
Here, the example language is JS, Objective-C,
COM C++. We take IDL files or Web IDL as they

00:25:03.399 --> 00:25:10.119
are now called, and we generate some code
using a bunch of Perl scripts, we instantiate

00:25:10.119 --> 00:25:15.409
these objects and we cache them, and WebCore
manages their lifetime by keeping them around

00:25:15.409 --> 00:25:22.580
until they're no longer needed. So here's
an example IDL file. We run a Perl script

00:25:22.580 --> 00:25:29.600
across this IDL file and generate a bunch
of C++. And that would be for JavaScript or

00:25:29.600 --> 00:25:34.399
we generate some other C++ that would be COM,
or generate some other C++ that will be for

00:25:34.399 --> 00:25:42.049
JNI bindings. Objects that are provided by
the JavaScript Engine itself, all the basic

00:25:42.049 --> 00:25:48.499
permanent types, access of prototype, up to
callee chain, getters and setters, insiders,

00:25:48.499 --> 00:25:56.070
twoStrings. Things that WebCore provides are
all of these things you actually think of

00:25:56.070 --> 00:26:04.039
as the DOM.
That's pretty much all of the talk. We can

00:26:04.039 --> 00:26:13.380
talk briefly about bugs. You guys should know
how to file bugs at this point. Basically,

00:26:13.380 --> 00:26:17.249
you file them at bugs.WebKit.org, then we
fix them because as--although we have a lot

00:26:17.249 --> 00:26:21.580
of commanders here, we do know a lot of people
who work a 100% on WebKit, and so a lot of

00:26:21.580 --> 00:26:30.429
bug fixing actually happens upstream. Pam
covered how to write a test case. Examples

00:26:30.429 --> 00:26:35.529
of what a good test case looks like. These
are resources for how you find out more about

00:26:35.529 --> 00:26:41.679
WebKit. You see what WebKit implements. You
can actually look at IDL files at the .in

00:26:41.679 --> 00:26:52.509
files. How you contact the WebKit folks including
some Google specific resources including the

00:26:52.509 --> 00:27:02.320
last one which reaches the Safari team. And
that's it. So questions, comments, concerns?

00:27:02.320 --> 00:27:13.230
&gt;&gt; 
So two slides back, at the bottom, you mentioned

00:27:13.230 --> 00:27:16.470
something I'd never heard of before, what's
an in file?

00:27:16.470 --> 00:27:24.370
&gt;&gt; SEIDEL: So these are used also in more
Perl Scripts for creating--these are used

00:27:24.370 --> 00:27:29.850
for creating atomic string caches. Atomic
String is a type of string in WebKit that

00:27:29.850 --> 00:27:39.750
we only have one of. Atomic String caches
out of attributes and element names. So if

00:27:39.750 --> 00:27:43.880
you are a webpage implementer, and want to
know what elements WebKit supports, you can

00:27:43.880 --> 00:27:47.840
look that at .in files. You want to know what
attributes or what properties and elements

00:27:47.840 --> 00:27:52.640
its supports you can look at .in files.
&gt;&gt; Okay. Thanks. The other question I had

00:27:52.640 --> 00:27:58.009
is, you said in talking about editing with
Undo/Redo you let the OS handle Undo/Redo.

00:27:58.009 --> 00:28:02.649
What do you mean by that?
&gt;&gt; SEIDEL: So when don't handle--we don't

00:28:02.649 --> 00:28:12.330
catch the Command Z, and we let the OS level
stack management. We pass to Mac OS10 and

00:28:12.330 --> 00:28:20.320
say, "we have an undo event that just happened"
added to your undo stack. And it manages to

00:28:20.320 --> 00:28:25.759
the menus for us et cetera. WebCore itself
doesn't deal with that. The WebKit Layer takes

00:28:25.759 --> 00:28:30.850
care of that.
&gt;&gt; Okay, but we are actually the ones that

00:28:30.850 --> 00:28:36.639
are implementing the commands actions that
happened when you have [INDISTINCT].

00:28:36.639 --> 00:28:49.879
&gt;&gt; SEIDEL: Correct, those edit commands do
those, I think your mike just died.

00:28:49.879 --> 00:28:54.639
Any other questions from that torrent of information?
Great.

00:28:54.639 --> 00:29:03.270
&gt;&gt; So you talked a little bit about that a
bunch of those trees aren't actually built

00:29:03.270 --> 00:29:09.970
if, you know, say display equal, or display
is none. What exactly happens, like what's

00:29:09.970 --> 00:29:15.119
the process when display becomes, you know,
something else like block. Could you explain

00:29:15.119 --> 00:29:21.119
how those trees are then built on, you know,
on demand or whatever?

00:29:21.119 --> 00:29:29.960
&gt;&gt; SEIDEL: Okay. So, if you would change a
property, the DOM Tree has a method called

00:29:29.960 --> 00:29:35.489
parsed map attribute, just to handle attribute
pursing when you change an attribute. That

00:29:35.489 --> 00:29:41.119
would learn about the change. It would pass
it off to the style system. The style system

00:29:41.119 --> 00:29:45.869
would change the display. Notice that, "oh
my God, we need a Renderer now", it would

00:29:45.869 --> 00:29:52.309
create a renderer for the DOM object. We resolved
style for it and all of its children. We'd

00:29:52.309 --> 00:29:55.590
go through the normal process that you would
during pursing when you create that element

00:29:55.590 --> 00:30:00.439
and you attached it by creating a render for
it.

00:30:00.439 --> 00:30:07.409
&gt;&gt; Then also, what's the level of dependency
in terms of the different trees depending

00:30:07.409 --> 00:30:16.929
on the previous one. Like, do they all have
pointers bidirectionally or how does that

00:30:16.929 --> 00:30:20.399
work?
&gt;&gt; SEIDEL: The only bidirectional pointers

00:30:20.399 --> 00:30:28.470
are from the DOM tree to the Render Object
Tree. The Render Object has pointers to the

00:30:28.470 --> 00:30:33.130
Render Layers which actually do also have
pointers back to the render objects. The render

00:30:33.130 --> 00:30:37.840
objects have pointers to the render styles,
but the render styles do not have pointers

00:30:37.840 --> 00:30:46.090
back to the render objects. And the LineBoxes,
the block has a pointer to the RootLineBoxes,

00:30:46.090 --> 00:30:51.239
the liast of them. And the individual LineBox
do point back to their render objects. So,

00:30:51.239 --> 00:31:02.100
there are more bidirectionals than I initially
implant.

00:31:02.100 --> 00:31:07.099
&gt;&gt; You mentioned the issue that at times you
can query for attributes or positions which

00:31:07.099 --> 00:31:12.919
force a paint operation. Those WebCore have
the concept of a partial paints that it only

00:31:12.919 --> 00:31:17.710
does a paint or lay out sufficient to answer
the query leaving it midstream or does it

00:31:17.710 --> 00:31:23.559
require a full layout of the entire display
 – sorry if it's a dumb question.

00:31:23.559 --> 00:31:28.809
&gt;&gt; There's an open bag, I can decide it to
you if you want.

00:31:28.809 --> 00:31:35.820
&gt;&gt; SEIDEL: So, not to confuse paint and layout,
paint is actually very simple we just basically

00:31:35.820 --> 00:31:42.889
put the rendering tree to the buffer. But
lay out itself is the complicated part and

00:31:42.889 --> 00:31:48.860
we do not support incomplete layouts. We ensure
that the entire document is laid out before

00:31:48.860 --> 00:31:56.330
we will answer the question.
&gt;&gt; Yeah, there is support for noting that

00:31:56.330 --> 00:32:01.389
only part of the tree needs layout, so that
when the paint happens it will only layout

00:32:01.389 --> 00:32:05.129
that sub tree but it's somewhat limited and
it doesn't really apply for queries.

00:32:05.129 --> 00:32:13.229
&gt;&gt; Yup, but we should fix that.
&gt;&gt; So, just to be clear if I have some really,

00:32:13.229 --> 00:32:18.250
you know, node really deep in the tree and
I say like dot client web on it, is it going

00:32:18.250 --> 00:32:22.210
to have to layout the whole page?
&gt;&gt; SEIDEL: As it's currently implemented?

00:32:22.210 --> 00:32:23.549
&gt;&gt; Yes.
&gt;&gt; SEIDEL: Okay.

00:32:23.549 --> 00:32:29.999
&gt;&gt; To the most extreme, we give you the top
element which is just completely obvious from

00:32:29.999 --> 00:32:35.299
the first 12, yet the entire page down to...
&gt;&gt; SEIDEL: So, when that happens when it'

00:32:35.299 --> 00:32:39.830
just the top element that you're trying to
layout, you may have not even finished loading

00:32:39.830 --> 00:32:44.720
the entire page and in that case we will do
a layout of the three elements that are on

00:32:44.720 --> 00:32:50.470
the DOM and it won't take very long. But if
you've loaded the million element page and

00:32:50.470 --> 00:32:54.539
then you finally ask for some piece and we
haven't laid out the rest of the page, then

00:32:54.539 --> 00:32:57.060
yes, it would a while, or longer than if we
need to.

00:32:57.060 --> 00:33:03.710
&gt;&gt; There's some objects that manage object
lifecycle, so in some places there is raw

00:33:03.710 --> 00:33:06.739
pointers passed around and sometimes there's
this other objects, are there any rules as

00:33:06.739 --> 00:33:10.499
to when you should use a raw pointer and when
you should use one of these other objects.

00:33:10.499 --> 00:33:14.139
&gt;&gt; SEIDEL: So, the other objects that are
most common are what's called Ref pointers

00:33:14.139 --> 00:33:21.220
and pasref pointers and these are for indicating
that you own the object. Ref pointers are,

00:33:21.220 --> 00:33:30.320
you exposed when you own the lifecycle so,
I ask some object to get its frame pointer

00:33:30.320 --> 00:33:34.759
and its saying, "I'm holding on to the frame
for you, I'm just allowing your access to

00:33:34.759 --> 00:33:42.379
It". If it is, if it is taking a pasref pointer,
that means that it's taking ownership. And

00:33:42.379 --> 00:33:46.679
ref pointers are generally not used in arguments
and returns, ref pointers are used to maintain

00:33:46.679 --> 00:33:56.859
ownership and take care of the destructor
or letting go of the ref during destructor.

00:33:56.859 --> 00:33:59.960
&gt;&gt; Thanks.
&gt;&gt; If you want to know anything more about

00:33:59.960 --> 00:34:06.450
the pasref pointers and ref pointers and all
that stuff in WebKit, if you just Google for

00:34:06.450 --> 00:34:14.000
pasref pointerm, I think it's the first results,
it's a really, really great document on WebKit.org

00:34:14.000 --> 00:34:17.580
about when do you use different ones and that
kind of stuff and explain the history.

00:34:17.580 --> 00:34:22.040
&gt;&gt; SEIDEL: Yup.
&gt;&gt; If you have to write WebKit code, you should

00:34:22.040 --> 00:34:25.350
read that document.
&gt;&gt; Peter says, if you have to write WebKit

00:34:25.350 --> 00:34:30.910
code, you should definitely read that.
&gt;&gt; SEIDEL: Maybe like three times. Derrin

00:34:30.910 --> 00:34:37.990
Adler wrote it, as you said you Google pasref
pointer and it will be the first hit. Any

00:34:37.990 --> 00:34:40.940
other questions? Great.

00:34:40.940 --> 00:34:41.040
END OF FILE

