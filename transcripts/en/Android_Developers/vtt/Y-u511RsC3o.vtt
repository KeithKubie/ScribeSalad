WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.915
[MUSIC PLAYING]

00:00:01.915 --> 00:00:03.290
COLT MCANLIS: One
of the hang-ups

00:00:03.290 --> 00:00:06.480
of having an awesome, modern,
complex mobile application

00:00:06.480 --> 00:00:09.710
is all the stuff you've gotta
do just to get it working

00:00:09.710 --> 00:00:11.230
so the user is happy.

00:00:11.230 --> 00:00:12.940
It seems counterintuitive
then that when

00:00:12.940 --> 00:00:15.460
you do all that stuff
before the app boots up,

00:00:15.460 --> 00:00:17.379
it can actually
cause unhappy users.

00:00:17.379 --> 00:00:19.670
My name is Colt McAnlis, and
one of the common problems

00:00:19.670 --> 00:00:21.360
with slow launch
performance is doing

00:00:21.360 --> 00:00:24.570
too much stuff inside of your
application's initialization

00:00:24.570 --> 00:00:25.310
code.

00:00:25.310 --> 00:00:27.080
Remember that any time
your app launches,

00:00:27.080 --> 00:00:29.220
the system will display
a startup window

00:00:29.220 --> 00:00:32.430
until everything is up, ready,
and your app has been drawn.

00:00:32.430 --> 00:00:35.372
The longer the users are staring
at this window the less happy

00:00:35.372 --> 00:00:37.080
they generally get
with your application.

00:00:37.080 --> 00:00:40.810
Now, a common seen-all-the-time
problem that can cause this is

00:00:40.810 --> 00:00:43.090
spending too much time
in processing cycles

00:00:43.090 --> 00:00:46.320
in the initialization of
custom application objects.

00:00:46.320 --> 00:00:48.990
Now, while it's really important
to do some types of global work

00:00:48.990 --> 00:00:51.365
here, remember that the rest
of the application launching

00:00:51.365 --> 00:00:54.520
process can't move forward
until this initialization is

00:00:54.520 --> 00:00:55.160
finished.

00:00:55.160 --> 00:00:56.490
And don't get me
wrong, sometimes this

00:00:56.490 --> 00:00:57.250
isn't intentional.

00:00:57.250 --> 00:00:58.850
I mean, it's not like
you're going out of your way

00:00:58.850 --> 00:01:00.720
to put lots of work
in this object.

00:01:00.720 --> 00:01:03.610
The application subclasses
tend to become repositories

00:01:03.610 --> 00:01:05.650
for the full set
of potential things

00:01:05.650 --> 00:01:07.450
an app may need
to be initialized

00:01:07.450 --> 00:01:09.900
for all the possible
activities in your app.

00:01:09.900 --> 00:01:13.310
The result is a lot of wasted
work in the most common cases.

00:01:13.310 --> 00:01:15.120
Now, particularly
difficult in these

00:01:15.120 --> 00:01:16.650
situations is when
you get things

00:01:16.650 --> 00:01:19.890
like blocking code, garbage
collection events, disk

00:01:19.890 --> 00:01:22.020
I/O, or lots of network pings.

00:01:22.020 --> 00:01:23.852
You know, all the
heavy work that's

00:01:23.852 --> 00:01:26.060
sitting right in the middle
of the most critical step

00:01:26.060 --> 00:01:27.754
of your initialization.

00:01:27.754 --> 00:01:29.670
Now, before you run into
the weeds here trying

00:01:29.670 --> 00:01:31.190
to address these
issues, it's worth

00:01:31.190 --> 00:01:33.350
figuring out if
you have a problem.

00:01:33.350 --> 00:01:36.120
Thankfully, Android
has some tools to help.

00:01:36.120 --> 00:01:38.307
First is the method
profiling tool,

00:01:38.307 --> 00:01:40.640
which lets you graphically
see how long your application

00:01:40.640 --> 00:01:42.040
on Create method is taking.

00:01:42.040 --> 00:01:44.710
If it's going longer than
four to 10 milliseconds then

00:01:44.710 --> 00:01:46.690
it's worth exploring
more to see what

00:01:46.690 --> 00:01:48.150
might be causing that delay.

00:01:48.150 --> 00:01:50.410
And to get that information,
you can drill down

00:01:50.410 --> 00:01:53.700
by adding tracing functions
to your code, which will then

00:01:53.700 --> 00:01:55.700
show up in the next
Systrace capture

00:01:55.700 --> 00:01:57.670
that you run for
your application.

00:01:57.670 --> 00:01:58.620
And let's be clear.

00:01:58.620 --> 00:02:00.730
The solution to all
of these problems

00:02:00.730 --> 00:02:02.910
is simple-- lazy loading.

00:02:02.910 --> 00:02:05.640
See, while you can
initialization subclasses

00:02:05.640 --> 00:02:08.330
and systems for all
activities your app will need,

00:02:08.330 --> 00:02:10.960
doing all this stuff up front
is just complete overkill.

00:02:10.960 --> 00:02:13.910
So only a subset of
these items are actually

00:02:13.910 --> 00:02:15.290
critical for the main activity.

00:02:15.290 --> 00:02:17.748
And thus, those are the only
ones that should be worked on.

00:02:17.748 --> 00:02:19.710
The rest should be deferred
to some later time.

00:02:19.710 --> 00:02:21.210
Basically, this
boils down to moving

00:02:21.210 --> 00:02:23.320
things out of the critical
path of the application

00:02:23.320 --> 00:02:26.290
initialization and either
doing that work on demand,

00:02:26.290 --> 00:02:28.290
like a subclass for a
particular activity,

00:02:28.290 --> 00:02:30.040
or doing that work
in the background,

00:02:30.040 --> 00:02:33.010
allowing the results to be
returned asynchronously.

00:02:33.010 --> 00:02:35.590
See, performance is all
about user perception.

00:02:35.590 --> 00:02:37.510
And the critical path
of launching your app

00:02:37.510 --> 00:02:39.740
is where users can
perceive slowdown the most.

00:02:39.740 --> 00:02:41.979
So to figure out how to
fix up the other parts

00:02:41.979 --> 00:02:44.020
of your application, make
sure you watch the rest

00:02:44.020 --> 00:02:46.330
of our Android Performance
Patterns videos on YouTube,

00:02:46.330 --> 00:02:49.490
and don't forget to join the
Google+ community to chat with

00:02:49.490 --> 00:02:51.530
other brilliant
performance folks.

00:02:51.530 --> 00:02:55.230
So keep calm, profile your
code, and always remember,

00:02:55.230 --> 00:02:56.920
perf matters.

