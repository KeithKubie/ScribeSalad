WEBVTT
Kind: captions
Language: en

00:00:00.100 --> 00:00:03.935
We said databases, we need to talk
about securing access to them,

00:00:03.935 --> 00:00:07.289
because there's something
different about databases,

00:00:07.289 --> 00:00:10.307
while the structure in the data and
how we access it.

00:00:10.307 --> 00:00:12.323
And we talk about access control,

00:00:12.323 --> 00:00:15.670
which is sort of something
that we had discussed before.

00:00:15.670 --> 00:00:21.429
So, are there sort of unique kind of
attacks that are possible on databases?

00:00:21.429 --> 00:00:24.505
So, that's what we want to explore next.

00:00:24.505 --> 00:00:26.710
What kind of threats are possible,

00:00:26.710 --> 00:00:31.193
because either the structure of the data
that we have in the database, or

00:00:31.193 --> 00:00:35.689
the way we access it through the query
languages like SQL, for example.

00:00:35.689 --> 00:00:39.510
So, we're going to talk about a couple
of different possible attacks.

00:00:39.510 --> 00:00:45.048
The first one we're talking about
is what is called SQL injection.

00:00:45.048 --> 00:00:49.922
We'll see that these are essentially
someone exploiting vulnerabilities

00:00:49.922 --> 00:00:54.194
in the code that makes up the query
that is submitted to a database.

00:00:54.194 --> 00:00:58.446
Query is written SQL,
then it's an SQL query and

00:00:58.446 --> 00:01:01.357
attack is called SQL injection.

00:01:01.357 --> 00:01:06.499
So what really is an SQL
injection is a malicious command.

00:01:06.499 --> 00:01:10.494
This is a command this is
presented to the database.

00:01:10.494 --> 00:01:13.338
So that the database is
going to actually run it.

00:01:13.338 --> 00:01:17.195
Malicious because it's going to allow
someone to do something that they

00:01:17.195 --> 00:01:18.643
are not authorized to do.

00:01:18.643 --> 00:01:21.956
Results, of course,
are not going to be consistent with

00:01:21.956 --> 00:01:26.177
the kind of security that you're
looking to provide for this database.

00:01:26.177 --> 00:01:29.604
These kind of injection
attacks when successful,

00:01:29.604 --> 00:01:32.400
they can disclose large amounts of data.

00:01:32.400 --> 00:01:37.601
We talked about disclosures of
customer data and so on earlier.

00:01:37.601 --> 00:01:39.163
So if you do that, of course,

00:01:39.163 --> 00:01:42.300
you are impacting
confidentiality of the database.

00:01:42.300 --> 00:01:46.570
You're extracting data from the database
that is being made public or

00:01:46.570 --> 00:01:49.030
going to somebody who
shouldn't have access to it.

00:01:49.030 --> 00:01:51.658
These injection attacks
can also corrupt or

00:01:51.658 --> 00:01:55.350
delete the data that's there,
some set of tuples in a table or

00:01:55.350 --> 00:01:59.059
something like that that could
impact integrity of the data.

00:01:59.059 --> 00:02:03.351
So injection attacks can corrupt,
which is integrity or disclose,

00:02:03.351 --> 00:02:05.350
which is confidentiality, and

00:02:05.350 --> 00:02:09.357
both of these bad outcomes
are possible when it kind of attacks.

00:02:09.357 --> 00:02:12.090
We're going to discuss what they are,
are successful.

00:02:12.090 --> 00:02:16.153
For us to understand what these
SQL injection attacks are,

00:02:16.153 --> 00:02:18.914
we have to sort of learn something else,

00:02:18.914 --> 00:02:23.646
which is a lot of times the databases
are in the back end of the system.

00:02:23.646 --> 00:02:27.366
The front end is some sort of web
application environment that you

00:02:27.366 --> 00:02:28.185
have, okay?

00:02:28.185 --> 00:02:32.840
And the user interacts with the web
application, and presents, we're

00:02:32.840 --> 00:02:37.583
going to do an example in a minute,
some sort of request to the application.

00:02:37.583 --> 00:02:42.087
All that application then translates to
a query that goes out to the database.

00:02:42.087 --> 00:02:47.903
And the query is typically generated
by a script, based on the user input.

00:02:47.903 --> 00:02:51.282
So user wants something done,
provides input for it.

00:02:51.282 --> 00:02:55.501
There's a script that takes that input,
generates a query, and

00:02:55.501 --> 00:02:59.501
then submits that SQL query,
for example, to the database.

00:02:59.501 --> 00:03:02.647
So this is the kind of environment
that we're talking about.

00:03:02.647 --> 00:03:06.283
And what happens is that
there is a vulnerability in

00:03:06.283 --> 00:03:08.406
the web application itself.

00:03:08.406 --> 00:03:11.469
This is web application,
it's coded, it's software.

00:03:11.469 --> 00:03:13.223
So, this is software vulnerability.

00:03:13.223 --> 00:03:17.999
And SQL injection attacks, basically,
exploit that vulnerability to

00:03:17.999 --> 00:03:22.530
craft this injection attack
that we're talking about.

00:03:22.530 --> 00:03:26.080
So, just to make this idea
of SQL injections concrete,

00:03:26.080 --> 00:03:30.624
and the script and the web application
and so on, let's do an example.

00:03:30.624 --> 00:03:35.408
So, the example is the database
that stores data about what is

00:03:35.408 --> 00:03:38.263
shipped where and things like that.

00:03:38.263 --> 00:03:40.630
It's a collection of the orders,
for example,

00:03:40.630 --> 00:03:42.314
that a company may have received.

00:03:42.314 --> 00:03:46.505
Okay, orders that, whenever an order
is placed, we create a tuple.

00:03:46.505 --> 00:03:48.618
Of course, one piece of information or

00:03:48.618 --> 00:03:52.472
attribute in that tuple is going to say
where the item is going to be shipped.

00:03:52.472 --> 00:03:55.128
And this is,
let's say specified by the users.

00:03:55.128 --> 00:04:00.643
User says, we're saving something,
and I want it sent to the city.

00:04:00.643 --> 00:04:06.123
The way the web application supports
user attraction is maybe using a form.

00:04:06.123 --> 00:04:10.420
And you fill the form with this needed
information including the city that

00:04:10.420 --> 00:04:11.811
we're talking about.

00:04:11.811 --> 00:04:15.946
So, the user interacts with the form,
fills in the various fields,

00:04:15.946 --> 00:04:18.243
including the city that we have here.

00:04:18.243 --> 00:04:23.363
And then, we said this web application
now has to generate a query.

00:04:23.363 --> 00:04:26.213
So the script code that
generates the query

00:04:26.213 --> 00:04:28.911
is included as sort of the example here.

00:04:28.911 --> 00:04:33.091
So the code is going to be SQL
query that we have to generate.

00:04:33.091 --> 00:04:37.680
So the script basically is saying from
the form you read the user input,

00:04:37.680 --> 00:04:41.369
which is the city where we're
going to ship a certain item.

00:04:41.369 --> 00:04:45.248
So this statement shipcity is
basically saying, from the form

00:04:45.248 --> 00:04:49.417
you read this value and that's if
you want to send it to New York, for

00:04:49.417 --> 00:04:52.436
example, that's what
we're going to have here.

00:04:52.436 --> 00:04:57.416
Once we have that, we're saying
generate the SQL query, okay, and code.

00:04:57.416 --> 00:05:02.317
So, the query's going to say
select everything from OrdersTable

00:05:02.317 --> 00:05:07.409
where the attribute Shipcity is
what this input is provided to us.

00:05:07.409 --> 00:05:08.709
So we're going to add that.

00:05:08.709 --> 00:05:13.345
We'll see the resulting query is
actually going to be select* from

00:05:13.345 --> 00:05:17.654
OrdersTable where Shipcity is,
if you put New York City here,

00:05:17.654 --> 00:05:19.873
it'll be shipcity = New York.

00:05:19.873 --> 00:05:21.799
Okay, so that's an example.

00:05:21.799 --> 00:05:25.057
I think the only thing that's
important here is that the user,

00:05:25.057 --> 00:05:26.287
the injection attack,

00:05:26.287 --> 00:05:30.051
the way it is going to work is that
somebody is going to provide bad input.

00:05:30.051 --> 00:05:33.696
So we talked about buffer overflows
through bad input before.

00:05:33.696 --> 00:05:36.378
It's not quite the same,
but it's kind of like that.

00:05:36.378 --> 00:05:39.478
And injection is going to
occur because of bad input.

00:05:39.478 --> 00:05:42.380
So the idea here is that you are getting
the input here from the user.

00:05:42.380 --> 00:05:44.193
Based on that query, and

00:05:44.193 --> 00:05:47.380
this query is what's going to
be submitted to the database.

