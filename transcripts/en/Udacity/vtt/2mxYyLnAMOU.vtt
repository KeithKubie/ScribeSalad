WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:02.650
As we said earlier, RVM has to be

00:00:02.650 --> 00:00:05.689
efficient, otherwise, no one will use it. The run

00:00:05.689 --> 00:00:09.710
time does not actually write the persistent data,

00:00:09.710 --> 00:00:12.700
that is specified through the set range call. Directly

00:00:12.700 --> 00:00:15.960
to the external data segments. Instead, it writes

00:00:15.960 --> 00:00:18.910
the changes that it made to the block of

00:00:18.910 --> 00:00:22.430
addresses, specified by the set range call as a

00:00:22.430 --> 00:00:25.680
redo log in a log segment that was named

00:00:25.680 --> 00:00:27.730
in the initialized call, and we know that

00:00:27.730 --> 00:00:30.510
the log segment is the trick that we mentioned

00:00:30.510 --> 00:00:33.300
earlier also to avoid. Random writes to the

00:00:33.300 --> 00:00:36.340
disc. The log segment is an in memory data

00:00:36.340 --> 00:00:40.180
structure of the RVM run time and once

00:00:40.180 --> 00:00:44.290
a transaction commits at that point, the log segment,

00:00:44.290 --> 00:00:47.000
that contains the changes that have been made

00:00:47.000 --> 00:00:50.700
to the in memory version of persistence data structures.

00:00:50.700 --> 00:00:55.940
Will be committed to the disc. Or, in other words, RVM writes the

00:00:55.940 --> 00:01:01.170
changes that the developer's making to persistent data structures

00:01:01.170 --> 00:01:05.770
in between begin and end transaction as redo logs end

00:01:05.770 --> 00:01:10.470
the log segment. And the redo log that has been written into the log segment is

00:01:10.470 --> 00:01:12.760
committed to the disc at the point of

00:01:12.760 --> 00:01:15.820
end transaction. On the other hand, if the transaction

00:01:15.820 --> 00:01:18.680
aborts, then you don't have to commit those

00:01:18.680 --> 00:01:21.620
reader logs to the disc.Now remember that the changes

00:01:21.620 --> 00:01:24.740
that we make to the perisistent data structrues

00:01:24.740 --> 00:01:28.110
in memory versions of those persistent data strutures Have

00:01:28.110 --> 00:01:31.390
to be eventually committed to the external data

00:01:31.390 --> 00:01:35.160
segments. Now that part is done lazily by the

00:01:35.160 --> 00:01:38.760
RBM system. It basically applies the redo logs that

00:01:38.760 --> 00:01:41.050
have been committed to the disk to the external

00:01:41.050 --> 00:01:44.100
data segments at opportune moments, and once it has

00:01:44.100 --> 00:01:47.910
applied those Redo logs from the log segment in

00:01:47.910 --> 00:01:51.220
to the external data segments. The redo logs can

00:01:51.220 --> 00:01:53.280
be thrown away. And this part is what is called

00:01:53.280 --> 00:01:56.420
truncation. So there are two parts to managing the

00:01:56.420 --> 00:02:01.150
log. One is at the point of commitment, the log

00:02:01.150 --> 00:02:03.070
has to be forced to the disc, because you

00:02:03.070 --> 00:02:06.430
want to persist it. And second, once it is comitted

00:02:06.430 --> 00:02:09.350
to the disc. You have to eventually apply it

00:02:09.350 --> 00:02:11.860
to the external data segments and at that point, you

00:02:11.860 --> 00:02:13.970
can truncate the logs. So the log is going to

00:02:13.970 --> 00:02:17.240
be applied to the external data segments and once those

00:02:17.240 --> 00:02:20.710
external data segments have been modified, then you can

00:02:20.710 --> 00:02:24.790
throw away those reader logs. So flushing the log segment

00:02:24.790 --> 00:02:28.200
to the disk, as well as Truncating the log segment

00:02:28.200 --> 00:02:31.520
once they have been applied to the external data segments

00:02:31.520 --> 00:02:33.990
that they represent are all done automatically

00:02:33.990 --> 00:02:37.700
by LRVM. So the application developer doesn't have

00:02:37.700 --> 00:02:40.300
to do anything other than initialize his

00:02:40.300 --> 00:02:42.910
virtual memory The log segment he wants to

00:02:42.910 --> 00:02:46.460
use and write the code that contains

00:02:46.460 --> 00:02:49.450
these critical sections bound by begin transaction and

00:02:49.450 --> 00:02:52.430
end transaction and abort transaction. But RVM

00:02:52.430 --> 00:02:56.750
also provides flush and truncate as primitives for

00:02:56.750 --> 00:03:01.840
flexibility in writing the application. Or in other words, the application Can

00:03:01.840 --> 00:03:04.780
if it chooses explicitly manage the

00:03:04.780 --> 00:03:08.460
persistence and application of the [UNKNOWN] logs

00:03:08.460 --> 00:03:11.550
to the data segments. Shortly we

00:03:11.550 --> 00:03:15.370
will mention some optimization specified through the

00:03:15.370 --> 00:03:18.873
commit mode to the RVM [UNKNOWN]

00:03:18.873 --> 00:03:21.850
by the application programmer. To enhance performance.

00:03:21.850 --> 00:03:25.570
One of those optimization features allows the

00:03:25.570 --> 00:03:29.860
RVM to defer flushing to the disc at

00:03:29.860 --> 00:03:32.540
the point of commit. So one of those

00:03:32.540 --> 00:03:35.670
optimization features in the commit mode is to

00:03:35.670 --> 00:03:41.780
tell the RVM. Do not flush the changes to the log segment commit point yet.

00:03:41.780 --> 00:03:44.310
I'll take care of it explicitly by flushing.

00:03:44.310 --> 00:03:48.100
So these additional primitives are for the developers

00:03:48.100 --> 00:03:52.150
if she so chooses to explicitly controlling flushing

00:03:52.150 --> 00:03:54.700
of the logs to the disk and also

00:03:54.700 --> 00:03:59.300
manage the truncation of the logs by explicitly

00:03:59.300 --> 00:04:02.660
applying it when she wants it To the external

00:04:02.660 --> 00:04:04.940
data segments to conserve space, because if you

00:04:04.940 --> 00:04:07.370
think about it all these log segments are

00:04:07.370 --> 00:04:10.660
occupying space on the disc. At the midpoint

00:04:10.660 --> 00:04:13.520
you're flushing the redo records in the log segments

00:04:13.520 --> 00:04:18.370
to the disc. And so you're filling up the disc with a lot of redo records

00:04:18.370 --> 00:04:20.620
in addition to the external data segments. The

00:04:20.620 --> 00:04:23.890
truncation is a way by which. The subsystem

00:04:23.890 --> 00:04:27.970
designer, can explicitly say, go ahead and apply

00:04:27.970 --> 00:04:31.200
these edulogs to the extremity segments and truncate

00:04:31.200 --> 00:04:33.910
the log. So as i said, these calls

00:04:33.910 --> 00:04:38.700
are there, purely for flexibility, if their designer so

00:04:38.700 --> 00:04:42.770
chooses to use these primitives for explicitly

00:04:42.770 --> 00:04:45.630
Controlling and reducing the log space. And

00:04:45.630 --> 00:04:49.970
these additional perimeters are available in RVM

00:04:49.970 --> 00:04:52.340
as a way by which the developer can

00:04:52.340 --> 00:04:55.280
administer the design of a subsystem and

00:04:55.280 --> 00:04:59.290
performance tune his subsystem for optimality. The

00:04:59.290 --> 00:05:03.910
main thing to take away is that the RVM design is simple, with a small

00:05:03.910 --> 00:05:09.350
set of primitives. Easy to grok for a developer and use in the design of

00:05:09.350 --> 00:05:11.460
a subsystem. Also, we've been using the word

00:05:11.460 --> 00:05:14.610
transaction. But the semantics of the transaction as

00:05:14.610 --> 00:05:19.290
used in RVM. Is much more restricted compared

00:05:19.290 --> 00:05:21.830
to the traditional use of the word transaction

00:05:21.830 --> 00:05:25.520
in the database literature. In particular, the transaction

00:05:25.520 --> 00:05:29.250
as proposed and used in the RVM library,

00:05:29.250 --> 00:05:34.310
is intended for recovery management. It does not need all the properties

00:05:34.310 --> 00:05:37.170
that are usually associated With traditional

00:05:37.170 --> 00:05:41.660
transaction, so called acid properties, namely atomicity,

00:05:41.660 --> 00:05:45.880
consistency, isolation, and durability. For example,

00:05:45.880 --> 00:05:48.570
a transaction as defined in RVM,

00:05:48.570 --> 00:05:51.190
does not allow for nested transactions.

00:05:51.190 --> 00:05:54.490
It has no support for concurrency control.

00:05:54.490 --> 00:05:56.020
But all of these are things that you

00:05:56.020 --> 00:06:00.130
normally associate as transaction for the key design objective.

00:06:00.130 --> 00:06:02.710
In RVM is to make it simple, and performant,

00:06:02.710 --> 00:06:06.960
and easy to use. And if there is need

00:06:06.960 --> 00:06:09.340
for concurrency control, it is something that the

00:06:09.340 --> 00:06:13.180
developer has to implement at a higher level in

00:06:13.180 --> 00:06:16.540
their system software. So in this sense. It is

00:06:16.540 --> 00:06:19.590
useful to remember what I said earlier that the

00:06:19.590 --> 00:06:23.020
code that exists between begin transaction and end

00:06:23.020 --> 00:06:25.320
transaction is like a critical section in the

00:06:25.320 --> 00:06:28.610
application code. And all that the developer is

00:06:28.610 --> 00:06:31.420
trying to signal through the critical section to

00:06:31.420 --> 00:06:38.260
the RVM library is that it is making changes to a portion Of an address range

00:06:38.260 --> 00:06:40.620
and that potion of the address range, it

00:06:40.620 --> 00:06:44.800
needs to be persistent if in fact that critical

00:06:44.800 --> 00:06:48.560
section bound by this n transaction commits. On the other

00:06:48.560 --> 00:06:53.510
hand, if that critical section aborts then those changes should be

00:06:53.510 --> 00:06:57.110
thrown away. That's the intent of a set of primitives

00:06:57.110 --> 00:07:02.130
provided by RVM and that's the intent of this transaction semantic.

