WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.784
[MUSIC PLAYING]

00:00:01.784 --> 00:00:03.570
IAN LAKE: Oh.

00:00:03.570 --> 00:00:05.490
Actions like pausing
your music should never

00:00:05.490 --> 00:00:07.730
be too far away, just in case.

00:00:07.730 --> 00:00:09.210
Android has offered
a lot of ways

00:00:09.210 --> 00:00:11.120
to do that-- lock
screen controls,

00:00:11.120 --> 00:00:13.940
media controls for
notifications, Android Wear,

00:00:13.940 --> 00:00:16.110
and even Android
Auto, to name a few.

00:00:16.110 --> 00:00:19.180
How does your audio app get
started with all this goodness?

00:00:19.180 --> 00:00:21.660
It's simple with
MediaSessionCompat,

00:00:21.660 --> 00:00:25.100
a single API available via the
Android Support Library that

00:00:25.100 --> 00:00:26.780
does much of the
work of integrating

00:00:26.780 --> 00:00:28.570
with Android for you.

00:00:28.570 --> 00:00:32.000
I'm Ian Lake, and I'll go over
what MediaSessionCompat is,

00:00:32.000 --> 00:00:34.850
and how you can get started
on getting your media metadata

00:00:34.850 --> 00:00:37.350
and controls everywhere.

00:00:37.350 --> 00:00:40.420
Think of a media session as
the public face of your media

00:00:40.420 --> 00:00:41.450
playback.

00:00:41.450 --> 00:00:44.430
No matter if you're playing
audio, video, or even remotely

00:00:44.430 --> 00:00:47.720
via Google Cast, unless you tell
the system what you're doing,

00:00:47.720 --> 00:00:49.029
it can't help you.

00:00:49.029 --> 00:00:50.820
And it gives you a lot
of ways to help you,

00:00:50.820 --> 00:00:54.590
if you publish metadata-- such
as album art and artist name--

00:00:54.590 --> 00:00:57.160
and tell it what media
controls-- such as play

00:00:57.160 --> 00:00:59.180
and pause-- you support.

00:00:59.180 --> 00:01:00.590
But I'm getting ahead of myself.

00:01:00.590 --> 00:01:02.840
Let's just create a
MediaSessionCompat

00:01:02.840 --> 00:01:04.858
object to start.

00:01:04.858 --> 00:01:07.490
Alas, on Android versions
prior to Lollipop,

00:01:07.490 --> 00:01:09.780
this requires one
preliminary step,

00:01:09.780 --> 00:01:12.600
creating what we call a
media button receiver.

00:01:12.600 --> 00:01:14.500
This is what captures
media controls

00:01:14.500 --> 00:01:17.090
from things like Bluetooth
headsets and Android Wear,

00:01:17.090 --> 00:01:20.860
and delivers them to your app
on devices below Android 5.0.

00:01:20.860 --> 00:01:22.450
It's a simple
broadcast receiver,

00:01:22.450 --> 00:01:24.830
you register in your
manifest like this,

00:01:24.830 --> 00:01:27.420
and translates the
key event you receive

00:01:27.420 --> 00:01:29.590
into actions for your app.

00:01:29.590 --> 00:01:33.080
Generally, just delegating the
actual pause and play commands

00:01:33.080 --> 00:01:35.130
to the service actually
controlling your media

00:01:35.130 --> 00:01:36.210
playback.

00:01:36.210 --> 00:01:38.840
Check out our training
docs for an example.

00:01:38.840 --> 00:01:41.980
OK, finally, a
MediaSessionCompat.

00:01:41.980 --> 00:01:45.210
You'll need a context-- any
string to serve as a debugging

00:01:45.210 --> 00:01:48.610
tag-- and the component name
of your media button receiver.

00:01:48.610 --> 00:01:50.600
The last null is
a pending intent

00:01:50.600 --> 00:01:54.400
you can use instead of the
component name on Android 4.3.

00:01:54.400 --> 00:01:56.400
It is created for
us if we pass null,

00:01:56.400 --> 00:01:58.620
and it's usually the
right thing to do.

00:01:58.620 --> 00:02:00.800
Now you probably want
to do three things

00:02:00.800 --> 00:02:02.510
before going any farther.

00:02:02.510 --> 00:02:06.320
Set the appropriate flags to say
we actually have media button

00:02:06.320 --> 00:02:10.060
controls, and want those media
button events sent to our app.

00:02:10.060 --> 00:02:12.290
Next, we'll want
to set a callback.

00:02:12.290 --> 00:02:14.070
This is where Lollipop
and higher devices

00:02:14.070 --> 00:02:17.880
will get callbacks on
play, on pause, and others

00:02:17.880 --> 00:02:19.590
when a button is pressed.

00:02:19.590 --> 00:02:21.710
Finally, set the
session to active

00:02:21.710 --> 00:02:23.550
when you're ready
to play something.

00:02:23.550 --> 00:02:27.140
This is the cue to the
system to route media buttons

00:02:27.140 --> 00:02:31.000
and other controls to your app.

00:02:31.000 --> 00:02:33.040
OK, so the plumbing
is set up and ready,

00:02:33.040 --> 00:02:35.610
but we never actually tell
our media session anything

00:02:35.610 --> 00:02:37.290
about our media playback.

00:02:37.290 --> 00:02:40.760
How will it know what is playing
or what controls we support?

00:02:40.760 --> 00:02:44.170
First part is handled
by MediaMetadataCompat.

00:02:44.170 --> 00:02:46.420
It uses a builder
pattern, where you just

00:02:46.420 --> 00:02:48.490
add all the
information you have,

00:02:48.490 --> 00:02:51.490
then call setMetadata
on your media session.

00:02:51.490 --> 00:02:53.066
But still no media controls.

00:02:53.066 --> 00:02:55.170
Ah, it's because we haven't
done the other part,

00:02:55.170 --> 00:02:57.190
publishing a playback state.

00:02:57.190 --> 00:03:00.260
PlaybackStateCompat
actually has two purposes,

00:03:00.260 --> 00:03:03.190
the current state-- such
as playing or paused

00:03:03.190 --> 00:03:07.460
or buffering, set via
its setState method--

00:03:07.460 --> 00:03:11.670
and the current actions-- such
as stop or pause or play-pause,

00:03:11.670 --> 00:03:14.510
set via its setActions method.

00:03:14.510 --> 00:03:17.240
It contains both because
usually the actions change

00:03:17.240 --> 00:03:18.850
at the same time as the state.

00:03:18.850 --> 00:03:21.700
A stop state probably
doesn't have a pause action,

00:03:21.700 --> 00:03:23.560
for example.

00:03:23.560 --> 00:03:26.060
That's enough to get
MediaSessionCompat working.

00:03:26.060 --> 00:03:29.120
You'll find integrated media
and Bluetooth buttons for all

00:03:29.120 --> 00:03:32.240
API 8 and higher devices,
and lock screen controls

00:03:32.240 --> 00:03:35.950
for Ice Cream Sandwich, Jelly
Bean, and KitKat devices.

00:03:35.950 --> 00:03:37.820
You'll also find that
MediaSessionCompat

00:03:37.820 --> 00:03:39.450
works great with
NotificationCompat

00:03:39.450 --> 00:03:43.480
and MediaStyle, part of the
AppCompat support library,

00:03:43.480 --> 00:03:46.460
giving you great looking
media notifications on all API

00:03:46.460 --> 00:03:50.170
levels, even including
inline media controls on API

00:03:50.170 --> 00:03:52.030
14 and higher devices.

00:03:52.030 --> 00:03:54.430
Just remember to
call SetMediaSession

00:03:54.430 --> 00:03:56.230
with the special
unique media session

00:03:56.230 --> 00:03:58.490
token from your media session.

00:03:58.490 --> 00:04:01.380
This is what connects your
media session to Android Wear,

00:04:01.380 --> 00:04:04.550
and you gives you media
controls on Wear for Android 5.0

00:04:04.550 --> 00:04:05.540
and higher.

00:04:05.540 --> 00:04:08.320
Oh, don't forget to call
release when you're all

00:04:08.320 --> 00:04:09.550
done with your media session.

00:04:09.550 --> 00:04:12.050
Really, don't forget.

00:04:12.050 --> 00:04:15.200
We've only touched on the
basics of MediaSessionCompat.

00:04:15.200 --> 00:04:17.820
We haven't talked about
media browsers or media

00:04:17.820 --> 00:04:19.529
controllers or a
whole host of things

00:04:19.529 --> 00:04:21.509
built on top of media session.

00:04:21.509 --> 00:04:24.050
But this should get you started,
and make your media playback

00:04:24.050 --> 00:04:26.860
information and playback
controls available

00:04:26.860 --> 00:04:28.620
everywhere it can be.

00:04:28.620 --> 00:04:31.260
I'm looking forward to
seeing your awesome media

00:04:31.260 --> 00:04:33.440
using MediaSessionCompat,
and I hope

00:04:33.440 --> 00:04:35.910
it helps you build better apps.

00:04:35.910 --> 00:04:38.090
And, release.

