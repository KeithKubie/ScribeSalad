WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.880
[Music]

00:00:06.880 --> 00:00:06.890
[Music]
 

00:00:06.890 --> 00:00:10.129
[Music]
so I'm Adam I'm Chris and this is

00:00:10.129 --> 00:00:10.139
so I'm Adam I'm Chris and this is
 

00:00:10.139 --> 00:00:11.810
so I'm Adam I'm Chris and this is
Android suspenders today we're going to

00:00:11.810 --> 00:00:11.820
Android suspenders today we're going to
 

00:00:11.820 --> 00:00:13.190
Android suspenders today we're going to
talk a little bit about Kotlin

00:00:13.190 --> 00:00:13.200
talk a little bit about Kotlin
 

00:00:13.200 --> 00:00:15.530
talk a little bit about Kotlin
co-routines but to get started a little

00:00:15.530 --> 00:00:15.540
co-routines but to get started a little
 

00:00:15.540 --> 00:00:16.730
co-routines but to get started a little
bit of background many of you are

00:00:16.730 --> 00:00:16.740
bit of background many of you are
 

00:00:16.740 --> 00:00:18.590
bit of background many of you are
probably familiar with those already is

00:00:18.590 --> 00:00:18.600
probably familiar with those already is
 

00:00:18.600 --> 00:00:20.359
probably familiar with those already is
the idea of androids main thread and

00:00:20.359 --> 00:00:20.369
the idea of androids main thread and
 

00:00:20.369 --> 00:00:22.820
the idea of androids main thread and
just like almost every other UI toolkit

00:00:22.820 --> 00:00:22.830
just like almost every other UI toolkit
 

00:00:22.830 --> 00:00:26.150
just like almost every other UI toolkit
out there androids exposes a single UI

00:00:26.150 --> 00:00:26.160
out there androids exposes a single UI
 

00:00:26.160 --> 00:00:28.250
out there androids exposes a single UI
or main thread for doing updates to

00:00:28.250 --> 00:00:28.260
or main thread for doing updates to
 

00:00:28.260 --> 00:00:30.710
or main thread for doing updates to
parts of your UI so some of the things

00:00:30.710 --> 00:00:30.720
parts of your UI so some of the things
 

00:00:30.720 --> 00:00:31.999
parts of your UI so some of the things
that you might find yourself doing on

00:00:31.999 --> 00:00:32.009
that you might find yourself doing on
 

00:00:32.009 --> 00:00:34.729
that you might find yourself doing on
the main thread inflating views you

00:00:34.729 --> 00:00:34.739
the main thread inflating views you
 

00:00:34.739 --> 00:00:36.139
the main thread inflating views you
could be doing measure and layout

00:00:36.139 --> 00:00:36.149
could be doing measure and layout
 

00:00:36.149 --> 00:00:38.209
could be doing measure and layout
operations to change the shape of your

00:00:38.209 --> 00:00:38.219
operations to change the shape of your
 

00:00:38.219 --> 00:00:41.030
operations to change the shape of your
view hierarchy you could be drawing or

00:00:41.030 --> 00:00:41.040
view hierarchy you could be drawing or
 

00:00:41.040 --> 00:00:43.190
view hierarchy you could be drawing or
many other things really like processing

00:00:43.190 --> 00:00:43.200
many other things really like processing
 

00:00:43.200 --> 00:00:45.970
many other things really like processing
input events and so on and so forth so

00:00:45.970 --> 00:00:45.980
input events and so on and so forth so
 

00:00:45.980 --> 00:00:49.130
input events and so on and so forth so
today you're probably familiar with this

00:00:49.130 --> 00:00:49.140
today you're probably familiar with this
 

00:00:49.140 --> 00:00:51.799
today you're probably familiar with this
16 millisecond time limit the vast

00:00:51.799 --> 00:00:51.809
16 millisecond time limit the vast
 

00:00:51.809 --> 00:00:53.330
16 millisecond time limit the vast
majority of devices out there have a

00:00:53.330 --> 00:00:53.340
majority of devices out there have a
 

00:00:53.340 --> 00:00:55.279
majority of devices out there have a
refresh rate of 60 Hertz which means

00:00:55.279 --> 00:00:55.289
refresh rate of 60 Hertz which means
 

00:00:55.289 --> 00:00:57.139
refresh rate of 60 Hertz which means
that you have just over 16 milliseconds

00:00:57.139 --> 00:00:57.149
that you have just over 16 milliseconds
 

00:00:57.149 --> 00:00:59.360
that you have just over 16 milliseconds
to do all the work necessary in order to

00:00:59.360 --> 00:00:59.370
to do all the work necessary in order to
 

00:00:59.370 --> 00:01:01.970
to do all the work necessary in order to
deliver a smooth frame rate so what

00:01:01.970 --> 00:01:01.980
deliver a smooth frame rate so what
 

00:01:01.980 --> 00:01:03.290
deliver a smooth frame rate so what
happens when that display rate goes up

00:01:03.290 --> 00:01:03.300
happens when that display rate goes up
 

00:01:03.300 --> 00:01:05.539
happens when that display rate goes up
so 90 Hertz means you have 12

00:01:05.539 --> 00:01:05.549
so 90 Hertz means you have 12
 

00:01:05.549 --> 00:01:08.270
so 90 Hertz means you have 12
milliseconds 120 Hertz means you have 8

00:01:08.270 --> 00:01:08.280
milliseconds 120 Hertz means you have 8
 

00:01:08.280 --> 00:01:10.250
milliseconds 120 Hertz means you have 8
milliseconds and you have less and less

00:01:10.250 --> 00:01:10.260
milliseconds and you have less and less
 

00:01:10.260 --> 00:01:11.719
milliseconds and you have less and less
time to get some of this work done if

00:01:11.719 --> 00:01:11.729
time to get some of this work done if
 

00:01:11.729 --> 00:01:13.880
time to get some of this work done if
you take a look at assist trace you'll

00:01:13.880 --> 00:01:13.890
you take a look at assist trace you'll
 

00:01:13.890 --> 00:01:15.679
you take a look at assist trace you'll
usually find that the things that caused

00:01:15.679 --> 00:01:15.689
usually find that the things that caused
 

00:01:15.689 --> 00:01:17.840
usually find that the things that caused
you to miss a frame and thereby have

00:01:17.840 --> 00:01:17.850
you to miss a frame and thereby have
 

00:01:17.850 --> 00:01:19.370
you to miss a frame and thereby have
kind of jank in your application is

00:01:19.370 --> 00:01:19.380
kind of jank in your application is
 

00:01:19.380 --> 00:01:22.010
kind of jank in your application is
really app code like if you're binding

00:01:22.010 --> 00:01:22.020
really app code like if you're binding
 

00:01:22.020 --> 00:01:23.899
really app code like if you're binding
items to a recycler view reading from a

00:01:23.899 --> 00:01:23.909
items to a recycler view reading from a
 

00:01:23.909 --> 00:01:25.640
items to a recycler view reading from a
data store or so on and so forth these

00:01:25.640 --> 00:01:25.650
data store or so on and so forth these
 

00:01:25.650 --> 00:01:27.499
data store or so on and so forth these
are all bits of work that it would be

00:01:27.499 --> 00:01:27.509
are all bits of work that it would be
 

00:01:27.509 --> 00:01:28.969
are all bits of work that it would be
really great if we could keep this off

00:01:28.969 --> 00:01:28.979
really great if we could keep this off
 

00:01:28.979 --> 00:01:30.289
really great if we could keep this off
of that main thread and out of this

00:01:30.289 --> 00:01:30.299
of that main thread and out of this
 

00:01:30.299 --> 00:01:32.749
of that main thread and out of this
critical path so how do we fix it well

00:01:32.749 --> 00:01:32.759
critical path so how do we fix it well
 

00:01:32.759 --> 00:01:34.940
critical path so how do we fix it well
this talk isn't about achieving eight

00:01:34.940 --> 00:01:34.950
this talk isn't about achieving eight
 

00:01:34.950 --> 00:01:36.649
this talk isn't about achieving eight
millisecond refresh boundaries this is

00:01:36.649 --> 00:01:36.659
millisecond refresh boundaries this is
 

00:01:36.659 --> 00:01:39.469
millisecond refresh boundaries this is
about making use of the resources we

00:01:39.469 --> 00:01:39.479
about making use of the resources we
 

00:01:39.479 --> 00:01:41.270
about making use of the resources we
have available and all the phones that

00:01:41.270 --> 00:01:41.280
have available and all the phones that
 

00:01:41.280 --> 00:01:42.859
have available and all the phones that
we have have multiple cores in them

00:01:42.859 --> 00:01:42.869
we have have multiple cores in them
 

00:01:42.869 --> 00:01:46.010
we have have multiple cores in them
today so how do we actually make use of

00:01:46.010 --> 00:01:46.020
today so how do we actually make use of
 

00:01:46.020 --> 00:01:49.429
today so how do we actually make use of
that well some of you probably remember

00:01:49.429 --> 00:01:49.439
that well some of you probably remember
 

00:01:49.439 --> 00:01:51.200
that well some of you probably remember
this thing it's been around for quite

00:01:51.200 --> 00:01:51.210
this thing it's been around for quite
 

00:01:51.210 --> 00:01:53.840
this thing it's been around for quite
some time and has a lot of issues it's

00:01:53.840 --> 00:01:53.850
some time and has a lot of issues it's
 

00:01:53.850 --> 00:01:56.209
some time and has a lot of issues it's
all composes a little bit badly has some

00:01:56.209 --> 00:01:56.219
all composes a little bit badly has some
 

00:01:56.219 --> 00:01:57.889
all composes a little bit badly has some
issues around rotation it's really easy

00:01:57.889 --> 00:01:57.899
issues around rotation it's really easy
 

00:01:57.899 --> 00:01:59.090
issues around rotation it's really easy
to get wrong

00:01:59.090 --> 00:01:59.100
to get wrong
 

00:01:59.100 --> 00:02:01.160
to get wrong
there's executors which most Java

00:02:01.160 --> 00:02:01.170
there's executors which most Java
 

00:02:01.170 --> 00:02:03.770
there's executors which most Java
developers are familiar with and this

00:02:03.770 --> 00:02:03.780
developers are familiar with and this
 

00:02:03.780 --> 00:02:05.179
developers are familiar with and this
kind of lets you share some thread pools

00:02:05.179 --> 00:02:05.189
kind of lets you share some thread pools
 

00:02:05.189 --> 00:02:07.639
kind of lets you share some thread pools
which is nice but it's otherwise kind of

00:02:07.639 --> 00:02:07.649
which is nice but it's otherwise kind of
 

00:02:07.649 --> 00:02:09.320
which is nice but it's otherwise kind of
a really raw API you can build things

00:02:09.320 --> 00:02:09.330
a really raw API you can build things
 

00:02:09.330 --> 00:02:10.760
a really raw API you can build things
out of it but it's not really convenient

00:02:10.760 --> 00:02:10.770
out of it but it's not really convenient
 

00:02:10.770 --> 00:02:14.090
out of it but it's not really convenient
to use on its own loaders loaders

00:02:14.090 --> 00:02:14.100
to use on its own loaders loaders
 

00:02:14.100 --> 00:02:16.130
to use on its own loaders loaders
sort of thing that we're certainly out

00:02:16.130 --> 00:02:16.140
sort of thing that we're certainly out
 

00:02:16.140 --> 00:02:18.260
sort of thing that we're certainly out
there that solved a few problems but it

00:02:18.260 --> 00:02:18.270
there that solved a few problems but it
 

00:02:18.270 --> 00:02:20.450
there that solved a few problems but it
was pretty narrowly scoped it's really

00:02:20.450 --> 00:02:20.460
was pretty narrowly scoped it's really
 

00:02:20.460 --> 00:02:22.190
was pretty narrowly scoped it's really
now deprecated so there's not a whole

00:02:22.190 --> 00:02:22.200
now deprecated so there's not a whole
 

00:02:22.200 --> 00:02:26.150
now deprecated so there's not a whole
lot there we can use futures

00:02:26.150 --> 00:02:26.160
lot there we can use futures
 

00:02:26.160 --> 00:02:27.650
lot there we can use futures
there's listenable future which has

00:02:27.650 --> 00:02:27.660
there's listenable future which has
 

00:02:27.660 --> 00:02:29.330
there's listenable future which has
started showing up in more Android XA P

00:02:29.330 --> 00:02:29.340
started showing up in more Android XA P
 

00:02:29.340 --> 00:02:31.490
started showing up in more Android XA P
is but you may not want to pull in all

00:02:31.490 --> 00:02:31.500
is but you may not want to pull in all
 

00:02:31.500 --> 00:02:33.950
is but you may not want to pull in all
of guava and all of the infrastructure

00:02:33.950 --> 00:02:33.960
of guava and all of the infrastructure
 

00:02:33.960 --> 00:02:35.570
of guava and all of the infrastructure
that really helps you leverage some of

00:02:35.570 --> 00:02:35.580
that really helps you leverage some of
 

00:02:35.580 --> 00:02:36.800
that really helps you leverage some of
the things that you can do with it and

00:02:36.800 --> 00:02:36.810
the things that you can do with it and
 

00:02:36.810 --> 00:02:39.770
the things that you can do with it and
unless you're working on min SDK 24 you

00:02:39.770 --> 00:02:39.780
unless you're working on min SDK 24 you
 

00:02:39.780 --> 00:02:41.540
unless you're working on min SDK 24 you
can't use completable future either and

00:02:41.540 --> 00:02:41.550
can't use completable future either and
 

00:02:41.550 --> 00:02:43.280
can't use completable future either and
really there's a whole bunch of other

00:02:43.280 --> 00:02:43.290
really there's a whole bunch of other
 

00:02:43.290 --> 00:02:44.780
really there's a whole bunch of other
reasons why you might not want to use

00:02:44.780 --> 00:02:44.790
reasons why you might not want to use
 

00:02:44.790 --> 00:02:48.110
reasons why you might not want to use
that to begin with so there are a lot of

00:02:48.110 --> 00:02:48.120
that to begin with so there are a lot of
 

00:02:48.120 --> 00:02:49.490
that to begin with so there are a lot of
other libraries out there I mentioned

00:02:49.490 --> 00:02:49.500
other libraries out there I mentioned
 

00:02:49.500 --> 00:02:50.900
other libraries out there I mentioned
guava guava is certainly one that you

00:02:50.900 --> 00:02:50.910
guava guava is certainly one that you
 

00:02:50.910 --> 00:02:52.910
guava guava is certainly one that you
can pull into your app rx Java is super

00:02:52.910 --> 00:02:52.920
can pull into your app rx Java is super
 

00:02:52.920 --> 00:02:55.370
can pull into your app rx Java is super
popular it's a great library does a lot

00:02:55.370 --> 00:02:55.380
popular it's a great library does a lot
 

00:02:55.380 --> 00:02:58.760
popular it's a great library does a lot
of things as well but if you're sitting

00:02:58.760 --> 00:02:58.770
of things as well but if you're sitting
 

00:02:58.770 --> 00:03:00.080
of things as well but if you're sitting
here in this talk today you're probably

00:03:00.080 --> 00:03:00.090
here in this talk today you're probably
 

00:03:00.090 --> 00:03:02.150
here in this talk today you're probably
here to talk about co-routines which is

00:03:02.150 --> 00:03:02.160
here to talk about co-routines which is
 

00:03:02.160 --> 00:03:04.070
here to talk about co-routines which is
a new feature that went fully stable in

00:03:04.070 --> 00:03:04.080
a new feature that went fully stable in
 

00:03:04.080 --> 00:03:08.120
a new feature that went fully stable in
Kotlin 1.3 just this fall so why should

00:03:08.120 --> 00:03:08.130
Kotlin 1.3 just this fall so why should
 

00:03:08.130 --> 00:03:13.400
Kotlin 1.3 just this fall so why should
we use them great so when I think about

00:03:13.400 --> 00:03:13.410
we use them great so when I think about
 

00:03:13.410 --> 00:03:14.690
we use them great so when I think about
this question I'm thinking about what

00:03:14.690 --> 00:03:14.700
this question I'm thinking about what
 

00:03:14.700 --> 00:03:16.670
this question I'm thinking about what
does your typical mobile app do and I

00:03:16.670 --> 00:03:16.680
does your typical mobile app do and I
 

00:03:16.680 --> 00:03:17.960
does your typical mobile app do and I
think for the most part you can describe

00:03:17.960 --> 00:03:17.970
think for the most part you can describe
 

00:03:17.970 --> 00:03:19.460
think for the most part you can describe
them as kind of crude apps and I don't

00:03:19.460 --> 00:03:19.470
them as kind of crude apps and I don't
 

00:03:19.470 --> 00:03:21.230
them as kind of crude apps and I don't
mean the American Slang I mean the fact

00:03:21.230 --> 00:03:21.240
mean the American Slang I mean the fact
 

00:03:21.240 --> 00:03:23.090
mean the American Slang I mean the fact
that they create they read they update

00:03:23.090 --> 00:03:23.100
that they create they read they update
 

00:03:23.100 --> 00:03:25.250
that they create they read they update
and they delete data usually to some

00:03:25.250 --> 00:03:25.260
and they delete data usually to some
 

00:03:25.260 --> 00:03:26.450
and they delete data usually to some
kind of local data source like a

00:03:26.450 --> 00:03:26.460
kind of local data source like a
 

00:03:26.460 --> 00:03:28.970
kind of local data source like a
database or whatever it be and then go

00:03:28.970 --> 00:03:28.980
database or whatever it be and then go
 

00:03:28.980 --> 00:03:30.320
database or whatever it be and then go
to it further a lot of apps will also

00:03:30.320 --> 00:03:30.330
to it further a lot of apps will also
 

00:03:30.330 --> 00:03:32.630
to it further a lot of apps will also
have some kind of sync so they upload

00:03:32.630 --> 00:03:32.640
have some kind of sync so they upload
 

00:03:32.640 --> 00:03:34.460
have some kind of sync so they upload
data and pull data back from some kind

00:03:34.460 --> 00:03:34.470
data and pull data back from some kind
 

00:03:34.470 --> 00:03:37.010
data and pull data back from some kind
of web service now apps are actually

00:03:37.010 --> 00:03:37.020
of web service now apps are actually
 

00:03:37.020 --> 00:03:39.050
of web service now apps are actually
pretty simple computationally you're not

00:03:39.050 --> 00:03:39.060
pretty simple computationally you're not
 

00:03:39.060 --> 00:03:41.780
pretty simple computationally you're not
retexe in the CPU that much really yes

00:03:41.780 --> 00:03:41.790
retexe in the CPU that much really yes
 

00:03:41.790 --> 00:03:43.190
retexe in the CPU that much really yes
the logic can be quite tricky to get

00:03:43.190 --> 00:03:43.200
the logic can be quite tricky to get
 

00:03:43.200 --> 00:03:45.200
the logic can be quite tricky to get
right but actually they're pretty simple

00:03:45.200 --> 00:03:45.210
right but actually they're pretty simple
 

00:03:45.210 --> 00:03:47.630
right but actually they're pretty simple
and of course Android we put a lot of

00:03:47.630 --> 00:03:47.640
and of course Android we put a lot of
 

00:03:47.640 --> 00:03:49.070
and of course Android we put a lot of
stuff in your way like we make out your

00:03:49.070 --> 00:03:49.080
stuff in your way like we make out your
 

00:03:49.080 --> 00:03:51.290
stuff in your way like we make out your
live harder but in actually your apps

00:03:51.290 --> 00:03:51.300
live harder but in actually your apps
 

00:03:51.300 --> 00:03:53.030
live harder but in actually your apps
are actually pretty simple from a logic

00:03:53.030 --> 00:03:53.040
are actually pretty simple from a logic
 

00:03:53.040 --> 00:03:56.090
are actually pretty simple from a logic
point of view so WIPO routines well how

00:03:56.090 --> 00:03:56.100
point of view so WIPO routines well how
 

00:03:56.100 --> 00:03:58.010
point of view so WIPO routines well how
do they actually fix that well I think

00:03:58.010 --> 00:03:58.020
do they actually fix that well I think
 

00:03:58.020 --> 00:03:59.810
do they actually fix that well I think
they're great for i/o tasks especially

00:03:59.810 --> 00:03:59.820
they're great for i/o tasks especially
 

00:03:59.820 --> 00:04:02.270
they're great for i/o tasks especially
for a resource constraint system like

00:04:02.270 --> 00:04:02.280
for a resource constraint system like
 

00:04:02.280 --> 00:04:03.740
for a resource constraint system like
the phones and tablets you're using

00:04:03.740 --> 00:04:03.750
the phones and tablets you're using
 

00:04:03.750 --> 00:04:05.120
the phones and tablets you're using
today

00:04:05.120 --> 00:04:05.130
today
 

00:04:05.130 --> 00:04:07.250
today
now you can't create a thread for every

00:04:07.250 --> 00:04:07.260
now you can't create a thread for every
 

00:04:07.260 --> 00:04:09.260
now you can't create a thread for every
Network request you ever use because

00:04:09.260 --> 00:04:09.270
Network request you ever use because
 

00:04:09.270 --> 00:04:11.120
Network request you ever use because
Fred's taking the space of about a

00:04:11.120 --> 00:04:11.130
Fred's taking the space of about a
 

00:04:11.130 --> 00:04:12.980
Fred's taking the space of about a
megabyte to 2 megabytes of RAM every

00:04:12.980 --> 00:04:12.990
megabyte to 2 megabytes of RAM every
 

00:04:12.990 --> 00:04:14.870
megabyte to 2 megabytes of RAM every
time you create one that's why Fred

00:04:14.870 --> 00:04:14.880
time you create one that's why Fred
 

00:04:14.880 --> 00:04:18.110
time you create one that's why Fred
pools and actually cache Fred's for you

00:04:18.110 --> 00:04:18.120
pools and actually cache Fred's for you
 

00:04:18.120 --> 00:04:20.210
pools and actually cache Fred's for you
now carotenes on the other hand taking

00:04:20.210 --> 00:04:20.220
now carotenes on the other hand taking
 

00:04:20.220 --> 00:04:22.420
now carotenes on the other hand taking
the sort of realm of tens of kilobytes

00:04:22.420 --> 00:04:22.430
the sort of realm of tens of kilobytes
 

00:04:22.430 --> 00:04:24.740
the sort of realm of tens of kilobytes
in turns out read carotene they use

00:04:24.740 --> 00:04:24.750
in turns out read carotene they use
 

00:04:24.750 --> 00:04:26.300
in turns out read carotene they use
Fred's underneath but they use them a

00:04:26.300 --> 00:04:26.310
Fred's underneath but they use them a
 

00:04:26.310 --> 00:04:27.670
Fred's underneath but they use them a
much more optimal way

00:04:27.670 --> 00:04:27.680
much more optimal way
 

00:04:27.680 --> 00:04:30.290
much more optimal way
also there in my mind anyway they have

00:04:30.290 --> 00:04:30.300
also there in my mind anyway they have
 

00:04:30.300 --> 00:04:32.270
also there in my mind anyway they have
an easier development model it's a lot

00:04:32.270 --> 00:04:32.280
an easier development model it's a lot
 

00:04:32.280 --> 00:04:34.520
an easier development model it's a lot
easier for developers to kind of come

00:04:34.520 --> 00:04:34.530
easier for developers to kind of come
 

00:04:34.530 --> 00:04:38.660
easier for developers to kind of come
into a new source source source and see

00:04:38.660 --> 00:04:38.670
into a new source source source and see
 

00:04:38.670 --> 00:04:40.670
into a new source source source and see
an imperative line-by-line

00:04:40.670 --> 00:04:40.680
an imperative line-by-line
 

00:04:40.680 --> 00:04:43.430
an imperative line-by-line
cocoa routine over something like an Rx

00:04:43.430 --> 00:04:43.440
cocoa routine over something like an Rx
 

00:04:43.440 --> 00:04:45.350
cocoa routine over something like an Rx
Java chain like to have to understand

00:04:45.350 --> 00:04:45.360
Java chain like to have to understand
 

00:04:45.360 --> 00:04:46.970
Java chain like to have to understand
what's happening there as a in my mod

00:04:46.970 --> 00:04:46.980
what's happening there as a in my mod
 

00:04:46.980 --> 00:04:48.800
what's happening there as a in my mod
anyway easier and same thing for

00:04:48.800 --> 00:04:48.810
anyway easier and same thing for
 

00:04:48.810 --> 00:04:51.080
anyway easier and same thing for
callbacks like everyone knows what

00:04:51.080 --> 00:04:51.090
callbacks like everyone knows what
 

00:04:51.090 --> 00:04:52.940
callbacks like everyone knows what
callback hell and I'm to go line by line

00:04:52.940 --> 00:04:52.950
callback hell and I'm to go line by line
 

00:04:52.950 --> 00:04:54.770
callback hell and I'm to go line by line
and say see where you've been called and

00:04:54.770 --> 00:04:54.780
and say see where you've been called and
 

00:04:54.780 --> 00:04:57.080
and say see where you've been called and
stuff and so co-routines help hopefully

00:04:57.080 --> 00:04:57.090
stuff and so co-routines help hopefully
 

00:04:57.090 --> 00:05:00.980
stuff and so co-routines help hopefully
anyway fix that so a lot of this talk

00:05:00.980 --> 00:05:00.990
anyway fix that so a lot of this talk
 

00:05:00.990 --> 00:05:03.050
anyway fix that so a lot of this talk
was written in mind with an app a sample

00:05:03.050 --> 00:05:03.060
was written in mind with an app a sample
 

00:05:03.060 --> 00:05:04.280
was written in mind with an app a sample
app that I've been writing for the past

00:05:04.280 --> 00:05:04.290
app that I've been writing for the past
 

00:05:04.290 --> 00:05:06.800
app that I've been writing for the past
twelve months or so good TV it was

00:05:06.800 --> 00:05:06.810
twelve months or so good TV it was
 

00:05:06.810 --> 00:05:09.050
twelve months or so good TV it was
originally I went all-in on Eric's job

00:05:09.050 --> 00:05:09.060
originally I went all-in on Eric's job
 

00:05:09.060 --> 00:05:10.460
originally I went all-in on Eric's job
it was Eric's Java from top to bottom

00:05:10.460 --> 00:05:10.470
it was Eric's Java from top to bottom
 

00:05:10.470 --> 00:05:13.400
it was Eric's Java from top to bottom
and I've kind of slowly brought curtains

00:05:13.400 --> 00:05:13.410
and I've kind of slowly brought curtains
 

00:05:13.410 --> 00:05:15.650
and I've kind of slowly brought curtains
into it it's now about 50% carotenes 50%

00:05:15.650 --> 00:05:15.660
into it it's now about 50% carotenes 50%
 

00:05:15.660 --> 00:05:17.630
into it it's now about 50% carotenes 50%
Eric's Java so he still uses both and I

00:05:17.630 --> 00:05:17.640
Eric's Java so he still uses both and I
 

00:05:17.640 --> 00:05:19.310
Eric's Java so he still uses both and I
think they both have a place in Android

00:05:19.310 --> 00:05:19.320
think they both have a place in Android
 

00:05:19.320 --> 00:05:24.160
think they both have a place in Android
development and so yeah go views both

00:05:24.160 --> 00:05:24.170
development and so yeah go views both
 

00:05:24.170 --> 00:05:26.960
development and so yeah go views both
now as Android developers we have to

00:05:26.960 --> 00:05:26.970
now as Android developers we have to
 

00:05:26.970 --> 00:05:29.350
now as Android developers we have to
care about apk size and Method counts

00:05:29.350 --> 00:05:29.360
care about apk size and Method counts
 

00:05:29.360 --> 00:05:32.330
care about apk size and Method counts
now in Kotlin in my off anyway I'm using

00:05:32.330 --> 00:05:32.340
now in Kotlin in my off anyway I'm using
 

00:05:32.340 --> 00:05:35.030
now in Kotlin in my off anyway I'm using
free libraries from the Kotlin Curtin's

00:05:35.030 --> 00:05:35.040
free libraries from the Kotlin Curtin's
 

00:05:35.040 --> 00:05:37.790
free libraries from the Kotlin Curtin's
kind of tree the core which contains the

00:05:37.790 --> 00:05:37.800
kind of tree the core which contains the
 

00:05:37.800 --> 00:05:38.980
kind of tree the core which contains the
majority of what you'll actually use

00:05:38.980 --> 00:05:38.990
majority of what you'll actually use
 

00:05:38.990 --> 00:05:41.180
majority of what you'll actually use
Android which had support for the

00:05:41.180 --> 00:05:41.190
Android which had support for the
 

00:05:41.190 --> 00:05:42.680
Android which had support for the
Android main thread amongst other small

00:05:42.680 --> 00:05:42.690
Android main thread amongst other small
 

00:05:42.690 --> 00:05:44.840
Android main thread amongst other small
things and then arcs to which allows you

00:05:44.840 --> 00:05:44.850
things and then arcs to which allows you
 

00:05:44.850 --> 00:05:47.270
things and then arcs to which allows you
to interact with arcs Java so if you're

00:05:47.270 --> 00:05:47.280
to interact with arcs Java so if you're
 

00:05:47.280 --> 00:05:48.350
to interact with arcs Java so if you're
not using Irish Java you won't need that

00:05:48.350 --> 00:05:48.360
not using Irish Java you won't need that
 

00:05:48.360 --> 00:05:51.530
not using Irish Java you won't need that
one it's pretty small anyway now if you

00:05:51.530 --> 00:05:51.540
one it's pretty small anyway now if you
 

00:05:51.540 --> 00:05:52.190
one it's pretty small anyway now if you
actually pull down

00:05:52.190 --> 00:05:52.200
actually pull down
 

00:05:52.200 --> 00:05:53.480
actually pull down
there's jar file store from maven

00:05:53.480 --> 00:05:53.490
there's jar file store from maven
 

00:05:53.490 --> 00:05:55.910
there's jar file store from maven
central or wherever they would come to

00:05:55.910 --> 00:05:55.920
central or wherever they would come to
 

00:05:55.920 --> 00:05:57.950
central or wherever they would come to
about 700 centi four kilobytes so that's

00:05:57.950 --> 00:05:57.960
about 700 centi four kilobytes so that's
 

00:05:57.960 --> 00:05:59.540
about 700 centi four kilobytes so that's
quite big and it should be a you know

00:05:59.540 --> 00:05:59.550
quite big and it should be a you know
 

00:05:59.550 --> 00:06:01.820
quite big and it should be a you know
alarm bells are ringin but once you

00:06:01.820 --> 00:06:01.830
alarm bells are ringin but once you
 

00:06:01.830 --> 00:06:03.530
alarm bells are ringin but once you
actually put that in your apk it

00:06:03.530 --> 00:06:03.540
actually put that in your apk it
 

00:06:03.540 --> 00:06:05.540
actually put that in your apk it
actually shrinks down six-pack ting and

00:06:05.540 --> 00:06:05.550
actually shrinks down six-pack ting and
 

00:06:05.550 --> 00:06:07.640
actually shrinks down six-pack ting and
it comes down to about 500 kilobytes but

00:06:07.640 --> 00:06:07.650
it comes down to about 500 kilobytes but
 

00:06:07.650 --> 00:06:09.110
it comes down to about 500 kilobytes but
that method references are still quite

00:06:09.110 --> 00:06:09.120
that method references are still quite
 

00:06:09.120 --> 00:06:10.820
that method references are still quite
high that's like 5 percent if you're 64

00:06:10.820 --> 00:06:10.830
high that's like 5 percent if you're 64
 

00:06:10.830 --> 00:06:15.320
high that's like 5 percent if you're 64
K as soon as you turn on minify and now

00:06:15.320 --> 00:06:15.330
K as soon as you turn on minify and now
 

00:06:15.330 --> 00:06:16.910
K as soon as you turn on minify and now
this is just tree shaking so that no

00:06:16.910 --> 00:06:16.920
this is just tree shaking so that no
 

00:06:16.920 --> 00:06:19.820
this is just tree shaking so that no
optimization turned on here or ProGuard

00:06:19.820 --> 00:06:19.830
optimization turned on here or ProGuard
 

00:06:19.830 --> 00:06:21.860
optimization turned on here or ProGuard
they both have similar results you're

00:06:21.860 --> 00:06:21.870
they both have similar results you're
 

00:06:21.870 --> 00:06:22.730
they both have similar results you're
looking about a hundred and twelve

00:06:22.730 --> 00:06:22.740
looking about a hundred and twelve
 

00:06:22.740 --> 00:06:25.310
looking about a hundred and twelve
thirteen k so a lot less and again the

00:06:25.310 --> 00:06:25.320
thirteen k so a lot less and again the
 

00:06:25.320 --> 00:06:27.350
thirteen k so a lot less and again the
method references has dropped but as

00:06:27.350 --> 00:06:27.360
method references has dropped but as
 

00:06:27.360 --> 00:06:29.450
method references has dropped but as
soon as you turn on optimization and

00:06:29.450 --> 00:06:29.460
soon as you turn on optimization and
 

00:06:29.460 --> 00:06:30.890
soon as you turn on optimization and
then you go for all of trying to fix all

00:06:30.890 --> 00:06:30.900
then you go for all of trying to fix all
 

00:06:30.900 --> 00:06:32.900
then you go for all of trying to fix all
the ProGuard rules you're coming down to

00:06:32.900 --> 00:06:32.910
the ProGuard rules you're coming down to
 

00:06:32.910 --> 00:06:34.070
the ProGuard rules you're coming down to
that magic valley which is less than

00:06:34.070 --> 00:06:34.080
that magic valley which is less than
 

00:06:34.080 --> 00:06:35.990
that magic valley which is less than
hundred kilobytes and again you're met

00:06:35.990 --> 00:06:36.000
hundred kilobytes and again you're met
 

00:06:36.000 --> 00:06:38.210
hundred kilobytes and again you're met
with references now 854 like it's less

00:06:38.210 --> 00:06:38.220
with references now 854 like it's less
 

00:06:38.220 --> 00:06:42.820
with references now 854 like it's less
than 1% 1% of your reference

00:06:42.820 --> 00:06:42.830
 

00:06:42.830 --> 00:06:44.200
now one thing to note when you're is in

00:06:44.200 --> 00:06:44.210
now one thing to note when you're is in
 

00:06:44.210 --> 00:06:46.029
now one thing to note when you're is in
ProGuard or r8 is that you need to use

00:06:46.029 --> 00:06:46.039
ProGuard or r8 is that you need to use
 

00:06:46.039 --> 00:06:48.040
ProGuard or r8 is that you need to use
this rule it's not currently bundled

00:06:48.040 --> 00:06:48.050
this rule it's not currently bundled
 

00:06:48.050 --> 00:06:50.290
this rule it's not currently bundled
with the jars but hopefully it'll be

00:06:50.290 --> 00:06:50.300
with the jars but hopefully it'll be
 

00:06:50.300 --> 00:06:52.450
with the jars but hopefully it'll be
added soon but it's a pretty simple rule

00:06:52.450 --> 00:06:52.460
added soon but it's a pretty simple rule
 

00:06:52.460 --> 00:06:59.020
added soon but it's a pretty simple rule
to add so hopefully by now you're

00:06:59.020 --> 00:06:59.030
to add so hopefully by now you're
 

00:06:59.030 --> 00:07:00.430
to add so hopefully by now you're
thinking about how you might use

00:07:00.430 --> 00:07:00.440
thinking about how you might use
 

00:07:00.440 --> 00:07:02.200
thinking about how you might use
co-routines in your app so let's go

00:07:02.200 --> 00:07:02.210
co-routines in your app so let's go
 

00:07:02.210 --> 00:07:02.950
co-routines in your app so let's go
ahead and talk a little bit about

00:07:02.950 --> 00:07:02.960
ahead and talk a little bit about
 

00:07:02.960 --> 00:07:05.710
ahead and talk a little bit about
actually writing them so anything that

00:07:05.710 --> 00:07:05.720
actually writing them so anything that
 

00:07:05.720 --> 00:07:07.719
actually writing them so anything that
you can do with a one shot callback or

00:07:07.719 --> 00:07:07.729
you can do with a one shot callback or
 

00:07:07.729 --> 00:07:08.980
you can do with a one shot callback or
future you can do with a suspend

00:07:08.980 --> 00:07:08.990
future you can do with a suspend
 

00:07:08.990 --> 00:07:11.110
future you can do with a suspend
function everything with co-routines is

00:07:11.110 --> 00:07:11.120
function everything with co-routines is
 

00:07:11.120 --> 00:07:12.540
function everything with co-routines is
kind of based around this idea of

00:07:12.540 --> 00:07:12.550
kind of based around this idea of
 

00:07:12.550 --> 00:07:14.680
kind of based around this idea of
suspending function as a basis for

00:07:14.680 --> 00:07:14.690
suspending function as a basis for
 

00:07:14.690 --> 00:07:16.990
suspending function as a basis for
creating api's suspend functions can

00:07:16.990 --> 00:07:17.000
creating api's suspend functions can
 

00:07:17.000 --> 00:07:18.040
creating api's suspend functions can
stop and yield their thread without

00:07:18.040 --> 00:07:18.050
stop and yield their thread without
 

00:07:18.050 --> 00:07:19.719
stop and yield their thread without
blocking and they can be resumed later

00:07:19.719 --> 00:07:19.729
blocking and they can be resumed later
 

00:07:19.729 --> 00:07:22.089
blocking and they can be resumed later
like a callback and they can only be

00:07:22.089 --> 00:07:22.099
like a callback and they can only be
 

00:07:22.099 --> 00:07:24.010
like a callback and they can only be
called from another suspend function so

00:07:24.010 --> 00:07:24.020
called from another suspend function so
 

00:07:24.020 --> 00:07:25.240
called from another suspend function so
just to set up all the machinery

00:07:25.240 --> 00:07:25.250
just to set up all the machinery
 

00:07:25.250 --> 00:07:27.610
just to set up all the machinery
involved in that but the core thing is

00:07:27.610 --> 00:07:27.620
involved in that but the core thing is
 

00:07:27.620 --> 00:07:28.960
involved in that but the core thing is
is that all of this kind of fits on one

00:07:28.960 --> 00:07:28.970
is that all of this kind of fits on one
 

00:07:28.970 --> 00:07:30.879
is that all of this kind of fits on one
slide there's less to remember the rest

00:07:30.879 --> 00:07:30.889
slide there's less to remember the rest
 

00:07:30.889 --> 00:07:32.320
slide there's less to remember the rest
of the language still works the same in

00:07:32.320 --> 00:07:32.330
of the language still works the same in
 

00:07:32.330 --> 00:07:34.060
of the language still works the same in
the presence of suspend functions and

00:07:34.060 --> 00:07:34.070
the presence of suspend functions and
 

00:07:34.070 --> 00:07:35.649
the presence of suspend functions and
we'll spend the rest of the talk talking

00:07:35.649 --> 00:07:35.659
we'll spend the rest of the talk talking
 

00:07:35.659 --> 00:07:38.950
we'll spend the rest of the talk talking
about that so here's a suspending method

00:07:38.950 --> 00:07:38.960
about that so here's a suspending method
 

00:07:38.960 --> 00:07:41.020
about that so here's a suspending method
from chris's app actually this is a data

00:07:41.020 --> 00:07:41.030
from chris's app actually this is a data
 

00:07:41.030 --> 00:07:43.390
from chris's app actually this is a data
repository for TV shows so you go ahead

00:07:43.390 --> 00:07:43.400
repository for TV shows so you go ahead
 

00:07:43.400 --> 00:07:44.830
repository for TV shows so you go ahead
and you call this update show function

00:07:44.830 --> 00:07:44.840
and you call this update show function
 

00:07:44.840 --> 00:07:49.930
and you call this update show function
with an ID we get some shows and we get

00:07:49.930 --> 00:07:49.940
with an ID we get some shows and we get
 

00:07:49.940 --> 00:07:51.580
with an ID we get some shows and we get
a little bit more data from a remote

00:07:51.580 --> 00:07:51.590
a little bit more data from a remote
 

00:07:51.590 --> 00:07:54.370
a little bit more data from a remote
source and a little bit more data from a

00:07:54.370 --> 00:07:54.380
source and a little bit more data from a
 

00:07:54.380 --> 00:07:55.200
source and a little bit more data from a
second source

00:07:55.200 --> 00:07:55.210
second source
 

00:07:55.210 --> 00:07:57.459
second source
finally we merge all that together and

00:07:57.459 --> 00:07:57.469
finally we merge all that together and
 

00:07:57.469 --> 00:08:01.629
finally we merge all that together and
we save that data so these three main

00:08:01.629 --> 00:08:01.639
we save that data so these three main
 

00:08:01.639 --> 00:08:03.370
we save that data so these three main
tasks where we spend the bulk of the

00:08:03.370 --> 00:08:03.380
tasks where we spend the bulk of the
 

00:08:03.380 --> 00:08:05.320
tasks where we spend the bulk of the
time these are done sequentially but

00:08:05.320 --> 00:08:05.330
time these are done sequentially but
 

00:08:05.330 --> 00:08:06.909
time these are done sequentially but
none of these tasks have a dependency on

00:08:06.909 --> 00:08:06.919
none of these tasks have a dependency on
 

00:08:06.919 --> 00:08:08.529
none of these tasks have a dependency on
one another so wouldn't it be nice if we

00:08:08.529 --> 00:08:08.539
one another so wouldn't it be nice if we
 

00:08:08.539 --> 00:08:11.860
one another so wouldn't it be nice if we
could do this concurrently so with the

00:08:11.860 --> 00:08:11.870
could do this concurrently so with the
 

00:08:11.870 --> 00:08:14.320
could do this concurrently so with the
async builder we can do this so we're

00:08:14.320 --> 00:08:14.330
async builder we can do this so we're
 

00:08:14.330 --> 00:08:16.029
async builder we can do this so we're
gonna start from the very top here we

00:08:16.029 --> 00:08:16.039
gonna start from the very top here we
 

00:08:16.039 --> 00:08:17.770
gonna start from the very top here we
start by opening a co-routine scope and

00:08:17.770 --> 00:08:17.780
start by opening a co-routine scope and
 

00:08:17.780 --> 00:08:19.330
start by opening a co-routine scope and
this is important because this allows us

00:08:19.330 --> 00:08:19.340
this is important because this allows us
 

00:08:19.340 --> 00:08:21.100
this is important because this allows us
to perform this parallel decomposition

00:08:21.100 --> 00:08:21.110
to perform this parallel decomposition
 

00:08:21.110 --> 00:08:23.890
to perform this parallel decomposition
using the async builder it brings a cur

00:08:23.890 --> 00:08:23.900
using the async builder it brings a cur
 

00:08:23.900 --> 00:08:25.689
using the async builder it brings a cur
routine scope receiver into scope for

00:08:25.689 --> 00:08:25.699
routine scope receiver into scope for
 

00:08:25.699 --> 00:08:29.230
routine scope receiver into scope for
this lambda block that we have so first

00:08:29.230 --> 00:08:29.240
this lambda block that we have so first
 

00:08:29.240 --> 00:08:31.779
this lambda block that we have so first
we build the async operation and the

00:08:31.779 --> 00:08:31.789
we build the async operation and the
 

00:08:31.789 --> 00:08:34.930
we build the async operation and the
second and the third and then we await

00:08:34.930 --> 00:08:34.940
second and the third and then we await
 

00:08:34.940 --> 00:08:37.060
second and the third and then we await
the result of each one in turn so the

00:08:37.060 --> 00:08:37.070
the result of each one in turn so the
 

00:08:37.070 --> 00:08:38.319
the result of each one in turn so the
nice thing is here is that we've

00:08:38.319 --> 00:08:38.329
nice thing is here is that we've
 

00:08:38.329 --> 00:08:40.149
nice thing is here is that we've
launched all of these things let them

00:08:40.149 --> 00:08:40.159
launched all of these things let them
 

00:08:40.159 --> 00:08:42.370
launched all of these things let them
run kind of independently and then we

00:08:42.370 --> 00:08:42.380
run kind of independently and then we
 

00:08:42.380 --> 00:08:46.000
run kind of independently and then we
bring them back together again so since

00:08:46.000 --> 00:08:46.010
bring them back together again so since
 

00:08:46.010 --> 00:08:47.620
bring them back together again so since
all of these things can be now done in

00:08:47.620 --> 00:08:47.630
all of these things can be now done in
 

00:08:47.630 --> 00:08:49.449
all of these things can be now done in
parallel things should complete faster

00:08:49.449 --> 00:08:49.459
parallel things should complete faster
 

00:08:49.459 --> 00:08:51.610
parallel things should complete faster
so trying to do this with raw threads by

00:08:51.610 --> 00:08:51.620
so trying to do this with raw threads by
 

00:08:51.620 --> 00:08:53.490
so trying to do this with raw threads by
hand would be a lot more code which

00:08:53.490 --> 00:08:53.500
hand would be a lot more code which
 

00:08:53.500 --> 00:08:56.160
hand would be a lot more code which
need to maintain along the way so the

00:08:56.160 --> 00:08:56.170
need to maintain along the way so the
 

00:08:56.170 --> 00:08:58.230
need to maintain along the way so the
async builder is for when we want to run

00:08:58.230 --> 00:08:58.240
async builder is for when we want to run
 

00:08:58.240 --> 00:08:59.880
async builder is for when we want to run
something and then later await the

00:08:59.880 --> 00:08:59.890
something and then later await the
 

00:08:59.890 --> 00:09:01.380
something and then later await the
result after kind of giving it a chance

00:09:01.380 --> 00:09:01.390
result after kind of giving it a chance
 

00:09:01.390 --> 00:09:02.640
result after kind of giving it a chance
to finish while we're doing something

00:09:02.640 --> 00:09:02.650
to finish while we're doing something
 

00:09:02.650 --> 00:09:05.070
to finish while we're doing something
else it's very similar to C sharp or

00:09:05.070 --> 00:09:05.080
else it's very similar to C sharp or
 

00:09:05.080 --> 00:09:08.370
else it's very similar to C sharp or
promises in JavaScript so what about

00:09:08.370 --> 00:09:08.380
promises in JavaScript so what about
 

00:09:08.380 --> 00:09:09.390
promises in JavaScript so what about
when you just want to launch something

00:09:09.390 --> 00:09:09.400
when you just want to launch something
 

00:09:09.400 --> 00:09:10.830
when you just want to launch something
and forget about it though well there's

00:09:10.830 --> 00:09:10.840
and forget about it though well there's
 

00:09:10.840 --> 00:09:12.420
and forget about it though well there's
something for that too it's just called

00:09:12.420 --> 00:09:12.430
something for that too it's just called
 

00:09:12.430 --> 00:09:15.200
something for that too it's just called
launch it works pretty much the same way

00:09:15.200 --> 00:09:15.210
launch it works pretty much the same way
 

00:09:15.210 --> 00:09:18.540
launch it works pretty much the same way
so in this case it's is a lot more

00:09:18.540 --> 00:09:18.550
so in this case it's is a lot more
 

00:09:18.550 --> 00:09:21.150
so in this case it's is a lot more
similar to executors and just sort of

00:09:21.150 --> 00:09:21.160
similar to executors and just sort of
 

00:09:21.160 --> 00:09:22.680
similar to executors and just sort of
submitting a task submitting something

00:09:22.680 --> 00:09:22.690
submitting a task submitting something
 

00:09:22.690 --> 00:09:24.480
submitting a task submitting something
to an Android handler for example when

00:09:24.480 --> 00:09:24.490
to an Android handler for example when
 

00:09:24.490 --> 00:09:25.890
to an Android handler for example when
we just want to fire and forget and deal

00:09:25.890 --> 00:09:25.900
we just want to fire and forget and deal
 

00:09:25.900 --> 00:09:28.800
we just want to fire and forget and deal
with it later so that's a little bit

00:09:28.800 --> 00:09:28.810
with it later so that's a little bit
 

00:09:28.810 --> 00:09:30.690
with it later so that's a little bit
about the basics of running co-routines

00:09:30.690 --> 00:09:30.700
about the basics of running co-routines
 

00:09:30.700 --> 00:09:32.610
about the basics of running co-routines
in isolation how do you run them on

00:09:32.610 --> 00:09:32.620
in isolation how do you run them on
 

00:09:32.620 --> 00:09:35.610
in isolation how do you run them on
Android though so in this case you might

00:09:35.610 --> 00:09:35.620
Android though so in this case you might
 

00:09:35.620 --> 00:09:37.470
Android though so in this case you might
have an arch components of you model and

00:09:37.470 --> 00:09:37.480
have an arch components of you model and
 

00:09:37.480 --> 00:09:38.850
have an arch components of you model and
wouldn't it be nice if we had kind of an

00:09:38.850 --> 00:09:38.860
wouldn't it be nice if we had kind of an
 

00:09:38.860 --> 00:09:40.590
wouldn't it be nice if we had kind of an
easy way to put all this stuff together

00:09:40.590 --> 00:09:40.600
easy way to put all this stuff together
 

00:09:40.600 --> 00:09:42.480
easy way to put all this stuff together
automatically we needed to be able to

00:09:42.480 --> 00:09:42.490
automatically we needed to be able to
 

00:09:42.490 --> 00:09:44.760
automatically we needed to be able to
open a scope so where do you get one of

00:09:44.760 --> 00:09:44.770
open a scope so where do you get one of
 

00:09:44.770 --> 00:09:46.050
open a scope so where do you get one of
those things to begin with that you can

00:09:46.050 --> 00:09:46.060
those things to begin with that you can
 

00:09:46.060 --> 00:09:48.960
those things to begin with that you can
launch things into well in this case our

00:09:48.960 --> 00:09:48.970
launch things into well in this case our
 

00:09:48.970 --> 00:09:51.090
launch things into well in this case our
view model has a show repository which

00:09:51.090 --> 00:09:51.100
view model has a show repository which
 

00:09:51.100 --> 00:09:52.680
view model has a show repository which
is our data layer and we have a view

00:09:52.680 --> 00:09:52.690
is our data layer and we have a view
 

00:09:52.690 --> 00:09:54.420
is our data layer and we have a view
state that the viewer activity or

00:09:54.420 --> 00:09:54.430
state that the viewer activity or
 

00:09:54.430 --> 00:09:57.150
state that the viewer activity or
fragment can observe we can refresh on

00:09:57.150 --> 00:09:57.160
fragment can observe we can refresh on
 

00:09:57.160 --> 00:09:59.670
fragment can observe we can refresh on
construction and when we actually go to

00:09:59.670 --> 00:09:59.680
construction and when we actually go to
 

00:09:59.680 --> 00:10:01.860
construction and when we actually go to
refresh we launch into this new view

00:10:01.860 --> 00:10:01.870
refresh we launch into this new view
 

00:10:01.870 --> 00:10:03.870
refresh we launch into this new view
model scope extension property this is

00:10:03.870 --> 00:10:03.880
model scope extension property this is
 

00:10:03.880 --> 00:10:05.310
model scope extension property this is
coming very soon to the Android X

00:10:05.310 --> 00:10:05.320
coming very soon to the Android X
 

00:10:05.320 --> 00:10:07.230
coming very soon to the Android X
libraries those of you who like to watch

00:10:07.230 --> 00:10:07.240
libraries those of you who like to watch
 

00:10:07.240 --> 00:10:09.030
libraries those of you who like to watch
commits in a OSP might have seen this

00:10:09.030 --> 00:10:09.040
commits in a OSP might have seen this
 

00:10:09.040 --> 00:10:09.810
commits in a OSP might have seen this
going already

00:10:09.810 --> 00:10:09.820
going already
 

00:10:09.820 --> 00:10:12.150
going already
so the Refresh function launches a car

00:10:12.150 --> 00:10:12.160
so the Refresh function launches a car
 

00:10:12.160 --> 00:10:13.800
so the Refresh function launches a car
routine uses the launch builder which

00:10:13.800 --> 00:10:13.810
routine uses the launch builder which
 

00:10:13.810 --> 00:10:15.120
routine uses the launch builder which
then calls the update function on the

00:10:15.120 --> 00:10:15.130
then calls the update function on the
 

00:10:15.130 --> 00:10:17.130
then calls the update function on the
repository and our co-routine resumes

00:10:17.130 --> 00:10:17.140
repository and our co-routine resumes
 

00:10:17.140 --> 00:10:19.020
repository and our co-routine resumes
back on the main thread after update

00:10:19.020 --> 00:10:19.030
back on the main thread after update
 

00:10:19.030 --> 00:10:21.240
back on the main thread after update
show returns so we can safely manipulate

00:10:21.240 --> 00:10:21.250
show returns so we can safely manipulate
 

00:10:21.250 --> 00:10:22.890
show returns so we can safely manipulate
our view hierarchy with the results just

00:10:22.890 --> 00:10:22.900
our view hierarchy with the results just
 

00:10:22.900 --> 00:10:24.270
our view hierarchy with the results just
on the next line of code we have this

00:10:24.270 --> 00:10:24.280
on the next line of code we have this
 

00:10:24.280 --> 00:10:26.310
on the next line of code we have this
nice clean sequential ordering of

00:10:26.310 --> 00:10:26.320
nice clean sequential ordering of
 

00:10:26.320 --> 00:10:29.820
nice clean sequential ordering of
operations so those of you who want to

00:10:29.820 --> 00:10:29.830
operations so those of you who want to
 

00:10:29.830 --> 00:10:31.230
operations so those of you who want to
go check out this thing that's upcoming

00:10:31.230 --> 00:10:31.240
go check out this thing that's upcoming
 

00:10:31.240 --> 00:10:33.990
go check out this thing that's upcoming
you can go to this link take a look at

00:10:33.990 --> 00:10:34.000
you can go to this link take a look at
 

00:10:34.000 --> 00:10:36.000
you can go to this link take a look at
the change so far in advance of the

00:10:36.000 --> 00:10:36.010
the change so far in advance of the
 

00:10:36.010 --> 00:10:37.380
the change so far in advance of the
actual release this is coming in an

00:10:37.380 --> 00:10:37.390
actual release this is coming in an
 

00:10:37.390 --> 00:10:40.260
actual release this is coming in an
upcoming release of our KTX libraries so

00:10:40.260 --> 00:10:40.270
upcoming release of our KTX libraries so
 

00:10:40.270 --> 00:10:42.150
upcoming release of our KTX libraries so
let's go ahead and demystify how some of

00:10:42.150 --> 00:10:42.160
let's go ahead and demystify how some of
 

00:10:42.160 --> 00:10:43.710
let's go ahead and demystify how some of
this works a little bit but before we

00:10:43.710 --> 00:10:43.720
this works a little bit but before we
 

00:10:43.720 --> 00:10:45.750
this works a little bit but before we
can go to too deep we need to start

00:10:45.750 --> 00:10:45.760
can go to too deep we need to start
 

00:10:45.760 --> 00:10:46.590
can go to too deep we need to start
talking about some of the other

00:10:46.590 --> 00:10:46.600
talking about some of the other
 

00:10:46.600 --> 00:10:47.820
talking about some of the other
primitives that are work under the hood

00:10:47.820 --> 00:10:47.830
primitives that are work under the hood
 

00:10:47.830 --> 00:10:50.700
primitives that are work under the hood
here ok great so we're gonna talk about

00:10:50.700 --> 00:10:50.710
here ok great so we're gonna talk about
 

00:10:50.710 --> 00:10:54.270
here ok great so we're gonna talk about
jobs a little bit so what is it job so

00:10:54.270 --> 00:10:54.280
jobs a little bit so what is it job so
 

00:10:54.280 --> 00:10:55.440
jobs a little bit so what is it job so
here when you actually look at this code

00:10:55.440 --> 00:10:55.450
here when you actually look at this code
 

00:10:55.450 --> 00:10:57.829
here when you actually look at this code
snippet when we just look out from Adam

00:10:57.829 --> 00:10:57.839
snippet when we just look out from Adam
 

00:10:57.839 --> 00:10:59.820
snippet when we just look out from Adam
you're actually using the launch method

00:10:59.820 --> 00:10:59.830
you're actually using the launch method
 

00:10:59.830 --> 00:11:01.980
you're actually using the launch method
now when you actually run that launch

00:11:01.980 --> 00:11:01.990
now when you actually run that launch
 

00:11:01.990 --> 00:11:04.560
now when you actually run that launch
method it returns what we call a job now

00:11:04.560 --> 00:11:04.570
method it returns what we call a job now
 

00:11:04.570 --> 00:11:06.780
method it returns what we call a job now
job is allows us to reference keep a

00:11:06.780 --> 00:11:06.790
job is allows us to reference keep a
 

00:11:06.790 --> 00:11:07.330
job is allows us to reference keep a
reference

00:11:07.330 --> 00:11:07.340
reference
 

00:11:07.340 --> 00:11:09.250
reference
I'm going piece of work and it has

00:11:09.250 --> 00:11:09.260
I'm going piece of work and it has
 

00:11:09.260 --> 00:11:10.570
I'm going piece of work and it has
really one method on it and it's called

00:11:10.570 --> 00:11:10.580
really one method on it and it's called
 

00:11:10.580 --> 00:11:13.420
really one method on it and it's called
cancel now obviously in this example we

00:11:13.420 --> 00:11:13.430
cancel now obviously in this example we
 

00:11:13.430 --> 00:11:14.650
cancel now obviously in this example we
wouldn't just call cancel straightaway

00:11:14.650 --> 00:11:14.660
wouldn't just call cancel straightaway
 

00:11:14.660 --> 00:11:15.730
wouldn't just call cancel straightaway
after we've launched something that

00:11:15.730 --> 00:11:15.740
after we've launched something that
 

00:11:15.740 --> 00:11:18.670
after we've launched something that
would be ridiculous but what it does

00:11:18.670 --> 00:11:18.680
would be ridiculous but what it does
 

00:11:18.680 --> 00:11:20.590
would be ridiculous but what it does
allow us to do is handle something like

00:11:20.590 --> 00:11:20.600
allow us to do is handle something like
 

00:11:20.600 --> 00:11:22.690
allow us to do is handle something like
double refreshes like if you have

00:11:22.690 --> 00:11:22.700
double refreshes like if you have
 

00:11:22.700 --> 00:11:23.860
double refreshes like if you have
something like forward pull to refresh

00:11:23.860 --> 00:11:23.870
something like forward pull to refresh
 

00:11:23.870 --> 00:11:26.110
something like forward pull to refresh
in your app and an automated refresh you

00:11:26.110 --> 00:11:26.120
in your app and an automated refresh you
 

00:11:26.120 --> 00:11:27.010
in your app and an automated refresh you
don't look both stuff in at the same

00:11:27.010 --> 00:11:27.020
don't look both stuff in at the same
 

00:11:27.020 --> 00:11:29.110
don't look both stuff in at the same
time and then you have two things happen

00:11:29.110 --> 00:11:29.120
time and then you have two things happen
 

00:11:29.120 --> 00:11:31.360
time and then you have two things happen
at the same time so here this code

00:11:31.360 --> 00:11:31.370
at the same time so here this code
 

00:11:31.370 --> 00:11:32.770
at the same time so here this code
snippet you can keep a reference to the

00:11:32.770 --> 00:11:32.780
snippet you can keep a reference to the
 

00:11:32.780 --> 00:11:35.050
snippet you can keep a reference to the
one that's currently running and if it

00:11:35.050 --> 00:11:35.060
one that's currently running and if it
 

00:11:35.060 --> 00:11:36.550
one that's currently running and if it
happens again like a refresh is called

00:11:36.550 --> 00:11:36.560
happens again like a refresh is called
 

00:11:36.560 --> 00:11:38.530
happens again like a refresh is called
and you can cancel the first one and so

00:11:38.530 --> 00:11:38.540
and you can cancel the first one and so
 

00:11:38.540 --> 00:11:40.090
and you can cancel the first one and so
that's the kind of app job kind of works

00:11:40.090 --> 00:11:40.100
that's the kind of app job kind of works
 

00:11:40.100 --> 00:11:42.460
that's the kind of app job kind of works
it's a very simple object but it allows

00:11:42.460 --> 00:11:42.470
it's a very simple object but it allows
 

00:11:42.470 --> 00:11:43.810
it's a very simple object but it allows
you to keep a reference of the ongoing

00:11:43.810 --> 00:11:43.820
you to keep a reference of the ongoing
 

00:11:43.820 --> 00:11:48.310
you to keep a reference of the ongoing
piece of work so you may have seen that

00:11:48.310 --> 00:11:48.320
piece of work so you may have seen that
 

00:11:48.320 --> 00:11:50.260
piece of work so you may have seen that
viewmodel scope thing and wondered what

00:11:50.260 --> 00:11:50.270
viewmodel scope thing and wondered what
 

00:11:50.270 --> 00:11:52.810
viewmodel scope thing and wondered what
is Adam explained it earlier and you can

00:11:52.810 --> 00:11:52.820
is Adam explained it earlier and you can
 

00:11:52.820 --> 00:11:55.630
is Adam explained it earlier and you can
have a scope and it provides you with

00:11:55.630 --> 00:11:55.640
have a scope and it provides you with
 

00:11:55.640 --> 00:11:57.940
have a scope and it provides you with
all the context you need to run so a

00:11:57.940 --> 00:11:57.950
all the context you need to run so a
 

00:11:57.950 --> 00:12:00.520
all the context you need to run so a
launch or an async so take a look at how

00:12:00.520 --> 00:12:00.530
launch or an async so take a look at how
 

00:12:00.530 --> 00:12:03.130
launch or an async so take a look at how
they actually work underneath so

00:12:03.130 --> 00:12:03.140
they actually work underneath so
 

00:12:03.140 --> 00:12:04.540
they actually work underneath so
co-routine scope is an interface that

00:12:04.540 --> 00:12:04.550
co-routine scope is an interface that
 

00:12:04.550 --> 00:12:07.780
co-routine scope is an interface that
allows objects to provide a scope for

00:12:07.780 --> 00:12:07.790
allows objects to provide a scope for
 

00:12:07.790 --> 00:12:11.140
allows objects to provide a scope for
carotenes think things like things with

00:12:11.140 --> 00:12:11.150
carotenes think things like things with
 

00:12:11.150 --> 00:12:13.720
carotenes think things like things with
a lifecycle so fragments activities view

00:12:13.720 --> 00:12:13.730
a lifecycle so fragments activities view
 

00:12:13.730 --> 00:12:15.430
a lifecycle so fragments activities view
model even and they can revise a

00:12:15.430 --> 00:12:15.440
model even and they can revise a
 

00:12:15.440 --> 00:12:17.320
model even and they can revise a
lifecycle for the curtain itself and

00:12:17.320 --> 00:12:17.330
lifecycle for the curtain itself and
 

00:12:17.330 --> 00:12:21.070
lifecycle for the curtain itself and
start and stop it as it needs a sink and

00:12:21.070 --> 00:12:21.080
start and stop it as it needs a sink and
 

00:12:21.080 --> 00:12:23.140
start and stop it as it needs a sink and
launch used to be sort of global methods

00:12:23.140 --> 00:12:23.150
launch used to be sort of global methods
 

00:12:23.150 --> 00:12:26.020
launch used to be sort of global methods
and now a recent refactor brought them

00:12:26.020 --> 00:12:26.030
and now a recent refactor brought them
 

00:12:26.030 --> 00:12:29.760
and now a recent refactor brought them
as instant methods on the carotene scope

00:12:29.760 --> 00:12:29.770
as instant methods on the carotene scope
 

00:12:29.770 --> 00:12:32.440
as instant methods on the carotene scope
what it means is then mentally anyway is

00:12:32.440 --> 00:12:32.450
what it means is then mentally anyway is
 

00:12:32.450 --> 00:12:34.000
what it means is then mentally anyway is
that instead of just launching something

00:12:34.000 --> 00:12:34.010
that instead of just launching something
 

00:12:34.010 --> 00:12:37.600
that instead of just launching something
you're launching a carotene on X so I'm

00:12:37.600 --> 00:12:37.610
you're launching a carotene on X so I'm
 

00:12:37.610 --> 00:12:39.280
you're launching a carotene on X so I'm
launching a curry teen on the activity

00:12:39.280 --> 00:12:39.290
launching a curry teen on the activity
 

00:12:39.290 --> 00:12:41.260
launching a curry teen on the activity
it just changed it mentally in your head

00:12:41.260 --> 00:12:41.270
it just changed it mentally in your head
 

00:12:41.270 --> 00:12:43.570
it just changed it mentally in your head
in that it's tied to the life cycle of

00:12:43.570 --> 00:12:43.580
in that it's tied to the life cycle of
 

00:12:43.580 --> 00:12:45.370
in that it's tied to the life cycle of
something else right if you're used to

00:12:45.370 --> 00:12:45.380
something else right if you're used to
 

00:12:45.380 --> 00:12:48.070
something else right if you're used to
working with the lifecycle owner in arch

00:12:48.070 --> 00:12:48.080
working with the lifecycle owner in arch
 

00:12:48.080 --> 00:12:49.660
working with the lifecycle owner in arch
components so far you know the lifecycle

00:12:49.660 --> 00:12:49.670
components so far you know the lifecycle
 

00:12:49.670 --> 00:12:51.970
components so far you know the lifecycle
owner has a lifecycle that you can then

00:12:51.970 --> 00:12:51.980
owner has a lifecycle that you can then
 

00:12:51.980 --> 00:12:53.950
owner has a lifecycle that you can then
observe and attach things to similarly a

00:12:53.950 --> 00:12:53.960
observe and attach things to similarly a
 

00:12:53.960 --> 00:12:55.630
observe and attach things to similarly a
co-routine scope has a co-routine

00:12:55.630 --> 00:12:55.640
co-routine scope has a co-routine
 

00:12:55.640 --> 00:12:57.430
co-routine scope has a co-routine
context that carries along everything

00:12:57.430 --> 00:12:57.440
context that carries along everything
 

00:12:57.440 --> 00:12:58.630
context that carries along everything
necessary to know how to launch

00:12:58.630 --> 00:12:58.640
necessary to know how to launch
 

00:12:58.640 --> 00:13:00.430
necessary to know how to launch
co-routine some of the stuff we're gonna

00:13:00.430 --> 00:13:00.440
co-routine some of the stuff we're gonna
 

00:13:00.440 --> 00:13:02.260
co-routine some of the stuff we're gonna
talk about a bit

00:13:02.260 --> 00:13:02.270
talk about a bit
 

00:13:02.270 --> 00:13:04.960
talk about a bit
and similarly correcting scopes provide

00:13:04.960 --> 00:13:04.970
and similarly correcting scopes provide
 

00:13:04.970 --> 00:13:06.460
and similarly correcting scopes provide
a default context so you can provide a

00:13:06.460 --> 00:13:06.470
a default context so you can provide a
 

00:13:06.470 --> 00:13:08.170
a default context so you can provide a
default context for all the curtains

00:13:08.170 --> 00:13:08.180
default context for all the curtains
 

00:13:08.180 --> 00:13:10.060
default context for all the curtains
that are overrun on it so I think things

00:13:10.060 --> 00:13:10.070
that are overrun on it so I think things
 

00:13:10.070 --> 00:13:11.860
that are overrun on it so I think things
like what kind of fred paul dispatcher

00:13:11.860 --> 00:13:11.870
like what kind of fred paul dispatcher
 

00:13:11.870 --> 00:13:14.800
like what kind of fred paul dispatcher
it runs on the job the parent jobs that

00:13:14.800 --> 00:13:14.810
it runs on the job the parent jobs that
 

00:13:14.810 --> 00:13:15.940
it runs on the job the parent jobs that
will actually to cancel it later and

00:13:15.940 --> 00:13:15.950
will actually to cancel it later and
 

00:13:15.950 --> 00:13:17.230
will actually to cancel it later and
other things which you can add to it

00:13:17.230 --> 00:13:17.240
other things which you can add to it
 

00:13:17.240 --> 00:13:20.300
other things which you can add to it
it's basically a map the context

00:13:20.300 --> 00:13:20.310
it's basically a map the context
 

00:13:20.310 --> 00:13:24.410
it's basically a map the context
and it's good that's a good day for

00:13:24.410 --> 00:13:24.420
and it's good that's a good day for
 

00:13:24.420 --> 00:13:27.889
and it's good that's a good day for
slide back okay cool so let's take a

00:13:27.889 --> 00:13:27.899
slide back okay cool so let's take a
 

00:13:27.899 --> 00:13:30.079
slide back okay cool so let's take a
look at another example this time we're

00:13:30.079 --> 00:13:30.089
look at another example this time we're
 

00:13:30.089 --> 00:13:31.610
look at another example this time we're
not going to use view model scope the

00:13:31.610 --> 00:13:31.620
not going to use view model scope the
 

00:13:31.620 --> 00:13:33.170
not going to use view model scope the
automated thing we've added to Android X

00:13:33.170 --> 00:13:33.180
automated thing we've added to Android X
 

00:13:33.180 --> 00:13:36.050
automated thing we've added to Android X
we're going to write out ourselves so

00:13:36.050 --> 00:13:36.060
we're going to write out ourselves so
 

00:13:36.060 --> 00:13:37.309
we're going to write out ourselves so
here you can see that we create a job

00:13:37.309 --> 00:13:37.319
here you can see that we create a job
 

00:13:37.319 --> 00:13:39.170
here you can see that we create a job
and now it's just a simple instantiation

00:13:39.170 --> 00:13:39.180
and now it's just a simple instantiation
 

00:13:39.180 --> 00:13:40.429
and now it's just a simple instantiation
we're just gonna keep a reference to it

00:13:40.429 --> 00:13:40.439
we're just gonna keep a reference to it
 

00:13:40.439 --> 00:13:41.900
we're just gonna keep a reference to it
and then we're going to keep that

00:13:41.900 --> 00:13:41.910
and then we're going to keep that
 

00:13:41.910 --> 00:13:44.749
and then we're going to keep that
contact create a carotene scope using a

00:13:44.749 --> 00:13:44.759
contact create a carotene scope using a
 

00:13:44.759 --> 00:13:46.610
contact create a carotene scope using a
job and that means that anything that

00:13:46.610 --> 00:13:46.620
job and that means that anything that
 

00:13:46.620 --> 00:13:49.369
job and that means that anything that
runs on it allows us to track back using

00:13:49.369 --> 00:13:49.379
runs on it allows us to track back using
 

00:13:49.379 --> 00:13:51.590
runs on it allows us to track back using
that job object we're also going to give

00:13:51.590 --> 00:13:51.600
that job object we're also going to give
 

00:13:51.600 --> 00:13:54.110
that job object we're also going to give
it a default dispatcher we're gonna talk

00:13:54.110 --> 00:13:54.120
it a default dispatcher we're gonna talk
 

00:13:54.120 --> 00:13:55.489
it a default dispatcher we're gonna talk
more about that later but basically it

00:13:55.489 --> 00:13:55.499
more about that later but basically it
 

00:13:55.499 --> 00:13:57.049
more about that later but basically it
means is that anything that is launched

00:13:57.049 --> 00:13:57.059
means is that anything that is launched
 

00:13:57.059 --> 00:13:59.629
means is that anything that is launched
on that scope or we automatically run on

00:13:59.629 --> 00:13:59.639
on that scope or we automatically run on
 

00:13:59.639 --> 00:14:02.090
on that scope or we automatically run on
the main thread Android Manfred in this

00:14:02.090 --> 00:14:02.100
the main thread Android Manfred in this
 

00:14:02.100 --> 00:14:06.110
the main thread Android Manfred in this
isn't so once we've done that we have a

00:14:06.110 --> 00:14:06.120
isn't so once we've done that we have a
 

00:14:06.120 --> 00:14:07.699
isn't so once we've done that we have a
refresh method again and this time

00:14:07.699 --> 00:14:07.709
refresh method again and this time
 

00:14:07.709 --> 00:14:09.079
refresh method again and this time
instead of that view model scope the

00:14:09.079 --> 00:14:09.089
instead of that view model scope the
 

00:14:09.089 --> 00:14:10.309
instead of that view model scope the
automated thing we're going to use our

00:14:10.309 --> 00:14:10.319
automated thing we're going to use our
 

00:14:10.319 --> 00:14:12.769
automated thing we're going to use our
own created scope and again saki-san

00:14:12.769 --> 00:14:12.779
own created scope and again saki-san
 

00:14:12.779 --> 00:14:13.850
own created scope and again saki-san
code just using a different type of

00:14:13.850 --> 00:14:13.860
code just using a different type of
 

00:14:13.860 --> 00:14:16.610
code just using a different type of
scope this time but this time the

00:14:16.610 --> 00:14:16.620
scope this time but this time the
 

00:14:16.620 --> 00:14:17.749
scope this time but this time the
launched we scoped

00:14:17.749 --> 00:14:17.759
launched we scoped
 

00:14:17.759 --> 00:14:20.019
launched we scoped
to the odd-job object we created earlier

00:14:20.019 --> 00:14:20.029
to the odd-job object we created earlier
 

00:14:20.029 --> 00:14:22.579
to the odd-job object we created earlier
which means that anon and cleared which

00:14:22.579 --> 00:14:22.589
which means that anon and cleared which
 

00:14:22.589 --> 00:14:24.230
which means that anon and cleared which
is the callback we have in view model to

00:14:24.230 --> 00:14:24.240
is the callback we have in view model to
 

00:14:24.240 --> 00:14:25.939
is the callback we have in view model to
actually not when it's been torn down we

00:14:25.939 --> 00:14:25.949
actually not when it's been torn down we
 

00:14:25.949 --> 00:14:26.809
actually not when it's been torn down we
can actually just called job got

00:14:26.809 --> 00:14:26.819
can actually just called job got
 

00:14:26.819 --> 00:14:28.549
can actually just called job got
canceled and that means that any pair of

00:14:28.549 --> 00:14:28.559
canceled and that means that any pair of
 

00:14:28.559 --> 00:14:29.780
canceled and that means that any pair of
teens which are currently running when

00:14:29.780 --> 00:14:29.790
teens which are currently running when
 

00:14:29.790 --> 00:14:31.040
teens which are currently running when
the view model goes down will be

00:14:31.040 --> 00:14:31.050
the view model goes down will be
 

00:14:31.050 --> 00:14:33.769
the view model goes down will be
canceled at the same time reduces memory

00:14:33.769 --> 00:14:33.779
canceled at the same time reduces memory
 

00:14:33.779 --> 00:14:34.910
canceled at the same time reduces memory
leaks or you know whatever it is just

00:14:34.910 --> 00:14:34.920
leaks or you know whatever it is just
 

00:14:34.920 --> 00:14:37.540
leaks or you know whatever it is just
allows it to tidy up

00:14:37.540 --> 00:14:37.550
allows it to tidy up
 

00:14:37.550 --> 00:14:39.860
allows it to tidy up
so if you actually have a look at how

00:14:39.860 --> 00:14:39.870
so if you actually have a look at how
 

00:14:39.870 --> 00:14:41.360
so if you actually have a look at how
things are run now

00:14:41.360 --> 00:14:41.370
things are run now
 

00:14:41.370 --> 00:14:42.980
things are run now
so we've launched our routine and now

00:14:42.980 --> 00:14:42.990
so we've launched our routine and now
 

00:14:42.990 --> 00:14:44.600
so we've launched our routine and now
we're going to go into our update show

00:14:44.600 --> 00:14:44.610
we're going to go into our update show
 

00:14:44.610 --> 00:14:48.259
we're going to go into our update show
method so here we are in our carotene so

00:14:48.259 --> 00:14:48.269
method so here we are in our carotene so
 

00:14:48.269 --> 00:14:49.639
method so here we are in our carotene so
I'll launch which is modeled by that

00:14:49.639 --> 00:14:49.649
I'll launch which is modeled by that
 

00:14:49.649 --> 00:14:52.400
I'll launch which is modeled by that
blue thing going around now here in the

00:14:52.400 --> 00:14:52.410
blue thing going around now here in the
 

00:14:52.410 --> 00:14:53.929
blue thing going around now here in the
object show method which is denoted by

00:14:53.929 --> 00:14:53.939
object show method which is denoted by
 

00:14:53.939 --> 00:14:55.910
object show method which is denoted by
the yellow arrow so we're gonna go past

00:14:55.910 --> 00:14:55.920
the yellow arrow so we're gonna go past
 

00:14:55.920 --> 00:14:56.960
the yellow arrow so we're gonna go past
that first piece of code which is the

00:14:56.960 --> 00:14:56.970
that first piece of code which is the
 

00:14:56.970 --> 00:14:59.360
that first piece of code which is the
async builder at this point we have a

00:14:59.360 --> 00:14:59.370
async builder at this point we have a
 

00:14:59.370 --> 00:15:01.069
async builder at this point we have a
first curry team running which is

00:15:01.069 --> 00:15:01.079
first curry team running which is
 

00:15:01.079 --> 00:15:02.389
first curry team running which is
everything and that's doing the local

00:15:02.389 --> 00:15:02.399
everything and that's doing the local
 

00:15:02.399 --> 00:15:04.160
everything and that's doing the local
show store stuff so it's running nicely

00:15:04.160 --> 00:15:04.170
show store stuff so it's running nicely
 

00:15:04.170 --> 00:15:07.040
show store stuff so it's running nicely
and it's doing its thing now the outer

00:15:07.040 --> 00:15:07.050
and it's doing its thing now the outer
 

00:15:07.050 --> 00:15:08.660
and it's doing its thing now the outer
curtain is going to go past that and go

00:15:08.660 --> 00:15:08.670
curtain is going to go past that and go
 

00:15:08.670 --> 00:15:10.569
curtain is going to go past that and go
past the second async which the remote

00:15:10.569 --> 00:15:10.579
past the second async which the remote
 

00:15:10.579 --> 00:15:13.220
past the second async which the remote
here again we've got so we now have two

00:15:13.220 --> 00:15:13.230
here again we've got so we now have two
 

00:15:13.230 --> 00:15:15.079
here again we've got so we now have two
curry teams running and they're both off

00:15:15.079 --> 00:15:15.089
curry teams running and they're both off
 

00:15:15.089 --> 00:15:16.730
curry teams running and they're both off
we have free currencies but two inner

00:15:16.730 --> 00:15:16.740
we have free currencies but two inner
 

00:15:16.740 --> 00:15:19.939
we have free currencies but two inner
ones to child proteins so once they're

00:15:19.939 --> 00:15:19.949
ones to child proteins so once they're
 

00:15:19.949 --> 00:15:21.350
ones to child proteins so once they're
launched in their rune and going along

00:15:21.350 --> 00:15:21.360
launched in their rune and going along
 

00:15:21.360 --> 00:15:24.470
launched in their rune and going along
we afford on to the áfirstá weight

00:15:24.470 --> 00:15:24.480
we afford on to the áfirstá weight
 

00:15:24.480 --> 00:15:25.850
we afford on to the áfirstá weight
now this point were waiting for that

00:15:25.850 --> 00:15:25.860
now this point were waiting for that
 

00:15:25.860 --> 00:15:28.369
now this point were waiting for that
first async the local to actually finish

00:15:28.369 --> 00:15:28.379
first async the local to actually finish
 

00:15:28.379 --> 00:15:30.439
first async the local to actually finish
itself up and then not return a result

00:15:30.439 --> 00:15:30.449
itself up and then not return a result
 

00:15:30.449 --> 00:15:33.049
itself up and then not return a result
which is what a weight will return but

00:15:33.049 --> 00:15:33.059
which is what a weight will return but
 

00:15:33.059 --> 00:15:33.680
which is what a weight will return but
at this point

00:15:33.680 --> 00:15:33.690
at this point
 

00:15:33.690 --> 00:15:35.390
at this point
because we're waiting on that first

00:15:35.390 --> 00:15:35.400
because we're waiting on that first
 

00:15:35.400 --> 00:15:37.820
because we're waiting on that first
async the outer coating is what we call

00:15:37.820 --> 00:15:37.830
async the outer coating is what we call
 

00:15:37.830 --> 00:15:38.450
async the outer coating is what we call
suspended

00:15:38.450 --> 00:15:38.460
suspended
 

00:15:38.460 --> 00:15:41.750
suspended
it's just sat there doing nothing but

00:15:41.750 --> 00:15:41.760
it's just sat there doing nothing but
 

00:15:41.760 --> 00:15:43.520
it's just sat there doing nothing but
during that time that view model has

00:15:43.520 --> 00:15:43.530
during that time that view model has
 

00:15:43.530 --> 00:15:45.350
during that time that view model has
been torn down is the activities gone

00:15:45.350 --> 00:15:45.360
been torn down is the activities gone
 

00:15:45.360 --> 00:15:47.900
been torn down is the activities gone
away or whatever it would be and we've

00:15:47.900 --> 00:15:47.910
away or whatever it would be and we've
 

00:15:47.910 --> 00:15:50.090
away or whatever it would be and we've
called job lat cancel now at this point

00:15:50.090 --> 00:15:50.100
called job lat cancel now at this point
 

00:15:50.100 --> 00:15:52.190
called job lat cancel now at this point
the outer carotene is canceled and then

00:15:52.190 --> 00:15:52.200
the outer carotene is canceled and then
 

00:15:52.200 --> 00:15:54.290
the outer carotene is canceled and then
the inner two are also canceled and now

00:15:54.290 --> 00:15:54.300
the inner two are also canceled and now
 

00:15:54.300 --> 00:15:56.660
the inner two are also canceled and now
that's similar carotene scope gives us

00:15:56.660 --> 00:15:56.670
that's similar carotene scope gives us
 

00:15:56.670 --> 00:15:58.250
that's similar carotene scope gives us
and scoping in general gives us for free

00:15:58.250 --> 00:15:58.260
and scoping in general gives us for free
 

00:15:58.260 --> 00:15:59.660
and scoping in general gives us for free
and that childcare routines

00:15:59.660 --> 00:15:59.670
and that childcare routines
 

00:15:59.670 --> 00:16:01.280
and that childcare routines
automatically inherit from its parent

00:16:01.280 --> 00:16:01.290
automatically inherit from its parent
 

00:16:01.290 --> 00:16:03.260
automatically inherit from its parent
carotene so if the parent coatings have

00:16:03.260 --> 00:16:03.270
carotene so if the parent coatings have
 

00:16:03.270 --> 00:16:04.700
carotene so if the parent coatings have
been cancelled anything below it will

00:16:04.700 --> 00:16:04.710
been cancelled anything below it will
 

00:16:04.710 --> 00:16:06.260
been cancelled anything below it will
also be that some of the nice stuff has

00:16:06.260 --> 00:16:06.270
also be that some of the nice stuff has
 

00:16:06.270 --> 00:16:09.620
also be that some of the nice stuff has
been added recently but what if you're

00:16:09.620 --> 00:16:09.630
been added recently but what if you're
 

00:16:09.630 --> 00:16:11.330
been added recently but what if you're
not actually using P models you know a

00:16:11.330 --> 00:16:11.340
not actually using P models you know a
 

00:16:11.340 --> 00:16:13.520
not actually using P models you know a
lot of us might not be using it and that

00:16:13.520 --> 00:16:13.530
lot of us might not be using it and that
 

00:16:13.530 --> 00:16:15.290
lot of us might not be using it and that
we have over api's we just later do

00:16:15.290 --> 00:16:15.300
we have over api's we just later do
 

00:16:15.300 --> 00:16:17.930
we have over api's we just later do
similar other things so it's part of the

00:16:17.930 --> 00:16:17.940
similar other things so it's part of the
 

00:16:17.940 --> 00:16:19.490
similar other things so it's part of the
Android architecture components we added

00:16:19.490 --> 00:16:19.500
Android architecture components we added
 

00:16:19.500 --> 00:16:21.050
Android architecture components we added
a listener at least the functionality

00:16:21.050 --> 00:16:21.060
a listener at least the functionality
 

00:16:21.060 --> 00:16:23.150
a listener at least the functionality
for life cycles so here's a very quick

00:16:23.150 --> 00:16:23.160
for life cycles so here's a very quick
 

00:16:23.160 --> 00:16:24.530
for life cycles so here's a very quick
example of how you use them generally

00:16:24.530 --> 00:16:24.540
example of how you use them generally
 

00:16:24.540 --> 00:16:26.690
example of how you use them generally
and you create a lifecycle observer and

00:16:26.690 --> 00:16:26.700
and you create a lifecycle observer and
 

00:16:26.700 --> 00:16:28.540
and you create a lifecycle observer and
this in this example we're using default

00:16:28.540 --> 00:16:28.550
this in this example we're using default
 

00:16:28.550 --> 00:16:30.860
this in this example we're using default
and when you create and it has methods

00:16:30.860 --> 00:16:30.870
and when you create and it has methods
 

00:16:30.870 --> 00:16:32.420
and when you create and it has methods
for each of the different lifecycle

00:16:32.420 --> 00:16:32.430
for each of the different lifecycle
 

00:16:32.430 --> 00:16:34.640
for each of the different lifecycle
events so on create destroyed stop start

00:16:34.640 --> 00:16:34.650
events so on create destroyed stop start
 

00:16:34.650 --> 00:16:36.920
events so on create destroyed stop start
whatever it be and to actually use it on

00:16:36.920 --> 00:16:36.930
whatever it be and to actually use it on
 

00:16:36.930 --> 00:16:38.720
whatever it be and to actually use it on
like an activity or whatever it be you

00:16:38.720 --> 00:16:38.730
like an activity or whatever it be you
 

00:16:38.730 --> 00:16:40.100
like an activity or whatever it be you
create an instance and you add observer

00:16:40.100 --> 00:16:40.110
create an instance and you add observer
 

00:16:40.110 --> 00:16:44.330
create an instance and you add observer
hopefully you've seen yourself before so

00:16:44.330 --> 00:16:44.340
hopefully you've seen yourself before so
 

00:16:44.340 --> 00:16:46.910
hopefully you've seen yourself before so
this build kind of scope aware lifecycle

00:16:46.910 --> 00:16:46.920
this build kind of scope aware lifecycle
 

00:16:46.920 --> 00:16:48.410
this build kind of scope aware lifecycle
observer which allows us to scope

00:16:48.410 --> 00:16:48.420
observer which allows us to scope
 

00:16:48.420 --> 00:16:50.300
observer which allows us to scope
carotenes to the an actual lifecycle

00:16:50.300 --> 00:16:50.310
carotenes to the an actual lifecycle
 

00:16:50.310 --> 00:16:53.000
carotenes to the an actual lifecycle
instance the primary API we'll use here

00:16:53.000 --> 00:16:53.010
instance the primary API we'll use here
 

00:16:53.010 --> 00:16:54.320
instance the primary API we'll use here
is that we'll pass another lambda and

00:16:54.320 --> 00:16:54.330
is that we'll pass another lambda and
 

00:16:54.330 --> 00:16:55.970
is that we'll pass another lambda and
that's the thing that we've run once

00:16:55.970 --> 00:16:55.980
that's the thing that we've run once
 

00:16:55.980 --> 00:16:58.430
that's the thing that we've run once
we've say been started I mean she's kind

00:16:58.430 --> 00:16:58.440
we've say been started I mean she's kind
 

00:16:58.440 --> 00:17:01.850
we've say been started I mean she's kind
of what you want usually mister time so

00:17:01.850 --> 00:17:01.860
of what you want usually mister time so
 

00:17:01.860 --> 00:17:05.030
of what you want usually mister time so
well now look at its implementation so

00:17:05.030 --> 00:17:05.040
well now look at its implementation so
 

00:17:05.040 --> 00:17:05.929
well now look at its implementation so
the first thing we want to do is on

00:17:05.929 --> 00:17:05.939
the first thing we want to do is on
 

00:17:05.939 --> 00:17:07.250
the first thing we want to do is on
start so that's when we'll start running

00:17:07.250 --> 00:17:07.260
start so that's when we'll start running
 

00:17:07.260 --> 00:17:09.770
start so that's when we'll start running
our piece of code and say well create a

00:17:09.770 --> 00:17:09.780
our piece of code and say well create a
 

00:17:09.780 --> 00:17:11.780
our piece of code and say well create a
co-routine scope using that job and then

00:17:11.780 --> 00:17:11.790
co-routine scope using that job and then
 

00:17:11.790 --> 00:17:12.740
co-routine scope using that job and then
we're going to run it on the dispatch

00:17:12.740 --> 00:17:12.750
we're going to run it on the dispatch
 

00:17:12.750 --> 00:17:14.300
we're going to run it on the dispatch
it's not main you can choose what that

00:17:14.300 --> 00:17:14.310
it's not main you can choose what that
 

00:17:14.310 --> 00:17:16.160
it's not main you can choose what that
be and then we'll call skip that launch

00:17:16.160 --> 00:17:16.170
be and then we'll call skip that launch
 

00:17:16.170 --> 00:17:17.870
be and then we'll call skip that launch
and then just call our lambda pretty

00:17:17.870 --> 00:17:17.880
and then just call our lambda pretty
 

00:17:17.880 --> 00:17:20.630
and then just call our lambda pretty
simple really and then finally a non

00:17:20.630 --> 00:17:20.640
simple really and then finally a non
 

00:17:20.640 --> 00:17:22.939
simple really and then finally a non
stop which seems like a good life cycle

00:17:22.939 --> 00:17:22.949
stop which seems like a good life cycle
 

00:17:22.949 --> 00:17:25.699
stop which seems like a good life cycle
to use that will call in that keys go

00:17:25.699 --> 00:17:25.709
to use that will call in that keys go
 

00:17:25.709 --> 00:17:27.679
to use that will call in that keys go
but we'll eventually cancel the job and

00:17:27.679 --> 00:17:27.689
but we'll eventually cancel the job and
 

00:17:27.689 --> 00:17:28.820
but we'll eventually cancel the job and
that will means that co-routine if it's

00:17:28.820 --> 00:17:28.830
that will means that co-routine if it's
 

00:17:28.830 --> 00:17:30.520
that will means that co-routine if it's
still during that point will be canceled

00:17:30.520 --> 00:17:30.530
still during that point will be canceled
 

00:17:30.530 --> 00:17:32.270
still during that point will be canceled
so if you can see that code isn't

00:17:32.270 --> 00:17:32.280
so if you can see that code isn't
 

00:17:32.280 --> 00:17:33.680
so if you can see that code isn't
actually that complex it's like okay

00:17:33.680 --> 00:17:33.690
actually that complex it's like okay
 

00:17:33.690 --> 00:17:35.840
actually that complex it's like okay
with Ethan at 100x so it's not nice to

00:17:35.840 --> 00:17:35.850
with Ethan at 100x so it's not nice to
 

00:17:35.850 --> 00:17:38.060
with Ethan at 100x so it's not nice to
use but in actually you look at the sort

00:17:38.060 --> 00:17:38.070
use but in actually you look at the sort
 

00:17:38.070 --> 00:17:39.350
use but in actually you look at the sort
of deep down of it it's actually pretty

00:17:39.350 --> 00:17:39.360
of deep down of it it's actually pretty
 

00:17:39.360 --> 00:17:42.410
of deep down of it it's actually pretty
simple and then to actually finish it

00:17:42.410 --> 00:17:42.420
simple and then to actually finish it
 

00:17:42.420 --> 00:17:43.550
simple and then to actually finish it
all off will provide a nice build

00:17:43.550 --> 00:17:43.560
all off will provide a nice build
 

00:17:43.560 --> 00:17:45.620
all off will provide a nice build
function and you pass it a lambda and it

00:17:45.620 --> 00:17:45.630
function and you pass it a lambda and it
 

00:17:45.630 --> 00:17:47.260
function and you pass it a lambda and it
will automatically add it for you

00:17:47.260 --> 00:17:47.270
will automatically add it for you
 

00:17:47.270 --> 00:17:50.270
will automatically add it for you
and what it allows us to do is stuff

00:17:50.270 --> 00:17:50.280
and what it allows us to do is stuff
 

00:17:50.280 --> 00:17:51.980
and what it allows us to do is stuff
like this so we're here we have a

00:17:51.980 --> 00:17:51.990
like this so we're here we have a
 

00:17:51.990 --> 00:17:54.830
like this so we're here we have a
details fragment and um decorated we

00:17:54.830 --> 00:17:54.840
details fragment and um decorated we
 

00:17:54.840 --> 00:17:56.240
details fragment and um decorated we
will use our live scope accent

00:17:56.240 --> 00:17:56.250
will use our live scope accent
 

00:17:56.250 --> 00:17:58.160
will use our live scope accent
revolution and then just run something

00:17:58.160 --> 00:17:58.170
revolution and then just run something
 

00:17:58.170 --> 00:18:00.350
revolution and then just run something
and that will automatically started when

00:18:00.350 --> 00:18:00.360
and that will automatically started when
 

00:18:00.360 --> 00:18:02.330
and that will automatically started when
we get to it'll be started when we go at

00:18:02.330 --> 00:18:02.340
we get to it'll be started when we go at
 

00:18:02.340 --> 00:18:04.070
we get to it'll be started when we go at
start and the new fragment and they'll

00:18:04.070 --> 00:18:04.080
start and the new fragment and they'll
 

00:18:04.080 --> 00:18:07.520
start and the new fragment and they'll
be closed or ended when we get on on

00:18:07.520 --> 00:18:07.530
be closed or ended when we get on on
 

00:18:07.530 --> 00:18:12.110
be closed or ended when we get on on
stop brings it on to cancellation right

00:18:12.110 --> 00:18:12.120
stop brings it on to cancellation right
 

00:18:12.120 --> 00:18:13.400
stop brings it on to cancellation right
we've talked a lot about this idea of

00:18:13.400 --> 00:18:13.410
we've talked a lot about this idea of
 

00:18:13.410 --> 00:18:15.080
we've talked a lot about this idea of
cancelling a KO routine but what

00:18:15.080 --> 00:18:15.090
cancelling a KO routine but what
 

00:18:15.090 --> 00:18:17.060
cancelling a KO routine but what
actually happens when this thing cancels

00:18:17.060 --> 00:18:17.070
actually happens when this thing cancels
 

00:18:17.070 --> 00:18:18.260
actually happens when this thing cancels
I mean if you just have kind of a block

00:18:18.260 --> 00:18:18.270
I mean if you just have kind of a block
 

00:18:18.270 --> 00:18:20.540
I mean if you just have kind of a block
of code that's running what gets torn

00:18:20.540 --> 00:18:20.550
of code that's running what gets torn
 

00:18:20.550 --> 00:18:21.920
of code that's running what gets torn
down what do you need to do to sort of

00:18:21.920 --> 00:18:21.930
down what do you need to do to sort of
 

00:18:21.930 --> 00:18:25.640
down what do you need to do to sort of
clean up so when a KO routine is

00:18:25.640 --> 00:18:25.650
clean up so when a KO routine is
 

00:18:25.650 --> 00:18:27.260
clean up so when a KO routine is
cancelled if it's cancelled while it's

00:18:27.260 --> 00:18:27.270
cancelled if it's cancelled while it's
 

00:18:27.270 --> 00:18:29.600
cancelled if it's cancelled while it's
suspended so it's waiting on something

00:18:29.600 --> 00:18:29.610
suspended so it's waiting on something
 

00:18:29.610 --> 00:18:31.580
suspended so it's waiting on something
else to happen in callback terms the

00:18:31.580 --> 00:18:31.590
else to happen in callback terms the
 

00:18:31.590 --> 00:18:33.190
else to happen in callback terms the
callback just hasn't been invoked yet

00:18:33.190 --> 00:18:33.200
callback just hasn't been invoked yet
 

00:18:33.200 --> 00:18:35.840
callback just hasn't been invoked yet
it'll throw a cancellation exception or

00:18:35.840 --> 00:18:35.850
it'll throw a cancellation exception or
 

00:18:35.850 --> 00:18:37.940
it'll throw a cancellation exception or
rather the curtain will resume from the

00:18:37.940 --> 00:18:37.950
rather the curtain will resume from the
 

00:18:37.950 --> 00:18:39.680
rather the curtain will resume from the
point that it was suspended with a

00:18:39.680 --> 00:18:39.690
point that it was suspended with a
 

00:18:39.690 --> 00:18:42.740
point that it was suspended with a
cancellation exception so what does that

00:18:42.740 --> 00:18:42.750
cancellation exception so what does that
 

00:18:42.750 --> 00:18:44.240
cancellation exception so what does that
actually look like here's our example

00:18:44.240 --> 00:18:44.250
actually look like here's our example
 

00:18:44.250 --> 00:18:46.040
actually look like here's our example
from before so what happens if we need

00:18:46.040 --> 00:18:46.050
from before so what happens if we need
 

00:18:46.050 --> 00:18:47.360
from before so what happens if we need
to clean something up if this is

00:18:47.360 --> 00:18:47.370
to clean something up if this is
 

00:18:47.370 --> 00:18:48.920
to clean something up if this is
canceled in the middle of that update

00:18:48.920 --> 00:18:48.930
canceled in the middle of that update
 

00:18:48.930 --> 00:18:52.640
canceled in the middle of that update
show function well because if there's a

00:18:52.640 --> 00:18:52.650
show function well because if there's a
 

00:18:52.650 --> 00:18:54.440
show function well because if there's a
cancellation exception this is something

00:18:54.440 --> 00:18:54.450
cancellation exception this is something
 

00:18:54.450 --> 00:18:56.000
cancellation exception this is something
that we kind of know how to do already a

00:18:56.000 --> 00:18:56.010
that we kind of know how to do already a
 

00:18:56.010 --> 00:18:58.190
that we kind of know how to do already a
plain old finally blocks run is expected

00:18:58.190 --> 00:18:58.200
plain old finally blocks run is expected
 

00:18:58.200 --> 00:18:59.780
plain old finally blocks run is expected
we didn't have to add any new concepts

00:18:59.780 --> 00:18:59.790
we didn't have to add any new concepts
 

00:18:59.790 --> 00:19:01.250
we didn't have to add any new concepts
beyond what we already know from the

00:19:01.250 --> 00:19:01.260
beyond what we already know from the
 

00:19:01.260 --> 00:19:04.580
beyond what we already know from the
rest of Kotlin but if blocking code is

00:19:04.580 --> 00:19:04.590
rest of Kotlin but if blocking code is
 

00:19:04.590 --> 00:19:06.380
rest of Kotlin but if blocking code is
running cancellation requires some

00:19:06.380 --> 00:19:06.390
running cancellation requires some
 

00:19:06.390 --> 00:19:08.210
running cancellation requires some
explicit cooperation in order to stop

00:19:08.210 --> 00:19:08.220
explicit cooperation in order to stop
 

00:19:08.220 --> 00:19:11.090
explicit cooperation in order to stop
what it's doing so we can check for that

00:19:11.090 --> 00:19:11.100
what it's doing so we can check for that
 

00:19:11.100 --> 00:19:13.040
what it's doing so we can check for that
cancellation explicitly in a couple of

00:19:13.040 --> 00:19:13.050
cancellation explicitly in a couple of
 

00:19:13.050 --> 00:19:15.920
cancellation explicitly in a couple of
ways generally this means checking to

00:19:15.920 --> 00:19:15.930
ways generally this means checking to
 

00:19:15.930 --> 00:19:17.780
ways generally this means checking to
see if your codeine is currently active

00:19:17.780 --> 00:19:17.790
see if your codeine is currently active
 

00:19:17.790 --> 00:19:19.160
see if your codeine is currently active
in one way shape or form and there are a

00:19:19.160 --> 00:19:19.170
in one way shape or form and there are a
 

00:19:19.170 --> 00:19:21.130
in one way shape or form and there are a
couple of useful patterns for doing this

00:19:21.130 --> 00:19:21.140
couple of useful patterns for doing this
 

00:19:21.140 --> 00:19:23.900
couple of useful patterns for doing this
so one of those patterns is that if you

00:19:23.900 --> 00:19:23.910
so one of those patterns is that if you
 

00:19:23.910 --> 00:19:25.580
so one of those patterns is that if you
know that your job is already cancelled

00:19:25.580 --> 00:19:25.590
know that your job is already cancelled
 

00:19:25.590 --> 00:19:27.350
know that your job is already cancelled
you can call any one of the stock

00:19:27.350 --> 00:19:27.360
you can call any one of the stock
 

00:19:27.360 --> 00:19:29.690
you can call any one of the stock
suspending methods such as yield use the

00:19:29.690 --> 00:19:29.700
suspending methods such as yield use the
 

00:19:29.700 --> 00:19:31.610
suspending methods such as yield use the
example here to force the cancellation

00:19:31.610 --> 00:19:31.620
example here to force the cancellation
 

00:19:31.620 --> 00:19:33.560
example here to force the cancellation
exception to be thrown relying on that

00:19:33.560 --> 00:19:33.570
exception to be thrown relying on that
 

00:19:33.570 --> 00:19:35.000
exception to be thrown relying on that
standards and implementation that I

00:19:35.000 --> 00:19:35.010
standards and implementation that I
 

00:19:35.010 --> 00:19:37.040
standards and implementation that I
mentioned before that if you're

00:19:37.040 --> 00:19:37.050
mentioned before that if you're
 

00:19:37.050 --> 00:19:39.140
mentioned before that if you're
cancelled when you're trying to suspend

00:19:39.140 --> 00:19:39.150
cancelled when you're trying to suspend
 

00:19:39.150 --> 00:19:40.340
cancelled when you're trying to suspend
then you'll resume with that

00:19:40.340 --> 00:19:40.350
then you'll resume with that
 

00:19:40.350 --> 00:19:42.020
then you'll resume with that
cancellation exception so we know that

00:19:42.020 --> 00:19:42.030
cancellation exception so we know that
 

00:19:42.030 --> 00:19:43.700
cancellation exception so we know that
this will immediately throw if we happen

00:19:43.700 --> 00:19:43.710
this will immediately throw if we happen
 

00:19:43.710 --> 00:19:46.880
this will immediately throw if we happen
to be cancelled but if you're in a tight

00:19:46.880 --> 00:19:46.890
to be cancelled but if you're in a tight
 

00:19:46.890 --> 00:19:48.410
to be cancelled but if you're in a tight
loop you can also just check this is

00:19:48.410 --> 00:19:48.420
loop you can also just check this is
 

00:19:48.420 --> 00:19:51.410
loop you can also just check this is
active that's available from any

00:19:51.410 --> 00:19:51.420
active that's available from any
 

00:19:51.420 --> 00:19:53.780
active that's available from any
suspending scope and you can just simply

00:19:53.780 --> 00:19:53.790
suspending scope and you can just simply
 

00:19:53.790 --> 00:19:55.340
suspending scope and you can just simply
stop what you're doing there's no reason

00:19:55.340 --> 00:19:55.350
stop what you're doing there's no reason
 

00:19:55.350 --> 00:19:57.110
stop what you're doing there's no reason
to really involve an exception here if

00:19:57.110 --> 00:19:57.120
to really involve an exception here if
 

00:19:57.120 --> 00:19:58.400
to really involve an exception here if
all you're doing is some sort of tight

00:19:58.400 --> 00:19:58.410
all you're doing is some sort of tight
 

00:19:58.410 --> 00:19:59.270
all you're doing is some sort of tight
inner computation

00:19:59.270 --> 00:19:59.280
inner computation
 

00:19:59.280 --> 00:20:02.420
inner computation
Loup that you need to break out of which

00:20:02.420 --> 00:20:02.430
Loup that you need to break out of which
 

00:20:02.430 --> 00:20:04.040
Loup that you need to break out of which
kind of leads nicely up into how

00:20:04.040 --> 00:20:04.050
kind of leads nicely up into how
 

00:20:04.050 --> 00:20:05.720
kind of leads nicely up into how
exceptions are handled with co-routines

00:20:05.720 --> 00:20:05.730
exceptions are handled with co-routines
 

00:20:05.730 --> 00:20:07.340
exceptions are handled with co-routines
in general and there are a few things

00:20:07.340 --> 00:20:07.350
in general and there are a few things
 

00:20:07.350 --> 00:20:08.540
in general and there are a few things
that are really worth pointing out

00:20:08.540 --> 00:20:08.550
that are really worth pointing out
 

00:20:08.550 --> 00:20:10.220
that are really worth pointing out
especially if you followed some of the

00:20:10.220 --> 00:20:10.230
especially if you followed some of the
 

00:20:10.230 --> 00:20:12.050
especially if you followed some of the
Kotlin exco routines development leading

00:20:12.050 --> 00:20:12.060
Kotlin exco routines development leading
 

00:20:12.060 --> 00:20:13.490
Kotlin exco routines development leading
up to release because there were some

00:20:13.490 --> 00:20:13.500
up to release because there were some
 

00:20:13.500 --> 00:20:15.520
up to release because there were some
really significant changes that happened

00:20:15.520 --> 00:20:15.530
really significant changes that happened
 

00:20:15.530 --> 00:20:18.770
really significant changes that happened
the first is that launch will wreath row

00:20:18.770 --> 00:20:18.780
the first is that launch will wreath row
 

00:20:18.780 --> 00:20:21.320
the first is that launch will wreath row
unhandled exceptions as they happen so

00:20:21.320 --> 00:20:21.330
unhandled exceptions as they happen so
 

00:20:21.330 --> 00:20:23.330
unhandled exceptions as they happen so
more precisely it fails the parent it

00:20:23.330 --> 00:20:23.340
more precisely it fails the parent it
 

00:20:23.340 --> 00:20:26.090
more precisely it fails the parent it
cancels its its parent job the parent

00:20:26.090 --> 00:20:26.100
cancels its its parent job the parent
 

00:20:26.100 --> 00:20:27.620
cancels its its parent job the parent
sees a cancellation exception with the

00:20:27.620 --> 00:20:27.630
sees a cancellation exception with the
 

00:20:27.630 --> 00:20:30.110
sees a cancellation exception with the
original exception as the cause in the

00:20:30.110 --> 00:20:30.120
original exception as the cause in the
 

00:20:30.120 --> 00:20:32.900
original exception as the cause in the
exception object itself so similar to a

00:20:32.900 --> 00:20:32.910
exception object itself so similar to a
 

00:20:32.910 --> 00:20:34.040
exception object itself so similar to a
thread they get dispatched to the

00:20:34.040 --> 00:20:34.050
thread they get dispatched to the
 

00:20:34.050 --> 00:20:35.720
thread they get dispatched to the
default exception handler at the root of

00:20:35.720 --> 00:20:35.730
default exception handler at the root of
 

00:20:35.730 --> 00:20:37.910
default exception handler at the root of
a job tree if nothing else manages to

00:20:37.910 --> 00:20:37.920
a job tree if nothing else manages to
 

00:20:37.920 --> 00:20:40.760
a job tree if nothing else manages to
handle that but your co routine context

00:20:40.760 --> 00:20:40.770
handle that but your co routine context
 

00:20:40.770 --> 00:20:42.620
handle that but your co routine context
also gets a chance to intercept you can

00:20:42.620 --> 00:20:42.630
also gets a chance to intercept you can
 

00:20:42.630 --> 00:20:44.390
also gets a chance to intercept you can
attach a special element to the cur team

00:20:44.390 --> 00:20:44.400
attach a special element to the cur team
 

00:20:44.400 --> 00:20:46.580
attach a special element to the cur team
context itself that you can use to

00:20:46.580 --> 00:20:46.590
context itself that you can use to
 

00:20:46.590 --> 00:20:50.360
context itself that you can use to
handle on handled exceptions so let's go

00:20:50.360 --> 00:20:50.370
handle on handled exceptions so let's go
 

00:20:50.370 --> 00:20:52.160
handle on handled exceptions so let's go
ahead and see how that works here's

00:20:52.160 --> 00:20:52.170
ahead and see how that works here's
 

00:20:52.170 --> 00:20:54.710
ahead and see how that works here's
again our example from before and say

00:20:54.710 --> 00:20:54.720
again our example from before and say
 

00:20:54.720 --> 00:20:56.450
again our example from before and say
that save show throws a very domain

00:20:56.450 --> 00:20:56.460
that save show throws a very domain
 

00:20:56.460 --> 00:20:59.720
that save show throws a very domain
specific exception in this case so in

00:20:59.720 --> 00:20:59.730
specific exception in this case so in
 

00:20:59.730 --> 00:21:01.280
specific exception in this case so in
this case this will be treated like an

00:21:01.280 --> 00:21:01.290
this case this will be treated like an
 

00:21:01.290 --> 00:21:03.290
this case this will be treated like an
uncaught exception at runtime just like

00:21:03.290 --> 00:21:03.300
uncaught exception at runtime just like
 

00:21:03.300 --> 00:21:05.180
uncaught exception at runtime just like
anything else that throws an uncaught

00:21:05.180 --> 00:21:05.190
anything else that throws an uncaught
 

00:21:05.190 --> 00:21:09.260
anything else that throws an uncaught
exception on your main thread so async

00:21:09.260 --> 00:21:09.270
exception on your main thread so async
 

00:21:09.270 --> 00:21:10.940
exception on your main thread so async
is a little bit different if an

00:21:10.940 --> 00:21:10.950
is a little bit different if an
 

00:21:10.950 --> 00:21:12.770
is a little bit different if an
exception is thrown well something that

00:21:12.770 --> 00:21:12.780
exception is thrown well something that
 

00:21:12.780 --> 00:21:14.390
exception is thrown well something that
you launch with async is running it'll

00:21:14.390 --> 00:21:14.400
you launch with async is running it'll
 

00:21:14.400 --> 00:21:16.100
you launch with async is running it'll
hold on to that exception and only throw

00:21:16.100 --> 00:21:16.110
hold on to that exception and only throw
 

00:21:16.110 --> 00:21:19.280
hold on to that exception and only throw
when the caller calls a wait so coming

00:21:19.280 --> 00:21:19.290
when the caller calls a wait so coming
 

00:21:19.290 --> 00:21:20.980
when the caller calls a wait so coming
back to our example from before again

00:21:20.980 --> 00:21:20.990
back to our example from before again
 

00:21:20.990 --> 00:21:24.380
back to our example from before again
let's go ahead and use what we know we

00:21:24.380 --> 00:21:24.390
let's go ahead and use what we know we
 

00:21:24.390 --> 00:21:25.910
let's go ahead and use what we know we
throw our exception from one of these

00:21:25.910 --> 00:21:25.920
throw our exception from one of these
 

00:21:25.920 --> 00:21:29.390
throw our exception from one of these
async jobs but that gets thrown from

00:21:29.390 --> 00:21:29.400
async jobs but that gets thrown from
 

00:21:29.400 --> 00:21:31.340
async jobs but that gets thrown from
this call to a weight itself so we know

00:21:31.340 --> 00:21:31.350
this call to a weight itself so we know
 

00:21:31.350 --> 00:21:33.380
this call to a weight itself so we know
exactly where we need to try and catch

00:21:33.380 --> 00:21:33.390
exactly where we need to try and catch
 

00:21:33.390 --> 00:21:35.030
exactly where we need to try and catch
that exception just kind of in the

00:21:35.030 --> 00:21:35.040
that exception just kind of in the
 

00:21:35.040 --> 00:21:38.090
that exception just kind of in the
normal way and handle that error but

00:21:38.090 --> 00:21:38.100
normal way and handle that error but
 

00:21:38.100 --> 00:21:39.590
normal way and handle that error but
there's a gotcha here and that's that

00:21:39.590 --> 00:21:39.600
there's a gotcha here and that's that
 

00:21:39.600 --> 00:21:41.960
there's a gotcha here and that's that
async works the same way as launched in

00:21:41.960 --> 00:21:41.970
async works the same way as launched in
 

00:21:41.970 --> 00:21:44.090
async works the same way as launched in
terms of how this nested job tree is

00:21:44.090 --> 00:21:44.100
terms of how this nested job tree is
 

00:21:44.100 --> 00:21:46.190
terms of how this nested job tree is
handled the deferred object that it

00:21:46.190 --> 00:21:46.200
handled the deferred object that it
 

00:21:46.200 --> 00:21:48.140
handled the deferred object that it
returns is just another kind of job and

00:21:48.140 --> 00:21:48.150
returns is just another kind of job and
 

00:21:48.150 --> 00:21:50.300
returns is just another kind of job and
so it'll cancel the parent if it fails

00:21:50.300 --> 00:21:50.310
so it'll cancel the parent if it fails
 

00:21:50.310 --> 00:21:52.340
so it'll cancel the parent if it fails
with an unhandled exception just like

00:21:52.340 --> 00:21:52.350
with an unhandled exception just like
 

00:21:52.350 --> 00:21:54.770
with an unhandled exception just like
launch does and it'll do this even if we

00:21:54.770 --> 00:21:54.780
launch does and it'll do this even if we
 

00:21:54.780 --> 00:21:56.390
launch does and it'll do this even if we
did it in a weight and called it now

00:21:56.390 --> 00:21:56.400
did it in a weight and called it now
 

00:21:56.400 --> 00:21:58.190
did it in a weight and called it now
this is kind of important because if

00:21:58.190 --> 00:21:58.200
this is kind of important because if
 

00:21:58.200 --> 00:21:59.960
this is kind of important because if
something throws an exception it's

00:21:59.960 --> 00:21:59.970
something throws an exception it's
 

00:21:59.970 --> 00:22:01.220
something throws an exception it's
really important that your app know

00:22:01.220 --> 00:22:01.230
really important that your app know
 

00:22:01.230 --> 00:22:02.210
really important that your app know
about it like it shouldn't just

00:22:02.210 --> 00:22:02.220
about it like it shouldn't just
 

00:22:02.220 --> 00:22:04.460
about it like it shouldn't just
disappear into the ether but at the same

00:22:04.460 --> 00:22:04.470
disappear into the ether but at the same
 

00:22:04.470 --> 00:22:05.870
disappear into the ether but at the same
time it kind of defeats the purpose of

00:22:05.870 --> 00:22:05.880
time it kind of defeats the purpose of
 

00:22:05.880 --> 00:22:07.430
time it kind of defeats the purpose of
the code in this sample here like we

00:22:07.430 --> 00:22:07.440
the code in this sample here like we
 

00:22:07.440 --> 00:22:08.930
the code in this sample here like we
caught it what are we supposed to do

00:22:08.930 --> 00:22:08.940
caught it what are we supposed to do
 

00:22:08.940 --> 00:22:09.490
caught it what are we supposed to do
here

00:22:09.490 --> 00:22:09.500
here
 

00:22:09.500 --> 00:22:11.840
here
well in this case instead of using

00:22:11.840 --> 00:22:11.850
well in this case instead of using
 

00:22:11.850 --> 00:22:12.680
well in this case instead of using
co-routines

00:22:12.680 --> 00:22:12.690
co-routines
 

00:22:12.690 --> 00:22:14.360
co-routines
at the top to open up this parallel

00:22:14.360 --> 00:22:14.370
at the top to open up this parallel
 

00:22:14.370 --> 00:22:16.310
at the top to open up this parallel
decomposition we can use supervisor

00:22:16.310 --> 00:22:16.320
decomposition we can use supervisor
 

00:22:16.320 --> 00:22:18.500
decomposition we can use supervisor
scope it works exactly like co-routine

00:22:18.500 --> 00:22:18.510
scope it works exactly like co-routine
 

00:22:18.510 --> 00:22:20.660
scope it works exactly like co-routine
scope except with a supervisor job which

00:22:20.660 --> 00:22:20.670
scope except with a supervisor job which
 

00:22:20.670 --> 00:22:22.310
scope except with a supervisor job which
is a special kind of job that won't be

00:22:22.310 --> 00:22:22.320
is a special kind of job that won't be
 

00:22:22.320 --> 00:22:24.350
is a special kind of job that won't be
canceled if a child fails with an

00:22:24.350 --> 00:22:24.360
canceled if a child fails with an
 

00:22:24.360 --> 00:22:29.360
canceled if a child fails with an
unhandled exception one more spot yep

00:22:29.360 --> 00:22:29.370
unhandled exception one more spot yep
 

00:22:29.370 --> 00:22:31.640
unhandled exception one more spot yep
it will only be thrown from this await

00:22:31.640 --> 00:22:31.650
it will only be thrown from this await
 

00:22:31.650 --> 00:22:35.690
it will only be thrown from this await
method here cool so earlier we mentioned

00:22:35.690 --> 00:22:35.700
method here cool so earlier we mentioned
 

00:22:35.700 --> 00:22:37.490
method here cool so earlier we mentioned
that we can actually decide where

00:22:37.490 --> 00:22:37.500
that we can actually decide where
 

00:22:37.500 --> 00:22:38.960
that we can actually decide where
co-routines have run and what kind of

00:22:38.960 --> 00:22:38.970
co-routines have run and what kind of
 

00:22:38.970 --> 00:22:40.790
co-routines have run and what kind of
fred they brought on because actually on

00:22:40.790 --> 00:22:40.800
fred they brought on because actually on
 

00:22:40.800 --> 00:22:42.620
fred they brought on because actually on
the JVM and on Android we actually still

00:22:42.620 --> 00:22:42.630
the JVM and on Android we actually still
 

00:22:42.630 --> 00:22:45.140
the JVM and on Android we actually still
run on Fred's he still uses fred paul

00:22:45.140 --> 00:22:45.150
run on Fred's he still uses fred paul
 

00:22:45.150 --> 00:22:47.150
run on Fred's he still uses fred paul
underneath so we still can decide where

00:22:47.150 --> 00:22:47.160
underneath so we still can decide where
 

00:22:47.160 --> 00:22:50.570
underneath so we still can decide where
that she gets dispatched on now let's

00:22:50.570 --> 00:22:50.580
that she gets dispatched on now let's
 

00:22:50.580 --> 00:22:51.740
that she gets dispatched on now let's
have a look so we here we have our

00:22:51.740 --> 00:22:51.750
have a look so we here we have our
 

00:22:51.750 --> 00:22:53.360
have a look so we here we have our
launch a very simple launch which is

00:22:53.360 --> 00:22:53.370
launch a very simple launch which is
 

00:22:53.370 --> 00:22:54.890
launch a very simple launch which is
missing a scope for you know just look

00:22:54.890 --> 00:22:54.900
missing a scope for you know just look
 

00:22:54.900 --> 00:22:57.620
missing a scope for you know just look
at example now default actually is that

00:22:57.620 --> 00:22:57.630
at example now default actually is that
 

00:22:57.630 --> 00:22:59.750
at example now default actually is that
the context will be using what we call a

00:22:59.750 --> 00:22:59.760
the context will be using what we call a
 

00:22:59.760 --> 00:23:01.520
the context will be using what we call a
dispatcher stop default that's a default

00:23:01.520 --> 00:23:01.530
dispatcher stop default that's a default
 

00:23:01.530 --> 00:23:03.320
dispatcher stop default that's a default
dispatcher that's kind of given for you

00:23:03.320 --> 00:23:03.330
dispatcher that's kind of given for you
 

00:23:03.330 --> 00:23:05.660
dispatcher that's kind of given for you
for free and it's supposed to be sort of

00:23:05.660 --> 00:23:05.670
for free and it's supposed to be sort of
 

00:23:05.670 --> 00:23:06.830
for free and it's supposed to be sort of
default for everything really

00:23:06.830 --> 00:23:06.840
default for everything really
 

00:23:06.840 --> 00:23:09.140
default for everything really
essentially a computation thread pool if

00:23:09.140 --> 00:23:09.150
essentially a computation thread pool if
 

00:23:09.150 --> 00:23:10.430
essentially a computation thread pool if
you're used to using that from our

00:23:10.430 --> 00:23:10.440
you're used to using that from our
 

00:23:10.440 --> 00:23:12.740
you're used to using that from our
Xstrata so what is a protein dispatcher

00:23:12.740 --> 00:23:12.750
Xstrata so what is a protein dispatcher
 

00:23:12.750 --> 00:23:15.350
Xstrata so what is a protein dispatcher
which is what it basically is what is

00:23:15.350 --> 00:23:15.360
which is what it basically is what is
 

00:23:15.360 --> 00:23:16.430
which is what it basically is what is
the thing which runs and schedules

00:23:16.430 --> 00:23:16.440
the thing which runs and schedules
 

00:23:16.440 --> 00:23:17.840
the thing which runs and schedules
curtains as I mentioned earlier it's

00:23:17.840 --> 00:23:17.850
curtains as I mentioned earlier it's
 

00:23:17.850 --> 00:23:19.220
curtains as I mentioned earlier it's
schedules or carotenes to run on

00:23:19.220 --> 00:23:19.230
schedules or carotenes to run on
 

00:23:19.230 --> 00:23:22.570
schedules or carotenes to run on
something on a Fred I know in our case

00:23:22.570 --> 00:23:22.580
something on a Fred I know in our case
 

00:23:22.580 --> 00:23:24.830
something on a Fred I know in our case
now this patch it's not default which is

00:23:24.830 --> 00:23:24.840
now this patch it's not default which is
 

00:23:24.840 --> 00:23:27.530
now this patch it's not default which is
the default which you get is that you

00:23:27.530 --> 00:23:27.540
the default which you get is that you
 

00:23:27.540 --> 00:23:29.780
the default which you get is that you
see CPU camp Fred so it has say your

00:23:29.780 --> 00:23:29.790
see CPU camp Fred so it has say your
 

00:23:29.790 --> 00:23:32.420
see CPU camp Fred so it has say your
device has four CPUs in it you will get

00:23:32.420 --> 00:23:32.430
device has four CPUs in it you will get
 

00:23:32.430 --> 00:23:35.150
device has four CPUs in it you will get
a Fred Paul at four which isn't so great

00:23:35.150 --> 00:23:35.160
a Fred Paul at four which isn't so great
 

00:23:35.160 --> 00:23:37.220
a Fred Paul at four which isn't so great
for things IO so most apps will be doing

00:23:37.220 --> 00:23:37.230
for things IO so most apps will be doing
 

00:23:37.230 --> 00:23:39.020
for things IO so most apps will be doing
a lot on network or disk or whatever it

00:23:39.020 --> 00:23:39.030
a lot on network or disk or whatever it
 

00:23:39.030 --> 00:23:41.060
a lot on network or disk or whatever it
be so it's not so great for that and so

00:23:41.060 --> 00:23:41.070
be so it's not so great for that and so
 

00:23:41.070 --> 00:23:42.350
be so it's not so great for that and so
yeah it's mostly more like a

00:23:42.350 --> 00:23:42.360
yeah it's mostly more like a
 

00:23:42.360 --> 00:23:45.740
yeah it's mostly more like a
computational type dispatcher but it's

00:23:45.740 --> 00:23:45.750
computational type dispatcher but it's
 

00:23:45.750 --> 00:23:48.170
computational type dispatcher but it's
also an elastic Fred executor which

00:23:48.170 --> 00:23:48.180
also an elastic Fred executor which
 

00:23:48.180 --> 00:23:49.370
also an elastic Fred executor which
we'll talk about in a minute but it's

00:23:49.370 --> 00:23:49.380
we'll talk about in a minute but it's
 

00:23:49.380 --> 00:23:52.520
we'll talk about in a minute but it's
the default there's also dispatcher to

00:23:52.520 --> 00:23:52.530
the default there's also dispatcher to
 

00:23:52.530 --> 00:23:54.890
the default there's also dispatcher to
IO which was added fairly recently and

00:23:54.890 --> 00:23:54.900
IO which was added fairly recently and
 

00:23:54.900 --> 00:23:56.000
IO which was added fairly recently and
it was designed specifically for

00:23:56.000 --> 00:23:56.010
it was designed specifically for
 

00:23:56.010 --> 00:23:58.280
it was designed specifically for
blocking i/o tasks so things that we

00:23:58.280 --> 00:23:58.290
blocking i/o tasks so things that we
 

00:23:58.290 --> 00:24:00.350
blocking i/o tasks so things that we
really care about you know network image

00:24:00.350 --> 00:24:00.360
really care about you know network image
 

00:24:00.360 --> 00:24:02.930
really care about you know network image
loading reading disk database blah blah

00:24:02.930 --> 00:24:02.940
loading reading disk database blah blah
 

00:24:02.940 --> 00:24:06.530
loading reading disk database blah blah
blah it uses a minimum 64 parallelism

00:24:06.530 --> 00:24:06.540
blah it uses a minimum 64 parallelism
 

00:24:06.540 --> 00:24:08.330
blah it uses a minimum 64 parallelism
which Bracy means it you can have up to

00:24:08.330 --> 00:24:08.340
which Bracy means it you can have up to
 

00:24:08.340 --> 00:24:10.160
which Bracy means it you can have up to
64 tasks run at a time which is great

00:24:10.160 --> 00:24:10.170
64 tasks run at a time which is great
 

00:24:10.170 --> 00:24:12.620
64 tasks run at a time which is great
for what we need so you can launch it

00:24:12.620 --> 00:24:12.630
for what we need so you can launch it
 

00:24:12.630 --> 00:24:15.350
for what we need so you can launch it
like that but the really great thing

00:24:15.350 --> 00:24:15.360
like that but the really great thing
 

00:24:15.360 --> 00:24:17.090
like that but the really great thing
about the IO dispatcher is that it

00:24:17.090 --> 00:24:17.100
about the IO dispatcher is that it
 

00:24:17.100 --> 00:24:19.280
about the IO dispatcher is that it
shares Fred pools with the default

00:24:19.280 --> 00:24:19.290
shares Fred pools with the default
 

00:24:19.290 --> 00:24:22.400
shares Fred pools with the default
dispatcher and the point where it comes

00:24:22.400 --> 00:24:22.410
dispatcher and the point where it comes
 

00:24:22.410 --> 00:24:23.990
dispatcher and the point where it comes
great is this so here we have an example

00:24:23.990 --> 00:24:24.000
great is this so here we have an example
 

00:24:24.000 --> 00:24:26.450
great is this so here we have an example
where we have an async

00:24:26.450 --> 00:24:26.460
where we have an async
 

00:24:26.460 --> 00:24:28.670
where we have an async
she's using the default dispatcher and

00:24:28.670 --> 00:24:28.680
she's using the default dispatcher and
 

00:24:28.680 --> 00:24:30.560
she's using the default dispatcher and
then we're gonna load an image on the

00:24:30.560 --> 00:24:30.570
then we're gonna load an image on the
 

00:24:30.570 --> 00:24:31.790
then we're gonna load an image on the
i/o dispatcher so we're gonna do some

00:24:31.790 --> 00:24:31.800
i/o dispatcher so we're gonna do some
 

00:24:31.800 --> 00:24:33.980
i/o dispatcher so we're gonna do some
disk reading some kind of load of image

00:24:33.980 --> 00:24:33.990
disk reading some kind of load of image
 

00:24:33.990 --> 00:24:35.840
disk reading some kind of load of image
whatever it be and then we're going to

00:24:35.840 --> 00:24:35.850
whatever it be and then we're going to
 

00:24:35.850 --> 00:24:37.490
whatever it be and then we're going to
use that result and then process it

00:24:37.490 --> 00:24:37.500
use that result and then process it
 

00:24:37.500 --> 00:24:41.360
use that result and then process it
somehow there's a computational task now

00:24:41.360 --> 00:24:41.370
somehow there's a computational task now
 

00:24:41.370 --> 00:24:43.310
somehow there's a computational task now
because this is running on the default

00:24:43.310 --> 00:24:43.320
because this is running on the default
 

00:24:43.320 --> 00:24:46.520
because this is running on the default
dispatcher there is no actual Fred

00:24:46.520 --> 00:24:46.530
dispatcher there is no actual Fred
 

00:24:46.530 --> 00:24:48.560
dispatcher there is no actual Fred
switch in there because we use those

00:24:48.560 --> 00:24:48.570
switch in there because we use those
 

00:24:48.570 --> 00:24:51.320
switch in there because we use those
assured Fred pulls IO and default uses

00:24:51.320 --> 00:24:51.330
assured Fred pulls IO and default uses
 

00:24:51.330 --> 00:24:52.850
assured Fred pulls IO and default uses
two shared Fred's therefore there's no

00:24:52.850 --> 00:24:52.860
two shared Fred's therefore there's no
 

00:24:52.860 --> 00:24:54.620
two shared Fred's therefore there's no
after Fred switch which makes it a whole

00:24:54.620 --> 00:24:54.630
after Fred switch which makes it a whole
 

00:24:54.630 --> 00:24:58.610
after Fred switch which makes it a whole
lot quicker then we also have dispatcher

00:24:58.610 --> 00:24:58.620
lot quicker then we also have dispatcher
 

00:24:58.620 --> 00:24:59.930
lot quicker then we also have dispatcher
stop main which we spoke about a little

00:24:59.930 --> 00:24:59.940
stop main which we spoke about a little
 

00:24:59.940 --> 00:25:02.420
stop main which we spoke about a little
bit already it allows running carotenes

00:25:02.420 --> 00:25:02.430
bit already it allows running carotenes
 

00:25:02.430 --> 00:25:05.570
bit already it allows running carotenes
on the UI main fred conovan who wants

00:25:05.570 --> 00:25:05.580
on the UI main fred conovan who wants
 

00:25:05.580 --> 00:25:07.040
on the UI main fred conovan who wants
with that is that in later releases

00:25:07.040 --> 00:25:07.050
with that is that in later releases
 

00:25:07.050 --> 00:25:10.160
with that is that in later releases
anyway ii uses service loader to load

00:25:10.160 --> 00:25:10.170
anyway ii uses service loader to load
 

00:25:10.170 --> 00:25:12.980
anyway ii uses service loader to load
the dispatcher in your code which is

00:25:12.980 --> 00:25:12.990
the dispatcher in your code which is
 

00:25:12.990 --> 00:25:14.120
the dispatcher in your code which is
kind of tricky when we have things like

00:25:14.120 --> 00:25:14.130
kind of tricky when we have things like
 

00:25:14.130 --> 00:25:16.550
kind of tricky when we have things like
ProGuard so you have a care for this but

00:25:16.550 --> 00:25:16.560
ProGuard so you have a care for this but
 

00:25:16.560 --> 00:25:18.080
ProGuard so you have a care for this but
yeah just be careful

00:25:18.080 --> 00:25:18.090
yeah just be careful
 

00:25:18.090 --> 00:25:19.550
yeah just be careful
the team's know is that you need to add

00:25:19.550 --> 00:25:19.560
the team's know is that you need to add
 

00:25:19.560 --> 00:25:21.380
the team's know is that you need to add
the Android dependency which is very

00:25:21.380 --> 00:25:21.390
the Android dependency which is very
 

00:25:21.390 --> 00:25:25.220
the Android dependency which is very
earlier anyway and then to use it as we

00:25:25.220 --> 00:25:25.230
earlier anyway and then to use it as we
 

00:25:25.230 --> 00:25:26.780
earlier anyway and then to use it as we
said just launched and then dispatch

00:25:26.780 --> 00:25:26.790
said just launched and then dispatch
 

00:25:26.790 --> 00:25:30.500
said just launched and then dispatch
stop me so that brings us a little bit

00:25:30.500 --> 00:25:30.510
stop me so that brings us a little bit
 

00:25:30.510 --> 00:25:33.950
stop me so that brings us a little bit
onto reactivity so how many blog posts

00:25:33.950 --> 00:25:33.960
onto reactivity so how many blog posts
 

00:25:33.960 --> 00:25:35.930
onto reactivity so how many blog posts
that you've seen recently anyway can be

00:25:35.930 --> 00:25:35.940
that you've seen recently anyway can be
 

00:25:35.940 --> 00:25:41.720
that you've seen recently anyway can be
summarized as this slide and I myself

00:25:41.720 --> 00:25:41.730
summarized as this slide and I myself
 

00:25:41.730 --> 00:25:46.010
summarized as this slide and I myself
have been guilty of this now I'm gonna

00:25:46.010 --> 00:25:46.020
have been guilty of this now I'm gonna
 

00:25:46.020 --> 00:25:48.470
have been guilty of this now I'm gonna
make the premise and the statement and

00:25:48.470 --> 00:25:48.480
make the premise and the statement and
 

00:25:48.480 --> 00:25:50.390
make the premise and the statement and
that most of Hugh's rxjava just because

00:25:50.390 --> 00:25:50.400
that most of Hugh's rxjava just because
 

00:25:50.400 --> 00:25:52.550
that most of Hugh's rxjava just because
it makes reading easy so the fact that

00:25:52.550 --> 00:25:52.560
it makes reading easy so the fact that
 

00:25:52.560 --> 00:25:54.110
it makes reading easy so the fact that
you have scheduled on and you can easily

00:25:54.110 --> 00:25:54.120
you have scheduled on and you can easily
 

00:25:54.120 --> 00:25:57.020
you have scheduled on and you can easily
switch a Fred or switch multiple threads

00:25:57.020 --> 00:25:57.030
switch a Fred or switch multiple threads
 

00:25:57.030 --> 00:25:59.860
switch a Fred or switch multiple threads
and that's why most iris Java is uses

00:25:59.860 --> 00:25:59.870
and that's why most iris Java is uses
 

00:25:59.870 --> 00:26:01.730
and that's why most iris Java is uses
and of course there are gonna be people

00:26:01.730 --> 00:26:01.740
and of course there are gonna be people
 

00:26:01.740 --> 00:26:03.470
and of course there are gonna be people
who go tell not top to bottom with

00:26:03.470 --> 00:26:03.480
who go tell not top to bottom with
 

00:26:03.480 --> 00:26:06.680
who go tell not top to bottom with
chains and reactivity but I think from

00:26:06.680 --> 00:26:06.690
chains and reactivity but I think from
 

00:26:06.690 --> 00:26:09.410
chains and reactivity but I think from
the AG presentment cases it's just a

00:26:09.410 --> 00:26:09.420
the AG presentment cases it's just a
 

00:26:09.420 --> 00:26:11.240
the AG presentment cases it's just a
switcher Fred and that's because the API

00:26:11.240 --> 00:26:11.250
switcher Fred and that's because the API
 

00:26:11.250 --> 00:26:12.800
switcher Fred and that's because the API
is that we have and we spoke about them

00:26:12.800 --> 00:26:12.810
is that we have and we spoke about them
 

00:26:12.810 --> 00:26:16.670
is that we have and we spoke about them
earlier aren't so great to use I'd say

00:26:16.670 --> 00:26:16.680
earlier aren't so great to use I'd say
 

00:26:16.680 --> 00:26:18.710
earlier aren't so great to use I'd say
that you and because of that most people

00:26:18.710 --> 00:26:18.720
that you and because of that most people
 

00:26:18.720 --> 00:26:20.360
that you and because of that most people
end up using things like single may be

00:26:20.360 --> 00:26:20.370
end up using things like single may be
 

00:26:20.370 --> 00:26:21.440
end up using things like single may be
incomplete for because that's

00:26:21.440 --> 00:26:21.450
incomplete for because that's
 

00:26:21.450 --> 00:26:22.610
incomplete for because that's
specifically what they are there's

00:26:22.610 --> 00:26:22.620
specifically what they are there's
 

00:26:22.620 --> 00:26:26.360
specifically what they are there's
single one-shot things single allows you

00:26:26.360 --> 00:26:26.370
single one-shot things single allows you
 

00:26:26.370 --> 00:26:27.800
single one-shot things single allows you
to always have a type maybe he's not a

00:26:27.800 --> 00:26:27.810
to always have a type maybe he's not a
 

00:26:27.810 --> 00:26:29.060
to always have a type maybe he's not a
ball and complete balls doesn't have a

00:26:29.060 --> 00:26:29.070
ball and complete balls doesn't have a
 

00:26:29.070 --> 00:26:30.740
ball and complete balls doesn't have a
return type so they're all pretty

00:26:30.740 --> 00:26:30.750
return type so they're all pretty
 

00:26:30.750 --> 00:26:33.920
return type so they're all pretty
similar but in fact they only actually

00:26:33.920 --> 00:26:33.930
similar but in fact they only actually
 

00:26:33.930 --> 00:26:35.930
similar but in fact they only actually
exist on Eric's Java are at Scala and

00:26:35.930 --> 00:26:35.940
exist on Eric's Java are at Scala and
 

00:26:35.940 --> 00:26:37.070
exist on Eric's Java are at Scala and
are it's groovy they don't actually

00:26:37.070 --> 00:26:37.080
are it's groovy they don't actually
 

00:26:37.080 --> 00:26:39.200
are it's groovy they don't actually
exist in any other platform so I said

00:26:39.200 --> 00:26:39.210
exist in any other platform so I said
 

00:26:39.210 --> 00:26:40.190
exist in any other platform so I said
earlier then maybe

00:26:40.190 --> 00:26:40.200
earlier then maybe
 

00:26:40.200 --> 00:26:42.379
earlier then maybe
it's more reflection of the api's that

00:26:42.379 --> 00:26:42.389
it's more reflection of the api's that
 

00:26:42.389 --> 00:26:44.240
it's more reflection of the api's that
we have our disposal rather than the

00:26:44.240 --> 00:26:44.250
we have our disposal rather than the
 

00:26:44.250 --> 00:26:47.419
we have our disposal rather than the
fact that they're needed Soaker Oh teens

00:26:47.419 --> 00:26:47.429
fact that they're needed Soaker Oh teens
 

00:26:47.429 --> 00:26:49.250
fact that they're needed Soaker Oh teens
can actually quite easily replace single

00:26:49.250 --> 00:26:49.260
can actually quite easily replace single
 

00:26:49.260 --> 00:26:50.810
can actually quite easily replace single
maybe incompressible they do exactly

00:26:50.810 --> 00:26:50.820
maybe incompressible they do exactly
 

00:26:50.820 --> 00:26:52.039
maybe incompressible they do exactly
what you think and we said earlier about

00:26:52.039 --> 00:26:52.049
what you think and we said earlier about
 

00:26:52.049 --> 00:26:53.930
what you think and we said earlier about
replacing callbacks they also replace

00:26:53.930 --> 00:26:53.940
replacing callbacks they also replace
 

00:26:53.940 --> 00:26:56.990
replacing callbacks they also replace
these kind of quite nicely so is an

00:26:56.990 --> 00:26:57.000
these kind of quite nicely so is an
 

00:26:57.000 --> 00:26:58.879
these kind of quite nicely so is an
example so we have a retrofit interface

00:26:58.879 --> 00:26:58.889
example so we have a retrofit interface
 

00:26:58.889 --> 00:27:01.639
example so we have a retrofit interface
which has a guess and it returns a

00:27:01.639 --> 00:27:01.649
which has a guess and it returns a
 

00:27:01.649 --> 00:27:03.230
which has a guess and it returns a
single which is just returns a list of

00:27:03.230 --> 00:27:03.240
single which is just returns a list of
 

00:27:03.240 --> 00:27:06.529
single which is just returns a list of
shows and the way you'd use that in our

00:27:06.529 --> 00:27:06.539
shows and the way you'd use that in our
 

00:27:06.539 --> 00:27:08.600
shows and the way you'd use that in our
xjv is you do this chaining so you'd

00:27:08.600 --> 00:27:08.610
xjv is you do this chaining so you'd
 

00:27:08.610 --> 00:27:11.330
xjv is you do this chaining so you'd
switch the scheduler using scheduled on

00:27:11.330 --> 00:27:11.340
switch the scheduler using scheduled on
 

00:27:11.340 --> 00:27:12.529
switch the scheduler using scheduled on
and here we can use the i/o scheduler

00:27:12.529 --> 00:27:12.539
and here we can use the i/o scheduler
 

00:27:12.539 --> 00:27:14.750
and here we can use the i/o scheduler
which is provided for you and then we're

00:27:14.750 --> 00:27:14.760
which is provided for you and then we're
 

00:27:14.760 --> 00:27:16.519
which is provided for you and then we're
going to do some calls to when it's

00:27:16.519 --> 00:27:16.529
going to do some calls to when it's
 

00:27:16.529 --> 00:27:20.120
going to do some calls to when it's
finished now the nice thing about the rx

00:27:20.120 --> 00:27:20.130
finished now the nice thing about the rx
 

00:27:20.130 --> 00:27:22.310
finished now the nice thing about the rx
to interrupt library of carotenes is

00:27:22.310 --> 00:27:22.320
to interrupt library of carotenes is
 

00:27:22.320 --> 00:27:24.889
to interrupt library of carotenes is
that you can actually use that exact

00:27:24.889 --> 00:27:24.899
that you can actually use that exact
 

00:27:24.899 --> 00:27:27.470
that you can actually use that exact
single as an await so you can actually

00:27:27.470 --> 00:27:27.480
single as an await so you can actually
 

00:27:27.480 --> 00:27:30.919
single as an await so you can actually
use it as like a suspending deferred so

00:27:30.919 --> 00:27:30.929
use it as like a suspending deferred so
 

00:27:30.929 --> 00:27:32.480
use it as like a suspending deferred so
it's really handy for when you're kind

00:27:32.480 --> 00:27:32.490
it's really handy for when you're kind
 

00:27:32.490 --> 00:27:34.279
it's really handy for when you're kind
of slowly migrating towards carotenes

00:27:34.279 --> 00:27:34.289
of slowly migrating towards carotenes
 

00:27:34.289 --> 00:27:35.600
of slowly migrating towards carotenes
and you don't want to change everything

00:27:35.600 --> 00:27:35.610
and you don't want to change everything
 

00:27:35.610 --> 00:27:38.990
and you don't want to change everything
know from day one you can actually keep

00:27:38.990 --> 00:27:39.000
know from day one you can actually keep
 

00:27:39.000 --> 00:27:41.480
know from day one you can actually keep
those interfaces all those reserve balls

00:27:41.480 --> 00:27:41.490
those interfaces all those reserve balls
 

00:27:41.490 --> 00:27:42.889
those interfaces all those reserve balls
and you can actually just call a weight

00:27:42.889 --> 00:27:42.899
and you can actually just call a weight
 

00:27:42.899 --> 00:27:45.230
and you can actually just call a weight
on them you receive inside can't be

00:27:45.230 --> 00:27:45.240
on them you receive inside can't be
 

00:27:45.240 --> 00:27:46.970
on them you receive inside can't be
using carotenes so it's quite a handy

00:27:46.970 --> 00:27:46.980
using carotenes so it's quite a handy
 

00:27:46.980 --> 00:27:51.620
using carotenes so it's quite a handy
way to slowly migrate but what how what

00:27:51.620 --> 00:27:51.630
way to slowly migrate but what how what
 

00:27:51.630 --> 00:27:52.639
way to slowly migrate but what how what
a might be great if we can actually made

00:27:52.639 --> 00:27:52.649
a might be great if we can actually made
 

00:27:52.649 --> 00:27:55.669
a might be great if we can actually made
that retrofit call just a suspending

00:27:55.669 --> 00:27:55.679
that retrofit call just a suspending
 

00:27:55.679 --> 00:27:57.110
that retrofit call just a suspending
function and just remove the whole rx

00:27:57.110 --> 00:27:57.120
function and just remove the whole rx
 

00:27:57.120 --> 00:28:00.620
function and just remove the whole rx
from the start well we can and that is

00:28:00.620 --> 00:28:00.630
from the start well we can and that is
 

00:28:00.630 --> 00:28:02.269
from the start well we can and that is
actually coming to retrofit soon jake

00:28:02.269 --> 00:28:02.279
actually coming to retrofit soon jake
 

00:28:02.279 --> 00:28:04.639
actually coming to retrofit soon jake
has a PR which is pending review and but

00:28:04.639 --> 00:28:04.649
has a PR which is pending review and but
 

00:28:04.649 --> 00:28:08.779
has a PR which is pending review and but
it's he tells me age soon so yeah it's

00:28:08.779 --> 00:28:08.789
it's he tells me age soon so yeah it's
 

00:28:08.789 --> 00:28:12.470
it's he tells me age soon so yeah it's
the crimson and then if you look at a

00:28:12.470 --> 00:28:12.480
the crimson and then if you look at a
 

00:28:12.480 --> 00:28:14.210
the crimson and then if you look at a
consuming code it's pretty much the same

00:28:14.210 --> 00:28:14.220
consuming code it's pretty much the same
 

00:28:14.220 --> 00:28:15.649
consuming code it's pretty much the same
it's just we can now get rid of that

00:28:15.649 --> 00:28:15.659
it's just we can now get rid of that
 

00:28:15.659 --> 00:28:17.509
it's just we can now get rid of that
weight and it's just a normal suspending

00:28:17.509 --> 00:28:17.519
weight and it's just a normal suspending
 

00:28:17.519 --> 00:28:18.799
weight and it's just a normal suspending
function that we've called and it you

00:28:18.799 --> 00:28:18.809
function that we've called and it you
 

00:28:18.809 --> 00:28:22.639
function that we've called and it you
know it's normal carotene and that

00:28:22.639 --> 00:28:22.649
know it's normal carotene and that
 

00:28:22.649 --> 00:28:24.590
know it's normal carotene and that
brings us on to our final section which

00:28:24.590 --> 00:28:24.600
brings us on to our final section which
 

00:28:24.600 --> 00:28:26.269
brings us on to our final section which
is kind of bringing it all back together

00:28:26.269 --> 00:28:26.279
is kind of bringing it all back together
 

00:28:26.279 --> 00:28:28.669
is kind of bringing it all back together
and trying to finger two scenarios where

00:28:28.669 --> 00:28:28.679
and trying to finger two scenarios where
 

00:28:28.679 --> 00:28:30.769
and trying to finger two scenarios where
we show you how to use carotenes to make

00:28:30.769 --> 00:28:30.779
we show you how to use carotenes to make
 

00:28:30.779 --> 00:28:33.200
we show you how to use carotenes to make
your lives easier on Android both the

00:28:33.200 --> 00:28:33.210
your lives easier on Android both the
 

00:28:33.210 --> 00:28:35.149
your lives easier on Android both the
examples are all about location the

00:28:35.149 --> 00:28:35.159
examples are all about location the
 

00:28:35.159 --> 00:28:36.529
examples are all about location the
first one is about actually getting the

00:28:36.529 --> 00:28:36.539
first one is about actually getting the
 

00:28:36.539 --> 00:28:39.049
first one is about actually getting the
last known location which kind of

00:28:39.049 --> 00:28:39.059
last known location which kind of
 

00:28:39.059 --> 00:28:42.289
last known location which kind of
fingers like a one shot callback so here

00:28:42.289 --> 00:28:42.299
fingers like a one shot callback so here
 

00:28:42.299 --> 00:28:43.340
fingers like a one shot callback so here
we're going to use the fused location

00:28:43.340 --> 00:28:43.350
we're going to use the fused location
 

00:28:43.350 --> 00:28:46.009
we're going to use the fused location
provider client which is from the Google

00:28:46.009 --> 00:28:46.019
provider client which is from the Google
 

00:28:46.019 --> 00:28:48.560
provider client which is from the Google
Play services API it's actually kind of

00:28:48.560 --> 00:28:48.570
Play services API it's actually kind of
 

00:28:48.570 --> 00:28:50.539
Play services API it's actually kind of
cool because it combines all different

00:28:50.539 --> 00:28:50.549
cool because it combines all different
 

00:28:50.549 --> 00:28:52.879
cool because it combines all different
providers we have like Wi-Fi and GPS and

00:28:52.879 --> 00:28:52.889
providers we have like Wi-Fi and GPS and
 

00:28:52.889 --> 00:28:53.560
providers we have like Wi-Fi and GPS and
mobile

00:28:53.560 --> 00:28:53.570
mobile
 

00:28:53.570 --> 00:28:55.810
mobile
whatever is Bluetooth provides all those

00:28:55.810 --> 00:28:55.820
whatever is Bluetooth provides all those
 

00:28:55.820 --> 00:28:57.669
whatever is Bluetooth provides all those
providers for you I mean to one single

00:28:57.669 --> 00:28:57.679
providers for you I mean to one single
 

00:28:57.679 --> 00:28:59.049
providers for you I mean to one single
API so it's actually very nice API to

00:28:59.049 --> 00:28:59.059
API so it's actually very nice API to
 

00:28:59.059 --> 00:29:02.200
API so it's actually very nice API to
use and it returns a task which is a

00:29:02.200 --> 00:29:02.210
use and it returns a task which is a
 

00:29:02.210 --> 00:29:03.820
use and it returns a task which is a
kind of Futura type thing that Play

00:29:03.820 --> 00:29:03.830
kind of Futura type thing that Play
 

00:29:03.830 --> 00:29:06.609
kind of Futura type thing that Play
services library has and yeah so you

00:29:06.609 --> 00:29:06.619
services library has and yeah so you
 

00:29:06.619 --> 00:29:08.440
services library has and yeah so you
call client get last location and they

00:29:08.440 --> 00:29:08.450
call client get last location and they
 

00:29:08.450 --> 00:29:11.379
call client get last location and they
returns a task and from the task you can

00:29:11.379 --> 00:29:11.389
returns a task and from the task you can
 

00:29:11.389 --> 00:29:13.239
returns a task and from the task you can
add what we call a complete listener and

00:29:13.239 --> 00:29:13.249
add what we call a complete listener and
 

00:29:13.249 --> 00:29:14.649
add what we call a complete listener and
then you'll get the result back

00:29:14.649 --> 00:29:14.659
then you'll get the result back
 

00:29:14.659 --> 00:29:18.239
then you'll get the result back
eventually so it's completely sync

00:29:18.239 --> 00:29:18.249
eventually so it's completely sync
 

00:29:18.249 --> 00:29:20.320
eventually so it's completely sync
so when you think about it what we're

00:29:20.320 --> 00:29:20.330
so when you think about it what we're
 

00:29:20.330 --> 00:29:22.389
so when you think about it what we're
doing is converting a callback api into

00:29:22.389 --> 00:29:22.399
doing is converting a callback api into
 

00:29:22.399 --> 00:29:23.619
doing is converting a callback api into
a suspending function that's pretty much

00:29:23.619 --> 00:29:23.629
a suspending function that's pretty much
 

00:29:23.629 --> 00:29:26.919
a suspending function that's pretty much
what we want to do and luckily the curie

00:29:26.919 --> 00:29:26.929
what we want to do and luckily the curie
 

00:29:26.929 --> 00:29:29.529
what we want to do and luckily the curie
teens library has to kind of builders

00:29:29.529 --> 00:29:29.539
teens library has to kind of builders
 

00:29:29.539 --> 00:29:32.019
teens library has to kind of builders
that do exactly what we want the first

00:29:32.019 --> 00:29:32.029
that do exactly what we want the first
 

00:29:32.029 --> 00:29:37.180
that do exactly what we want the first
is to suspend co-routine and what you do

00:29:37.180 --> 00:29:37.190
is to suspend co-routine and what you do
 

00:29:37.190 --> 00:29:39.190
is to suspend co-routine and what you do
you pass a lambda in which set which

00:29:39.190 --> 00:29:39.200
you pass a lambda in which set which
 

00:29:39.200 --> 00:29:40.869
you pass a lambda in which set which
allows you to setup your callback so I

00:29:40.869 --> 00:29:40.879
allows you to setup your callback so I
 

00:29:40.879 --> 00:29:42.820
allows you to setup your callback so I
think what we'll do here is call play

00:29:42.820 --> 00:29:42.830
think what we'll do here is call play
 

00:29:42.830 --> 00:29:44.940
think what we'll do here is call play
services and go get me the last location

00:29:44.940 --> 00:29:44.950
services and go get me the last location
 

00:29:44.950 --> 00:29:47.589
services and go get me the last location
at that point this is the Qura teen

00:29:47.589 --> 00:29:47.599
at that point this is the Qura teen
 

00:29:47.599 --> 00:29:49.299
at that point this is the Qura teen
immediately suspends waiting for the

00:29:49.299 --> 00:29:49.309
immediately suspends waiting for the
 

00:29:49.309 --> 00:29:50.799
immediately suspends waiting for the
result to come back and then the

00:29:50.799 --> 00:29:50.809
result to come back and then the
 

00:29:50.809 --> 00:29:52.389
result to come back and then the
callback can wake it back up basically

00:29:52.389 --> 00:29:52.399
callback can wake it back up basically
 

00:29:52.399 --> 00:29:55.869
callback can wake it back up basically
so we'll go for an example now yeah

00:29:55.869 --> 00:29:55.879
so we'll go for an example now yeah
 

00:29:55.879 --> 00:29:57.219
so we'll go for an example now yeah
you're given a continuation to later is

00:29:57.219 --> 00:29:57.229
you're given a continuation to later is
 

00:29:57.229 --> 00:30:01.989
you're given a continuation to later is
you that's how we do and analyze the

00:30:01.989 --> 00:30:01.999
you that's how we do and analyze the
 

00:30:01.999 --> 00:30:05.799
you that's how we do and analyze the
calls accountable so actually that's

00:30:05.799 --> 00:30:05.809
calls accountable so actually that's
 

00:30:05.809 --> 00:30:07.149
calls accountable so actually that's
different or not so there is a newer

00:30:07.149 --> 00:30:07.159
different or not so there is a newer
 

00:30:07.159 --> 00:30:08.619
different or not so there is a newer
version that's are doing which is good

00:30:08.619 --> 00:30:08.629
version that's are doing which is good
 

00:30:08.629 --> 00:30:09.909
version that's are doing which is good
luck there's another version because

00:30:09.909 --> 00:30:09.919
luck there's another version because
 

00:30:09.919 --> 00:30:11.589
luck there's another version because
suspend cancelable carotene so cousins

00:30:11.589 --> 00:30:11.599
suspend cancelable carotene so cousins
 

00:30:11.599 --> 00:30:14.259
suspend cancelable carotene so cousins
all add on on top and it allows you to

00:30:14.259 --> 00:30:14.269
all add on on top and it allows you to
 

00:30:14.269 --> 00:30:16.659
all add on on top and it allows you to
cancel the call so say your carotene is

00:30:16.659 --> 00:30:16.669
cancel the call so say your carotene is
 

00:30:16.669 --> 00:30:18.269
cancel the call so say your carotene is
canceled you can then tell the

00:30:18.269 --> 00:30:18.279
canceled you can then tell the
 

00:30:18.279 --> 00:30:20.440
canceled you can then tell the
underlying API in this case play

00:30:20.440 --> 00:30:20.450
underlying API in this case play
 

00:30:20.450 --> 00:30:24.759
underlying API in this case play
services to cancel its call so let's

00:30:24.759 --> 00:30:24.769
services to cancel its call so let's
 

00:30:24.769 --> 00:30:26.080
services to cancel its call so let's
build a function so here we can have a

00:30:26.080 --> 00:30:26.090
build a function so here we can have a
 

00:30:26.090 --> 00:30:27.310
build a function so here we can have a
suspending function called get last

00:30:27.310 --> 00:30:27.320
suspending function called get last
 

00:30:27.320 --> 00:30:29.229
suspending function called get last
location and it returns an actual

00:30:29.229 --> 00:30:29.239
location and it returns an actual
 

00:30:29.239 --> 00:30:30.789
location and it returns an actual
location to some intent of future or any

00:30:30.789 --> 00:30:30.799
location to some intent of future or any
 

00:30:30.799 --> 00:30:34.019
location to some intent of future or any
funada it's just a straight-up location

00:30:34.019 --> 00:30:34.029
funada it's just a straight-up location
 

00:30:34.029 --> 00:30:35.950
funada it's just a straight-up location
so we're gonna use our suspend

00:30:35.950 --> 00:30:35.960
so we're gonna use our suspend
 

00:30:35.960 --> 00:30:37.810
so we're gonna use our suspend
cancellable co-routine builder and and

00:30:37.810 --> 00:30:37.820
cancellable co-routine builder and and
 

00:30:37.820 --> 00:30:38.739
cancellable co-routine builder and and
then we're going to a continuation

00:30:38.739 --> 00:30:38.749
then we're going to a continuation
 

00:30:38.749 --> 00:30:42.879
then we're going to a continuation
that's a kind of callback e typing and

00:30:42.879 --> 00:30:42.889
that's a kind of callback e typing and
 

00:30:42.889 --> 00:30:45.009
that's a kind of callback e typing and
then we're gonna sort of set up so we're

00:30:45.009 --> 00:30:45.019
then we're gonna sort of set up so we're
 

00:30:45.019 --> 00:30:46.509
then we're gonna sort of set up so we're
gonna call a location client which is

00:30:46.509 --> 00:30:46.519
gonna call a location client which is
 

00:30:46.519 --> 00:30:49.930
gonna call a location client which is
the Play services API last location and

00:30:49.930 --> 00:30:49.940
the Play services API last location and
 

00:30:49.940 --> 00:30:51.849
the Play services API last location and
then we're gonna we get a task back and

00:30:51.849 --> 00:30:51.859
then we're gonna we get a task back and
 

00:30:51.859 --> 00:30:52.930
then we're gonna we get a task back and
then we're gonna add our on complete

00:30:52.930 --> 00:30:52.940
then we're gonna add our on complete
 

00:30:52.940 --> 00:30:56.080
then we're gonna add our on complete
listener at that point we are gonna wake

00:30:56.080 --> 00:30:56.090
listener at that point we are gonna wake
 

00:30:56.090 --> 00:30:58.960
listener at that point we are gonna wake
up actor it in so that is how we pass

00:30:58.960 --> 00:30:58.970
up actor it in so that is how we pass
 

00:30:58.970 --> 00:31:00.489
up actor it in so that is how we pass
back to the suspended coyote in the

00:31:00.489 --> 00:31:00.499
back to the suspended coyote in the
 

00:31:00.499 --> 00:31:02.289
back to the suspended coyote in the
result and it then wakes up and there's

00:31:02.289 --> 00:31:02.299
result and it then wakes up and there's
 

00:31:02.299 --> 00:31:05.259
result and it then wakes up and there's
a suspending function basically waits

00:31:05.259 --> 00:31:05.269
a suspending function basically waits
 

00:31:05.269 --> 00:31:08.430
a suspending function basically waits
backup resumes

00:31:08.430 --> 00:31:08.440
 

00:31:08.440 --> 00:31:11.889
now because this is a councilor ball of

00:31:11.889 --> 00:31:11.899
now because this is a councilor ball of
 

00:31:11.899 --> 00:31:14.259
now because this is a councilor ball of
a national bank really because we are

00:31:14.259 --> 00:31:14.269
a national bank really because we are
 

00:31:14.269 --> 00:31:16.899
a national bank really because we are
using tasks we're not using the success

00:31:16.899 --> 00:31:16.909
using tasks we're not using the success
 

00:31:16.909 --> 00:31:18.639
using tasks we're not using the success
isn't we using a complete listener which

00:31:18.639 --> 00:31:18.649
isn't we using a complete listener which
 

00:31:18.649 --> 00:31:20.740
isn't we using a complete listener which
means that the task itself can for an

00:31:20.740 --> 00:31:20.750
means that the task itself can for an
 

00:31:20.750 --> 00:31:22.539
means that the task itself can for an
exception like it can fail for whatever

00:31:22.539 --> 00:31:22.549
exception like it can fail for whatever
 

00:31:22.549 --> 00:31:24.299
exception like it can fail for whatever
reason so you don't have a location

00:31:24.299 --> 00:31:24.309
reason so you don't have a location
 

00:31:24.309 --> 00:31:27.490
reason so you don't have a location
permission or whatever it be now it will

00:31:27.490 --> 00:31:27.500
permission or whatever it be now it will
 

00:31:27.500 --> 00:31:29.259
permission or whatever it be now it will
raise an exception on you which means

00:31:29.259 --> 00:31:29.269
raise an exception on you which means
 

00:31:29.269 --> 00:31:31.000
raise an exception on you which means
that you can populate that back up to

00:31:31.000 --> 00:31:31.010
that you can populate that back up to
 

00:31:31.010 --> 00:31:33.129
that you can populate that back up to
the colleague which is done with the

00:31:33.129 --> 00:31:33.139
the colleague which is done with the
 

00:31:33.139 --> 00:31:37.330
the colleague which is done with the
resume with exception method and finally

00:31:37.330 --> 00:31:37.340
resume with exception method and finally
 

00:31:37.340 --> 00:31:39.250
resume with exception method and finally
because we're using suspend cancel or

00:31:39.250 --> 00:31:39.260
because we're using suspend cancel or
 

00:31:39.260 --> 00:31:42.100
because we're using suspend cancel or
co-routine we need to tell the Play

00:31:42.100 --> 00:31:42.110
co-routine we need to tell the Play
 

00:31:42.110 --> 00:31:43.840
co-routine we need to tell the Play
services API that we've been cancelled

00:31:43.840 --> 00:31:43.850
services API that we've been cancelled
 

00:31:43.850 --> 00:31:46.450
services API that we've been cancelled
so therefore each cancel so we do that

00:31:46.450 --> 00:31:46.460
so therefore each cancel so we do that
 

00:31:46.460 --> 00:31:48.070
so therefore each cancel so we do that
with a callback which is infocomm

00:31:48.070 --> 00:31:48.080
with a callback which is infocomm
 

00:31:48.080 --> 00:31:50.560
with a callback which is infocomm
completion at that point as soon as you

00:31:50.560 --> 00:31:50.570
completion at that point as soon as you
 

00:31:50.570 --> 00:31:52.720
completion at that point as soon as you
know that the curtain has been cancelled

00:31:52.720 --> 00:31:52.730
know that the curtain has been cancelled
 

00:31:52.730 --> 00:31:53.620
know that the curtain has been cancelled
which means that you need to sell five

00:31:53.620 --> 00:31:53.630
which means that you need to sell five
 

00:31:53.630 --> 00:31:55.450
which means that you need to sell five
services now they say PR doesn't

00:31:55.450 --> 00:31:55.460
services now they say PR doesn't
 

00:31:55.460 --> 00:31:56.799
services now they say PR doesn't
actually exist because Play Services

00:31:56.799 --> 00:31:56.809
actually exist because Play Services
 

00:31:56.809 --> 00:31:58.899
actually exist because Play Services
doesn't have a cancel method but imagine

00:31:58.899 --> 00:31:58.909
doesn't have a cancel method but imagine
 

00:31:58.909 --> 00:32:01.840
doesn't have a cancel method but imagine
it just exists now Adams going to talk

00:32:01.840 --> 00:32:01.850
it just exists now Adams going to talk
 

00:32:01.850 --> 00:32:05.259
it just exists now Adams going to talk
about observing sure so what happens

00:32:05.259 --> 00:32:05.269
about observing sure so what happens
 

00:32:05.269 --> 00:32:06.610
about observing sure so what happens
when you want to observe a sequence of

00:32:06.610 --> 00:32:06.620
when you want to observe a sequence of
 

00:32:06.620 --> 00:32:08.799
when you want to observe a sequence of
events over time no this is the thing

00:32:08.799 --> 00:32:08.809
events over time no this is the thing
 

00:32:08.809 --> 00:32:10.419
events over time no this is the thing
that our ex is really really good at

00:32:10.419 --> 00:32:10.429
that our ex is really really good at
 

00:32:10.429 --> 00:32:12.549
that our ex is really really good at
like if you're using rx for anything it

00:32:12.549 --> 00:32:12.559
like if you're using rx for anything it
 

00:32:12.559 --> 00:32:14.620
like if you're using rx for anything it
should be for this and people tend to

00:32:14.620 --> 00:32:14.630
should be for this and people tend to
 

00:32:14.630 --> 00:32:17.320
should be for this and people tend to
compare rx Java and co-routines quite a

00:32:17.320 --> 00:32:17.330
compare rx Java and co-routines quite a
 

00:32:17.330 --> 00:32:19.870
compare rx Java and co-routines quite a
bit in blogs and so on and so forth so

00:32:19.870 --> 00:32:19.880
bit in blogs and so on and so forth so
 

00:32:19.880 --> 00:32:21.430
bit in blogs and so on and so forth so
so what does it actually look like if we

00:32:21.430 --> 00:32:21.440
so what does it actually look like if we
 

00:32:21.440 --> 00:32:23.289
so what does it actually look like if we
try and emulate this using co-routines

00:32:23.289 --> 00:32:23.299
try and emulate this using co-routines
 

00:32:23.299 --> 00:32:26.110
try and emulate this using co-routines
as a primitive so place service is a

00:32:26.110 --> 00:32:26.120
as a primitive so place service is a
 

00:32:26.120 --> 00:32:27.789
as a primitive so place service is a
location API in addition to letting you

00:32:27.789 --> 00:32:27.799
location API in addition to letting you
 

00:32:27.799 --> 00:32:29.470
location API in addition to letting you
get just kind of a one shot what's my

00:32:29.470 --> 00:32:29.480
get just kind of a one shot what's my
 

00:32:29.480 --> 00:32:30.399
get just kind of a one shot what's my
current location

00:32:30.399 --> 00:32:30.409
current location
 

00:32:30.409 --> 00:32:32.080
current location
it lets you request location updates

00:32:32.080 --> 00:32:32.090
it lets you request location updates
 

00:32:32.090 --> 00:32:33.850
it lets you request location updates
using a callback that's invoked multiple

00:32:33.850 --> 00:32:33.860
using a callback that's invoked multiple
 

00:32:33.860 --> 00:32:35.769
using a callback that's invoked multiple
times so normally this is a prime

00:32:35.769 --> 00:32:35.779
times so normally this is a prime
 

00:32:35.779 --> 00:32:37.149
times so normally this is a prime
candidate to be an observable you

00:32:37.149 --> 00:32:37.159
candidate to be an observable you
 

00:32:37.159 --> 00:32:38.889
candidate to be an observable you
register a callback at subscribe time

00:32:38.889 --> 00:32:38.899
register a callback at subscribe time
 

00:32:38.899 --> 00:32:41.440
register a callback at subscribe time
and unregister when that subscription is

00:32:41.440 --> 00:32:41.450
and unregister when that subscription is
 

00:32:41.450 --> 00:32:43.779
and unregister when that subscription is
disposed we get this composable control

00:32:43.779 --> 00:32:43.789
disposed we get this composable control
 

00:32:43.789 --> 00:32:45.639
disposed we get this composable control
over shutting down the updates really

00:32:45.639 --> 00:32:45.649
over shutting down the updates really
 

00:32:45.649 --> 00:32:48.159
over shutting down the updates really
cleanly so Rx is a great library offers

00:32:48.159 --> 00:32:48.169
cleanly so Rx is a great library offers
 

00:32:48.169 --> 00:32:49.990
cleanly so Rx is a great library offers
a ton of functionality to build things

00:32:49.990 --> 00:32:50.000
a ton of functionality to build things
 

00:32:50.000 --> 00:32:52.539
a ton of functionality to build things
like this so how many similar benefits

00:32:52.539 --> 00:32:52.549
like this so how many similar benefits
 

00:32:52.549 --> 00:32:54.190
like this so how many similar benefits
can we get if we base this off of

00:32:54.190 --> 00:32:54.200
can we get if we base this off of
 

00:32:54.200 --> 00:32:57.190
can we get if we base this off of
suspending functions so let's again

00:32:57.190 --> 00:32:57.200
suspending functions so let's again
 

00:32:57.200 --> 00:32:58.899
suspending functions so let's again
start just writing a simple function or

00:32:58.899 --> 00:32:58.909
start just writing a simple function or
 

00:32:58.909 --> 00:33:00.149
start just writing a simple function or
at least it's going to start out simple

00:33:00.149 --> 00:33:00.159
at least it's going to start out simple
 

00:33:00.159 --> 00:33:01.930
at least it's going to start out simple
suspending functions don't return until

00:33:01.930 --> 00:33:01.940
suspending functions don't return until
 

00:33:01.940 --> 00:33:03.909
suspending functions don't return until
their work is all done so there's no

00:33:03.909 --> 00:33:03.919
their work is all done so there's no
 

00:33:03.919 --> 00:33:05.980
their work is all done so there's no
disposable or closable return by it

00:33:05.980 --> 00:33:05.990
disposable or closable return by it
 

00:33:05.990 --> 00:33:07.629
disposable or closable return by it
since the calling scope itself is

00:33:07.629 --> 00:33:07.639
since the calling scope itself is
 

00:33:07.639 --> 00:33:09.100
since the calling scope itself is
cancelable we just don't return until

00:33:09.100 --> 00:33:09.110
cancelable we just don't return until
 

00:33:09.110 --> 00:33:09.610
cancelable we just don't return until
we're done

00:33:09.610 --> 00:33:09.620
we're done
 

00:33:09.620 --> 00:33:12.279
we're done
so our observer in this case can just be

00:33:12.279 --> 00:33:12.289
so our observer in this case can just be
 

00:33:12.289 --> 00:33:14.350
so our observer in this case can just be
a simple lambda that accepts a location

00:33:14.350 --> 00:33:14.360
a simple lambda that accepts a location
 

00:33:14.360 --> 00:33:15.970
a simple lambda that accepts a location
result and we'll go ahead and call it

00:33:15.970 --> 00:33:15.980
result and we'll go ahead and call it
 

00:33:15.980 --> 00:33:17.409
result and we'll go ahead and call it
whenever a new locations reported

00:33:17.409 --> 00:33:17.419
whenever a new locations reported
 

00:33:17.419 --> 00:33:19.269
whenever a new locations reported
without actually returning from observed

00:33:19.269 --> 00:33:19.279
without actually returning from observed
 

00:33:19.279 --> 00:33:21.490
without actually returning from observed
location

00:33:21.490 --> 00:33:21.500
location
 

00:33:21.500 --> 00:33:23.990
location
so if you take in this giant pile of

00:33:23.990 --> 00:33:24.000
so if you take in this giant pile of
 

00:33:24.000 --> 00:33:25.640
so if you take in this giant pile of
code here some of you might notice that

00:33:25.640 --> 00:33:25.650
code here some of you might notice that
 

00:33:25.650 --> 00:33:27.440
code here some of you might notice that
it looks an awful lot like an observable

00:33:27.440 --> 00:33:27.450
it looks an awful lot like an observable
 

00:33:27.450 --> 00:33:29.600
it looks an awful lot like an observable
dot create call from our X so let's go

00:33:29.600 --> 00:33:29.610
dot create call from our X so let's go
 

00:33:29.610 --> 00:33:31.539
dot create call from our X so let's go
ahead and take it apart piece by piece

00:33:31.539 --> 00:33:31.549
ahead and take it apart piece by piece
 

00:33:31.549 --> 00:33:33.560
ahead and take it apart piece by piece
well go ahead and start off and we'll

00:33:33.560 --> 00:33:33.570
well go ahead and start off and we'll
 

00:33:33.570 --> 00:33:35.270
well go ahead and start off and we'll
just create this done signal that we can

00:33:35.270 --> 00:33:35.280
just create this done signal that we can
 

00:33:35.280 --> 00:33:36.799
just create this done signal that we can
await on later to know when to finish

00:33:36.799 --> 00:33:36.809
await on later to know when to finish
 

00:33:36.809 --> 00:33:38.480
await on later to know when to finish
normally and clean up so this is like

00:33:38.480 --> 00:33:38.490
normally and clean up so this is like
 

00:33:38.490 --> 00:33:40.190
normally and clean up so this is like
our observable completion in the case

00:33:40.190 --> 00:33:40.200
our observable completion in the case
 

00:33:40.200 --> 00:33:41.360
our observable completion in the case
where that you have a stream with a

00:33:41.360 --> 00:33:41.370
where that you have a stream with a
 

00:33:41.370 --> 00:33:43.640
where that you have a stream with a
well-defined end signal you can complete

00:33:43.640 --> 00:33:43.650
well-defined end signal you can complete
 

00:33:43.650 --> 00:33:45.169
well-defined end signal you can complete
this to let the observe function clean

00:33:45.169 --> 00:33:45.179
this to let the observe function clean
 

00:33:45.179 --> 00:33:46.460
this to let the observe function clean
up and return and we'll see that in a

00:33:46.460 --> 00:33:46.470
up and return and we'll see that in a
 

00:33:46.470 --> 00:33:49.700
up and return and we'll see that in a
little bit so the next piece here where

00:33:49.700 --> 00:33:49.710
little bit so the next piece here where
 

00:33:49.710 --> 00:33:51.110
little bit so the next piece here where
we're creating the location callback

00:33:51.110 --> 00:33:51.120
we're creating the location callback
 

00:33:51.120 --> 00:33:52.610
we're creating the location callback
this should really be no surprise we

00:33:52.610 --> 00:33:52.620
this should really be no surprise we
 

00:33:52.620 --> 00:33:53.960
this should really be no surprise we
need one to receive updates from the

00:33:53.960 --> 00:33:53.970
need one to receive updates from the
 

00:33:53.970 --> 00:33:55.669
need one to receive updates from the
location provider but what's interesting

00:33:55.669 --> 00:33:55.679
location provider but what's interesting
 

00:33:55.679 --> 00:33:57.590
location provider but what's interesting
here is that we use launch to call the

00:33:57.590 --> 00:33:57.600
here is that we use launch to call the
 

00:33:57.600 --> 00:33:59.360
here is that we use launch to call the
observer function on the same coating

00:33:59.360 --> 00:33:59.370
observer function on the same coating
 

00:33:59.370 --> 00:34:00.890
observer function on the same coating
dispatcher that observed location was

00:34:00.890 --> 00:34:00.900
dispatcher that observed location was
 

00:34:00.900 --> 00:34:03.740
dispatcher that observed location was
called on remember the co-routine scope

00:34:03.740 --> 00:34:03.750
called on remember the co-routine scope
 

00:34:03.750 --> 00:34:05.930
called on remember the co-routine scope
that we opened here carries along the

00:34:05.930 --> 00:34:05.940
that we opened here carries along the
 

00:34:05.940 --> 00:34:07.610
that we opened here carries along the
dispatcher with it that it was called

00:34:07.610 --> 00:34:07.620
dispatcher with it that it was called
 

00:34:07.620 --> 00:34:09.409
dispatcher with it that it was called
with so we always know that we're gonna

00:34:09.409 --> 00:34:09.419
with so we always know that we're gonna
 

00:34:09.419 --> 00:34:10.909
with so we always know that we're gonna
call the observer in the same place that

00:34:10.909 --> 00:34:10.919
call the observer in the same place that
 

00:34:10.919 --> 00:34:11.990
call the observer in the same place that
the call are one of the information

00:34:11.990 --> 00:34:12.000
the call are one of the information
 

00:34:12.000 --> 00:34:15.560
the call are one of the information
reported so we cancel the old job from

00:34:15.560 --> 00:34:15.570
reported so we cancel the old job from
 

00:34:15.570 --> 00:34:17.089
reported so we cancel the old job from
before and start a new one we make sure

00:34:17.089 --> 00:34:17.099
before and start a new one we make sure
 

00:34:17.099 --> 00:34:18.379
before and start a new one we make sure
that we call the observer while we're

00:34:18.379 --> 00:34:18.389
that we call the observer while we're
 

00:34:18.389 --> 00:34:20.030
that we call the observer while we're
holding this suspending mutex and this

00:34:20.030 --> 00:34:20.040
holding this suspending mutex and this
 

00:34:20.040 --> 00:34:21.560
holding this suspending mutex and this
keeps things serialized to make sure

00:34:21.560 --> 00:34:21.570
keeps things serialized to make sure
 

00:34:21.570 --> 00:34:22.700
keeps things serialized to make sure
that we don't have two calls to an

00:34:22.700 --> 00:34:22.710
that we don't have two calls to an
 

00:34:22.710 --> 00:34:25.220
that we don't have two calls to an
observer active at once we assume that

00:34:25.220 --> 00:34:25.230
observer active at once we assume that
 

00:34:25.230 --> 00:34:26.899
observer active at once we assume that
on location result won't have multiple

00:34:26.899 --> 00:34:26.909
on location result won't have multiple
 

00:34:26.909 --> 00:34:28.790
on location result won't have multiple
calls active at once either so this is

00:34:28.790 --> 00:34:28.800
calls active at once either so this is
 

00:34:28.800 --> 00:34:30.050
calls active at once either so this is
kind of an example of some of the things

00:34:30.050 --> 00:34:30.060
kind of an example of some of the things
 

00:34:30.060 --> 00:34:31.730
kind of an example of some of the things
that if you're building one of these

00:34:31.730 --> 00:34:31.740
that if you're building one of these
 

00:34:31.740 --> 00:34:33.710
that if you're building one of these
things yourself this is one of those

00:34:33.710 --> 00:34:33.720
things yourself this is one of those
 

00:34:33.720 --> 00:34:35.629
things yourself this is one of those
comparison things of like our X Java

00:34:35.629 --> 00:34:35.639
comparison things of like our X Java
 

00:34:35.639 --> 00:34:37.430
comparison things of like our X Java
kind of does a lot of these things for

00:34:37.430 --> 00:34:37.440
kind of does a lot of these things for
 

00:34:37.440 --> 00:34:40.159
kind of does a lot of these things for
you but with come routines we have all

00:34:40.159 --> 00:34:40.169
you but with come routines we have all
 

00:34:40.169 --> 00:34:41.389
you but with come routines we have all
the primitives to build it we just need

00:34:41.389 --> 00:34:41.399
the primitives to build it we just need
 

00:34:41.399 --> 00:34:42.800
the primitives to build it we just need
to do a little bit more of it by hand if

00:34:42.800 --> 00:34:42.810
to do a little bit more of it by hand if
 

00:34:42.810 --> 00:34:43.639
to do a little bit more of it by hand if
we're putting one of these things

00:34:43.639 --> 00:34:43.649
we're putting one of these things
 

00:34:43.649 --> 00:34:47.899
we're putting one of these things
together so we register our callback and

00:34:47.899 --> 00:34:47.909
together so we register our callback and
 

00:34:47.909 --> 00:34:49.609
together so we register our callback and
then we await on our done signal and

00:34:49.609 --> 00:34:49.619
then we await on our done signal and
 

00:34:49.619 --> 00:34:51.619
then we await on our done signal and
since we never complete it I mean when

00:34:51.619 --> 00:34:51.629
since we never complete it I mean when
 

00:34:51.629 --> 00:34:53.210
since we never complete it I mean when
does the location stream really complete

00:34:53.210 --> 00:34:53.220
does the location stream really complete
 

00:34:53.220 --> 00:34:55.250
does the location stream really complete
anyway this will go ahead and wait for

00:34:55.250 --> 00:34:55.260
anyway this will go ahead and wait for
 

00:34:55.260 --> 00:34:56.990
anyway this will go ahead and wait for
the calling job to be cancelled so we

00:34:56.990 --> 00:34:57.000
the calling job to be cancelled so we
 

00:34:57.000 --> 00:34:58.460
the calling job to be cancelled so we
remove the callback in the finally block

00:34:58.460 --> 00:34:58.470
remove the callback in the finally block
 

00:34:58.470 --> 00:35:01.099
remove the callback in the finally block
so it'll happen on cancellation and then

00:35:01.099 --> 00:35:01.109
so it'll happen on cancellation and then
 

00:35:01.109 --> 00:35:03.829
so it'll happen on cancellation and then
request location updates normally takes

00:35:03.829 --> 00:35:03.839
request location updates normally takes
 

00:35:03.839 --> 00:35:05.150
request location updates normally takes
a looper instead of something like an

00:35:05.150 --> 00:35:05.160
a looper instead of something like an
 

00:35:05.160 --> 00:35:07.310
a looper instead of something like an
executor it's just kind of unfortunate

00:35:07.310 --> 00:35:07.320
executor it's just kind of unfortunate
 

00:35:07.320 --> 00:35:08.480
executor it's just kind of unfortunate
because this pattern really shines when

00:35:08.480 --> 00:35:08.490
because this pattern really shines when
 

00:35:08.490 --> 00:35:10.700
because this pattern really shines when
you can avoid an extra hop so if you use

00:35:10.700 --> 00:35:10.710
you can avoid an extra hop so if you use
 

00:35:10.710 --> 00:35:12.260
you can avoid an extra hop so if you use
like a direct executor that'll just go

00:35:12.260 --> 00:35:12.270
like a direct executor that'll just go
 

00:35:12.270 --> 00:35:14.750
like a direct executor that'll just go
ahead and run the observer wherever the

00:35:14.750 --> 00:35:14.760
ahead and run the observer wherever the
 

00:35:14.760 --> 00:35:16.370
ahead and run the observer wherever the
update happens on the incoming binder

00:35:16.370 --> 00:35:16.380
update happens on the incoming binder
 

00:35:16.380 --> 00:35:19.250
update happens on the incoming binder
thread or whatever it is it really kind

00:35:19.250 --> 00:35:19.260
thread or whatever it is it really kind
 

00:35:19.260 --> 00:35:20.810
thread or whatever it is it really kind
of shines when you can avoid those extra

00:35:20.810 --> 00:35:20.820
of shines when you can avoid those extra
 

00:35:20.820 --> 00:35:25.099
of shines when you can avoid those extra
hops but you get the idea so here's what

00:35:25.099 --> 00:35:25.109
hops but you get the idea so here's what
 

00:35:25.109 --> 00:35:27.589
hops but you get the idea so here's what
it looks like in use and if you take a

00:35:27.589 --> 00:35:27.599
it looks like in use and if you take a
 

00:35:27.599 --> 00:35:28.940
it looks like in use and if you take a
look this looks an awful lot like just a

00:35:28.940 --> 00:35:28.950
look this looks an awful lot like just a
 

00:35:28.950 --> 00:35:30.980
look this looks an awful lot like just a
for each call on a collection and it

00:35:30.980 --> 00:35:30.990
for each call on a collection and it
 

00:35:30.990 --> 00:35:33.560
for each call on a collection and it
behaves exactly the same way so since we

00:35:33.560 --> 00:35:33.570
behaves exactly the same way so since we
 

00:35:33.570 --> 00:35:34.130
behaves exactly the same way so since we
use long

00:35:34.130 --> 00:35:34.140
use long
 

00:35:34.140 --> 00:35:35.480
use long
to call the observer block in the first

00:35:35.480 --> 00:35:35.490
to call the observer block in the first
 

00:35:35.490 --> 00:35:37.220
to call the observer block in the first
place if the inner block throws an

00:35:37.220 --> 00:35:37.230
place if the inner block throws an
 

00:35:37.230 --> 00:35:39.080
place if the inner block throws an
exception that means that the observed

00:35:39.080 --> 00:35:39.090
exception that means that the observed
 

00:35:39.090 --> 00:35:40.970
exception that means that the observed
location call itself will throw an

00:35:40.970 --> 00:35:40.980
location call itself will throw an
 

00:35:40.980 --> 00:35:42.770
location call itself will throw an
exception into that outer scope we can

00:35:42.770 --> 00:35:42.780
exception into that outer scope we can
 

00:35:42.780 --> 00:35:44.000
exception into that outer scope we can
just wrap this whole thing in a

00:35:44.000 --> 00:35:44.010
just wrap this whole thing in a
 

00:35:44.010 --> 00:35:45.410
just wrap this whole thing in a
try-catch and that's all of our error

00:35:45.410 --> 00:35:45.420
try-catch and that's all of our error
 

00:35:45.420 --> 00:35:47.960
try-catch and that's all of our error
handling that we need to do so it's a

00:35:47.960 --> 00:35:47.970
handling that we need to do so it's a
 

00:35:47.970 --> 00:35:49.910
handling that we need to do so it's a
child job so it'll cancel the parent

00:35:49.910 --> 00:35:49.920
child job so it'll cancel the parent
 

00:35:49.920 --> 00:35:51.770
child job so it'll cancel the parent
scope with the exception as well the

00:35:51.770 --> 00:35:51.780
scope with the exception as well the
 

00:35:51.780 --> 00:35:53.180
scope with the exception as well the
same scope that wraps the whole the

00:35:53.180 --> 00:35:53.190
same scope that wraps the whole the
 

00:35:53.190 --> 00:35:54.710
same scope that wraps the whole the
observed location function body

00:35:54.710 --> 00:35:54.720
observed location function body
 

00:35:54.720 --> 00:35:56.180
observed location function body
so it'll resume from the weight with the

00:35:56.180 --> 00:35:56.190
so it'll resume from the weight with the
 

00:35:56.190 --> 00:35:58.310
so it'll resume from the weight with the
cancellation exception unregistered the

00:35:58.310 --> 00:35:58.320
cancellation exception unregistered the
 

00:35:58.320 --> 00:35:59.720
cancellation exception unregistered the
location call back from the finally

00:35:59.720 --> 00:35:59.730
location call back from the finally
 

00:35:59.730 --> 00:36:01.070
location call back from the finally
block from above and all of this just

00:36:01.070 --> 00:36:01.080
block from above and all of this just
 

00:36:01.080 --> 00:36:04.280
block from above and all of this just
composes so you again can lean on all of

00:36:04.280 --> 00:36:04.290
composes so you again can lean on all of
 

00:36:04.290 --> 00:36:05.900
composes so you again can lean on all of
these constructs of the language that

00:36:05.900 --> 00:36:05.910
these constructs of the language that
 

00:36:05.910 --> 00:36:07.850
these constructs of the language that
you already know by just adding some of

00:36:07.850 --> 00:36:07.860
you already know by just adding some of
 

00:36:07.860 --> 00:36:13.340
you already know by just adding some of
these suspending primitives so let's

00:36:13.340 --> 00:36:13.350
these suspending primitives so let's
 

00:36:13.350 --> 00:36:15.080
these suspending primitives so let's
wrap up a little bit so what's next what

00:36:15.080 --> 00:36:15.090
wrap up a little bit so what's next what
 

00:36:15.090 --> 00:36:17.360
wrap up a little bit so what's next what
some action items for you to do well the

00:36:17.360 --> 00:36:17.370
some action items for you to do well the
 

00:36:17.370 --> 00:36:18.890
some action items for you to do well the
first is that as you saw in the keynote

00:36:18.890 --> 00:36:18.900
first is that as you saw in the keynote
 

00:36:18.900 --> 00:36:20.510
first is that as you saw in the keynote
earlier we actually have a code lab

00:36:20.510 --> 00:36:20.520
earlier we actually have a code lab
 

00:36:20.520 --> 00:36:22.460
earlier we actually have a code lab
specifically for co-routines and that

00:36:22.460 --> 00:36:22.470
specifically for co-routines and that
 

00:36:22.470 --> 00:36:24.470
specifically for co-routines and that
was released about three weeks ago which

00:36:24.470 --> 00:36:24.480
was released about three weeks ago which
 

00:36:24.480 --> 00:36:25.640
was released about three weeks ago which
is really good introduction it's

00:36:25.640 --> 00:36:25.650
is really good introduction it's
 

00:36:25.650 --> 00:36:26.780
is really good introduction it's
carotene and how to actually use it in

00:36:26.780 --> 00:36:26.790
carotene and how to actually use it in
 

00:36:26.790 --> 00:36:30.230
carotene and how to actually use it in
your app and secondly read the manual I

00:36:30.230 --> 00:36:30.240
your app and secondly read the manual I
 

00:36:30.240 --> 00:36:31.640
your app and secondly read the manual I
don't like to use do that usually but

00:36:31.640 --> 00:36:31.650
don't like to use do that usually but
 

00:36:31.650 --> 00:36:33.160
don't like to use do that usually but
the docs are actually really really good

00:36:33.160 --> 00:36:33.170
the docs are actually really really good
 

00:36:33.170 --> 00:36:35.240
the docs are actually really really good
the wrong kicker but you can look at

00:36:35.240 --> 00:36:35.250
the wrong kicker but you can look at
 

00:36:35.250 --> 00:36:36.440
the wrong kicker but you can look at
them you can even edit them if you want

00:36:36.440 --> 00:36:36.450
them you can even edit them if you want
 

00:36:36.450 --> 00:36:38.330
them you can even edit them if you want
to but they're all very use case based

00:36:38.330 --> 00:36:38.340
to but they're all very use case based
 

00:36:38.340 --> 00:36:39.980
to but they're all very use case based
they're all I need to do X how do I do

00:36:39.980 --> 00:36:39.990
they're all I need to do X how do I do
 

00:36:39.990 --> 00:36:41.900
they're all I need to do X how do I do
it so make sure to go and check it out

00:36:41.900 --> 00:36:41.910
it so make sure to go and check it out
 

00:36:41.910 --> 00:36:44.870
it so make sure to go and check it out
if you are using carotenes and that is

00:36:44.870 --> 00:36:44.880
if you are using carotenes and that is
 

00:36:44.880 --> 00:36:47.390
if you are using carotenes and that is
it thank you very much

00:36:47.390 --> 00:36:47.400
it thank you very much
 

00:36:47.400 --> 00:37:03.480
it thank you very much
[Music]

