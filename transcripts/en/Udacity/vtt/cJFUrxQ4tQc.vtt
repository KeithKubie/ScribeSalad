WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:02.840
Before we start creating our content provider,

00:00:02.840 --> 00:00:04.440
it's time to go back to our weather

00:00:04.440 --> 00:00:07.470
contract. We're going to use the weather contract,

00:00:07.470 --> 00:00:11.980
for both database definitions and content provider definitions.

00:00:11.980 --> 00:00:17.310
These are the URIs that our contract will expose for a data and view. Some of

00:00:17.310 --> 00:00:20.279
them return a list or directory of items.

00:00:22.050 --> 00:00:23.740
And some of them return as single item.

00:00:25.380 --> 00:00:29.620
The first part of the URI is the content authority which is how the system

00:00:29.620 --> 00:00:33.590
disambiguate URIs from different application, similar to the

00:00:33.590 --> 00:00:36.060
relationship between a domain name and its website.

00:00:37.100 --> 00:00:39.120
A convenient string to use for the content

00:00:39.120 --> 00:00:41.250
authority is the package name of the app.

00:00:42.820 --> 00:00:46.190
Let's return to our weather contract. We'll add

00:00:46.190 --> 00:00:50.390
the CONTENT_AUTHORITY and the BASE_CONTENT_URI for our content

00:00:50.390 --> 00:00:52.010
provider to the beginning of our weather

00:00:52.010 --> 00:00:55.060
contract. Next, we'll add strings to the base

00:00:55.060 --> 00:00:58.470
path of our URIs. Each URI essentially points

00:00:58.470 --> 00:01:00.660
to a different table. For each of our

00:01:00.660 --> 00:01:06.310
tables, location entry, and weather entry, we

00:01:06.310 --> 00:01:11.340
create a content URI that represents the base location for each table. Now,

00:01:11.340 --> 00:01:16.140
we'll add some magical value to the location and weather entry contracts.

00:01:16.140 --> 00:01:20.020
These contain special MIME type prefixes that indicate that

00:01:20.020 --> 00:01:23.740
the URI either returns a directory, list of items,

00:01:23.740 --> 00:01:26.070
or a single item. Now, we're going to add some

00:01:26.070 --> 00:01:29.360
URI builders and decoder functions in weather entry. It's

00:01:29.360 --> 00:01:32.270
convenient to have this as it makes fewer places

00:01:32.270 --> 00:01:36.270
in your code aware of the actual URI encoding,

00:01:36.270 --> 00:01:39.252
keeping this knowledge in the contract. If you're just

00:01:39.252 --> 00:01:41.500
going to have a URI with a standard integer

00:01:41.500 --> 00:01:44.660
primary key, which is a typical way of distinguishing between

00:01:44.660 --> 00:01:47.040
a query for item or the query for a list

00:01:47.040 --> 00:01:50.240
of items, one can use the content URIs with appended

00:01:50.240 --> 00:01:53.150
id function. Strings, such as a location setting, can be

00:01:53.150 --> 00:01:56.900
appended with the append path function. We can also these

00:01:56.900 --> 00:02:01.040
functions to add potentially useful query parameters. In this case,

00:02:01.040 --> 00:02:03.730
we use a query parameter for the start date. Query

00:02:03.730 --> 00:02:06.770
parameters are useful for when we have a fixed database

00:02:06.770 --> 00:02:09.389
query that we want to have some limited parameterization

00:02:09.389 --> 00:02:11.970
for. In this case, it will be a parameter for

00:02:11.970 --> 00:02:15.150
our join between the two tables. Finally, we have

00:02:15.150 --> 00:02:18.270
this function that builds a two part URI that contains

00:02:18.270 --> 00:02:22.060
both location and date segments. Below this, we have

00:02:22.060 --> 00:02:26.080
helper functions that help decode the URI structure. This hides

00:02:26.080 --> 00:02:28.630
the URI structure form our code as well and

00:02:28.630 --> 00:02:31.690
places all the knowledge in one place within the contract.

