WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:01.730
Okay. Let's turn our attention now to working with

00:00:01.730 --> 00:00:04.300
Excel documents. What I'd like to use is an example

00:00:04.300 --> 00:00:07.590
here, [SOUND] is data from the Electric Reliability Council of

00:00:07.590 --> 00:00:10.770
Texas. This is an organization that manages the flow of

00:00:10.770 --> 00:00:15.290
electricity to millions of Texas customers. They also provide

00:00:15.290 --> 00:00:19.250
a lot of publicly available datasets. On things like load,

00:00:19.250 --> 00:00:22.640
or the amount of electricity that's used by their customers.

00:00:22.640 --> 00:00:25.240
This is one such example for the calendar year 2013.

00:00:25.240 --> 00:00:28.690
A lot of organizations publish this type of

00:00:28.690 --> 00:00:31.190
data. And often they will publish it as Excel

00:00:31.190 --> 00:00:34.150
documents. What that means for us is that we

00:00:34.150 --> 00:00:36.510
have to have a way of programmatically working with

00:00:36.510 --> 00:00:40.610
Excel because many times, we'll want to process dozens

00:00:40.610 --> 00:00:42.970
or perhaps hundreds of files all of which have

00:00:42.970 --> 00:00:45.690
been published as Excel. What I'd like to introduce

00:00:45.690 --> 00:00:50.490
you to here is a python module called XLRD.

00:00:50.490 --> 00:00:55.910
XLRD allows us to work with Excel files whether it's the old XLS format or the

00:00:55.910 --> 00:01:04.000
new XLSX format. This module will allow us to read-in all of the data from

00:01:04.000 --> 00:01:08.410
an excel workbook and, work with it in any way that we need to in a

00:01:08.410 --> 00:01:13.510
Python program. There's also an XLWT module, which

00:01:13.510 --> 00:01:15.520
allows us to create Excel files, if we

00:01:15.520 --> 00:01:18.600
need to do that programatically. Okay so the first thing

00:01:18.600 --> 00:01:19.940
that I want to do before we dive in and

00:01:19.940 --> 00:01:22.790
take a look at this example code is actually go

00:01:22.790 --> 00:01:28.330
through and run it. Okay. What I've done with this program

00:01:28.330 --> 00:01:30.700
is produce output that illustrates a lot of the features

00:01:30.700 --> 00:01:33.950
that you might want to work with when using XRLD one

00:01:33.950 --> 00:01:37.640
processing excel data. So, one of the things I would

00:01:37.640 --> 00:01:40.580
like to illustrate here, is how we can read our data

00:01:40.580 --> 00:01:44.160
from an Excel file entirely into python list and work

00:01:44.160 --> 00:01:47.880
with it. How we go about working with rows and

00:01:47.880 --> 00:01:51.380
columns and individual cells in an Excel file using the

00:01:51.380 --> 00:01:55.250
XLRD module. And then finally, a little bit of information about

00:01:55.250 --> 00:01:57.830
dates. This is primarily because of the way that dates

00:01:57.830 --> 00:02:00.240
are represented in XML that we need to talk about this.

00:02:00.240 --> 00:02:02.910
So let's go back and look at this code. Here

00:02:02.910 --> 00:02:05.860
we're simply specifying which file it is that we're going to load.

00:02:05.860 --> 00:02:07.860
And in this case, it's an XLS file, an old

00:02:07.860 --> 00:02:11.590
format Microsoft Excel file. Okay? And then, the bulk of the

00:02:11.590 --> 00:02:14.120
work that we're doing here is actually done in the Parse

00:02:14.120 --> 00:02:17.840
File function. Alright so this is the command we use to

00:02:17.840 --> 00:02:19.620
open a workbook and you note that we're using the same

00:02:19.620 --> 00:02:23.090
variable name her okay? Then we need to specify each sheet

00:02:23.090 --> 00:02:26.430
we'd like to work with. So here we're selecting the sheet

00:02:26.430 --> 00:02:31.150
zero and you'll find that XLRD is entirely zero based indexing.

00:02:31.150 --> 00:02:33.080
So the very first column is actually column

00:02:33.080 --> 00:02:36.330
zero, the first row is actually row zero. Okay,

00:02:36.330 --> 00:02:38.610
here's an example of doing a list comprehension,

00:02:38.610 --> 00:02:41.260
and in this case, what we're doing is essentially

00:02:41.260 --> 00:02:46.220
looping through all of the rows and columns and reading all of

00:02:46.220 --> 00:02:51.460
that data into a Python list. What I'm doing here, then,

00:02:51.460 --> 00:02:56.750
is simply printing out the value of Row Three and Column Two

00:02:56.750 --> 00:02:59.720
for this list that we've just generated. Now if I

00:02:59.720 --> 00:03:02.520
scroll down a little bit, we can see that following the

00:03:02.520 --> 00:03:06.210
list comprehension piece, what we're doing here is looping through the

00:03:06.210 --> 00:03:09.080
entire sheet one row at a time, and then moving across

00:03:09.080 --> 00:03:11.500
the columns. And the way that I've set this up,

00:03:11.500 --> 00:03:14.380
is that once we get to row 50, what we're going

00:03:14.380 --> 00:03:17.200
to do is essentially is print out the values in that

00:03:17.200 --> 00:03:21.820
particular row. One column at a time. Now again, this is

00:03:21.820 --> 00:03:24.230
a piece of code that does nothing more than

00:03:24.230 --> 00:03:28.120
simply illustrate the functions and methods that you'll want

00:03:28.120 --> 00:03:31.560
to work with when using XLRD. In the next

00:03:31.560 --> 00:03:34.580
piece of our example code, I'm illustrating how to work

00:03:34.580 --> 00:03:38.100
with rows and columns in XLRD. Alright, in this

00:03:38.100 --> 00:03:40.510
case what we're going to do here is we're

00:03:40.510 --> 00:03:43.100
going to simply grab the number of rows for

00:03:43.100 --> 00:03:47.000
this particular sheet. And then we'll print that out, alright.

00:03:47.000 --> 00:03:49.840
This is an illustration of how to check the

00:03:49.840 --> 00:03:53.520
data type, or the value type, for a particular cell.

00:03:53.520 --> 00:03:56.440
Using the cell type method, for sheet, for objects

00:03:56.440 --> 00:04:00.570
of type sheet, okay? Then cell value. This actually gets

00:04:00.570 --> 00:04:02.820
the value that's stored in that cell as the

00:04:02.820 --> 00:04:05.570
appropriate Python value. Whether it's a floating point value or

00:04:05.570 --> 00:04:08.705
something else. And then finally this is actually [SOUND]

00:04:08.705 --> 00:04:12.790
a pretty cool method. Here, we can slice the values

00:04:12.790 --> 00:04:15.190
out of a particular column. What that means it that

00:04:15.190 --> 00:04:18.010
we could say, okay, I want three values from this particular

00:04:18.010 --> 00:04:21.519
column and I want to to start on row one, so

00:04:21.519 --> 00:04:24.620
actually the second row down. And I want to go through

00:04:24.620 --> 00:04:28.300
rows one, two, and three. Up to row four but

00:04:28.300 --> 00:04:30.960
not including row four. And I want to take those three

00:04:30.960 --> 00:04:35.530
values sliced out of that particular column. Okay. And then here

00:04:35.530 --> 00:04:37.680
we are doing something very similar to what we did here.

00:04:37.680 --> 00:04:39.880
Which is actually checking the type of the value in

00:04:39.880 --> 00:04:43.210
the given cell. But in this case we have a

00:04:43.210 --> 00:04:47.350
date in this cell Okay. So, we're going to pull out

00:04:47.350 --> 00:04:49.430
the cell value. Now, it turns out that, in the old

00:04:49.430 --> 00:04:54.510
Excel format, dates were represented simply as floating point numbers.

00:04:54.510 --> 00:04:57.240
So what we can do is use the XLRD date

00:04:57.240 --> 00:05:00.330
as tuple method to get us that time in a

00:05:00.330 --> 00:05:03.150
way that allows us to work with it as a date

00:05:03.150 --> 00:05:06.420
in Python. Okay, let's go look at that output one

00:05:06.420 --> 00:05:10.080
more time. Okay, so here's our list comprehension. We're simply

00:05:10.080 --> 00:05:14.050
printing out the value at row 3, column 2 from

00:05:14.050 --> 00:05:17.340
the list into which we read all of the excel data.

00:05:17.340 --> 00:05:19.390
So here we can see where I was looping through

00:05:19.390 --> 00:05:21.480
the rows and columns and printed out all of the values

00:05:21.480 --> 00:05:24.760
on row fifty Okay, and then number of rows in

00:05:24.760 --> 00:05:28.240
this sheet happens to be more than 7200. Alright? Now note

00:05:28.240 --> 00:05:31.580
here that the type of data in cell two,

00:05:31.580 --> 00:05:34.150
is specified as two. You can look up, if you

00:05:34.150 --> 00:05:37.380
want to, in the XLRD documentation Exactly what all of

00:05:37.380 --> 00:05:40.480
these different type identifiers reference. In this case it's a

00:05:40.480 --> 00:05:42.160
floating point number. We can see that the value that

00:05:42.160 --> 00:05:47.040
we've got there is 1,036 and change, okay? And here's

00:05:47.040 --> 00:05:49.890
the output from having taking a slice out of Column

00:05:49.890 --> 00:05:53.470
Three. Okay, so here's that piece where we were working

00:05:53.470 --> 00:05:57.090
with dates. Now XLRD does distinguish the fact that that

00:05:57.090 --> 00:06:01.220
particular cell holds a date. But here's the time, represented

00:06:01.220 --> 00:06:03.890
as a floating point number. Okay? What we can do

00:06:03.890 --> 00:06:08.220
is convert this to a Python datetime tuple Using that XLRD

00:06:08.220 --> 00:06:10.330
method that I showed you. And this gives us a

00:06:10.330 --> 00:06:13.200
much better representation of the data that we're interested in. So,

00:06:13.200 --> 00:06:15.580
in this case, what we've got is, row one, column

00:06:15.580 --> 00:06:18.560
zero. So it's that very first cell at the top, okay?

00:06:18.560 --> 00:06:21.890
This one here, right? And note that what we're pulling out there

00:06:21.890 --> 00:06:27.310
as the value is, in fact, year 2013, January 1st, 1 AM.

