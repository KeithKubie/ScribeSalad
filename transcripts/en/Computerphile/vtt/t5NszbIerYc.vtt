WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.339
&gt;&gt; Sean: Professor Brailsford! We are doing our series
on the most important things you can do in Computer 

00:00:05.339 --> 00:00:09.179
Science or something that, y'know, you couldn't 
do without. So, what have you got for us today?

00:00:09.179 --> 00:00:15.360
&gt;&gt; DFB: very well.  I think my most important
thing - and we're going to sort of share this

00:00:15.360 --> 00:00:20.910
discussion Steve Bagley and I - because I
think we are very much agreed that one of

00:00:20.910 --> 00:00:26.519
the most powerful concepts, constructs, in
computer science is just the idea of a pointer.

00:00:26.519 --> 00:00:35.940
One of the uses of pointers that's
easiest to understand is in linked lists.

00:00:35.940 --> 00:00:41.640
We're going to use Lego to illustrate
linked lists. I know that some of you are

00:00:41.640 --> 00:00:46.020
demon programmers and could take it if I
just ran through a program with you, but

00:00:46.020 --> 00:00:50.629
I think a lot of you, who are beginners,
perhaps might appreciate having a more

00:00:50.629 --> 00:00:57.360
pictorial introduction to linked lists.
So, at great mental expense, Sean and I have

00:00:57.360 --> 00:01:02.370
developed a LEGO model of the linked lists
we want to talk about and we'll

00:01:02.370 --> 00:01:06.119
gradually introduce the elements of this
as we go along. Bbut the first thing to

00:01:06.119 --> 00:01:12.060
say is that pointers are pieces of - I
don't know what they are in LEGO - 

00:01:12.060 --> 00:01:15.630
firemen's hoses, or connectors, or
whatever they're called. That is a

00:01:15.630 --> 00:01:21.180
pointer of some sort. In order to bring
this home and make it more concrete you've

00:01:21.180 --> 00:01:27.150
got to say: "Well, what are we linking
together?" And, once again, I mean this has

00:01:27.150 --> 00:01:32.790
been referred to in Brian Kernighan's
thing about Associative Arrays - he

00:01:32.790 --> 00:01:38.040
pointed off to singly linked lists and
each of the elements within these singly

00:01:38.040 --> 00:01:43.590
linked lists contained a string. What I'm
going to start with is, basically, a  piece

00:01:43.590 --> 00:01:50.159
of Lego underneath a small section of C
coding! I'm going to go through this very

00:01:50.159 --> 00:01:52.500
carefully and - those of you who aren't demon

00:01:52.500 --> 00:01:56.670
programmers - don't get panicked about it.
I'll try and go very slowly and explain to

00:01:56.670 --> 00:02:02.520
you what's happening. This is what I am
going to call a THING. Whenever you look

00:02:02.520 --> 00:02:07.129
later on and say: "What is that grey
baseplate doing - what does it signify?"

00:02:07.129 --> 00:02:12.450
`Grey base plate' means it's a THING. What
are the components of a THING?

00:02:12.450 --> 00:02:17.940
Well, a red box sitting on top of the THING 
holds a [pointer to] a string of characters, and

00:02:17.940 --> 00:02:21.510
again we're going to follow up with the
idea of things you might buy for a barbecue:

00:02:21.510 --> 00:02:28.620
burgers,chips wine - stuff like
that. But because it's a singly-linked

00:02:28.620 --> 00:02:33.989
list the other box sitting within the
structure is going to point off to the

00:02:33.989 --> 00:02:39.660
next THING along in this singly-linked
list. If that's a THING then, the only bit

00:02:39.660 --> 00:02:43.470
of programming I'm going to do today,
honest - this is it - is to just show you

00:02:43.470 --> 00:02:48.900
how this would be declared in the C
language. I'm using a `typedef'

00:02:48.900 --> 00:02:55.440
declaration because I just want to be
able to use the shorthand of THING. A bit

00:02:55.440 --> 00:02:59.940
like `int'. Instead of saying `int sean;'
[where] `sean' is an integer and can

00:02:59.940 --> 00:03:03.569
have contents. I just want to say: THING sean;
But in order to be able to 

00:03:03.569 --> 00:03:08.160
make that abbreviation, and to cut the
clutter a lot, I have to give what's

00:03:08.160 --> 00:03:12.630
called a `typedef'. This is a definition of what
a structure of type THING really is. And

00:03:12.630 --> 00:03:18.870
all it's saying, in here, if you look at it
is `char *item'. Now, what that is

00:03:18.870 --> 00:03:22.500
saying - this is again, those of you
familiar with C will know - it's a

00:03:22.500 --> 00:03:29.549
standard C way of saying: "It's a pointer
to a char apparently". But actually they

00:03:29.549 --> 00:03:33.239
cheat a bit because it's not just a
pointer to a single character, it can be

00:03:33.239 --> 00:03:37.590
a pointer to a great long string of characters 
&gt;&gt; Sean: Does `char' mean character?
&gt;&gt; DFB: `char'  is 

00:03:37.590 --> 00:03:41.970
short for character, yes. Some people call it 
`car'; some people call it `char' but it's

00:03:41.970 --> 00:03:46.109
basically ... if you point at the first
character in a string then you're pointing

00:03:46.109 --> 00:03:52.079
at the whole thing because you just step along
it sequentially. And here for the blue

00:03:52.079 --> 00:03:59.069
box in my model I've got to say: "Well how
do I point at the next THING along in my

00:03:59.069 --> 00:04:04.139
list?" Well, I hope you can see there's a
sort of bit of recursion in the

00:04:04.139 --> 00:04:07.980
definition here. But the compiler knows
you can do things like this and doesn't

00:04:07.980 --> 00:04:12.450
panic. You've got a `struct _thing'
inside here, referring back to this

00:04:12.450 --> 00:04:17.970
`struct _thing'. What it's saying
is that this THING I'm calling `next'

00:04:17.970 --> 00:04:23.870
within the structure, is a pointer to the 
next THING.

00:04:23.870 --> 00:04:30.080
So what are these things known as then
- this  `item' and `next'? They're called

00:04:30.080 --> 00:04:37.130
`members' in C;  `next' is also a member. 
In other languages you'll find these

00:04:37.130 --> 00:04:40.700
"internal identifiers" - if you like -within a
structure, are called different things. I mean

00:04:40.700 --> 00:04:47.180
in Algol68, where I started, they were
called `fields' of the structure. Those are

00:04:47.180 --> 00:04:51.590
just so that you can pick out the
components of your structure and

00:04:51.590 --> 00:04:56.810
remember, the overall package of a
pointer to the next one; a red box which

00:04:56.810 --> 00:05:01.760
means "I can contain a string of
arbitrary size", mount the whole thing up

00:05:01.760 --> 00:05:06.860
on a piece of grey LEGO and the whole
thing is a THING. We've got the basic

00:05:06.860 --> 00:05:12.160
building block then of what we need to
start building together, linked lists. Now

00:05:12.160 --> 00:05:17.120
some of you are going to say: "Hey, come on,
you're glossing over actuality".  Because

00:05:17.120 --> 00:05:23.030
obviously this `next' member field is
going to have a pointer in it to the

00:05:23.030 --> 00:05:28.760
next one of these THINGs but you haven't
said that inside the [item] string box you

00:05:28.760 --> 00:05:34.220
can't just put a string inside an
address box - it might not be big enough

00:05:34.220 --> 00:05:38.540
to hold "supercalifragilisticexpialidocious". 
Yeah!

00:05:38.540 --> 00:05:40.700
Quite right! Those of you `in the know' 
will know that,

00:05:40.700 --> 00:05:47.360
within this box that contains a string
you will have -  well it says so here - you

00:05:47.360 --> 00:05:52.010
must create yourself enough space to
hold the string and point at it. We draw

00:05:52.010 --> 00:05:55.430
a veil over that for the moment. Just
imagine that it doesn't matter what the

00:05:55.430 --> 00:06:01.220
string is -- "burgers", "zucchini", whatever - 
we can create enough space in the red box

00:06:01.220 --> 00:06:05.330
to hold that string - make it identifiable.
I'm going to put out the code for this

00:06:05.330 --> 00:06:10.220
program, and any subsequent ones, in the
usual way - available to you in C. I'll

00:06:10.220 --> 00:06:15.530
try and get my indentation so it doesn't
make those are you care passionately about

00:06:15.530 --> 00:06:19.760
these things .... Mind you, there'll
be Iindentation Wars. Some people will

00:06:19.760 --> 00:06:23.120
love the way I've done it; other people
will hate it. But we'll live with that.

00:06:23.120 --> 00:06:28.490
But yes, the idea of this, going through
this model, purely with LEGO is that if

00:06:28.490 --> 00:06:33.230
you then get hold of the program, look
back at the video, try and follow all the

00:06:33.230 --> 00:06:35.050
things I'm doing and say: "Well how does the

00:06:35.050 --> 00:06:40.810
program do that?"  And see if you can
understand, as we go along. I wish in many

00:06:40.810 --> 00:06:46.360
ways I'd thought about trying to do
this when I was teaching link-lists to

00:06:46.360 --> 00:06:49.090
third-year undergrads. I think it might have
helped some of them who were very

00:06:49.090 --> 00:06:51.729
pictorial in the way they wanted to look 
at things.

00:06:51.729 --> 00:06:56.349
Once we've declared at the top of our C
program that this whole thing is called

00:06:56.349 --> 00:07:02.440
a THING, I can then say, later on in the
program if I wanted to: `THING sean;' just

00:07:02.440 --> 00:07:06.639
like saying `int sean;'  But this is a
THING.  OK we haven't filled in your

00:07:06.639 --> 00:07:12.699
likes and dislikes Sean. What's your
favorite stuff at barbecue?
&gt;&gt; Sean:  sausages.

00:07:12.699 --> 00:07:17.139
&gt;&gt; DFB: Sausages!  So that, of course, is the
barbecue item that Sean likes best. Now

00:07:17.139 --> 00:07:22.000
if I've named my THING which I have, and
given this an identifier name, I can say

00:07:22.000 --> 00:07:30.370
things like: `sean.item = "sausages";'
And that works fine because if

00:07:30.370 --> 00:07:36.490
you give an explicit string of
characters in C it will, at compile time,

00:07:36.490 --> 00:07:41.620
find the space to hold that for you. So
that should work OK. And there's also

00:07:41.620 --> 00:07:46.810
no prizes for guessing that, perhaps for
cleanliness, I ought to fill in what the

00:07:46.810 --> 00:07:53.469
`next' field of `sean' is. And there is a
standard way of saying [that] it's the zero

00:07:53.469 --> 00:07:59.560
pointer. It points nowhere!. It's called
NIL [or] it's called NULL. It's not been filled in

00:07:59.560 --> 00:08:02.949
yet but you've got to fill it in with
something, so you fill it in with NULL.

00:08:02.949 --> 00:08:09.969
A stage beyond that is to say `THING *p;'
Now if you're happy that `char *item''

00:08:09.969 --> 00:08:14.889
within the structure, means "pointer to a
string of characters" then it follows

00:08:14.889 --> 00:08:25.080
that the type of p is `pointer to THING'.
So I haven't filled anything in here yet

00:08:25.080 --> 00:08:32.039
This contains nothing, this box, but I
could overwrite it with a pointer to

00:08:32.039 --> 00:08:38.140
`sean' if I wanted to do that.
OK, so we will be developing, quite a

00:08:38.140 --> 00:08:44.589
lot, the idea that we don't necessarily
deal always directly with THINGs. We

00:08:44.589 --> 00:08:50.110
stand back one level and we
use pointers to THINGs. It makes good

00:08:50.110 --> 00:08:55.569
sense, because within the list of
structures we're developing, as you know,

00:08:55.569 --> 00:09:02.050
the `next' field is of type `pointer to a THING'.
I guess at this stage, perhaps, to

00:09:02.050 --> 00:09:06.069
make this a bit more concrete, we could
turn our attention now over to the LEGO

00:09:06.069 --> 00:09:12.220
and in that infuriating way that they do
on home-help or do-it-yourself programs on

00:09:12.220 --> 00:09:16.660
TV, I'm going to say "Here's one I
prepared already :-) " The idea in this

00:09:16.660 --> 00:09:21.879
particular linked-list of barbecue items
is that there are strings inside each of

00:09:21.879 --> 00:09:26.649
these red boxes, as we've discussed, and
these strings of characters correspond

00:09:26.649 --> 00:09:31.029
to things you might want on the barbecue.
But we are so neat and tidy we want to

00:09:31.029 --> 00:09:35.439
keep these in alphabetical order, so look
at this: the string content in that red

00:09:35.439 --> 00:09:42.550
box says "beer" "chips" "pizza" "slaw" "wine". So
don't forget these are the contents of

00:09:42.550 --> 00:09:48.309
the boxes. The member name of each box is
always the same. It's always the `item' part of

00:09:48.309 --> 00:09:52.930
the particular thing you're on at the
moment. And the pointer here is the `next'

00:09:52.930 --> 00:09:57.279
part of that block. But it's all
beautifully set up, look, every one of

00:09:57.279 --> 00:10:01.839
your `next' boxes really does point to the
start address of the next THING. All the

00:10:01.839 --> 00:10:07.329
way down they're all in alphabetical
order. But the one aspect we didn't

00:10:07.329 --> 00:10:13.839
mention, which is vital, is that you must
set up a pointer to the head of the

00:10:13.839 --> 00:10:17.980
linked list. If you don't have that you
can't reference anything. What we're

00:10:17.980 --> 00:10:22.269
saying here is, it's not part of linked
list processing in general to give each

00:10:22.269 --> 00:10:27.610
of these THING structures its own [identifier] name.
I mean I could call them Sean,

00:10:27.610 --> 00:10:34.420
Dave, Steve, Mike and Robert, or something
like that. But no, life's too short, I'd run

00:10:34.420 --> 00:10:41.170
out of names. No, keep them all in order
but just retain one pointer that tells

00:10:41.170 --> 00:10:46.990
you what is the lead item in there.
So, this start pointer. Look at the colour

00:10:46.990 --> 00:10:53.259
coding. It's blue. So it's a `THING *', or
as we used to say in Algol68, it's a `reference

00:10:53.259 --> 00:10:58.509
to a THING. You jump onto the pointer at
the start address of the THING. 

00:10:58.509 --> 00:11:03.550
And inside that you can say give me the 
`item', give me the

00:11:03.550 --> 00:11:09.720
`next' and so on. But the big question now
is - it's all beautiful - but suppose

00:11:09.720 --> 00:11:15.070
actually I was told to get some burgers
but they didn't have them available at

00:11:15.070 --> 00:11:18.910
the first supermarket I went in.  So I had
to go somewhere else and get some

00:11:18.910 --> 00:11:24.390
burgers and unfortunately Brian or Sean
has made this list up already. So

00:11:24.390 --> 00:11:31.690
determinaedly keeping it alphabetic, if I
prepare over here a new THING with

00:11:31.690 --> 00:11:39.310
"burgers" ready to be put in, how do I
traverse down this list, find out where

00:11:39.310 --> 00:11:44.589
it belongs, alphabetically? And get it to
work so that I can fiddle with the

00:11:44.589 --> 00:11:49.810
pointers and link it in?  [A] quick check will
show you that "burgers" belongs after "beer"

00:11:49.810 --> 00:11:55.240
but before "chips". Therefore what you need
is a probe to look inside each of these

00:11:55.240 --> 00:12:01.480
structures and to tell you what is
inside there in terms ofn the `item' field.

00:12:01.480 --> 00:12:05.410
Now I can't use `start' as the probe.
If I move that away from the head of the

00:12:05.410 --> 00:12:10.060
list I'm sunk. I'll never find that
wretched list ever again. You mustn't use

00:12:10.060 --> 00:12:15.790
start as your roving pointer! But what I
can do - just like the thing called `p' I

00:12:15.790 --> 00:12:22.120
developed - let's call this `p' - for the 
[roving] pointer. If I first of all copy 
over the contents

00:12:22.120 --> 00:12:28.420
of `start' into `p', which is also of type
`reference to THING' then I hope you'll all

00:12:28.420 --> 00:12:33.820
agree that what will happen is I've now got
this THING * called `p' which is pointing at

00:12:33.820 --> 00:12:40.209
exactly the same structure, at the head
of the list, as `start' is. So hope I've

00:12:40.209 --> 00:12:44.800
got enough finger-power here to do it. There you
go! You start with `p', up here, and you say:

00:12:44.800 --> 00:12:51.130
"What's the `item' within that THING I'm
pointing at now? It says "beer". So, "burgers"

00:12:51.130 --> 00:12:56.860
goes after "beer" then move that from
there to there and use it as a probe to

00:12:56.860 --> 00:13:04.720
ask what is the `item' entry in that one? "chips" !
Aagh! it needs to be earlier than "chips" ! So, you can see

00:13:04.720 --> 00:13:09.790
here you've got a bit of a problem with
a singly-linked list; if you move the

00:13:09.790 --> 00:13:13.930
pointer too far you end up with "chips".
But you say:

00:13:13.930 --> 00:13:19.839
"Ah! but I want to insert it before "chips" 
but after "beer". I want to be back at this

00:13:19.839 --> 00:13:24.880
address". So what I'm saying is it's
perfectly possible to do it. You've got to

00:13:24.880 --> 00:13:28.630
be very careful. You've got to come in.
you've got to say :"That one's beer". 

00:13:28.630 --> 00:13:33.550
Then you've very carefully got to take a look at
this `next' field and say: "Should I follow

00:13:33.550 --> 00:13:39.550
that pointer and see what's in the `next'
blue box?" You can do that, it's fine, but be

00:13:39.550 --> 00:13:45.640
so careful that it doesn't contain NIL / NULL.
It could be a very short list. It

00:13:45.640 --> 00:13:47.380
could be that there's only one item in it.

00:13:47.380 --> 00:13:50.290
And right down at the bottom here - this
thing that looks like something from

00:13:50.290 --> 00:13:55.060
Angry Birds - denotes NULL. and if you 
start trying to follow the NULL pointer

00:13:55.060 --> 00:13:59.649
your program will go "bang" and will say:
Segmentation Violation. Well, that's fine,

00:13:59.649 --> 00:14:03.220
but it needs some careful programming.
But it can be done and I will give you a

00:14:03.220 --> 00:14:07.630
solution that does it,just that way. Next
thing you've got to sort of say to

00:14:07.630 --> 00:14:13.810
yourself though is: "When I've found where I
want to be how do I bind in the new

00:14:13.810 --> 00:14:19.720
THING?" Well, the actual construction process, 
if you like, of putting in the new THING,

00:14:19.720 --> 00:14:24.070
once you've discovered that "burgers"
needs to go in here somewhere,

00:14:24.070 --> 00:14:30.850
is to do this: you've got to - we'll use an
extra long pointer here which points to

00:14:30.850 --> 00:14:38.140
our newly created thing, and we are
then going to take the old pointer that

00:14:38.140 --> 00:14:45.640
was in there and put it as going from
here to here. So, look, we've done it! We go

00:14:45.640 --> 00:14:51.310
"beer" follow the pointer to a THING
that's got "burgers" - let's move that out

00:14:51.310 --> 00:14:55.540
of the way - follow the pointer to a THING
that's called "chips". So, we've inserted

00:14:55.540 --> 00:14:58.630
"burgers". So it's just pointer
manipulation once you've discovered

00:14:58.630 --> 00:15:03.760
where you are. What you need in this - and
it's really frustrating -

00:15:03.760 --> 00:15:07.060
you need to keep your finger in two
places - or you need two fingers - let's put

00:15:07.060 --> 00:15:10.899
it that way. You want to remember the one
you just looked at; you want to take a

00:15:10.899 --> 00:15:15.579
look at the next one and say: "Yes, it's in-
between those two. We've done it we've

00:15:15.579 --> 00:15:19.779
patched in our new THING for "burgers". So,
let me just sort of summarize some of

00:15:19.779 --> 00:15:24.880
the problems. Obsessively keep
checking for NULL- obsessively. If you

00:15:24.880 --> 00:15:28.699
dereference that- BANG! - you're dead.
And that brings into

00:15:28.699 --> 00:15:33.709
question certain special cases. What
happens if I want to insert something at

00:15:33.709 --> 00:15:38.329
the end of a list where NULL is parked
there already? I've got to be very

00:15:38.329 --> 00:15:42.589
careful there. Suppose I wanted put
"zucchini",  or something, in at the bottom

00:15:42.589 --> 00:15:49.369
below "wine"? That might be a problem. Even
worse problem, potentially, might be if I

00:15:49.369 --> 00:15:55.429
wanted to put something in at the head
of the list - ahead of what's there already?

00:15:55.429 --> 00:15:59.660
I mean, under those circumstances what
you'd be saying is: "Something beginning

00:15:59.660 --> 00:16:05.660
with `a' Sean? "avocado" to make guacamole
with?" If we want to put "avocado" here then

00:16:05.660 --> 00:16:12.949
what you will have to do is to create a
new THING there and move that to point at

00:16:12.949 --> 00:16:18.769
"avocado" and then make "avocado"s link
point at that one.  So this is "avocado"

00:16:18.769 --> 00:16:26.360
that would be start of your list now and you'd
have an internal one [a pointer] to complete it,

00:16:26.360 --> 00:16:31.549
going from here to here. Now here is a
big problem because you'd better get

00:16:31.549 --> 00:16:38.389
this right, because notice you have
actually altered `start'. What I was saying,

00:16:38.389 --> 00:16:41.360
all along, was be careful with `start'.
It's your pointer to the head of the

00:16:41.360 --> 00:16:45.949
list. But if you get something like
"avocado" that has to be the new head of

00:16:45.949 --> 00:16:50.569
the list then you must make sure that
the `start' pointer gets updated. Another

00:16:50.569 --> 00:16:55.279
special case that's got to be put in
your code. So, be obsessive about checking

00:16:55.279 --> 00:16:59.959
for NULL. Can you cope with things
inserted at the head, the very start of

00:16:59.959 --> 00:17:05.779
the list? Can you cope with
putting "zucchini" at the end? Is it all

00:17:05.779 --> 00:17:09.709
nice and clean? You'll see, in the
solution I gave you that there has to be

00:17:09.709 --> 00:17:15.409
a lot of special-case checking to get
all of this right. But, on the other hand,

00:17:15.409 --> 00:17:20.209
you can make it work.
But you will in general need some sort

00:17:20.209 --> 00:17:25.039
of roving pointer, or pointers, moving
down the list to check what you're

00:17:25.039 --> 00:17:30.409
pointing at and what the next one is. Now
if you look at that code and say: "Oh! it's

00:17:30.409 --> 00:17:33.560
yukky - it's horrible - can't you do any
better than that?"

00:17:33.560 --> 00:17:42.390
It's not easy! However, there is a top-
secret trick, which actually makes it so

00:17:42.390 --> 00:17:47.430
much easier to do that. It'll have to be a
separate video. Sorry to leave you with

00:17:47.430 --> 00:17:51.390
cliffhangers folks but it's becoming
almost a "Computerphile" tradition now,

00:17:51.390 --> 00:17:53.850
isn't it?!  So, what would make life a lot easier

00:17:53.850 --> 00:17:57.690
is instead of just having THING *, I mean we
can't do away with it -- we've got it.

00:17:57.690 --> 00:18:03.600
But you know it's a blue thing. It points
to a structure of type THING  - is if we

00:18:03.600 --> 00:18:14.610
introduce the concept of a pointer to a
pointer to a THING and this is what a

00:18:14.610 --> 00:18:22.500
green box signifies. I've got some extra
long linkage here. I'm going to put that

00:18:22.500 --> 00:18:28.860
on there. So I hope you're all happy
because this is really doing type theory

00:18:28.860 --> 00:18:32.940
- elementary type theory - in a way that
would make my functional colleagues

00:18:32.940 --> 00:18:38.580
blench, but I'll try not to say anything
too obviously untrue. You'll have to

00:18:38.580 --> 00:18:44.610
agree with me that if the contents of a
blue box is a `reference to a THING' then

00:18:44.610 --> 00:18:50.820
if you step one beyond it you're
referring to a ref THING, or the THING *,

00:18:50.820 --> 00:18:59.220
or whatever. So the contents of the
green box would be a ref ref thing, or in

00:18:59.220 --> 00:19:06.210
C notation a THING **. Assemblerr
programmers among you may say: "Oh! come 

00:19:06.210 --> 00:19:11.010
on this is just type-safe nonsense.
They're all pointers - just mess about

00:19:11.010 --> 00:19:13.800
with them, do what you want with them, and
don't make any mistakes!"

00:19:13.800 --> 00:19:19.100
Now what I like about C is it's a nice
half-way house. It gives you a bit of

00:19:19.100 --> 00:19:24.810
type-safe capability. It does distinguish
between a pointer to a THING and a

00:19:24.810 --> 00:19:30.090
pointer to a pointer to a THING and
makes you very carefully get the level

00:19:30.090 --> 00:19:35.490
of your pointing correct. But what can
be revealed in the future is that that

00:19:35.490 --> 00:19:40.620
simple trick, of this [green] thing containing a
pointer to a pointer, can solve a huge number of problems.

