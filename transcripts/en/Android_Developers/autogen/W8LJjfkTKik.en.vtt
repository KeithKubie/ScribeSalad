WEBVTT
Kind: captions
Language: en

00:00:05.720 --> 00:00:07.880
 
when you first enter the world of

00:00:07.880 --> 00:00:07.890
when you first enter the world of
 

00:00:07.890 --> 00:00:09.799
when you first enter the world of
automated testing you might be

00:00:09.799 --> 00:00:09.809
automated testing you might be
 

00:00:09.809 --> 00:00:11.650
automated testing you might be
overwhelmed with some of the terminology

00:00:11.650 --> 00:00:11.660
overwhelmed with some of the terminology
 

00:00:11.660 --> 00:00:15.350
overwhelmed with some of the terminology
unit tests instrumented tests mocking it

00:00:15.350 --> 00:00:15.360
unit tests instrumented tests mocking it
 

00:00:15.360 --> 00:00:17.180
unit tests instrumented tests mocking it
can be a little daunting to even start

00:00:17.180 --> 00:00:17.190
can be a little daunting to even start
 

00:00:17.190 --> 00:00:19.099
can be a little daunting to even start
to learn about testing if you're

00:00:19.099 --> 00:00:19.109
to learn about testing if you're
 

00:00:19.109 --> 00:00:20.750
to learn about testing if you're
watching this video you're probably

00:00:20.750 --> 00:00:20.760
watching this video you're probably
 

00:00:20.760 --> 00:00:22.519
watching this video you're probably
looking for an answer to one simple

00:00:22.519 --> 00:00:22.529
looking for an answer to one simple
 

00:00:22.529 --> 00:00:24.950
looking for an answer to one simple
question how do I start adding tests to

00:00:24.950 --> 00:00:24.960
question how do I start adding tests to
 

00:00:24.960 --> 00:00:27.620
question how do I start adding tests to
my app don't worry that's what Android

00:00:27.620 --> 00:00:27.630
my app don't worry that's what Android
 

00:00:27.630 --> 00:00:29.630
my app don't worry that's what Android
testing patterns is all about but please

00:00:29.630 --> 00:00:29.640
testing patterns is all about but please
 

00:00:29.640 --> 00:00:31.339
testing patterns is all about but please
bear with me let's start with some

00:00:31.339 --> 00:00:31.349
bear with me let's start with some
 

00:00:31.349 --> 00:00:34.670
bear with me let's start with some
basics this is the testing pyramid it

00:00:34.670 --> 00:00:34.680
basics this is the testing pyramid it
 

00:00:34.680 --> 00:00:36.709
basics this is the testing pyramid it
represents the various levels or types

00:00:36.709 --> 00:00:36.719
represents the various levels or types
 

00:00:36.719 --> 00:00:39.290
represents the various levels or types
of tests you can add to your app unit

00:00:39.290 --> 00:00:39.300
of tests you can add to your app unit
 

00:00:39.300 --> 00:00:41.270
of tests you can add to your app unit
tests are perhaps the most basic type of

00:00:41.270 --> 00:00:41.280
tests are perhaps the most basic type of
 

00:00:41.280 --> 00:00:43.459
tests are perhaps the most basic type of
tests but basic is not the same as

00:00:43.459 --> 00:00:43.469
tests but basic is not the same as
 

00:00:43.469 --> 00:00:46.190
tests but basic is not the same as
unimportant in fact they should form the

00:00:46.190 --> 00:00:46.200
unimportant in fact they should form the
 

00:00:46.200 --> 00:00:48.110
unimportant in fact they should form the
foundation of your whole test strategy

00:00:48.110 --> 00:00:48.120
foundation of your whole test strategy
 

00:00:48.120 --> 00:00:50.180
foundation of your whole test strategy
that's why they sit at the bottom of the

00:00:50.180 --> 00:00:50.190
that's why they sit at the bottom of the
 

00:00:50.190 --> 00:00:51.040
that's why they sit at the bottom of the
pyramid

00:00:51.040 --> 00:00:51.050
pyramid
 

00:00:51.050 --> 00:00:53.450
pyramid
unit tests verify the correctness of the

00:00:53.450 --> 00:00:53.460
unit tests verify the correctness of the
 

00:00:53.460 --> 00:00:55.189
unit tests verify the correctness of the
smallest units of your code such as

00:00:55.189 --> 00:00:55.199
smallest units of your code such as
 

00:00:55.199 --> 00:00:57.560
smallest units of your code such as
methods and classes in isolation from

00:00:57.560 --> 00:00:57.570
methods and classes in isolation from
 

00:00:57.570 --> 00:00:59.540
methods and classes in isolation from
the rest of the code base or even the

00:00:59.540 --> 00:00:59.550
the rest of the code base or even the
 

00:00:59.550 --> 00:01:02.270
the rest of the code base or even the
platform they will be running on in fact

00:01:02.270 --> 00:01:02.280
platform they will be running on in fact
 

00:01:02.280 --> 00:01:04.399
platform they will be running on in fact
you can actually run unit tests for

00:01:04.399 --> 00:01:04.409
you can actually run unit tests for
 

00:01:04.409 --> 00:01:06.920
you can actually run unit tests for
Android apps on your computer thanks to

00:01:06.920 --> 00:01:06.930
Android apps on your computer thanks to
 

00:01:06.930 --> 00:01:08.630
Android apps on your computer thanks to
support from Android studio and Gradle

00:01:08.630 --> 00:01:08.640
support from Android studio and Gradle
 

00:01:08.640 --> 00:01:11.030
support from Android studio and Gradle
if it's unclear to you why you should

00:01:11.030 --> 00:01:11.040
if it's unclear to you why you should
 

00:01:11.040 --> 00:01:12.649
if it's unclear to you why you should
test code in isolation from Android

00:01:12.649 --> 00:01:12.659
test code in isolation from Android
 

00:01:12.659 --> 00:01:15.109
test code in isolation from Android
think of it this way how can you even

00:01:15.109 --> 00:01:15.119
think of it this way how can you even
 

00:01:15.119 --> 00:01:16.940
think of it this way how can you even
begin to check if your banking app for

00:01:16.940 --> 00:01:16.950
begin to check if your banking app for
 

00:01:16.950 --> 00:01:18.890
begin to check if your banking app for
example runs on an Android device

00:01:18.890 --> 00:01:18.900
example runs on an Android device
 

00:01:18.900 --> 00:01:21.170
example runs on an Android device
without first making sure that basic

00:01:21.170 --> 00:01:21.180
without first making sure that basic
 

00:01:21.180 --> 00:01:22.609
without first making sure that basic
business logic such as currency

00:01:22.609 --> 00:01:22.619
business logic such as currency
 

00:01:22.619 --> 00:01:24.469
business logic such as currency
conversions or calculating an account

00:01:24.469 --> 00:01:24.479
conversions or calculating an account
 

00:01:24.479 --> 00:01:27.440
conversions or calculating an account
balance work correctly but you are

00:01:27.440 --> 00:01:27.450
balance work correctly but you are
 

00:01:27.450 --> 00:01:29.630
balance work correctly but you are
writing an Android app after all so you

00:01:29.630 --> 00:01:29.640
writing an Android app after all so you
 

00:01:29.640 --> 00:01:31.609
writing an Android app after all so you
need to be able to test how your code

00:01:31.609 --> 00:01:31.619
need to be able to test how your code
 

00:01:31.619 --> 00:01:33.819
need to be able to test how your code
behaves on a real device or emulator and

00:01:33.819 --> 00:01:33.829
behaves on a real device or emulator and
 

00:01:33.829 --> 00:01:35.690
behaves on a real device or emulator and
that's when you want to use

00:01:35.690 --> 00:01:35.700
that's when you want to use
 

00:01:35.700 --> 00:01:38.630
that's when you want to use
instrumentation tests why do we call

00:01:38.630 --> 00:01:38.640
instrumentation tests why do we call
 

00:01:38.640 --> 00:01:40.520
instrumentation tests why do we call
them instrumentation or instrumented

00:01:40.520 --> 00:01:40.530
them instrumentation or instrumented
 

00:01:40.530 --> 00:01:42.889
them instrumentation or instrumented
test instrumentation is an android

00:01:42.889 --> 00:01:42.899
test instrumentation is an android
 

00:01:42.899 --> 00:01:44.719
test instrumentation is an android
framework component that provides

00:01:44.719 --> 00:01:44.729
framework component that provides
 

00:01:44.729 --> 00:01:46.789
framework component that provides
additional monitoring and control over

00:01:46.789 --> 00:01:46.799
additional monitoring and control over
 

00:01:46.799 --> 00:01:49.100
additional monitoring and control over
the application under test through the

00:01:49.100 --> 00:01:49.110
the application under test through the
 

00:01:49.110 --> 00:01:51.050
the application under test through the
use of instrumentation we can run tests

00:01:51.050 --> 00:01:51.060
use of instrumentation we can run tests
 

00:01:51.060 --> 00:01:53.210
use of instrumentation we can run tests
on a real device or emulator alongside

00:01:53.210 --> 00:01:53.220
on a real device or emulator alongside
 

00:01:53.220 --> 00:01:56.480
on a real device or emulator alongside
your app's code how does that work well

00:01:56.480 --> 00:01:56.490
your app's code how does that work well
 

00:01:56.490 --> 00:01:58.580
your app's code how does that work well
the test that you write will be packaged

00:01:58.580 --> 00:01:58.590
the test that you write will be packaged
 

00:01:58.590 --> 00:02:01.249
the test that you write will be packaged
into a separate apk and install as part

00:02:01.249 --> 00:02:01.259
into a separate apk and install as part
 

00:02:01.259 --> 00:02:02.959
into a separate apk and install as part
of the connected android test Gradle

00:02:02.959 --> 00:02:02.969
of the connected android test Gradle
 

00:02:02.969 --> 00:02:04.999
of the connected android test Gradle
task or run running tests in Android

00:02:04.999 --> 00:02:05.009
task or run running tests in Android
 

00:02:05.009 --> 00:02:05.420
task or run running tests in Android
studio

00:02:05.420 --> 00:02:05.430
studio
 

00:02:05.430 --> 00:02:07.999
studio
they will then be executed in your apps

00:02:07.999 --> 00:02:08.009
they will then be executed in your apps
 

00:02:08.009 --> 00:02:10.880
they will then be executed in your apps
process by an instrumentation runner we

00:02:10.880 --> 00:02:10.890
process by an instrumentation runner we
 

00:02:10.890 --> 00:02:12.619
process by an instrumentation runner we
provide a runner implementation that is

00:02:12.619 --> 00:02:12.629
provide a runner implementation that is
 

00:02:12.629 --> 00:02:14.330
provide a runner implementation that is
compatible with J unit 4

00:02:14.330 --> 00:02:14.340
compatible with J unit 4
 

00:02:14.340 --> 00:02:16.339
compatible with J unit 4
as part of the Android testing support

00:02:16.339 --> 00:02:16.349
as part of the Android testing support
 

00:02:16.349 --> 00:02:19.670
as part of the Android testing support
library or ATS L to use it make sure you

00:02:19.670 --> 00:02:19.680
library or ATS L to use it make sure you
 

00:02:19.680 --> 00:02:21.050
library or ATS L to use it make sure you
have the newest version of Android

00:02:21.050 --> 00:02:21.060
have the newest version of Android
 

00:02:21.060 --> 00:02:23.210
have the newest version of Android
support repository installed within your

00:02:23.210 --> 00:02:23.220
support repository installed within your
 

00:02:23.220 --> 00:02:26.300
support repository installed within your
SDK the adsl comes with a great UI

00:02:26.300 --> 00:02:26.310
SDK the adsl comes with a great UI
 

00:02:26.310 --> 00:02:28.910
SDK the adsl comes with a great UI
testing framework called espresso that I

00:02:28.910 --> 00:02:28.920
testing framework called espresso that I
 

00:02:28.920 --> 00:02:30.350
testing framework called espresso that I
will focus on in the next few episodes

00:02:30.350 --> 00:02:30.360
will focus on in the next few episodes
 

00:02:30.360 --> 00:02:32.900
will focus on in the next few episodes
of Android testing patterns it also

00:02:32.900 --> 00:02:32.910
of Android testing patterns it also
 

00:02:32.910 --> 00:02:34.850
of Android testing patterns it also
contains a unit for rules that can

00:02:34.850 --> 00:02:34.860
contains a unit for rules that can
 

00:02:34.860 --> 00:02:36.589
contains a unit for rules that can
automatically start activities and

00:02:36.589 --> 00:02:36.599
automatically start activities and
 

00:02:36.599 --> 00:02:39.440
automatically start activities and
services for your tests now I'm sure

00:02:39.440 --> 00:02:39.450
services for your tests now I'm sure
 

00:02:39.450 --> 00:02:40.910
services for your tests now I'm sure
you're all eager to see some testing in

00:02:40.910 --> 00:02:40.920
you're all eager to see some testing in
 

00:02:40.920 --> 00:02:42.770
you're all eager to see some testing in
action so be sure to click through to

00:02:42.770 --> 00:02:42.780
action so be sure to click through to
 

00:02:42.780 --> 00:02:44.660
action so be sure to click through to
the next video where I show you how to

00:02:44.660 --> 00:02:44.670
the next video where I show you how to
 

00:02:44.670 --> 00:03:00.809
the next video where I show you how to
run your first espresso test

00:03:00.809 --> 00:03:00.819
 
 

00:03:00.819 --> 00:03:02.879
 
you

