WEBVTT
Kind: captions
Language: en

00:00:01.240 --> 00:00:04.059
So this is this address translation, and

00:00:04.059 --> 00:00:07.320
what you can access in
memory is really powerful.

00:00:07.320 --> 00:00:11.550
This is how we're going to be
able to protect the data and

00:00:11.550 --> 00:00:13.510
code of a given process.

00:00:13.510 --> 00:00:16.870
And the way we're going to be able
to do it is, the operating system,

00:00:16.870 --> 00:00:22.620
I said is responsible for managing
those page tables you're talking about.

00:00:22.620 --> 00:00:25.650
Remember you always
start a virtual address.

00:00:25.650 --> 00:00:29.110
So process is going to
start with virtual address,

00:00:29.110 --> 00:00:33.200
which has to be translated to
physical address that should fall

00:00:33.200 --> 00:00:38.020
in a physical page that we're
talking about, physical frame.

00:00:38.020 --> 00:00:42.390
So the operating system will not
map a virtual page of a process A,

00:00:42.390 --> 00:00:45.280
but remember you're going to
start with a virtual address that

00:00:45.280 --> 00:00:47.920
has a virtual page number and
displacement within that.

00:00:47.920 --> 00:00:52.210
It will not map a virtual page
of process A to a physical

00:00:52.210 --> 00:00:55.560
page that has been given to process B.

00:00:55.560 --> 00:00:58.760
Remember these pages
are reusable resources or

00:00:58.760 --> 00:01:01.770
time to get assigned to
different processes so

00:01:01.770 --> 00:01:06.573
that currently a certain physical
page has been assigned to process B.

00:01:06.573 --> 00:01:13.150
The operating system is not going to
set up the page table of process A,

00:01:13.150 --> 00:01:17.610
such that a page table entry in
that process A's page table,

00:01:17.610 --> 00:01:20.440
can point to the space
that belongs to B.

00:01:20.440 --> 00:01:24.210
That's our protection isolation
whatever you call it.

00:01:24.210 --> 00:01:28.180
We have essentially partitioned
the physical memory that we have,

00:01:28.180 --> 00:01:31.510
among the different processes
we have in the system.

00:01:31.510 --> 00:01:34.790
And we limit these processes

00:01:34.790 --> 00:01:38.350
to only the portion of memory they
have access toward a given time.

00:01:38.350 --> 00:01:42.168
By making sure that they can only reach
those portions through their phase

00:01:42.168 --> 00:01:42.846
tables, and

00:01:42.846 --> 00:01:46.560
the operating system is again going
to manage their phase tables.

00:01:46.560 --> 00:01:49.780
The trusted computing base
you trusted to do this right,

00:01:49.780 --> 00:01:53.280
so we keep a different processes
separate from each other.

00:01:53.280 --> 00:01:57.300
Which is what results in getting
protected from each other and

00:01:57.300 --> 00:01:59.610
process A doesn't trust process B.

00:01:59.610 --> 00:02:03.240
So as I explained process A cannot
access process B's memory

00:02:03.240 --> 00:02:08.199
because it has no way to read
the memory that belongs to process B.

00:02:08.199 --> 00:02:11.860
This will work as long as this
page table is correctly managed.

00:02:11.860 --> 00:02:15.750
And as I said before they're managed by
the operating system which is trusted so

00:02:15.750 --> 00:02:19.570
let's hope they are correctly managed
unless somebody finds a way to attack

00:02:19.570 --> 00:02:21.660
and successfully compromise
the operating system.

