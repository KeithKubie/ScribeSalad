WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.916
[MUSIC PLAYING]

00:00:04.380 --> 00:00:07.290
TRAVIS MCPHAIL: I'd like to
welcome you all to this Google

00:00:07.290 --> 00:00:09.350
Maps Platform talk.

00:00:09.350 --> 00:00:11.310
We're going to take a
deep dive into building

00:00:11.310 --> 00:00:13.410
for performance and scale.

00:00:13.410 --> 00:00:15.360
So I'm Travis McPhail.

00:00:15.360 --> 00:00:19.388
I'm one the engineering
leads for the Maps Platform.

00:00:19.388 --> 00:00:21.180
Just to give you a
little context about who

00:00:21.180 --> 00:00:23.520
I am, since I've
been at Google, I've

00:00:23.520 --> 00:00:25.290
worked on a number
of different products

00:00:25.290 --> 00:00:27.810
that you are probably
familiar with from Maps

00:00:27.810 --> 00:00:29.760
to Earth to Street View.

00:00:29.760 --> 00:00:32.850
But even before then, I
worked in various industries

00:00:32.850 --> 00:00:35.460
from the special
effects industry.

00:00:35.460 --> 00:00:39.360
I worked in gaming, biomedical,
seismic data analysis

00:00:39.360 --> 00:00:41.000
in oil and gas, and more.

00:00:41.000 --> 00:00:44.100
So in short, I'm
a graphics geek.

00:00:44.100 --> 00:00:48.480
But more important than
that, I have a passion

00:00:48.480 --> 00:00:50.840
to help people
fulfill their purpose.

00:00:50.840 --> 00:00:52.710
In the context of
today, that is to help

00:00:52.710 --> 00:00:55.200
each and every one of
you incorporate Maps

00:00:55.200 --> 00:00:57.390
into your products so
your users can have

00:00:57.390 --> 00:00:59.580
the best experience possible.

00:00:59.580 --> 00:01:01.980
Now, before I get into
the meat of the talk,

00:01:01.980 --> 00:01:03.755
I do want to do a
little slight recap

00:01:03.755 --> 00:01:06.800
and go over the last 12 months.

00:01:06.800 --> 00:01:11.920
So last year, at I/O, we
announced the Google Maps

00:01:11.920 --> 00:01:17.920
Platform, and we committed
to evolving our Maps APIs

00:01:17.920 --> 00:01:21.340
into a more simplified,
more scalable,

00:01:21.340 --> 00:01:25.130
easy-to-use set of tools
that meet your needs.

00:01:25.130 --> 00:01:28.210
Now, it's been a very
busy year, and we

00:01:28.210 --> 00:01:30.820
know that a couple
of these changes

00:01:30.820 --> 00:01:32.770
weren't easy to adapt to.

00:01:32.770 --> 00:01:35.350
Some of you had to
adapt to new prices.

00:01:35.350 --> 00:01:38.230
Others had to make
changes to your code bases

00:01:38.230 --> 00:01:41.440
based on changes that we
made to our APIs and SDKs.

00:01:41.440 --> 00:01:43.120
But I want to reassure
you that we've

00:01:43.120 --> 00:01:47.320
been hard at work for you
to improve the developer

00:01:47.320 --> 00:01:48.790
environment for you.

00:01:48.790 --> 00:01:51.520
And I just want to give you
a little taste on what's

00:01:51.520 --> 00:01:53.350
happened underneath the hood.

00:01:53.350 --> 00:01:55.300
So for the past
year, we've really

00:01:55.300 --> 00:01:58.810
focused on the stability,
the reliability,

00:01:58.810 --> 00:02:00.880
and the performance
of our platform

00:02:00.880 --> 00:02:06.850
so that we can guarantee our
99.9% uptime for our SLA.

00:02:06.850 --> 00:02:11.890
This helps us continue to
provide over 150 million places

00:02:11.890 --> 00:02:13.900
for you and your users.

00:02:13.900 --> 00:02:17.650
It continues to allow us to have
routes that cover more than 40

00:02:17.650 --> 00:02:19.750
million miles on the Earth.

00:02:19.750 --> 00:02:21.370
And it allows us
to serve you maps

00:02:21.370 --> 00:02:24.820
that cover 99% of the world.

00:02:24.820 --> 00:02:29.650
Some changes that you might
have felt more directly-- we now

00:02:29.650 --> 00:02:33.080
offer support
available to everyone,

00:02:33.080 --> 00:02:35.140
not just a subset of developers.

00:02:35.140 --> 00:02:39.060
We've upgraded our Places
SDK on Android and iOS.

00:02:39.060 --> 00:02:42.070
And we continue to invest in
some of our industry solutions.

00:02:42.070 --> 00:02:44.713
In particular, we have some
meaningful partnerships

00:02:44.713 --> 00:02:46.630
that we've established
in the gaming community

00:02:46.630 --> 00:02:47.990
and the ridesharing community.

00:02:47.990 --> 00:02:51.680
And great things are being
worked on as we speak.

00:02:51.680 --> 00:02:55.920
But on to what we'll be
covering in this talk.

00:02:55.920 --> 00:02:58.550
So we're going to go
through a number of things.

00:02:58.550 --> 00:03:00.440
I'll try not to go
through it fast.

00:03:00.440 --> 00:03:03.200
So please forgive me if I'm
a little speedy on this.

00:03:03.200 --> 00:03:06.200
But first, we're going
to dive into performance.

00:03:06.200 --> 00:03:07.695
Then after we go
into performance,

00:03:07.695 --> 00:03:10.070
we're going to talk a little
bit about data visualization

00:03:10.070 --> 00:03:11.390
and WebGL.

00:03:11.390 --> 00:03:14.995
And then we'll end it off
talking about building faster

00:03:14.995 --> 00:03:15.995
on the Android platform.

00:03:19.850 --> 00:03:22.100
So performance at scale.

00:03:22.100 --> 00:03:25.000
This section of the talk,
just for everyone in the room,

00:03:25.000 --> 00:03:28.240
I'm going to focus on the
web and mobile web platforms.

00:03:28.240 --> 00:03:32.230
The reason for this is because
the majority of feedback

00:03:32.230 --> 00:03:35.740
that we've received
from developers who've

00:03:35.740 --> 00:03:38.320
experienced performance issues
when rendering a lot of data

00:03:38.320 --> 00:03:41.830
on top of our maps, they come
from the web community, so

00:03:41.830 --> 00:03:43.600
mobile and web developers.

00:03:43.600 --> 00:03:46.330
And note that the things I'm
going to suggest on stage

00:03:46.330 --> 00:03:47.890
can be applicable
whether or not you

00:03:47.890 --> 00:03:52.230
are a mobile web developer or
just a web developer or both.

00:03:55.690 --> 00:03:59.080
So one of the main
abstractions that developers

00:03:59.080 --> 00:04:03.315
use to render a lot of content
on the map are custom overlays.

00:04:03.315 --> 00:04:05.440
So I don't if you're familiar
with custom overlays.

00:04:05.440 --> 00:04:06.565
Some in the room might not.

00:04:06.565 --> 00:04:08.530
Some on Livestream or
YouTube may not be.

00:04:08.530 --> 00:04:12.250
But custom overlays are merely
a layer of geospatial data

00:04:12.250 --> 00:04:14.570
that you render
on top of the map.

00:04:14.570 --> 00:04:18.040
So imagine yourself being the
owner of a real estate site.

00:04:18.040 --> 00:04:20.529
You could render
all the listings

00:04:20.529 --> 00:04:23.680
and the property bounds
using the custom overlay.

00:04:23.680 --> 00:04:27.530
So what does that look like?

00:04:27.530 --> 00:04:29.350
Well, first off,
your custom overlay

00:04:29.350 --> 00:04:33.010
needs to extend
our overlay view.

00:04:33.010 --> 00:04:34.402
You'll have a constructor.

00:04:34.402 --> 00:04:35.610
It may or may not take a map.

00:04:35.610 --> 00:04:37.390
More than likely it will though.

00:04:37.390 --> 00:04:39.310
There are a couple
of lifecycle methods

00:04:39.310 --> 00:04:40.667
that you need to implement.

00:04:40.667 --> 00:04:42.250
So there's [INAUDIBLE]
method that you

00:04:42.250 --> 00:04:43.667
implement when the
map is actually

00:04:43.667 --> 00:04:46.600
ready to use your
custom overlay.

00:04:46.600 --> 00:04:51.110
And when the map decides
to remove the overlay,

00:04:51.110 --> 00:04:53.860
there's our remove method to
help you clean up the state

00:04:53.860 --> 00:04:58.630
that you've accumulated during
the time it's been in session.

00:04:58.630 --> 00:05:01.607
But the interesting method
here is a draw method.

00:05:01.607 --> 00:05:03.190
And the reason why
this is interesting

00:05:03.190 --> 00:05:07.420
is because this method is
called every single time

00:05:07.420 --> 00:05:09.580
that we draw the map.

00:05:09.580 --> 00:05:12.550
So developers should
take great care

00:05:12.550 --> 00:05:15.550
in determining how much
work and what type of work

00:05:15.550 --> 00:05:17.090
you do within this method.

00:05:22.350 --> 00:05:24.890
So we're going to
talk a little bit,

00:05:24.890 --> 00:05:29.300
give you a few suggestions
on consultation

00:05:29.300 --> 00:05:32.450
that we've provided to
developers over the years

00:05:32.450 --> 00:05:35.150
to allow you to avoid
some of the pitfalls we've

00:05:35.150 --> 00:05:37.290
seen from previous developers.

00:05:37.290 --> 00:05:40.400
So the first item up here--

00:05:40.400 --> 00:05:44.330
do not add and remove
content until the user

00:05:44.330 --> 00:05:45.830
stops moving the map.

00:05:45.830 --> 00:05:50.120
Just to reiterate
this a bit, the map

00:05:50.120 --> 00:05:53.420
experience-- we redraw
that every time the user

00:05:53.420 --> 00:05:54.350
moves the map.

00:05:54.350 --> 00:05:56.270
So if a user is dragging,
we are constantly

00:05:56.270 --> 00:05:58.100
trying to redraw that scene.

00:05:58.100 --> 00:06:01.040
And if your custom
overlays are taking a while

00:06:01.040 --> 00:06:05.330
to actually complete, that
could introduce some stuttering

00:06:05.330 --> 00:06:08.660
or a little bit of lag or
jank into the overall map

00:06:08.660 --> 00:06:11.850
experience.

00:06:11.850 --> 00:06:17.000
So if you look at
this example here,

00:06:17.000 --> 00:06:19.610
this is an example of us
adding content and removing

00:06:19.610 --> 00:06:22.640
content on the draw method
regardless of whether or not

00:06:22.640 --> 00:06:25.100
the map is moving
or stops moving.

00:06:25.100 --> 00:06:28.190
As you can see,
as you move over,

00:06:28.190 --> 00:06:31.535
as the user pans the map,
the right side of the map,

00:06:31.535 --> 00:06:32.660
it takes a while to load.

00:06:32.660 --> 00:06:34.033
It feels a little janky.

00:06:34.033 --> 00:06:35.450
And the reason
that's happening is

00:06:35.450 --> 00:06:37.130
because we are
adding and removing

00:06:37.130 --> 00:06:39.470
content while we're
actually drawing the map.

00:06:42.690 --> 00:06:45.930
In contrast, here's an
example where we only

00:06:45.930 --> 00:06:48.630
add and remove content
when the map is stabilized.

00:06:48.630 --> 00:06:51.870
You can see as we pan the
map renders more smoothly.

00:06:51.870 --> 00:06:55.110
And when the map
becomes stationary,

00:06:55.110 --> 00:06:59.040
new content is displayed on top.

00:06:59.040 --> 00:07:01.755
This leaves for a better user
experience for your end users.

00:07:06.140 --> 00:07:09.950
But this type of problem
points to a larger issue.

00:07:09.950 --> 00:07:12.680
And the main takeaway
here is do not

00:07:12.680 --> 00:07:16.550
perform heavyweight, non-drawing
logic in your draw method

00:07:16.550 --> 00:07:18.000
just period.

00:07:18.000 --> 00:07:23.780
So when your users are
looking at the map,

00:07:23.780 --> 00:07:25.950
they think of the
entire map experience.

00:07:25.950 --> 00:07:29.420
And if we want to
provide a very--

00:07:29.420 --> 00:07:31.995
solution, we only have
a certain amount of time

00:07:31.995 --> 00:07:34.370
to render each and every frame
to guarantee the framework

00:07:34.370 --> 00:07:36.410
that we want to show.

00:07:36.410 --> 00:07:42.090
And in this graph here, this
middle line represents and 16

00:07:42.090 --> 00:07:43.850
and 2/3 milliseconds,
which equates

00:07:43.850 --> 00:07:45.990
to 60 frames per second.

00:07:45.990 --> 00:07:50.890
The rightmost line equates
to 33 and 1/3 milliseconds,

00:07:50.890 --> 00:07:53.890
which equates to 30
frames per second.

00:07:53.890 --> 00:07:56.640
And if we take longer than
this to render a frame,

00:07:56.640 --> 00:07:59.910
probably going to introduce
some jank to the user.

00:07:59.910 --> 00:08:02.390
They'll notice, and they'll
frown, and they're cry.

00:08:02.390 --> 00:08:04.680
I'm sorry.

00:08:04.680 --> 00:08:10.080
So in general, we do a fairly
decent job for our users,

00:08:10.080 --> 00:08:11.610
just the base map itself.

00:08:11.610 --> 00:08:13.980
On average-- strike that.

00:08:13.980 --> 00:08:17.490
Our median draw time
for rendering a frame

00:08:17.490 --> 00:08:21.000
is between 16 and
18 milliseconds.

00:08:21.000 --> 00:08:25.240
Some users, for various reasons,
experienced worse performance

00:08:25.240 --> 00:08:25.740
than that.

00:08:25.740 --> 00:08:27.810
So it might take a little
longer to draw a frame.

00:08:27.810 --> 00:08:30.360
It could be due to hardware,
browser version, a number

00:08:30.360 --> 00:08:35.320
of items that factor in here.

00:08:35.320 --> 00:08:38.770
Some users have a
much better experience

00:08:38.770 --> 00:08:41.450
than our median results.

00:08:41.450 --> 00:08:43.390
But regardless of
whether or not you

00:08:43.390 --> 00:08:47.905
have a user that has a great
base map experience or one that

00:08:47.905 --> 00:08:49.780
doesn't have the optimal
base map experience,

00:08:49.780 --> 00:08:52.810
we should provide them
with a overall smooth

00:08:52.810 --> 00:08:54.700
and interactive map.

00:08:54.700 --> 00:08:57.110
And it's not just us that
provides that to them.

00:08:57.110 --> 00:09:00.010
But it's also you
all and the custom

00:09:00.010 --> 00:09:04.090
overlays that you
add onto the map.

00:09:04.090 --> 00:09:10.620
So in your draw method, if that
takes one to two milliseconds,

00:09:10.620 --> 00:09:12.300
you're pretty much
guaranteed to have

00:09:12.300 --> 00:09:15.510
a very performant
experience, regardless of

00:09:15.510 --> 00:09:18.330
whether or not your user
is on a high-end device

00:09:18.330 --> 00:09:23.820
or if they have the less
optimal base map experience.

00:09:23.820 --> 00:09:28.240
They still have a fairly
decent overall experience.

00:09:28.240 --> 00:09:32.490
However, if you are querying
for a lot of content,

00:09:32.490 --> 00:09:34.050
making a lot of
changes to the data

00:09:34.050 --> 00:09:36.450
that you're showing
within the draw method,

00:09:36.450 --> 00:09:38.280
if you're also
possibly manipulating

00:09:38.280 --> 00:09:41.190
a lot of dom elements
during this draw call,

00:09:41.190 --> 00:09:48.550
you could introduce a lot
of time in your draw method.

00:09:48.550 --> 00:09:51.040
And although you may
have some users that

00:09:51.040 --> 00:09:53.940
on a very high-end device that
you might have a performing

00:09:53.940 --> 00:09:56.880
experience on, there
will inevitably

00:09:56.880 --> 00:10:01.830
be users that don't have that
same experience and experience

00:10:01.830 --> 00:10:02.490
jank.

00:10:02.490 --> 00:10:04.980
So please help us.

00:10:04.980 --> 00:10:08.130
Together, we can provide
a more useful experience

00:10:08.130 --> 00:10:10.460
for your end users.

00:10:10.460 --> 00:10:14.860
But as we've talked to
people, talked to developers,

00:10:14.860 --> 00:10:18.220
and got a general sense on how
people use custom overlays,

00:10:18.220 --> 00:10:22.480
we started to find
that our markers API

00:10:22.480 --> 00:10:27.490
could solve a lot of the
use cases that we saw.

00:10:27.490 --> 00:10:31.315
And this also has the added
benefit that you as a developer

00:10:31.315 --> 00:10:33.190
don't have to worry
about making a performing

00:10:33.190 --> 00:10:37.210
implementation on rendering
a lot of content on the map.

00:10:37.210 --> 00:10:39.440
That responsibility
can be placed on us

00:10:39.440 --> 00:10:41.750
and free you up to
do other things.

00:10:41.750 --> 00:10:47.230
But a lot of developers are
aware of different market

00:10:47.230 --> 00:10:48.730
performance characteristics.

00:10:48.730 --> 00:10:51.290
So we're going to walk
through an example

00:10:51.290 --> 00:10:53.530
where I add 1,000
markers on the map,

00:10:53.530 --> 00:10:57.160
and I can show you
how small changes can

00:10:57.160 --> 00:11:01.880
lead to some large
performance implications.

00:11:01.880 --> 00:11:04.070
So we'll start with
a little bit of code.

00:11:04.070 --> 00:11:06.850
This is just a method
that takes lat-long bounds

00:11:06.850 --> 00:11:08.740
in a number of
points and creates

00:11:08.740 --> 00:11:11.830
that many number of
random lat-long locations

00:11:11.830 --> 00:11:15.260
within that lat-long bounds.

00:11:15.260 --> 00:11:20.010
I use this to make 1,000 points.

00:11:20.010 --> 00:11:22.740
In this demo I'm about to
show, I initialize the map.

00:11:22.740 --> 00:11:27.680
I create a marker four all
1,000 of those locations.

00:11:27.680 --> 00:11:30.320
And I use it an SVC
asset for the icon

00:11:30.320 --> 00:11:33.300
because everyone loves SVGs.

00:11:33.300 --> 00:11:35.730
And I also add
mouse over a mouse

00:11:35.730 --> 00:11:40.080
out listeners to toggle the icon
as the user pans over the map.

00:11:43.650 --> 00:11:46.110
So here's an example.

00:11:46.110 --> 00:11:46.880
Here's an example.

00:11:46.880 --> 00:11:48.950
These are markers
over Australia.

00:11:48.950 --> 00:11:51.350
And I will note
that I'm actually

00:11:51.350 --> 00:11:53.070
trying to zoom into the map.

00:11:53.070 --> 00:11:58.150
And there's just a large
lag in the experience.

00:11:58.150 --> 00:12:03.480
So I'm panning around, just
showing that there's actually

00:12:03.480 --> 00:12:07.710
a couple of seconds delay
between my user action

00:12:07.710 --> 00:12:13.250
and the drawing of the
results on the map.

00:12:13.250 --> 00:12:17.490
All right, this is making
me cringe a little bit.

00:12:17.490 --> 00:12:20.700
So you're probably saying,
what gives, Travis?

00:12:20.700 --> 00:12:23.460
You told me that you're going
to show me an example where

00:12:23.460 --> 00:12:25.260
you render 1,000
markers on the map,

00:12:25.260 --> 00:12:26.820
and it's a great experience.

00:12:26.820 --> 00:12:29.520
It doesn't like you
added a lot of code.

00:12:29.520 --> 00:12:30.960
What gives?

00:12:30.960 --> 00:12:33.650
So there's one line in this
that I want you all to look at.

00:12:33.650 --> 00:12:35.280
It's this lovely SVG asset.

00:12:35.280 --> 00:12:37.740
I'm just going to
make one change.

00:12:37.740 --> 00:12:40.230
We're going to
change this to a PNG,

00:12:40.230 --> 00:12:44.290
and we're going to
rerun this demo.

00:12:44.290 --> 00:12:49.410
So now if you run this demo,
you have a much more performant

00:12:49.410 --> 00:12:50.340
map.

00:12:50.340 --> 00:12:53.710
It follows my user
gestures pretty well.

00:12:53.710 --> 00:12:56.820
And the performance
characteristics of this demo

00:12:56.820 --> 00:12:58.110
completely changes.

00:12:58.110 --> 00:13:01.431
And the reason behind this is--

00:13:01.431 --> 00:13:06.130
for right now, please
use JPEG or PNG assets.

00:13:06.130 --> 00:13:10.590
If you are using SVGs, try
to rasterize them first.

00:13:10.590 --> 00:13:13.000
It's just more effective and
more efficient in general

00:13:13.000 --> 00:13:16.750
to render a raster
image for the user--

00:13:16.750 --> 00:13:18.730
I'm sorry-- use a raster
image for the icon

00:13:18.730 --> 00:13:23.098
as opposed to an
SVG representation.

00:13:26.170 --> 00:13:28.000
But as an aside, what
I'm talking about,

00:13:28.000 --> 00:13:32.860
raster and vector,
when I took this job,

00:13:32.860 --> 00:13:36.010
one of the product managers
in the organization

00:13:36.010 --> 00:13:38.740
told me that there
are some developers

00:13:38.740 --> 00:13:43.450
that innately feel that because
we offer a raster-based maps

00:13:43.450 --> 00:13:47.920
experience through our APIs that
somehow that means that it's

00:13:47.920 --> 00:13:50.740
inherently less performant
than if we went with a vector

00:13:50.740 --> 00:13:53.832
graphics solution, maybe
like a WebGL offering.

00:13:53.832 --> 00:13:55.540
So I wanted to put a
little data to that.

00:13:58.390 --> 00:14:02.050
So if you look at one of
our raster-based products

00:14:02.050 --> 00:14:05.050
that we offer, which is
a Progressive Web App

00:14:05.050 --> 00:14:08.440
version of Maps, it is a
raster-based experience

00:14:08.440 --> 00:14:12.280
that we at the Google
Maps Platform power.

00:14:12.280 --> 00:14:16.210
And the median FPS
across live traffic

00:14:16.210 --> 00:14:19.760
that we've analyzed for a
while through various actions

00:14:19.760 --> 00:14:23.920
is around 55 milliseconds.

00:14:23.920 --> 00:14:26.680
Contrast that to if you
go to maps.google.com

00:14:26.680 --> 00:14:28.810
on a device that
supports WebGL, you

00:14:28.810 --> 00:14:32.770
get a complete
WebGL-powered experience,

00:14:32.770 --> 00:14:34.840
but the median frame
rate for that experience

00:14:34.840 --> 00:14:37.430
is around 51 frames per second.

00:14:37.430 --> 00:14:42.930
So this is not to champion
or knock either platform.

00:14:42.930 --> 00:14:46.330
We provide both
options within Google.

00:14:46.330 --> 00:14:50.230
But we save the WebGL for
the consumer experience.

00:14:50.230 --> 00:14:52.270
But this just serves
that whether we

00:14:52.270 --> 00:14:54.970
serve you a raster-based
implementation

00:14:54.970 --> 00:14:57.470
or a vector-based
implementation,

00:14:57.470 --> 00:15:00.130
you will have a performant
base map to build your web

00:15:00.130 --> 00:15:01.120
applications around.

00:15:04.890 --> 00:15:13.940
So back to our example,
if you look at this map,

00:15:13.940 --> 00:15:18.230
I don't know about you,
but if you want your users

00:15:18.230 --> 00:15:20.070
to interact with the
individual contents

00:15:20.070 --> 00:15:22.880
that you add on top of
the map, it's hard for me

00:15:22.880 --> 00:15:27.200
to decipher any meaning on
the content that we're adding.

00:15:27.200 --> 00:15:29.490
Because there's 1,000
markers on Australia.

00:15:29.490 --> 00:15:32.580
I can't even see the
majority of Australia.

00:15:32.580 --> 00:15:35.965
So one last note--

00:15:35.965 --> 00:15:36.965
don't forget to cluster.

00:15:40.110 --> 00:15:45.220
We have a marker cluster
support library that we offer.

00:15:45.220 --> 00:15:48.870
And in my demo example
here, I use that in order

00:15:48.870 --> 00:15:51.990
to cluster content
on the map again.

00:15:51.990 --> 00:15:54.935
So there are a couple of
options that you can use.

00:15:54.935 --> 00:15:56.310
There's a grid
option size, which

00:15:56.310 --> 00:15:59.580
controls the amount of markers
that would cluster together

00:15:59.580 --> 00:16:00.840
into one group.

00:16:00.840 --> 00:16:03.090
There's a maximum
zoom, which controls

00:16:03.090 --> 00:16:04.830
the maximum zoom
level, after which you

00:16:04.830 --> 00:16:06.127
shouldn't see clusters.

00:16:06.127 --> 00:16:07.710
And then you can
provide an image path

00:16:07.710 --> 00:16:13.180
that has the base URL for
the cluster icon assets.

00:16:13.180 --> 00:16:16.470
Note those should probably
be PNGs and JPEGs as well.

00:16:16.470 --> 00:16:18.270
With that, you can
just instantiate

00:16:18.270 --> 00:16:20.760
a marker cluster given
the map to the markers

00:16:20.760 --> 00:16:22.330
in these options.

00:16:22.330 --> 00:16:25.230
And you get an example
just like this.

00:16:25.230 --> 00:16:30.390
So already, I'm able to see
where a lot of the action

00:16:30.390 --> 00:16:31.180
is in Australia.

00:16:31.180 --> 00:16:33.270
And if I want, I can
choose to tunnel down

00:16:33.270 --> 00:16:34.870
in different spaces.

00:16:34.870 --> 00:16:37.980
But in this demo, I'm just
moving the map around violently

00:16:37.980 --> 00:16:41.610
just to show that the
map is interactive even

00:16:41.610 --> 00:16:43.650
with this additional
clustering logic on top.

00:16:48.940 --> 00:16:51.600
So if you want to know
more about Maps clusters,

00:16:51.600 --> 00:16:53.220
you can go to the short link.

00:16:53.220 --> 00:16:55.300
There's one thing
that you should note--

00:16:55.300 --> 00:16:56.880
we have changed
these short links.

00:16:56.880 --> 00:17:00.510
We now have the E
after the goo.gl.

00:17:00.510 --> 00:17:02.160
So now it's the
full kind of Google

00:17:02.160 --> 00:17:03.790
with a dot in the middle.

00:17:03.790 --> 00:17:05.010
So take that as a note.

00:17:09.599 --> 00:17:13.640
And just to recap, we've
talked about custom overlays.

00:17:13.640 --> 00:17:15.050
We want to add
and remove content

00:17:15.050 --> 00:17:17.140
when the map isn't moving.

00:17:17.140 --> 00:17:19.099
You don't want to have
heavyweight operations

00:17:19.099 --> 00:17:20.700
in your draw methods.

00:17:20.700 --> 00:17:22.410
For markers, you
want to consider

00:17:22.410 --> 00:17:26.609
using markers instead of
custom overlays if possible.

00:17:26.609 --> 00:17:30.000
Use JPEG and PNG assets
as opposed to SVGs.

00:17:30.000 --> 00:17:32.040
And don't forget to cluster.

00:17:32.040 --> 00:17:35.340
But we've talked about
what you can do now,

00:17:35.340 --> 00:17:38.430
but I'm sure there's a few
of you there wondering what's

00:17:38.430 --> 00:17:42.900
next, especially if you
are a developer that

00:17:42.900 --> 00:17:44.780
has a lot of data
that you want to show.

00:17:44.780 --> 00:17:46.410
You're probably
saying, Travis, it's

00:17:46.410 --> 00:17:49.350
very nice and fun that
you showed an example

00:17:49.350 --> 00:17:52.680
where you are rendering
1,000 markers on the map.

00:17:52.680 --> 00:17:54.540
But I have to be
honest with you.

00:17:54.540 --> 00:17:56.560
I have hundreds of
thousands of data

00:17:56.560 --> 00:17:57.810
that I want to see on the map.

00:17:57.810 --> 00:18:00.430
I might have millions of things
I want to show on the map.

00:18:00.430 --> 00:18:01.430
What do you have for me?

00:18:04.900 --> 00:18:07.830
So I'd like to announce
that we officially

00:18:07.830 --> 00:18:10.890
have a partnership with the
great folk over a Deck.GL.

00:18:10.890 --> 00:18:13.920
For those that do not
know what Deck.GL is,

00:18:13.920 --> 00:18:17.800
it is an open source data
visualization library.

00:18:17.800 --> 00:18:21.210
It uses WebGL on
client side to render

00:18:21.210 --> 00:18:24.578
huge amounts of data sets
overlaid on top of a base map.

00:18:24.578 --> 00:18:26.120
That base map can
be your Google Map.

00:18:29.550 --> 00:18:33.990
So Deck.GL has a number
of layer examples

00:18:33.990 --> 00:18:36.090
that you can read up more on.

00:18:36.090 --> 00:18:38.850
But this example
here is an arc layer,

00:18:38.850 --> 00:18:42.750
where there are arcs connecting
a star point and an end point.

00:18:42.750 --> 00:18:46.150
And the arc is a 3D arc that
actually goes into the screen.

00:18:46.150 --> 00:18:52.920
So in this example, this is
an arc layer of around 16,000

00:18:52.920 --> 00:18:54.840
New York City cab pickups.

00:18:54.840 --> 00:18:56.370
I'll just zoom in
just so you can

00:18:56.370 --> 00:19:00.210
see that there are a bunch
of lines in this example.

00:19:02.740 --> 00:19:05.460
We probably would have a
better visualization experience

00:19:05.460 --> 00:19:09.450
if we offer tilt. Sad to say,
Google Maps on the JavaScript

00:19:09.450 --> 00:19:11.940
platform does not support tilt--

00:19:11.940 --> 00:19:13.010
at least not yet.

00:19:17.200 --> 00:19:21.880
I also-- see, I like flights, so
I have another flight example.

00:19:21.880 --> 00:19:26.590
This is an example of animating
the flight paths around London.

00:19:26.590 --> 00:19:29.050
So this starts to show you
a little bit of the power

00:19:29.050 --> 00:19:33.310
that you have when you pair
Deck.GL with Google Maps.

00:19:33.310 --> 00:19:36.400
Whether or not you want a
static dynamic visualization

00:19:36.400 --> 00:19:39.970
experience or you want more
of a dynamic animated data

00:19:39.970 --> 00:19:43.090
visualization experience,
this Deck.GL and Google Maps

00:19:43.090 --> 00:19:46.435
partnership is a
stepping stone to get you

00:19:46.435 --> 00:19:47.310
where you want to be.

00:19:50.230 --> 00:19:53.770
So how does this look in code?

00:19:53.770 --> 00:19:56.400
This is very similar
to a standard example

00:19:56.400 --> 00:19:57.900
of just incorporating the map.

00:19:57.900 --> 00:19:59.640
You have an [? idea ?]
for your map.

00:19:59.640 --> 00:20:03.385
I'm including the latest
Deck.GL JavaScript binary.

00:20:06.150 --> 00:20:09.620
You also have a canvas for
the Deck.GL experience.

00:20:09.620 --> 00:20:13.040
That will be overlaid
on top of the map.

00:20:13.040 --> 00:20:16.160
I have some constants here that
just define different camera

00:20:16.160 --> 00:20:17.930
properties.

00:20:17.930 --> 00:20:20.420
In this example, the
pitch is set to zero.

00:20:20.420 --> 00:20:22.760
That's because Google Maps
does not support tilt yet.

00:20:22.760 --> 00:20:24.080
Once again, at least not yet.

00:20:26.830 --> 00:20:29.530
One of the challenges
that Deck.GL and Google

00:20:29.530 --> 00:20:33.220
Maps had to overcome in
making this partnership work

00:20:33.220 --> 00:20:36.910
is reconciling between two
different camera models.

00:20:36.910 --> 00:20:40.450
Now, we will continue to work
on this as time progresses.

00:20:40.450 --> 00:20:46.420
But for the short term, you need
to apply a zoom level offset

00:20:46.420 --> 00:20:48.070
for the Google Map camera.

00:20:48.070 --> 00:20:51.520
And that's actually just one.

00:20:51.520 --> 00:20:55.180
On this example, I'm also
supplying just a sample

00:20:55.180 --> 00:20:57.790
type of URL to GeoJSON data.

00:20:57.790 --> 00:21:01.280
I'll talk about what
GeoJSON is a bit later.

00:21:01.280 --> 00:21:04.150
And from that, you can
initialize the map, very

00:21:04.150 --> 00:21:05.950
similar to what you already do.

00:21:05.950 --> 00:21:11.260
You apply the camera zoom
offset for your Google Map.

00:21:11.260 --> 00:21:16.750
You create a new Deck.GL
experience with a deck canvas.

00:21:16.750 --> 00:21:20.230
You pass in that same view state
minus the camera zoom offset.

00:21:20.230 --> 00:21:22.865
In this example, I'm
disabling rotation.

00:21:26.520 --> 00:21:29.290
Deck.GL supports
camera rotation.

00:21:29.290 --> 00:21:31.380
Google Maps does not--

00:21:31.380 --> 00:21:32.840
at least not yet.

00:21:32.840 --> 00:21:38.840
And there is a callback for when
the Deck.GL view state changes.

00:21:38.840 --> 00:21:42.950
And essentially, it just
tells the map to follow suit.

00:21:42.950 --> 00:21:45.170
In addition to
this, you can supply

00:21:45.170 --> 00:21:48.460
a number of Deck.GL layers
to overlay on the canvas.

00:21:48.460 --> 00:21:50.480
And this one is a GeoJSON layer.

00:21:50.480 --> 00:21:52.760
And for those that aren't
familiar with GeoJSON,

00:21:52.760 --> 00:21:57.320
it is a geospatial data
format akin to KML.

00:21:57.320 --> 00:22:00.770
For those in the GIS
community that know of KML,

00:22:00.770 --> 00:22:07.550
you can incorporate points and
lines and polygonal geometry

00:22:07.550 --> 00:22:09.090
to render on top of the map.

00:22:09.090 --> 00:22:12.040
So with this GeoJSON
layer and Deck.GL,

00:22:12.040 --> 00:22:16.510
you can supply the URL to
where every Deck.GL file is.

00:22:16.510 --> 00:22:19.940
And there are various
parameters that you can use

00:22:19.940 --> 00:22:21.530
to customize the experience.

00:22:21.530 --> 00:22:25.970
But I'll show you a link
to documentation on where

00:22:25.970 --> 00:22:27.500
you can dive deeper into that.

00:22:27.500 --> 00:22:30.400
But right now I want to
switch to a live demo.

00:22:35.680 --> 00:22:40.470
So in this demo, this is
showing earthquake data

00:22:40.470 --> 00:22:41.570
in the West Coast.

00:22:41.570 --> 00:22:43.200
And you're probably
saying, Travis,

00:22:43.200 --> 00:22:45.160
there's not a lot
of earthquakes.

00:22:45.160 --> 00:22:50.130
But as you zoom out,
you start to see that we

00:22:50.130 --> 00:22:54.500
have tens of thousands of--

00:22:54.500 --> 00:22:58.630
sorry, I actually clicked on
one of the hurricanes here.

00:22:58.630 --> 00:23:00.750
But we have tens of
thousands of points.

00:23:00.750 --> 00:23:02.830
And this is actually being
rendered interactively

00:23:02.830 --> 00:23:06.730
on client side, using Deck.GL.

00:23:06.730 --> 00:23:09.660
This demo-- just want to give
a shout-out to the great people

00:23:09.660 --> 00:23:10.560
over at Ubilabs.

00:23:10.560 --> 00:23:12.910
They are the ones that
created this demo.

00:23:12.910 --> 00:23:14.580
So thank you to them.

00:23:14.580 --> 00:23:17.327
And with that, I'll just
go back and transition back

00:23:17.327 --> 00:23:17.910
to the slides.

00:23:21.530 --> 00:23:25.120
So here is a short
link that can give you

00:23:25.120 --> 00:23:28.360
insight on how to incorporate
Deck.GL and Google Maps

00:23:28.360 --> 00:23:30.250
into your web applications.

00:23:30.250 --> 00:23:31.930
Remember, we [INAUDIBLE]
to this link.

00:23:37.023 --> 00:23:44.510
But this partnership was the
beginning of bringing WebGL

00:23:44.510 --> 00:23:49.040
to the JS Google Maps API.

00:23:49.040 --> 00:23:51.860
But in all honesty, we
really need your help here

00:23:51.860 --> 00:23:54.440
because we want to continue
our investment in WebGL.

00:23:54.440 --> 00:23:57.450
We want to offer more
to you as developers.

00:23:57.450 --> 00:23:59.450
So we want to call
for your ideas.

00:23:59.450 --> 00:24:03.920
We really want to
know how you feel

00:24:03.920 --> 00:24:06.350
WebGL can enable new
types of features

00:24:06.350 --> 00:24:10.190
that your users
can benefit from.

00:24:10.190 --> 00:24:12.840
So whether or not you're
looking at maps on google.com

00:24:12.840 --> 00:24:16.250
and you zoom down and you
see the spherical globe,

00:24:16.250 --> 00:24:19.770
or if you're looking at the 3D
imagery within maps.google.com,

00:24:19.770 --> 00:24:25.010
or if you're using maps, zooming
in, going into 3D imagery,

00:24:25.010 --> 00:24:27.610
and then transitioning
into Street View,

00:24:27.610 --> 00:24:30.710
I just really want you
to think outside the box.

00:24:30.710 --> 00:24:35.460
Think outside the confines that
we've had up to this point.

00:24:35.460 --> 00:24:43.490
And really think about ways that
WebGL can empower your users.

00:24:43.490 --> 00:24:45.940
So I'm going to pause a
little bit on this slide

00:24:45.940 --> 00:24:48.040
because this is an action
item that I really want

00:24:48.040 --> 00:24:50.710
the developers in this room and
those on Livestream and YouTube

00:24:50.710 --> 00:24:51.580
to take.

00:24:51.580 --> 00:24:53.710
I really want you to
go to this website.

00:24:53.710 --> 00:24:56.170
This will be live
for about a month.

00:24:56.170 --> 00:24:58.030
This will link you
to a form where

00:24:58.030 --> 00:25:01.690
you can start to tell
us some of the ideas

00:25:01.690 --> 00:25:05.320
you have on how we can actually
better use WebGL in our API

00:25:05.320 --> 00:25:08.020
offerings to you and
what types of things

00:25:08.020 --> 00:25:10.300
or classes of features
you would use them for.

00:25:10.300 --> 00:25:14.020
So please join us
and go on this link

00:25:14.020 --> 00:25:15.850
and provide us a
little insight on how

00:25:15.850 --> 00:25:17.920
you think we should bring
WebGL to the future.

00:25:20.890 --> 00:25:23.670
So we talked about
the web for a while.

00:25:23.670 --> 00:25:28.450
I want to transition over
to Android for a second.

00:25:28.450 --> 00:25:29.800
Congratulations.

00:25:29.800 --> 00:25:34.420
You, as of right now,
are my beta testers

00:25:34.420 --> 00:25:37.610
for the new Android Maps SDK.

00:25:37.610 --> 00:25:38.110
Yay.

00:25:38.110 --> 00:25:38.920
Congratulations.

00:25:38.920 --> 00:25:41.350
Thank you very much.

00:25:41.350 --> 00:25:44.200
But this SDK-- it's
a little different

00:25:44.200 --> 00:25:49.390
from how we've historically
delivered SDKs to you.

00:25:49.390 --> 00:25:51.130
So there is an action item here.

00:25:51.130 --> 00:25:54.745
We are moving our SDK out
of Google Mobile Services.

00:25:54.745 --> 00:25:57.370
And this would be a library that
you need to statically compile

00:25:57.370 --> 00:25:58.520
into your apps.

00:25:58.520 --> 00:26:01.600
So there is an action associated
with adopting and trying

00:26:01.600 --> 00:26:03.100
out this beta.

00:26:03.100 --> 00:26:05.170
But we've done it
for a few reasons.

00:26:05.170 --> 00:26:07.390
So little known fact--

00:26:07.390 --> 00:26:11.410
the Google Maps mobile app
and the Android Maps SDK

00:26:11.410 --> 00:26:14.050
that we offer in our
platform before now

00:26:14.050 --> 00:26:16.810
have been built on completely
different maps stacks.

00:26:16.810 --> 00:26:20.470
And this new SDK, we're
actually rectifying that.

00:26:20.470 --> 00:26:26.440
So now the Android Maps SDK
and the Google Maps mobile app

00:26:26.440 --> 00:26:28.900
are both built on
the same map stack.

00:26:28.900 --> 00:26:31.330
So this gives us our
path for delivering

00:26:31.330 --> 00:26:34.085
more of the goodness out of
the Google Maps mobile app

00:26:34.085 --> 00:26:35.710
and offering that to
you as developers.

00:26:38.620 --> 00:26:41.050
I mentioned this when I said
we were moving our SDK out

00:26:41.050 --> 00:26:43.000
of Google Mobile Services.

00:26:43.000 --> 00:26:45.490
But a reasoning behind
that is to allow

00:26:45.490 --> 00:26:48.430
us to have more frequent
virtual releases to you.

00:26:48.430 --> 00:26:52.180
So our future releases where
we invest and add new features,

00:26:52.180 --> 00:26:55.360
it will be outside of
Google Mobile Services,

00:26:55.360 --> 00:26:57.010
and it'll be a
static SDK that you

00:26:57.010 --> 00:26:58.720
need to compile into your app.

00:26:58.720 --> 00:27:01.000
But a benefit to
you in this process,

00:27:01.000 --> 00:27:04.000
outside of us having more
frequent releases to you,

00:27:04.000 --> 00:27:07.960
is that now you can test out the
latest version of the Android

00:27:07.960 --> 00:27:17.290
Maps SDK without pushing it
out to your full end user base.

00:27:17.290 --> 00:27:20.280
We also are thinking a little
bit about your users on this.

00:27:20.280 --> 00:27:23.370
So we want to save them money
when they're not on Wi-Fi.

00:27:23.370 --> 00:27:28.380
So the map data that's used to
render the maps with this SDK

00:27:28.380 --> 00:27:32.190
uses up to 60% less data.

00:27:32.190 --> 00:27:35.520
And because we went through
the process of refactoring

00:27:35.520 --> 00:27:39.870
a lot of our SDK so that we
were built on the same stack

00:27:39.870 --> 00:27:43.590
that the Google Maps mobile app
is built on, in that process

00:27:43.590 --> 00:27:46.690
we closed 65 external issues.

00:27:46.690 --> 00:27:48.270
You can look at
the issue tracker

00:27:48.270 --> 00:27:52.560
and see which
issues were handled.

00:27:55.230 --> 00:27:57.780
So I'm going to pause again.

00:27:57.780 --> 00:28:00.000
Here's a link to
a migration guide.

00:28:00.000 --> 00:28:01.300
We need your help.

00:28:01.300 --> 00:28:02.430
We need your help here.

00:28:02.430 --> 00:28:04.880
I repeat-- we need
your help here.

00:28:04.880 --> 00:28:09.510
We want you to go to this site,
read up on the migration docs,

00:28:09.510 --> 00:28:13.030
and actually test out this
SDK within your products.

00:28:13.030 --> 00:28:17.350
If you see bugs, let us know
so we can fix them quickly.

00:28:17.350 --> 00:28:20.730
But please, once again, go
to this migration guide.

00:28:20.730 --> 00:28:23.880
Read up on how to
incorporate the new maps

00:28:23.880 --> 00:28:25.860
SDK into your Android apps.

00:28:25.860 --> 00:28:27.510
And let us know how it goes.

00:28:30.470 --> 00:28:33.750
So we've circled through a
number of different things.

00:28:33.750 --> 00:28:36.780
But I want to talk
about the future.

00:28:36.780 --> 00:28:40.790
So in the past, we've
focused on building,

00:28:40.790 --> 00:28:43.580
and we'll continue to
grow various industries

00:28:43.580 --> 00:28:52.030
from the ridesharing industry to
travel to real estate and more.

00:28:52.030 --> 00:28:54.970
But now we need to
focus on the industries

00:28:54.970 --> 00:28:56.330
that you want to build.

00:28:56.330 --> 00:28:58.240
So let's build those
industries together.

00:28:58.240 --> 00:29:04.390
And you can start this
week by meeting this

00:29:04.390 --> 00:29:08.170
for our office hours
tomorrow at 11:30 AM

00:29:08.170 --> 00:29:10.530
and on Thursday at 12:30 PM.

00:29:10.530 --> 00:29:13.900
And you can also catch us in the
Sandbox with our cloud partners

00:29:13.900 --> 00:29:14.710
in the Cloud Dome.

00:29:17.290 --> 00:29:19.395
So with that, I'd like to
thank you for your time.

00:29:19.395 --> 00:29:21.520
For those in the audience,
thank you for your time.

00:29:21.520 --> 00:29:23.603
Those in Livestream and
those watching on YouTube,

00:29:23.603 --> 00:29:25.030
I appreciate every moment of it.

00:29:25.030 --> 00:29:25.750
Take care.

00:29:25.750 --> 00:29:29.700
[MUSIC PLAYING]

