WEBVTT
Kind: captions
Language: en

00:00:00.469 --> 00:00:02.510
ROBIN BENNETT: Users want
both beauty and utility

00:00:02.510 --> 00:00:03.609
from their watch faces.

00:00:03.609 --> 00:00:05.900
They want bite size information
combined with the style

00:00:05.900 --> 00:00:06.800
they love.

00:00:06.800 --> 00:00:09.710
If you have an app, adding
a complication data provider

00:00:09.710 --> 00:00:12.770
offers a simple way to
engage with users on Wear OS.

00:00:12.770 --> 00:00:15.350
Success means you now own a
piece of the screen real estate

00:00:15.350 --> 00:00:17.460
that the user wears all day.

00:00:17.460 --> 00:00:19.040
My name is Robin,
and I will walk you

00:00:19.040 --> 00:00:20.748
through the concept
and development steps

00:00:20.748 --> 00:00:23.210
behind a complication
data provider.

00:00:23.210 --> 00:00:26.000
One of the cool UI features
of Wear OS by Google

00:00:26.000 --> 00:00:27.560
is the watch face.

00:00:27.560 --> 00:00:29.780
Users can choose from those
shipped to their device,

00:00:29.780 --> 00:00:31.880
or from third party developers.

00:00:31.880 --> 00:00:35.120
This provides style,
but what about utility?

00:00:35.120 --> 00:00:37.070
In user research,
we found that users

00:00:37.070 --> 00:00:39.440
like to access bite size
information from their watch

00:00:39.440 --> 00:00:40.310
face.

00:00:40.310 --> 00:00:43.610
This can range from the date
to the current temperature.

00:00:43.610 --> 00:00:45.860
We call these
complications, a term used

00:00:45.860 --> 00:00:48.500
by traditional watchmaking.

00:00:48.500 --> 00:00:50.480
One way this can be
done is for each watch

00:00:50.480 --> 00:00:52.250
face to make their
own business stills

00:00:52.250 --> 00:00:54.710
and bespoke integration
with all the app data

00:00:54.710 --> 00:00:57.290
sources that the user
can possibly want.

00:00:57.290 --> 00:00:59.900
Clearly, this is not
a scalable solution.

00:00:59.900 --> 00:01:02.570
As a result, we created
the Complications API

00:01:02.570 --> 00:01:04.640
to connect watch faces
with all the app data

00:01:04.640 --> 00:01:06.080
sources on the watch.

00:01:06.080 --> 00:01:08.930
There's no need for business
and data format agreements.

00:01:08.930 --> 00:01:12.120
They all pass the data
according to an agreed format.

00:01:12.120 --> 00:01:14.210
With the Complications
API, the user

00:01:14.210 --> 00:01:16.700
can choose the watch face
that expresses their style,

00:01:16.700 --> 00:01:19.400
and the data they
find the most useful.

00:01:19.400 --> 00:01:21.260
If you have a
mobile application,

00:01:21.260 --> 00:01:23.030
think about what is
the one piece of data

00:01:23.030 --> 00:01:26.210
the user would most like
to know, and focus on that.

00:01:26.210 --> 00:01:29.060
The next step is to see how
that data can be expressed

00:01:29.060 --> 00:01:30.590
in the different types.

00:01:30.590 --> 00:01:33.740
With Wear OS, we provide a
large variety of choices,

00:01:33.740 --> 00:01:36.320
from short text to large image.

00:01:36.320 --> 00:01:39.110
Try to support as many
types as you reasonably can.

00:01:39.110 --> 00:01:42.350
This will ensure the wider
support from watch faces.

00:01:42.350 --> 00:01:44.630
Now that you have decided
what data items to show,

00:01:44.630 --> 00:01:47.490
and how they should be
expressed, it's time to code.

00:01:47.490 --> 00:01:50.240
To get started, you can
follow the step-by-step code

00:01:50.240 --> 00:01:51.830
lab listed here,
and I will highlight

00:01:51.830 --> 00:01:54.620
some of the key components
in this code lab.

00:01:54.620 --> 00:01:57.200
At its core, a
complication data provider

00:01:57.200 --> 00:02:00.800
is a service that extends
complication provider service.

00:02:00.800 --> 00:02:03.770
Once the user has selected
your complication data source,

00:02:03.770 --> 00:02:06.680
Wear OS will bind to the
service and request data

00:02:06.680 --> 00:02:08.120
when it is needed.

00:02:08.120 --> 00:02:11.070
There are three methods I
would like to highlight.

00:02:11.070 --> 00:02:13.680
First, the
onComplicationUpdate method.

00:02:13.680 --> 00:02:16.610
This is called every time the
system requests complication

00:02:16.610 --> 00:02:17.600
data.

00:02:17.600 --> 00:02:21.020
Since the same data provider
can supply multiple data types,

00:02:21.020 --> 00:02:23.210
pay particular attention
to which type of data

00:02:23.210 --> 00:02:26.030
is requested before returning.

00:02:26.030 --> 00:02:28.220
The second and third
methods are a pair.

00:02:28.220 --> 00:02:31.970
onComplicationActivated, and
onComplicationDeactivated.

00:02:31.970 --> 00:02:34.850
These methods are optional,
and are usually not used.

00:02:34.850 --> 00:02:37.790
They are called when a watch
starts or stops displaying data

00:02:37.790 --> 00:02:39.410
from your complication.

00:02:39.410 --> 00:02:41.930
If there is data being stored
for a particular instance

00:02:41.930 --> 00:02:44.750
of a complication, it can
be set up in activated

00:02:44.750 --> 00:02:47.120
and cleared in deactivated.

00:02:47.120 --> 00:02:49.760
In addition to the
complication provider service,

00:02:49.760 --> 00:02:51.900
two metadata tags in
the Android manifest

00:02:51.900 --> 00:02:53.510
are worth highlighting.

00:02:53.510 --> 00:02:55.910
The first tells the system
which complication data

00:02:55.910 --> 00:02:57.980
types your provider supports.

00:02:57.980 --> 00:03:00.800
The second tells the system how
often the complication should

00:03:00.800 --> 00:03:02.420
be refreshed.

00:03:02.420 --> 00:03:04.140
Two things to note here.

00:03:04.140 --> 00:03:08.120
First, although the attribute
is called update period seconds,

00:03:08.120 --> 00:03:10.940
think of this period in minutes,
and the longer the better.

00:03:10.940 --> 00:03:13.190
This is for battery
conservation.

00:03:13.190 --> 00:03:16.550
Second, if your service
receives updates via push,

00:03:16.550 --> 00:03:18.950
you can set the update to
trigger at irregular periods

00:03:18.950 --> 00:03:20.960
by setting this
attribute to zero,

00:03:20.960 --> 00:03:23.930
and instead trigger updates
using provider update

00:03:23.930 --> 00:03:25.370
requester.

00:03:25.370 --> 00:03:29.270
You can find full details of how
this is done in the code lab.

00:03:29.270 --> 00:03:31.040
If you are immobile
app developer,

00:03:31.040 --> 00:03:33.050
creating a complication
data provider is

00:03:33.050 --> 00:03:34.850
one of the simplest
and meaningful ways

00:03:34.850 --> 00:03:37.460
you can support your
users on Wear OS.

00:03:37.460 --> 00:03:38.750
Give it a try.

00:03:38.750 --> 00:03:42.520
For more details, check
out the code lab mentioned.

