WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.062
[MUSIC PLAYING]

00:00:04.062 --> 00:00:05.270
WESLEY CHUN: Hey, developers.

00:00:05.270 --> 00:00:07.000
Welcome to the G Suite Dev Show.

00:00:07.000 --> 00:00:08.060
I'm Wesley Chun.

00:00:08.060 --> 00:00:10.100
Before we get started,
I'm excited to announce

00:00:10.100 --> 00:00:12.350
you'll be seeing more of my
colleagues in future episodes

00:00:12.350 --> 00:00:14.266
as our team has grown,
and I'm looking forward

00:00:14.266 --> 00:00:15.770
to learning from them.

00:00:15.770 --> 00:00:17.150
Now, what will I be doing?

00:00:17.150 --> 00:00:19.880
In addition to G Suite, I'll be
spending more time on the Cloud

00:00:19.880 --> 00:00:21.380
Platform side of the house.

00:00:21.380 --> 00:00:23.930
As such, I thought it would
be fitting to combine features

00:00:23.930 --> 00:00:26.090
from G Suite as well as GCP.

00:00:26.090 --> 00:00:28.310
Before we get started,
you know how sometimes,

00:00:28.310 --> 00:00:31.340
when you get something done, you
stop as soon as it's working?

00:00:31.340 --> 00:00:32.630
Take these stairs here.

00:00:32.630 --> 00:00:35.360
We could quit now
because it works, right?

00:00:35.360 --> 00:00:38.480
Well, I'm here to argue that if
you just finish the rest of it,

00:00:38.480 --> 00:00:40.370
it'll look more
appealing visually.

00:00:40.370 --> 00:00:43.610
And that's the theme for today's
show, completing that last mile

00:00:43.610 --> 00:00:45.910
and literally making
things more presentable.

00:00:45.910 --> 00:00:48.410
We're going to walk through an
App Script app that takes you

00:00:48.410 --> 00:00:50.720
from big data analysis
with BigQuery,

00:00:50.720 --> 00:00:52.820
all the way to a Google
Slides presentation,

00:00:52.820 --> 00:00:54.682
leveraging Google
Sheets in between.

00:00:54.682 --> 00:00:56.390
We'll link you to the
code LEP at the end

00:00:56.390 --> 00:00:58.200
so you can build it yourself.

00:00:58.200 --> 00:01:00.120
Now, the motivation
for this app?

00:01:00.120 --> 00:01:03.890
I was inspired by three samples
our team has already created.

00:01:03.890 --> 00:01:07.370
First is the Apps Script
BigQuery sample in our docs.

00:01:07.370 --> 00:01:10.160
Second is the sample app
in the generating slides

00:01:10.160 --> 00:01:11.910
from spreadsheet data video.

00:01:11.910 --> 00:01:15.710
And finally, the third was
the Google Slides API code lab

00:01:15.710 --> 00:01:18.620
app, which uses BigQuery to
analyze open source license

00:01:18.620 --> 00:01:20.060
data.

00:01:20.060 --> 00:01:21.020
Now, first thing.

00:01:21.020 --> 00:01:22.190
What's Apps Script?

00:01:22.190 --> 00:01:25.010
Well, it's a customized
JavaScript serverless runtime

00:01:25.010 --> 00:01:28.580
for G Suite automation,
extension, and integration.

00:01:28.580 --> 00:01:30.890
More importantly, how do
you access Google and other

00:01:30.890 --> 00:01:32.320
services with it?

00:01:32.320 --> 00:01:34.400
Well, at this time,
there are two ways--

00:01:34.400 --> 00:01:36.890
built-in and advanced services.

00:01:36.890 --> 00:01:39.800
A built-in service is one in
which a native Apps Script

00:01:39.800 --> 00:01:42.230
object provides
API functionality.

00:01:42.230 --> 00:01:44.240
In our app, we'll use
both the Google Sheets

00:01:44.240 --> 00:01:46.730
and Slides built-in services.

00:01:46.730 --> 00:01:49.880
And advanced services, where
there is no native Apps Script

00:01:49.880 --> 00:01:51.050
object to use.

00:01:51.050 --> 00:01:56.030
Instead, these rely on
the HTTP-based REST APIs,

00:01:56.030 --> 00:01:57.740
meaning an advance
service is just

00:01:57.740 --> 00:02:00.290
a thin wrapper around that API.

00:02:00.290 --> 00:02:02.870
Our use of BigQuery
is exactly that.

00:02:02.870 --> 00:02:05.180
There is no BigQuery
service, but there

00:02:05.180 --> 00:02:09.199
is an API and an advanced
service that uses it.

00:02:09.199 --> 00:02:11.660
In some cases, such as
for Sheets and Slides,

00:02:11.660 --> 00:02:14.540
both built-in and
advanced services exist.

00:02:14.540 --> 00:02:16.200
So which do you pick?

00:02:16.200 --> 00:02:19.010
Well, generally, APIs
operate at a lower level.

00:02:19.010 --> 00:02:22.550
So a built-in service may
not have all API features.

00:02:22.550 --> 00:02:24.470
On the other hand,
built-in services

00:02:24.470 --> 00:02:27.800
operate at a higher level,
and often, a built-in service

00:02:27.800 --> 00:02:30.470
function is easier to
use, that would otherwise

00:02:30.470 --> 00:02:34.250
require multiple advanced
service or API calls.

00:02:34.250 --> 00:02:35.980
Now that we got
that squared away,

00:02:35.980 --> 00:02:40.910
let's begin with BigQuery,
GCP's big data analysis tool.

00:02:40.910 --> 00:02:43.430
I mentioned I was inspired
by our Apps Script BigQuery

00:02:43.430 --> 00:02:44.180
sample.

00:02:44.180 --> 00:02:47.690
Well, it's an app that finds
the top 300 long words, which

00:02:47.690 --> 00:02:50.780
means longer than 10 characters,
in Shakespeare's works.

00:02:50.780 --> 00:02:54.200
It's a cool query, but I'm just
interested in the top 10 most

00:02:54.200 --> 00:02:56.060
common words in Shakespeare.

00:02:56.060 --> 00:02:58.625
So let's switch to
this query instead.

00:02:58.625 --> 00:03:00.500
All right, we're going
to dive into the code,

00:03:00.500 --> 00:03:03.450
and you'll see where
the query comes in.

00:03:03.450 --> 00:03:05.730
At the top, we set
the name of the query,

00:03:05.730 --> 00:03:08.670
which will also be the name of
the spreadsheet and slide deck.

00:03:08.670 --> 00:03:12.180
Next is a project ID, which
is required by BigQuery.

00:03:12.180 --> 00:03:15.090
After you create your project
in the developer's console,

00:03:15.090 --> 00:03:16.800
click on the Settings
three-dot menu

00:03:16.800 --> 00:03:19.350
that you see up in the
corner next to your avatar.

00:03:19.350 --> 00:03:21.870
Select Project
settings, and then copy

00:03:21.870 --> 00:03:24.720
that project ID string to
the project ID variable

00:03:24.720 --> 00:03:26.280
you see in the code.

00:03:26.280 --> 00:03:29.280
The "if" statement is there to
stop you if you don't have this

00:03:29.280 --> 00:03:30.600
set.

00:03:30.600 --> 00:03:33.750
The only function in this
first version is runQuery.

00:03:33.750 --> 00:03:36.360
It starts with the query
that we picked earlier.

00:03:36.360 --> 00:03:38.970
The last few lines kick
off the job in BigQuery.

00:03:38.970 --> 00:03:43.060
And the job ID is used to
help collate the results.

00:03:43.060 --> 00:03:45.060
Now, the next section of
code waits for BigQuery

00:03:45.060 --> 00:03:47.860
to finish using the
exponential backoff technique,

00:03:47.860 --> 00:03:51.030
awaiting a bit longer if
results aren't in yet.

00:03:51.030 --> 00:03:53.790
Well, the results are ready
once the job complete flag

00:03:53.790 --> 00:03:55.350
goes true.

00:03:55.350 --> 00:03:57.960
Now it's time to fetch all
that data from BigQuery,

00:03:57.960 --> 00:04:01.500
appending chunks of page
at a time, or flag an error

00:04:01.500 --> 00:04:03.660
in the logs if
nothing comes back.

00:04:03.660 --> 00:04:05.770
At this point, we're
holding onto a lot of data,

00:04:05.770 --> 00:04:07.350
so you need somewhere to put it.

00:04:07.350 --> 00:04:10.830
Now, you could display it to
the screen or put in a database

00:04:10.830 --> 00:04:12.190
and be done with it.

00:04:12.190 --> 00:04:16.050
But to promote G Suite with
GCP and to make it more visual,

00:04:16.050 --> 00:04:18.240
it's better to put
in a sheet, right?

00:04:18.240 --> 00:04:19.920
Well, in this part
of the code, we

00:04:19.920 --> 00:04:21.690
create a new sheet
with the query name

00:04:21.690 --> 00:04:24.000
and then add the first
row headers, first

00:04:24.000 --> 00:04:26.220
converting them to uppercase.

00:04:26.220 --> 00:04:28.770
The results from BigQuery
isn't formatted in a way

00:04:28.770 --> 00:04:31.500
where we can just push
it directly into a sheet.

00:04:31.500 --> 00:04:35.340
Instead, we need to put the data
into a more normal 2D array.

00:04:35.340 --> 00:04:37.560
By the way, massaging
the data into a format

00:04:37.560 --> 00:04:39.720
your app can better
process is generally

00:04:39.720 --> 00:04:42.630
referred to as ETL,
which stands for extract,

00:04:42.630 --> 00:04:44.430
transform, and load.

00:04:44.430 --> 00:04:46.930
Once the data has been
added to the 2D array,

00:04:46.930 --> 00:04:49.320
we can put those
values into the sheet.

00:04:49.320 --> 00:04:51.150
Got to start at
row two so we don't

00:04:51.150 --> 00:04:53.430
overwrite our headers, right?

00:04:53.430 --> 00:04:54.090
OK.

00:04:54.090 --> 00:04:56.606
So now that our data
is in a sheet, cool!

00:04:56.606 --> 00:04:58.980
Now I know what the most common
words in Shakespeare are,

00:04:58.980 --> 00:05:01.140
and I didn't need to
count them up myself.

00:05:01.140 --> 00:05:03.750
Certainly better than being
in a database somewhere.

00:05:03.750 --> 00:05:05.730
Now, it looks great,
but it would even

00:05:05.730 --> 00:05:07.710
be more cool if we
could visualize it

00:05:07.710 --> 00:05:10.820
just a tiny bit more,
say with a chart.

00:05:10.820 --> 00:05:11.480
OK.

00:05:11.480 --> 00:05:14.070
Here's the new function that
we'll create for our chart.

00:05:14.070 --> 00:05:16.590
It takes a spreadsheet object
and creates a columnar chart

00:05:16.590 --> 00:05:20.370
based on the data in
cell range A2 to B11.

00:05:20.370 --> 00:05:22.050
It then inserts
the chart starting

00:05:22.050 --> 00:05:26.520
on row 5, column 5, which is E.
Now, one tweak we need to make

00:05:26.520 --> 00:05:28.740
is to return the
spreadsheet from runQuery.

00:05:28.740 --> 00:05:31.900
So we need to add this
as the last line there.

00:05:31.900 --> 00:05:34.110
Now the last step is to
create a new driver app that

00:05:34.110 --> 00:05:35.740
calls both of these functions.

00:05:35.740 --> 00:05:38.850
The first to query and return
the newly created sheet,

00:05:38.850 --> 00:05:41.880
and then to add a chart to
it by passing it to create

00:05:41.880 --> 00:05:43.710
column chart.

00:05:43.710 --> 00:05:45.420
When you run the
modified app, you

00:05:45.420 --> 00:05:47.610
get the data, plus
this cool chart!

00:05:47.610 --> 00:05:49.830
Much more visually
appealing, right?

00:05:49.830 --> 00:05:53.340
Now you have an idea of how
the Google Sheets and its API

00:05:53.340 --> 00:05:55.110
reduces manual labor.

00:05:55.110 --> 00:05:56.670
By bringing in some
automation, you

00:05:56.670 --> 00:05:58.740
can make better
use of your time.

00:05:58.740 --> 00:06:00.510
OK, next step.

00:06:00.510 --> 00:06:03.180
Now you could send
this to management,

00:06:03.180 --> 00:06:06.330
but can I make the result
even more presentable?

00:06:06.330 --> 00:06:08.460
Like with a presentation?

00:06:08.460 --> 00:06:09.880
Well, the answer is yes.

00:06:09.880 --> 00:06:13.060
So we'll use the Slides
built-in service to do that.

00:06:13.060 --> 00:06:15.630
Let's create a third function
that takes a Sheet and Chart

00:06:15.630 --> 00:06:17.850
objects and creates
a new slide deck,

00:06:17.850 --> 00:06:20.760
filling in the title and
subtitle on the default title

00:06:20.760 --> 00:06:23.850
slide that you get with
all new presentations.

00:06:23.850 --> 00:06:27.600
Now, add a blank slide
for the spreadsheet data.

00:06:27.600 --> 00:06:30.390
Much like how we copied the
resulting data from BigQuery

00:06:30.390 --> 00:06:32.010
into Sheets, we
need to do something

00:06:32.010 --> 00:06:34.560
similar to get that data
from Sheets into Slides.

00:06:34.560 --> 00:06:36.070
And don't forget the headers.

00:06:36.070 --> 00:06:39.030
The code you see here reads
all of the data from the sheet,

00:06:39.030 --> 00:06:40.890
creates a new table
on the new slide,

00:06:40.890 --> 00:06:43.920
and then writes all
that data into it.

00:06:43.920 --> 00:06:46.080
Now, let's add one
more blank slide,

00:06:46.080 --> 00:06:48.750
then insert the
spreadsheet chart into it.

00:06:48.750 --> 00:06:50.890
Pretty straightforward.

00:06:50.890 --> 00:06:53.760
The final step is to update our
driver app to call all three

00:06:53.760 --> 00:06:55.380
of these utility functions.

00:06:55.380 --> 00:06:57.330
Don't forget to
update Create Column

00:06:57.330 --> 00:07:00.060
Chart from the previous
step to return the charts,

00:07:00.060 --> 00:07:03.210
so we could pass it to
Create Slide Presentation.

00:07:03.210 --> 00:07:06.150
Now check out the beautiful
slide deck we have here.

00:07:06.150 --> 00:07:08.310
You've now completed
that final mile,

00:07:08.310 --> 00:07:11.340
going from big data analysis
all the way to a slide

00:07:11.340 --> 00:07:13.050
that you can deliver
to management.

00:07:13.050 --> 00:07:14.760
And best of all,
without spinning up

00:07:14.760 --> 00:07:17.074
any server resources yourself.

00:07:17.074 --> 00:07:18.990
The goal today was to
show that you've already

00:07:18.990 --> 00:07:22.560
done the 80% hard
work, but the last 20%

00:07:22.560 --> 00:07:25.170
is to put frosting on your cake.

00:07:25.170 --> 00:07:26.310
So what's next?

00:07:26.310 --> 00:07:28.530
Well, there's many
directions for you to go.

00:07:28.530 --> 00:07:30.870
To build this app yourself
and to see all the code,

00:07:30.870 --> 00:07:33.530
we invite you to do the Code Lab
and take a look at our GitHub

00:07:33.530 --> 00:07:34.830
repo.

00:07:34.830 --> 00:07:37.050
This app was featured
in our serverless talk

00:07:37.050 --> 00:07:39.300
at the 2018 Cloud
Next conference.

00:07:39.300 --> 00:07:41.880
Check out the talk to find out
more about interoperability

00:07:41.880 --> 00:07:44.610
between GCP and G Suite.

00:07:44.610 --> 00:07:47.580
Hint, in the near future, you
won't need the BigQuery advance

00:07:47.580 --> 00:07:50.610
service anymore, as there
is now a BigQuery connector

00:07:50.610 --> 00:07:51.600
feature in Sheets.

00:07:51.600 --> 00:07:53.670
Also announced at
Cloud Next, you

00:07:53.670 --> 00:07:56.880
can edit your BigQuery
query directly from Sheets.

00:07:56.880 --> 00:07:58.250
Cool, right?

00:07:58.250 --> 00:07:59.400
And that's it for now.

00:07:59.400 --> 00:08:00.930
You've done the
hard work already,

00:08:00.930 --> 00:08:03.390
but need to justify
your work to management.

00:08:03.390 --> 00:08:05.100
So we hope the
sample app inspires

00:08:05.100 --> 00:08:08.310
you to code that final mile
in all of your projects,

00:08:08.310 --> 00:08:10.830
with GCP and G Suite dev tools.

00:08:10.830 --> 00:08:14.160
This is Wesley Chun, and we'll
see you upstairs in the suite.

00:08:14.160 --> 00:08:17.510
[MUSIC PLAYING]

