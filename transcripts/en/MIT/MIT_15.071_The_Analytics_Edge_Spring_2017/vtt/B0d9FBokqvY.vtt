WEBVTT
Kind: captions
Language: en

00:00:04.500 --> 00:00:06.390
Remember that in
our previous video,

00:00:06.390 --> 00:00:11.000
we created four new variables,
HighSodium, HighFat, HighCarbs,

00:00:11.000 --> 00:00:12.850
and HighProtein.

00:00:12.850 --> 00:00:15.160
Now in this video, we
will try to understand

00:00:15.160 --> 00:00:17.850
our data and the relationships
between our variables

00:00:17.850 --> 00:00:21.770
better, using the table
and tapply functions.

00:00:21.770 --> 00:00:24.620
To figure out how many foods
have higher sodium level

00:00:24.620 --> 00:00:28.010
than average, we want to look
at the HighSodium variable

00:00:28.010 --> 00:00:31.390
and count the foods
that have values 1.

00:00:31.390 --> 00:00:34.020
We can do this using
the table function,

00:00:34.020 --> 00:00:38.960
and give it as an input
the HighSodium vector.

00:00:38.960 --> 00:00:42.770
Now pressing Enter, we obtain
the following information.

00:00:42.770 --> 00:00:44.520
Most of the foods
in our data set,

00:00:44.520 --> 00:00:50.000
and precisely 4,800 of them,
have lower sodium than average,

00:00:50.000 --> 00:00:53.570
and we have 2090 foods
that have higher sodium

00:00:53.570 --> 00:00:55.570
content than average.

00:00:55.570 --> 00:00:57.150
Now let's see how
many foods have

00:00:57.150 --> 00:00:59.770
both high sodium and high fat.

00:00:59.770 --> 00:01:02.570
Well, to do this we can
also use the table function,

00:01:02.570 --> 00:01:05.319
but instead of giving
it one input, now

00:01:05.319 --> 00:01:06.930
we can give it two inputs.

00:01:06.930 --> 00:01:09.760
So let's go back
using the Up arrow,

00:01:09.760 --> 00:01:12.690
and now have the first
input being the HighSodium

00:01:12.690 --> 00:01:18.789
vector and the second input
being the HighFat vector.

00:01:18.789 --> 00:01:21.289
And we obtain the
following table.

00:01:21.289 --> 00:01:24.880
The rows belong to the first
input, which is HighSodium,

00:01:24.880 --> 00:01:27.510
and the columns correspond
to the second input,

00:01:27.510 --> 00:01:29.200
which is HighFat.

00:01:29.200 --> 00:01:31.180
So from the table
we see that we have

00:01:31.180 --> 00:01:36.360
3,529 foods with low
sodium and low fat,

00:01:36.360 --> 00:01:43.560
1,355 foods with low
sodium and high fat, 1,378

00:01:43.560 --> 00:01:46.650
foods with high
sodium but low fat,

00:01:46.650 --> 00:01:52.750
and finally 712 foods with
both high sodium and high fat.

00:01:52.750 --> 00:01:56.370
Now, what if we want to compute
the average amount of iron

00:01:56.370 --> 00:01:59.110
sorted by high and low protein?

00:01:59.110 --> 00:02:02.470
Well, to do this we can
use the tapply function.

00:02:02.470 --> 00:02:04.670
Let us have a little
refresher on how

00:02:04.670 --> 00:02:07.730
the tapply function works.

00:02:07.730 --> 00:02:10.990
The tapply function takes
three arguments, and groups

00:02:10.990 --> 00:02:13.870
the first argument according
to the second argument,

00:02:13.870 --> 00:02:16.230
and then applies argument three.

00:02:16.230 --> 00:02:18.980
For instance, we wanted to
compute the average amount

00:02:18.980 --> 00:02:22.300
of iron sorted by
high and low protein.

00:02:22.300 --> 00:02:24.500
In this case, the
first argument is

00:02:24.500 --> 00:02:26.130
whatever we are
trying to analyze,

00:02:26.130 --> 00:02:28.750
which is the Iron vector,
and we are sorting it

00:02:28.750 --> 00:02:31.210
according to the vector
HighProtein, which

00:02:31.210 --> 00:02:32.710
is our second argument.

00:02:32.710 --> 00:02:34.770
And finally we apply
the mean function

00:02:34.770 --> 00:02:37.360
in R on the sorted Iron values.

00:02:37.360 --> 00:02:38.960
And we should not
forget to remove

00:02:38.960 --> 00:02:41.270
the nonavailable entries.

00:02:41.270 --> 00:02:44.090
So what does tapply do exactly?

00:02:44.090 --> 00:02:45.990
Suppose that we have
the following data

00:02:45.990 --> 00:02:48.530
frame with the foods
one through six,

00:02:48.530 --> 00:02:51.260
along with information
about their Iron levels

00:02:51.260 --> 00:02:55.800
and their values of HighProtein
that we just added earlier.

00:02:55.800 --> 00:02:58.230
The first step is
grouping the Iron data

00:02:58.230 --> 00:03:00.690
according to the
values of HighProtein.

00:03:00.690 --> 00:03:04.570
So, first group, all the
foods that have HighProtein

00:03:04.570 --> 00:03:07.440
equal 1, and that would
be food number two

00:03:07.440 --> 00:03:10.930
with 12.8 milligrams of
iron, food number three

00:03:10.930 --> 00:03:14.930
with 1.44 milligrams of
iron, and food number six

00:03:14.930 --> 00:03:18.060
with 2.29 milligrams of iron.

00:03:18.060 --> 00:03:21.000
Then we group the remaining
foods that have protein levels

00:03:21.000 --> 00:03:23.140
below average, and
this corresponds

00:03:23.140 --> 00:03:27.420
to food one, food
four, and food five.

00:03:27.420 --> 00:03:31.270
Then we compute the mean of
Iron level for each group.

00:03:31.270 --> 00:03:34.100
In this case, the mean of the
group with high protein levels

00:03:34.100 --> 00:03:38.210
is 5.51, and the mean of the
group with low protein levels

00:03:38.210 --> 00:03:40.120
is 1.72.

00:03:40.120 --> 00:03:43.540
And this is the result
of the tapply function.

00:03:43.540 --> 00:03:45.640
Now let's go back to
R and have a hands

00:03:45.640 --> 00:03:49.829
on practice on how to
use the tapply function.

00:03:49.829 --> 00:03:51.460
So let's compute
the average amount

00:03:51.460 --> 00:03:53.980
of iron sorted by
protein levels.

00:03:53.980 --> 00:03:57.550
So we're going to type tapply,
and then the first argument

00:03:57.550 --> 00:04:00.820
is the Iron vector which
we are trying to analyze.

00:04:00.820 --> 00:04:04.470
And we are sorting it according
to the HighProtein vector,

00:04:04.470 --> 00:04:06.710
so this is our second argument.

00:04:06.710 --> 00:04:09.050
And then the mean
statistic is used,

00:04:09.050 --> 00:04:10.700
because we're
trying to calculate

00:04:10.700 --> 00:04:13.250
the average level of Iron.

00:04:13.250 --> 00:04:17.220
And do not forget to remove the
non available entries by typing

00:04:17.220 --> 00:04:17.720
na.rm=TRUE.

00:04:20.820 --> 00:04:22.720
And here's the result.

00:04:22.720 --> 00:04:25.260
Foods with low
protein content have

00:04:25.260 --> 00:04:28.640
on average 2.55
milligrams of iron

00:04:28.640 --> 00:04:30.860
and foods with high
protein content

00:04:30.860 --> 00:04:34.690
have on average 3.2
milligrams of iron.

00:04:34.690 --> 00:04:37.740
Now how about the maximum
level of vitamin C

00:04:37.740 --> 00:04:40.350
in foods with high
and low carbs?

00:04:40.350 --> 00:04:42.580
Again, we're going to use
the tapply function, so

00:04:42.580 --> 00:04:45.860
use the Up arrow to go back
to the previous command,

00:04:45.860 --> 00:04:49.360
but now we're trying to
analyze the VitaminC vector.

00:04:49.360 --> 00:04:53.630
So this is our first argument,
And we are sorting it

00:04:53.630 --> 00:04:57.020
according to high and low
carbs, so the second argument

00:04:57.020 --> 00:04:59.000
is the vector HighCarbs.

00:04:59.000 --> 00:05:00.990
And instead of the mean,
we're applying here

00:05:00.990 --> 00:05:05.390
the max statistic, and
we obtain the following.

00:05:05.390 --> 00:05:09.980
The maximum vitamin C level,
which is 2,400 milligrams

00:05:09.980 --> 00:05:14.430
is actually present in a
food that is high in carbs.

00:05:14.430 --> 00:05:16.970
Well, is it true that foods
that are high in carbs

00:05:16.970 --> 00:05:19.760
have generally high
vitamin C content?

00:05:19.760 --> 00:05:21.860
Well, to see if this
is the case, now

00:05:21.860 --> 00:05:24.530
we're going to go back
to our tapply function,

00:05:24.530 --> 00:05:26.640
and instead of the
max statistic we're

00:05:26.640 --> 00:05:29.090
going to use the
summary function.

00:05:29.090 --> 00:05:32.350
We obtain the following
two sets of information.

00:05:32.350 --> 00:05:36.909
The first set corresponds to
the foods with low carb content,

00:05:36.909 --> 00:05:39.380
and the second set of
information corresponds

00:05:39.380 --> 00:05:43.310
to foods with higher carb
content than average.

00:05:43.310 --> 00:05:45.890
Now the statistical information
that the summary function

00:05:45.890 --> 00:05:49.580
gives us pertains to
the vitamin C levels.

00:05:49.580 --> 00:05:54.010
This means that we have
on average 6.36 milligrams

00:05:54.010 --> 00:05:57.600
of vitamin C in foods
with low carb content,

00:05:57.600 --> 00:06:02.230
and on average 16.31 milligrams
of vitamin C in foods

00:06:02.230 --> 00:06:04.240
with high carb content.

00:06:04.240 --> 00:06:07.170
So, it does seem
like a general trend.

00:06:07.170 --> 00:06:11.350
Foods with high carb content are
on average richer in vitamin C

00:06:11.350 --> 00:06:14.370
compared to foods
with low carb content.

00:06:14.370 --> 00:06:17.410
Now we reach the end of
our first recitation.

00:06:17.410 --> 00:06:20.850
I hope this was a good exercise
to familiarize yourself better

00:06:20.850 --> 00:06:24.470
with R, and learn some
fun facts about nutrition.

00:06:24.470 --> 00:06:26.310
Stay healthy.

