WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.530
With all this background
on the event-driven model,

00:00:02.530 --> 00:00:05.570
we will now talk about the Flash paper.

00:00:05.570 --> 00:00:10.490
Flash is an event-driven webserver that
follows the AMPED model, so basically it

00:00:10.490 --> 00:00:15.540
has asymmetric helper processes to
deal with the blocking guy operations.

00:00:15.540 --> 00:00:19.460
In the discussion so far, we really
described the architecture of Flash.

00:00:19.460 --> 00:00:23.940
So it uses helper processes for
blocking I/O operations.

00:00:23.940 --> 00:00:27.370
And then everything else is implemented
as an event dispatcher with

00:00:27.370 --> 00:00:31.950
handlers performing different
portions of the web servicing tasks.

00:00:31.950 --> 00:00:36.350
Given that we are talking about a web
server, and this is the old fashioned

00:00:36.350 --> 00:00:42.950
Web 1.0 technology where basically the
web server just returns static files.

00:00:42.950 --> 00:00:47.020
The blocking I operations that
are happening an the system are really

00:00:47.020 --> 00:00:52.720
just disk reads, so the server just
reads files that the client requests.

00:00:52.720 --> 00:00:57.293
The communication from the helpers to
the event dispatcher is performed via

00:00:57.293 --> 00:00:57.800
pipes.

00:00:57.800 --> 00:01:03.094
The helper reads the file in memory via
the mmap call, and then the dispatcher

00:01:03.094 --> 00:01:08.520
checks the in-operation mincore,
if the pages of the file are in memory.

00:01:08.520 --> 00:01:11.975
And it then uses this information
to decide if it should just

00:01:11.975 --> 00:01:17.035
call one of the local handlers, or if it
should pass the request to the helper.

00:01:17.035 --> 00:01:21.750
As long as the file is in memory,
reading it won't result in a blocking

00:01:21.750 --> 00:01:26.380
I/O operation, and so passing it to
the local handlers is perfectly okay.

00:01:26.380 --> 00:01:32.020
Although this is an extra check that has
to be performed before we read any file,

00:01:32.020 --> 00:01:36.790
it actually results in big savings
because it prevents the full process

00:01:36.790 --> 00:01:42.240
from being blocked if it turns out that
a blocking I/O operation is necessary.

00:01:42.240 --> 00:01:45.460
Now we will outline some additional
detail regarding some of

00:01:45.460 --> 00:01:47.890
the optimization that Flash applies.

00:01:47.890 --> 00:01:51.610
And this will help us later understand
some of the performance comparisons.

00:01:51.610 --> 00:01:54.840
The important thing is that these
optimizations are really relevant to any

00:01:54.840 --> 00:01:55.380
web server.

00:01:56.400 --> 00:01:56.900
First of all,

00:01:56.900 --> 00:02:01.680
Flash performs application-level
caching at multiple levels.

00:02:01.680 --> 00:02:05.500
And it does this on both data and
computation.

00:02:05.500 --> 00:02:08.990
What we mean by this is,
it's common to cache files.

00:02:08.990 --> 00:02:10.940
This is what we call data caching.

00:02:10.940 --> 00:02:14.375
However, in some cases it makes
sense to cache computation.

00:02:14.375 --> 00:02:18.550
So in the case of the web server, the
requests are requests for some files.

00:02:19.630 --> 00:02:22.070
These files need to be
repeatedly looked up.

00:02:22.070 --> 00:02:25.510
So you need to find the file,
traverse the directory,

00:02:25.510 --> 00:02:28.080
look up some of the directory
data structures.

00:02:28.080 --> 00:02:31.030
That processing will
compute some results.

00:02:31.030 --> 00:02:34.409
So some location,
some pathname for the file.

00:02:34.409 --> 00:02:36.260
And we will just cache that.

00:02:36.260 --> 00:02:38.220
We don't have to recompute that and

00:02:38.220 --> 00:02:43.130
look up the same information next time
a request for that same file comes in.

00:02:43.130 --> 00:02:46.149
Similarly in the context
of web processing,

00:02:46.149 --> 00:02:50.519
the HTTP header that files have
that are returned to the browser,

00:02:50.519 --> 00:02:53.785
it's really going to
depend on the file itself.

00:02:53.785 --> 00:02:58.147
So a lot of the fields in there are file
dependent given that the file doesn't

00:02:58.147 --> 00:02:58.950
change.

00:02:58.950 --> 00:03:01.640
The header doesn't have to change so
this is another type of

00:03:01.640 --> 00:03:06.420
application level caching that we
can perform and Flash does this.

00:03:06.420 --> 00:03:10.170
Also Flash does some optimizations
that take advantage of the networking

00:03:10.170 --> 00:03:13.140
hardware and the network interface card.

00:03:13.140 --> 00:03:16.240
For instance all of the data
structures are aligned so

00:03:16.240 --> 00:03:20.720
that it's easy to perform DMA
operations without copying data.

00:03:20.720 --> 00:03:25.510
Similarly, they use DMA operations
that have scatter-gather support, and

00:03:25.510 --> 00:03:27.490
that really means that the header and

00:03:27.490 --> 00:03:32.070
the actual data don't have to be
aligned one next to another in memory.

00:03:32.070 --> 00:03:34.910
They can be sent from
different memory locations, so

00:03:34.910 --> 00:03:36.749
there's a copy that's avoided.

00:03:36.749 --> 00:03:41.180
All of these are very useful techniques,
and are now fairly common optimizations.

00:03:41.180 --> 00:03:44.590
However, at the time the paper was
written, they were pretty novel, and

00:03:44.590 --> 00:03:47.270
in fact,
some of the systems they compare against

00:03:47.270 --> 00:03:49.300
did not have some of
these things included.

