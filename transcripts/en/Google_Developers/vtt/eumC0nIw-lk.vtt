WEBVTT
Kind: captions
Language: en

00:00:00.750 --> 00:00:02.080
ARUN NAGARAJAN: My name
is Arun Nagarajan.

00:00:02.080 --> 00:00:03.480
I'm with the developer
relations

00:00:03.480 --> 00:00:05.450
team for Google Apps.

00:00:05.450 --> 00:00:06.500
CHRISTOPH SCHWAB-GANSER:
My name is Christoph.

00:00:06.500 --> 00:00:09.040
I'm the lead engineer of the
YouTube Analytics API.

00:00:09.040 --> 00:00:11.070
ARUN NAGARAJAN: And this session
is Ad Hoc Analysis

00:00:11.070 --> 00:00:14.280
with Google Apps Script and
the YouTube Analytics API.

00:00:14.280 --> 00:00:17.800
So before we get started, how
many folks here have content

00:00:17.800 --> 00:00:21.550
on YouTube or work for someone
that has content on YouTube.

00:00:21.550 --> 00:00:21.920
Awesome.

00:00:21.920 --> 00:00:23.110
That's what I thought.

00:00:23.110 --> 00:00:25.520
We're in the right room.

00:00:25.520 --> 00:00:28.350
Last quarter, I think it was
last quarter, we announced

00:00:28.350 --> 00:00:32.880
that YouTube has a billion
unique viewers a month.

00:00:32.880 --> 00:00:34.650
That's billion with
a B. That's big

00:00:34.650 --> 00:00:36.490
even by Google standards.

00:00:36.490 --> 00:00:39.880
And it's quality apps from
content from folks like you

00:00:39.880 --> 00:00:42.560
that really make that
number possible.

00:00:42.560 --> 00:00:47.080
Now, as content owners, as
developers, you may feel that

00:00:47.080 --> 00:00:51.210
the amount of volume of analysis
and analytics coming

00:00:51.210 --> 00:00:53.950
at you is a sea of data.

00:00:53.950 --> 00:00:56.920
That's petabytes of data
in a lot of ways.

00:00:56.920 --> 00:00:58.950
In this session, what you're
going to learn is how could

00:00:58.950 --> 00:01:03.200
you take that and package it,
share it, and automate it so

00:01:03.200 --> 00:01:05.630
that you're able to get
meaning out of it.

00:01:05.630 --> 00:01:09.530
So the whole idea is to take the
YouTube Analytics API and

00:01:09.530 --> 00:01:11.720
using a really powerful product
called Google Apps

00:01:11.720 --> 00:01:15.550
Script, write custom analysis,
do ad hoc analytics using the

00:01:15.550 --> 00:01:19.040
API for the data source.

00:01:19.040 --> 00:01:22.310
So the agenda for today is I'm
going to start off talking

00:01:22.310 --> 00:01:24.500
about what Apps Script
is all about.

00:01:24.500 --> 00:01:26.330
So we're just going to give you
a quick introduction to

00:01:26.330 --> 00:01:27.360
Google Apps Script.

00:01:27.360 --> 00:01:29.740
There's a lot to cover, so we'll
just have a high level

00:01:29.740 --> 00:01:31.180
introduction.

00:01:31.180 --> 00:01:33.000
Then, Christoph is going to
talk about the YouTube

00:01:33.000 --> 00:01:35.470
Analytics product itself.

00:01:35.470 --> 00:01:38.430
Then, he's going to cover the
API, which is really important

00:01:38.430 --> 00:01:39.720
for developers.

00:01:39.720 --> 00:01:42.360
And then, I'll talk about how
you will be able to marry that

00:01:42.360 --> 00:01:44.910
API with Google Apps Script,
which is the programming

00:01:44.910 --> 00:01:47.280
platform we're going to use
for this demonstration.

00:01:47.280 --> 00:01:49.790
And then, just in general, be
able to do more with the

00:01:49.790 --> 00:01:51.220
YouTube Analytics product.

00:01:51.220 --> 00:01:51.750
All right.

00:01:51.750 --> 00:01:52.840
Sound good?

00:01:52.840 --> 00:01:54.400
Let's get started.

00:01:54.400 --> 00:01:58.000
So the first thing I want to
talk about is just introduce

00:01:58.000 --> 00:01:59.640
you to Google Apps Script.

00:01:59.640 --> 00:02:02.750
Google Apps Script is a Cloud
based JavaScript platform that

00:02:02.750 --> 00:02:05.050
allows you to do more
with Google.

00:02:05.050 --> 00:02:09.560
The products you love like
Gmail, Drive, Sites, Docs,

00:02:09.560 --> 00:02:13.510
Sheets and more have APIs built
into Google Apps Script.

00:02:13.510 --> 00:02:16.090
So you're able to write
automation.

00:02:16.090 --> 00:02:17.880
You're able to write
integration.

00:02:17.880 --> 00:02:20.900
You're able to write UI, even,
that can be serviced into

00:02:20.900 --> 00:02:22.080
these products.

00:02:22.080 --> 00:02:23.680
And the best thing is
that it's not just

00:02:23.680 --> 00:02:24.870
about Google Apps.

00:02:24.870 --> 00:02:27.750
You're able to call other
Google APIs, like the

00:02:27.750 --> 00:02:30.480
Analytics API, or even
third party APIs,

00:02:30.480 --> 00:02:31.910
like Twitter's API.

00:02:31.910 --> 00:02:35.070
And the great thing about all
that is that it's all just

00:02:35.070 --> 00:02:35.730
JavaScript.

00:02:35.730 --> 00:02:37.660
So you're able to learn
this really quickly.

00:02:37.660 --> 00:02:40.330
You're able to get productive
in it really quickly.

00:02:40.330 --> 00:02:43.100
So it's a lot easier
to show this than

00:02:43.100 --> 00:02:44.070
talk about it, I think.

00:02:44.070 --> 00:02:46.720
So what we'll attempt is a live
demo of writing a simple

00:02:46.720 --> 00:02:49.700
script that does a couple of
integration scenarios.

00:02:49.700 --> 00:02:50.950
So let's get started.

00:02:53.660 --> 00:02:55.420
So I'm going to go
to my Drive.

00:02:55.420 --> 00:02:59.190
I could either click on Create
and Script or my favorite

00:02:59.190 --> 00:03:02.080
approach, which is
script.google.com.

00:03:02.080 --> 00:03:05.510
Really easy to remember URL,
and what I'm going to do is

00:03:05.510 --> 00:03:06.330
this is the welcome screen.

00:03:06.330 --> 00:03:07.510
I'll hit Close.

00:03:07.510 --> 00:03:10.290
And I'm just going to write some
code that hopefully will

00:03:10.290 --> 00:03:11.540
make a lot of sense
to you guys.

00:03:17.560 --> 00:03:20.310
So first thing first is that
you're seeing that auto

00:03:20.310 --> 00:03:21.810
complete is really
assisting me.

00:03:25.170 --> 00:03:27.030
So it's verb followed by noun.

00:03:27.030 --> 00:03:29.940
I'm in my case, I'm using a test
inbox so I don't have to

00:03:29.940 --> 00:03:31.730
worry about this timing
out on me.

00:03:31.730 --> 00:03:34.890
But you'll want to have
thresholds available for that.

00:03:34.890 --> 00:03:37.830
And what I can do, as well, is
just write a really simple

00:03:37.830 --> 00:03:43.808
loop and then just iterate
through that.

00:03:43.808 --> 00:03:47.440
It's hard coding standing up.

00:03:47.440 --> 00:03:50.150
Let's see, I'll just
get threads.

00:03:50.150 --> 00:03:52.510
I'll get the message subject so
you can see that it's even

00:03:52.510 --> 00:03:54.710
auto completing within
a collection.

00:03:54.710 --> 00:03:56.830
And for functional programming
like a language like

00:03:56.830 --> 00:03:58.505
JavaScript, that's really
impressive.

00:03:58.505 --> 00:04:00.270
A dynamic language
like JavaScript.

00:04:00.270 --> 00:04:03.670
What I'll do now is take the doc
that I created, and I'll

00:04:03.670 --> 00:04:05.100
get its body.

00:04:05.100 --> 00:04:07.280
And auto complete really helps
me out, especially when I

00:04:07.280 --> 00:04:11.170
forget what the function
is called.

00:04:11.170 --> 00:04:14.720
I'll write the message,
and close it.

00:04:14.720 --> 00:04:21.029
So I'll call this Gmail
Archiver, save it, and now

00:04:21.029 --> 00:04:23.200
this script itself
is in my drive.

00:04:23.200 --> 00:04:24.380
So it's a first class citizen.

00:04:24.380 --> 00:04:26.020
You know where to find it.

00:04:26.020 --> 00:04:27.710
It's easy to find
icon as well.

00:04:27.710 --> 00:04:31.690
It's a little arrow, and what
I'll do now is just hit run.

00:04:31.690 --> 00:04:35.280
So you can see that we're in a
cloud IDE, so I'll authorize

00:04:35.280 --> 00:04:36.260
this script.

00:04:36.260 --> 00:04:37.620
Even though I wrote it,
it's important to

00:04:37.620 --> 00:04:38.600
give it some identity.

00:04:38.600 --> 00:04:42.550
So it's going to run as
me, and I'll hit run.

00:04:42.550 --> 00:04:45.720
So now, when I go into my drive,
you can see that a new

00:04:45.720 --> 00:04:50.120
file popped in and I
can open that, and

00:04:50.120 --> 00:04:52.810
that's my Gmail messages.

00:04:52.810 --> 00:04:55.270
And you can see that those
are the messages I

00:04:55.270 --> 00:04:57.070
have in my test inbox.

00:04:57.070 --> 00:05:00.370
So the whole thing of what we
just showed here is that I

00:05:00.370 --> 00:05:02.310
think we have about 7
or 8 lines of code.

00:05:02.310 --> 00:05:05.310
It's really easy to write
JavaScript with Auto Complete.

00:05:05.310 --> 00:05:08.600
All I had to do was go to a URL
in a web browser and then

00:05:08.600 --> 00:05:13.060
hit run rather than compile,
deploy, manage, configuration,

00:05:13.060 --> 00:05:13.950
and things like that.

00:05:13.950 --> 00:05:15.190
So that's a Google
Apps Script.

00:05:15.190 --> 00:05:18.420
What we just showed you is
accessing Gmail, and then

00:05:18.420 --> 00:05:20.820
populating a document with it
dynamically that we also

00:05:20.820 --> 00:05:22.510
created on the fly.

00:05:22.510 --> 00:05:26.880
So that's what Google Apps
allows you to do.

00:05:26.880 --> 00:05:29.080
So let's review some of
the properties of

00:05:29.080 --> 00:05:31.120
what we just saw.

00:05:31.120 --> 00:05:34.280
So you write code in a browser,
really good syntax

00:05:34.280 --> 00:05:34.820
highlighting.

00:05:34.820 --> 00:05:37.290
You saw line numbers, just a lot
of really nice things that

00:05:37.290 --> 00:05:38.300
makes you feel at home.

00:05:38.300 --> 00:05:41.870
It's not something that you have
to start up Eclipse or

00:05:41.870 --> 00:05:44.185
something a little bit more
heavyweight to work on.

00:05:44.185 --> 00:05:45.500
It's really easy to
find your code.

00:05:45.500 --> 00:05:47.410
It's in Drive automatically.

00:05:47.410 --> 00:05:49.460
You run it on Google servers.

00:05:49.460 --> 00:05:52.140
So your code, when you hit
run, fires up in our data

00:05:52.140 --> 00:05:54.020
centers and acts
on your behalf.

00:05:54.020 --> 00:05:56.420
So that's really powerful, and
you don't have to worry about

00:05:56.420 --> 00:05:58.230
configuration and deployment
of servers

00:05:58.230 --> 00:05:59.340
and things like that.

00:05:59.340 --> 00:06:02.500
And the best of all, it comes
with the set of integration

00:06:02.500 --> 00:06:06.300
APIs to the apps I mentioned,
Gmail and so on.

00:06:06.300 --> 00:06:08.860
But also, you can write your
own integration logic,

00:06:08.860 --> 00:06:10.860
anything that has
a standard API.

00:06:10.860 --> 00:06:12.730
So we have JDBC connectivity.

00:06:12.730 --> 00:06:15.980
We have HTTP connectivity,
and so on.

00:06:15.980 --> 00:06:20.370
So a bunch of Google products,
ability to surface HTML and

00:06:20.370 --> 00:06:23.750
connect to third party APIs,
and a bunch of utilities to

00:06:23.750 --> 00:06:26.950
make your programming lives
easier, formatting all the way

00:06:26.950 --> 00:06:29.480
to things like locking and
cashing, which are really hard

00:06:29.480 --> 00:06:30.700
to write from scratch.

00:06:30.700 --> 00:06:34.350
And the best part is that it's
just JavaScript improved with

00:06:34.350 --> 00:06:36.780
Google APIs that run on
the Google servers.

00:06:36.780 --> 00:06:40.710
So that in a nut shell is
Google Apps Script.

00:06:40.710 --> 00:06:43.330
And now, Christoph is going
to talk about what YouTube

00:06:43.330 --> 00:06:45.050
Analytics is.

00:06:45.050 --> 00:06:46.300
CHRISTOPH SCHWAB-GANSER:
Thank you.

00:06:46.300 --> 00:06:48.920
So Arun already mentioned that
YouTube has now over a billion

00:06:48.920 --> 00:06:50.140
monthly active users.

00:06:50.140 --> 00:06:52.240
I mean, this is just a
staggering number.

00:06:52.240 --> 00:06:55.250
I think this success has been
made possible through all the

00:06:55.250 --> 00:06:57.780
YouTube channels and partners
that uploaded this content in

00:06:57.780 --> 00:07:00.470
the first place.

00:07:00.470 --> 00:07:03.430
We at YouTube Analytics want
to support these YouTube

00:07:03.430 --> 00:07:06.040
creators to make smart decisions
for their content on

00:07:06.040 --> 00:07:09.210
YouTube so that they can track
their performance, they can

00:07:09.210 --> 00:07:12.030
understand their audience
better, and that they can know

00:07:12.030 --> 00:07:15.620
how the content is
being consumed.

00:07:15.620 --> 00:07:18.630
For this, we catch every view
and every like in many other

00:07:18.630 --> 00:07:21.630
user events in YouTube, And we
attribute those to the right

00:07:21.630 --> 00:07:24.500
videos and sum this up to
the level of YouTube

00:07:24.500 --> 00:07:27.390
channels and partners.

00:07:27.390 --> 00:07:31.800
We then take those reports and
surface them to the owners

00:07:31.800 --> 00:07:37.590
through our user interface
at youtube.com/analytics.

00:07:37.590 --> 00:07:39.270
So now, I would like to quickly

00:07:39.270 --> 00:07:41.500
introduce you to this tool.

00:07:41.500 --> 00:07:43.660
It's really an amazing
product.

00:07:43.660 --> 00:07:47.040
It will also help you to get
started with the APIs.

00:07:47.040 --> 00:07:49.820
It's going to give you more
context around the data that

00:07:49.820 --> 00:07:50.850
you expose.

00:07:50.850 --> 00:07:53.930
So here, I'm currently logged
into a content owner, and this

00:07:53.930 --> 00:07:55.910
content owner is associated
to Google.

00:07:55.910 --> 00:07:57.460
And he does not monetize
his videos.

00:07:57.460 --> 00:08:00.990
So therefore, there are no
earnings, and that's expected.

00:08:00.990 --> 00:08:02.740
So that's not a [INAUDIBLE].

00:08:02.740 --> 00:08:05.610
So as you can see, we are now
on the overview page, and we

00:08:05.610 --> 00:08:08.120
have many more detailed
reports available on

00:08:08.120 --> 00:08:09.430
the left hand side.

00:08:09.430 --> 00:08:12.630
And these reports with the
overview page are accessible

00:08:12.630 --> 00:08:15.380
for all videos on all channels
and all shows

00:08:15.380 --> 00:08:17.140
of the content owners.

00:08:17.140 --> 00:08:20.070
And you can also get a report
for each country and different

00:08:20.070 --> 00:08:22.670
date ranges up here.

00:08:22.670 --> 00:08:26.020
You see on the top, there are
the performance metrics, so

00:08:26.020 --> 00:08:30.000
the views followed by for how
many minutes his content has

00:08:30.000 --> 00:08:31.360
been watched.

00:08:31.360 --> 00:08:34.254
Also the earnings, and then the
engagement metrics like

00:08:34.254 --> 00:08:38.159
the likes, the shares, and the
comments and so forth.

00:08:38.159 --> 00:08:42.919
Further down, we have to top
channels and the top videos of

00:08:42.919 --> 00:08:47.410
this content owner, either by
views, minutes watched, or

00:08:47.410 --> 00:08:48.660
estimated earnings.

00:08:51.120 --> 00:08:54.520
Further down, we have some
highlights around the

00:08:54.520 --> 00:08:57.860
demographics of the viewers and
also where the viewers are

00:08:57.860 --> 00:08:58.350
coming from.

00:08:58.350 --> 00:09:00.040
What's the location
of viewers?

00:09:00.040 --> 00:09:02.900
Also, the playback location, the
traffic source, so really

00:09:02.900 --> 00:09:07.320
this tells you from where users
navigate to your content

00:09:07.320 --> 00:09:08.570
on YouTube.

00:09:10.490 --> 00:09:13.280
Then, you also have a report
about playback location.

00:09:13.280 --> 00:09:16.380
So this is going to tell you
what were the playbacks on the

00:09:16.380 --> 00:09:21.600
YouTube watch page or on mobile
or was it using the

00:09:21.600 --> 00:09:22.020
embedded player.

00:09:22.020 --> 00:09:26.970
So this means on other sites,
embedding YouTube videos.

00:09:26.970 --> 00:09:28.050
So now, for the example.

00:09:28.050 --> 00:09:30.640
I'm going to drill
into this report.

00:09:30.640 --> 00:09:33.600
I want to find out what
sites embed this

00:09:33.600 --> 00:09:35.220
content on the videos.

00:09:35.220 --> 00:09:38.290
So in this report, we see how
the different types of

00:09:38.290 --> 00:09:41.350
playbacks changed over time.

00:09:41.350 --> 00:09:43.710
And we also have here a link
that brings us to all the

00:09:43.710 --> 00:09:48.750
sites that embedded this
content owner's videos.

00:09:48.750 --> 00:09:50.230
And now, we are on
the lowest level.

00:09:50.230 --> 00:09:53.960
So now, we see the sites that
contributed most playbacks to

00:09:53.960 --> 00:09:55.210
this content owner.

00:09:57.730 --> 00:10:00.730
OK, this was just a short
example to show you the large

00:10:00.730 --> 00:10:02.050
number of reports that we have

00:10:02.050 --> 00:10:03.930
available at YouTube Analytics.

00:10:03.930 --> 00:10:06.800
And now with the API, we
basically make these reports

00:10:06.800 --> 00:10:09.780
available for you for the
developers so that you can go

00:10:09.780 --> 00:10:11.630
and create awesome
applications.

00:10:11.630 --> 00:10:15.250
So we really want to empower
you to provide services to

00:10:15.250 --> 00:10:18.300
YouTube channels and
YouTube partners.

00:10:18.300 --> 00:10:21.740
And also help partners to
integrate with our partners

00:10:21.740 --> 00:10:25.540
and with our data to customize
their video reporting.

00:10:25.540 --> 00:10:28.960
So many large partners probably
don't want to give

00:10:28.960 --> 00:10:31.100
their employees access
to our UI.

00:10:31.100 --> 00:10:33.620
Rather, they want to extract the
data that's relevant for

00:10:33.620 --> 00:10:36.670
their employees and ship it off
using some other tools.

00:10:39.380 --> 00:10:42.090
So the API is based on the
same data as the UI.

00:10:42.090 --> 00:10:46.110
So therefore, the numbers will
match with every query.

00:10:46.110 --> 00:10:49.270
Also, this is a pure
querying interface.

00:10:49.270 --> 00:10:52.360
So you really have to specify
precise questions like, what

00:10:52.360 --> 00:10:55.240
are the views and the likes for
a particular video over

00:10:55.240 --> 00:10:58.130
the last 30 days?

00:10:58.130 --> 00:11:02.780
Or, request to the API has to be
authorized using OAuth2 by

00:11:02.780 --> 00:11:07.180
the owner of the entity that
you request a report for.

00:11:07.180 --> 00:11:10.430
And this supports two different
types of accounts,

00:11:10.430 --> 00:11:14.050
YouTube channel and
YouTube partners.

00:11:14.050 --> 00:11:16.310
Now, probably now you want to
know how we can specify the

00:11:16.310 --> 00:11:19.180
query, how we can drill
into this data set.

00:11:19.180 --> 00:11:22.200
For this, we have three
important terms, so dimension,

00:11:22.200 --> 00:11:23.880
metrics, and filters.

00:11:23.880 --> 00:11:26.650
So dimension and metrics are
terms of the data cubes.

00:11:26.650 --> 00:11:30.050
On this slide I have a small
data cube with three

00:11:30.050 --> 00:11:34.170
dimensions, and the dimensions
are the criteria used to group

00:11:34.170 --> 00:11:35.520
the data of the report.

00:11:35.520 --> 00:11:39.790
So for example, of the country
where the user event was

00:11:39.790 --> 00:11:44.000
originated, is coming from, or
the video that was associated

00:11:44.000 --> 00:11:45.410
with the user event.

00:11:45.410 --> 00:11:49.190
But also the time when
the event happened.

00:11:49.190 --> 00:11:50.890
So the metrics, they are
basically in the

00:11:50.890 --> 00:11:52.450
cells of the data cube.

00:11:52.450 --> 00:11:55.880
And they are the measurement of
user activity, like users

00:11:55.880 --> 00:11:58.100
watching a video or subscribing
to your channel,

00:11:58.100 --> 00:12:02.010
or liking your video or
favoriting and so forth.

00:12:02.010 --> 00:12:03.860
So with the filter, you
can cut out the

00:12:03.860 --> 00:12:05.920
slides of the data cube.

00:12:05.920 --> 00:12:07.970
So for example, if you only
want to have a report for

00:12:07.970 --> 00:12:11.396
France, you could cut it in one
way or if you want to have

00:12:11.396 --> 00:12:16.390
a report for video B, you
can slice out this.

00:12:16.390 --> 00:12:18.930
In our documentation,
we refer to report.

00:12:18.930 --> 00:12:20.610
That's the combination of

00:12:20.610 --> 00:12:22.770
dimension, metric, and filters.

00:12:22.770 --> 00:12:25.780
And that's really important,
because we do not support all

00:12:25.780 --> 00:12:30.150
combinations of those
entities.

00:12:30.150 --> 00:12:31.940
So let us look at the
live example now.

00:12:31.940 --> 00:12:35.580
So I want to get a report
for a channel

00:12:35.580 --> 00:12:36.760
of our content owner.

00:12:36.760 --> 00:12:42.510
For this, I'm going to first
look at what reports are

00:12:42.510 --> 00:12:44.000
available for content owners.

00:12:44.000 --> 00:12:46.480
So I'm going to look at
the documentation.

00:12:46.480 --> 00:12:50.810
So I already navigated to our
developer site, and I see that

00:12:50.810 --> 00:12:54.283
when I don't specify any
dimensions, so I don't want to

00:12:54.283 --> 00:12:56.830
have a break down by a
dimension, just the bare

00:12:56.830 --> 00:13:01.290
metrics, and I want to filter to
one channel, I can use any

00:13:01.290 --> 00:13:03.810
combination of all
of these metrics.

00:13:03.810 --> 00:13:07.900
And now, for the example I'm
going to pick use, likes, and

00:13:07.900 --> 00:13:10.020
estimated minutes watched.

00:13:10.020 --> 00:13:15.000
So with this, I'm going to go
to the YouTube API Explorer.

00:13:15.000 --> 00:13:16.310
Eh, Google API Explorer.

00:13:16.310 --> 00:13:20.140
This is a tool which is
available for all Google APIs

00:13:20.140 --> 00:13:21.490
of the latest generation.

00:13:21.490 --> 00:13:24.620
It's really an awesome tool
to explore Google APIs.

00:13:24.620 --> 00:13:27.790
You see, I navigated already to
our API and our method, the

00:13:27.790 --> 00:13:32.480
query method, and you
immediately see the required

00:13:32.480 --> 00:13:33.720
request per meter.

00:13:33.720 --> 00:13:37.370
So IDs allows you to specify
what account you want to use

00:13:37.370 --> 00:13:40.700
for the query, and the start
and the end date will allow

00:13:40.700 --> 00:13:43.350
you to specify via the date
range that you want to be

00:13:43.350 --> 00:13:45.100
included in the report.

00:13:45.100 --> 00:13:46.970
And the metrics is required.

00:13:46.970 --> 00:13:49.570
So you have to specify one
metric, otherwise, the query

00:13:49.570 --> 00:13:51.140
makes no sense to us.

00:13:51.140 --> 00:13:55.620
And I entered already my choice,
and also the filters.

00:13:55.620 --> 00:13:59.710
So I filter this query to
one particular channel.

00:13:59.710 --> 00:14:05.690
Now I need to authorize this
query by clicking this.

00:14:05.690 --> 00:14:09.365
So now, I'm ready to
execute the query.

00:14:12.100 --> 00:14:15.980
As you can see, by default you
get the chase and response.

00:14:15.980 --> 00:14:18.305
If you prefer, you can
also get the CSV.

00:14:18.305 --> 00:14:22.240
So the response contains first,
metadata around the

00:14:22.240 --> 00:14:23.870
columns of the result table.

00:14:23.870 --> 00:14:25.020
So what's the data type?

00:14:25.020 --> 00:14:26.370
Is it dimension or metric?

00:14:26.370 --> 00:14:30.610
And the name, followed by the
actual result table in the

00:14:30.610 --> 00:14:31.670
rows element.

00:14:31.670 --> 00:14:34.250
As we did not ask for any
dimension of the break down,

00:14:34.250 --> 00:14:36.150
it's just going to be one row.

00:14:36.150 --> 00:14:37.330
And it's the views--

00:14:37.330 --> 00:14:41.720
these numbers-- the likes,
and the minutes watched.

00:14:41.720 --> 00:14:44.730
So I now just scratched on
the surface of the API.

00:14:44.730 --> 00:14:48.280
So if you're interested in the
YouTube Analytics API, you can

00:14:48.280 --> 00:14:49.220
attend another session.

00:14:49.220 --> 00:14:51.310
It's going to be tomorrow
in the same room

00:14:51.310 --> 00:14:53.130
just after lunch break.

00:14:53.130 --> 00:14:56.370
It's going to be hosted by
Jeremy, Dave, and Chris.

00:14:56.370 --> 00:14:56.910
So that's it.

00:14:56.910 --> 00:14:59.680
I'm going to hand
it back to Arun.

00:14:59.680 --> 00:15:01.680
ARUN NAGARAJAN: Thanks
Christoph.

00:15:01.680 --> 00:15:05.500
So that was really, I think, a
really good introduction to

00:15:05.500 --> 00:15:07.380
what the YouTube Analytics
API is all about.

00:15:07.380 --> 00:15:09.560
There's a wealth of
information there.

00:15:09.560 --> 00:15:12.190
When I first had experience
with it, I was really

00:15:12.190 --> 00:15:15.170
surprised at how much data you
can actually get out of it.

00:15:15.170 --> 00:15:17.410
And as developers, you
want to be able to

00:15:17.410 --> 00:15:19.180
operate on it quickly.

00:15:19.180 --> 00:15:20.790
At Google, we love data.

00:15:20.790 --> 00:15:23.660
At Google, we love giving
you APIs to this data.

00:15:23.660 --> 00:15:27.430
It's really important for you
guys to build tools and

00:15:27.430 --> 00:15:29.080
applications on top
of this data.

00:15:29.080 --> 00:15:32.110
But at the same time, there's
a whole set of choices of

00:15:32.110 --> 00:15:34.370
programming platforms that
you can build on.

00:15:34.370 --> 00:15:37.420
For a lot of reasons, you may
want to go to something that's

00:15:37.420 --> 00:15:39.340
heavy weight and build something
that you want to

00:15:39.340 --> 00:15:40.690
have full control over.

00:15:40.690 --> 00:15:44.200
But for a lot of simple reports
and analytics, there's

00:15:44.200 --> 00:15:46.480
a programming platform that we
think is ideal for it, which

00:15:46.480 --> 00:15:47.630
is Google Apps Script.

00:15:47.630 --> 00:15:49.760
Especially, when it comes to
loading information into a

00:15:49.760 --> 00:15:52.810
spreadsheet or just building
some nice reports that you

00:15:52.810 --> 00:15:55.710
want to give access to a
business user and shield them

00:15:55.710 --> 00:15:57.440
from having to deal with
all the different

00:15:57.440 --> 00:15:58.920
complexities of the UI.

00:15:58.920 --> 00:16:01.490
Or maybe, it's too sensitive
of data to give him full

00:16:01.490 --> 00:16:03.180
access to the Analytics UI.

00:16:03.180 --> 00:16:06.310
So you want to build something
yourself to

00:16:06.310 --> 00:16:07.950
package that up nicely.

00:16:07.950 --> 00:16:09.770
So what we're going to be
talking about in the rest of

00:16:09.770 --> 00:16:12.750
the session is how are you
able to do more with the

00:16:12.750 --> 00:16:13.750
YouTube Analytics system?

00:16:13.750 --> 00:16:16.910
So we give you a really nice
interface to browse

00:16:16.910 --> 00:16:17.640
around on the web.

00:16:17.640 --> 00:16:21.760
We give you an API to get
raw data if you want to.

00:16:21.760 --> 00:16:24.440
But what about building
the custom report?

00:16:24.440 --> 00:16:26.750
So in this next section, we're
going to talk about how will

00:16:26.750 --> 00:16:28.850
you build these reports.

00:16:28.850 --> 00:16:31.400
Then, we'll talk about how
can you share that.

00:16:31.400 --> 00:16:33.790
So what are some of the things
that we offer you so that

00:16:33.790 --> 00:16:36.100
you're able to take the reports
that you build, and

00:16:36.100 --> 00:16:38.530
then share that out with the
right set of people at the

00:16:38.530 --> 00:16:39.750
right time?

00:16:39.750 --> 00:16:41.700
And then, automate as well.

00:16:41.700 --> 00:16:45.200
So a lot of times you may find
yourself doing an every Monday

00:16:45.200 --> 00:16:46.420
morning check for something.

00:16:46.420 --> 00:16:49.640
Or once a quarter, make sure
that the numbers are

00:16:49.640 --> 00:16:51.730
representative of what you
expect them to be.

00:16:51.730 --> 00:16:54.300
Things like that, where,
potentially, there exists a

00:16:54.300 --> 00:16:57.140
system that you could have that
automatically run for

00:16:57.140 --> 00:17:00.140
you, and then push you an alert
through email or some

00:17:00.140 --> 00:17:01.520
other mechanism of an

00:17:01.520 --> 00:17:03.170
interesting event that happens.

00:17:03.170 --> 00:17:05.710
So they automated part
is really important.

00:17:05.710 --> 00:17:07.060
And the last part
that we'll talk

00:17:07.060 --> 00:17:08.800
about, as well, is integrate.

00:17:08.800 --> 00:17:12.460
So around, how can you take
data from other systems?

00:17:12.460 --> 00:17:15.819
Maybe it's the website analytics
product, or maybe

00:17:15.819 --> 00:17:19.599
it's Twitter's data feed,
and blend that and get a

00:17:19.599 --> 00:17:22.980
comprehensive view of how it
applies to your YouTube

00:17:22.980 --> 00:17:24.040
viewership.

00:17:24.040 --> 00:17:26.410
So we'll talk about all
these different things

00:17:26.410 --> 00:17:27.369
that you can build.

00:17:27.369 --> 00:17:28.910
We'll start with build.

00:17:28.910 --> 00:17:32.330
So very first thing you want to
do is be able to load data

00:17:32.330 --> 00:17:33.440
into a spreadsheet.

00:17:33.440 --> 00:17:34.410
So let's start with that.

00:17:34.410 --> 00:17:37.220
So we'll do more live
demos, and we'll see

00:17:37.220 --> 00:17:39.550
how that all goes.

00:17:39.550 --> 00:17:42.600
So what I have here is I already
have a spreadsheet

00:17:42.600 --> 00:17:46.010
open, and I already have some
scripts written against it.

00:17:46.010 --> 00:17:49.120
All the code that we've written
for this will be all

00:17:49.120 --> 00:17:52.770
open source and shared, so no
need to scramble down to write

00:17:52.770 --> 00:17:53.870
anything down.

00:17:53.870 --> 00:17:56.690
So just follow along and
see what's possible.

00:17:56.690 --> 00:17:59.260
So what I've done is the very
first thing we've done is

00:17:59.260 --> 00:18:00.710
injected a custom menu.

00:18:00.710 --> 00:18:02.770
Let me zoom in a little bit.

00:18:02.770 --> 00:18:04.940
That's a little bit
better, I think.

00:18:04.940 --> 00:18:07.875
What we've done, first, is
inject a custom menu into a

00:18:07.875 --> 00:18:09.220
spreadsheet, into a Google
spreadsheet.

00:18:09.220 --> 00:18:11.860
So let's start with
clicking in that.

00:18:11.860 --> 00:18:14.730
So what that's going to do is
fire up a little UI that's

00:18:14.730 --> 00:18:15.940
built an HTML.

00:18:15.940 --> 00:18:18.500
We called it the ad hoc
report generator.

00:18:18.500 --> 00:18:20.150
You can call it whatever.

00:18:20.150 --> 00:18:22.850
But the very first thing you
need to do is authorize it,

00:18:22.850 --> 00:18:24.830
because it's just an application
that's running on

00:18:24.830 --> 00:18:25.870
behalf of you.

00:18:25.870 --> 00:18:28.180
So again, it's going
to use OAuth2.

00:18:28.180 --> 00:18:31.280
So we're going to click
on authorize app.

00:18:31.280 --> 00:18:33.570
That's going to open up the
standard dialogue that you're

00:18:33.570 --> 00:18:36.180
used to for granting OAuth.

00:18:36.180 --> 00:18:38.250
I'm going to authorize against
my work account.

00:18:38.250 --> 00:18:42.030
It's going to say, OK, it wants
to be able to view my

00:18:42.030 --> 00:18:43.350
YouTube analytics.

00:18:43.350 --> 00:18:45.800
Allow access.

00:18:45.800 --> 00:18:49.280
And then, it's going to spin
in and grab the token on

00:18:49.280 --> 00:18:53.400
behalf of us, and it says that
you can close this window now.

00:18:53.400 --> 00:18:55.850
I'm brought back to the
spreadsheet where I left off,

00:18:55.850 --> 00:18:58.080
and you can see that it was
smart enough to pick up the

00:18:58.080 --> 00:19:00.760
fact that a token was saved
under my properties.

00:19:00.760 --> 00:19:02.660
And it says, OK, now,
you're good to go.

00:19:02.660 --> 00:19:04.860
I didn't have to hit refresh
or anything, so you've

00:19:04.860 --> 00:19:06.440
streamlined that in this demo.

00:19:06.440 --> 00:19:09.300
And then, what we've also done
is really simplified the

00:19:09.300 --> 00:19:11.870
interface to the few things
that may matter for this

00:19:11.870 --> 00:19:13.910
particular business use case.

00:19:13.910 --> 00:19:16.705
So everything about this is
fully configurable and up to

00:19:16.705 --> 00:19:19.870
the developer, but we've just
built something to demonstrate

00:19:19.870 --> 00:19:21.260
what's possible.

00:19:21.260 --> 00:19:24.050
So I've just simplified it, the
metrics and dimensions.

00:19:24.050 --> 00:19:27.760
And you can see that we've put
English next to what the API

00:19:27.760 --> 00:19:31.290
offers by saying viewer
percentage, watch time and

00:19:31.290 --> 00:19:33.700
then, also just had
simple dimensions

00:19:33.700 --> 00:19:34.730
that may make sense.

00:19:34.730 --> 00:19:35.560
So let's start with this.

00:19:35.560 --> 00:19:37.090
Let's hit load.

00:19:37.090 --> 00:19:38.980
What's going to happen is
it's going to spin.

00:19:38.980 --> 00:19:42.640
And you can see that behind the
scenes, it calls the API

00:19:42.640 --> 00:19:45.370
and very quickly loads that
into a spreadsheet.

00:19:45.370 --> 00:19:49.170
Now, that was really quick, and
it made a RESTful call out

00:19:49.170 --> 00:19:51.720
to our API and then pulled
the data in.

00:19:51.720 --> 00:19:54.770
And there you can see that's
just the raw data, but as a

00:19:54.770 --> 00:19:57.650
business analyst or someone
that's not nontechnical, there

00:19:57.650 --> 00:19:59.070
really familiar with
spreadsheets.

00:19:59.070 --> 00:20:01.910
They know how to do more with
spreadsheets than sometimes

00:20:01.910 --> 00:20:03.130
developers do.

00:20:03.130 --> 00:20:06.090
And I've seen that a lot,
so that this raw data is

00:20:06.090 --> 00:20:07.890
immediately valuable for
someone that wants to

00:20:07.890 --> 00:20:11.260
understand, OK, for ages between
55 and 64, give me the

00:20:11.260 --> 00:20:12.270
gender breakdown.

00:20:12.270 --> 00:20:14.950
That's important stuff that
we're pulling down here.

00:20:14.950 --> 00:20:15.550
So let's go.

00:20:15.550 --> 00:20:16.130
Let's keep going.

00:20:16.130 --> 00:20:18.200
Let's see what else
as possible.

00:20:18.200 --> 00:20:23.320
The next thing that I'll pull
down is I'll go down to just a

00:20:23.320 --> 00:20:25.580
10 day window to keep the
data set reasonable.

00:20:25.580 --> 00:20:27.980
And I'll say, I want to look
at watch time, minutes

00:20:27.980 --> 00:20:32.800
watched, across the last
set of 10 days there.

00:20:32.800 --> 00:20:34.160
So I'm going to say, load.

00:20:34.160 --> 00:20:35.600
And again, this is
going to spin.

00:20:35.600 --> 00:20:38.190
And behind the scenes, it's
going to pull down the set of

00:20:38.190 --> 00:20:39.540
data that I care for.

00:20:39.540 --> 00:20:42.260
So again, it's now
in a spreadsheet.

00:20:42.260 --> 00:20:44.480
I can start doing some really
interesting things like click

00:20:44.480 --> 00:20:48.060
on Data, sort range, and
say, sort by day.

00:20:48.060 --> 00:20:48.910
And the data sorts.

00:20:48.910 --> 00:20:51.550
These are Little things that
sometimes are really important

00:20:51.550 --> 00:20:53.900
to be able to customize and
find the right slice of

00:20:53.900 --> 00:20:56.020
information that's
useful to you.

00:20:56.020 --> 00:20:56.930
What else can we do?

00:20:56.930 --> 00:20:57.890
So we can pick a column.

00:20:57.890 --> 00:21:02.110
We can say format it to have
conditional formatting of

00:21:02.110 --> 00:21:06.430
value greater than 100,
make the text green.

00:21:06.430 --> 00:21:09.520
So you're able to pull out any
intelligence there that is

00:21:09.520 --> 00:21:11.850
immediately, visually
available.

00:21:11.850 --> 00:21:15.320
You can also take advantage of
other trending information

00:21:15.320 --> 00:21:17.350
using a feature that
we released.

00:21:17.350 --> 00:21:18.890
I think it was last year.

00:21:18.890 --> 00:21:22.300
It's just Sparkline instead
of a range of cells.

00:21:22.300 --> 00:21:25.030
So now, that's the Sparkline
for minutes watched for the

00:21:25.030 --> 00:21:26.560
last 10 days of April.

00:21:26.560 --> 00:21:29.540
And I can drag that across and
then see that for view

00:21:29.540 --> 00:21:33.035
duration and view percentage
as well.

00:21:33.035 --> 00:21:36.300
And this is just the
April and report.

00:21:36.300 --> 00:21:39.430
So now, you've taken numbers
away and just built a very

00:21:39.430 --> 00:21:43.020
simple report that can be
immediately looked at and

00:21:43.020 --> 00:21:46.590
shared and printed and all sorts
of things that might be

00:21:46.590 --> 00:21:48.650
important for your audience.

00:21:48.650 --> 00:21:49.620
Let's keep going.

00:21:49.620 --> 00:21:54.470
The other thing that we can
do, as well, is engagement

00:21:54.470 --> 00:21:56.060
metrics with social media.

00:21:56.060 --> 00:22:00.442
So I'll just go and say, I want
to look at where are--

00:22:00.442 --> 00:22:02.030
oh, actually, I'm
skipping one.

00:22:02.030 --> 00:22:04.580
Let's look at the views
and likes by country.

00:22:04.580 --> 00:22:06.010
This is actually a fun one.

00:22:06.010 --> 00:22:08.920
This is going to load, I think,
quite a bit of data.

00:22:08.920 --> 00:22:11.840
I think it was close to 100
last time I looked.

00:22:11.840 --> 00:22:16.530
So this is what countries and
are my videos being watched

00:22:16.530 --> 00:22:18.790
in, and what is the shares?

00:22:18.790 --> 00:22:21.740
So it was the views and likes
in those countries.

00:22:21.740 --> 00:22:24.440
And I think when you saw
Christophe pull that up in the

00:22:24.440 --> 00:22:28.430
channel that he had, Latin
America and the US were big.

00:22:28.430 --> 00:22:30.430
So let's see if that's true.

00:22:30.430 --> 00:22:32.430
So this is a lot of data.

00:22:32.430 --> 00:22:34.880
What I can do very easily is
just select those three

00:22:34.880 --> 00:22:37.810
columns, click on this little
icon here that says insert

00:22:37.810 --> 00:22:43.040
chart, go to charts, pick a map,
select that, and insert.

00:22:43.040 --> 00:22:45.110
And that's going to immediately
pull up some

00:22:45.110 --> 00:22:48.310
geographical information
that is exactly

00:22:48.310 --> 00:22:49.350
the data that I want.

00:22:49.350 --> 00:22:52.450
And that correlates with what we
saw where Brazil and the US

00:22:52.450 --> 00:22:58.310
and Mexico were more lit up
than, and also Russia, than

00:22:58.310 --> 00:22:59.350
the rest of the world.

00:22:59.350 --> 00:23:02.020
So these are some of the things
that you can do once

00:23:02.020 --> 00:23:03.380
your data is in a spreadsheet.

00:23:03.380 --> 00:23:06.705
And you can see the ease with
which someone can operate in

00:23:06.705 --> 00:23:08.360
an interface that they're
already familiar with.

00:23:08.360 --> 00:23:11.640
And this is what makes it ad
hoc is that you're not

00:23:11.640 --> 00:23:14.770
precanning these reports for
your business users or your

00:23:14.770 --> 00:23:15.630
executives.

00:23:15.630 --> 00:23:18.500
You're giving them raw data
in a tool where they can

00:23:18.500 --> 00:23:19.940
do more with it.

00:23:19.940 --> 00:23:23.330
So that's the message
behind this.

00:23:23.330 --> 00:23:25.800
And we'll take a look at one
other thing to bring this

00:23:25.800 --> 00:23:31.550
home, which is, like
I said, we want to

00:23:31.550 --> 00:23:33.580
look at sharing services.

00:23:33.580 --> 00:23:35.505
And again, this is
going to whoa--

00:23:38.210 --> 00:23:41.250
I'm showing the error
messages too.

00:23:41.250 --> 00:23:43.910
I picked the metrics
and dimension pair.

00:23:43.910 --> 00:23:45.400
That doesn't make sense.

00:23:45.400 --> 00:23:48.900
But that's how you know
it's real demos.

00:23:48.900 --> 00:23:51.100
Shares with sharing service,
there you go.

00:23:51.100 --> 00:23:52.190
That should load.

00:23:52.190 --> 00:23:55.440
And that loaded in behind the
scenes for us here, and so

00:23:55.440 --> 00:23:58.490
that tells me, OK, so there's
some regional players and

00:23:58.490 --> 00:24:00.960
there's also the big names
where are things being

00:24:00.960 --> 00:24:02.240
reshared from my channel.

00:24:02.240 --> 00:24:04.650
The channel, by the way, that
we're doing this analytics for

00:24:04.650 --> 00:24:08.440
is this particular channel,
"Build your Brand on YouTube."

00:24:08.440 --> 00:24:11.080
And there's really a lot of
good content there that I

00:24:11.080 --> 00:24:13.570
think is interesting to look
at as well just from a

00:24:13.570 --> 00:24:17.020
standpoint of, what are
we looking at here?

00:24:17.020 --> 00:24:17.460
Great.

00:24:17.460 --> 00:24:23.410
So we talked about how do
we load this data in?

00:24:23.410 --> 00:24:25.690
So a lot of really cool stuff.

00:24:25.690 --> 00:24:29.210
We talked about how can we build
some of this into nice

00:24:29.210 --> 00:24:31.640
charts, like we show here?

00:24:31.640 --> 00:24:33.570
But what if you want
to share this out?

00:24:33.570 --> 00:24:35.620
What if you want make
this available?

00:24:35.620 --> 00:24:38.290
The spreadsheets have a really
nice sharing model.

00:24:38.290 --> 00:24:41.000
There's a Share button there
that's very prominent, easier

00:24:41.000 --> 00:24:43.900
to send it to someone just
as view only access.

00:24:43.900 --> 00:24:47.020
But it actually has some really
nice things that go

00:24:47.020 --> 00:24:47.860
beyond that.

00:24:47.860 --> 00:24:49.820
So here's a little
dashboard-like thing that I

00:24:49.820 --> 00:24:53.050
built using some of the data
that I already showed, social

00:24:53.050 --> 00:24:55.030
media and minutes watched.

00:24:55.030 --> 00:24:59.920
And what I can do very easily
is go to file and publish.

00:24:59.920 --> 00:25:01.750
And you can pick which
sheet you want to

00:25:01.750 --> 00:25:03.810
publish to the web.

00:25:03.810 --> 00:25:07.570
So this is great for, excuse
me, when you want to make

00:25:07.570 --> 00:25:10.190
something available as
a simple to use URL.

00:25:10.190 --> 00:25:13.750
So once this is published, what
you can do is house that

00:25:13.750 --> 00:25:15.470
data in a Google site.

00:25:15.470 --> 00:25:19.670
So this is a read-only copy of
the analytics that we were

00:25:19.670 --> 00:25:21.320
able to build very quickly.

00:25:21.320 --> 00:25:23.460
And this is filtered.

00:25:23.460 --> 00:25:26.530
This is labeled with the
right terminology.

00:25:26.530 --> 00:25:29.770
It's just this slice of data
that matters for your users,

00:25:29.770 --> 00:25:31.710
and the terminology that
makes sense to them.

00:25:31.710 --> 00:25:34.470
And they can refresher it
when the data changes.

00:25:34.470 --> 00:25:37.710
This will reflect it, and it's
not a matter of stale data

00:25:37.710 --> 00:25:40.150
that's on a printed
page somewhere.

00:25:40.150 --> 00:25:42.960
The nice thing is that a lot of
formatting and the charts

00:25:42.960 --> 00:25:45.950
are dynamic, as well, so they
can hover over things and see

00:25:45.950 --> 00:25:47.880
what I'm looking at.

00:25:47.880 --> 00:25:51.330
And again, site also has its
own sharing model where you

00:25:51.330 --> 00:25:55.150
can restrict it for the down to
your domain or really any

00:25:55.150 --> 00:25:56.770
sort of set of users you want.

00:25:56.770 --> 00:25:59.530
So that's really nice to be able
to take the data you're

00:25:59.530 --> 00:26:02.080
able to build into a
spreadsheet, build a nice

00:26:02.080 --> 00:26:04.920
dashboard, and then share
it out through a URL.

00:26:04.920 --> 00:26:09.610
But you may also want to,
sometimes, be more proactive

00:26:09.610 --> 00:26:11.930
and push alerts to a user.

00:26:11.930 --> 00:26:16.850
So maybe they are not very good
at going to a site every

00:26:16.850 --> 00:26:18.040
day and checking something.

00:26:18.040 --> 00:26:20.420
Or maybe, they prefer to
get an email first

00:26:20.420 --> 00:26:21.930
thing in the morning.

00:26:21.930 --> 00:26:24.410
And the great thing about Google
App Script is that it

00:26:24.410 --> 00:26:25.740
allows you to do things.

00:26:25.740 --> 00:26:29.260
Just like how we were able to
read email through the Gmail

00:26:29.260 --> 00:26:32.140
API, you can actually
send emails as well.

00:26:32.140 --> 00:26:34.850
So let's take a look at
what that feels like.

00:26:34.850 --> 00:26:37.040
So what I have here is the
code that was powering

00:26:37.040 --> 00:26:37.315
everything.

00:26:37.315 --> 00:26:39.610
And like I said, all of
this will be released.

00:26:39.610 --> 00:26:43.040
And there's a function here
called Send Nightly Email.

00:26:43.040 --> 00:26:45.130
And what I could just hit, and
I'm just going to run it for

00:26:45.130 --> 00:26:48.340
now, so I want to
run that email.

00:26:48.340 --> 00:26:54.100
And what that's going to do is
here's my Gmail, and there's

00:26:54.100 --> 00:26:55.560
the email that showed up.

00:26:55.560 --> 00:26:58.080
My daily YouTube
sharing report.

00:26:58.080 --> 00:27:00.440
And you can call it whatever you
want, and you can attach

00:27:00.440 --> 00:27:03.620
it with nice HTML with inline
images and all sorts of really

00:27:03.620 --> 00:27:04.600
fancy stuff.

00:27:04.600 --> 00:27:06.880
All of this is really well
documented, but in this

00:27:06.880 --> 00:27:10.630
example I just attached a simple
P&amp;G to my spreadsheet.

00:27:10.630 --> 00:27:12.750
So there's a lot of really
cool things you can do.

00:27:12.750 --> 00:27:17.800
And you're able to send rich
HTML messages as well.

00:27:17.800 --> 00:27:23.410
So something that changes the
model of someone going to a

00:27:23.410 --> 00:27:27.840
URL to get there analytics, to
someone being able to just get

00:27:27.840 --> 00:27:29.940
it by checking their email,
which is, again, a very

00:27:29.940 --> 00:27:31.820
familiar interface.

00:27:31.820 --> 00:27:35.320
One other thing you could do
is schedule things to run.

00:27:35.320 --> 00:27:39.960
So we have this concept of
triggers that allows you to,

00:27:39.960 --> 00:27:42.780
if you guys are familiar with
the concept of Cron, it allows

00:27:42.780 --> 00:27:46.630
you to schedule scripts to be
run at a specified time frame.

00:27:46.630 --> 00:27:50.490
So what you could do is pick a
function like alert on view

00:27:50.490 --> 00:27:56.420
increase and then, say, run
it every day at midnight.

00:27:56.420 --> 00:28:00.330
And what that allows you to do
is apply some business logic

00:28:00.330 --> 00:28:05.270
like compare views from
yesterday to today, and if the

00:28:05.270 --> 00:28:09.180
amount increases or decreases by
50%, send out emails to the

00:28:09.180 --> 00:28:10.010
top people.

00:28:10.010 --> 00:28:11.370
Let them know that,
hey, they should

00:28:11.370 --> 00:28:12.610
figure out what happened.

00:28:12.610 --> 00:28:16.400
Why is their video gaining or
decreasing in popularity.

00:28:16.400 --> 00:28:17.470
Or other things.

00:28:17.470 --> 00:28:20.160
You can look at share metrics
or your monetization data.

00:28:20.160 --> 00:28:21.020
Things like that.

00:28:21.020 --> 00:28:26.230
So to bring it all together,
what we're able to do here is

00:28:26.230 --> 00:28:31.450
run your business logic on
Google data centers against

00:28:31.450 --> 00:28:33.280
the YouTube Analytics API.

00:28:33.280 --> 00:28:36.720
And through email, notify people
in your organization

00:28:36.720 --> 00:28:38.720
when something of interest
happens.

00:28:38.720 --> 00:28:42.380
And this is all possible with
just very little code that I

00:28:42.380 --> 00:28:46.220
think you'd be surprised by
how productive you can be.

00:28:46.220 --> 00:28:48.640
So that's the concept of
triggers, and you can really

00:28:48.640 --> 00:28:51.000
have several triggers.

00:28:51.000 --> 00:28:53.400
And the time frames that you
can pick are quite good.

00:28:53.400 --> 00:28:56.880
So you could say something like,
run it on the first of

00:28:56.880 --> 00:28:59.710
the month, and all sorts
of good stuff.

00:28:59.710 --> 00:29:00.920
So let's go back here.

00:29:00.920 --> 00:29:02.430
We talked about sharing.

00:29:02.430 --> 00:29:04.360
We talked about being
able to automate.

00:29:04.360 --> 00:29:07.450
So turning it'll push based
model, the functions

00:29:07.450 --> 00:29:09.060
themselves can be scheduled.

00:29:09.060 --> 00:29:11.360
And we give you storage
mechanism so where you can

00:29:11.360 --> 00:29:14.770
drop in these details about,
what was yesterday's numbers?

00:29:14.770 --> 00:29:16.150
And then, you can just
write some simple

00:29:16.150 --> 00:29:17.870
code to compare it.

00:29:17.870 --> 00:29:20.790
And you can even create things
like calendar events.

00:29:20.790 --> 00:29:24.910
So you could have a meeting
automatically created when

00:29:24.910 --> 00:29:28.420
something happens and YouTube
Analytics API calls a meeting

00:29:28.420 --> 00:29:30.470
through an automated script.

00:29:30.470 --> 00:29:33.490
So really, the possibilities
are pretty endless.

00:29:33.490 --> 00:29:36.850
In fact, there's also the Cloud
Print API that we've

00:29:36.850 --> 00:29:39.720
seen people write interesting
things where it automatically

00:29:39.720 --> 00:29:40.960
sends a print job.

00:29:40.960 --> 00:29:42.710
So the printer is ready.

00:29:42.710 --> 00:29:44.490
There's faxing APIs available.

00:29:44.490 --> 00:29:45.590
All sorts of stuff.

00:29:45.590 --> 00:29:48.760
It's really fun to play around,
and I think you guys

00:29:48.760 --> 00:29:51.410
will really agree that it's a
great way to write apps for

00:29:51.410 --> 00:29:54.120
the Analytics API.

00:29:54.120 --> 00:29:57.050
The last thing that I think is
interesting is when you want

00:29:57.050 --> 00:29:59.290
to look at other
trending items.

00:29:59.290 --> 00:30:02.340
One piece of data about
zeitgeist is

00:30:02.340 --> 00:30:04.290
Twitter trending topics.

00:30:04.290 --> 00:30:08.540
So you could ask Twitter, given
a region ID, what is the

00:30:08.540 --> 00:30:11.640
trending topic at that
point in time?

00:30:11.640 --> 00:30:14.660
And you can build all so of
really interesting things.

00:30:14.660 --> 00:30:17.020
So one of things that you
probably noticed is that I

00:30:17.020 --> 00:30:19.760
have a function here called
Twitter trending.

00:30:19.760 --> 00:30:24.800
So here's what has been trending
in, I just picked

00:30:24.800 --> 00:30:27.170
four different countries.

00:30:27.170 --> 00:30:30.310
And what I could do now is just
say, all right, load the

00:30:30.310 --> 00:30:31.270
trending topic.

00:30:31.270 --> 00:30:32.640
It's going to call the API.

00:30:32.640 --> 00:30:35.195
It's going to comma delimit the
trending topics, and then

00:30:35.195 --> 00:30:36.390
just log it.

00:30:36.390 --> 00:30:41.180
So the limit on this is, I
think, 15 every 15 minutes.

00:30:41.180 --> 00:30:42.390
15 calls every 15 minutes.

00:30:42.390 --> 00:30:45.170
So depending on how you want to
structure it, you can start

00:30:45.170 --> 00:30:48.860
loading this in and correlate
this with the other country

00:30:48.860 --> 00:30:50.886
information that we're
giving you.

00:30:50.886 --> 00:30:52.020
Where did that go?

00:30:52.020 --> 00:30:53.080
There it is.

00:30:53.080 --> 00:30:56.490
So you're able to build these
correlation things, because we

00:30:56.490 --> 00:31:00.180
give you the API access
to our data.

00:31:00.180 --> 00:31:03.150
But then, also, we allow you to
call any REST based service

00:31:03.150 --> 00:31:05.960
or SOPA service to get
data from there.

00:31:05.960 --> 00:31:09.730
And it's up to you to be
able to blend that in.

00:31:09.730 --> 00:31:13.300
I can't imagine I/O 13 is not
trending in the United States.

00:31:13.300 --> 00:31:13.790
Well, no.

00:31:13.790 --> 00:31:16.340
What the heck?

00:31:16.340 --> 00:31:18.630
I can't explain that.

00:31:18.630 --> 00:31:20.770
But let's take a quick
look at the code.

00:31:20.770 --> 00:31:22.480
The code is actually really
straightforward.

00:31:22.480 --> 00:31:26.720
There's this concept of the
trending API, and I just, like

00:31:26.720 --> 00:31:29.430
I said, loaded in a
few region IDs.

00:31:29.430 --> 00:31:32.540
And I'm just iterating through
that, and just parsing it

00:31:32.540 --> 00:31:35.630
through a very simple call
and appending it to my

00:31:35.630 --> 00:31:36.280
spreadsheet.

00:31:36.280 --> 00:31:37.310
It's really straightforward.

00:31:37.310 --> 00:31:39.120
And you can write some
of your own logic to

00:31:39.120 --> 00:31:40.810
blend the data in.

00:31:40.810 --> 00:31:44.910
Again, you can complete the
loop by pulling in the

00:31:44.910 --> 00:31:47.740
notification part as well
saying, hey, this topic is

00:31:47.740 --> 00:31:48.810
trending on Twitter.

00:31:48.810 --> 00:31:52.270
Perhaps we should feature this
video on our home screen.

00:31:52.270 --> 00:31:54.840
So there are lot of different
use cases that, if you really

00:31:54.840 --> 00:31:58.310
think about, now become
possible.

00:31:58.310 --> 00:32:00.290
So we talked about being
able to integrate.

00:32:00.290 --> 00:32:02.560
So let's bring it
all together.

00:32:02.560 --> 00:32:03.900
What are we talking
about here?

00:32:03.900 --> 00:32:07.660
So we talked about being able
to build these reports, pull

00:32:07.660 --> 00:32:09.360
data into your spreadsheet.

00:32:09.360 --> 00:32:11.950
We talked about being able to
take that data that you build

00:32:11.950 --> 00:32:14.995
very easily then share it
through email, share it

00:32:14.995 --> 00:32:16.720
through Google Sites
and just using the

00:32:16.720 --> 00:32:18.375
spreadsheet sharing features.

00:32:18.375 --> 00:32:20.130
We talked about being
able to automate it.

00:32:20.130 --> 00:32:22.700
So I just ran the function
manually but then showed you

00:32:22.700 --> 00:32:25.480
that there's a way to trigger
your JavaScript functions to

00:32:25.480 --> 00:32:27.450
run across various things.

00:32:27.450 --> 00:32:28.700
And then, also integrate.

00:32:28.700 --> 00:32:32.310
So you're able to bring in data
from Twitter or bring in

00:32:32.310 --> 00:32:35.030
data from stock market, weather,
all sorts of really

00:32:35.030 --> 00:32:35.930
interesting things.

00:32:35.930 --> 00:32:39.100
And then, look at how that helps
you or hurts you with

00:32:39.100 --> 00:32:41.240
your content that you have.

00:32:41.240 --> 00:32:42.980
So there are a lot of technical
details that,

00:32:42.980 --> 00:32:45.010
unfortunately, we didn't
have a time to go into.

00:32:45.010 --> 00:32:47.210
The first one is, I just showed
you the code really

00:32:47.210 --> 00:32:51.480
quickly, is the ability to make
outbound URL fetch calls.

00:32:51.480 --> 00:32:53.410
That's basically an HTTP call.

00:32:53.410 --> 00:32:55.530
A lot of really good
documentation on our site,

00:32:55.530 --> 00:32:58.580
developers.googl
e.com/apps-script.

00:32:58.580 --> 00:33:00.620
The search is great as well,
and you can find

00:33:00.620 --> 00:33:02.550
what you need there.

00:33:02.550 --> 00:33:04.210
OAuth2.

00:33:04.210 --> 00:33:06.390
It's actually a lot simpler
than you think, a lot of

00:33:06.390 --> 00:33:08.170
times, to implement OAuth2.

00:33:08.170 --> 00:33:10.585
And there's a much more detailed
video we have where

00:33:10.585 --> 00:33:11.745
we walk you through
the process.

00:33:11.745 --> 00:33:14.090
It involves creating
a developer console

00:33:14.090 --> 00:33:16.440
project on our site.

00:33:16.440 --> 00:33:21.370
And it does require you to
deploy your Apps Script as a

00:33:21.370 --> 00:33:22.970
web app so that you can
get the call back

00:33:22.970 --> 00:33:25.110
to store the token.

00:33:25.110 --> 00:33:27.040
Triggers allow you to
schedule things,

00:33:27.040 --> 00:33:29.530
so it's really powerful.

00:33:29.530 --> 00:33:32.050
All the APIs that are available
in your regular

00:33:32.050 --> 00:33:35.970
mechanisms are available
in the triggers.

00:33:35.970 --> 00:33:39.240
And the last thing is you have
to be aware of the quotas.

00:33:39.240 --> 00:33:41.840
You can start using everything
that we showed you today for

00:33:41.840 --> 00:33:43.340
free with a Gmail address.

00:33:43.340 --> 00:33:46.100
You don't even need anything
more than that.

00:33:46.100 --> 00:33:47.890
But if you have Google Apps
for Business, you have a

00:33:47.890 --> 00:33:48.860
higher quota.

00:33:48.860 --> 00:33:50.410
And in general, is
not something you

00:33:50.410 --> 00:33:51.480
have to worry about.

00:33:51.480 --> 00:33:53.680
But let's say you're planning
on sending out thousands of

00:33:53.680 --> 00:33:57.080
emails or creating hundreds of
spreadsheets every hour.

00:33:57.080 --> 00:33:59.050
These are things that you'll
want to keep in mind so you

00:33:59.050 --> 00:34:01.920
don't exceed the quota, and you
design your apps according

00:34:01.920 --> 00:34:04.840
to what's possible.

00:34:04.840 --> 00:34:07.330
That's the URL where you'll
be able to find the code.

00:34:07.330 --> 00:34:10.230
A lot of really good resources
on the Apps Script site and

00:34:10.230 --> 00:34:11.500
the YouTube site.

00:34:11.500 --> 00:34:13.810
We're pretty active on Stack
Overflow, trying to answer any

00:34:13.810 --> 00:34:15.310
questions you may have.

00:34:15.310 --> 00:34:18.139
And you can find us on Google+,
and we'll be at the

00:34:18.139 --> 00:34:23.159
office hours at the Sandbox as
well, the YouTube Sandbox

00:34:23.159 --> 00:34:24.170
right after this.

00:34:24.170 --> 00:34:26.239
I think we have about five
minutes for questions, but

00:34:26.239 --> 00:34:27.610
we're super excited to
see what you guys

00:34:27.610 --> 00:34:28.659
can build with it.

00:34:28.659 --> 00:34:31.219
Hopefully, you saw that by
injecting menus into

00:34:31.219 --> 00:34:34.179
spreadsheets you don't even have
to know scripting as a

00:34:34.179 --> 00:34:37.199
user as long as you as the
developers write the script

00:34:37.199 --> 00:34:39.239
for your users, they
can just open up a

00:34:39.239 --> 00:34:40.780
spreadsheet and get going.

00:34:40.780 --> 00:34:44.580
So what, hopefully, you've seen
from this is it's super

00:34:44.580 --> 00:34:47.380
easy get started and actually
quite powerful as well.

00:34:47.380 --> 00:34:48.630
Thank you very much.

00:34:52.949 --> 00:34:55.020
If you have questions, I
think we have about a

00:34:55.020 --> 00:34:56.270
couple minutes here.

00:34:58.440 --> 00:34:59.060
Go ahead.

00:34:59.060 --> 00:35:00.220
Could you use the mic please?

00:35:00.220 --> 00:35:02.770
We're recording.

00:35:02.770 --> 00:35:04.020
Sorry.

00:35:07.443 --> 00:35:09.140
AUDIENCE: Can you mention
anything about

00:35:09.140 --> 00:35:10.900
this in Google Analytics?

00:35:10.900 --> 00:35:11.220
ARUN NAGARAJAN: Yes.

00:35:11.220 --> 00:35:15.420
So all the techniques described
in this session are

00:35:15.420 --> 00:35:18.340
entirely applicable to
Google Analytics.

00:35:18.340 --> 00:35:22.500
AdSense has an API, so really
anything that has structured

00:35:22.500 --> 00:35:26.430
RESTful access, especially if
it has JSON output, all this

00:35:26.430 --> 00:35:27.800
is possible.

00:35:27.800 --> 00:35:30.150
Hopefully, what we're showing
here comes across as a

00:35:30.150 --> 00:35:33.670
technique that you can employ
rather than a packaged product

00:35:33.670 --> 00:35:37.350
that's immediately applicable to
you, the things about being

00:35:37.350 --> 00:35:39.380
able to build the report,
sharing automating, and

00:35:39.380 --> 00:35:41.430
integrating are just techniques
that we're showing

00:35:41.430 --> 00:35:44.690
you that is applicable to the
YouTube Analytics API and

00:35:44.690 --> 00:35:48.120
other APIs from Google.

00:35:48.120 --> 00:35:48.340
AUDIENCE: Hi.

00:35:48.340 --> 00:35:51.270
In your demo, you showed
something about

00:35:51.270 --> 00:35:52.050
grabbing other countries.

00:35:52.050 --> 00:35:55.300
Now, in the Analytics API it
seems like it's only one

00:35:55.300 --> 00:35:56.890
country per dimension.

00:35:56.890 --> 00:35:59.680
Is there any way to specify
multiple countries, like a

00:35:59.680 --> 00:36:01.200
range of countries,
as a dimension?

00:36:01.200 --> 00:36:02.560
Or is that something
that's going to be

00:36:02.560 --> 00:36:03.740
planned in the future?

00:36:03.740 --> 00:36:07.240
The reason I ask is we've got
partners who want reports on

00:36:07.240 --> 00:36:09.630
user activity for
certain regions.

00:36:09.630 --> 00:36:11.820
So if you think of Europe, there
would be 25 different

00:36:11.820 --> 00:36:13.690
countries in one particular
region.

00:36:13.690 --> 00:36:17.530
That means, one API call per
country, per YouTube video ID.

00:36:17.530 --> 00:36:21.920
So it eats into the quota
pretty quickly.

00:36:21.920 --> 00:36:23.080
CHRISTOPH SCHWAB-GANSER: We
don't support this right now,

00:36:23.080 --> 00:36:25.500
but we can look into
enabling this.

00:36:25.500 --> 00:36:29.220
We do this for our UI,
dynamically, so just roll it

00:36:29.220 --> 00:36:32.930
up to the, summing up the
countries, which belong to

00:36:32.930 --> 00:36:35.830
Europe or North America.

00:36:35.830 --> 00:36:37.040
But it's not available yet.

00:36:37.040 --> 00:36:42.180
So but you can file a
request, of course.

00:36:42.180 --> 00:36:44.000
AUDIENCE: I was wondering if you
guys are going to enable

00:36:44.000 --> 00:36:48.030
pricing for the Analytics
API at any point

00:36:48.030 --> 00:36:51.100
that's in the plans?

00:36:51.100 --> 00:36:52.740
CHRISTOPH SCHWAB-GANSER: We
don't have any immediate plans

00:36:52.740 --> 00:36:54.852
right now for pricing.

00:36:54.852 --> 00:36:55.340
AUDIENCE: OK.

00:36:55.340 --> 00:36:58.310
I'm just wondering because of
the quota usage and stuff like

00:36:58.310 --> 00:37:00.700
that for large CMS.

00:37:00.700 --> 00:37:02.490
CHRISTOPH SCHWAB-GANSER: I mean,
you can file a request

00:37:02.490 --> 00:37:05.260
to bump up your quota, and
then we will review this.

00:37:07.840 --> 00:37:09.360
We can talk to Jeff.

00:37:14.290 --> 00:37:14.760
Yeah.

00:37:14.760 --> 00:37:15.030
OK.

00:37:15.030 --> 00:37:17.370
We were working on another
project, which is more geared

00:37:17.370 --> 00:37:21.170
towards partners, which will
allow you to make a query

00:37:21.170 --> 00:37:22.500
across all your videos.

00:37:22.500 --> 00:37:25.900
So right now you can only get
the top 10 videos, the same

00:37:25.900 --> 00:37:30.890
just as I showed in the UI, but
we are working on enabling

00:37:30.890 --> 00:37:31.920
offline queries.

00:37:31.920 --> 00:37:33.515
So you submit a query.

00:37:33.515 --> 00:37:34.440
We're going to process it.

00:37:34.440 --> 00:37:37.250
Later, you can download it, and
this will enable you to

00:37:37.250 --> 00:37:40.440
get basically the stats
for all your

00:37:40.440 --> 00:37:42.405
videos in one go basically.

00:37:45.870 --> 00:37:50.670
Yeah, probably queue three,
but it's not fixed.

00:37:53.220 --> 00:37:53.730
ARUN NAGARAJAN: Cool.

00:37:53.730 --> 00:37:57.230
Any other questions?

00:37:57.230 --> 00:37:57.970
Awesome.

00:37:57.970 --> 00:37:58.590
Thank you very much.

00:37:58.590 --> 00:38:00.750
So feel free to ask
us questions.

00:38:00.750 --> 00:38:02.630
We'll be at the YouTube
sandbox.

00:38:02.630 --> 00:38:03.510
Please fill out the surveys.

00:38:03.510 --> 00:38:06.510
We'd love to know what you
thought of this and hope this

00:38:06.510 --> 00:38:07.530
was really useful.

00:38:07.530 --> 00:38:08.780
Thank you.

