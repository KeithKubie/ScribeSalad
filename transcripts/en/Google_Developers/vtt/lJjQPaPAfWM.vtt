WEBVTT
Kind: captions
Language: en

00:00:08.126 --> 00:00:09.230
Hey, everyone.

00:00:09.230 --> 00:00:12.110
Welcome to another edition
of YouTube Developers Live.

00:00:12.110 --> 00:00:14.970
Today I'll be teaching you
guys some tips and tricks

00:00:14.970 --> 00:00:17.910
for debugging your OAuth
token when you just

00:00:17.910 --> 00:00:20.090
don't seem to be getting
the right responses.

00:00:20.090 --> 00:00:22.180
So why don't we go ahead,
switch to my screen.

00:00:22.180 --> 00:00:23.763
I'll show you some
of the tools that I

00:00:23.763 --> 00:00:25.670
use when I'm debugging OAuth.

00:00:25.670 --> 00:00:28.820
So first off, you'll want to
know about this documentation.

00:00:28.820 --> 00:00:30.820
It's on developers.google.com.

00:00:30.820 --> 00:00:35.050
It's called, "Using OAuth 2.0
for Client-side Applications."

00:00:35.050 --> 00:00:36.680
It's probably easier
if you just search

00:00:36.680 --> 00:00:38.970
for this title in your
favorite search engine.

00:00:38.970 --> 00:00:42.400
Again, that's "Using OAuth 2.0
for Client-side Applications."

00:00:42.400 --> 00:00:44.030
There's a lot of
documentation here.

00:00:44.030 --> 00:00:46.990
But really there's one thing
here that we want to get at,

00:00:46.990 --> 00:00:49.420
and that is
validating the token.

00:00:49.420 --> 00:00:51.080
So when you click
on this link, you'll

00:00:51.080 --> 00:00:52.830
see that there's this URL.

00:00:52.830 --> 00:00:55.530
And this URL lets us
validate access tokens

00:00:55.530 --> 00:00:58.690
and lets us get more
information about the tokens.

00:00:58.690 --> 00:01:01.700
So in this case, I'm
going to go ahead and just

00:01:01.700 --> 00:01:04.940
copy paste this output
here, this URL here,

00:01:04.940 --> 00:01:05.860
and see what happens.

00:01:05.860 --> 00:01:06.820
All right?

00:01:06.820 --> 00:01:08.680
I'm just copying
this into my browser.

00:01:08.680 --> 00:01:10.110
And what you're
going to see back

00:01:10.110 --> 00:01:13.540
is that there's going to be
a JSON response that says,

00:01:13.540 --> 00:01:15.130
hey, the token's invalid.

00:01:15.130 --> 00:01:17.460
So that's because I
just copy pasted this.

00:01:17.460 --> 00:01:21.062
In fact, if I give it
some crazy value, abcdef,

00:01:21.062 --> 00:01:23.270
you'll see that this is
still an invalid OAuth token.

00:01:23.270 --> 00:01:24.610
And that makes sense.

00:01:24.610 --> 00:01:28.830
So what happens when we give
it a working OAuth token?

00:01:28.830 --> 00:01:30.410
Or one that's semi-working?

00:01:30.410 --> 00:01:32.370
Well, first we'll
need to generate one.

00:01:32.370 --> 00:01:34.730
And a tool that I like to
use to generate OAuth tokens

00:01:34.730 --> 00:01:36.130
is the OAuth Playground.

00:01:36.130 --> 00:01:40.075
You can get here by going to
 developers.google.com/OAuthPlayground.

00:01:40.075 --> 00:01:42.450
Or again, you can search for
this in your favorite search

00:01:42.450 --> 00:01:44.660
engine until it comes up.

00:01:44.660 --> 00:01:47.540
Now, what I'm going to do is I'm
going to select and authorize

00:01:47.540 --> 00:01:48.820
some APIs.

00:01:48.820 --> 00:01:51.200
So I'm going to scroll down.

00:01:51.200 --> 00:01:53.720
I'm going to look
for YouTube, and I'm

00:01:53.720 --> 00:01:56.465
going to select the
YouTube read-only scope.

00:01:56.465 --> 00:02:00.484
I'm going to scroll
down to Authorize APIs.

00:02:00.484 --> 00:02:02.900
And this is going to put me
through the three-legged OAuth

00:02:02.900 --> 00:02:03.670
flow.

00:02:03.670 --> 00:02:07.132
I'm going to click Accept.

00:02:07.132 --> 00:02:09.590
And you'll see that I've gotten
back an authorization code.

00:02:09.590 --> 00:02:13.170
I'm not going to go too much
into the internals of OAuth.

00:02:13.170 --> 00:02:15.100
But the authorization
code is something

00:02:15.100 --> 00:02:17.190
that your server
would use to exchange

00:02:17.190 --> 00:02:19.770
for a refresh token
or an access token.

00:02:19.770 --> 00:02:22.310
So if I go ahead and I
click Exchange authorization

00:02:22.310 --> 00:02:25.430
code for tokens, it will
populate the Refresh Token

00:02:25.430 --> 00:02:27.100
and Access Token fields.

00:02:27.100 --> 00:02:29.070
And in the OAuth
2.0 Playground, I

00:02:29.070 --> 00:02:31.976
can actually test
certain API calls.

00:02:31.976 --> 00:02:33.350
We're not going
to do that today.

00:02:33.350 --> 00:02:35.183
Instead, I'm just going
to go back and click

00:02:35.183 --> 00:02:38.200
on Exchange authorization
code for tokens.

00:02:38.200 --> 00:02:40.700
I'm going to copy
paste the access token.

00:02:40.700 --> 00:02:44.470
And I'm going to put
it into this URL.

00:02:44.470 --> 00:02:47.660
And you'll see that I'm just
passing it as a URL parameter.

00:02:47.660 --> 00:02:49.450
And I get back a lot
more information.

00:02:49.450 --> 00:02:53.602
In fact, I see what's the
client ID that got it back.

00:02:53.602 --> 00:02:55.840
What's the scope, and
when does it expire,

00:02:55.840 --> 00:02:57.490
and what's the access type?

00:02:57.490 --> 00:03:00.090
Now, you may or may not
be using an offline token.

00:03:00.090 --> 00:03:01.465
So this is one
way to know if you

00:03:01.465 --> 00:03:03.330
have an online token
or an offline token.

00:03:03.330 --> 00:03:05.310
And remember, an
offline token is one

00:03:05.310 --> 00:03:10.620
that you can refresh every
hour, via the refresh token,

00:03:10.620 --> 00:03:12.579
and get a new token to
make API calls with.

00:03:12.579 --> 00:03:14.120
Now, most of the
time, the API client

00:03:14.120 --> 00:03:15.370
will handle this for you.

00:03:15.370 --> 00:03:16.995
So a lot of times,
people get confused.

00:03:16.995 --> 00:03:18.950
You know, what's an
authorization code?

00:03:18.950 --> 00:03:20.390
What's a refresh token?

00:03:20.390 --> 00:03:24.200
And the token that you want
to use to be making API calls

00:03:24.200 --> 00:03:25.830
is the access token.

00:03:25.830 --> 00:03:31.640
So if you accidentally plug
in your refresh token somehow,

00:03:31.640 --> 00:03:34.720
you'll see that, hey, this
is not a valid OAuth token.

00:03:34.720 --> 00:03:36.570
And what's really
cool about this

00:03:36.570 --> 00:03:39.340
is that I can go ahead
and switch to terminal.

00:03:39.340 --> 00:03:42.710
And I'm just going to
blow this up right here.

00:03:42.710 --> 00:03:47.490
You can also do this in cURL.

00:03:47.490 --> 00:03:48.600
Oop!

00:03:48.600 --> 00:03:53.220
You're going to have to
give it some quotes there.

00:03:53.220 --> 00:03:57.650
And what's nice about this
is that any HTTP client

00:03:57.650 --> 00:03:59.170
can handle this
operation for you.

00:03:59.170 --> 00:04:03.190
So one possible thing you
can do an error situation is

00:04:03.190 --> 00:04:04.960
to say, well, did
I screw up here?

00:04:04.960 --> 00:04:06.880
And you can insert
some debugging code

00:04:06.880 --> 00:04:08.890
that says, if an
exception gets thrown,

00:04:08.890 --> 00:04:12.540
if there's a 400 or 401,
you can use this token info

00:04:12.540 --> 00:04:15.090
URL to be able to
validate that you actually

00:04:15.090 --> 00:04:16.600
did get the right type of token.

00:04:16.600 --> 00:04:18.470
A very common error is
that a token doesn't

00:04:18.470 --> 00:04:21.420
have the right scope,
or the token is expired.

00:04:21.420 --> 00:04:23.900
So you need to have
a valid OAuth token

00:04:23.900 --> 00:04:25.660
before you can make API calls.

00:04:25.660 --> 00:04:28.160
So that's just a little trick
that I like to show people.

00:04:28.160 --> 00:04:34.010
So again, to recap, there's
a document on how to do this.

00:04:34.010 --> 00:04:36.890
It's called "Using OAuth 2.0
for Client-side Applications."

00:04:36.890 --> 00:04:38.420
You can just search
for that title.

00:04:38.420 --> 00:04:42.200
And another tool is the
OAuth 2.0 Playground.

00:04:42.200 --> 00:04:44.460
Typically, in these
situations, you only ever

00:04:44.460 --> 00:04:47.059
need to implement
it one time, and you

00:04:47.059 --> 00:04:48.600
don't need to worry
about this again.

00:04:48.600 --> 00:04:50.610
You save the refresh
token, and you

00:04:50.610 --> 00:04:52.531
can keep making calls
with the access token.

00:04:52.531 --> 00:04:53.905
So before I go,
I'm going to show

00:04:53.905 --> 00:04:56.980
you guys one more trick,
which is that the OAuth 2.0

00:04:56.980 --> 00:05:00.380
Playground uses the client
ID ad client secret-- it's

00:05:00.380 --> 00:05:02.240
one of our client ID
and client secrets.

00:05:02.240 --> 00:05:05.550
So if you want to see the full
request and response using

00:05:05.550 --> 00:05:08.210
your own client ID and
your own client secret,

00:05:08.210 --> 00:05:10.082
click here under Settings.

00:05:10.082 --> 00:05:12.290
And you can see that there's
different settings here.

00:05:12.290 --> 00:05:14.331
Most of the time, the one
that you want to change

00:05:14.331 --> 00:05:17.930
is Force approval prompt or
Use your OAuth credentials,

00:05:17.930 --> 00:05:20.180
and this is where you would
plug-in your own client ID

00:05:20.180 --> 00:05:23.360
and client secret that you're
getting from the API console.

00:05:23.360 --> 00:05:26.940
Because once you get this, you
can start making API calls.

00:05:26.940 --> 00:05:29.670
And you can compare these
against your own API calls

00:05:29.670 --> 00:05:31.140
to see what the difference is.

00:05:31.140 --> 00:05:33.540
And hopefully, that'll
help you guys debug.

00:05:33.540 --> 00:05:36.370
So that's all I have
for you guys today.

00:05:36.370 --> 00:05:38.500
Hopefully, this helps you
guys with any problems

00:05:38.500 --> 00:05:41.000
you may have as you're trying
to figure out what's going on

00:05:41.000 --> 00:05:44.410
with your OAuth tokens, and
help you authorize so you can go

00:05:44.410 --> 00:05:46.611
ahead and build great
YouTube applications.

00:05:46.611 --> 00:05:47.110
All right.

00:05:47.110 --> 00:05:48.110
Thank you all very much.

00:05:48.110 --> 00:05:49.930
And have a great day.

