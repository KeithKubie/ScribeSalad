WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.500
[MUSIC PLAYING]

00:00:03.992 --> 00:00:04.950
STEFAN RITTER: Hi guys.

00:00:04.950 --> 00:00:07.110
I'm Stefan, and I'm working
on multiple projects

00:00:07.110 --> 00:00:07.770
at the moment.

00:00:07.770 --> 00:00:10.420
One is buzzr.io,
one is fitguru.org,

00:00:10.420 --> 00:00:12.240
and one is pickfeed.io.

00:00:12.240 --> 00:00:15.270
And today I'm going to talk
about how I use a common code

00:00:15.270 --> 00:00:17.830
base to pivot to all
these different ideas.

00:00:17.830 --> 00:00:19.600
While working on
different startup ideas,

00:00:19.600 --> 00:00:23.300
I quickly realized there are
common parts to each idea.

00:00:23.300 --> 00:00:26.010
So I created an abstraction
called emptyApp,

00:00:26.010 --> 00:00:29.320
which combines these five
features that I singled out.

00:00:29.320 --> 00:00:32.229
The five features are a landing
page with an email sign up so

00:00:32.229 --> 00:00:34.730
you can go online right away
and start collecting emails

00:00:34.730 --> 00:00:37.850
from people who are interested,
a client-agnostic API

00:00:37.850 --> 00:00:41.480
server that doesn't care
if the front-end is a web

00:00:41.480 --> 00:00:44.570
app or a mobile app, and
then a front-end app, which

00:00:44.570 --> 00:00:47.890
for me usually is the web
app, since I think the web is

00:00:47.890 --> 00:00:50.150
the biggest
[INAUDIBLE] platform,

00:00:50.150 --> 00:00:52.720
and then a user model, since
you need to save your users.

00:00:52.720 --> 00:00:55.240
And the fifth thing would be
a login authentication scheme

00:00:55.240 --> 00:00:57.560
with Twitter,
Facebook, G+, or email.

00:00:57.560 --> 00:00:59.720
Let's look at the five
features in emptyApp

00:00:59.720 --> 00:01:02.550
as they come from the repo
when your freshly install it.

00:01:02.550 --> 00:01:06.400
So this is emptyApp's
landing page

00:01:06.400 --> 00:01:10.930
where you can collect
users' email addresses who

00:01:10.930 --> 00:01:12.710
might be interested
until you launch.

00:01:12.710 --> 00:01:17.630
So if you just enter
an email address here,

00:01:17.630 --> 00:01:22.410
you can link it up
to a Mailchimp list

00:01:22.410 --> 00:01:24.640
and collect email
addresses that way.

00:01:24.640 --> 00:01:29.530
But then emptyApp also gives
you real login functionality.

00:01:29.530 --> 00:01:41.480
So for example, if we
try to log on like this,

00:01:41.480 --> 00:01:42.980
this user doesn't exist.

00:01:42.980 --> 00:01:45.660
So obviously we get
an error message.

00:01:45.660 --> 00:01:56.210
But then if we go to Join,
we can create this user.

00:01:56.210 --> 00:01:58.340
And then now you're logged in.

00:01:58.340 --> 00:02:01.840
So if we try to go
back to the homepage,

00:02:01.840 --> 00:02:04.130
emptyApp will automatically
log you back in.

00:02:04.130 --> 00:02:06.950
And you're landing on
the logged in home page.

00:02:06.950 --> 00:02:09.474
There's also a
logged out future.

00:02:09.474 --> 00:02:11.390
So you can just log out
again, and you're back

00:02:11.390 --> 00:02:13.680
logged out on the home page.

00:02:13.680 --> 00:02:16.844
And then, of course, you
can do all this as well with

00:02:16.844 --> 00:02:18.010
all the social media logins.

00:02:18.010 --> 00:02:19.426
So here we have
Twitter activated.

00:02:26.080 --> 00:02:27.857
And then we log back in.

00:02:27.857 --> 00:02:30.440
All right, now I'm going to show
you these features in action.

00:02:30.440 --> 00:02:37.850
So if we go to buzzr.io,
you can see when you first

00:02:37.850 --> 00:02:40.450
land on the app
there's a landing page.

00:02:40.450 --> 00:02:42.790
But then over here
you see we have links

00:02:42.790 --> 00:02:46.400
to the Join, links to the Login.

00:02:46.400 --> 00:02:48.945
And once we're here, we can
log in with our user account.

00:02:55.590 --> 00:02:58.700
And we land on the
logged in home page.

00:02:58.700 --> 00:03:00.420
All right, now let
me show you what

00:03:00.420 --> 00:03:02.930
the emptyApp looks
like on GitHub.

00:03:02.930 --> 00:03:10.270
So if you go to my username,
stefanritter/emptyapp--

00:03:10.270 --> 00:03:12.840
so there's a link right here
so you can download and clone

00:03:12.840 --> 00:03:14.862
the app.

00:03:14.862 --> 00:03:17.070
There are little instructions
on how to do the setup.

00:03:17.070 --> 00:03:20.090
So it comes with a
Grunt file, as well as

00:03:20.090 --> 00:03:23.740
scripts to do the testing
and a supervisor script

00:03:23.740 --> 00:03:25.920
to watch for server changes.

00:03:25.920 --> 00:03:28.570
So if you download the app,
and then you want to start it,

00:03:28.570 --> 00:03:34.930
what you do is you CD into
the emptyApp directory.

00:03:34.930 --> 00:03:37.960
And then you just
run the start script.

00:03:37.960 --> 00:03:43.870
And what it will do is start all
the tests, the Grunt watching.

00:03:43.870 --> 00:03:50.010
And from that point on,
you can demo the app

00:03:50.010 --> 00:03:52.140
on your local host.

00:03:52.140 --> 00:03:54.630
It's a MongoDB database,
so the whole app

00:03:54.630 --> 00:03:56.130
is written in JavaScript.

00:03:56.130 --> 00:03:58.460
All my apps are written
100% in JavaScript.

00:03:58.460 --> 00:04:00.720
Because you can use
JavaScript on the front-end,

00:04:00.720 --> 00:04:03.120
on the back-end, as well as
to talk to your database.

00:04:03.120 --> 00:04:05.570
So there's less mental overhead.

00:04:05.570 --> 00:04:08.410
For the database, I use MongoDB.

00:04:08.410 --> 00:04:11.544
MongoDB is schemaless, so you
can change fields on models

00:04:11.544 --> 00:04:13.960
very quickly, which is very
important when you're pivoting

00:04:13.960 --> 00:04:16.779
between extreme different ideas.

00:04:16.779 --> 00:04:18.470
For the front-end,
I use AngularJS,

00:04:18.470 --> 00:04:20.589
which has awesome
dependency injection.

00:04:20.589 --> 00:04:22.460
So it's very easy to
throw around features

00:04:22.460 --> 00:04:24.490
within your app--
also, again, important

00:04:24.490 --> 00:04:27.310
when you're changing
and pivoting ideas.

00:04:27.310 --> 00:04:29.840
And then for the
server, I use Happy.js,

00:04:29.840 --> 00:04:31.460
which is a server
built specifically

00:04:31.460 --> 00:04:33.870
for being an API server.

00:04:33.870 --> 00:04:37.030
So it's very great to be a
front-end-agnostic server

00:04:37.030 --> 00:04:38.810
back-end.

00:04:38.810 --> 00:04:39.860
This is the Grunt task.

00:04:39.860 --> 00:04:42.610
The Grunt task just watches
for file changes and checks

00:04:42.610 --> 00:04:44.460
the code and tells
you if something's

00:04:44.460 --> 00:04:46.610
wrong and runs all your tests.

00:04:46.610 --> 00:04:51.710
This is the Karma tab, which
runs all the front-end tasks.

00:04:51.710 --> 00:04:53.614
And then this is the
Server tab, which

00:04:53.614 --> 00:04:55.030
watches for changes
in server code

00:04:55.030 --> 00:04:57.970
and restarts the
server if it finds any.

00:04:57.970 --> 00:05:00.590
This is what the
folder structure

00:05:00.590 --> 00:05:01.870
looks like of the code.

00:05:01.870 --> 00:05:04.364
There are three main folders
for you to watch out for.

00:05:04.364 --> 00:05:06.280
There is the Client
folder, the Server folder,

00:05:06.280 --> 00:05:07.870
and the Test folder.

00:05:07.870 --> 00:05:11.187
It's quite self explanatory
what each includes.

00:05:11.187 --> 00:05:13.770
But it's important to point out
that the client and the server

00:05:13.770 --> 00:05:15.270
are completely separate.

00:05:15.270 --> 00:05:17.905
So this is the
client-agnostic API server

00:05:17.905 --> 00:05:20.430
I talked about previously
where the client could

00:05:20.430 --> 00:05:23.085
be, in this case,
an AngularJS app.

00:05:23.085 --> 00:05:26.250
But it could also just be
an iOS app or an Android

00:05:26.250 --> 00:05:29.330
app that talks to your server.

00:05:29.330 --> 00:05:32.870
And so what happens is if
you change something here,

00:05:32.870 --> 00:05:40.690
Grunt will monitor
the change, and then

00:05:40.690 --> 00:05:43.710
build the front-end code again
and inject it into the server.

00:05:43.710 --> 00:05:47.232
So the server will serve
the updated app for you.

00:05:47.232 --> 00:05:49.440
So the other thing we talked
about is the user model.

00:05:49.440 --> 00:05:51.730
So if you look into
the Server folder,

00:05:51.730 --> 00:05:56.710
you can see it comes with just
one model, which is the user.

00:05:56.710 --> 00:05:59.663
The user model comes with
just the basic things

00:05:59.663 --> 00:06:01.935
you need, like username,
display name, email,

00:06:01.935 --> 00:06:03.239
[INAUDIBLE], and passwords.

00:06:03.239 --> 00:06:04.780
The controllers are
also very simple.

00:06:04.780 --> 00:06:07.260
Their authentication controller
handles all the login stuff

00:06:07.260 --> 00:06:09.550
that we previously looked at.

00:06:09.550 --> 00:06:12.340
There's a feed
controller that simply

00:06:12.340 --> 00:06:14.400
serves the logged in homepage.

00:06:14.400 --> 00:06:16.670
There's also a
little bonus here.

00:06:16.670 --> 00:06:18.970
For real time chatting,
there's a Socket.IO set up.

00:06:18.970 --> 00:06:24.210
So under Config, there's
a little Socket.IO setup

00:06:24.210 --> 00:06:27.360
where you can then send real
time messages back and forth

00:06:27.360 --> 00:06:29.580
to your clients.

00:06:29.580 --> 00:06:31.930
And so this is how I
use my common code base

00:06:31.930 --> 00:06:33.559
to create all these
different ideas.

00:06:33.559 --> 00:06:34.850
You can check it out on GitHub.

00:06:34.850 --> 00:06:37.670
It's on my user name, and then
the repo is called emptyApp.

00:06:37.670 --> 00:06:39.510
Thanks for watching.

