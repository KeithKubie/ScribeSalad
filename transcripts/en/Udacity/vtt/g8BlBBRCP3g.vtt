WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.960
&gt;&gt; So okay, so let's think about General sum games, so not zero sum any

00:00:02.960 --> 00:00:04.630
more. But we're not, you know, restricted,

00:00:04.630 --> 00:00:07.590
it could be any kind of relationship between

00:00:07.590 --> 00:00:10.670
the two players. And so the first thing we need to do is realize well,

00:00:10.670 --> 00:00:13.350
well we can't really do minimax here

00:00:13.350 --> 00:00:15.980
any more. Right, because that doesn't make sense.

00:00:15.980 --> 00:00:18.410
&gt;&gt; Right. That only works with zero-sum games.

00:00:18.410 --> 00:00:21.180
&gt;&gt; Well it's only, yeah. That's, well, it sort of assumes that the

00:00:21.180 --> 00:00:25.389
other player's trying to minimize my reward and that's not the, that's not the

00:00:25.389 --> 00:00:27.793
concept of the Nash equilibrium. We'd like to

00:00:27.793 --> 00:00:30.223
do something analogous and find a Nash equilibrium in

00:00:30.223 --> 00:00:32.840
this general sum setting. So what, what operator do

00:00:32.840 --> 00:00:34.570
you think we would need in this context here?

00:00:34.570 --> 00:00:35.675
&gt;&gt; Nash equilibrium?

00:00:35.675 --> 00:00:38.370
&gt;&gt; Yeah, so that would be a very reasonable thing to

00:00:38.370 --> 00:00:42.746
do, is instead of computing mini max, we actually compute of the

00:00:42.746 --> 00:00:47.490
two matrix game, right, using Q1 and Q2, compute the Nash

00:00:47.490 --> 00:00:51.190
equilibrium of that and propagate that value back. It's a well defined

00:00:51.190 --> 00:00:55.400
notion, right, that we can summarize the value of these two pay of matrices

00:00:55.400 --> 00:01:00.450
with with a pair of numbers which are the values of the Nash equilibrium.

00:01:00.450 --> 00:01:01.795
&gt;&gt; Mm-hm.

00:01:01.795 --> 00:01:04.220
&gt;&gt; Alright, so so good. So we can

00:01:04.220 --> 00:01:06.450
do the same thing in the Q learning setting.

00:01:06.450 --> 00:01:08.830
Substitute in a Nash equilibrium. And we can call

00:01:08.830 --> 00:01:12.760
that algorithm Nash-Q, which is, appears in the literature.

00:01:12.760 --> 00:01:13.690
&gt;&gt; Nice.

00:01:13.690 --> 00:01:16.200
&gt;&gt; Oh minimax Q by the way is something

00:01:16.200 --> 00:01:19.540
that I wrote about. Nash-Q is a different algorithm.

00:01:19.540 --> 00:01:20.820
&gt;&gt; So it's not as cool, is what you're saying.

00:01:20.820 --> 00:01:24.920
&gt;&gt; Well, let's let's see how it goes. So this is

00:01:24.920 --> 00:01:28.880
now an algorithm, you can actually, well, this set of equations it's

00:01:28.880 --> 00:01:33.010
not exactly clear what it means, but we can think about turning

00:01:33.010 --> 00:01:36.350
that into value iteration, right? By turning this into an assignment statement.

00:01:36.350 --> 00:01:37.650
&gt;&gt; Mm-hm.

00:01:37.650 --> 00:01:41.630
&gt;&gt; So, what happens? Well, value iteration

00:01:41.630 --> 00:01:42.740
doesn't work.

00:01:42.740 --> 00:01:43.970
&gt;&gt; No.

00:01:43.970 --> 00:01:46.360
&gt;&gt; So, yeah, so if you, you repeat

00:01:46.360 --> 00:01:48.590
this over and over again, things, weird things

00:01:48.590 --> 00:01:50.680
can happen, it doesn't, it doesn't really converge,

00:01:50.680 --> 00:01:52.910
it doesn't really solve this system of equations necessarily.

00:01:52.910 --> 00:01:54.190
&gt;&gt; Hm.

00:01:54.190 --> 00:01:57.240
&gt;&gt; And unfortunately the, the reasoning here is even

00:01:57.240 --> 00:02:00.270
harder in the case of Nash-Q because in the case

00:02:00.270 --> 00:02:03.250
of Nash-Q, it's really trying to solve this system of

00:02:03.250 --> 00:02:06.360
equations using something like value iteration, but with extra stocasticity.

00:02:06.360 --> 00:02:08.770
And so it also suffers the same problem.

00:02:08.770 --> 00:02:11.470
It doesn't necessarily converge. There's not really a

00:02:11.470 --> 00:02:13.850
unique solution to Q star because you can

00:02:13.850 --> 00:02:15.980
have different Nash equilibria that have different values.

00:02:15.980 --> 00:02:17.180
&gt;&gt; Right.

00:02:17.180 --> 00:02:19.040
&gt;&gt; So there isn't really much hope of converting to

00:02:19.040 --> 00:02:25.200
the answer because there isn't the answer. The the policies

00:02:25.200 --> 00:02:28.340
can not be computed independently, right, so Nash equilibrium is

00:02:28.340 --> 00:02:31.500
really defined as a joint behavior, and so we can't

00:02:31.500 --> 00:02:35.100
just have two different players computing Q values. Even if we could compute the

00:02:35.100 --> 00:02:40.160
Q values. It wouldn't necessarily tell us what to do with the policies, because

00:02:40.160 --> 00:02:43.900
if you take two different policies that are both half of a Nash equilibrium,

00:02:43.900 --> 00:02:45.450
two halves of a Nash equilibrium do

00:02:45.450 --> 00:02:47.550
not necessarily make a whole Nash equilibrium.

00:02:47.550 --> 00:02:48.240
&gt;&gt; Right.

00:02:48.240 --> 00:02:52.050
&gt;&gt; because they could be incompatible. So, you know, so far so good, right?

00:02:52.050 --> 00:02:54.840
&gt;&gt; Yeah, I can't wait to see what happens next.

00:02:54.840 --> 00:02:56.900
&gt;&gt; The update is not efficient unless

00:02:56.900 --> 00:03:00.350
P equals PPAD, which is to say, computing a Nash

00:03:00.350 --> 00:03:03.050
equilibrium is not a polynomial time operation as far as

00:03:03.050 --> 00:03:05.370
we know. It is as hard as any problem in

00:03:05.370 --> 00:03:08.570
a class that's known as PPAD. And this is actually a

00:03:08.570 --> 00:03:11.265
relatively recent result, in the, in the last five, ten

00:03:11.265 --> 00:03:14.640
years. And this class is believed to be as hard

00:03:14.640 --> 00:03:18.690
as, as NP. So, possibly harder. So it doesn't really,

00:03:18.690 --> 00:03:22.070
doesn't really give us any leverage to, computational leverage to kind of

00:03:22.070 --> 00:03:25.220
break it down in this way. So that's unfortunate. And

00:03:25.220 --> 00:03:28.610
finally, the last little hope of, well, maybe we can define

00:03:28.610 --> 00:03:31.310
this kind of learning scenario using Q functions the same way

00:03:31.310 --> 00:03:35.200
we've been doing, Q functions are not sufficient to specify the

00:03:35.200 --> 00:03:38.230
policy. That is to say, even if I could do all

00:03:38.230 --> 00:03:42.250
these other things, efficiently compute a solution of, you know, build

00:03:42.250 --> 00:03:44.800
the Q values, make them so that they're compatible with each

00:03:44.800 --> 00:03:47.910
other. And now I just tell you, here's your Q function.

00:03:47.910 --> 00:03:51.950
Now decide how to behave, you can't. It's, there's not enough information.

00:03:51.950 --> 00:03:53.310
&gt;&gt; You're depressing me, Michael.

00:03:53.310 --> 00:03:56.050
&gt;&gt; Yes, so this is kind of sad. We go to the general sum

00:03:56.050 --> 00:03:59.480
case, which in some sense is the only case that matters' because zero sum

00:03:59.480 --> 00:04:04.440
never really happens. And what we discover is that we lose all, seemingly lose

00:04:04.440 --> 00:04:08.830
all of the leverage that we have in the context of Q type algorithms.

00:04:08.830 --> 00:04:09.850
&gt;&gt; Mm, mm, mm.

00:04:09.850 --> 00:04:11.090
&gt;&gt; And that's where we'll stop.

00:04:11.090 --> 00:04:13.010
&gt;&gt; Oh. So we're going to end on a high note.

00:04:13.010 --> 00:04:15.560
&gt;&gt; No, maybe we should say something before we depart.

00:04:15.560 --> 00:04:17.839
&gt;&gt; Let's do that. Come up with something positive to say.

00:04:17.839 --> 00:04:18.570
&gt;&gt; Okay.

