WEBVTT
Kind: captions
Language: en

00:00:05.057 --> 00:00:07.519
Paco is really excited
about what he's heard

00:00:07.519 --> 00:00:09.486
about the benefits he'll receive

00:00:09.486 --> 00:00:11.618
from making his application
with Google App Engine.

00:00:11.651 --> 00:00:14.024
Since he's not familiarized
with the platform,

00:00:14.024 --> 00:00:17.420
he decides to start from zero
with the most basic application,

00:00:17.420 --> 00:00:20.255
an application that shows
the home page or landing page

00:00:20.255 --> 00:00:23.387
to users upon accessing.
This way he'll become familiar

00:00:23.387 --> 00:00:26.255
with it and begin to develop it
with a solid foundation.

00:00:26.750 --> 00:00:29.519
THE GOOGLE APP ENGINE SDK

00:00:30.585 --> 00:00:33.420
Before beginning to develop
the first thing Paco needs to do

00:00:33.420 --> 00:00:36.255
is download and install
SDK on his computer:

00:00:36.420 --> 00:00:39.222
Google App Engine
"Software Development Kit."

00:00:39.222 --> 00:00:41.420
It's a software package
with different tools

00:00:41.420 --> 00:00:44.024
that will allow him
to interact with the platform

00:00:44.024 --> 00:00:46.816
during the entire lifecycle
of his application.

00:00:47.090 --> 00:00:49.123
It's possible that Paco
and his work team

00:00:49.123 --> 00:00:51.783
use computers with different
operative systems

00:00:51.783 --> 00:00:53.618
during application development.

00:00:53.618 --> 00:00:55.552
This is not a problem,
since SDK

00:00:55.552 --> 00:00:57.915
is adapted for the different
operative systems,

00:00:57.915 --> 00:00:59.750
Windows, Mac or Linux.

00:01:00.519 --> 00:01:02.849
As for programming language
or run time,

00:01:02.849 --> 00:01:05.387
they are currently supported
by Google App Engine,

00:01:05.420 --> 00:01:07.783
Python 2.7, Java 7

00:01:07.783 --> 00:01:09.981
and languages run by JVM,

00:01:09.981 --> 00:01:12.354
Php 5.4 and Go.

00:01:13.222 --> 00:01:15.387
Paco has always been
a big fan of Python

00:01:15.387 --> 00:01:17.354
and wants to use it
for this project.

00:01:17.354 --> 00:01:19.519
Not just because
he's familiar with the language,

00:01:19.519 --> 00:01:21.024
but because it offers coverage

00:01:21.024 --> 00:01:23.024
for the majority
of platform services.

00:01:23.090 --> 00:01:26.519
The only prerequisite
is having Python SDK installed.

00:01:27.057 --> 00:01:29.684
Paco is ready to continue
with the installation.

00:01:29.783 --> 00:01:32.321
But what exactly
does SDK include?

00:01:32.816 --> 00:01:35.321
A local web server
that allows us

00:01:35.321 --> 00:01:37.552
to run the applications
on our computers.

00:01:37.552 --> 00:01:40.387
A tool that allows us
to upload local code

00:01:40.387 --> 00:01:42.090
to the production environment.

00:01:42.156 --> 00:01:44.255
A process known as deploy.

00:01:44.486 --> 00:01:47.783
Personal APIs and libraries
that offer programming access

00:01:47.783 --> 00:01:49.948
to Google App Engine services.

00:01:49.948 --> 00:01:51.222
Third-party libraries,

00:01:51.222 --> 00:01:53.750
included because they are
dependents of Google App Engine

00:01:53.750 --> 00:01:56.024
personal libraries
or because they are usually used

00:01:56.024 --> 00:01:59.123
for developing
most applications.

00:01:59.156 --> 00:02:01.354
Applications or additional tools

00:02:01.354 --> 00:02:03.552
that help
the development process.

00:02:03.684 --> 00:02:07.024
Optional integration
with Integrated Development

00:02:07.189 --> 00:02:09.255
Environment (IDE),
specifically for Java runtime

00:02:09.255 --> 00:02:11.783
an official plug-in
for Eclipse is included.

00:02:12.123 --> 00:02:15.321
Keep in mind that
even though SDK runs locally,

00:02:15.321 --> 00:02:17.717
it's in charge
of closely emulating

00:02:17.717 --> 00:02:20.024
the Google App Engine
production environment.

00:02:20.189 --> 00:02:22.519
So you will notice
that resources are restricted

00:02:22.519 --> 00:02:24.354
to those that won't have access

00:02:24.354 --> 00:02:27.684
or features that won't
be available to the sandbox.

00:02:27.684 --> 00:02:30.222
For example:
access to the file system

00:02:30.222 --> 00:02:32.552
or the system's
low-level features.

00:02:32.552 --> 00:02:34.486
SDK code is open.

00:02:34.486 --> 00:02:37.948
And it is frequently updated
with new characteristics

00:02:37.948 --> 00:02:40.024
and improvements
to existing features.

00:02:40.123 --> 00:02:43.024
APPLICATION STRUCTURE
AND BASIC COMPONENTS

00:02:45.090 --> 00:02:46.189
With SDK installed,

00:02:46.189 --> 00:02:48.420
Paco is ready
to develop his application.

00:02:48.420 --> 00:02:50.321
As with any web application,
this implies

00:02:50.321 --> 00:02:52.090
having a small part
of the configuration

00:02:52.090 --> 00:02:54.750
in a file called
app.yaml,

00:02:55.024 --> 00:02:56.684
plus a file with the content

00:02:56.684 --> 00:02:59.024
that will initially be shown
in the application,

00:02:59.057 --> 00:03:00.618
a simple, landing page.

00:03:01.849 --> 00:03:03.651
In the file app.yaml,
Paco will define

00:03:03.651 --> 00:03:06.585
the basic configuration
of his application.

00:03:06.585 --> 00:03:08.750
By using an application
written in Python,

00:03:08.750 --> 00:03:11.981
the yaml format will be used
in the following fields:

00:03:12.255 --> 00:03:14.288
Application:
used to assign

00:03:14.288 --> 00:03:16.651
a unique identifier
to the application.

00:03:16.750 --> 00:03:17.849
Version:

00:03:17.849 --> 00:03:20.486
defines the name of a code
version of the application.

00:03:20.585 --> 00:03:22.024
Google App Engine
allows there to be

00:03:22.024 --> 00:03:24.915
various versions of the
application at the same time.

00:03:24.948 --> 00:03:26.849
Runtime:
corresponds to the name

00:03:26.849 --> 00:03:28.354
of the execution environment

00:03:28.354 --> 00:03:29.882
used to run our application.

00:03:29.981 --> 00:03:31.189
In Paco's case,

00:03:31.189 --> 00:03:33.651
we will use the runtime
python27.

00:03:34.420 --> 00:03:37.024
Api_version:
specifies the API version

00:03:37.024 --> 00:03:39.189
that we will use
for a determined runtime.

00:03:39.189 --> 00:03:42.618
There currently exists a unique
API for the Python runtime.

00:03:43.024 --> 00:03:45.189
Threadsafe:
configures our application

00:03:45.189 --> 00:03:46.519
so that every instance

00:03:46.519 --> 00:03:48.948
is able to execute
concurrent processes,

00:03:48.981 --> 00:03:51.255
we normally use the "true" value

00:03:51.255 --> 00:03:52.618
in Python applications.

00:03:53.288 --> 00:03:54.948
Handlers:
define expressions

00:03:54.948 --> 00:03:57.684
that allow URLs to be assigned
to the scripts

00:03:57.684 --> 00:03:59.288
that will attend
to the http applications.

00:03:59.486 --> 00:04:00.948
We can also define routes

00:04:00.948 --> 00:04:03.189
that will deliver
static HTML files,

00:04:03.189 --> 00:04:04.585
CSS style pages,

00:04:04.585 --> 00:04:06.783
Java scripts or images,
among others.

00:04:07.585 --> 00:04:09.618
For any App Engine application,

00:04:09.618 --> 00:04:11.684
the mentioned fields
will be obligatory.

00:04:11.816 --> 00:04:13.948
For the application
with the census landing pace,

00:04:13.948 --> 00:04:15.651
Paco will define two handlers.

00:04:15.882 --> 00:04:18.222
The route /index.html

00:04:18.222 --> 00:04:21.189
will directly serve
the index.html file

00:04:21.189 --> 00:04:23.354
with the landing page content.

00:04:24.024 --> 00:04:27.090
All the content whose route
begins with /assets

00:04:27.090 --> 00:04:28.948
will be served as static files

00:04:28.948 --> 00:04:31.189
from the static file
of the application.

00:04:31.222 --> 00:04:34.255
Paco copies an image file
with the census logo,

00:04:34.255 --> 00:04:37.222
called logo.png,
in the static file,

00:04:37.255 --> 00:04:39.585
which has an HTML reference.

00:04:41.189 --> 00:04:45.024
THE DEVELOPMENT SERVER

00:04:45.552 --> 00:04:47.288
After finishing with the files,

00:04:47.288 --> 00:04:50.189
Paco feels very anxious
and wants to see

00:04:50.189 --> 00:04:51.849
that everything
really works as hoped.

00:04:51.849 --> 00:04:54.486
To do this, he uses
a very important component

00:04:54.486 --> 00:04:57.882
that is included with the SDK,
the development web server.

00:04:57.882 --> 00:05:00.222
This will allow him to execute
his application locally,

00:05:00.222 --> 00:05:02.354
before unfolding it.

00:05:02.354 --> 00:05:03.453
In other words,

00:05:03.453 --> 00:05:06.090
the development server
is ideal for testing

00:05:06.090 --> 00:05:08.684
and validating the application's
general behavior.

00:05:09.288 --> 00:05:11.453
To start the local
development server

00:05:11.453 --> 00:05:13.090
Paco has three alternatives:

00:05:13.156 --> 00:05:15.618
use Google App Engine Launcher

00:05:15.618 --> 00:05:18.453
a GUI available for Linux,
Mac and Windows,

00:05:19.057 --> 00:05:21.321
the dev_appserver.py command

00:05:21.321 --> 00:05:23.024
through the command line,

00:05:23.288 --> 00:05:24.387
or an IDE.

00:05:24.684 --> 00:05:26.750
Eclipse and Pycharm
offer plug-ins

00:05:26.750 --> 00:05:28.882
to directly complete
this action.

00:05:29.618 --> 00:05:31.684
LET'S GET TO WORK!

00:05:32.321 --> 00:05:34.684
Launching the local server
using the launcher

00:05:34.684 --> 00:05:35.816
is very simple.

00:05:35.816 --> 00:05:38.156
Paco adds the file
that contains his application

00:05:38.156 --> 00:05:40.783
and then just clicks
on the "Run" button.

00:05:40.849 --> 00:05:42.354
The local server will start
serving his application

00:05:42.354 --> 00:05:45.189
in port 8080.

00:05:51.354 --> 00:05:52.552
Alternatively

00:05:52.552 --> 00:05:54.981
the personal terminal
to his operative system opens

00:05:54.981 --> 00:05:56.849
and is located in
the application root directory,

00:05:56.849 --> 00:06:00.288
where the app.yaml file
is also located.

00:06:00.321 --> 00:06:02.453
Paco writes
the following command.

00:06:06.816 --> 00:06:10.222
Upon starting, the local server
sees messages in the terminal

00:06:10.222 --> 00:06:13.882
that indicate the port
where his application launched.

00:06:14.816 --> 00:06:17.717
To see his landing page
in the development web server,

00:06:17.750 --> 00:06:21.189
Paco enters the URL address
localhost:8080,

00:06:21.189 --> 00:06:22.915
from any navigator.

00:06:22.915 --> 00:06:25.288
Upon entering,
a GET application is created

00:06:25.288 --> 00:06:26.783
to the root route, slash,

00:06:26.849 --> 00:06:28.486
and it is answered

00:06:28.486 --> 00:06:31.882
with the content index.html file

00:06:31.882 --> 00:06:33.453
described in the prior section.

00:06:33.717 --> 00:06:35.354
This way Paco validates

00:06:35.354 --> 00:06:37.486
that the content
shown on the navigator

00:06:37.486 --> 00:06:39.354
corresponds to the landing page,

00:06:39.354 --> 00:06:42.387
including the logo image
in /assets.

00:06:43.189 --> 00:06:45.024
Paco could
launch the application

00:06:45.024 --> 00:06:46.849
and did tests
on his local machine.

00:06:46.849 --> 00:06:49.849
Now it's your turn to experiment
with the repository

00:06:49.849 --> 00:06:51.387
and launch the landing page.

00:06:51.387 --> 00:06:54.189
In the following lessons,
we will review the steps

00:06:54.189 --> 00:06:56.288
necessary to publish
on Google App Engine.

00:06:56.354 --> 00:06:57.651
Keep programming.

