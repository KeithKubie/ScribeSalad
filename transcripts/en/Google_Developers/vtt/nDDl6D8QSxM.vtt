WEBVTT
Kind: captions
Language: en

00:00:02.490 --> 00:00:03.740
TAL OPPENHEIMER: Hi, everyone.

00:00:03.740 --> 00:00:05.000
My name is Tal Openheimer.

00:00:05.000 --> 00:00:06.880
I'm a product manager
on the Chrome team,

00:00:06.880 --> 00:00:08.880
and I'm here to talk to
you about the mobile web

00:00:08.880 --> 00:00:11.160
and how you can create
amazing mobile experiences,

00:00:11.160 --> 00:00:15.100
particularly for users in India.

00:00:15.100 --> 00:00:17.690
So, as we know, in
India in particular,

00:00:17.690 --> 00:00:20.430
we see users coming online
for the very first time

00:00:20.430 --> 00:00:21.832
on their mobile devices.

00:00:21.832 --> 00:00:23.290
This means that
they're interacting

00:00:23.290 --> 00:00:25.672
with the experiences that
you build on a smartphone,

00:00:25.672 --> 00:00:27.630
and they haven't necessarily
interacted with it

00:00:27.630 --> 00:00:29.710
on any other device.

00:00:29.710 --> 00:00:33.559
Now, when we talk about the
mobile web and mobile overall,

00:00:33.559 --> 00:00:35.600
we know that there are
different constraints that

00:00:35.600 --> 00:00:37.640
come in when users are
accessing your experience

00:00:37.640 --> 00:00:39.220
on a mobile device.

00:00:39.220 --> 00:00:42.310
Screen sizes can vary quite
greatly, with a lot of devices

00:00:42.310 --> 00:00:44.420
being relatively small in size.

00:00:44.420 --> 00:00:46.680
We know that RAM can
also vary, and we still

00:00:46.680 --> 00:00:50.650
see a number of devices with
512 megabytes, RAM coming out

00:00:50.650 --> 00:00:51.840
in the market.

00:00:51.840 --> 00:00:53.500
And what's more,
on-device storage

00:00:53.500 --> 00:00:55.070
can also vary to
the same extent.

00:00:55.070 --> 00:00:57.236
There are a lot of devices
that are still coming out

00:00:57.236 --> 00:01:00.050
with four gigabytes of on-device
storage, and so a lot of users

00:01:00.050 --> 00:01:04.900
are relying on external SD
cards for their storage needs.

00:01:04.900 --> 00:01:06.650
And this means that
when you're developing

00:01:06.650 --> 00:01:08.154
for these users
on these devices,

00:01:08.154 --> 00:01:10.070
you have some different
challenges when you're

00:01:10.070 --> 00:01:11.653
thinking about how
to actually deliver

00:01:11.653 --> 00:01:12.810
your experience to them.

00:01:12.810 --> 00:01:15.820
With native apps, installs
can be a real barrier.

00:01:15.820 --> 00:01:18.220
Users need to take an
extra step to even interact

00:01:18.220 --> 00:01:19.900
with your experience
in the first place,

00:01:19.900 --> 00:01:21.640
and they don't necessarily
know what they're getting.

00:01:21.640 --> 00:01:24.098
And so you have this extra step
that you're expecting users

00:01:24.098 --> 00:01:26.850
to take before they've even
seen what you have to offer.

00:01:26.850 --> 00:01:29.310
What's more is even if
users take this extra step

00:01:29.310 --> 00:01:32.044
to install your experience,
the storage constraints

00:01:32.044 --> 00:01:33.960
on their device can make
it really problematic

00:01:33.960 --> 00:01:35.751
for them to actually
be able to install it,

00:01:35.751 --> 00:01:37.610
even if they're trying to.

00:01:37.610 --> 00:01:40.399
And so you need to focus a
lot on shrinking your APK size

00:01:40.399 --> 00:01:42.190
and making it small so
that it can actually

00:01:42.190 --> 00:01:44.220
fit on people's devices.

00:01:44.220 --> 00:01:46.870
And finally, we're all
developing things frequently

00:01:46.870 --> 00:01:48.712
and improving our
experience constantly,

00:01:48.712 --> 00:01:51.170
and you always want to make
sure your users are up-to-date.

00:01:51.170 --> 00:01:53.000
But with all of these
various constraints,

00:01:53.000 --> 00:01:54.880
both on a connectivity
standpoint

00:01:54.880 --> 00:01:56.990
and with just the storage
space on your device,

00:01:56.990 --> 00:01:59.110
it can become really
challenging to get users

00:01:59.110 --> 00:02:01.180
on the latest experience
with the best features

00:02:01.180 --> 00:02:03.150
that you've built, and
keeping them up-to-date

00:02:03.150 --> 00:02:03.970
can be really hard.

00:02:06.650 --> 00:02:08.670
But there is a
platform that all users

00:02:08.670 --> 00:02:10.669
have on their smartphone
that actually addresses

00:02:10.669 --> 00:02:11.710
a number of these issues.

00:02:11.710 --> 00:02:14.120
The mobile web is set
up to actually help

00:02:14.120 --> 00:02:17.050
with a lot of these problems.

00:02:17.050 --> 00:02:19.600
With the mobile web, your
experience right off the bat

00:02:19.600 --> 00:02:22.890
is accessible to everyone,
without any install barrier.

00:02:22.890 --> 00:02:24.560
This means that they
can navigate to it

00:02:24.560 --> 00:02:26.730
and see the experience
you have immediately.

00:02:26.730 --> 00:02:29.560
They don't need to take
any extra steps from there.

00:02:29.560 --> 00:02:31.320
As a result, storage
constraints that

00:02:31.320 --> 00:02:35.050
might be introduced due to their
device and the sort of profile

00:02:35.050 --> 00:02:36.950
of that device aren't
a problem for them

00:02:36.950 --> 00:02:38.866
to interact with their
experience for the very

00:02:38.866 --> 00:02:39.760
first time.

00:02:39.760 --> 00:02:43.040
And as you actually improve
your experience on the platform,

00:02:43.040 --> 00:02:44.700
the users are
automatically up-to-date.

00:02:44.700 --> 00:02:46.560
The next time they navigate
to your experience,

00:02:46.560 --> 00:02:47.290
it's right there.

00:02:47.290 --> 00:02:48.660
They have the latest feature.

00:02:48.660 --> 00:02:50.360
You don't need to
worry about convincing

00:02:50.360 --> 00:02:55.160
them to install an update
or anything of that sort.

00:02:55.160 --> 00:02:58.610
But in addition to
just the constraints

00:02:58.610 --> 00:03:00.750
that the mobile web can
address, the mobile web

00:03:00.750 --> 00:03:03.010
also has an incredible reach.

00:03:03.010 --> 00:03:05.620
Looking at the average
apps use per month,

00:03:05.620 --> 00:03:07.760
we see that on native,
a user on average

00:03:07.760 --> 00:03:10.870
visits about 25
native apps per month,

00:03:10.870 --> 00:03:13.480
compared to mobile, where we
see four times this amount,

00:03:13.480 --> 00:03:16.550
with users navigating
to over 100 mobile web

00:03:16.550 --> 00:03:19.390
experiences per month.

00:03:19.390 --> 00:03:23.150
And this really translates to
a drastically increased reach.

00:03:23.150 --> 00:03:27.530
Looking at the top 1,000 mobile
websites and the top 1,000

00:03:27.530 --> 00:03:30.700
native apps, we see that
on average the mobile web

00:03:30.700 --> 00:03:33.510
sees roughly 2 and
1/2 times the number

00:03:33.510 --> 00:03:35.110
of unique monthly visitors.

00:03:35.110 --> 00:03:37.440
And so by having a
mobile web experience,

00:03:37.440 --> 00:03:40.930
you're really able to get more
users and expand that growth.

00:03:40.930 --> 00:03:43.840
What's more, a recent
analysis by Morgan Stanley

00:03:43.840 --> 00:03:45.560
found that not only
is there a difference

00:03:45.560 --> 00:03:47.190
in the discoverability
and the access

00:03:47.190 --> 00:03:49.390
that people have to mobile
web, but this is actually

00:03:49.390 --> 00:03:51.170
growing at a faster rate.

00:03:51.170 --> 00:03:54.287
So we're seeing two times the
growth of mobile web traffic

00:03:54.287 --> 00:03:57.862
than we are seeing to
native mobile traffic.

00:03:57.862 --> 00:03:59.320
And just to put
this in perspective

00:03:59.320 --> 00:04:01.080
and give a specific
example here,

00:04:01.080 --> 00:04:04.115
Flipboard recently launched
a mobile web experience.

00:04:04.115 --> 00:04:05.740
And when they launched
this experience,

00:04:05.740 --> 00:04:09.660
they saw a 75% increase in
their user base on mobile.

00:04:09.660 --> 00:04:12.469
And this was on mobile overall,
not just on mobile web.

00:04:12.469 --> 00:04:14.260
So by launching this
mobile web experience,

00:04:14.260 --> 00:04:15.720
they were able to
grow their user base

00:04:15.720 --> 00:04:18.089
across the board on mobile
because they were moving some

00:04:18.089 --> 00:04:20.079
of these barriers to
people interacting

00:04:20.079 --> 00:04:23.270
with their experience
in the first place.

00:04:23.270 --> 00:04:27.612
And beyond just the
reach of mobile web,

00:04:27.612 --> 00:04:30.070
there's a lot that the mobile
web and that we on the Chrome

00:04:30.070 --> 00:04:32.730
team are working on to make sure
that the experience users get

00:04:32.730 --> 00:04:35.359
across the web is one that
works really well, particularly

00:04:35.359 --> 00:04:37.150
with some of the
constraints and challenges

00:04:37.150 --> 00:04:39.140
that we see in India.

00:04:39.140 --> 00:04:41.070
While we already have
a data saver feature

00:04:41.070 --> 00:04:43.240
on Chrome for
Android, we recently

00:04:43.240 --> 00:04:46.110
launched an improvement
to our data saver feature

00:04:46.110 --> 00:04:49.170
that lets users save up
to 70% of their data,

00:04:49.170 --> 00:04:51.260
and we launched
this in India first.

00:04:51.260 --> 00:04:54.050
What this feature does is when
we identify a particularly

00:04:54.050 --> 00:04:56.400
slow network, we
replace most images

00:04:56.400 --> 00:04:59.970
on the page with placeholders
so that users remain in control

00:04:59.970 --> 00:05:01.350
of where their data is going.

00:05:01.350 --> 00:05:03.180
Users can still load
images as needed

00:05:03.180 --> 00:05:05.020
by either long pressing
on a single image

00:05:05.020 --> 00:05:07.372
or just selecting load
all images for that page.

00:05:07.372 --> 00:05:08.830
And so what we've
done here is help

00:05:08.830 --> 00:05:11.040
to remove the barrier for those
users who are particularly

00:05:11.040 --> 00:05:13.110
sensitive to data to make
sure that they're always

00:05:13.110 --> 00:05:15.359
able to access the experiences
that they want and need

00:05:15.359 --> 00:05:16.730
on the mobile web.

00:05:16.730 --> 00:05:18.930
But we also know that
sometimes users are just

00:05:18.930 --> 00:05:21.740
completely offline, and
we want to make sure

00:05:21.740 --> 00:05:24.682
that the mobile web works
well for them as well.

00:05:24.682 --> 00:05:26.890
And, as a result, we're
currently doing a field trial

00:05:26.890 --> 00:05:29.440
for a new feature that will
let users proactively offline

00:05:29.440 --> 00:05:31.560
content on the mobile web.

00:05:31.560 --> 00:05:34.640
This way users can
reliably know that if they

00:05:34.640 --> 00:05:36.690
need a piece of information
on your experience

00:05:36.690 --> 00:05:38.520
or across the web
in general, they

00:05:38.520 --> 00:05:41.157
can get it whether
they're online or offline.

00:05:41.157 --> 00:05:43.490
But in addition to some of
these improvements that we've

00:05:43.490 --> 00:05:45.360
made on Chrome, we've
also been working

00:05:45.360 --> 00:05:47.770
to improve the mobile
web platform as a whole,

00:05:47.770 --> 00:05:51.240
to make sure that it really
works well in India and beyond.

00:05:51.240 --> 00:05:53.530
And as part of this, we're
introducing a new concept

00:05:53.530 --> 00:05:55.170
called progressive web apps.

00:05:55.170 --> 00:05:58.040
And what this really does
is builds on the experience

00:05:58.040 --> 00:06:00.945
that we have in Chrome,
but in a more general area,

00:06:00.945 --> 00:06:03.070
to make sure that you have
all the capabilities you

00:06:03.070 --> 00:06:04.927
need on the mobile web.

00:06:04.927 --> 00:06:06.510
And to talk more
about that, I'm going

00:06:06.510 --> 00:06:08.710
to hand it over to Paul
Kinlan, a developer

00:06:08.710 --> 00:06:10.016
advocate on Chrome team.

00:06:14.060 --> 00:06:16.230
PAUL KINLAN: Hey,
Tal, thank you.

00:06:16.230 --> 00:06:17.810
Hi, everyone.

00:06:17.810 --> 00:06:18.310
I won't lie.

00:06:18.310 --> 00:06:19.351
I'm a little bit nervous.

00:06:19.351 --> 00:06:21.650
I've got my water because
my mouth is getting dry.

00:06:21.650 --> 00:06:23.010
And I'm told that
this is a flat table,

00:06:23.010 --> 00:06:24.460
so I'm going to
put us over there.

00:06:24.460 --> 00:06:27.880
But in the meantime, I'm
going to ask you a question.

00:06:27.880 --> 00:06:30.227
Who's excited about "Star Wars?"

00:06:30.227 --> 00:06:31.810
Good, a couple of
people, that's good.

00:06:31.810 --> 00:06:34.480
Who wants to know how it ends?

00:06:34.480 --> 00:06:36.980
No one, good, because I don't
know how it ends either.

00:06:36.980 --> 00:06:39.840
So I actually do want to
ask some serious questions.

00:06:39.840 --> 00:06:43.830
So who in the audience is
builds native applications, not

00:06:43.830 --> 00:06:46.040
primarily but just a
part of the-- just builds

00:06:46.040 --> 00:06:48.820
native applications Android?

00:06:48.820 --> 00:06:50.190
[INAUDIBLE]

00:06:50.190 --> 00:06:51.810
I know one person
builds for the web

00:06:51.810 --> 00:06:53.018
because I've seen the tweets.

00:06:53.018 --> 00:06:54.764
Who's JSLovers?

00:06:54.764 --> 00:06:57.180
There's someone in the audience
who-- there we are, hello.

00:06:57.180 --> 00:06:57.929
I see your tweets.

00:06:57.929 --> 00:07:00.460
So who's a web developer?

00:07:00.460 --> 00:07:01.569
That's good.

00:07:01.569 --> 00:07:02.360
It's a good number.

00:07:02.360 --> 00:07:05.840
So I'm here to talk about a
progressive web applications.

00:07:05.840 --> 00:07:07.480
Actually, this is my slide.

00:07:07.480 --> 00:07:08.065
This is me.

00:07:08.065 --> 00:07:09.857
It doesn't really
matter that much.

00:07:09.857 --> 00:07:12.190
But I'm here to talk about
progressive web applications.

00:07:12.190 --> 00:07:13.950
And one of the things
I want to talk about,

00:07:13.950 --> 00:07:16.283
and I'm going to use constantly
or try to use constantly

00:07:16.283 --> 00:07:18.670
throughout this experience,
is this experience

00:07:18.670 --> 00:07:19.930
created by Flipkart.

00:07:19.930 --> 00:07:22.410
We think that this is a
progressive web application.

00:07:22.410 --> 00:07:25.010
And what we mean by a
progressive web application

00:07:25.010 --> 00:07:26.320
are a number of things.

00:07:26.320 --> 00:07:28.430
One is that kind of
traditional web applications

00:07:28.430 --> 00:07:32.400
that can work across, in theory,
any browser from UC Mini up

00:07:32.400 --> 00:07:34.739
to the current or the
latest versions of Chrome.

00:07:34.739 --> 00:07:37.280
But ideally, they're enhanced
through progressive enhancement

00:07:37.280 --> 00:07:39.730
as the browser
capabilities become greater

00:07:39.730 --> 00:07:40.730
on each of the browsers.

00:07:40.730 --> 00:07:42.914
So we know, for instance,
that UC Mini, especially,

00:07:42.914 --> 00:07:44.830
doesn't necessarily
always support JavaScript.

00:07:44.830 --> 00:07:46.705
You should be able to
build a progressive web

00:07:46.705 --> 00:07:49.240
application that ultimately
works across these browsers.

00:07:49.240 --> 00:07:51.670
And then as the browser
capabilities get more enhanced,

00:07:51.670 --> 00:07:55.750
you can kind of level
up the experiences

00:07:55.750 --> 00:07:58.002
with more kind of
features and capabilities.

00:07:58.002 --> 00:07:59.710
But that's kind of
the website the thing.

00:07:59.710 --> 00:08:02.290
That's kind of the progressive
web part of progressive web

00:08:02.290 --> 00:08:03.360
applications.

00:08:03.360 --> 00:08:05.300
And the apps part
is one of the things

00:08:05.300 --> 00:08:06.990
that we've been trying to work
on of the last couple of years

00:08:06.990 --> 00:08:08.730
in the Chrome team
is trying to let you

00:08:08.730 --> 00:08:11.984
as a web developer build more
engaging app-like experiences.

00:08:11.984 --> 00:08:13.650
And there are a number
of things that we

00:08:13.650 --> 00:08:15.580
know that these
experiences need to do

00:08:15.580 --> 00:08:17.538
and that we know where
a number of things where

00:08:17.538 --> 00:08:19.470
the Android and the
iPhone app ecosystem

00:08:19.470 --> 00:08:22.850
excels over kind of what
you can deliver on the web.

00:08:22.850 --> 00:08:25.380
And primarily, it's all about
working offline and building

00:08:25.380 --> 00:08:26.838
kind of resilient
applications that

00:08:26.838 --> 00:08:30.110
work especially well
in scenarios where

00:08:30.110 --> 00:08:33.210
there's either port networks
or 2G or kind of high latency

00:08:33.210 --> 00:08:33.970
as well.

00:08:33.970 --> 00:08:35.480
They work offline, like we said.

00:08:35.480 --> 00:08:36.640
But they're also
fast and smooth.

00:08:36.640 --> 00:08:37.880
And what we mean
by fast and smooth

00:08:37.880 --> 00:08:39.464
is like they're move
to interact with.

00:08:39.464 --> 00:08:41.171
You click a button,
and it does the thing

00:08:41.171 --> 00:08:42.150
that you want it to do.

00:08:42.150 --> 00:08:44.440
But more importantly,
it loads instantly.

00:08:44.440 --> 00:08:45.850
And normally,
native applications

00:08:45.850 --> 00:08:48.884
work quite well in this scenario
because all the kind of content

00:08:48.884 --> 00:08:51.050
and logical and structure
is kind of downloaded when

00:08:51.050 --> 00:08:52.460
you do that first download.

00:08:52.460 --> 00:08:55.290
We don't always get
that on the web.

00:08:55.290 --> 00:08:57.760
But they're also really easy
to reengage with as well.

00:08:57.760 --> 00:08:59.230
Like native
applications have a lot

00:08:59.230 --> 00:09:01.605
of features which allow users
to kind of keep coming back

00:09:01.605 --> 00:09:03.688
to your application, whether
it's something that's

00:09:03.688 --> 00:09:06.432
on the home screen and they
can tap and it loads instantly,

00:09:06.432 --> 00:09:08.140
or whether it's via
something like a push

00:09:08.140 --> 00:09:09.980
notification, where
they have contextually

00:09:09.980 --> 00:09:12.274
relevant and timely
information to the user that

00:09:12.274 --> 00:09:13.440
is delivered to that device.

00:09:13.440 --> 00:09:15.470
They tap it and go
into the application.

00:09:15.470 --> 00:09:16.560
And for a long
time, we've not been

00:09:16.560 --> 00:09:17.300
able to do that on the web.

00:09:17.300 --> 00:09:19.330
But we've been working on these
technologies for a little while

00:09:19.330 --> 00:09:22.310
inside Chrome, and we think
kind of the progressive web apps

00:09:22.310 --> 00:09:24.400
kind of brand, or not
brand essentially, but name

00:09:24.400 --> 00:09:27.059
an moniker, actually
kind of identifies

00:09:27.059 --> 00:09:28.600
like all these
different technologies

00:09:28.600 --> 00:09:30.110
that we brought to
the web to enable

00:09:30.110 --> 00:09:33.397
you to build these kind of
native-like experiences.

00:09:33.397 --> 00:09:35.730
So I briefly kind of talked
about all the different kind

00:09:35.730 --> 00:09:37.050
of capabilities that
you kind of want

00:09:37.050 --> 00:09:39.145
to get from an application
platform at least.

00:09:39.145 --> 00:09:40.530
But fundamentally,
they're broken

00:09:40.530 --> 00:09:41.730
into three different areas.

00:09:41.730 --> 00:09:43.120
The fact that users
and developers want

00:09:43.120 --> 00:09:44.578
their experiences
to be installable

00:09:44.578 --> 00:09:46.940
and on to the device and
immediately accessible

00:09:46.940 --> 00:09:50.400
to the users when they tap on
the iPhone, their performance,

00:09:50.400 --> 00:09:51.900
as in like they're
smooth to scroll,

00:09:51.900 --> 00:09:53.494
but they also load
instantly, and then

00:09:53.494 --> 00:09:54.660
ultimately they're engaging.

00:09:54.660 --> 00:09:57.230
They integrate with all the
device's native features as

00:09:57.230 --> 00:09:58.984
and when the user needs them.

00:09:58.984 --> 00:10:00.650
So I want to talk
about some of the work

00:10:00.650 --> 00:10:02.170
that we've been doing on
the Chrome side of things

00:10:02.170 --> 00:10:03.550
and also with the
browser vendors

00:10:03.550 --> 00:10:06.060
as well, including
Mozilla and Opera,

00:10:06.060 --> 00:10:08.390
to talk about how you can
make installable experiences.

00:10:08.390 --> 00:10:11.470
And the first, and one of the
most popular features that

00:10:11.470 --> 00:10:14.604
developers requested, was the
ability to add-to-home-screen.

00:10:14.604 --> 00:10:16.770
Now, Flipkart have done
this experience as well with

00:10:16.770 --> 00:10:19.030
add-to-home-screen, where
they can get your experience

00:10:19.030 --> 00:10:21.150
installed onto the device.

00:10:21.150 --> 00:10:22.990
And it's done in
a couple of ways,

00:10:22.990 --> 00:10:24.600
and I'm going to talk about
how it's done with the manifest

00:10:24.600 --> 00:10:25.433
file in the minutes.

00:10:25.433 --> 00:10:28.010
But fundamentally, once
Chrome understands and knows

00:10:28.010 --> 00:10:30.340
that your experience is a
progressive web application,

00:10:30.340 --> 00:10:33.400
we can do the prompt that we
saw a second ago automatically,

00:10:33.400 --> 00:10:34.790
to ask the user
whether they want

00:10:34.790 --> 00:10:36.584
to install this
experience on the device,

00:10:36.584 --> 00:10:38.000
whether they want
to have a closer

00:10:38.000 --> 00:10:39.620
relationship with
that experience.

00:10:39.620 --> 00:10:41.120
And Flipkart do a
really nice thing,

00:10:41.120 --> 00:10:43.272
where in the top
right of the screen,

00:10:43.272 --> 00:10:44.480
there's a little person icon.

00:10:44.480 --> 00:10:46.771
They defer the fact that we
can tell the user that they

00:10:46.771 --> 00:10:48.860
can install this experience
to a point in time

00:10:48.860 --> 00:10:50.944
when they want the user
to install the experience.

00:10:50.944 --> 00:10:52.943
So we have the heuristics
behind the scenes that

00:10:52.943 --> 00:10:55.185
let you build these installable
experiences but don't

00:10:55.185 --> 00:10:56.560
get in the way of
the user trying

00:10:56.560 --> 00:10:58.575
to complete a transaction.

00:10:58.575 --> 00:11:00.200
The next to this is
that they want you,

00:11:00.200 --> 00:11:02.330
once you've actually got your
experience on the home screen,

00:11:02.330 --> 00:11:04.310
normally, on the web,
when you click the link,

00:11:04.310 --> 00:11:06.880
you get a white screen and
a URL bar across the top,

00:11:06.880 --> 00:11:09.540
and it kind of sits there
for a good couple of seconds,

00:11:09.540 --> 00:11:11.600
and it takes a little
while to load up.

00:11:11.600 --> 00:11:14.080
Well, you don't want that
in an app-like experience.

00:11:14.080 --> 00:11:16.530
So recently, we've just
introduced the splash screen.

00:11:16.530 --> 00:11:17.988
And the idea behind
a splash screen

00:11:17.988 --> 00:11:19.820
is you can get your
brand and your presence

00:11:19.820 --> 00:11:21.217
inside that loading experience.

00:11:21.217 --> 00:11:23.800
While the browser is trying to
load up, boot up, and also load

00:11:23.800 --> 00:11:26.072
up your experience, you
can have your brand there

00:11:26.072 --> 00:11:27.280
until the first pane happens.

00:11:27.280 --> 00:11:29.620
And then once that happens,
you're in complete control.

00:11:29.620 --> 00:11:31.475
And again, it's quite
simple to implement.

00:11:31.475 --> 00:11:32.850
And the way that
you do implement

00:11:32.850 --> 00:11:34.730
the add-to-home
screen experience,

00:11:34.730 --> 00:11:37.330
you don't need things like
ServiceWorker, which we've also

00:11:37.330 --> 00:11:39.520
talked a little bit
about the rest of today,

00:11:39.520 --> 00:11:42.420
is you just need a manifest
file and a small piece of HTML.

00:11:42.420 --> 00:11:45.020
The manifest file basically
describes how your experience

00:11:45.020 --> 00:11:47.120
should appear on the
user's device-- what

00:11:47.120 --> 00:11:49.020
is the name on the
home screen, what

00:11:49.020 --> 00:11:51.920
is the icon that should be
displayed that the user needs

00:11:51.920 --> 00:11:52.890
to click.

00:11:52.890 --> 00:11:55.550
But you can also describe what
kind of the theme color is.

00:11:55.550 --> 00:11:57.670
Like when the user goes
to the tab switcher, what

00:11:57.670 --> 00:12:00.877
is the color of the application
bar across the side.

00:12:00.877 --> 00:12:02.960
But more importantly, you
can describe and control

00:12:02.960 --> 00:12:05.356
exactly how you want the user
to enter your experience.

00:12:05.356 --> 00:12:07.480
So you can provide things
like the start URL, which

00:12:07.480 --> 00:12:09.550
lets the user basically
boot up and go

00:12:09.550 --> 00:12:12.420
to the front page, rather than
a random page in the application

00:12:12.420 --> 00:12:13.980
that they might have bookmarked.

00:12:13.980 --> 00:12:15.460
And you can also do
other things like control

00:12:15.460 --> 00:12:17.110
whether it launches full
screen, which is probably

00:12:17.110 --> 00:12:19.250
the thing that you want to do if
you're building an application,

00:12:19.250 --> 00:12:20.750
or whether it launches
in a browser tab.

00:12:20.750 --> 00:12:22.750
And you can also control
things like the orientation

00:12:22.750 --> 00:12:23.360
that it starts in.

00:12:23.360 --> 00:12:24.770
So if you're
building a game, you

00:12:24.770 --> 00:12:27.322
can start in landscape, versus
the default of portrait.

00:12:27.322 --> 00:12:29.280
And then you just link
to the manifest or maybe

00:12:29.280 --> 00:12:30.738
a single page, and
then Chrome will

00:12:30.738 --> 00:12:33.110
be able to then offer
that prompt to the users.

00:12:33.110 --> 00:12:35.340
But once we've got our
application installed

00:12:35.340 --> 00:12:38.130
or installed on the device,
the worst thing that can happen

00:12:38.130 --> 00:12:39.787
is that the user
clicks the link,

00:12:39.787 --> 00:12:41.870
and then if you don't have
an internet connection,

00:12:41.870 --> 00:12:43.328
it just gets the
Chrome error page.

00:12:43.328 --> 00:12:45.220
That's a really bad
experience for users,

00:12:45.220 --> 00:12:46.970
as it's a really poor
thing for developers

00:12:46.970 --> 00:12:49.740
because we don't want
these experiences not

00:12:49.740 --> 00:12:51.680
to look like they're
part of the system.

00:12:51.680 --> 00:12:53.680
So we've introduced a new
API call ServiceWorker

00:12:53.680 --> 00:12:55.270
and it's basically
a logical extension

00:12:55.270 --> 00:12:57.357
to some other offline
APIs that we've had.

00:12:57.357 --> 00:12:59.440
But the most important
thing is that ServiceWorker

00:12:59.440 --> 00:13:03.590
adds an app-like lifecycle to
your web app and your web page.

00:13:03.590 --> 00:13:05.280
Web pages normally,
they live and die

00:13:05.280 --> 00:13:07.420
with kind of the amount of
time that the user's on them.

00:13:07.420 --> 00:13:07.961
They load up.

00:13:07.961 --> 00:13:09.826
You get a couple of
events that come through

00:13:09.826 --> 00:13:12.200
that you can respond to, such
as unload and a whole bunch

00:13:12.200 --> 00:13:13.110
of other things.

00:13:13.110 --> 00:13:15.526
And then when you close it,
that's the end of the session.

00:13:15.526 --> 00:13:17.139
With ServiceWorker,
it's basically

00:13:17.139 --> 00:13:19.680
pushed into the system so that
it can live in the background.

00:13:19.680 --> 00:13:22.138
It's a piece of JavaScript that
can live in the background,

00:13:22.138 --> 00:13:23.390
then respond to system events.

00:13:23.390 --> 00:13:24.764
It can respond to
browser events,

00:13:24.764 --> 00:13:27.814
such as every single HTTP
request coming from your page.

00:13:27.814 --> 00:13:29.480
Or it can response
to other system level

00:13:29.480 --> 00:13:32.212
events, such as things
like push notifications.

00:13:32.212 --> 00:13:34.670
But the important thing here
is it lives in the background,

00:13:34.670 --> 00:13:36.040
but only wakes up
when the operating

00:13:36.040 --> 00:13:37.165
system tells it to wake up.

00:13:37.165 --> 00:13:39.530
So it's in an idle state for
the majority of his time.

00:13:39.530 --> 00:13:42.030
The first event that you do
get, or the first state it's in,

00:13:42.030 --> 00:13:42.940
though, it's activated.

00:13:42.940 --> 00:13:43.490
It's working.

00:13:43.490 --> 00:13:44.770
It's doing something.

00:13:44.770 --> 00:13:46.850
And the very first time that you
get into the activated state,

00:13:46.850 --> 00:13:48.450
you get this thing
called an install event.

00:13:48.450 --> 00:13:49.866
And, at that point,
you can decide

00:13:49.866 --> 00:13:52.740
exactly how you want to kind of
start offline your experience.

00:13:52.740 --> 00:13:53.980
You can make your--
you can basically

00:13:53.980 --> 00:13:56.438
download all your assets, your
index page, your JavaScript,

00:13:56.438 --> 00:13:58.150
your HTML, and your CSS.

00:13:58.150 --> 00:14:00.990
The way to think of it, it's
like a completely scriptable

00:14:00.990 --> 00:14:02.280
install process.

00:14:02.280 --> 00:14:05.150
Whereas where you're in the Play
Store or the Apple App Store,

00:14:05.150 --> 00:14:07.480
you press install, and it
downloads all the packages.

00:14:07.480 --> 00:14:09.340
The user's never taken away
from the page in this case.

00:14:09.340 --> 00:14:11.670
They're using their
application at their website.

00:14:11.670 --> 00:14:13.378
But in the background,
you're controlling

00:14:13.378 --> 00:14:18.400
what assets are needed for the
user to be able to go offline.

00:14:18.400 --> 00:14:21.039
But at this point, things are
installed where you're not

00:14:21.039 --> 00:14:22.080
actually working offline.

00:14:22.080 --> 00:14:25.240
You, as a developer, have to
do some more to get there.

00:14:25.240 --> 00:14:26.790
So the Flipkart
experience, again,

00:14:26.790 --> 00:14:29.379
is a great example of
exactly how this works.

00:14:29.379 --> 00:14:31.670
But the idea is that every
single time that the browser

00:14:31.670 --> 00:14:33.870
requests a page and your
ServiceWorker is installed

00:14:33.870 --> 00:14:35.920
in the system, every
single time they

00:14:35.920 --> 00:14:37.840
request a page for
your domain, you'll

00:14:37.840 --> 00:14:39.960
be able to get an
event that says,

00:14:39.960 --> 00:14:42.360
we need to fetch this
URL from the server.

00:14:42.360 --> 00:14:44.750
And then that point, you can
decide exactly what to do.

00:14:44.750 --> 00:14:47.374
Like think of the ServiceWorker
at this point like a completely

00:14:47.374 --> 00:14:51.400
scriptable client-side
proxy service

00:14:51.400 --> 00:14:52.859
that is controlled
by a JavaScript.

00:14:52.859 --> 00:14:55.483
So the request comes in, and you
can decide exactly what to do.

00:14:55.483 --> 00:14:57.900
And in Flipkart's case, they've
already got all the assets

00:14:57.900 --> 00:14:58.525
that they need.

00:14:58.525 --> 00:15:00.229
But as you navigate
around the site,

00:15:00.229 --> 00:15:02.770
they've already pre-cached all
the pages that you've been to.

00:15:02.770 --> 00:15:04.970
So that when you do go offline--
and they do like a nice little

00:15:04.970 --> 00:15:06.170
kind of grey effect.

00:15:06.170 --> 00:15:08.382
When you do go offline,
you get the ability to say,

00:15:08.382 --> 00:15:10.090
well, I can still go
back to those pages,

00:15:10.090 --> 00:15:11.250
and I can still
view the content.

00:15:11.250 --> 00:15:13.320
I might not be able to
complete the transaction,

00:15:13.320 --> 00:15:15.240
but you're still
inside that experience.

00:15:15.240 --> 00:15:16.760
And this is one of those
experiences where we've never

00:15:16.760 --> 00:15:17.885
really had this on the web.

00:15:17.885 --> 00:15:19.930
It's not been amazingly
possible to do.

00:15:19.930 --> 00:15:21.850
And it is possible
now with ServiceWorker

00:15:21.850 --> 00:15:24.174
and a bunch of other APIs.

00:15:24.174 --> 00:15:25.590
But that's not
just the only thing

00:15:25.590 --> 00:15:27.042
that you can do
with ServiceWorker

00:15:27.042 --> 00:15:28.750
in terms of understanding
all the network

00:15:28.750 --> 00:15:29.964
requests that go through.

00:15:29.964 --> 00:15:31.880
You can also make your
experiences performance

00:15:31.880 --> 00:15:32.490
as well.

00:15:32.490 --> 00:15:34.320
And again, this is
entirely due to the fact

00:15:34.320 --> 00:15:36.979
that your ServiceWorker is
completely in your control.

00:15:36.979 --> 00:15:39.270
Every single request that
comes through from your page,

00:15:39.270 --> 00:15:40.590
you get to decide what to do.

00:15:40.590 --> 00:15:42.646
And we can make it
fast, even on 2G.

00:15:42.646 --> 00:15:44.020
And actually, I
want to call out;

00:15:44.020 --> 00:15:46.480
I'm on Wi-Fi when I
recorded this video.

00:15:46.480 --> 00:15:49.220
But the Wi-Fi is a
simulated 2G network,

00:15:49.220 --> 00:15:52.312
so this is loading like it's
on a 2G network at the moment.

00:15:52.312 --> 00:15:53.770
And the reason why
you can actually

00:15:53.770 --> 00:15:56.344
get this kind of performance
benefit from ServiceWorker

00:15:56.344 --> 00:15:57.760
itself is because,
again, you have

00:15:57.760 --> 00:15:59.634
a number of different
strategies that you can

00:15:59.634 --> 00:16:01.640
use inside your ServiceWorker,

00:16:01.640 --> 00:16:04.385
For instance, one strategy you
could use is offline first.

00:16:04.385 --> 00:16:06.760
You always make sure that you
check the cache that you've

00:16:06.760 --> 00:16:08.740
stored of all the assets
that you've gone through

00:16:08.740 --> 00:16:09.615
and then return them.

00:16:09.615 --> 00:16:11.790
If they're in the cache,
that's what the user sees.

00:16:11.790 --> 00:16:13.850
If it's not in the cache,
you go out to the network.

00:16:13.850 --> 00:16:14.350
And this is great.

00:16:14.350 --> 00:16:16.020
If you've got a
JSON-based API, you

00:16:16.020 --> 00:16:17.680
can just incrementally
update the page

00:16:17.680 --> 00:16:19.844
and cache the results
as you go along.

00:16:19.844 --> 00:16:21.760
But it's not just about
kind of ServiceWorker;

00:16:21.760 --> 00:16:22.670
there are a number
of other things

00:16:22.670 --> 00:16:24.850
that we've done inside
the browser recently

00:16:24.850 --> 00:16:28.520
to help you as web developers
make more intelligent decisions

00:16:28.520 --> 00:16:30.270
about how you actually
control the network

00:16:30.270 --> 00:16:33.312
side and the service
side of your experience.

00:16:33.312 --> 00:16:35.270
And traditionally, the
web, you had the client,

00:16:35.270 --> 00:16:36.500
and then you had the server.

00:16:36.500 --> 00:16:38.470
And the server really doesn't
know much about the client.

00:16:38.470 --> 00:16:40.177
It doesn't know any
kind of information

00:16:40.177 --> 00:16:41.760
about what the user's
device is, apart

00:16:41.760 --> 00:16:43.240
from the user agent string.

00:16:43.240 --> 00:16:45.073
And we've made a couple
of changes in Chrome

00:16:45.073 --> 00:16:47.950
recently to give you extra
kind of context and information

00:16:47.950 --> 00:16:50.520
in every single HTTP request,
if you are, as a developer,

00:16:50.520 --> 00:16:51.400
opt into it.

00:16:51.400 --> 00:16:53.733
So, for instance, you can
understand the screen density,

00:16:53.733 --> 00:16:54.961
the DPR, or the screen width.

00:16:54.961 --> 00:16:56.710
And then you can serve
up different images

00:16:56.710 --> 00:16:59.930
and different assets based on
if it's a super low-density

00:16:59.930 --> 00:17:03.380
screen, then you don't want to
send a high-density image down

00:17:03.380 --> 00:17:06.099
the wire because people aren't
going to see all those pixels.

00:17:06.099 --> 00:17:07.890
We're also doing some
other things as well,

00:17:07.890 --> 00:17:09.619
which they haven't
quite landed just yet,

00:17:09.619 --> 00:17:10.810
but they're being worked on.

00:17:10.810 --> 00:17:14.589
And Tal mentioned before with
the demo about not loading

00:17:14.589 --> 00:17:17.180
the images when we know
we're on an impaired network,

00:17:17.180 --> 00:17:18.452
we also have a save data hint.

00:17:18.452 --> 00:17:20.660
And the idea behind the save
data hint and the header

00:17:20.660 --> 00:17:23.109
there is that you can
decide as a developer,

00:17:23.109 --> 00:17:24.650
oh, I know that the
user has actually

00:17:24.650 --> 00:17:29.380
opted in to use the
data compression proxy.

00:17:29.380 --> 00:17:30.880
Therefore I'm not
going to do things

00:17:30.880 --> 00:17:32.338
which would suck
up their bandwidth

00:17:32.338 --> 00:17:33.320
and suck up their data.

00:17:33.320 --> 00:17:34.820
For instance, you
might say, I'm not

00:17:34.820 --> 00:17:37.340
going to play auto play images
when the user has a save data

00:17:37.340 --> 00:17:37.840
hint on.

00:17:37.840 --> 00:17:39.900
And we also a thing
called downlink max.

00:17:39.900 --> 00:17:42.160
And when I was in Bangalore
a couple of weeks ago,

00:17:42.160 --> 00:17:44.210
loads of developers were
asking for the ability

00:17:44.210 --> 00:17:46.680
to understand what the
maximum performance

00:17:46.680 --> 00:17:48.410
of the current
user's connection is.

00:17:48.410 --> 00:17:51.120
And we have downlink max
inside Chrome right now.

00:17:51.120 --> 00:17:53.560
But it only reports the maximum
viable connection speed.

00:17:53.560 --> 00:17:57.940
So, for instance, it will say
I can do 52 kilobits a second,

00:17:57.940 --> 00:17:59.072
or whatever is for 2G.

00:17:59.072 --> 00:18:01.280
That doesn't actually say
what the network quality is

00:18:01.280 --> 00:18:02.350
like at the moment,
but it gives you

00:18:02.350 --> 00:18:04.724
a good indication of what type
of network the user is on.

00:18:04.724 --> 00:18:06.710
So you, again, can
make a sane decision

00:18:06.710 --> 00:18:09.190
about how to set up
assets to your users.

00:18:09.190 --> 00:18:11.030
And also, we know it's
actually quite hard

00:18:11.030 --> 00:18:12.880
to build these experiences,
especially when there's lots

00:18:12.880 --> 00:18:14.370
of different variables at play.

00:18:14.370 --> 00:18:17.490
So we've also got a tool
called PageSpeed Service.

00:18:17.490 --> 00:18:19.504
It can integrate into
Engine X or Apache.

00:18:19.504 --> 00:18:21.420
And the idea behind it
is it can automatically

00:18:21.420 --> 00:18:23.060
do a whole bunch of
these optimizations,

00:18:23.060 --> 00:18:25.434
so you don't have to make a
whole load of changes to your

00:18:25.434 --> 00:18:27.441
build process and your
deployment process.

00:18:27.441 --> 00:18:29.940
You just basically kind of put
this one line in your-- well,

00:18:29.940 --> 00:18:30.780
you have to install
it into Apache.

00:18:30.780 --> 00:18:33.170
But you put it in your
Apache configuration,

00:18:33.170 --> 00:18:35.340
and then like this
service will automatically

00:18:35.340 --> 00:18:36.854
optimize for bandwidth.

00:18:36.854 --> 00:18:38.270
So, for instance,
in this case, it

00:18:38.270 --> 00:18:40.310
will automatically
optimize for WebP images

00:18:40.310 --> 00:18:41.770
if it knows that the
browser client can actually

00:18:41.770 --> 00:18:42.460
handle them.

00:18:42.460 --> 00:18:45.300
Sorry, I'm just
going to get a drink.

00:18:45.300 --> 00:18:50.630
So performance is good,
and we like performance,

00:18:50.630 --> 00:18:52.800
and we like having our
experiences work offline.

00:18:52.800 --> 00:18:54.217
But the thing that
developers want

00:18:54.217 --> 00:18:55.800
is they want their
experiences to work

00:18:55.800 --> 00:18:58.290
kind of like they would expect
native applications to work.

00:18:58.290 --> 00:19:00.320
They want to have access to all
the different types of device

00:19:00.320 --> 00:19:02.090
functionality that
are available normally

00:19:02.090 --> 00:19:03.680
for native applications.

00:19:03.680 --> 00:19:06.545
Now, some of the stuff-- and the
biggest feature that developers

00:19:06.545 --> 00:19:08.420
have asked for, I think,
about two years ago,

00:19:08.420 --> 00:19:11.402
and we finally implemented it in
March, was push notifications.

00:19:11.402 --> 00:19:13.110
If you're an Android
developer and you've

00:19:13.110 --> 00:19:17.200
done kind of any GSN kind of
push-based notification before,

00:19:17.200 --> 00:19:18.980
it's exactly the
same way of working.

00:19:18.980 --> 00:19:21.680
The user has to opt in,
but once they've opted in,

00:19:21.680 --> 00:19:24.670
your server can then
essentially send a notice

00:19:24.670 --> 00:19:26.260
to the GCM service.

00:19:26.260 --> 00:19:28.990
GCM will wake up the device,
and then inside the device

00:19:28.990 --> 00:19:31.190
it will go, OK,
which ServiceWorker

00:19:31.190 --> 00:19:34.080
needs to be woken up to actually
deliver this push notification?

00:19:34.080 --> 00:19:37.200
And then the service
will wake up,

00:19:37.200 --> 00:19:39.960
and then you will define exactly
how you want your experience

00:19:39.960 --> 00:19:42.570
to kind of create a
push notification,

00:19:42.570 --> 00:19:44.970
and these are native-like
push notifications as well.

00:19:44.970 --> 00:19:47.220
You can have actions and a
whole bunch of other stuff,

00:19:47.220 --> 00:19:49.007
and images are going
to come online soon.

00:19:49.007 --> 00:19:51.090
But the whole point about
it is we're not actually

00:19:51.090 --> 00:19:52.007
keeping the site open.

00:19:52.007 --> 00:19:53.715
You can get these push
notifications even

00:19:53.715 --> 00:19:54.910
when it's in the background.

00:19:54.910 --> 00:19:56.520
And we're trying to save
as much battery as possible

00:19:56.520 --> 00:19:57.978
because the
ServiceWorker will only

00:19:57.978 --> 00:20:00.190
respond when GCM is
told it to wake up

00:20:00.190 --> 00:20:03.520
and actually create
the notification.

00:20:03.520 --> 00:20:05.240
So there is some kind
of interesting data

00:20:05.240 --> 00:20:06.281
that we've got with this.

00:20:06.281 --> 00:20:08.430
One of them is that we've
had a number of partners

00:20:08.430 --> 00:20:12.240
and developers
implement this API.

00:20:12.240 --> 00:20:14.590
Beyond the Rack is an
e-commerce company in America.

00:20:14.590 --> 00:20:16.917
And when they implemented
push notifications,

00:20:16.917 --> 00:20:19.000
they kind of did a trial
for about a month or two.

00:20:19.000 --> 00:20:20.240
And one of the things
that they noticed

00:20:20.240 --> 00:20:22.140
was that they saw a
72% increase in time

00:20:22.140 --> 00:20:26.100
spent on site from users
responding and interacting

00:20:26.100 --> 00:20:27.530
with the push notification.

00:20:27.530 --> 00:20:30.500
And they saw a 26%
increase in average

00:20:30.500 --> 00:20:32.930
spend of users who have
actually engaged, again,

00:20:32.930 --> 00:20:34.072
via push notification.

00:20:34.072 --> 00:20:36.280
So just with this one change,
they're not necessarily

00:20:36.280 --> 00:20:38.472
progressive web apps,
but with this one change,

00:20:38.472 --> 00:20:40.680
they've managed to meaningfully
impact their business

00:20:40.680 --> 00:20:41.790
by actually be able
to provide this

00:20:41.790 --> 00:20:44.050
without having to go through
kind of the costly app

00:20:44.050 --> 00:20:45.766
install cycle.

00:20:45.766 --> 00:20:47.140
And it's not just
Beyond the Rack

00:20:47.140 --> 00:20:47.810
that are using it and Facebook.

00:20:47.810 --> 00:20:49.345
We announced on
CO, I think, it's

00:20:49.345 --> 00:20:50.720
a good couple
thousand developers

00:20:50.720 --> 00:20:52.170
using push notifications.

00:20:52.170 --> 00:20:56.010
And we're stand to see over
50 million messages a day

00:20:56.010 --> 00:20:57.720
being sent through
the service, which

00:20:57.720 --> 00:21:00.326
it's less than what you'd
expect from the Android

00:21:00.326 --> 00:21:00.950
side of things.

00:21:00.950 --> 00:21:02.520
But we've only just
got started with this,

00:21:02.520 --> 00:21:03.870
and we're seeing great traction.

00:21:03.870 --> 00:21:05.453
But it's not just
about an engagement,

00:21:05.453 --> 00:21:07.830
and engagement isn't just
about using push notifications

00:21:07.830 --> 00:21:09.790
and trying to get the
user to reuse your app.

00:21:09.790 --> 00:21:12.210
It's about trying to interact
with all of the capabilities

00:21:12.210 --> 00:21:13.530
inside the device.

00:21:13.530 --> 00:21:15.160
So I kind of briefly want
to cover some of the things

00:21:15.160 --> 00:21:15.690
that we can do.

00:21:15.690 --> 00:21:17.020
I'm not going to go into
a huge amount detail.

00:21:17.020 --> 00:21:18.730
But all with the
user's permission,

00:21:18.730 --> 00:21:21.890
you can access the camera
and kind of be responsive.

00:21:21.890 --> 00:21:24.140
You can take an image and
upload it and manipulate it.

00:21:24.140 --> 00:21:26.700
You can understand kind
of what the user's saying,

00:21:26.700 --> 00:21:28.700
but you can access their
microphone with, again,

00:21:28.700 --> 00:21:30.116
with the user's
permission, and be

00:21:30.116 --> 00:21:31.930
able to build
audio-based applications.

00:21:31.930 --> 00:21:33.150
You can understand
the network stack,

00:21:33.150 --> 00:21:35.150
whether the user's online,
whether they're using

00:21:35.150 --> 00:21:36.846
Wi-Fi or a cellular connection.

00:21:36.846 --> 00:21:38.470
We can also access
the user's location.

00:21:38.470 --> 00:21:39.845
Again, it's been
there for years.

00:21:39.845 --> 00:21:41.830
But we can access the
user's location, again,

00:21:41.830 --> 00:21:43.530
entirely with their permission.

00:21:43.530 --> 00:21:45.150
We don't get it straight away.

00:21:45.150 --> 00:21:46.100
And one of the
interesting things

00:21:46.100 --> 00:21:47.766
that's coming really
soon is the ability

00:21:47.766 --> 00:21:49.940
to discover devices
that are around you that

00:21:49.940 --> 00:21:53.890
are broadcasting via BLE,
connect to those devices,

00:21:53.890 --> 00:21:56.499
and then interact with
any kind of BLE device,

00:21:56.499 --> 00:21:58.290
just via JavaScript,
without having to have

00:21:58.290 --> 00:21:59.841
a native application installed.

00:21:59.841 --> 00:22:01.590
And finally, you can
integrate with things

00:22:01.590 --> 00:22:04.950
like the native subsystems
via the Android intense system

00:22:04.950 --> 00:22:07.370
and kind of integrate with
the Android native share

00:22:07.370 --> 00:22:10.790
and API just via using
an intense syntax URL.

00:22:10.790 --> 00:22:12.600
So the web platform
itself, especially

00:22:12.600 --> 00:22:14.683
on Chrome for Android, is
actually quite powerful,

00:22:14.683 --> 00:22:17.450
and it enables you to build
these rich experiences.

00:22:17.450 --> 00:22:18.890
They can work offline.

00:22:18.890 --> 00:22:23.450
They can work in kind of spotty
network connectivity issues.

00:22:23.450 --> 00:22:25.200
The reason why I like
progressive web apps

00:22:25.200 --> 00:22:26.575
as a concept is
because you don't

00:22:26.575 --> 00:22:28.080
want to install
the experience, you

00:22:28.080 --> 00:22:31.030
can still use that experience
and engage with the users.

00:22:31.030 --> 00:22:32.540
But as the user
becomes more engaged

00:22:32.540 --> 00:22:34.210
and they start using your
service more and more,

00:22:34.210 --> 00:22:35.251
you can get it installed.

00:22:35.251 --> 00:22:37.590
You can level it up,
use push notifications,

00:22:37.590 --> 00:22:39.480
and all these things
as the user goes along.

00:22:39.480 --> 00:22:40.938
It's a really
powerful way to think

00:22:40.938 --> 00:22:43.590
about how you're building
the next generation of web

00:22:43.590 --> 00:22:44.652
experiences.

00:22:44.652 --> 00:22:46.360
I just want to leave
with one last thing,

00:22:46.360 --> 00:22:49.842
and I've seen this a lot
in the general industry.

00:22:49.842 --> 00:22:50.800
It's happened in India.

00:22:50.800 --> 00:22:52.133
It's happened in the UK as well.

00:22:52.133 --> 00:22:55.120
And there's massive focus on
developers going app only.

00:22:55.120 --> 00:22:58.990
I think app only is the wrong
strategy for developers.

00:22:58.990 --> 00:23:01.220
Again, think web only is
also the wrong strategy

00:23:01.220 --> 00:23:02.070
for developers.

00:23:02.070 --> 00:23:04.710
It's a much more nuanced
kind of landscape.

00:23:04.710 --> 00:23:07.140
But fundamentally,
the web is critical

00:23:07.140 --> 00:23:10.500
to your mobile strategy
and your mobile story

00:23:10.500 --> 00:23:12.600
overall because the
power of the web

00:23:12.600 --> 00:23:14.800
is the fact that you
can give someone a link.

00:23:14.800 --> 00:23:17.360
They can click on it and start
using your experience straight

00:23:17.360 --> 00:23:17.949
away.

00:23:17.949 --> 00:23:19.240
And then you can level them up.

00:23:19.240 --> 00:23:21.600
And then when you need to,
when the browser platform

00:23:21.600 --> 00:23:23.660
can't take advantage
of some of the features

00:23:23.660 --> 00:23:26.140
that have just come
to the web platform,

00:23:26.140 --> 00:23:28.260
geofencing might be
one of the examples,

00:23:28.260 --> 00:23:30.710
then you can
naturally upgrade them

00:23:30.710 --> 00:23:32.190
into the native experience.

00:23:32.190 --> 00:23:33.740
But the important
thing is there.

00:23:33.740 --> 00:23:34.780
You've got the
user straightaway.

00:23:34.780 --> 00:23:35.850
You've engaged with them.

00:23:35.850 --> 00:23:36.808
They love your service.

00:23:36.808 --> 00:23:37.830
They love your brand.

00:23:37.830 --> 00:23:40.413
And they're much more likely to
actually keep engaging with it

00:23:40.413 --> 00:23:41.960
and then install
your applications.

00:23:41.960 --> 00:23:44.168
So with that, I just want
to say thank you very much,

00:23:44.168 --> 00:23:45.910
and I've gone a
little bit over time.

00:23:45.910 --> 00:23:48.960
But I'd like to introduce
Jason back to the stage.

