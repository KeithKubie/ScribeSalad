WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.960
So s want to make virtual
reality applications?

00:00:02.960 --> 00:00:04.000
Great!

00:00:04.000 --> 00:00:05.280
Let's get started.

00:00:05.280 --> 00:00:07.680
In this quick tutorial,
I'll teach you

00:00:07.680 --> 00:00:12.650
how to use the Java SDK to
make your application truly 3D.

00:00:12.650 --> 00:00:15.450
You may have noticed that
rendering for virtual reality

00:00:15.450 --> 00:00:18.670
is different from normal
Android applications.

00:00:18.670 --> 00:00:22.260
I'm guessing you're using
some sort of a graphics API,

00:00:22.260 --> 00:00:25.980
like OpenGL, or maybe a
higher-level framework.

00:00:25.980 --> 00:00:28.070
If you haven't thought
about that yet,

00:00:28.070 --> 00:00:29.600
then take your time to decide.

00:00:29.600 --> 00:00:32.259
It is really important
to get it right.

00:00:32.259 --> 00:00:34.570
Our own treasure
hunt demo is using

00:00:34.570 --> 00:00:40.010
OpenGL ES 2.0 for rendering
the graphics in 3D.

00:00:40.010 --> 00:00:42.570
Now that you have
decided on your renderer,

00:00:42.570 --> 00:00:45.400
it is time to download the SDK.

00:00:45.400 --> 00:00:46.370
Got it?

00:00:46.370 --> 00:00:47.710
Let's go!

00:00:47.710 --> 00:00:50.010
The first thing you need
to do is add some tags

00:00:50.010 --> 00:00:51.420
to your manifest file.

00:00:51.420 --> 00:00:55.970
Cardboard requires the use
of API Level 16 or higher.

00:00:55.970 --> 00:00:59.730
The Cardboard SDK requires
read and write permissions.

00:00:59.730 --> 00:01:04.000
So it compared the user's
phone to the Cardboard viewer.

00:01:04.000 --> 00:01:08.610
The NFC permission is required
to access the NFC tag present

00:01:08.610 --> 00:01:11.220
in some Cardboard viewers.

00:01:11.220 --> 00:01:14.640
And the device should
always be in landscape mode.

00:01:14.640 --> 00:01:18.070
This is because the user is
going to be moving their head,

00:01:18.070 --> 00:01:21.950
and the orientation should
not change as they do so.

00:01:21.950 --> 00:01:24.070
Therefore, it is
important for you

00:01:24.070 --> 00:01:26.870
to lock the screen
orientation to landscape.

00:01:26.870 --> 00:01:30.790
It is recommended for you to
handle orientation and keyboard

00:01:30.790 --> 00:01:34.920
configuration changes to avoid
having your application being

00:01:34.920 --> 00:01:38.180
reset as these changes occur.

00:01:38.180 --> 00:01:40.630
And finally, if you
want your application

00:01:40.630 --> 00:01:43.430
to show inside a
Cardboard app listing,

00:01:43.430 --> 00:01:46.130
then you should add the
Cardboard intent-filter.

00:01:46.130 --> 00:01:48.930
This is highly recommended,
and can help people

00:01:48.930 --> 00:01:50.680
discover your application.

00:01:50.680 --> 00:01:53.220
So make sure you add it.

00:01:53.220 --> 00:01:55.390
Now let's get to programming.

00:01:55.390 --> 00:01:59.040
Start by extending your activity
from Cardboard activity.

00:01:59.040 --> 00:02:02.080
The Cardboard activity
exposes Cardboard events,

00:02:02.080 --> 00:02:05.550
such as the trigger, and
handles common things required

00:02:05.550 --> 00:02:08.580
for virtual reality rendering,
like hiding the system UI

00:02:08.580 --> 00:02:11.200
by using Android immersive mode.

00:02:11.200 --> 00:02:13.940
Your activity should also
implement the CardboardView

00:02:13.940 --> 00:02:16.260
StereoRenderer interface.

00:02:16.260 --> 00:02:18.670
This interface handles
stereoscopic rendering

00:02:18.670 --> 00:02:21.790
and simplifies your work by
initializing open [INAUDIBLE]

00:02:21.790 --> 00:02:24.970
for you, and giving you the
correct matrices for drawing

00:02:24.970 --> 00:02:27.100
the scene fully [INAUDIBLE].

00:02:27.100 --> 00:02:29.890
Normally, an Android
user interface elements

00:02:29.890 --> 00:02:31.660
are built using views.

00:02:31.660 --> 00:02:34.830
In virtual reality, we
have just one view element,

00:02:34.830 --> 00:02:38.360
which we are using as
a surface to render to.

00:02:38.360 --> 00:02:40.050
This is the CardboardView.

00:02:40.050 --> 00:02:42.480
Add the CardboardView
to your layout XML

00:02:42.480 --> 00:02:44.860
in the following way.

00:02:44.860 --> 00:02:48.560
Then, in the activity class,
initialize the CardboardView

00:02:48.560 --> 00:02:53.360
by setting the renderer
and the view like this.

00:02:53.360 --> 00:02:56.310
It is time to implement
the StereoRenderer.

00:02:56.310 --> 00:02:59.890
The only frame callback is
called once every new frame,

00:02:59.890 --> 00:03:01.660
before it is drawn.

00:03:01.660 --> 00:03:04.340
This is a good time to
update any render data,

00:03:04.340 --> 00:03:07.170
such as animation and physics.

00:03:07.170 --> 00:03:10.310
The callback comes with
the head transform data.

00:03:10.310 --> 00:03:13.670
This class contains the
position and orientation

00:03:13.670 --> 00:03:15.540
of the user's head.

00:03:15.540 --> 00:03:19.710
You can use this for calculating
where the user is looking at,

00:03:19.710 --> 00:03:23.200
and what the user is interacting
with in the environment,

00:03:23.200 --> 00:03:26.560
such as objects,
and user interface.

00:03:26.560 --> 00:03:29.150
You can also use this for
first time calling, introducing

00:03:29.150 --> 00:03:32.020
the [INAUDIBLE]
when [INAUDIBLE].

00:03:32.020 --> 00:03:35.000
Drawing should be done in
the onDrawEye callback.

00:03:35.000 --> 00:03:37.800
This callback is called
twice every frame,

00:03:37.800 --> 00:03:41.430
as it is required to draw
the scene for both eyes.

00:03:41.430 --> 00:03:43.620
And the call contains
the eye class.

00:03:43.620 --> 00:03:47.790
Inside is the view matrix,
offsets, and orientation

00:03:47.790 --> 00:03:49.530
for the eye being rendered.

00:03:49.530 --> 00:03:54.000
This data correctly offsets the
camera's position for the eye,

00:03:54.000 --> 00:03:56.480
creating the
stereoscopic effect.

00:03:56.480 --> 00:03:58.150
Note that a view
[INAUDIBLE] is also

00:03:58.150 --> 00:04:01.670
set for you, dividing
the screen in two halves.

00:04:01.670 --> 00:04:05.210
Again, one half for an eye.

00:04:05.210 --> 00:04:07.900
Simply combine the eye
matrix with your own view

00:04:07.900 --> 00:04:10.810
matrix for correct rendering.

00:04:10.810 --> 00:04:12.900
Now that we have
rendering working,

00:04:12.900 --> 00:04:14.870
let's talk about input.

00:04:14.870 --> 00:04:17.140
While looking around
can be fun, it

00:04:17.140 --> 00:04:20.360
is more fun if you can
interact with the environment.

00:04:20.360 --> 00:04:23.900
That is why Cardboard
has the trigger.

00:04:23.900 --> 00:04:26.120
To use the trigger,
simply implement

00:04:26.120 --> 00:04:28.910
the onCardboardTrigger callback.

00:04:28.910 --> 00:04:31.930
This would be called as the
user activates the trigger.

00:04:31.930 --> 00:04:35.260
Remember that you only
have one button, so

00:04:35.260 --> 00:04:37.310
make sure to use it wisely.

00:04:37.310 --> 00:04:39.980
Make everything work by context.

00:04:39.980 --> 00:04:41.970
Looking on a button,
and using the trigger,

00:04:41.970 --> 00:04:43.700
should activate the button.

00:04:43.700 --> 00:04:46.320
However, if the user is
looking somewhere else,

00:04:46.320 --> 00:04:50.600
you'll want to make something
else happen, instead, or maybe

00:04:50.600 --> 00:04:52.310
nothing.

00:04:52.310 --> 00:04:54.570
Sometimes it is enough
to activate things

00:04:54.570 --> 00:04:56.160
only by looking at them.

00:04:56.160 --> 00:04:58.290
For example, a
button can animate

00:04:58.290 --> 00:05:01.090
as the user looks at it,
and activate its action

00:05:01.090 --> 00:05:03.210
after a second or two.

00:05:03.210 --> 00:05:05.830
This also applies to
parts of the scene.

00:05:05.830 --> 00:05:08.360
You can highlight objects,
and activate animations,

00:05:08.360 --> 00:05:10.620
as the user looks around.

00:05:10.620 --> 00:05:14.460
For example, if a butterfly
is sitting on a tree,

00:05:14.460 --> 00:05:16.590
you can make it
animate and fly around,

00:05:16.590 --> 00:05:19.000
as the user looks at it.

00:05:19.000 --> 00:05:23.430
This way, you know the user
isn't missing any of the scene,

00:05:23.430 --> 00:05:25.860
and you are not forcing
them to try and interact

00:05:25.860 --> 00:05:28.210
with everything manually.

00:05:28.210 --> 00:05:30.570
Now that you know how
to make everything work,

00:05:30.570 --> 00:05:34.210
it is important to keep in mind
some best practices in order

00:05:34.210 --> 00:05:37.570
to make a compelling
virtual reality experience.

00:05:37.570 --> 00:05:39.690
The three most important
rules to remember

00:05:39.690 --> 00:05:43.500
are, always keep
tracking on; keep stable

00:05:43.500 --> 00:05:49.280
60 frames per second, or higher;
and avoid unexpected motion.

00:05:49.280 --> 00:05:52.140
One of the things that makes
virtual reality compelling

00:05:52.140 --> 00:05:54.250
is the ability to look around.

00:05:54.250 --> 00:05:57.770
In contrast, it would
feel extremely unnatural

00:05:57.770 --> 00:06:01.060
if the camera stopped
responding to your head.

00:06:01.060 --> 00:06:03.690
Therefore, you should
always take into account

00:06:03.690 --> 00:06:07.180
the user's orientation,
and never freeze the camera

00:06:07.180 --> 00:06:10.540
or force the user to
look somewhere specific.

00:06:10.540 --> 00:06:12.670
If you want to grab
the user's attention,

00:06:12.670 --> 00:06:15.630
use cues, such as
light and sound,

00:06:15.630 --> 00:06:18.050
to direct them to
look where you want.

00:06:18.050 --> 00:06:20.980
You can also delay activating
an event in your scene

00:06:20.980 --> 00:06:22.970
until you know the
user had turned

00:06:22.970 --> 00:06:25.090
their head in that direction.

00:06:25.090 --> 00:06:29.160
That way, they have time to take
things in, and enjoy the scene.

00:06:29.160 --> 00:06:32.706
You must always keep
to 60 FPS or higher.

00:06:32.706 --> 00:06:35.890
Not only does it contribute
to a good user experience,

00:06:35.890 --> 00:06:39.430
but it is even more
crucial in virtual reality.

00:06:39.430 --> 00:06:41.540
Think about it this
way-- the screen

00:06:41.540 --> 00:06:44.430
is the only thing
the user can see.

00:06:44.430 --> 00:06:48.780
Rendering at 60 FPS means
the user sees the same frame

00:06:48.780 --> 00:06:52.220
for 16.6 milliseconds.

00:06:52.220 --> 00:06:57.800
If you miss 60 FPS, vsync
drops you to 30 FPS,

00:06:57.800 --> 00:07:02.100
and its frame is shown
for 33 milliseconds.

00:07:02.100 --> 00:07:04.940
That means, as the
user moves their head,

00:07:04.940 --> 00:07:09.330
they are getting an incorrect
image for a very long time.

00:07:09.330 --> 00:07:12.440
This is why it is very
important for virtual reality

00:07:12.440 --> 00:07:16.010
applications to be
fast and responsive.

00:07:16.010 --> 00:07:18.930
Movement can be tricky,
because the user does not

00:07:18.930 --> 00:07:21.320
feel like they are in motion.

00:07:21.320 --> 00:07:23.280
If the world starts
moving around,

00:07:23.280 --> 00:07:25.260
it can contribute
to an odd feeling

00:07:25.260 --> 00:07:29.090
if there is discrepancy between
one's actual lack of movement

00:07:29.090 --> 00:07:31.410
and what the user is seeing.

00:07:31.410 --> 00:07:33.950
There are ways to
convey movement safely.

00:07:33.950 --> 00:07:36.850
For example, by keeping
motion constant,

00:07:36.850 --> 00:07:39.040
and avoiding acceleration.

00:07:39.040 --> 00:07:42.830
Or by using another object
and making it move first,

00:07:42.830 --> 00:07:45.630
or creating a path
for the user to see.

00:07:45.630 --> 00:07:48.540
This signals to the user
they're about to be moved,

00:07:48.540 --> 00:07:51.570
and subconsciously
prepares them.

00:07:51.570 --> 00:07:54.520
There are many more ways to
ensure good user experience.

00:07:54.520 --> 00:07:57.350
I recommend you to check
out the Cardboard Design Lab

00:07:57.350 --> 00:08:02.090
application, to learn more about
good and bad design patterns,

00:08:02.090 --> 00:08:04.810
so you can create the best
user experience in your game

00:08:04.810 --> 00:08:06.770
or application.

00:08:06.770 --> 00:08:09.690
Good luck with making your own
virtual reality experience.

00:08:09.690 --> 00:08:12.660
And make sure to post about
it in our Cardboard community.

00:08:12.660 --> 00:08:17.810
[MUSIC PLAYING]

