WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.370
[GOOGLE LOGO MUSIC PLAYING]

00:00:04.910 --> 00:00:05.910
ADAM COIMBRA: Thank you.

00:00:05.910 --> 00:00:06.450
Welcome.

00:00:06.450 --> 00:00:08.010
We're super excited
to talk to you

00:00:08.010 --> 00:00:10.380
about how to bring your
Android apps to the Assistant.

00:00:10.380 --> 00:00:11.730
I'm Adam Coimbra.

00:00:11.730 --> 00:00:13.812
I'm a product manager
on the Google Assistant.

00:00:13.812 --> 00:00:14.770
ADAM KOCH: Hi everyone.

00:00:14.770 --> 00:00:15.570
I'm Adam Koch.

00:00:15.570 --> 00:00:17.790
I work on a developer
relations team at Google.

00:00:17.790 --> 00:00:19.915
SOFIA ALTUNA: And I'm Sofia
Altuna from our product

00:00:19.915 --> 00:00:22.800
partnerships team.

00:00:22.800 --> 00:00:25.140
ADAM COIMBRA: So App
Actions is a simple way

00:00:25.140 --> 00:00:27.780
to connect the seamlessness
of the Assistant

00:00:27.780 --> 00:00:29.610
to your Android app.

00:00:29.610 --> 00:00:32.280
Users can ask the Assistant
to do something, and Assistant

00:00:32.280 --> 00:00:35.592
fast forwards into your
app into the right place.

00:00:35.592 --> 00:00:37.800
So for example, instead of
tapping through your phone

00:00:37.800 --> 00:00:40.092
when you just want to get
out the door and start a run,

00:00:40.092 --> 00:00:42.120
you can just ask the
Assistant, hey, Google,

00:00:42.120 --> 00:00:43.770
start my run with Nike.

00:00:43.770 --> 00:00:45.870
And the system will
automatically open Nike's app

00:00:45.870 --> 00:00:49.290
and start the run because
Nike implemented App Actions.

00:00:49.290 --> 00:00:51.780
So last year, we presented
an ambitious vision

00:00:51.780 --> 00:00:54.060
for App Actions, and
we've been working hard

00:00:54.060 --> 00:00:56.260
to turn that vision
into a reality.

00:00:56.260 --> 00:00:58.470
And so I'm really excited
that App Actions is now

00:00:58.470 --> 00:01:01.350
available for apps in our
first four categories--

00:01:01.350 --> 00:01:04.515
finance, fitness, food
ordering, and ride sharing.

00:01:04.515 --> 00:01:06.640
Now if your app falls into
one of these categories,

00:01:06.640 --> 00:01:08.760
you can start building
today and deploy your app

00:01:08.760 --> 00:01:11.710
to be part of our consumer
launch later this year.

00:01:11.710 --> 00:01:14.005
But taking a step back,
why extend your Android

00:01:14.005 --> 00:01:14.880
app to the Assistant?

00:01:14.880 --> 00:01:15.823
What's in it for you?

00:01:15.823 --> 00:01:18.240
Well, we know that there are
challenges with re-engagement

00:01:18.240 --> 00:01:19.110
for mobile apps.

00:01:19.110 --> 00:01:21.720
And we think that part of that
is because there's friction

00:01:21.720 --> 00:01:23.280
in the app experience today.

00:01:23.280 --> 00:01:26.800
Users have 40 plus Android
apps on their devices.

00:01:26.800 --> 00:01:29.400
And they need to remember all
of them, navigate between them,

00:01:29.400 --> 00:01:30.850
navigate inside of them.

00:01:30.850 --> 00:01:32.940
It's a lot to keep track of.

00:01:32.940 --> 00:01:34.920
Meanwhile, Google
is working hard

00:01:34.920 --> 00:01:37.960
to make Assistant the best
way to get things done.

00:01:37.960 --> 00:01:39.750
And what's unique
about the Assistant

00:01:39.750 --> 00:01:41.580
is that it allows
users to just express

00:01:41.580 --> 00:01:44.460
what they want naturally rather
than worrying about what icon

00:01:44.460 --> 00:01:45.400
to click.

00:01:45.400 --> 00:01:48.150
And with the Assistant available
on nearly a billion Android

00:01:48.150 --> 00:01:50.220
devices, this is a
great opportunity

00:01:50.220 --> 00:01:53.100
to bring your app into
this new entry point.

00:01:53.100 --> 00:01:55.770
You can leverage the Assistant
to bring our more natural

00:01:55.770 --> 00:01:59.622
frictionless experience to your
own app and your own users.

00:01:59.622 --> 00:02:01.080
This will become
even more powerful

00:02:01.080 --> 00:02:03.060
with the next
generation Assistant

00:02:03.060 --> 00:02:05.640
that we previewed
yesterday in the keynote.

00:02:05.640 --> 00:02:08.970
It will unlock a much faster
and deeper Android experience

00:02:08.970 --> 00:02:12.510
than ever, thanks to Google's
advances with on device AI.

00:02:12.510 --> 00:02:14.250
But we know that
mobile apps will

00:02:14.250 --> 00:02:16.500
continue to be the
foundation of how users

00:02:16.500 --> 00:02:17.760
get things done in Android.

00:02:17.760 --> 00:02:19.620
And so we envision a
seamless connection

00:02:19.620 --> 00:02:21.720
with the mobile ecosystem
to be a key feature

00:02:21.720 --> 00:02:23.310
of the next
generation Assistant.

00:02:23.310 --> 00:02:25.140
And we're excited to
work with you to make

00:02:25.140 --> 00:02:28.310
that happen via App Actions.

00:02:28.310 --> 00:02:29.990
To recap, App Actions
in the Assistant

00:02:29.990 --> 00:02:32.570
will provide a much more
natural way for your users

00:02:32.570 --> 00:02:34.040
to access your apps.

00:02:34.040 --> 00:02:37.250
Assistant's powerful NLU
handles the user request

00:02:37.250 --> 00:02:39.410
and translates it into a
deep link into your app,

00:02:39.410 --> 00:02:41.490
accelerating the user's journey.

00:02:41.490 --> 00:02:43.077
Here's another example.

00:02:43.077 --> 00:02:44.660
Let's say I just had
lunch with Sofia.

00:02:44.660 --> 00:02:45.800
And I need to pay her back.

00:02:45.800 --> 00:02:48.650
I can say send $15
to Sofia on PayPal.

00:02:48.650 --> 00:02:51.192
And again, Assistant will
fast forward into PayPal.

00:02:51.192 --> 00:02:53.400
But not only taking me to
the right place in the app,

00:02:53.400 --> 00:02:56.270
but also passing the
parameters from my request

00:02:56.270 --> 00:02:59.780
directly in, so, like,
the amount and the name.

00:02:59.780 --> 00:03:02.363
That allows the user to
skip even more steps.

00:03:02.363 --> 00:03:04.280
Now one of my favorite
parts about App Actions

00:03:04.280 --> 00:03:07.220
is how simple it was for
Paypal to build that.

00:03:07.220 --> 00:03:11.270
All they really needed to do
was expose existing deep links

00:03:11.270 --> 00:03:14.240
in their app in a way that the
Assistant could semantically

00:03:14.240 --> 00:03:16.220
understand.

00:03:16.220 --> 00:03:17.970
Now this is enabled
by connecting together

00:03:17.970 --> 00:03:19.762
two different
technologies that happen

00:03:19.762 --> 00:03:20.970
to share the exact same name.

00:03:20.970 --> 00:03:24.240
The first is Assistant
Built-In Intent.

00:03:24.240 --> 00:03:26.970
So we are publishing a
catalog of semantic intents

00:03:26.970 --> 00:03:29.580
that represent many,
many different requests

00:03:29.580 --> 00:03:31.290
that a user might make.

00:03:31.290 --> 00:03:34.920
Now as you can see on the
left, we have the Create Money

00:03:34.920 --> 00:03:36.840
Transfer Assistant Intent.

00:03:36.840 --> 00:03:41.160
This allows Assistant to resolve
that query, send $15 to Sofia.

00:03:41.160 --> 00:03:42.660
Now you're probably
already familiar

00:03:42.660 --> 00:03:43.785
with the second technology.

00:03:43.785 --> 00:03:46.290
That's Android Intents,
which are used by many apps

00:03:46.290 --> 00:03:47.820
for deep linking today.

00:03:47.820 --> 00:03:50.610
As you can see on
the right, PayPal

00:03:50.610 --> 00:03:53.010
has already implemented
their own deep linking scheme

00:03:53.010 --> 00:03:55.170
for sending money
via Android Intents.

00:03:55.170 --> 00:03:57.570
So to make this work, what
Paypal really needed to do

00:03:57.570 --> 00:04:01.080
was add one file called
actions.xml to their Android

00:04:01.080 --> 00:04:04.230
project that maps from the
Assistant Built-In Intent

00:04:04.230 --> 00:04:06.690
to their existing
Android Intent.

00:04:06.690 --> 00:04:09.090
So as you can see, the core
integration for App Actions

00:04:09.090 --> 00:04:11.723
is very simple and
very easy to do.

00:04:11.723 --> 00:04:14.140
Again, App Actions is available
right now for development.

00:04:14.140 --> 00:04:16.680
If your app is in one of our
first four categories-- again,

00:04:16.680 --> 00:04:19.260
finance, food ordering,
ridesharing, and fitness--

00:04:19.260 --> 00:04:21.029
I really hope that
tonight you'll

00:04:21.029 --> 00:04:24.270
come to visit our developer
documentation and start

00:04:24.270 --> 00:04:24.960
building.

00:04:24.960 --> 00:04:26.130
And we'd love to
have all your apps

00:04:26.130 --> 00:04:28.530
as part of our consumer launch
in the next couple months.

00:04:28.530 --> 00:04:31.230
And if your app isn't in one
of those first four categories,

00:04:31.230 --> 00:04:31.860
stay tuned.

00:04:31.860 --> 00:04:34.180
Because we'll be working on
new categories and intents

00:04:34.180 --> 00:04:34.770
very soon.

00:04:38.394 --> 00:04:39.300
[APPLAUSE]

00:04:39.300 --> 00:04:40.010
Thank you.

00:04:42.812 --> 00:04:43.520
ADAM KOCH: Great.

00:04:43.520 --> 00:04:44.720
So now you've
learned a little bit

00:04:44.720 --> 00:04:46.490
about the background
behind App Actions.

00:04:46.490 --> 00:04:50.740
I'm going to walk you through
the technical implementation.

00:04:50.740 --> 00:04:54.380
I've broken the implementation
down into four key steps--

00:04:54.380 --> 00:04:57.235
supporting deep links
in your Android app,

00:04:57.235 --> 00:04:59.360
telling the Assistant how
to take advantage and use

00:04:59.360 --> 00:05:02.360
those deep links,
optimizing your app further

00:05:02.360 --> 00:05:04.070
for the Google
Assistant, and then

00:05:04.070 --> 00:05:07.647
testing and deploying your
app actions to end users.

00:05:07.647 --> 00:05:09.230
Before I get started,
I wanted to note

00:05:09.230 --> 00:05:11.310
a few additional things.

00:05:11.310 --> 00:05:13.490
First of all, implementation
for App Actions

00:05:13.490 --> 00:05:17.570
happens completely from
within your Android code base.

00:05:17.570 --> 00:05:19.500
In addition, as
much as possible,

00:05:19.500 --> 00:05:21.890
we try to take advantage of
a lot of the existing APIs

00:05:21.890 --> 00:05:25.380
and infrastructure that
Android already supports.

00:05:25.380 --> 00:05:28.730
And then lastly, App
Actions runs anywhere

00:05:28.730 --> 00:05:30.890
where the Google
Assistant runs on Android.

00:05:30.890 --> 00:05:33.530
That's from Android
5.0 Lollipop and above.

00:05:36.600 --> 00:05:37.370
OK.

00:05:37.370 --> 00:05:40.340
Step 1, Android Deep Links.

00:05:40.340 --> 00:05:42.950
For those of you who
aren't Android developers,

00:05:42.950 --> 00:05:45.530
deep links are URLs
that take users directly

00:05:45.530 --> 00:05:49.910
to specific content or
actions within an app.

00:05:49.910 --> 00:05:52.760
The good news is most Android
developers have already

00:05:52.760 --> 00:05:55.370
implemented deep links in some
shape or form in the Android

00:05:55.370 --> 00:05:56.720
application.

00:05:56.720 --> 00:05:59.670
So there may not be that
much work for you to do here.

00:05:59.670 --> 00:06:02.030
However, we do recommend that
you review our App Actions

00:06:02.030 --> 00:06:04.445
documentation,
understand the actions

00:06:04.445 --> 00:06:06.320
and understand the
parameters that we require

00:06:06.320 --> 00:06:09.140
for those actions, and make
sure that your deep links can

00:06:09.140 --> 00:06:09.710
support them.

00:06:13.410 --> 00:06:16.830
Here's a few deep
link URI examples.

00:06:16.830 --> 00:06:18.670
The first kind of deep
links that we support

00:06:18.670 --> 00:06:22.260
are Android app links
variety of deep links.

00:06:22.260 --> 00:06:24.480
You can see an example of
an Android app links here.

00:06:24.480 --> 00:06:27.300
It just looks like
a regular web URI--

00:06:27.300 --> 00:06:30.970
HTTPS://mysite.com/example.

00:06:30.970 --> 00:06:33.900
Android app links requires
that you verify ownership

00:06:33.900 --> 00:06:36.900
of your domain name and also
your Android app and that

00:06:36.900 --> 00:06:38.400
allows the Android
system to connect

00:06:38.400 --> 00:06:39.858
through when one
of those web links

00:06:39.858 --> 00:06:42.520
is encountered at
the system level.

00:06:42.520 --> 00:06:45.070
Now this is the recommended
type, if possible.

00:06:45.070 --> 00:06:48.210
However, we understand that
not all Android apps can

00:06:48.210 --> 00:06:50.640
use these kinds of app links.

00:06:50.640 --> 00:06:53.340
For example, if a particular
action doesn't have a web URL

00:06:53.340 --> 00:06:56.090
equivalent, or some content
doesn't have a web URL

00:06:56.090 --> 00:06:58.560
equivalent, you can use
something like custom scheme

00:06:58.560 --> 00:07:02.880
deep links instead, like
you see at the bottom here.

00:07:02.880 --> 00:07:05.740
Now I'm not going to go into
too much depth on deep links,

00:07:05.740 --> 00:07:07.938
because they're a very
well-known Android technology

00:07:07.938 --> 00:07:10.480
and they're documented on our
Android developer site already.

00:07:14.350 --> 00:07:14.870
OK.

00:07:14.870 --> 00:07:17.750
Moving along to Step 2,
telling the Assistant

00:07:17.750 --> 00:07:19.740
how to use your application.

00:07:19.740 --> 00:07:21.710
This is where we're
going to specify which

00:07:21.710 --> 00:07:24.050
app actions that we
can support in the app,

00:07:24.050 --> 00:07:25.550
as well as defining
something called

00:07:25.550 --> 00:07:29.318
fulfillment URLs and the
parameters that we need.

00:07:29.318 --> 00:07:30.860
Optionally, you can
specify something

00:07:30.860 --> 00:07:33.110
called inline inventory and
I'll get into details on that

00:07:33.110 --> 00:07:33.610
shortly.

00:07:36.240 --> 00:07:36.740
OK.

00:07:36.740 --> 00:07:37.970
So what are we going to do?

00:07:37.970 --> 00:07:40.760
Go to our Android project
and create a new xml file

00:07:40.760 --> 00:07:42.880
in our resources xml directory.

00:07:42.880 --> 00:07:45.530
Let's call it actions.xml.

00:07:45.530 --> 00:07:47.740
Then we're going to edit
our Android manifest file.

00:07:47.740 --> 00:07:49.865
And we're going to add a
metadata tag with the name

00:07:49.865 --> 00:07:51.630
com.google.android.actions.

00:07:51.630 --> 00:07:53.630
And we're going to link
through to that xml file

00:07:53.630 --> 00:07:56.060
that we created.

00:07:56.060 --> 00:07:59.060
Let's have a look inside
the actions.xml file.

00:07:59.060 --> 00:07:59.610
OK.

00:07:59.610 --> 00:08:01.400
There's a lot to
take in here, so I'm

00:08:01.400 --> 00:08:02.900
going to spend some time
working through this.

00:08:02.900 --> 00:08:05.067
Because this is a really
key part of the App Actions

00:08:05.067 --> 00:08:06.810
implementation.

00:08:06.810 --> 00:08:08.450
First of all, at a
high level, you'll

00:08:08.450 --> 00:08:11.880
see at the top we've
defined an actions block.

00:08:11.880 --> 00:08:14.130
Within each actions
block, we can

00:08:14.130 --> 00:08:16.042
have one or more action blocks.

00:08:16.042 --> 00:08:18.000
And this is where we map
over to the App Action

00:08:18.000 --> 00:08:20.580
that we want to support.

00:08:20.580 --> 00:08:22.920
Within each action block,
we can define one or more

00:08:22.920 --> 00:08:24.337
fulfillment mechanisms.

00:08:24.337 --> 00:08:25.920
This is where we
define the deep links

00:08:25.920 --> 00:08:29.470
that we can connect through
to our Android application.

00:08:29.470 --> 00:08:32.280
And then finally, within
each fulfillment block,

00:08:32.280 --> 00:08:35.015
we can define zero or more
parameter mapping blocks.

00:08:35.015 --> 00:08:36.390
And this is where
we choose which

00:08:36.390 --> 00:08:38.595
parameters from those
actions that we can support.

00:08:42.247 --> 00:08:43.830
Now let's look at
the values that I've

00:08:43.830 --> 00:08:46.050
set in this particular example.

00:08:46.050 --> 00:08:48.570
First, I wanted to highlight
intent name and intent

00:08:48.570 --> 00:08:49.788
parameter.

00:08:49.788 --> 00:08:52.080
Now these values are pulled
directly from our developer

00:08:52.080 --> 00:08:52.703
documentation.

00:08:52.703 --> 00:08:54.870
So if you're wondering where
those values come from,

00:08:54.870 --> 00:08:57.210
you have to go and copy them
directly from the developer

00:08:57.210 --> 00:08:59.360
docs.

00:08:59.360 --> 00:09:01.710
The intent name is the
name of the app action

00:09:01.710 --> 00:09:03.330
you want to support.

00:09:03.330 --> 00:09:06.620
In this case, we have defined
actions.intent.get exercise

00:09:06.620 --> 00:09:09.530
observation.

00:09:09.530 --> 00:09:12.570
Get exercise observation
is a fitness app action

00:09:12.570 --> 00:09:15.180
where the user can ask the
app for additional information

00:09:15.180 --> 00:09:17.370
on a particular
exercise activity.

00:09:17.370 --> 00:09:21.072
For example, hey, Google, ask
Nike Run club how many miles

00:09:21.072 --> 00:09:21.780
have I run today?

00:09:25.180 --> 00:09:27.190
Moving down to the
parameter mapping blocks,

00:09:27.190 --> 00:09:29.260
this is where we
define which parameters

00:09:29.260 --> 00:09:32.200
we want to listen for
in our Android app.

00:09:32.200 --> 00:09:34.480
You can see here that
we've defined two.

00:09:34.480 --> 00:09:39.280
One is exerciseObservat
ion.aboutExercise.name.

00:09:39.280 --> 00:09:41.260
This is going to map
over to the exercise

00:09:41.260 --> 00:09:46.870
that the user is asking about,
for example, running or biking.

00:09:46.870 --> 00:09:49.750
The second one we've
defined is exerciseObservat

00:09:49.750 --> 00:09:52.000
ion.measuredProperty.name.

00:09:52.000 --> 00:09:54.790
And this is going to map
over to the exercise property

00:09:54.790 --> 00:09:59.305
that the user is asking about,
for example, distance, pace,

00:09:59.305 --> 00:09:59.805
or calories.

00:10:04.650 --> 00:10:07.800
Moving along, now I'm
highlighting the urlTemplate

00:10:07.800 --> 00:10:10.770
and URL parameter values.

00:10:10.770 --> 00:10:14.010
These values are completely
up to you to define.

00:10:14.010 --> 00:10:16.560
The URL template is
going to be the deep link

00:10:16.560 --> 00:10:17.895
through to your Android app.

00:10:17.895 --> 00:10:20.790
You can see here, we've got
an HTTPS-style deep link,

00:10:20.790 --> 00:10:24.440
which means it's an app
link style of deep link.

00:10:24.440 --> 00:10:25.890
You'll also note
the curly braces

00:10:25.890 --> 00:10:27.765
in the urlTemplate with
some parameter names.

00:10:27.765 --> 00:10:31.410
And I'll walk through how
that works in just a second.

00:10:31.410 --> 00:10:32.960
Then in the parameter
mapping blocks,

00:10:32.960 --> 00:10:34.760
we've defined a
urlTemplate value

00:10:34.760 --> 00:10:36.260
for each parameter mapping.

00:10:36.260 --> 00:10:37.760
This is a name that
you want to give

00:10:37.760 --> 00:10:39.340
to each of those parameters.

00:10:39.340 --> 00:10:41.090
In this case, we've
given the simple names

00:10:41.090 --> 00:10:42.662
of exercise and property.

00:10:42.662 --> 00:10:44.870
And you'll see that those
same parameters appear back

00:10:44.870 --> 00:10:45.860
in that urlTemplate.

00:10:50.160 --> 00:10:50.660
OK.

00:10:50.660 --> 00:10:53.430
But what is this urlTemplate
and how does it work?

00:10:53.430 --> 00:10:57.340
Well, the urlTemplate value
follows the RFC6570 spec.

00:10:57.340 --> 00:10:58.288
Great, right?

00:10:58.288 --> 00:11:00.830
I wasn't familiar with that spec
before work on this project,

00:11:00.830 --> 00:11:02.400
either.

00:11:02.400 --> 00:11:04.625
But for most developers,
all you really need to know

00:11:04.625 --> 00:11:06.500
is that those particular
parameters are going

00:11:06.500 --> 00:11:08.540
to expand into
the parameter name

00:11:08.540 --> 00:11:10.400
equals the parameter
value when it's

00:11:10.400 --> 00:11:12.720
expanded from the template.

00:11:12.720 --> 00:11:14.550
Let's look at this example.

00:11:14.550 --> 00:11:17.250
So we've got our template at
the top here, like we defined.

00:11:17.250 --> 00:11:19.500
Now the user may
say something like,

00:11:19.500 --> 00:11:22.280
hey, Google, ask my
fitness app how many miles

00:11:22.280 --> 00:11:24.197
have I run today?

00:11:24.197 --> 00:11:25.780
Now as Adam C was
talking about, we're

00:11:25.780 --> 00:11:27.155
going to run our
natural language

00:11:27.155 --> 00:11:28.600
understanding on this phrase.

00:11:28.600 --> 00:11:30.350
We're going to extract
out the application

00:11:30.350 --> 00:11:32.310
that the user is asking about.

00:11:32.310 --> 00:11:34.518
We're also going to extract
out the fact that they're

00:11:34.518 --> 00:11:36.980
talking about an intent that
maps over to the get exercise

00:11:36.980 --> 00:11:39.972
observation action.

00:11:39.972 --> 00:11:41.930
Well, they're going to
look at the text of that

00:11:41.930 --> 00:11:43.460
and we're going to find out
that they're talking about how

00:11:43.460 --> 00:11:45.190
many miles that they've run.

00:11:45.190 --> 00:11:47.482
And we're going to be able
to extract out the structure

00:11:47.482 --> 00:11:50.240
parameters of running for
the activity and distance

00:11:50.240 --> 00:11:53.470
for the exercise property.

00:11:53.470 --> 00:11:56.602
Then we can populate those
parameters into the URL.

00:11:56.602 --> 00:12:00.240
You can see here what the final
deep link URL will look like.

00:12:00.240 --> 00:12:05.050
HTTPS://yoursite.com/stats
with exercise set to running

00:12:05.050 --> 00:12:07.340
and property set to distance.

00:12:07.340 --> 00:12:09.740
I think it's pretty neat
how we're able to do that.

00:12:12.903 --> 00:12:14.570
Now some of you might
have noted there's

00:12:14.570 --> 00:12:17.270
some additional information
in this user's request--

00:12:17.270 --> 00:12:19.105
the word today.

00:12:19.105 --> 00:12:20.480
This is going to
be a time period

00:12:20.480 --> 00:12:22.400
that the user is talking about.

00:12:22.400 --> 00:12:24.240
But can we handle that, as well?

00:12:24.240 --> 00:12:25.880
And the answer is yes, you can.

00:12:25.880 --> 00:12:29.100
Some actions support these
kinds of parameters, as well.

00:12:29.100 --> 00:12:30.722
And this one does.

00:12:30.722 --> 00:12:32.180
Now I didn't show
it in the actions

00:12:32.180 --> 00:12:33.890
that xml was showing before.

00:12:33.890 --> 00:12:36.350
But if we had more space,
we could expand and add

00:12:36.350 --> 00:12:38.510
an additional parameter
mapping blocks to map

00:12:38.510 --> 00:12:41.120
to the start time and end time.

00:12:41.120 --> 00:12:44.310
We can then update a
urlTemplate like you see here.

00:12:44.310 --> 00:12:46.588
And then now, when the
user says the word today,

00:12:46.588 --> 00:12:48.380
it maps through to
those parameters for us,

00:12:48.380 --> 00:12:50.030
expanding it into
the actual values

00:12:50.030 --> 00:12:51.590
that we can use in our app.

00:12:51.590 --> 00:12:54.110
We can see at the bottom
that start date and end date

00:12:54.110 --> 00:12:57.500
have now been set for us
with the date of today,

00:12:57.500 --> 00:13:01.070
May 8, 2019, at the start of
the day and the end of the day.

00:13:05.730 --> 00:13:06.670
OK.

00:13:06.670 --> 00:13:08.500
Coming back to our
actions xml, there's

00:13:08.500 --> 00:13:11.260
one additional attribute
I wanted to call out.

00:13:11.260 --> 00:13:12.990
That's the required
equals true attribute

00:13:12.990 --> 00:13:15.760
that you can set on
the parameter block.

00:13:15.760 --> 00:13:17.560
This does exactly
what you'd expect.

00:13:17.560 --> 00:13:19.180
It means that you
absolutely require

00:13:19.180 --> 00:13:23.470
this particular parameter to
be set by the users phrase.

00:13:23.470 --> 00:13:25.490
If not, this fulfillment
block will be skipped,

00:13:25.490 --> 00:13:29.490
and the next fulfillment
block below it will be tried.

00:13:29.490 --> 00:13:32.157
Now this has a couple
of implications.

00:13:32.157 --> 00:13:33.990
It means that you must
always have something

00:13:33.990 --> 00:13:35.808
called a fallback fulfillment.

00:13:35.808 --> 00:13:38.100
That's a fulfillment at the
bottom of your action block

00:13:38.100 --> 00:13:41.733
that can pick up any
action that the user says

00:13:41.733 --> 00:13:44.150
that doesn't match one of the
previous fulfillment blocks.

00:13:46.770 --> 00:13:49.200
The other implication is
that by default, required

00:13:49.200 --> 00:13:50.605
is going to be set to false.

00:13:50.605 --> 00:13:52.230
And that must mean
that your app should

00:13:52.230 --> 00:13:54.810
be prepared to receive that
parameter with no value set.

00:13:59.750 --> 00:14:00.250
OK.

00:14:00.250 --> 00:14:02.333
So how does this all come
together in your Android

00:14:02.333 --> 00:14:03.903
Application well,
the great thing

00:14:03.903 --> 00:14:06.070
here is now we're just going
to use standard Android

00:14:06.070 --> 00:14:09.910
APIs to receive and
understand those parameters.

00:14:09.910 --> 00:14:12.755
Here you can see some example
code from an activity.

00:14:12.755 --> 00:14:14.380
We're going to read
the intent that was

00:14:14.380 --> 00:14:15.838
used to start that activity.

00:14:15.838 --> 00:14:17.380
We're going to read
the data URI that

00:14:17.380 --> 00:14:19.010
was used to start the activity.

00:14:19.010 --> 00:14:21.160
And we're going to
extract those properties

00:14:21.160 --> 00:14:23.170
that we set in the
parameter mapping block,

00:14:23.170 --> 00:14:24.700
using getQueryParameter.

00:14:24.700 --> 00:14:26.920
You can see here we're
extracting the exercise

00:14:26.920 --> 00:14:30.210
and property values.

00:14:30.210 --> 00:14:32.670
Now at this point, it's
really up to your application

00:14:32.670 --> 00:14:35.110
as to what to do next.

00:14:35.110 --> 00:14:38.090
You could go and pre-populate
a bunch of entry fields

00:14:38.090 --> 00:14:40.240
and then have a big
button ready for the user

00:14:40.240 --> 00:14:41.800
to go and execute that action.

00:14:46.720 --> 00:14:47.610
OK.

00:14:47.610 --> 00:14:50.400
Coming back to a similar example
to what Adam C showed earlier

00:14:50.400 --> 00:14:53.520
in his section, at this
stage of the implementation,

00:14:53.520 --> 00:14:57.930
Assistant is able to fulfill
a request by deep link.

00:14:57.930 --> 00:15:00.000
The user asks the
Assistant a query.

00:15:00.000 --> 00:15:02.670
We run our natural language
understanding on the query.

00:15:02.670 --> 00:15:05.160
It identifies which
App Action to call--

00:15:05.160 --> 00:15:07.140
get exercise
observation, for example.

00:15:07.140 --> 00:15:10.110
It extracts those
structured parameters.

00:15:10.110 --> 00:15:11.950
It looks at the
actions of that xml

00:15:11.950 --> 00:15:14.610
from the application to find
the right fulfillment block.

00:15:14.610 --> 00:15:16.590
It gets that urlTemplate.

00:15:16.590 --> 00:15:18.810
It substitutes in
the parameters.

00:15:18.810 --> 00:15:22.310
It calls through to the Android
application, which opens up.

00:15:22.310 --> 00:15:25.080
And then the Android application
processes those parameters

00:15:25.080 --> 00:15:27.960
and is able to execute
that action for the user.

00:15:32.430 --> 00:15:35.330
Now this is a good
point to call out

00:15:35.330 --> 00:15:38.570
our sample that we published on
GitHub, the fit action sample.

00:15:38.570 --> 00:15:41.570
You can get it today on the
Actions on Google GitHub

00:15:41.570 --> 00:15:42.682
repository.

00:15:42.682 --> 00:15:45.140
It's a really good example of
how all this flow that I just

00:15:45.140 --> 00:15:46.790
talked about works end to end.

00:15:50.540 --> 00:15:51.380
OK.

00:15:51.380 --> 00:15:53.860
One additional feature I
want to talk about in Step 2,

00:15:53.860 --> 00:15:55.490
inline inventory.

00:15:55.490 --> 00:15:58.010
This is where you can
optionally tell the Assistant

00:15:58.010 --> 00:16:00.395
about unique values in your app.

00:16:00.395 --> 00:16:02.270
Inline inventory is a
lightweight way for you

00:16:02.270 --> 00:16:04.790
to customize the parameter
values that your app expects

00:16:04.790 --> 00:16:08.310
to receive from the Assistant.

00:16:08.310 --> 00:16:10.010
Now this makes
sense where you have

00:16:10.010 --> 00:16:12.620
a kind of finite list
of possible values

00:16:12.620 --> 00:16:14.840
a good example might be a
restaurant's list of menu

00:16:14.840 --> 00:16:17.330
items, because they would be
unique for each restaurant

00:16:17.330 --> 00:16:19.872
and finite in length.

00:16:19.872 --> 00:16:21.830
We've been working with
Dunkin' in early access

00:16:21.830 --> 00:16:23.430
to test a lot of this out.

00:16:23.430 --> 00:16:25.070
So let's look at an
example from them

00:16:25.070 --> 00:16:27.830
to illustrate how this works.

00:16:27.830 --> 00:16:30.140
The user may say something
like, hey, Google,

00:16:30.140 --> 00:16:34.550
order a blueberry crisp ice
signature latte from Dunkin'.

00:16:34.550 --> 00:16:37.750
Now the user may say
that phrase and we'll

00:16:37.750 --> 00:16:40.265
be able to extract
the text from it.

00:16:40.265 --> 00:16:42.890
But of course, the user may say
it in a slightly different way.

00:16:42.890 --> 00:16:46.800
They're not always going to
get that exact product name.

00:16:46.800 --> 00:16:49.290
Inline inventory will let us
tell the Assistant about what

00:16:49.290 --> 00:16:51.600
values to expect and
subsequently make

00:16:51.600 --> 00:16:56.130
it easier to handle within
our Android application.

00:16:56.130 --> 00:16:58.790
Let's look at an
example to illustrate.

00:16:58.790 --> 00:17:00.860
Back inside our
actions.xml, we've

00:17:00.860 --> 00:17:03.180
defined something you'd
call an entity set.

00:17:03.180 --> 00:17:06.210
And we've given it
an ID of menu items.

00:17:06.210 --> 00:17:08.300
It's that ID that we're
going to use to link back

00:17:08.300 --> 00:17:09.842
to the parameter
mapping block that I

00:17:09.842 --> 00:17:12.240
was talking about earlier.

00:17:12.240 --> 00:17:15.569
Within our entity set, we can
define a number of entities.

00:17:15.569 --> 00:17:18.680
I've shown to here's an example.

00:17:18.680 --> 00:17:21.069
Each entity has
three attributes.

00:17:21.069 --> 00:17:23.319
There's an identifier, which
is a unique idea that you

00:17:23.319 --> 00:17:25.720
give to that particular entity.

00:17:25.720 --> 00:17:28.900
There's a name, which is the
canonical name for that entity.

00:17:28.900 --> 00:17:30.550
Here, we've given
it an Android string

00:17:30.550 --> 00:17:33.160
resource called blueberrylatte.

00:17:33.160 --> 00:17:35.710
And then there's an optional
ultimate name attribute,

00:17:35.710 --> 00:17:38.020
which is an array
of strings where

00:17:38.020 --> 00:17:40.000
you can define alternate
names or synonyms

00:17:40.000 --> 00:17:43.120
for that particular entity.

00:17:43.120 --> 00:17:47.350
Here we've given it an Android
resource, blueberry synonyms.

00:17:47.350 --> 00:17:50.130
Now for the Android
developers in the room,

00:17:50.130 --> 00:17:53.220
you'll note that the nice thing
about using Android resources

00:17:53.220 --> 00:17:56.700
is that by default, out of the
box, we'll get localization.

00:17:56.700 --> 00:17:58.980
So if these entities
have different names

00:17:58.980 --> 00:18:00.990
or different synonyms
for different countries

00:18:00.990 --> 00:18:03.780
or languages, you can define
them in your Android resources

00:18:03.780 --> 00:18:05.988
as you normally would and
we'll pick them up for you.

00:18:09.650 --> 00:18:11.360
Let's have a look
inside a strings.xml

00:18:11.360 --> 00:18:12.813
that would match with this.

00:18:12.813 --> 00:18:14.730
As you can see, we defined
the canonical names

00:18:14.730 --> 00:18:16.910
for these two entities,
blueberrylatte and

00:18:16.910 --> 00:18:18.737
caramelcrazelatte.

00:18:18.737 --> 00:18:20.570
And then we've defined
a number of synonyms,

00:18:20.570 --> 00:18:22.880
as well, that would go with
those blueberry synonyms

00:18:22.880 --> 00:18:26.280
and caramel craze synonyms.

00:18:26.280 --> 00:18:26.780
OK.

00:18:26.780 --> 00:18:30.030
But what does this actually get
us if we go and implement it?

00:18:30.030 --> 00:18:31.530
Well, now the user
can say something

00:18:31.530 --> 00:18:35.160
like, hey, Google, order a
blueberry crisp iced signature

00:18:35.160 --> 00:18:36.960
latte from Dunkin'.

00:18:36.960 --> 00:18:40.590
Or they could say, hey, Google,
order a blueberry iced coffee

00:18:40.590 --> 00:18:41.690
from Dunkin'.

00:18:41.690 --> 00:18:44.270
And Assistant will be able
to extract out those names,

00:18:44.270 --> 00:18:47.220
match it against our
entities that we defined,

00:18:47.220 --> 00:18:48.840
and convert it over
to the unique ID

00:18:48.840 --> 00:18:51.390
that we defined in
our actions.xml.

00:18:51.390 --> 00:18:55.870
In this case, the ID
was 1, 2, 3, 4, 5, 8.

00:18:55.870 --> 00:18:58.302
We're then going to
pass that unique ID over

00:18:58.302 --> 00:18:59.760
to your Android
application instead

00:18:59.760 --> 00:19:01.468
of the name of the product.

00:19:01.468 --> 00:19:04.010
And you can quickly use that to
show the user the right thing

00:19:04.010 --> 00:19:05.510
in your application
and get the user

00:19:05.510 --> 00:19:07.700
to be able to complete
that action quicker.

00:19:07.700 --> 00:19:10.570
You can see an example of this
in action on the right here.

00:19:15.460 --> 00:19:15.960
All right.

00:19:15.960 --> 00:19:18.710
That was a lot of
information for Step 2.

00:19:18.710 --> 00:19:21.420
I'm going to move
along to Step 3,

00:19:21.420 --> 00:19:24.055
optimizing app
for the Assistant.

00:19:24.055 --> 00:19:25.680
In this step, we ask
that you implement

00:19:25.680 --> 00:19:28.110
three additional APIs.

00:19:28.110 --> 00:19:29.400
Why?

00:19:29.400 --> 00:19:32.460
This is really to help Assistant
gain additional understanding

00:19:32.460 --> 00:19:36.120
of your application and
of your App Actions.

00:19:36.120 --> 00:19:38.100
I'm going to walk
through each one, what

00:19:38.100 --> 00:19:40.915
it is, why it's
needed, and go over

00:19:40.915 --> 00:19:42.040
the implementation quickly.

00:19:45.020 --> 00:19:45.730
OK.

00:19:45.730 --> 00:19:49.270
The first one is logging
a result via Firebase.

00:19:49.270 --> 00:19:51.070
So what is this?

00:19:51.070 --> 00:19:53.850
Well, as Google Assistant
loses visibility

00:19:53.850 --> 00:19:56.350
of what happens after the user
is taken over to your Android

00:19:56.350 --> 00:19:58.360
application, we
ask that you send

00:19:58.360 --> 00:20:02.117
us a simple success
or failure signal

00:20:02.117 --> 00:20:04.450
so that we know if the user
was successful in completing

00:20:04.450 --> 00:20:06.710
that App Action.

00:20:06.710 --> 00:20:08.310
Why do we need this?

00:20:08.310 --> 00:20:11.600
So we can be confident in
continuing to send users over

00:20:11.600 --> 00:20:12.925
to your Android application.

00:20:12.925 --> 00:20:14.300
Because without
this, we wouldn't

00:20:14.300 --> 00:20:16.467
know if the user is having
a good experience or not.

00:20:21.090 --> 00:20:23.520
Implementation requires that
you first set up your Android

00:20:23.520 --> 00:20:25.710
application for Firebase.

00:20:25.710 --> 00:20:28.290
Then in your build.gradle file,
go in and add a dependency

00:20:28.290 --> 00:20:30.702
to the app indexing library.

00:20:30.702 --> 00:20:32.910
Now I'm not going to talk
about app indexing in depth

00:20:32.910 --> 00:20:34.145
in this talk.

00:20:34.145 --> 00:20:35.520
But for those of
you who know it,

00:20:35.520 --> 00:20:37.353
you might be thinking,
whoa, do I need to go

00:20:37.353 --> 00:20:40.575
and actually implement all of
app indexing to implement this?

00:20:40.575 --> 00:20:41.450
And the answer is no.

00:20:41.450 --> 00:20:44.340
We're only going to use a very
small part of the app indexing

00:20:44.340 --> 00:20:48.930
library, a set of APIs called
the Firebase user actions APIs.

00:20:48.930 --> 00:20:51.120
And the entire code for
how you implement this

00:20:51.120 --> 00:20:53.350
is seen on this slide.

00:20:53.350 --> 00:20:54.990
Here we're in our
activity and we've

00:20:54.990 --> 00:20:59.750
defined a function called
notifyActionSuccess.

00:20:59.750 --> 00:21:02.550
This takes a single parameter
of if that particular app

00:21:02.550 --> 00:21:04.250
action was successful or not.

00:21:08.045 --> 00:21:09.420
The first thing
we're going to do

00:21:09.420 --> 00:21:11.940
is look at the intent that was
used to start this activity

00:21:11.940 --> 00:21:14.530
and extract off a
special token extra.

00:21:14.530 --> 00:21:17.190
You can see that
highlighted here.

00:21:17.190 --> 00:21:18.930
This is a special
token that we pass over

00:21:18.930 --> 00:21:21.400
from the Assistant to Android
application in that deep link

00:21:21.400 --> 00:21:21.900
intent.

00:21:25.100 --> 00:21:28.190
Next we're going to call upon
a special AssistActionBuilder

00:21:28.190 --> 00:21:31.310
class from the Firebase
[INAUDIBLE] library.

00:21:31.310 --> 00:21:33.050
We're going to set
that token and we're

00:21:33.050 --> 00:21:36.430
going to set the status, the
success or failure status.

00:21:36.430 --> 00:21:38.887
Then we're going to call
the FirebaseUserActions API

00:21:38.887 --> 00:21:40.720
and we're going to call
a special method end

00:21:40.720 --> 00:21:42.807
and pass in that action.

00:21:42.807 --> 00:21:44.640
Now you might be thinking,
what is this end?

00:21:44.640 --> 00:21:46.840
Like, why am I calling
it end all of a sudden?

00:21:46.840 --> 00:21:48.710
Well, FirebaseUserActions
works like this.

00:21:48.710 --> 00:21:51.290
It has a start,
and it has an end.

00:21:51.290 --> 00:21:53.360
The start signifies the
start of the action.

00:21:53.360 --> 00:21:56.340
But in this case, that happened
over in the Google Assistant.

00:21:56.340 --> 00:21:57.840
End signifies the
end of the action,

00:21:57.840 --> 00:22:00.132
and that's going to happen
in your Android application.

00:22:03.810 --> 00:22:06.150
After that, we're going to
call NotifyActionSuccess,

00:22:06.150 --> 00:22:07.800
the function that we
created along with

00:22:07.800 --> 00:22:10.380
STATUS_TYPE_COMPLETED if
that app action completed

00:22:10.380 --> 00:22:12.490
successfully or
STATUS_TYPE_FAILED if it

00:22:12.490 --> 00:22:12.990
didn't.

00:22:15.940 --> 00:22:16.880
OK.

00:22:16.880 --> 00:22:18.680
Next one, handling
something called

00:22:18.680 --> 00:22:21.570
the Search Common Intent.

00:22:21.570 --> 00:22:23.360
This is actually an
existing Android API

00:22:23.360 --> 00:22:24.818
and the developer
documentation has

00:22:24.818 --> 00:22:27.590
been up on the docs for
quite a while already.

00:22:27.590 --> 00:22:29.720
But what is this, if you're
not familiar with it?

00:22:29.720 --> 00:22:33.750
Well, it lets your app respond
to a generic search query.

00:22:33.750 --> 00:22:37.250
For example, the user may say,
hey, Google, search for sushi

00:22:37.250 --> 00:22:38.653
on my restaurant app.

00:22:38.653 --> 00:22:40.070
This would allow
the My Restaurant

00:22:40.070 --> 00:22:43.550
app to open up, and be passed
the term sushi, after which it

00:22:43.550 --> 00:22:45.260
could run a particular
search query

00:22:45.260 --> 00:22:48.160
within the app for that term.

00:22:48.160 --> 00:22:49.660
Why do we need this?

00:22:49.660 --> 00:22:51.610
Well, it's utilized
by App Actions

00:22:51.610 --> 00:22:54.160
basically as a fallback
to provide a better user

00:22:54.160 --> 00:22:57.050
experience when things may
not go according to plan.

00:22:57.050 --> 00:22:58.510
But we still have
a high confidence

00:22:58.510 --> 00:23:01.020
that the user wants to
use your application.

00:23:05.020 --> 00:23:07.722
Implementation is
quite straightforward.

00:23:07.722 --> 00:23:09.430
First of all, go to
your Android manifest

00:23:09.430 --> 00:23:12.460
and add a new intent filter
to either an existing activity

00:23:12.460 --> 00:23:14.880
or create a new activity.

00:23:14.880 --> 00:23:17.310
Set the action to
what you see here--

00:23:17.310 --> 00:23:20.468
com.google.andro
id.gms.actions.SEARCH_ACTION.

00:23:20.468 --> 00:23:22.510
And set category default
like you normally would.

00:23:25.082 --> 00:23:26.540
Then in your
activity, you're going

00:23:26.540 --> 00:23:28.373
to use standard APIs
to read the intent that

00:23:28.373 --> 00:23:30.140
was used to stop the
activity and check

00:23:30.140 --> 00:23:33.620
the action matches the action
we set in our manifest.

00:23:33.620 --> 00:23:35.950
We're going to read off
a special string extra,

00:23:35.950 --> 00:23:39.350
SearchIntents.EXTRA_QUERY, which
is going to be that search term

00:23:39.350 --> 00:23:41.750
that I was talking about before.

00:23:41.750 --> 00:23:44.270
And then at that point,
kind of like before,

00:23:44.270 --> 00:23:47.070
it's really up to your
app as to what to do next.

00:23:47.070 --> 00:23:49.420
If you have a search
screen in your application,

00:23:49.420 --> 00:23:52.158
you're probably going to want to
open that up, populate the text

00:23:52.158 --> 00:23:54.200
entry field, and execute
the search for the user.

00:23:58.300 --> 00:24:02.480
The third API that I'm going
to talk about, the Assist API.

00:24:02.480 --> 00:24:05.280
Now this one has also actually
been around for a little while.

00:24:05.280 --> 00:24:07.530
It's an existing Android API
and is already documented

00:24:07.530 --> 00:24:10.950
on our Developer website.

00:24:10.950 --> 00:24:12.030
What is this?

00:24:12.030 --> 00:24:13.710
Well, this provides
the Assistant

00:24:13.710 --> 00:24:16.170
additional information
about what's currently being

00:24:16.170 --> 00:24:19.660
displayed by your application.

00:24:19.660 --> 00:24:21.290
And why do we need this?

00:24:21.290 --> 00:24:23.620
Well, it allows us to offer
a better user experience

00:24:23.620 --> 00:24:26.740
when the users invoke the
Assistant or App Actions while

00:24:26.740 --> 00:24:29.180
already using an application.

00:24:29.180 --> 00:24:30.880
Now you might be
thinking, well, when

00:24:30.880 --> 00:24:33.350
is the user using my
application and calling it up

00:24:33.350 --> 00:24:34.488
on the Assistant?

00:24:34.488 --> 00:24:37.030
Well, hopefully you saw the cool
demos of the next generation

00:24:37.030 --> 00:24:39.130
Assistant and you can
see what the future holds

00:24:39.130 --> 00:24:41.347
for the Assistant, where
it can be everywhere

00:24:41.347 --> 00:24:43.180
and can help you no
matter what kind of task

00:24:43.180 --> 00:24:44.953
you're trying to achieve.

00:24:44.953 --> 00:24:47.620
So you can see where an API like
this would come in really handy

00:24:47.620 --> 00:24:49.610
for something like that.

00:24:49.610 --> 00:24:52.257
But even today, if you
long press the Home button

00:24:52.257 --> 00:24:54.340
on many Android devices,
it'll call up your system

00:24:54.340 --> 00:24:57.300
as an overlay on top of whatever
the user is currently doing.

00:24:57.300 --> 00:24:58.900
It's at that point
that this API gets

00:24:58.900 --> 00:25:01.000
called to get additional
information about what's

00:25:01.000 --> 00:25:02.000
currently on the screen.

00:25:07.640 --> 00:25:10.920
To implement this inside
a particular activity,

00:25:10.920 --> 00:25:15.140
override a method called
onProvideAssistContent.

00:25:15.140 --> 00:25:18.170
This takes a single parameter
of type Assist Content.

00:25:18.170 --> 00:25:20.720
And what we ask that you set
is in the structured data

00:25:20.720 --> 00:25:24.530
field of this object, set
a special JSON-LD object

00:25:24.530 --> 00:25:27.730
based on Schema.org markup.

00:25:27.730 --> 00:25:29.480
We have more details
of exactly the values

00:25:29.480 --> 00:25:31.438
you should be setting on
our developer website.

00:25:31.438 --> 00:25:33.710
But as an illustration,
here you can

00:25:33.710 --> 00:25:36.273
see we're setting a
schema.org type of menu item.

00:25:36.273 --> 00:25:37.940
And then we're saying
the name parameter

00:25:37.940 --> 00:25:39.398
to blueberry crisp
iced signature

00:25:39.398 --> 00:25:40.940
latte, the item that
would be showing

00:25:40.940 --> 00:25:43.460
on the screen at
a particular time.

00:25:43.460 --> 00:25:46.130
Finally, if we use App Actions--

00:25:46.130 --> 00:25:49.850
I'm sorry, if we use
Android app links now

00:25:49.850 --> 00:25:51.270
for this particular
screen, we're

00:25:51.270 --> 00:25:53.537
going to set the
URL appropriately.

00:25:56.670 --> 00:25:58.058
All right, that's it for Step 3.

00:25:58.058 --> 00:25:58.850
We're almost there.

00:25:58.850 --> 00:25:59.960
Stick with me.

00:25:59.960 --> 00:26:05.280
Step 4, testing and deployment.

00:26:05.280 --> 00:26:07.810
So testing out app actions
is particularly tricky.

00:26:07.810 --> 00:26:09.340
Because the
Assistant needs to be

00:26:09.340 --> 00:26:13.480
aware on our back end of the
content of your actions.xml.

00:26:13.480 --> 00:26:16.600
To facilitate testing, we
created a special App Actions

00:26:16.600 --> 00:26:20.020
test tool plug-in
for Android Studio.

00:26:20.020 --> 00:26:23.020
It goes and reads your local
development actions.xml,

00:26:23.020 --> 00:26:25.460
it passes it, and sends
it up to our back end.

00:26:25.460 --> 00:26:27.693
And it creates a special
App Actions preview

00:26:27.693 --> 00:26:29.110
just for the Google
account that's

00:26:29.110 --> 00:26:32.230
logged into Android Studio.

00:26:32.230 --> 00:26:33.687
Then on your test
devices, as long

00:26:33.687 --> 00:26:35.770
as you are logged in with
the same Google account,

00:26:35.770 --> 00:26:39.720
you can immediately
test those App Actions.

00:26:39.720 --> 00:26:42.540
Now it's worth noting that
that Google account must also

00:26:42.540 --> 00:26:45.210
have access to that package
name in the Google Play Console

00:26:45.210 --> 00:26:46.710
so that we know
that you're an owner

00:26:46.710 --> 00:26:50.180
of that particular package.

00:26:50.180 --> 00:26:53.280
See a screenshot of the
test tool on the left.

00:26:53.280 --> 00:26:54.823
Now it might be
hard to make out.

00:26:54.823 --> 00:26:56.740
But what you can see is
an App Actions preview

00:26:56.740 --> 00:26:57.992
has been published.

00:26:57.992 --> 00:26:59.700
You can configure a
particular App Action

00:26:59.700 --> 00:27:01.890
that you've defined
in your actions.xml.

00:27:01.890 --> 00:27:05.540
You can set test values for the
parameters that you defined.

00:27:05.540 --> 00:27:08.110
Then it generates a
special ADB command

00:27:08.110 --> 00:27:10.340
that can go and test that
in the Google Assistant

00:27:10.340 --> 00:27:12.340
and call through to Android app.

00:27:12.340 --> 00:27:14.460
You can click Run to run
it on a device that's

00:27:14.460 --> 00:27:16.410
connected to your
machine immediately,

00:27:16.410 --> 00:27:19.110
or you can click Copy to copy
the ADB command to use it

00:27:19.110 --> 00:27:21.210
in test scripts or a
CI system, for example.

00:27:24.346 --> 00:27:28.070
And finally deployment, as
Adam C mentioned earlier,

00:27:28.070 --> 00:27:30.630
you can start developing
App Actions today.

00:27:30.630 --> 00:27:34.420
And it'll go live for end
users later this year.

00:27:34.420 --> 00:27:36.100
To get started, first
make sure you've

00:27:36.100 --> 00:27:38.770
completed the form on
our developer website

00:27:38.770 --> 00:27:42.040
so that we know that you're
building App Actions.

00:27:42.040 --> 00:27:43.472
When it comes to
deployment time,

00:27:43.472 --> 00:27:45.430
you're going to upload
your regular Android app

00:27:45.430 --> 00:27:48.280
binary, your APK, or
your Android app bundle

00:27:48.280 --> 00:27:50.600
to Google Play Console
as you normally would.

00:27:50.600 --> 00:27:52.600
We're then going to extract
out that actions.xml

00:27:52.600 --> 00:27:54.683
and send it over to our
Actions on Google back end

00:27:54.683 --> 00:27:57.033
to be processed.

00:27:57.033 --> 00:27:59.200
Now, it's worth noting that
there is a manual review

00:27:59.200 --> 00:28:01.750
process that will take
place on your App Actions

00:28:01.750 --> 00:28:03.820
to ensure a great
user experience.

00:28:03.820 --> 00:28:06.550
But this review process will not
affect the regular Android app

00:28:06.550 --> 00:28:09.130
review timelines and deployment
status in Google Play.

00:28:12.310 --> 00:28:12.810
OK.

00:28:12.810 --> 00:28:14.060
That was a lot of information.

00:28:14.060 --> 00:28:16.590
Let me quickly recap
the implementation.

00:28:16.590 --> 00:28:19.710
Step number one, supporting
deep links in your Android app.

00:28:19.710 --> 00:28:21.330
Step number two,
telling the Assistant

00:28:21.330 --> 00:28:23.038
how to take advantage
of those deep links

00:28:23.038 --> 00:28:26.370
and use your app via
the actions.xml file.

00:28:26.370 --> 00:28:28.753
Step number three,
optimizing your app further

00:28:28.753 --> 00:28:30.420
for the Google Assistant
by implementing

00:28:30.420 --> 00:28:32.830
the three APIs I talked about.

00:28:32.830 --> 00:28:36.750
And then finally, testing, using
the Studio test tool plug-in

00:28:36.750 --> 00:28:39.384
and deploying via
the Play Console.

00:28:39.384 --> 00:28:45.288
[APPLAUSE]

00:28:46.770 --> 00:28:48.090
SOFIA ALTUNA: All right.

00:28:48.090 --> 00:28:49.770
So now that you've
seen all of the steps

00:28:49.770 --> 00:28:52.980
for implementing App Actions,
you know how quick and simple

00:28:52.980 --> 00:28:53.910
it is.

00:28:53.910 --> 00:28:56.680
As a user, I also find
it really refreshing.

00:28:56.680 --> 00:28:59.330
Now I can begin my app
journeys with voice

00:28:59.330 --> 00:29:01.950
and fast forward a couple of
steps into the right actions

00:29:01.950 --> 00:29:04.740
and content that I want to see.

00:29:04.740 --> 00:29:08.070
Here are a few examples from
some of our early developers.

00:29:08.070 --> 00:29:10.860
As the Adams were
showing us before, I

00:29:10.860 --> 00:29:14.640
can start tracking my run
with no taps and no clicks

00:29:14.640 --> 00:29:17.370
simply by saying, hey,
Google, start my run

00:29:17.370 --> 00:29:19.120
with Nike Run Club.

00:29:19.120 --> 00:29:23.270
I can as easily order food from
some of my favorite apps, book

00:29:23.270 --> 00:29:26.370
a ride, or even check my
financials, whether that's

00:29:26.370 --> 00:29:29.670
my account balance, my
bills, my investments,

00:29:29.670 --> 00:29:32.550
or even send money to
a friend using PayPal.

00:29:32.550 --> 00:29:34.530
Again, these are
just a few examples

00:29:34.530 --> 00:29:36.398
from some of our
early developers

00:29:36.398 --> 00:29:38.190
within the first four
categories that we're

00:29:38.190 --> 00:29:39.450
going to be launching.

00:29:39.450 --> 00:29:41.370
And as we've
mentioned today, you

00:29:41.370 --> 00:29:43.710
can also get started
building actions like this

00:29:43.710 --> 00:29:46.230
from within your Android apps.

00:29:46.230 --> 00:29:49.800
Simply by creating
a single .xml file,

00:29:49.800 --> 00:29:51.900
you can actually
get started today.

00:29:51.900 --> 00:29:55.860
You can enable your users to
discover, re-engage, and invoke

00:29:55.860 --> 00:29:58.230
your apps by voice
across multiple touch

00:29:58.230 --> 00:30:01.240
points in Android.

00:30:01.240 --> 00:30:03.070
But that's not all.

00:30:03.070 --> 00:30:05.260
Because for simple
answers, wouldn't it

00:30:05.260 --> 00:30:09.090
be nice to give those answers
directly in the Assistant?

00:30:09.090 --> 00:30:12.460
So I see some heads
nodding, so great.

00:30:12.460 --> 00:30:13.760
We think so, too.

00:30:13.760 --> 00:30:15.540
So in this next
session, I'll talk

00:30:15.540 --> 00:30:17.700
about how you can bring
some of your app content

00:30:17.700 --> 00:30:19.500
into the Assistant.

00:30:19.500 --> 00:30:21.780
So let's go back to that
initial example with Nike

00:30:21.780 --> 00:30:23.580
that Adam mentioned.

00:30:23.580 --> 00:30:26.860
Adam started his run by coming
to the Assistant and saying,

00:30:26.860 --> 00:30:29.900
hey, Google, start my
run with Nike Run Club.

00:30:29.900 --> 00:30:31.610
When he finished
his run, he then

00:30:31.610 --> 00:30:33.380
came back to the Assistant.

00:30:33.380 --> 00:30:36.570
And this time he asked for how
many calories he has burned.

00:30:36.570 --> 00:30:38.570
Now you're going to see
that this information is

00:30:38.570 --> 00:30:42.960
being displayed directly in
the Assistant via a Slice.

00:30:42.960 --> 00:30:44.840
So let's pause this
video and break it down

00:30:44.840 --> 00:30:46.820
into all the four steps.

00:30:46.820 --> 00:30:49.070
In the initial
action, we're purely

00:30:49.070 --> 00:30:53.450
deep linking Adam into the Nike
app to start tracking his run.

00:30:53.450 --> 00:30:56.540
However, when Adam then
comes back to the Assistant

00:30:56.540 --> 00:30:59.000
and asks for how many
calories he's burned,

00:30:59.000 --> 00:31:02.570
Nike is displaying a piece,
or a slice of their app,

00:31:02.570 --> 00:31:05.930
directly on the
Assistant via Slices.

00:31:05.930 --> 00:31:08.210
Slices are part of App Actions.

00:31:08.210 --> 00:31:11.150
They're essentially the visual
representation and enhancement

00:31:11.150 --> 00:31:13.220
of this feature.

00:31:13.220 --> 00:31:15.980
For queries that are
one shot, like this one,

00:31:15.980 --> 00:31:19.520
we recommend building Slices so
that you can display the answer

00:31:19.520 --> 00:31:22.460
inline on the Assistant so
that your users don't have

00:31:22.460 --> 00:31:25.420
to take any additional steps.

00:31:25.420 --> 00:31:28.590
Some people call Slices the
modern successor of Android app

00:31:28.590 --> 00:31:30.270
widgets that you may
have already added

00:31:30.270 --> 00:31:31.380
to your home screen.

00:31:31.380 --> 00:31:32.520
And they're right.

00:31:32.520 --> 00:31:35.490
Slices our UI templates
that can display

00:31:35.490 --> 00:31:39.570
rich, dynamic, and interacting
content from your app

00:31:39.570 --> 00:31:42.840
directly on the Assistant
or even a Google search.

00:31:42.840 --> 00:31:44.340
Through these
templates, we're going

00:31:44.340 --> 00:31:47.580
to provide you with a flexible
and rich mode of expressing

00:31:47.580 --> 00:31:51.090
your app that's also
predictable and dependable.

00:31:51.090 --> 00:31:53.280
Slices can also be interactive.

00:31:53.280 --> 00:31:55.590
These templates
house many components

00:31:55.590 --> 00:31:58.350
to enable anything from
rich content preview

00:31:58.350 --> 00:32:00.540
to inline one shot answers.

00:32:00.540 --> 00:32:02.430
If you want to learn
more about Slices,

00:32:02.430 --> 00:32:07.020
please go to our website at
g.co/Slices or go on YouTube

00:32:07.020 --> 00:32:10.605
and see our last year's
I/O talk on this topic.

00:32:10.605 --> 00:32:12.230
The best part about
Slices is that it's

00:32:12.230 --> 00:32:14.110
super easy to implement.

00:32:14.110 --> 00:32:16.290
You simply have to
make two changes when

00:32:16.290 --> 00:32:18.900
creating your actions.xml file.

00:32:18.900 --> 00:32:22.200
First, you have to change the
fulfillment mode to Slice.

00:32:22.200 --> 00:32:25.380
And second, you have to update
the urlTemplate to Slice

00:32:25.380 --> 00:32:26.920
provider instead.

00:32:26.920 --> 00:32:28.740
And then, the
urlTemplate's parameters

00:32:28.740 --> 00:32:31.630
will expand into their values
as our second Adam mentioned

00:32:31.630 --> 00:32:32.130
before.

00:32:32.130 --> 00:32:34.590
[LAUGHTER]

00:32:34.590 --> 00:32:38.760
But the one caveat is that
App Actions and Slices only

00:32:38.760 --> 00:32:41.730
work on devices where
Android apps are installed.

00:32:41.730 --> 00:32:44.580
But as you've seen, Assistant
is in a lot of devices

00:32:44.580 --> 00:32:46.470
where apps are not installed.

00:32:46.470 --> 00:32:48.360
In this new age of
Assistant, people

00:32:48.360 --> 00:32:52.080
have smart speakers, smart
refrigerators, smart vacuums.

00:32:52.080 --> 00:32:52.950
You name it.

00:32:52.950 --> 00:32:55.620
There's a lot of things
you can talk to nowadays.

00:32:55.620 --> 00:32:58.740
And like this, we have many more
new devices and platforms that

00:32:58.740 --> 00:33:00.580
are coming onto the market.

00:33:00.580 --> 00:33:03.270
Many of these are also
not Android-based.

00:33:03.270 --> 00:33:05.100
And sometimes opening
an Android app

00:33:05.100 --> 00:33:07.320
may not be the preferred
way your user wants

00:33:07.320 --> 00:33:09.960
to engage with your
content at every moment.

00:33:09.960 --> 00:33:12.845
So as users turn to many
of these new devices,

00:33:12.845 --> 00:33:14.220
this is a new
opportunity for you

00:33:14.220 --> 00:33:16.320
to reach them, no
matter where they are,

00:33:16.320 --> 00:33:19.240
by creating
Conversational Actions.

00:33:19.240 --> 00:33:21.010
Through Conversational
Actions, you

00:33:21.010 --> 00:33:24.190
can create custom,
multimodal experiences,

00:33:24.190 --> 00:33:28.000
and extend your services to new
form factors and new devices,

00:33:28.000 --> 00:33:31.720
combining conversation and rich
UI interactions for the Google

00:33:31.720 --> 00:33:33.680
Assistant.

00:33:33.680 --> 00:33:35.900
Now Conversational
Actions shouldn't

00:33:35.900 --> 00:33:38.930
try to replicate your
entire app on voice.

00:33:38.930 --> 00:33:41.510
Instead, you should
focus on identifying

00:33:41.510 --> 00:33:43.370
those specific,
unique toothbrush

00:33:43.370 --> 00:33:45.260
moments for your
users that can be

00:33:45.260 --> 00:33:48.470
accessed across all
Assistant-enabled devices.

00:33:48.470 --> 00:33:51.830
With 1 billion plus devices
running on Google Assistant,

00:33:51.830 --> 00:33:53.900
you can build a strong
presence at the moment

00:33:53.900 --> 00:33:56.800
where your users meet you,
no matter where they are.

00:33:56.800 --> 00:33:59.300
If you want to learn more about
how to create Conversational

00:33:59.300 --> 00:34:04.880
Actions, please visit one of
our many talks on this topic,

00:34:04.880 --> 00:34:08.300
including one here
tomorrow at 2:30 PM

00:34:08.300 --> 00:34:10.040
called Designing
Quality Conversations

00:34:10.040 --> 00:34:11.338
for the Google Assistant.

00:34:11.338 --> 00:34:13.130
And for those of you
who are on livestream,

00:34:13.130 --> 00:34:17.010
you can also watch
it live tomorrow.

00:34:17.010 --> 00:34:18.969
Let's do a quick recap.

00:34:18.969 --> 00:34:22.590
So App Actions, which includes
Slices and Conversational

00:34:22.590 --> 00:34:26.310
Actions are both part of the
actions in Google Platform.

00:34:26.310 --> 00:34:27.900
When you look at
App Actions, we just

00:34:27.900 --> 00:34:31.020
look at it as the first step
in your journey with actions.

00:34:31.020 --> 00:34:33.870
It can give you instant increase
in reach and re-engagement

00:34:33.870 --> 00:34:35.940
for your apps across
multiple devices

00:34:35.940 --> 00:34:40.600
on Android with relatively
low developer effort.

00:34:40.600 --> 00:34:43.150
You can also then extend
your brand even further

00:34:43.150 --> 00:34:45.250
by creating
Conversational Actions

00:34:45.250 --> 00:34:47.920
and making sure that you're
ready to engage with your users

00:34:47.920 --> 00:34:50.889
no matter where they are.

00:34:50.889 --> 00:34:53.679
So let's put this together
by showing you an example.

00:34:53.679 --> 00:34:54.909
I'm a Citibank customer.

00:34:54.909 --> 00:34:57.090
So I have their
Android app downloaded.

00:34:57.090 --> 00:35:00.330
So when I'm on my phone, I can
check for my account balance

00:35:00.330 --> 00:35:01.500
or my bills.

00:35:01.500 --> 00:35:04.800
And then I can always click on
Open app to go into their app

00:35:04.800 --> 00:35:06.960
and take additional actions.

00:35:06.960 --> 00:35:09.910
Now Citibank also created
a Conversational Action.

00:35:09.910 --> 00:35:12.840
They've identified one of
those unique toothbrush moments

00:35:12.840 --> 00:35:15.300
for their customers
and created an action

00:35:15.300 --> 00:35:17.370
that let's you check for
Citi-preferred tickets

00:35:17.370 --> 00:35:18.810
to events.

00:35:18.810 --> 00:35:21.150
So I'm Latin, if
you couldn't tell.

00:35:21.150 --> 00:35:22.560
I live in New York City.

00:35:22.560 --> 00:35:24.270
And I love music.

00:35:24.270 --> 00:35:27.870
So I can use the Citibank action
to check for Latin concerts

00:35:27.870 --> 00:35:29.310
in New York City.

00:35:29.310 --> 00:35:32.520
So no matter where I am, whether
I'm driving, I'm at home,

00:35:32.520 --> 00:35:35.070
I'm on my phone,
headphones, you get it,

00:35:35.070 --> 00:35:38.070
no matter where I am
as a Citibank customer,

00:35:38.070 --> 00:35:43.080
I can always reach them across
multiple devices on Assistant.

00:35:43.080 --> 00:35:44.940
Lastly, let's see
how all of this

00:35:44.940 --> 00:35:48.800
fits together from a high level
architectural perspective.

00:35:48.800 --> 00:35:50.700
So if I'm creating
an app, and let's say

00:35:50.700 --> 00:35:53.610
for this purpose it's my
exercising health and fitness

00:35:53.610 --> 00:35:56.250
app, what I'm going
to do first is put up

00:35:56.250 --> 00:35:59.160
a server that will be
connected to my database

00:35:59.160 --> 00:36:01.980
where all of my users'
information is stored.

00:36:01.980 --> 00:36:05.610
Then I'm going to create my app
that will talk to that server

00:36:05.610 --> 00:36:07.830
to get the users'
information and send it

00:36:07.830 --> 00:36:10.080
back to my app, which
will render it based

00:36:10.080 --> 00:36:12.240
on the UI design of my app.

00:36:12.240 --> 00:36:16.050
The same concept works for IOS
and for a web-based interface

00:36:16.050 --> 00:36:18.510
to your app.

00:36:18.510 --> 00:36:21.030
When you then go to create
a Conversational Action,

00:36:21.030 --> 00:36:22.840
you're going to follow
the same process.

00:36:22.840 --> 00:36:25.800
What you're going to do first is
create a Conversational Action

00:36:25.800 --> 00:36:27.780
that will talk to
your server, using

00:36:27.780 --> 00:36:30.180
the same API and the
same infrastructure

00:36:30.180 --> 00:36:33.180
that you've already provided.

00:36:33.180 --> 00:36:36.510
What happens then is, for
queries, such as how many steps

00:36:36.510 --> 00:36:38.640
have I taken today,
the Assistant

00:36:38.640 --> 00:36:41.450
will take care of all the
natural language understanding.

00:36:41.450 --> 00:36:43.650
It will understand
what the query is

00:36:43.650 --> 00:36:45.570
and invoke your action.

00:36:45.570 --> 00:36:48.540
Your action will then also
understand what the query is

00:36:48.540 --> 00:36:50.550
and fulfill that intent.

00:36:50.550 --> 00:36:52.590
In order to fulfill
that intent, you'll

00:36:52.590 --> 00:36:54.540
use a web hook,
which will connect

00:36:54.540 --> 00:36:57.570
to the server on the back end
to provide the response back

00:36:57.570 --> 00:36:59.640
to the Assistant.

00:36:59.640 --> 00:37:02.700
The key point here is
that you as a developer

00:37:02.700 --> 00:37:05.240
don't need to
rebuild anything new.

00:37:05.240 --> 00:37:08.910
You are using the exact
same infrastructure, API,

00:37:08.910 --> 00:37:11.130
and identity mechanisms
that you've already

00:37:11.130 --> 00:37:13.290
provided to your
app to also provide

00:37:13.290 --> 00:37:15.480
a conversational
response to your users

00:37:15.480 --> 00:37:17.280
through the Google Assistant.

00:37:17.280 --> 00:37:18.930
Essentially, you
have one server.

00:37:18.930 --> 00:37:20.760
And you're just
adding a new client,

00:37:20.760 --> 00:37:23.910
whether that's your
Android app, iOS, website,

00:37:23.910 --> 00:37:26.550
or a Conversational Action.

00:37:26.550 --> 00:37:30.230
So with that, hope you're
all as excited as we are.

00:37:30.230 --> 00:37:33.650
And no matter what app you
have, you can get started today.

00:37:33.650 --> 00:37:36.620
If your app falls within one
of the first four categories

00:37:36.620 --> 00:37:37.970
that we've mentioned--

00:37:37.970 --> 00:37:41.480
ridesharing, health and fitness,
finance, and food ordering--

00:37:41.480 --> 00:37:44.960
you can get started implementing
and testing today by visiting

00:37:44.960 --> 00:37:50.810
our website that just went live
yesterday, at g.co/AppActions.

00:37:50.810 --> 00:37:53.990
If your app doesn't fall within
one of these four categories,

00:37:53.990 --> 00:37:55.160
do not worry.

00:37:55.160 --> 00:37:57.950
We have new categories
coming out very soon.

00:37:57.950 --> 00:38:00.920
But you can also get started
by optimizing for App Actions

00:38:00.920 --> 00:38:01.790
today.

00:38:01.790 --> 00:38:03.650
You can start
creating deep links

00:38:03.650 --> 00:38:06.170
for some of your key
application moments,

00:38:06.170 --> 00:38:08.860
and you can also start
experimenting with Slices.

00:38:08.860 --> 00:38:10.950
All of our
documentation is public.

00:38:10.950 --> 00:38:13.670
But if there is one link
you need to remember,

00:38:13.670 --> 00:38:17.840
it's g.co/AppActions.

00:38:17.840 --> 00:38:21.080
For those of you who are here
with us today and this week,

00:38:21.080 --> 00:38:22.987
please come visit
us at office hours

00:38:22.987 --> 00:38:25.570
and come check out some of our
demos in the Assistant sandbox.

00:38:25.570 --> 00:38:27.650
It's literally right
around the corner.

00:38:27.650 --> 00:38:29.570
We still have a lot of I/O left.

00:38:29.570 --> 00:38:31.297
So we look forward
to seeing you around.

00:38:31.297 --> 00:38:33.380
And thank you all so much
for coming this morning.

00:38:33.380 --> 00:38:33.880
[APPLAUSE]

00:38:33.880 --> 00:38:36.730
[GOOGLE LOGO MUSIC PLAYING]

