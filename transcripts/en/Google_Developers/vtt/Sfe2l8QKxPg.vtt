WEBVTT
Kind: captions
Language: en

00:00:12.478 --> 00:00:15.950
ALEX RUSSELL: Good afternoon.

00:00:15.950 --> 00:00:17.242
Hi, I'm Alex Russell.

00:00:16.058 --> 00:00:18.638
I'm a software engineer at
Google and I work on a product

00:00:18.638 --> 00:00:19.678
called Google Chrome Frame.

00:00:19.538 --> 00:00:23.818
And I'm here today to
tell you all about it.

00:00:23.818 --> 00:00:32.158
Google Chrome Frame, in a
nutshell, is a plugin for

00:00:32.158 --> 00:00:34.720
internet explorer that lets
you use HTML5 right now.

00:00:34.720 --> 00:00:38.400
That's sort of the simplest
explanation I can come up

00:00:38.400 --> 00:00:39.940
with about Chrome Frame.

00:00:39.940 --> 00:00:44.280
It lets you use HTML5 today, no
interruptions, no questions

00:00:44.280 --> 00:00:45.640
about backwards compatibility.

00:00:45.640 --> 00:00:48.000
You can start building things
with HTML5 without worrying

00:00:48.000 --> 00:00:50.118
about how you are going
support old versions of IE.

00:00:50.118 --> 00:00:52.700
We'll talk through the rest of
this talk about how you can use

00:00:52.700 --> 00:00:56.560
it, how it works, how it's
compatible with all the rest of

00:00:56.560 --> 00:00:59.120
the content that you might
already have on your internet,

00:00:59.120 --> 00:01:03.280
or that your clients might have
when they're using

00:01:03.280 --> 00:01:03.600
legacy browsers.

00:01:03.600 --> 00:01:08.700
But, to be a little more
technically accurate about it,

00:01:08.700 --> 00:01:12.238
Google Chrome Frame is a plugin
built on the open source

00:01:12.238 --> 00:01:13.140
Chromium project.

00:01:13.260 --> 00:01:15.700
And it is an internet
explorer plugin.

00:01:15.700 --> 00:01:17.500
Its implemented as a browser
helper object, and we'll talk

00:01:17.500 --> 00:01:21.100
a little bit later about what
that is and how it works.

00:01:21.100 --> 00:01:23.760
It lets you, as the developer
choose whether or not you

00:01:23.760 --> 00:01:26.140
would like your page to be
rendered in Chrome Frame.

00:01:26.140 --> 00:01:29.480
And, if a user has Chrome Frame
installed, they'll see it.

00:01:29.480 --> 00:01:32.360
So users and developers both
get a choice in determining how

00:01:32.360 --> 00:01:36.540
a page is rendered when they
have Chrome Frame installed,

00:01:36.540 --> 00:01:38.090
or you're targeting it.

00:01:38.090 --> 00:01:41.020
And, maybe the most important
part of about Chrome Frame, is

00:01:41.020 --> 00:01:45.200
that for organizations and
users who have legacy content,

00:01:45.200 --> 00:01:48.480
legacy systems, or legacy
browsers, it allows the content

00:01:48.480 --> 00:01:51.358
that they need to continue to
work, to continue to work on

00:01:51.358 --> 00:01:51.658
the browsers that
they have today.

00:01:53.800 --> 00:01:55.540
So, before we get into the
details and I tell you all

00:01:55.540 --> 00:01:59.580
about how it works, and why it
works and all of that, I want

00:01:59.580 --> 00:02:02.080
to show you a couple demos.

00:02:02.080 --> 00:02:04.320
The first, of course,
is this presentation.

00:02:04.320 --> 00:02:06.520
So for those of you who are
unfamiliar with Chrome Frame as

00:02:06.520 --> 00:02:10.258
a product, the simplest way
to think about it is that

00:02:10.258 --> 00:02:16.378
everything outside Chrome Frame
is IE like you normally expect.

00:02:16.778 --> 00:02:20.120
So what we're seeing
here is a presentation

00:02:20.120 --> 00:02:21.520
being rendered in IE8.

00:02:23.818 --> 00:02:28.978
As you would normally see IE,
the tool bars are the same.

00:02:28.978 --> 00:02:32.728
I can come up here and I can go
onto the tools and the menus,

00:02:32.728 --> 00:02:35.398
and everything is sort of
the same as you'd expect.

00:02:35.398 --> 00:02:38.998
But, if I come in here and I
right-click on this menu, we'll

00:02:38.998 --> 00:02:40.678
note that the right-click menu
is not the right-click menu

00:02:40.678 --> 00:02:41.858
from internet explorer.

00:02:41.858 --> 00:02:44.320
This is the right-click menu
from Chrome, more or less.

00:02:44.320 --> 00:02:50.440
In fact, all the tools, the
developer tools, the great,

00:02:50.440 --> 00:02:54.318
wonderful, hugely productive
web inspector, that's

00:02:54.318 --> 00:02:58.218
available, including the
command line console, resource

00:02:58.218 --> 00:03:01.220
inspection, audits, the
console, all that stuff is

00:03:01.220 --> 00:03:03.320
available to you as a web
developer when you are using

00:03:03.320 --> 00:03:05.660
Chrome Frame inside of
internet explorer.

00:03:05.660 --> 00:03:08.180
And again, from the user's
perspective this is just IE.

00:03:08.180 --> 00:03:10.838
I can open new tabs.

00:03:10.838 --> 00:03:13.398
I can navigate to new URLs and
if I navigate to a URL thats

00:03:13.398 --> 00:03:16.218
not rendered in Google Chrome
Frame, one that hasn't opted

00:03:16.218 --> 00:03:25.158
in, say Google.com-- there it
is - so Google.com is a webpage

00:03:25.158 --> 00:03:28.004
that hasn't yet opted in to
rendering for Google

00:03:28.004 --> 00:03:28.298
Chrome Frame.

00:03:28.158 --> 00:03:31.358
If I come back here and I
right-click on this menu again,

00:03:31.358 --> 00:03:34.180
we'll see that this is the
normal IE right-click menu.

00:03:34.600 --> 00:03:37.640
This is same thing I would get
if I was just navigating on the

00:03:37.640 --> 00:03:40.798
web with internet
explorer today.

00:03:40.798 --> 00:03:44.698
So, Google Chrome Frame allows
pages optionally to opt

00:03:44.698 --> 00:03:47.218
in to this rendering.

00:03:47.378 --> 00:03:53.998
Let's look at a couple other
demos very quickly here.

00:03:53.998 --> 00:03:58.138
Go back to full screen.

00:03:58.138 --> 00:04:10.678
So Youtube, as you may have
seen yesterday, has announced

00:04:10.678 --> 00:04:11.218
support for HTML5.

00:04:12.218 --> 00:04:17.860
So what we're seeing here is
the HTML5 version of Youtube

00:04:17.860 --> 00:04:21.478
running with the video tag, the
audio support system that you'd

00:04:21.478 --> 00:04:25.678
normally expect, running one of
my favorite Google Chrome ads,

00:04:25.678 --> 00:04:30.878
in Chrome Frame using native
HTML5 audio and video.

00:04:30.878 --> 00:04:33.998
So, as you saw yesterday,
the WebM codec is going to

00:04:33.998 --> 00:04:34.940
be supported in Chrome.

00:04:34.940 --> 00:04:37.078
When that's available that will
be in Chrome Frame as well.

00:04:37.078 --> 00:04:40.000
So, new features that show up
in the platform show up in

00:04:40.000 --> 00:04:41.300
Chrome Frame almost
immediately.

00:04:41.300 --> 00:04:44.640
And you can start targetting
them for sites you develop

00:04:44.640 --> 00:04:50.718
against HTML5 in internet
explorer today.

00:04:50.718 --> 00:04:51.218
So Youtube's pretty hot.

00:04:51.098 --> 00:04:52.938
That's great.

00:04:52.938 --> 00:04:55.458
We can use HTML5 audio
and video tags.

00:04:55.458 --> 00:04:59.020
We can use high-performance
codecs that Chrome supports

00:04:59.020 --> 00:05:05.838
including H264, osgViewer and
now WebM as a great option.

00:05:05.838 --> 00:05:06.360
And, the standard
support is outstanding.

00:05:06.360 --> 00:05:09.540
So, for those of you who are
web developer dorks in the

00:05:09.540 --> 00:05:11.358
room, this should mean
something to you.

00:05:11.358 --> 00:05:11.898
How many is that?

00:05:12.258 --> 00:05:13.058
Everybody?

00:05:13.058 --> 00:05:14.180
Nobody?

00:05:14.180 --> 00:05:16.578
Is this good?

00:05:16.578 --> 00:05:20.318
This is Acid3 passing
100 out of 100 in IE8.

00:05:21.338 --> 00:05:24.040
And, that's not because IE8
supports the Acid3 test.

00:05:24.320 --> 00:05:25.398
In fact.

00:05:25.398 --> 00:05:34.480
If we copy this URL we give
this a go, normally the Acid3

00:05:34.480 --> 00:05:38.360
page isn't sending the header
or the meta-tag that we'll

00:05:38.360 --> 00:05:39.260
talk about in a minute.

00:05:39.260 --> 00:05:41.778
And this is the normal
experience that you will get.

00:05:41.778 --> 00:05:43.360
This is sort of indicated of
the standard support that you

00:05:43.360 --> 00:05:45.860
should expect for apps that
are natively targeting

00:05:45.860 --> 00:05:46.360
legacy browsers.

00:05:46.360 --> 00:05:49.375
So, it would be better
if we could do better.

00:05:50.940 --> 00:05:53.240
So Chrome Frame allows you
to start targeting these

00:05:53.240 --> 00:05:59.318
features almost immediately.

00:05:59.318 --> 00:06:04.898
So the question becomes, let's
assume that I could start

00:06:04.898 --> 00:06:05.498
building a application today.

00:06:06.620 --> 00:06:08.138
And, I could start targeting
Google Chrome Frame.

00:06:08.578 --> 00:06:09.740
What sorts of things
could I use?

00:06:10.860 --> 00:06:11.980
I'm a web developer.

00:06:11.980 --> 00:06:14.600
I started on a project coming
from a web development

00:06:14.600 --> 00:06:16.660
background and I've had this
sort of continual process of

00:06:16.660 --> 00:06:19.240
un-learning and re-learning
how to do my job as

00:06:19.240 --> 00:06:20.578
a web developer.

00:06:20.578 --> 00:06:23.740
Part of that has been there's a
whole series of features that I

00:06:23.740 --> 00:06:26.938
heard about maybe a year, or
two, or three ago, that I sort

00:06:26.938 --> 00:06:29.946
of put back in the back of the
attic and said yea, that

00:06:29.946 --> 00:06:31.000
will be great someday
when I can use it.

00:06:31.980 --> 00:06:35.012
And part of my job now, is to
dust those things off and

00:06:35.012 --> 00:06:37.338
realize that if I target Chrome
Frame I can start using them

00:06:37.338 --> 00:06:39.338
almost immediately, and it's
a very long list indeed.

00:06:40.240 --> 00:06:43.200
You may have seen some of the
wonderful HTML5 presentations

00:06:43.200 --> 00:06:47.018
already, but the list of things
that we can start building with

00:06:47.018 --> 00:06:51.938
today if we could target
modern browsers is really

00:06:51.938 --> 00:06:52.578
sort of eye opening.

00:06:53.660 --> 00:06:56.998
And each one of these, could
maybe revolutionize a

00:06:56.998 --> 00:06:57.140
single application.

00:06:57.140 --> 00:06:59.058
Web GL is coming.

00:06:59.058 --> 00:07:02.918
SVG and canvas support
are already in Chrome.

00:07:02.438 --> 00:07:05.680
All the annimations that you're
seeing in this deck are done

00:07:05.680 --> 00:07:07.700
with CSS annimations
and transforms.

00:07:07.700 --> 00:07:09.768
There isn't Javascript
driving any

00:07:09.768 --> 00:07:10.118
of this.

00:07:10.118 --> 00:07:12.898
The layout of this
presentation, the drop shadows,

00:07:12.898 --> 00:07:15.258
the rounded corners, that's all
being done with CSS.

00:07:15.258 --> 00:07:16.938
There aren't large
amounts of images.

00:07:16.938 --> 00:07:19.558
In fact, I think there's
3, maybe 5 images in this

00:07:19.558 --> 00:07:20.120
entire presentation.

00:07:20.120 --> 00:07:22.000
And 2 or 3 of them
are diagrams.

00:07:22.580 --> 00:07:26.778
Everything else are
background images.

00:07:26.998 --> 00:07:27.184
The sort of

00:07:27.184 --> 00:07:30.258
dynamic range that you've got
available in modern CSS, HTML

00:07:30.258 --> 00:07:33.000
and DOM is really impressive.

00:07:33.000 --> 00:07:35.240
And, in fact, it sort of
changes the way we think about

00:07:35.240 --> 00:07:36.920
building applications entirely.

00:07:36.920 --> 00:07:38.800
And this sort of backlog of
features that we can start

00:07:38.800 --> 00:07:43.060
targeting, if you go to one of
the HTML5 presentations, or

00:07:43.060 --> 00:07:45.278
have been to one of them,
you'll sort of understand

00:07:45.278 --> 00:07:45.458
what we mean.

00:07:45.458 --> 00:07:48.420
But the feature list, the back
log of things that we can start

00:07:48.420 --> 00:07:54.258
to do is really powerful.

00:07:54.258 --> 00:07:58.818
So, the question becomes, from
many folks, why shouldn't we

00:07:58.818 --> 00:07:59.088
just install Google Chrome.

00:07:59.392 --> 00:08:00.258
And, I think the
answer is you should.

00:08:02.180 --> 00:08:03.578
Please do.

00:08:03.498 --> 00:08:06.018
As a developer, I like it.
web inspector, as you

00:08:06.018 --> 00:08:07.198
saw earlier, is awesome.

00:08:07.198 --> 00:08:11.638
It gives me the ability to
develop and debug things almost

00:08:11.638 --> 00:08:14.778
as fast as I can anywhere else.

00:08:14.778 --> 00:08:16.878
The Javascript engine
is outstanding.

00:08:16.878 --> 00:08:19.120
Webkit is an amazingly layout
and rendering engine.

00:08:19.338 --> 00:08:22.338
It has wonderful features, some
of which we haven't even begun

00:08:22.338 --> 00:08:25.338
to scratch the surface
of collectively.

00:08:25.338 --> 00:08:28.560
And as a user, I like Chrome.

00:08:28.560 --> 00:08:29.018
Chrome is a wonderful browser.

00:08:29.018 --> 00:08:30.818
It has great security features.

00:08:30.818 --> 00:08:33.278
The multiprocess model keeps
things from crashing and going

00:08:33.278 --> 00:08:37.120
badly, all over the place when
maybe one tab goes tilt or

00:08:37.120 --> 00:08:38.640
maybe one plugin decides
to chew a bunch of CPU.

00:08:38.640 --> 00:08:42.938
So, Chrome is a great
user experience.

00:08:42.938 --> 00:08:44.360
However, a lot of organizations
aren't in a position

00:08:44.360 --> 00:08:45.880
to necessarily switch.

00:08:45.880 --> 00:08:48.480
So, you may have
worked in a bank.

00:08:48.480 --> 00:08:51.700
Or, been to a university,
where there's a centrally

00:08:51.700 --> 00:08:54.160
administered configuration
of windows.

00:08:54.160 --> 00:08:56.660
You're not allowed to install
anything as a user, or if you

00:08:56.660 --> 00:08:59.040
are, it's wiped when you log
into the box the next time.

00:08:59.240 --> 00:09:05.580
Many organizations and users
have set up where even if

00:09:05.580 --> 00:09:07.140
they're allowed to install
something at a user level, it

00:09:07.140 --> 00:09:11.840
may not be available to them
the next time they log in.

00:09:11.840 --> 00:09:14.340
So, for those organizations,
they'll have to adopt

00:09:14.340 --> 00:09:15.620
a new browser on-mass.

00:09:15.620 --> 00:09:21.320
They'll have to adapt
their systems to deal

00:09:21.320 --> 00:09:21.920
with a new browser.

00:09:21.920 --> 00:09:24.880
And many of them are scared of
changing a lot of systems that

00:09:24.880 --> 00:09:26.800
they might have bought from
a vendor who may have gone

00:09:26.800 --> 00:09:28.250
defunct or who may not support
new versions, or who may not

00:09:28.250 --> 00:09:29.880
support new versions or for
whom buying a new version that

00:09:29.880 --> 00:09:32.600
supports modern web standards
might be relatively expensive.

00:09:32.600 --> 00:09:35.300
So, they may not be willing
to move all of their

00:09:35.300 --> 00:09:38.440
infrastructure all at once
to support a new browser.

00:09:38.440 --> 00:09:40.858
Similarly you could imagine,
let's take a small

00:09:40.858 --> 00:09:41.520
regional bank.

00:09:41.520 --> 00:09:44.540
They have an IT system
that they bought from a

00:09:44.540 --> 00:09:45.440
vendor the late 1990's.

00:09:45.440 --> 00:09:48.278
It uses Active-x controls
and they're critically

00:09:48.278 --> 00:09:48.600
dependent on it.

00:09:48.600 --> 00:09:51.038
It may not be the most secure
thing that they've got, but

00:09:51.038 --> 00:09:54.160
it's something that they're
critically, as a business,

00:09:54.160 --> 00:09:54.940
dependent on it.

00:09:54.940 --> 00:09:55.640
They can't get away from it.

00:09:55.640 --> 00:09:58.928
So for these sort of
organizations, going to them

00:09:58.928 --> 00:10:02.978
and saying internet explorer
for those applications, but

00:10:02.978 --> 00:10:06.340
then you should train your
users, to go use a different

00:10:06.340 --> 00:10:09.740
browser for other
applications, seems like a

00:10:09.740 --> 00:10:09.940
difficult sell to me.

00:10:10.460 --> 00:10:11.860
If you could tell me how to
do it, we'd love to know.

00:10:11.860 --> 00:10:15.178
But, it seemed like a difficult
proposition to make for

00:10:15.178 --> 00:10:17.900
a lot of organizations.

00:10:17.900 --> 00:10:22.880
Specifically the side by side
installation management hassles

00:10:22.880 --> 00:10:25.960
for users calling the support
desk or asking IT to come to

00:10:25.960 --> 00:10:28.140
help them figure out which
browser to use where is a

00:10:28.140 --> 00:10:31.020
daunting prospect for a
lot of organizations.

00:10:31.020 --> 00:10:33.840
So for the organizations that
can, and for users that can,

00:10:33.840 --> 00:10:36.560
Chrome, and other modern
browsers are a great

00:10:36.560 --> 00:10:37.860
choice, and that's Plan A.

00:10:37.480 --> 00:10:40.860
We want users to install and
use modern browsers, because

00:10:40.860 --> 00:10:46.320
they get the full benefits of
modern experience, whereas they

00:10:46.320 --> 00:10:47.760
might not with legacy browsers.

00:10:49.120 --> 00:10:51.840
But many organizations can't.

00:10:51.840 --> 00:10:54.500
So, Google Chrome Frame is a
stop-gap solution in many ways.

00:10:54.500 --> 00:10:58.460
It gives us the rendering
engine v8, webkit, modern

00:10:58.460 --> 00:10:58.940
HTML and CSS, HTML5.

00:11:01.700 --> 00:11:04.580
And, it puts it inside the
UI of Chrome, oh, sorry

00:11:04.580 --> 00:11:06.938
of internet explorer
as we saw before.

00:11:06.938 --> 00:11:10.218
So it does this but it tries to
do this in a way that's not

00:11:10.218 --> 00:11:11.618
gonna break existing content.

00:11:11.618 --> 00:11:14.498
So you could imagine that we
could have written a plugin

00:11:14.498 --> 00:11:15.910
that when you installed it,
it would would render every

00:11:15.910 --> 00:11:17.018
web page in Google Chrome.

00:11:17.280 --> 00:11:18.780
But, Chrome doesn't
support ActiveX Controls.

00:11:20.520 --> 00:11:22.600
We won't support
Active X Controls.

00:11:22.600 --> 00:11:25.240
Chrome supports plugins, but we
support them out of process.

00:11:25.240 --> 00:11:28.500
There's a lot of different
differences between certain

00:11:28.500 --> 00:11:31.320
kinds of legacy content and the
modern web and it's impossible

00:11:31.320 --> 00:11:32.018
for Chrome to support
them all natively.

00:11:33.678 --> 00:11:37.120
So, instead of that, Chrome
Frame allows you to have the

00:11:37.120 --> 00:11:45.820
pages that render in the Chrome
Frame mode only show up in

00:11:45.820 --> 00:11:48.660
that mode when the
developer opts in.

00:11:48.660 --> 00:11:52.258
At the same time, users don't
see that when they don't have

00:11:52.258 --> 00:11:53.340
Chrome Frame installed
or enabled.

00:11:53.340 --> 00:11:56.600
If Chrome Frame is enabled,
those pages will switch, but if

00:11:56.600 --> 00:11:58.460
they don't have Chrome Frame
installed, it just falls back

00:11:58.460 --> 00:12:00.820
to the normal IE
user experience.

00:12:00.820 --> 00:12:03.140
So, that means that no page is
ever going to be ambushed.

00:12:03.140 --> 00:12:05.640
No page is ever going to render
in Chrome Frame that didn't

00:12:05.640 --> 00:12:06.358
expect to be rendered
in Chrome Frame.

00:12:06.358 --> 00:12:09.280
You, as a developer, a
web developer, opt in

00:12:09.280 --> 00:12:11.280
to this treatment.

00:12:11.280 --> 00:12:12.100
Developers opt in per page.

00:12:12.100 --> 00:12:14.960
So, let's say that I'm on
a domain, and I build

00:12:14.960 --> 00:12:15.238
a web application.

00:12:16.440 --> 00:12:18.140
You can imagine a different
design choice, where we might

00:12:18.140 --> 00:12:21.780
have said one page in this
domain wants to be enabled

00:12:21.780 --> 00:12:22.540
to render in Chrome Frame.

00:12:22.540 --> 00:12:22.740
So we should opt them all in.

00:12:23.080 --> 00:12:24.638
That's not how it works.

00:12:24.638 --> 00:12:28.160
Every individual page gets an
equal choice about whether

00:12:28.160 --> 00:12:30.080
or not it wants to be
rendered in Chrome Frame.

00:12:30.080 --> 00:12:33.080
That means, that you can have
a log pages that uses IE's

00:12:33.080 --> 00:12:35.420
rendering engine, and maybe
be your main application is

00:12:35.420 --> 00:12:36.200
rendering in Chrome Frame.

00:12:36.260 --> 00:12:39.360
We'll talk a little bit later
on about how we work to make

00:12:39.360 --> 00:12:41.040
sure that experience is
coherent between those

00:12:41.040 --> 00:12:43.020
two different pages.

00:12:43.020 --> 00:12:44.900
There's also no
blanket rendering.

00:12:44.900 --> 00:12:48.620
That means an administrator
does have an option to push out

00:12:48.620 --> 00:12:51.600
a policy that would make many
pages all render in Chrome

00:12:51.600 --> 00:12:53.800
Frame but generally speaking
that's not how its configured,

00:12:53.800 --> 00:12:56.520
and thats not how it
works out of the box.

00:12:56.520 --> 00:12:58.360
And, Chrome Frame most
critically won't

00:12:58.360 --> 00:12:59.380
break the internet.

00:12:59.380 --> 00:13:03.018
It's there to help you over the
hump until such time as you can

00:13:03.018 --> 00:13:06.980
decided to use or deploy
a more modern browser.

00:13:06.980 --> 00:13:09.678
But until then, this allows you
to continue to work on those

00:13:09.678 --> 00:13:12.038
legacy systems, phasing them
out and moving along your users

00:13:12.038 --> 00:13:15.778
and your IT systems in an
orderly fashion to

00:13:15.778 --> 00:13:18.820
a better future.

00:13:18.820 --> 00:13:20.338
How would you as a web
developer opt in to

00:13:20.338 --> 00:13:21.800
this better world?

00:13:21.800 --> 00:13:22.858
It's really easy.

00:13:22.858 --> 00:13:26.758
The best way is to add a single
HTTP header to the pages that

00:13:26.758 --> 00:13:28.840
you'd like to be rendered
in Chrome Frame.

00:13:28.840 --> 00:13:33.620
So, for many applications, this
is a single or maybe several

00:13:33.620 --> 00:13:36.620
lines in an apache
configuration file or an ISS

00:13:36.620 --> 00:13:38.320
configuration file.

00:13:38.320 --> 00:13:43.760
In fact, Wordpress.com rolled
out this header in a change to

00:13:43.760 --> 00:13:47.460
their HTTP daemon last week
across all of their sites.

00:13:47.460 --> 00:13:50.298
It was a single change and
it went out everywhere.

00:13:50.298 --> 00:13:53.860
So, for many organizations that
don't have control over

00:13:53.860 --> 00:13:57.100
templates for applications that
they may have purchased, this

00:13:57.100 --> 00:13:59.600
is the easiest and simplest
way to make it happen.

00:13:59.600 --> 00:13:59.760
But, as a

00:13:59.760 --> 00:14:01.760
web developer, this may not
be the most convenient.

00:14:01.760 --> 00:14:04.040
So, we also support
a meta-tag version.

00:14:04.040 --> 00:14:06.640
This X-UA-Compatible flag, by
the way, was introduced with

00:14:06.640 --> 00:14:10.040
the internet explorer 8, as a
way for IE to help switch

00:14:10.040 --> 00:14:12.180
different versions of its own
internal rendering engine.

00:14:13.520 --> 00:14:17.258
We're just piggybacking on this
sort of already existing usage

00:14:17.258 --> 00:14:21.760
of an extension header to allow
you to specify Chrome as one

00:14:21.760 --> 00:14:23.500
of the options in the list.

00:14:23.500 --> 00:14:24.692
It's worth noting that when

00:14:24.692 --> 00:14:27.086
you specify Chrome along with
other options, the Chrome

00:14:27.086 --> 00:14:33.910
option wins, so you get Chrome
and then you fall back to IE.

00:14:34.080 --> 00:14:36.000
So, there's pluses and
minuses to these methods.

00:14:36.000 --> 00:14:39.690
The header, the HTTP header,
is the most reliable way of

00:14:39.690 --> 00:14:42.400
triggering Chrome Frame
across your sites.

00:14:42.400 --> 00:14:45.538
When you use the meta-tag, it
has to be in the first 1K of

00:14:45.538 --> 00:14:47.658
the document, but the header
doesn't have that restriction.

00:14:47.658 --> 00:14:51.570
Since headers, we see them all,
it's easier potentially to

00:14:51.570 --> 00:14:54.640
configure it for your entire
site and maybe slightly faster.

00:14:54.640 --> 00:14:58.398
It's unfortunate though that
you will have require a change

00:14:58.398 --> 00:15:03.378
to either your scripts or your
HTTP daemon or some other part

00:15:03.378 --> 00:15:05.568
of your infrastructure that can
set headers in order

00:15:05.568 --> 00:15:06.398
to make this work.

00:15:06.398 --> 00:15:08.718
You can't just open up a text
file, type some HTML into and

00:15:08.718 --> 00:15:10.960
then have Chrome Frame rendered
with the header mode.

00:15:11.038 --> 00:15:11.650
You have to use the meta-tag.

00:15:11.700 --> 00:15:14.778
You can use them together.

00:15:14.778 --> 00:15:17.140
The first one wins obviously.

00:15:17.140 --> 00:15:20.440
And in many places you may not
be able to change your HTTP

00:15:20.440 --> 00:15:23.280
headers, so imagine that I've
got a lock down Apache

00:15:23.280 --> 00:15:26.540
configuration which doesn't
have HT access file enabled.

00:15:26.540 --> 00:15:30.620
It may not be possible for
me as a user or a developer

00:15:30.620 --> 00:15:31.880
to set differente headers.

00:15:31.940 --> 00:15:33.758
The meta-tag method is
great for prototyping.

00:15:33.998 --> 00:15:36.618
This is the easiest way to get
started with Chrome Frame .

00:15:36.618 --> 00:15:38.018
You just put this at the smack
dab at the top of your page,

00:15:38.018 --> 00:15:43.380
just inside the head element in
your document and it's easy to

00:15:43.380 --> 00:15:45.540
it going with, and you can use
it in conjunction with the

00:15:45.540 --> 00:15:47.080
other values for
X-UA-Compatible

00:15:47.080 --> 00:15:49.600
that IE supports.

00:15:49.600 --> 00:15:53.760
It's a little bit harder
potentially to configure this

00:15:53.760 --> 00:15:56.100
across an entire site, so if
you've got a very large

00:15:56.100 --> 00:15:59.900
templated application,
sometimes it's difficult to

00:15:59.900 --> 00:16:01.840
make sure that meta-tag
occurs in the very

00:16:01.840 --> 00:16:03.660
top of the document.

00:16:03.660 --> 00:16:06.760
Say some other include puts
content in the top of the

00:16:06.760 --> 00:16:09.758
document well before the
first k, and pushes you

00:16:09.758 --> 00:16:09.778
out of that first 1k.

00:16:10.658 --> 00:16:12.618
you may not trigger
as reliably.

00:16:12.618 --> 00:16:14.218
And in some places, you
may not have had control

00:16:14.218 --> 00:16:17.600
over applications or
site wide headers.

00:16:17.600 --> 00:16:18.860
So, you have choices,
you can use them both.

00:16:18.860 --> 00:16:21.240
You can use of one or the
other, but just be aware

00:16:21.240 --> 00:16:24.400
of the pluses and minuses
when you go to use it.

00:16:24.400 --> 00:16:27.550
So the question, of course,
is what happens when Chrome

00:16:27.550 --> 00:16:30.880
Frame isn't installed?

00:16:30.880 --> 00:16:33.140
You get the regular IE
rendering of a document.

00:16:33.140 --> 00:16:36.820
And, in fact, lets go and look
and see what happens there.

00:16:36.820 --> 00:16:39.058
Chrome Frame depends not only
on being installed but also on

00:16:39.058 --> 00:16:43.760
being enabled, so we can
come in here and we can

00:16:43.760 --> 00:16:47.660
disable Chrome Frame.

00:16:50.280 --> 00:16:50.940
So, I'm going to disable that.

00:16:55.460 --> 00:16:57.700
This, unfortunately, will
require browser restart because

00:16:57.700 --> 00:16:58.880
enabling, and disabling does.

00:16:58.880 --> 00:17:02.900
The install process
doesn't, however.

00:17:03.680 --> 00:17:09.160
And, just one second.

00:17:09.160 --> 00:17:10.920
Users tend not enable and
disable add ons, so we want

00:17:10.920 --> 00:17:11.960
to make sure both aspects
of it are disabled.

00:17:16.240 --> 00:17:20.200
So let's go back, load
IE, without Chrome Frame

00:17:20.200 --> 00:17:22.118
enabled in any way.

00:17:22.118 --> 00:17:24.580
We're seeing here
is this prompt.

00:17:24.580 --> 00:17:26.180
This prompt is provided by a
Script called CF Install.

00:17:27.240 --> 00:17:29.580
But again, if we come back and
we inspect this page, we can

00:17:29.580 --> 00:17:31.420
see that this is the
IE context menu.

00:17:31.420 --> 00:17:34.400
This page is simply being
rendered in internet explorer

00:17:34.400 --> 00:17:36.838
when Chrome Frame isn't
available or installed.

00:17:36.838 --> 00:17:40.020
So, what we've got here is
the fall back scenerio.

00:17:40.020 --> 00:17:42.840
And, this prompt is not
something that happens

00:17:42.840 --> 00:17:43.900
automatically.

00:17:42.780 --> 00:17:44.980
This is something that you
choose to do in your document.

00:17:44.980 --> 00:17:48.900
So, I'll go back and re-enable
Chrome Frame, and I'll

00:17:48.900 --> 00:17:50.880
show you how that works.

00:18:01.680 --> 00:18:04.980
What we're seeing here is CF
Install, that script actually

00:18:04.980 --> 00:18:06.800
detected that Chrome Frame was
enabled while it was on the

00:18:06.800 --> 00:18:08.478
page and refreshed
the page for me.

00:18:08.678 --> 00:18:09.400
I didn't even have to do.

00:18:10.380 --> 00:18:11.558
That's how the install
flow works, by the way.

00:18:11.558 --> 00:18:13.358
Once you install Chrome
Frame, the page is

00:18:13.358 --> 00:18:14.640
automatically refreshed.

00:18:14.640 --> 00:18:16.098
Users don't even have to
refresh their browsers.

00:18:16.098 --> 00:18:21.900
So, while I'm forwarding to the
slide that I was on; the

00:18:21.900 --> 00:18:27.730
downslide of each HTML slides;
the CF Install script is a

00:18:27.730 --> 00:18:30.520
script that you add into
your page optionally.

00:18:30.520 --> 00:18:30.560
It's not there by default.

00:18:30.560 --> 00:18:33.880
It's something you have to do
if you'd like to prompt your

00:18:33.880 --> 00:18:35.760
users to install for Chrome
Frame when it's not

00:18:35.760 --> 00:18:36.580
available by default.

00:18:36.240 --> 00:18:41.980
So if we go and we view the
page source, again we get

00:18:41.980 --> 00:18:52.060
Chrome's beautiful rendering
of source I hope.

00:18:52.060 --> 00:18:55.660
I really hope.

00:18:55.660 --> 00:18:56.220
Oh, God, please smile upon me.

00:18:56.220 --> 00:18:57.426
Oh, not so much.

00:19:11.000 --> 00:19:12.540
You will have to forgive me.

00:19:12.540 --> 00:19:16.740
I'm going to switch to Chrome
for the rest the presentation.

00:19:16.740 --> 00:19:17.980
I apologize.

00:19:17.980 --> 00:19:27.880
I try something that was
a little bit risky,

00:19:27.880 --> 00:19:48.920
I paid for it.

00:19:48.920 --> 00:19:53.740
So the CF Install script that
we that we were just looking,

00:19:53.740 --> 00:19:58.820
page source, that's
what I wanted.

00:20:00.760 --> 00:20:03.300
I've added it to the
bottom of my page here.

00:20:03.300 --> 00:20:06.640
So, as you can see, at the top
of my page there is the X2A

00:20:06.640 --> 00:20:12.060
compatible meta-tag, which has
the exact same value that we

00:20:12.060 --> 00:20:13.980
would put in the HTTP header.

00:20:13.980 --> 00:20:16.000
So, in this case, I can pass
HTML file around and every user

00:20:16.000 --> 00:20:18.768
who sees it can experience
Chrome Frame if they've

00:20:18.768 --> 00:20:18.940
got installed.

00:20:20.120 --> 00:20:22.580
At the very bottom of my
document here, we've got

00:20:22.580 --> 00:20:24.780
a little bit of script
that's what is called

00:20:24.780 --> 00:20:26.160
a conditional comment.

00:20:26.160 --> 00:20:29.660
And, a conditional comment is
an IE specific way for making

00:20:29.660 --> 00:20:33.740
the internet explorer
understand only particular

00:20:33.740 --> 00:20:34.580
pieces of content in the page.

00:20:34.780 --> 00:20:37.780
So, in this case, we were
saying, if the document is

00:20:37.780 --> 00:20:39.440
being rendered in internet
explorer, which is say, we

00:20:39.440 --> 00:20:40.600
weren't flipped into
Chrome Frame mode.

00:20:40.600 --> 00:20:44.120
We'd like you to go and request
this script off of the Ajax's

00:20:44.120 --> 00:20:47.400
API content distribution
network, which Google hosts.

00:20:47.400 --> 00:20:51.818
So this API, this Javascript
file, like many other

00:20:51.818 --> 00:20:55.038
Javascript APIs, JQuery, JoJo,
that you might have heard of,

00:20:55.038 --> 00:20:57.212
are hosted by us on our edge
cached CDN, so hopefully

00:20:57.212 --> 00:20:59.280
not to slow you down.

00:20:59.280 --> 00:21:00.540
And there's a single line there
at the bottom called CFInstall

00:21:00.540 --> 00:21:05.578
dot check, which says when you
detect that Chrome Frame hasn't

00:21:05.578 --> 00:21:07.938
been installed, use that
overlay that we saw

00:21:07.938 --> 00:21:08.338
there earlier.

00:21:08.338 --> 00:21:10.890
Use that overlay and pop
up that prompt, to have

00:21:10.890 --> 00:21:11.900
your users install this.

00:21:11.900 --> 00:21:14.300
So if we were to put the
meta-tag or the header in the

00:21:14.300 --> 00:21:15.654
document but not include
CFInstall we'd get best

00:21:15.654 --> 00:21:18.500
effort rendering.

00:21:18.500 --> 00:21:20.258
That means that if the user
has Chrome Frame installed it

00:21:20.258 --> 00:21:21.998
would be rendered that way.

00:21:21.998 --> 00:21:22.820
And, if not it would
just fall back.

00:21:22.820 --> 00:21:24.660
For a lot of sites
that's a great option.

00:21:24.660 --> 00:21:26.900
So you can have the
meta-tag without any

00:21:26.900 --> 00:21:27.380
additional friction.

00:21:27.380 --> 00:21:30.078
It's a really simple one line
change to your website.

00:21:30.078 --> 00:21:31.880
And, if your users is have
Chrome Frame, maybe they get

00:21:31.880 --> 00:21:34.598
better experience, or they
will get better experience.

00:21:34.440 --> 00:21:36.640
If they don't, no big deal.

00:21:36.640 --> 00:21:38.940
On the other hand, if your
building something that targets

00:21:38.940 --> 00:21:43.440
HTML5 features explicitly,
CFInstall and this 2 line

00:21:43.440 --> 00:21:45.700
change to your document, or, in
this case, 4 with the

00:21:45.700 --> 00:21:50.380
conditional comment is a great
way to help you make sure the

00:21:50.380 --> 00:21:53.740
your documents work everywhere
and that users get the

00:21:53.740 --> 00:21:59.880
best experience possible.

00:21:59.880 --> 00:22:03.640
More fun with HTML slides.

00:22:03.640 --> 00:22:08.800
So we just saw the CFInstall
script at work overlay prompt

00:22:08.800 --> 00:22:11.940
asks users to install Chrome
Frame and it's a general case

00:22:11.940 --> 00:22:14.940
it doesn't require users
to restart their browser.

00:22:14.940 --> 00:22:17.778
So, on the service side, let's
say you got some Code that's

00:22:17.778 --> 00:22:19.700
detecting and potentially
sending different content

00:22:19.700 --> 00:22:20.040
down to the user.

00:22:22.920 --> 00:22:25.540
You'd like to know whether
or not your users can

00:22:25.540 --> 00:22:28.600
see Chrome Frame.

00:22:28.600 --> 00:22:31.340
And the way we make this
possible for you, is we

00:22:31.340 --> 00:22:33.060
extend the user agent header
that the clients send.

00:22:33.940 --> 00:22:37.000
Now we don't extend it all the
time, so when Chrome Frame is

00:22:37.000 --> 00:22:40.920
disabled, but installed, we
don't augment the user

00:22:40.920 --> 00:22:41.660
agent header with this
string at the end.

00:22:43.600 --> 00:22:45.940
This tells you that Chrome
Frame is available.

00:22:45.940 --> 00:22:48.310
That its IE with Chrome Frame
and what version of Chrome

00:22:48.310 --> 00:22:49.580
Frame you're using.

00:22:49.580 --> 00:22:51.120
Generally speaking, all Chrome
Frame users are going to be on

00:22:51.120 --> 00:22:54.400
the latest version, because we
use the same auto update system

00:22:54.400 --> 00:22:56.400
that Google Chrome does, which
means that most users are going

00:22:56.400 --> 00:22:58.080
to be on the very
latest released within

00:22:58.080 --> 00:23:00.838
weeks of release.

00:23:00.838 --> 00:23:03.460
So, if you've got a server-side
script, that's detecting script

00:23:03.460 --> 00:23:06.960
or some code that's detecting
the user agent, you can look

00:23:06.960 --> 00:23:08.598
for this to know that you can
send the meta-tag or the header

00:23:08.598 --> 00:23:10.998
for users that it have got it,
and maybe direct them to a

00:23:10.998 --> 00:23:11.900
different experienc otherwise.

00:23:12.618 --> 00:23:13.500
That's how Google Wave does it.

00:23:13.500 --> 00:23:16.940
So, if Google Wave does this,
so if Google Wave detects this

00:23:16.940 --> 00:23:18.960
it lets users right
on through to Wave.

00:23:18.960 --> 00:23:20.708
On the other hand, if they
don't have it, they ask users

00:23:20.708 --> 00:23:23.940
to get a better browser or to
install Chrome Frame as a

00:23:23.940 --> 00:23:27.810
result because Wave just isn't
designed for browsers that

00:23:27.810 --> 00:23:30.280
don't have HTML5 support.

00:23:30.280 --> 00:23:32.740
Again it's worth noting that
the user agent is only

00:23:32.740 --> 00:23:35.020
extended when Chrome Frame
is installed and active.

00:23:35.020 --> 00:23:37.620
If we disable the browser
helper object or disable the

00:23:37.620 --> 00:23:40.740
plugin, but it is installed, we
don't send so, you're never

00:23:40.740 --> 00:23:43.020
going to get see that header
from a client that can't

00:23:43.020 --> 00:23:45.840
handle Chrome Frame content.

00:23:45.840 --> 00:23:47.152
At the same time, we don't want
to make it so that you have to

00:23:47.152 --> 00:23:50.620
change your scripts on the
inside of your documents to be

00:23:50.620 --> 00:23:54.000
aware of Google Chrome Frame so
while we might send an

00:23:54.000 --> 00:23:57.920
augmented internet explorer
user agent on the network on

00:23:57.920 --> 00:24:00.960
the inside when you query it
from Javascript and say

00:24:00.960 --> 00:24:03.640
navigator dot user agent, the
user agent you'll get back is

00:24:03.640 --> 00:24:05.798
Chrome's user agent, so if you
have existing scripts that

00:24:05.798 --> 00:24:08.500
understand Chrome, or are not
doing feature detection, but

00:24:08.500 --> 00:24:12.540
might be doing user agent
detection instead, Chrome Frame

00:24:12.540 --> 00:24:14.920
looks exactly like Google
Chrome from the inside.

00:24:14.920 --> 00:24:16.940
No changes necessary there.

00:24:16.940 --> 00:24:20.700
All of your Javascript
should continue to work.

00:24:20.700 --> 00:24:23.572
So, the key take-away here is
that so far, right, Google

00:24:23.572 --> 00:24:27.778
Chrome Frame is this little
rendering area where the main

00:24:27.778 --> 00:24:29.178
document is and everything
else works exactly the way it

00:24:29.178 --> 00:24:33.380
should in internet explore.

00:24:33.380 --> 00:24:35.778
The integration goes
deeper than that.

00:24:35.778 --> 00:24:37.738
Instead of just rendering a
document when we're asked to

00:24:37.738 --> 00:24:40.466
render document, we make sure
that we use the same coookies,

00:24:40.466 --> 00:24:42.618
so that when you request a
cookie in Javascript say, from

00:24:42.618 --> 00:24:45.820
a document that's being
rendered in Chrome Frame, you

00:24:45.820 --> 00:24:49.040
see the same cookies that were
sent to internet explorer

00:24:49.040 --> 00:24:50.680
earlier in the session.

00:24:50.680 --> 00:24:53.880
At the same time, we don't
use a separate cache.

00:24:53.880 --> 00:24:55.160
We use internet
explorer's cache.

00:24:55.160 --> 00:24:58.458
When you make a request across
the document, for a document or

00:24:58.458 --> 00:25:00.552
a resource that came across the
wire earlier, you're going to

00:25:00.552 --> 00:25:02.760
get the cache behavior from IE.

00:25:02.760 --> 00:25:05.420
If you have Chrome installing
on the box, and Chrome frame

00:25:05.420 --> 00:25:09.760
we will continue to use IE's
cache, not Chrome's cache.

00:25:09.760 --> 00:25:11.700
That means that when you clear
the cache, in internet

00:25:11.700 --> 00:25:15.400
explorer, the cache from IE
goes away, and Chrome Frame

00:25:15.400 --> 00:25:16.760
doesn't leave trails
behind either.

00:25:18.540 --> 00:25:20.518
We also have the same
network behavior.

00:25:20.518 --> 00:25:22.782
That means that when we make a
request for a cell if you've

00:25:22.782 --> 00:25:26.420
got clients' search installed,
if you've got a special proxy

00:25:26.420 --> 00:25:28.698
installed, if you've got a
pack file, that stuff

00:25:28.698 --> 00:25:29.598
all works as well.

00:25:29.598 --> 00:25:30.140
We use internet
explorer's networking.

00:25:31.880 --> 00:25:33.100
Now, there's a couple
of caveats here.

00:25:33.100 --> 00:25:36.120
That means that some network
behaviors are slightly

00:25:36.120 --> 00:25:38.680
different in Chrome Frame then
they are under Google Chrome.

00:25:38.680 --> 00:25:41.900
For instance, Google Chrome
allows you to have 6

00:25:41.900 --> 00:25:43.500
network connections up to
any particular host.

00:25:43.500 --> 00:25:45.476
That's great if you are doing
common style applicatins

00:25:45.476 --> 00:25:47.142
or server push messaging.

00:25:47.860 --> 00:25:52.080
On the other hand, internet
explorer only gives you 2 on

00:25:52.080 --> 00:26:00.940
versions before IE7 and the
result is that we might see

00:26:00.940 --> 00:26:01.480
prefetching behavior that looks
like Google Chrome from Chrome

00:26:01.480 --> 00:26:04.440
Frame at the network level.

00:26:04.440 --> 00:26:07.440
When pass it off to IE we'll
get that 2 connection

00:26:07.440 --> 00:26:07.960
limit in force.

00:26:07.960 --> 00:26:12.440
So, generally speaking, things
look at the network level like

00:26:12.440 --> 00:26:16.440
Chrome except when we hit some
hard limits that are at a level

00:26:16.440 --> 00:26:19.380
lower than Chrome frame in
order to make sure that things

00:26:19.380 --> 00:26:20.540
work that we expect them to.

00:26:20.540 --> 00:26:25.160
We respect the end private mode
for Google that internet

00:26:25.160 --> 00:26:29.800
explorer users in IE8, and
we use Chrome's incognito

00:26:29.800 --> 00:26:31.020
mode when that happens.

00:26:31.020 --> 00:26:34.480
So pages that are rendered
in private browsing, in

00:26:34.480 --> 00:26:37.580
IE trigger incognito mode
for Chrome Frame tabs.

00:26:38.100 --> 00:26:42.020
Similarly we respect cache
clearing, cookie clearing, all

00:26:42.020 --> 00:26:45.758
of the same things that you'd
expect to have happened for

00:26:45.758 --> 00:26:47.460
any IE hosted web page.

00:26:47.778 --> 00:26:51.118
So, how does this all work?

00:26:51.118 --> 00:26:54.140
Briefly speaking, navigation
begins when a user cllicks on a

00:26:54.140 --> 00:26:56.444
link, types in an address in
the location bar, and hits

00:26:56.444 --> 00:26:59.738
enter in some other way, opens
a short cut that's going to

00:26:59.738 --> 00:27:01.898
navigate internet explorer
to a different page.

00:27:01.898 --> 00:27:04.538
When that happens, there's a
small component sitting inside

00:27:04.538 --> 00:27:07.358
of internet explorer, the
browser helper object that

00:27:07.358 --> 00:27:10.000
we talked about earlier.

00:27:10.700 --> 00:27:14.820
And, that allows us to observe
the request and as we saw

00:27:14.820 --> 00:27:17.600
earlier, we augment the user
agent string with that Chrome

00:27:17.600 --> 00:27:21.700
slash version number when it
goes out to the network.

00:27:21.700 --> 00:27:23.838
And when the request comes
back, we try to determine

00:27:23.838 --> 00:27:26.678
whether not it was that
destined for Chrome or if

00:27:26.678 --> 00:27:27.600
it was destine for
internet explorer.

00:27:27.600 --> 00:27:30.440
If it's destined for Chrome
Frame, the Chrome rendering

00:27:30.440 --> 00:27:32.862
engine, then we create an
active document server, render

00:27:32.862 --> 00:27:35.660
the page in Chrome, like you
would expect, say with a

00:27:35.660 --> 00:27:38.660
full page PDF which is the
experience that we saw earlier.

00:27:38.660 --> 00:27:40.380
And if not, we just passed
it right on through to IE.

00:27:42.358 --> 00:27:42.712
So, the simple way to think
about this, is that there is a

00:27:42.712 --> 00:27:47.818
process for internet explore
so this sort of resembles

00:27:47.818 --> 00:27:48.898
IE6 and 7 on Windows XP.

00:27:51.720 --> 00:27:53.926
It's a little bit more
complicated because the there's

00:27:53.926 --> 00:27:55.920
a multiprocess model there, but
for simplicity sake, let's

00:27:55.920 --> 00:27:59.318
think about a single
process internet explorer.

00:27:59.318 --> 00:28:02.358
So, IE has series of components
down at the networking disk

00:28:02.358 --> 00:28:05.920
Javascript layers that all sort
of collaborate together and

00:28:05.920 --> 00:28:08.380
when internet explorer loads,
there's a supported mechanism

00:28:08.380 --> 00:28:10.798
call browser helper objects
which allowed you, as the

00:28:10.798 --> 00:28:13.780
developer, to register some
component to load with

00:28:13.780 --> 00:28:14.400
internet explorer.

00:28:14.400 --> 00:28:17.698
There's a very tiny component
that's part of Chrome Frame

00:28:17.698 --> 00:28:19.220
that loads with IE
in this mechanism.

00:28:19.220 --> 00:28:25.180
So when Chrome Frame is
initialized, this small, tiny

00:28:25.180 --> 00:28:28.700
helper object is loaded when
internet explorer starts,

00:28:28.700 --> 00:28:29.973
but that doesn't mean that
Chrome Frame starts though.

00:28:30.960 --> 00:28:31.968
Generally speaking, when you're
navigating around the web, with

00:28:31.968 --> 00:28:37.160
IE and Chrome Frame is enabled,
this tiny component is

00:28:37.160 --> 00:28:39.200
observing what happens on the
network to try to determine

00:28:39.200 --> 00:28:42.578
whether or not these requests
are destined for Chrome Frame.

00:28:42.578 --> 00:28:44.460
Generally speaking, they
probably won't be.

00:28:44.460 --> 00:28:47.840
Because most pages today
don't target Chrome Frame.

00:28:47.840 --> 00:28:50.618
So, what happens a the page
does want to be rendered

00:28:50.618 --> 00:28:51.340
in Chrome Frame?

00:28:51.340 --> 00:28:55.866
We observe the response see
that should be rendered in

00:28:55.866 --> 00:28:58.598
Chrome Frame and we fire up
Chrome's multiprocess model.

00:28:58.598 --> 00:29:03.000
That means that when a document
is created that wants to be

00:29:03.000 --> 00:29:06.660
rendered in Chrome Frame,
We launch Chrome.

00:29:06.660 --> 00:29:09.098
We create a rendered process,
which is to say, sort of the

00:29:09.098 --> 00:29:14.880
fancy way of saying, a separate
OS process that renders things

00:29:14.880 --> 00:29:18.400
in webkit, and make sure that
happens inside a sandbox.

00:29:18.400 --> 00:29:21.240
We plumb all that through
to an in process active

00:29:21.240 --> 00:29:21.480
document server.

00:29:21.980 --> 00:29:24.220
For those of you who don't know
what active document is, it's

00:29:24.220 --> 00:29:28.280
sort of the IE mechanism or the
windows mechanism for rendering

00:29:28.280 --> 00:29:30.480
some other content type that IE
doesn't know about already.

00:29:30.300 --> 00:29:31.358
Think, PDF, or a flash object.

00:29:34.180 --> 00:29:37.940
So, as you can see here, we
have the same benefits of

00:29:37.940 --> 00:29:40.618
Chrome's multiprocess
architecture in play in this

00:29:40.618 --> 00:29:43.660
model as you would when
you're rendering documents

00:29:43.660 --> 00:29:45.140
in Chrome directly.

00:29:45.140 --> 00:29:47.996
That means that tabs the
crash don't take down

00:29:47.996 --> 00:29:48.200
the entire browser.

00:29:51.340 --> 00:29:55.380
Security issues are mitigated
because things are rendered

00:29:55.380 --> 00:29:58.770
inside Chrome's sandbox, which
means that vulnerabilities in

00:29:58.770 --> 00:30:02.340
webkit don't turn into
vulnerabilities in Chrome

00:30:02.340 --> 00:30:04.120
most of the time.

00:30:04.120 --> 00:30:07.900
And this architecture has
several other benefits.

00:30:07.900 --> 00:30:10.720
Obviously, when you start up
internet explorer, it's not

00:30:10.720 --> 00:30:12.220
slowed down significantly
because we're not loading

00:30:12.220 --> 00:30:13.098
Chrome along with it.

00:30:13.098 --> 00:30:16.598
We only load Chrome when you
ask for a page rendered

00:30:16.598 --> 00:30:19.440
in Chrome Frame.

00:30:19.440 --> 00:30:21.800
We also have very small
communication channels between

00:30:21.800 --> 00:30:24.100
the browser helper object, that
small extension that's loaded

00:30:24.100 --> 00:30:28.040
with internet explorer,
and Chrome Frame, and

00:30:28.040 --> 00:30:29.118
the Chrome browser.

00:30:29.118 --> 00:30:32.078
That means that the attack
surface area for potential

00:30:32.078 --> 00:30:34.420
attackers is pretty small.

00:30:34.620 --> 00:30:37.980
And we do a lot of work to
make sure that the Chrome

00:30:37.980 --> 00:30:41.600
architecture works the way it
should in this model as well.

00:30:41.600 --> 00:30:42.840
We have separate infrastructure
for making sure that when

00:30:42.840 --> 00:30:45.280
we launch Chrome, you don't
see a window that pops up.

00:30:45.280 --> 00:30:46.458
And we talk about that
later in the Q&amp;A

00:30:46.458 --> 00:30:49.500
if you are interested.

00:30:49.500 --> 00:30:52.340
What users can benefit
from Chrome Frame?

00:30:52.340 --> 00:30:56.340
Generally speaking, the
most widely-used versions

00:30:56.340 --> 00:30:58.480
of IE are supported.

00:30:58.480 --> 00:31:02.140
We only support Windows XP
Service Pack 2 and above

00:31:02.140 --> 00:31:09.420
because IE on SP1 and below,
didn't support the sandbox

00:31:09.420 --> 00:31:09.660
[? incrivatives ?]

00:31:09.660 --> 00:31:12.818
that we need to make sure
the renders can render

00:31:12.818 --> 00:31:14.440
content responsibly.

00:31:15.360 --> 00:31:18.080
So that cuts out Windows
2000 and earlier

00:31:18.080 --> 00:31:18.660
versions of Windows XP.

00:31:18.700 --> 00:31:21.578
But generally speaking, I think
of most organizations are

00:31:21.578 --> 00:31:24.260
off of those versions.

00:31:24.260 --> 00:31:26.720
The major caveat of course,
with Chrome Frame is that it

00:31:26.720 --> 00:31:30.720
does require administrator
privileges to install today.

00:31:30.720 --> 00:31:34.640
I can tell you that when we hit
beta, we will be making MSI

00:31:34.640 --> 00:31:39.678
packages and group policy
templates available for

00:31:39.678 --> 00:31:40.258
administrators to roll out
Chrome Frame across

00:31:40.258 --> 00:31:41.400
their enterprises.

00:31:41.400 --> 00:31:44.618
So many of users who are in
lock down configurations may

00:31:44.618 --> 00:31:47.058
not be able to benefit from the
per-user install nature of

00:31:47.058 --> 00:31:50.178
Chrome today, and so the
easiest way for them to get it

00:31:50.178 --> 00:31:52.420
is going to be through their
administrators rolling out

00:31:52.420 --> 00:31:53.558
Chrome Frame and we plan to
make it easy for

00:31:53.558 --> 00:31:56.960
them to do that.

00:31:56.960 --> 00:31:58.648
When the user does encounter
the Chrome Frame initial

00:31:58.648 --> 00:32:00.858
installer, we saw that they
don't have to restart their

00:32:00.858 --> 00:32:02.578
browser in order to install
Chrome Frame and

00:32:02.578 --> 00:32:04.118
start using it.

00:32:04.118 --> 00:32:06.058
And, the initial
downloan is very small.

00:32:06.380 --> 00:32:07.798
We use a system called Omaha,
which is our installer package.

00:32:07.798 --> 00:32:08.418
And, the initial
download is 500k.

00:32:11.140 --> 00:32:13.760
The rest of it happens sort of
in an automated fashion so we

00:32:13.760 --> 00:32:16.140
insure that there's a minimum
of user hassle when

00:32:16.140 --> 00:32:18.340
installing Chrome.

00:32:18.340 --> 00:32:20.160
So, for those of you who are C

00:32:20.400 --> 00:32:23.380
hackers, windows
people, maybe, anyone?

00:32:23.380 --> 00:32:23.940
All right!

00:32:23.940 --> 00:32:25.818
Yes!

00:32:25.818 --> 00:32:28.580
Chrome Frame is implemented
as an ActiveX control and

00:32:28.580 --> 00:32:29.440
an active document server.

00:32:30.020 --> 00:32:32.520
That means that if you're
building a desktop application

00:32:32.520 --> 00:32:36.660
that can use an embedded HTML
rendering engine, you can use

00:32:36.660 --> 00:32:39.558
Chrome Frame to do that.

00:32:39.558 --> 00:32:41.498
As you might expect we have a
set of supported interfaces.

00:32:42.400 --> 00:32:45.760
We registered these at the
system level, which means that

00:32:45.760 --> 00:32:48.380
when Chrome Frame is installed,
any application can use them.

00:32:48.380 --> 00:32:52.620
They are scriptible and the
details of the interface that

00:32:52.620 --> 00:32:57.670
we support and are supporting,
is available in the Chrome

00:32:57.670 --> 00:32:58.620
tab, that IDL file.

00:32:58.620 --> 00:33:01.260
It's just a regular windows IDL
file that you'd expect to see.

00:33:01.260 --> 00:33:03.660
And, if you have questions
about that, we have an

00:33:03.660 --> 00:33:04.262
active mailing list that
we can help you with.

00:33:06.058 --> 00:33:10.052
The major caveat in all of this
is that the activex control and

00:33:10.052 --> 00:33:12.740
the active document server
don't support synchronous

00:33:12.740 --> 00:33:14.640
access to the document
object model.

00:33:14.640 --> 00:33:19.180
Unlike HTML, we can't provide
you with that use-ability

00:33:19.180 --> 00:33:24.360
nice-ity, because it provides
challenges for synchronization

00:33:24.360 --> 00:33:27.000
across the multiprocess
architecture for Google Chrome.

00:33:27.000 --> 00:33:30.700
Instead, we support HTML5 post
message and on message system

00:33:30.700 --> 00:33:33.720
as a way for you to send
messages to content host

00:33:33.720 --> 00:33:34.813
inside of Chrome Frame.

00:33:34.160 --> 00:33:34.998
And, get messages back out.

00:33:36.200 --> 00:33:39.978
That's available in either
the ActiveX or the active

00:33:39.978 --> 00:33:40.818
document versions.

00:33:40.338 --> 00:33:45.358
So, we mentioned earlier that
the Google Chrome Frame

00:33:45.358 --> 00:33:46.920
doesn't start up from
Chrome when IE launches.

00:33:47.840 --> 00:33:48.100
So, what does it do instead?

00:33:49.680 --> 00:33:54.540
So, it launches that small
browser helper object and when

00:33:54.540 --> 00:33:56.400
it detects that a page is
destined for Chrome Frame,

00:33:56.400 --> 00:33:57.098
it launches Chrome then.

00:33:57.098 --> 00:33:59.478
Chrome launches very fast.

00:33:59.478 --> 00:34:00.300
That's the good news.

00:34:00.300 --> 00:34:02.720
The bad news is that
it still takes time.

00:34:02.720 --> 00:34:04.180
We're not doing it up so we're
not slowing down IE's launch.

00:34:05.238 --> 00:34:07.710
But your page might
see a small hit.

00:34:07.940 --> 00:34:11.018
So, what happens after that
hit turns out to be just

00:34:11.018 --> 00:34:12.618
as important to your page.

00:34:12.618 --> 00:34:14.818
In some applications that are
Javascript heavy we've seen

00:34:14.818 --> 00:34:19.380
we've seen the cold start up
time for Chrome be totally

00:34:19.380 --> 00:34:21.720
more than made up for by
the performance benefits

00:34:21.720 --> 00:34:24.778
from V8 and modern CSS.

00:34:24.778 --> 00:34:27.598
We're working as hard as we can
to reduce the start up time and

00:34:27.598 --> 00:34:29.278
the warm start up time is
perfectly acceptable today.

00:34:29.278 --> 00:34:30.638
It's the order of hundreds
of milliseconds.

00:34:31.998 --> 00:34:35.420
So, the second page to use
Chrome Frame in a session

00:34:35.420 --> 00:34:37.458
doesn't have to pay
the same cost.

00:34:37.458 --> 00:34:41.440
And, so modern CSS, DNS
prefetching which is to say,

00:34:41.440 --> 00:34:44.298
when we encounter a page, we
look down the page to see which

00:34:44.298 --> 00:34:47.578
resources we're going to need
in the future and we fire off

00:34:47.578 --> 00:34:49.278
those requests at the DNS level
early, so that we know that

00:34:49.278 --> 00:34:50.098
you're going to need them.

00:34:50.098 --> 00:34:52.118
You're going to be looking them
up and we can sort of pre-warm

00:34:52.118 --> 00:34:55.198
in the caches on the
OS level for those.

00:34:55.358 --> 00:34:59.278
And, between all those things,
we tend to do very well

00:34:59.278 --> 00:35:05.598
in terms of performance.

00:35:05.598 --> 00:35:06.498
So, now what?

00:35:06.498 --> 00:35:07.278
Well, Google Chrome Frame was
released to the developer

00:35:07.278 --> 00:35:12.178
channel last fall,
late September.

00:35:12.178 --> 00:35:15.318
And it's been in that developer
channel ever since which is

00:35:15.318 --> 00:35:16.880
sort of like our way
of saying Alpha.

00:35:16.880 --> 00:35:22.820
The Google Chrome team has
supported these three different

00:35:22.820 --> 00:35:25.618
channels, developer, beta, and
unstable since Google Chrome

00:35:25.618 --> 00:35:26.218
was initially released.

00:35:26.218 --> 00:35:30.618
And the waterfall sort of looks
like we release things from

00:35:30.618 --> 00:35:33.798
trunk on a very frequent basis
in the developer channel, make

00:35:33.798 --> 00:35:34.878
it branch at some point.

00:35:34.878 --> 00:35:36.158
That's beta.

00:35:34.598 --> 00:35:36.518
We keep fixing it and
then it goes to stable.

00:35:36.518 --> 00:35:39.078
So Chrome Frame is on the
exact same trajectory.

00:35:39.078 --> 00:35:42.718
And I'm happy to announce that
in several weeks we'll be

00:35:42.718 --> 00:35:43.780
releasing the beta for you.

00:35:43.780 --> 00:35:46.680
So, Google Chrome Frame in
several weeks, will be

00:35:46.680 --> 00:35:49.898
available for wider use, will
be making MSI and group policy

00:35:49.898 --> 00:35:52.780
templates available for
administrators to begin rolling

00:35:52.780 --> 00:35:55.520
out inside of enterprises and
many applications are going to

00:35:55.520 --> 00:35:57.138
start targeting Chrome Frame.

00:36:00.738 --> 00:36:02.160
We are in the developer
channel today.

00:36:02.160 --> 00:36:02.940
You can go,

00:36:02.940 --> 00:36:03.820
and download Chrome Frame.

00:36:03.680 --> 00:36:04.460
You can start using it.

00:36:04.460 --> 00:36:05.520
You can start
developing against it.

00:36:06.080 --> 00:36:08.380
And we support all of the same
features that Google Chrome

00:36:08.380 --> 00:36:09.800
does in the developer channel.

00:36:09.800 --> 00:36:12.820
We track, from releases
more or less day for day.

00:36:14.778 --> 00:36:16.738
Today, the team is working very
hard to improve the startup

00:36:16.738 --> 00:36:19.718
performance so that the your
pages get the full benefit

00:36:19.718 --> 00:36:23.280
of those high-performance
Javascript HTML and CSS engines

00:36:23.280 --> 00:36:26.460
without any of the lag for
start-up and we're continue to

00:36:26.460 --> 00:36:29.678
polish the feature set of
Chrome Frame to ensure that it

00:36:29.678 --> 00:36:31.358
works exactly the way you
expect it to inside of IE.

00:36:31.358 --> 00:36:34.210
That the back button works,
the print menus work,

00:36:34.210 --> 00:36:35.800
that everything works the
way you expect it to.

00:36:36.058 --> 00:36:38.378
We're sort of filling in
the menus, filling in the

00:36:38.378 --> 00:36:41.778
right-click system, making sure
that all the systems work

00:36:41.778 --> 00:36:43.538
exactly you think they should.

00:36:43.538 --> 00:36:46.238
And, in order to make sure
that we are not missing any

00:36:46.238 --> 00:36:47.320
features, we want your help.

00:36:47.320 --> 00:36:49.240
We need your feedback and
would love for you to get

00:36:49.240 --> 00:36:50.280
involved in the project.

00:36:50.280 --> 00:36:53.160
As I mentioned earlier Google
Chrome Frame is a part of the

00:36:53.160 --> 00:36:55.178
Chromium project,
so if you know C

00:36:55.178 --> 00:36:58.078
, or if you're just a user who
wants to understand more about

00:36:58.078 --> 00:36:59.918
it, we have a mailing list.

00:36:59.918 --> 00:37:03.480
You can go find it and we'd be
happy to hear from you and

00:37:03.480 --> 00:37:05.558
understand your needs.

00:37:05.558 --> 00:37:08.478
So, you can get involved by
going to either the main

00:37:08.478 --> 00:37:09.878
product site, Google.com slash
Chrome Frame where you can

00:37:09.878 --> 00:37:14.760
install Chrome Frame directly,
or the Google code site, where

00:37:14.760 --> 00:37:18.760
there is obviously links to the
mailing lists documentation

00:37:18.760 --> 00:37:21.138
support resources available for
you to start using

00:37:21.138 --> 00:37:21.340
Chrome frame.

00:37:22.418 --> 00:37:30.420
And I just wanted to mention
that when the Beta does go out,

00:37:30.420 --> 00:37:33.220
the developer channel will
still be available for you

00:37:33.220 --> 00:37:35.800
to target features on.

00:37:35.800 --> 00:37:37.538
There'll be a new developer
channel release that's made

00:37:37.538 --> 00:37:40.400
available at the same time as
we did with Chrome and so join

00:37:40.400 --> 00:37:44.578
the mailing list and keep
your eyes out for that.

00:37:44.558 --> 00:37:52.498
I'll take some questions now
from the mikes and we'll see

00:37:52.498 --> 00:37:53.900
what happened on the moderator.

00:37:54.102 --> 00:38:01.378
Yes.

00:38:01.378 --> 00:38:04.700
AUDIENCE: You have mentioned a
behavior for, say, for example,

00:38:04.700 --> 00:38:06.280
you have of friend set.

00:38:07.598 --> 00:38:09.084
Is that partially like friends,
some of the friends could

00:38:09.084 --> 00:38:12.218
partially be rendered by one
friend and the others rendered

00:38:12.218 --> 00:38:14.460
by iframe kind of thing.

00:38:15.198 --> 00:38:17.800
Your page have iframes, is that
possible for iframe rendering

00:38:17.800 --> 00:38:19.980
using Chrome Frame and the
other traditional stuff?

00:38:20.360 --> 00:38:21.218
ALEX RUSSELL: That's
a great question.

00:38:21.218 --> 00:38:26.178
So, the answer is that Chrome
Frame operates at the top level

00:38:26.178 --> 00:38:29.480
of the document, which is to
say, if an iframe wants to be

00:38:29.480 --> 00:38:30.434
rendered into Chrome Frame, we
only try to pay attention to

00:38:30.434 --> 00:38:35.838
top level navigations, We don't
switch into Chrome Frame

00:38:35.838 --> 00:38:36.618
rendering for individual
subdocuments.

00:38:37.498 --> 00:38:38.118
It's very difficult.

00:38:38.118 --> 00:38:40.698
There's a lot of complexity
around the scripting

00:38:40.698 --> 00:38:43.500
relationship between documents
that are in the same domain

00:38:43.500 --> 00:38:46.798
through the web security model
and again we don't support that

00:38:46.798 --> 00:38:48.778
synchronous DOM access, so we
might break scripts if one

00:38:48.778 --> 00:38:52.438
script wanted to and
one script didn't.

00:38:52.438 --> 00:38:54.058
It sounds uncommon, but it
happens in very large

00:38:54.058 --> 00:38:58.360
organizations with a lot of
things hosted on the same

00:38:58.360 --> 00:39:00.158
domain That said, the ActiveX
version is available.

00:39:00.158 --> 00:39:04.540
You can use it on the
document individually.

00:39:04.540 --> 00:39:05.500
It acts a lot like an iframe.

00:39:05.040 --> 00:39:09.080
I don't recommend that you
target that unless you have no

00:39:09.080 --> 00:39:12.360
other option, but if you have
questions, talk to me afterward

00:39:12.360 --> 00:39:14.360
or join the mailing list and we
can talk you through easymap.

00:39:14.360 --> 00:39:14.880
Yes.

00:39:14.880 --> 00:39:20.980
AUDIENCE: My 2 questions are
both in moderator, but my top

00:39:20.980 --> 00:39:24.320
priority feature is print
support, and I wasn't clear if,

00:39:24.320 --> 00:39:25.880
with the Beta, is print support
available in the Beta?

00:39:25.420 --> 00:39:28.844
ALEX RUSSELL: So the question
was print support for

00:39:28.844 --> 00:39:29.958
Google Chrome Frame.

00:39:29.958 --> 00:39:30.760
Print support is available.

00:39:30.760 --> 00:39:33.280
It's available at the level of
Google Chrome's print support.

00:39:34.238 --> 00:39:37.558
Which is to say its all right.

00:39:37.558 --> 00:39:38.260
It could be better.

00:39:38.260 --> 00:39:40.240
It could be significantly
better, but it's pretty good.

00:39:40.960 --> 00:39:43.658
You can print Chrome Frame
documents today, if it

00:39:43.658 --> 00:39:45.658
doesn't work let us know.

00:39:45.658 --> 00:39:46.518
AUDIENCE: When you say today,
today, you mean today today.

00:39:46.718 --> 00:39:50.018
ALEX RUSSELL: Yes, just to be
clear, we've been making new

00:39:50.018 --> 00:39:52.800
releases on a weekly basis in
the developer channel since

00:39:52.800 --> 00:39:54.375
the initial release.

00:39:52.558 --> 00:39:55.260
So, we've been adding new
features, improving stability,

00:39:55.260 --> 00:39:57.538
making sure that crashes are
reduced ever since then.

00:39:57.538 --> 00:40:00.018
So it's not like we've
been sitting still.

00:40:00.018 --> 00:40:02.678
So that if you checked it out a
couple months ago and it didn't

00:40:02.678 --> 00:40:04.600
work that way try
installing today.

00:40:04.600 --> 00:40:05.540
Give it another shot
and let us know.

00:40:05.540 --> 00:40:06.340
AUDIENCE: I think the web
page still says it's not.

00:40:06.340 --> 00:40:09.840
ALEX RUSSELL: Ah OK,
that's a to do it for me.

00:40:09.840 --> 00:40:12.138
AUDIENCE: And the other
question is, what do you

00:40:12.138 --> 00:40:14.340
think is still in the path?

00:40:14.340 --> 00:40:17.658
Is it just fixing bugs in
quality fixes or are there

00:40:17.658 --> 00:40:20.218
major components you think are
still needed before it becomes

00:40:20.218 --> 00:40:21.218
stable, as opposed
to just beta?

00:40:21.218 --> 00:40:26.140
ALEX RUSSELL: From my personal
use, the things that I care

00:40:26.140 --> 00:40:30.658
most about are performance.

00:40:30.658 --> 00:40:32.058
Once a page is rendered in
Google Chrome Frame it's as

00:40:32.058 --> 00:40:34.698
fast as it is in Chrome,
which is outstanding.

00:40:34.698 --> 00:40:38.318
Startup performance is
currently our largest

00:40:38.318 --> 00:40:41.700
outstanding item on the
trajectory towards stable.

00:40:41.700 --> 00:40:43.210
We want to make it so that you
don't even notice that Chrome

00:40:43.210 --> 00:40:45.520
Frame is starting up and I
think we have a good shot at

00:40:45.520 --> 00:40:47.138
making sure that happens.

00:40:47.998 --> 00:40:49.540
Generally speaking, though
otherwise I'm happy with the

00:40:49.540 --> 00:40:53.238
way the fit and finish are
today and I think that we will

00:40:53.238 --> 00:40:56.400
be in stable, I can't promise
anything obviously, up

00:40:56.400 --> 00:40:58.098
but hopefully shortly.

00:40:58.098 --> 00:41:01.358
AUDIENCE: One last quick one,
I'm just reminding myself,

00:41:01.358 --> 00:41:03.378
Google Chrome doesn't have
print preview, right?

00:41:03.378 --> 00:41:05.298
Does that mean Google
Chrome Frame doesn't

00:41:05.298 --> 00:41:05.778
have print preview?

00:41:05.778 --> 00:41:06.358
ALEX RUSSELL: That's correct.

00:41:06.358 --> 00:41:09.538
The question was yes, Google
Chrome Frame has support for

00:41:09.538 --> 00:41:17.780
printing at the level
of Chrome today.

00:41:17.780 --> 00:41:20.800
AUDIENCE: So, last time I
played with Chrome Frame, I was

00:41:20.800 --> 00:41:25.420
trying to use the cross-origin
resource sharing, the XHR2, and

00:41:25.420 --> 00:41:27.820
it totally crashed,
like everything.

00:41:27.820 --> 00:41:29.486
It all just went, kaboom.

00:41:29.598 --> 00:41:33.378
ALEX RUSSELL: Can you explain
the scenerio a little more?

00:41:33.378 --> 00:41:35.818
Were you try to do that
in a single document?

00:41:37.898 --> 00:41:40.558
AUDIENCE: Yes, this was
like two months ago.

00:41:40.058 --> 00:41:41.378
Maybe it's change since then.

00:41:41.378 --> 00:41:43.840
I didn't know if maybe a
network layer thing that IE

00:41:43.840 --> 00:41:49.038
doesn't allow it, so Chrome
Frame can't allow it, but I had

00:41:49.038 --> 00:41:54.298
a page where I was trying to do
post to another site using

00:41:54.298 --> 00:41:57.038
XHR2 and it kaboomed.

00:41:57.038 --> 00:41:58.878
ALEX RUSSELL: And were you
sending back any specific

00:41:58.878 --> 00:42:05.638
headers regarding the policy
for display and subframes?

00:42:06.820 --> 00:42:09.518
Or, were you simply sending
back I allowed this

00:42:09.518 --> 00:42:10.238
cross-origin resource?

00:42:12.218 --> 00:42:16.478
AUDIENCE: Yes, I was sending
back everything -- like it

00:42:16.478 --> 00:42:17.820
works in other browsers and
it works in Chrome and

00:42:17.820 --> 00:42:18.678
it works in Firefox.

00:42:18.678 --> 00:42:20.518
ALEX RUSSELL: If that's
not working, its our bug.

00:42:20.978 --> 00:42:21.318
Try it again.

00:42:21.638 --> 00:42:23.658
We have updated Chrome Frame in
the meantime, but if it doesn't

00:42:23.658 --> 00:42:27.080
work, try it in the Chrome
Developer Channel release.

00:42:27.340 --> 00:42:30.620
And just file a bug, and let
us know that it's not working

00:42:30.620 --> 00:42:31.610
for you and join the

00:42:31.610 --> 00:42:33.060
mailing list and
we'll work it out.

00:42:33.060 --> 00:42:34.820
AUDIENCE: But that that
should be working?

00:42:34.820 --> 00:42:35.900
That's not a restriction.

00:42:35.720 --> 00:42:38.580
ALEX RUSSELL: If the main page
is rendered in Google Chrome

00:42:38.580 --> 00:42:38.898
Frame, yes, it should work.

00:42:41.958 --> 00:42:43.018
AUDIENCE: I have few
very quick questions.

00:42:43.018 --> 00:42:45.398
Number 1, does flash just work?

00:42:45.398 --> 00:42:46.620
ALEX RUSSELL: Flash just works.

00:42:46.620 --> 00:42:52.378
So, not only does it just work,
we're using the built-in flash

00:42:52.378 --> 00:42:54.818
from Google Chrome so you may
have heard that several weeks

00:42:54.818 --> 00:42:58.578
ago we announced that Google
Chrome is shipping Flash 10.1

00:42:58.578 --> 00:43:01.078
as part of Chrome, so it auto
updates on the exact same

00:43:01.078 --> 00:43:02.598
cycle that Chrome does.

00:43:02.598 --> 00:43:03.348
So, you get the latest Flash,
and you get the built

00:43:03.348 --> 00:43:05.678
in version of Flash.

00:43:05.678 --> 00:43:07.438
AUDIENCE: OK and then when
you're going into beta, are you

00:43:07.438 --> 00:43:09.198
going to be branding it as
Beta, because people

00:43:09.198 --> 00:43:10.578
might be hesitant.

00:43:11.038 --> 00:43:11.678
ALEX RUSSELL: Yes, we will.

00:43:11.858 --> 00:43:12.738
When we go into
Beta. you'll know.

00:43:13.880 --> 00:43:16.280
AUDIENCE: OK and then
pop up blockers.

00:43:16.638 --> 00:43:17.978
How does that work?

00:43:17.978 --> 00:43:19.898
ALEX RUSSELL: The question
was, how do pop up blockers

00:43:19.898 --> 00:43:23.658
work in Chrome Frame.

00:43:23.658 --> 00:43:28.498
Generally speaking, we intend
to attempt to plumb pop-up

00:43:28.498 --> 00:43:31.280
requests back through internet
explorer, so in order to host a

00:43:31.280 --> 00:43:34.140
separate window in a pop up, we
do have to ask internet

00:43:34.140 --> 00:43:36.380
explorer to create to that
window for us, and then we

00:43:36.380 --> 00:43:37.406
parent the new Chrome tab
inside it, and in

00:43:37.406 --> 00:43:38.352
the background.

00:43:37.460 --> 00:43:37.966
The Javascript relationship
between parented windows

00:43:37.966 --> 00:43:38.220
should work correctly.

00:43:39.020 --> 00:43:39.958
You should be able to sript
them, that's correct.

00:43:40.198 --> 00:43:52.358
AUDIENCE: Can an IT Admin
specify which pages should

00:43:52.358 --> 00:43:52.538
be loaded in Chrome Frame?

00:43:52.538 --> 00:43:53.378
For example, if an IT Admin
wants to load Gmail or Docs,

00:43:53.378 --> 00:43:57.198
through Chrome Frame instead
of having to instead of

00:43:57.198 --> 00:43:59.978
having to change the HTML?

00:43:59.978 --> 00:44:02.698
ALEX RUSSELL: The question
was a can I specify which

00:44:02.698 --> 00:44:04.920
pages I'd liked to have
rendered that way.

00:44:04.920 --> 00:44:05.560
The answer is, yes.

00:44:05.560 --> 00:44:08.918
If you look at the
documentation for Chrome Frame

00:44:08.918 --> 00:44:10.458
there is a series of registry
keys that we make available to

00:44:10.458 --> 00:44:13.018
help you configure which pages
explicitly through

00:44:13.018 --> 00:44:15.538
administrator policy you'd like
to have rendered

00:44:15.538 --> 00:44:15.900
in Chrome Frame.

00:44:15.900 --> 00:44:20.898
You should be careful though
for applications like Docs,

00:44:20.898 --> 00:44:26.698
sites or Gmail where they may
be sending conditional content.

00:44:26.698 --> 00:44:28.938
They are trying to optimize as
much as they can, so they may

00:44:28.938 --> 00:44:32.618
not be sending the same content
to every browser and if they're

00:44:32.618 --> 00:44:35.218
not savvyabout Chrome Frame,
and they are not already sort

00:44:35.218 --> 00:44:38.968
of triggering Chrome Frame, you
may get yourself into to sort

00:44:38.968 --> 00:44:39.978
of compatibility worries.

00:44:40.338 --> 00:44:43.078
So, I'd recommend that if you
are going to do that, that only

00:44:43.078 --> 00:44:46.220
for applications that you
control or have tested with.

00:44:46.120 --> 00:44:49.458
And, if you do have problems
with Google applications,

00:44:49.458 --> 00:44:50.238
let us know.

00:44:51.800 --> 00:44:53.538
We would like to would like
to understand how you'd

00:44:53.538 --> 00:44:54.658
like to use them.

00:44:54.658 --> 00:44:55.720
How you'd like to see
that's deployed.

00:44:55.720 --> 00:45:00.758
Also, also if you find the
registry keys we have made

00:45:00.758 --> 00:45:01.578
available for that
configuration aren't

00:45:01.578 --> 00:45:04.540
sufficient, again, we'd love to
hear from you now, while we

00:45:04.540 --> 00:45:05.040
still a chance to
affect the beta.

00:45:08.058 --> 00:45:11.820
AUDIENCE: real quickly,
the tough question.

00:45:11.820 --> 00:45:14.838
We've pushed pretty hard
get all our clients onto

00:45:14.838 --> 00:45:16.458
Firefox because of the IE.

00:45:19.598 --> 00:45:22.760
Chrome works a lot faster than
Firefox with the Javascripts.

00:45:23.160 --> 00:45:25.378
Is there a plan to have --

00:45:25.378 --> 00:45:30.298
ALEX RUSSELL: So, the good news
is that all of the browsers

00:45:30.298 --> 00:45:38.498
that have been participating in
the recent Javascript

00:45:38.498 --> 00:45:40.398
performance race are
making huge strides.

00:45:40.398 --> 00:45:45.960
So Javascript performance
in Firefox are miles

00:45:45.960 --> 00:45:47.660
ahead of where they
were even a year ago.

00:45:47.660 --> 00:45:50.000
And, thats part of the reasons
we started the Chrome project.

00:45:50.000 --> 00:45:52.300
It was to make sure that we
could light a fire under this

00:45:52.300 --> 00:45:53.020
process of competition.

00:45:53.020 --> 00:45:58.058
So, most of the browsers that
don't have majority market

00:45:58.058 --> 00:46:01.998
share are doing really well
keeping up with modern

00:46:01.998 --> 00:46:03.349
standards, HTML5.

00:46:01.780 --> 00:46:04.808
And, in fact, because as
I said earlier Plan A is

00:46:04.808 --> 00:46:05.658
to get a better browser.

00:46:05.658 --> 00:46:08.178
We what users to install and
use better browsers and to have

00:46:08.178 --> 00:46:11.620
those browsers compete head on
to improve their features set.

00:46:11.620 --> 00:46:14.192
So we're not going to be making
a full page version of Google

00:46:14.192 --> 00:46:19.758
Chrome Frame available for
Firefox as far as I know.

00:46:21.578 --> 00:46:23.398
Generally speaking, there
just isn't a great

00:46:23.398 --> 00:46:23.738
reason to do it, right?

00:46:23.738 --> 00:46:27.118
Firefox is doing a great job of
improving their performance and

00:46:27.118 --> 00:46:29.178
compatibility story and we're
looking forward to working more

00:46:29.178 --> 00:46:32.280
with them in the future to make
the web more open, and that

00:46:32.280 --> 00:46:37.838
involves competing head on.

00:46:37.838 --> 00:46:39.258
AUDIENCE: Does Chrome Frame
support Windows Authentication.

00:46:39.258 --> 00:46:43.958
For example, internet web
pages that require --

00:46:43.958 --> 00:46:46.898
ALEX RUSSELL: Does Chrome Frame
support Windows authentication?

00:46:46.898 --> 00:46:49.318
And, TML authentication,
something like that?

00:46:49.318 --> 00:46:51.438
I know we have an open bug NTM
authentication right now.

00:46:53.920 --> 00:46:55.280
I can talk to you afterwards.

00:46:56.460 --> 00:46:58.252
If you look through the
Chromium bug tracker in the

00:46:58.252 --> 00:47:01.340
area Chrome Frame and TLM you
should find the bug, be able

00:47:01.340 --> 00:47:03.320
to start and see how
we make progress.

00:47:03.320 --> 00:47:06.980
We tend to knock out bugs
pretty fast so you'll get

00:47:06.980 --> 00:47:09.340
updates on that bug as we
power through and fix it.

00:47:09.340 --> 00:47:10.600
Eventually, it will work.

00:47:10.600 --> 00:47:13.278
Yes.

00:47:13.598 --> 00:47:19.848
AUDIENCE: Wondering to what
extent if any, Google will try

00:47:19.848 --> 00:47:23.780
to promote adoption of Chrome
Frame through it's

00:47:23.780 --> 00:47:24.060
own websites?

00:47:25.100 --> 00:47:29.058
ALEX RUSSELL: Well, Wave today
already does this so Wave today

00:47:29.058 --> 00:47:32.038
does not support on any
version of internet explore

00:47:32.038 --> 00:47:34.058
without Chrome Frame.

00:47:34.058 --> 00:47:37.778
So, you would imagine that as
individual properties decide

00:47:37.778 --> 00:47:40.458
that they want switch over to
using HTLM5 features, that

00:47:40.458 --> 00:47:45.400
they will make an individual
decision about where their

00:47:45.400 --> 00:47:46.940
cost benefit analysis lies.

00:47:46.940 --> 00:47:49.300
And, hopefully, if Chrome Frame
becomes widely adopted it will

00:47:49.300 --> 00:47:52.540
be easy for them to make that
choice but and that is up to

00:47:52.540 --> 00:47:53.840
those individual apps teams.

00:47:53.840 --> 00:47:56.160
And if you have a particular
app that you'd like to see

00:47:56.160 --> 00:47:58.050
using Chrome Frame, I would
suggest that you

00:47:58.050 --> 00:47:59.280
send them mail.

00:47:59.280 --> 00:48:00.498
I'd love to hear, I'd love
to CC'ed on that too.

00:48:02.658 --> 00:48:04.978
Thanks.

00:48:04.978 --> 00:48:07.678
Are there othere questions?

00:48:07.678 --> 00:48:11.158
AUDIENCE: I don't know
if this has been tried.

00:48:11.158 --> 00:48:14.904
I haven't been following Chrome
Frame, but have you looked

00:48:14.904 --> 00:48:15.760
at legacy mobile apps?

00:48:15.760 --> 00:48:18.400
Like IE6 in most cases?

00:48:18.400 --> 00:48:19.358
ALEX RUSSELL: Good question.

00:48:19.358 --> 00:48:25.258
So, the legacy mobile
world is difficult.

00:48:27.158 --> 00:48:29.118
Difficult not only in the sense
that it's much more difficult

00:48:29.118 --> 00:48:32.760
to distribute software
onto those platforms.

00:48:32.760 --> 00:48:37.780
I mean, it is internet explorer
in some very real sense, but

00:48:37.780 --> 00:48:40.860
there's also a much more highly
constraint memory footprint.

00:48:40.860 --> 00:48:43.498
Chrome is built for
modern systems.

00:48:43.138 --> 00:48:45.860
We use the multiprocess
architecture because we have

00:48:45.860 --> 00:48:48.518
enough memory to do it,
generally speaking.

00:48:48.518 --> 00:48:52.878
I think most web developers
that I talk to treat Windows

00:48:52.878 --> 00:48:55.218
Mobile's browser sort of
as the down level browser.

00:48:55.218 --> 00:48:58.098
So if you are building a mobile
site, you have sort of like

00:48:58.098 --> 00:49:02.118
your webkit based, and Opera
Experience up here and Firefox

00:49:02.118 --> 00:49:08.738
up here, and then you have sort
of your down level experience.

00:49:08.738 --> 00:49:11.280
I know a lot of people treat
Windows Mobile browser as

00:49:11.280 --> 00:49:12.492
down level experience, and
that might be the right

00:49:12.492 --> 00:49:13.638
way to think about.

00:49:13.638 --> 00:49:15.478
The good news in the mobile
world is that things move

00:49:15.478 --> 00:49:16.978
a lot faster, right?

00:49:16.978 --> 00:49:19.820
We got sort of stuck in a
trough in terms of competition

00:49:19.820 --> 00:49:23.880
on the desktop browser but
mobile handsets over a

00:49:23.880 --> 00:49:26.638
relatively short clip, users
get new handsets every

00:49:26.638 --> 00:49:30.118
-- I'm sorry --

00:49:30.118 --> 00:49:33.969
AUDIENCE: --I'm referring to
the enterprise mobile space,

00:49:30.000 --> 00:49:30.258
where it's not that quick.

00:49:34.360 --> 00:49:35.520
ALEX RUSSELL: We have
not looked at it.

00:49:37.218 --> 00:49:41.158
If you think that it's
something that would be

00:49:41.158 --> 00:49:45.398
reasonable to do, we don't have
a port of Chrome to Windows CE

00:49:45.398 --> 00:49:47.944
and we use Chrome directly for
Chrome Frame, so it's something

00:49:47.944 --> 00:49:48.978
we'd have to have a
long discussion.

00:49:48.978 --> 00:49:52.780
But, if you think it's
something that we could do, and

00:49:52.780 --> 00:49:57.578
should do, I encourage you to
join the mailing list and

00:49:57.578 --> 00:50:00.998
we'll think about it.

00:50:00.998 --> 00:50:03.178
Any other questions?

00:50:03.178 --> 00:50:03.718
All right.

00:50:03.718 --> 00:50:05.298
Otherwise, thank you
so much for coming.

00:50:05.298 --> 00:50:07.858
And if you have more questions,
I'll be in the hall for

00:50:07.858 --> 00:50:08.770
a little bit and we can
talk about them there.

00:50:08.922 --> 00:50:13.922
Thank you.

