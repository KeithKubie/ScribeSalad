WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.600
In the first problem of the exam, we wrote

00:00:02.600 --> 00:00:05.330
a lexer for a new programming language. In the

00:00:05.330 --> 00:00:08.380
second problem, we're going to write a parser that

00:00:08.380 --> 00:00:12.430
will create an abstract syntax tree for something similar to

00:00:12.430 --> 00:00:14.890
the listening tuples that we find in pie-pon. We're

00:00:14.890 --> 00:00:17.340
only going to consider numbers, but we are going to

00:00:17.340 --> 00:00:22.810
recognize the difference between a list that has brackets

00:00:22.810 --> 00:00:25.890
and a tuple that has parentheses. So in our parser,

00:00:25.890 --> 00:00:30.960
we have expressions. And let's say an expression can be a number, a list of

00:00:30.960 --> 00:00:34.590
expressions and lastly a tuple of expressions.

00:00:34.590 --> 00:00:36.750
So let's start off with numbers. Here's our

00:00:36.750 --> 00:00:44.370
parsing rule for the number expression. We simply take in the number and put it

00:00:44.370 --> 00:00:47.560
in tuple where the first element is the

00:00:47.560 --> 00:00:50.850
type following our convention in our web browser,

00:00:50.850 --> 00:00:52.100
and our second element is going to be the

00:00:52.100 --> 00:00:56.050
value. So, here I've written up the function for

00:00:56.050 --> 00:00:59.970
Tuple expressions. We have a left parenthesis, this new

00:00:59.970 --> 00:01:03.560
thing, called expcomma and then a right parenthesis. So basically

00:01:03.560 --> 00:01:07.480
a tuple surrounded by parentheses. Here, I haven't defined

00:01:07.480 --> 00:01:09.410
this yet. And what this is going to be

00:01:09.410 --> 00:01:12.610
is going to be a sequence of expressions where

00:01:12.610 --> 00:01:15.850
there is a comma separating each expression. We'll define that

00:01:15.850 --> 00:01:18.590
last and we'll also be using it in the list

00:01:18.590 --> 00:01:21.930
expression. Here, I have a special rule that takes care

00:01:21.930 --> 00:01:25.770
of the case, just a single expressions surrounded by parentheses.

00:01:25.770 --> 00:01:29.570
In reality, we want our language to take this as

00:01:29.570 --> 00:01:32.320
just an expression, which is what happens in python. In

00:01:32.320 --> 00:01:34.400
python, if you wanted to make this a tuple, a

00:01:34.400 --> 00:01:36.730
tuple of one element, you have to add a comma.

00:01:36.730 --> 00:01:41.500
Otherwise, we're going to set this element in our abstract syndextry

00:01:41.500 --> 00:01:45.120
to be a tuple, where the first element is

00:01:45.120 --> 00:01:49.010
the string tuple, followed by the value. Here's my

00:01:49.010 --> 00:01:51.850
function for the list expression. It's a going to

00:01:51.850 --> 00:01:56.070
be expcomma, which is. That construct right up here

00:01:56.070 --> 00:01:58.120
surrounded by brackets. And we don't have the special

00:01:58.120 --> 00:02:00.830
case that we had right here because we want

00:02:00.830 --> 00:02:04.370
our language to have singleton less. So we want

00:02:04.370 --> 00:02:06.550
the character a, or, I guess since we have just

00:02:06.550 --> 00:02:12.380
numbers, five, to be an out list. This is not the same

00:02:12.380 --> 00:02:15.710
idea as doing. Five surrounded by parentheses, we want that just to

00:02:15.710 --> 00:02:18.010
be five. So we have the basics here, let's just go to

00:02:18.010 --> 00:02:20.630
the code to finish it up. So here we have the problem description.

00:02:23.360 --> 00:02:27.530
And I've filled in the solution. We have the number expressions, the tuple

00:02:27.530 --> 00:02:30.690
and the list which are unchanged from what I did. But I've also added

00:02:30.690 --> 00:02:33.440
the expression comma where an expression

00:02:33.440 --> 00:02:36.590
comma is an expression, a comma. Followed

00:02:36.590 --> 00:02:39.170
by an expression comma, where an expression

00:02:39.170 --> 00:02:42.030
comma can also be just an expression.

