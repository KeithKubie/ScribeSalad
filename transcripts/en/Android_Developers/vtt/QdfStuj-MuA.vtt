WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.330
SPEAKER: Friction, it's good for
rock climbing and opening jars,

00:00:03.330 --> 00:00:04.830
but in the world
of app development,

00:00:04.830 --> 00:00:06.555
it's a force that
we seek to minimize.

00:00:06.555 --> 00:00:09.270
App installation is a
major source of friction.

00:00:09.270 --> 00:00:11.370
Even for small apps,
the installation screen

00:00:11.370 --> 00:00:14.060
can lose you 5% to
10% of your users.

00:00:14.060 --> 00:00:16.870
And the numbers just get worse
as the app size gets larger.

00:00:16.870 --> 00:00:19.860
For example, 20% of app
installs over 100 megabytes

00:00:19.860 --> 00:00:21.520
are canceled by the user.

00:00:21.520 --> 00:00:23.980
This is where Android
Instant Apps really shines.

00:00:23.980 --> 00:00:26.210
Instant apps are
native Android apps

00:00:26.210 --> 00:00:28.130
that require no installation.

00:00:28.130 --> 00:00:29.880
But what the heck does
that actually mean?

00:00:29.880 --> 00:00:31.440
Let's go ahead and take a look.

00:00:31.440 --> 00:00:33.510
Here, I've got a link from a
friend about the Google Trips

00:00:33.510 --> 00:00:34.016
app.

00:00:34.016 --> 00:00:36.390
I press it, and I'm immediately
taken into an instant app

00:00:36.390 --> 00:00:37.380
experience.

00:00:37.380 --> 00:00:39.810
It feels like a native
app because it is one.

00:00:39.810 --> 00:00:43.242
Instant apps can be associated
with any URL that you own.

00:00:43.242 --> 00:00:44.700
So you can associate
an instant app

00:00:44.700 --> 00:00:48.600
with a search result, a tweet,
a text message, or a "Try Now"

00:00:48.600 --> 00:00:50.449
button on your
Play Store listing.

00:00:50.449 --> 00:00:51.990
Let's go ahead and
take a look at how

00:00:51.990 --> 00:00:53.823
you'd actually go about
structuring your app

00:00:53.823 --> 00:00:54.510
to be instant.

00:00:54.510 --> 00:00:56.460
You're most likely used
to having a single app

00:00:56.460 --> 00:00:57.860
module like this.

00:00:57.860 --> 00:01:00.090
When you compile your
app, it becomes an APK

00:01:00.090 --> 00:01:02.280
that you then upload
to Google Play.

00:01:02.280 --> 00:01:04.739
As you add different features
and assets to your app,

00:01:04.739 --> 00:01:06.690
that APK size is going to grow.

00:01:06.690 --> 00:01:08.370
Eventually, your
single app module

00:01:08.370 --> 00:01:09.912
is going to take
minutes to download.

00:01:09.912 --> 00:01:12.286
Now, you haven't really taken
the friction out of the app

00:01:12.286 --> 00:01:15.000
experience if your users will
spend the same amount of time

00:01:15.000 --> 00:01:17.010
staring at that instant
app's splash screen

00:01:17.010 --> 00:01:18.426
that they would
have spent looking

00:01:18.426 --> 00:01:19.590
at the installing screen.

00:01:19.590 --> 00:01:21.840
So instant apps enable you
to keep all of the features

00:01:21.840 --> 00:01:25.260
that your users love, but
download them one at a time.

00:01:25.260 --> 00:01:27.810
To do this, you need to
take that one big app module

00:01:27.810 --> 00:01:31.620
and split it into smaller
modules called feature modules.

00:01:31.620 --> 00:01:34.560
Each feature module contains
the code and resources

00:01:34.560 --> 00:01:36.810
for a different, distinct
thing that your users

00:01:36.810 --> 00:01:38.110
could do with your app.

00:01:38.110 --> 00:01:40.860
So for example, let's say
that I have a travel app.

00:01:40.860 --> 00:01:42.660
I might have a
different feature module

00:01:42.660 --> 00:01:44.850
for the code for
renting hotel rooms,

00:01:44.850 --> 00:01:47.634
booking flights, and
rating those hotel rooms.

00:01:47.634 --> 00:01:49.050
Now usually, these
feature modules

00:01:49.050 --> 00:01:51.990
won't have completely
independent code or resources.

00:01:51.990 --> 00:01:54.932
You probably use the same
themes and utility code in each.

00:01:54.932 --> 00:01:56.640
You also probably use
the support library

00:01:56.640 --> 00:01:58.410
in all of the feature modules.

00:01:58.410 --> 00:02:00.180
All of this shared
code and resources

00:02:00.180 --> 00:02:03.030
is therefore extracted out
into another module, which is

00:02:03.030 --> 00:02:05.130
called the base feature module.

00:02:05.130 --> 00:02:06.750
When your user
opens your app, they

00:02:06.750 --> 00:02:08.310
don't download the whole app.

00:02:08.310 --> 00:02:10.889
They only download the code
for the base feature module

00:02:10.889 --> 00:02:13.200
and the feature module that
they're currently using.

00:02:13.200 --> 00:02:15.540
This means that if your user
is booking a hotel room,

00:02:15.540 --> 00:02:17.248
they're not necessarily
going to download

00:02:17.248 --> 00:02:18.810
the code for flights or rating.

00:02:18.810 --> 00:02:21.660
If your user then navigates
to another feature of yours,

00:02:21.660 --> 00:02:23.850
the base feature
isn't redownloaded.

00:02:23.850 --> 00:02:25.990
And because you've
modularized your code,

00:02:25.990 --> 00:02:28.290
you can use the same code
base for your installable app

00:02:28.290 --> 00:02:29.580
as your instant app.

00:02:29.580 --> 00:02:32.490
Now, behind the scenes, when you
compile as an installable app,

00:02:32.490 --> 00:02:33.990
these different
feature modules will

00:02:33.990 --> 00:02:36.530
act like a collection
of Android libraries.

00:02:36.530 --> 00:02:38.524
But when they're compiled
as an instant app,

00:02:38.524 --> 00:02:40.440
you're going to get a
ZIP file, which you then

00:02:40.440 --> 00:02:41.400
upload to Google Play.

00:02:41.400 --> 00:02:45.420
This ZIP file contains separate
APKs for each feature module.

00:02:45.420 --> 00:02:48.750
At runtime, these APKs are
loaded and composited together

00:02:48.750 --> 00:02:50.830
to provide the instant
apps experience.

00:02:50.830 --> 00:02:53.340
Android Studio 3.0 has
been designed with tools

00:02:53.340 --> 00:02:55.740
to help you modularize
and create instant apps.

00:02:55.740 --> 00:02:57.870
It includes a refactoring
tool for splitting code

00:02:57.870 --> 00:02:59.482
into modules.

00:02:59.482 --> 00:03:01.890
The App Links assistant
makes it easy to generate

00:03:01.890 --> 00:03:04.260
the code needed to
associate the URLs that you

00:03:04.260 --> 00:03:08.730
own with your instant
app feature modules.

00:03:08.730 --> 00:03:12.390
There's also an Instant Apps
SDK with NDK support and APIs

00:03:12.390 --> 00:03:14.810
for showing install prompts.

00:03:14.810 --> 00:03:17.240
The cookie API makes it
easy to transfer data

00:03:17.240 --> 00:03:20.630
from the instant app
to the installable app.

00:03:20.630 --> 00:03:24.230
And configuration APK support
helps you reduce module size.

00:03:24.230 --> 00:03:27.540
More details on all of this
are in the Docs link below.

00:03:27.540 --> 00:03:30.170
The 3.0 Android Gradle
plugin was built

00:03:30.170 --> 00:03:31.730
with multi-module apps in mind.

00:03:31.730 --> 00:03:34.250
And it compiles
multi-module projects fast.

00:03:34.250 --> 00:03:37.940
This table shows speeds for
a project with 130 modules.

00:03:37.940 --> 00:03:40.370
Finally, there are two new
plugin types specifically

00:03:40.370 --> 00:03:41.840
for building instant apps--

00:03:41.840 --> 00:03:44.380
the feature plugin for your
feature modules and the Instant

00:03:44.380 --> 00:03:45.500
App plugin.

00:03:45.500 --> 00:03:47.300
OK, so as we saw
before, you have

00:03:47.300 --> 00:03:50.510
modules for all of your features
and the base feature module.

00:03:50.510 --> 00:03:52.790
You're also going to include
two additional modules

00:03:52.790 --> 00:03:54.230
just for building the app--

00:03:54.230 --> 00:03:57.080
the Installable app module which
builds your installable app,

00:03:57.080 --> 00:03:59.455
and the Instant App module
which builds your instant app.

00:03:59.455 --> 00:04:02.960
The Installable App module uses
the Gradle application plugin.

00:04:02.960 --> 00:04:06.280
But the Instant App module
uses the new Gradle instant app

00:04:06.280 --> 00:04:07.220
plugin.

00:04:07.220 --> 00:04:10.340
Your feature modules then
use the new Feature plugin.

00:04:10.340 --> 00:04:11.880
The Feature plugin
is kind of cool

00:04:11.880 --> 00:04:14.349
because it will make either
an APK versus a library,

00:04:14.349 --> 00:04:15.890
depending on whether
it's being built

00:04:15.890 --> 00:04:18.269
by the Instant App or the
Installable App module.

00:04:18.269 --> 00:04:20.769
Now, after using the correct
Gradle plugins for each of your

00:04:20.769 --> 00:04:23.150
build files, you just have
to set up the dependencies

00:04:23.150 --> 00:04:24.359
between the modules.

00:04:24.359 --> 00:04:26.900
Then you're ready to build both
instant and installable apps.

00:04:26.900 --> 00:04:29.300
For some hands-on experience
converting a regular app

00:04:29.300 --> 00:04:32.930
to an instant app, check out the
Android Instant Apps Codelab.

00:04:32.930 --> 00:04:35.000
Now, if you are itching
to convert your own app,

00:04:35.000 --> 00:04:37.190
we also have tons of
documentation and resources

00:04:37.190 --> 00:04:39.800
about the requirements and
processes for getting started.

00:04:39.800 --> 00:04:41.480
And if you ever
find yourself stuck,

00:04:41.480 --> 00:04:43.250
you can reach out
on Stack Overflow

00:04:43.250 --> 00:04:45.170
with the
android-instant-apps tag.

00:04:45.170 --> 00:04:46.085
That's it for today.

00:04:46.085 --> 00:04:46.710
Happy building.

00:04:46.710 --> 00:04:49.160
[MUSIC PLAYING]

