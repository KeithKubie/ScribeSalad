WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.431
[TEST BEEPING]

00:00:01.431 --> 00:00:04.293
[MUSIC PLAYING]

00:00:06.400 --> 00:00:08.650
ANDREW BROGDON: Hey welcome
back to the "Boring Show."

00:00:08.650 --> 00:00:10.695
I'm Andrew Brogdon
from the Flutter team.

00:00:10.695 --> 00:00:13.153
MATT SULLIVAN: And I am Matt
from the Flutter team as well.

00:00:13.153 --> 00:00:14.140
ANDREW BROGDON: Yeah.

00:00:14.140 --> 00:00:16.855
So today, we're going to
take a little bit of a detour

00:00:16.855 --> 00:00:19.230
from what we had been working
on, which was a Hacker news

00:00:19.230 --> 00:00:22.980
reader app, and we're
going to develop a plugin

00:00:22.980 --> 00:00:25.110
to see how-- check that
out, see how it works.

00:00:25.110 --> 00:00:27.654
And we also will have
a guest star later.

00:00:27.654 --> 00:00:29.820
One of the engineers on the
Flutter engineering team

00:00:29.820 --> 00:00:32.475
is going to drop by to talk
about some internals with us,

00:00:32.475 --> 00:00:34.600
so it'll happen a
little bit later on.

00:00:34.600 --> 00:00:37.520
But for right now, plugins--

00:00:37.520 --> 00:00:38.726
they're a good thing.

00:00:38.726 --> 00:00:39.850
MATT SULLIVAN: So plugins--

00:00:39.850 --> 00:00:43.590
we're going to interface from
our Dart code on the Flutter

00:00:43.590 --> 00:00:50.100
side to platform specific code
on the Android and/or iOS side.

00:00:50.100 --> 00:00:52.680
So we're going to check out
iOS, Android both today.

00:00:52.680 --> 00:00:53.460
What's the plan?

00:00:53.460 --> 00:00:55.668
ANDREW BROGDON: I figured
we'd start with just making

00:00:55.668 --> 00:00:57.690
the plugin package, which--

00:00:57.690 --> 00:01:00.480
most of that is, you get
started with a template.

00:01:00.480 --> 00:01:02.820
The Flutter tool
can do that for you.

00:01:02.820 --> 00:01:05.290
We can define the Dart
interface for the plugin

00:01:05.290 --> 00:01:08.060
to say how people
can interact with it.

00:01:08.060 --> 00:01:12.120
And we'll probably go
into Android at that point

00:01:12.120 --> 00:01:14.040
and do the native
implementation on Android.

00:01:14.040 --> 00:01:17.310
And if we have time, we
can look at doing the iOS

00:01:17.310 --> 00:01:22.260
implementation, too, so maybe
make a cross-platform plugin.

00:01:22.260 --> 00:01:24.330
And I was kicking around
some ideas earlier.

00:01:24.330 --> 00:01:25.860
I wanted something
sort of simple

00:01:25.860 --> 00:01:27.485
that we could knock
out fairly quickly,

00:01:27.485 --> 00:01:29.730
but that didn't already
exist, and I came up

00:01:29.730 --> 00:01:32.340
with the idea of a
barometer plugin.

00:01:32.340 --> 00:01:33.510
MATT SULLIVAN: Nice.

00:01:33.510 --> 00:01:35.360
So we're going to need--

00:01:35.360 --> 00:01:37.800
latest Pixel phones, Samsung
phones, and whatnot all

00:01:37.800 --> 00:01:40.620
have a sensor in
there for barometers.

00:01:40.620 --> 00:01:41.250
Altitude?

00:01:41.250 --> 00:01:42.170
No, pressure.

00:01:42.170 --> 00:01:44.280
ANDREW BROGDON: It's
pressure, and thereby,

00:01:44.280 --> 00:01:46.920
sort of correlates
with altitude.

00:01:46.920 --> 00:01:48.717
I've heard it's
for GPS location,

00:01:48.717 --> 00:01:50.550
like you can get a
height that helps you get

00:01:50.550 --> 00:01:52.245
a more accurate GPS location.

00:01:52.245 --> 00:01:52.780
MATT SULLIVAN: Oh, that's cool.

00:01:52.780 --> 00:01:53.640
ANDREW BROGDON: From the radio.

00:01:53.640 --> 00:01:55.190
I don't know that for a fact.

00:01:55.190 --> 00:01:58.800
RF engineers in the audience,
feel free to correct me.

00:01:58.800 --> 00:02:00.660
I've heard that, though.

00:02:00.660 --> 00:02:05.040
MATT SULLIVAN: So we're going to
put this in the Flutter package

00:02:05.040 --> 00:02:05.670
management.

00:02:05.670 --> 00:02:07.230
ANDREW BROGDON: If we can, yeah.

00:02:07.230 --> 00:02:10.086
I mean, if-- assuming it works.

00:02:10.086 --> 00:02:10.919
But yeah, there is--

00:02:10.919 --> 00:02:14.204
I checked pub-- the Dart package
manager to see if one of these

00:02:14.204 --> 00:02:14.870
already existed.

00:02:14.870 --> 00:02:16.480
I didn't see one.

00:02:16.480 --> 00:02:19.290
There might be one that has it
as part of other functionality,

00:02:19.290 --> 00:02:22.110
but nothing for a, "hey,
what's the mercury today"

00:02:22.110 --> 00:02:25.484
kind of a barometer plugin.

00:02:25.484 --> 00:02:27.900
MATT SULLIVAN: So we're going
to have a height of mercury?

00:02:27.900 --> 00:02:29.760
ANDREW BROGDON: Yes,
in millibars, I think,

00:02:29.760 --> 00:02:30.990
is what it's measured in.

00:02:30.990 --> 00:02:31.667
I think.

00:02:31.667 --> 00:02:33.500
Millimeters of mercury,
something like that.

00:02:33.500 --> 00:02:34.760
MATT SULLIVAN: I'm from Europe,
so I think it's millimeters.

00:02:34.760 --> 00:02:35.290
ANDREW BROGDON: There you go.

00:02:35.290 --> 00:02:37.030
MATT SULLIVAN: I could be wrong.

00:02:37.030 --> 00:02:38.571
ANDREW BROGDON: It's
been a long time

00:02:38.571 --> 00:02:39.870
since I was a physics major.

00:02:39.870 --> 00:02:40.934
All right, so let's--

00:02:40.934 --> 00:02:43.350
I'm going to switch over to--
because we a guide for this.

00:02:43.350 --> 00:02:45.280
We have a guide for
doing platform channels--

00:02:45.280 --> 00:02:48.450
flutter.io/platform-channels.

00:02:48.450 --> 00:02:52.159
And I have done a little bit of
platform channels work before.

00:02:52.159 --> 00:02:53.950
I started on the mobile
ads team of course,

00:02:53.950 --> 00:02:55.491
and so I've done a
little bit of work

00:02:55.491 --> 00:02:57.690
on the Firebase AdMob
plugin for Flutter.

00:02:57.690 --> 00:02:59.940
The problem there is that
I didn't set that up,

00:02:59.940 --> 00:03:01.027
and I was just sort of--

00:03:01.027 --> 00:03:02.610
when you come a long
way to a project,

00:03:02.610 --> 00:03:04.068
and you've just
adding to something

00:03:04.068 --> 00:03:06.030
that already works,
and it's already

00:03:06.030 --> 00:03:07.470
been architected for you.

00:03:07.470 --> 00:03:10.230
Here, that's not the case,
so we'll have that journey

00:03:10.230 --> 00:03:10.980
to go on together.

00:03:14.580 --> 00:03:17.040
So the guide here has
some good explanation

00:03:17.040 --> 00:03:18.330
of how platform channels work.

00:03:18.330 --> 00:03:20.920
I'm not going to
go into that here,

00:03:20.920 --> 00:03:22.959
but I do suggest
giving it a read.

00:03:22.959 --> 00:03:25.500
Even if you don't really intend
to make a package of your own

00:03:25.500 --> 00:03:26.580
or a plugin of your
own, it's still good

00:03:26.580 --> 00:03:28.580
to know about method
channels and how they work.

00:03:31.180 --> 00:03:32.360
But let's go down here.

00:03:32.360 --> 00:03:36.840
So first thing I need to do
is actually create a plugin.

00:03:36.840 --> 00:03:37.590
MATT SULLIVAN: OK.

00:03:40.882 --> 00:03:42.840
So we can do this from
the Flutter command line

00:03:42.840 --> 00:03:44.500
app, command line app.

00:03:44.500 --> 00:03:45.000
Right?

00:03:45.000 --> 00:03:46.606
ANDREW BROGDON: Mm-hmm.

00:03:46.606 --> 00:03:48.980
And I know there's creating
a plugin down here somewhere.

00:03:48.980 --> 00:03:50.938
MATT SULLIVAN: Yeah,
there's creating a package

00:03:50.938 --> 00:03:53.160
and creating a plugin, and
they're two different--

00:03:53.160 --> 00:03:55.112
they're two different steps.

00:03:55.112 --> 00:03:56.820
ANDREW BROGDON: Create
a new app project.

00:03:56.820 --> 00:04:02.520
Create a-- I'm looking
at the wrong guide.

00:04:02.520 --> 00:04:06.700
I don't-- so that's fun.

00:04:06.700 --> 00:04:10.040
We've already hit
our first problem.

00:04:10.040 --> 00:04:11.020
Hold on one second.

00:04:11.020 --> 00:04:15.560
It's Flutter, Create, and then
there's a dash dash template

00:04:15.560 --> 00:04:17.519
that you use.

00:04:17.519 --> 00:04:19.079
Developing Packages
and Plugins--

00:04:19.079 --> 00:04:19.600
there we go.

00:04:19.600 --> 00:04:24.490
So separate guide,
flutter.io/developing-packages,

00:04:24.490 --> 00:04:25.525
and here we go.

00:04:25.525 --> 00:04:27.150
All right, so there's
packages, and I'm

00:04:27.150 --> 00:04:28.358
interested in doing a plugin.

00:04:28.358 --> 00:04:30.270
So I do Flutter Create.

00:04:30.270 --> 00:04:35.460
I give it an org, a
template, and a name.

00:04:35.460 --> 00:04:36.270
OK.

00:04:36.270 --> 00:04:38.970
So what do we put
our org down as?

00:04:38.970 --> 00:04:41.530
Do we have an org?

00:04:41.530 --> 00:04:43.175
Com dot or IO.Flutter, maybe?

00:04:43.175 --> 00:04:44.300
Are we allowed to use that?

00:04:44.300 --> 00:04:44.841
I don't know.

00:04:44.841 --> 00:04:46.161
MATT SULLIVAN: I'm not sure.

00:04:46.161 --> 00:04:47.410
We can always change it later.

00:04:47.410 --> 00:04:47.920
ANDREW BROGDON:
Yeah, that's true.

00:04:47.920 --> 00:04:49.290
MATT SULLIVAN: So let's
just go for IO.Flutter.

00:04:49.290 --> 00:04:49.560
See how it goes.

00:04:49.560 --> 00:04:50.220
ANDREW BROGDON: There we go.

00:04:50.220 --> 00:04:51.428
All right, so Flutter Create.

00:04:51.428 --> 00:04:55.500
I'm just going to grab
this, add to my template.

00:04:55.500 --> 00:04:56.490
Open a terminal here.

00:04:59.500 --> 00:05:03.990
MATT SULLIVAN: Handy tip if you
are ever creating a Flutter app

00:05:03.990 --> 00:05:07.590
that you want to release onto
the Play Store or the App

00:05:07.590 --> 00:05:09.180
Store.

00:05:09.180 --> 00:05:13.074
Always set your org initially
because you can change it

00:05:13.074 --> 00:05:14.490
afterwards, but
you have to search

00:05:14.490 --> 00:05:19.770
through a whole bunch of Android
and iOS templates and XML files

00:05:19.770 --> 00:05:20.490
and whatnot.

00:05:20.490 --> 00:05:22.140
And there is always
one that you will

00:05:22.140 --> 00:05:24.660
forget to update it and spend
hours trying to work out why

00:05:24.660 --> 00:05:25.610
your stuff isn't compiling--

00:05:25.610 --> 00:05:26.985
ANDREW BROGDON:
Because it's been

00:05:26.985 --> 00:05:28.559
base 64 encoded or something.

00:05:28.559 --> 00:05:30.850
MATT SULLIVAN: I've managed
to do it a couple of times,

00:05:30.850 --> 00:05:31.954
but it's not pleasant.

00:05:31.954 --> 00:05:34.370
ANDREW BROGDON: That's why
you have to learn [INAUDIBLE],,

00:05:34.370 --> 00:05:34.870
right.

00:05:34.870 --> 00:05:36.060
It's like the--

00:05:36.060 --> 00:05:39.040
MATT SULLIVAN: Your Linux-fu is
far stronger than my Linux-fu.

00:05:39.040 --> 00:05:41.123
ANDREW BROGDON: I didn't
say I knew how to use it.

00:05:41.123 --> 00:05:43.080
I just know that it exists.

00:05:43.080 --> 00:05:44.960
All right, so I
ran Flutter Create,

00:05:44.960 --> 00:05:46.860
and this is going to
use one of the templates

00:05:46.860 --> 00:05:52.897
to spit out sort of a
example project for our--

00:05:52.897 --> 00:05:53.980
let's take a look at this.

00:05:53.980 --> 00:05:57.030
So I've got-- let's see-- lib.

00:05:57.030 --> 00:05:58.550
I've got an example made for me.

00:05:58.550 --> 00:05:59.490
That's pretty cool.

00:05:59.490 --> 00:06:02.550
iOS and Android, which is
where the native code will go

00:06:02.550 --> 00:06:05.100
for this plugin.

00:06:05.100 --> 00:06:05.905
And--

00:06:05.905 --> 00:06:07.530
MATT SULLIVAN: So
the interesting thing

00:06:07.530 --> 00:06:09.450
I discovered when I
first wrote my plugin is

00:06:09.450 --> 00:06:12.480
that the plugin can get built
inside the main project,

00:06:12.480 --> 00:06:15.540
but you use the example
then to build an app, which

00:06:15.540 --> 00:06:17.269
we'll use it to try it out.

00:06:17.269 --> 00:06:18.060
ANDREW BROGDON: OK.

00:06:18.060 --> 00:06:22.560
MATT SULLIVAN: It's-- just need
to remember not to intermix

00:06:22.560 --> 00:06:23.480
those two pieces.

00:06:23.480 --> 00:06:24.520
ANDREW BROGDON: OK.

00:06:24.520 --> 00:06:26.700
So let me pull up
IntelliJ then, and I'm

00:06:26.700 --> 00:06:28.020
going to import this project?

00:06:28.020 --> 00:06:28.936
MATT SULLIVAN: Mm-hmm.

00:06:38.210 --> 00:06:40.890
ANDREW BROGDON: Create
from existing sources.

00:06:40.890 --> 00:06:43.502
There we go.

00:06:43.502 --> 00:06:44.710
I would like to overwrite it.

00:06:47.972 --> 00:06:52.100
And got some Android stuff in
here, which I would expect.

00:06:56.170 --> 00:06:57.310
And we dupe that.

00:06:57.310 --> 00:07:00.000
So that will give me
a Flutter project,

00:07:00.000 --> 00:07:04.520
and it'll know about
my Android source.

00:07:08.840 --> 00:07:13.520
And the manifests--
let me turn those off.

00:07:13.520 --> 00:07:17.750
Some of the nuances of using
IntelliJ I don't have down yet,

00:07:17.750 --> 00:07:19.700
especially for stuff
like this, because you

00:07:19.700 --> 00:07:23.212
have all these sub-projects
to your projects going.

00:07:23.212 --> 00:07:25.670
MATT SULLIVAN: So what has that
given us to start off with?

00:07:25.670 --> 00:07:27.420
ANDREW BROGDON: So let
me see what we got.

00:07:27.420 --> 00:07:29.340
So we have-- cool.

00:07:29.340 --> 00:07:31.700
Do I get actual
source-- oh, I do.

00:07:31.700 --> 00:07:32.460
Awesome.

00:07:32.460 --> 00:07:33.590
OK.

00:07:33.590 --> 00:07:35.360
So let's see what I got here.

00:07:35.360 --> 00:07:37.290
Let me close that back up.

00:07:37.290 --> 00:07:42.310
So I've got a lib, just like
I would with any package.

00:07:42.310 --> 00:07:44.546
This is the main
file for my package.

00:07:44.546 --> 00:07:46.670
MATT SULLIVAN: Except the
one thing it doesn't have

00:07:46.670 --> 00:07:48.860
is a main function, because
this can never be executed--

00:07:48.860 --> 00:07:49.680
ANDREW BROGDON: That's true.

00:07:49.680 --> 00:07:50.720
MATT SULLIVAN: --which
is why it's not main.

00:07:50.720 --> 00:07:52.640
ANDREW BROGDON: There you go.

00:07:52.640 --> 00:07:54.610
So this is just going
to export some things.

00:07:54.610 --> 00:07:56.340
It's got its own pubspec.

00:07:56.340 --> 00:07:57.890
Let me make this
a little bigger.

00:07:57.890 --> 00:07:59.223
MATT SULLIVAN: Oh, look at that.

00:07:59.223 --> 00:08:00.737
It's got a Flutter plugin.

00:08:00.737 --> 00:08:03.070
It's got the Android package,
it's got the plugin class.

00:08:03.070 --> 00:08:03.960
Nice.

00:08:03.960 --> 00:08:05.460
ANDREW BROGDON: And
so this, I know,

00:08:05.460 --> 00:08:07.092
is worth paying attention to.

00:08:07.092 --> 00:08:09.550
So you have classes-- on the
other end, you have Dart code,

00:08:09.550 --> 00:08:13.820
and it's going to be sending
messages to Java or iOS code.

00:08:13.820 --> 00:08:16.280
And you have to have some way
of knowing what to go look

00:08:16.280 --> 00:08:17.910
for when Dart's
like, hey, I gotta

00:08:17.910 --> 00:08:20.980
go find somebody to listen
to me on the native side.

00:08:20.980 --> 00:08:23.720
And so I believe, on Android,
it's going to be looking

00:08:23.720 --> 00:08:26.660
for
io.flutter.barometer.barometer

00:08:26.660 --> 00:08:27.447
plugin--

00:08:27.447 --> 00:08:29.030
that's the name of
the class that it's

00:08:29.030 --> 00:08:31.130
going to be looking for
on the Android side.

00:08:31.130 --> 00:08:35.299
MATT SULLIVAN: It's going to be
looking in the Android package.

00:08:35.299 --> 00:08:38.720
You're already going to have
a template for the plugin.

00:08:38.720 --> 00:08:42.551
So you've got
java.io.flutter.barometer.

00:08:42.551 --> 00:08:44.300
ANDREW BROGDON: Let
me set up an SDK here.

00:08:47.760 --> 00:08:50.680
Do you think that will make
all the ugly lines go away?

00:08:50.680 --> 00:08:54.550
Maybe not-- interesting.

00:08:54.550 --> 00:08:56.180
All right.

00:08:56.180 --> 00:08:58.970
So I do have Java in
here, even though IntelliJ

00:08:58.970 --> 00:09:01.897
is having trouble finding it.

00:09:01.897 --> 00:09:02.891
Interesting.

00:09:05.990 --> 00:09:07.977
Looks like it's using
a different path--

00:09:07.977 --> 00:09:09.435
open for editing
in Android Studio.

00:09:12.920 --> 00:09:15.077
So we can come back
to that in a second.

00:09:15.077 --> 00:09:16.910
But this is the Java
code that's going to be

00:09:16.910 --> 00:09:18.860
listening on the other end.

00:09:18.860 --> 00:09:24.050
And so it's got barometer
plugin and flutter.io.barometer,

00:09:24.050 --> 00:09:24.830
so those match.

00:09:24.830 --> 00:09:28.250
What's in my pubspec
matches the class name

00:09:28.250 --> 00:09:31.160
that it's looking for on here.

00:09:35.444 --> 00:09:36.517
Interesting.

00:09:36.517 --> 00:09:37.350
MATT SULLIVAN: Yeah.

00:09:37.350 --> 00:09:42.690
So you need to be careful with
this because there's the plugin

00:09:42.690 --> 00:09:44.879
and there's the
example app as well.

00:09:44.879 --> 00:09:47.170
And I've made that mistake
of getting confused by that.

00:09:52.680 --> 00:09:54.776
ANDREW BROGDON: As
always, it's an adventure

00:09:54.776 --> 00:09:55.650
on "The Boring Show."

00:09:58.300 --> 00:10:00.620
So I know that--

00:10:00.620 --> 00:10:03.590
the files gotta work, so let's
go back here for a second.

00:10:03.590 --> 00:10:07.790
I can always pull this open in
a text editor and mess with it.

00:10:07.790 --> 00:10:10.400
Let me make sure I can
build this and it works.

00:10:10.400 --> 00:10:14.964
So that's always a good thing--
if you can just build it right

00:10:14.964 --> 00:10:16.130
out of the box and it works.

00:10:19.455 --> 00:10:21.830
MATT SULLIVAN: Is it getting
confused because the path is

00:10:21.830 --> 00:10:23.480
java.io.flutter.barometer?

00:10:23.480 --> 00:10:25.476
ANDREW BROGDON: I think
maybe that's the deal.

00:10:25.476 --> 00:10:26.850
And there's some
setting in here,

00:10:26.850 --> 00:10:31.245
now, where it's expecting
class packages to follow that.

00:10:31.245 --> 00:10:32.870
MATT SULLIVAN: The
other thing that you

00:10:32.870 --> 00:10:35.720
might want to do is if
you want to use Kotlin,

00:10:35.720 --> 00:10:39.291
make sure to specify Kotlin when
you're doing Flutter create.

00:10:39.291 --> 00:10:41.540
ANDREW BROGDON: Oh, that's
right-- it's a command line

00:10:41.540 --> 00:10:43.062
switch.

00:10:43.062 --> 00:10:44.770
MATT SULLIVAN: We can
manually change it.

00:10:44.770 --> 00:10:51.420
It's easy enough to add Kotlin
to a Java-based Android app,

00:10:51.420 --> 00:10:55.070
but it's easier just to get it
set up from the very beginning

00:10:55.070 --> 00:10:56.450
if you want to use Kotlin.

00:10:56.450 --> 00:10:59.163
And the same goes for Swift or
Objective-C on the iOS side.

00:11:05.790 --> 00:11:07.590
So this won't run as
standalone, right--

00:11:07.590 --> 00:11:09.494
because this is a plugin?

00:11:09.494 --> 00:11:10.410
ANDREW BROGDON: Right.

00:11:10.410 --> 00:11:12.240
So it's not really meant to--

00:11:12.240 --> 00:11:14.310
MATT SULLIVAN: So this
is going to compile--

00:11:14.310 --> 00:11:16.330
ANDREW BROGDON: The
example app you can run,

00:11:16.330 --> 00:11:18.210
and then that will
run your package.

00:11:18.210 --> 00:11:20.679
Just like somebody
consuming it, they

00:11:20.679 --> 00:11:23.220
have their own app that's going
to run, and in their pubspec,

00:11:23.220 --> 00:11:24.720
they would reference
this package

00:11:24.720 --> 00:11:26.130
and get the code that way.

00:11:26.130 --> 00:11:27.060
MATT SULLIVAN: So the
way I played with this

00:11:27.060 --> 00:11:29.980
before is I've actually had two
IDs open-- one for my plugin,

00:11:29.980 --> 00:11:32.495
and then one for my example--
and I can flip between the two

00:11:32.495 --> 00:11:34.730
and do the changes in the test.

00:11:34.730 --> 00:11:37.140
It might not be the
ideal way, but I

00:11:37.140 --> 00:11:40.410
was using Visual Studio
Code for my Flutter app,

00:11:40.410 --> 00:11:42.660
and I was using the Android
Studio for the Android

00:11:42.660 --> 00:11:43.470
side of things.

00:11:43.470 --> 00:11:45.165
I haven't written an iOS plugin.

00:11:45.165 --> 00:11:46.460
[LAUGHING]

00:11:46.460 --> 00:11:48.570
ANDREW BROGDON: That'll be fun.

00:11:48.570 --> 00:11:51.790
I did some iOS stuff,
again, for the AdMob one,

00:11:51.790 --> 00:11:54.530
but that was about it--

00:11:54.530 --> 00:11:56.530
I didn't have to set it
all up at the beginning.

00:11:56.530 --> 00:11:58.613
So the example straight
out of the box, I believe,

00:11:58.613 --> 00:12:01.980
is just checking the
platform version.

00:12:01.980 --> 00:12:06.470
And that's all it's doing,
assuming that this didn't just

00:12:06.470 --> 00:12:09.290
hang up on me.

00:12:09.290 --> 00:12:11.740
MATT SULLIVAN: What
does the example show--

00:12:11.740 --> 00:12:13.854
that is main?

00:12:13.854 --> 00:12:15.020
Is that what you're running?

00:12:16.460 --> 00:12:18.960
ANDREW BROGDON: It looks like
I have a lot of Flutter stuff.

00:12:18.960 --> 00:12:20.210
We've done a lot of episodes--

00:12:20.210 --> 00:12:21.791
I got all this stuff
on my emulator.

00:12:24.437 --> 00:12:25.865
Let's stop over here--

00:12:25.865 --> 00:12:26.740
let's try that again.

00:12:34.050 --> 00:12:36.587
MATT SULLIVAN: So IntelliJ is
your id of choice for Flutter?

00:12:36.587 --> 00:12:37.462
ANDREW BROGDON: Yeah.

00:12:37.462 --> 00:12:39.980
I feel like I need to
know one reasonably well.

00:12:44.757 --> 00:12:46.219
There we go-- so it's running.

00:12:46.219 --> 00:12:47.010
MATT SULLIVAN: Cool

00:12:47.010 --> 00:12:49.685
ANDREW BROGDON: We got it
running on Android 8.1.0.

00:12:49.685 --> 00:12:51.496
MATT SULLIVAN:
Wait, where is Pi?

00:12:51.496 --> 00:12:52.370
[LAUGHING]

00:12:52.370 --> 00:12:54.220
ANDREW BROGDON: I
have Pi in my pixel.

00:12:54.220 --> 00:12:56.840
I haven't downloaded the new--

00:12:56.840 --> 00:13:01.590
I haven't downloaded the
new emulator images, though,

00:13:01.590 --> 00:13:03.500
so I'm a little
behind the times here.

00:13:03.500 --> 00:13:05.000
MATT SULLIVAN: How
would people like

00:13:05.000 --> 00:13:07.940
to watch us download emulator
images for the last 15 minutes?

00:13:07.940 --> 00:13:09.892
[LAUGHING]

00:13:09.892 --> 00:13:12.680
ANDREW BROGDON: Just go in the
back and make a protein shake--

00:13:12.680 --> 00:13:15.650
vacuum and clean
up the studio here.

00:13:15.650 --> 00:13:18.380
OK, so we have we have code
that's running, so that's good.

00:13:18.380 --> 00:13:20.337
And our example--
getting back to what

00:13:20.337 --> 00:13:22.420
we were supposed to be
talking about a second ago.

00:13:22.420 --> 00:13:23.810
So our example here is main.

00:13:27.182 --> 00:13:28.640
And I'm going to
make this bigger--

00:13:28.640 --> 00:13:29.925
get rid of you.

00:13:29.925 --> 00:13:33.500
So I have a stateful
widget that's in its state.

00:13:33.500 --> 00:13:35.750
So it's got this
initPlatformState() that

00:13:35.750 --> 00:13:40.002
it's calling, and that
is going in to get--

00:13:40.002 --> 00:13:41.960
MATT SULLIVAN: That's
using your plugin, right?

00:13:41.960 --> 00:13:43.220
ANDREW BROGDON: Yes.

00:13:43.220 --> 00:13:45.140
So that's going into my plugin.

00:13:45.140 --> 00:13:46.520
MATT SULLIVAN: And everything
coming out of the plugin

00:13:46.520 --> 00:13:47.894
is probably going
to be a future,

00:13:47.894 --> 00:13:53.420
because all communication
from Dart to platform specific

00:13:53.420 --> 00:13:54.522
is always asynchronous.

00:13:54.522 --> 00:13:56.980
ANDREW BROGDON: Because you're
always on different threads,

00:13:56.980 --> 00:13:59.510
and you're not going to
want to block the Flutter

00:13:59.510 --> 00:14:01.370
thread while you wait
for some "goodness

00:14:01.370 --> 00:14:03.735
knows how long this will
take" platform message.

00:14:03.735 --> 00:14:05.735
That's a good way to give
your app the stutters.

00:14:09.449 --> 00:14:11.990
MATT SULLIVAN: And it's using
set state, then, just to output

00:14:11.990 --> 00:14:13.970
the--

00:14:13.970 --> 00:14:18.380
and this will work equally
well on the iOS simulator,

00:14:18.380 --> 00:14:25.310
because I'm sure it gives us the
same boiler plate in, probably,

00:14:25.310 --> 00:14:27.961
Objective-C.

00:14:27.961 --> 00:14:29.960
ANDREW BROGDON: Can I
drill down right into this

00:14:29.960 --> 00:14:32.780
to get to my plug--
ooh, that's nice.

00:14:32.780 --> 00:14:34.850
So here's the plugin code.

00:14:34.850 --> 00:14:37.550
And so here, it's
defining a method channel

00:14:37.550 --> 00:14:40.100
with the same name as
the plugin, right there.

00:14:40.100 --> 00:14:41.830
MATT SULLIVAN: The
method channel is--

00:14:41.830 --> 00:14:43.760
I think the name is
purely optional-- you

00:14:43.760 --> 00:14:44.690
can call it anything.

00:14:44.690 --> 00:14:46.220
ANDREW BROGDON: And so
it's sort of just a string

00:14:46.220 --> 00:14:47.200
identifier, right?

00:14:47.200 --> 00:14:48.956
MATT SULLIVAN: Yep.

00:14:48.956 --> 00:14:50.330
ANDREW BROGDON:
And then here, it

00:14:50.330 --> 00:14:53.000
has one getter that's
returning a future--

00:14:53.000 --> 00:14:58.730
and it's also static, and that's
returning the string that comes

00:14:58.730 --> 00:15:01.430
back from getPlatformVersion.

00:15:01.430 --> 00:15:04.360
So it's using the
method channel to invoke

00:15:04.360 --> 00:15:07.160
a method by name
with no arguments,

00:15:07.160 --> 00:15:08.120
as far as I can tell.

00:15:08.120 --> 00:15:09.460
MATT SULLIVAN: Yep.

00:15:09.460 --> 00:15:10.140
ANDREW BROGDON:
And so, something

00:15:10.140 --> 00:15:11.930
has got to be listening
on the other end.

00:15:11.930 --> 00:15:16.152
MATT SULLIVAN: So there's going
to be a Java method called--

00:15:16.152 --> 00:15:18.110
no, there's going to be
a listener where we can

00:15:18.110 --> 00:15:19.680
look at the invoke method name.

00:15:19.680 --> 00:15:22.076
And then, we can probably
call the other method on that.

00:15:22.076 --> 00:15:23.992
ANDREW BROGDON: And that
should be this, which

00:15:23.992 --> 00:15:28.290
is looking ugly right now.

00:15:28.290 --> 00:15:32.817
I almost want to open this
in another editor real quick.

00:15:36.713 --> 00:15:37.687
There we go.

00:15:42.070 --> 00:15:45.280
MATT SULLIVAN: So today so
far, we've used IntelliJ,

00:15:45.280 --> 00:15:48.230
we've fired up Android
Studio, and now we're

00:15:48.230 --> 00:15:49.400
firing up Sublime Text.

00:15:49.400 --> 00:15:50.590
[LAUGHING]

00:15:50.590 --> 00:15:52.817
Vote for Andrew to fire up Atom.

00:15:52.817 --> 00:15:55.560
Vim I would personally
vote for, myself.

00:15:58.597 --> 00:15:59.680
So what does it look like?

00:15:59.680 --> 00:16:00.080
We have--

00:16:00.080 --> 00:16:00.950
ANDREW BROGDON: We have Emacs.

00:16:00.950 --> 00:16:01.660
MATT SULLIVAN: Ooh, Emacs.

00:16:01.660 --> 00:16:03.520
No, Vim-- let's start
that argument, shall we?

00:16:03.520 --> 00:16:03.840
ANDREW BROGDON: OK.

00:16:03.840 --> 00:16:05.380
[LAUGHING] So here's
the Java code,

00:16:05.380 --> 00:16:07.660
as it stands, open
in our other editor.

00:16:07.660 --> 00:16:12.680
And so here, we have a barometer
plugin class in the package io

00:16:12.680 --> 00:16:14.050
Flutter barometer.

00:16:14.050 --> 00:16:18.610
And so, this has a static
method called registerWith.

00:16:18.610 --> 00:16:21.720
And this, I think, is the
entry point for the plugin.

00:16:21.720 --> 00:16:25.460
So this gets called
before anything else.

00:16:25.460 --> 00:16:27.980
It says get yourself ready so
I can send you method channel

00:16:27.980 --> 00:16:28.350
calls.

00:16:28.350 --> 00:16:28.720
MATT SULLIVAN: Yeah.

00:16:28.720 --> 00:16:30.190
If you look at your
example, you're

00:16:30.190 --> 00:16:33.790
probably going to be
calling that registerWith

00:16:33.790 --> 00:16:35.104
at some point.

00:16:35.104 --> 00:16:37.020
ANDREW BROGDON: I think
the engine calls this.

00:16:37.020 --> 00:16:38.640
MATT SULLIVAN: Will
the engine call it?

00:16:38.640 --> 00:16:40.890
ANDREW BROGDON: We're going
to talk with Chinmay later

00:16:40.890 --> 00:16:44.020
in our guest segment, and he'll
have some details on this,

00:16:44.020 --> 00:16:46.447
because I think he
wrote some of it.

00:16:46.447 --> 00:16:48.280
MATT SULLIVAN: But we
have a method channel.

00:16:48.280 --> 00:16:51.130
We're registering the method
channel called barometer.

00:16:51.130 --> 00:16:52.795
And then, we're going to have--

00:16:52.795 --> 00:16:55.780
ANDREW BROGDON: And so,
that matches back over here.

00:16:55.780 --> 00:16:59.410
So in our example in our--

00:16:59.410 --> 00:17:00.820
those strings match.

00:17:00.820 --> 00:17:08.550
MATT SULLIVAN: But if you
look at your example project,

00:17:08.550 --> 00:17:10.300
in the Android
piece, there's going

00:17:10.300 --> 00:17:13.660
to be some Android code which--

00:17:13.660 --> 00:17:14.380
is there.

00:17:14.380 --> 00:17:16.555
ANDREW BROGDON: In the
example app itself?

00:17:18.724 --> 00:17:21.099
MATT SULLIVAN: Actually, no,
there won't because there is

00:17:21.099 --> 00:17:22.697
nothing happening on this side.

00:17:22.697 --> 00:17:25.030
ANDREW BROGDON: So we have
we have Java from the packet.

00:17:25.030 --> 00:17:26.230
We have the plug in itself.

00:17:26.230 --> 00:17:28.402
That's going to provide the
functionality that we're

00:17:28.402 --> 00:17:29.610
looking for on the Java side.

00:17:29.610 --> 00:17:29.670
MATT SULLIVAN: Yes.

00:17:29.670 --> 00:17:32.420
And we don't need to access any
of the platform-specific stuff

00:17:32.420 --> 00:17:34.030
in our example
project, because that's

00:17:34.030 --> 00:17:35.071
being done on the plugin.

00:17:35.071 --> 00:17:36.130
ANDREW BROGDON: Right.

00:17:36.130 --> 00:17:39.940
Ideally, the plugin will
abstract and encapsulate

00:17:39.940 --> 00:17:43.690
that whole mess, and just give
you a nice nice, clean Dart

00:17:43.690 --> 00:17:44.290
interface.

00:17:48.960 --> 00:17:51.712
So let's go back to--

00:17:51.712 --> 00:17:53.170
MATT SULLIVAN: So
if you were to go

00:17:53.170 --> 00:17:59.260
into your BarometerPlugin.java,
we could easily create a dummy

00:17:59.260 --> 00:18:02.510
method, which would be
return get barometer reading,

00:18:02.510 --> 00:18:07.450
or get height of mercury, or--

00:18:07.450 --> 00:18:09.585
I don't have a major
in physics, so you're

00:18:09.585 --> 00:18:10.950
going to have to fill in here.

00:18:10.950 --> 00:18:11.070
[LAUGHING]

00:18:11.070 --> 00:18:12.319
I've got high school physics--

00:18:12.319 --> 00:18:14.284
how does that sound?

00:18:14.284 --> 00:18:15.700
ANDREW BROGDON:
The on method call

00:18:15.700 --> 00:18:18.820
is what gets called when
Dart comes a knocking.

00:18:18.820 --> 00:18:21.430
It's like, hey, I have a method
that I want you to go execute,

00:18:21.430 --> 00:18:22.620
and tell me the result.

00:18:22.620 --> 00:18:23.830
MATT SULLIVAN: And you're going
to have some sort of switch

00:18:23.830 --> 00:18:27.100
statement which will check to
see what the name of the method

00:18:27.100 --> 00:18:27.610
is, right?

00:18:27.610 --> 00:18:29.526
ANDREW BROGDON: Which
we kind of do right now.

00:18:29.526 --> 00:18:31.910
We have this there.

00:18:31.910 --> 00:18:34.090
And so, I can add a
method here, and I

00:18:34.090 --> 00:18:35.810
think I can have this
be whatever I want.

00:18:35.810 --> 00:18:37.875
So I can just be like, string--

00:18:37.875 --> 00:18:40.930
or-- what is it--

00:18:40.930 --> 00:18:43.300
MATT SULLIVAN: Double-- float?

00:18:43.300 --> 00:18:45.762
I can't believe I've
forgotten all my Java.

00:18:45.762 --> 00:18:47.470
ANDREW BROGDON: It
only took four months.

00:18:47.470 --> 00:18:48.690
[LAUGHING]

00:18:48.690 --> 00:18:50.759
And we can just have it return--

00:18:50.759 --> 00:18:53.050
do you know what an appropriate
barometric pressure is?

00:18:53.050 --> 00:18:53.675
I have no idea.

00:18:56.830 --> 00:19:00.930
MATT SULLIVAN: Like,
79 milliliters.

00:19:00.930 --> 00:19:04.030
ANDREW BROGDON:
79-- there we go.

00:19:04.030 --> 00:19:05.830
And then, we can
come down here--

00:19:05.830 --> 00:19:11.096
we could say if that
equals(getBarometer).

00:19:14.479 --> 00:19:16.520
I'm going to make it the
same name as the method,

00:19:16.520 --> 00:19:19.020
but this can be almost
anything want it to.

00:19:19.020 --> 00:19:28.070
If I was coding badly,
I could say double--

00:19:28.070 --> 00:19:31.690
actually, reading--
let's be scientific.

00:19:31.690 --> 00:19:34.480
getBarometer, just like that.

00:19:34.480 --> 00:19:35.439
And then, I could say--

00:19:35.439 --> 00:19:36.896
MATT SULLIVAN:
You're going to want

00:19:36.896 --> 00:19:38.290
to put that result.success.

00:19:38.290 --> 00:19:41.350
And can we put any type
in there, I wonder?

00:19:41.350 --> 00:19:43.970
Because you can
return primitive--

00:19:43.970 --> 00:19:44.470
here we go.

00:19:44.470 --> 00:19:45.670
What kind of types
can you return--

00:19:45.670 --> 00:19:46.930
ANDREW BROGDON: That's
a very good question.

00:19:46.930 --> 00:19:49.096
So let's do a little platform
channels for a second.

00:19:49.096 --> 00:19:52.480
Because I've seen
this-- there's a table--

00:19:52.480 --> 00:19:53.774
right there.

00:19:53.774 --> 00:19:55.810
[INAUDIBLE] this up so
everybody can see it.

00:19:55.810 --> 00:20:00.070
So there's no shared
memory between Dart

00:20:00.070 --> 00:20:02.020
and the native side.

00:20:02.020 --> 00:20:04.750
MATT SULLIVAN: So when you talk
about multiple threads in dart,

00:20:04.750 --> 00:20:07.070
they're not actually
threads, they're isolates.

00:20:07.070 --> 00:20:09.310
And isolates no shared memory--

00:20:09.310 --> 00:20:10.450
everything is completely--

00:20:10.450 --> 00:20:12.870
ANDREW BROGDON: Hence
the time, isolate.

00:20:12.870 --> 00:20:15.640
And so, all of the
data that you're

00:20:15.640 --> 00:20:17.015
going to send to
the native side,

00:20:17.015 --> 00:20:18.723
and all the data you're
going to get back

00:20:18.723 --> 00:20:20.200
has to be in these
method channel

00:20:20.200 --> 00:20:21.900
calls-- that's how it happens.

00:20:21.900 --> 00:20:24.430
And so, there's a
table of translation

00:20:24.430 --> 00:20:28.450
here for if you give a method
channel this Dart type,

00:20:28.450 --> 00:20:32.440
it'll get spat out on the
other side as this Java type

00:20:32.440 --> 00:20:34.669
or this iOS type.

00:20:34.669 --> 00:20:37.210
MATT SULLIVAN: So we've got maps
and lists at a higher level,

00:20:37.210 --> 00:20:39.610
but we have all of the
different types of--

00:20:39.610 --> 00:20:41.840
you know, in Dart, I
usually just go int.

00:20:41.840 --> 00:20:45.130
I don't usually use
Uint8List or int32List.

00:20:45.130 --> 00:20:47.142
ANDREW BROGDON: Mhm.

00:20:47.142 --> 00:20:48.100
This, I think, is cool.

00:20:48.100 --> 00:20:50.440
You can actually just
pass a map from Dart,

00:20:50.440 --> 00:20:52.630
and you get a hash map in Java.

00:20:52.630 --> 00:20:55.300
You don't have to
stringify things into JSON.

00:20:55.300 --> 00:20:56.981
MATT SULLIVAN: So
I could just hash--

00:20:56.981 --> 00:20:57.480
OK.

00:21:00.940 --> 00:21:03.305
ANDREW BROGDON: So we're
back-- oops-- there we go.

00:21:03.305 --> 00:21:04.240
MATT SULLIVAN: So we're
going to use a double.

00:21:04.240 --> 00:21:05.115
ANDREW BROGDON: Yeah.

00:21:05.115 --> 00:21:07.990
So let's just return
our reading like that.

00:21:11.690 --> 00:21:14.370
MATT SULLIVAN: result.success,
And if success is overloaded,

00:21:14.370 --> 00:21:16.077
take a different--

00:21:16.077 --> 00:21:17.160
ANDREW BROGDON: Oh, shoot.

00:21:21.952 --> 00:21:22.785
MATT SULLIVAN: Oops.

00:21:22.785 --> 00:21:25.201
ANDREW BROGDON: Yeah, I was
never going to get to my code.

00:21:25.201 --> 00:21:28.700
Let's put a return in there.

00:21:28.700 --> 00:21:35.480
I'll take this out for a
second, put a return in here.

00:21:35.480 --> 00:21:38.090
And in five minutes, I'm going
to be pulling up the Firebase

00:21:38.090 --> 00:21:39.930
AdMob plugin to
remember how I did

00:21:39.930 --> 00:21:41.962
this stuff three months ago.

00:21:41.962 --> 00:21:43.670
We don't have to talk
about that, though.

00:21:43.670 --> 00:21:45.210
MATT SULLIVAN: Can you use
switch statements in Java

00:21:45.210 --> 00:21:46.220
on strings?

00:21:46.220 --> 00:21:50.150
ANDREW BROGDON: You
can, but I don't

00:21:50.150 --> 00:21:54.920
because it would be case
string, and we're using this.

00:21:54.920 --> 00:21:57.560
So this would be a
string, I assume.

00:21:57.560 --> 00:22:01.170
This is all open source--
we can go look this up too,

00:22:01.170 --> 00:22:04.160
and go find out if this
method is a string or not.

00:22:04.160 --> 00:22:05.900
MATT SULLIVAN: We got
two pieces, two int

00:22:05.900 --> 00:22:07.360
statements-- two will be fine.

00:22:07.360 --> 00:22:08.570
ANDREW BROGDON: OK.

00:22:08.570 --> 00:22:11.150
So here, if call
equals getBarometer--

00:22:11.150 --> 00:22:13.470
so we could go back into our--

00:22:15.922 --> 00:22:17.213
MATT SULLIVAN: Darty Dart code.

00:22:17.213 --> 00:22:18.046
ANDREW BROGDON: Yep.

00:22:18.046 --> 00:22:23.479
And we could go in to our
plugin, and we could--

00:22:23.479 --> 00:22:24.770
we're already awaiting in here.

00:22:24.770 --> 00:22:28.752
MATT SULLIVAN: So we could
actually call a brand new--

00:22:28.752 --> 00:22:29.960
because this it's static get.

00:22:29.960 --> 00:22:32.459
You could create a brand new
getter for barometer, right?

00:22:32.459 --> 00:22:33.875
You don't need to
put it in there.

00:22:33.875 --> 00:22:36.000
ANDREW BROGDON: Yeah,
that's a good point.

00:22:38.890 --> 00:22:40.468
The magic of
cutting and pasting.

00:22:44.300 --> 00:22:50.210
barometerReading-- actually,
just call it reading.

00:22:50.210 --> 00:22:51.501
And so we're going to invoke--

00:22:51.501 --> 00:22:53.250
here, I gotta give it
the string that it's

00:22:53.250 --> 00:22:57.580
going to be looking for, so
getBarometer, which we're going

00:22:57.580 --> 00:22:58.830
to have to rename in a second.

00:22:58.830 --> 00:23:00.780
That's not going to
be a string at all.

00:23:00.780 --> 00:23:03.196
MATT SULLIVAN: And you could
probably just directly return

00:23:03.196 --> 00:23:04.479
that await statement, right?

00:23:04.479 --> 00:23:05.520
ANDREW BROGDON: Oh, yeah.

00:23:05.520 --> 00:23:07.269
Although, I might want
to put a breakpoint

00:23:07.269 --> 00:23:10.450
in here later, and that would be
a more convenient way to do it.

00:23:10.450 --> 00:23:13.301
So let's do-- oh, not a string--

00:23:13.301 --> 00:23:13.800
double.

00:23:19.975 --> 00:23:23.790
Yeah, I'm going to rename
this stuff in a second.

00:23:23.790 --> 00:23:28.030
But that should work, right?

00:23:28.030 --> 00:23:31.150
And then, we could go
up into main and say--

00:23:31.150 --> 00:23:34.600
MATT SULLIVAN: We can
go back to our example.

00:23:34.600 --> 00:23:37.170
ANDREW BROGDON: Let's just
print it to the log real quick.

00:23:43.521 --> 00:23:46.810
MATT SULLIVAN: You can do print
await, I think-- can't you?

00:23:46.810 --> 00:23:48.010
ANDREW BROGDON: Yeah.

00:23:48.010 --> 00:23:50.490
But I have to format
it, and then I--

00:23:50.490 --> 00:23:52.450
MATT SULLIVAN: My coding
shortcuts are ugly.

00:23:52.450 --> 00:23:55.660
ANDREW BROGDON: There you go.

00:23:55.660 --> 00:23:57.900
My typing is ugly right now.

00:23:57.900 --> 00:24:03.610
Reading-- that's gotta be
await, so that we actually

00:24:03.610 --> 00:24:05.340
wait for this to come back.

00:24:05.340 --> 00:24:10.150
And then, we could just
print reading because

00:24:10.150 --> 00:24:11.958
of string interpolation.

00:24:16.920 --> 00:24:17.420
All right.

00:24:17.420 --> 00:24:18.690
Let's watch this crash.

00:24:18.690 --> 00:24:20.207
[LAUGHING]

00:24:20.207 --> 00:24:21.290
MATT SULLIVAN: Such faith.

00:24:23.634 --> 00:24:25.050
So you're going
to have to build--

00:24:25.050 --> 00:24:26.580
is this going to build a
plugin at the same time

00:24:26.580 --> 00:24:27.540
if you build an example?

00:24:27.540 --> 00:24:28.914
ANDREW BROGDON:
I don't think so.

00:24:28.914 --> 00:24:31.020
Way back when I first
started, I didn't

00:24:31.020 --> 00:24:33.490
realize that hot reload was
only rebuilding the Dart code,

00:24:33.490 --> 00:24:35.614
and I didn't understand
why my Java changes weren't

00:24:35.614 --> 00:24:36.810
showing up [LAUGHING].

00:24:36.810 --> 00:24:41.070
So fun fact, hot reload
is a Dart phenomenon--

00:24:41.070 --> 00:24:46.210
it does not work with the JVM,
at least in my experience.

00:24:46.210 --> 00:24:49.680
So if you change
your platform code--

00:24:49.680 --> 00:24:53.040
which we have just done
to add that method--

00:24:53.040 --> 00:24:55.260
in the Java file
itself, you do have

00:24:55.260 --> 00:24:58.224
to do a full app rebuild
with Gradle kicking on,

00:24:58.224 --> 00:24:59.182
and all the rest of it.

00:24:59.182 --> 00:24:59.520
MATT SULLIVAN: I
don't even think

00:24:59.520 --> 00:25:01.314
you could do a full restart--

00:25:01.314 --> 00:25:03.480
ANDREW BROGDON: Because
that's not going to trigger.

00:25:03.480 --> 00:25:03.750
MATT SULLIVAN:
Because I don't think

00:25:03.750 --> 00:25:05.375
that's going to
trigger a full rebuild.

00:25:05.375 --> 00:25:09.210
So, yes, you lose the
benefits of hot reload

00:25:09.210 --> 00:25:11.807
once you start to
modify your platform--

00:25:11.807 --> 00:25:12.640
[INTERPOSING VOICES]

00:25:12.640 --> 00:25:13.860
Which kind of makes sense
because you still have to--

00:25:13.860 --> 00:25:13.974
ANDREW BROGDON: Yeah.

00:25:13.974 --> 00:25:16.432
Like, how is that going to be
that useful if you're doing--

00:25:16.432 --> 00:25:18.794
you're not doing UI at that
point, necessarily, you're--

00:25:18.794 --> 00:25:20.460
MATT SULLIVAN: I
really hope you're not.

00:25:20.460 --> 00:25:22.918
ANDREW BROGDON: --spitting out
widgets from your Java code.

00:25:22.918 --> 00:25:25.780
[LAUGHING] What
state do you keep?

00:25:25.780 --> 00:25:27.570
Oh, totally worked!

00:25:27.570 --> 00:25:29.494
MATT SULLIVAN: Oh,
look at that, 79.0.

00:25:29.494 --> 00:25:30.160
Congratulations.

00:25:30.160 --> 00:25:31.368
ANDREW BROGDON: Code victory.

00:25:34.520 --> 00:25:37.380
I'm, again, surprised my
code works on the first try--

00:25:37.380 --> 00:25:38.910
always.

00:25:38.910 --> 00:25:41.160
MATT SULLIVAN: I fear we're
going to spend the next 45

00:25:41.160 --> 00:25:43.118
minutes trying to work
out how to get barometer

00:25:43.118 --> 00:25:46.760
readings from the from
the Android platform.

00:25:46.760 --> 00:25:48.307
[LAUGHING]

00:25:48.307 --> 00:25:50.640
ANDREW BROGDON: We've forgotten
all other languages here

00:25:50.640 --> 00:25:53.050
in Dart land-- no.

00:25:53.050 --> 00:25:54.000
So let's--

00:25:54.000 --> 00:25:55.500
MATT SULLIVAN:
SensorManager awaits!

00:25:57.389 --> 00:25:59.430
ANDREW BROGDON: So let's
talk about this, though.

00:25:59.430 --> 00:26:04.500
So we want a nice, fluttery,
idiomatic interface

00:26:04.500 --> 00:26:06.750
for our barometer stuff.

00:26:06.750 --> 00:26:10.800
So do we want to have
a getter, or do we

00:26:10.800 --> 00:26:13.340
want to have a
stream of readings

00:26:13.340 --> 00:26:16.890
that you can then subscribe to?

00:26:16.890 --> 00:26:18.790
MATT SULLIVAN: Yeah,
that's a good point.

00:26:18.790 --> 00:26:22.680
If you simply want to display
a barometer reading on, say,

00:26:22.680 --> 00:26:25.530
a page that is showing the
weather which isn't live

00:26:25.530 --> 00:26:27.810
updating, one reading is fine.

00:26:27.810 --> 00:26:31.290
Let's say we were using
this to do some funky things

00:26:31.290 --> 00:26:33.060
while we're hiking.

00:26:33.060 --> 00:26:35.480
Then, you would probably not
want to use a method channel,

00:26:35.480 --> 00:26:37.920
you would want to
use an event channel.

00:26:37.920 --> 00:26:41.610
And you would want to
have on the Android side

00:26:41.610 --> 00:26:44.580
some sort of sensor
listener, which would poll

00:26:44.580 --> 00:26:46.362
the sensor every few seconds.

00:26:46.362 --> 00:26:47.820
And the event
channel will actually

00:26:47.820 --> 00:26:49.742
just give you an
open stream of data,

00:26:49.742 --> 00:26:52.200
which I think you can then just
listen to on the Dart side,

00:26:52.200 --> 00:26:53.917
and handle it through streams.

00:26:53.917 --> 00:26:55.500
So we've got a couple
of ways of doing

00:26:55.500 --> 00:26:57.240
it-- both use cases make sense.

00:26:57.240 --> 00:26:59.775
We still have to actually
access the sensor, though.

00:26:59.775 --> 00:27:00.842
[LAUGHING]

00:27:00.842 --> 00:27:02.800
But bear in mind, there's
two ways of doing it.

00:27:02.800 --> 00:27:05.080
You don't have to do the
polling on the Dart side

00:27:05.080 --> 00:27:07.204
if you want to get continuous
pieces-- you can just

00:27:07.204 --> 00:27:09.095
listen for a stream of data.

00:27:09.095 --> 00:27:10.830
And I'm not sure if the--

00:27:10.830 --> 00:27:13.770
I know things like
the GPS sensor,

00:27:13.770 --> 00:27:17.670
you can just get Android to
subscribe to the sensor data,

00:27:17.670 --> 00:27:19.280
and it will handle
the callbacks.

00:27:19.280 --> 00:27:21.510
ANDREW BROGDON: It's like sensor
listeners and things like that.

00:27:21.510 --> 00:27:22.343
MATT SULLIVAN: Yeah.

00:27:22.343 --> 00:27:24.150
I've never accessed
the barometer,

00:27:24.150 --> 00:27:26.520
so I have no idea if
you get the same--

00:27:26.520 --> 00:27:29.890
ANDREW BROGDON: The
magic of web searches.

00:27:29.890 --> 00:27:32.820
MATT SULLIVAN: Make sure you get
the right version of Android.

00:27:32.820 --> 00:27:35.850
ANDREW BROGDON: Motion sensors?

00:27:35.850 --> 00:27:37.607
Fewer devices have barometers.

00:27:37.607 --> 00:27:39.690
MATT SULLIVAN: That's
another thing we have to do.

00:27:39.690 --> 00:27:41.550
What happens when you
query a device that--

00:27:41.550 --> 00:27:43.056
ANDREW BROGDON: Humidity sensor?

00:27:43.056 --> 00:27:43.972
MATT SULLIVAN: Really?

00:27:43.972 --> 00:27:45.210
ANDREW BROGDON: What on earth?

00:27:45.210 --> 00:27:45.710
OK,

00:27:45.710 --> 00:27:47.440
MATT SULLIVAN: Rabbit hole.

00:27:47.440 --> 00:27:50.049
What are we going to do if
you run this in a phone that

00:27:50.049 --> 00:27:51.090
doesn't have a barometer?

00:27:51.090 --> 00:27:53.971
You're going to need
some way of returning--

00:27:53.971 --> 00:27:55.470
we could either
have another method,

00:27:55.470 --> 00:27:56.929
which is check for barometer.

00:27:56.929 --> 00:27:59.220
ANDREW BROGDON: Is barometer
available kind of a getter

00:27:59.220 --> 00:27:59.777
or something?

00:27:59.777 --> 00:28:00.610
MATT SULLIVAN: Yeah.

00:28:00.610 --> 00:28:05.100
But I'm not sure what happens
if an exception is thrown

00:28:05.100 --> 00:28:10.120
on the Android side of things?

00:28:10.120 --> 00:28:12.240
That's another thing
we should look at.

00:28:12.240 --> 00:28:15.450
ANDREW BROGDON: That's
a good question.

00:28:15.450 --> 00:28:17.882
MATT SULLIVAN: Because things
are completely isolated,

00:28:17.882 --> 00:28:19.340
I'm not sure what
method channels--

00:28:19.340 --> 00:28:20.540
ANDREW BROGDON: We can answer
that question right now,

00:28:20.540 --> 00:28:21.039
actually.

00:28:21.039 --> 00:28:22.667
Hold on.

00:28:22.667 --> 00:28:25.000
MATT SULLIVAN: Are you just
going to throw an exemption?

00:28:25.000 --> 00:28:26.250
ANDREW BROGDON: Yeah, why not?

00:28:28.208 --> 00:28:30.750
Argument exception.

00:28:30.750 --> 00:28:32.250
MATT SULLIVAN: You
haven't forgotten

00:28:32.250 --> 00:28:33.960
all of your Java [INAUDIBLE].

00:28:33.960 --> 00:28:34.770
ANDREW BROGDON: Well,
I got to go look.

00:28:34.770 --> 00:28:36.320
Because I'm doing
this in a text editor,

00:28:36.320 --> 00:28:37.948
I gotta go look up
the import to have.

00:28:41.772 --> 00:28:43.980
Please tell me that's actually
in Java and it's not--

00:28:43.980 --> 00:28:46.300
OK, thank god.

00:28:46.300 --> 00:28:48.322
I thought it was
like a C++ thing.

00:28:48.322 --> 00:28:54.350
So that illegal
argument exception.

00:28:59.740 --> 00:29:01.210
I assume I can do it.

00:29:06.120 --> 00:29:07.926
IllegalArgumentException.

00:29:11.750 --> 00:29:14.140
MATT SULLIVAN: There you go.

00:29:14.140 --> 00:29:16.676
ANDREW BROGDON: And let's
just put breakpoint on that

00:29:16.676 --> 00:29:17.550
and see what happens.

00:29:20.275 --> 00:29:22.691
MATT SULLIVAN: So you have to
completely stop and restart.

00:29:22.691 --> 00:29:23.566
ANDREW BROGDON: Yeah.

00:29:42.257 --> 00:29:43.340
MATT SULLIVAN: Oh, whoops.

00:29:45.776 --> 00:29:47.650
ANDREW BROGDON: If I
had done any preparation

00:29:47.650 --> 00:29:50.800
for this episode at all, I
would have a better set up.

00:29:50.800 --> 00:29:52.966
MATT SULLIVAN: We could
open it with Android Studio.

00:29:58.820 --> 00:30:00.090
Build, build, build, build.

00:30:03.790 --> 00:30:07.120
throw new
IllegalArgumentException?

00:30:07.120 --> 00:30:08.442
Dart new-- optional--

00:30:08.442 --> 00:30:10.400
ANDREW BROGDON: We may
have to take a time out.

00:30:10.400 --> 00:30:10.630
[LAUGHING]

00:30:10.630 --> 00:30:11.754
MATT SULLIVAN: --Java new--

00:30:11.754 --> 00:30:13.715
not so optional.

00:30:13.715 --> 00:30:15.090
Hashtag, should
have used Kotlin.

00:30:15.090 --> 00:30:16.298
ANDREW BROGDON: There you go.

00:30:19.990 --> 00:30:23.102
I might have to take a time out
and get my tools in order here.

00:30:23.102 --> 00:30:25.450
Double unreachable
statement-- oh, my goodness.

00:30:25.450 --> 00:30:27.241
MATT SULLIVAN: Oh, is
it checking for that?

00:30:27.241 --> 00:30:28.300
OK.

00:30:28.300 --> 00:30:30.930
One more attempt, and
then it's time out time.

00:30:37.832 --> 00:30:38.818
Fingers crossed.

00:30:42.822 --> 00:30:44.780
ANDREW BROGDON: It's only
so many lines of code

00:30:44.780 --> 00:30:45.767
I just added.

00:30:45.767 --> 00:30:47.350
MATT SULLIVAN: And
Squid you took out.

00:30:47.350 --> 00:30:48.499
[LAUGHING]

00:30:48.499 --> 00:30:49.040
There you go.

00:30:56.270 --> 00:30:58.044
And it pushes them over, and--

00:30:58.044 --> 00:30:59.460
ANDREW BROGDON:
So now, it's going

00:30:59.460 --> 00:31:01.360
to start making that call.

00:31:01.360 --> 00:31:03.344
Let's go into it.

00:31:09.300 --> 00:31:10.830
Failed to get a
platform version?

00:31:15.520 --> 00:31:16.312
Oh.

00:31:16.312 --> 00:31:18.770
MATT SULLIVAN: Oh, there's your
illegal argument exception.

00:31:18.770 --> 00:31:20.862
ANDREW BROGDON: It says
logging some stuff.

00:31:20.862 --> 00:31:22.695
MATT SULLIVAN: Failed
to handle method call.

00:31:22.695 --> 00:31:24.710
Ooh, can you wrap
that in a try except?

00:31:24.710 --> 00:31:25.640
Maybe it throws a--

00:31:25.640 --> 00:31:26.710
ANDREW BROGDON: Ah.

00:31:26.710 --> 00:31:27.400
I bet--

00:31:27.400 --> 00:31:30.710
MATT SULLIVAN: Let
me have a look.

00:31:30.710 --> 00:31:32.900
I bet this is in the docs.

00:31:32.900 --> 00:31:34.900
ANDREW BROGDON: It's
probably in Github too.

00:31:34.900 --> 00:31:36.915
Failed to handle method call.

00:31:36.915 --> 00:31:37.980
MATT SULLIVAN: Yeah.

00:31:37.980 --> 00:31:39.560
And the docs were
wrapping things,

00:31:39.560 --> 00:31:42.440
and we're looking for
on platform exception.

00:31:42.440 --> 00:31:44.670
So when we throw an exception
on the platform, side,

00:31:44.670 --> 00:31:49.940
you receive a platform
exception on the Dart side.

00:31:49.940 --> 00:31:51.410
So that's--

00:31:51.410 --> 00:31:53.743
ANDREW BROGDON: It's Java
lang IllegalArgumentException,

00:31:53.743 --> 00:31:55.700
so it got the right
one-- that's good.

00:31:55.700 --> 00:31:57.800
So let's take out
my silly code here--

00:32:00.370 --> 00:32:03.813
take this out-- don't
need you anymore.

00:32:08.000 --> 00:32:10.670
And let's go back to
looking at our sensors.

00:32:19.766 --> 00:32:21.390
MATT SULLIVAN: So
environmental sensors

00:32:21.390 --> 00:32:22.681
are the ones we're looking for.

00:32:34.044 --> 00:32:35.460
ANDREW BROGDON:
So that's the one,

00:32:35.460 --> 00:32:36.710
I think-- that's our pressure.

00:32:39.210 --> 00:32:41.877
So that's our framework.

00:32:41.877 --> 00:32:43.460
MATT SULLIVAN: So
we want to subscribe

00:32:43.460 --> 00:32:45.190
to a SensorEventListener.

00:32:48.775 --> 00:32:50.150
ANDREW BROGDON:
Oh, this is good.

00:32:50.150 --> 00:32:52.483
It looks like these have been
available for a long time,

00:32:52.483 --> 00:32:55.080
so certainly all the way
down through Flutter's API

00:32:55.080 --> 00:32:56.030
compatibility.

00:32:59.838 --> 00:33:01.290
And then, we've got some stuff.

00:33:01.290 --> 00:33:03.123
MATT SULLIVAN: I'm going
to cross my fingers

00:33:03.123 --> 00:33:06.970
and hope we don't have
to ask for permission.

00:33:06.970 --> 00:33:09.034
We could be here for a while.

00:33:09.034 --> 00:33:10.450
ANDREW BROGDON:
Although, if we're

00:33:10.450 --> 00:33:13.450
building for the latest
one, it should let

00:33:13.450 --> 00:33:14.326
us ask for it, right?

00:33:14.326 --> 00:33:16.616
MATT SULLIVAN: Yeah, but we
have to write all that code

00:33:16.616 --> 00:33:17.480
for asking.

00:33:17.480 --> 00:33:17.610
ANDREW BROGDON: OK.

00:33:17.610 --> 00:33:19.180
So SensorManager, where are you?

00:33:21.930 --> 00:33:23.693
MATT SULLIVAN:
Does your emulator

00:33:23.693 --> 00:33:26.230
emulate the barometer sensor?

00:33:26.230 --> 00:33:26.730
[LAUGHING]

00:33:26.730 --> 00:33:28.355
ANDREW BROGDON: That's
a good question.

00:33:28.355 --> 00:33:29.920
We'll find out in a hurry.

00:33:29.920 --> 00:33:33.880
So let's get SensorManager here.

00:33:33.880 --> 00:33:36.960
Actually, wait a second.

00:33:36.960 --> 00:33:38.655
Ah, look at that.

00:33:38.655 --> 00:33:40.050
MATT SULLIVAN: Cut and paste.

00:33:41.924 --> 00:33:43.840
ANDREW BROGDON: That's
where we use that type.

00:33:43.840 --> 00:33:47.640
OK, so we're going to get
assistant SensorManager,

00:33:47.640 --> 00:33:51.822
and then we're going to ask it
for a sensor of type pressure.

00:33:51.822 --> 00:33:53.280
MATT SULLIVAN: And
we're only going

00:33:53.280 --> 00:33:56.940
to want to do this when you
make the request probably,

00:33:56.940 --> 00:34:01.990
because otherwise it might fail
at bootup if the phone doesn't

00:34:01.990 --> 00:34:03.780
support barometer.

00:34:07.364 --> 00:34:09.530
ANDREW BROGDON: What did I
just cut and paste here--

00:34:09.530 --> 00:34:10.980
it's always a good
thing to know.

00:34:10.980 --> 00:34:14.020
So these will be
my privates here.

00:34:25.109 --> 00:34:27.650
And I've got SensorManager up
there, but I don't have sensor.

00:34:31.578 --> 00:34:34.033
Probably could have
guessed that one.

00:34:37.470 --> 00:34:39.570
MATT SULLIVAN: I am just
so impressed that you're

00:34:39.570 --> 00:34:44.517
coding this in a text
editor and not with--

00:34:44.517 --> 00:34:45.350
[INTERPOSING VOICES]

00:34:45.350 --> 00:34:48.600
IDE support-- I just
wish it was activated.

00:34:48.600 --> 00:34:49.179
Oh!

00:34:49.179 --> 00:34:50.137
ANDREW BROGDON: I know.

00:34:50.137 --> 00:34:52.320
I need to get our corporate
registration code.

00:34:52.320 --> 00:34:53.780
I was wait for that to pop up.

00:34:53.780 --> 00:34:55.155
MATT SULLIVAN:
Wait, Google can't

00:34:55.155 --> 00:34:56.840
afford to buy you a license?

00:34:56.840 --> 00:34:58.423
ANDREW BROGDON: We
can, I just haven't

00:34:58.423 --> 00:35:01.040
taken the 45 seconds to do it.

00:35:01.040 --> 00:35:02.850
If we have a shame
indicator on the show,

00:35:02.850 --> 00:35:04.577
now is the time to point it out.

00:35:04.577 --> 00:35:05.076
[TUBA]

00:35:05.076 --> 00:35:08.224
MATT SULLIVAN: We'll just
edit that out-- it'll be fine.

00:35:08.224 --> 00:35:10.140
ANDREW BROGDON: We do
you pay for our software

00:35:10.140 --> 00:35:10.860
here, trust me.

00:35:10.860 --> 00:35:12.186
[LAUGHING]

00:35:12.186 --> 00:35:15.150
There's quite a bit of--

00:35:15.150 --> 00:35:16.330
go back here.

00:35:16.330 --> 00:35:21.490
So in my-- get these here.

00:35:21.490 --> 00:35:24.837
So I'm going to go
get the SensorManager.

00:35:24.837 --> 00:35:27.170
MATT SULLIVAN: Welcome to the
boring SensorManager show.

00:35:29.909 --> 00:35:30.950
OK, so what are we doing?

00:35:30.950 --> 00:35:33.900
We have our SensorManager,
system service.

00:35:33.900 --> 00:35:39.300
You're looking
for type pressure.

00:35:39.300 --> 00:35:42.905
And what is that going
to do if it fails?

00:35:42.905 --> 00:35:44.700
Well, we'll find out.

00:35:44.700 --> 00:35:46.280
ANDREW BROGDON: Yeah.

00:35:46.280 --> 00:35:49.400
I did experiment with
attaching an Android debugger

00:35:49.400 --> 00:35:53.220
to the project once
it was running.

00:35:53.220 --> 00:35:55.490
And I have had that
work in the past,

00:35:55.490 --> 00:35:57.865
so I know it's possible
to be developing a plugin

00:35:57.865 --> 00:36:02.060
in IntelliJ-- not
even Android Studio--

00:36:02.060 --> 00:36:06.060
attached to Android process
and have that work out,

00:36:06.060 --> 00:36:09.140
so I know that's possible.

00:36:09.140 --> 00:36:12.220
OK, so let's stop--

00:36:12.220 --> 00:36:21.587
collaborate and listen--
in SensorManager.

00:36:21.587 --> 00:36:22.840
Am I missing anything?

00:36:22.840 --> 00:36:24.865
It's like doing interviews.

00:36:24.865 --> 00:36:29.272
MATT SULLIVAN: Well, you've
gotta register the listener.

00:36:29.272 --> 00:36:31.730
I don't know if there's a way
to get it without registering

00:36:31.730 --> 00:36:32.480
with the listener.

00:36:32.480 --> 00:36:34.094
Maybe the SensorManager has--

00:36:34.094 --> 00:36:36.010
because if you're only
going to get one value,

00:36:36.010 --> 00:36:37.840
you're going to register for
the listener and get one value,

00:36:37.840 --> 00:36:38.910
and then return the listener.

00:36:38.910 --> 00:36:40.660
ANDREW BROGDON: To
register at that point.

00:36:43.080 --> 00:36:44.996
MATT SULLIVAN: So maybe
a synchronous way of--

00:36:47.940 --> 00:36:49.620
this would be where
IDE completion

00:36:49.620 --> 00:36:50.620
would be really helpful.

00:36:50.620 --> 00:36:51.494
ANDREW BROGDON: Yeah.

00:36:51.494 --> 00:36:54.440
So there's the interface
for SensorEventListener,

00:36:54.440 --> 00:36:57.630
which I assume are these
two bits down here.

00:36:57.630 --> 00:37:00.602
Let's just make sure
that I'm able to get

00:37:00.602 --> 00:37:01.810
what I think I'm able to get.

00:37:01.810 --> 00:37:04.691
So if this doesn't
crash, then the Java code

00:37:04.691 --> 00:37:05.440
must have worked--

00:37:08.470 --> 00:37:11.912
just a fun phrase to say.

00:37:11.912 --> 00:37:13.394
Oh.

00:37:13.394 --> 00:37:16.852
There we go.

00:37:16.852 --> 00:37:34.914
[INAUDIBLE]

00:37:34.914 --> 00:37:37.080
MATT SULLIVAN: Yeah, when
you don't have hot reload,

00:37:37.080 --> 00:37:38.080
you miss it.

00:37:38.080 --> 00:37:42.520
ANDREW BROGDON: [INAUDIBLE]
cannot find symbol--

00:37:42.520 --> 00:37:43.996
SensorManager-- ah.

00:37:56.788 --> 00:37:57.772
Interesting.

00:38:12.735 --> 00:38:15.110
MATT SULLIVAN: This might be
a good point to stop and get

00:38:15.110 --> 00:38:17.080
our system set up to make--

00:38:17.080 --> 00:38:18.285
[INTERPOSING VOICES]

00:38:18.285 --> 00:38:19.160
ANDREW BROGDON: Yeah.

00:38:19.160 --> 00:38:23.640
Let's cut to our guest segment,
actually, with Chinmay.

00:38:23.640 --> 00:38:26.210
Now would be a perfect time
to do that-- that will give me

00:38:26.210 --> 00:38:29.030
a chance to get this
set up a little better,

00:38:29.030 --> 00:38:30.920
and get a little
more really good

00:38:30.920 --> 00:38:33.520
technical content for the show.

00:38:33.520 --> 00:38:34.020
So, cut?

00:38:34.020 --> 00:38:35.103
MATT SULLIVAN: Here we go.

00:38:35.103 --> 00:38:36.260
ANDREW BROGDON: All right.

00:38:36.260 --> 00:38:37.010
Hey.

00:38:37.010 --> 00:38:41.470
So I'm now here with Chinmay
from the engineering team,

00:38:41.470 --> 00:38:44.480
and he's an engineer working
on a lot of things relating

00:38:44.480 --> 00:38:47.450
to Flutter and Dart internals.

00:38:47.450 --> 00:38:49.220
So say hello to the internet.

00:38:49.220 --> 00:38:49.970
CHINMAY GARDE: Hi.

00:38:49.970 --> 00:38:51.740
[LAUGHING]

00:38:51.740 --> 00:38:54.750
I'm Chinmay, and I work on
the Flutter engine team.

00:38:54.750 --> 00:38:59.210
And so, I work on making
sure Flutter runs on

00:38:59.210 --> 00:39:00.830
as many platforms as possible.

00:39:00.830 --> 00:39:03.500
And for a person
working on Flutter,

00:39:03.500 --> 00:39:06.020
I actually don't write
too much Dart code.

00:39:06.020 --> 00:39:07.967
It's mostly C,
C++, Subjective-C.

00:39:07.967 --> 00:39:10.300
ANDREW BROGDON: You're down
in the low levels of things,

00:39:10.300 --> 00:39:10.799
right?

00:39:10.799 --> 00:39:11.840
CHINMAY GARDE: Yeah.

00:39:11.840 --> 00:39:16.615
So about three years
ago at this point,

00:39:16.615 --> 00:39:20.974
I initially brought
Flutter up on Mac and iOS.

00:39:20.974 --> 00:39:23.390
ANDREW BROGDON: Like, the very
first time you were there--

00:39:23.390 --> 00:39:24.140
when it was like--

00:39:24.140 --> 00:39:25.610
CHINMAY GARDE: Yeah.

00:39:25.610 --> 00:39:29.030
When it was called
something else,

00:39:29.030 --> 00:39:33.749
and when it only ran on Android.

00:39:33.749 --> 00:39:35.040
So I've been at it for a while.

00:39:37.880 --> 00:39:41.896
I'm new to this, so hopefully
this chat is useful and usable.

00:39:41.896 --> 00:39:42.770
ANDREW BROGDON: Cool.

00:39:42.770 --> 00:39:44.436
So this is something
like to ask people.

00:39:44.436 --> 00:39:47.690
What is something that the
public might not know that much

00:39:47.690 --> 00:39:50.180
about-- or it might not have
awareness of that you really

00:39:50.180 --> 00:39:51.104
wish they did--

00:39:51.104 --> 00:39:53.270
something that might help
them a lot that maybe they

00:39:53.270 --> 00:39:55.580
don't know about yet?

00:39:55.580 --> 00:40:02.300
CHINMAY GARDE: So the Flutter
engine and the framework

00:40:02.300 --> 00:40:06.080
has a lot of profiling,
and debugging,

00:40:06.080 --> 00:40:10.010
and instrumentation
tools that allow

00:40:10.010 --> 00:40:14.000
you to go down to the very
lowest levels of the system.

00:40:14.000 --> 00:40:18.830
And also give you a
very high level overview

00:40:18.830 --> 00:40:21.030
of what the Flutter
application is doing.

00:40:21.030 --> 00:40:25.040
And this includes stuff
like the Observatory,

00:40:25.040 --> 00:40:27.595
or the performance overlays.

00:40:30.310 --> 00:40:34.560
There a lot of debugging and
profiling tools out there,

00:40:34.560 --> 00:40:36.810
and they are documented--

00:40:36.810 --> 00:40:39.053
that I wish--

00:40:39.053 --> 00:40:39.780
[LAUGHING]

00:40:39.780 --> 00:40:44.000
--that we could do a
better job of highlighting.

00:40:44.000 --> 00:40:46.160
ANDREW BROGDON: Which
is my job, which

00:40:46.160 --> 00:40:48.932
I'm now trying to foist on you.

00:40:48.932 --> 00:40:50.390
So you mentioned
two in particular.

00:40:50.390 --> 00:40:53.060
The performance overlays--
that's something

00:40:53.060 --> 00:40:54.704
that you trigger in your code.

00:40:54.704 --> 00:40:55.370
Is that correct?

00:40:55.370 --> 00:40:56.270
CHINMAY GARDE: Yes.

00:40:56.270 --> 00:40:59.480
So when you launch a
Flutter application,

00:40:59.480 --> 00:41:05.630
you can tell the application
to throw up an overlay on top

00:41:05.630 --> 00:41:07.340
of your Flutter view.

00:41:07.340 --> 00:41:10.862
ANDREW BROGDON:
It's from system--

00:41:10.862 --> 00:41:12.070
it's like a thing you import?

00:41:12.070 --> 00:41:13.570
CHINMAY GARDE: It's
on material app.

00:41:13.570 --> 00:41:15.946
You can just say enable
performance overlays.

00:41:15.946 --> 00:41:18.070
ANDREW BROGDON: So just
one call and out they come.

00:41:18.070 --> 00:41:20.372
CHINMAY GARDE: Just one
call, just one Boolean--

00:41:20.372 --> 00:41:21.080
set that to true.

00:41:21.080 --> 00:41:24.020
And if you're not using
the material app widgets,

00:41:24.020 --> 00:41:25.880
you can add them as layers.

00:41:25.880 --> 00:41:29.569
And so, there are tons
of ways of enabling them,

00:41:29.569 --> 00:41:30.860
and all of them are super easy.

00:41:33.680 --> 00:41:35.270
ANDREW BROGDON:
And the Observatory

00:41:35.270 --> 00:41:36.350
was the other one you mentioned.

00:41:36.350 --> 00:41:38.266
CHINMAY GARDE: The
Observatory is another one.

00:41:38.266 --> 00:41:41.460
And so, every time you
launch your application

00:41:41.460 --> 00:41:46.920
in either the debugger
or the profile modes,

00:41:46.920 --> 00:41:48.800
the service protocol starts up.

00:41:48.800 --> 00:41:51.860
And the service protocol
is available via a socket

00:41:51.860 --> 00:41:53.630
on the device, which
is automatically

00:41:53.630 --> 00:41:56.090
port forwarded for you.

00:41:56.090 --> 00:41:58.529
So this doesn't happen
in the released app.

00:41:58.529 --> 00:42:01.070
ANDREW BROGDON: So it's running
on the emulator or on device,

00:42:01.070 --> 00:42:02.140
like a little server?

00:42:02.140 --> 00:42:02.973
CHINMAY GARDE: Yeah.

00:42:02.973 --> 00:42:04.880
And if you say
Flutter run, the tool

00:42:04.880 --> 00:42:06.672
is automatically
pulled forward--

00:42:06.672 --> 00:42:08.630
ANDREW BROGDON: Oh, and
it spits out that line.

00:42:08.630 --> 00:42:10.370
It's like, hey, I just
started the Observatory

00:42:10.370 --> 00:42:11.960
on port whatever, and
here's a link to it.

00:42:11.960 --> 00:42:12.793
CHINMAY GARDE: Yeah.

00:42:12.793 --> 00:42:17.200
And so, the Observatory is just
a UI over the service protocol.

00:42:17.200 --> 00:42:18.980
And you can do a
lot of cool things

00:42:18.980 --> 00:42:22.270
with the service protocol,
like debugging, profiling,

00:42:22.270 --> 00:42:26.240
viewing the timeline
as the application is

00:42:26.240 --> 00:42:27.680
entering its frames.

00:42:27.680 --> 00:42:32.120
And we use it, but
developers can use it too.

00:42:32.120 --> 00:42:34.820
So the service
protocol is extensible.

00:42:34.820 --> 00:42:38.545
So using an RPC mechanism, you
can add your own development

00:42:38.545 --> 00:42:39.170
and profiling--

00:42:39.170 --> 00:42:41.410
ANDREW BROGDON: You can kick
things out from your app.

00:42:41.410 --> 00:42:42.285
CHINMAY GARDE: Right.

00:42:42.285 --> 00:42:45.440
And so, you could say, hey, this
is a custom service protocol,

00:42:45.440 --> 00:42:47.450
and one that my
application understands.

00:42:47.450 --> 00:42:52.940
And you can build tooling that's
specific to your application.

00:42:52.940 --> 00:42:56.610
And of course, this only runs
on debug and profile mode.

00:42:56.610 --> 00:42:58.970
So when you release your
app, none of the machinery

00:42:58.970 --> 00:43:01.010
is even in your binary--

00:43:01.010 --> 00:43:02.960
it gets compiled
out, which is why

00:43:02.960 --> 00:43:05.910
we have three different modes.

00:43:05.910 --> 00:43:09.170
So Flutter has debug,
profile, and release modes.

00:43:09.170 --> 00:43:12.470
And so, debug mode is for very
fast application development.

00:43:12.470 --> 00:43:18.630
So you have hot reload,
and tons of other features

00:43:18.630 --> 00:43:23.100
that allow you to quickly
edit code, and have

00:43:23.100 --> 00:43:25.820
it be shown on screen.

00:43:25.820 --> 00:43:31.800
Profile mode is extremely
similar to release mode,

00:43:31.800 --> 00:43:35.030
except it has Observatory and
all the other profiling tools

00:43:35.030 --> 00:43:35.910
built in.

00:43:35.910 --> 00:43:38.590
ANDREW BROGDON: So it's AOT
compiled as opposed to UVM,

00:43:38.590 --> 00:43:40.276
but it's instrumented as well.

00:43:40.276 --> 00:43:41.150
CHINMAY GARDE: Right.

00:43:41.150 --> 00:43:42.390
It's instrumented
and it has a service

00:43:42.390 --> 00:43:43.390
protocol up and running.

00:43:47.730 --> 00:43:51.300
So if you want to get a
good approximation of what

00:43:51.300 --> 00:43:53.550
your user is going
to see, but you also

00:43:53.550 --> 00:43:56.602
want to be able to gain
deep insight into what

00:43:56.602 --> 00:43:58.560
the application is doing
on the user's machine,

00:43:58.560 --> 00:44:01.720
you would use profile mode.

00:44:01.720 --> 00:44:03.700
And the overhead
is fairly minimal--

00:44:03.700 --> 00:44:04.500
ANDREW BROGDON: So
you're changing it

00:44:04.500 --> 00:44:06.041
a little bit by
observing it, as they

00:44:06.041 --> 00:44:07.677
say, as little as possible.

00:44:07.677 --> 00:44:08.510
CHINMAY GARDE: Yeah.

00:44:08.510 --> 00:44:11.410
Nothing is free, but yeah.

00:44:15.302 --> 00:44:17.510
ANDREW BROGDON: Those are
some good tips, definitely.

00:44:17.510 --> 00:44:18.630
I'm going to go and
check out Observatory

00:44:18.630 --> 00:44:20.200
as soon as we're
done filming here.

00:44:20.200 --> 00:44:21.783
I have used it once
when I was working

00:44:21.783 --> 00:44:24.980
on something using isolate.

00:44:24.980 --> 00:44:28.200
CHINMAY GARDE: And so,
when you launch the app,

00:44:28.200 --> 00:44:32.430
it should say Observatory
is running on port blah--

00:44:32.430 --> 00:44:34.037
it's actually
running on the device

00:44:34.037 --> 00:44:35.370
and it's port forwarded for you.

00:44:35.370 --> 00:44:38.744
So literally, just open up the
browser and go to that URL.

00:44:38.744 --> 00:44:40.410
ANDREW BROGDON: And
it's just a web page

00:44:40.410 --> 00:44:40.710
that's got all the stuff in it.

00:44:40.710 --> 00:44:43.840
CHINMAY GARDE: Just a web
page with everything on it.

00:44:43.840 --> 00:44:46.430
And if you don't want to use it
and if you want to extend it,

00:44:46.430 --> 00:44:48.222
you could using the
service protocol.

00:44:48.222 --> 00:44:50.055
So it's just a UI over
the service protocol.

00:44:50.055 --> 00:44:51.340
ANDREW BROGDON: OK.

00:44:51.340 --> 00:44:52.900
So let me change topics here.

00:44:52.900 --> 00:44:55.040
So a while back in
one of our episodes,

00:44:55.040 --> 00:44:58.800
I tossed out a phrase
that's been haunting me.

00:44:58.800 --> 00:45:01.350
I referred to Dart as
a statically dispatched

00:45:01.350 --> 00:45:03.540
language which, of
course, isn't really true.

00:45:03.540 --> 00:45:05.310
CHINMAY GARDE: Mhm.

00:45:05.310 --> 00:45:07.260
ANDREW BROGDON: And
there's been some teasing

00:45:07.260 --> 00:45:08.820
because, of course, Dart
is object-oriented-- it

00:45:08.820 --> 00:45:11.310
has polymorphism in it--
you can't have polymorphism

00:45:11.310 --> 00:45:12.890
if you're just using
static dispatch.

00:45:12.890 --> 00:45:13.240
Correct?

00:45:13.240 --> 00:45:13.860
CHINMAY GARDE: Mhm.

00:45:13.860 --> 00:45:15.234
ANDREW BROGDON:
So I was curious.

00:45:15.234 --> 00:45:17.550
I know I have heard
people say that there

00:45:17.550 --> 00:45:20.040
is some static dispatch
that's used in Dart.

00:45:20.040 --> 00:45:22.140
It's faster--
ideally, you'd love

00:45:22.140 --> 00:45:24.780
to use it as much as possible.

00:45:24.780 --> 00:45:28.034
So are there some instances
where Dart can say--

00:45:28.034 --> 00:45:29.950
I don't have to go look
up a method anywhere--

00:45:29.950 --> 00:45:32.040
I know that this is the
pointer to the function

00:45:32.040 --> 00:45:32.820
I'm going to use--

00:45:32.820 --> 00:45:34.470
just right there it is.

00:45:34.470 --> 00:45:41.050
CHINMAY GARDE: So Dart has
different methods of execution.

00:45:41.050 --> 00:45:43.050
There's the JIT mode
execution, and then there's

00:45:43.050 --> 00:45:44.200
the AOT mode execution.

00:45:44.200 --> 00:45:46.957
So in the AOT mode--

00:45:46.957 --> 00:45:49.290
ANDREW BROGDON: And that's
the release builds that get--

00:45:49.290 --> 00:45:49.420
[INTERPOSING VOICES]

00:45:49.420 --> 00:45:52.230
CHINMAY GARDE: That's the
profile and release builds.

00:45:52.230 --> 00:45:57.660
So in that world,
the Dart AOT compiler

00:45:57.660 --> 00:46:00.570
knows that all the source code
that can potentially execute

00:46:00.570 --> 00:46:04.590
on the system is known upfront.

00:46:04.590 --> 00:46:06.341
ANDREW BROGDON: No hot
reloading anything.

00:46:06.341 --> 00:46:07.173
CHINMAY GARDE: Yeah.

00:46:07.173 --> 00:46:08.570
So no hot reloading
or anything--

00:46:08.570 --> 00:46:10.653
it's not going to change
after it's been deployed.

00:46:10.653 --> 00:46:16.080
And so, because it
knows that the system--

00:46:16.080 --> 00:46:18.880
it can to make more
assumptions about what's

00:46:18.880 --> 00:46:21.690
polymorphic versus
what's not, And again,

00:46:21.690 --> 00:46:27.150
make better decisions
about optimization.

00:46:27.150 --> 00:46:31.050
Now, having said
that, I wouldn't

00:46:31.050 --> 00:46:34.055
try to guess what the
Dart AOT compiler--

00:46:34.055 --> 00:46:37.694
[LAUGHTER] or the
JIT mode executions--

00:46:37.694 --> 00:46:40.110
ANDREW BROGDON: As people have
seen this show before know,

00:46:40.110 --> 00:46:43.920
guessing is kind of my
jam, but please go on.

00:46:43.920 --> 00:46:46.770
CHINMAY GARDE: And so, again,
using the tools that I just

00:46:46.770 --> 00:46:48.870
mentioned--

00:46:48.870 --> 00:46:52.230
the tracing tools,
and even being

00:46:52.230 --> 00:46:57.340
able to add your own
traces, you can get--

00:46:57.340 --> 00:47:01.950
Flutter makes it very easy
for you to tell exactly

00:47:01.950 --> 00:47:05.490
which part of your
code base is maybe not

00:47:05.490 --> 00:47:07.240
as performant as it could be.

00:47:07.240 --> 00:47:11.250
And once you identify
that slow bit of code,

00:47:11.250 --> 00:47:13.560
there are multiple
ways of executing it

00:47:13.560 --> 00:47:14.650
in the right spots.

00:47:14.650 --> 00:47:19.830
So if you're doing
expensive file IO, or just

00:47:19.830 --> 00:47:22.440
expensive work, you
can turn that over

00:47:22.440 --> 00:47:28.104
to another isolate, which
doesn't block your frames.

00:47:28.104 --> 00:47:29.520
ANDREW BROGDON:
That's the version

00:47:29.520 --> 00:47:31.520
of running it on another
thread for Dart, right?

00:47:31.520 --> 00:47:32.610
CHINMAY GARDE: Right.

00:47:32.610 --> 00:47:35.891
Or if you're doing
expensive cryptography--

00:47:35.891 --> 00:47:37.890
ANDREW BROGDON: As we all
do, from time to time.

00:47:37.890 --> 00:47:42.580
CHINMAY GARDE: --or anything
that requires talking to native

00:47:42.580 --> 00:47:44.110
libraries on the device--

00:47:44.110 --> 00:47:51.030
probably Java, or Objective-C,
or Swift, or C++ libraries,

00:47:51.030 --> 00:47:54.240
you can do that using
platform channels.

00:47:54.240 --> 00:47:58.860
And so, I guess
my advice would be

00:47:58.860 --> 00:48:03.010
to not guess which parts
of your code base are slow.

00:48:03.010 --> 00:48:03.510
[LAUGHING]

00:48:03.510 --> 00:48:04.320
ANDREW BROGDON: To
actually go and look,

00:48:04.320 --> 00:48:06.430
and have real knowledge
of what's going on.

00:48:06.430 --> 00:48:07.830
CHINMAY GARDE:
And again, I think

00:48:07.830 --> 00:48:12.930
we do a fairly good
job of providing you

00:48:12.930 --> 00:48:17.190
with all the tools that
allow you to tell exactly

00:48:17.190 --> 00:48:22.050
which parts of your code
are not as performant.

00:48:22.050 --> 00:48:26.782
And I guess maybe we don't do
the best job of showing, but--

00:48:26.782 --> 00:48:28.740
ANDREW BROGDON: Which
would be my job-- thanks.

00:48:28.740 --> 00:48:29.730
[LAUGHING]

00:48:29.730 --> 00:48:31.575
Thrown under the
bus by my own guest.

00:48:31.575 --> 00:48:32.616
CHINMAY GARDE: I'm sorry.

00:48:32.616 --> 00:48:34.930
[LAUGHING]

00:48:36.286 --> 00:48:37.910
ANDREW BROGDON: You
mentioned something

00:48:37.910 --> 00:48:40.035
that I also wanted to talk
about while we're here--

00:48:40.035 --> 00:48:42.660
and we'll probably only have
a little bit of time left.

00:48:42.660 --> 00:48:44.204
But you mentioned
platform channels,

00:48:44.204 --> 00:48:46.620
which is what we've been working
with in today's episode--

00:48:46.620 --> 00:48:50.070
doing this plugin
for a barometer.

00:48:50.070 --> 00:48:53.601
And I'm curious-- like, I have
some knowledge of platform

00:48:53.601 --> 00:48:54.100
channels.

00:48:54.100 --> 00:48:56.280
I worked on the
Firebase AdMob plugin--

00:48:56.280 --> 00:48:57.870
that was how I got
on the Flutter team

00:48:57.870 --> 00:49:00.380
to begin with-- that
was my little gateway.

00:49:00.380 --> 00:49:01.590
And so I've done that.

00:49:01.590 --> 00:49:03.660
We're working with it
today, and I sort of

00:49:03.660 --> 00:49:05.250
understand platform channels.

00:49:05.250 --> 00:49:06.750
And I was going to
see how far I can

00:49:06.750 --> 00:49:09.330
get trying to explain
it before you have

00:49:09.330 --> 00:49:10.740
to stop me because I'm wrong.

00:49:10.740 --> 00:49:12.540
So this will be a
fun little experiment

00:49:12.540 --> 00:49:13.820
to see how far I can get.

00:49:13.820 --> 00:49:18.630
So I build an app, and
I reference plugins

00:49:18.630 --> 00:49:20.020
in my pubspec.

00:49:20.020 --> 00:49:23.130
So Flutter knows, hey, I need
this additional code built

00:49:23.130 --> 00:49:24.700
into my app.

00:49:24.700 --> 00:49:28.650
And so plugin is a package that
has not only some Dart code,

00:49:28.650 --> 00:49:31.800
but it also has
Android libraries,

00:49:31.800 --> 00:49:34.950
potentially-- it has iOS
libraries-- static libraries

00:49:34.950 --> 00:49:37.470
that might come in a pod file.

00:49:37.470 --> 00:49:39.870
And it can have
classes and assets

00:49:39.870 --> 00:49:42.870
for those native
platforms as well.

00:49:42.870 --> 00:49:45.540
So when those are
built, all that stuff

00:49:45.540 --> 00:49:48.480
goes into my app proper.

00:49:48.480 --> 00:49:52.830
And so, in my app, I
might call into a package

00:49:52.830 --> 00:49:53.580
for the barometer.

00:49:53.580 --> 00:49:55.120
So I'm going to
call in to say hey,

00:49:55.120 --> 00:49:57.780
I'd like to listen to
the barometer, please.

00:49:57.780 --> 00:50:02.695
And so, my barometer package
registers a method channel

00:50:02.695 --> 00:50:04.320
that it creates, and
it gives it a name

00:50:04.320 --> 00:50:06.840
so I can get back to
it later if I want to--

00:50:06.840 --> 00:50:09.270
and I know it on both sides.

00:50:09.270 --> 00:50:12.250
And then, magic
starts to happen.

00:50:12.250 --> 00:50:15.900
So there's a registrar
that's in charge

00:50:15.900 --> 00:50:18.124
of managing all of these
method channels, correct?

00:50:18.124 --> 00:50:19.040
CHINMAY GARDE: Mm-hmm.

00:50:19.040 --> 00:50:21.780
ANDREW BROGDON: OK, so I got
that part-- that's pretty good.

00:50:21.780 --> 00:50:27.030
And when I create
a method channel,

00:50:27.030 --> 00:50:31.250
it goes and looks for a
class with a matching name

00:50:31.250 --> 00:50:34.200
to what's registered
with my package.

00:50:34.200 --> 00:50:35.139
Is that right?

00:50:35.139 --> 00:50:36.680
CHINMAY GARDE: With
the channel name.

00:50:36.680 --> 00:50:38.096
ANDREW BROGDON:
The channel name--

00:50:38.096 --> 00:50:39.440
OK.

00:50:39.440 --> 00:50:43.740
And so, it'll go and spin up
the class on the other side--

00:50:43.740 --> 00:50:44.760
the native class--

00:50:44.760 --> 00:50:48.810
in Android or iOS.

00:50:48.810 --> 00:50:52.440
And that class
then has some kind

00:50:52.440 --> 00:50:54.985
of a listener that's there,
and it's in another thread?

00:50:54.985 --> 00:50:55.860
CHINMAY GARDE: Right.

00:50:55.860 --> 00:50:59.790
So when you launch a
Flutter application,

00:50:59.790 --> 00:51:02.910
your main Dart code
is running on what

00:51:02.910 --> 00:51:05.610
we call the root
isolate, and that isolate

00:51:05.610 --> 00:51:08.322
isn't running on the
platform's main thread.

00:51:08.322 --> 00:51:10.530
ANDREW BROGDON: So it's a
separate thread from the UI

00:51:10.530 --> 00:51:11.765
thread as we call it.

00:51:11.765 --> 00:51:12.640
CHINMAY GARDE: Right.

00:51:12.640 --> 00:51:18.540
So the [INAUDIBLE] main thread
or the Android platform's

00:51:18.540 --> 00:51:19.200
main thread.

00:51:19.200 --> 00:51:22.169
So your Dart code isn't
running on the main thread.

00:51:22.169 --> 00:51:22.960
ANDREW BROGDON: OK.

00:51:22.960 --> 00:51:25.080
That's good-- I can't
block the UI-- that's nice.

00:51:25.080 --> 00:51:25.955
CHINMAY GARDE: Right.

00:51:28.490 --> 00:51:33.330
But we find that when you want
to talk the online platform,

00:51:33.330 --> 00:51:36.360
most of these APIs aren't
really thread safe.

00:51:36.360 --> 00:51:42.210
And so, what we do is when you
make calls through the platform

00:51:42.210 --> 00:51:46.470
channels, you'll find that
all these calls are async.

00:51:46.470 --> 00:51:52.080
And that's because all the call
arguments and their responses

00:51:52.080 --> 00:51:54.210
are marshaled, and sent across--

00:51:54.210 --> 00:51:56.280
link over to the
platform thread.

00:51:56.280 --> 00:51:58.920
And then, when the
plugin says, OK, I've

00:51:58.920 --> 00:52:01.200
done the work I need to do--

00:52:01.200 --> 00:52:04.890
and the plugin itself
can do this work

00:52:04.890 --> 00:52:05.910
on any thread it wants.

00:52:05.910 --> 00:52:07.320
ANDREW BROGDON: So if it
wants to go spawn a background

00:52:07.320 --> 00:52:10.200
thread-- it's just regular
platform code at that point.

00:52:10.200 --> 00:52:11.100
It can go ahead and
do what it wants.

00:52:11.100 --> 00:52:11.933
to a certain degree.

00:52:11.933 --> 00:52:13.130
CHINMAY GARDE: Right.

00:52:13.130 --> 00:52:18.360
And so, the marshalling
and unmarshalling

00:52:18.360 --> 00:52:20.220
of the augments
and its responses

00:52:20.220 --> 00:52:22.780
are handled by the
platform plugins mechanism.

00:52:26.480 --> 00:52:32.250
And the way the Flutter
engine disambiguates

00:52:32.250 --> 00:52:36.210
different instances of plugins
is using the channel name.

00:52:36.210 --> 00:52:37.300
ANDREW BROGDON: OK.

00:52:37.300 --> 00:52:39.810
So I can have a
plugin, and I can

00:52:39.810 --> 00:52:41.630
have like four
different channels,

00:52:41.630 --> 00:52:43.440
and as long as I give
them different names,

00:52:43.440 --> 00:52:45.210
Flutter can keep those straight.

00:52:45.210 --> 00:52:47.710
I probably don't want to,
but I could if I wanted.

00:52:47.710 --> 00:52:49.250
CHINMAY GARDE: Yeah, you could.

00:52:49.250 --> 00:52:52.780
And so-- uh.

00:52:52.780 --> 00:52:54.234
[LAUGHING]

00:52:54.234 --> 00:52:55.150
I don't do this often.

00:52:55.150 --> 00:52:56.700
ANDREW BROGDON: That's fine.

00:52:56.700 --> 00:52:58.650
You're rarely called
upon to just brain

00:52:58.650 --> 00:53:02.380
dump these architectural things.

00:53:02.380 --> 00:53:06.450
CHINMAY GARDE: But
as I said, the calls

00:53:06.450 --> 00:53:10.110
that are made on
the root isolates

00:53:10.110 --> 00:53:12.660
thread are sent over
to the platform thread,

00:53:12.660 --> 00:53:14.779
and then its response
is sent back over.

00:53:14.779 --> 00:53:15.570
ANDREW BROGDON: OK.

00:53:15.570 --> 00:53:18.150
And so it has to be done--
like, these messages go back

00:53:18.150 --> 00:53:19.440
and forth--

00:53:19.440 --> 00:53:21.885
there is no shared memory
between the two, correct?

00:53:21.885 --> 00:53:23.760
CHINMAY GARDE: No, there
is no shared memory.

00:53:23.760 --> 00:53:25.830
ANDREW BROGDON: And that's true
of Dart isolates, in general.

00:53:25.830 --> 00:53:26.900
That's one of the rules--

00:53:26.900 --> 00:53:28.941
there's no shared memory--
it's only this message

00:53:28.941 --> 00:53:30.540
passing architecture.

00:53:30.540 --> 00:53:32.490
CHINMAY GARDE: Yeah,
because the thread

00:53:32.490 --> 00:53:37.590
that the root isolates
code runs on is--

00:53:37.590 --> 00:53:40.550
again, the Flutter
application developer

00:53:40.550 --> 00:53:41.910
didn't spawn it for us.

00:53:41.910 --> 00:53:45.830
And so, the engine
spawned it on its own.

00:53:45.830 --> 00:53:47.580
ANDREW BROGDON: So the
engine spins it up,

00:53:47.580 --> 00:53:50.960
and then it enters your
main on that thread.

00:53:50.960 --> 00:53:53.010
CHINMAY GARDE: Right.

00:53:53.010 --> 00:53:57.300
Actually, when your Flutter
application launches,

00:53:57.300 --> 00:54:02.780
the Flutter engine spawns
three main threads, which is--

00:54:02.780 --> 00:54:04.800
so this isn't the
platform's main thread--

00:54:04.800 --> 00:54:06.690
this is what we
refer to as the UI

00:54:06.690 --> 00:54:10.440
thread, which is where the
root isolates Dart code runs.

00:54:10.440 --> 00:54:18.210
We spawn a GPU thread where
all the operations that

00:54:18.210 --> 00:54:21.150
want to talk to the GPU run on.

00:54:21.150 --> 00:54:23.940
And then, there's
the I/O thread, which

00:54:23.940 --> 00:54:30.240
can read like image assets--

00:54:30.240 --> 00:54:33.840
which allows I/O, but it also
can talk to the GPU thread

00:54:33.840 --> 00:54:36.394
to do async texture uploads.

00:54:36.394 --> 00:54:37.560
ANDREW BROGDON: Interesting.

00:54:37.560 --> 00:54:41.400
CHINMAY GARDE: So it just makes
things a whole lot easier.

00:54:41.400 --> 00:54:43.810
But, again, these threads
are spawned for you.

00:54:43.810 --> 00:54:44.520
[LAUGHING]

00:54:44.520 --> 00:54:46.390
ANDREW BROGDON: You don't have
to really think about them.

00:54:46.390 --> 00:54:47.790
It's just like the
three trees, right?

00:54:47.790 --> 00:54:48.900
You really think
about widgets, you

00:54:48.900 --> 00:54:50.590
don't think about elements
and render objects

00:54:50.590 --> 00:54:51.200
most of the time.

00:54:51.200 --> 00:54:52.075
CHINMAY GARDE: Right.

00:54:52.075 --> 00:54:54.900
And they're just done
for you, but when

00:54:54.900 --> 00:54:56.970
you want to run
platform specific code,

00:54:56.970 --> 00:55:01.160
we realized that because you
didn't spawn the threads,

00:55:01.160 --> 00:55:04.230
it might be unexpected for you
to get a platform call back

00:55:04.230 --> 00:55:06.930
on a thread that you
didn't know existed.

00:55:06.930 --> 00:55:08.130
[LAUGHING]

00:55:08.130 --> 00:55:14.970
And so, we run that code for
you on the platform thread.

00:55:14.970 --> 00:55:19.340
And again, there's also a thread
pool for the VM to do its job,

00:55:19.340 --> 00:55:22.152
so there's quite a few things.

00:55:22.152 --> 00:55:23.610
And things start
to get interesting

00:55:23.610 --> 00:55:27.340
when you have multiple startup
views within your application.

00:55:27.340 --> 00:55:29.622
ANDREW BROGDON: Oh, goodness.

00:55:29.622 --> 00:55:30.955
CHINMAY GARDE: It's pretty cool.

00:55:30.955 --> 00:55:33.210
ANDREW BROGDON: I
never even tried that.

00:55:33.210 --> 00:55:34.650
I think we have
probably gone way

00:55:34.650 --> 00:55:37.274
over the time allotted for this,
but this has been really cool.

00:55:37.274 --> 00:55:39.450
That's a lot low
level knowledge for me

00:55:39.450 --> 00:55:41.040
and, hopefully, our viewers.

00:55:41.040 --> 00:55:43.150
So thank you for
appearing on the show.

00:55:43.150 --> 00:55:43.650
CHINMAY GARDE: Thank
you for having me.

00:55:43.650 --> 00:55:44.400
It was really fun.

00:55:44.400 --> 00:55:45.290
ANDREW BROGDON: Yeah.

00:55:45.290 --> 00:55:46.664
And we're going
to cut back to me

00:55:46.664 --> 00:55:48.840
and Matt working on the plugin.

00:55:48.840 --> 00:55:49.980
And we're back.

00:55:49.980 --> 00:55:51.750
So that was some
fun with Chinmay

00:55:51.750 --> 00:55:54.539
who had a lot of
interesting information.

00:55:54.539 --> 00:55:55.330
MATT SULLIVAN: Mhm.

00:55:55.330 --> 00:55:56.288
A font of information--

00:55:56.288 --> 00:55:56.790
Chinmay.

00:55:56.790 --> 00:55:57.810
ANDREW BROGDON: Yeah.

00:55:57.810 --> 00:55:59.427
Always happy to
get the internals,

00:55:59.427 --> 00:56:00.510
because that always helps.

00:56:00.510 --> 00:56:05.829
So I have loaded us
back up in that time.

00:56:05.829 --> 00:56:07.620
While you were watching
me talk to Chinmay,

00:56:07.620 --> 00:56:10.380
I was actually also here working
on getting this loaded up

00:56:10.380 --> 00:56:11.390
in Android Studio.

00:56:11.390 --> 00:56:12.311
MATT SULLIVAN: Cloned.

00:56:12.311 --> 00:56:15.191
[LAUGHING]

00:56:15.191 --> 00:56:17.190
ANDREW BROGDON: And so,
I have the right context

00:56:17.190 --> 00:56:18.810
for the Java sources.

00:56:18.810 --> 00:56:20.670
And all of that
appears to be working.

00:56:20.670 --> 00:56:23.770
MATT SULLIVAN: So we're all
working now nicely in IntelliJ,

00:56:23.770 --> 00:56:25.130
and everything is good.

00:56:25.130 --> 00:56:25.980
ANDREW BROGDON: Yes.

00:56:25.980 --> 00:56:28.680
So I can get back to the
bugs in the Java code.

00:56:28.680 --> 00:56:31.990
So, sensor service--
lets get that imported--

00:56:31.990 --> 00:56:32.720
correct.

00:56:32.720 --> 00:56:36.330
getDefaultSensor is bugging
me about the Android version,

00:56:36.330 --> 00:56:44.670
because apparently Android A/B
API levels didn't have sensors.

00:56:44.670 --> 00:56:46.420
In the example code
that I pasted in here,

00:56:46.420 --> 00:56:47.880
it's calling getSystemService.

00:56:47.880 --> 00:56:49.952
And in the example--

00:56:49.952 --> 00:56:53.070
let's see where I was
with the example--

00:56:53.070 --> 00:56:55.950
this is taking
place in an activity

00:56:55.950 --> 00:56:57.612
which my plugin is not.

00:56:57.612 --> 00:56:59.820
MATT SULLIVAN: You need to
get access to the context.

00:56:59.820 --> 00:57:01.150
ANDREW BROGDON: I need
to get an activity

00:57:01.150 --> 00:57:02.280
because I need a context.

00:57:02.280 --> 00:57:07.170
Fortunately, the registrar
and this registerWith method

00:57:07.170 --> 00:57:09.660
is the first method
that gets called

00:57:09.660 --> 00:57:12.750
on your plugin to get you
ready to receive further calls.

00:57:12.750 --> 00:57:16.380
It provides this registrar, and
that can get you the activity

00:57:16.380 --> 00:57:17.850
that Flutter is running in.

00:57:17.850 --> 00:57:20.190
So I'm going to come
up here, and I'm

00:57:20.190 --> 00:57:30.540
going to keep a hold of the
registrar for future use,

00:57:30.540 --> 00:57:33.217
and I'll set it right here.

00:57:33.217 --> 00:57:42.510
[INAUDIBLE] Am I misspelling
registrar all over the place?

00:57:42.510 --> 00:57:43.464
Oh, that's a static--

00:57:43.464 --> 00:57:44.130
I can't do that.

00:57:50.500 --> 00:57:53.440
Here we go.

00:57:53.440 --> 00:57:55.010
Wait a second, that's not right.

00:57:55.010 --> 00:57:57.260
MATT SULLIVAN: Do you want
to hold onto the registrar,

00:57:57.260 --> 00:58:00.100
or do you want to
hold onto the context?

00:58:00.100 --> 00:58:01.750
ANDREW BROGDON: What
I need to do is--

00:58:01.750 --> 00:58:03.130
so this is a static
method that's

00:58:03.130 --> 00:58:05.680
going to be making an
instance of this class.

00:58:05.680 --> 00:58:06.570
MATT SULLIVAN: Oh,
it's a static method.

00:58:06.570 --> 00:58:07.111
That's right.

00:58:07.111 --> 00:58:10.420
ANDREW BROGDON: So I need
to have a constructor

00:58:10.420 --> 00:58:17.021
down here that
takes a registrar.

00:58:17.021 --> 00:58:18.604
Actually, I can just
make an activity.

00:58:22.320 --> 00:58:26.610
And I can change this from
being a registrar to--

00:58:26.610 --> 00:58:30.050
actually, I'll keep it
just in case there's

00:58:30.050 --> 00:58:33.290
other registrar-based
things that I want to do.

00:58:35.635 --> 00:58:37.260
And so, while we're
talking about this,

00:58:37.260 --> 00:58:42.330
the registrar is the manager
of the method channels

00:58:42.330 --> 00:58:44.829
that you're going to be using.

00:58:44.829 --> 00:58:47.370
MATT SULLIVAN: It's the thing
that you register your channels

00:58:47.370 --> 00:58:49.800
with that has all the
plumbing inside to handle

00:58:49.800 --> 00:58:51.550
the setup [INAUDIBLE]
and everything else.

00:58:51.550 --> 00:58:52.020
ANDREW BROGDON: Exactly.

00:58:52.020 --> 00:58:54.030
Some class has to be
in charge of that,

00:58:54.030 --> 00:58:56.071
and say, oh, you want this
one with this string--

00:58:56.071 --> 00:58:59.280
here's this one that matches it.

00:58:59.280 --> 00:59:00.690
And so, we can take that out.

00:59:00.690 --> 00:59:04.312
And then here, I just pass in--

00:59:04.312 --> 00:59:06.270
I'm going to be really
good at typing registrar

00:59:06.270 --> 00:59:08.100
by the time this is over.

00:59:08.100 --> 00:59:16.020
And now down here, I can
say nRegistrar.activity--

00:59:21.650 --> 00:59:24.110
ooh-- I wonder if activeContext
would be even better.

00:59:28.295 --> 00:59:33.435
And then an extra parentheses,
and I think that'll do it.

00:59:33.435 --> 00:59:34.560
Do I have any other errors?

00:59:34.560 --> 00:59:37.010
I've got one.

00:59:37.010 --> 00:59:43.259
This is upset about
the API level.

00:59:43.259 --> 00:59:45.300
There's all types of ways
this could crash on me.

00:59:45.300 --> 00:59:48.110
MATT SULLIVAN: Why is
our current min API one?

00:59:48.110 --> 00:59:50.120
ANDREW BROGDON: That's
a very good question.

00:59:50.120 --> 00:59:52.770
MATT SULLIVAN: Was it 18 or 16?

00:59:52.770 --> 00:59:53.760
ANDREW BROGDON: Huh.

00:59:53.760 --> 00:59:55.440
There we go.

00:59:55.440 --> 01:00:02.500
Let's see if I can just ignore
this for now and press on.

01:00:02.500 --> 01:00:03.970
Nope, Dart's yelling at me.

01:00:03.970 --> 01:00:06.198
That's definitely
not a good thing.

01:00:06.198 --> 01:00:08.102
What is Dart upset about?

01:00:10.958 --> 01:00:13.040
Oh, I'm missing a file--

01:00:13.040 --> 01:00:14.870
that is what it's yelling about.

01:00:14.870 --> 01:00:17.780
Hold on a second, I need
to go resurrect something

01:00:17.780 --> 01:00:24.100
from our previous instance
of the project in IntelliJ's

01:00:24.100 --> 01:00:27.152
other IDE.

01:00:27.152 --> 01:00:28.360
Let me just put this back in.

01:00:28.360 --> 01:00:29.776
So this is the
method that you saw

01:00:29.776 --> 01:00:32.520
me doing earlier for reading.

01:00:32.520 --> 01:00:34.290
I'm just going to put
it right back in--

01:00:34.290 --> 01:00:38.480
it got lost in
translation when I remade

01:00:38.480 --> 01:00:46.440
the project for Android Studio.

01:01:01.150 --> 01:01:03.626
Make that again--
you can go away.

01:01:13.020 --> 01:01:16.410
I believe we'll be back on
Boogie Street in just a second.

01:01:16.410 --> 01:01:20.860
I can recap what
we've just done.

01:01:20.860 --> 01:01:25.442
MATT SULLIVAN: So you've added
in registering a SensorManager.

01:01:25.442 --> 01:01:26.400
ANDREW BROGDON: Mm-hmm.

01:01:26.400 --> 01:01:28.880
Just to see if I can do that
without it freaking out on me--

01:01:28.880 --> 01:01:30.060
that's all I'm
really trying to do.

01:01:30.060 --> 01:01:32.268
MATT SULLIVAN: I want to
rename your accelerator too.

01:01:32.268 --> 01:01:33.450
[LAUGHING]

01:01:33.450 --> 01:01:34.000
Pressure--

01:01:34.000 --> 01:01:36.390
ANDREW BROGDON:
Barometer-- there we go.

01:01:36.390 --> 01:01:39.240
So we just ran this
code and we're OK.

01:01:39.240 --> 01:01:44.953
So let me change this to
barometer, because that

01:01:44.953 --> 01:01:46.672
is the correct name.

01:01:50.110 --> 01:01:52.570
And so for this, we're
going to be registering--

01:01:52.570 --> 01:01:55.030
if we get back to--

01:01:55.030 --> 01:01:58.600
we need to register a listener.

01:01:58.600 --> 01:02:01.560
This will be interesting.

01:02:01.560 --> 01:02:04.360
MATT SULLIVAN: So we're going
to want to register a listener.

01:02:04.360 --> 01:02:06.693
And you could be clever-- you
could register a listener,

01:02:06.693 --> 01:02:09.005
and you could take several
barometer readings,

01:02:09.005 --> 01:02:09.880
and average them out.

01:02:09.880 --> 01:02:11.955
For example, if you wanted to
make sure-- because sometimes

01:02:11.955 --> 01:02:13.840
there are noisy signals
where you could just

01:02:13.840 --> 01:02:16.330
take the first
one and return it.

01:02:16.330 --> 01:02:19.310
There's a bunch of different
ways you could handle this.

01:02:19.310 --> 01:02:22.810
But it's the sense delay--

01:02:22.810 --> 01:02:24.550
it'll be interesting
to see how many--

01:02:24.550 --> 01:02:26.560
there is going to be
a significant delay

01:02:26.560 --> 01:02:28.330
in registering
[INAUDIBLE] significant--

01:02:28.330 --> 01:02:30.150
is in either hundreds of
milliseconds or seconds.

01:02:30.150 --> 01:02:30.780
It depends on--

01:02:30.780 --> 01:02:32.110
ANDREW BROGDON: But they're
asynchronized, right?

01:02:32.110 --> 01:02:32.290
MATT SULLIVAN: Yeah.

01:02:32.290 --> 01:02:35.050
But they're asynchronous, so
it will show up in your UI

01:02:35.050 --> 01:02:37.420
eventually.

01:02:37.420 --> 01:02:39.366
Where are you going to
register this listener?

01:02:39.366 --> 01:02:40.990
ANDREW BROGDON: That's
a good question.

01:02:40.990 --> 01:02:43.198
MATT SULLIVAN: Probably when
you do the onMethodCall,

01:02:43.198 --> 01:02:46.210
you could set everything
up, get the numbers,

01:02:46.210 --> 01:02:50.110
then tear everything down
and return the value.

01:02:50.110 --> 01:02:55.150
That might not be optimal,
but it should work.

01:02:55.150 --> 01:02:58.606
ANDREW BROGDON: That might be
difficult to pull off without--

01:02:58.606 --> 01:03:00.730
MATT SULLIVAN: Oh, you need
to register a listener.

01:03:00.730 --> 01:03:01.360
ANDREW BROGDON:
I'm wondering if we

01:03:01.360 --> 01:03:02.920
should set up a
separate function

01:03:02.920 --> 01:03:06.040
to initialize the barometer.

01:03:06.040 --> 01:03:09.106
Ideally, we'd be subscribing to
a stream and doing it that way.

01:03:09.106 --> 01:03:10.480
MATT SULLIVAN:
But don't you have

01:03:10.480 --> 01:03:21.012
to implement an interface
for the SensorListener?

01:03:21.012 --> 01:03:21.970
ANDREW BROGDON: You do.

01:03:21.970 --> 01:03:22.762
So we can go into--

01:03:22.762 --> 01:03:24.136
we're already in
there, actually.

01:03:24.136 --> 01:03:25.157
And so this is--

01:03:28.140 --> 01:03:29.250
that we can do.

01:03:29.250 --> 01:03:33.040
MATT SULLIVAN: We could do
an anonymous class, I guess,

01:03:33.040 --> 01:03:34.859
as well.

01:03:34.859 --> 01:03:35.650
ANDREW BROGDON: Oh.

01:03:35.650 --> 01:03:36.816
Good god, I've already got--

01:03:40.808 --> 01:03:44.146
[SIGH] been a fun day for me.

01:03:44.146 --> 01:03:46.240
[LAUGHING]

01:03:46.240 --> 01:03:49.435
So we can put those
methods down here.

01:03:49.435 --> 01:03:51.314
Does command n work
for-- there you go--

01:03:51.314 --> 01:03:53.634
implement methods.

01:03:53.634 --> 01:03:56.224
[INAUDIBLE] goes.

01:03:56.224 --> 01:03:57.088
So we've got them.

01:04:00.570 --> 01:04:01.193
Good

01:04:01.193 --> 01:04:02.819
MATT SULLIVAN: You've
got getBarometer.

01:04:02.819 --> 01:04:05.234
ANDREW BROGDON: Let's say we
have an initialized barometer

01:04:05.234 --> 01:04:06.400
that sets it up.

01:04:06.400 --> 01:04:09.520
And then, we could just have a--

01:04:09.520 --> 01:04:10.840
let's see-- float values here--

01:04:10.840 --> 01:04:13.282
I think it's the first
that we're interested in.

01:04:13.282 --> 01:04:15.490
We could just have a float
that's hanging out in here

01:04:15.490 --> 01:04:15.989
that's--

01:04:18.889 --> 01:04:23.689
private float
mLatestReading, like that.

01:04:23.689 --> 01:04:26.230
So we can setup the listener--
we can just keep that updated,

01:04:26.230 --> 01:04:27.850
and then when you
call in to get--

01:04:31.610 --> 01:04:36.970
MATT SULLIVAN: But what
happens if the phone doesn't

01:04:36.970 --> 01:04:38.560
support that sensor
if you're going

01:04:38.560 --> 01:04:42.480
to do it on construction time?

01:04:42.480 --> 01:04:44.230
ANDREW BROGDON: So we
wouldn't be doing it

01:04:44.230 --> 01:04:45.813
in construction time,
we'd be doing it

01:04:45.813 --> 01:04:50.740
on an initialized call, and that
could conceivably return false

01:04:50.740 --> 01:04:51.810
if we wanted it to.

01:04:51.810 --> 01:04:52.990
MATT SULLIVAN: Oh, so you want
to have a separate method which

01:04:52.990 --> 01:04:53.986
says initialized.

01:04:53.986 --> 01:04:55.610
Then, you want to
call for the reading,

01:04:55.610 --> 01:04:58.456
and then you're going
to have it dispose?

01:04:58.456 --> 01:05:01.120
ANDREW BROGDON: A cleanup,
disconnect, or something

01:05:01.120 --> 01:05:02.330
like that.

01:05:02.330 --> 01:05:05.110
MATT SULLIVAN: OK,
that seems reasonable.

01:05:05.110 --> 01:05:11.686
ANDREW BROGDON: So we
want to have Boolean.

01:05:17.952 --> 01:05:23.910
And that would do this bit.

01:05:23.910 --> 01:05:26.490
And then, it would
also do this other bit

01:05:26.490 --> 01:05:28.650
that I'll steal
right out of this--

01:05:28.650 --> 01:05:29.880
register the listener.

01:05:39.020 --> 01:05:40.640
MATT SULLIVAN:
SensorDelay.Normal--

01:05:40.640 --> 01:05:42.680
we'll just leave it.

01:05:42.680 --> 01:05:43.930
We'll fine-tune that later on.

01:05:47.320 --> 01:05:51.381
Oh, it can't be this, it has to
be the registrar.activeContext,

01:05:51.381 --> 01:05:51.880
right?

01:05:55.030 --> 01:05:57.710
Because that's probably going
to be the context, isn't it?

01:05:57.710 --> 01:05:59.710
ANDREW BROGDON: All right,
let's go and actually

01:05:59.710 --> 01:06:00.830
look at the method here.

01:06:00.830 --> 01:06:03.440
It's sort of ironic that the
trouble we're running into

01:06:03.440 --> 01:06:08.940
has nothing to do with Flutter,
just regular code in Java.

01:06:08.940 --> 01:06:13.110
registerListener-- yeah,
that's a good point.

01:06:13.110 --> 01:06:15.110
MATT SULLIVAN: So
registerListener wasn't taken.

01:06:15.110 --> 01:06:16.568
ANDREW BROGDON:
Can I go into that?

01:06:16.568 --> 01:06:17.658
OK.

01:06:17.658 --> 01:06:19.119
SensorEventListener.

01:06:21.952 --> 01:06:23.660
MATT SULLIVAN: So it
is this because it's

01:06:23.660 --> 01:06:31.051
looking for the implementer
of the listener, right?

01:06:31.051 --> 01:06:34.054
And this should be fine?

01:06:51.240 --> 01:06:52.406
ANDREW BROGDON: There we go.

01:06:54.856 --> 01:06:56.230
Helps if you use
the right class.

01:06:56.230 --> 01:06:59.659
Oh, right-- near hide
interface-- so that worked.

01:06:59.659 --> 01:07:02.200
And so, that's going to register
the listener, which is this.

01:07:02.200 --> 01:07:03.890
That is going to--

01:07:03.890 --> 01:07:06.230
MATT SULLIVAN: Then start
to call onmSensorChanged.

01:07:06.230 --> 01:07:07.855
And you're just going
to want to update

01:07:07.855 --> 01:07:10.452
your new private variable.

01:07:10.452 --> 01:07:11.285
ANDREW BROGDON: Mhm.

01:07:16.620 --> 01:07:19.978
And let's just try the
first thing in values.

01:07:29.938 --> 01:07:31.432
MATT SULLIVAN:
Oh, wait a second.

01:07:41.890 --> 01:07:48.600
onSensorChanged is an event,
so this is different too--

01:07:48.600 --> 01:07:50.302
I think we're
using a different--

01:07:50.302 --> 01:07:51.760
ANDREW BROGDON:
Yeah, you're right.

01:07:51.760 --> 01:07:53.960
MATT SULLIVAN: --we're
using a different.

01:07:53.960 --> 01:07:56.180
Because you auto populated
from the wrong thing

01:07:56.180 --> 01:07:57.180
you need the other ones.

01:07:57.180 --> 01:08:00.770
ANDREW BROGDON: These
are the ones that I need

01:08:00.770 --> 01:08:02.656
MATT SULLIVAN: Thing
is a technical term.

01:08:02.656 --> 01:08:03.754
[LAUGHING]

01:08:03.754 --> 01:08:04.920
ANDREW BROGDON: There we go.

01:08:04.920 --> 01:08:08.870
So let's get the right methods
in here, just like that.

01:08:08.870 --> 01:08:11.660
Import that correctly.

01:08:11.660 --> 01:08:14.570
MATT SULLIVAN: Cool.

01:08:14.570 --> 01:08:17.750
So that's the AccuracyChanged,
and you want the event

01:08:17.750 --> 01:08:19.109
from the Changed, right?

01:08:23.340 --> 01:08:25.609
ANDREW BROGDON: Let's
put that down here,

01:08:25.609 --> 01:08:28.510
and then I'll figure out exactly
how to get data from the sensor

01:08:28.510 --> 01:08:29.850
event in a second.

01:08:29.850 --> 01:08:31.640
So it starts at zero--

01:08:31.640 --> 01:08:33.830
it will increase every time
there's a sensor change.

01:08:33.830 --> 01:08:35.439
MATT SULLIVAN: Oh, OK.

01:08:35.439 --> 01:08:37.140
ANDREW BROGDON: And
then for this, we

01:08:37.140 --> 01:08:43.500
can start returning [INAUDIBLE].

01:08:46.965 --> 01:08:49.141
MATT SULLIVAN: Uh--

01:08:49.141 --> 01:08:50.224
ANDREW BROGDON: What's up?

01:08:50.224 --> 01:08:52.536
[LAUGHING]

01:08:52.536 --> 01:08:55.160
MATT SULLIVAN: Is that going to
cast-- oh, it's a float anyway,

01:08:55.160 --> 01:08:55.894
so that's fine.

01:08:55.894 --> 01:08:58.310
But do you want to make that
a double rather than a float?

01:08:58.310 --> 01:08:58.939
Just in case.

01:09:02.495 --> 01:09:04.370
ANDREW BROGDON: What
else do I have here that

01:09:04.370 --> 01:09:05.929
could be causing me trouble?

01:09:05.929 --> 01:09:07.720
MATT SULLIVAN: So this
is going to return--

01:09:07.720 --> 01:09:08.109
ANDREW BROGDON: Yep.

01:09:08.109 --> 01:09:10.189
It's also yelling to
me about the API level,

01:09:10.189 --> 01:09:13.380
so we can fix that in
the manifest in a second.

01:09:13.380 --> 01:09:17.912
And so, we have things
that are happening.

01:09:17.912 --> 01:09:20.120
MATT SULLIVAN: It'll be
interesting to see which hits

01:09:20.120 --> 01:09:22.394
first, the sensor event
or your-- probably--

01:09:22.394 --> 01:09:24.300
ANDREW BROGDON: Let's stop that.

01:09:24.300 --> 01:09:29.549
And so now, in here, I
have to make a method.

01:09:36.491 --> 01:09:38.490
That's just going to be
a regular method, right?

01:09:38.490 --> 01:09:39.281
MATT SULLIVAN: Yep.

01:09:42.334 --> 01:09:44.250
Well, because you're not
passing anything in--

01:09:44.250 --> 01:09:46.439
well, no, there's
attribute getter.

01:09:46.439 --> 01:09:48.200
Actually, it makes
sense to be a getter.

01:09:48.200 --> 01:09:53.121
ANDREW BROGDON: So we're
still wiring up our--

01:09:53.121 --> 01:10:06.910
[INAUDIBLE] invoke method,
and let's initialize.

01:10:06.910 --> 01:10:13.070
We'll have to put this
into the handler there.

01:10:13.070 --> 01:10:14.670
OK, so we got that.

01:10:14.670 --> 01:10:16.710
Then, we come back
into our Java.

01:10:16.710 --> 01:10:18.840
And we're going to have
a little bit in here

01:10:18.840 --> 01:10:22.115
to call that method.

01:10:22.115 --> 01:10:26.880
So if call.method--
this is horrible typing.

01:10:26.880 --> 01:10:29.130
MATT SULLIVAN: So there's a
little bit of boiler plate

01:10:29.130 --> 01:10:30.400
to communicate back and forth.

01:10:30.400 --> 01:10:32.170
ANDREW BROGDON: Yeah.

01:10:32.170 --> 01:10:33.780
MATT SULLIVAN: It's not too bad.

01:10:33.780 --> 01:10:36.060
ANDREW BROGDON: This
is an interesting spot

01:10:36.060 --> 01:10:38.307
because these
issues-- like, if you

01:10:38.307 --> 01:10:40.140
get a string wrong in
one place and it's not

01:10:40.140 --> 01:10:41.790
wrong in the other,
you're not going

01:10:41.790 --> 01:10:43.780
to catch that until runtime.

01:10:43.780 --> 01:10:44.920
MATT SULLIVAN: Yes.

01:10:44.920 --> 01:10:45.870
And then, you're not
going to quite know

01:10:45.870 --> 01:10:47.536
what's going on,
because things are just

01:10:47.536 --> 01:10:48.595
not going to get called.

01:10:48.595 --> 01:10:57.660
[INTERPOSING VOICES]

01:10:57.660 --> 01:10:59.085
Do you want await that?

01:10:59.085 --> 01:11:00.376
ANDREW BROGDON: Return-- sorry.

01:11:06.328 --> 01:11:15.660
[INAUDIBLE] So we're gonna
report success like that.

01:11:15.660 --> 01:11:17.260
And I'm still being
yelled at, but I

01:11:17.260 --> 01:11:19.162
think it's for
manageable reasons now.

01:11:25.114 --> 01:11:27.098
I'm going to look
up how to specify--

01:11:32.060 --> 01:11:34.126
yeah-- you wanna look
that up real quick

01:11:34.126 --> 01:11:35.000
while I'm doing this?

01:11:35.000 --> 01:11:39.699
[LAUGHING] Let's see if there's
anything that I've forgotten.

01:11:49.479 --> 01:11:55.740
MATT SULLIVAN: It uses
SDK, I think, in your--

01:11:55.740 --> 01:11:57.800
it's not the manifest,
it's the Gradle file--

01:11:57.800 --> 01:11:59.324
isn't it the build app.Gradle?

01:12:04.115 --> 01:12:05.490
ANDREW BROGDON:
Oh, you're right.

01:12:05.490 --> 01:12:05.700
MATT SULLIVAN: Yep.

01:12:05.700 --> 01:12:07.491
So it's app.Gradle--
You should check that.

01:12:07.491 --> 01:12:10.500
And you're going to
have minSdkversion

01:12:10.500 --> 01:12:11.829
and targetSdkversion.

01:12:11.829 --> 01:12:12.620
ANDREW BROGDON: OK.

01:12:16.620 --> 01:12:18.330
I'll do that in just a second.

01:12:18.330 --> 01:12:21.886
Did I have an old copy of
this hanging out in memory?

01:12:25.340 --> 01:12:27.066
MATT SULLIVAN: So it's
your build.Gradle.

01:12:33.215 --> 01:12:35.730
ANDREW BROGDON: minSdkversion.

01:12:35.730 --> 01:12:37.480
MATT SULLIVAN: This
isn't an example-- no,

01:12:37.480 --> 01:12:38.530
this is the correct one.

01:12:45.017 --> 01:12:47.512
ANDREW BROGDON: All right,
let's try this one more time.

01:12:58.990 --> 01:13:01.937
MATT SULLIVAN: Do, do, do,
do, do, do, do, do, do--

01:13:01.937 --> 01:13:04.270
ANDREW BROGDON: This is when
it crashes because we don't

01:13:04.270 --> 01:13:05.050
actually have a barometer.

01:13:05.050 --> 01:13:06.486
MATT SULLIVAN: Yes, that worked!

01:13:06.486 --> 01:13:06.880
[LAUGHING]

01:13:06.880 --> 01:13:08.650
Because it took the first
reading which was zero.

01:13:08.650 --> 01:13:10.270
Well, let's put it this
way, it didn't crash.

01:13:10.270 --> 01:13:11.478
ANDREW BROGDON: There you go.

01:13:19.930 --> 01:13:22.440
Let's see if we-- because
we need some way to ask it

01:13:22.440 --> 01:13:25.770
for another version, right?

01:13:25.770 --> 01:13:29.109
So we need something we
can tap on in our example.

01:13:29.109 --> 01:13:30.900
MATT SULLIVAN: Well,
we could just in the--

01:13:36.580 --> 01:13:38.080
ANDREW BROGDON:
Because I'm thinking

01:13:38.080 --> 01:13:39.621
we need some way to
say, hey, give me

01:13:39.621 --> 01:13:41.291
another value from the thing.

01:13:41.291 --> 01:13:43.040
And so, I was thinking
of adding a button.

01:13:45.830 --> 01:13:51.562
MATT SULLIVAN: Or you could
just have a stateful--

01:13:51.562 --> 01:13:55.354
you're going to do stateful
widget for that, aren't you?

01:13:55.354 --> 01:13:57.520
You could have a stateful
widget with a timer in it,

01:13:57.520 --> 01:14:03.376
and it just updates itself
every x number of milliseconds.

01:14:03.376 --> 01:14:05.250
ANDREW BROGDON: And then
we do it on pressed.

01:14:07.787 --> 01:14:09.120
So this part, I can just do now.

01:14:09.120 --> 01:14:12.940
It's-- my former life as Java
coder that I've completely

01:14:12.940 --> 01:14:14.820
forgotten.

01:14:14.820 --> 01:14:16.780
So we're going to
give it a method.

01:14:16.780 --> 01:14:18.260
That would be set--

01:14:18.260 --> 01:14:20.718
oh, wait, this should be--

01:14:20.718 --> 01:14:22.515
I'm going to be calling
setState() here.

01:14:22.515 --> 01:14:23.306
MATT SULLIVAN: Yep.

01:14:30.521 --> 01:14:31.687
ANDREW BROGDON: There we go.

01:14:34.431 --> 01:14:36.180
I love how the
auto-formatter can tell you

01:14:36.180 --> 01:14:38.685
if you've coded everything
correctly as far as closing

01:14:38.685 --> 01:14:42.760
your brackets and parentheses.

01:14:42.760 --> 01:14:46.440
So let's make sure
that I can do this.

01:14:46.440 --> 01:14:47.347
So I would go--

01:14:51.250 --> 01:14:53.474
can I do--

01:14:53.474 --> 01:14:56.130
MATT SULLIVAN: Where are
you printing the reading?

01:14:56.130 --> 01:14:58.120
Oh, you're currently
printing it up.

01:14:58.120 --> 01:14:59.870
ANDREW BROGDON: I just
realized something.

01:14:59.870 --> 01:15:03.190
So our setState()-- you
can't give it a future.

01:15:03.190 --> 01:15:03.940
MATT SULLIVAN: No.

01:15:03.940 --> 01:15:07.480
You have to call
another function which

01:15:07.480 --> 01:15:08.620
can take a future.

01:15:08.620 --> 01:15:11.230
So you can await another
function inside a setState().

01:15:11.230 --> 01:15:12.146
ANDREW BROGDON: Right.

01:15:14.810 --> 01:15:17.790
Well, I can await, and then
call setState() with the result,

01:15:17.790 --> 01:15:18.970
right?

01:15:18.970 --> 01:15:21.131
So I could do this.

01:15:21.131 --> 01:15:22.630
MATT SULLIVAN: So
if you created a--

01:15:27.235 --> 01:15:28.860
ANDREW BROGDON: See
what I can do here.

01:15:40.096 --> 01:15:41.220
I've butchered this so bad.

01:15:41.220 --> 01:15:45.351
[LAUGHTER] Coding without a net.

01:15:45.351 --> 01:15:46.350
MATT SULLIVAN: All good.

01:15:46.350 --> 01:15:48.308
ANDREW BROGDON: So this
will be an async, which

01:15:48.308 --> 01:15:50.420
I believe I can do, like that.

01:15:50.420 --> 01:16:00.170
And then, I'll do an await
Barometer.reading like that--

01:16:00.170 --> 01:16:04.679
so double reading equals.

01:16:04.679 --> 01:16:07.010
MATT SULLIVAN: Could you
just fire reading as well?

01:16:09.620 --> 01:16:10.520
[INTERPOSING VOICES]

01:16:10.520 --> 01:16:13.980
I'm not going to be a type Nazi.

01:16:13.980 --> 01:16:14.480
[LAUGHING]

01:16:14.480 --> 01:16:15.370
OK. setState().

01:16:15.370 --> 01:16:16.828
ANDREW BROGDON:
Yeah, you're right.

01:16:16.828 --> 01:16:19.850
That should be final, actually.

01:16:19.850 --> 01:16:21.350
setState(), and
then we'll give it--

01:16:24.110 --> 01:16:25.610
MATT SULLIVAN: And
you're just going

01:16:25.610 --> 01:16:27.865
to want to update whatever
the reading string is.

01:16:27.865 --> 01:16:29.240
ANDREW BROGDON:
Which we actually

01:16:29.240 --> 01:16:31.422
don't have in our state yet.

01:16:31.422 --> 01:16:33.406
MATT SULLIVAN: Mm-hmm.

01:16:33.406 --> 01:16:36.878
ANDREW BROGDON: So we
need a double reading.

01:16:39.854 --> 01:16:42.830
MATT SULLIVAN: Yep.

01:16:42.830 --> 01:16:56.296
ANDREW BROGDON: [INAUDIBLE]
That should go away,

01:16:56.296 --> 01:16:59.070
that should be closed off.

01:16:59.070 --> 01:17:00.550
There we go.

01:17:00.550 --> 01:17:04.320
MATT SULLIVAN: And you can reuse
the running on platformVersion

01:17:04.320 --> 01:17:06.190
if you just want
to print up the--

01:17:06.190 --> 01:17:07.065
ANDREW BROGDON: Yeah.

01:17:07.065 --> 01:17:08.774
Let's give this reading
a starting value.

01:17:08.774 --> 01:17:10.481
MATT SULLIVAN: Yeah,
that's a good point.

01:17:10.481 --> 01:17:12.780
ANDREW BROGDON: And then, we
can kill platformVersion--

01:17:12.780 --> 01:17:16.080
we don't need that anymore.

01:17:16.080 --> 01:17:19.400
And we can change
this to reading.

01:17:27.611 --> 01:17:29.060
All right, let's try it out.

01:17:33.790 --> 01:17:35.309
It doesn't like something.

01:17:35.309 --> 01:17:37.100
MATT SULLIVAN: Have
you restarted since you

01:17:37.100 --> 01:17:39.586
updated the Java code?

01:17:44.622 --> 01:17:45.830
ANDREW BROGDON: I'm missing--

01:17:45.830 --> 01:17:49.668
oh, I'm missing children.

01:17:49.668 --> 01:18:05.937
[INAUDIBLE] There we go.

01:18:05.937 --> 01:18:07.416
I wonder if I can hot reload.

01:18:10.390 --> 01:18:11.030
Interesting.

01:18:11.030 --> 01:18:14.410
MATT SULLIVAN: Oh, you want to
use column mainAxis centered,

01:18:14.410 --> 01:18:15.673
or something like that?

01:18:15.673 --> 01:18:16.660
ANDREW BROGDON: Yeah.

01:18:16.660 --> 01:18:17.687
Get my column up--

01:18:20.956 --> 01:18:27.514
MainAxisSize would be
MainAxisSize.max, I think.

01:18:27.514 --> 01:18:30.364
And then,
MainAxisAlignment.center.

01:18:34.268 --> 01:18:35.244
Here we go.

01:18:42.671 --> 01:18:44.670
MATT SULLIVAN: So every
time you hit the button,

01:18:44.670 --> 01:18:47.310
it's going to pull the--

01:18:47.310 --> 01:18:49.580
have you done initializer here?

01:18:49.580 --> 01:18:51.330
ANDREW BROGDON: Oh,
did I forget to call--

01:18:51.330 --> 01:18:53.760
the whole reason that
we just did the thing?

01:18:53.760 --> 01:18:55.110
MATT SULLIVAN: You may have
put it in and I missed it.

01:18:55.110 --> 01:18:55.609
[LAUGHING]

01:18:55.609 --> 01:18:57.390
ANDREW BROGDON:
No, I think I did,

01:18:57.390 --> 01:18:58.806
so this is going
to keep returning

01:18:58.806 --> 01:19:04.334
0, which is sort of fun.

01:19:04.334 --> 01:19:06.333
MATT SULLIVAN: It's really
low pressure in here.

01:19:06.333 --> 01:19:09.461
[LAUGHING]

01:19:09.919 --> 01:19:10.710
ANDREW BROGDON: OK.

01:19:10.710 --> 01:19:13.085
So I can tap on that and it's
going to keep returning 0--

01:19:13.085 --> 01:19:13.730
that's good.

01:19:13.730 --> 01:19:19.490
Let's actually initialize--
initPlatformState() is where

01:19:19.490 --> 01:19:22.230
we'd want to do that.

01:19:22.230 --> 01:19:24.790
We can get rid of
this and just do--

01:19:28.101 --> 01:19:33.961
await Barometer.initialize().

01:19:33.961 --> 01:19:35.210
We don't even need that value.

01:19:35.210 --> 01:19:36.890
MATT SULLIVAN: But the question
is do you even need to await it

01:19:36.890 --> 01:19:38.286
at that point, because it's--

01:19:40.454 --> 01:19:41.870
ANDREW BROGDON:
Yeah, that's true.

01:19:41.870 --> 01:19:44.158
I don't really care.

01:19:44.158 --> 01:19:46.578
All right, let's run this
and see what happens.

01:19:50.934 --> 01:19:55.133
As I subtly shove the table
forward with my massive girth.

01:19:55.133 --> 01:19:58.514
[LAUGHING]

01:20:03.310 --> 01:20:04.310
MATT SULLIVAN: So close.

01:20:04.310 --> 01:20:05.268
ANDREW BROGDON: I know.

01:20:07.710 --> 01:20:10.720
Syncing files-- let's
see if it crashes.

01:20:20.520 --> 01:20:23.470
OK.

01:20:23.470 --> 01:20:26.220
It's getting something--
it's going up.

01:20:26.220 --> 01:20:28.095
MATT SULLIVAN: Is it
97, or 87, or whatever--

01:20:28.095 --> 01:20:30.261
ANDREW BROGDON: I just
realized this is the smallest

01:20:30.261 --> 01:20:32.070
font forever, and
we're expecting people

01:20:32.070 --> 01:20:33.390
watching this on their phone.

01:20:33.390 --> 01:20:35.550
MATT SULLIVAN: They
just assume it works.

01:20:35.550 --> 01:20:36.964
[LAUGHING]

01:20:36.964 --> 01:20:37.880
All right, it says 67.

01:20:37.880 --> 01:20:39.210
ANDREW BROGDON: It says 67.0.

01:20:39.210 --> 01:20:40.680
We're not making
it up, we promise.

01:20:43.524 --> 01:20:45.690
MATT SULLIVAN: You could
just make it quickly bigger

01:20:45.690 --> 01:20:47.200
and hot reload.

01:20:47.200 --> 01:20:49.290
Hot reload would actually
work in this case.

01:20:49.290 --> 01:20:50.748
ANDREW BROGDON:
Yeah, you're right.

01:20:50.748 --> 01:20:54.180
Style-- this is Flutter stuff--

01:20:54.180 --> 01:20:55.410
I can totally do this quick.

01:20:55.410 --> 01:20:57.874
MATT SULLIVAN: Can't you
just do text style.fontSize?

01:20:57.874 --> 01:20:59.415
ANDREW BROGDON: Nah,
I was just going

01:20:59.415 --> 01:21:00.498
to do headline real quick.

01:21:00.498 --> 01:21:02.268
MATT SULLIVAN: Oh, OK.

01:21:02.268 --> 01:21:04.520
ANDREW BROGDON: OK, no I'm not.

01:21:04.520 --> 01:21:06.121
Did I just kill my--

01:21:06.121 --> 01:21:09.558
there we go.

01:21:09.558 --> 01:21:17.195
[INAUDIBLE] I used
to know how to code--

01:21:17.195 --> 01:21:18.125
I really did.

01:21:22.523 --> 01:21:23.981
MATT SULLIVAN: Oh,
that looks good.

01:21:36.156 --> 01:21:37.780
ANDREW BROGDON: This
is on my wish list

01:21:37.780 --> 01:21:39.989
of features for the plugin--

01:21:39.989 --> 01:21:41.530
just something to
help with this when

01:21:41.530 --> 01:21:43.549
you make a change somewhere--

01:21:43.549 --> 01:21:44.840
MATT SULLIVAN: Fix my brackets?

01:21:44.840 --> 01:21:47.298
ANDREW BROGDON: Yeah, I just
hosed the brackets completely,

01:21:47.298 --> 01:21:49.168
and got myself in
all kinds of trouble.

01:21:54.880 --> 01:21:56.682
I'm going to try this again.

01:22:05.340 --> 01:22:08.230
OK.

01:22:08.230 --> 01:22:09.690
Oh, my god, I just
broke my thumb.

01:22:09.690 --> 01:22:12.875
[LAUGHING]

01:22:13.405 --> 01:22:17.177
MATT SULLIVAN: Can everyone
see the button text now?

01:22:17.177 --> 01:22:18.010
ANDREW BROGDON: Wow.

01:22:18.010 --> 01:22:20.110
This is what happens when
you're up with a sick kid.

01:22:20.110 --> 01:22:21.310
I'm going to blame
it on my child.

01:22:21.310 --> 01:22:22.000
[LAUGHING]

01:22:22.000 --> 01:22:24.725
Oh, my god.

01:22:24.725 --> 01:22:27.100
MATT SULLIVAN: It's the never
ending boring Flutter show.

01:22:30.904 --> 01:22:33.070
And I can mock because I'm
not the one writing code.

01:22:33.070 --> 01:22:35.361
ANDREW BROGDON: You're not
the one behind the keyboard.

01:22:35.361 --> 01:22:37.206
[LAUGHING]

01:22:38.600 --> 01:22:39.183
There we go.

01:22:39.183 --> 01:22:39.974
MATT SULLIVAN: Yay.

01:22:39.974 --> 01:22:41.537
[CLAPPING]

01:22:41.537 --> 01:22:43.120
ANDREW BROGDON: I'm
a Google engineer,

01:22:43.120 --> 01:22:45.109
I can change a font size.

01:22:45.109 --> 01:22:46.733
MATT SULLIVAN: I do
barometer readings.

01:22:46.733 --> 01:22:48.950
[LAUGHING]

01:22:48.950 --> 01:22:51.670
ANDREW BROGDON: OK, let's see if
we can actually get what we're

01:22:51.670 --> 01:22:53.498
supposed to get out of the--

01:22:57.630 --> 01:22:59.440
so in our Java code--
if we can do that,

01:22:59.440 --> 01:23:00.815
then we'll have
a nice little bow

01:23:00.815 --> 01:23:03.620
to put on this episode,
at least for now.

01:23:03.620 --> 01:23:05.550
So we get a sensor event.

01:23:05.550 --> 01:23:07.082
What is this sensor event?

01:23:07.082 --> 01:23:08.468
Let's go look at that.

01:23:12.170 --> 01:23:14.450
Accuracy-- sensor-- values, OK.

01:23:16.980 --> 01:23:18.530
MATT SULLIVAN: So
then .values.first?

01:23:21.430 --> 01:23:24.290
ANDREW BROGDON: If we were in
Dart, we could do first, right?

01:23:24.290 --> 01:23:26.655
So what type is that?

01:23:26.655 --> 01:23:30.500
Oh, you're killing me with this.

01:23:30.500 --> 01:23:33.586
That's not going to hot reload
away, so we gotta retry that.

01:23:33.586 --> 01:23:35.210
MATT SULLIVAN: Why
is values red lined?

01:23:35.210 --> 01:23:36.630
ANDREW BROGDON:
It's the API level.

01:23:36.630 --> 01:23:36.940
MATT SULLIVAN: Oh, I see--

01:23:36.940 --> 01:23:37.440
API, OK.

01:23:40.290 --> 01:23:42.790
ANDREW BROGDON: We're going to
have an extensive description

01:23:42.790 --> 01:23:46.087
on this episode detailing the
things that we didn't have time

01:23:46.087 --> 01:23:46.920
to stop and look up.

01:23:49.850 --> 01:23:50.350
OK.

01:24:04.385 --> 01:24:05.510
MATT SULLIVAN: Makes sense.

01:24:08.160 --> 01:24:10.370
You know, 1013 sounds correct.

01:24:10.370 --> 01:24:10.870
[LAUGHING]

01:24:10.870 --> 01:24:12.720
No, I'm serious.

01:24:12.720 --> 01:24:18.599
1013 sounds like sea level.

01:24:18.599 --> 01:24:20.140
ANDREW BROGDON: Can
you mess with it?

01:24:20.140 --> 01:24:23.242
Did you ever see the
two Emilys do this with

01:24:23.242 --> 01:24:24.700
the accelerometers--
one of their--

01:24:24.700 --> 01:24:26.490
I think it was an I/O talk.

01:24:26.490 --> 01:24:31.120
Altitude meters-- can I
mess directly with the--

01:24:31.120 --> 01:24:33.160
MATT SULLIVAN: It's
probably built in if that's

01:24:33.160 --> 01:24:34.620
the-- because that's sea level.

01:24:41.830 --> 01:24:43.200
ANDREW BROGDON: Nope, same one.

01:24:43.200 --> 01:24:46.321
MATT SULLIVAN: The altitude
is maybe different.

01:24:46.321 --> 01:24:47.820
ANDREW BROGDON: So
that's location--

01:24:47.820 --> 01:24:49.280
OK.

01:24:49.280 --> 01:24:51.798
Virtual sensors?

01:24:51.798 --> 01:24:54.654
Barometer?

01:24:54.654 --> 01:24:56.090
OK.

01:24:56.090 --> 01:25:00.010
I feel as though we run some
kind of search engine here

01:25:00.010 --> 01:25:04.345
that can be useful
for these things.

01:25:04.345 --> 01:25:05.720
MATT SULLIVAN: I
feel like people

01:25:05.720 --> 01:25:07.719
would have believed that
that was true until you

01:25:07.719 --> 01:25:08.820
decided to question it.

01:25:08.820 --> 01:25:10.631
[LAUGHING]

01:25:10.631 --> 01:25:15.700
ANDREW BROGDON: How do
you mess with an emulator?

01:25:15.700 --> 01:25:18.020
Like, where is it coming
up with that value?

01:25:18.020 --> 01:25:19.150
MATT SULLIVAN: Maybe
it's built in by default,

01:25:19.150 --> 01:25:21.480
and you have to add a key
value type to update it?

01:25:45.402 --> 01:25:47.789
Let's type pressure.

01:25:47.789 --> 01:25:48.955
ANDREW BROGDON: Interesting.

01:25:53.420 --> 01:25:58.796
All right, I may just have to
claim victory with 1,013.25.

01:25:58.796 --> 01:26:00.545
There's some of these
that you can't set--

01:26:00.545 --> 01:26:08.950
the magnetometer-- with
[INAUDIBLE],, I want to say.

01:26:08.950 --> 01:26:10.510
MATT SULLIVAN: If you say so.

01:26:10.510 --> 01:26:11.260
ANDREW BROGDON: It's
been a long time

01:26:11.260 --> 01:26:12.760
since I was a physics major.

01:26:12.760 --> 01:26:14.230
I didn't think I'd say
that twice in this episode,

01:26:14.230 --> 01:26:14.920
but there it is.

01:26:14.920 --> 01:26:17.010
MATT SULLIVAN: Maybe
in the next episode,

01:26:17.010 --> 01:26:19.180
we'll plug in a real phone
and we'll give it a shot.

01:26:19.180 --> 01:26:20.680
ANDREW BROGDON: All
right, I'm going

01:26:20.680 --> 01:26:23.560
to declare moderate
victory on this one.

01:26:23.560 --> 01:26:26.252
So what have we done today?

01:26:26.252 --> 01:26:28.585
MATT SULLIVAN: We hot reloaded--
reload a piece of text.

01:26:28.585 --> 01:26:29.586
[LAUGHING]

01:26:29.586 --> 01:26:31.960
ANDREW BROGDON: Thank god we
had the segment with Chinmay

01:26:31.960 --> 01:26:33.700
to break up the episode today.

01:26:33.700 --> 01:26:35.650
So what have we done?

01:26:35.650 --> 01:26:39.700
We created a new
Flutter plugin project--

01:26:39.700 --> 01:26:41.480
we did that on the command line.

01:26:41.480 --> 01:26:44.770
We then opened it
in IntelliJ's IDEA.

01:26:44.770 --> 01:26:46.210
I'm going to go
ahead and blame me

01:26:46.210 --> 01:26:48.970
for importing it incorrectly,
and opening it incorrectly

01:26:48.970 --> 01:26:49.800
that way.

01:26:49.800 --> 01:26:51.790
I am sure it's possible
to do that correctly

01:26:51.790 --> 01:26:54.790
in IntelliJ's IDEA.

01:26:54.790 --> 01:26:56.770
We got pretty far
defining an interface

01:26:56.770 --> 01:26:58.990
in Dart for our plugin.

01:26:58.990 --> 01:27:02.230
And then, we went
into the Android code

01:27:02.230 --> 01:27:04.780
and added Java to actually
go out and get a sensor

01:27:04.780 --> 01:27:09.040
value for us that we
could then query in Dart.

01:27:09.040 --> 01:27:13.720
We talked with Chinmay about
Dart internals for plugins,

01:27:13.720 --> 01:27:17.410
and static versus dynamic
dispatch, and the many ways

01:27:17.410 --> 01:27:19.240
that you can
instrument and profile

01:27:19.240 --> 01:27:21.610
your apps, which is great.

01:27:21.610 --> 01:27:25.270
He did not make any mistakes
in the course of the episode.

01:27:25.270 --> 01:27:30.370
Then, we finished up
in Android Studio,

01:27:30.370 --> 01:27:33.340
making sure that we could
initialize the SensorManager

01:27:33.340 --> 01:27:34.570
properly.

01:27:34.570 --> 01:27:36.000
Attached ourselves
as a listener--

01:27:36.000 --> 01:27:40.110
we got the activity out of the
registrar, which was useful.

01:27:40.110 --> 01:27:43.360
And we're getting values
now, and pulling them back

01:27:43.360 --> 01:27:45.580
into Dart land,
and displaying them

01:27:45.580 --> 01:27:48.640
with buttons that often
have very large fonts, which

01:27:48.640 --> 01:27:51.950
is very important.

01:27:51.950 --> 01:27:52.690
So, yeah.

01:27:52.690 --> 01:27:54.273
Next time, we'll
probably want to look

01:27:54.273 --> 01:27:56.410
at sharpening up
this interface, maybe

01:27:56.410 --> 01:27:58.507
doing the stream approach.

01:27:58.507 --> 01:28:00.340
MATT SULLIVAN: Maybe
finishing it up in iOS.

01:28:00.340 --> 01:28:02.920
ANDREW BROGDON: And
adding something on iOS.

01:28:02.920 --> 01:28:05.900
I will endeavor not to
be in the next episode,

01:28:05.900 --> 01:28:09.490
so someone else will have
to clean up all my code.

01:28:09.490 --> 01:28:11.338
MATT SULLIVAN: I'm absent.

01:28:11.338 --> 01:28:13.090
[LAUGHING]

01:28:13.090 --> 01:28:14.980
ANDREW BROGDON: We'll
see if I manage it.

01:28:14.980 --> 01:28:16.210
Thanks for staying with us.

01:28:16.210 --> 01:28:18.542
Hopefully you got
something good out of it.

01:28:18.542 --> 01:28:20.500
Leave a comment below if
you have any questions

01:28:20.500 --> 01:28:21.790
about what you just saw.

01:28:21.790 --> 01:28:23.417
We certainly have some.

01:28:23.417 --> 01:28:24.211
[LAUGHING]

01:28:24.211 --> 01:28:27.320
And let us know what else you'd
like to see in the series.

01:28:27.320 --> 01:28:28.042
Thanks everybody.

01:28:28.042 --> 01:28:29.000
MATT SULLIVAN: Bye bye.

01:28:29.000 --> 01:28:31.100
[LAUGHING]

01:28:33.200 --> 01:28:36.550
[FUNK MUSIC]

