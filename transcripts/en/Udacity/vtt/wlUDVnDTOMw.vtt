WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:04.890
Here we are back in our playground file,
entitled, Lesson Two, Optionals.

00:00:04.890 --> 00:00:09.490
In the previous example, we accessed the
size property of an image in two steps.

00:00:09.490 --> 00:00:13.480
First, we unwrapped the image, and
then we accessed its size property.

00:00:15.130 --> 00:00:17.740
A more concise way to
accomplish the same goal

00:00:17.740 --> 00:00:21.780
is to access the properties of optional
types using optional chaining.

00:00:21.780 --> 00:00:24.950
You'll find that optional chaining
is used widely to access properties

00:00:24.950 --> 00:00:26.380
in UI kit.

00:00:26.380 --> 00:00:29.180
Here the question mark
unwraps the image optional,

00:00:29.180 --> 00:00:31.720
allowing access to its size property.

00:00:31.720 --> 00:00:33.780
This is optional chaining.

00:00:33.780 --> 00:00:36.310
If we check the type of
the size that's returned,

00:00:36.310 --> 00:00:39.760
we see that optional chaining returns
a variable that's also an optional.

00:00:41.490 --> 00:00:44.860
Because this size variable
is itself an optional,

00:00:44.860 --> 00:00:49.350
even if this image property is nil
there's no risk of a compiler error.

00:00:49.350 --> 00:00:50.550
But then, of course,

00:00:50.550 --> 00:00:54.580
to use the image size variable we
need to safely unwrap it as well.

00:00:54.580 --> 00:00:57.820
So when you see Optional Chaining
in action, it looks like this.

00:00:59.180 --> 00:01:02.230
This statement is actually
unwrapping two Optionals.

00:01:02.230 --> 00:01:04.819
The question mark is
unwrapping the image Optional.

00:01:04.819 --> 00:01:08.285
And the if let construction is
unwrapping the size Optional.

00:01:08.285 --> 00:01:09.955
When you look at the two
methods together,

00:01:09.955 --> 00:01:13.635
you can see that optional chaining
is slightly more concise.

00:01:13.635 --> 00:01:15.935
Let's go through one
more example together.

00:01:15.935 --> 00:01:18.035
Let's say we have a class called animal.

00:01:18.035 --> 00:01:20.755
And that animal class has
a property called tail.

00:01:20.755 --> 00:01:22.505
The tail property is an optional.

00:01:22.505 --> 00:01:24.445
Not all animals have tails.

00:01:24.445 --> 00:01:26.885
Here will instantiate an animal, Lenny.

00:01:26.885 --> 00:01:27.655
He's a lemur.

00:01:27.655 --> 00:01:29.715
With a 12 centimeter tail.

00:01:29.715 --> 00:01:31.590
Just like with UI image view.

00:01:31.590 --> 00:01:36.310
We can use optional chaining to access
a property of an optional type, like so.

00:01:36.310 --> 00:01:40.400
Over here in the sidebar we can see that
Lenny's tail is twelve centimeters long.

00:01:41.500 --> 00:01:45.530
But if we encounter an animal with
no tail like Gilbert the gorilla,

00:01:45.530 --> 00:01:47.090
the program won't crash.

00:01:47.090 --> 00:01:50.280
We've safely unwrapped our optionals and
handled the nil case.

