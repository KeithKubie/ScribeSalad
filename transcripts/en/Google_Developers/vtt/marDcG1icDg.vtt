WEBVTT
Kind: captions
Language: en

00:00:01.146 --> 00:00:01.700
ADAM EIJDENBERG: Thank
you, everyone,

00:00:01.700 --> 00:00:03.290
for coming this morning.

00:00:03.290 --> 00:00:06.260
Clearly the party last night
mustn't have been as good as

00:00:06.260 --> 00:00:08.060
the night before, because we
have a lot of people here very

00:00:08.060 --> 00:00:09.340
early in the morning
for an auth talk.

00:00:09.340 --> 00:00:10.940
So thank you for coming.

00:00:10.940 --> 00:00:12.490
My name is Adam Eijdenberg.

00:00:12.490 --> 00:00:14.550
I'm a product manager on our
Cloud Platform Team.

00:00:14.550 --> 00:00:16.280
This is my colleague Ben.

00:00:16.280 --> 00:00:17.170
BEN WILEY SITTLER:
I'm Ben Sittler.

00:00:17.170 --> 00:00:19.780
I'm an engineer on our
authorization and

00:00:19.780 --> 00:00:21.930
authentication team.

00:00:21.930 --> 00:00:24.690
ADAM EIJDENBERG: So before we
get started, maybe just a

00:00:24.690 --> 00:00:26.300
quick hands up around
the room.

00:00:26.300 --> 00:00:29.010
Who here gets really excited
about authentication?

00:00:31.920 --> 00:00:34.500
Really?

00:00:34.500 --> 00:00:37.100
I was going to let you in on a
bit of a secret, which is that

00:00:37.100 --> 00:00:39.860
I don't actually get as excited
about authentication

00:00:39.860 --> 00:00:42.630
as I do about using the API
that I'm trying to access.

00:00:42.630 --> 00:00:46.190
And I think one of the things
I really want to do today is

00:00:46.190 --> 00:00:49.740
show you how easy it is to
be able to get past the

00:00:49.740 --> 00:00:52.620
authentication step when using
Cloud Platform and get to

00:00:52.620 --> 00:00:58.930
using one of the 60 or so APIs
that Google provides.

00:00:58.930 --> 00:01:03.120
So when I look at a Cloud
platform, I see we have a

00:01:03.120 --> 00:01:04.700
number of different areas.

00:01:04.700 --> 00:01:08.620
We have services and APIs that
we provide that make it easy

00:01:08.620 --> 00:01:11.080
for you to get on with
solving your problem.

00:01:11.080 --> 00:01:14.810
We have services like Cloud
Storage, which is an object

00:01:14.810 --> 00:01:15.880
[INAUDIBLE].

00:01:15.880 --> 00:01:17.990
We have Cloud SQL.

00:01:17.990 --> 00:01:19.540
We have Cloud NoSQL.

00:01:19.540 --> 00:01:22.320
Two different ways of storing
data and manipulating that

00:01:22.320 --> 00:01:24.140
from within your application.

00:01:24.140 --> 00:01:26.030
We have things like Big Query,
which is a great way of

00:01:26.030 --> 00:01:28.355
manipulating huge amounts of
data and running query and

00:01:28.355 --> 00:01:31.020
getting [? business ?]
intelligence out of that.

00:01:31.020 --> 00:01:33.606
But now I look, and I see a
second half of what we have.

00:01:33.606 --> 00:01:37.040
We have a number of containers
where you can write code.

00:01:37.040 --> 00:01:39.200
We have App Engine, which is
the platform as a service

00:01:39.200 --> 00:01:41.210
offering, and we have Compute
Engine, which is our

00:01:41.210 --> 00:01:43.210
infrastructure as a
service offering.

00:01:43.210 --> 00:01:45.590
App Engine lets you write code
and automatically take care of

00:01:45.590 --> 00:01:48.460
scaling that and building a
great web application for you.

00:01:48.460 --> 00:01:50.570
Compute Engine gives you virtual
machines, so you can

00:01:50.570 --> 00:01:53.810
write your own code and
do it your own way.

00:01:53.810 --> 00:01:56.420
But what we don't see on this
diagram-- and it is a very

00:01:56.420 --> 00:01:57.100
pretty diagram.

00:01:57.100 --> 00:01:58.160
It came from our marketing

00:01:58.160 --> 00:01:59.640
department, and they actually--

00:01:59.640 --> 00:02:01.220
I actually learned a
new word this week.

00:02:01.220 --> 00:02:04.710
They called it a marketecture
diagram, and that was a new

00:02:04.710 --> 00:02:05.500
one for me.

00:02:05.500 --> 00:02:08.259
But what we don't see on here
is, I think, the glue that

00:02:08.259 --> 00:02:10.620
holds this together, which
is authentication and

00:02:10.620 --> 00:02:15.635
authorization, which is how
you identify the code that

00:02:15.635 --> 00:02:17.960
you're running to the rest
of Google services.

00:02:17.960 --> 00:02:20.590
So whether you're running your
code within our platform on

00:02:20.590 --> 00:02:23.620
App Engine or Compute Engine,
or you're running your code

00:02:23.620 --> 00:02:26.020
under your desk, or whether
you're running it on premise

00:02:26.020 --> 00:02:29.690
or if you're running it on
another service provider.

00:02:29.690 --> 00:02:31.270
And so what we're going to
go through today is the

00:02:31.270 --> 00:02:32.250
authentication part.

00:02:32.250 --> 00:02:35.700
How to identify your code to
Google so that you can use our

00:02:35.700 --> 00:02:37.690
APIs and you can get on with
building the application that

00:02:37.690 --> 00:02:38.940
you're trying to [INAUDIBLE].

00:02:41.410 --> 00:02:44.040
Now, we say auth a lot, and
auth can mean a lot of

00:02:44.040 --> 00:02:45.690
different things to
different people.

00:02:45.690 --> 00:02:47.480
I split into two areas--

00:02:47.480 --> 00:02:50.060
authentication and
authorization.

00:02:50.060 --> 00:02:53.610
So authentication, to me, is
knowing who you are, whether

00:02:53.610 --> 00:02:56.360
that's a person logging into
an application, or whether

00:02:56.360 --> 00:02:58.090
that's your application
making a call

00:02:58.090 --> 00:03:00.400
against one of our APIs.

00:03:00.400 --> 00:03:01.930
Today, we're going to go
through, we're going to show

00:03:01.930 --> 00:03:05.160
you how to write code to
authenticate against our APIs.

00:03:05.160 --> 00:03:07.800
We're going to show you easy
ways to do it using our client

00:03:07.800 --> 00:03:10.430
libraries, but we're also going
to show you how to do it

00:03:10.430 --> 00:03:11.240
from first principles.

00:03:11.240 --> 00:03:13.480
So if you're not using one of
our client libraries, and you

00:03:13.480 --> 00:03:15.500
actually really want to
understand what's going on

00:03:15.500 --> 00:03:16.640
behind the scenes, we're
going to show you

00:03:16.640 --> 00:03:18.570
how to do that, too.

00:03:18.570 --> 00:03:21.450
We're going to look at how to
do that from within the App

00:03:21.450 --> 00:03:22.760
Engine, within Compute Engine.

00:03:22.760 --> 00:03:25.400
We have some special tricks
there that make it very easy.

00:03:25.400 --> 00:03:27.450
And we're going to show you how
to do that from anywhere

00:03:27.450 --> 00:03:30.450
else, whether it's under your
desk on premise or on another

00:03:30.450 --> 00:03:32.300
hosting provider.

00:03:32.300 --> 00:03:34.280
The second part of auth that
we're going to talk about is

00:03:34.280 --> 00:03:35.620
authorization.

00:03:35.620 --> 00:03:37.160
And authorization--

00:03:37.160 --> 00:03:38.730
I always think of that
as the second step.

00:03:38.730 --> 00:03:40.550
Now we know who you are.

00:03:40.550 --> 00:03:42.020
Are you allowed to perform
the action that

00:03:42.020 --> 00:03:43.510
you're trying to do?

00:03:43.510 --> 00:03:45.360
So are you allowed to start
this virtual machine?

00:03:45.360 --> 00:03:46.610
Are you allowed to read
this particular

00:03:46.610 --> 00:03:48.880
file in Cloud Storage?

00:03:48.880 --> 00:03:50.470
We're going to spend some time
on that today, but we're not

00:03:50.470 --> 00:03:51.530
going to spend as much time.

00:03:51.530 --> 00:03:55.130
The authorization part is
primarily configuration.

00:03:55.130 --> 00:03:56.780
It's not as complicated.

00:03:56.780 --> 00:03:59.020
There aren't as many spots that
you can go wrong there.

00:03:59.020 --> 00:04:02.260
But what I want to show today
is how to set that up and go

00:04:02.260 --> 00:04:04.880
through some of the common
pitfalls I see when people are

00:04:04.880 --> 00:04:06.350
trying to do this and when
they're having difficulty

00:04:06.350 --> 00:04:07.600
accessing our APIs.

00:04:10.380 --> 00:04:13.010
So I thought maybe first, let's
look at what goes into

00:04:13.010 --> 00:04:16.579
making an API call against
a Google hosted API.

00:04:16.579 --> 00:04:19.519
The good news is, we host all
of our APIs in the same spot

00:04:19.519 --> 00:04:22.610
at Google, which means that once
you figure out how to do

00:04:22.610 --> 00:04:24.760
this once-- once you master this
in one spot-- you can hit

00:04:24.760 --> 00:04:28.450
any of our other APIs
the same way.

00:04:28.450 --> 00:04:31.600
So let's look at, say,
the Big Query API.

00:04:31.600 --> 00:04:34.220
So those of you that don't know
what Big Query is, it's a

00:04:34.220 --> 00:04:38.440
way of uploading a huge amount
of data-- gigabytes, hundreds

00:04:38.440 --> 00:04:42.200
of gigabytes of data-- into
Google, and running big

00:04:42.200 --> 00:04:44.770
queries against those SQL-like
statements to get

00:04:44.770 --> 00:04:46.210
results very quickly.

00:04:46.210 --> 00:04:48.250
I'm not going to focus on what
Big Query does, but what I am

00:04:48.250 --> 00:04:51.130
going to focus on is how to
make an API call that.

00:04:51.130 --> 00:04:55.270
And with Big Query, one of the
primary entities that you

00:04:55.270 --> 00:04:57.440
operate on are data sets.

00:04:57.440 --> 00:04:59.875
You upload data sets into a
project that you own, and

00:04:59.875 --> 00:05:03.030
those are resources that
you then manipulate.

00:05:03.030 --> 00:05:05.620
So let's look at an API call to
list the data sets that I

00:05:05.620 --> 00:05:08.580
have associated with
the project.

00:05:08.580 --> 00:05:12.290
All of our API calls are HTTP,
or more accurately, HTTPS.

00:05:12.290 --> 00:05:15.762
And when we make that API call,
we either do a get or a

00:05:15.762 --> 00:05:17.970
post or another type of
HTTP verb, and we

00:05:17.970 --> 00:05:19.320
specify a number of things.

00:05:19.320 --> 00:05:22.240
We specify the API that
we want to hit-- in

00:05:22.240 --> 00:05:23.810
this case, Big Query.

00:05:23.810 --> 00:05:25.710
We support multiple
versions of APIs.

00:05:25.710 --> 00:05:27.680
So here, we're accessing
version 2 of

00:05:27.680 --> 00:05:30.270
the Big Query API.

00:05:30.270 --> 00:05:33.310
The rest of the path that we
have here will vary a little

00:05:33.310 --> 00:05:34.410
bit by service.

00:05:34.410 --> 00:05:38.710
But a fairly common pattern we
see within the Cloud Platform

00:05:38.710 --> 00:05:41.450
Services is we're manipulating
resources

00:05:41.450 --> 00:05:42.970
that belong to a project.

00:05:42.970 --> 00:05:45.230
So typically, you would see the
word project somewhere in

00:05:45.230 --> 00:05:47.810
that path. then you'll see an
identifier for that project

00:05:47.810 --> 00:05:49.100
and that path.

00:05:49.100 --> 00:05:53.350
In this case, I can see project
number 1, 2, 3, 4, and

00:05:53.350 --> 00:05:54.600
I would try to list
the data sets

00:05:54.600 --> 00:05:57.410
associated with this project.

00:05:57.410 --> 00:06:01.350
We go against a common host--
the googleapis.com server.

00:06:01.350 --> 00:06:02.630
And now, the interesting bit.

00:06:02.630 --> 00:06:06.040
We have this authorization
header, and that header is all

00:06:06.040 --> 00:06:07.410
we need to get right.

00:06:07.410 --> 00:06:09.940
That passes in what we call a
bearer token, and that's a

00:06:09.940 --> 00:06:14.230
token that will then allow us to
access that particular API.

00:06:14.230 --> 00:06:16.940
So the focus today in our
presentation is going to be

00:06:16.940 --> 00:06:19.510
how to acquire one of those
access tokens so that you can

00:06:19.510 --> 00:06:21.880
make that API call, because
the rest of the API call's

00:06:21.880 --> 00:06:22.480
fairly simple.

00:06:22.480 --> 00:06:23.860
It's basic HTTP.

00:06:23.860 --> 00:06:25.670
Again, we have client libraries
for it, but we're

00:06:25.670 --> 00:06:29.580
going to show you how to do it
from first principle as well.

00:06:29.580 --> 00:06:33.720
So let's look at what one of
those tokens is to us.

00:06:33.720 --> 00:06:36.680
We call it an access token
behind the scenes, and when I

00:06:36.680 --> 00:06:40.260
think about access tokens, to
me, this is very much like an

00:06:40.260 --> 00:06:41.990
HTTP session cookie.

00:06:41.990 --> 00:06:44.740
You go through some kind of
dance to set it, we return it

00:06:44.740 --> 00:06:47.255
back, and then you staple that
to each of your requests that

00:06:47.255 --> 00:06:48.680
you send to us.

00:06:48.680 --> 00:06:51.470
And when we get one of those
access tokens, we look up,

00:06:51.470 --> 00:06:54.950
essentially, three pieces
of information.

00:06:54.950 --> 00:06:57.770
We authenticate we know
what application is

00:06:57.770 --> 00:07:00.030
associated with this call.

00:07:00.030 --> 00:07:02.820
What that means is that when you
want to make an API call

00:07:02.820 --> 00:07:05.570
against Google, you first must
register the application that

00:07:05.570 --> 00:07:06.510
you're building.

00:07:06.510 --> 00:07:10.010
Now, application doesn't mean
an Android app or a web app.

00:07:10.010 --> 00:07:12.730
This could just be a process
running under your desk.

00:07:12.730 --> 00:07:15.280
But you register an application
as that

00:07:15.280 --> 00:07:17.490
application that is
making that call.

00:07:17.490 --> 00:07:20.100
We also refer to that fairly
synonymously as the client

00:07:20.100 --> 00:07:23.220
that is associated with
that request.

00:07:23.220 --> 00:07:25.400
The second bit of information
that we have associated with

00:07:25.400 --> 00:07:27.620
the token is a user.

00:07:27.620 --> 00:07:30.495
So when you're making a request,
you may be making it

00:07:30.495 --> 00:07:33.980
on behalf of a user, or the
application might be

00:07:33.980 --> 00:07:35.010
acting on its own.

00:07:35.010 --> 00:07:37.320
And I'll give you an
example of that.

00:07:37.320 --> 00:07:40.500
Let's say that we're accessing
Google Drive.

00:07:40.500 --> 00:07:44.830
Google Drive is a consumer
product, but we have APIs go

00:07:44.830 --> 00:07:46.500
through the same infrastructure
so that you can

00:07:46.500 --> 00:07:49.470
register an application, allow
the user to click through a

00:07:49.470 --> 00:07:53.090
consent screen, and then your
application can access their

00:07:53.090 --> 00:07:55.420
data and their drive.

00:07:55.420 --> 00:07:58.280
And so that's a case where you
have a client that is acting

00:07:58.280 --> 00:07:59.900
on behalf of a user.

00:07:59.900 --> 00:08:03.240
That's not the typical pattern
that we see in Cloud.

00:08:03.240 --> 00:08:05.830
In Cloud, typically you are
building applications.

00:08:05.830 --> 00:08:07.990
You're building that on top of
our platform, on top of our

00:08:07.990 --> 00:08:09.140
infrastructure.

00:08:09.140 --> 00:08:11.230
And you might have your own set
of users, you might not

00:08:11.230 --> 00:08:13.270
have any users, you might just
have an application that is

00:08:13.270 --> 00:08:15.350
doing analysis with Big Query.

00:08:15.350 --> 00:08:17.770
So in this particular case, for
a typical Cloud Platform

00:08:17.770 --> 00:08:20.230
API, your user is your
application.

00:08:20.230 --> 00:08:23.010
One and the same thing.

00:08:23.010 --> 00:08:25.430
The third bit of information
that we have associated with

00:08:25.430 --> 00:08:28.910
an access token is one
or more scopes.

00:08:28.910 --> 00:08:32.419
When you get an access token,
it's not an all powerful being

00:08:32.419 --> 00:08:35.360
that lets you do anything
against any API.

00:08:35.360 --> 00:08:39.570
When you get that access token,
you request that we

00:08:39.570 --> 00:08:41.120
downscope it to let
you perform a

00:08:41.120 --> 00:08:42.850
certain set of actions.

00:08:42.850 --> 00:08:45.030
So, for example, when we had
the user clicking through a

00:08:45.030 --> 00:08:48.460
consent screen to access Google
Drive, they're not

00:08:48.460 --> 00:08:51.375
authorizing your application
to access their Gmail.

00:08:51.375 --> 00:08:54.240
They're only authorizing your
application to access the

00:08:54.240 --> 00:08:55.920
Google Drive content.

00:08:55.920 --> 00:08:58.020
And in the same way, because we
use the same architecture

00:08:58.020 --> 00:09:00.990
within Cloud, when you get an
access token to talk to Big

00:09:00.990 --> 00:09:04.660
Query, if you accidentally leak
that token, you can't

00:09:04.660 --> 00:09:06.770
just magically use that to start
virtual machines in a

00:09:06.770 --> 00:09:09.810
project, unless you requested
virtual machine scope when you

00:09:09.810 --> 00:09:11.060
started at the same time.

00:09:13.640 --> 00:09:16.130
So how do we get one
of these tokens?

00:09:16.130 --> 00:09:18.990
This can vary depending on whose
data is being accessed.

00:09:18.990 --> 00:09:22.760
Again, the first case where
we have user data--

00:09:22.760 --> 00:09:24.130
how do we get that?

00:09:24.130 --> 00:09:28.200
We register an application, we
write some magic code, we pop

00:09:28.200 --> 00:09:31.850
up a user consent screen, the
user consents to allow you to

00:09:31.850 --> 00:09:33.900
access the data on a certain
spot, and you get back an

00:09:33.900 --> 00:09:34.850
access token.

00:09:34.850 --> 00:09:37.720
I'm not going to talk through
that in any detail today.

00:09:37.720 --> 00:09:39.660
That's not going to be
the focus today.

00:09:39.660 --> 00:09:42.510
We have a heap of sessions on
Sign In with G+, which is

00:09:42.510 --> 00:09:45.980
built on top of this same behind
the scenes flow, and we

00:09:45.980 --> 00:09:47.660
have a lot of other resources
there that I could

00:09:47.660 --> 00:09:48.670
point you to later.

00:09:48.670 --> 00:09:51.850
What I'm going to focus on today
is how to help you build

00:09:51.850 --> 00:09:54.665
your application on top of Cloud
Platform, and how to get

00:09:54.665 --> 00:09:57.500
an access token for your
application, where there is no

00:09:57.500 --> 00:10:00.180
user present to agree
to a consent screen.

00:10:00.180 --> 00:10:02.640
You need a way of getting
credentials so that your

00:10:02.640 --> 00:10:05.630
application can then talk to
Google and access APIs to

00:10:05.630 --> 00:10:06.880
manipulate your data.

00:10:09.910 --> 00:10:12.150
So there's two parts to this.

00:10:12.150 --> 00:10:14.450
The first part is we need to
create a project and do some

00:10:14.450 --> 00:10:15.390
configuration.

00:10:15.390 --> 00:10:17.780
I'm going to go through
and talk about that.

00:10:17.780 --> 00:10:18.780
Then we get to the fun bit.

00:10:18.780 --> 00:10:21.120
Ben's going to then show us how
to write some code to use

00:10:21.120 --> 00:10:23.010
the data that we've configured,
and to make that

00:10:23.010 --> 00:10:24.260
successful API call.

00:10:27.080 --> 00:10:28.200
So the first thing we
need to do is we

00:10:28.200 --> 00:10:29.870
need to create a project.

00:10:29.870 --> 00:10:36.820
And a project is an entity that
basically represents your

00:10:36.820 --> 00:10:39.450
relationship as a developer with
Google for the context of

00:10:39.450 --> 00:10:41.120
what you're trying to do.

00:10:41.120 --> 00:10:45.180
So when we create a project, I
think of this as a container

00:10:45.180 --> 00:10:46.560
for a number of things.

00:10:46.560 --> 00:10:48.620
It's a container for resources
that will belong to y our

00:10:48.620 --> 00:10:49.760
application.

00:10:49.760 --> 00:10:52.130
So, for example, if you're using
Cloud Storage, you'll be

00:10:52.130 --> 00:10:53.350
creating buckets.

00:10:53.350 --> 00:10:55.800
Those buckets are associated
with a project.

00:10:55.800 --> 00:10:57.665
That project, ultimately, will
get the bill for the usage of

00:10:57.665 --> 00:10:58.990
those buckets.

00:10:58.990 --> 00:11:00.890
Similarly, when you create
virtual machines, they're

00:11:00.890 --> 00:11:02.230
associated with the project.

00:11:02.230 --> 00:11:05.300
When you upload Big Query data
sets, they're are associated

00:11:05.300 --> 00:11:06.750
with the project.

00:11:06.750 --> 00:11:09.450
So one key part of what a
project does is access a

00:11:09.450 --> 00:11:11.230
container for the resources
that belong to your

00:11:11.230 --> 00:11:13.470
application.

00:11:13.470 --> 00:11:16.350
The second key part to what a
project does is this is where

00:11:16.350 --> 00:11:19.740
you register an application that
wants to make an API call

00:11:19.740 --> 00:11:21.150
against Google.

00:11:21.150 --> 00:11:23.390
And those API calls
aren't limited to

00:11:23.390 --> 00:11:25.190
Cloud Platform resources.

00:11:25.190 --> 00:11:28.420
Any of the other 60 APIs that
Google provides goes through

00:11:28.420 --> 00:11:30.100
the same common area.

00:11:30.100 --> 00:11:32.420
So this is where we will
register our application.

00:11:32.420 --> 00:11:34.430
This is where we will get
credentials that we can then

00:11:34.430 --> 00:11:37.560
use to make subsequent
API calls.

00:11:37.560 --> 00:11:40.310
There's also a bunch of other
configuration that lives

00:11:40.310 --> 00:11:41.210
within a project.

00:11:41.210 --> 00:11:43.420
We have information there about
billing, if you're using

00:11:43.420 --> 00:11:45.230
a service that requires
payment.

00:11:45.230 --> 00:11:48.080
We have information about quota
that may be set up,

00:11:48.080 --> 00:11:50.570
either a free quota, or you
can actually specify and

00:11:50.570 --> 00:11:53.830
configure a per user quota for
individual users that are

00:11:53.830 --> 00:11:56.530
using API on your behalf.

00:11:56.530 --> 00:11:59.810
We also track here-- this
is also where you enter

00:11:59.810 --> 00:12:01.460
authorization information.

00:12:01.460 --> 00:12:03.730
And I'll go through that
in more detail later.

00:12:03.730 --> 00:12:06.190
But essentially, this is where
you can create a team.

00:12:06.190 --> 00:12:08.960
A project is not tied to
an individual person.

00:12:08.960 --> 00:12:12.060
That's not typically how
developers operate.

00:12:12.060 --> 00:12:13.910
You have other developers that
you're working with.

00:12:13.910 --> 00:12:17.130
You shouldn't have to share
passwords to log in to manage

00:12:17.130 --> 00:12:18.590
a common set of resources.

00:12:18.590 --> 00:12:21.850
So this is where you can add
your teammates to your project

00:12:21.850 --> 00:12:25.540
and work and collaborate
together.

00:12:25.540 --> 00:12:26.530
So we created a project.

00:12:26.530 --> 00:12:27.910
We gave it a name before.

00:12:27.910 --> 00:12:30.060
The next thing we need to do
is we need to enable these

00:12:30.060 --> 00:12:32.550
services that we're interested
in using.

00:12:32.550 --> 00:12:35.990
So here, I'm enabling the
Big Query service.

00:12:35.990 --> 00:12:39.380
Now, I should just note, this is
the current what we call a

00:12:39.380 --> 00:12:43.040
developer console that we're
looking in through today.

00:12:43.040 --> 00:12:46.670
We have another console that I
think you might have seen some

00:12:46.670 --> 00:12:48.590
other screenshots of this week
if you've been through some of

00:12:48.590 --> 00:12:50.810
the other Cloud Platform
sessions.

00:12:50.810 --> 00:12:52.380
It's called the Cloud Console.

00:12:52.380 --> 00:12:54.200
These are essentially
equivalent.

00:12:54.200 --> 00:12:56.700
The same functionality is fairly
much present in each.

00:12:56.700 --> 00:12:59.980
Cloud Console is what we're
moving towards for Cloud, but

00:12:59.980 --> 00:13:03.580
it's still not quite has all of
the authentication things

00:13:03.580 --> 00:13:05.060
that we're going
to show today.

00:13:05.060 --> 00:13:07.480
So that's why I'm still
using the old UI.

00:13:07.480 --> 00:13:09.450
If you do use the new UI to
create a project-- and I do

00:13:09.450 --> 00:13:11.920
actually recommend doing that,
because it has a nice tie-in

00:13:11.920 --> 00:13:13.500
with Google App Engine
that we can talk

00:13:13.500 --> 00:13:15.270
about in detail later--

00:13:15.270 --> 00:13:17.460
you can still click back through
to the developer

00:13:17.460 --> 00:13:18.720
console and see that data.

00:13:18.720 --> 00:13:19.710
It's stored in the same spot.

00:13:19.710 --> 00:13:23.180
You can manipulate with
either user interface.

00:13:23.180 --> 00:13:23.890
Let's keep going.

00:13:23.890 --> 00:13:26.240
We've enabled the service.

00:13:26.240 --> 00:13:27.490
Now we need to do
something called

00:13:27.490 --> 00:13:30.760
create a service account.

00:13:30.760 --> 00:13:34.760
Now, let's think about what
happens when you run a process

00:13:34.760 --> 00:13:37.070
on your local workstation.

00:13:37.070 --> 00:13:39.870
You log into your operating
system as a user, and when you

00:13:39.870 --> 00:13:44.630
start a process, it's associated
with your user ID.

00:13:44.630 --> 00:13:48.710
What that means is that when you
try and, say, open a file

00:13:48.710 --> 00:13:51.620
from within your application,
your operating

00:13:51.620 --> 00:13:53.530
system will do a check.

00:13:53.530 --> 00:13:56.440
It knows what file you're trying
to access, it knows

00:13:56.440 --> 00:13:59.060
what user the application is
running in, and then it does a

00:13:59.060 --> 00:14:03.620
check to make sure that the user
ID has access to the file

00:14:03.620 --> 00:14:05.710
that you're reading.

00:14:05.710 --> 00:14:08.510
Now, if you were to deploy that
same application into a

00:14:08.510 --> 00:14:10.670
production environment,
typically you wouldn't run it

00:14:10.670 --> 00:14:12.880
as your personal account.

00:14:12.880 --> 00:14:14.690
You might set up
a role account.

00:14:14.690 --> 00:14:16.340
Let's say you're running
Apache in production.

00:14:16.340 --> 00:14:20.500
You might use the Nobody
account on a box.

00:14:20.500 --> 00:14:22.350
So when you run that
application, you

00:14:22.350 --> 00:14:23.770
assign it an identity.

00:14:23.770 --> 00:14:26.040
You might use pseudo and
[INAUDIBLE] and swap it and

00:14:26.040 --> 00:14:28.430
run it out as a Nobody user.

00:14:28.430 --> 00:14:32.170
Similarly, when you access a
Google API, we need to know

00:14:32.170 --> 00:14:35.140
who your application is.

00:14:35.140 --> 00:14:37.350
The user ID associated
with the process--

00:14:37.350 --> 00:14:40.210
that doesn't mean anything to
us, when you're accessing

00:14:40.210 --> 00:14:42.000
across the internet
to our services.

00:14:42.000 --> 00:14:44.920
So instead, what we have you do
is we have you assign your

00:14:44.920 --> 00:14:47.290
application a service account.

00:14:47.290 --> 00:14:50.110
And a service account is very
similar to a role account.

00:14:50.110 --> 00:14:53.790
It's our way of knowing who
your application is.

00:14:53.790 --> 00:14:54.920
So we have a couple of
different ways of

00:14:54.920 --> 00:14:55.690
setting this up.

00:14:55.690 --> 00:14:57.530
We have some neat tricks
[INAUDIBLE]

00:14:57.530 --> 00:15:00.050
App Engine, but right now,
we're going to create a

00:15:00.050 --> 00:15:02.830
service account that has a
private key that we can then

00:15:02.830 --> 00:15:05.730
download and put into our
application to access APIs.

00:15:08.360 --> 00:15:11.990
So the very first time we click
through this flow, we do

00:15:11.990 --> 00:15:14.270
get prompted to enter some
branding information about our

00:15:14.270 --> 00:15:15.970
application.

00:15:15.970 --> 00:15:18.300
This is really useful if we were
accessing one of those

00:15:18.300 --> 00:15:21.080
APIs like Drive API, where we
need to pop a consent screen

00:15:21.080 --> 00:15:24.020
up to users, and they need to
see some information about who

00:15:24.020 --> 00:15:26.900
is this crazy app that's trying
to access my data?

00:15:26.900 --> 00:15:30.250
This is completely irrelevant to
the Cloud Platform in terms

00:15:30.250 --> 00:15:31.690
of service accounts.

00:15:31.690 --> 00:15:33.880
So skip this screen, fill in the
[INAUDIBLE] field, which

00:15:33.880 --> 00:15:36.450
is the name, and
then continue.

00:15:36.450 --> 00:15:38.910
Service accounts, they don't
get consent screens.

00:15:38.910 --> 00:15:40.630
There's no human associated
with it.

00:15:40.630 --> 00:15:42.430
There's nothing for them to
click, so just ignore this

00:15:42.430 --> 00:15:45.640
screen and move back on.

00:15:45.640 --> 00:15:48.060
So now we have an opportunity
where we can select what type

00:15:48.060 --> 00:15:50.620
of client are we creating, or
what type of application are

00:15:50.620 --> 00:15:52.090
we registering?

00:15:52.090 --> 00:15:55.150
And here, if I was doing one of
the consent driven flows, I

00:15:55.150 --> 00:15:58.030
might pick a web application.

00:15:58.030 --> 00:16:00.140
Because I want a service
account, I want an identity

00:16:00.140 --> 00:16:01.010
for my application.

00:16:01.010 --> 00:16:04.780
We hit service account, and
then we generate a public

00:16:04.780 --> 00:16:06.220
private key on our service.

00:16:06.220 --> 00:16:08.385
We throw away the private
key component.

00:16:08.385 --> 00:16:09.440
Well, we don't throw it away.

00:16:09.440 --> 00:16:11.040
We let you download it, and
then we throw it away.

00:16:11.040 --> 00:16:14.070
We just then keep the public
component off that.

00:16:14.070 --> 00:16:15.980
We give you a file that
you download.

00:16:15.980 --> 00:16:18.610
This is essentially your
password, or your credentials

00:16:18.610 --> 00:16:21.640
that you'll use when you access
our services on behalf

00:16:21.640 --> 00:16:24.500
of your application.

00:16:24.500 --> 00:16:25.860
We do actually encrypt.

00:16:25.860 --> 00:16:29.990
We use a PKCS12 format, which
is an encrypted private key

00:16:29.990 --> 00:16:34.210
format, and it has a password
of notasecret.

00:16:34.210 --> 00:16:36.320
So don't tell anyone, but write
that down, and we'll use

00:16:36.320 --> 00:16:37.960
that for the next step.

00:16:40.460 --> 00:16:43.410
When we create that
service account--

00:16:43.410 --> 00:16:46.390
they never take screenshots of
my username that I've created

00:16:46.390 --> 00:16:47.950
on my service account here.

00:16:47.950 --> 00:16:51.180
But we get an email address
associated with that as well.

00:16:51.180 --> 00:16:54.170
And that email address, again,
is not a human user.

00:16:54.170 --> 00:16:56.290
Don't try and add that
to your G+ posts.

00:16:56.290 --> 00:16:58.480
They don't post very often.

00:16:58.480 --> 00:17:00.670
But you do need to take note of
that email address, because

00:17:00.670 --> 00:17:03.560
when we try and set access
control up later, we use that

00:17:03.560 --> 00:17:06.290
email address to represent
this is the user that I'm

00:17:06.290 --> 00:17:10.890
trying to access, even though
that user is an application.

00:17:10.890 --> 00:17:12.670
There are also some options
here for rotating

00:17:12.670 --> 00:17:13.609
that private key.

00:17:13.609 --> 00:17:15.300
You can create a new one.

00:17:15.300 --> 00:17:19.780
So if you do accidentally lose
that private key file, you can

00:17:19.780 --> 00:17:25.579
create a new one here, and
then disable the old one.

00:17:25.579 --> 00:17:28.020
So we talked through how
to configure a project.

00:17:28.020 --> 00:17:30.920
We set a project up, we've
created a service account,

00:17:30.920 --> 00:17:33.710
we've download a private key,
we have an email address

00:17:33.710 --> 00:17:36.260
associated with it, and now
we're ready to use it.

00:17:36.260 --> 00:17:38.250
I'm going to hand off to Ben,
who's now going to show us how

00:17:38.250 --> 00:17:40.820
to write some code to use
that service account

00:17:40.820 --> 00:17:43.470
to access an API.

00:17:43.470 --> 00:17:44.670
BEN WILEY SITTLER:
Thank you, Adam.

00:17:44.670 --> 00:17:47.600
So let's get an access token.

00:17:47.600 --> 00:17:53.590
Now, remember that we have an
email address that represents

00:17:53.590 --> 00:17:56.250
our surface account-- our
application's identity.

00:17:56.250 --> 00:17:58.990
We also have an API we're
trying to access--

00:17:58.990 --> 00:18:00.420
in this case, Big Query.

00:18:00.420 --> 00:18:03.440
And for each of the Cloud APIs,
there's typically a

00:18:03.440 --> 00:18:06.540
scope, or two different scopes,
for the API-- a full

00:18:06.540 --> 00:18:09.220
access scope and a
read only scope.

00:18:09.220 --> 00:18:11.690
For Big Query we'll use
the full access scope.

00:18:11.690 --> 00:18:14.390
Now, to actually get an
access token, we need

00:18:14.390 --> 00:18:17.230
to create an assertion.

00:18:17.230 --> 00:18:22.010
To do this, we created a JSON
object, which describes who we

00:18:22.010 --> 00:18:25.970
are, what we're asking for, and
who we're sending this to,

00:18:25.970 --> 00:18:28.000
and how long the assertion
is good for.

00:18:28.000 --> 00:18:29.860
We need to make sure that
someone can't take this

00:18:29.860 --> 00:18:33.130
assertion and replay it later.

00:18:33.130 --> 00:18:41.610
We then JSON encode this, base
64, URL safe encode it, strip

00:18:41.610 --> 00:18:46.580
off the equals signs,
and sign it.

00:18:46.580 --> 00:18:50.420
The signing uses the key that
Adam showed you earlier, with

00:18:50.420 --> 00:18:51.920
the password notasecret.

00:18:55.730 --> 00:18:59.950
So in this case, we're going to
use the open SSL library to

00:18:59.950 --> 00:19:07.900
sign it, reusing RSA to sign
and a SHA256 signature.

00:19:07.900 --> 00:19:14.700
And once we append that to our
earlier assertion, it's ready

00:19:14.700 --> 00:19:16.430
to send to Google.

00:19:16.430 --> 00:19:23.250
So we send this to
accounts.google.com, and this

00:19:23.250 --> 00:19:27.025
assertion gives us back
an access token.

00:19:27.025 --> 00:19:28.720
It looks like this.

00:19:28.720 --> 00:19:30.580
Or rather, we get a
JSON object that

00:19:30.580 --> 00:19:32.060
includes an access token.

00:19:34.570 --> 00:19:37.610
This, you may notice,
has an expires_in.

00:19:37.610 --> 00:19:41.460
This access token, if someone
else intercepts it, will only

00:19:41.460 --> 00:19:43.115
be good for them for an hour.

00:19:43.115 --> 00:19:46.010
Of course, you should be using
SSL everywhere, and make sure

00:19:46.010 --> 00:19:47.640
that no one can intercept it.

00:19:47.640 --> 00:19:50.560
But regardless, at the end of
the hour, you'll need to get

00:19:50.560 --> 00:19:52.400
another one.

00:19:52.400 --> 00:19:53.990
So go ahead.

00:19:53.990 --> 00:19:56.480
Store this in your mem cache.

00:19:56.480 --> 00:19:59.850
Share it across the instances
of your application.

00:19:59.850 --> 00:20:01.350
Create multiple of them
if you need to.

00:20:03.880 --> 00:20:05.330
Now, let's use this.

00:20:05.330 --> 00:20:11.070
To actually access the API, we
would like to put that access

00:20:11.070 --> 00:20:15.430
token we just got into the HTTP
authorization header.

00:20:15.430 --> 00:20:18.110
This is fairly straightforward.

00:20:18.110 --> 00:20:22.840
We access our project's
big store data sets,

00:20:22.840 --> 00:20:24.420
and we get back this.

00:20:24.420 --> 00:20:27.380
Not very exciting, but that is
not what you were looking for.

00:20:27.380 --> 00:20:28.795
You were looking for working.

00:20:31.794 --> 00:20:34.560
Now, this can be even easier.

00:20:34.560 --> 00:20:36.830
We have client libraries
for a variety of

00:20:36.830 --> 00:20:39.280
platforms and languages.

00:20:39.280 --> 00:20:40.730
Here, we're going
to show Python.

00:20:40.730 --> 00:20:44.050
And in this case, we still need
those same three pieces

00:20:44.050 --> 00:20:45.000
of information--

00:20:45.000 --> 00:20:51.010
your service account's email
address, its private key, and

00:20:51.010 --> 00:20:54.140
the API scope we're
trying to access.

00:20:54.140 --> 00:20:57.790
We use the
SignedJwtAssertionCredentials

00:20:57.790 --> 00:21:02.680
class, and we use this to
authorize an HTTP object.

00:21:02.680 --> 00:21:04.240
Now, you may wonder what's
going on here.

00:21:04.240 --> 00:21:07.990
What this will give us is an
HTTP object, as you may

00:21:07.990 --> 00:21:11.300
already be comfortable
using in Python.

00:21:11.300 --> 00:21:15.300
But unlike other HTTP objects,
this one is wrapped and sends

00:21:15.300 --> 00:21:17.530
along that authorization header
automatically with

00:21:17.530 --> 00:21:18.780
every request.

00:21:20.760 --> 00:21:23.320
So what do we get back?

00:21:23.320 --> 00:21:26.500
An HTTP object we can use
to access that same API.

00:21:29.180 --> 00:21:32.710
And indeed, we get back exactly
the same answer.

00:21:32.710 --> 00:21:35.400
Perhaps a boring, but
it works, and

00:21:35.400 --> 00:21:37.380
that's what you want.

00:21:37.380 --> 00:21:41.850
Now, we also have something
called the discovery API.

00:21:41.850 --> 00:21:47.040
The discovery API gives back a
JSON introspection for each of

00:21:47.040 --> 00:21:50.960
the API versions that
Google publishes.

00:21:50.960 --> 00:21:52.530
We have not just Cloud APIs.

00:21:52.530 --> 00:21:54.650
We have a wide variety
of APIs, as

00:21:54.650 --> 00:21:56.300
Adam mentioned earlier.

00:21:56.300 --> 00:22:00.720
But for all of these APIs, this
discovery API returns the

00:22:00.720 --> 00:22:03.860
methods, the parameters, and
how to encode the requests,

00:22:03.860 --> 00:22:07.480
and how to read back
the responses.

00:22:07.480 --> 00:22:11.930
In this case, we are looking for
the data sets API from Big

00:22:11.930 --> 00:22:16.160
Query, and in particular, we're
looking for the list

00:22:16.160 --> 00:22:20.310
method with the project
ID mentioned earlier.

00:22:20.310 --> 00:22:23.730
And note that once you call
that list method, you're

00:22:23.730 --> 00:22:25.010
getting back a request object.

00:22:25.010 --> 00:22:27.200
But nothing has actually been
sent to a server yet.

00:22:27.200 --> 00:22:28.860
For that, you need
to call execute.

00:22:28.860 --> 00:22:31.650
And here is where special
HTTP object comes in.

00:22:31.650 --> 00:22:36.250
When we call execute, we pass in
our decorated HTTP object,

00:22:36.250 --> 00:22:38.740
and this means the request
will be executed with the

00:22:38.740 --> 00:22:41.420
authorization header.

00:22:41.420 --> 00:22:45.532
Indeed, response is as before.

00:22:45.532 --> 00:22:49.980
Now, we also have Google
hosted environments.

00:22:49.980 --> 00:22:52.850
I'm sure you've all heard of App
Engine and Compute Engine.

00:22:52.850 --> 00:22:56.130
And we can make this
even easier.

00:22:56.130 --> 00:22:58.430
Remember earlier, we had three
pieces of information.

00:23:01.130 --> 00:23:03.940
Adam's going to tell you more
about how we use this.

00:23:03.940 --> 00:23:04.550
ADAM EIJDENBERG:
Thank you, Ben.

00:23:04.550 --> 00:23:07.710
So what Ben's gone through and
shown us is how to use that

00:23:07.710 --> 00:23:10.610
private key that we created
before, and how to then use

00:23:10.610 --> 00:23:13.010
that to generate what we call an
assertion, and then how to

00:23:13.010 --> 00:23:15.550
sign that assertion with
that private key,

00:23:15.550 --> 00:23:16.940
send that to Google--

00:23:16.940 --> 00:23:18.010
now we have an access token.

00:23:18.010 --> 00:23:18.730
We're ready for business.

00:23:18.730 --> 00:23:23.830
Once we have that access token,
we can hit those APIs.

00:23:23.830 --> 00:23:26.080
We can do exactly the same thing
in Compute Engine and

00:23:26.080 --> 00:23:27.290
Google App Engine.

00:23:27.290 --> 00:23:30.400
The neat thing about Compute
Engine and App Engine is they

00:23:30.400 --> 00:23:32.830
are already running on Google's
infrastructure.

00:23:32.830 --> 00:23:34.750
Because they're running in
our data center on our

00:23:34.750 --> 00:23:36.830
infrastructure, we know
who they are.

00:23:36.830 --> 00:23:41.390
We can prove that that app is
your app, and that app is

00:23:41.390 --> 00:23:42.210
belonging to another project.

00:23:42.210 --> 00:23:43.270
We know this.

00:23:43.270 --> 00:23:46.300
And so what that means is that
we still use a surface account

00:23:46.300 --> 00:23:49.520
to access APIs, but we use a
surface account that has built

00:23:49.520 --> 00:23:50.840
credentials.

00:23:50.840 --> 00:23:53.940
So what that means is that
when you start a Compute

00:23:53.940 --> 00:23:57.730
Engine virtual machine, you can
tell it to use a surface

00:23:57.730 --> 00:24:00.040
account, and here are the
scopes that I want.

00:24:00.040 --> 00:24:02.630
And then from within that
virtual machine, we can make

00:24:02.630 --> 00:24:05.570
access tokens available directly
to your application

00:24:05.570 --> 00:24:08.155
without ever needing to
see a private key.

00:24:08.155 --> 00:24:09.890
And exactly the same
with an App Engine.

00:24:09.890 --> 00:24:12.520
When you create an App Engine
app, we create a service

00:24:12.520 --> 00:24:15.170
account associated with that App
Engine app, and then you

00:24:15.170 --> 00:24:15.780
can use that.

00:24:15.780 --> 00:24:17.800
You can add that to access
control lists for other

00:24:17.800 --> 00:24:20.520
services and other projects,
and then you can get access

00:24:20.520 --> 00:24:22.370
tokens for that straightaway.

00:24:22.370 --> 00:24:25.790
And so Ben's going to now
show us how to do that.

00:24:25.790 --> 00:24:27.710
BEN WILEY SITTLER:
Thank you, Adam.

00:24:27.710 --> 00:24:30.420
So let's start with
App Engine.

00:24:30.420 --> 00:24:32.970
Now, before, remember, we
needed three pieces of

00:24:32.970 --> 00:24:33.460
information.

00:24:33.460 --> 00:24:36.130
We needed the email address for
our service account, we

00:24:36.130 --> 00:24:39.530
needed a private key, and
we needed an API scope.

00:24:39.530 --> 00:24:43.100
Only the last one
is needed here.

00:24:43.100 --> 00:24:47.570
We use the App Identity API
to get an access token.

00:24:47.570 --> 00:24:50.480
You notice we did not
sign an assertion.

00:24:50.480 --> 00:24:52.430
We didn't have to make
an HTTP request to

00:24:52.430 --> 00:24:54.030
get our access token.

00:24:54.030 --> 00:24:55.810
This is all handled for
us by App Engine.

00:24:58.730 --> 00:25:02.170
Now, our client libraries
also make this easy.

00:25:02.170 --> 00:25:06.190
You can use the app assertion
credentials class to get the

00:25:06.190 --> 00:25:11.280
same effect, and this gets you
back a decorated HTTP object

00:25:11.280 --> 00:25:13.790
very similar to the
one we saw before.

00:25:13.790 --> 00:25:16.570
In fact, we can do
the same thing in

00:25:16.570 --> 00:25:18.430
Google Compute Engine.

00:25:18.430 --> 00:25:21.020
As Adam mentioned, you need to
tell Compute Engine which

00:25:21.020 --> 00:25:23.600
scopes your VM is allowed
to access.

00:25:23.600 --> 00:25:26.700
So in this case, we're
going to let instance

00:25:26.700 --> 00:25:28.650
foobar access Big Query.

00:25:32.210 --> 00:25:34.670
To fetch a token in
Compute Engine is

00:25:34.670 --> 00:25:36.440
actually an HTTP request.

00:25:36.440 --> 00:25:39.060
We can talk to the metadata
server and get back an access

00:25:39.060 --> 00:25:44.700
token, just as before.

00:25:44.700 --> 00:25:47.820
Now, once again, you can use our
client libraries to make

00:25:47.820 --> 00:25:50.730
this even easier.

00:25:50.730 --> 00:25:53.760
We have an app assertion
credentials once again, but

00:25:53.760 --> 00:25:57.890
this one's from the
oath2client.gce package rather

00:25:57.890 --> 00:25:59.040
than for App Engine.

00:25:59.040 --> 00:26:03.690
And it gives you, likewise,
an HTTP object, which is

00:26:03.690 --> 00:26:05.970
automatically adding
authorization headers.

00:26:13.820 --> 00:26:15.120
ADAM EIJDENBERG: So Ben showed
us a number of different ways

00:26:15.120 --> 00:26:18.210
to get those access tokens from
him, but all we need is

00:26:18.210 --> 00:26:19.250
one access token.

00:26:19.250 --> 00:26:22.090
That's all we need to actually
access an API.

00:26:22.090 --> 00:26:25.310
And I think we've gone through
three different ways.

00:26:25.310 --> 00:26:28.810
We have doing it from first
principles, we have using part

00:26:28.810 --> 00:26:30.500
of our client library--
the oauth part

00:26:30.500 --> 00:26:31.560
of our client library.

00:26:31.560 --> 00:26:35.280
And that oath part-- it gives
us those HTTP objects back.

00:26:35.280 --> 00:26:37.680
And to me, that's probably
my favorite part.

00:26:37.680 --> 00:26:40.670
We have these special HTTP
objects that's like an HTTP

00:26:40.670 --> 00:26:42.320
object with benefits, right?

00:26:42.320 --> 00:26:44.840
I can use that object the same
way that I'm used to making

00:26:44.840 --> 00:26:48.100
regular HTTP requests, but it
automatically adds that

00:26:48.100 --> 00:26:49.820
authorization header for us.

00:26:49.820 --> 00:26:51.960
And even better, it'll
detect when my access

00:26:51.960 --> 00:26:53.380
token is going to expire.

00:26:53.380 --> 00:26:54.430
It'll get me a new one.

00:26:54.430 --> 00:26:58.030
So I don't have to write code
in my app to do that for me.

00:26:58.030 --> 00:27:00.910
In addition, if for any other
reason, the access token

00:27:00.910 --> 00:27:03.500
doesn't work, it'll get a new
one for me automatically.

00:27:03.500 --> 00:27:05.880
So I think that's a really
powerful way of taking

00:27:05.880 --> 00:27:08.315
advantage of being able to use
those client libraries to

00:27:08.315 --> 00:27:10.390
access our APIs, even
if you don't use

00:27:10.390 --> 00:27:11.230
the rest of the stack.

00:27:11.230 --> 00:27:15.300
Even if you don't use the full
discovery API as well, which

00:27:15.300 --> 00:27:18.180
is also a very useful part of
the library, especially when

00:27:18.180 --> 00:27:20.050
you're getting started with an
API and you're trying to learn

00:27:20.050 --> 00:27:23.180
about what the different
methods are that exist.

00:27:23.180 --> 00:27:24.840
So when we run an application,
we assign

00:27:24.840 --> 00:27:25.640
it a service account.

00:27:25.640 --> 00:27:27.100
We give it an identity.

00:27:27.100 --> 00:27:28.730
That's how we do it.

00:27:28.730 --> 00:27:30.920
We can use built in credentials
in App Engine and

00:27:30.920 --> 00:27:32.420
Compute Engine.

00:27:32.420 --> 00:27:33.810
But when you're running
elsewhere--

00:27:33.810 --> 00:27:36.560
and this includes when you're
doing local development with

00:27:36.560 --> 00:27:39.170
App Engine, where we don't know
who your application is,

00:27:39.170 --> 00:27:40.800
because it's running on
your workstation--

00:27:40.800 --> 00:27:43.100
we give you the downloadable
private keys that you can then

00:27:43.100 --> 00:27:44.840
associate with your
application to

00:27:44.840 --> 00:27:46.090
give it that identity.

00:27:48.350 --> 00:27:51.040
So that's kind of the first part
of the presentation on

00:27:51.040 --> 00:27:53.480
authentication and how we
authenticate your app, where

00:27:53.480 --> 00:27:55.170
we need to write code
to do that.

00:27:55.170 --> 00:27:57.050
The second part, I'm going to
talk a little bit about

00:27:57.050 --> 00:28:01.200
authorization and how to
configure your project so that

00:28:01.200 --> 00:28:03.370
once you know who your
application is, we then let it

00:28:03.370 --> 00:28:05.170
actually proceed with
the request.

00:28:05.170 --> 00:28:07.100
And what I'm really going to go
through is just sort of hit

00:28:07.100 --> 00:28:10.550
off on a couple of points on how
we process that request so

00:28:10.550 --> 00:28:13.520
that if you get an error back
saying access not configured

00:28:13.520 --> 00:28:17.020
correctly or similar, you know
what steps to do to fix it.

00:28:17.020 --> 00:28:19.290
So if you remember before,
our access token--

00:28:19.290 --> 00:28:20.190
three main parts.

00:28:20.190 --> 00:28:23.280
The client that's making the
request, the user associated

00:28:23.280 --> 00:28:25.420
with the request, and the scopes
that are associated

00:28:25.420 --> 00:28:27.530
with the request.

00:28:27.530 --> 00:28:30.240
Now, let's see how
we use those.

00:28:30.240 --> 00:28:32.390
Now, primarily the authorization
is done

00:28:32.390 --> 00:28:34.090
based on the user.

00:28:34.090 --> 00:28:37.860
We look at the user associated
with the token, we look at the

00:28:37.860 --> 00:28:40.640
resource that they are trying to
access, and then we look at

00:28:40.640 --> 00:28:42.840
the project associated with
that resource that they're

00:28:42.840 --> 00:28:44.020
trying to access.

00:28:44.020 --> 00:28:46.650
And then we make sure that that
user is on the team for

00:28:46.650 --> 00:28:48.730
that project.

00:28:48.730 --> 00:28:50.980
Different services have slightly
different semantics

00:28:50.980 --> 00:28:54.950
for what the different roles
in a project mean.

00:28:54.950 --> 00:28:57.200
I'm showing the project team
page up there right now.

00:28:57.200 --> 00:28:59.640
We have can edit, can
view, and owner.

00:28:59.640 --> 00:29:01.860
Each service has a slightly
different interpretation of

00:29:01.860 --> 00:29:04.485
what those mean, but generally
the edit can write objects,

00:29:04.485 --> 00:29:06.960
the read can view objects,
and owner can do

00:29:06.960 --> 00:29:08.720
anything to those objects.

00:29:08.720 --> 00:29:11.110
Some services, like Cloud
Storage, let you go a little

00:29:11.110 --> 00:29:13.310
bit deeper and set access
control entries on individual

00:29:13.310 --> 00:29:15.820
objects and individual
buckets.

00:29:15.820 --> 00:29:18.600
But essentially, they default
to these parameters here.

00:29:18.600 --> 00:29:21.410
So the first thing you want to
do is make sure that the

00:29:21.410 --> 00:29:23.660
object that you're trying to
access-- that the project it

00:29:23.660 --> 00:29:27.200
belongs to has the application
on the team.

00:29:27.200 --> 00:29:29.530
And that's done automatically
for service accounts that you

00:29:29.530 --> 00:29:31.040
create within a project.

00:29:31.040 --> 00:29:33.440
But if you do you create an
App Engine app, and then

00:29:33.440 --> 00:29:35.460
separately, you create a project
in the developer

00:29:35.460 --> 00:29:37.510
console, they are different.

00:29:37.510 --> 00:29:39.540
So you will need to get the
email address associated with

00:29:39.540 --> 00:29:42.020
that App Engine service account
and add that to the

00:29:42.020 --> 00:29:44.210
team in the developer's
console.

00:29:44.210 --> 00:29:46.110
If you use the new Cloud
Console, a lot of that's

00:29:46.110 --> 00:29:48.870
handled automatically for you.

00:29:48.870 --> 00:29:51.730
We then look at the scopes
that are in the request.

00:29:51.730 --> 00:29:55.400
So once we figured out that the
user is allowed to access

00:29:55.400 --> 00:29:59.090
the object, we then check to see
what scopes are associated

00:29:59.090 --> 00:30:01.420
with that API call.

00:30:01.420 --> 00:30:03.520
And if you don't have those
scopes associated with that

00:30:03.520 --> 00:30:04.710
access token, we won't let that

00:30:04.710 --> 00:30:05.860
request go through, either.

00:30:05.860 --> 00:30:08.520
So make sure that you request
via the appropriate scope with

00:30:08.520 --> 00:30:09.510
your access token.

00:30:09.510 --> 00:30:11.820
And those scopes can be found in
the documentation for each

00:30:11.820 --> 00:30:13.070
of the APIs.

00:30:15.320 --> 00:30:17.470
The second part is based
on the client.

00:30:17.470 --> 00:30:20.600
So we do most the authorization
based on the

00:30:20.600 --> 00:30:23.230
user, but there are a bunch of
other things that we do based

00:30:23.230 --> 00:30:24.700
on the client.

00:30:24.700 --> 00:30:26.740
And the client, remember, that's
the application that

00:30:26.740 --> 00:30:27.830
you register with Google.

00:30:27.830 --> 00:30:29.190
And there's a few things
we check there.

00:30:29.190 --> 00:30:32.060
And they're not strictly
authorization, but I call them

00:30:32.060 --> 00:30:34.000
out here, because you'll get a
very similar error message

00:30:34.000 --> 00:30:36.940
back if it's not configured
correctly.

00:30:36.940 --> 00:30:39.150
First, we make sure that the
service that you're trying to

00:30:39.150 --> 00:30:41.930
access is actually enabled
in the project.

00:30:41.930 --> 00:30:43.830
And the project that we're
concerned about there is the

00:30:43.830 --> 00:30:47.710
project associated with the
client that you created.

00:30:47.710 --> 00:30:49.730
So when you create a client that
belongs to a project, you

00:30:49.730 --> 00:30:52.110
need to make sure that the
service or the API you're

00:30:52.110 --> 00:30:55.740
trying to access is turned
on for that project.

00:30:55.740 --> 00:30:59.210
If it's an API that requires
a credit card or a form of

00:30:59.210 --> 00:31:01.520
payment-- some do and some
don't-- you need to make sure

00:31:01.520 --> 00:31:06.120
that that billing is enabled
and set up on that project.

00:31:06.120 --> 00:31:08.620
And we also will do checks
against quota.

00:31:08.620 --> 00:31:10.930
You might see a quota error come
back from time to time.

00:31:10.930 --> 00:31:14.240
And that can come back primarily
for two reasons.

00:31:14.240 --> 00:31:16.910
Some projects will have a free
quota, and then after that,

00:31:16.910 --> 00:31:18.500
it's paid, and maybe
the billing

00:31:18.500 --> 00:31:20.550
information isn't set up.

00:31:20.550 --> 00:31:23.775
And we also have the ability for
you to be able to specify

00:31:23.775 --> 00:31:26.696
a per user quota.

00:31:26.696 --> 00:31:30.240
The per user quota here is
probably more useful when

00:31:30.240 --> 00:31:33.780
you're building an application
using, say, a drive API or a

00:31:33.780 --> 00:31:37.140
calendar API, where you have
individual users who are

00:31:37.140 --> 00:31:40.040
accessing data using
your application.

00:31:40.040 --> 00:31:41.950
And then you can configure
a per user quota

00:31:41.950 --> 00:31:43.570
that gets set up there.

00:31:43.570 --> 00:31:44.420
I just mentioned this.

00:31:44.420 --> 00:31:45.560
These are places to check.

00:31:45.560 --> 00:31:48.220
There's a quotas tab in
the developer console.

00:31:48.220 --> 00:31:51.150
These are places to check if
you're having any errors

00:31:51.150 --> 00:31:54.150
accessing the API.

00:31:54.150 --> 00:31:54.840
And finally--

00:31:54.840 --> 00:31:57.300
and this is fairly specific
to Cloud--

00:31:57.300 --> 00:32:02.550
all of these checks are
generally based on the project

00:32:02.550 --> 00:32:04.910
associated with the credentials
of the client that

00:32:04.910 --> 00:32:06.350
you've created.

00:32:06.350 --> 00:32:08.930
When you're accessing a resource
that belongs to

00:32:08.930 --> 00:32:13.430
another project, we check
in both places.

00:32:13.430 --> 00:32:16.950
So if you have project A and
project B, and you have an

00:32:16.950 --> 00:32:19.890
application registered here and
a resource in Project B,

00:32:19.890 --> 00:32:22.140
we'll do the checks
in both places.

00:32:22.140 --> 00:32:23.530
So make sure [INAUDIBLE]

00:32:23.530 --> 00:32:24.830
set up.

00:32:24.830 --> 00:32:26.300
A lot of the use cases
we see are

00:32:26.300 --> 00:32:27.550
typically within one project.

00:32:27.550 --> 00:32:28.800
I just mention that
for completeness.

00:32:31.380 --> 00:32:35.500
So to finish off, to access any
of our APIs, you need to

00:32:35.500 --> 00:32:37.230
give us an access token.

00:32:37.230 --> 00:32:40.860
We use service accounts to get
those for Cloud resources, and

00:32:40.860 --> 00:32:42.490
then make sure that that
user is authorized.

00:32:42.490 --> 00:32:45.170
Make sure it's added
to the right team.

00:32:45.170 --> 00:32:47.780
Yeah, we have a fairly active
community in our developer

00:32:47.780 --> 00:32:50.030
relations group, and others
watching Stack Overflow.

00:32:50.030 --> 00:32:51.780
That's a great spot
to ask for help.

00:32:51.780 --> 00:32:54.680
If you're struggling to access
an API, come and ask for help

00:32:54.680 --> 00:32:57.990
there, and we will try
and help you out.

00:32:57.990 --> 00:33:02.480
And I think what I'd like to
finish on saying is, I don't

00:33:02.480 --> 00:33:05.395
think successfully
authenticating an API call is

00:33:05.395 --> 00:33:09.990
the exciting part of being a
developer on Cloud Platform.

00:33:09.990 --> 00:33:11.520
I don't think that's
that exciting.

00:33:11.520 --> 00:33:14.480
To me, what is exciting is being
able to get past that

00:33:14.480 --> 00:33:17.180
step and get to those APIs and
start building my app.

00:33:17.180 --> 00:33:20.030
Because if you're stuck for
three or four hours trying to

00:33:20.030 --> 00:33:23.990
authenticate, that's a lot of
wasted time, and I don't think

00:33:23.990 --> 00:33:25.440
it's that interesting.

00:33:25.440 --> 00:33:28.090
Once you get past that, once
you get that successful API

00:33:28.090 --> 00:33:32.330
call, I think that's a
really good feeling.

00:33:32.330 --> 00:33:34.940
But even though you and I might
not be that interested

00:33:34.940 --> 00:33:38.060
in the authentication part,
at Google, we're lucky.

00:33:38.060 --> 00:33:38.930
We're a big company.

00:33:38.930 --> 00:33:43.990
We have over 250 full-time
engineers whose job is to work

00:33:43.990 --> 00:33:47.430
on security, and their job is
to work on security of your

00:33:47.430 --> 00:33:49.920
data in our data centers.

00:33:49.920 --> 00:33:53.260
And they care about this a lot,
and they spend a lot of

00:33:53.260 --> 00:33:55.410
time and effort on
these details.

00:33:55.410 --> 00:33:59.290
When I first started using some
of our APIs, I kind of

00:33:59.290 --> 00:34:00.690
felt there were a lot of
hoops to jump through.

00:34:00.690 --> 00:34:02.030
It kind of seemed
a bit strange.

00:34:02.030 --> 00:34:04.330
I had to download these private
keys, and create these

00:34:04.330 --> 00:34:07.970
assertions, and send them off,
and get access tokens back.

00:34:07.970 --> 00:34:11.810
But what I discovered was,
talking to people like Ben,

00:34:11.810 --> 00:34:14.239
talking with people on our
security team, is that each of

00:34:14.239 --> 00:34:17.389
those hoops is there for a
reason, and most of those

00:34:17.389 --> 00:34:19.239
reasons are actually
good ones.

00:34:19.239 --> 00:34:23.060
And that once I could convince
myself that there's no magic

00:34:23.060 --> 00:34:24.659
actually going on in the
client libraries, it's

00:34:24.659 --> 00:34:27.030
actually a pretty simple flow
to make those requests--

00:34:27.030 --> 00:34:30.409
once I figured out, hey, now
I understand it, I get it.

00:34:30.409 --> 00:34:31.850
Now I'm just going to use the
client libraries, and use

00:34:31.850 --> 00:34:33.389
those to make my calls.

00:34:33.389 --> 00:34:36.699
And once you get that API call
done, you're an auth ninja.

00:34:36.699 --> 00:34:39.280
And the best thing about being
an auth ninja on one of our

00:34:39.280 --> 00:34:42.840
APIs is there's then another 60
different APIs that you can

00:34:42.840 --> 00:34:44.739
go out and try, and you've
already figured out the

00:34:44.739 --> 00:34:47.980
hardest part, which
is authentication.

00:34:47.980 --> 00:34:49.810
So thank you very much
for coming out today.

00:34:49.810 --> 00:34:53.230
We've got a couple minutes now
for Q and A. Ben and I will be

00:34:53.230 --> 00:34:56.560
around outside at Cloud Platform
Sandbox afterwards.

00:34:56.560 --> 00:34:57.220
We also have--

00:34:57.220 --> 00:35:00.070
I don't know if Ryan Boyd is
in the audience right now.

00:35:00.070 --> 00:35:02.640
Ryan has just written a book on
oauth, and I think he might

00:35:02.640 --> 00:35:04.050
be doing book signings
a little bit

00:35:04.050 --> 00:35:05.620
later there as well.

00:35:05.620 --> 00:35:06.870
So, any questions?

00:35:10.454 --> 00:35:10.910
Yes?

00:35:10.910 --> 00:35:13.100
AUDIENCE: A couple over here.

00:35:13.100 --> 00:35:17.390
One is around the concept of
a client versus a project.

00:35:17.390 --> 00:35:20.490
I'm still not quite clear in
terms of their relationship,

00:35:20.490 --> 00:35:22.930
whether it's a many to many
relationship, or it's a parent

00:35:22.930 --> 00:35:24.150
child relationship.

00:35:24.150 --> 00:35:25.210
That's first.

00:35:25.210 --> 00:35:28.360
And then the second part of it
is around token management.

00:35:28.360 --> 00:35:32.780
Is there any facility provided
by Google that allows me to

00:35:32.780 --> 00:35:35.700
deactivate or invalidate
a token that I've

00:35:35.700 --> 00:35:37.030
given up in the past?

00:35:37.030 --> 00:35:38.120
ADAM EIJDENBERG: OK,
so I'll answer the

00:35:38.120 --> 00:35:39.000
first part of the question.

00:35:39.000 --> 00:35:40.435
I'll defer to Ben
on the second.

00:35:40.435 --> 00:35:42.680
I see the relationship between
the client and the project as

00:35:42.680 --> 00:35:43.630
parent child.

00:35:43.630 --> 00:35:45.900
See, clients belong
to one project.

00:35:45.900 --> 00:35:48.970
A project may have multiple
clients as children.

00:35:48.970 --> 00:35:51.440
And Ben, on the token
management?

00:35:51.440 --> 00:35:55.020
BEN WILEY SITTLER: So anytime
you have an access token, you

00:35:55.020 --> 00:35:58.960
can send it to our standard
OAuth 2 token verification

00:35:58.960 --> 00:36:03.450
endpoint, and it will stop
working after that.

00:36:03.450 --> 00:36:06.162
ADAM EIJDENBERG: You can
also wait one hour.

00:36:06.162 --> 00:36:07.580
Yes?

00:36:07.580 --> 00:36:08.350
BEN WILEY SITTLER:
Can you come to

00:36:08.350 --> 00:36:10.870
the microphone, please?

00:36:10.870 --> 00:36:12.950
ADAM EIJDENBERG: Just because
the session's being recorded.

00:36:12.950 --> 00:36:16.595
I know we have a lot of folks
that aren't in the room today.

00:36:16.595 --> 00:36:19.050
AUDIENCE: Supposing if I'm using
your OAuth token, but I

00:36:19.050 --> 00:36:23.200
also want to implement a two
level, like sending the code--

00:36:23.200 --> 00:36:25.220
like how Gmail does it--

00:36:25.220 --> 00:36:26.840
the code instantly,
whenever I log in.

00:36:26.840 --> 00:36:29.150
If I want to put that also
in my application,

00:36:29.150 --> 00:36:31.980
what I should do?

00:36:31.980 --> 00:36:34.780
Like, the instant code,
I get it, right?

00:36:34.780 --> 00:36:37.330
Supposing if I have a two level
authentication, I have

00:36:37.330 --> 00:36:38.160
the user name and
then password.

00:36:38.160 --> 00:36:41.380
Afterwards, I'll ask for
the code, you know?

00:36:41.380 --> 00:36:43.780
So the Google sends me the code
through SMS or something.

00:36:43.780 --> 00:36:45.720
So if I want to put also
in my application,

00:36:45.720 --> 00:36:46.850
how should I do it?

00:36:46.850 --> 00:36:48.335
Along with OAuth, what
should I do?

00:36:48.335 --> 00:36:49.880
ADAM EIJDENBERG: So I think what
you're talking about is

00:36:49.880 --> 00:36:52.010
probably what we refer to as
two factor authentication,

00:36:52.010 --> 00:36:54.360
which, by the way, if anyone
here does not have two factor

00:36:54.360 --> 00:36:56.600
authentication set up,
set it up right away.

00:36:56.600 --> 00:36:59.540
It is a fantastic way to keep
your account secure.

00:36:59.540 --> 00:37:02.330
And if you don't know what two
factor is, what it is--

00:37:02.330 --> 00:37:05.220
normally, when you log into a
Google account, you give your

00:37:05.220 --> 00:37:07.200
email address and a password.

00:37:07.200 --> 00:37:09.730
What two factor does is once
you put your email and

00:37:09.730 --> 00:37:13.110
password in, it will then send
you, either via an SMS or via

00:37:13.110 --> 00:37:16.830
an app we have on Android,
a six digit code.

00:37:16.830 --> 00:37:17.710
And you need to put that in.

00:37:17.710 --> 00:37:19.590
You only need to do about
once a month or so.

00:37:19.590 --> 00:37:21.450
It can be a little bit
frustrating that once a month

00:37:21.450 --> 00:37:24.760
when you do it, but on the plus
side, if someone gets

00:37:24.760 --> 00:37:26.335
your password-- because
maybe you've reused

00:37:26.335 --> 00:37:27.480
it somewhere else--

00:37:27.480 --> 00:37:29.450
then they can't actually
access your account.

00:37:29.450 --> 00:37:31.050
Now, back to the question
in terms of how does

00:37:31.050 --> 00:37:32.990
that relate to OAuth?

00:37:32.990 --> 00:37:36.320
So for the service account use
case, it doesn't apply at all.

00:37:36.320 --> 00:37:38.190
The service account just
has a private key.

00:37:38.190 --> 00:37:39.700
It's your application.

00:37:39.700 --> 00:37:40.820
For a more traditional--

00:37:40.820 --> 00:37:44.680
let's say I'm using a Google
API to access.

00:37:44.680 --> 00:37:46.410
Let's say we're using
the Drive example.

00:37:46.410 --> 00:37:48.420
You're building an application,
and you wanted to

00:37:48.420 --> 00:37:50.360
access a user's data.

00:37:50.360 --> 00:37:52.800
This is actually one of the
great things about using OAuth

00:37:52.800 --> 00:37:56.590
instead of taking the user's
username and password and

00:37:56.590 --> 00:37:58.210
sending it on.

00:37:58.210 --> 00:38:01.680
You do a redirect back to a
Google screen, and what that

00:38:01.680 --> 00:38:03.480
means is that all of the
functionality that's on the

00:38:03.480 --> 00:38:07.100
regular Google login screen is
available to the user that's

00:38:07.100 --> 00:38:08.630
entering their credentials.

00:38:08.630 --> 00:38:10.550
They'll put their username and
password in if they're not

00:38:10.550 --> 00:38:12.630
already authenticated in
the browser window.

00:38:12.630 --> 00:38:14.440
Then they'll have to go through
two factor, if they

00:38:14.440 --> 00:38:17.310
haven't already done
that recently.

00:38:17.310 --> 00:38:20.690
Then they all see a screen
saying, hey, this app wants to

00:38:20.690 --> 00:38:22.370
access your drive data.

00:38:22.370 --> 00:38:22.950
Allow or deny?

00:38:22.950 --> 00:38:25.360
When they hit allow, that will
then send an authorization

00:38:25.360 --> 00:38:28.140
code back to your application,
which you can then use to

00:38:28.140 --> 00:38:29.710
exchange and get an
access token.

00:38:29.710 --> 00:38:32.740
And we didn't cover that flow
today, but hopefully, that

00:38:32.740 --> 00:38:34.860
answers that question.

00:38:34.860 --> 00:38:36.010
Sorry, a question
on this side?

00:38:36.010 --> 00:38:37.980
AUDIENCE: Adam, thanks.

00:38:37.980 --> 00:38:40.460
I'll try to be as concise
as possible.

00:38:40.460 --> 00:38:42.890
I'm going to imagine
an imaginary app

00:38:42.890 --> 00:38:44.950
that I want to make.

00:38:44.950 --> 00:38:49.620
Let's say I wanted to have a
Chrome extension that did

00:38:49.620 --> 00:38:52.410
something like take the URL or
something, put it up on your

00:38:52.410 --> 00:38:54.600
Drive, of whoever's
logged in there.

00:38:54.600 --> 00:38:58.010
So like you had just said for
the previous one, there's the

00:38:58.010 --> 00:39:01.030
client side authentication to
say which Google Drive are

00:39:01.030 --> 00:39:02.390
you, if you're not already
there, and then

00:39:02.390 --> 00:39:03.280
it gives you that.

00:39:03.280 --> 00:39:06.050
But for this project that I
have, let's say I go through

00:39:06.050 --> 00:39:10.700
and I make the project
for myself.

00:39:10.700 --> 00:39:13.430
I enable it for Google
Drive Service.

00:39:13.430 --> 00:39:16.910
I create a Service account,
and I generate a

00:39:16.910 --> 00:39:18.500
private key, then.

00:39:18.500 --> 00:39:23.080
And then I can, at run time,
get an access token to use.

00:39:23.080 --> 00:39:24.110
It all works great.

00:39:24.110 --> 00:39:27.300
I put this up as an extension,
and millions of people

00:39:27.300 --> 00:39:28.450
download it everywhere.

00:39:28.450 --> 00:39:29.980
And then all of a sudden,
now I've got

00:39:29.980 --> 00:39:34.020
problems with the quota.

00:39:34.020 --> 00:39:34.480
ADAM EIJDENBERG: [INAUDIBLE]

00:39:34.480 --> 00:39:36.550
millions of people with access
to your private key.

00:39:36.550 --> 00:39:39.830
AUDIENCE: So is there,
I guess, maybe--

00:39:39.830 --> 00:39:44.330
is there an API that we can have
for generating these API

00:39:44.330 --> 00:39:48.770
tokens so that every single
person who downloads the

00:39:48.770 --> 00:39:54.530
extension can have their own
token, let's say, for

00:39:54.530 --> 00:39:56.800
themselves as a developer,
when they're really not

00:39:56.800 --> 00:39:59.410
developers, but that way, they
have their own quota for every

00:39:59.410 --> 00:40:00.390
person that downloads it?

00:40:00.390 --> 00:40:02.380
I'm not sure if there's
an API for these APIs.

00:40:02.380 --> 00:40:05.050
ADAM EIJDENBERG: It sounds to
me like that's probably more

00:40:05.050 --> 00:40:07.310
of a case for what we call the
three legged authentication

00:40:07.310 --> 00:40:10.550
flow, where you have the
user consenting to

00:40:10.550 --> 00:40:12.290
access their data.

00:40:12.290 --> 00:40:15.100
In which case we don't
use the private key.

00:40:15.100 --> 00:40:16.700
We don't need to generate
a private key.

00:40:16.700 --> 00:40:18.100
We'd probably use--

00:40:18.100 --> 00:40:20.380
and I should probably defer to
Ben pretty quickly here.

00:40:20.380 --> 00:40:21.730
I was going to say web
application flow.

00:40:21.730 --> 00:40:25.290
Do we have something special
for Chrome extensions?

00:40:25.290 --> 00:40:26.740
BEN WILEY SITTLER: I think
Chrome extensions--

00:40:26.740 --> 00:40:27.990
AUDIENCE: Well, I just
made that up.

00:40:27.990 --> 00:40:29.140
Let's just say it's not
a Chrome extension.

00:40:29.140 --> 00:40:32.290
It's an executable that I make
freely available, and they

00:40:32.290 --> 00:40:33.060
download that there.

00:40:33.060 --> 00:40:35.720
But it would be the same
question I have, is how does

00:40:35.720 --> 00:40:41.170
that throttling happen when
it's just out there and

00:40:41.170 --> 00:40:43.696
everybody's using it
for their own?

00:40:43.696 --> 00:40:45.570
ADAM EIJDENBERG: I can give you
a very concrete example.

00:40:45.570 --> 00:40:48.690
So if you look at gcutil or
gsutil, and those are

00:40:48.690 --> 00:40:51.220
utilities that Google provides
for managing Compute Engine

00:40:51.220 --> 00:40:53.130
and Cloud Storage
respectively.

00:40:53.130 --> 00:40:55.500
That's a binary, essentially,
that we distribute.

00:40:55.500 --> 00:40:57.595
And when you download and run
that binary-- and by the way,

00:40:57.595 --> 00:40:59.210
it's using all of
our public APIs.

00:40:59.210 --> 00:41:03.050
But when you run that binary,
the user is presented with a

00:41:03.050 --> 00:41:04.860
URL that's opened automatically
in the browser

00:41:04.860 --> 00:41:08.810
for them that allows them to
consent to manage their cloud

00:41:08.810 --> 00:41:10.590
storage objects or their virtual
machine objects on

00:41:10.590 --> 00:41:12.040
their behalf.

00:41:12.040 --> 00:41:13.730
And that, then returns,
actually, what we call a

00:41:13.730 --> 00:41:16.400
refresh token, which is like an
access token, but it's one

00:41:16.400 --> 00:41:18.970
that we can use to get more
access tokens after an hour

00:41:18.970 --> 00:41:21.500
when it expires.

00:41:21.500 --> 00:41:24.020
You would then store that
locally on their machine, and

00:41:24.020 --> 00:41:27.530
then you can use that to
make subsequent calls.

00:41:27.530 --> 00:41:31.390
And that's when those per user
quotas come into effect.

00:41:31.390 --> 00:41:33.290
So that's where you can then
throttle users-- make sure

00:41:33.290 --> 00:41:35.990
that one user doesn't ruin it
for everyone else by doing

00:41:35.990 --> 00:41:37.680
thousands and thousands
of API calls.

00:41:37.680 --> 00:41:41.140
AUDIENCE: But if someone does do
that-- like, what if there

00:41:41.140 --> 00:41:45.000
is people who then use this new
thing you've made and you

00:41:45.000 --> 00:41:47.020
can't guarantee that other
people who've downloaded it

00:41:47.020 --> 00:41:51.820
won't have had the quota taken
up by someone they don't know.

00:41:51.820 --> 00:41:52.090
ADAM EIJDENBERG: Yes.

00:41:52.090 --> 00:41:55.012
So it actually is a per user
quota that you can set.

00:41:55.012 --> 00:41:58.180
So you can set it so that each
user might only be able to do

00:41:58.180 --> 00:42:01.930
10 requests per second, or
some limit like that.

00:42:01.930 --> 00:42:04.100
So I think we're running
out of time.

00:42:04.100 --> 00:42:05.835
I'm getting the get off the
stage signal from the back.

00:42:05.835 --> 00:42:07.870
Please come and find us after,
because we're going to be

00:42:07.870 --> 00:42:11.520
around until about 10:30 at
the Cloud Platform booth.

00:42:11.520 --> 00:42:13.270
Thank you, everyone,
for coming today.

00:42:13.270 --> 00:42:15.410
If you did enjoy the session,
if you do want Ben and I to

00:42:15.410 --> 00:42:18.480
come back next year and tell you
more about authentication,

00:42:18.480 --> 00:42:20.640
please write the session at
the back, and there's a

00:42:20.640 --> 00:42:22.130
feedback QR code over there.

00:42:22.130 --> 00:42:24.360
If you didn't like the session,
if we just wasted 45

00:42:24.360 --> 00:42:26.230
minutes of your time, no one
reads the feedback, so don't

00:42:26.230 --> 00:42:27.380
worry about it.

00:42:27.380 --> 00:42:28.630
Thank you.

