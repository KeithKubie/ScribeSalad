WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So the first one is easy to see. The size of a minimum vertex cover is 2

00:00:04.000 --> 00:00:09.000
because you can just take this one here and this one here, and all edges are covered.

00:00:09.000 --> 00:00:14.000
Of course I constructed it that way. And that is also the size of the greedy solution.

00:00:14.000 --> 00:00:18.000
Because what the greedy algorithm will do is it will look at the whole graph

00:00:18.000 --> 00:00:22.000
and then say, oh which vertex could I use to cover the most edges?

00:00:22.000 --> 00:00:27.000
And actually this vertex here is next to 7 uncovered edges, and this one here as well

00:00:27.000 --> 00:00:31.000
so it will just choose 1 of them. Put that one into the vertex cover, say, and then

00:00:31.000 --> 00:00:35.000
in the next round all of these edges here are already covered, so it will just say,

00:00:35.000 --> 00:00:40.000
oh, here's another vertex I can use to cover 7 edges. So let's take that one because

00:00:40.000 --> 00:00:46.000
all of the other vertices, they can just cover 2 or 1 edge. So after executing this loop

00:00:46.000 --> 00:00:51.000
just twice, the algorithm is already done and it has even found an optimum solution.

00:00:51.000 --> 00:00:55.000
Now the Take 2 algorithm, on the other hand, well that looks a bit stupid

00:00:55.000 --> 00:01:00.000
compared to the greedy algorithm for this graph here, because what would it do?

00:01:00.000 --> 00:01:04.000
Well, it takes any uncovered edge--it doesn't really matter which one. So let's say

00:01:04.000 --> 00:01:07.000
it takes this one here, and then it will put this vertex here into the solution set

00:01:07.000 --> 00:01:14.000
and this vertex here. So all of those edges here are covered, and that one here as well.

00:01:14.000 --> 00:01:19.000
And, well it's not done yet, so it will have to choose another uncovered edge,

00:01:19.000 --> 00:01:26.000
let's say it's that one here, and again put 2 vertices into the solution set and then

00:01:26.000 --> 00:01:31.000
all edges are covered. So here the Take 2 algorithm, which you know by now is a

00:01:31.000 --> 00:01:37.000
factor-2 approximation algorithm, actually performs as bad as it can. So it really

00:01:37.000 --> 99:59:59.000
maxes out this factor-2 leeway that it is given.

