WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.310
[MUSIC PLAYING]

00:00:02.310 --> 00:00:04.340
For most Android apps,
it's simple to let

00:00:04.340 --> 00:00:06.930
services and intents get
handled on the UI thread.

00:00:06.930 --> 00:00:09.350
But as you know, that's
not always ideal,

00:00:09.350 --> 00:00:12.190
because you want that thread
to be free for rendering work.

00:00:12.190 --> 00:00:13.250
My name is Colt McAnlis.

00:00:13.250 --> 00:00:16.160
And with the help of a
handy intent service class,

00:00:16.160 --> 00:00:19.000
getting this work off the
UI thread is a breeze.

00:00:19.000 --> 00:00:20.621
But let's recap.

00:00:20.621 --> 00:00:22.120
Say you want to
respond to an intent

00:00:22.120 --> 00:00:24.121
but know that the work
is going to take a while.

00:00:24.121 --> 00:00:26.203
You don't want that work
running on the UI thread,

00:00:26.203 --> 00:00:28.320
because it should be busy
doing rendering work.

00:00:28.320 --> 00:00:31.160
The solution here is to receive
the intent on the main thread

00:00:31.160 --> 00:00:34.100
and then push a work packet
off to some other thread.

00:00:34.100 --> 00:00:36.890
And you've got a lot
of options to do this.

00:00:36.890 --> 00:00:39.260
For example, AsyncTask
is useful when

00:00:39.260 --> 00:00:41.250
the work will result
in a UI update

00:00:41.250 --> 00:00:44.185
but doesn't really help you if
your app's in the background,

00:00:44.185 --> 00:00:46.342
and there's no UI to service.

00:00:46.342 --> 00:00:48.550
A HandlerThread might
be better if the work is

00:00:48.550 --> 00:00:50.600
going to take a long time.

00:00:50.600 --> 00:00:52.590
But while you're not
receiving intents,

00:00:52.590 --> 00:00:55.329
this thread is just sitting
around, taking up resources.

00:00:55.329 --> 00:00:56.870
But there's a third
option that makes

00:00:56.870 --> 00:00:58.690
things a little easier for you.

00:00:58.690 --> 00:01:00.260
IntentServices.

00:01:00.260 --> 00:01:02.030
At its core, an
IntentService kind

00:01:02.030 --> 00:01:05.260
of a hybrid between a service
class and a HandlerThread.

00:01:05.260 --> 00:01:08.330
See it extends the service
class but internally creates

00:01:08.330 --> 00:01:10.680
a new HandlerThread which
deals with all of the intents

00:01:10.680 --> 00:01:11.780
as they come in.

00:01:11.780 --> 00:01:14.680
Basically, it wraps all the
moving of your intent responses

00:01:14.680 --> 00:01:16.800
to another thread
on your behalf.

00:01:16.800 --> 00:01:19.650
And because IntentServices
are also services,

00:01:19.650 --> 00:01:20.950
you get their benefits as well.

00:01:20.950 --> 00:01:22.776
Now for example,
you can use alarms

00:01:22.776 --> 00:01:25.150
to schedule repeated work to
happen at regular intervals,

00:01:25.150 --> 00:01:27.940
like refreshing some social
feed, updating cached images,

00:01:27.940 --> 00:01:29.630
or logging analytics.

00:01:29.630 --> 00:01:32.410
And of course, there's a
few performance caveats

00:01:32.410 --> 00:01:34.260
that you need to be aware of.

00:01:34.260 --> 00:01:37.070
Firstly, the HandlerThread
processes work

00:01:37.070 --> 00:01:38.434
from a work queue.

00:01:38.434 --> 00:01:39.850
This means that
if a task is going

00:01:39.850 --> 00:01:42.530
to take a long time to complete,
it will block the other queued

00:01:42.530 --> 00:01:43.860
up intents.

00:01:43.860 --> 00:01:45.420
Secondly, most of
the time when folks

00:01:45.420 --> 00:01:47.140
talk about
IntentServices, they use

00:01:47.140 --> 00:01:50.650
some form of broadcast receiver
to communicate results back

00:01:50.650 --> 00:01:53.554
to the main thread and
update the UI, which is fine.

00:01:53.554 --> 00:01:55.220
But there might be a
more performant way

00:01:55.220 --> 00:01:58.420
to do the same thing, because
delivering messages via intents

00:01:58.420 --> 00:02:00.060
involves inner
process communication,

00:02:00.060 --> 00:02:02.640
and ultimately, talking
to the activity manager.

00:02:02.640 --> 00:02:05.970
So you could use local broadcast
manager to avoid that work.

00:02:05.970 --> 00:02:09.495
Or you could just use
the runOnUIThread method

00:02:09.495 --> 00:02:11.620
after the work is completed
to push a block of work

00:02:11.620 --> 00:02:13.505
into the UI threads handler.

00:02:13.505 --> 00:02:15.130
Now besides just
being a convenient way

00:02:15.130 --> 00:02:17.290
to get intent work
on to a thread,

00:02:17.290 --> 00:02:18.970
IntentServices also
has the benefit

00:02:18.970 --> 00:02:20.800
of making your app
a little less likely

00:02:20.800 --> 00:02:22.250
to be killed by the system.

00:02:22.250 --> 00:02:24.780
You have to remember that
applications without foreground

00:02:24.780 --> 00:02:27.840
activities are more likely
to be killed than ones that

00:02:27.840 --> 00:02:29.916
have a foreground activity.

00:02:29.916 --> 00:02:31.790
But when you've got an
IntentService running,

00:02:31.790 --> 00:02:34.780
it puts your app in the
middle of these two states,

00:02:34.780 --> 00:02:37.100
more killable than an app
with a foreground activity,

00:02:37.100 --> 00:02:39.280
but less killable
than a background app

00:02:39.280 --> 00:02:40.800
without all those things.

00:02:40.800 --> 00:02:43.040
And probably most
important is not

00:02:43.040 --> 00:02:47.170
to confuse IntentServices with
other types of threaded helper

00:02:47.170 --> 00:02:48.050
classes.

00:02:48.050 --> 00:02:50.110
While IntentServices
are pretty powerful,

00:02:50.110 --> 00:02:52.400
they aren't a general
purpose threading solution.

00:02:52.400 --> 00:02:54.900
So make sure you check out the
other containers to see which

00:02:54.900 --> 00:02:57.210
one fits your particular needs.

00:02:57.210 --> 00:02:59.550
See, this is what
performance is all about,

00:02:59.550 --> 00:03:01.880
understanding the nuances
and caveats to make the best

00:03:01.880 --> 00:03:03.645
decisions for your
codebase, which

00:03:03.645 --> 00:03:06.270
is why you should check out the
rest of the Android Performance

00:03:06.270 --> 00:03:06.970
Patterns videos.

00:03:06.970 --> 00:03:08.520
And don't forget
to join the Google

00:03:08.520 --> 00:03:12.750
community to ask great questions
to other great developers.

00:03:12.750 --> 00:03:15.720
So keep calm, profile your
code, and always remember

00:03:15.720 --> 00:03:16.310
perf matters.

00:03:16.310 --> 00:03:19.060
[MUSIC PLAYING]

