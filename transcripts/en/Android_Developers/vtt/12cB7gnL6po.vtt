WEBVTT
Kind: captions
Language: en

00:00:04.680 --> 00:00:05.620
CHET HAASE: Hi.

00:00:05.620 --> 00:00:09.010
I'm Chet Haase, an engineer on
the Android Team at Google.

00:00:09.010 --> 00:00:11.400
Today I wanted to talk a little
bit about bitmaps.

00:00:11.400 --> 00:00:13.710
In particular, I want to talk
about bitmap scaling.

00:00:13.710 --> 00:00:16.360
One of the big problems that
people run into when running

00:00:16.360 --> 00:00:20.410
applications on constrained
devices is that they want to

00:00:20.410 --> 00:00:23.120
load in, let's say, huge images
from the camera on the

00:00:23.120 --> 00:00:25.140
phone, from the web, wherever.

00:00:25.140 --> 00:00:27.440
And when they're loading in
a lot of these things, A,

00:00:27.440 --> 00:00:29.320
they're going to take a
long time to come in.

00:00:29.320 --> 00:00:31.960
B, they're going to create
garbage along the way and

00:00:31.960 --> 00:00:33.180
performance problems.

00:00:33.180 --> 00:00:35.720
And C, maybe they're going to
run out of memory if they try

00:00:35.720 --> 00:00:37.930
to load too many at
the same time.

00:00:37.930 --> 00:00:40.200
There are various ways of
dealing with this situation.

00:00:40.200 --> 00:00:44.470
The overarching idea is that you
should load and create and

00:00:44.470 --> 00:00:46.420
use the images of the
size you need.

00:00:46.420 --> 00:00:49.750
So for example, don't load in
an image that's this big if

00:00:49.750 --> 00:00:51.690
you're always going to display
it as a thumbnail.

00:00:51.690 --> 00:00:54.860
Instead, load in whatever you
need to, get it at the size

00:00:54.860 --> 00:00:56.500
you need it, and then
have that be the

00:00:56.500 --> 00:00:57.910
image that you retain.

00:00:57.910 --> 00:01:00.750
So today's example is
around loading in a

00:01:00.750 --> 00:01:02.440
scaled version of it.

00:01:02.440 --> 00:01:05.379
In particular, we're going to
use a parameter in Bitmap

00:01:05.379 --> 00:01:08.980
Factory Options, which is
called inSample Size.

00:01:08.980 --> 00:01:17.040
So first let's take a look at
the demo, which is called

00:01:17.040 --> 00:01:17.870
Bitmap Scaling.

00:01:17.870 --> 00:01:19.540
And there's nothing to
interact with here.

00:01:19.540 --> 00:01:21.860
I just wanted to show a visual
representation of what's going

00:01:21.860 --> 00:01:23.030
on with these images.

00:01:23.030 --> 00:01:25.240
Because there's something
a little unobvious about

00:01:25.240 --> 00:01:27.480
inSample Size the first
time you use it.

00:01:27.480 --> 00:01:30.390
So the original image you can
see up at the top under the

00:01:30.390 --> 00:01:32.370
words that say Original Image.

00:01:32.370 --> 00:01:34.680
And then you can see these
scaled versions down below

00:01:34.680 --> 00:01:36.240
where it says Scaled Images.

00:01:36.240 --> 00:01:38.970
So we see two of the same size
and then four of the same size

00:01:38.970 --> 00:01:40.630
and then two of the same
size under there.

00:01:40.630 --> 00:01:41.420
So what's going on?

00:01:41.420 --> 00:01:43.280
Let's take a look at the code.

00:01:43.280 --> 00:01:45.820
So we have this class called
Bitmap Scaling.

00:01:45.820 --> 00:01:48.500
We have this image view where
we're going to find the

00:01:48.500 --> 00:01:50.140
original image.

00:01:50.140 --> 00:01:51.660
We're going to decode
the Jelly Bean

00:01:51.660 --> 00:01:53.550
statue image in there.

00:01:53.550 --> 00:01:57.900
And then we're going to add
scaled image views.

00:01:57.900 --> 00:02:00.040
And this is going to be using
the inSample Size thing.

00:02:00.040 --> 00:02:03.540
So we're basically going to
iterate values from 2 to 10

00:02:03.540 --> 00:02:06.780
and use that as our inSample
Size value and see

00:02:06.780 --> 00:02:07.950
what effect we get.

00:02:07.950 --> 00:02:10.970
So we create one of these Bitmap
options objects and we

00:02:10.970 --> 00:02:14.260
set the inSample Size to the
sample size that was passed

00:02:14.260 --> 00:02:16.590
in, which is that integer
value from 2 to 10.

00:02:16.590 --> 00:02:20.340
And then we create a scaled
bitmap, which does a decode on

00:02:20.340 --> 00:02:21.950
that original image.

00:02:21.950 --> 00:02:23.160
But it uses the options.

00:02:23.160 --> 00:02:24.760
It uses this inSample Size.

00:02:24.760 --> 00:02:30.030
And what inSample Size tells it
is how many pixels to read

00:02:30.030 --> 00:02:33.110
for each of the original
pixels in the image.

00:02:33.110 --> 00:02:35.660
The advantage of doing
it this way is that

00:02:35.660 --> 00:02:37.460
it reads less data.

00:02:37.460 --> 00:02:39.710
It's going to be faster to do
this because it's basically

00:02:39.710 --> 00:02:43.090
skipping a lot of data along the
way potentially based on

00:02:43.090 --> 00:02:44.800
the value of inSample Size.

00:02:44.800 --> 00:02:47.190
The disadvantage of doing it is
that it's basically going

00:02:47.190 --> 00:02:50.860
to wind up with powers of 2
scales of your original image.

00:02:50.860 --> 00:02:53.470
So you can pass in a value of
2, which means it's going to

00:02:53.470 --> 00:02:55.870
skip every other pixel, and
you're going to wind up with

00:02:55.870 --> 00:02:58.270
an image that's half the
size of the original.

00:02:58.270 --> 00:03:01.960
If you ask for 3, it's
happy to do that.

00:03:01.960 --> 00:03:03.850
Except it doesn't really
make sense.

00:03:03.850 --> 00:03:06.240
It's actually going to round
down to the next lowest power

00:03:06.240 --> 00:03:08.280
of 2 and it's going to be
equivalent to 2, which is why

00:03:08.280 --> 00:03:11.220
we see, for the first 2
scaled images, they're

00:03:11.220 --> 00:03:12.220
exactly the same size.

00:03:12.220 --> 00:03:15.440
Because passing in 3 was
equivalent to passing in 2.

00:03:15.440 --> 00:03:17.600
When we go up to 4, that's
the next power of 2.

00:03:17.600 --> 00:03:19.450
OK, it's happy to do that.

00:03:19.450 --> 00:03:21.450
When we go up to 5, it
rounds down to 4.

00:03:21.450 --> 00:03:24.650
So basically, inSample Size is
a very coarse-grained way of

00:03:24.650 --> 00:03:26.270
getting a scaled image.

00:03:26.270 --> 00:03:29.890
It works great in the cases
where you want powers of 2

00:03:29.890 --> 00:03:31.300
scales of your original image.

00:03:31.300 --> 00:03:35.060
Maybe it works for you to read
in at that lower size and you

00:03:35.060 --> 00:03:39.280
get a faster reading time,
because you're

00:03:39.280 --> 00:03:40.090
reading less data.

00:03:40.090 --> 00:03:42.700
But then once you have that
data, maybe you then want to

00:03:42.700 --> 00:03:45.160
scale to the exact size
that you want.

00:03:45.160 --> 00:03:47.615
And you can always get a bitmap
of the exact size that

00:03:47.615 --> 00:03:49.770
you want through various
mechanisms.

00:03:49.770 --> 00:03:52.550
Creating it exactly at the
width-height that you want or

00:03:52.550 --> 00:03:54.210
create a scaled bitmap.

00:03:54.210 --> 00:03:56.290
There's an API to create
a scaled bitmap

00:03:56.290 --> 00:03:57.550
from another one.

00:03:57.550 --> 00:03:59.040
So there's lots of different
ways to do that.

00:03:59.040 --> 00:04:02.080
Today was about using inSample
Size in particular.

00:04:02.080 --> 00:04:04.760
Higher performance because it
reads less data with the

00:04:04.760 --> 00:04:07.690
constraint that it will end
up with powers of 2

00:04:07.690 --> 00:04:09.120
images at the end.

00:04:09.120 --> 00:04:11.110
So inSample Size.

00:04:11.110 --> 00:04:12.240
Use it.

00:04:12.240 --> 00:04:13.490
Thanks.

