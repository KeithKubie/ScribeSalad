WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:04.470
&gt;&gt; RAMAN: Thank you for coming, everyone.
My name is T.V. Raman. I'm a research scientist

00:00:04.470 --> 00:00:11.869
at Google. And with me, I have my office mate
and co-hacker, Charles Chen. This talk is

00:00:11.869 --> 00:00:19.769
about accessibility to web 2.0 applications
for all users. And we'll talk a little bit

00:00:19.769 --> 00:00:24.539
about--I've got my outlines for--we'll talk
a bit about--so that--we'll start to talk

00:00:24.539 --> 00:00:30.230
of structure and we'll talk about what we
mean by the word accessibility for the purposes

00:00:30.230 --> 00:00:36.510
of this talk and specifically in terms of
enabling web 2.0 applications to be usable

00:00:36.510 --> 00:00:44.180
by everyone. And by everyone, I mean everyone
starting with your grandparents who can probably

00:00:44.180 --> 00:00:48.449
see perfectly well but, say, "that computer,
you know, I can't read that screen," all the

00:00:48.449 --> 00:00:54.420
way to users who are blind, who might be deaf,
who might need other forms of special support.

00:00:54.420 --> 00:00:58.179
This talk is specifically about applications
and web applications. So we'll spend a few

00:00:58.179 --> 00:01:03.559
minutes talking about the context in which
web apps are put together and therefore the

00:01:03.559 --> 00:01:09.040
technology enablers that we all have at our
fingertips in order to enable such widespread

00:01:09.040 --> 00:01:14.720
accessibility. We'll talk about an open source
framework that we at Google released about

00:01:14.720 --> 00:01:19.860
six months ago into the space that Charles
and I have been working on. We'll show you

00:01:19.860 --> 00:01:26.500
code examples. We'll show you demos, you know,
the effect of using the framework on a lot

00:01:26.500 --> 00:01:31.280
of Google properties. We'd like to keep this
interactive. If you have questions, you can

00:01:31.280 --> 00:01:36.530
hold them to the end or if possible you can
ask it during the talk through, that's fine.

00:01:36.530 --> 00:01:41.250
Don't just raise your hand and be polite because
I will rudely ignore you. So wave, make noises

00:01:41.250 --> 00:01:47.390
or whatever. So the way I usually structure
my talks is I make sections in the talk 'cause

00:01:47.390 --> 00:01:52.070
that's how I end up thinking of my talk. So
we'll talk--let's go to the first section

00:01:52.070 --> 00:01:56.000
of this talk where we'll talk a little bit
about accessibility and web applications.

00:01:56.000 --> 00:02:02.420
So flip to the first slide there. So what
exactly do I mean by accessibility? I'm sure

00:02:02.420 --> 00:02:08.849
those of you who have seen the theme of accessibility
and have interest in this field have heard

00:02:08.849 --> 00:02:13.319
a lot about regulations, that it's a good
thing for you to make your applications useable

00:02:13.319 --> 00:02:19.959
by the widest number of people. But if you
look at the space, a lot of the work, in terms

00:02:19.959 --> 00:02:27.739
of saying what accessibility means, is often
couched in terms of web content and in terms

00:02:27.739 --> 00:02:33.700
of regulations and fairly high level concepts
such as make sure that somebody who cannot

00:02:33.700 --> 00:02:39.439
see color can appreciate your side or make
sure that somebody who cannot use a mouse

00:02:39.439 --> 00:02:46.549
can use your application. I tend to phrase
accessibility slightly differently. If you

00:02:46.549 --> 00:02:53.560
think of what all of us as web users and web
developers do, when we develop web content

00:02:53.560 --> 00:03:00.540
and we develop web applications, the original
goal of the web and all the architectural

00:03:00.540 --> 00:03:06.840
principles that underlie the web dictate that
you never ask who, you know, you never design

00:03:06.840 --> 00:03:12.639
your thing assuming only a 21-year-old who
speaks English and who can see will use your

00:03:12.639 --> 00:03:17.379
site. If you do that, you are actually shooting
yourself in the foot with respect to taking

00:03:17.379 --> 00:03:23.069
advantage of this wonderful platform that
we call the web. The web is a wonderful platform

00:03:23.069 --> 00:03:28.359
and better than anything that has gone before
it because of its reach with respect to the

00:03:28.359 --> 00:03:34.389
audience you are garnering. And that reach
is both global in terms of countries. It's

00:03:34.389 --> 00:03:40.420
international in terms of languages. It's
all age groups and it's all capabilities.

00:03:40.420 --> 00:03:45.889
So the way I explain accessibility when I
talk about this at Google to the web community,

00:03:45.889 --> 00:03:51.560
both within and outside Google, is think about
it as the long tail of users. So where we

00:03:51.560 --> 00:03:57.829
as Google excel at the long tail of content
in finding you that web page that is the best

00:03:57.829 --> 00:04:01.919
for you. It might not be the best for anybody
else in the world, but you as a user don't

00:04:01.919 --> 00:04:06.950
care. You as a user care that for the task
you are doing, a particular page happens to

00:04:06.950 --> 00:04:12.370
be the best for you. And we as Google excel
at finding that in search. In accessibility,

00:04:12.370 --> 00:04:17.670
I think of it as, we as Google, trying to
serve each user what is the best thing for

00:04:17.670 --> 00:04:24.490
that user. So in that context, let's then
talk about what accessibility is and what

00:04:24.490 --> 00:04:29.880
tools users have. So if you look at mainstream
user interfaces, your average desktop user

00:04:29.880 --> 00:04:35.180
interface, your average web interface. If
you look at the interface you have to the

00:04:35.180 --> 00:04:42.080
rest of your world, those user interfaces
play--assumes that you have certain abilities

00:04:42.080 --> 00:04:47.590
and based on those assumptions place certain
demands on you. So your traditional interface

00:04:47.590 --> 00:04:52.290
assumes that you can see the screen. When
you walk up to this building, that door assumes

00:04:52.290 --> 00:04:57.780
that you can push it. That's the user interface
and that's the set of capabilities it assumes

00:04:57.780 --> 00:05:03.340
that you have. Now, when there is a gap between
those demands that that environment places

00:05:03.340 --> 00:05:09.780
and the abilities you have, there is a problem.
And you typically solve that impedance mismatch

00:05:09.780 --> 00:05:14.520
by augmentative technology. So I move around
with a guide dog. I might use a cane. When

00:05:14.520 --> 00:05:18.850
I use the computer, I have my computer speak
to me. If I have a hearing impairment, I might

00:05:18.850 --> 00:05:23.890
look at captions. If I have a motion impairment,
I might use some other devices. So that's

00:05:23.890 --> 00:05:29.090
what you are talking about in terms of bridging
those gap for accessibility. Flip to the next

00:05:29.090 --> 00:05:34.260
slide. So how does all this actually work?
So coming down to--to, you know, the rubber

00:05:34.260 --> 00:05:40.510
meets the road, you typically have augmentative
software, and sometimes augmentative hardware

00:05:40.510 --> 00:05:45.350
that essentially helps the user bridge those
gaps. Now, you bridge the gap with spech,

00:05:45.350 --> 00:05:49.870
you have screen readers for the blind. You
have other--you have self-voicing browsers.

00:05:49.870 --> 00:05:55.090
You have extensions to browsers that make
the browser talk. You have environments that

00:05:55.090 --> 00:06:00.020
automatically speak applications. All the
way down to, you have captioning software

00:06:00.020 --> 00:06:04.300
that allows you to, you know, add captions
to videos, all of those things. Typically,

00:06:04.300 --> 00:06:10.570
these things work with hand in hand with API's
in the platform whether it's Linux, whether

00:06:10.570 --> 00:06:14.530
it's the Mac, whether it's Windows. So for
instance, any of you who have a Mac Book,

00:06:14.530 --> 00:06:18.230
you'll be surprised to know that if you hold
the command key and a particular function

00:06:18.230 --> 00:06:22.930
and boot up, the Mac will actually come up
talking. That's in the true sense OS-X [INDISTINCT].

00:06:22.930 --> 00:06:27.790
Windows, there are a number of screen readers,
there are all of these things. And so typically,

00:06:27.790 --> 00:06:34.360
in the past, when you heard the term web accessibility,
you also heard a few myths that I'd like to

00:06:34.360 --> 00:06:41.010
dispel before we start talking web application.
So flip to the next slide. So one of the constant

00:06:41.010 --> 00:06:46.470
reason why you hear myths about web accessibility
for the--especially for the blind in terms

00:06:46.470 --> 00:06:50.580
of "Oh, please don't do that on your page.
If you do that the blind user won't use it."

00:06:50.580 --> 00:06:54.510
And a lot of cases those are true. But in
a lot of cases there is confusion. So the

00:06:54.510 --> 00:07:00.800
reason for that confusion is, it's useful
to understand how this technology evolved.

00:07:00.800 --> 00:07:07.840
So the web essentially took off just at the
time that blind users were coming to handle

00:07:07.840 --> 00:07:14.260
graphical user interfaces. And the way speech
interfaces for the blind were done for the

00:07:14.260 --> 00:07:20.720
GUI was to say that we will track the focus
and speak the thing under the focus. So the

00:07:20.720 --> 00:07:27.540
web came up at the same time, and as you all
know, in '95, the web was about documents;

00:07:27.540 --> 00:07:33.750
it wasn't about applications. And so, a lot
of work that went into sort of saying what

00:07:33.750 --> 00:07:40.220
web developers ought to do focused on this
notion of content and a user reading a document

00:07:40.220 --> 00:07:49.530
by moving focus. And so that's really how
the space got defined. And then very silently

00:07:49.530 --> 00:07:55.260
starting in 2000, we started adding small
pieces of interactivity to the web where today,

00:07:55.260 --> 00:08:02.410
when you go look at Gmail or Google Reader,
those are not documents. Those are full fledged

00:08:02.410 --> 00:08:06.720
applications, and one of the reasons why AJAX
applications has been a challenge and that

00:08:06.720 --> 00:08:13.140
will be the focus of all of this talk is that
when people try to address an application

00:08:13.140 --> 00:08:19.730
as a document, you end up with significant
challenges. These are not--these are mostly

00:08:19.730 --> 00:08:25.480
usability challenges as opposed to accessibility
challenges. AJAX applications, done right,

00:08:25.480 --> 00:08:30.400
can be just as productive for somebody with
a special need as they are for somebody who

00:08:30.400 --> 00:08:36.039
has a 20/20 well-sighted, you know, mouse-enabled
user. And that's really the point I'd like

00:08:36.039 --> 00:08:39.669
to make during this talk. I'll flip to the
next slide, which is the bridging of the gap

00:08:39.669 --> 00:08:44.480
slide. So what is this? What do I mean by
bridging the gap? Here is something that I

00:08:44.480 --> 00:08:51.889
have come to realize in the last 10 years
as I worked in this space. So the document

00:08:51.889 --> 00:08:55.790
is then--is the interface, it's a clichÃ©
that we all know from the work at Xerox PARC

00:08:55.790 --> 00:09:01.949
in the '70s. And it was the motivational theme
behind WYSIWYG interfaces, WYSIWYG authoring

00:09:01.949 --> 00:09:10.269
and eventually the GUI. The document is the
interface. And the web epitomizes this even

00:09:10.269 --> 00:09:16.930
more by moving away from monolithic applications
that "create documents" to a world where you

00:09:16.930 --> 00:09:22.540
take the piece of information that you're
working with and you embed just enough interaction

00:09:22.540 --> 00:09:29.600
into that information that your user needs
at that time. So this is how html works. We

00:09:29.600 --> 00:09:34.759
basically take a document object model which
is the DOM and we program against it, add

00:09:34.759 --> 00:09:40.160
little bits of interactivity to it. So the
document is the interface at that level. But

00:09:40.160 --> 00:09:45.639
if you look at the user interface that is
realized as a consequence, the user interface

00:09:45.639 --> 00:09:53.519
is not a document. If anything, the user interface
is at best a series or collection of documents.

00:09:53.519 --> 00:10:00.959
So you go to your Gmail inbox and you do a
search and then, you know, you look at the

00:10:00.959 --> 00:10:09.680
thread of mail about the Google I/O developer--I/O
developer conference, right? Now, that particular

00:10:09.680 --> 00:10:16.499
view of your Gmail, you know, inbox that you
have brought up in that set of what messages

00:10:16.499 --> 00:10:21.970
are highlighted could be serialized as a document.
But the Gmail interface is not a document.

00:10:21.970 --> 00:10:26.959
And to sort of build good accessibility into
it for the blind, to build a good auditory

00:10:26.959 --> 00:10:32.050
user interface requires us all to think of
these things as applications, not documents.

00:10:32.050 --> 00:10:38.170
Let's flip to the next section of the slide
that talks about web applications. And the

00:10:38.170 --> 00:10:44.100
reason I put the section together was not
because people, especially at this conference,

00:10:44.100 --> 00:10:48.589
it's, you rarely need--don't need to say this
because all of us are web developers, but

00:10:48.589 --> 00:10:56.199
it still gives us all the sense of perspective
to step back and ask what is it that led to

00:10:56.199 --> 00:11:02.399
web applications as they are. And based on
those architectural principles, what are the

00:11:02.399 --> 00:11:07.319
opportunities that we have in order to enable
this. So from here on, for the rest of this

00:11:07.319 --> 00:11:12.410
talk, think web applications and accessibility
to user interfaces and web applications, not

00:11:12.410 --> 00:11:18.389
documents. So what is the web architecture?
The web architecture is a very loosely coupled

00:11:18.389 --> 00:11:23.749
architecture. So in the '90s when I used to
work in the space of doing good auditory user

00:11:23.749 --> 00:11:29.089
interfaces for applications, I used to tell
software developers, you know, couldn't you

00:11:29.089 --> 00:11:34.720
separate the visual interface that you do
for your application from the actual engine

00:11:34.720 --> 00:11:40.879
of that application, so that I can then build
a good auditory user interface without rewriting

00:11:40.879 --> 00:11:45.970
your entire application. Now, in the world
of monolithic software that we lived in in

00:11:45.970 --> 00:11:51.100
the '90s on the desktop, this was a very tough
task, people would laugh you out of the room

00:11:51.100 --> 00:11:55.740
immediately. They would say, "You mean, you
want us to separate this big lump that we

00:11:55.740 --> 00:12:00.639
have into two lumps, then we don't know how
they work together? Go away." Now, the Web

00:12:00.639 --> 00:12:06.309
architecture, because it's based on HTTP,
HTML, and URLs, with a lot of intelligence

00:12:06.309 --> 00:12:12.240
living up in the cloud and a fairly thin to
a fairly rich user interface delivered into

00:12:12.240 --> 00:12:18.819
the browser, forced us as software engineers
to create that separation. We factored that

00:12:18.819 --> 00:12:24.180
out. And so, today, there is a Gmail interface
for mobile, there is a Gmail interface for

00:12:24.180 --> 00:12:29.559
desktop. Nobody forces you to use the Gmail
interface that works on a large screen from

00:12:29.559 --> 00:12:35.769
a mobile device. If we did, you would go use
some other mail service. That tells you something.

00:12:35.769 --> 00:12:42.040
We have moved from a generation where we built
user interfaces that were one-size-fits-all

00:12:42.040 --> 00:12:50.309
large kitchen sink interfaces to user interfaces
that are lightweight, that are agile, and

00:12:50.309 --> 00:12:55.160
that get delivered to users in the form they
want. And that, I believe, is the big opportunity

00:12:55.160 --> 00:13:01.129
for enabling accessibility to users with different
needs that we can leverage. Flip to the next

00:13:01.129 --> 00:13:07.009
slide. So, the other part to keep in mind
as we think about how we do this going forward

00:13:07.009 --> 00:13:14.639
is to step back, understand what all of us
as Web developers have achieved on the Web

00:13:14.639 --> 00:13:21.199
and apply those lessons to now what--it's
not just the mainstream, but the long tail.

00:13:21.199 --> 00:13:27.800
The coolest thing about Web 2.0 is not the
fact that, you know, you can make things animate

00:13:27.800 --> 00:13:33.029
and jump up and down with a piece of Javascript.
That's not a visual coolness. The cool thing

00:13:33.029 --> 00:13:42.829
about Web 2.0 is that its Web artifact built
out of what I call Web parts. So, Web 1.0

00:13:42.829 --> 00:13:48.720
was all about us geeks bringing content online.
You know, we'd get very excited to see that,

00:13:48.720 --> 00:13:53.179
oh my god, look, now there's a job search
site online, and look, all the weather forecasts

00:13:53.179 --> 00:13:58.360
are online, oh, look, New York Times is online."
That was about content coming online, and

00:13:58.360 --> 00:14:05.790
I think of that as Web 1.0. The world of Web
2.0, aggregations and mash ups, widgets and

00:14:05.790 --> 00:14:12.519
gadgets, open social applications, all of
these things are no longer simply about bringing

00:14:12.519 --> 00:14:18.290
a piece of content from the physical world
onto the web world. It is about taking things

00:14:18.290 --> 00:14:23.929
that are already on the Web and building new
things out of Web parts; building them out

00:14:23.929 --> 00:14:30.850
of HTML, out of CSS, Javascript, REST APIs,
Web APIs, things that where people give you

00:14:30.850 --> 00:14:35.119
ATOM content, give you JSON content. These
are things that are on the Web that which

00:14:35.119 --> 00:14:40.709
we are building Web parts. So one of the questions
we asked as we put together this open software

00:14:40.709 --> 00:14:47.519
framework that we'll be talking about is,
"How do we then build specialized user interfaces

00:14:47.519 --> 00:14:54.999
out of Web parts? How do we enhance Web applications
using Web parts?" And so that's really the

00:14:54.999 --> 00:14:59.459
thrust of this whole talk. Flip to the next
slide. So what I want us--the challenge I

00:14:59.459 --> 00:15:05.470
posed to myself and others in Google engineering
when I started at Google about three years

00:15:05.470 --> 00:15:11.699
ago was to say, if you look at what the Web
community, the AJAX community has achieved

00:15:11.699 --> 00:15:19.649
incrementally starting in 2000 all the way
up to the first generation AJAX apps, Gmail,

00:15:19.649 --> 00:15:26.439
and then Google Maps later on, we essentially
took the browser that started off as something

00:15:26.439 --> 00:15:35.389
designed for a world of global hypertext documents
and we turned it into a global runtime for

00:15:35.389 --> 00:15:40.379
highly interactive end user applications.
And we did that with rubber band and chewing

00:15:40.379 --> 00:15:45.189
gum and paper clips and all of these things.
Now, we have nicer things like Google Web

00:15:45.189 --> 00:15:50.610
Toolkit that let you develop these things
much more nicely. How can we as engineers

00:15:50.610 --> 00:15:56.869
use that same level of innovation to enable
very good interactive solutions for users

00:15:56.869 --> 00:16:01.949
who cannot see, for users who cannot hear
and use the Web model as supposed to the old

00:16:01.949 --> 00:16:07.629
desktop model? So, the Web model, to me, is
all about agile development, developing quickly,

00:16:07.629 --> 00:16:14.259
using Web technologies to deploy it on the
Web, using the Web to garner user feedback

00:16:14.259 --> 00:16:19.019
and then iterating quickly where the user
doesn't actually have to buy a piece of software

00:16:19.019 --> 00:16:23.459
every three months or ever six months, where
the user doesn't have to do a new install

00:16:23.459 --> 00:16:29.369
and wipe his disk out, where the user just
gets improvement. So that's also what we are

00:16:29.369 --> 00:16:34.670
looking at in this work along side making
sure that the AJAX applications that until

00:16:34.670 --> 00:16:39.730
now have been decried as "don't do AJAX apps,
it won't work for a blind user" can actually

00:16:39.730 --> 00:16:45.749
be done such that they work for all users.
So, having said that, let's sort of see--talk

00:16:45.749 --> 00:16:53.249
a little bit about the underpinning technologies
that are helping us bridge those gaps. So,

00:16:53.249 --> 00:17:00.910
if you think of the HTML DOM and Javascript
as the assembly language of the Web--I talked

00:17:00.910 --> 00:17:09.189
briefly earlier about why AJAX applications
in the 2004-2005 timeframe proved a significant

00:17:09.189 --> 00:17:15.010
stumbling block for blind users using adaptive
technologies from that era. What happened

00:17:15.010 --> 00:17:23.029
was, as I said, those technologies treated
Web pages as documents and knew about the

00:17:23.029 --> 00:17:29.090
few interactive elements that HTML had in
terms of form, fields, and anchors, and, you

00:17:29.090 --> 00:17:34.830
know, select boxes, whatnot. But when you
write an AJAX app, we do two things. We--the

00:17:34.830 --> 00:17:39.350
A is the important part, the asynchronous
part, which means that pages are changing

00:17:39.350 --> 00:17:46.110
under you as you interact with them. Also,
we add behavior to what looks like a piece

00:17:46.110 --> 00:17:51.510
of text through a Javascript event handler
and adaptive technology that is just looking

00:17:51.510 --> 00:17:56.919
at the document as a document doesn't know
that what you have is a checkbox or a widget.

00:17:56.919 --> 00:18:05.039
So, some time in summer of 2003, I think,
from memory, I and a few others at IBM--at

00:18:05.039 --> 00:18:11.299
the time I was at IBM research, we started
a piece of work for adding a couple of op

00:18:11.299 --> 00:18:17.649
codes, if you will, to the assembly language
that is the HTML DOM. So, if you think about

00:18:17.649 --> 00:18:23.390
what you need to discover that a piece of
text that has suddenly become a menu is a

00:18:23.390 --> 00:18:31.090
menu, and if you ask, "What do I as a programmer
need to be able to figure out that a menu

00:18:31.090 --> 00:18:37.100
item in a DHTML application is disabled or
enabled", right? At a programming language

00:18:37.100 --> 00:18:43.010
level, this comes down to enabling reflection.
And so that's what was added and has, today,

00:18:43.010 --> 00:18:48.600
become a specification called Accessible Rich
Internet Applications Specification from the

00:18:48.600 --> 00:18:55.710
W3C. It's called ARIA for short. It's a very
simple spec. As specs go--specs are hard to

00:18:55.710 --> 00:19:02.580
read. So here's your 2-minute tutorial on
it. It's basically a set of very simple DOM

00:19:02.580 --> 00:19:08.200
properties that enable reflection. There's
three classes of things. There is a rule attribute

00:19:08.200 --> 00:19:13.669
that allows you to ask something, what are
you, and it can reply to you, saying I'm a

00:19:13.669 --> 00:19:20.570
checkbox, I'm a pull down, I am a tree control.
There are dynamic properties that tell you

00:19:20.570 --> 00:19:27.019
the state of something: is this button pressed,
is this menu open, is this menu item disabled?

00:19:27.019 --> 00:19:34.330
And there are--there is the ability to setup
observer-observable relations using a mechanism

00:19:34.330 --> 00:19:41.169
called Live Regions. What that does is that,
say, you have--you create a classic mail application

00:19:41.169 --> 00:19:46.330
where you're showing two panes. One pane is
showing a summary of your inbox, and the other

00:19:46.330 --> 00:19:52.380
pane is showing the thread that you currently
have opened. And then as you move your selector

00:19:52.380 --> 00:19:59.789
in the summary pane, the message that is being
displayed in the right pane changes. So basically,

00:19:59.789 --> 00:20:05.840
you need to know that there is an observer-observable
relationship between these two panes if you

00:20:05.840 --> 00:20:11.169
are going to be able to write software that
speaks that updated message on the right pane.

00:20:11.169 --> 00:20:15.500
So that's what live regions do. Thus technology
is now being implemented in pretty much all

00:20:15.500 --> 00:20:22.860
the browsers. Firefox was the first to implement
it; Opera followed; Web Kit just started implementing

00:20:22.860 --> 00:20:27.679
it; and IE8, in its beta, has announcement
an early implementation. So that's fairly

00:20:27.679 --> 00:20:36.190
full coverage. Flip to the next slide. So,
the ARIA op codes that I mentioned give us

00:20:36.190 --> 00:20:43.950
as Web developers a leg to stand on with respect
to communicating all the coolness in our Web

00:20:43.950 --> 00:20:49.210
applications to various adaptive technologies.
But if you think about it--so let's say you

00:20:49.210 --> 00:20:56.330
go write your cool music sharing app. A user
who comes to your site doesn't come for the

00:20:56.330 --> 00:21:01.740
pleasure of checking a checkbox, right? The
user comes there to use your application.

00:21:01.740 --> 00:21:09.120
So though something like ARIA is needed for
making sure that all the basic widgetry in

00:21:09.120 --> 00:21:15.200
a GUI application that's done as a Web app
work correctly with adaptive technology, that

00:21:15.200 --> 00:21:19.740
is not enough. So as an engineer would say,
that's a necessary condition that's not a

00:21:19.740 --> 00:21:28.340
sufficient condition. The sufficiency condition
is actually what I call building usable UI.

00:21:28.340 --> 00:21:32.889
And so, at this point, we are back to talking
usability as opposed to, you know, just users

00:21:32.889 --> 00:21:39.820
with special needs. A usable UI is one that
enables your users to use the application

00:21:39.820 --> 00:21:45.250
end to end. And there's this very difficult
to quantify thing, which is, at the end of

00:21:45.250 --> 00:21:49.840
the day, they are happy. The sort of happiness
is something that, you know, we have Google

00:21:49.840 --> 00:21:56.450
forecasts on our lot in terms of users being
happy. It's not a tangible thing, but it makes

00:21:56.450 --> 00:22:01.220
a huge difference in how many users come and
use your thing. I mean, Apple always had the

00:22:01.220 --> 00:22:05.330
same thing in terms of it gives you pleasure
to use their devices. And I believe there

00:22:05.330 --> 00:22:12.130
is a similar happiness factor with Web application
that comes from "It just worked. I got my

00:22:12.130 --> 00:22:17.559
job done." It is not glitz that makes you
happy, it's when things work that you get

00:22:17.559 --> 00:22:22.549
happy. So, flip to the next slide. So, in
all my experience of doing good auditory user

00:22:22.549 --> 00:22:29.000
interfaces, there are about five categories
of things that you do in order to make sure

00:22:29.000 --> 00:22:34.350
that an application works really well when
you are not looking at the screen. And by

00:22:34.350 --> 00:22:39.299
the way, a lot of these things are actually
useful for power users as well. So, when you

00:22:39.299 --> 00:22:44.779
look at this category of things that I'm enumerating,
they're not just for special-needs users.

00:22:44.779 --> 00:22:50.250
They're really help your power users as well.
So the first among these is sort of an obvious

00:22:50.250 --> 00:22:54.340
one that everybody in the accessibility field
tells you, which is make sure that all your

00:22:54.340 --> 00:22:59.529
visual elements have good metadata associated
with that. So people tell you that, but unfortunately,

00:22:59.529 --> 00:23:05.570
they stop there. So that's not enough. That's
sort of a starter. The next thing you need

00:23:05.570 --> 00:23:14.750
to do is to ensure that all user actions produce
appropriate feedback. This again sounds like

00:23:14.750 --> 00:23:19.850
a no-brainer from a usability perspective.
The reason it's important to reiterate this

00:23:19.850 --> 00:23:27.299
from a blind user perspective is that often
that confirmation, the fact that I deleted

00:23:27.299 --> 00:23:33.600
this mail message, the deletion happened,
is usually indicated by just a visual change,

00:23:33.600 --> 00:23:41.659
and we need to make sure that the right AJAX
DOM bits are used so that whoever is using

00:23:41.659 --> 00:23:46.899
speech output gets the right notifications.
The next bit is actually quite interesting,

00:23:46.899 --> 00:23:54.039
which is, if you think about how a complex
visual layout works for you, it works because

00:23:54.039 --> 00:23:59.419
your eye gets random access to different parts
of that display. And we'll demonstrate all

00:23:59.419 --> 00:24:04.049
of these with very concrete examples very
soon, when you start showing your code. But

00:24:04.049 --> 00:24:08.029
think about how you look at the railway time
table. Think about how you look at the bus

00:24:08.029 --> 00:24:12.740
time table. Think about how you look at the
stock chart. You never read those things like

00:24:12.740 --> 00:24:20.480
documents. You do not read them left to right,
top to down. In fact what happens is you actually

00:24:20.480 --> 00:24:25.659
look at them and they essentially function
as a mini-data base. And so there's all this

00:24:25.659 --> 00:24:30.470
information sitting on the screen and your
eye essentially does a quick query where it

00:24:30.470 --> 00:24:36.259
says, "What does Google stock at right now?"
Or I need to be at Mosconi at nine in the

00:24:36.259 --> 00:24:41.159
morning. When is the train from Mountainview
leaving that gets in at nine? Oh, yeah, there's

00:24:41.159 --> 00:24:45.299
a train getting in at eight-fifty. Or when
does it leave Mountainview? And then you say,

00:24:45.299 --> 00:24:49.630
"That's the train that I'm taking." Right?
So, this is something you absolutely have

00:24:49.630 --> 00:24:55.610
to enable in order to build a user interface
that actually works for somebody who is using

00:24:55.610 --> 00:25:00.070
a nice eyes-free interface as opposed to,
you know, it's out of just, okay, you can

00:25:00.070 --> 00:25:04.580
muddle your way through it. And guess what?
What I just said applies to a cellphone as

00:25:04.580 --> 00:25:09.519
well because you don't have a big screen,
the whole time table doesn't fit how you are

00:25:09.519 --> 00:25:13.960
going to change it--use that train time table
on your cellphone, and you're going to search.

00:25:13.960 --> 00:25:17.500
And then finally there's, you know, getting
to different pieces of the page with the keyboard

00:25:17.500 --> 00:25:21.450
rather than relying on random access with
the mouse and pointing it. And so, that's

00:25:21.450 --> 00:25:26.799
the category of five things we do. And so,
flip to the next side. And so, about October

00:25:26.799 --> 00:25:34.450
of 2007, last year, Charles and I started
a framework called AxsJAX. We came up with

00:25:34.450 --> 00:25:41.850
this name saying AJAX and we wanted to inject
the accessibility support into AJAX applications

00:25:41.850 --> 00:25:48.399
without disrupting how those applications
were done. And so one fine morning over a

00:25:48.399 --> 00:25:53.700
good Google breakfast he and I doodled on
a paper napkin and came up with a logo that

00:25:53.700 --> 00:25:59.720
Charles can model for you. And so, the idea
that we said there's this car called Web Tutor

00:25:59.720 --> 00:26:06.330
II and that's on the move which is powered
by AJAX and, you know, if you are driving

00:26:06.330 --> 00:26:10.230
a car and, you know, you need to keep moving
and need to do a quick fix, you jack it up

00:26:10.230 --> 00:26:14.500
and push something under it and so we put
the access under it. And so the goal of the

00:26:14.500 --> 00:26:23.600
AxsJAX framework is really to protect and
insulate, abstract the web developer from

00:26:23.600 --> 00:26:29.279
the minutiae of the couple of op codes in
the DOM that I talked about. But lets you

00:26:29.279 --> 00:26:37.899
as the web developer focus on--when the user
deletes a mail message in my web app, I would

00:26:37.899 --> 00:26:45.830
like whatever adapter technology he is using
to say message deleted. That sounds like a

00:26:45.830 --> 00:26:52.090
no-brainer, but this is again a hard problem
because the screen readers that various users

00:26:52.090 --> 00:26:58.970
use, each of them do not actually give you
the developer an API that says speak the screen.

00:26:58.970 --> 00:27:03.380
They basically say you put it on the screen
and we will talk, which means that as an application

00:27:03.380 --> 00:27:08.779
developer you are sort of down in this write
once and debug everywhere model, where you

00:27:08.779 --> 00:27:13.429
write your code and then, you know, if you
actually are paying attention to the issue

00:27:13.429 --> 00:27:16.850
then you are running one screen reader and
say, "Oh, that screen reader said that, it

00:27:16.850 --> 00:27:20.320
worked." And then go to another screen and
it doesn't say the same thing. And screen

00:27:20.320 --> 00:27:25.490
readers are expensive. And so this whole thing
basically, web developers throw up their hands

00:27:25.490 --> 00:27:29.610
and say "it's too painful, I'd like to do
the right thing, tell me what and we'll do

00:27:29.610 --> 00:27:34.259
it." And then if you throw lots of guidelines
at them that all content based then there

00:27:34.259 --> 00:27:40.149
are consequences in what we saw in 2005 and
2006 all the AJAX apps are completely unusable

00:27:40.149 --> 00:27:44.240
if you couldn't see. And so what we want and
what we have done in that as we are doing

00:27:44.240 --> 00:27:50.120
two things in AxsJAX framework: One, is to
abstract out details of the audio spec by

00:27:50.120 --> 00:27:55.519
building on Aria, the browser are implementing
Aria, the screen readers are implementing

00:27:55.519 --> 00:28:01.090
support for Aria but we are giving you as
a web developer and not just you, but us as

00:28:01.090 --> 00:28:04.620
web developers as well because Charles and
I have been using our framework to build the

00:28:04.620 --> 00:28:08.809
things that we'll show you. We are giving
ourselves higher level of calls that allow

00:28:08.809 --> 00:28:15.429
us, in JavaScript, to say speak this DOM node
or speak this piece of text without worrying

00:28:15.429 --> 00:28:19.230
about is it on the screen or should I tell
the screen reader to go read, you know, the

00:28:19.230 --> 00:28:23.440
contents that are on the top left corner or
something like that. The other thing we are

00:28:23.440 --> 00:28:28.659
doing with this framework is, what I said
earlier about how web development works, which

00:28:28.659 --> 00:28:33.450
is it's all about agile development and deploying
it on the web and using web technologies to

00:28:33.450 --> 00:28:41.769
deploy and iterate and improve. And so the
open-source source framework in October and

00:28:41.769 --> 00:28:46.419
all of the code is checked into the Google
code project and these slides have a link

00:28:46.419 --> 00:28:52.289
to the--that you will see. Basically just
search for AxsJAX and Google and you'll find

00:28:52.289 --> 00:28:58.519
it there. One of the advantages that we got
out in this project that is actually quite

00:28:58.519 --> 00:29:05.039
nice with respect to distributing software
using the web is that because it's checked

00:29:05.039 --> 00:29:12.480
into Google code all of this code is basically
what I call URI addressable. A simple fact

00:29:12.480 --> 00:29:18.740
right, is Google code user subversion. Subversion
is accessible via HTTP, each of those things

00:29:18.740 --> 00:29:24.710
are no-brainers but when Charles and I check
in code, each of this scripts have a URL.

00:29:24.710 --> 00:29:30.490
And we inject access--we inject these scripts
into applications when we're prototyping through

00:29:30.490 --> 00:29:35.009
Greasemonkey which is another wonderful piece
of software. And so you connect the dots.

00:29:35.009 --> 00:29:40.090
You connect Google Code and you're going connect
SVN, you connect JavaScript script checked

00:29:40.090 --> 00:29:45.360
into this SVN repository that are accessible
via HTTP URLs and you then connect up Greasemonkey.

00:29:45.360 --> 00:29:51.340
And you suddenly get this prototyping environment
where you can--Charles and I can check-in

00:29:51.340 --> 00:29:57.590
an improvement to a script and our end users
get them immediately. And then what we do

00:29:57.590 --> 00:30:03.179
in the spirit of agile development is that
as our scripts get robust, get user feedback

00:30:03.179 --> 00:30:07.940
and things work, then we go back and check
it into the main code repository for whatever

00:30:07.940 --> 00:30:13.750
app that we are extending and then basically
from the external we leave the code on codegoogle.com

00:30:13.750 --> 00:30:18.590
and so that you the developers can study how
we did this. And then we basically pull out

00:30:18.590 --> 00:30:22.870
the Greasemonkey loading magic for that particular
app and everything continues to work. And

00:30:22.870 --> 00:30:28.120
so the lesson is; insulate your users from
the fact that today you are in development

00:30:28.120 --> 00:30:33.450
mode and tomorrow you are stable, but get
the advantage of what you have built for the

00:30:33.450 --> 00:30:37.669
users as quickly as possible because there
is no point in me and Charles building this

00:30:37.669 --> 00:30:42.169
in our office and waiting for a year for it
to get perfect and then give it to the users

00:30:42.169 --> 00:30:47.250
because the users need it now. And what we
have learned and I know this firsthand is

00:30:47.250 --> 00:30:54.049
that users need these solutions badly enough
right now that they would rather have it as

00:30:54.049 --> 00:30:58.600
you are building it and use it and give you
feedback rather than you sort of saying I

00:30:58.600 --> 00:31:02.080
know best and I will develop it in secret
and then give it to you a year later. And

00:31:02.080 --> 00:31:07.070
so we will start showing you some demos and
code right now. And so the first set of demos

00:31:07.070 --> 00:31:12.190
and examples I'd like to talk about is in
the context of Google web search. Now web

00:31:12.190 --> 00:31:21.120
search, today we use a few AJAX bits in web
search for enabling some features but traditionally

00:31:21.120 --> 00:31:26.820
nobody ever thought of the result page as
an AJAX application. In fact our results page

00:31:26.820 --> 00:31:34.220
still works in down level browsers like Links
today but one I'd like to show you as we sort

00:31:34.220 --> 00:31:41.940
of go through the set of slides and show you
the code running is that by using AJAX in

00:31:41.940 --> 00:31:51.200
conjunction with AxsJAX framework that gives
you all the goodness of Aria under the hood

00:31:51.200 --> 00:31:54.970
you can actually significantly enhance the
user experience for something that is very

00:31:54.970 --> 00:32:01.629
content rich like the Google web search results
page. And the user experience that you get

00:32:01.629 --> 00:32:08.240
as a blind user or as a low vision user with
this, you would never go back to using a document

00:32:08.240 --> 00:32:12.730
oriented interface which was, you know, what
everybody was using until we started with

00:32:12.730 --> 00:32:17.850
this work. And so the code that I'll show
you does all of those things that I talked

00:32:17.850 --> 00:32:23.259
about. The Google results page is a very rich
page when you do a results search for flowers

00:32:23.259 --> 00:32:29.529
or something like that; you see ads which
depending on what you are doing are extremely

00:32:29.529 --> 00:32:34.919
useful. And so for instance if I'm shopping
for something, I often go look at the Google

00:32:34.919 --> 00:32:39.610
ads because the ads are actually much easier
to read than something on the manufacturer's

00:32:39.610 --> 00:32:45.799
website which is a lot busier typically. If
I'm looking--if I'm doing research on something,

00:32:45.799 --> 00:32:51.649
then I want to go look at the search results
versus the ads, if I want help in rephrasing

00:32:51.649 --> 00:32:58.080
my query then I want to look at all the related
searches that Google provides. If the first

00:32:58.080 --> 00:33:03.259
set of 10 results doesn't contain the answer
which fortunately given our search quality

00:33:03.259 --> 00:33:08.740
is rare but does happen, I want to go to the
next page of the results. As a blind user

00:33:08.740 --> 00:33:12.889
I don't care if it is the next page of the
result I just want the eleventh result. I

00:33:12.889 --> 00:33:17.240
don't want to be getting a fresh page and
then go hunting in it for the first result

00:33:17.240 --> 00:33:23.620
again. And when I do a search from a good
auditory user interface point of view I just

00:33:23.620 --> 00:33:28.720
want the first result spoken. Again from an
auditory user interface point of view, that

00:33:28.720 --> 00:33:34.139
result as it is displayed has a lot of things
in it. It has the main title of the research

00:33:34.139 --> 00:33:38.980
and the result. It has a snippet which is
a body of text about the result. It has a

00:33:38.980 --> 00:33:43.980
bunch of links. What is the most common action
that you do when you have that result? You

00:33:43.980 --> 00:33:49.059
hit enter and you go to that site and I want
that? And so I go and let's bring up our demos

00:33:49.059 --> 00:33:52.610
here and we'll talk through this I'll let
Charles do a bit of talking so that I can

00:33:52.610 --> 00:33:56.419
drink some water and he'll also show you some
code snippets.

00:33:56.419 --> 00:34:03.580
&gt;&gt; CHEN: Okay, so, I'm going to turn on the
speaker and do a search for flowers. And so

00:34:03.580 --> 00:34:07.340
I've typed in flowers into the search field.
And I'm going to do a search and you'll see

00:34:07.340 --> 00:34:12.319
that what happens next is exactly as Raman
had described earlier.

00:34:12.319 --> 00:34:15.069
&gt;&gt; COMPUTER: Flowers, roses, plants.

00:34:15.069 --> 00:34:19.970
&gt;&gt; CHEN: So notice how when that search result--the
page of the results came up, the first result

00:34:19.970 --> 00:34:25.349
was spoken. And you also noticed that it magnified
the text there but it didn't magnify the whole

00:34:25.349 --> 00:34:30.419
screen, it just magnified the one result that
the user is interested in. Now if I want to

00:34:30.419 --> 00:34:34.800
proceed to the next result rather than trying
to scramble around and find where the next

00:34:34.800 --> 00:34:39.409
result starts, I can hit a single key and
get to the next result. And so I'm going to

00:34:39.409 --> 00:34:40.819
do that right now.

00:34:40.819 --> 00:34:43.809
&gt;&gt; COMPUTER: Flowers, plants, roses, and [INDISTINCT].

00:34:43.809 --> 00:34:50.149
&gt;&gt; CHEN: And so you see it just went onto
the next result. Now if you keep on going

00:34:50.149 --> 00:34:54.129
and you reach the last result of this page,
why should the user have to dig around and

00:34:54.129 --> 00:34:59.680
find the link for the next page? To them it
should be as simple as just going to the next

00:34:59.680 --> 00:35:04.099
result, and the logical thing to do at that
point would be to take them to the next page

00:35:04.099 --> 00:35:08.809
and read the first result to them. And so
I'm going to do that now and I'm going to

00:35:08.809 --> 00:35:13.490
be going pretty quickly and so we can get
through this. And so...

00:35:13.490 --> 00:35:17.950
&gt;&gt; COMPUTER: [INDISTINCT] flowers vineyard
[ph] [INDISTINCT] flowers.

00:35:17.950 --> 00:35:23.770
&gt;&gt; CHEN: And notice how now it loaded up the
next page for me and it read the first result.

00:35:23.770 --> 00:35:28.180
&gt;&gt; RAMAN: The secret of building a good auditory
interface is that you should also learn to

00:35:28.180 --> 00:35:32.270
stop the speech immediately quickly and notice
how quickly the speech flashed and that's

00:35:32.270 --> 00:35:33.559
important.

00:35:33.559 --> 00:35:39.339
&gt;&gt; CHEN: Yes, silence is golden. Now the other
thing is as Raman had mentioned, sometimes

00:35:39.339 --> 00:35:44.109
you actually want to see sponsored links or
related searches and not the main result set.

00:35:44.109 --> 00:35:48.250
And so we can do that as well with again a
single key press. And so I'm going to go through

00:35:48.250 --> 00:35:49.750
sponsored links right now.

00:35:49.750 --> 00:35:54.290
&gt;&gt; COMPUTER: Free delivery [INDISTINCT] same
date flowers deliv--flowers...

00:35:54.290 --> 00:35:59.859
&gt;&gt; CHEN: So I can do that. And if you are
wondering how the user can discover these

00:35:59.859 --> 00:36:05.500
keys, we've kept a convention of letting them
type the question mark and always hearing

00:36:05.500 --> 00:36:07.490
the available keys.

00:36:07.490 --> 00:36:12.670
&gt;&gt; COMPUTER: The following shortcut keys are
available. Down, [INDISTINCT], cycle back.

00:36:12.670 --> 00:36:14.569
&gt;&gt; CHEN: And so it will keep going.

00:36:14.569 --> 00:36:19.390
&gt;&gt; RAMAN: So there are two things I'd like
to sort of describe in this context. One is

00:36:19.390 --> 00:36:25.630
the end-user's mental model, and the other,
which is the web developer's mental model

00:36:25.630 --> 00:36:31.230
so that--all of you as web developers, when
you sort of look at a complex webpage, and

00:36:31.230 --> 00:36:35.530
look at--think of the AxsJAX framework, and
sort understand what you do. So let me first

00:36:35.530 --> 00:36:43.470
talk about the end-user's model. The end-user's
model is that, at any given point, you can

00:36:43.470 --> 00:36:48.819
do a set of things based on where you are,
and you discover that by hitting the question

00:36:48.819 --> 00:36:57.210
mark. You discover the things you can do and
those things that you can do typically walk

00:36:57.210 --> 00:37:02.700
you through the contents on a page, such as
moving from result to result or moving from

00:37:02.700 --> 00:37:10.030
ad to ad or moving from result--search--you
know, search refinement to search refinement.

00:37:10.030 --> 00:37:18.960
That's the end user's mental model, notice
that this sort of matches what we as web developers

00:37:18.960 --> 00:37:24.599
have often--have always driven for, for the
mainstream user who can see. So you go through

00:37:24.599 --> 00:37:30.170
a lot of trouble in terms of building your
DOM and building your CSS [ph] so that the

00:37:30.170 --> 00:37:36.710
human eye can do what I just said, which is
either move from result to result, or jump

00:37:36.710 --> 00:37:42.800
to the ad, or jump to the various search refinements.
That's the end-user model. How do you do this

00:37:42.800 --> 00:37:48.880
as web developers? The way you do this as
web developers in the AxsJAX framework is

00:37:48.880 --> 00:37:56.790
to leverage a piece of software we wrote in
the framework called AxsNAV. What the AxsNAV

00:37:56.790 --> 00:38:07.119
module does is it takes from you a declarative
representation of how you want to be able

00:38:07.119 --> 00:38:13.809
to have the user navigate that page. And the
way you should think of this as developers,

00:38:13.809 --> 00:38:19.569
is that if you think of that big complex DOM
that you have built and laid out, that's a

00:38:19.569 --> 00:38:28.309
collection of nodes, think of there being
many logical trails or hiking paths, or whatever

00:38:28.309 --> 00:38:34.200
you want to call it, through that DOM, so
in the case of Google results as you saw,

00:38:34.200 --> 00:38:39.170
one interesting trail is one where you walk
along all the results, and other interesting

00:38:39.170 --> 00:38:45.069
trail is one that where you walk along the
sponsored links. And it's useful to know what

00:38:45.069 --> 00:38:50.690
trails there are on a page. So if you look
at that fragment of XML that Charles is showing

00:38:50.690 --> 00:38:57.309
from our core depository, what we do is we
declare in this fairly simple XML thing that

00:38:57.309 --> 00:39:02.130
we cooked up, this can be XML, this can be
JSON--it's basically a piece of declarative

00:39:02.130 --> 00:39:08.930
data that was factored out of our code after
we wrote the first few examples and then sort

00:39:08.930 --> 00:39:14.280
of stepped back and stared at it to see what
we had done as software engineers. So in the

00:39:14.280 --> 00:39:20.579
declarative format, you basically say, here
are the trails in my page, you basically use

00:39:20.579 --> 00:39:27.339
x parts to define--identify the node sets
that make up those trails. You say what keys

00:39:27.339 --> 00:39:35.329
you want to use as forward/back-keys, for
moving on that trail, and optionally, you

00:39:35.329 --> 00:39:41.280
can specify what action you want executed
when your user moves through that trail. That's

00:39:41.280 --> 00:39:47.300
your classic visitor pattern. So notice by
just doing that, by defining this--what we

00:39:47.300 --> 00:39:53.869
call them a CNR file for counter navigation
roads, by just defining that, the AxsJAX framework

00:39:53.869 --> 00:40:00.490
actually does a lot of the work for you. So
for an application like Google web search,

00:40:00.490 --> 00:40:07.299
most of the work was actually done in that
CNR file. Now, at this point, you can basically

00:40:07.299 --> 00:40:13.109
extrapolate to many, many content rich sites
on the web that can leverage this--everything

00:40:13.109 --> 00:40:19.059
from the New York Times, to CNN, to Wikipedia,
to Gmail, to a lot of things, right. And so

00:40:19.059 --> 00:40:24.770
if you look at the Google code repository
for AxsJAX, you will see that we have scripts

00:40:24.770 --> 00:40:30.510
for Gmail, we have scripts for Google Reader,
we have things for Google books, we've done

00:40:30.510 --> 00:40:35.970
a whole slew of things, and what is happening
as we go through these, is that as these things

00:40:35.970 --> 00:40:43.440
get stable and ready for broader deployment,
they basically go back into the product. So

00:40:43.440 --> 00:40:47.970
I'd like to spend some time talking about
Google Reader, which is one of my favorite

00:40:47.970 --> 00:40:52.869
AJAX applications and one of the first things
that I actually voluntarily did inside the

00:40:52.869 --> 00:40:58.730
browser--other than browsing web pages, simply
because it was such a well done application.

00:40:58.730 --> 00:41:04.569
So those of you who have not done--used Google
Reader, it's a very good feed reader and sort

00:41:04.569 --> 00:41:09.470
of your--the amount of things you read, once
you use Google Reader, goes up by an order

00:41:09.470 --> 00:41:16.450
of magnitude. It is a power user application,
which means that a lot of functionality in

00:41:16.450 --> 00:41:22.230
that application--all of that functionality,
in fact, are actually driven from the keyboard.

00:41:22.230 --> 00:41:27.670
You can use the mouse, but believe me, you
will be more efficient if you use the keyboard.

00:41:27.670 --> 00:41:32.990
Everything is keyboard-driven, you subscribe
to a bunch of feeds, you browse through your

00:41:32.990 --> 00:41:38.540
feeds, you open a feed, you browse through
articles and you go bang, bang, bang. And

00:41:38.540 --> 00:41:44.359
its gears enabled, it has offline storage,
all of that wonderful stuff. So Charles and

00:41:44.359 --> 00:41:51.890
I used the AxsJAX framework in--last fall,
October, November last year to add in, sort

00:41:51.890 --> 00:41:57.380
of, a good auditory user interface to it,
and then we integrated that support into the

00:41:57.380 --> 00:42:02.630
application in March and we're shipping the
thing now. What we'd like to show you is what

00:42:02.630 --> 00:42:08.630
it feels like to interact with Google Reader
that is AxsJAX enabled and you will see a

00:42:08.630 --> 00:42:17.970
lot of what I was talking about earlier with
respect to--as a web developer, audio--speech

00:42:17.970 --> 00:42:24.599
enabling, voice enabling access enabling your
app without worrying about adapter technology.

00:42:24.599 --> 00:42:30.299
And yet, having it work completely seamlessly
with adapter technology. At the end of the

00:42:30.299 --> 00:42:35.049
day, this is what standards give you, and
this is why having ARIA as a standard, that

00:42:35.049 --> 00:42:41.190
is implemented by the browsers, by the--adapter
technology vendors and used by us as web app

00:42:41.190 --> 00:42:46.130
developers gives you, and what we have been
doing is, building a high-level abstraction

00:42:46.130 --> 00:42:51.359
over it as I said and so things like the Google
Reader can just say speak this text and it

00:42:51.359 --> 00:42:53.530
speaks it. So let's go to Google Reader--

00:42:53.530 --> 00:42:58.220
&gt;&gt; CHEN: Alright, so I'm going to bring up
Google Reader, and I'm going to activate a

00:42:58.220 --> 00:43:01.010
version that has the support in it--

00:43:01.010 --> 00:43:05.180
&gt;&gt; COMPUTER: Click here for ARIA enhanced
Google Reader.

00:43:05.180 --> 00:43:09.260
&gt;&gt; CHEN: Okay, so I'm going to activate that.

00:43:09.260 --> 00:43:10.260
&gt;&gt; COMPUTER: [INDISTINCT] 850, BT8--

00:43:10.260 --> 00:43:15.430
&gt;&gt; CHEN: So now, notice that what happens
is it speaks where the visual highlight is,

00:43:15.430 --> 00:43:21.349
so first off, I'm actually going to make the
highlight a little bit larger, and more visible.

00:43:21.349 --> 00:43:26.910
So now you see that it's enlarging the area
that I'm highlighting and as I navigate through

00:43:26.910 --> 00:43:32.790
that with reader hotkeys, you'll see that
it's reading where I'm at, so--

00:43:32.790 --> 00:43:34.640
&gt;&gt; COMPUTER: Cool Tools 28--

00:43:34.640 --> 00:43:39.210
&gt;&gt; CHEN: Okay, so I'm going to open the official
Google blog.

00:43:39.210 --> 00:43:43.450
&gt;&gt; COMPUTER: [INDISTINCT] Official Google
Blog 18.

00:43:43.450 --> 00:43:49.220
&gt;&gt; CHEN: Okay, now I'm going to open this
feed, and show the articles.

00:43:49.220 --> 00:43:51.180
&gt;&gt; COMPUTER: Articles loaded.

00:43:51.180 --> 00:43:57.460
&gt;&gt; CHEN: Now, notice that it just said "articles
loaded" right there. That text is nowhere

00:43:57.460 --> 00:44:03.390
on the screen. However, through AxsJAX, by
issuing a speak text call, it calls its assistive

00:44:03.390 --> 00:44:08.849
technology to say that, even though it's not
displayed. Well that information isn't needed

00:44:08.849 --> 00:44:14.180
for a sighted user who's looking at the screen
and can just visually tell the page is loaded.

00:44:14.180 --> 00:44:18.390
It's important to provide that auditory feedback
for a user who's just doing an audio interface

00:44:18.390 --> 00:44:20.150
and is only listening to the thing--

00:44:20.150 --> 00:44:25.099
&gt;&gt; RAMAN: So this is an interesting bridging
technology that we have built, which is traditionally,

00:44:25.099 --> 00:44:32.079
screen readers, as the name implies, read
what's on the screen. Now, often, putting

00:44:32.079 --> 00:44:38.890
information on the screen just so a screen
reader reads it to somebody who cannot see,

00:44:38.890 --> 00:44:44.440
detracts from your--the mainstream UI that
you're building, but as Charles pointed out,

00:44:44.440 --> 00:44:49.210
you can see that the article is open. There's
no point in wasting screen real estate, saying

00:44:49.210 --> 00:44:54.930
article's loaded. So this has been an interesting
challenge in the past, it's been a challenge

00:44:54.930 --> 00:45:00.180
even in the case of desktop applications.
And one of the neat things that is there in

00:45:00.180 --> 00:45:06.780
the AxsJAX framework is this ability to use
the DOM and then trigger speech feedback from

00:45:06.780 --> 00:45:13.059
the adaptive technologies. So whatever deep
dark magic is involved between DOM op codes

00:45:13.059 --> 00:45:17.960
and screen reader implementations is abstracted
away from you. And we've done the testing

00:45:17.960 --> 00:45:24.160
to make sure that it works with all the shipping
screen readers so you make your call and it

00:45:24.160 --> 00:45:26.790
works. Do you want to talk [INDISTINCT]?

00:45:26.790 --> 00:45:30.390
&gt;&gt; CHARLES CHEN: Yeah. So we're going to go
ahead and just show that it can read articles

00:45:30.390 --> 00:45:32.319
as well so--

00:45:32.319 --> 00:45:37.299
&gt;&gt; COMPUTER: 9:45 a.m. three hours ago, happy
birthday, Google years.

00:45:37.299 --> 00:45:40.309
&gt;&gt; CHEN: So you can just use the hotkeys again
to go--

00:45:40.309 --> 00:45:43.940
&gt;&gt; COMPUTER: May 27, 2008, yesterday, many
here, many [INDISTINCT]

00:45:43.940 --> 00:45:48.280
&gt;&gt; CHEN: And so by doing this, you have access
to all the functionality of Google Reader

00:45:48.280 --> 00:45:50.730
and you can just hear it.

00:45:50.730 --> 00:45:53.500
&gt;&gt; RAMAN: Shall we do any translation?

00:45:53.500 --> 00:45:55.030
&gt;&gt; CHEN: Yes--

00:45:55.030 --> 00:46:00.420
&gt;&gt; RAMAN: So, while Charles brings up the
next demo, this is something interesting in

00:46:00.420 --> 00:46:06.160
terms of building web solutions out of web
parts. So for us at Google, as we--everybody

00:46:06.160 --> 00:46:10.200
has been stressing at this conference the
Web is the platform and we do lots of cool

00:46:10.200 --> 00:46:15.329
technologies. So one more cool Google technology
is Google translation which I'm sure many

00:46:15.329 --> 00:46:22.420
of you have seen, especially on the results
page where we say, translate this link. That

00:46:22.420 --> 00:46:28.089
same translation technology about six months
ago, I believe, some time last December, became

00:46:28.089 --> 00:46:35.829
available to Google talk users as wired chat-bots.
So now, you can invite this chat buddy who's

00:46:35.829 --> 00:46:40.829
a 'bot' and you type it to him in English
and he will type back at you in the language

00:46:40.829 --> 00:46:45.599
of your choice, so and, there are 'bots' for
each of the language translations that we

00:46:45.599 --> 00:46:52.829
support. So then, that's our next piece right?
So now, where is the chat-bot most useful?

00:46:52.829 --> 00:46:59.150
The chat-bot is most useful in two contexts,
when you are chatting with somebody whose

00:46:59.150 --> 00:47:04.099
native language you don't speak, or when you're
doing email. And email and chat sort of go

00:47:04.099 --> 00:47:09.599
so well hand in hand, that those two things
are integrated in the Gmail interface. So

00:47:09.599 --> 00:47:14.819
in December, January, Charles and I used the
AxsJAX framework to make the Gmail interface

00:47:14.819 --> 00:47:22.950
work fluently. So then we had that, so now
we had Gmail talking through all the screen

00:47:22.950 --> 00:47:28.410
readers, self-voicing browsers, using the
underlying Aria [INDISTINCT]. Gmail, because

00:47:28.410 --> 00:47:32.980
it's a power-user app again, everything can
be done from the keyboard so we didn't even

00:47:32.980 --> 00:47:38.940
have to add keyboard support. So now, let's
put the pieces together. You have Gmail, you

00:47:38.940 --> 00:47:45.000
have chat, you have translation and we had
speech output. Suddenly, you sort of connect

00:47:45.000 --> 00:47:49.430
the dots, this thing turns into, you know,
your friendly neighborhood interpreter that

00:47:49.430 --> 00:47:53.539
comes along for free and translates for you
from one language to another and not just

00:47:53.539 --> 00:47:57.970
translates by showing you the text on the
screen, it speaks it. So let's do the demo.

00:47:57.970 --> 00:48:09.250
&gt;&gt; CHEN: Okay. So, right now I'm in Gmail
and I'm going to go to the chat area and start

00:48:09.250 --> 00:48:11.490
chatting with the bot.

00:48:11.490 --> 00:48:16.910
&gt;&gt; COMPUTER: [INDISTINCT] &lt;mgchf.talk.cable.com&gt;online
new chat message, press escape to ignore the

00:48:16.910 --> 00:48:22.010
message. Press any other key to open a chat
window mail.

00:48:22.010 --> 00:48:29.250
&gt;&gt; CHEN: Okay, so, now, I've loaded up a chat
window with the translation bot and I'm going

00:48:29.250 --> 00:48:30.539
to type a message.

00:48:30.539 --> 00:48:31.700
&gt;&gt; COMPUTER: [INDISTINCT].

00:48:31.700 --> 00:48:36.799
&gt;&gt; CHEN: Okay. And we'll see what it says.

00:48:36.799 --> 00:48:43.160
&gt;&gt; COMPUTER: Welcome to [INDISTINCT].

00:48:43.160 --> 00:48:51.789
&gt;&gt; CHEN: So, as you can see, it can translate
that and it speaks it.

00:48:51.789 --> 00:48:59.950
&gt;&gt; RAMAN: So, you know, it's interesting.
It goes back to web 2.0 is all about building

00:48:59.950 --> 00:49:09.400
web things out of web parts. And in this case,
Google has built a bunch of interesting pieces

00:49:09.400 --> 00:49:16.240
that are all exposed as web parts, namely,
Gmail, namely, Google Talk, namely, translation

00:49:16.240 --> 00:49:23.890
and chat bots. And what AxsJAX framework has
done is it's added to this mix a web block

00:49:23.890 --> 00:49:28.440
that allows you to speech enable, access enable
web applications. And so when you take that

00:49:28.440 --> 00:49:34.750
block in with the rest of the file and do
what we as web developers do, which is mash

00:49:34.750 --> 00:49:41.539
them up and you get a talking interpreter,
which, if I told you up front, can you develop

00:49:41.539 --> 00:49:46.839
me a talking interpreter as a web application,
it sounds like an daunting task. But by standing

00:49:46.839 --> 00:49:51.609
on one another's shoulders as opposed to another's
toes, you sort of get a very powerful infrastructure

00:49:51.609 --> 00:49:58.960
from doing such thing. We have about 10 minutes.
We can do more demos or we can take questions.

00:49:58.960 --> 00:50:03.960
So if there are people who have questions,
raise your hands. Otherwise, we'll show you

00:50:03.960 --> 00:50:05.319
a few more demos and codes.

00:50:05.319 --> 00:50:08.049
&gt;&gt; CHEN: Okay, no questions for now.

00:50:08.049 --> 00:50:11.079
&gt;&gt; RAMAN: Yeah, so, we have no questions?

00:50:11.079 --> 00:50:13.500
&gt;&gt; CHEN: We have no questions.

00:50:13.500 --> 00:50:15.890
&gt;&gt; RAMAN: Okay, so, we'll--I will show you
another interesting mash up, which is the

00:50:15.890 --> 00:50:21.470
xkcd comic. This is an interesting example
of, again, bringing information from different

00:50:21.470 --> 00:50:28.170
parts of the web to form an integrated whole
that doesn't exist. So, for those of you who

00:50:28.170 --> 00:50:33.500
are familiar with Randall's xkcd comic and
for those of you who aren't, since most of

00:50:33.500 --> 00:50:37.640
you are web developers, I suggest do a Google
search--this is a comic strip which you will

00:50:37.640 --> 00:50:43.690
highly enjoy as somebody who likes technology.
And, you know, you're probably a geek. If

00:50:43.690 --> 00:50:50.319
you're a geek, you'll love xkcd. So, the xkcd
comic, Randall has these very nice sketches

00:50:50.319 --> 00:50:58.200
and a small caption that goes with the comic.
It has, you know, a caption, if you can also

00:50:58.200 --> 00:51:05.789
see the sketch. A more detailed textural description
there would actually be very nice for a blind

00:51:05.789 --> 00:51:10.940
user, but would actually detract from the
value of the comic for everybody else. Now,

00:51:10.940 --> 00:51:16.829
there is another task on the web that needs
a full transcript of that comic--namely, search.

00:51:16.829 --> 00:51:24.760
And there is a completely separate site that
is independent of xkcd and all the other comics.

00:51:24.760 --> 00:51:32.220
That is a comic bot search engine where volunteers
go in and type in detailed transcripts of

00:51:32.220 --> 00:51:37.240
comic episodes and then the author of the
comic goes and approves them and then they

00:51:37.240 --> 00:51:43.130
become live and then there's a search engine
that allows you to search it. Now, we looked

00:51:43.130 --> 00:51:49.869
at that and we said, "You know what? As an
end user, since both the transcripts and the

00:51:49.869 --> 00:51:54.559
comic are on the web, you can clearly--if
you have the time and patience, go open a

00:51:54.559 --> 00:51:59.849
comic, look up its ID, then go look up the
transcript for that comic strip in that other

00:51:59.849 --> 00:52:04.940
engine and then go read it." It's too much
work, right? A good programmer is a lazy programmer,

00:52:04.940 --> 00:52:11.089
and we all like reading comics. So, we basically
build a mash-up that essentially pulls the

00:52:11.089 --> 00:52:17.490
transcript of the comic that you have opened
from this other site, and then use the AxsJAX

00:52:17.490 --> 00:52:23.210
framework to speak it. And so suddenly you
can get xkcd becoming a talking comic with

00:52:23.210 --> 00:52:28.020
transcripts coming off the web. There's another
example of, you know, building a web thing

00:52:28.020 --> 00:52:30.170
out of the web parts.

00:52:30.170 --> 00:52:36.089
&gt;&gt; CHEN: Okay, so, I'm going to load up this
xkcd comic and we'll see what happens.

00:52:36.089 --> 00:52:41.730
&gt;&gt; COMPUTER: xkcd sandwich transcript. A man
is sitting on a couch, talking to another

00:52:41.730 --> 00:52:48.829
man. They are both stick figures. First man:
"Make me a sandwich." Second man: "Make it

00:52:48.829 --> 00:52:54.440
yourself." First man: "Sudo, make me a sandwich."
Second man: "Okay." Comment: "Proper user

00:52:54.440 --> 00:52:57.250
policy apparently means 'Simon says.'"

00:52:57.250 --> 00:53:03.470
&gt;&gt; RAMAN: So, we go out and say, "Sudo, make
me lunch and get lunch for my guests. Sudo,

00:53:03.470 --> 00:53:09.230
extend lunch until 2:30." So, we had a couple
of announcements to make from the organizers.

00:53:09.230 --> 00:53:14.900
Lunch has been extended to 2:30. Somebody
must have said, "Sudo, postpone lunch." And

00:53:14.900 --> 00:53:19.450
the other thing is there are evaluation forms
that we would like you to fill up so we get

00:53:19.450 --> 00:53:24.470
some feedback on the session. That's pretty
much what we have. We have about six or seven

00:53:24.470 --> 00:53:26.549
minutes for questions. Otherwise, we can get
an early lunch.

00:53:26.549 --> 00:53:26.680
&gt;&gt; CHEN: Oh, yes, you there.

00:53:26.680 --> 00:53:42.549
&gt;&gt; You've shown us a lot of examples of spoken
and written language, are you doing the same

00:53:42.549 --> 00:53:42.619
with sign language?

00:53:42.619 --> 00:53:42.710
&gt;&gt; RAMAN: I think...

00:53:42.710 --> 00:53:45.750
&gt;&gt; CHEN: The question was about whether or
not we're doing anything for sign languages.

00:53:45.750 --> 00:53:49.230
&gt;&gt; RAMAN: Yes. So, for the video, the question
was, "We are doing a lot with written and

00:53:49.230 --> 00:53:54.420
spoken, are we doing anything with sign language?"
Right now, we aren't, but I would love to

00:53:54.420 --> 00:53:59.630
see work in that space. If you have expertise
in that space, we would love to see some,

00:53:59.630 --> 00:54:04.770
you know, open source development in that
space. And, as I said, the AxsJAX framework

00:54:04.770 --> 00:54:12.099
itself is not limited to speech or the written
language. Today, it has calls in it for speech

00:54:12.099 --> 00:54:17.289
because that's what we've built. The way we
are building the framework, and every line

00:54:17.289 --> 00:54:22.579
of code in this framework has been written
this way, is to first build a real prototype,

00:54:22.579 --> 00:54:27.380
build a prototype and then build a second
prototype and then see what commonality is

00:54:27.380 --> 00:54:32.710
there between those two and then re-factor
it and pull the common code into a framework.

00:54:32.710 --> 00:54:37.960
So, not a single line of code in this framework
has been written because we thought it was

00:54:37.960 --> 00:54:42.170
a good idea to have it in a framework, it
was because we saw ourselves writing that

00:54:42.170 --> 00:54:47.200
same piece of code again and again. And I
would love to see similar things for sign

00:54:47.200 --> 00:54:51.869
language emerge. Okay, I--clearly, I don't
have much expertise on that space, but...

00:54:51.869 --> 00:54:56.160
And I'm sure--and, clearly, there are many
people in the world who have expertise on

00:54:56.160 --> 00:54:57.710
that space, but it would be nice to see.

00:54:57.710 --> 00:55:02.480
&gt;&gt; CHEN: Yes. And if you contribute any code
to AxsJAX, we do have a strong policy of rewarding

00:55:02.480 --> 00:55:08.029
everyone who does that with an AxsJAX shirt
much like this one.

00:55:08.029 --> 00:55:14.960
&gt;&gt; Do you have any insights on how to make
geographic information in the form of maps

00:55:14.960 --> 00:55:22.049
more accessible or useable? I work with transit
data and oftentimes transit providers will

00:55:22.049 --> 00:55:28.359
just create a whole new--create a long textural
description of the route, but if there was

00:55:28.359 --> 00:55:34.460
a way of using the Google Maps API for those
instructions, it would be cool.

00:55:34.460 --> 00:55:38.460
&gt;&gt; RAMAN: So, yeah, you were using a mike,
so I suspect the video got the question, but

00:55:38.460 --> 00:55:44.339
the brief summary was, thoughts on making
geographic data and transit data more useable

00:55:44.339 --> 00:55:48.900
in a nice [INDISTINCT] environment. There
are a bunch of things you can do. My current

00:55:48.900 --> 00:55:56.130
favorite is actually to go pull the KML file
for a route and then extract a good spoken

00:55:56.130 --> 00:56:01.029
description out of it. That actually works
remarkably well. There are other things you

00:56:01.029 --> 00:56:07.760
can do with the Java script player and using
the Maps API. For instance, the kind of lens

00:56:07.760 --> 00:56:12.240
demo that we showed you would be a very interesting
thing to do in the context of maps for a low

00:56:12.240 --> 00:56:19.299
vision user. From a blind user's perspective,
I haven't seen anything better yet than sort

00:56:19.299 --> 00:56:25.339
of going step by step through the textural
directions. It would be nice to do something

00:56:25.339 --> 00:56:32.970
with tactile displays, but tactile displays
are enormously expensive. To give all of you

00:56:32.970 --> 00:56:37.849
a little bit of context in that space, unfortunately,
the only tactile displays that really exist

00:56:37.849 --> 00:56:45.400
out there are sort of dynamic Braille displays,
and they tend to be very expensive. So, I

00:56:45.400 --> 00:56:51.599
was in an accessibility conference about five
months ago and they were showing a tactile

00:56:51.599 --> 00:56:58.490
display that was a grid of pins that was,
you know, about 360 by 240 pins that they

00:56:58.490 --> 00:57:05.940
wanted a cool $20,000 for. That's too much.
So, there are two issues with respect to geographical

00:57:05.940 --> 00:57:12.380
data/information, which is,

00:57:12.380 --> 00:57:17.779
what kind of queries do you as an end user
make out of such information, and then how

00:57:17.779 --> 00:57:25.069
do I give you the answers to those queries.
So, the display part is both, in some sense,

00:57:25.069 --> 00:57:30.770
if you think about it as a tactile display,
it's both about answering the questions about

00:57:30.770 --> 00:57:36.349
what is here on this map as well as giving
me an interface for posing the question, which

00:57:36.349 --> 00:57:41.869
is I go touch a part of the map and ask what
is there. Now, given that tactile display

00:57:41.869 --> 00:57:48.250
technology is expensive, my view of building
innovative solutions in this space is to actually

00:57:48.250 --> 00:57:55.119
give the user the ability to query intelligently.
So, the reason why I like the KML handle into

00:57:55.119 --> 00:58:01.079
Google Maps is that I can do a query of the
form, pizza and, you know, my home address

00:58:01.079 --> 00:58:06.039
and then go look at that and then ask for
textural directions from there and then ask

00:58:06.039 --> 00:58:11.440
what is near that. Which if you think about
it, if I show you a graphical map, that is

00:58:11.440 --> 00:58:15.990
what often your eye is doing. There are other
things that your eye is doing with things

00:58:15.990 --> 00:58:20.859
like street views, such as saying, "I am now
facing the Moscone Center and, oh, that building

00:58:20.859 --> 00:58:27.180
is over to the right. I need to go that way."
That, I don't have an answer for yet for myself.

00:58:27.180 --> 00:58:31.390
I would love to have that.

00:58:31.390 --> 00:58:37.250
&gt;&gt; How do you extract the textural data from
the KML site?

00:58:37.250 --> 00:58:40.420
&gt;&gt; RAMAN: I do an XSLD transformation. So
that was actually checked into my other open

00:58:40.420 --> 00:58:45.569
source project, which is Emacspeak. It's a
talking extension to Emacs. So if you just

00:58:45.569 --> 00:58:51.789
Google for Emacspeak, it's Emacspeak with
one S, you will find a point where it's also

00:58:51.789 --> 00:58:55.599
checked into Google code. And if you are just
interested in the textural directions out

00:58:55.599 --> 00:59:01.819
of the KML file, again, it's checked into
SVM. So, there's a URL for it, you can just,

00:59:01.819 --> 00:59:06.680
you know, look at that XSLD file in your browser
and look at it. It's very easy to do. So you

00:59:06.680 --> 00:59:13.920
basically take your map, go do a traditional
search on Google Maps and then &amp;output=KML

00:59:13.920 --> 00:59:21.950
as a CGI parameter and it will serve up a
KML file. And KML is fully documented on the

00:59:21.950 --> 00:59:27.329
code Google com site. It has a lot of useful
information in it including heading and all

00:59:27.329 --> 00:59:33.150
of these things. But for extracting textural
directions, I've already written the XSLD,

00:59:33.150 --> 00:59:39.210
so you can just steal it.

00:59:39.210 --> 00:59:44.710
&gt;&gt; CHEN: Okay, and we're done.

00:59:44.710 --> 00:59:45.089
&gt;&gt; RAMAN: Thank you.

00:59:45.089 --> 00:59:47.750
&gt;&gt; CHEN: Okay, and if anyone's interested
in trying to develop with us, we do have a

00:59:47.750 --> 00:59:53.119
limited supply of CDs, so just catch us now
or later on in the hall, and if we still have

00:59:53.119 --> 00:59:53.920
some, we'll give them to you.

00:59:53.920 --> 00:59:59.640
&gt;&gt; RAMAN: As I said, all of the codes of AxsJAX
framework is on the website, but what we have

00:59:59.640 --> 01:00:05.210
on the CD is a stand-alone Firefox that has
been configured to talk, so you can experiment

01:00:05.210 --> 01:00:08.869
with it without actually changing your default
Firefox profile.

