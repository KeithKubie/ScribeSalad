WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:02.350
Now that we have seen that some dependencies can

00:00:02.350 --> 00:00:05.120
become hazards in our pipeline, now we need to see

00:00:05.120 --> 00:00:07.640
how to handle these hazards, so that we still get

00:00:07.640 --> 00:00:11.150
correct execution in our pipeline. because we cannot just allow

00:00:11.150 --> 00:00:14.468
the pipeline to produce incorrect results. We need to handle

00:00:14.468 --> 00:00:18.450
only the situations that are hazards. We don't really care

00:00:18.450 --> 00:00:22.340
about dependencies that can never become hazards. In fact, what

00:00:22.340 --> 00:00:25.350
we need to do is detect hazard situations, and then

00:00:25.350 --> 00:00:28.780
either flash dependent instructions from the pipeline,

00:00:28.780 --> 00:00:32.070
stall dependent instructions in the pipeline, so that

00:00:32.070 --> 00:00:36.690
the read is delayed and they get the correct value, or even fix values that were

00:00:36.690 --> 00:00:39.840
read already by the dependent instructions, so that

00:00:39.840 --> 00:00:41.940
we feed them the right value and they

00:00:41.940 --> 00:00:45.638
proceed unharmed through the pipeline. We need to

00:00:45.638 --> 00:00:50.454
use flushes for control dependencies, because the instructions

00:00:50.454 --> 00:00:53.464
we have in the pipeline after a controlled

00:00:53.464 --> 00:00:58.730
dependence becomes a hazard, are the wrong instructions.

00:00:58.730 --> 00:01:01.040
So delaying them or trying to fix the

00:01:01.040 --> 00:01:04.910
values that they are reading is not going to work.

00:01:04.910 --> 00:01:07.404
Pretty much, we have to delete these instructions

00:01:07.404 --> 00:01:09.840
from the pipeline and fetch the correct ones, and

00:01:09.840 --> 00:01:12.450
then execute them from scratch. So, we need

00:01:12.450 --> 00:01:16.710
to flush the dependent instructions on a control dependence.

00:01:16.710 --> 00:01:23.080
If we have a data dependence, we can stall the subtract, so that it stays in the

00:01:23.080 --> 00:01:28.220
stage where it would read R1. Until, finally, the add deposits that value in the

00:01:28.220 --> 00:01:31.970
register. So, for hazards caused by data dependencies,

00:01:31.970 --> 00:01:33.820
we do not have to flush, we can

00:01:33.820 --> 00:01:37.800
simply stall. For some data dependencies, we can

00:01:37.800 --> 00:01:41.860
even forward the value of R1 produced by the

00:01:41.860 --> 00:01:45.000
add, to the subtract in a way that fixes

00:01:45.000 --> 00:01:48.021
the value read by the subtract. Let's consider our

00:01:48.021 --> 00:01:51.108
five-stage pipeline and just worry about the stage where

00:01:51.108 --> 00:01:54.050
we read the registers and the ALU stage. In

00:01:54.050 --> 00:01:58.100
a cycle where the subtract is reading the registers,

00:01:58.100 --> 00:02:01.180
the add is in the ALU stage. At the

00:02:01.180 --> 00:02:03.622
end of this cycle, the subtract has read the

00:02:03.622 --> 00:02:06.988
wrong register value for R1 because R1 still doesn't have

00:02:06.988 --> 00:02:12.058
what add will eventually write to it. But the add at the end of this cycle has

00:02:12.058 --> 00:02:17.142
the value, it's just that it didn't put it in R1 yet. What we now can do is at

00:02:17.142 --> 00:02:21.090
the beginning of the following cycle, subtract can get

00:02:21.090 --> 00:02:24.450
the value that the add produced, and that value

00:02:24.450 --> 00:02:27.390
replaces the value that we read from R1 so

00:02:27.390 --> 00:02:32.048
that subtract computes with the correct value. So pretty

00:02:32.048 --> 00:02:34.964
much, if the value exists somewhere in the

00:02:34.964 --> 00:02:38.123
pipeline, at the point before we actually use

00:02:38.123 --> 00:02:43.388
the value to compute, we can fix what we have read so that we still compute with

00:02:43.388 --> 00:02:47.750
the right value. This is called forwarding, and

00:02:47.750 --> 00:02:49.570
it amounts to pretty much fixing the values

00:02:49.570 --> 00:02:53.520
read by dependent instructions. Forwarding does not always

00:02:53.520 --> 00:02:57.401
work. Sometimes the value we need will be produced

00:02:57.401 --> 00:03:02.713
at the later point in time so at the time we need it to compute, we still don't

00:03:02.713 --> 00:03:05.880
even have that value in the pipeline. At that

00:03:05.880 --> 00:03:10.605
time we need to stall instead of forwarding. So basically,

00:03:10.605 --> 00:03:13.180
for control hazards we need to flush. For some

00:03:13.180 --> 00:03:15.927
data hazards we can either stall it forward, and

00:03:15.927 --> 00:03:19.411
we prefer forwarding because it doesn't introduce stalls in

00:03:19.411 --> 00:03:22.536
the pipeline. And for some data hazards, at least some

00:03:22.536 --> 00:03:23.880
stalls are necessary.

