WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:04.620
As you might imagine, a straightforward
recursive implementation would involve

00:00:04.620 --> 00:00:09.060
an unfortunate amount of recomputation,
so we'll look for a better solution.

00:00:09.060 --> 00:00:12.786
Notice that it's natural to organize our
subproblems in a grid like this one.

00:00:12.786 --> 00:00:17.625
Knowing C(3,3),
the cost of a line in the full sequence,

00:00:17.625 --> 00:00:22.756
depends on knowing C(3,2),
C(2,2) and C(2,3).

00:00:22.756 --> 00:00:29.367
Knowing C(2,3) depends on knowing
C(2,2), C(1,2) and C(1,3).

00:00:29.367 --> 00:00:33.960
And indeed, in general,
to figure out any cost, we need to know

00:00:33.960 --> 00:00:39.750
the cost to the west, to the northwest,
and to the north to fill out this grid.

00:00:39.750 --> 00:00:43.060
These dependencies form
a directed acyclic graph, and

00:00:43.060 --> 00:00:46.410
we can linearize them
in any number of ways.

00:00:46.410 --> 00:00:49.320
We might do it in scan
line order like this.

00:00:49.320 --> 00:00:52.590
Or in left to right fashion like this.

00:00:52.590 --> 00:00:56.400
Or even maybe along
the diagonals like this.

00:00:56.400 --> 00:00:59.980
We'll keep it simple and
go in scan line order.

00:00:59.980 --> 00:01:04.390
First we need to fill out the base
cases, this first row and

00:01:04.390 --> 00:01:05.927
this first column.

00:01:05.927 --> 00:01:08.805
And then it's just a matter
of passing over the grid and

00:01:08.805 --> 00:01:13.190
taking the minimum of the three
possibilities outlined earlier.

00:01:13.190 --> 00:01:18.310
Once we've finished, we can retrace our
steps by looking at the west, north,

00:01:18.310 --> 00:01:21.960
and northwest neighbors to
figure out what step we took.

00:01:21.960 --> 00:01:24.850
And this, then, will allow us
to reconstruct the alignment.

