WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:01.830
Alright. So that's all the algorithms that we're

00:00:01.830 --> 00:00:05.330
going to talk about in terms of unsupervised clustering algorithms.

00:00:05.330 --> 00:00:06.700
But I would like to kind of pop up

00:00:06.700 --> 00:00:09.550
a level, and talk a little bit about different

00:00:09.550 --> 00:00:13.710
properties that clustering algorithms might have. Desirable properties. So,

00:00:13.710 --> 00:00:15.815
the three that I'm going to talk about are richness.

00:00:15.815 --> 00:00:19.520
Scale-invariance and consistency, and these are good things to

00:00:19.520 --> 00:00:21.480
have right? I'd like to be rich and consistent.

00:00:21.480 --> 00:00:24.261
&gt;&gt; And Lord knows, you'd like to be scale-invariant.

00:00:24.261 --> 00:00:25.890
&gt;&gt; I would. I wish I were scale-invariant.

00:00:25.890 --> 00:00:28.440
I guess it would be very hard for me to gain weight if that were true.

00:00:28.440 --> 00:00:31.065
&gt;&gt; Mm-hm. No matter what the scale is, the number's always the same.

00:00:31.065 --> 00:00:34.400
&gt;&gt; Alright, so if you have a clustering algorithm, what does it do? It

00:00:34.400 --> 00:00:39.630
takes a set of distances d and maps them to a set of clusters.

00:00:39.630 --> 00:00:40.290
&gt;&gt; Or partitions.

00:00:40.290 --> 00:00:42.900
&gt;&gt; Right. Or a partition. Right. And these

00:00:42.900 --> 00:00:45.920
are three properties of those kinds of mappings.

00:00:45.920 --> 00:00:47.940
So richness is the idea that for any

00:00:47.940 --> 00:00:51.020
assignment of objects to the clusters, there's some distance

00:00:51.020 --> 00:00:53.790
matrix that would cause your clustering algorithm to produce

00:00:53.790 --> 00:00:56.000
that clustering. For any clustering that you want to

00:00:56.000 --> 00:00:59.230
achieve there is some distance matrix where p of

00:00:59.230 --> 00:01:03.370
d, your clustering algorithm, your clustering scheme, produces that clustering.

00:01:03.370 --> 00:01:08.380
&gt;&gt; So that's like saying, all inputs are valid and all outputs are valid.

00:01:08.380 --> 00:01:10.000
&gt;&gt; All inputs, which is to say

00:01:10.000 --> 00:01:12.620
that the distance matrices, sure, those are valid,

00:01:12.620 --> 00:01:14.600
and anything could be an output. Any way

00:01:14.600 --> 00:01:16.220
of clustering could be an output. because the,

00:01:16.220 --> 00:01:18.740
you know, think of the alternative. The alternative is there are certain

00:01:18.740 --> 00:01:22.080
clusters that you just can't produce. And that seems wrong, doesn't it?

00:01:22.080 --> 00:01:24.220
That, it ought to be the case that your clustering algorithm should

00:01:24.220 --> 00:01:25.960
produce whatever is appropriate, and shouldn't

00:01:25.960 --> 00:01:27.400
be limited in what it can express.

00:01:27.400 --> 00:01:30.080
&gt;&gt; Sometimes. You'd even want your algorithms to

00:01:30.080 --> 00:01:31.680
say, you know what, there's only one cluster here.

00:01:32.790 --> 00:01:34.230
&gt;&gt; Yeah. I mean, totally. If I showed you

00:01:34.230 --> 00:01:35.760
a picture, you might look at it. And you'd

00:01:35.760 --> 00:01:37.910
say I just see one cluster and it looks

00:01:37.910 --> 00:01:41.270
like a cloud. The second property that we're talking about,

00:01:41.270 --> 00:01:43.280
the scale invariance. And this is, I think, much

00:01:43.280 --> 00:01:45.870
more straight forward, at least in terms of conceptually.

00:01:45.870 --> 00:01:47.570
So, it just means that if I give you

00:01:47.570 --> 00:01:49.750
a distance matrix and I double all the distances

00:01:49.750 --> 00:01:51.680
or halve all the distances. It shouldn't change what

00:01:51.680 --> 00:01:54.330
the clustering is. That the clustering algorithm should be

00:01:54.330 --> 00:01:57.550
invariant to what the space of the point is,

00:01:57.550 --> 00:01:59.960
assuming that we keep the relative distances the same.

00:01:59.960 --> 00:02:02.730
&gt;&gt; So this is the NASA problem. So this says that, if I

00:02:02.730 --> 00:02:06.400
come up with a bunch of clusterings because I've been measuring points in miles,

00:02:06.400 --> 00:02:09.538
if I suddenly start measuring them in kilometers, it shouldn't change anything.

00:02:09.538 --> 00:02:11.910
&gt;&gt; That's right, yeah, change of units. Yeah, that's a really

00:02:11.910 --> 00:02:13.570
good way of thinking about it. It's not even that I'm

00:02:13.570 --> 00:02:17.432
scaling the distances, I'm just using inches instead of feet. It

00:02:17.432 --> 00:02:20.460
should be the case that it's still the same data. All

00:02:20.460 --> 00:02:22.900
right. And then the last one is maybe the hardest one

00:02:22.900 --> 00:02:25.480
to visualize. But, it's a really reasonable thing. And you would

00:02:25.480 --> 00:02:28.940
expect clustering to act this way. So, consistency says that if

00:02:28.940 --> 00:02:31.840
we have some clustering. If your clustering algorithm produces some clusters.

00:02:31.840 --> 00:02:35.300
So, let's, let's do a little example of that. Then, shrinking the

00:02:35.300 --> 00:02:38.960
intracluster distances and expanding the intercluster

00:02:38.960 --> 00:02:41.150
distances, does not change the clustering.

00:02:41.150 --> 00:02:43.740
Let me show you that. All right. And now I've edited this

00:02:43.740 --> 00:02:46.940
so that within the clusters the points have gotten closer together. More

00:02:46.940 --> 00:02:49.840
so in this one than, than the other. Or not changing them

00:02:49.840 --> 00:02:51.640
at all. But in this particular case, I shrunk this one a

00:02:51.640 --> 00:02:53.350
lot, I shrunk this one a little. And then I moved the

00:02:53.350 --> 00:02:57.360
clusters a little bit farther apart. This changes the distances a bit and

00:02:57.360 --> 00:02:59.660
we like our clustering algorithm to continue

00:02:59.660 --> 00:03:02.160
to consider these clusters, right? It shouldn't introduce

00:03:02.160 --> 00:03:04.240
new clusters because we've shrunken things. And

00:03:04.240 --> 00:03:06.650
it shouldn't want to join these things together,

00:03:06.650 --> 00:03:08.770
because they've gotten further apart. So, that's

00:03:08.770 --> 00:03:10.650
this notion of consistency and a little bit

00:03:10.650 --> 00:03:13.590
more cumbersome to describe, but very natural

00:03:13.590 --> 00:03:15.030
thing to think about in the clustering setting.

00:03:15.030 --> 00:03:17.240
&gt;&gt; Well that makes sense right? So, this is where our

00:03:17.240 --> 00:03:21.690
domain knowledge comes in so, distances are a measure of similarity, right?

00:03:21.690 --> 00:03:22.340
&gt;&gt; Yup.

00:03:22.340 --> 00:03:22.840
&gt;&gt; So,

00:03:22.840 --> 00:03:26.220
what consistency says if you found that a bunch of things were similar

00:03:26.220 --> 00:03:29.096
and a bunch of other things were dissimilar. That if you made the things

00:03:29.096 --> 00:03:30.898
that were similar, more similar and the

00:03:30.898 --> 00:03:33.400
things that were not similar, less similar.

00:03:33.400 --> 00:03:35.100
It shouldn't change your notion which things

00:03:35.100 --> 00:03:36.210
are similar and which things are not.

00:03:36.210 --> 00:03:37.800
&gt;&gt; Yeah, which things are alike, which

00:03:37.800 --> 00:03:39.360
things want to be grouped together. Yeah, uh-huh.

00:03:39.360 --> 00:03:39.530
&gt;&gt; Hm.

00:03:39.530 --> 00:03:42.730
&gt;&gt; Good so you think you understand these three clustering ideas?

00:03:42.730 --> 00:03:43.660
&gt;&gt; I believe I do.

00:03:43.660 --> 00:03:46.390
&gt;&gt; Alright, so let's put them into play a little bit.

00:03:46.390 --> 00:03:47.000
&gt;&gt; Okay.

