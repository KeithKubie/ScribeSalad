WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.479
[MUSIC PLAYING]

00:00:07.455 --> 00:00:09.169
FELIPE LEME: So my
name is Felipe Leme.

00:00:09.169 --> 00:00:11.460
I am a software engineer in
the Android Framework team,

00:00:11.460 --> 00:00:13.668
and I'm the technical leader
for the Android Autofill

00:00:13.668 --> 00:00:15.910
Framework-- of the topic
of today's presentation.

00:00:15.910 --> 00:00:18.160
So our goal today is to
give a quick introduction

00:00:18.160 --> 00:00:21.760
of what Android Autofill is,
and why it's important for you

00:00:21.760 --> 00:00:23.740
to optimize our apps for it.

00:00:23.740 --> 00:00:25.150
So the Android
Autofill Framework

00:00:25.150 --> 00:00:27.430
is a new feature that
we introduced last year

00:00:27.430 --> 00:00:29.120
on the Android Auto release.

00:00:29.120 --> 00:00:33.580
And the goal is to provide a
safe and fast way for password

00:00:33.580 --> 00:00:35.290
managers to do their jobs.

00:00:35.290 --> 00:00:36.780
So basically, to
use autofill, you

00:00:36.780 --> 00:00:40.240
need to select an
autofill service, which

00:00:40.240 --> 00:00:42.520
could be a service that's
provided by the OEM

00:00:42.520 --> 00:00:44.791
in a Google Autofill
or [INAUDIBLE] pass.

00:00:44.791 --> 00:00:47.290
Or it can install third-party
apps, like a password manager,

00:00:47.290 --> 00:00:51.040
like LastPass, Dashlane,
1Password, Enpass,

00:00:51.040 --> 00:00:52.750
and many others.

00:00:52.750 --> 00:00:55.810
Last time I checked, there
is about 30 different apps

00:00:55.810 --> 00:00:59.050
on the Play store that
provides an autofill service.

00:00:59.050 --> 00:01:01.120
And one key decision
we made when

00:01:01.120 --> 00:01:04.030
we designed this API was
that it should work out

00:01:04.030 --> 00:01:05.800
of the box with existing apps.

00:01:05.800 --> 00:01:08.000
In other words, you
as an app developer,

00:01:08.000 --> 00:01:10.586
you don't need to change
our app to support Autofill,

00:01:10.586 --> 00:01:12.460
because if you don't do
anything, most likely

00:01:12.460 --> 00:01:16.350
the password manager will
figure out what to do for you.

00:01:16.350 --> 00:01:18.370
But just because you
don't need to change it,

00:01:18.370 --> 00:01:19.570
doesn't mean you shouldn't.

00:01:19.570 --> 00:01:22.180
After all, it's your
app that's on the line,

00:01:22.180 --> 00:01:24.590
and you don't want to depend
on the third-party app which

00:01:24.590 --> 00:01:26.320
you don't have control over.

00:01:26.320 --> 00:01:30.070
So the rule of thumb, the main
tip, that I would like to give

00:01:30.070 --> 00:01:32.560
is you should not rely on
the autofill service risks.

00:01:32.560 --> 00:01:34.480
Rather, you should
provide your own tips,

00:01:34.480 --> 00:01:36.370
like you want to make
sure that the password

00:01:36.370 --> 00:01:38.910
manager or the autofill
service do their job properly.

00:01:38.910 --> 00:01:41.460
And you can do that
quickly, or easily,

00:01:41.460 --> 00:01:44.730
by just annotating
your XML views.

00:01:44.730 --> 00:01:46.880
The first thing you should
do, you should make sure

00:01:46.880 --> 00:01:49.310
that you annotate what
should be autofilled,

00:01:49.310 --> 00:01:51.580
and you do that using
the Android [INAUDIBLE]

00:01:51.580 --> 00:01:53.017
autofilling stack.

00:01:53.017 --> 00:01:54.600
Let's take a quick
look at an example.

00:01:54.600 --> 00:01:56.990
Let's say you have the
traditional user name

00:01:56.990 --> 00:01:59.270
and password looking screen.

00:01:59.270 --> 00:02:00.800
So if you don't do
anything at all,

00:02:00.800 --> 00:02:03.110
if you don't annotate
your app for autofill,

00:02:03.110 --> 00:02:07.910
and layout XML is using Android
IDs like user name field

00:02:07.910 --> 00:02:09.870
and password field,
most likely it's

00:02:09.870 --> 00:02:12.325
going to work fine, because
when the password manager sees

00:02:12.325 --> 00:02:14.700
this real structure, they're
going to be some high risks,

00:02:14.700 --> 00:02:17.360
and I'm going to say, OK, there
is a username superstring here

00:02:17.360 --> 00:02:18.630
and a password here.

00:02:18.630 --> 00:02:21.170
So they will know this as
username and password fields.

00:02:21.170 --> 00:02:23.780
Now let's say you are a
software house in Brazil,

00:02:23.780 --> 00:02:26.400
and you like to use
a name in Portuguese.

00:02:26.400 --> 00:02:29.520
I actually grew up in Brazil and
I know this is kind of common.

00:02:29.520 --> 00:02:32.170
So now my research ideas
are called [PORTUGUESE]

00:02:32.170 --> 00:02:35.750
and [PORTUGUESE],, and this is
totally valid from the Android

00:02:35.750 --> 00:02:36.704
point of view.

00:02:36.704 --> 00:02:38.620
So now the password
manager, they will get you

00:02:38.620 --> 00:02:40.161
through this structure,
and they will

00:02:40.161 --> 00:02:41.622
know what this field means.

00:02:41.622 --> 00:02:43.580
So basically, they're
not going to be providing

00:02:43.580 --> 00:02:45.330
the autofill data and the user.

00:02:45.330 --> 00:02:48.284
You have to manually type the
username and password, which

00:02:48.284 --> 00:02:49.700
is exactly the
kind of problem you

00:02:49.700 --> 00:02:51.820
try to avoid with
the password manager.

00:02:51.820 --> 00:02:53.210
So the solution
for this problem,

00:02:53.210 --> 00:02:56.320
you simply can annotate your
views, so with the Android

00:02:56.320 --> 00:02:57.670
column autofill hints.

00:02:57.670 --> 00:02:59.300
In case of username,
use username.

00:02:59.300 --> 00:03:01.190
And password, use password.

00:03:01.190 --> 00:03:04.131
And on JUDO Java,
we actually provide

00:03:04.131 --> 00:03:06.630
hints for the common fields,
like username, password, credit

00:03:06.630 --> 00:03:09.230
card number, telephone
number, et cetera.

00:03:09.230 --> 00:03:12.030
Now, there is also
the other issue,

00:03:12.030 --> 00:03:13.470
which is you should
also annotate

00:03:13.470 --> 00:03:15.260
what should not be autofilled.

00:03:15.260 --> 00:03:17.420
And you do that using
the Android column

00:03:17.420 --> 00:03:19.320
imported for autofill text.

00:03:19.320 --> 00:03:21.510
So just to see
another real example,

00:03:21.510 --> 00:03:24.980
when I was developing this
API last year, at one point

00:03:24.980 --> 00:03:27.330
I wanted to send an
SMS to my friend,

00:03:27.330 --> 00:03:29.690
and then I got a pop up
with my own telephone number

00:03:29.690 --> 00:03:31.070
as a recipient of the SMS.

00:03:31.070 --> 00:03:32.930
That doesn't make
sense, because when

00:03:32.930 --> 00:03:37.010
you're composing an SMS,
or email, or a spreadsheet

00:03:37.010 --> 00:03:40.160
editor, usually you want to
type something dynamically.

00:03:40.160 --> 00:03:42.680
You don't want to use the
predefined values that password

00:03:42.680 --> 00:03:45.860
manager has, so this was
kind of annoying for me,

00:03:45.860 --> 00:03:48.860
because I knew the API but it
could be confused for a user

00:03:48.860 --> 00:03:49.864
that doesn't.

00:03:49.864 --> 00:03:51.530
So the solution for
this case was simply

00:03:51.530 --> 00:03:53.900
should disable autofill
for your activity,

00:03:53.900 --> 00:03:57.590
and you can do that on
the [INAUDIBLE] layer

00:03:57.590 --> 00:04:00.620
by annotating the root view
with importance for autofill

00:04:00.620 --> 00:04:02.030
equals no exclude descendants.

00:04:02.030 --> 00:04:05.050
So now, not only you don't risk
the password manager providing

00:04:05.050 --> 00:04:06.650
that data where it
doesn't make sense,

00:04:06.650 --> 00:04:08.300
but you also improve
the performance,

00:04:08.300 --> 00:04:10.810
because you're not
triggering autofill at all.

00:04:10.810 --> 00:04:13.380
So these are, I would
say, my main tips.

00:04:13.380 --> 00:04:16.370
And let's say I convinced
you to use these tags

00:04:16.370 --> 00:04:19.079
and you are so excited
to change your app.

00:04:19.079 --> 00:04:21.680
You're going to skip
the rest of the summit,

00:04:21.680 --> 00:04:25.370
go back to your laptop,
and change your apps.

00:04:25.370 --> 00:04:27.500
Don't don't do that, but
if you do, how are you

00:04:27.500 --> 00:04:29.910
going to test your changes?

00:04:29.910 --> 00:04:31.970
Remember, you need to
select an autofill service

00:04:31.970 --> 00:04:34.970
to see what would be the
data provided by the service.

00:04:34.970 --> 00:04:37.719
And your first impulse
might be, OK, let me just

00:04:37.719 --> 00:04:39.260
choose whatever
comes with my device,

00:04:39.260 --> 00:04:41.300
like Google Autofill,
or [INAUDIBLE],,

00:04:41.300 --> 00:04:45.330
or maybe you install a
third-party password manager.

00:04:45.330 --> 00:04:46.830
You could do that,
but again, you've

00:04:46.830 --> 00:04:49.210
got to go back to that problem
of relying on the password

00:04:49.210 --> 00:04:50.370
manager, high risks.

00:04:50.370 --> 00:04:53.255
In other words, maybe they
will provide autofill data

00:04:53.255 --> 00:04:54.880
with all to your
changes, so you're not

00:04:54.880 --> 00:04:59.190
going to really see what's going
on with making these changes.

00:04:59.190 --> 00:05:01.250
So my suggestion
is to test using

00:05:01.250 --> 00:05:02.870
standard autofill service.

00:05:02.870 --> 00:05:05.780
And we provide some of them
on the official samples

00:05:05.780 --> 00:05:07.790
that is hosted on GitHub.

00:05:07.790 --> 00:05:10.220
So basically, we provide a
couple of autofill service

00:05:10.220 --> 00:05:11.840
implementations at project.

00:05:11.840 --> 00:05:14.220
One of them is
called Basic Service,

00:05:14.220 --> 00:05:17.030
which is basically
a service that only

00:05:17.030 --> 00:05:18.720
understands autofill hints.

00:05:18.720 --> 00:05:21.520
So if you're using
autofill hints

00:05:21.520 --> 00:05:23.840
on your app, when the
user clicks on a field,

00:05:23.840 --> 00:05:27.230
you're going to see
this pop up like this.

00:05:27.230 --> 00:05:29.540
Because you set it at
this field as username,

00:05:29.540 --> 00:05:31.532
you'll see this
username options.

00:05:31.532 --> 00:05:33.740
On the other hand, if you're
not using these screens,

00:05:33.740 --> 00:05:37.580
then the Basic Service
wouldn't show anything.

00:05:37.580 --> 00:05:39.830
This is also a pretty quick,
pretty simple, service.

00:05:39.830 --> 00:05:41.730
It has less than
200 lines of code,

00:05:41.730 --> 00:05:43.340
so it's very interesting
to understand

00:05:43.340 --> 00:05:44.810
how an autofill service works.

00:05:44.810 --> 00:05:46.650
This is a good example as well.

00:05:46.650 --> 00:05:49.230
Now, we have another service
that's quite the opposite.

00:05:49.230 --> 00:05:50.710
It's called Debug Service.

00:05:50.710 --> 00:05:52.390
So this one tries
to fill anything.

00:05:52.390 --> 00:05:54.032
So if you don't use
the autofill hints,

00:05:54.032 --> 00:05:55.490
it's still going
to try to autofill

00:05:55.490 --> 00:05:57.980
based on your [INAUDIBLE] IDs.

00:05:57.980 --> 00:06:00.170
And this is useful to
test what would happen

00:06:00.170 --> 00:06:03.290
if you're not tagging your
views if imported for autofill

00:06:03.290 --> 00:06:04.430
equals no.

00:06:04.430 --> 00:06:07.544
So for example,
back to my SMS app,

00:06:07.544 --> 00:06:08.960
you would see
something like this.

00:06:08.960 --> 00:06:12.380
When you click on two, you're
going to see this pop up

00:06:12.380 --> 00:06:16.760
with some autofill data,
which is two, which is just

00:06:16.760 --> 00:06:18.140
the name of the research ID.

00:06:18.140 --> 00:06:20.420
So you could see how confusing
it would be for a user

00:06:20.420 --> 00:06:23.610
if they see something
like that on their app.

00:06:23.610 --> 00:06:25.550
Now, the final tip
I would like to give

00:06:25.550 --> 00:06:28.177
is you should also make
sure that our app works

00:06:28.177 --> 00:06:30.260
when the autofill service
requires authentication.

00:06:30.260 --> 00:06:31.730
So what that means?

00:06:31.730 --> 00:06:34.302
Most password managers, they
don't retain the user data

00:06:34.302 --> 00:06:36.260
right away, because the
data might be encrypted

00:06:36.260 --> 00:06:37.639
or might be locked somehow.

00:06:37.639 --> 00:06:39.680
So they're going to ask
the user to authenticate,

00:06:39.680 --> 00:06:42.470
so the user might need to type
a master password or maybe user

00:06:42.470 --> 00:06:44.690
fingerprint to unlock the data.

00:06:44.690 --> 00:06:46.762
And the way the
framework works, we're

00:06:46.762 --> 00:06:48.470
going to be launching
a new activity that

00:06:48.470 --> 00:06:51.984
belongs to this service
on top of your apps stack.

00:06:51.984 --> 00:06:53.900
So the user is going to
do the authentication,

00:06:53.900 --> 00:06:56.600
and when the user is finished,
your activity resumes.

00:06:56.600 --> 00:06:59.104
So for most apps, this is
not going to be a problem,

00:06:59.104 --> 00:07:00.770
but if your app is
doing something weird

00:07:00.770 --> 00:07:05.060
on the active resume,
let's say you're

00:07:05.060 --> 00:07:07.070
rebuilding the view
hierarchy or using some web

00:07:07.070 --> 00:07:09.470
view to do some JavaScript
code dynamically.

00:07:09.470 --> 00:07:11.840
So basically, you
might break autofill,

00:07:11.840 --> 00:07:14.010
as we're going to see
in the next slides.

00:07:14.010 --> 00:07:17.360
So again, to make sure that
your app works in this scenario,

00:07:17.360 --> 00:07:20.210
you need the autofill service
that requires authentication.

00:07:20.210 --> 00:07:23.370
And the simplest way to do that
is using the Debug Service.

00:07:23.370 --> 00:07:27.240
So when you launch the settings
for the Debug Service--

00:07:27.240 --> 00:07:29.850
actually, first you need to
enable autofill and select

00:07:29.850 --> 00:07:32.210
the service, so you can
click on the bottle,

00:07:32.210 --> 00:07:33.805
and select the Debug Service.

00:07:33.805 --> 00:07:36.180
You see the Debug Autofill
Service is one of the options.

00:07:36.180 --> 00:07:37.630
We provided that sample.

00:07:37.630 --> 00:07:40.745
Then you can select these
authenticate response options.

00:07:40.745 --> 00:07:42.050
It's on the top.

00:07:42.050 --> 00:07:45.640
Now when you go back to
your app, when you triggered

00:07:45.640 --> 00:07:47.770
autofill, instead of
getting the data unlocked,

00:07:47.770 --> 00:07:50.860
you're going to have to get
this prompt to authenticate.

00:07:50.860 --> 00:07:53.590
So when the user taps this
respond, we launch an activity.

00:07:53.590 --> 00:07:56.320
In this case, it just
asks for [INAUDIBLE]..

00:07:56.320 --> 00:07:59.190
So now when you click
on yes, in this case,

00:07:59.190 --> 00:08:00.760
let's say for this
screenshot I'm

00:08:00.760 --> 00:08:04.940
using a sample app where I'm
explicitly recreating the view

00:08:04.940 --> 00:08:06.130
hierarchy on start.

00:08:06.130 --> 00:08:07.930
So basically, when
I click yes, we

00:08:07.930 --> 00:08:10.180
retain interactivity, but
now from the framework

00:08:10.180 --> 00:08:12.315
point of view, all
the data is different.

00:08:12.315 --> 00:08:13.690
So they don't know
that they have

00:08:13.690 --> 00:08:16.300
the locked data for
your username field,

00:08:16.300 --> 00:08:17.800
because it's a different ID.

00:08:17.800 --> 00:08:20.470
So it's going to show the tap
to authenticate response again.

00:08:20.470 --> 00:08:23.020
So when the user clicks there,
it launches the authenticate,

00:08:23.020 --> 00:08:25.180
and say yes, sure, I
want to authenticate.

00:08:25.180 --> 00:08:27.680
And then go back, ask
to authenticate again.

00:08:27.680 --> 00:08:30.830
So basically, the user is
now on this Groundhog loop

00:08:30.830 --> 00:08:34.010
where it never goes forward,
and it's kind of frustrating.

00:08:34.010 --> 00:08:36.610
So the solution for this
case is just to make sure

00:08:36.610 --> 00:08:39.850
that you don't create a
view hierarchy on Create.

00:08:39.850 --> 00:08:41.830
So now when the user
taps authenticate,

00:08:41.830 --> 00:08:45.110
we still launch
authenticated activity.

00:08:45.110 --> 00:08:46.240
The user says yes.

00:08:46.240 --> 00:08:48.895
Now when we go back, we show
the unlocked data and when

00:08:48.895 --> 00:08:51.120
the user selects the
data and we autofill,

00:08:51.120 --> 00:08:53.150
and everybody is
going to be happy.

00:08:53.150 --> 00:08:55.750
So these are my main
tips that I would

00:08:55.750 --> 00:08:57.260
like to give from this session.

00:08:57.260 --> 00:09:00.390
So basically, make sure you
annotate reviews for autofill.

00:09:00.390 --> 00:09:02.701
You test your standard
services and make sure

00:09:02.701 --> 00:09:04.450
they work with the
service authentication.

00:09:04.450 --> 00:09:07.470
So I have some links here.

00:09:07.470 --> 00:09:09.760
If you go to the
official Autofill guides,

00:09:09.760 --> 00:09:11.830
we are explaining
all these topics,

00:09:11.830 --> 00:09:14.134
and we have links for
the Autofill Sample

00:09:14.134 --> 00:09:14.800
Service as well.

00:09:14.800 --> 00:09:17.400
That also has all
these apps I'm using,

00:09:17.400 --> 00:09:18.970
I'm using for [INAUDIBLE].

00:09:18.970 --> 00:09:20.410
So that's it.

00:09:20.410 --> 00:09:22.165
Thank you for coming.

00:09:22.165 --> 00:09:23.440
SPEAKER: Thank you.

00:09:23.440 --> 00:09:26.790
[MUSIC PLAYING]

