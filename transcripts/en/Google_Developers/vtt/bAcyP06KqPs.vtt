WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.790
AMIT FULAY: Good afternoon, and
welcome to the session.

00:00:06.790 --> 00:00:09.910
I hope a lot of you got a chance
to see the keynote in

00:00:09.910 --> 00:00:12.530
the morning where we announced
this product.

00:00:12.530 --> 00:00:15.270
And I'm really excited you could
be here as we take a

00:00:15.270 --> 00:00:19.170
deeper dive into what
we've built.

00:00:19.170 --> 00:00:22.970
Some housekeeping details
before we get started.

00:00:22.970 --> 00:00:27.130
There's a session feedback link,
hash tags, and a video

00:00:27.130 --> 00:00:33.020
recording of the session will
be on YouTube 24 hours.

00:00:33.020 --> 00:00:35.250
In the next forty five minutes,

00:00:35.250 --> 00:00:37.300
we've got a great agenda.

00:00:37.300 --> 00:00:41.170
I want to start with talking
about why you should even care

00:00:41.170 --> 00:00:43.670
about in-app payments.

00:00:43.670 --> 00:00:47.560
Then we'll talk about what our
offering is, both in terms of

00:00:47.560 --> 00:00:51.530
the user experience
and the API.

00:00:51.530 --> 00:00:54.750
And we'll talk about how you can
start implementing this in

00:00:54.750 --> 00:00:59.170
your apps as you leave
this room.

00:00:59.170 --> 00:01:01.800
But let's start with
introductions.

00:01:01.800 --> 00:01:04.379
Now, throughout the blogosphere,
there's always a

00:01:04.379 --> 00:01:09.550
lot of speculation about what
happens to start-ups once

00:01:09.550 --> 00:01:12.480
they've been acquired
by a large company.

00:01:12.480 --> 00:01:16.540
Most of the team that built
this product started their

00:01:16.540 --> 00:01:19.000
journey in a very similar way.

00:01:19.000 --> 00:01:22.140
We came from an acquisition
that Goggle did in August

00:01:22.140 --> 00:01:27.460
2010, a small start-up called
Jambool with a product Social

00:01:27.460 --> 00:01:31.240
Gold that helped developers
monetize from within their

00:01:31.240 --> 00:01:32.580
applications.

00:01:32.580 --> 00:01:36.870
And we're really happy to be
here in a short span of time

00:01:36.870 --> 00:01:40.580
having built this product
at of Google scale.

00:01:40.580 --> 00:01:41.710
My name is Amit Fulay.

00:01:41.710 --> 00:01:44.550
I'm a product manager on the
team, and I'll be joined by

00:01:44.550 --> 00:01:50.270
Mikhail and Luke, engineers who
helped build this product.

00:01:50.270 --> 00:01:56.060
The web has evolved, and so
has the way all of us make

00:01:56.060 --> 00:01:57.890
money on it.

00:01:57.890 --> 00:02:03.370
In its infancy, web was all
about selling physical goods

00:02:03.370 --> 00:02:05.690
and accepting payments.

00:02:05.690 --> 00:02:09.360
Developers built front ends to
their existing stores, took

00:02:09.360 --> 00:02:12.720
payments, and shipped
the goods.

00:02:12.720 --> 00:02:16.360
Then we saw a transition where
not only were they selling,

00:02:16.360 --> 00:02:20.420
they were actually advertising
these goods on the web.

00:02:20.420 --> 00:02:25.040
Search ads, display ads, this
was all possible because of

00:02:25.040 --> 00:02:29.380
the introduction of really
sophisticated ad platforms

00:02:29.380 --> 00:02:31.730
that could target and
reach users in a

00:02:31.730 --> 00:02:34.130
very precise manner.

00:02:34.130 --> 00:02:38.000
We saw a lot of publishers
build engaging websites,

00:02:38.000 --> 00:02:42.730
attract eyeballs, and hence
make money through ads.

00:02:42.730 --> 00:02:46.450
Now, over the last few years
we've seen another interesting

00:02:46.450 --> 00:02:50.630
model come about, selling
virtual goods

00:02:50.630 --> 00:02:52.330
from within an app.

00:02:52.330 --> 00:02:54.620
This has been led by
the social and the

00:02:54.620 --> 00:02:56.630
casual gaming space.

00:02:56.630 --> 00:03:04.540
Some estimates put this to be a
$15 billion market by 2012.

00:03:04.540 --> 00:03:08.670
So we've seen a lot of different
waves come ashore,

00:03:08.670 --> 00:03:12.040
starting with what I call as the
shopping wave, all about

00:03:12.040 --> 00:03:15.130
E-commerce, B2B, B2C models.

00:03:15.130 --> 00:03:19.970
Then supplemented with an ad
wave that was all about

00:03:19.970 --> 00:03:24.930
building audiences and making
money through advertising.

00:03:24.930 --> 00:03:29.510
And then the third wave is what
I'd refer to as the micro

00:03:29.510 --> 00:03:35.040
transaction wave. We've seen
increasingly users embrace a

00:03:35.040 --> 00:03:39.720
model where they're willing to
shell out 99 cents, 79 cents,

00:03:39.720 --> 00:03:46.155
for a song, for a tractor in a
farm, for ringtones, for apps,

00:03:46.155 --> 00:03:47.610
for rentals.

00:03:47.610 --> 00:03:51.060
And that's a model that really
is something new.

00:03:53.670 --> 00:03:56.800
Let's look at another
interesting trend on the web.

00:03:56.800 --> 00:04:00.640
We all live on increasingly
social and connected web.

00:04:00.640 --> 00:04:04.950
At the end of 2001, there were
10 billion accounts that were

00:04:04.950 --> 00:04:11.010
created on social networking
sites, online worlds and MMOs.

00:04:11.010 --> 00:04:15.450
And astonishing, half of those
accounts were still active.

00:04:18.769 --> 00:04:23.890
There's a reason a lot of us
here are willing to pay four

00:04:23.890 --> 00:04:26.810
bucks for a cup of latte.

00:04:26.810 --> 00:04:28.802
It's not because
of the coffee.

00:04:28.802 --> 00:04:32.230
It's the experience of walking
up to the store, listening to

00:04:32.230 --> 00:04:36.840
that music, seeing the barista
brew a fresh cup of coffee.

00:04:36.840 --> 00:04:39.340
That's what we are paying for.

00:04:39.340 --> 00:04:43.420
It's the same reason a couple
of years ago huge number of

00:04:43.420 --> 00:04:47.880
users lined up in lines for
hours to watch the latest

00:04:47.880 --> 00:04:50.230
movie, Avatar.

00:04:50.230 --> 00:04:54.210
It was the 3D glasses, the IMAX
cinematic experience.

00:04:54.210 --> 00:04:56.000
That's what stood out.

00:04:56.000 --> 00:04:58.730
They were willing to pay a
premium in that case with

00:04:58.730 --> 00:05:02.760
their time in order to
get that experience.

00:05:02.760 --> 00:05:06.640
And we are beginning to see a
similar transition happen in

00:05:06.640 --> 00:05:08.850
the online space.

00:05:08.850 --> 00:05:13.980
It's no longer a web where you
go and click on some links.

00:05:13.980 --> 00:05:18.210
Users want to be absorbed,
engaged in the web apps.

00:05:18.210 --> 00:05:21.790
They decorate their profiles,
create playlists, upload

00:05:21.790 --> 00:05:26.850
pictures, create mashups, share
with their friends,

00:05:26.850 --> 00:05:31.500
build their farms for hours,
build chocolates in games.

00:05:31.500 --> 00:05:34.310
It's the experience that's
driving them there.

00:05:34.310 --> 00:05:38.560
It's no longer only
about utility.

00:05:38.560 --> 00:05:41.980
So when we look at a confluence
of these trends, a

00:05:41.980 --> 00:05:47.350
microtransactions model that's
being embraced by both sellers

00:05:47.350 --> 00:05:51.400
as well as buyers, an
increasingly connected and

00:05:51.400 --> 00:05:57.270
social web, and a user who is
inclined to pay a higher price

00:05:57.270 --> 00:05:59.050
for experiences.

00:05:59.050 --> 00:06:02.820
When you combine that, that's a
huge opportunity for all you

00:06:02.820 --> 00:06:05.230
developers.

00:06:05.230 --> 00:06:09.740
And in order to help you
capitalize on that opportunity

00:06:09.740 --> 00:06:13.800
we introduced the Google in-app
payments for the web.

00:06:13.800 --> 00:06:16.400
Now let's look at what this
platform has, and what this

00:06:16.400 --> 00:06:18.370
ecosystem would look like.

00:06:18.370 --> 00:06:21.410
But before I do that, here's
some more specifics about

00:06:21.410 --> 00:06:22.830
we're announcing.

00:06:22.830 --> 00:06:25.660
All U.S. developers will
be able to leave this

00:06:25.660 --> 00:06:29.150
room and sign up.

00:06:29.150 --> 00:06:32.230
There is the flash version of
the API that we will be

00:06:32.230 --> 00:06:34.570
releasing in a few
weeks from now.

00:06:34.570 --> 00:06:38.040
And our plan is to go
live this summer.

00:06:38.040 --> 00:06:40.720
Now there's a reason we are
staging this launch starting

00:06:40.720 --> 00:06:43.910
with the developers first.
First, we want to give you

00:06:43.910 --> 00:06:48.570
some time to help integrate
and prep your apps.

00:06:48.570 --> 00:06:52.260
And we want your feedback in
order to iron out anything

00:06:52.260 --> 00:06:55.110
that's missing in this
payments platform.

00:06:55.110 --> 00:06:58.300
So our hope is we can work
together, build some really

00:06:58.300 --> 00:07:00.490
cool, engaging apps
that we can get in

00:07:00.490 --> 00:07:01.740
the hands of consumers.

00:07:04.750 --> 00:07:07.200
What does this new web app
ecosystem look like?

00:07:07.200 --> 00:07:10.460
At the top is the application
layer.

00:07:10.460 --> 00:07:12.680
That's where all you
developers come in.

00:07:12.680 --> 00:07:15.750
You build engaging innovative
apps, whether it's in

00:07:15.750 --> 00:07:20.950
productivity, publishing,
gaming, entertainment.

00:07:20.950 --> 00:07:23.490
And you can find a distribution
channel for these

00:07:23.490 --> 00:07:26.990
apps through a web store, like
the Chrome web store, or

00:07:26.990 --> 00:07:29.940
through even your
own websites.

00:07:29.940 --> 00:07:33.240
All of these can be powered by
the in-apps payments platform.

00:07:37.260 --> 00:07:38.770
What have we built?

00:07:38.770 --> 00:07:42.050
At the very core is the
huge Google payments

00:07:42.050 --> 00:07:43.950
infrastructure.

00:07:43.950 --> 00:07:47.890
This includes things like fraud
and risk management that

00:07:47.890 --> 00:07:51.630
we don't necessarily want you
people to worry about.

00:07:51.630 --> 00:07:55.420
That's something we have a
devoted team looking at each

00:07:55.420 --> 00:07:57.790
and every day.

00:07:57.790 --> 00:08:00.130
We have state of the art
compliance, whether it's in

00:08:00.130 --> 00:08:04.300
the U.S. or internationally,
that meets all the regulations

00:08:04.300 --> 00:08:07.270
in the way we store our credit
cards, the way we do audit,

00:08:07.270 --> 00:08:10.270
where we log data.

00:08:10.270 --> 00:08:13.560
And analytics that can help you
get insights into how your

00:08:13.560 --> 00:08:15.710
users are converting.

00:08:15.710 --> 00:08:18.060
Where do they drop off?

00:08:18.060 --> 00:08:20.780
What time of the day are the
most purchases in your apps?

00:08:20.780 --> 00:08:24.130
Things like that which will be
critical as you fine tune your

00:08:24.130 --> 00:08:26.340
monetization engine.

00:08:26.340 --> 00:08:29.570
Now, couple this payments
platform with a

00:08:29.570 --> 00:08:32.570
large, active user base.

00:08:32.570 --> 00:08:37.230
Any user who has bought an app
on Android market, bought an

00:08:37.230 --> 00:08:41.280
e-book on our Google e-book
store, paid for extra storage

00:08:41.280 --> 00:08:44.990
in Picasa, bought extra minutes
on Google Voice, all

00:08:44.990 --> 00:08:48.350
of these users have
created accounts.

00:08:48.350 --> 00:08:50.980
And you are bringing all
of this huge payments

00:08:50.980 --> 00:08:55.860
infrastructure and a large user
base into your app with a

00:08:55.860 --> 00:08:57.540
simple API.

00:08:57.540 --> 00:09:01.480
Literally it's one call to
initiate payments and one call

00:09:01.480 --> 00:09:03.140
to collect it.

00:09:03.140 --> 00:09:06.000
And Mikhail will jump into what
that API looks like later

00:09:06.000 --> 00:09:08.040
in the session so that you
know how to integrate.

00:09:08.040 --> 00:09:10.000
But that's really what
we think is the

00:09:10.000 --> 00:09:11.440
beauty of this platform.

00:09:11.440 --> 00:09:15.320
One API that in a way hides
away all of the payments

00:09:15.320 --> 00:09:18.430
complexity from you and delivers
to you a large

00:09:18.430 --> 00:09:21.240
transacting user base
from Google.

00:09:21.240 --> 00:09:24.010
And what your users who are
buying apps or playing with

00:09:24.010 --> 00:09:27.170
these apps see is a very
frictionless UX.

00:09:27.170 --> 00:09:30.170
Again, we'll see a demo
of that today.

00:09:30.170 --> 00:09:32.540
The whole goal is simple.

00:09:32.540 --> 00:09:36.950
Payments should get out of the
way as soon as possible.

00:09:36.950 --> 00:09:41.020
Minimal steps, enter your
credentials, pay, and get back

00:09:41.020 --> 00:09:42.730
to the app.

00:09:42.730 --> 00:09:45.210
And the best part about the
user base is if they've

00:09:45.210 --> 00:09:47.800
already paid they don't have
to enter credentials again.

00:09:47.800 --> 00:09:49.050
It becomes single click.

00:09:53.280 --> 00:09:57.420
Now, a lot of you have
tweeted about this.

00:09:57.420 --> 00:10:00.805
A lot of web apps charge 30% for
payments, which we find a

00:10:00.805 --> 00:10:02.810
little ridiculous.

00:10:02.810 --> 00:10:08.190
It's almost become a default,
and we are not ever happy with

00:10:08.190 --> 00:10:09.550
what the default is.

00:10:09.550 --> 00:10:12.850
So in the morning, you saw in
the keynote, we unveiled a

00:10:12.850 --> 00:10:15.050
flat pricing structure 5%.

00:10:17.900 --> 00:10:21.410
Now, I want to emphasize there's
no fine print here.

00:10:21.410 --> 00:10:25.390
This is not a pharmaceutical
ad.

00:10:25.390 --> 00:10:31.840
This 5% means you can price your
items at 25 cents, and

00:10:31.840 --> 00:10:34.980
because there's no fixed fee,
you're never paying an

00:10:34.980 --> 00:10:38.950
exorbitant amount from
what you get.

00:10:38.950 --> 00:10:41.960
You can price your items at
whatever price points you like

00:10:41.960 --> 00:10:44.220
or your users like.

00:10:44.220 --> 00:10:47.130
The second thing I want to
emphasize it this price point

00:10:47.130 --> 00:10:50.060
is not only applicable on Chrome
web store, but on the

00:10:50.060 --> 00:10:51.080
entire web.

00:10:51.080 --> 00:10:54.370
So if you build an app and you
launch it on your own website,

00:10:54.370 --> 00:10:57.170
you can integrate with Google
in-app and the pricing will

00:10:57.170 --> 00:11:00.140
still be the same.

00:11:00.140 --> 00:11:04.120
So that's what we're offering,
A flat 5% pricing structure,

00:11:04.120 --> 00:11:06.820
simple API, and a simple UX.

00:11:06.820 --> 00:11:09.900
Now to jump into the user
experience, I want invite on

00:11:09.900 --> 00:11:15.585
stage Jake from PopCap one of
our early adopters, who have a

00:11:15.585 --> 00:11:18.290
game Plants Versus Zombies some
of you might know, that

00:11:18.290 --> 00:11:20.140
integrated with this platform.

00:11:20.140 --> 00:11:22.640
You saw Angry Birds in the
morning, time for Plants

00:11:22.640 --> 00:11:23.860
Versus Zombies now.

00:11:23.860 --> 00:11:25.110
Hey, Jake.

00:11:27.585 --> 00:11:30.940
JACOB MCMAHON: I'm going to
give you you a demo of the

00:11:30.940 --> 00:11:33.600
in-app purchasing, but since
it's frictionless it's a

00:11:33.600 --> 00:11:36.670
pretty quick demo, so I'll give
you a little run down of

00:11:36.670 --> 00:11:41.490
PopCap first. Our mission
is to make fun games for

00:11:41.490 --> 00:11:43.830
everyone, everywhere.

00:11:43.830 --> 00:11:47.400
Our first game, Bejeweled, is
a good example of that.

00:11:47.400 --> 00:11:51.580
We released it about 10 years
ago, and we've released that

00:11:51.580 --> 00:11:54.140
game on over 15 different
platforms now.

00:11:54.140 --> 00:11:57.230
And for each platform that we
release it on we customize it

00:11:57.230 --> 00:12:00.740
for that platform so that the
users, that's the first time

00:12:00.740 --> 00:12:03.350
they've ever played that game,
they feel like that game was

00:12:03.350 --> 00:12:04.600
built for that platform.

00:12:08.300 --> 00:12:12.080
We have six franchises,
major franchises.

00:12:12.080 --> 00:12:15.340
Plants Versus Zombies is
the most recent one.

00:12:15.340 --> 00:12:20.390
And that's actually what we're
going to do the demo with is

00:12:20.390 --> 00:12:23.830
we've got a trial version up on
the Chrome web store, and

00:12:23.830 --> 00:12:25.520
so what we've done is we've
added some additional

00:12:25.520 --> 00:12:27.110
content onto it.

00:12:27.110 --> 00:12:29.530
If you're never played Plants
Versus Zombies before, there's

00:12:29.530 --> 00:12:32.240
two sides plants, zombies.

00:12:32.240 --> 00:12:36.070
There's about 40 plants and
about 25 zombies, and we've

00:12:36.070 --> 00:12:38.660
got some additional zombies
that the player can add

00:12:38.660 --> 00:12:41.530
through microtransaction
payments.

00:12:41.530 --> 00:12:45.740
Now, jumping into the numbers,
if you look across all of our

00:12:45.740 --> 00:12:50.550
products we've got about 60,
more than 60 monthly active

00:12:50.550 --> 00:12:52.800
users that are playing
our games.

00:12:52.800 --> 00:12:57.210
If we look just at Bejeweled,
we've got over 2 billion games

00:12:57.210 --> 00:12:59.280
played each month.

00:12:59.280 --> 00:13:04.050
And if we look at just micro
transactions we've got over 3

00:13:04.050 --> 00:13:06.380
million transactions
a month at an

00:13:06.380 --> 00:13:09.020
average cost of 75 cents.

00:13:09.020 --> 00:13:11.790
Now, we've seen this business
grow quite a bit just in the

00:13:11.790 --> 00:13:13.100
last eight months.

00:13:13.100 --> 00:13:17.020
It's grown more than 100%, to
more than $2.5 million a

00:13:17.020 --> 00:13:24.820
month, and now accounts for
about 10% of our revenue.

00:13:24.820 --> 00:13:30.240
One other number for you,
75% of our purchases are

00:13:30.240 --> 00:13:32.865
re-orders, and that's something
that were very proud

00:13:32.865 --> 00:13:36.160
of because that's telling us
that the users are trying our

00:13:36.160 --> 00:13:38.720
game and they're enjoying it
and they're coming back.

00:13:38.720 --> 00:13:40.930
And that's where we want to
focus is we want to focus on

00:13:40.930 --> 00:13:44.850
making those great experiences
that players really enjoy.

00:13:44.850 --> 00:13:49.320
Plants Versus Zombies, as an
example, we spent three years

00:13:49.320 --> 00:13:50.260
making that game.

00:13:50.260 --> 00:13:52.970
We spent a lot of time picking
the right combination of

00:13:52.970 --> 00:13:56.450
plants and zombies and trying
to create a balanced

00:13:56.450 --> 00:13:58.120
experience.

00:13:58.120 --> 00:14:02.040
So as we add new zombies to that
game we want to make sure

00:14:02.040 --> 00:14:07.450
that that supports the old game
play, as well as enhances

00:14:07.450 --> 00:14:10.330
and evolves the game into
a new direction.

00:14:10.330 --> 00:14:14.550
So we've got three new zombies
for this demo.

00:14:14.550 --> 00:14:19.530
We've got a zombie in long
johns, we've got a

00:14:19.530 --> 00:14:26.500
hairy-chested, spandex zombie,
and a naked zombie.

00:14:26.500 --> 00:14:32.320
All right so let's switch
over to the demo.

00:14:32.320 --> 00:14:35.690
All right so this is the trial
version that's available up on

00:14:35.690 --> 00:14:38.400
the Chrome web store, and we
did a mock up with it.

00:14:42.390 --> 00:14:47.310
And we added a button so that
we can purchase in it.

00:14:47.310 --> 00:14:49.960
We just called it
the Google Mart.

00:14:49.960 --> 00:14:54.400
And in there we've got our
three choices, spandex,

00:14:54.400 --> 00:14:56.250
underwear, naked.

00:14:56.250 --> 00:15:01.110
I think we should go well full
monty, go fully naked.

00:15:01.110 --> 00:15:04.750
So the user experience
is what you'd want.

00:15:04.750 --> 00:15:05.540
It's frictionless.

00:15:05.540 --> 00:15:10.310
It's just two clicks to go
through the purchase sequence.

00:15:10.310 --> 00:15:15.780
We got the API about a week
ago and mocked this up.

00:15:15.780 --> 00:15:19.434
It was really easy to use,
quick to implement.

00:15:19.434 --> 00:15:23.130
Maybe I didn't get it there.

00:15:26.310 --> 00:15:26.925
There we go.

00:15:26.925 --> 00:15:29.876
We'll see what happens.

00:15:29.876 --> 00:15:33.530
It was quick to implement, easy
to use, which is exactly

00:15:33.530 --> 00:15:34.780
what you would want.

00:15:38.530 --> 00:15:39.780
Complete that purchase.

00:15:42.460 --> 00:15:43.650
And here we go.

00:15:43.650 --> 00:15:46.730
We will end up with our naked
zombie that we can then play

00:15:46.730 --> 00:15:51.210
in the game, and so fantastic
experience.

00:15:56.110 --> 00:15:57.800
So I'll hand it over
to Mikhail to

00:15:57.800 --> 00:15:59.140
talk through the details.

00:16:04.020 --> 00:16:05.484
MIKHAIL SEREGINE: Thank you.

00:16:05.484 --> 00:16:06.948
Thank you, Jake.

00:16:09.868 --> 00:16:12.230
Let me slip back over here.

00:16:26.830 --> 00:16:29.070
Great So I''ll tell
you guys about the

00:16:29.070 --> 00:16:30.350
API that we've built.

00:16:30.350 --> 00:16:35.580
And as Amit has alluded to
earlier, we wanted to solve

00:16:35.580 --> 00:16:39.360
two major problems, first one
is the buyer experience.

00:16:39.360 --> 00:16:42.690
We want it to be very smooth so
that people don't have any

00:16:42.690 --> 00:16:45.610
trouble making one purchase
after another, and they don't

00:16:45.610 --> 00:16:48.890
feel like it's an obstacle for
them as they're playing a game

00:16:48.890 --> 00:16:50.770
or using your web app.

00:16:50.770 --> 00:16:54.070
And the second, of course, is
that we wanted to make the API

00:16:54.070 --> 00:16:57.040
very easy for you to use so it's
not an obstacle for you

00:16:57.040 --> 00:16:59.680
to build this in so you
can integrate quickly

00:16:59.680 --> 00:17:02.690
and get paid sooner.

00:17:02.690 --> 00:17:05.210
It turns out that these problems
are related and so

00:17:05.210 --> 00:17:08.710
when you build a
[UNINTELLIGIBLE]

00:17:08.710 --> 00:17:10.810
you want it to model the
buyer experience.

00:17:10.810 --> 00:17:12.640
So really to make some sort
of API you just need to

00:17:12.640 --> 00:17:14.050
understand how the
purchase works.

00:17:14.050 --> 00:17:16.180
And you've already seen that.

00:17:16.180 --> 00:17:18.670
So just to review the structure,
let's say you have

00:17:18.670 --> 00:17:20.319
a web application where
you can buy a star.

00:17:20.319 --> 00:17:22.050
There's a buy button.

00:17:22.050 --> 00:17:23.650
The buyer clicks on
that buy button.

00:17:23.650 --> 00:17:27.010
It brings up the payment
screen you saw earlier.

00:17:27.010 --> 00:17:29.590
The buyer just has to either
confirm the purchase or enter

00:17:29.590 --> 00:17:33.260
the billing details if
they haven't already.

00:17:33.260 --> 00:17:36.460
Payment gets processed, they
close the window, and they're

00:17:36.460 --> 00:17:39.470
back in the application and they
have the item immediately

00:17:39.470 --> 00:17:42.520
that they just purchased.

00:17:42.520 --> 00:17:46.280
So to implement this API in your
application you just need

00:17:46.280 --> 00:17:47.600
to worry about two calls.

00:17:47.600 --> 00:17:50.880
The first call will open the
payment screen, on the second

00:17:50.880 --> 00:17:54.080
call will accept the
notification once the payment

00:17:54.080 --> 00:17:55.360
is complete.

00:17:55.360 --> 00:17:59.730
So that same diagram in terms
of the API, the click

00:17:59.730 --> 00:18:01.090
corresponds to the API call.

00:18:01.090 --> 00:18:05.090
When a buyer clicks on a buy
button the API call is made.

00:18:05.090 --> 00:18:08.040
And then the notification
corresponds to

00:18:08.040 --> 00:18:09.070
the end of the purchase.

00:18:09.070 --> 00:18:12.180
So the notification is actually
sent to you when the

00:18:12.180 --> 00:18:14.460
purchase is complete, but before
the buyer has closed

00:18:14.460 --> 00:18:14.890
that window.

00:18:14.890 --> 00:18:17.660
So once the buyer has closed
that window it's guaranteed

00:18:17.660 --> 00:18:21.430
that the purchase notification
has already been sent to you.

00:18:21.430 --> 00:18:25.980
We think that makes it a lot
simpler for you to handle that

00:18:25.980 --> 00:18:29.775
end of the picture flow, and
gives you fewer corner cases

00:18:29.775 --> 00:18:31.025
to worry about.

00:18:33.080 --> 00:18:35.950
Let's talk about, actually
before I go on I should say

00:18:35.950 --> 00:18:36.470
one more thing.

00:18:36.470 --> 00:18:38.740
I've been using the example of
a buy button, but that's

00:18:38.740 --> 00:18:40.630
really not necessarily
the only way to

00:18:40.630 --> 00:18:42.480
implement this API.

00:18:42.480 --> 00:18:45.320
The API call is just a
JavaScript [UNINTELLIGIBLE]

00:18:45.320 --> 00:18:46.860
call, so you can trigger
it on anything.

00:18:46.860 --> 00:18:49.630
For example, if you have another
game and the user

00:18:49.630 --> 00:18:51.710
completes all the levels you can
immediately bring up the

00:18:51.710 --> 00:18:54.460
payment screen so they can buy
more levels without them

00:18:54.460 --> 00:18:55.710
having to click anything.

00:18:58.260 --> 00:19:00.310
Before you start writing code to
integrate this API, you'll

00:19:00.310 --> 00:19:01.420
need to do a bit to set up.

00:19:01.420 --> 00:19:03.370
You'll need to create a
seller account if you

00:19:03.370 --> 00:19:05.580
don't have one already.

00:19:05.580 --> 00:19:08.090
And then you'll need to grab a
seller ID and a secret and

00:19:08.090 --> 00:19:11.880
you'll use those to call our
API to tell us who you are.

00:19:11.880 --> 00:19:13.990
You'll also configure
a closed back URL.

00:19:13.990 --> 00:19:16.830
That's the URL where we'll send
those notifications once

00:19:16.830 --> 00:19:19.740
the payment is complete.

00:19:19.740 --> 00:19:21.010
Let's talk about that
first call to

00:19:21.010 --> 00:19:24.280
open the payment screen.

00:19:24.280 --> 00:19:26.000
As a web application you
have a client side

00:19:26.000 --> 00:19:26.920
and a server side.

00:19:26.920 --> 00:19:30.030
The call starts on the server
side where you use your secret

00:19:30.030 --> 00:19:33.730
key to find the parameters
of the purchase

00:19:33.730 --> 00:19:35.790
that are being generated.

00:19:35.790 --> 00:19:37.300
So you'll define the purchase.

00:19:37.300 --> 00:19:38.620
You'll sign them with
your secret key.

00:19:38.620 --> 00:19:42.670
That will produce a token which
is an encoded string.

00:19:42.670 --> 00:19:45.670
You'll embed it in your web
application source code, and

00:19:45.670 --> 00:19:48.190
that'll get passed into our
JavaScript library.

00:19:48.190 --> 00:19:49.930
Here's the actual code.

00:19:49.930 --> 00:19:51.230
This is Ruby, but it
would look pretty

00:19:51.230 --> 00:19:52.870
similar in most languages.

00:19:52.870 --> 00:19:54.390
So you define the purchase.

00:19:54.390 --> 00:19:56.200
It's very simple to define.

00:19:56.200 --> 00:19:59.840
You just tell us what's being
purchased, how much it costs,

00:19:59.840 --> 00:20:01.130
and then you tell us
who you are when

00:20:01.130 --> 00:20:01.730
you're calling the API.

00:20:01.730 --> 00:20:04.660
Yet So that's that the
first code snippet.

00:20:04.660 --> 00:20:08.110
The line at the bottom is where
you use your secret key

00:20:08.110 --> 00:20:11.110
to sign it and generate
the token.

00:20:11.110 --> 00:20:14.060
That JWT.encode call is
a standard library.

00:20:14.060 --> 00:20:15.770
All you need to know is you
don't need to worry about

00:20:15.770 --> 00:20:17.840
implementing the signature
algorithm yourself.

00:20:17.840 --> 00:20:19.820
And Luke will tell you more
about that library we chose.

00:20:22.570 --> 00:20:25.690
Now, you've generated that token
on the server side, and

00:20:25.690 --> 00:20:27.500
this is the client side.

00:20:27.500 --> 00:20:29.460
First you'll include our
JavaScript library, that's the

00:20:29.460 --> 00:20:30.860
first code snippet.

00:20:30.860 --> 00:20:33.540
Really you just copy and paste
that and you're done.

00:20:33.540 --> 00:20:35.170
The second code snippet
actually

00:20:35.170 --> 00:20:36.350
triggers the call here.

00:20:36.350 --> 00:20:40.330
We've set up a buy button with
an on-click handler that calls

00:20:40.330 --> 00:20:43.080
JavaScript function in our
library, and passes that item

00:20:43.080 --> 00:20:45.360
token those generated
on the server side

00:20:45.360 --> 00:20:47.130
into the library call.

00:20:51.020 --> 00:20:55.150
So after you've done that, the
payment processing all happens

00:20:55.150 --> 00:20:55.610
on our side.

00:20:55.610 --> 00:20:56.590
The payment screen opens.

00:20:56.590 --> 00:20:58.140
We interact with the
buyer to get

00:20:58.140 --> 00:21:00.340
confirmation or billing details.

00:21:00.340 --> 00:21:02.700
And once the payment is done we
process it on our servers.

00:21:02.700 --> 00:21:06.000
We send you a server to
server notification.

00:21:06.000 --> 00:21:08.610
It goes to that URL you've
configured earlier.

00:21:08.610 --> 00:21:10.990
The details of that notification
will include many

00:21:10.990 --> 00:21:14.270
of the same things you put into
the original JavaScript

00:21:14.270 --> 00:21:16.590
library call, including the
item description of what's

00:21:16.590 --> 00:21:18.570
being purchased, the
price, and when

00:21:18.570 --> 00:21:19.960
that purchase happened.

00:21:19.960 --> 00:21:22.090
We'll also include an
order ID for you.

00:21:22.090 --> 00:21:24.080
You'll be able to use
that later to

00:21:24.080 --> 00:21:25.420
reference this purchase.

00:21:25.420 --> 00:21:27.100
And importantly you will
need to echo that

00:21:27.100 --> 00:21:28.090
order ID back to us.

00:21:28.090 --> 00:21:30.170
That way we know that you
received our notification, you

00:21:30.170 --> 00:21:34.640
were able to decode our token,
and got the order ID out of it

00:21:34.640 --> 00:21:37.160
so we know that the user can
reasonably expect to have the

00:21:37.160 --> 00:21:39.840
item at that point because
you've found

00:21:39.840 --> 00:21:42.000
out about the purchase.

00:21:42.000 --> 00:21:45.180
And at that point we're done.

00:21:45.180 --> 00:21:49.110
The purchase has been
delivered to you.

00:21:49.110 --> 00:21:51.910
This is the code to implement
that notification handler.

00:21:51.910 --> 00:21:54.860
Again, this is a rails
controller action.

00:21:54.860 --> 00:21:57.260
This function gets called
when your server

00:21:57.260 --> 00:21:59.220
gets a post from us.

00:21:59.220 --> 00:22:00.790
It pulls the first line.

00:22:00.790 --> 00:22:03.520
You see it pulls the JWT
parameter, that token, out of

00:22:03.520 --> 00:22:05.160
the post parameters.

00:22:05.160 --> 00:22:06.780
It decodes it using
that same standard

00:22:06.780 --> 00:22:09.140
library I mentioned earlier.

00:22:09.140 --> 00:22:11.920
You call from application
specific logic to give the

00:22:11.920 --> 00:22:13.230
item to the user.

00:22:13.230 --> 00:22:17.480
And then you acknowledge the
receipt of that post back to

00:22:17.480 --> 00:22:22.610
us by returning a status of 200
and the order ID in the

00:22:22.610 --> 00:22:24.190
body of the response.

00:22:24.190 --> 00:22:26.620
If anything goes wrong, you
can just give us different

00:22:26.620 --> 00:22:31.230
code as a response, like a 400
and then we'll understand that

00:22:31.230 --> 00:22:33.160
you couldn't deliver the item
to the user and so we'll

00:22:33.160 --> 00:22:34.280
cancel the order.

00:22:34.280 --> 00:22:36.140
That way the user doesn't
pay for something

00:22:36.140 --> 00:22:37.390
they couldn't receive.

00:22:40.830 --> 00:22:43.900
Now, you might have noticed
that the server to server

00:22:43.900 --> 00:22:46.190
notification comes to your
servers, but the user is

00:22:46.190 --> 00:22:47.230
probably using the client.

00:22:47.230 --> 00:22:48.970
So how will that item
be actually

00:22:48.970 --> 00:22:50.350
delivered to the user?

00:22:50.350 --> 00:22:51.930
Of course there's several
ways to go about it.

00:22:51.930 --> 00:22:53.340
The simplest way to
do it is polling.

00:22:53.340 --> 00:22:55.960
So your client could poll the
server side and wait for the

00:22:55.960 --> 00:22:58.320
notification to come through.

00:22:58.320 --> 00:23:00.460
But we can do better than that,
and so we provide an

00:23:00.460 --> 00:23:03.130
optional mechanism for you
to use so you can pass an

00:23:03.130 --> 00:23:05.460
optional call back into that
JavaScript library call when

00:23:05.460 --> 00:23:07.400
you start the purchase.

00:23:07.400 --> 00:23:09.850
These call back functions get
invoked when the purchase

00:23:09.850 --> 00:23:11.620
either succeeds or fails.

00:23:11.620 --> 00:23:14.270
And at that point you know
your server has also been

00:23:14.270 --> 00:23:16.810
notified, so when the call that
is called on the client

00:23:16.810 --> 00:23:19.110
you can check with your own
server to see if you got the

00:23:19.110 --> 00:23:23.600
notification instead of having
pull it all the time.

00:23:23.600 --> 00:23:25.680
Of course you do still have
to check with the server.

00:23:25.680 --> 00:23:28.510
The JavaScript call back
itself is not enough.

00:23:28.510 --> 00:23:32.500
The reason is any buyer with
Firebug installed or a similar

00:23:32.500 --> 00:23:35.040
tool can go and invoke that call
back on themselves and

00:23:35.040 --> 00:23:38.560
give themselves free stuff,
naked zombies to

00:23:38.560 --> 00:23:39.810
their heart's content.

00:23:41.700 --> 00:23:44.160
And so that's why you want to
check with the server to make

00:23:44.160 --> 00:23:47.110
sure that the purchase actually
did take place.

00:23:47.110 --> 00:23:49.780
So let's review the
whole picture.

00:23:49.780 --> 00:23:52.640
Your servers will define a
purchase, generate a token to

00:23:52.640 --> 00:23:56.030
represent it, and pass
it into the client.

00:23:56.030 --> 00:23:58.560
When a buyer clicks on that buy
button the token will get

00:23:58.560 --> 00:24:00.260
tossed into our JavaScript
library.

00:24:00.260 --> 00:24:02.040
It will open the
payment screen.

00:24:02.040 --> 00:24:05.250
The payment screen will talk to
our servers, complete the

00:24:05.250 --> 00:24:08.170
purchase and you'll get a
notification first on the

00:24:08.170 --> 00:24:12.150
server and then when the buyer
closes the payment screen the

00:24:12.150 --> 00:24:13.770
client side as well.

00:24:13.770 --> 00:24:15.060
And now Luke will tell you
more about how this

00:24:15.060 --> 00:24:16.310
will work in flash.

00:24:20.740 --> 00:24:21.710
LUKE BAYES: Hey, there.

00:24:21.710 --> 00:24:24.410
My name 's Luke, and I've been
working with these guys since

00:24:24.410 --> 00:24:26.110
back in the Jambool days.

00:24:26.110 --> 00:24:27.970
I'm going to talk to you today
a little bit about the flash

00:24:27.970 --> 00:24:30.540
integration and as well as a
few other sort of technical

00:24:30.540 --> 00:24:32.620
details as we got into it.

00:24:32.620 --> 00:24:37.290
So jumping right in here, this
API is actually going to be

00:24:37.290 --> 00:24:40.090
coming soon, so we're not
shipping this today.

00:24:40.090 --> 00:24:41.360
But in the coming--

00:24:41.360 --> 00:24:43.210
we'll get this as
soon as we can.

00:24:43.210 --> 00:24:44.520
We'll get this out to you.

00:24:44.520 --> 00:24:46.800
If you want to integrate this
API with a flash application

00:24:46.800 --> 00:24:49.110
or a flash game, the first thing
you need do is get our

00:24:49.110 --> 00:24:50.660
library, our SWF library.

00:24:50.660 --> 00:24:53.450
You'll download that from
our merchant area.

00:24:53.450 --> 00:24:55.720
And you'll get that into
your SWF file, compiled

00:24:55.720 --> 00:24:56.380
into your SWF file.

00:24:56.380 --> 00:24:57.840
You can do that using
the line command

00:24:57.840 --> 00:24:59.750
compiler, as you see here.

00:24:59.750 --> 00:25:01.810
But you could also use whatever
other tools used to

00:25:01.810 --> 00:25:02.980
build your SWF application.

00:25:02.980 --> 00:25:06.270
So if you're using flash
authoring for example or flash

00:25:06.270 --> 00:25:09.510
builder or flex builder or
FDT, whatever tool you're

00:25:09.510 --> 00:25:12.730
using to build your flash
application you just embed our

00:25:12.730 --> 00:25:15.420
library in there as a SWC file,
and you can then make

00:25:15.420 --> 00:25:18.480
references to the code that's
compiled inside of it.

00:25:18.480 --> 00:25:21.630
Now, the second thing you'll
need to do is get access to a

00:25:21.630 --> 00:25:23.440
signed item token.

00:25:23.440 --> 00:25:25.240
And again, you'll need to do
that on your server because

00:25:25.240 --> 00:25:28.480
you don't want to compile your
secret key into your running

00:25:28.480 --> 00:25:30.880
SWF file that's then in
people's browsers

00:25:30.880 --> 00:25:31.980
and stuff like that.

00:25:31.980 --> 00:25:34.330
So similar or the
JavaScript side.

00:25:34.330 --> 00:25:36.940
Now, here we're showing an
example of how to do that

00:25:36.940 --> 00:25:39.210
using FlashVars or object
embed using

00:25:39.210 --> 00:25:40.610
the SWF object library.

00:25:40.610 --> 00:25:44.580
Now this bottom snippet here is
presumably on an HTML page

00:25:44.580 --> 00:25:46.860
that your server is rendering
in the same way that they

00:25:46.860 --> 00:25:48.860
rendered the HTML page
as the host did

00:25:48.860 --> 00:25:50.540
the JavaScript client.

00:25:50.540 --> 00:25:53.240
Now, in this case, we're just
sending the same item token

00:25:53.240 --> 00:25:56.640
there, and we're pushing
it into using a SWF

00:25:56.640 --> 00:25:58.460
object dot add param.

00:25:58.460 --> 00:26:05.530
Now this implementation can
work with exactly the same

00:26:05.530 --> 00:26:08.410
back end that's driving your
HTML JavaScript client.

00:26:08.410 --> 00:26:11.880
So you could, it's conceivable
that you could have a flash

00:26:11.880 --> 00:26:14.070
game or flash application
that's running one

00:26:14.070 --> 00:26:16.520
environment, an HTML JavaScript
application that's

00:26:16.520 --> 00:26:18.610
the same application or very
similar, running for another

00:26:18.610 --> 00:26:21.260
environment that may
not work for flash.

00:26:21.260 --> 00:26:23.770
But your service layer could
actually be identical.

00:26:23.770 --> 00:26:27.180
No some people aren't going to
be having just one single

00:26:27.180 --> 00:26:30.200
button or one single item to
purchase and FlashVars may not

00:26:30.200 --> 00:26:31.120
be appropriate.

00:26:31.120 --> 00:26:33.370
And in that case you can
actually write an API, like

00:26:33.370 --> 00:26:36.010
for example, maybe
a catalog API.

00:26:36.010 --> 00:26:38.020
So you're basically loading a
collection of items off of

00:26:38.020 --> 00:26:38.830
your server.

00:26:38.830 --> 00:26:41.570
And all you have to do is
include a signed token for

00:26:41.570 --> 00:26:44.070
each item that the user may
purchase in the client.

00:26:44.070 --> 00:26:46.670
So that would work as well.

00:26:46.670 --> 00:26:50.120
Now, the next step is we're
going to get down into the

00:26:50.120 --> 00:26:51.160
running SWF file.

00:26:51.160 --> 00:26:52.970
So into your application
we're writing action

00:26:52.970 --> 00:26:54.300
script three code.

00:26:54.300 --> 00:26:57.040
Now, this code is regular,
plain, old

00:26:57.040 --> 00:26:57.900
action script three.

00:26:57.900 --> 00:27:01.800
This is not you don't have to
have a flex application.

00:27:01.800 --> 00:27:04.020
If you do that's fine.

00:27:04.020 --> 00:27:06.730
There's no frameworks or
additional code code that need

00:27:06.730 --> 00:27:07.970
to bring in.

00:27:07.970 --> 00:27:09.950
But if you have other frameworks
it works fine

00:27:09.950 --> 00:27:11.490
alongside those.

00:27:11.490 --> 00:27:14.390
So in this case we're going to
take the buy button that you

00:27:14.390 --> 00:27:15.590
presumable have in your app.

00:27:15.590 --> 00:27:17.640
And like Mikhail said for
the JavaScript side.

00:27:17.640 --> 00:27:19.330
It could be some interaction
took place.

00:27:19.330 --> 00:27:21.430
Maybe you have a vampire that
walked up to another vampire

00:27:21.430 --> 00:27:24.150
and when they collide
the buy screen

00:27:24.150 --> 00:27:26.150
shows up for some reason.

00:27:26.150 --> 00:27:28.680
In this case we've got a buy
button, and in our handler

00:27:28.680 --> 00:27:30.590
we're going to attach to
the mouse event some

00:27:30.590 --> 00:27:31.900
of you may see there.

00:27:31.900 --> 00:27:33.720
where in our handler we're going
to basically go out to

00:27:33.720 --> 00:27:37.390
the FlashVars that we saw on the
previous screen, and grab

00:27:37.390 --> 00:27:38.690
that item token as a string.

00:27:38.690 --> 00:27:40.740
So it's as an opaque string from
the perspective of the

00:27:40.740 --> 00:27:42.340
running flash app.

00:27:42.340 --> 00:27:44.530
We're going to instantiate our
library that came in in that

00:27:44.530 --> 00:27:48.140
SWC file, and call buy item,
sending it that token.

00:27:48.140 --> 00:27:50.980
Now this is going to load and
display the payment experience

00:27:50.980 --> 00:27:52.690
directly within your
flash app.

00:27:52.690 --> 00:27:55.240
So you'll be ready to go, the
user will be able to finish

00:27:55.240 --> 00:27:56.970
their, make their purchasee.

00:27:56.970 --> 00:27:59.180
And then when they're done
you'll get an event you can

00:27:59.180 --> 00:28:02.650
subscribe to an optional event
like Mikhail described, but

00:28:02.650 --> 00:28:04.440
you'll definitely get a post
back on your server.

00:28:04.440 --> 00:28:06.800
So you can basically handle that
post back and award the

00:28:06.800 --> 00:28:08.750
item to the user.

00:28:08.750 --> 00:28:11.650
I'm going to talk a little bit
about JSON web tokens.

00:28:11.650 --> 00:28:14.490
So to be clear, this
is a scheme that's

00:28:14.490 --> 00:28:16.050
in place for signing.

00:28:16.050 --> 00:28:18.870
And the purpose of these tokens
is for us to verify

00:28:18.870 --> 00:28:22.000
that you were in the person, you
the seller were the person

00:28:22.000 --> 00:28:25.170
who created this particular
item and associated this

00:28:25.170 --> 00:28:27.450
particular price and wanted
to award it to

00:28:27.450 --> 00:28:28.900
this particular user.

00:28:28.900 --> 00:28:31.500
So what we're doing here is
we're verifying that the price

00:28:31.500 --> 00:28:35.110
you've given us and who we're
going to pay when we collect

00:28:35.110 --> 00:28:36.140
that user's money.

00:28:36.140 --> 00:28:39.210
So we don't want to let users
in the middle, like, open up

00:28:39.210 --> 00:28:41.120
Firebug and manipulate the
amount they're going to pay

00:28:41.120 --> 00:28:41.910
for something.

00:28:41.910 --> 00:28:43.860
And we certainly don't want to
let them manipulate who we're

00:28:43.860 --> 00:28:46.200
going to pay when they
give us that money.

00:28:46.200 --> 00:28:48.640
So the important thing here is
that we have your secret key

00:28:48.640 --> 00:28:53.110
is what you use on your server
and you use it to sign that

00:28:53.110 --> 00:28:53.750
information.

00:28:53.750 --> 00:28:56.130
So you create that packet of
information and then you sign

00:28:56.130 --> 00:28:57.490
it with your secret key.

00:28:57.490 --> 00:29:01.710
And then you take that encoded
string as a opaque package,

00:29:01.710 --> 00:29:05.470
and you pass it through to
our APIs and your client.

00:29:05.470 --> 00:29:09.610
Now, the JSON web tokens is a
very recent innovation in sort

00:29:09.610 --> 00:29:12.030
of signing technology
these days.

00:29:12.030 --> 00:29:14.310
There are a variety of libraries
available to use

00:29:14.310 --> 00:29:16.640
that work just great.

00:29:16.640 --> 00:29:21.820
In getting this to work, we
actually came through a few

00:29:21.820 --> 00:29:26.050
other implementations, one of
them being OAuth1 style

00:29:26.050 --> 00:29:26.835
signing schemes.

00:29:26.835 --> 00:29:30.510
Now, some you might be familiar
with OAuth One

00:29:30.510 --> 00:29:35.890
Essentially this is an HTTP
coupled signing scheme where

00:29:35.890 --> 00:29:38.830
you take HTTP parameters and
you sort them according to

00:29:38.830 --> 00:29:41.510
some rules alphabetically.

00:29:41.510 --> 00:29:43.820
Then you put some delimiters
in there and you assemble

00:29:43.820 --> 00:29:45.780
them, and it's pretty
complicated.

00:29:45.780 --> 00:29:49.190
And the problem is it ties your
signing scheme literally

00:29:49.190 --> 00:29:52.820
to your web server or web
application layer.

00:29:52.820 --> 00:29:55.130
With JSON web tokens you can
actually sign these with

00:29:55.130 --> 00:29:57.540
native libraries in whatever
language it's written in.

00:29:57.540 --> 00:30:01.122
You don't have to know what
object, for example, on a

00:30:01.122 --> 00:30:03.880
rails app we have a params
object where parameters live.

00:30:03.880 --> 00:30:06.040
And JSON so OAuth1 was
very complicated.

00:30:06.040 --> 00:30:09.550
We got into issues at Social
Gold where we had a lot of

00:30:09.550 --> 00:30:12.320
people having trouble
with did I get these

00:30:12.320 --> 00:30:13.120
in the right order?

00:30:13.120 --> 00:30:15.250
What do I do with optional
parameters?

00:30:15.250 --> 00:30:18.550
What do I do with other
parameters that aren't even

00:30:18.550 --> 00:30:20.070
related to this signing
scheme.

00:30:20.070 --> 00:30:22.560
I've got some method parameter
i want to send to do an HTTP

00:30:22.560 --> 00:30:23.860
delete or what have you.

00:30:23.860 --> 00:30:26.630
Now, all that stuff goes
away JSON web token.

00:30:26.630 --> 00:30:28.560
So we were really excited
when we found this.

00:30:28.560 --> 00:30:31.670
And basically with this scheme
you just send a packet to this

00:30:31.670 --> 00:30:34.220
method in a library and you
get back the token.

00:30:34.220 --> 00:30:36.740
And on the other side of that
you can send the token into

00:30:36.740 --> 00:30:38.200
this library and get back
the packet that

00:30:38.200 --> 00:30:39.120
was originally sent.

00:30:39.120 --> 00:30:40.030
It's really simple.

00:30:40.030 --> 00:30:41.190
It's really easy.

00:30:41.190 --> 00:30:42.910
And there's libraries in just
about any language.

00:30:42.910 --> 00:30:45.370
So we're working with the
library developers.

00:30:45.370 --> 00:30:48.010
If you do find a library in some
other language that's not

00:30:48.010 --> 00:30:50.110
quite up to speed, just let us
know on our developer forums.

00:30:50.110 --> 00:30:52.120
And we're working on getting
all those libraries up to

00:30:52.120 --> 00:30:54.290
speed and keeping them up to
date with the latest version

00:30:54.290 --> 00:30:57.060
of the JSON web token spec.

00:30:57.060 --> 00:31:02.480
So with this spec, we also have
built a little bit of

00:31:02.480 --> 00:31:05.760
support into our merchant center
here, where you can

00:31:05.760 --> 00:31:07.930
take the parameters, as you're
trying to integrate you can

00:31:07.930 --> 00:31:10.860
take the parameters that you've
got and you can put

00:31:10.860 --> 00:31:14.500
them into this web form and hit
go and then see a token

00:31:14.500 --> 00:31:15.650
get built in place.

00:31:15.650 --> 00:31:18.060
You can actually paste that
code in and make it make a

00:31:18.060 --> 00:31:20.610
call to make sure wheres
the problem as

00:31:20.610 --> 00:31:21.600
you're trying to debug.

00:31:21.600 --> 00:31:24.170
This'll take-- is my signing
code the problem, or is my

00:31:24.170 --> 00:31:25.520
application code the problem?

00:31:25.520 --> 00:31:27.310
Is the library the problem,
like, what's happening?

00:31:27.310 --> 00:31:30.740
This let you narrow that problem
set down and see my

00:31:30.740 --> 00:31:32.460
signing code is actually
generating a different

00:31:32.460 --> 00:31:35.080
signature with these inputs,
there must be a problem in my

00:31:35.080 --> 00:31:36.920
signing code, perhaps in
the library, perhaps in

00:31:36.920 --> 00:31:38.240
how I'm using it.

00:31:38.240 --> 00:31:41.380
And this is a great tool that I
think will be really helpful

00:31:41.380 --> 00:31:44.110
for a lot of people.

00:31:44.110 --> 00:31:47.830
Now some of you may have noticed
that as we look at

00:31:47.830 --> 00:31:50.310
those diagrams that Mikahil
had, we had this process

00:31:50.310 --> 00:31:53.130
beginning in a client, in
a browser of some kind

00:31:53.130 --> 00:31:55.210
somewhere, and then
our servers are

00:31:55.210 --> 00:31:56.990
calling your servers.

00:31:56.990 --> 00:31:58.810
Now there's a little bit of an
issue there in that you're

00:31:58.810 --> 00:32:02.890
probably wondering how do I know
which user was in that

00:32:02.890 --> 00:32:07.340
browser in order to associate
this purchase and give them

00:32:07.340 --> 00:32:08.640
the right thing?

00:32:08.640 --> 00:32:11.230
Well, the way we're encouraging
you to do that is

00:32:11.230 --> 00:32:13.580
through this field called seller
data, which is just a

00:32:13.580 --> 00:32:17.970
field on the hash that you send
to the library, to the

00:32:17.970 --> 00:32:19.420
signing library.

00:32:19.420 --> 00:32:21.120
Put this in your
JSON web token.

00:32:21.120 --> 00:32:23.010
It's an opaque string from
our perspective.

00:32:23.010 --> 00:32:24.210
We don't care what's in there.

00:32:24.210 --> 00:32:26.330
You can put whatever you want
in there, and you can use it

00:32:26.330 --> 00:32:29.890
to associate a purchase with
a user in your context.

00:32:29.890 --> 00:32:32.110
So we're not going to leak user
data to you, and we're

00:32:32.110 --> 00:32:34.960
prefer it if you didn't
leak user data to us.

00:32:34.960 --> 00:32:38.120
And it's important that
you encrypt that date.

00:32:38.120 --> 00:32:39.830
Now, as I said before,
JSON web tokens

00:32:39.830 --> 00:32:41.270
is a signing scheme.

00:32:41.270 --> 00:32:43.380
It's not an encryption scheme.

00:32:43.380 --> 00:32:46.570
So we're relying on HTTPS for
encryption, but we want to

00:32:46.570 --> 00:32:51.070
make sure that you keep your
user information secure

00:32:51.070 --> 00:32:53.630
according to the terms of your
relationship with your users.

00:32:53.630 --> 00:32:55.560
And that means secure
from us as well.

00:32:55.560 --> 00:32:57.130
So you should encrypt
that information.

00:32:57.130 --> 00:32:58.840
If you put personally
identifying information there

00:32:58.840 --> 00:33:01.430
you should encrypt it as you
send it in, and you should

00:33:01.430 --> 00:33:03.440
decrypt it when you
get it out.

00:33:03.440 --> 00:33:05.180
And we're going to
pass it through.

00:33:05.180 --> 00:33:07.950
So we're going to send you back
a JSON web token that's

00:33:07.950 --> 00:33:11.650
very similar, but not the same
as the one that you sent that.

00:33:11.650 --> 00:33:13.980
And when we send that back we'll
include whatever you

00:33:13.980 --> 00:33:14.800
gave us an that [UNINTELLIGIBLE]

00:33:14.800 --> 00:33:15.570
data field.

00:33:15.570 --> 00:33:18.540
And that will allow you to do
things like hey, I just got a

00:33:18.540 --> 00:33:20.930
post back that said someone
bought something.

00:33:20.930 --> 00:33:23.670
Here's who bought it,
user ID 12345.

00:33:23.670 --> 00:33:25.860
But you can also do interesting
things in addition

00:33:25.860 --> 00:33:28.900
to that, like, oh, actually
this session was initiated

00:33:28.900 --> 00:33:30.910
from this refer from one of my
partners and I want to award

00:33:30.910 --> 00:33:33.590
them some percentage of that fee
since I made so much money

00:33:33.590 --> 00:33:36.020
only giving Google 5%, right?

00:33:36.020 --> 00:33:39.340
So now then basically you
can have these sales.

00:33:39.340 --> 00:33:40.070
You can have discounts.

00:33:40.070 --> 00:33:41.090
You can have refers.

00:33:41.090 --> 00:33:42.110
You can put whatever
you want in there.

00:33:42.110 --> 00:33:44.140
And you can structure that
information however you want

00:33:44.140 --> 00:33:46.790
as long as it encodes
and decodes to JSON.

00:33:46.790 --> 00:33:50.260
So if you want to but some other
binary blob in there and

00:33:50.260 --> 00:33:53.510
just encode it as a string,
that's fine.

00:33:53.510 --> 00:33:55.870
Now, I'm going to wrap up with
that, and bring Amit up here

00:33:55.870 --> 00:33:57.420
to finish this thing up.

00:33:57.420 --> 00:33:58.670
Thank you.

00:34:03.078 --> 00:34:06.240
AMIT FULAY: Thanks, Luke
and Mikhail and Jake.

00:34:06.240 --> 00:34:08.785
Hopefully that gives you a sense
of what the experience

00:34:08.785 --> 00:34:11.360
is, what the API
set looks like.

00:34:11.360 --> 00:34:14.380
Just to quickly recap simplicity
has been a core

00:34:14.380 --> 00:34:19.290
focus in all aspects of the
product that we've built, API,

00:34:19.290 --> 00:34:22.949
user experience, as
well as pricing.

00:34:22.949 --> 00:34:24.330
You can get started today.

00:34:24.330 --> 00:34:26.489
There's a short URL for
you to remember.

00:34:26.489 --> 00:34:30.040
That's the home page for
in-app payments.

00:34:30.040 --> 00:34:33.370
If you already have an account
you can sign in or you can

00:34:33.370 --> 00:34:35.030
create a new account.

00:34:35.030 --> 00:34:38.870
API is available for
you to play with.

00:34:38.870 --> 00:34:41.219
The documentation
is available.

00:34:41.219 --> 00:34:44.969
We have a Google group that we
will be actively monitoring,

00:34:44.969 --> 00:34:47.070
including the engineering
and the product team.

00:34:47.070 --> 00:34:50.110
So if you have questions, you
have feedback, please

00:34:50.110 --> 00:34:51.550
do send it to us.

00:34:51.550 --> 00:34:55.380
Once again, the hope is we can
fill the gaps in anything that

00:34:55.380 --> 00:34:59.020
you think is missing, give you
some lead time to integrate

00:34:59.020 --> 00:35:02.690
all of your apps with this
new payments platform.

00:35:02.690 --> 00:35:06.500
And come summer let delight
users and make some money.

00:35:06.500 --> 00:35:11.107
Thank you

00:35:11.107 --> 00:35:13.970
If you have questions, please
go up to the mike.

00:35:13.970 --> 00:35:15.150
Mikhail, Luke you want
to come here.

00:35:15.150 --> 00:35:20.810
We can answer any questions
you have. Please?

00:35:20.810 --> 00:35:21.840
AUDIENCE: Hi.

00:35:21.840 --> 00:35:24.120
I have a couple of places
actually, and just looking at

00:35:24.120 --> 00:35:26.156
it, can you hear me?

00:35:26.156 --> 00:35:29.668
AMIT FULAY: Yes, if you
come a little closer.

00:35:29.668 --> 00:35:31.430
AUDIENCE: So I have a
couple of questions.

00:35:31.430 --> 00:35:36.980
I can see in the URL that
if somehow a brother to

00:35:36.980 --> 00:35:39.080
Google check out.

00:35:39.080 --> 00:35:47.530
Is that also why the postback
for the yes or no pretty much

00:35:47.530 --> 00:35:51.420
when I send the payment yes or
no it's still asynchronous?

00:35:51.420 --> 00:35:53.770
Why can't I just get that reply
right there instead of

00:35:53.770 --> 00:35:57.130
me trying to identify the just
like any kind of credit card

00:35:57.130 --> 00:35:59.980
processing, pretty much like
in a gateway process.

00:35:59.980 --> 00:36:01.820
Is that is that also
why that is?

00:36:01.820 --> 00:36:04.030
AMIT FULAY: Okay, so first let
me summarize the questions.

00:36:04.030 --> 00:36:04.960
There's two parts to
your question.

00:36:04.960 --> 00:36:05.530
AUDIENCE: Yeah Yes, exactly.

00:36:05.530 --> 00:36:08.780
AMIT FULAY: The first part is,
is it still check out UC check

00:36:08.780 --> 00:36:11.250
out in the URL somewhere,
and the second was is it

00:36:11.250 --> 00:36:12.310
asynchronous or not?

00:36:12.310 --> 00:36:19.130
AUDIENCE: Yes because in that
demo the server gets a post

00:36:19.130 --> 00:36:21.370
which pretty much says whether
or not the transaction was

00:36:21.370 --> 00:36:23.660
good or not, instead
of me getting it at

00:36:23.660 --> 00:36:25.650
the point of purchase.

00:36:25.650 --> 00:36:30.300
So there's this flow that's
synchronous, and then there's

00:36:30.300 --> 00:36:32.240
the flow that's asynchronous
that's happening in the

00:36:32.240 --> 00:36:35.750
background that I have to
somehow poll before I give

00:36:35.750 --> 00:36:36.560
access to something.

00:36:36.560 --> 00:36:40.340
If I had that synchronously
then it's right there.

00:36:40.340 --> 00:36:40.930
It happens right there.

00:36:40.930 --> 00:36:42.500
AMIT FULAY: That's a great
question, so let me answer the

00:36:42.500 --> 00:36:43.920
first part and I'll let Mikhail

00:36:43.920 --> 00:36:45.200
answer the second part.

00:36:45.200 --> 00:36:49.010
As far as check out is
concerned, so I showed in the

00:36:49.010 --> 00:36:51.810
diagram the whole Google
payments infrastructure.

00:36:51.810 --> 00:36:53.580
Check out is also built
on top of that.

00:36:53.580 --> 00:36:56.280
Check out was a product that was
tailored towards physical

00:36:56.280 --> 00:36:58.420
goods, shipping goods,
that e-commerce wave

00:36:58.420 --> 00:36:59.810
that I talked about.

00:36:59.810 --> 00:37:03.760
And we're taking that payments
kind of platform and building

00:37:03.760 --> 00:37:04.910
and innovating on top that.

00:37:04.910 --> 00:37:07.580
So you're seeing in-app payments
being the first kind

00:37:07.580 --> 00:37:09.020
of incarnation.

00:37:09.020 --> 00:37:11.400
Check out was the older one for
the physical goods, and

00:37:11.400 --> 00:37:14.530
you'll see some more offerings
coming from us in the future.

00:37:14.530 --> 00:37:16.590
As far as the synchronous
transactions, I'll let Mikhail

00:37:16.590 --> 00:37:17.085
answer that.

00:37:17.085 --> 00:37:20.060
MIKHAIL SEREGINE: Yes, so
regarding the synchronous

00:37:20.060 --> 00:37:22.910
transactions, I think we
actually made it as close to

00:37:22.910 --> 00:37:26.960
synchronous as possible in
JavaScript So when you open

00:37:26.960 --> 00:37:29.890
the payment screen you don't
want that buy item call you

00:37:29.890 --> 00:37:31.780
first make to be synchronous
because you don't want it to

00:37:31.780 --> 00:37:33.700
block the whole thread.

00:37:33.700 --> 00:37:37.600
And so that's why we had to make
the JavaScript call backs

00:37:37.600 --> 00:37:39.770
on the other side be call backs
instead of just the

00:37:39.770 --> 00:37:41.670
return of that call.

00:37:41.670 --> 00:37:44.560
The reason it's very close to
synchronous is because that

00:37:44.560 --> 00:37:46.710
server post back is guaranteed
to finish before the

00:37:46.710 --> 00:37:48.330
JavaScript call backs
are invoked.

00:37:48.330 --> 00:37:50.020
So you actually don't have
to do the polling.

00:37:50.020 --> 00:37:51.840
You can just check at the
time of the call back.

00:37:55.011 --> 00:37:56.350
AMIT FULAY: Yes please
go ahead.

00:37:56.350 --> 00:37:58.980
Next question?

00:37:58.980 --> 00:38:03.140
AUDIENCE: So this is cool, but
what if I mean, I like how

00:38:03.140 --> 00:38:06.490
fast it goes, but what if my
users don't want quite that

00:38:06.490 --> 00:38:07.200
experience?

00:38:07.200 --> 00:38:10.050
You know the problem with kids
using daddy's credit card for

00:38:10.050 --> 00:38:12.290
too fast of an in-app
purchase.

00:38:12.290 --> 00:38:15.230
Or the reverse of that, what if
there's a user time out, if

00:38:15.230 --> 00:38:17.350
the user gets up and leaves and
comes back and completes

00:38:17.350 --> 00:38:19.600
his transaction half
an hour later.

00:38:19.600 --> 00:38:21.380
How do those kind of cases--

00:38:21.380 --> 00:38:22.070
AMIT FULAY: It's a
great question.

00:38:22.070 --> 00:38:27.080
So let me to repeat for
the recording here.

00:38:27.080 --> 00:38:29.840
It sometimes goes too fast. What
happens to users who are

00:38:29.840 --> 00:38:33.410
probably not trained, do they
end up making purchases when

00:38:33.410 --> 00:38:34.200
they don't even realize it?

00:38:34.200 --> 00:38:36.910
I think that's the question,
and that's a fair point.

00:38:36.910 --> 00:38:40.680
We did think about this, and if
you there is today in the

00:38:40.680 --> 00:38:44.470
payments experience an
acknowledgement, a complete.

00:38:44.470 --> 00:38:49.190
The user has to explicitly agree
to buy an item before

00:38:49.190 --> 00:38:51.070
the purchase completes.

00:38:51.070 --> 00:38:54.760
We had talked about coming up
with a model that's only

00:38:54.760 --> 00:38:56.010
single click.

00:38:56.010 --> 00:39:00.570
So you basically click on
an item and you get it.

00:39:00.570 --> 00:39:02.080
You don't even have
to acknowledge if

00:39:02.080 --> 00:39:04.230
you trust that developer.

00:39:04.230 --> 00:39:07.390
So there is kind of a fine
balance, and this is something

00:39:07.390 --> 00:39:10.930
I think will have to
evolve the model

00:39:10.930 --> 00:39:13.520
as we get more feedback.

00:39:13.520 --> 00:39:15.040
But we have kept this
experience.

00:39:15.040 --> 00:39:20.040
It is kind of two step simply to
kind of avoid that problem.

00:39:20.040 --> 00:39:21.980
MIKHAIL SEREGINE: And just to
add a little bit to that, I

00:39:21.980 --> 00:39:25.620
think that's one of the things
we're refining during this

00:39:25.620 --> 00:39:28.075
trial period where you guys are
integrating and asking us

00:39:28.075 --> 00:39:28.590
these questions.

00:39:28.590 --> 00:39:30.690
So that was an issue
that came up.

00:39:30.690 --> 00:39:34.130
We these steps that Amit
described to address them, and

00:39:34.130 --> 00:39:36.280
we are thinking about
doing more things.

00:39:36.280 --> 00:39:38.430
LUKE BAYES: And to add to that,
I think there's the

00:39:38.430 --> 00:39:41.250
expire field as well, so
developer to developer.

00:39:41.250 --> 00:39:43.850
Control that to some extent?

00:39:43.850 --> 00:39:45.082
How long their signatures
are valid, for example?

00:39:45.082 --> 00:39:48.260
MIKHAIL SEREGINE: Yes so you can
the developers have some

00:39:48.260 --> 00:39:52.050
control over how long those
purchase tokens are valid.

00:39:52.050 --> 00:39:55.982
So they're valid indefinitely.

00:39:55.982 --> 00:39:59.480
AUDIENCE: Yes, okay, so
do you have any--

00:39:59.480 --> 00:40:01.760
since you didn't talk about it,
I'm going to assume that

00:40:01.760 --> 00:40:05.366
there's no support for a
subscription model then?

00:40:05.366 --> 00:40:07.570
AMIT FULAY: So the question
is is there support for

00:40:07.570 --> 00:40:08.780
subscription model?

00:40:08.780 --> 00:40:12.100
We don't have in the product
we are launching today.

00:40:12.100 --> 00:40:14.650
That's something that we
are going to build

00:40:14.650 --> 00:40:16.045
in the coming months.

00:40:16.045 --> 00:40:16.960
AUDIENCE: Okay.

00:40:16.960 --> 00:40:21.530
And do you also have APIs and
such so that since you're

00:40:21.530 --> 00:40:27.330
handling the payment and such,
do you have APIs avaliable so

00:40:27.330 --> 00:40:33.630
that we could query what is the
transaction history of a

00:40:33.630 --> 00:40:37.530
given user so that we don't have
to keep any logging on

00:40:37.530 --> 00:40:40.010
our end as far as what
happened and who paid

00:40:40.010 --> 00:40:42.560
what and all that?

00:40:42.560 --> 00:40:43.810
MIKHAIL SEREGINE: Not
at this time.

00:40:47.962 --> 00:40:50.970
AUDIENCE: Hello, I have a
question about the revelation

00:40:50.970 --> 00:40:56.500
with Android purchase and what
if we have the same code base

00:40:56.500 --> 00:41:02.790
for Chrome app and in JavaScript
and a Android app

00:41:02.790 --> 00:41:06.390
in a package like phone
gap or something?

00:41:06.390 --> 00:41:10.200
Can we use that or are we
supposed to use two different

00:41:10.200 --> 00:41:10.920
payment system?

00:41:10.920 --> 00:41:14.080
AMIT FULAY: Yes, so the question
is how does it relate

00:41:14.080 --> 00:41:17.360
to Android app, if I were
to paraphrase that.

00:41:17.360 --> 00:41:19.240
Actually I see some of the folks
leaving so I'm going to

00:41:19.240 --> 00:41:23.480
interrupt the answer one minute,
and we do have some

00:41:23.480 --> 00:41:26.130
special session t-shirts that
you should collect on your way

00:41:26.130 --> 00:41:29.230
out if you are leaving.

00:41:29.230 --> 00:41:31.426
But coming back to the question,
Android app, which

00:41:31.426 --> 00:41:32.440
is the mobile app.

00:41:32.440 --> 00:41:36.070
So there's a couple of kind of
clarifications I'll make,

00:41:36.070 --> 00:41:39.600
which is we're using the same
underlying payments

00:41:39.600 --> 00:41:40.600
infrastructure.

00:41:40.600 --> 00:41:43.790
And when I talked about that
account, the user base that

00:41:43.790 --> 00:41:47.110
has transacted on any of these
properties that kind of comes

00:41:47.110 --> 00:41:48.200
with along.

00:41:48.200 --> 00:41:51.240
So the user that's an Android
app that created an account

00:41:51.240 --> 00:41:54.670
there, that's applicable here.

00:41:54.670 --> 00:41:55.760
They have single signing.

00:41:55.760 --> 00:41:57.160
So as far as the payments
underlying

00:41:57.160 --> 00:42:00.220
infrastructure that is shared.

00:42:00.220 --> 00:42:04.290
Now, mobile and a pure
web, they are

00:42:04.290 --> 00:42:06.330
inherently different models.

00:42:06.330 --> 00:42:10.530
You see that difference between
Chrome web store and

00:42:10.530 --> 00:42:12.880
mobile specific marketplaces.

00:42:12.880 --> 00:42:15.490
And so the pricing structure
will be what

00:42:15.490 --> 00:42:19.160
applies to either case.

00:42:19.160 --> 00:42:20.182
Yes, please.

00:42:20.182 --> 00:42:22.880
AUDIENCE: This is a question to
add on to the first person.

00:42:22.880 --> 00:42:26.930
So if of call back to the server
is synchronous right So

00:42:26.930 --> 00:42:30.500
what happens if the server
end we cannot handle it.

00:42:30.500 --> 00:42:34.360
For example like our game server
may be overloaded.

00:42:34.360 --> 00:42:37.510
So you send this to us, like
we cannot deliver the good

00:42:37.510 --> 00:42:39.920
because like that there's some
issue with the system.

00:42:39.920 --> 00:42:42.630
Is the transaction comes through
that completed or is

00:42:42.630 --> 00:42:44.170
the transaction--

00:42:44.170 --> 00:42:46.640
or do we have to do something
as to tell is that we're

00:42:46.640 --> 00:42:48.505
having some Issues

00:42:48.505 --> 00:42:49.340
AMIT FULAY: Yes, please.

00:42:49.340 --> 00:42:50.660
Could you please repeat
the question?

00:42:50.660 --> 00:42:52.680
MIKHAIL SEREGINE: The question
was what happens if you

00:42:52.680 --> 00:42:55.870
couldn't acknowledge the post
back or if you return an error

00:42:55.870 --> 00:42:57.705
instead of a success on that
post bask acknowledgement.

00:42:57.705 --> 00:42:59.015
LUKE BAYES: And/or a time out.

00:42:59.015 --> 00:43:00.550
MIKHAIL SEREGINE:
Or a time out.

00:43:00.550 --> 00:43:04.670
And the answer is that at that
point the buyer is still

00:43:04.670 --> 00:43:06.530
looking at the payment screen
and we show them that we could

00:43:06.530 --> 00:43:10.835
not deliver the item and that
that order will be cancelled.

00:43:10.835 --> 00:43:13.760
AUDIENCE: Can I do something
like a return to using the

00:43:13.760 --> 00:43:17.450
transaction is completed on my
end but it's going to later to

00:43:17.450 --> 00:43:19.300
deliver to the user?

00:43:19.300 --> 00:43:22.980
MIKHAIL SEREGINE: No, we want
the user experience to be

00:43:22.980 --> 00:43:24.870
either successful
or a failure.

00:43:24.870 --> 00:43:26.910
So that if they want to get the
purchase later they just

00:43:26.910 --> 00:43:29.160
have to go again and
try it again.

00:43:29.160 --> 00:43:32.100
AUDIENCE: Okay, so what would
you suggest in the case of

00:43:32.100 --> 00:43:34.670
like a massive sale,
like let's say the

00:43:34.670 --> 00:43:35.450
game is really popular.

00:43:35.450 --> 00:43:40.086
They're doing a flash sale for
like five minute or an hour?

00:43:40.086 --> 00:43:42.510
LUKE BAYES: You should host
your app on app engine.

00:43:42.510 --> 00:43:43.760
[LAUGHTER]

00:43:46.929 --> 00:43:49.770
MIKHAIL SEREGINE: So in order,
if the users can't get the

00:43:49.770 --> 00:43:52.970
thing they're buying,
then that's a

00:43:52.970 --> 00:43:53.800
part of the same problem.

00:43:53.800 --> 00:43:56.840
Is if your app is overloaded
they might not even be able to

00:43:56.840 --> 00:43:58.170
get to the purchase screen.

00:43:58.170 --> 00:44:01.620
So if that part of app works
then the postback handling

00:44:01.620 --> 00:44:02.370
should also work.

00:44:02.370 --> 00:44:04.050
LUKE BAYES: And the truth is
this is an in-app experience.

00:44:04.050 --> 00:44:07.450
So this is a user who was in
your app, let's use a game as

00:44:07.450 --> 00:44:07.950
an example.

00:44:07.950 --> 00:44:10.030
So they're in the and they'e
just they're getting

00:44:10.030 --> 00:44:11.860
frustrated in Angry Birds
and they can't.

00:44:11.860 --> 00:44:14.390
They want that eagle and they
want to do it, and they click

00:44:14.390 --> 00:44:17.760
buy, and then you want to tell
them no, you can't have it for

00:44:17.760 --> 00:44:19.170
like a day or two.

00:44:19.170 --> 00:44:21.520
So in this case because we're
in-app it's not like something

00:44:21.520 --> 00:44:24.040
you're buying that might ship
tomorrow from Amazon It's

00:44:24.040 --> 00:44:24.920
something they want right now.

00:44:24.920 --> 00:44:26.150
They went immediate
gratification.

00:44:26.150 --> 00:44:27.900
So we're thinking of it from
the user's perspective.

00:44:27.900 --> 00:44:29.460
They either want it or
they don't want to

00:44:29.460 --> 00:44:30.820
be charged for it.

00:44:30.820 --> 00:44:32.600
And this is something we
learned at Jambool,

00:44:32.600 --> 00:44:33.420
at Social Gold was--

00:44:33.420 --> 00:44:34.280
AUDIENCE: But I'm not
talking about day.

00:44:34.280 --> 00:44:36.670
I'm talking about like
let's say five minute

00:44:36.670 --> 00:44:37.505
or something shorter.

00:44:37.505 --> 00:44:40.820
It's just not like 30 seconds.

00:44:40.820 --> 00:44:42.300
LUKE BAYES: We should probably
talk about that.

00:44:42.300 --> 00:44:42.760
So that's actually--

00:44:42.760 --> 00:44:43.290
AUDIENCE: Yes, okay Thank you.

00:44:43.290 --> 00:44:45.282
I don't want to talk.

00:44:45.282 --> 00:44:46.525
AMIT FULAY: The gentleman
in the back?

00:44:46.525 --> 00:44:49.780
AUDIENCE: So what about support,
like if there's a to

00:44:49.780 --> 00:44:54.250
user has any need dispute,
anything that does the poll

00:44:54.250 --> 00:44:58.310
goes to direct, goes to Google
first or go to like the app

00:44:58.310 --> 00:44:58.705
seller first?

00:44:58.705 --> 00:45:02.600
AMIT FULAY: So the question
is the Google group, who's

00:45:02.600 --> 00:45:03.810
supporting that.

00:45:03.810 --> 00:45:07.085
AUDIENCE: No like the
user support.

00:45:07.085 --> 00:45:08.270
AMIT FULAY: Oh the
user support.

00:45:08.270 --> 00:45:09.400
AUDIENCE: Support
for the user.

00:45:09.400 --> 00:45:10.110
AMIT FULAY: I see.

00:45:10.110 --> 00:45:14.600
So as far as the payments
dispute what happened to my

00:45:14.600 --> 00:45:15.230
credit card?

00:45:15.230 --> 00:45:16.420
It didn't go through.

00:45:16.420 --> 00:45:20.330
that is all using the existing
support mechanisms that we

00:45:20.330 --> 00:45:21.760
have with Google payments.

00:45:21.760 --> 00:45:25.860
That's is also with check out,
so we will have the same

00:45:25.860 --> 00:45:28.620
support team, sensible same
support forums. that you'll

00:45:28.620 --> 00:45:29.550
get for the end user.

00:45:29.550 --> 00:45:30.530
So you'll get that.

00:45:30.530 --> 00:45:31.550
LUKE BAYES: But we're
growing that.

00:45:31.550 --> 00:45:33.970
AMIT FULAY: Yes, and we're
staffing it as we get more

00:45:33.970 --> 00:45:34.430
developers.

00:45:34.430 --> 00:45:36.400
So does that answer
your Question

00:45:36.400 --> 00:45:37.630
AUDIENCE: Yes.

00:45:37.630 --> 00:45:41.140
And a second question is
how to handle refund?

00:45:41.140 --> 00:45:42.570
AMIT FULAY: How do you
handle refunds?

00:45:42.570 --> 00:45:43.690
AUDIENCE: Yeah.

00:45:43.690 --> 00:45:46.430
AMIT FULAY: So we are actually
working through the whole

00:45:46.430 --> 00:45:48.750
refund chargeback policy.

00:45:48.750 --> 00:45:50.560
If you subscribe to the
groups we'll do

00:45:50.560 --> 00:45:52.156
an update very shortly.

00:45:52.156 --> 00:45:56.440
AUDIENCE: Okay, and one more
question is that so you say

00:45:56.440 --> 00:46:00.600
that the flash API is not yet
available but I think Plants

00:46:00.600 --> 00:46:04.540
Versus Zombies is a flash game
and how do they integrate?

00:46:04.540 --> 00:46:07.460
AMIT FULAY: So the question is
flash API is not available,

00:46:07.460 --> 00:46:09.650
Plants Versus Zombies
is a flash game.

00:46:09.650 --> 00:46:11.900
So Jake, I can answer
on his behalf.

00:46:11.900 --> 00:46:16.400
I think they are using PopCap
has moved to using am HTML

00:46:16.400 --> 00:46:18.040
based payments flow.

00:46:18.040 --> 00:46:19.830
So They are using the HTML
version, JavaScript

00:46:19.830 --> 00:46:20.590
version of the API.

00:46:20.590 --> 00:46:23.120
LUKE BAYES: And I can answer
that a little bit, too.

00:46:23.120 --> 00:46:26.650
Many flash games use a window
mode setting when they embed

00:46:26.650 --> 00:46:29.350
their script that draws directly
to the screen.

00:46:29.350 --> 00:46:33.380
And some flash games don't,
some flash games do.

00:46:33.380 --> 00:46:36.080
Depending how that setting is
done, you may or may not be

00:46:36.080 --> 00:46:39.630
able to overlay an iframe
above a flash--

00:46:39.630 --> 00:46:40.840
a running flash application.

00:46:40.840 --> 00:46:43.970
And so our flash API is
specifically and especially

00:46:43.970 --> 00:46:46.220
for those games or applications
that cannot

00:46:46.220 --> 00:46:49.000
overlay an iframe and want to
have the application, all the

00:46:49.000 --> 00:46:50.550
application handling
done directly in

00:46:50.550 --> 00:46:51.400
action script three.

00:46:51.400 --> 00:46:54.900
But you can, if you're in the
case where you can overlay,

00:46:54.900 --> 00:46:57.280
you can pretty easily use
external interface or some

00:46:57.280 --> 00:47:00.150
other means to talk to
JavaScript on the page and

00:47:00.150 --> 00:47:02.905
load iframe above your app and
let it close and get the call

00:47:02.905 --> 00:47:04.215
backs that way.

00:47:08.670 --> 00:47:10.190
AMIT FULAY: It should
be on now.

00:47:10.190 --> 00:47:10.475
Try.

00:47:10.475 --> 00:47:10.980
LUKE BAYES: Try now.

00:47:10.980 --> 00:47:12.030
AUDIENCE: Hello.

00:47:12.030 --> 00:47:12.720
Yes.

00:47:12.720 --> 00:47:16.820
So basically they are using as
standard interface code to

00:47:16.820 --> 00:47:18.650
invoke the JavaScript,
yes, is how they--

00:47:18.650 --> 00:47:20.020
LUKE BAYES: I believe so.

00:47:20.020 --> 00:47:21.200
Is it?

00:47:21.200 --> 00:47:22.010
I assume that's true.

00:47:22.010 --> 00:47:23.340
Yes, I'm getting
nods over here.

00:47:23.340 --> 00:47:24.250
That's sounds right.

00:47:24.250 --> 00:47:24.855
for this demo, yes.

00:47:24.855 --> 00:47:29.220
AMIT FULAY: And the PopCap, a
couple of folks from PopCap

00:47:29.220 --> 00:47:31.630
are also here so you can, if
you have more follow-up

00:47:31.630 --> 00:47:33.065
questions, feel free
to ask them.

00:47:33.065 --> 00:47:34.420
AUDIENCE: All right. thank you

00:47:34.420 --> 00:47:35.426
LUKE BAYES: Thank you.

00:47:35.426 --> 00:47:37.030
AMIT FULAY: We'll take a
question in the back.

00:47:37.030 --> 00:47:38.480
AUDIENCE: How do I get it?

00:47:38.480 --> 00:47:39.920
AMIT FULAY: How do I get what?

00:47:39.920 --> 00:47:41.915
AUDIENCE: How do I
sign up to be a--

00:47:41.915 --> 00:47:44.890
AMIT FULAY: Ah, so there's
a URL here to sign up.

00:47:44.890 --> 00:47:47.150
And probably this is the one on
the top that you're going

00:47:47.150 --> 00:47:47.920
to remember.

00:47:47.920 --> 00:47:50.640
So go to goo.gl/5percentfees
it will take you

00:47:50.640 --> 00:47:52.082
to the sign up page.

00:47:52.082 --> 00:47:52.910
AUDIENCE: Cool.

00:47:52.910 --> 00:47:54.775
And is there a minimum browser
level for this?

00:47:54.775 --> 00:47:58.320
I mean does this support like
IOS three or Android 2.0 or

00:47:58.320 --> 00:47:59.400
IE7 or that kind of stuff?

00:47:59.400 --> 00:48:00.740
AMIT FULAY: So the
question is, is

00:48:00.740 --> 00:48:01.760
there a minimum browser?

00:48:01.760 --> 00:48:03.940
So we are supporting all
standard browsers.

00:48:03.940 --> 00:48:05.830
It's in our documentation.

00:48:05.830 --> 00:48:12.120
I believe it's IE7 and above,
FireFox 3.0 Android browser,

00:48:12.120 --> 00:48:15.640
Safari, so we'll support
all standard browsers.

00:48:15.640 --> 00:48:17.740
LUKE BAYES: I think we're
tailoring the experience right

00:48:17.740 --> 00:48:19.880
now for the desktop,
to clarify that.

00:48:19.880 --> 00:48:23.210
AMIT FULAY: Yes.

00:48:23.210 --> 00:48:26.020
AUDIENCE: So I wanted to ask a
follow-up question about the

00:48:26.020 --> 00:48:26.880
Android thing?

00:48:26.880 --> 00:48:30.800
So I understood Android store
has a different cut, and there

00:48:30.800 --> 00:48:32.670
whole lots of reasons
for that.

00:48:32.670 --> 00:48:36.160
But if I do an Android app and I
use your API to do an in-app

00:48:36.160 --> 00:48:38.940
purchase, are you going
to disable that?

00:48:38.940 --> 00:48:41.350
Are you going to take a
different cut because it's an

00:48:41.350 --> 00:48:41.490
Android app?

00:48:41.490 --> 00:48:42.966
How's that going to work?

00:48:42.966 --> 00:48:46.780
AMIT FULAY: So the question is
there are different models of

00:48:46.780 --> 00:48:48.150
Android on the web.

00:48:48.150 --> 00:48:51.340
What happens if you build an
Android app and use our API?

00:48:51.340 --> 00:48:54.560
You cannot use this API for
native Android apps.

00:48:54.560 --> 00:48:57.410
Anything that's a web app and
if you're on the phone and

00:48:57.410 --> 00:49:00.040
you're using the web and you're
getting to your app

00:49:00.040 --> 00:49:01.590
through the web, it's not
a native app, then you

00:49:01.590 --> 00:49:02.830
can use this API.

00:49:02.830 --> 00:49:05.230
So there's a distinction between
native and web apps.

00:49:05.230 --> 00:49:07.390
This platform is for
wherever web apps.

00:49:07.390 --> 00:49:09.183
AUDIENCE: Okay, thanks.

00:49:09.183 --> 00:49:11.155
AMIT FULAY: Yes,
next question?

00:49:11.155 --> 00:49:15.460
AUDIENCE: When will you make
this available for

00:49:15.460 --> 00:49:16.905
international developers?

00:49:16.905 --> 00:49:19.700
AMIT FULAY: Yes that's a great
question, when will you make

00:49:19.700 --> 00:49:21.890
it available for international
developers?

00:49:21.890 --> 00:49:24.590
I mentioned we're going
to go live in summer.

00:49:24.590 --> 00:49:28.330
At that point we'll support
all our international

00:49:28.330 --> 00:49:29.330
developers.

00:49:29.330 --> 00:49:31.790
So whatever Google payments
supports, I think I believe

00:49:31.790 --> 00:49:36.530
it's 21 countries, several
countries, so you can have 21

00:49:36.530 --> 00:49:39.650
different locations where
developers can sign up and

00:49:39.650 --> 00:49:41.670
have local currencies
and stuff like that.

00:49:41.670 --> 00:49:46.230
So the summer launch will have
the international component.

00:49:46.230 --> 00:49:46.695
Yes please go.

00:49:46.695 --> 00:49:51.390
AUDIENCE: Yes, obviously kind
of excited about this.

00:49:51.390 --> 00:49:54.770
You said that this was based on
the payments platform, so

00:49:54.770 --> 00:49:57.322
can we leverage our existing
checkout, the notifications,

00:49:57.322 --> 00:49:58.740
the signing, and all that?

00:49:58.740 --> 00:50:01.090
Or is this totally different?

00:50:01.090 --> 00:50:04.710
AMIT FULAY: So question is
can you leverage the

00:50:04.710 --> 00:50:05.165
notifications?

00:50:05.165 --> 00:50:06.420
AUDIENCE: Yes.

00:50:06.420 --> 00:50:09.980
Because you said that this was
somehow on top of that whole

00:50:09.980 --> 00:50:12.950
payments infrastructure, which
is where checkout is also

00:50:12.950 --> 00:50:14.500
based out of.

00:50:14.500 --> 00:50:18.440
Can we leverage existing
knowledge already about the

00:50:18.440 --> 00:50:21.460
API for checkout, for example,
like the notification?

00:50:21.460 --> 00:50:22.940
There's some similarity in there
and then the signing and

00:50:22.940 --> 00:50:26.072
all that, so just wondering?

00:50:26.072 --> 00:50:28.020
LUKE BAYES: It will
be similar, but

00:50:28.020 --> 00:50:28.840
it's not the same.

00:50:28.840 --> 00:50:33.030
So you will have to go do
this in-app integration.

00:50:33.030 --> 00:50:36.820
AMIT FULAY: I mean one other
focus has been that you don't

00:50:36.820 --> 00:50:39.930
have to worry about a lot of
concepts when you integrate.

00:50:39.930 --> 00:50:41.830
So in the check out classical
physical goods

00:50:41.830 --> 00:50:42.980
model you have carts.

00:50:42.980 --> 00:50:43.800
You have shipping.

00:50:43.800 --> 00:50:46.450
Taxes, You have to worry
about a lot of things.

00:50:46.450 --> 00:50:49.255
And the API actually hides
all of that complexity.

00:50:49.255 --> 00:50:53.220
It's basically price, currency
and description, and that's

00:50:53.220 --> 00:50:54.570
all you need to worry about.

00:50:54.570 --> 00:50:57.120
So our hope is you don't
have to use some of

00:50:57.120 --> 00:50:58.720
the different models.

00:50:58.720 --> 00:50:59.680
That's good.

00:50:59.680 --> 00:51:01.942
Gentleman in the back and then
I'll take your question.

00:51:01.942 --> 00:51:04.910
AUDIENCE: Which group of
international developers are

00:51:04.910 --> 00:51:06.060
going to get access to this?

00:51:06.060 --> 00:51:09.330
Is it going to be the ones that
can sell on Android or

00:51:09.330 --> 00:51:11.920
the ones that can sell
any Google checkout.

00:51:11.920 --> 00:51:14.640
Countries like Canada can't
do Google checkout yet.

00:51:14.640 --> 00:51:18.790
AMIT FULAY: So the question
is regarding Canada.

00:51:18.790 --> 00:51:21.610
I don't have an accurate answer
for you right now.

00:51:21.610 --> 00:51:24.080
But we will follow-up in
our groups postings

00:51:24.080 --> 00:51:25.300
so please do subscribe.

00:51:25.300 --> 00:51:28.520
And we'll actually publish a
detailed an international

00:51:28.520 --> 00:51:31.768
rollout plan.

00:51:31.768 --> 00:51:33.140
AUDIENCE: Yes.

00:51:33.140 --> 00:51:37.220
I have a vertical portal,
okay, website.

00:51:37.220 --> 00:51:40.740
So would it be possible to
implement the Google payments

00:51:40.740 --> 00:51:42.970
in that website?

00:51:42.970 --> 00:51:47.430
And in that case will it compete
with Google, PayPal,

00:51:47.430 --> 00:51:51.270
and all of the other
types of checkout

00:51:51.270 --> 00:51:52.950
that are in the market?

00:51:52.950 --> 00:51:55.860
AMIT FULAY: So I'll repeat
your question.

00:51:55.860 --> 00:51:58.750
You have a vertical website
where you want to integrate

00:51:58.750 --> 00:52:01.000
payments, and will this
platform work?

00:52:01.000 --> 00:52:02.060
Absolutely.

00:52:02.060 --> 00:52:04.980
As I said, this is not only
Chrome web store, for any web

00:52:04.980 --> 00:52:06.830
app on the web.

00:52:06.830 --> 00:52:09.410
So you can integrate
it no matter where

00:52:09.410 --> 00:52:12.050
your application resides.

00:52:12.050 --> 00:52:13.690
I'm not sure about the second
part of your question?

00:52:13.690 --> 00:52:17.320
AUDIENCE: Yes, the second part
is when you have the check out

00:52:17.320 --> 00:52:22.360
and if you can integrate this,
the Google app, and then you

00:52:22.360 --> 00:52:26.830
also have, for example, the
PayPal type payment, and then

00:52:26.830 --> 00:52:30.920
the user will have to choose
one of them to check out.

00:52:30.920 --> 00:52:36.560
So basically they are competing
and is the one who

00:52:36.560 --> 00:52:40.970
will decide will be the user
either to take the Google one

00:52:40.970 --> 00:52:42.310
or the PayPal one?

00:52:42.310 --> 00:52:43.020
AMIT FULAY: Yes, absolutely.

00:52:43.020 --> 00:52:45.690
So the question is if you have
competing payment options, and

00:52:45.690 --> 00:52:47.040
I think that's fair.

00:52:47.040 --> 00:52:49.580
There's nothing that precludes
you from doing that.

00:52:49.580 --> 00:52:52.960
You can have PayPal,
Amazon, Google.

00:52:52.960 --> 00:52:53.990
That's kind of a practice.

00:52:53.990 --> 00:52:55.880
A lot of websites accept
payments from different

00:52:55.880 --> 00:52:58.190
things, and it's up
to your users what

00:52:58.190 --> 00:52:58.750
they want to choose.

00:52:58.750 --> 00:52:59.826
So you can absolutely do that.

00:52:59.826 --> 00:53:01.540
LUKE BAYES: There is one
more thing to clarify.

00:53:01.540 --> 00:53:03.330
This is, and I don't think
it was made clear.

00:53:03.330 --> 00:53:06.120
This is for virtual
and digital goods.

00:53:06.120 --> 00:53:09.940
So if you have a website that
sells physical products to

00:53:09.940 --> 00:53:11.830
people that you mail to them,
then this is not appropriate

00:53:11.830 --> 00:53:12.890
API for you.

00:53:12.890 --> 00:53:15.440
So we certainly could be nest to
a PayPal button for virtual

00:53:15.440 --> 00:53:17.642
digital goods in an environment
like that.

00:53:17.642 --> 00:53:22.140
AUDIENCE: Will it develop
into that in the future?

00:53:22.140 --> 00:53:23.930
LUKE BAYES: We'll see how
the platform evolves.

00:53:27.253 --> 00:53:30.470
AUDIENCE: So i have a lot of
questions here, the first one

00:53:30.470 --> 00:53:33.450
is what kind of user
data we have?

00:53:33.450 --> 00:53:35.230
Like, can we get even
like user name

00:53:35.230 --> 00:53:38.200
or address, or anything?

00:53:38.200 --> 00:53:41.110
And the second one is like what
kind of user analytics

00:53:41.110 --> 00:53:43.440
you provide if we
use this API?

00:53:43.440 --> 00:53:44.971
Thanks.

00:53:44.971 --> 00:53:46.780
AMIT FULAY: So I'll repeat
the question.

00:53:46.780 --> 00:53:49.130
What kind of user data we
have so could you--

00:53:49.130 --> 00:53:52.815
AUDIENCE: If user purchase any
virtual good, right, I assume

00:53:52.815 --> 00:53:55.220
my system knows like what's the
first name and the last

00:53:55.220 --> 00:53:56.865
name and address and everything,
all right?

00:53:56.865 --> 00:54:01.130
So what kind of user data we
as like the vendor or the

00:54:01.130 --> 00:54:01.970
developer gets?

00:54:01.970 --> 00:54:03.050
AMIT FULAY: Yes.

00:54:03.050 --> 00:54:07.660
So the question is what of
user data that Google

00:54:07.660 --> 00:54:09.610
collection will be shared
with developers?

00:54:09.610 --> 00:54:10.445
AUDIENCE: Yes, exactly.

00:54:10.445 --> 00:54:14.610
AMIT FULAY: So that the data,
because it's very sensitive,

00:54:14.610 --> 00:54:15.600
so it's an NPAI.

00:54:15.600 --> 00:54:19.230
It's credentials, payments
credentials, address, name, we

00:54:19.230 --> 00:54:20.530
do not share this data--

00:54:20.530 --> 00:54:20.890
AUDIENCE: Okay.

00:54:20.890 --> 00:54:21.890
AMIT FULAY: with
any developer.

00:54:21.890 --> 00:54:24.620
AUDIENCE: Okay so then what
kind of like user

00:54:24.620 --> 00:54:26.580
analytics do we have?

00:54:26.580 --> 00:54:29.380
Like do you know, like, I
don't know, maybe to age

00:54:29.380 --> 00:54:35.370
between, like, 25 to 35 purchase
this item within the

00:54:35.370 --> 00:54:37.510
first month or something like
that, concerning analytics.

00:54:37.510 --> 00:54:40.120
AMIT FULAY: You're not looking
for a analytics with the

00:54:40.120 --> 00:54:41.180
demographic data.

00:54:41.180 --> 00:54:45.140
We don't have that today.

00:54:45.140 --> 00:54:48.230
Our analytics is basically
across the user base.

00:54:48.230 --> 00:54:50.580
It's anonymized so we basically
tell you how they

00:54:50.580 --> 00:54:50.870
are converting.

00:54:50.870 --> 00:54:51.663
AUDIENCE: Exactly.

00:54:51.663 --> 00:54:52.076
Thanks.

00:54:52.076 --> 00:54:54.360
LUKE BAYES: And again, we have
our forums are open so we're

00:54:54.360 --> 00:54:56.330
hoping that questions, like
that, like you guys can help

00:54:56.330 --> 00:55:01.175
guide the product as we work
this summer over it.

00:55:01.175 --> 00:55:04.720
AMIT FULAY: Thank you for
your time and patience.

00:55:04.720 --> 00:55:06.720
I'm being asked to leave
and vacate the stage.

00:55:06.720 --> 00:55:07.080
Thanks.

00:55:07.080 --> 00:55:09.230
Thanks for joining us.

