WEBVTT
Kind: captions
Language: en

00:00:04.170 --> 00:00:10.120
&gt;&gt;Tor Norbye: I think we're live.
&gt;&gt;Xavier Ducrohet: Hello, welcome to our session

00:00:10.120 --> 00:00:15.360
on Android development tools. I am Xavier
Ducrohet. I am the tech lead for the Android

00:00:15.360 --> 00:00:18.680
development tools at Google.
&gt;&gt;Tor Norbye: And I am Tor Norbye. I work

00:00:18.680 --> 00:00:21.170
on the Android development tools and I work
for Xavier.

00:00:21.170 --> 00:00:26.869
&gt;&gt;Xavier Ducrohet: Before we start, I want
to mention this is live streamed, and so we

00:00:26.869 --> 00:00:30.980
will take some questions from Google moderator
at the end of this session, and also some

00:00:30.980 --> 00:00:35.440
live questions. So you have the link here
to go onto moderator and post some interesting

00:00:35.440 --> 00:00:43.230
questions and vote down the bad ones, please.
So today we are going to give you some demonstration

00:00:43.230 --> 00:00:48.150
of some of the latest feature that we have
worked on for the last three to six months.

00:00:48.150 --> 00:00:52.660
Unfortunately, we can't really show you everything
because there's just too much.

00:00:52.660 --> 00:00:58.799
We'll show you how those feature can appear
with best practices when doing Android development.

00:00:58.799 --> 00:01:02.769
And we will also show you some other feature
that we notice some developers don't really

00:01:02.769 --> 00:01:08.729
know about but are very useful. And we will
also show you some upcoming new features.

00:01:08.729 --> 00:01:14.251
So let's get started. So that's the agenda.
So the first thing I want to mention, I know

00:01:14.251 --> 00:01:18.369
as a quick introduction to the tools, first
thing, they are completely developed in the

00:01:18.369 --> 00:01:24.921
open. We work directly in the repository and
we accept contribution if they are good. So

00:01:24.921 --> 00:01:29.549
if you are interested, feel free to talk to
us.

00:01:29.549 --> 00:01:33.329
When we work on the development tools, we
are pretty agnostic in terms of environment.

00:01:33.329 --> 00:01:38.859
We want to make sure you guys can work whether
you use Linux, Mac or Windows. And in terms

00:01:38.859 --> 00:01:46.310
of IDE, also we are very flexible. So there
is support for general Android support for

00:01:46.310 --> 00:01:51.799
Eclipse, NetBeans and for IntelliJ. And of
course there is support for command line tool.

00:01:51.799 --> 00:01:54.719
We have an end-based built system where you
can just build your application from the command

00:01:54.719 --> 00:02:00.039
line, and it's very useful if you want to
do automatic build. And there's even support

00:02:00.039 --> 00:02:04.670
for instrumentation so you can do automated
testing from the command line, or of course

00:02:04.670 --> 00:02:10.200
through a server.
I mentioned all those IDEs. And we started

00:02:10.200 --> 00:02:14.510
with Eclipse, really, because we can't really
focus on all of them. But we are very happy

00:02:14.510 --> 00:02:21.349
that other people are actually dock support
for other IDEs, like IntelliJ has native support

00:02:21.349 --> 00:02:25.900
for Android. And when we work on the tools,
we try to make sure that we don't just code

00:02:25.900 --> 00:02:29.620
directly for Eclipse and just embed everything
there and it's one big application. We actually

00:02:29.620 --> 00:02:34.250
do a lot of small libraries that are reusable
so third-party tool vendor can actually do

00:02:34.250 --> 00:02:40.110
that and reuse them and reuse our code, and
it's under Apache so it's very easy to reuse.

00:02:40.110 --> 00:02:43.190
And of course some of those libraries are
reused also in the stand-alone application

00:02:43.190 --> 00:02:48.400
so if someone compiles with the end tool and
they don't want to use IDE, they can use some

00:02:48.400 --> 00:02:51.810
standard application to do debugging, profiling
and those kind of things.

00:02:51.810 --> 00:02:56.620
So on the Eclipse integration part, we are
trying to be as integrated as possible to

00:02:56.620 --> 00:03:01.290
be a good citizen to the Eclipse ecosystem.
So mostly, if you know how to use Eclipse,

00:03:01.290 --> 00:03:07.930
you should know how to use the tools for Eclipse.
We have basic project support, build, launch,

00:03:07.930 --> 00:03:13.099
debugging, all of that is directly integrated.
We don't have to care about all the plumbing

00:03:13.099 --> 00:03:17.440
that goes inside for you.
And we also have support for editors. As you

00:03:17.440 --> 00:03:22.640
may know, Android does a lot of different
XML files and we do provide some support for

00:03:22.640 --> 00:03:25.640
that, and we will talk about that a little
bit later.

00:03:25.640 --> 00:03:30.370
Some of the standard tools I talked about,
we tried to merge them into Eclipse so make

00:03:30.370 --> 00:03:34.200
sure they are integrated directly. And some
of them, like the Draw 9 Patch, is actually

00:03:34.200 --> 00:03:37.430
not there yet. We are working on it. At some
point.

00:03:37.430 --> 00:03:42.930
I mentioned editors. It is something where
we have gotten a lot of feedback that there

00:03:42.930 --> 00:03:48.900
are a lot of XML files and they are complicated
to know. There are a lot of attributes, a

00:03:48.900 --> 00:03:53.959
lot of specific values that need to go into
the attributes. And so in the past few months,

00:03:53.959 --> 00:03:56.340
really, we have really focused on improving
those editors.

00:03:56.340 --> 00:04:00.140
There are several different types. Some of
them, like the Android manifest, will show

00:04:00.140 --> 00:04:05.849
up like a form-based editor where you have
mostly some forms to just fill some values,

00:04:05.849 --> 00:04:09.989
text fields and things like that, but we also
try to make sure that there's always an XML

00:04:09.989 --> 00:04:15.409
version for that. And the original version
of the XML was just the basic Eclipse XML

00:04:15.409 --> 00:04:19.870
editor which is good but not really advanced.
And so we have done a lot of progress recently

00:04:19.870 --> 00:04:25.340
on that regarding content assist, quick fix,
quick assist, and all those features that

00:04:25.340 --> 00:04:31.410
you expect when you are an Eclipse user.
The other part -- The other type of editor

00:04:31.410 --> 00:04:34.380
really is WYSIWYG editor, and it's mostly
the layout editor.

00:04:34.380 --> 00:04:40.560
And I know a lot of you want to have a full,
high quality UI builder, so let's talk about

00:04:40.560 --> 00:04:43.790
that a little bit.
When you think about WYSIWYG editor, there's

00:04:43.790 --> 00:04:48.840
two different things. There's the interactivity
part, which we didn't really have until like

00:04:48.840 --> 00:04:53.960
six months ago, so we have been focusing a
lot on that and Tor will show you some things.

00:04:53.960 --> 00:04:59.041
The other part is the rendering. So we see
a lot of people who receive a new version

00:04:59.041 --> 00:05:05.650
of ADT, ADT 9, AD T10 and they say the rendering
is still broken, and that is completely normal

00:05:05.650 --> 00:05:08.350
because the rendering code is not in ADT at
all.

00:05:08.350 --> 00:05:13.500
So what we have is, each SDK component, for
example, the 1.5 SDK component, the 2.1 SDK

00:05:13.500 --> 00:05:19.010
component, the 3.0 SDK component, all those
come with their own rendering engine, and

00:05:19.010 --> 00:05:23.000
we do that for two reason. The first is there
is a lot of resource in Android. When you

00:05:23.000 --> 00:05:26.940
want to draw a button in Eclipse, you want
it to be drawn the same way as it's drawn

00:05:26.940 --> 00:05:31.040
in the device in terms of using the 9 Patch
that actually match that device.

00:05:31.040 --> 00:05:35.460
In fact, in Gingerbread we changed the look
of the buttons, and they changed again in

00:05:35.460 --> 00:05:39.550
the holographic theme in Honeycomb. So you
want to make sure whether you are rendering

00:05:39.550 --> 00:05:44.550
with 1.5 or 2.0 or 3.0, you get the right
button. So all the framework resources is

00:05:44.550 --> 00:05:48.620
packaged with each SDK component. So that's
the resource part.

00:05:48.620 --> 00:05:56.410
And the code part, where we actually -- So
we actually run part of the Android View framework

00:05:56.410 --> 00:06:02.030
inside Eclipse, or the view class, the widget
class, the pane canvas, all of that, we run

00:06:02.030 --> 00:06:07.550
that inside of Eclipse.
But below that, in Android on the device,

00:06:07.550 --> 00:06:10.501
there's actually a lot of native code that
we didn't want to bring into Eclipse, so we

00:06:10.501 --> 00:06:16.120
replaced that.
And so it's been a very long process. Before

00:06:16.120 --> 00:06:20.630
3.0, we had some version of replacing those
code and there's some issue when you have

00:06:20.630 --> 00:06:26.350
a class like paint or Canvas, it is half native
and half Java so replacing it completely was

00:06:26.350 --> 00:06:31.190
kind of difficult. So we have done a lot of
improvement in 3.0 to really try to be much

00:06:31.190 --> 00:06:35.830
better in terms of supporting a lot of different
type of rendering, a lot of classes, like

00:06:35.830 --> 00:06:40.520
the path class was not supported at all in
previous version. It refused it inside your

00:06:40.520 --> 00:06:44.710
custom view or inside some widget that uses
it by default. It would just crash inside

00:06:44.710 --> 00:06:47.880
Eclipse.
We have done a lot of progress inside 3.0,

00:06:47.880 --> 00:06:51.250
and even more progress in 3.1 that released
yesterday. We are planning to keep improving

00:06:51.250 --> 00:06:56.310
that and then to go back and rerelease new
versions -- new revisions, actually, of earlier

00:06:56.310 --> 00:07:02.990
SDK to port back those improvements so the
rendering in Eclipse will look good in Eclipse

00:07:02.990 --> 00:07:07.580
no matter what version of the rendering library
you select.

00:07:07.580 --> 00:07:12.010
And with that, we are going to give you a
demo.

00:07:12.010 --> 00:07:17.530
&gt;&gt;Tor Norbye: All right. Can we switch to
the Mac?

00:07:17.530 --> 00:07:25.210
Okay. So this is our new layout WYSIWYG editor.
The way you operate with this editor is drag

00:07:25.210 --> 00:07:28.940
and drop. So you can go to the palette, you
can drag something. And as you can see, as

00:07:28.940 --> 00:07:33.680
I am dragging over the canvas, I am getting
some feedback. You can see over on the right

00:07:33.680 --> 00:07:36.500
there's an outline telling me what the drop
target is.

00:07:36.500 --> 00:07:42.650
Once I drop it, I can also obviously drag
around to reconfigure this view, and I can

00:07:42.650 --> 00:07:47.930
even drag over to the outline if I'm trying
to target a specific position or a small drop

00:07:47.930 --> 00:07:53.900
target or something. And obviously we have
unlimited undo, so let me clean that up again.

00:07:53.900 --> 00:07:59.660
On the left here you see a palette, and this
is giving you a preview of what these widgets

00:07:59.660 --> 00:08:04.990
look like for the current theme. So if I switch
to some other layouts here that have different

00:08:04.990 --> 00:08:10.390
theme, you can see the palette now looks -- you
can see sort of a holo theme. Here is another

00:08:10.390 --> 00:08:15.920
customized version of the theme.
So the palette updates to show you what you

00:08:15.920 --> 00:08:22.080
will get. And I can click on a category, so
the time and date here, you can see the widgets

00:08:22.080 --> 00:08:30.280
in that category or text fields and so forth.
One category I want to point out in particular

00:08:30.280 --> 00:08:35.960
is the text fields category. If you went to
the ProTips session yesterday, you learned

00:08:35.960 --> 00:08:39.629
it is very important to set the input type
for your text fields. So what we have done

00:08:39.629 --> 00:08:44.000
here is we have packaged a text field with
a lot of different configurations for different

00:08:44.000 --> 00:08:46.800
input types.
So if you are going to put -- if you are going

00:08:46.800 --> 00:08:50.300
to ask the user for a phone number, for example,
don't just drop a plain text field there.

00:08:50.300 --> 00:08:54.910
Drop the phone number text field much that's
going to set the input type so that when the

00:08:54.910 --> 00:08:58.110
user gets an on-screen keyboard, it's not
going to have characters. It's going to have

00:08:58.110 --> 00:09:03.470
numbers, for example.
The last category I want to point out is this

00:09:03.470 --> 00:09:09.470
one on the bottom. This is a special category,
custom and library views. When you open that,

00:09:09.470 --> 00:09:13.390
we scan your project in all of your libraries
and we find out if you have any custom view

00:09:13.390 --> 00:09:17.209
implementations. As you can see, I have a
few here.

00:09:17.209 --> 00:09:24.120
So just like the built-in widgets, I can drag
these and we get a live preview in the tool.

00:09:24.120 --> 00:09:29.129
So here is a tip. If you control click on
this you can jump to the code.

00:09:29.129 --> 00:09:32.759
So I am opening this custom view class and
I am going to edit the custom view a little

00:09:32.759 --> 00:09:37.410
bit. So I am going to copy this color definition
and drop it down here and let's change the

00:09:37.410 --> 00:09:44.069
color to something recognizable. And I am
saving and I am going to go back to the layout.

00:09:44.069 --> 00:09:48.199
Notice how instantly the layout preview --
[ Applause ]

00:09:48.199 --> 00:09:54.639
&gt;&gt;Tor Norbye: So the preview updated.
So if you think about it, that's means we're

00:09:54.639 --> 00:09:59.149
actually running your custom views inside
the IDE. And of course we have do that. How

00:09:59.149 --> 00:10:03.959
else could we preview it? And as Xavier said,
we do the same thing with the built-in views.

00:10:03.959 --> 00:10:07.372
That's how we can ensure that if you have
a relative layout in the tool, it is going

00:10:07.372 --> 00:10:12.800
to behave exactly the way it does at runtime.
So if you have custom views, you might be

00:10:12.800 --> 00:10:16.960
a bit concerned at this point. What if your
custom view is creating 50 threads or maybe

00:10:16.960 --> 00:10:21.300
connecting to a database or something? That's
going to crash and burn; right? Yes, it probably

00:10:21.300 --> 00:10:26.399
would.
Android has already provided special API support

00:10:26.399 --> 00:10:31.670
for this.
So in your custom view, you can call this

00:10:31.670 --> 00:10:37.300
method "is in edit mode." Your custom view
obviously extends view, and view has this

00:10:37.300 --> 00:10:41.639
method called "is in edit mode." When you
run on the phone or tablet or an emulator,

00:10:41.639 --> 00:10:45.990
this method is going to return false. But
in a tool, this is going to return true.

00:10:45.990 --> 00:10:50.710
So what we want to do here is in the tool,
maybe you want to do some sample data that

00:10:50.710 --> 00:10:57.000
you are showing in the tool, and then if it's
false, you might do the real read from database

00:10:57.000 --> 00:11:00.399
or something like that.
So here, we'll just put some dummy data in

00:11:00.399 --> 00:11:07.100
the tools so it looks better. I am going to
call the add block method. We will put some

00:11:07.100 --> 00:11:09.249
time blocks in this time strip for a couple
of different times.

00:11:09.249 --> 00:11:21.279
Let me copy and paste this line a few times.
And so now when I save this and go back, you

00:11:21.279 --> 00:11:25.899
can see that in the tool, we're getting sort
of a little preview. And this is now part

00:11:25.899 --> 00:11:29.829
of the class. I didn't actually add any time
blocks in my layout here. So if I were to

00:11:29.829 --> 00:11:33.699
drag in another one of these, you can see
we actually get this design time behavior

00:11:33.699 --> 00:11:37.451
in the tool.
All right. So that's custom views.

00:11:37.451 --> 00:11:43.889
[ Applause ]
&gt;&gt;Tor Norbye: Thank you.

00:11:43.889 --> 00:11:47.209
The next thing I want to explain is our new
layout actions bar. So I am going to drag

00:11:47.209 --> 00:11:53.660
in a couple of controls here, or widgets.
And if you see this area above the Canvas,

00:11:53.660 --> 00:11:59.011
there is a toolbar there. This area contains
a number of actions that depend on what you

00:11:59.011 --> 00:12:02.680
have selected and what the parent layout is.
So right now, I am in a linear layout. So

00:12:02.680 --> 00:12:08.259
I can, for example, toggle the orientation
of this linear layout, or I can change between

00:12:08.259 --> 00:12:13.920
match parent and wrap content for the width
or height. Or I can play with the gravity

00:12:13.920 --> 00:12:20.110
of this button. So, for example, I can right
justify it. Or I can modify the weights. So

00:12:20.110 --> 00:12:25.309
I can make the middle button stretch and take
all the available room or I can distribute

00:12:25.309 --> 00:12:30.139
the weights evenly. So if I delete this widget,
you can see the other widgets will take up

00:12:30.139 --> 00:12:34.880
the available extra room.
And again, the layout actions bar depends

00:12:34.880 --> 00:12:40.629
on what you have selected. So if I open another
layout, this is a widget within a table layout.

00:12:40.629 --> 00:12:44.459
You can see in the outline, it says table
layout. So now we have other actions here.

00:12:44.459 --> 00:12:49.639
There is an action, for example, to add a
table row or delete it or to delete the selection

00:12:49.639 --> 00:12:54.629
of rows.
Above the layout actions bar is our configuration

00:12:54.629 --> 00:13:01.220
chooser. So let me open a -- This is a layout
that just has a bunch of different controls.

00:13:01.220 --> 00:13:07.209
And Xavier told you how we have one -- we
actually do the rendering per SDK. So we have

00:13:07.209 --> 00:13:11.620
a render target toggle in the configuration
chooser, and here I can say I actually want

00:13:11.620 --> 00:13:17.939
to see this layout rendered with 1.6. And
you can see when I chose it, you can now see

00:13:17.939 --> 00:13:23.800
the old classic check-box look for example.
However, when you are using this tool, strongly

00:13:23.800 --> 00:13:27.980
recommend that even if you are targeting an
older version of Android, you want to use

00:13:27.980 --> 00:13:33.189
the latest version of rendering target, because
as you can see in this example, showing the

00:13:33.189 --> 00:13:35.730
system bar is only supported in the latest
version. And a number of the features I am

00:13:35.730 --> 00:13:40.120
going to show you doesn't properly work with
the old versions of layout library until Xavier

00:13:40.120 --> 00:13:42.329
finishes back porting it.
&gt;&gt;Xavier Ducrohet: So one of the things that

00:13:42.329 --> 00:13:48.249
we added starting with 3.0 is the previous
version of the rendering library was just

00:13:48.249 --> 00:13:52.369
really run to a library, which is why we call
it run to a library. It wrote on the bitmap

00:13:52.369 --> 00:13:54.249
and some bonding box for all the objections
there.

00:13:54.249 --> 00:13:59.050
Starting with 3.0, we wanted to add a lot
more interactivity, and so we had to really

00:13:59.050 --> 00:14:03.910
extend the API between Eclipse and that rendering
library so a lot of the things you are going

00:14:03.910 --> 00:14:07.559
to see really requires that.
So that's what why we're going to go back

00:14:07.559 --> 00:14:14.389
and port that back to 2.1 and up, probably,
at least to start with. And so suddenly, when

00:14:14.389 --> 00:14:19.480
you get that new version of the rendering
library for 2.1, let's say, then some of those

00:14:19.480 --> 00:14:22.619
feature will suddenly become available when
you use 2.1.

00:14:22.619 --> 00:14:26.749
&gt;&gt;Tor Norbye: All right. Next to the rendering
target, we have a locale chooser.

00:14:26.749 --> 00:14:31.249
So here is the layout where I have a bunch
of different translations, so I can switch

00:14:31.249 --> 00:14:34.829
to another language. And this is project wide,
so once you have chosen the project you want

00:14:34.829 --> 00:14:41.230
to work with I can go to other layouts and
it's going to show me that new language.

00:14:41.230 --> 00:14:45.540
And below the language chooser, we have a
line with a number of different configurations

00:14:45.540 --> 00:14:49.779
that are per layout. So the first thing we
can do is we can change the theme. So the

00:14:49.779 --> 00:14:53.410
theme chooser shows me all the themes that
are referenced from the manifest, all the

00:14:53.410 --> 00:14:57.970
themes available in this version of the SDK,
and any themes that are in this project.

00:14:57.970 --> 00:15:02.680
So you can see that I can, for example, switch
to the welcome theme for this layout. Or if

00:15:02.680 --> 00:15:09.459
I switch to a default theme, you can recognize
the progress bar in the center; right?

00:15:09.459 --> 00:15:13.350
So that's the theme chooser.
And over on the left we have a screen size

00:15:13.350 --> 00:15:19.470
selector. So obviously this is a ten inch
tablet size. That's why you see the Honeycomb

00:15:19.470 --> 00:15:23.309
buttons on the bottom here.
If I switch to a phone layout, you can see

00:15:23.309 --> 00:15:29.339
this is a 3.2 inch size screen.
Now, I can choose that I want to actually

00:15:29.339 --> 00:15:35.709
render this as a tablet size instead, and
it automatically scales -- or it zooms out

00:15:35.709 --> 00:15:39.920
so I can see the whole layout but if you look
at the zooms control here I can to 100 percent

00:15:39.920 --> 00:15:46.519
so it is rendering my layout the way it would
look on a tablet.

00:15:46.519 --> 00:15:52.220
And next to the screen size, we have the orientation
toggle. So I can, for example, test my layout

00:15:52.220 --> 00:15:59.610
in both orientations, back and forth here.
So let's say that I want to make the landscape

00:15:59.610 --> 00:16:04.929
version of my layout different. The way you
do that is through the configuration chooser.

00:16:04.929 --> 00:16:10.860
There's a button up on the top right here,
create. So when I click that, I get this dialogue

00:16:10.860 --> 00:16:14.699
which asks me what qualifiers I want to create
a special configuration for.

00:16:14.699 --> 00:16:19.100
So I am going to choose landscape and add
it to the list on the right. And you can see

00:16:19.100 --> 00:16:23.129
it tells me here that it's going to create
a new file in the landscape folder.

00:16:23.129 --> 00:16:29.929
So when I press okay, it duplicates the default
layout and we are now in the landscape orientation.

00:16:29.929 --> 00:16:33.639
So if I open the package explorer, you can
see it created a new file here.

00:16:33.639 --> 00:16:38.720
So we now have a landscape layout we can edit
that's not going to affect, for example, the

00:16:38.720 --> 00:16:43.689
portrait mode.
So let me go ahead and drop in an image here

00:16:43.689 --> 00:16:47.480
and when I drop that I get this resource chooser.
We use this resource chooser in a number of

00:16:47.480 --> 00:16:51.189
places in the tool when you need to input
some resource. So here is a quick tip for

00:16:51.189 --> 00:16:55.009
you. This one accepts wild cards. So I am
looking for a logo. I can't remember what

00:16:55.009 --> 00:17:00.449
it's called, but I can put a star and then
logo, and this is going to find all the matching

00:17:00.449 --> 00:17:05.560
resources for me.
So that's my logo. Let's use the layout actions

00:17:05.560 --> 00:17:14.210
bar to center it, and let's also add some
padding, some margins. And here's another

00:17:14.210 --> 00:17:18.400
tip. You can drag to move things around, but
if you hold the modifier key, you can actually

00:17:18.400 --> 00:17:21.271
duplicate. So if you want to, for example,
quickly put out a lot of buttons you can quickly

00:17:21.271 --> 00:17:25.240
do it with the modifier key. So I am going
drag this over on the left here so we get

00:17:25.240 --> 00:17:29.390
a symmetric look.
So now we have the landscape orientation layout,

00:17:29.390 --> 00:17:33.570
and if I switch back to portrait you can see
indeed we have different layouts now for the

00:17:33.570 --> 00:17:38.020
two orientations.
So that's all well and good. But if you look

00:17:38.020 --> 00:17:42.990
at the header in this layout, and it contains
a bunch of stuff, a bunch of buttons and everything,

00:17:42.990 --> 00:17:47.870
and this has now been duplicated between the
two layouts, and that's probably not fun for

00:17:47.870 --> 00:17:51.790
maintenance; right? If you were asked to change
the header, you have to go into each one of

00:17:51.790 --> 00:17:56.551
your layouts. You don't want to did that.
And if you look in my outline, you can see

00:17:56.551 --> 00:18:00.170
there actually is a color strip above it,
and that's just an include. So Android has

00:18:00.170 --> 00:18:03.810
a mechanism to avoid this kind of duplication,
and that's the include mechanism.

00:18:03.810 --> 00:18:07.670
And we're already using it for this color
strip. You can see it's a separate layout

00:18:07.670 --> 00:18:11.140
that's just included everywhere.
So what I want to do is do the same thing

00:18:11.140 --> 00:18:15.310
to the header. I want to have a separate header
layout that we include everywhere. And we

00:18:15.310 --> 00:18:18.240
have a new feature to help you with this if
you have already gone ahead and done this

00:18:18.240 --> 00:18:23.130
duplication. And that is this visual refactorring
called extract include.

00:18:23.130 --> 00:18:28.660
So I select the portion of the layout that
I want to refactor out into its own layout,

00:18:28.660 --> 00:18:31.990
and in the context, there's this extract include
menu item.

00:18:31.990 --> 00:18:39.470
So when I choose that, it brings up this refactorring
wizard dialogue. It's asking me for the name

00:18:39.470 --> 00:18:44.602
of the new layout but notice it also has a
check box which asks me whether I not only

00:18:44.602 --> 00:18:49.730
want to extract the fragments from this layout
but also look in all the other layouts and

00:18:49.730 --> 00:18:54.680
find duplication elsewhere as well.
So I am going to press preview and we get

00:18:54.680 --> 00:18:59.641
this dialogue here and can you can see it
is ripping out a bunch of XML from the layout

00:18:59.641 --> 00:19:05.340
and it's createing a new file here that's
the same XML plus some name space stuff.

00:19:05.340 --> 00:19:10.890
But look at this. It's also found the same
header in a bunch of other files. And it's

00:19:10.890 --> 00:19:13.440
cleaning all that up for me and replacing
it with an include.

00:19:13.440 --> 00:19:18.610
So when I press OK, it shows me my new header
layout. You can see it's just the header,

00:19:18.610 --> 00:19:19.610
and I can go ahead and edit this if I want.
So when I press okay, it shows me my new header

00:19:19.610 --> 00:19:22.000
layout. You can see it's just a header and
I can go ahead and edit this if I want. And

00:19:22.000 --> 00:19:26.300
if I go back to the layout we were editing,
and I select this header, you can see it's

00:19:26.300 --> 00:19:30.630
now just an include.
Using this --

00:19:30.630 --> 00:19:38.790
[ Applause ]
&gt;&gt;Tor Norbyte: Thank you.

00:19:38.790 --> 00:19:45.150
And using this layout is also very easy. I'm
just going to open our form layout again.

00:19:45.150 --> 00:19:49.810
I go to the layout category. I can drag in
an include tag, and I'm going to drop it right

00:19:49.810 --> 00:19:54.280
here. Here's the resource chooser again. We're
going to point it to our header. You can see

00:19:54.280 --> 00:19:57.710
there's our included layout.
We have one more feature to help with this.

00:19:57.710 --> 00:20:03.770
So if I go back to my layout here, if I need
to edit this header, I can obviously open

00:20:03.770 --> 00:20:08.090
the header file -- header file, this is not
a C header file -- but I can open this header

00:20:08.090 --> 00:20:13.950
layout, and I can obviously edit it. But what
if I want to see it as I'm editing it in context?

00:20:13.950 --> 00:20:21.040
I can head back to this and DoubleClick on
this include and look carefully at the layout

00:20:21.040 --> 00:20:27.170
as I'm doing that. Do you see what happened?
It grayed out everything. I can no longer

00:20:27.170 --> 00:20:30.890
select anything except the header. And if
you look carefully, I'm actually not editing

00:20:30.890 --> 00:20:36.300
the outer layout anymore. It opened the inner
included layout as you can see in the outline.

00:20:36.300 --> 00:20:42.390
But it's rendering it to me the way it looks
within another layout.

00:20:42.390 --> 00:20:48.051
And so if I, for example, go to another layout
that was also cleaned up, this one, and I

00:20:48.051 --> 00:20:53.760
DoubleClick here, you can see it's now letting
me edit this header in line the way it's viewed

00:20:53.760 --> 00:20:57.410
from this other layout. And, in fact, I can
right-click on this layout. There's this "show

00:20:57.410 --> 00:21:01.800
included in" menu. And we know all the places
this layout is included in the project. You

00:21:01.800 --> 00:21:05.810
can switch and view it the way it's appearing
in any of these.

00:21:05.810 --> 00:21:07.800
That's a feature I hope will really help you
work with includes.

00:21:07.800 --> 00:21:16.080
[ Applause ]
&gt;&gt;Tor Norbyte: Thank you.

00:21:16.080 --> 00:21:19.331
So that's a feature to help you avoid layout
duplication. There's another kind of duplication

00:21:19.331 --> 00:21:24.910
that's really bad as well. And that is in-lining
styles. So I'm going to DoubleClick on this

00:21:24.910 --> 00:21:30.280
button. What that does in our tool is jump
to the corresponding view in the XML. And

00:21:30.280 --> 00:21:34.880
I'm going to show you that for this button,
we've in-lined a bunch of styles, some text

00:21:34.880 --> 00:21:41.750
size, font style. This is not good. And, in
fact, we've done it on all the buttons.

00:21:41.750 --> 00:21:46.610
What we want to do is use a similar feature
to create a logical style for this and put

00:21:46.610 --> 00:21:49.650
that in a separate file so there's one place
to update.

00:21:49.650 --> 00:21:54.560
So I'm going to switch back to the graphical
view, and I want to select all the buttons.

00:21:54.560 --> 00:21:58.700
And quick tip, we have a special select menu
that lets me select all the widgets of the

00:21:58.700 --> 00:22:04.270
same type. That's quicker, since this is not
a contiguous selection. Here's all my buttons.

00:22:04.270 --> 00:22:09.970
And I can now invoke this other visual refactoring
extract style.

00:22:09.970 --> 00:22:14.530
So now I get another wizard dialogue. If you
look in the center of this, what the tool

00:22:14.530 --> 00:22:20.880
has done is look at all the attributes defined
by all the selected elements, count and sort

00:22:20.880 --> 00:22:25.490
them based on what their values are. So it's
telling me, for example, that five out of

00:22:25.490 --> 00:22:30.640
the six elements set the foreground color
-- the text color to foreground one and one

00:22:30.640 --> 00:22:33.770
of them set it to foreground two. In fact,
that wasn't even intentional. That's one of

00:22:33.770 --> 00:22:37.400
the things you want to use style so that you
don't end up with things that aren't fully

00:22:37.400 --> 00:22:41.650
up to date.
So I am going to name a new style here, home

00:22:41.650 --> 00:22:46.660
button style. I can also choose to unify the
styles with this check box. It's going to

00:22:46.660 --> 00:22:51.770
rip out any values that are different. Let's
press preview. And you can see it now creates

00:22:51.770 --> 00:22:56.970
a new style in my styles file. And in the
layout, it's going to strip out, you know,

00:22:56.970 --> 00:23:02.070
all the inline styles and replace them with
style definitions. When I do that, we're back

00:23:02.070 --> 00:23:06.450
to our layout. And if I DoubleClick again,
you can see we now have a much simpler definition.

00:23:06.450 --> 00:23:12.480
And we can go to one place to update the styles.
[ Applause ]

00:23:12.480 --> 00:23:21.740
&gt;&gt;Tor Norbyte: All right. Another thing that
we've improved a lot is support for list views.

00:23:21.740 --> 00:23:26.590
So list views have been very tricky for us
in the tool. We used to render this. Basically,

00:23:26.590 --> 00:23:32.090
nothing. And the reason for that is that list
views, they're contents and even the ListView

00:23:32.090 --> 00:23:37.650
item layout is all configured from Java code,
and not a custom view, from your activities

00:23:37.650 --> 00:23:42.710
and adapters. And we do run your custom views,
but we do not run your activities. So that

00:23:42.710 --> 00:23:47.010
was tricky. But we have a solution now that
works pretty well. And what we're doing is

00:23:47.010 --> 00:23:51.910
we're picking a default layout to show you.
You can then go in and say I actually want

00:23:51.910 --> 00:23:56.250
you to show me the list using one of these
builtin layouts. Or more likely, you have

00:23:56.250 --> 00:24:01.250
a custom layout for your ListView items that
you want to see. And so you can invoke this

00:24:01.250 --> 00:24:06.910
choose layout here, which gives you the resource
chooser again. And in this project, have a

00:24:06.910 --> 00:24:11.530
particular list item session layout that was
intended for this ListView. When you choose

00:24:11.530 --> 00:24:15.510
this, we preview your list using exactly your
layout.

00:24:15.510 --> 00:24:19.720
So we're planning to support something similar
to what I showed you with includes. We would

00:24:19.720 --> 00:24:23.560
love to let you inline edit these ListView
item layouts. We don't do that yet, but I

00:24:23.560 --> 00:24:26.830
think that's next on our plate.
&gt;&gt;Xavier Ducrohet: And also, that feature

00:24:26.830 --> 00:24:33.660
did not make it -- it's inside the next version
of ADT, but it's not in the 3.1 rendering

00:24:33.660 --> 00:24:37.580
library. So we're going to finish that, and
then we'll release an update version of the

00:24:37.580 --> 00:24:42.360
3.1 SDK component that will have a new version
of the library that will do that.

00:24:42.360 --> 00:24:46.820
&gt;&gt;Tor Norbyte: Let me show you a couple more
visual refactorings.

00:24:46.820 --> 00:24:50.900
First of all, we can let you change widget
type. So, for example, I can take this text

00:24:50.900 --> 00:24:56.660
field, it's showing me some other likely candidates,
or I can pick any view type that I want really.

00:24:56.660 --> 00:25:02.040
But we're going to convert it to a spinner.
And the reason you want to do that is, if

00:25:02.040 --> 00:25:05.780
you were to just delete the old text flow
and insert a new spinner, then your layout

00:25:05.780 --> 00:25:12.530
attachments would disappear, your ID attachments
and so forth. This let you preserve things

00:25:12.530 --> 00:25:18.950
in place. Let's say I want to drag in a progress
indicator next to this spinner here. If I

00:25:18.950 --> 00:25:23.200
put in the table view, it creates a new column
which I do not want. What I really want is

00:25:23.200 --> 00:25:29.340
for this cell to be able to have siblings.
To do that, I can use the wrap in parent visual

00:25:29.340 --> 00:25:33.940
refactoring. This is going to insert a new
parent in the middle of the hierarchy. So

00:25:33.940 --> 00:25:40.960
I'm going to choose a horizontal linear layout
here. I'll call it parent. And I now have,

00:25:40.960 --> 00:25:46.350
if you look in the outline, you can see we
have a new linear layout inserted in the middle.

00:25:46.350 --> 00:25:50.280
And I can now proceed to go and drag, for
example, this progress indicator and then

00:25:50.280 --> 00:25:55.590
I don't get a new cell.
And we also have a change layout refactoring

00:25:55.590 --> 00:25:59.340
which attempts to make some conversions from
one layout to another. And we're still trying

00:25:59.340 --> 00:26:02.340
to improve this. But we have the basics in
place.

00:26:02.340 --> 00:26:07.360
And that brings me to relative layout. So
show of hands, who here has worked with relative

00:26:07.360 --> 00:26:09.141
layout?
A lot of you.

00:26:09.141 --> 00:26:14.640
So then you know that relative layout is a
very powerful layout. But it could be a bit

00:26:14.640 --> 00:26:19.970
tricky to work with. I hope that you will
like this next part of the demo.

00:26:19.970 --> 00:26:26.860
Unlike everything else I've shown you, this
is not in the version 11 of the Eclipse plug-in

00:26:26.860 --> 00:26:31.100
that we're going to release very soon. Our
tools, basically all of the source code is

00:26:31.100 --> 00:26:34.490
available. You can build it from scratch today
what you've seen. We're still doing a bit

00:26:34.490 --> 00:26:40.750
of QA on the release. This is the follow-up,
so this is a preview to give you a sense of

00:26:40.750 --> 00:26:45.350
what we're doing. Here's the relative layout,
and I'm going to drag in a text field over

00:26:45.350 --> 00:26:50.140
this. As I'm dragging, you can see it's trying
to attach this to sort of the nearest edge

00:26:50.140 --> 00:26:54.800
or maybe do some centering.
So I'm going to drop it around here. And then

00:26:54.800 --> 00:26:59.560
I'm going to drag another widget in, a button.
And as I'm dragging, you can see that it's

00:26:59.560 --> 00:27:04.250
doing a bunch of matching. It's trying to
pick a nice edge match for this.

00:27:04.250 --> 00:27:11.000
So I'm going to drop the button there. Let's
do another text field under it. It's attaching

00:27:11.000 --> 00:27:15.620
it right there.
And let's put in a label and show you baseline

00:27:15.620 --> 00:27:21.910
alignment. So it's doing a baseline alignment
of this label. And let's put a spinner below

00:27:21.910 --> 00:27:29.260
it. So in addition to giving your geometric
matches as you're dropping, I can also reattach

00:27:29.260 --> 00:27:33.700
any edge. So I can go and, you know, reattach
the right edge over here. I can do the left

00:27:33.700 --> 00:27:40.400
edge to here. Or maybe to here. Or to the
bottom. Or I can release an edge like this

00:27:40.400 --> 00:27:46.030
so that it goes where it wants to go based
on the intrinsic height. And, obviously, I

00:27:46.030 --> 00:27:51.130
can just reconfigure things. And it makes
sure that there are no cycles or any problems

00:27:51.130 --> 00:27:55.240
like that.
Notice also that as I'm selecting things in

00:27:55.240 --> 00:27:59.350
this layout, it's showing me what the attachments
are and it's also highlighting dependent nodes

00:27:59.350 --> 00:28:02.120
a bit.
And I can even turn on visualization of all

00:28:02.120 --> 00:28:07.430
the attachments in this relative layout. So
let's go back to, for example, this activation

00:28:07.430 --> 00:28:11.761
screen. You can see here that, for example,
the bottom buttons are bound to the bottom

00:28:11.761 --> 00:28:17.460
right, whereas the content pane is attached
to the center, and so forth. So that's what

00:28:17.460 --> 00:28:20.930
we're working off relative layout.
And once we're done with it, I hope you'll

00:28:20.930 --> 00:28:26.110
find it very useful.
[ Cheers and applause ]

00:28:26.110 --> 00:28:33.690
&gt;&gt;Tor Norbyte: So the last visual thing I
want to show you is our support for animations.

00:28:33.690 --> 00:28:41.730
So in Honeycomb, there's a new animator API.
So you have this new animator resource folder.

00:28:41.730 --> 00:28:47.600
And if you have animation resources in there,
you can open any layout, and you can select

00:28:47.600 --> 00:28:52.150
the widget. And when you right click on it,
there's this play animation menu. In here,

00:28:52.150 --> 00:28:57.470
we show you all the builtin animation as well
as the animator resources you've added to

00:28:57.470 --> 00:29:02.490
your project. So if I select this, this custom
one animation, you can see that we previewed

00:29:02.490 --> 00:29:06.960
animation right in the tool. So you can make
some tweaks. So if I open this animation file

00:29:06.960 --> 00:29:11.560
-- by the way, we have -- we now have code
completion on this and documentation, so you

00:29:11.560 --> 00:29:13.390
can explore the API a bit.
[ Cheers and applause ]

00:29:13.390 --> 00:29:24.090
&gt;&gt;Tor Norbyte: So I'm going to insert an interpolator.
I'm going to change it to an overshoot interpolator

00:29:24.090 --> 00:29:27.930
and jump back here.
And now if I rerun the animation, you can

00:29:27.930 --> 00:29:31.570
sort of see the overshoot animation. This
gives you a good way to play animation and

00:29:31.570 --> 00:29:36.000
preview them before actually having to run
your application. Notice this animation is

00:29:36.000 --> 00:29:43.730
independent of the widget I chose. I can go
to this layout and run animation on the entire

00:29:43.730 --> 00:29:49.470
layout. It's basically just an animation resource
you can apply to any object you want.

00:29:49.470 --> 00:29:52.820
The last thing I want to show you is --
&gt;&gt;Xavier Ducrohet: So I just want to mention

00:29:52.820 --> 00:29:57.840
something. Because if you start using that,
you're probably going to have a problem.

00:29:57.840 --> 00:30:01.840
In the resource folder of your application,
there's an anim folder. That's where the animation

00:30:01.840 --> 00:30:08.140
are supposed to go. At the framework level,
they wanted to make a difference between the

00:30:08.140 --> 00:30:12.671
old animation framework and the new animation
framework. So starting with 3.0, you can actually

00:30:12.671 --> 00:30:21.150
put them in res/animation. So it's not really
required, you can put them in either animation

00:30:21.150 --> 00:30:25.011
folder.
But the convention is that you put the old

00:30:25.011 --> 00:30:28.450
one in anim and the new one in animation.
And that's the only place where edit is going

00:30:28.450 --> 00:30:33.430
to go and look for those. So the right-click
menu that Tor showed you where we list all

00:30:33.430 --> 00:30:37.630
the animation that you have in your project,
we're only going to go and look in the new

00:30:37.630 --> 00:30:40.610
animation folder. So you should really put
them there. If you don't find it, it's just

00:30:40.610 --> 00:30:44.960
that you put it in the older folder. So that
will help you if you have an issue and don't

00:30:44.960 --> 00:30:47.892
find your animations.
&gt;&gt;Tor Norbyte: Okay. The last thing I want

00:30:47.892 --> 00:30:52.960
to show you is our somewhat improved support
for pure XML editing. If you don't want to

00:30:52.960 --> 00:30:57.800
use a UI builder, at least you should check
this part out.

00:30:57.800 --> 00:31:05.730
So if you switch to XML, obviously, we have
code completion for the layout types. So I

00:31:05.730 --> 00:31:12.820
can insert edit text. And give myself some
space. I can complete on, for example, the

00:31:12.820 --> 00:31:20.320
text property here. We get documentation.
We help you complete framework resources.

00:31:20.320 --> 00:31:24.820
We also give you help if you're doing -- if
you type strings by hand. So I'm going to

00:31:24.820 --> 00:31:29.320
type hello world. Notice that if I invoke
the Eclipse quick fix command, which is command

00:31:29.320 --> 00:31:34.590
one on Mac and control one on other platforms,
we had a quick fix to extract this string.

00:31:34.590 --> 00:31:39.200
By the way, all the visual refactorings I
showed you before, also available on XML.

00:31:39.200 --> 00:31:43.180
Quick fix on the element and you can do your
wrap in and so forth right there.

00:31:43.180 --> 00:31:47.980
So on a string like this, I can do extract
Android string. This is going to give me a

00:31:47.980 --> 00:31:52.780
wizard where I can quickly choose the key
I want to use. This will basically pull the

00:31:52.780 --> 00:31:57.850
string into a resource file.
I can also do some completion on the margin.

00:31:57.850 --> 00:32:00.880
Notice how you don't have to type the name
space prefix. You also don't have to type

00:32:00.880 --> 00:32:08.220
the layout underscore prefix. We match them
both, give you completion on units with documentation.

00:32:08.220 --> 00:32:15.130
Or if you create a nonexistent resource, like
this, you get an error, but there also is

00:32:15.130 --> 00:32:19.830
a quick fix to correct this error. So here
we have a missing dimension. So if I invoke

00:32:19.830 --> 00:32:26.390
this quick fix, it goes to the dimensions
file and adds an entry for me to customize.

00:32:26.390 --> 00:32:31.600
And we also help you with flags. So, for example,
for the text field, there's a bunch of flags

00:32:31.600 --> 00:32:36.621
you may want to set. And we help you with,
basically, picking all the various attributes

00:32:36.621 --> 00:32:40.840
you may want to add to this flag.
Now, we also have support for go to declaration

00:32:40.840 --> 00:32:46.740
pervasively within the tool. So, obviously,
I can hold the control key and hover over

00:32:46.740 --> 00:32:52.630
here and I can jump to the string that we
just extracted. And if you have many definitions

00:32:52.630 --> 00:32:57.650
of a resource, for example, notice how if
I hover over this okay, it instantly shows

00:32:57.650 --> 00:33:01.220
me all the locations where this string is
defined, all of the message catalogues so

00:33:01.220 --> 00:33:06.470
I can quickly, for example, go to the German
definition of okay, which is same as English,

00:33:06.470 --> 00:33:08.220
I guess.
[ Laughter ]

00:33:08.220 --> 00:33:12.220
&gt;&gt;Tor Norbyte: And this works not just from
layout XML files. It works everywhere. So

00:33:12.220 --> 00:33:19.171
if I open the manifest file, for example,
I can jump to the drawable resource that's

00:33:19.171 --> 00:33:24.830
going to open it. That's the app icon. I can
jump to a permission that opens the documentation

00:33:24.830 --> 00:33:31.020
for that permission. I can jump, obviously,
to string resources, which I've already shown

00:33:31.020 --> 00:33:36.780
you. And I can jump to, for example, the activity
or services registered here. So this is going

00:33:36.780 --> 00:33:40.080
to jump into the Java code.
And within the Java code as well, if I, for

00:33:40.080 --> 00:33:44.362
example, hover over this layout, you can see
that it's telling me that this resource is

00:33:44.362 --> 00:33:49.330
defined in these multiple layouts here. And
even for IDs defined in any inline in any

00:33:49.330 --> 00:33:55.030
XML file, it will locate it and go to it for
you. So that's basically -- I'm going to turn

00:33:55.030 --> 00:34:02.910
it back over to Xavier.
[ Cheers and applause ]

00:34:02.910 --> 00:34:09.740
&gt;&gt;Tor Norbyte: We have the slides.
&gt;&gt;Xavier Ducrohet: All right. That looks great.

00:34:09.740 --> 00:34:13.409
There we go.
So that's what we've been working on on the

00:34:13.409 --> 00:34:18.960
layout editor. Obviously, it's something that
we are going to keep working on. So we'll

00:34:18.960 --> 00:34:26.220
get even more improvements.
So I wanted to do a quick talk about another

00:34:26.220 --> 00:34:31.460
tool that we have that's not technically packaged
with the SDK. It's created by Roman Nurik,

00:34:31.460 --> 00:34:36.409
who's a different product advocate at Android.
And it's a Web application. It's Android Assets

00:34:36.409 --> 00:34:39.759
Studio. And it's a Web app that will allow
you to create assets.

00:34:39.759 --> 00:34:45.760
Now, creating a layout is one thing. But actually,
you know, putting logos in that layout is

00:34:45.760 --> 00:34:50.270
another thing. And maybe some of you are working
alone and don't have a graphic artist to work

00:34:50.270 --> 00:34:58.140
with you. So that tool allows you to create
icons for your launcher icons, but also the

00:34:58.140 --> 00:35:03.890
-- you know, the big 512 by 512 icon that
you need to put on Market. And then, like,

00:35:03.890 --> 00:35:09.819
notification icons, menu icons, and tab icons.
And it's even going to create different style

00:35:09.819 --> 00:35:14.089
based on which version of Android, since we
changed, like, for the notification icon.

00:35:14.089 --> 00:35:18.710
And then you get a big zip file that contains
all the icons in every density and so on.

00:35:18.710 --> 00:35:22.640
It's very easy to use. You know, if you're
looking to get some quick assets, that's a

00:35:22.640 --> 00:35:28.900
great way to create some assets and make sure
that your application has some nice-looking

00:35:28.900 --> 00:35:32.089
icons.
So now I'm going to give you a quick demonstration

00:35:32.089 --> 00:35:41.510
on some features that we have in the tools
that you should be aware of, but maybe are

00:35:41.510 --> 00:35:46.140
not aware of.
So I'm sure a lot of you have been doing Android

00:35:46.140 --> 00:35:52.390
for quite a while now. But I still want to
mention that in DDMS, you have that log cat

00:35:52.390 --> 00:35:58.009
view. Use it. If your application is crashing
and you get a false close dialogue and you're

00:35:58.009 --> 00:36:02.059
wondering what's going on. The whole exception
has been dumped into logcat. Just go look

00:36:02.059 --> 00:36:09.650
at it. If something is going wrong, first
reflex should be go to logcat. And then if

00:36:09.650 --> 00:36:14.359
it's not there, they try to connect to the
debugger and see what's up.

00:36:14.359 --> 00:36:24.340
I should have -- there I go. So I have a small
application here that's -- okay -- that's

00:36:24.340 --> 00:36:30.920
an application that should be showing around
here.

00:36:30.920 --> 00:36:36.690
So the thing that I want to show you is, you
probably know Traceview. Traceview is a profiling

00:36:36.690 --> 00:36:42.680
tool that we have. We've had it for a long
time. It's -- want to improve it, but it's

00:36:42.680 --> 00:36:47.790
there, and you should use it. It's a stand-alone
tool, but thanks to actually an excellent

00:36:47.790 --> 00:36:53.359
contribution, we have it integrated in Eclipse
right now. So that's much better. And it's

00:36:53.359 --> 00:36:58.220
very easy to use. So what I'm going to do
here is, I'm going to click on that button,

00:36:58.220 --> 00:37:05.789
which is going to start profiling my application.
Then I'm going to do something with my application

00:37:05.789 --> 00:37:10.119
which takes a while. That's fractiles. And
I'm just going to click back here. It's telling

00:37:10.119 --> 00:37:14.660
the VM to stop profiling, send me back the
trace file so I can look at it.

00:37:14.660 --> 00:37:20.010
And then you get Traceview directly inside
Eclipse. So if you don't know about Traceview,

00:37:20.010 --> 00:37:25.260
you can easily, like, zoom in, see here, and
you see here the thread that's red that is

00:37:25.260 --> 00:37:31.599
apparently taking a lot of time, you can look
at the blue, zoom in even more to see what's

00:37:31.599 --> 00:37:36.519
going on here with all of those methods here.
So you have a lot of things that happens here.

00:37:36.519 --> 00:37:41.289
And because it's integrated into Eclipse,
you can easily click command and click here

00:37:41.289 --> 00:37:54.539
and go -- hmm. You should be able to. Hold
on.

00:37:54.539 --> 00:37:56.490
Is it....
Maybe not.

00:37:56.490 --> 00:37:59.780
&gt;&gt;Tor Norbyte: Maybe not.
&gt;&gt;Xavier Ducrohet: So normally -- I think

00:37:59.780 --> 00:38:00.780
you have a custom build.
&gt;&gt;Tor Norbyte: Yeah.

00:38:00.780 --> 00:38:03.359
&gt;&gt;Xavier Ducrohet: So normally, you should
be able to just click there and go directly

00:38:03.359 --> 00:38:10.200
to the source code.
So Traceview is a great way to profile applications.

00:38:10.200 --> 00:38:14.099
You can easily either click on that button
so, you know, click on that button to start

00:38:14.099 --> 00:38:17.690
profiling, do something that takes a lot of
time on your application, click back, and

00:38:17.690 --> 00:38:21.690
then you get all the threads and everything.
And you can also, if you want to really profile

00:38:21.690 --> 00:38:27.890
something very specific, there's a class called
debug, Android.OS.debug that allows you to

00:38:27.890 --> 00:38:31.749
actually start it from your code so that you
can do that manually.

00:38:31.749 --> 00:38:37.160
The last thing I want to show you, which is
a little bit similar that we've had for a

00:38:37.160 --> 00:38:43.349
while is this button here, which is basically
going to dump an edge profile. So edge profile,

00:38:43.349 --> 00:38:48.990
it's a type of profile that contains a profile
of your HIP. So if you choose any application

00:38:48.990 --> 00:38:55.880
or just use the same one, it is going to instruct
the VM to send back the edge profile and it's

00:38:55.880 --> 00:39:08.410
going to open it.
So what happens is we are getting the edge

00:39:08.410 --> 00:39:15.680
profile directly from the VM, and we have
to open it somehow. And there's a great Eclipse

00:39:15.680 --> 00:39:20.460
tool called MAT, Memory Analyzer Tool, which
if you install it -- and it's free. You should

00:39:20.460 --> 00:39:24.640
just go on the Eclipse.org Website and download
it and put it inside your Eclipse, then it

00:39:24.640 --> 00:39:29.329
will open it and you will have it directly.
So basically it's opening your file, and then

00:39:29.329 --> 00:39:36.240
there's a lot of tool in there. And I am not
going into too much detail. There's another

00:39:36.240 --> 00:39:42.499
talk after that in this room. No, in the other
room, room 9, at 4:15 that actually talks

00:39:42.499 --> 00:39:52.069
about memory management.
And if we can go back to the -- There we go.

00:39:52.069 --> 00:39:58.499
So memory management for Android app, room
9 at 4:15, and you learn all about using MAT

00:39:58.499 --> 00:40:03.369
and helping you profile the memory of your
application.

00:40:03.369 --> 00:40:07.790
So those two small feature in DDMS that also
exist in the stand-alone version have been

00:40:07.790 --> 00:40:12.200
here for a while but a lot of developers don't
know about T those two buttons are really

00:40:12.200 --> 00:40:17.499
helpful when you want to quickly dump either
the profiling or the memory information.

00:40:17.499 --> 00:40:31.039
All right. So now we heard that some developer
were having issues with that tool. And we

00:40:31.039 --> 00:40:35.650
are very aware of it. Trust me.
So, yeah, the emulator running in Honeycomb

00:40:35.650 --> 00:40:41.420
is a big, big issue. So we are going to talk
about that a little bit.

00:40:41.420 --> 00:40:48.430
The first thing I want to explain is that
the emulator is not just a small compatibility

00:40:48.430 --> 00:40:54.640
layer that exposed tom API to an application
to run directly on your host machine. It's

00:40:54.640 --> 00:41:00.769
actually emulating a full ARM-based device.
It's actually emulating hardware. And it's

00:41:00.769 --> 00:41:07.130
running all of Android all the way from the
top where you have your application, the framework,

00:41:07.130 --> 00:41:12.869
the Dalvik VM, the kernel, and hardware driver.
It's like emulating a full hardware.

00:41:12.869 --> 00:41:17.380
So this is great for Android because, as you
know, an Android application does not just

00:41:17.380 --> 00:41:22.319
have a main entry point, you know, a main
method that's being called. You can launch

00:41:22.319 --> 00:41:28.519
it from the launcher, you can receive like
a broadcast, and you have a broadcast receiver

00:41:28.519 --> 00:41:32.690
to get T maybe another application is calling
your content provider and that launch is your

00:41:32.690 --> 00:41:36.680
application. So there are so many ways that
we can't really use a simulator that would

00:41:36.680 --> 00:41:43.349
just be running a fake version of Android
on top of the host. So we have to use that.

00:41:43.349 --> 00:41:47.489
So there's two issue with the current emulator.
The first one is, as I said, it's an ARM device.

00:41:47.489 --> 00:41:52.009
So it's actually executing ARM code, not X86
code which is what we support for the host,

00:41:52.009 --> 00:41:57.269
for the SDK, whatever, Mac, Linux or Windows.
So that's a bit slow.

00:41:57.269 --> 00:42:03.400
It's not that bad. We found out it's not exactly
the issue why it's slow.

00:42:03.400 --> 00:42:09.730
The other issue is that all of the rendering
pipeline is completely software. So there

00:42:09.730 --> 00:42:14.809
is no hardware GL. But there's also no hardware
composition. It's all software.

00:42:14.809 --> 00:42:18.490
And not only it's software but it's software
implemented ARM, and that ARM also has to

00:42:18.490 --> 00:42:24.359
be translated back into X86 to actually run.
In fact, if you run the Gingerbread emulator

00:42:24.359 --> 00:42:28.900
in a very tiny resolution, like the smallest
we support is probably QVGA, you will find

00:42:28.900 --> 00:42:33.920
that, hey, it's actually not bad. It's actually
pretty good. And then you create another AVD

00:42:33.920 --> 00:42:38.549
and you give it the Honeycomb size tablet
and then it's super slow.

00:42:38.549 --> 00:42:43.930
So the rendering is really the issue. And
we're working on it.

00:42:43.930 --> 00:42:50.329
So the way we're doing is we decided the best
way to do that is to have full time hardware

00:42:50.329 --> 00:42:54.809
rendering in the emulator. And we're working
with a company called Graph Tech. They have

00:42:54.809 --> 00:43:02.140
a lot of GL expertise, and they are helping
us with that. And so the first issue that

00:43:02.140 --> 00:43:08.230
we had is that since it's an ARM device, it
doesn't know about the host machine; right?

00:43:08.230 --> 00:43:12.589
On Android, you can't go and access like the
file system of your Windows PC, because it's

00:43:12.589 --> 00:43:18.299
really, it's sandboxed. So we had to design
a nice and fast pipeline to transmit some

00:43:18.299 --> 00:43:24.869
other -- to transmit all the rendering information
back to the host machine to have actually

00:43:24.869 --> 00:43:29.720
a native application running, and then have
hardware support for that.

00:43:29.720 --> 00:43:35.869
The other issue is that most of your machines,
like on Windows, at least, and Mac, you only

00:43:35.869 --> 00:43:42.019
have GL support, but Android use the ES version
of that. And although GLES 1.1 is translating

00:43:42.019 --> 00:43:47.660
to GL, GLES 2.0 is much more complex with
shadows that are not fully compatible with

00:43:47.660 --> 00:43:50.529
GL.
So we are working on that. It's a lot of work

00:43:50.529 --> 00:43:55.640
but we are working on it.
So I wanted to give you a quick demonstration

00:43:55.640 --> 00:44:03.069
of what happens here.
So, now, keep in mind that this is a very

00:44:03.069 --> 00:44:09.279
fresh build, but also it's a very ugly prototype,
because we wanted to show you something.

00:44:09.279 --> 00:44:17.749
So in the -- oh, yeah, so you see the emulator
here. If you haven't noticed, starting with

00:44:17.749 --> 00:44:24.819
our 9, I think, version 9 of the tools, we
have snapshot support. It basically allows

00:44:24.819 --> 00:44:28.920
your emulator to boot in like 3 seconds. It
doesn't actually boot. It just restart your

00:44:28.920 --> 00:44:33.650
previous nonstate.
So if you enable that when you create an AVD,

00:44:33.650 --> 00:44:36.390
when you kill your emulator, basically it's
going to save the state.

00:44:36.390 --> 00:44:42.539
Now, if you have an emulator that has 256
megs of RAM, it's going to take a huge size

00:44:42.539 --> 00:44:48.650
to save the snapshot in the 5- to 600 megabyte.
But then that allows you to reboot super fast.

00:44:48.650 --> 00:44:53.319
So when you develop, generally you can use
that. It's currently available.

00:44:53.319 --> 00:44:59.950
So what I'm going to show you here is that's
the version that's not accelerated. And so

00:44:59.950 --> 00:45:08.519
this is Google Sky map, that uses GLES 1.1
and you are going to see that it's -- a bit

00:45:08.519 --> 00:45:11.650
slow, but that's expected nowadays.
Okay.

00:45:11.650 --> 00:45:22.799
So it's running 600 by -- 800 by 600, which
is slightly bigger than a nexus 1. I am going

00:45:22.799 --> 00:45:28.960
to switch to manual mode here and when I move
you can see it's clearly not tracking my mouse

00:45:28.960 --> 00:45:36.630
very well. It's very slow.
So the current version of -- that we have,

00:45:36.630 --> 00:45:42.099
as I said, it's a prototype, and all we are
doing -- all we are about to do is render

00:45:42.099 --> 00:45:48.489
one application and only that one application.
Because one of the other challenge that we

00:45:48.489 --> 00:45:53.099
have is that the native application that's
going to run on your host has to be able to

00:45:53.099 --> 00:45:58.220
endure a lot of GL context. It's not just
writing one GL application. It's doing GL

00:45:58.220 --> 00:46:04.930
context for all of your OS, and you could
have several context.

00:46:04.930 --> 00:46:10.299
But right now we only support one. So what
I am doing here is I am just doing a force

00:46:10.299 --> 00:46:17.980
stop on this app. And then I'm going to basically
push a file to the emulator to tell it to

00:46:17.980 --> 00:46:25.490
basically white list that application as running
-- as being able to run in hardware.

00:46:25.490 --> 00:46:35.590
And....
There we go.

00:46:35.590 --> 00:46:41.680
So what is happening here is that we have
another application that's not the GL, the

00:46:41.680 --> 00:46:47.559
emulator that's going to do the rendering
for the emulator. And of course in the future

00:46:47.559 --> 00:46:51.260
you won't have that. It will be just integrated
with the front end of the emulator. But right

00:46:51.260 --> 00:46:57.910
now, we have that, and it's a little bit annoying
because I actually have to do my process here.

00:46:57.910 --> 00:47:01.470
And so you can see here that the GL part is
there, but the non-GL part is still there.

00:47:01.470 --> 00:47:03.579
So it's really the one application. It's just
that the GL part is being rendered in another

00:47:03.579 --> 00:47:08.690
application.
So I am going to do the same thing here and

00:47:08.690 --> 00:47:15.559
switch to manual mode. And you can see here
when I switch, it's much faster.

00:47:15.559 --> 00:47:25.200
[ Applause ]
&gt;&gt;Xavier Ducrohet: So you can see that it's

00:47:25.200 --> 00:47:29.130
much faster. There's still some issue with
all of the input and all of that, but it's

00:47:29.130 --> 00:47:34.380
going to allow us to scale to much larger
resolution and still have good rendering support.

00:47:34.380 --> 00:47:42.849
I mentioned this is the bottleneck right now.
And the other bottleneck is it's maybe the

00:47:42.849 --> 00:47:45.009
fact that it's probably running ARM code.
So I actually have another demo here which

00:47:45.009 --> 00:47:52.339
is going to run a smaller version and I am
going to run a game that's available on market.

00:47:52.339 --> 00:47:56.749
So I am going to have to aim properly when
I actually select on it.

00:47:56.749 --> 00:48:06.190
Let's see.
So that one is running in half VGA which is

00:48:06.190 --> 00:48:14.040
the size of the G1.
And, I have become very good at clicking on

00:48:14.040 --> 00:48:17.099
those button.
&gt;&gt;Tor Norbye: It's a special on-screen keyboard.

00:48:17.099 --> 00:48:23.849
&gt;&gt;Xavier Ducrohet: So it's running in half
VGA. The rendering is fully hardware OpenGLES

00:48:23.849 --> 00:48:27.470
1.1. You can see on the top left that I am
running at 60 frame per second. I am using

00:48:27.470 --> 00:48:34.049
the D-Pad right now to play. It's actually
me playing, and I am not very good at it.

00:48:34.049 --> 00:48:39.339
And we're running between 50 and 70 frames
per second, but here we are actually running

00:48:39.339 --> 00:48:46.450
ARM code; right? We are not just running -- So
this is hardware accelerated, but we are still

00:48:46.450 --> 00:48:52.160
running and basically dynamically converting
the ARM code into X86 code.

00:48:52.160 --> 00:48:58.470
So basically we found out that if the rendering
is fast enough, the fact that we are not running

00:48:58.470 --> 00:49:04.829
X86 code is not really a problem.
We are still investigating that to see what

00:49:04.829 --> 00:49:11.660
we can do. And, in fact, in the previous session,
the Google TV folks mentioned like an SDK

00:49:11.660 --> 00:49:16.839
add-on, and you know that one will be running
X86, so we are actually looking to be able

00:49:16.839 --> 00:49:25.579
to run X86 images on the emulator. If you
have Linux then you can run it through you

00:49:25.579 --> 00:49:30.759
virtualization, because if you don't have
the KVM module, then you are going to have

00:49:30.759 --> 00:49:35.740
X86 inside your emulator and it's going to
convert it into X86 to run natively, and that's

00:49:35.740 --> 00:49:40.660
not very good. So if you have the KVM model
it runs it directly. The problem is that for

00:49:40.660 --> 00:49:46.440
QMU it is not available for Mac and Windows,
so that's a problem. So we are investigating

00:49:46.440 --> 00:49:54.299
what we can do to solve that.
So we're working on it. We're like heavily

00:49:54.299 --> 00:50:00.339
working on it. There's a lot of work still
to be done. It's coming. I know there's going

00:50:00.339 --> 00:50:06.180
to be a question so I am going to answer right
now: At least a couple more months. But we

00:50:06.180 --> 00:50:09.920
know that it's very painful.
Hopefully some of you I heard got some new

00:50:09.920 --> 00:50:15.539
tablets so at least you can use that while
you wait. For those on live stream, well you

00:50:15.539 --> 00:50:20.440
need to get a ticket next year.
And you know we are working on it. We already

00:50:20.440 --> 00:50:25.390
know it's an issue. And as I said we have
an external company helping us. We are doing

00:50:25.390 --> 00:50:30.339
what we can.
[ Applause ]

00:50:30.339 --> 00:50:40.239
&gt;&gt;Xavier Ducrohet: So I wanted to finish quickly.
I mentioned open source at the beginning.

00:50:40.239 --> 00:50:44.690
And Tor said that actually everything that
we showed you is available right now on the

00:50:44.690 --> 00:50:49.670
open source tree. So if you go to tools.android.com
you can look at all the information to actually

00:50:49.670 --> 00:50:54.630
download and build the source code.
&gt;&gt;Tor Norbye: If there's just one URL you

00:50:54.630 --> 00:50:56.690
write down, it's that one. From there you
can find instruction on how to build the bits,

00:50:56.690 --> 00:51:00.859
how to check them out. We have a blog on there
where we post feature updates as we do them.

00:51:00.859 --> 00:51:02.180
That's the place to go.
&gt;&gt;Xavier Ducrohet: Just go to tools.android.com

00:51:02.180 --> 00:51:05.440
and you have all the information that you
need.

00:51:05.440 --> 00:51:11.609
The moderator question is there, and there
are two mics in the middle. So we're going

00:51:11.609 --> 00:51:16.359
to take a mix of live questions and Google
moderator.

00:51:16.359 --> 00:51:21.140
And so when I do that -- Okay. Why don't you
start on the first mic.

00:51:21.140 --> 00:51:25.380
&gt;&gt; Yes, hi.
Is there a way to attach multiple instances

00:51:25.380 --> 00:51:29.960
of instrumentation to basically multiple processes?
Right now, it seems like only one process

00:51:29.960 --> 00:51:34.839
can be instrumented at a time so there's no
way to do automatic testing for multi-processors.

00:51:34.839 --> 00:51:42.039
&gt;&gt;Xavier Ducrohet: I think it's only one.
To be honest, I am not entirely sure. Anything

00:51:42.039 --> 00:51:46.950
that has to do with API and things like that,
we may not be the best ones to answer. Try

00:51:46.950 --> 00:51:51.880
the Office Hours.
&gt;&gt; Do you know who is there that will be the

00:51:51.880 --> 00:51:53.789
best person to ask?
&gt;&gt;Tor Norbye: I guess ask when you get there.

00:51:53.789 --> 00:51:55.849
&gt;&gt; All right. Thank you.
&gt;&gt;Xavier Ducrohet: Sorry.

00:51:55.849 --> 00:51:59.180
Second mic.
&gt;&gt; Yes, I was wondering if you guys are planning

00:51:59.180 --> 00:52:05.579
to add some support in the future to help
record videos of our applications to help

00:52:05.579 --> 00:52:08.710
promote them and whatnot.
&gt;&gt;Xavier Ducrohet: Well, that's --

00:52:08.710 --> 00:52:10.519
&gt;&gt;Tor Norbye: That probably would not be the
tools.

00:52:10.519 --> 00:52:15.200
&gt;&gt;Xavier Ducrohet: It's more an issue of like
the system image. Like the screen shot during

00:52:15.200 --> 00:52:20.119
the Fireside Chat there was a question about
enabling screen shots for apps. The security

00:52:20.119 --> 00:52:25.119
involvement for that, we need to make sure
that no other application can do it and things

00:52:25.119 --> 00:52:28.349
like that.
I know that some devices are starting to do

00:52:28.349 --> 00:52:33.509
HDMI out, so you can do that but it's not
really a tool. It has to come from the framework.

00:52:33.509 --> 00:52:36.680
&gt;&gt; Okay. Thank you.
&gt;&gt;Tor Norbye: I want do this one.

00:52:36.680 --> 00:52:40.789
So on the moderator, we have a question, can
we expect better XML error handling as far

00:52:40.789 --> 00:52:44.410
as Android layout is concerned? The answer
is yes. We didn't demo that, but in the latest

00:52:44.410 --> 00:52:49.609
bits we are a bit better about if there's
a problem during rendering, we log it, we

00:52:49.609 --> 00:52:53.089
put some hyperlinks up. There's this new error
bar that shows up below the layout where we

00:52:53.089 --> 00:52:57.359
try to give some diagnostic information. And
if we recognize certain kinds of errors, for

00:52:57.359 --> 00:53:01.779
example if it's a missing resource and we
notice you have AAPT errors in your project,

00:53:01.779 --> 00:53:06.641
we tell you, hey, you know you have an AAPT
error which would mean AAPT couldn't run so

00:53:06.641 --> 00:53:09.619
there are probably missing resources.
So we are trying to work on this and I guess

00:53:09.619 --> 00:53:11.950
we are not done but it's definitely better
than it was.

00:53:11.950 --> 00:53:14.740
&gt;&gt;Xavier Ducrohet: First mic.
&gt;&gt; I was wondering about multi-touch support

00:53:14.740 --> 00:53:19.069
and specifically being able to generate multi-touch
scripts that I could replay and see how they

00:53:19.069 --> 00:53:23.900
are being handled since they are very complicated,
to kind of push through the pipeline of UI.

00:53:23.900 --> 00:53:29.483
&gt;&gt;Xavier Ducrohet: Yes, we don't really have
a solution for that, and we are aware of it

00:53:29.483 --> 00:53:34.339
and we are not really working on it.
So with the GL stuff that we are doing, we

00:53:34.339 --> 00:53:39.799
are going to have to rewrite a new front end
anyway for the emulator. So I think like recording

00:53:39.799 --> 00:53:42.359
and replaying is probably something that we
will try to do.

00:53:42.359 --> 00:53:48.700
I mean, there are some now that do support
multi-touch. Windows does it but it's a little

00:53:48.700 --> 00:53:53.249
bit complicated because the front end is really
cross platform. Right now it is using SDN

00:53:53.249 --> 00:53:57.029
and it's cross platform, so we can't go and
use really a lot of Windows specific API.

00:53:57.029 --> 00:54:00.980
But that could be an option, too. I don't
know how common that is, people having that

00:54:00.980 --> 00:54:03.600
--
&gt;&gt; Even if there was a way we could write

00:54:03.600 --> 00:54:06.680
some small script that would animate some
points that, would be helpful.

00:54:06.680 --> 00:54:10.349
&gt;&gt;Xavier Ducrohet: Yes, I think that's definitely
something we need to do.

00:54:10.349 --> 00:54:12.029
&gt;&gt;Tor Norbye: I guess we have addressed the
next moderator question. Do you want to jump

00:54:12.029 --> 00:54:13.029
to that?
&gt;&gt;Xavier Ducrohet: Let's go to the second

00:54:13.029 --> 00:54:25.710
mic first, but yes.
&gt;&gt; On the layout editor, the selection of

00:54:25.710 --> 00:54:38.099
the configuration, is there a way of setting
the default configuration for when you create

00:54:38.099 --> 00:54:39.099
a new one or you are opening a resource that
you have had in there for several versions?

00:54:39.099 --> 00:54:40.099
And it seems to want to open it up with QVGA.
&gt;&gt;Xavier Ducrohet: So the new version is a

00:54:40.099 --> 00:54:45.170
little bit better on that. The version 11.
Where it will -- for example, if you say target

00:54:45.170 --> 00:54:53.119
11 -- target SDK 11, I think it is going to
try to open them in Honeycomb. We did some

00:54:53.119 --> 00:54:58.631
heuristic to try to improve that to at least
not open with the worst possible resolution.

00:54:58.631 --> 00:55:02.880
&gt;&gt;Tor Norbye: We are planning on for the following
release basically look at the layout you are

00:55:02.880 --> 00:55:05.690
currently in. When you open a new one we are
going to use that as one of the things we

00:55:05.690 --> 00:55:09.489
consider.
&gt;&gt;Xavier Ducrohet: But we are definitely -- it's

00:55:09.489 --> 00:55:14.680
a pain, yes.
&gt;&gt; The other thing is like we have our default

00:55:14.680 --> 00:55:18.420
strings and such are in English. We also have
Spanish translations and it seems to want

00:55:18.420 --> 00:55:21.559
to open up the Spanish one.
&gt;&gt;Tor Norbye: That is something we have fixed

00:55:21.559 --> 00:55:25.830
in the new version. When I showed you the
rendering target and the locale, those are

00:55:25.830 --> 00:55:29.700
project wide. Once you switch it there, open
any other file, it will force the new language.

00:55:29.700 --> 00:55:31.960
So that is solved, but not the screen size
yet.

00:55:31.960 --> 00:55:38.849
&gt;&gt;Xavier Ducrohet: When I change a Java file,
Eclipse rebuilds just that file, giving me

00:55:38.849 --> 00:55:43.859
a new APK.
Yes, so we have noticed if you have a really

00:55:43.859 --> 00:55:49.140
big project with a lot of resources, building
can be really long if you do resources change.

00:55:49.140 --> 00:55:53.249
And actually, we are going to look at that
like right after I/O.

00:55:53.249 --> 00:55:56.519
There's a lot of things that we need to do
first.

00:55:56.519 --> 00:56:00.279
Right now, there's a first pass that does
APT and generate the R class based on all

00:56:00.279 --> 00:56:03.069
your resources and another one that compile
your resources.

00:56:03.069 --> 00:56:11.130
So for all the editors we showed you, when
you have that chooser, Eclipse knows -- we

00:56:11.130 --> 00:56:16.700
created some code that knows all of the resources
that you have. So we want to, instead of running

00:56:16.700 --> 00:56:23.020
APT, which is like an external native tool
running, instead of running it to go do a

00:56:23.020 --> 00:56:28.009
clean look at all the resources to generate
that class, we want to try to be a little

00:56:28.009 --> 00:56:31.900
bit more smart and use what we already know
about the resources, see the resource change

00:56:31.900 --> 00:56:35.259
and do an incremental basically generation
of the R class.

00:56:35.259 --> 00:56:42.319
The other part is on the second state is already
running APT to do a package of your resources

00:56:42.319 --> 00:56:47.479
and that's a little bit long if you have a
lot of P &amp; G file because we process them

00:56:47.479 --> 00:56:53.119
to crunch them to make sure there's no extra
data we don't really need.

00:56:53.119 --> 00:56:57.900
So I think one of the things we need to do
is allow you to crunch them yourself and then

00:56:57.900 --> 00:57:04.229
set a flag saying don't crunch them so that
the packaging of the resources will be faster.

00:57:04.229 --> 00:57:10.880
First mic.
&gt;&gt; Sure. A couple things. First, I realize

00:57:10.880 --> 00:57:14.339
if you define a drawable as a part of your
style, those drawables are not contextual.

00:57:14.339 --> 00:57:19.119
It doesn't actually link back to a drawable
and it doesn't do code hinting. So for example,

00:57:19.119 --> 00:57:23.430
if I define some style and -- like some background
style or something like that and I define

00:57:23.430 --> 00:57:25.049
a drawable as part of that, like some image
--

00:57:25.049 --> 00:57:26.980
&gt;&gt;Xavier Ducrohet: By "define" you mean like
reference a drawable?

00:57:26.980 --> 00:57:38.999
&gt;&gt; Sure, sure, reference a drawable. And what
it does right now, the XML doesn't provide

00:57:38.999 --> 00:57:44.859
-- it's like I can't link to the drawable
from the styles dot XML, for example, and

00:57:44.859 --> 00:57:49.450
I am not able to get code suggestions, even
though the drawing is --

00:57:49.450 --> 00:57:54.369
&gt;&gt;Tor Norbye: We haven't released ADT 11 yet,
but it has a lot of improvements in go to

00:57:54.369 --> 00:57:59.489
declaration and code completion. And we also
just added code completion for drawable files.

00:57:59.489 --> 00:58:03.619
So before that, you would end up with like
the base Eclipse XML model which knew nothing

00:58:03.619 --> 00:58:07.339
about Android. So I think there might still
be an issue but a lot of this is going to

00:58:07.339 --> 00:58:10.039
be a lot better very soon.
&gt;&gt; Another thing is up guys demoed the Android

00:58:10.039 --> 00:58:17.339
assess tool which is pretty cool. I use it
to for generating icons. As part of that project

00:58:17.339 --> 00:58:22.410
there's also a pencil plug-in for mockups.
&gt;&gt;Xavier Ducrohet: Yeah.

00:58:22.410 --> 00:58:27.849
&gt;&gt; Do you guys have in your future to maybe
integrate that into a part of Eclipse so you

00:58:27.849 --> 00:58:31.119
can actually, instead of building code, you
can build mockups of shuttle product managers

00:58:31.119 --> 00:58:34.339
and things like that?
&gt;&gt;Xavier Ducrohet: That's not a goal right

00:58:34.339 --> 00:58:39.289
now. It's a great idea but right now we need
to really focus on improving the layout tool.

00:58:39.289 --> 00:58:45.089
I think that's the one thing we need to focus
on besides the emulator. But that's a good

00:58:45.089 --> 00:58:48.539
idea for after.
&gt;&gt; Okay. Thank you.

00:58:48.539 --> 00:58:53.369
&gt;&gt;Xavier Ducrohet: Okay. We'll take -- I just
did that one.

00:58:53.369 --> 00:58:56.059
Well, if it's just -- so do you have any advice
for getting the emulator to load faster.

00:58:56.059 --> 00:59:00.989
I mentioned the snapshots, use them. I know
that right now when you close the emulator,

00:59:00.989 --> 00:59:05.019
it takes a little bit of time because it saved
the snapshot. That's actually a bug. We fixed

00:59:05.019 --> 00:59:08.190
it. It will be in the next version and it
will quit instantly.

00:59:08.190 --> 00:59:12.739
&gt;&gt;Tor Norbye: The other thing to add there
is some people, they run the app and quit

00:59:12.739 --> 00:59:16.479
the emulator. Leave it running. When you read
a second time from Eclipse it will redeploy

00:59:16.479 --> 00:59:18.910
very quickly. So that's very important to
be aware of.

00:59:18.910 --> 00:59:21.529
&gt;&gt;Xavier Ducrohet: You should launch the emulator
once at the beginning of the day, basically,

00:59:21.529 --> 00:59:25.009
and just redeploy to the same one all the
time. You don't have to quit it all the time.

00:59:25.009 --> 00:59:34.210
&gt;&gt; I have an app that has a lot of hand edited
XML, and so it's neatly formatted. But when

00:59:34.210 --> 00:59:38.739
I use the visual tools, everything just goes
on one line. It looks terrible. I end up having

00:59:38.739 --> 00:59:42.470
to -- if I want to be able to look at it --
&gt;&gt;Tor Norbye: This is a high priority for

00:59:42.470 --> 00:59:45.759
us. I personally want to look at the XML formatting
a bit.

00:59:45.759 --> 00:59:49.599
There is a couple things you can do. First
of all, Eclipse has some formatting options

00:59:49.599 --> 00:59:54.140
where you can tell it that you want attributes
on separate lines. However, we don't automatically

00:59:54.140 --> 00:59:58.839
apply that formatting. But there is a special
option in the Android settings where you can

00:59:58.839 --> 01:00:03.039
say format, you know, automatically format
or something like that. It's not ideal and

01:00:03.039 --> 01:00:06.000
we are going to try to make this a lot better
but you can do that and it should run the

01:00:06.000 --> 01:00:09.059
formatter after every edit.
I think we are actually out of time.

01:00:09.059 --> 01:00:11.680
&gt;&gt;Xavier Ducrohet: Yes.
&gt;&gt;Tor Norbye: I saw a bunch of good questions

01:00:11.680 --> 01:00:16.869
on the moderator so we might answer at least
the ones easy for us to answer.

01:00:16.869 --> 01:00:19.200
&gt;&gt;Xavier Ducrohet: Yeah, we can do that.
Thank you for coming.

01:00:19.200 --> 01:00:21.000
&gt;&gt;Tor Norbye: Thank you.
[ Applause ]

