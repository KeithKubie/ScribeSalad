WEBVTT
Kind: captions
Language: en

00:00:05.509 --> 00:00:08.480 align:start position:0%
 
if<00:00:06.509><c> your</c><00:00:06.810><c> app</c><00:00:06.960><c> uses</c><00:00:07.470><c> background</c><00:00:07.950><c> threads</c><00:00:08.250><c> for</c>

00:00:08.480 --> 00:00:08.490 align:start position:0%
if your app uses background threads for
 

00:00:08.490 --> 00:00:10.940 align:start position:0%
if your app uses background threads for
loading<00:00:08.849><c> or</c><00:00:09.150><c> processing</c><00:00:09.719><c> data</c><00:00:09.960><c> and</c><00:00:10.230><c> pretty</c>

00:00:10.940 --> 00:00:10.950 align:start position:0%
loading or processing data and pretty
 

00:00:10.950 --> 00:00:12.530 align:start position:0%
loading or processing data and pretty
much<00:00:11.040><c> every</c><00:00:11.490><c> app</c><00:00:11.610><c> will</c><00:00:11.849><c> need</c><00:00:12.000><c> those</c><00:00:12.179><c> at</c><00:00:12.360><c> some</c>

00:00:12.530 --> 00:00:12.540 align:start position:0%
much every app will need those at some
 

00:00:12.540 --> 00:00:14.539 align:start position:0%
much every app will need those at some
point<00:00:12.840><c> you</c><00:00:13.559><c> might</c><00:00:13.679><c> have</c><00:00:13.889><c> to</c><00:00:14.009><c> take</c><00:00:14.160><c> special</c>

00:00:14.539 --> 00:00:14.549 align:start position:0%
point you might have to take special
 

00:00:14.549 --> 00:00:17.060 align:start position:0%
point you might have to take special
precautions<00:00:14.820><c> to</c><00:00:15.480><c> make</c><00:00:15.660><c> your</c><00:00:15.839><c> UI</c><00:00:16.080><c> test</c><00:00:16.529><c> run</c>

00:00:17.060 --> 00:00:17.070 align:start position:0%
precautions to make your UI test run
 

00:00:17.070 --> 00:00:20.179 align:start position:0%
precautions to make your UI test run
reliably<00:00:17.930><c> espresso</c><00:00:18.930><c> does</c><00:00:19.199><c> most</c><00:00:19.619><c> of</c><00:00:19.770><c> the</c><00:00:19.920><c> heavy</c>

00:00:20.179 --> 00:00:20.189 align:start position:0%
reliably espresso does most of the heavy
 

00:00:20.189 --> 00:00:22.160 align:start position:0%
reliably espresso does most of the heavy
lifting<00:00:20.220><c> for</c><00:00:20.730><c> you</c><00:00:20.880><c> waiting</c><00:00:21.600><c> for</c><00:00:21.630><c> lifecycle</c>

00:00:22.160 --> 00:00:22.170 align:start position:0%
lifting for you waiting for lifecycle
 

00:00:22.170 --> 00:00:24.080 align:start position:0%
lifting for you waiting for lifecycle
events<00:00:22.410><c> to</c><00:00:22.740><c> finish</c><00:00:23.070><c> and</c><00:00:23.310><c> checking</c><00:00:23.730><c> of</c><00:00:23.850><c> the</c><00:00:23.880><c> UI</c>

00:00:24.080 --> 00:00:24.090 align:start position:0%
events to finish and checking of the UI
 

00:00:24.090 --> 00:00:26.960 align:start position:0%
events to finish and checking of the UI
is<00:00:24.359><c> idle</c><00:00:24.779><c> but</c><00:00:25.619><c> it</c><00:00:25.710><c> can't</c><00:00:25.980><c> always</c><00:00:26.220><c> know</c><00:00:26.400><c> what</c>

00:00:26.960 --> 00:00:26.970 align:start position:0%
is idle but it can't always know what
 

00:00:26.970 --> 00:00:28.609 align:start position:0%
is idle but it can't always know what
the<00:00:27.119><c> other</c><00:00:27.150><c> parts</c><00:00:27.720><c> of</c><00:00:27.869><c> your</c><00:00:27.990><c> app</c><00:00:28.140><c> are</c><00:00:28.320><c> doing</c>

00:00:28.609 --> 00:00:28.619 align:start position:0%
the other parts of your app are doing
 

00:00:28.619 --> 00:00:30.169 align:start position:0%
the other parts of your app are doing
and<00:00:28.800><c> you</c><00:00:29.279><c> might</c><00:00:29.460><c> need</c><00:00:29.609><c> to</c><00:00:29.670><c> write</c><00:00:29.970><c> some</c>

00:00:30.169 --> 00:00:30.179 align:start position:0%
and you might need to write some
 

00:00:30.179 --> 00:00:32.359 align:start position:0%
and you might need to write some
additional<00:00:30.599><c> code</c><00:00:30.869><c> to</c><00:00:30.900><c> make</c><00:00:31.529><c> synchronization</c>

00:00:32.359 --> 00:00:32.369 align:start position:0%
additional code to make synchronization
 

00:00:32.369 --> 00:00:34.930 align:start position:0%
additional code to make synchronization
possible<00:00:32.880><c> let</c><00:00:33.510><c> me</c><00:00:33.600><c> show</c><00:00:33.780><c> you</c><00:00:33.840><c> on</c><00:00:34.020><c> an</c><00:00:34.110><c> example</c>

00:00:34.930 --> 00:00:34.940 align:start position:0%
possible let me show you on an example
 

00:00:34.940 --> 00:00:37.580 align:start position:0%
possible let me show you on an example
I'll<00:00:35.940><c> create</c><00:00:36.120><c> a</c><00:00:36.390><c> new</c><00:00:36.570><c> project</c><00:00:36.870><c> in</c><00:00:37.230><c> Android</c>

00:00:37.580 --> 00:00:37.590 align:start position:0%
I'll create a new project in Android
 

00:00:37.590 --> 00:00:41.080 align:start position:0%
I'll create a new project in Android
studio<00:00:37.829><c> with</c><00:00:38.340><c> the</c><00:00:38.489><c> empty</c><00:00:38.790><c> activity</c><00:00:39.329><c> template</c>

00:00:41.080 --> 00:00:41.090 align:start position:0%
studio with the empty activity template
 

00:00:41.090 --> 00:00:43.670 align:start position:0%
studio with the empty activity template
let's<00:00:42.090><c> do</c><00:00:42.239><c> some</c><00:00:42.420><c> initial</c><00:00:42.600><c> setup</c><00:00:42.989><c> for</c><00:00:43.260><c> testing</c>

00:00:43.670 --> 00:00:43.680 align:start position:0%
let's do some initial setup for testing
 

00:00:43.680 --> 00:00:46.069 align:start position:0%
let's do some initial setup for testing
I'll<00:00:43.980><c> add</c><00:00:44.340><c> the</c><00:00:44.489><c> Android</c><00:00:44.850><c> runner</c><00:00:45.120><c> rules</c><00:00:45.719><c> and</c>

00:00:46.069 --> 00:00:46.079 align:start position:0%
I'll add the Android runner rules and
 

00:00:46.079 --> 00:00:48.200 align:start position:0%
I'll add the Android runner rules and
espresso<00:00:46.469><c> dependencies</c><00:00:47.219><c> in</c><00:00:47.370><c> my</c><00:00:47.520><c> Android</c><00:00:47.910><c> test</c>

00:00:48.200 --> 00:00:48.210 align:start position:0%
espresso dependencies in my Android test
 

00:00:48.210 --> 00:00:50.420 align:start position:0%
espresso dependencies in my Android test
scope<00:00:48.510><c> if</c><00:00:48.719><c> you're</c><00:00:49.500><c> ever</c><00:00:49.649><c> unsure</c><00:00:49.920><c> what</c><00:00:50.280><c> the</c>

00:00:50.420 --> 00:00:50.430 align:start position:0%
scope if you're ever unsure what the
 

00:00:50.430 --> 00:00:52.160 align:start position:0%
scope if you're ever unsure what the
newest<00:00:50.700><c> versions</c><00:00:51.120><c> for</c><00:00:51.270><c> espresso</c><00:00:51.510><c> packages</c>

00:00:52.160 --> 00:00:52.170 align:start position:0%
newest versions for espresso packages
 

00:00:52.170 --> 00:00:54.529 align:start position:0%
newest versions for espresso packages
are<00:00:52.320><c> consult</c><00:00:53.280><c> the</c><00:00:53.399><c> documentation</c><00:00:53.579><c> or</c><00:00:54.360><c> our</c>

00:00:54.529 --> 00:00:54.539 align:start position:0%
are consult the documentation or our
 

00:00:54.539 --> 00:00:56.569 align:start position:0%
are consult the documentation or our
testing<00:00:54.989><c> samples</c><00:00:55.410><c> on</c><00:00:55.530><c> github</c><00:00:55.890><c> which</c><00:00:56.399><c> we</c>

00:00:56.569 --> 00:00:56.579 align:start position:0%
testing samples on github which we
 

00:00:56.579 --> 00:00:59.299 align:start position:0%
testing samples on github which we
always<00:00:56.760><c> keep</c><00:00:57.059><c> up-to-date</c><00:00:57.300><c> I</c><00:00:58.039><c> didn't</c><00:00:59.039><c> set</c><00:00:59.190><c> up</c>

00:00:59.299 --> 00:00:59.309 align:start position:0%
always keep up-to-date I didn't set up
 

00:00:59.309 --> 00:01:01.040 align:start position:0%
always keep up-to-date I didn't set up
the<00:00:59.340><c> test</c><00:00:59.789><c> instrumentation</c><00:01:00.420><c> Runner</c><00:01:00.780><c> and</c>

00:01:01.040 --> 00:01:01.050 align:start position:0%
the test instrumentation Runner and
 

00:01:01.050 --> 00:01:04.130 align:start position:0%
the test instrumentation Runner and
we're<00:01:01.440><c> done</c><00:01:01.649><c> here</c><00:01:01.890><c> on</c><00:01:02.820><c> to</c><00:01:03.329><c> the</c><00:01:03.480><c> main</c><00:01:03.660><c> activity</c>

00:01:04.130 --> 00:01:04.140 align:start position:0%
we're done here on to the main activity
 

00:01:04.140 --> 00:01:06.649 align:start position:0%
we're done here on to the main activity
class<00:01:04.439><c> the</c><00:01:05.339><c> only</c><00:01:05.460><c> thing</c><00:01:05.850><c> it</c><00:01:06.030><c> does</c><00:01:06.270><c> right</c><00:01:06.479><c> now</c>

00:01:06.649 --> 00:01:06.659 align:start position:0%
class the only thing it does right now
 

00:01:06.659 --> 00:01:09.020 align:start position:0%
class the only thing it does right now
is<00:01:06.900><c> set</c><00:01:07.140><c> a</c><00:01:07.170><c> layout</c><00:01:07.530><c> for</c><00:01:07.560><c> the</c><00:01:07.799><c> text</c><00:01:08.100><c> view</c><00:01:08.250><c> let</c><00:01:08.909><c> me</c>

00:01:09.020 --> 00:01:09.030 align:start position:0%
is set a layout for the text view let me
 

00:01:09.030 --> 00:01:11.359 align:start position:0%
is set a layout for the text view let me
open<00:01:09.240><c> the</c><00:01:09.540><c> layout</c><00:01:09.840><c> and</c><00:01:10.049><c> change</c><00:01:10.380><c> that</c><00:01:10.650><c> text</c><00:01:10.979><c> and</c>

00:01:11.359 --> 00:01:11.369 align:start position:0%
open the layout and change that text and
 

00:01:11.369 --> 00:01:16.219 align:start position:0%
open the layout and change that text and
give<00:01:12.180><c> the</c><00:01:12.330><c> textview</c><00:01:12.689><c> an</c><00:01:12.900><c> ID</c><00:01:13.909><c> in</c><00:01:14.909><c> onresume</c><00:01:15.780><c> I'm</c>

00:01:16.219 --> 00:01:16.229 align:start position:0%
give the textview an ID in onresume I'm
 

00:01:16.229 --> 00:01:18.920 align:start position:0%
give the textview an ID in onresume I'm
going<00:01:16.650><c> to</c><00:01:16.770><c> change</c><00:01:17.040><c> the</c><00:01:17.220><c> text</c><00:01:17.430><c> and</c><00:01:17.759><c> I'll</c><00:01:18.720><c> just</c>

00:01:18.920 --> 00:01:18.930 align:start position:0%
going to change the text and I'll just
 

00:01:18.930 --> 00:01:20.570 align:start position:0%
going to change the text and I'll just
quickly<00:01:19.259><c> extract</c><00:01:19.619><c> the</c><00:01:19.920><c> string</c><00:01:20.220><c> into</c><00:01:20.430><c> a</c>

00:01:20.570 --> 00:01:20.580 align:start position:0%
quickly extract the string into a
 

00:01:20.580 --> 00:01:24.700 align:start position:0%
quickly extract the string into a
resource<00:01:21.060><c> for</c><00:01:21.299><c> later</c><00:01:21.540><c> reuse</c>

00:01:24.700 --> 00:01:24.710 align:start position:0%
 
 

00:01:24.710 --> 00:01:27.400 align:start position:0%
 
let's<00:01:25.610><c> create</c><00:01:25.820><c> a</c><00:01:25.880><c> UI</c><00:01:26.150><c> test</c><00:01:26.540><c> for</c><00:01:26.870><c> the</c><00:01:26.960><c> activity</c>

00:01:27.400 --> 00:01:27.410 align:start position:0%
let's create a UI test for the activity
 

00:01:27.410 --> 00:01:33.440 align:start position:0%
let's create a UI test for the activity
using<00:01:27.860><c> an</c><00:01:27.980><c> Android</c><00:01:28.340><c> studio</c><00:01:28.580><c> shortcut</c>

00:01:33.440 --> 00:01:33.450 align:start position:0%
 
 

00:01:33.450 --> 00:01:35.870 align:start position:0%
 
add<00:01:33.560><c> the</c><00:01:34.560><c> annotation</c><00:01:35.130><c> to</c><00:01:35.340><c> use</c><00:01:35.490><c> the</c><00:01:35.670><c> Android</c>

00:01:35.870 --> 00:01:35.880 align:start position:0%
add the annotation to use the Android
 

00:01:35.880 --> 00:01:39.230 align:start position:0%
add the annotation to use the Android
test<00:01:36.299><c> runner</c><00:01:36.539><c> first</c><00:01:37.460><c> then</c><00:01:38.460><c> I</c><00:01:38.490><c> need</c><00:01:38.820><c> to</c><00:01:38.850><c> set</c><00:01:39.210><c> up</c>

00:01:39.230 --> 00:01:39.240 align:start position:0%
test runner first then I need to set up
 

00:01:39.240 --> 00:01:41.090 align:start position:0%
test runner first then I need to set up
the<00:01:39.450><c> activity</c><00:01:39.869><c> test</c><00:01:40.140><c> role</c><00:01:40.409><c> that</c><00:01:40.649><c> will</c><00:01:40.799><c> start</c>

00:01:41.090 --> 00:01:41.100 align:start position:0%
the activity test role that will start
 

00:01:41.100 --> 00:01:43.200 align:start position:0%
the activity test role that will start
my<00:01:41.280><c> activity</c>

00:01:43.200 --> 00:01:43.210 align:start position:0%
my activity
 

00:01:43.210 --> 00:01:45.750 align:start position:0%
my activity
and<00:01:43.680><c> check</c><00:01:44.680><c> if</c><00:01:44.890><c> the</c><00:01:44.979><c> correct</c><00:01:45.280><c> text</c><00:01:45.549><c> is</c>

00:01:45.750 --> 00:01:45.760 align:start position:0%
and check if the correct text is
 

00:01:45.760 --> 00:01:51.300 align:start position:0%
and check if the correct text is
displayed<00:01:45.909><c> I</c><00:01:47.490><c> run</c><00:01:48.490><c> the</c><00:01:48.640><c> test</c><00:01:48.670><c> and</c><00:01:49.710><c> it</c><00:01:50.710><c> passes</c>

00:01:51.300 --> 00:01:51.310 align:start position:0%
displayed I run the test and it passes
 

00:01:51.310 --> 00:01:53.609 align:start position:0%
displayed I run the test and it passes
that's<00:01:52.000><c> because</c><00:01:52.330><c> espresso</c><00:01:52.810><c> waits</c><00:01:53.110><c> until</c><00:01:53.350><c> the</c>

00:01:53.609 --> 00:01:53.619 align:start position:0%
that's because espresso waits until the
 

00:01:53.619 --> 00:01:55.800 align:start position:0%
that's because espresso waits until the
app<00:01:53.770><c> processes</c><00:01:54.400><c> all</c><00:01:54.610><c> lifecycle</c><00:01:55.270><c> events</c><00:01:55.360><c> and</c>

00:01:55.800 --> 00:01:55.810 align:start position:0%
app processes all lifecycle events and
 

00:01:55.810 --> 00:01:57.690 align:start position:0%
app processes all lifecycle events and
I'm<00:01:56.259><c> setting</c><00:01:56.500><c> you</c><00:01:56.619><c> the</c><00:01:56.740><c> text</c><00:01:57.009><c> string</c><00:01:57.220><c> in</c><00:01:57.460><c> on</c>

00:01:57.690 --> 00:01:57.700 align:start position:0%
I'm setting you the text string in on
 

00:01:57.700 --> 00:02:00.359 align:start position:0%
I'm setting you the text string in on
resume<00:01:58.060><c> remember</c><00:01:58.590><c> let's</c><00:01:59.590><c> simulate</c><00:01:59.830><c> a</c><00:02:00.070><c> more</c>

00:02:00.359 --> 00:02:00.369 align:start position:0%
resume remember let's simulate a more
 

00:02:00.369 --> 00:02:02.550 align:start position:0%
resume remember let's simulate a more
realistic<00:02:00.759><c> scenario</c><00:02:01.000><c> where</c><00:02:01.869><c> the</c><00:02:01.990><c> data</c><00:02:02.200><c> takes</c>

00:02:02.550 --> 00:02:02.560 align:start position:0%
realistic scenario where the data takes
 

00:02:02.560 --> 00:02:05.399 align:start position:0%
realistic scenario where the data takes
some<00:02:02.830><c> time</c><00:02:03.040><c> to</c><00:02:03.220><c> load</c><00:02:03.659><c> async</c><00:02:04.659><c> task</c><00:02:04.869><c> is</c><00:02:05.110><c> one</c><00:02:05.290><c> of</c>

00:02:05.399 --> 00:02:05.409 align:start position:0%
some time to load async task is one of
 

00:02:05.409 --> 00:02:07.200 align:start position:0%
some time to load async task is one of
the<00:02:05.530><c> simplest</c><00:02:05.950><c> ways</c><00:02:06.190><c> to</c><00:02:06.460><c> do</c><00:02:06.580><c> background</c><00:02:06.820><c> work</c>

00:02:07.200 --> 00:02:07.210 align:start position:0%
the simplest ways to do background work
 

00:02:07.210 --> 00:02:09.120 align:start position:0%
the simplest ways to do background work
and<00:02:07.479><c> then</c><00:02:07.659><c> pass</c><00:02:07.899><c> a</c><00:02:07.930><c> result</c><00:02:08.410><c> back</c><00:02:08.709><c> to</c><00:02:08.739><c> the</c><00:02:08.890><c> main</c>

00:02:09.120 --> 00:02:09.130 align:start position:0%
and then pass a result back to the main
 

00:02:09.130 --> 00:02:13.020 align:start position:0%
and then pass a result back to the main
thread<00:02:10.620><c> so</c><00:02:11.620><c> what</c><00:02:12.040><c> happens</c><00:02:12.400><c> when</c><00:02:12.580><c> I</c><00:02:12.640><c> run</c><00:02:12.910><c> the</c>

00:02:13.020 --> 00:02:13.030 align:start position:0%
thread so what happens when I run the
 

00:02:13.030 --> 00:02:16.560 align:start position:0%
thread so what happens when I run the
test<00:02:13.239><c> now</c><00:02:14.370><c> surprisingly</c><00:02:15.370><c> it</c><00:02:15.940><c> passes</c>

00:02:16.560 --> 00:02:16.570 align:start position:0%
test now surprisingly it passes
 

00:02:16.570 --> 00:02:18.960 align:start position:0%
test now surprisingly it passes
that's<00:02:17.350><c> because</c><00:02:17.680><c> espresso</c><00:02:18.160><c> also</c><00:02:18.550><c> knows</c><00:02:18.730><c> how</c>

00:02:18.960 --> 00:02:18.970 align:start position:0%
that's because espresso also knows how
 

00:02:18.970 --> 00:02:21.000 align:start position:0%
that's because espresso also knows how
to<00:02:19.000><c> synchronize</c><00:02:19.630><c> on</c><00:02:19.870><c> the</c><00:02:20.019><c> async</c><00:02:20.380><c> task</c><00:02:20.650><c> thread</c>

00:02:21.000 --> 00:02:21.010 align:start position:0%
to synchronize on the async task thread
 

00:02:21.010 --> 00:02:23.790 align:start position:0%
to synchronize on the async task thread
roll<00:02:21.250><c> out</c><00:02:21.459><c> of</c><00:02:21.730><c> the</c><00:02:21.850><c> box</c><00:02:22.060><c> and</c><00:02:22.380><c> because</c><00:02:23.380><c> async</c>

00:02:23.790 --> 00:02:23.800 align:start position:0%
roll out of the box and because async
 

00:02:23.800 --> 00:02:25.920 align:start position:0%
roll out of the box and because async
tasks<00:02:24.130><c> are</c><00:02:24.250><c> also</c><00:02:24.670><c> at</c><00:02:24.790><c> the</c><00:02:24.910><c> heart</c><00:02:25.120><c> of</c><00:02:25.209><c> any</c><00:02:25.390><c> async</c>

00:02:25.920 --> 00:02:25.930 align:start position:0%
tasks are also at the heart of any async
 

00:02:25.930 --> 00:02:28.020 align:start position:0%
tasks are also at the heart of any async
task<00:02:26.140><c> loader</c><00:02:26.310><c> including</c><00:02:27.310><c> cursor</c><00:02:27.670><c> loaders</c>

00:02:28.020 --> 00:02:28.030 align:start position:0%
task loader including cursor loaders
 

00:02:28.030 --> 00:02:30.840 align:start position:0%
task loader including cursor loaders
they<00:02:28.510><c> just</c><00:02:28.810><c> work</c><00:02:29.080><c> of</c><00:02:29.830><c> course</c><00:02:30.100><c> there's</c><00:02:30.459><c> lots</c><00:02:30.580><c> of</c>

00:02:30.840 --> 00:02:30.850 align:start position:0%
they just work of course there's lots of
 

00:02:30.850 --> 00:02:32.430 align:start position:0%
they just work of course there's lots of
other<00:02:31.060><c> ways</c><00:02:31.269><c> you</c><00:02:31.330><c> can</c><00:02:31.630><c> schedule</c><00:02:31.870><c> background</c>

00:02:32.430 --> 00:02:32.440 align:start position:0%
other ways you can schedule background
 

00:02:32.440 --> 00:02:34.410 align:start position:0%
other ways you can schedule background
work<00:02:32.650><c> it</c><00:02:33.280><c> can</c><00:02:33.459><c> be</c><00:02:33.610><c> connecting</c><00:02:34.150><c> to</c><00:02:34.330><c> a</c><00:02:34.360><c> remote</c>

00:02:34.410 --> 00:02:34.420 align:start position:0%
work it can be connecting to a remote
 

00:02:34.420 --> 00:02:36.990 align:start position:0%
work it can be connecting to a remote
API<00:02:34.840><c> using</c><00:02:35.680><c> a</c><00:02:35.769><c> custom</c><00:02:36.250><c> thread</c><00:02:36.519><c> poll</c><00:02:36.730><c> or</c>

00:02:36.990 --> 00:02:37.000 align:start position:0%
API using a custom thread poll or
 

00:02:37.000 --> 00:02:39.479 align:start position:0%
API using a custom thread poll or
through<00:02:37.360><c> handler</c><00:02:37.690><c> messaging</c><00:02:38.200><c> you</c><00:02:39.130><c> can</c><00:02:39.280><c> see</c>

00:02:39.479 --> 00:02:39.489 align:start position:0%
through handler messaging you can see
 

00:02:39.489 --> 00:02:41.460 align:start position:0%
through handler messaging you can see
I'm<00:02:39.670><c> changing</c><00:02:39.700><c> the</c><00:02:40.330><c> code</c><00:02:40.540><c> to</c><00:02:40.810><c> use</c><00:02:40.930><c> a</c><00:02:40.959><c> separate</c>

00:02:41.460 --> 00:02:41.470 align:start position:0%
I'm changing the code to use a separate
 

00:02:41.470 --> 00:02:43.500 align:start position:0%
I'm changing the code to use a separate
thread<00:02:41.709><c> which</c><00:02:42.220><c> sleeps</c><00:02:42.550><c> for</c><00:02:42.760><c> five</c><00:02:42.910><c> seconds</c><00:02:43.330><c> to</c>

00:02:43.500 --> 00:02:43.510 align:start position:0%
thread which sleeps for five seconds to
 

00:02:43.510 --> 00:02:46.080 align:start position:0%
thread which sleeps for five seconds to
simulate<00:02:43.720><c> background</c><00:02:44.380><c> work</c><00:02:44.560><c> then</c><00:02:45.550><c> post</c><00:02:45.880><c> the</c>

00:02:46.080 --> 00:02:46.090 align:start position:0%
simulate background work then post the
 

00:02:46.090 --> 00:02:50.080 align:start position:0%
simulate background work then post the
change<00:02:46.390><c> back</c><00:02:46.660><c> to</c><00:02:46.690><c> the</c><00:02:46.840><c> main</c><00:02:47.110><c> thread</c>

00:02:50.080 --> 00:02:50.090 align:start position:0%
 
 

00:02:50.090 --> 00:02:52.930 align:start position:0%
 
when<00:02:50.959><c> I</c><00:02:50.989><c> run</c><00:02:51.260><c> the</c><00:02:51.410><c> test</c><00:02:51.440><c> it</c><00:02:51.950><c> fails</c><00:02:52.250><c> immediately</c>

00:02:52.930 --> 00:02:52.940 align:start position:0%
when I run the test it fails immediately
 

00:02:52.940 --> 00:02:55.809 align:start position:0%
when I run the test it fails immediately
as<00:02:53.810><c> soon</c><00:02:54.140><c> as</c><00:02:54.260><c> onresume</c><00:02:54.650><c> returns</c><00:02:55.190><c> and</c><00:02:55.459><c> the</c>

00:02:55.809 --> 00:02:55.819 align:start position:0%
as soon as onresume returns and the
 

00:02:55.819 --> 00:02:58.089 align:start position:0%
as soon as onresume returns and the
activity<00:02:56.239><c> is</c><00:02:56.420><c> idle</c><00:02:56.810><c> espresso</c><00:02:57.560><c> is</c><00:02:57.680><c> trying</c><00:02:57.950><c> to</c>

00:02:58.089 --> 00:02:58.099 align:start position:0%
activity is idle espresso is trying to
 

00:02:58.099 --> 00:02:59.860 align:start position:0%
activity is idle espresso is trying to
validate<00:02:58.280><c> the</c><00:02:58.670><c> message</c><00:02:59.000><c> on</c><00:02:59.120><c> the</c><00:02:59.239><c> textview</c><00:02:59.599><c> and</c>

00:02:59.860 --> 00:02:59.870 align:start position:0%
validate the message on the textview and
 

00:02:59.870 --> 00:03:01.809 align:start position:0%
validate the message on the textview and
it<00:02:59.959><c> fails</c><00:03:00.200><c> because</c><00:03:00.680><c> the</c><00:03:00.860><c> runnable</c><00:03:01.340><c> hasn't</c><00:03:01.700><c> had</c>

00:03:01.809 --> 00:03:01.819 align:start position:0%
it fails because the runnable hasn't had
 

00:03:01.819 --> 00:03:03.970 align:start position:0%
it fails because the runnable hasn't had
a<00:03:01.849><c> chance</c><00:03:02.180><c> to</c><00:03:02.330><c> run</c><00:03:02.510><c> yet</c><00:03:02.690><c> that's</c><00:03:03.440><c> when</c><00:03:03.680><c> you</c><00:03:03.770><c> have</c>

00:03:03.970 --> 00:03:03.980 align:start position:0%
a chance to run yet that's when you have
 

00:03:03.980 --> 00:03:06.280 align:start position:0%
a chance to run yet that's when you have
to<00:03:04.160><c> use</c><00:03:04.370><c> iving</c><00:03:04.849><c> resource</c><00:03:05.330><c> to</c><00:03:05.569><c> tell</c><00:03:05.750><c> us</c><00:03:05.900><c> press</c><00:03:06.140><c> o</c>

00:03:06.280 --> 00:03:06.290 align:start position:0%
to use iving resource to tell us press o
 

00:03:06.290 --> 00:03:09.160 align:start position:0%
to use iving resource to tell us press o
when<00:03:06.560><c> your</c><00:03:06.739><c> app</c><00:03:06.890><c> is</c><00:03:07.069><c> busy</c><00:03:07.459><c> processing</c><00:03:08.170><c> I'll</c>

00:03:09.160 --> 00:03:09.170 align:start position:0%
when your app is busy processing I'll
 

00:03:09.170 --> 00:03:10.690 align:start position:0%
when your app is busy processing I'll
use<00:03:09.410><c> an</c><00:03:09.560><c> implementation</c><00:03:10.160><c> of</c><00:03:10.280><c> an</c><00:03:10.370><c> idling</c>

00:03:10.690 --> 00:03:10.700 align:start position:0%
use an implementation of an idling
 

00:03:10.700 --> 00:03:12.190 align:start position:0%
use an implementation of an idling
resource<00:03:11.120><c> that</c><00:03:11.330><c> we</c><00:03:11.450><c> provide</c><00:03:11.780><c> with</c><00:03:11.930><c> espresso</c>

00:03:12.190 --> 00:03:12.200 align:start position:0%
resource that we provide with espresso
 

00:03:12.200 --> 00:03:15.490 align:start position:0%
resource that we provide with espresso
called<00:03:12.860><c> counting</c><00:03:13.430><c> idling</c><00:03:13.910><c> resource</c><00:03:14.500><c> it's</c>

00:03:15.490 --> 00:03:15.500 align:start position:0%
called counting idling resource it's
 

00:03:15.500 --> 00:03:17.440 align:start position:0%
called counting idling resource it's
very<00:03:15.709><c> simple</c><00:03:16.040><c> to</c><00:03:16.190><c> use</c><00:03:16.220><c> and</c><00:03:16.640><c> it</c><00:03:16.819><c> basically</c><00:03:17.000><c> lets</c>

00:03:17.440 --> 00:03:17.450 align:start position:0%
very simple to use and it basically lets
 

00:03:17.450 --> 00:03:19.449 align:start position:0%
very simple to use and it basically lets
you<00:03:17.660><c> increment</c><00:03:18.140><c> the</c><00:03:18.380><c> counter</c><00:03:18.739><c> for</c><00:03:18.980><c> every</c>

00:03:19.449 --> 00:03:19.459 align:start position:0%
you increment the counter for every
 

00:03:19.459 --> 00:03:21.070 align:start position:0%
you increment the counter for every
resource<00:03:19.790><c> that</c><00:03:19.910><c> is</c><00:03:20.150><c> busy</c><00:03:20.510><c> when</c><00:03:20.959><c> you're</c>

00:03:21.070 --> 00:03:21.080 align:start position:0%
resource that is busy when you're
 

00:03:21.080 --> 00:03:22.509 align:start position:0%
resource that is busy when you're
waiting<00:03:21.319><c> for</c><00:03:21.470><c> something</c><00:03:21.830><c> to</c><00:03:22.069><c> finish</c><00:03:22.220><c> loading</c>

00:03:22.509 --> 00:03:22.519 align:start position:0%
waiting for something to finish loading
 

00:03:22.519 --> 00:03:25.990 align:start position:0%
waiting for something to finish loading
and<00:03:22.930><c> decrement</c><00:03:23.930><c> it</c><00:03:24.049><c> when</c><00:03:24.290><c> it's</c><00:03:24.440><c> done</c><00:03:25.000><c> espresso</c>

00:03:25.990 --> 00:03:26.000 align:start position:0%
and decrement it when it's done espresso
 

00:03:26.000 --> 00:03:27.850 align:start position:0%
and decrement it when it's done espresso
will<00:03:26.209><c> automatically</c><00:03:26.989><c> run</c><00:03:27.170><c> whenever</c><00:03:27.680><c> the</c>

00:03:27.850 --> 00:03:27.860 align:start position:0%
will automatically run whenever the
 

00:03:27.860 --> 00:03:29.620 align:start position:0%
will automatically run whenever the
counter<00:03:28.190><c> is</c><00:03:28.310><c> at</c><00:03:28.459><c> zero</c><00:03:28.760><c> I'll</c><00:03:29.000><c> give</c><00:03:29.420><c> it</c><00:03:29.510><c> a</c><00:03:29.600><c> name</c>

00:03:29.620 --> 00:03:29.630 align:start position:0%
counter is at zero I'll give it a name
 

00:03:29.630 --> 00:03:32.590 align:start position:0%
counter is at zero I'll give it a name
data<00:03:30.380><c> loader</c><00:03:30.680><c> used</c><00:03:31.430><c> mostly</c><00:03:31.790><c> for</c><00:03:31.880><c> logging</c><00:03:32.390><c> but</c>

00:03:32.590 --> 00:03:32.600 align:start position:0%
data loader used mostly for logging but
 

00:03:32.600 --> 00:03:34.090 align:start position:0%
data loader used mostly for logging but
it<00:03:32.720><c> has</c><00:03:32.930><c> to</c><00:03:33.080><c> be</c><00:03:33.200><c> unique</c><00:03:33.500><c> among</c><00:03:33.920><c> registered</c>

00:03:34.090 --> 00:03:34.100 align:start position:0%
it has to be unique among registered
 

00:03:34.100 --> 00:03:38.259 align:start position:0%
it has to be unique among registered
idling<00:03:34.849><c> resources</c><00:03:36.040><c> now</c><00:03:37.040><c> increment</c><00:03:37.849><c> before</c>

00:03:38.259 --> 00:03:38.269 align:start position:0%
idling resources now increment before
 

00:03:38.269 --> 00:03:40.449 align:start position:0%
idling resources now increment before
scheduling<00:03:38.810><c> my</c><00:03:38.959><c> runnable</c><00:03:39.440><c> and</c><00:03:39.650><c> decrement</c>

00:03:40.449 --> 00:03:40.459 align:start position:0%
scheduling my runnable and decrement
 

00:03:40.459 --> 00:03:44.320 align:start position:0%
scheduling my runnable and decrement
when<00:03:40.670><c> it's</c><00:03:40.819><c> done</c><00:03:42.190><c> the</c><00:03:43.190><c> only</c><00:03:43.430><c> thing</c><00:03:43.640><c> left</c><00:03:43.910><c> is</c><00:03:44.269><c> to</c>

00:03:44.320 --> 00:03:44.330 align:start position:0%
when it's done the only thing left is to
 

00:03:44.330 --> 00:03:47.350 align:start position:0%
when it's done the only thing left is to
register<00:03:44.900><c> the</c><00:03:45.049><c> resource</c><00:03:45.440><c> with</c><00:03:45.739><c> espresso</c><00:03:46.360><c> in</c>

00:03:47.350 --> 00:03:47.360 align:start position:0%
register the resource with espresso in
 

00:03:47.360 --> 00:03:49.270 align:start position:0%
register the resource with espresso in
the<00:03:47.569><c> test</c><00:03:47.810><c> class</c><00:03:48.049><c> I'll</c><00:03:48.319><c> add</c><00:03:48.650><c> a</c><00:03:48.680><c> setup</c><00:03:49.099><c> method</c>

00:03:49.270 --> 00:03:49.280 align:start position:0%
the test class I'll add a setup method
 

00:03:49.280 --> 00:03:51.160 align:start position:0%
the test class I'll add a setup method
to<00:03:49.640><c> grab</c><00:03:49.849><c> the</c><00:03:49.970><c> idling</c><00:03:50.299><c> resource</c><00:03:50.450><c> instance</c>

00:03:51.160 --> 00:03:51.170 align:start position:0%
to grab the idling resource instance
 

00:03:51.170 --> 00:03:54.699 align:start position:0%
to grab the idling resource instance
from<00:03:51.380><c> the</c><00:03:51.620><c> activity</c><00:03:52.569><c> and</c><00:03:53.569><c> it's</c><00:03:53.989><c> done</c><00:03:54.260><c> run</c>

00:03:54.699 --> 00:03:54.709 align:start position:0%
from the activity and it's done run
 

00:03:54.709 --> 00:03:56.949 align:start position:0%
from the activity and it's done run
tests<00:03:55.040><c> after</c><00:03:55.730><c> five</c><00:03:56.030><c> seconds</c><00:03:56.480><c> the</c><00:03:56.600><c> counter</c>

00:03:56.949 --> 00:03:56.959 align:start position:0%
tests after five seconds the counter
 

00:03:56.959 --> 00:04:00.520 align:start position:0%
tests after five seconds the counter
gets<00:03:57.170><c> decremented</c><00:03:57.410><c> and</c><00:03:58.160><c> the</c><00:03:58.609><c> test</c><00:03:58.880><c> passes</c><00:03:59.530><c> to</c>

00:04:00.520 --> 00:04:00.530 align:start position:0%
gets decremented and the test passes to
 

00:04:00.530 --> 00:04:02.319 align:start position:0%
gets decremented and the test passes to
sum<00:04:00.709><c> up</c><00:04:00.859><c> if</c><00:04:01.070><c> your</c><00:04:01.340><c> tests</c><00:04:01.730><c> are</c><00:04:01.790><c> flaky</c><00:04:01.940><c> or</c>

00:04:02.319 --> 00:04:02.329 align:start position:0%
sum up if your tests are flaky or
 

00:04:02.329 --> 00:04:04.360 align:start position:0%
sum up if your tests are flaky or
outright<00:04:02.989><c> failing</c><00:04:03.410><c> because</c><00:04:03.620><c> of</c><00:04:03.890><c> background</c>

00:04:04.360 --> 00:04:04.370 align:start position:0%
outright failing because of background
 

00:04:04.370 --> 00:04:06.729 align:start position:0%
outright failing because of background
threads<00:04:04.640><c> and</c><00:04:04.880><c> synchronous</c><00:04:05.569><c> events</c><00:04:05.930><c> use</c>

00:04:06.729 --> 00:04:06.739 align:start position:0%
threads and synchronous events use
 

00:04:06.739 --> 00:04:09.190 align:start position:0%
threads and synchronous events use
idling<00:04:07.190><c> resource</c><00:04:07.340><c> to</c><00:04:07.940><c> tell</c><00:04:08.239><c> espresso</c><00:04:08.720><c> when</c><00:04:09.049><c> to</c>

00:04:09.190 --> 00:04:09.200 align:start position:0%
idling resource to tell espresso when to
 

00:04:09.200 --> 00:04:11.710 align:start position:0%
idling resource to tell espresso when to
pause<00:04:09.380><c> and</c><00:04:09.680><c> resume</c><00:04:09.890><c> its</c><00:04:10.190><c> work</c><00:04:10.430><c> that's</c><00:04:11.390><c> all</c><00:04:11.540><c> for</c>

00:04:11.710 --> 00:04:11.720 align:start position:0%
pause and resume its work that's all for
 

00:04:11.720 --> 00:04:15.069 align:start position:0%
pause and resume its work that's all for
this<00:04:11.840><c> episode</c><00:04:11.900><c> happy</c><00:04:12.890><c> testing</c>

