WEBVTT
Kind: captions
Language: en

00:00:04.720 --> 00:00:06.640
MELODY MECKFESSEL:
So hi, welcome.

00:00:06.640 --> 00:00:08.420
My name's Melody
Meckfessel, and I'm

00:00:08.420 --> 00:00:10.470
an Engineering
Director at Google.

00:00:10.470 --> 00:00:12.340
I'm responsible for
the developer tooling

00:00:12.340 --> 00:00:15.360
and infrastructure for our
Cloud Platform and for Google

00:00:15.360 --> 00:00:16.571
engineers.

00:00:16.571 --> 00:00:18.070
TOMAS ISDAL: My
name is Tomas Isdal.

00:00:18.070 --> 00:00:19.766
I'm a Software
Engineer, and I am

00:00:19.766 --> 00:00:22.564
the Tech Lead for Managed VMs.

00:00:22.564 --> 00:00:23.980
MELODY MECKFESSEL:
So we're really

00:00:23.980 --> 00:00:26.970
excited to be here today
to talk to you about DevOps

00:00:26.970 --> 00:00:28.770
at the speed of Google.

00:00:28.770 --> 00:00:31.710
Google builds some of the
world's largest applications

00:00:31.710 --> 00:00:37.410
and services, google.com,
Gmail, YouTube.

00:00:37.410 --> 00:00:38.930
And the reason
our developers are

00:00:38.930 --> 00:00:42.740
able to work efficiently to
build and run these services

00:00:42.740 --> 00:00:45.460
is because we have a
great set of tools.

00:00:45.460 --> 00:00:48.930
We've spent the last 15
years building and developing

00:00:48.930 --> 00:00:51.230
these tools, and
we're so happy to be

00:00:51.230 --> 00:00:53.940
able to offer them to you.

00:00:53.940 --> 00:00:56.860
Today we're going to talk
through what Google offers

00:00:56.860 --> 00:00:59.170
you, developers,
for getting code

00:00:59.170 --> 00:01:01.720
out the door to your users.

00:01:01.720 --> 00:01:04.010
But what do we mean by DevOps?

00:01:04.010 --> 00:01:07.980
You all probably have a
somewhat different definition.

00:01:07.980 --> 00:01:10.930
DevOps is a way of bringing
software developers

00:01:10.930 --> 00:01:12.870
and operations together.

00:01:12.870 --> 00:01:15.680
And I think the key
here is integration.

00:01:15.680 --> 00:01:19.350
Learning and improving
your code by bringing dev--

00:01:19.350 --> 00:01:22.200
writing your code--
and ops-- running

00:01:22.200 --> 00:01:26.080
your service and your code--
in the Cloud closer together.

00:01:26.080 --> 00:01:29.910
Automate away the parts of ops
you don't need to worry about.

00:01:29.910 --> 00:01:33.620
The goal should be faster
development, faster deployment,

00:01:33.620 --> 00:01:35.796
and ultimately, more
predictable operations.

00:01:39.460 --> 00:01:41.500
So I've worked on a
bunch of projects--

00:01:41.500 --> 00:01:45.870
experimental projects, as well
as massive legacy systems.

00:01:45.870 --> 00:01:48.260
Some with small
communities and others

00:01:48.260 --> 00:01:50.920
with hundreds of
millions of users.

00:01:50.920 --> 00:01:55.260
And it can be so energizing
and invigorating to work

00:01:55.260 --> 00:01:56.500
on these apps.

00:01:56.500 --> 00:01:59.920
But it can also be
frustrating and exhausting.

00:01:59.920 --> 00:02:02.610
We want to build
cool features, but we

00:02:02.610 --> 00:02:07.020
end up spending a huge
amount of overhead, time,

00:02:07.020 --> 00:02:09.490
overhead, on release
and deployment

00:02:09.490 --> 00:02:12.940
or on operational work just
to keep things running.

00:02:12.940 --> 00:02:15.580
And, just to tell
a story here, but I

00:02:15.580 --> 00:02:20.850
remember sleeping with my pager
in my hand under my pillow,

00:02:20.850 --> 00:02:22.585
for months at a time.

00:02:22.585 --> 00:02:25.150
And I still have
nightmares of waking up

00:02:25.150 --> 00:02:28.870
in the middle of the night,
with that buzzing in my hand,

00:02:28.870 --> 00:02:31.820
of some failure I needed to fix.

00:02:31.820 --> 00:02:35.790
So at Google, we think the cloud
is about much more than just

00:02:35.790 --> 00:02:38.720
giving you raw VMs and storage.

00:02:38.720 --> 00:02:41.890
We can offer you
much more than that.

00:02:41.890 --> 00:02:46.020
You deserve to have a platform
that can automate away

00:02:46.020 --> 00:02:50.810
the time consuming tasks that
you don't need to worry about,

00:02:50.810 --> 00:02:53.340
to just get rid of
repetitive DevOps tasks,

00:02:53.340 --> 00:02:58.030
so that we free up your time
to work on new features, apps,

00:02:58.030 --> 00:03:00.259
or new business ideas.

00:03:00.259 --> 00:03:01.800
So today we're going
to show you some

00:03:01.800 --> 00:03:03.680
of the first steps
that we're taking

00:03:03.680 --> 00:03:05.530
and the direction we're heading.

00:03:05.530 --> 00:03:07.880
We're going to focus and
start when you already

00:03:07.880 --> 00:03:09.770
have a working app.

00:03:09.770 --> 00:03:12.620
And we're going to show
you how to track down

00:03:12.620 --> 00:03:14.600
performance issues
with your app.

00:03:14.600 --> 00:03:17.967
Test it, deploy it, how
you make sure that it

00:03:17.967 --> 00:03:18.925
stays running smoothly.

00:03:22.460 --> 00:03:25.540
TOMAS ISDAL: So we announced
Managed Virtual Machines

00:03:25.540 --> 00:03:28.800
at the Google Live event
in March this year.

00:03:28.800 --> 00:03:32.840
With Managed VMs, we
combine the flexibility

00:03:32.840 --> 00:03:35.740
of Google Compute Engine, our
infrastructure as a service

00:03:35.740 --> 00:03:38.830
offering, with the ease
of use and reliability

00:03:38.830 --> 00:03:42.030
of App Engine, our platform
as a service offering.

00:03:42.030 --> 00:03:44.490
If you're an existing App
Engine customer today,

00:03:44.490 --> 00:03:47.270
you only need to change one
line in a configuration file

00:03:47.270 --> 00:03:52.560
to take advantage of everything
Managed VMs has to offer.

00:03:52.560 --> 00:03:55.040
For this session, we'll
use Managed VMs to power

00:03:55.040 --> 00:03:57.280
all our demos.

00:03:57.280 --> 00:03:59.630
When you run your
app on Managed VMs,

00:03:59.630 --> 00:04:01.690
we set everything
up automatically,

00:04:01.690 --> 00:04:05.330
so you get access to version
deployments, software updates,

00:04:05.330 --> 00:04:07.100
automatic health checking.

00:04:07.100 --> 00:04:09.690
If a VM goes bad,
we try to heal it,

00:04:09.690 --> 00:04:13.330
by basically kicking
it and restarting it.

00:04:13.330 --> 00:04:17.620
We do load balancing,
scaling, logging analysis.

00:04:17.620 --> 00:04:19.779
We hook up debugging tools.

00:04:19.779 --> 00:04:22.950
We do performance
tracking and so on.

00:04:22.950 --> 00:04:25.640
Can we switch to a demo, please?

00:04:25.640 --> 00:04:28.910
And well, best of all of
course, let's not forget this.

00:04:28.910 --> 00:04:33.150
Google has a really good Site
Reliability Team spread out all

00:04:33.150 --> 00:04:34.590
over the world.

00:04:34.590 --> 00:04:38.650
So whenever there's a
power outage, network cut,

00:04:38.650 --> 00:04:41.490
hurricanes, or anything else
impacting the data center where

00:04:41.490 --> 00:04:44.890
you're app is serving,
you can trust us

00:04:44.890 --> 00:04:47.210
that someone from
Google is awake.

00:04:47.210 --> 00:04:49.350
And he is on track
to fix it already,

00:04:49.350 --> 00:04:53.865
which means that we carry the
pagers, and you don't have to.

00:04:53.865 --> 00:04:54.865
Can we switch to a demo?

00:04:59.300 --> 00:05:04.010
So having confidence that your
app is running is just a start.

00:05:04.010 --> 00:05:08.270
Another key part of
DevOps is understanding

00:05:08.270 --> 00:05:10.480
how your app is performing.

00:05:10.480 --> 00:05:12.860
So a benefit of Managed
VMs is that we hook up

00:05:12.860 --> 00:05:16.150
the infrastructure you need
to answer questions like,

00:05:16.150 --> 00:05:17.950
how is the performance
of my app right now?

00:05:21.340 --> 00:05:29.677
So here, I have loaded
the WalkShare demo app.

00:05:29.677 --> 00:05:32.010
You might have recognized
this from the previous session

00:05:32.010 --> 00:05:34.470
and from the keynote.

00:05:34.470 --> 00:05:38.030
So we got a bug report
that says that as you

00:05:38.030 --> 00:05:42.530
load a lot of comments, this app
is starting to get really slow.

00:05:42.530 --> 00:05:44.880
So I'm going to jump
in to Debug View

00:05:44.880 --> 00:05:49.270
right here that we implemented
that can reproduce this issue.

00:05:49.270 --> 00:05:52.650
So to jump in to really
reproduce the problem,

00:05:52.650 --> 00:05:55.362
we heard that whenever there's
more than 5,000 comments,

00:05:55.362 --> 00:05:56.320
things get really slow.

00:05:56.320 --> 00:05:58.520
So I'm going to load
here, and then we're

00:05:58.520 --> 00:06:02.580
going to see if we can
reproduce it here live as well.

00:06:02.580 --> 00:06:05.030
There it loaded, but
I control the account,

00:06:05.030 --> 00:06:08.820
like five, one, two, three.

00:06:08.820 --> 00:06:10.760
So at least a three
second latency just

00:06:10.760 --> 00:06:13.450
to load the next 50
comments in our app.

00:06:13.450 --> 00:06:15.520
So this is obviously
not what we want

00:06:15.520 --> 00:06:18.480
as we launch this
app to customers.

00:06:18.480 --> 00:06:21.660
So a new feature in Cloud
that we've been working on

00:06:21.660 --> 00:06:24.970
for some time is Cloud Tracing.

00:06:24.970 --> 00:06:27.530
This allows you
to go in and look

00:06:27.530 --> 00:06:32.240
to see which RPCs
your app is making.

00:06:32.240 --> 00:06:36.240
Let's load up the Cloud
Trace UI here, and dive in,

00:06:36.240 --> 00:06:37.930
to see what's going on.

00:06:37.930 --> 00:06:42.210
So here's the list in the new
Cloud Console that shows us

00:06:42.210 --> 00:06:45.040
the RPCs that are
made by this app.

00:06:45.040 --> 00:06:46.920
So you see here, we
just had the request

00:06:46.920 --> 00:06:51.830
to the comment-admin
page running

00:06:51.830 --> 00:06:55.520
fetching comment
5,100 and forward.

00:06:55.520 --> 00:06:59.600
As we dig in here, we see here
that they have higher response

00:06:59.600 --> 00:07:03.660
to 2.3 seconds, so really slow.

00:07:03.660 --> 00:07:06.070
We spend some time in
Datastore and RunQuery,

00:07:06.070 --> 00:07:08.410
but we also spend
a lot of time just

00:07:08.410 --> 00:07:11.340
fetching additional
Datastore results.

00:07:11.340 --> 00:07:15.180
So my suspicion here is that
instead of fetching just the 50

00:07:15.180 --> 00:07:18.760
comments that we care about, we
actually fetch 5,000 comments,

00:07:18.760 --> 00:07:21.960
and then we fetch the 50
comments we care about.

00:07:21.960 --> 00:07:23.310
Clearly not good.

00:07:23.310 --> 00:07:27.530
So I'm going to load
our Source Code Viewer.

00:07:27.530 --> 00:07:30.050
This viewer is hooked
up to the Git Repository

00:07:30.050 --> 00:07:31.950
that's serving your app.

00:07:31.950 --> 00:07:34.820
So this is basically
allowing me to browse

00:07:34.820 --> 00:07:37.160
the PROD code we have right now.

00:07:37.160 --> 00:07:40.560
Well, I see here, TODO, Isdal.

00:07:40.560 --> 00:07:42.260
Do not use offset, it is slow!

00:07:45.310 --> 00:07:50.110
So this means that when
I did an Offset Query,

00:07:50.110 --> 00:07:52.240
if I had read the
documentation, I

00:07:52.240 --> 00:07:55.140
would have known that it's
actually fetching everything

00:07:55.140 --> 00:07:58.050
up to the offset
I'm looking for.

00:07:58.050 --> 00:07:59.510
Also in the
documentation it says

00:07:59.510 --> 00:08:03.310
that Query Cursors
is the way to go.

00:08:03.310 --> 00:08:06.000
So I'm going to just
delete this one.

00:08:09.220 --> 00:08:12.180
Delete the code here.

00:08:12.180 --> 00:08:16.520
And I'm going to switch to
this conveniently placed cursor

00:08:16.520 --> 00:08:17.930
implementation right below.

00:08:20.710 --> 00:08:21.550
And then commit it.

00:08:21.550 --> 00:08:27.344
So switch from offset to query.

00:08:33.770 --> 00:08:37.919
As I hit commit
here, we have hooks

00:08:37.919 --> 00:08:40.850
that notifies our build,
test, and deploy pipeline

00:08:40.850 --> 00:08:43.230
that a change was made.

00:08:43.230 --> 00:08:46.519
And this is going
to trigger first

00:08:46.519 --> 00:08:48.060
a compilation of
all our source code.

00:08:48.060 --> 00:08:50.550
This is Java, so we
need to compile it.

00:08:50.550 --> 00:08:52.620
Then it's going to trigger
all our unit tests,

00:08:52.620 --> 00:08:55.750
and if everything is
green, it will push it

00:08:55.750 --> 00:08:57.254
to our staging environment.

00:08:57.254 --> 00:08:58.420
So let's see how it's doing.

00:09:02.420 --> 00:09:08.880
As we load this page, we
see that the deployment

00:09:08.880 --> 00:09:13.610
is in progress, but our PROD app
is still using the old version.

00:09:13.610 --> 00:09:15.550
So we don't have to worry
about pushing things

00:09:15.550 --> 00:09:16.690
to PROD by accident.

00:09:20.210 --> 00:09:22.300
So can we switch back
to the slides, please?

00:09:26.580 --> 00:09:28.670
MELODY MECKFESSEL:
So pretty cool stuff.

00:09:28.670 --> 00:09:31.170
We're going to talk a little
bit about continuous delivery

00:09:31.170 --> 00:09:34.150
in a second, but I wanted
to share some numbers

00:09:34.150 --> 00:09:37.200
behind the scale of Google's
internal developer tooling

00:09:37.200 --> 00:09:38.720
and infrastructure.

00:09:38.720 --> 00:09:42.190
So each and every
day, Google engineers

00:09:42.190 --> 00:09:46.540
will execute 800,000
builds, generating over

00:09:46.540 --> 00:09:49.470
two petabytes of build output.

00:09:49.470 --> 00:09:54.800
Over 100 million test cases run
with over 30,000 changelists

00:09:54.800 --> 00:09:56.340
each and every day.

00:09:56.340 --> 00:09:58.600
Now, those numbers
may seem large,

00:09:58.600 --> 00:10:00.910
but that's the type
of scale that we

00:10:00.910 --> 00:10:04.096
want to deliver to you as part
of your DevOps experience.

00:10:07.620 --> 00:10:09.590
So let's talk a little
bit about the importance

00:10:09.590 --> 00:10:11.750
of continuous delivery.

00:10:11.750 --> 00:10:15.940
So understanding application
performance, it's important,

00:10:15.940 --> 00:10:20.220
but it's just one part of
the development life cycle.

00:10:20.220 --> 00:10:23.420
The life cycle starts
an idea, a feature.

00:10:23.420 --> 00:10:25.860
And then that turns into code.

00:10:25.860 --> 00:10:30.430
It gets tested, and
then finally shipped.

00:10:30.430 --> 00:10:34.460
And reliability of
delivery is important.

00:10:34.460 --> 00:10:37.560
You want to know for sure that
the changes you're pushing

00:10:37.560 --> 00:10:40.850
are not going to
break production.

00:10:40.850 --> 00:10:42.970
You don't want to
just push and hope,

00:10:42.970 --> 00:10:45.720
just pray that everything's
going to be OK.

00:10:45.720 --> 00:10:49.030
And you certainly don't
want to be waking up

00:10:49.030 --> 00:10:52.310
in the middle of the night
with that pager alert.

00:10:52.310 --> 00:10:55.300
So getting to live
faster makes you happy.

00:10:55.300 --> 00:10:59.020
It enables us to
innovate faster.

00:10:59.020 --> 00:11:03.900
Whether you're working on a
feature or fixing a simple bug,

00:11:03.900 --> 00:11:07.740
you want to see that
change live in minutes.

00:11:07.740 --> 00:11:10.990
Not hours or days.

00:11:10.990 --> 00:11:14.690
And this allows you to update
your application incrementally.

00:11:14.690 --> 00:11:18.430
With faster deployment, you
have more frequent, and smaller

00:11:18.430 --> 00:11:19.720
releases.

00:11:19.720 --> 00:11:22.560
So you're updating your
application incrementally.

00:11:22.560 --> 00:11:25.725
So that you know if something
goes wrong, it's easier for you

00:11:25.725 --> 00:11:31.220
to trace back to the issue
and potentially roll back.

00:11:31.220 --> 00:11:33.680
So I know nobody likes it
when changes take forever

00:11:33.680 --> 00:11:36.320
to get to production,
but I think

00:11:36.320 --> 00:11:40.900
what's even worse is not
knowing where your changes are.

00:11:40.900 --> 00:11:43.160
So deployments, we
believe they should

00:11:43.160 --> 00:11:46.230
be visible and predictable.

00:11:46.230 --> 00:11:48.310
You shouldn't have to
have a crystal ball,

00:11:48.310 --> 00:11:50.960
or have to chase down a
release manager or someone else

00:11:50.960 --> 00:11:54.740
on your team, to know
which bits are where.

00:11:54.740 --> 00:11:57.790
So from that get commit
that we made earlier,

00:11:57.790 --> 00:12:00.390
we triggered the
Push-to-Deploy Pipeline.

00:12:03.010 --> 00:12:05.560
As soon as we detect
that new commit,

00:12:05.560 --> 00:12:09.780
we triggered a Jenkins-based
job to build, test, and deploy

00:12:09.780 --> 00:12:11.270
the application.

00:12:11.270 --> 00:12:13.870
So Jenkins is an
open source framework

00:12:13.870 --> 00:12:17.790
that provides a very easy to use
continuous integration system.

00:12:17.790 --> 00:12:21.190
It enables developers
to update their projects

00:12:21.190 --> 00:12:22.910
and attain a fresh build.

00:12:22.910 --> 00:12:24.800
And that's what we're
using behind the scenes

00:12:24.800 --> 00:12:27.550
for the Push-to-Deploy workflow.

00:12:27.550 --> 00:12:29.110
So these changes
should already be

00:12:29.110 --> 00:12:31.650
deployed in our
staging environment.

00:12:31.650 --> 00:12:34.520
But now we want to
promote those changes

00:12:34.520 --> 00:12:38.110
from staging into
production so that our end

00:12:38.110 --> 00:12:40.430
users can benefit from this.

00:12:40.430 --> 00:12:43.950
And this really highlights
the idea of DevOps.

00:12:43.950 --> 00:12:47.530
We're writing code, we
see there's an issue,

00:12:47.530 --> 00:12:51.030
we track it down using Tracing.

00:12:51.030 --> 00:12:52.410
We make the fix.

00:12:52.410 --> 00:12:53.920
We commit it again.

00:12:53.920 --> 00:12:56.040
We verify that it's in staging.

00:12:56.040 --> 00:12:58.450
And then we're ready to
move it on to production.

00:12:58.450 --> 00:13:01.636
So let's take a look at
our Release Pipeline.

00:13:01.636 --> 00:13:02.885
Can we switch to demo, please?

00:13:07.340 --> 00:13:11.150
So I'm going to peek
back and forth here.

00:13:11.150 --> 00:13:12.780
So you can see here
that our change

00:13:12.780 --> 00:13:15.480
was uploaded successfully.

00:13:15.480 --> 00:13:19.280
And the multi-stage
Release Pipeline work, this

00:13:19.280 --> 00:13:21.590
enables us to bring
together multiple projects

00:13:21.590 --> 00:13:22.850
and multiple environments.

00:13:22.850 --> 00:13:25.150
And the whole goal
here is to make it easy

00:13:25.150 --> 00:13:29.700
for you to bring those pieces
together, to get your code out

00:13:29.700 --> 00:13:31.900
to your users with
the push of your code,

00:13:31.900 --> 00:13:34.180
or a click of a button.

00:13:34.180 --> 00:13:37.900
So here we can see it
happened successfully.

00:13:37.900 --> 00:13:40.260
But let's actually
go check to make sure

00:13:40.260 --> 00:13:45.810
that the fix that we
committed worked as we expect.

00:13:45.810 --> 00:13:49.795
So I'm going to go back and I'm
going to look at List Comments.

00:13:49.795 --> 00:13:51.470
I'm going to click.

00:13:51.470 --> 00:13:52.480
Click More.

00:13:52.480 --> 00:13:55.922
It seems pretty fast.

00:13:55.922 --> 00:13:57.755
Well, let's go look at
the Trace to be sure.

00:14:13.890 --> 00:14:15.245
It's taking a second here.

00:14:26.540 --> 00:14:32.960
It seems like it's got
updated. [LAUGHING] Demo-gods

00:14:32.960 --> 00:14:35.202
in our favor, please.

00:14:35.202 --> 00:14:37.660
TOMAS ISDAL: At least they're
on the opposite slide, right?

00:14:37.660 --> 00:14:38.380
MELODY MECKFESSEL:
Oh, there we go.

00:14:38.380 --> 00:14:39.421
TOMAS ISDAL: There we go.

00:14:39.421 --> 00:14:41.690
MELODY MECKFESSEL:
There we go. [LAUGHING]

00:14:41.690 --> 00:14:44.550
So yeah, you can see
here that the change is

00:14:44.550 --> 00:14:46.350
taking significantly less time.

00:14:46.350 --> 00:14:48.890
So that makes me feel
better about pushing out

00:14:48.890 --> 00:14:50.230
to production.

00:14:50.230 --> 00:14:53.610
So now I'm going to go back
to the Release Pipelines

00:14:53.610 --> 00:14:57.050
page in our Dev Console.

00:14:57.050 --> 00:14:59.190
And I'm just going
to click Promote.

00:14:59.190 --> 00:15:00.990
And that's it.

00:15:00.990 --> 00:15:02.890
In the background,
we're going to start up

00:15:02.890 --> 00:15:06.640
another Jenkins-based job
to build, test, and deploy

00:15:06.640 --> 00:15:10.320
our app to production, so that
our users can see the change.

00:15:10.320 --> 00:15:12.692
And the push will only happen,
if the build and tests,

00:15:12.692 --> 00:15:15.750
if the results are all green.

00:15:15.750 --> 00:15:17.520
So switch back to
the Preso, please.

00:15:21.490 --> 00:15:24.370
TOMAS ISDAL: So
testing is important,

00:15:24.370 --> 00:15:27.000
but it's only important
if you actually

00:15:27.000 --> 00:15:30.670
run in production what
you tested earlier, which

00:15:30.670 --> 00:15:34.370
is why we're so excited to
talk about the new Docker

00:15:34.370 --> 00:15:37.210
Support for Managed VMs.

00:15:37.210 --> 00:15:39.730
We had this full session
about Docker and containers

00:15:39.730 --> 00:15:40.670
yesterday.

00:15:40.670 --> 00:15:44.232
And if you Google search for
containerizing the Cloud,

00:15:44.232 --> 00:15:45.690
it should be the
first hit, and you

00:15:45.690 --> 00:15:48.470
can watch the recording of it.

00:15:48.470 --> 00:15:52.720
So a Docker image is a bundle
that contains your application

00:15:52.720 --> 00:15:56.120
binaries, but it also
contains all the dependencies

00:15:56.120 --> 00:15:57.100
of your application.

00:15:57.100 --> 00:15:59.910
This could be any static
files you depend on,

00:15:59.910 --> 00:16:01.800
any operating system
libraries you depend on,

00:16:01.800 --> 00:16:05.780
and maybe even the operating
system you depend on.

00:16:05.780 --> 00:16:09.430
So all these files
are shipped around

00:16:09.430 --> 00:16:12.360
as a bundle which
gives you confidence

00:16:12.360 --> 00:16:15.140
that whatever you
run on your laptop

00:16:15.140 --> 00:16:17.330
is the same as you run in PROD.

00:16:17.330 --> 00:16:19.910
So from a demos
perspective, this

00:16:19.910 --> 00:16:23.840
is great because it gives
us a testable bundle that's

00:16:23.840 --> 00:16:25.660
portable between environments.

00:16:25.660 --> 00:16:29.130
We can develop on our
laptop for quick iteration.

00:16:29.130 --> 00:16:30.700
We can push it to staging.

00:16:30.700 --> 00:16:33.930
We know it's exactly the same
bits as we test on our laptop.

00:16:33.930 --> 00:16:36.660
We run a big suite of
test on it in staging.

00:16:36.660 --> 00:16:39.560
And then when it's all green,
we can choose to push to PROD.

00:16:39.560 --> 00:16:44.210
And again it's the entire
environment of your app.

00:16:44.210 --> 00:16:46.950
So the Build, Test,
Deploy Pipeline

00:16:46.950 --> 00:16:49.830
you saw here, it
is a Jenkins build.

00:16:49.830 --> 00:16:52.000
It is compiling your
source, but the actual

00:16:52.000 --> 00:16:56.390
build artifact its
producing is a Docker image.

00:16:56.390 --> 00:16:59.060
So here we bundle in
your app, your libraries,

00:16:59.060 --> 00:17:01.900
whatever other
dependencies you had

00:17:01.900 --> 00:17:05.180
to get with a super
minimal Linux distribution,

00:17:05.180 --> 00:17:08.030
by default, if that's
what you want to run.

00:17:08.030 --> 00:17:10.589
And we put this into
Google Cloud Storage

00:17:10.589 --> 00:17:13.500
so that it's accessible
from all the VMs,

00:17:13.500 --> 00:17:17.550
reliably and quickly,
as the VMs boot up.

00:17:17.550 --> 00:17:21.790
So putting all this
together makes Managed VMs

00:17:21.790 --> 00:17:27.359
a really great way to package
and run your Docker containers.

00:17:27.359 --> 00:17:29.970
So why containers then?

00:17:29.970 --> 00:17:33.270
Well, at Google, we're super
excited about the increased

00:17:33.270 --> 00:17:36.370
external popularity
of Docker containers.

00:17:36.370 --> 00:17:40.060
So internally, we're
huge container users.

00:17:40.060 --> 00:17:45.870
We have been using
containers since 2006.

00:17:45.870 --> 00:17:50.220
And we contributed cgroups
back to the Linux kernel.

00:17:50.220 --> 00:17:53.930
We're continuously contributing
our improvements, both upstream

00:17:53.930 --> 00:18:01.070
into the Linux kernel, and
into Docker, Docker, Inc.

00:18:01.070 --> 00:18:04.380
Today at Google
in production, we

00:18:04.380 --> 00:18:07.990
start over 2 billion
containers per week,

00:18:07.990 --> 00:18:10.790
and we're really excited to
take our experience with running

00:18:10.790 --> 00:18:15.360
containers and contribute that
to the customers of Google

00:18:15.360 --> 00:18:18.260
Cloud Platform.

00:18:18.260 --> 00:18:20.800
So can we switch back
to the demo, please?

00:18:24.750 --> 00:18:28.450
Well, we just pushed
fix to production.

00:18:28.450 --> 00:18:33.570
Now let's go back and see if we
actually improved performance.

00:18:33.570 --> 00:18:37.440
So in production, we could
do the same small test

00:18:37.440 --> 00:18:42.770
as we just did in staging
by checking individual RPCs

00:18:42.770 --> 00:18:44.860
and seeing how things are going.

00:18:44.860 --> 00:18:46.880
However, what you
actually care about

00:18:46.880 --> 00:18:49.890
is whether this change
improved performance or made

00:18:49.890 --> 00:18:52.660
things worse for our users.

00:18:52.660 --> 00:18:56.870
So with Cloud Tracing we
allow you to generate reports

00:18:56.870 --> 00:19:00.560
where you slice and dice
your RPC data to figure out

00:19:00.560 --> 00:19:03.190
whether latency
increased, decreased,

00:19:03.190 --> 00:19:05.970
whether errors
went up and so on.

00:19:05.970 --> 00:19:08.830
So since we just
pushed to production,

00:19:08.830 --> 00:19:11.930
I'm going to use data from
earlier this week, since we

00:19:11.930 --> 00:19:14.630
don't really have any real
production data just yet.

00:19:14.630 --> 00:19:17.220
So this is data
from the same fix

00:19:17.220 --> 00:19:19.770
that I did a couple days ago.

00:19:19.770 --> 00:19:21.850
So we see here, as we
look at the Latency

00:19:21.850 --> 00:19:26.870
Profile of these RPCs, we
see that the orange line is

00:19:26.870 --> 00:19:28.890
the new version.

00:19:28.890 --> 00:19:32.355
The median latency went
down to 43 milliseconds.

00:19:35.242 --> 00:19:36.700
The resolution is
so low here, so I

00:19:36.700 --> 00:19:38.575
have to scroll all the
way over to the right,

00:19:38.575 --> 00:19:41.510
to see the tail latency
of the old implementation.

00:19:41.510 --> 00:19:44.160
You see here, previously,
the old implementation

00:19:44.160 --> 00:19:49.130
was running out in up to four
second request response time.

00:19:49.130 --> 00:19:50.920
So not very good.

00:19:50.920 --> 00:19:53.340
And as you debug
these tail latencies,

00:19:53.340 --> 00:19:56.560
it's really useful to be able
to dig in deeper, to figure out,

00:19:56.560 --> 00:19:59.430
I see this request
was really slow.

00:19:59.430 --> 00:20:02.950
So we allow you to go and
look at representative traces

00:20:02.950 --> 00:20:04.892
in a given latency percentile.

00:20:04.892 --> 00:20:06.350
So I'm going to go
in here, and I'm

00:20:06.350 --> 00:20:09.220
going to look at the
old implementation,

00:20:09.220 --> 00:20:12.300
say the 90th percentile
latency, and see

00:20:12.300 --> 00:20:14.000
what could go wrong here.

00:20:14.000 --> 00:20:16.400
And again, we see
the step method

00:20:16.400 --> 00:20:21.560
where the Datastore calls
just keep on getting repeated.

00:20:21.560 --> 00:20:26.170
Here we fetched 8,150
comments before we

00:20:26.170 --> 00:20:27.920
got the 50 comments
we were interested in.

00:20:33.950 --> 00:20:39.277
So this gives you the ability
to really dig into your changes,

00:20:39.277 --> 00:20:41.360
and make sure that whatever
you push to production

00:20:41.360 --> 00:20:45.872
is actually improving
what your users see.

00:20:45.872 --> 00:20:47.080
Can we switch back to slides?

00:20:50.239 --> 00:20:51.280
MELODY MECKFESSEL: Great.

00:20:51.280 --> 00:20:54.510
So I'm going to talk a
little bit about testing.

00:20:54.510 --> 00:20:58.100
So server-side and web ops
are just part of the story.

00:20:58.100 --> 00:21:01.290
Most services have
mobile components, too.

00:21:01.290 --> 00:21:03.350
And the mobile
landscape is diverse,

00:21:03.350 --> 00:21:05.730
and it's changing all the time.

00:21:05.730 --> 00:21:07.840
And for developers,
this presents us

00:21:07.840 --> 00:21:11.680
with great opportunities, but
also significant challenges.

00:21:11.680 --> 00:21:15.970
So for example, six
different Android OS versions

00:21:15.970 --> 00:21:20.020
each have a market
share of over 10%.

00:21:20.020 --> 00:21:22.260
And other popular
Android devices

00:21:22.260 --> 00:21:25.730
cover an even bigger
span of screen sizes

00:21:25.730 --> 00:21:27.660
and pixel densities.

00:21:27.660 --> 00:21:29.960
So as a developer,
we have to make sure

00:21:29.960 --> 00:21:34.420
that the apps we're building
will work on our users devices.

00:21:34.420 --> 00:21:37.120
And releasing with confidence,
in this type of environment

00:21:37.120 --> 00:21:40.100
that's changing so
quickly, it demands

00:21:40.100 --> 00:21:44.650
testing across an extensive
matrix of devices,

00:21:44.650 --> 00:21:48.040
API levels, and even languages.

00:21:48.040 --> 00:21:51.150
So let's see how the
power and scale of Google

00:21:51.150 --> 00:21:55.090
can make matrix
testing fast and easy.

00:21:55.090 --> 00:21:56.640
Can you switch back
to demo, please?

00:22:04.280 --> 00:22:09.125
So I'm developing a new
feature for the WalkShare app

00:22:09.125 --> 00:22:10.333
we've been talking about.

00:22:13.360 --> 00:22:15.710
And I'm doing that
in Android Studio.

00:22:15.710 --> 00:22:22.030
And I wrote some tests using
the Espresso framework.

00:22:22.030 --> 00:22:28.220
So I've tested my application
against a local emulator,

00:22:28.220 --> 00:22:30.440
but now I want to
test it against some

00:22:30.440 --> 00:22:32.070
of the most popular
configurations

00:22:32.070 --> 00:22:34.470
for my customers.

00:22:34.470 --> 00:22:37.070
And I start running the
tests in the usual way,

00:22:37.070 --> 00:22:39.660
but in addition to local
devices and emulators,

00:22:39.660 --> 00:22:42.620
I see I have this
new option here,

00:22:42.620 --> 00:22:45.240
Run tests in Google Cloud.

00:22:45.240 --> 00:22:47.380
And I'm going to select that.

00:22:47.380 --> 00:22:49.340
And note in this
dialog box here,

00:22:49.340 --> 00:22:50.840
you can see that
the tests are going

00:22:50.840 --> 00:22:56.300
to run in my WalkShare
Google Cloud Project.

00:22:56.300 --> 00:23:00.090
So let's go in here

00:23:00.090 --> 00:23:02.170
So here, I can pick
the configurations

00:23:02.170 --> 00:23:04.080
I want to test against.

00:23:04.080 --> 00:23:08.740
And I have an existing set of
Matrix configurations already

00:23:08.740 --> 00:23:09.300
defined.

00:23:09.300 --> 00:23:10.620
You can see them here.

00:23:10.620 --> 00:23:12.170
I have some Smoke Tests.

00:23:12.170 --> 00:23:15.010
These are basic tests that
I run with every change.

00:23:15.010 --> 00:23:16.350
I have some Release Tests.

00:23:16.350 --> 00:23:19.470
These are more extensive tests
that I run with every release.

00:23:19.470 --> 00:23:22.700
And then I have
some Sample tests.

00:23:22.700 --> 00:23:25.610
Google will even use Play
Store statistics to come up

00:23:25.610 --> 00:23:32.790
with a set of configurations
based on the statistics

00:23:32.790 --> 00:23:34.080
that they have found.

00:23:34.080 --> 00:23:37.790
So I also have an option here
of some configurations that

00:23:37.790 --> 00:23:41.640
will cover most of
my user community.

00:23:41.640 --> 00:23:44.020
And if I wanted to,
I can even select

00:23:44.020 --> 00:23:47.050
all of the available test
configurations to run.

00:23:47.050 --> 00:23:50.980
And it looks like
there's over 1,700 here.

00:23:50.980 --> 00:23:54.220
But what I want to do is, I want
to dig in on the Smoke tests.

00:23:54.220 --> 00:23:57.440
So I'm going to
pick my device here.

00:23:57.440 --> 00:24:02.510
I'm going to pick Nexus 5, and
I'm going to pick the platform.

00:24:02.510 --> 00:24:08.180
I'm going to pick API 18 and
19, or Jelly Bean and KitKat.

00:24:08.180 --> 00:24:12.670
I'm going to pick the
locale, English and German,

00:24:12.670 --> 00:24:17.220
and I'm going to pick the
orientation, which is portrait.

00:24:17.220 --> 00:24:21.000
So I can see here
that my test will run.

00:24:21.000 --> 00:24:26.630
These four configurations will
cover 20% of my current users.

00:24:26.630 --> 00:24:28.660
So I also have this
option down here

00:24:28.660 --> 00:24:31.650
to run tests on
physical devices.

00:24:31.650 --> 00:24:33.730
And as you heard
yesterday, we're

00:24:33.730 --> 00:24:37.000
very excited to welcome
Appurify to Google.

00:24:37.000 --> 00:24:40.650
Appurify has a great
interface to enable developers

00:24:40.650 --> 00:24:44.740
to test their apps
against physical devices.

00:24:44.740 --> 00:24:46.570
And the interface is great.

00:24:46.570 --> 00:24:48.350
It provides very
actionable feedback

00:24:48.350 --> 00:24:51.460
so that you can fix things that
are wrong with your mobile app.

00:24:51.460 --> 00:24:54.840
Appurify shares Google's
passion about making

00:24:54.840 --> 00:25:00.740
great mobile applications
across both Android and iOS.

00:25:00.740 --> 00:25:03.180
So I can't talk about
the specifics right now,

00:25:03.180 --> 00:25:05.070
but I can say that
we do have plans

00:25:05.070 --> 00:25:09.200
to offer Appurify's platform
as a cross-platform service

00:25:09.200 --> 00:25:11.320
for all of our developers.

00:25:11.320 --> 00:25:13.532
So now that I've picked
my configurations,

00:25:13.532 --> 00:25:17.260
I'm just going to hit OK.

00:25:17.260 --> 00:25:20.690
And I'm going to hit OK again.

00:25:20.690 --> 00:25:23.290
And we can see here
that Android Studio's

00:25:23.290 --> 00:25:27.830
building my application and
running all of my tests.

00:25:27.830 --> 00:25:30.940
And it's going to upload them to
a Google Cloud Storage Bucket.

00:25:34.980 --> 00:25:38.050
So it's not coming up quite
yet, but from there, Google's

00:25:38.050 --> 00:25:41.310
going to run all of my
requested tests in parallel.

00:25:41.310 --> 00:25:43.600
And as the tests
finish, the results

00:25:43.600 --> 00:25:45.800
are going to stream back
to the Results Viewer,

00:25:45.800 --> 00:25:49.290
so that I know exactly
what's going on.

00:25:49.290 --> 00:25:51.870
And as the tests
complete, I can go dig in

00:25:51.870 --> 00:25:53.540
and look at the details.

00:25:53.540 --> 00:25:55.440
So you can see here
that those four test

00:25:55.440 --> 00:25:56.932
configurations
are still running.

00:25:56.932 --> 00:25:58.390
So we're going to
do a little Julia

00:25:58.390 --> 00:26:01.250
Child since they take
a couple minutes.

00:26:01.250 --> 00:26:04.070
And we're going to switch over
to the same configurations,

00:26:04.070 --> 00:26:06.650
but the tests have
already completed.

00:26:06.650 --> 00:26:07.800
And it's interesting.

00:26:07.800 --> 00:26:13.330
Here I can see in the hierarchy,
the different API levels.

00:26:13.330 --> 00:26:17.060
And I can see that I have
a test that's failed.

00:26:17.060 --> 00:26:21.350
And it's on API Level
18 or Jelly Bean.

00:26:21.350 --> 00:26:26.748
So from here, I can actually
go look at the code.

00:26:26.748 --> 00:26:29.910
Oh, I can see, I
had a check in here

00:26:29.910 --> 00:26:32.710
to test for whether or
not we're running KitKat,

00:26:32.710 --> 00:26:35.690
and to throw an exception.

00:26:35.690 --> 00:26:39.600
So this is an example of being
able to really dig in and find

00:26:39.600 --> 00:26:42.570
issues that you need to fix.

00:26:42.570 --> 00:26:46.990
Failure on particular APIs,
it's a pretty common problem.

00:26:46.990 --> 00:26:48.850
But sometimes test
assertions, they

00:26:48.850 --> 00:26:53.200
don't find all the issues
that we need to know about.

00:26:53.200 --> 00:26:56.270
So with a couple of
additional lines of code,

00:26:56.270 --> 00:26:59.390
my Espresso Tasks
will take screenshots.

00:26:59.390 --> 00:27:01.620
Google will capture
those screenshots,

00:27:01.620 --> 00:27:03.790
and stream them
back to me, so I can

00:27:03.790 --> 00:27:06.730
look for issues that
may exist in the UI that

00:27:06.730 --> 00:27:10.250
will affect my users
experience of the app.

00:27:10.250 --> 00:27:14.670
So I'm going to pick on
this task that completed,

00:27:14.670 --> 00:27:17.780
and I'm going to go take a look.

00:27:17.780 --> 00:27:19.390
And I'm going to
do some comparisons

00:27:19.390 --> 00:27:21.650
between my configuration.

00:27:21.650 --> 00:27:28.340
So remember I picked English
and German, like this morning,

00:27:28.340 --> 00:27:31.650
wanted to have US win.

00:27:31.650 --> 00:27:35.300
So I'm going to scroll
through these now,

00:27:35.300 --> 00:27:37.560
and you can see the
comparison here.

00:27:37.560 --> 00:27:40.340
So this is the second
screenshot comparison.

00:27:40.340 --> 00:27:43.990
I can see it looks like there's
a cut off of the translation

00:27:43.990 --> 00:27:46.005
here, so that might be an issue.

00:27:48.630 --> 00:27:51.070
That looks pretty good.

00:27:51.070 --> 00:27:53.140
Looks pretty good.

00:27:53.140 --> 00:27:56.680
Here's another issue.

00:27:56.680 --> 00:27:59.130
This is not lining up correctly.

00:28:03.770 --> 00:28:06.140
So I'd probably
want to fix that.

00:28:06.140 --> 00:28:08.280
So neither one of
these issues would

00:28:08.280 --> 00:28:10.240
have been triggered
by a test failure,

00:28:10.240 --> 00:28:13.175
but it's pretty convenient,
pretty easy for me

00:28:13.175 --> 00:28:16.090
to be able to check for
these types of issues

00:28:16.090 --> 00:28:18.570
and be able to fix them so
that my users have the best

00:28:18.570 --> 00:28:20.694
experience.

00:28:20.694 --> 00:28:23.110
We think you should be able
to run Matrix Testing whenever

00:28:23.110 --> 00:28:25.390
you want, not with Release.

00:28:25.390 --> 00:28:28.080
And it should all
happen in parallel,

00:28:28.080 --> 00:28:30.280
and it should be easy,
and you shouldn't

00:28:30.280 --> 00:28:33.270
have to leave your IDE to do it.

00:28:33.270 --> 00:28:35.590
So we covered a lot in
this testing section.

00:28:35.590 --> 00:28:38.750
You saw how we were able
to run Android tests

00:28:38.750 --> 00:28:42.970
across multiple devices,
OS versions, API

00:28:42.970 --> 00:28:48.730
levels, languages,
all in parallel.

00:28:48.730 --> 00:28:51.270
And you also saw how you
could look at the results.

00:28:51.270 --> 00:28:53.440
You could drill in
to the actual code

00:28:53.440 --> 00:28:55.840
to find out what
was going wrong.

00:28:55.840 --> 00:28:58.420
So Matrix Testing
with Google Cloud

00:28:58.420 --> 00:29:02.500
can help you develop and
release quickly and confidently.

00:29:02.500 --> 00:29:05.510
And no matter which device
your users are using,

00:29:05.510 --> 00:29:07.720
you'll be able to
fix the issues,

00:29:07.720 --> 00:29:11.940
and push those releases
out to production.

00:29:11.940 --> 00:29:14.700
So can we switch back to
the presentation, please?

00:29:18.410 --> 00:29:21.250
So we've covered a lot of
content in this session.

00:29:21.250 --> 00:29:23.240
So I just wanted
to quickly recap.

00:29:23.240 --> 00:29:26.660
We started out with
Managed VMs, Google's way

00:29:26.660 --> 00:29:29.580
of offering the benefit
of platform as a service,

00:29:29.580 --> 00:29:33.540
with the full power
of Virtual Machines.

00:29:33.540 --> 00:29:38.870
Then we showed our new ability
to capture Trace application

00:29:38.870 --> 00:29:43.390
traffic and then use that to
identify performance issues.

00:29:43.390 --> 00:29:46.180
But DevOps wouldn't be
complete without deployment.

00:29:46.180 --> 00:29:48.760
We've built upon the
Push-to-Deploy concept

00:29:48.760 --> 00:29:52.380
and are expanding it to include
Multi-stage Release Pipelines,

00:29:52.380 --> 00:29:54.470
so you can know
which code is where,

00:29:54.470 --> 00:29:57.740
and you can promote easily
between your environments.

00:29:57.740 --> 00:30:01.980
And then finally, we showed
Cloud Testing, an easy way

00:30:01.980 --> 00:30:06.560
to offer matrix testing for your
Build, Test, and Deploy Cycle.

00:30:06.560 --> 00:30:08.520
So Google's working
hard to deliver

00:30:08.520 --> 00:30:11.370
a full featured
DevOps stack for you.

00:30:11.370 --> 00:30:13.620
And the part that I'm
most excited about

00:30:13.620 --> 00:30:15.870
is that we're just
getting started.

00:30:15.870 --> 00:30:18.260
So thanks so much
for coming today.

00:30:18.260 --> 00:30:22.820
Thanks for coming to I/O. We'd
love to hear your feedback.

00:30:22.820 --> 00:30:26.010
We have a sign-up page
there for Managed VMs.

00:30:26.010 --> 00:30:28.220
And we also have
this offer, in terms

00:30:28.220 --> 00:30:31.120
of getting started on
our Cloud Platform.

00:30:31.120 --> 00:30:33.490
We're happy to take some
questions for a couple minutes,

00:30:33.490 --> 00:30:36.334
if you'd like, and
thanks again for coming.

00:30:36.334 --> 00:30:38.804
[APPLAUSE]

00:30:42.435 --> 00:30:44.310
MELODY MECKFESSEL: Please
use the microphones

00:30:44.310 --> 00:30:47.477
if you're going
to ask questions.

00:30:47.477 --> 00:30:48.560
MALE SPEAKER: Other slide.

00:30:51.790 --> 00:30:54.410
MELODY MECKFESSEL:
It's the other slide.

00:30:54.410 --> 00:31:08.156
Yeah, thanks Thanks.

00:31:08.156 --> 00:31:10.894
[LAUGHING] You're in the back.

00:31:10.894 --> 00:31:11.810
TOMAS ISDAL: Big room.

00:31:11.810 --> 00:31:13.435
MELODY MECKFESSEL:
Give you time to walk.

00:31:13.435 --> 00:31:14.143
Sorry about that.

00:31:17.624 --> 00:31:18.290
AUDIENCE: Hello?

00:31:18.290 --> 00:31:18.370
MELODY MECKFESSEL: Hi.

00:31:18.370 --> 00:31:20.280
AUDIENCE: So the question
is-- great stuff--

00:31:20.280 --> 00:31:25.040
so we've been seeing a lot
of stuff on Wearable and TV.

00:31:25.040 --> 00:31:27.560
So is there anything
you can share in terms

00:31:27.560 --> 00:31:30.320
of where there's
automation around testing

00:31:30.320 --> 00:31:33.901
for that stuff in the
future, where that's going?

00:31:33.901 --> 00:31:35.400
MELODY MECKFESSEL:
Not at this time.

00:31:35.400 --> 00:31:36.279
I don't know.

00:31:36.279 --> 00:31:38.070
We can try to hunt down
the answer for you,

00:31:38.070 --> 00:31:39.920
but I can't tell you.

00:31:39.920 --> 00:31:42.479
Thanks for asking.

00:31:42.479 --> 00:31:43.020
AUDIENCE: Hi.

00:31:43.020 --> 00:31:44.940
Everything looks really cool.

00:31:44.940 --> 00:31:48.660
So on the stuff with
Android testing,

00:31:48.660 --> 00:31:51.950
is there just going to be
support for Espresso's testing

00:31:51.950 --> 00:31:54.480
library to run with
matrix testing,

00:31:54.480 --> 00:31:58.126
or are you going to support
Roboelectric or Vadim, all

00:31:58.126 --> 00:31:59.750
these other testing
frameworks as well?

00:31:59.750 --> 00:32:01.125
MELODY MECKFESSEL:
So yeah, we do

00:32:01.125 --> 00:32:04.300
want to support other
testing frameworks.

00:32:04.300 --> 00:32:08.210
Our philosophy is that we
want to meet engineers, meet

00:32:08.210 --> 00:32:09.540
developers, where they are.

00:32:09.540 --> 00:32:13.540
And so decisions around using
Jenkins, for example, the right

00:32:13.540 --> 00:32:17.100
plug-ins to support the Build
and Test and Deploy Cycle,

00:32:17.100 --> 00:32:18.380
that's just one example.

00:32:18.380 --> 00:32:20.630
But I just used it
as an example today,

00:32:20.630 --> 00:32:22.720
because that was what
we did for the demo,

00:32:22.720 --> 00:32:25.835
but we do want to support other
types of testing frameworks.

00:32:25.835 --> 00:32:26.460
AUDIENCE: Cool.

00:32:26.460 --> 00:32:26.960
Thank you.

00:32:26.960 --> 00:32:29.600
MELODY MECKFESSEL: Thanks.

00:32:29.600 --> 00:32:31.450
AUDIENCE: Great stuff.

00:32:31.450 --> 00:32:33.240
What actually did
the screen capturing?

00:32:33.240 --> 00:32:35.600
Is that an API call
within the test,

00:32:35.600 --> 00:32:39.450
or was that done by the CI job?

00:32:39.450 --> 00:32:42.579
MELODY MECKFESSEL: I think that
was done by the actual test.

00:32:42.579 --> 00:32:43.120
AUDIENCE: OK.

00:32:43.120 --> 00:32:45.730
We actually use Espresso
over at Twitter,

00:32:45.730 --> 00:32:49.240
and hopefully there is an
API for taking screenshots,

00:32:49.240 --> 00:32:51.645
at least a stock API
that comes with Espresso.

00:32:51.645 --> 00:32:53.020
So I was just
curious about that.

00:32:53.020 --> 00:32:54.395
MELODY MECKFESSEL:
So yeah, we've

00:32:54.395 --> 00:32:57.689
been doing it internally at
Google, and if you stay after,

00:32:57.689 --> 00:32:59.230
I'll get you connected
with the folks

00:32:59.230 --> 00:33:00.696
on the team that have done it.

00:33:00.696 --> 00:33:01.362
AUDIENCE: Great.

00:33:01.362 --> 00:33:01.861
Thank you.

00:33:01.861 --> 00:33:04.114
MELODY MECKFESSEL: Cool.

00:33:04.114 --> 00:33:04.780
AUDIENCE: Hello.

00:33:04.780 --> 00:33:05.790
MELODY MECKFESSEL: Hi.

00:33:05.790 --> 00:33:07.550
AUDIENCE: As far
as I know, you use

00:33:07.550 --> 00:33:11.320
Jenkins to do with the testing
before deploying and stuff.

00:33:11.320 --> 00:33:12.830
MELODY MECKFESSEL: Sure.

00:33:12.830 --> 00:33:16.480
AUDIENCE: Is it possible to get
access to the UI of Jenkins,

00:33:16.480 --> 00:33:20.220
for example, to see
reporting and stuff?

00:33:20.220 --> 00:33:23.680
MELODY MECKFESSEL: Yeah,
that's a good question.

00:33:23.680 --> 00:33:27.940
You saw the wrapper
around it, because we

00:33:27.940 --> 00:33:29.830
wanted to make it
as easy as possible

00:33:29.830 --> 00:33:31.480
for you to interact with the UI.

00:33:34.900 --> 00:33:37.560
Well, if you can stay after,
we could talk about it,

00:33:37.560 --> 00:33:40.600
but part of what we were
trying to do with that

00:33:40.600 --> 00:33:43.510
is just to make it
simpler and easy to use.

00:33:43.510 --> 00:33:46.705
Have you spent a lot of
time using the Jenkins UI?

00:33:46.705 --> 00:33:47.330
AUDIENCE: Yeah.

00:33:47.330 --> 00:33:51.120
I've known Jenkins to do the
reporting stuff, so [LAUGHING].

00:33:51.120 --> 00:33:52.120
MELODY MECKFESSEL: Yeah.

00:33:52.120 --> 00:33:54.110
AUDIENCE: It would be great
to have it in just one place.

00:33:54.110 --> 00:33:55.040
MELODY MECKFESSEL: Just there.

00:33:55.040 --> 00:33:55.730
Yeah.

00:33:55.730 --> 00:33:58.810
We should talk about that after.

00:33:58.810 --> 00:34:00.800
There are some challenges
with the Jenkins UI.

00:34:00.800 --> 00:34:05.005
We have talked with the folks,
because again and such about,

00:34:05.005 --> 00:34:07.130
there are some great
collaborations we can do there

00:34:07.130 --> 00:34:09.360
around making
improvements to it.

00:34:09.360 --> 00:34:10.530
That's a good question.

00:34:10.530 --> 00:34:11.780
AUDIENCE: I will
come by afterwards.

00:34:11.780 --> 00:34:13.113
MELODY MECKFESSEL: Yeah, thanks.

00:34:13.113 --> 00:34:14.199
TOMAS ISDAL: Thanks.

00:34:14.199 --> 00:34:15.090
AUDIENCE: Hi.

00:34:15.090 --> 00:34:17.100
So most of the stuff
you demonstrated today

00:34:17.100 --> 00:34:18.980
started with a build.

00:34:18.980 --> 00:34:21.750
Do you guys have any plans
to integrate coder tools

00:34:21.750 --> 00:34:24.965
like what internally
Google users, for example.

00:34:24.965 --> 00:34:28.590
MELODY MECKFESSEL: [LAUGHING]
Where are you from?

00:34:28.590 --> 00:34:30.730
AUDIENCE: I used
to work for Google.

00:34:30.730 --> 00:34:31.630
MELODY MECKFESSEL:
[LAUGHING] There you go.

00:34:31.630 --> 00:34:33.921
AUDIENCE: Then the second
thing is like the dashboards,

00:34:33.921 --> 00:34:35.020
like app.

00:34:35.020 --> 00:34:37.180
I ran past, this test
started, actually

00:34:37.180 --> 00:34:38.850
failing with this
comment essentially.

00:34:38.850 --> 00:34:40.780
I want to know the history
of the [INAUDIBLE].

00:34:40.780 --> 00:34:44.810
MELODY MECKFESSEL: So you have
the inside scoop. [LAUGHING]

00:34:44.810 --> 00:34:46.610
AUDIENCE: But those
things naturally fit

00:34:46.610 --> 00:34:47.679
as the next steps.

00:34:47.679 --> 00:34:50.250
So do you guys have
any plans with that?

00:34:50.250 --> 00:34:50.415
MELODY MECKFESSEL:
Yeah, we've been

00:34:50.415 --> 00:34:51.874
doing a lot of
thinking about that,

00:34:51.874 --> 00:34:53.914
and we're really excited
about some of the things

00:34:53.914 --> 00:34:56.679
that we're going to be working
on this year for our customers.

00:34:56.679 --> 00:34:57.440
Great questions.

00:35:00.209 --> 00:35:00.750
AUDIENCE: Hi.

00:35:00.750 --> 00:35:04.200
I used one of the first
versions a few months ago

00:35:04.200 --> 00:35:07.490
that you released with
GitHub integration,

00:35:07.490 --> 00:35:10.315
so it may even
builds automatically.

00:35:13.310 --> 00:35:16.430
The question is, we use
three different builds.

00:35:16.430 --> 00:35:19.180
We have the Continuous Build, we
have Integration Test, and then

00:35:19.180 --> 00:35:20.430
the larger one.

00:35:20.430 --> 00:35:23.520
How does that fit with
what we currently have?

00:35:23.520 --> 00:35:25.170
You have those
integration pipelines.

00:35:25.170 --> 00:35:27.240
Are they fixed somehow?

00:35:27.240 --> 00:35:29.080
MELODY MECKFESSEL: So sorry.

00:35:29.080 --> 00:35:30.410
The question is?

00:35:30.410 --> 00:35:32.430
AUDIENCE: I want to
release to production

00:35:32.430 --> 00:35:35.060
as soon as the integration
tests are completed,

00:35:35.060 --> 00:35:37.160
but that takes about 20 minutes.

00:35:37.160 --> 00:35:39.800
I want to release to some
kind of demo environment,

00:35:39.800 --> 00:35:45.760
after I'd say, the continuous
fast tests run through.

00:35:45.760 --> 00:35:49.070
So how are those Release
Pipelines configurable?

00:35:49.070 --> 00:35:50.130
That's the main question.

00:35:50.130 --> 00:35:51.790
MELODY MECKFESSEL:
Oh, good question.

00:35:51.790 --> 00:35:54.660
So you want the
ability to set up

00:35:54.660 --> 00:35:57.050
basically multiple pipelines?

00:35:57.050 --> 00:35:59.770
AUDIENCE: It might be
related to the Jenkins UI,

00:35:59.770 --> 00:36:01.020
to that question.

00:36:01.020 --> 00:36:02.436
MELODY MECKFESSEL:
Well, it sounds

00:36:02.436 --> 00:36:04.750
like you want the flexibility
to be able to say,

00:36:04.750 --> 00:36:06.574
I want this kind
of Release Pipeline

00:36:06.574 --> 00:36:08.240
for this particular
type of application,

00:36:08.240 --> 00:36:10.330
and you want to be able
to group those together.

00:36:10.330 --> 00:36:12.185
So, yeah, we've
definitely been talking

00:36:12.185 --> 00:36:14.060
about the ways in which
we can bring together

00:36:14.060 --> 00:36:17.560
different projects and different
environments to make it easy.

00:36:17.560 --> 00:36:19.970
You're just seeing
the first little steps

00:36:19.970 --> 00:36:21.220
that we're taking to do that.

00:36:21.220 --> 00:36:24.830
And we're excited to
do a whole lot more.

00:36:24.830 --> 00:36:26.920
But yeah, we want it to
be as easy as possible

00:36:26.920 --> 00:36:29.380
for you to configure and set
up different release pipelines

00:36:29.380 --> 00:36:31.430
so that you can manage
them effectively.

00:36:31.430 --> 00:36:33.350
And it sounds like
set up triggers

00:36:33.350 --> 00:36:37.407
around certain conditions
as to when things will run?

00:36:37.407 --> 00:36:38.240
AUDIENCE: Thank you.

00:36:38.240 --> 00:36:38.590
MELODY MECKFESSEL: Great.

00:36:38.590 --> 00:36:39.090
Thanks.

00:36:41.420 --> 00:36:42.060
AUDIENCE: Hi.

00:36:42.060 --> 00:36:45.110
Very interesting stuff, but
I think you're out of sync.

00:36:45.110 --> 00:36:50.030
The Jenkins bug, in the demo,
you said you fix the bug,

00:36:50.030 --> 00:36:53.550
you build, you test,
you deploy to staging.

00:36:53.550 --> 00:36:56.150
And then when you showed
you deploy to production,

00:36:56.150 --> 00:36:57.930
you say you build again?

00:36:57.930 --> 00:36:59.672
You build, test,
and deploy again.

00:36:59.672 --> 00:37:01.130
When you go to
production, you just

00:37:01.130 --> 00:37:04.380
want to deploy, the same thing
as what we did in production.

00:37:04.380 --> 00:37:08.820
So if we don't have
control on this.

00:37:08.820 --> 00:37:11.480
Just wondering how much
we would be able to,

00:37:11.480 --> 00:37:14.480
are you going to say,
you deploy like this?

00:37:14.480 --> 00:37:19.250
You build and deploy like Google
decides, or can we choose?

00:37:19.250 --> 00:37:22.150
TOMAS ISDAL: You wanted
a binary promotion,

00:37:22.150 --> 00:37:25.170
so you want to make sure that
you want to promote the Docker

00:37:25.170 --> 00:37:29.950
containers, not only the build
artifacts, but the world as it

00:37:29.950 --> 00:37:31.600
looked when you ran the tests.

00:37:31.600 --> 00:37:34.410
AUDIENCE: And when you
say as a Promote Return,

00:37:34.410 --> 00:37:36.890
you're using the
Promote Plug-in.

00:37:36.890 --> 00:37:38.960
And you have a build
job and deployment

00:37:38.960 --> 00:37:43.680
jobs configured in Jenkins?

00:37:43.680 --> 00:37:48.650
TOMAS ISDAL: Yes, so this
is just around the corner.

00:37:48.650 --> 00:37:51.310
It wasn't in this demo, but
it's just around the corner.

00:37:51.310 --> 00:37:52.144
AUDIENCE: Thank you.

00:37:52.144 --> 00:37:54.184
MELODY MECKFESSEL: Just
so I heard you correctly.

00:37:54.184 --> 00:37:56.800
The key there is that you really
want the ability to configure

00:37:56.800 --> 00:37:59.914
at each stage what
exactly happens.

00:37:59.914 --> 00:38:01.580
AUDIENCE: At least
to know what happens.

00:38:01.580 --> 00:38:04.180
MELODY MECKFESSEL: Yeah,
of course. [LAUGHING]

00:38:04.180 --> 00:38:07.750
Yeah, forgive our demo
magic a little bit.

00:38:07.750 --> 00:38:09.940
Thanks.

00:38:09.940 --> 00:38:11.940
AUDIENCE: Somewhat related
to the last question.

00:38:11.940 --> 00:38:14.150
How do you manage different
configuration settings

00:38:14.150 --> 00:38:16.150
for your staging versus
production environments?

00:38:16.150 --> 00:38:18.316
So you click Promote, but
you don't want necessarily

00:38:18.316 --> 00:38:19.740
the same application
configuration

00:38:19.740 --> 00:38:20.920
used as you go up the stack.

00:38:24.140 --> 00:38:26.630
TOMAS ISDAL: So basically
different flags.

00:38:26.630 --> 00:38:28.620
AUDIENCE: Yeah.

00:38:28.620 --> 00:38:31.150
TOMAS ISDAL: Well, they're
completely separate projects.

00:38:31.150 --> 00:38:34.400
So you could imagine that you
have configuration stored in,

00:38:34.400 --> 00:38:36.870
for example, the Datastore
that contains your flags, that

00:38:36.870 --> 00:38:41.090
allows you to go in and edit
it before the next version.

00:38:41.090 --> 00:38:44.030
So that's one way you can do it.

00:38:44.030 --> 00:38:47.375
You might want to have
configuration files separately.

00:38:49.640 --> 00:38:51.140
MELODY MECKFESSEL:
So we didn't show

00:38:51.140 --> 00:38:54.690
any of the administration
behind this at all.

00:38:54.690 --> 00:38:57.340
I don't know if the
Pipelines, if there's

00:38:57.340 --> 00:38:58.940
going to be another
Pipelines talk,

00:38:58.940 --> 00:39:02.670
but if you stay after, we
can get you some information.

00:39:02.670 --> 00:39:04.770
We did a couple of
them at the Sandbox,

00:39:04.770 --> 00:39:07.010
but it would be good
to probably give you

00:39:07.010 --> 00:39:09.320
some more insight into
that, because we definitely

00:39:09.320 --> 00:39:10.407
didn't cover that today.

00:39:10.407 --> 00:39:11.240
AUDIENCE: Thank you.

00:39:11.240 --> 00:39:13.560
MELODY MECKFESSEL: Sure.

00:39:13.560 --> 00:39:14.350
AUDIENCE: Hi.

00:39:14.350 --> 00:39:16.310
I was wondering, I've
seen in all your demos

00:39:16.310 --> 00:39:18.240
that they're Vadim based.

00:39:18.240 --> 00:39:20.780
Do you support Gradle?

00:39:20.780 --> 00:39:23.360
MELODY MECKFESSEL: Yes,
we're working on that.

00:39:23.360 --> 00:39:25.000
We're working on
Gradle integration.

00:39:25.000 --> 00:39:28.440
We're looking at integration
with other build systems.

00:39:28.440 --> 00:39:30.500
Yeah, I think the
idea is to support

00:39:30.500 --> 00:39:33.237
what our customers, our
developers, are using.

00:39:33.237 --> 00:39:33.820
AUDIENCE: Yes.

00:39:33.820 --> 00:39:34.820
MELODY MECKFESSEL: Yeah.

00:39:34.820 --> 00:39:35.685
AUDIENCE: Thank you.

00:39:35.685 --> 00:39:37.169
MELODY MECKFESSEL: Thanks.

00:39:37.169 --> 00:39:38.710
Thanks, everyone,
so much for coming.

00:39:38.710 --> 00:39:40.500
It's late in the
day on Thursday.

00:39:40.500 --> 00:39:41.400
We appreciate it.

00:39:41.400 --> 00:39:43.570
Thanks for coming to I/O.

