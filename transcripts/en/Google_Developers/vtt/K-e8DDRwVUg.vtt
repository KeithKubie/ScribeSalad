WEBVTT
Kind: captions
Language: en

00:00:05.400 --> 00:00:10.145
<i>So, ah, we've got an interesting release to share with you today.</i>

00:00:10.145 --> 00:00:12.595
<i>Ah, Kenton, could you please first introduce yourself?</i>

00:00:12.835 --> 00:00:15.651
I'm Kenton Varda, I'm an engineer here.

00:00:15.651 --> 00:00:20.038
<i>Cool.  So, what is it you've released today?</i>

00:00:20.038 --> 00:00:25.841
So it's called Procol Buffers.
It's the way we encode
structured data here at Google.

00:00:25.841 --> 00:00:27.504
It's, um...

00:00:27.504 --> 00:00:37.745
The basic idea is, you write a "proto" file 
which contains the definitions of

00:00:37.745 --> 00:00:42.847
structured data, and then run it through
the protocol compiler

00:00:42.847 --> 00:00:53.475
which generate classes in C++ or Java
or Python which represent those 
structures that you've defined.

00:00:53.475 --> 00:00:59.432
And, each of these classes have accessors
for all the fields you've defined, and then

00:00:59.432 --> 00:01:07.784
has methods for parsing and serializing the data
in a compact and very fast format.

00:01:07.784 --> 00:01:13.857
It's the format we use for pretty much
all our data interchange here at Google.

00:01:13.857 --> 00:01:19.736
<i>Interesting.  So, when a lot of people think of 
structured data, they think of XML,
things like that.</i>

00:01:19.736 --> 00:01:24.589
<i>So, why are we not using XML?  How did
we get to use this structure?</i>

00:01:24.589 --> 00:01:27.649
Well, XML is nice, but, um..

00:01:27.649 --> 00:01:35.058
with the sheer quantity of data that we
use here, it just wouldn't work, you know.

00:01:35.058 --> 00:01:39.734
It takes a while to decode and
to encode, and it's kind of large.

00:01:39.734 --> 00:01:42.306
We need something extremely efficient.

00:01:42.306 --> 00:01:52.213
The other problem is that XML, depending
on what kind of data you are representing,
can be kind of cumbersome to use.

00:01:52.213 --> 00:01:58.535
Like if you are trying to represent something
like HTML, which is, you know, text with
markup, then XML is great.

00:01:58.535 --> 00:02:07.196
But if you're trying to just represent,
you know, data structures that have
some set of fields, each having a simple type,

00:02:07.196 --> 00:02:14.206
then XML, it's kind of cumbersome
because you have to

00:02:14.196 --> 00:02:16.540
you know, navigate this DOM tree..

00:02:16.540 --> 00:02:20.456
and like, get element with name "whatever"

00:02:20.456 --> 00:02:26.373
and then get the inner text of that,
and then parse that and this number
and whatever you want to do.

00:02:26.373 --> 00:02:30.296
<i>Right.  So this is all, like, typed information?</i>

00:02:30.296 --> 00:02:35.061
Yes.  Protocol Buffers are strongly typed.

00:02:35.061 --> 00:02:46.433
<i>Interesting.  So, the other comparison that
people make is it sounds a little bit
IDL-ish and CORBA and things like that come out.</i>

00:02:46.433 --> 00:02:49.569
<i>is it similar to that in some ways?</i>

00:02:49.569 --> 00:02:56.021
Um.  All of these systems have different
strengths and weaknesses.

00:02:56.021 --> 00:03:02.832
Um, Protocol Buffers is just a way to encode data,

00:03:02.832 --> 00:03:08.027
it's not an RPC system,
though you could use it for RPC,
and we do use it for RPC.

00:03:08.027 --> 00:03:14.342
Um, this release does not actually
include any sort of
RPC implementation

00:03:14.342 --> 00:03:21.311
and it can actually be...
 it's designed to be used with any RPC
implementation that you want to hook it up to

00:03:21.342 --> 00:03:27.490
<i>Do you know historically how
we came to end up with Protocol Buffers?</i>

00:03:27.490 --> 00:03:30.868
Well, it's a long story...um..

00:03:30.868 --> 00:03:38.303
Protocol Buffers in their first incarnation
appeared in, I believe, late 2000

00:03:38.303 --> 00:03:42.201
I wasn't working here at the time, but, um...

00:03:42.203 --> 00:03:49.456
Jeff Dean and Sanjay Ghemawat,
the guys who are responsible
 for a lot of our big technologies

00:03:49.456 --> 00:03:52.145
like MapReduce and BigTable

00:03:52.145 --> 00:03:55.875
sort of, came up with this, um...

00:03:55.875 --> 00:04:05.223
at first.. I don't completely know the
history because I wasn't there -
but I guess at first

00:04:05.223 --> 00:04:12.876
it was just, you could define these proto files
and it would just produce a set of constants

00:04:12.923 --> 00:04:22.419
you know, numeric constants that you could
use to manually write parsers and encoders
for various formats

00:04:22.276 --> 00:04:28.024
and then over time it evolved
to the point where

00:04:28.024 --> 00:04:33.136
the protocol compiler automatically
generates everything for you.

00:04:33.136 --> 00:04:42.378
<i>OK, cool.  So you as the kind of end user developer
just have this Java class that you get back
that you can manipulate, so that you're saying</i>

00:04:42.378 --> 00:04:50.012
<i>GET to get various data back, and SET
to put data into the system, and at a 
lower level it's doing stuff with binary files</i>

00:04:50.012 --> 00:04:54.138
Yeah, it's really simple,
you just create your message class

00:04:54.138 --> 00:04:57.525
and call SET "whatever"

00:04:57.538 --> 00:05:01.245
accessors to set each field, and then

00:05:01.245 --> 00:05:06.768
serialize the string, or
serialze to a

00:05:06.768 --> 00:05:08.697
output stream, or whatever.

00:05:08.697 --> 00:05:13.957
<i>OK, so why do you think, ah, you know,
now this is open source and
people can start playing with this</i>

00:05:13.957 --> 00:05:21.566
<i>what kind of use cases do you see
where people would want to use this vs.
some of the other solutions that are out there?</i>

00:05:21.566 --> 00:05:24.118
<i>Where does this really fit in well?</i>

00:05:24.118 --> 00:05:30.714
Basically, if you need a fast, compact
format that's

00:05:30.714 --> 00:05:33.165
easy to define, and extensible

00:05:33.165 --> 00:05:40.431
meaning you can add fields, remove fields,
and still be able to interact with

00:05:40.431 --> 00:05:43.761
older programs that are using
the old version of the format

00:05:43.761 --> 00:05:46.813
then, ah, Protocol Buffers
are a good solution.

00:05:46.813 --> 00:05:53.384
As I said before, they are not great
for representing structured text.

00:05:53.384 --> 00:05:59.713
because they're not a text format, 
and you can't just insert structure
into text.

00:05:59.784 --> 00:06:06.422
They are also probably not great if you...

00:06:06.422 --> 00:06:11.412
...if your first priority is human readability,
because obviously this is a binary format

00:06:11.412 --> 00:06:18.079
although there is a text format 
that's useful for debugging,
it's primarily a binary format.

00:06:18.079 --> 00:06:25.600
<i>OK, you mentioned manipulating the data,
is there versioning built into this schema,
or how does that work?</i>

00:06:25.600 --> 00:06:30.524
Ah, yes.  It's..

00:06:30.524 --> 00:06:33.531
you don't just declare a version, um..

00:06:33.531 --> 00:06:36.885
If you add new fields to your structures

00:06:36.885 --> 00:06:41.273
and then encode a message using those new fields

00:06:41.273 --> 00:06:44.005
old programs that don't know about them
will just ignore them.

00:06:44.005 --> 00:06:45.917
<i>OK.</i>

00:06:45.917 --> 00:06:49.710
If you remove a field,
old programs will just

00:06:49.710 --> 00:06:52.090
assume it has its default value.

00:06:52.090 --> 00:06:53.663
<i>OK, cool.</i>

00:06:53.663 --> 00:06:55.554
<i>OK, so that's actually really useful.</i>

00:06:55.554 --> 00:07:00.736
<i>not have to mess around with schemas
and working through all of those
kind of systems</i>

00:07:00.736 --> 00:07:03.222
<i>if it's built into the protocol itself.</i>

00:07:03.222 --> 00:07:05.510
<i>That seems pretty useful.</i>

00:07:05.510 --> 00:07:07.111
<i>Cool.</i>

00:07:07.111 --> 00:07:14.538
<i>So, any final thoughts for developers
taking a first peek at this
open source package?</i>

00:07:14.538 --> 00:07:19.257
Yeah, well, take a look at the docs

00:07:19.257 --> 00:07:21.429
download the code, it's all
freely available

00:07:21.429 --> 00:07:26.011
and let us know what you think
at our discussion group.

00:07:26.089 --> 00:07:28.726
<i>Great, well, thanks so much for
making this happen,</i>

00:07:28.726 --> 00:07:33.297
<i>I know a bunch of people that maybe have
left Google that wish they had
Protocol Buffers.</i>

00:07:33.297 --> 00:07:37.774
<i>So it's cool to see it out in the wild now,
I really appreciate it.</i>

