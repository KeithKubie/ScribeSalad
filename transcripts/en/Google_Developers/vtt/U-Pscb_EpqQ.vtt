WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.660
NICOLAS GARNIER: --Google Drive
and have a bunch of

00:00:02.660 --> 00:00:04.770
interests in OAuth2.

00:00:04.770 --> 00:00:06.660
And also with us is Ali.

00:00:06.660 --> 00:00:09.340
Ali, can you maybe
present yourself?

00:00:09.340 --> 00:00:10.510
ALI AFSHAR: Hi, everyone.

00:00:10.510 --> 00:00:11.640
I'm Ali.

00:00:11.640 --> 00:00:16.420
I work on Google Drive Developer
Relations, also one

00:00:16.420 --> 00:00:18.850
of the developers of the
OAuth Playground.

00:00:21.730 --> 00:00:24.100
NICOLAS GARNIER: And Sergio?

00:00:24.100 --> 00:00:25.070
What about you?

00:00:25.070 --> 00:00:25.500
SERGIO GOMES: Hi.

00:00:25.500 --> 00:00:26.160
I'm Sergio.

00:00:26.160 --> 00:00:28.680
I work in the London office.

00:00:28.680 --> 00:00:32.180
I work on the AdSense APIs.

00:00:32.180 --> 00:00:34.100
NICOLAS GARNIER: So today we're
going to talk to you a

00:00:34.100 --> 00:00:37.280
bit about OAuth2, describing to
you how it works, how you

00:00:37.280 --> 00:00:44.030
can use it to authorize and use
the Google APIs and access

00:00:44.030 --> 00:00:46.400
Google users' data basically.

00:00:46.400 --> 00:00:49.180
So we'll go into a bit of
details on how the flows work

00:00:49.180 --> 00:00:52.510
and how THE critical works
in a very mostly

00:00:52.510 --> 00:00:54.060
practical point of view.

00:00:54.060 --> 00:00:58.740
And after that, we'll actually
demonstrate how it works live

00:00:58.740 --> 00:01:02.470
with some data using a really
cool tool called the OAuth2

00:01:02.470 --> 00:01:04.480
Playground that you'll
see in a bit.

00:01:04.480 --> 00:01:10.610
And I guess that's it
for the agenda.

00:01:10.610 --> 00:01:12.400
So first, let's start.

00:01:12.400 --> 00:01:14.220
So what is OAuth2, basically?

00:01:14.220 --> 00:01:18.520
So OAuth2 is what we call
an authorization--

00:01:18.520 --> 00:01:20.320
and authentication, actually--

00:01:20.320 --> 00:01:21.650
protocol.

00:01:21.650 --> 00:01:25.660
We use it to basically allow
third-party developers to

00:01:25.660 --> 00:01:29.550
access users' data
on their behalf.

00:01:29.550 --> 00:01:32.810
They're going to gain access
to the users' data, so for

00:01:32.810 --> 00:01:37.140
example, to your Contacts data
or your Google Calendar data.

00:01:37.140 --> 00:01:39.110
That's hosted on Google Cloud.

00:01:39.110 --> 00:01:43.020
So to illustrate that, let me
first show you a real-life

00:01:43.020 --> 00:01:48.530
example of how OAuth2 it works
out there, how people have

00:01:48.530 --> 00:01:50.840
been using it to access
users' data.

00:01:50.840 --> 00:01:52.090
So let me share my screen.

00:01:55.080 --> 00:01:57.900
All right.

00:01:57.900 --> 00:01:59.150
Share selected window.

00:02:02.180 --> 00:02:05.180
Can you guys see my screen?

00:02:05.180 --> 00:02:05.350
Sergio?

00:02:05.350 --> 00:02:05.410
Ali?

00:02:05.410 --> 00:02:05.580
Yep?

00:02:05.580 --> 00:02:06.724
SERGIO GOMES: Yep.

00:02:06.724 --> 00:02:07.560
ALI AFSHAR: Yep.

00:02:07.560 --> 00:02:09.360
NICOLAS GARNIER: So this
is MindMeister.

00:02:09.360 --> 00:02:15.030
MindMeister is one of the web
applications out there that

00:02:15.030 --> 00:02:17.020
are using some Google APIs.

00:02:17.020 --> 00:02:18.990
They are an application
to create mind maps.

00:02:18.990 --> 00:02:21.490
They have this mind map editor,
which is really cool.

00:02:21.490 --> 00:02:24.190
I invite you to try it out.

00:02:24.190 --> 00:02:28.300
One other feature that
illustrates how OAuth2 works

00:02:28.300 --> 00:02:30.450
is their sharing feature.

00:02:30.450 --> 00:02:33.310
So once you've created a mind
map and you want to share it

00:02:33.310 --> 00:02:36.540
with your buddies, or your
colleagues, or friends, you're

00:02:36.540 --> 00:02:39.740
simply going to click share
here, and you're going to be

00:02:39.740 --> 00:02:41.810
brought to these sharing
dialogue.

00:02:41.810 --> 00:02:44.910
And if you don't want to type
the whole email address or you

00:02:44.910 --> 00:02:47.200
don't remember the email
addresses of your friends and

00:02:47.200 --> 00:02:51.810
colleagues, you have this
auto-complete button here.

00:02:51.810 --> 00:02:55.100
What it's going to do, it's
going to ask for--

00:02:55.100 --> 00:02:56.160
and that's OAuth2.

00:02:56.160 --> 00:02:58.270
We're seeing OAuth2 in
action right now.

00:02:58.270 --> 00:03:03.080
It's going to ask access to
your Google Contacts data.

00:03:03.080 --> 00:03:05.450
So this is how OAuth2
works, basically.

00:03:05.450 --> 00:03:08.620
You have to redirect the user
to this, what we call the

00:03:08.620 --> 00:03:12.600
Grants page here, the Grants
screen, that asks the user if

00:03:12.600 --> 00:03:16.436
he can let this application
manage their contacts here,

00:03:16.436 --> 00:03:18.180
for example.

00:03:18.180 --> 00:03:20.420
So let's say I can trust
MindMeister.

00:03:20.420 --> 00:03:25.790
I'm going to allow them to
access my data here.

00:03:25.790 --> 00:03:28.040
So how it works is we're
redirected back to

00:03:28.040 --> 00:03:28.490
MindMeister.

00:03:28.490 --> 00:03:32.540
And MindMeister got these tokens
we're going to see in a

00:03:32.540 --> 00:03:36.860
bit more detail right after with
Sergio how that works.

00:03:36.860 --> 00:03:39.570
But with this token, MindMeister
is going to be

00:03:39.570 --> 00:03:44.470
allowed to fetch all of my
contacts because I've given

00:03:44.470 --> 00:03:45.810
them the right to do so.

00:03:45.810 --> 00:03:48.810
And here, as you can see, this
is all my friends and my

00:03:48.810 --> 00:03:52.840
contacts that are the ones
you can see in Gmail.

00:03:52.840 --> 00:03:56.430
And they started fetching the
list of all my contacts.

00:03:56.430 --> 00:04:00.620
And then you can use these
contacts that were on Google

00:04:00.620 --> 00:04:05.660
to share mind maps with
your friends.

00:04:05.660 --> 00:04:07.700
Let me go back.

00:04:07.700 --> 00:04:12.290
So that was it about how it
works in real life, the user

00:04:12.290 --> 00:04:15.820
experience that you're
going to see.

00:04:15.820 --> 00:04:19.100
And now we're going to
switch to Sergio.

00:04:19.100 --> 00:04:22.800
Sergio is going to show you in
a bit more detail the flow,

00:04:22.800 --> 00:04:25.700
how it works behind the scenes
basically, how the protocol

00:04:25.700 --> 00:04:26.730
works behind the scenes.

00:04:26.730 --> 00:04:32.600
And after that, we'll
see with some more--

00:04:32.600 --> 00:04:35.220
live using the OAuth2
Playground, see

00:04:35.220 --> 00:04:36.290
the protocol in action.

00:04:36.290 --> 00:04:39.780
So Sergio, if you
could go ahead.

00:04:39.780 --> 00:04:40.075
SERGIO GOMES: Sure.

00:04:40.075 --> 00:04:45.420
All right, let me start by
sharing my screen as well.

00:04:45.420 --> 00:04:51.225
I've got a little incognito
window set up with a couple of

00:04:51.225 --> 00:04:53.700
things that I want
to show you.

00:04:53.700 --> 00:04:58.600
All right, so to start off, I'm
going to give you just a

00:04:58.600 --> 00:05:03.640
quick look at the diagram
for OAuth2.

00:05:03.640 --> 00:05:06.300
And this looks really,
really complicated.

00:05:06.300 --> 00:05:11.680
But as Nicolas showed you
earlier, the user experience

00:05:11.680 --> 00:05:16.120
is actually relatively simple,
where you get a prompt asking

00:05:16.120 --> 00:05:21.630
you to provide access to the
different scopes which are

00:05:21.630 --> 00:05:22.920
being requested.

00:05:22.920 --> 00:05:28.580
You authorize it, and somehow,
magically, the application

00:05:28.580 --> 00:05:32.790
gets all of the data that it
needs, gets your credentials.

00:05:32.790 --> 00:05:36.295
NICOLAS GARNIER: And Sergio,
sorry to disturb you, but if

00:05:36.295 --> 00:05:40.150
that wasn't clear and if I
haven't stated very clearly,

00:05:40.150 --> 00:05:43.200
the very, very big advantage
between this and what we used

00:05:43.200 --> 00:05:45.250
to have in the past
is that the user

00:05:45.250 --> 00:05:47.730
doesn't share their passwords.

00:05:47.730 --> 00:05:51.620
So you don't share your username
and password with the

00:05:51.620 --> 00:05:53.480
third-party application.

00:05:53.480 --> 00:05:55.600
And the third-party application
only gets access

00:05:55.600 --> 00:05:58.880
to the data that you've allowed,
so in the example

00:05:58.880 --> 00:06:00.560
before, only the global
contacts data.

00:06:00.560 --> 00:06:02.950
They don't have your password,
and they cannot go in Gmail

00:06:02.950 --> 00:06:04.280
and change it.

00:06:04.280 --> 00:06:07.210
They cannot get their passwords
stolen that could

00:06:07.210 --> 00:06:09.410
happen with third-party
applications

00:06:09.410 --> 00:06:10.240
or stuff like that.

00:06:10.240 --> 00:06:13.680
So that's one of the
main advantages.

00:06:13.680 --> 00:06:14.600
Sorry, Sergio.

00:06:14.600 --> 00:06:15.150
SERGIO GOMES: That's
all right.

00:06:15.150 --> 00:06:15.850
Exactly.

00:06:15.850 --> 00:06:20.050
So all of the authentication
part is handled by Google.

00:06:20.050 --> 00:06:23.500
So Google handles your
passwords, making sure you are

00:06:23.500 --> 00:06:25.010
who you claim to be.

00:06:25.010 --> 00:06:28.700
And then the only thing that you
need to provide with OAuth

00:06:28.700 --> 00:06:30.250
is the authorization part.

00:06:30.250 --> 00:06:35.230
So that's the part where you're
asking the user to give

00:06:35.230 --> 00:06:37.230
you access to their data.

00:06:37.230 --> 00:06:39.080
So that's where OAuth2
comes in.

00:06:39.080 --> 00:06:41.820
And that's where this
diagram comes in.

00:06:41.820 --> 00:06:49.000
So the first thing that happens
is that there is a

00:06:49.000 --> 00:06:52.170
request sent to the server.

00:06:52.170 --> 00:06:57.430
The user gets redirected to
the authentication page.

00:06:57.430 --> 00:07:01.070
They perform their logging in,
so the authentication step

00:07:01.070 --> 00:07:02.240
happens there.

00:07:02.240 --> 00:07:05.760
And then the user gets
redirected back to your

00:07:05.760 --> 00:07:09.680
application on a callback
URL that you specified.

00:07:09.680 --> 00:07:12.590
And I'm going to show you how
to set up all of this from

00:07:12.590 --> 00:07:16.580
scratch with a new project
on your APIs console.

00:07:16.580 --> 00:07:22.800
So once your application gets an
exchange code that you can

00:07:22.800 --> 00:07:27.290
use, this exchange code, you
then make a second request to

00:07:27.290 --> 00:07:29.740
the server, and you exchange
this for tokens.

00:07:29.740 --> 00:07:31.500
And you get a token response,
which includes

00:07:31.500 --> 00:07:33.040
two different tokens.

00:07:33.040 --> 00:07:36.720
One is a refresh token, and
one is an access token.

00:07:36.720 --> 00:07:39.450
Now, the access token is the one
that you can actually use

00:07:39.450 --> 00:07:41.100
to make requests.

00:07:41.100 --> 00:07:42.880
But this token is short-lived.

00:07:42.880 --> 00:07:44.790
It'll only exist for
a relatively

00:07:44.790 --> 00:07:46.870
small amount of time.

00:07:46.870 --> 00:07:49.420
That's where the refresh
token comes in.

00:07:49.420 --> 00:07:52.800
This is a token that you can
store on your site, which is

00:07:52.800 --> 00:07:54.330
specific to a user.

00:07:54.330 --> 00:07:58.230
And it allows you to request new
access tokens as needed.

00:07:58.230 --> 00:08:02.070
Now I'm going to show you how to
set up a new project using

00:08:02.070 --> 00:08:04.100
the APIs console.

00:08:04.100 --> 00:08:07.230
It's this address here in case
you haven't seen it.

00:08:12.160 --> 00:08:14.430
Once you sign up to the page
for the first time, you get

00:08:14.430 --> 00:08:16.400
this little prompt,
and you can create

00:08:16.400 --> 00:08:20.110
your own little project.

00:08:20.110 --> 00:08:21.520
And here you go.

00:08:21.520 --> 00:08:23.370
It creates a new project
by default,

00:08:23.370 --> 00:08:24.830
just called API Project.

00:08:24.830 --> 00:08:27.820
And you get a list of all of the
different Google APIs that

00:08:27.820 --> 00:08:29.650
are available.

00:08:29.650 --> 00:08:32.620
You can enable it.

00:08:32.620 --> 00:08:35.840
You get a little Terms
and Service.

00:08:35.840 --> 00:08:40.020
And once you accept that, you
can then go into the API

00:08:40.020 --> 00:08:45.810
access page for your project,
which by default doesn't have

00:08:45.810 --> 00:08:47.230
any OAuth2 data.

00:08:47.230 --> 00:08:50.430
It only has your simple API
access data, which only allows

00:08:50.430 --> 00:08:53.110
you to make unauthenticated
requests.

00:08:53.110 --> 00:09:00.140
So any API that requires you to
access protected user data

00:09:00.140 --> 00:09:03.540
will not work without an
OAuth2 authentication.

00:09:03.540 --> 00:09:05.490
So this is where come here.

00:09:05.490 --> 00:09:08.280
You create a new client ID.

00:09:08.280 --> 00:09:15.060
You just give your project a--

00:09:15.060 --> 00:09:18.140
"sample" here.

00:09:18.140 --> 00:09:19.510
And here is the important
part.

00:09:19.510 --> 00:09:22.990
This is where you're choosing
your type of application.

00:09:22.990 --> 00:09:24.840
Now, today, we're only going
to be talking about web

00:09:24.840 --> 00:09:26.070
applications.

00:09:26.070 --> 00:09:28.080
But there are also service
accounts in the installed

00:09:28.080 --> 00:09:28.540
applications.

00:09:28.540 --> 00:09:30.930
You could take a look at our
documentation later on to see

00:09:30.930 --> 00:09:33.280
what the difference is with
these different types of

00:09:33.280 --> 00:09:34.280
authentication.

00:09:34.280 --> 00:09:38.680
But for both server side web
apps and client side web apps,

00:09:38.680 --> 00:09:41.020
it's the web application that
you need to choose here.

00:09:41.020 --> 00:09:46.450
And here you can set up your
site, your host name.

00:09:46.450 --> 00:09:49.510
You can choose between HTTP
and HTTPS Of course, you

00:09:49.510 --> 00:09:52.240
should always be using
HTTPS where possible.

00:09:52.240 --> 00:09:54.660
You just input your site
name here, and you

00:09:54.660 --> 00:09:56.280
create your client ID.

00:09:56.280 --> 00:09:58.780
Now this will give you
a couple of things.

00:09:58.780 --> 00:10:03.860
It'll give you a client ID,
which you are going to make a

00:10:03.860 --> 00:10:07.520
part of your application, so
that it can identify you as a

00:10:07.520 --> 00:10:11.790
developer, and the client secret
as well, although I

00:10:11.790 --> 00:10:15.720
believe this is only used for
installed applications if I'm

00:10:15.720 --> 00:10:18.190
not mistaken.

00:10:18.190 --> 00:10:24.060
So that's it for creating
a project.

00:10:24.060 --> 00:10:27.570
So how do you actually
use this?

00:10:27.570 --> 00:10:31.970
So going back to the web flow
here, you're going to have to

00:10:31.970 --> 00:10:38.210
make an initial redirect
to send the user to the

00:10:38.210 --> 00:10:39.560
authentication page.

00:10:39.560 --> 00:10:41.120
You're going to get
a code back.

00:10:41.120 --> 00:10:43.580
You exchange this code
for the two tokens.

00:10:43.580 --> 00:10:47.870
And then finally, you make an
API call with the tokens.

00:10:52.600 --> 00:10:53.170
All right.

00:10:53.170 --> 00:10:56.560
I think that's mostly it for
the web server flow.

00:10:56.560 --> 00:11:00.555
So I'll hand it off to Ali now,
who should be able to--

00:11:00.555 --> 00:11:03.670
oh, actually just before that,
I'd like to show you a quick

00:11:03.670 --> 00:11:11.590
demo of the server side flow
using our client libraries.

00:11:11.590 --> 00:11:14.590
We have client libraries for
many different programming

00:11:14.590 --> 00:11:18.630
languages, one of them, PHP, and
that's the one we're going

00:11:18.630 --> 00:11:19.010
to be showing you today.

00:11:19.010 --> 00:11:22.080
There are samples already
included with the PHP client

00:11:22.080 --> 00:11:26.410
library for the AdSense
Management API.

00:11:26.410 --> 00:11:28.620
And that's actually what I'm
going to be showing you here.

00:11:28.620 --> 00:11:32.350
So I've got this set up on my
local machine here, so I'm

00:11:32.350 --> 00:11:35.120
going to be calling these
from local hosts.

00:11:35.120 --> 00:11:39.120
This is actually the
wrong URL, sorry.

00:11:39.120 --> 00:11:42.560
I'm going to be calling these
from local hosts.

00:11:42.560 --> 00:11:45.450
But, of course, the experience
would be the same if you had

00:11:45.450 --> 00:11:47.790
this set up somewhere online.

00:11:47.790 --> 00:11:50.110
So I'm just going to
log into account.

00:11:50.110 --> 00:11:52.210
And this is what you get.

00:11:52.210 --> 00:11:57.100
This is the user experience when
you're authorizing your

00:11:57.100 --> 00:11:58.030
application.

00:11:58.030 --> 00:11:59.290
This is what the
user will see.

00:11:59.290 --> 00:12:00.380
So they just--

00:12:00.380 --> 00:12:01.640
NICOLAS GARNIER: Allow access?

00:12:01.640 --> 00:12:02.810
Was that correct?

00:12:02.810 --> 00:12:03.410
SERGIO GOMES: Yep.

00:12:03.410 --> 00:12:08.350
NICOLAS GARNIER: Right here,
just talking a bit more detail

00:12:08.350 --> 00:12:10.480
of this page, the kind
of parameters

00:12:10.480 --> 00:12:12.180
you pass it, so that's--

00:12:12.180 --> 00:12:17.420
the URL that you see up there,
that's where you passed what

00:12:17.420 --> 00:12:18.490
we call a scope.

00:12:18.490 --> 00:12:22.900
A scope defines basically each
of the APIs you want or the

00:12:22.900 --> 00:12:25.480
kind of data you
want access to.

00:12:25.480 --> 00:12:27.920
So here you've added you've
probably asked

00:12:27.920 --> 00:12:29.300
for the AdSense scope.

00:12:29.300 --> 00:12:30.410
You can have more than one.

00:12:30.410 --> 00:12:33.600
So if you wanted to have access
to AdSense and Google

00:12:33.600 --> 00:12:36.830
Contacts, in the URL you would
have added the scope for

00:12:36.830 --> 00:12:39.610
AdSense and for Google Contacts
and for any other

00:12:39.610 --> 00:12:42.810
APIs that you wanted
to have access to.

00:12:42.810 --> 00:12:46.085
And so I just wanted
to mention that.

00:12:46.085 --> 00:12:46.350
SERGIO GOMES: Exactly.

00:12:46.350 --> 00:12:50.670
And to add on to what you're
saying, you should actually

00:12:50.670 --> 00:12:53.680
request as many as possible
in the same request.

00:12:53.680 --> 00:12:57.140
Because every single time that
you request access to a new

00:12:57.140 --> 00:13:00.920
scope, you're going to have to
send the users through this

00:13:00.920 --> 00:13:02.450
authorization flow again.

00:13:02.450 --> 00:13:04.550
So you'll definitely want to
make sure that you request

00:13:04.550 --> 00:13:08.180
access to all of the APIs you
need at the beginning, so that

00:13:08.180 --> 00:13:14.100
the user only sees the
authorization flow once.

00:13:14.100 --> 00:13:17.690
And this prompt here requests
access to all of the

00:13:17.690 --> 00:13:20.400
applications in one
single step.

00:13:20.400 --> 00:13:23.390
This will also help you later
on when you're saving your

00:13:23.390 --> 00:13:27.750
credentials for later reuse so
that you don't have to send

00:13:27.750 --> 00:13:30.210
the user through the flow every
single time they log in

00:13:30.210 --> 00:13:33.220
to your website.

00:13:33.220 --> 00:13:36.150
That's actually controlled by
this parameter here, which you

00:13:36.150 --> 00:13:39.790
see me highlighting, access
type equals offline.

00:13:39.790 --> 00:13:43.490
This means that your application
can request access

00:13:43.490 --> 00:13:48.330
to the user's data even if the
user is offline and also

00:13:48.330 --> 00:13:52.240
allows you to store this
data for later use.

00:13:52.240 --> 00:13:53.680
NICOLAS GARNIER: That's
basically going to give you

00:13:53.680 --> 00:13:55.900
the refresh token that
we talked about.

00:13:55.900 --> 00:13:56.290
SERGIO GOMES: Exactly.

00:13:56.290 --> 00:13:58.570
NICOLAS GARNIER: The refresh
token, which can be used in an

00:13:58.570 --> 00:14:01.350
unlimited period of time,
unlike the access token.

00:14:01.350 --> 00:14:04.790
If you didn't have this access
type equal offline, if you had

00:14:04.790 --> 00:14:08.240
access type equal online, we
would only grant an access

00:14:08.240 --> 00:14:10.990
token when you exchange
the code.

00:14:10.990 --> 00:14:13.570
And you would only have access
to the users' data for one

00:14:13.570 --> 00:14:17.130
hour, which is the current
validity and the usual

00:14:17.130 --> 00:14:19.000
validity in Google APIs.

00:14:19.000 --> 00:14:21.422
I mean, the usual time
to lift off access

00:14:21.422 --> 00:14:23.810
tokens in Google APIs.

00:14:23.810 --> 00:14:25.780
SERGIO GOMES: Exactly.

00:14:25.780 --> 00:14:30.600
So here by clicking allow
access, it's a little bit too

00:14:30.600 --> 00:14:33.010
fast so you couldn't really
see what happened.

00:14:33.010 --> 00:14:38.120
But the user got redirected back
to the callback URL that

00:14:38.120 --> 00:14:41.100
we set up in the Google
APIs console.

00:14:41.100 --> 00:14:44.970
And this callback URL is the one
that handles the request.

00:14:44.970 --> 00:14:48.800
Now, the callback URL
will get the code as

00:14:48.800 --> 00:14:50.690
we mentioned earlier.

00:14:50.690 --> 00:14:52.150
I'll show the flow here.

00:14:52.150 --> 00:14:57.580
So this code, you then make a
second request to exchange for

00:14:57.580 --> 00:14:58.120
the tokens.

00:14:58.120 --> 00:15:01.270
And the tokens--

00:15:01.270 --> 00:15:04.015
NICOLAS GARNIER: Just to be
clear, the second request is

00:15:04.015 --> 00:15:04.970
done server side.

00:15:04.970 --> 00:15:06.370
The user doesn't see anything.

00:15:06.370 --> 00:15:09.000
So this doesn't affect
the user experience.

00:15:09.000 --> 00:15:11.910
It's just exchanging the
code to get the tokens.

00:15:11.910 --> 00:15:13.400
So we don't pass the tokens.

00:15:13.400 --> 00:15:15.770
There's a simple technical
reason.

00:15:15.770 --> 00:15:19.480
We don't pass directly the
access token and the refresh

00:15:19.480 --> 00:15:24.495
token in the URL back to the
client on the server side flow

00:15:24.495 --> 00:15:27.880
because we wanted to allow users
to be able to use HTTP

00:15:27.880 --> 00:15:29.950
URLs, callback URLs.

00:15:29.950 --> 00:15:31.990
And as you already know, HTTP
callback URLs could be

00:15:31.990 --> 00:15:34.270
intercepted by a man in
the middle attack.

00:15:34.270 --> 00:15:40.320
So the workaround we found
is it was too critical.

00:15:40.320 --> 00:15:43.980
You send a code and then this
code is exchanged using your

00:15:43.980 --> 00:15:47.620
client ID and client secrets
your OAuth2 credentials to get

00:15:47.620 --> 00:15:49.820
the tokens back.

00:15:49.820 --> 00:15:52.960
So that's basically
how it works.

00:15:52.960 --> 00:15:54.300
SERGIO GOMES: Right.

00:15:54.300 --> 00:15:56.935
So going back to our example
here, now that we are

00:15:56.935 --> 00:15:59.410
authenticated, we can run a
number of requests on this.

00:15:59.410 --> 00:16:01.990
Here, just for illustration
purposes, I'm just going to

00:16:01.990 --> 00:16:04.190
get all of the ad clients
on this account.

00:16:04.190 --> 00:16:06.700
And we're getting an error here,
of course, because this

00:16:06.700 --> 00:16:10.760
is a live demo, and all live
demos have problems.

00:16:10.760 --> 00:16:13.340
But here it looks like I
authenticated with the wrong

00:16:13.340 --> 00:16:16.600
user that doesn't really have
an AdSense account.

00:16:16.600 --> 00:16:19.630
So this is a response
from the API.

00:16:19.630 --> 00:16:21.190
It's just not the response
we're looking for.

00:16:24.270 --> 00:16:25.120
In any case--

00:16:25.120 --> 00:16:25.610
NICOLAS GARNIER: It's
not a problem.

00:16:25.610 --> 00:16:28.130
See, we'll see later on
the OAuth2 Playground.

00:16:28.130 --> 00:16:32.010
We'll run a bunch of other demos
using other APIs that

00:16:32.010 --> 00:16:33.592
should work for us--

00:16:33.592 --> 00:16:34.034
SERGIO GOMES: Exactly.

00:16:34.034 --> 00:16:35.360
NICOLAS GARNIER: --hopefully.

00:16:35.360 --> 00:16:36.890
We cannot do worse now.

00:16:36.890 --> 00:16:39.200
We failed all our demos,
our first ones.

00:16:39.200 --> 00:16:42.170
So now we can only improve
from now on.

00:16:42.170 --> 00:16:42.940
SERGIO GOMES: It can
only improve

00:16:42.940 --> 00:16:44.040
from now, that's correct.

00:16:44.040 --> 00:16:46.760
Right, so I just wanted to talk
a little bit more about

00:16:46.760 --> 00:16:51.150
what you can do to prevent the
user from going through a lot

00:16:51.150 --> 00:16:54.660
of authorization requests.

00:16:54.660 --> 00:16:58.450
So as we were mentioning
earlier, if you set up your

00:16:58.450 --> 00:17:03.590
access type as offline, it means
that you'll get back

00:17:03.590 --> 00:17:06.130
both an access token in the
refresh and a refresh token.

00:17:06.130 --> 00:17:08.099
Now, the access token is the
one you can use to make

00:17:08.099 --> 00:17:09.760
requests immediately.

00:17:09.760 --> 00:17:14.140
But it's important that you
save this refresh token.

00:17:14.140 --> 00:17:17.410
This refresh token is per
user and per scope.

00:17:17.410 --> 00:17:19.614
So it only works for
the scopes that

00:17:19.614 --> 00:17:22.450
you initially requested.

00:17:22.450 --> 00:17:26.680
Once you store it, this token
is valid indefinitely.

00:17:26.680 --> 00:17:29.140
The only way that it can get
revoked is if the user logs

00:17:29.140 --> 00:17:31.970
into their account settings
and revokes access to your

00:17:31.970 --> 00:17:33.280
application.

00:17:33.280 --> 00:17:36.570
And once you have this refreshed
token, then you can

00:17:36.570 --> 00:17:39.630
use it to automatically, without
redirecting the user

00:17:39.630 --> 00:17:43.110
anywhere, get new access tokens
to be able to access

00:17:43.110 --> 00:17:44.070
the same data.

00:17:44.070 --> 00:17:48.370
So it's important to note this,
because if you don't ask

00:17:48.370 --> 00:17:52.030
for offline access and if you
don't star these refresh

00:17:52.030 --> 00:17:54.050
tokens, you're going to be
prompting your users all the

00:17:54.050 --> 00:17:56.540
time with authorization
requests, and they're going to

00:17:56.540 --> 00:17:59.710
get very sick of your
application very soon.

00:17:59.710 --> 00:18:05.460
All right, so things work a
little bit differently on the

00:18:05.460 --> 00:18:08.160
JavaScripts side of things, so
your application is client

00:18:08.160 --> 00:18:10.240
side rather than server side.

00:18:10.240 --> 00:18:12.840
And Ali is going to be talking
to you a little

00:18:12.840 --> 00:18:14.450
bit more about that.

00:18:14.450 --> 00:18:16.640
Ali?

00:18:16.640 --> 00:18:18.730
ALI AFSHAR: Thanks, Sergio.

00:18:18.730 --> 00:18:21.830
So you just mentioned the really
interesting point about

00:18:21.830 --> 00:18:23.140
the web server side flow.

00:18:23.140 --> 00:18:24.660
It's in two steps, really.

00:18:24.660 --> 00:18:28.250
The first step is between the
user and the OAuth service,

00:18:28.250 --> 00:18:30.120
where the user says,
yes, I'm happy.

00:18:30.120 --> 00:18:30.970
Yes, I am myself.

00:18:30.970 --> 00:18:31.840
I've authenticated.

00:18:31.840 --> 00:18:33.640
I'm happy to grant access.

00:18:33.640 --> 00:18:37.550
The second step of it was an
exchange between the server

00:18:37.550 --> 00:18:40.670
ie, the application and
the OAuth service.

00:18:40.670 --> 00:18:44.670
And that exchange involves the
applications credentials.

00:18:44.670 --> 00:18:47.150
So it's two steps-- one, the
user's credentials, the other

00:18:47.150 --> 00:18:49.180
one is the application's
credentials.

00:18:49.180 --> 00:18:52.080
And they all get together and
agree that this is a good

00:18:52.080 --> 00:18:53.520
thing to happen.

00:18:53.520 --> 00:18:57.820
Now, the difference in
JavaScript on the client in

00:18:57.820 --> 00:19:00.750
the browser is that
nothing is secret.

00:19:00.750 --> 00:19:02.660
So you know that you just can't
keep a secret in the

00:19:02.660 --> 00:19:04.650
browser, because someone can
just look at the code.

00:19:04.650 --> 00:19:07.450
And so instead of having
the two-step

00:19:07.450 --> 00:19:09.100
process, we say, OK, fine.

00:19:09.100 --> 00:19:10.490
We won't do that.

00:19:10.490 --> 00:19:14.050
We'll have a single-step
process, where instead of

00:19:14.050 --> 00:19:18.210
asking for a code, which you can
then exchange for a token,

00:19:18.210 --> 00:19:19.890
you just ask for a token.

00:19:19.890 --> 00:19:25.590
And that token comes back
in the form of a

00:19:25.590 --> 00:19:28.710
fragment in the URL, OK.

00:19:28.710 --> 00:19:28.970
So that just--

00:19:28.970 --> 00:19:29.460
NICOLAS GARNIER: Sorry.

00:19:29.460 --> 00:19:30.110
ALI AFSHAR: --prevents
it from being--

00:19:30.110 --> 00:19:31.070
NICOLAS GARNIER: Can
I do it again?

00:19:31.070 --> 00:19:34.390
It's important to note here
that fragments in the URL

00:19:34.390 --> 00:19:36.510
cannot be intercepted by a
man-in-the-middle attack.

00:19:36.510 --> 00:19:38.790
Only the browser sees it.

00:19:38.790 --> 00:19:42.870
So the fragment parts are on the
browser side and don't go

00:19:42.870 --> 00:19:47.710
through all the hops, all the
servers that redirects the

00:19:47.710 --> 00:19:49.110
actual HTTP request.

00:19:49.110 --> 00:19:53.570
So that's why it's actually
secure to give an access token

00:19:53.570 --> 00:19:56.110
directly in the URL in
a hash fragment.

00:19:56.110 --> 00:19:58.330
And that's the main difference
between the JavaScript flow

00:19:58.330 --> 00:20:00.920
and the server.

00:20:00.920 --> 00:20:02.880
ALI AFSHAR: It's exactly
right, Nicolas.

00:20:02.880 --> 00:20:05.390
It's safe, and it only
takes one step.

00:20:05.390 --> 00:20:07.810
Sergio, could you possibly
stop presenting?

00:20:07.810 --> 00:20:09.768
Is that possible?

00:20:12.570 --> 00:20:13.672
He's gone.

00:20:13.672 --> 00:20:15.050
SERGIO GOMES: Am I
still presenting?

00:20:15.050 --> 00:20:16.480
Sorry about that.

00:20:16.480 --> 00:20:17.960
All right, there we go.

00:20:17.960 --> 00:20:19.400
It should be good now.

00:20:19.400 --> 00:20:21.650
ALI AFSHAR: You make a similar
kind of request.

00:20:21.650 --> 00:20:23.280
You redirect the browser.

00:20:23.280 --> 00:20:25.000
You again need to redirect
the URI.

00:20:25.000 --> 00:20:27.590
The scopes are exactly
the same.

00:20:27.590 --> 00:20:30.730
Another main difference in
when you're calling it is

00:20:30.730 --> 00:20:32.780
there's no potential
to have offline.

00:20:32.780 --> 00:20:34.790
You can't get a refresh
token in this case.

00:20:34.790 --> 00:20:36.950
If you could get one, where
would you store it?

00:20:36.950 --> 00:20:37.810
There's nowhere to store it.

00:20:37.810 --> 00:20:39.240
There's no way to be secret.

00:20:39.240 --> 00:20:43.360
So we don't have available
offline access.

00:20:43.360 --> 00:20:46.060
One addition that we do have,
one extra feature here, is

00:20:46.060 --> 00:20:49.970
that we allow your application
to decide whether or not the

00:20:49.970 --> 00:20:51.570
user will be prompted.

00:20:51.570 --> 00:20:53.820
So in some cases, of
course, the user

00:20:53.820 --> 00:20:54.810
will have to be prompted.

00:20:54.810 --> 00:20:56.300
They've never granted access.

00:20:56.300 --> 00:20:58.910
But once they have grant access,
if your token's about

00:20:58.910 --> 00:21:05.680
to expire, which it will after
60 minutes, You can just run

00:21:05.680 --> 00:21:09.070
the flow again, but this
time passing auto.

00:21:09.070 --> 00:21:12.490
And if you pass auto for the
approval prompt, it's clever

00:21:12.490 --> 00:21:15.760
enough to know whether or not
the user should be prompted.

00:21:15.760 --> 00:21:18.050
So this sounds kind of
a bit complicated.

00:21:18.050 --> 00:21:20.180
And to be honest, writing it
yourself is not exactly

00:21:20.180 --> 00:21:22.770
straightforward, which is why
the easiest way of doing this

00:21:22.770 --> 00:21:26.090
is using the Google client
library that actually handled

00:21:26.090 --> 00:21:26.790
all of this for you.

00:21:26.790 --> 00:21:29.840
So you make a single call, and
you have a token, and you can

00:21:29.840 --> 00:21:33.130
use that token really for as
long as the session lasts by

00:21:33.130 --> 00:21:34.360
using it auto.

00:21:34.360 --> 00:21:37.840
And the user will only be asked
for their access once.

00:21:37.840 --> 00:21:41.110
Now, to show you how that
happens, Nicolas is going to

00:21:41.110 --> 00:21:43.080
go through some samples on
the OAuth Playground.

00:21:43.080 --> 00:21:46.220
Now, the OAuth Playground,
because it's specifically a

00:21:46.220 --> 00:21:51.820
tool to allow you to debug and
experiment with OAuth2, we

00:21:51.820 --> 00:21:53.990
allow you to do these various
kinds of flow.

00:21:53.990 --> 00:21:56.190
And perhaps you might want to
experiment with them yourself

00:21:56.190 --> 00:21:58.290
to decide which one is for you
and which one is for your

00:21:58.290 --> 00:21:59.190
application.

00:21:59.190 --> 00:22:02.280
Certainly, if you don't have a
heavy set server-side, making

00:22:02.280 --> 00:22:06.030
a call to an API in JavaScript
is one of the most simple

00:22:06.030 --> 00:22:09.190
things you can do without having
to add additional code.

00:22:09.190 --> 00:22:11.870
So if you can get away with
this, if you get away with the

00:22:11.870 --> 00:22:15.400
client side flow and making
client side requests, then the

00:22:15.400 --> 00:22:20.210
JavaScript client-side
flow is for you.

00:22:20.210 --> 00:22:20.930
Any questions?

00:22:20.930 --> 00:22:24.440
Nicolas, Sergio, anything
to add to that?

00:22:24.440 --> 00:22:24.660
NICOLAS GARNIER: No.

00:22:24.660 --> 00:22:28.660
I just wanted to add also that
when you use a refresh token

00:22:28.660 --> 00:22:32.160
to get the new access token for
service side flow, that's

00:22:32.160 --> 00:22:33.410
called refreshing your token.

00:22:33.410 --> 00:22:36.480
But our client libraries
usually handle that

00:22:36.480 --> 00:22:37.170
automatically.

00:22:37.170 --> 00:22:40.240
So our client library for Java,
for PHP, et cetera, for

00:22:40.240 --> 00:22:43.990
Ruby, you just pass in your
refresh token and your access

00:22:43.990 --> 00:22:49.540
token, and it's always going
to refresh the token behind

00:22:49.540 --> 00:22:51.340
the scenes without you
even noticing it.

00:22:51.340 --> 00:22:54.450
So you don't really need to
care about this or need to

00:22:54.450 --> 00:22:55.310
handle this.

00:22:55.310 --> 00:22:58.045
Just passing the refresh token,
automatically the

00:22:58.045 --> 00:23:04.900
client library is going to use
it to get new access tokens

00:23:04.900 --> 00:23:08.550
once your credentials
have expired.

00:23:08.550 --> 00:23:11.030
SERGIO GOMES: Sorry, just to
add to that, I just want to

00:23:11.030 --> 00:23:14.170
say that we actually have
different client libraries for

00:23:14.170 --> 00:23:14.820
different languages.

00:23:14.820 --> 00:23:18.880
And each one actually handles
things the correct way that

00:23:18.880 --> 00:23:20.770
you would expect things to
be handled natively.

00:23:20.770 --> 00:23:23.970
So, for example, the Java client
library allows you to

00:23:23.970 --> 00:23:27.510
use JDO to store your
credentials and automatically

00:23:27.510 --> 00:23:30.690
access them and refresh them and
rewrite them once they're

00:23:30.690 --> 00:23:32.130
accessed and all that.

00:23:32.130 --> 00:23:36.380
The iPhone one uses
native storage.

00:23:36.380 --> 00:23:38.140
The Ruby one has different
options as well.

00:23:38.140 --> 00:23:41.920
So they all handle this pretty
much as you would expect in

00:23:41.920 --> 00:23:43.200
the specific language.

00:23:43.200 --> 00:23:45.780
And they all have documentation
so that you can

00:23:45.780 --> 00:23:50.030
take a look at how to take
advantage of these features.

00:23:50.030 --> 00:23:51.770
NICOLAS GARNIER: Now I'm just
going to show you how things

00:23:51.770 --> 00:23:54.380
work in details, looking at
the protocol using the

00:23:54.380 --> 00:23:54.820
Playground.

00:23:54.820 --> 00:23:58.528
So let me just share
my screen here.

00:23:58.528 --> 00:24:00.456
All right, everybody sees
the Playground?

00:24:00.456 --> 00:24:00.954
Yeah?

00:24:00.954 --> 00:24:02.950
I guess so.

00:24:02.950 --> 00:24:05.240
So this is the OAuth2
Playground.

00:24:05.240 --> 00:24:06.820
You can access it going
to developers@googl

00:24:06.820 --> 00:24:10.360
e.com/oauthplaygrounds.

00:24:10.360 --> 00:24:15.360
And as Ali mentions, it allows
you to use some of our APIs

00:24:15.360 --> 00:24:18.010
with OAuth2 and experiment
and see how the

00:24:18.010 --> 00:24:19.610
protocol exactly works.

00:24:19.610 --> 00:24:24.520
So, for instance, I'm going to
use the Google Contacts API.

00:24:24.520 --> 00:24:27.100
That's going to be the first
example I'm going to show you.

00:24:27.100 --> 00:24:30.630
So the tool is actually
pretty configurable.

00:24:30.630 --> 00:24:33.580
You can use the server-side
or client-side flow here.

00:24:33.580 --> 00:24:36.910
You can even use it with
other APIs at Google.

00:24:36.910 --> 00:24:38.410
Just go to Custom,
and you have to

00:24:38.410 --> 00:24:41.870
specify a bunch of things.

00:24:41.870 --> 00:24:46.200
But there is a bunch of APIs
that also work with OAuth2

00:24:46.200 --> 00:24:48.730
that are compatible
with it, too.

00:24:48.730 --> 00:24:51.730
So I invite you to try it out.

00:24:51.730 --> 00:24:52.650
So let's go.

00:24:52.650 --> 00:24:54.910
So Contacts here.

00:24:54.910 --> 00:24:58.170
The first step is to actually
redirect the user

00:24:58.170 --> 00:24:59.070
to the Grant screen.

00:24:59.070 --> 00:25:04.060
So you do that on the tool
clicking on Authorize APIs.

00:25:04.060 --> 00:25:09.520
And as I'm already signed in,
I'm directly prompted that the

00:25:09.520 --> 00:25:11.420
tool wants to access
my Contacts data.

00:25:11.420 --> 00:25:14.620
So I'm going to allow
it access.

00:25:14.620 --> 00:25:16.450
On the right side of the
tool here, we show

00:25:16.450 --> 00:25:17.510
exactly what happened.

00:25:17.510 --> 00:25:21.570
So the step that we've seen here
is redirecting the user

00:25:21.570 --> 00:25:22.390
to the Grant screen.

00:25:22.390 --> 00:25:25.440
And that's done by simply
redirecting it to this URL

00:25:25.440 --> 00:25:27.400
that you need to construct.

00:25:27.400 --> 00:25:29.430
And you can see a bunch of
the parameters here.

00:25:29.430 --> 00:25:32.460
Access IP equal offline We've
talked about that.

00:25:32.460 --> 00:25:39.120
The scope here, the scope is the
Google Contacts scope we

00:25:39.120 --> 00:25:39.810
can see later on.

00:25:39.810 --> 00:25:44.910
I'll add a few more APIs to see
when you add more scopes

00:25:44.910 --> 00:25:46.100
what it does.

00:25:46.100 --> 00:25:47.430
Approval prompt equals force.

00:25:47.430 --> 00:25:52.650
That's a URL parameter that
what it does is that the

00:25:52.650 --> 00:25:56.520
prompt that the users have seen
is always going to swap.

00:25:56.520 --> 00:26:00.140
You can also remove that
URL parameter.

00:26:00.140 --> 00:26:02.150
And the prompt is actually
only going to show up the

00:26:02.150 --> 00:26:05.180
first time the user
approves the URL.

00:26:05.180 --> 00:26:08.630
I'm going to remove it in a
second so you can see that the

00:26:08.630 --> 00:26:11.350
second time I want to authorize
the API, I'll get

00:26:11.350 --> 00:26:12.310
redirected automatically.

00:26:12.310 --> 00:26:16.130
The user will not be prompted
to authorize.

00:26:16.130 --> 00:26:18.430
So as you can see here,
we've been redirected

00:26:18.430 --> 00:26:19.300
and passed a code.

00:26:19.300 --> 00:26:22.440
The code is the first step
of the server side flow.

00:26:22.440 --> 00:26:26.160
You have it, and you need to
exchange it against an access

00:26:26.160 --> 00:26:27.540
token and a refresh token.

00:26:27.540 --> 00:26:32.510
So you can see the tool
copy/pasted here automatically

00:26:32.510 --> 00:26:33.950
in the input here.

00:26:33.950 --> 00:26:35.150
It's pretty nice.

00:26:35.150 --> 00:26:37.280
And how you initiate the
exchange, you simply click

00:26:37.280 --> 00:26:39.250
that button.

00:26:39.250 --> 00:26:40.936
And as you can see, we've
got a refresh token

00:26:40.936 --> 00:26:42.290
and an access token.

00:26:42.290 --> 00:26:45.190
So let's go back and see how
that worked exactly.

00:26:45.190 --> 00:26:48.930
So to exchange the code for a
refresh token and an access

00:26:48.930 --> 00:26:52.380
token, what you do is you send
an HTTP request, a post-HTTP

00:26:52.380 --> 00:26:54.135
request to basically
https.accounts.g

00:26:54.135 --> 00:27:00.100
oogle.com/O/OAuth2/token.

00:27:00.100 --> 00:27:04.760
If you're fluent in the HTML
protocol, that's the request

00:27:04.760 --> 00:27:08.222
on top, and below is the
response we got from the API.

00:27:08.222 --> 00:27:11.360
But basically, you construct
the URL using the post

00:27:11.360 --> 00:27:13.960
and the host here.

00:27:13.960 --> 00:27:16.080
And what we've done is
we've passed inside

00:27:16.080 --> 00:27:17.720
the body of the request.

00:27:17.720 --> 00:27:21.590
We've passed the code, the
redirect URI which we've used

00:27:21.590 --> 00:27:26.610
in the first step, our client ID
that we've gotten the APIs

00:27:26.610 --> 00:27:29.720
console that Sergio has shown
you earlier, and the client

00:27:29.720 --> 00:27:30.640
secret as well here.

00:27:30.640 --> 00:27:33.250
It's hidden because it's the
OAuth2s Playground ones, and

00:27:33.250 --> 00:27:34.750
we don't want to really
disclose it.

00:27:34.750 --> 00:27:37.600
But it would be your own client
ID and your own client

00:27:37.600 --> 00:27:43.780
secret when you use OAuth2 and
grant type authorization code

00:27:43.780 --> 00:27:45.690
because we're passing an
authorization code, and we

00:27:45.690 --> 00:27:48.730
want an access token and
a refresh token.

00:27:48.730 --> 00:27:52.080
The response is a 200 OK
response that contains a

00:27:52.080 --> 00:27:55.760
little JavaScript object here--
sorry, JSON object

00:27:55.760 --> 00:27:58.180
which, as you can see, contains
a refresh token and

00:27:58.180 --> 00:27:59.640
an access token.

00:27:59.640 --> 00:28:05.500
And also, expires is the time
to leave in seconds for the

00:28:05.500 --> 00:28:05.960
access token.

00:28:05.960 --> 00:28:09.210
So the access token will
not be valid in

00:28:09.210 --> 00:28:10.570
basically one hour.

00:28:10.570 --> 00:28:13.150
And as you can see here, we
have a little countdown to

00:28:13.150 --> 00:28:16.460
show you when exactly
that finishes.

00:28:16.460 --> 00:28:19.760
You can refresh the access token
using the refresh token.

00:28:19.760 --> 00:28:21.370
You can click the button.

00:28:21.370 --> 00:28:24.500
The tool will show you how
to refresh access tokens.

00:28:24.500 --> 00:28:28.990
So again, it's a very similar
request where you press the

00:28:28.990 --> 00:28:34.060
client secrets, and the client
ID, and the refresh token.

00:28:34.060 --> 00:28:36.030
And the grant type is
not code this time.

00:28:36.030 --> 00:28:37.470
It's refresh token.

00:28:37.470 --> 00:28:40.540
And the tool gives you back a
new access token that's valid

00:28:40.540 --> 00:28:42.170
in another one hour.

00:28:42.170 --> 00:28:45.180
So when your first access token
is expired, you just get

00:28:45.180 --> 00:28:47.420
new ones like this.

00:28:47.420 --> 00:28:50.320
Now, let's go to the third step
of how to use OAuth2.

00:28:50.320 --> 00:28:54.880
It's basically when we use the
token to access the API.

00:28:54.880 --> 00:28:59.980
And there are a few methods
to basically

00:28:59.980 --> 00:29:01.550
authorize your requests.

00:29:01.550 --> 00:29:05.280
So Google APIs, they are
mostly REST based.

00:29:05.280 --> 00:29:11.790
So we sent a GET request to a
URL endpoint to basically list

00:29:11.790 --> 00:29:14.380
the contacts if it's a contacts
API, or get contacts,

00:29:14.380 --> 00:29:19.840
or post requests if you want to
insert new contacts or put

00:29:19.840 --> 00:29:21.810
if you want to modify one.

00:29:21.810 --> 00:29:24.190
What I'm going to show you is
we have a little something

00:29:24.190 --> 00:29:24.810
really convenient.

00:29:24.810 --> 00:29:29.050
It's a tool where I'm going to
show you all of the endpoints

00:29:29.050 --> 00:29:30.580
of the API for you.

00:29:30.580 --> 00:29:31.780
You don't have to go through
the Docs and

00:29:31.780 --> 00:29:33.570
find the correct URL.

00:29:33.570 --> 00:29:36.725
And if you want to list all the
contacts a user has, you

00:29:36.725 --> 00:29:39.520
need to send a GET request
to that URL here.

00:29:39.520 --> 00:29:42.020
I hope you see it, and the
screen isn't too small.

00:29:42.020 --> 00:29:44.860
And you need a special mandatory
HTTP header,

00:29:44.860 --> 00:29:48.220
gd.version, just reading the
version of the API, because we

00:29:48.220 --> 00:29:50.270
have previous versions that
work a little differently.

00:29:50.270 --> 00:29:54.220
And that just tells you during
the request which version you

00:29:54.220 --> 00:29:54.860
want to use.

00:29:54.860 --> 00:29:57.720
Here we want to use the latest,
which is Version 3.

00:29:57.720 --> 00:29:58.840
So I'm just going
to click on it.

00:29:58.840 --> 00:30:01.520
It's going to set
up my request.

00:30:01.520 --> 00:30:03.730
So we want to sent a GET
request to that URL.

00:30:03.730 --> 00:30:09.460
So when we click Send Request
here, boom, we've sent a GET

00:30:09.460 --> 00:30:12.940
to the URL we've described
on the left.

00:30:12.940 --> 00:30:16.370
We have the extra header
here, gd.version.

00:30:16.370 --> 00:30:18.270
And the important part
is that's how you

00:30:18.270 --> 00:30:21.130
authorize to our APIs.

00:30:21.130 --> 00:30:23.730
You pass an authorization
header.

00:30:23.730 --> 00:30:28.980
Then there's a few ways
to actually write that

00:30:28.980 --> 00:30:30.030
authorization header.

00:30:30.030 --> 00:30:33.260
Here we've used authorization
column OAuth.

00:30:33.260 --> 00:30:35.460
That's from the other
protocol.

00:30:35.460 --> 00:30:39.270
The OAuth2 protocol was
for a long time being

00:30:39.270 --> 00:30:41.750
written, being discussed.

00:30:41.750 --> 00:30:45.600
And in the earlier version of
the protocol, we used OAuth as

00:30:45.600 --> 00:30:47.840
a prefix here, and then you
passed the access token.

00:30:47.840 --> 00:30:51.240
In the newer version, you use
Bearer, so the tool actually

00:30:51.240 --> 00:30:52.710
supports all that.

00:30:52.710 --> 00:30:56.540
You can go and change from OAuth
prefix to Bearer prefix.

00:30:56.540 --> 00:30:59.810
Just to show you that it works
exactly the same here, that's

00:30:59.810 --> 00:31:01.880
the new authorization
header with Bearer.

00:31:01.880 --> 00:31:04.730
And there's a third way to
authorize this to use a URL

00:31:04.730 --> 00:31:08.210
parameter instead, which is
actually quite convenience, is

00:31:08.210 --> 00:31:10.250
to use the access token
URL parameter.

00:31:10.250 --> 00:31:14.850
And here if you want to
authorize, boom, you added--

00:31:14.850 --> 00:31:16.450
here, we've simply added
the access token.

00:31:16.450 --> 00:31:20.650
Instead of setting it in a
header, in an HTTP header,

00:31:20.650 --> 00:31:24.060
we've simply appended it to the
URL with the question mark

00:31:24.060 --> 00:31:26.570
access token equal and
the access token.

00:31:26.570 --> 00:31:29.540
That's exactly the access token
that we've got in back

00:31:29.540 --> 00:31:32.200
from the second step here.

00:31:32.200 --> 00:31:35.270
And you can see below it's quite
hard to read because

00:31:35.270 --> 00:31:37.583
it's XML data back
from the API.

00:31:37.583 --> 00:31:42.030
But we've got all my contacts
that are available in my

00:31:42.030 --> 00:31:43.300
Google Contacts list.

00:31:43.300 --> 00:31:48.640
So that was a little showcase
of the server side OAuth2

00:31:48.640 --> 00:31:52.030
flow, which contains basically
three steps--

00:31:52.030 --> 00:31:54.360
redirecting the user to
the Authorize page.

00:31:54.360 --> 00:31:57.580
The second step is exchanging
the code for a token.

00:31:57.580 --> 00:32:00.290
And then the third step is
simply use the API using the

00:32:00.290 --> 00:32:02.160
access token.

00:32:02.160 --> 00:32:06.870
Now I'm going to show you how
to use the tool with the

00:32:06.870 --> 00:32:10.410
client-side flow and how the
client-side flow works.

00:32:10.410 --> 00:32:12.720
So I simply click here.

00:32:12.720 --> 00:32:16.390
You see there's one less step,
only step one and step two.

00:32:16.390 --> 00:32:20.510
And if I want to authorize
contacts again,

00:32:20.510 --> 00:32:22.100
then I click Authorize.

00:32:22.100 --> 00:32:24.850
It's going to be the same exact
page except you cannot

00:32:24.850 --> 00:32:26.260
request for offline access.

00:32:26.260 --> 00:32:30.030
So there is not the little
message that tells you that

00:32:30.030 --> 00:32:34.410
the tool or that the application
is going to access

00:32:34.410 --> 00:32:37.030
your contacts in the background
for a long time.

00:32:37.030 --> 00:32:39.650
So you don't get that message
because the client-side flow

00:32:39.650 --> 00:32:40.920
doesn't give you a
refresh token.

00:32:40.920 --> 00:32:44.040
So you don't really
have offline

00:32:44.040 --> 00:32:45.290
back end server access.

00:32:47.680 --> 00:32:49.480
And we've got everything
back to the tools.

00:32:49.480 --> 00:32:52.570
So as you can see here--
let me go back.

00:32:52.570 --> 00:32:55.290
We've got in the URL in the hash
fragments directing the

00:32:55.290 --> 00:32:56.440
access token.

00:32:56.440 --> 00:33:00.100
So that's why there's a one
less step, basically.

00:33:00.100 --> 00:33:01.830
You've already got
direct access.

00:33:01.830 --> 00:33:04.280
There's no need to exchange your
code for an access or a

00:33:04.280 --> 00:33:05.290
refresh token.

00:33:05.290 --> 00:33:05.970
It's very simple.

00:33:05.970 --> 00:33:08.500
You get the access token, and
you can use it directly to

00:33:08.500 --> 00:33:10.190
send your request, for example,
to the Google

00:33:10.190 --> 00:33:12.050
Contacts API.

00:33:12.050 --> 00:33:13.960
One less step, very,
very simple.

00:33:13.960 --> 00:33:16.810
The only main difference
that you will not get--

00:33:16.810 --> 00:33:17.890
refresh token--

00:33:17.890 --> 00:33:22.000
which allows you to get
unlimited access in a limited

00:33:22.000 --> 00:33:24.400
period of time.

00:33:24.400 --> 00:33:28.260
So, actually, if you need to
access the API for more than

00:33:28.260 --> 00:33:31.960
one hour, there's some
techniques that you can use on

00:33:31.960 --> 00:33:35.610
your web page if you're on a
JavaScript-enabled web page

00:33:35.610 --> 00:33:41.500
and you're using this flow
to get an access token.

00:33:41.500 --> 00:33:45.290
Some of the common techniques
are to use like a hidden

00:33:45.290 --> 00:33:48.720
iFrame to trigger a flow inside
and get a new access

00:33:48.720 --> 00:33:52.420
token, or trigger a pop-up
instead of redirecting the

00:33:52.420 --> 00:33:56.520
user back and forth to your
websites, trigger a pop-up

00:33:56.520 --> 00:34:00.820
that if the user has already
granted you access, it should

00:34:00.820 --> 00:34:03.050
directly give you a access
token that's again

00:34:03.050 --> 00:34:04.050
valid for one hour.

00:34:04.050 --> 00:34:06.560
Of course, you can only use that
while the user is on your

00:34:06.560 --> 00:34:08.969
web page, which is the main
difference between the

00:34:08.969 --> 00:34:11.549
client-side flow and the
service-side flow, basically.

00:34:14.070 --> 00:34:15.830
Guys, is there anything
else you'd like me to

00:34:15.830 --> 00:34:19.090
demo or talk about?

00:34:19.090 --> 00:34:20.940
ALI AFSHAR: Is there any way we
can have question, people

00:34:20.940 --> 00:34:23.090
could ask questions
People have been

00:34:23.090 --> 00:34:25.350
sitting patiently waiting.

00:34:25.350 --> 00:34:27.750
Thank you all for listening.

00:34:27.750 --> 00:34:31.719
Do any of you have anything
you'd like to ask?

00:34:31.719 --> 00:34:33.679
If not, I can think
of some questions.

00:34:33.679 --> 00:34:35.480
NICOLAS GARNIER: We can actually
demo the Playground

00:34:35.480 --> 00:34:37.540
with Google Drive.

00:34:37.540 --> 00:34:41.400
This GDL was supposed
to be a bit of a

00:34:41.400 --> 00:34:43.210
Google Drive and AdSense.

00:34:43.210 --> 00:34:44.800
I'm going to show you
a little bit how it

00:34:44.800 --> 00:34:46.069
works with Google Drive.

00:34:46.069 --> 00:34:49.449
We're going to go back to the
server-side flow here.

00:34:49.449 --> 00:34:56.019
So Google Drive is this online
or in the cloud hardware that

00:34:56.019 --> 00:34:58.260
we launched a couple
months ago.

00:34:58.260 --> 00:35:00.910
It has a really cool API, a
really cool SDK, actually.

00:35:00.910 --> 00:35:02.440
You can Do a lot.

00:35:02.440 --> 00:35:04.690
The really, really basic way to
use Google Drive is to use

00:35:04.690 --> 00:35:06.800
the API here with this scope.

00:35:06.800 --> 00:35:08.270
This scope is--

00:35:08.270 --> 00:35:09.520
I'm going to highlight
it here.

00:35:09.520 --> 00:35:12.040
When the API comes, it
shows [INAUDIBLE].

00:35:12.040 --> 00:35:14.230
I'm simply going to show you
how it works with the

00:35:14.230 --> 00:35:15.840
Playground.

00:35:15.840 --> 00:35:16.880
You request access.

00:35:16.880 --> 00:35:18.460
You get the prompt.

00:35:18.460 --> 00:35:21.270
Again, you get an authorization
code, which I'm

00:35:21.270 --> 00:35:22.320
going to exchange.

00:35:22.320 --> 00:35:27.280
Below is the older refresh and
access token from before.

00:35:27.280 --> 00:35:30.210
I'm going to exchange that
authorization code for a new

00:35:30.210 --> 00:35:32.930
refresh and access token,
which I've gotten.

00:35:32.930 --> 00:35:36.610
And now if I want to use the
API here, I have a bunch of

00:35:36.610 --> 00:35:39.500
endpoints, lots of things
you can do with the API.

00:35:39.500 --> 00:35:43.990
The most common one would
probably be to list files.

00:35:43.990 --> 00:35:48.210
I just have to find
it somewhere.

00:35:48.210 --> 00:35:48.920
List parents?

00:35:48.920 --> 00:35:50.860
No, list files here.

00:35:50.860 --> 00:35:54.170
So if you want to list all the
files that you have in your

00:35:54.170 --> 00:35:58.210
drive, you're simply going to
send a GET request to that

00:35:58.210 --> 00:35:59.350
request URI.

00:35:59.350 --> 00:36:01.610
Here, I'm going to remove
the gd.editor.

00:36:04.240 --> 00:36:07.670
Let's try it out.

00:36:07.670 --> 00:36:08.710
It could be quite big.

00:36:08.710 --> 00:36:10.960
So here, I have a bunch
of files in my drive.

00:36:10.960 --> 00:36:14.680
That's my drive, here as you
can see, a bunch of images

00:36:14.680 --> 00:36:16.910
everything.

00:36:16.910 --> 00:36:18.660
Let me go back to
the Playground.

00:36:18.660 --> 00:36:23.240
And as you can see here, for
example, so the newer--

00:36:23.240 --> 00:36:26.170
our older APIs in Google
used to be XML based.

00:36:26.170 --> 00:36:29.550
And our newer account of APIs
or now all the new APIs are

00:36:29.550 --> 00:36:33.960
mostly JSON-based, which is
when you're getting here a

00:36:33.960 --> 00:36:36.990
JSON response.

00:36:36.990 --> 00:36:40.530
So you can see in the items
you have all my files.

00:36:40.530 --> 00:36:44.400
For example, this is my
first file title.

00:36:44.400 --> 00:36:48.610
That's my accounting
spreadsheet, which has a

00:36:48.610 --> 00:36:50.960
special [INAUDIBLE] because
it's a Google spreadsheet.

00:36:50.960 --> 00:36:52.130
You can see if it's starred.

00:36:52.130 --> 00:36:53.210
Yes, it's starred.

00:36:53.210 --> 00:36:55.400
[INAUDIBLE], et cetera.

00:36:55.400 --> 00:36:58.655
And then you can use the API
to, for example, insert new

00:36:58.655 --> 00:37:02.560
files to Google Drive or modify
your files, modify file

00:37:02.560 --> 00:37:03.870
sharing, et cetera.

00:37:03.870 --> 00:37:08.010
There's also a really cool
feature of the Google Drive

00:37:08.010 --> 00:37:11.300
SDK, is that you can have your
applications integrate

00:37:11.300 --> 00:37:13.490
directly inside Google Drive.

00:37:13.490 --> 00:37:17.010
So, for example, here if you
look at the PNG here, that's

00:37:17.010 --> 00:37:19.350
an image file, a driver.

00:37:19.350 --> 00:37:21.920
You can open it with-- it will
now let you open it with

00:37:21.920 --> 00:37:23.710
third-party applications.

00:37:23.710 --> 00:37:25.990
And actually, the OAuth2
Playground is one of these

00:37:25.990 --> 00:37:26.570
applications.

00:37:26.570 --> 00:37:29.240
So if you want to have the
OAuth2 Playground listed here

00:37:29.240 --> 00:37:33.370
to open your files in Google
Drive, you can simply go to

00:37:33.370 --> 00:37:36.960
the Chrome Web Store to the
Google Drive Apps collection,

00:37:36.960 --> 00:37:38.890
which is here on left,
Google Drive.

00:37:38.890 --> 00:37:42.750
And you'll find that's all the
apps that are Google Drive

00:37:42.750 --> 00:37:45.170
enabled that you can install on
your drive, which have the

00:37:45.170 --> 00:37:47.030
right-click open-with
functionality.

00:37:47.030 --> 00:37:49.490
The OAuth2 Playground is one
of them, and you simply

00:37:49.490 --> 00:37:50.170
install it.

00:37:50.170 --> 00:37:54.260
And then you'll be able to do
this, which is right-click,

00:37:54.260 --> 00:37:57.770
open with the OAuth2 Playground
on any files.

00:37:57.770 --> 00:38:01.680
We go through it, and that
describes how it works if

00:38:01.680 --> 00:38:03.430
you're developing Google
Drive apps.

00:38:03.430 --> 00:38:06.340
So if you're developing Google
Drive apps and the user clicks

00:38:06.340 --> 00:38:09.700
on the file inside Google Drive,
it will redirect him to

00:38:09.700 --> 00:38:12.950
your website with special
URL parameters

00:38:12.950 --> 00:38:14.210
that you can see here.

00:38:14.210 --> 00:38:18.765
It will give you a code right
away, a code that's the OAuth2

00:38:18.765 --> 00:38:20.970
protocol that needs two
central tokens.

00:38:20.970 --> 00:38:27.780
But we also give you here a JSON
object in the state URL

00:38:27.780 --> 00:38:31.900
parameter, which contains the
ID of the file that the user

00:38:31.900 --> 00:38:33.940
just opened and the action
that happened.

00:38:33.940 --> 00:38:35.340
The user opened the file.

00:38:35.340 --> 00:38:36.490
Here is the ID.

00:38:36.490 --> 00:38:40.910
And you now have access using
the authorization code.

00:38:40.910 --> 00:38:44.080
So here, if I exchange the code,
I'm getting a refresh

00:38:44.080 --> 00:38:45.980
token and an access token.

00:38:45.980 --> 00:38:47.280
And here are the tools.

00:38:47.280 --> 00:38:47.660
It's nice.

00:38:47.660 --> 00:38:51.480
It gives you right away the
URL to the file to get the

00:38:51.480 --> 00:38:53.120
details of the file.

00:38:53.120 --> 00:38:54.430
So here is how Drive works.

00:38:54.430 --> 00:38:56.970
You get the details
of the file.

00:38:56.970 --> 00:38:58.490
Here it's drivegoogle.png.

00:38:58.490 --> 00:39:00.050
It's a PNG image.

00:39:00.050 --> 00:39:01.110
It is not stored or anything.

00:39:01.110 --> 00:39:03.390
You have all the created
and modified dates.

00:39:03.390 --> 00:39:05.440
So that's the metadata
of the files.

00:39:05.440 --> 00:39:07.700
And if you want to download the
actual content, here you

00:39:07.700 --> 00:39:11.310
have a download URL, which you
can request, sending an

00:39:11.310 --> 00:39:14.950
authorized request with OAuth2
actually as well, and you get

00:39:14.950 --> 00:39:15.920
the actual content.

00:39:15.920 --> 00:39:20.380
So here, if I do an authorized
request to that URL, you see

00:39:20.380 --> 00:39:22.698
I'm getting PNG binary data.

00:39:22.698 --> 00:39:26.970
That's my file here, actually.

00:39:26.970 --> 00:39:29.270
SERGIO GOMES: So just before we
run out of time, I'd just

00:39:29.270 --> 00:39:35.130
like to do a quick AdSense
demo as well with another

00:39:35.130 --> 00:39:38.190
tool, which will be very useful
to you no matter what

00:39:38.190 --> 00:39:40.790
API you're developing
in, which is

00:39:40.790 --> 00:39:43.220
the Google APIs Explorer.

00:39:43.220 --> 00:39:46.170
And I've got it opened up here
to show you the methods in the

00:39:46.170 --> 00:39:49.320
AdSense Management API.

00:39:49.320 --> 00:39:52.260
Now, you can get a list.

00:39:52.260 --> 00:39:54.840
This uses the same data that
is used to generate our

00:39:54.840 --> 00:39:56.500
documentation, by the way.

00:39:56.500 --> 00:39:57.850
NICOLAS GARNIER: And
just a quick note.

00:39:57.850 --> 00:39:58.950
SERGIO GOMES: Yep.

00:39:58.950 --> 00:40:00.410
NICOLAS GARNIER: I wanted to
state the main difference

00:40:00.410 --> 00:40:04.200
between the APIs Explorer and
the OAuth2 Playground.

00:40:04.200 --> 00:40:07.640
So the OAuth Playground really
explains to you how the

00:40:07.640 --> 00:40:09.950
protocol works step by step,
and then you can use it to

00:40:09.950 --> 00:40:12.550
access APIs, Google APIs.

00:40:12.550 --> 00:40:17.320
The APIs for here, it's going
to hide the OAuth2 protocol

00:40:17.320 --> 00:40:18.970
that happens, all the
OAuth2 stuff.

00:40:18.970 --> 00:40:23.750
And it just lets you play
around with the APIs.

00:40:23.750 --> 00:40:24.570
SERGIO GOMES: Exactly.

00:40:24.570 --> 00:40:27.420
And it's going to be very useful
for you to figure out

00:40:27.420 --> 00:40:28.270
how to make a request.

00:40:28.270 --> 00:40:31.260
So in this case, for example, I
first just want to list all

00:40:31.260 --> 00:40:33.420
of the ad clients in
my AdSense account.

00:40:33.420 --> 00:40:35.150
So I find the method here.

00:40:35.150 --> 00:40:35.760
I click it.

00:40:35.760 --> 00:40:37.500
And you see that it
automatically gives you a

00:40:37.500 --> 00:40:39.410
little form with all
of the parameters

00:40:39.410 --> 00:40:41.130
that the method expects.

00:40:41.130 --> 00:40:43.290
Now, since this is an authorized
request, you're

00:40:43.290 --> 00:40:46.220
going to have go through the
OAuth flow as well here.

00:40:46.220 --> 00:40:47.840
And the tool has this
convenient little

00:40:47.840 --> 00:40:48.570
thing set up here.

00:40:48.570 --> 00:40:51.340
You can choose which scopes
you want to get access to.

00:40:51.340 --> 00:40:54.500
Since I only want to read data,
I'm just going to choose

00:40:54.500 --> 00:40:58.080
the AdSense read-only scope,
and I authorize it.

00:40:58.080 --> 00:41:00.612
It gives me a pop-up, which you
probably didn't see due to

00:41:00.612 --> 00:41:03.720
the way that that screensharing
works in this.

00:41:03.720 --> 00:41:05.850
But now I should be able
to make my request.

00:41:05.850 --> 00:41:09.310
And if I click the Execute
button here, sure enough, I

00:41:09.310 --> 00:41:12.600
get all of the ad
clients listed.

00:41:12.600 --> 00:41:16.390
And the same thing works for
other methods like the most

00:41:16.390 --> 00:41:19.680
important and most used method
in the Management API, the

00:41:19.680 --> 00:41:22.850
method which allows you
to generate reports.

00:41:22.850 --> 00:41:25.120
As you can see here, it shows
you all the different fields

00:41:25.120 --> 00:41:27.790
that you can fill in, all of the
mandatory ones, which are

00:41:27.790 --> 00:41:31.640
highlighted in red, and all
of the optional ones.

00:41:31.640 --> 00:41:34.110
And you can just fill these
in, click Execute, and see

00:41:34.110 --> 00:41:34.700
what happens.

00:41:34.700 --> 00:41:36.370
If I click here, it just
tells me these

00:41:36.370 --> 00:41:39.520
parameters are required.

00:41:39.520 --> 00:41:42.420
But if I were to fill them in
with the date, let's say

00:41:42.420 --> 00:41:53.720
2001-01-01 and 2012-01-01, and
then just add a couple of

00:41:53.720 --> 00:41:57.580
dimensions and metrics, like for
example, reporting based

00:41:57.580 --> 00:42:03.040
on month, and just adding
another metric, which would

00:42:03.040 --> 00:42:07.210
be, for example, earnings, this
would allow me to get a

00:42:07.210 --> 00:42:10.150
report for all of my
AdSense earnings

00:42:10.150 --> 00:42:11.970
between those two dates.

00:42:11.970 --> 00:42:12.780
And here you go.

00:42:12.780 --> 00:42:20.400
You just get you a list of rows,
and they've all got the

00:42:20.400 --> 00:42:21.240
information you need.

00:42:21.240 --> 00:42:24.830
So you can just take this
JSON, put it into your

00:42:24.830 --> 00:42:31.075
application, and build some
graphs with it, or some other

00:42:31.075 --> 00:42:32.000
visualization.

00:42:32.000 --> 00:42:32.310
NICOLAS GARNIER: Nice.

00:42:32.310 --> 00:42:34.670
So Ali needed to go.

00:42:34.670 --> 00:42:38.140
And we have a question from
Gary Frederick here on the

00:42:38.140 --> 00:42:40.170
chat, on the group
chat on the left.

00:42:40.170 --> 00:42:43.640
He wanted to know how you can
use OAuth2 on Android.

00:42:43.640 --> 00:42:46.630
So actually OAuth2 on
Android, there's two

00:42:46.630 --> 00:42:48.410
main ways to use it.

00:42:48.410 --> 00:42:51.980
One of the ways would
be to actually use--

00:42:51.980 --> 00:42:54.950
and that's what people are doing
in iOS, mostly, is to

00:42:54.950 --> 00:42:56.100
use an embedded web view.

00:42:56.100 --> 00:42:59.660
So you basically de-app your app
if it's a native Android

00:42:59.660 --> 00:43:03.580
app or a native iOS app to
trigger a web view and start

00:43:03.580 --> 00:43:06.430
the OAuth2 flow inside
web view.

00:43:06.430 --> 00:43:08.735
And you would get
the code back.

00:43:08.735 --> 00:43:11.950
So we're going to use the
server-side flow for this.

00:43:11.950 --> 00:43:15.740
You're going to read the code
from the URL once the user has

00:43:15.740 --> 00:43:17.330
approved your flow.

00:43:17.330 --> 00:43:22.100
And then use the code inside
your app to do the exchange of

00:43:22.100 --> 00:43:24.550
the code for tokens,
et cetera.

00:43:24.550 --> 00:43:26.705
And then once you have the
access token, the refresh

00:43:26.705 --> 00:43:30.610
token, you save that, and you
can use it in the background

00:43:30.610 --> 00:43:33.190
to access the APIs.

00:43:33.190 --> 00:43:36.290
In Android, there's another
way to do that, only in

00:43:36.290 --> 00:43:39.750
Android, not in iOS, which is
the preferred way, actually,

00:43:39.750 --> 00:43:43.590
which is what the Android
team wants us to do.

00:43:43.590 --> 00:43:46.490
And so it's to use the
account manager.

00:43:46.490 --> 00:43:47.640
So I don't have--

00:43:47.640 --> 00:43:49.280
I can't show you the
code right now.

00:43:49.280 --> 00:43:51.390
It's actually a bit long.

00:43:51.390 --> 00:43:52.470
But it's available.

00:43:52.470 --> 00:43:58.950
And you can find samples
of that in--

00:43:58.950 --> 00:44:01.390
I think the Tasks API documents
should have that, or

00:44:01.390 --> 00:44:03.020
we can also find it, of
course, in the Android

00:44:03.020 --> 00:44:04.982
documentation somewhere.

00:44:04.982 --> 00:44:08.790
No, so the account manager does
not have refresh tokens.

00:44:08.790 --> 00:44:12.740
What it does is it's going to
handle the refreshing for you.

00:44:12.740 --> 00:44:19.430
So what you do is you use the
account manager to request

00:44:19.430 --> 00:44:20.970
access to the user's data.

00:44:20.970 --> 00:44:25.960
And the account manager has
a special UI for approval.

00:44:25.960 --> 00:44:28.440
And what is good is that it
uses the accounts that are

00:44:28.440 --> 00:44:31.120
already signed it or already
set up in your device.

00:44:31.120 --> 00:44:33.350
So it's going to pop-up a nice
little window, a native

00:44:33.350 --> 00:44:37.360
window, asking, well, this
application wants to use kind

00:44:37.360 --> 00:44:39.025
of like all the authorizations
you have in Android.

00:44:39.025 --> 00:44:44.360
If you want to access the
internet or the calendar data,

00:44:44.360 --> 00:44:46.990
there's a way where you
can set it up to

00:44:46.990 --> 00:44:48.520
access OAuth2 APIs.

00:44:48.520 --> 00:44:55.020
So in the code, when you specify
the type of data that

00:44:55.020 --> 00:44:57.800
we want to access, you use, I
think, something like OAuth2

00:44:57.800 --> 00:45:00.170
column, and then
add the scopes.

00:45:00.170 --> 00:45:03.110
And then So the UI's going to
show you, OK, well, this

00:45:03.110 --> 00:45:06.800
application wants to access, for
example, the Contacts data

00:45:06.800 --> 00:45:10.290
and also the Google Drive
data, et cetera.

00:45:10.290 --> 00:45:14.110
And if the user approves, the
intent is actually going to

00:45:14.110 --> 00:45:16.170
provide you with an access
token directly.

00:45:16.170 --> 00:45:18.870
So it's not going to give
you a refresh token.

00:45:18.870 --> 00:45:21.650
It's always going to give
you access token.

00:45:21.650 --> 00:45:26.000
So what your app can do is go
through this flow again

00:45:26.000 --> 00:45:28.880
subsequent times when the access
token has expired.

00:45:28.880 --> 00:45:30.430
And the same thing here.

00:45:30.430 --> 00:45:32.810
The user is not going to be
prompted subsequent times.

00:45:32.810 --> 00:45:35.917
Since the user has already
approved, next time you

00:45:35.917 --> 00:45:38.490
request it, the intent is
already automatically going to

00:45:38.490 --> 00:45:40.110
give you the access token.

00:45:40.110 --> 00:45:43.500
So that's kind of how
the refresh is done.

00:45:43.500 --> 00:45:47.031
So to use the account manager,
set the OAuth2 scopes, and

00:45:47.031 --> 00:45:49.310
give it the OAuth2 scopes
you want to access.

00:45:49.310 --> 00:45:52.070
And then you'll have a nice
native flow that directly

00:45:52.070 --> 00:45:53.680
gives you the access tokens.

00:45:53.680 --> 00:45:56.440
SERGIO GOMES: I just want to
add something to that.

00:45:56.440 --> 00:45:59.360
If you're going to be doing
development in Android and

00:45:59.360 --> 00:46:03.450
accessing Google APIs, you
should definitely take a look

00:46:03.450 --> 00:46:09.380
at the Java client library for
Google APIs, because it

00:46:09.380 --> 00:46:11.990
handles a lot of this stuff for
you behind the scenes so

00:46:11.990 --> 00:46:15.890
you don't have to touch any
of this complicated stuff.

00:46:15.890 --> 00:46:20.950
And it had some very good sample
code on how you can do

00:46:20.950 --> 00:46:25.440
authorizations in Android.

00:46:25.440 --> 00:46:27.280
NICOLAS GARNIER: So Gary's
comment here-- "The Java

00:46:27.280 --> 00:46:30.770
client library was not
as clear." It's true.

00:46:30.770 --> 00:46:32.460
It's true.

00:46:32.460 --> 00:46:38.060
Because it's mostly targeted
as full web apps right now,

00:46:38.060 --> 00:46:41.560
though I think there is extra
packages, they have the Javas

00:46:41.560 --> 00:46:44.470
have a suffix like Android or
Android2 or that kind of

00:46:44.470 --> 00:46:49.060
stuff, which you can use, which
gives you a bunch of

00:46:49.060 --> 00:46:51.060
helpers to do this.

00:46:51.060 --> 00:46:52.630
But the best is to
find a sample.

00:46:52.630 --> 00:46:56.560
And I think there is a specific
Android sample in the

00:46:56.560 --> 00:46:59.580
Java client library samples.

00:46:59.580 --> 00:47:01.270
You need to specifically
look for it.

00:47:01.270 --> 00:47:02.790
If you look at the other
Java samples, of

00:47:02.790 --> 00:47:05.940
course, it's web apps.

00:47:05.940 --> 00:47:09.820
And you really need to
look at that sample.

00:47:09.820 --> 00:47:11.950
I actually built a sample
that was using the

00:47:11.950 --> 00:47:15.210
Tasks API using OAuth2.

00:47:15.210 --> 00:47:18.880
It was about a year ago, which
is slightly outdated.

00:47:18.880 --> 00:47:19.540
You can find it online.

00:47:19.540 --> 00:47:21.510
It's very easy.

00:47:21.510 --> 00:47:25.170
Type Tasks API, Android
sample, or something.

00:47:25.170 --> 00:47:28.810
But it's slightly outdated
because the Android SDK has

00:47:28.810 --> 00:47:30.870
evolved since then.

00:47:30.870 --> 00:47:32.500
SERGIO GOMES: I just want to
point out that they've

00:47:32.500 --> 00:47:34.760
actually been making a lot of
improvements to this in the

00:47:34.760 --> 00:47:35.810
Java client library.

00:47:35.810 --> 00:47:39.000
So I'm not sure how long ago it
was that you took a look at

00:47:39.000 --> 00:47:42.545
this, but it made some
recent improvements.

00:47:48.810 --> 00:47:51.110
NICOLAS GARNIER: Look
really inside--

00:47:51.110 --> 00:47:54.150
actually, try not to look too
much at my Google task sample,

00:47:54.150 --> 00:47:55.380
because it's really outdated.

00:47:55.380 --> 00:47:59.890
Really go inside the Google APIs
client library samples on

00:47:59.890 --> 00:48:03.290
Google project hosting, and
that's where you'll find

00:48:03.290 --> 00:48:06.930
usually up-to-date
samples for this.

00:48:06.930 --> 00:48:10.700
And then, yes, you'll have to
use the Google APIs client

00:48:10.700 --> 00:48:14.570
library for which you can
add a helper class.

00:48:14.570 --> 00:48:16.830
I think there must be one for
cloud storage since it's what

00:48:16.830 --> 00:48:18.080
server you want to use.

00:48:20.720 --> 00:48:27.380
And then use the Cloud Storage
specific binaries that we

00:48:27.380 --> 00:48:30.860
published with it, which should
give you easy access to

00:48:30.860 --> 00:48:33.800
all the Cloud Storage stuff.

00:48:33.800 --> 00:48:37.440
But I'm not super familiar
with Cloud Storage drive.

00:48:37.440 --> 00:48:39.730
I could help you better.

00:48:39.730 --> 00:48:43.400
I think that Cloud Storage,
however, is not going to use

00:48:43.400 --> 00:48:45.030
the user's credential.

00:48:45.030 --> 00:48:47.590
Cloud Storage is more for
users that work with

00:48:47.590 --> 00:48:48.130
credentials.

00:48:48.130 --> 00:48:50.576
So you have to use your own
credentials to access the

00:48:50.576 --> 00:48:53.733
Cloud Storage, which might be
a little bit different, a

00:48:53.733 --> 00:48:55.350
little bit tricky.

00:48:55.350 --> 00:48:57.400
SERGIO GOMES: Nicolas, I think
we're going to talk to the

00:48:57.400 --> 00:49:00.460
Android team and try to convince
them have an OAuth

00:49:00.460 --> 00:49:02.600
session of their own, because
it might help a lot

00:49:02.600 --> 00:49:03.670
of folks out there.

00:49:03.670 --> 00:49:07.040
NICOLAS GARNIER: And definitely,
because, yes.

00:49:07.040 --> 00:49:11.170
And Gary, because we're out of
time, so we have to leave the

00:49:11.170 --> 00:49:15.830
chat very soon, but feel free
to go on Stack Overflow.

00:49:15.830 --> 00:49:18.150
Post your questions.

00:49:18.150 --> 00:49:20.545
We're always go on Stack
Overflow a couple hours a day

00:49:20.545 --> 00:49:21.795
and try to answer questions.

00:49:24.920 --> 00:49:26.870
Ask your questions there.

00:49:26.870 --> 00:49:28.080
Use the correct tags.

00:49:28.080 --> 00:49:29.340
We'll find it.

00:49:29.340 --> 00:49:33.850
And we'll help you out from
there and give you specific

00:49:33.850 --> 00:49:39.190
information just for you,
for your use case.

00:49:39.190 --> 00:49:39.660
All right.

00:49:39.660 --> 00:49:40.020
Thanks, Heather.

00:49:40.020 --> 00:49:41.560
Thanks, Gary.

00:49:41.560 --> 00:49:44.430
SERGIO GOMES: We might have
time for one more question

00:49:44.430 --> 00:49:45.350
before we have to go.

00:49:45.350 --> 00:49:49.520
So if anyone has any questions
on the web server flows client

00:49:49.520 --> 00:49:53.610
side or server side, ask now.

00:49:53.610 --> 00:49:56.180
We give you 10 seconds.

00:49:56.180 --> 00:49:59.520
You can put in on the group chat
if you're too shy to talk

00:49:59.520 --> 00:50:00.770
up, to speak up.

00:50:09.230 --> 00:50:10.140
They're all muted.

00:50:10.140 --> 00:50:11.260
Maybe there is--

00:50:11.260 --> 00:50:12.890
that's because it's a
Hangout on there.

00:50:12.890 --> 00:50:13.515
SERGIO GOMES: Right, exactly.

00:50:13.515 --> 00:50:14.470
NICOLAS GARNIER: You
guys are not shy.

00:50:14.470 --> 00:50:15.760
SERGIO GOMES: You're just going
to have to use the chat

00:50:15.760 --> 00:50:16.970
if you have questions for us.

00:50:16.970 --> 00:50:19.260
Sorry about that.

00:50:19.260 --> 00:50:27.295
All right, if there is no
questions, guys, then we'll

00:50:27.295 --> 00:50:29.124
see what Gary is typing.

00:50:29.124 --> 00:50:30.110
SERGIO GOMES: Why is it--

00:50:30.110 --> 00:50:32.340
NICOLAS GARNIER: "What was so
hard?" Well, let me tell you.

00:50:32.340 --> 00:50:34.926
It's much easier than OAuth1.

00:50:34.926 --> 00:50:36.850
SERGIO GOMES: Oh, yeah,
that's for sure.

00:50:36.850 --> 00:50:38.780
If you had to deal with OAuth1,
you wouldn't be asking

00:50:38.780 --> 00:50:41.010
that question.

00:50:41.010 --> 00:50:41.780
NICOLAS GARNIER: But definitely

00:50:41.780 --> 00:50:43.040
use our client libraries.

00:50:43.040 --> 00:50:45.530
If you just understand the
flow, all the protocol is

00:50:45.530 --> 00:50:46.100
heading for you.

00:50:46.100 --> 00:50:52.980
You just have to know what the
authorization page is, what

00:50:52.980 --> 00:50:53.450
refresh is.

00:50:53.450 --> 00:50:55.870
Actually, refresh is
mostly hidden.

00:50:55.870 --> 00:50:58.620
So this makes it way,
way, way simpler.

00:50:58.620 --> 00:51:01.090
And look at the code sample.

00:51:01.090 --> 00:51:03.990
Usually, most of the stuff is
really, really hidden by our

00:51:03.990 --> 00:51:06.010
client libraries, the
protocol itself.

00:51:10.230 --> 00:51:11.280
Yes, definitely.

00:51:11.280 --> 00:51:14.930
So the thing is OAuth2,
it was really like--

00:51:14.930 --> 00:51:16.510
SERGIO GOMES: [INAUDIBLE]

00:51:16.510 --> 00:51:18.220
question of watching the
video, like they

00:51:18.220 --> 00:51:19.440
won't able to know.

00:51:19.440 --> 00:51:20.790
NICOLAS GARNIER: Oh, yeah, we
have to read the questions.

00:51:20.790 --> 00:51:21.230
You're right.

00:51:21.230 --> 00:51:21.960
You're right.

00:51:21.960 --> 00:51:25.010
OAuth2, some of the
documentation is still needing

00:51:25.010 --> 00:51:28.220
updating but getting
updated everyday.

00:51:28.220 --> 00:51:32.920
Yeah, so the OAuth2
spec was under--

00:51:32.920 --> 00:51:39.760
still in the draft and still a
draft, though I'd heard that

00:51:39.760 --> 00:51:41.100
the spec has just been frozen.

00:51:41.100 --> 00:51:44.830
So it's soon going to be like
a real spec, a final spec.

00:51:44.830 --> 00:51:47.540
And then we can spend more
time updating the doc,

00:51:47.540 --> 00:51:52.600
publishing nice stuff around
that, help with tools now that

00:51:52.600 --> 00:51:54.000
we know the spec won't change.

00:51:54.000 --> 00:51:57.090
Because right now, if you look
at other OAuth2 providers,

00:51:57.090 --> 00:52:03.360
like Facebook or that uses
OAuth2, it's actually quite

00:52:03.360 --> 00:52:06.230
different from the way Google
uses the OAuth2.

00:52:06.230 --> 00:52:08.480
It's simply that we haven't
implemented

00:52:08.480 --> 00:52:10.060
OAuth2 at the same time.

00:52:10.060 --> 00:52:14.230
Google is always updating it to
meet the latest standard.

00:52:14.230 --> 00:52:17.090
But Facebook is probably using
an older standard and updating

00:52:17.090 --> 00:52:18.620
it as well.

00:52:18.620 --> 00:52:21.510
And it's currently
a moving target.

00:52:21.510 --> 00:52:25.210
It has just been frozen.

00:52:25.210 --> 00:52:28.620
So it's finally going to
be a little nicer.

00:52:28.620 --> 00:52:32.460
Things hopefully are going to
start being cross compatible.

00:52:32.460 --> 00:52:33.710
We'll see.

00:52:36.390 --> 00:52:38.980
Can I ask another question from
Gary? "Can I have a token

00:52:38.980 --> 00:52:41.490
that works for Android
and Chrome Web Apps?

00:52:41.490 --> 00:52:43.390
Does that make sense?"

00:52:43.390 --> 00:52:46.330
Yes, so the token that you get
from Android, the access

00:52:46.330 --> 00:52:50.510
token, you use it on your Chrome
Web App, though you're

00:52:50.510 --> 00:52:53.030
not going to get a refresh
token from Android.

00:52:53.030 --> 00:52:55.506
So it's always going to be
access tokens, which are only

00:52:55.506 --> 00:52:58.280
valid one hour, which you could,
if you wanted, to have

00:52:58.280 --> 00:53:01.050
a protocol to send it from
your Android app, to your

00:53:01.050 --> 00:53:02.400
Chrome back end, to your
Chrome Web App

00:53:02.400 --> 00:53:04.870
back end if you wanted.

00:53:04.870 --> 00:53:08.800
Maybe it's better to do it the
other way, get a refresh token

00:53:08.800 --> 00:53:12.070
and an access token from your
Chrome Web App, and have some

00:53:12.070 --> 00:53:13.650
mutual pull back between
the two.

00:53:13.650 --> 00:53:16.580
So from Android, you get
tokens from you Chrome

00:53:16.580 --> 00:53:18.710
Web App back end.

00:53:18.710 --> 00:53:22.080
And, of course, you can use the
access tokens from Android

00:53:22.080 --> 00:53:24.740
or from Chrome from
the web app.

00:53:24.740 --> 00:53:26.510
They all work the same way.

00:53:26.510 --> 00:53:32.660
So you'll definitely be able to
do that if you find how to

00:53:32.660 --> 00:53:38.350
fix or work around the
trickiness around Android that

00:53:38.350 --> 00:53:41.950
doesn't give you a
refresh token.

00:53:41.950 --> 00:53:43.430
SERGIO GOMES: I just want to
point out that you can have as

00:53:43.430 --> 00:53:44.700
many projects as you want.

00:53:44.700 --> 00:53:48.010
So if these are two different
applications, you should

00:53:48.010 --> 00:53:51.390
probably get two different sets
of developer credentials

00:53:51.390 --> 00:53:54.290
for both of them and try to get
your users to authorize

00:53:54.290 --> 00:53:55.860
both of them.

00:53:55.860 --> 00:53:56.890
Yeah, right.

00:53:56.890 --> 00:53:58.780
OK, so I see you're on the chat,
and you're commenting

00:53:58.780 --> 00:54:00.960
that it's the same
application.

00:54:00.960 --> 00:54:02.210
[INTERPOSING VOICES]

00:54:04.400 --> 00:54:05.940
NICOLAS GARNIER: You probably
don't want the users to have

00:54:05.940 --> 00:54:06.775
to authorize twice.

00:54:06.775 --> 00:54:07.400
SERGIO GOMES: Right.

00:54:07.400 --> 00:54:08.800
NICOLAS GARNIER: You want the
user to think, oh, I'm already

00:54:08.800 --> 00:54:11.400
authorized on the web app, and
I don't want to authorize

00:54:11.400 --> 00:54:12.620
again on the Android app.

00:54:12.620 --> 00:54:13.590
That seems weird.

00:54:13.590 --> 00:54:14.890
I've already authorized.

00:54:14.890 --> 00:54:18.410
So probably the best way, if
you do it from Android the

00:54:18.410 --> 00:54:21.890
first time, is to go through
a web flow--

00:54:21.890 --> 00:54:25.755
sorry, an animated web view and
get the refresh token and

00:54:25.755 --> 00:54:28.995
the access token, and save it
in your common database, and

00:54:28.995 --> 00:54:31.250
use that common database
for both apps.

00:54:31.250 --> 00:54:33.090
And same thing if your
coming from the

00:54:33.090 --> 00:54:33.780
Chrome Web App, I guess.

00:54:33.780 --> 00:54:35.840
That's probably the
best way for you.

00:54:35.840 --> 00:54:37.910
It's little bit tricky to
do it from Android.

00:54:37.910 --> 00:54:41.780
And we don't have helpers to
really help you do OAuth2 from

00:54:41.780 --> 00:54:44.640
a web view, though, because we
are trying to push more for

00:54:44.640 --> 00:54:47.320
the account manager
in this case.

00:54:47.320 --> 00:54:48.160
SERGIO GOMES: Right.

00:54:48.160 --> 00:54:51.890
But then he'll have to also go
through the web app every time

00:54:51.890 --> 00:54:54.760
that he needs to generate
a new access token.

00:54:54.760 --> 00:54:57.270
So it needs to be the web app
generating your access token

00:54:57.270 --> 00:54:59.110
from the refresh token.

00:54:59.110 --> 00:55:02.260
NICOLAS GARNIER: Or you could
have the refresh token saved

00:55:02.260 --> 00:55:04.070
into your Android database.

00:55:04.070 --> 00:55:06.580
But the real trickiness is
that you need to use your

00:55:06.580 --> 00:55:08.240
client ID and your
client secrets to

00:55:08.240 --> 00:55:09.690
use the refresh token.

00:55:09.690 --> 00:55:11.680
And that's usually something
you really, really want to

00:55:11.680 --> 00:55:15.775
keep secret and you don't want
people to take your APK, and

00:55:15.775 --> 00:55:20.210
reverse engineering, and
de-obfuscate it, and be able

00:55:20.210 --> 00:55:23.230
to read your client ID and your
client secrets, and use

00:55:23.230 --> 00:55:28.910
that to hack and take your quota
and that kind of stuff.

00:55:28.910 --> 00:55:30.950
So you'll probably need to
have secret communication

00:55:30.950 --> 00:55:36.620
between your Android app and
your back end that's holding

00:55:36.620 --> 00:55:38.163
the refresh and the
access token.

00:55:42.455 --> 00:55:46.440
To talk more, definitely right
now Stack Overflow

00:55:46.440 --> 00:55:47.170
is your best bet.

00:55:47.170 --> 00:55:48.770
We can really have a
conversation on Stack

00:55:48.770 --> 00:55:52.440
Overflow, start a forum.

00:55:52.440 --> 00:55:54.540
You can probably find me on
Stack Overflow as well--

00:55:54.540 --> 00:55:55.790
Nicolas Garnier.

00:55:57.370 --> 00:55:59.710
I think there's a way in Stack
Overflow to add me with a + or

00:55:59.710 --> 00:56:02.140
an @ Nicolas Garnier, and
all those kind of

00:56:02.140 --> 00:56:05.490
things, so I get notified.

00:56:05.490 --> 00:56:08.480
Or I'm also on Google+.

00:56:08.480 --> 00:56:11.782
If you post a question there
or an open discussion or an

00:56:11.782 --> 00:56:15.590
open forum, ping me the link
on Google+, on my profile.

00:56:15.590 --> 00:56:19.532
And I'll get on it, and we can
chat there. stack Overflow is

00:56:19.532 --> 00:56:21.880
great because everybody can
see the discussion.

00:56:21.880 --> 00:56:25.160
And if it contains a
valuable resource,

00:56:25.160 --> 00:56:26.770
everybody will see it.

00:56:26.770 --> 00:56:28.270
So that's what we
like about it.

00:56:28.270 --> 00:56:30.250
It's more scalable.

00:56:30.250 --> 00:56:30.820
SERGIO GOMES: All right.

00:56:30.820 --> 00:56:34.200
We're already almost 10 minutes
into overtime, so I

00:56:34.200 --> 00:56:38.030
think we're going to have
to end this one here.

00:56:38.030 --> 00:56:38.930
NICOLAS GARNIER: OK, everyone.

00:56:38.930 --> 00:56:42.250
Thanks for coming.

00:56:42.250 --> 00:56:43.190
Thanks for the questions.

00:56:43.190 --> 00:56:45.310
And thanks for listening
all the way.

00:56:45.310 --> 00:56:48.500
And Gary, you know, please
follow up on Stack Overflow.

00:56:48.500 --> 00:56:51.110
I'll be happy to
help you there.

00:56:51.110 --> 00:56:54.350
So yeah, we hope you liked it.

00:56:54.350 --> 00:56:55.041
SERGIO GOMES: All right.

00:56:55.041 --> 00:56:55.502
Bye, everyone.

00:56:55.502 --> 00:56:57.350
Thanks for coming.

00:56:57.350 --> 00:56:58.600
NICOLAS GARNIER: Bye-bye.

