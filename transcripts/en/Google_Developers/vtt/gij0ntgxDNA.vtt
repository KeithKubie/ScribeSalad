WEBVTT
Kind: captions
Language: en

00:00:04.019 --> 00:00:04.730
MAYURESH SAOJI: Hello
everyone.

00:00:04.730 --> 00:00:07.560
Thank you for coming to the
Content API for Shopping

00:00:07.560 --> 00:00:10.370
session at Google I/O. My
name is Mayuresh Saoji.

00:00:10.370 --> 00:00:13.740
I am a product manager on the
Google Shopping team, and I'm

00:00:13.740 --> 00:00:16.730
going to be co-presenting this
session along with Daniel

00:00:16.730 --> 00:00:21.290
Hermes, who's from the Developer
Relations team.

00:00:21.290 --> 00:00:23.510
Today we're going to talk about
a bunch of stuff in the

00:00:23.510 --> 00:00:25.660
next 60 minutes or so.

00:00:25.660 --> 00:00:28.970
I'm just going to set some
context for this session by

00:00:28.970 --> 00:00:33.390
providing an overview for Google
Shopping and just want

00:00:33.390 --> 00:00:35.440
to make sure that everyone
is in sync.

00:00:35.440 --> 00:00:37.580
This maybe repetitive for some
of you in the crowd, but

00:00:37.580 --> 00:00:39.930
please bear with me
for a few minutes.

00:00:39.930 --> 00:00:41.990
After that, I'm going to
turn it over to Danny.

00:00:41.990 --> 00:00:44.880
Danny is going to go very deep
into the Content API.

00:00:44.880 --> 00:00:47.440
He's going to talk a lot about
the mechanics of the Content

00:00:47.440 --> 00:00:49.950
API, so how you do stuff,
how you actually form

00:00:49.950 --> 00:00:51.380
a request, et cetera.

00:00:51.380 --> 00:00:54.450
And he's going to also spend a
significant amount of time on

00:00:54.450 --> 00:00:57.760
probably the most important part
of the session, which is

00:00:57.760 --> 00:01:01.610
how can you use the tools that
we have and use the Content

00:01:01.610 --> 00:01:05.200
API to really improve your
data quality and send us

00:01:05.200 --> 00:01:06.630
better quality feeds.

00:01:06.630 --> 00:01:12.060
So without further ado,
let's get started.

00:01:12.060 --> 00:01:15.220
So let me tell you first a
little bit about how we use

00:01:15.220 --> 00:01:21.030
the product data that you send
to us using the Content API.

00:01:21.030 --> 00:01:24.730
So the point I'm trying to make
here is that you have one

00:01:24.730 --> 00:01:28.560
Feed, but it's repurposed into
multiple destinations, and I'm

00:01:28.560 --> 00:01:30.440
going to talk a little
bit about these

00:01:30.440 --> 00:01:32.590
destinations first.

00:01:32.590 --> 00:01:35.300
So the first and obvious
destination is Google

00:01:35.300 --> 00:01:36.040
Shopping, right?

00:01:36.040 --> 00:01:39.170
So the data that you send us
through the Content API or

00:01:39.170 --> 00:01:41.640
Twitter feeds through the
Merchant Center obviously

00:01:41.640 --> 00:01:44.320
appears on Google Shopping.

00:01:44.320 --> 00:01:45.780
Let me show you what
this looks like.

00:01:45.780 --> 00:01:48.980
So I've done here a query for
Rocky Mountain River Race

00:01:48.980 --> 00:01:52.720
Water Slide, and you see
some results here.

00:01:52.720 --> 00:01:57.340
When I click on these results,
I'm going into a search

00:01:57.340 --> 00:02:01.280
results page for shopping and
then clicking through into a

00:02:01.280 --> 00:02:05.460
product page where I can then
compare prices and look at

00:02:05.460 --> 00:02:06.310
things like that.

00:02:06.310 --> 00:02:10.840
So that's one place
where you can--

00:02:10.840 --> 00:02:13.230
actually, you know what,
this didn't work as it

00:02:13.230 --> 00:02:14.275
was supposed to.

00:02:14.275 --> 00:02:16.420
I don't know what happened
to the URL there.

00:02:22.120 --> 00:02:23.070
PRODUCER: OK, start.

00:02:23.070 --> 00:02:25.450
You want to pick up
where [INAUDIBLE].

00:02:25.450 --> 00:02:25.865
MAYURESH SAOJI: Sure.

00:02:25.865 --> 00:02:27.692
Can I start?

00:02:27.692 --> 00:02:28.910
PRODUCER: So we're doing
a pick-up here.

00:02:28.910 --> 00:02:30.280
MAYURESH SAOJI: Pick up here.

00:02:30.280 --> 00:02:30.940
OK.

00:02:30.940 --> 00:02:32.500
Let me tell you a little
bit about the different

00:02:32.500 --> 00:02:33.150
destinations.

00:02:33.150 --> 00:02:36.890
The first and most obvious one
is Google Shopping, so the

00:02:36.890 --> 00:02:40.180
feeds that you send us are
manifested on Google Shopping.

00:02:40.180 --> 00:02:41.560
Let me show you what
that looks like.

00:02:41.560 --> 00:02:46.060
So I did a search for Rocky
Mountain River Race Inflatable

00:02:46.060 --> 00:02:49.990
Water Bouncer, and you see
the results over here.

00:02:49.990 --> 00:02:52.960
When I click over here, I get
into the search results page

00:02:52.960 --> 00:02:55.860
on Shopping and then clicking
through on one of these

00:02:55.860 --> 00:03:00.350
results will take me into
the actual, oh, sorry.

00:03:03.890 --> 00:03:05.050
I know what I did wrong.

00:03:05.050 --> 00:03:07.820
OK, I'm going to do
it one more time.

00:03:07.820 --> 00:03:09.150
Sorry about that.

00:03:09.150 --> 00:03:13.160
OK, so the first and obvious
place where the most obvious

00:03:13.160 --> 00:03:17.400
place where your search results
appear, sorry, where

00:03:17.400 --> 00:03:21.190
your product feeds appear
are on Google Shopping.

00:03:21.190 --> 00:03:22.910
The data that you sent to us is

00:03:22.910 --> 00:03:24.270
manifested on Google Shopping.

00:03:24.270 --> 00:03:28.710
So here I've done a search for
Rocky Mountain River Race,

00:03:28.710 --> 00:03:32.010
which is an inflatable
water raft.

00:03:32.010 --> 00:03:35.890
And, as you can see here, there
are several listings on

00:03:35.890 --> 00:03:37.710
the search results page.

00:03:37.710 --> 00:03:41.035
Clicking on one of these takes
me to a product page, where I

00:03:41.035 --> 00:03:43.600
can then look at different
products and different sellers

00:03:43.600 --> 00:03:45.270
for that product,
and so forth.

00:03:45.270 --> 00:03:47.470
So that's one obvious
place where your

00:03:47.470 --> 00:03:48.960
data manifests itself.

00:03:48.960 --> 00:03:52.900
The second place is on Google
Commerce Search.

00:03:52.900 --> 00:03:55.760
So Commerce Search
is a product that

00:03:55.760 --> 00:03:57.870
we've created for retailers.

00:03:57.870 --> 00:04:00.790
Several retailers are already
using this product

00:04:00.790 --> 00:04:01.750
successfully.

00:04:01.750 --> 00:04:04.230
And what Google Commerce Search
allows you to do is to

00:04:04.230 --> 00:04:07.920
bring the search and discovery
experience that you get on

00:04:07.920 --> 00:04:10.330
Google to your retail website.

00:04:10.330 --> 00:04:14.640
So as an example there, I'm on
the Baby Age website, and as I

00:04:14.640 --> 00:04:17.410
search for Rocky Mountain River
Race, you see that I see

00:04:17.410 --> 00:04:21.880
these examples or suggestions of
products that I can go to.

00:04:21.880 --> 00:04:25.980
And the product here in fact
has an image, a title, a

00:04:25.980 --> 00:04:27.300
price, and so forth.

00:04:27.300 --> 00:04:30.240
And then clicking on one of
these takes me to the actual

00:04:30.240 --> 00:04:31.310
product in place, right?

00:04:31.310 --> 00:04:34.610
So you get all of the power of
Google Search, but on your

00:04:34.610 --> 00:04:36.240
retail website.

00:04:36.240 --> 00:04:38.330
The third destination
that I want to talk

00:04:38.330 --> 00:04:40.660
about is Google Shopper.

00:04:40.660 --> 00:04:44.380
So Google Shopper is a mobile
app created for Android and

00:04:44.380 --> 00:04:50.220
the iPhone and basically allows
you to expose your

00:04:50.220 --> 00:04:52.820
products, not only on
the desktop, but

00:04:52.820 --> 00:04:53.920
also on mobile phones.

00:04:53.920 --> 00:04:57.290
So this is another place where
we repurpose your data.

00:04:57.290 --> 00:04:59.620
I'm not going to bother with
trying to figure out

00:04:59.620 --> 00:05:01.980
projection equipment, et cetera,
for mobile phones.

00:05:01.980 --> 00:05:04.530
So I just took a couple of
screen caps here which

00:05:04.530 --> 00:05:06.610
illustrate what this
looks like.

00:05:06.610 --> 00:05:09.880
So on the left there you see
what the search results page

00:05:09.880 --> 00:05:12.130
looks like, and then on the
right you actually see the

00:05:12.130 --> 00:05:14.710
details on a specific
product page, right?

00:05:14.710 --> 00:05:19.210
So those are the different
destinations where we manifest

00:05:19.210 --> 00:05:21.530
data from your product feed.

00:05:21.530 --> 00:05:24.620
Next, I want to talk a little
bit about how we use the data

00:05:24.620 --> 00:05:28.720
that you send us to improve
the shopping experience.

00:05:28.720 --> 00:05:32.190
So I'm going to use
again an example.

00:05:32.190 --> 00:05:34.970
Let's say I'm a computer
aficionado, like building

00:05:34.970 --> 00:05:38.020
computers, and I'm trying to
buy random access memory.

00:05:38.020 --> 00:05:39.710
I'm trying to buy some RAM.

00:05:39.710 --> 00:05:41.600
I do a search for random
access memory.

00:05:41.600 --> 00:05:45.310
Of course I get some search
results here, but what if I'm

00:05:45.310 --> 00:05:47.610
trying to find something
very specific?

00:05:47.610 --> 00:05:53.060
This is where these filters are
queried on the left side,

00:05:53.060 --> 00:05:54.350
on the left nav come
into play.

00:05:54.350 --> 00:05:57.220
So I can look for a certain
price range.

00:05:57.220 --> 00:05:58.490
I can look for a brand.

00:05:58.490 --> 00:06:00.730
I can look for DDR2 or 3.

00:06:00.730 --> 00:06:04.510
I can look for a particular
form factor, or a memory

00:06:04.510 --> 00:06:05.590
capacity, or so forth.

00:06:05.590 --> 00:06:08.730
So we understand the facets of
this product, and we can

00:06:08.730 --> 00:06:13.055
expose them here on the left
side for you to look at and to

00:06:13.055 --> 00:06:16.230
further restrict your search.

00:06:16.230 --> 00:06:19.170
So if I click on two to four GB,
it indicates that's what

00:06:19.170 --> 00:06:21.960
I'm searching for and now the
search results are different.

00:06:21.960 --> 00:06:26.710
So it's a very useful feature
for you to kind of hone in on

00:06:26.710 --> 00:06:28.840
what you're exactly
trying to find.

00:06:28.840 --> 00:06:30.930
Let me give you another
example.

00:06:30.930 --> 00:06:35.450
I'm taking a trip to Argentina
later in the summer, which is

00:06:35.450 --> 00:06:38.300
our summer but their winter
so I hear it's cold there.

00:06:38.300 --> 00:06:39.620
I want to buy jacket.

00:06:39.620 --> 00:06:40.690
I like tan jackets.

00:06:40.690 --> 00:06:42.850
I did a search for
brown jacket.

00:06:42.850 --> 00:06:45.520
Now there are some search
results here, not exactly

00:06:45.520 --> 00:06:48.280
useful for me because there are
men's and women's jackets.

00:06:48.280 --> 00:06:52.080
So I can go here, go to the left
nav again, and I see that

00:06:52.080 --> 00:06:55.560
one of the filters, one of the
facets here is gender.

00:06:55.560 --> 00:06:58.300
So if I click on men's jackets,
now all of the

00:06:58.300 --> 00:07:00.350
results that I see are
men's jackets.

00:07:00.350 --> 00:07:01.680
So again, very useful.

00:07:01.680 --> 00:07:07.030
Of course, I can also further
filter this based on color, or

00:07:07.030 --> 00:07:09.360
price, or what have you.

00:07:09.360 --> 00:07:13.220
And then another interesting
improvement, or another

00:07:13.220 --> 00:07:15.540
interesting feature that we've
launched is this concept of

00:07:15.540 --> 00:07:17.280
visually similar items.

00:07:17.280 --> 00:07:20.980
So if I go into one of these
search results, you see

00:07:20.980 --> 00:07:25.220
immediately below here that we
show visually similar items,

00:07:25.220 --> 00:07:29.070
same color, same cut, and so
forth to the search item that

00:07:29.070 --> 00:07:29.800
I was looking at.

00:07:29.800 --> 00:07:32.640
So again, a very useful
tool to inspire

00:07:32.640 --> 00:07:34.880
people to discover stuff.

00:07:34.880 --> 00:07:37.430
And especially when you're not
sure of what you're looking

00:07:37.430 --> 00:07:39.590
for, this could be something
very useful.

00:07:39.590 --> 00:07:44.550
So the point here is that we
ask you for a lot of data.

00:07:44.550 --> 00:07:47.340
We ask you for a lot
of information.

00:07:47.340 --> 00:07:50.910
And it's not just price and
title and availability and

00:07:50.910 --> 00:07:51.920
image and so forth.

00:07:51.920 --> 00:07:55.400
We ask you for things like brand
and color and variance

00:07:55.400 --> 00:07:56.120
and things like that.

00:07:56.120 --> 00:07:58.840
In case you're wondering why do
you do that, this is why.

00:07:58.840 --> 00:08:02.050
It really allows us to provide
a rich user experience.

00:08:02.050 --> 00:08:04.670
And it allows us to make sure
that users are able to

00:08:04.670 --> 00:08:06.940
navigate and filter and
find exactly what

00:08:06.940 --> 00:08:08.350
they're looking for.

00:08:08.350 --> 00:08:10.850
So that's how we use the data
that you give us to improve

00:08:10.850 --> 00:08:12.120
the shopping experience.

00:08:12.120 --> 00:08:15.220
So now let me spend a couple
minutes talking about the

00:08:15.220 --> 00:08:18.500
Content API proper before
I turn it over to Danny.

00:08:18.500 --> 00:08:22.550
The Content API really allows
you to open the firehose and

00:08:22.550 --> 00:08:25.720
pump all your product data into
Google very efficiently,

00:08:25.720 --> 00:08:27.510
very quickly.

00:08:27.510 --> 00:08:30.670
Let me talk about some of the
benefits of the Content API.

00:08:30.670 --> 00:08:32.860
First and foremost, the
Content API for

00:08:32.860 --> 00:08:34.650
Shopping is real time.

00:08:34.650 --> 00:08:35.929
What does that mean?

00:08:35.929 --> 00:08:40.039
Basically, the latency for
you to submit data to us

00:08:40.039 --> 00:08:41.299
is very, very low.

00:08:45.620 --> 00:08:49.200
There is the express pipeline,
which allows you to send us

00:08:49.200 --> 00:08:52.430
data and make incremental
updates.

00:08:52.430 --> 00:08:54.880
So if you only want to change
price and availability, and if

00:08:54.880 --> 00:08:58.880
you only want to change it for,
let's say 5% of the items

00:08:58.880 --> 00:09:01.410
that you send us, you can do
so very quickly and very

00:09:01.410 --> 00:09:02.790
efficiently.

00:09:02.790 --> 00:09:07.190
So real-time feedback, real-time
data, entry real

00:09:07.190 --> 00:09:10.710
time, sort of updates to your
product inventory, to your

00:09:10.710 --> 00:09:14.950
product price, attributes that
change very often, just much

00:09:14.950 --> 00:09:17.350
faster than submitting
a feed to us.

00:09:17.350 --> 00:09:19.730
The second benefit is
that the Content API

00:09:19.730 --> 00:09:21.310
for Shopping is automated.

00:09:21.310 --> 00:09:25.150
This allows you to
operate at scale.

00:09:25.150 --> 00:09:29.530
So for instance, the feedback
format for each item is

00:09:29.530 --> 00:09:31.290
identical to the submission
format.

00:09:31.290 --> 00:09:34.270
So what that means is, it's
very easy for you to write

00:09:34.270 --> 00:09:39.220
parsers and so forth for the
script, for this data.

00:09:39.220 --> 00:09:42.670
You get errors back to you as
they happen, so they replay to

00:09:42.670 --> 00:09:44.030
you as they happen.

00:09:44.030 --> 00:09:45.130
And it's very granular.

00:09:45.130 --> 00:09:48.280
It's not sort of at a digest
level, or an aggregate level.

00:09:48.280 --> 00:09:50.230
You can get very granular
information

00:09:50.230 --> 00:09:53.070
on what went wrong.

00:09:53.070 --> 00:09:58.020
An example of how this would
be useful is if you set up

00:09:58.020 --> 00:10:01.760
your ERP system to connect
directly to the Content API.

00:10:01.760 --> 00:10:03.050
Let's say I have
an ERP system.

00:10:03.050 --> 00:10:05.640
All your inventory
data is in there.

00:10:05.640 --> 00:10:08.510
And what you can do is you can
set up some kind of automated

00:10:08.510 --> 00:10:11.770
script, or a cron job, or
whatever, to go into that

00:10:11.770 --> 00:10:15.540
database, get your inventory and
information, and then pipe

00:10:15.540 --> 00:10:18.660
it through to the Content API
and send it over to Google.

00:10:18.660 --> 00:10:23.250
So as stuff changes in your
database, it can be picked up

00:10:23.250 --> 00:10:25.740
by our scripts and it'd be
piped through the API.

00:10:25.740 --> 00:10:28.620
And it could be sent to us
pretty much in real time.

00:10:28.620 --> 00:10:32.060
And then once we get it, we
can process it and very

00:10:32.060 --> 00:10:32.860
quickly push it out.

00:10:32.860 --> 00:10:36.200
So the latency is very,
very quick, so

00:10:36.200 --> 00:10:38.600
automated and real time.

00:10:38.600 --> 00:10:43.080
So here's a quick comparison
for when is the Content API

00:10:43.080 --> 00:10:45.290
appropriate.

00:10:45.290 --> 00:10:48.440
So again, just to recap, you can
send us data in two ways,

00:10:48.440 --> 00:10:51.830
through a simple feed, flat
file, XML file, through the

00:10:51.830 --> 00:10:54.490
Merchant Center, or you can
use the Content API.

00:10:54.490 --> 00:10:59.870
On the feed side, typically
these are used by smaller

00:10:59.870 --> 00:11:02.250
merchants with static
product inventories.

00:11:02.250 --> 00:11:05.300
So inventory doesn't
change that often.

00:11:05.300 --> 00:11:07.790
Certainly, price and
availability and things like

00:11:07.790 --> 00:11:10.130
that don't need to be
updated as often.

00:11:10.130 --> 00:11:14.540
The benefit here is that
it's easy to set up.

00:11:14.540 --> 00:11:18.050
Minimal initial input
is needed.

00:11:18.050 --> 00:11:19.960
On an ongoing basis, you
don't really need

00:11:19.960 --> 00:11:23.460
much technical inputs.

00:11:23.460 --> 00:11:25.950
So it's easy to set up
and to maintain.

00:11:25.950 --> 00:11:30.140
On the other hand, the Content
API for Shopping, merchants

00:11:30.140 --> 00:11:33.380
with larger, more dynamic
inventories tend to use this.

00:11:33.380 --> 00:11:36.550
There is some initial effort
you need to invest in this

00:11:36.550 --> 00:11:40.410
from a technical standpoint, but
again the payoff is huge

00:11:40.410 --> 00:11:42.060
if you need it.

00:11:42.060 --> 00:11:46.445
If you're looking to have a real
time system, have a way

00:11:46.445 --> 00:11:50.140
to get us data quickly, and
automate everything, then this

00:11:50.140 --> 00:11:51.080
is definitely for you.

00:11:51.080 --> 00:11:53.710
But based on the fact that all
of you are here now in the

00:11:53.710 --> 00:11:57.710
audience, I'm assuming that the
Content API is something

00:11:57.710 --> 00:12:01.490
that you are either using or
thinking of using for your

00:12:01.490 --> 00:12:03.220
particular use case
and these are good

00:12:03.220 --> 00:12:04.560
trade-offs to think about.

00:12:04.560 --> 00:12:10.340
So now let me turn it off to
Danny from DevRel, and he's

00:12:10.340 --> 00:12:13.540
going to talk a little bit about
how you can leverage the

00:12:13.540 --> 00:12:18.540
Content API and really use it
to your advantage, and scale

00:12:18.540 --> 00:12:20.240
and improve your data quality.

00:12:20.240 --> 00:12:21.080
Thank you.

00:12:21.080 --> 00:12:22.310
DANNY HERMES: Thanks,
Mayuresh.

00:12:22.310 --> 00:12:25.490
So before I can get to the thing
that you all came here

00:12:25.490 --> 00:12:29.790
to see today, how to improve
your data quality, I'm first

00:12:29.790 --> 00:12:33.050
going to review how you can
use the API mechanically.

00:12:33.050 --> 00:12:37.150
So, as you see here, we
have a sample request.

00:12:37.150 --> 00:12:38.170
It's XML.

00:12:38.170 --> 00:12:42.210
We have some various pieces of
product data, like a title,

00:12:42.210 --> 00:12:45.380
Swiss Champ, Swiss Army Knife,
a description, the most

00:12:45.380 --> 00:12:47.780
complete Swiss army knife
available, and some other

00:12:47.780 --> 00:12:50.200
pieces like an ID,
a condition, a

00:12:50.200 --> 00:12:51.660
price, and a tax rule.

00:12:51.660 --> 00:12:53.520
And all these pieces
are contained in a

00:12:53.520 --> 00:12:55.710
parent entry element.

00:12:55.710 --> 00:12:59.270
And that's how we describe
each individual product.

00:12:59.270 --> 00:13:01.970
So in order to insert a product,
you're going to

00:13:01.970 --> 00:13:05.150
submit a post request to the
URI content.goodleap

00:13:05.150 --> 00:13:10.690
is.com/content/v1, and then
you're going to include your

00:13:10.690 --> 00:13:12.530
account ID, then
/items/products/schema.

00:13:15.440 --> 00:13:19.490
Now, you're including your
account ID to identify the

00:13:19.490 --> 00:13:22.950
account that actually owns
this product data.

00:13:22.950 --> 00:13:25.890
In addition to that, you're
going to send an authorization

00:13:25.890 --> 00:13:29.250
header with the request that
you're signing the request

00:13:29.250 --> 00:13:33.070
with to verify the actual
authenticated Google account

00:13:33.070 --> 00:13:36.710
associated with this Merchant
Center account.

00:13:36.710 --> 00:13:39.570
And then the third piece that
you need to send with your

00:13:39.570 --> 00:13:42.960
request is the content type, and
that simply identifies to

00:13:42.960 --> 00:13:46.060
Google that you're sending us
a certain type of content.

00:13:46.060 --> 00:13:48.840
In this case that's XML.

00:13:48.840 --> 00:13:49.610
OK.

00:13:49.610 --> 00:13:51.700
So let's demo.

00:13:51.700 --> 00:13:54.670
Let's actually see what this
looks like for an account.

00:13:54.670 --> 00:13:59.140
So, I'll show you here my
account, my demo account,

00:13:59.140 --> 00:14:02.830
Joe's Widgets, 8721349.

00:14:02.830 --> 00:14:06.780
Right now this has no product
data at all in the account.

00:14:06.780 --> 00:14:10.060
So let's use a tool
to actually insert

00:14:10.060 --> 00:14:11.730
some product data.

00:14:11.730 --> 00:14:13.220
So I'm not signed in.

00:14:13.220 --> 00:14:16.360
I'm going to sign into
this demo tool.

00:14:16.360 --> 00:14:19.840
OK, so now I have a token that
this tool can actually use to

00:14:19.840 --> 00:14:21.050
sign the request.

00:14:21.050 --> 00:14:25.600
And what's more, it went and got
my merchant ID associated

00:14:25.600 --> 00:14:29.910
with the account for
Joe's Widgets, OK?

00:14:29.910 --> 00:14:32.790
and from there it can actually
construct the URI that it

00:14:32.790 --> 00:14:35.740
needs to make the insert
or post request.

00:14:35.740 --> 00:14:37.640
OK, so let's insert a product.

00:14:37.640 --> 00:14:41.800
So with the demo tool, you can
just totally ignore the XML

00:14:41.800 --> 00:14:44.340
structure if you like and you
could just specify the title.

00:14:44.340 --> 00:14:48.880
So here we see no name xx500,
just another widget that Joe

00:14:48.880 --> 00:14:49.910
is going to sell.

00:14:49.910 --> 00:14:56.200
And also notice we have this
warnings check box checked and

00:14:56.200 --> 00:14:59.390
that adds just a little piece
to the end of the URI

00:14:59.390 --> 00:15:03.990
warnings, which will give some
more warnings in the response

00:15:03.990 --> 00:15:06.410
that we get from the API.

00:15:06.410 --> 00:15:08.420
And just for those who are
curious, this is the

00:15:08.420 --> 00:15:13.370
equivalent XML to the input
fields that we saw on the

00:15:13.370 --> 00:15:14.810
other part.

00:15:14.810 --> 00:15:18.720
So let's execute this request
and see what happens.

00:15:18.720 --> 00:15:21.970
So it's a post like
we saw, same XML.

00:15:21.970 --> 00:15:24.250
And the response come
back a 201.

00:15:24.250 --> 00:15:25.460
Success.

00:15:25.460 --> 00:15:28.550
And we get back various things,
like a location.

00:15:28.550 --> 00:15:32.220
And of course as Mayuresh said,
the actual body the

00:15:32.220 --> 00:15:36.310
response is almost identical
to the request the body the

00:15:36.310 --> 00:15:39.420
request, and that's the
automated nature of this API.

00:15:39.420 --> 00:15:42.140
So again, we have an entry, we
have the same title, have the

00:15:42.140 --> 00:15:43.350
same description.

00:15:43.350 --> 00:15:45.980
We have some various
other things like

00:15:45.980 --> 00:15:47.500
a link to the item.

00:15:47.500 --> 00:15:49.970
And then as we scroll down in
the App Control element, we

00:15:49.970 --> 00:15:52.620
actually see the warnings
that we asked for.

00:15:52.620 --> 00:15:55.530
So let's verify in my
account that this

00:15:55.530 --> 00:15:57.220
insert actually worked.

00:15:57.220 --> 00:15:59.590
So I'm going to refresh this
page and there you see it.

00:15:59.590 --> 00:16:01.880
I went from zero products
to one product.

00:16:01.880 --> 00:16:02.950
OK?

00:16:02.950 --> 00:16:05.940
So this is one tool that you can
actually use when you're

00:16:05.940 --> 00:16:07.880
starting out with an
implementation.

00:16:07.880 --> 00:16:12.320
So another tool that we offer, a
series of open source client

00:16:12.320 --> 00:16:15.640
libraries that we have
support for in Java,

00:16:15.640 --> 00:16:18.860
Python, PHP, and .NET.

00:16:18.860 --> 00:16:22.550
Now to give you an idea of how
these libraries work we'll see

00:16:22.550 --> 00:16:23.440
some sample code.

00:16:23.440 --> 00:16:27.040
So first, all these libraries
have a concept of a client or

00:16:27.040 --> 00:16:28.260
a service object.

00:16:28.260 --> 00:16:31.030
And this is sort of the work
course of the entire library.

00:16:31.030 --> 00:16:33.480
These objects will create
the request.

00:16:33.480 --> 00:16:34.520
They'll sign the request.

00:16:34.520 --> 00:16:36.730
They'll help you do the
authentication so you can get

00:16:36.730 --> 00:16:38.650
those tokens for
doing signings.

00:16:38.650 --> 00:16:41.570
And of course they'll worry
about constructing the correct

00:16:41.570 --> 00:16:45.215
XML and taking your data and
turning it into something that

00:16:45.215 --> 00:16:47.060
the API can understand.

00:16:47.060 --> 00:16:50.420
So in Python, we
simply use the

00:16:50.420 --> 00:16:55.260
gdata.contentforshopping.client
module and import the content

00:16:55.260 --> 00:16:57.390
for shopping client class.

00:16:57.390 --> 00:17:01.410
And in order to instantiate an
instance of that class, we

00:17:01.410 --> 00:17:05.430
simply need to pass in the
actual ID of the account to

00:17:05.430 --> 00:17:09.589
the constructor via the keyword
argument account_ID.

00:17:09.589 --> 00:17:12.730
And using that, the client will
then construct the URIs

00:17:12.730 --> 00:17:14.940
when it makes API requests.

00:17:14.940 --> 00:17:18.280
Similarly, in .NET, rather
than modules,

00:17:18.280 --> 00:17:19.569
we have name spaces.

00:17:19.569 --> 00:17:22.829
So using the
google.gdata.contentforshopping

00:17:22.829 --> 00:17:26.560
name space, we get the content
for shopping service class.

00:17:26.560 --> 00:17:30.120
And similar to Python, we just
get a new instance of that

00:17:30.120 --> 00:17:34.560
class by giving it the account
ID as a string, as well as

00:17:34.560 --> 00:17:38.480
another string, which will
identify the application, just

00:17:38.480 --> 00:17:42.140
for logging purposes, but really
nothing beyond that.

00:17:42.140 --> 00:17:46.520
And lastly, in PHP, rather than
name spaces and modules,

00:17:46.520 --> 00:17:48.550
we just have a single
file which contains

00:17:48.550 --> 00:17:49.780
all the data we need.

00:17:49.780 --> 00:17:53.990
And so by requiring the
gshoppingcontent.PHP file, we

00:17:53.990 --> 00:17:58.060
get the gsc_client class, which,
again, to instantiate a

00:17:58.060 --> 00:18:01.580
new instance, simply takes
a string, which holds the

00:18:01.580 --> 00:18:03.390
account ID.

00:18:03.390 --> 00:18:07.400
So, in addition to having the
service object, the next most

00:18:07.400 --> 00:18:09.240
important thing is
probably product

00:18:09.240 --> 00:18:10.830
data and product entries.

00:18:10.830 --> 00:18:14.230
So how do we represent product
entries using these libraries.

00:18:14.230 --> 00:18:16.650
Again I'll start off
with Python.

00:18:16.650 --> 00:18:19.500
Using the
gdata.contentforshopping.data

00:18:19.500 --> 00:18:22.830
module, a similar
module to the

00:18:22.830 --> 00:18:26.970
gdata.contentforshopping.client
module, we can import classes

00:18:26.970 --> 00:18:30.550
which will actually abstract
away the XML behavior into

00:18:30.550 --> 00:18:32.350
simple Python attributes.

00:18:32.350 --> 00:18:36.490
So, to start out, we'll just
have an empty entry, which is

00:18:36.490 --> 00:18:38.820
a member of the product
entry class

00:18:38.820 --> 00:18:40.600
constructed with no arguments.

00:18:40.600 --> 00:18:43.870
And to actually set the product
ID, for example, we

00:18:43.870 --> 00:18:48.500
set the product_ID attribute of
this entry to an instance

00:18:48.500 --> 00:18:51.660
of the product ID class where we
pass in the string that we

00:18:51.660 --> 00:18:56.140
want to represent as the XML
value into the constructor or

00:18:56.140 --> 00:18:58.040
product ID.

00:18:58.040 --> 00:19:00.135
In .NET, we use the
google.gdata.con

00:19:00.135 --> 00:19:04.690
tentforshopping.elements
name space.

00:19:04.690 --> 00:19:08.070
And this name space has things
like a product entry class as

00:19:08.070 --> 00:19:09.050
we saw for Python.

00:19:09.050 --> 00:19:13.170
So to get a new product entry,
we just call new product entry

00:19:13.170 --> 00:19:14.370
with no argument.

00:19:14.370 --> 00:19:18.650
And the setters and getters for
.NET actually will do the

00:19:18.650 --> 00:19:22.530
casting from strings into the
desired classes themselves, so

00:19:22.530 --> 00:19:24.990
we don't even need to worry
about knowing the name of the

00:19:24.990 --> 00:19:26.280
product ID class.

00:19:26.280 --> 00:19:30.070
We just set this product ID
attribute to a string and

00:19:30.070 --> 00:19:32.470
everything else is done
under the covers.

00:19:32.470 --> 00:19:39.100
Similarly, for PHP, we start off
with an empty gsc_product

00:19:39.100 --> 00:19:44.520
element, and we use the
SetSKUActual method on that

00:19:44.520 --> 00:19:46.430
element and pass
in the string.

00:19:46.430 --> 00:19:48.210
And that's the way the
setters and getters

00:19:48.210 --> 00:19:51.810
work in the PHP library.

00:19:51.810 --> 00:19:54.170
Let's actually use one
of these clients.

00:19:54.170 --> 00:19:57.050
So for the rest of the code
samples, we use Python to keep

00:19:57.050 --> 00:20:02.990
it simple since it reads like
pseudocode, in my opinion.

00:20:02.990 --> 00:20:05.320
Without actually having product
data in hand, let's

00:20:05.320 --> 00:20:07.620
just retrieve all the
products for our

00:20:07.620 --> 00:20:09.470
account, for Joe's Widgets.

00:20:09.470 --> 00:20:13.150
So assuming we have a shopping
client instantiated with my

00:20:13.150 --> 00:20:17.380
account ID, and also with an
auth token, so I'm going to

00:20:17.380 --> 00:20:19.350
leave out the authentication
part.

00:20:19.350 --> 00:20:21.570
If you'd like to see more about
authentication, there

00:20:21.570 --> 00:20:26.660
are some good talks here about
OAuth2 at Google I/O 2012.

00:20:26.660 --> 00:20:28.480
But let's assume we've
done all this.

00:20:28.480 --> 00:20:31.200
To actually get a feed of all
our products, we simply call

00:20:31.200 --> 00:20:34.350
the GetProducts method with
no arguments on this

00:20:34.350 --> 00:20:36.220
instantiated client.

00:20:36.220 --> 00:20:39.720
And that variable feed will
contain an attribute entry

00:20:39.720 --> 00:20:42.590
which is an interval list
containing all the products.

00:20:42.590 --> 00:20:44.900
And so we could loop through
that list and print out the

00:20:44.900 --> 00:20:49.880
title of each product to see a
snapshot of our inventory.

00:20:49.880 --> 00:20:52.700
So what we expect from what we
saw on the Merchant Center is

00:20:52.700 --> 00:20:54.980
that Joe's Widgets
has one product.

00:20:54.980 --> 00:20:57.810
It's this no name x x,
et cetera, widget.

00:20:57.810 --> 00:21:01.620
So let's actually use the
library under the covers to

00:21:01.620 --> 00:21:04.240
execute this and see
what we get.

00:21:04.240 --> 00:21:06.350
So there you have it, one
product, and it's the product

00:21:06.350 --> 00:21:08.620
we just inserted using
the demo tool.

00:21:08.620 --> 00:21:12.740
Great, so let's actually insert
a product using the

00:21:12.740 --> 00:21:14.820
client library and see
what that looks like.

00:21:14.820 --> 00:21:19.080
So assuming the variable entry
holds a product that we've

00:21:19.080 --> 00:21:21.350
constructed, let's actually
assume it holds the product

00:21:21.350 --> 00:21:25.530
that we constructed in that
sample XML, the Swiss Champ

00:21:25.530 --> 00:21:26.500
army knife.

00:21:26.500 --> 00:21:30.180
In order to insert it, we just
call the InsertProduct method

00:21:30.180 --> 00:21:32.750
on the shopping client object.

00:21:32.750 --> 00:21:38.770
And we'll get back an inserted
object which is very similar

00:21:38.770 --> 00:21:42.730
to the entry that we inserted,
but it is a bit different, so

00:21:42.730 --> 00:21:45.480
this is where the automated
part comes back in.

00:21:45.480 --> 00:21:48.830
This is the exact same format,
and it's also an instance of

00:21:48.830 --> 00:21:51.270
the product entry class, but
it's a bit different.

00:21:51.270 --> 00:21:54.570
It has a few more things like
the published value and the

00:21:54.570 --> 00:21:56.950
edited value and things
like that.

00:21:56.950 --> 00:22:00.020
So, let's actually carry
this out, and see if

00:22:00.020 --> 00:22:01.660
we get a 201 here.

00:22:01.660 --> 00:22:04.920
Let's insert the product OK,
great, the insert worked.

00:22:04.920 --> 00:22:06.300
We got a 201.

00:22:06.300 --> 00:22:11.480
So now, going back to the
example from two slides past,

00:22:11.480 --> 00:22:14.840
let's again get our product
feed, and loop through it and

00:22:14.840 --> 00:22:15.640
see if it's changed.

00:22:15.640 --> 00:22:19.000
Let's see if we see the Swiss
Champ army knife.

00:22:19.000 --> 00:22:20.410
OK, there you have it.

00:22:20.410 --> 00:22:21.360
The insert worked.

00:22:21.360 --> 00:22:23.450
I wasn't lying to you.

00:22:23.450 --> 00:22:24.630
Great.

00:22:24.630 --> 00:22:27.680
So, now that we've reviewed
some of the tools that you

00:22:27.680 --> 00:22:33.070
actually have in place to get
started with the Content API,

00:22:33.070 --> 00:22:35.920
let's actually talk about how
you can improve the quality of

00:22:35.920 --> 00:22:40.230
your data via best practices and
some debugging tools, as

00:22:40.230 --> 00:22:43.360
well as some great data quality
tools that we have.

00:22:43.360 --> 00:22:47.690
So, first, best practices, the
very first best practice I

00:22:47.690 --> 00:22:53.570
want to talk about is using
APIs versus using feeds.

00:22:53.570 --> 00:22:56.870
If you're using the API,
don't send updates

00:22:56.870 --> 00:22:58.730
for your entire inventory.

00:22:58.730 --> 00:23:00.690
Rather, just send updates
for things

00:23:00.690 --> 00:23:01.930
that need to be updated.

00:23:01.930 --> 00:23:06.400
If you come from the world of
feeds files, then when you

00:23:06.400 --> 00:23:09.920
need to make an update of even
10 products out of 9,000, you

00:23:09.920 --> 00:23:12.310
still need to send
your entire feed.

00:23:12.310 --> 00:23:13.460
We don't have to do that here.

00:23:13.460 --> 00:23:15.330
That's the value with the API.

00:23:15.330 --> 00:23:17.960
You can simply send the updates
for the products that

00:23:17.960 --> 00:23:19.870
need to be updated.

00:23:19.870 --> 00:23:24.860
It's incremental rather than a
single upload of every product

00:23:24.860 --> 00:23:26.940
that you have.

00:23:26.940 --> 00:23:30.210
Next, don't mix feeds with
the Content API.

00:23:30.210 --> 00:23:32.910
I won't say too much here other
than there's a lot of

00:23:32.910 --> 00:23:36.600
undefined behavior when
you do this and it's

00:23:36.600 --> 00:23:38.120
just not a good idea.

00:23:38.120 --> 00:23:40.630
Really if you're going to
switch from feeds to the

00:23:40.630 --> 00:23:43.630
Content API, by all
means switch.

00:23:43.630 --> 00:23:46.060
Don't straddle the bridge
in between.

00:23:46.060 --> 00:23:50.090
Third, make sure to update your
items before they expire.

00:23:50.090 --> 00:23:52.980
Now this is similar to a point
I'm going to talk about a

00:23:52.980 --> 00:23:56.890
little bit more in depth further
down this list, but it

00:23:56.890 --> 00:24:00.050
deserves its own bullet
point for this reason.

00:24:00.050 --> 00:24:03.810
The expiration date on a product
can be set to 30 days

00:24:03.810 --> 00:24:07.470
post when it's inserted or
updated, and no further.

00:24:07.470 --> 00:24:10.930
So that means if you don't
make any changes to the

00:24:10.930 --> 00:24:14.800
product, at most 30 days later,
it's going to expire.

00:24:14.800 --> 00:24:16.470
So you need to actually
be aware of when

00:24:16.470 --> 00:24:17.730
products are expiring.

00:24:17.730 --> 00:24:19.870
And if you want to keep it in
your inventory, you're going

00:24:19.870 --> 00:24:22.900
to actually need to send just
an empty update, an update

00:24:22.900 --> 00:24:26.540
with all the same data that you
already have, but either

00:24:26.540 --> 00:24:30.210
explicitly set the expiration
date 30 days in the future, or

00:24:30.210 --> 00:24:33.320
just send no expiration date and
by default the system will

00:24:33.320 --> 00:24:36.110
set it to that same value.

00:24:36.110 --> 00:24:40.320
Fourth, combine your item
updates into batch requests

00:24:40.320 --> 00:24:42.060
whenever you can.

00:24:42.060 --> 00:24:46.680
And the reason to do
this is because it

00:24:46.680 --> 00:24:48.300
saves quota for you.

00:24:48.300 --> 00:24:50.250
It saves the amount of requests
that you have to deal

00:24:50.250 --> 00:24:55.840
with, and also collects
responses into batches of

00:24:55.840 --> 00:24:58.150
responses in the exact
same automated

00:24:58.150 --> 00:25:01.270
fashion that we saw before.

00:25:01.270 --> 00:25:04.910
Finally, update items as
soon as they change.

00:25:04.910 --> 00:25:07.180
This is a great feature.

00:25:07.180 --> 00:25:09.430
Recall when Mayuresh
was talking

00:25:09.430 --> 00:25:11.450
about the express pipeline.

00:25:11.450 --> 00:25:13.860
By sending an update the second
you know there's a

00:25:13.860 --> 00:25:16.550
price change, it will actually
surface through

00:25:16.550 --> 00:25:19.360
to results in search.

00:25:19.360 --> 00:25:21.850
And this is something that
benefits both you and people

00:25:21.850 --> 00:25:24.910
trying to buy your products.

00:25:24.910 --> 00:25:28.860
I want to go into a little bit
more in depth about this.

00:25:28.860 --> 00:25:32.660
First, the value here is that
it keeps your data in sync

00:25:32.660 --> 00:25:33.700
with our data.

00:25:33.700 --> 00:25:35.600
And this is pretty big.

00:25:35.600 --> 00:25:37.890
Like I said, if we're talking
about the experience of your

00:25:37.890 --> 00:25:41.350
shoppers, we don't want them
to see something when they

00:25:41.350 --> 00:25:44.210
actually go through Google, and
then go to your site and

00:25:44.210 --> 00:25:46.410
see something different,
right?

00:25:46.410 --> 00:25:49.280
Next, it avoids load spikes.

00:25:49.280 --> 00:25:51.750
If you were to just wait to the
end of the day, or the end

00:25:51.750 --> 00:25:54.520
of the week, or the end of the
month to send all your updates

00:25:54.520 --> 00:25:56.920
and your inserts and your
deletes, then you would have

00:25:56.920 --> 00:25:59.770
this huge spike and your system
may crash just because

00:25:59.770 --> 00:26:01.960
maybe there's not enough
machines, not enough memory,

00:26:01.960 --> 00:26:03.530
not enough processors.

00:26:03.530 --> 00:26:04.520
You know?

00:26:04.520 --> 00:26:07.920
So this avoids load spikes and
evens it out over really the

00:26:07.920 --> 00:26:11.690
use of your inventory or your
merchants if you run a

00:26:11.690 --> 00:26:13.440
marketplace.

00:26:13.440 --> 00:26:17.620
And I just want to give a
small caveat to this.

00:26:17.620 --> 00:26:21.030
Rather than sending an update
every time it happens, if they

00:26:21.030 --> 00:26:23.540
are happening frequently enough,
it may make sense to

00:26:23.540 --> 00:26:27.170
let them pool up into batches
and then send those batches

00:26:27.170 --> 00:26:30.000
out maybe every five minutes
or something like this.

00:26:30.000 --> 00:26:35.500
But still, relatively shortly
after these updates are

00:26:35.500 --> 00:26:38.420
happening you should still be
sending them rather than, like

00:26:38.420 --> 00:26:40.820
I said, having this load
spike pile up.

00:26:44.080 --> 00:26:45.670
Speed bumps can occur.

00:26:45.670 --> 00:26:48.670
Everything I've talked about
up until this point assumes

00:26:48.670 --> 00:26:50.090
you won't make any mistakes.

00:26:50.090 --> 00:26:51.510
You won't have any errors and

00:26:51.510 --> 00:26:53.250
everything will work perfectly.

00:26:53.250 --> 00:26:55.510
Well, that's not the
case, right?

00:26:55.510 --> 00:26:58.640
Sometimes you miss a character
in your XML.

00:26:58.640 --> 00:27:01.120
Sometimes you post
to the wrong URI.

00:27:01.120 --> 00:27:03.430
Sometimes your token
expires, right?

00:27:03.430 --> 00:27:05.170
Sometimes things go wrong.

00:27:05.170 --> 00:27:09.230
So what can we do, and what's
provided for you to deal with

00:27:09.230 --> 00:27:11.790
these occasions where
things go wrong.

00:27:11.790 --> 00:27:15.150
So first, errors, error
feedback is

00:27:15.150 --> 00:27:17.160
again an XML element.

00:27:17.160 --> 00:27:21.130
This is structured very similar
to the entries that

00:27:21.130 --> 00:27:24.020
you're sending and receiving
when you're making requests,

00:27:24.020 --> 00:27:27.030
but rather than an apparent
entry element, we have

00:27:27.030 --> 00:27:29.000
apparent errors element.

00:27:29.000 --> 00:27:34.100
And so here, in this sample,
what we have is a condition

00:27:34.100 --> 00:27:35.060
that was missing--

00:27:35.060 --> 00:27:36.630
and condition is required--

00:27:36.630 --> 00:27:38.780
as well as a price
that was missing.

00:27:38.780 --> 00:27:42.950
And so what we get back in the
response is condition, is the

00:27:42.950 --> 00:27:44.700
location of the error.

00:27:44.700 --> 00:27:46.760
And the reason for
the error is that

00:27:46.760 --> 00:27:48.210
it's a required attribute.

00:27:48.210 --> 00:27:51.970
And so by using this, if your
database actually is aware of

00:27:51.970 --> 00:27:54.380
the condition and aware of the
price, you can actually

00:27:54.380 --> 00:27:56.780
without human intervention
fix this error.

00:27:56.780 --> 00:28:00.780
So using the structure of the
errors, which is very similar

00:28:00.780 --> 00:28:03.870
to the structure of the request
and responses, you can

00:28:03.870 --> 00:28:06.200
automate the way your system
handles these.

00:28:06.200 --> 00:28:08.850
And if you don't have a way to
address it, if you're missing

00:28:08.850 --> 00:28:11.870
these values in your database,
then of course you can notify

00:28:11.870 --> 00:28:15.170
the seller, or you can notify
some admin to address this

00:28:15.170 --> 00:28:16.940
problem further.

00:28:16.940 --> 00:28:20.580
So how can we do this with
client libraries?

00:28:20.580 --> 00:28:26.290
Again using the Python client
library, if an error occurs,

00:28:26.290 --> 00:28:29.810
the library, the request will
actually throw an error.

00:28:29.810 --> 00:28:34.600
So, the gdata.client module
defines a request error class,

00:28:34.600 --> 00:28:40.650
which is the class that is the
class of the exception.

00:28:40.650 --> 00:28:45.012
If you insert the entry via
InsertProduct, wrap it in a

00:28:45.012 --> 00:28:49.330
try accept loop, and actually
try to catch this exception, a

00:28:49.330 --> 00:28:52.160
member of this class of
exceptions, right?

00:28:52.160 --> 00:28:54.700
If you don't do this, and you're
running a long running

00:28:54.700 --> 00:28:59.070
process that does all your
inventory updates and inserts

00:28:59.070 --> 00:29:01.480
and deletes, this will
kill the process.

00:29:01.480 --> 00:29:04.480
The stack trace will come, and
all of a sudden your inventory

00:29:04.480 --> 00:29:07.320
is out of sync and you don't
have this process anymore.

00:29:07.320 --> 00:29:11.120
So it's really important to
wrap these in try accept

00:29:11.120 --> 00:29:12.630
statements.

00:29:12.630 --> 00:29:16.420
If we didn't catch it in the
variable e x c, we can get the

00:29:16.420 --> 00:29:20.390
error response as a string from
the body attribute of

00:29:20.390 --> 00:29:22.640
that exception variable.

00:29:22.640 --> 00:29:25.540
Now in order to parse that
into something we can

00:29:25.540 --> 00:29:29.190
understand, we use the
atom.core module.

00:29:29.190 --> 00:29:32.140
Now this module comes installed
with the g data dot

00:29:32.140 --> 00:29:35.250
content for shopping
modules as well.

00:29:35.250 --> 00:29:38.110
And using the parse function
within this module, we can

00:29:38.110 --> 00:29:40.350
parse the error response
string into a

00:29:40.350 --> 00:29:41.420
class of our choosing.

00:29:41.420 --> 00:29:43.686
So here we have a predefined
class, gdata.contentfor

00:29:43.686 --> 00:29:44.936
shopping.data.co
ntentforshoppingerrors.

00:29:48.430 --> 00:29:51.770
And so we get a list of errors
as we saw on the last slide,

00:29:51.770 --> 00:29:53.820
which was just a list
of those two errors

00:29:53.820 --> 00:29:57.830
for price and condition.

00:29:57.830 --> 00:30:01.300
That assumes your system knows
what's happening and can

00:30:01.300 --> 00:30:03.580
actually deal with the
errors in real time.

00:30:03.580 --> 00:30:07.240
Well, what happens if all of a
sudden you're going along, you

00:30:07.240 --> 00:30:10.660
have 5% failure rate, you're
dealing with it and then next

00:30:10.660 --> 00:30:13.500
thing you know, 80% of your
requests are failing.

00:30:13.500 --> 00:30:14.550
This can happen.

00:30:14.550 --> 00:30:17.450
Sometimes you can have a
recommended attribute all of a

00:30:17.450 --> 00:30:19.400
sudden become a required
attribute.

00:30:19.400 --> 00:30:23.410
And now those warnings, as you
didn't send a recommended

00:30:23.410 --> 00:30:26.210
attribute, will become
actual errors.

00:30:26.210 --> 00:30:30.250
So if you don't have some way
to account for this in your

00:30:30.250 --> 00:30:31.200
system, what do you do?

00:30:31.200 --> 00:30:33.180
If you're not logging it,
you just don't know

00:30:33.180 --> 00:30:35.250
what's going on, right?

00:30:35.250 --> 00:30:37.850
Well, we actually offer
something called the Debugging

00:30:37.850 --> 00:30:41.000
Dashboard, which will allow you
to retrospectively look

00:30:41.000 --> 00:30:43.040
back at all these requests
and figure out

00:30:43.040 --> 00:30:44.150
what the issues were.

00:30:44.150 --> 00:30:47.330
So here I am on the API
Dashboard for Joe's Widgets,

00:30:47.330 --> 00:30:49.590
and we see some possible
errors.

00:30:49.590 --> 00:30:52.900
So we see you didn't send a
required attribute, or you

00:30:52.900 --> 00:30:55.640
tried to delete something that
wasn't found, or update that

00:30:55.640 --> 00:30:57.620
something that wasn't found.

00:30:57.620 --> 00:31:02.070
And what's more, we actually
provide sample requests that

00:31:02.070 --> 00:31:03.510
will result in these errors.

00:31:03.510 --> 00:31:07.280
For example, item is missing or
required attribute, I see

00:31:07.280 --> 00:31:10.480
the body of the request that I
sent and the response that I

00:31:10.480 --> 00:31:12.600
got in return, so it's
the same error.

00:31:12.600 --> 00:31:14.250
Condition and price
are missing.

00:31:14.250 --> 00:31:15.090
OK?

00:31:15.090 --> 00:31:18.860
So what's more, we can fix this
within this dashboard by

00:31:18.860 --> 00:31:21.230
using the Replay Request
functionality.

00:31:21.230 --> 00:31:24.470
So if I want to replay this
request, let's not change it.

00:31:24.470 --> 00:31:26.330
I have the same body
that was sent.

00:31:26.330 --> 00:31:29.000
Let's replay it and
see what happens.

00:31:29.000 --> 00:31:33.330
OK, so I click Replay Request,
we scroll down, and we see the

00:31:33.330 --> 00:31:36.570
same error message, an account
of the areas that we have.

00:31:36.570 --> 00:31:40.390
Condition, item is missing from
a required attribute.

00:31:40.390 --> 00:31:43.070
Price, this item is
missing, right?

00:31:43.070 --> 00:31:45.670
OK, so let's add in condition.

00:31:45.670 --> 00:31:49.590
We can actually edit the request
within this dashboard

00:31:49.590 --> 00:31:51.230
to fix our bug.

00:31:51.230 --> 00:31:54.050
So let's say it's new.

00:31:54.050 --> 00:31:56.630
I'm adding in this new
condition, and let's replay

00:31:56.630 --> 00:31:57.920
that request.

00:31:57.920 --> 00:32:01.060
OK, our error count has gone
down from two to one, but we

00:32:01.060 --> 00:32:03.670
still are missing price, the
last required attribute.

00:32:03.670 --> 00:32:08.340
So I'm going to add that in now,
scp price, with a unit of

00:32:08.340 --> 00:32:15.070
US dollars, and a value of
25, and see what happens.

00:32:15.070 --> 00:32:17.990
So let's replay this request.

00:32:17.990 --> 00:32:19.430
OK, we have success.

00:32:19.430 --> 00:32:23.560
And rather than this error
response, we get back the

00:32:23.560 --> 00:32:27.000
response that we expect, this
automated response containing

00:32:27.000 --> 00:32:31.200
the similar data from
the request.

00:32:31.200 --> 00:32:33.900
One last thing I want to note
about this tool is they're

00:32:33.900 --> 00:32:35.940
being sent in dry run mode.

00:32:35.940 --> 00:32:36.960
So what does this mean?

00:32:36.960 --> 00:32:40.200
If this bug, if this error
occurred two weeks ago, and

00:32:40.200 --> 00:32:43.870
then I fix it with some dummy
data like I just did here,

00:32:43.870 --> 00:32:47.590
well, I don't want to actually
officially insert that

00:32:47.590 --> 00:32:49.650
product, this two-week-old
data, right?

00:32:49.650 --> 00:32:52.120
That would be bad for my account
and it would be bad

00:32:52.120 --> 00:32:54.840
for the users who go to buy this
product, which actually

00:32:54.840 --> 00:32:56.540
is based on old data.

00:32:56.540 --> 00:33:00.750
So this runs in dry run mode,
meaning the server, the API

00:33:00.750 --> 00:33:03.760
server, will check whether
it's good or not.

00:33:03.760 --> 00:33:06.620
And it'll tell you if you did it
if you did it right, if it

00:33:06.620 --> 00:33:09.400
validates, but it won't actually
make the persistent

00:33:09.400 --> 00:33:10.720
update to your database.

00:33:10.720 --> 00:33:16.320
So that's a almost necessary
feature of this replay request

00:33:16.320 --> 00:33:17.860
feature in the debug
dashboard.

00:33:21.250 --> 00:33:22.160
Those were errors.

00:33:22.160 --> 00:33:24.120
And these are things that
are very clear,

00:33:24.120 --> 00:33:25.310
what's going to occur.

00:33:25.310 --> 00:33:28.350
But like I said in that Debug
Dashboard, you could have some

00:33:28.350 --> 00:33:31.220
things that all of a sudden
used to be recommendations

00:33:31.220 --> 00:33:32.650
that become requirements.

00:33:32.650 --> 00:33:37.910
And before they become errors,
they may have been warnings.

00:33:37.910 --> 00:33:42.020
Like I showed in the demo tool,
you can actually specify

00:33:42.020 --> 00:33:46.110
a warnings parameter and get
back warnings to again improve

00:33:46.110 --> 00:33:47.300
the quality of your data.

00:33:47.300 --> 00:33:50.620
And it's as simple as taking
that post request, not

00:33:50.620 --> 00:33:53.800
changing the authentication
token that you're signing it

00:33:53.800 --> 00:33:57.020
with, not changing the content
type, but simply appending the

00:33:57.020 --> 00:33:59.060
warnings query parameter
to the end of the

00:33:59.060 --> 00:34:01.340
string of the URI.

00:34:01.340 --> 00:34:05.040
And what you'll get in return in
the app control element of

00:34:05.040 --> 00:34:07.990
the entry that gets returned,
you'll get a Warnings block

00:34:07.990 --> 00:34:10.960
containing a list of warnings,
which will give you things

00:34:10.960 --> 00:34:13.020
like, hey, you're missing
a recommended

00:34:13.020 --> 00:34:14.480
attribute like brand.

00:34:14.480 --> 00:34:15.520
And what's the message.

00:34:15.520 --> 00:34:18.520
We recommend including
this attribute.

00:34:18.520 --> 00:34:22.340
Again, our client libraries
support this feature.

00:34:22.340 --> 00:34:24.969
You can access these warnings
very simply.

00:34:24.969 --> 00:34:27.830
For example, in Python, when
you're doing this insert

00:34:27.830 --> 00:34:32.560
request, you can simply send the
warnings keyword parameter

00:34:32.560 --> 00:34:35.310
and specify the Boolean
value of true.

00:34:35.310 --> 00:34:39.190
And that will notify the client,
the client object,

00:34:39.190 --> 00:34:42.350
that it needs to add on that
warnings query parameter to

00:34:42.350 --> 00:34:46.270
the end of the URI when it's
making the request to the API.

00:34:46.270 --> 00:34:49.929
And what you'll receive in
return, in the control

00:34:49.929 --> 00:34:53.639
attribute of the returned value
inserted product, you'll

00:34:53.639 --> 00:34:55.929
again have a sub-attribute
called warnings.

00:34:55.929 --> 00:34:58.800
And this mimics the
exact structure of

00:34:58.800 --> 00:35:00.190
the XML that we saw.

00:35:00.190 --> 00:35:02.000
The inserted product
is the entry.

00:35:02.000 --> 00:35:04.320
The control is that app
control element.

00:35:04.320 --> 00:35:05.800
And then, finally,
warnings is that

00:35:05.800 --> 00:35:07.760
sub-element with an app control.

00:35:07.760 --> 00:35:10.470
You can loop through these
warnings and print out the

00:35:10.470 --> 00:35:13.260
code, the domain, the location,
and the message.

00:35:13.260 --> 00:35:16.160
So if we would have done that
for the warnings we saw on the

00:35:16.160 --> 00:35:19.050
previous slide, we'd see
something like this.

00:35:19.050 --> 00:35:21.360
We are missing a recommended
attribute.

00:35:21.360 --> 00:35:23.080
That attribute is brand.

00:35:23.080 --> 00:35:23.990
And what's the message?

00:35:23.990 --> 00:35:26.630
We don't recommend including
this attribute.

00:35:26.630 --> 00:35:29.520
So you can use things like this
in your implementation to

00:35:29.520 --> 00:35:32.630
actually find out when changes
are going to occur, or how you

00:35:32.630 --> 00:35:33.950
can actually improve.

00:35:33.950 --> 00:35:36.110
If it's a recommended attribute,
it's recommended

00:35:36.110 --> 00:35:37.000
for a reason.

00:35:37.000 --> 00:35:40.740
This data actually will help
your users and the people

00:35:40.740 --> 00:35:44.620
shopping for your data
on Google Shopping.

00:35:47.730 --> 00:35:50.400
Finally, after we've talked
about errors and then

00:35:50.400 --> 00:35:54.120
warnings, there's actually a
third type of, not really

00:35:54.120 --> 00:35:58.310
error nor warning, that's
actually quite relevant to

00:35:58.310 --> 00:35:59.390
your product data.

00:35:59.390 --> 00:36:00.960
And I'm just going to
call that an issue

00:36:00.960 --> 00:36:03.360
for the time being.

00:36:03.360 --> 00:36:04.330
What are these issues?

00:36:04.330 --> 00:36:06.240
These issues are things
that aren't

00:36:06.240 --> 00:36:07.880
caught during your request.

00:36:07.880 --> 00:36:10.860
They're not bad enough so that
your request gets rejected and

00:36:10.860 --> 00:36:13.690
errors are returned, and they're
not glaring enough to

00:36:13.690 --> 00:36:16.540
be included in this warnings
block even in the case of a

00:36:16.540 --> 00:36:17.710
successful request.

00:36:17.710 --> 00:36:18.560
So what are they?

00:36:18.560 --> 00:36:22.830
First, your landing page
could be unavailable.

00:36:22.830 --> 00:36:25.780
In order to keep the API fast,
we're not going to take your

00:36:25.780 --> 00:36:29.120
data, go check if the landing
page for the product is

00:36:29.120 --> 00:36:32.520
available and working, and then
come back and service

00:36:32.520 --> 00:36:34.420
your request and give
you the response.

00:36:34.420 --> 00:36:37.630
Rather, we'll just validate the
data, make sure it fits a

00:36:37.630 --> 00:36:39.400
certain number of
qualifications, and then we'll

00:36:39.400 --> 00:36:40.380
give you your response.

00:36:40.380 --> 00:36:42.100
And this keeps it fast, right?

00:36:42.100 --> 00:36:44.810
But we do want to go to
your web page and

00:36:44.810 --> 00:36:45.790
find out if it's working.

00:36:45.790 --> 00:36:47.590
Because, again, if
somebody finds a

00:36:47.590 --> 00:36:49.235
product in product search--

00:36:49.235 --> 00:36:51.290
excuse me, in Google
Shopping--

00:36:51.290 --> 00:36:54.870
and they then try to go to a
page that doesn't work, that's

00:36:54.870 --> 00:36:57.930
a terrible experience for
them and may harm their

00:36:57.930 --> 00:37:01.030
relationship with you further
down the road when they're

00:37:01.030 --> 00:37:03.300
shopping for other products.

00:37:03.300 --> 00:37:06.500
In addition, there are things
like trademark violations,

00:37:06.500 --> 00:37:10.070
which you can't detect possibly
in 500 seconds, but

00:37:10.070 --> 00:37:12.580
you can do this machine
processing that Mayuresh was

00:37:12.580 --> 00:37:15.800
talking about earlier to
actually find these out, and

00:37:15.800 --> 00:37:19.180
find out where a trademark
might be infringed upon.

00:37:19.180 --> 00:37:23.070
Another possible example,
similar to this trademark

00:37:23.070 --> 00:37:23.990
violation, is your

00:37:23.990 --> 00:37:26.140
categorization of your product.

00:37:26.140 --> 00:37:28.670
It's possible that you've
called some

00:37:28.670 --> 00:37:30.500
electronics a shoe.

00:37:30.500 --> 00:37:33.160
And obviously someone who's
searching for electronics

00:37:33.160 --> 00:37:36.250
doesn't want to find shoes,
unless they're Back to the

00:37:36.250 --> 00:37:38.200
Future-style shoes
that can actually

00:37:38.200 --> 00:37:39.600
tie themselves, right?

00:37:39.600 --> 00:37:42.360
They're actual electronics.

00:37:42.360 --> 00:37:45.930
This is something that within a
few hundred milliseconds we

00:37:45.930 --> 00:37:49.050
can't detect, but after actually
going through the

00:37:49.050 --> 00:37:52.800
data and doing some high level
machine processing, we can do

00:37:52.800 --> 00:37:55.130
a decent job categorizing
the product.

00:37:55.130 --> 00:37:57.830
We can find out if you've
done it incorrectly.

00:37:57.830 --> 00:38:01.060
And finally, an issue, which
is really an umbrella of

00:38:01.060 --> 00:38:03.790
issues, is that the data
you've submitted has a

00:38:03.790 --> 00:38:06.740
discrepancy with the actual
data on your site.

00:38:06.740 --> 00:38:10.220
So, for example, the price is
incorrect, or the description

00:38:10.220 --> 00:38:13.030
is incorrect, or maybe
the color is wrong.

00:38:13.030 --> 00:38:16.410
These sort of discrepancies,
again, reduce the quality of

00:38:16.410 --> 00:38:18.920
the experience for your shoppers
and the users of

00:38:18.920 --> 00:38:20.630
Google Shopping.

00:38:20.630 --> 00:38:22.180
So what can you do about this?

00:38:22.180 --> 00:38:25.760
How can you identify these
issues and improve the quality

00:38:25.760 --> 00:38:27.680
of your data?

00:38:27.680 --> 00:38:32.740
As some might know, we have data
quality dashboard in the

00:38:32.740 --> 00:38:33.510
Merchant Center.

00:38:33.510 --> 00:38:37.810
But what if you're using the
API and you never go to the

00:38:37.810 --> 00:38:38.470
Merchant Center.

00:38:38.470 --> 00:38:40.940
Or, what if you're a marketplace
and you have

00:38:40.940 --> 00:38:42.170
hundreds of sub-sellers.

00:38:42.170 --> 00:38:46.450
Well, you can't go to the data
quality API for hundreds of

00:38:46.450 --> 00:38:50.070
sub-sellers to analyze
what's going on.

00:38:50.070 --> 00:38:52.960
Instead, we have the
data quality API.

00:38:52.960 --> 00:38:56.370
And this is a service very
similar to the items service

00:38:56.370 --> 00:38:59.460
that we talked about earlier,
which will allow you to get

00:38:59.460 --> 00:39:03.540
these data quality reports
programmatically through the

00:39:03.540 --> 00:39:05.490
API, and it's very similar.

00:39:05.490 --> 00:39:08.680
It's structured XML as
we'll see shortly.

00:39:08.680 --> 00:39:11.480
And this is a supplement
to errors and warnings.

00:39:11.480 --> 00:39:13.580
This is sort of the second
stage error.

00:39:13.580 --> 00:39:16.920
These issues that happened that
maybe aren't detected as

00:39:16.920 --> 00:39:19.610
errors, maybe aren't detected
as warnings, but really are

00:39:19.610 --> 00:39:22.660
huge issues for the quality
of your data.

00:39:22.660 --> 00:39:25.970
So in order to get this report
back, we don't have to worry

00:39:25.970 --> 00:39:27.880
about posts or puts
or deletes.

00:39:27.880 --> 00:39:29.530
We're not actually changing
any data.

00:39:29.530 --> 00:39:31.050
We're just retrieving data.

00:39:31.050 --> 00:39:35.770
So we make a get request, get,
the HTTP verb, corresponding

00:39:35.770 --> 00:39:37.170
to retrieval.

00:39:37.170 --> 00:39:39.500
We start off with the same
similar boilerplate,

00:39:39.500 --> 00:39:46.040
content.googleap
is.com/content/v1, and then

00:39:46.040 --> 00:39:48.630
after v1 we include
an account ID.

00:39:48.630 --> 00:39:51.320
Now, if you don't have a
multi-client account, this

00:39:51.320 --> 00:39:52.970
could just be your account.

00:39:52.970 --> 00:39:55.340
But if this is a multi-client
account, this would

00:39:55.340 --> 00:39:56.530
be the parent ID.

00:39:56.530 --> 00:39:59.350
And then after that, we include
data quality, and that

00:39:59.350 --> 00:40:02.450
identifies the service
within the API that

00:40:02.450 --> 00:40:03.580
we're trying to reach.

00:40:03.580 --> 00:40:06.340
And then we include another
account ID.

00:40:06.340 --> 00:40:09.010
And now, again, if you're just
a single account, you'll just

00:40:09.010 --> 00:40:12.100
repeat the first value, but in
the case of a multi-client

00:40:12.100 --> 00:40:14.660
account where you're trying to
retrieve the report for one of

00:40:14.660 --> 00:40:18.240
your some accounts, you would
make that a sub-account.

00:40:18.240 --> 00:40:20.660
And then, of course, you're
signing it the same way, and

00:40:20.660 --> 00:40:22.930
we're still requesting XML.

00:40:22.930 --> 00:40:26.020
We know that the response we get
from Google will be XML,

00:40:26.020 --> 00:40:30.010
so we identify the content
type in the same fashion.

00:40:30.010 --> 00:40:34.060
So what will the response look
like from this request.

00:40:34.060 --> 00:40:36.080
As I mentioned, it's XML.

00:40:36.080 --> 00:40:39.490
It's going to be an entry just
like products are, but in that

00:40:39.490 --> 00:40:41.320
entry, the data looks
a bit different.

00:40:41.320 --> 00:40:44.830
I have commented out stuff
with this dot, dot, dot.

00:40:44.830 --> 00:40:48.010
We have similar things like
title, published, edited,

00:40:48.010 --> 00:40:52.230
these links, but the actual
report comes within this

00:40:52.230 --> 00:40:53.920
element issue groups.

00:40:53.920 --> 00:40:57.040
This is a list of issue groups
with some identifying

00:40:57.040 --> 00:41:00.220
information like the country,
and the ID of the issue, the

00:41:00.220 --> 00:41:04.270
ID here, US price mismatch.

00:41:04.270 --> 00:41:07.900
And then within that, we
actually have specific issues.

00:41:07.900 --> 00:41:11.390
The sample I have here has
an ID of price mismatch.

00:41:11.390 --> 00:41:14.460
And it also has the time it was
last checked by Google.

00:41:14.460 --> 00:41:19.080
So it was last checked, it
actually tells you a time when

00:41:19.080 --> 00:41:22.020
the discrepancy, the price
mismatch, occurred.

00:41:22.020 --> 00:41:24.320
And then finally, it tells you
the number of items that you

00:41:24.320 --> 00:41:27.230
have which are suffering
from this issue.

00:41:27.230 --> 00:41:30.640
And then, what's more, we
actually include an example,

00:41:30.640 --> 00:41:33.360
so you can actually see
specifically what kinds of

00:41:33.360 --> 00:41:35.000
things are causing this issue.

00:41:35.000 --> 00:41:37.580
A price mismatch is
pretty clear how

00:41:37.580 --> 00:41:38.610
that would come about.

00:41:38.610 --> 00:41:40.860
This example, we have
the value on

00:41:40.860 --> 00:41:42.440
landing page attribute.

00:41:42.440 --> 00:41:45.940
So the value on landing
page 2.36.

00:41:45.940 --> 00:41:49.140
I'm going to guess since it's
a US price mismatch, that's

00:41:49.140 --> 00:41:54.420
probably $2.36, but it's 2.36
whatever the currency is.

00:41:54.420 --> 00:41:57.600
And the submitted value, the
value that was actually

00:41:57.600 --> 00:42:01.860
submitted to us via
the API, is 6.99.

00:42:01.860 --> 00:42:07.230
Obviously, someone would like to
know that the price is 2.36

00:42:07.230 --> 00:42:09.870
rather than when they come
through the search results and

00:42:09.870 --> 00:42:11.510
they see 6.99, right?

00:42:11.510 --> 00:42:12.710
So this is an issue.

00:42:12.710 --> 00:42:14.530
And this is something
you can address.

00:42:14.530 --> 00:42:17.160
And you could see, OK,
we have 57 items

00:42:17.160 --> 00:42:18.410
that we need to address.

00:42:21.500 --> 00:42:23.820
In summary, the data
quality tools you

00:42:23.820 --> 00:42:25.080
have at your disposal.

00:42:25.080 --> 00:42:28.300
First, errors, these errors you
can address immediately,

00:42:28.300 --> 00:42:31.350
or actually have an admin deal
with if you don't have a way

00:42:31.350 --> 00:42:33.200
to programmatically
deal with them.

00:42:33.200 --> 00:42:36.330
Next, warnings, this is a
great tool for you to

00:42:36.330 --> 00:42:39.420
continually improve your data
and listen to possible

00:42:39.420 --> 00:42:42.100
suggestions that we have
to make it better.

00:42:42.100 --> 00:42:45.860
Third, you debug dashboard, this
is huge in cases like I

00:42:45.860 --> 00:42:48.140
mentioned before where something
goes wrong and you

00:42:48.140 --> 00:42:49.450
weren't accounting for it.

00:42:49.450 --> 00:42:52.180
And, finally, as we just
discussed, the data quality

00:42:52.180 --> 00:42:57.210
API to get programmatic access
to a wonderful report that can

00:42:57.210 --> 00:43:00.350
help you improve things
that are caught

00:43:00.350 --> 00:43:02.400
after the initial request.

00:43:02.400 --> 00:43:06.750
So with that I'm going
to conclude the talk.

00:43:06.750 --> 00:43:10.850
The demo tool I demo'd can be
accessed online by any of you,

00:43:10.850 --> 00:43:12.450
and you go through
the same thing.

00:43:12.450 --> 00:43:14.657
Our documentation, it can be
found on developers.googl

00:43:14.657 --> 00:43:17.880
e.com/shopping-content.

00:43:17.880 --> 00:43:20.970
If you'd like these links,
they'll be in the description

00:43:20.970 --> 00:43:22.340
of the YouTube video.

00:43:22.340 --> 00:43:24.870
If you'd like to go get them
right now, this slide deck is

00:43:24.870 --> 00:43:31.770
public on the web at
goo.gl/t5wZp as you can see

00:43:31.770 --> 00:43:32.550
right here.

00:43:32.550 --> 00:43:34.150
And these links are
in the slide

00:43:34.150 --> 00:43:36.380
deck for you to retrieve.

00:43:36.380 --> 00:43:41.770
Again, that's goo.gl/t5wZp.

00:43:41.770 --> 00:43:46.460
I want to thank you for coming
today and I hope you enjoyed

00:43:46.460 --> 00:43:47.710
this discussion.

