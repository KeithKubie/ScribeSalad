WEBVTT
Kind: captions
Language: en

00:00:11.952 --> 00:00:14.780
BRETT LIDER: Hey, everyone.

00:00:14.780 --> 00:00:17.990
We're here to talk about Android
Wear, and the always-on screen,

00:00:17.990 --> 00:00:19.260
and your apps.

00:00:19.260 --> 00:00:20.320
So I'm Brett Lider.

00:00:20.320 --> 00:00:22.310
I'm the Design Lead
for Android Wear.

00:00:22.310 --> 00:00:24.430
And this is David Singleton,
the Engineering Lead.

00:00:27.250 --> 00:00:31.090
[APPLAUSE]

00:00:31.090 --> 00:00:32.700
All right.

00:00:32.700 --> 00:00:35.270
Android Wear has had
an always-on screen

00:00:35.270 --> 00:00:37.510
from our launch a year ago.

00:00:37.510 --> 00:00:40.140
It tells you the time
in the active mode.

00:00:40.140 --> 00:00:41.750
It also has this
low power ambient

00:00:41.750 --> 00:00:43.219
mode for showing you the time.

00:00:43.219 --> 00:00:44.760
It's also really
great at showing you

00:00:44.760 --> 00:00:47.020
your most important
notifications, such as Jeff,

00:00:47.020 --> 00:00:48.970
who you probably saw in
the keynote yesterday.

00:00:48.970 --> 00:00:51.680
He's trying to get in touch
with us for plans later tonight.

00:00:51.680 --> 00:00:53.490
So I can wake the watch back up.

00:00:53.490 --> 00:00:55.489
I can interact with
this notification.

00:00:55.489 --> 00:00:57.030
But as app developers,
you could also

00:00:57.030 --> 00:00:59.430
deliver powerful
user experiences

00:00:59.430 --> 00:01:04.720
using these notifications, such
as controlling your home stereo

00:01:04.720 --> 00:01:07.040
or navigating the real world.

00:01:07.040 --> 00:01:09.890
So that's the always-on
screen as it exists today.

00:01:09.890 --> 00:01:13.180
But we're here today to talk
about the always-on app.

00:01:13.180 --> 00:01:15.560
And so before we get
too deep into that,

00:01:15.560 --> 00:01:17.420
I want to set a little
context around what

00:01:17.420 --> 00:01:21.260
it means for us, as people,
writing things down and having

00:01:21.260 --> 00:01:23.060
an easy way to reference that.

00:01:23.060 --> 00:01:28.410
So let's take a big step back
actually, 5,000 years back.

00:01:28.410 --> 00:01:30.850
So the Mesopotamians first
started writing things down

00:01:30.850 --> 00:01:33.410
on clay tablets for
ease of reference.

00:01:33.410 --> 00:01:36.100
And actually, that's what kind
of kicked off civilization.

00:01:36.100 --> 00:01:38.460
So the ability to write
something down, and refer to it

00:01:38.460 --> 00:01:41.020
or show it to someone else
was a really powerful,

00:01:41.020 --> 00:01:42.280
enabling technology.

00:01:42.280 --> 00:01:43.590
But it had some downsides.

00:01:43.590 --> 00:01:44.910
A clay tablet is heavy.

00:01:44.910 --> 00:01:45.680
It's brittle.

00:01:45.680 --> 00:01:47.260
You can only write on it once.

00:01:47.260 --> 00:01:48.690
So we're humanity.

00:01:48.690 --> 00:01:49.440
We work on things.

00:01:49.440 --> 00:01:50.520
We make them better.

00:01:50.520 --> 00:01:52.770
And so fast forward a
couple thousand years,

00:01:52.770 --> 00:01:54.370
and you have papyrus.

00:01:54.370 --> 00:01:55.790
So papyrus is flexible.

00:01:55.790 --> 00:01:57.110
It's much more portable.

00:01:57.110 --> 00:01:59.570
You can write on it with
ink, with multiple colors.

00:01:59.570 --> 00:02:00.840
But it still has some bugs.

00:02:00.840 --> 00:02:02.090
You can only write on it once.

00:02:02.090 --> 00:02:04.110
It's not accessible to all.

00:02:04.110 --> 00:02:05.920
It's not super flexible.

00:02:05.920 --> 00:02:07.952
So again, we work
on things as humans.

00:02:07.952 --> 00:02:09.910
And we're going to fast
forward through history

00:02:09.910 --> 00:02:13.780
a couple thousand more
years to the 20th century

00:02:13.780 --> 00:02:16.540
and the invention of
the cathode ray tube.

00:02:16.540 --> 00:02:18.030
So this is transformative.

00:02:18.030 --> 00:02:20.800
Having an electronic display
that you can put anything

00:02:20.800 --> 00:02:23.830
on really changed
things and allowed

00:02:23.830 --> 00:02:26.910
us to have lots of flexibility
in what we put on our screens,

00:02:26.910 --> 00:02:28.310
what we put on our displays.

00:02:28.310 --> 00:02:30.010
But again, downsides.

00:02:30.010 --> 00:02:30.750
It's heavy.

00:02:30.750 --> 00:02:31.500
It's bulky.

00:02:31.500 --> 00:02:33.160
It consumes a lot of power.

00:02:33.160 --> 00:02:35.270
And in the beginning,
they were very expensive.

00:02:35.270 --> 00:02:37.850
So we work on it some more.

00:02:37.850 --> 00:02:41.070
And we come up with the
segmented LCD display.

00:02:41.070 --> 00:02:42.650
This addresses a
lot of the issues

00:02:42.650 --> 00:02:46.670
that we talked about today in
terms of power and bulk, right?

00:02:46.670 --> 00:02:50.900
Segmented LCD displays--
really light, really

00:02:50.900 --> 00:02:53.540
portable, don't
consume much power.

00:02:53.540 --> 00:02:55.390
But they have a really
killer downside,

00:02:55.390 --> 00:02:57.474
which is when you're
designing the hardware,

00:02:57.474 --> 00:02:59.890
you have to think about all
the information you could ever

00:02:59.890 --> 00:03:03.110
want to put on the display and
bake that into the hardware.

00:03:03.110 --> 00:03:04.950
So very inflexible.

00:03:04.950 --> 00:03:08.149
So that's what brings us to
the present day with Android

00:03:08.149 --> 00:03:10.190
Wear and the always-on
screen where you basically

00:03:10.190 --> 00:03:12.900
have all the things that you
could want in a single device,

00:03:12.900 --> 00:03:18.520
portability-- I'll get into
that in a second, sorry.

00:03:18.520 --> 00:03:20.380
So let's look at the timeline.

00:03:20.380 --> 00:03:24.040
We've had 5,000 years
of display technology.

00:03:24.040 --> 00:03:27.520
And always-on has actually been
the vast majority of that time.

00:03:27.520 --> 00:03:30.780
So let's zoom in to the far
right of the timeline here.

00:03:30.780 --> 00:03:33.330
And you can see that
occasionally-on screens,

00:03:33.330 --> 00:03:35.940
electronic screens,
have only been prevalent

00:03:35.940 --> 00:03:37.030
in the 20th century.

00:03:37.030 --> 00:03:39.370
The screen, that's your
tablet or your phone,

00:03:39.370 --> 00:03:40.900
that you take out
of your pocket.

00:03:40.900 --> 00:03:43.600
And you have to go and
grab it, and turn it on.

00:03:43.600 --> 00:03:46.710
That's actually not been the
case for a really long time.

00:03:46.710 --> 00:03:50.210
And so we're finally at the
beginning of the always-on era.

00:03:50.210 --> 00:03:52.960
And so that regrettable period
without always-on display

00:03:52.960 --> 00:03:55.710
is behind us.

00:03:55.710 --> 00:03:57.140
And so now we do have our list.

00:03:57.140 --> 00:04:00.810
We basically have color for
flexibility and expressiveness.

00:04:00.810 --> 00:04:03.350
We have pixels to
display whatever we

00:04:03.350 --> 00:04:05.270
want to display on this screen.

00:04:05.270 --> 00:04:08.440
We have touch interaction so
users can manipulate and act

00:04:08.440 --> 00:04:10.180
on whatever they're looking at.

00:04:10.180 --> 00:04:12.120
And we have low power
so the display can stay

00:04:12.120 --> 00:04:15.930
on all the time and all day.

00:04:15.930 --> 00:04:18.060
And so to show us what
we can do with that,

00:04:18.060 --> 00:04:20.960
we've got David to demo
the Android TV remote.

00:04:20.960 --> 00:04:22.210
DAVID SINGLETON: Thanks Brett.

00:04:22.210 --> 00:04:24.090
So hopefully that's
given you a flavor

00:04:24.090 --> 00:04:27.710
of why always-on
displays are important.

00:04:27.710 --> 00:04:31.230
Let's take a look at a real life
example of an application that

00:04:31.230 --> 00:04:33.370
is using the always-on
feature that we just

00:04:33.370 --> 00:04:35.600
introduced in Android Wear.

00:04:35.600 --> 00:04:39.970
So last year at I/O, we demoed
the Android TV Remote Control

00:04:39.970 --> 00:04:42.080
app, which is what
you can see up here.

00:04:42.080 --> 00:04:43.260
And it's really great.

00:04:43.260 --> 00:04:46.010
I've enjoyed using it, sitting
at home, controlling my TV

00:04:46.010 --> 00:04:47.344
from my watch.

00:04:47.344 --> 00:04:49.760
And it already makes great use
of contextual notifications

00:04:49.760 --> 00:04:50.385
in the streams.

00:04:50.385 --> 00:04:51.760
So I can just wake it up.

00:04:51.760 --> 00:04:52.860
Tap this card.

00:04:52.860 --> 00:04:54.860
And I'm going to go into
the Remote Control app,

00:04:54.860 --> 00:04:57.000
look at my TV in the
picture-in-picture.

00:04:57.000 --> 00:05:00.140
I can wake it up, can
swipe down to YouTube,

00:05:00.140 --> 00:05:02.100
and I can start playing
a video right there.

00:05:02.100 --> 00:05:06.370
So this is a great video that
I made of my ski holiday.

00:05:06.370 --> 00:05:08.034
Previously with
Android Wear, if I

00:05:08.034 --> 00:05:09.700
was watching this
video for a long time,

00:05:09.700 --> 00:05:11.530
my watch would
eventually timeout

00:05:11.530 --> 00:05:13.672
and you'd go back to the time.

00:05:13.672 --> 00:05:15.380
But with always on,
there's a better way.

00:05:15.380 --> 00:05:17.980
And what you can see here, the
latest version of the Android

00:05:17.980 --> 00:05:19.710
TV Remote app, we've
actually integrated

00:05:19.710 --> 00:05:21.960
the always-on feature set.

00:05:21.960 --> 00:05:25.250
So we're back in the
ambient low power state.

00:05:25.250 --> 00:05:27.450
You can see that the
TV remote is still

00:05:27.450 --> 00:05:28.767
running in the foreground.

00:05:28.767 --> 00:05:31.350
And it's decided to put the time
there in black and white mode

00:05:31.350 --> 00:05:33.090
so that I can still
see what time it is.

00:05:33.090 --> 00:05:35.390
And then, the great thing with a
real remote control, of course,

00:05:35.390 --> 00:05:36.223
is it's right there.

00:05:36.223 --> 00:05:38.900
So I can just pick it up if
I wanted to pause this video

00:05:38.900 --> 00:05:40.760
or move on to the next thing.

00:05:40.760 --> 00:05:45.590
And with the always-on
feature in the Android TV

00:05:45.590 --> 00:05:47.700
app that we've just
introduced, I can now wake it.

00:05:47.700 --> 00:05:49.570
I'm back in the remote control.

00:05:49.570 --> 00:05:52.280
And I can instantly pause
this video, fast forward,

00:05:52.280 --> 00:05:54.860
and skip on to something else.

00:05:54.860 --> 00:05:57.010
So this is a really
powerful feature

00:05:57.010 --> 00:05:59.640
for applications that
know that the user is

00:05:59.640 --> 00:06:01.730
engaged in an ongoing activity.

00:06:01.730 --> 00:06:04.800
And then when I'm done watching
video, all I have to do

00:06:04.800 --> 00:06:06.880
is tap on the screen again.

00:06:06.880 --> 00:06:08.160
I'm going to wake the watch.

00:06:08.160 --> 00:06:10.749
I can just press the
hardware key on the side.

00:06:10.749 --> 00:06:12.040
And I'm back at the watch face.

00:06:12.040 --> 00:06:14.550
Now I have a general
purpose smart watch again.

00:06:14.550 --> 00:06:16.190
So hopefully that's
given you a flavor

00:06:16.190 --> 00:06:20.560
of what you can do with this
feature using always-on.

00:06:20.560 --> 00:06:24.016
So let's switch
back to the slides.

00:06:24.016 --> 00:06:25.640
Now that you've seen
some of the power,

00:06:25.640 --> 00:06:27.056
let's take a look
at what you need

00:06:27.056 --> 00:06:30.230
to do to enable these features
in your own applications.

00:06:30.230 --> 00:06:33.665
So we've tried to make this as
simple as we possibly could.

00:06:33.665 --> 00:06:35.290
And there are just
a few simple changes

00:06:35.290 --> 00:06:37.870
you need to make to your
app to enable always-on.

00:06:37.870 --> 00:06:40.460
The first thing
you need to do is

00:06:40.460 --> 00:06:42.895
to take any activity
in your application

00:06:42.895 --> 00:06:45.180
that you want to remain
in the foreground

00:06:45.180 --> 00:06:47.970
when the watch goes into
the ambient low power mode,

00:06:47.970 --> 00:06:50.609
and have it extend
from WearableActivity.

00:06:50.609 --> 00:06:52.150
So this is a base
class that provides

00:06:52.150 --> 00:06:53.740
all this functionality.

00:06:53.740 --> 00:06:56.070
And then in your onCreate
method in that activity,

00:06:56.070 --> 00:06:58.120
you simply need to
call one method, which

00:06:58.120 --> 00:07:00.710
is called setAmbientEnabled.

00:07:00.710 --> 00:07:03.470
And now, your activity will
remain in the foreground

00:07:03.470 --> 00:07:07.120
when the watch goes into
its ambient low power mode.

00:07:07.120 --> 00:07:09.210
There are also three
important call backs

00:07:09.210 --> 00:07:11.001
that your activity
is going to get

00:07:11.001 --> 00:07:12.500
to let you know
what's going on here

00:07:12.500 --> 00:07:14.550
so that you can take
the appropriate action.

00:07:14.550 --> 00:07:18.210
The first two, I'll
share right now.

00:07:18.210 --> 00:07:20.880
The first one is
called onEnterAmbient.

00:07:20.880 --> 00:07:23.590
So this is called every
time that the watch

00:07:23.590 --> 00:07:27.550
is going from the high
power interactive mode

00:07:27.550 --> 00:07:31.187
into that low
power ambient mode.

00:07:31.187 --> 00:07:33.270
And you can see here, this
is a real code fragment

00:07:33.270 --> 00:07:35.952
from the Android TV Remote app.

00:07:35.952 --> 00:07:37.410
And you can see
what we're doing is

00:07:37.410 --> 00:07:41.250
we're going to set the
background color to black.

00:07:41.250 --> 00:07:43.530
We'll talk more about
that in a second.

00:07:43.530 --> 00:07:45.810
And we're also going to
update the rest of our UI

00:07:45.810 --> 00:07:46.960
to look different.

00:07:46.960 --> 00:07:49.320
Turn on the time in
that low power mode.

00:07:49.320 --> 00:07:51.070
The second one that
you need to know about

00:07:51.070 --> 00:07:53.190
is called onExitAmbient.

00:07:53.190 --> 00:07:57.230
So this is called when we move
from the low power ambient mode

00:07:57.230 --> 00:07:59.147
back into the interactive mode.

00:07:59.147 --> 00:08:00.855
And there, you just
reverse those changes

00:08:00.855 --> 00:08:03.739
that you made as you
went into Ambient mode.

00:08:03.739 --> 00:08:04.280
So that's it.

00:08:04.280 --> 00:08:06.200
That's all you need to
do to have your app be

00:08:06.200 --> 00:08:08.930
enabled for always-on.

00:08:08.930 --> 00:08:11.670
A couple little housekeeping
things you need to do

00:08:11.670 --> 00:08:15.000
as well as your code in
your Android manifest file,

00:08:15.000 --> 00:08:18.677
you need to ask for
permission to use wake clocks.

00:08:18.677 --> 00:08:21.260
You need to do this in both the
wearable and in the phone app,

00:08:21.260 --> 00:08:23.090
if you're not already
using wake clocks

00:08:23.090 --> 00:08:27.080
because the always-on
feature uses them internally.

00:08:27.080 --> 00:08:31.130
You also need to
request and optionally

00:08:31.130 --> 00:08:35.360
require support from the
Wearable Support Library.

00:08:35.360 --> 00:08:37.030
This is the library
that contains

00:08:37.030 --> 00:08:39.429
the definition of
that WearableActivity

00:08:39.429 --> 00:08:42.580
that I said that you
would move to extending.

00:08:42.580 --> 00:08:44.670
And that's it.

00:08:44.670 --> 00:08:47.840
So with that, we
have been working

00:08:47.840 --> 00:08:50.400
with a number of partners--
so developers that we've

00:08:50.400 --> 00:08:53.106
given slightly early
access to these APIs

00:08:53.106 --> 00:08:53.980
for a couple reasons.

00:08:53.980 --> 00:08:56.350
One, to make sure we've
designed and built APIs that

00:08:56.350 --> 00:08:58.300
work well and are
general purpose,

00:08:58.300 --> 00:09:01.570
and also to see what they did as
they brought always-on support

00:09:01.570 --> 00:09:04.820
to their applications in
order to distill some best

00:09:04.820 --> 00:09:07.370
practices, which we're going
to share with you today.

00:09:07.370 --> 00:09:09.640
So let's take a look at
a couple of examples.

00:09:09.640 --> 00:09:12.380
First of all, let's go shopping.

00:09:12.380 --> 00:09:15.750
So I'm in town
for I/O this week.

00:09:15.750 --> 00:09:17.404
But I live in London.

00:09:17.404 --> 00:09:19.070
I have lots of friends
in San Francisco.

00:09:19.070 --> 00:09:21.310
And every time that
I come into town,

00:09:21.310 --> 00:09:23.970
there are folks that want
all those British things that

00:09:23.970 --> 00:09:25.520
are really hard to
get hold of here.

00:09:25.520 --> 00:09:28.020
So I have this common use case.

00:09:28.020 --> 00:09:30.960
I make a list of
groceries to go by.

00:09:30.960 --> 00:09:34.230
I either make that on a piece of
paper or I put it on my phone.

00:09:34.230 --> 00:09:38.610
And then I take myself off
to the local supermarket.

00:09:38.610 --> 00:09:40.519
As I move around
the supermarket,

00:09:40.519 --> 00:09:43.060
it's kind of cumbersome to keep
getting my piece of paper out

00:09:43.060 --> 00:09:45.890
or to keep getting back into
the right app on my phone.

00:09:45.890 --> 00:09:48.230
So with Android Wear and
the always-on functionality,

00:09:48.230 --> 00:09:49.535
there's a better way.

00:09:49.535 --> 00:09:53.960
And one of our partners, Bring!,
have added always-on support

00:09:53.960 --> 00:09:55.100
to their shopping list app.

00:09:55.100 --> 00:09:56.980
So let's take a look
at how that works.

00:09:56.980 --> 00:09:58.850
Here I am at the watch face.

00:09:58.850 --> 00:10:01.090
I go ahead and tap
on the watch face,

00:10:01.090 --> 00:10:03.910
bring up the application
launcher, and start Bring!.

00:10:03.910 --> 00:10:06.460
I created that shopping
list before I left home.

00:10:06.460 --> 00:10:08.160
I can see I've got
three items to buy.

00:10:08.160 --> 00:10:10.540
I'll go ahead and tap into that.

00:10:10.540 --> 00:10:11.420
Open the list.

00:10:11.420 --> 00:10:13.260
And now I'm in their
shopping list activity.

00:10:13.260 --> 00:10:14.843
And this one is
enabled for always-on.

00:10:14.843 --> 00:10:17.250
So the first thing I need
to get is Swiss chocolate.

00:10:17.250 --> 00:10:17.920
Great.

00:10:17.920 --> 00:10:20.845
So let's walk off to
the Swiss chocolate.

00:10:20.845 --> 00:10:22.220
This is going to
take me a while.

00:10:22.220 --> 00:10:24.815
So before always-on,
my watch would probably

00:10:24.815 --> 00:10:26.940
have been back at the watch
face by the time that I

00:10:26.940 --> 00:10:28.370
got to the Swiss chocolate.

00:10:28.370 --> 00:10:30.400
But now, I can drop
my wrist, it'll

00:10:30.400 --> 00:10:33.200
go into that low
power ambient mode,

00:10:33.200 --> 00:10:35.070
and you can still
see, at a glance,

00:10:35.070 --> 00:10:37.140
that you need to go
get the chocolate.

00:10:37.140 --> 00:10:39.134
And also they've put
the time-on screen.

00:10:39.134 --> 00:10:39.800
So that's great.

00:10:39.800 --> 00:10:41.133
Let's walk off to the chocolate.

00:10:41.133 --> 00:10:42.060
I get there.

00:10:42.060 --> 00:10:43.820
I tap the screen to wake it up.

00:10:43.820 --> 00:10:45.530
I can tap one more
time to mark that I've

00:10:45.530 --> 00:10:46.990
got the Swiss chocolate.

00:10:46.990 --> 00:10:49.230
I can swipe, move
to the next item.

00:10:49.230 --> 00:10:50.570
English breakfast tea.

00:10:50.570 --> 00:10:53.370
Definitely hard to get great
tea here in San Francisco,

00:10:53.370 --> 00:10:54.900
but pretty easy back home.

00:10:54.900 --> 00:10:55.930
I can walk there again.

00:10:55.930 --> 00:10:56.730
I drop my wrist.

00:10:56.730 --> 00:10:57.990
It goes into ambient mode.

00:10:57.990 --> 00:11:01.740
I can still see, throughout that
whole interaction, what it is

00:11:01.740 --> 00:11:03.330
that I need to get at a glance.

00:11:03.330 --> 00:11:05.690
I get there, I tap the
screen, and mark it as done.

00:11:05.690 --> 00:11:09.260
So I've got one last
thing to get, Marmite.

00:11:09.260 --> 00:11:12.467
I hate Marmite, but I do
have friends that like it.

00:11:12.467 --> 00:11:14.050
And it's much easier
to get back home.

00:11:14.050 --> 00:11:15.395
So We'll walk there.

00:11:15.395 --> 00:11:16.270
We'll drop our wrist.

00:11:16.270 --> 00:11:17.560
We're in this low power mode.

00:11:17.560 --> 00:11:19.722
We can see it's still
Marmite we need to get.

00:11:19.722 --> 00:11:21.530
Get there.

00:11:21.530 --> 00:11:23.070
Mark it off the list.

00:11:23.070 --> 00:11:25.710
And then when I'm done
with all my shopping,

00:11:25.710 --> 00:11:26.929
I can close the app.

00:11:26.929 --> 00:11:28.220
And I'm back at the watch face.

00:11:28.220 --> 00:11:32.080
I have a completely general
purpose smart watch.

00:11:32.080 --> 00:11:33.275
So what's up next?

00:11:33.275 --> 00:11:34.150
I've got my shopping.

00:11:34.150 --> 00:11:35.410
I've packed my bags.

00:11:35.410 --> 00:11:37.090
I need to get off
to San Francisco.

00:11:37.090 --> 00:11:39.005
So let's board a plane.

00:11:42.330 --> 00:11:44.770
The way that I'm sure all of
us are used to doing this-- I

00:11:44.770 --> 00:11:46.320
show up at the
airport, I get given

00:11:46.320 --> 00:11:48.870
a piece of paper, very
important piece of paper,

00:11:48.870 --> 00:11:50.177
which I need to not forget.

00:11:50.177 --> 00:11:52.260
But I'm going to need to
pull it out several times

00:11:52.260 --> 00:11:53.550
as I move around the airport.

00:11:53.550 --> 00:11:54.610
I don't know about
you, but I find this

00:11:54.610 --> 00:11:56.030
a source of amazing anxiety.

00:11:56.030 --> 00:11:58.910
I keep losing my boarding pass,
tucking it inside my passport,

00:11:58.910 --> 00:12:00.630
putting it somewhere when
I'm going through security.

00:12:00.630 --> 00:12:02.220
But of course, mobile
boarding passes

00:12:02.220 --> 00:12:04.303
have made that a bit easier
because they're always

00:12:04.303 --> 00:12:05.020
in your phone.

00:12:05.020 --> 00:12:06.780
But how many times
have you found yourself

00:12:06.780 --> 00:12:09.120
getting to the front
of the line and you're

00:12:09.120 --> 00:12:10.574
busy looking at a web page.

00:12:10.574 --> 00:12:11.990
You're checking
your email, trying

00:12:11.990 --> 00:12:14.490
to do all those last things
before you get on your flight.

00:12:14.490 --> 00:12:16.850
And it's kind of cumbersome to
get back to the boarding pass.

00:12:16.850 --> 00:12:19.190
Well, with Android Wear and
the always-on functionality,

00:12:19.190 --> 00:12:21.060
there's a better way.

00:12:21.060 --> 00:12:24.460
So let's take a look at one
of the partners that have

00:12:24.460 --> 00:12:25.870
implemented this functionality.

00:12:25.870 --> 00:12:28.310
So I'll start on the watch face.

00:12:28.310 --> 00:12:30.540
I can launch the
American Airlines app.

00:12:30.540 --> 00:12:34.370
And here it goes directly
into the ticket for the flight

00:12:34.370 --> 00:12:35.776
that I'm about to take.

00:12:35.776 --> 00:12:37.400
I can see all the
details of the flight

00:12:37.400 --> 00:12:38.983
right there, including
went it departs

00:12:38.983 --> 00:12:42.590
and the gate number
that I need to go to.

00:12:42.590 --> 00:12:45.240
If I drop my wrist and start
moving around the airport,

00:12:45.240 --> 00:12:48.500
the watch is going to go
into low power ambient mode,

00:12:48.500 --> 00:12:50.917
but my ticket is still
right there on screen.

00:12:50.917 --> 00:12:52.500
And if the gate
changes, it'll update.

00:12:52.500 --> 00:12:53.767
And I can glance down at it.

00:12:53.767 --> 00:12:55.350
But probably what
I'm going to do next

00:12:55.350 --> 00:12:59.170
is try to actually board
and go through the gate.

00:12:59.170 --> 00:13:00.790
So I need that QR code.

00:13:00.790 --> 00:13:03.140
I can tap my watch face.

00:13:03.140 --> 00:13:05.600
I can do this amazing
fling gesture.

00:13:05.600 --> 00:13:08.140
I get to a QR code.

00:13:08.140 --> 00:13:10.310
And I can go ahead and
scan it at the gate.

00:13:10.310 --> 00:13:13.100
If I get busy and drop
my wrist in that time,

00:13:13.100 --> 00:13:15.910
it times out to this low
power ambient mode still

00:13:15.910 --> 00:13:17.460
showing the QR code.

00:13:17.460 --> 00:13:20.380
So that's pretty powerful.

00:13:20.380 --> 00:13:22.840
And now Brett's going to take
us through a couple more.

00:13:22.840 --> 00:13:24.190
BRETT LIDER: Sure.

00:13:24.190 --> 00:13:26.360
So the day of a
big talk like this,

00:13:26.360 --> 00:13:29.560
I like to go for a run in the
morning-- helps calm my nerves.

00:13:29.560 --> 00:13:33.250
So let's do that.

00:13:33.250 --> 00:13:34.750
A way that I might
do that today is

00:13:34.750 --> 00:13:37.490
that I would go out and buy
a fitness tracking watch.

00:13:37.490 --> 00:13:41.780
I would charge it, keep it
synced with my phone or laptop.

00:13:41.780 --> 00:13:43.487
So that's kind of a hassle.

00:13:43.487 --> 00:13:45.070
But I do want to
keep track of my run.

00:13:45.070 --> 00:13:47.680
So let's see if there's
another way I could do it.

00:13:47.680 --> 00:13:50.970
If I do want to look at my pace
and my distance as I'm running,

00:13:50.970 --> 00:13:53.070
I could carry my
phone in my hand.

00:13:53.070 --> 00:13:54.770
But I get really
sweaty when I run,

00:13:54.770 --> 00:13:57.000
which is probably
a common thing.

00:13:57.000 --> 00:13:59.809
And also, people running
with their phones-- at least,

00:13:59.809 --> 00:14:02.100
I feel like I look like a
big dork when I'm doing that.

00:14:02.100 --> 00:14:04.290
And whether or not
I am a big dork,

00:14:04.290 --> 00:14:06.450
I don't want to feel like one.

00:14:06.450 --> 00:14:09.386
So I don't think this is
a great solution either.

00:14:09.386 --> 00:14:11.760
So with Android Wear, we think
that there's a better way.

00:14:15.180 --> 00:14:16.440
I think we've lost the slides.

00:14:28.220 --> 00:14:29.490
Hold a moment, folks.

00:14:35.320 --> 00:14:35.830
All right.

00:14:35.830 --> 00:14:37.744
So I can launch
the Endomondo app

00:14:37.744 --> 00:14:39.160
just by tapping
on the watch face.

00:14:39.160 --> 00:14:41.660
Tap on Endomondo
from the app picker.

00:14:41.660 --> 00:14:43.509
And I'm in the Endomondo app.

00:14:43.509 --> 00:14:45.550
And all I have to do is
hit this big button here,

00:14:45.550 --> 00:14:47.045
and I'm recording my run.

00:14:52.460 --> 00:14:53.105
Next slide.

00:14:56.150 --> 00:14:56.960
Awesome.

00:14:56.960 --> 00:14:59.230
So I'm now tracking my run.

00:14:59.230 --> 00:15:01.550
The counter's going
to start incrementing

00:15:01.550 --> 00:15:02.420
as I start running.

00:15:02.420 --> 00:15:04.410
The distance will start
incrementing as well.

00:15:07.600 --> 00:15:09.250
Here's the time going up.

00:15:09.250 --> 00:15:11.870
And if I drop my
wrist or it times out,

00:15:11.870 --> 00:15:14.140
it's going to go into this
low power ambient mode

00:15:14.140 --> 00:15:17.389
and track my time and
distance about once a minute.

00:15:17.389 --> 00:15:19.180
The screen will update
about once a minute.

00:15:19.180 --> 00:15:23.550
And so at the end of my run,
as I'm tracking it as I go.

00:15:23.550 --> 00:15:24.830
I can wake the watch back up.

00:15:24.830 --> 00:15:26.630
And at the end of
the run, I've run

00:15:26.630 --> 00:15:28.860
for 30 minutes and 30 miles.

00:15:28.860 --> 00:15:30.530
And I can just save my run.

00:15:30.530 --> 00:15:34.170
So my watch was a dedicated
run tracking device.

00:15:34.170 --> 00:15:36.420
Now, it's back to being a
general purpose smart watch.

00:15:36.420 --> 00:15:38.510
So we're pretty
excited about that.

00:15:38.510 --> 00:15:40.080
I am at least.

00:15:40.080 --> 00:15:44.210
And then our next use case
would be a day like today.

00:15:44.210 --> 00:15:47.160
So at the end of I/O, after
watching all these talks,

00:15:47.160 --> 00:15:49.520
talking with all of you
guys, being up here on stage,

00:15:49.520 --> 00:15:50.780
I'm going to be really tired.

00:15:50.780 --> 00:15:52.240
I'm going to want to go home.

00:15:52.240 --> 00:15:56.040
And I won't want to have to
think about it very much.

00:15:56.040 --> 00:15:58.402
So what's a way that we
could do that, today?

00:15:58.402 --> 00:15:59.610
What's the way I would do it?

00:15:59.610 --> 00:16:01.026
I would probably
get out my phone.

00:16:01.026 --> 00:16:02.360
I would ask for navigation home.

00:16:02.360 --> 00:16:04.525
And I would walk around the
streets of San Francisco

00:16:04.525 --> 00:16:05.600
with my phone out.

00:16:05.600 --> 00:16:07.030
Now that has some downsides.

00:16:07.030 --> 00:16:08.185
I might bump into people.

00:16:08.185 --> 00:16:09.760
I might walk out into traffic.

00:16:09.760 --> 00:16:12.720
Someone might try to
take my phone away.

00:16:12.720 --> 00:16:14.866
So let's not do that.

00:16:14.866 --> 00:16:15.990
Let's do this a better way.

00:16:15.990 --> 00:16:19.700
So with Android Wear, I
can just launch Citymapper.

00:16:19.700 --> 00:16:21.830
And Citymapper's got this
great button that I love.

00:16:21.830 --> 00:16:23.020
Get Me Home.

00:16:23.020 --> 00:16:24.530
Yes.

00:16:24.530 --> 00:16:27.230
And it's telling me, oh, we
think the best way to get

00:16:27.230 --> 00:16:29.160
home is 25 minutes on BART.

00:16:29.160 --> 00:16:30.160
That sounds great to me.

00:16:30.160 --> 00:16:31.562
So let's just hit go.

00:16:31.562 --> 00:16:33.270
And immediately,
Citymapper just tells me

00:16:33.270 --> 00:16:34.600
everything I need to do.

00:16:34.600 --> 00:16:36.510
I need to walk to
Powell Street, BART.

00:16:36.510 --> 00:16:38.450
It's about nine minutes away.

00:16:38.450 --> 00:16:39.370
And here's a map.

00:16:39.370 --> 00:16:41.790
And here's the route.

00:16:41.790 --> 00:16:43.830
It's just all
there, right for me.

00:16:43.830 --> 00:16:45.230
So I can start walking.

00:16:45.230 --> 00:16:47.170
And the watch will
timeout to ambient,

00:16:47.170 --> 00:16:49.100
yet the information
that I need to know,

00:16:49.100 --> 00:16:51.800
the next actionable
step, stays on screen.

00:16:51.800 --> 00:16:55.500
And as I approach Powell
Street, BART and glance down

00:16:55.500 --> 00:16:57.780
at my wrist, it'll actually
update, and light up,

00:16:57.780 --> 00:17:00.040
and say, you want to
wait for this train,

00:17:00.040 --> 00:17:01.580
it's coming in three minutes.

00:17:01.580 --> 00:17:04.020
And again, after a few seconds,
it'll timeout to ambient,

00:17:04.020 --> 00:17:06.310
but City Mapper stays
on top to help guide me

00:17:06.310 --> 00:17:08.290
through my journey.

00:17:08.290 --> 00:17:11.500
I think someone who's used
this app just came out

00:17:11.500 --> 00:17:14.619
yesterday, told me it feels
like having a superpower walking

00:17:14.619 --> 00:17:16.480
through the city.

00:17:16.480 --> 00:17:18.349
In an unfamiliar city,
you can glance down

00:17:18.349 --> 00:17:20.290
and know where you need to go.

00:17:20.290 --> 00:17:21.670
It's pretty special.

00:17:21.670 --> 00:17:24.720
So when I'm done, I
can hit the Home button

00:17:24.720 --> 00:17:27.160
and be back to using
my watch for whatever

00:17:27.160 --> 00:17:28.089
I want to use it for.

00:17:30.860 --> 00:17:33.960
So thanks to Bring, American
Airlines, and Endomondo,

00:17:33.960 --> 00:17:37.430
City Mapper, Zillow,
Golf Shop Pro, Runtastic,

00:17:37.430 --> 00:17:42.760
and RunKeeper, KLM, Delta, and
Google Maps, and Google Keep.

00:17:42.760 --> 00:17:44.790
These are all app
developers that

00:17:44.790 --> 00:17:46.620
have tried to embrace
the always-on screen.

00:17:46.620 --> 00:17:49.760
And what they've been able
to do is transform their apps

00:17:49.760 --> 00:17:51.052
into an actual wearable device.

00:17:51.052 --> 00:17:52.468
And this is one
of the reasons why

00:17:52.468 --> 00:17:54.580
we're really excited about
the always-on screen.

00:17:54.580 --> 00:17:58.070
Android Wear has been really
good at keeping the time

00:17:58.070 --> 00:17:59.620
and giving you
your notifications,

00:17:59.620 --> 00:18:03.160
and allowing you to
take quick actions.

00:18:03.160 --> 00:18:04.350
People love it for that.

00:18:04.350 --> 00:18:06.849
But it can be so much more now
with the the always-on screen

00:18:06.849 --> 00:18:07.650
and always-on apps.

00:18:07.650 --> 00:18:09.750
So it can be this immersive
navigation experience,

00:18:09.750 --> 00:18:11.910
a fitness tracker
or a fitness coach.

00:18:11.910 --> 00:18:15.660
It can be a to-do list manager,
help you get things done.

00:18:15.660 --> 00:18:17.220
It can guide you
through your travel

00:18:17.220 --> 00:18:19.510
and help you control your home.

00:18:19.510 --> 00:18:22.336
So what you do
with it, we'd love

00:18:22.336 --> 00:18:23.710
to see because we
feel like we're

00:18:23.710 --> 00:18:25.940
at this point in
wearable evolution

00:18:25.940 --> 00:18:29.600
where, prior to this
date, if you had

00:18:29.600 --> 00:18:31.440
an idea for a
wearable experience,

00:18:31.440 --> 00:18:33.250
you would have had
to go out and hire

00:18:33.250 --> 00:18:35.340
hardware engineers,
mechanical designers,

00:18:35.340 --> 00:18:36.275
industrial designers.

00:18:36.275 --> 00:18:38.950
You'd probably have to do
some fundraising, maybe

00:18:38.950 --> 00:18:42.020
a crowdfunding campaign or
find investors, contract

00:18:42.020 --> 00:18:44.490
with an overseas manufacturer.

00:18:44.490 --> 00:18:46.720
That's a lot of time
and energy and effort

00:18:46.720 --> 00:18:50.870
just to even see if your idea,
a single purpose wearable idea,

00:18:50.870 --> 00:18:52.660
is going to have
traction in the market.

00:18:52.660 --> 00:18:55.270
Now with the always-on
screen and Android Wear,

00:18:55.270 --> 00:18:58.170
you basically have access to
the entire Android Wear supply

00:18:58.170 --> 00:18:59.170
chain.

00:18:59.170 --> 00:19:03.410
So all of our 7 devices today
and all of our devices to come

00:19:03.410 --> 00:19:06.780
can become your wearable
experience for users.

00:19:06.780 --> 00:19:10.110
So we're really excited to see
what you guys do with that.

00:19:10.110 --> 00:19:13.540
And to help you, we're going
to segway into best practices

00:19:13.540 --> 00:19:15.400
on the design and
engineering side.

00:19:15.400 --> 00:19:17.570
So we built-- and
this is actually

00:19:17.570 --> 00:19:20.330
in our documentation--
the sample stopwatch app.

00:19:20.330 --> 00:19:23.870
And on the left here, you see
the interactive high power

00:19:23.870 --> 00:19:24.370
mode.

00:19:24.370 --> 00:19:27.210
And on the right, you see
our low power ambient mode.

00:19:27.210 --> 00:19:29.290
And we're going to
talk about the design

00:19:29.290 --> 00:19:32.550
changes you want to make
between these two states.

00:19:32.550 --> 00:19:34.480
So it's pretty simple.

00:19:34.480 --> 00:19:36.660
The first is to, when you
transition to ambient,

00:19:36.660 --> 00:19:38.240
you want to use a
black and white.

00:19:38.240 --> 00:19:40.560
The two reasons for this
are that it saves power

00:19:40.560 --> 00:19:42.720
on the vast majority
of devices, and it's

00:19:42.720 --> 00:19:45.660
a strong visual cue to the
user that the device is now

00:19:45.660 --> 00:19:47.040
in this low power state.

00:19:47.040 --> 00:19:48.370
Pretty simple.

00:19:48.370 --> 00:19:51.590
Second, you want to display
the relevant time units.

00:19:51.590 --> 00:19:54.100
So this, again,
takes two flavors.

00:19:54.100 --> 00:19:56.250
Because you're in a
long lived session,

00:19:56.250 --> 00:19:59.230
the user might want to actually
know what the time of day is.

00:19:59.230 --> 00:20:02.450
So we've included that in the
ambient display of this app.

00:20:02.450 --> 00:20:04.600
Second is that since
the display updates

00:20:04.600 --> 00:20:06.190
only about once a
minute, if you're

00:20:06.190 --> 00:20:09.150
tracking time down to the
second, that doesn't quite

00:20:09.150 --> 00:20:09.770
make sense.

00:20:09.770 --> 00:20:13.565
And so you want to stop
keeping track of time

00:20:13.565 --> 00:20:15.190
down to the second
and keep track of it

00:20:15.190 --> 00:20:16.310
just down to the minute.

00:20:16.310 --> 00:20:19.390
So you can see that here, we're
counting up minute by minute.

00:20:22.290 --> 00:20:24.610
Third, you want to
remove any buttons that

00:20:24.610 --> 00:20:27.160
are on the display
in the ambient mode

00:20:27.160 --> 00:20:29.510
because tapping on the
watch face in ambient wakes

00:20:29.510 --> 00:20:30.500
up the display.

00:20:30.500 --> 00:20:33.750
And then, the user can
interact with the display.

00:20:33.750 --> 00:20:36.520
So remove buttons when
you're in ambient mode.

00:20:36.520 --> 00:20:39.990
And finally-- this only applies
to a small number of apps--

00:20:39.990 --> 00:20:42.480
but if there's any
information on the display

00:20:42.480 --> 00:20:46.060
that the user might not want to
have persist in ambient mode,

00:20:46.060 --> 00:20:48.912
just take it out as you
transition into ambient mode.

00:20:48.912 --> 00:20:51.370
So that's all you need to think
about from the design side.

00:20:51.370 --> 00:20:54.650
And let's hear from David
on development stuff.

00:20:54.650 --> 00:20:55.900
DAVID SINGLETON: Thanks Brett.

00:20:55.900 --> 00:20:58.020
So one of the most
important things

00:20:58.020 --> 00:21:01.230
to understand from a
development perspective

00:21:01.230 --> 00:21:05.010
is that, as we go into
low power ambient mode,

00:21:05.010 --> 00:21:07.000
we're actually doing
something pretty profound

00:21:07.000 --> 00:21:09.000
in order to save battery.

00:21:09.000 --> 00:21:11.790
And that is that we actually,
as much as we possibly can,

00:21:11.790 --> 00:21:14.635
turn off the CPU.

00:21:14.635 --> 00:21:15.510
It's pretty powerful.

00:21:15.510 --> 00:21:18.550
So while your application
is still in the foreground,

00:21:18.550 --> 00:21:20.360
the CPU is not running at all.

00:21:20.360 --> 00:21:22.660
And most of these
development best practices

00:21:22.660 --> 00:21:25.740
are about how you can
preserve that state so

00:21:25.740 --> 00:21:30.250
that you're really making best
use of the user's battery.

00:21:30.250 --> 00:21:33.780
So first thing to think
about is, as we said,

00:21:33.780 --> 00:21:35.770
it's important to be
efficient in ambient mode,

00:21:35.770 --> 00:21:39.050
it's also important to be
efficient in interactive mode

00:21:39.050 --> 00:21:42.350
because now your application
is in the foreground.

00:21:42.350 --> 00:21:45.840
It's essentially become the
home screen of the watch.

00:21:45.840 --> 00:21:48.420
And that means anytime the
user performs the wrist gesture

00:21:48.420 --> 00:21:51.065
in order to get into
interactive mode,

00:21:51.065 --> 00:21:52.690
it's going to be your
app right on top.

00:21:52.690 --> 00:21:55.100
That's really powerful
for you as a developer.

00:21:55.100 --> 00:21:57.350
But it also means
that you need to think

00:21:57.350 --> 00:21:59.310
about efficiency of
that mode just as much

00:21:59.310 --> 00:22:01.350
as you do the ambient mode.

00:22:01.350 --> 00:22:05.270
So for instance, this is not
the right time to grab some data

00:22:05.270 --> 00:22:06.996
and transmit it across
the Bluetooth link

00:22:06.996 --> 00:22:08.620
because spinning up
the Bluetooth radio

00:22:08.620 --> 00:22:09.990
uses a lot of power.

00:22:09.990 --> 00:22:11.920
This is probably also
not the right screen

00:22:11.920 --> 00:22:15.730
in your application to show
any videos or animations that

00:22:15.730 --> 00:22:17.820
run for a long time because
that's going to keep

00:22:17.820 --> 00:22:19.240
the CPU in high power mode.

00:22:19.240 --> 00:22:25.560
So be efficient in both
interactive and in ambient.

00:22:25.560 --> 00:22:27.270
The next best
practice is to choose

00:22:27.270 --> 00:22:29.740
the right approach for updates.

00:22:29.740 --> 00:22:33.730
So when you're in interactive
mode, we do turn off the CPU.

00:22:33.730 --> 00:22:36.377
But it is actually possible
to keep fresh information

00:22:36.377 --> 00:22:36.960
on the screen.

00:22:36.960 --> 00:22:39.293
And that's really important
so you can have a great user

00:22:39.293 --> 00:22:40.170
experience.

00:22:40.170 --> 00:22:41.836
But it is something
you're going to have

00:22:41.836 --> 00:22:43.880
to do to choose the right
approach of when you're

00:22:43.880 --> 00:22:45.464
going to make those updates.

00:22:45.464 --> 00:22:46.880
And the first thing
that you might

00:22:46.880 --> 00:22:49.960
need to do for your application
is not to update at all.

00:22:49.960 --> 00:22:51.710
So we saw a great
example with Bring!.

00:22:51.710 --> 00:22:52.940
I was shopping.

00:22:52.940 --> 00:22:54.800
The next thing that I
needed to go pick up

00:22:54.800 --> 00:22:58.470
was still the same until I
got there and woke up my watch

00:22:58.470 --> 00:22:59.980
and could say that I got it.

00:22:59.980 --> 00:23:01.710
So in the case of
an app like that,

00:23:01.710 --> 00:23:05.320
there's no need to update
the display in the low power

00:23:05.320 --> 00:23:06.302
ambient mode at all.

00:23:06.302 --> 00:23:07.010
And that's great.

00:23:07.010 --> 00:23:10.630
You're going to achieve
really great battery savings.

00:23:10.630 --> 00:23:14.340
And that's where I'd like to
encourage you to go if you can.

00:23:14.340 --> 00:23:16.160
Some other applications,
for instance,

00:23:16.160 --> 00:23:20.920
we looked at the boarding
pass for American Airlines.

00:23:20.920 --> 00:23:22.690
They might only need
to update the screen

00:23:22.690 --> 00:23:23.954
if something changes.

00:23:23.954 --> 00:23:25.370
So for instance,
the gate changes,

00:23:25.370 --> 00:23:26.720
the time to depart changes.

00:23:26.720 --> 00:23:29.290
We'll talk about that as well.

00:23:29.290 --> 00:23:32.770
Then other apps might actually
need more frequent updates.

00:23:32.770 --> 00:23:34.350
So let's take a look.

00:23:34.350 --> 00:23:37.210
So I mentioned the
possible best practice

00:23:37.210 --> 00:23:39.750
might be to update never.

00:23:39.750 --> 00:23:43.009
But if you do need to
update periodically,

00:23:43.009 --> 00:23:44.800
I mentioned that
WearableActivity gives you

00:23:44.800 --> 00:23:47.430
three callbacks, but I've
only shown you two so far.

00:23:47.430 --> 00:23:52.100
There's another one which
is called onUpdateAmbient.

00:23:52.100 --> 00:23:53.670
So we need to go
back a slide here.

00:23:53.670 --> 00:23:55.700
We think we've
skipped over a slide.

00:23:55.700 --> 00:23:57.810
Here we go. onUpdateAmbient.

00:23:57.810 --> 00:24:00.690
So this will be called
approximately once a minute

00:24:00.690 --> 00:24:04.680
to enable your application
to update the display.

00:24:04.680 --> 00:24:06.720
And you can go ahead,
invalidate your views,

00:24:06.720 --> 00:24:08.053
and have them redraw themselves.

00:24:11.150 --> 00:24:13.890
If you need to update
more frequently,

00:24:13.890 --> 00:24:16.240
that's also possible.

00:24:16.240 --> 00:24:19.330
Probably the best way to update
more frequently is on demand.

00:24:19.330 --> 00:24:22.150
So for instance, if
you have incoming data

00:24:22.150 --> 00:24:26.030
from the application that you
have running on the phone using

00:24:26.030 --> 00:24:30.470
the data APIs, then those will
actually cause the CPU to wake

00:24:30.470 --> 00:24:31.720
to handle the data.

00:24:31.720 --> 00:24:34.320
And that's a place where
you can update your UI.

00:24:34.320 --> 00:24:36.980
But if you remember
the Endomondo example,

00:24:36.980 --> 00:24:38.720
that was a kind of
long running activity,

00:24:38.720 --> 00:24:41.450
but where we wanted to maybe
tell the user how far they

00:24:41.450 --> 00:24:43.930
traveled or how many
calories they burned

00:24:43.930 --> 00:24:45.670
by updating periodically.

00:24:45.670 --> 00:24:49.460
So Android already has
a great set of APIs

00:24:49.460 --> 00:24:53.010
to enable you to wake up the
device, the phone, tablet,

00:24:53.010 --> 00:24:57.200
or watch, periodically
with Alarm Manager.

00:24:57.200 --> 00:24:58.960
And if you would
like to do that,

00:24:58.960 --> 00:25:02.860
you can set whatever kind of
frequency of call back to wake

00:25:02.860 --> 00:25:06.180
the device up and allow you
to redraw the ambient display.

00:25:06.180 --> 00:25:08.560
It's really important here
to read the documentation

00:25:08.560 --> 00:25:09.342
for Alarm Manager.

00:25:09.342 --> 00:25:11.550
There are a couple different
ways you can set alarms.

00:25:11.550 --> 00:25:13.880
And you need to use the
ones that end in _WAKEUP

00:25:13.880 --> 00:25:16.380
because those are the ones that
will actually start the CPU,

00:25:16.380 --> 00:25:17.780
if it's asleep.

00:25:17.780 --> 00:25:20.640
And then that means you could,
for instance, wake up every 30

00:25:20.640 --> 00:25:22.910
seconds, figure out how
far the user's traveled,

00:25:22.910 --> 00:25:25.200
and draw that on the UI.

00:25:25.200 --> 00:25:26.750
Couple of things to know here.

00:25:26.750 --> 00:25:28.507
The first one is
the 10 second rule.

00:25:28.507 --> 00:25:30.590
So I've been saying you
could wake up periodically

00:25:30.590 --> 00:25:33.260
with this API.

00:25:33.260 --> 00:25:35.510
Make sure that you're not
waking up more frequently

00:25:35.510 --> 00:25:36.694
than every 10 seconds.

00:25:36.694 --> 00:25:38.110
If you do, then
you won't actually

00:25:38.110 --> 00:25:41.340
be achieving any
power savings at all.

00:25:41.340 --> 00:25:44.260
And therefore, you might want to
think about, in my application,

00:25:44.260 --> 00:25:47.260
how am I going to display
information such that if I

00:25:47.260 --> 00:25:49.300
update less frequently
than every 10 seconds

00:25:49.300 --> 00:25:51.800
it's still a great
experience for the user.

00:25:51.800 --> 00:25:53.300
The second thing
to know is that you

00:25:53.300 --> 00:25:55.091
need to be a little
bit careful when you're

00:25:55.091 --> 00:25:56.490
using the AlarmManager API.

00:25:56.490 --> 00:25:59.240
You're going to provide
a pending intent to say,

00:25:59.240 --> 00:26:02.060
when your alarm goes off,
please start my activity again.

00:26:02.060 --> 00:26:03.560
And you just need
to be a little bit

00:26:03.560 --> 00:26:06.100
careful to use the right
flags with pending intent.

00:26:06.100 --> 00:26:08.300
Make sure that you're
using the flags that

00:26:08.300 --> 00:26:12.420
will cause the same instance of
your activity to be updated--

00:26:12.420 --> 00:26:14.440
so there's a flag
called UPDATE_CURRENT--

00:26:14.440 --> 00:26:17.010
rather than a whole new
instance of your activity

00:26:17.010 --> 00:26:19.392
to be started in order
to handle that callback.

00:26:19.392 --> 00:26:21.100
There's also a really
easy way to do this

00:26:21.100 --> 00:26:23.720
if you put launchmode
singleInstance in your Android

00:26:23.720 --> 00:26:25.820
manifest file.

00:26:25.820 --> 00:26:27.940
All the details of this
are in the code lab

00:26:27.940 --> 00:26:32.460
in the documentation that I'm
going to reference at the end.

00:26:32.460 --> 00:26:36.560
The final best practice
is to test on your wrist

00:26:36.560 --> 00:26:37.850
and not on the dock.

00:26:37.850 --> 00:26:42.570
So I've mentioned that we put
the CPU in this low power mode

00:26:42.570 --> 00:26:46.570
whenever we're in ambient
as much as we possibly can.

00:26:46.570 --> 00:26:48.799
If you put your watch
on to the charging dock,

00:26:48.799 --> 00:26:50.840
which is often what you'll
do when it's connected

00:26:50.840 --> 00:26:53.480
via USB for development.

00:26:53.480 --> 00:26:57.310
Because there's outlet power,
it won't put the CPU to sleep.

00:26:57.310 --> 00:27:00.100
So you may see slightly
different behavior on your dock

00:27:00.100 --> 00:27:02.140
as to if you took the
watch off every time you

00:27:02.140 --> 00:27:06.450
put a new instance of your app
on the device, and then use it.

00:27:06.450 --> 00:27:08.232
So make sure you
take it off and check

00:27:08.232 --> 00:27:10.690
that it's behaving as you would
expect because the CPU will

00:27:10.690 --> 00:27:12.532
actually go to sleep.

00:27:12.532 --> 00:27:14.240
It's also important
to test on your wrist

00:27:14.240 --> 00:27:17.820
because a lot of the
applications that you're

00:27:17.820 --> 00:27:19.540
going to develop that
are going to have

00:27:19.540 --> 00:27:22.540
glanceable information
on screen really

00:27:22.540 --> 00:27:24.890
need to have a simple
UI as possible.

00:27:24.890 --> 00:27:27.240
And we find that if you're
just sitting at your desk

00:27:27.240 --> 00:27:31.310
and looking at your
device in one spot,

00:27:31.310 --> 00:27:33.280
you may not actually
see all of the things

00:27:33.280 --> 00:27:34.570
that you might need to change.

00:27:34.570 --> 00:27:37.250
So get your device
on your wrist.

00:27:37.250 --> 00:27:38.960
Walk around your
office if you need to.

00:27:38.960 --> 00:27:41.120
Even better is take
your application

00:27:41.120 --> 00:27:42.920
into the context in
which the user's going

00:27:42.920 --> 00:27:45.150
to be whenever they're
controlling their TV

00:27:45.150 --> 00:27:46.314
or buying their shopping.

00:27:46.314 --> 00:27:48.230
And that'll help you
make really great choices

00:27:48.230 --> 00:27:49.770
as you develop your
always-on apps.

00:27:52.680 --> 00:27:55.680
So now that always-on
on Android Wear

00:27:55.680 --> 00:27:58.930
watches to be many devices
in one, as Brett explained,

00:27:58.930 --> 00:28:02.550
we're really excited to see what
device you're going to build.

00:28:02.550 --> 00:28:06.110
So in order to do that,
here's what you can do next.

00:28:06.110 --> 00:28:08.691
We have documentation at
developer.android.com.

00:28:08.691 --> 00:28:10.780
The full URL is right there.

00:28:10.780 --> 00:28:12.440
We've also developed
a code lab that

00:28:12.440 --> 00:28:15.350
will walk you step by step
through the process of adding

00:28:15.350 --> 00:28:20.296
always-on functionality to a
simple stopwatch application.

00:28:20.296 --> 00:28:21.420
That's the end of our talk.

00:28:21.420 --> 00:28:22.990
Thank you for listening.

00:28:22.990 --> 00:28:24.290
Please give us your feedback.

00:28:24.290 --> 00:28:27.020
And we have some time right now
for some questions and answers.

00:28:27.020 --> 00:28:28.500
I think that there
are a couple of mics

00:28:28.500 --> 00:28:29.420
out here in the audience.

00:28:29.420 --> 00:28:30.880
There's one here
and one over here.

00:28:30.880 --> 00:28:34.412
So if you've got questions,
step up to a microphone.

00:28:34.412 --> 00:28:37.730
[APPLAUSE]

00:28:39.630 --> 00:28:40.912
Thanks a lot.

00:28:40.912 --> 00:28:42.120
AUDIENCE: Great presentation.

00:28:42.120 --> 00:28:42.720
Thank you.

00:28:42.720 --> 00:28:43.220
Oops.

00:28:43.220 --> 00:28:44.350
Live mic.

00:28:44.350 --> 00:28:46.710
Is there any facility
for multitasking

00:28:46.710 --> 00:28:50.150
to have more than one screen,
more than one application

00:28:50.150 --> 00:28:52.267
be available in
the low power mode?

00:28:52.267 --> 00:28:53.600
DAVID SINGLETON: Great question.

00:28:53.600 --> 00:28:55.933
The question is-- oh, everyone
could hear it on the mic.

00:28:55.933 --> 00:28:56.810
So multitasking.

00:28:56.810 --> 00:28:59.520
First of all, one thing
that's important to remember

00:28:59.520 --> 00:29:02.560
is it is possible for
your Android Wear apps

00:29:02.560 --> 00:29:04.640
to run in the
background in general.

00:29:04.640 --> 00:29:07.280
So Android has very
powerful APIs for this.

00:29:07.280 --> 00:29:09.340
And we run Android
on the watches.

00:29:09.340 --> 00:29:11.820
So you can do
multiple-- multiple apps

00:29:11.820 --> 00:29:14.020
can run in the background.

00:29:14.020 --> 00:29:17.160
However, it is the case
that only one of those

00:29:17.160 --> 00:29:19.210
can be in the foreground
at the same time.

00:29:19.210 --> 00:29:21.480
So the idea here is
the user is involved

00:29:21.480 --> 00:29:23.154
in a long session
where they're doing

00:29:23.154 --> 00:29:24.320
something in the real world.

00:29:24.320 --> 00:29:26.150
And your app can
continue to stay on top.

00:29:26.150 --> 00:29:30.050
However, all those APIs that
we have had before today

00:29:30.050 --> 00:29:31.100
still exist.

00:29:31.100 --> 00:29:34.080
So one of the best ways to
get the user's attention

00:29:34.080 --> 00:29:37.660
if something has happened
related to your app or service

00:29:37.660 --> 00:29:39.710
is to post a notification.

00:29:39.710 --> 00:29:42.050
And by default,
notifications will still

00:29:42.050 --> 00:29:46.190
appear on top of always-on
activities in the heads

00:29:46.190 --> 00:29:47.260
up notification mode.

00:29:47.260 --> 00:29:49.385
So if you are running
in the background,

00:29:49.385 --> 00:29:51.260
and you want to give
the user the opportunity

00:29:51.260 --> 00:29:54.680
to switch to your app, which
could also implement always-on,

00:29:54.680 --> 00:29:57.805
then post a notification, and
they'll be able to see that.

00:29:57.805 --> 00:29:59.430
BRETT LIDER: A concrete
example of that

00:29:59.430 --> 00:30:02.180
might be that you're
navigating and listening

00:30:02.180 --> 00:30:03.420
to music at the same time.

00:30:03.420 --> 00:30:06.200
And both of these apps
implement a full screen

00:30:06.200 --> 00:30:07.590
version of themselves.

00:30:07.590 --> 00:30:09.260
So let's say I was
navigating, but I

00:30:09.260 --> 00:30:11.050
wanted to go switch my music.

00:30:11.050 --> 00:30:14.540
So I hit the hardware button
to go back to the watch face.

00:30:14.540 --> 00:30:16.990
And as I did that,
the app could actually

00:30:16.990 --> 00:30:19.540
publish a notification
that was like, hey,

00:30:19.540 --> 00:30:20.640
you're still navigating.

00:30:20.640 --> 00:30:22.450
Here's your next turn.

00:30:22.450 --> 00:30:26.220
And tap here to relaunch into
a full screen experience.

00:30:26.220 --> 00:30:30.260
So then the user can basically
go down, launch their music

00:30:30.260 --> 00:30:32.880
experience, change their
track, change their artist,

00:30:32.880 --> 00:30:35.170
go back to the watch face
and access that previous app

00:30:35.170 --> 00:30:36.950
via the notification.

00:30:36.950 --> 00:30:40.860
So that's the suggested way
that you would go and do that.

00:30:40.860 --> 00:30:44.670
And I think we have another
questioner right here.

00:30:44.670 --> 00:30:47.820
AUDIENCE: Congratulations
on the presentation.

00:30:47.820 --> 00:30:50.900
My question is all
Android Wear devices

00:30:50.900 --> 00:30:53.710
must have off screen mode.

00:30:53.710 --> 00:30:58.110
It's mandatory because Moto 360
does not support this feature,

00:30:58.110 --> 00:30:58.934
I think.

00:30:58.934 --> 00:31:01.350
DAVID SINGLETON: The feature
is supported on the Moto 360.

00:31:01.350 --> 00:31:02.808
You'll see in
Settings that there's

00:31:02.808 --> 00:31:06.700
an ambient screen setting, which
you can turn on and enable.

00:31:06.700 --> 00:31:08.390
And obviously, always-on
apps do require

00:31:08.390 --> 00:31:11.120
that the user has that setting
for the always-on screen turned

00:31:11.120 --> 00:31:12.820
on.

00:31:12.820 --> 00:31:15.440
Other devices, also possible to
disable the always-on screen.

00:31:15.440 --> 00:31:18.334
So your app should
still make use

00:31:18.334 --> 00:31:20.500
of the contextual notifications
that we talked about

00:31:20.500 --> 00:31:22.208
if you want to have
the user get in there

00:31:22.208 --> 00:31:23.390
during interactive mode.

00:31:23.390 --> 00:31:27.330
AUDIENCE: But I have to, in
the Moto 360, all the pixels

00:31:27.330 --> 00:31:30.934
are on, and all colors, right?

00:31:30.934 --> 00:31:31.850
DAVID SINGLETON: Yeah.

00:31:31.850 --> 00:31:32.433
Good question.

00:31:32.433 --> 00:31:35.600
So I guess we can talk
about screen technology here

00:31:35.600 --> 00:31:37.050
a little.

00:31:37.050 --> 00:31:38.830
Brett mentioned that
the best practice

00:31:38.830 --> 00:31:40.650
is to use black and
white and actually

00:31:40.650 --> 00:31:42.830
keep as many pixels
black as possible.

00:31:42.830 --> 00:31:45.000
And that's because a
lot of devices out there

00:31:45.000 --> 00:31:46.170
have OLED screens.

00:31:46.170 --> 00:31:48.360
And for OLED screens,
you only spend power

00:31:48.360 --> 00:31:49.820
for the pixels that are lit.

00:31:49.820 --> 00:31:51.490
But there are plenty of device.

00:31:51.490 --> 00:31:53.890
And we're excited about the
range of display technologies

00:31:53.890 --> 00:31:55.348
because they have
different traits.

00:31:55.348 --> 00:31:58.550
For instance, there
are transflective LCDs,

00:31:58.550 --> 00:32:01.040
which look great when
you're in bright sunlight

00:32:01.040 --> 00:32:03.280
because they reflect
the light back.

00:32:03.280 --> 00:32:07.330
And there are regular LCDs,
like the Moto 360 has.

00:32:07.330 --> 00:32:10.280
So you should expect there
to be a range of display

00:32:10.280 --> 00:32:11.020
technologies.

00:32:11.020 --> 00:32:12.640
We've distilled
the best practices

00:32:12.640 --> 00:32:14.890
so that you can make
good choices that

00:32:14.890 --> 00:32:16.330
work across all of those.

00:32:16.330 --> 00:32:19.270
So it's true that
for the OLED devices,

00:32:19.270 --> 00:32:21.870
the pixels that you light
have the impact on power.

00:32:21.870 --> 00:32:26.356
For LCD devices of any kind
then how many pixels you light

00:32:26.356 --> 00:32:27.730
does not make so
much difference.

00:32:27.730 --> 00:32:29.170
But we've distilled
the best practices

00:32:29.170 --> 00:32:30.955
so that you can make
good choices across all

00:32:30.955 --> 00:32:32.163
the devices in the ecosystem.

00:32:36.607 --> 00:32:38.190
AUDIENCE: Thanks for
the presentation.

00:32:38.190 --> 00:32:40.540
What I wanted to
ask you was do you

00:32:40.540 --> 00:32:44.125
have any plans for better
haptics on Android Wear devices

00:32:44.125 --> 00:32:45.750
because right now
one of the big issues

00:32:45.750 --> 00:32:48.620
is sometimes notifications
just get lost.

00:32:48.620 --> 00:32:51.400
I have the ZenWatch,
and the vibrator,

00:32:51.400 --> 00:32:53.210
whatever is in there
isn't good enough.

00:32:53.210 --> 00:32:55.320
And also to be able
to sort of enable

00:32:55.320 --> 00:32:59.250
different forms of
interaction where you're not

00:32:59.250 --> 00:33:03.250
forced to look at the screen but
still receive some information

00:33:03.250 --> 00:33:06.044
just from a series of
vibrations or something.

00:33:06.044 --> 00:33:06.960
DAVID SINGLETON: Sure.

00:33:06.960 --> 00:33:08.970
So one of the things
I'd encourage you to do

00:33:08.970 --> 00:33:12.074
is go and look at
the Vibration API

00:33:12.074 --> 00:33:13.740
that exists already
because it's already

00:33:13.740 --> 00:33:16.351
possible to use different
patterns of vibration

00:33:16.351 --> 00:33:16.850
in Android.

00:33:16.850 --> 00:33:19.790
That's an API we've
had for some time.

00:33:19.790 --> 00:33:23.450
And we're definitely excited
about haptics in wearables,

00:33:23.450 --> 00:33:25.760
but we don't have anything
to announce today.

00:33:25.760 --> 00:33:27.050
Thanks.

00:33:27.050 --> 00:33:28.650
AUDIENCE: Question.

00:33:28.650 --> 00:33:31.490
When I'm in always-on
mode, is there

00:33:31.490 --> 00:33:34.470
a way to get feedback on
how much CPU I'm using,

00:33:34.470 --> 00:33:36.810
like a profiling tool?

00:33:36.810 --> 00:33:38.870
DAVID SINGLETON: Great question.

00:33:38.870 --> 00:33:42.040
So there are tools
that you can use to see

00:33:42.040 --> 00:33:44.190
how much CPU you're using.

00:33:44.190 --> 00:33:46.900
So you can take a look at
the Android Systrace tools.

00:33:46.900 --> 00:33:49.250
It's part of the default SDK.

00:33:49.250 --> 00:33:52.810
And that will allow you
to instrument your app.

00:33:52.810 --> 00:33:55.480
You don't actually need to
change your app to instrument

00:33:55.480 --> 00:33:56.480
the running session.

00:33:56.480 --> 00:33:59.799
And you'll get deep insight into
how much CPU you're spending,

00:33:59.799 --> 00:34:01.340
and exactly where
you're spending it.

00:34:01.340 --> 00:34:04.250
So go look for
Systrace in the docs.

00:34:04.250 --> 00:34:06.375
I think we've got time for
maybe one more question.

00:34:08.960 --> 00:34:10.929
AUDIENCE: So I have a question.

00:34:10.929 --> 00:34:15.139
When it is in ambient mode, can
I still force the CPU to run,

00:34:15.139 --> 00:34:19.835
and the accelerometer and
gyroscope still running?

00:34:19.835 --> 00:34:20.710
DAVID SINGLETON: Yes.

00:34:20.710 --> 00:34:22.480
So the question is can
I still use sensors

00:34:22.480 --> 00:34:25.739
when I'm in ambient mode.

00:34:25.739 --> 00:34:28.239
And the answer is yes.

00:34:28.239 --> 00:34:29.980
This new always-on
feature doesn't

00:34:29.980 --> 00:34:33.409
change the way Android Wear
works with the existing API.

00:34:33.409 --> 00:34:35.147
So it's already been possible.

00:34:35.147 --> 00:34:37.230
For instance, you can use
those Alarm Manager APIs

00:34:37.230 --> 00:34:40.136
that we showed you to wake up
and do some work with sensors.

00:34:40.136 --> 00:34:42.469
But the best practices that
we talked about still apply.

00:34:42.469 --> 00:34:45.409
So it's still important
to think about how you can

00:34:45.409 --> 00:34:48.030
use the battery sensitively.

00:34:48.030 --> 00:34:51.570
And you can definitely
continue to do that.

00:34:51.570 --> 00:34:53.892
AUDIENCE: But I thought you
said the CPU goes to zero.

00:34:53.892 --> 00:34:55.100
DAVID SINGLETON: That's true.

00:34:55.100 --> 00:34:57.460
So one of the things that
we do-- and we do this

00:34:57.460 --> 00:34:59.820
on phones and tablets, as
well-- is, if possible, we'll

00:34:59.820 --> 00:35:02.150
try to turn the CPU off.

00:35:02.150 --> 00:35:06.260
But the way that you would
already be using sensors,

00:35:06.260 --> 00:35:08.150
if you wanted to use
them in the background

00:35:08.150 --> 00:35:11.110
is to use the Alarm
Manager API, which

00:35:11.110 --> 00:35:13.730
itself is going to wake
the device in order

00:35:13.730 --> 00:35:17.010
to use sensor APIs.

00:35:17.010 --> 00:35:19.670
And to be used very
carefully, there

00:35:19.670 --> 00:35:21.360
are the Wake Lock
APIs that allow

00:35:21.360 --> 00:35:23.490
you to hold the device
awake while you grab that.

00:35:23.490 --> 00:35:25.290
And if you were already using
sensors in the background,

00:35:25.290 --> 00:35:27.510
you will already be
familiar with those APIs.

00:35:27.510 --> 00:35:29.167
AUDIENCE: Thank you.

00:35:29.167 --> 00:35:31.000
BRETT LIDER: And if you
have more questions,

00:35:31.000 --> 00:35:34.660
we'll be on this side of
the room on the outside

00:35:34.660 --> 00:35:37.650
after the session to chat
more with you if you like.

00:35:37.650 --> 00:35:39.280
So thanks again for
coming out today.

00:35:39.280 --> 00:35:40.690
I appreciate it.

00:35:40.690 --> 00:35:42.273
DAVID SINGLETON:
Thank you, very much.

00:35:42.273 --> 00:35:43.960
[APPLAUSE]

