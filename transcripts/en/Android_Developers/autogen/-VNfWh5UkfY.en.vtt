WEBVTT
Kind: captions
Language: en

00:00:02.928 --> 00:00:04.250
DAN GALLUP: Hello, everybody.

00:00:04.250 --> 00:00:07.820
I hope everyone is excited
about the Android Fireside chat

00:00:07.820 --> 00:00:09.160
we're about to have here.

00:00:09.160 --> 00:00:12.160
Now some simple
logistics things first.

00:00:12.160 --> 00:00:15.742
We only have one microphone
left that is not in our system,

00:00:15.742 --> 00:00:17.950
because we have so many
people, so many great leaders

00:00:17.950 --> 00:00:20.630
from Android to answer
questions for you.

00:00:20.630 --> 00:00:22.005
So first thing's first.

00:00:22.005 --> 00:00:24.130
I'm Dan Gallup, and I've
been a long time developer

00:00:24.130 --> 00:00:25.550
and advocate for Android.

00:00:25.550 --> 00:00:27.880
And developer of
our Udacity courses.

00:00:27.880 --> 00:00:31.260
And we have amazing people
from product engineering,

00:00:31.260 --> 00:00:33.300
and UAX here to
answer your questions.

00:00:33.300 --> 00:00:35.040
So first we're
going to start off

00:00:35.040 --> 00:00:37.690
by having our panel
introduce themselves.

00:00:37.690 --> 00:00:39.940
Now two things before I do that.

00:00:39.940 --> 00:00:41.690
One is, again, there
is one microphone.

00:00:41.690 --> 00:00:42.460
You see it there.

00:00:42.460 --> 00:00:44.299
If you want to ask
questions, please line

00:00:44.299 --> 00:00:45.340
up behind the microphone.

00:00:45.340 --> 00:00:47.798
And please do ask questions,
because this is all about you.

00:00:47.798 --> 00:00:51.030
We've also taken some
questions from the internet,

00:00:51.030 --> 00:00:54.300
which we will be asking
our panel as well.

00:00:54.300 --> 00:00:56.520
And the second thing
is please don't

00:00:56.520 --> 00:00:59.090
ask about things
in the far future

00:00:59.090 --> 00:01:01.440
that you know our
team can't comment on.

00:01:01.440 --> 00:01:05.272
As well as try not to actually
call out individual panelists.

00:01:05.272 --> 00:01:06.230
They know who they are.

00:01:06.230 --> 00:01:09.240
And they can answer questions
very, very well themselves.

00:01:09.240 --> 00:01:11.640
So let them figure out
who's going to answer.

00:01:11.640 --> 00:01:14.290
So without further ado,
our distinguished panel.

00:01:14.290 --> 00:01:17.260
And we'll start
from right to left.

00:01:17.260 --> 00:01:18.320
Stage right, yes.

00:01:18.320 --> 00:01:19.070
Stage right.

00:01:19.070 --> 00:01:20.528
JEFF SHARKEY: Hi,
I'm Jeff Sharkey.

00:01:20.528 --> 00:01:22.450
I'm a software engineer
on the Framework team.

00:01:22.450 --> 00:01:23.850
CHET HAASE: Chet Haase.

00:01:23.850 --> 00:01:26.180
I am an engineer on
the UI Toolkit team.

00:01:26.180 --> 00:01:29.125
YIGIT BOYAR: Yigit Boyar, also
an engineer in the UI Toolkit

00:01:29.125 --> 00:01:29.624
team.

00:01:29.624 --> 00:01:31.360
DIANNE HACKBORN: I'm Dianne
Hackborn, an engineer

00:01:31.360 --> 00:01:32.430
on the Framework team.

00:01:32.430 --> 00:01:35.300
GEORGE MOUNT: George Mount, I'm
a UI engineer on the UI Toolkit

00:01:35.300 --> 00:01:35.975
team.

00:01:35.975 --> 00:01:36.933
ROMAIN GUY: Romain Guy.

00:01:36.933 --> 00:01:41.316
I used to be an engineer
on the UI Toolkit team.

00:01:41.316 --> 00:01:42.290
CHRIS WREN: Chris Wren.

00:01:42.290 --> 00:01:43.955
I'm an engineer on
the System UI team.

00:01:43.955 --> 00:01:45.400
RACHEL GARB: Hi,
I'm Rachel Garb.

00:01:45.400 --> 00:01:46.932
I'm on the UAX team.

00:01:46.932 --> 00:01:48.354
RACHAD ALAO: Hi,
I'm Rachad Alao.

00:01:48.354 --> 00:01:50.545
I'm an engineer
on the Media team.

00:01:50.545 --> 00:01:51.920
ADAM POWELL: Hi,
I'm Adam Powell.

00:01:51.920 --> 00:01:53.192
Engineer UI I Toolkit team.

00:01:53.192 --> 00:01:54.400
CHRIS BANES: I'm Chris Banes.

00:01:54.400 --> 00:01:56.479
And I'm an engineer in
Developer Relations.

00:01:56.479 --> 00:01:58.770
RAPH LEVIEN: And I'm Raph
Levien, an engineer on the UI

00:01:58.770 --> 00:02:00.247
Toolkit team.

00:02:00.247 --> 00:02:02.080
DAN GALLUP: So we have
an amazing panel here

00:02:02.080 --> 00:02:02.621
for you guys.

00:02:02.621 --> 00:02:04.830
It is so exciting to be
up here with these people

00:02:04.830 --> 00:02:06.955
that I've worked with for
the last five plus years,

00:02:06.955 --> 00:02:08.080
in many cases.

00:02:08.080 --> 00:02:10.240
So when I pull a question
from the internet first.

00:02:10.240 --> 00:02:11.940
A nice one.

00:02:11.940 --> 00:02:14.380
So this is from David.

00:02:14.380 --> 00:02:17.300
Why did the build that
version codes convention

00:02:17.300 --> 00:02:19.860
change from the full
tasty treat name

00:02:19.860 --> 00:02:22.135
to just the letter
in Marshmallow?

00:02:22.135 --> 00:02:23.760
DIANNE HACKBORN: So
the answer for that

00:02:23.760 --> 00:02:27.040
is those names in there are the
code names for the platform.

00:02:27.040 --> 00:02:31.530
And we don't have code names
anymore because what happens

00:02:31.530 --> 00:02:34.970
is that early on we said we need
a code name for our platform

00:02:34.970 --> 00:02:36.930
so we can call it something
before we're done.

00:02:36.930 --> 00:02:39.180
And marketing gives it its
file version number numbers

00:02:39.180 --> 00:02:41.110
that they want to
go public with.

00:02:41.110 --> 00:02:42.970
And code names, over
time, as you've seen,

00:02:42.970 --> 00:02:47.791
they become more of a marketing
thing than the actual version

00:02:47.791 --> 00:02:48.290
numbers.

00:02:48.290 --> 00:02:52.460
So by M now, basically marketing
has taken over the name.

00:02:52.460 --> 00:02:55.010
We don't know the name before
we're done with the SDKs,

00:02:55.010 --> 00:02:57.362
so we ended up with M.

00:02:57.362 --> 00:03:00.502
DAN GALLUP: M. It really
helps us from leaking things.

00:03:00.502 --> 00:03:01.835
None of us know what's going on.

00:03:04.960 --> 00:03:06.210
Another question from the net.

00:03:06.210 --> 00:03:07.751
Again, please line
up behind the mic.

00:03:07.751 --> 00:03:09.740
We'll also take some there.

00:03:09.740 --> 00:03:13.610
So they would like to know why
the permission for drawing over

00:03:13.610 --> 00:03:16.820
other apps is considered
dangerous and cannot be

00:03:16.820 --> 00:03:19.020
requested?

00:03:19.020 --> 00:03:23.200
DIANNE HACKBORN: I guess
I'll take that one too.

00:03:23.200 --> 00:03:28.020
So the run temp permissions
are designed around access

00:03:28.020 --> 00:03:29.294
to personal information.

00:03:29.294 --> 00:03:31.710
So you'll see pretty much all
the run temp permissions are

00:03:31.710 --> 00:03:33.168
like, the user can
understand them,

00:03:33.168 --> 00:03:35.460
but like can the application
get to the stuff about me?

00:03:35.460 --> 00:03:37.626
And so we thought that was
really important for them

00:03:37.626 --> 00:03:39.270
to be able to
answer these prompts

00:03:39.270 --> 00:03:41.670
that they're going to see a lot.

00:03:41.670 --> 00:03:45.030
The draw over applications is
actually a really tricky one,

00:03:45.030 --> 00:03:47.839
because it's a source of a
lot of malware that we have.

00:03:47.839 --> 00:03:49.380
It can be abused
for a lot of things.

00:03:49.380 --> 00:03:51.629
It's one of those things
that's like with great power,

00:03:51.629 --> 00:03:54.440
you can mess up the
user really well.

00:03:54.440 --> 00:03:56.544
So we really wanted
to protect this more.

00:03:56.544 --> 00:03:57.960
So we really felt
it was important

00:03:57.960 --> 00:03:59.820
that for the
application to get this,

00:03:59.820 --> 00:04:03.260
they need to go through a little
more invasive UI where we can

00:04:03.260 --> 00:04:04.910
to explain to the
user what this is

00:04:04.910 --> 00:04:08.210
and more discourage
applications from using it.

00:04:08.210 --> 00:04:09.660
DAN GALLUP: OK.

00:04:09.660 --> 00:04:11.030
Here's another one.

00:04:11.030 --> 00:04:13.610
Why do you choose
statics for your APIs?

00:04:13.610 --> 00:04:16.440
It makes testing so hard.

00:04:16.440 --> 00:04:20.079
I think I put the
right inflection there.

00:04:20.079 --> 00:04:21.297
Anyone?

00:04:21.297 --> 00:04:23.130
RAPH LEVIEN: It would
be interesting to know

00:04:23.130 --> 00:04:24.250
what they're talking
about in particular.

00:04:24.250 --> 00:04:25.990
I know we use
static methods a lot

00:04:25.990 --> 00:04:28.640
in support library as
a way to then shim down

00:04:28.640 --> 00:04:30.820
to the appropriate
runtime version.

00:04:30.820 --> 00:04:33.160
That's a mechanism for
us to then delegate

00:04:33.160 --> 00:04:35.690
to the appropriate runtime bits.

00:04:35.690 --> 00:04:38.626
Other than that, I
don't know specifically

00:04:38.626 --> 00:04:39.750
what they're talking about.

00:04:39.750 --> 00:04:42.333
GEORGE MOUNT: I thought it was
just because we hate our users.

00:04:44.000 --> 00:04:46.670
I this is specifically relating
to dependency injection,

00:04:46.670 --> 00:04:47.535
and why we can't--

00:04:47.535 --> 00:04:48.886
DAN GALLUP: Yeah.

00:04:48.886 --> 00:04:50.760
There's a very serious
side to this question.

00:04:50.760 --> 00:04:52.510
I do not want to trivialize
this question because I

00:04:52.510 --> 00:04:54.270
know that a lot of
people want-- what they

00:04:54.270 --> 00:04:56.110
do want is to make their
code more testable,

00:04:56.110 --> 00:04:58.650
and we want to-- really
do want to help that.

00:04:58.650 --> 00:05:01.590
Even though I wrote it-- because
the question was kind of whiny.

00:05:01.590 --> 00:05:04.646
The actual content
is quite serious.

00:05:04.646 --> 00:05:07.510
ADAM POWELL: So I think
that the comment of what

00:05:07.510 --> 00:05:11.800
more specifically the
questioner was referring to,

00:05:11.800 --> 00:05:13.330
would be really useful here.

00:05:13.330 --> 00:05:15.860
Just to sort of see how they're
trying to instrument this,

00:05:15.860 --> 00:05:17.625
and what they're trying to do.

00:05:17.625 --> 00:05:19.750
Most of these things we
deal with kind of on a case

00:05:19.750 --> 00:05:20.960
by case basis.

00:05:20.960 --> 00:05:22.770
It would be great to find out
a little bit more information.

00:05:22.770 --> 00:05:22.980
DAN GALLUP: Absolutely.

00:05:22.980 --> 00:05:25.120
Then this is one of the
challenges with taking

00:05:25.120 --> 00:05:26.740
questions over Twitter.

00:05:26.740 --> 00:05:29.770
DIANNE HACKBORN: If you can
get back to them, we'll wait.

00:05:29.770 --> 00:05:32.330
DAN GALLUP: Yeah, exactly.

00:05:32.330 --> 00:05:34.290
Yeah, please feel
free to tweet again.

00:05:34.290 --> 00:05:39.204
All right, so let's actually
take an audience question now.

00:05:39.204 --> 00:05:40.620
Since I see a few
people lined up.

00:05:40.620 --> 00:05:42.690
AUDIENCE: Thank you.

00:05:42.690 --> 00:05:44.730
Thank you for putting
this event together.

00:05:44.730 --> 00:05:48.900
It's really great to have this
focused on pure Android event.

00:05:58.060 --> 00:06:00.450
So my question is actually
very little related

00:06:00.450 --> 00:06:04.270
to the previous session
about our permissions.

00:06:04.270 --> 00:06:08.670
And I think it's important for
everyone to know the answer.

00:06:08.670 --> 00:06:11.060
So one of the solutions to
avoid asking for permissions

00:06:11.060 --> 00:06:14.040
was to use some of
the system intents.

00:06:14.040 --> 00:06:17.110
For example, if you wanted
to capture a picture,

00:06:17.110 --> 00:06:20.330
use a media capture
action instead

00:06:20.330 --> 00:06:23.940
of like asking for permission
to access a camera.

00:06:23.940 --> 00:06:28.280
Or if you wanted to save
a contact, et cetera.

00:06:28.280 --> 00:06:30.560
It's been a while since I
touched the camera stuff,

00:06:30.560 --> 00:06:34.400
but if I remember, a few
years ago basically each OEM

00:06:34.400 --> 00:06:39.200
that shipped their own camera
application would treat

00:06:39.200 --> 00:06:43.590
would respond to that media
capture action differently,

00:06:43.590 --> 00:06:47.940
so like one of them would
return a thumbnail of the image

00:06:47.940 --> 00:06:51.500
in the data part of
the intent, another one

00:06:51.500 --> 00:06:55.870
would return a URI, which was
probably the expected behavior.

00:06:55.870 --> 00:06:58.960
Same with I think
like even attaching

00:06:58.960 --> 00:07:01.450
something, like
some email clients,

00:07:01.450 --> 00:07:05.880
or some third party
email clients or apps.

00:07:05.880 --> 00:07:08.800
Like when you try
to attach something,

00:07:08.800 --> 00:07:11.110
expect it in one
way, versus another.

00:07:11.110 --> 00:07:15.230
So have any of these been
maybe added to the CTS

00:07:15.230 --> 00:07:18.360
to ensure that I get
consistent behavior when

00:07:18.360 --> 00:07:21.030
I use the media capture
intent, for example,

00:07:21.030 --> 00:07:22.090
or the other intents?

00:07:22.090 --> 00:07:26.085
Or if not, then how do we
really work around that?

00:07:26.085 --> 00:07:27.920
JEFF SHARKEY: Yeah,
that's a great question.

00:07:27.920 --> 00:07:30.360
So for the action, the image
capture stuff, you're right.

00:07:30.360 --> 00:07:32.270
As far as CTS, what's
in there right now,

00:07:32.270 --> 00:07:34.520
all it does right now is
assert that somebody is

00:07:34.520 --> 00:07:36.220
there that handles the intent.

00:07:36.220 --> 00:07:38.920
But what we've tried doing
with some of the documents,

00:07:38.920 --> 00:07:39.750
UI things.

00:07:39.750 --> 00:07:42.410
So the Create Document
Get Content intents,

00:07:42.410 --> 00:07:44.460
we've actually started
using UI Automator,

00:07:44.460 --> 00:07:45.932
to not just to
launch the intent,

00:07:45.932 --> 00:07:48.140
and to start interacting
with whatever UI the OEM has

00:07:48.140 --> 00:07:50.396
presented there, to
actually try picking a file,

00:07:50.396 --> 00:07:51.770
and to make sure
that we get back

00:07:51.770 --> 00:07:53.860
the file we expect, and
we're able to work with it.

00:07:53.860 --> 00:07:56.360
So we've had good success with
it there, with those intents.

00:07:56.360 --> 00:07:58.390
And we're starting to look
at, how do we extend that

00:07:58.390 --> 00:07:59.060
to some of the other ones?

00:07:59.060 --> 00:08:00.590
Like the image
capture, so that we

00:08:00.590 --> 00:08:02.700
can assert strongly that
you, as a developer,

00:08:02.700 --> 00:08:06.030
get back whether it's a full
resolution image or a stronger

00:08:06.030 --> 00:08:08.970
contract between you
and the camera app.

00:08:08.970 --> 00:08:10.390
So we're looking
at improving it.

00:08:10.390 --> 00:08:12.860
AUDIENCE: Thank you.

00:08:12.860 --> 00:08:15.165
DAN GALLUP: Next
audience question.

00:08:15.165 --> 00:08:17.050
AUDIENCE: I hope this
is a simple question.

00:08:17.050 --> 00:08:22.530
So what's the recommended
way to sync data

00:08:22.530 --> 00:08:27.790
from an app to the server, and
back from server to the app?

00:08:27.790 --> 00:08:31.970
Because the talk this morning
was talking about a way other

00:08:31.970 --> 00:08:32.960
than the sync adapter.

00:08:32.960 --> 00:08:35.360
And I was looking at
the Udacity classes,

00:08:35.360 --> 00:08:38.956
and they were saying
Sync Adapter was the way.

00:08:38.956 --> 00:08:41.039
DAN GALLUP: Just one thing
on the Udacity classes.

00:08:41.039 --> 00:08:45.280
We wrote the Udacity class
before Job Scheduler existed,

00:08:45.280 --> 00:08:47.400
or GCM Network Manager existed.

00:08:47.400 --> 00:08:50.010
So that is one thing that
we haven't updated that part

00:08:50.010 --> 00:08:51.210
of the class since then.

00:08:51.210 --> 00:08:52.626
But I'll let the
rest of the panel

00:08:52.626 --> 00:08:54.356
handle that from beyond that.

00:08:54.356 --> 00:08:56.290
YIGIT BOYAR: I don't
think we have one

00:08:56.290 --> 00:08:57.950
sort of way of doing things.

00:08:57.950 --> 00:08:59.600
Job Scheduler
provides a great API

00:08:59.600 --> 00:09:02.120
for when you want to be done.

00:09:02.120 --> 00:09:05.530
You want to like--
battery full, or there's

00:09:05.530 --> 00:09:08.890
wireless network, that kind
of stuff is good for an app.

00:09:08.890 --> 00:09:11.660
And there's also things like
my user just send a message

00:09:11.660 --> 00:09:15.125
and want to send us the server,
you better send it yourself.

00:09:15.125 --> 00:09:16.750
That's the best way,
because you really

00:09:16.750 --> 00:09:19.120
want to send this
as soon as possible.

00:09:19.120 --> 00:09:21.380
And if you rely
on the rest of it,

00:09:21.380 --> 00:09:25.320
we tried to batch things, that's
why the Job Scheduler is great.

00:09:25.320 --> 00:09:26.840
Otherwise do it yourself.

00:09:26.840 --> 00:09:27.810
I don't know.

00:09:27.810 --> 00:09:28.780
ADAM POWELL: I
think that if you're

00:09:28.780 --> 00:09:31.071
looking for something that's
a little bit more turnkey,

00:09:31.071 --> 00:09:35.795
and that gives you some higher
level constructs for working

00:09:35.795 --> 00:09:37.170
with that, I think
you might want

00:09:37.170 --> 00:09:38.711
to talk to some of
the Firebase folks

00:09:38.711 --> 00:09:42.575
out in the Sandbox area and
Q&amp;A area for office hours.

00:09:42.575 --> 00:09:44.700
They might be able to point
you in a direction that

00:09:44.700 --> 00:09:47.260
has something a little
bit more higher level

00:09:47.260 --> 00:09:48.902
than just the raw
platform constructs.

00:09:48.902 --> 00:09:51.360
Just because those do provide
some of the other server side

00:09:51.360 --> 00:09:52.800
component and integration
that you might look

00:09:52.800 --> 00:09:54.239
at for something like that.

00:09:54.239 --> 00:09:56.030
AUDIENCE: Somebody was
mentioning something

00:09:56.030 --> 00:10:01.460
in Google Play Services,
that helped sync.

00:10:01.460 --> 00:10:05.580
I guess Rado was,
when we were talking?

00:10:05.580 --> 00:10:08.360
DAN GALLUP: That's the
GCM Network Manager Code.

00:10:08.360 --> 00:10:10.670
And the nice thing about
GCM Network Manager

00:10:10.670 --> 00:10:13.280
is that it actually does a
lot of the power saving things

00:10:13.280 --> 00:10:14.800
that we added to
the platform later,

00:10:14.800 --> 00:10:17.420
but it brings it back to
earlier versions of Android.

00:10:17.420 --> 00:10:21.570
So it's a very friendly
thing to use in that sense.

00:10:21.570 --> 00:10:23.630
It doesn't do everything
that Job Scheduler does,

00:10:23.630 --> 00:10:25.560
but it does the most
important things.

00:10:25.560 --> 00:10:27.151
And a lot of people
Sync Adapter might

00:10:27.151 --> 00:10:29.150
be a little bit overkill
for, because they don't

00:10:29.150 --> 00:10:30.900
need the accounts part of it.

00:10:30.900 --> 00:10:33.026
They just want something
that's going to start up,

00:10:33.026 --> 00:10:34.900
that's going to survive
boots, and it's going

00:10:34.900 --> 00:10:36.410
to get them reliable syncing.

00:10:36.410 --> 00:10:38.210
And so something like
GCM Network Manager

00:10:38.210 --> 00:10:41.710
is useful because it can do
that across many versions

00:10:41.710 --> 00:10:43.690
of the platform, even
before we started

00:10:43.690 --> 00:10:46.970
doing some of the battery
optimizations we did later on,

00:10:46.970 --> 00:10:48.686
around sync adaptors.

00:10:48.686 --> 00:10:53.610
YIGIT BOYAR: Just keeping my
drill depends on your use case.

00:10:53.610 --> 00:10:55.245
If you're trying
to send analytics

00:10:55.245 --> 00:10:58.710
information use the Job
Scheduler GCM Network Manager.

00:10:58.710 --> 00:11:01.420
But if it's time
sensitive, those things

00:11:01.420 --> 00:11:03.190
work well because they batch.

00:11:03.190 --> 00:11:04.010
They're lazy.

00:11:04.010 --> 00:11:05.730
It's good for the device.

00:11:05.730 --> 00:11:11.030
But if you have time sensitive
information, do it yourself.

00:11:11.030 --> 00:11:13.590
There's multiple
solutions out there.

00:11:13.590 --> 00:11:14.716
AUDIENCE: Thanks very much.

00:11:14.716 --> 00:11:17.048
DAN GALLUP: Actually, I'll
do one more audience question

00:11:17.048 --> 00:11:17.560
here.

00:11:17.560 --> 00:11:20.150
ADAM POWELL: Looks like a few.

00:11:20.150 --> 00:11:22.840
AUDIENCE: So if I can just
hijack the previous statics

00:11:22.840 --> 00:11:25.420
question.

00:11:25.420 --> 00:11:28.820
It wasn't actually my
question, but it's something

00:11:28.820 --> 00:11:29.970
that I've run into lately.

00:11:29.970 --> 00:11:33.280
I think Google Play Services is
a really good example of that,

00:11:33.280 --> 00:11:37.230
where for things like Location
Services, GCM, GCM Network

00:11:37.230 --> 00:11:40.030
Manager, they've all seemed
to sort of standardized

00:11:40.030 --> 00:11:42.380
on static methods
on everything, which

00:11:42.380 --> 00:11:44.840
does make testing really hard.

00:11:44.840 --> 00:11:46.850
Especially for things
like geo-fencing,

00:11:46.850 --> 00:11:48.146
that type of stuff.

00:11:48.146 --> 00:11:51.060
CHET HAASE: Can you say
that in a whiny voice?

00:11:51.060 --> 00:11:53.262
Why are they static?

00:11:53.262 --> 00:11:54.452
ADAM POWELL: There we go.

00:12:00.062 --> 00:12:00.770
That didn't work.

00:12:00.770 --> 00:12:02.795
We didn't get us an
answer any faster.

00:12:02.795 --> 00:12:05.420
JEFF SHARKEY: But I liked
the question, though.

00:12:05.420 --> 00:12:07.392
ADAM POWELL: Sir, thank
you for pointing out

00:12:07.392 --> 00:12:08.850
some of the Play
Services libraries

00:12:08.850 --> 00:12:09.730
in particular for that.

00:12:09.730 --> 00:12:11.730
We'll definitely take
that feedback to the team.

00:12:15.397 --> 00:12:16.980
ROMAIN GUY: That's
a great non answer.

00:12:20.270 --> 00:12:24.810
DAN GALLUP: So Joe asks, could
you discuss the new Bottom

00:12:24.810 --> 00:12:27.630
Navigation Bar in
the new Google+ App,

00:12:27.630 --> 00:12:33.310
that is only mentioned
as something--

00:12:33.310 --> 00:12:36.580
that is mentioned as
something not to do on DAC?

00:12:36.580 --> 00:12:38.850
Rachel, do you want to
start with that one?

00:12:38.850 --> 00:12:41.210
RACHEL GARB: So
the Google + team

00:12:41.210 --> 00:12:45.690
is experimenting with
new UI approaches.

00:12:45.690 --> 00:12:47.680
And they do this
from time to time.

00:12:47.680 --> 00:12:50.340
Doesn't always result in
a material design pattern.

00:12:50.340 --> 00:12:53.950
It hasn't resulted in a material
design pattern in this case.

00:12:53.950 --> 00:12:56.780
So the feedback that you have
about it is going to be very

00:12:56.780 --> 00:12:59.940
helpful to the Google+ team and
also the Material Design Team

00:12:59.940 --> 00:13:03.950
as they decide what
to do moving forward.

00:13:03.950 --> 00:13:06.320
DAN GALLUP: So who
here doesn't like it?

00:13:06.320 --> 00:13:08.020
It's just a show of hands.

00:13:08.020 --> 00:13:09.020
OK.

00:13:09.020 --> 00:13:10.670
There's an interesting
feedback there.

00:13:10.670 --> 00:13:12.400
So go on, Adam.

00:13:12.400 --> 00:13:14.190
CHET HAASE: So is
iterating like this,

00:13:14.190 --> 00:13:16.582
referred to as bottom up design?

00:13:16.582 --> 00:13:19.338
RACHEL GARB: That's a good one.

00:13:19.338 --> 00:13:21.349
ADAM POWELL: So in all
seriousness though,

00:13:21.349 --> 00:13:23.390
I think that's really kind
of the way to take it.

00:13:23.390 --> 00:13:24.848
Google's a very
large organization,

00:13:24.848 --> 00:13:26.500
and we have a lot
of other apps teams.

00:13:26.500 --> 00:13:28.990
And as you all know from
working with your teams,

00:13:28.990 --> 00:13:31.290
and your designers,
and your product teams,

00:13:31.290 --> 00:13:33.560
all of these people have
all these other ideas

00:13:33.560 --> 00:13:36.580
that they want to put
forward and try things out.

00:13:36.580 --> 00:13:40.160
And I think that there's a lot
of that same sort of sentiment

00:13:40.160 --> 00:13:42.699
within Google, and within other
Google Apps teams as well.

00:13:42.699 --> 00:13:44.490
It's part of the reason
why we don't always

00:13:44.490 --> 00:13:45.365
integrate everything.

00:13:45.365 --> 00:13:47.910
Every Google App team does into
something like the material

00:13:47.910 --> 00:13:49.880
design spec, or into
a support library,

00:13:49.880 --> 00:13:51.561
or into any of these
things immediately.

00:13:51.561 --> 00:13:53.310
Because these teams
really do just kind of

00:13:53.310 --> 00:13:55.143
want to try some things
and see what sticks.

00:13:55.143 --> 00:13:56.545
And see what people like.

00:13:56.545 --> 00:13:58.920
And this is something that
we've gotten a lot of feedback

00:13:58.920 --> 00:14:00.290
on since that particular launch.

00:14:00.290 --> 00:14:02.112
So thank you for providing that.

00:14:02.112 --> 00:14:03.570
That really is part
of the process.

00:14:05.972 --> 00:14:07.430
DAN GALLUP: Next
audience question.

00:14:12.374 --> 00:14:16.835
AUDIENCE: To be backward
compatible vendors need APIs,

00:14:16.835 --> 00:14:21.860
whether be in Support Library
or Google Play Services.

00:14:21.860 --> 00:14:26.910
So one of them is open source,
one of the other is not.

00:14:26.910 --> 00:14:29.600
So for example, Fused
Location Provider.

00:14:29.600 --> 00:14:35.890
It's just about location, and
not about Google Services,

00:14:35.890 --> 00:14:36.850
actually.

00:14:36.850 --> 00:14:42.990
It requires GMS of course, but
which determines for Neve APIs

00:14:42.990 --> 00:14:45.686
to be on which?

00:14:45.686 --> 00:14:47.560
DAN GALLUP: So what
determines whether an API

00:14:47.560 --> 00:14:50.164
is part of Google Play Services,
or part of the platform?

00:14:50.164 --> 00:14:51.580
DIANNE HACKBORN:
I can address it.

00:14:51.580 --> 00:14:55.040
So the location stuff in
being in Google Play Services

00:14:55.040 --> 00:14:58.106
actually had nothing to do
with backwards compatibility

00:14:58.106 --> 00:14:59.230
or giving to older devices.

00:14:59.230 --> 00:15:02.580
It came about because as
we developed the location

00:15:02.580 --> 00:15:05.187
services, originally, we
just had-- there was GPS.

00:15:05.187 --> 00:15:06.270
So that was your location.

00:15:06.270 --> 00:15:07.810
And then we did the cell.

00:15:07.810 --> 00:15:10.670
And as it evolved, you do Wi-Fi
based location and realized

00:15:10.670 --> 00:15:12.830
you can't really
do modern location

00:15:12.830 --> 00:15:14.520
services on these
devices without having

00:15:14.520 --> 00:15:16.450
a lot of interaction
with back end servers

00:15:16.450 --> 00:15:18.090
that have a lot
of data that they

00:15:18.090 --> 00:15:19.690
used to do this location stuff.

00:15:19.690 --> 00:15:21.700
So we realized the
platform location APIs

00:15:21.700 --> 00:15:24.452
were becoming these hollow
APIs that didn't actually

00:15:24.452 --> 00:15:26.410
have any open source
implementation behind them

00:15:26.410 --> 00:15:28.530
because the platform
couldn't do the stuff that we

00:15:28.530 --> 00:15:29.970
were saying it would do.

00:15:29.970 --> 00:15:31.740
So that was actually
the reason why

00:15:31.740 --> 00:15:33.410
Location went into
Google Play Services,

00:15:33.410 --> 00:15:35.475
because we realized
actually Location is really

00:15:35.475 --> 00:15:37.350
a Google Service it's
not a Platform Service.

00:15:41.060 --> 00:15:43.481
And if you want to see why
the difference between Support

00:15:43.481 --> 00:15:45.730
Library and Google Play
Services is really about that.

00:15:45.730 --> 00:15:48.420
Google Play Services is
Google Proprietary Services

00:15:48.420 --> 00:15:51.280
that basically are dependent on
back end Google Services this

00:15:51.280 --> 00:15:54.930
is for libraries all open
source code that can operate all

00:15:54.930 --> 00:15:56.535
by itself.

00:15:56.535 --> 00:15:58.880
AUDIENCE: Thank you.

00:15:58.880 --> 00:16:03.886
DAN GALLUP: So what is this
about performance, and enums,

00:16:03.886 --> 00:16:04.852
and int def?

00:16:07.790 --> 00:16:11.597
There's definitely been
a lot of talk about it.

00:16:11.597 --> 00:16:13.430
Anyone want to comment
on the panel on this?

00:16:13.430 --> 00:16:15.430
ADAM POWELL: Can we get
everyone for one side on one

00:16:15.430 --> 00:16:17.075
side of the room,
and the other side

00:16:17.075 --> 00:16:19.500
on the other side of the room.

00:16:19.500 --> 00:16:20.500
ROMAIN GUY: I can do it.

00:16:23.920 --> 00:16:24.850
Let me try.

00:16:24.850 --> 00:16:26.290
OK.

00:16:26.290 --> 00:16:28.800
So originally, we
just wanted to let you

00:16:28.800 --> 00:16:30.750
guys know what is
the cost of an enum,

00:16:30.750 --> 00:16:33.500
so that you understand when
you use them what the cost is.

00:16:33.500 --> 00:16:35.810
Just like if you use
a double with a big D,

00:16:35.810 --> 00:16:38.220
and you put a million
of them in hash map,

00:16:38.220 --> 00:16:40.070
what is going to be the cost?

00:16:40.070 --> 00:16:41.659
Once you have that
information, you

00:16:41.659 --> 00:16:43.450
can make an informed
decision about whether

00:16:43.450 --> 00:16:44.241
or not to use them.

00:16:44.241 --> 00:16:45.080
Enums are great.

00:16:45.080 --> 00:16:46.230
They're super useful.

00:16:46.230 --> 00:16:47.745
You can put methods on them.

00:16:47.745 --> 00:16:50.166
There are many cases
where they are useful.

00:16:50.166 --> 00:16:51.290
They exist in the platform.

00:16:51.290 --> 00:16:53.290
If you look at the source
code of the framework,

00:16:53.290 --> 00:16:55.470
you'll see them used
in a bunch of places.

00:16:55.470 --> 00:16:59.110
So it's really about understand
the cost of everything

00:16:59.110 --> 00:17:02.450
so you can decide on
a case by case basis.

00:17:02.450 --> 00:17:06.980
So if we ever say, never
use them or always use them,

00:17:06.980 --> 00:17:08.230
that's not what we mean.

00:17:08.230 --> 00:17:09.605
ADAM POWELL: So
what I just heard

00:17:09.605 --> 00:17:13.654
is, says, always use
them, or never use them.

00:17:13.654 --> 00:17:15.740
ROMAIN GUY: It's like
one or the other.

00:17:15.740 --> 00:17:17.500
There's no middle ground.

00:17:17.500 --> 00:17:19.111
No, it's just like
with everything,

00:17:19.111 --> 00:17:20.319
understand what you're doing.

00:17:20.319 --> 00:17:22.440
Don't do it blindly because
you've been told in an article

00:17:22.440 --> 00:17:24.130
to never use them or
to always use them.

00:17:24.130 --> 00:17:25.990
Just understand what's going on.

00:17:25.990 --> 00:17:29.090
RAPH LEVIEN: I think the
most important thing by far,

00:17:29.090 --> 00:17:31.410
to do is measure.

00:17:31.410 --> 00:17:35.450
And I think the thing may be why
enums are so controversial, is

00:17:35.450 --> 00:17:37.930
that if you have
assumptions about Java

00:17:37.930 --> 00:17:42.190
on a desktop or a server, those
assumptions are not necessarily

00:17:42.190 --> 00:17:46.620
going to apply on the
platforms on the device.

00:17:46.620 --> 00:17:48.030
But the real answer is measure.

00:17:48.030 --> 00:17:51.350
And if the answer is it isn't
really performance critical,

00:17:51.350 --> 00:17:52.700
make your code clean.

00:17:52.700 --> 00:17:55.270
And if the answer is, it is
on a performance hot path,

00:17:55.270 --> 00:17:58.180
then do something different
than you would on a desktop.

00:17:58.180 --> 00:17:59.430
ADAM POWELL: Part of the
reason why this ends up

00:17:59.430 --> 00:18:00.820
being such a topic
of discussion,

00:18:00.820 --> 00:18:02.736
is just because it is
one of those things that

00:18:02.736 --> 00:18:04.130
tends to come out in API.

00:18:04.130 --> 00:18:06.270
And it ends up coming
out in API in places

00:18:06.270 --> 00:18:09.400
where many, many parts of your
code are going to call into it.

00:18:09.400 --> 00:18:12.020
And it's one of those areas
that really does contribute

00:18:12.020 --> 00:18:15.220
to performance death by 1,000
cuts, or memory death by 1,000

00:18:15.220 --> 00:18:17.380
cuts, in one
scenario or another.

00:18:17.380 --> 00:18:18.930
Any one of these
things really isn't

00:18:18.930 --> 00:18:20.360
going to hurt you all
that much on its own,

00:18:20.360 --> 00:18:22.780
especially if it's just
kind of off the beaten path.

00:18:22.780 --> 00:18:25.130
But if it adds up
and you do measure,

00:18:25.130 --> 00:18:26.970
and you find out
later on that, wow,

00:18:26.970 --> 00:18:31.750
I really do have a problem here,
then what do you do about it?

00:18:31.750 --> 00:18:34.130
I mean, you see you sit down
and you say to yourself, OK.

00:18:34.130 --> 00:18:35.580
Well, I'm going to go
ahead and fix this.

00:18:35.580 --> 00:18:37.080
What does that
refactoring look like

00:18:37.080 --> 00:18:39.130
if you find out that a
million of these things

00:18:39.130 --> 00:18:41.250
across your codebase
is causing a problem?

00:18:41.250 --> 00:18:43.564
So that's part of the reason
why it's one of the things

00:18:43.564 --> 00:18:45.230
that we've harped on,
is just because it

00:18:45.230 --> 00:18:48.800
does tend to have that
quality of high visibility

00:18:48.800 --> 00:18:51.364
across your code base, such
that if you find that you have

00:18:51.364 --> 00:18:53.030
to make a change later
on, it can end up

00:18:53.030 --> 00:18:54.720
being a very expensive change.

00:18:54.720 --> 00:18:57.175
So it's part of the reason
why we say measure up front.

00:18:57.175 --> 00:18:58.550
And really kind
of think about it

00:18:58.550 --> 00:19:00.232
and know the costs
from the beginning.

00:19:00.232 --> 00:19:02.390
GEORGE MOUNT: I thought
it was defensive.

00:19:02.390 --> 00:19:03.930
We're never going to use enums.

00:19:03.930 --> 00:19:06.850
We always use ints.

00:19:06.850 --> 00:19:10.875
So you guys have to do the
same thing we do, right?

00:19:10.875 --> 00:19:13.540
ADAM POWELL: We can also,
just again, like Romain say,

00:19:13.540 --> 00:19:14.370
never use them.

00:19:17.191 --> 00:19:18.440
GEORGE MOUNT: Always use them?

00:19:18.440 --> 00:19:19.700
JEFF SHARKEY: Yeah,
the public APIs, we're

00:19:19.700 --> 00:19:22.420
being conservative, because we
don't know what types of apps

00:19:22.420 --> 00:19:24.000
or how you're going to
be using these things.

00:19:24.000 --> 00:19:24.708
So we're careful.

00:19:24.708 --> 00:19:27.562
We don't let ourselves using
enums, but in our public APIs,

00:19:27.562 --> 00:19:29.270
but that shouldn't
let you from using it.

00:19:29.270 --> 00:19:30.870
Like, keep you from using them.

00:19:30.870 --> 00:19:32.696
ROMAIN GUY: This is
where we use both.

00:19:32.696 --> 00:19:35.070
So the [INAUDIBLE] drawing
API is a good example.

00:19:35.070 --> 00:19:38.120
Some of the parameters, like
the transfer modes, the blending

00:19:38.120 --> 00:19:40.730
modes, they'll define
the enums on the side,

00:19:40.730 --> 00:19:42.980
but when you create an object
with one of those enums,

00:19:42.980 --> 00:19:46.380
we turned the enum
into an int internally.

00:19:46.380 --> 00:19:48.550
So we use both at the same time.

00:19:48.550 --> 00:19:49.300
GEORGE MOUNT: Wow.

00:19:49.300 --> 00:19:52.311
Don't follow that example.

00:19:52.311 --> 00:19:55.010
CHET HAASE: Actually,
the framework usage,

00:19:55.010 --> 00:19:57.984
or lack thereof of
enums is a good example.

00:19:57.984 --> 00:19:59.900
One of the places that
we really wanted people

00:19:59.900 --> 00:20:03.080
to understand where it may
bite you or your developers,

00:20:03.080 --> 00:20:04.660
is in developing libraries.

00:20:04.660 --> 00:20:08.176
The reason that we don't use
them in our APIs in general,

00:20:08.176 --> 00:20:11.180
is that we would then inflict
that damage upon your app.

00:20:11.180 --> 00:20:12.760
And we do not know
what your app is

00:20:12.760 --> 00:20:14.570
going to try to do
with all those APIs.

00:20:14.570 --> 00:20:17.470
So wouldn't it be better if
we streamlined our APIs so

00:20:17.470 --> 00:20:19.370
that you didn't
suffer repercussions

00:20:19.370 --> 00:20:21.232
that we couldn't foresee?

00:20:21.232 --> 00:20:23.440
On the same hand, if you're
developing a library that

00:20:23.440 --> 00:20:25.920
is then going to be used by
tons of application developers,

00:20:25.920 --> 00:20:29.890
you should think very carefully
about using things like that.

00:20:29.890 --> 00:20:32.610
Because again, you are
making a policy decision

00:20:32.610 --> 00:20:36.182
on behalf of the users, the
clients of your library.

00:20:36.182 --> 00:20:37.890
So there it becomes
a lot more important,

00:20:37.890 --> 00:20:41.270
instead of in your application,
you want to use an enum,

00:20:41.270 --> 00:20:42.410
knock yourself.

00:20:42.410 --> 00:20:43.585
I really couldn't care less.

00:20:43.585 --> 00:20:45.710
If you're writing a library,
be aware of the danger

00:20:45.710 --> 00:20:49.070
before you do that, and measure
to make sure the real effect.

00:20:49.070 --> 00:20:51.500
ROMAIN GUY: And if you
want a great example

00:20:51.500 --> 00:20:55.630
of how not to use them so
recently PY from Square.

00:20:55.630 --> 00:20:57.080
A friend of mine.

00:20:57.080 --> 00:20:59.577
We used the library
called fragnums,

00:20:59.577 --> 00:21:02.160
where it shows you how you can
replace fragments within enums.

00:21:08.970 --> 00:21:09.606
It works.

00:21:13.207 --> 00:21:15.290
DAN GALLUP: Let's go to
another audience question.

00:21:15.290 --> 00:21:17.130
And please, if have
questions, line up.

00:21:17.130 --> 00:21:19.500
We really do want to
answer your questions.

00:21:19.500 --> 00:21:21.010
This is an incredibly
rare thing.

00:21:21.010 --> 00:21:23.900
We haven't done one
of these since 2014,

00:21:23.900 --> 00:21:26.876
so please come and line
up and ask your questions.

00:21:26.876 --> 00:21:28.250
AUDIENCE: I don't
have a question

00:21:28.250 --> 00:21:31.290
I'm here to plug my talk
tomorrow about Android testing.

00:21:31.290 --> 00:21:33.150
[LAUGHTER]

00:21:33.150 --> 00:21:34.630
We will talk about--

00:21:34.630 --> 00:21:36.630
DAN GALLUP: Couldn't see
you from that distance.

00:21:36.650 --> 00:21:39.460
AUDIENCE: We will to be talking
about testing in isolation.

00:21:39.460 --> 00:21:41.680
And in fact, if you're
watching this on YouTube,

00:21:41.680 --> 00:21:47.300
just switch to the
YouTube video right now.

00:21:47.300 --> 00:21:50.186
ROMAIN GUY: Then we
need a net blocker.

00:21:50.186 --> 00:21:51.545
DAN GALLUP: Exactly.

00:21:51.545 --> 00:21:52.810
I know.

00:21:52.810 --> 00:21:54.497
And actually there
are questions that

00:21:54.497 --> 00:21:56.830
are going to be answered in
a whole bunch of great talks

00:21:56.830 --> 00:21:57.720
we have for tomorrow.

00:21:57.720 --> 00:22:01.565
So don't let that stop you from
actually asking questions now.

00:22:01.565 --> 00:22:05.310
AUDIENCE: So yeah, the
short answer is isolation.

00:22:05.310 --> 00:22:10.990
Isolating from the framework,
and EMS core and everything.

00:22:10.990 --> 00:22:13.390
DAN GALLUP: Next
actual question.

00:22:13.390 --> 00:22:15.140
CHET HAASE: Or you
could provide an answer

00:22:15.140 --> 00:22:16.264
to someone else's question.

00:22:16.264 --> 00:22:18.445
DAN GALLUP: Exactly.

00:22:18.445 --> 00:22:20.740
AUDIENCE: So I asked this
of the people on stage,

00:22:20.740 --> 00:22:23.670
but I want to broaden the
question to all of you.

00:22:23.670 --> 00:22:25.640
So will there ever
be style guidelines

00:22:25.640 --> 00:22:30.140
for XML resources and all
the XML we write, basically?

00:22:30.140 --> 00:22:33.240
Because the SDK uses
different versions.

00:22:33.240 --> 00:22:37.010
We have Camelcase
and we underscore.

00:22:37.010 --> 00:22:40.310
I've seen tons of
different variants.

00:22:40.310 --> 00:22:43.840
ADAM POWELL: This, I think, uses
a pretty consistent convention

00:22:43.840 --> 00:22:44.800
for some of this stuff.

00:22:44.800 --> 00:22:48.190
It uses the conventions based
on the type of resources

00:22:48.190 --> 00:22:49.190
that they are.

00:22:49.190 --> 00:22:53.938
So Dianne, if you
want to jump in and--

00:22:53.938 --> 00:22:56.290
DIANNE HACKBORN: You want me
to explain the convention?

00:22:56.290 --> 00:22:58.070
It's too complicated.

00:22:58.070 --> 00:22:59.450
[INAUDIBLE]

00:22:59.450 --> 00:23:01.145
ROMAIN GUY: I can
examine some of them.

00:23:01.145 --> 00:23:05.305
So in attributes, underscores,
in tag names, dashes,

00:23:05.305 --> 00:23:08.180
but if the tag name is
a view, then camel case.

00:23:12.599 --> 00:23:14.321
AUDIENCE: That was
perfectly clear.

00:23:14.321 --> 00:23:18.350
DIANNE HACKBORN: And that's
not even actually right.

00:23:18.350 --> 00:23:21.580
So part of the convention came
because a lot of resources

00:23:21.580 --> 00:23:24.160
come from just files on the
file system, so we realized,

00:23:24.160 --> 00:23:25.920
oh well, you can't
use case for those

00:23:25.920 --> 00:23:28.610
because you can be on caseless
file systems and stuff.

00:23:28.610 --> 00:23:32.220
And so a lot of those get
forced into just pure lower

00:23:32.220 --> 00:23:34.650
case with underscores,
which we don't like.

00:23:34.650 --> 00:23:36.900
So we use different things
elsewhere, because why not?

00:23:40.720 --> 00:23:43.520
For attributes, we use
the convention that where,

00:23:43.520 --> 00:23:46.360
because attributes can either
be for the child or the parent,

00:23:46.360 --> 00:23:48.260
we have the convention
where it's layout,

00:23:48.260 --> 00:23:49.930
under score, and then a name.

00:23:49.930 --> 00:23:52.210
Or else the other name
with camel case, so

00:23:52.210 --> 00:23:55.244
that you can distinguish them.

00:23:55.244 --> 00:23:57.035
Yeah, the conventions
are very complicated.

00:23:57.035 --> 00:23:58.675
ROMAIN GUY: And the
attributes mostly

00:23:58.675 --> 00:24:02.460
have of the names of the
setters and fields in Java.

00:24:02.460 --> 00:24:03.960
Mostly.

00:24:03.960 --> 00:24:06.130
ADAM POWELL: So what
I'm hearing is maybe

00:24:06.130 --> 00:24:08.740
we should have a more
discoverable point

00:24:08.740 --> 00:24:11.100
of documentation for this.

00:24:11.100 --> 00:24:13.210
CHET HAASE: We'll make a
transcript of this video

00:24:13.210 --> 00:24:15.076
and publish that.

00:24:15.076 --> 00:24:17.438
ADAM POWELL: Hey Chet, can
you put that on your blog?

00:24:20.086 --> 00:24:21.460
DAN GALLUP: Next
question please.

00:24:24.090 --> 00:24:26.660
AUDIENCE: So without
getting into another enum

00:24:26.660 --> 00:24:29.200
type of discussion,
which I don't want to--

00:24:29.200 --> 00:24:32.095
DAN GALLUP: We can enumerate
the enum discussions.

00:24:32.095 --> 00:24:34.220
AUDIENCE: After.

00:24:34.220 --> 00:24:34.940
I am curious.

00:24:34.940 --> 00:24:38.230
So what do you guys think of
Kodaline in the ecosystem,

00:24:38.230 --> 00:24:40.590
and potentially
having second language

00:24:40.590 --> 00:24:42.738
becoming predominant
within the community?

00:24:48.142 --> 00:24:50.700
GEORGE MOUNT: Kodaline
is completely supported.

00:24:50.700 --> 00:24:52.050
It completely supports Android.

00:24:52.050 --> 00:24:56.054
So that's not really
an issue there, right?

00:24:56.054 --> 00:24:58.220
ADAM POWELL: There's a big
difference between having

00:24:58.220 --> 00:25:00.840
official supporters, and
go tick the box in your IDE

00:25:00.840 --> 00:25:03.160
and get the plug-in installed
and it works, versus

00:25:03.160 --> 00:25:05.325
having really idiomatic
API support around it.

00:25:05.325 --> 00:25:07.075
I assume that that's
what you mean, right?

00:25:07.075 --> 00:25:08.075
AUDIENCE: Yeah, exactly.

00:25:08.075 --> 00:25:12.270
ADAM POWELL: Yeah, so-- Yeah,
I guess we can all kind of riff

00:25:12.270 --> 00:25:13.220
on parts of this.

00:25:13.220 --> 00:25:16.390
I mean, as a language
itself, several of us

00:25:16.390 --> 00:25:19.140
have kind of looked at it and
spent a little bit of time

00:25:19.140 --> 00:25:23.070
with it, just kind of some
Sandboxy types of environments.

00:25:23.070 --> 00:25:24.330
And it's pretty cool.

00:25:24.330 --> 00:25:26.810
They've made a lot of
decisions that I think really

00:25:26.810 --> 00:25:31.802
are in keeping with certain
patterns of efficiency

00:25:31.802 --> 00:25:33.510
that we look for for
something that would

00:25:33.510 --> 00:25:36.180
be targeting mobile like this.

00:25:36.180 --> 00:25:38.494
Any one else wants
jump in from there?

00:25:38.494 --> 00:25:40.160
YIGIT BOYAR: I'm
probably the person who

00:25:40.160 --> 00:25:41.480
likes the language most here.

00:25:41.480 --> 00:25:45.980
But the problem is
it's not like we use it

00:25:45.980 --> 00:25:48.360
in data binding while parsing.

00:25:48.360 --> 00:25:52.200
And we use it to prototype
a lot internally.

00:25:52.200 --> 00:25:55.180
But to put a framework
support behind it

00:25:55.180 --> 00:25:57.022
is a significant step for us.

00:25:57.022 --> 00:25:58.980
That means like what do
you know the people who

00:25:58.980 --> 00:25:59.800
wants to use Java.

00:25:59.800 --> 00:26:01.800
And what do we do for
the people who really

00:26:01.800 --> 00:26:03.220
cares about the differences?

00:26:03.220 --> 00:26:05.730
So this is a big
decision, and I don't

00:26:05.730 --> 00:26:08.370
see the benefit of doing
it while you can just

00:26:08.370 --> 00:26:09.440
use Kodaline.

00:26:09.440 --> 00:26:12.710
I know so many people just
writing their apps in Kodaline.

00:26:12.710 --> 00:26:15.000
And I think it's in a
good state right now.

00:26:15.000 --> 00:26:17.530
I think further is
big commitment for us

00:26:17.530 --> 00:26:21.115
that not easy to take.

00:26:21.115 --> 00:26:22.490
AUDIENCE: Does it
sound like it's

00:26:22.490 --> 00:26:25.210
one of those things where if
it becomes largely supported

00:26:25.210 --> 00:26:27.670
within the community, it
would at least be something

00:26:27.670 --> 00:26:31.100
that you would try to not
actively try to break?

00:26:34.737 --> 00:26:36.570
CHET HAASE: That was
like a triple negative.

00:26:39.086 --> 00:26:40.710
GEORGE MOUNT: I don't
think we're going

00:26:40.710 --> 00:26:42.960
to actively discourage you.

00:26:42.960 --> 00:26:44.470
AUDIENCE: There's no animosity.

00:26:44.470 --> 00:26:45.590
ADAM POWELL: No, no, no.

00:26:45.590 --> 00:26:48.964
I think that there was like,
for example a few versions ago,

00:26:48.964 --> 00:26:50.380
part of the language
specification

00:26:50.380 --> 00:26:53.201
was such that the code
generated by Kodaline

00:26:53.201 --> 00:26:55.700
made it very difficult to do
things like write custom views.

00:26:55.700 --> 00:26:58.260
Because you couldn't have
enough overloaded view

00:26:58.260 --> 00:27:01.100
constructors to allow
the inflation process

00:27:01.100 --> 00:27:03.870
to happen idiomatically.

00:27:03.870 --> 00:27:06.090
And they've since
addressed things like that.

00:27:06.090 --> 00:27:08.506
And those are things where I
think that they've definitely

00:27:08.506 --> 00:27:10.320
got their eyes on
Android in a lot of ways,

00:27:10.320 --> 00:27:12.670
just as evidenced by
changes like that and some

00:27:12.670 --> 00:27:17.100
of the discussions that went
on around that type of change.

00:27:17.100 --> 00:27:21.680
So I think that it'll be
kind of interesting to see

00:27:21.680 --> 00:27:23.644
where things go.

00:27:23.644 --> 00:27:25.310
ROMAIN GUY: But several
years ago people

00:27:25.310 --> 00:27:26.720
were asking the same
question about Scala.

00:27:26.720 --> 00:27:29.010
And it's going to be a bunch
of different languages.

00:27:29.010 --> 00:27:32.582
So it's always going
to be something new.

00:27:32.582 --> 00:27:34.290
And the thing is, the
Android [INAUDIBLE]

00:27:34.290 --> 00:27:37.180
works, it takes Java
bytecode from Java C,

00:27:37.180 --> 00:27:40.947
so if the language I would say
good bytecode, should work.

00:27:40.947 --> 00:27:42.280
At least you didn't ask for C++.

00:27:42.280 --> 00:27:44.966
So that's nice.

00:27:44.966 --> 00:27:46.070
AUDIENCE: Thank you.

00:27:46.070 --> 00:27:47.640
DAN GALLUP: Awesome.

00:27:47.640 --> 00:27:49.230
Next question.

00:27:49.230 --> 00:27:50.730
AUDIENCE: Yeah,
it's good to hear

00:27:50.730 --> 00:27:54.450
about the new Android
Development Studio

00:27:54.450 --> 00:27:55.490
features coming out.

00:27:55.490 --> 00:27:57.350
But I'm curious
about what's being

00:27:57.350 --> 00:27:59.070
done for the sort
of pure editor,

00:27:59.070 --> 00:28:01.750
you know, Emacs,
VI kind of people.

00:28:01.750 --> 00:28:05.920
Like, stand alone, layout views?

00:28:05.920 --> 00:28:07.780
Is there any focus on that?

00:28:07.780 --> 00:28:09.260
And especially guides as well.

00:28:09.260 --> 00:28:12.750
Like about how to do things
without immersing yourself

00:28:12.750 --> 00:28:15.580
into that experience.

00:28:15.580 --> 00:28:18.425
ADAM POWELL: Just stop worrying
and love the bond, man.

00:28:18.425 --> 00:28:21.000
CHET HAASE: We can
channel Stephanie

00:28:21.000 --> 00:28:22.870
from this morning's keynote.

00:28:22.870 --> 00:28:27.018
There is no better time
to start using Android.

00:28:27.018 --> 00:28:30.952
AUDIENCE: I've been using
Emacs for like 20 years.

00:28:30.952 --> 00:28:33.410
DAN GALLUP: I mean Gradle is
pretty usable from the command

00:28:33.410 --> 00:28:33.550
line.

00:28:33.550 --> 00:28:34.664
I've certainly done that.

00:28:34.664 --> 00:28:36.580
If you absolutely want
to use your own editor.

00:28:36.580 --> 00:28:38.246
But the thing is
what's great about what

00:28:38.246 --> 00:28:41.100
we're doing in Android Studio is
all of this runtime, real time

00:28:41.100 --> 00:28:42.600
code updates--
things that you can't

00:28:42.600 --> 00:28:45.769
do very easily with
those kinds of tools.

00:28:45.769 --> 00:28:47.310
So I mean we could
build integrations

00:28:47.310 --> 00:28:48.185
for each one of them.

00:28:48.185 --> 00:28:50.180
But I think that it
really is a great time

00:28:50.180 --> 00:28:51.880
to go out and try what we're
doing with Android Studio.

00:28:51.880 --> 00:28:52.780
Anyone want to comment on that?

00:28:52.780 --> 00:28:54.655
ADAM POWELL: Joking
aside, I would definitely

00:28:54.655 --> 00:28:57.257
pose the same question to some
of the tools folks tomorrow.

00:28:57.257 --> 00:28:59.090
That was the other thing
I was going to say.

00:28:59.090 --> 00:29:01.390
We have a Fireside Chat with
all the Tools team tomorrow.

00:29:01.390 --> 00:29:03.431
So if you really want to
get this kind of support

00:29:03.431 --> 00:29:06.000
available for other editors
and other tool chains,

00:29:06.000 --> 00:29:09.920
definitely ask the
question to them as well.

00:29:09.920 --> 00:29:11.540
And now they'll be
prepared for it.

00:29:14.950 --> 00:29:16.491
DAN GALLUP: All
right, next question.

00:29:16.491 --> 00:29:19.920
AUDIENCE: Hello again.

00:29:19.920 --> 00:29:22.170
This might be covered in one
of tomorrows talks maybe,

00:29:22.170 --> 00:29:26.280
but I was wondering if the
update on Jack and Jill

00:29:26.280 --> 00:29:28.200
might be provided?

00:29:28.200 --> 00:29:31.770
And also, what the
implications of

00:29:31.770 --> 00:29:37.210
that would be on using a
language such as Kodaline?

00:29:37.210 --> 00:29:37.929
Thank you.

00:29:37.929 --> 00:29:39.720
DAN GALLUP: Anyone want
to comment on this,

00:29:39.720 --> 00:29:41.170
or do want to punt
it to tomorrow?

00:29:41.170 --> 00:29:41.880
It's up to all of you.

00:29:41.880 --> 00:29:42.440
DIANNE HACKBORN: Tomorrow.

00:29:42.440 --> 00:29:43.182
It's punted.

00:29:44.934 --> 00:29:47.350
DAN GALLUP: I think that's a
better question for the Tools

00:29:47.350 --> 00:29:48.100
team for tomorrow.

00:29:48.100 --> 00:29:49.930
Again, for the
Fireside Chat there.

00:29:49.930 --> 00:29:51.620
So thanks thought.

00:29:51.620 --> 00:29:53.294
We'll definitely come back.

00:29:53.294 --> 00:29:54.960
ADAM POWELL: Are we
taking some of these

00:29:54.960 --> 00:29:57.810
down so that we can just feed
it into the initial questions?

00:29:57.810 --> 00:29:59.879
DAN GALLUP: That's a good point.

00:29:59.879 --> 00:30:01.920
CHET HAASE: Anybody else
have any other questions

00:30:01.920 --> 00:30:04.300
for tomorrow's session?

00:30:04.300 --> 00:30:08.532
DAN GALLUP: I can type.

00:30:08.532 --> 00:30:09.490
Next audience question.

00:30:09.490 --> 00:30:10.960
All seriousness.

00:30:10.960 --> 00:30:16.300
Audience: Yeah, we've been doing
camera work since early 2012.

00:30:16.300 --> 00:30:21.260
And life hasn't gotten
a lot easier for us.

00:30:21.260 --> 00:30:23.780
I think that the camera
2 APIs are great,

00:30:23.780 --> 00:30:26.420
but even on phones
that support those,

00:30:26.420 --> 00:30:29.420
some the functionality is kind
of invisible, it doesn't work.

00:30:31.849 --> 00:30:33.390
I understand that
it's very difficult

00:30:33.390 --> 00:30:34.920
to support such a
large ecosystem,

00:30:34.920 --> 00:30:38.140
but I'm wondering if you guys
view that as your problem

00:30:38.140 --> 00:30:41.040
or kind of our problem?

00:30:41.040 --> 00:30:47.450
Because it's something that
family members, friends sort of

00:30:47.450 --> 00:30:50.550
refuse to use the apps we
build because oftentimes

00:30:50.550 --> 00:30:52.700
the connection to
the media player,

00:30:52.700 --> 00:30:54.600
or the connection to
the media hardware,

00:30:54.600 --> 00:30:57.879
recording is just unpredictable.

00:30:57.879 --> 00:31:00.170
And I'm wondering what you
guys are doing towards that?

00:31:00.170 --> 00:31:02.020
And if you do view
it as your problem,

00:31:02.020 --> 00:31:05.790
or if you kind of think of Nexus
as sort of your little world?

00:31:05.790 --> 00:31:07.790
RACHAD ALAO: It's definitely
an Android problem.

00:31:07.790 --> 00:31:09.520
And that's something
that we spend a lot

00:31:09.520 --> 00:31:10.960
of time trying to resolve.

00:31:10.960 --> 00:31:13.390
So our first step was
bringing a new API

00:31:13.390 --> 00:31:15.970
that could enable you guys to
develop great applications.

00:31:15.970 --> 00:31:17.410
So that's the
first thing we did.

00:31:17.410 --> 00:31:19.940
And the second thing
is basically make sure

00:31:19.940 --> 00:31:23.120
that it's adapted and
B, it's well tested.

00:31:23.120 --> 00:31:26.570
So on the testing side, we
revamp out testing and pressure

00:31:26.570 --> 00:31:30.290
to do add additional mandatory
tests for around image quality,

00:31:30.290 --> 00:31:32.940
and also around the APIs
that are being used.

00:31:32.940 --> 00:31:34.460
If you're familiar
with camera 2,

00:31:34.460 --> 00:31:37.500
the API surface is really huge.

00:31:37.500 --> 00:31:40.720
And I think what you're seeing
there is because the surface is

00:31:40.720 --> 00:31:43.820
so large, it's hard to
test all the combinations

00:31:43.820 --> 00:31:46.180
of every single instance
of other parameters

00:31:46.180 --> 00:31:47.410
you can configure.

00:31:47.410 --> 00:31:51.740
We're making progress, but
the coverage is far from 100%.

00:31:51.740 --> 00:31:54.490
But for us it's a top
priority, because without that,

00:31:54.490 --> 00:31:57.600
you cannot have a consistent set
of applications being developed

00:31:57.600 --> 00:32:00.880
and have those applications work
across the ecosystem perfectly.

00:32:00.880 --> 00:32:02.230
So we're on it.

00:32:02.230 --> 00:32:05.490
It's one step at a
time, but clearly it's

00:32:05.490 --> 00:32:07.630
a top priority to make
sure that that coverage is

00:32:07.630 --> 00:32:10.340
as wide as possible to cover
as many use cases, as possible.

00:32:13.406 --> 00:32:15.390
DAN GALLUP: All
right, next question.

00:32:15.390 --> 00:32:16.860
AUDIENCE: Can you
give us a sense

00:32:16.860 --> 00:32:19.515
on how big the end the
Android Framework team is

00:32:19.515 --> 00:32:22.470
and how it has grown
the past few years?

00:32:22.470 --> 00:32:23.810
RACHAD ALAO: It's all of us.

00:32:23.810 --> 00:32:24.802
That's it.

00:32:28.010 --> 00:32:29.484
ADAM POWELL: We
have to constrain

00:32:29.484 --> 00:32:32.150
the size of the team to how many
people we can fit on the stage.

00:32:34.740 --> 00:32:37.230
So really the size of the team
is mostly just constrained

00:32:37.230 --> 00:32:41.530
by the size of the
buildings that they give us.

00:32:41.530 --> 00:32:44.475
DAN GALLUP: It's not
constrained by that.

00:32:44.475 --> 00:32:46.350
They figured out more
ways of smashing people

00:32:46.350 --> 00:32:47.150
into smaller spaces.

00:32:47.150 --> 00:32:47.730
That's all I'm saying.

00:32:47.730 --> 00:32:48.790
ADA M POWELL: Well, yes.

00:32:48.790 --> 00:32:51.680
I mean we did have one
of our other team members

00:32:51.680 --> 00:32:54.430
visiting from a remote
office where there's

00:32:54.430 --> 00:32:56.830
photographic evidence
of him setting up

00:32:56.830 --> 00:33:00.150
a temporary desk, which
consisted of him stacking two

00:33:00.150 --> 00:33:02.389
empty cardboard boxes,
one on top of another,

00:33:02.389 --> 00:33:03.930
next to a white
board, on which there

00:33:03.930 --> 00:33:06.230
was a drawing of a
little house plant.

00:33:08.790 --> 00:33:14.272
So we got some constraints that
we're optimizing for in that.

00:33:14.272 --> 00:33:16.730
CHET HAASE: The team is a lot
smaller than you would think.

00:33:16.730 --> 00:33:17.590
JEFF SHARKEY: Yeah,
and I would say

00:33:17.590 --> 00:33:19.450
you could actually derive
the answer to that by looking

00:33:19.450 --> 00:33:20.470
at the git logs.

00:33:20.470 --> 00:33:23.136
Probably work and figure out how
many people are making commits,

00:33:23.136 --> 00:33:25.775
and who the core members are.

00:33:25.775 --> 00:33:29.990
ADAM POWELL: And the rest
of us are going to meetings.

00:33:29.990 --> 00:33:31.195
DAN GALLUP: Next question.

00:33:31.195 --> 00:33:33.972
AUDIENCE: My question is not
only about Android, but also

00:33:33.972 --> 00:33:35.360
about Chrome.

00:33:35.360 --> 00:33:39.210
Very many women Googly may
merge the Android system

00:33:39.210 --> 00:33:40.885
and the Chrome system together.

00:33:40.885 --> 00:33:42.620
Can you share something
more about it?

00:33:42.620 --> 00:33:47.060
And when do we really able
to build an Android app,

00:33:47.060 --> 00:33:49.750
and also able to run
on the Chrome System

00:33:49.750 --> 00:33:51.860
DAN GALLUP: We have
Arc Welder already.

00:33:51.860 --> 00:33:52.837
So let's just say that.

00:33:52.837 --> 00:33:54.420
If you really want
to run your Android

00:33:54.420 --> 00:33:58.110
app on top of Chrome OS, we
do have a solution for that.

00:33:58.110 --> 00:34:01.574
And as far as the other
answer, no comment.

00:34:01.574 --> 00:34:03.580
JEFF SHARKEY: That would
be one of those asking

00:34:03.580 --> 00:34:06.544
about the future questions.

00:34:06.544 --> 00:34:08.715
AUDIENCE: I wanted
to ask whether there

00:34:08.715 --> 00:34:13.489
will be ORM support
for Scaloid on Android

00:34:13.489 --> 00:34:16.139
because we have been writing
a lot of boilerplate code

00:34:16.139 --> 00:34:17.610
around it.

00:34:17.610 --> 00:34:19.810
And if it was there,
it would be useful.

00:34:24.276 --> 00:34:25.900
YIGIT BOYAR: So this
is the [INAUDIBLE]

00:34:25.900 --> 00:34:29.809
or something I personally
told I want working well.

00:34:29.809 --> 00:34:31.600
It's a little bit
inhibitive, because there

00:34:31.600 --> 00:34:34.310
is a bunch of really
good solutions

00:34:34.310 --> 00:34:36.260
that work well, like
there's ORM libraries.

00:34:36.260 --> 00:34:38.159
I use one of them for the demo.

00:34:38.159 --> 00:34:39.639
It's a company called DRAM.

00:34:39.639 --> 00:34:42.000
They're doing really cool stuff.

00:34:42.000 --> 00:34:46.550
So we are debating whether
the community's are coming up

00:34:46.550 --> 00:34:49.900
with good solutions, and
we really bringing one more

00:34:49.900 --> 00:34:53.219
solution to the table on this or
we do something better doesn't

00:34:53.219 --> 00:34:55.050
seem to add a new value.

00:34:55.050 --> 00:34:57.660
So if we think that we
can do something better,

00:34:57.660 --> 00:34:59.210
we will provide it.

00:34:59.210 --> 00:35:01.900
Otherwise there's a great
open source solutions

00:35:01.900 --> 00:35:03.065
that you can choose from.

00:35:03.065 --> 00:35:05.360
AUDIENCE: And which one do you--

00:35:05.360 --> 00:35:07.030
YIGIT BOYAR: I cannot name any.

00:35:07.030 --> 00:35:09.070
AUDIENCE: OK.

00:35:09.070 --> 00:35:12.120
And I know you asked, you
told that there should not

00:35:12.120 --> 00:35:17.370
be any future feature
questions, but will they

00:35:17.370 --> 00:35:22.494
be a new SQL
Solutions for Android?

00:35:22.494 --> 00:35:25.612
YIGIT BOYAR: Same as you could
use leveldb I mean there's--

00:35:25.612 --> 00:35:26.320
DAN GALLUP: Yeah.

00:35:26.320 --> 00:35:28.490
There's open source
projects that are there.

00:35:28.490 --> 00:35:31.540
And I think that without
expanding the framework

00:35:31.540 --> 00:35:35.140
tremendously, I think there are
great opportunities out there

00:35:35.140 --> 00:35:36.900
if you don't like
what we have built in.

00:35:36.900 --> 00:35:37.650
YIGIT BOYAR: Yeah.

00:35:37.650 --> 00:35:39.330
It's more like we
have a limited-- like,

00:35:39.330 --> 00:35:40.788
we have 12 people
in the Framework.

00:35:44.800 --> 00:35:48.950
We tend to spend our
resources more efficiently.

00:35:48.950 --> 00:35:52.609
So writing a key value
database for Android,

00:35:52.609 --> 00:35:54.150
doesn't really make
sense while there

00:35:54.150 --> 00:35:56.012
are great solutions there.

00:35:56.012 --> 00:35:58.760
CHET HAASE: It's more about
providing the infrastructure

00:35:58.760 --> 00:36:02.390
that other people can build on
for domain specific solutions.

00:36:02.390 --> 00:36:04.836
So if what we were
providing was so limited

00:36:04.836 --> 00:36:06.710
that nobody was providing
these other things,

00:36:06.710 --> 00:36:10.125
or they were inherently too
expensive for people to use,

00:36:10.125 --> 00:36:11.750
then clearly there
is something that we

00:36:11.750 --> 00:36:14.960
can do in the infrastructure
to enable that ecosystem.

00:36:14.960 --> 00:36:16.550
If that ecosystem
is already enabled,

00:36:16.550 --> 00:36:20.822
what value are we adding by just
adding something else to it?

00:36:20.822 --> 00:36:22.280
I mean, again,
leveldb is something

00:36:22.280 --> 00:36:23.520
that's pretty brilliant.

00:36:23.520 --> 00:36:25.690
And one thing we could
do is make it easier

00:36:25.690 --> 00:36:28.920
to integrate that with Android
as a tool kit that's available,

00:36:28.920 --> 00:36:31.950
but again, it's out there
and it's a really well

00:36:31.950 --> 00:36:34.700
supported open source project.

00:36:34.700 --> 00:36:38.009
DAN GALLUP: Next
question please.

00:36:38.009 --> 00:36:39.800
AUDIENCE: There's some
things that I end up

00:36:39.800 --> 00:36:42.070
doing in Android that kind
of make me feel dirty,

00:36:42.070 --> 00:36:43.570
and like there must
be a better way.

00:36:43.570 --> 00:36:45.270
Oh no.

00:36:45.270 --> 00:36:47.030
There must be a better way.

00:36:47.030 --> 00:36:48.234
I look on Stack Overflow.

00:36:48.234 --> 00:36:49.900
DAN GALLUP: Is this
safe for this event?

00:36:49.900 --> 00:36:50.483
AUDIENCE: Yes.

00:36:53.370 --> 00:36:56.430
And I look on Stack Overflow,
trying to find a better

00:36:56.430 --> 00:36:58.430
solution, and I can't really.

00:36:58.430 --> 00:37:00.330
And the consensus
there is just--

00:37:00.330 --> 00:37:02.350
so here's the example it
relate to the database.

00:37:02.350 --> 00:37:06.730
It's just like creating
an application just

00:37:06.730 --> 00:37:11.100
to get a static context that
you can pass the skill database,

00:37:11.100 --> 00:37:15.170
if it's accessing data,
and its life cycle

00:37:15.170 --> 00:37:16.567
is longer than an activity.

00:37:20.290 --> 00:37:22.960
I mean, that's the consensus of
how to do it on Stack Overflow.

00:37:22.960 --> 00:37:27.600
Like, if you just use
the application context,

00:37:27.600 --> 00:37:30.620
and the application goes through
its lifecycle, that turns null

00:37:30.620 --> 00:37:32.221
and your database crashes.

00:37:32.221 --> 00:37:33.595
DIANNE HACKBORN:
That's not true.

00:37:33.595 --> 00:37:35.890
AUDIENCE: Yeah, it does.

00:37:35.890 --> 00:37:38.254
DAN GALLUP: I was gonna
say, wait, hold on.

00:37:38.254 --> 00:37:40.420
DIANNE HACKBORN: The
application context is created.

00:37:40.420 --> 00:37:44.344
It's a global to the process,
so it does not go away.

00:37:44.344 --> 00:37:45.510
The other process goes away.

00:37:45.510 --> 00:37:47.242
DAN GALLUP: Emac, yeah.

00:37:47.242 --> 00:37:48.700
In fact, that's
the biggest problem

00:37:48.700 --> 00:37:50.241
with using the
application context is

00:37:50.241 --> 00:37:51.410
that it doesn't go away.

00:37:51.410 --> 00:37:54.310
So you've got to be really
careful that you put in there.

00:37:54.310 --> 00:37:55.070
AUDIENCE: OK.

00:37:55.070 --> 00:37:59.130
Well, I'll take it up
afterward if I'm wrong.

00:37:59.130 --> 00:38:02.780
And know I feel really dirty.

00:38:02.780 --> 00:38:05.059
ROMAIN GUY: She does
it to us all the time.

00:38:05.059 --> 00:38:07.100
DAN GALLUP: But most of
the time-- a lot of times

00:38:07.100 --> 00:38:08.812
when you're using
application contacts,

00:38:08.812 --> 00:38:10.270
there's probably
a better solution.

00:38:10.270 --> 00:38:11.478
That would be my other thing.

00:38:11.478 --> 00:38:13.300
If you find yourself
using it, there's

00:38:13.300 --> 00:38:15.610
a good chance you are
doing something very--

00:38:15.610 --> 00:38:16.690
DIANNE HACKBORN: There are
good reasons to use it.

00:38:16.690 --> 00:38:19.160
If you want to keep things
outside of your activity.

00:38:19.160 --> 00:38:21.284
But you just need to be
aware that you're doing it.

00:38:26.480 --> 00:38:29.652
DAN GALLUP: Next question.

00:38:29.652 --> 00:38:32.796
AUDIENCE: I have a
question about permissions.

00:38:32.796 --> 00:38:36.870
So how to gracefully
handle the situation

00:38:36.870 --> 00:38:40.240
when the user permanently
denies the permission,

00:38:40.240 --> 00:38:42.150
which is critical for your app.

00:38:42.150 --> 00:38:45.680
Let's say camera permission
for the camera app.

00:38:50.030 --> 00:38:51.690
DIANNE HACKBORN: I
think at that point,

00:38:51.690 --> 00:38:53.360
you're beyond
graceful solutions.

00:38:53.360 --> 00:38:55.530
It's like you now have a
fundamental disagreement

00:38:55.530 --> 00:38:56.780
with your user about whether--

00:38:59.660 --> 00:39:00.950
AUDIENCE: Well, OK.

00:39:00.950 --> 00:39:04.650
If the app uses the camera
permission in the app,

00:39:04.650 --> 00:39:07.030
and it's not that obvious
that it's camera app.

00:39:07.030 --> 00:39:11.830
Or for example, as I understand
there is no technical way

00:39:11.830 --> 00:39:17.105
to see if the permission
was apparently denied.

00:39:17.105 --> 00:39:17.852
Is that correct?

00:39:17.852 --> 00:39:20.060
DIANNE HACKBORN: Oh, you
can find out if it's denied.

00:39:20.060 --> 00:39:23.230
You can just check if
you have the permission.

00:39:23.230 --> 00:39:25.800
DAN GALLUP: You can always go
and say, hey, this permission

00:39:25.800 --> 00:39:27.450
is required to run the app.

00:39:27.450 --> 00:39:32.700
I mean that's certainly within
your purview as a developer.

00:39:32.700 --> 00:39:34.770
And make very clear
messaging around that.

00:39:34.770 --> 00:39:36.950
AUDIENCE: You don't
get any kind of hint

00:39:36.950 --> 00:39:40.130
that this permission was
permanently denied, right?

00:39:40.130 --> 00:39:42.890
Because in case if the
permission is permanently

00:39:42.890 --> 00:39:46.340
denied, you can
show the dialog, you

00:39:46.340 --> 00:39:53.850
have to open the Settings page,
and user have to manually check

00:39:53.850 --> 00:39:54.780
the permission box.

00:39:54.780 --> 00:39:55.410
DIANNE HACKBORN: Right.

00:39:55.410 --> 00:39:57.618
So I mean you can to try to
get the permission again.

00:39:57.618 --> 00:39:59.690
And you'll be told
that it was declined.

00:39:59.690 --> 00:40:02.247
And you can tell the user I
can't do this thing because I

00:40:02.247 --> 00:40:03.330
don't have the permission.

00:40:03.330 --> 00:40:06.310
But the idea behind this is that
if the user is gone, and said

00:40:06.310 --> 00:40:08.980
stop bugging me about
this permission,

00:40:08.980 --> 00:40:12.260
it's like you've kind of
passed the point where

00:40:12.260 --> 00:40:14.864
you're having a good
interaction with that user.

00:40:14.864 --> 00:40:16.780
They're getting annoyed
with your application,

00:40:16.780 --> 00:40:18.155
and we're just
trying to mitigate

00:40:18.155 --> 00:40:19.330
the situation at that point.

00:40:19.330 --> 00:40:22.025
So you should be trying to
be more proactive about when

00:40:22.025 --> 00:40:23.400
you first ask for
the permission,

00:40:23.400 --> 00:40:25.759
making sure they understand
why you're asking for it,

00:40:25.759 --> 00:40:27.050
and that they will agree to it.

00:40:27.050 --> 00:40:28.120
And if they don't
want to at that point,

00:40:28.120 --> 00:40:29.474
they'll probably just say no.

00:40:29.474 --> 00:40:30.890
And if you keep
on bothering them,

00:40:30.890 --> 00:40:35.160
then yes, they may at some
point say, stop asking me.

00:40:35.160 --> 00:40:37.680
But I think at that point you're
kind of passed explanations

00:40:37.680 --> 00:40:39.629
the user about what's going on.

00:40:39.629 --> 00:40:41.170
RACHEL GARB: From
what you're saying,

00:40:41.170 --> 00:40:43.870
it really does seem like
if the user doesn't accept

00:40:43.870 --> 00:40:45.620
the permission, they're
probably not going

00:40:45.620 --> 00:40:47.180
to use your app anyway,
because they're not

00:40:47.180 --> 00:40:48.888
going to get any
functionality out of it.

00:40:48.888 --> 00:40:49.740
Is that right?

00:40:49.740 --> 00:40:50.420
AUDIENCE: Yeah.

00:40:50.420 --> 00:40:53.602
Because everything
is around the camera.

00:40:53.602 --> 00:40:56.060
ROMAIN GUY: They're going to
leave a one star review saying

00:40:56.060 --> 00:40:58.630
your app doesn't work.

00:40:58.630 --> 00:41:01.250
AUDIENCE: I was thinking
how to-- like because it

00:41:01.250 --> 00:41:02.340
can happen by mistake.

00:41:02.340 --> 00:41:05.080
Because as you said,
the first time you

00:41:05.080 --> 00:41:07.210
ask for permission
without any explanations,

00:41:07.210 --> 00:41:09.130
you just ask, because
it's safe, right?

00:41:09.130 --> 00:41:12.650
Second time you explain,
but maybe this explanation

00:41:12.650 --> 00:41:15.500
didn't work, and
user permanently

00:41:15.500 --> 00:41:16.590
denies your permission.

00:41:16.590 --> 00:41:19.500
And then you're in this state
where you don't really know,

00:41:19.500 --> 00:41:21.780
is it permanently denied or not?

00:41:21.780 --> 00:41:23.595
And what to do.

00:41:23.595 --> 00:41:25.970
ADAM POWELL: So I think you
can use some parts of your UI

00:41:25.970 --> 00:41:28.511
to really try and communicate
a little bit more with the user

00:41:28.511 --> 00:41:31.370
before you get into that
completely crazy state.

00:41:31.370 --> 00:41:33.900
So the option to
permanently deny

00:41:33.900 --> 00:41:37.390
isn't available until the
second time you ask at least.

00:41:37.390 --> 00:41:39.750
So at the point where
it's denied for something

00:41:39.750 --> 00:41:41.910
like a camera app
for example, you

00:41:41.910 --> 00:41:45.350
can imagine your normal camera
preview window having instead

00:41:45.350 --> 00:41:48.030
some text that either
looks like a test pattern,

00:41:48.030 --> 00:41:50.630
has an explanation,
something clever,

00:41:50.630 --> 00:41:53.170
and says this is
a camera app, you

00:41:53.170 --> 00:41:58.770
need do let us access the camera
if you want this app to work.

00:41:58.770 --> 00:42:00.300
And try and pitch
your explanation

00:42:00.300 --> 00:42:02.207
as sort of like a zero
state or empty state,

00:42:02.207 --> 00:42:04.040
whenever the user is
looking at the data set

00:42:04.040 --> 00:42:05.970
that they would normally see
if you had the permission.

00:42:05.970 --> 00:42:08.650
And this kind of applies even
for beyond just camera apps

00:42:08.650 --> 00:42:09.150
as well.

00:42:09.150 --> 00:42:12.590
I was having a conversation with
developer outside just before

00:42:12.590 --> 00:42:15.160
this, that was specifically
around calendar events

00:42:15.160 --> 00:42:15.800
for example.

00:42:15.800 --> 00:42:16.750
And same thing.

00:42:16.750 --> 00:42:19.890
If an application needs
to access the calendar

00:42:19.890 --> 00:42:22.380
events for the day to
show some sort of agenda

00:42:22.380 --> 00:42:24.592
and it can't, then you can
show something meaningful

00:42:24.592 --> 00:42:26.050
in that empty state
and sort of try

00:42:26.050 --> 00:42:28.580
and explain to the user hey,
normally you would see this.

00:42:28.580 --> 00:42:31.360
You're not seeing this right
now because this permission was

00:42:31.360 --> 00:42:33.204
denied, click here to fix it.

00:42:33.204 --> 00:42:34.620
And you can kind
of guide the user

00:42:34.620 --> 00:42:37.750
through the steps of getting
back to your intended state.

00:42:37.750 --> 00:42:38.580
Or not.

00:42:38.580 --> 00:42:41.600
It may just be that they--
if it's not something

00:42:41.600 --> 00:42:43.247
completely integral
to your app, then

00:42:43.247 --> 00:42:45.330
maybe they're going to go
write a review about it.

00:42:45.330 --> 00:42:47.610
AUDIENCE: It's just
I just understood

00:42:47.610 --> 00:42:51.440
there is no onboarding of
this permission settings

00:42:51.440 --> 00:42:52.850
page for the users.

00:42:52.850 --> 00:42:56.850
So if the user apparently
denies the permission,

00:42:56.850 --> 00:43:01.510
he or she doesn't really
know how to turn it on back,

00:43:01.510 --> 00:43:04.940
because it's not really clear
that you have to go to the app

00:43:04.940 --> 00:43:08.020
settings, and then you have
to open this permission page,

00:43:08.020 --> 00:43:09.880
and you have to check--

00:43:09.880 --> 00:43:11.804
CHET HAASE: Then
that's maybe a language

00:43:11.804 --> 00:43:13.970
you need to provide to them
if they get into a state

00:43:13.970 --> 00:43:16.220
where clearly they want
this functionality.

00:43:16.220 --> 00:43:17.805
ADAM POWELL: I mean
you can move from

00:43:17.805 --> 00:43:20.350
an intent into the Settings
page for some of this stuff too.

00:43:20.350 --> 00:43:21.450
For the application info.

00:43:21.450 --> 00:43:23.090
YIGIT BOYAR: And
to be realistic,

00:43:23.090 --> 00:43:26.550
this is very, very
unlikely case.

00:43:26.550 --> 00:43:29.650
Real cases really wants
to use your application,

00:43:29.650 --> 00:43:33.530
but said no twice and said
permanently disable, by mistake

00:43:33.530 --> 00:43:34.670
all of this happened.

00:43:34.670 --> 00:43:38.510
I think it's fine they see a
pop up, it shows how to do it.

00:43:38.510 --> 00:43:40.165
And I think it's fine.

00:43:40.165 --> 00:43:41.730
RACHEL GARB: Focus
more on trying

00:43:41.730 --> 00:43:44.610
to get people to say
yes the first time.

00:43:44.610 --> 00:43:47.461
That's what you
really want to do.

00:43:47.461 --> 00:43:48.960
CHET HAASE: And in
the specific case

00:43:48.960 --> 00:43:50.720
of not being able to
display a picture,

00:43:50.720 --> 00:43:53.090
you could optionally provide
a thousand words instead.

00:43:59.840 --> 00:44:02.880
DAN GALLUP: Next question.

00:44:02.880 --> 00:44:04.290
AUDIENCE: First, thank you.

00:44:04.290 --> 00:44:06.846
It's about being with
a lot of analysts here.

00:44:09.860 --> 00:44:13.390
Today we can do a lot
with the persistence API,

00:44:13.390 --> 00:44:17.193
but why don't we have
a relational mapper?

00:44:19.790 --> 00:44:21.740
YIGIT BOYAR: I want
to do quick poll.

00:44:21.740 --> 00:44:23.640
We were wondering about this.

00:44:23.640 --> 00:44:26.810
How many people think that
we should provide something

00:44:26.810 --> 00:44:31.310
similar to N or M, or more
abstraction on top of the data.

00:44:31.310 --> 00:44:33.284
Can I see hands?

00:44:33.284 --> 00:44:34.950
How many people think
we should do this?

00:44:34.950 --> 00:44:36.450
DAN GALLUP: Who
want an Android ORM?

00:44:36.450 --> 00:44:38.856
Let's just be clear.

00:44:38.856 --> 00:44:40.130
ADAM POWELL: I count seven.

00:44:40.130 --> 00:44:40.880
JEFF SHARKEY: Ten.

00:44:40.880 --> 00:44:43.590
YIGIT BOYAR: OK, how many
people say no because there's

00:44:43.590 --> 00:44:45.755
solutions out there?

00:44:45.755 --> 00:44:48.515
ROMAIN GUY: Yeah, I think this
is kind of what we think too.

00:44:55.140 --> 00:44:58.480
ADAM POWELL: We're data driven.

00:44:58.480 --> 00:45:01.224
DAN GALLUP: Next
question please.

00:45:01.224 --> 00:45:03.390
AUDIENCE: The next question
is about the blue tooth,

00:45:03.390 --> 00:45:05.850
so probably you don't
want to hear it.

00:45:05.850 --> 00:45:11.310
So we have to switch from BlueZ
to Bluedroid, and it get worse.

00:45:11.310 --> 00:45:14.980
So basically everybody who is
using the boolean on Android,

00:45:14.980 --> 00:45:16.996
they have really huge problems.

00:45:16.996 --> 00:45:18.620
So we have behind us
a lot of projects.

00:45:18.620 --> 00:45:20.995
And in all of them, we have
huge problems with Bluetooth.

00:45:20.995 --> 00:45:23.200
Do you have any kind
of improvements?

00:45:23.200 --> 00:45:27.950
Because I mean a lot of people
just complain about a Bluetooth

00:45:27.950 --> 00:45:31.660
on all the possibilities,
groups, and so on.

00:45:31.660 --> 00:45:34.950
And this especially on
Bluetooth low energy.

00:45:34.950 --> 00:45:38.570
RACHAD ALAO: We complain
about it internally as well.

00:45:38.570 --> 00:45:40.750
We are actually-- I
mean, we hear you.

00:45:40.750 --> 00:45:45.155
And that's something that we're
actively working on to improve.

00:45:45.155 --> 00:45:47.510
AUDIENCE: Because we
discuss about beacons,

00:45:47.510 --> 00:45:50.790
we discuss about smart devices,
and we work on [INAUDIBLE] with

00:45:50.790 --> 00:45:53.900
a lot of devices, but we cannot
provide the experience that

00:45:53.900 --> 00:45:57.150
people there expected from
us because we come back all

00:45:57.150 --> 00:46:01.070
the time and all the devices
they have a really bad

00:46:01.070 --> 00:46:02.390
implementation.

00:46:02.390 --> 00:46:05.240
And I heard a
discussion that BlueZ

00:46:05.240 --> 00:46:06.790
will come back in Android.

00:46:06.790 --> 00:46:09.190
Do you have any idea about that?

00:46:09.190 --> 00:46:10.570
OK, I can see your faces.

00:46:10.570 --> 00:46:13.105
RACHAD ALAO: I can't
really comment.

00:46:13.105 --> 00:46:15.230
Yeah, I can't really comment
on what's coming back,

00:46:15.230 --> 00:46:19.710
but I can tell you that that's
in a real fact of development

00:46:19.710 --> 00:46:20.546
right now.

00:46:20.546 --> 00:46:22.720
DAN GALLUP: If you have
any ideas for CTS tests

00:46:22.720 --> 00:46:24.612
to contribute, this is
always a great time.

00:46:24.612 --> 00:46:26.820
JEFF SHARKEY: I think it's
a little difficult though.

00:46:26.820 --> 00:46:29.142
Like, CTS is very easy to
write for a UI toolkit,

00:46:29.142 --> 00:46:30.350
where you have a known input.

00:46:35.590 --> 00:46:37.767
For a known input
and a known output.

00:46:37.767 --> 00:46:39.850
So for example, the holo
tests that you guys have.

00:46:39.850 --> 00:46:41.320
Put some widgets
on the screen, this

00:46:41.320 --> 00:46:43.400
is what the pixels should look
like coming out the other side.

00:46:43.400 --> 00:46:45.220
Because there's CTS tests
for that, that assert, right?

00:46:45.220 --> 00:46:46.290
CHET HAASE: On
every single device,

00:46:46.290 --> 00:46:48.331
knowing what that image
should exactly look like?

00:46:48.331 --> 00:46:49.670
JEFF SHARKEY: OK.

00:46:49.670 --> 00:46:50.370
So, not perfect.

00:46:50.370 --> 00:46:51.640
CHET HAASE: It was a fair
assumption by someone

00:46:51.640 --> 00:46:53.278
who doesn't know UI
toolkit very well.

00:46:57.262 --> 00:46:59.062
YIGIT BOYAR: Fireside Fight.

00:46:59.062 --> 00:47:01.910
JEFF SHARKEY: So like a
database engine, then.

00:47:01.910 --> 00:47:05.104
There's no database up here
so we can pick on them.

00:47:05.104 --> 00:47:07.770
Like a database engine, you have
known inputs and known outputs.

00:47:07.770 --> 00:47:10.605
But something where in
an RF environment, where

00:47:10.605 --> 00:47:13.215
you have multiple devices, even
in this room, there's so much

00:47:13.215 --> 00:47:15.340
RF signal and interference,
it's like sometimes you

00:47:15.340 --> 00:47:16.506
want that as part of a test.

00:47:16.506 --> 00:47:18.240
Other times you need
the radio silence.

00:47:18.240 --> 00:47:20.170
So that's really hard
to come up with tests

00:47:20.170 --> 00:47:22.276
that operate in the real world.

00:47:22.276 --> 00:47:22.930
AUDIENCE: OK.

00:47:22.930 --> 00:47:24.354
Thank you.

00:47:24.354 --> 00:47:25.270
DAN GALLUP: All right.

00:47:25.270 --> 00:47:27.830
So I think that's
it for our session.

00:47:27.830 --> 00:47:30.780
Does anyone want to make
a closing statement?

00:47:30.780 --> 00:47:32.030
I certainly don't have one.

00:47:32.030 --> 00:47:34.530
CHET HAASE: I would
say, at least most of us

00:47:34.530 --> 00:47:36.810
are actually around the
conference both days.

00:47:36.810 --> 00:47:39.470
So we're kind of here
to talk to people.

00:47:39.470 --> 00:47:40.330
So find us.

00:47:40.330 --> 00:47:40.930
DAN GALLUP: And
also, we're going

00:47:40.930 --> 00:47:43.351
to be having another Fireside
chat tomorrow with our tools

00:47:43.351 --> 00:47:43.850
teams.

00:47:43.850 --> 00:47:45.590
So don't miss out on that
or all the great content

00:47:45.590 --> 00:47:46.520
we have streaming tomorrow.

00:47:46.520 --> 00:47:47.145
And again, yes.

00:47:47.145 --> 00:47:47.810
Come see us.

00:47:47.810 --> 00:47:49.470
We have office hours all day.

00:47:49.470 --> 00:47:50.840
And it's great to have you here.

00:47:50.840 --> 00:47:52.465
And thank you to
everyone on the panel.

00:47:52.465 --> 00:48:00.640
[APPLAUSE]

00:48:00.640 --> 00:48:02.440
All right, let's just file out.

00:48:02.440 --> 00:48:03.990
[MUSIC PLAYING]

