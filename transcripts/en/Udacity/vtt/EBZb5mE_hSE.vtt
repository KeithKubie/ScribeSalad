WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
So how are we going to fit optimization into our JavaScript interpreter?

00:00:05.000 --> 00:00:10.000
The basic plan is to change the parse tree before interpreting.

00:00:10.000 --> 00:00:13.000
That way we'll save time, especially if the optimization we made

00:00:13.000 --> 00:00:18.000
was in the inside recursive call of Fibonacci or factorial or something like that.

00:00:18.000 --> 00:00:21.000
So recall our general plan, the outline of our interpreter,

00:00:21.000 --> 00:00:23.000
we start with program text, which is a string,

00:00:23.000 --> 00:00:28.000
and we use lexical analysis to break it up into tokens, or important words.

00:00:28.000 --> 00:00:30.000
This is implemented with regular expressions.

00:00:30.000 --> 00:00:33.000
Then we use parsing based on context-free grammars and dynamic programming

00:00:33.000 --> 00:00:36.000
to check and see if those tokens are in the right order.

00:00:36.000 --> 00:00:38.000
Are they valid syntactically?

00:00:38.000 --> 00:00:40.000
Do they form a sentence?

00:00:40.000 --> 00:00:44.000
If so, we end up with a parse tree, also called an abstract syntax tree.

00:00:44.000 --> 00:00:48.000
And now--here's the new part--we're going to do optimization,

00:00:48.000 --> 00:00:53.000
which will also yield a parse tree but hopefully a simpler one.

00:00:53.000 --> 00:00:56.000
If all else fails, do no optimizations and return the same one.

00:00:56.000 --> 00:01:01.000
Then we do our interpreting, and that gives us the meaning of the program, the final result.

00:01:01.000 --> 00:01:05.000
So we're going to fit optimization in after parsing but before interpreting.

00:01:05.000 --> 00:01:07.000
Optimization is always optional.

00:01:07.000 --> 00:01:09.000
You don't have to do it, typically,

00:01:09.000 --> 00:01:12.000
unless you're in some sort of company where timing really, really matters,

00:01:12.000 --> 00:01:16.000
like, say, a car's anti-lock brake system, where you might have to respond

00:01:16.000 --> 00:01:17.000
within a certain number of milliseconds.

00:01:17.000 --> 00:01:23.000
But for the vast majority of applications, optimization is optional,

00:01:23.000 --> 00:01:25.000
so often we do it last.

00:01:25.000 --> 00:01:29.000
In fact, let me show you a simple Python example of how a JavaScript optimizer might go.

00:01:29.000 --> 00:01:32.000
For now I'll just optimize expression trees.

00:01:32.000 --> 00:01:35.000
We'll do these arithmetic optimizations we've been thinking of,

00:01:35.000 --> 00:01:39.000
and for now I'm going to focus on expressions that have expression type "binop"--

00:01:39.000 --> 00:01:41.000
binary operator.

00:01:41.000 --> 00:01:47.000
For example, maybe it's something like A times 1

00:01:47.000 --> 00:01:49.000
and I just want to replace that with A.

00:01:49.000 --> 00:01:52.000
Well, here's a real simple way to do that.

00:01:52.000 --> 00:01:56.000
I'll just check and see if the operation is star,

00:01:56.000 --> 00:02:01.000
and I'll check and see if the right-hand side is literally the number 1.

00:02:01.000 --> 00:02:08.000
If it is, then I can just return A; otherwise I'll return the original tree unchanged.

00:02:08.000 --> 00:02:12.000
Maybe it was something more complicated like 5 times 3 or 5 times X

00:02:12.000 --> 00:02:14.000
that we couldn't reason about.

00:02:14.000 --> 00:02:16.000
We could certainly put in more optimizations here,

00:02:16.000 --> 00:02:18.000
but now we have at least one.

00:02:18.000 --> 00:02:22.000
And the basic plan is right before we interpret an expression, we call optimize on it.

00:02:22.000 --> 00:02:26.000
Just to show this pictorially, let's say our input is 5 times 1.

00:02:26.000 --> 00:02:28.000
We're just going to replace that with 5.

00:02:28.000 --> 00:02:35.000
In our Python interpreter, that abstract syntax tree would show up as nested tuples:

00:02:35.000 --> 00:02:39.000
binop involving multiplication--oh, that's not exactly the order we used.

00:02:39.000 --> 00:02:41.000
There we go.

00:02:41.000 --> 00:02:44.000
A binop where the left child is a 5, there's some multiplication,

00:02:44.000 --> 00:02:46.000
and then the right child is 1.

00:02:46.000 --> 00:02:51.000
And if these two parts match a pattern we've already established,

00:02:51.000 --> 00:02:55.000
then we'll just hoist this part out and return it unchanged.

00:02:55.000 --> 00:02:58.000
So we've gone from 5 times 1 to just 5

00:02:58.000 --> 00:03:01.000
by looking at our Python abstract syntax tree,

00:03:01.000 --> 00:03:04.000
checking to make sure the optimization is legal--

00:03:04.000 --> 00:03:08.000
an optimization is only legal if it doesn't change the semantics of the program,

00:03:08.000 --> 00:03:11.000
doesn't change the meaning of the result--

00:03:11.000 --> 00:03:13.000
and then once it is legal, we just replace

00:03:13.000 --> 00:03:15.000
the tree with a simpler tree.

00:03:15.000 --> 00:03:18.000
The way I've written it, we're officially returning a new tree.

00:03:18.000 --> 00:03:20.000
Potentially, if we wanted it to be a little more efficient, we could

00:03:20.000 --> 09:59:59.000
change it in place, but returning a new copy of the tree is fine for us.

