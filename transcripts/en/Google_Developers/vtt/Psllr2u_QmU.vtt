WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.040
Hi, I'm Roman,
and I wrote an app

00:00:02.040 --> 00:00:03.890
that serves terabytes
of beautiful paintings

00:00:03.890 --> 00:00:06.280
across hundreds of thousands
of Android homescreens

00:00:06.280 --> 00:00:07.212
every month.

00:00:07.212 --> 00:00:08.920
Building the server
took me a little over

00:00:08.920 --> 00:00:11.780
a week, only 200 or so
lines of server code

00:00:11.780 --> 00:00:14.318
and the power of the
Google Cloud platform.

00:00:14.318 --> 00:00:28.430
[MUSIC PLAYING]

00:00:28.430 --> 00:00:30.880
I designed and built the
Muzei Live Wallpaper app

00:00:30.880 --> 00:00:33.050
with the goal of bringing
beauty and inspiration

00:00:33.050 --> 00:00:34.940
to people's
homescreens everyday.

00:00:34.940 --> 00:00:35.690
Now let's be fair.

00:00:35.690 --> 00:00:37.560
I'm not a rock star
back-end developer.

00:00:37.560 --> 00:00:38.600
Far from it.

00:00:38.600 --> 00:00:40.770
I design and build
android apps, so the cloud

00:00:40.770 --> 00:00:42.635
is kind of a nebulous
thing for me.

00:00:42.635 --> 00:00:45.010
I know things like distributed
computing, load balancing,

00:00:45.010 --> 00:00:46.930
and network security
are important.

00:00:46.930 --> 00:00:49.500
But I'd rather spend
time finessing the pixels

00:00:49.500 --> 00:00:52.175
than learning how to fine-tune
Apache, Linux, and MySQL

00:00:52.175 --> 00:00:53.201
configs.

00:00:53.201 --> 00:00:54.700
Heck, I bet some
of you are laughing

00:00:54.700 --> 00:00:56.580
at the mere fact I
just mentioned the LAMP

00:00:56.580 --> 00:01:00.080
stack in a video about
cloud computing in 2014.

00:01:00.080 --> 00:01:03.230
So if I can build a robust and
scalable back-end, so can you.

00:01:03.230 --> 00:01:06.010
Let's take a look at how App
Engine made this possible.

00:01:06.010 --> 00:01:08.190
Now a big part of the
app's architecture

00:01:08.190 --> 00:01:11.110
relies on a back-end server
that most users of the app,

00:01:11.110 --> 00:01:13.170
over 100,000 at the
moment, will hit

00:01:13.170 --> 00:01:16.630
every day between 2:00
AM and 2:20 AM GMT

00:01:16.630 --> 00:01:18.330
to get the latest artwork.

00:01:18.330 --> 00:01:20.700
With App Engine, the first
few real lines of code

00:01:20.700 --> 00:01:22.870
give me a basic,
yet fully scalable,

00:01:22.870 --> 00:01:24.880
data store ready to go.

00:01:24.880 --> 00:01:27.550
30 or so lines later, and
my database query logic

00:01:27.550 --> 00:01:31.450
and conversion to JSON for
the primary endpoint was done.

00:01:31.450 --> 00:01:34.840
Another 20 lines of memcache
and HTTP caching code,

00:01:34.840 --> 00:01:37.100
and I now had a
well-oiled machine, easily

00:01:37.100 --> 00:01:40.520
capable of handling hundreds
of thousands of requests

00:01:40.520 --> 00:01:43.110
during the 20 minute
refresh window.

00:01:43.110 --> 00:01:45.460
I also wrote a tiny
content management system

00:01:45.460 --> 00:01:48.150
to let me queue up artwork
for weeks at a time.

00:01:48.150 --> 00:01:50.910
It was only another 100 or
so lines of App Engine code,

00:01:50.910 --> 00:01:54.790
mostly Ajax style end points
used by a single html page.

00:01:54.790 --> 00:01:56.720
One of my favorite
aspects here was

00:01:56.720 --> 00:01:59.190
that adding a single
line to my YAML config

00:01:59.190 --> 00:02:02.080
gave me instant security and
the comfort that my CMS was

00:02:02.080 --> 00:02:04.870
protected from
would-be intruders.

00:02:04.870 --> 00:02:05.830
There's one last thing.

00:02:05.830 --> 00:02:07.920
I'm serving two
terabytes of images

00:02:07.920 --> 00:02:09.780
per month, where
most of the artwork

00:02:09.780 --> 00:02:12.819
comes from the wonderful
WikiPaintings.org project.

00:02:12.819 --> 00:02:14.860
Now I really want to be
a good citizen of the web

00:02:14.860 --> 00:02:16.860
and avoid melting
their servers, so I

00:02:16.860 --> 00:02:18.630
grab the images I
need and mirror them

00:02:18.630 --> 00:02:20.880
into Google Cloud Storage.

00:02:20.880 --> 00:02:23.200
This way my app can scale
to millions of users,

00:02:23.200 --> 00:02:25.360
and the fine folks
at WikiPaintings.org

00:02:25.360 --> 00:02:27.260
don't have to carry the burden.

00:02:27.260 --> 00:02:30.580
The best thing is this is
fully integrated into my CMS.

00:02:30.580 --> 00:02:32.210
I simply give it a
WikiPaintings link,

00:02:32.210 --> 00:02:35.150
and it reads the page
metadata, creates a thumbnail,

00:02:35.150 --> 00:02:38.270
and stores the images
in Google Cloud Storage.

00:02:38.270 --> 00:02:39.800
All the service-side
code for that

00:02:39.800 --> 00:02:42.830
fits in a single screenful
on my 30-inch monitor.

00:02:42.830 --> 00:02:44.550
Coming from a UI guy
who doesn't really

00:02:44.550 --> 00:02:48.000
like dealing with messy things
like servers and back-ends,

00:02:48.000 --> 00:02:50.190
the whole thing is
kind of beautiful.

00:02:50.190 --> 00:02:50.990
So there it is.

00:02:50.990 --> 00:02:53.220
To build my back-end, I
only needed a small amount

00:02:53.220 --> 00:02:55.500
of Python code and was
able to leave the rest up

00:02:55.500 --> 00:02:57.731
to Google because of App
Engine and cloud storage.

00:02:57.731 --> 00:02:59.730
I don't really have to
stay up at night worrying

00:02:59.730 --> 00:03:02.650
about servers melting
or databases going down.

00:03:02.650 --> 00:03:06.130
And that makes me truly a
happy Android developer.

00:03:06.130 --> 00:03:08.970
So go forth and start building
your next great scalable

00:03:08.970 --> 00:03:09.830
app now.

00:03:09.830 --> 00:03:11.840
You can look at all the
source code for Muzei

00:03:11.840 --> 00:03:14.180
and use it for inspiration
or as a starting

00:03:14.180 --> 00:03:15.770
point for your next great app.

00:03:15.770 --> 00:03:26.099
[MUSIC PLAYING]

