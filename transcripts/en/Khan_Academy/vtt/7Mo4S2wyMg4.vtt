WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.410
In the last couple of videos,
I already exposed you to the

00:00:03.410 --> 00:00:08.210
idea of a matrix, which is
really just an array of

00:00:08.210 --> 00:00:10.570
numbers, usually a 2-dimensional
array.

00:00:10.570 --> 00:00:11.500
Actually it's always
a 2-dimensional

00:00:11.500 --> 00:00:13.220
array for our purposes.

00:00:13.220 --> 00:00:18.670
So if I have an m by n matrix,
the m is just the number of

00:00:18.670 --> 00:00:24.960
rows, and then the n is just
the number of columns.

00:00:24.960 --> 00:00:27.565
So let me write out
the m by n matrix.

00:00:27.565 --> 00:00:32.329
So I'll just specify, let's have
the m by n matrix A, it's

00:00:32.329 --> 00:00:35.610
a capital bold A.

00:00:35.610 --> 00:00:40.050
And it is equal to, I'll be as
general as possible, first

00:00:40.050 --> 00:00:44.180
entry is in, I'll just call that
lowercase a, it's in row

00:00:44.180 --> 00:00:45.730
1 column 1.

00:00:45.730 --> 00:00:49.720
The next entry is
row 1 column 2.

00:00:49.720 --> 00:00:54.090
And you go all the way
to row 1 column

00:00:54.090 --> 00:00:56.120
n, you have n columns.

00:00:56.120 --> 00:00:59.300
And then when you go down, you
go to the next row, it will be

00:00:59.300 --> 00:01:01.640
row 2 column 1.

00:01:01.640 --> 00:01:03.170
And then you keep going
all the way down to

00:01:03.170 --> 00:01:05.680
row m column n.

00:01:05.680 --> 00:01:07.410
And then of course, what?

00:01:07.410 --> 00:01:10.140
This entry is going to be, row
2, let me write that a little

00:01:10.140 --> 00:01:13.690
smaller, row 2 column 2.

00:01:13.690 --> 00:01:16.560
And you go all the way, and
you're going to have

00:01:16.560 --> 00:01:19.000
row m column n.

00:01:19.000 --> 00:01:21.990
And so if you think about it,
you're going to have how many

00:01:21.990 --> 00:01:22.630
total entries here?

00:01:22.630 --> 00:01:25.010
You're going to have m entries
this way, n that way.

00:01:25.010 --> 00:01:27.730
So you're going to m times
n total entries.

00:01:27.730 --> 00:01:29.500
And I think you're pretty
familiar with this idea

00:01:29.500 --> 00:01:32.440
already of a matrix, you
probably saw this in your

00:01:32.440 --> 00:01:34.180
Algebra II classes.

00:01:34.180 --> 00:01:36.860
So what we want to do now in
this video is relate our

00:01:36.860 --> 00:01:40.600
notion of a matrix to everything
we already know

00:01:40.600 --> 00:01:41.870
about vectors.

00:01:41.870 --> 00:01:45.500
Or maybe introduce some
operations that allow matrix

00:01:45.500 --> 00:01:48.130
and vectors to interact
with each other.

00:01:48.130 --> 00:01:52.100
And maybe the most natural one
is multiplication, or taking

00:01:52.100 --> 00:01:53.570
the product.

00:01:53.570 --> 00:01:59.550
So what I'm going to do in this
video is define what it

00:01:59.550 --> 00:02:04.460
means when we take the product
of our matrix A, of any matrix

00:02:04.460 --> 00:02:06.880
A, I've written this as
general as possible,

00:02:06.880 --> 00:02:10.130
with some vector x.

00:02:10.130 --> 00:02:17.250
And our definition will only
work if x, the vector we're

00:02:17.250 --> 00:02:20.780
multiplying A by, has
the same number of

00:02:20.780 --> 00:02:25.920
components as A has columns.

00:02:25.920 --> 00:02:35.370
So this is only valid for an x
that looks like this: x1, x2,

00:02:35.370 --> 00:02:38.465
all the way down to x n.

00:02:38.465 --> 00:02:44.380
So let me be very clear with
this, this vector, I guess you

00:02:44.380 --> 00:02:46.000
could do it a different height
than this vector.

00:02:46.000 --> 00:02:48.550
What matters is that the same
number of A's you have in this

00:02:48.550 --> 00:02:50.880
direction, you have n A's
here, then you have n

00:02:50.880 --> 00:02:53.430
components of this vector
right here.

00:02:53.430 --> 00:02:56.080
And if you have that constraint,
if the length of

00:02:56.080 --> 00:02:59.430
your vector, or the number of
components in vector is equal

00:02:59.430 --> 00:03:02.640
to the number of columns in your
matrix, then we define

00:03:02.640 --> 00:03:09.080
this product to be equal to --
so this is my vector x -- so

00:03:09.080 --> 00:03:10.230
this is a definition.

00:03:10.230 --> 00:03:12.610
There's nothing in nature that
told us it had to be

00:03:12.610 --> 00:03:13.430
defined this way.

00:03:13.430 --> 00:03:16.770
It's just human beings, or
mathematicians, decided that

00:03:16.770 --> 00:03:20.180
this is a useful convention to
the define the multiplication,

00:03:20.180 --> 00:03:23.180
or the product, of a matrix
and a vector.

00:03:23.180 --> 00:03:29.360
So we'll define A times
our vector x.

00:03:29.360 --> 00:03:32.780
These are both bold, this is
a matrix, that's a vector.

00:03:32.780 --> 00:03:34.420
And the convention, if I didn't
draw the little vector

00:03:34.420 --> 00:03:36.620
symbol, your textbooks would
just bold out the x, so that

00:03:36.620 --> 00:03:37.780
it'll be a lowercase x.

00:03:37.780 --> 00:03:40.970
Lower case is vector, uppercase
is matrix, both of

00:03:40.970 --> 00:03:41.670
them are bolded.

00:03:41.670 --> 00:03:42.960
That tells you that you're
not just dealing

00:03:42.960 --> 00:03:44.290
with regular numbers.

00:03:44.290 --> 00:03:49.220
So we're defining this to be
equal to -- let me write it

00:03:49.220 --> 00:03:51.732
out fairly large.

00:03:51.732 --> 00:03:56.070
You're going to take each row,
and we're going to show you

00:03:56.070 --> 00:03:59.200
that there's multiple ways to
kind of visualize this, but

00:03:59.200 --> 00:04:03.350
it's going to a11 times x1,
let me write that down.

00:04:15.030 --> 00:04:23.490
So a11 times x1 plus a12 times
x2, all the way to

00:04:23.490 --> 00:04:30.050
plus a1n times xn.

00:04:32.960 --> 00:04:37.040
So the product of this matrix,
this m by n matrix and this n

00:04:37.040 --> 00:04:41.860
component vector, will be a new
vector, the first entry of

00:04:41.860 --> 00:04:44.870
which is essentially each
of these entries times a

00:04:44.870 --> 00:04:47.310
corresponding entry here,
and you add them all up.

00:04:47.310 --> 00:04:49.470
And as you can see, that's
already looking fairly similar

00:04:49.470 --> 00:04:51.400
to a dot product, and I'll
discuss that in a second.

00:04:51.400 --> 00:04:54.280
But let me finish my definition
before I start

00:04:54.280 --> 00:04:56.010
talking about what it
means, or what it

00:04:56.010 --> 00:04:56.920
might be related to.

00:04:56.920 --> 00:04:59.660
So that was that first row
right there, it'll

00:04:59.660 --> 00:05:01.550
just look like that.

00:05:01.550 --> 00:05:03.870
We just multiply that
times this thing to

00:05:03.870 --> 00:05:05.200
get that row there.

00:05:05.200 --> 00:05:08.780
Now the second row -- I want to
do it in a different color

00:05:08.780 --> 00:05:12.370
-- remember this is
a definition.

00:05:12.370 --> 00:05:13.540
Human beings came
up with this.

00:05:13.540 --> 00:05:15.720
Nothing about nature said we
had to do it this way, but

00:05:15.720 --> 00:05:17.150
it's just nice and convenient.

00:05:17.150 --> 00:05:22.770
So our second row will have a21
times x1, we'll just do

00:05:22.770 --> 00:05:24.300
the whole thing over again,
but this time we're

00:05:24.300 --> 00:05:27.560
multiplying this row times
this column vector.

00:05:27.560 --> 00:05:42.095
So a21 times x1 plus a22 times
x2 all the way until we get to

00:05:42.095 --> 00:05:49.620
-- I wanted to do that in
magenta -- a2n times xn.

00:05:49.620 --> 00:05:52.870
So we multiplied this entire row
times that entire column.

00:05:52.870 --> 00:05:55.520
This term times that term, plus
this term plus this term.

00:05:55.520 --> 00:06:00.530
All the way down to plus
this last term

00:06:00.530 --> 00:06:01.840
times that last term.

00:06:01.840 --> 00:06:05.870
And we keep doing this for every
row until we get to the

00:06:05.870 --> 00:06:12.450
m-th row, and then the
m-th row will be am1.

00:06:17.060 --> 00:06:19.260
This is the m-th row
first column.

00:06:19.260 --> 00:06:26.320
am1 times x1 plus -- it's hard
to keep switching colors --

00:06:26.320 --> 00:06:37.550
plus am2 times x2, all the way
until we get to amn times xn.

00:06:41.400 --> 00:06:43.210
So what is this vector
going to look like?

00:06:43.210 --> 00:06:48.020
It's essentially going to have
-- let's say we call this

00:06:48.020 --> 00:06:51.200
vector-- Let's say it's
equal to vector b.

00:06:51.200 --> 00:06:53.240
What does vector b look like?

00:06:53.240 --> 00:06:54.890
How many entries is
it going to have?

00:06:54.890 --> 00:06:57.060
Well it has an entry for each
row of this, right?

00:06:57.060 --> 00:07:00.090
We're taking each row and we're
essentially taking the

00:07:00.090 --> 00:07:03.710
dot product of this row vector
with this column vector.

00:07:03.710 --> 00:07:05.070
And I'll be a little bit
more formal with the

00:07:05.070 --> 00:07:06.480
notation in a second.

00:07:06.480 --> 00:07:09.660
But I think you understand that
this is a dot product.

00:07:09.660 --> 00:07:11.720
The first component times the
first component plus the

00:07:11.720 --> 00:07:14.280
second component times the
second component plus the

00:07:14.280 --> 00:07:16.180
third component times the third
component, all the way

00:07:16.180 --> 00:07:19.000
to the n-th component plus
the n-th component

00:07:19.000 --> 00:07:20.200
times the n-th component.

00:07:20.200 --> 00:07:22.555
So this is essentially the dot
product of this row vector.

00:07:25.910 --> 00:07:28.230
We've been writing all of our
vectors as columns, so we

00:07:28.230 --> 00:07:29.750
could call them column vectors,
you're just writing

00:07:29.750 --> 00:07:30.730
them as rows.

00:07:30.730 --> 00:07:32.250
And we can be a little bit
more specific with the

00:07:32.250 --> 00:07:34.960
notation in a second, but what's
this going look like?

00:07:34.960 --> 00:07:36.830
Well we're doing this
m times, so we're

00:07:36.830 --> 00:07:38.010
going to have m entries.

00:07:38.010 --> 00:07:43.660
You're going to b1 b2
all the way to bn.

00:07:43.660 --> 00:07:47.760
If you viewed these all as
matrices, you can kind of view

00:07:47.760 --> 00:07:51.880
it as -- and this will
eventually work for the matrix

00:07:51.880 --> 00:07:55.670
math we're going to learn --
this is an m by n matrix and

00:07:55.670 --> 00:07:58.730
we're multiplying it by -- how
many rows does this guy have?

00:07:58.730 --> 00:08:02.210
He has n rows.

00:08:02.210 --> 00:08:05.370
He has n components, and
he has 1 column.

00:08:05.370 --> 00:08:10.560
So m by n times an n by 1, you
essentially can ignore these

00:08:10.560 --> 00:08:13.610
middle two terms, and they'll
result with -- how many rows

00:08:13.610 --> 00:08:14.390
does this guy have?

00:08:14.390 --> 00:08:17.880
He has m rows, and 1 column.

00:08:17.880 --> 00:08:20.320
These middle two terms have to
be equal to each other just

00:08:20.320 --> 00:08:23.170
for the multiplication to be
defined, and then you're left

00:08:23.170 --> 00:08:25.960
with an m by 1 matrix.

00:08:25.960 --> 00:08:28.990
So this was all abstract, let
me actually apply it to some

00:08:28.990 --> 00:08:29.610
actual numbers.

00:08:29.610 --> 00:08:31.665
But it's important to actually
set the definition.

00:08:34.700 --> 00:08:36.559
Now that we have the definition
we can apply it to

00:08:36.559 --> 00:08:40.130
some actual matrices
and vectors.

00:08:40.130 --> 00:08:43.260
So let's say we have
the matrix.

00:08:43.260 --> 00:08:51.350
Let's say I want to multiply the
matrix minus 3, 0, 3, 2.

00:08:51.350 --> 00:08:52.740
Now I'll do this
one in yellow.

00:08:52.740 --> 00:08:57.070
1, 7, minus 1, 9.

00:08:57.070 --> 00:09:02.880
And I want to multiply
that by the vector.

00:09:02.880 --> 00:09:05.700
Now how many components,
or rows, does this

00:09:05.700 --> 00:09:07.400
vector have to have?

00:09:07.400 --> 00:09:11.620
Well my matrix times vector
product, or multiplication, is

00:09:11.620 --> 00:09:16.650
only defined if my vector has
as many components as this

00:09:16.650 --> 00:09:17.910
matrix has columns.

00:09:17.910 --> 00:09:19.350
So we have 1, 2, 3, 4 columns.

00:09:19.350 --> 00:09:21.990
So this guy's going to have 4
components for us even to be

00:09:21.990 --> 00:09:23.520
able to multiply
them, otherwise

00:09:23.520 --> 00:09:24.460
it wouldn't be defined.

00:09:24.460 --> 00:09:25.640
So let me put 4 entries here.

00:09:25.640 --> 00:09:32.750
Let's say it's 2, minus 3,
4, and then minus 1.

00:09:32.750 --> 00:09:34.580
So what is this going
to be equal to?

00:09:40.370 --> 00:09:42.730
The first term of this is going
to be the dot product of

00:09:42.730 --> 00:09:46.100
this first row with
this vector.

00:09:46.100 --> 00:09:48.360
And then the second entry is
going to be the dot product of

00:09:48.360 --> 00:09:51.980
this row vector with
this column.

00:09:51.980 --> 00:09:52.920
So let's do it.

00:09:52.920 --> 00:09:58.170
So it's going to be minus 3
times 2, I'm not going to

00:09:58.170 --> 00:10:05.990
color code it, minus 3 times 2
plus 0 times minus 3 plus 3

00:10:05.990 --> 00:10:10.600
times 4 plus 2 times minus 1.

00:10:13.540 --> 00:10:17.590
And now my second row, or I
guess my second component in

00:10:17.590 --> 00:10:23.220
this vector, is going to be 1
times 2 plus 7 times negative

00:10:23.220 --> 00:10:33.050
3 plus minus 1 times 4
plus 9 times minus 1.

00:10:35.720 --> 00:10:37.300
And so what does this
simplify to?

00:10:37.300 --> 00:10:48.460
This is equal to minus 3 times
2 is minus 6 plus 0 plus 12.

00:10:48.460 --> 00:10:49.670
This is 12.

00:10:49.670 --> 00:10:51.700
Minus 2.

00:10:51.700 --> 00:11:06.150
And then this is simplified to
2 minus 21 minus 4 minus 9.

00:11:06.150 --> 00:11:10.450
So this is equal to this top
term, let's see, I have a

00:11:10.450 --> 00:11:13.940
minus 6 plus 12 is
6 minus 2 is 4.

00:11:13.940 --> 00:11:21.020
And then I have 2 minus
21 is minus 19.

00:11:21.020 --> 00:11:23.000
I want to make sure I get
the math right here.

00:11:23.000 --> 00:11:28.350
Minus 21 minus 9 is minus 30 and
I have a minus 34 and then

00:11:28.350 --> 00:11:32.320
I have a plus 2, so minus 32.

00:11:32.320 --> 00:11:36.550
So that's my product
right there.

00:11:36.550 --> 00:11:39.010
And let me be very
clear right here.

00:11:39.010 --> 00:11:41.400
Everything we've been used to
right now, we've been writing

00:11:41.400 --> 00:11:43.610
our vectors as column vectors.

00:11:43.610 --> 00:11:51.300
But you can view each of these
right here as a row vector.

00:11:51.300 --> 00:11:52.740
But let me be even better.

00:11:52.740 --> 00:11:59.540
Let's say that vector, let
me call vector a, a1.

00:11:59.540 --> 00:12:09.500
So let me define vector a1 is
equal to minus 3, 0, 3, 2.

00:12:09.500 --> 00:12:19.570
And let me define vector a2 to
be equal to 1, 7, minus 1, 9.

00:12:19.570 --> 00:12:21.940
So all I did is I wrote these
guys, but I wrote them in our

00:12:21.940 --> 00:12:23.100
standard vector form.

00:12:23.100 --> 00:12:25.020
I wrote them as column
vectors.

00:12:25.020 --> 00:12:29.550
So what we can define to turn
these guys into row vectors is

00:12:29.550 --> 00:12:30.950
the transpose function.

00:12:30.950 --> 00:12:34.300
In transpose, you just turn the
rows into columns and the

00:12:34.300 --> 00:12:35.170
columns into rows.

00:12:35.170 --> 00:12:41.980
So if this is a1, then a1
transpose will just be the row

00:12:41.980 --> 00:12:42.920
version of this.

00:12:42.920 --> 00:12:48.180
So it's minus 3, 0, 3, 2.

00:12:48.180 --> 00:12:58.830
And then a2 transpose would be
equal to 1, 7, minus 1, and 9.

00:12:58.830 --> 00:13:01.680
And then this multiplication
right here, we can rewrite it

00:13:01.680 --> 00:13:10.650
as -- we have vector a1
transpose for the first row.

00:13:13.275 --> 00:13:16.490
These are vectors now,
row vectors.

00:13:16.490 --> 00:13:18.140
And then this is a2 transpose.

00:13:21.770 --> 00:13:24.210
The transpose should be
the super script.

00:13:24.210 --> 00:13:26.880
This vector can be written
exactly like this because this

00:13:26.880 --> 00:13:28.280
is the first row, this
is the second row.

00:13:30.840 --> 00:13:41.550
Times the vector, let me just
call this vector x, that right

00:13:41.550 --> 00:13:43.016
there is vector x.

00:13:46.770 --> 00:13:50.210
We can now rewrite the
definition as this would be

00:13:50.210 --> 00:13:51.770
equal to what?

00:13:51.770 --> 00:13:58.940
This first row right here
that we wrote out,

00:13:58.940 --> 00:14:04.550
this was a1 dot x.

00:14:04.550 --> 00:14:06.850
You know all about
the dot products.

00:14:06.850 --> 00:14:14.960
The first row was a1 dot x.

00:14:14.960 --> 00:14:20.860
It's minus 3 times 2 plus 0
times minus 3 plus 3 times 4.

00:14:20.860 --> 00:14:22.760
It's a1 dot x.

00:14:22.760 --> 00:14:25.680
And this is useful because
when I defined the dot

00:14:25.680 --> 00:14:28.540
product, I only defined it with
column vectors like this.

00:14:28.540 --> 00:14:30.720
And I'm dotting 2
column vectors.

00:14:30.720 --> 00:14:33.030
I haven't formally defined
a row vector

00:14:33.030 --> 00:14:34.430
times a column vector.

00:14:34.430 --> 00:14:38.440
So now I can say if this is just
a standard column factor,

00:14:38.440 --> 00:14:41.700
like we've been working with, I
can write my matrix as each

00:14:41.700 --> 00:14:43.770
row is the transpose
of a column vector,

00:14:43.770 --> 00:14:45.400
or it's a row vector.

00:14:45.400 --> 00:14:48.440
Then I can write this product
as just the dot products of

00:14:48.440 --> 00:14:51.160
each of these transpose, or
I guess you could say the

00:14:51.160 --> 00:14:54.030
inverse transpose, with this
vector right here.

00:14:54.030 --> 00:15:02.060
And then obviously the second
row is going to be a2 dot x.

00:15:04.610 --> 00:15:10.860
The second row is a2 dot x, is 1
times 2 plus 7 times minus 3

00:15:10.860 --> 00:15:15.370
minus 1 times 4 plus
9 times minus 1.

00:15:15.370 --> 00:15:18.950
So just like that.

00:15:18.950 --> 00:15:21.430
So this is one way to view it.

00:15:21.430 --> 00:15:24.870
Matrix times the vector is just
like the transpose of its

00:15:24.870 --> 00:15:28.090
rows dotted with the vector
you're ds it by.

00:15:28.090 --> 00:15:31.270
This is one way to perceive
matrix multiplication.

00:15:31.270 --> 00:15:37.910
Now the other way to perceive
it -- let me do it with a

00:15:37.910 --> 00:15:41.220
different example.

00:15:41.220 --> 00:15:43.900
Those numbers are getting
a little bit tiresome.

00:15:43.900 --> 00:15:55.860
Let's say I have the matrix A,
nice and bold, is equal to 3,

00:15:55.860 --> 00:16:06.560
1, 0, 3, 2, 4, 7, 0, minus
1, 2, 3, and 4.

00:16:06.560 --> 00:16:10.000
And I need to multiply this
times a 4 component vector.

00:16:10.000 --> 00:16:25.920
So let me call vector x is equal
to x1, x2, x3, and x4.

00:16:25.920 --> 00:16:29.510
Now instead of viewing these as
row vectors, we could view

00:16:29.510 --> 00:16:32.540
A as a set of column vectors.

00:16:32.540 --> 00:16:37.650
We could call this thing
right here vector 1.

00:16:37.650 --> 00:16:41.710
We call this thing right
here vector 2.

00:16:41.710 --> 00:16:45.400
We call this thing right
here vector 3.

00:16:45.400 --> 00:16:49.000
And we call this thing
right here vector 4.

00:16:49.000 --> 00:16:55.440
Then we could rewrite our matrix
A as being equal to

00:16:55.440 --> 00:16:58.380
just a bunch of column
vectors.

00:16:58.380 --> 00:17:03.640
So we could rewrite it vector
1, vector 2, vector

00:17:03.640 --> 00:17:06.709
3, and vector 4.

00:17:09.390 --> 00:17:12.380
So how can the matrix
multiplication be interpreted

00:17:12.380 --> 00:17:13.920
in this context?

00:17:13.920 --> 00:17:15.170
Well what did we do?

00:17:17.930 --> 00:17:22.079
When we multiply these guys,
all of the elements in here

00:17:22.079 --> 00:17:25.369
always get multiplied by x1.

00:17:25.369 --> 00:17:27.430
Let me start some of the
multiplication here, just from

00:17:27.430 --> 00:17:28.700
our definition.

00:17:28.700 --> 00:17:34.010
So if I multiply A times x,
I'll start it off, maybe I

00:17:34.010 --> 00:17:34.980
won't do the whole thing.

00:17:34.980 --> 00:17:35.990
I just want you to
see the pattern.

00:17:35.990 --> 00:17:45.770
It's 3 times x1 plus 1 times
x2 plus 0 times x3

00:17:45.770 --> 00:17:47.520
plus 3 times x4.

00:17:47.520 --> 00:17:48.860
That's the first entry.

00:17:48.860 --> 00:17:55.980
And then you have 2 times x1
plus 4 times x2 all the way.

00:17:55.980 --> 00:18:00.140
And then you finally have
minus 1 times x1

00:18:00.140 --> 00:18:02.210
plus 2 times x2.

00:18:02.210 --> 00:18:03.440
You get the idea.

00:18:03.440 --> 00:18:05.700
But what's happening here?

00:18:05.700 --> 00:18:08.890
This first vector is always
being multiplied

00:18:08.890 --> 00:18:10.460
by the scalar x1.

00:18:10.460 --> 00:18:15.880
In fact you can view this part
of the entries right here.

00:18:15.880 --> 00:18:20.880
We're just multiplying this guy
times the scalar of x1 in

00:18:20.880 --> 00:18:21.780
every case.

00:18:21.780 --> 00:18:23.440
You have 3, 2, minus
1, 3, 2, minus 1.

00:18:23.440 --> 00:18:24.980
We're multiplying by
the scalar of x1.

00:18:24.980 --> 00:18:30.480
And then we're adding that to
this guy times the scalar x2

00:18:30.480 --> 00:18:35.400
and then we're adding that to
this guy times the scalar x3.

00:18:35.400 --> 00:18:52.640
So we can rewrite A times x as
being equal to the scalar x1

00:18:52.640 --> 00:19:00.510
times the vector v1 plus
the scalar x2.

00:19:00.510 --> 00:19:04.700
This is the scalar x1 times the
vector v1 plus the scalar

00:19:04.700 --> 00:19:08.460
x2 times the vector v2.

00:19:08.460 --> 00:19:09.710
I want to do that in yellow.

00:19:14.100 --> 00:19:23.570
Plus x3 times the vector
v3 plus the scalar x4

00:19:23.570 --> 00:19:26.280
times the vector v4.

00:19:26.280 --> 00:19:28.290
And obviously if we had n terms
here, we'd have to have

00:19:28.290 --> 00:19:30.930
n vectors here, and we
could just make this

00:19:30.930 --> 00:19:32.090
more general to n.

00:19:32.090 --> 00:19:36.520
But what's interesting here is
now the product Ax can be

00:19:36.520 --> 00:19:40.250
interpreted as a linear
combination.

00:19:40.250 --> 00:19:43.910
These are just arbitrary numbers
depending on what our

00:19:43.910 --> 00:19:45.070
vector x is.

00:19:45.070 --> 00:19:47.310
So depending on our vector
x, we're taking a linear

00:19:47.310 --> 00:19:50.950
combination of the column
vectors of A.

00:19:50.950 --> 00:20:01.070
So this is a linear
combination of

00:20:01.070 --> 00:20:06.410
column vectors of A.

00:20:06.410 --> 00:20:07.680
So this is really interesting.

00:20:07.680 --> 00:20:10.510
I'm sure you've been exposed
to matrix multiplication in

00:20:10.510 --> 00:20:15.050
the past. But I really want you
to absorb these two ways

00:20:15.050 --> 00:20:17.100
of interpreting it, because
they'll be important when we

00:20:17.100 --> 00:20:19.490
talk about column spaces
and things

00:20:19.490 --> 00:20:20.740
like that in the future.

00:20:22.830 --> 00:20:24.680
Actually there's other ways
you can actually interpret

00:20:24.680 --> 00:20:26.800
that as a transformation
of this vector x.

00:20:26.800 --> 00:20:28.910
But I won't cover that in this
video just for brevity.

00:20:28.910 --> 00:20:33.310
But you can interpret it as a
weighted combination, or a

00:20:33.310 --> 00:20:36.710
linear combination of the column
vectors of A, where the

00:20:36.710 --> 00:20:39.360
matrix X dictates what
the weights on each

00:20:39.360 --> 00:20:40.700
of the columns are.

00:20:40.700 --> 00:20:45.360
Or you can interpret it as,
essentially, the dot product

00:20:45.360 --> 00:20:47.840
of the row vectors, or you could
define the row vectors

00:20:47.840 --> 00:20:49.670
as a transpose of
column vectors.

00:20:49.670 --> 00:20:52.250
The dot product of those column
vectors, each of the

00:20:52.250 --> 00:20:55.240
corresponding column vectors,
with your matrix X.

00:20:55.240 --> 00:20:57.750
So these are both completely
valid interpretations, and

00:20:57.750 --> 00:21:01.090
hopefully this video at least
gives you a working knowledge

00:21:01.090 --> 00:21:02.720
of what matrix multiplication
is.

00:21:02.720 --> 00:21:05.480
And even better, gives you a
little bit deeper sense of all

00:21:05.480 --> 00:21:08.390
of the different ways that
it can be interpreted.

