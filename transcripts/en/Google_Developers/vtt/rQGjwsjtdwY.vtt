WEBVTT
Kind: captions
Language: en

00:00:08.710 --> 00:00:10.340
PETE LEPAGE: Welcome,
everybody.

00:00:10.340 --> 00:00:12.860
My name is Pete LePage, and I'm
a developer advocate on

00:00:12.860 --> 00:00:14.350
the Chrome team.

00:00:14.350 --> 00:00:17.360
Today we've got another exciting
episode of our Chrome

00:00:17.360 --> 00:00:19.030
Apps Office Hours.

00:00:19.030 --> 00:00:21.500
I'm joined by Paul Kinlan
who's in London.

00:00:21.500 --> 00:00:23.420
Paul, I'll let you introduce
yourself.

00:00:23.420 --> 00:00:26.480
PAUL KINLAN: Yes, I'm Paul
Kinlan in London.

00:00:26.480 --> 00:00:30.056
I'm also a Chrome Developer
advocate at Google, and we've

00:00:30.056 --> 00:00:33.546
got a really exciting episode
today about identity and

00:00:33.546 --> 00:00:35.600
managing identity inside
Chrome applications.

00:00:35.600 --> 00:00:37.360
PETE LEPAGE: Yeah, I think so.

00:00:37.360 --> 00:00:39.935
Awesome.

00:00:39.935 --> 00:00:44.130
So let's just introduce the
identity stuff in Chrome apps,

00:00:44.130 --> 00:00:46.140
because I think that's
a fairly important

00:00:46.140 --> 00:00:47.650
thing to talk about.

00:00:47.650 --> 00:00:52.070
Because Chrome apps, if you want
to authenticate against a

00:00:52.070 --> 00:00:55.840
Google app, there's a real easy
way-- or a Google service

00:00:55.840 --> 00:00:57.780
or anything like that, there's
a real easy way you can go

00:00:57.780 --> 00:00:58.390
about doing that.

00:00:58.390 --> 00:01:00.520
It's a pretty quick way to go.

00:01:00.520 --> 00:01:02.930
But if you want to authenticate
against anything

00:01:02.930 --> 00:01:05.160
else, if you say you wanted to
authenticate against Twitter,

00:01:05.160 --> 00:01:08.280
maybe your own service, maybe
you want to authenticate--

00:01:08.280 --> 00:01:11.630
today, we're actually going to
take a look at Instagram.

00:01:11.630 --> 00:01:14.920
But if you want to be able to
authenticate against those so

00:01:14.920 --> 00:01:17.970
that you can make sure, hey,
this user has rights to do

00:01:17.970 --> 00:01:21.260
this and maybe upload files,
these are things that are

00:01:21.260 --> 00:01:22.720
really important that
you're going to want

00:01:22.720 --> 00:01:24.720
to be able to do.

00:01:24.720 --> 00:01:27.580
As we go through today, I just
put up some links to some of

00:01:27.580 --> 00:01:31.340
the documentation that
we've got going.

00:01:31.340 --> 00:01:35.360
As always, we always want to
hear about your questions.

00:01:35.360 --> 00:01:37.950
The link to questions is
up there right now.

00:01:37.950 --> 00:01:40.720
You can ask your questions
at that URL.

00:01:40.720 --> 00:01:44.360
We'll be keeping an eye on
there during the day.

00:01:44.360 --> 00:01:46.900
It's actually, Paul,
it's right there.

00:01:46.900 --> 00:01:47.400
So--

00:01:47.400 --> 00:01:48.930
PAUL KINLAN: Oh yeah, I'm
looking the wrong way.

00:01:48.930 --> 00:01:50.180
PETE LEPAGE: --yeah,
it's to your--

00:01:52.470 --> 00:01:53.995
I'm not even going
to try and guess.

00:01:53.995 --> 00:01:55.190
PAUL KINLAN: I was trying
to be cool.

00:01:55.190 --> 00:01:57.330
PETE LEPAGE: I think it's to
your lower right, if you look

00:01:57.330 --> 00:01:58.730
to your lower right.

00:01:58.730 --> 00:01:59.390
There you go.

00:01:59.390 --> 00:02:00.620
Alright, perfect.

00:02:00.620 --> 00:02:02.200
Awesome.

00:02:02.200 --> 00:02:07.430
So why don't I pass it over to
Paul, and you can start with a

00:02:07.430 --> 00:02:10.000
little introduction of the stuff
that you've got going.

00:02:10.000 --> 00:02:13.860
PAUL KINLAN: Yeah, so identity,
identity, identity.

00:02:13.860 --> 00:02:16.240
It's what we're trying
to talk about today.

00:02:16.240 --> 00:02:17.960
One of the things that we
noticed when we've been

00:02:17.960 --> 00:02:20.210
building web applications,
especially inside Chrome and

00:02:20.210 --> 00:02:23.440
Chrome Extensions over the past
couple years, is that

00:02:23.440 --> 00:02:26.130
it's actually pretty hard to
authenticate against a third

00:02:26.130 --> 00:02:27.440
party service.

00:02:27.440 --> 00:02:29.685
And these third party services
like Pete mentioned before

00:02:29.685 --> 00:02:32.565
were like Twitter, or Instagram,
or Facebook, things

00:02:32.565 --> 00:02:35.770
that aren't necessarily Google
properties, they've always

00:02:35.770 --> 00:02:37.400
been a little bit hard
to authenticate

00:02:37.400 --> 00:02:38.505
against OAuth 1.0.

00:02:38.505 --> 00:02:41.300
The OAuth 1.0 flow doesn't
quite work very well for

00:02:41.300 --> 00:02:43.960
installed applications,
applications not necessarily

00:02:43.960 --> 00:02:46.720
with a server behind
the scenes.

00:02:46.720 --> 00:02:48.540
And obviously, OAuth 2.0 has
come along as well, and people

00:02:48.540 --> 00:02:52.086
want to take advantage of OAuth
2.0, and not have to

00:02:52.086 --> 00:02:54.680
have any specific integrations
into the browser for those

00:02:54.680 --> 00:02:55.790
external APIs.

00:02:55.790 --> 00:02:58.660
But you build to authenticate
and interact with these APIs

00:02:58.660 --> 00:02:59.550
themselves.

00:02:59.550 --> 00:03:02.390
So we've introduced this
experimental--

00:03:02.390 --> 00:03:04.850
it's still experimental
at the moment--

00:03:04.850 --> 00:03:06.000
identity API.

00:03:06.000 --> 00:03:08.620
And the identity API is like
pizza, it's split into two

00:03:08.620 --> 00:03:13.580
bits, the Google service area,
where you can ask for access

00:03:13.580 --> 00:03:16.080
to Docs and a whole lot of other
stuff like that, and

00:03:16.080 --> 00:03:19.860
then the third party flows
where that's the

00:03:19.860 --> 00:03:22.570
Twittergrams-- ah, that's
a new one--

00:03:22.570 --> 00:03:25.450
Instagram, Twitter, Facebook,
all those types of services.

00:03:25.450 --> 00:03:26.990
And that's the one we're going
to talk about today.

00:03:26.990 --> 00:03:28.240
It's a really simple API.

00:03:30.880 --> 00:03:32.440
The reason why we're doing it
is we want to make it super

00:03:32.440 --> 00:03:34.220
simple for you, when you're
building an installed

00:03:34.220 --> 00:03:36.750
application, to be able to
authenticate against a third

00:03:36.750 --> 00:03:39.960
party service without tons and
tons and tons of code.

00:03:39.960 --> 00:03:41.830
We've all been burned
by OAuth 1.0.

00:03:41.830 --> 00:03:43.520
OAuth 2.0 is a lot easier.

00:03:43.520 --> 00:03:45.050
But you've got to remember,
a lot of services don't

00:03:45.050 --> 00:03:47.960
necessarily use just OAuth
for authentication.

00:03:47.960 --> 00:03:52.400
They might use OpenID, they
might use Basic Auth, loads of

00:03:52.400 --> 00:03:54.220
different types of
authentication.

00:03:54.220 --> 00:03:58.100
We think that the way we've
designed this third party

00:03:58.100 --> 00:04:02.200
authentication system is in a
way that it enables you to be

00:04:02.200 --> 00:04:05.450
able to authenticate and
basically use any type of

00:04:05.450 --> 00:04:07.720
authentication process that
you could think of.

00:04:07.720 --> 00:04:12.200
We're going to look at OAuth
2.0 today inside Instagram.

00:04:12.200 --> 00:04:13.737
Should we just jump into
the application for

00:04:13.737 --> 00:04:14.140
the rest of the show?

00:04:14.140 --> 00:04:15.390
PETE LEPAGE: Yeah,
let's do that.

00:04:17.350 --> 00:04:20.750
I'm bringing up your screen now
so they see your screen.

00:04:20.750 --> 00:04:22.210
PAUL KINLAN: That's my screen,
these are all my apps, there's

00:04:22.210 --> 00:04:23.990
a lot of installed applications
there.

00:04:23.990 --> 00:04:25.810
We have a very nice
MarkDown editor.

00:04:25.810 --> 00:04:26.820
I'd try that one out.

00:04:26.820 --> 00:04:28.480
PETE LEPAGE: That MarkDown
editor is pretty sweet.

00:04:28.480 --> 00:04:29.600
PAUL KINLAN: Yeah,
it's pretty cool.

00:04:29.600 --> 00:04:30.930
IRC app as well.

00:04:30.930 --> 00:04:33.210
Anyway, that's not what we're
talking about today.

00:04:33.210 --> 00:04:34.650
We are doing this
thing called--

00:04:34.650 --> 00:04:35.930
I called it On Air
Authentication

00:04:35.930 --> 00:04:37.960
because I had two apps.

00:04:37.960 --> 00:04:40.680
One was a test app, which I've
just realized doesn't load,

00:04:40.680 --> 00:04:41.120
but this one does.

00:04:41.120 --> 00:04:42.355
So this one works.

00:04:42.355 --> 00:04:46.390
And this is the worst looking
application you will see in

00:04:46.390 --> 00:04:48.510
your lifetime today, but it's
going to be something that

00:04:48.510 --> 00:04:51.336
we're going to show you the
potential of the API.

00:04:51.336 --> 00:04:54.150
Click some buttons, doesn't
do anything.

00:04:54.150 --> 00:04:57.010
You would also expect, with an
Instagram API, to be able to

00:04:57.010 --> 00:05:00.220
view photos and a whole
lot of other stuff.

00:05:00.220 --> 00:05:03.130
However, that's not going to
work, because that is an

00:05:03.130 --> 00:05:05.250
exercise for you, the listener,
the watcher, the

00:05:05.250 --> 00:05:07.030
reader to actually implement.

00:05:07.030 --> 00:05:08.370
But what we're going
to show you is--

00:05:08.370 --> 00:05:09.720
PETE LEPAGE: I think they're
actually viewers, Paul.

00:05:09.720 --> 00:05:10.160
PAUL KINLAN: Sorry?

00:05:10.160 --> 00:05:11.560
PETE LEPAGE: I think
they're viewers.

00:05:11.560 --> 00:05:13.110
PAUL KINLAN: Did
I say watchers?

00:05:13.110 --> 00:05:15.010
PETE LEPAGE: Watchers, yes.

00:05:15.010 --> 00:05:15.280
PAUL KINLAN: Oh, my.

00:05:15.280 --> 00:05:16.000
That's terrible--

00:05:16.000 --> 00:05:18.580
PETE LEPAGE: That's OK, it's
always fun like that.

00:05:18.580 --> 00:05:19.490
I'm giving you trouble.

00:05:19.490 --> 00:05:20.740
PAUL KINLAN: It's the English
way of saying it.

00:05:23.080 --> 00:05:25.790
Anyway, sorry.

00:05:25.790 --> 00:05:27.370
So this is the application that
we're going to fill out,

00:05:27.370 --> 00:05:29.690
and basically by the end of it,
we'll see an authenticated

00:05:29.690 --> 00:05:31.322
stream of data coming back in.

00:05:31.322 --> 00:05:34.120
It'll just be JSON, raw JSON
data, but you'll be able to

00:05:34.120 --> 00:05:35.695
see the fact that you can
get this information.

00:05:35.695 --> 00:05:38.210
You can authenticate against the
service, and then start to

00:05:38.210 --> 00:05:40.270
interact with it, and build
your own things.

00:05:40.270 --> 00:05:42.950
One of the reasons that we
haven't got images is we can't

00:05:42.950 --> 00:05:46.160
directly pull images
in for content

00:05:46.160 --> 00:05:47.320
security policy reasons.

00:05:47.320 --> 00:05:49.990
And Paul Lewis has written a
really good library that

00:05:49.990 --> 00:05:51.360
enables it to do this,
but it's out the

00:05:51.360 --> 00:05:53.550
scope of this talk.

00:05:53.550 --> 00:05:56.770
So jumping into the code, what
do we have to do to get

00:05:56.770 --> 00:05:58.120
identity working?

00:05:58.120 --> 00:05:59.180
Well, it's actually
pretty simple.

00:05:59.180 --> 00:05:59.730
We have an app.

00:05:59.730 --> 00:06:02.680
I've already made the shell of
the app, so it's the outside

00:06:02.680 --> 00:06:04.216
parts of it where--

00:06:04.216 --> 00:06:05.960
basically, I don't want to bore
you kind of showing you

00:06:05.960 --> 00:06:07.490
how to create applications,
because you already

00:06:07.490 --> 00:06:08.160
know how to do it.

00:06:08.160 --> 00:06:10.610
PETE LEPAGE: Yeah, we've done a
bunch of Hangouts and Office

00:06:10.610 --> 00:06:11.940
Hours before where we've walked

00:06:11.940 --> 00:06:12.920
through the Hello World.

00:06:12.920 --> 00:06:16.470
If you haven't seen one, you
can go back to all the GDL

00:06:16.470 --> 00:06:17.130
events before.

00:06:17.130 --> 00:06:18.440
You can grab one of those.

00:06:18.440 --> 00:06:22.500
If not, there's a good Hello
World app in the

00:06:22.500 --> 00:06:23.350
documentation.

00:06:23.350 --> 00:06:25.307
PAUL KINLAN: Yeah, and you can
use Yeoman, yeoman init Chrome

00:06:25.307 --> 00:06:27.960
apps, or Chrome app, those types
of things, which I've

00:06:27.960 --> 00:06:28.750
done with this actually.

00:06:28.750 --> 00:06:31.380
Which is why there's a picture
of Yeoman as the icon.

00:06:31.380 --> 00:06:33.860
So anyway, the first thing that
we always do when we're

00:06:33.860 --> 00:06:37.080
building applications is just
check out the manifest.

00:06:37.080 --> 00:06:38.340
This is a basic manifest.

00:06:38.340 --> 00:06:40.070
It's using some localized
variables.

00:06:40.070 --> 00:06:42.370
We can ignore them a little
bit at the moment.

00:06:42.370 --> 00:06:45.270
An app background script, the
thing that always runs there.

00:06:45.270 --> 00:06:47.880
And there's this weird thing
here which normally most

00:06:47.880 --> 00:06:49.940
people don't play around with,
especially when you upload

00:06:49.940 --> 00:06:54.240
into the store, called a key.

00:06:54.240 --> 00:06:56.350
The key is the public key,
basically, of your

00:06:56.350 --> 00:06:58.520
application, and it's used
for authentication and

00:06:58.520 --> 00:07:01.570
verification that the installed
application or

00:07:01.570 --> 00:07:04.790
extension that you've got is
authentic, essentially.

00:07:04.790 --> 00:07:07.400
The reason why we need this is
that we need a consistent ID

00:07:07.400 --> 00:07:11.220
to be able to actually test our
application, because what

00:07:11.220 --> 00:07:14.090
normally happens in the OAuth
flow is that you will

00:07:14.090 --> 00:07:17.240
authenticate against a service
such as Instagram, and then it

00:07:17.240 --> 00:07:20.750
will redirect the user
back to a web page.

00:07:20.750 --> 00:07:23.300
And our web page-- well, it
doesn't actually exist.

00:07:23.300 --> 00:07:26.150
It's a Chrome Extension
URL, essentially.

00:07:26.150 --> 00:07:29.380
So we need to know what that
URL is ahead of time.

00:07:29.380 --> 00:07:31.730
And the easiest way to do it,
and the easiest way to make

00:07:31.730 --> 00:07:35.610
sure that your ID is consistent
across even all

00:07:35.610 --> 00:07:38.610
your machines is to generate
it yourself.

00:07:38.610 --> 00:07:40.540
And I want to show you a little
tip to actually go off

00:07:40.540 --> 00:07:43.070
and generate one.

00:07:43.070 --> 00:07:45.240
You might not be able to see
this too well-- and I've just

00:07:45.240 --> 00:07:47.232
done the volume by mistake--

00:07:47.232 --> 00:07:55.140
is if we go in here, I think
it's atob actually.

00:07:55.140 --> 00:07:56.310
Test.

00:07:56.310 --> 00:07:58.746
Can't spell, it doesn't
really matter.

00:07:58.746 --> 00:07:59.670
There we are.

00:07:59.670 --> 00:08:04.650
Got it wrong already,
btoa, btoa.

00:08:04.650 --> 00:08:07.550
Wow, there we go.

00:08:07.550 --> 00:08:10.510
And that will generate a
Base64 encoded string.

00:08:10.510 --> 00:08:14.350
And the Base64 encoded string is
what you need for your key

00:08:14.350 --> 00:08:15.540
inside your manifest.

00:08:15.540 --> 00:08:17.510
You can put whatever you want
inside of here when you are

00:08:17.510 --> 00:08:19.350
testing for general
testing purposes.

00:08:19.350 --> 00:08:20.990
It doesn't really matter what
you use as long as it's a

00:08:20.990 --> 00:08:23.540
basic full encoded string.

00:08:23.540 --> 00:08:25.860
However, never ever publish
that to the store.

00:08:25.860 --> 00:08:28.130
If you're going to publish this
to the Chrome Web Store,

00:08:28.130 --> 00:08:30.130
make sure you just delete the
key outside of your manifest,

00:08:30.130 --> 00:08:32.100
and the Chrome Web Store will
manage that itself.

00:08:32.100 --> 00:08:35.370
Which will mean that you have
to go and often change your

00:08:35.370 --> 00:08:37.860
redirect URLs inside your
authentication provider, but

00:08:37.860 --> 00:08:39.010
that's generally OK.

00:08:39.010 --> 00:08:41.890
That's a nice quick way of doing
it inside Chrome itself.

00:08:41.890 --> 00:08:43.250
So let's jump back
to the code.

00:08:43.250 --> 00:08:45.440
There's the key, and we
have permissions.

00:08:45.440 --> 00:08:47.830
And the permissions are these
things that basically say

00:08:47.830 --> 00:08:50.222
upfront what your application
requires from the user to be

00:08:50.222 --> 00:08:51.940
able to operate.

00:08:51.940 --> 00:08:54.180
Now, you'd think that
an identity

00:08:54.180 --> 00:08:55.110
permission would be needed.

00:08:55.110 --> 00:08:55.900
Right now it's not.

00:08:55.900 --> 00:08:57.820
You just need this thing
called an experimental

00:08:57.820 --> 00:08:58.600
permission.

00:08:58.600 --> 00:09:00.660
And the reason why you need this
is because you need to

00:09:00.660 --> 00:09:01.590
basically--

00:09:01.590 --> 00:09:04.050
excuse me.

00:09:04.050 --> 00:09:06.100
The identity API is behind
an experimental flag,

00:09:06.100 --> 00:09:08.920
essentially, at the moment, so
you need this flag here to be

00:09:08.920 --> 00:09:09.800
able to actually use it.

00:09:09.800 --> 00:09:12.640
This also means you can't upload
to the Web Store today,

00:09:12.640 --> 00:09:16.080
but soon that'll hopefully
change.

00:09:16.080 --> 00:09:17.960
OK, so that's our manifest.

00:09:17.960 --> 00:09:19.890
We've got to the point where we
can do something inside our

00:09:19.890 --> 00:09:22.080
application, or describe
what we need inside our

00:09:22.080 --> 00:09:23.050
application.

00:09:23.050 --> 00:09:25.080
Let's look at the index.html.

00:09:25.080 --> 00:09:26.340
Doesn't do much.

00:09:26.340 --> 00:09:29.440
If we go right down to the
bottom, you'll see the words

00:09:29.440 --> 00:09:30.960
"Step1", which is the header.

00:09:30.960 --> 00:09:33.190
There's a button that when it's
clicked we will launch an

00:09:33.190 --> 00:09:35.140
authentication flow and a pre.

00:09:35.140 --> 00:09:38.250
And the pre is just for nice
pretty printing, essentially.

00:09:38.250 --> 00:09:40.690
There's not much else that we
need inside this application.

00:09:40.690 --> 00:09:44.010
It doesn't need to look fancy,
so that's all there is.

00:09:44.010 --> 00:09:48.580
But interestingly, there is
an index.js which is our

00:09:48.580 --> 00:09:49.380
functionality.

00:09:49.380 --> 00:09:52.350
And this is what we're going
to fill out today.

00:09:52.350 --> 00:09:54.700
So if we do this right,
I will put

00:09:54.700 --> 00:09:59.100
console.log("HELLO") in here.

00:09:59.100 --> 00:10:05.530
And if we go back to Chrome, we
reload the app, login, and

00:10:05.530 --> 00:10:08.930
inspect the element, we should
get console.log.

00:10:08.930 --> 00:10:11.880
That proves we're doing
the live thing, right?

00:10:11.880 --> 00:10:14.570
In theory.

00:10:14.570 --> 00:10:15.520
So what's next?

00:10:15.520 --> 00:10:17.940
So what we need to do is,
basically, we need to actually

00:10:17.940 --> 00:10:21.760
start to actually provide the
information that we need to

00:10:21.760 --> 00:10:22.360
authenticate.

00:10:22.360 --> 00:10:25.370
So I'm going to make a var id.

00:10:25.370 --> 00:10:27.930
This is going to sound a little
bit cryptic right now,

00:10:27.930 --> 00:10:29.450
but basically it's the identity

00:10:29.450 --> 00:10:30.830
credentials that we need.

00:10:30.830 --> 00:10:34.400
And the first thing that you
need is actually a URL, and

00:10:34.400 --> 00:10:35.950
the URL is the thing
that we're going to

00:10:35.950 --> 00:10:38.960
authenticate against.

00:10:38.960 --> 00:10:44.110
To spare my hair, because I have
none, let me just copy

00:10:44.110 --> 00:10:46.160
and paste something
very quickly.

00:10:50.880 --> 00:10:52.432
Oops a daisy, wrong one.

00:10:57.750 --> 00:11:02.340
Delete that, delete
that as well.

00:11:02.340 --> 00:11:05.160
Var id =, boom, there we are.

00:11:05.160 --> 00:11:07.250
Now this is actually the
Instagram authentication end

00:11:07.250 --> 00:11:10.710
point, and as you can see
we've got a client ID.

00:11:10.710 --> 00:11:13.610
I will be deleting this
client ID after this

00:11:13.610 --> 00:11:15.610
presentation, at least.

00:11:15.610 --> 00:11:17.920
But the client ID is part of
the OAuth 2.0 process. it's

00:11:17.920 --> 00:11:20.220
the thing that you need to
identify your application to

00:11:20.220 --> 00:11:21.630
the third party service.

00:11:21.630 --> 00:11:23.790
And the way that you actually
do that is you go to the

00:11:23.790 --> 00:11:25.720
Instagram developer
documentation-- it's a pretty

00:11:25.720 --> 00:11:27.650
nice documentation--

00:11:27.650 --> 00:11:29.070
and then you look at
your applications.

00:11:29.070 --> 00:11:31.004
I did have my application
up before.

00:11:34.716 --> 00:11:36.095
API console, nope.

00:11:36.095 --> 00:11:38.240
That's not the one.

00:11:38.240 --> 00:11:39.200
Help.

00:11:39.200 --> 00:11:40.450
Hey.

00:11:43.940 --> 00:11:44.640
PETE LEPAGE: So these are--

00:11:44.640 --> 00:11:45.040
[INTERPOSING VOICES]

00:11:45.040 --> 00:11:46.690
PETE LEPAGE: --these are that
thing that you have to do,

00:11:46.690 --> 00:11:50.190
Paul, to initially set your app
up with whatever service

00:11:50.190 --> 00:11:52.950
provider if it's using
OAuth 2.0, right?

00:11:52.950 --> 00:11:53.820
PAUL KINLAN: Yeah,
exactly right.

00:11:53.820 --> 00:11:55.580
So what we've got here
is a client ID.

00:11:55.580 --> 00:11:57.980
This is the thing that you
present to the your

00:11:57.980 --> 00:12:00.950
application, client secret
which I will be deleting

00:12:00.950 --> 00:12:04.600
pretty much straight away, the
website URL, that's just

00:12:04.600 --> 00:12:06.630
basically to prove who you are
essentially, and then the

00:12:06.630 --> 00:12:07.550
redirect URL.

00:12:07.550 --> 00:12:12.750
Now the redirect URL is the
thing that Instagram will

00:12:12.750 --> 00:12:15.550
redirect you back
to, essentially.

00:12:15.550 --> 00:12:19.500
Let me go back here, if we
can zoom in, the zoom

00:12:19.500 --> 00:12:22.280
doesn't work anymore.

00:12:22.280 --> 00:12:23.130
It's a weird URL.

00:12:23.130 --> 00:12:25.850
It's not HTTP URL, it's a
Chrome Extension URL.

00:12:25.850 --> 00:12:27.830
PETE LEPAGE: Can you just move
that up a little bit, Paul.

00:12:27.830 --> 00:12:30.270
PAUL KINLAN: Yeah, sure.

00:12:30.270 --> 00:12:30.800
PETE LEPAGE: There we go.

00:12:30.800 --> 00:12:31.880
That's good, yup.

00:12:31.880 --> 00:12:33.780
PAUL KINLAN: Cool, so we have
this weird little URL, which

00:12:33.780 --> 00:12:36.190
is a Chrome Extension URL, and
this is why we need that

00:12:36.190 --> 00:12:36.950
consistent ID.

00:12:36.950 --> 00:12:39.000
That thing that we put in the
manifest to generate a nice

00:12:39.000 --> 00:12:42.370
ID, that's what we need to be
able to basically send the

00:12:42.370 --> 00:12:45.322
user from Instagram back
into our Chrome app.

00:12:45.322 --> 00:12:48.120
PETE LEPAGE: Right, so that
redirects into a Chrome app.

00:12:48.120 --> 00:12:51.060
So if you think about normally
with a web app you go to a

00:12:51.060 --> 00:12:56.730
specific URL, with a Chrome
packaged app, it's URL, even

00:12:56.730 --> 00:13:00.270
though it's not visible to the
user ever, is that sort of

00:13:00.270 --> 00:13:01.910
Chrome app URL.

00:13:01.910 --> 00:13:03.670
PAUL KINLAN: Yeah, exactly.

00:13:03.670 --> 00:13:04.440
Yeah, that's right.

00:13:04.440 --> 00:13:09.600
It's just this thing to,
basically, let the other app

00:13:09.600 --> 00:13:10.950
return into your application.

00:13:10.950 --> 00:13:12.790
Now, the interesting thing is
that you don't necessarily

00:13:12.790 --> 00:13:17.000
have to have a Chrome Extension
URL, it's just that

00:13:17.000 --> 00:13:19.390
Instagram have enabled it so
that you can have any kind of

00:13:19.390 --> 00:13:21.240
protocol, any scheme.

00:13:21.240 --> 00:13:23.330
We do have a service--

00:13:23.330 --> 00:13:26.260
it's not live and ready for
users or developers to play

00:13:26.260 --> 00:13:30.560
with-- where we will host
the redirect URL for the

00:13:30.560 --> 00:13:31.470
developer, essentially.

00:13:31.470 --> 00:13:32.790
So it would extension ID dot--

00:13:32.790 --> 00:13:35.850
I think it's chromiumapps.org.

00:13:35.850 --> 00:13:38.240
So you put that in, essentially,
and all that

00:13:38.240 --> 00:13:40.210
Chrome's doing behind the
scenes, all the application

00:13:40.210 --> 00:13:42.900
framework is doing behind
scenes, is listening out for

00:13:42.900 --> 00:13:45.120
either a redirect into its
application using the Chrome

00:13:45.120 --> 00:13:53.180
Extension URL, or a redirect
into HTTPS:/ whatever it is.

00:13:53.180 --> 00:13:54.500
PETE LEPAGE: OK, so
that way if--

00:13:54.500 --> 00:13:55.580
[INTERPOSING VOICES]

00:13:55.580 --> 00:13:58.280
PETE LEPAGE: --some third party
provider forces you to

00:13:58.280 --> 00:14:04.530
use HTTPS, you can still make it
work because our schema is

00:14:04.530 --> 00:14:06.540
Chrome Extension?

00:14:06.540 --> 00:14:08.700
PAUL KINLAN: Yes, exactly right,
you can make it work

00:14:08.700 --> 00:14:10.570
that way, and that's some

00:14:10.570 --> 00:14:14.250
infrastructure we'll be providing.

00:14:14.250 --> 00:14:17.630
So let me just quickly
jump out.

00:14:17.630 --> 00:14:20.130
The next thing that we're going
to do after putting the

00:14:20.130 --> 00:14:24.150
URL in is this thing
called interactive.

00:14:24.150 --> 00:14:28.460
This is just a special flag
which basically says, should

00:14:28.460 --> 00:14:35.350
the browser or should the run
time pop up, a special little

00:14:35.350 --> 00:14:38.180
window that you can
control which

00:14:38.180 --> 00:14:39.360
presents the login details.

00:14:39.360 --> 00:14:42.760
If you say interactive equals
false, then you won't see

00:14:42.760 --> 00:14:44.090
anything on the screen at all.

00:14:44.090 --> 00:14:46.780
Now, the reason why you might
want false is not necessarily

00:14:46.780 --> 00:14:49.450
in the OAuth flow, but
if there's some other

00:14:49.450 --> 00:14:51.990
authenticating scheme where
you know the user based on

00:14:51.990 --> 00:14:55.000
information that they put in
from that URL, maybe it's like

00:14:55.000 --> 00:14:56.450
a username-password combination

00:14:56.450 --> 00:14:57.810
or some secret token--

00:14:57.810 --> 00:15:00.630
I mean it's a really bad
way of saying it.

00:15:00.630 --> 00:15:03.000
You might not always need
this kind of pop up.

00:15:03.000 --> 00:15:04.060
It doesn't make that
much sense.

00:15:04.060 --> 00:15:05.520
You don't need a pop up to
come up to the user to

00:15:05.520 --> 00:15:07.740
authenticate them because
they've already presented the

00:15:07.740 --> 00:15:10.800
details that they need inside
your application.

00:15:10.800 --> 00:15:12.395
Interactive false will
never do the pop

00:15:12.395 --> 00:15:13.830
up, it'll just redirect.

00:15:13.830 --> 00:15:15.940
It'll do the things it needs to
do on this remote server,

00:15:15.940 --> 00:15:18.530
and then bring yourself back
in the application once the

00:15:18.530 --> 00:15:20.930
redirect's happened.

00:15:20.930 --> 00:15:22.360
So that's all it's doing.

00:15:22.360 --> 00:15:25.080
It's not anything too sexy, but
it's kind of interesting.

00:15:25.080 --> 00:15:26.950
Now, there's not much
to show you.

00:15:26.950 --> 00:15:29.860
I could go off and show
you this working.

00:15:29.860 --> 00:15:32.010
It just would not do anything
at the moment because we're

00:15:32.010 --> 00:15:34.245
not actually doing the
authentication flow.

00:15:36.770 --> 00:15:40.260
This is the important
piece that you need

00:15:40.260 --> 00:15:41.510
in the whole flow.

00:15:45.350 --> 00:15:49.170
This is the API basically where
you go launch web--

00:15:52.620 --> 00:15:55.430
what I'd do for IntelliSense.

00:15:55.430 --> 00:15:56.780
PETE LEPAGE: Well, why aren't
you using Sublime or

00:15:56.780 --> 00:15:58.290
something like that?

00:15:58.290 --> 00:16:00.535
PAUL KINLAN: I never got around
to even trying it.

00:16:00.535 --> 00:16:03.450
You get stuck with your favorite
preferred text

00:16:03.450 --> 00:16:05.670
editor, which is BIM, and I
don't even have any sensible

00:16:05.670 --> 00:16:07.160
defaults in this one either.

00:16:07.160 --> 00:16:09.410
Brand new machine.

00:16:09.410 --> 00:16:11.062
But this is it, right?

00:16:11.062 --> 00:16:16.100
Let's see if this works,
console.log, URL, sorry.

00:16:19.530 --> 00:16:22.010
So what happens here
is that we have the

00:16:22.010 --> 00:16:26.520
chrome.experimental.identity
object namespace,

00:16:26.520 --> 00:16:28.840
launchWebAuthFlow is the
method that we call.

00:16:28.840 --> 00:16:31.760
We pass in the details of the
thing that we want to call, so

00:16:31.760 --> 00:16:34.670
the ID object, which is
basically the information

00:16:34.670 --> 00:16:37.410
about Instagram, and
then a call back.

00:16:37.410 --> 00:16:40.000
The interesting thing about this
is the parameter in the

00:16:40.000 --> 00:16:42.250
callback that you'll receive
once authentication is

00:16:42.250 --> 00:16:45.040
successful is a URL.

00:16:45.040 --> 00:16:46.920
Now, you might think that's a
little bit weird, but actually

00:16:46.920 --> 00:16:49.920
what happens is, especially in
the OAuth flow, is that the

00:16:49.920 --> 00:16:53.370
URL contains normally the
authentication token--

00:16:56.150 --> 00:16:58.450
sorry, not the authentication
token, the access token.

00:16:58.450 --> 00:17:01.270
But it must also include some
things like a session ID or

00:17:01.270 --> 00:17:07.280
whatever you need to basically
have access to the user's

00:17:07.280 --> 00:17:08.369
object store at least.

00:17:08.369 --> 00:17:11.480
So right, should we try
and give this a go?

00:17:11.480 --> 00:17:12.560
PETE LEPAGE: Yeah.

00:17:12.560 --> 00:17:13.220
PAUL KINLAN: Yay.

00:17:13.220 --> 00:17:14.499
We don't need Insta--

00:17:14.499 --> 00:17:15.880
we might need Instagram,
actually.

00:17:15.880 --> 00:17:22.849
Let me just edit this, because
we do actually have a new

00:17:22.849 --> 00:17:24.109
extension ID.

00:17:24.109 --> 00:17:29.510
This is what we've been talking
about is where- I

00:17:29.510 --> 00:17:31.310
think the extension ID which
is here at the bottom.

00:17:31.310 --> 00:17:33.840
You can't really see it
probably, but on our

00:17:33.840 --> 00:17:37.550
authentication, it's got
a unique identifier.

00:17:37.550 --> 00:17:40.980
I'm going to just put that in
there for the description, and

00:17:40.980 --> 00:17:43.230
the redirect URL is going
in the back into my app.

00:17:43.230 --> 00:17:44.480
I'm going update the client.

00:17:47.350 --> 00:17:48.870
And away we go.

00:17:48.870 --> 00:17:55.165
So step one, if this all
works, reload app.

00:17:55.165 --> 00:17:57.410
Here's our code.

00:17:57.410 --> 00:17:59.465
So let me go back there so
you can see the screen.

00:18:02.370 --> 00:18:04.470
PETE LEPAGE: And as a reminder
for folks, as they're watching

00:18:04.470 --> 00:18:06.650
this, if you have questions, if
you're curious about some

00:18:06.650 --> 00:18:08.940
of the things that are going on,
please post your questions

00:18:08.940 --> 00:18:10.460
to our Google Moderator page.

00:18:10.460 --> 00:18:13.240
The link is right there
on screen right now.

00:18:16.270 --> 00:18:17.390
PAUL KINLAN: Hey,
so here we go.

00:18:17.390 --> 00:18:19.900
So what's happened here is
essentially we've gone through

00:18:19.900 --> 00:18:26.520
part of the OAuth flow and the
redirect URL of my extension

00:18:26.520 --> 00:18:28.050
doesn't match what is supposed
to be registered.

00:18:28.050 --> 00:18:30.830
So let me go back, I think I
know what the problem is.

00:18:33.730 --> 00:18:39.000
PETE LEPAGE: So this is the
particular case where our app,

00:18:39.000 --> 00:18:40.900
when we say, hey, we want
to authenticate against

00:18:40.900 --> 00:18:45.170
something, we have to give it
where we want to redirect to.

00:18:45.170 --> 00:18:52.070
And on the Instagram side, the
store where they think we want

00:18:52.070 --> 00:18:53.120
to redirect to.

00:18:53.120 --> 00:18:55.080
And so we make sure--

00:18:55.080 --> 00:18:56.885
I'm covering myself with
the little image

00:18:56.885 --> 00:18:57.590
there, there we go--

00:18:57.590 --> 00:19:01.280
so they make sure that both
of those are identical.

00:19:01.280 --> 00:19:04.860
And if they're not identical,
they say, oh, screw you, got

00:19:04.860 --> 00:19:08.390
to go, get out of here, we're
not going to actually work.

00:19:08.390 --> 00:19:09.580
PAUL KINLAN: Yup, exactly.

00:19:09.580 --> 00:19:11.730
Basically what's happened is
I've constructed the wrong URL

00:19:11.730 --> 00:19:13.590
inside my request.

00:19:13.590 --> 00:19:15.920
Because the extension ID changed
between me testing

00:19:15.920 --> 00:19:19.160
this and me actually just
updating the variables before.

00:19:19.160 --> 00:19:23.810
So if all works well--

00:19:23.810 --> 00:19:25.580
let's get rid of, no,
the new tab is fine,

00:19:25.580 --> 00:19:27.980
developers tool is fine.

00:19:27.980 --> 00:19:33.120
Reload app and I'm really
nervous now because if this

00:19:33.120 --> 00:19:34.370
doesn't work then--

00:19:39.780 --> 00:19:40.710
there we go, right.

00:19:40.710 --> 00:19:43.530
So we've got the URL.

00:19:43.530 --> 00:19:45.820
Now, what actually happened
here is I've been

00:19:45.820 --> 00:19:47.390
a little bit sneaky.

00:19:47.390 --> 00:19:50.000
Not too sneaky, because I'm
already logged into Instagram

00:19:50.000 --> 00:19:53.520
so let me log out.

00:19:59.780 --> 00:20:02.460
PETE LEPAGE: So you didn't see
anything pop up or anything

00:20:02.460 --> 00:20:04.000
like that because you're
already logged in and

00:20:04.000 --> 00:20:06.170
Instagram said oh hey, you're
already logged in, we know who

00:20:06.170 --> 00:20:08.280
this guy is, feel free to--

00:20:08.280 --> 00:20:09.020
PAUL KINLAN: Yeah, exactly.

00:20:09.020 --> 00:20:09.690
That is exactly right.

00:20:09.690 --> 00:20:11.860
So Instagram knew I was already
logged in, so all they

00:20:11.860 --> 00:20:14.080
said was cool, you're logged in,
redirect back to the app

00:20:14.080 --> 00:20:15.140
and away you go.

00:20:15.140 --> 00:20:16.920
So if this works, we'll
do the log in there.

00:20:16.920 --> 00:20:20.910
PETE LEPAGE: So now we get that
dialog that pops up that

00:20:20.910 --> 00:20:22.220
asks us to log in.

00:20:22.220 --> 00:20:24.090
This is this interactive
dialogue that you were talking

00:20:24.090 --> 00:20:24.620
about before.

00:20:24.620 --> 00:20:27.180
So if you had set that
interactive to false, this

00:20:27.180 --> 00:20:29.880
thing wouldn't pop up,
and we wouldn't be

00:20:29.880 --> 00:20:31.670
able to log in, correct?

00:20:31.670 --> 00:20:33.090
PAUL KINLAN: Yes, exactly.

00:20:33.090 --> 00:20:36.280
So the interesting thing here
as well is that, actually,

00:20:36.280 --> 00:20:39.275
what's happened is that we've
got a full screen window as

00:20:39.275 --> 00:20:40.860
well, pretty much.

00:20:40.860 --> 00:20:43.620
You, as the application
developer, can control the

00:20:43.620 --> 00:20:46.180
size of the window and the
position, so if you wanted it

00:20:46.180 --> 00:20:48.690
to pop up in the middle of your
screen and just small and

00:20:48.690 --> 00:20:50.590
tight, you can do that.

00:20:50.590 --> 00:20:53.460
So we offer that, certainly.

00:20:53.460 --> 00:20:55.290
And we go back, let's have
a look at the code.

00:20:55.290 --> 00:20:56.650
There we go.

00:20:56.650 --> 00:20:57.640
So we've got this URL.

00:20:57.640 --> 00:21:03.130
So basically what's happened is
we look at the JavaScript--

00:21:03.130 --> 00:21:04.950
let me hide that.

00:21:04.950 --> 00:21:08.360
We've gone into this call back
here with the URL being passed

00:21:08.360 --> 00:21:11.180
back in and now we've got the
ability to do some extra

00:21:11.180 --> 00:21:13.790
little bits and pieces of magic,
essentially, because we

00:21:13.790 --> 00:21:14.975
now have the access token.

00:21:14.975 --> 00:21:18.700
The access token, as you can
see it here, is in the

00:21:18.700 --> 00:21:22.010
document fragment at
the end of the URL.

00:21:22.010 --> 00:21:24.080
So should we try and do
something nice with the

00:21:24.080 --> 00:21:25.570
Instagram API just to prove
that's it worked?

00:21:25.570 --> 00:21:27.700
We've authenticated,
but we don't know

00:21:27.700 --> 00:21:28.550
actually if it works.

00:21:28.550 --> 00:21:29.311
PETE LEPAGE: Yeah, let's.

00:21:29.311 --> 00:21:31.970
PAUL KINLAN: Here we go, cool.

00:21:31.970 --> 00:21:34.755
So there's going to be a little
bit of code which might

00:21:34.755 --> 00:21:36.835
not look like it makes sense to
start off with, but I know

00:21:36.835 --> 00:21:39.040
you're all smart and you'll be
able to pick it up, even if I

00:21:39.040 --> 00:21:40.730
don't explain it very well.

00:21:40.730 --> 00:21:44.810
So let's make a variable
called access token.

00:21:44.810 --> 00:21:48.770
We know the access token is on
the URL, it'll pass back in.

00:21:48.770 --> 00:21:57.036
So we'll just do a sub
string URL.index of--

00:21:57.036 --> 00:21:57.800
oh, dear.

00:21:57.800 --> 00:21:59.580
Sorry.

00:21:59.580 --> 00:22:00.030
What is it?

00:22:00.030 --> 00:22:02.880
It was the hash sign,
or the pound sign

00:22:02.880 --> 00:22:04.075
as you say in America.

00:22:04.075 --> 00:22:05.986
Is that what you say
in America, pound?

00:22:05.986 --> 00:22:09.170
PETE LEPAGE: Pound,
hash, number sign.

00:22:09.170 --> 00:22:09.650
PAUL KINLAN: Number sign.

00:22:09.650 --> 00:22:10.680
Well, there we go.

00:22:10.680 --> 00:22:15.320
So basically, what we've done is
we've been really not that

00:22:15.320 --> 00:22:18.580
robust at all in the sense that
this will fall over if

00:22:18.580 --> 00:22:20.360
you try to use this
in production.

00:22:20.360 --> 00:22:24.040
PETE LEPAGE: So I was going to
ask what happens if I were to

00:22:24.040 --> 00:22:27.120
either provide a bad password
and it didn't let me log in or

00:22:27.120 --> 00:22:32.250
if maybe I was offline, there
was no connection?

00:22:32.250 --> 00:22:33.510
PAUL KINLAN: So actually,
I've never actually

00:22:33.510 --> 00:22:36.220
tested it with offline.

00:22:36.220 --> 00:22:38.080
The thing that's happened in the
past generally is that the

00:22:38.080 --> 00:22:39.550
URL would be blank.

00:22:39.550 --> 00:22:41.180
Basically a null
and undefined.

00:22:41.180 --> 00:22:45.180
So if you get the point where
it's null undefined, then it

00:22:45.180 --> 00:22:45.570
won't work.

00:22:45.570 --> 00:22:50.520
But if your offline, the weird
thing is it only really ever

00:22:50.520 --> 00:22:52.930
fires when there's a redirect
back into app, so it's kind of

00:22:52.930 --> 00:22:54.880
like you could be hanging
around waiting.

00:22:54.880 --> 00:22:59.010
It might make sense to have some
more unsuccess, unfailure

00:22:59.010 --> 00:23:02.040
methods, because you want to
know where log ins failed, on

00:23:02.040 --> 00:23:04.480
one side and not the other.

00:23:04.480 --> 00:23:08.730
So if anyone wants to provide
that feedback more publicly--

00:23:08.730 --> 00:23:13.050
I can do it, whatever you
want to, it's cool.

00:23:13.050 --> 00:23:15.650
So this is a little something
I learned off [? Mehi ?]

00:23:15.650 --> 00:23:16.390
[? Paparita, ?]

00:23:16.390 --> 00:23:20.810
who is no longer with us.

00:23:20.810 --> 00:23:22.680
He is no longer with
the Chrome team.

00:23:22.680 --> 00:23:24.620
I think he's working for
someone else now.

00:23:24.620 --> 00:23:28.180
He made a nice little API
wrapper around Foursquare, and

00:23:28.180 --> 00:23:30.355
so I've done the same type of
thing here where I've made an

00:23:30.355 --> 00:23:31.810
Instagram API.

00:23:31.810 --> 00:23:33.570
It's not going to do too much,
but it's just going to

00:23:33.570 --> 00:23:37.460
basically make it a little bit
easier to make requests, make

00:23:37.460 --> 00:23:39.150
it a little bit more
sane if you want

00:23:39.150 --> 00:23:41.790
to call more functions.

00:23:41.790 --> 00:23:46.120
So this is our request
method, arguments.

00:23:46.120 --> 00:23:47.990
So it's going to look very bad
when you see it because I

00:23:47.990 --> 00:23:52.350
don't actually use arguments,
but here we go.

00:23:52.350 --> 00:23:54.060
PETE LEPAGE: So, Paul,
one just quick--

00:23:54.060 --> 00:23:54.830
yup, you got it.

00:23:54.830 --> 00:23:56.080
Never mind.

00:23:57.660 --> 00:23:58.910
PAUL KINLAN: So xhr= new XML--

00:24:01.990 --> 00:24:04.008
I never get that, there we are,
that's the right one.

00:24:07.330 --> 00:24:12.110
And now all we're doing is,
and I'll show you why I'm

00:24:12.110 --> 00:24:13.840
doing this in a minute actually,
but we're just

00:24:13.840 --> 00:24:16.940
making it so that we can
make xhr requests.

00:24:16.940 --> 00:24:23.491
And we'll call the call back
with some xhr.response.

00:24:27.860 --> 00:24:30.105
There we are.

00:24:30.105 --> 00:24:30.850
Just like that.

00:24:30.850 --> 00:24:34.400
It's not doing too
much just yet.

00:24:34.400 --> 00:24:39.320
Xhr.open, it's a get request
at the moment.

00:24:39.320 --> 00:24:43.120
Obviously this API was to be
fleshed out a little bit more.

00:24:43.120 --> 00:24:45.062
You might want to do posts, when
you're posting data, but

00:24:45.062 --> 00:24:46.860
I'm not doing that just yet.

00:24:46.860 --> 00:24:53.010
Instagram.com/v1 if I am
remembering correctly.

00:24:53.010 --> 00:24:55.070
And then the way that they do
the methods is that they'll

00:24:55.070 --> 00:24:59.580
have a /user, /fetch, all
those type of things.

00:25:03.035 --> 00:25:06.750
I tell you now, this does not
look very sexy at the moment.

00:25:06.750 --> 00:25:09.050
PETE LEPAGE: Well, you know
what, it'll be sexy when you

00:25:09.050 --> 00:25:10.360
make it work.

00:25:10.360 --> 00:25:11.420
PAUL KINLAN: Yes, it's
going to be cool.

00:25:11.420 --> 00:25:13.005
So I'm just going to move it
up a little bit so just in

00:25:13.005 --> 00:25:14.255
case people can't see it.

00:25:19.180 --> 00:25:22.980
Access token, right, it's going
to be asynchronous so we

00:25:22.980 --> 00:25:24.445
don't need to put anything in.

00:25:24.445 --> 00:25:26.395
xhr.send.

00:25:26.395 --> 00:25:29.550
There we go.

00:25:29.550 --> 00:25:30.800
That's it, so cool.

00:25:34.800 --> 00:25:37.460
And I'm going to leave a bug
in, and see if anyone spots

00:25:37.460 --> 00:25:38.770
what is once we get to it.

00:25:38.770 --> 00:25:39.570
New Instagram.

00:25:39.570 --> 00:25:41.710
So we're going to call
Instagram now.

00:25:41.710 --> 00:25:46.540
Instagram, with the access
token in the constructor,

00:25:46.540 --> 00:25:49.890
because we're going to use
that for our method call.

00:25:49.890 --> 00:25:51.140
api.request("use
rs/self/fetch").

00:25:58.614 --> 00:26:04.300
Oh, no it's not, it's "feed",
undefined, So I can't design

00:26:04.300 --> 00:26:06.660
APIs to save my life, that
shouldn't even exist, but

00:26:06.660 --> 00:26:08.390
there we go.

00:26:08.390 --> 00:26:09.910
I thought it would be a good
idea that when I was designing

00:26:09.910 --> 00:26:14.020
this Instagram API to
put an undefined in.

00:26:14.020 --> 00:26:15.270
Console.log(data).

00:26:21.030 --> 00:26:22.390
What else can we do?

00:26:22.390 --> 00:26:23.380
Output.

00:26:23.380 --> 00:26:27.175
So output is the dump element,
which is the pre-- the thing

00:26:27.175 --> 00:26:29.520
we showed earlier on today.

00:26:29.520 --> 00:26:30.770
The JSON.stringify--

00:26:34.700 --> 00:26:36.380
PETE LEPAGE: I like the
"strongify", that would be

00:26:36.380 --> 00:26:37.040
kind of cool.

00:26:37.040 --> 00:26:38.005
I want to make it so strong.

00:26:38.005 --> 00:26:39.966
[ROARING]

00:26:39.966 --> 00:26:41.490
PAUL KINLAN: OK, so stringify.

00:26:41.490 --> 00:26:44.655
And then last week I learned
that this exists.

00:26:44.655 --> 00:26:47.775
You put "null, 4".

00:26:47.775 --> 00:26:51.800
It will use taps or I think,
four spaces and pretty print

00:26:51.800 --> 00:26:53.870
the JSON object.

00:26:53.870 --> 00:26:55.700
Did not know that
last week, and I

00:26:55.700 --> 00:26:58.360
learned it just for this.

00:26:58.360 --> 00:27:00.860
PETE LEPAGE: And this is
available in Chrome?

00:27:00.860 --> 00:27:02.210
PAUL KINLAN: I think it's just
generally available in the

00:27:02.210 --> 00:27:04.950
APIs, so Chrome, Firefox,
and other browsers.

00:27:08.310 --> 00:27:09.590
Should we see if this works?

00:27:09.590 --> 00:27:11.800
PETE LEPAGE: Let's reload our
app and see if it works.

00:27:11.800 --> 00:27:12.590
PAUL KINLAN: Reload it.

00:27:12.590 --> 00:27:14.970
Let's get some source
control--

00:27:14.970 --> 00:27:16.100
source control?

00:27:16.100 --> 00:27:17.350
Source view on.

00:27:19.340 --> 00:27:21.570
I've already spotted
the mistake.

00:27:21.570 --> 00:27:24.190
Did anyone pick it up?

00:27:24.190 --> 00:27:26.270
PETE LEPAGE: Nobody picked it up
in any of the comments that

00:27:26.270 --> 00:27:29.390
I'm seeing, and nobody's posted
it in the questions.

00:27:29.390 --> 00:27:32.140
So, I don't know.

00:27:32.140 --> 00:27:32.800
PAUL KINLAN: There we go.

00:27:32.800 --> 00:27:34.250
Reload.

00:27:34.250 --> 00:27:35.780
Inspect element.

00:27:35.780 --> 00:27:37.530
That's how live this is.

00:27:37.530 --> 00:27:40.870
PETE LEPAGE: Got to love
live broadcasts.

00:27:40.870 --> 00:27:43.590
PAUL KINLAN: Let's move
this up there.

00:27:43.590 --> 00:27:46.275
A little hint for everyone, if
you create a window, give it

00:27:46.275 --> 00:27:49.450
an ID, and then it will stick.

00:27:49.450 --> 00:27:51.970
It will stay stuck in the place
that you last left it,

00:27:51.970 --> 00:27:53.480
rather than what I have to
do, which is just reload

00:27:53.480 --> 00:27:55.080
this all the time.

00:27:55.080 --> 00:27:56.456
So let's put one in there so
we know that we're going to

00:27:56.456 --> 00:27:57.706
get the token back.

00:27:59.870 --> 00:28:01.860
method, access token,
access token.

00:28:01.860 --> 00:28:03.170
Spelling is all correct.

00:28:03.170 --> 00:28:03.880
Callback.

00:28:03.880 --> 00:28:05.110
We'll just put it in
there just so we

00:28:05.110 --> 00:28:07.270
can see what happens.

00:28:07.270 --> 00:28:08.620
Login.

00:28:08.620 --> 00:28:09.150
Hello.

00:28:09.150 --> 00:28:09.410
Right.

00:28:09.410 --> 00:28:12.750
So we know we've got the access
token, that works.

00:28:12.750 --> 00:28:16.390
Oo, oo, oo, oo, another bug.

00:28:16.390 --> 00:28:20.340
PETE LEPAGE: And somebody just
said, and I don't know if this

00:28:20.340 --> 00:28:24.730
is his suggestion on what your
bug is, but is it Instagram

00:28:24.730 --> 00:28:27.200
API as the--

00:28:27.200 --> 00:28:29.100
PAUL KINLAN: Yeah, he just saw
me type that out, man.

00:28:32.470 --> 00:28:32.990
There's another one.

00:28:32.990 --> 00:28:36.660
But we fixed it, we spotted
it, reload app.

00:28:36.660 --> 00:28:38.000
There we go.

00:28:38.000 --> 00:28:40.370
So the bug we just had then a
second ago was I was looking

00:28:40.370 --> 00:28:42.990
at the wrong part of the URL
string to actually parse out

00:28:42.990 --> 00:28:45.740
the access token.

00:28:45.740 --> 00:28:47.650
So here we go, boom, great.

00:28:47.650 --> 00:28:52.130
We have an access token,
looks nice.

00:28:52.130 --> 00:28:54.222
We're going to do the request.

00:28:54.222 --> 00:28:57.430
Yeah, that looks OK.

00:28:57.430 --> 00:28:59.530
Data, right, so--

00:28:59.530 --> 00:29:02.330
oh, there's an error.

00:29:02.330 --> 00:29:03.550
Oh man, what's that errors?

00:29:03.550 --> 00:29:04.860
Can you see that there?

00:29:04.860 --> 00:29:06.065
Is it visible on the screen?

00:29:06.065 --> 00:29:08.400
PETE LEPAGE: It's visible
on screen.

00:29:08.400 --> 00:29:12.296
PAUL KINLAN: So could not
load api.instagram.com.

00:29:12.296 --> 00:29:12.700
Damn.

00:29:12.700 --> 00:29:15.660
Well luckily, I know what that
is because that was the bug I

00:29:15.660 --> 00:29:17.150
purposefully left in.

00:29:17.150 --> 00:29:18.432
PETE LEPAGE: All right,
we like it when we

00:29:18.432 --> 00:29:19.120
have purpose bug.

00:29:19.120 --> 00:29:20.660
PAUL KINLAN: So obviously, the
thing that we're doing with

00:29:20.660 --> 00:29:24.660
all these APIs is that we need
to basically ask the

00:29:24.660 --> 00:29:28.280
permission to access
any arbitrary URL.

00:29:28.280 --> 00:29:31.440
So we're going to basically say,
let me do the install and

00:29:31.440 --> 00:29:33.210
reload, can I get access
to api.instagram.com?

00:29:36.870 --> 00:29:38.930
So let's go back, get
to our extensions.

00:29:38.930 --> 00:29:41.610
PETE LEPAGE: So now that's going
to say, this app can

00:29:41.610 --> 00:29:44.255
access that particular
set of URLs.

00:29:44.255 --> 00:29:47.570
PAUL KINLAN: Yeah, so when the
store integration all works

00:29:47.570 --> 00:29:51.060
and everything, the user will
be asked at install time

00:29:51.060 --> 00:29:55.430
whether they allow access to
that URL, essentially, which

00:29:55.430 --> 00:29:56.420
is pretty nice.

00:29:56.420 --> 00:29:58.140
It gives the user some
confidence about what the

00:29:58.140 --> 00:29:59.390
application is doing.

00:30:01.550 --> 00:30:03.530
Yeah, I was going to say you
can't normally access--

00:30:03.530 --> 00:30:05.500
for instance, I can't access
Twitter right now inside this

00:30:05.500 --> 00:30:05.960
application.

00:30:05.960 --> 00:30:07.550
I can only access Instagram
because the

00:30:07.550 --> 00:30:09.190
user's granted access.

00:30:09.190 --> 00:30:11.020
PETE LEPAGE: And as a user, you
know that you're not going

00:30:11.020 --> 00:30:14.040
to have some other app going
and sending your data to

00:30:14.040 --> 00:30:16.622
places where you don't
expect it to go.

00:30:16.622 --> 00:30:20.970
You know your data is being
handled responsibly.

00:30:20.970 --> 00:30:22.410
PAUL KINLAN: Here we
go, look at this.

00:30:22.410 --> 00:30:25.470
So the API request
has come back in.

00:30:25.470 --> 00:30:29.540
The JSON object, it's
just a string at the

00:30:29.540 --> 00:30:32.460
moment, has come back.

00:30:32.460 --> 00:30:33.980
We will press play and--

00:30:38.030 --> 00:30:40.260
it doesn't look as nice
as it did in my demo,

00:30:40.260 --> 00:30:41.510
but there we are.

00:30:44.930 --> 00:30:46.570
I think I generally know
what the problem is.

00:30:46.570 --> 00:30:49.240
The response type has
come back and it's

00:30:49.240 --> 00:30:51.050
not recognized its--

00:30:51.050 --> 00:30:52.300
it should though.

00:30:55.370 --> 00:30:57.180
Well anyway, it doesn't
really matter.

00:30:57.180 --> 00:30:59.060
You have to trust me that
this is a JSON object.

00:30:59.060 --> 00:30:59.420
It is.

00:30:59.420 --> 00:31:01.881
Looks well, nice, and sexy.

00:31:01.881 --> 00:31:03.520
And that's it.

00:31:03.520 --> 00:31:05.180
That was basically
authenticating against

00:31:05.180 --> 00:31:09.270
Instagram, and being able to
query it, with a get request

00:31:09.270 --> 00:31:10.160
admittedly.

00:31:10.160 --> 00:31:12.430
You could change it to a post
request and things should

00:31:12.430 --> 00:31:12.890
still work.

00:31:12.890 --> 00:31:15.580
As long as you've got access
to the access token, you

00:31:15.580 --> 00:31:18.030
should be able to do the things
that you need to do

00:31:18.030 --> 00:31:20.130
inside your APIs.

00:31:20.130 --> 00:31:22.220
This isn't just restricted to
Instagram, obviously things

00:31:22.220 --> 00:31:25.360
like Twitter, anything that
sports OAuth 2.0 generally

00:31:25.360 --> 00:31:26.680
should work.

00:31:26.680 --> 00:31:28.746
And the really nice thing about
this is the actual-- if

00:31:28.746 --> 00:31:32.640
we go back to the code for
just two seconds--

00:31:32.640 --> 00:31:35.580
the actual core, the core logic
is constructing the

00:31:35.580 --> 00:31:37.980
variables itself, the things
that you want to call and how

00:31:37.980 --> 00:31:40.880
you want to call it, and then
the final thing is the

00:31:40.880 --> 00:31:42.130
experimental.ide
ntity.launchWebAuthFlow.

00:31:44.990 --> 00:31:49.130
And that's the brunt of the API,
and we didn't have that

00:31:49.130 --> 00:31:51.590
many servers in place to do
anything, we just called it.

00:31:51.590 --> 00:31:54.650
PETE LEPAGE: We were able to go
in and grab somebody else's

00:31:54.650 --> 00:31:57.070
service, and start pulling
stuff down, and

00:31:57.070 --> 00:31:58.340
into our own app.

00:31:58.340 --> 00:32:00.400
PAUL KINLAN: Yes, exactly.

00:32:00.400 --> 00:32:02.810
It's pretty interesting,
it's pretty exciting.

00:32:02.810 --> 00:32:05.160
We've only just kind of, me in
particular, has only just

00:32:05.160 --> 00:32:06.360
really started playing
with this against

00:32:06.360 --> 00:32:08.630
other external services.

00:32:08.630 --> 00:32:11.620
But I've seen people in
hackathons update these, call

00:32:11.620 --> 00:32:15.660
these different services and
just start to use the identity

00:32:15.660 --> 00:32:18.650
API pretty quickly.

00:32:18.650 --> 00:32:20.810
Obviously, we'll have more
information about the Google

00:32:20.810 --> 00:32:22.070
authentication against
individual

00:32:22.070 --> 00:32:24.260
services at a later date.

00:32:24.260 --> 00:32:25.620
We'll do a Hangout around
that as well.

00:32:25.620 --> 00:32:27.730
That's actually pretty
interesting as well.

00:32:27.730 --> 00:32:28.720
PETE LEPAGE: That works today?

00:32:28.720 --> 00:32:30.680
Like if somebody wanted to play
with that, it's under the

00:32:30.680 --> 00:32:33.150
experimental API, does
it work today?

00:32:33.150 --> 00:32:34.040
PAUL KINLAN: The Google one?

00:32:34.040 --> 00:32:36.020
PETE LEPAGE: Yeah.

00:32:36.020 --> 00:32:37.950
PAUL KINLAN: It does, but you
need to request a key, and

00:32:37.950 --> 00:32:41.170
there's a whole lot of potential
changes that might

00:32:41.170 --> 00:32:43.340
happen in the near future around
the experimental API,

00:32:43.340 --> 00:32:46.070
around the Google
authentication.

00:32:46.070 --> 00:32:49.375
So hold on just a little
bit with this.

00:32:49.375 --> 00:32:52.000
The interesting thing is you
could probably implement and

00:32:52.000 --> 00:32:55.190
integrate with Google services
relatively easy with this

00:32:55.190 --> 00:32:58.080
third party OAuth flow, because
OAuth 2.0 has this

00:32:58.080 --> 00:33:00.540
concept of scopes, and we have
this concept of scopes as well

00:33:00.540 --> 00:33:02.400
in our authentication
protocol.

00:33:02.400 --> 00:33:04.160
So you can probably do
it with this as well.

00:33:04.160 --> 00:33:08.240
It's just not kind of a
seamless, if that make sense.

00:33:08.240 --> 00:33:10.530
PETE LEPAGE: Yeah, that
makes perfect sense.

00:33:10.530 --> 00:33:13.270
PAUL KINLAN: But it's a nice
seamless API for what it is.

00:33:13.270 --> 00:33:14.950
So that's it.

00:33:14.950 --> 00:33:18.680
I really want to know why it
didn't come out as nice as it

00:33:18.680 --> 00:33:22.380
did in my other tester.

00:33:22.380 --> 00:33:24.390
Doesn't matter, we'll
leave it, I'm happy.

00:33:24.390 --> 00:33:25.080
PETE LEPAGE: That's OK.

00:33:25.080 --> 00:33:29.510
So the link for those of you
who have questions is up on

00:33:29.510 --> 00:33:32.270
screen right now, so you could
ask your questions if you want

00:33:32.270 --> 00:33:35.910
to know a little bit more
about what's going on.

00:33:35.910 --> 00:33:39.280
As well, if you want to go have
a look, Paul's uploaded

00:33:39.280 --> 00:33:41.200
these samples already.

00:33:41.200 --> 00:33:43.360
So if you want to go and play
with this, I just popped the

00:33:43.360 --> 00:33:46.980
sample URL up on screen right
now so that if you want to go

00:33:46.980 --> 00:33:48.880
play with it-- did you get it?

00:33:48.880 --> 00:33:50.780
PAUL KINLAN: Yes.

00:33:50.780 --> 00:33:52.680
[INTERPOSING VOICES]

00:33:52.680 --> 00:33:55.210
PAUL KINLAN: I didn't turn
it into a JSON, a proper

00:33:55.210 --> 00:33:58.940
JavaScript object, the
left of the screen.

00:33:58.940 --> 00:34:01.010
And it turns out strings are
proper JavaScript object,

00:34:01.010 --> 00:34:04.685
which is why it double encoded
everything, so there we go.

00:34:04.685 --> 00:34:05.320
PETE LEPAGE: There you go.

00:34:05.320 --> 00:34:07.390
All right, can we
actually see it?

00:34:07.390 --> 00:34:08.840
Let's see it running.

00:34:08.840 --> 00:34:10.306
PAUL KINLAN: It's there.

00:34:10.306 --> 00:34:11.060
Do you not trust me?

00:34:11.060 --> 00:34:11.710
PETE LEPAGE:There we go.

00:34:11.710 --> 00:34:13.080
Now we can see it.

00:34:13.080 --> 00:34:14.290
That's pretty.

00:34:14.290 --> 00:34:15.060
PAUL KINLAN: Whee!

00:34:15.060 --> 00:34:16.699
PETE LEPAGE: Yay.

00:34:16.699 --> 00:34:17.179
PAUL KINLAN: Yeah, nice job.

00:34:17.179 --> 00:34:17.969
It's pretty cool.

00:34:17.969 --> 00:34:19.250
PETE LEPAGE: But could
you do it with two

00:34:19.250 --> 00:34:20.540
spaces instead of four.

00:34:20.540 --> 00:34:21.850
Four is a little too many.

00:34:21.850 --> 00:34:23.710
I'm kidding.

00:34:23.710 --> 00:34:25.300
PAUL KINLAN: Just for
you, anything.

00:34:25.300 --> 00:34:27.370
PETE LEPAGE: Aww,
you're so sweet.

00:34:27.370 --> 00:34:31.429
So why don't we grab one of the
first questions that we

00:34:31.429 --> 00:34:34.070
have, and I'll take the stab
at this first question,

00:34:34.070 --> 00:34:37.260
because it's, I think, a
really good question.

00:34:37.260 --> 00:34:39.530
Unfortunately I don't have a
really great answer for you

00:34:39.530 --> 00:34:42.650
today, I can give you an answer,
but I want to dive

00:34:42.650 --> 00:34:46.770
into it more in a coming Chrome
Apps Office Hours.

00:34:46.770 --> 00:34:50.179
This is from Tommy in Illinois,
and Tommy wants to

00:34:50.179 --> 00:34:52.820
know what the status of
Native Client SDK and

00:34:52.820 --> 00:34:54.060
packaged apps is.

00:34:54.060 --> 00:34:57.130
And, Tommy, as far as I know you
can actually start playing

00:34:57.130 --> 00:35:00.050
with them today, though
it's still somewhat

00:35:00.050 --> 00:35:02.120
experimental on that.

00:35:02.120 --> 00:35:08.660
Either next week or the week
after, we're going to do our

00:35:08.660 --> 00:35:12.280
Chrome Apps Office Hours
specifically on this topic.

00:35:12.280 --> 00:35:16.300
We've got one of the great guys
from they Native Client

00:35:16.300 --> 00:35:18.750
team who's going to be joining
us to talk about this.

00:35:18.750 --> 00:35:21.290
He's going to dive into this
in a lot more detail.

00:35:21.290 --> 00:35:25.190
So keep an eye out, it's either
next Tuesday or the

00:35:25.190 --> 00:35:27.300
following Tuesday, I don't
remember specifically

00:35:27.300 --> 00:35:27.990
which one it is.

00:35:27.990 --> 00:35:31.790
But Tommy, have a peek, we'd
love to have you join us for

00:35:31.790 --> 00:35:35.670
that, and we'll dive into a
lot more the good, nitty

00:35:35.670 --> 00:35:37.494
gritty details.

00:35:37.494 --> 00:35:38.590
PAUL KINLAN: Yeah, it's cool.

00:35:38.590 --> 00:35:40.460
What we've seen so
far is cool.

00:35:40.460 --> 00:35:41.180
It'll be an exciting one.

00:35:41.180 --> 00:35:44.050
It'll be good.

00:35:44.050 --> 00:35:46.490
PETE LEPAGE: So Paul, I'll pass
this next one on to you.

00:35:46.490 --> 00:35:51.110
From Swader in Croatia, is this
authentication mechanism

00:35:51.110 --> 00:35:53.220
limited to just packaged apps,
or does it work for

00:35:53.220 --> 00:35:55.180
extensions as well?

00:35:55.180 --> 00:35:58.090
PAUL KINLAN: So I've not tried
it in extensions, however it's

00:35:58.090 --> 00:36:01.470
not under the Chrome.app
namespace, so there's a good

00:36:01.470 --> 00:36:02.950
chance that it'll work.

00:36:02.950 --> 00:36:04.710
it just needs to be tested.

00:36:04.710 --> 00:36:07.250
It doesn't take that much to
actually go off and test it.

00:36:07.250 --> 00:36:09.815
I might go and test
it in a minute.

00:36:09.815 --> 00:36:10.820
Yeah, I've not tested it.

00:36:10.820 --> 00:36:13.246
It'd be nice if it does because
extensions needs this

00:36:13.246 --> 00:36:15.733
type of API too, and I wouldn't
be surprised if it

00:36:15.733 --> 00:36:19.190
did work, but I've
not tested it.

00:36:19.190 --> 00:36:20.920
PETE LEPAGE: So Swader, one of
the things I'd recommend you

00:36:20.920 --> 00:36:25.470
do is go post that question
to our email list which is

00:36:25.470 --> 00:36:29.980
chromium-apps, chromium hyphen
apps at chromium.org.

00:36:29.980 --> 00:36:32.460
You can go join there, you can
keep up to date with some of

00:36:32.460 --> 00:36:36.270
the latest stuff on what's going
on, you can see this all

00:36:36.270 --> 00:36:37.670
the great conversations.

00:36:37.670 --> 00:36:40.890
We've got announcements about
all of the new features that

00:36:40.890 --> 00:36:42.020
get released.

00:36:42.020 --> 00:36:44.820
Right now this is experimental
so certainly it'll move out of

00:36:44.820 --> 00:36:45.570
experimental.

00:36:45.570 --> 00:36:48.390
When that happens, we will be
sure to let everybody know

00:36:48.390 --> 00:36:52.010
through our mailing
list as well.

00:36:52.010 --> 00:36:54.050
So with that I think that's
sort of the end of our

00:36:54.050 --> 00:36:56.410
questions in great
demo today, Paul.

00:36:56.410 --> 00:36:58.670
Thank you very much
for joining again.

00:36:58.670 --> 00:36:59.952
PAUL KINLAN: I'll make it
a nice, proper looking

00:36:59.952 --> 00:37:01.278
app soon, as well.

00:37:01.278 --> 00:37:02.570
I just think it's a nice
little demo to

00:37:02.570 --> 00:37:03.850
show you what happens.

00:37:03.850 --> 00:37:05.060
PETE LEPAGE: Yeah, absolutely.

00:37:05.060 --> 00:37:08.220
Now, if people want to go and
download this, they want to

00:37:08.220 --> 00:37:12.060
try this on their own,
so the URL is there.

00:37:12.060 --> 00:37:14.810
They're going to have to change
the secret key, and

00:37:14.810 --> 00:37:17.950
they're going to have set
themselves up as a developer

00:37:17.950 --> 00:37:20.900
on Instagram.

00:37:20.900 --> 00:37:21.910
Isn't that correct?

00:37:21.910 --> 00:37:23.370
PAUL KINLAN: Yeah, it's
pretty simple process.

00:37:23.370 --> 00:37:26.110
They've got really nice
documentation as well.

00:37:26.110 --> 00:37:28.590
You basically just go to the
instagram.com/developer, click

00:37:28.590 --> 00:37:30.670
register your application.

00:37:30.670 --> 00:37:33.900
I've just actually deleted my
client key now, just in case.

00:37:33.900 --> 00:37:35.660
PETE LEPAGE: So for those of
you who wanted to have a

00:37:35.660 --> 00:37:36.870
little fun with it, sorry.

00:37:36.870 --> 00:37:38.770
PAUL KINLAN: Yeah,
I mean it's cool.

00:37:44.340 --> 00:37:47.770
You go to Instagram, any kind
of third party service site,

00:37:47.770 --> 00:37:49.190
you should be able to, so as
long as they support OAuth

00:37:49.190 --> 00:37:50.890
2.0, you will be able to pretty
much use the exact code

00:37:50.890 --> 00:37:53.856
that we've got today, and
just go from there.

00:37:53.856 --> 00:37:55.860
I'll tell you what though,
if you do have any other

00:37:55.860 --> 00:37:58.110
applications, any other
authentication methods that

00:37:58.110 --> 00:38:01.600
you do use inside your own
services, let us know because

00:38:01.600 --> 00:38:04.705
we would like to make sure that
this API works for you

00:38:04.705 --> 00:38:05.530
guys, right.

00:38:05.530 --> 00:38:08.210
So just catch us on
Google+, or email.

00:38:08.210 --> 00:38:09.960
I'm paulkinlan@google.com.

00:38:09.960 --> 00:38:13.050
PETE LEPAGE: I'm petele.

00:38:13.050 --> 00:38:14.030
PAUL KINLAN: We're our
names pretty much

00:38:14.030 --> 00:38:16.030
everywhere else on the web.

00:38:16.030 --> 00:38:20.170
Just get access to us, post on
the forum, let us know what

00:38:20.170 --> 00:38:21.900
you want to do with the
authentication API and the

00:38:21.900 --> 00:38:24.850
identity API because we think
it's going to be key, and it's

00:38:24.850 --> 00:38:26.610
going to be absolutely awesome,
but we need to make

00:38:26.610 --> 00:38:27.970
sure that it works
for you guys.

00:38:27.970 --> 00:38:29.010
PETE LEPAGE: Absolutely.

00:38:29.010 --> 00:38:31.040
All right well, Paul,
thank you for

00:38:31.040 --> 00:38:31.910
joining us from London.

00:38:31.910 --> 00:38:32.980
Have a wonderful evening.

00:38:32.980 --> 00:38:36.180
It's, what, almost 6 o'clock
there tonight.

00:38:36.180 --> 00:38:37.440
PAUL KINLAN: It's already 6:00
o'clock and I've got another--

00:38:37.440 --> 00:38:39.672
well, I'm not going tell you
how long I've got left, but

00:38:39.672 --> 00:38:41.170
yeah, it's a long time.

00:38:41.170 --> 00:38:43.360
PETE LEPAGE: Well, Paul, thanks
for joining us, and

00:38:43.360 --> 00:38:44.910
thanks to all of you guys
for joining us.

00:38:44.910 --> 00:38:48.520
We hope you have a wonderful
day, and we will see

00:38:48.520 --> 00:38:49.800
you guys next week.

00:38:49.800 --> 00:38:51.780
Same time, same place.

00:38:51.780 --> 00:38:53.030
Take care, everybody.

