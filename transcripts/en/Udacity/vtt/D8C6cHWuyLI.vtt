WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:01.990
Let's look at the solution to our unlock

00:00:01.990 --> 00:00:04.320
quiz where we were asked really what does unlock

00:00:04.320 --> 00:00:07.656
do. Does it just store zero to lockvar, does

00:00:07.656 --> 00:00:10.468
it, check whether the lockvar is one and then

00:00:10.468 --> 00:00:13.206
do a store conditional atomically to make it

00:00:13.206 --> 00:00:17.468
zero? Or do we need additional atomic instructions, that

00:00:17.468 --> 00:00:20.940
are going to somehow, unlock the lock? And the answer

00:00:20.940 --> 00:00:25.400
is that. Unlike the lock function, where we needed

00:00:25.400 --> 00:00:29.360
to both, check whether lock is available and, make

00:00:29.360 --> 00:00:33.140
it busy, in one go, the unlock function, is done

00:00:33.140 --> 00:00:37.470
only by the thread that actually has the lock.

00:00:37.470 --> 00:00:39.670
So when we get to unlock we know that the

00:00:39.670 --> 00:00:42.770
lock is busy, because we made it busy. All

00:00:42.770 --> 00:00:45.820
we have to do is just, make the lock free.

00:00:45.820 --> 00:00:47.930
We can do that by writing zero in any

00:00:47.930 --> 00:00:50.530
way we want. So we chose the simplest way of

00:00:50.530 --> 00:00:52.530
just doing a normal store to the lock

00:00:52.530 --> 00:00:55.580
variable. So we don't need to atomically test

00:00:55.580 --> 00:00:58.100
whether it's one and then, make it zero.

00:00:58.100 --> 00:01:00.750
And we definitely don't need additional atomic instructions.

