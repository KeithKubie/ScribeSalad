WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
A bug triage is the process by which the severity of different bugs is determined,

00:00:04.000 --> 00:00:06.000
and we start to disambiguate between different bugs

00:00:06.000 --> 00:00:09.000
in order to basically try to get a handle on which bugs we can report in parallel.

00:00:09.000 --> 00:00:13.000
The deal is that any inputs that trigger separate bugs can be reported in parallel,

00:00:13.000 --> 00:00:16.000
but if we report all of the bug-triggering inputs that we found,

00:00:16.000 --> 00:00:18.000
what we're going to do is be causing a lot of duplicate bug reports.

00:00:18.000 --> 00:00:23.000
One of the golden rules of reporting bugs--and I'll go over this a little bit later in more detail--

00:00:23.000 --> 00:00:25.000
is that you don't report duplicate bugs.

00:00:25.000 --> 00:00:27.000
This wears on developers incredibly much,

00:00:27.000 --> 00:00:29.000
and they'll soon get tired of you and start ignoring you.

00:00:29.000 --> 00:00:32.000
I say this from experience. I've reported quite a few duplicate bugs myself.

00:00:32.000 --> 00:00:34.000
It's not that fun. People don't like it.

00:00:34.000 --> 00:00:36.000
The question now is what does bug triage mean.

00:00:36.000 --> 00:00:38.000
How do we start getting a handle on which bug-triggering inputs

00:00:38.000 --> 00:00:41.000
map to different bugs and which ones map to the same bugs.

00:00:41.000 --> 00:00:43.000
Basically, there is no silver bullet here.

00:00:43.000 --> 00:00:46.000
What we have is we're going to see there is a number of different weapons

00:00:46.000 --> 00:00:48.000
we can use to disambiguate bugs.

00:00:48.000 --> 00:00:53.000
In an easy-as-possible case the bugs in the system are causing assertion violation messages.

00:00:53.000 --> 00:00:57.000
One thing we can do is disambiguate based on assertion violations.

00:00:57.000 --> 00:00:59.000
What I basically mean here is that you do what I gave a demonstration of doing

00:00:59.000 --> 00:01:03.000
a little bit earlier, which is you just look at the text of the assertion violation messages,

00:01:03.000 --> 00:01:06.000
and you go ahead and make the assumption that distinct assertion violation messages

00:01:06.000 --> 00:01:10.000
are caused by distinct bugs in the software under test, and that doesn't need to be true.

00:01:10.000 --> 00:01:13.000
Not too long ago I reported something like six bugs in the LLVM compiler

00:01:13.000 --> 00:01:15.000
that had completely distinct symptoms--

00:01:15.000 --> 00:01:18.000
that is to say, completely distinct assertion violation messages--

00:01:18.000 --> 00:01:20.000
but they were all traced back to a single error in the source code.

00:01:20.000 --> 00:01:22.000
Of course that kind of thing can happen,

00:01:22.000 --> 00:01:25.000
and that's especially common if the underlying bug in the software under test

00:01:25.000 --> 00:01:27.000
is some sort of a memory safety violation.

00:01:27.000 --> 00:01:29.000
That is to say, we have a C or C++ program

00:01:29.000 --> 00:01:31.000
that starts corrupting it's own internal memory.

00:01:31.000 --> 00:01:34.000
In that case, a single bug can map to any number of symptoms.

00:01:34.000 --> 00:01:36.000
One possibility is that we have a single root cause

00:01:36.000 --> 00:01:38.000
that is a defect in the software under test.

00:01:38.000 --> 00:01:41.000
That can map multiple outputs that looks different.

00:01:41.000 --> 00:01:45.000
This is one possibility, and this happens, although maybe not that often.

00:01:45.000 --> 00:01:49.000
Another possibility is that we could have multiple defects that all cause the same symptom.

00:01:49.000 --> 00:01:51.000
This is actually really common.

00:01:51.000 --> 00:01:54.000
For example, in a big C or C++ program like a web browser

00:01:54.000 --> 00:01:56.000
it's very common for multiple memory safety defects--

00:01:56.000 --> 00:01:59.000
that is to say, multiple bugs that include things like buffer overruns

00:01:59.000 --> 00:02:01.000
and null pointer references--

00:02:01.000 --> 00:02:03.000
to all have the same symptom, which is segmentation fault.

00:02:03.000 --> 00:02:05.000
That happens really commonly.

00:02:05.000 --> 00:02:08.000
In contrast with these slightly pathological cases,

00:02:08.000 --> 00:02:11.000
what we hope happens--and this is also relatively common--

00:02:11.000 --> 00:02:13.000
is that a single defect maps to a single symptom.

00:02:13.000 --> 00:02:16.000
By reporting a test case leading to that symptom, we can get that defect fixed.

00:02:16.000 --> 00:02:19.000
So, in this case we have many defects,

00:02:19.000 --> 00:02:23.000
all mapping to their own symptoms in the output space,

00:02:23.000 --> 00:02:25.000
we can report these in parallel, and that's really nice.

00:02:25.000 --> 00:02:29.000
Like I was saying, with large, complicated software that's evolving rapidly,

00:02:29.000 --> 00:02:31.000
reporting bugs in parallel may be our only option,

00:02:31.000 --> 00:02:34.000
if we want to actually get the number of defects in the software under control.

