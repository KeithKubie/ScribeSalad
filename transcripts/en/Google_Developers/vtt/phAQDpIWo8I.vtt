WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:17.270
[MUSIC PLAYING]

00:00:17.270 --> 00:00:18.620
ALI AFSHAR: Hi everyone.

00:00:18.620 --> 00:00:20.660
Welcome to Google
Developers Live.

00:00:20.660 --> 00:00:23.100
My name's Ali, and today I'm
going to be taking some

00:00:23.100 --> 00:00:25.940
questions about the
Google Drive SDK.

00:00:25.940 --> 00:00:27.690
I'm going to be talking a
bit about the answers.

00:00:27.690 --> 00:00:30.880
And during this process,
if you have any burning

00:00:30.880 --> 00:00:35.390
questions, please feel free to
ask it on the YouTube comments

00:00:35.390 --> 00:00:39.280
or on the Google+ Event and
someone will tell me, and

00:00:39.280 --> 00:00:43.490
we'll try to get that answered
live on air for you.

00:00:43.490 --> 00:00:46.630
So for those of you don't know,
we use Stack Overflow

00:00:46.630 --> 00:00:50.260
for question and
answer support.

00:00:50.260 --> 00:00:51.460
We'll really happy with that.

00:00:51.460 --> 00:00:55.210
At the moment it seems the
community is growing and there

00:00:55.210 --> 00:00:57.900
are a number of contributors who
don't work at Google who

00:00:57.900 --> 00:01:01.620
are actually helping other
newer users on how to

00:01:01.620 --> 00:01:02.770
use the Drive SDK.

00:01:02.770 --> 00:01:05.670
So we're very happy about
that, and thank you to

00:01:05.670 --> 00:01:06.570
everyone who is answering.

00:01:06.570 --> 00:01:08.260
That's great that you are
part of the community.

00:01:08.260 --> 00:01:10.510
And that's really our intention
with using Stack

00:01:10.510 --> 00:01:13.340
Overflow is to be part of the
broader programming community.

00:01:13.340 --> 00:01:15.690
So that's absolutely great.

00:01:15.690 --> 00:01:18.190
So let's get started.

00:01:18.190 --> 00:01:23.410
First question, is the only way
to download a file through

00:01:23.410 --> 00:01:26.770
Google drive through the
download URL that is provided?

00:01:26.770 --> 00:01:30.690
I have the file ID and would
like to make one simple call

00:01:30.690 --> 00:01:32.570
to download the file.

00:01:32.570 --> 00:01:35.110
Right now it looks like you have
to make one call to fetch

00:01:35.110 --> 00:01:39.790
the file's metadata and one to
actually download the file.

00:01:39.790 --> 00:01:40.900
Is there any other way?

00:01:40.900 --> 00:01:42.890
Well this is absolutely right.

00:01:42.890 --> 00:01:46.550
The correct way of doing it is
to fetch the metadata, to get

00:01:46.550 --> 00:01:48.670
the download URL, and
then download it.

00:01:48.670 --> 00:01:50.890
That's always going to
be two requests.

00:01:50.890 --> 00:01:53.130
Now this is for a couple
of reasons.

00:01:53.130 --> 00:01:55.540
The first one is the download
URL doesn't

00:01:55.540 --> 00:01:57.510
last for very long.

00:01:57.510 --> 00:02:01.150
This is a measure to make sure
that people just can't keep

00:02:01.150 --> 00:02:05.060
these immortal download URIs
around for a long time because

00:02:05.060 --> 00:02:06.440
that's not exactly great.

00:02:06.440 --> 00:02:09.070
So we generate them, we give
it to you, and then you can

00:02:09.070 --> 00:02:10.590
use over a short
space of time.

00:02:10.590 --> 00:02:12.210
That's the first part.

00:02:12.210 --> 00:02:16.210
The second part is although
the scheme for these URLs

00:02:16.210 --> 00:02:18.470
seems predictable and you
could probably go about

00:02:18.470 --> 00:02:20.560
generating it yourself,
we strongly recommend

00:02:20.560 --> 00:02:22.460
you don't do that.

00:02:22.460 --> 00:02:24.230
So for these two things,
we really

00:02:24.230 --> 00:02:27.810
recommend making two requests.

00:02:27.810 --> 00:02:30.520
If you're downloading that many
files that it makes a

00:02:30.520 --> 00:02:34.840
huge difference to make a small
GET request beforehand,

00:02:34.840 --> 00:02:36.640
I'd be really interested
to know your use case.

00:02:36.640 --> 00:02:41.400
So get in touch with us if
that really is doing huge

00:02:41.400 --> 00:02:45.170
network bandwidth that you
just don't want to do.

00:02:45.170 --> 00:02:47.230
Let us know and we'll have
a look at that use case.

00:02:47.230 --> 00:02:49.540
But for now, this is
the way to do it.

00:02:49.540 --> 00:02:51.080
There are other ways
of downloading

00:02:51.080 --> 00:02:52.830
files from Google Drive.

00:02:52.830 --> 00:02:55.460
If you want to let the user
download it in their browser,

00:02:55.460 --> 00:02:58.270
we have this web content link.

00:02:58.270 --> 00:03:00.090
That uses a different
off mechanism and

00:03:00.090 --> 00:03:01.540
that may be more suitable.

00:03:01.540 --> 00:03:04.240
If you don't want to download a
file and then give it to the

00:03:04.240 --> 00:03:06.920
user to download, they can
download it directly and you

00:03:06.920 --> 00:03:08.630
will never have to get
involved with that.

00:03:08.630 --> 00:03:09.250
So that's great.

00:03:09.250 --> 00:03:12.890
You'll only find the URL with
the GET request and then the

00:03:12.890 --> 00:03:14.160
user can download the file.

00:03:14.160 --> 00:03:17.090
That's another option for you.

00:03:17.090 --> 00:03:19.510
So that's that question answered
by [? CloudEar, ?]

00:03:19.510 --> 00:03:22.846
says pretty much
the same thing.

00:03:22.846 --> 00:03:27.310
All right, next question is
about our date and time format

00:03:27.310 --> 00:03:29.190
in the Google Drive API.

00:03:29.190 --> 00:03:33.080
I'm having an issue with the
create date, modify date for

00:03:33.080 --> 00:03:34.330
the Google Drive API.

00:03:34.330 --> 00:03:38.980
When I get the data, the time is
displayed as, and there's a

00:03:38.980 --> 00:03:43.190
time stamp there, and they want
to know how to convert it

00:03:43.190 --> 00:03:46.530
to and from this format.

00:03:46.530 --> 00:03:55.100
That time format we use is RFC
3339, which is not that well

00:03:55.100 --> 00:03:57.200
supported by some programming
languages.

00:03:57.200 --> 00:03:59.970
PHP doesn't have a good built-in
standard library

00:03:59.970 --> 00:04:00.930
thing to do it.

00:04:00.930 --> 00:04:04.360
The Python standard library also
doesn't do this without a

00:04:04.360 --> 00:04:06.290
tiny bit of tweaking.

00:04:06.290 --> 00:04:10.030
And it's mostly because, well,
I'll use Python as an example.

00:04:10.030 --> 00:04:16.180
Python's time zone segment on
the end of the time stamp is

00:04:16.180 --> 00:04:18.769
actually comes with
a complete part.

00:04:18.769 --> 00:04:22.850
So if it's seven hours before
Greenwich mean time before

00:04:22.850 --> 00:04:26.450
UTC, it will say minus
seven zero zero.

00:04:26.450 --> 00:04:31.870
And the format this expects is
minus seven colon zero zero.

00:04:31.870 --> 00:04:36.270
So although this is a RFC time
stamp, and it is a good one,

00:04:36.270 --> 00:04:37.370
and it's a consistent one.

00:04:37.370 --> 00:04:39.070
And it is what we've been using
for a long time and

00:04:39.070 --> 00:04:40.570
[INAUDIBLE] and everything.

00:04:40.570 --> 00:04:42.750
So you might have to write
yourself a little function to

00:04:42.750 --> 00:04:43.690
convert that.

00:04:43.690 --> 00:04:46.116
I put an example on there in
Python and someone else has

00:04:46.116 --> 00:04:47.720
put an example in PHP.

00:04:47.720 --> 00:04:53.630
And if you look up RFC 3339, you
will find a sample in your

00:04:53.630 --> 00:04:54.670
programming language.

00:04:54.670 --> 00:04:58.030
So it's annoying to have to
work around, but I'm sure

00:04:58.030 --> 00:05:00.930
someone's already done
that for you.

00:05:00.930 --> 00:05:03.010
So that's times and dates.

00:05:03.010 --> 00:05:07.260
And we use the same format for
all our fields that have a

00:05:07.260 --> 00:05:10.440
time or date in them.

00:05:10.440 --> 00:05:11.920
Great, service account.

00:05:11.920 --> 00:05:14.800
So the question is, Google Drive
changing permissions by

00:05:14.800 --> 00:05:16.920
service account.

00:05:16.920 --> 00:05:19.950
They're looking for the best
approach for administrators of

00:05:19.950 --> 00:05:22.650
Google Apps domains to modify
the permissions of a Google

00:05:22.650 --> 00:05:25.310
Drive object owned
by other users.

00:05:25.310 --> 00:05:28.780
OK, this used to be done by
2-legged OAuth, if anyone has

00:05:28.780 --> 00:05:30.430
used 2-legged OAuth.

00:05:30.430 --> 00:05:33.220
We're now moving away from
that and we've moved to a

00:05:33.220 --> 00:05:35.640
model that is based on
service accounts.

00:05:35.640 --> 00:05:39.450
Now we have two different types
of service accounts.

00:05:39.450 --> 00:05:43.700
One of them is owned by a
developer console project and

00:05:43.700 --> 00:05:46.930
the other one is owned by
a Google Apps domain.

00:05:46.930 --> 00:05:48.960
Now this question is
specifically asking about a

00:05:48.960 --> 00:05:50.150
Google Apps domain.

00:05:50.150 --> 00:05:54.150
So if you go to your C panel
and you enable the Drive

00:05:54.150 --> 00:05:57.040
scope, you can get your service
account certificate

00:05:57.040 --> 00:05:59.960
and you can actually use that to
log in for any of the users

00:05:59.960 --> 00:06:01.900
on your domain, to authorize
for any of the

00:06:01.900 --> 00:06:03.540
users on your domain.

00:06:03.540 --> 00:06:07.470
And then really you can perform
actions for that user

00:06:07.470 --> 00:06:09.680
as if you were authorized
as them.

00:06:09.680 --> 00:06:12.490
This is pretty useful, and it
pretty much covers the use

00:06:12.490 --> 00:06:15.480
case in this question.

00:06:15.480 --> 00:06:19.150
So you would authorize the user
who wants to be able to

00:06:19.150 --> 00:06:22.140
share the files with
other people, OK?

00:06:22.140 --> 00:06:24.060
And then you just add the
permissions using the

00:06:24.060 --> 00:06:28.330
permissions.insert method to add
the permission for whoever

00:06:28.330 --> 00:06:32.390
else to read or write or
comment, or even you can use

00:06:32.390 --> 00:06:35.730
this to change the
owner of a file.

00:06:35.730 --> 00:06:37.620
So that's that part.

00:06:37.620 --> 00:06:39.840
There's a slight mention
of Google App

00:06:39.840 --> 00:06:41.390
Engine Service Accounts.

00:06:41.390 --> 00:06:45.090
So Google App Engine Service
Accounts is unfortunately yet

00:06:45.090 --> 00:06:47.270
another way of doing
service accounts.

00:06:47.270 --> 00:06:51.470
Now how the application proves
that it is who it is is App

00:06:51.470 --> 00:06:56.000
Engine has its own specific
service called App Identity.

00:06:56.000 --> 00:06:59.680
So App Identity says hi, I am
this application, so please

00:06:59.680 --> 00:07:03.300
authorize me as a service
account for this application.

00:07:03.300 --> 00:07:05.740
Unfortunately, that's currently
not supported

00:07:05.740 --> 00:07:07.180
in the drive API.

00:07:07.180 --> 00:07:10.090
We're really working hard to
support this and if I had to

00:07:10.090 --> 00:07:13.340
guess I'd say days or weeks
this will be working.

00:07:13.340 --> 00:07:14.590
So that's absolutely
brilliant.

00:07:17.080 --> 00:07:22.280
It's really useful in Python
because the Python App Engine

00:07:22.280 --> 00:07:25.180
SDK doesn't actually have enough
cryptography to do

00:07:25.180 --> 00:07:26.640
regular service accounts yet.

00:07:26.640 --> 00:07:28.490
Again, that's something
that's coming.

00:07:28.490 --> 00:07:31.910
So for now, you can use these
App Engine App Identity.

00:07:31.910 --> 00:07:37.330
One proviso is that with App
Identity, you will not be able

00:07:37.330 --> 00:07:39.090
to use the drive.file scope.

00:07:39.090 --> 00:07:43.570
Now the drive.file scope does
depend very much on who the

00:07:43.570 --> 00:07:46.440
app is so that users can
authorize files for certain

00:07:46.440 --> 00:07:47.270
applications.

00:07:47.270 --> 00:07:52.350
And applications can't read all
the files in your drive,

00:07:52.350 --> 00:07:53.370
just the specific ones.

00:07:53.370 --> 00:07:56.280
So those features get
turned off for App

00:07:56.280 --> 00:07:57.400
Identity Service Accounts.

00:07:57.400 --> 00:08:01.030
But again, that's not exactly
a problem because with App

00:08:01.030 --> 00:08:04.700
Identity Service Accounts, the
files are owned by the

00:08:04.700 --> 00:08:07.090
application itself, so the
file scope is reasonable

00:08:07.090 --> 00:08:08.680
depending on your use case.

00:08:08.680 --> 00:08:10.490
So that's enough about
service accounts.

00:08:10.490 --> 00:08:13.450
Just to let you know, we've
covered these two cases, Def

00:08:13.450 --> 00:08:15.650
Console Service Accounts and
Domain Service Accounts.

00:08:15.650 --> 00:08:18.810
And we've created two new
tutorials on using them, so

00:08:18.810 --> 00:08:20.130
please check them out.

00:08:20.130 --> 00:08:24.040
They're at
developers.google.com/drive.

00:08:24.040 --> 00:08:25.740
They'll called Service
Accounts and User

00:08:25.740 --> 00:08:26.990
Impersonation.

00:08:29.390 --> 00:08:31.060
This is one of the things
we really want to

00:08:31.060 --> 00:08:31.920
get absolutely right.

00:08:31.920 --> 00:08:34.500
We do appreciate this use case
that used to be covered well

00:08:34.500 --> 00:08:35.840
by 2-legged OAuth.

00:08:35.840 --> 00:08:38.400
So if you have any problems,
let us know.

00:08:38.400 --> 00:08:41.650
We want this to be
absolutely right.

00:08:41.650 --> 00:08:42.900
OK, next question.

00:08:48.530 --> 00:08:51.240
Google Drive changes
list API, detecting

00:08:51.240 --> 00:08:52.760
changes at a folder level.

00:08:52.760 --> 00:08:55.520
OK, this is a question we
get asked quite a lot.

00:08:55.520 --> 00:08:58.830
The changes feed, to give you a
little summary, is if you're

00:08:58.830 --> 00:09:03.030
authorized as a user you can
get a list of, more like a

00:09:03.030 --> 00:09:05.660
timeline, really, of all the
changes that have happened to

00:09:05.660 --> 00:09:06.790
files in their Google Drive.

00:09:06.790 --> 00:09:09.080
So it will show this file is
modified, this file is

00:09:09.080 --> 00:09:11.520
created, a certain
file was deleted.

00:09:11.520 --> 00:09:14.000
And it goes in reverse
chronological order.

00:09:14.000 --> 00:09:17.800
Each one of these changes has
a unique ID that you can

00:09:17.800 --> 00:09:20.220
remember so you can say
I only want changes

00:09:20.220 --> 00:09:22.520
since that unique ID.

00:09:22.520 --> 00:09:23.960
This is the changes feed.

00:09:23.960 --> 00:09:26.710
Really, really useful to prevent
having to download a

00:09:26.710 --> 00:09:29.760
whole user's Google Drive, find
out what's changed, and

00:09:29.760 --> 00:09:31.300
then modify it locally.

00:09:31.300 --> 00:09:33.950
I'm thinking of use cases like
synchronizing applications

00:09:33.950 --> 00:09:35.070
that you write.

00:09:35.070 --> 00:09:37.600
So the question here
is can we detect

00:09:37.600 --> 00:09:38.950
changes at a folder level?

00:09:38.950 --> 00:09:40.850
Brilliant use case and
I can see why.

00:09:40.850 --> 00:09:42.800
Unfortunately, we don't
support that.

00:09:42.800 --> 00:09:48.240
We believe that currently the
changes feed is small enough,

00:09:48.240 --> 00:09:50.420
there are only going to be a
few hundred maybe at most

00:09:50.420 --> 00:09:54.080
changes, is small enough that
you can get the whole feed and

00:09:54.080 --> 00:09:57.450
filter it for the ones that you
want in the right folder.

00:09:57.450 --> 00:10:00.660
So each of the entries in the
changes feed will have--

00:10:00.660 --> 00:10:02.200
as long as it's not a delete--

00:10:02.200 --> 00:10:04.670
will have a parent
ID, for example.

00:10:04.670 --> 00:10:07.370
And if you look at the parent
ID, you can find out which

00:10:07.370 --> 00:10:08.490
folder it lives in.

00:10:08.490 --> 00:10:11.240
Now I appreciate that the delete
case doesn't actually

00:10:11.240 --> 00:10:14.370
work because we believe
very strongly that

00:10:14.370 --> 00:10:15.530
users own the data.

00:10:15.530 --> 00:10:17.455
So if they've deleted a file,
you shouldn't really be able

00:10:17.455 --> 00:10:20.560
to find out what the parents
for that file were.

00:10:20.560 --> 00:10:22.330
You shouldn't be able to
know what the title

00:10:22.330 --> 00:10:23.920
for that file was.

00:10:23.920 --> 00:10:25.980
The user has deleted
it and that's gone.

00:10:25.980 --> 00:10:29.810
We do give you the file ID, but
of course if you haven't

00:10:29.810 --> 00:10:32.710
got a mapping of file IDs to
parents, you don't know where

00:10:32.710 --> 00:10:33.220
that exists.

00:10:33.220 --> 00:10:37.640
So I appreciate this use case is
not completely covered, but

00:10:37.640 --> 00:10:39.100
there's not really
much we can do.

00:10:39.100 --> 00:10:42.580
We have to respect the user's
privacy and the fact that the

00:10:42.580 --> 00:10:44.670
user owns the data here.

00:10:44.670 --> 00:10:46.000
I think that's a reasonable
choice.

00:10:46.000 --> 00:10:48.830
I'm a developer myself, so I
would like it the other way,

00:10:48.830 --> 00:10:51.779
but I do respect the
user's choice here.

00:10:57.770 --> 00:11:00.450
So another question asking
about 2-legged OAuth for

00:11:00.450 --> 00:11:02.523
Google Drive from Android.

00:11:05.150 --> 00:11:07.350
So that's a really interesting
question.

00:11:07.350 --> 00:11:09.230
It doesn't actually work for
a number of reasons.

00:11:09.230 --> 00:11:11.900
One, we don't officially support
2-legged OAuth on

00:11:11.900 --> 00:11:13.810
Google Drive.

00:11:13.810 --> 00:11:16.210
And two, I'm not sure how
you could use that

00:11:16.210 --> 00:11:17.920
exactly from Android.

00:11:17.920 --> 00:11:21.260
I guess you could use
it as an installed

00:11:21.260 --> 00:11:22.125
application on Android.

00:11:22.125 --> 00:11:24.370
So I'm not sure what the
use case is here.

00:11:24.370 --> 00:11:28.040
Again, Mr. or Mrs.
[? Gautome, ?]

00:11:28.040 --> 00:11:29.910
I would be really pleased to
hear your use case because

00:11:29.910 --> 00:11:31.600
that sounds kind
of interesting.

00:11:31.600 --> 00:11:34.190
You can use a service account
from Android.

00:11:34.190 --> 00:11:36.920
The other thing you can actually
do which, may or may

00:11:36.920 --> 00:11:40.040
not be suitable for you but it
would cover the use case, is

00:11:40.040 --> 00:11:42.640
that if you have offline access,
if you have an access

00:11:42.640 --> 00:11:46.350
token and a refresh token, you
can essentially keep them

00:11:46.350 --> 00:11:48.000
forever and use them.

00:11:48.000 --> 00:11:51.010
Now I'm assuming this app is
not something you want to

00:11:51.010 --> 00:11:54.920
publish widely because if you
publish a 2-legged OAuth token

00:11:54.920 --> 00:11:58.450
widely, and that's a permanent
token, anyone can use that.

00:11:58.450 --> 00:11:59.950
So really you've given away
your whole credentials.

00:11:59.950 --> 00:12:02.365
So I'm guessing this
is an internal app.

00:12:02.365 --> 00:12:05.740
And if it is an internal app,
you can use a saved standard

00:12:05.740 --> 00:12:10.860
OAuth2 token, or a saved service
account OAuth2 token

00:12:10.860 --> 00:12:12.200
that has offline access.

00:12:12.200 --> 00:12:13.770
And that can be refreshed
forever.

00:12:13.770 --> 00:12:16.450
So I'm guessing this is for
internal use case for someone

00:12:16.450 --> 00:12:18.130
rather than the external app.

00:12:18.130 --> 00:12:23.350
If it is an external app, please
do not put raw tokens

00:12:23.350 --> 00:12:26.830
in your APK, or in fact in
anything, even if it's

00:12:26.830 --> 00:12:28.370
compiled or fiscated.

00:12:28.370 --> 00:12:29.670
The stuff is reasonably

00:12:29.670 --> 00:12:31.300
straightforward to reverse engineer.

00:12:31.300 --> 00:12:36.280
So yeah, please don't do that.

00:12:36.280 --> 00:12:39.650
Fingers crossed that is an
internal use case here.

00:12:39.650 --> 00:12:41.580
So, done a few there.

00:12:41.580 --> 00:12:43.340
Should we check if there
any other questions?

00:12:43.340 --> 00:12:45.550
I'm going to check quickly if
there are any other questions

00:12:45.550 --> 00:12:46.800
from people.

00:12:49.630 --> 00:12:51.170
Nope, not there.

00:12:51.170 --> 00:12:53.750
OK, so they'll let us
know if there is.

00:12:53.750 --> 00:12:55.580
Great, so next question.

00:12:55.580 --> 00:13:01.160
Google Drive SDK
image metadata.

00:13:01.160 --> 00:13:03.940
Recently we launched the feature
to add EXIF data.

00:13:03.940 --> 00:13:06.940
If you don't know what EXIF data
is for images, when your

00:13:06.940 --> 00:13:09.730
camera, your flashy camera takes
a photograph, it stores

00:13:09.730 --> 00:13:11.340
some information in there.

00:13:11.340 --> 00:13:14.440
Even the cameras on
phones do this.

00:13:14.440 --> 00:13:17.100
So the camera make, the camera
model, the aperture, the

00:13:17.100 --> 00:13:19.580
exposure, the focal length.

00:13:19.580 --> 00:13:22.290
These kind of things are all
stored in the image as some

00:13:22.290 --> 00:13:26.270
extra metadata so the other
applications can look at them.

00:13:26.270 --> 00:13:30.110
Photo applications, photo
organizing, photo editing.

00:13:30.110 --> 00:13:34.540
We recently, last week, exposed
this data because we

00:13:34.540 --> 00:13:35.910
index it for Google Drive.

00:13:35.910 --> 00:13:37.990
It's very useful, lots of
photos in Google Drive.

00:13:37.990 --> 00:13:40.460
Perfect use case if you're a
photographer, store your

00:13:40.460 --> 00:13:41.110
photos there.

00:13:41.110 --> 00:13:44.340
And they never will be lost.

00:13:44.340 --> 00:13:47.060
This question is asking
for some missing

00:13:47.060 --> 00:13:48.570
features, missing fields.

00:13:48.570 --> 00:13:50.940
So actually, focal distance
is one that we're missing.

00:13:50.940 --> 00:13:53.740
Focal distance, metering
mode, sensor type.

00:13:53.740 --> 00:13:55.600
And there are some
IPTC metadata

00:13:55.600 --> 00:13:57.320
keywords that are missing.

00:13:57.320 --> 00:14:00.200
A perfect example, thank you
for bringing this up.

00:14:00.200 --> 00:14:05.270
I hope this person's writing an
awesome file image gallery

00:14:05.270 --> 00:14:08.010
application for Drive because if
they are, I really want to

00:14:08.010 --> 00:14:10.570
use it myself because I've
got lots of photos there.

00:14:10.570 --> 00:14:13.020
So they're just asking
for this extra data.

00:14:13.020 --> 00:14:15.190
And there's a perfect use
of Stack Overflow.

00:14:15.190 --> 00:14:16.920
Thank you for telling us this.

00:14:16.920 --> 00:14:19.010
We're looking to get these
features added as soon as

00:14:19.010 --> 00:14:21.660
possible so your
apps can work.

00:14:21.660 --> 00:14:26.030
OK, yes, please, someone write
a photo editing app.

00:14:26.030 --> 00:14:30.569
A photo management gallery app,
I'm desperate to use it.

00:14:34.970 --> 00:14:37.364
OK, let's do one
more, shall we?

00:14:41.720 --> 00:14:43.190
MALE SPEAKER: We do have
a question on YouTube.

00:14:43.190 --> 00:14:43.980
ALI AFSHAR: Oh, do we?

00:14:43.980 --> 00:14:46.360
MALE SPEAKER: One of them says
is there way to get files from

00:14:46.360 --> 00:14:50.030
the Google Drive and read
it in using Java?

00:14:50.030 --> 00:14:51.060
ALI AFSHAR: Yes.

00:14:51.060 --> 00:14:54.420
The answer is absolutely yes.

00:14:54.420 --> 00:14:56.930
When you say get files, I guess
you mean download files

00:14:56.930 --> 00:14:58.510
or upload files?

00:14:58.510 --> 00:14:59.560
Downloading files.

00:14:59.560 --> 00:15:00.090
OK, great.

00:15:00.090 --> 00:15:01.870
So yes, absolutely.

00:15:01.870 --> 00:15:07.360
If you go to a URL that I will
put in the YouTube comment,

00:15:07.360 --> 00:15:09.590
I'll tell you what it is
in the YouTube comment.

00:15:09.590 --> 00:15:12.670
But we have a Java snippet
for doing exactly that.

00:15:12.670 --> 00:15:15.430
You should be able to take the
snippet, copy it, paste it

00:15:15.430 --> 00:15:18.120
into your application, and
everything should work.

00:15:18.120 --> 00:15:19.760
OK, it's two steps.

00:15:19.760 --> 00:15:23.140
One, you get the download URL,
and then you perform a

00:15:23.140 --> 00:15:26.770
download using the raw
underlying HTTP library with

00:15:26.770 --> 00:15:28.500
the added authorization
header.

00:15:28.500 --> 00:15:31.280
But we show you how to do
that, copy and paste it.

00:15:31.280 --> 00:15:32.290
Java is not special.

00:15:32.290 --> 00:15:35.490
We also have identical sample
for Python, Go, PHP,

00:15:35.490 --> 00:15:39.670
JavaScript, Ruby, .net.

00:15:39.670 --> 00:15:41.500
And any language you want there,
please let us know.

00:15:41.500 --> 00:15:43.920
We'll look to see they add it.

00:15:43.920 --> 00:15:45.080
So yes, absolutely.

00:15:45.080 --> 00:15:47.970
We love Java developers, you're
very important to us.

00:15:47.970 --> 00:15:49.685
MALE SPEAKER: So there is
another question via Google+

00:15:49.685 --> 00:15:53.590
Events asking about 2LOA scope
for the Drive API.

00:15:53.590 --> 00:15:56.730
They are wondering if we can
expect a 2LOA scope for the

00:15:56.730 --> 00:15:59.180
Drive API so they can write
apps, Marketplace apps that

00:15:59.180 --> 00:16:01.570
take advantage of it.

00:16:01.570 --> 00:16:03.150
ALI AFSHAR: So this
is an unsupported

00:16:03.150 --> 00:16:04.280
feature at the moment.

00:16:04.280 --> 00:16:11.360
But actually 2LO scoped tokens
for Google Documents List API

00:16:11.360 --> 00:16:15.020
do currently work against
the Drive API.

00:16:15.020 --> 00:16:18.770
So I'm not exactly overly
enamored with that because

00:16:18.770 --> 00:16:21.420
we're trying to deprecate
OAuth1.

00:16:21.420 --> 00:16:23.480
Well, we have deprecated it, but
we're trying to get rid of

00:16:23.480 --> 00:16:24.690
all the use cases.

00:16:24.690 --> 00:16:27.920
Now we specifically allowed
this for the case where

00:16:27.920 --> 00:16:31.270
someone already has a token for
the Documents List API,

00:16:31.270 --> 00:16:34.150
they want to start using the
Drive API, and they don't want

00:16:34.150 --> 00:16:35.370
users to reauthorized.

00:16:35.370 --> 00:16:39.480
We wanted to smooth that user
experience for your apps.

00:16:39.480 --> 00:16:45.100
So right now you can get the
Documents List API scope token

00:16:45.100 --> 00:16:49.600
from your C panel used
with 2-legged OAuth

00:16:49.600 --> 00:16:51.810
with the Drive API.

00:16:51.810 --> 00:16:54.500
Unsupported, may go away.

00:16:54.500 --> 00:16:57.390
But if that covers your use case
for now, please use it.

00:16:57.390 --> 00:17:01.410
Please look to using regular
service accounts.

00:17:01.410 --> 00:17:03.200
I think you can even though
you are in the Apps

00:17:03.200 --> 00:17:05.119
Marketplace, but I
think you can.

00:17:05.119 --> 00:17:07.619
But we don't want to make it
harder for you right now to

00:17:07.619 --> 00:17:08.780
migrate across.

00:17:08.780 --> 00:17:11.720
So first, I'd say migrate using
the token and then we'll

00:17:11.720 --> 00:17:13.550
look at fixing that.

00:17:13.550 --> 00:17:15.400
MALE SPEAKER: And there's one
more question from Joshua

00:17:15.400 --> 00:17:18.900
Owen, who says he's developing
a Hangout App that makes use

00:17:18.900 --> 00:17:21.730
of the Google Drive Integration
via picker object

00:17:21.730 --> 00:17:23.579
to obtain the file ID.

00:17:23.579 --> 00:17:26.560
He says he can temporarily
share images he owns to

00:17:26.560 --> 00:17:28.920
Hangout participants using
permission methods, but this

00:17:28.920 --> 00:17:32.050
obviously won't work for things
that are shared to him.

00:17:32.050 --> 00:17:34.560
Is the best way to accomplish
this to copy the file to the

00:17:34.560 --> 00:17:37.700
local user drive and then
share out to the Hangout

00:17:37.700 --> 00:17:38.120
participants?

00:17:38.120 --> 00:17:39.500
ALI AFSHAR: Yes.

00:17:39.500 --> 00:17:43.170
So if you don't have enough
authority to add permissions

00:17:43.170 --> 00:17:47.410
to the user, or if you really
don't want to do that, it is

00:17:47.410 --> 00:17:49.630
potentially not polite if
someone shares something with

00:17:49.630 --> 00:17:53.300
you and then you share on, yes,
copying it to your own

00:17:53.300 --> 00:17:54.910
drive and then sharing
it out from there

00:17:54.910 --> 00:17:56.110
kind of makes sense.

00:17:56.110 --> 00:17:58.510
But that's the best
way to do it.

00:17:58.510 --> 00:18:01.790
You can, if you have permission
to add other, I

00:18:01.790 --> 00:18:04.650
think it's called the Writers
Can Invite field, so if you

00:18:04.650 --> 00:18:09.070
have that one set, then you can
still invite other people

00:18:09.070 --> 00:18:10.570
to do that.

00:18:10.570 --> 00:18:13.652
But otherwise yes, copying
it is the best way.

00:18:13.652 --> 00:18:14.910
But that's a cool app.

00:18:14.910 --> 00:18:16.490
I'd love to know about that.

00:18:16.490 --> 00:18:21.300
When you launch, please let us
know because, well obviously

00:18:21.300 --> 00:18:23.680
we're always into integrations
between two different Google

00:18:23.680 --> 00:18:27.310
products, but I think the
collaborative nature of

00:18:27.310 --> 00:18:30.610
Hangouts and the collaborative
nature of the drive editors,

00:18:30.610 --> 00:18:33.070
there's really a lot of
integration points there.

00:18:33.070 --> 00:18:37.860
So please let us know, we're
really keen to see that.

00:18:37.860 --> 00:18:39.183
Any more questions?

00:18:39.183 --> 00:18:39.950
No?

00:18:39.950 --> 00:18:40.740
OK, brilliant.

00:18:40.740 --> 00:18:42.950
Thank you very much
for tuning in.

00:18:42.950 --> 00:18:46.060
Please keep asking your
questions and please telling

00:18:46.060 --> 00:18:47.790
us how we can improve.

00:18:47.790 --> 00:18:48.930
That's really useful for us.

00:18:48.930 --> 00:18:50.790
Thank you very much,
my name is Ali.

00:18:50.790 --> 00:18:51.190
Take care.

00:18:51.190 --> 00:18:52.440
Bye, bye.

00:18:59.190 --> 00:19:06.067
[MUSIC PLAYING]

