WEBVTT
Kind: captions
Language: en

00:00:01.040 --> 00:00:02.480
Hi, my name is Bob Jung.

00:00:02.480 --> 00:00:05.180
I manage internationalization
at Google.

00:00:05.180 --> 00:00:07.510
We know language and culture
differ across the globe.

00:00:07.510 --> 00:00:09.880
Adapting your app correctly
is critical to providing

00:00:09.880 --> 00:00:11.940
a great user experience.

00:00:11.940 --> 00:00:13.910
But what does this
actually mean for software?

00:00:13.910 --> 00:00:16.020
First, let me demonstrate
how getting it wrong

00:00:16.020 --> 00:00:17.950
can be incredibly jarring.

00:00:17.950 --> 00:00:20.690
Suppose I gave this
talk speaking like Yoda.

00:00:20.690 --> 00:00:23.420
Bob Jung, i18n
Google Director I am.

00:00:23.420 --> 00:00:26.440
I18n what and how
about, I will talk.

00:00:26.440 --> 00:00:27.780
Did that sound strange?

00:00:27.780 --> 00:00:29.500
Maybe a bit hard to understand?

00:00:29.500 --> 00:00:33.010
Now, let's look at a real
example that Google launched.

00:00:33.010 --> 00:00:34.740
A long time ago,
in a galaxy far,

00:00:34.740 --> 00:00:37.550
far away, Gmail
was still in beta.

00:00:37.550 --> 00:00:39.860
One of the setting UIs
concatenated preferences

00:00:39.860 --> 00:00:43.400
to form a sentence reading,
forward a copy of incoming mail

00:00:43.400 --> 00:00:46.770
to email address, and keep
Gmail's copy in the Inbox.

00:00:46.770 --> 00:00:48.740
Seems feasible, right?

00:00:48.740 --> 00:00:50.960
Then we translated to Japanese.

00:00:50.960 --> 00:00:53.390
That translation has
the correct meaning,

00:00:53.390 --> 00:00:55.360
but sounded like
a Japanese Yoda.

00:00:55.360 --> 00:00:58.040
Something like, receive
messages to the following

00:00:58.040 --> 00:01:02.380
address forward mail address,
and copies in inbox keep.

00:01:02.380 --> 00:01:05.069
Because word order can be
very different for languages,

00:01:05.069 --> 00:01:07.970
a cardinal rule is to
never concatenate phrases.

00:01:07.970 --> 00:01:10.200
Now, let's look at
a few other things

00:01:10.200 --> 00:01:13.550
that will help you
internationalize successfully.

00:01:13.550 --> 00:01:15.447
Many assume that
internationalization is just

00:01:15.447 --> 00:01:17.280
about translating all
the strings in the UI,

00:01:17.280 --> 00:01:18.880
but it's really much, much more.

00:01:18.880 --> 00:01:21.410
It impacts back end, as
well as front end software.

00:01:21.410 --> 00:01:24.270
It affects the whole
software stack, including

00:01:24.270 --> 00:01:27.770
data storage and protocols;
formatting dates, times,

00:01:27.770 --> 00:01:31.060
numbers, and currency; entering
and displaying of text;

00:01:31.060 --> 00:01:33.870
sorting; displaying
bidirectional and right-to-left

00:01:33.870 --> 00:01:37.390
text for languages
like Arabic and Hebrew;

00:01:37.390 --> 00:01:39.870
local calendering
systems; and of course,

00:01:39.870 --> 00:01:42.850
your UI design and much more.

00:01:42.850 --> 00:01:44.620
And i18n is not
just implementing

00:01:44.620 --> 00:01:46.500
basic functionality correctly.

00:01:46.500 --> 00:01:49.490
You must design i18n
from the beginning.

00:01:49.490 --> 00:01:53.200
If you don't plan ahead,
things are bound to go wrong.

00:01:53.200 --> 00:01:56.400
Now here's an example where
Google failed to plan for i18n.

00:01:56.400 --> 00:02:00.210
Long ago, pre-YouTube, we had
a product called Google Video.

00:02:00.210 --> 00:02:02.320
That product launched
in the US, and didn't

00:02:02.320 --> 00:02:05.260
worry about
internationalization.

00:02:05.260 --> 00:02:06.870
This diagram shows
the data paths

00:02:06.870 --> 00:02:09.639
for uploading, indexing,
and serving user videos.

00:02:09.639 --> 00:02:12.500
The product team told
us they used Unicode.

00:02:12.500 --> 00:02:15.680
So what possibly could go wrong?

00:02:15.680 --> 00:02:18.800
How about uploading
a Beyonce video?

00:02:18.800 --> 00:02:21.950
You'll notice that she has
an accented E in her name.

00:02:21.950 --> 00:02:25.240
That accented E broke
every single data path

00:02:25.240 --> 00:02:28.580
for various reasons
relating to non-ASCII data.

00:02:28.580 --> 00:02:30.180
Some problems are hard to find.

00:02:30.180 --> 00:02:31.570
Some even corrupted user data.

00:02:31.570 --> 00:02:33.830
It took several
engineers many months

00:02:33.830 --> 00:02:36.340
to find and fix all these bugs.

00:02:36.340 --> 00:02:38.690
All of them could've been
avoided with correct design

00:02:38.690 --> 00:02:43.090
decisions, and using existing
programming techniques.

00:02:43.090 --> 00:02:46.090
Doing so would have
had very little impact

00:02:46.090 --> 00:02:49.660
on the original development
effort and schedule.

00:02:49.660 --> 00:02:51.750
So code to implement many
of these i18n features

00:02:51.750 --> 00:02:54.440
are provided by
libraries in APIs.

00:02:54.440 --> 00:02:57.440
Now, we don't recommend that
you try to write these yourself.

00:02:57.440 --> 00:03:00.680
There's a lot of
unobvious complexity.

00:03:00.680 --> 00:03:03.840
There's no reason for you
to reinvent the wheel.

00:03:03.840 --> 00:03:06.830
The work has already
been done for you.

00:03:06.830 --> 00:03:08.360
Hundreds of
engineering staff years

00:03:08.360 --> 00:03:10.410
have gone into
their development.

00:03:10.410 --> 00:03:12.360
Massive amounts of
data for these APIs

00:03:12.360 --> 00:03:14.980
have been collected and vetted.

00:03:14.980 --> 00:03:19.050
Two key examples
are CLDR and ICU.

00:03:19.050 --> 00:03:22.470
CLDR contains tens of
megabytes of language

00:03:22.470 --> 00:03:25.470
and regional data that
drives the i18n APIs.

00:03:25.470 --> 00:03:27.210
Experts around
the world continue

00:03:27.210 --> 00:03:29.120
to compile and vet this data.

00:03:29.120 --> 00:03:32.630
This graph of CLDR data
shows the amazing growth

00:03:32.630 --> 00:03:35.470
of that data over
the past 10 years.

00:03:35.470 --> 00:03:39.560
So it would be very difficult
to replicate this on your own.

00:03:39.560 --> 00:03:41.490
Tried, true, and trusted.

00:03:41.490 --> 00:03:44.130
ICU is a mature,
widely adopted library,

00:03:44.130 --> 00:03:46.570
with quite extensive features.

00:03:46.570 --> 00:03:49.030
It's embedded in
Android, Chrome,

00:03:49.030 --> 00:03:50.885
and other companies' platforms.

00:03:50.885 --> 00:03:52.760
Because it underpins
APIs on these platforms,

00:03:52.760 --> 00:03:55.430
you might be using
ICU indirectly.

00:03:55.430 --> 00:03:58.380
And it's open source, it's
free to anyone to use.

00:03:58.380 --> 00:04:01.360
It's used by major companies
and major products.

00:04:01.360 --> 00:04:04.430
And here are a few of those.

00:04:04.430 --> 00:04:07.990
Besides ICU and CLDR, there
are just many more tools

00:04:07.990 --> 00:04:10.530
to help your i18n efforts.

00:04:10.530 --> 00:04:13.670
Now, besides APIs, your
apps need platform support

00:04:13.670 --> 00:04:17.660
to display text in
your users' languages.

00:04:17.660 --> 00:04:19.880
Google has developed
the Noto font family,

00:04:19.880 --> 00:04:22.810
which covers hundreds
of languages.

00:04:22.810 --> 00:04:25.080
Noto is embedded in the
Android and Chrome OS.

00:04:25.080 --> 00:04:27.200
It's also open
source, so it can be

00:04:27.200 --> 00:04:30.820
used by any other
platform or app.

00:04:30.820 --> 00:04:34.440
The platforms also
provide input services

00:04:34.440 --> 00:04:37.130
that let your apps get
input from your users

00:04:37.130 --> 00:04:38.890
in their own languages.

00:04:38.890 --> 00:04:42.550
There's keyboards for alphabetic
language-- Chinese, Japanese,

00:04:42.550 --> 00:04:44.450
Hindi, Korean, and more.

00:04:44.450 --> 00:04:48.920
Gesture for swiping, emoji,
virtual cloud-based keyboards,

00:04:48.920 --> 00:04:52.410
and of course,
handwriting and voice.

00:04:52.410 --> 00:04:54.290
Now, as I mentioned,
i18n touches nearly

00:04:54.290 --> 00:04:55.670
all your software stack.

00:04:55.670 --> 00:04:56.870
Make sure you test it all.

00:04:56.870 --> 00:04:59.917
But I want to mention
one very useful tool.

00:04:59.917 --> 00:05:02.000
Before you spend your money
and your valuable time

00:05:02.000 --> 00:05:05.149
translating your app, how do
you know it's going to work?

00:05:05.149 --> 00:05:07.440
Some of you may have had the
experience of getting back

00:05:07.440 --> 00:05:09.940
a translation that was
just a mess because

00:05:09.940 --> 00:05:13.260
of hard coded strings, broken
UI layouts, and problems

00:05:13.260 --> 00:05:16.060
with displaying
non-ASCII characters.

00:05:16.060 --> 00:05:18.950
Pseudo-localization
automatically

00:05:18.950 --> 00:05:20.686
creates fake translations.

00:05:20.686 --> 00:05:22.060
These allow you
to test and debug

00:05:22.060 --> 00:05:23.840
without knowing
another language.

00:05:23.840 --> 00:05:25.620
The strings are
transformed to expose

00:05:25.620 --> 00:05:27.240
some of the problems
I just mentioned,

00:05:27.240 --> 00:05:29.380
but they're still
readable to you.

00:05:29.380 --> 00:05:31.630
Now here, the string,
"Share what's new,"

00:05:31.630 --> 00:05:34.670
was made longer by adding,
"one, two, three," to the end.

00:05:34.670 --> 00:05:37.040
All the ASCII
characters are converted

00:05:37.040 --> 00:05:39.404
to similar-looking
non-ASCII characters.

00:05:39.404 --> 00:05:41.820
Now you don't need to know
German, or some other language,

00:05:41.820 --> 00:05:44.057
to test and debug your app.

00:05:44.057 --> 00:05:46.723
And the tools will automatically
pseudo-localize all the strings

00:05:46.723 --> 00:05:49.370
in your UI to help you find
those problems-- the hard coded

00:05:49.370 --> 00:05:51.480
strings and UI layout problems.

00:05:51.480 --> 00:05:53.440
Now, if you look
closely at this example,

00:05:53.440 --> 00:05:55.140
it found a real problem.

00:05:55.140 --> 00:05:58.490
In Google+, you could see that
the icons were being clipped

00:05:58.490 --> 00:05:59.670
by that long text.

00:05:59.670 --> 00:06:04.050
On the right side, you've
lost the side of those icons.

00:06:04.050 --> 00:06:07.990
Now, once you've completed
all this-- design for i18n,

00:06:07.990 --> 00:06:11.895
used the APIs, and tested your
app, you're ready to translate.

00:06:11.895 --> 00:06:13.270
The process is
pretty well known.

00:06:13.270 --> 00:06:16.210
You extract the resources and
send them for translation,

00:06:16.210 --> 00:06:19.450
rebuild the localized
apps, test, and repeat.

00:06:19.450 --> 00:06:21.900
Now Google provides a simple
and streamlined process

00:06:21.900 --> 00:06:24.250
for Android and Chrome apps.

00:06:24.250 --> 00:06:26.520
This is covered in a
related Google I/O talk.

00:06:26.520 --> 00:06:29.170
Check out, "The world
is your playground--

00:06:29.170 --> 00:06:32.226
go global with Google."

00:06:32.226 --> 00:06:33.850
To get your app ready
for global users,

00:06:33.850 --> 00:06:37.410
make sure you visit these
links to learn more.

00:06:37.410 --> 00:06:39.170
I hope this video
will help you produce

00:06:39.170 --> 00:06:41.640
some great apps for the world.

