WEBVTT
Kind: captions
Language: en

00:00:04.860 --> 00:00:07.240
ANTONIO FUENTES: Hi, my name is
Antonio Fuentes and I'm a

00:00:07.240 --> 00:00:09.030
product manager at Google.

00:00:09.030 --> 00:00:11.980
Part of my job is to make sure
that developers have a great

00:00:11.980 --> 00:00:14.230
experience when building
applications

00:00:14.230 --> 00:00:16.610
that use Google APIs.

00:00:16.610 --> 00:00:19.150
Today, I will show you some
of the tools and services

00:00:19.150 --> 00:00:22.290
available to Google developers
to get started quickly,

00:00:22.290 --> 00:00:26.470
including how to sign up and use
an API, how to make simple

00:00:26.470 --> 00:00:29.830
calls and calls that use
authentication, and how to get

00:00:29.830 --> 00:00:31.980
started building code
in minutes.

00:00:31.980 --> 00:00:35.180
We will start with a simple
background after which we will

00:00:35.180 --> 00:00:38.010
go through the steps that any
developer would go through

00:00:38.010 --> 00:00:41.910
when building an application
that uses Google APIs.

00:00:41.910 --> 00:00:44.960
We will actually build a very
simple application to

00:00:44.960 --> 00:00:46.210
illustrate these steps.

00:00:48.680 --> 00:00:51.000
We will talk about the tools
available to explore the

00:00:51.000 --> 00:00:55.160
functionality of Google APIs,
tools available to learn about

00:00:55.160 --> 00:00:59.400
authentication, how to obtain
credentials to identify your

00:00:59.400 --> 00:01:01.030
application.

00:01:01.030 --> 00:01:03.980
We'll also talk about how to
manage access and traffic for

00:01:03.980 --> 00:01:05.640
your application.

00:01:05.640 --> 00:01:08.740
And finally, we will use a
simple example to start

00:01:08.740 --> 00:01:10.440
writing code.

00:01:10.440 --> 00:01:13.810
First, a little bit about
who this webinar is for.

00:01:13.810 --> 00:01:17.050
This is a beginner 101
style webinar.

00:01:17.050 --> 00:01:20.080
We assume that you
know our program.

00:01:20.080 --> 00:01:23.400
The example we will use is in
Python, but the principles

00:01:23.400 --> 00:01:26.180
apply to any programming
language.

00:01:26.180 --> 00:01:29.860
We will target a developer who
has little experience coding

00:01:29.860 --> 00:01:33.440
with Google APIs, but who likes
to dive in and learn by

00:01:33.440 --> 00:01:35.080
experimenting.

00:01:35.080 --> 00:01:38.150
It is also important to make the
distinction of which APIs

00:01:38.150 --> 00:01:40.250
this webinar applies to.

00:01:40.250 --> 00:01:43.490
Google has about 100
public APIs.

00:01:43.490 --> 00:01:47.010
We're going to focus on
the RESTful APIs.

00:01:47.010 --> 00:01:50.370
REST has become a standard for
surfacing data and is well

00:01:50.370 --> 00:01:53.610
understood in the developer
community.

00:01:53.610 --> 00:01:57.510
These APIs are simple to use
and are built on the HTTP

00:01:57.510 --> 00:02:01.520
protocol and the API surface
resources that can be

00:02:01.520 --> 00:02:05.020
manipulated with HTTP verbs.

00:02:05.020 --> 00:02:10.419
And resources are nothing but
a document living at a URL.

00:02:10.419 --> 00:02:13.410
In the case of these Google
APIs, these documents are

00:02:13.410 --> 00:02:16.370
written in JSON.

00:02:16.370 --> 00:02:19.520
Many API Google offers
are RESTful.

00:02:19.520 --> 00:02:24.970
Some examples include Google+,
Calendar, Blogger, Latitude,

00:02:24.970 --> 00:02:26.790
and many others.

00:02:26.790 --> 00:02:31.300
In our example, we will be
using the Google+ API.

00:02:31.300 --> 00:02:33.950
So let's say I would like to
build an application to

00:02:33.950 --> 00:02:39.860
display my Google+ public posts
and information in them.

00:02:39.860 --> 00:02:43.050
In today's example, we will
focus on requesting the data

00:02:43.050 --> 00:02:45.480
from Google+.

00:02:45.480 --> 00:02:47.920
But you can later use the
principles you learned with

00:02:47.920 --> 00:02:50.660
any other Google RESTful API.

00:02:50.660 --> 00:02:53.810
One key distinction is that I
want to build an application

00:02:53.810 --> 00:02:58.220
that can access the data from
the end user who is logged in.

00:02:58.220 --> 00:03:05.040
So, for example, if I go to my
Google+ profile and I type in,

00:03:05.040 --> 00:03:12.050
I am excited about IO, and share
it as a public post,

00:03:12.050 --> 00:03:14.470
those are exactly the kinds of
posts that I would want to

00:03:14.470 --> 00:03:16.520
retrieve with my application.

00:03:16.520 --> 00:03:19.440
Let's look at the basic steps
we will follow to build an

00:03:19.440 --> 00:03:22.600
application that uses
a Google API.

00:03:22.600 --> 00:03:26.260
First, I would probably want to
know if Google+ has an API,

00:03:26.260 --> 00:03:27.800
and what it looks like.

00:03:27.800 --> 00:03:29.530
So we will start by
exploring the

00:03:29.530 --> 00:03:32.680
functionality of Google APIs.

00:03:32.680 --> 00:03:35.150
Since I want to access data
for the end user of my

00:03:35.150 --> 00:03:38.340
application who is logged in,
we will also want to learn

00:03:38.340 --> 00:03:40.710
about authentication.

00:03:40.710 --> 00:03:43.310
Next, we will learn how to
obtain credentials and

00:03:43.310 --> 00:03:48.170
identify my application before
making API calls.

00:03:48.170 --> 00:03:50.990
We will also learn how to manage
access and traffic for

00:03:50.990 --> 00:03:52.850
the application.

00:03:52.850 --> 00:03:57.160
And finally, we will write and
run a simple application.

00:03:57.160 --> 00:03:59.580
So let's start with
the first step.

00:03:59.580 --> 00:04:01.980
How do I learn about
Google APIs?

00:04:01.980 --> 00:04:04.110
Does Google+ even have an API?

00:04:04.110 --> 00:04:06.030
And what does that
API look like?

00:04:06.030 --> 00:04:10.190
The first tool we will use is
the Google Developers Portal.

00:04:10.190 --> 00:04:14.340
Google Developers is a central
location, a one-stop shop,

00:04:14.340 --> 00:04:16.730
where you can not only learn
about Google products,

00:04:16.730 --> 00:04:20.910
services, and tools, but also
things like developer events,

00:04:20.910 --> 00:04:25.920
hangouts, news, use cases,
success stories, and so on.

00:04:25.920 --> 00:04:30.040
Today, we will be using the
Google Developers Portal to

00:04:30.040 --> 00:04:31.600
learn about Google APIs.

00:04:31.600 --> 00:04:34.980
And in particular,
the Google+ API.

00:04:34.980 --> 00:04:39.710
Read the documentation for
Google APIs, explore API

00:04:39.710 --> 00:04:43.410
semantics, and try Google
APIs and get

00:04:43.410 --> 00:04:45.560
started coding quickly.

00:04:45.560 --> 00:04:49.010
This is what the Google
Developers Portal looks like.

00:04:49.010 --> 00:04:53.130
It contains news, links to
documentation, hangouts, and

00:04:53.130 --> 00:04:56.480
many other resources
for developers.

00:04:56.480 --> 00:04:59.070
You will notice that on top of
all the information available

00:04:59.070 --> 00:05:02.090
on the main page, there's
a search box.

00:05:02.090 --> 00:05:04.230
And this is Google, after all.

00:05:04.230 --> 00:05:06.540
I'm going to click on the search
box and type in the

00:05:06.540 --> 00:05:08.680
name of the API that
I'm looking for.

00:05:08.680 --> 00:05:10.880
In this case, the Google+ API.

00:05:16.300 --> 00:05:19.260
I see that there's an API for
Google+, and that there's a

00:05:19.260 --> 00:05:20.510
link to the documentation.

00:05:22.850 --> 00:05:26.290
The documentation for the
Google+ API is structured the

00:05:26.290 --> 00:05:30.540
same way as the documentation
for other RESTful Google APIs.

00:05:30.540 --> 00:05:33.060
There is a main landing page
where you can learn about

00:05:33.060 --> 00:05:36.550
general concepts that apply
to the API, such as quota,

00:05:36.550 --> 00:05:40.950
authorization, API calls,
data formats,

00:05:40.950 --> 00:05:44.120
pagination, and so on.

00:05:44.120 --> 00:05:47.610
On the left nav, you can find
links to the resources exposed

00:05:47.610 --> 00:05:49.250
by the API.

00:05:49.250 --> 00:05:52.980
Here I can see that the Google+
API has People,

00:05:52.980 --> 00:05:55.065
Activities, and Comments
resources.

00:05:57.740 --> 00:06:00.540
I will select the People
resource to look at the

00:06:00.540 --> 00:06:04.150
documentation for that
particular resource.

00:06:04.150 --> 00:06:08.460
I see that there is a Get, a
Search, and a List By Activity

00:06:08.460 --> 00:06:12.340
method for the People
resource.

00:06:12.340 --> 00:06:15.110
Each method has a documentation
page, and this

00:06:15.110 --> 00:06:18.160
is how I will navigate
to them.

00:06:18.160 --> 00:06:19.850
I'm going to click on
the Search method

00:06:19.850 --> 00:06:22.090
for the People resource.

00:06:22.090 --> 00:06:25.020
And the documentation for the
Search method tells me the

00:06:25.020 --> 00:06:28.890
HTTP request format
to make a request.

00:06:28.890 --> 00:06:32.000
It also tells me about
parameters, and how to define

00:06:32.000 --> 00:06:35.670
and request body if
one is required.

00:06:35.670 --> 00:06:38.450
It also tells me what the
response of the API would look

00:06:38.450 --> 00:06:42.700
like and what all the
parameters mean.

00:06:42.700 --> 00:06:46.520
Better yet, the documentation
shows me code examples in a

00:06:46.520 --> 00:06:49.620
variety of languages that
I can simply copy and

00:06:49.620 --> 00:06:51.040
paste into my code.

00:06:51.040 --> 00:06:55.420
The documentation also allows me
to make my own API calls by

00:06:55.420 --> 00:06:59.180
providing a tool right there
on the documentation.

00:06:59.180 --> 00:07:03.420
I'm going to search for my own
profile to see how this works.

00:07:03.420 --> 00:07:07.330
I'm going to enter the name of
my profile that I've created

00:07:07.330 --> 00:07:11.940
for this presentation and make
an API call using this tool.

00:07:14.853 --> 00:07:18.870
Uh-huh, I see that as expected,
the API returns JSON

00:07:18.870 --> 00:07:21.430
structure using the response
parameters I saw in the

00:07:21.430 --> 00:07:23.220
documentation.

00:07:23.220 --> 00:07:26.700
I can even click on the link in
the response to look at the

00:07:26.700 --> 00:07:28.610
Google+ profile it returns.

00:07:28.610 --> 00:07:32.370
And I see that it
is my profile.

00:07:32.370 --> 00:07:34.410
Now, what if I want to
see the other methods

00:07:34.410 --> 00:07:36.780
available for this API?

00:07:36.780 --> 00:07:41.150
I can find them using the left
nav on the documentation.

00:07:41.150 --> 00:07:45.120
I see that every resource
available for this API has a

00:07:45.120 --> 00:07:47.290
series of methods.

00:07:47.290 --> 00:07:50.890
Alternatively, I can use the
APIs Explorer, which is linked

00:07:50.890 --> 00:07:53.170
to on this main page.

00:07:53.170 --> 00:07:56.090
The APIs Explorer is
the second tool

00:07:56.090 --> 00:07:58.140
we'll be using today.

00:07:58.140 --> 00:08:01.310
The APIs Explorer is a tool
that allows you to, among

00:08:01.310 --> 00:08:07.030
other things, list all available
RESTful Google APIs,

00:08:07.030 --> 00:08:08.780
explore methods, require

00:08:08.780 --> 00:08:10.740
parameters, including checking.

00:08:10.740 --> 00:08:13.810
which of those parameters
are required.

00:08:13.810 --> 00:08:17.030
Make API calls using an
interactive tool, and actually

00:08:17.030 --> 00:08:20.440
examine the HTTP response.

00:08:20.440 --> 00:08:23.230
And send authenticated request
calls that fetch

00:08:23.230 --> 00:08:26.380
data owned by a user.

00:08:26.380 --> 00:08:29.670
The Google APIs Explorer was
built using the Google APIs

00:08:29.670 --> 00:08:33.650
Discovery Service, which we
introduced last year.

00:08:33.650 --> 00:08:36.110
This is what the APIs
Explorer looks like.

00:08:36.110 --> 00:08:39.210
It has a directory-style listing
of all the Google

00:08:39.210 --> 00:08:41.760
RESTful APIs.

00:08:41.760 --> 00:08:45.120
Using the APIs Explorer, I will
locate the Google+ API,

00:08:45.120 --> 00:08:48.960
which is the one I'm using
in my application.

00:08:48.960 --> 00:08:51.810
The Explorer will immediately
show me all of the resources

00:08:51.810 --> 00:08:55.860
and methods available
for that API.

00:08:55.860 --> 00:08:58.610
Let's try to search for
public activities.

00:08:58.610 --> 00:09:03.570
I would go to
plus.activities.search method

00:09:03.570 --> 00:09:05.630
and perform a query.

00:09:05.630 --> 00:09:09.070
The Explorer shows me a list of
parameters I can supply to

00:09:09.070 --> 00:09:11.110
make this API call.

00:09:11.110 --> 00:09:14.630
And it also tells me which
of those are required.

00:09:14.630 --> 00:09:17.630
In this case, I'm performing a
query to search all public

00:09:17.630 --> 00:09:21.350
activities on Google+ that
match a query string.

00:09:21.350 --> 00:09:24.870
And the query parameter
is required.

00:09:24.870 --> 00:09:31.270
So, for example, if I click and
search for Google IO and

00:09:31.270 --> 00:09:35.960
execute this request, I see that
the Explorer tells me the

00:09:35.960 --> 00:09:40.070
request that was sent and the
JSON object with the response

00:09:40.070 --> 00:09:42.680
from the API.

00:09:42.680 --> 00:09:45.970
If I need to narrow it down to
my own activities, I can try

00:09:45.970 --> 00:09:49.630
the list method in the
APIs Explorer.

00:09:49.630 --> 00:09:52.570
plus.activities.list will list
all activities in the

00:09:52.570 --> 00:09:55.940
specified collection, which is
in this case, activities for a

00:09:55.940 --> 00:09:58.790
particular user.

00:09:58.790 --> 00:10:01.930
The documentation for the
Google+ API indicates that to

00:10:01.930 --> 00:10:06.960
list your public activities,
you can use a parameter me.

00:10:06.960 --> 00:10:09.480
And you can use public
for the collection.

00:10:09.480 --> 00:10:13.050
So let's try that and
see what happens.

00:10:13.050 --> 00:10:17.710
When I click on Execute, the
APIs Explorer will tell me

00:10:17.710 --> 00:10:20.651
that something has not worked.

00:10:20.651 --> 00:10:24.030
The Explorer is indicating to
me in several ways that

00:10:24.030 --> 00:10:27.730
there's a problem
with my request.

00:10:27.730 --> 00:10:30.910
First, it is telling me that I
need to be authenticated in

00:10:30.910 --> 00:10:33.170
this red bar.

00:10:33.170 --> 00:10:37.600
And that I need to authorize
my request using OAuth 2.

00:10:37.600 --> 00:10:42.270
Second, the API itself has
thrown a 401 HTTP response

00:10:42.270 --> 00:10:46.910
code and the JSON object
specifying the error.

00:10:46.910 --> 00:10:50.400
It looks like we need to pass
our credentials using OAuth 2

00:10:50.400 --> 00:10:52.540
so that the Explorer can
fetch data for my

00:10:52.540 --> 00:10:54.220
activities on my behalf.

00:10:54.220 --> 00:10:56.830
So let's go ahead and try to
make a call with the APIs

00:10:56.830 --> 00:11:00.740
Explorer that uses OAuth 2.

00:11:00.740 --> 00:11:04.390
I would first switch to make
authorized calls using this

00:11:04.390 --> 00:11:07.240
convenience switch
on the right.

00:11:07.240 --> 00:11:11.030
The Explorer will ask me to
select OAuth 2 scopes.

00:11:11.030 --> 00:11:14.200
These are used to specify levels
of access that will be

00:11:14.200 --> 00:11:18.400
granted to the Explorer when
it accesses end user data.

00:11:18.400 --> 00:11:21.160
I see that there are two
possible scopes that can be

00:11:21.160 --> 00:11:23.170
used for this API call.

00:11:23.170 --> 00:11:27.290
One for the Explorer to have
access to my + profile and one

00:11:27.290 --> 00:11:30.930
for the Explorer to have access
to my email address.

00:11:30.930 --> 00:11:33.460
I will select the
default option.

00:11:33.460 --> 00:11:36.200
You can always look up the
documentation for an API to

00:11:36.200 --> 00:11:40.010
see which scopes are declared
by an API, or read the OAuth

00:11:40.010 --> 00:11:42.780
protocol documentation
for more information.

00:11:42.780 --> 00:11:46.180
When I click on Authorize, I see
that now I get a consent

00:11:46.180 --> 00:11:49.810
screen asking for end user
permission for an application.

00:11:49.810 --> 00:11:51.670
In this case, the Explorer.

00:11:51.670 --> 00:11:55.390
The Explorer wants to have
access to my data.

00:11:55.390 --> 00:11:58.710
When you build applications that
make API calls to fetch

00:11:58.710 --> 00:12:02.650
end user data, your end users
will see something like this

00:12:02.650 --> 00:12:06.010
if you use the OAuth
2 protocol.

00:12:06.010 --> 00:12:13.090
If I allow access and make the
same API call again, I will

00:12:13.090 --> 00:12:16.830
see that now the APIs Explorer
actually fetches my public

00:12:16.830 --> 00:12:18.980
activities from my profile.

00:12:18.980 --> 00:12:22.350
To recap where we are up to now,
we have learned about two

00:12:22.350 --> 00:12:25.530
tools to explore the
functionality of Google APIs,

00:12:25.530 --> 00:12:29.940
the Google Developers Portal and
the Google APIs Explorer.

00:12:29.940 --> 00:12:33.760
So we just did an authenticated
API call.

00:12:33.760 --> 00:12:35.760
What if we want to learn
a little bit more about

00:12:35.760 --> 00:12:36.970
authentication?

00:12:36.970 --> 00:12:42.310
Let's start with an impossibly
brief summary of OAuth 2.

00:12:42.310 --> 00:12:46.280
In a nutshell, OAuth 2 is a
protocol that allows you to

00:12:46.280 --> 00:12:49.750
build applications that access
data on behalf of a logged in

00:12:49.750 --> 00:12:53.140
user without requiring
their passwords.

00:12:53.140 --> 00:12:56.930
The protocol consists
of a few steps.

00:12:56.930 --> 00:13:00.520
An application makes a request
to Google to show the end user

00:13:00.520 --> 00:13:06.310
a consent screen, just the way
we saw with the APIs Explorer.

00:13:06.310 --> 00:13:10.120
On consent, Google gives access
credentials back to the

00:13:10.120 --> 00:13:12.610
application.

00:13:12.610 --> 00:13:15.870
The application then uses those
credentials to request

00:13:15.870 --> 00:13:18.480
end user data.

00:13:18.480 --> 00:13:21.320
And it's important to know that
the credentials expire or

00:13:21.320 --> 00:13:24.920
can be revoked at any time
by the end user.

00:13:24.920 --> 00:13:27.710
There's good documentation
on OAuth 2 on the Google

00:13:27.710 --> 00:13:29.260
Developers site.

00:13:29.260 --> 00:13:32.540
And there's a session on Google
I/O that dives deeper

00:13:32.540 --> 00:13:35.850
into how it works and how you
can use OAuth 2 in different

00:13:35.850 --> 00:13:37.380
platforms and use cases.

00:13:40.290 --> 00:13:44.450
Luckily, the Google Developers
Portal also has a tool to help

00:13:44.450 --> 00:13:47.760
you understand how OAuth 2 works
if you want to make an

00:13:47.760 --> 00:13:50.450
authenticated API call.

00:13:50.450 --> 00:13:53.700
This tool is called the
OAuth 2 Playground.

00:13:53.700 --> 00:13:56.040
And it allows you to understand
the OAuth 2

00:13:56.040 --> 00:14:00.100
protocol, and also navigate
the steps to make an

00:14:00.100 --> 00:14:04.000
authenticated call using
an interactive tool.

00:14:04.000 --> 00:14:07.400
You can actually make API calls
using this tool and

00:14:07.400 --> 00:14:10.220
examine the HTTP response.

00:14:10.220 --> 00:14:13.150
Let's try to recreate the steps
we just learned about

00:14:13.150 --> 00:14:15.880
with the OAuth 2 Playground.

00:14:15.880 --> 00:14:19.230
First we select which
APIs we want to use.

00:14:19.230 --> 00:14:22.830
In this case, the Google+ API.

00:14:22.830 --> 00:14:25.830
This will select an appropriate
scope for me.

00:14:25.830 --> 00:14:29.720
If we recall from the few steps
ago, a scope defines the

00:14:29.720 --> 00:14:33.420
level of access that an end
user will consent to when

00:14:33.420 --> 00:14:37.120
given access to an
application.

00:14:37.120 --> 00:14:41.790
When I click on Authorize APIs,
we're performing step 1,

00:14:41.790 --> 00:14:43.350
which is the application.

00:14:43.350 --> 00:14:46.840
In this case, the OAuth
Playground sending a scope and

00:14:46.840 --> 00:14:50.210
requesting an authorization
code.

00:14:50.210 --> 00:14:53.390
And see, I see a consent screen
similar to the one I

00:14:53.390 --> 00:14:56.110
saw from the APIs Explorer.

00:14:56.110 --> 00:14:58.780
This time the OAuth 2
Playground is asking

00:14:58.780 --> 00:15:03.110
permission to access your
Google+ profile using the same

00:15:03.110 --> 00:15:06.030
scope as before.

00:15:06.030 --> 00:15:09.770
Once I allow access, the OAuth
2 Playground will actually

00:15:09.770 --> 00:15:14.000
show me the HTTP requests made
to the OAuth endpoints at

00:15:14.000 --> 00:15:16.090
Google and their response.

00:15:16.090 --> 00:15:19.970
In this case, an authorization
code.

00:15:19.970 --> 00:15:23.680
The next step is to exchange the
authorization code for an

00:15:23.680 --> 00:15:25.600
access token.

00:15:25.600 --> 00:15:28.560
The OAuth Playground allows you
to do that with a single

00:15:28.560 --> 00:15:31.490
click of a button.

00:15:31.490 --> 00:15:35.030
And it will also show you the
HTTP request that was made, as

00:15:35.030 --> 00:15:36.230
well as the response.

00:15:36.230 --> 00:15:40.240
In this case, an access token.

00:15:40.240 --> 00:15:42.730
The OAuth 2 Playground actually
allows you to make a

00:15:42.730 --> 00:15:45.080
call with those tokens.

00:15:45.080 --> 00:15:48.670
Using the same example as
before, I'm going to list my

00:15:48.670 --> 00:15:52.900
public activities from my
Google+ profile using the same

00:15:52.900 --> 00:15:54.830
URI I used before.

00:15:54.830 --> 00:15:59.250
If you recall, all we have to do
is substitute me and public

00:15:59.250 --> 00:16:00.500
for the collection.

00:16:08.210 --> 00:16:10.470
Once I send that request,
I see the

00:16:10.470 --> 00:16:13.590
same response as before.

00:16:13.590 --> 00:16:16.760
Unlike the APIs Explorer which
provides a directory of

00:16:16.760 --> 00:16:20.640
methods, parameters for an API,
the OAuth 2 Playground

00:16:20.640 --> 00:16:25.250
focuses on understanding the
steps in the OAuth 2 protocol.

00:16:25.250 --> 00:16:28.780
When we used the Explorer, all
of these steps to request and

00:16:28.780 --> 00:16:32.760
exchange tokens were implemented
behind the scenes.

00:16:32.760 --> 00:16:35.770
Your client application would
have to do the same if you

00:16:35.770 --> 00:16:37.890
write it from scratch.

00:16:37.890 --> 00:16:40.870
The good news is that the Google
Client Libraries do all

00:16:40.870 --> 00:16:43.720
this work for you, and implement
these steps under

00:16:43.720 --> 00:16:45.080
the covers.

00:16:45.080 --> 00:16:48.540
This is one of the many reasons
we strongly recommend

00:16:48.540 --> 00:16:49.790
using the Client Libraries.

00:16:52.910 --> 00:16:56.105
All right, we just saw how OAuth
2 Playground allows you

00:16:56.105 --> 00:16:57.355
to learn about authentication.

00:16:59.820 --> 00:17:02.360
What if you want to build an
application and make a request

00:17:02.360 --> 00:17:04.910
using your own credentials?

00:17:04.910 --> 00:17:08.250
When building an application
that uses Google APIs, you

00:17:08.250 --> 00:17:11.200
need to obtain credentials
from Google which you can

00:17:11.200 --> 00:17:13.520
embed in your API calls.

00:17:13.520 --> 00:17:17.970
These credentials allow you and
Google to know who or what

00:17:17.970 --> 00:17:20.020
is invoking the API.

00:17:20.020 --> 00:17:23.660
And in some cases, can be used
in the OAuth 2 flows to

00:17:23.660 --> 00:17:28.660
identify both the invoking
application and its end user.

00:17:28.660 --> 00:17:30.920
Among other reasons, this
enables you to manage

00:17:30.920 --> 00:17:32.790
application access.

00:17:32.790 --> 00:17:36.630
Using the APIs Console, which
we'll talk about in a moment,

00:17:36.630 --> 00:17:40.790
you can generate OAuth 2 client
IDs and API keys.

00:17:40.790 --> 00:17:44.100
Which you can then embed in
your application to invoke

00:17:44.100 --> 00:17:47.290
authenticated Google
API calls.

00:17:47.290 --> 00:17:51.140
Use OAuth 2 client IDs in your
browser, desktop, or

00:17:51.140 --> 00:17:55.050
mobile-based applications to
allow it to call Google APIs

00:17:55.050 --> 00:17:58.980
and request data on behalf
of its user.

00:17:58.980 --> 00:18:02.550
In our example, you would use
the OAuth 2 client ID if the

00:18:02.550 --> 00:18:05.570
application caused the
Google+ API to fetch

00:18:05.570 --> 00:18:08.190
an end user's data.

00:18:08.190 --> 00:18:11.690
Use API keys if your application
does not require

00:18:11.690 --> 00:18:13.900
end user data or consent.

00:18:13.900 --> 00:18:18.690
For example, you might use API
keys in an application that

00:18:18.690 --> 00:18:22.240
involves the Google Translate,
or Custom Search, or the URL

00:18:22.240 --> 00:18:23.610
Shortener APIs.

00:18:23.610 --> 00:18:26.470
The APIs Console is a management
tool for using

00:18:26.470 --> 00:18:28.550
Google APIs.

00:18:28.550 --> 00:18:31.400
Here, you can take a variety
of actions in addition to

00:18:31.400 --> 00:18:34.620
generating OAuth 2 client
IDs and API keys.

00:18:34.620 --> 00:18:38.360
For example, you can establish a
relationship with Google and

00:18:38.360 --> 00:18:41.280
identify your application.

00:18:41.280 --> 00:18:44.160
You can sign up to use Google
APIs and review

00:18:44.160 --> 00:18:46.580
their terms of service.

00:18:46.580 --> 00:18:48.670
You can obtain credentials
you can embed when

00:18:48.670 --> 00:18:51.200
you make API calls.

00:18:51.200 --> 00:18:54.820
And you can provide billing
details to use paid APIs, such

00:18:54.820 --> 00:18:57.820
as those that are part of the
Google Cloud platform.

00:18:57.820 --> 00:18:59.730
Now back to my application.

00:18:59.730 --> 00:19:02.460
I'm going to use the Google APIs
Console to register an

00:19:02.460 --> 00:19:04.610
application.

00:19:04.610 --> 00:19:08.040
I'm going to give a name
and a simple logo.

00:19:08.040 --> 00:19:11.340
And I'm going to sign up
to use the Google+ API.

00:19:11.340 --> 00:19:14.780
And last but not least, I'm
going to obtain a client ID to

00:19:14.780 --> 00:19:17.630
make API calls using OAuth 2.

00:19:17.630 --> 00:19:20.740
When you go to the Google APIs
Console, you'll notice that

00:19:20.740 --> 00:19:23.280
you're asked to create
a project.

00:19:23.280 --> 00:19:26.750
Projects are used to identify
applications and assign

00:19:26.750 --> 00:19:29.330
attributes to those
applications, such as

00:19:29.330 --> 00:19:33.310
credentials, the team working on
them, traffic controls, and

00:19:33.310 --> 00:19:36.570
others as we will see.

00:19:36.570 --> 00:19:39.040
I'm going to create
a new project.

00:19:39.040 --> 00:19:42.790
The next step is to sign
up for the Google+ API.

00:19:42.790 --> 00:19:45.640
To do this, I simply turn
on the switch for

00:19:45.640 --> 00:19:47.920
that particular API.

00:19:47.920 --> 00:19:50.180
But notice how I can
use multiple

00:19:50.180 --> 00:19:53.440
APIs in a single project.

00:19:53.440 --> 00:19:56.800
When I sign up for this API,
I must accept the terms of

00:19:56.800 --> 00:19:59.710
service before proceeding
forward.

00:19:59.710 --> 00:20:03.190
I will only be required to do
this once as a developer, even

00:20:03.190 --> 00:20:06.670
if I create other projects
that use the API.

00:20:06.670 --> 00:20:10.330
Also, many Google APIs are under
a standard set of terms

00:20:10.330 --> 00:20:13.210
of service, which means
you only have to

00:20:13.210 --> 00:20:16.430
agree to these once.

00:20:16.430 --> 00:20:18.740
OK, now I need to get
credentials for my

00:20:18.740 --> 00:20:20.490
application.

00:20:20.490 --> 00:20:23.810
The API Access tab on the left
side of the console allows me

00:20:23.810 --> 00:20:26.410
to do just that.

00:20:26.410 --> 00:20:30.620
So if I go to the API Access,
you will see that I can create

00:20:30.620 --> 00:20:34.310
OAuth 2 client IDs
or API keys.

00:20:34.310 --> 00:20:37.900
In this case, I will create an
OAuth 2 client ID since I want

00:20:37.900 --> 00:20:42.700
my application to access data
on behalf of an end user.

00:20:42.700 --> 00:20:45.030
When I do that, I will be
required to provide

00:20:45.030 --> 00:20:47.640
information about
my application.

00:20:47.640 --> 00:20:49.350
Providing a name
and [INAUDIBLE]

00:20:49.350 --> 00:20:52.280
logo is enough for this step.

00:20:52.280 --> 00:20:55.570
So I'm just going to call it
my killer app and give it a

00:20:55.570 --> 00:20:56.820
funny logo.

00:21:02.030 --> 00:21:05.340
Now I'm asked which type
of client ID I need.

00:21:05.340 --> 00:21:08.630
As we saw before, there are
different types of client IDs

00:21:08.630 --> 00:21:11.600
depending on the nature
of my application.

00:21:11.600 --> 00:21:16.370
I will choose an installed
application since my code

00:21:16.370 --> 00:21:19.030
lives in my own server.

00:21:19.030 --> 00:21:22.510
When I do that, the system will
generate a client ID and

00:21:22.510 --> 00:21:24.080
a client secret for me.

00:21:27.040 --> 00:21:30.260
Now we have learned how we can
use the Google APIs Console to

00:21:30.260 --> 00:21:34.510
obtain credentials and identify
your application.

00:21:34.510 --> 00:21:37.790
We will now learn how to manage
access and traffic for

00:21:37.790 --> 00:21:39.480
this application.

00:21:39.480 --> 00:21:43.690
And why do you care about access
and traffic controls?

00:21:43.690 --> 00:21:46.950
First, you may want to restrict
who can make calls

00:21:46.950 --> 00:21:49.310
with your credentials.

00:21:49.310 --> 00:21:52.080
This is your first line of
defense against leaked or

00:21:52.080 --> 00:21:54.210
stolen credentials.

00:21:54.210 --> 00:21:57.080
Depending on your use case,
the console allows you to

00:21:57.080 --> 00:22:01.270
configure, for example, which
websites can invoke Google

00:22:01.270 --> 00:22:05.350
APIs directly from a web browser
if you're working with

00:22:05.350 --> 00:22:07.370
a browser key.

00:22:07.370 --> 00:22:11.290
Which JavaScript origins are
allowed to make authenticated

00:22:11.290 --> 00:22:15.620
calls using your OAuth
2 client ID.

00:22:15.620 --> 00:22:19.520
The allowed redirect URIs to
be directed to after an end

00:22:19.520 --> 00:22:22.630
user consent screen.

00:22:22.630 --> 00:22:25.500
Second, you can throttle the
amount of traffic your

00:22:25.500 --> 00:22:27.520
application handles.

00:22:27.520 --> 00:22:31.130
This allows you to cap the
number of API calls initiated

00:22:31.130 --> 00:22:33.140
by the end user.

00:22:33.140 --> 00:22:36.460
This is particularly important
if you want to limit specific

00:22:36.460 --> 00:22:40.680
end users from consuming all of
your available API quota.

00:22:40.680 --> 00:22:43.720
Or if you want to cap the number
of API calls your end

00:22:43.720 --> 00:22:46.800
users make against the
paid Google API.

00:22:46.800 --> 00:22:49.270
For example, the Google
Translate for which you're

00:22:49.270 --> 00:22:50.790
paying for.

00:22:50.790 --> 00:22:53.780
So let's go back to the APIs
Console to work with this

00:22:53.780 --> 00:22:56.120
simple example.

00:22:56.120 --> 00:22:58.310
I'm going to go back to
the OAuth Playground

00:22:58.310 --> 00:23:00.280
we were using before.

00:23:00.280 --> 00:23:04.250
One of the advantage of the
OAuth 2 Playground is that it

00:23:04.250 --> 00:23:07.330
allows you to enter your own
credentials, essentially to

00:23:07.330 --> 00:23:10.230
pretend that the OAuth 2
Playground is your own

00:23:10.230 --> 00:23:13.640
application, and to see what
your end users would see on a

00:23:13.640 --> 00:23:14.890
consent screen.

00:23:18.490 --> 00:23:21.260
So the OAuth 2 Playground
provides a place where I can

00:23:21.260 --> 00:23:24.430
enter my own credentials.

00:23:24.430 --> 00:23:27.690
And it's telling me that in
order for the flow to work, I

00:23:27.690 --> 00:23:31.380
need to make sure that the OAuth
Playground URL is on the

00:23:31.380 --> 00:23:36.180
list of allowed redirect
URIs for my project.

00:23:36.180 --> 00:23:39.280
This means that once Google is
done presenting the end user

00:23:39.280 --> 00:23:42.830
with a consent screen, it will
redirect to that URL.

00:23:42.830 --> 00:23:44.080
And I'm going to copy it.

00:23:50.700 --> 00:23:54.290
Now I can go back to the APIs
Console and generate a client

00:23:54.290 --> 00:23:58.230
ID for a web application since
the OAuth 2 Playground is a

00:23:58.230 --> 00:23:59.480
web application.

00:24:04.350 --> 00:24:07.510
I will add the OAuth 2
Playground URL to the list of

00:24:07.510 --> 00:24:11.170
valid redirect URIs for
this particular key.

00:24:15.840 --> 00:24:19.950
Now, the APIs Console has
generated another client ID

00:24:19.950 --> 00:24:21.690
and another client
seeker for me.

00:24:21.690 --> 00:24:24.790
In this case, for a
web application.

00:24:24.790 --> 00:24:28.850
We can copy now our own client
ID and client secret and paste

00:24:28.850 --> 00:24:30.210
it into the OAuth
2 Playground.

00:24:34.120 --> 00:24:37.610
So I'm going to take the client
ID, paste it in the

00:24:37.610 --> 00:24:43.900
space for it, and take the
client secret and do the same.

00:24:50.570 --> 00:24:53.430
Now we have a working
application that uses our

00:24:53.430 --> 00:24:54.620
credentials.

00:24:54.620 --> 00:24:59.020
And let's look how I would
configure traffic controls.

00:24:59.020 --> 00:25:04.980
I can go to the quotas tab of
the APIs Console and set the

00:25:04.980 --> 00:25:08.500
per user limit for API calls
that are made using my

00:25:08.500 --> 00:25:10.410
credentials.

00:25:10.410 --> 00:25:13.910
I see that the Google+ API
allows me to do 10,000

00:25:13.910 --> 00:25:16.290
requests in a day.

00:25:16.290 --> 00:25:20.080
And that I can further scope
that to a per user limit,

00:25:20.080 --> 00:25:23.230
thereby allowing me to limit
traffic for individual users

00:25:23.230 --> 00:25:27.780
and Queries Per Second, or QPS,
to limit individual users

00:25:27.780 --> 00:25:29.920
from generating unwanted
traffic and

00:25:29.920 --> 00:25:32.530
consuming all my quota.

00:25:32.530 --> 00:25:34.330
I will set the value
to the default.

00:25:39.400 --> 00:25:41.960
Let's go back to the OAuth 2
Playground and execute the

00:25:41.960 --> 00:25:45.850
same steps as we did before.

00:25:45.850 --> 00:25:50.180
I will select the Google+ API
and authorize the scope.

00:25:52.880 --> 00:25:55.370
And now I see a consent
screen that is

00:25:55.370 --> 00:25:57.140
presented as I expected.

00:25:57.140 --> 00:26:00.230
But this time it has my
application information

00:26:00.230 --> 00:26:03.020
displayed to the end user.

00:26:03.020 --> 00:26:07.830
Then, once I grant access, the
application will continue to

00:26:07.830 --> 00:26:10.260
make authorized calls
on behalf of me.

00:26:12.910 --> 00:26:20.040
I can continue with the steps as
before and make an API call

00:26:20.040 --> 00:26:21.310
the same way we did before.

00:26:32.640 --> 00:26:35.570
And I see that the response
looks the same as before.

00:26:35.570 --> 00:26:38.560
But this time it's coming from
the OAuth 2 Playground

00:26:38.560 --> 00:26:41.880
pretending to be
my application.

00:26:41.880 --> 00:26:45.380
I can also use the Google APIs
Console to check the traffic

00:26:45.380 --> 00:26:47.070
for my application
and the traffic

00:26:47.070 --> 00:26:49.730
that's being generated.

00:26:49.730 --> 00:26:51.865
I can do that by looking
at the Reports tab.

00:26:54.690 --> 00:26:58.300
The Reports tab contains useful
information about usage

00:26:58.300 --> 00:27:00.180
patterns for your application.

00:27:00.180 --> 00:27:04.300
In this case, I see that a
single API call, which I just

00:27:04.300 --> 00:27:07.450
did, has been made using
my credentials.

00:27:07.450 --> 00:27:10.630
We have now learned how the
APIs Console can help us

00:27:10.630 --> 00:27:12.975
manage access and traffic
for our application.

00:27:15.990 --> 00:27:18.920
And now that we have explored a
variety of tools and we have

00:27:18.920 --> 00:27:21.700
signed up to use the Google+
API, let's build

00:27:21.700 --> 00:27:24.050
and run some code.

00:27:24.050 --> 00:27:28.190
Google makes it easy to get
started coding when using APIs

00:27:28.190 --> 00:27:29.930
by providing a variety
of client

00:27:29.930 --> 00:27:32.610
libraries in many languages.

00:27:32.610 --> 00:27:35.440
Using Client Libraries has
many advantages, and we

00:27:35.440 --> 00:27:38.240
strongly encourage
you to use them.

00:27:38.240 --> 00:27:41.970
First, the libraries make it
very simple to securely call

00:27:41.970 --> 00:27:45.850
any RESTful API and manipulate
the data without the need to

00:27:45.850 --> 00:27:50.280
write any code to access the
data surfaced by the API.

00:27:50.280 --> 00:27:52.360
The Client Libraries
also take care of

00:27:52.360 --> 00:27:54.140
handling errors for you.

00:27:54.140 --> 00:27:57.405
And most importantly, they
handle all of the steps and

00:27:57.405 --> 00:28:01.280
the OAuth 2 protocol that
we learned previously.

00:28:01.280 --> 00:28:04.490
Every time we introduce new
features to Google APIs, the

00:28:04.490 --> 00:28:06.850
Client Libraries are gradually
updated to

00:28:06.850 --> 00:28:08.100
include those features.

00:28:10.810 --> 00:28:13.420
But let's not forget our
original objective, we're

00:28:13.420 --> 00:28:16.560
building an application to
access the Google+ posts for

00:28:16.560 --> 00:28:20.210
the user logged in
using the app.

00:28:20.210 --> 00:28:23.670
Going back to the documentation
for Google+, the

00:28:23.670 --> 00:28:27.510
client libraries are accessed
using the downloads link on

00:28:27.510 --> 00:28:28.890
the left nav.

00:28:28.890 --> 00:28:32.210
The downloads page has a table
with all the client libraries

00:28:32.210 --> 00:28:36.640
currently available to
use with Google APIs.

00:28:36.640 --> 00:28:39.680
These Client Libraries are all
open source and were developed

00:28:39.680 --> 00:28:42.930
using the Google API Discovery
service, which was the same

00:28:42.930 --> 00:28:47.730
service used to build
the APIs Explorer.

00:28:47.730 --> 00:28:49.810
Let's click on the Python
Client Library.

00:28:52.820 --> 00:28:55.600
This will bring us to an open
source project hosted on

00:28:55.600 --> 00:28:59.070
Google that contains downloads,
documentation, and

00:28:59.070 --> 00:29:03.030
more for the Python Client
Library for Google APIs.

00:29:03.030 --> 00:29:05.340
I'm going to go ahead and
install this Client Library on

00:29:05.340 --> 00:29:09.470
my server, for which I would
download a zip file provided

00:29:09.470 --> 00:29:10.950
in the page.

00:29:10.950 --> 00:29:14.270
Installing the Client Library
is as simple as running a

00:29:14.270 --> 00:29:15.590
single command.

00:29:15.590 --> 00:29:18.880
I will copy this command
for reference.

00:29:18.880 --> 00:29:21.450
I'll also download
the zip file.

00:29:21.450 --> 00:29:24.540
Notice that when you install the
Python Client Library, you

00:29:24.540 --> 00:29:26.890
do not have to download
the zip file.

00:29:26.890 --> 00:29:29.490
But I'm only doing that to
access some samples and

00:29:29.490 --> 00:29:32.460
documentation included
in the bundle.

00:29:32.460 --> 00:29:35.296
I have downloaded the
installation zip file and I

00:29:35.296 --> 00:29:39.850
have placed it in a temp
directory on my server.

00:29:39.850 --> 00:29:42.710
Now that I have done that and
extracted it, I can install

00:29:42.710 --> 00:29:45.265
the Client Library using
a simple command.

00:29:53.800 --> 00:29:57.190
And that's it, the Python Client
Library for Google APIs

00:29:57.190 --> 00:30:00.170
has been installed
on my server.

00:30:00.170 --> 00:30:03.430
Getting a starter application
running is just a matter of a

00:30:03.430 --> 00:30:05.190
few simple steps.

00:30:05.190 --> 00:30:08.310
We have already installed the
client library, we need a

00:30:08.310 --> 00:30:10.810
sample that works with
the Google+ API and

00:30:10.810 --> 00:30:13.230
is written in Python.

00:30:13.230 --> 00:30:15.710
You can access samples from the
search box in the Google

00:30:15.710 --> 00:30:19.020
Developers Portal from the
documentation for a particular

00:30:19.020 --> 00:30:21.980
API, or from the open
source project that

00:30:21.980 --> 00:30:24.470
hosts a client library.

00:30:24.470 --> 00:30:27.670
Let's try to find a sample on
the open source project for

00:30:27.670 --> 00:30:30.040
the Python Client Library.

00:30:30.040 --> 00:30:32.460
If we go to the page,
we'll see that

00:30:32.460 --> 00:30:35.080
there's a link for samples.

00:30:35.080 --> 00:30:39.110
And it will give a list of all
Google APIs that have samples

00:30:39.110 --> 00:30:41.470
in this client library.

00:30:41.470 --> 00:30:45.450
By clicking on Google+, it'll
show me the path for the

00:30:45.450 --> 00:30:49.060
sample for Google+.

00:30:49.060 --> 00:30:50.770
So let's look at that sample.

00:30:50.770 --> 00:30:54.770
It says it loops over all the
user's activities and prints a

00:30:54.770 --> 00:30:56.490
short snippet.

00:30:56.490 --> 00:30:59.080
There's a sample that does
exactly what I need it to do

00:30:59.080 --> 00:31:01.090
in principle.

00:31:01.090 --> 00:31:03.370
I see that the sample
comes under the

00:31:03.370 --> 00:31:05.250
directory samples plus.

00:31:05.250 --> 00:31:07.440
So let's go look for it.

00:31:07.440 --> 00:31:09.740
So I'm going to go to my server
and navigate to the

00:31:09.740 --> 00:31:11.330
path where the sample resides.

00:31:18.360 --> 00:31:20.200
And I see the sample.

00:31:20.200 --> 00:31:22.230
Let's try to run the sample
and see what happens.

00:31:27.740 --> 00:31:29.770
No luck.

00:31:29.770 --> 00:31:31.930
The sample application is
telling us to please

00:31:31.930 --> 00:31:34.130
configure OAuth 2.

00:31:34.130 --> 00:31:35.640
And why?

00:31:35.640 --> 00:31:38.910
Because the APIs making an
authenticated call to fetch my

00:31:38.910 --> 00:31:43.800
data and I have not supplied any
application credentials.

00:31:43.800 --> 00:31:46.220
Let's examine the file where
we can specify our

00:31:46.220 --> 00:31:47.230
credentials.

00:31:47.230 --> 00:31:49.290
According to this instruction,
it's clientsecrets.JSON.

00:31:55.210 --> 00:31:58.950
When we look at that, I see that
the sample has a space

00:31:58.950 --> 00:32:02.140
where we can provide, within our
own server, the client ID

00:32:02.140 --> 00:32:05.420
and the client secret for our
application, which we already

00:32:05.420 --> 00:32:08.075
obtained when we signed up
to use the Google+ API.

00:32:10.780 --> 00:32:13.870
The Python sample from Google+,
as well as many other

00:32:13.870 --> 00:32:17.160
samples offered by Google,
provides a convenient location

00:32:17.160 --> 00:32:20.000
to make it easy to paste
your credentials.

00:32:20.000 --> 00:32:23.710
Let's see what happens when I
paste my credentials in the

00:32:23.710 --> 00:32:25.670
file that was provided.

00:32:25.670 --> 00:32:27.140
I'm going to go to
the APIs Console.

00:32:30.650 --> 00:32:34.090
And as before, I'm going to
copy my client ID and my

00:32:34.090 --> 00:32:35.340
client secret.

00:32:38.910 --> 00:32:42.170
This time I'm going to go to my
server and paste it in the

00:32:42.170 --> 00:32:43.420
provided file.

00:32:49.290 --> 00:33:03.450
I'm going to start by pasting
my client ID, and then paste

00:33:03.450 --> 00:33:04.700
my client secret.

00:33:20.580 --> 00:33:23.550
So let's try to run that sample
again and see what

00:33:23.550 --> 00:33:26.160
happens now that we've pasted
our credentials into the

00:33:26.160 --> 00:33:27.410
provided file.

00:33:34.130 --> 00:33:36.310
The first thing you will notice
is that, as we learned

00:33:36.310 --> 00:33:39.530
when we looked at the OAuth
Playground, your application

00:33:39.530 --> 00:33:42.750
makes a request to access data
on behalf of the end user.

00:33:42.750 --> 00:33:45.330
And the end user can grant
this access in a consent

00:33:45.330 --> 00:33:49.130
screen, which we see here.

00:33:49.130 --> 00:33:51.930
The consent screen shows data
for my application and is

00:33:51.930 --> 00:33:54.490
telling the user that my
application is requesting

00:33:54.490 --> 00:33:56.932
permission to know who
they are in Google.

00:33:59.530 --> 00:34:02.500
Once that request is granted--

00:34:02.500 --> 00:34:05.760
and as we saw when we played
with OAuth Playground, my

00:34:05.760 --> 00:34:08.350
application will be given an
access token that will

00:34:08.350 --> 00:34:13.070
continue to use when making
API calls on my behalf.

00:34:13.070 --> 00:34:16.469
When I use the Python Client
Library, I don't have to worry

00:34:16.469 --> 00:34:19.790
about implementing any of the
steps in the OAuth 2 protocol

00:34:19.790 --> 00:34:23.040
since those are handled
for me.

00:34:23.040 --> 00:34:24.980
Let's run this code again.

00:34:24.980 --> 00:34:27.190
The code, as we know, is
fetching all my public

00:34:27.190 --> 00:34:30.190
activities from Google+.

00:34:30.190 --> 00:34:32.469
You will see that my application
already knows who

00:34:32.469 --> 00:34:37.380
I am, and it's making API calls
using the same access

00:34:37.380 --> 00:34:42.130
token, which it can do until
I revoke it or it expires.

00:34:42.130 --> 00:34:45.139
Let's look at the code in
a little more detail.

00:34:45.139 --> 00:34:49.780
To make authenticated calls,
initiate an OAuth 2 flow with

00:34:49.780 --> 00:34:52.420
the functions provided
in the library.

00:34:52.420 --> 00:34:56.670
All we do is provide the scope
of the API we want to use,

00:34:56.670 --> 00:34:59.800
which we can easily obtain from
the documentation or the

00:34:59.800 --> 00:35:01.870
OAuth 2 playground.

00:35:01.870 --> 00:35:05.320
We're also specifying in the
code the location of the file

00:35:05.320 --> 00:35:08.310
that contains our credentials.

00:35:08.310 --> 00:35:13.200
To make calls to the RESTful API
using HTTP protocols, we

00:35:13.200 --> 00:35:18.750
can use the HTTP lib 2 library
to construct an HTTP object.

00:35:18.750 --> 00:35:22.300
Then we can call credentials
that authorize to modify my

00:35:22.300 --> 00:35:26.620
new HTTP object, so that it can
sign my request with OAuth

00:35:26.620 --> 00:35:29.260
2 credentials.

00:35:29.260 --> 00:35:31.790
And here's the beauty of
the client library.

00:35:31.790 --> 00:35:34.920
We can create a service object
that knows how to talk to the

00:35:34.920 --> 00:35:37.930
API by using the build
function in

00:35:37.930 --> 00:35:40.210
the Google API client.

00:35:40.210 --> 00:35:44.150
We pass the name of the API we
want to use and the version,

00:35:44.150 --> 00:35:48.330
as well as the authorized HTTP
object from the previous step.

00:35:50.850 --> 00:35:52.390
And we're almost there.

00:35:52.390 --> 00:35:55.470
The client library allows you
to access collections in the

00:35:55.470 --> 00:35:59.470
API by simply calling the
name of the collection.

00:35:59.470 --> 00:36:04.500
For the Google+ API, you can
call service.people to access

00:36:04.500 --> 00:36:06.730
the people collection.

00:36:06.730 --> 00:36:10.350
The collection object that is
returned has all the methods a

00:36:10.350 --> 00:36:12.080
collection understands.

00:36:12.080 --> 00:36:15.560
In this example, we're using the
get method for the people

00:36:15.560 --> 00:36:16.930
collection.

00:36:16.930 --> 00:36:19.700
We can also pass parameters
to the API call.

00:36:23.340 --> 00:36:27.410
Here we see how we constructed
another HTTP request object

00:36:27.410 --> 00:36:29.520
that queries the activities
collection

00:36:29.520 --> 00:36:32.180
and the list method.

00:36:32.180 --> 00:36:35.110
A call to
service.activities.list does

00:36:35.110 --> 00:36:38.270
not make the API call for me.

00:36:38.270 --> 00:36:42.270
It only instructs an HTTP
request object that contains

00:36:42.270 --> 00:36:46.970
in it all the information
required to make the API call.

00:36:46.970 --> 00:36:49.340
If you want to execute
the request, you

00:36:49.340 --> 00:36:52.010
can just call execute.

00:36:52.010 --> 00:36:55.860
Alternatively, you can gather a
set of HTTP request objects

00:36:55.860 --> 00:36:57.240
and execute them
asynchronously.

00:36:59.940 --> 00:37:04.030
When we execute this request,
the API will return a JSON

00:37:04.030 --> 00:37:07.410
response that will be converted
to a Python object.

00:37:07.410 --> 00:37:10.470
In this case, activities dock.

00:37:10.470 --> 00:37:12.790
Any error code returned
from the API

00:37:12.790 --> 00:37:14.650
will erase an exception.

00:37:14.650 --> 00:37:18.050
Again, all of these details
are handled by the client

00:37:18.050 --> 00:37:20.380
library for you.

00:37:20.380 --> 00:37:23.130
So we just saw how we can use
the client libraries for

00:37:23.130 --> 00:37:27.326
Google APIs to write and run
your code in minutes.

00:37:27.326 --> 00:37:31.670
In summary, we just learned
about some of the tools for

00:37:31.670 --> 00:37:33.270
Google Developers
to explore the

00:37:33.270 --> 00:37:35.040
functionalities of Google APIs.

00:37:35.040 --> 00:37:38.220
In particular, the Google
Developers Portal and the

00:37:38.220 --> 00:37:40.910
Google APIs Explorer.

00:37:40.910 --> 00:37:44.190
Then we learned tools that
can teach you about

00:37:44.190 --> 00:37:45.150
authentication.

00:37:45.150 --> 00:37:49.660
In particular, the OAuth
2 Playground.

00:37:49.660 --> 00:37:52.700
Then we saw how to obtain
credentials and identify your

00:37:52.700 --> 00:37:58.160
application for which we use
the Google APIs Console.

00:37:58.160 --> 00:38:01.810
We also saw how we can use the
console to manage access and

00:38:01.810 --> 00:38:04.700
traffic for your application.

00:38:04.700 --> 00:38:07.810
And last, we saw how you can
use the Google Client

00:38:07.810 --> 00:38:12.220
Libraries to write your
code and get started.

00:38:12.220 --> 00:38:15.330
For more information, you can
type the names of the tools we

00:38:15.330 --> 00:38:18.240
just covered in the Google
Developers Portal in the

00:38:18.240 --> 00:38:21.020
search box, or you can
go to the links

00:38:21.020 --> 00:38:23.000
provided on the screen.

00:38:23.000 --> 00:38:25.770
There are several sessions that
touch on how to build

00:38:25.770 --> 00:38:30.940
applications that use Google
APIs in Google I/O 2012.

00:38:30.940 --> 00:38:33.710
In particular, there's a session
that covers how to

00:38:33.710 --> 00:38:37.910
build JavaScript applications
that use Google APIs.

00:38:37.910 --> 00:38:42.000
In addition, there's a session
on how to optimize your code,

00:38:42.000 --> 00:38:46.290
a session on OAuth 2 and
identity and data access, and

00:38:46.290 --> 00:38:49.640
a session on building Android
applications.

00:38:49.640 --> 00:38:53.110
Check the schedule for Google
I/O for dates and times.

00:38:53.110 --> 00:38:55.210
And thank you very much, and
thank you for watching.

