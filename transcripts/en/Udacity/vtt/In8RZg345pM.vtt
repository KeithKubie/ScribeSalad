WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:03.230
Okay, so
we have seen that we want coherence, and

00:00:03.230 --> 00:00:04.689
now the question is how do we get it?

00:00:04.689 --> 00:00:08.510
So how do we make
caches become coherent?

00:00:08.510 --> 00:00:12.580
The first option is don't do caching,
but this is really bad for performance,

00:00:12.580 --> 00:00:14.780
so we will not seriously consider this.

00:00:14.780 --> 00:00:19.570
But if there are no caches, then all
of the accesses go to memory, and

00:00:19.570 --> 00:00:23.140
then writes to that memory will be
seen by the reads to that memory.

00:00:23.140 --> 00:00:28.070
And also, the order in which the memory
receives the writes is the order in

00:00:28.070 --> 00:00:32.540
which the writes will be seen by all the
cores, so the system will be coherent.

00:00:32.540 --> 00:00:37.410
The second option is if all cores
share the same level one cache,

00:00:37.410 --> 00:00:40.120
then the same argument for
coherence applies.

00:00:40.120 --> 00:00:44.830
The order of writes is the order
seen by this level one cache.

00:00:44.830 --> 00:00:48.380
And all of the accesses are going to
go to the same cache where they see

00:00:48.380 --> 00:00:50.130
the same version of the block.

00:00:50.130 --> 00:00:52.340
So the system will be coherent, but

00:00:52.340 --> 00:00:57.670
will still have really bad performance,
better than this, but not by much.

00:00:57.670 --> 00:01:00.960
Now we can try do do things
like having private caches,

00:01:00.960 --> 00:01:02.440
but make them write through.

00:01:02.440 --> 00:01:05.690
In that case, the memory's actually
seeing all the writes, but

00:01:05.690 --> 00:01:09.070
the problem is that these
caches are still allowed

00:01:09.070 --> 00:01:13.000
to cache data that has
only been read forever.

00:01:13.000 --> 00:01:17.380
So once we read the value, it doesn't
matter that all the other cores

00:01:17.380 --> 00:01:21.230
are writing their values through
to memory, because the cache that

00:01:21.230 --> 00:01:25.910
only reads will potentially see forever
the same failed value even after many,

00:01:25.910 --> 00:01:28.560
many writes have occurred,
and for a long time.

00:01:28.560 --> 00:01:31.950
So this is really not
a way to get coherence.

00:01:31.950 --> 00:01:36.990
Even with write-through caches, private
caches are not necessarily coherent.

00:01:36.990 --> 00:01:39.050
What we must do really,

00:01:39.050 --> 00:01:44.830
is to force reads made to one cache
to see the writes made in another.

00:01:44.830 --> 00:01:49.310
So we cannot allow caches to simply
provide a same value over and

00:01:49.310 --> 00:01:51.040
over once it's a cache hit.

00:01:51.040 --> 00:01:56.110
Somehow, once a write occurs
in one cache, another cache

00:01:56.110 --> 00:02:00.490
needs to eventually start returning
that value to its local processor.

00:02:01.510 --> 00:02:03.540
So how do we do that?

00:02:03.540 --> 00:02:08.370
One way is for every write to
be sent to all the other caches

00:02:08.370 --> 00:02:12.460
that might potentially have this block,
and they need to update their value.

00:02:12.460 --> 00:02:15.140
So pretty much I write to my cache.

00:02:15.140 --> 00:02:19.250
It's kind of like a write-through cache
in that it continues past the cache.

00:02:19.250 --> 00:02:23.800
But now what really happens to it is not
only does it get rid of backup memory,

00:02:23.800 --> 00:02:25.160
it also gets sent and

00:02:25.160 --> 00:02:29.570
seen by all the other caches,
which now take that new value.

00:02:29.570 --> 00:02:34.760
If that happens, then when I write,
other caches now have my new value,

00:02:34.760 --> 00:02:38.470
and then reads on those scores will
actually provide the same value.

00:02:38.470 --> 00:02:40.550
This is called write-update coherence,

00:02:40.550 --> 00:02:44.500
because writes updates all
of the other cache copies.

00:02:44.500 --> 00:02:49.200
The other approach for maintaining
coherence is for writes to prevent

00:02:50.260 --> 00:02:53.364
other copies of the block
from having hits.

00:02:53.364 --> 00:02:58.240
So after I write one cache,
all of the caches that

00:02:58.240 --> 00:03:03.100
had a copy of this block need to
behave like they're having a miss, or

00:03:03.100 --> 00:03:08.220
they need to behave like the block
is not valid in that cache.

00:03:08.220 --> 00:03:10.125
So this is called write-invalidate.

00:03:10.125 --> 00:03:13.790
A write will invalidate
all the other copies.

00:03:13.790 --> 00:03:16.410
Note that these are just
the two general approaches.

00:03:16.410 --> 00:03:20.190
We will be looking at several
write-invalidated coherence protocols,

00:03:20.190 --> 00:03:24.360
and also we will be considering
a write-update protocol.

00:03:24.360 --> 00:03:30.740
So this ensures, really, that reads
see the values produced by writes.

00:03:30.740 --> 00:03:35.260
So the coherence property two is
maintained by either this or this.

00:03:35.260 --> 00:03:37.930
So we need to pick one
of these two approaches

00:03:37.930 --> 00:03:40.260
to maintain coherence property two.

00:03:40.260 --> 00:03:44.320
For coherence property three, we need to
decide what's the order of writes and

00:03:44.320 --> 00:03:46.920
all the cores need to
see the same order.

00:03:46.920 --> 00:03:51.650
One way to enforce the same order of
writes being seen by all the cores

00:03:51.650 --> 00:03:56.330
is that all writes are broadcast on the
shared bus, and then the order in which

00:03:56.330 --> 00:04:00.880
they appear in this shared bus is the
order that should be seen by everybody.

00:04:00.880 --> 00:04:03.600
Coherence done in this
way is called snooping,

00:04:03.600 --> 00:04:07.010
because when writes
are broadcast on the bus,

00:04:07.010 --> 00:04:12.500
everybody snoops those writes in order
to tell what order they occurred on,

00:04:12.500 --> 00:04:15.940
and also to update or
invalidate their values in the cashes.

00:04:15.940 --> 00:04:19.209
Of course, the shared bus
can now become a bottleneck.

00:04:19.209 --> 00:04:23.890
The other approach is that each block
is assigned an ordering point, and

00:04:23.890 --> 00:04:27.440
different ordering points can
be used for different blocks.

00:04:27.440 --> 00:04:32.200
So that for each block, all accesses
are ordered by the same entity.

00:04:33.200 --> 00:04:37.250
But different blocks use different
entities, so they don't have contention.

00:04:37.250 --> 00:04:41.410
This ordering point is called
Directory when doing coherence.

00:04:41.410 --> 00:04:46.430
So this family of approaches is
called a Directory Based Coherence.

00:04:46.430 --> 00:04:49.450
And this directory both serves
as an ordering point for

00:04:49.450 --> 00:04:54.260
a block, and also figures out
who to update or invalidate.

00:04:54.260 --> 00:04:58.850
When multiple caches have a version of
the same block, an overwrite occurs.

00:04:58.850 --> 00:05:02.530
So among these two approaches,
we can also pick one.

00:05:02.530 --> 00:05:07.380
And indeed all four possibilities,
this and this, this and this, this and

00:05:07.380 --> 00:05:10.920
this, and this and
that, are all possible.

00:05:10.920 --> 00:05:14.644
So you can have write-update with
snooping, write-update with directory,

00:05:14.644 --> 00:05:18.332
write-invalidate with snooping,
write-invalidate with directory.

