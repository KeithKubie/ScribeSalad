WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.380
[MUSIC PLAYING]

00:00:07.630 --> 00:00:08.380
CHET HAASE: Hey.

00:00:08.380 --> 00:00:10.595
[CLAPPING]

00:00:10.595 --> 00:00:11.720
DAN SANDLER: Hey everybody.

00:00:11.720 --> 00:00:14.180
Welcome back to
What's New in Android.

00:00:14.180 --> 00:00:17.010
I'm Dan Sandler from
the System UI team.

00:00:17.010 --> 00:00:19.710
CHET HAASE: I'm Chet Haase
from the Android Toolkit team.

00:00:19.710 --> 00:00:21.290
ROMAIN GUY: And I'm
Romain Guy from--

00:00:21.290 --> 00:00:22.800
I still don't have
a name for my team.

00:00:22.800 --> 00:00:23.841
So from the Android team.

00:00:23.841 --> 00:00:25.790
[LAUGHTER]

00:00:25.790 --> 00:00:27.720
And you may remember
us from other talks,

00:00:27.720 --> 00:00:30.770
such as What's New
in Android 2017,

00:00:30.770 --> 00:00:34.880
What's New in Android 2016,
What's New in Android 2015,

00:00:34.880 --> 00:00:36.670
What's New in Android 2014.

00:00:36.670 --> 00:00:38.482
Not What's New in Android 2013.

00:00:38.482 --> 00:00:40.190
CHET HAASE: We don't
talk about that one.

00:00:40.190 --> 00:00:40.890
ROMAIN GUY: We don't
talk about that one.

00:00:40.890 --> 00:00:41.660
DAN SANDLER: You know,
that was the time

00:00:41.660 --> 00:00:43.370
that we had Jelly Bean
two years in a row.

00:00:43.370 --> 00:00:44.090
It was brilliant.

00:00:44.090 --> 00:00:45.923
We didn't have to redo
the logo or anything.

00:00:45.923 --> 00:00:47.630
[LAUGHTER]

00:00:47.630 --> 00:00:49.670
ROMAIN GUY: But now--

00:00:49.670 --> 00:00:51.120
CHET HAASE: What's
New in Android,

00:00:51.120 --> 00:00:53.780
what I like to call
the Android keynote.

00:00:53.780 --> 00:00:54.630
Nobody else does.

00:00:54.630 --> 00:00:56.270
But I like to call it that.

00:00:56.270 --> 00:00:59.310
Because this is where we talk to
you about all of the developer

00:00:59.310 --> 00:01:01.400
stuff going on in
the Android platform.

00:01:01.400 --> 00:01:06.740
In particular, let's talk
about Android P. Specifically,

00:01:06.740 --> 00:01:09.560
let's talk today about--

00:01:09.560 --> 00:01:10.790
oh, hang on.

00:01:10.790 --> 00:01:11.775
Android APIs.

00:01:11.775 --> 00:01:13.990
[LAUGHTER]

00:01:15.790 --> 00:01:18.486
ROMAIN GUY: All right, first
we'll start with distribution.

00:01:18.486 --> 00:01:20.610
You saw in the keynote we
introduced the dynamic ad

00:01:20.610 --> 00:01:21.834
bundles.

00:01:21.834 --> 00:01:23.250
[? Tor's ?] demo
was pretty clear.

00:01:23.250 --> 00:01:24.230
It's pretty easy for you.

00:01:24.230 --> 00:01:25.930
All you have to do is
click your different menu

00:01:25.930 --> 00:01:27.010
when you build your application.

00:01:27.010 --> 00:01:28.770
And we're going to
save you some space.

00:01:28.770 --> 00:01:31.030
It's going to be faster
and easier for your users

00:01:31.030 --> 00:01:32.260
to download your app.

00:01:32.260 --> 00:01:34.343
And I'm sure you have a
lot of questions about it.

00:01:34.343 --> 00:01:36.670
So we have a couple of
talks this afternoon,

00:01:36.670 --> 00:01:38.500
at 5:00 PM and 6:00 PM.

00:01:38.500 --> 00:01:41.560
Go there if you want answers,
because we don't have them.

00:01:41.560 --> 00:01:43.810
CHET HAASE: So you're going
to see a slide a whole lot

00:01:43.810 --> 00:01:45.435
like this through
the rest of the talk.

00:01:45.435 --> 00:01:47.020
I feel like the main
function we serve

00:01:47.020 --> 00:01:50.020
in this talk is to tell you
the other talks to go to.

00:01:50.020 --> 00:01:51.160
We're like the appendix.

00:01:51.160 --> 00:01:53.380
We're like the index for
the rest of the content.

00:01:53.380 --> 00:01:56.219
DAN SANDLER: I mean, we're
like obsolete, like vestigial.

00:01:56.219 --> 00:01:57.010
Is that what it is?

00:01:57.010 --> 00:01:58.325
CHET HAASE: I don't like
to think about that.

00:01:58.325 --> 00:01:58.690
ROMAIN GUY: Yeah.

00:01:58.690 --> 00:01:59.315
Let's be clear.

00:01:59.315 --> 00:02:02.320
A lot of people back at work
have done all the hard work.

00:02:02.320 --> 00:02:05.869
We just get to go on stage and
talk about their hard work.

00:02:05.869 --> 00:02:07.660
CHET HAASE: So speaking
of that, let's talk

00:02:07.660 --> 00:02:08.680
about Android Jetpack.

00:02:08.680 --> 00:02:11.950
We heard Steph talk about
this in the developer keynote.

00:02:11.950 --> 00:02:13.810
This is a set of
components, as well as

00:02:13.810 --> 00:02:16.820
guidance on how to build
better Android applications.

00:02:16.820 --> 00:02:18.760
All of you are familiar
with most of what

00:02:18.760 --> 00:02:20.860
is in Android Jetpack already.

00:02:20.860 --> 00:02:22.902
What we're doing is
adding to it over time

00:02:22.902 --> 00:02:24.860
with stuff that's going
to make it even better.

00:02:24.860 --> 00:02:26.590
And we're also
improving it over time.

00:02:26.590 --> 00:02:28.540
One of the major steps
that we're taking

00:02:28.540 --> 00:02:32.080
is what I like to think of
as a refactor, because it's

00:02:32.080 --> 00:02:33.280
a refactor.

00:02:33.280 --> 00:02:35.260
My favorite thing about
the support library

00:02:35.260 --> 00:02:39.290
is how the package names embed
the release number in them.

00:02:39.290 --> 00:02:43.510
So, for example, we
support things like v4.

00:02:43.510 --> 00:02:45.780
Actually we don't
support v4 anymore.

00:02:45.780 --> 00:02:48.580
We have a min SDK
of at least 14 now.

00:02:48.580 --> 00:02:50.010
But it's in the package name.

00:02:50.010 --> 00:02:51.260
Isn't that a little bit silly?

00:02:51.260 --> 00:02:52.509
So we're doing away with that.

00:02:52.509 --> 00:02:54.360
We're doing a whole lot
of tedious renaming.

00:02:54.360 --> 00:02:56.440
And we're also providing
tools to make it easier

00:02:56.440 --> 00:02:58.870
for you to do the similar
refactoring that you're

00:02:58.870 --> 00:03:00.790
going to need to do
in your application,

00:03:00.790 --> 00:03:03.100
as well as in Android Studio.

00:03:03.100 --> 00:03:05.890
Everything is being renamed
to something more appropriate

00:03:05.890 --> 00:03:07.990
called Androidx.

00:03:07.990 --> 00:03:10.340
If you want to know more
about the details of that,

00:03:10.340 --> 00:03:13.690
the renaming, as well as doing
more modular, more fine-grained

00:03:13.690 --> 00:03:16.570
splits to make sure that you
don't drag in too much stuff,

00:03:16.570 --> 00:03:17.260
go to the talk.

00:03:17.260 --> 00:03:19.180
Learn what's new in
Android Support Library.

00:03:19.180 --> 00:03:20.920
Also, there was an
article that was

00:03:20.920 --> 00:03:24.340
posted on the Android Developers
blog about a half hour ago.

00:03:24.340 --> 00:03:27.530
Check that out for more
of the details there.

00:03:27.530 --> 00:03:29.170
Let's talk about
Android Test, which

00:03:29.170 --> 00:03:32.620
is part of this new
Jetpack thing going on.

00:03:32.620 --> 00:03:35.360
Android Test is the
ATSL stuff, the Espresso

00:03:35.360 --> 00:03:38.110
stuff that hopefully you were
already using really good ways

00:03:38.110 --> 00:03:39.640
to test your application.

00:03:39.640 --> 00:03:42.430
Now, they provide first class
Kotlin support, as well as

00:03:42.430 --> 00:03:45.220
more elegant APIs for reducing
a lot of the boilerplate.

00:03:45.220 --> 00:03:46.660
Here's a simple example.

00:03:46.660 --> 00:03:48.250
We used to have a
way of asserting,

00:03:48.250 --> 00:03:50.932
which, A, was not
necessarily obvious

00:03:50.932 --> 00:03:52.390
in the parameters
you were passing.

00:03:52.390 --> 00:03:55.390
Also, unobvious in the
order of the parameters

00:03:55.390 --> 00:03:56.380
that you were passing.

00:03:56.380 --> 00:03:58.750
And then it would give you
an error message that also

00:03:58.750 --> 00:04:00.310
didn't really help very much.

00:04:00.310 --> 00:04:02.530
So we have something a
little more sensible now.

00:04:02.530 --> 00:04:04.420
You can assert that
it's actually working

00:04:04.420 --> 00:04:05.674
on the visible property.

00:04:05.674 --> 00:04:07.590
And the error message
gives you something more

00:04:07.590 --> 00:04:09.430
that you can work with
a little bit better.

00:04:09.430 --> 00:04:11.200
Go to the Frictionless
Android Testing

00:04:11.200 --> 00:04:13.870
talk for more information
about that stuff.

00:04:13.870 --> 00:04:16.450
Jetpack architecture is about
the architecture components

00:04:16.450 --> 00:04:18.550
that were announced
last year at I/O

00:04:18.550 --> 00:04:21.200
and then iterated with
feedback from the community,

00:04:21.200 --> 00:04:23.500
and finally went
1.0 in the fall.

00:04:23.500 --> 00:04:25.630
So we have the release
parts of those,

00:04:25.630 --> 00:04:28.330
which includes all the Lifecycle
stuff, and the ViewModel stuff,

00:04:28.330 --> 00:04:31.090
as well as the Room, the
persistent data model

00:04:31.090 --> 00:04:32.860
stuff, and LiveData.

00:04:32.860 --> 00:04:35.060
So hopefully you are
using that stuff already,

00:04:35.060 --> 00:04:36.900
at least in your
new applications.

00:04:36.900 --> 00:04:39.760
And what we also
have is recently we

00:04:39.760 --> 00:04:43.900
released the paging library for
doing asynchronous data paging

00:04:43.900 --> 00:04:44.830
into RecyclerView.

00:04:44.830 --> 00:04:47.170
That was alpha, then
beta, because that's

00:04:47.170 --> 00:04:48.130
how those things work.

00:04:48.130 --> 00:04:49.910
And now it's 1.0 this week.

00:04:49.910 --> 00:04:51.470
So please start using that.

00:04:51.470 --> 00:04:54.070
And we also talked in
the developer keynote

00:04:54.070 --> 00:04:56.860
about a couple of new things
that you should check out soon.

00:04:56.860 --> 00:04:58.810
WorkManager is
currently in preview.

00:04:58.810 --> 00:05:00.640
There's going to
be a talk about it.

00:05:00.640 --> 00:05:02.200
It's about job
scheduling, but job

00:05:02.200 --> 00:05:05.410
scheduling in a way where
we handle all the cases back

00:05:05.410 --> 00:05:07.619
in previous releases,
instead of you having

00:05:07.619 --> 00:05:09.160
to use specific
approaches, depending

00:05:09.160 --> 00:05:11.200
on what version and
device that you're on.

00:05:11.200 --> 00:05:12.250
Also, navigation.

00:05:12.250 --> 00:05:14.770
It turns out that up versus
back is a hard problem

00:05:14.770 --> 00:05:16.660
for applications to solve.

00:05:16.660 --> 00:05:18.002
We are making that much easier.

00:05:18.002 --> 00:05:19.460
And we're integrating
with the tool

00:05:19.460 --> 00:05:21.610
to make it even easier yet.

00:05:21.610 --> 00:05:23.050
So go to all these talks.

00:05:23.050 --> 00:05:24.550
There's an overview
talk, as well as

00:05:24.550 --> 00:05:28.060
specific talks on Navigation
Controller and WorkManager,

00:05:28.060 --> 00:05:30.355
and also a talk on
RecyclerView and Paging.

00:05:33.910 --> 00:05:34.420
Me?

00:05:34.420 --> 00:05:35.690
Again?

00:05:35.690 --> 00:05:37.570
ROMAIN GUY: It says
your name on the slide.

00:05:37.570 --> 00:05:39.220
CHET HAASE: I keep building
suspense into this thing.

00:05:39.220 --> 00:05:40.080
What's going to happen next?

00:05:40.080 --> 00:05:41.260
Who's he going to
hand the clicker to?

00:05:41.260 --> 00:05:41.810
It's still mine.

00:05:41.810 --> 00:05:42.400
DAN SANDLER: It's still you.

00:05:42.400 --> 00:05:43.025
CHET HAASE: OK.

00:05:43.025 --> 00:05:44.290
Let's talk about battery.

00:05:44.290 --> 00:05:46.690
This is one of the
ongoing efforts in Android

00:05:46.690 --> 00:05:49.030
to help the users,
because it turns out

00:05:49.030 --> 00:05:50.920
battery is really important.

00:05:50.920 --> 00:05:52.750
We're all power users.

00:05:52.750 --> 00:05:55.630
Unfortunately, we just
keep using the power.

00:05:55.630 --> 00:05:57.230
So what can we do about it?

00:05:57.230 --> 00:05:59.500
We can create these
app standby buckets.

00:05:59.500 --> 00:06:01.720
We're going to monitor
the usage of applications,

00:06:01.720 --> 00:06:04.120
and see how actively
the user is using it,

00:06:04.120 --> 00:06:06.820
and then make determinations
about how much access

00:06:06.820 --> 00:06:09.310
that application has
to ongoing things

00:06:09.310 --> 00:06:11.960
in the system which are going
to take up more battery.

00:06:11.960 --> 00:06:13.480
We also had background
restrictions

00:06:13.480 --> 00:06:16.760
that the user has the ability
to kick in in settings.

00:06:16.760 --> 00:06:19.360
So if an application
is behaving badly,

00:06:19.360 --> 00:06:22.350
let's say holding wake locks
for long periods of time,

00:06:22.350 --> 00:06:24.880
or waking up constantly,
or accessing services

00:06:24.880 --> 00:06:28.240
way more than they should
when it's not on a charger,

00:06:28.240 --> 00:06:32.050
then we'll note that and
expose that in settings.

00:06:32.050 --> 00:06:34.000
And then the user can
take some action on that

00:06:34.000 --> 00:06:35.680
if they deem that necessary.

00:06:35.680 --> 00:06:37.960
Go to the battery session
on Thursday morning

00:06:37.960 --> 00:06:39.661
to learn more of
the details there.

00:06:39.661 --> 00:06:42.160
ROMAIN GUY: So one of the things
that we've been focusing on

00:06:42.160 --> 00:06:43.960
with Android P is privacy.

00:06:43.960 --> 00:06:45.724
Maybe that's what it stands for.

00:06:45.724 --> 00:06:47.140
So one of the
things we've done is

00:06:47.140 --> 00:06:48.806
that when your app
is in the background,

00:06:48.806 --> 00:06:50.930
it doesn't have access to
the microphone anymore.

00:06:50.930 --> 00:06:52.960
It doesn't have access
to the camera anymore.

00:06:52.960 --> 00:06:56.170
And it doesn't have access
to the sensor kind of.

00:06:56.170 --> 00:06:59.140
So you won't receive the data
from the sensors automatically.

00:06:59.140 --> 00:07:00.850
You can manually pull
from the sensors,

00:07:00.850 --> 00:07:04.000
and you'll get batch
updates, but the best thing

00:07:04.000 --> 00:07:06.130
to do if you want to get
access to the sensor data

00:07:06.130 --> 00:07:08.659
is to keep a foreground
service running instead.

00:07:08.659 --> 00:07:09.575
So no more microphone.

00:07:09.575 --> 00:07:11.080
No more camera for you.

00:07:11.080 --> 00:07:13.510
I think I've heard in the past
that some apps were trying

00:07:13.510 --> 00:07:16.900
to stay alive in memory
by playing a white noise

00:07:16.900 --> 00:07:19.090
or keeping the microphone on.

00:07:19.090 --> 00:07:20.470
Don't do that anymore.

00:07:20.470 --> 00:07:22.060
It's not OK.

00:07:22.060 --> 00:07:25.395
Kotlin-- it's this little
thing we announced last year.

00:07:25.395 --> 00:07:26.020
So we are busy.

00:07:26.020 --> 00:07:28.060
We want to make it better
for all the Kotlin developers

00:07:28.060 --> 00:07:28.559
out there.

00:07:28.559 --> 00:07:30.268
I'm sure there's a
lot of you here today.

00:07:30.268 --> 00:07:31.892
So some of the things
we've been doing,

00:07:31.892 --> 00:07:34.570
the R team has been really busy
with D8, R8, and ART itself.

00:07:34.570 --> 00:07:37.111
They've been looking at the byte
code generated by the Kotlin

00:07:37.111 --> 00:07:37.720
compiler.

00:07:37.720 --> 00:07:39.540
They've analyzed some of
the byte code patterns that

00:07:39.540 --> 00:07:41.623
were different from the
ones generated by the Java

00:07:41.623 --> 00:07:43.210
programming language compiler.

00:07:43.210 --> 00:07:46.540
And they've been optimizing
for those patterns.

00:07:46.540 --> 00:07:49.840
We've also been adding a lot
of nullability annotations

00:07:49.840 --> 00:07:53.080
to our Java APIs, both
in the core libraries,

00:07:53.080 --> 00:07:55.390
so libcore, and our
support libraries

00:07:55.390 --> 00:07:59.020
to make it easier for you to use
the platform APIs when you're

00:07:59.020 --> 00:08:00.780
in Kotlin.

00:08:00.780 --> 00:08:03.580
And finally, we
launched on GitHub

00:08:03.580 --> 00:08:05.200
a new library
called Android KTX.

00:08:05.200 --> 00:08:09.190
It's a set of Kotlin extensions
for existing platform APIs.

00:08:09.190 --> 00:08:11.230
And the goal here is to
try to take advantage

00:08:11.230 --> 00:08:12.880
of some of the Kotlin
language features

00:08:12.880 --> 00:08:15.070
to make existing
APIs easier to use.

00:08:15.070 --> 00:08:17.380
They're already easier to
use just by using Kotlin,

00:08:17.380 --> 00:08:20.480
but with the extension
they get even better.

00:08:20.480 --> 00:08:21.970
And I want to thank
the community,

00:08:21.970 --> 00:08:24.670
because we've received
dozens of pull requests,

00:08:24.670 --> 00:08:27.272
and also bugs and feature
requests from you.

00:08:27.272 --> 00:08:28.730
And we've accepted
a bunch of them.

00:08:28.730 --> 00:08:29.660
So if you have
ideas, if you have

00:08:29.660 --> 00:08:31.701
things that you would like
to see in Android KTX,

00:08:31.701 --> 00:08:34.321
please go to GitHub, and
we'll take a look at your PR.

00:08:34.321 --> 00:08:36.070
And this is an example
of the kind of code

00:08:36.070 --> 00:08:38.002
you can write with KTX.

00:08:38.002 --> 00:08:39.460
If you want to
create a bitmap, you

00:08:39.460 --> 00:08:42.416
don't have to specify
its ARGB 8.8.8.8 anymore.

00:08:42.416 --> 00:08:44.290
You can call applyCanvas,
which automatically

00:08:44.290 --> 00:08:45.415
creates the canvas for you.

00:08:45.415 --> 00:08:46.490
It becomes this.

00:08:46.490 --> 00:08:49.300
And at the bottom you can see,
for instance, the destructuring

00:08:49.300 --> 00:08:51.640
assignment for color integer.

00:08:51.640 --> 00:08:54.070
So you don't have to do
any shifting or masking

00:08:54.070 --> 00:08:55.820
of the int into bytes.

00:08:55.820 --> 00:08:57.430
We'll take care of that for you.

00:08:57.430 --> 00:09:01.360
There is a talk by Jack Wharton
on Thursday at 10:30 AM.

00:09:01.360 --> 00:09:03.415
He's going to go through
most of the extensions.

00:09:03.415 --> 00:09:05.039
He's going to talk
about the philosophy

00:09:05.039 --> 00:09:07.120
behind the extensions,
how we write them, what

00:09:07.120 --> 00:09:10.210
are the kind of extensions that
we want to see in that library

00:09:10.210 --> 00:09:12.410
that we're not looking
for in that library.

00:09:12.410 --> 00:09:14.370
So before you do all
the work and send a PR,

00:09:14.370 --> 00:09:15.760
go attend that
talk to understand

00:09:15.760 --> 00:09:16.894
what we're looking for.

00:09:16.894 --> 00:09:19.060
CHET HAASE: We already
talked about the Android Test

00:09:19.060 --> 00:09:21.079
stuff that is part
of Jetpack earlier.

00:09:21.079 --> 00:09:22.870
That's probably a
better, more holistic way

00:09:22.870 --> 00:09:23.940
to test your application.

00:09:23.940 --> 00:09:26.110
But if there is a
specific situation

00:09:26.110 --> 00:09:28.300
in which you find it
necessary or helpful

00:09:28.300 --> 00:09:30.180
to mock the framework--

00:09:30.180 --> 00:09:32.740
and I don't mean ridicule it,
because that wouldn't be nice--

00:09:32.740 --> 00:09:36.194
then it is possible to do that
in easier ways now in Mockito.

00:09:36.194 --> 00:09:37.610
We are not changing
the framework,

00:09:37.610 --> 00:09:40.390
but we're actually integrating
changes into Mockito itself.

00:09:40.390 --> 00:09:42.730
So you can now
mock final methods.

00:09:42.730 --> 00:09:45.070
And soon you should be able
to mock static methods.

00:09:45.070 --> 00:09:47.038
[CLAPPING]

00:09:47.038 --> 00:09:49.498
[CHEERING]

00:09:51.184 --> 00:09:52.850
ROMAIN GUY: And Chet
is making that face

00:09:52.850 --> 00:09:54.380
because he doesn't
understand why

00:09:54.380 --> 00:09:57.086
that is so interesting to you.

00:09:57.086 --> 00:09:58.790
[LAUGHTER]

00:09:58.790 --> 00:10:01.820
CHET HAASE: And system
created objects like activity,

00:10:01.820 --> 00:10:02.540
eventually.

00:10:02.540 --> 00:10:05.690
Working on that internally,
but it should be on the way

00:10:05.690 --> 00:10:06.660
eventually.

00:10:06.660 --> 00:10:07.940
A background text measurement.

00:10:07.940 --> 00:10:09.689
This is part of a bunch
of smaller changes

00:10:09.689 --> 00:10:11.070
that we made in the text area.

00:10:11.070 --> 00:10:13.380
It turns out that measurement
is really expensive.

00:10:13.380 --> 00:10:15.200
So most applications do text.

00:10:15.200 --> 00:10:18.106
And I would bet that the text
operations in your application

00:10:18.106 --> 00:10:20.480
are some of the most expensive
going on in the UI thread,

00:10:20.480 --> 00:10:22.100
which can contribute to jank.

00:10:22.100 --> 00:10:24.170
Wouldn't it be nicer if
you could offload that

00:10:24.170 --> 00:10:26.960
to a background thread so
that by the time you actually

00:10:26.960 --> 00:10:28.910
need to render the
text, or perform

00:10:28.910 --> 00:10:31.730
those operations on the UI
thread, most of the hard work

00:10:31.730 --> 00:10:33.030
was done for you?

00:10:33.030 --> 00:10:35.690
So the observation
is that 80% to 90%

00:10:35.690 --> 00:10:38.090
of the operations that
are necessary for actually

00:10:38.090 --> 00:10:41.070
displaying text happen
in text measurement.

00:10:41.070 --> 00:10:44.300
Well, we've made it possible and
much easier to actually perform

00:10:44.300 --> 00:10:46.100
this as a background operation.

00:10:46.100 --> 00:10:48.890
So we have a class
called pre-computed text.

00:10:48.890 --> 00:10:50.120
And you can query that.

00:10:50.120 --> 00:10:52.250
And you can say, I want
you to pre-measure this.

00:10:52.250 --> 00:10:55.000
And then you can set that text
that's spannable on the text

00:10:55.000 --> 00:10:56.580
view later whenever you want.

00:10:56.580 --> 00:10:59.450
So you do it in background
threads, like this.

00:10:59.450 --> 00:11:00.680
You say create this thing.

00:11:00.680 --> 00:11:02.450
And then you can set
that on the text view

00:11:02.450 --> 00:11:03.783
later when you actually need it.

00:11:03.783 --> 00:11:05.210
Should be much faster.

00:11:05.210 --> 00:11:07.220
Magnifier is something
that if you're

00:11:07.220 --> 00:11:09.680
using the preview
releases you might see,

00:11:09.680 --> 00:11:13.760
if you select some text, it pops
up this little bar up above it.

00:11:13.760 --> 00:11:15.890
It makes it easier to
manipulate the cursor.

00:11:15.890 --> 00:11:18.140
That's really great for text,
but the other cool thing

00:11:18.140 --> 00:11:20.960
about it is that it's also
available for your applications

00:11:20.960 --> 00:11:22.490
for any other use case.

00:11:22.490 --> 00:11:24.110
So there's an API
that allows you

00:11:24.110 --> 00:11:26.640
to pop up this
magnifier for whatever

00:11:26.640 --> 00:11:28.020
happens to be in your view.

00:11:28.020 --> 00:11:30.020
So you can show this, and
dismiss it, and use it

00:11:30.020 --> 00:11:31.730
for your stuff as well.

00:11:31.730 --> 00:11:34.220
So core functionality that
we want in the system user

00:11:34.220 --> 00:11:34.970
interface.

00:11:34.970 --> 00:11:37.160
But also useful
APIs for developers

00:11:37.160 --> 00:11:38.944
to use for their own purposes.

00:11:38.944 --> 00:11:41.360
I don't know if you've worked
with your design department,

00:11:41.360 --> 00:11:44.460
and they've specified something
about text in your UI,

00:11:44.460 --> 00:11:47.540
and, OK, well, I want this
aligned this many dips away

00:11:47.540 --> 00:11:48.140
from the top.

00:11:48.140 --> 00:11:49.681
And I want the
baseline on the bottom

00:11:49.681 --> 00:11:51.350
this many dips away
from the bottom.

00:11:51.350 --> 00:11:54.350
And then you have this
interspersed vertical alignment

00:11:54.350 --> 00:11:55.297
stuff going on.

00:11:55.297 --> 00:11:57.380
And then you sort of puzzle
with this for a while.

00:11:57.380 --> 00:11:59.330
And you basically
futz with padding

00:11:59.330 --> 00:12:01.040
in all kinds of
different configurations

00:12:01.040 --> 00:12:03.680
to sort of get it to where
they wanted to get it.

00:12:03.680 --> 00:12:05.457
We have worked with
that and created

00:12:05.457 --> 00:12:07.790
some new attributes, and
methods, and properties for you

00:12:07.790 --> 00:12:10.050
to use that make
that much easier.

00:12:10.050 --> 00:12:12.740
So we allow you to just
pass us the information

00:12:12.740 --> 00:12:15.649
about the baseline
alignment calculations

00:12:15.649 --> 00:12:16.940
that you would like to perform.

00:12:16.940 --> 00:12:20.900
And then we'll futz with
padding on your behalf.

00:12:20.900 --> 00:12:21.700
Smart Linkify.

00:12:21.700 --> 00:12:25.940
I think of this as being
Linkify, but smarter.

00:12:25.940 --> 00:12:28.100
So we already have
the ability to ask

00:12:28.100 --> 00:12:30.740
for links in a block of
text, and it'll detect things

00:12:30.740 --> 00:12:32.720
like phone numbers
and addresses.

00:12:32.720 --> 00:12:34.970
But we also have the ability,
through machine learning

00:12:34.970 --> 00:12:37.310
models, and stuff that you've
seen through smart text

00:12:37.310 --> 00:12:40.220
selection, to detect
other entities.

00:12:40.220 --> 00:12:42.320
We can do the same
thing with Linkify.

00:12:42.320 --> 00:12:44.480
It takes a little bit
potentially longer.

00:12:44.480 --> 00:12:46.022
So you do this off thread.

00:12:46.022 --> 00:12:48.230
So you would basically
generate the links off thread,

00:12:48.230 --> 00:12:50.240
and then set it
on your text view

00:12:50.240 --> 00:12:53.270
later, using code
similar to this.

00:12:53.270 --> 00:12:56.600
There's a text talk
on Wednesday evening.

00:12:56.600 --> 00:12:58.610
So please go to that for
more details about all

00:12:58.610 --> 00:13:00.690
of this, as well as more.

00:13:00.690 --> 00:13:01.690
ROMAIN GUY: So location.

00:13:01.690 --> 00:13:04.530
Now you can take advantage
of a new package,

00:13:04.530 --> 00:13:06.720
android.net.wifi.rtt.

00:13:06.720 --> 00:13:10.040
It's the WiFi round
trip time API.

00:13:10.040 --> 00:13:12.220
It requires compatible
hardware on your phone.

00:13:12.220 --> 00:13:15.560
It also requires a
compatible access point.

00:13:15.560 --> 00:13:21.520
And it allows you to find
a precise location indoors

00:13:21.520 --> 00:13:23.330
for the user's device.

00:13:23.330 --> 00:13:26.570
You need to request the
Find Location permission.

00:13:26.570 --> 00:13:28.660
And you don't need to
connect to the access point.

00:13:28.660 --> 00:13:30.620
So if you're building
an application that

00:13:30.620 --> 00:13:33.530
requires locating the user
inside a big building,

00:13:33.530 --> 00:13:38.142
you can take advantage
of this API in Android P.

00:13:38.142 --> 00:13:40.100
CHET HAASE: Accessibility
has some improvements

00:13:40.100 --> 00:13:42.000
for navigation through the app.

00:13:42.000 --> 00:13:43.910
So it's easier
for you to declare

00:13:43.910 --> 00:13:45.380
these functional blocks.

00:13:45.380 --> 00:13:47.120
It makes it easier
for accessible users

00:13:47.120 --> 00:13:50.000
to understand how things are
being grouped on the screen.

00:13:50.000 --> 00:13:53.600
There's an important talk
on accessibility right now?

00:13:53.600 --> 00:13:55.710
No, that's tomorrow.

00:13:55.710 --> 00:13:56.210
OK.

00:13:56.210 --> 00:13:57.320
Hopefully it's tomorrow.

00:13:57.320 --> 00:13:58.486
I'm not sure that's correct.

00:13:58.486 --> 00:14:00.656
ROMAIN GUY: It's tomorrow
or 40 minutes ago.

00:14:00.656 --> 00:14:01.280
CHET HAASE: OK.

00:14:01.280 --> 00:14:01.670
All right.

00:14:01.670 --> 00:14:02.840
DAN SANDLER: It's on YouTube.

00:14:02.840 --> 00:14:03.798
CHET HAASE: Yes, it is.

00:14:03.798 --> 00:14:04.710
Eventually.

00:14:04.710 --> 00:14:05.210
Like now.

00:14:05.210 --> 00:14:05.390
Yeah.

00:14:05.390 --> 00:14:06.510
I think I got the day wrong.

00:14:06.510 --> 00:14:07.218
Sorry about that.

00:14:07.218 --> 00:14:07.929
It's now.

00:14:07.929 --> 00:14:09.470
If you're in the
wrong talk, I invite

00:14:09.470 --> 00:14:10.595
you to go to the other one.

00:14:10.595 --> 00:14:12.642
[LAUGHTER]

00:14:13.110 --> 00:14:14.110
ROMAIN GUY: Oh, my turn.

00:14:14.110 --> 00:14:15.125
Security.

00:14:15.125 --> 00:14:18.630
New API in Android P, the
Unified BiometricDialog.

00:14:18.630 --> 00:14:20.290
So we deprecated the
FingerprintManager

00:14:20.290 --> 00:14:22.837
because there are more ways
to authenticate yourself

00:14:22.837 --> 00:14:24.670
with your body than
just with a fingerprint.

00:14:24.670 --> 00:14:25.461
Could be your eyes.

00:14:25.461 --> 00:14:27.820
Could be whatever else that
device manufacturers will

00:14:27.820 --> 00:14:28.750
think of next.

00:14:28.750 --> 00:14:31.450
So now we have a single
UI for all devices

00:14:31.450 --> 00:14:33.850
and all means of authentication.

00:14:33.850 --> 00:14:36.715
We also have stronger
protections for private keys.

00:14:36.715 --> 00:14:38.340
And very important
in your application,

00:14:38.340 --> 00:14:40.801
if you're using the
API, Build.SERIAL,

00:14:40.801 --> 00:14:41.800
it doesn't work anymore.

00:14:41.800 --> 00:14:42.880
The API is still there.

00:14:42.880 --> 00:14:44.840
But it basically
returns bogus data.

00:14:44.840 --> 00:14:48.220
So you cannot rely
on it at all anymore.

00:14:48.220 --> 00:14:50.020
CHET HAASE: Various
changes in Enterprise.

00:14:50.020 --> 00:14:52.030
Just a couple of them
that are interesting.

00:14:52.030 --> 00:14:54.250
We made it easier to
work with work profile

00:14:54.250 --> 00:14:57.485
apps or different profile apps
by having these different tabs

00:14:57.485 --> 00:14:59.860
that you can associate with
them so they're not all mixed

00:14:59.860 --> 00:15:02.200
together, but you can actually
have these whole sections

00:15:02.200 --> 00:15:03.640
of these different profiles.

00:15:03.640 --> 00:15:07.800
Also, you're allowed to lock
packages to a specific task.

00:15:07.800 --> 00:15:11.740
You could have a launcher with
just a minimum set of a group

00:15:11.740 --> 00:15:13.240
or a single application.

00:15:13.240 --> 00:15:15.070
That works in combination
with the ability

00:15:15.070 --> 00:15:19.810
to have ephemeral users, which
now gives you kiosk mode.

00:15:19.810 --> 00:15:21.610
So you will no longer
have experiences

00:15:21.610 --> 00:15:24.070
like I had on a
recent flight, as you

00:15:24.070 --> 00:15:26.502
can see from my blurry
picture, where you see a movie

00:15:26.502 --> 00:15:28.960
and you wonder what operating
system is running under that.

00:15:28.960 --> 00:15:31.240
So you swipe from the
bottom of the screen.

00:15:31.240 --> 00:15:34.266
You see the ICS navigation bar.

00:15:34.266 --> 00:15:35.890
And then you press
on the recent tasks,

00:15:35.890 --> 00:15:38.320
and you swipe the movie
away, and you confuse

00:15:38.320 --> 00:15:39.744
the heck out of the system.

00:15:39.744 --> 00:15:41.410
ROMAIN GUY: I have
to admit, that's what

00:15:41.410 --> 00:15:44.690
I try every time I'm
on a plane these days.

00:15:44.690 --> 00:15:47.002
And it works a surprising
number of times.

00:15:47.002 --> 00:15:47.410
DAN SANDLER: Homework
for all of you.

00:15:47.410 --> 00:15:48.930
CHET HAASE: This is like
fun for Android engineers.

00:15:48.930 --> 00:15:49.785
This is what we do.

00:15:49.785 --> 00:15:51.160
ROMAIN GUY:
Hopefully this is not

00:15:51.160 --> 00:15:52.792
linked to the plane navigation.

00:15:52.792 --> 00:15:53.500
DAN SANDLER: Now?

00:15:53.500 --> 00:15:53.999
Is it OK?

00:15:53.999 --> 00:15:54.650
Can I talk now?

00:15:54.650 --> 00:15:54.790
Is that all right?

00:15:54.790 --> 00:15:55.400
CHET HAASE: Very briefly.

00:15:55.400 --> 00:15:56.620
DAN SANDLER: Very briefly.

00:15:56.620 --> 00:15:57.120
All right.

00:15:57.120 --> 00:15:59.530
Let's talk about actually a
lot of the system UI stuff

00:15:59.530 --> 00:16:02.380
typically gets shown at
one of the keynotes that

00:16:02.380 --> 00:16:03.760
precedes What's New in Android.

00:16:03.760 --> 00:16:05.260
So you've all seen a
lot of the great stuff

00:16:05.260 --> 00:16:06.100
that users are getting.

00:16:06.100 --> 00:16:07.390
I'm going to talk to you
about some of the stuff

00:16:07.390 --> 00:16:09.520
that as developers you
might be interested in.

00:16:09.520 --> 00:16:12.200
The first one is display
cutouts, a.k.a.--

00:16:12.200 --> 00:16:15.160
well, there are
other names for it.

00:16:15.160 --> 00:16:17.406
These are coming to the
ecosystem all over the place.

00:16:17.406 --> 00:16:20.030
And so as a developer, you need
to know where it's safe to draw

00:16:20.030 --> 00:16:21.190
and where it isn't.

00:16:21.190 --> 00:16:24.790
When you get your window insets
on viewWindowInset, something

00:16:24.790 --> 00:16:27.536
or other, you get
DisplayCutout object,

00:16:27.536 --> 00:16:29.410
which gives you all
kinds of interesting data

00:16:29.410 --> 00:16:29.890
about the cutout.

00:16:29.890 --> 00:16:31.264
But you're probably
going to want

00:16:31.264 --> 00:16:36.035
to use something called
windowLayoutInDisplayCutoutMode

00:16:36.035 --> 00:16:36.660
on your window.

00:16:36.660 --> 00:16:39.565
So there's the basic
way, which is, I never

00:16:39.565 --> 00:16:40.690
want to overlap the cutout.

00:16:40.690 --> 00:16:42.490
Just leave a black bar
at the top or the bottom.

00:16:42.490 --> 00:16:42.990
Whatever.

00:16:42.990 --> 00:16:44.830
I'm not all that interested.

00:16:44.830 --> 00:16:47.820
A little more advanced
would be display

00:16:47.820 --> 00:16:50.210
cutout mode default, which
is, if you were already

00:16:50.210 --> 00:16:51.910
going to clear the
status bar just fine,

00:16:51.910 --> 00:16:55.720
we'll let the app window draw
underneath the cutout as well.

00:16:55.720 --> 00:16:57.460
So you'll get the
nice action bar

00:16:57.460 --> 00:16:59.530
color extending
through the status bar

00:16:59.530 --> 00:17:02.350
and extending
underneath the cutout.

00:17:02.350 --> 00:17:04.630
Better still, or
more advanced still

00:17:04.630 --> 00:17:07.810
is shortEdges cutout
mode, which means

00:17:07.810 --> 00:17:10.839
essentially any time there's
a cutout on the short edges

00:17:10.839 --> 00:17:12.490
of the device, and
we're in portrait,

00:17:12.490 --> 00:17:14.440
I will just draw underneath.

00:17:14.440 --> 00:17:16.089
You don't have to
do anything special.

00:17:16.089 --> 00:17:17.710
And in that
situation you do need

00:17:17.710 --> 00:17:20.890
to look at the display cutout
and ask it for the safe insets.

00:17:20.890 --> 00:17:23.200
Essentially, well, OK,
I'm drawing everywhere.

00:17:23.200 --> 00:17:25.690
But you tell me what single
rectangle of the screen

00:17:25.690 --> 00:17:27.775
is safest to draw in.

00:17:27.775 --> 00:17:29.650
And then finally, the
cosmic version of this.

00:17:29.650 --> 00:17:31.600
You can do shortEdges,
but you can actually

00:17:31.600 --> 00:17:34.360
get the bounds of the
cutout as a region.

00:17:34.360 --> 00:17:37.090
So you will get the
exact set of rectangles

00:17:37.090 --> 00:17:38.920
that are unavailable
to you on the screen

00:17:38.920 --> 00:17:40.772
so you can display
UI in the corners

00:17:40.772 --> 00:17:41.980
if the corners are available.

00:17:41.980 --> 00:17:43.690
Or if there's a
corner cutout, you

00:17:43.690 --> 00:17:45.160
can move things
out of the way so

00:17:45.160 --> 00:17:47.150
that it's visible in the
center of the display.

00:17:47.150 --> 00:17:49.482
This is the most
advanced version of it.

00:17:49.482 --> 00:17:51.190
And you can put the
electrical tape away,

00:17:51.190 --> 00:17:53.260
because you can actually
simulate notches now

00:17:53.260 --> 00:17:54.820
in developer options
on your device.

00:17:57.580 --> 00:17:59.470
This is really, really exciting.

00:17:59.470 --> 00:18:02.140
Slices actually was what we
were calling it internally.

00:18:02.140 --> 00:18:04.292
And we liked it so
much we just kept it.

00:18:04.292 --> 00:18:06.250
You've seen Slices now
in a couple of keynotes.

00:18:06.250 --> 00:18:09.550
It's essentially something that
we've discovered and learned

00:18:09.550 --> 00:18:12.070
about on system UI and in
the toolkit over many years

00:18:12.070 --> 00:18:15.700
of dealing with remote views
for app widgets dealing

00:18:15.700 --> 00:18:16.540
with notifications.

00:18:16.540 --> 00:18:20.230
Essentially the problem of
getting content from your app

00:18:20.230 --> 00:18:21.740
into some other place.

00:18:21.740 --> 00:18:24.430
So Slices is our new
approach to remote content

00:18:24.430 --> 00:18:27.700
that you can actually use to
project UI into your own app,

00:18:27.700 --> 00:18:29.890
or into other apps
that support it.

00:18:29.890 --> 00:18:31.090
It's very structured.

00:18:31.090 --> 00:18:33.640
This is not sort of, here's a
canvas, or an absolute layout.

00:18:33.640 --> 00:18:34.930
Go nuts with it.

00:18:34.930 --> 00:18:37.360
We give you a
structure to fill out,

00:18:37.360 --> 00:18:39.850
and a whole bunch of very
flexible templates in which

00:18:39.850 --> 00:18:42.370
to populate that data
with some display

00:18:42.370 --> 00:18:45.190
hints so that the receiving end
of the slice, the slice host,

00:18:45.190 --> 00:18:47.560
kind of knows what
to do with it.

00:18:47.560 --> 00:18:48.520
These are interactive.

00:18:48.520 --> 00:18:49.395
These are updateable.

00:18:49.395 --> 00:18:51.640
This is meant to be
something that holds rich UI.

00:18:51.640 --> 00:18:54.370
Sliders, controls, live
information, possibly

00:18:54.370 --> 00:18:57.340
videos, things that
actually feel like real UI,

00:18:57.340 --> 00:18:59.770
as opposed to a snapshot
of something happening

00:18:59.770 --> 00:19:01.480
in a distant process somewhere.

00:19:01.480 --> 00:19:03.279
Slices are addressable
by content URI.

00:19:03.279 --> 00:19:05.320
And this is how they're
passed around the system,

00:19:05.320 --> 00:19:07.300
and how they're passed
along to app indexing

00:19:07.300 --> 00:19:11.530
to be shown in
context like search.

00:19:11.530 --> 00:19:13.670
And then finally,
Slices is entirely

00:19:13.670 --> 00:19:15.099
inside the support library.

00:19:15.099 --> 00:19:16.140
It's entirely in Jetpack.

00:19:16.140 --> 00:19:17.348
So it's backwards compatible.

00:19:17.348 --> 00:19:20.850
You can use Slices all
the way back to API 19.

00:19:20.850 --> 00:19:23.000
There's a great talk
about Slices tomorrow

00:19:23.000 --> 00:19:25.191
bright and early, building
interactive results

00:19:25.191 --> 00:19:25.940
for Google Search.

00:19:25.940 --> 00:19:28.314
Come to find out more about
how all this technology works

00:19:28.314 --> 00:19:30.590
and how you can build your own.

00:19:30.590 --> 00:19:32.420
Related to Slices is Actions.

00:19:32.420 --> 00:19:35.260
You can think of these as
shortcuts with parameters.

00:19:35.260 --> 00:19:37.320
Romain likes to think of
them as visible intent.

00:19:37.320 --> 00:19:39.860
This is essentially a
deep link into your app

00:19:39.860 --> 00:19:41.340
with some additional payload.

00:19:41.340 --> 00:19:43.040
It's not just a link to music.

00:19:43.040 --> 00:19:45.620
It's linked to the particular
album, or something like that.

00:19:45.620 --> 00:19:47.369
And you saw these as
well in the keynotes,

00:19:47.369 --> 00:19:50.810
showing up in a predictive
space inside our app launching

00:19:50.810 --> 00:19:54.410
experience, actions you
define in an actions XML

00:19:54.410 --> 00:19:57.019
file that goes into
your APK or app bundle.

00:19:57.019 --> 00:19:59.060
And that too can get
registered with app indexing

00:19:59.060 --> 00:20:02.000
so that search results
and predictive features

00:20:02.000 --> 00:20:03.680
can show those actions.

00:20:03.680 --> 00:20:05.320
And there's a talk
about this too,

00:20:05.320 --> 00:20:07.220
Thursday, slightly less
early in the morning.

00:20:07.220 --> 00:20:11.780
Integrating your Android apps
with the Google Assistant.

00:20:11.780 --> 00:20:12.660
Notifications.

00:20:12.660 --> 00:20:14.540
There was a lot of great
stuff about digital wellness

00:20:14.540 --> 00:20:16.760
and controlling notifications
that you saw in the keynote.

00:20:16.760 --> 00:20:19.426
And I'm very excited about it in
P. I'm going to talk about some

00:20:19.426 --> 00:20:21.950
of the developer stuff,
though, that we have in here.

00:20:21.950 --> 00:20:24.230
We asked users
what notifications

00:20:24.230 --> 00:20:25.520
are most important to them.

00:20:25.520 --> 00:20:26.510
Users love messages.

00:20:26.510 --> 00:20:30.530
So we focused our energy in
enhancing the messaging style

00:20:30.530 --> 00:20:31.280
API.

00:20:31.280 --> 00:20:32.900
You can do inline images now.

00:20:32.900 --> 00:20:35.960
You can do participant images,
and attach other metadata

00:20:35.960 --> 00:20:37.370
about the participant.

00:20:37.370 --> 00:20:40.850
And we finally now have
UI for smart reply,

00:20:40.850 --> 00:20:42.650
which we've had on
Android Wear for years.

00:20:42.650 --> 00:20:44.810
So when you use
RemoteInput.setChoices,

00:20:44.810 --> 00:20:47.330
those will now appear as chips
right in the notification

00:20:47.330 --> 00:20:49.850
so you can respond instantly
in the middle of a chat

00:20:49.850 --> 00:20:51.910
without leaving the
notification shade.

00:20:51.910 --> 00:20:54.180
And there's tons of
other stuff as usual.

00:20:54.180 --> 00:20:55.670
I had one other
slide that we added

00:20:55.670 --> 00:20:59.174
about 10 minutes ago to this
deck about notifications.

00:20:59.174 --> 00:21:00.590
And I'm just going
to let that sit

00:21:00.590 --> 00:21:03.755
on the screen for
a little while.

00:21:03.755 --> 00:21:05.762
[CLAPPING]

00:21:05.762 --> 00:21:07.720
So if you're doing
something in the background,

00:21:07.720 --> 00:21:09.040
the user still needs to know.

00:21:09.040 --> 00:21:12.640
But Android P does a much better
job of allowing notifications

00:21:12.640 --> 00:21:14.380
that you may
already have running

00:21:14.380 --> 00:21:16.220
testify to that
background activity,

00:21:16.220 --> 00:21:18.710
including things like
overlaying windows.

00:21:18.710 --> 00:21:21.197
So with that, talk about
the runtime, Romain.

00:21:21.197 --> 00:21:23.530
ROMAIN GUY: So probably one
of the most important things

00:21:23.530 --> 00:21:25.610
for you as an Android
developer is to understand

00:21:25.610 --> 00:21:26.720
our deprecation policy.

00:21:26.720 --> 00:21:28.810
It was announced
a few weeks ago.

00:21:28.810 --> 00:21:32.080
Soon we will require all
the applications to target

00:21:32.080 --> 00:21:33.555
some of the newest API levels.

00:21:33.555 --> 00:21:34.930
And we're doing
that to make sure

00:21:34.930 --> 00:21:37.867
that we can keep the
security level of Android

00:21:37.867 --> 00:21:39.700
as high as possible,
as well as performance,

00:21:39.700 --> 00:21:41.360
and a lot of other nice things.

00:21:41.360 --> 00:21:42.760
So what does it mean for you?

00:21:42.760 --> 00:21:45.190
As of August this
year, new applications

00:21:45.190 --> 00:21:48.930
published on the Play Store will
have to target API level 26.

00:21:48.930 --> 00:21:51.200
And as of November
this year, any update

00:21:51.200 --> 00:21:53.800
to an existing application that
you publish on the Play Store

00:21:53.800 --> 00:21:55.750
will have to target API 26.

00:21:55.750 --> 00:21:58.840
And you can expect those
numbers to go up over time.

00:21:58.840 --> 00:22:02.170
If you have native code
in your application,

00:22:02.170 --> 00:22:05.230
we've been supporting 32-bit
and 64-bit for a few years now.

00:22:05.230 --> 00:22:08.080
We will make 64-bit
APIs required

00:22:08.080 --> 00:22:10.000
as of August of next year.

00:22:10.000 --> 00:22:11.820
You'll still be able
to ship 32-bit support

00:22:11.820 --> 00:22:15.580
in your application, but we will
ask you to ship 64-bit as well.

00:22:15.580 --> 00:22:18.840
One of the reasons to ship
64-bit on 64-bit devices

00:22:18.840 --> 00:22:21.070
is that you get better
performance and much

00:22:21.070 --> 00:22:22.720
better code out of it.

00:22:22.720 --> 00:22:24.970
If you want to know more
about the deprecation policy,

00:22:24.970 --> 00:22:27.815
there is a talk on
Thursday afternoon.

00:22:27.815 --> 00:22:30.190
And I'm sure you'll have a
lot of questions for the folks

00:22:30.190 --> 00:22:32.680
there.

00:22:32.680 --> 00:22:33.910
App compatibility.

00:22:33.910 --> 00:22:36.260
If you've tried the
developer preview in P,

00:22:36.260 --> 00:22:38.010
you might have noticed
something different

00:22:38.010 --> 00:22:40.060
if you're one of those
naughty applications that

00:22:40.060 --> 00:22:41.850
uses some of our private APIs.

00:22:41.850 --> 00:22:44.340
On Android we have two types
of private APIs, the APIs that

00:22:44.340 --> 00:22:45.960
are actually marked private.

00:22:45.960 --> 00:22:48.510
And then there's this
weird @hide thing

00:22:48.510 --> 00:22:50.800
that we use in our source code.

00:22:50.800 --> 00:22:53.610
It's a Java Doc tag that
we process especially

00:22:53.610 --> 00:22:56.520
to indicate that this
is a public API for us.

00:22:56.520 --> 00:22:57.330
Not for you.

00:22:57.330 --> 00:22:58.670
Just for us.

00:22:58.670 --> 00:23:01.480
And we're a bit jealous because
a lot of you are using them.

00:23:01.480 --> 00:23:03.540
So from now on, a
lot of those APIs

00:23:03.540 --> 00:23:06.090
will trigger warnings
in one form or another.

00:23:06.090 --> 00:23:07.980
It might be toast,
or it might be logs

00:23:07.980 --> 00:23:09.420
when you make an illegal call.

00:23:09.420 --> 00:23:11.490
For some of these APIs
we need to hear from you

00:23:11.490 --> 00:23:14.070
that you need those APIs
for your application

00:23:14.070 --> 00:23:14.760
to keep working.

00:23:14.760 --> 00:23:16.290
Sometimes it's
just an oversight.

00:23:16.290 --> 00:23:17.580
We didn't make the API public.

00:23:17.580 --> 00:23:19.470
It's just because we
didn't think about it.

00:23:19.470 --> 00:23:21.144
So please go to
this URL, and let

00:23:21.144 --> 00:23:22.560
us know if there's
an API that you

00:23:22.560 --> 00:23:24.270
think should be made public.

00:23:24.270 --> 00:23:25.020
We might say yes.

00:23:25.020 --> 00:23:27.210
We might also say no.

00:23:27.210 --> 00:23:28.739
We have three types of lists.

00:23:28.739 --> 00:23:30.280
I won't go into too
much detail here.

00:23:30.280 --> 00:23:32.400
But basically, if an API
falls into the blacklist,

00:23:32.400 --> 00:23:34.370
you will not be able
to call it ever.

00:23:34.370 --> 00:23:36.870
I'm not sure if we have anything
in the blacklist right now.

00:23:36.870 --> 00:23:38.620
But those will evolve over time.

00:23:38.620 --> 00:23:40.370
So, again, let us know
what APIs you need.

00:23:40.370 --> 00:23:42.411
CHET HAASE: This is one
of the important reasons.

00:23:42.411 --> 00:23:43.662
This is why we ship previews.

00:23:43.662 --> 00:23:45.870
We need you to go out there
and try your applications

00:23:45.870 --> 00:23:47.700
on the previews,
because this is the time

00:23:47.700 --> 00:23:49.980
to find out when there's
problems that either you

00:23:49.980 --> 00:23:52.031
can fix before the real
release is out there,

00:23:52.031 --> 00:23:54.030
or you can let us know
if it's a problem that we

00:23:54.030 --> 00:23:55.464
need to work on instead.

00:23:55.464 --> 00:23:56.880
ROMAIN GUY: And
that's Chet trying

00:23:56.880 --> 00:23:59.670
to increase his engagement
with his podcast.

00:23:59.670 --> 00:24:02.355
So there's this podcast
called ADB, Android Developer

00:24:02.355 --> 00:24:02.855
Backstage.

00:24:02.855 --> 00:24:05.640
And in episode
89, they had-- who

00:24:05.640 --> 00:24:07.080
did you have in the episode?

00:24:07.080 --> 00:24:07.920
CHET HAASE: Brian Carlstrom.

00:24:07.920 --> 00:24:09.086
ROMAIN GUY: Brian Carlstrom.

00:24:09.086 --> 00:24:11.290
And they talked about this
app compatibility issue,

00:24:11.290 --> 00:24:12.780
and what it means for you.

00:24:12.780 --> 00:24:13.950
So go listen to it.

00:24:13.950 --> 00:24:15.780
NDK.

00:24:15.780 --> 00:24:18.000
The release 17 of
the NDK brings a lot

00:24:18.000 --> 00:24:19.879
of very interesting things.

00:24:19.879 --> 00:24:21.420
So, first of all,
the neural networks

00:24:21.420 --> 00:24:24.000
APIs that were part
of API level 27.

00:24:24.000 --> 00:24:27.990
We also have a new shared memory
API if you do a lot of JNI.

00:24:27.990 --> 00:24:29.900
More importantly, we
have finally ASAN,

00:24:29.900 --> 00:24:32.850
the address sanitizer to
make sure your code doesn't

00:24:32.850 --> 00:24:34.210
scribble all over the memory.

00:24:34.210 --> 00:24:36.460
Now you don't need a rooted
device anymore to use it.

00:24:36.460 --> 00:24:38.400
And we also have an
undefined behavior sanitizer.

00:24:38.400 --> 00:24:40.650
It can be very difficult to
detect undefined behaviors

00:24:40.650 --> 00:24:42.059
in your C or C++ code.

00:24:42.059 --> 00:24:43.350
So now there's a tool for that.

00:24:43.350 --> 00:24:46.840
We finally removed support
for the deprecated APIs.

00:24:46.840 --> 00:24:51.030
So if you still use ARMv5 or
MIPS, MIPS 32-bit or 64-bit,

00:24:51.030 --> 00:24:51.870
support is gone.

00:24:51.870 --> 00:24:54.330
You should not be
shipping those anymore.

00:24:54.330 --> 00:24:58.300
In the upcoming release,
release 18, we will remove GCC.

00:24:58.300 --> 00:25:01.080
So the GCC compiler was
deprecated last year.

00:25:01.080 --> 00:25:03.520
Now everything is compiled
with Clang in the NDK.

00:25:03.520 --> 00:25:05.250
We think we gave enough time.

00:25:05.250 --> 00:25:06.740
So GCC is going away.

00:25:06.740 --> 00:25:09.135
So if you're still
using it, maybe you

00:25:09.135 --> 00:25:10.260
should not be in this talk.

00:25:10.260 --> 00:25:11.426
You should go fix your code.

00:25:11.426 --> 00:25:13.300
[LAUGHTER]

00:25:13.300 --> 00:25:16.590
And finally, we added support
for the simpleperf CPU

00:25:16.590 --> 00:25:17.220
profiler.

00:25:17.220 --> 00:25:20.070
And we also have support
in Android Studio

00:25:20.070 --> 00:25:21.930
for native profiling.

00:25:21.930 --> 00:25:24.660
So you don't even have to
type anything in the terminal.

00:25:24.660 --> 00:25:26.520
Graphics and media.

00:25:26.520 --> 00:25:28.627
The camera APIs are
getting better and better.

00:25:28.627 --> 00:25:30.960
We've added a lot of things
that we were using ourselves

00:25:30.960 --> 00:25:32.850
in the camera applications.

00:25:32.850 --> 00:25:35.460
For instance, we give you
access to the timestamps

00:25:35.460 --> 00:25:37.139
of the optical
image stabilization.

00:25:37.139 --> 00:25:39.180
So if you want to build
the kind of stabilization

00:25:39.180 --> 00:25:43.095
we've built in the video
recording part of the camera

00:25:43.095 --> 00:25:45.785
application, now you can.

00:25:45.785 --> 00:25:47.390
If your app is doing
a lot of selfies

00:25:47.390 --> 00:25:49.140
and using the
display as a flash,

00:25:49.140 --> 00:25:50.598
you can tell the
camera that you're

00:25:50.598 --> 00:25:53.610
doing that so you can adapt
the exposure accordingly.

00:25:53.610 --> 00:25:56.220
We have support for USB cameras.

00:25:56.220 --> 00:25:58.920
I haven't seen any use for
it, but I've heard some of you

00:25:58.920 --> 00:25:59.550
ask about it.

00:25:59.550 --> 00:26:01.030
So now it's available.

00:26:01.030 --> 00:26:02.240
Multi-camera support.

00:26:02.240 --> 00:26:04.620
There are some phones
coming out out there

00:26:04.620 --> 00:26:06.720
with multiple cameras in
the back, or in the front

00:26:06.720 --> 00:26:07.800
I suppose.

00:26:07.800 --> 00:26:10.380
And now we can expose them as
a logical camera that contains

00:26:10.380 --> 00:26:13.170
more than one stream of data.

00:26:13.170 --> 00:26:14.280
ImageDecoder.

00:26:14.280 --> 00:26:18.140
I'm sure a lot of you are
familiar with BitmapFactory.

00:26:18.140 --> 00:26:20.600
And if you're not fond
of that API, trust me,

00:26:20.600 --> 00:26:21.542
we're not either.

00:26:21.542 --> 00:26:23.250
So there's a new one
called ImageDecoder.

00:26:23.250 --> 00:26:26.730
It's part of Android P. The idea
is to make it not only easier

00:26:26.730 --> 00:26:30.510
to decode images, but also
to make it possible to decode

00:26:30.510 --> 00:26:31.460
animated images.

00:26:31.460 --> 00:26:34.770
So ImageDecoder can decode
bitmaps, but also drawables,

00:26:34.770 --> 00:26:36.907
including animated drawables.

00:26:36.907 --> 00:26:39.240
CHET HAASE: There's this new
thing called animated GIFs.

00:26:39.240 --> 00:26:39.781
I don't know.

00:26:39.781 --> 00:26:40.965
All the kids are using them.

00:26:40.965 --> 00:26:43.170
It's possible to
actually load those now.

00:26:43.170 --> 00:26:44.200
ROMAIN GUY: So there
are a few concepts

00:26:44.200 --> 00:26:45.980
that you have to learn when
you learn ImageDecoder.

00:26:45.980 --> 00:26:47.710
And we're going to go
through them in an example.

00:26:47.710 --> 00:26:48.890
So we have the
concept of the source.

00:26:48.890 --> 00:26:50.640
We have the concept
of the post processor,

00:26:50.640 --> 00:26:52.140
and finally, the
header listener.

00:26:52.140 --> 00:26:54.060
So this is what
the API looks like.

00:26:54.060 --> 00:26:55.560
First, you have to
call createSource

00:26:55.560 --> 00:26:56.495
on the ImageDecoder.

00:26:56.495 --> 00:26:57.620
The source can be an asset.

00:26:57.620 --> 00:26:58.869
It could be a file descriptor.

00:26:58.869 --> 00:27:00.390
It can be many different things.

00:27:00.390 --> 00:27:02.520
And the goal here is that
once you create a source,

00:27:02.520 --> 00:27:05.820
you can decode multiple
images from the same source.

00:27:05.820 --> 00:27:08.370
This is particularly useful if
you want to build thumbnails.

00:27:08.370 --> 00:27:11.430
You can decode the same source
once at high resolution,

00:27:11.430 --> 00:27:14.712
once at lower resolution, or
even intermediate resolutions.

00:27:14.712 --> 00:27:17.430
And that can be done from
multiple worker threads.

00:27:17.430 --> 00:27:19.540
Then you can call decodeBitmap.

00:27:19.540 --> 00:27:20.404
You pass the source.

00:27:20.404 --> 00:27:22.320
And you can optionally
pass a header listener.

00:27:22.320 --> 00:27:25.070
So the header listener,
we have a lambda.

00:27:25.070 --> 00:27:27.000
It gives you back
the decoder itself,

00:27:27.000 --> 00:27:30.780
the metadata about the
image and the source.

00:27:30.780 --> 00:27:32.252
And it's inside
the header listener

00:27:32.252 --> 00:27:33.460
that you can set the options.

00:27:33.460 --> 00:27:35.501
So in BitmapFactory you
had bitmapfactory.options

00:27:35.501 --> 00:27:37.330
that you had to
pass through Decode.

00:27:37.330 --> 00:27:40.541
Here you have to wait for the
header listener to be invoked.

00:27:40.541 --> 00:27:42.040
CHET HAASE: We
should point out too,

00:27:42.040 --> 00:27:43.420
that set target
size, that's kind

00:27:43.420 --> 00:27:45.550
of a fundamental difference
where the old bitmap--

00:27:45.550 --> 00:27:46.380
DAN SANDLER: It's
up there for them.

00:27:46.380 --> 00:27:46.480
CHET HAASE: No.

00:27:46.480 --> 00:27:46.980
I know.

00:27:46.980 --> 00:27:47.537
I see that.

00:27:47.537 --> 00:27:48.370
It's right there it.

00:27:48.370 --> 00:27:50.559
[INTERPOSING VOICES]

00:27:50.559 --> 00:27:52.100
CHET HAASE: That's
a huge difference.

00:27:52.100 --> 00:27:54.190
Like before, if you wanted
the right target size,

00:27:54.190 --> 00:27:55.440
you needed to work with, what?

00:27:55.440 --> 00:27:56.290
In density?

00:27:56.290 --> 00:27:57.470
As well as?

00:27:57.470 --> 00:27:59.380
ROMAIN GUY: In sample
size, in density,

00:27:59.380 --> 00:28:00.610
and do a lot of trickery.

00:28:00.610 --> 00:28:01.930
CHET HAASE: We didn't know
how they worked either.

00:28:01.930 --> 00:28:02.290
ROMAIN GUY: Yeah.

00:28:02.290 --> 00:28:02.789
[LAUGHTER]

00:28:02.789 --> 00:28:04.262
CHET HAASE: So a lot easier now.

00:28:04.262 --> 00:28:04.970
ROMAIN GUY: Yeah.

00:28:04.970 --> 00:28:07.986
Usually our answer
was, figure it out.

00:28:07.986 --> 00:28:09.490
Anyways, so now you
can just tell us

00:28:09.490 --> 00:28:11.114
what size you want
the bitmap to be in.

00:28:11.114 --> 00:28:13.480
And we'll take care
of it, finally.

00:28:13.480 --> 00:28:15.220
And you can also set
the post processor.

00:28:15.220 --> 00:28:16.735
So the post processor
is something

00:28:16.735 --> 00:28:17.740
with a simple interface.

00:28:17.740 --> 00:28:20.115
It gives you a canvas so you
can draw on the bitmap right

00:28:20.115 --> 00:28:24.220
after it's decoded so you can
add a header, like your title,

00:28:24.220 --> 00:28:26.151
or some metadata on it.

00:28:26.151 --> 00:28:26.650
Media.

00:28:26.650 --> 00:28:30.070
We are adding support in
the platform for the HDR

00:28:30.070 --> 00:28:32.740
profile of VP9 so you
can play HDR videos

00:28:32.740 --> 00:28:33.850
in your applications.

00:28:33.850 --> 00:28:35.849
YouTube was doing it, but
they had their own way

00:28:35.849 --> 00:28:37.860
of decoding videos.

00:28:37.860 --> 00:28:40.480
If you own a device that
doesn't support HDR,

00:28:40.480 --> 00:28:42.760
the playback will be in
low dynamic range instead.

00:28:42.760 --> 00:28:45.670
But on a device that's
capable, like a Pixel 2,

00:28:45.670 --> 00:28:49.480
you will be able to see the
HDR stream in all its glory.

00:28:49.480 --> 00:28:51.904
We're also adding
support, and bear with me,

00:28:51.904 --> 00:28:53.320
cause it's a little
bit confusing,

00:28:53.320 --> 00:28:55.330
a format called HEIF.

00:28:55.330 --> 00:28:55.970
Yeah.

00:28:55.970 --> 00:28:57.310
It rolls off the tongue.

00:28:57.310 --> 00:28:59.270
The High Efficiency
Image Format.

00:28:59.270 --> 00:29:03.790
So it's based on HEVC,
which was also called H.265.

00:29:03.790 --> 00:29:06.900
And the filename extension
is commonly HEIC.

00:29:06.900 --> 00:29:09.469
I don't know why they
used different letters.

00:29:09.469 --> 00:29:10.510
But that's what they did.

00:29:10.510 --> 00:29:11.830
So we have to deal with it.

00:29:11.830 --> 00:29:13.270
So it is a container.

00:29:13.270 --> 00:29:14.870
And it can store
multiple images.

00:29:14.870 --> 00:29:18.850
So you can use it to store
a single image with higher

00:29:18.850 --> 00:29:22.025
quality and higher compression
ratios than JPEG, for instance.

00:29:22.025 --> 00:29:23.500
JPEG is a lot easier to say.

00:29:23.500 --> 00:29:25.476
I like JPEG.

00:29:25.476 --> 00:29:27.100
But you can also
sew multiple images

00:29:27.100 --> 00:29:29.530
if you want animated
images or short movies.

00:29:29.530 --> 00:29:31.030
This is part of the
support library,

00:29:31.030 --> 00:29:32.920
or, I guess, Jetpack now.

00:29:32.920 --> 00:29:35.940
And this is not part
of the compressed API

00:29:35.940 --> 00:29:36.940
that you find on bitmap.

00:29:36.940 --> 00:29:38.660
Because it's a container,
it works differently.

00:29:38.660 --> 00:29:39.560
So this is what it looks like.

00:29:39.560 --> 00:29:40.450
You have to create a builder.

00:29:40.450 --> 00:29:41.866
You have to tell
us the path where

00:29:41.866 --> 00:29:43.033
you want to output the file.

00:29:43.033 --> 00:29:44.699
You have to give us
in advance the width

00:29:44.699 --> 00:29:45.910
and the height of the image.

00:29:45.910 --> 00:29:48.035
And the source of the image
can come from a bitmap.

00:29:48.035 --> 00:29:49.797
But it can also
come from a surface.

00:29:49.797 --> 00:29:51.630
So you don't necessarily
have, for instance,

00:29:51.630 --> 00:29:54.620
if you're doing GR rendering, or
if you're doing video playback,

00:29:54.620 --> 00:29:56.470
you can include that
directly as an image.

00:29:56.470 --> 00:29:58.960
You don't have to go through
an intermediate bitmap.

00:29:58.960 --> 00:30:01.070
And then when you
call writer to choose,

00:30:01.070 --> 00:30:02.281
you can add multiple bitmaps.

00:30:02.281 --> 00:30:03.780
In this case, we're
adding only one.

00:30:03.780 --> 00:30:05.650
And when you call
stop, we write it out.

00:30:05.650 --> 00:30:07.066
CHET HAASE: I
should point out too

00:30:07.066 --> 00:30:10.070
that even though it's spelled
HEIC, it's pronounced GIF.

00:30:10.070 --> 00:30:11.134
[LAUGHTER]

00:30:11.134 --> 00:30:11.944
All right.

00:30:11.944 --> 00:30:12.610
DAN SANDLER: Go.

00:30:14.520 --> 00:30:16.270
ROMAIN GUY: What are
you still doing here?

00:30:19.630 --> 00:30:20.890
Vulkan.

00:30:20.890 --> 00:30:23.080
So this is the slide
that I'm excited about.

00:30:23.080 --> 00:30:24.830
Very few of you will be.

00:30:24.830 --> 00:30:27.840
And I'm sure you will be super
excited by things like subgroup

00:30:27.840 --> 00:30:31.510
ops and YCrCb formats.

00:30:31.510 --> 00:30:34.819
More seriously,
anybody who's building

00:30:34.819 --> 00:30:37.360
middleware, for instance, the
Unity engine, the Orion engine,

00:30:37.360 --> 00:30:39.030
or if you're building
games, Vulkan

00:30:39.030 --> 00:30:40.960
is a low level graphics
API that gives you

00:30:40.960 --> 00:30:43.720
a lot more control over the GPU
so you get higher performance

00:30:43.720 --> 00:30:44.860
code.

00:30:44.860 --> 00:30:47.900
And Vulkan 1.1 adds
new capabilities that

00:30:47.900 --> 00:30:49.100
were not possible in OpenGL.

00:30:49.100 --> 00:30:51.460
But it also closes
the gap with OpenGL.

00:30:51.460 --> 00:30:54.340
So, for instance, the
support of protected content.

00:30:54.340 --> 00:30:57.220
We were not able to play back
protected content in Vulkan

00:30:57.220 --> 00:30:57.720
before.

00:30:57.720 --> 00:31:00.820
So that will unlock a lot of
things, like video players,

00:31:00.820 --> 00:31:02.640
for instance.

00:31:02.640 --> 00:31:04.190
Neural networks APIs.

00:31:04.190 --> 00:31:07.420
They are not technically part of
P. I mean, they are part of P,

00:31:07.420 --> 00:31:09.670
but we announced
them in API level 27.

00:31:09.670 --> 00:31:10.840
You might have missed that.

00:31:10.840 --> 00:31:13.720
It's a C API that's designed
for machine learning.

00:31:13.720 --> 00:31:15.560
It's also a fairly
low level API.

00:31:15.560 --> 00:31:18.460
It's meant for basically
playback of trained models.

00:31:18.460 --> 00:31:20.950
So things like TensorFlow
are built on top

00:31:20.950 --> 00:31:22.270
of your neural network API.

00:31:22.270 --> 00:31:24.880
So you would use TensorFlow
to do all the learning.

00:31:24.880 --> 00:31:27.060
And the neural network
APIs can do basically

00:31:27.060 --> 00:31:29.410
the inference on device.

00:31:29.410 --> 00:31:32.380
The interesting thing is that
we're also unlocking the access

00:31:32.380 --> 00:31:34.900
to the DSP that
we use on Pixel 2

00:31:34.900 --> 00:31:37.660
so you can get hardware
accelerated machine learning

00:31:37.660 --> 00:31:39.930
effectively on select devices.

00:31:39.930 --> 00:31:41.890
ARCore you just saw in
the developer keynote.

00:31:41.890 --> 00:31:44.620
A couple months ago we
introduced ARCore 1.0.

00:31:44.620 --> 00:31:47.060
And they just
announced ARCore 1.2.

00:31:47.060 --> 00:31:50.470
This takes care of tracking
things in the real world.

00:31:50.470 --> 00:31:52.915
The problem is that you had
to write a lot of OpenGL code.

00:31:52.915 --> 00:31:54.520
And it's not always pleasant.

00:31:54.520 --> 00:31:55.990
So to makes your
life easier, we're

00:31:55.990 --> 00:31:58.150
introducing support
in the emulator.

00:31:58.150 --> 00:32:01.540
So when you create an AVD, you
can specify a virtual camera

00:32:01.540 --> 00:32:04.500
stream for the back camera,
and you get the full 3D scene.

00:32:04.500 --> 00:32:08.830
And it works in any view that
displays the camera stream.

00:32:08.830 --> 00:32:10.450
And using the keyboard
and the mouse,

00:32:10.450 --> 00:32:12.820
you can just navigate
around the UI.

00:32:12.820 --> 00:32:14.780
You even get patterns
on that fake TV screen

00:32:14.780 --> 00:32:16.600
so you can do image
recognition and pattern

00:32:16.600 --> 00:32:17.940
tracking, that kind of stuff.

00:32:17.940 --> 00:32:19.600
It's available today.

00:32:19.600 --> 00:32:20.750
Also we have Sceneform.

00:32:20.750 --> 00:32:22.890
So they already talked
about it in the dev keynote.

00:32:22.890 --> 00:32:24.537
I won't talk about it too much.

00:32:24.537 --> 00:32:26.620
I will only say, this is
what I've been working on

00:32:26.620 --> 00:32:27.440
for the past few months.

00:32:27.440 --> 00:32:29.140
So I still don't have a
name, because we did that

00:32:29.140 --> 00:32:29.640
to Daydream.

00:32:29.640 --> 00:32:31.726
But anyway, that's
what I was up to.

00:32:31.726 --> 00:32:33.610
And if you want to know
more about Sceneform,

00:32:33.610 --> 00:32:36.640
there is a talk tomorrow
afternoon at 5:30 PM.

00:32:36.640 --> 00:32:38.770
And we're going to talk
about the underlying tech

00:32:38.770 --> 00:32:40.540
and how to use the API.

00:32:40.540 --> 00:32:44.674
And finally, Chrome
OS on Pixelbook,

00:32:44.674 --> 00:32:46.090
you can now run
Linux applications

00:32:46.090 --> 00:32:47.030
on your Chromebook.

00:32:47.030 --> 00:32:49.829
And in particular, you
can run Android Studio.

00:32:49.829 --> 00:32:51.370
I believe there are
some limitations.

00:32:51.370 --> 00:32:53.950
But one of the things you can
do is run your Android apps

00:32:53.950 --> 00:32:55.210
as apps on Chrome OS.

00:32:55.210 --> 00:32:57.750
So you can use Chrome OS as a
full blown Android development

00:32:57.750 --> 00:33:01.750
platform, I guess
whenever it's available.

00:33:01.750 --> 00:33:03.550
[CLAPPING]

00:33:03.550 --> 00:33:07.840
Many, many more sessions
today, tomorrow, and Thursday.

00:33:07.840 --> 00:33:09.635
You know, I said
earlier, there's

00:33:09.635 --> 00:33:11.010
a lot of folks
back home who have

00:33:11.010 --> 00:33:12.218
been doing all the hard work.

00:33:12.218 --> 00:33:13.710
We're just talking about it.

00:33:13.710 --> 00:33:15.970
So thank you very much
to all the engineering

00:33:15.970 --> 00:33:18.430
teams, and the PMs, and the
designers, and tech writers,

00:33:18.430 --> 00:33:19.820
everyone who made this possible.

00:33:19.820 --> 00:33:22.690
We didn't do anything.

00:33:22.690 --> 00:33:24.310
We're just here to
hear you be happy.

00:33:24.310 --> 00:33:25.851
CHET HAASE: Some of
us did even less.

00:33:25.851 --> 00:33:27.700
ROMAIN GUY: Yes.

00:33:27.700 --> 00:33:28.700
And that's it for today.

00:33:28.700 --> 00:33:30.359
So thank you very much.

00:33:30.359 --> 00:33:32.400
DAN SANDLER: See you at
the Sandbox office hours.

00:33:32.400 --> 00:33:33.300
Bring your questions.

00:33:33.300 --> 00:33:33.966
CHET HAASE: Yes.

00:33:33.966 --> 00:33:35.410
We have Framework office hours.

00:33:35.410 --> 00:33:37.812
There is Android Sandbox
running all week.

00:33:37.812 --> 00:33:39.520
DAN SANDLER: We've
done our best to bring

00:33:39.520 --> 00:33:40.900
as many people
from our teams here

00:33:40.900 --> 00:33:42.520
to be able to talk to you
about these new features,

00:33:42.520 --> 00:33:44.320
these new APIs as
possible, because we

00:33:44.320 --> 00:33:47.050
know you can't get that anywhere
else besides Google I/O.

00:33:47.050 --> 00:33:51.089
CHET HAASE: And also
there's an overflow area.

00:33:51.089 --> 00:33:52.630
I can't remember
where it is exactly.

00:33:52.630 --> 00:33:54.400
Most of the speakers
from Android sessions

00:33:54.400 --> 00:33:55.741
will make their way afterwards.

00:33:55.741 --> 00:33:57.490
So if you can't get
your question answered

00:33:57.490 --> 00:33:59.448
at the session, you should
be able to find them

00:33:59.448 --> 00:34:01.480
after that, like us there now.

00:34:01.480 --> 00:34:02.339
Thank you.

00:34:02.339 --> 00:34:03.277
[CLAPPING]

00:34:03.277 --> 00:34:06.872
[MUSIC PLAYING]

