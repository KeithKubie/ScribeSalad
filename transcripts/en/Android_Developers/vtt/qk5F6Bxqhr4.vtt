WEBVTT
Kind: captions
Language: en

00:00:02.897 --> 00:00:03.480
Ah, threading.

00:00:03.480 --> 00:00:05.590
So powerful that you can
fold genomes with it,

00:00:05.590 --> 00:00:07.060
but so difficult
that it can drive

00:00:07.060 --> 00:00:09.180
the average programmer insane.

00:00:09.180 --> 00:00:10.940
My name is Cole
McCandless, and as far

00:00:10.940 --> 00:00:12.690
as Android development
is concerned,

00:00:12.690 --> 00:00:15.220
threading is one of the most
important and most confusing

00:00:15.220 --> 00:00:16.820
things that you can
deal with, which

00:00:16.820 --> 00:00:19.150
means if you want to write
the fastest app possible,

00:00:19.150 --> 00:00:22.120
you've gotta take a minute and
understand the subtle art that

00:00:22.120 --> 00:00:23.814
is multithreaded programming.

00:00:23.814 --> 00:00:25.980
Remember that in the vast
world of Android functions

00:00:25.980 --> 00:00:28.960
there's a whole boatload of
operations that only execute

00:00:28.960 --> 00:00:31.200
on the main thread--
system events, input

00:00:31.200 --> 00:00:35.280
events, application callback
services, and even alarms.

00:00:35.280 --> 00:00:37.750
And for the most part,
any code that you write

00:00:37.750 --> 00:00:41.000
executes inside one of these
operations, which means it also

00:00:41.000 --> 00:00:42.515
runs on the main thread.

00:00:42.515 --> 00:00:44.890
Now, if you recall, work that
executes on the main thread

00:00:44.890 --> 00:00:47.940
gets there after being pulled
from the front of a work queue,

00:00:47.940 --> 00:00:50.000
so blocks of work
are done in order,

00:00:50.000 --> 00:00:51.760
and the next block of
work isn't processed

00:00:51.760 --> 00:00:53.510
until the current
one is completed,

00:00:53.510 --> 00:00:56.660
which means if there is a large
chunk of work between an input

00:00:56.660 --> 00:00:58.640
event and its
callback, then the user

00:00:58.640 --> 00:01:01.226
will have to wait longer
than expected to see results.

00:01:01.226 --> 00:01:03.100
And don't forget that
the main thread is also

00:01:03.100 --> 00:01:05.510
where most of the
screen rendering occurs.

00:01:05.510 --> 00:01:08.070
While an animation or
screen update is occurring,

00:01:08.070 --> 00:01:10.220
the system will try to
draw the screen every 16

00:01:10.220 --> 00:01:14.360
milliseconds or so to achieve
smooth 60 frames per second.

00:01:14.360 --> 00:01:16.290
The problem is that
this is happening

00:01:16.290 --> 00:01:19.352
while the thread is also
responding to app input events.

00:01:19.352 --> 00:01:21.310
So if your app is in the
middle of an animation

00:01:21.310 --> 00:01:23.759
and some random work packet
takes longer than expected,

00:01:23.759 --> 00:01:25.800
you'll miss your chance
to render that next frame

00:01:25.800 --> 00:01:27.660
within the 16
millisecond window,

00:01:27.660 --> 00:01:29.370
and that frame will be delayed.

00:01:29.370 --> 00:01:32.730
This is what we call a dropped
frame, and when this happens,

00:01:32.730 --> 00:01:34.327
users start to notice.

00:01:34.327 --> 00:01:36.160
The direct solution
here is to move anything

00:01:36.160 --> 00:01:38.940
that might upset the
16 millisecond window

00:01:38.940 --> 00:01:42.062
over somewhere else, like
to a different thread.

00:01:42.062 --> 00:01:44.520
This way it won't be contesting
with the UI thread for work

00:01:44.520 --> 00:01:46.090
to be done, and
won't be interrupting

00:01:46.090 --> 00:01:49.860
the drawing of the screen, which
is the whole point of threading

00:01:49.860 --> 00:01:51.470
on Android in a nutshell.

00:01:51.470 --> 00:01:53.430
So the question at hand,
what's the best way

00:01:53.430 --> 00:01:56.500
to offload this work, and how
do you choose what types of work

00:01:56.500 --> 00:01:57.390
to offload?

00:01:57.390 --> 00:01:58.880
Thankfully, the
Android framework

00:01:58.880 --> 00:02:00.580
has provided a
handful of classes

00:02:00.580 --> 00:02:02.700
to help make this a
bit easier for you.

00:02:02.700 --> 00:02:05.330
For example, the
AsyncTask class is

00:02:05.330 --> 00:02:07.780
ideal for helping you get
work on and off the UI

00:02:07.780 --> 00:02:09.039
thread the right way.

00:02:09.039 --> 00:02:10.630
HandlerThreads
are great when you

00:02:10.630 --> 00:02:13.440
need a dedicated thread
for callbacks to land on.

00:02:13.440 --> 00:02:15.710
ThreadPools work best when
you can break your work up

00:02:15.710 --> 00:02:17.290
into really small
packets, and then

00:02:17.290 --> 00:02:19.980
toss them to a bunch of
threads, and IntentServices

00:02:19.980 --> 00:02:22.640
are really ideal for
background tasks,

00:02:22.640 --> 00:02:25.490
or when you need to get
intent work off the UI thread.

00:02:25.490 --> 00:02:28.200
And like everything else, there
is not a silver bullet here,

00:02:28.200 --> 00:02:30.250
but knowing which
primitive is best

00:02:30.250 --> 00:02:32.980
for what situation can save
you a lot of headaches.

00:02:32.980 --> 00:02:35.610
But note that having all
those fancy helper classes

00:02:35.610 --> 00:02:37.880
doesn't hide the
big problem, memory.

00:02:37.880 --> 00:02:41.050
See, threading and memory
have never really played well,

00:02:41.050 --> 00:02:44.030
and on the Android
platform it's no different.

00:02:44.030 --> 00:02:46.660
For example, if you declare
one of those fancy threading

00:02:46.660 --> 00:02:48.770
primitives inside
of an activity,

00:02:48.770 --> 00:02:50.940
it now contains an
implicit reference

00:02:50.940 --> 00:02:53.970
to the outer activity,
which can cause a memory

00:02:53.970 --> 00:02:55.530
leak if the activity
is destroyed,

00:02:55.530 --> 00:02:57.910
but the threaded
work is still alive.

00:02:57.910 --> 00:03:00.820
Or, what happens when the
user rotates the device,

00:03:00.820 --> 00:03:02.750
destroying an
activity that spawned

00:03:02.750 --> 00:03:03.940
a bunch of threaded work?

00:03:03.940 --> 00:03:06.000
I mean, chances are
that those work packets

00:03:06.000 --> 00:03:08.100
would have references
back to various UI objects

00:03:08.100 --> 00:03:10.260
that don't really exist anymore.

00:03:10.260 --> 00:03:12.010
And the truth is that
the Android platform

00:03:12.010 --> 00:03:14.410
is flooded with threads.

00:03:14.410 --> 00:03:16.876
If you need a reminder of
that, grab a Systrace capture

00:03:16.876 --> 00:03:18.500
and check out all
the cool stuff that's

00:03:18.500 --> 00:03:20.600
going on underneath the hood
that you never really knew

00:03:20.600 --> 00:03:21.280
about.

00:03:21.280 --> 00:03:22.821
See, at the end of
the day, threading

00:03:22.821 --> 00:03:24.590
is critical to ensure
high performance

00:03:24.590 --> 00:03:27.021
of your android app, but
there's lots of other problems

00:03:27.021 --> 00:03:29.020
that you have to worry
about that as well, which

00:03:29.020 --> 00:03:31.070
is why you should check out the
rest of the Android Performance

00:03:31.070 --> 00:03:31.950
Patterns videos.

00:03:31.950 --> 00:03:34.850
And also, don't forget to join
our Google+ community so that

00:03:34.850 --> 00:03:37.650
you can ask questions when
you run into problems.

00:03:37.650 --> 00:03:40.320
So keep calm, profile your
code, and always remember,

00:03:40.320 --> 00:03:40.920
perf matters.

00:03:40.920 --> 00:03:43.370
[MUSIC]

