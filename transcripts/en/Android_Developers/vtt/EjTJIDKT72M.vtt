WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:00.770
Hello.

00:00:00.770 --> 00:00:03.050
Thank you very, very much
for coming, everyone.

00:00:03.050 --> 00:00:04.050
My name is Nick Butcher.

00:00:04.050 --> 00:00:06.090
I'm an Android
designer and developer.

00:00:06.090 --> 00:00:08.640
And I'm here today to talk to
you about the Material Design

00:00:08.640 --> 00:00:11.369
principles, about understanding
and building them.

00:00:11.369 --> 00:00:12.410
We've got a lot to cover.

00:00:12.410 --> 00:00:14.243
I'm going to teach you
a lot of stuff today.

00:00:14.243 --> 00:00:16.409
So let's get started.

00:00:16.409 --> 00:00:17.200
So Material Design.

00:00:17.200 --> 00:00:17.950
Who's heard of it?

00:00:17.950 --> 00:00:19.840
Hopefully everyone.

00:00:19.840 --> 00:00:22.000
So introduced at Google
I/O a couple of years ago.

00:00:22.000 --> 00:00:23.690
Right?

00:00:23.690 --> 00:00:25.460
An amazing design
system for helping you

00:00:25.460 --> 00:00:29.020
build incredible,
consistent, usable apps.

00:00:29.020 --> 00:00:31.240
One of the things that
I personally really,

00:00:31.240 --> 00:00:33.790
really like about Material
Design, and that I think

00:00:33.790 --> 00:00:38.430
sets it apart from other design
systems out there, is this.

00:00:38.430 --> 00:00:40.520
It has these principles.

00:00:40.520 --> 00:00:42.580
It has these kind
of-- it strives

00:00:42.580 --> 00:00:45.530
to go beyond what a lot of
design systems do out there.

00:00:45.530 --> 00:00:47.140
It tries to answer
the question, what

00:00:47.140 --> 00:00:51.190
is the material that your
UI is actually built out of?

00:00:51.190 --> 00:00:54.500
It provides these guidelines
which describe the world

00:00:54.500 --> 00:00:55.800
that your UI lives in.

00:00:55.800 --> 00:00:58.410
It's kind of like how we
have the laws of physics

00:00:58.410 --> 00:01:00.550
in the real world, which,
once you understand

00:01:00.550 --> 00:01:03.590
the laws of physics, they can
be applied to other situations.

00:01:03.590 --> 00:01:05.129
It's the same in the UI world.

00:01:05.129 --> 00:01:08.100
If you have this level of
consistency underneath things,

00:01:08.100 --> 00:01:10.610
it means that patterns
learned in one place

00:01:10.610 --> 00:01:13.090
can be applied elsewhere.

00:01:13.090 --> 00:01:14.750
While Material
Design is very wide

00:01:14.750 --> 00:01:17.700
ranging-- it kind of gives you
a lot of patterns and components

00:01:17.700 --> 00:01:20.640
to work with to build your
UIs with-- no design system

00:01:20.640 --> 00:01:22.030
can be comprehensive.

00:01:22.030 --> 00:01:25.700
It can't think of every single
situation, every use case

00:01:25.700 --> 00:01:28.440
that your app is
trying to solve for.

00:01:28.440 --> 00:01:30.680
But by having some
underlying principles,

00:01:30.680 --> 00:01:32.730
some kind of
consistency underneath,

00:01:32.730 --> 00:01:34.650
if you try and
stick to these, when

00:01:34.650 --> 00:01:37.337
you solve your
particular use case

00:01:37.337 --> 00:01:39.920
it will feel consistent with the
other components and patterns

00:01:39.920 --> 00:01:44.222
out there, making for a better
experience for everyone.

00:01:44.222 --> 00:01:45.680
But the problem
with the principles

00:01:45.680 --> 00:01:48.500
is that it's somewhat
abstract, I feel.

00:01:48.500 --> 00:01:50.960
Sometimes it can be hard to
understand exactly how they

00:01:50.960 --> 00:01:52.747
apply to your application.

00:01:52.747 --> 00:01:54.580
So I'd like today to
talk to you about this.

00:01:54.580 --> 00:01:56.430
This is an application
I built called

00:01:56.430 --> 00:02:01.460
Plaid, which attempts to
embody these principles.

00:02:01.460 --> 00:02:04.350
So by discussing some
concrete examples

00:02:04.350 --> 00:02:06.090
of applying the
principles, I hope

00:02:06.090 --> 00:02:09.800
to help you to develop a better
understanding of what they are,

00:02:09.800 --> 00:02:12.190
to understand how they
can actually help improve

00:02:12.190 --> 00:02:14.670
your application,
as well as teach you

00:02:14.670 --> 00:02:17.160
how to build them on Android.

00:02:17.160 --> 00:02:19.050
So a couple things.

00:02:19.050 --> 00:02:21.330
This app is completely
open source.

00:02:21.330 --> 00:02:23.730
So you can grab the
source code on GitHub

00:02:23.730 --> 00:02:25.770
or you can join-- it's
in beta at the moment

00:02:25.770 --> 00:02:29.020
on the Play Store, which you
can join at that top link.

00:02:29.020 --> 00:02:32.560
This app-- also, I want to call
out-- uses a minimum SDK of 21.

00:02:32.560 --> 00:02:34.340
It's a Lollipop and beyond app.

00:02:34.340 --> 00:02:37.086
I did that mostly
to unburden myself

00:02:37.086 --> 00:02:39.460
from backwards compatibility,
to see what we could build.

00:02:39.460 --> 00:02:41.793
But there are efforts going
on-- actually, mostly driven

00:02:41.793 --> 00:02:43.400
by amazing third
party contributions.

00:02:43.400 --> 00:02:45.691
So there's a back port branch,
which actually brings it

00:02:45.691 --> 00:02:48.090
all the way back to API 17.

00:02:48.090 --> 00:02:48.870
So yeah.

00:02:48.870 --> 00:02:51.524
Let's crack on with
the application.

00:02:51.524 --> 00:02:53.940
So let's go through the Material
principles one at a time,

00:02:53.940 --> 00:02:56.420
and let's see how
we can actually

00:02:56.420 --> 00:03:00.319
make the application better,
and how to build those things.

00:03:00.319 --> 00:03:02.110
So the first Material
principle is the idea

00:03:02.110 --> 00:03:04.570
of Material tangible surfaces.

00:03:04.570 --> 00:03:06.560
This is the idea that
everything in your UI

00:03:06.560 --> 00:03:09.040
lives within a surface.

00:03:09.040 --> 00:03:11.560
And these surfaces can have
different sizes, shapes,

00:03:11.560 --> 00:03:13.090
and elevations, and so on.

00:03:13.090 --> 00:03:15.200
Now surfaces really,
really help you to-- they

00:03:15.200 --> 00:03:17.290
tap into a part of your brain
which recognizes that one

00:03:17.290 --> 00:03:18.498
thing is separate to another.

00:03:18.498 --> 00:03:20.106
We call that tangible objects.

00:03:20.106 --> 00:03:21.980
That means you can see
that a button is going

00:03:21.980 --> 00:03:24.310
to be a tap target,
or that one surface is

00:03:24.310 --> 00:03:27.190
going to move past each other.

00:03:27.190 --> 00:03:29.190
It's also really helpful
for providing hierarchy

00:03:29.190 --> 00:03:29.970
in your application.

00:03:29.970 --> 00:03:31.290
We're really good at
knowing that things

00:03:31.290 --> 00:03:33.607
which are closer to you are
larger or more important.

00:03:33.607 --> 00:03:35.190
We just know this
from the real world.

00:03:35.190 --> 00:03:37.815
And you can use that in your UI
to direct attention to the most

00:03:37.815 --> 00:03:39.800
important information.

00:03:39.800 --> 00:03:41.100
Here's an example.

00:03:41.100 --> 00:03:43.810
So in the application,
I showed some images

00:03:43.810 --> 00:03:46.320
from the awesome show and
tell site called Dribbble.

00:03:46.320 --> 00:03:48.920
And the image is the primary
focus of this application--

00:03:48.920 --> 00:03:49.740
of this screen.

00:03:49.740 --> 00:03:50.260
Sorry.

00:03:50.260 --> 00:03:53.990
So it gives this big old
prominent area at the top.

00:03:53.990 --> 00:03:56.320
But once you've seen
the image, you perhaps

00:03:56.320 --> 00:03:57.260
might want to take
some other action.

00:03:57.260 --> 00:03:59.340
So there's comments or
descriptions and so on, then.

00:03:59.340 --> 00:04:01.006
I kind of want to get
it out of the way,

00:04:01.006 --> 00:04:03.430
but still have it accessible.

00:04:03.430 --> 00:04:05.030
So here's how I do it in Plaid.

00:04:05.030 --> 00:04:07.950
Hopefully you can see it
collapses with some parallax

00:04:07.950 --> 00:04:09.040
to keep it centered.

00:04:09.040 --> 00:04:11.537
Then at a certain
point, the image

00:04:11.537 --> 00:04:14.120
pins-- I like to think of it--
and lifts up to let the content

00:04:14.120 --> 00:04:16.146
pass below it.

00:04:16.146 --> 00:04:18.839
If we were to take a 3D view
of what's going on here,

00:04:18.839 --> 00:04:21.079
it's kind of like-- it
collapses to a certain point,

00:04:21.079 --> 00:04:22.980
and then the surface
itself lifts up

00:04:22.980 --> 00:04:24.660
into a separate surface.

00:04:24.660 --> 00:04:26.410
And there's another
surface going on here.

00:04:26.410 --> 00:04:27.500
The floating action button.

00:04:27.500 --> 00:04:29.140
We're saying that this is
the most prominent thing.

00:04:29.140 --> 00:04:30.450
I think that liking
a shot is one

00:04:30.450 --> 00:04:32.540
of the most prominent
actions I want to call out.

00:04:32.540 --> 00:04:33.914
So having that on
its own surface

00:04:33.914 --> 00:04:36.130
which moves with certain
physics and then snaps

00:04:36.130 --> 00:04:37.560
when it reaches the
bottom of that lie there,

00:04:37.560 --> 00:04:38.934
again, helps to
direct attention.

00:04:43.370 --> 00:04:45.730
So how would we build this?

00:04:45.730 --> 00:04:48.130
Well, I decided to use
a stateless animator,

00:04:48.130 --> 00:04:51.351
because you could imagine
doing this yourself.

00:04:51.351 --> 00:04:53.100
Listen to the scroll
position of the list,

00:04:53.100 --> 00:04:56.400
and when you reach a certain
minimum height for the image,

00:04:56.400 --> 00:04:58.110
then just elevating it.

00:04:58.110 --> 00:04:59.670
But that would put
on you the burden

00:04:59.670 --> 00:05:01.562
of having to run an
animation, work out

00:05:01.562 --> 00:05:04.020
if the user has quickly scrolled
and quickly scrolled back,

00:05:04.020 --> 00:05:05.890
then you have to cancel
it and reverse it.

00:05:05.890 --> 00:05:09.090
Instead, using a stateless
animator helps you to-- it

00:05:09.090 --> 00:05:10.710
does it automatically for you.

00:05:10.710 --> 00:05:13.160
So all I do is I basically
set this state of pinned

00:05:13.160 --> 00:05:16.920
to true or false, depending
on how far these are scrolled.

00:05:16.920 --> 00:05:19.070
And then just run an
animation over the translation

00:05:19.070 --> 00:05:22.060
z property, and it
will produce this

00:05:22.060 --> 00:05:23.310
lifting up and pinning effect.

00:05:25.950 --> 00:05:28.100
I use surfaces again
in the same screen

00:05:28.100 --> 00:05:30.990
when looking at
comments on a shot.

00:05:30.990 --> 00:05:32.949
So for each of the
comments in the list below,

00:05:32.949 --> 00:05:34.990
there are certain actions
you can take, replying,

00:05:34.990 --> 00:05:37.680
liking the comment,
and so on and so forth.

00:05:37.680 --> 00:05:40.169
Rather than an
alternative presentation--

00:05:40.169 --> 00:05:42.710
it might have been to have these
comments visible or overflow

00:05:42.710 --> 00:05:44.230
items and so on and so forth.

00:05:44.230 --> 00:05:46.720
But that would have led to a
more cluttered look and feel.

00:05:46.720 --> 00:05:48.720
I wanted this thing
a bit cleaner.

00:05:48.720 --> 00:05:51.140
So using the idea of surfaces
here, I think helped.

00:05:51.140 --> 00:05:52.727
Because, as you
tap on a surface,

00:05:52.727 --> 00:05:54.560
we have this idea that
it raises up and gets

00:05:54.560 --> 00:05:57.530
an elevation and a little
drop shadow underneath.

00:05:57.530 --> 00:05:59.787
And the comment actions
reveal themselves.

00:05:59.787 --> 00:06:01.370
So again, I feel
surfaces help to make

00:06:01.370 --> 00:06:03.640
it a cleaner presentation.

00:06:03.640 --> 00:06:06.090
And building it was pretty easy.

00:06:06.090 --> 00:06:08.800
There's three steps to it,
which I'll walk you through.

00:06:08.800 --> 00:06:13.780
So firstly, it's a comment--
it's an adapter at the base,

00:06:13.780 --> 00:06:16.010
so in the list use
adapter, we work out

00:06:16.010 --> 00:06:18.660
whether we can hold
onto the position

00:06:18.660 --> 00:06:20.180
of the current expanded item.

00:06:20.180 --> 00:06:21.990
And based on if it's
the expanded one,

00:06:21.990 --> 00:06:25.160
we just set the visibility of
those little actions there.

00:06:25.160 --> 00:06:29.940
Then in the onClick handler,
we store the position

00:06:29.940 --> 00:06:31.586
of the one you are
trying to expand.

00:06:31.586 --> 00:06:33.210
And then we use one
of my favorite APIs

00:06:33.210 --> 00:06:34.751
in Android, which
is TransitionManage

00:06:34.751 --> 00:06:36.640
r.beginDelayedTransition.

00:06:36.640 --> 00:06:38.760
This is deceptively
simple, because it's

00:06:38.760 --> 00:06:40.670
doing lots and lots
of work for us here.

00:06:40.670 --> 00:06:42.590
So by saying
beginDelayedTransition

00:06:42.590 --> 00:06:46.580
and, crucially, we parse
the whole of the list view,

00:06:46.580 --> 00:06:49.270
rather than the individual
view you clicked on.

00:06:49.270 --> 00:06:51.100
That will then watch
for any changes

00:06:51.100 --> 00:06:53.060
to any views underneath
the list view.

00:06:53.060 --> 00:06:55.320
So that's going to handle
collapsing one item

00:06:55.320 --> 00:06:59.064
and expanding another
item smoothly for us.

00:06:59.064 --> 00:07:00.480
We then call
notifyDataSetChanged,

00:07:00.480 --> 00:07:03.140
which will then rebind
both of the items

00:07:03.140 --> 00:07:04.685
and set the right visibilities.

00:07:07.590 --> 00:07:09.460
You notice we also set
the activated state

00:07:09.460 --> 00:07:13.540
based on whether the currently
selected item's expanded.

00:07:13.540 --> 00:07:16.560
We then just pretty simply
is use a stateless drawable

00:07:16.560 --> 00:07:17.630
for the background.

00:07:17.630 --> 00:07:19.220
And two of my
favorite attributes,

00:07:19.220 --> 00:07:21.120
which most people
don't tend to set,

00:07:21.120 --> 00:07:24.246
is you can set this enter
and exit fade duration.

00:07:24.246 --> 00:07:25.620
So this will
automatically handle

00:07:25.620 --> 00:07:26.560
the color change for you.

00:07:26.560 --> 00:07:28.184
So when you select
an item, it fades in

00:07:28.184 --> 00:07:31.200
nicely from the background
color to a pure white,

00:07:31.200 --> 00:07:32.930
to show it in the
selected state,

00:07:32.930 --> 00:07:35.100
or fade out the one that
is getting deselected.

00:07:35.100 --> 00:07:37.770
All, again,
automatically for you.

00:07:37.770 --> 00:07:39.850
And similarly, we use
a stateless animator

00:07:39.850 --> 00:07:44.880
again to do some translations
z to lift up and out.

00:07:44.880 --> 00:07:47.530
So hopefully you can see just--
some pretty simple stuff.

00:07:47.530 --> 00:07:50.629
There's no major custom
work going on here.

00:07:50.629 --> 00:07:52.420
It achieves this quite
smooth, nice effect,

00:07:52.420 --> 00:07:53.880
and makes for a cleaner layout.

00:07:53.880 --> 00:07:58.600
So I think surfaces really
helped with this here.

00:07:58.600 --> 00:08:01.370
Next up is this section of
the Material spec, which I

00:08:01.370 --> 00:08:03.590
really, really like,
which is talking

00:08:03.590 --> 00:08:04.890
about navigational transitions.

00:08:04.890 --> 00:08:07.480
And it talks specifically
about navigating from a parent

00:08:07.480 --> 00:08:09.530
to a child screen.

00:08:09.530 --> 00:08:11.710
And it shows this video here.

00:08:11.710 --> 00:08:14.310
I love this idea that
when you click on an item,

00:08:14.310 --> 00:08:16.670
it lifts up out of
the parent screen

00:08:16.670 --> 00:08:19.250
and expands out to
fill the screen.

00:08:19.250 --> 00:08:22.380
I'll come back to the motion
part of doing that a little bit

00:08:22.380 --> 00:08:23.210
later on.

00:08:23.210 --> 00:08:25.330
But part of the thing
I like about this

00:08:25.330 --> 00:08:27.230
is the idea-- this
permanence idea

00:08:27.230 --> 00:08:29.830
that the previous
content is still there,

00:08:29.830 --> 00:08:32.110
and that the new
screen is lifted up

00:08:32.110 --> 00:08:35.640
and it's sitting on top of it.

00:08:35.640 --> 00:08:37.460
I use this idea in Plaid.

00:08:37.460 --> 00:08:40.690
So for example, here is a grid
of images we're looking at.

00:08:40.690 --> 00:08:44.410
When you tap on one
item, it lifts up.

00:08:44.410 --> 00:08:46.690
But crucially, what
I've done here,

00:08:46.690 --> 00:08:50.210
is that when you
overscroll down,

00:08:50.210 --> 00:08:53.460
I start to translate and
scale the content downwards.

00:08:53.460 --> 00:08:55.550
But peek, and you can
see the screen behind.

00:08:55.550 --> 00:08:57.160
Again this is
reinforcing this idea

00:08:57.160 --> 00:09:00.139
that this new screen of
content is sitting on top.

00:09:00.139 --> 00:09:02.180
I feel like it gives it
more of a sense of place.

00:09:02.180 --> 00:09:03.763
You understand where
you've come from.

00:09:03.763 --> 00:09:05.250
It's hard to get
lost, because it's

00:09:05.250 --> 00:09:06.590
so continuous an experience.

00:09:09.600 --> 00:09:16.177
So to build this-- notice also
that when you try and collapse

00:09:16.177 --> 00:09:17.260
it, it's a single gesture.

00:09:17.260 --> 00:09:19.390
So in the content here,
I'm scrolling down,

00:09:19.390 --> 00:09:21.210
keep on scrolling
from the same gesture,

00:09:21.210 --> 00:09:22.870
leads to this
backwards behavior.

00:09:22.870 --> 00:09:24.210
It's not like you have
to scroll and then

00:09:24.210 --> 00:09:25.270
scroll again or
anything like that.

00:09:25.270 --> 00:09:26.700
It's one single experience.

00:09:26.700 --> 00:09:27.980
And that's all built
on the awesomeness

00:09:27.980 --> 00:09:28.810
of nested scrolling.

00:09:28.810 --> 00:09:30.768
So if you haven't checked
out nested scrolling,

00:09:30.768 --> 00:09:32.800
it's really, really cool.

00:09:32.800 --> 00:09:34.790
So here's a-- it's a
custom view I wrote to do

00:09:34.790 --> 00:09:37.170
this, which extends
frame layout.

00:09:37.170 --> 00:09:39.020
And what nested
scrolling lets you do

00:09:39.020 --> 00:09:41.620
is listen to scroll events that
the child of that is doing.

00:09:41.620 --> 00:09:43.280
So inside the
frame layout, there

00:09:43.280 --> 00:09:46.580
is a ListView here which
is sending scroll events.

00:09:46.580 --> 00:09:50.020
And basically, you just
overwrite a few APIs.

00:09:50.020 --> 00:09:52.165
So the first one is
onStartMessageScroll.

00:09:52.165 --> 00:09:53.540
This is basically
asking, are you

00:09:53.540 --> 00:09:55.460
interested in listening
to more nested scrolls.

00:09:55.460 --> 00:09:57.835
Here I'm saying, anything
that's scrolling vertically I'm

00:09:57.835 --> 00:10:00.850
interested in, please
send me more events.

00:10:00.850 --> 00:10:04.180
So if you returned true from
that one, every time the user

00:10:04.180 --> 00:10:08.410
scrolls in the list, I'll get
this onNestedScroll event.

00:10:08.410 --> 00:10:10.254
So you can do stuff
with working out

00:10:10.254 --> 00:10:11.920
how much the ListView
scrolls by itself,

00:10:11.920 --> 00:10:14.360
but the one I'm actually really,
really interested in here

00:10:14.360 --> 00:10:17.510
is that last parameter,
which is dyUnconsumed.

00:10:17.510 --> 00:10:19.790
So that basically tells me
if the List has scrolled

00:10:19.790 --> 00:10:22.550
to the end of its scroll
range, but the user carried

00:10:22.550 --> 00:10:26.600
on trying to scroll, there were
some unconsumed scroll events.

00:10:26.600 --> 00:10:28.920
So I want to take those,
and I'll then just

00:10:28.920 --> 00:10:31.120
use set translation
y and set scale

00:10:31.120 --> 00:10:33.350
to actually translate and
scale down all the content,

00:10:33.350 --> 00:10:35.790
moving it away.

00:10:35.790 --> 00:10:39.440
And then finally, when the
user lets go, I can work out,

00:10:39.440 --> 00:10:41.530
did they scroll past
a certain threshold?

00:10:41.530 --> 00:10:43.870
If so, I'm going to
finish the activity

00:10:43.870 --> 00:10:45.743
and run an animation
to collapse it.

00:10:45.743 --> 00:10:48.117
Otherwise, I'll settle it back
into its natural position.

00:10:50.735 --> 00:10:52.110
The final part of
the puzzle here

00:10:52.110 --> 00:10:56.580
is that the activity was sat on
top of the previous activity.

00:10:56.580 --> 00:10:58.680
And you can see through
to it the one behind.

00:10:58.680 --> 00:11:01.330
The way that you do that
is you set this flag

00:11:01.330 --> 00:11:03.220
windowIsTranslucent.

00:11:03.220 --> 00:11:05.700
And what that means is that
you're telling the system,

00:11:05.700 --> 00:11:07.812
don't finish the
previous activity.

00:11:07.812 --> 00:11:09.770
So it'll go into onPause,
but it won't actually

00:11:09.770 --> 00:11:12.050
go into unDestroyed,
because you're

00:11:12.050 --> 00:11:14.177
saying that when the content
on top is translucent,

00:11:14.177 --> 00:11:16.010
it's going to be able
to see through to you.

00:11:16.010 --> 00:11:19.290
It's kind of like, if you showed
a dialog on top of your app,

00:11:19.290 --> 00:11:22.071
rather than showing a new
activity, it won't finish you.

00:11:22.071 --> 00:11:23.820
And then you set a
semi-transparent window

00:11:23.820 --> 00:11:24.339
background.

00:11:24.339 --> 00:11:26.130
For those of you who
don't read hex colors,

00:11:26.130 --> 00:11:29.506
that's like a semi-opaque gray.

00:11:29.506 --> 00:11:30.816
That's how you build it.

00:11:30.816 --> 00:11:31.690
So that was surfaces.

00:11:31.690 --> 00:11:34.869
Again, I think made it
more understandable.

00:11:34.869 --> 00:11:36.910
So another example of
surfaces in the application

00:11:36.910 --> 00:11:39.760
is-- this is a Dribbble
profile screen.

00:11:39.760 --> 00:11:42.000
So here I use surfaces
with great prejudice

00:11:42.000 --> 00:11:45.459
to basically show
content hierarchy.

00:11:45.459 --> 00:11:47.000
So here, when you
scroll the content,

00:11:47.000 --> 00:11:50.700
I actually made the decision to
leave the profile information

00:11:50.700 --> 00:11:53.650
statically, and have the images
scroll completely on top of it,

00:11:53.650 --> 00:11:55.470
completely in front
of the content.

00:11:55.470 --> 00:11:57.275
This is me being
opinionated and saying,

00:11:57.275 --> 00:11:59.400
I think images are the most
important part of this,

00:11:59.400 --> 00:12:02.979
and I want to direct
attention to those.

00:12:02.979 --> 00:12:04.020
And that's how you do it.

00:12:04.020 --> 00:12:05.550
So how would you build this?

00:12:05.550 --> 00:12:07.650
You can consider--
a frame layout

00:12:07.650 --> 00:12:08.700
lets you overlap content.

00:12:08.700 --> 00:12:10.960
So you might put the
profile information

00:12:10.960 --> 00:12:13.870
in one layer, then the
RecyclerView of images on top.

00:12:13.870 --> 00:12:15.140
And that's all well and good.

00:12:15.140 --> 00:12:16.770
But what about the clicks?

00:12:16.770 --> 00:12:18.480
If the RecyclerView's
on top, how

00:12:18.480 --> 00:12:21.700
do you let clicks pass through?

00:12:21.700 --> 00:12:23.670
So I kind of cheat
a little bit here.

00:12:23.670 --> 00:12:27.780
So I set an onTouchListener
onto the RecyclerView itself.

00:12:27.780 --> 00:12:30.150
And then I work out where
the top of the first item

00:12:30.150 --> 00:12:33.865
is, which I've set
down with some padding.

00:12:33.865 --> 00:12:35.240
So then, if the
touch point where

00:12:35.240 --> 00:12:36.698
you're touching on
the RecyclerView

00:12:36.698 --> 00:12:39.500
is above the first
item, I directly

00:12:39.500 --> 00:12:42.370
call and dispatchTouchEvent
onto the content behind.

00:12:42.370 --> 00:12:44.840
This is the description
field behind.

00:12:44.840 --> 00:12:46.400
So that forwards
on the touch event.

00:12:46.400 --> 00:12:49.150
So again like letting the touch
pass through the RecyclerView

00:12:49.150 --> 00:12:50.600
onto the content behind.

00:12:50.600 --> 00:12:52.516
So it lets you do this
kind of layering trick.

00:12:54.730 --> 00:12:56.450
And my last example
of surfaces is--

00:12:56.450 --> 00:12:59.300
I love the idea that
surfaces, while they're

00:12:59.300 --> 00:13:01.580
inspired by paper and
things in the real world,

00:13:01.580 --> 00:13:03.050
they're not limited to them.

00:13:03.050 --> 00:13:06.232
I love the idea that we can
transform from one shape

00:13:06.232 --> 00:13:07.397
or object to another.

00:13:07.397 --> 00:13:08.980
So here for example,
I've got a couple

00:13:08.980 --> 00:13:13.450
of actions which use the
floating action button pattern.

00:13:13.450 --> 00:13:14.950
And when you touch
it, sometimes you

00:13:14.950 --> 00:13:16.230
have more actions to be taken.

00:13:16.230 --> 00:13:17.690
So if you're trying
to like a shot,

00:13:17.690 --> 00:13:19.780
and you haven't logged
in, I want you to log in.

00:13:19.780 --> 00:13:23.300
Or if you're trying to upload
a new shot and a poster design

00:13:23.300 --> 00:13:25.570
and use, you have to
give details of it.

00:13:25.570 --> 00:13:29.696
Rather than-- you could imagine
a different presentation, where

00:13:29.696 --> 00:13:31.320
you just show a new
screen or just show

00:13:31.320 --> 00:13:34.377
a dialogue on top of it, I
feel that by transforming

00:13:34.377 --> 00:13:36.210
the surface itself,
it's clearer that you're

00:13:36.210 --> 00:13:37.630
trying to act on this thing.

00:13:37.630 --> 00:13:39.300
And it requires a second step.

00:13:39.300 --> 00:13:41.450
I think the transformation
aspect of it

00:13:41.450 --> 00:13:45.320
helps you to have a
continuous experience.

00:13:45.320 --> 00:13:46.850
I haven't got time
to show you how

00:13:46.850 --> 00:13:48.880
I've built this
particular-- shared element

00:13:48.880 --> 00:13:50.010
transition is what it is.

00:13:50.010 --> 00:13:51.589
But if you come to
my talk tomorrow,

00:13:51.589 --> 00:13:52.630
I actually go through it.

00:13:52.630 --> 00:13:56.260
So that's a window
into transitions.

00:13:56.260 --> 00:13:58.375
That was surfaces.

00:13:58.375 --> 00:14:00.000
Second principle I
want to talk through

00:14:00.000 --> 00:14:02.800
is using bold graphic
design inspired

00:14:02.800 --> 00:14:06.430
by all the great design
literature out there.

00:14:06.430 --> 00:14:09.410
This talks about using classical
things like color, typography,

00:14:09.410 --> 00:14:11.880
space, and imagery
to really provide

00:14:11.880 --> 00:14:16.420
a nice, clear, and
beautiful presentation.

00:14:16.420 --> 00:14:19.350
So in earlier builds of
Plaid, I tried to use color,

00:14:19.350 --> 00:14:21.980
like color primary and
distinct blocks of color,

00:14:21.980 --> 00:14:24.180
but I found that displaying
a lot of imagery,

00:14:24.180 --> 00:14:27.670
as well as lots of bold
colors somewhat clashed.

00:14:27.670 --> 00:14:30.294
So in the end, I ended up
backing out a lot of color.

00:14:30.294 --> 00:14:31.960
In fact, if you look
at the screen here,

00:14:31.960 --> 00:14:33.835
the only thing I'm
contributing is the kind

00:14:33.835 --> 00:14:35.960
of floating action button,
that little green button

00:14:35.960 --> 00:14:37.144
at the bottom.

00:14:37.144 --> 00:14:39.310
The idea here being that
content was the main thing.

00:14:39.310 --> 00:14:42.870
I wanted to reduce my
personality to make room

00:14:42.870 --> 00:14:44.380
for the content to shine.

00:14:44.380 --> 00:14:47.090
That doesn't mean you can't
use color in interesting ways.

00:14:47.090 --> 00:14:50.250
So I instead use some
dynamic coloring in order

00:14:50.250 --> 00:14:53.305
to make the app still
feel alive and thoughtful.

00:14:53.305 --> 00:14:55.430
So here for example, as
you're clicking on an item,

00:14:55.430 --> 00:14:58.190
you can see the touch response--
the touche ripple you get

00:14:58.190 --> 00:15:00.400
is determined by the
item you're clicking on.

00:15:00.400 --> 00:15:03.087
So the gray and red one
gets a nice red ripple,

00:15:03.087 --> 00:15:05.170
and the one below gets
like a bluey-purple ripple.

00:15:05.170 --> 00:15:07.572
Hopefully that comes out.

00:15:07.572 --> 00:15:10.030
So the way you do that is from
the awesome, awesome Palette

00:15:10.030 --> 00:15:11.430
library.

00:15:11.430 --> 00:15:13.940
So Palette runs over an image
and picks out the palette

00:15:13.940 --> 00:15:15.940
of colors inside the image.

00:15:15.940 --> 00:15:19.270
And one thing I want to call out
is it offers this Filters API.

00:15:19.270 --> 00:15:21.620
So Palette by default
it's built for working

00:15:21.620 --> 00:15:23.450
on landscape imagery.

00:15:23.450 --> 00:15:25.440
So it'll actually ignore
certain color ranges.

00:15:25.440 --> 00:15:29.460
It'll never give you pure white
or pure black, for example.

00:15:29.460 --> 00:15:31.235
I actually want that
in this application.

00:15:31.235 --> 00:15:33.110
The imagery that I'm
dealing with here

00:15:33.110 --> 00:15:34.480
is actually different
to the landscapes.

00:15:34.480 --> 00:15:36.479
So you have this API to
clear the filters, which

00:15:36.479 --> 00:15:38.200
will give you a
wider range of colors

00:15:38.200 --> 00:15:40.130
that it will actually
pick out an image.

00:15:40.130 --> 00:15:41.890
Worth knowing about.

00:15:41.890 --> 00:15:44.760
Once you have a Palette, I
then have this little method

00:15:44.760 --> 00:15:47.230
to create a ripple
drawable for me.

00:15:47.230 --> 00:15:50.050
Now, Palette will give
you these named swatches.

00:15:50.050 --> 00:15:52.430
In particular, I really want
to use the vibrant color.

00:15:52.430 --> 00:15:55.690
So picking out that red
from that first image we saw

00:15:55.690 --> 00:15:57.800
is a great way to kind
of tie the touch ripple

00:15:57.800 --> 00:15:59.150
back to the item.

00:15:59.150 --> 00:16:01.916
So what I do is I walk through
the swatches one at a time.

00:16:01.916 --> 00:16:03.290
You have to go
through them each,

00:16:03.290 --> 00:16:06.100
because you're not
guaranteed that there's

00:16:06.100 --> 00:16:07.894
going to be a named swatch.

00:16:07.894 --> 00:16:10.310
So for example, if I were to
give a black and white image,

00:16:10.310 --> 00:16:11.768
it's not going to
be able to return

00:16:11.768 --> 00:16:13.970
me a vibrant color from that.

00:16:13.970 --> 00:16:16.521
So you go through them one at
a time, in a preference order.

00:16:16.521 --> 00:16:18.020
Work out what color
to use, and then

00:16:18.020 --> 00:16:19.407
create a new ripple drawable.

00:16:19.407 --> 00:16:21.490
And then set that as the
foreground onto the image

00:16:21.490 --> 00:16:22.750
you touched on.

00:16:22.750 --> 00:16:24.810
I actually take this
idea bit further

00:16:24.810 --> 00:16:28.250
when going into a
details view of an image.

00:16:28.250 --> 00:16:29.590
Here I am quite zoomed in.

00:16:29.590 --> 00:16:34.100
So as I click onto each image,
I want to have this immersive,

00:16:34.100 --> 00:16:35.960
seamless feel to
the application.

00:16:35.960 --> 00:16:38.000
So what I do is I again
use color picking.

00:16:38.000 --> 00:16:40.450
I pick a color out of
the image and set it

00:16:40.450 --> 00:16:41.502
as the status bar color.

00:16:41.502 --> 00:16:43.210
You could have achieved
something similar

00:16:43.210 --> 00:16:47.150
by using a semi-transparent,
partially black, perhaps,

00:16:47.150 --> 00:16:49.720
status bar color and having
the content run behind it.

00:16:49.720 --> 00:16:52.250
But because the detail screen
is all about the image,

00:16:52.250 --> 00:16:54.470
I wanted to overlay
as little as possible

00:16:54.470 --> 00:16:56.030
to not have anything
on top of it.

00:16:56.030 --> 00:16:59.600
So instead, I used
this color picking.

00:16:59.600 --> 00:17:01.800
But what about a
situation like this?

00:17:01.800 --> 00:17:06.470
So here's an image which is a
couple of major color blocks.

00:17:06.470 --> 00:17:09.541
If you were to run Palette over
the entire image like this,

00:17:09.541 --> 00:17:11.540
it's likely going to pick
out the of purply blue

00:17:11.540 --> 00:17:13.944
in the middle, because that's
the most dominant color,

00:17:13.944 --> 00:17:15.069
but that's not what I want.

00:17:15.069 --> 00:17:17.149
So I don't want have this
purply status bar, then

00:17:17.149 --> 00:17:19.440
a block of white and then
another purple in the middle,

00:17:19.440 --> 00:17:21.640
it's going to look
quite discontinuous.

00:17:21.640 --> 00:17:23.140
What I really want
is to run Palette

00:17:23.140 --> 00:17:25.900
over just a subset of the
image, just the top part,

00:17:25.900 --> 00:17:28.540
such that that's going to
be the best color to set it

00:17:28.540 --> 00:17:29.827
against as a status bar.

00:17:29.827 --> 00:17:31.410
So you could imagine
a situation where

00:17:31.410 --> 00:17:33.999
you could create a second bitmap
and run Palette over that.

00:17:33.999 --> 00:17:35.540
That's going to be
quite inefficient.

00:17:35.540 --> 00:17:38.450
Palette's already
walking over bitmap.

00:17:38.450 --> 00:17:41.243
A better thing you can
do is use the Region API.

00:17:41.243 --> 00:17:43.950
Palette here offers an
API that says, only look

00:17:43.950 --> 00:17:46.530
at this area of an image
when you're picking colors

00:17:46.530 --> 00:17:48.350
from it to consider.

00:17:48.350 --> 00:17:51.340
So it's going to be
much more efficient.

00:17:51.340 --> 00:17:52.840
And I also want to
call out the fact

00:17:52.840 --> 00:17:55.519
that Palette lets you set
the maximum number of colors

00:17:55.519 --> 00:17:57.560
that you look at-- that
you consider in an image.

00:17:57.560 --> 00:17:59.210
Basically what Palette's
doing is walking through,

00:17:59.210 --> 00:18:01.754
trying to bucket the colors
into smaller and smaller bucket

00:18:01.754 --> 00:18:03.920
sizes until it comes out
with this Palette of colors

00:18:03.920 --> 00:18:05.250
which are in the image.

00:18:05.250 --> 00:18:06.440
And you can control that.

00:18:06.440 --> 00:18:09.330
So here I found setting this
allowed me to pick the more

00:18:09.330 --> 00:18:11.061
dominant colors quicker.

00:18:13.224 --> 00:18:14.640
And lastly, you
might have noticed

00:18:14.640 --> 00:18:16.900
I'm using the awesome
LightStatusBar

00:18:16.900 --> 00:18:18.230
API on Marshmallow.

00:18:18.230 --> 00:18:22.810
So that basically lets me
set dark icons for the Wi-Fi

00:18:22.810 --> 00:18:25.200
and the clock and the
battery and so forth.

00:18:25.200 --> 00:18:26.910
The way you do
that is I basically

00:18:26.910 --> 00:18:29.570
pick a color from the
image for the status bar.

00:18:29.570 --> 00:18:32.970
And then check if it's
light by essentially

00:18:32.970 --> 00:18:35.807
converting the RGB into
HSL-- hue, saturation,

00:18:35.807 --> 00:18:38.390
and lightness-- and then looking
at that third component, just

00:18:38.390 --> 00:18:41.420
the lightness, and seeing if
it's over a certain value.

00:18:41.420 --> 00:18:42.630
Then say, yet, that's light.

00:18:42.630 --> 00:18:45.900
And if so, setting the
status bar against dark.

00:18:45.900 --> 00:18:48.550
So it's all about creating
this immersive feel

00:18:48.550 --> 00:18:50.720
where the content is
contributing to the UI.

00:18:53.790 --> 00:18:57.140
Next up, Material recommends
using certain grids.

00:18:57.140 --> 00:19:00.010
So here I am overlaying
some of the key lines which

00:19:00.010 --> 00:19:01.600
we worked with in Material.

00:19:01.600 --> 00:19:03.790
And I think this
really, really helps

00:19:03.790 --> 00:19:06.680
in providing a regular
rhythm to your application,

00:19:06.680 --> 00:19:10.750
making it easier to scan it, and
parse it when you look at it.

00:19:10.750 --> 00:19:14.930
One section of the Material spec
which I found quite interesting

00:19:14.930 --> 00:19:18.300
was that it says that you should
use an 8dp grid for most items,

00:19:18.300 --> 00:19:21.720
but typography should
sit on a 4dp grid.

00:19:21.720 --> 00:19:24.839
It does this mostly by setting
line height, recommending

00:19:24.839 --> 00:19:26.880
leading or line height
that you should work with,

00:19:26.880 --> 00:19:28.171
which are all multiples of 4dp.

00:19:30.850 --> 00:19:33.670
But unfortunately, Android
doesn't offer a built-in way

00:19:33.670 --> 00:19:36.395
and text you right
now for doing that.

00:19:36.395 --> 00:19:37.270
So how do we do that?

00:19:37.270 --> 00:19:39.680
How do we make sure our
text all sits perfectly

00:19:39.680 --> 00:19:43.700
on this 4dp grid in order to
get this nice, regular rhythm?

00:19:43.700 --> 00:19:46.120
Just for comparison's
sake, on the left

00:19:46.120 --> 00:19:48.655
is without the 4dp
base length grid,

00:19:48.655 --> 00:19:50.390
and on the right is
where-- hopefully you

00:19:50.390 --> 00:19:52.190
can see that this is--
you might consider

00:19:52.190 --> 00:19:55.240
it a small thing-- like maybe
having type sit on the grid,

00:19:55.240 --> 00:19:58.104
but I really think it helps
the readability of the screen.

00:19:58.104 --> 00:19:59.770
You can park, scan
down it, and read it.

00:19:59.770 --> 00:20:03.805
And hopefully it just feels
a lot more regular to you.

00:20:03.805 --> 00:20:06.180
So what we really want is to
be able to specify that line

00:20:06.180 --> 00:20:07.320
height.

00:20:07.320 --> 00:20:10.400
So here's a style where I've set
a-- specified the line height

00:20:10.400 --> 00:20:10.940
to match it.

00:20:10.940 --> 00:20:12.610
I would call out,
especially, that I

00:20:12.610 --> 00:20:15.300
called it lineHeightHint,
rather than just lineHeight,

00:20:15.300 --> 00:20:18.030
because with type,
we all know we should

00:20:18.030 --> 00:20:19.240
be working with SP units.

00:20:19.240 --> 00:20:19.480
Right?

00:20:19.480 --> 00:20:20.854
So that you can
take into account

00:20:20.854 --> 00:20:22.280
if the user has
bumped up or down

00:20:22.280 --> 00:20:24.780
the text size for
their particular needs.

00:20:24.780 --> 00:20:27.590
So I call it lineHeightHint
because this lets you specify

00:20:27.590 --> 00:20:30.320
the line height in
the same units, in SP,

00:20:30.320 --> 00:20:32.760
such that, if the user has
set their text to be larger,

00:20:32.760 --> 00:20:37.030
you want the line
heights to grow with it.

00:20:37.030 --> 00:20:40.930
Then I created a custom
view, which extends text view

00:20:40.930 --> 00:20:43.130
and does some magic for us.

00:20:43.130 --> 00:20:46.220
First it basically
takes that line height

00:20:46.220 --> 00:20:50.455
you specified, and rounds
it up to the nearest 4dp.

00:20:50.455 --> 00:20:52.830
Essentially making sure it's
going to-- the line height's

00:20:52.830 --> 00:20:54.850
going to be a multiple of 4.

00:20:54.850 --> 00:20:57.800
I then work out the
height of the font.

00:20:57.800 --> 00:21:00.045
And then call an API which
TextView does give you,

00:21:00.045 --> 00:21:03.355
setLineSpacing, which wants
to take the line spacing

00:21:03.355 --> 00:21:05.230
additions-- so that's
the line height I want,

00:21:05.230 --> 00:21:08.530
minus the height of the
font, is the addition.

00:21:08.530 --> 00:21:11.060
And that will give you the
4dp grid that you want.

00:21:11.060 --> 00:21:13.154
The custom view actually
does some extra stuff.

00:21:13.154 --> 00:21:15.070
It makes sure the padding
top is at the right,

00:21:15.070 --> 00:21:17.146
so that the first
baseline sits on the grid.

00:21:17.146 --> 00:21:18.520
And it adjusts
the padding bottom

00:21:18.520 --> 00:21:21.769
to make sure the entire element
is a multiple of 4dp as well.

00:21:21.769 --> 00:21:24.310
So a bit of work, but I really
think it really helps give you

00:21:24.310 --> 00:21:27.500
this nice regular typography.

00:21:27.500 --> 00:21:30.220
Speaking of
typography, I also make

00:21:30.220 --> 00:21:32.507
use of some of the more
advanced features of Roboto.

00:21:32.507 --> 00:21:34.090
So hopefully you
know that fonts often

00:21:34.090 --> 00:21:35.631
come with lots of
variations in them.

00:21:35.631 --> 00:21:38.142
So for example, here I'm using
this small caps presentation.

00:21:38.142 --> 00:21:40.350
And this is what they call
old style numbering, which

00:21:40.350 --> 00:21:42.616
gives you a different
numbering format.

00:21:42.616 --> 00:21:44.490
I feel that using these
different typographic

00:21:44.490 --> 00:21:46.810
variations help you
to express hierarchy

00:21:46.810 --> 00:21:49.640
and gives some visual
interest to the screen.

00:21:49.640 --> 00:21:52.250
You have more range
of presenting text.

00:21:52.250 --> 00:21:54.820
So rather than using lots of
different text sizes or colors,

00:21:54.820 --> 00:21:56.710
using different
presentations like this

00:21:56.710 --> 00:22:00.990
help you to say what
information is more important,

00:22:00.990 --> 00:22:03.260
making it easier
to scan through it.

00:22:03.260 --> 00:22:05.530
You can set these font feature
settings really easily.

00:22:05.530 --> 00:22:08.570
They use this web syntax
where smcp, for example,

00:22:08.570 --> 00:22:11.580
means use small caps or onum
means use odd numbering.

00:22:11.580 --> 00:22:12.860
There's a whole bunch of
things you can fiddle with.

00:22:12.860 --> 00:22:15.026
But I encourage you to check
out the different range

00:22:15.026 --> 00:22:18.190
of typographic options the
font you're using gives you.

00:22:21.070 --> 00:22:23.690
And while grids
are awesome, I also

00:22:23.690 --> 00:22:25.770
think it's interesting
to break out of the grid.

00:22:25.770 --> 00:22:28.186
So here, for example, we have
this floating action button,

00:22:28.186 --> 00:22:31.200
which kind of straddles this
title and description field.

00:22:31.200 --> 00:22:34.624
This breaking out of the
grid draws attention to it.

00:22:34.624 --> 00:22:36.290
But you can come into
issues when you're

00:22:36.290 --> 00:22:37.331
doing this kind of thing.

00:22:37.331 --> 00:22:40.616
So you don't want the FAB
to be on top of any text.

00:22:40.616 --> 00:22:41.990
You don't want it
to be obscuring

00:22:41.990 --> 00:22:43.810
any important information.

00:22:43.810 --> 00:22:45.250
So what are you going to do?

00:22:45.250 --> 00:22:47.540
You could, for example,
just add some padding

00:22:47.540 --> 00:22:50.950
to the right,
which might prevent

00:22:50.950 --> 00:22:52.500
any overlapping of the text.

00:22:52.500 --> 00:22:54.384
But you're going to
end up with this less

00:22:54.384 --> 00:22:55.800
than ideal
presentation, where you

00:22:55.800 --> 00:22:58.600
have these big empty spaces.

00:22:58.600 --> 00:23:03.689
What we really want is-- my
slide to advance-- there we go.

00:23:03.689 --> 00:23:05.522
What you really want
is to be able to lay it

00:23:05.522 --> 00:23:07.790
out to the full bounds,
but then kind of flow

00:23:07.790 --> 00:23:14.580
around any overlapping areas,
like this, which is what we do.

00:23:14.580 --> 00:23:15.990
Let me go back a second.

00:23:15.990 --> 00:23:19.100
So everyone knows that TextView
doesn't have a flowing API,

00:23:19.100 --> 00:23:19.910
unfortunately.

00:23:19.910 --> 00:23:22.810
But hopefully you know that
TextView uses something else

00:23:22.810 --> 00:23:24.830
under the hood to
actually lay out its text,

00:23:24.830 --> 00:23:28.510
it's just called
Layout, funnily enough.

00:23:28.510 --> 00:23:30.490
But Layout got an
interesting-- I'll

00:23:30.490 --> 00:23:32.140
say static layout,
particularly, which

00:23:32.140 --> 00:23:34.170
is what's used for
unchanging text-- got

00:23:34.170 --> 00:23:38.020
an interesting addition in API
23, which is called setIndents.

00:23:38.020 --> 00:23:42.260
So this API takes an array of
ints specifying the indents

00:23:42.260 --> 00:23:45.100
to use per line.

00:23:45.100 --> 00:23:47.600
So we can use that
API to work out

00:23:47.600 --> 00:23:52.440
which lines of text in the title
field overlap with the FAB,

00:23:52.440 --> 00:23:53.460
and set an indent.

00:23:53.460 --> 00:23:56.760
So on that second line, set
an indent on the right, such

00:23:56.760 --> 00:23:59.780
that we can build this
kind of flowing behavior.

00:23:59.780 --> 00:24:01.770
So create a custom
view again, which

00:24:01.770 --> 00:24:04.780
again, works out where the
overlap between these two views

00:24:04.780 --> 00:24:06.510
are.

00:24:06.510 --> 00:24:09.080
And it calculates an
array of these indents

00:24:09.080 --> 00:24:10.110
that we want to set.

00:24:10.110 --> 00:24:12.250
So essentially, the second
line in the right index

00:24:12.250 --> 00:24:14.480
is going to have an indent.

00:24:14.480 --> 00:24:17.160
And then you create a layout
through the Builder object

00:24:17.160 --> 00:24:19.080
passing those indents,
again, letting

00:24:19.080 --> 00:24:23.110
you wrap the text around it.

00:24:23.110 --> 00:24:25.170
This is kind of cool approach.

00:24:25.170 --> 00:24:27.550
I think is quite a useful thing.

00:24:27.550 --> 00:24:29.630
But it comes with
a giant warning.

00:24:29.630 --> 00:24:32.830
So as you can see,
this extends View.

00:24:32.830 --> 00:24:36.530
Unfortunately, TextView doesn't
have a set layout method,

00:24:36.530 --> 00:24:38.570
so you can't just create
your own static layout

00:24:38.570 --> 00:24:39.930
and pass it into TextView.

00:24:39.930 --> 00:24:42.400
So I'm having to extend
view, and then in OnDraw,

00:24:42.400 --> 00:24:45.630
having to draw the
layout on to the canvas.

00:24:45.630 --> 00:24:47.346
So it's a pretty cool
technique, but that

00:24:47.346 --> 00:24:48.970
means you're not at
TextView, so if you

00:24:48.970 --> 00:24:51.926
have to do things like right to
left support or accessibility,

00:24:51.926 --> 00:24:53.300
you're kind of on
your own there.

00:24:53.300 --> 00:24:55.040
So great power,
great responsibility.

00:24:55.040 --> 00:24:55.860
One of those APIs.

00:24:58.720 --> 00:24:59.220
Right.

00:24:59.220 --> 00:25:01.310
While I'm talking
about layouts as well,

00:25:01.310 --> 00:25:03.687
one of the things I wanted
to do on the grid screen

00:25:03.687 --> 00:25:05.270
is provide a bit
more visual interest.

00:25:05.270 --> 00:25:07.867
While a regular grid
is fine, I actually

00:25:07.867 --> 00:25:09.700
wanted to provide a bit
more visual interest

00:25:09.700 --> 00:25:11.690
and highlight certain items.

00:25:11.690 --> 00:25:15.190
So here for example,
the middle image

00:25:15.190 --> 00:25:17.174
is actually spanning
two columns.

00:25:17.174 --> 00:25:19.840
So it's maintaining aspect ratio
but spanning two columns again,

00:25:19.840 --> 00:25:22.740
to provide visual
interest to certain items.

00:25:22.740 --> 00:25:26.650
RecyclerView's gridLayoutManager
makes this super simple to do.

00:25:26.650 --> 00:25:32.050
You basically set a grid
span-- setSpanSizeLookup

00:25:32.050 --> 00:25:34.640
to return how many
columns it should span.

00:25:34.640 --> 00:25:36.680
And I basically delegate
that to my adapter

00:25:36.680 --> 00:25:38.384
which knows more
about each item.

00:25:38.384 --> 00:25:40.800
The problem with this approach
is that grid layout manager

00:25:40.800 --> 00:25:42.470
will happily leave gaps.

00:25:42.470 --> 00:25:45.695
So if you say I want
to span two columns,

00:25:45.695 --> 00:25:47.320
but it's actually in
the second column,

00:25:47.320 --> 00:25:49.070
it'll actually just
leave a gap and put it

00:25:49.070 --> 00:25:51.060
on to the next line,
which isn't what I want.

00:25:51.060 --> 00:25:54.030
So here's a protip on
how you can avoid that.

00:25:54.030 --> 00:25:56.650
I essentially hold onto
the positions of the items

00:25:56.650 --> 00:25:59.690
that I want to expand
across multiple columns.

00:25:59.690 --> 00:26:02.210
Do some bookkeeping to basically
work out where in the row

00:26:02.210 --> 00:26:03.315
that will appear.

00:26:03.315 --> 00:26:04.940
Because I want to
span all the columns,

00:26:04.940 --> 00:26:07.470
I know that the item has
to appear in the leftmost,

00:26:07.470 --> 00:26:12.180
in column 0-- row 0-- row
position 0 in order to span,

00:26:12.180 --> 00:26:13.680
otherwise it's going
to leave a gap.

00:26:13.680 --> 00:26:15.721
And I then essentially
swap it with the next item

00:26:15.721 --> 00:26:20.430
it could appear in in order
to not leave any gaps.

00:26:20.430 --> 00:26:23.050
I want to say that this
approach has some drawbacks.

00:26:23.050 --> 00:26:26.430
So right now, here's how
it looks on a tablet.

00:26:26.430 --> 00:26:28.060
So here I am using
four columns--

00:26:28.060 --> 00:26:29.920
but essentially,
spanning four columns,

00:26:29.920 --> 00:26:32.060
maintaining aspect
ratio, isn't ideal.

00:26:32.060 --> 00:26:33.510
It's leading to
this whole thing.

00:26:33.510 --> 00:26:34.968
So here's a sneak
peek of something

00:26:34.968 --> 00:26:36.360
I'm working on right now.

00:26:36.360 --> 00:26:39.710
So this is a custom
RecyclerView layout manager,

00:26:39.710 --> 00:26:42.670
which is allowing me
to span both columns

00:26:42.670 --> 00:26:44.320
and rows simultaneously.

00:26:44.320 --> 00:26:47.840
So that you can have this item
which is appearing, taking up

00:26:47.840 --> 00:26:49.390
four cells, as it were.

00:26:49.390 --> 00:26:51.290
And other items are
flowing around it.

00:26:51.290 --> 00:26:53.690
So this will be getting pushed
open source real soon now.

00:26:53.690 --> 00:26:54.190
Promise.

00:26:56.795 --> 00:26:58.920
And next, I'm going to talk
about what you probably

00:26:58.920 --> 00:27:00.567
guessed is one of
my favorite portions

00:27:00.567 --> 00:27:02.150
of the Material spec,
which is talking

00:27:02.150 --> 00:27:03.476
about meaningful motion.

00:27:03.476 --> 00:27:05.350
I just want give a
massive shout out, though.

00:27:05.350 --> 00:27:07.480
It was a really, really
good session last night

00:27:07.480 --> 00:27:09.290
by John Schlemmer, talking
about their recent updates

00:27:09.290 --> 00:27:10.640
to the Motion design guidelines.

00:27:10.640 --> 00:27:13.265
If you haven't checked it out,
I highly encourage you to do so.

00:27:15.970 --> 00:27:17.760
So the meaningful
motion section talks

00:27:17.760 --> 00:27:21.480
about using motion
not just for showbiz,

00:27:21.480 --> 00:27:23.210
but for actually
guiding focus and giving

00:27:23.210 --> 00:27:26.529
a spatial model for providing
interaction cues and character.

00:27:26.529 --> 00:27:28.320
So let's look at what
these principles mean

00:27:28.320 --> 00:27:30.950
and how they help me in my app.

00:27:30.950 --> 00:27:33.980
So here for example,
is a list of players--

00:27:33.980 --> 00:27:35.850
a list of Dribbble users.

00:27:35.850 --> 00:27:38.130
And when you click
on one of them,

00:27:38.130 --> 00:27:40.790
it expands out to go
to a detail screen.

00:27:40.790 --> 00:27:42.790
So again, that could have
been just a new screen

00:27:42.790 --> 00:27:45.740
with a default transition.

00:27:45.740 --> 00:27:47.800
And Motion really, really
helped the design here.

00:27:47.800 --> 00:27:49.530
It's going a bit fast, so
let's slow it down and look

00:27:49.530 --> 00:27:51.160
at the things that's happening.

00:27:51.160 --> 00:27:54.140
When you click on a user,
first thing, I raise it up.

00:27:54.140 --> 00:27:58.300
So it's the idea that this
item is lifting out of the list

00:27:58.300 --> 00:27:59.170
and then grows.

00:27:59.170 --> 00:28:02.440
You see how the whole
card itself grows out

00:28:02.440 --> 00:28:05.070
from its original position,
while also the image--

00:28:05.070 --> 00:28:07.410
the main point of focus
during a transition--

00:28:07.410 --> 00:28:09.590
smoothly transitions from
its previous position

00:28:09.590 --> 00:28:10.640
into a new position.

00:28:10.640 --> 00:28:13.586
And then finally, the rest
of the content enters.

00:28:13.586 --> 00:28:14.710
So how would we build that?

00:28:17.389 --> 00:28:19.180
The first bit, raise
on touch, that's easy.

00:28:19.180 --> 00:28:22.510
That's my friend the stateless
animator we looked at earlier.

00:28:22.510 --> 00:28:26.200
Here we're keying on the state,
if it's pressed or not pressed.

00:28:26.200 --> 00:28:29.330
And we say we want to animate
the translation z based on

00:28:29.330 --> 00:28:30.420
if it's pressed or not.

00:28:30.420 --> 00:28:33.320
That's pretty simple.

00:28:33.320 --> 00:28:34.470
Next up, the expanding row.

00:28:34.470 --> 00:28:36.400
This is a shared
element transition,

00:28:36.400 --> 00:28:39.560
using API 21's transitions API.

00:28:39.560 --> 00:28:41.834
So there's actually two
shared elements going on here.

00:28:41.834 --> 00:28:43.750
The first one, the image,
it's pretty obvious.

00:28:43.750 --> 00:28:44.250
Right?

00:28:44.250 --> 00:28:46.630
You say the image is here,
and it's going to here,

00:28:46.630 --> 00:28:51.070
and this changeBounds
transition will handle the size

00:28:51.070 --> 00:28:52.870
and location change for you.

00:28:52.870 --> 00:28:55.380
The second shared element
is actually the background.

00:28:55.380 --> 00:28:57.274
So the background of
the list item, I say,

00:28:57.274 --> 00:28:58.190
is the shared element.

00:28:58.190 --> 00:29:00.767
And I want it to transition
to the background

00:29:00.767 --> 00:29:01.600
of the details view.

00:29:01.600 --> 00:29:03.950
And it grows out like this.

00:29:03.950 --> 00:29:05.490
So one drawback of
this approach is

00:29:05.490 --> 00:29:07.110
that, by default,
transitions will

00:29:07.110 --> 00:29:09.020
use what's called the
shared element overlay.

00:29:09.020 --> 00:29:11.187
That means that they're
on top of everything else.

00:29:11.187 --> 00:29:13.520
Now if you put the background
on top of everything else,

00:29:13.520 --> 00:29:15.250
you're not going to see any
of the rest of the content.

00:29:15.250 --> 00:29:16.833
So we wanted the
background to come in

00:29:16.833 --> 00:29:18.960
and the content to come
in at the same time.

00:29:18.960 --> 00:29:21.880
So you actually have to turn
off that shared element overlay,

00:29:21.880 --> 00:29:25.290
using this flag in your theme.

00:29:25.290 --> 00:29:29.282
And that will
prevent that issue.

00:29:29.282 --> 00:29:31.240
Next thing I'm going to
call out is-- hopefully

00:29:31.240 --> 00:29:34.880
you noticed it's using
this arced motion approach.

00:29:34.880 --> 00:29:37.490
So things that move linearly
can often seem robotic.

00:29:37.490 --> 00:29:39.660
Using arced motion,
curved motion paths,

00:29:39.660 --> 00:29:43.410
feel more natural and
more organic to us.

00:29:43.410 --> 00:29:45.970
This is super simple to do in
a shared element transition.

00:29:45.970 --> 00:29:49.010
You literally just add this
tag here inside your transition

00:29:49.010 --> 00:29:50.790
definition to say
arcMotion, and it will

00:29:50.790 --> 00:29:52.280
do this arced path for you.

00:29:52.280 --> 00:29:52.850
So easy.

00:29:52.850 --> 00:29:55.220
I love it.

00:29:55.220 --> 00:29:56.960
And the last bit is
a custom translation

00:29:56.960 --> 00:30:00.230
which I wrote, called--
which I've called LiftOff.

00:30:00.230 --> 00:30:05.440
Now, it's easiest to show you
what this does by showing you

00:30:05.440 --> 00:30:06.280
with and without it.

00:30:06.280 --> 00:30:08.730
So here's two versions
of the same video.

00:30:08.730 --> 00:30:10.943
So you touch on the
item-- oh yeah--

00:30:10.943 --> 00:30:12.026
one's with, one's without.

00:30:12.026 --> 00:30:14.090
I hope you see that.

00:30:14.090 --> 00:30:17.570
Hopefully you can see there
that, as they start expanding,

00:30:17.570 --> 00:30:19.707
one of the items is
casting a shadow,

00:30:19.707 --> 00:30:21.790
using my custom transition,
it's a classic shadow,

00:30:21.790 --> 00:30:22.820
and one isn't.

00:30:22.820 --> 00:30:24.890
So it's not [INAUDIBLE].

00:30:24.890 --> 00:30:27.359
It's a bit easier to see
on the way back, actually.

00:30:27.359 --> 00:30:28.900
This is because, if
you haven't seen,

00:30:28.900 --> 00:30:32.241
transitions all happen in
the destination window.

00:30:32.241 --> 00:30:33.990
They're all happening
in the details view.

00:30:33.990 --> 00:30:35.573
So in the details
view, the background

00:30:35.573 --> 00:30:38.470
has no elevation or anything,
it's the background.

00:30:38.470 --> 00:30:41.290
So it, by default,
won't cast a shadow.

00:30:41.290 --> 00:30:43.700
So by running a custom
transition, which will actually

00:30:43.700 --> 00:30:45.210
set some elevation
on the background

00:30:45.210 --> 00:30:49.020
while it's transitioning, we
can actually cast this shadow.

00:30:49.020 --> 00:30:51.590
This might seem-- maybe I was
being a bit too nit-picky,

00:30:51.590 --> 00:30:54.410
and-- does this
actually add anything?

00:30:54.410 --> 00:30:56.130
You might not see
it at full speed,

00:30:56.130 --> 00:30:57.310
but it just feels better.

00:30:57.310 --> 00:30:58.440
It feels right.

00:30:58.440 --> 00:30:59.870
Trust me.

00:30:59.870 --> 00:31:02.790
This is the easiest transition
I've ever written in my life.

00:31:02.790 --> 00:31:05.100
You basically pass it
in at a value elevation

00:31:05.100 --> 00:31:07.740
to use during the change.

00:31:07.740 --> 00:31:11.000
And you just animate the
translations z property

00:31:11.000 --> 00:31:14.610
to start off from the elevated
value and settle down back to 0

00:31:14.610 --> 00:31:16.390
over the course
of the transition.

00:31:16.390 --> 00:31:18.860
And I actually run this for
a slightly longer duration

00:31:18.860 --> 00:31:23.320
than the-- let me see if I can
get this to show-- I run it

00:31:23.320 --> 00:31:26.220
for a slightly longer duration
than the ChangeBounds, as well.

00:31:26.220 --> 00:31:28.230
So you see it actually
changes into position

00:31:28.230 --> 00:31:29.320
and then settles down.

00:31:29.320 --> 00:31:31.200
So it gives this
effect of lifting up

00:31:31.200 --> 00:31:34.472
and growing and collapsing
and setting back in.

00:31:38.250 --> 00:31:41.320
Last piece is that the
image is moving upwards,

00:31:41.320 --> 00:31:43.860
so I wanted the content
to enter upwards with it,

00:31:43.860 --> 00:31:46.110
to make it this kind
of cohesive experience.

00:31:46.110 --> 00:31:48.797
So rather than the image coming
in and the content just popping

00:31:48.797 --> 00:31:50.630
in, I wanted it to like
feel like it was all

00:31:50.630 --> 00:31:52.710
moving in the same path.

00:31:52.710 --> 00:31:55.329
So mostly it's handled with
this window content transition.

00:31:55.329 --> 00:31:57.120
So there's both a shared
element transition

00:31:57.120 --> 00:31:59.740
and the window content
transition on the same screen.

00:31:59.740 --> 00:32:01.830
And it's just using
this slide to slide

00:32:01.830 --> 00:32:04.650
the content in from the bottom.

00:32:04.650 --> 00:32:06.070
But as we saw
before, this screen

00:32:06.070 --> 00:32:09.706
is some static content and
then a RecyclerView of items.

00:32:09.706 --> 00:32:11.080
So that led to
this weird feeling

00:32:11.080 --> 00:32:12.788
where some of the
content would slide in,

00:32:12.788 --> 00:32:15.460
and then the RecyclerView
does a network request,

00:32:15.460 --> 00:32:17.700
gets the images, and
then they just load in,

00:32:17.700 --> 00:32:19.460
which wasn't ideal.

00:32:19.460 --> 00:32:23.640
So instead, I wrote a
custom item animator

00:32:23.640 --> 00:32:26.770
for the RecyclerView, which
will then animate the items

00:32:26.770 --> 00:32:29.770
in upwards, as they load.

00:32:29.770 --> 00:32:32.380
So just extend the default
item animator that RecyclerView

00:32:32.380 --> 00:32:33.430
gives you for free.

00:32:33.430 --> 00:32:36.366
And I overrode the animateAdd
method, where you basically

00:32:36.366 --> 00:32:36.990
do some set up.

00:32:36.990 --> 00:32:39.480
You basically translate
it downwards and set it

00:32:39.480 --> 00:32:41.440
to invisible.

00:32:41.440 --> 00:32:43.525
And then when you run
the pending animations,

00:32:43.525 --> 00:32:45.900
you animate those properties
back to their natural place.

00:32:45.900 --> 00:32:50.930
You fade it in, and animate
it upwards, and do some stuff.

00:32:50.930 --> 00:32:53.600
So that was one transition.

00:32:53.600 --> 00:32:57.459
Another transition I want to
talk about is the search view.

00:32:57.459 --> 00:32:59.375
So this is what searching
looks like in Plaid.

00:33:02.780 --> 00:33:05.260
And again, there's quite
a lot going on here.

00:33:05.260 --> 00:33:08.800
So let's slow it down and
step through it a little bit.

00:33:08.800 --> 00:33:11.925
Firstly, when you
come into the screen,

00:33:11.925 --> 00:33:13.940
I expand out this
scrim, and then

00:33:13.940 --> 00:33:16.610
also do an animation
on the icon itself

00:33:16.610 --> 00:33:19.610
to change it from the
search icon to the back.

00:33:19.610 --> 00:33:23.050
And then fade in
the search field.

00:33:23.050 --> 00:33:26.850
And then, once you've done a
query, we load in the results.

00:33:26.850 --> 00:33:30.670
So the goal here is really
about directing attention.

00:33:30.670 --> 00:33:33.200
So when you touch
on the search thing,

00:33:33.200 --> 00:33:35.276
I want it to feel like
this transient experience.

00:33:35.276 --> 00:33:36.900
So that it's just
coming in transiently

00:33:36.900 --> 00:33:38.316
over the top of
the content, which

00:33:38.316 --> 00:33:41.212
is why I do that scrim
coming in slowly and gently.

00:33:41.212 --> 00:33:42.670
But the next thing
I want you to do

00:33:42.670 --> 00:33:44.878
is to enter a search query
in the search field, which

00:33:44.878 --> 00:33:45.980
is over on the left.

00:33:45.980 --> 00:33:48.460
So that's why I feel the
animation over from one side

00:33:48.460 --> 00:33:52.140
directs your attention to
what you have to do next.

00:33:52.140 --> 00:33:54.810
Similarly, once you've
entered your query,

00:33:54.810 --> 00:33:57.360
you can see that the
container expands

00:33:57.360 --> 00:33:59.887
downwards to make room for
the search results to come in.

00:33:59.887 --> 00:34:01.720
Again, that's priming
you for the attention.

00:34:01.720 --> 00:34:03.180
For you to say,
OK, I've done that.

00:34:03.180 --> 00:34:04.887
Now I'm looking
down here to where

00:34:04.887 --> 00:34:05.970
the content's going to be.

00:34:05.970 --> 00:34:08.723
It's all about directing
your attention.

00:34:08.723 --> 00:34:11.139
Like the previous screen, this
is obviously doing network.

00:34:11.139 --> 00:34:11.639
Right?

00:34:11.639 --> 00:34:13.865
It's going out, hitting an
API with a search query,

00:34:13.865 --> 00:34:15.906
and getting content back,
and loading the images.

00:34:15.906 --> 00:34:18.389
I feel like this
animation also helps hide

00:34:18.389 --> 00:34:19.739
some of that work going on.

00:34:19.739 --> 00:34:21.473
It's distracting.

00:34:21.473 --> 00:34:22.889
The animation
stretching downwards

00:34:22.889 --> 00:34:25.290
is buying time while I'm
doing this networking

00:34:25.290 --> 00:34:28.190
and coming back to make it
feel more responsive than it,

00:34:28.190 --> 00:34:30.319
perhaps, technically is.

00:34:30.319 --> 00:34:32.360
Now I'm not going to go
through every single step

00:34:32.360 --> 00:34:34.901
of this animation, because it's
using a lot of the principles

00:34:34.901 --> 00:34:37.159
we've talked about before,
using animators and so on.

00:34:37.159 --> 00:34:39.630
One thing I do want to focus
on is on the icon animation.

00:34:39.630 --> 00:34:41.880
I feel like doing
the icon animation,

00:34:41.880 --> 00:34:45.020
as well as directing attention,
it also is a playful element.

00:34:45.020 --> 00:34:49.860
It embodies some character
to the application, I feel.

00:34:49.860 --> 00:34:51.610
I also have to
call up some credit

00:34:51.610 --> 00:34:54.640
to-- I was inspired to build
this animation from something

00:34:54.640 --> 00:34:55.389
I saw on Dribbble.

00:34:55.389 --> 00:34:57.100
So it feels quite apt.

00:34:57.100 --> 00:34:58.890
A dribbled line
referencing Dribbble.

00:34:58.890 --> 00:35:00.450
Anway--

00:35:00.450 --> 00:35:03.230
How would we build an
animation like this?

00:35:03.230 --> 00:35:05.810
So this is a animated
vector drawable.

00:35:05.810 --> 00:35:08.760
So hopefully if anyone here
has worked with vectors,

00:35:08.760 --> 00:35:12.080
you know that you can basically
draw lines and fill paths

00:35:12.080 --> 00:35:13.301
and so on and so forth.

00:35:13.301 --> 00:35:15.800
But not many people, I think,
know about the trim properties

00:35:15.800 --> 00:35:16.980
you can set on a line.

00:35:16.980 --> 00:35:19.930
So here's a line,
which is stroked--

00:35:19.930 --> 00:35:21.520
which goes from left to right.

00:35:21.520 --> 00:35:23.317
And you can set these
trim properties,

00:35:23.317 --> 00:35:25.650
which basically say how much--
which portion of the line

00:35:25.650 --> 00:35:26.580
you draw.

00:35:26.580 --> 00:35:31.050
So if I set a trim end of 0.75,
it means from 75% of the way

00:35:31.050 --> 00:35:33.630
to the end won't be drawn.

00:35:33.630 --> 00:35:36.960
And similarly, if you set
from trimStart of 0.5, then

00:35:36.960 --> 00:35:39.680
the first half won't get drawn.

00:35:39.680 --> 00:35:41.220
So knowing how
that works, we can

00:35:41.220 --> 00:35:43.740
see this is actually
just four lines.

00:35:43.740 --> 00:35:46.876
So there's one line which joins
at that stem, as I call it.

00:35:46.876 --> 00:35:48.500
And there's two lines
for the arrowhead

00:35:48.500 --> 00:35:50.920
and one line for the
circle at the top.

00:35:50.920 --> 00:35:53.100
And all we do is we
animate the trim start

00:35:53.100 --> 00:35:56.890
and end values in order to get
it to trace out this animation.

00:35:56.890 --> 00:36:00.180
So the arrowhead and the circles
are going to go completely,

00:36:00.180 --> 00:36:01.730
clipping it to make it hide.

00:36:01.730 --> 00:36:04.690
Whereas the stem thing-- part
of it's always on screen.

00:36:04.690 --> 00:36:06.820
We never actually trim the
whole thing, as it were.

00:36:06.820 --> 00:36:09.700
It just animates
between the two states.

00:36:09.700 --> 00:36:12.380
Notice also that the
stretching out of the lines.

00:36:12.380 --> 00:36:14.745
As it stretches out,
this is really, really

00:36:14.745 --> 00:36:16.870
easily achieved just by
setting different durations

00:36:16.870 --> 00:36:19.690
for animating the start and end.

00:36:19.690 --> 00:36:21.300
So here's how you build it.

00:36:21.300 --> 00:36:22.950
So this is one vector drawable.

00:36:22.950 --> 00:36:24.350
Like I say, there's four lines.

00:36:24.350 --> 00:36:26.680
So each of these path
objects is a line.

00:36:26.680 --> 00:36:28.860
So it has a name, so you
can identify it later on.

00:36:28.860 --> 00:36:30.360
And a couple of
protips for building

00:36:30.360 --> 00:36:33.020
these things I
found really helpful

00:36:33.020 --> 00:36:35.850
is to create a resources file,
like a regular resources file

00:36:35.850 --> 00:36:37.900
that you put your strings
and ints and stuff in.

00:36:37.900 --> 00:36:40.885
And reference that and put
the paths and the fraction

00:36:40.885 --> 00:36:42.760
of the trim values in
that, because if you're

00:36:42.760 --> 00:36:44.259
going to refer to
these a few times,

00:36:44.259 --> 00:36:47.560
it makes it easier to
only have it in one place.

00:36:47.560 --> 00:36:49.170
And then you define
object animators

00:36:49.170 --> 00:36:51.487
for animating each
of those properties.

00:36:51.487 --> 00:36:53.570
So here's one where we're
animating the trim start

00:36:53.570 --> 00:36:54.070
and end.

00:36:54.070 --> 00:36:56.111
And then here, referencing
out to those fractions

00:36:56.111 --> 00:36:57.150
that I want to trim to.

00:36:57.150 --> 00:36:59.820
And again, this is where
setting a different duration

00:36:59.820 --> 00:37:02.070
allows you to have that
stretching out and coming back

00:37:02.070 --> 00:37:04.236
together feel really,
really simply.

00:37:04.236 --> 00:37:05.610
Then the last
piece of the puzzle

00:37:05.610 --> 00:37:07.960
is the animated vector,
which pulls together

00:37:07.960 --> 00:37:09.990
the drawable and the animator.

00:37:09.990 --> 00:37:11.890
And says, what to run it on.

00:37:11.890 --> 00:37:13.370
So here you identify it by name.

00:37:13.370 --> 00:37:14.860
So on that stem,
run this animator.

00:37:17.860 --> 00:37:20.780
And then finally, to use it,
you just load it as a drawable,

00:37:20.780 --> 00:37:23.610
set it on ImageView
and call start.

00:37:23.610 --> 00:37:26.490
So hopefully you can see,
maybe a bit of effort,

00:37:26.490 --> 00:37:30.400
but I think worth it for the
quality of some character

00:37:30.400 --> 00:37:31.736
to the application.

00:37:31.736 --> 00:37:33.360
So I want to call
out-- this is the way

00:37:33.360 --> 00:37:35.990
to run an AVD for a
one-shot type operation,

00:37:35.990 --> 00:37:37.312
just to run the animation.

00:37:37.312 --> 00:37:41.870
But a nice way you can do it
is often to do state changes.

00:37:41.870 --> 00:37:44.810
So for example, here
is when you like

00:37:44.810 --> 00:37:47.690
or unlike a shot on Dribbble.

00:37:47.690 --> 00:37:51.630
Basically you have animations
between those two states.

00:37:51.630 --> 00:37:53.814
So when you like
it, it's basically--

00:37:53.814 --> 00:37:55.230
there's two versions
of the heart.

00:37:55.230 --> 00:37:57.521
There's a stroked version
with a filled version on top,

00:37:57.521 --> 00:37:59.100
and then you apply
a clip, which you

00:37:59.100 --> 00:38:01.070
animate the clip
up and down, which

00:38:01.070 --> 00:38:02.160
gives you this filling up.

00:38:02.160 --> 00:38:05.050
And unliking is basically,
two paths and you just

00:38:05.050 --> 00:38:08.166
rotate and fade them, and then
do the the trim line thing.

00:38:08.166 --> 00:38:11.360
That's a fun little
animation that you can write.

00:38:11.360 --> 00:38:13.690
But Android offers you
this animated selector,

00:38:13.690 --> 00:38:14.960
which makes it way easier.

00:38:14.960 --> 00:38:17.240
You don't have to manually
run all these animations

00:38:17.240 --> 00:38:18.460
all the time.

00:38:18.460 --> 00:38:20.600
It's a bit like a
drawable selector.

00:38:20.600 --> 00:38:23.950
So you have states like,
for example, the FAB

00:38:23.950 --> 00:38:24.740
is just checkable.

00:38:24.740 --> 00:38:30.010
So when you press it,
it's state checked.

00:38:30.010 --> 00:38:33.450
But the animated selector,
unlike its regular selector

00:38:33.450 --> 00:38:36.230
cousin, lets you
define a animation

00:38:36.230 --> 00:38:38.570
to run when moving from one
of these states to another.

00:38:38.570 --> 00:38:41.250
So when it goes from
checked to unchecked,

00:38:41.250 --> 00:38:45.309
it will run that animated vector
drawable, the avd_heart_break.

00:38:45.309 --> 00:38:47.058
And you'll get that
nice little animation.

00:38:50.720 --> 00:38:53.360
So here's just a few
more examples of where

00:38:53.360 --> 00:38:55.380
we've used little animations.

00:38:55.380 --> 00:38:58.270
I really, really, really
believe that these

00:38:58.270 --> 00:39:01.499
are a real opportunity to
bring character and whimsy

00:39:01.499 --> 00:39:03.540
to your application, and
make it more fun to use,

00:39:03.540 --> 00:39:06.080
have more personality.

00:39:06.080 --> 00:39:07.820
You might think,
are these necessary?

00:39:07.820 --> 00:39:10.450
Are these strictly necessary
to make your application

00:39:10.450 --> 00:39:12.440
functionally good?

00:39:12.440 --> 00:39:13.162
Probably not.

00:39:13.162 --> 00:39:14.870
But I really, really
think it's worth it.

00:39:14.870 --> 00:39:16.300
And I encourage you
to look into using it.

00:39:16.300 --> 00:39:18.174
And they're also really,
really fun to write.

00:39:21.290 --> 00:39:21.835
So that's it.

00:39:21.835 --> 00:39:25.370
That's hopefully given you a
appreciation of the Material

00:39:25.370 --> 00:39:26.580
Design principles.

00:39:26.580 --> 00:39:28.940
I really feel that
they've helped

00:39:28.940 --> 00:39:30.809
make my application better.

00:39:30.809 --> 00:39:32.350
The purpose of this
talk today wasn't

00:39:32.350 --> 00:39:35.050
to say you should all copy over
the code from my application

00:39:35.050 --> 00:39:36.466
and put it into
your applications.

00:39:36.466 --> 00:39:37.680
[LAUGHTER]

00:39:37.680 --> 00:39:40.000
Although you can,
it's open source.

00:39:40.000 --> 00:39:43.771
What I really want to encourage
you to do is to see it's

00:39:43.771 --> 00:39:44.270
worth it.

00:39:44.270 --> 00:39:46.580
I think it's worth putting
in the effort of going

00:39:46.580 --> 00:39:49.820
the extra yard, the extra
mile to really bring

00:39:49.820 --> 00:39:53.130
some quality, some character
to your applications.

00:39:53.130 --> 00:39:56.016
And go out and make
something which is awesome.

00:39:56.016 --> 00:39:57.390
There's a few
links to follow up.

00:39:57.390 --> 00:40:00.460
Again, you can get the source
code or you can join the beta.

00:40:00.460 --> 00:40:02.252
There's also an awesome
code lab for anyone

00:40:02.252 --> 00:40:04.668
wanting to get their hands
dirty with some Material Design

00:40:04.668 --> 00:40:05.430
goodness.

00:40:05.430 --> 00:40:08.450
And always, you should
subscribe up to Google Design.

00:40:08.450 --> 00:40:09.560
And that is it.

00:40:09.560 --> 00:40:10.710
Thank you very much.

00:40:10.710 --> 00:40:11.610
[APPLAUSE]

00:40:11.610 --> 00:40:14.660
[MUSIC PLAYING]

