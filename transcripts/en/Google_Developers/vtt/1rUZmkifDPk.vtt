WEBVTT
Kind: captions
Language: en

00:00:00.285 --> 00:00:02.910
JEN KING : Hi, I'm Jen King, the
tech lead on the Drive Android

00:00:02.910 --> 00:00:03.520
API.

00:00:03.520 --> 00:00:04.978
And today I'm going
to show you how

00:00:04.978 --> 00:00:07.130
to add drive integration
to your Android app.

00:00:07.130 --> 00:00:09.265
This API is a part of
Google Play services, which

00:00:09.265 --> 00:00:11.640
means that you can add a small
amount of code to your app

00:00:11.640 --> 00:00:13.500
and get the benefits
of these API features

00:00:13.500 --> 00:00:17.122
on nearly every Android device
running Gingerbread or higher.

00:00:17.122 --> 00:00:19.580
There are a lot of reasons that
Google Drive integration is

00:00:19.580 --> 00:00:20.940
great for users.

00:00:20.940 --> 00:00:23.580
Their files get automatically
backed up to the cloud,

00:00:23.580 --> 00:00:26.490
are accessible on multiple
devices including the web,

00:00:26.490 --> 00:00:29.300
and can be viewed and edited
on mobile devices and the web

00:00:29.300 --> 00:00:32.810
using Drive-enabled
apps, even when offline.

00:00:32.810 --> 00:00:34.450
So let's get started.

00:00:34.450 --> 00:00:36.910
I'm going to demonstrate how
to integrate an app with Drive

00:00:36.910 --> 00:00:39.420
using our receipt
collector sample app.

00:00:39.420 --> 00:00:41.840
This app allows users to take
pictures of their receipts

00:00:41.840 --> 00:00:44.980
and store them in Drive
to manage their spending.

00:00:44.980 --> 00:00:46.870
In order to use the
Drive Android API,

00:00:46.870 --> 00:00:49.140
you first need to register
your app as a Drive app

00:00:49.140 --> 00:00:52.140
by creating an entry in
the Developer Console.

00:00:52.140 --> 00:00:53.600
The Console will
ask you to specify

00:00:53.600 --> 00:00:56.266
the package name of your app and
the fingerprint of your signing

00:00:56.266 --> 00:00:59.550
certificate so that the Drive
API can authenticate your app.

00:00:59.550 --> 00:01:01.344
Creating a project
ID on the Dev Console

00:01:01.344 --> 00:01:03.010
allows you to build
versions of your app

00:01:03.010 --> 00:01:06.610
across Android, iOS, and the
web and share a single project

00:01:06.610 --> 00:01:08.850
configuration for all of them.

00:01:08.850 --> 00:01:10.416
Once your project
is registered, you

00:01:10.416 --> 00:01:11.790
can start using
the Drive Android

00:01:11.790 --> 00:01:13.790
API by including the
Google Play services

00:01:13.790 --> 00:01:16.430
APIs in your application.

00:01:16.430 --> 00:01:19.410
Before integrating with Drive,
our app just saves the receipts

00:01:19.410 --> 00:01:21.650
to the local file system
on the device, which

00:01:21.650 --> 00:01:24.510
means they aren't easily
accessible on other devices.

00:01:24.510 --> 00:01:26.320
If I lose or break
my device, the data

00:01:26.320 --> 00:01:27.800
might get lost with it.

00:01:27.800 --> 00:01:29.690
However, it's easy to
back up these receipts

00:01:29.690 --> 00:01:32.720
to Drive using the
Drive Android API.

00:01:32.720 --> 00:01:34.390
To do this, we'll
create a new file

00:01:34.390 --> 00:01:36.560
with the image bytes
using the Drive API, which

00:01:36.560 --> 00:01:38.750
will sync the data
up to the server.

00:01:38.750 --> 00:01:42.320
We need to write the receipt
image to a contents object

00:01:42.320 --> 00:01:44.820
and create a new Drive
file using this contents.

00:01:44.820 --> 00:01:46.710
For now, we'll just
add all the receipts

00:01:46.710 --> 00:01:50.170
to the user's root folder,
also called My Drive.

00:01:50.170 --> 00:01:53.000
To save the new file, we call
createFile on the folder where

00:01:53.000 --> 00:01:55.510
we want to insert the file
and pass in the contents

00:01:55.510 --> 00:01:57.200
object containing the data.

00:01:57.200 --> 00:02:01.070
The createFile call will return
the Drive ID of the new file.

00:02:01.070 --> 00:02:03.010
Receipts will now get
automatically uploaded

00:02:03.010 --> 00:02:05.760
to the user's Drive, allowing
users to view and organize them

00:02:05.760 --> 00:02:07.690
in the Drive Web UI.

00:02:07.690 --> 00:02:09.580
Next, we need to
change our receipt list

00:02:09.580 --> 00:02:11.170
to request the list
of receipt files

00:02:11.170 --> 00:02:14.560
from the Drive API instead
of the local file system.

00:02:14.560 --> 00:02:17.350
To do this, we'll query for all
files in the user's My Drive

00:02:17.350 --> 00:02:19.960
folder that are accessible
by the receipts app.

00:02:19.960 --> 00:02:22.270
This query uses the local
Drive database rather than

00:02:22.270 --> 00:02:25.210
the server, so it will
still work while offline.

00:02:25.210 --> 00:02:28.030
The Drive Android API will
automatically sync metadata

00:02:28.030 --> 00:02:30.554
for files created
from other devices.

00:02:30.554 --> 00:02:31.970
We'll change our
receipt list view

00:02:31.970 --> 00:02:34.110
to use data from the
Drive API by changing

00:02:34.110 --> 00:02:36.630
the adapter in our list view
to use the metadata buffer

00:02:36.630 --> 00:02:38.710
object returned by
the query method.

00:02:38.710 --> 00:02:40.590
We use the title field
to generate an entry

00:02:40.590 --> 00:02:42.590
for each file on the list.

00:02:42.590 --> 00:02:45.390
Last, we need to display the
receipt image and description

00:02:45.390 --> 00:02:47.350
when users open
it from the list.

00:02:47.350 --> 00:02:49.530
To display the receipt
image, get the Drive file

00:02:49.530 --> 00:02:52.250
for the receipt using
DriveApi.getFile,

00:02:52.250 --> 00:02:55.830
and open the contents using
DriveFile.openContents.

00:02:55.830 --> 00:02:58.450
If the file content is already
available on the device,

00:02:58.450 --> 00:03:00.820
the Open File method
will return immediately.

00:03:00.820 --> 00:03:02.580
And if not, the
Drive Android API

00:03:02.580 --> 00:03:05.290
will fetch the content
from the server for you.

00:03:05.290 --> 00:03:07.630
Now, the app functions
just as it did before

00:03:07.630 --> 00:03:09.080
with the added
benefit that users

00:03:09.080 --> 00:03:11.580
can open all of their receipts
on any Android device,

00:03:11.580 --> 00:03:13.074
as well as on the web.

00:03:13.074 --> 00:03:14.490
There are three
more cool features

00:03:14.490 --> 00:03:16.780
that can help us to make
the user experience better.

00:03:16.780 --> 00:03:20.570
Pinning files, the File
Picker UI, and app folders.

00:03:20.570 --> 00:03:22.970
First, you can allow your
users to save receipts

00:03:22.970 --> 00:03:24.910
for offline use,
or pin the files,

00:03:24.910 --> 00:03:26.850
using the Set Pinned API.

00:03:26.850 --> 00:03:29.460
This API will ensure that the
file content is on the device

00:03:29.460 --> 00:03:31.340
and will keep it up to date.

00:03:31.340 --> 00:03:32.940
To surface this
feature to users,

00:03:32.940 --> 00:03:34.890
we'll add a Pin button
into our View Receipt

00:03:34.890 --> 00:03:36.500
UI, which allows
the user to choose

00:03:36.500 --> 00:03:38.480
to keep the file on the device.

00:03:38.480 --> 00:03:40.870
Second, we're currently
saving all receipts

00:03:40.870 --> 00:03:42.200
to the user's My Drive folder.

00:03:42.200 --> 00:03:44.804
But what if they want to
be a little more organized?

00:03:44.804 --> 00:03:46.220
We can allow users
to choose which

00:03:46.220 --> 00:03:48.850
folder to use for saving their
receipts by launching the Drive

00:03:48.850 --> 00:03:49.940
File Picker.

00:03:49.940 --> 00:03:52.340
Once the user selects Folder,
we save this preference

00:03:52.340 --> 00:03:52.960
to the device.

00:03:52.960 --> 00:03:54.690
And every time we
create a new receipt,

00:03:54.690 --> 00:03:57.100
we create it in the
selected folder.

00:03:57.100 --> 00:03:59.580
Last, it would be a lot
better if this preference were

00:03:59.580 --> 00:04:01.610
consistent between
multiple devices.

00:04:01.610 --> 00:04:03.840
We could store our
preferences in a file in Drive

00:04:03.840 --> 00:04:05.710
just like we do with
receipts, but it

00:04:05.710 --> 00:04:07.210
would be better if
we didn't clutter

00:04:07.210 --> 00:04:09.200
the user's Drive with
preference files.

00:04:09.200 --> 00:04:11.210
Here's where our last
feature comes in.

00:04:11.210 --> 00:04:13.020
App folders are a
special type of folder

00:04:13.020 --> 00:04:14.830
where you can store
files that only

00:04:14.830 --> 00:04:17.649
your app can see and manage.

00:04:17.649 --> 00:04:19.916
This folder still uses
the user storage quota,

00:04:19.916 --> 00:04:21.790
and they can clear all
of the folder contents

00:04:21.790 --> 00:04:23.390
if they want to
stop using your app,

00:04:23.390 --> 00:04:25.920
but the files won't
ever get in their way.

00:04:25.920 --> 00:04:27.820
So let's recap what
we've achieved.

00:04:27.820 --> 00:04:29.850
We took an app that stored
of all of its content

00:04:29.850 --> 00:04:33.440
on the local device and added
automatic backups, cross device

00:04:33.440 --> 00:04:37.199
file syncing, offline support,
and synced app configuration.

00:04:37.199 --> 00:04:38.990
You can add these
features to your app too,

00:04:38.990 --> 00:04:41.120
so get started with
the Drive Android API

00:04:41.120 --> 00:04:44.610
at
 developers.google.com/drive/android.

00:04:44.610 --> 00:04:47.000
I'm Jen King, and I can't
wait to see what you come up

00:04:47.000 --> 00:04:49.620
with using the
Drive Android API.

