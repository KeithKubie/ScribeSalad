WEBVTT
Kind: captions
Language: en

00:00:05.509 --> 00:00:08.600
 
hi everyone my name is Jake I work on

00:00:08.600 --> 00:00:08.610
hi everyone my name is Jake I work on
 

00:00:08.610 --> 00:00:12.680
hi everyone my name is Jake I work on
the Android team on Kotlin stuff and so

00:00:12.680 --> 00:00:12.690
the Android team on Kotlin stuff and so
 

00:00:12.690 --> 00:00:14.360
the Android team on Kotlin stuff and so
today I'm gonna be talking about Android

00:00:14.360 --> 00:00:14.370
today I'm gonna be talking about Android
 

00:00:14.370 --> 00:00:16.730
today I'm gonna be talking about Android
KTX and I'm not gonna be talking about

00:00:16.730 --> 00:00:16.740
KTX and I'm not gonna be talking about
 

00:00:16.740 --> 00:00:18.620
KTX and I'm not gonna be talking about
I'm not gonna be just going over a bunch

00:00:18.620 --> 00:00:18.630
I'm not gonna be just going over a bunch
 

00:00:18.630 --> 00:00:20.900
I'm not gonna be just going over a bunch
of the stuff that's in there I want to

00:00:20.900 --> 00:00:20.910
of the stuff that's in there I want to
 

00:00:20.910 --> 00:00:21.950
of the stuff that's in there I want to
make it a little more interesting than

00:00:21.950 --> 00:00:21.960
make it a little more interesting than
 

00:00:21.960 --> 00:00:24.320
make it a little more interesting than
that so I'm gonna start with a little

00:00:24.320 --> 00:00:24.330
that so I'm gonna start with a little
 

00:00:24.330 --> 00:00:26.599
that so I'm gonna start with a little
bit of what happened last year at Google

00:00:26.599 --> 00:00:26.609
bit of what happened last year at Google
 

00:00:26.609 --> 00:00:29.330
bit of what happened last year at Google
i/o I was here last year talking about

00:00:29.330 --> 00:00:29.340
i/o I was here last year talking about
 

00:00:29.340 --> 00:00:31.900
i/o I was here last year talking about
how you can write extensions for Android

00:00:31.900 --> 00:00:31.910
how you can write extensions for Android
 

00:00:31.910 --> 00:00:35.240
how you can write extensions for Android
types such as this example where we have

00:00:35.240 --> 00:00:35.250
types such as this example where we have
 

00:00:35.250 --> 00:00:37.370
types such as this example where we have
code that iterates over the views inside

00:00:37.370 --> 00:00:37.380
code that iterates over the views inside
 

00:00:37.380 --> 00:00:40.160
code that iterates over the views inside
of a view group you can pull that common

00:00:40.160 --> 00:00:40.170
of a view group you can pull that common
 

00:00:40.170 --> 00:00:42.920
of a view group you can pull that common
code out into an extension what this

00:00:42.920 --> 00:00:42.930
code out into an extension what this
 

00:00:42.930 --> 00:00:46.459
code out into an extension what this
extension does is enhance a type that we

00:00:46.459 --> 00:00:46.469
extension does is enhance a type that we
 

00:00:46.469 --> 00:00:48.830
extension does is enhance a type that we
don't control the view group type we're

00:00:48.830 --> 00:00:48.840
don't control the view group type we're
 

00:00:48.840 --> 00:00:53.240
don't control the view group type we're
allowed to essentially create a member

00:00:53.240 --> 00:00:53.250
allowed to essentially create a member
 

00:00:53.250 --> 00:00:54.650
allowed to essentially create a member
function that's not actually a member

00:00:54.650 --> 00:00:54.660
function that's not actually a member
 

00:00:54.660 --> 00:00:56.930
function that's not actually a member
function it actually turns into a static

00:00:56.930 --> 00:00:56.940
function it actually turns into a static
 

00:00:56.940 --> 00:00:58.939
function it actually turns into a static
function in the bytecode with the

00:00:58.939 --> 00:00:58.949
function in the bytecode with the
 

00:00:58.949 --> 00:01:02.920
function in the bytecode with the
functionality that we want to enhance

00:01:02.920 --> 00:01:02.930
 
 

00:01:02.930 --> 00:01:05.990
 
and so we can take our original code

00:01:05.990 --> 00:01:06.000
and so we can take our original code
 

00:01:06.000 --> 00:01:08.870
and so we can take our original code
that had the explicit for loop in it and

00:01:08.870 --> 00:01:08.880
that had the explicit for loop in it and
 

00:01:08.880 --> 00:01:11.510
that had the explicit for loop in it and
use this new member to create a more

00:01:11.510 --> 00:01:11.520
use this new member to create a more
 

00:01:11.520 --> 00:01:14.000
use this new member to create a more
concise version of what we intended to

00:01:14.000 --> 00:01:14.010
concise version of what we intended to
 

00:01:14.010 --> 00:01:17.179
concise version of what we intended to
do it is actually visually distinguished

00:01:17.179 --> 00:01:17.189
do it is actually visually distinguished
 

00:01:17.189 --> 00:01:19.429
do it is actually visually distinguished
from a normal member function that it's

00:01:19.429 --> 00:01:19.439
from a normal member function that it's
 

00:01:19.439 --> 00:01:21.469
from a normal member function that it's
italicized if you use dark yellow it

00:01:21.469 --> 00:01:21.479
italicized if you use dark yellow it
 

00:01:21.479 --> 00:01:23.390
italicized if you use dark yellow it
will actually be yellow but it's

00:01:23.390 --> 00:01:23.400
will actually be yellow but it's
 

00:01:23.400 --> 00:01:25.010
will actually be yellow but it's
semantically equivalent to calling a

00:01:25.010 --> 00:01:25.020
semantically equivalent to calling a
 

00:01:25.020 --> 00:01:26.660
semantically equivalent to calling a
member or the intent is to feel

00:01:26.660 --> 00:01:26.670
member or the intent is to feel
 

00:01:26.670 --> 00:01:30.700
member or the intent is to feel
semantically equivalent and so

00:01:30.700 --> 00:01:30.710
semantically equivalent and so
 

00:01:30.710 --> 00:01:32.840
semantically equivalent and so
oftentimes when you start talking about

00:01:32.840 --> 00:01:32.850
oftentimes when you start talking about
 

00:01:32.850 --> 00:01:35.270
oftentimes when you start talking about
extension functions you think well if

00:01:35.270 --> 00:01:35.280
extension functions you think well if
 

00:01:35.280 --> 00:01:37.580
extension functions you think well if
this is so useful why don't we just put

00:01:37.580 --> 00:01:37.590
this is so useful why don't we just put
 

00:01:37.590 --> 00:01:39.289
this is so useful why don't we just put
the function directly off do you group

00:01:39.289 --> 00:01:39.299
the function directly off do you group
 

00:01:39.299 --> 00:01:41.660
the function directly off do you group
why doesn't view group just offer a for

00:01:41.660 --> 00:01:41.670
why doesn't view group just offer a for
 

00:01:41.670 --> 00:01:43.789
why doesn't view group just offer a for
each and a for each index that takes in

00:01:43.789 --> 00:01:43.799
each and a for each index that takes in
 

00:01:43.799 --> 00:01:47.179
each and a for each index that takes in
a lambda and really the reason is

00:01:47.179 --> 00:01:47.189
a lambda and really the reason is
 

00:01:47.189 --> 00:01:49.340
a lambda and really the reason is
because of the lambda when we pass a

00:01:49.340 --> 00:01:49.350
because of the lambda when we pass a
 

00:01:49.350 --> 00:01:53.960
because of the lambda when we pass a
lambda in Java e or in Kotlin by default

00:01:53.960 --> 00:01:53.970
lambda in Java e or in Kotlin by default
 

00:01:53.970 --> 00:01:55.940
lambda in Java e or in Kotlin by default
that has to create an anonymous class

00:01:55.940 --> 00:01:55.950
that has to create an anonymous class
 

00:01:55.950 --> 00:01:58.340
that has to create an anonymous class
which eats up methods and causes class

00:01:58.340 --> 00:01:58.350
which eats up methods and causes class
 

00:01:58.350 --> 00:02:02.359
which eats up methods and causes class
loading Kotlin however provides language

00:02:02.359 --> 00:02:02.369
loading Kotlin however provides language
 

00:02:02.369 --> 00:02:03.980
loading Kotlin however provides language
functionality which allows us to

00:02:03.980 --> 00:02:03.990
functionality which allows us to
 

00:02:03.990 --> 00:02:07.310
functionality which allows us to
eliminate that lambdas allocation by

00:02:07.310 --> 00:02:07.320
eliminate that lambdas allocation by
 

00:02:07.320 --> 00:02:09.380
eliminate that lambdas allocation by
marking the function is inline the body

00:02:09.380 --> 00:02:09.390
marking the function is inline the body
 

00:02:09.390 --> 00:02:11.180
marking the function is inline the body
of the extension gets copied into the

00:02:11.180 --> 00:02:11.190
of the extension gets copied into the
 

00:02:11.190 --> 00:02:12.760
of the extension gets copied into the
call site and we have a Z

00:02:12.760 --> 00:02:12.770
call site and we have a Z
 

00:02:12.770 --> 00:02:17.890
call site and we have a Z
overhead abstraction let's take a look

00:02:17.890 --> 00:02:17.900
overhead abstraction let's take a look
 

00:02:17.900 --> 00:02:20.830
overhead abstraction let's take a look
at another example an API 23 we were

00:02:20.830 --> 00:02:20.840
at another example an API 23 we were
 

00:02:20.840 --> 00:02:22.780
at another example an API 23 we were
able to get a system service based on a

00:02:22.780 --> 00:02:22.790
able to get a system service based on a
 

00:02:22.790 --> 00:02:26.650
able to get a system service based on a
class type and in 27.1 of the support

00:02:26.650 --> 00:02:26.660
class type and in 27.1 of the support
 

00:02:26.660 --> 00:02:29.260
class type and in 27.1 of the support
libraries a context compat version of

00:02:29.260 --> 00:02:29.270
libraries a context compat version of
 

00:02:29.270 --> 00:02:30.760
libraries a context compat version of
this was added that allowed it to work

00:02:30.760 --> 00:02:30.770
this was added that allowed it to work
 

00:02:30.770 --> 00:02:33.790
this was added that allowed it to work
on all API levels we can pull this into

00:02:33.790 --> 00:02:33.800
on all API levels we can pull this into
 

00:02:33.800 --> 00:02:37.240
on all API levels we can pull this into
an extension that is also in line like

00:02:37.240 --> 00:02:37.250
an extension that is also in line like
 

00:02:37.250 --> 00:02:39.640
an extension that is also in line like
the previous one but doesn't contain a

00:02:39.640 --> 00:02:39.650
the previous one but doesn't contain a
 

00:02:39.650 --> 00:02:41.830
the previous one but doesn't contain a
lambda what this one has that's

00:02:41.830 --> 00:02:41.840
lambda what this one has that's
 

00:02:41.840 --> 00:02:43.510
lambda what this one has that's
different is something called reified

00:02:43.510 --> 00:02:43.520
different is something called reified
 

00:02:43.520 --> 00:02:46.510
different is something called reified
now this is a compiler trick and what

00:02:46.510 --> 00:02:46.520
now this is a compiler trick and what
 

00:02:46.520 --> 00:02:49.000
now this is a compiler trick and what
that trick does is it forces the type

00:02:49.000 --> 00:02:49.010
that trick does is it forces the type
 

00:02:49.010 --> 00:02:52.060
that trick does is it forces the type
information of the generic to be known

00:02:52.060 --> 00:02:52.070
information of the generic to be known
 

00:02:52.070 --> 00:02:54.490
information of the generic to be known
at compile time so that it can be made

00:02:54.490 --> 00:02:54.500
at compile time so that it can be made
 

00:02:54.500 --> 00:02:58.480
at compile time so that it can be made
available at runtime and so this is what

00:02:58.480 --> 00:02:58.490
available at runtime and so this is what
 

00:02:58.490 --> 00:03:01.030
available at runtime and so this is what
allows us to take where we would

00:03:01.030 --> 00:03:01.040
allows us to take where we would
 

00:03:01.040 --> 00:03:02.950
allows us to take where we would
otherwise be calling you know classic

00:03:02.950 --> 00:03:02.960
otherwise be calling you know classic
 

00:03:02.960 --> 00:03:05.950
otherwise be calling you know classic
Java on notification manager we can now

00:03:05.950 --> 00:03:05.960
Java on notification manager we can now
 

00:03:05.960 --> 00:03:08.980
Java on notification manager we can now
abstract that away behind this extension

00:03:08.980 --> 00:03:08.990
abstract that away behind this extension
 

00:03:08.990 --> 00:03:11.860
abstract that away behind this extension
and so our calling code now becomes

00:03:11.860 --> 00:03:11.870
and so our calling code now becomes
 

00:03:11.870 --> 00:03:13.750
and so our calling code now becomes
simplified to just be able to pass the

00:03:13.750 --> 00:03:13.760
simplified to just be able to pass the
 

00:03:13.760 --> 00:03:16.660
simplified to just be able to pass the
generic and because it's reified we have

00:03:16.660 --> 00:03:16.670
generic and because it's reified we have
 

00:03:16.670 --> 00:03:19.090
generic and because it's reified we have
the implementation of that has access to

00:03:19.090 --> 00:03:19.100
the implementation of that has access to
 

00:03:19.100 --> 00:03:26.110
the implementation of that has access to
be able to call class that Java

00:03:26.110 --> 00:03:26.120
 
 

00:03:26.120 --> 00:03:29.110
 
so if we want to update the padding of a

00:03:29.110 --> 00:03:29.120
so if we want to update the padding of a
 

00:03:29.120 --> 00:03:32.110
so if we want to update the padding of a
view just where we're only specifying

00:03:32.110 --> 00:03:32.120
view just where we're only specifying
 

00:03:32.120 --> 00:03:34.690
view just where we're only specifying
two of the four parameters in this case

00:03:34.690 --> 00:03:34.700
two of the four parameters in this case
 

00:03:34.700 --> 00:03:36.430
two of the four parameters in this case
we want to update both the left and the

00:03:36.430 --> 00:03:36.440
we want to update both the left and the
 

00:03:36.440 --> 00:03:39.580
we want to update both the left and the
right we have to pull out the existing

00:03:39.580 --> 00:03:39.590
right we have to pull out the existing
 

00:03:39.590 --> 00:03:40.839
right we have to pull out the existing
padding for the top and the bottom

00:03:40.839 --> 00:03:40.849
padding for the top and the bottom
 

00:03:40.849 --> 00:03:43.000
padding for the top and the bottom
because Android requires you to specify

00:03:43.000 --> 00:03:43.010
because Android requires you to specify
 

00:03:43.010 --> 00:03:46.960
because Android requires you to specify
all four this is something that we can

00:03:46.960 --> 00:03:46.970
all four this is something that we can
 

00:03:46.970 --> 00:03:51.509
all four this is something that we can
remedy again using an extension function

00:03:51.509 --> 00:03:51.519
remedy again using an extension function
 

00:03:51.519 --> 00:03:53.949
remedy again using an extension function
the key here is that for each of the

00:03:53.949 --> 00:03:53.959
the key here is that for each of the
 

00:03:53.959 --> 00:03:55.600
the key here is that for each of the
arguments on this new function that

00:03:55.600 --> 00:03:55.610
arguments on this new function that
 

00:03:55.610 --> 00:03:58.120
arguments on this new function that
we've defined we're specifying a default

00:03:58.120 --> 00:03:58.130
we've defined we're specifying a default
 

00:03:58.130 --> 00:04:00.059
we've defined we're specifying a default
and that default will be used whether

00:04:00.059 --> 00:04:00.069
and that default will be used whether
 

00:04:00.069 --> 00:04:03.039
and that default will be used whether
when a value is not provided for that

00:04:03.039 --> 00:04:03.049
when a value is not provided for that
 

00:04:03.049 --> 00:04:06.580
when a value is not provided for that
argument so it allows us to take the

00:04:06.580 --> 00:04:06.590
argument so it allows us to take the
 

00:04:06.590 --> 00:04:08.289
argument so it allows us to take the
calling code where we're specifying all

00:04:08.289 --> 00:04:08.299
calling code where we're specifying all
 

00:04:08.299 --> 00:04:11.699
calling code where we're specifying all
four and now specify them as just two

00:04:11.699 --> 00:04:11.709
four and now specify them as just two
 

00:04:11.709 --> 00:04:14.259
four and now specify them as just two
but the problem here is that you know

00:04:14.259 --> 00:04:14.269
but the problem here is that you know
 

00:04:14.269 --> 00:04:17.110
but the problem here is that you know
we've eliminated two of the arguments

00:04:17.110 --> 00:04:17.120
we've eliminated two of the arguments
 

00:04:17.120 --> 00:04:19.029
we've eliminated two of the arguments
but since we're only supplying two

00:04:19.029 --> 00:04:19.039
but since we're only supplying two
 

00:04:19.039 --> 00:04:21.099
but since we're only supplying two
Kotlin takes that as meaning the first

00:04:21.099 --> 00:04:21.109
Kotlin takes that as meaning the first
 

00:04:21.109 --> 00:04:23.980
Kotlin takes that as meaning the first
two and this the latter two are the ones

00:04:23.980 --> 00:04:23.990
two and this the latter two are the ones
 

00:04:23.990 --> 00:04:26.439
two and this the latter two are the ones
where the defaults are used this is not

00:04:26.439 --> 00:04:26.449
where the defaults are used this is not
 

00:04:26.449 --> 00:04:28.060
where the defaults are used this is not
what we intended to be intended to do

00:04:28.060 --> 00:04:28.070
what we intended to be intended to do
 

00:04:28.070 --> 00:04:30.159
what we intended to be intended to do
left and right which are the first and

00:04:30.159 --> 00:04:30.169
left and right which are the first and
 

00:04:30.169 --> 00:04:32.950
left and right which are the first and
third another language feature comes to

00:04:32.950 --> 00:04:32.960
third another language feature comes to
 

00:04:32.960 --> 00:04:34.260
third another language feature comes to
help here

00:04:34.260 --> 00:04:34.270
help here
 

00:04:34.270 --> 00:04:37.270
help here
which is named arguments named

00:04:37.270 --> 00:04:37.280
which is named arguments named
 

00:04:37.280 --> 00:04:39.670
which is named arguments named
parameters rather by specifying the name

00:04:39.670 --> 00:04:39.680
parameters rather by specifying the name
 

00:04:39.680 --> 00:04:42.310
parameters rather by specifying the name
of the parameter were able to tell the

00:04:42.310 --> 00:04:42.320
of the parameter were able to tell the
 

00:04:42.320 --> 00:04:44.290
of the parameter were able to tell the
compiler which of the two arguments we

00:04:44.290 --> 00:04:44.300
compiler which of the two arguments we
 

00:04:44.300 --> 00:04:46.540
compiler which of the two arguments we
were specifying and allow it to fill in

00:04:46.540 --> 00:04:46.550
were specifying and allow it to fill in
 

00:04:46.550 --> 00:04:55.170
were specifying and allow it to fill in
the defaults for the others

00:04:55.170 --> 00:04:55.180
 
 

00:04:55.180 --> 00:04:58.140
 
okay Android has Android AP eyes have a

00:04:58.140 --> 00:04:58.150
okay Android has Android AP eyes have a
 

00:04:58.150 --> 00:05:00.540
okay Android has Android AP eyes have a
bunch of composite types these are

00:05:00.540 --> 00:05:00.550
bunch of composite types these are
 

00:05:00.550 --> 00:05:04.410
bunch of composite types these are
things like point rectangle pair even

00:05:04.410 --> 00:05:04.420
things like point rectangle pair even
 

00:05:04.420 --> 00:05:06.840
things like point rectangle pair even
the location class these composite types

00:05:06.840 --> 00:05:06.850
the location class these composite types
 

00:05:06.850 --> 00:05:09.030
the location class these composite types
are just wrappers around smaller

00:05:09.030 --> 00:05:09.040
are just wrappers around smaller
 

00:05:09.040 --> 00:05:11.580
are just wrappers around smaller
individual pieces of data in this case

00:05:11.580 --> 00:05:11.590
individual pieces of data in this case
 

00:05:11.590 --> 00:05:13.950
individual pieces of data in this case
I'm calling an epi which has a rectangle

00:05:13.950 --> 00:05:13.960
I'm calling an epi which has a rectangle
 

00:05:13.960 --> 00:05:17.160
I'm calling an epi which has a rectangle
which is a composite around the for the

00:05:17.160 --> 00:05:17.170
which is a composite around the for the
 

00:05:17.170 --> 00:05:19.800
which is a composite around the for the
left top right and bottom values of a

00:05:19.800 --> 00:05:19.810
left top right and bottom values of a
 

00:05:19.810 --> 00:05:21.960
left top right and bottom values of a
rectangle and if you need to do

00:05:21.960 --> 00:05:21.970
rectangle and if you need to do
 

00:05:21.970 --> 00:05:24.540
rectangle and if you need to do
calculations based on the values inside

00:05:24.540 --> 00:05:24.550
calculations based on the values inside
 

00:05:24.550 --> 00:05:26.580
calculations based on the values inside
of these composite types you have to

00:05:26.580 --> 00:05:26.590
of these composite types you have to
 

00:05:26.590 --> 00:05:29.850
of these composite types you have to
pull them out into individual values or

00:05:29.850 --> 00:05:29.860
pull them out into individual values or
 

00:05:29.860 --> 00:05:32.630
pull them out into individual values or
variables in order to do that

00:05:32.630 --> 00:05:32.640
variables in order to do that
 

00:05:32.640 --> 00:05:36.090
variables in order to do that
calculation and then potentially put

00:05:36.090 --> 00:05:36.100
calculation and then potentially put
 

00:05:36.100 --> 00:05:40.380
calculation and then potentially put
them all back together so with the help

00:05:40.380 --> 00:05:40.390
them all back together so with the help
 

00:05:40.390 --> 00:05:44.580
them all back together so with the help
of the extension we can avoid this this

00:05:44.580 --> 00:05:44.590
of the extension we can avoid this this
 

00:05:44.590 --> 00:05:46.140
of the extension we can avoid this this
one is a little bit different we have a

00:05:46.140 --> 00:05:46.150
one is a little bit different we have a
 

00:05:46.150 --> 00:05:48.300
one is a little bit different we have a
new keyword called an operator an

00:05:48.300 --> 00:05:48.310
new keyword called an operator an
 

00:05:48.310 --> 00:05:50.520
new keyword called an operator an
operator means that Kotlin will allow us

00:05:50.520 --> 00:05:50.530
operator means that Kotlin will allow us
 

00:05:50.530 --> 00:05:54.600
operator means that Kotlin will allow us
to use a special call cite syntax and

00:05:54.600 --> 00:05:54.610
to use a special call cite syntax and
 

00:05:54.610 --> 00:05:56.910
to use a special call cite syntax and
each operator function has a very

00:05:56.910 --> 00:05:56.920
each operator function has a very
 

00:05:56.920 --> 00:05:59.130
each operator function has a very
specific name a well-known name you

00:05:59.130 --> 00:05:59.140
specific name a well-known name you
 

00:05:59.140 --> 00:06:01.620
specific name a well-known name you
can't just make up any name and the name

00:06:01.620 --> 00:06:01.630
can't just make up any name and the name
 

00:06:01.630 --> 00:06:04.530
can't just make up any name and the name
defines which call site syntax that

00:06:04.530 --> 00:06:04.540
defines which call site syntax that
 

00:06:04.540 --> 00:06:06.870
defines which call site syntax that
you're intending to create in this case

00:06:06.870 --> 00:06:06.880
you're intending to create in this case
 

00:06:06.880 --> 00:06:08.970
you're intending to create in this case
it's called component and component

00:06:08.970 --> 00:06:08.980
it's called component and component
 

00:06:08.980 --> 00:06:10.560
it's called component and component
allows us to use a feature of Kotlin

00:06:10.560 --> 00:06:10.570
allows us to use a feature of Kotlin
 

00:06:10.570 --> 00:06:13.380
allows us to use a feature of Kotlin
called destructuring and so our original

00:06:13.380 --> 00:06:13.390
called destructuring and so our original
 

00:06:13.390 --> 00:06:15.240
called destructuring and so our original
code which had to individually pull out

00:06:15.240 --> 00:06:15.250
code which had to individually pull out
 

00:06:15.250 --> 00:06:19.590
code which had to individually pull out
the four different components can now

00:06:19.590 --> 00:06:19.600
the four different components can now
 

00:06:19.600 --> 00:06:21.930
the four different components can now
use this call site syntax where the

00:06:21.930 --> 00:06:21.940
use this call site syntax where the
 

00:06:21.940 --> 00:06:23.580
use this call site syntax where the
rectangle has automatically unpacked

00:06:23.580 --> 00:06:23.590
rectangle has automatically unpacked
 

00:06:23.590 --> 00:06:26.280
rectangle has automatically unpacked
into the four values and assigned to

00:06:26.280 --> 00:06:26.290
into the four values and assigned to
 

00:06:26.290 --> 00:06:31.100
into the four values and assigned to
four variables with names that we choose

00:06:31.100 --> 00:06:31.110
four variables with names that we choose
 

00:06:31.110 --> 00:06:33.570
four variables with names that we choose
what's really nice about this is that if

00:06:33.570 --> 00:06:33.580
what's really nice about this is that if
 

00:06:33.580 --> 00:06:35.910
what's really nice about this is that if
you don't care about ones later on you

00:06:35.910 --> 00:06:35.920
you don't care about ones later on you
 

00:06:35.920 --> 00:06:37.470
you don't care about ones later on you
can omit them and if you don't care

00:06:37.470 --> 00:06:37.480
can omit them and if you don't care
 

00:06:37.480 --> 00:06:39.600
can omit them and if you don't care
about ones in the middle you can specify

00:06:39.600 --> 00:06:39.610
about ones in the middle you can specify
 

00:06:39.610 --> 00:06:41.610
about ones in the middle you can specify
them as underscore and so if we just

00:06:41.610 --> 00:06:41.620
them as underscore and so if we just
 

00:06:41.620 --> 00:06:43.260
them as underscore and so if we just
need to pull out two of the values we

00:06:43.260 --> 00:06:43.270
need to pull out two of the values we
 

00:06:43.270 --> 00:06:51.740
need to pull out two of the values we
can do that very succinctly

00:06:51.740 --> 00:06:51.750
 
 

00:06:51.750 --> 00:06:55.590
 
okay an experienced cotton user might

00:06:55.590 --> 00:06:55.600
okay an experienced cotton user might
 

00:06:55.600 --> 00:06:58.110
okay an experienced cotton user might
know that well I guess we flipped it we

00:06:58.110 --> 00:06:58.120
know that well I guess we flipped it we
 

00:06:58.120 --> 00:07:05.820
know that well I guess we flipped it we
go back a slide okay so this is some

00:07:05.820 --> 00:07:05.830
go back a slide okay so this is some
 

00:07:05.830 --> 00:07:07.950
go back a slide okay so this is some
code that shows how we could determine

00:07:07.950 --> 00:07:07.960
code that shows how we could determine
 

00:07:07.960 --> 00:07:10.050
code that shows how we could determine
whether or not a string contains only

00:07:10.050 --> 00:07:10.060
whether or not a string contains only
 

00:07:10.060 --> 00:07:13.140
whether or not a string contains only
digits it basically just loops through

00:07:13.140 --> 00:07:13.150
digits it basically just loops through
 

00:07:13.150 --> 00:07:15.090
digits it basically just loops through
the characters using Cotton's for in

00:07:15.090 --> 00:07:15.100
the characters using Cotton's for in
 

00:07:15.100 --> 00:07:17.880
the characters using Cotton's for in
syntax checks whether it's a digit using

00:07:17.880 --> 00:07:17.890
syntax checks whether it's a digit using
 

00:07:17.890 --> 00:07:20.100
syntax checks whether it's a digit using
an extension function on character and

00:07:20.100 --> 00:07:20.110
an extension function on character and
 

00:07:20.110 --> 00:07:22.200
an extension function on character and
then sets a value to true or false

00:07:22.200 --> 00:07:22.210
then sets a value to true or false
 

00:07:22.210 --> 00:07:24.540
then sets a value to true or false
whether the text it whenever it detects

00:07:24.540 --> 00:07:24.550
whether the text it whenever it detects
 

00:07:24.550 --> 00:07:28.050
whether the text it whenever it detects
an on digit if you're an experienced

00:07:28.050 --> 00:07:28.060
an on digit if you're an experienced
 

00:07:28.060 --> 00:07:30.060
an on digit if you're an experienced
countless or you might know about the

00:07:30.060 --> 00:07:30.070
countless or you might know about the
 

00:07:30.070 --> 00:07:32.460
countless or you might know about the
all function which exists on string

00:07:32.460 --> 00:07:32.470
all function which exists on string
 

00:07:32.470 --> 00:07:34.620
all function which exists on string
which encapsulate s-- the same looping

00:07:34.620 --> 00:07:34.630
which encapsulate s-- the same looping
 

00:07:34.630 --> 00:07:37.410
which encapsulate s-- the same looping
allows you to specify a predicate which

00:07:37.410 --> 00:07:37.420
allows you to specify a predicate which
 

00:07:37.420 --> 00:07:39.840
allows you to specify a predicate which
in this case is that is digit it's

00:07:39.840 --> 00:07:39.850
in this case is that is digit it's
 

00:07:39.850 --> 00:07:42.060
in this case is that is digit it's
actually an inline function so it D

00:07:42.060 --> 00:07:42.070
actually an inline function so it D
 

00:07:42.070 --> 00:07:44.250
actually an inline function so it D
sugars into the exact same thing we

00:07:44.250 --> 00:07:44.260
sugars into the exact same thing we
 

00:07:44.260 --> 00:07:46.760
sugars into the exact same thing we
would have wrote in the previous slide

00:07:46.760 --> 00:07:46.770
would have wrote in the previous slide
 

00:07:46.770 --> 00:07:49.260
would have wrote in the previous slide
but what's interesting is that Android

00:07:49.260 --> 00:07:49.270
but what's interesting is that Android
 

00:07:49.270 --> 00:07:50.820
but what's interesting is that Android
actually has a built-in function for

00:07:50.820 --> 00:07:50.830
actually has a built-in function for
 

00:07:50.830 --> 00:07:52.650
actually has a built-in function for
this and I suspect that a lot of people

00:07:52.650 --> 00:07:52.660
this and I suspect that a lot of people
 

00:07:52.660 --> 00:07:56.700
this and I suspect that a lot of people
don't actually know this exists and so

00:07:56.700 --> 00:07:56.710
don't actually know this exists and so
 

00:07:56.710 --> 00:07:57.960
don't actually know this exists and so
this is something that we can actually

00:07:57.960 --> 00:07:57.970
this is something that we can actually
 

00:07:57.970 --> 00:08:01.770
this is something that we can actually
take and turn into an extension but you

00:08:01.770 --> 00:08:01.780
take and turn into an extension but you
 

00:08:01.780 --> 00:08:04.500
take and turn into an extension but you
start to wonder is this actually worth

00:08:04.500 --> 00:08:04.510
start to wonder is this actually worth
 

00:08:04.510 --> 00:08:06.780
start to wonder is this actually worth
its weight in an extension what value do

00:08:06.780 --> 00:08:06.790
its weight in an extension what value do
 

00:08:06.790 --> 00:08:09.240
its weight in an extension what value do
we gain by turning this static method

00:08:09.240 --> 00:08:09.250
we gain by turning this static method
 

00:08:09.250 --> 00:08:12.390
we gain by turning this static method
that we can call into an extension well

00:08:12.390 --> 00:08:12.400
that we can call into an extension well
 

00:08:12.400 --> 00:08:14.640
that we can call into an extension well
for one it changes the way that we

00:08:14.640 --> 00:08:14.650
for one it changes the way that we
 

00:08:14.650 --> 00:08:17.430
for one it changes the way that we
invoke to feel a lot more natural and

00:08:17.430 --> 00:08:17.440
invoke to feel a lot more natural and
 

00:08:17.440 --> 00:08:21.060
invoke to feel a lot more natural and
idiomatic and Colin sure but still what

00:08:21.060 --> 00:08:21.070
idiomatic and Colin sure but still what
 

00:08:21.070 --> 00:08:22.770
idiomatic and Colin sure but still what
is there really value that we extract

00:08:22.770 --> 00:08:22.780
is there really value that we extract
 

00:08:22.780 --> 00:08:26.340
is there really value that we extract
from this the biggest one that I think

00:08:26.340 --> 00:08:26.350
from this the biggest one that I think
 

00:08:26.350 --> 00:08:28.140
from this the biggest one that I think
we gain from this is that when you're in

00:08:28.140 --> 00:08:28.150
we gain from this is that when you're in
 

00:08:28.150 --> 00:08:30.570
we gain from this is that when you're in
the IDE you have your string and you're

00:08:30.570 --> 00:08:30.580
the IDE you have your string and you're
 

00:08:30.580 --> 00:08:32.520
the IDE you have your string and you're
wanting to go and determine whether or

00:08:32.520 --> 00:08:32.530
wanting to go and determine whether or
 

00:08:32.530 --> 00:08:35.610
wanting to go and determine whether or
not it's you're wanting to make this

00:08:35.610 --> 00:08:35.620
not it's you're wanting to make this
 

00:08:35.620 --> 00:08:37.350
not it's you're wanting to make this
query as to whether or not it contains

00:08:37.350 --> 00:08:37.360
query as to whether or not it contains
 

00:08:37.360 --> 00:08:40.230
query as to whether or not it contains
only digits if you didn't know that

00:08:40.230 --> 00:08:40.240
only digits if you didn't know that
 

00:08:40.240 --> 00:08:42.180
only digits if you didn't know that
static method on text utils was there

00:08:42.180 --> 00:08:42.190
static method on text utils was there
 

00:08:42.190 --> 00:08:44.520
static method on text utils was there
you probably would never find it when

00:08:44.520 --> 00:08:44.530
you probably would never find it when
 

00:08:44.530 --> 00:08:46.680
you probably would never find it when
it's extension if you start typing in

00:08:46.680 --> 00:08:46.690
it's extension if you start typing in
 

00:08:46.690 --> 00:08:50.490
it's extension if you start typing in
the IDE it will actually show this

00:08:50.490 --> 00:08:50.500
the IDE it will actually show this
 

00:08:50.500 --> 00:08:53.010
the IDE it will actually show this
extension in autocomplete where it's

00:08:53.010 --> 00:08:53.020
extension in autocomplete where it's
 

00:08:53.020 --> 00:08:55.920
extension in autocomplete where it's
much more discoverable than otherwise so

00:08:55.920 --> 00:08:55.930
much more discoverable than otherwise so
 

00:08:55.930 --> 00:08:59.070
much more discoverable than otherwise so
you just press ENTER and get it alright

00:08:59.070 --> 00:08:59.080
you just press ENTER and get it alright
 

00:08:59.080 --> 00:09:01.030
you just press ENTER and get it alright
so I've covered a few extent

00:09:01.030 --> 00:09:01.040
so I've covered a few extent
 

00:09:01.040 --> 00:09:03.579
so I've covered a few extent
here I just wanted to remind you a bit

00:09:03.579 --> 00:09:03.589
here I just wanted to remind you a bit
 

00:09:03.589 --> 00:09:06.280
here I just wanted to remind you a bit
of the power of these extensions the

00:09:06.280 --> 00:09:06.290
of the power of these extensions the
 

00:09:06.290 --> 00:09:07.900
of the power of these extensions the
fact that we are leveraging language

00:09:07.900 --> 00:09:07.910
fact that we are leveraging language
 

00:09:07.910 --> 00:09:10.420
fact that we are leveraging language
features that exist only in Kotlin not

00:09:10.420 --> 00:09:10.430
features that exist only in Kotlin not
 

00:09:10.430 --> 00:09:13.210
features that exist only in Kotlin not
in the java language and actually some

00:09:13.210 --> 00:09:13.220
in the java language and actually some
 

00:09:13.220 --> 00:09:14.470
in the java language and actually some
of these examples were going to keep

00:09:14.470 --> 00:09:14.480
of these examples were going to keep
 

00:09:14.480 --> 00:09:15.670
of these examples were going to keep
coming back to you throughout the rest

00:09:15.670 --> 00:09:15.680
coming back to you throughout the rest
 

00:09:15.680 --> 00:09:20.920
coming back to you throughout the rest
of this talk so all the extensions that

00:09:20.920 --> 00:09:20.930
of this talk so all the extensions that
 

00:09:20.930 --> 00:09:24.160
of this talk so all the extensions that
I just showed are part of the Android

00:09:24.160 --> 00:09:24.170
I just showed are part of the Android
 

00:09:24.170 --> 00:09:26.470
I just showed are part of the Android
KTX library that we announced in early

00:09:26.470 --> 00:09:26.480
KTX library that we announced in early
 

00:09:26.480 --> 00:09:29.079
KTX library that we announced in early
February there's been two releases since

00:09:29.079 --> 00:09:29.089
February there's been two releases since
 

00:09:29.089 --> 00:09:33.759
February there's been two releases since
then and as of Tuesday it's now part of

00:09:33.759 --> 00:09:33.769
then and as of Tuesday it's now part of
 

00:09:33.769 --> 00:09:36.160
then and as of Tuesday it's now part of
jetpack it's part and version with

00:09:36.160 --> 00:09:36.170
jetpack it's part and version with
 

00:09:36.170 --> 00:09:39.639
jetpack it's part and version with
jetpack so on Tuesday core KTX is now

00:09:39.639 --> 00:09:39.649
jetpack so on Tuesday core KTX is now
 

00:09:39.649 --> 00:09:43.660
jetpack so on Tuesday core KTX is now
100 alpha one it's going to be versioned

00:09:43.660 --> 00:09:43.670
100 alpha one it's going to be versioned
 

00:09:43.670 --> 00:09:45.040
100 alpha one it's going to be versioned
and released with future jetpack

00:09:45.040 --> 00:09:45.050
and released with future jetpack
 

00:09:45.050 --> 00:09:51.160
and released with future jetpack
libraries so we call this core KTX when

00:09:51.160 --> 00:09:51.170
libraries so we call this core KTX when
 

00:09:51.170 --> 00:09:52.480
libraries so we call this core KTX when
we launched which was kind of a weird

00:09:52.480 --> 00:09:52.490
we launched which was kind of a weird
 

00:09:52.490 --> 00:09:55.840
we launched which was kind of a weird
name it didn't make sense this was for

00:09:55.840 --> 00:09:55.850
name it didn't make sense this was for
 

00:09:55.850 --> 00:09:58.569
name it didn't make sense this was for
extensions for types only in the

00:09:58.569 --> 00:09:58.579
extensions for types only in the
 

00:09:58.579 --> 00:10:00.970
extensions for types only in the
framework a lot of people suggested can

00:10:00.970 --> 00:10:00.980
framework a lot of people suggested can
 

00:10:00.980 --> 00:10:03.160
framework a lot of people suggested can
we add support library stuff and we were

00:10:03.160 --> 00:10:03.170
we add support library stuff and we were
 

00:10:03.170 --> 00:10:05.500
we add support library stuff and we were
very adamant about saying no that should

00:10:05.500 --> 00:10:05.510
very adamant about saying no that should
 

00:10:05.510 --> 00:10:07.480
very adamant about saying no that should
hopefully make a lot more sense now but

00:10:07.480 --> 00:10:07.490
hopefully make a lot more sense now but
 

00:10:07.490 --> 00:10:09.730
hopefully make a lot more sense now but
even this isn't exactly true because

00:10:09.730 --> 00:10:09.740
even this isn't exactly true because
 

00:10:09.740 --> 00:10:12.790
even this isn't exactly true because
core KTX initially depended on support

00:10:12.790 --> 00:10:12.800
core KTX initially depended on support
 

00:10:12.800 --> 00:10:15.160
core KTX initially depended on support
compat support compat is there to

00:10:15.160 --> 00:10:15.170
compat support compat is there to
 

00:10:15.170 --> 00:10:18.579
compat support compat is there to
provide backwards compatibility versions

00:10:18.579 --> 00:10:18.589
provide backwards compatibility versions
 

00:10:18.589 --> 00:10:20.350
provide backwards compatibility versions
of things that are in the android

00:10:20.350 --> 00:10:20.360
of things that are in the android
 

00:10:20.360 --> 00:10:23.079
of things that are in the android
framework and so earlier I showed the

00:10:23.079 --> 00:10:23.089
framework and so earlier I showed the
 

00:10:23.089 --> 00:10:25.389
framework and so earlier I showed the
example with context compat that's

00:10:25.389 --> 00:10:25.399
example with context compat that's
 

00:10:25.399 --> 00:10:27.189
example with context compat that's
something that came from support compat

00:10:27.189 --> 00:10:27.199
something that came from support compat
 

00:10:27.199 --> 00:10:29.949
something that came from support compat
and so now with the jetpack rebranding

00:10:29.949 --> 00:10:29.959
and so now with the jetpack rebranding
 

00:10:29.959 --> 00:10:33.790
and so now with the jetpack rebranding
and the Android X packages support

00:10:33.790 --> 00:10:33.800
and the Android X packages support
 

00:10:33.800 --> 00:10:36.280
and the Android X packages support
compat has become core and so now core

00:10:36.280 --> 00:10:36.290
compat has become core and so now core
 

00:10:36.290 --> 00:10:39.939
compat has become core and so now core
KTX lines up with core so we kind of

00:10:39.939 --> 00:10:39.949
KTX lines up with core so we kind of
 

00:10:39.949 --> 00:10:41.259
KTX lines up with core so we kind of
knew what we were doing back when we

00:10:41.259 --> 00:10:41.269
knew what we were doing back when we
 

00:10:41.269 --> 00:10:43.540
knew what we were doing back when we
started this and now it's only starting

00:10:43.540 --> 00:10:43.550
started this and now it's only starting
 

00:10:43.550 --> 00:10:45.179
started this and now it's only starting
to pay off

00:10:45.179 --> 00:10:45.189
to pay off
 

00:10:45.189 --> 00:10:47.980
to pay off
along with the other jetpack libraries

00:10:47.980 --> 00:10:47.990
along with the other jetpack libraries
 

00:10:47.990 --> 00:10:50.829
along with the other jetpack libraries
there's actually a few new KTX libraries

00:10:50.829 --> 00:10:50.839
there's actually a few new KTX libraries
 

00:10:50.839 --> 00:10:53.079
there's actually a few new KTX libraries
that are launching with it so we have

00:10:53.079 --> 00:10:53.089
that are launching with it so we have
 

00:10:53.089 --> 00:10:56.259
that are launching with it so we have
ones for a fragment collection sequel

00:10:56.259 --> 00:10:56.269
ones for a fragment collection sequel
 

00:10:56.269 --> 00:10:58.090
ones for a fragment collection sequel
light for the newer components

00:10:58.090 --> 00:10:58.100
light for the newer components
 

00:10:58.100 --> 00:11:01.449
light for the newer components
navigation and work runtime I'm going to

00:11:01.449 --> 00:11:01.459
navigation and work runtime I'm going to
 

00:11:01.459 --> 00:11:03.309
navigation and work runtime I'm going to
touch on how you can discover these a

00:11:03.309 --> 00:11:03.319
touch on how you can discover these a
 

00:11:03.319 --> 00:11:05.519
touch on how you can discover these a
bit later but I want to talk a bit about

00:11:05.519 --> 00:11:05.529
bit later but I want to talk a bit about
 

00:11:05.529 --> 00:11:07.929
bit later but I want to talk a bit about
scoping about how we determine whether

00:11:07.929 --> 00:11:07.939
scoping about how we determine whether
 

00:11:07.939 --> 00:11:08.260
scoping about how we determine whether
or not

00:11:08.260 --> 00:11:08.270
or not
 

00:11:08.270 --> 00:11:11.860
or not
something is something should go into

00:11:11.860 --> 00:11:11.870
something is something should go into
 

00:11:11.870 --> 00:11:17.579
something is something should go into
one of these libraries

00:11:17.579 --> 00:11:17.589
 
 

00:11:17.589 --> 00:11:23.290
 
alright so in core TTX 0.3 we offered an

00:11:23.290 --> 00:11:23.300
alright so in core TTX 0.3 we offered an
 

00:11:23.300 --> 00:11:26.110
alright so in core TTX 0.3 we offered an
extension that looks like this if you

00:11:26.110 --> 00:11:26.120
extension that looks like this if you
 

00:11:26.120 --> 00:11:27.310
extension that looks like this if you
look at its signature

00:11:27.310 --> 00:11:27.320
look at its signature
 

00:11:27.320 --> 00:11:29.860
look at its signature
it's an operator and it operates on

00:11:29.860 --> 00:11:29.870
it's an operator and it operates on
 

00:11:29.870 --> 00:11:32.710
it's an operator and it operates on
color and the name is plus so this

00:11:32.710 --> 00:11:32.720
color and the name is plus so this
 

00:11:32.720 --> 00:11:35.500
color and the name is plus so this
allows us to use the normal plus syntax

00:11:35.500 --> 00:11:35.510
allows us to use the normal plus syntax
 

00:11:35.510 --> 00:11:38.110
allows us to use the normal plus syntax
for adding for compositing two colors

00:11:38.110 --> 00:11:38.120
for adding for compositing two colors
 

00:11:38.120 --> 00:11:40.420
for adding for compositing two colors
together so the signature it's

00:11:40.420 --> 00:11:40.430
together so the signature it's
 

00:11:40.430 --> 00:11:43.750
together so the signature it's
definitely an extension but the body of

00:11:43.750 --> 00:11:43.760
definitely an extension but the body of
 

00:11:43.760 --> 00:11:45.670
definitely an extension but the body of
this looks very different than the other

00:11:45.670 --> 00:11:45.680
this looks very different than the other
 

00:11:45.680 --> 00:11:47.110
this looks very different than the other
extensions we looked at there's a

00:11:47.110 --> 00:11:47.120
extensions we looked at there's a
 

00:11:47.120 --> 00:11:50.740
extensions we looked at there's a
significant amount of code in here if

00:11:50.740 --> 00:11:50.750
significant amount of code in here if
 

00:11:50.750 --> 00:11:54.280
significant amount of code in here if
you look inside sport compat which is

00:11:54.280 --> 00:11:54.290
you look inside sport compat which is
 

00:11:54.290 --> 00:11:56.650
you look inside sport compat which is
that core there is a color utilities

00:11:56.650 --> 00:11:56.660
that core there is a color utilities
 

00:11:56.660 --> 00:11:59.710
that core there is a color utilities
class and that color utilities class has

00:11:59.710 --> 00:11:59.720
class and that color utilities class has
 

00:11:59.720 --> 00:12:02.440
class and that color utilities class has
a method called composite colors that

00:12:02.440 --> 00:12:02.450
a method called composite colors that
 

00:12:02.450 --> 00:12:04.750
a method called composite colors that
works on integer colors it allows you to

00:12:04.750 --> 00:12:04.760
works on integer colors it allows you to
 

00:12:04.760 --> 00:12:06.370
works on integer colors it allows you to
take a foreground in the background and

00:12:06.370 --> 00:12:06.380
take a foreground in the background and
 

00:12:06.380 --> 00:12:09.340
take a foreground in the background and
turn them into a single color so this is

00:12:09.340 --> 00:12:09.350
turn them into a single color so this is
 

00:12:09.350 --> 00:12:11.920
turn them into a single color so this is
the perfect candidate for placing the

00:12:11.920 --> 00:12:11.930
the perfect candidate for placing the
 

00:12:11.930 --> 00:12:14.290
the perfect candidate for placing the
implementation of where that what that

00:12:14.290 --> 00:12:14.300
implementation of where that what that
 

00:12:14.300 --> 00:12:17.590
implementation of where that what that
extension function was into this class

00:12:17.590 --> 00:12:17.600
extension function was into this class
 

00:12:17.600 --> 00:12:19.900
extension function was into this class
so that everyone can use it so that it

00:12:19.900 --> 00:12:19.910
so that everyone can use it so that it
 

00:12:19.910 --> 00:12:22.150
so that everyone can use it so that it
can be used from the java language or

00:12:22.150 --> 00:12:22.160
can be used from the java language or
 

00:12:22.160 --> 00:12:27.100
can be used from the java language or
the column language and so in core KTX

00:12:27.100 --> 00:12:27.110
the column language and so in core KTX
 

00:12:27.110 --> 00:12:30.639
the column language and so in core KTX
1.0 this actually has been rewritten to

00:12:30.639 --> 00:12:30.649
1.0 this actually has been rewritten to
 

00:12:30.649 --> 00:12:35.199
1.0 this actually has been rewritten to
just delegate to that color utils so the

00:12:35.199 --> 00:12:35.209
just delegate to that color utils so the
 

00:12:35.209 --> 00:12:37.420
just delegate to that color utils so the
java language users get that

00:12:37.420 --> 00:12:37.430
java language users get that
 

00:12:37.430 --> 00:12:39.850
java language users get that
functionality but the colin users get

00:12:39.850 --> 00:12:39.860
functionality but the colin users get
 

00:12:39.860 --> 00:12:44.500
functionality but the colin users get
the enhanced syntax and if you look at

00:12:44.500 --> 00:12:44.510
the enhanced syntax and if you look at
 

00:12:44.510 --> 00:12:46.060
the enhanced syntax and if you look at
the extensions that we talked about so

00:12:46.060 --> 00:12:46.070
the extensions that we talked about so
 

00:12:46.070 --> 00:12:48.970
the extensions that we talked about so
far the bodies of them the

00:12:48.970 --> 00:12:48.980
far the bodies of them the
 

00:12:48.980 --> 00:12:51.210
far the bodies of them the
implementation of these functions

00:12:51.210 --> 00:12:51.220
implementation of these functions
 

00:12:51.220 --> 00:12:54.100
implementation of these functions
they're all trivial they're exceedingly

00:12:54.100 --> 00:12:54.110
they're all trivial they're exceedingly
 

00:12:54.110 --> 00:12:56.889
they're all trivial they're exceedingly
trivial and that's by design and this

00:12:56.889 --> 00:12:56.899
trivial and that's by design and this
 

00:12:56.899 --> 00:13:00.430
trivial and that's by design and this
gets me into covering some of the

00:13:00.430 --> 00:13:00.440
gets me into covering some of the
 

00:13:00.440 --> 00:13:03.100
gets me into covering some of the
principles that we want to that we

00:13:03.100 --> 00:13:03.110
principles that we want to that we
 

00:13:03.110 --> 00:13:05.019
principles that we want to that we
define that key TX extensions should

00:13:05.019 --> 00:13:05.029
define that key TX extensions should
 

00:13:05.029 --> 00:13:08.319
define that key TX extensions should
have and so this first one is that we

00:13:08.319 --> 00:13:08.329
have and so this first one is that we
 

00:13:08.329 --> 00:13:10.720
have and so this first one is that we
want to adapt functionality that already

00:13:10.720 --> 00:13:10.730
want to adapt functionality that already
 

00:13:10.730 --> 00:13:14.079
want to adapt functionality that already
exists and if we want to add any new

00:13:14.079 --> 00:13:14.089
exists and if we want to add any new
 

00:13:14.089 --> 00:13:15.370
exists and if we want to add any new
features there should be redirected

00:13:15.370 --> 00:13:15.380
features there should be redirected
 

00:13:15.380 --> 00:13:17.650
features there should be redirected
upstream to a place for their language

00:13:17.650 --> 00:13:17.660
upstream to a place for their language
 

00:13:17.660 --> 00:13:19.689
upstream to a place for their language
agnostic where both languages can take

00:13:19.689 --> 00:13:19.699
agnostic where both languages can take
 

00:13:19.699 --> 00:13:19.980
agnostic where both languages can take
it

00:13:19.980 --> 00:13:19.990
it
 

00:13:19.990 --> 00:13:22.800
it
each of them other examples of this was

00:13:22.800 --> 00:13:22.810
each of them other examples of this was
 

00:13:22.810 --> 00:13:25.920
each of them other examples of this was
there was some HTML compat stuff and a

00:13:25.920 --> 00:13:25.930
there was some HTML compat stuff and a
 

00:13:25.930 --> 00:13:27.960
there was some HTML compat stuff and a
path iterator that were implemented

00:13:27.960 --> 00:13:27.970
path iterator that were implemented
 

00:13:27.970 --> 00:13:30.269
path iterator that were implemented
first and Corky TX that have since moved

00:13:30.269 --> 00:13:30.279
first and Corky TX that have since moved
 

00:13:30.279 --> 00:13:33.150
first and Corky TX that have since moved
upstream into core to be able to use

00:13:33.150 --> 00:13:33.160
upstream into core to be able to use
 

00:13:33.160 --> 00:13:36.019
upstream into core to be able to use
them both languages

00:13:36.019 --> 00:13:36.029
them both languages
 

00:13:36.029 --> 00:13:38.220
them both languages
another thing that's common to all these

00:13:38.220 --> 00:13:38.230
another thing that's common to all these
 

00:13:38.230 --> 00:13:42.030
another thing that's common to all these
extensions is that they're marked as in

00:13:42.030 --> 00:13:42.040
extensions is that they're marked as in
 

00:13:42.040 --> 00:13:49.410
extensions is that they're marked as in
line the reason that we do in line on

00:13:49.410 --> 00:13:49.420
line the reason that we do in line on
 

00:13:49.420 --> 00:13:51.750
line the reason that we do in line on
the first one the one at the top is that

00:13:51.750 --> 00:13:51.760
the first one the one at the top is that
 

00:13:51.760 --> 00:13:53.930
the first one the one at the top is that
we want to avoid the lambda allocation

00:13:53.930 --> 00:13:53.940
we want to avoid the lambda allocation
 

00:13:53.940 --> 00:13:56.610
we want to avoid the lambda allocation
for the second one because we're using

00:13:56.610 --> 00:13:56.620
for the second one because we're using
 

00:13:56.620 --> 00:13:57.900
for the second one because we're using
reified generics

00:13:57.900 --> 00:13:57.910
reified generics
 

00:13:57.910 --> 00:13:59.940
reified generics
we're actually forced to use in line by

00:13:59.940 --> 00:13:59.950
we're actually forced to use in line by
 

00:13:59.950 --> 00:14:03.780
we're actually forced to use in line by
the compiler the third the component

00:14:03.780 --> 00:14:03.790
the compiler the third the component
 

00:14:03.790 --> 00:14:07.440
the compiler the third the component
ones and the very bottom one are all in

00:14:07.440 --> 00:14:07.450
ones and the very bottom one are all in
 

00:14:07.450 --> 00:14:10.019
ones and the very bottom one are all in
line mostly because they're just aliases

00:14:10.019 --> 00:14:10.029
line mostly because they're just aliases
 

00:14:10.029 --> 00:14:12.150
line mostly because they're just aliases
to what you would otherwise write if the

00:14:12.150 --> 00:14:12.160
to what you would otherwise write if the
 

00:14:12.160 --> 00:14:16.769
to what you would otherwise write if the
extension didn't exist if we look at an

00:14:16.769 --> 00:14:16.779
extension didn't exist if we look at an
 

00:14:16.779 --> 00:14:19.650
extension didn't exist if we look at an
example of something that's not in line

00:14:19.650 --> 00:14:19.660
example of something that's not in line
 

00:14:19.660 --> 00:14:22.949
example of something that's not in line
in core KTX we have this iterator

00:14:22.949 --> 00:14:22.959
in core KTX we have this iterator
 

00:14:22.959 --> 00:14:24.870
in core KTX we have this iterator
extension to viewgroup which allows us

00:14:24.870 --> 00:14:24.880
extension to viewgroup which allows us
 

00:14:24.880 --> 00:14:27.750
extension to viewgroup which allows us
to use collins for in syntax to iterate

00:14:27.750 --> 00:14:27.760
to use collins for in syntax to iterate
 

00:14:27.760 --> 00:14:31.350
to use collins for in syntax to iterate
over the views in a view group this is

00:14:31.350 --> 00:14:31.360
over the views in a view group this is
 

00:14:31.360 --> 00:14:33.900
over the views in a view group this is
not in line for a very specific reason

00:14:33.900 --> 00:14:33.910
not in line for a very specific reason
 

00:14:33.910 --> 00:14:36.750
not in line for a very specific reason
and that is because it defines the

00:14:36.750 --> 00:14:36.760
and that is because it defines the
 

00:14:36.760 --> 00:14:38.910
and that is because it defines the
implementation of this function defines

00:14:38.910 --> 00:14:38.920
implementation of this function defines
 

00:14:38.920 --> 00:14:42.090
implementation of this function defines
an anonymous class if we were to inline

00:14:42.090 --> 00:14:42.100
an anonymous class if we were to inline
 

00:14:42.100 --> 00:14:43.560
an anonymous class if we were to inline
this that means that every time you use

00:14:43.560 --> 00:14:43.570
this that means that every time you use
 

00:14:43.570 --> 00:14:44.010
this that means that every time you use
it

00:14:44.010 --> 00:14:44.020
it
 

00:14:44.020 --> 00:14:46.290
it
an anonymous class would be defined at

00:14:46.290 --> 00:14:46.300
an anonymous class would be defined at
 

00:14:46.300 --> 00:14:48.030
an anonymous class would be defined at
your call site and so this would

00:14:48.030 --> 00:14:48.040
your call site and so this would
 

00:14:48.040 --> 00:14:50.370
your call site and so this would
increase your deck size method count and

00:14:50.370 --> 00:14:50.380
increase your deck size method count and
 

00:14:50.380 --> 00:14:53.220
increase your deck size method count and
class loading we explicitly make this

00:14:53.220 --> 00:14:53.230
class loading we explicitly make this
 

00:14:53.230 --> 00:14:55.790
class loading we explicitly make this
not inline because we want that single

00:14:55.790 --> 00:14:55.800
not inline because we want that single
 

00:14:55.800 --> 00:14:58.290
not inline because we want that single
implementation to be reused by all of

00:14:58.290 --> 00:14:58.300
implementation to be reused by all of
 

00:14:58.300 --> 00:15:04.800
implementation to be reused by all of
the callers so we default to an

00:15:04.800 --> 00:15:04.810
the callers so we default to an
 

00:15:04.810 --> 00:15:06.920
the callers so we default to an
extension being inline unless there are

00:15:06.920 --> 00:15:06.930
extension being inline unless there are
 

00:15:06.930 --> 00:15:10.410
extension being inline unless there are
allocation reasons and I should note

00:15:10.410 --> 00:15:10.420
allocation reasons and I should note
 

00:15:10.420 --> 00:15:13.319
allocation reasons and I should note
that this is really only for KTX style

00:15:13.319 --> 00:15:13.329
that this is really only for KTX style
 

00:15:13.329 --> 00:15:16.079
that this is really only for KTX style
extensions in normal collin code this is

00:15:16.079 --> 00:15:16.089
extensions in normal collin code this is
 

00:15:16.089 --> 00:15:18.030
extensions in normal collin code this is
not a good recommendation you don't want

00:15:18.030 --> 00:15:18.040
not a good recommendation you don't want
 

00:15:18.040 --> 00:15:20.250
not a good recommendation you don't want
to default the inline because it has the

00:15:20.250 --> 00:15:20.260
to default the inline because it has the
 

00:15:20.260 --> 00:15:22.320
to default the inline because it has the
potential to lead to actually

00:15:22.320 --> 00:15:22.330
potential to lead to actually
 

00:15:22.330 --> 00:15:24.720
potential to lead to actually
having a negative effect on your code

00:15:24.720 --> 00:15:24.730
having a negative effect on your code
 

00:15:24.730 --> 00:15:29.240
having a negative effect on your code
rather than a positive one

00:15:29.240 --> 00:15:29.250
 
 

00:15:29.250 --> 00:15:32.550
 
all right so earlier when we showed this

00:15:32.550 --> 00:15:32.560
all right so earlier when we showed this
 

00:15:32.560 --> 00:15:34.610
all right so earlier when we showed this
extension I talked about how the inline

00:15:34.610 --> 00:15:34.620
extension I talked about how the inline
 

00:15:34.620 --> 00:15:37.380
extension I talked about how the inline
modifier coupled with the fact that

00:15:37.380 --> 00:15:37.390
modifier coupled with the fact that
 

00:15:37.390 --> 00:15:39.840
modifier coupled with the fact that
there's a lambda allows this extension

00:15:39.840 --> 00:15:39.850
there's a lambda allows this extension
 

00:15:39.850 --> 00:15:43.890
there's a lambda allows this extension
to be a zero overhead abstraction in the

00:15:43.890 --> 00:15:43.900
to be a zero overhead abstraction in the
 

00:15:43.900 --> 00:15:47.550
to be a zero overhead abstraction in the
rio5 case we get a the ability to have a

00:15:47.550 --> 00:15:47.560
rio5 case we get a the ability to have a
 

00:15:47.560 --> 00:15:50.070
rio5 case we get a the ability to have a
more declarative version of the lookup

00:15:50.070 --> 00:15:50.080
more declarative version of the lookup
 

00:15:50.080 --> 00:15:51.750
more declarative version of the lookup
at the call site without having to

00:15:51.750 --> 00:15:51.760
at the call site without having to
 

00:15:51.760 --> 00:15:57.420
at the call site without having to
specify the colon colon class Java for

00:15:57.420 --> 00:15:57.430
specify the colon colon class Java for
 

00:15:57.430 --> 00:15:59.450
specify the colon colon class Java for
updating the padding we get to use

00:15:59.450 --> 00:15:59.460
updating the padding we get to use
 

00:15:59.460 --> 00:16:01.710
updating the padding we get to use
default values to not have to specify

00:16:01.710 --> 00:16:01.720
default values to not have to specify
 

00:16:01.720 --> 00:16:03.600
default values to not have to specify
each of the arguments and name

00:16:03.600 --> 00:16:03.610
each of the arguments and name
 

00:16:03.610 --> 00:16:06.840
each of the arguments and name
parameters to specify which subset of

00:16:06.840 --> 00:16:06.850
parameters to specify which subset of
 

00:16:06.850 --> 00:16:08.400
parameters to specify which subset of
arguments we want to actually provide

00:16:08.400 --> 00:16:08.410
arguments we want to actually provide
 

00:16:08.410 --> 00:16:12.840
arguments we want to actually provide
for the destructuring case we get the

00:16:12.840 --> 00:16:12.850
for the destructuring case we get the
 

00:16:12.850 --> 00:16:14.700
for the destructuring case we get the
fancy syntax that allows us to pull

00:16:14.700 --> 00:16:14.710
fancy syntax that allows us to pull
 

00:16:14.710 --> 00:16:17.280
fancy syntax that allows us to pull
apart the component variables out of a

00:16:17.280 --> 00:16:17.290
apart the component variables out of a
 

00:16:17.290 --> 00:16:21.560
apart the component variables out of a
composite object this is useful this is

00:16:21.560 --> 00:16:21.570
composite object this is useful this is
 

00:16:21.570 --> 00:16:24.480
composite object this is useful this is
enabled by the fact that we are we have

00:16:24.480 --> 00:16:24.490
enabled by the fact that we are we have
 

00:16:24.490 --> 00:16:26.760
enabled by the fact that we are we have
operator overloading Kotlin we also

00:16:26.760 --> 00:16:26.770
operator overloading Kotlin we also
 

00:16:26.770 --> 00:16:29.070
operator overloading Kotlin we also
talked about how we were able to add the

00:16:29.070 --> 00:16:29.080
talked about how we were able to add the
 

00:16:29.080 --> 00:16:35.520
talked about how we were able to add the
plus or color for this one we're a Lea

00:16:35.520 --> 00:16:35.530
plus or color for this one we're a Lea
 

00:16:35.530 --> 00:16:38.070
plus or color for this one we're a Lea
Singh in extension to a static method

00:16:38.070 --> 00:16:38.080
Singh in extension to a static method
 

00:16:38.080 --> 00:16:40.020
Singh in extension to a static method
and this is just to help improve

00:16:40.020 --> 00:16:40.030
and this is just to help improve
 

00:16:40.030 --> 00:16:41.970
and this is just to help improve
discoverability for built-in helpers

00:16:41.970 --> 00:16:41.980
discoverability for built-in helpers
 

00:16:41.980 --> 00:16:44.690
discoverability for built-in helpers
that you might otherwise not know exist

00:16:44.690 --> 00:16:44.700
that you might otherwise not know exist
 

00:16:44.700 --> 00:16:49.200
that you might otherwise not know exist
and then for types that are collection

00:16:49.200 --> 00:16:49.210
and then for types that are collection
 

00:16:49.210 --> 00:16:51.840
and then for types that are collection
like but not actually collections we

00:16:51.840 --> 00:16:51.850
like but not actually collections we
 

00:16:51.850 --> 00:16:54.380
like but not actually collections we
have the ability to turn them into

00:16:54.380 --> 00:16:54.390
have the ability to turn them into
 

00:16:54.390 --> 00:16:57.030
have the ability to turn them into
pseudo collections where we can use the

00:16:57.030 --> 00:16:57.040
pseudo collections where we can use the
 

00:16:57.040 --> 00:16:59.310
pseudo collections where we can use the
affordances of the language as if they

00:16:59.310 --> 00:16:59.320
affordances of the language as if they
 

00:16:59.320 --> 00:17:03.000
affordances of the language as if they
were actual collections and so each one

00:17:03.000 --> 00:17:03.010
were actual collections and so each one
 

00:17:03.010 --> 00:17:06.110
were actual collections and so each one
of those has a very Colin specific

00:17:06.110 --> 00:17:06.120
of those has a very Colin specific
 

00:17:06.120 --> 00:17:09.660
of those has a very Colin specific
language feature that it uses and we

00:17:09.660 --> 00:17:09.670
language feature that it uses and we
 

00:17:09.670 --> 00:17:11.340
language feature that it uses and we
want to make sure that all these

00:17:11.340 --> 00:17:11.350
want to make sure that all these
 

00:17:11.350 --> 00:17:13.949
want to make sure that all these
extensions that we're defining leverage

00:17:13.949 --> 00:17:13.959
extensions that we're defining leverage
 

00:17:13.959 --> 00:17:15.630
extensions that we're defining leverage
some feature of the common language that

00:17:15.630 --> 00:17:15.640
some feature of the common language that
 

00:17:15.640 --> 00:17:19.309
some feature of the common language that
doesn't otherwise exist for Java callers

00:17:19.309 --> 00:17:19.319
doesn't otherwise exist for Java callers
 

00:17:19.319 --> 00:17:22.290
doesn't otherwise exist for Java callers
we want to resist trying to fix an API

00:17:22.290 --> 00:17:22.300
we want to resist trying to fix an API
 

00:17:22.300 --> 00:17:25.740
we want to resist trying to fix an API
just by creating extensions for it but

00:17:25.740 --> 00:17:25.750
just by creating extensions for it but
 

00:17:25.750 --> 00:17:27.329
just by creating extensions for it but
rather enhance it to become more

00:17:27.329 --> 00:17:27.339
rather enhance it to become more
 

00:17:27.339 --> 00:17:29.250
rather enhance it to become more
pleasant to use by leveraging these

00:17:29.250 --> 00:17:29.260
pleasant to use by leveraging these
 

00:17:29.260 --> 00:17:29.870
pleasant to use by leveraging these
Scotland

00:17:29.870 --> 00:17:29.880
Scotland
 

00:17:29.880 --> 00:17:37.070
Scotland
specific features okay one of the

00:17:37.070 --> 00:17:37.080
specific features okay one of the
 

00:17:37.080 --> 00:17:40.640
specific features okay one of the
suggestions we get quite frequently is

00:17:40.640 --> 00:17:40.650
suggestions we get quite frequently is
 

00:17:40.650 --> 00:17:42.590
suggestions we get quite frequently is
to take something like set

00:17:42.590 --> 00:17:42.600
to take something like set
 

00:17:42.600 --> 00:17:46.130
to take something like set
onclicklistener and write an extension

00:17:46.130 --> 00:17:46.140
onclicklistener and write an extension
 

00:17:46.140 --> 00:17:47.660
onclicklistener and write an extension
which allows you to call it using

00:17:47.660 --> 00:17:47.670
which allows you to call it using
 

00:17:47.670 --> 00:17:51.950
which allows you to call it using
something like click or on click this

00:17:51.950 --> 00:17:51.960
something like click or on click this
 

00:17:51.960 --> 00:17:53.990
something like click or on click this
allows the calling code to instead of

00:17:53.990 --> 00:17:54.000
allows the calling code to instead of
 

00:17:54.000 --> 00:17:57.200
allows the calling code to instead of
having to call set onclicklistener we

00:17:57.200 --> 00:17:57.210
having to call set onclicklistener we
 

00:17:57.210 --> 00:18:01.160
having to call set onclicklistener we
get the shorter version of click are we

00:18:01.160 --> 00:18:01.170
get the shorter version of click are we
 

00:18:01.170 --> 00:18:02.360
get the shorter version of click are we
leveraging a feature of the language

00:18:02.360 --> 00:18:02.370
leveraging a feature of the language
 

00:18:02.370 --> 00:18:05.600
leveraging a feature of the language
here well we're leveraging extension

00:18:05.600 --> 00:18:05.610
here well we're leveraging extension
 

00:18:05.610 --> 00:18:07.760
here well we're leveraging extension
functions but not really we're really

00:18:07.760 --> 00:18:07.770
functions but not really we're really
 

00:18:07.770 --> 00:18:11.360
functions but not really we're really
just creating a shorter alias what value

00:18:11.360 --> 00:18:11.370
just creating a shorter alias what value
 

00:18:11.370 --> 00:18:13.700
just creating a shorter alias what value
are we extracting from this extension

00:18:13.700 --> 00:18:13.710
are we extracting from this extension
 

00:18:13.710 --> 00:18:15.770
are we extracting from this extension
well we're typing a few less characters

00:18:15.770 --> 00:18:15.780
well we're typing a few less characters
 

00:18:15.780 --> 00:18:17.870
well we're typing a few less characters
but really it's all auto-completed

00:18:17.870 --> 00:18:17.880
but really it's all auto-completed
 

00:18:17.880 --> 00:18:21.860
but really it's all auto-completed
anyway but even worse what precedent

00:18:21.860 --> 00:18:21.870
anyway but even worse what precedent
 

00:18:21.870 --> 00:18:23.900
anyway but even worse what precedent
will we be setting here by by adding

00:18:23.900 --> 00:18:23.910
will we be setting here by by adding
 

00:18:23.910 --> 00:18:26.210
will we be setting here by by adding
this extension are we gonna do this for

00:18:26.210 --> 00:18:26.220
this extension are we gonna do this for
 

00:18:26.220 --> 00:18:30.740
this extension are we gonna do this for
every listener and so this is a great

00:18:30.740 --> 00:18:30.750
every listener and so this is a great
 

00:18:30.750 --> 00:18:32.720
every listener and so this is a great
example of something we explicitly do

00:18:32.720 --> 00:18:32.730
example of something we explicitly do
 

00:18:32.730 --> 00:18:38.960
example of something we explicitly do
not want to do in the KTX libraries if

00:18:38.960 --> 00:18:38.970
not want to do in the KTX libraries if
 

00:18:38.970 --> 00:18:41.300
not want to do in the KTX libraries if
you're not familiar with the term we

00:18:41.300 --> 00:18:41.310
you're not familiar with the term we
 

00:18:41.310 --> 00:18:43.760
you're not familiar with the term we
call this code golf where you have a

00:18:43.760 --> 00:18:43.770
call this code golf where you have a
 

00:18:43.770 --> 00:18:45.830
call this code golf where you have a
desire to create the shortest code

00:18:45.830 --> 00:18:45.840
desire to create the shortest code
 

00:18:45.840 --> 00:18:48.830
desire to create the shortest code
possible this is something we do not

00:18:48.830 --> 00:18:48.840
possible this is something we do not
 

00:18:48.840 --> 00:18:50.270
possible this is something we do not
want to do we're not here to just make

00:18:50.270 --> 00:18:50.280
want to do we're not here to just make
 

00:18:50.280 --> 00:18:55.460
want to do we're not here to just make
the code shorter okay there's another

00:18:55.460 --> 00:18:55.470
the code shorter okay there's another
 

00:18:55.470 --> 00:18:57.920
the code shorter okay there's another
one that gets suggested every now and

00:18:57.920 --> 00:18:57.930
one that gets suggested every now and
 

00:18:57.930 --> 00:19:01.480
one that gets suggested every now and
then and that I've seen people using

00:19:01.480 --> 00:19:01.490
then and that I've seen people using
 

00:19:01.490 --> 00:19:03.830
then and that I've seen people using
with Android because of the different

00:19:03.830 --> 00:19:03.840
with Android because of the different
 

00:19:03.840 --> 00:19:05.720
with Android because of the different
API levels we have to support you very

00:19:05.720 --> 00:19:05.730
API levels we have to support you very
 

00:19:05.730 --> 00:19:08.000
API levels we have to support you very
frequently see these if checks around

00:19:08.000 --> 00:19:08.010
frequently see these if checks around
 

00:19:08.010 --> 00:19:11.720
frequently see these if checks around
that the SDK it so can be tempting to

00:19:11.720 --> 00:19:11.730
that the SDK it so can be tempting to
 

00:19:11.730 --> 00:19:13.730
that the SDK it so can be tempting to
pull this out into an extension where

00:19:13.730 --> 00:19:13.740
pull this out into an extension where
 

00:19:13.740 --> 00:19:15.050
pull this out into an extension where
you have a little bit more declarative

00:19:15.050 --> 00:19:15.060
you have a little bit more declarative
 

00:19:15.060 --> 00:19:19.430
you have a little bit more declarative
version of this we move the comparison

00:19:19.430 --> 00:19:19.440
version of this we move the comparison
 

00:19:19.440 --> 00:19:21.920
version of this we move the comparison
into an extension function it's an

00:19:21.920 --> 00:19:21.930
into an extension function it's an
 

00:19:21.930 --> 00:19:23.420
into an extension function it's an
inline function so we don't have the

00:19:23.420 --> 00:19:23.430
inline function so we don't have the
 

00:19:23.430 --> 00:19:26.240
inline function so we don't have the
overhead the lambdas the last parameter

00:19:26.240 --> 00:19:26.250
overhead the lambdas the last parameter
 

00:19:26.250 --> 00:19:28.670
overhead the lambdas the last parameter
so you get the nice Kotlin call site

00:19:28.670 --> 00:19:28.680
so you get the nice Kotlin call site
 

00:19:28.680 --> 00:19:31.070
so you get the nice Kotlin call site
syntax and it turns our if statement

00:19:31.070 --> 00:19:31.080
syntax and it turns our if statement
 

00:19:31.080 --> 00:19:36.170
syntax and it turns our if statement
from this into this now this by itself

00:19:36.170 --> 00:19:36.180
from this into this now this by itself
 

00:19:36.180 --> 00:19:39.200
from this into this now this by itself
is is not too terrible we're really not

00:19:39.200 --> 00:19:39.210
is is not too terrible we're really not
 

00:19:39.210 --> 00:19:41.760
is is not too terrible we're really not
leveraging any of the language features

00:19:41.760 --> 00:19:41.770
leveraging any of the language features
 

00:19:41.770 --> 00:19:46.350
leveraging any of the language features
again similar to the last one we're it's

00:19:46.350 --> 00:19:46.360
again similar to the last one we're it's
 

00:19:46.360 --> 00:19:48.390
again similar to the last one we're it's
still kind of an alias but at least this

00:19:48.390 --> 00:19:48.400
still kind of an alias but at least this
 

00:19:48.400 --> 00:19:50.190
still kind of an alias but at least this
one you can argue a little bit more for

00:19:50.190 --> 00:19:50.200
one you can argue a little bit more for
 

00:19:50.200 --> 00:19:54.360
one you can argue a little bit more for
its merits but there's a problem while

00:19:54.360 --> 00:19:54.370
its merits but there's a problem while
 

00:19:54.370 --> 00:19:57.390
its merits but there's a problem while
these two statements are equivalent what

00:19:57.390 --> 00:19:57.400
these two statements are equivalent what
 

00:19:57.400 --> 00:20:00.990
these two statements are equivalent what
happens when well for one thing is that

00:20:00.990 --> 00:20:01.000
happens when well for one thing is that
 

00:20:01.000 --> 00:20:03.060
happens when well for one thing is that
you can at least static import SDK in

00:20:03.060 --> 00:20:03.070
you can at least static import SDK in
 

00:20:03.070 --> 00:20:04.200
you can at least static import SDK in
and then they're a little bit closer

00:20:04.200 --> 00:20:04.210
and then they're a little bit closer
 

00:20:04.210 --> 00:20:06.419
and then they're a little bit closer
that's one reason why this is less

00:20:06.419 --> 00:20:06.429
that's one reason why this is less
 

00:20:06.429 --> 00:20:10.140
that's one reason why this is less
justified but one thing is that an if

00:20:10.140 --> 00:20:10.150
justified but one thing is that an if
 

00:20:10.150 --> 00:20:12.570
justified but one thing is that an if
statement is a very primitive construct

00:20:12.570 --> 00:20:12.580
statement is a very primitive construct
 

00:20:12.580 --> 00:20:16.080
statement is a very primitive construct
of a programming language and because an

00:20:16.080 --> 00:20:16.090
of a programming language and because an
 

00:20:16.090 --> 00:20:18.330
of a programming language and because an
if statement is not just an if statement

00:20:18.330 --> 00:20:18.340
if statement is not just an if statement
 

00:20:18.340 --> 00:20:21.930
if statement is not just an if statement
there's constructs like else so what if

00:20:21.930 --> 00:20:21.940
there's constructs like else so what if
 

00:20:21.940 --> 00:20:23.520
there's constructs like else so what if
your requirements change such that you

00:20:23.520 --> 00:20:23.530
your requirements change such that you
 

00:20:23.530 --> 00:20:25.890
your requirements change such that you
need to alter the behavior on these two

00:20:25.890 --> 00:20:25.900
need to alter the behavior on these two
 

00:20:25.900 --> 00:20:28.020
need to alter the behavior on these two
different versions well if you were

00:20:28.020 --> 00:20:28.030
different versions well if you were
 

00:20:28.030 --> 00:20:30.960
different versions well if you were
using this extension that you wrote in

00:20:30.960 --> 00:20:30.970
using this extension that you wrote in
 

00:20:30.970 --> 00:20:33.150
using this extension that you wrote in
order to support this case you either

00:20:33.150 --> 00:20:33.160
order to support this case you either
 

00:20:33.160 --> 00:20:35.910
order to support this case you either
have to change back to using an if

00:20:35.910 --> 00:20:35.920
have to change back to using an if
 

00:20:35.920 --> 00:20:38.700
have to change back to using an if
statement or you have to modify the

00:20:38.700 --> 00:20:38.710
statement or you have to modify the
 

00:20:38.710 --> 00:20:40.410
statement or you have to modify the
function where maybe it takes two

00:20:40.410 --> 00:20:40.420
function where maybe it takes two
 

00:20:40.420 --> 00:20:42.090
function where maybe it takes two
lambdas now one for the case where

00:20:42.090 --> 00:20:42.100
lambdas now one for the case where
 

00:20:42.100 --> 00:20:44.430
lambdas now one for the case where
you're above 19 one for the case where

00:20:44.430 --> 00:20:44.440
you're above 19 one for the case where
 

00:20:44.440 --> 00:20:47.790
you're above 19 one for the case where
you're not because we're now taking two

00:20:47.790 --> 00:20:47.800
you're not because we're now taking two
 

00:20:47.800 --> 00:20:49.950
you're not because we're now taking two
lambdas in this function we've lost the

00:20:49.950 --> 00:20:49.960
lambdas in this function we've lost the
 

00:20:49.960 --> 00:20:52.320
lambdas in this function we've lost the
special trailing lambda syntax where we

00:20:52.320 --> 00:20:52.330
special trailing lambda syntax where we
 

00:20:52.330 --> 00:20:54.000
special trailing lambda syntax where we
we now have to pass them as arguments

00:20:54.000 --> 00:20:54.010
we now have to pass them as arguments
 

00:20:54.010 --> 00:20:56.460
we now have to pass them as arguments
inside the parentheses whereas before we

00:20:56.460 --> 00:20:56.470
inside the parentheses whereas before we
 

00:20:56.470 --> 00:21:00.000
inside the parentheses whereas before we
did so immediately this extension starts

00:21:00.000 --> 00:21:00.010
did so immediately this extension starts
 

00:21:00.010 --> 00:21:03.030
did so immediately this extension starts
falling apart if we introduce another

00:21:03.030 --> 00:21:03.040
falling apart if we introduce another
 

00:21:03.040 --> 00:21:05.280
falling apart if we introduce another
conditional branch maybe we need to vary

00:21:05.280 --> 00:21:05.290
conditional branch maybe we need to vary
 

00:21:05.290 --> 00:21:08.160
conditional branch maybe we need to vary
the behavior across api's in three

00:21:08.160 --> 00:21:08.170
the behavior across api's in three
 

00:21:08.170 --> 00:21:08.630
the behavior across api's in three
different ways

00:21:08.630 --> 00:21:08.640
different ways
 

00:21:08.640 --> 00:21:11.610
different ways
well there's really no way that we can

00:21:11.610 --> 00:21:11.620
well there's really no way that we can
 

00:21:11.620 --> 00:21:14.640
well there's really no way that we can
make the extension do this the other

00:21:14.640 --> 00:21:14.650
make the extension do this the other
 

00:21:14.650 --> 00:21:17.400
make the extension do this the other
thing that is different about this

00:21:17.400 --> 00:21:17.410
thing that is different about this
 

00:21:17.410 --> 00:21:19.530
thing that is different about this
extension compared to the if statement

00:21:19.530 --> 00:21:19.540
extension compared to the if statement
 

00:21:19.540 --> 00:21:21.870
extension compared to the if statement
is that we're assuming the conditional

00:21:21.870 --> 00:21:21.880
is that we're assuming the conditional
 

00:21:21.880 --> 00:21:23.490
is that we're assuming the conditional
that we want to check is greater than or

00:21:23.490 --> 00:21:23.500
that we want to check is greater than or
 

00:21:23.500 --> 00:21:25.530
that we want to check is greater than or
equal to that the behavior we want to

00:21:25.530 --> 00:21:25.540
equal to that the behavior we want to
 

00:21:25.540 --> 00:21:27.510
equal to that the behavior we want to
run in the lambda we only want to run on

00:21:27.510 --> 00:21:27.520
run in the lambda we only want to run on
 

00:21:27.520 --> 00:21:30.299
run in the lambda we only want to run on
you know nineteen plus well a lot of

00:21:30.299 --> 00:21:30.309
you know nineteen plus well a lot of
 

00:21:30.309 --> 00:21:32.610
you know nineteen plus well a lot of
times some of the if statements again

00:21:32.610 --> 00:21:32.620
times some of the if statements again
 

00:21:32.620 --> 00:21:34.919
times some of the if statements again
sdk int will be less than or equal to

00:21:34.919 --> 00:21:34.929
sdk int will be less than or equal to
 

00:21:34.929 --> 00:21:37.049
sdk int will be less than or equal to
and so now we need a second extension in

00:21:37.049 --> 00:21:37.059
and so now we need a second extension in
 

00:21:37.059 --> 00:21:43.770
and so now we need a second extension in
order to support that use case so this

00:21:43.770 --> 00:21:43.780
order to support that use case so this
 

00:21:43.780 --> 00:21:45.419
order to support that use case so this
is another example of something that

00:21:45.419 --> 00:21:45.429
is another example of something that
 

00:21:45.429 --> 00:21:48.750
is another example of something that
we're not looking to do we don't want to

00:21:48.750 --> 00:21:48.760
we're not looking to do we don't want to
 

00:21:48.760 --> 00:21:51.810
we're not looking to do we don't want to
optimize for just a single use case or a

00:21:51.810 --> 00:21:51.820
optimize for just a single use case or a
 

00:21:51.820 --> 00:21:54.480
optimize for just a single use case or a
specific use case where

00:21:54.480 --> 00:21:54.490
specific use case where
 

00:21:54.490 --> 00:21:58.470
specific use case where
extension only supports one way of doing

00:21:58.470 --> 00:21:58.480
extension only supports one way of doing
 

00:21:58.480 --> 00:22:00.780
extension only supports one way of doing
something and then when you need to move

00:22:00.780 --> 00:22:00.790
something and then when you need to move
 

00:22:00.790 --> 00:22:02.669
something and then when you need to move
to something more complex you have to

00:22:02.669 --> 00:22:02.679
to something more complex you have to
 

00:22:02.679 --> 00:22:04.980
to something more complex you have to
revert to the original behavior we want

00:22:04.980 --> 00:22:04.990
revert to the original behavior we want
 

00:22:04.990 --> 00:22:08.040
revert to the original behavior we want
the extensions to you allow you to

00:22:08.040 --> 00:22:08.050
the extensions to you allow you to
 

00:22:08.050 --> 00:22:09.570
the extensions to you allow you to
express everything you would need to

00:22:09.570 --> 00:22:09.580
express everything you would need to
 

00:22:09.580 --> 00:22:18.630
express everything you would need to
express if it didn't exist okay so those

00:22:18.630 --> 00:22:18.640
express if it didn't exist okay so those
 

00:22:18.640 --> 00:22:20.340
express if it didn't exist okay so those
all the extensions we've been talking

00:22:20.340 --> 00:22:20.350
all the extensions we've been talking
 

00:22:20.350 --> 00:22:22.110
all the extensions we've been talking
about thus far have been ones that are

00:22:22.110 --> 00:22:22.120
about thus far have been ones that are
 

00:22:22.120 --> 00:22:26.730
about thus far have been ones that are
in the core KTX library I don't want to

00:22:26.730 --> 00:22:26.740
in the core KTX library I don't want to
 

00:22:26.740 --> 00:22:29.190
in the core KTX library I don't want to
go through a ton of the extensions that

00:22:29.190 --> 00:22:29.200
go through a ton of the extensions that
 

00:22:29.200 --> 00:22:30.990
go through a ton of the extensions that
are in these other libraries again I'm

00:22:30.990 --> 00:22:31.000
are in these other libraries again I'm
 

00:22:31.000 --> 00:22:32.340
are in these other libraries again I'm
going to show you how you can discover

00:22:32.340 --> 00:22:32.350
going to show you how you can discover
 

00:22:32.350 --> 00:22:35.480
going to show you how you can discover
them in a bit but I want to touch on

00:22:35.480 --> 00:22:35.490
them in a bit but I want to touch on
 

00:22:35.490 --> 00:22:43.470
them in a bit but I want to touch on
touch on one so for the fragment KTX we

00:22:43.470 --> 00:22:43.480
touch on one so for the fragment KTX we
 

00:22:43.480 --> 00:22:46.010
touch on one so for the fragment KTX we
have an extension which encapsulate s--

00:22:46.010 --> 00:22:46.020
have an extension which encapsulate s--
 

00:22:46.020 --> 00:22:48.780
have an extension which encapsulate s--
transactions we move the begin

00:22:48.780 --> 00:22:48.790
transactions we move the begin
 

00:22:48.790 --> 00:22:51.780
transactions we move the begin
transaction and the commit function

00:22:51.780 --> 00:22:51.790
transaction and the commit function
 

00:22:51.790 --> 00:22:54.750
transaction and the commit function
calls into an extension we use the fact

00:22:54.750 --> 00:22:54.760
calls into an extension we use the fact
 

00:22:54.760 --> 00:22:58.080
calls into an extension we use the fact
that we can use an inline function and a

00:22:58.080 --> 00:22:58.090
that we can use an inline function and a
 

00:22:58.090 --> 00:23:00.390
that we can use an inline function and a
lambda again to turn this into a zero

00:23:00.390 --> 00:23:00.400
lambda again to turn this into a zero
 

00:23:00.400 --> 00:23:03.510
lambda again to turn this into a zero
overhead thing our calling code then

00:23:03.510 --> 00:23:03.520
overhead thing our calling code then
 

00:23:03.520 --> 00:23:07.470
overhead thing our calling code then
becomes a little bit shorter where we

00:23:07.470 --> 00:23:07.480
becomes a little bit shorter where we
 

00:23:07.480 --> 00:23:09.480
becomes a little bit shorter where we
now use the transaction with a lambda

00:23:09.480 --> 00:23:09.490
now use the transaction with a lambda
 

00:23:09.490 --> 00:23:12.780
now use the transaction with a lambda
body so if you've used fragments you'll

00:23:12.780 --> 00:23:12.790
body so if you've used fragments you'll
 

00:23:12.790 --> 00:23:14.820
body so if you've used fragments you'll
know that commit is not the only

00:23:14.820 --> 00:23:14.830
know that commit is not the only
 

00:23:14.830 --> 00:23:17.580
know that commit is not the only
commitment function there's actually

00:23:17.580 --> 00:23:17.590
commitment function there's actually
 

00:23:17.590 --> 00:23:20.280
commitment function there's actually
more than one and so we can model this

00:23:20.280 --> 00:23:20.290
more than one and so we can model this
 

00:23:20.290 --> 00:23:23.400
more than one and so we can model this
by doing something like allowing you to

00:23:23.400 --> 00:23:23.410
by doing something like allowing you to
 

00:23:23.410 --> 00:23:25.410
by doing something like allowing you to
supply a boolean as to whether or not

00:23:25.410 --> 00:23:25.420
supply a boolean as to whether or not
 

00:23:25.420 --> 00:23:28.650
supply a boolean as to whether or not
you want to allow state loss or disallow

00:23:28.650 --> 00:23:28.660
you want to allow state loss or disallow
 

00:23:28.660 --> 00:23:31.560
you want to allow state loss or disallow
state loss when you're committing this

00:23:31.560 --> 00:23:31.570
state loss when you're committing this
 

00:23:31.570 --> 00:23:34.910
state loss when you're committing this
is really easy to accommodate but it

00:23:34.910 --> 00:23:34.920
is really easy to accommodate but it
 

00:23:34.920 --> 00:23:36.930
is really easy to accommodate but it
sort of goes against something I said

00:23:36.930 --> 00:23:36.940
sort of goes against something I said
 

00:23:36.940 --> 00:23:39.960
sort of goes against something I said
earlier where and we can update our call

00:23:39.960 --> 00:23:39.970
earlier where and we can update our call
 

00:23:39.970 --> 00:23:42.030
earlier where and we can update our call
site to be able to use this it sort of

00:23:42.030 --> 00:23:42.040
site to be able to use this it sort of
 

00:23:42.040 --> 00:23:43.320
site to be able to use this it sort of
goes against something I said earlier

00:23:43.320 --> 00:23:43.330
goes against something I said earlier
 

00:23:43.330 --> 00:23:44.970
goes against something I said earlier
though where I talked about minimizing

00:23:44.970 --> 00:23:44.980
though where I talked about minimizing
 

00:23:44.980 --> 00:23:48.120
though where I talked about minimizing
the impact of the implementation of

00:23:48.120 --> 00:23:48.130
the impact of the implementation of
 

00:23:48.130 --> 00:23:51.090
the impact of the implementation of
these extensions since this is an inline

00:23:51.090 --> 00:23:51.100
these extensions since this is an inline
 

00:23:51.100 --> 00:23:53.160
these extensions since this is an inline
function and then we've now put a

00:23:53.160 --> 00:23:53.170
function and then we've now put a
 

00:23:53.170 --> 00:23:55.560
function and then we've now put a
conditional inside that inline function

00:23:55.560 --> 00:23:55.570
conditional inside that inline function
 

00:23:55.570 --> 00:23:57.870
conditional inside that inline function
but conditional is being inlined

00:23:57.870 --> 00:23:57.880
but conditional is being inlined
 

00:23:57.880 --> 00:24:00.660
but conditional is being inlined
into all the call sites and so all the

00:24:00.660 --> 00:24:00.670
into all the call sites and so all the
 

00:24:00.670 --> 00:24:02.430
into all the call sites and so all the
call sites now have to have

00:24:02.430 --> 00:24:02.440
call sites now have to have
 

00:24:02.440 --> 00:24:05.220
call sites now have to have
additional inside of them so is this

00:24:05.220 --> 00:24:05.230
additional inside of them so is this
 

00:24:05.230 --> 00:24:09.659
additional inside of them so is this
actually a bad thing well if we look at

00:24:09.659 --> 00:24:09.669
actually a bad thing well if we look at
 

00:24:09.669 --> 00:24:11.639
actually a bad thing well if we look at
the bytecode that gets generated from

00:24:11.639 --> 00:24:11.649
the bytecode that gets generated from
 

00:24:11.649 --> 00:24:14.430
the bytecode that gets generated from
the call site when we specify allow

00:24:14.430 --> 00:24:14.440
the call site when we specify allow
 

00:24:14.440 --> 00:24:17.100
the call site when we specify allow
state loss true you don't really have to

00:24:17.100 --> 00:24:17.110
state loss true you don't really have to
 

00:24:17.110 --> 00:24:18.810
state loss true you don't really have to
understand byte code to understand

00:24:18.810 --> 00:24:18.820
understand byte code to understand
 

00:24:18.820 --> 00:24:20.340
understand byte code to understand
what's going on here there's essentially

00:24:20.340 --> 00:24:20.350
what's going on here there's essentially
 

00:24:20.350 --> 00:24:21.659
what's going on here there's essentially
three function calls

00:24:21.659 --> 00:24:21.669
three function calls
 

00:24:21.669 --> 00:24:24.240
three function calls
the first one is begin transaction the

00:24:24.240 --> 00:24:24.250
the first one is begin transaction the
 

00:24:24.250 --> 00:24:26.789
the first one is begin transaction the
second one is that replace which was

00:24:26.789 --> 00:24:26.799
second one is that replace which was
 

00:24:26.799 --> 00:24:28.950
second one is that replace which was
inside the lambda and the third one is

00:24:28.950 --> 00:24:28.960
inside the lambda and the third one is
 

00:24:28.960 --> 00:24:31.759
inside the lambda and the third one is
just a call to commit allowing stay loss

00:24:31.759 --> 00:24:31.769
just a call to commit allowing stay loss
 

00:24:31.769 --> 00:24:35.039
just a call to commit allowing stay loss
there's no if statement here

00:24:35.039 --> 00:24:35.049
there's no if statement here
 

00:24:35.049 --> 00:24:39.029
there's no if statement here
there's no conditional and that's

00:24:39.029 --> 00:24:39.039
there's no conditional and that's
 

00:24:39.039 --> 00:24:41.580
there's no conditional and that's
because since this is an inline function

00:24:41.580 --> 00:24:41.590
because since this is an inline function
 

00:24:41.590 --> 00:24:44.700
because since this is an inline function
and since the argument is a boolean the

00:24:44.700 --> 00:24:44.710
and since the argument is a boolean the
 

00:24:44.710 --> 00:24:47.129
and since the argument is a boolean the
compiler actually knows at compile time

00:24:47.129 --> 00:24:47.139
compiler actually knows at compile time
 

00:24:47.139 --> 00:24:51.960
compiler actually knows at compile time
what value you're supplying and so since

00:24:51.960 --> 00:24:51.970
what value you're supplying and so since
 

00:24:51.970 --> 00:24:53.759
what value you're supplying and so since
it knows a compile time it can actually

00:24:53.759 --> 00:24:53.769
it knows a compile time it can actually
 

00:24:53.769 --> 00:24:55.799
it knows a compile time it can actually
do dead code elimination and eliminate

00:24:55.799 --> 00:24:55.809
do dead code elimination and eliminate
 

00:24:55.809 --> 00:24:58.320
do dead code elimination and eliminate
the branches that can never possibly be

00:24:58.320 --> 00:24:58.330
the branches that can never possibly be
 

00:24:58.330 --> 00:25:02.549
the branches that can never possibly be
executed and so you actually get in

00:25:02.549 --> 00:25:02.559
executed and so you actually get in
 

00:25:02.559 --> 00:25:04.499
executed and so you actually get in
bytecode what's equivalent to what you

00:25:04.499 --> 00:25:04.509
bytecode what's equivalent to what you
 

00:25:04.509 --> 00:25:08.279
bytecode what's equivalent to what you
otherwise whatever written there's

00:25:08.279 --> 00:25:08.289
otherwise whatever written there's
 

00:25:08.289 --> 00:25:11.490
otherwise whatever written there's
actually more commit functions there's

00:25:11.490 --> 00:25:11.500
actually more commit functions there's
 

00:25:11.500 --> 00:25:12.990
actually more commit functions there's
one which allow you to commit now and

00:25:12.990 --> 00:25:13.000
one which allow you to commit now and
 

00:25:13.000 --> 00:25:14.580
one which allow you to commit now and
commit so we can also support that by

00:25:14.580 --> 00:25:14.590
commit so we can also support that by
 

00:25:14.590 --> 00:25:17.249
commit so we can also support that by
adding an additional boolean the same

00:25:17.249 --> 00:25:17.259
adding an additional boolean the same
 

00:25:17.259 --> 00:25:18.659
adding an additional boolean the same
thing happens here even though they are

00:25:18.659 --> 00:25:18.669
thing happens here even though they are
 

00:25:18.669 --> 00:25:20.909
thing happens here even though they are
now nested dead code elimination will

00:25:20.909 --> 00:25:20.919
now nested dead code elimination will
 

00:25:20.919 --> 00:25:22.590
now nested dead code elimination will
make it so that there is only one

00:25:22.590 --> 00:25:22.600
make it so that there is only one
 

00:25:22.600 --> 00:25:27.440
make it so that there is only one
function call in the resulting bytecode

00:25:27.440 --> 00:25:27.450
 
 

00:25:27.450 --> 00:25:33.119
 
okay as part of the this effort of all

00:25:33.119 --> 00:25:33.129
okay as part of the this effort of all
 

00:25:33.129 --> 00:25:35.310
okay as part of the this effort of all
these releases at i/o one of the things

00:25:35.310 --> 00:25:35.320
these releases at i/o one of the things
 

00:25:35.320 --> 00:25:38.090
these releases at i/o one of the things
that we've done is start creating a

00:25:38.090 --> 00:25:38.100
that we've done is start creating a
 

00:25:38.100 --> 00:25:42.210
that we've done is start creating a
Collins specific view of the libraries

00:25:42.210 --> 00:25:42.220
Collins specific view of the libraries
 

00:25:42.220 --> 00:25:43.649
Collins specific view of the libraries
that we publish and the android

00:25:43.649 --> 00:25:43.659
that we publish and the android
 

00:25:43.659 --> 00:25:46.860
that we publish and the android
framework itself so if you see in that

00:25:46.860 --> 00:25:46.870
framework itself so if you see in that
 

00:25:46.870 --> 00:25:48.480
framework itself so if you see in that
blue box there when you visit the

00:25:48.480 --> 00:25:48.490
blue box there when you visit the
 

00:25:48.490 --> 00:25:51.330
blue box there when you visit the
reference reference Docs it'll actually

00:25:51.330 --> 00:25:51.340
reference reference Docs it'll actually
 

00:25:51.340 --> 00:25:54.389
reference reference Docs it'll actually
show you that it I don't ask you if you

00:25:54.389 --> 00:25:54.399
show you that it I don't ask you if you
 

00:25:54.399 --> 00:25:55.889
show you that it I don't ask you if you
want to view a Collins specific version

00:25:55.889 --> 00:25:55.899
want to view a Collins specific version
 

00:25:55.899 --> 00:25:57.720
want to view a Collins specific version
of the platform or Android X libraries

00:25:57.720 --> 00:25:57.730
of the platform or Android X libraries
 

00:25:57.730 --> 00:26:00.180
of the platform or Android X libraries
and also if you scroll down and that

00:26:00.180 --> 00:26:00.190
and also if you scroll down and that
 

00:26:00.190 --> 00:26:02.730
and also if you scroll down and that
left navigation pane at the very bottom

00:26:02.730 --> 00:26:02.740
left navigation pane at the very bottom
 

00:26:02.740 --> 00:26:06.389
left navigation pane at the very bottom
we have links to them as well and what

00:26:06.389 --> 00:26:06.399
we have links to them as well and what
 

00:26:06.399 --> 00:26:08.960
we have links to them as well and what
these are are

00:26:08.960 --> 00:26:08.970
these are are
 

00:26:08.970 --> 00:26:12.020
these are are
a Colin view of these libraries and so

00:26:12.020 --> 00:26:12.030
a Colin view of these libraries and so
 

00:26:12.030 --> 00:26:14.899
a Colin view of these libraries and so
when you're browsing through say the

00:26:14.899 --> 00:26:14.909
when you're browsing through say the
 

00:26:14.909 --> 00:26:17.120
when you're browsing through say the
fragment package you'll be able to see

00:26:17.120 --> 00:26:17.130
fragment package you'll be able to see
 

00:26:17.130 --> 00:26:20.360
fragment package you'll be able to see
the extensions for fragment inside the

00:26:20.360 --> 00:26:20.370
the extensions for fragment inside the
 

00:26:20.370 --> 00:26:22.279
the extensions for fragment inside the
documentation it's no longer completely

00:26:22.279 --> 00:26:22.289
documentation it's no longer completely
 

00:26:22.289 --> 00:26:24.710
documentation it's no longer completely
separate one thing that's missing right

00:26:24.710 --> 00:26:24.720
separate one thing that's missing right
 

00:26:24.720 --> 00:26:26.779
separate one thing that's missing right
now is that we we don't actually tell

00:26:26.779 --> 00:26:26.789
now is that we we don't actually tell
 

00:26:26.789 --> 00:26:29.180
now is that we we don't actually tell
you the Maven coordinates of the the

00:26:29.180 --> 00:26:29.190
you the Maven coordinates of the the
 

00:26:29.190 --> 00:26:31.159
you the Maven coordinates of the the
artifact that these come from that's

00:26:31.159 --> 00:26:31.169
artifact that these come from that's
 

00:26:31.169 --> 00:26:34.430
artifact that these come from that's
coming soon and also the extensions in

00:26:34.430 --> 00:26:34.440
coming soon and also the extensions in
 

00:26:34.440 --> 00:26:35.390
coming soon and also the extensions in
core KTX

00:26:35.390 --> 00:26:35.400
core KTX
 

00:26:35.400 --> 00:26:39.080
core KTX
which extends the platform types don't

00:26:39.080 --> 00:26:39.090
which extends the platform types don't
 

00:26:39.090 --> 00:26:41.450
which extends the platform types don't
yet show up on the platform Doc's but

00:26:41.450 --> 00:26:41.460
yet show up on the platform Doc's but
 

00:26:41.460 --> 00:26:43.460
yet show up on the platform Doc's but
this is something that we wanted to get

00:26:43.460 --> 00:26:43.470
this is something that we wanted to get
 

00:26:43.470 --> 00:26:45.320
this is something that we wanted to get
out to show you that it's being worked

00:26:45.320 --> 00:26:45.330
out to show you that it's being worked
 

00:26:45.330 --> 00:26:48.770
out to show you that it's being worked
on and so hopefully those two things

00:26:48.770 --> 00:26:48.780
on and so hopefully those two things
 

00:26:48.780 --> 00:26:54.620
on and so hopefully those two things
will be coming soon all right I want to

00:26:54.620 --> 00:26:54.630
will be coming soon all right I want to
 

00:26:54.630 --> 00:26:57.260
will be coming soon all right I want to
touch on you know I'm here to talk about

00:26:57.260 --> 00:26:57.270
touch on you know I'm here to talk about
 

00:26:57.270 --> 00:27:00.230
touch on you know I'm here to talk about
Android KTX but callin extensions

00:27:00.230 --> 00:27:00.240
Android KTX but callin extensions
 

00:27:00.240 --> 00:27:02.090
Android KTX but callin extensions
there's nothing Android specific about

00:27:02.090 --> 00:27:02.100
there's nothing Android specific about
 

00:27:02.100 --> 00:27:06.260
there's nothing Android specific about
it what we're doing is building

00:27:06.260 --> 00:27:06.270
it what we're doing is building
 

00:27:06.270 --> 00:27:08.690
it what we're doing is building
extensions to try and make these

00:27:08.690 --> 00:27:08.700
extensions to try and make these
 

00:27:08.700 --> 00:27:10.610
extensions to try and make these
libraries more Kotlin friendly and

00:27:10.610 --> 00:27:10.620
libraries more Kotlin friendly and
 

00:27:10.620 --> 00:27:12.680
libraries more Kotlin friendly and
that's something that any library can do

00:27:12.680 --> 00:27:12.690
that's something that any library can do
 

00:27:12.690 --> 00:27:15.350
that's something that any library can do
and so I want to talk about the ways

00:27:15.350 --> 00:27:15.360
and so I want to talk about the ways
 

00:27:15.360 --> 00:27:18.110
and so I want to talk about the ways
that we think about how we can make

00:27:18.110 --> 00:27:18.120
that we think about how we can make
 

00:27:18.120 --> 00:27:19.789
that we think about how we can make
libraries more Kotlin friendly that

00:27:19.789 --> 00:27:19.799
libraries more Kotlin friendly that
 

00:27:19.799 --> 00:27:21.440
libraries more Kotlin friendly that
applied to both the Android libraries

00:27:21.440 --> 00:27:21.450
applied to both the Android libraries
 

00:27:21.450 --> 00:27:23.090
applied to both the Android libraries
but also applied to libraries that you

00:27:23.090 --> 00:27:23.100
but also applied to libraries that you
 

00:27:23.100 --> 00:27:27.520
but also applied to libraries that you
might be writing or you might be using

00:27:27.520 --> 00:27:27.530
 
 

00:27:27.530 --> 00:27:30.230
 
the first way to make a library really

00:27:30.230 --> 00:27:30.240
the first way to make a library really
 

00:27:30.240 --> 00:27:32.419
the first way to make a library really
column friendly is just rewrite the

00:27:32.419 --> 00:27:32.429
column friendly is just rewrite the
 

00:27:32.429 --> 00:27:34.669
column friendly is just rewrite the
whole thing in Kotlin I mean obviously

00:27:34.669 --> 00:27:34.679
whole thing in Kotlin I mean obviously
 

00:27:34.679 --> 00:27:36.980
whole thing in Kotlin I mean obviously
this isn't feasible for every library

00:27:36.980 --> 00:27:36.990
this isn't feasible for every library
 

00:27:36.990 --> 00:27:40.039
this isn't feasible for every library
but it's certainly an option for some if

00:27:40.039 --> 00:27:40.049
but it's certainly an option for some if
 

00:27:40.049 --> 00:27:42.289
but it's certainly an option for some if
it's a library that's private to your

00:27:42.289 --> 00:27:42.299
it's a library that's private to your
 

00:27:42.299 --> 00:27:44.779
it's a library that's private to your
app it's in your repository or its

00:27:44.779 --> 00:27:44.789
app it's in your repository or its
 

00:27:44.789 --> 00:27:47.779
app it's in your repository or its
internal to your company and you're

00:27:47.779 --> 00:27:47.789
internal to your company and you're
 

00:27:47.789 --> 00:27:50.210
internal to your company and you're
already using Kotlin this is a viable

00:27:50.210 --> 00:27:50.220
already using Kotlin this is a viable
 

00:27:50.220 --> 00:27:53.180
already using Kotlin this is a viable
option doesn't seem like something

00:27:53.180 --> 00:27:53.190
option doesn't seem like something
 

00:27:53.190 --> 00:27:54.860
option doesn't seem like something
that's totally viable for say the

00:27:54.860 --> 00:27:54.870
that's totally viable for say the
 

00:27:54.870 --> 00:27:57.830
that's totally viable for say the
android framework and I'm not quite sure

00:27:57.830 --> 00:27:57.840
android framework and I'm not quite sure
 

00:27:57.840 --> 00:28:00.230
android framework and I'm not quite sure
we're at the stage where an Android X

00:28:00.230 --> 00:28:00.240
we're at the stage where an Android X
 

00:28:00.240 --> 00:28:02.690
we're at the stage where an Android X
library could do this maybe a future

00:28:02.690 --> 00:28:02.700
library could do this maybe a future
 

00:28:02.700 --> 00:28:04.730
library could do this maybe a future
Android X library could be written in

00:28:04.730 --> 00:28:04.740
Android X library could be written in
 

00:28:04.740 --> 00:28:06.919
Android X library could be written in
Kotlin that seems like a strong

00:28:06.919 --> 00:28:06.929
Kotlin that seems like a strong
 

00:28:06.929 --> 00:28:13.640
Kotlin that seems like a strong
possibility what we've chosen to do with

00:28:13.640 --> 00:28:13.650
possibility what we've chosen to do with
 

00:28:13.650 --> 00:28:16.580
possibility what we've chosen to do with
most of the things that we publish is

00:28:16.580 --> 00:28:16.590
most of the things that we publish is
 

00:28:16.590 --> 00:28:20.029
most of the things that we publish is
sibling artifacts so the the main

00:28:20.029 --> 00:28:20.039
sibling artifacts so the the main
 

00:28:20.039 --> 00:28:21.580
sibling artifacts so the the main
library remains written

00:28:21.580 --> 00:28:21.590
library remains written
 

00:28:21.590 --> 00:28:23.980
library remains written
using Java language and we ship Kotlin

00:28:23.980 --> 00:28:23.990
using Java language and we ship Kotlin
 

00:28:23.990 --> 00:28:25.960
using Java language and we ship Kotlin
language features as a sibling artifacts

00:28:25.960 --> 00:28:25.970
language features as a sibling artifacts
 

00:28:25.970 --> 00:28:27.700
language features as a sibling artifacts
what's great about this is you don't

00:28:27.700 --> 00:28:27.710
what's great about this is you don't
 

00:28:27.710 --> 00:28:29.920
what's great about this is you don't
force the Kotlin standard library onto

00:28:29.920 --> 00:28:29.930
force the Kotlin standard library onto
 

00:28:29.930 --> 00:28:32.680
force the Kotlin standard library onto
your consumers unless they explicitly

00:28:32.680 --> 00:28:32.690
your consumers unless they explicitly
 

00:28:32.690 --> 00:28:35.830
your consumers unless they explicitly
want it you can curate the extensions to

00:28:35.830 --> 00:28:35.840
want it you can curate the extensions to
 

00:28:35.840 --> 00:28:38.260
want it you can curate the extensions to
be exactly what's needed to augment your

00:28:38.260 --> 00:28:38.270
be exactly what's needed to augment your
 

00:28:38.270 --> 00:28:41.950
be exactly what's needed to augment your
API where you get the Kotlin specific

00:28:41.950 --> 00:28:41.960
API where you get the Kotlin specific
 

00:28:41.960 --> 00:28:44.380
API where you get the Kotlin specific
features and what's really nice about

00:28:44.380 --> 00:28:44.390
features and what's really nice about
 

00:28:44.390 --> 00:28:46.480
features and what's really nice about
this is you don't have to control the

00:28:46.480 --> 00:28:46.490
this is you don't have to control the
 

00:28:46.490 --> 00:28:48.520
this is you don't have to control the
library that you're extending so if

00:28:48.520 --> 00:28:48.530
library that you're extending so if
 

00:28:48.530 --> 00:28:50.710
library that you're extending so if
you're just consuming a library and you

00:28:50.710 --> 00:28:50.720
you're just consuming a library and you
 

00:28:50.720 --> 00:28:52.330
you're just consuming a library and you
want to make part of it more column

00:28:52.330 --> 00:28:52.340
want to make part of it more column
 

00:28:52.340 --> 00:28:55.240
want to make part of it more column
friendly you can do that you can do that

00:28:55.240 --> 00:28:55.250
friendly you can do that you can do that
 

00:28:55.250 --> 00:28:57.490
friendly you can do that you can do that
either in your own app or you can

00:28:57.490 --> 00:28:57.500
either in your own app or you can
 

00:28:57.500 --> 00:29:00.220
either in your own app or you can
publish a set of extensions for a

00:29:00.220 --> 00:29:00.230
publish a set of extensions for a
 

00:29:00.230 --> 00:29:05.560
publish a set of extensions for a
library that someone else publishes but

00:29:05.560 --> 00:29:05.570
library that someone else publishes but
 

00:29:05.570 --> 00:29:08.080
library that someone else publishes but
is this the only are these the only two

00:29:08.080 --> 00:29:08.090
is this the only are these the only two
 

00:29:08.090 --> 00:29:11.440
is this the only are these the only two
options I want to take a look at

00:29:11.440 --> 00:29:11.450
options I want to take a look at
 

00:29:11.450 --> 00:29:14.310
options I want to take a look at
something that I think will lead into a

00:29:14.310 --> 00:29:14.320
something that I think will lead into a
 

00:29:14.320 --> 00:29:18.850
something that I think will lead into a
third somewhat hybrid option and I go

00:29:18.850 --> 00:29:18.860
third somewhat hybrid option and I go
 

00:29:18.860 --> 00:29:21.850
third somewhat hybrid option and I go
back to this simple alias extension

00:29:21.850 --> 00:29:21.860
back to this simple alias extension
 

00:29:21.860 --> 00:29:23.260
back to this simple alias extension
where we've taken the static method

00:29:23.260 --> 00:29:23.270
where we've taken the static method
 

00:29:23.270 --> 00:29:25.180
where we've taken the static method
defined in the Java language and turned

00:29:25.180 --> 00:29:25.190
defined in the Java language and turned
 

00:29:25.190 --> 00:29:26.680
defined in the Java language and turned
it into an extension method in the

00:29:26.680 --> 00:29:26.690
it into an extension method in the
 

00:29:26.690 --> 00:29:31.210
it into an extension method in the
Kotlin language if we look at the

00:29:31.210 --> 00:29:31.220
Kotlin language if we look at the
 

00:29:31.220 --> 00:29:34.540
Kotlin language if we look at the
implementation of this class on the Java

00:29:34.540 --> 00:29:34.550
implementation of this class on the Java
 

00:29:34.550 --> 00:29:37.110
implementation of this class on the Java
side I've included the first line

00:29:37.110 --> 00:29:37.120
side I've included the first line
 

00:29:37.120 --> 00:29:39.850
side I've included the first line
because we can see that it immediately

00:29:39.850 --> 00:29:39.860
because we can see that it immediately
 

00:29:39.860 --> 00:29:41.980
because we can see that it immediately
dereferences the argument that we pass

00:29:41.980 --> 00:29:41.990
dereferences the argument that we pass
 

00:29:41.990 --> 00:29:44.320
dereferences the argument that we pass
in as soon as we pass in a string it

00:29:44.320 --> 00:29:44.330
in as soon as we pass in a string it
 

00:29:44.330 --> 00:29:46.840
in as soon as we pass in a string it
says what's the you know maximum number

00:29:46.840 --> 00:29:46.850
says what's the you know maximum number
 

00:29:46.850 --> 00:29:48.940
says what's the you know maximum number
of characters that I can iterate over in

00:29:48.940 --> 00:29:48.950
of characters that I can iterate over in
 

00:29:48.950 --> 00:29:51.100
of characters that I can iterate over in
order to determine whether or not there

00:29:51.100 --> 00:29:51.110
order to determine whether or not there
 

00:29:51.110 --> 00:29:55.680
order to determine whether or not there
are digits and so if you've been using

00:29:55.680 --> 00:29:55.690
are digits and so if you've been using
 

00:29:55.690 --> 00:30:00.070
are digits and so if you've been using
Kotlin with java api x' you might know

00:30:00.070 --> 00:30:00.080
Kotlin with java api x' you might know
 

00:30:00.080 --> 00:30:02.340
Kotlin with java api x' you might know
that this means that the parameter is

00:30:02.340 --> 00:30:02.350
that this means that the parameter is
 

00:30:02.350 --> 00:30:05.380
that this means that the parameter is
going to be exposed as what's called a

00:30:05.380 --> 00:30:05.390
going to be exposed as what's called a
 

00:30:05.390 --> 00:30:07.270
going to be exposed as what's called a
platform type it has unknown null

00:30:07.270 --> 00:30:07.280
platform type it has unknown null
 

00:30:07.280 --> 00:30:10.060
platform type it has unknown null
ability but by from the implementation

00:30:10.060 --> 00:30:10.070
ability but by from the implementation
 

00:30:10.070 --> 00:30:12.400
ability but by from the implementation
we know right away that this method

00:30:12.400 --> 00:30:12.410
we know right away that this method
 

00:30:12.410 --> 00:30:15.820
we know right away that this method
simply cannot extend cannot accept null

00:30:15.820 --> 00:30:15.830
simply cannot extend cannot accept null
 

00:30:15.830 --> 00:30:18.550
simply cannot extend cannot accept null
values in the way that we would fix this

00:30:18.550 --> 00:30:18.560
values in the way that we would fix this
 

00:30:18.560 --> 00:30:22.900
values in the way that we would fix this
is by adding the non null annotation so

00:30:22.900 --> 00:30:22.910
is by adding the non null annotation so
 

00:30:22.910 --> 00:30:24.760
is by adding the non null annotation so
that what this annotation does is it

00:30:24.760 --> 00:30:24.770
that what this annotation does is it
 

00:30:24.770 --> 00:30:27.640
that what this annotation does is it
informs the collin compiler that there's

00:30:27.640 --> 00:30:27.650
informs the collin compiler that there's
 

00:30:27.650 --> 00:30:29.920
informs the collin compiler that there's
a restriction that there's special

00:30:29.920 --> 00:30:29.930
a restriction that there's special
 

00:30:29.930 --> 00:30:31.660
a restriction that there's special
behavior that it needs to take into

00:30:31.660 --> 00:30:31.670
behavior that it needs to take into
 

00:30:31.670 --> 00:30:33.780
behavior that it needs to take into
account where it needs to

00:30:33.780 --> 00:30:33.790
account where it needs to
 

00:30:33.790 --> 00:30:36.540
account where it needs to
in force that no one passes a

00:30:36.540 --> 00:30:36.550
in force that no one passes a
 

00:30:36.550 --> 00:30:39.690
in force that no one passes a
potentially nullable value or null into

00:30:39.690 --> 00:30:39.700
potentially nullable value or null into
 

00:30:39.700 --> 00:30:44.190
potentially nullable value or null into
this method and so this is something

00:30:44.190 --> 00:30:44.200
this method and so this is something
 

00:30:44.200 --> 00:30:46.920
this method and so this is something
this is all this is enabling a language

00:30:46.920 --> 00:30:46.930
this is all this is enabling a language
 

00:30:46.930 --> 00:30:48.720
this is all this is enabling a language
feature in Kotlin that simply doesn't

00:30:48.720 --> 00:30:48.730
feature in Kotlin that simply doesn't
 

00:30:48.730 --> 00:30:53.820
feature in Kotlin that simply doesn't
exist in Java now you can use tools that

00:30:53.820 --> 00:30:53.830
exist in Java now you can use tools that
 

00:30:53.830 --> 00:30:56.040
exist in Java now you can use tools that
will allow this enforcement to work for

00:30:56.040 --> 00:30:56.050
will allow this enforcement to work for
 

00:30:56.050 --> 00:30:58.410
will allow this enforcement to work for
a job but it's not intrinsic to the

00:30:58.410 --> 00:30:58.420
a job but it's not intrinsic to the
 

00:30:58.420 --> 00:31:03.000
a job but it's not intrinsic to the
language itself so if we can do

00:31:03.000 --> 00:31:03.010
language itself so if we can do
 

00:31:03.010 --> 00:31:05.010
language itself so if we can do
something like that for null Ness if we

00:31:05.010 --> 00:31:05.020
something like that for null Ness if we
 

00:31:05.020 --> 00:31:06.720
something like that for null Ness if we
can add this annotation for nullus to

00:31:06.720 --> 00:31:06.730
can add this annotation for nullus to
 

00:31:06.730 --> 00:31:08.550
can add this annotation for nullus to
inform the Kotlin compiler that it needs

00:31:08.550 --> 00:31:08.560
inform the Kotlin compiler that it needs
 

00:31:08.560 --> 00:31:11.100
inform the Kotlin compiler that it needs
to change its behavior when we invoke

00:31:11.100 --> 00:31:11.110
to change its behavior when we invoke
 

00:31:11.110 --> 00:31:13.860
to change its behavior when we invoke
this method can we do this for something

00:31:13.860 --> 00:31:13.870
this method can we do this for something
 

00:31:13.870 --> 00:31:17.460
this method can we do this for something
else say I want to take this static

00:31:17.460 --> 00:31:17.470
else say I want to take this static
 

00:31:17.470 --> 00:31:19.260
else say I want to take this static
method where the first argument is

00:31:19.260 --> 00:31:19.270
method where the first argument is
 

00:31:19.270 --> 00:31:22.560
method where the first argument is
really the the receiver and can I say

00:31:22.560 --> 00:31:22.570
really the the receiver and can I say
 

00:31:22.570 --> 00:31:24.150
really the the receiver and can I say
that this is actually going to be an

00:31:24.150 --> 00:31:24.160
that this is actually going to be an
 

00:31:24.160 --> 00:31:26.580
that this is actually going to be an
extension function when can vote from

00:31:26.580 --> 00:31:26.590
extension function when can vote from
 

00:31:26.590 --> 00:31:30.750
extension function when can vote from
Kotla and what this allows us to do

00:31:30.750 --> 00:31:30.760
Kotla and what this allows us to do
 

00:31:30.760 --> 00:31:33.270
Kotla and what this allows us to do
potentially is eliminate the need to

00:31:33.270 --> 00:31:33.280
potentially is eliminate the need to
 

00:31:33.280 --> 00:31:35.700
potentially is eliminate the need to
have this explicitly defined extension

00:31:35.700 --> 00:31:35.710
have this explicitly defined extension
 

00:31:35.710 --> 00:31:38.640
have this explicitly defined extension
at all right this extension only exists

00:31:38.640 --> 00:31:38.650
at all right this extension only exists
 

00:31:38.650 --> 00:31:40.440
at all right this extension only exists
you change the calling convention to

00:31:40.440 --> 00:31:40.450
you change the calling convention to
 

00:31:40.450 --> 00:31:42.630
you change the calling convention to
inform the compiler that we want to

00:31:42.630 --> 00:31:42.640
inform the compiler that we want to
 

00:31:42.640 --> 00:31:46.580
inform the compiler that we want to
allow you to call it in a different way

00:31:46.580 --> 00:31:46.590
 
 

00:31:46.590 --> 00:31:49.590
 
and so now we're left with just this the

00:31:49.590 --> 00:31:49.600
and so now we're left with just this the
 

00:31:49.600 --> 00:31:51.840
and so now we're left with just this the
Kotlin compiler sees that annotation

00:31:51.840 --> 00:31:51.850
Kotlin compiler sees that annotation
 

00:31:51.850 --> 00:31:53.730
Kotlin compiler sees that annotation
just like it's all the non null

00:31:53.730 --> 00:31:53.740
just like it's all the non null
 

00:31:53.740 --> 00:31:56.160
just like it's all the non null
annotation infer something from it and

00:31:56.160 --> 00:31:56.170
annotation infer something from it and
 

00:31:56.170 --> 00:31:58.050
annotation infer something from it and
allows you to call it in a way that's

00:31:58.050 --> 00:31:58.060
allows you to call it in a way that's
 

00:31:58.060 --> 00:32:03.690
allows you to call it in a way that's
more idiomatic for that language in the

00:32:03.690 --> 00:32:03.700
more idiomatic for that language in the
 

00:32:03.700 --> 00:32:05.790
more idiomatic for that language in the
bytecode we get what we otherwise would

00:32:05.790 --> 00:32:05.800
bytecode we get what we otherwise would
 

00:32:05.800 --> 00:32:07.650
bytecode we get what we otherwise would
have written right we still get the the

00:32:07.650 --> 00:32:07.660
have written right we still get the the
 

00:32:07.660 --> 00:32:09.690
have written right we still get the the
call to the static method and the

00:32:09.690 --> 00:32:09.700
call to the static method and the
 

00:32:09.700 --> 00:32:15.030
call to the static method and the
receiver becomes the first argument how

00:32:15.030 --> 00:32:15.040
receiver becomes the first argument how
 

00:32:15.040 --> 00:32:19.500
receiver becomes the first argument how
about this example

00:32:19.500 --> 00:32:19.510
 
 

00:32:19.510 --> 00:32:21.570
 
one thing you might have noticed is that

00:32:21.570 --> 00:32:21.580
one thing you might have noticed is that
 

00:32:21.580 --> 00:32:23.820
one thing you might have noticed is that
this extension is named update padding

00:32:23.820 --> 00:32:23.830
this extension is named update padding
 

00:32:23.830 --> 00:32:26.550
this extension is named update padding
not set padding now we can actually call

00:32:26.550 --> 00:32:26.560
not set padding now we can actually call
 

00:32:26.560 --> 00:32:30.270
not set padding now we can actually call
this extension set padding but the

00:32:30.270 --> 00:32:30.280
this extension set padding but the
 

00:32:30.280 --> 00:32:31.920
this extension set padding but the
problem is that it will only work for a

00:32:31.920 --> 00:32:31.930
problem is that it will only work for a
 

00:32:31.930 --> 00:32:34.110
problem is that it will only work for a
subset of arguments so in this case

00:32:34.110 --> 00:32:34.120
subset of arguments so in this case
 

00:32:34.120 --> 00:32:36.060
subset of arguments so in this case
we're we're just passing left and right

00:32:36.060 --> 00:32:36.070
we're we're just passing left and right
 

00:32:36.070 --> 00:32:38.520
we're we're just passing left and right
values we could call that set padding

00:32:38.520 --> 00:32:38.530
values we could call that set padding
 

00:32:38.530 --> 00:32:40.770
values we could call that set padding
and it would work fine but if we passed

00:32:40.770 --> 00:32:40.780
and it would work fine but if we passed
 

00:32:40.780 --> 00:32:44.040
and it would work fine but if we passed
left right and then top bottom

00:32:44.040 --> 00:32:44.050
left right and then top bottom
 

00:32:44.050 --> 00:32:47.670
left right and then top bottom
we'd be supplying four arguments and the

00:32:47.670 --> 00:32:47.680
we'd be supplying four arguments and the
 

00:32:47.680 --> 00:32:49.980
we'd be supplying four arguments and the
Kotlin compiler is going to see that the

00:32:49.980 --> 00:32:49.990
Kotlin compiler is going to see that the
 

00:32:49.990 --> 00:32:52.800
Kotlin compiler is going to see that the
real set padding also accepts four

00:32:52.800 --> 00:32:52.810
real set padding also accepts four
 

00:32:52.810 --> 00:32:53.970
real set padding also accepts four
arguments and it's going to prefer

00:32:53.970 --> 00:32:53.980
arguments and it's going to prefer
 

00:32:53.980 --> 00:32:56.430
arguments and it's going to prefer
calling the real one and the real one

00:32:56.430 --> 00:32:56.440
calling the real one and the real one
 

00:32:56.440 --> 00:32:58.170
calling the real one and the real one
doesn't have named parameters so you're

00:32:58.170 --> 00:32:58.180
doesn't have named parameters so you're
 

00:32:58.180 --> 00:33:00.480
doesn't have named parameters so you're
gonna get a compilation error that's the

00:33:00.480 --> 00:33:00.490
gonna get a compilation error that's the
 

00:33:00.490 --> 00:33:01.920
gonna get a compilation error that's the
reason we have to name this update

00:33:01.920 --> 00:33:01.930
reason we have to name this update
 

00:33:01.930 --> 00:33:06.990
reason we have to name this update
padding if we look at the real set

00:33:06.990 --> 00:33:07.000
padding if we look at the real set
 

00:33:07.000 --> 00:33:09.630
padding if we look at the real set
padding simple method that takes four

00:33:09.630 --> 00:33:09.640
padding simple method that takes four
 

00:33:09.640 --> 00:33:12.990
padding simple method that takes four
integers what if we could inform the

00:33:12.990 --> 00:33:13.000
integers what if we could inform the
 

00:33:13.000 --> 00:33:15.780
integers what if we could inform the
Kotlin compiler that these parameters

00:33:15.780 --> 00:33:15.790
Kotlin compiler that these parameters
 

00:33:15.790 --> 00:33:21.960
Kotlin compiler that these parameters
have names associated with them now it

00:33:21.960 --> 00:33:21.970
have names associated with them now it
 

00:33:21.970 --> 00:33:23.550
have names associated with them now it
would be nice to infer this just from

00:33:23.550 --> 00:33:23.560
would be nice to infer this just from
 

00:33:23.560 --> 00:33:25.440
would be nice to infer this just from
the parameter names directly not have to

00:33:25.440 --> 00:33:25.450
the parameter names directly not have to
 

00:33:25.450 --> 00:33:28.530
the parameter names directly not have to
specify the redundancy but I'll argue

00:33:28.530 --> 00:33:28.540
specify the redundancy but I'll argue
 

00:33:28.540 --> 00:33:30.480
specify the redundancy but I'll argue
that for one it's very nice being

00:33:30.480 --> 00:33:30.490
that for one it's very nice being
 

00:33:30.490 --> 00:33:33.000
that for one it's very nice being
explicit about these names in the

00:33:33.000 --> 00:33:33.010
explicit about these names in the
 

00:33:33.010 --> 00:33:36.690
explicit about these names in the
annotation in Java bytecode there

00:33:36.690 --> 00:33:36.700
annotation in Java bytecode there
 

00:33:36.700 --> 00:33:39.300
annotation in Java bytecode there
actually is a way for you to supply to

00:33:39.300 --> 00:33:39.310
actually is a way for you to supply to
 

00:33:39.310 --> 00:33:41.970
actually is a way for you to supply to
retain parameter names so the common

00:33:41.970 --> 00:33:41.980
retain parameter names so the common
 

00:33:41.980 --> 00:33:44.310
retain parameter names so the common
compiler could in theory use those but

00:33:44.310 --> 00:33:44.320
compiler could in theory use those but
 

00:33:44.320 --> 00:33:46.410
compiler could in theory use those but
one problem is that then it becomes an

00:33:46.410 --> 00:33:46.420
one problem is that then it becomes an
 

00:33:46.420 --> 00:33:48.210
one problem is that then it becomes an
all-or-nothing thing you have to in you

00:33:48.210 --> 00:33:48.220
all-or-nothing thing you have to in you
 

00:33:48.220 --> 00:33:51.000
all-or-nothing thing you have to in you
have to opt in to this behavior and then

00:33:51.000 --> 00:33:51.010
have to opt in to this behavior and then
 

00:33:51.010 --> 00:33:52.890
have to opt in to this behavior and then
suddenly every parameter name across

00:33:52.890 --> 00:33:52.900
suddenly every parameter name across
 

00:33:52.900 --> 00:33:55.200
suddenly every parameter name across
your library is set in stone whereas

00:33:55.200 --> 00:33:55.210
your library is set in stone whereas
 

00:33:55.210 --> 00:33:56.550
your library is set in stone whereas
with annotations that's something that

00:33:56.550 --> 00:33:56.560
with annotations that's something that
 

00:33:56.560 --> 00:34:00.930
with annotations that's something that
you could incrementally migrate so this

00:34:00.930 --> 00:34:00.940
you could incrementally migrate so this
 

00:34:00.940 --> 00:34:03.180
you could incrementally migrate so this
solves the this has the potential to

00:34:03.180 --> 00:34:03.190
solves the this has the potential to
 

00:34:03.190 --> 00:34:05.880
solves the this has the potential to
solve the naming part where now we can

00:34:05.880 --> 00:34:05.890
solve the naming part where now we can
 

00:34:05.890 --> 00:34:08.430
solve the naming part where now we can
call the real method from Colin and

00:34:08.430 --> 00:34:08.440
call the real method from Colin and
 

00:34:08.440 --> 00:34:10.830
call the real method from Colin and
specify the four arguments in any order

00:34:10.830 --> 00:34:10.840
specify the four arguments in any order
 

00:34:10.840 --> 00:34:13.830
specify the four arguments in any order
that we want based on what names we

00:34:13.830 --> 00:34:13.840
that we want based on what names we
 

00:34:13.840 --> 00:34:18.780
that we want based on what names we
provide how about the default value what

00:34:18.780 --> 00:34:18.790
provide how about the default value what
 

00:34:18.790 --> 00:34:21.419
provide how about the default value what
if we could pass in what if we could

00:34:21.419 --> 00:34:21.429
if we could pass in what if we could
 

00:34:21.429 --> 00:34:23.669
if we could pass in what if we could
specify an expression a Colin expression

00:34:23.669 --> 00:34:23.679
specify an expression a Colin expression
 

00:34:23.679 --> 00:34:27.419
specify an expression a Colin expression
which allowed the compiler to supply a

00:34:27.419 --> 00:34:27.429
which allowed the compiler to supply a
 

00:34:27.429 --> 00:34:30.210
which allowed the compiler to supply a
default when one wasn't supplied for you

00:34:30.210 --> 00:34:30.220
default when one wasn't supplied for you
 

00:34:30.220 --> 00:34:33.530
default when one wasn't supplied for you
by you

00:34:33.530 --> 00:34:33.540
 
 

00:34:33.540 --> 00:34:37.520
 
this would change our original extension

00:34:37.520 --> 00:34:37.530
this would change our original extension
 

00:34:37.530 --> 00:34:40.410
this would change our original extension
calling convention from calling our

00:34:40.410 --> 00:34:40.420
calling convention from calling our
 

00:34:40.420 --> 00:34:42.300
calling convention from calling our
extension to actually just using the

00:34:42.300 --> 00:34:42.310
extension to actually just using the
 

00:34:42.310 --> 00:34:46.650
extension to actually just using the
real method and then in the bytecode we

00:34:46.650 --> 00:34:46.660
real method and then in the bytecode we
 

00:34:46.660 --> 00:34:48.690
real method and then in the bytecode we
get the thing that we've started with

00:34:48.690 --> 00:34:48.700
get the thing that we've started with
 

00:34:48.700 --> 00:34:51.600
get the thing that we've started with
the thing that our explicit extension

00:34:51.600 --> 00:34:51.610
the thing that our explicit extension
 

00:34:51.610 --> 00:34:54.150
the thing that our explicit extension
would in line too but now the extension

00:34:54.150 --> 00:34:54.160
would in line too but now the extension
 

00:34:54.160 --> 00:34:57.360
would in line too but now the extension
doesn't have to exist the metadata that

00:34:57.360 --> 00:34:57.370
doesn't have to exist the metadata that
 

00:34:57.370 --> 00:35:00.140
doesn't have to exist the metadata that
we added in the form of annotations

00:35:00.140 --> 00:35:00.150
we added in the form of annotations
 

00:35:00.150 --> 00:35:02.520
we added in the form of annotations
informed the Colin compiler that we

00:35:02.520 --> 00:35:02.530
informed the Colin compiler that we
 

00:35:02.530 --> 00:35:04.890
informed the Colin compiler that we
wanted to enhance our ability to call

00:35:04.890 --> 00:35:04.900
wanted to enhance our ability to call
 

00:35:04.900 --> 00:35:07.470
wanted to enhance our ability to call
this function in a call and specific way

00:35:07.470 --> 00:35:07.480
this function in a call and specific way
 

00:35:07.480 --> 00:35:11.070
this function in a call and specific way
leveraging the Kotlin features and so

00:35:11.070 --> 00:35:11.080
leveraging the Kotlin features and so
 

00:35:11.080 --> 00:35:15.990
leveraging the Kotlin features and so
we're able to do so this is something so

00:35:15.990 --> 00:35:16.000
we're able to do so this is something so
 

00:35:16.000 --> 00:35:20.190
we're able to do so this is something so
colin has this process which is called

00:35:20.190 --> 00:35:20.200
colin has this process which is called
 

00:35:20.200 --> 00:35:23.250
colin has this process which is called
keep its collin evolution and

00:35:23.250 --> 00:35:23.260
keep its collin evolution and
 

00:35:23.260 --> 00:35:26.250
keep its collin evolution and
enhancement process and just this

00:35:26.250 --> 00:35:26.260
enhancement process and just this
 

00:35:26.260 --> 00:35:28.320
enhancement process and just this
morning we proposed this these

00:35:28.320 --> 00:35:28.330
morning we proposed this these
 

00:35:28.330 --> 00:35:31.680
morning we proposed this these
extensions or sorry these annotations as

00:35:31.680 --> 00:35:31.690
extensions or sorry these annotations as
 

00:35:31.690 --> 00:35:34.200
extensions or sorry these annotations as
keep 1:10 so this is something we're

00:35:34.200 --> 00:35:34.210
keep 1:10 so this is something we're
 

00:35:34.210 --> 00:35:38.460
keep 1:10 so this is something we're
proposing to add to the Colin compiler

00:35:38.460 --> 00:35:38.470
proposing to add to the Colin compiler
 

00:35:38.470 --> 00:35:40.470
proposing to add to the Colin compiler
so that it can understand these

00:35:40.470 --> 00:35:40.480
so that it can understand these
 

00:35:40.480 --> 00:35:42.990
so that it can understand these
annotations we have extension function

00:35:42.990 --> 00:35:43.000
annotations we have extension function
 

00:35:43.000 --> 00:35:44.850
annotations we have extension function
and extension property which are for

00:35:44.850 --> 00:35:44.860
and extension property which are for
 

00:35:44.860 --> 00:35:47.940
and extension property which are for
static methods default value which

00:35:47.940 --> 00:35:47.950
static methods default value which
 

00:35:47.950 --> 00:35:49.740
static methods default value which
allows supplying default values for

00:35:49.740 --> 00:35:49.750
allows supplying default values for
 

00:35:49.750 --> 00:35:53.910
allows supplying default values for
parameters and then Katie name which

00:35:53.910 --> 00:35:53.920
parameters and then Katie name which
 

00:35:53.920 --> 00:35:55.380
parameters and then Katie name which
allows you to provide an alternate name

00:35:55.380 --> 00:35:55.390
allows you to provide an alternate name
 

00:35:55.390 --> 00:35:59.700
allows you to provide an alternate name
for methods fields or parameters now

00:35:59.700 --> 00:35:59.710
for methods fields or parameters now
 

00:35:59.710 --> 00:36:03.260
for methods fields or parameters now
it's very important to note that this is

00:36:03.260 --> 00:36:03.270
it's very important to note that this is
 

00:36:03.270 --> 00:36:06.000
it's very important to note that this is
this is extremely early these names

00:36:06.000 --> 00:36:06.010
this is extremely early these names
 

00:36:06.010 --> 00:36:07.950
this is extremely early these names
might change the semantics might change

00:36:07.950 --> 00:36:07.960
might change the semantics might change
 

00:36:07.960 --> 00:36:10.530
might change the semantics might change
this may never actually be accepted into

00:36:10.530 --> 00:36:10.540
this may never actually be accepted into
 

00:36:10.540 --> 00:36:13.050
this may never actually be accepted into
the Colin compiler we have been working

00:36:13.050 --> 00:36:13.060
the Colin compiler we have been working
 

00:36:13.060 --> 00:36:14.850
the Colin compiler we have been working
with the JetBrains team for quite a

00:36:14.850 --> 00:36:14.860
with the JetBrains team for quite a
 

00:36:14.860 --> 00:36:16.680
with the JetBrains team for quite a
while on this and it's actually already

00:36:16.680 --> 00:36:16.690
while on this and it's actually already
 

00:36:16.690 --> 00:36:18.390
while on this and it's actually already
some of this is already prototyped

00:36:18.390 --> 00:36:18.400
some of this is already prototyped
 

00:36:18.400 --> 00:36:21.540
some of this is already prototyped
inside the Colin compiler we really

00:36:21.540 --> 00:36:21.550
inside the Colin compiler we really
 

00:36:21.550 --> 00:36:24.420
inside the Colin compiler we really
think this would be a way that we could

00:36:24.420 --> 00:36:24.430
think this would be a way that we could
 

00:36:24.430 --> 00:36:28.080
think this would be a way that we could
enhance the android framework for Kotlin

00:36:28.080 --> 00:36:28.090
enhance the android framework for Kotlin
 

00:36:28.090 --> 00:36:30.210
enhance the android framework for Kotlin
callers without actually having to go

00:36:30.210 --> 00:36:30.220
callers without actually having to go
 

00:36:30.220 --> 00:36:32.820
callers without actually having to go
and rewrite the android framework or at

00:36:32.820 --> 00:36:32.830
and rewrite the android framework or at
 

00:36:32.830 --> 00:36:35.550
and rewrite the android framework or at
least its API and Kotlin which is really

00:36:35.550 --> 00:36:35.560
least its API and Kotlin which is really
 

00:36:35.560 --> 00:36:39.660
least its API and Kotlin which is really
not feasible and it's also important to

00:36:39.660 --> 00:36:39.670
not feasible and it's also important to
 

00:36:39.670 --> 00:36:42.020
not feasible and it's also important to
note that while this is an option

00:36:42.020 --> 00:36:42.030
note that while this is an option
 

00:36:42.030 --> 00:36:44.100
note that while this is an option
assuming that it actually makes it into

00:36:44.100 --> 00:36:44.110
assuming that it actually makes it into
 

00:36:44.110 --> 00:36:46.230
assuming that it actually makes it into
the Colin compiler

00:36:46.230 --> 00:36:46.240
the Colin compiler
 

00:36:46.240 --> 00:36:48.789
the Colin compiler
it doesn't totally solve every problem

00:36:48.789 --> 00:36:48.799
it doesn't totally solve every problem
 

00:36:48.799 --> 00:36:51.849
it doesn't totally solve every problem
that our existing extensions are are

00:36:51.849 --> 00:36:51.859
that our existing extensions are are
 

00:36:51.859 --> 00:36:55.390
that our existing extensions are are
solving where we determine these

00:36:55.390 --> 00:36:55.400
solving where we determine these
 

00:36:55.400 --> 00:36:57.519
solving where we determine these
annotations that we proposed and keep

00:36:57.519 --> 00:36:57.529
annotations that we proposed and keep
 

00:36:57.529 --> 00:36:59.769
annotations that we proposed and keep
110 through looking through a bunch of

00:36:59.769 --> 00:36:59.779
110 through looking through a bunch of
 

00:36:59.779 --> 00:37:01.839
110 through looking through a bunch of
open source libraries looking through

00:37:01.839 --> 00:37:01.849
open source libraries looking through
 

00:37:01.849 --> 00:37:04.750
open source libraries looking through
our own libraries and seeing what we

00:37:04.750 --> 00:37:04.760
our own libraries and seeing what we
 

00:37:04.760 --> 00:37:06.190
our own libraries and seeing what we
thought would be the most useful

00:37:06.190 --> 00:37:06.200
thought would be the most useful
 

00:37:06.200 --> 00:37:10.170
thought would be the most useful
extensions what the the pattern of Java

00:37:10.170 --> 00:37:10.180
extensions what the the pattern of Java
 

00:37:10.180 --> 00:37:15.190
extensions what the the pattern of Java
methods were such that they would want

00:37:15.190 --> 00:37:15.200
methods were such that they would want
 

00:37:15.200 --> 00:37:19.359
methods were such that they would want
to be turned into extensions and so the

00:37:19.359 --> 00:37:19.369
to be turned into extensions and so the
 

00:37:19.369 --> 00:37:22.900
to be turned into extensions and so the
latter two really are complementary the

00:37:22.900 --> 00:37:22.910
latter two really are complementary the
 

00:37:22.910 --> 00:37:24.880
latter two really are complementary the
big advantages of the annotations is

00:37:24.880 --> 00:37:24.890
big advantages of the annotations is
 

00:37:24.890 --> 00:37:26.799
big advantages of the annotations is
that you you retain the single source of

00:37:26.799 --> 00:37:26.809
that you you retain the single source of
 

00:37:26.809 --> 00:37:30.819
that you you retain the single source of
truth you don't have to really know

00:37:30.819 --> 00:37:30.829
truth you don't have to really know
 

00:37:30.829 --> 00:37:33.160
truth you don't have to really know
Kotlin you don't have to add Kotlin

00:37:33.160 --> 00:37:33.170
Kotlin you don't have to add Kotlin
 

00:37:33.170 --> 00:37:34.569
Kotlin you don't have to add Kotlin
compiler to your build system you don't

00:37:34.569 --> 00:37:34.579
compiler to your build system you don't
 

00:37:34.579 --> 00:37:37.299
compiler to your build system you don't
have to publish tippling artifacts even

00:37:37.299 --> 00:37:37.309
have to publish tippling artifacts even
 

00:37:37.309 --> 00:37:39.279
have to publish tippling artifacts even
if you're a pure Java library you can

00:37:39.279 --> 00:37:39.289
if you're a pure Java library you can
 

00:37:39.289 --> 00:37:42.400
if you're a pure Java library you can
add these annotations and just enhance

00:37:42.400 --> 00:37:42.410
add these annotations and just enhance
 

00:37:42.410 --> 00:37:44.680
add these annotations and just enhance
your API so that Kotlin callers get the

00:37:44.680 --> 00:37:44.690
your API so that Kotlin callers get the
 

00:37:44.690 --> 00:37:51.220
your API so that Kotlin callers get the
more idiomatic syntax all right so to

00:37:51.220 --> 00:37:51.230
more idiomatic syntax all right so to
 

00:37:51.230 --> 00:37:53.589
more idiomatic syntax all right so to
sum up core KTX

00:37:53.589 --> 00:37:53.599
sum up core KTX
 

00:37:53.599 --> 00:37:56.440
sum up core KTX
is now part of android jetpack version

00:37:56.440 --> 00:37:56.450
is now part of android jetpack version
 

00:37:56.450 --> 00:37:57.910
is now part of android jetpack version
with android jetpack released with

00:37:57.910 --> 00:37:57.920
with android jetpack released with
 

00:37:57.920 --> 00:38:01.120
with android jetpack released with
Android jetpack there's a few new

00:38:01.120 --> 00:38:01.130
Android jetpack there's a few new
 

00:38:01.130 --> 00:38:03.220
Android jetpack there's a few new
artifacts as you can see here on the

00:38:03.220 --> 00:38:03.230
artifacts as you can see here on the
 

00:38:03.230 --> 00:38:05.670
artifacts as you can see here on the
screen there's definitely more coming

00:38:05.670 --> 00:38:05.680
screen there's definitely more coming
 

00:38:05.680 --> 00:38:07.930
screen there's definitely more coming
notable ones that we think are missing

00:38:07.930 --> 00:38:07.940
notable ones that we think are missing
 

00:38:07.940 --> 00:38:11.319
notable ones that we think are missing
our slices and view model so I would not

00:38:11.319 --> 00:38:11.329
our slices and view model so I would not
 

00:38:11.329 --> 00:38:13.240
our slices and view model so I would not
be surprised to see artifacts for those

00:38:13.240 --> 00:38:13.250
be surprised to see artifacts for those
 

00:38:13.250 --> 00:38:18.130
be surprised to see artifacts for those
in the coming months please check out

00:38:18.130 --> 00:38:18.140
in the coming months please check out
 

00:38:18.140 --> 00:38:20.529
in the coming months please check out
the Kotlin version of the reference

00:38:20.529 --> 00:38:20.539
the Kotlin version of the reference
 

00:38:20.539 --> 00:38:25.269
the Kotlin version of the reference
document or yeah the reference we you

00:38:25.269 --> 00:38:25.279
document or yeah the reference we you
 

00:38:25.279 --> 00:38:26.650
document or yeah the reference we you
know this is this is extremely early

00:38:26.650 --> 00:38:26.660
know this is this is extremely early
 

00:38:26.660 --> 00:38:29.920
know this is this is extremely early
where this required changes in daca and

00:38:29.920 --> 00:38:29.930
where this required changes in daca and
 

00:38:29.930 --> 00:38:33.279
where this required changes in daca and
and how we produce Docs and so it's

00:38:33.279 --> 00:38:33.289
and how we produce Docs and so it's
 

00:38:33.289 --> 00:38:34.510
and how we produce Docs and so it's
something we just wanted to get out

00:38:34.510 --> 00:38:34.520
something we just wanted to get out
 

00:38:34.520 --> 00:38:36.760
something we just wanted to get out
there and show you as a preview this is

00:38:36.760 --> 00:38:36.770
there and show you as a preview this is
 

00:38:36.770 --> 00:38:37.720
there and show you as a preview this is
definitely something that's being

00:38:37.720 --> 00:38:37.730
definitely something that's being
 

00:38:37.730 --> 00:38:42.220
definitely something that's being
actively worked on there's a new

00:38:42.220 --> 00:38:42.230
actively worked on there's a new
 

00:38:42.230 --> 00:38:45.789
actively worked on there's a new
component on the Android bug tracker for

00:38:45.789 --> 00:38:45.799
component on the Android bug tracker for
 

00:38:45.799 --> 00:38:50.740
component on the Android bug tracker for
Android KTX because core KTX and all the

00:38:50.740 --> 00:38:50.750
Android KTX because core KTX and all the
 

00:38:50.750 --> 00:38:53.019
Android KTX because core KTX and all the
KTX libraries are now part of jetpack

00:38:53.019 --> 00:38:53.029
KTX libraries are now part of jetpack
 

00:38:53.029 --> 00:38:56.180
KTX libraries are now part of jetpack
the source of truth has moved into the

00:38:56.180 --> 00:38:56.190
the source of truth has moved into the
 

00:38:56.190 --> 00:39:00.589
the source of truth has moved into the
support repository we're gonna be

00:39:00.589 --> 00:39:00.599
support repository we're gonna be
 

00:39:00.599 --> 00:39:02.839
support repository we're gonna be
migrating get the github issues on the

00:39:02.839 --> 00:39:02.849
migrating get the github issues on the
 

00:39:02.849 --> 00:39:06.020
migrating get the github issues on the
github project over to this bug tracker

00:39:06.020 --> 00:39:06.030
github project over to this bug tracker
 

00:39:06.030 --> 00:39:08.510
github project over to this bug tracker
in the coming weeks but it's important

00:39:08.510 --> 00:39:08.520
in the coming weeks but it's important
 

00:39:08.520 --> 00:39:10.130
in the coming weeks but it's important
to note that we're still going to be

00:39:10.130 --> 00:39:10.140
to note that we're still going to be
 

00:39:10.140 --> 00:39:12.530
to note that we're still going to be
accepting poor requests to the github

00:39:12.530 --> 00:39:12.540
accepting poor requests to the github
 

00:39:12.540 --> 00:39:15.290
accepting poor requests to the github
repo and syncing things back out to the

00:39:15.290 --> 00:39:15.300
repo and syncing things back out to the
 

00:39:15.300 --> 00:39:16.790
repo and syncing things back out to the
github repo it's just that the issues

00:39:16.790 --> 00:39:16.800
github repo it's just that the issues
 

00:39:16.800 --> 00:39:18.740
github repo it's just that the issues
will no longer be the source of truth on

00:39:18.740 --> 00:39:18.750
will no longer be the source of truth on
 

00:39:18.750 --> 00:39:20.690
will no longer be the source of truth on
github it will be on the Android bug

00:39:20.690 --> 00:39:20.700
github it will be on the Android bug
 

00:39:20.700 --> 00:39:23.500
github it will be on the Android bug
tracker

00:39:23.500 --> 00:39:23.510
 
 

00:39:23.510 --> 00:39:27.680
 
they keep was proposed I created the

00:39:27.680 --> 00:39:27.690
they keep was proposed I created the
 

00:39:27.690 --> 00:39:30.380
they keep was proposed I created the
poor request about an hour ago please go

00:39:30.380 --> 00:39:30.390
poor request about an hour ago please go
 

00:39:30.390 --> 00:39:32.780
poor request about an hour ago please go
check that out the the document contains

00:39:32.780 --> 00:39:32.790
check that out the the document contains
 

00:39:32.790 --> 00:39:36.770
check that out the the document contains
a lot more detail about examples like I

00:39:36.770 --> 00:39:36.780
a lot more detail about examples like I
 

00:39:36.780 --> 00:39:38.390
a lot more detail about examples like I
said the annotations that were chosen

00:39:38.390 --> 00:39:38.400
said the annotations that were chosen
 

00:39:38.400 --> 00:39:39.890
said the annotations that were chosen
are the ones that we think have the most

00:39:39.890 --> 00:39:39.900
are the ones that we think have the most
 

00:39:39.900 --> 00:39:42.050
are the ones that we think have the most
impact but at the bottom of the document

00:39:42.050 --> 00:39:42.060
impact but at the bottom of the document
 

00:39:42.060 --> 00:39:44.809
impact but at the bottom of the document
you'll see that there's if something

00:39:44.809 --> 00:39:44.819
you'll see that there's if something
 

00:39:44.819 --> 00:39:46.130
you'll see that there's if something
like this gets accepted there's a

00:39:46.130 --> 00:39:46.140
like this gets accepted there's a
 

00:39:46.140 --> 00:39:47.780
like this gets accepted there's a
potential for a future enhancement of

00:39:47.780 --> 00:39:47.790
potential for a future enhancement of
 

00:39:47.790 --> 00:39:52.910
potential for a future enhancement of
even more the the link to that should be

00:39:52.910 --> 00:39:52.920
even more the the link to that should be
 

00:39:52.920 --> 00:39:55.490
even more the the link to that should be
this I made this link last night before

00:39:55.490 --> 00:39:55.500
this I made this link last night before
 

00:39:55.500 --> 00:39:56.900
this I made this link last night before
I submitted it so hopefully it's

00:39:56.900 --> 00:39:56.910
I submitted it so hopefully it's
 

00:39:56.910 --> 00:40:01.770
I submitted it so hopefully it's
accurate and that's it thank you

00:40:01.770 --> 00:40:01.780
accurate and that's it thank you
 

00:40:01.780 --> 00:40:24.329
accurate and that's it thank you
[Music]

