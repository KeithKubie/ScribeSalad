WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.113
[BLANK_AUDIO]

00:00:05.113 --> 00:00:07.171
&gt;&gt; All right. So the DOM captures the content

00:00:07.171 --> 00:00:08.850
of the page. But we also need to know

00:00:08.850 --> 00:00:12.370
how to display the actual page itself. And to

00:00:12.370 --> 00:00:14.680
do that, we need to build a CSS Object Model.

00:00:14.680 --> 00:00:18.360
&gt;&gt; Mm. And judging by its name, I guess it's similar to the DOM?

00:00:18.360 --> 00:00:23.260
&gt;&gt; It's very close. Let's take a look. Ok. Let's say we've received the

00:00:23.260 --> 00:00:25.920
following CSS. The first thing the browser

00:00:25.920 --> 00:00:28.530
has to do is identify the correct tokens.

00:00:28.530 --> 00:00:30.040
&gt;&gt; But there's no angle brackets here,

00:00:30.040 --> 00:00:30.730
right?

00:00:30.730 --> 00:00:32.810
&gt;&gt; Yeah. CSS has its own set of rules

00:00:32.810 --> 00:00:36.070
for how to identify valid tokens. The details are not

00:00:36.070 --> 00:00:37.940
that important. If you're curious, you can check out

00:00:37.940 --> 00:00:42.040
the CSS specification link in the instructor notes. The important

00:00:42.040 --> 00:00:44.870
part is that the parser would convert the tokens

00:00:44.870 --> 00:00:47.910
to nodes, and in this case, the first would be

00:00:47.910 --> 00:00:51.580
the body, with its font size property. Next, we would

00:00:51.580 --> 00:00:55.420
get the paragraph node, and this is the important part.

00:00:55.420 --> 00:01:00.660
It is a child of body because all of visible content is part of body.

00:01:00.660 --> 00:01:03.820
&gt;&gt; Wait- Is that some CSS specification rule?

00:01:03.820 --> 00:01:05.040
&gt;&gt; Yeah. Exactly.

00:01:05.040 --> 00:01:06.610
&gt;&gt; Also note that the children of the

00:01:06.610 --> 00:01:10.280
body node, inherit it's parent's styling rules of

00:01:10.280 --> 00:01:12.670
sixteen pixel font size. This is what we

00:01:12.670 --> 00:01:16.030
mean by cascading rules and cascading style sheets.

00:01:16.030 --> 00:01:18.540
&gt;&gt; Interesting. So it's similar to, but not

00:01:18.540 --> 00:01:20.770
quite the same as, the DOM construction because

00:01:20.770 --> 00:01:24.880
CSS rules cascade down. Hm curious. Let's see I got

00:01:24.880 --> 00:01:27.050
a style sheet with a lot of rules. Could we also

00:01:27.050 --> 00:01:30.010
apply the same incremental processing trick, like we do with HTML,

00:01:30.010 --> 00:01:34.100
to make the page display faster? That's a great question. Unfortunately,

00:01:34.100 --> 00:01:36.950
we can't. We can't use a partial CSS tree. Let

00:01:36.950 --> 00:01:39.730
me show you why. Let's say we just received the first

00:01:39.730 --> 00:01:42.860
view bites of our CSS and it contains the two rules

00:01:42.860 --> 00:01:46.160
we have here. So, we go ahead and build the CSS

00:01:46.160 --> 00:01:49.240
object model. It's tempting to use this tree

00:01:49.240 --> 00:01:51.620
to render a page, but there's a problem. Let's

00:01:51.620 --> 00:01:56.500
say we now get the next chunk of CSS and it contains more rules. In this case,

00:01:56.500 --> 00:02:01.710
we have the paragraph font weight normal. CSS allows us to redefine

00:02:01.710 --> 00:02:07.040
and refine the style properties. This is perfectly valid. But notice

00:02:07.040 --> 00:02:11.910
that this rule would allow us to change our CSS on tree.

00:02:11.910 --> 00:02:16.640
And make the text in paragraph node display with normal weight.

00:02:16.640 --> 00:02:20.208
&gt;&gt; So that's a gotcha. So, you're saying we can't really use a partial C-S-S on

00:02:20.208 --> 00:02:22.050
tree. Because then it could lead us to

00:02:22.050 --> 00:02:24.070
use the wrong styles when we render the page.

00:02:24.070 --> 00:02:27.760
&gt;&gt; Exactly, the browser blocks page rendering, until it receives

00:02:27.760 --> 00:02:31.790
and processes all of the CSS. CSS is render blocking.

