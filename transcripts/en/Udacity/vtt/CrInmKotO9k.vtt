WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Let's get back to our compiler.

00:00:02.000 --> 00:00:05.000
Again, in matchset I pulled out one more clause.

00:00:05.000 --> 00:00:09.000
This is a clause for sequence, and this is what we return.

00:00:09.000 --> 00:00:13.000
If I want to write the compiler for that sequence clause,

00:00:13.000 --> 00:00:17.000
I would say let's define seq(x, y).

00:00:17.000 --> 00:00:23.000
It's a compiler so it's going to return a function that operates on x and y,

00:00:23.000 --> 00:00:27.000
take as input a text and then returns as result.

00:00:27.000 --> 00:00:30.000
We could take exactly that result.

00:00:30.000 --> 00:00:34.000
While I'm moving everything to this more functional notation,

00:00:34.000 --> 00:00:36.000
I decided let's just show you a different way to do this.

00:00:36.000 --> 00:00:40.000
This way to do it would be fine, but I could have the function return that.

00:00:40.000 --> 00:00:47.000
But instead, let's have it say what we're really trying to do is form a union of sets.

00:00:47.000 --> 00:00:52.000
What are the sets? The sets that we're going to apply union to.

00:00:52.000 --> 00:00:55.000
First we apply x to the text, and that's going to give us a set of remainders.

00:00:55.000 --> 00:01:00.000
For each of the remainders, we want to apply y to it.

00:01:00.000 --> 00:01:06.000
What we're saying is we're going to map y to each set of remainders.

00:01:06.000 --> 00:01:08.000
Then we want to union all those together.

00:01:08.000 --> 00:01:11.000
Now, union, it turns out, doesn't take a collection.

00:01:11.000 --> 00:01:14.000
It takes arguments with union a, b, c.

00:01:14.000 --> 00:01:21.000
So we want to turn this collection into a list of arguments to union.

00:01:21.000 --> 00:01:27.000
We do that using this apply notation of saying let's just put a star in there.

00:01:27.000 --> 00:01:30.000
Now, we've got out compiler for sequence.

00:01:30.000 --> 00:01:36.000
It's the function from text to the set that results from finding all the remainders for x

00:01:36.000 --> 00:01:40.000
and then finding all the remainders from each of those after we apply y.

00:01:40.000 --> 00:01:45.000
Unioning all those together in union will eliminate duplicates.

00:01:45.000 --> 00:01:47.000
Now it's your turn to do one.

00:01:47.000 --> 00:01:51.000
This was the definition of alt in the interpreter matchset.

00:01:51.000 --> 00:01:55.000
Now I want you to write the definition of the compiler for alt,

00:01:55.000 --> 09:59:59.000
take a pattern for (x, y), and return the function that implements that.

