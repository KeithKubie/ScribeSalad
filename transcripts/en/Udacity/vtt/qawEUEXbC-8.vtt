WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.019
Let's consider a network of SDN switches, such

00:00:04.019 --> 00:00:07.250
as open flow switches and a controller that

00:00:07.250 --> 00:00:09.340
is controlling those switches, and let's assume that

00:00:09.340 --> 00:00:13.760
we would like to write a program using this

00:00:13.760 --> 00:00:16.560
interface. We can think about this programming as

00:00:16.560 --> 00:00:19.440
proceeding in three steps. The first is that the

00:00:19.440 --> 00:00:23.300
controller needs to read, or monitor network state,

00:00:23.300 --> 00:00:26.020
as well as various events that may be occurring

00:00:26.020 --> 00:00:29.160
in the network. These events may include failures, topology

00:00:29.160 --> 00:00:32.960
changes, security events, and so forth. The second step

00:00:32.960 --> 00:00:37.240
is to compute the policy based on the state

00:00:37.240 --> 00:00:39.700
that the controller sees from the network. This is

00:00:39.700 --> 00:00:41.860
effectively what we talked about last time, is the

00:00:41.860 --> 00:00:44.390
role of the decision plane. In deciding what the

00:00:44.390 --> 00:00:47.470
forwarding behavior of the network should be, in response

00:00:47.470 --> 00:00:51.430
to various states that it reads from the network switches.

00:00:51.430 --> 00:00:54.440
The third step is to write policy

00:00:54.440 --> 00:00:57.830
back to the switches by installing the appropriate

00:00:57.830 --> 00:01:01.260
flow table state into the switches. Consistency

00:01:01.260 --> 00:01:04.220
problems can arise in two steps. First, the

00:01:04.220 --> 00:01:07.300
controller may read state from the network

00:01:07.300 --> 00:01:10.680
switches at different times, resulting in an inconsistent

00:01:10.680 --> 00:01:13.570
view of the network-wide state, and second, the

00:01:13.570 --> 00:01:16.630
controller may be writing policy as traffic is

00:01:16.630 --> 00:01:19.268
actively flowing through the network. Which can

00:01:19.268 --> 00:01:21.779
disrupt packets along an n to n path,

00:01:21.779 --> 00:01:25.586
or packets that should be treated consistently because

00:01:25.586 --> 00:01:29.020
they're part of the same flow. Both reading

00:01:29.020 --> 00:01:32.010
and writing networks state can be challenging because

00:01:32.010 --> 00:01:35.890
open flow rules are simple match action predicates,

00:01:35.890 --> 00:01:38.710
so it can be very difficult to express

00:01:38.710 --> 00:01:41.750
complex logic with these rules. If we want

00:01:41.750 --> 00:01:47.100
to read state that requires multiple rules, expressing

00:01:47.100 --> 00:01:51.990
a policy that allows us to read such a state can be complicated

00:01:51.990 --> 00:01:57.120
without more sophisticated predicates. For example, let's suppose that

00:01:57.120 --> 00:02:01.110
when we are reading state, we'd like to see all web serving traffic except for

00:02:01.110 --> 00:02:03.810
source one, two, three, four. Simple match

00:02:03.810 --> 00:02:07.010
action rules do not allow us to express

00:02:07.010 --> 00:02:10.080
such exceptions. As a solution to this

00:02:10.080 --> 00:02:13.230
problem, we need a language primitive that

00:02:13.230 --> 00:02:16.140
allows us to express predicates. Here is

00:02:16.140 --> 00:02:19.180
a simple statement that has several predicates;

00:02:19.180 --> 00:02:25.995
such as, and and not. A runtime system can then translate these predicates into

00:02:25.995 --> 00:02:28.980
low-level open flow rules, ensuring that they

00:02:28.980 --> 00:02:32.220
are installed atomically and in the right order.

00:02:32.220 --> 00:02:34.540
Another problem that arises is that switches only

00:02:34.540 --> 00:02:37.930
have limited space for rules. It's simply not

00:02:37.930 --> 00:02:41.960
possible to install all possible rule patterns for

00:02:41.960 --> 00:02:44.780
every set of flows that we'd like to monitor.

00:02:45.990 --> 00:02:48.750
For example, if we'd like to count the

00:02:48.750 --> 00:02:52.180
number of bytes for every source IP address, and

00:02:52.180 --> 00:02:54.560
generate a histogram with the resulting traffic, we

00:02:54.560 --> 00:02:57.430
would potentially need a flow table entry for every

00:02:57.430 --> 00:03:00.060
possible source IP address. It's simply not

00:03:00.060 --> 00:03:03.660
possible to install all of these possible rules.

00:03:03.660 --> 00:03:05.650
The solution is to have the run

00:03:05.650 --> 00:03:10.600
time system dynamically unfold rules as traffic arrives.

00:03:10.600 --> 00:03:12.930
A programmer would specify something like a

00:03:12.930 --> 00:03:15.780
group by source IP address, and the run

00:03:15.780 --> 00:03:19.390
time system would dynamically add open flow rules

00:03:19.390 --> 00:03:23.340
to the switch as traffic arrives. Thereby guaranteeing

00:03:23.340 --> 00:03:27.890
that there are only rules in the switch that correspond to active traffic.

