WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:02.150
LYLA FUJIWARA: You need to
run background processes,

00:00:02.150 --> 00:00:04.691
whether it's syncing with the
server for the freshest content

00:00:04.691 --> 00:00:06.350
or crunching data for your app.

00:00:06.350 --> 00:00:08.210
However, running
background processes

00:00:08.210 --> 00:00:11.120
leads to a tricky compromise
for the operating system.

00:00:11.120 --> 00:00:14.690
Even if 20 apps have requested
very important background work,

00:00:14.690 --> 00:00:16.880
the app that the user is
actually interacting with

00:00:16.880 --> 00:00:18.560
needs to run smoothly.

00:00:18.560 --> 00:00:21.020
Android Oreo introduces
a radically different way

00:00:21.020 --> 00:00:22.950
to think about
background services.

00:00:22.950 --> 00:00:25.796
Apps cannot run freely
in the background.

00:00:25.796 --> 00:00:27.420
This has implications
for apps launched

00:00:27.420 --> 00:00:29.570
from an implicit
broadcast, as well as

00:00:29.570 --> 00:00:31.980
apps starting services
in the background.

00:00:31.980 --> 00:00:34.220
Here's a quick list
of affected APIs.

00:00:34.220 --> 00:00:36.440
Location APIs are also
affected, but I'm not

00:00:36.440 --> 00:00:37.970
going to be covering these now.

00:00:37.970 --> 00:00:41.030
More details on location
updates are in the notes below.

00:00:41.030 --> 00:00:43.230
These changes are true
for all apps targeting

00:00:43.230 --> 00:00:45.350
O. But even if you
don't target O,

00:00:45.350 --> 00:00:47.270
users can turn these
limitations on,

00:00:47.270 --> 00:00:49.880
so you need to be aware
of these changes anyways.

00:00:49.880 --> 00:00:53.240
First on the list of background
behavior changes are services.

00:00:53.240 --> 00:00:55.520
Calling start service
from the background

00:00:55.520 --> 00:00:58.250
will cause an illegal
state exception.

00:00:58.250 --> 00:01:00.080
Now this does not
affect services started

00:01:00.080 --> 00:01:02.120
when your app is visible
and in the foreground,

00:01:02.120 --> 00:01:04.122
nor does it affect
bound services.

00:01:04.122 --> 00:01:06.080
Here are a few more
situations where the app is

00:01:06.080 --> 00:01:07.850
considered in the foreground.

00:01:07.850 --> 00:01:10.430
When your app moves from the
foreground to the background,

00:01:10.430 --> 00:01:13.550
there is a short grace period
before your services shut down.

00:01:13.550 --> 00:01:16.670
The service shuts down as
if it had called stop self.

00:01:16.670 --> 00:01:19.400
Now these changes affect
everything that is a service.

00:01:19.400 --> 00:01:21.380
So are IntentServices affected?

00:01:21.380 --> 00:01:22.430
Well, yes.

00:01:22.430 --> 00:01:24.140
Are Pending services affected?

00:01:24.140 --> 00:01:27.620
Not when they are created, but
when they are sent, so yes.

00:01:27.620 --> 00:01:30.080
This even affects services
you start in the background

00:01:30.080 --> 00:01:32.330
that you intend to
promote to the foreground.

00:01:32.330 --> 00:01:34.220
The good news is that
there are a few options

00:01:34.220 --> 00:01:35.900
for saving your services.

00:01:35.900 --> 00:01:37.750
Unless your app is
an alarm clock app,

00:01:37.750 --> 00:01:41.000
90% of the time your best option
is to replace your background

00:01:41.000 --> 00:01:42.499
service with a scheduled job.

00:01:42.499 --> 00:01:44.540
While you are no longer
allowed to start services

00:01:44.540 --> 00:01:46.040
in the background,
job scheduling

00:01:46.040 --> 00:01:48.026
could do background
work on your behalf.

00:01:48.026 --> 00:01:49.400
This allows the
framework to take

00:01:49.400 --> 00:01:51.774
all of the scheduled jobs and
their different constraints

00:01:51.774 --> 00:01:53.440
and figure out which
jobs to run when.

00:01:53.440 --> 00:01:55.940
There are a number of different
solutions for job scheduling

00:01:55.940 --> 00:01:57.287
depending on your apps' needs.

00:01:57.287 --> 00:01:59.870
I've linked to the documentation
which explains the tradeoffs,

00:01:59.870 --> 00:02:01.460
but if you want
my advice, I would

00:02:01.460 --> 00:02:04.670
look into using Firebase
JobDispatcher and the new Job

00:02:04.670 --> 00:02:06.050
IntentService.

00:02:06.050 --> 00:02:10.160
Job IntentService is especially
handy to replace IntentService.

00:02:10.160 --> 00:02:12.950
Next is the temporary
service whitelist.

00:02:12.950 --> 00:02:15.100
There are a few special
cases listed here

00:02:15.100 --> 00:02:17.690
where the app will be
temporarily whitelisted

00:02:17.690 --> 00:02:19.610
and act for a short
period of time

00:02:19.610 --> 00:02:21.420
as if it's in the foreground.

00:02:21.420 --> 00:02:23.990
If you want to trigger work
when data on the server changes,

00:02:23.990 --> 00:02:27.140
consider implementing Firebase
Cloud Messaging on your server

00:02:27.140 --> 00:02:28.250
and app.

00:02:28.250 --> 00:02:30.870
If used a high
priority FCM message,

00:02:30.870 --> 00:02:33.020
you will receive that
message immediately

00:02:33.020 --> 00:02:34.790
even with the system is in Doze.

00:02:34.790 --> 00:02:37.362
You will also get on that
handy service whitelist

00:02:37.362 --> 00:02:39.320
so you could start a
service as if the app were

00:02:39.320 --> 00:02:40.710
in the foreground.

00:02:40.710 --> 00:02:43.121
Now if it's a normal
priority FCM message,

00:02:43.121 --> 00:02:45.620
the message is delivered when
a user turns the device screen

00:02:45.620 --> 00:02:48.350
on or during the Doze
maintenance window.

00:02:48.350 --> 00:02:50.810
You are not whitelisted
to start services though.

00:02:50.810 --> 00:02:53.810
So if your app receives both
high and normal priority

00:02:53.810 --> 00:02:56.900
messages, one approach is
to try starting the service,

00:02:56.900 --> 00:02:58.850
and if for any
reason that fails,

00:02:58.850 --> 00:03:01.480
have a fallback, such
as starting a job.

00:03:01.480 --> 00:03:03.230
If the service is
something the user might

00:03:03.230 --> 00:03:05.360
interact with or
want to monitor,

00:03:05.360 --> 00:03:07.690
you can make a foreground
service instead.

00:03:07.690 --> 00:03:10.100
Foreground services have
a persistent notification

00:03:10.100 --> 00:03:13.240
onscreen which informs the user
that they're actually running.

00:03:13.240 --> 00:03:15.500
Timers and navigation
apps are common examples

00:03:15.500 --> 00:03:18.540
of apps that employ foreground
services effectively.

00:03:18.540 --> 00:03:20.040
The thing is the
old way of starting

00:03:20.040 --> 00:03:22.820
a foreground service from the
background will no longer work.

00:03:22.820 --> 00:03:26.150
Instead, switch to the new API
to start a foreground service.

00:03:26.150 --> 00:03:29.690
The steps are first, use the
new start foreground service

00:03:29.690 --> 00:03:30.325
method.

00:03:30.325 --> 00:03:31.700
This creates a
background service

00:03:31.700 --> 00:03:34.340
that you must immediately
promote to the foreground.

00:03:34.340 --> 00:03:36.630
Within the service,
make a notification.

00:03:36.630 --> 00:03:38.240
Your foreground
service notification

00:03:38.240 --> 00:03:39.860
should always be
of low importance

00:03:39.860 --> 00:03:42.830
or higher so that it's
actually visible to the user.

00:03:42.830 --> 00:03:44.864
It should not be
of mid importance.

00:03:44.864 --> 00:03:47.030
The final step is to have
the service promote itself

00:03:47.030 --> 00:03:50.090
to the foreground using start
foreground and the notification

00:03:50.090 --> 00:03:51.064
that you just made.

00:03:51.064 --> 00:03:53.480
If you need a PendingIntent
to start a foreground service,

00:03:53.480 --> 00:03:56.177
you can use PendingIntent's new
get foreground service method,

00:03:56.177 --> 00:03:58.010
and then follow the
same steps to promote it

00:03:58.010 --> 00:03:59.600
to a foreground service.

00:03:59.600 --> 00:04:01.220
If none of those
options work for you,

00:04:01.220 --> 00:04:02.810
you might consider
deferring your work

00:04:02.810 --> 00:04:04.690
until your app is
in the foreground.

00:04:04.690 --> 00:04:07.190
Now if you need to test your
app under the new restrictions,

00:04:07.190 --> 00:04:09.950
I've also included links
below with the adb commands

00:04:09.950 --> 00:04:11.810
to make the app run
in the background

00:04:11.810 --> 00:04:14.670
and to force background
limitations for your app.

00:04:14.670 --> 00:04:17.390
OK, let's switch to talking
about implicit broadcast

00:04:17.390 --> 00:04:19.040
receiver limitations.

00:04:19.040 --> 00:04:20.990
Broadcast receivers
that are statically

00:04:20.990 --> 00:04:23.840
defined and listening
for implicit broadcasts

00:04:23.840 --> 00:04:25.970
will not receive
those broadcasts.

00:04:25.970 --> 00:04:29.150
Implicit broadcasts do not have
the target component attribute

00:04:29.150 --> 00:04:29.840
set.

00:04:29.840 --> 00:04:31.850
And static broadcast
receivers are defined

00:04:31.850 --> 00:04:33.650
in the Android manifest.

00:04:33.650 --> 00:04:35.930
Prior to Android Oreo,
implicit broadcasts

00:04:35.930 --> 00:04:37.940
would trigger any component
listening for them

00:04:37.940 --> 00:04:39.170
in the manifest.

00:04:39.170 --> 00:04:41.270
Now, in research
constrained situations,

00:04:41.270 --> 00:04:42.680
this would cause
memory thrashing

00:04:42.680 --> 00:04:44.554
as a single broadcast
triggering the creation

00:04:44.554 --> 00:04:47.337
of a bunch of different
components from different apps.

00:04:47.337 --> 00:04:48.920
So here are your
options for replacing

00:04:48.920 --> 00:04:51.560
static implicit
broadcast receivers.

00:04:51.560 --> 00:04:53.280
Now there's a short
list of exceptions,

00:04:53.280 --> 00:04:55.490
so you should absolutely
check that list first.

00:04:55.490 --> 00:04:58.090
If the broadcast is on that
list, it won't be affected

00:04:58.090 --> 00:04:59.720
and it will function as normal.

00:04:59.720 --> 00:05:02.330
This list contains things such
as changing locale or plugging

00:05:02.330 --> 00:05:03.480
in headphones.

00:05:03.480 --> 00:05:05.110
The full document is linked.

00:05:05.110 --> 00:05:07.620
If your broadcast is
not the exception list,

00:05:07.620 --> 00:05:09.499
you might be able to
replace it with a job.

00:05:09.499 --> 00:05:11.790
Jobs can be triggered by the
following conditions, some

00:05:11.790 --> 00:05:14.190
of which have been added
in O. In particular,

00:05:14.190 --> 00:05:16.170
content provider observers
could trigger jobs

00:05:16.170 --> 00:05:18.720
for a variety of situations,
such as when the user saves

00:05:18.720 --> 00:05:20.640
a new picture on their phone.

00:05:20.640 --> 00:05:22.080
Now if part of
your app is already

00:05:22.080 --> 00:05:24.090
running when the
broadcast is set,

00:05:24.090 --> 00:05:27.030
you can switch to a dynamic
broadcast receiver instead.

00:05:27.030 --> 00:05:29.250
This means moving your
broadcast receiver code out

00:05:29.250 --> 00:05:30.370
of the manifest.

00:05:30.370 --> 00:05:32.760
And then you create,
register and unregister

00:05:32.760 --> 00:05:35.610
it during runtime
like I'm doing here.

00:05:35.610 --> 00:05:38.730
Even though these situations
focus on background processes,

00:05:38.730 --> 00:05:40.440
the benefits will
be felt for those

00:05:40.440 --> 00:05:42.510
using your app in the
foreground-- with less

00:05:42.510 --> 00:05:44.410
jank and fewer crashes.

00:05:44.410 --> 00:05:46.590
This will be even more
impactful for users

00:05:46.590 --> 00:05:49.290
who don't have access to the
most expensive or fastest

00:05:49.290 --> 00:05:50.520
hardware.

00:05:50.520 --> 00:05:53.490
I've touched on a number of
strategies and API changes.

00:05:53.490 --> 00:05:55.080
If your app is
affected and you want

00:05:55.080 --> 00:05:57.180
to learn more and get
started with code examples,

00:05:57.180 --> 00:05:58.346
check out the documentation.

00:05:58.346 --> 00:06:01.280
[MUSIC PLAYING]

