WEBVTT
Kind: captions
Language: en

00:00:05.240 --> 00:00:06.240
&gt;&gt;Waleed Kadous: Welcome.

00:00:06.240 --> 00:00:07.240
Thank you very much.

00:00:07.240 --> 00:00:08.260
It's so great to see all of you here.

00:00:08.260 --> 00:00:13.350
My name is Waleed Kadous and with me is Jaikumar
Ganesh, and we're the tech leads on the Android

00:00:13.350 --> 00:00:14.700
location team.

00:00:14.700 --> 00:00:18.630
And we're super, super excited today to be
sharing with you some of the new features

00:00:18.630 --> 00:00:21.050
for location we've added to Android.

00:00:21.050 --> 00:00:27.420
This is probably the biggest change in location
since Android was released and we wanted to

00:00:27.420 --> 00:00:30.199
walk you through some of the changes that
we have planned.

00:00:30.199 --> 00:00:33.530
So let's get down to the specifics.

00:00:33.530 --> 00:00:34.530
What's changed?

00:00:34.530 --> 00:00:37.949
We really want to talk a little bit about
what's changed that made us want to make these

00:00:37.949 --> 00:00:41.449
modifications to location in Android.

00:00:41.449 --> 00:00:43.400
And there's two major sets of changes.

00:00:43.400 --> 00:00:47.949
One is the prominence of new types of apps
and then the other one is some of the underlying

00:00:47.949 --> 00:00:52.350
technology for location has also evolved,
and we're going to walk you through those.

00:00:52.350 --> 00:00:56.550
Then we're going to talk about some of the
technologies we've added that were mentioned

00:00:56.550 --> 00:01:02.450
in the keynote yesterday, the fused location
provider, the geofencer, activity recognition.

00:01:02.450 --> 00:01:06.630
We're going to take you behind the curtain,
show you how we built those things and how

00:01:06.630 --> 00:01:13.180
they work and we might have some live demos
so there's the potential for us to crash and

00:01:13.180 --> 00:01:14.180
burn.

00:01:14.180 --> 00:01:19.210
And finally after that we're going to have
the opportunity to look ahead and to really

00:01:19.210 --> 00:01:23.080
see what the potential of some of these new
location APIs are.

00:01:23.080 --> 00:01:29.490
So let's dive right in.

00:01:29.490 --> 00:01:32.759
One of the changes is the growing importance
of location.

00:01:32.759 --> 00:01:37.369
So a lot of the most popular apps now, if
you go to the app store, they're using location.

00:01:37.369 --> 00:01:40.740
And a huge number of applications across the
board are using location.

00:01:40.740 --> 00:01:46.420
You know, Google Maps, G+, Facebook, Twitter,
Google Now, all the really prominent applications.

00:01:46.420 --> 00:01:50.799
And we really wanted the opportunity to improve
the quality of those three things.

00:01:50.799 --> 00:01:55.229
When I say quality with respect to location
it means three things and I'm going to keep

00:01:55.229 --> 00:01:58.680
coming back to them, power, accuracy, coverage.

00:01:58.680 --> 00:02:05.520
Not just that, but there's this new type of
app that's coming around that we're calling

00:02:05.520 --> 00:02:07.170
contextual applications.

00:02:07.170 --> 00:02:12.080
Those are the things that Larry and Amit were
talking about, the Star Trek computer at the

00:02:12.080 --> 00:02:17.190
keynote yesterday, phones that are smarter,
things that we can use to make the phones

00:02:17.190 --> 00:02:24.810
smarter so that the user can get on with their
lives and those annoying tedious things that

00:02:24.810 --> 00:02:29.600
can just disappear.

00:02:29.600 --> 00:02:47.160
How we can make, as Reto said, those applications
more magical.

00:02:47.160 --> 00:02:48.160
So one example of the contextual app is Google
Now.

00:02:48.160 --> 00:02:49.160
Who uses Google Now?

00:02:49.160 --> 00:02:50.160
And how do you like it?

00:02:50.160 --> 00:02:51.160
Yeah.

00:02:51.160 --> 00:02:52.160
And so that for us is an example of an awesome
contextual app, but let's do a deep dive for

00:02:52.160 --> 00:02:53.160
a second and see how central location is to
that app.

00:02:53.160 --> 00:02:54.160
So we took all of the cards that were in Google
Now, the team from Google Now is just awesome.

00:02:54.160 --> 00:02:55.160
They keep adding cards.

00:02:55.160 --> 00:02:57.540
But they did a survey and remember that Google
Now is meant to be a contextual app for all

00:02:57.540 --> 00:02:58.550
types of contexts.

00:02:58.550 --> 00:03:04.220
But the thing that you realize very quickly
is a huge fraction of the cards that Google

00:03:04.220 --> 00:03:09.030
Now makes available rely intrinsically, deeply
on location.

00:03:09.030 --> 00:03:11.700
And we think this is true of many contextual
apps.

00:03:11.700 --> 00:03:15.370
If you want to build a Star Trek computer
how can you do that without knowing where

00:03:15.370 --> 00:03:16.980
you are on the Star Trek Enterprise?

00:03:16.980 --> 00:03:18.780
That's the thing that we're trying to say.

00:03:18.780 --> 00:03:23.320
So if you really want to build world class
contextual apps you need to have high quality

00:03:23.320 --> 00:03:25.680
location.

00:03:25.680 --> 00:03:29.800
But here's the issue, and this is why we introduced
some of those changes.

00:03:29.800 --> 00:03:34.750
It's because the requirements of contextual
apps like Google Now are a little bit different

00:03:34.750 --> 00:03:36.690
to apps like Google Maps.

00:03:36.690 --> 00:03:39.150
So if you look on the left-hand side you have
Google Maps.

00:03:39.150 --> 00:03:40.820
Think about how you use this.

00:03:40.820 --> 00:03:43.550
You use Google Maps when you need information
right now.

00:03:43.550 --> 00:03:44.870
It's task oriented.

00:03:44.870 --> 00:03:48.680
You open Google Maps and then you try to accomplish
something.

00:03:48.680 --> 00:03:50.790
It's very different to Google Now.

00:03:50.790 --> 00:03:54.840
Google Now sometimes will notify you and sometimes
you will just pull it out and expect it to

00:03:54.840 --> 00:03:57.330
have something there waiting and ready for
you to go.

00:03:57.330 --> 00:04:01.120
The usage model is different and the requirements
for location are different.

00:04:01.120 --> 00:04:05.480
So for instance, let's look at one aspect,
which is power.

00:04:05.480 --> 00:04:08.540
So if you're running Google Maps, here are
some power numbers.

00:04:08.540 --> 00:04:12.990
I know that power is really intrinsic to these
questions of location.

00:04:12.990 --> 00:04:16.769
When the screen is on it's pulling about 350
milliwatts.

00:04:16.769 --> 00:04:20.370
When the processor is on it's pulling about
300 milliwatts.

00:04:20.370 --> 00:04:23.810
By comparison GPS is pulling 100 milliwatts.

00:04:23.810 --> 00:04:28.669
So that means that GPS is consuming somewhere
in the realm of only 13, 14 percent of the

00:04:28.669 --> 00:04:32.340
power when you have the screen on and when
you're looking at a map.

00:04:32.340 --> 00:04:36.020
But if you have something like Google Now
on and you were pulling 100,000 milliwatts,

00:04:36.020 --> 00:04:39.849
you would be so creaky and users would be
dumping your app right then and there.

00:04:39.849 --> 00:04:41.919
So you have to be very careful with power.

00:04:41.919 --> 00:04:45.460
And the requirements of contextual apps are
very different and you will see that going

00:04:45.460 --> 00:04:47.270
through what we do.

00:04:47.270 --> 00:04:50.319
So another example is accuracy.

00:04:50.319 --> 00:04:53.770
You don't always need super duper accuracy
for something like Google Now.

00:04:53.770 --> 00:04:58.699
Whereas for Google Maps if you're indoors
want to know exactly where you are.

00:04:58.699 --> 00:05:03.320
So I talked a little bit about the applications
that we might want to develop, the growing

00:05:03.320 --> 00:05:04.889
prominence of location.

00:05:04.889 --> 00:05:10.539
I talked about, for example, contextual apps
and their ability to add value, but there's

00:05:10.539 --> 00:05:12.620
also the technological changes.

00:05:12.620 --> 00:05:18.289
And that is that it's becoming very, very
hard to really build high quality location

00:05:18.289 --> 00:05:19.939
models for developers.

00:05:19.939 --> 00:05:22.240
And it's something you guys shouldn't worry
about.

00:05:22.240 --> 00:05:27.789
It's something we should be worrying about
while you focus on building great apps, right?

00:05:27.789 --> 00:05:29.229
And here's the issue.

00:05:29.229 --> 00:05:33.270
You have now if you really want to build a
high quality app you need to talk to four

00:05:33.270 --> 00:05:36.620
different components, GPS, Wi-Fi, cell and
sensors.

00:05:36.620 --> 00:05:39.990
And the thing is each of them has different
characteristics.

00:05:39.990 --> 00:05:43.129
So for instance, GPS, it's horrible on power.

00:05:43.129 --> 00:05:45.370
Like I said, about 100 milliwatts.

00:05:45.370 --> 00:05:49.470
By comparison Wi-Fi is about 30 milliwatts,
about a third of the power.

00:05:49.470 --> 00:05:54.789
But the thing is that the accuracy of GPS
is really good and Wi-Fi is sometimes it's

00:05:54.789 --> 00:05:57.300
good, sometimes it's not quite so good, right?

00:05:57.300 --> 00:06:01.499
Coverage on the other hand, GPS doesn't work
indoors, and given how much time people spend

00:06:01.499 --> 00:06:04.750
indoors, that's just unacceptable.

00:06:04.750 --> 00:06:09.300
And as well as that you have cell, which has
great power because it's basically free, but

00:06:09.300 --> 00:06:10.599
the accuracy is pretty bad.

00:06:10.599 --> 00:06:12.520
Think half a mile accuracy.

00:06:12.520 --> 00:06:16.040
And then there's this new kid on the block,
sensors, which we'll come back to in a few

00:06:16.040 --> 00:06:17.240
moments.

00:06:17.240 --> 00:06:21.830
So let me again explain a little bit what
I mean about this problem of complexity.

00:06:21.830 --> 00:06:26.210
If you really want to build a high quality
app that meets those three characteristics

00:06:26.210 --> 00:06:30.479
we talked about, power, accuracy and coverage,
you now have to deal with this mess across

00:06:30.479 --> 00:06:31.479
the OS.

00:06:31.479 --> 00:06:35.940
You've got the network location provider,
the GPS location provider, you've got to talk

00:06:35.940 --> 00:06:36.940
to them.

00:06:36.940 --> 00:06:40.349
Then you might want to subscribe to the passive
location provider and then you also have to

00:06:40.349 --> 00:06:42.280
talk to the sensors.

00:06:42.280 --> 00:06:45.620
Developers shouldn't have to be thinking about
all of those things when all they want is

00:06:45.620 --> 00:06:47.719
I just want a location, right?

00:06:47.719 --> 00:06:50.240
They shouldn't be thinking about these types
of problems.

00:06:50.240 --> 00:06:55.020
And just to kind of hammer home the problem,
this is a screen shot from our documentation

00:06:55.020 --> 00:06:56.840
for location right now.

00:06:56.840 --> 00:07:01.639
And you can see at the bottom here there's
this timeline that says application starts

00:07:01.639 --> 00:07:05.659
and then you get an update from the GPS and
then you get a cell location and you have

00:07:05.659 --> 00:07:07.259
to maintain a best estimate.

00:07:07.259 --> 00:07:12.409
And any time there's timeline like this in
the documentation you know that the technology

00:07:12.409 --> 00:07:17.789
has evolved beyond the point where the old
APIs worked really well and you need to update

00:07:17.789 --> 00:07:21.240
your APIs, and that's what we've done.

00:07:21.240 --> 00:07:24.400
So I said that there was a couple of different
technological changes.

00:07:24.400 --> 00:07:28.870
There's one particular one that I wanted to
highlight, and that is the increasing importance

00:07:28.870 --> 00:07:30.789
of sensors.

00:07:30.789 --> 00:07:32.870
This last column here on the right.

00:07:32.870 --> 00:07:36.180
And they're kind of the new kid on the block
as far as location is concerned.

00:07:36.180 --> 00:07:39.020
And I think some of you might be thinking,
well, sensors, great.

00:07:39.020 --> 00:07:40.870
They're for games, right?

00:07:40.870 --> 00:07:44.900
But the thing is that sensors are actually
amazingly powerful.

00:07:44.900 --> 00:07:48.830
So let's take a few moments to discuss the
sensors that are on some of the phones, in

00:07:48.830 --> 00:07:52.869
particular the accelerometer and the magnetometer
or the compass.

00:07:52.869 --> 00:07:57.229
They're like on all the phones, but really
good phones will have all four of these sensors,

00:07:57.229 --> 00:08:01.839
the accelerometer for horizontal, and vertical
movement; the gyro for rotational speeds,

00:08:01.839 --> 00:08:05.419
the compass and magnetometer for which way
is north and barometer for elevation.

00:08:05.419 --> 00:08:10.779
And you might be saying, well, I mean, think
back to what we were talking about yesterday

00:08:10.779 --> 00:08:11.779
at the keynote.

00:08:11.779 --> 00:08:16.881
I mean, there's questions there about making
our phones smarter and these sensors are a

00:08:16.881 --> 00:08:19.699
really huge, important part of that.

00:08:19.699 --> 00:08:23.969
And I want to give you an example just about
what we're talking about in location of three

00:08:23.969 --> 00:08:25.009
things we can do.

00:08:25.009 --> 00:08:27.729
We can use these sensors to save power.

00:08:27.729 --> 00:08:30.039
A lot of the time people are just sitting
still.

00:08:30.039 --> 00:08:34.220
If you're sitting here in this room with your
phone in your pocket, why do we need to even

00:08:34.220 --> 00:08:37.820
try to calculate your location once we know
what it was, right?

00:08:37.820 --> 00:08:40.960
We can check the accelerometer and that will
tell us about movement.

00:08:40.960 --> 00:08:45.750
We can also do things like detect the activity,
so if someone is driving, we can check for

00:08:45.750 --> 00:08:47.000
location more frequently.

00:08:47.000 --> 00:08:51.230
If someone is sitting still, then we don't
need to do that as often.

00:08:51.230 --> 00:08:54.380
And finally, it can have a huge impact on
quality.

00:08:54.380 --> 00:08:57.920
And what I'm going to do now is I'm going
to show you some of the data from our location,

00:08:57.920 --> 00:09:02.710
our indoor location, and that's really where
sensors come into their own.

00:09:02.710 --> 00:09:04.490
So here we go.

00:09:04.490 --> 00:09:06.860
Can folks see this?

00:09:06.860 --> 00:09:08.050
It's okay?

00:09:08.050 --> 00:09:09.050
Good.

00:09:09.050 --> 00:09:10.050
All right.

00:09:10.050 --> 00:09:11.699
So here's what happens.

00:09:11.699 --> 00:09:13.170
Over here you have the green dot.

00:09:13.170 --> 00:09:15.120
The green dot is the ground truth.

00:09:15.120 --> 00:09:17.760
This is the Bloomingdale's just behind the
center here.

00:09:17.760 --> 00:09:21.759
So behind Moscone you can actually go visit
this venue.

00:09:21.759 --> 00:09:26.160
Green is ground truth that a member of the
Google team went and collected this data.

00:09:26.160 --> 00:09:31.730
And yellow is our best estimate once we mix
Wi-Fi and all of the other sensors together

00:09:31.730 --> 00:09:33.259
to give a good estimate.

00:09:33.259 --> 00:09:35.980
And you can see it's not exactly perfect.

00:09:35.980 --> 00:09:38.250
It's just going to start animating now, in
a moment hopefully.

00:09:38.250 --> 00:09:40.670
There we go.

00:09:40.670 --> 00:09:44.930
And you can see as the green dot moves around
the yellow dot does a pretty good job, not

00:09:44.930 --> 00:09:47.180
always, of following around the green dot.

00:09:47.180 --> 00:09:50.360
It doesn't jump radically, it doesn't move
around.

00:09:50.360 --> 00:09:55.270
As you can see over there it's following just
ever so slightly behind.

00:09:55.270 --> 00:10:00.220
And you can see that we can -- that's where
we use the sensors to really get that smooth,

00:10:00.220 --> 00:10:01.769
high quality result.

00:10:01.769 --> 00:10:08.920
Now, one of the key inputs to indoor location
is the Wi-Fi, but I wanted to show you how

00:10:08.920 --> 00:10:12.630
bad just the Wi-Fi by itself was.

00:10:12.630 --> 00:10:15.550
So I want you to see how much the Wi-Fi jumps
around.

00:10:15.550 --> 00:10:17.709
And we talked about this a little bit before.

00:10:17.709 --> 00:10:18.709
Watch this.

00:10:18.709 --> 00:10:20.980
It just jumps to the other side of the building.

00:10:20.980 --> 00:10:23.670
Someone got between -- again, it's jumping
all over the place.

00:10:23.670 --> 00:10:28.500
But by using the sensors on the phone we're
able to smooth this out and give a really

00:10:28.500 --> 00:10:30.870
good prediction of where the user is.

00:10:30.870 --> 00:10:34.720
Let's go back to the presentation now.

00:10:34.720 --> 00:10:38.610
There we go.

00:10:38.610 --> 00:10:41.220
All right.

00:10:41.220 --> 00:10:46.620
So our goals in this effort of introducing
these new features was really along these

00:10:46.620 --> 00:10:47.620
lines.

00:10:47.620 --> 00:10:48.620
First of all, we've got to get the power down.

00:10:48.620 --> 00:10:50.410
We hear you loud and clear.

00:10:50.410 --> 00:10:54.149
Location takes too much power, but it's so
critical to contextual apps that we had to

00:10:54.149 --> 00:10:55.410
fix this problem.

00:10:55.410 --> 00:10:59.399
The second is we wanted to get that accuracy
up and that coverage up so that you could

00:10:59.399 --> 00:11:02.640
use it indoors and we could have like higher
accuracy.

00:11:02.640 --> 00:11:07.819
And we also heard from developers that location
was just too hard to use, so we wanted to

00:11:07.819 --> 00:11:09.839
really make it easier for you guys.

00:11:09.839 --> 00:11:14.040
And we can also do things like optimize more
efficiently across the OS by looking at all

00:11:14.040 --> 00:11:15.920
of the different location requests.

00:11:15.920 --> 00:11:20.569
We also wanted to show you some of the awesome
new things you can do with sensors, and most

00:11:20.569 --> 00:11:24.839
importantly we wanted to make it available
on as many Android devices as possible.

00:11:24.839 --> 00:11:26.800
Millions are not just good enough.

00:11:26.800 --> 00:11:30.290
We need hundreds of millions of devices that
can use this API.

00:11:30.290 --> 00:11:34.610
And with that I would like to hand over to
my colleague Jaikumar to walk us through these

00:11:34.610 --> 00:11:36.600
changes.

00:11:36.600 --> 00:11:43.360
[ Applause ]
&gt;&gt;Jaikumar Ganesh: So the first thing we want

00:11:43.360 --> 00:11:46.019
to talk about today is the fused location
provider.

00:11:46.019 --> 00:11:51.120
We want to move from this where the developer
has to take care of the sensor manager, the

00:11:51.120 --> 00:11:57.480
GPS location provider, the network location
provider, location manager, to this, where

00:11:57.480 --> 00:12:02.760
the developer doesn't have to worry about
the integer, platform and hardware components.

00:12:02.760 --> 00:12:08.570
So simply finding the APIs here was our main
goal, but you may say, hey, we are engineers.

00:12:08.570 --> 00:12:11.529
We really want to understand what's happening
under the hood.

00:12:11.529 --> 00:12:18.810
To help you explain what's happening under
the hood we have a bunch of videos.

00:12:18.810 --> 00:12:25.170
In this video the green dot represents the
actual location and the yellow dot here represents

00:12:25.170 --> 00:12:28.670
the GPS location.

00:12:28.670 --> 00:12:35.079
You will see that GPS tracks the location
fairly well when the person is outside, but

00:12:35.079 --> 00:12:42.470
as the person enters the building GPS basically
has dropped dead at the door.

00:12:42.470 --> 00:12:47.269
The person is now going through the various
corridors and we have completely lost track

00:12:47.269 --> 00:12:50.820
of the location.

00:12:50.820 --> 00:12:54.810
Exits the building and you see that GPS puts
you right in the middle of the parking lot.

00:12:54.810 --> 00:12:57.509
See the big jump from the door to the parking
lot.

00:12:57.509 --> 00:13:01.310
The person had not even reached the parking
lot.

00:13:01.310 --> 00:13:06.110
This is a Google building and this is actually
one of our Google team members collecting

00:13:06.110 --> 00:13:08.190
the data.

00:13:08.190 --> 00:13:11.879
Waleed just mentioned about Wi-Fi.

00:13:11.879 --> 00:13:14.870
So how does Wi-Fi compare to the actual location?

00:13:14.870 --> 00:13:21.029
Again, green is the actual location, red is
the Wi-Fi location.

00:13:21.029 --> 00:13:23.399
It's basically useless when you're outside.

00:13:23.399 --> 00:13:25.890
Indoors, seems okay.

00:13:25.890 --> 00:13:27.990
A bit jumpy.

00:13:27.990 --> 00:13:30.199
User is navigating the corridors.

00:13:30.199 --> 00:13:32.430
It's okay.

00:13:32.430 --> 00:13:39.140
But then when the user transitions from indoors
to outdoors, you will see that we have kind

00:13:39.140 --> 00:13:44.320
of lost track of the location again.

00:13:44.320 --> 00:13:45.320
So what did we do?

00:13:45.320 --> 00:13:52.850
We took cell, Wi-Fi, GPS and sensors and fused
them together.

00:13:52.850 --> 00:13:56.760
So let's see how the fused location looks.

00:13:56.760 --> 00:14:02.750
If there's one slide you want to take home,
this will give you a very good indication

00:14:02.750 --> 00:14:04.870
of what it is.

00:14:04.870 --> 00:14:08.960
The blue dot represents the fused location,
the green dot the actual location.

00:14:08.960 --> 00:14:15.839
Following very well when the person is outside,
continues following the actual location when

00:14:15.839 --> 00:14:19.660
the person is inside navigating through all
the corridors.

00:14:19.660 --> 00:14:21.750
This user looks drunk.

00:14:21.750 --> 00:14:23.269
The exit is that way.

00:14:23.269 --> 00:14:26.160
[ Laughter ]
&gt;&gt;Jaikumar Ganesh: There you go.

00:14:26.160 --> 00:14:33.330
And now notice the transition from indoor
to outdoor will be much more smoother than

00:14:33.330 --> 00:14:34.399
when we were using GPS.

00:14:34.399 --> 00:14:36.660
The GPS put you in the middle of the parking
lot.

00:14:36.660 --> 00:14:39.370
This one is much more smoother.

00:14:39.370 --> 00:14:47.540
[ Applause ]
&gt;&gt;Jaikumar Ganesh: All right.

00:14:47.540 --> 00:14:49.579
So let's have a closer look at the APIs.

00:14:49.579 --> 00:14:55.790
Before that I wanted to talk about two things,
listeners and pending intent.

00:14:55.790 --> 00:14:58.949
Most of you are familiar with the register
a listener call.

00:14:58.949 --> 00:15:03.750
Your app registers a listener, the location
process will give you a synchronized callback

00:15:03.750 --> 00:15:04.790
(indiscernible).

00:15:04.790 --> 00:15:09.879
That works very well if you are in the foreground,
your maps application, navigation application,

00:15:09.879 --> 00:15:14.029
but there's this new class of applications
that we just talked about, contextual apps,

00:15:14.029 --> 00:15:17.270
that walk around in the background.

00:15:17.270 --> 00:15:22.350
So you don't have to be -- your process doesn't
have to be tightly bound to the location process.

00:15:22.350 --> 00:15:24.910
This is where pending intents come into play.

00:15:24.910 --> 00:15:26.240
So what's a pending intent?

00:15:26.240 --> 00:15:31.700
It's a token that your app process will give
to the location process and the location process

00:15:31.700 --> 00:15:35.750
will use it to wake up your app when anything
of interest happens.

00:15:35.750 --> 00:15:40.190
So this basically means that your app in the
background doesn't have to be always running.

00:15:40.190 --> 00:15:42.910
When something of interest happens we will
wake you up.

00:15:42.910 --> 00:15:45.459
This saves a lot of battery.

00:15:45.459 --> 00:15:48.520
All right.

00:15:48.520 --> 00:15:57.480
So before I -- now that I've talked about
pending intents and listeners, let's have

00:15:57.480 --> 00:15:59.579
a closer look at the APIs.

00:15:59.579 --> 00:16:04.749
You create an instance of the location client,
you call connect on it, you get a call back

00:16:04.749 --> 00:16:07.199
on connected.

00:16:07.199 --> 00:16:11.779
You get -- you call the function get last
location on the location client object.

00:16:11.779 --> 00:16:17.120
You immediately will receive a course location
that is maintained by the system.

00:16:17.120 --> 00:16:21.069
The second variant is creating a location
request object.

00:16:21.069 --> 00:16:25.940
You set the priority, you set the polling
interval of the location, and the function

00:16:25.940 --> 00:16:29.230
that you would call is request location updates.

00:16:29.230 --> 00:16:33.709
You send in the location request to object,
you send in the listener, and we will call

00:16:33.709 --> 00:16:39.389
your callback on location changed so that
you will get the location -- latest location.

00:16:39.389 --> 00:16:40.389
That's it.

00:16:40.389 --> 00:16:47.439
Just this one API will give you the blue dot
that you just recently saw in the animation.

00:16:47.439 --> 00:16:53.209
[ Applause ]
&gt;&gt;Jaikumar Ganesh: So that's how it worked

00:16:53.209 --> 00:16:54.209
with listeners.

00:16:54.209 --> 00:16:55.879
What about the pending intent variant?

00:16:55.879 --> 00:17:01.689
You create the intent, pending intent, it
calls get service, call request location updates.

00:17:01.689 --> 00:17:03.500
Again, the very same function call.

00:17:03.500 --> 00:17:07.390
It takes in the location request object, sends
in the pending intent.

00:17:07.390 --> 00:17:09.789
You will get a call back with the location
object.

00:17:09.789 --> 00:17:14.330
Same API, both use cases.

00:17:14.330 --> 00:17:16.640
So I introduced two variants of the APIs.

00:17:16.640 --> 00:17:20.130
We have last location and location request
objects.

00:17:20.130 --> 00:17:21.510
When do we use them?

00:17:21.510 --> 00:17:25.959
So get last location gives you a course location
that is maintained by the system immediately.

00:17:25.959 --> 00:17:29.740
So suppose you are a search application that's
looking for movies or a weather application

00:17:29.740 --> 00:17:32.320
and you just want the user's city.

00:17:32.320 --> 00:17:34.600
Get last location is for you.

00:17:34.600 --> 00:17:38.910
But if you're a maps application or navigation
application and you want finer grain control,

00:17:38.910 --> 00:17:44.250
you want to set the integral, the priorities,
et cetera, that's when you use the location

00:17:44.250 --> 00:17:46.260
request APIs.

00:17:46.260 --> 00:17:51.600
I mentioned priority twice, so what exactly
is this?

00:17:51.600 --> 00:17:56.510
So for the location request APIs, we are providing
you with three options for priorities, the

00:17:56.510 --> 00:18:00.630
high accuracy mode, the balance power mode
and the no power mode.

00:18:00.630 --> 00:18:07.110
The high accuracy mode responds to GPS when
you're outside and on Wi-Fi when you're inside.

00:18:07.110 --> 00:18:11.870
It is basically used for applications like
maps and navigation applications which want

00:18:11.870 --> 00:18:14.340
really good accuracy.

00:18:14.340 --> 00:18:17.460
Because they're running in the foreground
the battery drain is fine and the typical

00:18:17.460 --> 00:18:20.200
polling interval is around five seconds.

00:18:20.200 --> 00:18:22.010
The balance power doesn't use GPS.

00:18:22.010 --> 00:18:24.520
It uses cell and Wi-Fi.

00:18:24.520 --> 00:18:28.870
It is fine with slightly lower accuracy and
it doesn't want to drain the battery that

00:18:28.870 --> 00:18:29.870
much.

00:18:29.870 --> 00:18:33.220
So if you have a weather app, this is when
you use the balance power.

00:18:33.220 --> 00:18:36.760
The typical polling interval is around 20
seconds.

00:18:36.760 --> 00:18:39.690
We have a third mode called the no power mode.

00:18:39.690 --> 00:18:44.060
The no power mode is useful when you just
want to get a location if some other app in

00:18:44.060 --> 00:18:46.950
the system has requested the location.

00:18:46.950 --> 00:18:50.789
You don't want to actively poll, but if the
system knows the location, very well, I can

00:18:50.789 --> 00:18:52.179
enhance my app.

00:18:52.179 --> 00:18:54.770
So that's when you use the no power mode,
and this is the best part.

00:18:54.770 --> 00:18:57.429
Your app will not get any battery blame.

00:18:57.429 --> 00:18:59.039
A caveat about accuracy.

00:18:59.039 --> 00:19:03.750
Accuracy basically depends on various parameters,
the signal quality, et cetera.

00:19:03.750 --> 00:19:08.010
This is a rough guidance with regard to the
three priority options.

00:19:08.010 --> 00:19:09.480
All right.

00:19:09.480 --> 00:19:12.940
The next topic, geofencing.

00:19:12.940 --> 00:19:14.440
What's a geofence?

00:19:14.440 --> 00:19:22.190
We'll geofence around an area so when the
user enters or exits the area, the app is

00:19:22.190 --> 00:19:23.190
informed.

00:19:23.190 --> 00:19:28.260
So you can have a geofence around a Starbucks
location, and so when the user enters a Starbucks

00:19:28.260 --> 00:19:32.289
location, your app would inform and, say,
for example, it can give offers that a user

00:19:32.289 --> 00:19:34.360
has entered the Starbucks location.

00:19:34.360 --> 00:19:43.210
We have two demos for you.

00:19:43.210 --> 00:19:48.180
So we are in the middle of a lecture hall
here, so we have this mock sample app which

00:19:48.180 --> 00:19:50.820
basically mocks the location way points.

00:19:50.820 --> 00:19:55.809
So let me start that.

00:19:55.809 --> 00:20:03.640
And this is me driving through Mountain View,
and we have two geofences.

00:20:03.640 --> 00:20:09.770
I'm a very cautious driver, following speed
limits.

00:20:09.770 --> 00:20:11.990
I have to follow the rules.

00:20:11.990 --> 00:20:14.210
I don't want to get tickets.

00:20:14.210 --> 00:20:15.320
There we go.

00:20:15.320 --> 00:20:17.020
And the user has entered the first geofence.

00:20:17.020 --> 00:20:22.970
You can see that the app has got the geofence
entering result and has put the black bottle.

00:20:22.970 --> 00:20:26.110
This app is currently showing two geofences.

00:20:26.110 --> 00:20:27.760
We support multiple geofences.

00:20:27.760 --> 00:20:29.240
&gt;&gt;Waleed Kadous: Wait a second.

00:20:29.240 --> 00:20:30.920
How many geofences do we support, Jaikumar?

00:20:30.920 --> 00:20:32.120
&gt;&gt;Jaikumar Ganesh: Good point.

00:20:32.120 --> 00:20:33.590
So we have heard you guys.

00:20:33.590 --> 00:20:37.000
We support 100 geofences per app.

00:20:37.000 --> 00:20:42.120
That is a big number and we feel that you
will be able to accomplish a lot of things

00:20:42.120 --> 00:20:43.320
you were --
[ Applause ]

00:20:43.320 --> 00:20:48.010
&gt;&gt;Jaikumar Ganesh: We feel you will be able
to accomplish a lot of things that you weren't

00:20:48.010 --> 00:20:49.230
able to do before.

00:20:49.230 --> 00:20:57.080
The user entered the second geofence, and
I hope you saw the circle getting highlighted.

00:20:57.080 --> 00:20:58.100
I live in San Francisco.

00:20:58.100 --> 00:20:59.340
I like the city life.

00:20:59.340 --> 00:21:02.830
But, you know, my office is in Mountain View.

00:21:02.830 --> 00:21:04.309
Commute can be hectic so I have been thinking
--

00:21:04.309 --> 00:21:05.309
&gt;&gt;Waleed Kadous: Yeah.

00:21:05.309 --> 00:21:06.860
I want to make him more (indiscernible) so
I want to move to Mountain View.

00:21:06.860 --> 00:21:10.270
&gt;&gt;Jaikumar Ganesh: So the commute can be actually
a bit hectic.

00:21:10.270 --> 00:21:12.929
So I use this app called Zillow.

00:21:12.929 --> 00:21:17.820
It shows me a bunch of all the open homes,
the homes pending for sale, et cetera.

00:21:17.820 --> 00:21:23.460
So two weeks back I listed one such home as
a favorite home.

00:21:23.460 --> 00:21:31.360
Zillow app shows me all the photos, descriptions
of what kind of -- the sale price, et cetera.

00:21:31.360 --> 00:21:34.020
So this was two weeks back.

00:21:34.020 --> 00:21:37.160
Just yesterday I was driving through Mountain
View.

00:21:37.160 --> 00:21:53.240
So let's start our location mock app again.

00:21:53.240 --> 00:22:00.630
So the user is, again, driving through Mountain
View, and I see this notification on top that

00:22:00.630 --> 00:22:05.090
Zillow has put.

00:22:05.090 --> 00:22:11.610
It tells me that there was a favorite home
nearby.

00:22:11.610 --> 00:22:16.320
There you go.

00:22:16.320 --> 00:22:21.240
And I can actually see all the photos and
details of the favorite home.

00:22:21.240 --> 00:22:24.700
This was the same favorite home I marked as
a favorite two weeks back.

00:22:24.700 --> 00:22:27.539
We were just now talking about contextual
apps.

00:22:27.539 --> 00:22:34.200
Zillow used my context, my location, and showed
me a reminder, hey, this home you marked as

00:22:34.200 --> 00:22:37.580
favorite two weeks back is just a mile away
from you.

00:22:37.580 --> 00:22:39.779
Why don't you go and have a look at it.

00:22:39.779 --> 00:22:41.380
This is the power of geofencing.

00:22:41.380 --> 00:22:45.350
It allows such contextual apps to be so powerful.

00:22:45.350 --> 00:22:52.529
[ Applause ]
&gt;&gt;Jaikumar Ganesh: All right.

00:22:52.529 --> 00:22:54.480
So let's look at the APIs.

00:22:54.480 --> 00:22:59.460
You create a location client object, call
connect on it just exactly the way you are

00:22:59.460 --> 00:23:01.870
doing for the Fused Location Provider.

00:23:01.870 --> 00:23:06.159
You get an on connect at call back and you
create a new geofence object.

00:23:06.159 --> 00:23:07.690
You set the request ID.

00:23:07.690 --> 00:23:12.780
The transition types whether you are interested
in entering or exiting the building.

00:23:12.780 --> 00:23:17.590
The type of geofence currently we support,
so clear geofences, the latitude, longitude,

00:23:17.590 --> 00:23:21.960
radius, and the time when the geofence will
expire.

00:23:21.960 --> 00:23:29.020
One API at geofences, takes a list of geofences
and the pending intent.

00:23:29.020 --> 00:23:32.870
When a geofence transition happens, you'll
get a call back.

00:23:32.870 --> 00:23:37.640
You can check which geofence has been breached
and what was the transition event.

00:23:37.640 --> 00:23:38.640
That's it.

00:23:38.640 --> 00:23:43.429
One API for addition, one API for removal,
and you can build these powerful apps.

00:23:43.429 --> 00:23:46.799
&gt;&gt;Waleed Kadous: So how long did Zillow take
to make the modifications?

00:23:46.799 --> 00:23:51.980
&gt;&gt;Jaikumar Ganesh: So Zillow used our APIs
and they were up and running within a day.

00:23:51.980 --> 00:23:53.590
That's all it took.

00:23:53.590 --> 00:23:56.350
We said, hey --
[ Applause ]

00:23:56.350 --> 00:23:58.419
&gt;&gt;Jaikumar Ganesh: Yeah.

00:23:58.419 --> 00:24:02.720
We gave them our sample APIs just to make
sure things worked and they had a demo built

00:24:02.720 --> 00:24:05.650
for us.

00:24:05.650 --> 00:24:10.890
Some of you might already be familiar with
add proximity alert API in our platform which

00:24:10.890 --> 00:24:11.890
does geofencing.

00:24:11.890 --> 00:24:13.710
So why did we introduce this new API?

00:24:13.710 --> 00:24:14.710
Let's compare the two.

00:24:14.710 --> 00:24:17.230
We ran a bunch of tests.

00:24:17.230 --> 00:24:22.059
One geofence around the home, one geofence
around work, a bunch of geofences around the

00:24:22.059 --> 00:24:23.860
various Starbucks locations.

00:24:23.860 --> 00:24:30.299
We ran this test on a repeat of 24 hours on
a Galaxy Nexus and we saw a two-third power

00:24:30.299 --> 00:24:31.600
savings.

00:24:31.600 --> 00:24:32.790
Two-third power savings.

00:24:32.790 --> 00:24:36.039
[ Applause ]
&gt;&gt;Jaikumar Ganesh: Sure.

00:24:36.039 --> 00:24:39.120
You can clap for it.

00:24:39.120 --> 00:24:40.120
(Inaudible).

00:24:40.120 --> 00:24:44.049
And so apart from power savings, the APIs
are much more powerful.

00:24:44.049 --> 00:24:45.480
You can add multiple geofences.

00:24:45.480 --> 00:24:47.830
It tells you which geofence has been breached.

00:24:47.830 --> 00:24:50.940
You can set the various parameters associated
with the geofence.

00:24:50.940 --> 00:24:55.140
Now I just now told you we saved a lot of
power.

00:24:55.140 --> 00:24:56.200
How did we do it?

00:24:56.200 --> 00:24:57.840
Three ways.

00:24:57.840 --> 00:25:01.799
You are in San Francisco enjoying the Golden
Gate bridge, but you have a geofence in Hollywood,

00:25:01.799 --> 00:25:02.799
Los Angeles.

00:25:02.799 --> 00:25:04.400
The phone knows this.

00:25:04.400 --> 00:25:10.070
The phone doesn't have to keep polling to
know whether you entered the geofence or not.

00:25:10.070 --> 00:25:12.620
The user can be still, the user can be walking.

00:25:12.620 --> 00:25:13.620
The phone knows this.

00:25:13.620 --> 00:25:18.480
The phone can use this as a signal to configure
its polling interval.

00:25:18.480 --> 00:25:21.809
We also want to move to doing things in hardware.

00:25:21.809 --> 00:25:24.630
Geofencing is basically a background process.

00:25:24.630 --> 00:25:29.029
That means that the application process -- processor
doesn't have to be always (inaudible).

00:25:29.029 --> 00:25:34.140
We can do geofencing monitoring in the hardware,
like the GPS hardware, and the hardware can

00:25:34.140 --> 00:25:39.070
tell us, hey, the user has entered the geofence.

00:25:39.070 --> 00:25:44.799
I just now talked about, you know, monitoring
user state and using it as a signal.

00:25:44.799 --> 00:25:46.809
So how did we do it?

00:25:46.809 --> 00:25:49.419
So let's talk about activity recognition.

00:25:49.419 --> 00:25:55.220
We can use the sensors on the phone -- it's,
after all, a smartphone -- and we can figure

00:25:55.220 --> 00:26:01.779
out whether the user is driving, whether the
user is on foot, whether the user is still,

00:26:01.779 --> 00:26:05.130
or whether the user is on a bike.

00:26:05.130 --> 00:26:10.800
So this is what the actual metadata looks
like when the user is walking and the user

00:26:10.800 --> 00:26:11.850
is in a car.

00:26:11.850 --> 00:26:16.580
So we used machine learning based classifiers,
a bunch of training data, and we were able

00:26:16.580 --> 00:26:24.730
to actively figure out which class of activity
the user is involved in.

00:26:24.730 --> 00:26:26.380
So where would you use this?

00:26:26.380 --> 00:26:32.740
We gave our APIs to a very popular third-party
application, Endomondo, and these are two

00:26:32.740 --> 00:26:33.809
screen shots.

00:26:33.809 --> 00:26:37.970
They can give you details of how much time
you have spent walking, how much time you

00:26:37.970 --> 00:26:38.970
have spent biking.

00:26:38.970 --> 00:26:46.570
They used our APIs and yet again they said
battery life is much, much better.

00:26:46.570 --> 00:26:54.010
So let's talk about another application, the
moves app.

00:26:54.010 --> 00:26:59.830
So moves app is a third-party tracker app
which automatically detects your activity.

00:26:59.830 --> 00:27:06.110
The user just keeps the phone in their pocket,
walks around and they can detect whether you're

00:27:06.110 --> 00:27:08.269
cycling, driving, running, et cetera.

00:27:08.269 --> 00:27:09.620
So let's open the app.

00:27:09.620 --> 00:27:12.210
This is what the app looks like.

00:27:12.210 --> 00:27:15.640
It tells me how many steps I have taken today,
how many miles I have biked today.

00:27:15.640 --> 00:27:17.640
They have this beautiful timeline.

00:27:17.640 --> 00:27:23.000
Let me go to yesterday, and they have this
entire timeline of what I did yesterday.

00:27:23.000 --> 00:27:28.029
I went to Washington Square, was in Moscone,
Starbucks.

00:27:28.029 --> 00:27:34.929
I biked to Moscone West, so let me click on
it.

00:27:34.929 --> 00:27:42.840
And if the network connection works, you'll
see it nicely superimposed on a map.

00:27:42.840 --> 00:27:45.780
But let's raise the bar up here a bit.

00:27:45.780 --> 00:27:49.040
How about a live demo?

00:27:49.040 --> 00:27:50.990
Let's invite Mark on stage.

00:27:50.990 --> 00:27:56.080
Mark is the engineer who has done most of
the work for activity recognition.

00:27:56.080 --> 00:28:04.850
He has a phone in his pocket which is monitoring
activity.

00:28:04.850 --> 00:28:08.320
And there is the (indiscernible) which is
basically listening for it.

00:28:08.320 --> 00:28:12.840
You can see that the phone is in tilting state,
which basically means the phone is about to

00:28:12.840 --> 00:28:14.260
change the activity.

00:28:14.260 --> 00:28:19.179
Mark has started to walk around the stage
behind me, and you can see it's on foot.

00:28:19.179 --> 00:28:24.210
This is all live time, real time networking
from his phone in the pocket to this tablet.

00:28:24.210 --> 00:28:26.260
[ Laughter ]
&gt;&gt;Jaikumar Ganesh: Mark is on a bike right

00:28:26.260 --> 00:28:27.510
now.

00:28:27.510 --> 00:28:30.380
The phone has gone to tilting, and there you
go.

00:28:30.380 --> 00:28:31.870
It's on a bicycle.

00:28:31.870 --> 00:28:40.220
[ Cheers and Applause ]
&gt;&gt;Jaikumar Ganesh: Mark did a really great

00:28:40.220 --> 00:28:42.200
job working out, biking every day.

00:28:42.200 --> 00:28:43.440
Let's get this working.

00:28:43.440 --> 00:28:46.610
Let's get this working.

00:28:46.610 --> 00:28:49.790
Thanks a lot, Mark.

00:28:49.790 --> 00:28:53.760
[ Applause ]
&gt;&gt;Jaikumar Ganesh: All right.

00:28:53.760 --> 00:28:57.080
The demos, the demos look great but how do
you use it in your app?

00:28:57.080 --> 00:29:01.480
That's why we have this slide to have a closer
look at the APIs.

00:29:01.480 --> 00:29:07.799
You create a new instance of the activity
recognition client, call connect on it.

00:29:07.799 --> 00:29:09.690
When the call back comes you get unconnected.

00:29:09.690 --> 00:29:12.070
Again, just one API.

00:29:12.070 --> 00:29:13.370
Request activity updates.

00:29:13.370 --> 00:29:15.059
Two parameters.

00:29:15.059 --> 00:29:20.350
The detection time interval that basically
says how often do you want to poll the system

00:29:20.350 --> 00:29:25.220
to get activity updates, and the pending intent.

00:29:25.220 --> 00:29:26.279
You get a call back.

00:29:26.279 --> 00:29:29.350
You can extract the activity and get the probability.

00:29:29.350 --> 00:29:35.960
So the detected activity is basically in vehicle,
on bicycle, on foot, still and tilting.

00:29:35.960 --> 00:29:40.340
And we are going to get Mark back to the office
to add more classes to this.

00:29:40.340 --> 00:29:43.730
All of these activities have associated probabilities.

00:29:43.730 --> 00:29:50.260
One important thing to note, this has a new
permission, the activity recognition permission.

00:29:50.260 --> 00:29:58.429
So we talked about Fused Location Provider,
activity recognition and geofencing.

00:29:58.429 --> 00:30:01.809
So how can you get these?

00:30:01.809 --> 00:30:05.570
We are using the Google Play services to deliver
these APIs to you.

00:30:05.570 --> 00:30:10.470
The Google Play services an APK that gets
updated from the Play Store, has two parts,

00:30:10.470 --> 00:30:15.480
the client library that you app links against
and the Play services APK process.

00:30:15.480 --> 00:30:19.833
The client library is intelligent enough that
it knows to handle older and newer versions

00:30:19.833 --> 00:30:22.010
so you don't have to take care of it.

00:30:22.010 --> 00:30:24.400
Here is the best part.

00:30:24.400 --> 00:30:29.720
The latest APK with all these APIs is already
pushed out, is already there and on the phones.

00:30:29.720 --> 00:30:31.840
The documentation is already ready.

00:30:31.840 --> 00:30:36.980
So you, in fact, can go start coding right
after this session and you can push an app

00:30:36.980 --> 00:30:40.210
today, evening, and it will be live.

00:30:40.210 --> 00:30:46.880
[ Applause ]
&gt;&gt;Jaikumar Ganesh: To borrow a word from the

00:30:46.880 --> 00:30:52.029
keynote, that's what we call it as auto awesome.

00:30:52.029 --> 00:30:55.250
So we moved to Google Play services.

00:30:55.250 --> 00:30:56.679
Why did we do that?

00:30:56.679 --> 00:30:57.750
Three reasons.

00:30:57.750 --> 00:31:02.830
One is it's backward compatible to Froyo so
it gives us hundreds of millions of devices

00:31:02.830 --> 00:31:04.159
for free.

00:31:04.159 --> 00:31:08.730
[ Applause ]
&gt;&gt;Jaikumar Ganesh: The second reason is that

00:31:08.730 --> 00:31:13.620
we have a bunch of indoor floor plans, indoor
data models so we had the potential of using

00:31:13.620 --> 00:31:18.710
these floor plans and data models to enhance
the APIs, to add more context, to add more

00:31:18.710 --> 00:31:22.370
features so you know all the indoor features
work very well.

00:31:22.370 --> 00:31:26.230
The third main reason is the short release
cycle.

00:31:26.230 --> 00:31:27.809
You discover a bug, you tell us.

00:31:27.809 --> 00:31:30.570
We want to add a new class for active data
recognition.

00:31:30.570 --> 00:31:35.830
We can do it much, much faster than waiting
for the platform updates.

00:31:35.830 --> 00:31:40.009
So with that I would like to welcome back
Waleed on stage to talk about what's next.

00:31:40.009 --> 00:31:44.799
[ Applause ]
&gt;&gt;Waleed Kadous: Thank you very much, Jaikumar.

00:31:44.799 --> 00:31:47.789
Thank you very much, Jaikumar.

00:31:47.789 --> 00:31:49.440
We really appreciate that.

00:31:49.440 --> 00:31:52.860
I wanted to talk about the improvements, and
you're going to see it's the same patents:

00:31:52.860 --> 00:31:54.970
accuracy, power, coverage.

00:31:54.970 --> 00:31:57.200
And the question is how are we going to do
that.

00:31:57.200 --> 00:32:00.529
And we want to share with you some of the
ideas and some of the upcoming technologies

00:32:00.529 --> 00:32:02.130
that are coming through.

00:32:02.130 --> 00:32:04.039
One is improving accuracy.

00:32:04.039 --> 00:32:09.929
So before we mentioned that there were four
sensors: cell, Wi-Fi, GPS sensors -- one other

00:32:09.929 --> 00:32:12.330
one, but there's even more coming.

00:32:12.330 --> 00:32:17.960
So, for example, Bluetooth low energy is coming
and that will allow us to get even more accurate

00:32:17.960 --> 00:32:19.679
location, especially indoors.

00:32:19.679 --> 00:32:24.690
There's even standards like 802.11v that takes
the humble Wi-Fi and gets rid of the jumpiness

00:32:24.690 --> 00:32:26.539
by adding time of flight.

00:32:26.539 --> 00:32:30.639
So there's all of these new technologies that
are coming that are going to improve location

00:32:30.639 --> 00:32:31.850
even more.

00:32:31.850 --> 00:32:35.409
And we're really excited to be including them,
and the nice thing is you don't have to modify

00:32:35.409 --> 00:32:36.409
your app.

00:32:36.409 --> 00:32:38.940
We will just add those extra columns to our
list of four things.

00:32:38.940 --> 00:32:40.409
We'll do all the work for you.

00:32:40.409 --> 00:32:41.409
That's another reason.

00:32:41.409 --> 00:32:46.059
The other thing is we can do more intelligent
things with, say, using indoor floor plans

00:32:46.059 --> 00:32:47.870
to improve the accuracy.

00:32:47.870 --> 00:32:52.170
Not only that, as Jaikumar mentioned when
he was talking about geofencing, we can do

00:32:52.170 --> 00:32:53.659
a lot of this on the hardware.

00:32:53.659 --> 00:32:57.740
And we are working with hardware vendors to
really improve the standards and improve things

00:32:57.740 --> 00:33:00.779
like the hardware abstraction layer for sensors.

00:33:00.779 --> 00:33:04.289
And if any of you are interested in -- any
of you are hardware developers and you're

00:33:04.289 --> 00:33:08.220
interested in that, please come talk to us
afterwards.

00:33:08.220 --> 00:33:12.140
And the progress so far on that has been pretty
amazing.

00:33:12.140 --> 00:33:13.639
The other thing is better coverage.

00:33:13.639 --> 00:33:15.279
We really want to get indoors.

00:33:15.279 --> 00:33:19.350
If you're going to build contextual apps,
you need location that work all of the time

00:33:19.350 --> 00:33:23.519
and that's why as part of our efforts we're
expanding our indoor coverage because people

00:33:23.519 --> 00:33:26.769
spend so much time indoors.

00:33:26.769 --> 00:33:29.250
So thank you very much for your attention
today.

00:33:29.250 --> 00:33:33.710
There's a few things I really want you to
take away from today's discussion.

00:33:33.710 --> 00:33:37.750
Our obsession, my motto and the team's motto
is, power, accuracy, coverage.

00:33:37.750 --> 00:33:38.750
Those are the mottos.

00:33:38.750 --> 00:33:43.120
My personal motto is one centimeter location
everywhere always, and that's what we're going

00:33:43.120 --> 00:33:44.850
to continue to strive towards.

00:33:44.850 --> 00:33:47.960
As well as that, we want to make your lives
easier.

00:33:47.960 --> 00:33:52.620
We want to do the heavy lifting for location
so that you guys don't have to.

00:33:52.620 --> 00:33:57.669
So we're trying to make these cool -- these
nice interfaces like the Fused Location Provider

00:33:57.669 --> 00:33:58.669
for you.

00:33:58.669 --> 00:34:02.630
And also, we just want to add some cool stuff
like Activity Recognition.

00:34:02.630 --> 00:34:05.440
We've mentioned the APIs before.

00:34:05.440 --> 00:34:10.020
The Fused Location Provider gives you simplicity,
lower power, more accuracy.

00:34:10.020 --> 00:34:12.330
We talked about Geofencing and Activity Recognition.

00:34:12.330 --> 00:34:16.270
And personally, Activity Recognition, that's
what you want to see you guys just explore

00:34:16.270 --> 00:34:17.270
what's possible.

00:34:17.270 --> 00:34:19.480
Because it's never really been available before.

00:34:19.480 --> 00:34:23.419
And yet it's the sensor that's on the phone
that allows us to improve the context.

00:34:23.419 --> 00:34:27.710
All of these features are available today
in Google Play Services, on hundreds of millions

00:34:27.710 --> 00:34:28.710
of devices.

00:34:28.710 --> 00:34:31.129
And we're going to keep adding features.

00:34:31.129 --> 00:34:34.149
We're going to add other types of geofences
other than circular ones.

00:34:34.149 --> 00:34:37.770
We're going to look at integrating things
like semantic information about place.

00:34:37.770 --> 00:34:40.480
We're going to do things like add higher-level
activities.

00:34:40.480 --> 00:34:42.340
All of these things are possible.

00:34:42.340 --> 00:34:45.200
And we'd love to hear from you more about
these things as we go forward.

00:34:45.200 --> 00:34:48.109
&gt;&gt;Jaikumar Ganesh: Waleed, I guess you have
to mention that we are wanting to do the hard

00:34:48.109 --> 00:34:49.109
work here.

00:34:49.109 --> 00:34:53.159
You guys should just think about apps and
UI and we do the hard work for you.

00:34:53.159 --> 00:34:55.379
&gt;&gt;Waleed Kadous: As far as location is concerned,
anyway.

00:34:55.379 --> 00:34:58.119
We can't do everything for you.

00:34:58.119 --> 00:35:00.970
[ Laughter ]
&gt;&gt;Waleed Kadous: Here's my parting question.

00:35:00.970 --> 00:35:04.300
You heard Amit and Larry talk about smarter
phones.

00:35:04.300 --> 00:35:07.119
You heard them talk about "Star Trek" computers.

00:35:07.119 --> 00:35:13.079
At the heart of context are things like these
sensors that we mentioned, are things like

00:35:13.079 --> 00:35:14.079
location.

00:35:14.079 --> 00:35:18.470
And what we really want to see you do is,
what apps can you build that make your users'

00:35:18.470 --> 00:35:24.300
lives easier using location and activity to
just make your apps get to that next level

00:35:24.300 --> 00:35:28.820
higher, to make them magic, like Reto was
talking about in the previous session.

00:35:28.820 --> 00:35:29.820
Thank you very much.

00:35:29.820 --> 00:35:31.849
There's a few quick messages here.

00:35:31.849 --> 00:35:38.190
We have a code lab tomorrow at 11:15 where
we will be walking you through making some

00:35:38.190 --> 00:35:39.300
of these changes.

00:35:39.300 --> 00:35:41.410
There's the feedback counters at the end.

00:35:41.410 --> 00:35:45.160
And we'll be at office hours to answer your
questions about location immediately after

00:35:45.160 --> 00:35:46.160
this.

00:35:46.160 --> 00:35:47.160
Thank you very much.

00:35:47.160 --> 00:35:48.230
We look forward to your questions.

00:35:48.230 --> 00:35:51.390
Please come to the mics.

00:35:51.390 --> 00:35:59.370
[ Applause ]
&gt;&gt;Waleed Kadous: Any questions?

00:35:59.370 --> 00:36:02.570
Come to the mic, please.

00:36:02.570 --> 00:36:06.710
We have time for maybe one or two.

00:36:06.710 --> 00:36:09.059
&gt;&gt;&gt; You mention there was support for 100
geofences.

00:36:09.059 --> 00:36:12.500
Was that per app installation or overall for
an app?

00:36:12.500 --> 00:36:14.510
&gt;&gt;Waleed Kadous: 100 geofences per app.

00:36:14.510 --> 00:36:17.310
You shouldn't have to think about what other
applications are doing; right?

00:36:17.310 --> 00:36:21.579
&gt;&gt;&gt; But, I mean, if your app has multiple
users, each of those users has 100 geofences

00:36:21.579 --> 00:36:22.579
available?

00:36:22.579 --> 00:36:24.230
&gt;&gt;Waleed Kadous: I think so.

00:36:24.230 --> 00:36:26.440
It's per app per user.

00:36:26.440 --> 00:36:27.440
We can double-check.

00:36:27.440 --> 00:36:29.569
&gt;&gt;Jaikumar Ganesh: We can double-check.

00:36:29.569 --> 00:36:31.420
&gt;&gt;&gt; That's important for us.

00:36:31.420 --> 00:36:32.810
&gt;&gt;Waleed Kadous: Okay.

00:36:32.810 --> 00:36:33.810
Next question.

00:36:33.810 --> 00:36:34.810
&gt;&gt;&gt; Hi.

00:36:34.810 --> 00:36:35.810
This is Alex Jiminez.

00:36:35.810 --> 00:36:41.230
I just wanted to ask, you mentioned something
about you can also do this on devices other

00:36:41.230 --> 00:36:43.410
than, you know, the phones.

00:36:43.410 --> 00:36:47.569
Is there -- is this going to be also part
of the ADK?

00:36:47.569 --> 00:36:50.550
&gt;&gt;Waleed Kadous: We're still exploring that
option.

00:36:50.550 --> 00:36:52.040
We don't have an answer right now.

00:36:52.040 --> 00:36:54.260
But stay tuned to see what we come up with.

00:36:54.260 --> 00:36:55.260
&gt;&gt;&gt; All right.

00:36:55.260 --> 00:36:56.260
&gt;&gt;Jaikumar Ganesh: One last.

00:36:56.260 --> 00:36:57.800
&gt;&gt;Waleed Kadous: One last question.

00:36:57.800 --> 00:37:03.339
&gt;&gt;&gt; This is probably a product of the training
data, but I was wondering if you took into

00:37:03.339 --> 00:37:06.740
account things like a user's on a bike and
maybe they have their phone in their backpack

00:37:06.740 --> 00:37:10.260
and you're not getting quite the twisting
and tilting data from the sensors.

00:37:10.260 --> 00:37:13.290
Does it still recognize situations like that?

00:37:13.290 --> 00:37:18.260
&gt;&gt;Waleed Kadous: We've tested many different
types of situations because of the machine

00:37:18.260 --> 00:37:20.790
learning, and we've gathered data in those
situations.

00:37:20.790 --> 00:37:23.569
It actually pretty well adapts to those situations.

00:37:23.569 --> 00:37:26.300
It's not perfect, and sometimes it will report
tilting.

00:37:26.300 --> 00:37:28.040
But by and large, it works pretty well.

00:37:28.040 --> 00:37:29.920
We've measured pretty high accuracy on it.

00:37:29.920 --> 00:37:34.430
&gt;&gt;&gt; Do you also take into account their current
speed to say, maybe 15 miles an hour is about

00:37:34.430 --> 00:37:35.800
like a biker's speed?

00:37:35.800 --> 00:37:37.680
You're not walking at 15 miles an hour.

00:37:37.680 --> 00:37:39.040
&gt;&gt;Waleed Kadous: I'm not sure.

00:37:39.040 --> 00:37:40.280
We can double-check that.

00:37:40.280 --> 00:37:43.340
&gt;&gt;Jaikumar Ganesh: Meet us at the office hours
and we'll get into the details.

00:37:43.340 --> 00:37:46.300
&gt;&gt;&gt; I had a couple quick ones.

00:37:46.300 --> 00:37:51.270
Number one, did you -- what's the lag time
between, like, if you switch activities from,

00:37:51.270 --> 00:37:53.079
let's say, walking to driving?

00:37:53.079 --> 00:37:55.950
What's the lag time between an app getting
that kind of a registration?

00:37:55.950 --> 00:37:59.660
&gt;&gt;Waleed Kadous: It varies a little bit from
what the transitions are.

00:37:59.660 --> 00:38:01.990
But think on the order of 30 seconds to a
minute.

00:38:01.990 --> 00:38:06.619
&gt;&gt;Jaikumar Ganesh: Just to give you an accurate
figure, the live demo here, it took, like,

00:38:06.619 --> 00:38:10.690
eight seconds from him to go to biking from
foot to bike when he was -- and in between,

00:38:10.690 --> 00:38:14.890
we had the tilting to say that there is an
activity chain.

00:38:14.890 --> 00:38:19.349
So we have to, you know, be careful about
false positives and false negatives.

00:38:19.349 --> 00:38:23.951
&gt;&gt;&gt; Do you happen to know, is there a way,
given the current driving activity, is there

00:38:23.951 --> 00:38:28.130
a way right now that you can tell if you're
just -- if you're a driver or a passenger?

00:38:28.130 --> 00:38:29.730
Is that something you might work on?

00:38:29.730 --> 00:38:31.430
&gt;&gt;Waleed Kadous: We can't do that right now.

00:38:31.430 --> 00:38:33.029
But who knows what the future holds.

00:38:33.029 --> 00:38:34.029
&gt;&gt;&gt; All right.

00:38:34.029 --> 00:38:35.029
Thank you.

00:38:35.029 --> 00:38:36.029
&gt;&gt;Waleed Kadous: All right.

00:38:36.029 --> 00:38:37.029
Thank you very much.

00:38:37.029 --> 00:38:38.029
We really appreciate your time today.

00:38:38.029 --> 00:38:39.930
Please come to the office hours and the code
lab tomorrow.

00:38:39.930 --> 00:38:40.630
[ Applause ]

