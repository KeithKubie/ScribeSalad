WEBVTT
Kind: captions
Language: en

00:00:03.083 --> 00:00:04.500
GUY CHARUSADHIRAKUL:
Hi, everyone.

00:00:04.500 --> 00:00:05.520
Welcome back.

00:00:05.520 --> 00:00:08.420
Hope you all had a nice
lunch on this beautiful day.

00:00:08.420 --> 00:00:10.400
In the next hours,
we have a few talks

00:00:10.400 --> 00:00:14.420
about how developers like
you can create great games,

00:00:14.420 --> 00:00:17.945
connect, and scale to
billions of users with Google.

00:00:17.945 --> 00:00:19.820
My name is Guy, and I'm
a partner development

00:00:19.820 --> 00:00:22.740
manager with the Google Play
team from Southeast Asia.

00:00:22.740 --> 00:00:24.285
I'm based in Singapore.

00:00:24.285 --> 00:00:25.910
And also I have my
colleague Daniel who

00:00:25.910 --> 00:00:28.150
will join me shortly as well.

00:00:28.150 --> 00:00:30.520
In this first session,
we'll share with you

00:00:30.520 --> 00:00:34.328
how game developers can achieve
success in emerging markets

00:00:34.328 --> 00:00:35.620
and build great business there.

00:00:39.750 --> 00:00:41.730
We'll cover a few
things in this talk.

00:00:41.730 --> 00:00:45.330
First, we'll share with you
opportunities and challenges

00:00:45.330 --> 00:00:47.950
that emerging markets represent.

00:00:47.950 --> 00:00:50.820
Then we'll share with you three
key strategies for achieving

00:00:50.820 --> 00:00:53.642
success in these markets.

00:00:53.642 --> 00:00:55.100
We'll also share
with you resources

00:00:55.100 --> 00:00:57.308
that you can take away to
help you achieve that goal.

00:01:03.408 --> 00:01:05.700
The reason we want to talk
to you about emerging market

00:01:05.700 --> 00:01:08.670
because we know it is a
big business opportunities

00:01:08.670 --> 00:01:10.270
for game developers.

00:01:10.270 --> 00:01:12.060
However, these
markets may not be

00:01:12.060 --> 00:01:14.910
as familiar to many of you
who may have been focused

00:01:14.910 --> 00:01:17.700
a bit more on developed
markets, like the US market,

00:01:17.700 --> 00:01:19.060
Europe, Japan, and Korea.

00:01:22.490 --> 00:01:26.620
But first, let's talk about what
do we mean by emerging markets.

00:01:26.620 --> 00:01:28.500
Emerging markets are
countries and regions

00:01:28.500 --> 00:01:30.190
that are in growth stage.

00:01:30.190 --> 00:01:32.940
And they share some
common characteristics.

00:01:32.940 --> 00:01:36.290
These markets have large and
fast-growing smartphone user

00:01:36.290 --> 00:01:37.340
base.

00:01:37.340 --> 00:01:40.010
Income level of users
in these markets

00:01:40.010 --> 00:01:42.440
are growing rapidly,
although they might be lower

00:01:42.440 --> 00:01:47.600
in developed market, typically
maybe a quarter to a third.

00:01:47.600 --> 00:01:51.140
In these markets, we also see
much higher proportion of entry

00:01:51.140 --> 00:01:55.920
or mid-level devices
with lower specs.

00:01:55.920 --> 00:01:57.920
Credit card ownership and
usage in these markets

00:01:57.920 --> 00:02:00.200
are also lower.

00:02:00.200 --> 00:02:04.190
Geographically, emerging
markets cover a very large area

00:02:04.190 --> 00:02:08.100
and include key markets
like India, Southeast Asia,

00:02:08.100 --> 00:02:10.789
Latin America, Middle
East, and North Africa.

00:02:15.490 --> 00:02:19.430
As I mentioned, emerging markets
have a lot of smartphone users

00:02:19.430 --> 00:02:21.490
that is growing rapidly.

00:02:21.490 --> 00:02:24.770
Of the 4 billion
forecasted Android devices

00:02:24.770 --> 00:02:27.540
that's projected to be in the
markets over next few years,

00:02:27.540 --> 00:02:30.750
many of them are already
in emerging markets.

00:02:30.750 --> 00:02:33.660
2/3 of Android
devices sold today

00:02:33.660 --> 00:02:35.810
are already in emerging markets.

00:02:35.810 --> 00:02:39.030
And this represents a huge
opportunity for developers

00:02:39.030 --> 00:02:40.720
to tap into a very
large user base.

00:02:45.720 --> 00:02:47.630
And the good news
is it's not just

00:02:47.630 --> 00:02:50.460
the number of smartphone
users in these markets.

00:02:50.460 --> 00:02:53.940
We're seeing very strong
momentum in in-app purchases

00:02:53.940 --> 00:02:56.920
and monetization in
these markets as well.

00:02:56.920 --> 00:03:01.000
Today, among the top 20
grossing markets on Google Play,

00:03:01.000 --> 00:03:04.860
seven of them are
emerging markets.

00:03:04.860 --> 00:03:06.460
Consumer spending
in these markets

00:03:06.460 --> 00:03:08.280
is also growing rapidly.

00:03:08.280 --> 00:03:10.320
They have doubled in
the past two years

00:03:10.320 --> 00:03:11.900
and continue to
grow rapidly also.

00:03:16.717 --> 00:03:19.050
Now, I hope that you are
excited about the opportunities

00:03:19.050 --> 00:03:21.100
in emerging markets.

00:03:21.100 --> 00:03:23.920
And we'd like to share with
you three key strategies

00:03:23.920 --> 00:03:27.530
for helping you to become
successful in these regions.

00:03:27.530 --> 00:03:30.270
First, you should consider
optimizing your games

00:03:30.270 --> 00:03:33.360
for entry and mid-level
smartphones in emerging

00:03:33.360 --> 00:03:34.830
markets.

00:03:34.830 --> 00:03:38.880
Two, consider localizing
and culturalizing your games

00:03:38.880 --> 00:03:41.190
for users in these markets
where English may not

00:03:41.190 --> 00:03:44.600
be the first language.

00:03:44.600 --> 00:03:48.010
And three, consider adjusting
price points for your games

00:03:48.010 --> 00:03:51.882
so that they are more affordable
for users in these markets.

00:03:51.882 --> 00:03:53.840
We'll go through each of
these in more details.

00:03:53.840 --> 00:03:56.960
And I'll start with optimizing
your games for smartphones

00:03:56.960 --> 00:03:57.860
in emerging markets.

00:04:02.310 --> 00:04:06.630
In emerging markets, user
really care about the app size.

00:04:06.630 --> 00:04:08.670
This is often because
entry-level phones

00:04:08.670 --> 00:04:11.940
in emerging markets
come with lower storage.

00:04:11.940 --> 00:04:14.620
Or sometimes data connectivity
is just expensive,

00:04:14.620 --> 00:04:18.620
so it's costly for users in
this market to download apps.

00:04:18.620 --> 00:04:21.980
And we've seen this
translate to user concerns.

00:04:21.980 --> 00:04:25.520
In Indonesia, half of the
users have told us in a survey

00:04:25.520 --> 00:04:28.820
that they really want to know
how much data an app will use

00:04:28.820 --> 00:04:32.310
or how much space an app
will take on their phone.

00:04:32.310 --> 00:04:36.000
In Brazil, we have heard
many users mentioned

00:04:36.000 --> 00:04:38.700
that they don't download
apps or they don't end up

00:04:38.700 --> 00:04:41.310
purchasing premium games
because they run out

00:04:41.310 --> 00:04:42.420
of space on their phones.

00:04:46.760 --> 00:04:48.820
And it's not just user concerns.

00:04:48.820 --> 00:04:51.610
We have seen this translate to
metrics that impact developer

00:04:51.610 --> 00:04:53.650
performance.

00:04:53.650 --> 00:04:55.840
In emerging markets, we
have seen the larger apps

00:04:55.840 --> 00:04:59.570
result in lower
download success rates.

00:04:59.570 --> 00:05:03.530
For every 10 megabyte
increase in APK size,

00:05:03.530 --> 00:05:09.050
developer sees 1.5 percentage
drop in app install conversion.

00:05:09.050 --> 00:05:12.760
So let's say if your game
is 60 megabytes larger

00:05:12.760 --> 00:05:15.710
than a similar games,
which, at a first glance,

00:05:15.710 --> 00:05:17.540
doesn't seem like a lot.

00:05:17.540 --> 00:05:21.610
But you could actually see up
to 10 percentage point lower

00:05:21.610 --> 00:05:23.860
install conversion
in emerging markets.

00:05:23.860 --> 00:05:27.520
That translates to a lot of
install that you're losing.

00:05:27.520 --> 00:05:30.280
Therefore, it's important
to keep your app's size

00:05:30.280 --> 00:05:31.750
light for emerging markets.

00:05:36.320 --> 00:05:38.530
And it's not just about
optimizing the app size

00:05:38.530 --> 00:05:39.635
as well.

00:05:39.635 --> 00:05:41.260
It's also important
in emerging markets

00:05:41.260 --> 00:05:44.350
to optimize the game performance
once the user has downloaded

00:05:44.350 --> 00:05:47.370
the app onto a device.

00:05:47.370 --> 00:05:49.880
This is because entry-level
devices in emerging markets

00:05:49.880 --> 00:05:52.480
often don't have
a lot of memory.

00:05:52.480 --> 00:05:56.900
We have seen that nearly one in
two devices in emerging markets

00:05:56.900 --> 00:06:00.680
have RAM less than
two gigabytes.

00:06:00.680 --> 00:06:03.370
So if your game is
memory intensive,

00:06:03.370 --> 00:06:07.330
this could lead to crashes,
poor rendering, and poor user

00:06:07.330 --> 00:06:09.235
experience for users
in these markets.

00:06:14.110 --> 00:06:16.270
We're seeing many developers
putting in efforts

00:06:16.270 --> 00:06:19.300
to optimize their games
for emerging markets.

00:06:19.300 --> 00:06:22.940
And "Garena Free Fire"
is one great example.

00:06:22.940 --> 00:06:25.840
"Free Fire" is a popular
battle royale game,

00:06:25.840 --> 00:06:29.470
but it comes in a size that's
just under 600 megabytes

00:06:29.470 --> 00:06:31.780
while some of the other
games in this genre

00:06:31.780 --> 00:06:34.760
is over one gigabyte.

00:06:34.760 --> 00:06:37.190
The games also offer
Google Play Instant,

00:06:37.190 --> 00:06:39.770
where users can immediately
play and experience

00:06:39.770 --> 00:06:43.990
a game without having to
download and install the APK.

00:06:43.990 --> 00:06:47.530
The game is also optimized to
support over 12,000 devices

00:06:47.530 --> 00:06:49.730
on a play device catalog.

00:06:49.730 --> 00:06:51.860
And as a result of
all these efforts,

00:06:51.860 --> 00:06:55.880
the game is able to reach many,
many users in emerging markets.

00:06:55.880 --> 00:07:00.783
It has reached over 40 million
peak daily active user.

00:07:00.783 --> 00:07:03.200
And the game has gone on to
become the number one grossing

00:07:03.200 --> 00:07:06.018
game in many emerging markets,
like Brazil, Indonesia,

00:07:06.018 --> 00:07:06.560
and Thailand.

00:07:11.090 --> 00:07:13.100
I hope that convinced
you of the importance

00:07:13.100 --> 00:07:16.290
of optimizing your games
for emerging markets.

00:07:16.290 --> 00:07:20.520
And here are some tips and tools
that can help you with that.

00:07:20.520 --> 00:07:24.900
First, try to reduce
your APK and app size.

00:07:24.900 --> 00:07:26.990
And you can use Android
app bundles that

00:07:26.990 --> 00:07:29.190
was mentioned earlier
today, as well as

00:07:29.190 --> 00:07:32.980
APK Analyzer in Android Studio.

00:07:32.980 --> 00:07:35.680
Secondly, consider
optimizing the performance

00:07:35.680 --> 00:07:38.200
for devices with lower RAM.

00:07:38.200 --> 00:07:39.730
Our team has
published a Building

00:07:39.730 --> 00:07:42.880
for Billions guidelines
to help you do just that.

00:07:42.880 --> 00:07:44.950
And we'll share with
you the link to that

00:07:44.950 --> 00:07:47.970
at the end of the presentation.

00:07:47.970 --> 00:07:52.440
Next, consider publishing Google
Play Instant for your game.

00:07:52.440 --> 00:07:55.020
Again, this lets users try
and experience your game

00:07:55.020 --> 00:07:58.530
without having to download
and install the APK.

00:07:58.530 --> 00:08:00.380
And if you develop
in Unity, there

00:08:00.380 --> 00:08:03.390
is a Unity plug-in to
help you with that.

00:08:03.390 --> 00:08:06.620
Finally, check to make
sure how widely your game

00:08:06.620 --> 00:08:10.387
is supported across various
devices in emerging markets.

00:08:10.387 --> 00:08:12.470
And you can use device
catalog in the Play Console

00:08:12.470 --> 00:08:15.480
to help you with that.

00:08:15.480 --> 00:08:18.227
Next, Daniel will share with
you two other key strategies

00:08:18.227 --> 00:08:20.310
to help you become successful
in emerging markets.

00:08:23.656 --> 00:08:25.090
[APPLAUSE]

00:08:25.090 --> 00:08:28.450
AUDIENCE: [? Welcome. ?]

00:08:28.450 --> 00:08:29.800
DANIEL TROCOLI: Hello, everyone.

00:08:29.800 --> 00:08:32.840
Our second strategy is
related to localization

00:08:32.840 --> 00:08:37.110
and culturalization of your
games for emerging markets.

00:08:37.110 --> 00:08:40.270
Localization is really, really
important for these markets.

00:08:40.270 --> 00:08:43.049
And the reason for that is
that the English proficiency

00:08:43.049 --> 00:08:44.590
is really low.

00:08:44.590 --> 00:08:48.420
So it isn't a surprise that
when we check the top 20

00:08:48.420 --> 00:08:50.760
grossing titles
in these regions,

00:08:50.760 --> 00:08:53.550
the vast majority of them
are localized in not only

00:08:53.550 --> 00:08:57.390
[? into ?] store listings
but specifically in game.

00:08:59.990 --> 00:09:03.410
KLab saw a very positive
impact from the localization

00:09:03.410 --> 00:09:06.440
they did of "Captain
Tsubasa" to Arabic.

00:09:06.440 --> 00:09:09.530
They released the localized
version during Ramadan

00:09:09.530 --> 00:09:11.870
and the World Cup of 2018.

00:09:11.870 --> 00:09:15.560
And as a culturalization effort,
they added Saudi Arabia players

00:09:15.560 --> 00:09:16.440
to that.

00:09:16.440 --> 00:09:20.840
As a result, they saw that their
installs increased sevenfold.

00:09:20.840 --> 00:09:22.640
And the current
revenues that they

00:09:22.640 --> 00:09:25.010
see from Arabic-speaking
countries

00:09:25.010 --> 00:09:31.490
exceeds their ones from
English-speaking countries.

00:09:31.490 --> 00:09:35.020
Another aspect to take
in mind is the packaging

00:09:35.020 --> 00:09:37.150
of your game for
emerging markets.

00:09:37.150 --> 00:09:40.150
And by packaging, I
mean the store listings.

00:09:40.150 --> 00:09:43.420
They need to be adapted
to the local preferences.

00:09:43.420 --> 00:09:48.610
Supercell does a great job
by adopting their screenshots

00:09:48.610 --> 00:09:52.210
to the cultural tastes
of each country.

00:09:52.210 --> 00:09:55.210
Here you can see the difference
between the Brazilian one

00:09:55.210 --> 00:09:56.490
versus the Japanese one.

00:10:00.250 --> 00:10:02.800
So, some tips for localizing.

00:10:02.800 --> 00:10:03.910
Adapt your packaging.

00:10:03.910 --> 00:10:07.510
And in order to do this, we
provide you the store listing

00:10:07.510 --> 00:10:11.350
experiment tool where you can
try different configurations

00:10:11.350 --> 00:10:15.970
of your store listing, and
also the country targeting tool

00:10:15.970 --> 00:10:19.450
so you can have different
store listing for each country.

00:10:19.450 --> 00:10:24.610
Also, try to understand cultural
references and special dates.

00:10:24.610 --> 00:10:27.100
These will generate
several interesting sites

00:10:27.100 --> 00:10:30.730
so you can create
custom events, custom

00:10:30.730 --> 00:10:36.490
content, and special sales that
are tailored to each market.

00:10:36.490 --> 00:10:40.330
Also, each country has its
preferred marketing channels

00:10:40.330 --> 00:10:43.480
and social networks that
provide more traction there.

00:10:43.480 --> 00:10:47.500
So be sure to understand
the digital landscape.

00:10:47.500 --> 00:10:51.190
And working with some
digital agencies there

00:10:51.190 --> 00:10:53.300
might speed up your
learning curve.

00:10:55.830 --> 00:10:59.040
And our last strategy relates
to adjusting your price point

00:10:59.040 --> 00:11:01.910
for emerging markets.

00:11:01.910 --> 00:11:04.160
As different countries have
different levels of income

00:11:04.160 --> 00:11:08.990
per capita and, consequently,
different levels of purchasing

00:11:08.990 --> 00:11:12.510
power, some successful
products and services

00:11:12.510 --> 00:11:16.550
already adapt their price
points to the local realities.

00:11:16.550 --> 00:11:19.950
And in emerging markets,
there is usually

00:11:19.950 --> 00:11:22.740
less disposable income for
entertainment products.

00:11:22.740 --> 00:11:26.850
So the users there might face
some interesting decisions.

00:11:26.850 --> 00:11:29.610
Shall I buy some
jams, or shall I

00:11:29.610 --> 00:11:32.820
buy one month of a
streaming video service?

00:11:32.820 --> 00:11:37.940
Shall I buy a nice burger combo,
or this [? customization ?]

00:11:37.940 --> 00:11:39.730
product [? moving ?] in game?

00:11:39.730 --> 00:11:41.550
So here we would
like to provide you

00:11:41.550 --> 00:11:44.550
with some of the most common
price points for these goods,

00:11:44.550 --> 00:11:50.920
specifically for Brazil,
Mexico, Thailand, and Indonesia.

00:11:50.920 --> 00:11:53.173
And it isn't a surprise
that when we check it

00:11:53.173 --> 00:11:55.840
that the price points that drive
the majority of the [? heavy ?]

00:11:55.840 --> 00:11:58.420
and emerging markets,
they are more

00:11:58.420 --> 00:12:00.620
friendly to the
local population.

00:12:00.620 --> 00:12:02.530
So there is
effectively a trade-off

00:12:02.530 --> 00:12:06.940
between the average revenue per
paying user for a broader buyer

00:12:06.940 --> 00:12:07.950
base.

00:12:07.950 --> 00:12:11.380
And when we compare
the price points that

00:12:11.380 --> 00:12:14.740
generate half of the
revenue in emerging markets,

00:12:14.740 --> 00:12:19.570
they are usually in a range of
10% to 25% of the price points

00:12:19.570 --> 00:12:22.180
that generate half of the
revenue on developed markets.

00:12:30.020 --> 00:12:32.420
IGG has a very
interesting case, where

00:12:32.420 --> 00:12:35.450
they applied more friendly
pricing for Brazil.

00:12:35.450 --> 00:12:39.290
So in general, they charge
$2 for the starter pack.

00:12:39.290 --> 00:12:40.730
But specifically
for Brazil, they

00:12:40.730 --> 00:12:43.520
started pricing at $0.99 cents.

00:12:43.520 --> 00:12:48.650
And with this, they got
122% growth in consumer

00:12:48.650 --> 00:12:49.550
spend in country.

00:12:52.460 --> 00:12:55.730
"Garena Free Fire" as well
offered different price points,

00:12:55.730 --> 00:12:58.100
depending on the emerging
market that they are.

00:12:58.100 --> 00:13:02.030
So the price points can range
from 10% to 20% of the prices

00:13:02.030 --> 00:13:05.220
that they usually charge
on developed markets.

00:13:05.220 --> 00:13:08.150
And this doubled their
buyer penetration.

00:13:11.510 --> 00:13:14.190
As some general tips, it's
important to understand

00:13:14.190 --> 00:13:16.570
what is the acceptable price
points for some emerging

00:13:16.570 --> 00:13:17.070
markets.

00:13:17.070 --> 00:13:19.500
Recall that as people have
less disposable income,

00:13:19.500 --> 00:13:24.090
they will be always comparing
their entertainment options.

00:13:24.090 --> 00:13:28.590
So use AB testing to try to
find your optimal pricing

00:13:28.590 --> 00:13:31.018
for each country.

00:13:31.018 --> 00:13:33.060
It's worth it to remember
that Google Play allows

00:13:33.060 --> 00:13:38.100
you to charge prices that
are below $1 17 countries.

00:13:38.100 --> 00:13:39.750
And the majority
of these countries

00:13:39.750 --> 00:13:41.650
are on emerging markets.

00:13:41.650 --> 00:13:44.790
So this can broaden
up your price range

00:13:44.790 --> 00:13:47.020
that can be tested
through AB testing.

00:13:47.020 --> 00:13:48.120
Also, avoid biases.

00:13:48.120 --> 00:13:51.660
In emerging markets as well,
we do have wealthy people.

00:13:51.660 --> 00:13:58.280
And there is a broad range of
users that you can monetize.

00:13:58.280 --> 00:14:02.360
So to find the right
mix of [INAUDIBLE]

00:14:02.360 --> 00:14:07.830
or having your mix between
ads, IAP, and subscription.

00:14:07.830 --> 00:14:09.330
Thank you for your
attention today,

00:14:09.330 --> 00:14:11.790
and here are some links
that you might find useful.

00:14:11.790 --> 00:14:14.430
Respectively, the Building
for Business website,

00:14:14.430 --> 00:14:16.800
more information
about Android vitals,

00:14:16.800 --> 00:14:19.770
and the link for the
translation services that you

00:14:19.770 --> 00:14:22.470
might find within Play Console.

00:14:22.470 --> 00:14:24.090
And next, I'd like
to introduce you

00:14:24.090 --> 00:14:26.700
to Vijay, who will share
some updates on how

00:14:26.700 --> 00:14:29.310
to build AR games.

00:14:29.310 --> 00:14:31.500
Thank you.

00:14:31.500 --> 00:14:32.750
VIJAY SHANKAR: Good afternoon.

00:14:32.750 --> 00:14:35.130
It's great to be here at GDC.

00:14:35.130 --> 00:14:39.110
I'm Vijay Shankar and
I lead product ARCore.

00:14:39.110 --> 00:14:41.690
Today, I want to
talk about how ARCore

00:14:41.690 --> 00:14:45.650
can help you build more
compelling gaming experiences.

00:14:45.650 --> 00:14:48.560
But first, let's start with
a simple question, like,

00:14:48.560 --> 00:14:51.800
why even build an AR game?

00:14:51.800 --> 00:14:53.960
I believe the answer,
both from a gaming

00:14:53.960 --> 00:14:56.480
and an overall
computing perspective,

00:14:56.480 --> 00:15:01.490
is that this gets users a
more engaging experience when

00:15:01.490 --> 00:15:05.390
the digital and the
physical worlds intersect.

00:15:05.390 --> 00:15:07.640
This, if you're
able to accomplish

00:15:07.640 --> 00:15:10.100
the intersection of the
digital and the physical world,

00:15:10.100 --> 00:15:13.640
opens the door for more
engaging experiences

00:15:13.640 --> 00:15:17.420
that I think are going to be a
lot more realistic, a lot more

00:15:17.420 --> 00:15:20.610
intuitive for users to
play, and, more importantly,

00:15:20.610 --> 00:15:22.670
a lot more fun.

00:15:22.670 --> 00:15:26.480
Speaking of fun, if you look
at the history of gaming,

00:15:26.480 --> 00:15:30.440
predominantly, games and the
magic that's come from games

00:15:30.440 --> 00:15:33.650
has been the ability to pull
users from the real world

00:15:33.650 --> 00:15:35.810
into the digital one.

00:15:35.810 --> 00:15:39.590
But now, with augmented reality,
you can actually flip that.

00:15:39.590 --> 00:15:43.310
You can bring the imagination
and the fantasy right

00:15:43.310 --> 00:15:46.310
to the users in their
own physical space.

00:15:46.310 --> 00:15:50.050
We think that's
extremely powerful.

00:15:50.050 --> 00:15:52.150
As I'm sure you all
would agree, that's

00:15:52.150 --> 00:15:54.438
a lot easier said than done.

00:15:54.438 --> 00:15:55.980
So we've been giving
a lot of thought

00:15:55.980 --> 00:15:58.770
into what are the key
ingredients required

00:15:58.770 --> 00:16:01.170
from a tech
enablement perspective

00:16:01.170 --> 00:16:05.000
to make compelling
gaming experiences in AR.

00:16:05.000 --> 00:16:07.830
And we think there are
three underlying ones.

00:16:07.830 --> 00:16:12.820
Number one is the game and the
tech needs to be perceptive.

00:16:12.820 --> 00:16:14.110
What does this mean?

00:16:14.110 --> 00:16:16.510
In order to augment
reality, you need

00:16:16.510 --> 00:16:21.130
to be able to have your device
understand the places, object,

00:16:21.130 --> 00:16:24.200
and people around you.

00:16:24.200 --> 00:16:27.430
And number two is immersion.

00:16:27.430 --> 00:16:31.540
For something to be
immersive, the virtual objects

00:16:31.540 --> 00:16:34.630
in your gaming experience
need to blend seamlessly

00:16:34.630 --> 00:16:37.260
into the user's environment.

00:16:37.260 --> 00:16:41.280
This is what makes your gaming
experience more realistic.

00:16:41.280 --> 00:16:44.610
And three, which we think
is equally important,

00:16:44.610 --> 00:16:48.240
is all AR experiences need to
be available across devices

00:16:48.240 --> 00:16:53.080
and platforms, be
it iOS or Android.

00:16:53.080 --> 00:16:55.990
If you look at the real
world, building perceptive,

00:16:55.990 --> 00:16:57.930
immersive, and
accessible experiences

00:16:57.930 --> 00:16:59.505
is fairly straightforward.

00:16:59.505 --> 00:17:00.880
We don't even
think much about it

00:17:00.880 --> 00:17:03.190
because it's
intuitive and natural.

00:17:03.190 --> 00:17:08.300
But for the camera in our mobile
devices, it's not so much.

00:17:08.300 --> 00:17:11.050
And that's the reason
we built ARCore.

00:17:11.050 --> 00:17:14.530
We want to give you
simple yet powerful tools

00:17:14.530 --> 00:17:18.790
to help connect the physical
and the digital world.

00:17:18.790 --> 00:17:22.060
Now let's actually dig in
into some of these tools

00:17:22.060 --> 00:17:26.810
and how they can enable you to
build compelling experiences.

00:17:26.810 --> 00:17:30.100
So let's first start
with perception.

00:17:30.100 --> 00:17:34.000
Like we had discussed, there
are three underlying areas

00:17:34.000 --> 00:17:36.520
that we need to
enable for perception.

00:17:36.520 --> 00:17:41.350
The ability for the device to
understand places, objects,

00:17:41.350 --> 00:17:43.840
and then people.

00:17:43.840 --> 00:17:46.600
Everything starts with places
and environmental understanding

00:17:46.600 --> 00:17:48.760
with AR.

00:17:48.760 --> 00:17:52.250
With ARCore, out of the
box, you get the ability

00:17:52.250 --> 00:17:55.730
to understand the physical
structure of the environment.

00:17:55.730 --> 00:17:59.060
The ability to detect
horizontal, vertical,

00:17:59.060 --> 00:18:00.890
and angular surfaces.

00:18:00.890 --> 00:18:03.890
So it may be a wall,
the ground, or a table.

00:18:03.890 --> 00:18:08.470
We have you covered in terms
of our ability to find a plane.

00:18:08.470 --> 00:18:11.260
And over the last year
since we announced

00:18:11.260 --> 00:18:13.390
environmental
understanding in ARCore,

00:18:13.390 --> 00:18:15.160
we have made
significant progress

00:18:15.160 --> 00:18:18.088
in terms of how the
underlying tech works.

00:18:18.088 --> 00:18:19.880
We have put a lot of
attention into looking

00:18:19.880 --> 00:18:22.400
at what are the things about
this that actually move

00:18:22.400 --> 00:18:24.720
user engagement and retention.

00:18:24.720 --> 00:18:26.210
And we have
significantly improved

00:18:26.210 --> 00:18:28.590
some of those core metrics.

00:18:28.590 --> 00:18:31.250
These could be things such
as the probability of finding

00:18:31.250 --> 00:18:35.100
planes, or the time
it takes for your user

00:18:35.100 --> 00:18:39.060
defined that first plane
to create that aha moment.

00:18:39.060 --> 00:18:41.000
So we are super
excited to see how

00:18:41.000 --> 00:18:43.020
these changes are
going to help you

00:18:43.020 --> 00:18:45.800
build more compelling games.

00:18:45.800 --> 00:18:48.350
Let's now talk about objects.

00:18:48.350 --> 00:18:51.760
One example is the
augmented images API.

00:18:51.760 --> 00:18:56.320
This helps you track
and recognize 2D images

00:18:56.320 --> 00:18:58.840
and then be able to
kick off immersive

00:18:58.840 --> 00:19:01.880
3D experiences off of them.

00:19:01.880 --> 00:19:03.950
And all we need from
you is to give us

00:19:03.950 --> 00:19:07.370
a database of the images and
the associated 3D content

00:19:07.370 --> 00:19:08.360
you want to trigger.

00:19:08.360 --> 00:19:09.950
It's that simple.

00:19:09.950 --> 00:19:11.810
And this unlocks
the ability for you

00:19:11.810 --> 00:19:14.680
to create immersive
experiences around the user

00:19:14.680 --> 00:19:16.380
by tapping into everyday things.

00:19:16.380 --> 00:19:20.570
It could be a poster
or a cereal box.

00:19:20.570 --> 00:19:23.870
So we spoke about
places and objects.

00:19:23.870 --> 00:19:25.810
Let's talk about
faces and people,

00:19:25.810 --> 00:19:28.700
which are a lot more complex.

00:19:28.700 --> 00:19:31.670
Even the smallest of
movements and changes,

00:19:31.670 --> 00:19:34.490
like the arch of an
eyebrow, can drastically

00:19:34.490 --> 00:19:36.800
change the meaning in
the expression someone

00:19:36.800 --> 00:19:39.140
is trying to convey.

00:19:39.140 --> 00:19:42.060
And which is why we are super
excited about the augmented

00:19:42.060 --> 00:19:45.150
faces API that we
launched last month.

00:19:45.150 --> 00:19:49.230
It is a high quality
468-point 3D mesh

00:19:49.230 --> 00:19:52.710
that can detect even
the minutest of actions

00:19:52.710 --> 00:19:56.190
that users take, and then
trigger powerful experiences

00:19:56.190 --> 00:19:58.080
off of them.

00:19:58.080 --> 00:20:00.590
We're really excited to
see some of the experiences

00:20:00.590 --> 00:20:05.170
you can build with
augmented faces API.

00:20:05.170 --> 00:20:07.650
These were some examples of
the perceptive capabilities

00:20:07.650 --> 00:20:08.970
in ARCore.

00:20:08.970 --> 00:20:13.190
Let's now talk about immersion.

00:20:13.190 --> 00:20:15.050
As we had discussed
earlier, for something

00:20:15.050 --> 00:20:17.240
to feel like it's
actually with you,

00:20:17.240 --> 00:20:21.270
this could be a gaming
element or a character.

00:20:21.270 --> 00:20:24.300
For it to actually
feel real, it needs

00:20:24.300 --> 00:20:27.630
to move and react to the
real world environment,

00:20:27.630 --> 00:20:30.510
just like you and I or
a real object would.

00:20:30.510 --> 00:20:32.895
And that is a
really hard problem.

00:20:32.895 --> 00:20:34.520
I want to talk about
a couple of things

00:20:34.520 --> 00:20:38.150
that ARCore does to make
that happen seamlessly.

00:20:38.150 --> 00:20:41.410
The first one is
motion tracking.

00:20:41.410 --> 00:20:45.400
By combining the data from
the camera and the IMU,

00:20:45.400 --> 00:20:49.510
we are able to provide
your device the capability

00:20:49.510 --> 00:20:52.750
to have both position
and orientation,

00:20:52.750 --> 00:20:57.150
and track itself with respect
to the rest of the real world.

00:20:57.150 --> 00:21:00.610
And this actually enables
your camera and your device

00:21:00.610 --> 00:21:04.580
to perform and work
like your own eyes.

00:21:04.580 --> 00:21:06.170
And again, this
is one area where

00:21:06.170 --> 00:21:08.900
we have made significant
improvements since we

00:21:08.900 --> 00:21:12.000
launched this last year.

00:21:12.000 --> 00:21:14.570
And the second one I want
to talk about with immersion

00:21:14.570 --> 00:21:16.940
is lighting.

00:21:16.940 --> 00:21:18.770
We need to really
get lighting right

00:21:18.770 --> 00:21:21.400
or it breaks the illusion.

00:21:21.400 --> 00:21:24.120
The virtual content in
your gaming experiences

00:21:24.120 --> 00:21:29.710
need to react to the same way to
changes in real world lighting

00:21:29.710 --> 00:21:31.240
like real objects would.

00:21:31.240 --> 00:21:32.890
And that's a hard problem.

00:21:32.890 --> 00:21:34.950
And you get that out
of the box with ARCore.

00:21:39.380 --> 00:21:42.330
So we spoke about some of
the perceptive and immersive

00:21:42.330 --> 00:21:43.500
capabilities.

00:21:43.500 --> 00:21:45.630
And I want to talk
about how ARCore

00:21:45.630 --> 00:21:47.920
is making this more
accessible, and why

00:21:47.920 --> 00:21:51.480
that's equally importantly.

00:21:51.480 --> 00:21:53.490
I'm sure we all
would agree, gaming

00:21:53.490 --> 00:21:56.510
is inherently more
fun with your friends.

00:21:56.510 --> 00:21:58.640
And especially
when we are trying

00:21:58.640 --> 00:22:00.920
to connect the digital
and the physical worlds,

00:22:00.920 --> 00:22:04.190
being able to share
these gaming experiences

00:22:04.190 --> 00:22:09.650
in the real world with people
you like is extremely crucial.

00:22:09.650 --> 00:22:12.890
And that's exactly what
Cloud Anchors does.

00:22:12.890 --> 00:22:17.090
This lets you have shared
gaming experiences no matter

00:22:17.090 --> 00:22:18.890
the device that
your friends use.

00:22:18.890 --> 00:22:21.620
It works on iOS and Android.

00:22:21.620 --> 00:22:25.790
And we think this is extremely
powerful to scale gaming

00:22:25.790 --> 00:22:31.000
experiences, and for people
to get the most out of it.

00:22:31.000 --> 00:22:34.210
This is a fundamentally
hard technical problem.

00:22:34.210 --> 00:22:36.270
And the thing that we have
done again with ARCore

00:22:36.270 --> 00:22:38.550
is we've completely
abstracted that,

00:22:38.550 --> 00:22:40.470
so that you as
developers don't have

00:22:40.470 --> 00:22:45.330
to worry about creating the
anchor, or hosting the anchors,

00:22:45.330 --> 00:22:47.340
or even resolving the anchors.

00:22:47.340 --> 00:22:48.960
And it's super
straightforward for you

00:22:48.960 --> 00:22:52.380
to enable these shared
multiplayer experiences

00:22:52.380 --> 00:22:53.640
within your gaming sessions.

00:22:58.800 --> 00:23:00.450
The other piece of
feedback that we

00:23:00.450 --> 00:23:02.700
have gotten over
the last year is

00:23:02.700 --> 00:23:06.810
building these high quality
interactions is actually

00:23:06.810 --> 00:23:08.810
extremely hard.

00:23:08.810 --> 00:23:09.380
Right?

00:23:09.380 --> 00:23:12.727
This is a new concept,
and it's fairly complex.

00:23:12.727 --> 00:23:14.810
So one of the things that
we heard from developers

00:23:14.810 --> 00:23:18.260
is, we would like [? to ?] not
spend as much time worrying

00:23:18.260 --> 00:23:20.990
about these interactions,
but spend more time

00:23:20.990 --> 00:23:23.120
on what we do best, which
is building the gaming

00:23:23.120 --> 00:23:25.010
experience itself.

00:23:25.010 --> 00:23:27.670
And this is why we spend
a lot of time thinking

00:23:27.670 --> 00:23:29.410
through these interactions.

00:23:29.410 --> 00:23:34.840
And we launched the AR
Elements Design Guidelines app

00:23:34.840 --> 00:23:38.730
to make this extremely
simple for you to tap into.

00:23:38.730 --> 00:23:43.020
So this app is a collection of
the underlying UX primitives

00:23:43.020 --> 00:23:45.360
and principles
that you would need

00:23:45.360 --> 00:23:49.430
to build all these high
quality AR interactions.

00:23:49.430 --> 00:23:51.140
For example, this
could be, how do you

00:23:51.140 --> 00:23:53.600
help users understand
motion tracking

00:23:53.600 --> 00:23:56.790
and help them find their first
plane in an engaging way?

00:23:56.790 --> 00:24:01.340
Or how do you make this simple
and interesting for your users

00:24:01.340 --> 00:24:05.100
to start a shared
multiplayer session?

00:24:05.100 --> 00:24:08.100
So we have talked through all
those little details based

00:24:08.100 --> 00:24:11.100
on our experience at Google
building first party AR

00:24:11.100 --> 00:24:14.760
experiences and speaking
with a lot of developers who

00:24:14.760 --> 00:24:18.090
work on AR experiences overall.

00:24:18.090 --> 00:24:20.820
So we're really excited
to share this with you.

00:24:20.820 --> 00:24:23.000
And we would love to
hear your feedback

00:24:23.000 --> 00:24:25.850
on what more you would like
to see around these design

00:24:25.850 --> 00:24:27.850
guidelines.

00:24:27.850 --> 00:24:30.060
So you can get this app
today on the Play Store.

00:24:30.060 --> 00:24:32.610
Or you can also get it
as part of the Unity SDK.

00:24:36.450 --> 00:24:38.120
The other thing I
want to call out,

00:24:38.120 --> 00:24:40.070
continuing on the
theme of accessibility,

00:24:40.070 --> 00:24:43.310
is ARCore is available
with our SDKs

00:24:43.310 --> 00:24:48.170
on Unity, Unreal, Android, and
iOS, like we had spoken about.

00:24:48.170 --> 00:24:49.730
We want to make it
super easy for you

00:24:49.730 --> 00:24:52.040
to work on the platform
of your choice,

00:24:52.040 --> 00:24:56.510
and make it super simple
for you to get started.

00:24:56.510 --> 00:24:59.960
Today, ARCore is available
on over 250 million devices.

00:24:59.960 --> 00:25:02.330
And that number continues
to grow as we speak.

00:25:05.115 --> 00:25:06.740
I just want to bring
this back together

00:25:06.740 --> 00:25:09.500
with a couple of examples
to illustrate what

00:25:09.500 --> 00:25:11.710
we have been talking about.

00:25:11.710 --> 00:25:14.710
The first two here,
"Jurassic World Alive"

00:25:14.710 --> 00:25:18.040
and "Walking Dead",
are examples where

00:25:18.040 --> 00:25:23.200
they combine the power of ARCore
and the Google Maps platform

00:25:23.200 --> 00:25:25.690
to build amazing
content and gaming

00:25:25.690 --> 00:25:27.350
experiences to the real world.

00:25:30.220 --> 00:25:33.090
The other one is one of
my personal favorites

00:25:33.090 --> 00:25:35.610
from Tender Claws,
which is about how

00:25:35.610 --> 00:25:39.580
do you use players' facial
expressions to control

00:25:39.580 --> 00:25:42.100
the game-play and
use the emotions

00:25:42.100 --> 00:25:44.590
and expressions to
control virtual objects

00:25:44.590 --> 00:25:47.590
within the game.

00:25:47.590 --> 00:25:49.330
And while you're
at GDC this week,

00:25:49.330 --> 00:25:51.190
I would highly encourage
you to go check

00:25:51.190 --> 00:25:56.680
out the ARCore booth, where we
have an escape the room AR demo

00:25:56.680 --> 00:25:58.540
that is super
compelling and gives you

00:25:58.540 --> 00:26:01.142
a flavor for what
magic happens when

00:26:01.142 --> 00:26:03.100
you connect the digital
and the physical world.

00:26:08.800 --> 00:26:11.500
And we have everything
you need to get started,

00:26:11.500 --> 00:26:14.020
from documentation to Codelabs.

00:26:14.020 --> 00:26:18.400
So we encourage you to go
to developers.google.com/AR

00:26:18.400 --> 00:26:21.290
to start building
your AR game today.

00:26:21.290 --> 00:26:23.900
And I'll finally
end on this note.

00:26:23.900 --> 00:26:26.690
Historically, if you have
looked at every new emerging

00:26:26.690 --> 00:26:29.120
technology, you
as game developers

00:26:29.120 --> 00:26:32.780
have been at the forefront
of pushing the tech forward.

00:26:32.780 --> 00:26:35.240
And we think it's going
to be the same with AR.

00:26:35.240 --> 00:26:37.280
So we on the ARCore
team are really

00:26:37.280 --> 00:26:40.370
excited to see what are
the compelling experiences

00:26:40.370 --> 00:26:42.480
that you're going to
build with ARCore.

00:26:42.480 --> 00:26:42.980
Thank you.

00:26:45.710 --> 00:26:46.710
LISA TAKEHANA: Hi there.

00:26:46.710 --> 00:26:50.790
My name is Lisa Takehana, and
I'm a game designer at Google.

00:26:50.790 --> 00:26:52.460
And today, I'm
going to be talking

00:26:52.460 --> 00:26:54.650
about a different kind
of game that you can

00:26:54.650 --> 00:26:57.450
play on your mobile devices.

00:26:57.450 --> 00:27:00.260
And it's a fairly
new industry still.

00:27:00.260 --> 00:27:02.300
And that's voice games.

00:27:02.300 --> 00:27:04.100
And specifically,
I'm going to be

00:27:04.100 --> 00:27:07.200
talking about designing voice
games for the Google Assistant

00:27:07.200 --> 00:27:07.700
platform.

00:27:10.590 --> 00:27:12.630
In the next 15
minutes, I'm going

00:27:12.630 --> 00:27:15.300
to be talking about why
we think voice games are

00:27:15.300 --> 00:27:19.263
on the rise, and the potential
we see in this market.

00:27:19.263 --> 00:27:21.430
And then we're going to be
sharing a couple of games

00:27:21.430 --> 00:27:24.110
that we built at Google.

00:27:24.110 --> 00:27:27.440
And lastly, we want to
share a lot of the learnings

00:27:27.440 --> 00:27:31.970
that we went through when we
were designing these games.

00:27:31.970 --> 00:27:34.100
Again, it's a
fairly new industry,

00:27:34.100 --> 00:27:36.050
and there's still
a lot of unknowns.

00:27:36.050 --> 00:27:37.550
And there's a lot
of trial and error

00:27:37.550 --> 00:27:39.425
when we were
developing these games.

00:27:42.120 --> 00:27:45.450
Let me introduce you to
the Google Assistant, which

00:27:45.450 --> 00:27:49.530
is Google's virtual helper
controlled by your voice.

00:27:49.530 --> 00:27:53.500
The devices you see here have
the Google Assistant built in,

00:27:53.500 --> 00:27:56.640
which means it has a
microphone for voice input,

00:27:56.640 --> 00:28:01.000
and also speaker for
the devices to respond.

00:28:01.000 --> 00:28:04.320
These devices are collectively
known in the industry

00:28:04.320 --> 00:28:06.600
as smart speakers.

00:28:06.600 --> 00:28:09.450
So in 2016, it began
with the Google Home,

00:28:09.450 --> 00:28:13.200
which is the Google Assistant
with the speaker only.

00:28:13.200 --> 00:28:15.660
But then it expanded to
other types of hardware

00:28:15.660 --> 00:28:18.880
depending on
different user needs.

00:28:18.880 --> 00:28:21.390
So for example, we have
the Google Home Mini,

00:28:21.390 --> 00:28:24.030
which is a smaller version
of the Google Home.

00:28:24.030 --> 00:28:26.430
And this one has a
better price point.

00:28:26.430 --> 00:28:28.680
And then we also have
the Google Home Max,

00:28:28.680 --> 00:28:33.150
which is a larger version
with better speakers.

00:28:33.150 --> 00:28:36.180
Last year, we also introduced
the Google Home Hub,

00:28:36.180 --> 00:28:39.450
which is the Google Assistant
with a visual display built

00:28:39.450 --> 00:28:41.265
in, but still powered
by your voice.

00:28:45.170 --> 00:28:47.350
And as with any new
media technology,

00:28:47.350 --> 00:28:51.040
it takes some time for
users to get used to them.

00:28:51.040 --> 00:28:53.080
Here's a graph
showing adoption rates

00:28:53.080 --> 00:28:55.810
of all the different types
of new media that came out.

00:28:55.810 --> 00:28:58.030
So for example,
we have cable TV,

00:28:58.030 --> 00:29:03.010
smartphones, and internet
over the past half a century.

00:29:03.010 --> 00:29:06.730
And then you can see on
the bottom right here,

00:29:06.730 --> 00:29:08.380
those are smart speakers.

00:29:08.380 --> 00:29:12.430
And you can still see that it's
in pretty early stages in terms

00:29:12.430 --> 00:29:13.450
of user adoption.

00:29:16.810 --> 00:29:20.740
And what are these users doing
with these smart speakers?

00:29:20.740 --> 00:29:22.780
Well, based on this
research by Adobe,

00:29:22.780 --> 00:29:25.600
we know that most
users are using them

00:29:25.600 --> 00:29:26.720
for things like media.

00:29:26.720 --> 00:29:29.320
So maybe listening
to music or listening

00:29:29.320 --> 00:29:31.060
to a podcast or the news.

00:29:31.060 --> 00:29:32.890
But we also know
that they're using it

00:29:32.890 --> 00:29:34.780
for things like productivity.

00:29:34.780 --> 00:29:37.420
So those are going to be things
like checking your calendar,

00:29:37.420 --> 00:29:39.520
asking for the weather.

00:29:39.520 --> 00:29:42.820
But we also know that there
is a fairly large user

00:29:42.820 --> 00:29:46.850
base of people who are
asking for fun things.

00:29:46.850 --> 00:29:49.870
So for example, you can
ask the Google Assistant

00:29:49.870 --> 00:29:52.940
what its favorite color is, what
kind of food it likes to eat,

00:29:52.940 --> 00:29:55.900
what kind of animal it likes.

00:29:55.900 --> 00:30:00.070
And we also have games available
on the Google Assistant

00:30:00.070 --> 00:30:00.870
that you can play.

00:30:04.140 --> 00:30:06.930
And these are really great
platforms for multiplayer

00:30:06.930 --> 00:30:09.480
because they're
designed to be placed

00:30:09.480 --> 00:30:11.560
in communal areas in the home.

00:30:11.560 --> 00:30:15.350
So this is a really great device
that you can put in, let's say,

00:30:15.350 --> 00:30:17.560
a living room or a kitchen.

00:30:17.560 --> 00:30:20.340
So this is a really great
multiplayer platform

00:30:20.340 --> 00:30:22.470
for family game
night or if you want

00:30:22.470 --> 00:30:24.360
to play games with your
friends and roommates

00:30:24.360 --> 00:30:25.190
on a Friday night.

00:30:27.990 --> 00:30:30.420
We built a couple
of multiplayer games

00:30:30.420 --> 00:30:33.900
that we're showcasing here
using the Google Assistant.

00:30:33.900 --> 00:30:37.950
The first one is a trivia game
called "Are You Feeling Lucky?"

00:30:37.950 --> 00:30:41.160
And this is an experience
that's available on all Google

00:30:41.160 --> 00:30:43.200
Assistant surfaces,
but it's best

00:30:43.200 --> 00:30:46.080
played on the Home Hub,
which we launched last year,

00:30:46.080 --> 00:30:48.160
with a visual display.

00:30:48.160 --> 00:30:51.690
And in this trivia game, you
have the Google Assistant

00:30:51.690 --> 00:30:56.520
asking the users questions and
acting as a game show host.

00:30:56.520 --> 00:30:58.950
And you have this
back-and-forth interaction.

00:30:58.950 --> 00:31:01.800
And, of course, we also
have a [? class of ?] game,

00:31:01.800 --> 00:31:04.140
"Mad Libs", that's also
available on the Google

00:31:04.140 --> 00:31:07.550
Assistant.

00:31:07.550 --> 00:31:10.370
So again, fairly new industry.

00:31:10.370 --> 00:31:12.470
There is a lot of
trial and error.

00:31:12.470 --> 00:31:14.630
And there was a lot
of growing pains

00:31:14.630 --> 00:31:17.870
that came about when we were
trying to design these games.

00:31:17.870 --> 00:31:20.660
There aren't a lot of voice
games out there still.

00:31:20.660 --> 00:31:23.660
And so we wanted to share
some of the tips and tricks

00:31:23.660 --> 00:31:26.930
that we learned while we were
developing these games so

00:31:26.930 --> 00:31:29.510
that you can take
these learnings home

00:31:29.510 --> 00:31:31.565
and try to build your
own exciting voice games.

00:31:35.940 --> 00:31:38.810
So, as with any
game, you first want

00:31:38.810 --> 00:31:42.350
to think about what the core
mechanic of your game is.

00:31:42.350 --> 00:31:45.750
Simply put, what kind of
game are you building?

00:31:45.750 --> 00:31:50.150
But when you have your voice as
the controller and the feedback

00:31:50.150 --> 00:31:53.330
being audio only, this
can be pretty tricky

00:31:53.330 --> 00:31:55.067
and pretty challenging.

00:31:58.200 --> 00:32:01.070
So for example, games
like trivia and quizzes

00:32:01.070 --> 00:32:04.910
are a little bit more
intuitive to build for voice

00:32:04.910 --> 00:32:07.160
because there's less
information that users

00:32:07.160 --> 00:32:10.080
need to retain while
they're playing these games.

00:32:10.080 --> 00:32:11.720
So with "Are You
Feeling Lucky?",

00:32:11.720 --> 00:32:14.750
the trivia game where you have
the Google Assistant playing

00:32:14.750 --> 00:32:17.540
as the host, the
only information

00:32:17.540 --> 00:32:19.235
that the users
really need to retain

00:32:19.235 --> 00:32:23.390
in this back-and-forth exchange
is probably just the question

00:32:23.390 --> 00:32:25.470
and maybe the answer options.

00:32:25.470 --> 00:32:27.020
The progression is linear.

00:32:27.020 --> 00:32:30.170
We're not really introducing
a lot of complex characters.

00:32:30.170 --> 00:32:31.730
We don't really
have crazy worlds

00:32:31.730 --> 00:32:33.890
that you're
exploring, which makes

00:32:33.890 --> 00:32:37.928
it really easy for players to
track even without visuals.

00:32:37.928 --> 00:32:39.470
On the other hand,
when you're trying

00:32:39.470 --> 00:32:42.580
to build a game like, let's say,
chess, where it's very visual

00:32:42.580 --> 00:32:46.832
and you want to check all
the pieces, or an RPG,

00:32:46.832 --> 00:32:48.290
you might have a
lot of characters.

00:32:48.290 --> 00:32:50.450
And those characters
might have stats.

00:32:50.450 --> 00:32:52.388
And you might have all
these different worlds

00:32:52.388 --> 00:32:54.680
that you're exploring and
all these objects that you're

00:32:54.680 --> 00:32:58.340
interacting with, which makes
it a little bit trickier when

00:32:58.340 --> 00:33:02.030
players don't have a visual
reference in front of them.

00:33:02.030 --> 00:33:05.527
I'm not discouraging you from
designing these types of games.

00:33:05.527 --> 00:33:07.610
I'm just saying that it
could be a little bit more

00:33:07.610 --> 00:33:11.420
challenging without maybe
asking the players to take

00:33:11.420 --> 00:33:12.540
notes along the way.

00:33:17.140 --> 00:33:20.050
Setting the stage
or the narrative

00:33:20.050 --> 00:33:22.600
plays a really crucial
part in any game.

00:33:22.600 --> 00:33:25.090
But there's another
layer to this challenge

00:33:25.090 --> 00:33:26.920
when you're designing
a voice game,

00:33:26.920 --> 00:33:30.370
and that's figuring out
what role the narrator plays

00:33:30.370 --> 00:33:33.290
in your game.

00:33:33.290 --> 00:33:35.410
So when I mentioned
the trivia game,

00:33:35.410 --> 00:33:38.600
again, we have this game
show host type of game.

00:33:38.600 --> 00:33:41.950
And the Google Assistant
is your game show host.

00:33:41.950 --> 00:33:44.920
Inversely, if you have a game
like a Halloween-themed game,

00:33:44.920 --> 00:33:47.920
then maybe your narrator
is a ghost story zombie.

00:33:47.920 --> 00:33:50.950
If you have a Christmas
game, maybe it's Santa Claus.

00:33:50.950 --> 00:33:52.930
Either way, you
have this character

00:33:52.930 --> 00:33:55.450
who is driving the
narrative of your game.

00:33:55.450 --> 00:33:58.570
And this is the character
that the players

00:33:58.570 --> 00:34:01.330
are going to be interacting
with throughout the game.

00:34:01.330 --> 00:34:04.840
This is the character that will
be leading you and revealing

00:34:04.840 --> 00:34:06.820
plot points in the game.

00:34:06.820 --> 00:34:10.210
And identifying who
this narrator is

00:34:10.210 --> 00:34:12.370
and giving this
narrator a character

00:34:12.370 --> 00:34:15.520
will be the key to building
a really cohesive world

00:34:15.520 --> 00:34:16.719
for your audio game.

00:34:21.730 --> 00:34:24.400
The third tip is,
now that you have

00:34:24.400 --> 00:34:26.770
the world and the
character that drives it,

00:34:26.770 --> 00:34:29.650
you want to start writing
the script or the dialogue

00:34:29.650 --> 00:34:31.239
that the characters
and the players

00:34:31.239 --> 00:34:32.755
will be reciting back and forth.

00:34:36.340 --> 00:34:39.460
As I mentioned earlier, because
the player input is voice

00:34:39.460 --> 00:34:42.639
and the output is audio,
the key to writing

00:34:42.639 --> 00:34:45.520
a successful dialogue
is keeping it simple so

00:34:45.520 --> 00:34:47.980
that players can retain
all that information

00:34:47.980 --> 00:34:50.020
and keep track of the game.

00:34:50.020 --> 00:34:53.560
The best way for you to tell
if a game is too complex

00:34:53.560 --> 00:34:56.080
is by prototyping
by role-playing.

00:34:56.080 --> 00:34:58.570
So you can ask someone
to sit down and read

00:34:58.570 --> 00:35:00.670
the lines of the narrator.

00:35:00.670 --> 00:35:02.860
And the player can try
to respond naturally

00:35:02.860 --> 00:35:05.420
as they can to see if there
are any holes in your script

00:35:05.420 --> 00:35:07.700
or your dialogue.

00:35:07.700 --> 00:35:10.670
If you see that the
player is getting

00:35:10.670 --> 00:35:12.470
stuck in parts of
the game, you can

00:35:12.470 --> 00:35:14.810
tell that maybe your
game is too complex

00:35:14.810 --> 00:35:17.810
and that the dialogue is
not quite written well

00:35:17.810 --> 00:35:18.830
as you like it to be.

00:35:23.050 --> 00:35:26.700
So at this point in your voice
game, the only thing you have

00:35:26.700 --> 00:35:30.210
is dialogue, which
is a little bit dull.

00:35:30.210 --> 00:35:32.820
So we want to be adding a
little bit more richness

00:35:32.820 --> 00:35:34.080
into your game.

00:35:34.080 --> 00:35:36.220
And you can really
accomplish this, of course,

00:35:36.220 --> 00:35:39.320
because it's an audio
game by sound design.

00:35:39.320 --> 00:35:42.070
And we split this up into
two different categories.

00:35:42.070 --> 00:35:43.800
One is background music.

00:35:43.800 --> 00:35:46.260
And this could be
a musical track

00:35:46.260 --> 00:35:49.150
or it could be something
that's more ambient.

00:35:49.150 --> 00:35:51.720
So for example, if you
have your Halloween game,

00:35:51.720 --> 00:35:55.680
maybe it's just wind or water
or something of that sort.

00:35:55.680 --> 00:35:57.870
And then you also
have sound effects.

00:35:57.870 --> 00:36:01.080
So now you want to be
adding the rustling leaves

00:36:01.080 --> 00:36:02.970
and things like that.

00:36:02.970 --> 00:36:06.600
You could also use the sound
effects to not only identify

00:36:06.600 --> 00:36:09.540
objects that are in your
game, but also use them

00:36:09.540 --> 00:36:12.970
as player cues as well.

00:36:12.970 --> 00:36:16.360
By itself, again, the dialogue
could feel really dull.

00:36:16.360 --> 00:36:18.850
So you want to be
adding these layers in

00:36:18.850 --> 00:36:21.625
to add a lot more richness into
the world that you're building.

00:36:25.020 --> 00:36:29.080
And last but not least
is tip number five.

00:36:29.080 --> 00:36:32.140
Make sure you don't lose
track of the bigger picture.

00:36:32.140 --> 00:36:34.420
As a game designer,
this is something

00:36:34.420 --> 00:36:36.070
that I can get stuck with.

00:36:36.070 --> 00:36:38.260
When I'm really hyper
focused on the details,

00:36:38.260 --> 00:36:41.240
sometimes I forget
to take a step back.

00:36:41.240 --> 00:36:43.240
But really, you want to
be looking at the bigger

00:36:43.240 --> 00:36:45.010
picture of your audio game.

00:36:47.570 --> 00:36:50.270
Some of you may be
familiar with this chart.

00:36:50.270 --> 00:36:52.110
This is the player
interest curve.

00:36:52.110 --> 00:36:54.470
And this is a reference
that game designers

00:36:54.470 --> 00:36:57.800
use to ensure that players
stay engaged from beginning

00:36:57.800 --> 00:36:59.400
to end of a game.

00:36:59.400 --> 00:37:01.580
So when you first
enter the game,

00:37:01.580 --> 00:37:04.490
you have kind of a
really fun introduction

00:37:04.490 --> 00:37:06.488
that gets players
hooked in your game.

00:37:06.488 --> 00:37:08.030
And, of course, you
want to make sure

00:37:08.030 --> 00:37:10.610
that players end on a
high note so that they

00:37:10.610 --> 00:37:13.270
feel like there is
a payoff at the end,

00:37:13.270 --> 00:37:17.750
and that they didn't waste
time investing in this game.

00:37:17.750 --> 00:37:19.490
The difficult part
is making sure

00:37:19.490 --> 00:37:22.400
that the players are engaged
in the middle portion

00:37:22.400 --> 00:37:23.880
of your game.

00:37:23.880 --> 00:37:26.420
So you can't just have
a really great beginning

00:37:26.420 --> 00:37:27.950
and then just flatten out.

00:37:27.950 --> 00:37:30.800
Of course, you want to make sure
that the player engagement is

00:37:30.800 --> 00:37:33.805
on an upward trajectory
until they reach the payoff.

00:37:37.450 --> 00:37:41.750
Something that's challenging
in voice games are errors.

00:37:41.750 --> 00:37:45.310
So the thing about using
your voice as a controller

00:37:45.310 --> 00:37:49.000
is that players can
really say anything.

00:37:49.000 --> 00:37:51.340
Some examples of how
this might happen

00:37:51.340 --> 00:37:54.280
is you might have a true or
false question in a trivia

00:37:54.280 --> 00:37:56.530
game, and they might
say something that's

00:37:56.530 --> 00:37:58.390
completely off the rails.

00:37:58.390 --> 00:38:01.660
You want to be thinking about
all these different edge cases

00:38:01.660 --> 00:38:04.000
and be able to
design around them.

00:38:04.000 --> 00:38:06.470
And sometimes it's not
even the player's fault.

00:38:06.470 --> 00:38:10.330
Sometimes they might be trying
to test all the different edge

00:38:10.330 --> 00:38:11.350
cases in the game.

00:38:11.350 --> 00:38:13.840
But really, it could be that
there's too much background

00:38:13.840 --> 00:38:14.990
noise.

00:38:14.990 --> 00:38:18.730
And if the game is taking
in all this other audio,

00:38:18.730 --> 00:38:22.780
you want to think about what
this user experience is.

00:38:22.780 --> 00:38:27.280
I find it pretty frustrating
when the Google Assistant says,

00:38:27.280 --> 00:38:29.950
I didn't catch that,
or I don't understand.

00:38:29.950 --> 00:38:32.200
So we want to minimize
this disruption

00:38:32.200 --> 00:38:34.660
if anything like this happens.

00:38:34.660 --> 00:38:36.850
We need to design
around this to make sure

00:38:36.850 --> 00:38:39.040
that players stay engaged
throughout the game,

00:38:39.040 --> 00:38:41.960
like I showed you in the
player interest curve.

00:38:44.700 --> 00:38:47.190
So to recap, here are
the five design tips

00:38:47.190 --> 00:38:49.090
I walked you through today.

00:38:49.090 --> 00:38:52.140
The first one was defining
the core mechanic of the game.

00:38:52.140 --> 00:38:54.040
And I brought up two
examples of games.

00:38:54.040 --> 00:38:56.940
So trivia games
and maybe an RPG.

00:38:56.940 --> 00:38:59.150
Think about how
challenging your game

00:38:59.150 --> 00:39:02.350
is to device on
this voice platform.

00:39:02.350 --> 00:39:04.920
The second one is
setting the stage

00:39:04.920 --> 00:39:09.880
or identifying who the
narrator of your voice game is.

00:39:09.880 --> 00:39:13.660
The third one is writing a
dialogue between the Google

00:39:13.660 --> 00:39:17.820
Assistant, or the
narrator, and the players.

00:39:17.820 --> 00:39:21.580
And also, you want to be
prototyping by role-playing

00:39:21.580 --> 00:39:24.670
to make sure there aren't
any holes in your script.

00:39:24.670 --> 00:39:27.640
The fourth one is
layering in sound design

00:39:27.640 --> 00:39:32.230
to the dialogue with background
music and sound effects.

00:39:32.230 --> 00:39:35.080
And lastly, we want to
make sure as designers

00:39:35.080 --> 00:39:37.240
that we're keeping an
eye on the bigger picture

00:39:37.240 --> 00:39:39.670
to ensure that users stay
engaged throughout the game.

00:39:42.610 --> 00:39:46.170
So now that you have some tips
that you can start off with,

00:39:46.170 --> 00:39:47.970
you can design your
own voice games

00:39:47.970 --> 00:39:50.280
using something called
Actions on Google.

00:39:50.280 --> 00:39:53.730
You can follow this link
and also find more resources

00:39:53.730 --> 00:39:57.090
that you can use to
kickstart your voice game.

00:39:57.090 --> 00:39:58.530
Next, we're going
to switch gears,

00:39:58.530 --> 00:40:02.355
and Stewart's going to share
how you can grow with Firebase.

00:40:02.355 --> 00:40:03.730
STEWART MILES:
I'm Stewart Miles.

00:40:03.730 --> 00:40:06.770
And I'm a lead on the
Firebase for Games team.

00:40:06.770 --> 00:40:10.700
And I'm here to talk about
growing your game in Firebase.

00:40:10.700 --> 00:40:12.320
So what is Firebase?

00:40:12.320 --> 00:40:13.130
Hands up.

00:40:13.130 --> 00:40:15.410
Anyone know what
Firebase is in the room?

00:40:15.410 --> 00:40:16.310
Oh, wow.

00:40:16.310 --> 00:40:18.060
We've got a lot of
Firebase users in here.

00:40:18.060 --> 00:40:19.600
That's really awesome.

00:40:19.600 --> 00:40:22.650
So Firebase is a mobile
development platform

00:40:22.650 --> 00:40:25.540
from Google that extends
Google Cloud Platform.

00:40:25.540 --> 00:40:27.720
Firebase products are
designed so that you do not

00:40:27.720 --> 00:40:30.930
need a custom server between
your game clients and Google

00:40:30.930 --> 00:40:31.950
Cloud.

00:40:31.950 --> 00:40:34.620
So you can build many
connected games primarily

00:40:34.620 --> 00:40:36.050
by writing client-side code.

00:40:36.050 --> 00:40:38.530
It's pretty cool.

00:40:38.530 --> 00:40:43.080
We have 1 and 1/2 million
monthly active apps

00:40:43.080 --> 00:40:44.750
currently using Firebase.

00:40:44.750 --> 00:40:48.070
And this includes everything
from small one-person startups,

00:40:48.070 --> 00:40:50.730
all the way up to
massive enterprises.

00:40:50.730 --> 00:40:52.710
They're all relying on
Firebase to just make

00:40:52.710 --> 00:40:55.210
their lives a lot easier.

00:40:55.210 --> 00:40:56.980
And this also includes
game developers.

00:40:56.980 --> 00:40:58.700
So thank you to all
the game developers,

00:40:58.700 --> 00:41:01.033
including you guys in this
room, for taking that journey

00:41:01.033 --> 00:41:02.840
with us.

00:41:02.840 --> 00:41:06.050
So Firebase supports iOS,
Android, and the web.

00:41:06.050 --> 00:41:09.960
And we also provide admin
SDKs for your servers.

00:41:09.960 --> 00:41:12.930
I'll walk you through how
Firebase can help along

00:41:12.930 --> 00:41:15.450
with each step of the
game development process,

00:41:15.450 --> 00:41:20.630
using our demo game
called Mecha Hamster.

00:41:20.630 --> 00:41:24.320
So we wanted to just build
a really, really simple game

00:41:24.320 --> 00:41:27.770
where the player navigates
mazes with a hamster ball.

00:41:27.770 --> 00:41:29.940
They start at the
starting point.

00:41:29.940 --> 00:41:32.120
They try and navigate
through some traps and things

00:41:32.120 --> 00:41:32.810
like that.

00:41:32.810 --> 00:41:33.810
And they get to the end.

00:41:36.880 --> 00:41:38.670
After we had a rough
idea for the design,

00:41:38.670 --> 00:41:41.390
we decided to start
building the game.

00:41:41.390 --> 00:41:44.880
So we chose the Unity SDK.

00:41:44.880 --> 00:41:48.140
And Unity is the engine as
a whole to develop the game.

00:41:48.140 --> 00:41:51.730
However, Firebase integrates
easily into iOS or Android

00:41:51.730 --> 00:41:55.370
games, whether you're a C++
developer and you've got a C++

00:41:55.370 --> 00:41:56.810
engine, or Unity.

00:41:56.810 --> 00:41:59.420
As of today also, if
you're a C++ developer,

00:41:59.420 --> 00:42:02.240
we've open sourced C++ SDK.

00:42:02.240 --> 00:42:05.000
So you'll have the option to
integrate that into your games.

00:42:05.000 --> 00:42:07.460
This provides visibility
into your code,

00:42:07.460 --> 00:42:09.760
enables control over
fixes and improvements,

00:42:09.760 --> 00:42:12.500
and allows you to [? port ?]
functionality to new platforms

00:42:12.500 --> 00:42:14.810
as well.

00:42:14.810 --> 00:42:17.870
So we wanted players in our game
to be to create new content,

00:42:17.870 --> 00:42:19.100
just like game designers.

00:42:19.100 --> 00:42:22.070
So we started off by building
a level editor in the game that

00:42:22.070 --> 00:42:24.080
enables you to design maps.

00:42:24.080 --> 00:42:26.570
And it just saved
data to local storage.

00:42:26.570 --> 00:42:29.000
This was great, but
it didn't enable

00:42:29.000 --> 00:42:31.370
us to have data
shared between players

00:42:31.370 --> 00:42:32.660
when we deploy the game.

00:42:32.660 --> 00:42:35.000
So we decided to use the
Firebase real-time database

00:42:35.000 --> 00:42:36.620
to store the map data.

00:42:36.620 --> 00:42:39.200
Since the real-time database
can also notify clients

00:42:39.200 --> 00:42:41.355
when data changes,
it would be possible

00:42:41.355 --> 00:42:43.730
for us to add collaborative
editing features, like Google

00:42:43.730 --> 00:42:45.140
Docs, in the future.

00:42:45.140 --> 00:42:49.440
So next, we configured our
Firebase project in Unity.

00:42:49.440 --> 00:42:50.060
We designed.

00:42:50.060 --> 00:42:53.840
We navigated to a web browser,
went to the Firebase console,

00:42:53.840 --> 00:42:56.420
created a project.

00:42:56.420 --> 00:42:59.790
And a few seconds later,
we added the Unity app

00:42:59.790 --> 00:43:00.630
to the project.

00:43:00.630 --> 00:43:02.920
You can add multiple
apps to a project,

00:43:02.920 --> 00:43:07.030
allowing multiple SKUs of a game
to share the same game data.

00:43:07.030 --> 00:43:08.670
We wanted to target
iOS and Android,

00:43:08.670 --> 00:43:11.710
so we registered in that for
both platforms really easily,

00:43:11.710 --> 00:43:18.560
downloaded the configuration
files, downloaded the SDK,

00:43:18.560 --> 00:43:22.100
and then imported the SDK, the
Firebase real-time database

00:43:22.100 --> 00:43:25.150
plugin, into our Mecha
Hamster project in Unity.

00:43:25.150 --> 00:43:26.985
Here are the files coming in.

00:43:26.985 --> 00:43:29.360
And then we added the config
files to associate the Unity

00:43:29.360 --> 00:43:31.210
project with the
Firebase project

00:43:31.210 --> 00:43:33.990
that we had set up in
the web console earlier.

00:43:33.990 --> 00:43:36.380
So not that many steps
to get to that point.

00:43:36.380 --> 00:43:40.560
We then wrote in some code to
store on the map representation

00:43:40.560 --> 00:43:43.770
in Json, so that we
can then upload that

00:43:43.770 --> 00:43:45.270
into the real-time database.

00:43:45.270 --> 00:43:47.850
The data was then
immediately visible

00:43:47.850 --> 00:43:50.188
in the Firebase console,
as you can see here.

00:43:50.188 --> 00:43:52.230
At this point, it was
possible for game designers

00:43:52.230 --> 00:43:57.180
to author new maps and
ship those to users

00:43:57.180 --> 00:44:00.090
without republishing the game.

00:44:00.090 --> 00:44:02.100
We then used
Firebase's rule system

00:44:02.100 --> 00:44:04.200
to protect access
to the map data.

00:44:04.200 --> 00:44:07.230
This prevented
players from writing

00:44:07.230 --> 00:44:10.920
to designer-created maps without
building a custom game server.

00:44:10.920 --> 00:44:15.120
We didn't have to put a server
between Firebase's back-end

00:44:15.120 --> 00:44:17.310
and each game client.

00:44:17.310 --> 00:44:19.530
As I mentioned before,
Firebase's real-time database

00:44:19.530 --> 00:44:20.780
can be monitored by clients.

00:44:20.780 --> 00:44:23.750
So it's possible to build
asynchronous multiplayer games

00:44:23.750 --> 00:44:25.448
using this scheme.

00:44:25.448 --> 00:44:27.990
But if you're going to be able
to real-time multiplayer game,

00:44:27.990 --> 00:44:31.100
like a MOBA, please build
your own game server.

00:44:34.460 --> 00:44:37.290
And then, obviously, we wanted
to be able to associate user

00:44:37.290 --> 00:44:39.780
data with user accounts.

00:44:39.780 --> 00:44:42.200
So in this case, we're
really interested in users

00:44:42.200 --> 00:44:43.470
being able to share maps.

00:44:43.470 --> 00:44:47.370
So we had users sign in
at the start of the game.

00:44:47.370 --> 00:44:49.140
Having users sign
immediately also

00:44:49.140 --> 00:44:51.090
enabled us to add
other player data,

00:44:51.090 --> 00:44:53.190
like high scores and
things like that,

00:44:53.190 --> 00:44:56.920
without adding friction
later on in the game.

00:44:56.920 --> 00:45:00.340
So handling user sign-in
yourself can be a lot of work.

00:45:00.340 --> 00:45:03.040
So we use Firebase
Authentication for sign-in.

00:45:03.040 --> 00:45:06.730
Authentication supports a range
of built-in identity providers,

00:45:06.730 --> 00:45:09.690
including email and
things like that.

00:45:09.690 --> 00:45:12.090
And now, as of a
few days ago, we

00:45:12.090 --> 00:45:15.760
added support for Game Center
on iOS in our gaming SDKs.

00:45:15.760 --> 00:45:18.480
So if we wanted to add
other providers later,

00:45:18.480 --> 00:45:21.720
we could also use custom
identity providers.

00:45:21.720 --> 00:45:24.200
So you could integrate
any identity provider

00:45:24.200 --> 00:45:27.500
that you could think of, just
with a little bit of work.

00:45:27.500 --> 00:45:29.170
So once a player
was logged in, it

00:45:29.170 --> 00:45:31.660
was possible to add
support for players

00:45:31.660 --> 00:45:33.610
to create maps and share maps.

00:45:33.610 --> 00:45:35.410
Then we had a way to store--

00:45:35.410 --> 00:45:37.940
we had a way to associate
data with players.

00:45:37.940 --> 00:45:40.360
So we built a leaderboard
where players could also

00:45:40.360 --> 00:45:43.370
post high scores.

00:45:43.370 --> 00:45:45.620
We ended up using
Firebase's open source

00:45:45.620 --> 00:45:49.010
Unity leaderboard API to add
leaderboards in the game.

00:45:49.010 --> 00:45:52.850
It's an open source project that
you can grab from our website.

00:45:52.850 --> 00:45:56.765
All we had to do was import the
Unity plug-in into our project.

00:45:56.765 --> 00:45:58.390
And then we could
start posting scores.

00:45:58.390 --> 00:46:00.340
It was really easy.

00:46:00.340 --> 00:46:02.550
So since the Unity
plug-in was open source,

00:46:02.550 --> 00:46:05.370
we also extended it
to support replays.

00:46:05.370 --> 00:46:08.580
So in this case, we've got a
really bad player who just sits

00:46:08.580 --> 00:46:10.390
onto one side of the screen.

00:46:10.390 --> 00:46:13.590
And we've got the
replay happening

00:46:13.590 --> 00:46:17.710
from the last high score
that happened in the game.

00:46:17.710 --> 00:46:21.690
So if you've got stuff like
where users are posting data

00:46:21.690 --> 00:46:23.650
and things like
that, you likely want

00:46:23.650 --> 00:46:25.780
to be able to clean
it, or potentially

00:46:25.780 --> 00:46:27.790
run some server-side
action in response

00:46:27.790 --> 00:46:29.840
to what a player is doing.

00:46:29.840 --> 00:46:31.530
So in this case,
Firebase integrates

00:46:31.530 --> 00:46:32.770
with Google Cloud Functions.

00:46:32.770 --> 00:46:36.975
And we use this to clean up
old high scores, old replays,

00:46:36.975 --> 00:46:37.850
and things like that.

00:46:37.850 --> 00:46:42.430
We could also do things
like potentially validate

00:46:42.430 --> 00:46:45.480
whether or not a
user is cheating,

00:46:45.480 --> 00:46:48.750
or handle purchases
and things like that

00:46:48.750 --> 00:46:52.510
if we wanted to, all
using Cloud Functions.

00:46:52.510 --> 00:46:54.580
So we wanted to make
sure our game would

00:46:54.580 --> 00:46:57.090
work across a whole range
of devices when it shipped.

00:46:57.090 --> 00:46:59.440
Testing across a huge
number of devices,

00:46:59.440 --> 00:47:01.180
like Android and iOS
devices, is a lot

00:47:01.180 --> 00:47:03.730
of work for a small team,
especially when the game is

00:47:03.730 --> 00:47:06.090
changing rapidly.

00:47:06.090 --> 00:47:08.070
So we decided to
use Firebase Test

00:47:08.070 --> 00:47:11.370
Lab to run our game on physical
Android and iOS devices,

00:47:11.370 --> 00:47:13.712
connected to machines in
Google's data centers.

00:47:13.712 --> 00:47:15.420
Initially, we didn't
write any test code.

00:47:15.420 --> 00:47:17.670
We just uploaded
the game and let

00:47:17.670 --> 00:47:21.150
Test Labs, Robo, or a monkey
tester randomly tap the screen

00:47:21.150 --> 00:47:23.760
and attempt to crash the game.

00:47:23.760 --> 00:47:29.250
So a typical monkey tester would
just randomly tap the screen.

00:47:29.250 --> 00:47:31.020
In the case of Robo
Test, it will actually

00:47:31.020 --> 00:47:34.060
identify Android UI
elements and tap those.

00:47:34.060 --> 00:47:37.800
But now, we have [INAUDIBLE]
assisted actions.

00:47:37.800 --> 00:47:40.230
And so this will actually
use computer vision

00:47:40.230 --> 00:47:44.070
to determine where the UI
elements are in the game.

00:47:44.070 --> 00:47:46.050
On the left screen,
you can see random

00:47:46.050 --> 00:47:47.220
pressing all over the place.

00:47:47.220 --> 00:47:48.470
That's our old system.

00:47:48.470 --> 00:47:50.700
And on the right screen, you can
see it go into the game really

00:47:50.700 --> 00:47:51.200
quickly.

00:47:51.200 --> 00:47:53.695
This was the [INAUDIBLE]
assisted monkey tester.

00:47:53.695 --> 00:47:55.070
And it went through
and navigated

00:47:55.070 --> 00:47:56.490
that UI really quickly.

00:47:56.490 --> 00:47:59.570
It's pretty awesome.

00:47:59.570 --> 00:48:01.940
Since we had confidence
our game was going to work,

00:48:01.940 --> 00:48:05.850
we published it to the
App Store and Google Play.

00:48:05.850 --> 00:48:08.070
We wanted to improve the
game, so we needed a way

00:48:08.070 --> 00:48:10.710
to determine if
anyone was playing

00:48:10.710 --> 00:48:13.810
and whether they would
continue to play.

00:48:13.810 --> 00:48:16.270
So since we'd built
with Firebase,

00:48:16.270 --> 00:48:19.660
we already had Google Analytics
integrated for Firebase.

00:48:19.660 --> 00:48:22.360
And Google Analytics
provides a range of metrics

00:48:22.360 --> 00:48:24.460
simply by initializing the
library out of the box,

00:48:24.460 --> 00:48:26.290
just with a couple
of lines of code.

00:48:26.290 --> 00:48:30.130
This data is easily available
in the Firebase console.

00:48:30.130 --> 00:48:32.590
So we could see how long
players were continuing

00:48:32.590 --> 00:48:34.560
to play our game,
where players are,

00:48:34.560 --> 00:48:38.230
what platforms they're
using, demographics,

00:48:38.230 --> 00:48:43.660
operating systems that they're
working on, and even interests.

00:48:43.660 --> 00:48:46.410
So Google Analytics will
collect all of the data.

00:48:46.410 --> 00:48:48.160
It's a great way of
getting data ingested.

00:48:48.160 --> 00:48:51.515
And Firebase console provides
that easy view into your data.

00:48:51.515 --> 00:48:53.140
But once it's
integrated, because we're

00:48:53.140 --> 00:48:55.510
connected with Google
Cloud, all of this data

00:48:55.510 --> 00:48:57.280
can be then streamed
into BigQuery.

00:48:57.280 --> 00:48:59.860
So we can use BigQuery
to do some basic analysis

00:48:59.860 --> 00:49:00.680
of the data.

00:49:00.680 --> 00:49:02.590
So this is a really
simple example.

00:49:02.590 --> 00:49:05.451
We wrote some SQL
to just look at

00:49:05.451 --> 00:49:07.930
based upon which operating
system, the total number

00:49:07.930 --> 00:49:10.360
of users per operating system.

00:49:10.360 --> 00:49:14.050
And we ended up with results
segmented by country.

00:49:14.050 --> 00:49:15.700
It's pretty easy.

00:49:15.700 --> 00:49:17.410
Getting stuff into
BigQuery is great

00:49:17.410 --> 00:49:19.000
because then you
can start processing

00:49:19.000 --> 00:49:20.950
potentially petabytes of data.

00:49:20.950 --> 00:49:22.570
You can train machine
learning models,

00:49:22.570 --> 00:49:23.883
and you can do so much more.

00:49:23.883 --> 00:49:25.300
There's so many
options with this.

00:49:25.300 --> 00:49:27.342
You can even pull in data
from other data sources

00:49:27.342 --> 00:49:30.453
that you have as well,
outside of Firebase.

00:49:30.453 --> 00:49:32.620
So what if you find out
your game is losing players?

00:49:32.620 --> 00:49:36.490
Perhaps players are reporting
problems via negative reviews.

00:49:36.490 --> 00:49:39.040
How do you determine what
is going wrong in the field?

00:49:39.040 --> 00:49:42.580
Well, we released Firebase
Crashalytics recently

00:49:42.580 --> 00:49:44.260
to monitor crashes in our game.

00:49:44.260 --> 00:49:46.930
Each crash report is visible
in the Firebase console,

00:49:46.930 --> 00:49:50.110
along with instant rate.

00:49:50.110 --> 00:49:52.110
You can also see
breakdowns on the type

00:49:52.110 --> 00:49:54.180
of crashes people are seeing.

00:49:54.180 --> 00:49:56.190
And you can even
see stack traces

00:49:56.190 --> 00:49:58.060
that showed you exactly
where in your code

00:49:58.060 --> 00:50:00.360
the crash is occurring.

00:50:00.360 --> 00:50:02.840
So Crashalytics data is
also available in BigQuery.

00:50:02.840 --> 00:50:05.690
So it's possible to take
tasks, like determining

00:50:05.690 --> 00:50:09.860
whether crashes are happening to
high value or low value users,

00:50:09.860 --> 00:50:13.930
and balancing that against
the cost of fixing the bug,

00:50:13.930 --> 00:50:15.500
and to determine
whether it's easier

00:50:15.500 --> 00:50:18.570
to just unpublish a game
for a specific device,

00:50:18.570 --> 00:50:22.530
or put all the effort
in to fix the problem.

00:50:22.530 --> 00:50:24.393
So we wanted to
improve our game.

00:50:24.393 --> 00:50:26.310
So we needed more players
to gather more data.

00:50:26.310 --> 00:50:29.010
We needed people
to be more engaged.

00:50:29.010 --> 00:50:31.613
So we had this theory
that a lot of players

00:50:31.613 --> 00:50:33.780
would stop playing because
they'd played through all

00:50:33.780 --> 00:50:34.780
of the maps in the game.

00:50:34.780 --> 00:50:36.600
So we integrated
Firebase Cloud Messaging

00:50:36.600 --> 00:50:39.990
so that we could re-engage our
players using notifications.

00:50:39.990 --> 00:50:42.360
So when we publish
a new map, we would

00:50:42.360 --> 00:50:45.240
be able to send push
notifications to users

00:50:45.240 --> 00:50:47.992
so that they could come
back into the game.

00:50:47.992 --> 00:50:49.950
So you can do this for
any aspects of your game

00:50:49.950 --> 00:50:53.340
at all, like new modes,
friends coming online.

00:50:53.340 --> 00:50:55.140
There's plenty of use cases.

00:50:55.140 --> 00:50:58.390
So in the case of
integrating Cloud Messaging,

00:50:58.390 --> 00:51:03.280
you could just compose a
notification in the console,

00:51:03.280 --> 00:51:04.680
select a specific set of users.

00:51:04.680 --> 00:51:07.890
In this case, we
sent it to everyone.

00:51:07.890 --> 00:51:10.255
The player would then see
a system notification.

00:51:10.255 --> 00:51:11.880
If they tap on that,
it would take them

00:51:11.880 --> 00:51:13.710
to the content in the game.

00:51:13.710 --> 00:51:16.260
So new content, like I said,
can really be anything.

00:51:16.260 --> 00:51:18.870
It could be a time limited
offer for in-game currency.

00:51:18.870 --> 00:51:20.010
Anything at all.

00:51:20.010 --> 00:51:21.810
So in cases when
players uninstall

00:51:21.810 --> 00:51:24.220
the game, if we actually
have their email address

00:51:24.220 --> 00:51:27.750
or we have some access
to them via social media,

00:51:27.750 --> 00:51:31.410
we can actually send
a dynamic link to them

00:51:31.410 --> 00:51:33.670
that would take them
straight into the game.

00:51:33.670 --> 00:51:36.420
So when a user opens a
Firebase dynamic link,

00:51:36.420 --> 00:51:39.052
it takes them all the way
through app installation

00:51:39.052 --> 00:51:41.010
and will then take them
directly into the game,

00:51:41.010 --> 00:51:44.970
without them having to go
back and find the link again.

00:51:44.970 --> 00:51:46.810
Since we have Google
Analytics integrated,

00:51:46.810 --> 00:51:48.420
we were then able
to run experiments

00:51:48.420 --> 00:51:49.890
or AB tests on
players by pushing

00:51:49.890 --> 00:51:52.770
new configuration to the game
just using Firebase Remote

00:51:52.770 --> 00:51:53.970
Config.

00:51:53.970 --> 00:51:56.430
Firebase Remote Config
simply stores key value pairs

00:51:56.430 --> 00:51:58.650
so that-- they can
contain any data at all.

00:51:58.650 --> 00:52:01.560
So for example, we could update
game balance for all users

00:52:01.560 --> 00:52:03.545
to make the game easier,
or just for users

00:52:03.545 --> 00:52:04.920
who are having
trouble completing

00:52:04.920 --> 00:52:07.900
the first few maps of the game.

00:52:07.900 --> 00:52:11.350
Also, since we integrated
Google Analytics for Firebase,

00:52:11.350 --> 00:52:13.120
it was possible
to see conversions

00:52:13.120 --> 00:52:16.390
from ads automatically
without integrating a new SDK.

00:52:16.390 --> 00:52:19.150
This also made it possible
to target player audiences

00:52:19.150 --> 00:52:21.110
in Google Analytics.

00:52:21.110 --> 00:52:22.488
So if you're not
building a demo,

00:52:22.488 --> 00:52:24.530
you probably want to get
paid for your hard work.

00:52:30.260 --> 00:52:33.770
So if you want to
figure out when

00:52:33.770 --> 00:52:37.640
to show in-game offers,
ads, or organize your store

00:52:37.640 --> 00:52:40.100
to maximize the chance a
player will generate revenue,

00:52:40.100 --> 00:52:41.490
it can be pretty hard.

00:52:41.490 --> 00:52:43.340
So if you're already
using Google Analytics,

00:52:43.340 --> 00:52:45.125
it's possible to enable
a product we have

00:52:45.125 --> 00:52:46.292
called Firebase Predictions.

00:52:46.292 --> 00:52:48.380
It's a single click
in the console.

00:52:48.380 --> 00:52:51.710
And that identifies players who
are likely to churn or spend

00:52:51.710 --> 00:52:52.340
in your game.

00:52:52.340 --> 00:52:55.640
This can be used as a guide to
run experiments and maximize

00:52:55.640 --> 00:52:57.530
revenue.

00:52:57.530 --> 00:52:59.820
So for example, Rockbite
Games used predictions

00:52:59.820 --> 00:53:01.380
to segment their
players into groups

00:53:01.380 --> 00:53:04.590
based upon their chance of
spending or not spending.

00:53:04.590 --> 00:53:07.020
They then used
Firebase Remote Config

00:53:07.020 --> 00:53:09.570
to change their in-app
store differently

00:53:09.570 --> 00:53:12.480
for players who are likely
to spend versus not spend.

00:53:12.480 --> 00:53:14.910
They discovered players in
the likely to spend group

00:53:14.910 --> 00:53:17.880
made more in-app purchases
if chests were featured

00:53:17.880 --> 00:53:21.120
at the top of the store.

00:53:21.120 --> 00:53:23.970
Rockbite also gave users in
the unlikely to spend segment

00:53:23.970 --> 00:53:27.160
the option of viewing an
ad to get in-game currency.

00:53:27.160 --> 00:53:32.240
Firebase as a whole helped
Rockbite boost revenue by 25%.

00:53:32.240 --> 00:53:35.320
Halfbrick Games also used
Firebase to increase revenue.

00:53:35.320 --> 00:53:37.270
They constructed
an experiment where

00:53:37.270 --> 00:53:39.430
they gifted users credits.

00:53:39.430 --> 00:53:41.470
The control group
received no credits.

00:53:41.470 --> 00:53:43.247
One group received
credits at level three.

00:53:43.247 --> 00:53:44.830
Third group received
credits when they

00:53:44.830 --> 00:53:46.320
were in the will-churn segment.

00:53:46.320 --> 00:53:48.850
Users in the
will-churn test group

00:53:48.850 --> 00:53:51.220
had a 20% increase in
seven-day retention

00:53:51.220 --> 00:53:53.743
versus the other segments.

00:53:53.743 --> 00:53:56.160
So it's possible to leverage
the power of machine learning

00:53:56.160 --> 00:54:00.090
easily to build in-app purchase
flows and ad experiences

00:54:00.090 --> 00:54:02.160
with Firebase Predictions.

00:54:02.160 --> 00:54:04.880
Now, if you don't want
to customize things,

00:54:04.880 --> 00:54:08.090
it's possible to just turn
on AdMob Smart Segmentation

00:54:08.090 --> 00:54:11.850
if you've got an AdMob
integrated into your game.

00:54:11.850 --> 00:54:14.900
This will automatically
show ads to players

00:54:14.900 --> 00:54:21.027
who are predicted to not spend,
and not show ads to players--

00:54:21.027 --> 00:54:23.360
show ads to players who are
predicted not spend, and not

00:54:23.360 --> 00:54:25.740
show ads to players who
are predicted to spend.

00:54:25.740 --> 00:54:29.450
So AdMob also does all of the AB
testing automatically for you.

00:54:29.450 --> 00:54:32.890
It's really easy to
integrate and use.

00:54:32.890 --> 00:54:35.880
So if you want to learn
more about Firebase at GDC,

00:54:35.880 --> 00:54:38.700
we've got a deep dive
into Google Cloud Platform

00:54:38.700 --> 00:54:40.860
and Firebase on Wednesday.

00:54:40.860 --> 00:54:43.200
There's actually an entire
day dedicated to Google Cloud

00:54:43.200 --> 00:54:44.990
Platform on Wednesday.

00:54:44.990 --> 00:54:47.470
We're also speaking at
the Google Expo booth

00:54:47.470 --> 00:54:48.990
Wednesday at 11:30.

00:54:48.990 --> 00:54:51.450
And we'll be covering how to
use Firebase data to optimize

00:54:51.450 --> 00:54:52.310
games.

00:54:52.310 --> 00:54:53.850
And on Thursday
at 2:00 PM, we'll

00:54:53.850 --> 00:54:57.710
be covering more Firebase
features in Mecha Hamster.

00:54:57.710 --> 00:54:59.260
OK.

