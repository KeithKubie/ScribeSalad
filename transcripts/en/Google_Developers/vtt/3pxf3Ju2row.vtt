WEBVTT
Kind: captions
Language: en

00:00:01.260 --> 00:00:02.260
&gt;&gt;Sam Dutton: Hi, everyone.

00:00:02.260 --> 00:00:08.970
I think we're ready to begin if you would
like to take a seat.

00:00:08.970 --> 00:00:09.970
Glad to see everyone here.

00:00:09.970 --> 00:00:11.990
Yeah, we're here to talk about the Chrome
Development Tools today.

00:00:11.990 --> 00:00:15.809
If you are here for something else, I think
you should stay because it will be a really

00:00:15.809 --> 00:00:16.809
good session.

00:00:16.809 --> 00:00:19.320
My name is Sam Dutton, I'm a developer advocate
for Google Chrome.

00:00:19.320 --> 00:00:20.450
I'm based in London.

00:00:20.450 --> 00:00:23.850
&gt;&gt;Pavel Feldman: And I'm Pavel Feldman, software
engineer working at Google Chrome.

00:00:23.850 --> 00:00:27.630
&gt;&gt;Sam Dutton: And yeah, we're going to show
you some great new features in Tools and hopefully

00:00:27.630 --> 00:00:32.180
some stuff that can make your life easier
as a developer.

00:00:32.180 --> 00:00:38.280
You know, 2012 has just been an incredible
year on the Web.

00:00:38.280 --> 00:00:43.409
I was looking back at the session that Pavel
did with -- Paul Irish is in the house somewhere

00:00:43.409 --> 00:00:50.760
-- last year, and it amazes me how much the
Chrome Tools have evolved in that time, how

00:00:50.760 --> 00:00:53.800
much the Web has changed in that time.

00:00:53.800 --> 00:01:00.969
It just seems like the normal thing now for
you guys to be building these apps that are

00:01:00.969 --> 00:01:06.090
incredibly complex and really pushing the
limits of development on the clients' side.

00:01:06.090 --> 00:01:11.490
And I think that one thing I've found is that
in a context, you know, a really great text

00:01:11.490 --> 00:01:14.420
editor just isn't always enough.

00:01:14.420 --> 00:01:20.220
And with that in mind I think that's where
the Chrome Dev Tools come in.

00:01:20.220 --> 00:01:22.950
So what are we going to talk about today?

00:01:22.950 --> 00:01:28.230
Well, we're going to run through some tools
that we hope will boost your productivity.

00:01:28.230 --> 00:01:34.760
And we'll also be looking in some detail at
using the tools to do mobile Web developments.

00:01:34.760 --> 00:01:40.170
We'll also be looking at this idea of responsiveness.

00:01:40.170 --> 00:01:41.170
You know, what is it?

00:01:41.170 --> 00:01:47.360
How do we measure it and how do we deal with
it in a scientific way rather than with guesswork?

00:01:47.360 --> 00:01:54.740
And you know, in a balance to that, also looking
at memory and making sure that we stay on

00:01:54.740 --> 00:01:55.740
top of that.

00:01:55.740 --> 00:02:00.840
And all through this we'll be looking at a
whole bunch of new features in the Tools.

00:02:00.840 --> 00:02:08.340
But first, we just wanted to say, you know,
I really big tip of the hat to all the people

00:02:08.340 --> 00:02:14.310
who have contributed to the Tools in the last
year with bug reports, feature requests and,

00:02:14.310 --> 00:02:16.799
you know, by committing code.

00:02:16.799 --> 00:02:22.989
We've got a list here of some stuff, just
touching the surface of stuff that's been

00:02:22.989 --> 00:02:28.629
put into the Tools in the last year just from
user requests and user codes, you know, fantastic

00:02:28.629 --> 00:02:30.379
contributions, really good stuff.

00:02:30.379 --> 00:02:33.840
Just to pick on one of these things, this
business of caching.

00:02:33.840 --> 00:02:40.209
Caching is a good thing, but it can be a real
pain for developers.

00:02:40.209 --> 00:02:44.529
Particularly when you're dealing with situations
where assets are being loaded dynamically

00:02:44.529 --> 00:02:50.080
after the onload event and in those situations
a hard reload or whatever just isn't enough.

00:02:50.080 --> 00:02:52.340
So we have two new features in the tools.

00:02:52.340 --> 00:02:56.880
From the network panel you can right-click
and clear the browser cache or you can even

00:02:56.880 --> 00:02:59.920
just turn off caching from the settings page.

00:02:59.920 --> 00:03:05.239
So yeah, great stuff from our users, and we're
really grateful for that.

00:03:05.239 --> 00:03:09.840
So with that in mind, we've got this roomful
of great developers, we thought we would take

00:03:09.840 --> 00:03:16.670
this opportunity to try and get from you guys
some ideas about what you would like right

00:03:16.670 --> 00:03:18.840
here, right now, to see next in the Tools.

00:03:18.840 --> 00:03:20.659
You know, what challenges are you facing now?

00:03:20.659 --> 00:03:22.129
What would you like to see?

00:03:22.129 --> 00:03:23.129
Pavel?

00:03:23.129 --> 00:03:27.689
&gt;&gt;Pavel Feldman: Right, guys, that's your
only opportunity, unique opportunity, to request

00:03:27.689 --> 00:03:31.730
something, and even without filing a bug I
will be implementing it for you.

00:03:31.730 --> 00:03:35.680
So please shout out what you want from the
devtools and we'll type it in and we'll make

00:03:35.680 --> 00:03:37.590
sure it's not lost.

00:03:37.590 --> 00:03:44.879
&gt;&gt;Sam Dutton: Right here, right now, shout
it out.

00:03:44.879 --> 00:03:50.000
&gt;&gt;&gt; [Inaudible - No Mic].

00:03:50.000 --> 00:03:58.530
&gt;&gt;Sam Dutton: Okay, next, please.

00:03:58.530 --> 00:04:03.639
&gt;&gt;&gt; [Inaudible - No Mic].

00:04:03.639 --> 00:04:08.760
&gt;&gt;&gt; [Inaudible - No Mic].

00:04:08.760 --> 00:04:12.939
&gt;&gt;Sam Dutton: Thanks very much.

00:04:12.939 --> 00:04:14.049
One here.

00:04:14.049 --> 00:04:19.590
&gt;&gt;&gt; [Inaudible - No Mic]
&gt;&gt;Sam Dutton: And while on this side?

00:04:19.590 --> 00:04:21.250
&gt;&gt;&gt; [Inaudible - No Mic].

00:04:21.250 --> 00:04:23.580
&gt;&gt;Sam Dutton: That we already have.

00:04:23.580 --> 00:04:25.610
&gt;&gt;Pavel Feldman: Let me put it in.

00:04:25.610 --> 00:04:28.880
I will be happy to file the bug and close
it.

00:04:28.880 --> 00:04:30.260
&gt;&gt;Sam Dutton: Okay.

00:04:30.260 --> 00:04:32.090
Down the front.

00:04:32.090 --> 00:04:36.050
&gt;&gt;&gt; Storing edited CSS.

00:04:36.050 --> 00:04:40.010
&gt;&gt;&gt; [Inaudible - No Mic].

00:04:40.010 --> 00:04:43.970
&gt;&gt;Sam Dutton: Okay.

00:04:43.970 --> 00:04:51.630
And who else down in the front?

00:04:51.630 --> 00:04:54.500
&gt;&gt;&gt; [Inaudible - No Mic].

00:04:54.500 --> 00:04:57.370
&gt;&gt;Sam Dutton: Here.

00:04:57.370 --> 00:05:00.230
&gt;&gt;&gt; [Inaudible - No Mic].

00:05:00.230 --> 00:05:03.100
&gt;&gt;Sam Dutton: Yes?

00:05:03.100 --> 00:05:05.970
&gt;&gt;&gt; [Inaudible - No Mic].

00:05:05.970 --> 00:05:10.750
&gt;&gt;Sam Dutton: Maybe two more.

00:05:10.750 --> 00:05:13.610
&gt;&gt;&gt; [Inaudible - No Mic].

00:05:13.610 --> 00:05:19.740
&gt;&gt;Sam Dutton: Like by the system in other
words, like for San Serif or whatever.

00:05:19.740 --> 00:05:20.740
Behind you there.

00:05:20.740 --> 00:05:22.670
&gt;&gt;&gt; Bigger text in the developer tools.

00:05:22.670 --> 00:05:24.500
&gt;&gt;Sam Dutton: Ah, we can help you with that.

00:05:24.500 --> 00:05:25.500
Bigger text.

00:05:25.500 --> 00:05:26.500
&gt;&gt;Pavel Feldman: Bigger text.

00:05:26.500 --> 00:05:28.260
&gt;&gt;Sam Dutton: And right out the back.

00:05:28.260 --> 00:05:30.280
&gt;&gt;&gt; Support for CSS preprocessors.

00:05:30.280 --> 00:05:31.790
&gt;&gt;Sam Dutton: Yes.

00:05:31.790 --> 00:05:32.790
Good, good.

00:05:32.790 --> 00:05:33.800
That's fantastic.

00:05:33.800 --> 00:05:35.310
&gt;&gt;Pavel Feldman: Okay.

00:05:35.310 --> 00:05:37.170
That's a good list.

00:05:37.170 --> 00:05:43.370
I'm happy to say that at least half of it
is already implemented.

00:05:43.370 --> 00:05:46.010
[ Laughter ]
&gt;&gt;Sam Dutton: That's great.

00:05:46.010 --> 00:05:47.590
We'll take that.

00:05:47.590 --> 00:05:50.700
&gt;&gt;Pavel Feldman: So I'm making sure it is
not lost.

00:05:50.700 --> 00:05:55.070
I'll be filing those by myself and probably
will be implementing some of those personally.

00:05:55.070 --> 00:06:00.780
&gt;&gt;Sam Dutton: And I'll be following him around
with a whip.

00:06:00.780 --> 00:06:04.520
[ Applause ]
&gt;&gt;Sam Dutton: So you know, like one of the

00:06:04.520 --> 00:06:09.140
things -- another thing we've noticed over
the last 12 months or so is that people are

00:06:09.140 --> 00:06:15.280
using the tools now more for actually writing
code, for building interfaces, not just for

00:06:15.280 --> 00:06:16.300
debugging.

00:06:16.300 --> 00:06:22.710
And with that in mind, when the devtools team
have built in some great features for working

00:06:22.710 --> 00:06:29.020
in the tools in that way, and I was thinking
about just how to demonstrate it, how it increases

00:06:29.020 --> 00:06:33.800
productivity, and I was thinking about the
devtools team themselves, like the devtools

00:06:33.800 --> 00:06:37.520
team build the devtools to build the devtools.

00:06:37.520 --> 00:06:44.240
And good developers are really productive,
so who better to ask about productivity than

00:06:44.240 --> 00:06:45.240
Pavel Feldman.

00:06:45.240 --> 00:06:49.850
It would be a good opportunity to give Pavel
Feldman a chance to give us a master class,

00:06:49.850 --> 00:06:51.180
show us how he works.

00:06:51.180 --> 00:06:52.770
&gt;&gt;Pavel Feldman: Now I feel flattered.

00:06:52.770 --> 00:06:53.770
Okay.

00:06:53.770 --> 00:06:56.570
Before we jump into the demos, let me say
a few words about the productivity.

00:06:56.570 --> 00:07:01.050
What do we expect from the Tools for productivity?

00:07:01.050 --> 00:07:06.410
And for me it is getting into the source into
where I need to fast.

00:07:06.410 --> 00:07:11.230
And being a part of the screen or an action
or a process, I like to jump instantly into

00:07:11.230 --> 00:07:13.750
the source code that is responsible for this
action.

00:07:13.750 --> 00:07:17.960
And vice versa, while looking at the source
I want to know what it is responsible for,

00:07:17.960 --> 00:07:21.570
how do I get the part of the screen that it
paints?

00:07:21.570 --> 00:07:27.110
While in the source code I am interested in
changing it and more importantly I'm interesting

00:07:27.110 --> 00:07:29.640
in seeing an immediate feedback.

00:07:29.640 --> 00:07:37.800
And for those of you who have seen the Bret
Victor's "Inventing on Principle" talk, if

00:07:37.800 --> 00:07:40.270
you haven't, please make sure you check it
out.

00:07:40.270 --> 00:07:42.950
That's an image from Bret's slides.

00:07:42.950 --> 00:07:47.390
So the main principle Bret is talking about
is the instant feedback.

00:07:47.390 --> 00:07:52.560
And as he goes through his demos it is clear
that the instant feedback not only increases

00:07:52.560 --> 00:07:58.300
your productivity, makes you do things faster,
but it also boosts your creativity, because

00:07:58.300 --> 00:08:03.400
when things are reflected fast, when you have
an instant feedback, you start experimenting.

00:08:03.400 --> 00:08:07.490
You go through the states that you have otherwise
not visit.

00:08:07.490 --> 00:08:12.150
Now that you have changed the source code
and you've seen the feedback, the essential

00:08:12.150 --> 00:08:14.170
part of the tool is to persist it.

00:08:14.170 --> 00:08:21.710
So let me show you how these map into the
devtools features.

00:08:21.710 --> 00:08:32.060
I just started Chrome Canary, and it is a
version of Chrome that is being updated on

00:08:32.060 --> 00:08:33.979
your machine daily.

00:08:33.979 --> 00:08:39.360
It is built from the tip of the tree sources
from WebKit and Chrome and contains all the

00:08:39.360 --> 00:08:43.880
features that are implemented by this date,
including the devtools ones.

00:08:43.880 --> 00:08:48.960
So if you are a Web developer and you would
like to make sure that everything works perfectly

00:08:48.960 --> 00:08:53.760
on the next version of Chrome or if you'd
like to use the tip of the tree devtools,

00:08:53.760 --> 00:08:58.360
please use the Canary and please provide us
with your feedback.

00:08:58.360 --> 00:09:04.230
But more importantly, Canary can run side
by side with your Chrome browser, so you no

00:09:04.230 --> 00:09:09.450
longer need to choose whether you want to
be on the Dev channel or Beta channel or Stable

00:09:09.450 --> 00:09:17.900
to test for the changes, just have those two
installed and that will be very convenient.

00:09:17.900 --> 00:09:20.640
Oh, I have no connectivity.

00:09:20.640 --> 00:09:21.640
Sorry.

00:09:21.640 --> 00:09:28.040
It just plugged out.

00:09:28.040 --> 00:09:30.340
So I'm navigating to the WebKit.org.

00:09:30.340 --> 00:09:36.060
And WebKit is the project where most of the
Chrome devtools source code belongs.

00:09:36.060 --> 00:09:38.040
We develop devtools fronted upstream.

00:09:38.040 --> 00:09:41.980
Let me load it once again.

00:09:41.980 --> 00:09:43.300
Okay.

00:09:43.300 --> 00:09:51.220
Let's go to the backup plan.

00:09:51.220 --> 00:09:55.840
We have a backup plan, don't we?

00:09:55.840 --> 00:09:58.150
Yeah, we do.

00:09:58.150 --> 00:10:02.130
[ Laughter ]
&gt;&gt;Pavel Feldman: So that's the WebKit.

00:10:02.130 --> 00:10:07.550
And I'm going to do a lot of demos on the
devtools, and we're going to hack devtools

00:10:07.550 --> 00:10:11.490
today, and after this session you will be
able to contribute your source code into the

00:10:11.490 --> 00:10:12.490
devtools yourself.

00:10:12.490 --> 00:10:19.230
Now, I'm going to debug this page, but before
I -- I'm not going to open the devtools using

00:10:19.230 --> 00:10:27.360
the command option I, I'll do it different
then.

00:10:27.360 --> 00:10:33.410
I'm using remote debugging to start inspecting
my page.

00:10:33.410 --> 00:10:41.050
And as you can see, remote debugging works
as a regular devtools.

00:10:41.050 --> 00:10:46.640
You can see the devtools is opened as a Web
page.

00:10:46.640 --> 00:10:52.130
I can do that because developer tools uses
clients server architecture where browser

00:10:52.130 --> 00:10:55.930
acts as a server and a front end acts as a
client.

00:10:55.930 --> 00:11:01.690
So the devtools that you have in your browser
is in fact a Web app read in HTML, JavaScript,

00:11:01.690 --> 00:11:05.050
CSS, and it's talking to the backup using
Web Sockets.

00:11:05.050 --> 00:11:07.680
Did you know that?

00:11:07.680 --> 00:11:10.340
Okay, good.

00:11:10.340 --> 00:11:14.900
Now, it's -- is it okay?

00:11:14.900 --> 00:11:18.440
Now it's time to debug.

00:11:18.440 --> 00:11:26.080
And as you can see, I open the devtools doc
to the right and let me [Indiscernible].

00:11:26.080 --> 00:11:29.520
Here we go.

00:11:29.520 --> 00:11:35.010
So what we are going to do here today is we
are going to hack on the devtools itself because

00:11:35.010 --> 00:11:36.010
I'm a devtools engineer.

00:11:36.010 --> 00:11:40.960
I want to show you what I'm doing everyday.

00:11:40.960 --> 00:11:42.590
So that's regular old stuff.

00:11:42.590 --> 00:11:44.940
This is your Web page to the left.

00:11:44.940 --> 00:11:47.080
In my case it's devtools.

00:11:47.080 --> 00:11:48.870
And that's your devtools to the right.

00:11:48.870 --> 00:11:52.330
[ Laughter ]
&gt;&gt;Sam Dutton: Pavel's life is so meta.

00:11:52.330 --> 00:11:58.290
&gt;&gt;Pavel Feldman: So we get a bit of inception
here, so don't get confused.

00:11:58.290 --> 00:11:59.290
Okay.

00:11:59.290 --> 00:12:03.560
Now, I've been working lately on the timeline
features.

00:12:03.560 --> 00:12:08.320
And as I was editing the timeline features,
I noticed the timeline does not really look

00:12:08.320 --> 00:12:10.670
like the rest of the Chrome.

00:12:10.670 --> 00:12:13.960
We implemented it in WebKit, we were using
these colorful gradients, 3D loops, we don't

00:12:13.960 --> 00:12:18.100
really do that in Chrome, so I needed to fix
it.

00:12:18.100 --> 00:12:21.400
And when you were working in a UI like that,
you need to go back and forth between the

00:12:21.400 --> 00:12:26.240
page and your source code until what you see
satisfies you.

00:12:26.240 --> 00:12:29.510
Let's try to recreate this experience right
now.

00:12:29.510 --> 00:12:38.410
I'm recording a couple of timelines in here,
and if you can see those gray zebra bars in

00:12:38.410 --> 00:12:43.529
the central part of the timeline, let me make
them a bit more conscious for you.

00:12:43.529 --> 00:12:50.060
To do that I'm using the inspect element tool
to locate the actual code responsible for

00:12:50.060 --> 00:12:51.690
the zebra bar.

00:12:51.690 --> 00:12:56.170
And in here I can play around with its colors
using the color meter.

00:12:56.170 --> 00:13:02.910
Let me increase it or maybe play with the
color.

00:13:02.910 --> 00:13:04.440
And I can do it dynamically in here.

00:13:04.440 --> 00:13:07.010
I have a range of values I am choosing.

00:13:07.010 --> 00:13:12.070
And that's really a simplistic example of
what Bret was talking about, because as I

00:13:12.070 --> 00:13:15.690
go through these ranges I was just going to
bump the conscious a bit, but now I like the

00:13:15.690 --> 00:13:19.720
different color I can accept it.

00:13:19.720 --> 00:13:23.010
Let's check if the sources were updated.

00:13:23.010 --> 00:13:26.950
And they were updated, so that's my new color.

00:13:26.950 --> 00:13:27.950
Nice.

00:13:27.950 --> 00:13:33.950
But I think we have a bug because in the top
part of this grid you can see the overview.

00:13:33.950 --> 00:13:37.130
It also has the zebra bar, but it was not
updated.

00:13:37.130 --> 00:13:41.630
We are probably doing a bad job, we don't
use constants here or the style we're using

00:13:41.630 --> 00:13:42.850
is different.

00:13:42.850 --> 00:13:45.670
Let me do the same thing with the top area.

00:13:45.670 --> 00:13:49.050
So I inspect it.

00:13:49.050 --> 00:13:51.230
Whoa.

00:13:51.230 --> 00:13:54.920
That's not CSS, so it's not going to work
like that.

00:13:54.920 --> 00:13:56.910
We all love CSS because it's declarative language.

00:13:56.910 --> 00:14:01.430
You change a value and you get an instant
feedback, everything updated live.

00:14:01.430 --> 00:14:04.490
Canvas is just JavaScript, imperative language.

00:14:04.490 --> 00:14:09.030
Painting on a canvas, you can't go into the
source code and change things dynamically,

00:14:09.030 --> 00:14:10.420
or can you?

00:14:10.420 --> 00:14:17.310
For that let us try and find out what source
code is responsible for this painting.

00:14:17.310 --> 00:14:20.560
Remember we want to go from the screen into
the source code.

00:14:20.560 --> 00:14:27.440
For that I'm using command alt F, and I'm
just going to search for canvas.

00:14:27.440 --> 00:14:32.540
And it searches through all my source project,
and through the entire project.

00:14:32.540 --> 00:14:38.660
As you can see, we have a number of components
that are using canvas, but I think the timeline

00:14:38.660 --> 00:14:45.420
overview pane is the one that I need, so I'm
jumping to it.

00:14:45.420 --> 00:14:49.520
And while we are here let me say a few words
about the new sources panel.

00:14:49.520 --> 00:14:52.700
So the sources panel is the one where you
are dealing with your source code.

00:14:52.700 --> 00:14:56.520
You are going to view it there, you are going
to modify it there, you are going to save

00:14:56.520 --> 00:15:01.490
it there, you're going to jump on to the source
code from your URL, so we need more real estate

00:15:01.490 --> 00:15:02.980
for that.

00:15:02.980 --> 00:15:10.600
For that we now have collapsible debugger
sidebars and expandable tree view with all

00:15:10.600 --> 00:15:11.600
of your sources.

00:15:11.600 --> 00:15:16.050
And remember Web scales you need a lot of
space for the list of your files.

00:15:16.050 --> 00:15:17.110
But do you know what?

00:15:17.110 --> 00:15:22.710
You don't really need it at all times on your
screen because you can hit command O and jump

00:15:22.710 --> 00:15:24.210
to any file instantly.

00:15:24.210 --> 00:15:31.399
As I type, the list narrows down and I can
jump into a particular file or even a particular

00:15:31.399 --> 00:15:33.630
line number.

00:15:33.630 --> 00:15:41.240
[ Applause ]
&gt;&gt;Pavel Feldman: Now, remember what were we

00:15:41.240 --> 00:15:42.240
doing?

00:15:42.240 --> 00:15:43.620
We were looking for canvas, right?

00:15:43.620 --> 00:15:45.340
So let us search for canvas.

00:15:45.340 --> 00:15:48.170
There are a lot of occurrences.

00:15:48.170 --> 00:15:49.960
Does not work.

00:15:49.960 --> 00:15:52.800
Or let us go through -- oh, the methods.

00:15:52.800 --> 00:15:58.530
I'm pressing command shift O and I get a list
of all the functions in this file.

00:15:58.530 --> 00:16:02.380
And the same very thing will work for your
selectors in the style sheet.

00:16:02.380 --> 00:16:07.750
And as I type, the list narrows down and I
can jump to a particular function, but unfortunately

00:16:07.750 --> 00:16:14.430
there is no clue on the canvas and the zebra
stripes, so let's go on.

00:16:14.430 --> 00:16:16.550
But I think I have an idea.

00:16:16.550 --> 00:16:19.740
I think this code uses the same color of the
CSS.

00:16:19.740 --> 00:16:21.380
Do you remember the color?

00:16:21.380 --> 00:16:23.160
What was the color there?

00:16:23.160 --> 00:16:25.100
&gt;&gt;&gt; [Inaudible - No Mic].

00:16:25.100 --> 00:16:27.670
&gt;&gt;Pavel Feldman: 50% gray?

00:16:27.670 --> 00:16:29.610
Any more options?

00:16:29.610 --> 00:16:31.700
So let's see if you're right.

00:16:31.700 --> 00:16:39.322
I'm pressing control -- I'm using the context
menu, control click in my case, and I'm looking

00:16:39.322 --> 00:16:44.610
for local modifications, and I can see all
the files that were edited within this editing

00:16:44.610 --> 00:16:45.790
session.

00:16:45.790 --> 00:16:50.529
[ Applause ]
&gt;&gt;Pavel Feldman: And let me search for the

00:16:50.529 --> 00:16:51.830
old color definition.

00:16:51.830 --> 00:16:53.160
Here you go.

00:16:53.160 --> 00:16:56.640
Let me grab the new one.

00:16:56.640 --> 00:16:57.640
Okay.

00:16:57.640 --> 00:16:58.950
&gt;&gt;&gt; [Inaudible - No Mic].

00:16:58.950 --> 00:17:03.350
&gt;&gt;Pavel Feldman: I am using context menu,
local modifications.

00:17:03.350 --> 00:17:05.429
We'll go there in a bit.

00:17:05.429 --> 00:17:09.130
Now, I'm replacing the code with a new value.

00:17:09.130 --> 00:17:14.140
And unlike in Bret's demos, unfortunately
the screen is not updated, but the reason

00:17:14.140 --> 00:17:18.270
is that we are not using requestAnimationFrame
to paint our canvas painting.

00:17:18.270 --> 00:17:23.280
We updated upon resize or any event that is
being painted in this overview.

00:17:23.280 --> 00:17:27.120
Let us try and keep those modifications while
resizing.

00:17:27.120 --> 00:17:31.380
Here you go.

00:17:31.380 --> 00:17:36.160
So what happened under the hood is the V8
driven live edit, step in place, so when I

00:17:36.160 --> 00:17:41.590
save the file the actual machine code generated
for that source file, for that JavaScript,

00:17:41.590 --> 00:17:43.560
was patched at runtime.

00:17:43.560 --> 00:17:48.170
And any subsequent execution of that code
was using the new code.

00:17:48.170 --> 00:17:54.090
Now, let's see if the local modifications,
it's a context menu in here or in the scripts

00:17:54.090 --> 00:17:58.420
navigator to the left, captured our changes.

00:17:58.420 --> 00:18:01.100
And of course, they are here.

00:18:01.100 --> 00:18:03.620
Now, let's see if we actually like them.

00:18:03.620 --> 00:18:09.060
I'm going to go ahead and apply original content
for top and bottom areas.

00:18:09.060 --> 00:18:12.600
And, no, I like the new way more, okay.

00:18:12.600 --> 00:18:13.600
Applying the revision content.

00:18:13.600 --> 00:18:17.070
I'm keeping the changes again.

00:18:17.070 --> 00:18:21.299
So as you can see, you can experiment with
the revisions of your edited source files,

00:18:21.299 --> 00:18:24.670
be it JavaScript or CSS.

00:18:24.670 --> 00:18:28.700
Now that we have edited all, we need to save
it.

00:18:28.700 --> 00:18:32.290
And for that we are going to use context menu
and save as.

00:18:32.290 --> 00:18:36.900
Here you can bind your source file to the
file system location and all of the subsequent

00:18:36.900 --> 00:18:40.150
saves are going to write to that location.

00:18:40.150 --> 00:18:42.810
Or you can do something more interesting.

00:18:42.810 --> 00:18:47.120
You can actually install an extension, Chrome
extension, from the Web store.

00:18:47.120 --> 00:18:51.680
I'm using a (indiscernible) device devtools
have to save for that.

00:18:51.680 --> 00:18:57.370
And my extension is installed and configured.

00:18:57.370 --> 00:19:04.930
So that it mapped the particular -- the URL
into the particular location of my file system.

00:19:04.930 --> 00:19:08.330
Once I mapped it, everything else just happens
automatically.

00:19:08.330 --> 00:19:16.480
Let's go and -- go ahead and see if the changes
are in place.

00:19:16.480 --> 00:19:21.280
And here they are.

00:19:21.280 --> 00:19:27.220
So the changes were indeed persistent in the
file system and I was not doing anything for

00:19:27.220 --> 00:19:28.260
that.

00:19:28.260 --> 00:19:32.450
[ Applause ]
&gt;&gt;Pavel Feldman: Okay.

00:19:32.450 --> 00:19:33.490
Yeah.

00:19:33.490 --> 00:19:35.590
Thank you.

00:19:35.590 --> 00:19:38.140
So now that's the -- that's the productivity
story.

00:19:38.140 --> 00:19:43.030
We can jump into the source file, we can change
it to immediate feedback persistent, but it's

00:19:43.030 --> 00:19:47.870
really easy to provide such an instant feedback
when you are working on a desktop, because

00:19:47.870 --> 00:19:52.472
both your page and the devtools are on the
same screen in the same box.

00:19:52.472 --> 00:19:56.260
Wouldn't it be great if the same experience
could exist while you are working for mobile.

00:19:56.260 --> 00:19:57.260
Sam?

00:19:57.260 --> 00:20:04.330
&gt;&gt;Sam Dutton: Well, yeah, the good news is
that the devtools are available now for mobile.

00:20:04.330 --> 00:20:09.870
The devtools team have done a huge amount
of work over the last year to implement remote

00:20:09.870 --> 00:20:16.680
debugging in WebKit, and we are really pleased
to see this code being used across the industry

00:20:16.680 --> 00:20:17.700
now.

00:20:17.700 --> 00:20:25.860
Because there is no better way to -- to get
a really good impression of what your Web

00:20:25.860 --> 00:20:31.910
app is actually like out in the world than
to do remote debugging via USB on a real device

00:20:31.910 --> 00:20:35.590
that's getting real 2G, 3G, whatever real
connectivity.

00:20:35.590 --> 00:20:38.660
And, yeah, we would like to show you that
right now, actually.

00:20:38.660 --> 00:20:40.370
&gt;&gt;Pavel Feldman: Let me check it now.

00:20:40.370 --> 00:20:41.370
Internet connection?

00:20:41.370 --> 00:20:43.590
&gt;&gt;Sam Dutton: We've got internet?

00:20:43.590 --> 00:20:44.970
&gt;&gt;Pavel Feldman: Yeah.

00:20:44.970 --> 00:20:46.809
&gt;&gt;Sam Dutton: That's good.

00:20:46.809 --> 00:20:47.809
Okay.

00:20:47.809 --> 00:20:48.809
So it's really easy to set up.

00:20:48.809 --> 00:20:49.809
We go to the device.

00:20:49.809 --> 00:20:50.809
You need to log me in here.

00:20:50.809 --> 00:20:51.809
&gt;&gt;Pavel Feldman: Okay, sure.

00:20:51.809 --> 00:20:55.110
I won't be showing it to you.

00:20:55.110 --> 00:20:56.110
Sorry.

00:20:56.110 --> 00:21:00.810
&gt;&gt;Sam Dutton: So on the device in Chrome,
you need to go to settings.

00:21:00.810 --> 00:21:01.810
&gt;&gt;Pavel Feldman: There you go.

00:21:01.810 --> 00:21:08.030
&gt;&gt;Sam Dutton: And from there you can go to
--

00:21:08.030 --> 00:21:09.030
&gt;&gt;Pavel Feldman: Wait, let me do it for you.

00:21:09.030 --> 00:21:10.260
&gt;&gt;Sam Dutton: Yeah.

00:21:10.260 --> 00:21:11.260
Okay.

00:21:11.260 --> 00:21:13.260
Get the right one so I can see what I'm doing.

00:21:13.260 --> 00:21:19.590
In settings, you go to developer tools, then
make sure that enable Web USB debugging is

00:21:19.590 --> 00:21:20.590
enabled.

00:21:20.590 --> 00:21:24.290
That's all you need to do on Chrome on the
device.

00:21:24.290 --> 00:21:32.060
And -- and now we have installed the Android
SDK on the desktop and then run port forwarding,

00:21:32.060 --> 00:21:40.000
ADB port forwarding so that now we can look
at Port 9223, which will show all of the pages

00:21:40.000 --> 00:21:42.710
that are open on the mobile device.

00:21:42.710 --> 00:21:43.910
We'll just open up YouTube now.

00:21:43.910 --> 00:21:47.840
And you can see what's going on there.

00:21:47.840 --> 00:21:48.890
&gt;&gt;Pavel Feldman: Yeah.

00:21:48.890 --> 00:21:50.640
&gt;&gt;Sam Dutton: There we go.

00:21:50.640 --> 00:21:52.390
&gt;&gt;Pavel Feldman: That's opened up.

00:21:52.390 --> 00:21:57.160
&gt;&gt;Sam Dutton: Right, so we have got devtools
there for the mobile device there.

00:21:57.160 --> 00:21:59.049
&gt;&gt;Pavel Feldman: Right.

00:21:59.049 --> 00:22:02.190
[ Applause ]
&gt;&gt;Pavel Feldman: Thank you.

00:22:02.190 --> 00:22:04.460
So now let's see how it works.

00:22:04.460 --> 00:22:06.510
Of course, you can do simple stuff.

00:22:06.510 --> 00:22:11.320
So as I hover here, you get areas in the screen
of data.

00:22:11.320 --> 00:22:15.130
[ Applause ]
&gt;&gt;Pavel Feldman: All right.

00:22:15.130 --> 00:22:18.790
Or you can go vice versa, and Sam could you
click on an image here.

00:22:18.790 --> 00:22:19.790
Yeah.

00:22:19.790 --> 00:22:20.820
And here it is.

00:22:20.820 --> 00:22:24.100
The image that Sam has been clicking.

00:22:24.100 --> 00:22:25.970
You can see it big in here.

00:22:25.970 --> 00:22:30.160
But that's simple, right, you can modify DOM
here or play with the CSS, but that's all

00:22:30.160 --> 00:22:32.860
simple, you can do it with the other tools
as well.

00:22:32.860 --> 00:22:38.960
But as Sam was saying, you could do some interesting
things with the mobile handset.

00:22:38.960 --> 00:22:42.480
For example, let's go to the network.

00:22:42.480 --> 00:22:47.370
While I'm on the network panel, I'm pressing
command R, to reload the target page.

00:22:47.370 --> 00:22:52.490
It usually reloads the target page for the
devtools, but in this case it reloaded the

00:22:52.490 --> 00:22:53.750
YouTube.

00:22:53.750 --> 00:22:58.410
What you can see in here is the precise network
information.

00:22:58.410 --> 00:23:04.770
That with the DNS connecting, sending, waiting
numbers, for your cellular network, for 2G,

00:23:04.770 --> 00:23:09.720
3G, taken from the network stack, from this
various device, so that's the actual information

00:23:09.720 --> 00:23:14.010
in milliseconds came from this native network
stack.

00:23:14.010 --> 00:23:18.559
Of course you have all of the other information,
all of the previews, responses, cookies, everything

00:23:18.559 --> 00:23:22.450
that is available in the devtools, but again
it's the mobile.

00:23:22.450 --> 00:23:24.300
Let's say you want something more complex.

00:23:24.300 --> 00:23:28.450
You want to see how the cell phone performs
on your tasks.

00:23:28.450 --> 00:23:34.480
So I'm reloading the YouTube again, and timeline
shows me not only network events but also

00:23:34.480 --> 00:23:40.640
the style recalculation or JavaScript execution
that happened on this very CPU architecture,

00:23:40.640 --> 00:23:47.030
different from my box, at this very CPU this
handset is running.

00:23:47.030 --> 00:23:48.900
Or even more fun stuff.

00:23:48.900 --> 00:23:52.070
Let's do some breakpoints in here.

00:23:52.070 --> 00:23:53.370
I'm going to set a breakpoint.

00:23:53.370 --> 00:23:55.790
Oh, I have one on the mouse click.

00:23:55.790 --> 00:23:58.430
Can you click it again?

00:23:58.430 --> 00:23:59.430
Here you go.

00:23:59.430 --> 00:24:02.630
You stopped on the breakpoint in the cell
phone, all of the regular devtools features

00:24:02.630 --> 00:24:08.799
are available here, so you can prettyprint,
I can step through my execution and everything

00:24:08.799 --> 00:24:12.200
just works.

00:24:12.200 --> 00:24:19.169
So that's all of the devtools features, full-fledged
developer tools running against the mobile.

00:24:19.169 --> 00:24:27.559
[ Applause ]
&gt;&gt;Pavel Feldman: Take it from there.

00:24:27.559 --> 00:24:33.549
&gt;&gt;Sam Dutton: That's fantastic stuff.

00:24:33.549 --> 00:24:39.160
So the -- I guess looking at the other side
of it, one thing that we've learned after

00:24:39.160 --> 00:24:47.049
kinda 12 months of remote debugging is that
of course in lots of situations, it's most

00:24:47.049 --> 00:24:52.500
the best thing to do to begin by doing as
much as you can on the desktop tools.

00:24:52.500 --> 00:24:58.410
But, of course, for that what you would need
is really accurate emulation tools.

00:24:58.410 --> 00:25:03.140
And the devtools team has been working really
hard on putting a lot of those features into

00:25:03.140 --> 00:25:05.650
those tools, which we will show some of that
now, I think.

00:25:05.650 --> 00:25:06.840
&gt;&gt;Pavel Feldman: Sure.

00:25:06.840 --> 00:25:09.220
&gt;&gt;Sam Dutton: We'll go over here.

00:25:09.220 --> 00:25:11.600
So we go over to YouTube.

00:25:11.600 --> 00:25:17.559
Let's open it over here.

00:25:17.559 --> 00:25:25.309
There we go.

00:25:25.309 --> 00:25:30.870
So we've got -- yeah, we've got the desktop
version there, and the remote version over

00:25:30.870 --> 00:25:31.870
there.

00:25:31.870 --> 00:25:36.960
Now, I would like to go to the settings in
the developer tools.

00:25:36.960 --> 00:25:43.610
And if I go into there, and -- and let's -- let's
go to the user agent panel there.

00:25:43.610 --> 00:25:46.410
You can see the tabs now in the settings.

00:25:46.410 --> 00:25:50.890
And if I click on user agent, now what's -- it's
a Galaxy Nexus --

00:25:50.890 --> 00:25:52.239
&gt;&gt;Pavel Feldman: It's a Galaxy Nexus, yes.

00:25:52.239 --> 00:25:54.070
Does anyone have one?

00:25:54.070 --> 00:25:58.330
&gt;&gt;Sam Dutton: Yes, so I will select that now.

00:25:58.330 --> 00:26:03.309
And -- and that's -- let's refresh that.

00:26:03.309 --> 00:26:11.380
You can see we've got a really accurate representation
of what it actually looks like on the mobile

00:26:11.380 --> 00:26:12.380
device.

00:26:12.380 --> 00:26:17.920
And let's just -- in fact, this little button
here, I don't know if you can see that, it

00:26:17.920 --> 00:26:21.050
kind of swaps from portrait to landscape mode
pretty handy.

00:26:21.050 --> 00:26:25.590
So if I click that and just zoom out again,
you can see now again we have got a really

00:26:25.590 --> 00:26:28.210
accurate representation.

00:26:28.210 --> 00:26:31.700
One thing that we've got here, you know, it's
not kind of faking it.

00:26:31.700 --> 00:26:37.880
You will be able to use Media Queries for
this and it will work, so, yeah, really handy

00:26:37.880 --> 00:26:38.880
stuff.

00:26:38.880 --> 00:26:41.360
I will turn that off.

00:26:41.360 --> 00:26:44.780
[ Applause ]
&gt;&gt;Sam Dutton: And obviously another crucial

00:26:44.780 --> 00:26:51.080
feature when you are trying to build for mobile
devices is touch.

00:26:51.080 --> 00:26:57.750
And if we go to this example, it's -- it gives
us, you know, the ability to see how touch

00:26:57.750 --> 00:26:58.780
works.

00:26:58.780 --> 00:27:01.059
The only problem being --
&gt;&gt;Pavel Feldman: Override.

00:27:01.059 --> 00:27:04.250
You --
&gt;&gt;Sam Dutton: Sorry, I left the override on

00:27:04.250 --> 00:27:05.250
there.

00:27:05.250 --> 00:27:06.250
&gt;&gt;Pavel Feldman: Yeah.

00:27:06.250 --> 00:27:07.789
&gt;&gt;Sam Dutton: Okay, just refresh that.

00:27:07.789 --> 00:27:11.660
And, yeah, so what you can do here is use
touchevents, but, you know, it doesn't work

00:27:11.660 --> 00:27:12.660
obviously.

00:27:12.660 --> 00:27:18.530
What we have in the tools is the ability now
to emulate touchevents and you can set breakpoints

00:27:18.530 --> 00:27:20.490
and so on, there we have it.

00:27:20.490 --> 00:27:23.860
I'm using touch there on the desktop device.

00:27:23.860 --> 00:27:25.450
So, yeah, really handy tool.

00:27:25.450 --> 00:27:30.080
&gt;&gt;Pavel Feldman: So you were just dragging
your mouse and it was emulating the touch.

00:27:30.080 --> 00:27:36.220
&gt;&gt;Sam Dutton: Right, yeah, that's good stuff.

00:27:36.220 --> 00:27:41.020
So, um, I would like to just kind of I don't
know shift focus a little bit now.

00:27:41.020 --> 00:27:46.820
We've talked a lot about the parts of the
tools that make your life easier as a developer.

00:27:46.820 --> 00:27:51.460
Also, you know, thinking about the users of
your apps.

00:27:51.460 --> 00:27:53.740
What's in it for them?

00:27:53.740 --> 00:27:57.929
And, you know, particularly in this world
we have now where users really come to expect

00:27:57.929 --> 00:28:03.669
from Web apps these, you know, these new features
that really push the limits of the CPU and

00:28:03.669 --> 00:28:10.679
GPU and memory and so on and, you know, in
that context, in particular, how do we -- how

00:28:10.679 --> 00:28:12.180
do we measure responsiveness?

00:28:12.180 --> 00:28:17.070
You know, this idea like what is it, how do
we measure it?

00:28:17.070 --> 00:28:21.490
And luckily, we have some tools for that.

00:28:21.490 --> 00:28:25.750
I was thinking in particular, you know, a
website you may have seen called HTML5rocks.

00:28:25.750 --> 00:28:31.270
It's got a really nice interface, really great
content.

00:28:31.270 --> 00:28:34.230
But we've noticed some, you know, just slight
stuttering, it's hard to see here.

00:28:34.230 --> 00:28:41.450
But some slight stuttering with scrolling
on the page and, you know, the thing was coming

00:28:41.450 --> 00:28:44.880
at that problem -- you know, there are a million
things it could have been.

00:28:44.880 --> 00:28:48.950
And what I wanted to know from Pavel is how
do we approach that problem where you really

00:28:48.950 --> 00:28:51.320
kind of have no idea where to start.

00:28:51.320 --> 00:28:54.690
So, yeah, I thought maybe you could give us
hints there.

00:28:54.690 --> 00:28:55.730
&gt;&gt;Pavel Feldman: Yeah, of course.

00:28:55.730 --> 00:28:59.490
So you start with the timeline when you don't
know what's happening in the page, especially

00:28:59.490 --> 00:29:03.330
if you have performance issues in the page,
you start with the timeline.

00:29:03.330 --> 00:29:05.430
So let us record a timeline in here.

00:29:05.430 --> 00:29:11.250
I will do devtools to get a bit more real
estate in here.

00:29:11.250 --> 00:29:16.840
And in the timeline, I am pressing record
the record button and I go to the page, and

00:29:16.840 --> 00:29:22.740
I scroll it a bit, and then I go back and
turn off the recording.

00:29:22.740 --> 00:29:25.350
So what I can see here, let me zoom into a
window here.

00:29:25.350 --> 00:29:29.850
What I can see here is a lot of events are
happening within the browser.

00:29:29.850 --> 00:29:35.340
And timeline not only shows us the JavaScript
events, it shows all of the native events,

00:29:35.340 --> 00:29:39.090
styles, painting, everything that happens
in the browser.

00:29:39.090 --> 00:29:43.510
While hovering over these elements, you can
see what is actually taking time.

00:29:43.510 --> 00:29:48.150
Yellow is scripting, blue is loading, we didn't
have any and green is painting.

00:29:48.150 --> 00:29:51.840
So this picture gives you a very good understanding
of what's slow.

00:29:51.840 --> 00:29:53.060
&gt;&gt;Sam Dutton: Yeah.

00:29:53.060 --> 00:29:54.060
That's good.

00:29:54.060 --> 00:29:55.060
That's good.

00:29:55.060 --> 00:30:00.130
I mean, the only problem is, you know, I remember
when I first saw this timeline thing I thought,

00:30:00.130 --> 00:30:01.540
wow, that's lot of information.

00:30:01.540 --> 00:30:03.510
But it's kind of useless, you know.

00:30:03.510 --> 00:30:05.010
It's like where do we go from there?

00:30:05.010 --> 00:30:09.160
It doesn't really give me a picture of what's
happening each time there's a slowness --

00:30:09.160 --> 00:30:10.640
&gt;&gt;Pavel Feldman: I give up.

00:30:10.640 --> 00:30:15.559
So we've gotten exactly this feedback from
you and we thought we need something better.

00:30:15.559 --> 00:30:20.230
And with this version of Chrome we are introducing
a new frame mode of the timeline.

00:30:20.230 --> 00:30:23.590
Let me zoom into a couple of frames.

00:30:23.590 --> 00:30:27.740
So with these frame mode in the timeline,
we are defining a new term, a frame.

00:30:27.740 --> 00:30:33.850
And the frame is the amount of time that the
browser needs to update the screen.

00:30:33.850 --> 00:30:35.190
It includes everything.

00:30:35.190 --> 00:30:39.330
JavaScript processing, recalculation of the
styles, painting, everything is happening

00:30:39.330 --> 00:30:43.570
within the single frame and then your user
sees the picture.

00:30:43.570 --> 00:30:45.640
You can see the same nice color coding in
here.

00:30:45.640 --> 00:30:51.530
Green is paint, purple is layout, styles and
the yellow is scripting.

00:30:51.530 --> 00:30:55.370
But more importantly, we set a baseline to
you.

00:30:55.370 --> 00:30:57.179
And this baseline is 60-hertz.

00:30:57.179 --> 00:30:59.520
60 frames per second.

00:30:59.520 --> 00:31:02.490
That's what browser expects from you.

00:31:02.490 --> 00:31:05.400
You need to generate 60 frames each second.

00:31:05.400 --> 00:31:08.850
It gives you only 16 milliseconds per frame.

00:31:08.850 --> 00:31:12.919
That's the same vsync signal that we've been
talking about on the keynote.

00:31:12.919 --> 00:31:20.210
Now, if we look at this very page, we can
see that the frame was taking, in fact, 45

00:31:20.210 --> 00:31:21.440
milliseconds.

00:31:21.440 --> 00:31:26.500
And it is above the baseline of the 60 frames
per second.

00:31:26.500 --> 00:31:28.970
This solid line in the middle.

00:31:28.970 --> 00:31:31.610
So it's not JavaScript in your case.

00:31:31.610 --> 00:31:33.120
It's not styles.

00:31:33.120 --> 00:31:34.120
It's the paint.

00:31:34.120 --> 00:31:35.350
You must be painting something very beautiful.

00:31:35.350 --> 00:31:37.919
&gt;&gt;Sam Dutton: Yeah, yeah, no I know.

00:31:37.919 --> 00:31:38.919
[Laughter].

00:31:38.919 --> 00:31:44.110
&gt;&gt;Sam Dutton: What I know is the culprit is
-- yeah, some there's some heavy duty CSS

00:31:44.110 --> 00:31:46.830
in there, a lot of gradients.

00:31:46.830 --> 00:31:49.090
&gt;&gt;Pavel Feldman: Oh, I know!

00:31:49.090 --> 00:31:50.900
[Laughter]
&gt;&gt;Sam Dutton: Aesthetic.

00:31:50.900 --> 00:31:52.250
Nice background image.

00:31:52.250 --> 00:31:55.320
&gt;&gt;Pavel Feldman: I know it's nice, but it's
slow.

00:31:55.320 --> 00:32:00.830
I removed all of them, and the page still
has that background.

00:32:00.830 --> 00:32:01.830
What's wrong?

00:32:01.830 --> 00:32:02.830
Okay.

00:32:02.830 --> 00:32:03.830
Let's inspect.

00:32:03.830 --> 00:32:05.000
Oh, are there are more.

00:32:05.000 --> 00:32:07.630
[Laughter]
&gt;&gt;Pavel Feldman: And those are the same.

00:32:07.630 --> 00:32:10.799
You are using all over again the same gradients.

00:32:10.799 --> 00:32:12.679
&gt;&gt;Sam Dutton: Twice is good.

00:32:12.679 --> 00:32:13.679
[Laughter].

00:32:13.679 --> 00:32:14.679
&gt;&gt;Pavel Feldman: Okay.

00:32:14.679 --> 00:32:15.950
Maybe it was making it slow.

00:32:15.950 --> 00:32:16.950
Okay.

00:32:16.950 --> 00:32:19.140
Anyways, now that I've disabled everything
and you can't really tell the difference,

00:32:19.140 --> 00:32:21.000
can you?

00:32:21.000 --> 00:32:24.840
Let me go back to the timeline and start recording.

00:32:24.840 --> 00:32:27.460
And let me scroll here a bit.

00:32:27.460 --> 00:32:30.090
Go back and stop my timeline.

00:32:30.090 --> 00:32:31.090
[Laughter].

00:32:31.090 --> 00:32:35.950
[ Applause ]
&gt;&gt;Pavel Feldman: There's nice 16 milliseconds

00:32:35.950 --> 00:32:38.150
frame, thank you.

00:32:38.150 --> 00:32:42.539
&gt;&gt;Sam Dutton: Yeah, okay, well done.

00:32:42.539 --> 00:32:46.940
&gt;&gt;&gt; [ Inaudible - no mic ]
&gt;&gt;Pavel Feldman: Okay.

00:32:46.940 --> 00:32:48.790
Let's take it to the Q and A.
Thank you.

00:32:48.790 --> 00:32:57.131
&gt;&gt;Sam Dutton: Yeah, and if you want to learn
more about that stuff, after us there's the

00:32:57.131 --> 00:32:58.131
jank buster session.

00:32:58.131 --> 00:32:59.131
It will go into more detail.

00:32:59.131 --> 00:33:00.131
&gt;&gt;Pavel Feldman: Right.

00:33:00.131 --> 00:33:01.131
So that was smooth animations.

00:33:01.131 --> 00:33:06.290
Wrapping up, please measure performance of
your animations and scrolling.

00:33:06.290 --> 00:33:11.420
Now we have a good baseline, 16 milliseconds,
you will know for sure, (indiscernible) smooth

00:33:11.420 --> 00:33:14.710
has now a value, it's 60.

00:33:14.710 --> 00:33:16.090
Use this time wisely.

00:33:16.090 --> 00:33:17.450
Think as game developers.

00:33:17.450 --> 00:33:20.980
Game developers don't have much time for a
frame.

00:33:20.980 --> 00:33:24.570
Tools will help you narrowing down the problem,
whether it's paint or JavaScript.

00:33:24.570 --> 00:33:30.740
After you know the paint events and you need
to bisect those, regress, find where the culprit

00:33:30.740 --> 00:33:31.740
is.

00:33:31.740 --> 00:33:32.980
For the JavaScript we have better tools.

00:33:32.980 --> 00:33:37.720
We will point you to the very line of the
source code that is updating the layout or

00:33:37.720 --> 00:33:39.289
recalculating styles.

00:33:39.289 --> 00:33:41.440
So you will know what is wrong.

00:33:41.440 --> 00:33:46.190
And as Sam mentioned, in this very room, right
after ours, there is going to be an extended

00:33:46.190 --> 00:33:52.299
session on the frames mode for the timeline
and the GPU team from Chrome is going to drive

00:33:52.299 --> 00:33:53.299
it.

00:33:53.299 --> 00:33:54.890
So make sure you don't miss it.

00:33:54.890 --> 00:33:56.980
&gt;&gt;Sam Dutton: Yeah, great stuff.

00:33:56.980 --> 00:33:58.750
Of course, Pavel was kind of cheating there.

00:33:58.750 --> 00:34:02.890
You know, you can always just delete stuff
to make a web app work faster.

00:34:02.890 --> 00:34:04.610
&gt;&gt;Pavel Feldman: You can?

00:34:04.610 --> 00:34:05.610
[Laughter].

00:34:05.610 --> 00:34:07.300
&gt;&gt;Sam Dutton: That's true.

00:34:07.300 --> 00:34:12.159
But, you know, I mean we all know that these
situations, as much as you optimize everything,

00:34:12.159 --> 00:34:17.810
all your code, you get to a point sometimes
where you've got some code that is just inherently

00:34:17.810 --> 00:34:18.810
CPU intensive, long running.

00:34:18.810 --> 00:34:25.030
And, you know, I was thinking about how to
use the devtools to deal with that.

00:34:25.030 --> 00:34:28.589
And I was thinking of -- you know, the prettyprint
function itself.

00:34:28.589 --> 00:34:33.500
What I have noticed with that is that, you
know, it's obviously doing a lot of work but

00:34:33.500 --> 00:34:37.710
it doesn't seem to freeze up the interface,
so I have asked Pavel about how that works.

00:34:37.710 --> 00:34:41.320
&gt;&gt;Pavel Feldman: Right, so it does use more
than 16 milliseconds of time.

00:34:41.320 --> 00:34:45.970
We are using WebWorkers to move the work off
into the other thread.

00:34:45.970 --> 00:34:47.810
&gt;&gt;Sam Dutton: Okay, Yeah.

00:34:47.810 --> 00:34:49.320
I mean, I always feel like I should use WebWorkers.

00:34:49.320 --> 00:34:51.889
&gt;&gt;Pavel Feldman: Do you use WebWorkers?

00:34:51.889 --> 00:34:53.119
Not much, okay.

00:34:53.119 --> 00:34:57.599
&gt;&gt;Sam Dutton: But I always sort of shy away
from it, because I feel like they are hard

00:34:57.599 --> 00:35:00.290
to debug, you know, like where do you start?

00:35:00.290 --> 00:35:02.190
&gt;&gt;Pavel Feldman: Oh, is it?

00:35:02.190 --> 00:35:03.190
[Laughter].

00:35:03.190 --> 00:35:06.109
&gt;&gt;Pavel Feldman: Let's try that.

00:35:06.109 --> 00:35:12.190
As I mentioned we will be focusing on the
WebWorkers, so let me go back to the page

00:35:12.190 --> 00:35:14.849
where we were debugging devtools, for the
devtools.

00:35:14.849 --> 00:35:17.690
We will be interested in the source code.

00:35:17.690 --> 00:35:19.060
Do we have any?

00:35:19.060 --> 00:35:20.080
Well, let's reload.

00:35:20.080 --> 00:35:21.110
Let's get some.

00:35:21.110 --> 00:35:22.820
Yeah, we've got some files.

00:35:22.820 --> 00:35:23.820
Okay.

00:35:23.820 --> 00:35:26.450
So here is the source code.

00:35:26.450 --> 00:35:31.980
As you probably know, when you press this
little button, it gets prettyprinted, really

00:35:31.980 --> 00:35:32.980
nice.

00:35:32.980 --> 00:35:34.950
And as I mentioned, it happens in the worker.

00:35:34.950 --> 00:35:38.310
So let's try going ahead and debug it.

00:35:38.310 --> 00:35:46.690
I'm going to the debugger sidebar, under the
workers tab I choose to pause on start.

00:35:46.690 --> 00:35:51.690
So what it should do, when the worker is created
for your page, it should stop it before the

00:35:51.690 --> 00:35:55.300
very first statement this worker executes.

00:35:55.300 --> 00:35:57.450
And we should be able to debug it.

00:35:57.450 --> 00:36:01.380
Let's try it out.

00:36:01.380 --> 00:36:02.380
Okay.

00:36:02.380 --> 00:36:06.950
Now that we have three windows with the devtools
on the screen, I feel I must go over them

00:36:06.950 --> 00:36:07.950
again.

00:36:07.950 --> 00:36:09.940
So the one to the left, is your Web page.

00:36:09.940 --> 00:36:12.690
It's just me, I have the devtools, sorry.

00:36:12.690 --> 00:36:14.270
One to the right is the devtools.

00:36:14.270 --> 00:36:18.010
And the one in the middle is the devtools
for the worker.

00:36:18.010 --> 00:36:19.010
[Laughter].

00:36:19.010 --> 00:36:20.010
&gt;&gt;Sam Dutton: Got it.

00:36:20.010 --> 00:36:22.740
&gt;&gt;Pavel Feldman: Yeah, is that okay?

00:36:22.740 --> 00:36:24.140
Right.

00:36:24.140 --> 00:36:28.930
So I can step through the execution here and
I can see that I'm debugging the worker.

00:36:28.930 --> 00:36:30.410
The worker is stopped.

00:36:30.410 --> 00:36:33.750
But he can scroll the page.

00:36:33.750 --> 00:36:37.410
So the page is not blocked by the worker.

00:36:37.410 --> 00:36:42.800
So this is not the fake worker emulation using
iFrames, this is the real stuff, native workers

00:36:42.800 --> 00:36:43.800
being debugged.

00:36:43.800 --> 00:36:50.530
Now, of course you can use all of the debugging
functions in here or you can go and collect

00:36:50.530 --> 00:36:55.740
CPU profiles or take heap snapshots, do the
timeline for the worker or use console.

00:36:55.740 --> 00:37:01.290
This devtools window is working in the context
of your worker.

00:37:01.290 --> 00:37:08.400
And if you type window in here, there is no
window and there's no document.

00:37:08.400 --> 00:37:10.560
Who are you?

00:37:10.560 --> 00:37:14.380
[Laughter]
&gt;&gt;Pavel Feldman: It is dedicated worker context.

00:37:14.380 --> 00:37:17.230
So this is in fact the worker object.

00:37:17.230 --> 00:37:23.300
Now, we support debugging workers, the dedicated
workers and the shared workers.

00:37:23.300 --> 00:37:30.540
And the way to start debugging shared workers
is to visit Chrome Inspect.

00:37:30.540 --> 00:37:35.200
That's where all of the inspectable properties
of Chrome are represented, be it page or an

00:37:35.200 --> 00:37:39.600
extension or a background page, application,
shared worker, everything you can start from

00:37:39.600 --> 00:37:40.600
here.

00:37:40.600 --> 00:37:44.660
You click inspect and you are brought to the
right window.

00:37:44.660 --> 00:37:47.380
So that's the WebWorker story.

00:37:47.380 --> 00:37:55.980
[ Applause ]
&gt;&gt;Sam Dutton: I may even use them now.

00:37:55.980 --> 00:38:02.290
We talked a lot about memory, but of course,
there's always some kind of tradeoff with

00:38:02.290 --> 00:38:03.820
performance.

00:38:03.820 --> 00:38:07.270
Well, or is there?

00:38:07.270 --> 00:38:15.540
We did some testing of Google Web apps, and
you can see on the graph here, the yellow

00:38:15.540 --> 00:38:22.610
line at the top there represents overtime
memory consumption, and the blue with a high

00:38:22.610 --> 00:38:28.670
level variance represents the measure of the
projection of latency.

00:38:28.670 --> 00:38:33.720
One thing we're finding with Web apps, I think
this is a common experience now, people are

00:38:33.720 --> 00:38:36.970
using Web Apps for much longer than they used
to.

00:38:36.970 --> 00:38:41.460
We have users of Google Apps like running
them for days.

00:38:41.460 --> 00:38:45.470
So you need to be aware of that.

00:38:45.470 --> 00:38:51.839
What we learned was obviously that there were
memory leaks and that we could fix, and the

00:38:51.839 --> 00:38:56.680
most common source of that was problematic
-- in fact, it was problematic usage of event

00:38:56.680 --> 00:38:57.680
listeners.

00:38:57.680 --> 00:38:59.290
&gt;&gt;Pavel Feldman: Okay.

00:38:59.290 --> 00:39:02.470
So I think we have some tools for that.

00:39:02.470 --> 00:39:03.850
&gt;&gt;Sam Dutton: Yeah, indeed.

00:39:03.850 --> 00:39:10.089
&gt;&gt;Pavel Feldman: And we're going to explore
a simple example of the memory leak, and --

00:39:10.089 --> 00:39:11.089
&gt;&gt;Sam Dutton: That's a lovely website.

00:39:11.089 --> 00:39:12.089
&gt;&gt;Pavel Feldman: Yeah.

00:39:12.089 --> 00:39:19.830
So I'm going to the source, and let us see
the source code.

00:39:19.830 --> 00:39:25.580
So what it does is every time I click "say
hello", it creates an element.

00:39:25.580 --> 00:39:27.130
Hello, there.

00:39:27.130 --> 00:39:30.570
And it adds it to the result.

00:39:30.570 --> 00:39:33.760
But then in a second it just removed them
all.

00:39:33.760 --> 00:39:38.160
But they all are still here in this array.

00:39:38.160 --> 00:39:41.400
Let's see how the tool handles that memory
leak case.

00:39:41.400 --> 00:39:45.780
But now let's imagine we don't know it all
and we start from scratch.

00:39:45.780 --> 00:39:49.089
Can you forget everything that I've just said?

00:39:49.089 --> 00:39:59.480
I'm going to start recording the timeline,
and a number of clicks in here, and let me

00:39:59.480 --> 00:40:02.280
undock the timeline.

00:40:02.280 --> 00:40:03.280
Oops.

00:40:03.280 --> 00:40:08.760
And we are going to look at the memory view
for it, and let me face the window.

00:40:08.760 --> 00:40:11.160
What you can see here is the heap graph.

00:40:11.160 --> 00:40:16.450
That's the memory your app is consuming at
the top, so it's a bit more than a megabyte.

00:40:16.450 --> 00:40:23.740
Then there is a regular timeline, and then
there is the memory counters, DOM counters,

00:40:23.740 --> 00:40:25.980
and event list counters represented in here.

00:40:25.980 --> 00:40:33.250
You can see that the number of DOM notes increased
from 18 to 24 as I was clicking, and the document

00:40:33.250 --> 00:40:38.880
is still alone, and there are two new event
listeners in here.

00:40:38.880 --> 00:40:45.750
If I click on the step, I will see that there
is an event associated with that.

00:40:45.750 --> 00:40:55.920
So every time it grows, there is some event
in here, and indeed the link, we can hover

00:40:55.920 --> 00:41:02.400
over and jump to the line that was creating
that object, of course, but more importantly

00:41:02.400 --> 00:41:06.750
we now know what user action is causing the
leak.

00:41:06.750 --> 00:41:15.300
Now that we know what is the problem, we'll
find the actual location of that object.

00:41:15.300 --> 00:41:22.040
And for that we turn to the profiler, and
in the profiler, I'm going to -- let me go

00:41:22.040 --> 00:41:23.040
back to the page.

00:41:23.040 --> 00:41:25.830
I'm going to take a heap snapshot.

00:41:25.830 --> 00:41:33.070
Let me say hello a few more times and take
another heap snapshot, and let's see what

00:41:33.070 --> 00:41:36.280
it is all about.

00:41:36.280 --> 00:41:42.300
So the heap snapshot is in fact the snapshot
of the JavaScript heap of running application.

00:41:42.300 --> 00:41:49.950
And the summary view that I'm looking at is
the summary for the heap where all the objects

00:41:49.950 --> 00:41:51.930
are grouped by their type.

00:41:51.930 --> 00:41:56.710
For example, those are API functions and those
are date objects.

00:41:56.710 --> 00:41:58.390
Those are Chrome events.

00:41:58.390 --> 00:42:00.700
So everything is grouped in here.

00:42:00.700 --> 00:42:06.970
For each of the objects I can see -- for each
of the group I can see the object count, shadow

00:42:06.970 --> 00:42:12.230
size and the retain size, so its own size
and the size of the tree it is holding.

00:42:12.230 --> 00:42:20.579
Now, if I go to the second snapshot, that
was taken after my actions that are supposed

00:42:20.579 --> 00:42:28.750
to leak, I can compare it to the first one.

00:42:28.750 --> 00:42:36.160
[ APPLAUSE ]
And in the comparison mode, I can see that

00:42:36.160 --> 00:42:39.190
there are 7 new objects.

00:42:39.190 --> 00:42:44.000
And if I hover over these objects, you get
this hover card that you got used to while

00:42:44.000 --> 00:42:49.570
debugging, and if I select this object, it
will show me the retaining trees for this

00:42:49.570 --> 00:42:50.630
object.

00:42:50.630 --> 00:42:53.740
Those are the guys that reference my object.

00:42:53.740 --> 00:42:57.349
And those are the real cause of the memory
leak.

00:42:57.349 --> 00:42:59.720
In this case, I have an array.

00:42:59.720 --> 00:43:08.260
And in its 13th slot there is this paragraph
element, and, you know these dollar zero that

00:43:08.260 --> 00:43:15.200
refers the currently selected element in the
elements panel, it also works in here.

00:43:15.200 --> 00:43:19.190
So from this panel you can jump into the source
-- into the console, into the running object

00:43:19.190 --> 00:43:21.800
and explore it there.

00:43:21.800 --> 00:43:24.560
Let's see what is holding this array?

00:43:24.560 --> 00:43:25.560
It's a window.

00:43:25.560 --> 00:43:26.760
It's a global object.

00:43:26.760 --> 00:43:32.609
And the property name on it is "holding",
so if I do dollar zero, that's my window,

00:43:32.609 --> 00:43:42.320
and if I do dollar zero holding, that's the
array that was holding the paragraph element.

00:43:42.320 --> 00:43:49.010
So to recap that, if you don't know where
your memory leak is or where is the unbonded

00:43:49.010 --> 00:43:54.359
cache that you're using, you should go to
the time line, then you perform your actions

00:43:54.359 --> 00:43:58.160
and look at the spikes in the DOM node counters.

00:43:58.160 --> 00:44:03.350
There is also garbage collection button that
you can press in the timeline to collect the

00:44:03.350 --> 00:44:06.579
garbage that should bring everything back
to normal.

00:44:06.579 --> 00:44:10.420
If it doesn't, this means you have a leak.

00:44:10.420 --> 00:44:15.380
Now that you have tracked down the user scenario
that is responsible for your leak, start using

00:44:15.380 --> 00:44:16.410
the heap profiler.

00:44:16.410 --> 00:44:22.190
You take a heap snapshot, then you do your
action, you take another snapshot and then

00:44:22.190 --> 00:44:23.770
you compare the two.

00:44:23.770 --> 00:44:28.320
And once you've seen the leak objects, the
objects that should not be there, look for

00:44:28.320 --> 00:44:31.540
suspicious classes that you own the code,
you know it.

00:44:31.540 --> 00:44:37.100
Then track the retainers in the bottom part
of the screen to track them to the global

00:44:37.100 --> 00:44:41.690
objects and you will see the exact path that
is leaking memory.

00:44:41.690 --> 00:44:46.180
There are more complicated techniques for
finding memory leaks that are more efficient

00:44:46.180 --> 00:44:52.200
such as three snapshot technology where you
take three snapshots, then you look at the

00:44:52.200 --> 00:44:58.730
third, and filter out everything that has
been allocated between one and two, or actually

00:44:58.730 --> 00:45:03.310
show everything that has been allocated between
one and two, but it's a different technique.

00:45:03.310 --> 00:45:04.340
It's more complex.

00:45:04.340 --> 00:45:08.660
It's beyond this session, but we are here
at the Chrome booth, so if you have questions

00:45:08.660 --> 00:45:12.170
there, make sure you come and ask them there.

00:45:12.170 --> 00:45:13.170
Okay.

00:45:13.170 --> 00:45:17.650
&gt;&gt;Sam Dutton: Thanks very much, Pavel, really
useful tools for dealing with memory as well

00:45:17.650 --> 00:45:19.370
as performance.

00:45:19.370 --> 00:45:24.580
We don't have much more time, but I just wanted
to mention a couple of more features that

00:45:24.580 --> 00:45:28.410
have come into the tools now, really useful
stuff, particularly in relation to clientside

00:45:28.410 --> 00:45:29.410
story.

00:45:29.410 --> 00:45:30.410
&gt;&gt;Pavel Feldman: It's not the end.

00:45:30.410 --> 00:45:34.339
&gt;&gt;Sam Dutton: Have a look at the features
for index DB and App Cache.

00:45:34.339 --> 00:45:36.110
Have you seen the web components?

00:45:36.110 --> 00:45:41.310
We have great tools for shadow DOM inspection,
just go to the elements panel and drill down

00:45:41.310 --> 00:45:44.510
into an element and you will see the shadow
DOM compliance.

00:45:44.510 --> 00:45:46.760
It's great stuff.

00:45:46.760 --> 00:45:51.359
My favorite thing of all, Pavel wouldn't let
me demonstrate is source maps.

00:45:51.359 --> 00:45:57.180
These are really easy to work with, you know,
you use a tool like closure to minify your

00:45:57.180 --> 00:46:02.810
code, at the same time you make a source map
file, you put a link to the source map file

00:46:02.810 --> 00:46:05.280
in the minified code, and that's it.

00:46:05.280 --> 00:46:11.320
When you use that code in the devtools, you'll
see the human readable version seamlessly

00:46:11.320 --> 00:46:12.320
in place.

00:46:12.320 --> 00:46:13.320
It makes life much easier.

00:46:13.320 --> 00:46:14.320
&gt;&gt;Pavel Feldman: Come on.

00:46:14.320 --> 00:46:15.320
Come on.

00:46:15.320 --> 00:46:16.320
How can you love a feature like that?

00:46:16.320 --> 00:46:19.260
Here is my favorite one.

00:46:19.260 --> 00:46:21.609
Here is the WebKit, right?

00:46:21.609 --> 00:46:23.660
Let us go back there.

00:46:23.660 --> 00:46:26.960
No, let's do Google.

00:46:26.960 --> 00:46:31.970
So in the Dev Tools, right, I'm a developer,
and where is everything in here?

00:46:31.970 --> 00:46:32.970
Okay.

00:46:32.970 --> 00:46:38.610
And there's Google, and sometimes I am ambitious
and I kind of think, okay, let me change things

00:46:38.610 --> 00:46:45.510
here, and it will be a Google search, supersearch
-- it didn't apply.

00:46:45.510 --> 00:46:46.510
Why?

00:46:46.510 --> 00:46:48.110
They are fooling me.

00:46:48.110 --> 00:46:49.290
Come on.

00:46:49.290 --> 00:46:51.060
Do it again.

00:46:51.060 --> 00:46:53.420
&gt;&gt;Sam Dutton: That's weird.

00:46:53.420 --> 00:46:55.190
&gt;&gt;Pavel Feldman: Yeah.

00:46:55.190 --> 00:46:56.680
Oh, it wasn't title.

00:46:56.680 --> 00:46:57.680
Okay.

00:46:57.680 --> 00:46:58.680
Sorry.

00:46:58.680 --> 00:46:59.680
I'm feeling very lucky.

00:46:59.680 --> 00:47:01.190
Are you working for me?

00:47:01.190 --> 00:47:02.190
Okay.

00:47:02.190 --> 00:47:03.190
Good.

00:47:03.190 --> 00:47:04.190
Then I have more ambitious, I think.

00:47:04.190 --> 00:47:05.190
Okay.

00:47:05.190 --> 00:47:07.320
So that color is not -- I want a red one.

00:47:07.320 --> 00:47:11.190
And then I think, okay, this Nexus 7 is really
cool.

00:47:11.190 --> 00:47:19.010
I actually go and list the font size for it,
and do the shift up.

00:47:19.010 --> 00:47:24.060
Yeah, and I think, okay, so this is enough
clutter here, right?

00:47:24.060 --> 00:47:27.690
I need to get rid of it, and go and delete
it all, and you know what, the search field,

00:47:27.690 --> 00:47:29.070
I don't like it either.

00:47:29.070 --> 00:47:30.070
I'll just delete it all.

00:47:30.070 --> 00:47:31.070
&gt;&gt;Sam Dutton: That's too complex.

00:47:31.070 --> 00:47:32.070
&gt;&gt;Pavel Feldman: Come on.

00:47:32.070 --> 00:47:37.190
And then I think, okay, I've done a lot -- why
can't I delete it?

00:47:37.190 --> 00:47:40.960
Come on, Google, where is it?

00:47:40.960 --> 00:47:41.960
Yeah.

00:47:41.960 --> 00:47:49.560
And I think, okay, that's enough, and then
I calm down, I think I like it the way it

00:47:49.560 --> 00:47:57.520
was, and I press command C and things are
undone, or I press shift command C and things

00:47:57.520 --> 00:47:59.190
are redone.

00:47:59.190 --> 00:48:05.599
So we have the complete undo-redo stuck in
here that is more importantly retaining the

00:48:05.599 --> 00:48:11.359
identity of the nodes, so when I'm deleting
nodes or recreating nodes, those are the same

00:48:11.359 --> 00:48:16.710
objects, and your JavaScript points there
and your program remains functional with that.

00:48:16.710 --> 00:48:20.750
So that's a cool feature.

00:48:20.750 --> 00:48:24.690
[ APPLAUSE ]
&gt;&gt;Sam Dutton: Go back.

00:48:24.690 --> 00:48:25.690
Go back.

00:48:25.690 --> 00:48:27.619
Come on, while you're there, someone asked
for this, do command -- what is it, command

00:48:27.619 --> 00:48:28.619
plus.

00:48:28.619 --> 00:48:29.890
&gt;&gt;Pavel Feldman: No, I won't show you.

00:48:29.890 --> 00:48:32.370
I'll show you the question mark.

00:48:32.370 --> 00:48:36.510
The question mark is where you get all the
shortcuts to all the features that we have,

00:48:36.510 --> 00:48:42.740
the ones with the shortcuts, including the
ones that go to file, go to line, and goes

00:48:42.740 --> 00:48:45.110
to your font size.

00:48:45.110 --> 00:48:47.630
&gt;&gt;Sam Dutton: Okay.

00:48:47.630 --> 00:48:51.460
So, yeah, we've been using Chrome Canary today.

00:48:51.460 --> 00:48:55.359
Would recommend if you're using the devtools
a lot, that you give Chrome Canary a try,

00:48:55.359 --> 00:49:00.089
you get all the newest features and also you
can give us feedback on how you would like

00:49:00.089 --> 00:49:04.240
to see the devtools in the future.

00:49:04.240 --> 00:49:08.430
And if you've never filed a bug, you know,
today's the day, new.crbug.com.

00:49:08.430 --> 00:49:09.520
Go there to file bugs, make feature requests,
anything Chrome related particularly with

00:49:09.520 --> 00:49:19.420
the devtools, do it now, yeah, that's the
place to go for any of you stuff.

00:49:19.420 --> 00:49:25.849
So, yeah, that's it from us, thank you very
much.

00:49:25.849 --> 00:49:27.739
Indeed.

00:49:27.739 --> 00:49:35.510
[ APPLAUSE ]
&gt;&gt;Sam Dutton: We've got about -- yeah, about

00:49:35.510 --> 00:49:40.740
7 minutes for questions so if you would like
to ask questions, come up to the mics in the

00:49:40.740 --> 00:49:41.740
aisles there.

00:49:41.740 --> 00:49:45.590
&gt;&gt;&gt; I thought of one more question, you're
taking requests for improvements to devtools.

00:49:45.590 --> 00:49:49.210
Remote debugging is really cool, but it doesn't
work when you're offline, because it hits

00:49:49.210 --> 00:49:50.210
app spot first.

00:49:50.210 --> 00:49:53.210
It makes it really hard to do like mobile
development on an airplane.

00:49:53.210 --> 00:49:58.140
&gt;&gt;Pavel Feldman: So I can give you advice
how to work around it, and then we'll fix

00:49:58.140 --> 00:49:59.140
it.

00:49:59.140 --> 00:50:04.260
So the workaround is to save that page that
is served alt app engine, and it's just a

00:50:04.260 --> 00:50:09.869
Web app, and you save it, you open it, and
you point to your Chrome instance or your

00:50:09.869 --> 00:50:11.750
mobile instance and it will work.

00:50:11.750 --> 00:50:15.560
No need for a cloud there.

00:50:15.560 --> 00:50:17.050
Okay?

00:50:17.050 --> 00:50:20.250
&gt;&gt;&gt; Is there a way to see the packets in the
Web socket?

00:50:20.250 --> 00:50:25.640
&gt;&gt;Pavel Feldman: Yes, in fact you can see
the packets on the Web socket.

00:50:25.640 --> 00:50:33.060
And let me show it to you, so that's -- okay.

00:50:33.060 --> 00:50:37.870
I'm going to use a -- we are using those,
right, for the devtool itself, where are you

00:50:37.870 --> 00:50:39.740
-- where are you?

00:50:39.740 --> 00:50:40.740
Okay.

00:50:40.740 --> 00:50:47.490
So I'll need to do devtool on devtool on devtool,
but that's probably fine.

00:50:47.490 --> 00:50:49.890
You got used to it.

00:50:49.890 --> 00:50:56.119
And in the network, I don't need to record.

00:50:56.119 --> 00:50:59.700
I'll just do some stuff.

00:50:59.700 --> 00:51:06.200
And you should see the packets in here, and
if they aren't, we just can't find them, so

00:51:06.200 --> 00:51:12.390
the idea is that you can see the resource
responsible for the Web socket packet in here,

00:51:12.390 --> 00:51:17.880
and in the editing part of this screen, you
will see Web socket frames tab.

00:51:17.880 --> 00:51:23.430
I can't show it to you right now, but it's
there, and it is going to be stable in Chrome

00:51:23.430 --> 00:51:24.430
21.

00:51:24.430 --> 00:51:25.530
It's a recent feature.

00:51:25.530 --> 00:51:27.220
&gt;&gt;Sam Dutton: And another?

00:51:27.220 --> 00:51:30.010
&gt;&gt;&gt; Hi, thank you guys for the presentation.

00:51:30.010 --> 00:51:32.330
It was real cool.

00:51:32.330 --> 00:51:40.050
So I have a question: Is it possible to simulate
the http request that like that made from

00:51:40.050 --> 00:51:46.750
UI, or, you know, you click a button, you
have a bunch of requests, is it possible to

00:51:46.750 --> 00:51:51.650
simulate a bunch of them and override some
headers, override a script that can do it.

00:51:51.650 --> 00:51:54.240
&gt;&gt;Pavel Feldman: Not yet.

00:51:54.240 --> 00:52:00.950
XHR replay simulation is very high in our
to-do list, so we are going to make it soon,

00:52:00.950 --> 00:52:02.589
but it's not there yet.

00:52:02.589 --> 00:52:06.650
&gt;&gt;Sam Dutton: Yeah, lots of people are asking
for that.

00:52:06.650 --> 00:52:07.650
&gt;&gt;&gt; Thanks.

00:52:07.650 --> 00:52:10.350
&gt;&gt;&gt; So do these techniques -- I mean the kind
of examples that you showed were a little

00:52:10.350 --> 00:52:16.240
bit, you know, contrived obviously for the
demo, but let's say Gmail, does Gmail use

00:52:16.240 --> 00:52:21.900
the Chrome devtools in the same way that you're
doing it or do they use different tools or

00:52:21.900 --> 00:52:27.240
do they have different techniques in how they
use the tools, you know, for debugging and

00:52:27.240 --> 00:52:30.950
just working with that system, because there's
literally, you know, dozens if not hundreds

00:52:30.950 --> 00:52:35.560
of events happening per second in the timeline,
the heap snapshots will have, you know, tons

00:52:35.560 --> 00:52:38.880
of different things, does it scale to something
at that level?

00:52:38.880 --> 00:52:43.829
&gt;&gt;Pavel Feldman: Gmail is our best in-house
client so we're working with them a lot.

00:52:43.829 --> 00:52:49.430
These three snapshot techniques with the heap
profiling was in fact -- those were discovered

00:52:49.430 --> 00:52:54.832
while working with the Gmail team while they
were hunting their memory leaks.

00:52:54.832 --> 00:52:58.180
They're also using timeline and, of course,
they're using RD bugger.

00:52:58.180 --> 00:52:59.180
&gt;&gt;&gt; So it does.

00:52:59.180 --> 00:53:00.430
&gt;&gt;Pavel Feldman: Yes.

00:53:00.430 --> 00:53:01.510
Of course.

00:53:01.510 --> 00:53:02.590
&gt;&gt;&gt; Okay, thanks.

00:53:02.590 --> 00:53:10.950
&gt;&gt;&gt; Hi, is there a good way to inspect, edit
CSS key frames, the CSS animation key frames?

00:53:10.950 --> 00:53:15.099
Because you can -- you can see the define
animation, but I want to see the key frames,

00:53:15.099 --> 00:53:18.109
edit them, and then look at performance issues.

00:53:18.109 --> 00:53:23.349
&gt;&gt;Pavel Feldman: So the best you can get is
just jumping to the source code and editing

00:53:23.349 --> 00:53:24.390
them there.

00:53:24.390 --> 00:53:28.650
Everything you do in the source code is immediately
reflected in the screen.

00:53:28.650 --> 00:53:29.650
&gt;&gt;&gt; Okay.

00:53:29.650 --> 00:53:33.300
&gt;&gt;Pavel Feldman: But there is no structural
editing for the key frames and for media queries

00:53:33.300 --> 00:53:34.300
yet.

00:53:34.300 --> 00:53:35.300
&gt;&gt;&gt; Okay.

00:53:35.300 --> 00:53:39.099
And then is there a way to trigger them, force
them to rerun in a performance tracing kind

00:53:39.099 --> 00:53:40.099
of context.

00:53:40.099 --> 00:53:41.099
&gt;&gt;Pavel Feldman: Of course.

00:53:41.099 --> 00:53:45.109
You can edit everything in here, and then
you just save, and then you go to the timeline

00:53:45.109 --> 00:53:49.609
and you perform those actions and they will
be using these new styles.

00:53:49.609 --> 00:53:53.060
Okay, thank you.

00:53:53.060 --> 00:53:57.650
Is the mobile debugging going to be available
on Chrome for IOS?

00:53:57.650 --> 00:54:00.970
&gt;&gt;Pavel Feldman: I don't know.

00:54:00.970 --> 00:54:02.730
We'll have to check.

00:54:02.730 --> 00:54:07.640
So the remote debugging background is a part
of WebKit, so the code is there.

00:54:07.640 --> 00:54:13.250
I believe there is a way to remove the debugger
IOS devices.

00:54:13.250 --> 00:54:19.729
I don't know about the Chrome, but I can find
it out for you, and e-mail that, I'll send

00:54:19.729 --> 00:54:22.230
it back to you.

00:54:22.230 --> 00:54:23.230
&gt;&gt;&gt; Thanks.

00:54:23.230 --> 00:54:27.390
&gt;&gt;&gt; And you talked earlier about getting below
60 frames a second, there was I think green,

00:54:27.390 --> 00:54:31.630
purple and blue were colors that you talked
about, and when you got below they all turned

00:54:31.630 --> 00:54:32.630
gray.

00:54:32.630 --> 00:54:33.630
What was the gray for?

00:54:33.630 --> 00:54:40.170
&gt;&gt;Pavel Feldman: Okay, so here is the thing:
The frame for us is everything that beginning

00:54:40.170 --> 00:54:48.700
of the frames, and the gray that you saw above
is the CPU activity that we do not instrument,

00:54:48.700 --> 00:54:50.560
or it's an idle time.

00:54:50.560 --> 00:54:55.680
We are working on distinguishing between the
two, so very soon we will be able to say this

00:54:55.680 --> 00:54:57.760
is the CPU.

00:54:57.760 --> 00:54:59.450
It has been doing something.

00:54:59.450 --> 00:55:03.430
Or this is idle, the other tasks are using
it.

00:55:03.430 --> 00:55:08.430
So we are actively working on the timeline,
on the frame mode, and it's very first revision

00:55:08.430 --> 00:55:09.430
of it.

00:55:09.430 --> 00:55:12.619
&gt;&gt;&gt; So if it's gray and it is the CPU that's
doing it, it's your app that is causing that

00:55:12.619 --> 00:55:14.380
CPU to spin up but you don't know why?

00:55:14.380 --> 00:55:19.950
&gt;&gt;Pavel Feldman: Right, the spikes that we
saw on the timeline, the gray one, transparent

00:55:19.950 --> 00:55:26.150
one, were related to the CPU related to the
switching in windows that I was doing as the

00:55:26.150 --> 00:55:31.550
timeline was captured, so that was idle from
your page perspective, because it was not

00:55:31.550 --> 00:55:36.329
wasting CPU resources, so we will be able
to cut that down soon and tell you that your

00:55:36.329 --> 00:55:38.380
page is not responsible for it.

00:55:38.380 --> 00:55:45.010
But the picture that we show is accurate from
the repaint perspective, from the frame perspective,

00:55:45.010 --> 00:55:50.030
because something has been happening and your
frame has not been painted at that time, so

00:55:50.030 --> 00:55:54.460
there was indeed a jank in the repaint.

00:55:54.460 --> 00:55:55.900
&gt;&gt;&gt; Thank you.

00:55:55.900 --> 00:56:04.300
&gt;&gt;&gt; Is there any plans on integrating a -- like
a testing framework into the devtool so, say,

00:56:04.300 --> 00:56:07.260
macros and assertions and these kinds of things.

00:56:07.260 --> 00:56:13.210
&gt;&gt;Pavel Feldman: So we have a nice extensions
API support where we add extensions for you

00:56:13.210 --> 00:56:19.170
to be able to build your own panel in the
devtool, or to react upon selection of an

00:56:19.170 --> 00:56:21.589
element in the elements panel and such.

00:56:21.589 --> 00:56:28.220
We might extend those APIs if they are not
sufficient for achieving your goals.

00:56:28.220 --> 00:56:32.510
So we -- yeah, we are -- we are relying upon
the third parties to provide the functional

00:56:32.510 --> 00:56:33.510
like that.

00:56:33.510 --> 00:56:37.310
&gt;&gt;&gt; All right, so there's no -- right now
on that direct like roadmap, there's no plans

00:56:37.310 --> 00:56:38.870
for a testing framework essentially?

00:56:38.870 --> 00:56:39.870
&gt;&gt;Pavel Feldman: Right.

00:56:39.870 --> 00:56:43.730
Those would be done through the extensions
at least at the first page.

00:56:43.730 --> 00:56:46.280
&gt;&gt;&gt; Okay, cool, thanks.

00:56:46.280 --> 00:56:50.460
&gt;&gt;&gt; I'm an engineer on the Google+ team, and
first of all, I just want to say thanks so

00:56:50.460 --> 00:56:52.460
much for these tools, I couldn't do my job
without them.

00:56:52.460 --> 00:56:57.630
I mean, they're just a real joy to use, they
make Web development fun again.

00:56:57.630 --> 00:57:05.200
That said, we do obviously have a pretty massively
large JavaScript application and it's compiling

00:57:05.200 --> 00:57:09.680
files together and it's starting across all
that, so at least the search across sources

00:57:09.680 --> 00:57:14.330
made it easier again to figure out where that
JavaScript is coming from, but just loading

00:57:14.330 --> 00:57:19.970
it in and parsing it still is pretty pokey,
it's many -- I'm just curious how optimized

00:57:19.970 --> 00:57:23.690
that stuff is and how much you think you can
improve the performance even further when

00:57:23.690 --> 00:57:24.940
you have really large JavaScript?

00:57:24.940 --> 00:57:30.109
&gt;&gt;&gt; All right, so, by the moment Gmail was
our like largest client, so whenever they

00:57:30.109 --> 00:57:35.710
hit the limitation, they came to us and we
fixed it, and please, do that as well, and

00:57:35.710 --> 00:57:36.770
we'll be improving.

00:57:36.770 --> 00:57:41.680
So right now with the frame mode, we found
that we have a lot of junk in our own UI,

00:57:41.680 --> 00:57:47.369
and we do know a couple of little knocks related
to the scale with our text viewer.

00:57:47.369 --> 00:57:49.560
We are comfortable at about 100K lines.

00:57:49.560 --> 00:57:55.619
When it goes beyond we are not that comfortable
from the memory standpoint, but those are

00:57:55.619 --> 00:57:58.430
all fixable, so as we hit new limitations,
we are fixing them, so please provide your

00:57:58.430 --> 00:57:59.430
feedback.

00:57:59.430 --> 00:58:01.140
&gt;&gt;&gt; Okay, great.

00:58:01.140 --> 00:58:02.140
Will do.

00:58:02.140 --> 00:58:03.140
Thanks.

00:58:03.140 --> 00:58:04.259
&gt;&gt;Sam Dutton: Question from this side.

00:58:04.259 --> 00:58:10.350
&gt;&gt;&gt; We've been writing some code that runs
on both node.js and the client, since node.js

00:58:10.350 --> 00:58:15.470
using V8 does it have any association with
this, or is this purely the clientside browser?

00:58:15.470 --> 00:58:17.780
&gt;&gt;Pavel Feldman: Right.

00:58:17.780 --> 00:58:24.230
This is working against the WebKit based browsers
primarily, so it does not work against V8

00:58:24.230 --> 00:58:25.270
or node.

00:58:25.270 --> 00:58:31.190
There is a solution that works against node,
because node supports -- exposes the V8 debugging

00:58:31.190 --> 00:58:32.190
protocol.

00:58:32.190 --> 00:58:39.520
There's a project called Chrome devtool for
Java that is an eclipse plug-in, and eclipse

00:58:39.520 --> 00:58:47.400
has indicated that can connect both to Chrome
and to raw V8 including node.

00:58:47.400 --> 00:58:53.910
I know that there is a fork of Web inspector
that works a pretty old font that works against

00:58:53.910 --> 00:59:00.440
node, and I know there are people that are
trying to implement wrappers around V8 so

00:59:00.440 --> 00:59:04.900
that they emulated the remote debugging protocol
that Chrome devtool is using so that we could

00:59:04.900 --> 00:59:07.450
connect there, but that is a work in progress.

00:59:07.450 --> 00:59:08.450
&gt;&gt;&gt; Okay.

00:59:08.450 --> 00:59:12.780
&gt;&gt;Pavel Feldman: So it's Chrome devtools for
Java and that is an eclipse plug-in.

00:59:12.780 --> 00:59:15.310
&gt;&gt;Sam Dutton: Thanks very much.

00:59:15.310 --> 00:59:17.510
I think we better wrap it up.

00:59:17.510 --> 00:59:19.260
We've run out of time.

00:59:19.260 --> 00:59:20.260
Thanks again.

00:59:20.260 --> 00:59:22.280
Thanks also for the live feature request earlier.

00:59:22.280 --> 00:59:23.280
We'll take note of that.

00:59:23.280 --> 00:59:24.280
Thank you.

00:59:24.280 --> 00:59:25.280
&gt;&gt;Pavel Feldman: Thank you.

00:59:25.280 --> 00:59:25.281
[ Applause ]

