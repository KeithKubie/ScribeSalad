WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.970
[APPLAUSE]

00:00:04.240 --> 00:00:06.740
MATAN LUREY: So I didn't get
the after lunch slot this time,

00:00:06.740 --> 00:00:07.630
so I appreciate that.

00:00:07.630 --> 00:00:09.550
Thank you, Kevin.

00:00:09.550 --> 00:00:11.490
Everyone looks pretty awake.

00:00:11.490 --> 00:00:13.160
Hi, Mom.

00:00:13.160 --> 00:00:15.830
So I'm talking today
about AngularDart.

00:00:15.830 --> 00:00:19.387
How many people here
know what AngularDart is?

00:00:19.387 --> 00:00:20.720
OK, that's actually pretty good.

00:00:20.720 --> 00:00:22.628
That's better than Google.

00:00:22.628 --> 00:00:23.960
[LAUGHTER]

00:00:23.960 --> 00:00:28.990
How many of you have used
AngularDart at least once?

00:00:28.990 --> 00:00:30.220
Also pretty good.

00:00:30.220 --> 00:00:32.500
How many of you have used
AngularDart and Flutter

00:00:32.500 --> 00:00:35.790
in the last six months?

00:00:35.790 --> 00:00:37.840
All right, that's pretty
good, pretty good.

00:00:37.840 --> 00:00:40.506
So today I'm going to talk about
AngularDart a little bit-- what

00:00:40.506 --> 00:00:45.760
it is, why you work on it, and
what we're working on next.

00:00:45.760 --> 00:00:46.750
So let's get started.

00:00:49.707 --> 00:00:51.290
All right, a little
bit about myself--

00:00:51.290 --> 00:00:51.885
I'm Matan.

00:00:51.885 --> 00:00:54.055
I'm a front-end software
engineer at Google.

00:00:54.055 --> 00:00:56.430
I actually do interviews for
front-end software engineers

00:00:56.430 --> 00:00:56.930
at Google.

00:00:56.930 --> 00:00:59.370
So if you do ever
apply, you might get me.

00:00:59.370 --> 00:01:01.620
I worked at Google
for about four years

00:01:01.620 --> 00:01:04.019
before working on AngularDart.

00:01:04.019 --> 00:01:06.450
I actually worked on one of
the first AngularDart projects

00:01:06.450 --> 00:01:07.290
ever at Google--

00:01:07.290 --> 00:01:09.930
Greentea, the Google
CRM-- internally.

00:01:09.930 --> 00:01:11.820
And then from there
I went to go work

00:01:11.820 --> 00:01:16.470
on widgets for Greentea written
in AngularDart and Dart.

00:01:16.470 --> 00:01:19.085
And then I joined the Dart
team, and I work on AngularDart.

00:01:19.085 --> 00:01:21.210
And I think the logical
progression, at this point,

00:01:21.210 --> 00:01:25.192
is to probably work on C++ or
something used to write Dart.

00:01:25.192 --> 00:01:26.400
You don't want me to do that.

00:01:26.400 --> 00:01:29.080
[LAUGHTER]

00:01:29.080 --> 00:01:32.040
And if you haven't seen
our repository on GitHub,

00:01:32.040 --> 00:01:33.680
this is dart-lang/Angular.

00:01:33.680 --> 00:01:34.680
All of our code is here.

00:01:34.680 --> 00:01:35.679
All of it's open source.

00:01:35.679 --> 00:01:36.810
We push pretty frequently.

00:01:36.810 --> 00:01:39.750
Andrew's probably
pushing right now.

00:01:39.750 --> 00:01:42.390
We have all of our sub-packages,
the test, the compiler,

00:01:42.390 --> 00:01:44.700
the template
parser, the router--

00:01:44.700 --> 00:01:45.372
everything here.

00:01:45.372 --> 00:01:46.830
It's all managed
in one repository.

00:01:46.830 --> 00:01:48.760
We found that model
repo, like Kevin said,

00:01:48.760 --> 00:01:51.980
it just works a lot better
for that type of package.

00:01:51.980 --> 00:01:52.980
So it's all right there.

00:01:56.220 --> 00:01:57.125
And a little bit--

00:01:57.125 --> 00:01:58.500
even though most
of you know what

00:01:58.500 --> 00:02:01.735
it is-- what is AngularDart, and
why we find this so important.

00:02:04.372 --> 00:02:06.080
So here are some
examples of AngularDart.

00:02:06.080 --> 00:02:08.720
These are the most
easy examples.

00:02:08.720 --> 00:02:13.160
If you can't see what this is,
this is AdSense and AdWords.

00:02:13.160 --> 00:02:15.950
Both of these UIs are built
almost entirely in AngularDart.

00:02:15.950 --> 00:02:19.580
These are giant applications
built internally

00:02:19.580 --> 00:02:21.920
with hundreds of engineers
with the AngularDart team

00:02:21.920 --> 00:02:24.020
and the Dart team helping.

00:02:24.020 --> 00:02:26.900
These are probably our flagship
applications, so to speak.

00:02:26.900 --> 00:02:29.505
But it's not just
AdSense and AdWords,

00:02:29.505 --> 00:02:31.970
even though we talk
about them a lot.

00:02:31.970 --> 00:02:35.000
For one example, here is AdMob.

00:02:35.000 --> 00:02:37.430
Who here's used AdMob?

00:02:37.430 --> 00:02:39.390
OK, at least one person.

00:02:39.390 --> 00:02:43.000
AdMob's another Ad
product by Google.

00:02:43.000 --> 00:02:45.606
One thing I liked a lot
about the AdMob product

00:02:45.606 --> 00:02:47.730
is that they launched an
I/O this year with a brand

00:02:47.730 --> 00:02:49.860
new redesign written
in AngularDart,

00:02:49.860 --> 00:02:51.880
and I think most people
on the AngularDart team

00:02:51.880 --> 00:02:53.546
didn't know they were
using AngularDart.

00:02:53.546 --> 00:02:56.000
I mean, they adopted it and
migrated everything over,

00:02:56.000 --> 00:02:59.290
got it running in production
super fast, super easily.

00:02:59.290 --> 00:03:01.019
And that's what we
want everyone to feel

00:03:01.019 --> 00:03:02.310
when they're using our product.

00:03:02.310 --> 00:03:04.552
So we were super
excited to see someone

00:03:04.552 --> 00:03:05.635
get that kind of progress.

00:03:09.330 --> 00:03:11.715
So what is AngularDart?

00:03:11.715 --> 00:03:13.660
I can tell you what our goal is.

00:03:13.660 --> 00:03:17.640
We want you to be able to build
better web apps more easily

00:03:17.640 --> 00:03:20.680
and, obviously, in Dart,
otherwise we wouldn't be here.

00:03:20.680 --> 00:03:24.030
So what we're trying to do here
is have a productive foundation

00:03:24.030 --> 00:03:30.070
for web apps; have an
incremental, fast compiler

00:03:30.070 --> 00:03:33.920
and dev cycle;
and, of course, we

00:03:33.920 --> 00:03:36.320
want you to be able to write
Dart-- so idiomatic Dart API

00:03:36.320 --> 00:03:38.420
and not have to go back and
forth too much with JavaScript

00:03:38.420 --> 00:03:39.295
if you don't have to.

00:03:41.760 --> 00:03:43.950
So here's an example of
what I mean by productive.

00:03:43.950 --> 00:03:45.150
And I'm sure someone
in the back is

00:03:45.150 --> 00:03:47.108
going to notice my ligature
font for the equals

00:03:47.108 --> 00:03:48.120
and ask me what that is.

00:03:48.120 --> 00:03:50.940
So let's ignore that for now.

00:03:50.940 --> 00:03:53.240
Basically, we want you to
be able to write pretty much

00:03:53.240 --> 00:03:57.360
HTML or HTML-like templates
and have that express

00:03:57.360 --> 00:03:59.190
your most complex views.

00:03:59.190 --> 00:04:01.170
I personally love the
Flutter style, also,

00:04:01.170 --> 00:04:02.940
of writing all of
your code in Dart.

00:04:02.940 --> 00:04:04.950
But some developers
do find it easier,

00:04:04.950 --> 00:04:07.050
especially when they
wrote HTML traditionally,

00:04:07.050 --> 00:04:09.120
to write an
HTML-like syntax when

00:04:09.120 --> 00:04:10.720
they're expressing their views.

00:04:10.720 --> 00:04:13.394
They can reuse things like
spans and unordered lists,

00:04:13.394 --> 00:04:15.810
for example, which don't make
sense in Flutter, obviously,

00:04:15.810 --> 00:04:17.610
but would make sense
in a web context.

00:04:17.610 --> 00:04:19.140
So we try to give
you a lot of tools

00:04:19.140 --> 00:04:23.160
to build views and templates
around your existing HTML,

00:04:23.160 --> 00:04:26.575
use existing HTML and CSS
knowledge where possible.

00:04:30.050 --> 00:04:31.950
Of course, incremental's
a big part of it.

00:04:31.950 --> 00:04:35.030
So one of the things we
actually measure and track a lot

00:04:35.030 --> 00:04:37.580
is how quickly you can
change your Dart code,

00:04:37.580 --> 00:04:39.470
have it compile the
JavaScript, load

00:04:39.470 --> 00:04:41.780
the JavaScript in your
browser, see the changes,

00:04:41.780 --> 00:04:43.225
and also be able to debug.

00:04:43.225 --> 00:04:44.850
And this is an area
where, in the past,

00:04:44.850 --> 00:04:46.724
I think we were not
doing a really great job.

00:04:46.724 --> 00:04:48.530
I think we're doing
a lot better now.

00:04:48.530 --> 00:04:50.270
But incremental's
a big part of it.

00:04:50.270 --> 00:04:52.061
And, in a little bit,
I'm going to show you

00:04:52.061 --> 00:04:54.410
how much work we put into
this in the last six months

00:04:54.410 --> 00:04:54.920
to a year.

00:04:57.675 --> 00:04:59.550
And then the last part's
obviously idiomatic.

00:04:59.550 --> 00:05:01.570
It wouldn't be Dart if you
were writing another language.

00:05:01.570 --> 00:05:04.240
So when we're using it, like
the test framework for example,

00:05:04.240 --> 00:05:06.325
we want it to look and
feel like Dart-- like Dart

00:05:06.325 --> 00:05:08.700
you'd write normally on the
server or for Flutter or just

00:05:08.700 --> 00:05:10.140
for command-line scripts.

00:05:10.140 --> 00:05:13.212
Nothing too crazy or out there.

00:05:13.212 --> 00:05:14.670
In this particular
case, like being

00:05:14.670 --> 00:05:18.630
able to test that something on
the page says "hello Angular,"

00:05:18.630 --> 00:05:21.056
more or less reads
like normal Dart code

00:05:21.056 --> 00:05:22.430
with some Angularisms,
of course.

00:05:25.179 --> 00:05:27.220
So I'm going to talk a
little about how it works.

00:05:27.220 --> 00:05:28.130
Because I think
it's actually really

00:05:28.130 --> 00:05:30.340
important in understanding
why AngularDart

00:05:30.340 --> 00:05:35.410
versus doing vanilla Dart
or vanilla JavaScript.

00:05:35.410 --> 00:05:38.119
So everything can kind of
be summed up by this slide.

00:05:38.119 --> 00:05:39.910
I can go through line
by line, if you want,

00:05:39.910 --> 00:05:41.200
but that's not too exciting.

00:05:41.200 --> 00:05:42.790
Basically, we're
trying to let you

00:05:42.790 --> 00:05:44.950
write as little Dart
code as possible

00:05:44.950 --> 00:05:47.260
and express your
intent declaratively.

00:05:47.260 --> 00:05:50.206
So you have a declarative
template, like I showed before.

00:05:50.206 --> 00:05:51.580
And you might have
some metadata.

00:05:51.580 --> 00:05:53.413
We use heavy use of
metadata-- in this case,

00:05:53.413 --> 00:05:55.840
the annotation at component.

00:05:55.840 --> 00:05:58.336
And we want to translate
that into approximately

00:05:58.336 --> 00:06:00.460
the equivalent code you'd
have to write if you were

00:06:00.460 --> 00:06:01.990
to write your code by hand.

00:06:01.990 --> 00:06:04.840
So on the right-hand side is
a real but a little cut-down

00:06:04.840 --> 00:06:10.030
example of how we would compile
this template into Dart code.

00:06:10.030 --> 00:06:11.644
It doesn't look
that interesting.

00:06:11.644 --> 00:06:13.810
But sometimes it's actually
important to have things

00:06:13.810 --> 00:06:15.010
in a certain order
for the compiler

00:06:15.010 --> 00:06:17.770
to be able to admit better code,
or to be able to make things

00:06:17.770 --> 00:06:19.480
more readable.

00:06:19.480 --> 00:06:23.290
In this case, we're building
a little "hello name."

00:06:23.290 --> 00:06:25.919
And we're going to detect
changes of name changes.

00:06:25.919 --> 00:06:27.460
And that's a big
part of AngularDart.

00:06:27.460 --> 00:06:31.030
So we want to be able to
express that in very simple code

00:06:31.030 --> 00:06:32.682
the compiler can optimize.

00:06:35.850 --> 00:06:37.350
And AngularDart's
compiler is really

00:06:37.350 --> 00:06:39.540
the big difference in this
and, let's say, Flutter.

00:06:39.540 --> 00:06:42.570
Flutter actually runs all of
your Dart code almost as is.

00:06:42.570 --> 00:06:45.570
In the VM, we actually
run your Dart code,

00:06:45.570 --> 00:06:47.600
and then generate Dart
code from your HTML,

00:06:47.600 --> 00:06:50.370
and then run those together
in the JavaScript VM.

00:06:50.370 --> 00:06:53.010
So we're generating boilerplate
code for your templates.

00:06:53.010 --> 00:06:55.550
We're generating bindings
for change detections,

00:06:55.550 --> 00:06:57.480
so we can tell if
things changed.

00:06:57.480 --> 00:06:59.670
And we're also
trying to generate

00:06:59.670 --> 00:07:01.086
efficient dependency injection.

00:07:01.086 --> 00:07:02.460
Dependency injection
is something

00:07:02.460 --> 00:07:04.910
that AngularDart and
Angular, for a long time,

00:07:04.910 --> 00:07:06.120
has put a lot of focus in.

00:07:06.120 --> 00:07:08.644
And one reason that a lot
of Googlers, for example,

00:07:08.644 --> 00:07:10.560
really like AngularDart--
because they grew up

00:07:10.560 --> 00:07:16.529
with Juice or Dagger or Inject
or probably other things I

00:07:16.529 --> 00:07:17.070
haven't used.

00:07:20.970 --> 00:07:23.510
So a little bit about what
is new and why this applies.

00:07:23.510 --> 00:07:25.650
This is called What's
new with AngularDart, not

00:07:25.650 --> 00:07:26.490
AngularDart 101.

00:07:26.490 --> 00:07:28.781
So I'm going to go into the
little more exciting parts.

00:07:31.250 --> 00:07:34.550
One big issue people told us
is that unlike, say, writing

00:07:34.550 --> 00:07:36.260
pure Dart code,
they weren't getting

00:07:36.260 --> 00:07:38.720
a really good job of early
detection of template errors.

00:07:38.720 --> 00:07:40.300
They would misspell directives.

00:07:40.300 --> 00:07:43.077
They would write divs
without closing tags.

00:07:43.077 --> 00:07:45.410
And, obviously, the browser
kind of just trucks through.

00:07:45.410 --> 00:07:47.240
And sometimes the
compiler did too.

00:07:47.240 --> 00:07:49.715
And they really wanted
to know that they

00:07:49.715 --> 00:07:51.590
were doing early errors,
and they were seeing

00:07:51.590 --> 00:07:53.030
problems in their template.

00:07:53.030 --> 00:07:55.010
So we took that feedback.

00:07:55.010 --> 00:07:58.800
And we actually did work
on an analyzer plug-in.

00:07:58.800 --> 00:08:01.510
So if you're using IntelliJ
or Visual Studio Code today,

00:08:01.510 --> 00:08:04.850
with a little bit of hackery you
can actually get your templates

00:08:04.850 --> 00:08:07.170
and your HTML analyzed
the same way your Dart

00:08:07.170 --> 00:08:08.330
code would be analyzed.

00:08:08.330 --> 00:08:09.830
And we'll show you
errors and stuff,

00:08:09.830 --> 00:08:12.750
just like you would if you
were writing Dart code.

00:08:12.750 --> 00:08:14.584
So here's a blown-up example.

00:08:14.584 --> 00:08:17.000
Don't worry-- the plugin does
not make your font that big.

00:08:17.000 --> 00:08:18.480
I want you to be
able to read it.

00:08:18.480 --> 00:08:20.390
But, in this case, you can
see some red squigglies.

00:08:20.390 --> 00:08:22.014
You can see the
problems in the bottom.

00:08:22.014 --> 00:08:22.980
This is all brand new.

00:08:22.980 --> 00:08:24.950
This is basically us
understanding your intent

00:08:24.950 --> 00:08:27.620
with the Angular template code
and identifying problems--

00:08:27.620 --> 00:08:28.850
and a lot of subtle ones.

00:08:28.850 --> 00:08:30.720
See if you can see
some right here.

00:08:30.720 --> 00:08:32.567
"Disabled" is spelled wrong.

00:08:32.567 --> 00:08:33.650
You have some wrong types.

00:08:33.650 --> 00:08:34.940
You have some invalid syntax.

00:08:34.940 --> 00:08:37.159
You have missing quotes.

00:08:37.159 --> 00:08:38.522
These things really do add up.

00:08:38.522 --> 00:08:40.730
And these things really do
cause production problems.

00:08:40.730 --> 00:08:42.771
So we want to highlight
them as fast as possible.

00:08:46.911 --> 00:08:47.410
OK.

00:08:47.410 --> 00:08:48.695
So this is where I admit--

00:08:48.695 --> 00:08:51.070
just like Slav and everybody
else-- some of our patterns,

00:08:51.070 --> 00:08:53.111
some things that we were
giving customers to use,

00:08:53.111 --> 00:08:54.700
were just not that
Dart idiomatic

00:08:54.700 --> 00:08:56.320
and were kind of slow.

00:08:56.320 --> 00:08:58.990
Snails aren't really that bad,
but we wanted to identify them.

00:08:58.990 --> 00:09:00.160
We wanted them to
know what they were.

00:09:00.160 --> 00:09:02.618
And we wanted to see if we
could improve them, if possible.

00:09:04.800 --> 00:09:06.980
So here's a really
simple example--

00:09:06.980 --> 00:09:09.200
in AngularDart, you can
query for child components.

00:09:09.200 --> 00:09:11.157
You can say, oh, I
have three buttons.

00:09:11.157 --> 00:09:12.990
And I want to get a
handle to these buttons,

00:09:12.990 --> 00:09:15.050
so I can change them.

00:09:15.050 --> 00:09:17.686
The way it was implemented,
before I started the team,

00:09:17.686 --> 00:09:19.310
it wasn't really
great for performance.

00:09:19.310 --> 00:09:20.630
And it was kind of hidden.

00:09:20.630 --> 00:09:22.770
Basically, it created a
custom iterable class--

00:09:22.770 --> 00:09:25.186
like it actually implemented
the iterable interface itself

00:09:25.186 --> 00:09:26.770
with handwritten code.

00:09:26.770 --> 00:09:28.432
It discarded all your
type information.

00:09:28.432 --> 00:09:30.140
So if you were trying
to use strong mode,

00:09:30.140 --> 00:09:32.098
and you expected something
to be a list of Foo,

00:09:32.098 --> 00:09:33.820
it was always list of dynamic.

00:09:33.820 --> 00:09:35.174
So you couldn't rely on that.

00:09:35.174 --> 00:09:36.590
And also you had
this weird thing,

00:09:36.590 --> 00:09:38.330
where even thought
it was an iterable,

00:09:38.330 --> 00:09:39.980
it had a stream called changes.

00:09:39.980 --> 00:09:43.370
And you had to listen to
see if the iterable changed.

00:09:43.370 --> 00:09:46.589
That's just not a pattern you
really see in Dart anywhere.

00:09:46.589 --> 00:09:47.630
And people were confused.

00:09:47.630 --> 00:09:48.964
And it didn't work really well.

00:09:48.964 --> 00:09:50.630
So we were trying to
think, how could we

00:09:50.630 --> 00:09:52.220
take the same
pattern people want

00:09:52.220 --> 00:09:55.220
to use-- find child components--
and make it more Darty?

00:09:58.030 --> 00:10:00.200
This is one-- here we go.

00:10:00.200 --> 00:10:02.730
So, in this case, this is
almost exactly equivalent.

00:10:02.730 --> 00:10:05.320
See if you can even see the
difference in the two code.

00:10:05.320 --> 00:10:07.930
On the left-hand side is the
old and the right-hand side

00:10:07.930 --> 00:10:10.180
is the new.

00:10:10.180 --> 00:10:11.360
In this particular case--

00:10:11.360 --> 00:10:12.485
I'm going to highlight it--

00:10:14.469 --> 00:10:16.510
all we're doing is we're
changing from this weird

00:10:16.510 --> 00:10:17.740
query-list concept--

00:10:17.740 --> 00:10:19.420
which actually wasn't a list--

00:10:19.420 --> 00:10:21.790
into a plain old Dart list.

00:10:21.790 --> 00:10:24.947
And this seems super
subtle and very simple.

00:10:24.947 --> 00:10:26.530
But what this does
is a lot of things.

00:10:26.530 --> 00:10:28.360
It actually let's
us, first of all,

00:10:28.360 --> 00:10:30.550
use the built-in array
type in JavaScript, which

00:10:30.550 --> 00:10:32.883
is going to be faster than
some layered, custom iterable

00:10:32.883 --> 00:10:33.665
implementation.

00:10:33.665 --> 00:10:35.500
It lets us have real
type information,

00:10:35.500 --> 00:10:36.940
so strong mode and
other compilers

00:10:36.940 --> 00:10:39.720
can actually know I have
a list of child comp

00:10:39.720 --> 00:10:41.662
and not a list of anything.

00:10:41.662 --> 00:10:44.120
And this is the kind of small
changes, incremental changes,

00:10:44.120 --> 00:10:46.680
we want to make to be able to
make the compiler, obviously,

00:10:46.680 --> 00:10:49.600
a lot better, but also make
your Dart code feel more

00:10:49.600 --> 00:10:52.060
like Flutter code or feel
more like command-line code

00:10:52.060 --> 00:10:54.290
and not be very
Angular-specific all the time.

00:10:57.430 --> 00:10:58.587
Here's a big one.

00:10:58.587 --> 00:11:00.670
I'm sure the right guys
will come talk about this.

00:11:00.670 --> 00:11:01.960
And they filed a couple bugs.

00:11:01.960 --> 00:11:03.251
And I see some of them smiling.

00:11:03.251 --> 00:11:04.580
So that's good.

00:11:04.580 --> 00:11:07.060
Here's the part where I
admit that dynamic code isn't

00:11:07.060 --> 00:11:08.966
tree-shakeable.

00:11:08.966 --> 00:11:11.560
How many people know what
tree-shaking is or have heard

00:11:11.560 --> 00:11:14.510
the word tree-shaking before?

00:11:14.510 --> 00:11:15.040
OK.

00:11:15.040 --> 00:11:17.081
That's used pretty much
at every Dart conference.

00:11:17.081 --> 00:11:18.730
It doesn't always
mean the same thing.

00:11:18.730 --> 00:11:20.480
Some people call it
dead code elimination.

00:11:20.480 --> 00:11:22.730
That might even be the
better word in some cases.

00:11:22.730 --> 00:11:25.450
But, basically, it's the act
of trying to figure out code

00:11:25.450 --> 00:11:28.981
that you're not going to
use and getting rid of it.

00:11:28.981 --> 00:11:30.730
And even though
AngularDart's a lot better

00:11:30.730 --> 00:11:33.640
than previous versions, you
can still, pretty easily,

00:11:33.640 --> 00:11:35.860
write code that
will never be used,

00:11:35.860 --> 00:11:39.440
but we bring it into
your final binary.

00:11:39.440 --> 00:11:42.890
So we wanted to see if we can
use the existing code you have

00:11:42.890 --> 00:11:44.960
as-is, almost,
and give you a way

00:11:44.960 --> 00:11:48.522
to be able to have it
be more tree-shakeable.

00:11:48.522 --> 00:11:50.480
So we're experimenting
right now with something

00:11:50.480 --> 00:11:52.420
that lets you start
your application

00:11:52.420 --> 00:11:55.490
but discards a lot of
metadata that's not actually

00:11:55.490 --> 00:11:57.560
used in the runtime
in most applications

00:11:57.560 --> 00:12:01.490
and gets you better code
size and performance.

00:12:01.490 --> 00:12:03.260
I can give you a
really simple example.

00:12:03.260 --> 00:12:05.455
Today, if you write
code like on the left--

00:12:05.455 --> 00:12:06.830
you basically
write some classes,

00:12:06.830 --> 00:12:08.490
put some annotations on them--

00:12:08.490 --> 00:12:11.210
to most people, they don't
think that actually has a cost.

00:12:11.210 --> 00:12:12.980
Unfortunately, it actually does.

00:12:12.980 --> 00:12:15.620
It generates code like
you see on the right.

00:12:15.620 --> 00:12:18.380
Basically, it tries to
create this big hash

00:12:18.380 --> 00:12:21.590
map of every single possible
type and factory functions

00:12:21.590 --> 00:12:22.656
about how to create them.

00:12:22.656 --> 00:12:24.530
And even if you actually
never use this code,

00:12:24.530 --> 00:12:26.738
it's not written in such a
way where the compiler can

00:12:26.738 --> 00:12:29.750
tell it's never used.

00:12:29.750 --> 00:12:32.090
We're trying out the new
bootstrap factory function.

00:12:32.090 --> 00:12:34.040
We actually discard
this entire function.

00:12:34.040 --> 00:12:37.370
And most applications run
almost entirely as-is.

00:12:37.370 --> 00:12:39.860
So when applying
this, for example,

00:12:39.860 --> 00:12:43.250
to the GWT Mail Sample app--
one of Kevin's favorite apps--

00:12:43.250 --> 00:12:47.330
this is a little sample of the
Google Web Toolkit sample app

00:12:47.330 --> 00:12:49.570
that we've converted
to AngularDart.

00:12:49.570 --> 00:12:51.890
We took this as-is,
literally no changes,

00:12:51.890 --> 00:12:55.670
and just used the new
experimental bootstrap.

00:12:55.670 --> 00:12:57.140
And it got 52% smaller.

00:12:57.140 --> 00:12:58.520
And that's a real number.

00:12:58.520 --> 00:12:59.950
We're hoping to see those
same kind of things.

00:12:59.950 --> 00:13:00.450
Thank you.

00:13:00.450 --> 00:13:01.768
[APPLAUSE]

00:13:07.072 --> 00:13:08.780
And the goal here,
again, is incremental.

00:13:08.780 --> 00:13:10.810
We don't want people to
rewrite their app every time

00:13:10.810 --> 00:13:12.560
we find out there's a
bug in the compiler.

00:13:12.560 --> 00:13:14.200
So we're trying to do things
like this that give you

00:13:14.200 --> 00:13:16.330
big wins but don't make
you change much or any

00:13:16.330 --> 00:13:18.640
of your application.

00:13:18.640 --> 00:13:19.140
So yay!

00:13:22.720 --> 00:13:23.220
OK.

00:13:23.220 --> 00:13:25.136
Here's another big one--
dependency injection.

00:13:25.136 --> 00:13:26.880
I talked about it a second ago.

00:13:26.880 --> 00:13:29.190
I'll admit now, also-- it's
not really tree-shakeable.

00:13:29.190 --> 00:13:31.689
Because the whole concept behind
dependency injection is you

00:13:31.689 --> 00:13:34.470
might get things
at run time, and we

00:13:34.470 --> 00:13:35.730
have to provide them for you.

00:13:35.730 --> 00:13:37.445
But if they're
missing, we'll throw.

00:13:37.445 --> 00:13:38.820
But that's not
enough information

00:13:38.820 --> 00:13:41.597
for the compiler be able
to remove everything.

00:13:41.597 --> 00:13:43.180
So we wanted to be
able to give people

00:13:43.180 --> 00:13:46.030
a way also to be able to
generate dependency injection

00:13:46.030 --> 00:13:48.070
or service locators
at compile time,

00:13:48.070 --> 00:13:50.734
not run time, and get a
little bit better of code.

00:13:50.734 --> 00:13:52.150
So we actually
added an annotation

00:13:52.150 --> 00:13:55.510
called Injector.generate, which
lets you generate injectors

00:13:55.510 --> 00:13:57.182
at compile time
instead of run time.

00:13:57.182 --> 00:13:58.390
And I'll show you an example.

00:14:01.592 --> 00:14:02.925
"In recent alpha pre-releases"--

00:14:02.925 --> 00:14:06.130
I have to put
asterisks everywhere.

00:14:06.130 --> 00:14:08.130
If you don't know what
dependency injection is--

00:14:08.130 --> 00:14:09.184
it's pretty simple.

00:14:09.184 --> 00:14:11.100
It's basically having
your code's dependencies

00:14:11.100 --> 00:14:14.580
given to your code instead
of having them hard coded.

00:14:14.580 --> 00:14:17.959
So I'll show you
an example here.

00:14:17.959 --> 00:14:19.500
Let's say you have
a component tree--

00:14:19.500 --> 00:14:20.958
and I stole this
from Ted's slides.

00:14:20.958 --> 00:14:22.440
He's going to notice them--

00:14:22.440 --> 00:14:25.710
and it provides something
called a Foo service at the top.

00:14:25.710 --> 00:14:28.590
And, at the bottom, somewhere,
it injects a Foo service.

00:14:28.590 --> 00:14:31.770
We basically, as Angular, have
to provide this hierarchically

00:14:31.770 --> 00:14:33.660
across your entire application.

00:14:33.660 --> 00:14:35.455
Even if something
does not use Foo,

00:14:35.455 --> 00:14:37.080
we have to provide
it because something

00:14:37.080 --> 00:14:38.671
might use it eventually.

00:14:41.770 --> 00:14:44.020
And here's where we took
it-- again, the same pattern.

00:14:44.020 --> 00:14:45.700
The top is the code
you'd write before,

00:14:45.700 --> 00:14:47.908
which creates an injector
that provides a credit card

00:14:47.908 --> 00:14:51.850
processor and an HTTP service
and some other values.

00:14:51.850 --> 00:14:55.120
And you pretty much almost
copy it as-is to the bottom.

00:14:55.120 --> 00:14:57.016
And you get this
compiled ahead of time.

00:14:57.016 --> 00:14:58.390
It's a little bit
more efficient.

00:14:58.390 --> 00:15:00.130
It lets you strip out more code.

00:15:00.130 --> 00:15:02.467
And we're hoping to move
more towards this pattern

00:15:02.467 --> 00:15:03.050
in the future.

00:15:07.140 --> 00:15:09.034
This is my favorite.

00:15:09.034 --> 00:15:10.950
Basically-- and this is
something I'll admit--

00:15:10.950 --> 00:15:13.630
everyone's going to
smile because it's true--

00:15:13.630 --> 00:15:16.830
we found out that incremental
builds were really slow.

00:15:16.830 --> 00:15:18.030
They were not cached.

00:15:18.030 --> 00:15:19.500
They were entirely
done in memory.

00:15:19.500 --> 00:15:22.752
If you wanted to debug
something, good luck.

00:15:22.752 --> 00:15:24.210
Also, when people
complained to us,

00:15:24.210 --> 00:15:25.918
we were like, what
are you talking about?

00:15:25.918 --> 00:15:27.552
Everything works
great-- inside Google.

00:15:27.552 --> 00:15:29.510
Because we have a whole
different build system,

00:15:29.510 --> 00:15:30.790
and everything
works differently.

00:15:30.790 --> 00:15:32.498
So we were not having
the same experience

00:15:32.498 --> 00:15:33.690
our users were having.

00:15:33.690 --> 00:15:36.460
And we also, at the same time,
were getting a lot of issues,

00:15:36.460 --> 00:15:39.910
saying, oh, I want to use a
JSON serializer in Flutter even.

00:15:39.910 --> 00:15:41.540
I wanted to use
this build package.

00:15:41.540 --> 00:15:42.990
I wanted to use this generator.

00:15:42.990 --> 00:15:45.930
So we wanted to have an
all-in-one solution that would

00:15:45.930 --> 00:15:48.210
give us the same fidelity
of builds that Google uses

00:15:48.210 --> 00:15:50.960
internally but in
Dart and reuseable--

00:15:50.960 --> 00:15:52.710
where you would use
code generation today.

00:15:55.770 --> 00:15:57.520
So we wrote a new build system.

00:15:57.520 --> 00:16:00.330
I know that doesn't sound like
a lot, but it actually is.

00:16:00.330 --> 00:16:01.890
It's called
package:build_runner.

00:16:01.890 --> 00:16:04.830
I know it's the greatest
name ever created.

00:16:04.830 --> 00:16:06.210
We are accepting new names.

00:16:06.210 --> 00:16:08.400
If you can tell me a name
you want to use instead,

00:16:08.400 --> 00:16:11.090
maybe I can convince Kevin
to rename the package.

00:16:11.090 --> 00:16:12.270
So it's called build_runner.

00:16:12.270 --> 00:16:14.580
And the reason for build_runner
is very intentional.

00:16:14.580 --> 00:16:16.530
First of all,
that's what it does.

00:16:16.530 --> 00:16:18.990
And second of all, we actually
have a whole ecosystem

00:16:18.990 --> 00:16:21.700
of packages built around
this build concept.

00:16:21.700 --> 00:16:23.370
So if you implement
code generators that

00:16:23.370 --> 00:16:25.410
implement the build package--

00:16:25.410 --> 00:16:27.120
the constraints
there-- it actually

00:16:27.120 --> 00:16:29.680
can work out of the box in
many different scenarios.

00:16:29.680 --> 00:16:31.957
So we have a basal
implementation of this.

00:16:31.957 --> 00:16:33.540
We have a build_runner
implementation.

00:16:33.540 --> 00:16:35.123
We actually have an
old implementation

00:16:35.123 --> 00:16:36.859
for pub and barback
transformers.

00:16:36.859 --> 00:16:38.400
So it can help you
migrate your code.

00:16:38.400 --> 00:16:40.441
It can help you use your
code in multiple places.

00:16:42.251 --> 00:16:42.750
All right.

00:16:42.750 --> 00:16:44.125
So I'm going to
explain this now.

00:16:44.125 --> 00:16:46.110
I'm going to try my best.

00:16:46.110 --> 00:16:49.800
Who here uses the
DartDevCompiler today?

00:16:49.800 --> 00:16:52.530
Not as many as I hoped.

00:16:52.530 --> 00:16:54.410
One great thing about
the DartDevCompiler

00:16:54.410 --> 00:16:56.612
is it lets you build
JavaScript incrementally

00:16:56.612 --> 00:16:57.570
from your Dart sources.

00:16:57.570 --> 00:17:00.630
So Dart to JS would get
this huge blob of Dart.

00:17:00.630 --> 00:17:04.274
It would have to generate a big
blob of JavaScript-- hopefully,

00:17:04.274 --> 00:17:06.410
a smaller blob of JavaScript.

00:17:06.410 --> 00:17:08.160
DartDevCompiler has
different constraints.

00:17:08.160 --> 00:17:10.380
It actually wants to
build small amounts

00:17:10.380 --> 00:17:12.236
of JavaScript per Dart file--

00:17:12.236 --> 00:17:14.069
more of a transpile,
more something like you

00:17:14.069 --> 00:17:16.710
would see in TypeScript, or you
would see in CoffeeScript, or--

00:17:16.710 --> 00:17:19.577
I'm sure-- Elm or Reason or
whatever's cool this week.

00:17:19.577 --> 00:17:21.450
[LAUGHTER]

00:17:21.450 --> 00:17:23.194
And we tried to emulate that.

00:17:23.194 --> 00:17:24.819
And we did a pretty
good job internally

00:17:24.819 --> 00:17:26.579
because we have
different build tools.

00:17:26.579 --> 00:17:29.880
In this case, when we
compile with DartDevCompiler,

00:17:29.880 --> 00:17:32.820
we get to generate one
DDC file for every source

00:17:32.820 --> 00:17:34.189
file, every Dart file.

00:17:34.189 --> 00:17:36.480
And you can see the arrows
start pointing more and more

00:17:36.480 --> 00:17:39.450
on the left because,
actually, to build DDC C,

00:17:39.450 --> 00:17:41.027
you have to know what the--

00:17:41.027 --> 00:17:43.110
you don't need to know
what source A is, source B,

00:17:43.110 --> 00:17:45.430
and source C. This could
spiral out of control,

00:17:45.430 --> 00:17:47.340
as you have a really
big application.

00:17:47.340 --> 00:17:49.530
And, even here, compiles
took longer and longer.

00:17:49.530 --> 00:17:51.390
And even when they
were fast, as soon

00:17:51.390 --> 00:17:54.030
as you restarted your
computer or restarted Travis,

00:17:54.030 --> 00:17:56.440
everything would have to
start over all over again,

00:17:56.440 --> 00:17:59.250
even in a huge graph.

00:17:59.250 --> 00:17:59.750
OK.

00:17:59.750 --> 00:18:00.860
It gets more complicated.

00:18:00.860 --> 00:18:02.750
We also wrote a compiler
for AngularDart.

00:18:02.750 --> 00:18:05.874
So not only do you have to
depend on the Dart files,

00:18:05.874 --> 00:18:07.790
you have to depend on
something on the Angular

00:18:07.790 --> 00:18:09.450
outputs of those Dart files.

00:18:09.450 --> 00:18:11.630
And, again, now you see
even more and more arrows.

00:18:11.630 --> 00:18:14.280
We went from this to this.

00:18:14.280 --> 00:18:16.400
And, again, imagine
this like 50 times wider

00:18:16.400 --> 00:18:18.210
and 50 times deeper.

00:18:18.210 --> 00:18:21.320
This is explaining the Wrike
situation or anything else,

00:18:21.320 --> 00:18:22.862
like why builds
are taking so long.

00:18:22.862 --> 00:18:24.320
This really can
get out of control.

00:18:24.320 --> 00:18:26.810
And the builds had no way
to do anything about it.

00:18:26.810 --> 00:18:28.500
We couldn't even
cache because there

00:18:28.500 --> 00:18:29.960
was no guarantee
everything would

00:18:29.960 --> 00:18:31.580
be built in the same order.

00:18:35.720 --> 00:18:38.660
So, normally, what I
did, at least locally,

00:18:38.660 --> 00:18:42.050
is I would run pub serve and
then wait, say, 30 seconds.

00:18:42.050 --> 00:18:45.140
And the one thing I liked
about that a lot is I

00:18:45.140 --> 00:18:47.974
got to go make a cup of coffee.

00:18:47.974 --> 00:18:50.390
And, really, you could sit
there with the espresso machine

00:18:50.390 --> 00:18:52.306
and probably do the whole
thing and come back,

00:18:52.306 --> 00:18:53.746
and sometimes it wasn't done.

00:18:53.746 --> 00:18:56.120
Or my favorite-- you could go
on r/programming on Reddit,

00:18:56.120 --> 00:18:57.945
and then you could
spend a long time there.

00:18:57.945 --> 00:18:59.570
And then, hopefully,
by the time you're

00:18:59.570 --> 00:19:01.180
done with all 11
articles, the build's

00:19:01.180 --> 00:19:03.170
completed without an error.

00:19:03.170 --> 00:19:04.931
And that's not what we wanted.

00:19:04.931 --> 00:19:07.430
Obviously, our second goal was
incremental fast compilation.

00:19:07.430 --> 00:19:10.350
So that doesn't
make a lot of sense.

00:19:10.350 --> 00:19:12.602
So I'm going to show you
today a not-live stream--

00:19:12.602 --> 00:19:14.060
because I'm too
scared to do that--

00:19:14.060 --> 00:19:17.580
but an emulated live-stream
terminal of what it looks like.

00:19:17.580 --> 00:19:20.074
This is really copied and
pasted from my laptop yesterday

00:19:20.074 --> 00:19:20.740
with everything.

00:19:20.740 --> 00:19:23.580
It had no special flags I'm
hiding or anything-- just

00:19:23.580 --> 00:19:26.257
on a live demo.

00:19:26.257 --> 00:19:27.840
So this is the first
build, all right?

00:19:27.840 --> 00:19:30.900
So I cloned my Angular
repository to disk.

00:19:30.900 --> 00:19:32.940
And I'm going to go into it.

00:19:32.940 --> 00:19:35.979
And instead of running
pub serve or pub build,

00:19:35.979 --> 00:19:38.270
I'm going to run something
called "build_runner build."

00:19:38.270 --> 00:19:40.230
Again, names are in progress.

00:19:40.230 --> 00:19:44.210
But I'm going to do a
build of my application.

00:19:44.210 --> 00:19:45.640
Then I'll wait a tiny bit.

00:19:45.640 --> 00:19:47.050
And this is going to come up.

00:19:47.050 --> 00:19:49.341
And it's going to say that
it generated a build script.

00:19:49.341 --> 00:19:49.946
What is that?

00:19:49.946 --> 00:19:51.820
It's going to say it
generated an acid-graph.

00:19:51.820 --> 00:19:52.420
What is that?

00:19:52.420 --> 00:19:54.452
That took some milliseconds.

00:19:54.452 --> 00:19:56.100
Then I wait a little bit more.

00:19:56.100 --> 00:19:57.180
It says "build running."

00:19:57.180 --> 00:19:59.089
That's good.

00:19:59.089 --> 00:20:00.630
And then, finally,
after we're done--

00:20:00.630 --> 00:20:03.840
it took about 33 seconds,
almost 34 seconds,

00:20:03.840 --> 00:20:06.030
with 2,258 outputs--

00:20:06.030 --> 00:20:08.500
again, whatever that means.

00:20:08.500 --> 00:20:10.116
So not too bad--
it took 30 seconds.

00:20:10.116 --> 00:20:12.240
I'm still making cups of
coffee or browsing Reddit.

00:20:12.240 --> 00:20:13.323
That's not too impressive.

00:20:13.323 --> 00:20:15.980
That's not what I wanted.

00:20:15.980 --> 00:20:17.780
So why do I care about
build_runner then?

00:20:17.780 --> 00:20:19.310
Why was that exciting?

00:20:19.310 --> 00:20:20.840
Really, there's
three parts here--

00:20:20.840 --> 00:20:22.730
one, it's automatically
configured.

00:20:22.730 --> 00:20:24.230
So just like
Transformers you don't

00:20:24.230 --> 00:20:25.940
have to do much as an end user.

00:20:25.940 --> 00:20:29.060
If you use a package that
requires code generation,

00:20:29.060 --> 00:20:31.235
it just works out of the
box-- with a little bit

00:20:31.235 --> 00:20:34.730
of configuration on
their part, not yours.

00:20:34.730 --> 00:20:35.690
You can build.

00:20:35.690 --> 00:20:36.680
You can serve.

00:20:36.680 --> 00:20:38.150
And one of the brand new
things you can do is you

00:20:38.150 --> 00:20:39.170
can actually just watch.

00:20:39.170 --> 00:20:40.260
If you don't want
to serve, you just

00:20:40.260 --> 00:20:42.020
want to output to a
directory somewhere,

00:20:42.020 --> 00:20:43.589
you can totally do that.

00:20:43.589 --> 00:20:46.130
And it works with AngularDart
today and the alpha pre-release

00:20:46.130 --> 00:20:47.510
that we have available.

00:20:52.370 --> 00:20:53.410
So what does this do?

00:20:53.410 --> 00:20:55.427
It's almost the exact
same graph as before

00:20:55.427 --> 00:20:57.760
but with this nice little
green box, which I like a lot.

00:20:57.760 --> 00:20:59.980
And, again, this is me
simplifying a little bit.

00:20:59.980 --> 00:21:02.690
But, basically, for every
library, or every source file,

00:21:02.690 --> 00:21:04.990
we can actually cache
the result on disk,

00:21:04.990 --> 00:21:07.510
and know that that
cannot possibly change,

00:21:07.510 --> 00:21:09.360
and let that whole
part of the graph,

00:21:09.360 --> 00:21:11.890
or lots of parts of the
graphs, stay cached,

00:21:11.890 --> 00:21:13.480
persistent on disk.

00:21:13.480 --> 00:21:15.670
Imagine you have a
package or 10 packages

00:21:15.670 --> 00:21:17.350
and you're only modifying one.

00:21:17.350 --> 00:21:19.300
The other nine packages
stay cached on disk

00:21:19.300 --> 00:21:22.010
forever until you update
Dart or update AngularDart

00:21:22.010 --> 00:21:25.610
or do something really big
that requires an invalidation.

00:21:25.610 --> 00:21:27.520
So now I'm going to
show you build_runner

00:21:27.520 --> 00:21:32.050
after the first build, which is
the actually impressive part.

00:21:32.050 --> 00:21:33.790
So this is what
you see afterwards.

00:21:33.790 --> 00:21:35.440
Unlike pub serve
or pubs build, you

00:21:35.440 --> 00:21:37.750
do have an on-disk build folder.

00:21:37.750 --> 00:21:39.920
You can actually see the
generated files on disk.

00:21:39.920 --> 00:21:41.080
If you want to click
into them and see

00:21:41.080 --> 00:21:42.700
what happened, why
something failed,

00:21:42.700 --> 00:21:45.370
why something is big or not,
you do have the real Dart

00:21:45.370 --> 00:21:46.480
files on disk.

00:21:46.480 --> 00:21:48.710
You have the real DDC
JavaScript files on disk.

00:21:48.710 --> 00:21:52.399
You can really inspect
everything right in your IDE.

00:21:52.399 --> 00:21:53.940
And then let's do
this one more time.

00:21:56.884 --> 00:21:58.300
That's not the
animation I wanted.

00:21:58.300 --> 00:22:01.780
All right, as you
can see here, it

00:22:01.780 --> 00:22:03.340
does run the same build graph.

00:22:03.340 --> 00:22:04.610
It takes some time.

00:22:04.610 --> 00:22:08.410
But this time it took 2.4
seconds instead of 30 seconds.

00:22:08.410 --> 00:22:09.560
That's a pretty big deal.

00:22:09.560 --> 00:22:11.464
That's from 30
seconds to 2 seconds.

00:22:11.464 --> 00:22:13.834
[APPLAUSE]

00:22:17.630 --> 00:22:20.411
So that's the fidelity
we're looking for.

00:22:20.411 --> 00:22:21.660
And I know that's not perfect.

00:22:21.660 --> 00:22:23.060
But that two seconds
is the difference

00:22:23.060 --> 00:22:24.590
between going to
get a cup of coffee

00:22:24.590 --> 00:22:27.450
and just refreshing your browser
tab and blinking a few times.

00:22:27.450 --> 00:22:30.600
So we're going for that
blinking a few times motif.

00:22:33.250 --> 00:22:35.890
And the really exciting
part, which I find exciting--

00:22:35.890 --> 00:22:37.660
maybe others don't--

00:22:37.660 --> 00:22:40.210
is, if you have no changes,
it takes under a second.

00:22:40.210 --> 00:22:42.380
So this might not
sound like a lot.

00:22:42.380 --> 00:22:44.320
But let's say imagine
that you have a Travis

00:22:44.320 --> 00:22:46.120
instance or a CircleCI
instance running

00:22:46.120 --> 00:22:48.010
your continuous
integration, and you

00:22:48.010 --> 00:22:49.900
change some change
log or some comment

00:22:49.900 --> 00:22:52.640
somewhere that does not have
any impact on your application,

00:22:52.640 --> 00:22:55.540
your Travis will be able
to build in under a second.

00:22:55.540 --> 00:22:57.100
So this is actually a huge deal.

00:22:57.100 --> 00:22:59.516
This encourages you to make
frequent updates to your repo,

00:22:59.516 --> 00:23:00.790
not these big, giant updates.

00:23:00.790 --> 00:23:05.260
And this is also the difference
between going for a walk

00:23:05.260 --> 00:23:08.760
before your CI's done and just
working on your next task,

00:23:08.760 --> 00:23:10.400
branching and working more.

00:23:10.400 --> 00:23:12.340
So pretty good.

00:23:12.340 --> 00:23:15.080
One more thing.

00:23:15.080 --> 00:23:16.760
You can cache in on Travis.

00:23:16.760 --> 00:23:18.320
So this is an
example for Travis.

00:23:18.320 --> 00:23:19.820
Just like your pub
cache folder, you

00:23:19.820 --> 00:23:21.800
can cache your Dart tool folder.

00:23:21.800 --> 00:23:24.380
That has all these generated
files and the acid-graph

00:23:24.380 --> 00:23:27.290
and all this information we need
to not reproduce information

00:23:27.290 --> 00:23:29.950
to make your builds fast.

00:23:29.950 --> 00:23:33.411
And I'm pretty sure it
works for other stuff too.

00:23:33.411 --> 00:23:33.910
OK.

00:23:33.910 --> 00:23:35.080
But what about serve or watch?

00:23:35.080 --> 00:23:37.330
I don't want to just build
things over and over again.

00:23:37.330 --> 00:23:40.187
OK, that's fair.

00:23:40.187 --> 00:23:41.020
It's the same thing.

00:23:41.020 --> 00:23:43.630
So instead of doing
build_runner build,

00:23:43.630 --> 00:23:46.000
you can do build_runner
watch or build_runner serve.

00:23:46.000 --> 00:23:48.400
Watch will actually
add file watchers.

00:23:48.400 --> 00:23:51.430
And the nice thing about this
is it starts up a Dart VM

00:23:51.430 --> 00:23:53.020
and keeps it hot in memory.

00:23:53.020 --> 00:23:56.950
So as the VM and the JIT
gets warm, it stays open.

00:23:56.950 --> 00:24:00.250
And this is the same build
that took 2.4 seconds before.

00:24:00.250 --> 00:24:01.626
Now it's taking
200 milliseconds.

00:24:01.626 --> 00:24:03.500
So this is the kind of
build that we actually

00:24:03.500 --> 00:24:04.710
do expect for small changes.

00:24:04.710 --> 00:24:05.590
You keep this thing running.

00:24:05.590 --> 00:24:06.349
You make changes.

00:24:06.349 --> 00:24:07.390
You refresh your browser.

00:24:07.390 --> 00:24:09.181
And it should all happen
in under a second.

00:24:12.540 --> 00:24:13.040
OK.

00:24:13.040 --> 00:24:13.840
So what is next?

00:24:13.840 --> 00:24:16.310
I have a few minutes still.

00:24:16.310 --> 00:24:19.790
If you're looking for the 2018
roadmap, we don't have one yet.

00:24:19.790 --> 00:24:20.915
It's a work in progress.

00:24:20.915 --> 00:24:22.040
But I'm going to tell you--

00:24:22.040 --> 00:24:23.581
I'll talk a little
about what we want

00:24:23.581 --> 00:24:27.940
to do when identifying
the 2018 roadmap.

00:24:27.940 --> 00:24:30.370
So the number one thing that's
important to us right now

00:24:30.370 --> 00:24:35.802
is releasing a 5.0 beta whenever
the SDK 2.0 beta gets released.

00:24:35.802 --> 00:24:37.510
And that might sound
like me hand-waving,

00:24:37.510 --> 00:24:39.051
but the reality here
is that it might

00:24:39.051 --> 00:24:40.570
be small tweaks of
the type system,

00:24:40.570 --> 00:24:41.894
small tweaks to core libraries.

00:24:41.894 --> 00:24:43.810
And we don't want to
give you a stable product

00:24:43.810 --> 00:24:45.185
and then say a
week later we need

00:24:45.185 --> 00:24:46.910
to have a 6.0 breaking release.

00:24:46.910 --> 00:24:49.210
So we're going to stay in
this kind of alpha level

00:24:49.210 --> 00:24:51.960
until the SDK gets
almost completed.

00:24:51.960 --> 00:24:54.550
And then we're going to release
a beta and go from there.

00:24:57.560 --> 00:24:59.310
There's only three
things we're targeting.

00:24:59.310 --> 00:25:02.030
One is we're targeting smaller
code for faster startup.

00:25:02.030 --> 00:25:04.920
We want less JavaScript to be
admitted just for the simplest

00:25:04.920 --> 00:25:08.310
apps and complex apps.

00:25:08.310 --> 00:25:10.060
We're adding a new
template parser, almost

00:25:10.060 --> 00:25:11.830
from scratch, that gives
you a lot better errors.

00:25:11.830 --> 00:25:14.260
It's actually the same one
used by the analyzer plugin

00:25:14.260 --> 00:25:16.290
that I showed you
earlier with the IDE.

00:25:18.919 --> 00:25:20.460
And we want to give
you more features

00:25:20.460 --> 00:25:22.150
to do little performance
tunes yourself.

00:25:22.150 --> 00:25:23.524
So one big request
from people is

00:25:23.524 --> 00:25:26.290
that, OK, we can write
really complex apps,

00:25:26.290 --> 00:25:27.790
but when we hit
performance problems

00:25:27.790 --> 00:25:29.340
we don't know what to do.

00:25:29.340 --> 00:25:31.020
We want to give some
common solutions

00:25:31.020 --> 00:25:33.897
to some common problems,
like the injector issue,

00:25:33.897 --> 00:25:34.980
so you can tweak your app.

00:25:38.270 --> 00:25:40.060
And once we do all
that, we'll actually

00:25:40.060 --> 00:25:44.040
find the mythical 5.0 final
release and be on our way.

00:25:48.140 --> 00:25:48.680
OK.

00:25:48.680 --> 00:25:49.910
So thanks.

00:25:49.910 --> 00:25:50.932
That's everything.

00:25:50.932 --> 00:25:53.390
If you want to see the code I
referenced today or anything,

00:25:53.390 --> 00:25:55.070
you can go on
github.com/matanlurey,

00:25:55.070 --> 00:25:57.350
twitter.com/matanlurey,
or you can email me

00:25:57.350 --> 00:25:59.460
at matanl@google.com.

00:25:59.460 --> 00:25:59.960
Thank you.

00:25:59.960 --> 00:26:02.295
[APPLAUSE]

